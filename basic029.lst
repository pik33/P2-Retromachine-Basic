00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic029.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 29
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_cload = 184
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 50 CC A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 33 67 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 32 65 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 33 65 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 66 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 64 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 32 65 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 33 67 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 88 BB 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed BC B8 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 90 A9 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 9C AB 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 F4 A6 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 F4 13 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 DC B2 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 68 45 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 18 6D 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa D0 6A 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb A8 7C 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 24 5E 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     49 E4 05 F1 | 	add	objptr, #73
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     59 00 00 FF 
00818     93 E5 05 F1 | 	add	objptr, ##45971
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     59 00 00 FF 
0082c     DC E5 85 F1 | 	sub	objptr, ##46044
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     C8 07 B2 FD | 	call	#__system___waitms
0083c     59 00 00 FF 
00840     DC E5 05 F1 | 	add	objptr, ##46044
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     59 00 00 FF 
00854     DC E5 85 F1 | 	sub	objptr, ##46044
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     A0 07 B2 FD | 	call	#__system___waitms
00864     59 00 00 FF 
00868     DC E5 05 F1 | 	add	objptr, ##46044
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     59 00 00 FF 
0087c     DC E5 85 F1 | 	sub	objptr, ##46044
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     78 07 B2 FD | 	call	#__system___waitms
0088c     59 00 00 FF 
00890     DC E5 05 F1 | 	add	objptr, ##46044
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     59 00 00 FF 
008a4     DC E5 85 F1 | 	sub	objptr, ##46044
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     59 00 00 FF 
008d4     54 E5 05 F1 | 	add	objptr, ##45908
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     59 00 00 FF 
00914     5C E5 85 F1 | 	sub	objptr, ##45916
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     D0 FC B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     20 FD B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     10 FD B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     59 00 00 FF 
00980     64 E5 05 F1 | 	add	objptr, ##45924
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     59 00 00 FF 
009ac     80 E5 85 F1 | 	sub	objptr, ##45952
009b0     74 FC B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     59 00 00 FF 
009e0     64 E5 05 F1 | 	add	objptr, ##45924
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     59 00 00 FF 
00a08     80 E5 85 F1 | 	sub	objptr, ##45952
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     23 4A 05 F6 | 	mov	COUNT_, #35
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     50 F0 07 F1 | 	add	ptra, ##592
00a2c     37 00 00 FF 
00a30     4C E4 05 F1 | 	add	objptr, ##28236
00a34     F2 12 02 FB | 	rdlong	arg01, objptr
00a38     37 00 00 FF 
00a3c     4C E4 85 F1 | 	sub	objptr, ##28236
00a40     D8 27 B2 FD | 	call	#__system__RTrim_S
00a44     FD 12 02 F6 | 	mov	arg01, result1
00a48     10 27 B2 FD | 	call	#__system__LTrim_S
00a4c     37 00 00 FF 
00a50     50 E4 05 F1 | 	add	objptr, ##28240
00a54     F2 FA 61 FC | 	wrlong	result1, objptr
00a58     04 E4 05 F1 | 	add	objptr, #4
00a5c     FF FF FF FF 
00a60     F2 FE 6B FC | 	wrlong	##-1, objptr
00a64     22 00 00 FF 
00a68     A4 E5 05 F1 | 	add	objptr, ##17828
00a6c     F2 00 68 FC | 	wrlong	#0, objptr
00a70     0F 00 00 FF 
00a74     4C E5 85 F1 | 	sub	objptr, ##8012
00a78     F2 00 68 FC | 	wrlong	#0, objptr
00a7c     4A 00 00 FF 
00a80     AC E4 85 F1 | 	sub	objptr, ##38060
00a84     00 1E 06 F6 | 	mov	local01, #0
00a88                 | LR__0020
00a88                 | ' 
00a88                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a88                 | ' 
00a88                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
00a88                 | ' 
00a88                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a88     00 20 06 F6 | 	mov	local02, #0
00a8c     20 4E 05 F1 | 	add	fp, #32
00a90     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a94                 | LR__0021
00a94     10 23 02 F6 | 	mov	local03, local02
00a98     02 22 66 F0 | 	shl	local03, #2
00a9c     A7 22 02 F1 | 	add	local03, fp
00aa0     11 01 68 FC | 	wrlong	#0, local03
00aa4     01 20 06 F1 | 	add	local02, #1
00aa8     7E 20 56 F2 | 	cmps	local02, #126 wc
00aac     E4 FF 9F CD |  if_b	jmp	#LR__0021
00ab0                 | LR__0022
00ab0     20 4E 85 F1 | 	sub	fp, #32
00ab4                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00ab4     00 20 06 F6 | 	mov	local02, #0
00ab8     35 00 00 FF 
00abc     3C E4 05 F1 | 	add	objptr, ##27196
00ac0     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00ac4                 | LR__0023
00ac4     10 25 02 F6 | 	mov	local04, local02
00ac8     03 24 66 F0 | 	shl	local04, #3
00acc     F2 24 02 F1 | 	add	local04, objptr
00ad0     82 01 00 FF 
00ad4     C6 17 06 F6 | 	mov	arg03, ##@LR__4987
00ad8     12 17 62 FC | 	wrlong	arg03, local04
00adc     10 25 02 F6 | 	mov	local04, local02
00ae0     03 24 66 F0 | 	shl	local04, #3
00ae4     F2 26 02 F6 | 	mov	local05, objptr
00ae8     F2 24 02 F1 | 	add	local04, objptr
00aec     00 28 06 F6 | 	mov	local06, #0
00af0     04 24 06 F1 | 	add	local04, #4
00af4     12 01 68 FC | 	wrlong	#0, local04
00af8     01 20 06 F1 | 	add	local02, #1
00afc     7E 20 56 F2 | 	cmps	local02, #126 wc
00b00     C0 FF 9F CD |  if_b	jmp	#LR__0023
00b04                 | LR__0024
00b04     02 00 00 FF 
00b08     10 E4 05 F1 | 	add	objptr, ##1040
00b0c     F2 12 02 FB | 	rdlong	arg01, objptr
00b10     37 00 00 FF 
00b14     4C E4 85 F1 | 	sub	objptr, ##28236
00b18     00 27 B2 FD | 	call	#__system__RTrim_S
00b1c     FD 12 02 F6 | 	mov	arg01, result1
00b20     38 26 B2 FD | 	call	#__system__LTrim_S
00b24     37 00 00 FF 
00b28     4C E4 05 F1 | 	add	objptr, ##28236
00b2c     F2 FA 61 FC | 	wrlong	result1, objptr
00b30     82 01 00 FF 
00b34     C7 25 06 F6 | 	mov	local04, ##@LR__4988
00b38     22 00 00 FF 
00b3c     EC E5 05 F1 | 	add	objptr, ##17900
00b40     F2 24 62 FC | 	wrlong	local04, objptr
00b44     22 00 00 FF 
00b48     EC E5 85 F1 | 	sub	objptr, ##17900
00b4c     F2 12 02 FB | 	rdlong	arg01, objptr
00b50     37 00 00 FF 
00b54     4C E4 85 F1 | 	sub	objptr, ##28236
00b58     09 2B 02 F6 | 	mov	local07, arg01
00b5c     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b60                 | LR__0025
00b60     15 FB C9 FA | 	rdbyte	result1, local07 wz
00b64     01 2A 06 51 |  if_ne	add	local07, #1
00b68     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b6c                 | LR__0026
00b6c     09 2B 8A F1 | 	sub	local07, arg01 wz
00b70     5A 00 00 FF 
00b74     3C E4 05 F1 | 	add	objptr, ##46140
00b78     F2 2A 62 FC | 	wrlong	local07, objptr
00b7c                 | ' if l=0 then goto 101
00b7c     5A 00 00 FF 
00b80     3C E4 85 F1 | 	sub	objptr, ##46140
00b84     FC 28 90 AD |  if_e	jmp	#LR__0150
00b88     5A 00 00 FF 
00b8c     40 E4 05 F1 | 	add	objptr, ##46144
00b90     F2 00 68 FC | 	wrlong	#0, objptr
00b94                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b94                 | ' for i=1 to len(line$)
00b94     01 20 06 F6 | 	mov	local02, #1
00b98     22 00 00 FF 
00b9c     F4 E5 85 F1 | 	sub	objptr, ##17908
00ba0     F2 12 02 FB | 	rdlong	arg01, objptr
00ba4     37 00 00 FF 
00ba8     4C E4 85 F1 | 	sub	objptr, ##28236
00bac     09 2B 02 F6 | 	mov	local07, arg01
00bb0     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00bb4                 | LR__0027
00bb4     15 FB C9 FA | 	rdbyte	result1, local07 wz
00bb8     01 2A 06 51 |  if_ne	add	local07, #1
00bbc     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00bc0                 | LR__0028
00bc0     09 2B 82 F1 | 	sub	local07, arg01
00bc4     15 2D 02 F6 | 	mov	local08, local07
00bc8     01 2C 06 F1 | 	add	local08, #1
00bcc                 | LR__0029
00bcc     16 21 52 F2 | 	cmps	local02, local08 wc
00bd0     00 01 90 3D |  if_ae	jmp	#LR__0032
00bd4                 | ' 
00bd4                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bd4     37 00 00 FF 
00bd8     4C E4 05 F1 | 	add	objptr, ##28236
00bdc     F2 12 02 FB | 	rdlong	arg01, objptr
00be0     37 00 00 FF 
00be4     4C E4 85 F1 | 	sub	objptr, ##28236
00be8     10 15 02 F6 | 	mov	arg02, local02
00bec     01 16 06 F6 | 	mov	arg03, #1
00bf0     B0 22 B2 FD | 	call	#__system__Mid_S
00bf4     FD 12 02 F6 | 	mov	arg01, result1
00bf8     82 01 00 FF 
00bfc     C8 15 06 F6 | 	mov	arg02, ##@LR__4989
00c00     34 01 B2 FD | 	call	#__system___string_cmp
00c04     00 FA 0D F2 | 	cmp	result1, #0 wz
00c08     2C 00 90 5D |  if_ne	jmp	#LR__0030
00c0c     5A 00 00 FF 
00c10     40 E4 05 F1 | 	add	objptr, ##46144
00c14     F2 22 0A FB | 	rdlong	local03, objptr wz
00c18     5A 00 00 FF 
00c1c     40 E4 85 F1 | 	sub	objptr, ##46144
00c20     5A 00 00 AF 
00c24     40 E4 05 A1 |  if_e	add	objptr, ##46144
00c28     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c2c     5A 00 00 AF 
00c30     40 E4 85 A1 |  if_e	sub	objptr, ##46144
00c34     60 00 90 AD |  if_e	jmp	#LR__0031
00c38                 | LR__0030
00c38     37 00 00 FF 
00c3c     4C E4 05 F1 | 	add	objptr, ##28236
00c40     F2 12 02 FB | 	rdlong	arg01, objptr
00c44     37 00 00 FF 
00c48     4C E4 85 F1 | 	sub	objptr, ##28236
00c4c     10 15 02 F6 | 	mov	arg02, local02
00c50     01 16 06 F6 | 	mov	arg03, #1
00c54     4C 22 B2 FD | 	call	#__system__Mid_S
00c58     FD 12 02 F6 | 	mov	arg01, result1
00c5c     82 01 00 FF 
00c60     CA 15 06 F6 | 	mov	arg02, ##@LR__4990
00c64     D0 00 B2 FD | 	call	#__system___string_cmp
00c68     00 FA 0D F2 | 	cmp	result1, #0 wz
00c6c     5A 00 00 AF 
00c70     40 E4 05 A1 |  if_e	add	objptr, ##46144
00c74     F2 22 02 AB |  if_e	rdlong	local03, objptr
00c78     5A 00 00 AF 
00c7c     40 E4 85 A1 |  if_e	sub	objptr, ##46144
00c80     01 22 0E A2 |  if_e	cmp	local03, #1 wz
00c84     5A 00 00 AF 
00c88     40 E4 05 A1 |  if_e	add	objptr, ##46144
00c8c     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c90     5A 00 00 AF 
00c94     40 E4 85 A1 |  if_e	sub	objptr, ##46144
00c98                 | LR__0031
00c98     10 25 02 F6 | 	mov	local04, local02
00c9c     03 24 66 F0 | 	shl	local04, #3
00ca0     35 00 00 FF 
00ca4     3C E4 05 F1 | 	add	objptr, ##27196
00ca8     F2 26 02 F6 | 	mov	local05, objptr
00cac     F2 24 02 F1 | 	add	local04, objptr
00cb0     25 00 00 FF 
00cb4     04 E4 05 F1 | 	add	objptr, ##18948
00cb8     F2 28 02 FB | 	rdlong	local06, objptr
00cbc     5A 00 00 FF 
00cc0     40 E4 85 F1 | 	sub	objptr, ##46144
00cc4     04 24 06 F1 | 	add	local04, #4
00cc8     12 29 62 FC | 	wrlong	local06, local04
00ccc     01 20 06 F1 | 	add	local02, #1
00cd0     F8 FE 9F FD | 	jmp	#LR__0029
00cd4                 | LR__0032
00cd4     01 20 06 F6 | 	mov	local02, #1
00cd8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cd8                 | LR__0033
00cd8     37 00 00 FF 
00cdc     4C E4 05 F1 | 	add	objptr, ##28236
00ce0     F2 12 02 FB | 	rdlong	arg01, objptr
00ce4     37 00 00 FF 
00ce8     4C E4 85 F1 | 	sub	objptr, ##28236
00cec     10 15 02 F6 | 	mov	arg02, local02
00cf0     01 16 06 F6 | 	mov	arg03, #1
00cf4     AC 21 B2 FD | 	call	#__system__Mid_S
00cf8     FD 12 02 F6 | 	mov	arg01, result1
00cfc     82 01 00 FF 
00d00     CC 2F 06 F6 | 	mov	local09, ##@LR__4991
00d04     17 15 02 F6 | 	mov	arg02, local09
00d08     2C 00 B2 FD | 	call	#__system___string_cmp
00d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
00d10     34 00 90 5D |  if_ne	jmp	#LR__0034
00d14     10 27 02 F6 | 	mov	local05, local02
00d18     03 26 66 F0 | 	shl	local05, #3
00d1c     35 00 00 FF 
00d20     3C E4 05 F1 | 	add	objptr, ##27196
00d24     F2 28 02 F6 | 	mov	local06, objptr
00d28     F2 26 02 F1 | 	add	local05, objptr
00d2c     04 26 06 F1 | 	add	local05, #4
00d30     13 31 02 FB | 	rdlong	local10, local05
00d34     04 26 86 F1 | 	sub	local05, #4
00d38     18 33 0A F6 | 	mov	local11, local10 wz
00d3c     35 00 00 FF 
00d40     3C E4 85 F1 | 	sub	objptr, ##27196
00d44     24 00 90 AD |  if_e	jmp	#LR__0035
00d48                 | LR__0034
00d48     5A 00 00 FF 
00d4c     3C E4 05 F1 | 	add	objptr, ##46140
00d50     F2 34 02 FB | 	rdlong	local12, objptr
00d54     5A 00 00 FF 
00d58     3C E4 85 F1 | 	sub	objptr, ##46140
00d5c     1A 37 02 F6 | 	mov	local13, local12
00d60     1B 21 52 F2 | 	cmps	local02, local13 wc
00d64     01 20 06 C1 |  if_b	add	local02, #1
00d68     6C FF 9F CD |  if_b	jmp	#LR__0033
00d6c                 | LR__0035
00d6c                 | ' 
00d6c                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d6c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d6c     5A 00 00 FF 
00d70     3C E4 05 F1 | 	add	objptr, ##46140
00d74     F2 24 02 FB | 	rdlong	local04, objptr
00d78     5A 00 00 FF 
00d7c     3C E4 85 F1 | 	sub	objptr, ##46140
00d80     12 21 52 F2 | 	cmps	local02, local04 wc
00d84     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d88     37 00 00 FF 
00d8c     4C E4 05 F1 | 	add	objptr, ##28236
00d90     F2 28 02 FB | 	rdlong	local06, objptr
00d94     37 00 00 FF 
00d98     4C E4 85 F1 | 	sub	objptr, ##28236
00d9c     14 13 02 F6 | 	mov	arg01, local06
00da0     09 2B 02 F6 | 	mov	local07, arg01
00da4     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00da8                 | LR__0036
00da8     15 FB C9 FA | 	rdbyte	result1, local07 wz
00dac     01 2A 06 51 |  if_ne	add	local07, #1
00db0     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00db4                 | LR__0037
00db4     09 2B 82 F1 | 	sub	local07, arg01
00db8     15 15 02 F6 | 	mov	arg02, local07
00dbc     10 15 82 F1 | 	sub	arg02, local02
00dc0     14 13 02 F6 | 	mov	arg01, local06
00dc4     4C 20 B2 FD | 	call	#__system__Right_S
00dc8     FD 12 02 F6 | 	mov	arg01, result1
00dcc     4C 24 B2 FD | 	call	#__system__RTrim_S
00dd0     FD 12 02 F6 | 	mov	arg01, result1
00dd4     84 23 B2 FD | 	call	#__system__LTrim_S
00dd8     5A 00 00 FF 
00ddc     44 E4 05 F1 | 	add	objptr, ##46148
00de0     F2 FA 61 FC | 	wrlong	result1, objptr
00de4     22 00 00 FF 
00de8     F8 E5 85 F1 | 	sub	objptr, ##17912
00dec     F2 12 02 FB | 	rdlong	arg01, objptr
00df0     37 00 00 FF 
00df4     4C E4 85 F1 | 	sub	objptr, ##28236
00df8     01 20 86 F1 | 	sub	local02, #1
00dfc     10 15 02 F6 | 	mov	arg02, local02
00e00     88 1F B2 FD | 	call	#__system__Left_S
00e04     FD 12 02 F6 | 	mov	arg01, result1
00e08     10 24 B2 FD | 	call	#__system__RTrim_S
00e0c     FD 12 02 F6 | 	mov	arg01, result1
00e10     48 23 B2 FD | 	call	#__system__LTrim_S
00e14     37 00 00 FF 
00e18     4C E4 05 F1 | 	add	objptr, ##28236
00e1c     F2 FA 61 FC | 	wrlong	result1, objptr
00e20     37 00 00 FF 
00e24     4C E4 85 F1 | 	sub	objptr, ##28236
00e28     1C 00 90 FD | 	jmp	#LR__0039
00e2c                 | LR__0038
00e2c     82 01 00 FF 
00e30     CE 25 06 F6 | 	mov	local04, ##@LR__4992
00e34     5A 00 00 FF 
00e38     44 E4 05 F1 | 	add	objptr, ##46148
00e3c     F2 24 62 FC | 	wrlong	local04, objptr
00e40     5A 00 00 FF 
00e44     44 E4 85 F1 | 	sub	objptr, ##46148
00e48                 | LR__0039
00e48                 | ' 'print "line$=";line$
00e48                 | ' 'print "rest$=";rest$
00e48                 | ' 
00e48                 | ' 
00e48                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e48     37 00 00 FF 
00e4c     54 E4 05 F1 | 	add	objptr, ##28244
00e50     F2 24 02 FB | 	rdlong	local04, objptr
00e54     37 00 00 FF 
00e58     54 E4 85 F1 | 	sub	objptr, ##28244
00e5c     FF FF 7F FF 
00e60     FF 25 0E F2 | 	cmp	local04, ##-1 wz
00e64     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e68     5A 00 00 FF 
00e6c     44 E4 05 F1 | 	add	objptr, ##46148
00e70     F2 12 02 FB | 	rdlong	arg01, objptr
00e74     5A 00 00 FF 
00e78     44 E4 85 F1 | 	sub	objptr, ##46148
00e7c     82 01 00 FF 
00e80     CF 15 06 F6 | 	mov	arg02, ##@LR__4993
00e84     B0 FE B1 FD | 	call	#__system___string_cmp
00e88     00 FA 0D F2 | 	cmp	result1, #0 wz
00e8c     37 00 00 5F 
00e90     54 E4 05 51 |  if_ne	add	objptr, ##28244
00e94     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e98     37 00 00 5F 
00e9c     54 E4 85 51 |  if_ne	sub	objptr, ##28244
00ea0     08 01 90 5D |  if_ne	jmp	#LR__0044
00ea4                 | LR__0040
00ea4                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00ea4     37 00 00 FF 
00ea8     54 E4 05 F1 | 	add	objptr, ##28244
00eac     F2 24 02 FB | 	rdlong	local04, objptr
00eb0     37 00 00 FF 
00eb4     54 E4 85 F1 | 	sub	objptr, ##28244
00eb8     FF FF 7F FF 
00ebc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
00ec0     3C 00 90 5D |  if_ne	jmp	#LR__0041
00ec4     5A 00 00 FF 
00ec8     44 E4 05 F1 | 	add	objptr, ##46148
00ecc     F2 12 02 FB | 	rdlong	arg01, objptr
00ed0     5A 00 00 FF 
00ed4     44 E4 85 F1 | 	sub	objptr, ##46148
00ed8     82 01 00 FF 
00edc     D0 15 06 F6 | 	mov	arg02, ##@LR__4994
00ee0     54 FE B1 FD | 	call	#__system___string_cmp
00ee4     00 FA 0D F2 | 	cmp	result1, #0 wz
00ee8     37 00 00 AF 
00eec     54 E4 05 A1 |  if_e	add	objptr, ##28244
00ef0     F2 06 68 AC |  if_e	wrlong	#3, objptr
00ef4     37 00 00 AF 
00ef8     54 E4 85 A1 |  if_e	sub	objptr, ##28244
00efc     AC 00 90 AD |  if_e	jmp	#LR__0044
00f00                 | LR__0041
00f00                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00f00     37 00 00 FF 
00f04     54 E4 05 F1 | 	add	objptr, ##28244
00f08     F2 24 02 FB | 	rdlong	local04, objptr
00f0c     37 00 00 FF 
00f10     54 E4 85 F1 | 	sub	objptr, ##28244
00f14     04 24 0E F2 | 	cmp	local04, #4 wz
00f18     3C 00 90 5D |  if_ne	jmp	#LR__0042
00f1c     5A 00 00 FF 
00f20     44 E4 05 F1 | 	add	objptr, ##46148
00f24     F2 12 02 FB | 	rdlong	arg01, objptr
00f28     5A 00 00 FF 
00f2c     44 E4 85 F1 | 	sub	objptr, ##46148
00f30     82 01 00 FF 
00f34     D1 15 06 F6 | 	mov	arg02, ##@LR__4995
00f38     FC FD B1 FD | 	call	#__system___string_cmp
00f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f40     37 00 00 5F 
00f44     54 E4 05 51 |  if_ne	add	objptr, ##28244
00f48     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f4c     37 00 00 5F 
00f50     54 E4 85 51 |  if_ne	sub	objptr, ##28244
00f54     54 00 90 5D |  if_ne	jmp	#LR__0044
00f58                 | LR__0042
00f58                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f58     37 00 00 FF 
00f5c     54 E4 05 F1 | 	add	objptr, ##28244
00f60     F2 24 02 FB | 	rdlong	local04, objptr
00f64     37 00 00 FF 
00f68     54 E4 85 F1 | 	sub	objptr, ##28244
00f6c     04 24 0E F2 | 	cmp	local04, #4 wz
00f70     38 00 90 5D |  if_ne	jmp	#LR__0043
00f74     5A 00 00 FF 
00f78     44 E4 05 F1 | 	add	objptr, ##46148
00f7c     F2 12 02 FB | 	rdlong	arg01, objptr
00f80     5A 00 00 FF 
00f84     44 E4 85 F1 | 	sub	objptr, ##46148
00f88     82 01 00 FF 
00f8c     D2 15 06 F6 | 	mov	arg02, ##@LR__4996
00f90     A4 FD B1 FD | 	call	#__system___string_cmp
00f94     00 FA 0D F2 | 	cmp	result1, #0 wz
00f98     37 00 00 AF 
00f9c     54 E4 05 A1 |  if_e	add	objptr, ##28244
00fa0     F2 04 68 AC |  if_e	wrlong	#2, objptr
00fa4     37 00 00 AF 
00fa8     54 E4 85 A1 |  if_e	sub	objptr, ##28244
00fac                 | LR__0043
00fac                 | LR__0044
00fac     20 4E 05 F1 | 	add	fp, #32
00fb0     A7 00 68 FC | 	wrlong	#0, fp
00fb4     20 4E 85 F1 | 	sub	fp, #32
00fb8     00 20 06 F6 | 	mov	local02, #0
00fbc     01 38 06 F6 | 	mov	local14, #1
00fc0                 | ' 
00fc0                 | ' ' 1b: find separators
00fc0                 | ' 
00fc0                 | ' 107
00fc0                 | ' separators(0)=0
00fc0                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fc0                 | LR__0045
00fc0     01 20 06 F1 | 	add	local02, #1
00fc4     37 00 00 FF 
00fc8     4C E4 05 F1 | 	add	objptr, ##28236
00fcc     F2 12 02 FB | 	rdlong	arg01, objptr
00fd0     37 00 00 FF 
00fd4     4C E4 85 F1 | 	sub	objptr, ##28236
00fd8     10 15 02 F6 | 	mov	arg02, local02
00fdc     01 16 06 F6 | 	mov	arg03, #1
00fe0     C0 1E B2 FD | 	call	#__system__Mid_S
00fe4     5A 00 00 FF 
00fe8     48 E4 05 F1 | 	add	objptr, ##46152
00fec     F2 FA 61 FC | 	wrlong	result1, objptr
00ff0                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00ff0     FD 12 02 F6 | 	mov	arg01, result1
00ff4     5A 00 00 FF 
00ff8     48 E4 85 F1 | 	sub	objptr, ##46152
00ffc     E4 2B B0 FD | 	call	#_isseparator
01000     00 FA 0D F2 | 	cmp	result1, #0 wz
01004     1C 00 90 AD |  if_e	jmp	#LR__0046
01008     1C 23 02 F6 | 	mov	local03, local14
0100c     02 22 66 F0 | 	shl	local03, #2
01010     20 4E 05 F1 | 	add	fp, #32
01014     A7 22 02 F1 | 	add	local03, fp
01018     11 21 62 FC | 	wrlong	local02, local03
0101c     01 38 06 F1 | 	add	local14, #1
01020     20 4E 85 F1 | 	sub	fp, #32
01024                 | LR__0046
01024     5A 00 00 FF 
01028     3C E4 05 F1 | 	add	objptr, ##46140
0102c     F2 24 02 FB | 	rdlong	local04, objptr
01030     5A 00 00 FF 
01034     3C E4 85 F1 | 	sub	objptr, ##46140
01038     12 21 5A F2 | 	cmps	local02, local04 wcz
0103c     80 FF 9F ED |  if_be	jmp	#LR__0045
01040     1C 23 02 F6 | 	mov	local03, local14
01044     02 22 66 F0 | 	shl	local03, #2
01048     20 4E 05 F1 | 	add	fp, #32
0104c     A7 22 02 F1 | 	add	local03, fp
01050     11 21 62 FC | 	wrlong	local02, local03
01054     00 3A 06 F6 | 	mov	local15, #0
01058                 | ' for i=0 to j-1 
01058     00 20 06 F6 | 	mov	local02, #0
0105c     1C 3D 02 F6 | 	mov	local16, local14
01060     20 4E 85 F1 | 	sub	fp, #32
01064                 | LR__0047
01064     1E 21 52 F2 | 	cmps	local02, local16 wc
01068     88 01 90 3D |  if_ae	jmp	#LR__0051
0106c     10 23 02 F6 | 	mov	local03, local02
01070     02 22 66 F0 | 	shl	local03, #2
01074     20 4E 05 F1 | 	add	fp, #32
01078     A7 22 02 F1 | 	add	local03, fp
0107c     11 27 02 FB | 	rdlong	local05, local03
01080     5A 00 00 FF 
01084     50 E4 05 F1 | 	add	objptr, ##46160
01088     F2 26 62 FC | 	wrlong	local05, objptr
0108c     10 23 02 F6 | 	mov	local03, local02
01090     01 22 06 F1 | 	add	local03, #1
01094     02 22 66 F0 | 	shl	local03, #2
01098     A7 2E 02 F6 | 	mov	local09, fp
0109c     A7 22 02 F1 | 	add	local03, fp
010a0     11 27 02 FB | 	rdlong	local05, local03
010a4     04 E4 05 F1 | 	add	objptr, #4
010a8     F2 26 62 FC | 	wrlong	local05, objptr
010ac                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
010ac     04 E4 85 F1 | 	sub	objptr, #4
010b0     F2 24 02 FB | 	rdlong	local04, objptr
010b4     5A 00 00 FF 
010b8     50 E4 85 F1 | 	sub	objptr, ##46160
010bc     01 24 56 F2 | 	cmps	local04, #1 wc
010c0     20 4E 85 F1 | 	sub	fp, #32
010c4     84 00 90 CD |  if_b	jmp	#LR__0049
010c8     37 00 00 FF 
010cc     4C E4 05 F1 | 	add	objptr, ##28236
010d0     F2 12 02 FB | 	rdlong	arg01, objptr
010d4     23 00 00 FF 
010d8     04 E4 05 F1 | 	add	objptr, ##17924
010dc     F2 14 02 FB | 	rdlong	arg02, objptr
010e0     5A 00 00 FF 
010e4     50 E4 85 F1 | 	sub	objptr, ##46160
010e8     01 16 06 F6 | 	mov	arg03, #1
010ec     B4 1D B2 FD | 	call	#__system__Mid_S
010f0     5A 00 00 FF 
010f4     58 E4 05 F1 | 	add	objptr, ##46168
010f8     F2 FA 61 FC | 	wrlong	result1, objptr
010fc     5A 00 00 FF 
01100     58 E4 85 F1 | 	sub	objptr, ##46168
01104     FD 12 02 F6 | 	mov	arg01, result1
01108     82 01 00 FF 
0110c     D3 15 06 F6 | 	mov	arg02, ##@LR__4997
01110     24 FC B1 FD | 	call	#__system___string_cmp
01114     00 FA 0D F2 | 	cmp	result1, #0 wz
01118     30 00 90 AD |  if_e	jmp	#LR__0048
0111c     1D 2F 02 F6 | 	mov	local09, local15
01120     03 2E 66 F0 | 	shl	local09, #3
01124     35 00 00 FF 
01128     3C E4 05 F1 | 	add	objptr, ##27196
0112c     F2 2E 02 F1 | 	add	local09, objptr
01130     25 00 00 FF 
01134     1C E4 05 F1 | 	add	objptr, ##18972
01138     F2 28 02 FB | 	rdlong	local06, objptr
0113c     5A 00 00 FF 
01140     58 E4 85 F1 | 	sub	objptr, ##46168
01144     17 29 62 FC | 	wrlong	local06, local09
01148     01 3A 06 F1 | 	add	local15, #1
0114c                 | LR__0048
0114c                 | LR__0049
0114c     37 00 00 FF 
01150     4C E4 05 F1 | 	add	objptr, ##28236
01154     F2 12 02 FB | 	rdlong	arg01, objptr
01158     23 00 00 FF 
0115c     04 E4 05 F1 | 	add	objptr, ##17924
01160     F2 14 02 FB | 	rdlong	arg02, objptr
01164     01 14 06 F1 | 	add	arg02, #1
01168     04 E4 05 F1 | 	add	objptr, #4
0116c     F2 16 02 FB | 	rdlong	arg03, objptr
01170     04 E4 85 F1 | 	sub	objptr, #4
01174     F2 30 02 FB | 	rdlong	local10, objptr
01178     5A 00 00 FF 
0117c     50 E4 85 F1 | 	sub	objptr, ##46160
01180     18 33 02 F6 | 	mov	local11, local10
01184     19 17 82 F1 | 	sub	arg03, local11
01188     01 16 86 F1 | 	sub	arg03, #1
0118c     14 1D B2 FD | 	call	#__system__Mid_S
01190     5A 00 00 FF 
01194     58 E4 05 F1 | 	add	objptr, ##46168
01198     F2 FA 61 FC | 	wrlong	result1, objptr
0119c     5A 00 00 FF 
011a0     58 E4 85 F1 | 	sub	objptr, ##46168
011a4     FD 12 02 F6 | 	mov	arg01, result1
011a8     82 01 00 FF 
011ac     D4 15 06 F6 | 	mov	arg02, ##@LR__4998
011b0     84 FB B1 FD | 	call	#__system___string_cmp
011b4     00 FA 0D F2 | 	cmp	result1, #0 wz
011b8     30 00 90 AD |  if_e	jmp	#LR__0050
011bc     1D 2F 02 F6 | 	mov	local09, local15
011c0     03 2E 66 F0 | 	shl	local09, #3
011c4     35 00 00 FF 
011c8     3C E4 05 F1 | 	add	objptr, ##27196
011cc     F2 2E 02 F1 | 	add	local09, objptr
011d0     25 00 00 FF 
011d4     1C E4 05 F1 | 	add	objptr, ##18972
011d8     F2 28 02 FB | 	rdlong	local06, objptr
011dc     5A 00 00 FF 
011e0     58 E4 85 F1 | 	sub	objptr, ##46168
011e4     17 29 62 FC | 	wrlong	local06, local09
011e8     01 3A 06 F1 | 	add	local15, #1
011ec                 | LR__0050
011ec     01 20 06 F1 | 	add	local02, #1
011f0     70 FE 9F FD | 	jmp	#LR__0047
011f4                 | LR__0051
011f4     00 20 06 F6 | 	mov	local02, #0
011f8                 | ' 
011f8                 | ' ' 1d : find strings
011f8                 | ' 
011f8                 | ' i=0
011f8                 | ' do
011f8                 | LR__0052
011f8                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011f8     10 27 02 F6 | 	mov	local05, local02
011fc     03 26 66 F0 | 	shl	local05, #3
01200     35 00 00 FF 
01204     3C E4 05 F1 | 	add	objptr, ##27196
01208     F2 26 02 F1 | 	add	local05, objptr
0120c     13 13 02 FB | 	rdlong	arg01, local05
01210     82 01 00 FF 
01214     D5 15 06 F6 | 	mov	arg02, ##@LR__4999
01218     35 00 00 FF 
0121c     3C E4 85 F1 | 	sub	objptr, ##27196
01220     14 FB B1 FD | 	call	#__system___string_cmp
01224     00 FA 0D F2 | 	cmp	result1, #0 wz
01228     01 20 06 51 |  if_ne	add	local02, #1
0122c     50 01 90 5D |  if_ne	jmp	#LR__0057
01230     10 3F 02 F6 | 	mov	local17, local02
01234                 | LR__0053
01234     10 2F 02 F6 | 	mov	local09, local02
01238     01 2E 06 F1 | 	add	local09, #1
0123c     03 2E 66 F0 | 	shl	local09, #3
01240     35 00 00 FF 
01244     3C E4 05 F1 | 	add	objptr, ##27196
01248     F2 2E 02 F1 | 	add	local09, objptr
0124c     17 31 02 FB | 	rdlong	local10, local09
01250     25 00 00 FF 
01254     1C E4 05 F1 | 	add	objptr, ##18972
01258     F2 30 62 FC | 	wrlong	local10, objptr
0125c     1F 2F 02 F6 | 	mov	local09, local17
01260     03 2E 66 F0 | 	shl	local09, #3
01264     25 00 00 FF 
01268     1C E4 85 F1 | 	sub	objptr, ##18972
0126c     F2 2E 02 F1 | 	add	local09, objptr
01270     1F 37 02 F6 | 	mov	local13, local17
01274     03 36 66 F0 | 	shl	local13, #3
01278     F2 36 02 F1 | 	add	local13, objptr
0127c     1B 13 02 FB | 	rdlong	arg01, local13
01280     35 00 00 FF 
01284     3C E4 85 F1 | 	sub	objptr, ##27196
01288     18 33 02 F6 | 	mov	local11, local10
0128c     19 15 02 F6 | 	mov	arg02, local11
01290     D8 FA B1 FD | 	call	#__system___string_concat
01294     17 FB 61 FC | 	wrlong	result1, local09
01298     10 39 02 F6 | 	mov	local14, local02
0129c     01 38 06 F1 | 	add	local14, #1
012a0     1D 41 02 F6 | 	mov	local18, local15
012a4     01 40 06 F1 | 	add	local18, #1
012a8     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
012ac                 | LR__0054
012ac     20 39 52 F2 | 	cmps	local14, local18 wc
012b0     70 00 90 3D |  if_ae	jmp	#LR__0056
012b4     1C 27 02 F6 | 	mov	local05, local14
012b8     01 26 06 F1 | 	add	local05, #1
012bc     03 26 66 F0 | 	shl	local05, #3
012c0     35 00 00 FF 
012c4     3C E4 05 F1 | 	add	objptr, ##27196
012c8     F2 26 02 F1 | 	add	local05, objptr
012cc     13 25 02 FB | 	rdlong	local04, local05
012d0     1C 29 02 F6 | 	mov	local06, local14
012d4     01 28 06 F1 | 	add	local06, #1
012d8     03 28 66 F0 | 	shl	local06, #3
012dc     F2 28 02 F1 | 	add	local06, objptr
012e0     04 28 06 F1 | 	add	local06, #4
012e4     14 23 02 FB | 	rdlong	local03, local06
012e8     1C 29 02 F6 | 	mov	local06, local14
012ec     03 28 66 F0 | 	shl	local06, #3
012f0     F2 32 02 F6 | 	mov	local11, objptr
012f4     F2 28 02 F1 | 	add	local06, objptr
012f8     14 25 62 FC | 	wrlong	local04, local06
012fc     1C 31 02 F6 | 	mov	local10, local14
01300     18 35 02 F6 | 	mov	local12, local10
01304     03 34 66 F0 | 	shl	local12, #3
01308     F2 34 02 F1 | 	add	local12, objptr
0130c     04 34 06 F1 | 	add	local12, #4
01310     1A 23 62 FC | 	wrlong	local03, local12
01314     01 38 06 F1 | 	add	local14, #1
01318     35 00 00 FF 
0131c     3C E4 85 F1 | 	sub	objptr, ##27196
01320     88 FF 9F FD | 	jmp	#LR__0054
01324                 | LR__0055
01324                 | LR__0056
01324     01 3A 86 F1 | 	sub	local15, #1
01328     5A 00 00 FF 
0132c     58 E4 05 F1 | 	add	objptr, ##46168
01330     F2 12 02 FB | 	rdlong	arg01, objptr
01334     5A 00 00 FF 
01338     58 E4 85 F1 | 	sub	objptr, ##46168
0133c     82 01 00 FF 
01340     D7 15 06 F6 | 	mov	arg02, ##@LR__5000
01344     F0 F9 B1 FD | 	call	#__system___string_cmp
01348     00 FA 0D F2 | 	cmp	result1, #0 wz
0134c     1D 21 52 52 |  if_ne	cmps	local02, local15 wc
01350     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
01354                 | '   if p$<>"""" then k+=1:i+=1
01354     5A 00 00 FF 
01358     58 E4 05 F1 | 	add	objptr, ##46168
0135c     F2 12 02 FB | 	rdlong	arg01, objptr
01360     5A 00 00 FF 
01364     58 E4 85 F1 | 	sub	objptr, ##46168
01368     82 01 00 FF 
0136c     D9 15 06 F6 | 	mov	arg02, ##@LR__5001
01370     C4 F9 B1 FD | 	call	#__system___string_cmp
01374     00 FA 0D F2 | 	cmp	result1, #0 wz
01378     01 3A 06 51 |  if_ne	add	local15, #1
0137c     01 20 06 51 |  if_ne	add	local02, #1
01380                 | LR__0057
01380     1D 21 52 F2 | 	cmps	local02, local15 wc
01384     70 FE 9F CD |  if_b	jmp	#LR__0052
01388     00 20 06 F6 | 	mov	local02, #0
0138c                 | ' 
0138c                 | ' ' 1e : concatenate strings if "" detected between
0138c                 | '  
0138c                 | ' i=0 : do
0138c                 | LR__0058
0138c                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
0138c     10 27 02 F6 | 	mov	local05, local02
01390     03 26 66 F0 | 	shl	local05, #3
01394     35 00 00 FF 
01398     3C E4 05 F1 | 	add	objptr, ##27196
0139c     F2 26 02 F1 | 	add	local05, objptr
013a0     13 13 02 FB | 	rdlong	arg01, local05
013a4     01 14 06 F6 | 	mov	arg02, #1
013a8     35 00 00 FF 
013ac     3C E4 85 F1 | 	sub	objptr, ##27196
013b0     60 1A B2 FD | 	call	#__system__Right_S
013b4     FD 12 02 F6 | 	mov	arg01, result1
013b8     82 01 00 FF 
013bc     DB 15 06 F6 | 	mov	arg02, ##@LR__5002
013c0     74 F9 B1 FD | 	call	#__system___string_cmp
013c4     00 FA 0D F2 | 	cmp	result1, #0 wz
013c8     78 01 90 5D |  if_ne	jmp	#LR__0064
013cc     10 29 02 F6 | 	mov	local06, local02
013d0     01 28 06 F1 | 	add	local06, #1
013d4     03 28 66 F0 | 	shl	local06, #3
013d8     35 00 00 FF 
013dc     3C E4 05 F1 | 	add	objptr, ##27196
013e0     F2 32 02 F6 | 	mov	local11, objptr
013e4     F2 28 02 F1 | 	add	local06, objptr
013e8     14 13 02 FB | 	rdlong	arg01, local06
013ec     01 14 06 F6 | 	mov	arg02, #1
013f0     35 00 00 FF 
013f4     3C E4 85 F1 | 	sub	objptr, ##27196
013f8     90 19 B2 FD | 	call	#__system__Left_S
013fc     FD 12 02 F6 | 	mov	arg01, result1
01400     82 01 00 FF 
01404     DD 15 06 F6 | 	mov	arg02, ##@LR__5003
01408     2C F9 B1 FD | 	call	#__system___string_cmp
0140c     00 FA 0D F2 | 	cmp	result1, #0 wz
01410     30 01 90 5D |  if_ne	jmp	#LR__0064
01414     10 2F 02 F6 | 	mov	local09, local02
01418     03 2E 66 F0 | 	shl	local09, #3
0141c     35 00 00 FF 
01420     3C E4 05 F1 | 	add	objptr, ##27196
01424     F2 2E 02 F1 | 	add	local09, objptr
01428     10 37 02 F6 | 	mov	local13, local02
0142c     03 36 66 F0 | 	shl	local13, #3
01430     F2 36 02 F1 | 	add	local13, objptr
01434     1B 29 02 FB | 	rdlong	local06, local13
01438     10 35 02 F6 | 	mov	local12, local02
0143c     01 34 06 F1 | 	add	local12, #1
01440     03 34 66 F0 | 	shl	local12, #3
01444     F2 34 02 F1 | 	add	local12, objptr
01448     1A 33 02 FB | 	rdlong	local11, local12
0144c     10 43 02 F6 | 	mov	local19, local02
01450     01 42 06 F1 | 	add	local19, #1
01454     21 45 02 F6 | 	mov	local20, local19
01458     03 44 66 F0 | 	shl	local20, #3
0145c     F2 46 02 F6 | 	mov	local21, objptr
01460     F2 44 02 F1 | 	add	local20, objptr
01464     22 13 02 FB | 	rdlong	arg01, local20
01468     35 00 00 FF 
0146c     3C E4 85 F1 | 	sub	objptr, ##27196
01470     09 2B 02 F6 | 	mov	local07, arg01
01474     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01478                 | LR__0059
01478     15 FB C9 FA | 	rdbyte	result1, local07 wz
0147c     01 2A 06 51 |  if_ne	add	local07, #1
01480     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
01484                 | LR__0060
01484     09 2B 82 F1 | 	sub	local07, arg01
01488     15 31 02 F6 | 	mov	local10, local07
0148c     01 30 86 F1 | 	sub	local10, #1
01490     19 13 02 F6 | 	mov	arg01, local11
01494     18 15 02 F6 | 	mov	arg02, local10
01498     78 19 B2 FD | 	call	#__system__Right_S
0149c     FD 32 02 F6 | 	mov	local11, result1
014a0     14 13 02 F6 | 	mov	arg01, local06
014a4     19 15 02 F6 | 	mov	arg02, local11
014a8     C0 F8 B1 FD | 	call	#__system___string_concat
014ac     17 FB 61 FC | 	wrlong	result1, local09
014b0                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
014b0     10 39 02 F6 | 	mov	local14, local02
014b4     01 38 06 F1 | 	add	local14, #1
014b8     1D 49 02 F6 | 	mov	local22, local15
014bc     01 48 06 F1 | 	add	local22, #1
014c0     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014c4                 | LR__0061
014c4     24 39 52 F2 | 	cmps	local14, local22 wc
014c8     70 00 90 3D |  if_ae	jmp	#LR__0063
014cc     1C 27 02 F6 | 	mov	local05, local14
014d0     01 26 06 F1 | 	add	local05, #1
014d4     03 26 66 F0 | 	shl	local05, #3
014d8     35 00 00 FF 
014dc     3C E4 05 F1 | 	add	objptr, ##27196
014e0     F2 26 02 F1 | 	add	local05, objptr
014e4     13 25 02 FB | 	rdlong	local04, local05
014e8     1C 29 02 F6 | 	mov	local06, local14
014ec     01 28 06 F1 | 	add	local06, #1
014f0     03 28 66 F0 | 	shl	local06, #3
014f4     F2 28 02 F1 | 	add	local06, objptr
014f8     04 28 06 F1 | 	add	local06, #4
014fc     14 23 02 FB | 	rdlong	local03, local06
01500     1C 29 02 F6 | 	mov	local06, local14
01504     03 28 66 F0 | 	shl	local06, #3
01508     F2 32 02 F6 | 	mov	local11, objptr
0150c     F2 28 02 F1 | 	add	local06, objptr
01510     14 25 62 FC | 	wrlong	local04, local06
01514     1C 31 02 F6 | 	mov	local10, local14
01518     18 35 02 F6 | 	mov	local12, local10
0151c     03 34 66 F0 | 	shl	local12, #3
01520     F2 34 02 F1 | 	add	local12, objptr
01524     04 34 06 F1 | 	add	local12, #4
01528     1A 23 62 FC | 	wrlong	local03, local12
0152c     01 38 06 F1 | 	add	local14, #1
01530     35 00 00 FF 
01534     3C E4 85 F1 | 	sub	objptr, ##27196
01538     88 FF 9F FD | 	jmp	#LR__0061
0153c                 | LR__0062
0153c                 | LR__0063
0153c     01 20 86 F1 | 	sub	local02, #1
01540     01 3A 86 F1 | 	sub	local15, #1
01544                 | LR__0064
01544     01 20 06 F1 | 	add	local02, #1
01548     1D 21 52 F2 | 	cmps	local02, local15 wc
0154c     3C FE 9F CD |  if_b	jmp	#LR__0058
01550     00 20 06 F6 | 	mov	local02, #0
01554                 | '  
01554                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
01554                 | '  
01554                 | ' i=0 : do
01554                 | LR__0065
01554     10 2F 02 F6 | 	mov	local09, local02
01558     03 2E 66 F0 | 	shl	local09, #3
0155c     35 00 00 FF 
01560     3C E4 05 F1 | 	add	objptr, ##27196
01564     F2 2E 02 F1 | 	add	local09, objptr
01568     17 29 02 FB | 	rdlong	local06, local09
0156c     25 00 00 FF 
01570     24 E4 05 F1 | 	add	objptr, ##18980
01574     F2 28 62 FC | 	wrlong	local06, objptr
01578     10 2F 02 F6 | 	mov	local09, local02
0157c     01 2E 06 F1 | 	add	local09, #1
01580     03 2E 66 F0 | 	shl	local09, #3
01584     25 00 00 FF 
01588     24 E4 85 F1 | 	sub	objptr, ##18980
0158c     F2 2E 02 F1 | 	add	local09, objptr
01590     17 29 02 FB | 	rdlong	local06, local09
01594     25 00 00 FF 
01598     28 E4 05 F1 | 	add	objptr, ##18984
0159c     F2 28 62 FC | 	wrlong	local06, objptr
015a0                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
015a0     04 E4 85 F1 | 	sub	objptr, #4
015a4     F2 12 02 FB | 	rdlong	arg01, objptr
015a8     5A 00 00 FF 
015ac     60 E4 85 F1 | 	sub	objptr, ##46176
015b0     82 01 00 FF 
015b4     DF 15 06 F6 | 	mov	arg02, ##@LR__5004
015b8     7C F7 B1 FD | 	call	#__system___string_cmp
015bc     00 FA 0D F2 | 	cmp	result1, #0 wz
015c0     04 01 90 AD |  if_e	jmp	#LR__0066
015c4     5A 00 00 FF 
015c8     60 E4 05 F1 | 	add	objptr, ##46176
015cc     F2 12 02 FB | 	rdlong	arg01, objptr
015d0     5A 00 00 FF 
015d4     60 E4 85 F1 | 	sub	objptr, ##46176
015d8     82 01 00 FF 
015dc     E1 15 06 F6 | 	mov	arg02, ##@LR__5005
015e0     54 F7 B1 FD | 	call	#__system___string_cmp
015e4     FD 22 0A F6 | 	mov	local03, result1 wz
015e8     DC 00 90 AD |  if_e	jmp	#LR__0066
015ec     5A 00 00 FF 
015f0     60 E4 05 F1 | 	add	objptr, ##46176
015f4     F2 12 02 FB | 	rdlong	arg01, objptr
015f8     5A 00 00 FF 
015fc     60 E4 85 F1 | 	sub	objptr, ##46176
01600     82 01 00 FF 
01604     E3 15 06 F6 | 	mov	arg02, ##@LR__5006
01608     2C F7 B1 FD | 	call	#__system___string_cmp
0160c     00 FA 0D F2 | 	cmp	result1, #0 wz
01610     B4 00 90 AD |  if_e	jmp	#LR__0066
01614     5A 00 00 FF 
01618     60 E4 05 F1 | 	add	objptr, ##46176
0161c     F2 12 02 FB | 	rdlong	arg01, objptr
01620     5A 00 00 FF 
01624     60 E4 85 F1 | 	sub	objptr, ##46176
01628     82 01 00 FF 
0162c     E5 33 06 F6 | 	mov	local11, ##@LR__5007
01630     19 15 02 F6 | 	mov	arg02, local11
01634     00 F7 B1 FD | 	call	#__system___string_cmp
01638     00 FA 0D F2 | 	cmp	result1, #0 wz
0163c     88 00 90 AD |  if_e	jmp	#LR__0066
01640     5A 00 00 FF 
01644     60 E4 05 F1 | 	add	objptr, ##46176
01648     F2 12 02 FB | 	rdlong	arg01, objptr
0164c     5A 00 00 FF 
01650     60 E4 85 F1 | 	sub	objptr, ##46176
01654     82 01 00 FF 
01658     E7 31 06 F6 | 	mov	local10, ##@LR__5008
0165c     18 33 02 F6 | 	mov	local11, local10
01660     19 15 02 F6 | 	mov	arg02, local11
01664     D0 F6 B1 FD | 	call	#__system___string_cmp
01668     00 FA 0D F2 | 	cmp	result1, #0 wz
0166c     58 00 90 AD |  if_e	jmp	#LR__0066
01670     5A 00 00 FF 
01674     60 E4 05 F1 | 	add	objptr, ##46176
01678     F2 12 02 FB | 	rdlong	arg01, objptr
0167c     5A 00 00 FF 
01680     60 E4 85 F1 | 	sub	objptr, ##46176
01684     82 01 00 FF 
01688     E9 31 06 F6 | 	mov	local10, ##@LR__5009
0168c     18 15 02 F6 | 	mov	arg02, local10
01690     A4 F6 B1 FD | 	call	#__system___string_cmp
01694     FD 32 0A F6 | 	mov	local11, result1 wz
01698     2C 00 90 AD |  if_e	jmp	#LR__0066
0169c     5A 00 00 FF 
016a0     60 E4 05 F1 | 	add	objptr, ##46176
016a4     F2 12 02 FB | 	rdlong	arg01, objptr
016a8     5A 00 00 FF 
016ac     60 E4 85 F1 | 	sub	objptr, ##46176
016b0     82 01 00 FF 
016b4     EB 37 06 F6 | 	mov	local13, ##@LR__5010
016b8     1B 15 02 F6 | 	mov	arg02, local13
016bc     78 F6 B1 FD | 	call	#__system___string_cmp
016c0     FD 30 0A F6 | 	mov	local10, result1 wz
016c4     30 00 90 5D |  if_ne	jmp	#LR__0067
016c8                 | LR__0066
016c8     5A 00 00 FF 
016cc     64 E4 05 F1 | 	add	objptr, ##46180
016d0     F2 12 02 FB | 	rdlong	arg01, objptr
016d4     5A 00 00 FF 
016d8     64 E4 85 F1 | 	sub	objptr, ##46180
016dc     82 01 00 FF 
016e0     ED 4B 06 F6 | 	mov	local23, ##@LR__5011
016e4     25 35 02 F6 | 	mov	local12, local23
016e8     1A 15 02 F6 | 	mov	arg02, local12
016ec     48 F6 B1 FD | 	call	#__system___string_cmp
016f0     FD 36 0A F6 | 	mov	local13, result1 wz
016f4     18 01 90 AD |  if_e	jmp	#LR__0070
016f8                 | LR__0067
016f8     5A 00 00 FF 
016fc     60 E4 05 F1 | 	add	objptr, ##46176
01700     F2 12 02 FB | 	rdlong	arg01, objptr
01704     5A 00 00 FF 
01708     60 E4 85 F1 | 	sub	objptr, ##46176
0170c     82 01 00 FF 
01710     EF 4B 06 F6 | 	mov	local23, ##@LR__5012
01714     25 15 02 F6 | 	mov	arg02, local23
01718     1C F6 B1 FD | 	call	#__system___string_cmp
0171c     FD 34 0A F6 | 	mov	local12, result1 wz
01720     30 00 90 5D |  if_ne	jmp	#LR__0068
01724     5A 00 00 FF 
01728     64 E4 05 F1 | 	add	objptr, ##46180
0172c     F2 12 02 FB | 	rdlong	arg01, objptr
01730     5A 00 00 FF 
01734     64 E4 85 F1 | 	sub	objptr, ##46180
01738     82 01 00 FF 
0173c     F1 45 06 F6 | 	mov	local20, ##@LR__5013
01740     22 43 02 F6 | 	mov	local19, local20
01744     21 15 02 F6 | 	mov	arg02, local19
01748     EC F5 B1 FD | 	call	#__system___string_cmp
0174c     FD 4A 0A F6 | 	mov	local23, result1 wz
01750     BC 00 90 AD |  if_e	jmp	#LR__0070
01754                 | LR__0068
01754     5A 00 00 FF 
01758     60 E4 05 F1 | 	add	objptr, ##46176
0175c     F2 12 02 FB | 	rdlong	arg01, objptr
01760     5A 00 00 FF 
01764     60 E4 85 F1 | 	sub	objptr, ##46176
01768     82 01 00 FF 
0176c     F3 45 06 F6 | 	mov	local20, ##@LR__5014
01770     22 15 02 F6 | 	mov	arg02, local20
01774     C0 F5 B1 FD | 	call	#__system___string_cmp
01778     FD 42 0A F6 | 	mov	local19, result1 wz
0177c     30 00 90 5D |  if_ne	jmp	#LR__0069
01780     5A 00 00 FF 
01784     64 E4 05 F1 | 	add	objptr, ##46180
01788     F2 12 02 FB | 	rdlong	arg01, objptr
0178c     5A 00 00 FF 
01790     64 E4 85 F1 | 	sub	objptr, ##46180
01794     82 01 00 FF 
01798     F5 4D 06 F6 | 	mov	local24, ##@LR__5015
0179c     26 47 02 F6 | 	mov	local21, local24
017a0     23 15 02 F6 | 	mov	arg02, local21
017a4     90 F5 B1 FD | 	call	#__system___string_cmp
017a8     FD 44 0A F6 | 	mov	local20, result1 wz
017ac     60 00 90 AD |  if_e	jmp	#LR__0070
017b0                 | LR__0069
017b0     5A 00 00 FF 
017b4     60 E4 05 F1 | 	add	objptr, ##46176
017b8     F2 12 02 FB | 	rdlong	arg01, objptr
017bc     5A 00 00 FF 
017c0     60 E4 85 F1 | 	sub	objptr, ##46176
017c4     82 01 00 FF 
017c8     F7 4F 06 F6 | 	mov	local25, ##@LR__5016
017cc     27 4D 02 F6 | 	mov	local24, local25
017d0     26 15 02 F6 | 	mov	arg02, local24
017d4     60 F5 B1 FD | 	call	#__system___string_cmp
017d8     FD 46 0A F6 | 	mov	local21, result1 wz
017dc     10 01 90 5D |  if_ne	jmp	#LR__0074
017e0     5A 00 00 FF 
017e4     64 E4 05 F1 | 	add	objptr, ##46180
017e8     F2 12 02 FB | 	rdlong	arg01, objptr
017ec     5A 00 00 FF 
017f0     64 E4 85 F1 | 	sub	objptr, ##46180
017f4     82 01 00 FF 
017f8     F9 51 06 F6 | 	mov	local26, ##@LR__5017
017fc     28 4F 02 F6 | 	mov	local25, local26
01800     27 15 02 F6 | 	mov	arg02, local25
01804     30 F5 B1 FD | 	call	#__system___string_cmp
01808     FD 4C 0A F6 | 	mov	local24, result1 wz
0180c     E0 00 90 5D |  if_ne	jmp	#LR__0074
01810                 | LR__0070
01810     10 2F 02 F6 | 	mov	local09, local02
01814     03 2E 66 F0 | 	shl	local09, #3
01818     35 00 00 FF 
0181c     3C E4 05 F1 | 	add	objptr, ##27196
01820     F2 2E 02 F1 | 	add	local09, objptr
01824     25 00 00 FF 
01828     24 E4 05 F1 | 	add	objptr, ##18980
0182c     F2 12 02 FB | 	rdlong	arg01, objptr
01830     04 E4 05 F1 | 	add	objptr, #4
01834     F2 30 02 FB | 	rdlong	local10, objptr
01838     5A 00 00 FF 
0183c     64 E4 85 F1 | 	sub	objptr, ##46180
01840     18 33 02 F6 | 	mov	local11, local10
01844     19 15 02 F6 | 	mov	arg02, local11
01848     20 F5 B1 FD | 	call	#__system___string_concat
0184c     17 FB 61 FC | 	wrlong	result1, local09
01850                 | '     lparts(i).part$=s1$+s2$
01850                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01850     10 39 02 F6 | 	mov	local14, local02
01854     01 38 06 F1 | 	add	local14, #1
01858     1D 53 02 F6 | 	mov	local27, local15
0185c     01 52 06 F1 | 	add	local27, #1
01860     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
01864                 | LR__0071
01864     29 39 52 F2 | 	cmps	local14, local27 wc
01868     7C 00 90 3D |  if_ae	jmp	#LR__0073
0186c     1C 27 02 F6 | 	mov	local05, local14
01870     01 26 06 F1 | 	add	local05, #1
01874     03 26 66 F0 | 	shl	local05, #3
01878     35 00 00 FF 
0187c     3C E4 05 F1 | 	add	objptr, ##27196
01880     F2 26 02 F1 | 	add	local05, objptr
01884     13 25 02 FB | 	rdlong	local04, local05
01888     1C 29 02 F6 | 	mov	local06, local14
0188c     01 28 06 F1 | 	add	local06, #1
01890     03 28 66 F0 | 	shl	local06, #3
01894     F2 28 02 F1 | 	add	local06, objptr
01898     04 28 06 F1 | 	add	local06, #4
0189c     14 23 02 FB | 	rdlong	local03, local06
018a0     1C 29 02 F6 | 	mov	local06, local14
018a4     03 28 66 F0 | 	shl	local06, #3
018a8     F2 32 02 F6 | 	mov	local11, objptr
018ac     F2 28 02 F1 | 	add	local06, objptr
018b0     14 25 62 FC | 	wrlong	local04, local06
018b4     1C 31 02 F6 | 	mov	local10, local14
018b8     18 37 02 F6 | 	mov	local13, local10
018bc     1B 35 02 F6 | 	mov	local12, local13
018c0     03 34 66 F0 | 	shl	local12, #3
018c4     F2 4A 02 F6 | 	mov	local23, objptr
018c8     F2 34 02 F1 | 	add	local12, objptr
018cc     04 34 06 F1 | 	add	local12, #4
018d0     1A 23 62 FC | 	wrlong	local03, local12
018d4     04 34 86 F1 | 	sub	local12, #4
018d8     01 38 06 F1 | 	add	local14, #1
018dc     35 00 00 FF 
018e0     3C E4 85 F1 | 	sub	objptr, ##27196
018e4     7C FF 9F FD | 	jmp	#LR__0071
018e8                 | LR__0072
018e8                 | LR__0073
018e8     01 20 86 F1 | 	sub	local02, #1
018ec     01 3A 86 F1 | 	sub	local15, #1
018f0                 | LR__0074
018f0     01 20 06 F1 | 	add	local02, #1
018f4     1D 21 52 F2 | 	cmps	local02, local15 wc
018f8     58 FC 9F CD |  if_b	jmp	#LR__0065
018fc                 | '  
018fc                 | ' ' 1f : now remove parts that are spaces
018fc                 | ' 
018fc                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018fc     00 20 06 F6 | 	mov	local02, #0
01900     1D 55 02 F6 | 	mov	local28, local15
01904     01 54 06 F1 | 	add	local28, #1
01908                 | LR__0075
01908     2A 21 52 F2 | 	cmps	local02, local28 wc
0190c     50 00 90 3D |  if_ae	jmp	#LR__0076
01910     10 2F 02 F6 | 	mov	local09, local02
01914     03 2E 66 F0 | 	shl	local09, #3
01918     35 00 00 FF 
0191c     3C E4 05 F1 | 	add	objptr, ##27196
01920     F2 2E 02 F1 | 	add	local09, objptr
01924     10 33 02 F6 | 	mov	local11, local02
01928     19 31 02 F6 | 	mov	local10, local11
0192c     18 37 02 F6 | 	mov	local13, local10
01930     03 36 66 F0 | 	shl	local13, #3
01934     F2 34 02 F6 | 	mov	local12, objptr
01938     F2 36 02 F1 | 	add	local13, objptr
0193c     1B 13 02 FB | 	rdlong	arg01, local13
01940     35 00 00 FF 
01944     3C E4 85 F1 | 	sub	objptr, ##27196
01948     D0 18 B2 FD | 	call	#__system__RTrim_S
0194c     FD 12 02 F6 | 	mov	arg01, result1
01950     08 18 B2 FD | 	call	#__system__LTrim_S
01954     17 FB 61 FC | 	wrlong	result1, local09
01958     01 20 06 F1 | 	add	local02, #1
0195c     A8 FF 9F FD | 	jmp	#LR__0075
01960                 | LR__0076
01960     00 20 06 F6 | 	mov	local02, #0
01964     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01968                 | ' 
01968                 | ' i=0
01968                 | ' do 
01968                 | LR__0077
01968                 | '   if len(lparts(i).part$)=0 then 
01968     10 2F 02 F6 | 	mov	local09, local02
0196c     17 27 02 F6 | 	mov	local05, local09
01970     03 26 66 F0 | 	shl	local05, #3
01974     35 00 00 FF 
01978     3C E4 05 F1 | 	add	objptr, ##27196
0197c     F2 26 02 F1 | 	add	local05, objptr
01980     13 13 02 FB | 	rdlong	arg01, local05
01984     35 00 00 FF 
01988     3C E4 85 F1 | 	sub	objptr, ##27196
0198c     09 2B 02 F6 | 	mov	local07, arg01
01990                 | LR__0078
01990     15 FB C9 FA | 	rdbyte	result1, local07 wz
01994     01 2A 06 51 |  if_ne	add	local07, #1
01998     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
0199c     09 2B 8A F1 | 	sub	local07, arg01 wz
019a0     C4 00 90 5D |  if_ne	jmp	#LR__0082
019a4                 | '     if i=k-1 then k-=1  :  exit
019a4     1D 25 02 F6 | 	mov	local04, local15
019a8     01 24 86 F1 | 	sub	local04, #1
019ac     12 21 0A F2 | 	cmp	local02, local04 wz
019b0     01 3A 86 A1 |  if_e	sub	local15, #1
019b4     C4 00 90 AD |  if_e	jmp	#LR__0084
019b8                 | '     if i<k-1 then 
019b8     1D 25 02 F6 | 	mov	local04, local15
019bc     01 24 86 F1 | 	sub	local04, #1
019c0     12 21 52 F2 | 	cmps	local02, local04 wc
019c4     A0 00 90 3D |  if_ae	jmp	#LR__0081
019c8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019c8     10 39 02 F6 | 	mov	local14, local02
019cc     1D 57 02 F6 | 	mov	local29, local15
019d0     01 56 86 F1 | 	sub	local29, #1
019d4                 | LR__0079
019d4     2B 39 52 F2 | 	cmps	local14, local29 wc
019d8     80 00 90 3D |  if_ae	jmp	#LR__0080
019dc     1C 27 02 F6 | 	mov	local05, local14
019e0     01 26 06 F1 | 	add	local05, #1
019e4     03 26 66 F0 | 	shl	local05, #3
019e8     35 00 00 FF 
019ec     3C E4 05 F1 | 	add	objptr, ##27196
019f0     F2 26 02 F1 | 	add	local05, objptr
019f4     13 25 02 FB | 	rdlong	local04, local05
019f8     1C 29 02 F6 | 	mov	local06, local14
019fc     01 28 06 F1 | 	add	local06, #1
01a00     03 28 66 F0 | 	shl	local06, #3
01a04     F2 28 02 F1 | 	add	local06, objptr
01a08     04 28 06 F1 | 	add	local06, #4
01a0c     14 23 02 FB | 	rdlong	local03, local06
01a10     1C 2F 02 F6 | 	mov	local09, local14
01a14     17 29 02 F6 | 	mov	local06, local09
01a18     03 28 66 F0 | 	shl	local06, #3
01a1c     F2 32 02 F6 | 	mov	local11, objptr
01a20     F2 28 02 F1 | 	add	local06, objptr
01a24     14 25 62 FC | 	wrlong	local04, local06
01a28     1C 31 02 F6 | 	mov	local10, local14
01a2c     18 37 02 F6 | 	mov	local13, local10
01a30     1B 35 02 F6 | 	mov	local12, local13
01a34     03 34 66 F0 | 	shl	local12, #3
01a38     F2 4A 02 F6 | 	mov	local23, objptr
01a3c     F2 34 02 F1 | 	add	local12, objptr
01a40     04 34 06 F1 | 	add	local12, #4
01a44     1A 23 62 FC | 	wrlong	local03, local12
01a48     04 34 86 F1 | 	sub	local12, #4
01a4c     01 38 06 F1 | 	add	local14, #1
01a50     35 00 00 FF 
01a54     3C E4 85 F1 | 	sub	objptr, ##27196
01a58     78 FF 9F FD | 	jmp	#LR__0079
01a5c                 | LR__0080
01a5c     01 3A 86 F1 | 	sub	local15, #1
01a60                 | '       if i>0 then i-=1 
01a60     01 20 56 F2 | 	cmps	local02, #1 wc
01a64     01 20 86 31 |  if_ae	sub	local02, #1
01a68                 | LR__0081
01a68                 | LR__0082
01a68     01 20 06 F1 | 	add	local02, #1
01a6c     1D 25 02 F6 | 	mov	local04, local15
01a70     01 24 86 F1 | 	sub	local04, #1
01a74     12 21 5A F2 | 	cmps	local02, local04 wcz
01a78     EC FE 9F ED |  if_be	jmp	#LR__0077
01a7c                 | LR__0083
01a7c                 | LR__0084
01a7c                 | ' 
01a7c                 | ' ' 1g: lowercase all that is not a string
01a7c                 | ' 
01a7c                 | ' for j=0 to k-1
01a7c     00 38 06 F6 | 	mov	local14, #0
01a80     1D 59 02 F6 | 	mov	local30, local15
01a84                 | LR__0085
01a84     2C 39 52 F2 | 	cmps	local14, local30 wc
01a88     C0 00 90 3D |  if_ae	jmp	#LR__0088
01a8c                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a8c     1C 27 02 F6 | 	mov	local05, local14
01a90     03 26 66 F0 | 	shl	local05, #3
01a94     35 00 00 FF 
01a98     3C E4 05 F1 | 	add	objptr, ##27196
01a9c     F2 26 02 F1 | 	add	local05, objptr
01aa0     13 13 02 FB | 	rdlong	arg01, local05
01aa4     01 14 06 F6 | 	mov	arg02, #1
01aa8     35 00 00 FF 
01aac     3C E4 85 F1 | 	sub	objptr, ##27196
01ab0     D8 12 B2 FD | 	call	#__system__Left_S
01ab4     FD 12 02 F6 | 	mov	arg01, result1
01ab8     82 01 00 FF 
01abc     FB 15 06 F6 | 	mov	arg02, ##@LR__5018
01ac0     74 F2 B1 FD | 	call	#__system___string_cmp
01ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
01ac8     40 00 90 5D |  if_ne	jmp	#LR__0086
01acc     1C 29 02 F6 | 	mov	local06, local14
01ad0     03 28 66 F0 | 	shl	local06, #3
01ad4     35 00 00 FF 
01ad8     3C E4 05 F1 | 	add	objptr, ##27196
01adc     F2 28 02 F1 | 	add	local06, objptr
01ae0     14 13 02 FB | 	rdlong	arg01, local06
01ae4     01 14 06 F6 | 	mov	arg02, #1
01ae8     35 00 00 FF 
01aec     3C E4 85 F1 | 	sub	objptr, ##27196
01af0     20 13 B2 FD | 	call	#__system__Right_S
01af4     FD 12 02 F6 | 	mov	arg01, result1
01af8     82 01 00 FF 
01afc     FD 15 06 F6 | 	mov	arg02, ##@LR__5019
01b00     34 F2 B1 FD | 	call	#__system___string_cmp
01b04     00 FA 0D F2 | 	cmp	result1, #0 wz
01b08     38 00 90 AD |  if_e	jmp	#LR__0087
01b0c                 | LR__0086
01b0c     1C 2F 02 F6 | 	mov	local09, local14
01b10     03 2E 66 F0 | 	shl	local09, #3
01b14     35 00 00 FF 
01b18     3C E4 05 F1 | 	add	objptr, ##27196
01b1c     F2 2E 02 F1 | 	add	local09, objptr
01b20     1C 37 02 F6 | 	mov	local13, local14
01b24     03 36 66 F0 | 	shl	local13, #3
01b28     F2 34 02 F6 | 	mov	local12, objptr
01b2c     F2 36 02 F1 | 	add	local13, objptr
01b30     1B 13 02 FB | 	rdlong	arg01, local13
01b34     35 00 00 FF 
01b38     3C E4 85 F1 | 	sub	objptr, ##27196
01b3c     5C 15 B2 FD | 	call	#__system__LCase_S
01b40     17 FB 61 FC | 	wrlong	result1, local09
01b44                 | LR__0087
01b44     01 38 06 F1 | 	add	local14, #1
01b48     38 FF 9F FD | 	jmp	#LR__0085
01b4c                 | LR__0088
01b4c                 | ' 
01b4c                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b4c                 | ' 
01b4c                 | ' for i=0 to k: lparts(i).token=-1: next i
01b4c     00 20 06 F6 | 	mov	local02, #0
01b50     1D 5B 02 F6 | 	mov	local31, local15
01b54     01 5A 06 F1 | 	add	local31, #1
01b58     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b5c                 | LR__0089
01b5c     2D 21 52 F2 | 	cmps	local02, local31 wc
01b60     30 00 90 3D |  if_ae	jmp	#LR__0091
01b64     10 2F 02 F6 | 	mov	local09, local02
01b68     03 2E 66 F0 | 	shl	local09, #3
01b6c     35 00 00 FF 
01b70     3C E4 05 F1 | 	add	objptr, ##27196
01b74     F2 2E 02 F1 | 	add	local09, objptr
01b78     04 2E 06 F1 | 	add	local09, #4
01b7c     FF FF FF FF 
01b80     17 FF 6B FC | 	wrlong	##-1, local09
01b84     01 20 06 F1 | 	add	local02, #1
01b88     35 00 00 FF 
01b8c     3C E4 85 F1 | 	sub	objptr, ##27196
01b90     C8 FF 9F FD | 	jmp	#LR__0089
01b94                 | LR__0090
01b94                 | LR__0091
01b94                 | ' 
01b94                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b94                 | ' 
01b94                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b94     35 00 00 FF 
01b98     3C E4 05 F1 | 	add	objptr, ##27196
01b9c     F2 12 02 FB | 	rdlong	arg01, objptr
01ba0     35 00 00 FF 
01ba4     3C E4 85 F1 | 	sub	objptr, ##27196
01ba8     09 2B 02 F6 | 	mov	local07, arg01
01bac     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01bb0                 | LR__0092
01bb0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01bb4     01 2A 06 51 |  if_ne	add	local07, #1
01bb8     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01bbc                 | LR__0093
01bbc     09 2B 8A F1 | 	sub	local07, arg01 wz
01bc0     C0 18 90 AD |  if_e	jmp	#LR__0150
01bc4                 | ' 
01bc4                 | ' 
01bc4                 | ' if isdec(lparts(0).part$) then let addptr=1 else let addptr=0
01bc4     35 00 00 FF 
01bc8     3C E4 05 F1 | 	add	objptr, ##27196
01bcc     F2 12 02 FB | 	rdlong	arg01, objptr
01bd0     35 00 00 FF 
01bd4     3C E4 85 F1 | 	sub	objptr, ##27196
01bd8     8C 3D B0 FD | 	call	#_isdec
01bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
01be0     5A 00 00 5F 
01be4     68 E4 05 51 |  if_ne	add	objptr, ##46184
01be8     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01bec     5A 00 00 FF 
01bf0     68 E4 E5 F3 | 	sumnz	objptr, ##46184
01bf4     F2 00 68 AC |  if_e	wrlong	#0, objptr
01bf8     5A 00 00 AF 
01bfc     68 E4 85 A1 |  if_e	sub	objptr, ##46184
01c00     5A 00 00 FF 
01c04     68 E4 05 F1 | 	add	objptr, ##46184
01c08     F2 26 02 FB | 	rdlong	local05, objptr
01c0c     03 26 66 F0 | 	shl	local05, #3
01c10     25 00 00 FF 
01c14     2C E4 85 F1 | 	sub	objptr, ##18988
01c18     F2 26 02 F1 | 	add	local05, objptr
01c1c     13 33 02 FB | 	rdlong	local11, local05
01c20     25 00 00 FF 
01c24     30 E4 05 F1 | 	add	objptr, ##18992
01c28     F2 32 62 FC | 	wrlong	local11, objptr
01c2c     04 E4 85 F1 | 	sub	objptr, #4
01c30     F2 32 02 FB | 	rdlong	local11, objptr
01c34     03 32 66 F0 | 	shl	local11, #3
01c38     25 00 00 FF 
01c3c     2C E4 85 F1 | 	sub	objptr, ##18988
01c40     F2 30 02 F6 | 	mov	local10, objptr
01c44     F2 32 02 F1 | 	add	local11, objptr
01c48     19 15 02 FB | 	rdlong	arg02, local11
01c4c     82 01 00 FF 
01c50     FF 17 06 F6 | 	mov	arg03, ##@LR__5020
01c54     01 12 06 F6 | 	mov	arg01, #1
01c58     35 00 00 FF 
01c5c     3C E4 85 F1 | 	sub	objptr, ##27196
01c60     70 16 B2 FD | 	call	#__system__Instr
01c64     5A 00 00 FF 
01c68     70 E4 05 F1 | 	add	objptr, ##46192
01c6c     F2 FA 61 FC | 	wrlong	result1, objptr
01c70                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 
01c70     FD 24 02 F6 | 	mov	local04, result1
01c74     5A 00 00 FF 
01c78     70 E4 85 F1 | 	sub	objptr, ##46192
01c7c     01 24 56 F2 | 	cmps	local04, #1 wc
01c80     DC 01 90 CD |  if_b	jmp	#LR__0100
01c84     5A 00 00 FF 
01c88     68 E4 05 F1 | 	add	objptr, ##46184
01c8c     F2 30 02 FB | 	rdlong	local10, objptr
01c90     03 30 66 F0 | 	shl	local10, #3
01c94     25 00 00 FF 
01c98     2C E4 85 F1 | 	sub	objptr, ##18988
01c9c     F2 36 02 F6 | 	mov	local13, objptr
01ca0     F2 30 02 F1 | 	add	local10, objptr
01ca4     18 13 02 FB | 	rdlong	arg01, local10
01ca8     35 00 00 FF 
01cac     3C E4 85 F1 | 	sub	objptr, ##27196
01cb0     09 2B 02 F6 | 	mov	local07, arg01
01cb4     97 06 48 FB | 	callpa	#(@LR__0095-@LR__0094)>>2,fcache_load_ptr_
01cb8                 | LR__0094
01cb8     15 FB C9 FA | 	rdbyte	result1, local07 wz
01cbc     01 2A 06 51 |  if_ne	add	local07, #1
01cc0     F4 FF 9F 5D |  if_ne	jmp	#LR__0094
01cc4                 | LR__0095
01cc4     09 2B 82 F1 | 	sub	local07, arg01
01cc8     15 2F 02 F6 | 	mov	local09, local07
01ccc     5A 00 00 FF 
01cd0     70 E4 05 F1 | 	add	objptr, ##46192
01cd4     F2 26 02 FB | 	rdlong	local05, objptr
01cd8     5A 00 00 FF 
01cdc     70 E4 85 F1 | 	sub	objptr, ##46192
01ce0     17 27 52 F2 | 	cmps	local05, local09 wc
01ce4     78 01 90 3D |  if_ae	jmp	#LR__0100
01ce8     01 3A 06 F1 | 	add	local15, #1
01cec                 | '   k+=1
01cec                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01cec     1D 21 02 F6 | 	mov	local02, local15
01cf0     5A 00 00 FF 
01cf4     68 E4 05 F1 | 	add	objptr, ##46184
01cf8     F2 5C 02 FB | 	rdlong	local32, objptr
01cfc     01 5C 06 F1 | 	add	local32, #1
01d00     25 00 00 FF 
01d04     2C E4 85 F1 | 	sub	objptr, ##18988
01d08     97 2E 48 FB | 	callpa	#(@LR__0097-@LR__0096)>>2,fcache_load_ptr_
01d0c                 | LR__0096
01d0c     10 29 02 F6 | 	mov	local06, local02
01d10     01 28 86 F1 | 	sub	local06, #1
01d14     03 28 66 F0 | 	shl	local06, #3
01d18     F2 28 02 F1 | 	add	local06, objptr
01d1c     14 23 02 FB | 	rdlong	local03, local06
01d20     10 33 02 F6 | 	mov	local11, local02
01d24     01 32 86 F1 | 	sub	local11, #1
01d28     03 32 66 F0 | 	shl	local11, #3
01d2c     F2 32 02 F1 | 	add	local11, objptr
01d30     04 32 06 F1 | 	add	local11, #4
01d34     19 2F 02 FB | 	rdlong	local09, local11
01d38     10 33 02 F6 | 	mov	local11, local02
01d3c     03 32 66 F0 | 	shl	local11, #3
01d40     F2 32 02 F1 | 	add	local11, objptr
01d44     19 23 62 FC | 	wrlong	local03, local11
01d48     10 4B 02 F6 | 	mov	local23, local02
01d4c     03 4A 66 F0 | 	shl	local23, #3
01d50     F2 4A 02 F1 | 	add	local23, objptr
01d54     04 4A 06 F1 | 	add	local23, #4
01d58     25 2F 62 FC | 	wrlong	local09, local23
01d5c     01 20 86 F1 | 	sub	local02, #1
01d60     2E 21 52 F2 | 	cmps	local02, local32 wc
01d64     A4 FF 9F 3D |  if_ae	jmp	#LR__0096
01d68                 | LR__0097
01d68     25 00 00 FF 
01d6c     2C E4 05 F1 | 	add	objptr, ##18988
01d70     F2 4A 02 FB | 	rdlong	local23, objptr
01d74     25 27 02 F6 | 	mov	local05, local23
01d78     01 26 06 F1 | 	add	local05, #1
01d7c     03 26 66 F0 | 	shl	local05, #3
01d80     25 00 00 FF 
01d84     2C E4 85 F1 | 	sub	objptr, ##18988
01d88     F2 26 02 F1 | 	add	local05, objptr
01d8c     03 4A 66 F0 | 	shl	local23, #3
01d90     F2 4A 02 F1 | 	add	local23, objptr
01d94     25 33 02 FB | 	rdlong	local11, local23
01d98     25 00 00 FF 
01d9c     2C E4 05 F1 | 	add	objptr, ##18988
01da0     F2 44 02 FB | 	rdlong	local20, objptr
01da4     22 47 02 F6 | 	mov	local21, local20
01da8     03 46 66 F0 | 	shl	local21, #3
01dac     25 00 00 FF 
01db0     2C E4 85 F1 | 	sub	objptr, ##18988
01db4     F2 4C 02 F6 | 	mov	local24, objptr
01db8     F2 46 02 F1 | 	add	local21, objptr
01dbc     23 13 02 FB | 	rdlong	arg01, local21
01dc0     35 00 00 FF 
01dc4     3C E4 85 F1 | 	sub	objptr, ##27196
01dc8     09 2B 02 F6 | 	mov	local07, arg01
01dcc     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
01dd0                 | LR__0098
01dd0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01dd4     01 2A 06 51 |  if_ne	add	local07, #1
01dd8     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
01ddc                 | LR__0099
01ddc     09 2B 82 F1 | 	sub	local07, arg01
01de0     15 15 02 F6 | 	mov	arg02, local07
01de4     5A 00 00 FF 
01de8     70 E4 05 F1 | 	add	objptr, ##46192
01dec     F2 4A 02 FB | 	rdlong	local23, objptr
01df0     5A 00 00 FF 
01df4     70 E4 85 F1 | 	sub	objptr, ##46192
01df8     25 15 82 F1 | 	sub	arg02, local23
01dfc     19 13 02 F6 | 	mov	arg01, local11
01e00     10 10 B2 FD | 	call	#__system__Right_S
01e04     13 FB 61 FC | 	wrlong	result1, local05
01e08     5A 00 00 FF 
01e0c     68 E4 05 F1 | 	add	objptr, ##46184
01e10     F2 34 02 FB | 	rdlong	local12, objptr
01e14     1A 27 02 F6 | 	mov	local05, local12
01e18     03 26 66 F0 | 	shl	local05, #3
01e1c     25 00 00 FF 
01e20     2C E4 85 F1 | 	sub	objptr, ##18988
01e24     F2 26 02 F1 | 	add	local05, objptr
01e28     1A 4B 02 F6 | 	mov	local23, local12
01e2c     03 4A 66 F0 | 	shl	local23, #3
01e30     F2 42 02 F6 | 	mov	local19, objptr
01e34     F2 4A 02 F1 | 	add	local23, objptr
01e38     25 13 02 FB | 	rdlong	arg01, local23
01e3c     25 00 00 FF 
01e40     34 E4 05 F1 | 	add	objptr, ##18996
01e44     F2 36 02 FB | 	rdlong	local13, objptr
01e48     5A 00 00 FF 
01e4c     70 E4 85 F1 | 	sub	objptr, ##46192
01e50     1B 31 02 F6 | 	mov	local10, local13
01e54     18 15 02 F6 | 	mov	arg02, local10
01e58     30 0F B2 FD | 	call	#__system__Left_S
01e5c     13 FB 61 FC | 	wrlong	result1, local05
01e60                 | LR__0100
01e60                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then
01e60     5A 00 00 FF 
01e64     68 E4 05 F1 | 	add	objptr, ##46184
01e68     F2 28 02 FB | 	rdlong	local06, objptr
01e6c     03 28 66 F0 | 	shl	local06, #3
01e70     25 00 00 FF 
01e74     2C E4 85 F1 | 	sub	objptr, ##18988
01e78     F2 28 02 F1 | 	add	local06, objptr
01e7c     14 13 02 FB | 	rdlong	arg01, local06
01e80     01 14 06 F6 | 	mov	arg02, #1
01e84     35 00 00 FF 
01e88     3C E4 85 F1 | 	sub	objptr, ##27196
01e8c     FC 0E B2 FD | 	call	#__system__Left_S
01e90     FD 12 02 F6 | 	mov	arg01, result1
01e94     83 01 00 FF 
01e98     01 14 06 F6 | 	mov	arg02, ##@LR__5021
01e9c     98 EE B1 FD | 	call	#__system___string_cmp
01ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ea4     9C 01 90 5D |  if_ne	jmp	#LR__0107
01ea8     5A 00 00 FF 
01eac     68 E4 05 F1 | 	add	objptr, ##46184
01eb0     F2 32 02 FB | 	rdlong	local11, objptr
01eb4     03 32 66 F0 | 	shl	local11, #3
01eb8     25 00 00 FF 
01ebc     2C E4 85 F1 | 	sub	objptr, ##18988
01ec0     F2 30 02 F6 | 	mov	local10, objptr
01ec4     F2 32 02 F1 | 	add	local11, objptr
01ec8     19 13 02 FB | 	rdlong	arg01, local11
01ecc     35 00 00 FF 
01ed0     3C E4 85 F1 | 	sub	objptr, ##27196
01ed4     09 2B 02 F6 | 	mov	local07, arg01
01ed8     97 06 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01edc                 | LR__0101
01edc     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ee0     01 2A 06 51 |  if_ne	add	local07, #1
01ee4     F4 FF 9F 5D |  if_ne	jmp	#LR__0101
01ee8                 | LR__0102
01ee8     09 2B 82 F1 | 	sub	local07, arg01
01eec     02 2A 56 F2 | 	cmps	local07, #2 wc
01ef0     50 01 90 CD |  if_b	jmp	#LR__0107
01ef4     01 3A 06 F1 | 	add	local15, #1
01ef8                 | '   k+=1
01ef8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01ef8     1D 21 02 F6 | 	mov	local02, local15
01efc     5A 00 00 FF 
01f00     68 E4 05 F1 | 	add	objptr, ##46184
01f04     F2 5E 02 FB | 	rdlong	local33, objptr
01f08     01 5E 06 F1 | 	add	local33, #1
01f0c     25 00 00 FF 
01f10     2C E4 85 F1 | 	sub	objptr, ##18988
01f14     97 2E 48 FB | 	callpa	#(@LR__0104-@LR__0103)>>2,fcache_load_ptr_
01f18                 | LR__0103
01f18     10 29 02 F6 | 	mov	local06, local02
01f1c     01 28 86 F1 | 	sub	local06, #1
01f20     03 28 66 F0 | 	shl	local06, #3
01f24     F2 28 02 F1 | 	add	local06, objptr
01f28     14 23 02 FB | 	rdlong	local03, local06
01f2c     10 33 02 F6 | 	mov	local11, local02
01f30     01 32 86 F1 | 	sub	local11, #1
01f34     03 32 66 F0 | 	shl	local11, #3
01f38     F2 32 02 F1 | 	add	local11, objptr
01f3c     04 32 06 F1 | 	add	local11, #4
01f40     19 2F 02 FB | 	rdlong	local09, local11
01f44     10 33 02 F6 | 	mov	local11, local02
01f48     03 32 66 F0 | 	shl	local11, #3
01f4c     F2 32 02 F1 | 	add	local11, objptr
01f50     19 23 62 FC | 	wrlong	local03, local11
01f54     10 4B 02 F6 | 	mov	local23, local02
01f58     03 4A 66 F0 | 	shl	local23, #3
01f5c     F2 4A 02 F1 | 	add	local23, objptr
01f60     04 4A 06 F1 | 	add	local23, #4
01f64     25 2F 62 FC | 	wrlong	local09, local23
01f68     01 20 86 F1 | 	sub	local02, #1
01f6c     2F 21 52 F2 | 	cmps	local02, local33 wc
01f70     A4 FF 9F 3D |  if_ae	jmp	#LR__0103
01f74                 | LR__0104
01f74     25 00 00 FF 
01f78     2C E4 05 F1 | 	add	objptr, ##18988
01f7c     F2 4A 02 FB | 	rdlong	local23, objptr
01f80     25 27 02 F6 | 	mov	local05, local23
01f84     01 26 06 F1 | 	add	local05, #1
01f88     03 26 66 F0 | 	shl	local05, #3
01f8c     25 00 00 FF 
01f90     2C E4 85 F1 | 	sub	objptr, ##18988
01f94     F2 26 02 F1 | 	add	local05, objptr
01f98     03 4A 66 F0 | 	shl	local23, #3
01f9c     F2 4A 02 F1 | 	add	local23, objptr
01fa0     25 33 02 FB | 	rdlong	local11, local23
01fa4     25 00 00 FF 
01fa8     2C E4 05 F1 | 	add	objptr, ##18988
01fac     F2 42 02 FB | 	rdlong	local19, objptr
01fb0     21 4B 02 F6 | 	mov	local23, local19
01fb4     25 45 02 F6 | 	mov	local20, local23
01fb8     22 47 02 F6 | 	mov	local21, local20
01fbc     03 46 66 F0 | 	shl	local21, #3
01fc0     25 00 00 FF 
01fc4     2C E4 85 F1 | 	sub	objptr, ##18988
01fc8     F2 4C 02 F6 | 	mov	local24, objptr
01fcc     F2 46 02 F1 | 	add	local21, objptr
01fd0     23 13 02 FB | 	rdlong	arg01, local21
01fd4     35 00 00 FF 
01fd8     3C E4 85 F1 | 	sub	objptr, ##27196
01fdc     09 2B 02 F6 | 	mov	local07, arg01
01fe0     97 06 48 FB | 	callpa	#(@LR__0106-@LR__0105)>>2,fcache_load_ptr_
01fe4                 | LR__0105
01fe4     15 FB C9 FA | 	rdbyte	result1, local07 wz
01fe8     01 2A 06 51 |  if_ne	add	local07, #1
01fec     F4 FF 9F 5D |  if_ne	jmp	#LR__0105
01ff0                 | LR__0106
01ff0     09 2B 82 F1 | 	sub	local07, arg01
01ff4     15 35 02 F6 | 	mov	local12, local07
01ff8     1A 37 02 F6 | 	mov	local13, local12
01ffc     01 36 86 F1 | 	sub	local13, #1
02000     1B 31 02 F6 | 	mov	local10, local13
02004     19 13 02 F6 | 	mov	arg01, local11
02008     18 15 02 F6 | 	mov	arg02, local10
0200c     04 0E B2 FD | 	call	#__system__Right_S
02010     13 FB 61 FC | 	wrlong	result1, local05
02014     5A 00 00 FF 
02018     68 E4 05 F1 | 	add	objptr, ##46184
0201c     F2 26 02 FB | 	rdlong	local05, objptr
02020     03 26 66 F0 | 	shl	local05, #3
02024     25 00 00 FF 
02028     2C E4 85 F1 | 	sub	objptr, ##18988
0202c     F2 26 02 F1 | 	add	local05, objptr
02030     83 01 00 FF 
02034     03 32 06 F6 | 	mov	local11, ##@LR__5022
02038     13 33 62 FC | 	wrlong	local11, local05
0203c     35 00 00 FF 
02040     3C E4 85 F1 | 	sub	objptr, ##27196
02044                 | LR__0107
02044     5A 00 00 FF 
02048     68 E4 05 F1 | 	add	objptr, ##46184
0204c     F2 26 02 FB | 	rdlong	local05, objptr
02050     03 26 66 F0 | 	shl	local05, #3
02054     25 00 00 FF 
02058     2C E4 85 F1 | 	sub	objptr, ##18988
0205c     F2 26 02 F1 | 	add	local05, objptr
02060     13 33 02 FB | 	rdlong	local11, local05
02064     25 00 00 FF 
02068     30 E4 05 F1 | 	add	objptr, ##18992
0206c     F2 32 62 FC | 	wrlong	local11, objptr
02070                 | ' 
02070                 | ' ' process the case when simple load or save is called without ""
02070                 | ' 
02070                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02070     5A 00 00 FF 
02074     6C E4 85 F1 | 	sub	objptr, ##46188
02078     83 01 00 FF 
0207c     05 14 06 F6 | 	mov	arg02, ##@LR__5023
02080     19 13 02 F6 | 	mov	arg01, local11
02084     B0 EC B1 FD | 	call	#__system___string_cmp
02088     00 FA 0D F2 | 	cmp	result1, #0 wz
0208c     50 00 90 AD |  if_e	jmp	#LR__0108
02090     5A 00 00 FF 
02094     6C E4 05 F1 | 	add	objptr, ##46188
02098     F2 12 02 FB | 	rdlong	arg01, objptr
0209c     5A 00 00 FF 
020a0     6C E4 85 F1 | 	sub	objptr, ##46188
020a4     83 01 00 FF 
020a8     0B 14 06 F6 | 	mov	arg02, ##@LR__5024
020ac     88 EC B1 FD | 	call	#__system___string_cmp
020b0     00 FA 0D F2 | 	cmp	result1, #0 wz
020b4     28 00 90 AD |  if_e	jmp	#LR__0108
020b8     5A 00 00 FF 
020bc     6C E4 05 F1 | 	add	objptr, ##46188
020c0     F2 12 02 FB | 	rdlong	arg01, objptr
020c4     5A 00 00 FF 
020c8     6C E4 85 F1 | 	sub	objptr, ##46188
020cc     83 01 00 FF 
020d0     12 14 06 F6 | 	mov	arg02, ##@LR__5025
020d4     60 EC B1 FD | 	call	#__system___string_cmp
020d8     00 FA 0D F2 | 	cmp	result1, #0 wz
020dc     48 01 90 5D |  if_ne	jmp	#LR__0111
020e0                 | LR__0108
020e0                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(addptr+1).token=token_decimal
020e0     5A 00 00 FF 
020e4     68 E4 05 F1 | 	add	objptr, ##46184
020e8     F2 28 02 FB | 	rdlong	local06, objptr
020ec     01 28 06 F1 | 	add	local06, #1
020f0     03 28 66 F0 | 	shl	local06, #3
020f4     25 00 00 FF 
020f8     2C E4 85 F1 | 	sub	objptr, ##18988
020fc     F2 28 02 F1 | 	add	local06, objptr
02100     14 13 02 FB | 	rdlong	arg01, local06
02104     83 01 00 FF 
02108     18 14 06 F6 | 	mov	arg02, ##@LR__5026
0210c     35 00 00 FF 
02110     3C E4 85 F1 | 	sub	objptr, ##27196
02114     20 EC B1 FD | 	call	#__system___string_cmp
02118     00 FA 0D F2 | 	cmp	result1, #0 wz
0211c     60 00 90 5D |  if_ne	jmp	#LR__0109
02120     5A 00 00 FF 
02124     68 E4 05 F1 | 	add	objptr, ##46184
02128     F2 26 02 FB | 	rdlong	local05, objptr
0212c     01 26 06 F1 | 	add	local05, #1
02130     03 26 66 F0 | 	shl	local05, #3
02134     25 00 00 FF 
02138     2C E4 85 F1 | 	sub	objptr, ##18988
0213c     F2 26 02 F1 | 	add	local05, objptr
02140     83 01 00 FF 
02144     1B 32 06 F6 | 	mov	local11, ##@LR__5027
02148     13 33 62 FC | 	wrlong	local11, local05
0214c     25 00 00 FF 
02150     2C E4 05 F1 | 	add	objptr, ##18988
02154     F2 26 02 FB | 	rdlong	local05, objptr
02158     01 26 06 F1 | 	add	local05, #1
0215c     03 26 66 F0 | 	shl	local05, #3
02160     25 00 00 FF 
02164     2C E4 85 F1 | 	sub	objptr, ##18988
02168     F2 26 02 F1 | 	add	local05, objptr
0216c     04 26 06 F1 | 	add	local05, #4
02170     01 00 80 FF 
02174     13 01 68 FC | 	wrlong	##512, local05
02178     35 00 00 FF 
0217c     3C E4 85 F1 | 	sub	objptr, ##27196
02180                 | LR__0109
02180                 | '   if lparts(addptr+1).part$="off" then   lparts(addptr+1).part$="0" :lparts(addptr+1).token=token_decimal
02180     5A 00 00 FF 
02184     68 E4 05 F1 | 	add	objptr, ##46184
02188     F2 28 02 FB | 	rdlong	local06, objptr
0218c     01 28 06 F1 | 	add	local06, #1
02190     03 28 66 F0 | 	shl	local06, #3
02194     25 00 00 FF 
02198     2C E4 85 F1 | 	sub	objptr, ##18988
0219c     F2 32 02 F6 | 	mov	local11, objptr
021a0     F2 28 02 F1 | 	add	local06, objptr
021a4     14 13 02 FB | 	rdlong	arg01, local06
021a8     83 01 00 FF 
021ac     1D 14 06 F6 | 	mov	arg02, ##@LR__5028
021b0     35 00 00 FF 
021b4     3C E4 85 F1 | 	sub	objptr, ##27196
021b8     7C EB B1 FD | 	call	#__system___string_cmp
021bc     00 FA 0D F2 | 	cmp	result1, #0 wz
021c0     64 00 90 5D |  if_ne	jmp	#LR__0110
021c4     5A 00 00 FF 
021c8     68 E4 05 F1 | 	add	objptr, ##46184
021cc     F2 26 02 FB | 	rdlong	local05, objptr
021d0     01 26 06 F1 | 	add	local05, #1
021d4     03 26 66 F0 | 	shl	local05, #3
021d8     25 00 00 FF 
021dc     2C E4 85 F1 | 	sub	objptr, ##18988
021e0     F2 26 02 F1 | 	add	local05, objptr
021e4     83 01 00 FF 
021e8     21 32 06 F6 | 	mov	local11, ##@LR__5029
021ec     13 33 62 FC | 	wrlong	local11, local05
021f0     25 00 00 FF 
021f4     2C E4 05 F1 | 	add	objptr, ##18988
021f8     F2 26 02 FB | 	rdlong	local05, objptr
021fc     01 26 06 F1 | 	add	local05, #1
02200     03 26 66 F0 | 	shl	local05, #3
02204     25 00 00 FF 
02208     2C E4 85 F1 | 	sub	objptr, ##18988
0220c     F2 26 02 F1 | 	add	local05, objptr
02210     09 32 C6 F9 | 	decod	local11, #9
02214     04 26 06 F1 | 	add	local05, #4
02218     01 00 80 FF 
0221c     13 01 68 FC | 	wrlong	##512, local05
02220     35 00 00 FF 
02224     3C E4 85 F1 | 	sub	objptr, ##27196
02228                 | LR__0110
02228                 | LR__0111
02228                 | ' if (lp$="mode" orelse lp$="m.") then 
02228     5A 00 00 FF 
0222c     6C E4 05 F1 | 	add	objptr, ##46188
02230     F2 12 02 FB | 	rdlong	arg01, objptr
02234     5A 00 00 FF 
02238     6C E4 85 F1 | 	sub	objptr, ##46188
0223c     83 01 00 FF 
02240     23 14 06 F6 | 	mov	arg02, ##@LR__5030
02244     F0 EA B1 FD | 	call	#__system___string_cmp
02248     00 FA 0D F2 | 	cmp	result1, #0 wz
0224c     28 00 90 AD |  if_e	jmp	#LR__0112
02250     5A 00 00 FF 
02254     6C E4 05 F1 | 	add	objptr, ##46188
02258     F2 12 02 FB | 	rdlong	arg01, objptr
0225c     5A 00 00 FF 
02260     6C E4 85 F1 | 	sub	objptr, ##46188
02264     83 01 00 FF 
02268     28 14 06 F6 | 	mov	arg02, ##@LR__5031
0226c     C8 EA B1 FD | 	call	#__system___string_cmp
02270     00 FA 0D F2 | 	cmp	result1, #0 wz
02274     48 02 90 5D |  if_ne	jmp	#LR__0118
02278                 | LR__0112
02278                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"  
02278     5A 00 00 FF 
0227c     68 E4 05 F1 | 	add	objptr, ##46184
02280     F2 28 02 FB | 	rdlong	local06, objptr
02284     01 28 06 F1 | 	add	local06, #1
02288     03 28 66 F0 | 	shl	local06, #3
0228c     25 00 00 FF 
02290     2C E4 85 F1 | 	sub	objptr, ##18988
02294     F2 28 02 F1 | 	add	local06, objptr
02298     14 13 02 FB | 	rdlong	arg01, local06
0229c     83 01 00 FF 
022a0     2B 14 06 F6 | 	mov	arg02, ##@LR__5032
022a4     35 00 00 FF 
022a8     3C E4 85 F1 | 	sub	objptr, ##27196
022ac     88 EA B1 FD | 	call	#__system___string_cmp
022b0     00 FA 0D F2 | 	cmp	result1, #0 wz
022b4     34 00 90 5D |  if_ne	jmp	#LR__0113
022b8     5A 00 00 FF 
022bc     68 E4 05 F1 | 	add	objptr, ##46184
022c0     F2 26 02 FB | 	rdlong	local05, objptr
022c4     01 26 06 F1 | 	add	local05, #1
022c8     03 26 66 F0 | 	shl	local05, #3
022cc     25 00 00 FF 
022d0     2C E4 85 F1 | 	sub	objptr, ##18988
022d4     F2 26 02 F1 | 	add	local05, objptr
022d8     83 01 00 FF 
022dc     31 32 06 F6 | 	mov	local11, ##@LR__5033
022e0     13 33 62 FC | 	wrlong	local11, local05
022e4     35 00 00 FF 
022e8     3C E4 85 F1 | 	sub	objptr, ##27196
022ec                 | LR__0113
022ec                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
022ec     5A 00 00 FF 
022f0     68 E4 05 F1 | 	add	objptr, ##46184
022f4     F2 28 02 FB | 	rdlong	local06, objptr
022f8     01 28 06 F1 | 	add	local06, #1
022fc     03 28 66 F0 | 	shl	local06, #3
02300     25 00 00 FF 
02304     2C E4 85 F1 | 	sub	objptr, ##18988
02308     F2 28 02 F1 | 	add	local06, objptr
0230c     14 13 02 FB | 	rdlong	arg01, local06
02310     83 01 00 FF 
02314     33 14 06 F6 | 	mov	arg02, ##@LR__5034
02318     35 00 00 FF 
0231c     3C E4 85 F1 | 	sub	objptr, ##27196
02320     14 EA B1 FD | 	call	#__system___string_cmp
02324     00 FA 0D F2 | 	cmp	result1, #0 wz
02328     34 00 90 5D |  if_ne	jmp	#LR__0114
0232c     5A 00 00 FF 
02330     68 E4 05 F1 | 	add	objptr, ##46184
02334     F2 26 02 FB | 	rdlong	local05, objptr
02338     01 26 06 F1 | 	add	local05, #1
0233c     03 26 66 F0 | 	shl	local05, #3
02340     25 00 00 FF 
02344     2C E4 85 F1 | 	sub	objptr, ##18988
02348     F2 26 02 F1 | 	add	local05, objptr
0234c     83 01 00 FF 
02350     3C 32 06 F6 | 	mov	local11, ##@LR__5035
02354     13 33 62 FC | 	wrlong	local11, local05
02358     35 00 00 FF 
0235c     3C E4 85 F1 | 	sub	objptr, ##27196
02360                 | LR__0114
02360                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02360     5A 00 00 FF 
02364     68 E4 05 F1 | 	add	objptr, ##46184
02368     F2 28 02 FB | 	rdlong	local06, objptr
0236c     01 28 06 F1 | 	add	local06, #1
02370     03 28 66 F0 | 	shl	local06, #3
02374     25 00 00 FF 
02378     2C E4 85 F1 | 	sub	objptr, ##18988
0237c     F2 28 02 F1 | 	add	local06, objptr
02380     14 13 02 FB | 	rdlong	arg01, local06
02384     83 01 00 FF 
02388     3E 14 06 F6 | 	mov	arg02, ##@LR__5036
0238c     35 00 00 FF 
02390     3C E4 85 F1 | 	sub	objptr, ##27196
02394     A0 E9 B1 FD | 	call	#__system___string_cmp
02398     00 FA 0D F2 | 	cmp	result1, #0 wz
0239c     34 00 90 5D |  if_ne	jmp	#LR__0115
023a0     5A 00 00 FF 
023a4     68 E4 05 F1 | 	add	objptr, ##46184
023a8     F2 26 02 FB | 	rdlong	local05, objptr
023ac     01 26 06 F1 | 	add	local05, #1
023b0     03 26 66 F0 | 	shl	local05, #3
023b4     25 00 00 FF 
023b8     2C E4 85 F1 | 	sub	objptr, ##18988
023bc     F2 26 02 F1 | 	add	local05, objptr
023c0     83 01 00 FF 
023c4     47 32 06 F6 | 	mov	local11, ##@LR__5037
023c8     13 33 62 FC | 	wrlong	local11, local05
023cc     35 00 00 FF 
023d0     3C E4 85 F1 | 	sub	objptr, ##27196
023d4                 | LR__0115
023d4                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
023d4     5A 00 00 FF 
023d8     68 E4 05 F1 | 	add	objptr, ##46184
023dc     F2 28 02 FB | 	rdlong	local06, objptr
023e0     01 28 06 F1 | 	add	local06, #1
023e4     03 28 66 F0 | 	shl	local06, #3
023e8     25 00 00 FF 
023ec     2C E4 85 F1 | 	sub	objptr, ##18988
023f0     F2 28 02 F1 | 	add	local06, objptr
023f4     14 13 02 FB | 	rdlong	arg01, local06
023f8     83 01 00 FF 
023fc     49 14 06 F6 | 	mov	arg02, ##@LR__5038
02400     35 00 00 FF 
02404     3C E4 85 F1 | 	sub	objptr, ##27196
02408     2C E9 B1 FD | 	call	#__system___string_cmp
0240c     00 FA 0D F2 | 	cmp	result1, #0 wz
02410     34 00 90 5D |  if_ne	jmp	#LR__0116
02414     5A 00 00 FF 
02418     68 E4 05 F1 | 	add	objptr, ##46184
0241c     F2 26 02 FB | 	rdlong	local05, objptr
02420     01 26 06 F1 | 	add	local05, #1
02424     03 26 66 F0 | 	shl	local05, #3
02428     25 00 00 FF 
0242c     2C E4 85 F1 | 	sub	objptr, ##18988
02430     F2 26 02 F1 | 	add	local05, objptr
02434     83 01 00 FF 
02438     52 32 06 F6 | 	mov	local11, ##@LR__5039
0243c     13 33 62 FC | 	wrlong	local11, local05
02440     35 00 00 FF 
02444     3C E4 85 F1 | 	sub	objptr, ##27196
02448                 | LR__0116
02448                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02448     5A 00 00 FF 
0244c     68 E4 05 F1 | 	add	objptr, ##46184
02450     F2 28 02 FB | 	rdlong	local06, objptr
02454     01 28 06 F1 | 	add	local06, #1
02458     03 28 66 F0 | 	shl	local06, #3
0245c     25 00 00 FF 
02460     2C E4 85 F1 | 	sub	objptr, ##18988
02464     F2 32 02 F6 | 	mov	local11, objptr
02468     F2 28 02 F1 | 	add	local06, objptr
0246c     14 13 02 FB | 	rdlong	arg01, local06
02470     83 01 00 FF 
02474     54 14 06 F6 | 	mov	arg02, ##@LR__5040
02478     35 00 00 FF 
0247c     3C E4 85 F1 | 	sub	objptr, ##27196
02480     B4 E8 B1 FD | 	call	#__system___string_cmp
02484     00 FA 0D F2 | 	cmp	result1, #0 wz
02488     34 00 90 5D |  if_ne	jmp	#LR__0117
0248c     5A 00 00 FF 
02490     68 E4 05 F1 | 	add	objptr, ##46184
02494     F2 26 02 FB | 	rdlong	local05, objptr
02498     01 26 06 F1 | 	add	local05, #1
0249c     03 26 66 F0 | 	shl	local05, #3
024a0     25 00 00 FF 
024a4     2C E4 85 F1 | 	sub	objptr, ##18988
024a8     F2 26 02 F1 | 	add	local05, objptr
024ac     83 01 00 FF 
024b0     57 32 06 F6 | 	mov	local11, ##@LR__5041
024b4     13 33 62 FC | 	wrlong	local11, local05
024b8     35 00 00 FF 
024bc     3C E4 85 F1 | 	sub	objptr, ##27196
024c0                 | LR__0117
024c0                 | LR__0118
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' ' 2a find part types 
024c0                 | ' 
024c0                 | ' for i=0 to k-1
024c0     00 20 06 F6 | 	mov	local02, #0
024c4     1D 61 02 F6 | 	mov	local34, local15
024c8                 | LR__0119
024c8     30 21 52 F2 | 	cmps	local02, local34 wc
024cc     58 07 90 3D |  if_ae	jmp	#LR__0130
024d0     10 2F 02 F6 | 	mov	local09, local02
024d4     03 2E 66 F0 | 	shl	local09, #3
024d8     35 00 00 FF 
024dc     3C E4 05 F1 | 	add	objptr, ##27196
024e0     F2 2E 02 F1 | 	add	local09, objptr
024e4     10 31 02 F6 | 	mov	local10, local02
024e8     18 37 02 F6 | 	mov	local13, local10
024ec     1B 35 02 F6 | 	mov	local12, local13
024f0     03 34 66 F0 | 	shl	local12, #3
024f4     F2 34 02 F1 | 	add	local12, objptr
024f8     1A 13 02 FB | 	rdlong	arg01, local12
024fc     35 00 00 FF 
02500     3C E4 85 F1 | 	sub	objptr, ##27196
02504     DC 16 B0 FD | 	call	#_isseparator
02508     FD FA E1 F8 | 	getbyte	result1, result1, #0
0250c     04 2E 06 F1 | 	add	local09, #4
02510     17 FB 61 FC | 	wrlong	result1, local09
02514                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
02514     10 2F 02 F6 | 	mov	local09, local02
02518     03 2E 66 F0 | 	shl	local09, #3
0251c     35 00 00 FF 
02520     3C E4 05 F1 | 	add	objptr, ##27196
02524     F2 2E 02 F1 | 	add	local09, objptr
02528     04 2E 06 F1 | 	add	local09, #4
0252c     17 33 02 FB | 	rdlong	local11, local09
02530     01 32 56 F2 | 	cmps	local11, #1 wc
02534     35 00 00 FF 
02538     3C E4 85 F1 | 	sub	objptr, ##27196
0253c     E0 06 90 3D |  if_ae	jmp	#LR__0129
02540     10 2F 02 F6 | 	mov	local09, local02
02544     03 2E 66 F0 | 	shl	local09, #3
02548     35 00 00 FF 
0254c     3C E4 05 F1 | 	add	objptr, ##27196
02550     F2 2E 02 F1 | 	add	local09, objptr
02554     10 31 02 F6 | 	mov	local10, local02
02558     18 37 02 F6 | 	mov	local13, local10
0255c     1B 35 02 F6 | 	mov	local12, local13
02560     03 34 66 F0 | 	shl	local12, #3
02564     F2 34 02 F1 | 	add	local12, objptr
02568     1A 13 02 FB | 	rdlong	arg01, local12
0256c     35 00 00 FF 
02570     3C E4 85 F1 | 	sub	objptr, ##27196
02574     38 0F B0 FD | 	call	#_isoperator
02578     FD FA E1 F8 | 	getbyte	result1, result1, #0
0257c     04 2E 06 F1 | 	add	local09, #4
02580     17 FB 61 FC | 	wrlong	result1, local09
02584                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
02584     10 2F 02 F6 | 	mov	local09, local02
02588     03 2E 66 F0 | 	shl	local09, #3
0258c     35 00 00 FF 
02590     3C E4 05 F1 | 	add	objptr, ##27196
02594     F2 2E 02 F1 | 	add	local09, objptr
02598     04 2E 06 F1 | 	add	local09, #4
0259c     17 33 02 FB | 	rdlong	local11, local09
025a0     01 32 56 F2 | 	cmps	local11, #1 wc
025a4     35 00 00 FF 
025a8     3C E4 85 F1 | 	sub	objptr, ##27196
025ac     70 06 90 3D |  if_ae	jmp	#LR__0129
025b0     10 2F 02 F6 | 	mov	local09, local02
025b4     03 2E 66 F0 | 	shl	local09, #3
025b8     35 00 00 FF 
025bc     3C E4 05 F1 | 	add	objptr, ##27196
025c0     F2 2E 02 F1 | 	add	local09, objptr
025c4     10 31 02 F6 | 	mov	local10, local02
025c8     18 37 02 F6 | 	mov	local13, local10
025cc     1B 35 02 F6 | 	mov	local12, local13
025d0     03 34 66 F0 | 	shl	local12, #3
025d4     F2 34 02 F1 | 	add	local12, objptr
025d8     1A 13 02 FB | 	rdlong	arg01, local12
025dc     35 00 00 FF 
025e0     3C E4 85 F1 | 	sub	objptr, ##27196
025e4                 | ' 
025e4                 | ' select case s
025e4     83 01 00 FF 
025e8     47 15 06 F6 | 	mov	arg02, ##@LR__5117
025ec     48 E7 B1 FD | 	call	#__system___string_cmp
025f0     00 FA 0D F2 | 	cmp	result1, #0 wz
025f4     1B FA 05 A6 |  if_e	mov	result1, #27
025f8     00 FA 05 56 |  if_ne	mov	result1, #0
025fc     FD FA E1 F8 | 	getbyte	result1, result1, #0
02600     04 2E 06 F1 | 	add	local09, #4
02604     17 FB 61 FC | 	wrlong	result1, local09
02608                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
02608     10 2F 02 F6 | 	mov	local09, local02
0260c     03 2E 66 F0 | 	shl	local09, #3
02610     35 00 00 FF 
02614     3C E4 05 F1 | 	add	objptr, ##27196
02618     F2 2E 02 F1 | 	add	local09, objptr
0261c     04 2E 06 F1 | 	add	local09, #4
02620     17 33 02 FB | 	rdlong	local11, local09
02624     01 32 56 F2 | 	cmps	local11, #1 wc
02628     35 00 00 FF 
0262c     3C E4 85 F1 | 	sub	objptr, ##27196
02630     EC 05 90 3D |  if_ae	jmp	#LR__0129
02634     10 2F 02 F6 | 	mov	local09, local02
02638     03 2E 66 F0 | 	shl	local09, #3
0263c     35 00 00 FF 
02640     3C E4 05 F1 | 	add	objptr, ##27196
02644     F2 2E 02 F1 | 	add	local09, objptr
02648     10 31 02 F6 | 	mov	local10, local02
0264c     18 37 02 F6 | 	mov	local13, local10
02650     1B 35 02 F6 | 	mov	local12, local13
02654     03 34 66 F0 | 	shl	local12, #3
02658     F2 34 02 F1 | 	add	local12, objptr
0265c     1A 13 02 FB | 	rdlong	arg01, local12
02660     35 00 00 FF 
02664     3C E4 85 F1 | 	sub	objptr, ##27196
02668     78 17 B0 FD | 	call	#_iscommand
0266c     FD FA E1 F8 | 	getbyte	result1, result1, #0
02670     04 2E 06 F1 | 	add	local09, #4
02674     17 FB 61 FC | 	wrlong	result1, local09
02678                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
02678     10 2F 02 F6 | 	mov	local09, local02
0267c     03 2E 66 F0 | 	shl	local09, #3
02680     35 00 00 FF 
02684     3C E4 05 F1 | 	add	objptr, ##27196
02688     F2 2E 02 F1 | 	add	local09, objptr
0268c     04 2E 06 F1 | 	add	local09, #4
02690     17 33 02 FB | 	rdlong	local11, local09
02694     01 32 56 F2 | 	cmps	local11, #1 wc
02698     35 00 00 FF 
0269c     3C E4 85 F1 | 	sub	objptr, ##27196
026a0     7C 05 90 3D |  if_ae	jmp	#LR__0129
026a4     10 2F 02 F6 | 	mov	local09, local02
026a8     03 2E 66 F0 | 	shl	local09, #3
026ac     35 00 00 FF 
026b0     3C E4 05 F1 | 	add	objptr, ##27196
026b4     F2 2E 02 F1 | 	add	local09, objptr
026b8     10 31 02 F6 | 	mov	local10, local02
026bc     18 37 02 F6 | 	mov	local13, local10
026c0     1B 35 02 F6 | 	mov	local12, local13
026c4     03 34 66 F0 | 	shl	local12, #3
026c8     F2 4A 02 F6 | 	mov	local23, objptr
026cc     F2 34 02 F1 | 	add	local12, objptr
026d0     1A 13 02 FB | 	rdlong	arg01, local12
026d4     35 00 00 FF 
026d8     3C E4 85 F1 | 	sub	objptr, ##27196
026dc     44 26 B0 FD | 	call	#_isfunction
026e0     FD FA E1 F8 | 	getbyte	result1, result1, #0
026e4     04 2E 06 F1 | 	add	local09, #4
026e8     17 FB 61 FC | 	wrlong	result1, local09
026ec                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
026ec     10 2F 02 F6 | 	mov	local09, local02
026f0     03 2E 66 F0 | 	shl	local09, #3
026f4     35 00 00 FF 
026f8     3C E4 05 F1 | 	add	objptr, ##27196
026fc     F2 2E 02 F1 | 	add	local09, objptr
02700     04 2E 06 F1 | 	add	local09, #4
02704     17 33 02 FB | 	rdlong	local11, local09
02708     01 32 56 F2 | 	cmps	local11, #1 wc
0270c     35 00 00 FF 
02710     3C E4 85 F1 | 	sub	objptr, ##27196
02714     08 05 90 3D |  if_ae	jmp	#LR__0129
02718     10 2F 02 F6 | 	mov	local09, local02
0271c     03 2E 66 F0 | 	shl	local09, #3
02720     35 00 00 FF 
02724     3C E4 05 F1 | 	add	objptr, ##27196
02728     F2 2E 02 F1 | 	add	local09, objptr
0272c     10 31 02 F6 | 	mov	local10, local02
02730     18 37 02 F6 | 	mov	local13, local10
02734     03 36 66 F0 | 	shl	local13, #3
02738     F2 34 02 F6 | 	mov	local12, objptr
0273c     F2 36 02 F1 | 	add	local13, objptr
02740     1B 13 02 FB | 	rdlong	arg01, local13
02744     35 00 00 FF 
02748     3C E4 85 F1 | 	sub	objptr, ##27196
0274c     28 11 B0 FD | 	call	#_isnotename
02750     04 2E 06 F1 | 	add	local09, #4
02754     17 FB 61 FC | 	wrlong	result1, local09
02758                 | ' lparts(i).token=isnotename(lparts(i).part$) 
02758                 | ' if lparts(i).token>0 then 
02758     10 2F 02 F6 | 	mov	local09, local02
0275c     03 2E 66 F0 | 	shl	local09, #3
02760     35 00 00 FF 
02764     3C E4 05 F1 | 	add	objptr, ##27196
02768     F2 2E 02 F1 | 	add	local09, objptr
0276c     04 2E 06 F1 | 	add	local09, #4
02770     17 29 02 FB | 	rdlong	local06, local09
02774     01 28 56 F2 | 	cmps	local06, #1 wc
02778     35 00 00 FF 
0277c     3C E4 85 F1 | 	sub	objptr, ##27196
02780     88 00 90 CD |  if_b	jmp	#LR__0120
02784     10 27 02 F6 | 	mov	local05, local02
02788     03 26 66 F0 | 	shl	local05, #3
0278c     35 00 00 FF 
02790     3C E4 05 F1 | 	add	objptr, ##27196
02794     F2 26 02 F1 | 	add	local05, objptr
02798     04 26 06 F1 | 	add	local05, #4
0279c     13 33 02 FB | 	rdlong	local11, local05
027a0     19 13 02 F6 | 	mov	arg01, local11
027a4     35 00 00 FF 
027a8     3C E4 85 F1 | 	sub	objptr, ##27196
027ac     F0 9C B1 FD | 	call	#_getnoteval
027b0     FD 62 02 F6 | 	mov	local35, result1
027b4     10 2F 02 F6 | 	mov	local09, local02
027b8     03 2E 66 F0 | 	shl	local09, #3
027bc     35 00 00 FF 
027c0     3C E4 05 F1 | 	add	objptr, ##27196
027c4     F2 2E 02 F1 | 	add	local09, objptr
027c8     31 13 02 F6 | 	mov	arg01, local35
027cc     35 00 00 FF 
027d0     3C E4 85 F1 | 	sub	objptr, ##27196
027d4     AC 07 B2 FD | 	call	#__system__str_S
027d8     17 FB 61 FC | 	wrlong	result1, local09
027dc     10 23 02 F6 | 	mov	local03, local02
027e0     11 2F 02 F6 | 	mov	local09, local03
027e4     03 2E 66 F0 | 	shl	local09, #3
027e8     35 00 00 FF 
027ec     3C E4 05 F1 | 	add	objptr, ##27196
027f0     F2 2E 02 F1 | 	add	local09, objptr
027f4     04 2E 06 F1 | 	add	local09, #4
027f8     01 00 80 FF 
027fc     17 05 68 FC | 	wrlong	##514, local09
02800     35 00 00 FF 
02804     3C E4 85 F1 | 	sub	objptr, ##27196
02808     14 04 90 FD | 	jmp	#LR__0129
0280c                 | LR__0120
0280c     10 2F 02 F6 | 	mov	local09, local02
02810     03 2E 66 F0 | 	shl	local09, #3
02814     35 00 00 FF 
02818     3C E4 05 F1 | 	add	objptr, ##27196
0281c     F2 2E 02 F1 | 	add	local09, objptr
02820     10 31 02 F6 | 	mov	local10, local02
02824     18 37 02 F6 | 	mov	local13, local10
02828     03 36 66 F0 | 	shl	local13, #3
0282c     F2 34 02 F6 | 	mov	local12, objptr
02830     F2 36 02 F1 | 	add	local13, objptr
02834     1B 13 02 FB | 	rdlong	arg01, local13
02838     35 00 00 FF 
0283c     3C E4 85 F1 | 	sub	objptr, ##27196
02840     4C 0F B0 FD | 	call	#_ischannel
02844     04 2E 06 F1 | 	add	local09, #4
02848     17 FB 61 FC | 	wrlong	result1, local09
0284c                 | ' lparts(i).token=ischannel(lparts(i).part$)  : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
0284c     10 2F 02 F6 | 	mov	local09, local02
02850     03 2E 66 F0 | 	shl	local09, #3
02854     35 00 00 FF 
02858     3C E4 05 F1 | 	add	objptr, ##27196
0285c     F2 2E 02 F1 | 	add	local09, objptr
02860     04 2E 06 F1 | 	add	local09, #4
02864     17 33 02 FB | 	rdlong	local11, local09
02868     01 32 56 F2 | 	cmps	local11, #1 wc
0286c     35 00 00 FF 
02870     3C E4 85 F1 | 	sub	objptr, ##27196
02874     70 00 90 CD |  if_b	jmp	#LR__0121
02878     10 2F 02 F6 | 	mov	local09, local02
0287c     03 2E 66 F0 | 	shl	local09, #3
02880     35 00 00 FF 
02884     3C E4 05 F1 | 	add	objptr, ##27196
02888     F2 2E 02 F1 | 	add	local09, objptr
0288c     10 31 02 F6 | 	mov	local10, local02
02890     18 37 02 F6 | 	mov	local13, local10
02894     03 36 66 F0 | 	shl	local13, #3
02898     F2 34 02 F6 | 	mov	local12, objptr
0289c     F2 36 02 F1 | 	add	local13, objptr
028a0     1B 13 02 FB | 	rdlong	arg01, local13
028a4     01 32 06 F6 | 	mov	local11, #1
028a8     01 14 06 F6 | 	mov	arg02, #1
028ac     35 00 00 FF 
028b0     3C E4 85 F1 | 	sub	objptr, ##27196
028b4     5C 05 B2 FD | 	call	#__system__Right_S
028b8     17 FB 61 FC | 	wrlong	result1, local09
028bc     10 23 02 F6 | 	mov	local03, local02
028c0     11 2F 02 F6 | 	mov	local09, local03
028c4     03 2E 66 F0 | 	shl	local09, #3
028c8     35 00 00 FF 
028cc     3C E4 05 F1 | 	add	objptr, ##27196
028d0     F2 2E 02 F1 | 	add	local09, objptr
028d4     04 2E 06 F1 | 	add	local09, #4
028d8     17 59 68 FC | 	wrlong	#44, local09
028dc     35 00 00 FF 
028e0     3C E4 85 F1 | 	sub	objptr, ##27196
028e4     38 03 90 FD | 	jmp	#LR__0129
028e8                 | LR__0121
028e8     10 27 02 F6 | 	mov	local05, local02
028ec     03 26 66 F0 | 	shl	local05, #3
028f0     35 00 00 FF 
028f4     3C E4 05 F1 | 	add	objptr, ##27196
028f8     F2 26 02 F1 | 	add	local05, objptr
028fc     13 13 02 FB | 	rdlong	arg01, local05
02900     35 00 00 FF 
02904     3C E4 85 F1 | 	sub	objptr, ##27196
02908     2C 2C B0 FD | 	call	#_isnum
0290c     FD 24 02 F6 | 	mov	local04, result1
02910     5A 00 00 FF 
02914     74 E4 05 F1 | 	add	objptr, ##46196
02918     F2 24 62 FC | 	wrlong	local04, objptr
0291c     10 27 02 F6 | 	mov	local05, local02
02920     03 26 66 F0 | 	shl	local05, #3
02924     25 00 00 FF 
02928     38 E4 85 F1 | 	sub	objptr, ##19000
0292c     F2 26 02 F1 | 	add	local05, objptr
02930     13 13 02 FB | 	rdlong	arg01, local05
02934     35 00 00 FF 
02938     3C E4 85 F1 | 	sub	objptr, ##27196
0293c     D0 2E B0 FD | 	call	#_isint
02940     FD 24 02 F6 | 	mov	local04, result1
02944     5A 00 00 FF 
02948     78 E4 05 F1 | 	add	objptr, ##46200
0294c     F2 24 62 FC | 	wrlong	local04, objptr
02950     10 27 02 F6 | 	mov	local05, local02
02954     03 26 66 F0 | 	shl	local05, #3
02958     25 00 00 FF 
0295c     3C E4 85 F1 | 	sub	objptr, ##19004
02960     F2 28 02 F6 | 	mov	local06, objptr
02964     F2 26 02 F1 | 	add	local05, objptr
02968     13 13 02 FB | 	rdlong	arg01, local05
0296c     35 00 00 FF 
02970     3C E4 85 F1 | 	sub	objptr, ##27196
02974     F0 2F B0 FD | 	call	#_isdec
02978     5A 00 00 FF 
0297c     7C E4 05 F1 | 	add	objptr, ##46204
02980     F2 FA 61 FC | 	wrlong	result1, objptr
02984                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
02984     08 E4 85 F1 | 	sub	objptr, #8
02988     F2 24 0A FB | 	rdlong	local04, objptr wz
0298c     5A 00 00 FF 
02990     74 E4 85 F1 | 	sub	objptr, ##46196
02994     60 00 90 AD |  if_e	jmp	#LR__0122
02998     5A 00 00 FF 
0299c     78 E4 05 F1 | 	add	objptr, ##46200
029a0     F2 2E 0A FB | 	rdlong	local09, objptr wz
029a4     5A 00 00 FF 
029a8     78 E4 85 F1 | 	sub	objptr, ##46200
029ac     48 00 90 AD |  if_e	jmp	#LR__0122
029b0     5A 00 00 FF 
029b4     7C E4 05 F1 | 	add	objptr, ##46204
029b8     F2 32 0A FB | 	rdlong	local11, objptr wz
029bc     5A 00 00 FF 
029c0     7C E4 85 F1 | 	sub	objptr, ##46204
029c4     30 00 90 AD |  if_e	jmp	#LR__0122
029c8     10 23 02 F6 | 	mov	local03, local02
029cc     11 2F 02 F6 | 	mov	local09, local03
029d0     03 2E 66 F0 | 	shl	local09, #3
029d4     35 00 00 FF 
029d8     3C E4 05 F1 | 	add	objptr, ##27196
029dc     F2 2E 02 F1 | 	add	local09, objptr
029e0     04 2E 06 F1 | 	add	local09, #4
029e4     01 00 80 FF 
029e8     17 01 68 FC | 	wrlong	##512, local09
029ec     35 00 00 FF 
029f0     3C E4 85 F1 | 	sub	objptr, ##27196
029f4     28 02 90 FD | 	jmp	#LR__0129
029f8                 | LR__0122
029f8                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
029f8     5A 00 00 FF 
029fc     74 E4 05 F1 | 	add	objptr, ##46196
02a00     F2 24 0A FB | 	rdlong	local04, objptr wz
02a04     5A 00 00 FF 
02a08     74 E4 85 F1 | 	sub	objptr, ##46196
02a0c     64 00 90 AD |  if_e	jmp	#LR__0123
02a10     5A 00 00 FF 
02a14     78 E4 05 F1 | 	add	objptr, ##46200
02a18     F2 2E 0A FB | 	rdlong	local09, objptr wz
02a1c     5A 00 00 FF 
02a20     78 E4 85 F1 | 	sub	objptr, ##46200
02a24     5A 00 00 5F 
02a28     7C E4 05 51 |  if_ne	add	objptr, ##46204
02a2c     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02a30     5A 00 00 5F 
02a34     7C E4 85 51 |  if_ne	sub	objptr, ##46204
02a38     19 29 22 56 |  if_ne	not	local06, local11
02a3c     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02a40     30 00 90 AD |  if_e	jmp	#LR__0123
02a44     10 23 02 F6 | 	mov	local03, local02
02a48     11 2F 02 F6 | 	mov	local09, local03
02a4c     03 2E 66 F0 | 	shl	local09, #3
02a50     35 00 00 FF 
02a54     3C E4 05 F1 | 	add	objptr, ##27196
02a58     F2 2E 02 F1 | 	add	local09, objptr
02a5c     04 2E 06 F1 | 	add	local09, #4
02a60     01 00 80 FF 
02a64     17 03 68 FC | 	wrlong	##513, local09
02a68     35 00 00 FF 
02a6c     3C E4 85 F1 | 	sub	objptr, ##27196
02a70     AC 01 90 FD | 	jmp	#LR__0129
02a74                 | LR__0123
02a74                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
02a74     5A 00 00 FF 
02a78     74 E4 05 F1 | 	add	objptr, ##46196
02a7c     F2 24 0A FB | 	rdlong	local04, objptr wz
02a80     5A 00 00 FF 
02a84     74 E4 85 F1 | 	sub	objptr, ##46196
02a88     5A 00 00 5F 
02a8c     78 E4 05 51 |  if_ne	add	objptr, ##46200
02a90     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
02a94     5A 00 00 5F 
02a98     78 E4 85 51 |  if_ne	sub	objptr, ##46200
02a9c     17 2F 22 56 |  if_ne	not	local09, local09
02aa0     00 2E 0E 52 |  if_ne	cmp	local09, #0 wz
02aa4     5A 00 00 5F 
02aa8     7C E4 05 51 |  if_ne	add	objptr, ##46204
02aac     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02ab0     5A 00 00 5F 
02ab4     7C E4 85 51 |  if_ne	sub	objptr, ##46204
02ab8     19 29 22 56 |  if_ne	not	local06, local11
02abc     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02ac0     30 00 90 AD |  if_e	jmp	#LR__0124
02ac4     10 23 02 F6 | 	mov	local03, local02
02ac8     11 2F 02 F6 | 	mov	local09, local03
02acc     03 2E 66 F0 | 	shl	local09, #3
02ad0     35 00 00 FF 
02ad4     3C E4 05 F1 | 	add	objptr, ##27196
02ad8     F2 2E 02 F1 | 	add	local09, objptr
02adc     04 2E 06 F1 | 	add	local09, #4
02ae0     01 00 80 FF 
02ae4     17 05 68 FC | 	wrlong	##514, local09
02ae8     35 00 00 FF 
02aec     3C E4 85 F1 | 	sub	objptr, ##27196
02af0     2C 01 90 FD | 	jmp	#LR__0129
02af4                 | LR__0124
02af4                 | ' 
02af4                 | ' if isstring(lparts(i).part$) then 
02af4     10 27 02 F6 | 	mov	local05, local02
02af8     03 26 66 F0 | 	shl	local05, #3
02afc     35 00 00 FF 
02b00     3C E4 05 F1 | 	add	objptr, ##27196
02b04     F2 26 02 F1 | 	add	local05, objptr
02b08     13 13 02 FB | 	rdlong	arg01, local05
02b0c     35 00 00 FF 
02b10     3C E4 85 F1 | 	sub	objptr, ##27196
02b14     10 2F B0 FD | 	call	#_isstring
02b18     00 FA 0D F2 | 	cmp	result1, #0 wz
02b1c     A4 00 90 AD |  if_e	jmp	#LR__0127
02b20     10 2F 02 F6 | 	mov	local09, local02
02b24     03 2E 66 F0 | 	shl	local09, #3
02b28     35 00 00 FF 
02b2c     3C E4 05 F1 | 	add	objptr, ##27196
02b30     F2 2E 02 F1 | 	add	local09, objptr
02b34     04 2E 06 F1 | 	add	local09, #4
02b38     01 00 80 FF 
02b3c     17 07 68 FC | 	wrlong	##515, local09
02b40     10 23 02 F6 | 	mov	local03, local02
02b44     11 2F 02 F6 | 	mov	local09, local03
02b48     03 2E 66 F0 | 	shl	local09, #3
02b4c     F2 2E 02 F1 | 	add	local09, objptr
02b50     10 37 02 F6 | 	mov	local13, local02
02b54     03 36 66 F0 | 	shl	local13, #3
02b58     F2 36 02 F1 | 	add	local13, objptr
02b5c     1B 29 02 FB | 	rdlong	local06, local13
02b60     02 32 06 F6 | 	mov	local11, #2
02b64     10 43 02 F6 | 	mov	local19, local02
02b68     21 45 02 F6 | 	mov	local20, local19
02b6c     03 44 66 F0 | 	shl	local20, #3
02b70     F2 46 02 F6 | 	mov	local21, objptr
02b74     F2 44 02 F1 | 	add	local20, objptr
02b78     22 13 02 FB | 	rdlong	arg01, local20
02b7c     35 00 00 FF 
02b80     3C E4 85 F1 | 	sub	objptr, ##27196
02b84     09 2B 02 F6 | 	mov	local07, arg01
02b88     97 06 48 FB | 	callpa	#(@LR__0126-@LR__0125)>>2,fcache_load_ptr_
02b8c                 | LR__0125
02b8c     15 FB C9 FA | 	rdbyte	result1, local07 wz
02b90     01 2A 06 51 |  if_ne	add	local07, #1
02b94     F4 FF 9F 5D |  if_ne	jmp	#LR__0125
02b98                 | LR__0126
02b98     09 2B 82 F1 | 	sub	local07, arg01
02b9c     15 35 02 F6 | 	mov	local12, local07
02ba0     1A 37 02 F6 | 	mov	local13, local12
02ba4     02 36 86 F1 | 	sub	local13, #2
02ba8     1B 31 02 F6 | 	mov	local10, local13
02bac     14 13 02 F6 | 	mov	arg01, local06
02bb0     19 15 02 F6 | 	mov	arg02, local11
02bb4     18 17 02 F6 | 	mov	arg03, local10
02bb8     E8 02 B2 FD | 	call	#__system__Mid_S
02bbc     17 FB 61 FC | 	wrlong	result1, local09
02bc0     5C 00 90 FD | 	jmp	#LR__0129
02bc4                 | LR__0127
02bc4                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
02bc4     10 23 02 F6 | 	mov	local03, local02
02bc8     11 27 02 F6 | 	mov	local05, local03
02bcc     03 26 66 F0 | 	shl	local05, #3
02bd0     35 00 00 FF 
02bd4     3C E4 05 F1 | 	add	objptr, ##27196
02bd8     F2 26 02 F1 | 	add	local05, objptr
02bdc     13 13 02 FB | 	rdlong	arg01, local05
02be0     35 00 00 FF 
02be4     3C E4 85 F1 | 	sub	objptr, ##27196
02be8     D8 26 B0 FD | 	call	#_isname
02bec     00 FA 4D F2 | 	cmps	result1, #0 wz
02bf0     2C 00 90 AD |  if_e	jmp	#LR__0128
02bf4     10 23 02 F6 | 	mov	local03, local02
02bf8     11 2F 02 F6 | 	mov	local09, local03
02bfc     03 2E 66 F0 | 	shl	local09, #3
02c00     35 00 00 FF 
02c04     3C E4 05 F1 | 	add	objptr, ##27196
02c08     F2 2E 02 F1 | 	add	local09, objptr
02c0c     04 2E 06 F1 | 	add	local09, #4
02c10     01 00 80 FF 
02c14     17 09 68 FC | 	wrlong	##516, local09
02c18     35 00 00 FF 
02c1c     3C E4 85 F1 | 	sub	objptr, ##27196
02c20                 | LR__0128
02c20                 | LR__0129
02c20     01 20 06 F1 | 	add	local02, #1
02c24     A0 F8 9F FD | 	jmp	#LR__0119
02c28                 | LR__0130
02c28     1D 2F 02 F6 | 	mov	local09, local15
02c2c     03 2E 66 F0 | 	shl	local09, #3
02c30     35 00 00 FF 
02c34     3C E4 05 F1 | 	add	objptr, ##27196
02c38     F2 2E 02 F1 | 	add	local09, objptr
02c3c     04 2E 06 F1 | 	add	local09, #4
02c40     17 FD 6B FC | 	wrlong	#510, local09
02c44     1D 2F 02 F6 | 	mov	local09, local15
02c48     03 2E 66 F0 | 	shl	local09, #3
02c4c     F2 26 02 F6 | 	mov	local05, objptr
02c50     F2 2E 02 F1 | 	add	local09, objptr
02c54     83 01 00 FF 
02c58     59 28 06 F6 | 	mov	local06, ##@LR__5042
02c5c     17 29 62 FC | 	wrlong	local06, local09
02c60     10 00 00 FF 
02c64     54 E4 05 F1 | 	add	objptr, ##8276
02c68     F2 3A 62 FC | 	wrlong	local15, objptr
02c6c                 | ' 
02c6c                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02c6c                 | ' 
02c6c                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02c6c                 | '  
02c6c                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
02c6c     14 00 00 FF 
02c70     DC E5 05 F1 | 	add	objptr, ##10716
02c74     F2 12 02 FB | 	rdlong	arg01, objptr
02c78     5A 00 00 FF 
02c7c     6C E4 85 F1 | 	sub	objptr, ##46188
02c80     83 01 00 FF 
02c84     5A 2E 06 F6 | 	mov	local09, ##@LR__5043
02c88     17 15 02 F6 | 	mov	arg02, local09
02c8c     A8 E0 B1 FD | 	call	#__system___string_cmp
02c90     00 FA 0D F2 | 	cmp	result1, #0 wz
02c94     7C 01 90 AD |  if_e	jmp	#LR__0131
02c98     5A 00 00 FF 
02c9c     6C E4 05 F1 | 	add	objptr, ##46188
02ca0     F2 12 02 FB | 	rdlong	arg01, objptr
02ca4     5A 00 00 FF 
02ca8     6C E4 85 F1 | 	sub	objptr, ##46188
02cac     83 01 00 FF 
02cb0     5F 26 06 F6 | 	mov	local05, ##@LR__5044
02cb4     13 2F 02 F6 | 	mov	local09, local05
02cb8     17 15 02 F6 | 	mov	arg02, local09
02cbc     78 E0 B1 FD | 	call	#__system___string_cmp
02cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
02cc4     4C 01 90 AD |  if_e	jmp	#LR__0131
02cc8     5A 00 00 FF 
02ccc     6C E4 05 F1 | 	add	objptr, ##46188
02cd0     F2 12 02 FB | 	rdlong	arg01, objptr
02cd4     5A 00 00 FF 
02cd8     6C E4 85 F1 | 	sub	objptr, ##46188
02cdc     83 01 00 FF 
02ce0     64 28 06 F6 | 	mov	local06, ##@LR__5045
02ce4     14 27 02 F6 | 	mov	local05, local06
02ce8     13 15 02 F6 | 	mov	arg02, local05
02cec     48 E0 B1 FD | 	call	#__system___string_cmp
02cf0     FD 2E 0A F6 | 	mov	local09, result1 wz
02cf4     1C 01 90 AD |  if_e	jmp	#LR__0131
02cf8     5A 00 00 FF 
02cfc     6C E4 05 F1 | 	add	objptr, ##46188
02d00     F2 12 02 FB | 	rdlong	arg01, objptr
02d04     5A 00 00 FF 
02d08     6C E4 85 F1 | 	sub	objptr, ##46188
02d0c     83 01 00 FF 
02d10     69 32 06 F6 | 	mov	local11, ##@LR__5046
02d14     19 29 02 F6 | 	mov	local06, local11
02d18     14 15 02 F6 | 	mov	arg02, local06
02d1c     18 E0 B1 FD | 	call	#__system___string_cmp
02d20     FD 26 0A F6 | 	mov	local05, result1 wz
02d24     EC 00 90 AD |  if_e	jmp	#LR__0131
02d28     5A 00 00 FF 
02d2c     6C E4 05 F1 | 	add	objptr, ##46188
02d30     F2 12 02 FB | 	rdlong	arg01, objptr
02d34     5A 00 00 FF 
02d38     6C E4 85 F1 | 	sub	objptr, ##46188
02d3c     83 01 00 FF 
02d40     6D 30 06 F6 | 	mov	local10, ##@LR__5047
02d44     18 33 02 F6 | 	mov	local11, local10
02d48     19 15 02 F6 | 	mov	arg02, local11
02d4c     E8 DF B1 FD | 	call	#__system___string_cmp
02d50     FD 28 0A F6 | 	mov	local06, result1 wz
02d54     BC 00 90 AD |  if_e	jmp	#LR__0131
02d58     5A 00 00 FF 
02d5c     6C E4 05 F1 | 	add	objptr, ##46188
02d60     F2 12 02 FB | 	rdlong	arg01, objptr
02d64     5A 00 00 FF 
02d68     6C E4 85 F1 | 	sub	objptr, ##46188
02d6c     83 01 00 FF 
02d70     71 36 06 F6 | 	mov	local13, ##@LR__5048
02d74     1B 31 02 F6 | 	mov	local10, local13
02d78     18 15 02 F6 | 	mov	arg02, local10
02d7c     B8 DF B1 FD | 	call	#__system___string_cmp
02d80     FD 32 0A F6 | 	mov	local11, result1 wz
02d84     8C 00 90 AD |  if_e	jmp	#LR__0131
02d88     5A 00 00 FF 
02d8c     6C E4 05 F1 | 	add	objptr, ##46188
02d90     F2 12 02 FB | 	rdlong	arg01, objptr
02d94     5A 00 00 FF 
02d98     6C E4 85 F1 | 	sub	objptr, ##46188
02d9c     83 01 00 FF 
02da0     74 34 06 F6 | 	mov	local12, ##@LR__5049
02da4     1A 37 02 F6 | 	mov	local13, local12
02da8     1B 15 02 F6 | 	mov	arg02, local13
02dac     88 DF B1 FD | 	call	#__system___string_cmp
02db0     FD 30 0A F6 | 	mov	local10, result1 wz
02db4     5C 00 90 AD |  if_e	jmp	#LR__0131
02db8     5A 00 00 FF 
02dbc     6C E4 05 F1 | 	add	objptr, ##46188
02dc0     F2 12 02 FB | 	rdlong	arg01, objptr
02dc4     5A 00 00 FF 
02dc8     6C E4 85 F1 | 	sub	objptr, ##46188
02dcc     83 01 00 FF 
02dd0     78 34 06 F6 | 	mov	local12, ##@LR__5050
02dd4     1A 15 02 F6 | 	mov	arg02, local12
02dd8     5C DF B1 FD | 	call	#__system___string_cmp
02ddc     FD 36 0A F6 | 	mov	local13, result1 wz
02de0     30 00 90 AD |  if_e	jmp	#LR__0131
02de4     5A 00 00 FF 
02de8     6C E4 05 F1 | 	add	objptr, ##46188
02dec     F2 12 02 FB | 	rdlong	arg01, objptr
02df0     5A 00 00 FF 
02df4     6C E4 85 F1 | 	sub	objptr, ##46188
02df8     83 01 00 FF 
02dfc     7E 42 06 F6 | 	mov	local19, ##@LR__5051
02e00     21 4B 02 F6 | 	mov	local23, local19
02e04     25 15 02 F6 | 	mov	arg02, local23
02e08     2C DF B1 FD | 	call	#__system___string_cmp
02e0c     FD 34 0A F6 | 	mov	local12, result1 wz
02e10     9C 00 90 5D |  if_ne	jmp	#LR__0132
02e14                 | LR__0131
02e14     5A 00 00 FF 
02e18     68 E4 05 F1 | 	add	objptr, ##46184
02e1c     F2 42 02 FB | 	rdlong	local19, objptr
02e20     21 4B 02 F6 | 	mov	local23, local19
02e24     01 4A 06 F1 | 	add	local23, #1
02e28     25 45 02 F6 | 	mov	local20, local23
02e2c     22 47 02 F6 | 	mov	local21, local20
02e30     03 46 66 F0 | 	shl	local21, #3
02e34     25 00 00 FF 
02e38     2C E4 85 F1 | 	sub	objptr, ##18988
02e3c     F2 4C 02 F6 | 	mov	local24, objptr
02e40     F2 46 02 F1 | 	add	local21, objptr
02e44     04 46 06 F1 | 	add	local21, #4
02e48     23 51 02 FB | 	rdlong	local26, local21
02e4c     04 46 86 F1 | 	sub	local21, #4
02e50     28 4F 02 F6 | 	mov	local25, local26
02e54     01 00 00 FF 
02e58     04 4E 0E F2 | 	cmp	local25, ##516 wz
02e5c     35 00 00 FF 
02e60     3C E4 85 F1 | 	sub	objptr, ##27196
02e64     48 00 90 5D |  if_ne	jmp	#LR__0132
02e68     5A 00 00 FF 
02e6c     68 E4 05 F1 | 	add	objptr, ##46184
02e70     F2 2E 02 FB | 	rdlong	local09, objptr
02e74     01 2E 06 F1 | 	add	local09, #1
02e78     17 27 02 F6 | 	mov	local05, local09
02e7c     03 26 66 F0 | 	shl	local05, #3
02e80     25 00 00 FF 
02e84     2C E4 85 F1 | 	sub	objptr, ##18988
02e88     F2 28 02 F6 | 	mov	local06, objptr
02e8c     F2 26 02 F1 | 	add	local05, objptr
02e90     01 00 00 FF 
02e94     03 32 06 F6 | 	mov	local11, ##515
02e98     04 26 06 F1 | 	add	local05, #4
02e9c     01 00 80 FF 
02ea0     13 07 68 FC | 	wrlong	##515, local05
02ea4     04 26 86 F1 | 	sub	local05, #4
02ea8     35 00 00 FF 
02eac     3C E4 85 F1 | 	sub	objptr, ##27196
02eb0                 | LR__0132
02eb0                 | ' 
02eb0                 | ' ' abbreviated command has to be at the position addptr
02eb0                 | ' 
02eb0                 | ' 
02eb0                 | ' 
02eb0                 | ' '2b determine a type of the line
02eb0                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02eb0     35 00 00 FF 
02eb4     3C E4 05 F1 | 	add	objptr, ##27196
02eb8     F2 12 02 FB | 	rdlong	arg01, objptr
02ebc     35 00 00 FF 
02ec0     3C E4 85 F1 | 	sub	objptr, ##27196
02ec4     A0 2A B0 FD | 	call	#_isdec
02ec8     00 FA 0D F2 | 	cmp	result1, #0 wz
02ecc     30 00 90 AD |  if_e	jmp	#LR__0133
02ed0     35 00 00 FF 
02ed4     3C E4 05 F1 | 	add	objptr, ##27196
02ed8     F2 12 02 FB | 	rdlong	arg01, objptr
02edc     35 00 00 FF 
02ee0     3C E4 85 F1 | 	sub	objptr, ##27196
02ee4     00 14 06 F6 | 	mov	arg02, #0
02ee8     50 10 B2 FD | 	call	#__system____builtin_atoi
02eec     59 00 00 FF 
02ef0     F8 E5 05 F1 | 	add	objptr, ##46072
02ef4     F2 FA 61 FC | 	wrlong	result1, objptr
02ef8     59 00 00 FF 
02efc     F8 E5 85 F1 | 	sub	objptr, ##46072
02f00                 | LR__0133
02f00                 | ' 
02f00                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
02f00     59 00 00 FF 
02f04     F8 E5 05 F1 | 	add	objptr, ##46072
02f08     F2 24 02 FB | 	rdlong	local04, objptr
02f0c     59 00 00 FF 
02f10     F8 E5 85 F1 | 	sub	objptr, ##46072
02f14     01 24 16 F2 | 	cmp	local04, #1 wc
02f18     3C 00 90 CD |  if_b	jmp	#LR__0134
02f1c     01 3A 0E F2 | 	cmp	local15, #1 wz
02f20     37 00 00 AF 
02f24     54 E4 05 A1 |  if_e	add	objptr, ##28244
02f28     F2 26 02 AB |  if_e	rdlong	local05, objptr
02f2c     37 00 00 AF 
02f30     54 E4 85 A1 |  if_e	sub	objptr, ##28244
02f34     03 26 0E A2 |  if_e	cmp	local05, #3 wz
02f38     1C 00 90 5D |  if_ne	jmp	#LR__0134
02f3c     59 00 00 FF 
02f40     F8 E5 05 F1 | 	add	objptr, ##46072
02f44     F2 12 02 FB | 	rdlong	arg01, objptr
02f48     59 00 00 FF 
02f4c     F8 E5 85 F1 | 	sub	objptr, ##46072
02f50     38 2B B0 FD | 	call	#_deleteline
02f54     4C 05 90 FD | 	jmp	#LR__0151
02f58                 | LR__0134
02f58                 | ' 
02f58                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
02f58     59 00 00 FF 
02f5c     F8 E5 05 F1 | 	add	objptr, ##46072
02f60     F2 24 02 FB | 	rdlong	local04, objptr
02f64     59 00 00 FF 
02f68     F8 E5 85 F1 | 	sub	objptr, ##46072
02f6c     01 24 16 F2 | 	cmp	local04, #1 wc
02f70     EC 00 90 CD |  if_b	jmp	#LR__0137
02f74     37 00 00 FF 
02f78     54 E4 05 F1 | 	add	objptr, ##28244
02f7c     F2 26 02 FB | 	rdlong	local05, objptr
02f80     37 00 00 FF 
02f84     54 E4 85 F1 | 	sub	objptr, ##28244
02f88     13 2F 0A F6 | 	mov	local09, local05 wz
02f8c     20 00 90 AD |  if_e	jmp	#LR__0135
02f90     37 00 00 FF 
02f94     54 E4 05 F1 | 	add	objptr, ##28244
02f98     F2 32 02 FB | 	rdlong	local11, objptr
02f9c     37 00 00 FF 
02fa0     54 E4 85 F1 | 	sub	objptr, ##28244
02fa4     19 29 02 F6 | 	mov	local06, local11
02fa8     03 28 0E F2 | 	cmp	local06, #3 wz
02fac     B0 00 90 5D |  if_ne	jmp	#LR__0137
02fb0                 | LR__0135
02fb0     35 00 00 FF 
02fb4     50 E4 05 F1 | 	add	objptr, ##27216
02fb8     F2 36 02 FB | 	rdlong	local13, objptr
02fbc     35 00 00 FF 
02fc0     50 E4 85 F1 | 	sub	objptr, ##27216
02fc4     1B 31 02 F6 | 	mov	local10, local13
02fc8     1B 30 0E F2 | 	cmp	local10, #27 wz
02fcc     90 00 90 AD |  if_e	jmp	#LR__0137
02fd0     59 00 00 FF 
02fd4     F8 E5 05 F1 | 	add	objptr, ##46072
02fd8     F2 12 02 FB | 	rdlong	arg01, objptr
02fdc     22 00 00 FF 
02fe0     A4 E5 85 F1 | 	sub	objptr, ##17828
02fe4     F2 16 02 FB | 	rdlong	arg03, objptr
02fe8     37 00 00 FF 
02fec     54 E4 85 F1 | 	sub	objptr, ##28244
02ff0     00 14 06 F6 | 	mov	arg02, #0
02ff4     E0 3F B0 FD | 	call	#_compile
02ff8     FD 1E 0A F6 | 	mov	local01, result1 wz
02ffc                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02ffc                 | '   if err<>0 then printerror(err): goto 104
02ffc     0C 00 90 AD |  if_e	jmp	#LR__0136
03000     0F 13 02 F6 | 	mov	arg01, local01
03004     60 98 B1 FD | 	call	#_printerror
03008     98 04 90 FD | 	jmp	#LR__0151
0300c                 | LR__0136
0300c                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
0300c     5A 00 00 FF 
03010     44 E4 05 F1 | 	add	objptr, ##46148
03014     F2 12 02 FB | 	rdlong	arg01, objptr
03018     5A 00 00 FF 
0301c     44 E4 85 F1 | 	sub	objptr, ##46148
03020     83 01 00 FF 
03024     81 14 06 F6 | 	mov	arg02, ##@LR__5052
03028     0C DD B1 FD | 	call	#__system___string_cmp
0302c     00 FA 0D F2 | 	cmp	result1, #0 wz
03030     70 04 90 AD |  if_e	jmp	#LR__0151
03034     5A 00 00 FF 
03038     44 E4 05 F1 | 	add	objptr, ##46148
0303c     F2 24 02 FB | 	rdlong	local04, objptr
03040     22 00 00 FF 
03044     F8 E5 85 F1 | 	sub	objptr, ##17912
03048     F2 24 62 FC | 	wrlong	local04, objptr
0304c     08 E4 05 F1 | 	add	objptr, #8
03050     F2 08 68 FC | 	wrlong	#4, objptr
03054     37 00 00 FF 
03058     54 E4 85 F1 | 	sub	objptr, ##28244
0305c     28 DA 9F FD | 	jmp	#LR__0020
03060                 | LR__0137
03060                 | '       							
03060                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
03060     59 00 00 FF 
03064     F8 E5 05 F1 | 	add	objptr, ##46072
03068     F2 24 02 FB | 	rdlong	local04, objptr
0306c     59 00 00 FF 
03070     F8 E5 85 F1 | 	sub	objptr, ##46072
03074     01 24 16 F2 | 	cmp	local04, #1 wc
03078     EC 00 90 CD |  if_b	jmp	#LR__0140
0307c     37 00 00 FF 
03080     54 E4 05 F1 | 	add	objptr, ##28244
03084     F2 26 02 FB | 	rdlong	local05, objptr
03088     37 00 00 FF 
0308c     54 E4 85 F1 | 	sub	objptr, ##28244
03090     01 26 0E F2 | 	cmp	local05, #1 wz
03094     20 00 90 AD |  if_e	jmp	#LR__0138
03098     37 00 00 FF 
0309c     54 E4 05 F1 | 	add	objptr, ##28244
030a0     F2 32 02 FB | 	rdlong	local11, objptr
030a4     37 00 00 FF 
030a8     54 E4 85 F1 | 	sub	objptr, ##28244
030ac     19 29 02 F6 | 	mov	local06, local11
030b0     02 28 0E F2 | 	cmp	local06, #2 wz
030b4     B0 00 90 5D |  if_ne	jmp	#LR__0140
030b8                 | LR__0138
030b8     35 00 00 FF 
030bc     48 E4 05 F1 | 	add	objptr, ##27208
030c0     F2 36 02 FB | 	rdlong	local13, objptr
030c4     35 00 00 FF 
030c8     48 E4 85 F1 | 	sub	objptr, ##27208
030cc     1B 31 02 F6 | 	mov	local10, local13
030d0     1B 30 0E F2 | 	cmp	local10, #27 wz
030d4     90 00 90 AD |  if_e	jmp	#LR__0140
030d8     59 00 00 FF 
030dc     F8 E5 05 F1 | 	add	objptr, ##46072
030e0     F2 12 02 FB | 	rdlong	arg01, objptr
030e4     22 00 00 FF 
030e8     A4 E5 85 F1 | 	sub	objptr, ##17828
030ec     F2 16 02 FB | 	rdlong	arg03, objptr
030f0     37 00 00 FF 
030f4     54 E4 85 F1 | 	sub	objptr, ##28244
030f8     00 14 06 F6 | 	mov	arg02, #0
030fc     D8 3E B0 FD | 	call	#_compile
03100     FD 1E 0A F6 | 	mov	local01, result1 wz
03104                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
03104                 | '   if err<>0 then printerror(err): goto 104
03104     0C 00 90 AD |  if_e	jmp	#LR__0139
03108     0F 13 02 F6 | 	mov	arg01, local01
0310c     58 97 B1 FD | 	call	#_printerror
03110     90 03 90 FD | 	jmp	#LR__0151
03114                 | LR__0139
03114                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
03114     5A 00 00 FF 
03118     44 E4 05 F1 | 	add	objptr, ##46148
0311c     F2 12 02 FB | 	rdlong	arg01, objptr
03120     5A 00 00 FF 
03124     44 E4 85 F1 | 	sub	objptr, ##46148
03128     83 01 00 FF 
0312c     82 14 06 F6 | 	mov	arg02, ##@LR__5053
03130     04 DC B1 FD | 	call	#__system___string_cmp
03134     00 FA 0D F2 | 	cmp	result1, #0 wz
03138     68 03 90 AD |  if_e	jmp	#LR__0151
0313c     5A 00 00 FF 
03140     44 E4 05 F1 | 	add	objptr, ##46148
03144     F2 24 02 FB | 	rdlong	local04, objptr
03148     22 00 00 FF 
0314c     F8 E5 85 F1 | 	sub	objptr, ##17912
03150     F2 24 62 FC | 	wrlong	local04, objptr
03154     08 E4 05 F1 | 	add	objptr, #8
03158     F2 08 68 FC | 	wrlong	#4, objptr
0315c     37 00 00 FF 
03160     54 E4 85 F1 | 	sub	objptr, ##28244
03164     20 D9 9F FD | 	jmp	#LR__0020
03168                 | LR__0140
03168                 | ' 							 
03168                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
03168     59 00 00 FF 
0316c     F8 E5 05 F1 | 	add	objptr, ##46072
03170     F2 24 02 FB | 	rdlong	local04, objptr
03174     59 00 00 FF 
03178     F8 E5 85 F1 | 	sub	objptr, ##46072
0317c     01 24 16 F2 | 	cmp	local04, #1 wc
03180     D4 00 90 CD |  if_b	jmp	#LR__0142
03184     37 00 00 FF 
03188     54 E4 05 F1 | 	add	objptr, ##28244
0318c     F2 26 0A FB | 	rdlong	local05, objptr wz
03190     37 00 00 FF 
03194     54 E4 85 F1 | 	sub	objptr, ##28244
03198     20 00 90 AD |  if_e	jmp	#LR__0141
0319c     37 00 00 FF 
031a0     54 E4 05 F1 | 	add	objptr, ##28244
031a4     F2 32 02 FB | 	rdlong	local11, objptr
031a8     37 00 00 FF 
031ac     54 E4 85 F1 | 	sub	objptr, ##28244
031b0     19 29 02 F6 | 	mov	local06, local11
031b4     03 28 0E F2 | 	cmp	local06, #3 wz
031b8     9C 00 90 5D |  if_ne	jmp	#LR__0142
031bc                 | LR__0141
031bc     35 00 00 FF 
031c0     50 E4 05 F1 | 	add	objptr, ##27216
031c4     F2 36 02 FB | 	rdlong	local13, objptr
031c8     35 00 00 FF 
031cc     50 E4 85 F1 | 	sub	objptr, ##27216
031d0     1B 31 02 F6 | 	mov	local10, local13
031d4     1B 30 0E F2 | 	cmp	local10, #27 wz
031d8     7C 00 90 5D |  if_ne	jmp	#LR__0142
031dc     59 00 00 FF 
031e0     F8 E5 05 F1 | 	add	objptr, ##46072
031e4     F2 12 02 FB | 	rdlong	arg01, objptr
031e8     22 00 00 FF 
031ec     A4 E5 85 F1 | 	sub	objptr, ##17828
031f0     F2 16 02 FB | 	rdlong	arg03, objptr
031f4     37 00 00 FF 
031f8     54 E4 85 F1 | 	sub	objptr, ##28244
031fc     00 14 06 F6 | 	mov	arg02, #0
03200     A4 3E B0 FD | 	call	#_compile_assign
03204                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
03204                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
03204     5A 00 00 FF 
03208     44 E4 05 F1 | 	add	objptr, ##46148
0320c     F2 12 02 FB | 	rdlong	arg01, objptr
03210     5A 00 00 FF 
03214     44 E4 85 F1 | 	sub	objptr, ##46148
03218     83 01 00 FF 
0321c     83 14 06 F6 | 	mov	arg02, ##@LR__5054
03220     14 DB B1 FD | 	call	#__system___string_cmp
03224     00 FA 0D F2 | 	cmp	result1, #0 wz
03228     78 02 90 AD |  if_e	jmp	#LR__0151
0322c     5A 00 00 FF 
03230     44 E4 05 F1 | 	add	objptr, ##46148
03234     F2 24 02 FB | 	rdlong	local04, objptr
03238     22 00 00 FF 
0323c     F8 E5 85 F1 | 	sub	objptr, ##17912
03240     F2 24 62 FC | 	wrlong	local04, objptr
03244     08 E4 05 F1 | 	add	objptr, #8
03248     F2 08 68 FC | 	wrlong	#4, objptr
0324c     37 00 00 FF 
03250     54 E4 85 F1 | 	sub	objptr, ##28244
03254     30 D8 9F FD | 	jmp	#LR__0020
03258                 | LR__0142
03258                 | '     							 
03258                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
03258     59 00 00 FF 
0325c     F8 E5 05 F1 | 	add	objptr, ##46072
03260     F2 24 02 FB | 	rdlong	local04, objptr
03264     59 00 00 FF 
03268     F8 E5 85 F1 | 	sub	objptr, ##46072
0326c     01 24 16 F2 | 	cmp	local04, #1 wc
03270     CC 00 90 CD |  if_b	jmp	#LR__0143
03274     37 00 00 FF 
03278     54 E4 05 F1 | 	add	objptr, ##28244
0327c     F2 26 02 FB | 	rdlong	local05, objptr
03280     37 00 00 FF 
03284     54 E4 85 F1 | 	sub	objptr, ##28244
03288     01 26 0E F2 | 	cmp	local05, #1 wz
0328c     37 00 00 5F 
03290     54 E4 05 51 |  if_ne	add	objptr, ##28244
03294     F2 32 02 5B |  if_ne	rdlong	local11, objptr
03298     37 00 00 5F 
0329c     54 E4 85 51 |  if_ne	sub	objptr, ##28244
032a0     02 32 0E 52 |  if_ne	cmp	local11, #2 wz
032a4     35 00 00 AF 
032a8     48 E4 05 A1 |  if_e	add	objptr, ##27208
032ac     F2 36 02 AB |  if_e	rdlong	local13, objptr
032b0     35 00 00 AF 
032b4     48 E4 85 A1 |  if_e	sub	objptr, ##27208
032b8     1B 31 02 A6 |  if_e	mov	local10, local13
032bc     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
032c0     7C 00 90 5D |  if_ne	jmp	#LR__0143
032c4     59 00 00 FF 
032c8     F8 E5 05 F1 | 	add	objptr, ##46072
032cc     F2 12 02 FB | 	rdlong	arg01, objptr
032d0     22 00 00 FF 
032d4     A4 E5 85 F1 | 	sub	objptr, ##17828
032d8     F2 16 02 FB | 	rdlong	arg03, objptr
032dc     37 00 00 FF 
032e0     54 E4 85 F1 | 	sub	objptr, ##28244
032e4     00 14 06 F6 | 	mov	arg02, #0
032e8     BC 3D B0 FD | 	call	#_compile_assign
032ec                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
032ec                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
032ec     5A 00 00 FF 
032f0     44 E4 05 F1 | 	add	objptr, ##46148
032f4     F2 12 02 FB | 	rdlong	arg01, objptr
032f8     5A 00 00 FF 
032fc     44 E4 85 F1 | 	sub	objptr, ##46148
03300     83 01 00 FF 
03304     84 14 06 F6 | 	mov	arg02, ##@LR__5055
03308     2C DA B1 FD | 	call	#__system___string_cmp
0330c     00 FA 0D F2 | 	cmp	result1, #0 wz
03310     90 01 90 AD |  if_e	jmp	#LR__0151
03314     5A 00 00 FF 
03318     44 E4 05 F1 | 	add	objptr, ##46148
0331c     F2 24 02 FB | 	rdlong	local04, objptr
03320     22 00 00 FF 
03324     F8 E5 85 F1 | 	sub	objptr, ##17912
03328     F2 24 62 FC | 	wrlong	local04, objptr
0332c     08 E4 05 F1 | 	add	objptr, #8
03330     F2 08 68 FC | 	wrlong	#4, objptr
03334     37 00 00 FF 
03338     54 E4 85 F1 | 	sub	objptr, ##28244
0333c     48 D7 9F FD | 	jmp	#LR__0020
03340                 | LR__0143
03340                 | ' 
03340                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
03340     35 00 00 FF 
03344     40 E4 05 F1 | 	add	objptr, ##27200
03348     F2 24 02 FB | 	rdlong	local04, objptr
0334c     35 00 00 FF 
03350     40 E4 85 F1 | 	sub	objptr, ##27200
03354     01 00 00 FF 
03358     04 24 0E F2 | 	cmp	local04, ##516 wz
0335c     35 00 00 AF 
03360     48 E4 05 A1 |  if_e	add	objptr, ##27208
03364     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03368     35 00 00 AF 
0336c     48 E4 85 A1 |  if_e	sub	objptr, ##27208
03370     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
03374     14 00 90 5D |  if_ne	jmp	#LR__0144
03378     00 12 06 F6 | 	mov	arg01, #0
0337c     00 14 06 F6 | 	mov	arg02, #0
03380     00 16 06 F6 | 	mov	arg03, #0
03384     20 3D B0 FD | 	call	#_compile_assign
03388     90 00 90 FD | 	jmp	#LR__0146
0338c                 | LR__0144
0338c                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
0338c     35 00 00 FF 
03390     40 E4 05 F1 | 	add	objptr, ##27200
03394     F2 24 02 FB | 	rdlong	local04, objptr
03398     35 00 00 FF 
0339c     40 E4 85 F1 | 	sub	objptr, ##27200
033a0     01 00 00 FF 
033a4     04 24 0E F2 | 	cmp	local04, ##516 wz
033a8     35 00 00 AF 
033ac     48 E4 05 A1 |  if_e	add	objptr, ##27208
033b0     F2 2E 02 AB |  if_e	rdlong	local09, objptr
033b4     35 00 00 AF 
033b8     48 E4 85 A1 |  if_e	sub	objptr, ##27208
033bc     14 2E 0E A2 |  if_e	cmp	local09, #20 wz
033c0     44 00 90 5D |  if_ne	jmp	#LR__0145
033c4     00 12 06 F6 | 	mov	arg01, #0
033c8     84 33 B2 FD | 	call	#__system___getiolock_0540
033cc     FD 12 02 F6 | 	mov	arg01, result1
033d0     3C D9 B1 FD | 	call	#__system___lockmem
033d4     83 01 00 FF 
033d8     85 14 06 F6 | 	mov	arg02, ##@LR__5056
033dc     00 12 06 F6 | 	mov	arg01, #0
033e0     00 16 06 F6 | 	mov	arg03, #0
033e4     1C E6 B1 FD | 	call	#__system___basic_print_string
033e8     00 12 06 F6 | 	mov	arg01, #0
033ec     0A 14 06 F6 | 	mov	arg02, #10
033f0     00 16 06 F6 | 	mov	arg03, #0
033f4     B4 E5 B1 FD | 	call	#__system___basic_print_char
033f8     00 12 06 F6 | 	mov	arg01, #0
033fc     50 33 B2 FD | 	call	#__system___getiolock_0540
03400     FD 00 68 FC | 	wrlong	#0, result1
03404     7C 00 90 FD | 	jmp	#LR__0150
03408                 | LR__0145
03408     00 12 06 F6 | 	mov	arg01, #0
0340c     00 14 06 F6 | 	mov	arg02, #0
03410     00 16 06 F6 | 	mov	arg03, #0
03414     C0 3B B0 FD | 	call	#_compile
03418     FD 1E 02 F6 | 	mov	local01, result1
0341c                 | LR__0146
0341c                 | ' 
0341c                 | ' ' if we are here, this is not a program line to add, so try to execute this
0341c                 | ' 
0341c                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
0341c                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
0341c                 | ' if err=0 then execute_line() else printerror(err)
0341c     00 1E 0E F2 | 	cmp	local01, #0 wz
03420     0C 00 90 5D |  if_ne	jmp	#LR__0147
03424     00 12 06 F6 | 	mov	arg01, #0
03428     94 7B B0 FD | 	call	#_execute_line
0342c     08 00 90 FD | 	jmp	#LR__0148
03430                 | LR__0147
03430     0F 13 02 F6 | 	mov	arg01, local01
03434     30 94 B1 FD | 	call	#_printerror
03438                 | LR__0148
03438                 | ' if rest$<>"" then line$=rest$:  goto 108 
03438     5A 00 00 FF 
0343c     44 E4 05 F1 | 	add	objptr, ##46148
03440     F2 12 02 FB | 	rdlong	arg01, objptr
03444     5A 00 00 FF 
03448     44 E4 85 F1 | 	sub	objptr, ##46148
0344c     83 01 00 FF 
03450     B4 14 06 F6 | 	mov	arg02, ##@LR__5057
03454     E0 D8 B1 FD | 	call	#__system___string_cmp
03458     00 FA 0D F2 | 	cmp	result1, #0 wz
0345c     24 00 90 AD |  if_e	jmp	#LR__0149
03460     5A 00 00 FF 
03464     44 E4 05 F1 | 	add	objptr, ##46148
03468     F2 24 02 FB | 	rdlong	local04, objptr
0346c     22 00 00 FF 
03470     F8 E5 85 F1 | 	sub	objptr, ##17912
03474     F2 24 62 FC | 	wrlong	local04, objptr
03478     37 00 00 FF 
0347c     4C E4 85 F1 | 	sub	objptr, ##28236
03480     04 D6 9F FD | 	jmp	#LR__0020
03484                 | LR__0149
03484                 | LR__0150
03484     83 01 00 FF 
03488     B5 12 06 F6 | 	mov	arg01, ##@LR__5058
0348c                 | ' 
0348c                 | ' write(text)
0348c     98 C5 B1 FD | 	call	#_hg010b_spin2_write
03490                 | ' crlf
03490     60 C8 B1 FD | 	call	#_hg010b_spin2_crlf
03494     83 01 00 FF 
03498     B6 12 06 F6 | 	mov	arg01, ##@LR__5059
0349c                 | ' 
0349c                 | ' write(text)
0349c     88 C5 B1 FD | 	call	#_hg010b_spin2_write
034a0                 | ' crlf
034a0     50 C8 B1 FD | 	call	#_hg010b_spin2_crlf
034a4                 | LR__0151
034a4     A7 F0 03 F6 | 	mov	ptra, fp
034a8     B2 00 A0 FD | 	call	#popregs_
034ac                 | _interpret_ret
034ac     2D 00 64 FD | 	ret
034b0                 | 
034b0                 | ' 
034b0                 | ' 
034b0                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
034b0                 | ' 
034b0                 | ' function isoperator(s as string) as ubyte
034b0                 | _isoperator
034b0     01 4A 05 F6 | 	mov	COUNT_, #1
034b4     A8 00 A0 FD | 	call	#pushregs_
034b8                 | ' 
034b8                 | ' select case s
034b8     09 1F 02 F6 | 	mov	local01, arg01
034bc     83 01 00 FF 
034c0     BC 14 06 F6 | 	mov	arg02, ##@LR__5060
034c4     0F 13 02 F6 | 	mov	arg01, local01
034c8     6C D8 B1 FD | 	call	#__system___string_cmp
034cc     00 FA 0D F2 | 	cmp	result1, #0 wz
034d0     FC 01 90 AD |  if_e	jmp	#LR__0160
034d4     83 01 00 FF 
034d8     BE 14 06 F6 | 	mov	arg02, ##@LR__5061
034dc     0F 13 02 F6 | 	mov	arg01, local01
034e0     54 D8 B1 FD | 	call	#__system___string_cmp
034e4     00 FA 0D F2 | 	cmp	result1, #0 wz
034e8     EC 01 90 AD |  if_e	jmp	#LR__0161
034ec     83 01 00 FF 
034f0     C0 14 06 F6 | 	mov	arg02, ##@LR__5062
034f4     0F 13 02 F6 | 	mov	arg01, local01
034f8     3C D8 B1 FD | 	call	#__system___string_cmp
034fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03500     DC 01 90 AD |  if_e	jmp	#LR__0162
03504     83 01 00 FF 
03508     C3 14 06 F6 | 	mov	arg02, ##@LR__5063
0350c     0F 13 02 F6 | 	mov	arg01, local01
03510     24 D8 B1 FD | 	call	#__system___string_cmp
03514     00 FA 0D F2 | 	cmp	result1, #0 wz
03518     CC 01 90 AD |  if_e	jmp	#LR__0163
0351c     83 01 00 FF 
03520     C7 14 06 F6 | 	mov	arg02, ##@LR__5064
03524     0F 13 02 F6 | 	mov	arg01, local01
03528     0C D8 B1 FD | 	call	#__system___string_cmp
0352c     00 FA 0D F2 | 	cmp	result1, #0 wz
03530     BC 01 90 AD |  if_e	jmp	#LR__0164
03534     83 01 00 FF 
03538     C9 14 06 F6 | 	mov	arg02, ##@LR__5065
0353c     0F 13 02 F6 | 	mov	arg01, local01
03540     F4 D7 B1 FD | 	call	#__system___string_cmp
03544     00 FA 0D F2 | 	cmp	result1, #0 wz
03548     AC 01 90 AD |  if_e	jmp	#LR__0165
0354c     83 01 00 FF 
03550     CB 14 06 F6 | 	mov	arg02, ##@LR__5066
03554     0F 13 02 F6 | 	mov	arg01, local01
03558     DC D7 B1 FD | 	call	#__system___string_cmp
0355c     00 FA 0D F2 | 	cmp	result1, #0 wz
03560     9C 01 90 AD |  if_e	jmp	#LR__0166
03564     83 01 00 FF 
03568     CF 14 06 F6 | 	mov	arg02, ##@LR__5067
0356c     0F 13 02 F6 | 	mov	arg01, local01
03570     C4 D7 B1 FD | 	call	#__system___string_cmp
03574     00 FA 0D F2 | 	cmp	result1, #0 wz
03578     8C 01 90 AD |  if_e	jmp	#LR__0167
0357c     83 01 00 FF 
03580     D3 14 06 F6 | 	mov	arg02, ##@LR__5068
03584     0F 13 02 F6 | 	mov	arg01, local01
03588     AC D7 B1 FD | 	call	#__system___string_cmp
0358c     00 FA 0D F2 | 	cmp	result1, #0 wz
03590     7C 01 90 AD |  if_e	jmp	#LR__0168
03594     83 01 00 FF 
03598     D7 14 06 F6 | 	mov	arg02, ##@LR__5069
0359c     0F 13 02 F6 | 	mov	arg01, local01
035a0     94 D7 B1 FD | 	call	#__system___string_cmp
035a4     00 FA 0D F2 | 	cmp	result1, #0 wz
035a8     6C 01 90 AD |  if_e	jmp	#LR__0169
035ac     83 01 00 FF 
035b0     DB 14 06 F6 | 	mov	arg02, ##@LR__5070
035b4     0F 13 02 F6 | 	mov	arg01, local01
035b8     7C D7 B1 FD | 	call	#__system___string_cmp
035bc     00 FA 0D F2 | 	cmp	result1, #0 wz
035c0     5C 01 90 AD |  if_e	jmp	#LR__0170
035c4     83 01 00 FF 
035c8     DF 14 06 F6 | 	mov	arg02, ##@LR__5071
035cc     0F 13 02 F6 | 	mov	arg01, local01
035d0     64 D7 B1 FD | 	call	#__system___string_cmp
035d4     00 FA 0D F2 | 	cmp	result1, #0 wz
035d8     4C 01 90 AD |  if_e	jmp	#LR__0171
035dc     83 01 00 FF 
035e0     E1 14 06 F6 | 	mov	arg02, ##@LR__5072
035e4     0F 13 02 F6 | 	mov	arg01, local01
035e8     4C D7 B1 FD | 	call	#__system___string_cmp
035ec     00 FA 0D F2 | 	cmp	result1, #0 wz
035f0     3C 01 90 AD |  if_e	jmp	#LR__0172
035f4     83 01 00 FF 
035f8     E5 14 06 F6 | 	mov	arg02, ##@LR__5073
035fc     0F 13 02 F6 | 	mov	arg01, local01
03600     34 D7 B1 FD | 	call	#__system___string_cmp
03604     00 FA 0D F2 | 	cmp	result1, #0 wz
03608     2C 01 90 AD |  if_e	jmp	#LR__0173
0360c     83 01 00 FF 
03610     E7 14 06 F6 | 	mov	arg02, ##@LR__5074
03614     0F 13 02 F6 | 	mov	arg01, local01
03618     1C D7 B1 FD | 	call	#__system___string_cmp
0361c     00 FA 0D F2 | 	cmp	result1, #0 wz
03620     1C 01 90 AD |  if_e	jmp	#LR__0174
03624     83 01 00 FF 
03628     E9 14 06 F6 | 	mov	arg02, ##@LR__5075
0362c     0F 13 02 F6 | 	mov	arg01, local01
03630     04 D7 B1 FD | 	call	#__system___string_cmp
03634     00 FA 0D F2 | 	cmp	result1, #0 wz
03638     0C 01 90 AD |  if_e	jmp	#LR__0175
0363c     83 01 00 FF 
03640     EC 14 06 F6 | 	mov	arg02, ##@LR__5076
03644     0F 13 02 F6 | 	mov	arg01, local01
03648     EC D6 B1 FD | 	call	#__system___string_cmp
0364c     00 FA 0D F2 | 	cmp	result1, #0 wz
03650     FC 00 90 AD |  if_e	jmp	#LR__0176
03654     83 01 00 FF 
03658     EF 14 06 F6 | 	mov	arg02, ##@LR__5077
0365c     0F 13 02 F6 | 	mov	arg01, local01
03660     D4 D6 B1 FD | 	call	#__system___string_cmp
03664     00 FA 0D F2 | 	cmp	result1, #0 wz
03668     EC 00 90 AD |  if_e	jmp	#LR__0177
0366c     83 01 00 FF 
03670     F1 14 06 F6 | 	mov	arg02, ##@LR__5078
03674     0F 13 02 F6 | 	mov	arg01, local01
03678     BC D6 B1 FD | 	call	#__system___string_cmp
0367c     00 FA 0D F2 | 	cmp	result1, #0 wz
03680     DC 00 90 AD |  if_e	jmp	#LR__0178
03684     83 01 00 FF 
03688     F3 14 06 F6 | 	mov	arg02, ##@LR__5079
0368c     0F 13 02 F6 | 	mov	arg01, local01
03690     A4 D6 B1 FD | 	call	#__system___string_cmp
03694     00 FA 0D F2 | 	cmp	result1, #0 wz
03698     CC 00 90 AD |  if_e	jmp	#LR__0179
0369c     83 01 00 FF 
036a0     F6 14 06 F6 | 	mov	arg02, ##@LR__5080
036a4     0F 13 02 F6 | 	mov	arg01, local01
036a8     8C D6 B1 FD | 	call	#__system___string_cmp
036ac     00 FA 0D F2 | 	cmp	result1, #0 wz
036b0     BC 00 90 AD |  if_e	jmp	#LR__0180
036b4     83 01 00 FF 
036b8     F9 14 06 F6 | 	mov	arg02, ##@LR__5081
036bc     0F 13 02 F6 | 	mov	arg01, local01
036c0     74 D6 B1 FD | 	call	#__system___string_cmp
036c4     00 FA 0D F2 | 	cmp	result1, #0 wz
036c8     AC 00 90 AD |  if_e	jmp	#LR__0181
036cc     B0 00 90 FD | 	jmp	#LR__0182
036d0                 | LR__0160
036d0     01 FA 05 F6 | 	mov	result1, #1
036d4     AC 00 90 FD | 	jmp	#LR__0183
036d8                 | LR__0161
036d8     02 FA 05 F6 | 	mov	result1, #2
036dc     A4 00 90 FD | 	jmp	#LR__0183
036e0                 | LR__0162
036e0     03 FA 05 F6 | 	mov	result1, #3
036e4     9C 00 90 FD | 	jmp	#LR__0183
036e8                 | LR__0163
036e8     04 FA 05 F6 | 	mov	result1, #4
036ec     94 00 90 FD | 	jmp	#LR__0183
036f0                 | LR__0164
036f0     05 FA 05 F6 | 	mov	result1, #5
036f4     8C 00 90 FD | 	jmp	#LR__0183
036f8                 | LR__0165
036f8     06 FA 05 F6 | 	mov	result1, #6
036fc     84 00 90 FD | 	jmp	#LR__0183
03700                 | LR__0166
03700     07 FA 05 F6 | 	mov	result1, #7
03704     7C 00 90 FD | 	jmp	#LR__0183
03708                 | LR__0167
03708     08 FA 05 F6 | 	mov	result1, #8
0370c     74 00 90 FD | 	jmp	#LR__0183
03710                 | LR__0168
03710     09 FA 05 F6 | 	mov	result1, #9
03714     6C 00 90 FD | 	jmp	#LR__0183
03718                 | LR__0169
03718     0A FA 05 F6 | 	mov	result1, #10
0371c     64 00 90 FD | 	jmp	#LR__0183
03720                 | LR__0170
03720     0B FA 05 F6 | 	mov	result1, #11
03724     5C 00 90 FD | 	jmp	#LR__0183
03728                 | LR__0171
03728     0C FA 05 F6 | 	mov	result1, #12
0372c     54 00 90 FD | 	jmp	#LR__0183
03730                 | LR__0172
03730     0D FA 05 F6 | 	mov	result1, #13
03734     4C 00 90 FD | 	jmp	#LR__0183
03738                 | LR__0173
03738     0E FA 05 F6 | 	mov	result1, #14
0373c     44 00 90 FD | 	jmp	#LR__0183
03740                 | LR__0174
03740     1B FA 05 F6 | 	mov	result1, #27
03744     3C 00 90 FD | 	jmp	#LR__0183
03748                 | LR__0175
03748     27 FA 05 F6 | 	mov	result1, #39
0374c     34 00 90 FD | 	jmp	#LR__0183
03750                 | LR__0176
03750     26 FA 05 F6 | 	mov	result1, #38
03754     2C 00 90 FD | 	jmp	#LR__0183
03758                 | LR__0177
03758     10 FA 05 F6 | 	mov	result1, #16
0375c     24 00 90 FD | 	jmp	#LR__0183
03760                 | LR__0178
03760     0F FA 05 F6 | 	mov	result1, #15
03764     1C 00 90 FD | 	jmp	#LR__0183
03768                 | LR__0179
03768     2A FA 05 F6 | 	mov	result1, #42
0376c     14 00 90 FD | 	jmp	#LR__0183
03770                 | LR__0180
03770     28 FA 05 F6 | 	mov	result1, #40
03774     0C 00 90 FD | 	jmp	#LR__0183
03778                 | LR__0181
03778     29 FA 05 F6 | 	mov	result1, #41
0377c     04 00 90 FD | 	jmp	#LR__0183
03780                 | LR__0182
03780     00 FA 05 F6 | 	mov	result1, #0
03784                 | LR__0183
03784     A7 F0 03 F6 | 	mov	ptra, fp
03788     B2 00 A0 FD | 	call	#popregs_
0378c                 | _isoperator_ret
0378c     2D 00 64 FD | 	ret
03790                 | 
03790                 | ' 
03790                 | ' 
03790                 | ' function ischannel(s as string) as ulong
03790                 | _ischannel
03790     02 4A 05 F6 | 	mov	COUNT_, #2
03794     A8 00 A0 FD | 	call	#pushregs_
03798                 | ' if left$(s,1)<>"#" then return 0
03798     09 1F 02 F6 | 	mov	local01, arg01
0379c     01 14 06 F6 | 	mov	arg02, #1
037a0     E8 F5 B1 FD | 	call	#__system__Left_S
037a4     FD 12 02 F6 | 	mov	arg01, result1
037a8     83 01 00 FF 
037ac     FC 14 06 F6 | 	mov	arg02, ##@LR__5082
037b0     84 D5 B1 FD | 	call	#__system___string_cmp
037b4     00 FA 0D F2 | 	cmp	result1, #0 wz
037b8     00 FA 05 56 |  if_ne	mov	result1, #0
037bc     AC 00 90 5D |  if_ne	jmp	#LR__0194
037c0                 | ' if len(s)<>2 then return 0
037c0     0F 13 02 F6 | 	mov	arg01, local01
037c4     09 21 02 F6 | 	mov	local02, arg01
037c8     97 06 48 FB | 	callpa	#(@LR__0191-@LR__0190)>>2,fcache_load_ptr_
037cc                 | LR__0190
037cc     10 FB C9 FA | 	rdbyte	result1, local02 wz
037d0     01 20 06 51 |  if_ne	add	local02, #1
037d4     F4 FF 9F 5D |  if_ne	jmp	#LR__0190
037d8                 | LR__0191
037d8     09 21 82 F1 | 	sub	local02, arg01
037dc     10 FB 01 F6 | 	mov	result1, local02
037e0     02 FA 0D F2 | 	cmp	result1, #2 wz
037e4     00 FA 05 56 |  if_ne	mov	result1, #0
037e8     80 00 90 5D |  if_ne	jmp	#LR__0194
037ec                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
037ec     0F 13 02 F6 | 	mov	arg01, local01
037f0     01 14 06 F6 | 	mov	arg02, #1
037f4     1C F6 B1 FD | 	call	#__system__Right_S
037f8     FD 12 02 F6 | 	mov	arg01, result1
037fc     83 01 00 FF 
03800     FE 14 06 F6 | 	mov	arg02, ##@LR__5083
03804     30 D5 B1 FD | 	call	#__system___string_cmp
03808     00 FA 55 F2 | 	cmps	result1, #0 wc
0380c     24 00 90 CD |  if_b	jmp	#LR__0192
03810     0F 13 02 F6 | 	mov	arg01, local01
03814     01 14 06 F6 | 	mov	arg02, #1
03818     F8 F5 B1 FD | 	call	#__system__Right_S
0381c     FD 12 02 F6 | 	mov	arg01, result1
03820     83 01 00 FF 
03824     00 15 06 F6 | 	mov	arg02, ##@LR__5084
03828     0C D5 B1 FD | 	call	#__system___string_cmp
0382c     01 FA 55 F2 | 	cmps	result1, #1 wc
03830     08 00 90 CD |  if_b	jmp	#LR__0193
03834                 | LR__0192
03834     00 FA 05 F6 | 	mov	result1, #0
03838     30 00 90 FD | 	jmp	#LR__0194
0383c                 | LR__0193
0383c                 | ' return token_channel+val(right$(s,1))
0383c     0F 13 02 F6 | 	mov	arg01, local01
03840     01 14 06 F6 | 	mov	arg02, #1
03844     CC F5 B1 FD | 	call	#__system__Right_S
03848     FD 12 02 F6 | 	mov	arg01, result1
0384c     5C 08 B2 FD | 	call	#__system____builtin_atof
03850     FD 14 02 F6 | 	mov	arg02, result1
03854     00 18 21 FF 
03858     00 12 06 F6 | 	mov	arg01, ##1110441984
0385c     94 FC B1 FD | 	call	#__system___float_add
03860     FD 12 02 F6 | 	mov	arg01, result1
03864     00 14 06 F6 | 	mov	arg02, #0
03868     20 05 B2 FD | 	call	#__system___float_tointeger
0386c                 | LR__0194
0386c     A7 F0 03 F6 | 	mov	ptra, fp
03870     B2 00 A0 FD | 	call	#popregs_
03874                 | _ischannel_ret
03874     2D 00 64 FD | 	ret
03878                 | 
03878                 | ' 
03878                 | ' function isnotename(s as string) as ulong
03878                 | _isnotename
03878     07 4A 05 F6 | 	mov	COUNT_, #7
0387c     A8 00 A0 FD | 	call	#pushregs_
03880                 | ' if left$(s,1)<>"#" then return 0
03880     09 1F 02 F6 | 	mov	local01, arg01
03884     01 14 06 F6 | 	mov	arg02, #1
03888     00 F5 B1 FD | 	call	#__system__Left_S
0388c     FD 12 02 F6 | 	mov	arg01, result1
03890     83 01 00 FF 
03894     02 15 06 F6 | 	mov	arg02, ##@LR__5085
03898     9C D4 B1 FD | 	call	#__system___string_cmp
0389c     00 FA 0D F2 | 	cmp	result1, #0 wz
038a0     00 FA 05 56 |  if_ne	mov	result1, #0
038a4     30 03 90 5D |  if_ne	jmp	#LR__0223
038a8                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
038a8     0F 13 02 F6 | 	mov	arg01, local01
038ac     03 14 06 F6 | 	mov	arg02, #3
038b0     01 16 06 F6 | 	mov	arg03, #1
038b4     EC F5 B1 FD | 	call	#__system__Mid_S
038b8     FD 12 02 F6 | 	mov	arg01, result1
038bc     83 01 00 FF 
038c0     04 15 06 F6 | 	mov	arg02, ##@LR__5086
038c4     70 D4 B1 FD | 	call	#__system___string_cmp
038c8     00 FA 0D F2 | 	cmp	result1, #0 wz
038cc     18 00 90 5D |  if_ne	jmp	#LR__0200
038d0     0F 13 02 F6 | 	mov	arg01, local01
038d4     02 14 06 F6 | 	mov	arg02, #2
038d8     02 16 06 F6 | 	mov	arg03, #2
038dc     C4 F5 B1 FD | 	call	#__system__Mid_S
038e0     FD 20 02 F6 | 	mov	local02, result1
038e4     14 00 90 FD | 	jmp	#LR__0201
038e8                 | LR__0200
038e8     0F 13 02 F6 | 	mov	arg01, local01
038ec     02 14 06 F6 | 	mov	arg02, #2
038f0     01 16 06 F6 | 	mov	arg03, #1
038f4     AC F5 B1 FD | 	call	#__system__Mid_S
038f8     FD 20 02 F6 | 	mov	local02, result1
038fc                 | LR__0201
038fc                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
038fc     0F 13 02 F6 | 	mov	arg01, local01
03900     09 23 02 F6 | 	mov	local03, arg01
03904     97 06 48 FB | 	callpa	#(@LR__0203-@LR__0202)>>2,fcache_load_ptr_
03908                 | LR__0202
03908     11 FB C9 FA | 	rdbyte	result1, local03 wz
0390c     01 22 06 51 |  if_ne	add	local03, #1
03910     F4 FF 9F 5D |  if_ne	jmp	#LR__0202
03914                 | LR__0203
03914     09 23 82 F1 | 	sub	local03, arg01
03918     11 15 02 F6 | 	mov	arg02, local03
0391c     01 14 86 F1 | 	sub	arg02, #1
03920     0F 13 02 F6 | 	mov	arg01, local01
03924     01 16 06 F6 | 	mov	arg03, #1
03928     78 F5 B1 FD | 	call	#__system__Mid_S
0392c     FD 12 02 F6 | 	mov	arg01, result1
03930     83 01 00 FF 
03934     06 15 06 F6 | 	mov	arg02, ##@LR__5087
03938     FC D3 B1 FD | 	call	#__system___string_cmp
0393c     00 FA 0D F2 | 	cmp	result1, #0 wz
03940     28 00 90 AD |  if_e	jmp	#LR__0204
03944     0F 13 02 F6 | 	mov	arg01, local01
03948     01 14 06 F6 | 	mov	arg02, #1
0394c     C4 F4 B1 FD | 	call	#__system__Right_S
03950     FD 12 02 F6 | 	mov	arg01, result1
03954     54 07 B2 FD | 	call	#__system____builtin_atof
03958     FD 12 02 F6 | 	mov	arg01, result1
0395c     00 14 06 F6 | 	mov	arg02, #0
03960     28 04 B2 FD | 	call	#__system___float_tointeger
03964     FD 24 02 F6 | 	mov	local04, result1
03968     34 00 90 FD | 	jmp	#LR__0205
0396c                 | LR__0204
0396c     0F 13 02 F6 | 	mov	arg01, local01
03970     01 14 06 F6 | 	mov	arg02, #1
03974     9C F4 B1 FD | 	call	#__system__Right_S
03978     FD 12 02 F6 | 	mov	arg01, result1
0397c     2C 07 B2 FD | 	call	#__system____builtin_atof
03980     FD 14 02 F6 | 	mov	arg02, result1
03984     00 C0 5F FF 
03988     00 12 06 F6 | 	mov	arg01, ##-1082130432
0398c     34 FF B1 FD | 	call	#__system___float_mul
03990     FD 12 02 F6 | 	mov	arg01, result1
03994     00 14 06 F6 | 	mov	arg02, #0
03998     F0 03 B2 FD | 	call	#__system___float_tointeger
0399c     FD 24 02 F6 | 	mov	local04, result1
039a0                 | LR__0205
039a0                 | ' 
039a0                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
039a0     00 24 0E F2 | 	cmp	local04, #0 wz
039a4     24 00 90 5D |  if_ne	jmp	#LR__0206
039a8     0F 13 02 F6 | 	mov	arg01, local01
039ac     01 14 06 F6 | 	mov	arg02, #1
039b0     60 F4 B1 FD | 	call	#__system__Right_S
039b4     FD 12 02 F6 | 	mov	arg01, result1
039b8     83 01 00 FF 
039bc     08 15 06 F6 | 	mov	arg02, ##@LR__5088
039c0     74 D3 B1 FD | 	call	#__system___string_cmp
039c4     00 FA 0D F2 | 	cmp	result1, #0 wz
039c8     04 24 06 56 |  if_ne	mov	local04, #4
039cc                 | LR__0206
039cc                 | ' 
039cc                 | ' select case s1
039cc     10 27 02 F6 | 	mov	local05, local02
039d0     83 01 00 FF 
039d4     0A 15 06 F6 | 	mov	arg02, ##@LR__5089
039d8     13 13 02 F6 | 	mov	arg01, local05
039dc     58 D3 B1 FD | 	call	#__system___string_cmp
039e0     00 FA 0D F2 | 	cmp	result1, #0 wz
039e4     24 01 90 AD |  if_e	jmp	#LR__0207
039e8     83 01 00 FF 
039ec     0C 15 06 F6 | 	mov	arg02, ##@LR__5090
039f0     13 13 02 F6 | 	mov	arg01, local05
039f4     40 D3 B1 FD | 	call	#__system___string_cmp
039f8     00 FA 0D F2 | 	cmp	result1, #0 wz
039fc     18 01 90 AD |  if_e	jmp	#LR__0208
03a00     83 01 00 FF 
03a04     0F 15 06 F6 | 	mov	arg02, ##@LR__5091
03a08     13 13 02 F6 | 	mov	arg01, local05
03a0c     28 D3 B1 FD | 	call	#__system___string_cmp
03a10     00 FA 0D F2 | 	cmp	result1, #0 wz
03a14     0C 01 90 AD |  if_e	jmp	#LR__0209
03a18     83 01 00 FF 
03a1c     11 15 06 F6 | 	mov	arg02, ##@LR__5092
03a20     13 13 02 F6 | 	mov	arg01, local05
03a24     10 D3 B1 FD | 	call	#__system___string_cmp
03a28     00 FA 0D F2 | 	cmp	result1, #0 wz
03a2c     00 01 90 AD |  if_e	jmp	#LR__0210
03a30     83 01 00 FF 
03a34     14 15 06 F6 | 	mov	arg02, ##@LR__5093
03a38     13 13 02 F6 | 	mov	arg01, local05
03a3c     F8 D2 B1 FD | 	call	#__system___string_cmp
03a40     00 FA 0D F2 | 	cmp	result1, #0 wz
03a44     F4 00 90 AD |  if_e	jmp	#LR__0211
03a48     83 01 00 FF 
03a4c     16 15 06 F6 | 	mov	arg02, ##@LR__5094
03a50     13 13 02 F6 | 	mov	arg01, local05
03a54     E0 D2 B1 FD | 	call	#__system___string_cmp
03a58     00 FA 0D F2 | 	cmp	result1, #0 wz
03a5c     E8 00 90 AD |  if_e	jmp	#LR__0212
03a60     83 01 00 FF 
03a64     18 15 06 F6 | 	mov	arg02, ##@LR__5095
03a68     13 13 02 F6 | 	mov	arg01, local05
03a6c     C8 D2 B1 FD | 	call	#__system___string_cmp
03a70     00 FA 0D F2 | 	cmp	result1, #0 wz
03a74     DC 00 90 AD |  if_e	jmp	#LR__0213
03a78     83 01 00 FF 
03a7c     1B 15 06 F6 | 	mov	arg02, ##@LR__5096
03a80     13 13 02 F6 | 	mov	arg01, local05
03a84     B0 D2 B1 FD | 	call	#__system___string_cmp
03a88     00 FA 0D F2 | 	cmp	result1, #0 wz
03a8c     D0 00 90 AD |  if_e	jmp	#LR__0214
03a90     83 01 00 FF 
03a94     1D 15 06 F6 | 	mov	arg02, ##@LR__5097
03a98     13 13 02 F6 | 	mov	arg01, local05
03a9c     98 D2 B1 FD | 	call	#__system___string_cmp
03aa0     00 FA 0D F2 | 	cmp	result1, #0 wz
03aa4     C4 00 90 AD |  if_e	jmp	#LR__0215
03aa8     83 01 00 FF 
03aac     20 15 06 F6 | 	mov	arg02, ##@LR__5098
03ab0     13 13 02 F6 | 	mov	arg01, local05
03ab4     80 D2 B1 FD | 	call	#__system___string_cmp
03ab8     00 FA 0D F2 | 	cmp	result1, #0 wz
03abc     B8 00 90 AD |  if_e	jmp	#LR__0216
03ac0     83 01 00 FF 
03ac4     22 15 06 F6 | 	mov	arg02, ##@LR__5099
03ac8     13 13 02 F6 | 	mov	arg01, local05
03acc     68 D2 B1 FD | 	call	#__system___string_cmp
03ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ad4     AC 00 90 AD |  if_e	jmp	#LR__0217
03ad8     83 01 00 FF 
03adc     25 15 06 F6 | 	mov	arg02, ##@LR__5100
03ae0     13 13 02 F6 | 	mov	arg01, local05
03ae4     50 D2 B1 FD | 	call	#__system___string_cmp
03ae8     00 FA 0D F2 | 	cmp	result1, #0 wz
03aec     A0 00 90 AD |  if_e	jmp	#LR__0218
03af0     83 01 00 FF 
03af4     27 15 06 F6 | 	mov	arg02, ##@LR__5101
03af8     13 13 02 F6 | 	mov	arg01, local05
03afc     38 D2 B1 FD | 	call	#__system___string_cmp
03b00     00 FA 0D F2 | 	cmp	result1, #0 wz
03b04     94 00 90 AD |  if_e	jmp	#LR__0219
03b08     9C 00 90 FD | 	jmp	#LR__0220
03b0c                 | LR__0207
03b0c     01 00 00 FF 
03b10     00 29 06 F6 | 	mov	local06, ##768
03b14     98 00 90 FD | 	jmp	#LR__0221
03b18                 | LR__0208
03b18     01 00 00 FF 
03b1c     01 29 06 F6 | 	mov	local06, ##769
03b20     8C 00 90 FD | 	jmp	#LR__0221
03b24                 | LR__0209
03b24     01 00 00 FF 
03b28     02 29 06 F6 | 	mov	local06, ##770
03b2c     80 00 90 FD | 	jmp	#LR__0221
03b30                 | LR__0210
03b30     01 00 00 FF 
03b34     03 29 06 F6 | 	mov	local06, ##771
03b38     74 00 90 FD | 	jmp	#LR__0221
03b3c                 | LR__0211
03b3c     01 00 00 FF 
03b40     04 29 06 F6 | 	mov	local06, ##772
03b44     68 00 90 FD | 	jmp	#LR__0221
03b48                 | LR__0212
03b48     01 00 00 FF 
03b4c     05 29 06 F6 | 	mov	local06, ##773
03b50     5C 00 90 FD | 	jmp	#LR__0221
03b54                 | LR__0213
03b54     01 00 00 FF 
03b58     06 29 06 F6 | 	mov	local06, ##774
03b5c     50 00 90 FD | 	jmp	#LR__0221
03b60                 | LR__0214
03b60     01 00 00 FF 
03b64     07 29 06 F6 | 	mov	local06, ##775
03b68     44 00 90 FD | 	jmp	#LR__0221
03b6c                 | LR__0215
03b6c     01 00 00 FF 
03b70     08 29 06 F6 | 	mov	local06, ##776
03b74     38 00 90 FD | 	jmp	#LR__0221
03b78                 | LR__0216
03b78     01 00 00 FF 
03b7c     09 29 06 F6 | 	mov	local06, ##777
03b80     2C 00 90 FD | 	jmp	#LR__0221
03b84                 | LR__0217
03b84     01 00 00 FF 
03b88     0A 29 06 F6 | 	mov	local06, ##778
03b8c     20 00 90 FD | 	jmp	#LR__0221
03b90                 | LR__0218
03b90     01 00 00 FF 
03b94     0B 29 06 F6 | 	mov	local06, ##779
03b98     14 00 90 FD | 	jmp	#LR__0221
03b9c                 | LR__0219
03b9c     01 00 00 FF 
03ba0     0B 29 06 F6 | 	mov	local06, ##779
03ba4     08 00 90 FD | 	jmp	#LR__0221
03ba8                 | LR__0220
03ba8     00 FA 05 F6 | 	mov	result1, #0
03bac     28 00 90 FD | 	jmp	#LR__0223
03bb0                 | LR__0221
03bb0                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
03bb0     FF FF 7F FF 
03bb4     FF 25 56 F2 | 	cmps	local04, ##-1 wc
03bb8     18 00 90 CD |  if_b	jmp	#LR__0222
03bbc     0A 24 56 F2 | 	cmps	local04, #10 wc
03bc0     12 2B 02 C6 |  if_b	mov	local07, local04
03bc4     01 2A 66 C0 |  if_b	shl	local07, #1
03bc8     12 2B 02 C1 |  if_b	add	local07, local04
03bcc     02 2A 66 C0 |  if_b	shl	local07, #2
03bd0     15 29 02 C1 |  if_b	add	local06, local07
03bd4                 | LR__0222
03bd4                 | ' return token
03bd4     14 FB 01 F6 | 	mov	result1, local06
03bd8                 | LR__0223
03bd8     A7 F0 03 F6 | 	mov	ptra, fp
03bdc     B2 00 A0 FD | 	call	#popregs_
03be0                 | _isnotename_ret
03be0     2D 00 64 FD | 	ret
03be4                 | 
03be4                 | ' 
03be4                 | ' 
03be4                 | ' function isseparator(s as string) as ubyte
03be4                 | _isseparator
03be4     01 4A 05 F6 | 	mov	COUNT_, #1
03be8     A8 00 A0 FD | 	call	#pushregs_
03bec                 | ' 
03bec                 | ' select case s
03bec     09 1F 02 F6 | 	mov	local01, arg01
03bf0     83 01 00 FF 
03bf4     29 15 06 F6 | 	mov	arg02, ##@LR__5102
03bf8     0F 13 02 F6 | 	mov	arg01, local01
03bfc     38 D1 B1 FD | 	call	#__system___string_cmp
03c00     00 FA 0D F2 | 	cmp	result1, #0 wz
03c04     54 01 90 AD |  if_e	jmp	#LR__0230
03c08     83 01 00 FF 
03c0c     2B 15 06 F6 | 	mov	arg02, ##@LR__5103
03c10     0F 13 02 F6 | 	mov	arg01, local01
03c14     20 D1 B1 FD | 	call	#__system___string_cmp
03c18     00 FA 0D F2 | 	cmp	result1, #0 wz
03c1c     44 01 90 AD |  if_e	jmp	#LR__0231
03c20     83 01 00 FF 
03c24     2D 15 06 F6 | 	mov	arg02, ##@LR__5104
03c28     0F 13 02 F6 | 	mov	arg01, local01
03c2c     08 D1 B1 FD | 	call	#__system___string_cmp
03c30     00 FA 0D F2 | 	cmp	result1, #0 wz
03c34     34 01 90 AD |  if_e	jmp	#LR__0232
03c38     83 01 00 FF 
03c3c     2F 15 06 F6 | 	mov	arg02, ##@LR__5105
03c40     0F 13 02 F6 | 	mov	arg01, local01
03c44     F0 D0 B1 FD | 	call	#__system___string_cmp
03c48     00 FA 0D F2 | 	cmp	result1, #0 wz
03c4c     24 01 90 AD |  if_e	jmp	#LR__0233
03c50     83 01 00 FF 
03c54     31 15 06 F6 | 	mov	arg02, ##@LR__5106
03c58     0F 13 02 F6 | 	mov	arg01, local01
03c5c     D8 D0 B1 FD | 	call	#__system___string_cmp
03c60     00 FA 0D F2 | 	cmp	result1, #0 wz
03c64     14 01 90 AD |  if_e	jmp	#LR__0234
03c68     83 01 00 FF 
03c6c     33 15 06 F6 | 	mov	arg02, ##@LR__5107
03c70     0F 13 02 F6 | 	mov	arg01, local01
03c74     C0 D0 B1 FD | 	call	#__system___string_cmp
03c78     00 FA 0D F2 | 	cmp	result1, #0 wz
03c7c     04 01 90 AD |  if_e	jmp	#LR__0235
03c80     83 01 00 FF 
03c84     35 15 06 F6 | 	mov	arg02, ##@LR__5108
03c88     0F 13 02 F6 | 	mov	arg01, local01
03c8c     A8 D0 B1 FD | 	call	#__system___string_cmp
03c90     00 FA 0D F2 | 	cmp	result1, #0 wz
03c94     F4 00 90 AD |  if_e	jmp	#LR__0236
03c98     83 01 00 FF 
03c9c     37 15 06 F6 | 	mov	arg02, ##@LR__5109
03ca0     0F 13 02 F6 | 	mov	arg01, local01
03ca4     90 D0 B1 FD | 	call	#__system___string_cmp
03ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
03cac     E4 00 90 AD |  if_e	jmp	#LR__0237
03cb0     83 01 00 FF 
03cb4     39 15 06 F6 | 	mov	arg02, ##@LR__5110
03cb8     0F 13 02 F6 | 	mov	arg01, local01
03cbc     78 D0 B1 FD | 	call	#__system___string_cmp
03cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc4     D4 00 90 AD |  if_e	jmp	#LR__0238
03cc8     83 01 00 FF 
03ccc     3B 15 06 F6 | 	mov	arg02, ##@LR__5111
03cd0     0F 13 02 F6 | 	mov	arg01, local01
03cd4     60 D0 B1 FD | 	call	#__system___string_cmp
03cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
03cdc     C4 00 90 AD |  if_e	jmp	#LR__0239
03ce0     83 01 00 FF 
03ce4     3D 15 06 F6 | 	mov	arg02, ##@LR__5112
03ce8     0F 13 02 F6 | 	mov	arg01, local01
03cec     48 D0 B1 FD | 	call	#__system___string_cmp
03cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
03cf4     B4 00 90 AD |  if_e	jmp	#LR__0240
03cf8     83 01 00 FF 
03cfc     3F 15 06 F6 | 	mov	arg02, ##@LR__5113
03d00     0F 13 02 F6 | 	mov	arg01, local01
03d04     30 D0 B1 FD | 	call	#__system___string_cmp
03d08     00 FA 0D F2 | 	cmp	result1, #0 wz
03d0c     A4 00 90 AD |  if_e	jmp	#LR__0241
03d10     83 01 00 FF 
03d14     41 15 06 F6 | 	mov	arg02, ##@LR__5114
03d18     0F 13 02 F6 | 	mov	arg01, local01
03d1c     18 D0 B1 FD | 	call	#__system___string_cmp
03d20     00 FA 0D F2 | 	cmp	result1, #0 wz
03d24     94 00 90 AD |  if_e	jmp	#LR__0242
03d28     83 01 00 FF 
03d2c     43 15 06 F6 | 	mov	arg02, ##@LR__5115
03d30     0F 13 02 F6 | 	mov	arg01, local01
03d34     00 D0 B1 FD | 	call	#__system___string_cmp
03d38     00 FA 0D F2 | 	cmp	result1, #0 wz
03d3c     84 00 90 AD |  if_e	jmp	#LR__0243
03d40     83 01 00 FF 
03d44     45 15 06 F6 | 	mov	arg02, ##@LR__5116
03d48     0F 13 02 F6 | 	mov	arg01, local01
03d4c     E8 CF B1 FD | 	call	#__system___string_cmp
03d50     00 FA 0D F2 | 	cmp	result1, #0 wz
03d54     74 00 90 AD |  if_e	jmp	#LR__0244
03d58     78 00 90 FD | 	jmp	#LR__0245
03d5c                 | LR__0230
03d5c     01 FA 05 F6 | 	mov	result1, #1
03d60     74 00 90 FD | 	jmp	#LR__0246
03d64                 | LR__0231
03d64     02 FA 05 F6 | 	mov	result1, #2
03d68     6C 00 90 FD | 	jmp	#LR__0246
03d6c                 | LR__0232
03d6c     1B FA 05 F6 | 	mov	result1, #27
03d70     64 00 90 FD | 	jmp	#LR__0246
03d74                 | LR__0233
03d74     11 FA 05 F6 | 	mov	result1, #17
03d78     5C 00 90 FD | 	jmp	#LR__0246
03d7c                 | LR__0234
03d7c     05 FA 05 F6 | 	mov	result1, #5
03d80     54 00 90 FD | 	jmp	#LR__0246
03d84                 | LR__0235
03d84     06 FA 05 F6 | 	mov	result1, #6
03d88     4C 00 90 FD | 	jmp	#LR__0246
03d8c                 | LR__0236
03d8c     12 FA 05 F6 | 	mov	result1, #18
03d90     44 00 90 FD | 	jmp	#LR__0246
03d94                 | LR__0237
03d94     13 FA 05 F6 | 	mov	result1, #19
03d98     3C 00 90 FD | 	jmp	#LR__0246
03d9c                 | LR__0238
03d9c     0C FA 05 F6 | 	mov	result1, #12
03da0     34 00 90 FD | 	jmp	#LR__0246
03da4                 | LR__0239
03da4     14 FA 05 F6 | 	mov	result1, #20
03da8     2C 00 90 FD | 	jmp	#LR__0246
03dac                 | LR__0240
03dac     15 FA 05 F6 | 	mov	result1, #21
03db0     24 00 90 FD | 	jmp	#LR__0246
03db4                 | LR__0241
03db4     16 FA 05 F6 | 	mov	result1, #22
03db8     1C 00 90 FD | 	jmp	#LR__0246
03dbc                 | LR__0242
03dbc     FF FB 05 F6 | 	mov	result1, #511
03dc0     14 00 90 FD | 	jmp	#LR__0246
03dc4                 | LR__0243
03dc4     0F FA 05 F6 | 	mov	result1, #15
03dc8     0C 00 90 FD | 	jmp	#LR__0246
03dcc                 | LR__0244
03dcc     10 FA 05 F6 | 	mov	result1, #16
03dd0     04 00 90 FD | 	jmp	#LR__0246
03dd4                 | LR__0245
03dd4     00 FA 05 F6 | 	mov	result1, #0
03dd8                 | LR__0246
03dd8     A7 F0 03 F6 | 	mov	ptra, fp
03ddc     B2 00 A0 FD | 	call	#popregs_
03de0                 | _isseparator_ret
03de0     2D 00 64 FD | 	ret
03de4                 | 
03de4                 | ' 
03de4                 | ' 
03de4                 | ' function iscommand(s as string) as ubyte
03de4                 | _iscommand
03de4     01 4A 05 F6 | 	mov	COUNT_, #1
03de8     A8 00 A0 FD | 	call	#pushregs_
03dec                 | ' 
03dec                 | ' select case s
03dec     09 1F 02 F6 | 	mov	local01, arg01
03df0     83 01 00 FF 
03df4     49 15 06 F6 | 	mov	arg02, ##@LR__5118
03df8     0F 13 02 F6 | 	mov	arg01, local01
03dfc     38 CF B1 FD | 	call	#__system___string_cmp
03e00     00 FA 0D F2 | 	cmp	result1, #0 wz
03e04     44 0B 90 AD |  if_e	jmp	#LR__0250
03e08     83 01 00 FF 
03e0c     4E 15 06 F6 | 	mov	arg02, ##@LR__5119
03e10     0F 13 02 F6 | 	mov	arg01, local01
03e14     20 CF B1 FD | 	call	#__system___string_cmp
03e18     00 FA 0D F2 | 	cmp	result1, #0 wz
03e1c     34 0B 90 AD |  if_e	jmp	#LR__0251
03e20     83 01 00 FF 
03e24     51 15 06 F6 | 	mov	arg02, ##@LR__5120
03e28     0F 13 02 F6 | 	mov	arg01, local01
03e2c     08 CF B1 FD | 	call	#__system___string_cmp
03e30     00 FA 0D F2 | 	cmp	result1, #0 wz
03e34     24 0B 90 AD |  if_e	jmp	#LR__0252
03e38     83 01 00 FF 
03e3c     55 15 06 F6 | 	mov	arg02, ##@LR__5121
03e40     0F 13 02 F6 | 	mov	arg01, local01
03e44     F0 CE B1 FD | 	call	#__system___string_cmp
03e48     00 FA 0D F2 | 	cmp	result1, #0 wz
03e4c     14 0B 90 AD |  if_e	jmp	#LR__0253
03e50     83 01 00 FF 
03e54     5A 15 06 F6 | 	mov	arg02, ##@LR__5122
03e58     0F 13 02 F6 | 	mov	arg01, local01
03e5c     D8 CE B1 FD | 	call	#__system___string_cmp
03e60     00 FA 0D F2 | 	cmp	result1, #0 wz
03e64     04 0B 90 AD |  if_e	jmp	#LR__0254
03e68     83 01 00 FF 
03e6c     5E 15 06 F6 | 	mov	arg02, ##@LR__5123
03e70     0F 13 02 F6 | 	mov	arg01, local01
03e74     C0 CE B1 FD | 	call	#__system___string_cmp
03e78     00 FA 0D F2 | 	cmp	result1, #0 wz
03e7c     F4 0A 90 AD |  if_e	jmp	#LR__0255
03e80     83 01 00 FF 
03e84     69 15 06 F6 | 	mov	arg02, ##@LR__5124
03e88     0F 13 02 F6 | 	mov	arg01, local01
03e8c     A8 CE B1 FD | 	call	#__system___string_cmp
03e90     00 FA 0D F2 | 	cmp	result1, #0 wz
03e94     E4 0A 90 AD |  if_e	jmp	#LR__0256
03e98     83 01 00 FF 
03e9c     6D 15 06 F6 | 	mov	arg02, ##@LR__5125
03ea0     0F 13 02 F6 | 	mov	arg01, local01
03ea4     90 CE B1 FD | 	call	#__system___string_cmp
03ea8     00 FA 0D F2 | 	cmp	result1, #0 wz
03eac     D4 0A 90 AD |  if_e	jmp	#LR__0257
03eb0     83 01 00 FF 
03eb4     77 15 06 F6 | 	mov	arg02, ##@LR__5126
03eb8     0F 13 02 F6 | 	mov	arg01, local01
03ebc     78 CE B1 FD | 	call	#__system___string_cmp
03ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ec4     C4 0A 90 AD |  if_e	jmp	#LR__0258
03ec8     83 01 00 FF 
03ecc     7B 15 06 F6 | 	mov	arg02, ##@LR__5127
03ed0     0F 13 02 F6 | 	mov	arg01, local01
03ed4     60 CE B1 FD | 	call	#__system___string_cmp
03ed8     00 FA 0D F2 | 	cmp	result1, #0 wz
03edc     B4 0A 90 AD |  if_e	jmp	#LR__0259
03ee0     83 01 00 FF 
03ee4     85 15 06 F6 | 	mov	arg02, ##@LR__5128
03ee8     0F 13 02 F6 | 	mov	arg01, local01
03eec     48 CE B1 FD | 	call	#__system___string_cmp
03ef0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ef4     A4 0A 90 AD |  if_e	jmp	#LR__0260
03ef8     83 01 00 FF 
03efc     89 15 06 F6 | 	mov	arg02, ##@LR__5129
03f00     0F 13 02 F6 | 	mov	arg01, local01
03f04     30 CE B1 FD | 	call	#__system___string_cmp
03f08     00 FA 0D F2 | 	cmp	result1, #0 wz
03f0c     94 0A 90 AD |  if_e	jmp	#LR__0261
03f10     83 01 00 FF 
03f14     94 15 06 F6 | 	mov	arg02, ##@LR__5130
03f18     0F 13 02 F6 | 	mov	arg01, local01
03f1c     18 CE B1 FD | 	call	#__system___string_cmp
03f20     00 FA 0D F2 | 	cmp	result1, #0 wz
03f24     84 0A 90 AD |  if_e	jmp	#LR__0262
03f28     83 01 00 FF 
03f2c     98 15 06 F6 | 	mov	arg02, ##@LR__5131
03f30     0F 13 02 F6 | 	mov	arg01, local01
03f34     00 CE B1 FD | 	call	#__system___string_cmp
03f38     00 FA 0D F2 | 	cmp	result1, #0 wz
03f3c     74 0A 90 AD |  if_e	jmp	#LR__0263
03f40     83 01 00 FF 
03f44     9F 15 06 F6 | 	mov	arg02, ##@LR__5132
03f48     0F 13 02 F6 | 	mov	arg01, local01
03f4c     E8 CD B1 FD | 	call	#__system___string_cmp
03f50     00 FA 0D F2 | 	cmp	result1, #0 wz
03f54     64 0A 90 AD |  if_e	jmp	#LR__0264
03f58     83 01 00 FF 
03f5c     A3 15 06 F6 | 	mov	arg02, ##@LR__5133
03f60     0F 13 02 F6 | 	mov	arg01, local01
03f64     D0 CD B1 FD | 	call	#__system___string_cmp
03f68     00 FA 0D F2 | 	cmp	result1, #0 wz
03f6c     54 0A 90 AD |  if_e	jmp	#LR__0265
03f70     83 01 00 FF 
03f74     A9 15 06 F6 | 	mov	arg02, ##@LR__5134
03f78     0F 13 02 F6 | 	mov	arg01, local01
03f7c     B8 CD B1 FD | 	call	#__system___string_cmp
03f80     00 FA 0D F2 | 	cmp	result1, #0 wz
03f84     44 0A 90 AD |  if_e	jmp	#LR__0266
03f88     83 01 00 FF 
03f8c     AF 15 06 F6 | 	mov	arg02, ##@LR__5135
03f90     0F 13 02 F6 | 	mov	arg01, local01
03f94     A0 CD B1 FD | 	call	#__system___string_cmp
03f98     00 FA 0D F2 | 	cmp	result1, #0 wz
03f9c     34 0A 90 AD |  if_e	jmp	#LR__0267
03fa0     83 01 00 FF 
03fa4     B3 15 06 F6 | 	mov	arg02, ##@LR__5136
03fa8     0F 13 02 F6 | 	mov	arg01, local01
03fac     88 CD B1 FD | 	call	#__system___string_cmp
03fb0     00 FA 0D F2 | 	cmp	result1, #0 wz
03fb4     24 0A 90 AD |  if_e	jmp	#LR__0268
03fb8     83 01 00 FF 
03fbc     B9 15 06 F6 | 	mov	arg02, ##@LR__5137
03fc0     0F 13 02 F6 | 	mov	arg01, local01
03fc4     70 CD B1 FD | 	call	#__system___string_cmp
03fc8     00 FA 0D F2 | 	cmp	result1, #0 wz
03fcc     14 0A 90 AD |  if_e	jmp	#LR__0269
03fd0     83 01 00 FF 
03fd4     BC 15 06 F6 | 	mov	arg02, ##@LR__5138
03fd8     0F 13 02 F6 | 	mov	arg01, local01
03fdc     58 CD B1 FD | 	call	#__system___string_cmp
03fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
03fe4     04 0A 90 AD |  if_e	jmp	#LR__0270
03fe8     83 01 00 FF 
03fec     C2 15 06 F6 | 	mov	arg02, ##@LR__5139
03ff0     0F 13 02 F6 | 	mov	arg01, local01
03ff4     40 CD B1 FD | 	call	#__system___string_cmp
03ff8     00 FA 0D F2 | 	cmp	result1, #0 wz
03ffc     F4 09 90 AD |  if_e	jmp	#LR__0271
04000     83 01 00 FF 
04004     C6 15 06 F6 | 	mov	arg02, ##@LR__5140
04008     0F 13 02 F6 | 	mov	arg01, local01
0400c     28 CD B1 FD | 	call	#__system___string_cmp
04010     00 FA 0D F2 | 	cmp	result1, #0 wz
04014     E4 09 90 AD |  if_e	jmp	#LR__0272
04018     83 01 00 FF 
0401c     CD 15 06 F6 | 	mov	arg02, ##@LR__5141
04020     0F 13 02 F6 | 	mov	arg01, local01
04024     10 CD B1 FD | 	call	#__system___string_cmp
04028     00 FA 0D F2 | 	cmp	result1, #0 wz
0402c     D4 09 90 AD |  if_e	jmp	#LR__0273
04030     83 01 00 FF 
04034     D4 15 06 F6 | 	mov	arg02, ##@LR__5142
04038     0F 13 02 F6 | 	mov	arg01, local01
0403c     F8 CC B1 FD | 	call	#__system___string_cmp
04040     00 FA 0D F2 | 	cmp	result1, #0 wz
04044     C4 09 90 AD |  if_e	jmp	#LR__0274
04048     83 01 00 FF 
0404c     DB 15 06 F6 | 	mov	arg02, ##@LR__5143
04050     0F 13 02 F6 | 	mov	arg01, local01
04054     E0 CC B1 FD | 	call	#__system___string_cmp
04058     00 FA 0D F2 | 	cmp	result1, #0 wz
0405c     B4 09 90 AD |  if_e	jmp	#LR__0275
04060     83 01 00 FF 
04064     E5 15 06 F6 | 	mov	arg02, ##@LR__5144
04068     0F 13 02 F6 | 	mov	arg01, local01
0406c     C8 CC B1 FD | 	call	#__system___string_cmp
04070     00 FA 0D F2 | 	cmp	result1, #0 wz
04074     A4 09 90 AD |  if_e	jmp	#LR__0276
04078     83 01 00 FF 
0407c     E9 15 06 F6 | 	mov	arg02, ##@LR__5145
04080     0F 13 02 F6 | 	mov	arg01, local01
04084     B0 CC B1 FD | 	call	#__system___string_cmp
04088     00 FA 0D F2 | 	cmp	result1, #0 wz
0408c     94 09 90 AD |  if_e	jmp	#LR__0277
04090     83 01 00 FF 
04094     ED 15 06 F6 | 	mov	arg02, ##@LR__5146
04098     0F 13 02 F6 | 	mov	arg01, local01
0409c     98 CC B1 FD | 	call	#__system___string_cmp
040a0     00 FA 0D F2 | 	cmp	result1, #0 wz
040a4     84 09 90 AD |  if_e	jmp	#LR__0278
040a8     83 01 00 FF 
040ac     F1 15 06 F6 | 	mov	arg02, ##@LR__5147
040b0     0F 13 02 F6 | 	mov	arg01, local01
040b4     80 CC B1 FD | 	call	#__system___string_cmp
040b8     00 FA 0D F2 | 	cmp	result1, #0 wz
040bc     74 09 90 AD |  if_e	jmp	#LR__0279
040c0     83 01 00 FF 
040c4     F5 15 06 F6 | 	mov	arg02, ##@LR__5148
040c8     0F 13 02 F6 | 	mov	arg01, local01
040cc     68 CC B1 FD | 	call	#__system___string_cmp
040d0     00 FA 0D F2 | 	cmp	result1, #0 wz
040d4     64 09 90 AD |  if_e	jmp	#LR__0280
040d8     83 01 00 FF 
040dc     FB 15 06 F6 | 	mov	arg02, ##@LR__5149
040e0     0F 13 02 F6 | 	mov	arg01, local01
040e4     50 CC B1 FD | 	call	#__system___string_cmp
040e8     00 FA 0D F2 | 	cmp	result1, #0 wz
040ec     54 09 90 AD |  if_e	jmp	#LR__0281
040f0     84 01 00 FF 
040f4     00 14 06 F6 | 	mov	arg02, ##@LR__5150
040f8     0F 13 02 F6 | 	mov	arg01, local01
040fc     38 CC B1 FD | 	call	#__system___string_cmp
04100     00 FA 0D F2 | 	cmp	result1, #0 wz
04104     44 09 90 AD |  if_e	jmp	#LR__0282
04108     84 01 00 FF 
0410c     04 14 06 F6 | 	mov	arg02, ##@LR__5151
04110     0F 13 02 F6 | 	mov	arg01, local01
04114     20 CC B1 FD | 	call	#__system___string_cmp
04118     00 FA 0D F2 | 	cmp	result1, #0 wz
0411c     34 09 90 AD |  if_e	jmp	#LR__0283
04120     84 01 00 FF 
04124     09 14 06 F6 | 	mov	arg02, ##@LR__5152
04128     0F 13 02 F6 | 	mov	arg01, local01
0412c     08 CC B1 FD | 	call	#__system___string_cmp
04130     00 FA 0D F2 | 	cmp	result1, #0 wz
04134     24 09 90 AD |  if_e	jmp	#LR__0284
04138     84 01 00 FF 
0413c     0D 14 06 F6 | 	mov	arg02, ##@LR__5153
04140     0F 13 02 F6 | 	mov	arg01, local01
04144     F0 CB B1 FD | 	call	#__system___string_cmp
04148     00 FA 0D F2 | 	cmp	result1, #0 wz
0414c     14 09 90 AD |  if_e	jmp	#LR__0285
04150     84 01 00 FF 
04154     13 14 06 F6 | 	mov	arg02, ##@LR__5154
04158     0F 13 02 F6 | 	mov	arg01, local01
0415c     D8 CB B1 FD | 	call	#__system___string_cmp
04160     00 FA 0D F2 | 	cmp	result1, #0 wz
04164     04 09 90 AD |  if_e	jmp	#LR__0286
04168     84 01 00 FF 
0416c     16 14 06 F6 | 	mov	arg02, ##@LR__5155
04170     0F 13 02 F6 | 	mov	arg01, local01
04174     C0 CB B1 FD | 	call	#__system___string_cmp
04178     00 FA 0D F2 | 	cmp	result1, #0 wz
0417c     F4 08 90 AD |  if_e	jmp	#LR__0287
04180     84 01 00 FF 
04184     1E 14 06 F6 | 	mov	arg02, ##@LR__5156
04188     0F 13 02 F6 | 	mov	arg01, local01
0418c     A8 CB B1 FD | 	call	#__system___string_cmp
04190     00 FA 0D F2 | 	cmp	result1, #0 wz
04194     E4 08 90 AD |  if_e	jmp	#LR__0288
04198     84 01 00 FF 
0419c     22 14 06 F6 | 	mov	arg02, ##@LR__5157
041a0     0F 13 02 F6 | 	mov	arg01, local01
041a4     90 CB B1 FD | 	call	#__system___string_cmp
041a8     00 FA 0D F2 | 	cmp	result1, #0 wz
041ac     D4 08 90 AD |  if_e	jmp	#LR__0289
041b0     84 01 00 FF 
041b4     27 14 06 F6 | 	mov	arg02, ##@LR__5158
041b8     0F 13 02 F6 | 	mov	arg01, local01
041bc     78 CB B1 FD | 	call	#__system___string_cmp
041c0     00 FA 0D F2 | 	cmp	result1, #0 wz
041c4     C4 08 90 AD |  if_e	jmp	#LR__0290
041c8     84 01 00 FF 
041cc     2B 14 06 F6 | 	mov	arg02, ##@LR__5159
041d0     0F 13 02 F6 | 	mov	arg01, local01
041d4     60 CB B1 FD | 	call	#__system___string_cmp
041d8     00 FA 0D F2 | 	cmp	result1, #0 wz
041dc     B4 08 90 AD |  if_e	jmp	#LR__0291
041e0     84 01 00 FF 
041e4     30 14 06 F6 | 	mov	arg02, ##@LR__5160
041e8     0F 13 02 F6 | 	mov	arg01, local01
041ec     48 CB B1 FD | 	call	#__system___string_cmp
041f0     00 FA 0D F2 | 	cmp	result1, #0 wz
041f4     A4 08 90 AD |  if_e	jmp	#LR__0292
041f8     84 01 00 FF 
041fc     34 14 06 F6 | 	mov	arg02, ##@LR__5161
04200     0F 13 02 F6 | 	mov	arg01, local01
04204     30 CB B1 FD | 	call	#__system___string_cmp
04208     00 FA 0D F2 | 	cmp	result1, #0 wz
0420c     94 08 90 AD |  if_e	jmp	#LR__0293
04210     84 01 00 FF 
04214     37 14 06 F6 | 	mov	arg02, ##@LR__5162
04218     0F 13 02 F6 | 	mov	arg01, local01
0421c     18 CB B1 FD | 	call	#__system___string_cmp
04220     00 FA 0D F2 | 	cmp	result1, #0 wz
04224     84 08 90 AD |  if_e	jmp	#LR__0294
04228     84 01 00 FF 
0422c     3D 14 06 F6 | 	mov	arg02, ##@LR__5163
04230     0F 13 02 F6 | 	mov	arg01, local01
04234     00 CB B1 FD | 	call	#__system___string_cmp
04238     00 FA 0D F2 | 	cmp	result1, #0 wz
0423c     74 08 90 AD |  if_e	jmp	#LR__0295
04240     84 01 00 FF 
04244     41 14 06 F6 | 	mov	arg02, ##@LR__5164
04248     0F 13 02 F6 | 	mov	arg01, local01
0424c     E8 CA B1 FD | 	call	#__system___string_cmp
04250     00 FA 0D F2 | 	cmp	result1, #0 wz
04254     64 08 90 AD |  if_e	jmp	#LR__0296
04258     84 01 00 FF 
0425c     45 14 06 F6 | 	mov	arg02, ##@LR__5165
04260     0F 13 02 F6 | 	mov	arg01, local01
04264     D0 CA B1 FD | 	call	#__system___string_cmp
04268     00 FA 0D F2 | 	cmp	result1, #0 wz
0426c     54 08 90 AD |  if_e	jmp	#LR__0297
04270     84 01 00 FF 
04274     4B 14 06 F6 | 	mov	arg02, ##@LR__5166
04278     0F 13 02 F6 | 	mov	arg01, local01
0427c     B8 CA B1 FD | 	call	#__system___string_cmp
04280     00 FA 0D F2 | 	cmp	result1, #0 wz
04284     44 08 90 AD |  if_e	jmp	#LR__0298
04288     84 01 00 FF 
0428c     50 14 06 F6 | 	mov	arg02, ##@LR__5167
04290     0F 13 02 F6 | 	mov	arg01, local01
04294     A0 CA B1 FD | 	call	#__system___string_cmp
04298     00 FA 0D F2 | 	cmp	result1, #0 wz
0429c     34 08 90 AD |  if_e	jmp	#LR__0299
042a0     84 01 00 FF 
042a4     53 14 06 F6 | 	mov	arg02, ##@LR__5168
042a8     0F 13 02 F6 | 	mov	arg01, local01
042ac     88 CA B1 FD | 	call	#__system___string_cmp
042b0     00 FA 0D F2 | 	cmp	result1, #0 wz
042b4     24 08 90 AD |  if_e	jmp	#LR__0300
042b8     84 01 00 FF 
042bc     56 14 06 F6 | 	mov	arg02, ##@LR__5169
042c0     0F 13 02 F6 | 	mov	arg01, local01
042c4     70 CA B1 FD | 	call	#__system___string_cmp
042c8     00 FA 0D F2 | 	cmp	result1, #0 wz
042cc     14 08 90 AD |  if_e	jmp	#LR__0301
042d0     84 01 00 FF 
042d4     5A 14 06 F6 | 	mov	arg02, ##@LR__5170
042d8     0F 13 02 F6 | 	mov	arg01, local01
042dc     58 CA B1 FD | 	call	#__system___string_cmp
042e0     00 FA 0D F2 | 	cmp	result1, #0 wz
042e4     04 08 90 AD |  if_e	jmp	#LR__0302
042e8     84 01 00 FF 
042ec     5D 14 06 F6 | 	mov	arg02, ##@LR__5171
042f0     0F 13 02 F6 | 	mov	arg01, local01
042f4     40 CA B1 FD | 	call	#__system___string_cmp
042f8     00 FA 0D F2 | 	cmp	result1, #0 wz
042fc     F4 07 90 AD |  if_e	jmp	#LR__0303
04300     84 01 00 FF 
04304     62 14 06 F6 | 	mov	arg02, ##@LR__5172
04308     0F 13 02 F6 | 	mov	arg01, local01
0430c     28 CA B1 FD | 	call	#__system___string_cmp
04310     00 FA 0D F2 | 	cmp	result1, #0 wz
04314     E4 07 90 AD |  if_e	jmp	#LR__0304
04318     84 01 00 FF 
0431c     65 14 06 F6 | 	mov	arg02, ##@LR__5173
04320     0F 13 02 F6 | 	mov	arg01, local01
04324     10 CA B1 FD | 	call	#__system___string_cmp
04328     00 FA 0D F2 | 	cmp	result1, #0 wz
0432c     D4 07 90 AD |  if_e	jmp	#LR__0305
04330     84 01 00 FF 
04334     6A 14 06 F6 | 	mov	arg02, ##@LR__5174
04338     0F 13 02 F6 | 	mov	arg01, local01
0433c     F8 C9 B1 FD | 	call	#__system___string_cmp
04340     00 FA 0D F2 | 	cmp	result1, #0 wz
04344     C4 07 90 AD |  if_e	jmp	#LR__0306
04348     84 01 00 FF 
0434c     6E 14 06 F6 | 	mov	arg02, ##@LR__5175
04350     0F 13 02 F6 | 	mov	arg01, local01
04354     E0 C9 B1 FD | 	call	#__system___string_cmp
04358     00 FA 0D F2 | 	cmp	result1, #0 wz
0435c     B4 07 90 AD |  if_e	jmp	#LR__0307
04360     84 01 00 FF 
04364     74 14 06 F6 | 	mov	arg02, ##@LR__5176
04368     0F 13 02 F6 | 	mov	arg01, local01
0436c     C8 C9 B1 FD | 	call	#__system___string_cmp
04370     00 FA 0D F2 | 	cmp	result1, #0 wz
04374     A4 07 90 AD |  if_e	jmp	#LR__0308
04378     84 01 00 FF 
0437c     79 14 06 F6 | 	mov	arg02, ##@LR__5177
04380     0F 13 02 F6 | 	mov	arg01, local01
04384     B0 C9 B1 FD | 	call	#__system___string_cmp
04388     00 FA 0D F2 | 	cmp	result1, #0 wz
0438c     94 07 90 AD |  if_e	jmp	#LR__0309
04390     84 01 00 FF 
04394     7C 14 06 F6 | 	mov	arg02, ##@LR__5178
04398     0F 13 02 F6 | 	mov	arg01, local01
0439c     98 C9 B1 FD | 	call	#__system___string_cmp
043a0     00 FA 0D F2 | 	cmp	result1, #0 wz
043a4     84 07 90 AD |  if_e	jmp	#LR__0310
043a8     84 01 00 FF 
043ac     82 14 06 F6 | 	mov	arg02, ##@LR__5179
043b0     0F 13 02 F6 | 	mov	arg01, local01
043b4     80 C9 B1 FD | 	call	#__system___string_cmp
043b8     00 FA 0D F2 | 	cmp	result1, #0 wz
043bc     74 07 90 AD |  if_e	jmp	#LR__0311
043c0     84 01 00 FF 
043c4     86 14 06 F6 | 	mov	arg02, ##@LR__5180
043c8     0F 13 02 F6 | 	mov	arg01, local01
043cc     68 C9 B1 FD | 	call	#__system___string_cmp
043d0     00 FA 0D F2 | 	cmp	result1, #0 wz
043d4     64 07 90 AD |  if_e	jmp	#LR__0312
043d8     84 01 00 FF 
043dc     8B 14 06 F6 | 	mov	arg02, ##@LR__5181
043e0     0F 13 02 F6 | 	mov	arg01, local01
043e4     50 C9 B1 FD | 	call	#__system___string_cmp
043e8     00 FA 0D F2 | 	cmp	result1, #0 wz
043ec     54 07 90 AD |  if_e	jmp	#LR__0313
043f0     84 01 00 FF 
043f4     8E 14 06 F6 | 	mov	arg02, ##@LR__5182
043f8     0F 13 02 F6 | 	mov	arg01, local01
043fc     38 C9 B1 FD | 	call	#__system___string_cmp
04400     00 FA 0D F2 | 	cmp	result1, #0 wz
04404     44 07 90 AD |  if_e	jmp	#LR__0314
04408     84 01 00 FF 
0440c     93 14 06 F6 | 	mov	arg02, ##@LR__5183
04410     0F 13 02 F6 | 	mov	arg01, local01
04414     20 C9 B1 FD | 	call	#__system___string_cmp
04418     00 FA 0D F2 | 	cmp	result1, #0 wz
0441c     34 07 90 AD |  if_e	jmp	#LR__0315
04420     84 01 00 FF 
04424     99 14 06 F6 | 	mov	arg02, ##@LR__5184
04428     0F 13 02 F6 | 	mov	arg01, local01
0442c     08 C9 B1 FD | 	call	#__system___string_cmp
04430     00 FA 0D F2 | 	cmp	result1, #0 wz
04434     24 07 90 AD |  if_e	jmp	#LR__0316
04438     84 01 00 FF 
0443c     9D 14 06 F6 | 	mov	arg02, ##@LR__5185
04440     0F 13 02 F6 | 	mov	arg01, local01
04444     F0 C8 B1 FD | 	call	#__system___string_cmp
04448     00 FA 0D F2 | 	cmp	result1, #0 wz
0444c     14 07 90 AD |  if_e	jmp	#LR__0317
04450     84 01 00 FF 
04454     A6 14 06 F6 | 	mov	arg02, ##@LR__5186
04458     0F 13 02 F6 | 	mov	arg01, local01
0445c     D8 C8 B1 FD | 	call	#__system___string_cmp
04460     00 FA 0D F2 | 	cmp	result1, #0 wz
04464     04 07 90 AD |  if_e	jmp	#LR__0318
04468     84 01 00 FF 
0446c     AC 14 06 F6 | 	mov	arg02, ##@LR__5187
04470     0F 13 02 F6 | 	mov	arg01, local01
04474     C0 C8 B1 FD | 	call	#__system___string_cmp
04478     00 FA 0D F2 | 	cmp	result1, #0 wz
0447c     F4 06 90 AD |  if_e	jmp	#LR__0319
04480     84 01 00 FF 
04484     B2 14 06 F6 | 	mov	arg02, ##@LR__5188
04488     0F 13 02 F6 | 	mov	arg01, local01
0448c     A8 C8 B1 FD | 	call	#__system___string_cmp
04490     00 FA 0D F2 | 	cmp	result1, #0 wz
04494     E4 06 90 AD |  if_e	jmp	#LR__0320
04498     84 01 00 FF 
0449c     BB 14 06 F6 | 	mov	arg02, ##@LR__5189
044a0     0F 13 02 F6 | 	mov	arg01, local01
044a4     90 C8 B1 FD | 	call	#__system___string_cmp
044a8     00 FA 0D F2 | 	cmp	result1, #0 wz
044ac     D4 06 90 AD |  if_e	jmp	#LR__0321
044b0     84 01 00 FF 
044b4     C5 14 06 F6 | 	mov	arg02, ##@LR__5190
044b8     0F 13 02 F6 | 	mov	arg01, local01
044bc     78 C8 B1 FD | 	call	#__system___string_cmp
044c0     00 FA 0D F2 | 	cmp	result1, #0 wz
044c4     C4 06 90 AD |  if_e	jmp	#LR__0322
044c8     84 01 00 FF 
044cc     CE 14 06 F6 | 	mov	arg02, ##@LR__5191
044d0     0F 13 02 F6 | 	mov	arg01, local01
044d4     60 C8 B1 FD | 	call	#__system___string_cmp
044d8     00 FA 0D F2 | 	cmp	result1, #0 wz
044dc     B4 06 90 AD |  if_e	jmp	#LR__0323
044e0     84 01 00 FF 
044e4     D3 14 06 F6 | 	mov	arg02, ##@LR__5192
044e8     0F 13 02 F6 | 	mov	arg01, local01
044ec     48 C8 B1 FD | 	call	#__system___string_cmp
044f0     00 FA 0D F2 | 	cmp	result1, #0 wz
044f4     A4 06 90 AD |  if_e	jmp	#LR__0324
044f8     84 01 00 FF 
044fc     D6 14 06 F6 | 	mov	arg02, ##@LR__5193
04500     0F 13 02 F6 | 	mov	arg01, local01
04504     30 C8 B1 FD | 	call	#__system___string_cmp
04508     00 FA 0D F2 | 	cmp	result1, #0 wz
0450c     94 06 90 AD |  if_e	jmp	#LR__0325
04510     84 01 00 FF 
04514     DB 14 06 F6 | 	mov	arg02, ##@LR__5194
04518     0F 13 02 F6 | 	mov	arg01, local01
0451c     18 C8 B1 FD | 	call	#__system___string_cmp
04520     00 FA 0D F2 | 	cmp	result1, #0 wz
04524     84 06 90 AD |  if_e	jmp	#LR__0326
04528     84 01 00 FF 
0452c     DF 14 06 F6 | 	mov	arg02, ##@LR__5195
04530     0F 13 02 F6 | 	mov	arg01, local01
04534     00 C8 B1 FD | 	call	#__system___string_cmp
04538     00 FA 0D F2 | 	cmp	result1, #0 wz
0453c     74 06 90 AD |  if_e	jmp	#LR__0327
04540     84 01 00 FF 
04544     E4 14 06 F6 | 	mov	arg02, ##@LR__5196
04548     0F 13 02 F6 | 	mov	arg01, local01
0454c     E8 C7 B1 FD | 	call	#__system___string_cmp
04550     00 FA 0D F2 | 	cmp	result1, #0 wz
04554     64 06 90 AD |  if_e	jmp	#LR__0328
04558     84 01 00 FF 
0455c     E8 14 06 F6 | 	mov	arg02, ##@LR__5197
04560     0F 13 02 F6 | 	mov	arg01, local01
04564     D0 C7 B1 FD | 	call	#__system___string_cmp
04568     00 FA 0D F2 | 	cmp	result1, #0 wz
0456c     54 06 90 AD |  if_e	jmp	#LR__0329
04570     84 01 00 FF 
04574     F1 14 06 F6 | 	mov	arg02, ##@LR__5198
04578     0F 13 02 F6 | 	mov	arg01, local01
0457c     B8 C7 B1 FD | 	call	#__system___string_cmp
04580     00 FA 0D F2 | 	cmp	result1, #0 wz
04584     44 06 90 AD |  if_e	jmp	#LR__0330
04588     84 01 00 FF 
0458c     F6 14 06 F6 | 	mov	arg02, ##@LR__5199
04590     0F 13 02 F6 | 	mov	arg01, local01
04594     A0 C7 B1 FD | 	call	#__system___string_cmp
04598     00 FA 0D F2 | 	cmp	result1, #0 wz
0459c     34 06 90 AD |  if_e	jmp	#LR__0331
045a0     84 01 00 FF 
045a4     FC 14 06 F6 | 	mov	arg02, ##@LR__5200
045a8     0F 13 02 F6 | 	mov	arg01, local01
045ac     88 C7 B1 FD | 	call	#__system___string_cmp
045b0     00 FA 0D F2 | 	cmp	result1, #0 wz
045b4     24 06 90 AD |  if_e	jmp	#LR__0332
045b8     84 01 00 FF 
045bc     FE 14 06 F6 | 	mov	arg02, ##@LR__5201
045c0     0F 13 02 F6 | 	mov	arg01, local01
045c4     70 C7 B1 FD | 	call	#__system___string_cmp
045c8     00 FA 0D F2 | 	cmp	result1, #0 wz
045cc     14 06 90 AD |  if_e	jmp	#LR__0333
045d0     84 01 00 FF 
045d4     02 15 06 F6 | 	mov	arg02, ##@LR__5202
045d8     0F 13 02 F6 | 	mov	arg01, local01
045dc     58 C7 B1 FD | 	call	#__system___string_cmp
045e0     00 FA 0D F2 | 	cmp	result1, #0 wz
045e4     04 06 90 AD |  if_e	jmp	#LR__0334
045e8     84 01 00 FF 
045ec     06 15 06 F6 | 	mov	arg02, ##@LR__5203
045f0     0F 13 02 F6 | 	mov	arg01, local01
045f4     40 C7 B1 FD | 	call	#__system___string_cmp
045f8     00 FA 0D F2 | 	cmp	result1, #0 wz
045fc     F4 05 90 AD |  if_e	jmp	#LR__0335
04600     84 01 00 FF 
04604     0E 15 06 F6 | 	mov	arg02, ##@LR__5204
04608     0F 13 02 F6 | 	mov	arg01, local01
0460c     28 C7 B1 FD | 	call	#__system___string_cmp
04610     00 FA 0D F2 | 	cmp	result1, #0 wz
04614     E4 05 90 AD |  if_e	jmp	#LR__0336
04618     84 01 00 FF 
0461c     12 15 06 F6 | 	mov	arg02, ##@LR__5205
04620     0F 13 02 F6 | 	mov	arg01, local01
04624     10 C7 B1 FD | 	call	#__system___string_cmp
04628     00 FA 0D F2 | 	cmp	result1, #0 wz
0462c     D4 05 90 AD |  if_e	jmp	#LR__0337
04630     84 01 00 FF 
04634     14 15 06 F6 | 	mov	arg02, ##@LR__5206
04638     0F 13 02 F6 | 	mov	arg01, local01
0463c     F8 C6 B1 FD | 	call	#__system___string_cmp
04640     00 FA 0D F2 | 	cmp	result1, #0 wz
04644     C4 05 90 AD |  if_e	jmp	#LR__0338
04648     84 01 00 FF 
0464c     1B 15 06 F6 | 	mov	arg02, ##@LR__5207
04650     0F 13 02 F6 | 	mov	arg01, local01
04654     E0 C6 B1 FD | 	call	#__system___string_cmp
04658     00 FA 0D F2 | 	cmp	result1, #0 wz
0465c     B4 05 90 AD |  if_e	jmp	#LR__0339
04660     84 01 00 FF 
04664     1F 15 06 F6 | 	mov	arg02, ##@LR__5208
04668     0F 13 02 F6 | 	mov	arg01, local01
0466c     C8 C6 B1 FD | 	call	#__system___string_cmp
04670     00 FA 0D F2 | 	cmp	result1, #0 wz
04674     A4 05 90 AD |  if_e	jmp	#LR__0340
04678     84 01 00 FF 
0467c     24 15 06 F6 | 	mov	arg02, ##@LR__5209
04680     0F 13 02 F6 | 	mov	arg01, local01
04684     B0 C6 B1 FD | 	call	#__system___string_cmp
04688     00 FA 0D F2 | 	cmp	result1, #0 wz
0468c     94 05 90 AD |  if_e	jmp	#LR__0341
04690     84 01 00 FF 
04694     27 15 06 F6 | 	mov	arg02, ##@LR__5210
04698     0F 13 02 F6 | 	mov	arg01, local01
0469c     98 C6 B1 FD | 	call	#__system___string_cmp
046a0     00 FA 0D F2 | 	cmp	result1, #0 wz
046a4     84 05 90 AD |  if_e	jmp	#LR__0342
046a8     84 01 00 FF 
046ac     30 15 06 F6 | 	mov	arg02, ##@LR__5211
046b0     0F 13 02 F6 | 	mov	arg01, local01
046b4     80 C6 B1 FD | 	call	#__system___string_cmp
046b8     00 FA 0D F2 | 	cmp	result1, #0 wz
046bc     74 05 90 AD |  if_e	jmp	#LR__0343
046c0     84 01 00 FF 
046c4     34 15 06 F6 | 	mov	arg02, ##@LR__5212
046c8     0F 13 02 F6 | 	mov	arg01, local01
046cc     68 C6 B1 FD | 	call	#__system___string_cmp
046d0     00 FA 0D F2 | 	cmp	result1, #0 wz
046d4     64 05 90 AD |  if_e	jmp	#LR__0344
046d8     84 01 00 FF 
046dc     3B 15 06 F6 | 	mov	arg02, ##@LR__5213
046e0     0F 13 02 F6 | 	mov	arg01, local01
046e4     50 C6 B1 FD | 	call	#__system___string_cmp
046e8     00 FA 0D F2 | 	cmp	result1, #0 wz
046ec     54 05 90 AD |  if_e	jmp	#LR__0345
046f0     84 01 00 FF 
046f4     3F 15 06 F6 | 	mov	arg02, ##@LR__5214
046f8     0F 13 02 F6 | 	mov	arg01, local01
046fc     38 C6 B1 FD | 	call	#__system___string_cmp
04700     00 FA 0D F2 | 	cmp	result1, #0 wz
04704     44 05 90 AD |  if_e	jmp	#LR__0346
04708     84 01 00 FF 
0470c     46 15 06 F6 | 	mov	arg02, ##@LR__5215
04710     0F 13 02 F6 | 	mov	arg01, local01
04714     20 C6 B1 FD | 	call	#__system___string_cmp
04718     00 FA 0D F2 | 	cmp	result1, #0 wz
0471c     34 05 90 AD |  if_e	jmp	#LR__0347
04720     84 01 00 FF 
04724     4A 15 06 F6 | 	mov	arg02, ##@LR__5216
04728     0F 13 02 F6 | 	mov	arg01, local01
0472c     08 C6 B1 FD | 	call	#__system___string_cmp
04730     00 FA 0D F2 | 	cmp	result1, #0 wz
04734     24 05 90 AD |  if_e	jmp	#LR__0348
04738     84 01 00 FF 
0473c     51 15 06 F6 | 	mov	arg02, ##@LR__5217
04740     0F 13 02 F6 | 	mov	arg01, local01
04744     F0 C5 B1 FD | 	call	#__system___string_cmp
04748     00 FA 0D F2 | 	cmp	result1, #0 wz
0474c     14 05 90 AD |  if_e	jmp	#LR__0349
04750     84 01 00 FF 
04754     54 15 06 F6 | 	mov	arg02, ##@LR__5218
04758     0F 13 02 F6 | 	mov	arg01, local01
0475c     D8 C5 B1 FD | 	call	#__system___string_cmp
04760     00 FA 0D F2 | 	cmp	result1, #0 wz
04764     04 05 90 AD |  if_e	jmp	#LR__0350
04768     84 01 00 FF 
0476c     5F 15 06 F6 | 	mov	arg02, ##@LR__5219
04770     0F 13 02 F6 | 	mov	arg01, local01
04774     C0 C5 B1 FD | 	call	#__system___string_cmp
04778     00 FA 0D F2 | 	cmp	result1, #0 wz
0477c     F4 04 90 AD |  if_e	jmp	#LR__0351
04780     84 01 00 FF 
04784     63 15 06 F6 | 	mov	arg02, ##@LR__5220
04788     0F 13 02 F6 | 	mov	arg01, local01
0478c     A8 C5 B1 FD | 	call	#__system___string_cmp
04790     00 FA 0D F2 | 	cmp	result1, #0 wz
04794     E4 04 90 AD |  if_e	jmp	#LR__0352
04798     84 01 00 FF 
0479c     6A 15 06 F6 | 	mov	arg02, ##@LR__5221
047a0     0F 13 02 F6 | 	mov	arg01, local01
047a4     90 C5 B1 FD | 	call	#__system___string_cmp
047a8     00 FA 0D F2 | 	cmp	result1, #0 wz
047ac     D4 04 90 AD |  if_e	jmp	#LR__0353
047b0     84 01 00 FF 
047b4     6E 15 06 F6 | 	mov	arg02, ##@LR__5222
047b8     0F 13 02 F6 | 	mov	arg01, local01
047bc     78 C5 B1 FD | 	call	#__system___string_cmp
047c0     00 FA 0D F2 | 	cmp	result1, #0 wz
047c4     C4 04 90 AD |  if_e	jmp	#LR__0354
047c8     84 01 00 FF 
047cc     76 15 06 F6 | 	mov	arg02, ##@LR__5223
047d0     0F 13 02 F6 | 	mov	arg01, local01
047d4     60 C5 B1 FD | 	call	#__system___string_cmp
047d8     00 FA 0D F2 | 	cmp	result1, #0 wz
047dc     B4 04 90 AD |  if_e	jmp	#LR__0355
047e0     84 01 00 FF 
047e4     7A 15 06 F6 | 	mov	arg02, ##@LR__5224
047e8     0F 13 02 F6 | 	mov	arg01, local01
047ec     48 C5 B1 FD | 	call	#__system___string_cmp
047f0     00 FA 0D F2 | 	cmp	result1, #0 wz
047f4     A4 04 90 AD |  if_e	jmp	#LR__0356
047f8     84 01 00 FF 
047fc     81 15 06 F6 | 	mov	arg02, ##@LR__5225
04800     0F 13 02 F6 | 	mov	arg01, local01
04804     30 C5 B1 FD | 	call	#__system___string_cmp
04808     00 FA 0D F2 | 	cmp	result1, #0 wz
0480c     94 04 90 AD |  if_e	jmp	#LR__0357
04810     84 01 00 FF 
04814     88 15 06 F6 | 	mov	arg02, ##@LR__5226
04818     0F 13 02 F6 | 	mov	arg01, local01
0481c     18 C5 B1 FD | 	call	#__system___string_cmp
04820     00 FA 0D F2 | 	cmp	result1, #0 wz
04824     84 04 90 AD |  if_e	jmp	#LR__0358
04828     84 01 00 FF 
0482c     8C 15 06 F6 | 	mov	arg02, ##@LR__5227
04830     0F 13 02 F6 | 	mov	arg01, local01
04834     00 C5 B1 FD | 	call	#__system___string_cmp
04838     00 FA 0D F2 | 	cmp	result1, #0 wz
0483c     74 04 90 AD |  if_e	jmp	#LR__0359
04840     84 01 00 FF 
04844     92 15 06 F6 | 	mov	arg02, ##@LR__5228
04848     0F 13 02 F6 | 	mov	arg01, local01
0484c     E8 C4 B1 FD | 	call	#__system___string_cmp
04850     00 FA 0D F2 | 	cmp	result1, #0 wz
04854     64 04 90 AD |  if_e	jmp	#LR__0360
04858     84 01 00 FF 
0485c     96 15 06 F6 | 	mov	arg02, ##@LR__5229
04860     0F 13 02 F6 | 	mov	arg01, local01
04864     D0 C4 B1 FD | 	call	#__system___string_cmp
04868     00 FA 0D F2 | 	cmp	result1, #0 wz
0486c     54 04 90 AD |  if_e	jmp	#LR__0361
04870     84 01 00 FF 
04874     9D 15 06 F6 | 	mov	arg02, ##@LR__5230
04878     0F 13 02 F6 | 	mov	arg01, local01
0487c     B8 C4 B1 FD | 	call	#__system___string_cmp
04880     00 FA 0D F2 | 	cmp	result1, #0 wz
04884     44 04 90 AD |  if_e	jmp	#LR__0362
04888     84 01 00 FF 
0488c     A2 15 06 F6 | 	mov	arg02, ##@LR__5231
04890     0F 13 02 F6 | 	mov	arg01, local01
04894     A0 C4 B1 FD | 	call	#__system___string_cmp
04898     00 FA 0D F2 | 	cmp	result1, #0 wz
0489c     34 04 90 AD |  if_e	jmp	#LR__0363
048a0     84 01 00 FF 
048a4     A7 15 06 F6 | 	mov	arg02, ##@LR__5232
048a8     0F 13 02 F6 | 	mov	arg01, local01
048ac     88 C4 B1 FD | 	call	#__system___string_cmp
048b0     00 FA 0D F2 | 	cmp	result1, #0 wz
048b4     24 04 90 AD |  if_e	jmp	#LR__0364
048b8     84 01 00 FF 
048bc     AE 15 06 F6 | 	mov	arg02, ##@LR__5233
048c0     0F 13 02 F6 | 	mov	arg01, local01
048c4     70 C4 B1 FD | 	call	#__system___string_cmp
048c8     00 FA 0D F2 | 	cmp	result1, #0 wz
048cc     14 04 90 AD |  if_e	jmp	#LR__0365
048d0     84 01 00 FF 
048d4     B8 15 06 F6 | 	mov	arg02, ##@LR__5234
048d8     0F 13 02 F6 | 	mov	arg01, local01
048dc     58 C4 B1 FD | 	call	#__system___string_cmp
048e0     00 FA 0D F2 | 	cmp	result1, #0 wz
048e4     04 04 90 AD |  if_e	jmp	#LR__0366
048e8     84 01 00 FF 
048ec     BC 15 06 F6 | 	mov	arg02, ##@LR__5235
048f0     0F 13 02 F6 | 	mov	arg01, local01
048f4     40 C4 B1 FD | 	call	#__system___string_cmp
048f8     00 FA 0D F2 | 	cmp	result1, #0 wz
048fc     F4 03 90 AD |  if_e	jmp	#LR__0367
04900     84 01 00 FF 
04904     C4 15 06 F6 | 	mov	arg02, ##@LR__5236
04908     0F 13 02 F6 | 	mov	arg01, local01
0490c     28 C4 B1 FD | 	call	#__system___string_cmp
04910     00 FA 0D F2 | 	cmp	result1, #0 wz
04914     E4 03 90 AD |  if_e	jmp	#LR__0368
04918     84 01 00 FF 
0491c     C8 15 06 F6 | 	mov	arg02, ##@LR__5237
04920     0F 13 02 F6 | 	mov	arg01, local01
04924     10 C4 B1 FD | 	call	#__system___string_cmp
04928     00 FA 0D F2 | 	cmp	result1, #0 wz
0492c     D4 03 90 AD |  if_e	jmp	#LR__0369
04930     84 01 00 FF 
04934     CE 15 06 F6 | 	mov	arg02, ##@LR__5238
04938     0F 13 02 F6 | 	mov	arg01, local01
0493c     F8 C3 B1 FD | 	call	#__system___string_cmp
04940     00 FA 0D F2 | 	cmp	result1, #0 wz
04944     C4 03 90 AD |  if_e	jmp	#LR__0370
04948     C8 03 90 FD | 	jmp	#LR__0371
0494c                 | LR__0250
0494c     5C FA 05 F6 | 	mov	result1, #92
04950     C4 03 90 FD | 	jmp	#LR__0372
04954                 | LR__0251
04954     5C FA 05 F6 | 	mov	result1, #92
04958     BC 03 90 FD | 	jmp	#LR__0372
0495c                 | LR__0252
0495c     47 FA 05 F6 | 	mov	result1, #71
04960     B4 03 90 FD | 	jmp	#LR__0372
04964                 | LR__0253
04964     59 FA 05 F6 | 	mov	result1, #89
04968     AC 03 90 FD | 	jmp	#LR__0372
0496c                 | LR__0254
0496c     59 FA 05 F6 | 	mov	result1, #89
04970     A4 03 90 FD | 	jmp	#LR__0372
04974                 | LR__0255
04974     AE FA 05 F6 | 	mov	result1, #174
04978     9C 03 90 FD | 	jmp	#LR__0372
0497c                 | LR__0256
0497c     AE FA 05 F6 | 	mov	result1, #174
04980     94 03 90 FD | 	jmp	#LR__0372
04984                 | LR__0257
04984     B1 FA 05 F6 | 	mov	result1, #177
04988     8C 03 90 FD | 	jmp	#LR__0372
0498c                 | LR__0258
0498c     B1 FA 05 F6 | 	mov	result1, #177
04990     84 03 90 FD | 	jmp	#LR__0372
04994                 | LR__0259
04994     AF FA 05 F6 | 	mov	result1, #175
04998     7C 03 90 FD | 	jmp	#LR__0372
0499c                 | LR__0260
0499c     AF FA 05 F6 | 	mov	result1, #175
049a0     74 03 90 FD | 	jmp	#LR__0372
049a4                 | LR__0261
049a4     B0 FA 05 F6 | 	mov	result1, #176
049a8     6C 03 90 FD | 	jmp	#LR__0372
049ac                 | LR__0262
049ac     B0 FA 05 F6 | 	mov	result1, #176
049b0     64 03 90 FD | 	jmp	#LR__0372
049b4                 | LR__0263
049b4     45 FA 05 F6 | 	mov	result1, #69
049b8     5C 03 90 FD | 	jmp	#LR__0372
049bc                 | LR__0264
049bc     45 FA 05 F6 | 	mov	result1, #69
049c0     54 03 90 FD | 	jmp	#LR__0372
049c4                 | LR__0265
049c4     69 FA 05 F6 | 	mov	result1, #105
049c8     4C 03 90 FD | 	jmp	#LR__0372
049cc                 | LR__0266
049cc     B4 FA 05 F6 | 	mov	result1, #180
049d0     44 03 90 FD | 	jmp	#LR__0372
049d4                 | LR__0267
049d4     40 FA 05 F6 | 	mov	result1, #64
049d8     3C 03 90 FD | 	jmp	#LR__0372
049dc                 | LR__0268
049dc     49 FA 05 F6 | 	mov	result1, #73
049e0     34 03 90 FD | 	jmp	#LR__0372
049e4                 | LR__0269
049e4     49 FA 05 F6 | 	mov	result1, #73
049e8     2C 03 90 FD | 	jmp	#LR__0372
049ec                 | LR__0270
049ec     50 FA 05 F6 | 	mov	result1, #80
049f0     24 03 90 FD | 	jmp	#LR__0372
049f4                 | LR__0271
049f4     50 FA 05 F6 | 	mov	result1, #80
049f8     1C 03 90 FD | 	jmp	#LR__0372
049fc                 | LR__0272
049fc     68 FA 05 F6 | 	mov	result1, #104
04a00     14 03 90 FD | 	jmp	#LR__0372
04a04                 | LR__0273
04a04     73 FA 05 F6 | 	mov	result1, #115
04a08     0C 03 90 FD | 	jmp	#LR__0372
04a0c                 | LR__0274
04a0c     74 FA 05 F6 | 	mov	result1, #116
04a10     04 03 90 FD | 	jmp	#LR__0372
04a14                 | LR__0275
04a14     6C FA 05 F6 | 	mov	result1, #108
04a18     FC 02 90 FD | 	jmp	#LR__0372
04a1c                 | LR__0276
04a1c     6C FA 05 F6 | 	mov	result1, #108
04a20     F4 02 90 FD | 	jmp	#LR__0372
04a24                 | LR__0277
04a24     89 FA 05 F6 | 	mov	result1, #137
04a28     EC 02 90 FD | 	jmp	#LR__0372
04a2c                 | LR__0278
04a2c     72 FA 05 F6 | 	mov	result1, #114
04a30     E4 02 90 FD | 	jmp	#LR__0372
04a34                 | LR__0279
04a34     5D FA 05 F6 | 	mov	result1, #93
04a38     DC 02 90 FD | 	jmp	#LR__0372
04a3c                 | LR__0280
04a3c     96 FA 05 F6 | 	mov	result1, #150
04a40     D4 02 90 FD | 	jmp	#LR__0372
04a44                 | LR__0281
04a44     43 FA 05 F6 | 	mov	result1, #67
04a48     CC 02 90 FD | 	jmp	#LR__0372
04a4c                 | LR__0282
04a4c     43 FA 05 F6 | 	mov	result1, #67
04a50     C4 02 90 FD | 	jmp	#LR__0372
04a54                 | LR__0283
04a54     5A FA 05 F6 | 	mov	result1, #90
04a58     BC 02 90 FD | 	jmp	#LR__0372
04a5c                 | LR__0284
04a5c     AB FA 05 F6 | 	mov	result1, #171
04a60     B4 02 90 FD | 	jmp	#LR__0372
04a64                 | LR__0285
04a64     BD FA 05 F6 | 	mov	result1, #189
04a68     AC 02 90 FD | 	jmp	#LR__0372
04a6c                 | LR__0286
04a6c     BD FA 05 F6 | 	mov	result1, #189
04a70     A4 02 90 FD | 	jmp	#LR__0372
04a74                 | LR__0287
04a74     46 FA 05 F6 | 	mov	result1, #70
04a78     9C 02 90 FD | 	jmp	#LR__0372
04a7c                 | LR__0288
04a7c     46 FA 05 F6 | 	mov	result1, #70
04a80     94 02 90 FD | 	jmp	#LR__0372
04a84                 | LR__0289
04a84     71 FA 05 F6 | 	mov	result1, #113
04a88     8C 02 90 FD | 	jmp	#LR__0372
04a8c                 | LR__0290
04a8c     71 FA 05 F6 | 	mov	result1, #113
04a90     84 02 90 FD | 	jmp	#LR__0372
04a94                 | LR__0291
04a94     60 FA 05 F6 | 	mov	result1, #96
04a98     7C 02 90 FD | 	jmp	#LR__0372
04a9c                 | LR__0292
04a9c     4A FA 05 F6 | 	mov	result1, #74
04aa0     74 02 90 FD | 	jmp	#LR__0372
04aa4                 | LR__0293
04aa4     4A FA 05 F6 | 	mov	result1, #74
04aa8     6C 02 90 FD | 	jmp	#LR__0372
04aac                 | LR__0294
04aac     48 FA 05 F6 | 	mov	result1, #72
04ab0     64 02 90 FD | 	jmp	#LR__0372
04ab4                 | LR__0295
04ab4     48 FA 05 F6 | 	mov	result1, #72
04ab8     5C 02 90 FD | 	jmp	#LR__0372
04abc                 | LR__0296
04abc     BB FA 05 F6 | 	mov	result1, #187
04ac0     54 02 90 FD | 	jmp	#LR__0372
04ac4                 | LR__0297
04ac4     A9 FA 05 F6 | 	mov	result1, #169
04ac8     4C 02 90 FD | 	jmp	#LR__0372
04acc                 | LR__0298
04acc     4E FA 05 F6 | 	mov	result1, #78
04ad0     44 02 90 FD | 	jmp	#LR__0372
04ad4                 | LR__0299
04ad4     4E FA 05 F6 | 	mov	result1, #78
04ad8     3C 02 90 FD | 	jmp	#LR__0372
04adc                 | LR__0300
04adc     58 FA 05 F6 | 	mov	result1, #88
04ae0     34 02 90 FD | 	jmp	#LR__0372
04ae4                 | LR__0301
04ae4     5F FA 05 F6 | 	mov	result1, #95
04ae8     2C 02 90 FD | 	jmp	#LR__0372
04aec                 | LR__0302
04aec     5F FA 05 F6 | 	mov	result1, #95
04af0     24 02 90 FD | 	jmp	#LR__0372
04af4                 | LR__0303
04af4     4C FA 05 F6 | 	mov	result1, #76
04af8     1C 02 90 FD | 	jmp	#LR__0372
04afc                 | LR__0304
04afc     4C FA 05 F6 | 	mov	result1, #76
04b00     14 02 90 FD | 	jmp	#LR__0372
04b04                 | LR__0305
04b04     52 FA 05 F6 | 	mov	result1, #82
04b08     0C 02 90 FD | 	jmp	#LR__0372
04b0c                 | LR__0306
04b0c     52 FA 05 F6 | 	mov	result1, #82
04b10     04 02 90 FD | 	jmp	#LR__0372
04b14                 | LR__0307
04b14     97 FA 05 F6 | 	mov	result1, #151
04b18     FC 01 90 FD | 	jmp	#LR__0372
04b1c                 | LR__0308
04b1c     61 FA 05 F6 | 	mov	result1, #97
04b20     F4 01 90 FD | 	jmp	#LR__0372
04b24                 | LR__0309
04b24     61 FA 05 F6 | 	mov	result1, #97
04b28     EC 01 90 FD | 	jmp	#LR__0372
04b2c                 | LR__0310
04b2c     63 FA 05 F6 | 	mov	result1, #99
04b30     E4 01 90 FD | 	jmp	#LR__0372
04b34                 | LR__0311
04b34     41 FA 05 F6 | 	mov	result1, #65
04b38     DC 01 90 FD | 	jmp	#LR__0372
04b3c                 | LR__0312
04b3c     4B FA 05 F6 | 	mov	result1, #75
04b40     D4 01 90 FD | 	jmp	#LR__0372
04b44                 | LR__0313
04b44     4B FA 05 F6 | 	mov	result1, #75
04b48     CC 01 90 FD | 	jmp	#LR__0372
04b4c                 | LR__0314
04b4c     B3 FA 05 F6 | 	mov	result1, #179
04b50     C4 01 90 FD | 	jmp	#LR__0372
04b54                 | LR__0315
04b54     5E FA 05 F6 | 	mov	result1, #94
04b58     BC 01 90 FD | 	jmp	#LR__0372
04b5c                 | LR__0316
04b5c     5E FA 05 F6 | 	mov	result1, #94
04b60     B4 01 90 FD | 	jmp	#LR__0372
04b64                 | LR__0317
04b64     7C FA 05 F6 | 	mov	result1, #124
04b68     AC 01 90 FD | 	jmp	#LR__0372
04b6c                 | LR__0318
04b6c     7E FA 05 F6 | 	mov	result1, #126
04b70     A4 01 90 FD | 	jmp	#LR__0372
04b74                 | LR__0319
04b74     7D FA 05 F6 | 	mov	result1, #125
04b78     9C 01 90 FD | 	jmp	#LR__0372
04b7c                 | LR__0320
04b7c     7F FA 05 F6 | 	mov	result1, #127
04b80     94 01 90 FD | 	jmp	#LR__0372
04b84                 | LR__0321
04b84     80 FA 05 F6 | 	mov	result1, #128
04b88     8C 01 90 FD | 	jmp	#LR__0372
04b8c                 | LR__0322
04b8c     55 FA 05 F6 | 	mov	result1, #85
04b90     84 01 90 FD | 	jmp	#LR__0372
04b94                 | LR__0323
04b94     75 FA 05 F6 | 	mov	result1, #117
04b98     7C 01 90 FD | 	jmp	#LR__0372
04b9c                 | LR__0324
04b9c     75 FA 05 F6 | 	mov	result1, #117
04ba0     74 01 90 FD | 	jmp	#LR__0372
04ba4                 | LR__0325
04ba4     42 FA 05 F6 | 	mov	result1, #66
04ba8     6C 01 90 FD | 	jmp	#LR__0372
04bac                 | LR__0326
04bac     42 FA 05 F6 | 	mov	result1, #66
04bb0     64 01 90 FD | 	jmp	#LR__0372
04bb4                 | LR__0327
04bb4     95 FA 05 F6 | 	mov	result1, #149
04bb8     5C 01 90 FD | 	jmp	#LR__0372
04bbc                 | LR__0328
04bbc     AC FA 05 F6 | 	mov	result1, #172
04bc0     54 01 90 FD | 	jmp	#LR__0372
04bc4                 | LR__0329
04bc4     81 FA 05 F6 | 	mov	result1, #129
04bc8     4C 01 90 FD | 	jmp	#LR__0372
04bcc                 | LR__0330
04bcc     81 FA 05 F6 | 	mov	result1, #129
04bd0     44 01 90 FD | 	jmp	#LR__0372
04bd4                 | LR__0331
04bd4     44 FA 05 F6 | 	mov	result1, #68
04bd8     3C 01 90 FD | 	jmp	#LR__0372
04bdc                 | LR__0332
04bdc     44 FA 05 F6 | 	mov	result1, #68
04be0     34 01 90 FD | 	jmp	#LR__0372
04be4                 | LR__0333
04be4     BC FA 05 F6 | 	mov	result1, #188
04be8     2C 01 90 FD | 	jmp	#LR__0372
04bec                 | LR__0334
04bec     88 FA 05 F6 | 	mov	result1, #136
04bf0     24 01 90 FD | 	jmp	#LR__0372
04bf4                 | LR__0335
04bf4     92 FA 05 F6 | 	mov	result1, #146
04bf8     1C 01 90 FD | 	jmp	#LR__0372
04bfc                 | LR__0336
04bfc     BE FA 05 F6 | 	mov	result1, #190
04c00     14 01 90 FD | 	jmp	#LR__0372
04c04                 | LR__0337
04c04     BE FA 05 F6 | 	mov	result1, #190
04c08     0C 01 90 FD | 	jmp	#LR__0372
04c0c                 | LR__0338
04c0c     AA FA 05 F6 | 	mov	result1, #170
04c10     04 01 90 FD | 	jmp	#LR__0372
04c14                 | LR__0339
04c14     4D FA 05 F6 | 	mov	result1, #77
04c18     FC 00 90 FD | 	jmp	#LR__0372
04c1c                 | LR__0340
04c1c     51 FA 05 F6 | 	mov	result1, #81
04c20     F4 00 90 FD | 	jmp	#LR__0372
04c24                 | LR__0341
04c24     51 FA 05 F6 | 	mov	result1, #81
04c28     EC 00 90 FD | 	jmp	#LR__0372
04c2c                 | LR__0342
04c2c     8E FA 05 F6 | 	mov	result1, #142
04c30     E4 00 90 FD | 	jmp	#LR__0372
04c34                 | LR__0343
04c34     8E FA 05 F6 | 	mov	result1, #142
04c38     DC 00 90 FD | 	jmp	#LR__0372
04c3c                 | LR__0344
04c3c     90 FA 05 F6 | 	mov	result1, #144
04c40     D4 00 90 FD | 	jmp	#LR__0372
04c44                 | LR__0345
04c44     90 FA 05 F6 | 	mov	result1, #144
04c48     CC 00 90 FD | 	jmp	#LR__0372
04c4c                 | LR__0346
04c4c     8D FA 05 F6 | 	mov	result1, #141
04c50     C4 00 90 FD | 	jmp	#LR__0372
04c54                 | LR__0347
04c54     8D FA 05 F6 | 	mov	result1, #141
04c58     BC 00 90 FD | 	jmp	#LR__0372
04c5c                 | LR__0348
04c5c     8C FA 05 F6 | 	mov	result1, #140
04c60     B4 00 90 FD | 	jmp	#LR__0372
04c64                 | LR__0349
04c64     8C FA 05 F6 | 	mov	result1, #140
04c68     AC 00 90 FD | 	jmp	#LR__0372
04c6c                 | LR__0350
04c6c     91 FA 05 F6 | 	mov	result1, #145
04c70     A4 00 90 FD | 	jmp	#LR__0372
04c74                 | LR__0351
04c74     91 FA 05 F6 | 	mov	result1, #145
04c78     9C 00 90 FD | 	jmp	#LR__0372
04c7c                 | LR__0352
04c7c     8B FA 05 F6 | 	mov	result1, #139
04c80     94 00 90 FD | 	jmp	#LR__0372
04c84                 | LR__0353
04c84     8B FA 05 F6 | 	mov	result1, #139
04c88     8C 00 90 FD | 	jmp	#LR__0372
04c8c                 | LR__0354
04c8c     8F FA 05 F6 | 	mov	result1, #143
04c90     84 00 90 FD | 	jmp	#LR__0372
04c94                 | LR__0355
04c94     8F FA 05 F6 | 	mov	result1, #143
04c98     7C 00 90 FD | 	jmp	#LR__0372
04c9c                 | LR__0356
04c9c     8F FA 05 F6 | 	mov	result1, #143
04ca0     74 00 90 FD | 	jmp	#LR__0372
04ca4                 | LR__0357
04ca4     B2 FA 05 F6 | 	mov	result1, #178
04ca8     6C 00 90 FD | 	jmp	#LR__0372
04cac                 | LR__0358
04cac     B2 FA 05 F6 | 	mov	result1, #178
04cb0     64 00 90 FD | 	jmp	#LR__0372
04cb4                 | LR__0359
04cb4     75 FA 05 F6 | 	mov	result1, #117
04cb8     5C 00 90 FD | 	jmp	#LR__0372
04cbc                 | LR__0360
04cbc     75 FA 05 F6 | 	mov	result1, #117
04cc0     54 00 90 FD | 	jmp	#LR__0372
04cc4                 | LR__0361
04cc4     6D FA 05 F6 | 	mov	result1, #109
04cc8     4C 00 90 FD | 	jmp	#LR__0372
04ccc                 | LR__0362
04ccc     6D FA 05 F6 | 	mov	result1, #109
04cd0     44 00 90 FD | 	jmp	#LR__0372
04cd4                 | LR__0363
04cd4     5B FA 05 F6 | 	mov	result1, #91
04cd8     3C 00 90 FD | 	jmp	#LR__0372
04cdc                 | LR__0364
04cdc     56 FA 05 F6 | 	mov	result1, #86
04ce0     34 00 90 FD | 	jmp	#LR__0372
04ce4                 | LR__0365
04ce4     70 FA 05 F6 | 	mov	result1, #112
04ce8     2C 00 90 FD | 	jmp	#LR__0372
04cec                 | LR__0366
04cec     70 FA 05 F6 | 	mov	result1, #112
04cf0     24 00 90 FD | 	jmp	#LR__0372
04cf4                 | LR__0367
04cf4     57 FA 05 F6 | 	mov	result1, #87
04cf8     1C 00 90 FD | 	jmp	#LR__0372
04cfc                 | LR__0368
04cfc     57 FA 05 F6 | 	mov	result1, #87
04d00     14 00 90 FD | 	jmp	#LR__0372
04d04                 | LR__0369
04d04     77 FA 05 F6 | 	mov	result1, #119
04d08     0C 00 90 FD | 	jmp	#LR__0372
04d0c                 | LR__0370
04d0c     78 FA 05 F6 | 	mov	result1, #120
04d10     04 00 90 FD | 	jmp	#LR__0372
04d14                 | LR__0371
04d14     00 FA 05 F6 | 	mov	result1, #0
04d18                 | LR__0372
04d18     A7 F0 03 F6 | 	mov	ptra, fp
04d1c     B2 00 A0 FD | 	call	#popregs_
04d20                 | _iscommand_ret
04d20     2D 00 64 FD | 	ret
04d24                 | 
04d24                 | ' 
04d24                 | ' function isfunction(s as string) as ubyte
04d24                 | _isfunction
04d24     01 4A 05 F6 | 	mov	COUNT_, #1
04d28     A8 00 A0 FD | 	call	#pushregs_
04d2c                 | ' 
04d2c                 | ' select case s
04d2c     09 1F 02 F6 | 	mov	local01, arg01
04d30     84 01 00 FF 
04d34     D4 15 06 F6 | 	mov	arg02, ##@LR__5239
04d38     0F 13 02 F6 | 	mov	arg01, local01
04d3c     F8 BF B1 FD | 	call	#__system___string_cmp
04d40     00 FA 0D F2 | 	cmp	result1, #0 wz
04d44     0C 04 90 AD |  if_e	jmp	#LR__0380
04d48     84 01 00 FF 
04d4c     D8 15 06 F6 | 	mov	arg02, ##@LR__5240
04d50     0F 13 02 F6 | 	mov	arg01, local01
04d54     E0 BF B1 FD | 	call	#__system___string_cmp
04d58     00 FA 0D F2 | 	cmp	result1, #0 wz
04d5c     FC 03 90 AD |  if_e	jmp	#LR__0381
04d60     84 01 00 FF 
04d64     DD 15 06 F6 | 	mov	arg02, ##@LR__5241
04d68     0F 13 02 F6 | 	mov	arg01, local01
04d6c     C8 BF B1 FD | 	call	#__system___string_cmp
04d70     00 FA 0D F2 | 	cmp	result1, #0 wz
04d74     EC 03 90 AD |  if_e	jmp	#LR__0382
04d78     84 01 00 FF 
04d7c     E1 15 06 F6 | 	mov	arg02, ##@LR__5242
04d80     0F 13 02 F6 | 	mov	arg01, local01
04d84     B0 BF B1 FD | 	call	#__system___string_cmp
04d88     00 FA 0D F2 | 	cmp	result1, #0 wz
04d8c     DC 03 90 AD |  if_e	jmp	#LR__0383
04d90     84 01 00 FF 
04d94     E6 15 06 F6 | 	mov	arg02, ##@LR__5243
04d98     0F 13 02 F6 | 	mov	arg01, local01
04d9c     98 BF B1 FD | 	call	#__system___string_cmp
04da0     00 FA 0D F2 | 	cmp	result1, #0 wz
04da4     CC 03 90 AD |  if_e	jmp	#LR__0384
04da8     84 01 00 FF 
04dac     EA 15 06 F6 | 	mov	arg02, ##@LR__5244
04db0     0F 13 02 F6 | 	mov	arg01, local01
04db4     80 BF B1 FD | 	call	#__system___string_cmp
04db8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dbc     BC 03 90 AD |  if_e	jmp	#LR__0385
04dc0     84 01 00 FF 
04dc4     EF 15 06 F6 | 	mov	arg02, ##@LR__5245
04dc8     0F 13 02 F6 | 	mov	arg01, local01
04dcc     68 BF B1 FD | 	call	#__system___string_cmp
04dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
04dd4     AC 03 90 AD |  if_e	jmp	#LR__0386
04dd8     84 01 00 FF 
04ddc     F3 15 06 F6 | 	mov	arg02, ##@LR__5246
04de0     0F 13 02 F6 | 	mov	arg01, local01
04de4     50 BF B1 FD | 	call	#__system___string_cmp
04de8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dec     9C 03 90 AD |  if_e	jmp	#LR__0387
04df0     84 01 00 FF 
04df4     F8 15 06 F6 | 	mov	arg02, ##@LR__5247
04df8     0F 13 02 F6 | 	mov	arg01, local01
04dfc     38 BF B1 FD | 	call	#__system___string_cmp
04e00     00 FA 0D F2 | 	cmp	result1, #0 wz
04e04     8C 03 90 AD |  if_e	jmp	#LR__0388
04e08     84 01 00 FF 
04e0c     FD 15 06 F6 | 	mov	arg02, ##@LR__5248
04e10     0F 13 02 F6 | 	mov	arg01, local01
04e14     20 BF B1 FD | 	call	#__system___string_cmp
04e18     00 FA 0D F2 | 	cmp	result1, #0 wz
04e1c     7C 03 90 AD |  if_e	jmp	#LR__0389
04e20     85 01 00 FF 
04e24     01 14 06 F6 | 	mov	arg02, ##@LR__5249
04e28     0F 13 02 F6 | 	mov	arg01, local01
04e2c     08 BF B1 FD | 	call	#__system___string_cmp
04e30     00 FA 0D F2 | 	cmp	result1, #0 wz
04e34     6C 03 90 AD |  if_e	jmp	#LR__0390
04e38     85 01 00 FF 
04e3c     07 14 06 F6 | 	mov	arg02, ##@LR__5250
04e40     0F 13 02 F6 | 	mov	arg01, local01
04e44     F0 BE B1 FD | 	call	#__system___string_cmp
04e48     00 FA 0D F2 | 	cmp	result1, #0 wz
04e4c     5C 03 90 AD |  if_e	jmp	#LR__0391
04e50     85 01 00 FF 
04e54     0B 14 06 F6 | 	mov	arg02, ##@LR__5251
04e58     0F 13 02 F6 | 	mov	arg01, local01
04e5c     D8 BE B1 FD | 	call	#__system___string_cmp
04e60     00 FA 0D F2 | 	cmp	result1, #0 wz
04e64     4C 03 90 AD |  if_e	jmp	#LR__0392
04e68     85 01 00 FF 
04e6c     14 14 06 F6 | 	mov	arg02, ##@LR__5252
04e70     0F 13 02 F6 | 	mov	arg01, local01
04e74     C0 BE B1 FD | 	call	#__system___string_cmp
04e78     00 FA 0D F2 | 	cmp	result1, #0 wz
04e7c     3C 03 90 AD |  if_e	jmp	#LR__0393
04e80     85 01 00 FF 
04e84     18 14 06 F6 | 	mov	arg02, ##@LR__5253
04e88     0F 13 02 F6 | 	mov	arg01, local01
04e8c     A8 BE B1 FD | 	call	#__system___string_cmp
04e90     00 FA 0D F2 | 	cmp	result1, #0 wz
04e94     2C 03 90 AD |  if_e	jmp	#LR__0394
04e98     85 01 00 FF 
04e9c     26 14 06 F6 | 	mov	arg02, ##@LR__5254
04ea0     0F 13 02 F6 | 	mov	arg01, local01
04ea4     90 BE B1 FD | 	call	#__system___string_cmp
04ea8     00 FA 0D F2 | 	cmp	result1, #0 wz
04eac     1C 03 90 AD |  if_e	jmp	#LR__0395
04eb0     85 01 00 FF 
04eb4     33 14 06 F6 | 	mov	arg02, ##@LR__5255
04eb8     0F 13 02 F6 | 	mov	arg01, local01
04ebc     78 BE B1 FD | 	call	#__system___string_cmp
04ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ec4     0C 03 90 AD |  if_e	jmp	#LR__0396
04ec8     85 01 00 FF 
04ecc     3B 14 06 F6 | 	mov	arg02, ##@LR__5256
04ed0     0F 13 02 F6 | 	mov	arg01, local01
04ed4     60 BE B1 FD | 	call	#__system___string_cmp
04ed8     00 FA 0D F2 | 	cmp	result1, #0 wz
04edc     FC 02 90 AD |  if_e	jmp	#LR__0397
04ee0     85 01 00 FF 
04ee4     40 14 06 F6 | 	mov	arg02, ##@LR__5257
04ee8     0F 13 02 F6 | 	mov	arg01, local01
04eec     48 BE B1 FD | 	call	#__system___string_cmp
04ef0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ef4     EC 02 90 AD |  if_e	jmp	#LR__0398
04ef8     85 01 00 FF 
04efc     47 14 06 F6 | 	mov	arg02, ##@LR__5258
04f00     0F 13 02 F6 | 	mov	arg01, local01
04f04     30 BE B1 FD | 	call	#__system___string_cmp
04f08     00 FA 0D F2 | 	cmp	result1, #0 wz
04f0c     DC 02 90 AD |  if_e	jmp	#LR__0399
04f10     85 01 00 FF 
04f14     4B 14 06 F6 | 	mov	arg02, ##@LR__5259
04f18     0F 13 02 F6 | 	mov	arg01, local01
04f1c     18 BE B1 FD | 	call	#__system___string_cmp
04f20     00 FA 0D F2 | 	cmp	result1, #0 wz
04f24     CC 02 90 AD |  if_e	jmp	#LR__0400
04f28     85 01 00 FF 
04f2c     51 14 06 F6 | 	mov	arg02, ##@LR__5260
04f30     0F 13 02 F6 | 	mov	arg01, local01
04f34     00 BE B1 FD | 	call	#__system___string_cmp
04f38     00 FA 0D F2 | 	cmp	result1, #0 wz
04f3c     BC 02 90 AD |  if_e	jmp	#LR__0401
04f40     85 01 00 FF 
04f44     55 14 06 F6 | 	mov	arg02, ##@LR__5261
04f48     0F 13 02 F6 | 	mov	arg01, local01
04f4c     E8 BD B1 FD | 	call	#__system___string_cmp
04f50     00 FA 0D F2 | 	cmp	result1, #0 wz
04f54     AC 02 90 AD |  if_e	jmp	#LR__0402
04f58     85 01 00 FF 
04f5c     59 14 06 F6 | 	mov	arg02, ##@LR__5262
04f60     0F 13 02 F6 | 	mov	arg01, local01
04f64     D0 BD B1 FD | 	call	#__system___string_cmp
04f68     00 FA 0D F2 | 	cmp	result1, #0 wz
04f6c     9C 02 90 AD |  if_e	jmp	#LR__0403
04f70     85 01 00 FF 
04f74     5F 14 06 F6 | 	mov	arg02, ##@LR__5263
04f78     0F 13 02 F6 | 	mov	arg01, local01
04f7c     B8 BD B1 FD | 	call	#__system___string_cmp
04f80     00 FA 0D F2 | 	cmp	result1, #0 wz
04f84     8C 02 90 AD |  if_e	jmp	#LR__0404
04f88     85 01 00 FF 
04f8c     64 14 06 F6 | 	mov	arg02, ##@LR__5264
04f90     0F 13 02 F6 | 	mov	arg01, local01
04f94     A0 BD B1 FD | 	call	#__system___string_cmp
04f98     00 FA 0D F2 | 	cmp	result1, #0 wz
04f9c     7C 02 90 AD |  if_e	jmp	#LR__0405
04fa0     85 01 00 FF 
04fa4     6B 14 06 F6 | 	mov	arg02, ##@LR__5265
04fa8     0F 13 02 F6 | 	mov	arg01, local01
04fac     88 BD B1 FD | 	call	#__system___string_cmp
04fb0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fb4     6C 02 90 AD |  if_e	jmp	#LR__0406
04fb8     85 01 00 FF 
04fbc     72 14 06 F6 | 	mov	arg02, ##@LR__5266
04fc0     0F 13 02 F6 | 	mov	arg01, local01
04fc4     70 BD B1 FD | 	call	#__system___string_cmp
04fc8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fcc     5C 02 90 AD |  if_e	jmp	#LR__0407
04fd0     85 01 00 FF 
04fd4     79 14 06 F6 | 	mov	arg02, ##@LR__5267
04fd8     0F 13 02 F6 | 	mov	arg01, local01
04fdc     58 BD B1 FD | 	call	#__system___string_cmp
04fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fe4     4C 02 90 AD |  if_e	jmp	#LR__0408
04fe8     85 01 00 FF 
04fec     80 14 06 F6 | 	mov	arg02, ##@LR__5268
04ff0     0F 13 02 F6 | 	mov	arg01, local01
04ff4     40 BD B1 FD | 	call	#__system___string_cmp
04ff8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ffc     3C 02 90 AD |  if_e	jmp	#LR__0409
05000     85 01 00 FF 
05004     85 14 06 F6 | 	mov	arg02, ##@LR__5269
05008     0F 13 02 F6 | 	mov	arg01, local01
0500c     28 BD B1 FD | 	call	#__system___string_cmp
05010     00 FA 0D F2 | 	cmp	result1, #0 wz
05014     2C 02 90 AD |  if_e	jmp	#LR__0410
05018     85 01 00 FF 
0501c     8D 14 06 F6 | 	mov	arg02, ##@LR__5270
05020     0F 13 02 F6 | 	mov	arg01, local01
05024     10 BD B1 FD | 	call	#__system___string_cmp
05028     00 FA 0D F2 | 	cmp	result1, #0 wz
0502c     1C 02 90 AD |  if_e	jmp	#LR__0411
05030     85 01 00 FF 
05034     93 14 06 F6 | 	mov	arg02, ##@LR__5271
05038     0F 13 02 F6 | 	mov	arg01, local01
0503c     F8 BC B1 FD | 	call	#__system___string_cmp
05040     00 FA 0D F2 | 	cmp	result1, #0 wz
05044     0C 02 90 AD |  if_e	jmp	#LR__0412
05048     85 01 00 FF 
0504c     9A 14 06 F6 | 	mov	arg02, ##@LR__5272
05050     0F 13 02 F6 | 	mov	arg01, local01
05054     E0 BC B1 FD | 	call	#__system___string_cmp
05058     00 FA 0D F2 | 	cmp	result1, #0 wz
0505c     FC 01 90 AD |  if_e	jmp	#LR__0413
05060     85 01 00 FF 
05064     A0 14 06 F6 | 	mov	arg02, ##@LR__5273
05068     0F 13 02 F6 | 	mov	arg01, local01
0506c     C8 BC B1 FD | 	call	#__system___string_cmp
05070     00 FA 0D F2 | 	cmp	result1, #0 wz
05074     EC 01 90 AD |  if_e	jmp	#LR__0414
05078     85 01 00 FF 
0507c     A6 14 06 F6 | 	mov	arg02, ##@LR__5274
05080     0F 13 02 F6 | 	mov	arg01, local01
05084     B0 BC B1 FD | 	call	#__system___string_cmp
05088     00 FA 0D F2 | 	cmp	result1, #0 wz
0508c     DC 01 90 AD |  if_e	jmp	#LR__0415
05090     85 01 00 FF 
05094     AA 14 06 F6 | 	mov	arg02, ##@LR__5275
05098     0F 13 02 F6 | 	mov	arg01, local01
0509c     98 BC B1 FD | 	call	#__system___string_cmp
050a0     00 FA 0D F2 | 	cmp	result1, #0 wz
050a4     CC 01 90 AD |  if_e	jmp	#LR__0416
050a8     85 01 00 FF 
050ac     AE 14 06 F6 | 	mov	arg02, ##@LR__5276
050b0     0F 13 02 F6 | 	mov	arg01, local01
050b4     80 BC B1 FD | 	call	#__system___string_cmp
050b8     00 FA 0D F2 | 	cmp	result1, #0 wz
050bc     BC 01 90 AD |  if_e	jmp	#LR__0417
050c0     85 01 00 FF 
050c4     B2 14 06 F6 | 	mov	arg02, ##@LR__5277
050c8     0F 13 02 F6 | 	mov	arg01, local01
050cc     68 BC B1 FD | 	call	#__system___string_cmp
050d0     00 FA 0D F2 | 	cmp	result1, #0 wz
050d4     AC 01 90 AD |  if_e	jmp	#LR__0418
050d8     85 01 00 FF 
050dc     B8 14 06 F6 | 	mov	arg02, ##@LR__5278
050e0     0F 13 02 F6 | 	mov	arg01, local01
050e4     50 BC B1 FD | 	call	#__system___string_cmp
050e8     00 FA 0D F2 | 	cmp	result1, #0 wz
050ec     9C 01 90 AD |  if_e	jmp	#LR__0419
050f0     85 01 00 FF 
050f4     BE 14 06 F6 | 	mov	arg02, ##@LR__5279
050f8     0F 13 02 F6 | 	mov	arg01, local01
050fc     38 BC B1 FD | 	call	#__system___string_cmp
05100     00 FA 0D F2 | 	cmp	result1, #0 wz
05104     8C 01 90 AD |  if_e	jmp	#LR__0420
05108     85 01 00 FF 
0510c     C3 14 06 F6 | 	mov	arg02, ##@LR__5280
05110     0F 13 02 F6 | 	mov	arg01, local01
05114     20 BC B1 FD | 	call	#__system___string_cmp
05118     00 FA 0D F2 | 	cmp	result1, #0 wz
0511c     7C 01 90 AD |  if_e	jmp	#LR__0421
05120     85 01 00 FF 
05124     C7 14 06 F6 | 	mov	arg02, ##@LR__5281
05128     0F 13 02 F6 | 	mov	arg01, local01
0512c     08 BC B1 FD | 	call	#__system___string_cmp
05130     00 FA 0D F2 | 	cmp	result1, #0 wz
05134     6C 01 90 AD |  if_e	jmp	#LR__0422
05138     85 01 00 FF 
0513c     CB 14 06 F6 | 	mov	arg02, ##@LR__5282
05140     0F 13 02 F6 | 	mov	arg01, local01
05144     F0 BB B1 FD | 	call	#__system___string_cmp
05148     00 FA 0D F2 | 	cmp	result1, #0 wz
0514c     5C 01 90 AD |  if_e	jmp	#LR__0423
05150     60 01 90 FD | 	jmp	#LR__0424
05154                 | LR__0380
05154     9E FA 05 F6 | 	mov	result1, #158
05158     5C 01 90 FD | 	jmp	#LR__0425
0515c                 | LR__0381
0515c     85 FA 05 F6 | 	mov	result1, #133
05160     54 01 90 FD | 	jmp	#LR__0425
05164                 | LR__0382
05164     9B FA 05 F6 | 	mov	result1, #155
05168     4C 01 90 FD | 	jmp	#LR__0425
0516c                 | LR__0383
0516c     9B FA 05 F6 | 	mov	result1, #155
05170     44 01 90 FD | 	jmp	#LR__0425
05174                 | LR__0384
05174     A7 FA 05 F6 | 	mov	result1, #167
05178     3C 01 90 FD | 	jmp	#LR__0425
0517c                 | LR__0385
0517c     84 FA 05 F6 | 	mov	result1, #132
05180     34 01 90 FD | 	jmp	#LR__0425
05184                 | LR__0386
05184     86 FA 05 F6 | 	mov	result1, #134
05188     2C 01 90 FD | 	jmp	#LR__0425
0518c                 | LR__0387
0518c     A2 FA 05 F6 | 	mov	result1, #162
05190     24 01 90 FD | 	jmp	#LR__0425
05194                 | LR__0388
05194     9F FA 05 F6 | 	mov	result1, #159
05198     1C 01 90 FD | 	jmp	#LR__0425
0519c                 | LR__0389
0519c     82 FA 05 F6 | 	mov	result1, #130
051a0     14 01 90 FD | 	jmp	#LR__0425
051a4                 | LR__0390
051a4     99 FA 05 F6 | 	mov	result1, #153
051a8     0C 01 90 FD | 	jmp	#LR__0425
051ac                 | LR__0391
051ac     9C FA 05 F6 | 	mov	result1, #156
051b0     04 01 90 FD | 	jmp	#LR__0425
051b4                 | LR__0392
051b4     6F FA 05 F6 | 	mov	result1, #111
051b8     FC 00 90 FD | 	jmp	#LR__0425
051bc                 | LR__0393
051bc     6F FA 05 F6 | 	mov	result1, #111
051c0     F4 00 90 FD | 	jmp	#LR__0425
051c4                 | LR__0394
051c4     93 FA 05 F6 | 	mov	result1, #147
051c8     EC 00 90 FD | 	jmp	#LR__0425
051cc                 | LR__0395
051cc     94 FA 05 F6 | 	mov	result1, #148
051d0     E4 00 90 FD | 	jmp	#LR__0425
051d4                 | LR__0396
051d4     62 FA 05 F6 | 	mov	result1, #98
051d8     DC 00 90 FD | 	jmp	#LR__0425
051dc                 | LR__0397
051dc     A3 FA 05 F6 | 	mov	result1, #163
051e0     D4 00 90 FD | 	jmp	#LR__0425
051e4                 | LR__0398
051e4     9D FA 05 F6 | 	mov	result1, #157
051e8     CC 00 90 FD | 	jmp	#LR__0425
051ec                 | LR__0399
051ec     8A FA 05 F6 | 	mov	result1, #138
051f0     C4 00 90 FD | 	jmp	#LR__0425
051f4                 | LR__0400
051f4     A4 FA 05 F6 | 	mov	result1, #164
051f8     BC 00 90 FD | 	jmp	#LR__0425
051fc                 | LR__0401
051fc     A8 FA 05 F6 | 	mov	result1, #168
05200     B4 00 90 FD | 	jmp	#LR__0425
05204                 | LR__0402
05204     AD FA 05 F6 | 	mov	result1, #173
05208     AC 00 90 FD | 	jmp	#LR__0425
0520c                 | LR__0403
0520c     9A FA 05 F6 | 	mov	result1, #154
05210     A4 00 90 FD | 	jmp	#LR__0425
05214                 | LR__0404
05214     A6 FA 05 F6 | 	mov	result1, #166
05218     9C 00 90 FD | 	jmp	#LR__0425
0521c                 | LR__0405
0521c     66 FA 05 F6 | 	mov	result1, #102
05220     94 00 90 FD | 	jmp	#LR__0425
05224                 | LR__0406
05224     67 FA 05 F6 | 	mov	result1, #103
05228     8C 00 90 FD | 	jmp	#LR__0425
0522c                 | LR__0407
0522c     64 FA 05 F6 | 	mov	result1, #100
05230     84 00 90 FD | 	jmp	#LR__0425
05234                 | LR__0408
05234     65 FA 05 F6 | 	mov	result1, #101
05238     7C 00 90 FD | 	jmp	#LR__0425
0523c                 | LR__0409
0523c     98 FA 05 F6 | 	mov	result1, #152
05240     74 00 90 FD | 	jmp	#LR__0425
05244                 | LR__0410
05244     7B FA 05 F6 | 	mov	result1, #123
05248     6C 00 90 FD | 	jmp	#LR__0425
0524c                 | LR__0411
0524c     76 FA 05 F6 | 	mov	result1, #118
05250     64 00 90 FD | 	jmp	#LR__0425
05254                 | LR__0412
05254     A5 FA 05 F6 | 	mov	result1, #165
05258     5C 00 90 FD | 	jmp	#LR__0425
0525c                 | LR__0413
0525c     7A FA 05 F6 | 	mov	result1, #122
05260     54 00 90 FD | 	jmp	#LR__0425
05264                 | LR__0414
05264     BF FA 05 F6 | 	mov	result1, #191
05268     4C 00 90 FD | 	jmp	#LR__0425
0526c                 | LR__0415
0526c     54 FA 05 F6 | 	mov	result1, #84
05270     44 00 90 FD | 	jmp	#LR__0425
05274                 | LR__0416
05274     6B FA 05 F6 | 	mov	result1, #107
05278     3C 00 90 FD | 	jmp	#LR__0425
0527c                 | LR__0417
0527c     87 FA 05 F6 | 	mov	result1, #135
05280     34 00 90 FD | 	jmp	#LR__0425
05284                 | LR__0418
05284     6A FA 05 F6 | 	mov	result1, #106
05288     2C 00 90 FD | 	jmp	#LR__0425
0528c                 | LR__0419
0528c     6E FA 05 F6 | 	mov	result1, #110
05290     24 00 90 FD | 	jmp	#LR__0425
05294                 | LR__0420
05294     A1 FA 05 F6 | 	mov	result1, #161
05298     1C 00 90 FD | 	jmp	#LR__0425
0529c                 | LR__0421
0529c     83 FA 05 F6 | 	mov	result1, #131
052a0     14 00 90 FD | 	jmp	#LR__0425
052a4                 | LR__0422
052a4     A0 FA 05 F6 | 	mov	result1, #160
052a8     0C 00 90 FD | 	jmp	#LR__0425
052ac                 | LR__0423
052ac     9B FA 05 F6 | 	mov	result1, #155
052b0     04 00 90 FD | 	jmp	#LR__0425
052b4                 | LR__0424
052b4     00 FA 05 F6 | 	mov	result1, #0
052b8                 | LR__0425
052b8     A7 F0 03 F6 | 	mov	ptra, fp
052bc     B2 00 A0 FD | 	call	#popregs_
052c0                 | _isfunction_ret
052c0     2D 00 64 FD | 	ret
052c4                 | 
052c4                 | ' 
052c4                 | ' function isname(s as string) as boolean
052c4                 | _isname
052c4     0D 4A 05 F6 | 	mov	COUNT_, #13
052c8     A8 00 A0 FD | 	call	#pushregs_
052cc     09 1F 02 F6 | 	mov	local01, arg01
052d0     09 21 02 F6 | 	mov	local02, arg01
052d4     97 06 48 FB | 	callpa	#(@LR__0431-@LR__0430)>>2,fcache_load_ptr_
052d8                 | LR__0430
052d8     10 FB C9 FA | 	rdbyte	result1, local02 wz
052dc     01 20 06 51 |  if_ne	add	local02, #1
052e0     F4 FF 9F 5D |  if_ne	jmp	#LR__0430
052e4                 | LR__0431
052e4     09 21 82 F1 | 	sub	local02, arg01
052e8     10 FB 01 F6 | 	mov	result1, local02
052ec     FD 22 0A F6 | 	mov	local03, result1 wz
052f0     00 FA 05 A6 |  if_e	mov	result1, #0
052f4     34 02 90 AD |  if_e	jmp	#LR__0443
052f8     0F 13 02 F6 | 	mov	arg01, local01
052fc     01 14 06 F6 | 	mov	arg02, #1
05300     01 16 06 F6 | 	mov	arg03, #1
05304     9C DB B1 FD | 	call	#__system__Mid_S
05308     FD 24 02 F6 | 	mov	local04, result1
0530c                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
0530c     85 01 00 FF 
05310     D2 14 06 F6 | 	mov	arg02, ##@LR__5283
05314     12 13 02 F6 | 	mov	arg01, local04
05318     1C BA B1 FD | 	call	#__system___string_cmp
0531c     00 FA 55 F2 | 	cmps	result1, #0 wc
05320     18 00 90 CD |  if_b	jmp	#LR__0432
05324     85 01 00 FF 
05328     D4 14 06 F6 | 	mov	arg02, ##@LR__5284
0532c     12 13 02 F6 | 	mov	arg01, local04
05330     04 BA B1 FD | 	call	#__system___string_cmp
05334     01 FA 55 F2 | 	cmps	result1, #1 wc
05338     1C 00 90 CD |  if_b	jmp	#LR__0433
0533c                 | LR__0432
0533c     85 01 00 FF 
05340     D6 14 06 F6 | 	mov	arg02, ##@LR__5285
05344     12 13 02 F6 | 	mov	arg01, local04
05348     EC B9 B1 FD | 	call	#__system___string_cmp
0534c     00 FA 0D F2 | 	cmp	result1, #0 wz
05350     00 FA 05 56 |  if_ne	mov	result1, #0
05354     D4 01 90 5D |  if_ne	jmp	#LR__0443
05358                 | LR__0433
05358                 | ' if l>2 then 
05358     03 22 56 F2 | 	cmps	local03, #3 wc
0535c     C8 01 90 CD |  if_b	jmp	#LR__0442
05360                 | '   for i=2 to l
05360     02 26 06 F6 | 	mov	local05, #2
05364     11 29 02 F6 | 	mov	local06, local03
05368     01 28 06 F1 | 	add	local06, #1
0536c                 | LR__0434
0536c     14 27 52 F2 | 	cmps	local05, local06 wc
05370     B4 01 90 3D |  if_ae	jmp	#LR__0441
05374     0F 13 02 F6 | 	mov	arg01, local01
05378     13 15 02 F6 | 	mov	arg02, local05
0537c     01 16 06 F6 | 	mov	arg03, #1
05380     20 DB B1 FD | 	call	#__system__Mid_S
05384     FD 24 02 F6 | 	mov	local04, result1
05388                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
05388     11 27 52 F2 | 	cmps	local05, local03 wc
0538c     9C 00 90 3D |  if_ae	jmp	#LR__0437
05390     85 01 00 FF 
05394     D8 14 06 F6 | 	mov	arg02, ##@LR__5286
05398     12 13 02 F6 | 	mov	arg01, local04
0539c     98 B9 B1 FD | 	call	#__system___string_cmp
053a0     00 FA 55 F2 | 	cmps	result1, #0 wc
053a4     18 00 90 CD |  if_b	jmp	#LR__0435
053a8     85 01 00 FF 
053ac     DA 14 06 F6 | 	mov	arg02, ##@LR__5287
053b0     12 13 02 F6 | 	mov	arg01, local04
053b4     80 B9 B1 FD | 	call	#__system___string_cmp
053b8     01 FA 55 F2 | 	cmps	result1, #1 wc
053bc     6C 00 90 CD |  if_b	jmp	#LR__0437
053c0                 | LR__0435
053c0     85 01 00 FF 
053c4     DC 14 06 F6 | 	mov	arg02, ##@LR__5288
053c8     12 13 02 F6 | 	mov	arg01, local04
053cc     68 B9 B1 FD | 	call	#__system___string_cmp
053d0     00 FA 55 F2 | 	cmps	result1, #0 wc
053d4     18 00 90 CD |  if_b	jmp	#LR__0436
053d8     85 01 00 FF 
053dc     DE 14 06 F6 | 	mov	arg02, ##@LR__5289
053e0     12 13 02 F6 | 	mov	arg01, local04
053e4     50 B9 B1 FD | 	call	#__system___string_cmp
053e8     01 FA 55 F2 | 	cmps	result1, #1 wc
053ec     3C 00 90 CD |  if_b	jmp	#LR__0437
053f0                 | LR__0436
053f0     85 01 00 FF 
053f4     E0 2A 06 F6 | 	mov	local07, ##@LR__5290
053f8     12 13 02 F6 | 	mov	arg01, local04
053fc     15 15 02 F6 | 	mov	arg02, local07
05400     34 B9 B1 FD | 	call	#__system___string_cmp
05404     00 FA 0D F2 | 	cmp	result1, #0 wz
05408     20 00 90 AD |  if_e	jmp	#LR__0437
0540c     85 01 00 FF 
05410     E2 2C 06 F6 | 	mov	local08, ##@LR__5291
05414     12 13 02 F6 | 	mov	arg01, local04
05418     16 15 02 F6 | 	mov	arg02, local08
0541c     18 B9 B1 FD | 	call	#__system___string_cmp
05420     FD 2E 0A F6 | 	mov	local09, result1 wz
05424     00 FA 05 56 |  if_ne	mov	result1, #0
05428     00 01 90 5D |  if_ne	jmp	#LR__0443
0542c                 | LR__0437
0542c                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
0542c     11 27 0A F2 | 	cmp	local05, local03 wz
05430     EC 00 90 5D |  if_ne	jmp	#LR__0440
05434     85 01 00 FF 
05438     E4 30 06 F6 | 	mov	local10, ##@LR__5292
0543c     12 13 02 F6 | 	mov	arg01, local04
05440     18 15 02 F6 | 	mov	arg02, local10
05444     F0 B8 B1 FD | 	call	#__system___string_cmp
05448     FD 32 02 F6 | 	mov	local11, result1
0544c     00 32 56 F2 | 	cmps	local11, #0 wc
05450     1C 00 90 CD |  if_b	jmp	#LR__0438
05454     85 01 00 FF 
05458     E6 14 06 F6 | 	mov	arg02, ##@LR__5293
0545c     12 13 02 F6 | 	mov	arg01, local04
05460     D4 B8 B1 FD | 	call	#__system___string_cmp
05464     FD 30 02 F6 | 	mov	local10, result1
05468     01 30 56 F2 | 	cmps	local10, #1 wc
0546c     B0 00 90 CD |  if_b	jmp	#LR__0440
05470                 | LR__0438
05470     85 01 00 FF 
05474     E8 14 06 F6 | 	mov	arg02, ##@LR__5294
05478     12 13 02 F6 | 	mov	arg01, local04
0547c     B8 B8 B1 FD | 	call	#__system___string_cmp
05480     00 FA 55 F2 | 	cmps	result1, #0 wc
05484     1C 00 90 CD |  if_b	jmp	#LR__0439
05488     85 01 00 FF 
0548c     EA 2E 06 F6 | 	mov	local09, ##@LR__5295
05490     12 13 02 F6 | 	mov	arg01, local04
05494     17 15 02 F6 | 	mov	arg02, local09
05498     9C B8 B1 FD | 	call	#__system___string_cmp
0549c     01 FA 55 F2 | 	cmps	result1, #1 wc
054a0     7C 00 90 CD |  if_b	jmp	#LR__0440
054a4                 | LR__0439
054a4     85 01 00 FF 
054a8     EC 2E 06 F6 | 	mov	local09, ##@LR__5296
054ac     12 13 02 F6 | 	mov	arg01, local04
054b0     17 15 02 F6 | 	mov	arg02, local09
054b4     80 B8 B1 FD | 	call	#__system___string_cmp
054b8     00 FA 4D F2 | 	cmps	result1, #0 wz
054bc     60 00 90 AD |  if_e	jmp	#LR__0440
054c0     85 01 00 FF 
054c4     EE 2C 06 F6 | 	mov	local08, ##@LR__5297
054c8     12 13 02 F6 | 	mov	arg01, local04
054cc     16 15 02 F6 | 	mov	arg02, local08
054d0     64 B8 B1 FD | 	call	#__system___string_cmp
054d4     FD 2E 0A F6 | 	mov	local09, result1 wz
054d8     44 00 90 AD |  if_e	jmp	#LR__0440
054dc     85 01 00 FF 
054e0     F0 34 06 F6 | 	mov	local12, ##@LR__5298
054e4     1A 2D 02 F6 | 	mov	local08, local12
054e8     12 13 02 F6 | 	mov	arg01, local04
054ec     16 15 02 F6 | 	mov	arg02, local08
054f0     44 B8 B1 FD | 	call	#__system___string_cmp
054f4     FD 2A 0A F6 | 	mov	local07, result1 wz
054f8     24 00 90 AD |  if_e	jmp	#LR__0440
054fc     85 01 00 FF 
05500     F2 36 06 F6 | 	mov	local13, ##@LR__5299
05504     1B 35 02 F6 | 	mov	local12, local13
05508     12 13 02 F6 | 	mov	arg01, local04
0550c     1A 15 02 F6 | 	mov	arg02, local12
05510     24 B8 B1 FD | 	call	#__system___string_cmp
05514     FD 2C 0A F6 | 	mov	local08, result1 wz
05518     00 FA 05 56 |  if_ne	mov	result1, #0
0551c     0C 00 90 5D |  if_ne	jmp	#LR__0443
05520                 | LR__0440
05520     01 26 06 F1 | 	add	local05, #1
05524     44 FE 9F FD | 	jmp	#LR__0434
05528                 | LR__0441
05528                 | LR__0442
05528                 | ' return true
05528     01 FA 65 F6 | 	neg	result1, #1
0552c                 | LR__0443
0552c     A7 F0 03 F6 | 	mov	ptra, fp
05530     B2 00 A0 FD | 	call	#popregs_
05534                 | _isname_ret
05534     2D 00 64 FD | 	ret
05538                 | 
05538                 | ' 
05538                 | ' function isnum(s as string) as boolean
05538                 | _isnum
05538     0D 4A 05 F6 | 	mov	COUNT_, #13
0553c     A8 00 A0 FD | 	call	#pushregs_
05540     09 1F 02 F6 | 	mov	local01, arg01
05544     00 20 06 F6 | 	mov	local02, #0
05548     00 22 06 F6 | 	mov	local03, #0
0554c     0F 13 02 F6 | 	mov	arg01, local01
05550     09 25 02 F6 | 	mov	local04, arg01
05554     97 06 48 FB | 	callpa	#(@LR__0451-@LR__0450)>>2,fcache_load_ptr_
05558                 | LR__0450
05558     12 FB C9 FA | 	rdbyte	result1, local04 wz
0555c     01 24 06 51 |  if_ne	add	local04, #1
05560     F4 FF 9F 5D |  if_ne	jmp	#LR__0450
05564                 | LR__0451
05564     09 25 82 F1 | 	sub	local04, arg01
05568     12 FB 01 F6 | 	mov	result1, local04
0556c     FD 26 0A F6 | 	mov	local05, result1 wz
05570     00 FA 05 A6 |  if_e	mov	result1, #0
05574     8C 02 90 AD |  if_e	jmp	#LR__0462
05578     0F 13 02 F6 | 	mov	arg01, local01
0557c     01 14 06 F6 | 	mov	arg02, #1
05580     01 16 06 F6 | 	mov	arg03, #1
05584     1C D9 B1 FD | 	call	#__system__Mid_S
05588     FD 28 02 F6 | 	mov	local06, result1
0558c                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
0558c     85 01 00 FF 
05590     F4 14 06 F6 | 	mov	arg02, ##@LR__5300
05594     14 13 02 F6 | 	mov	arg01, local06
05598     9C B7 B1 FD | 	call	#__system___string_cmp
0559c     00 FA 55 F2 | 	cmps	result1, #0 wc
055a0     18 00 90 CD |  if_b	jmp	#LR__0452
055a4     85 01 00 FF 
055a8     F6 14 06 F6 | 	mov	arg02, ##@LR__5301
055ac     14 13 02 F6 | 	mov	arg01, local06
055b0     84 B7 B1 FD | 	call	#__system___string_cmp
055b4     01 FA 55 F2 | 	cmps	result1, #1 wc
055b8     78 00 90 CD |  if_b	jmp	#LR__0453
055bc                 | LR__0452
055bc     85 01 00 FF 
055c0     F8 14 06 F6 | 	mov	arg02, ##@LR__5302
055c4     14 13 02 F6 | 	mov	arg01, local06
055c8     6C B7 B1 FD | 	call	#__system___string_cmp
055cc     00 FA 0D F2 | 	cmp	result1, #0 wz
055d0     60 00 90 AD |  if_e	jmp	#LR__0453
055d4     85 01 00 FF 
055d8     FA 2A 06 F6 | 	mov	local07, ##@LR__5303
055dc     14 13 02 F6 | 	mov	arg01, local06
055e0     15 15 02 F6 | 	mov	arg02, local07
055e4     50 B7 B1 FD | 	call	#__system___string_cmp
055e8     00 FA 0D F2 | 	cmp	result1, #0 wz
055ec     44 00 90 AD |  if_e	jmp	#LR__0453
055f0     85 01 00 FF 
055f4     FC 2C 06 F6 | 	mov	local08, ##@LR__5304
055f8     16 2B 02 F6 | 	mov	local07, local08
055fc     14 13 02 F6 | 	mov	arg01, local06
05600     15 15 02 F6 | 	mov	arg02, local07
05604     30 B7 B1 FD | 	call	#__system___string_cmp
05608     00 FA 4D F2 | 	cmps	result1, #0 wz
0560c     24 00 90 AD |  if_e	jmp	#LR__0453
05610     85 01 00 FF 
05614     FE 2E 06 F6 | 	mov	local09, ##@LR__5305
05618     17 2D 02 F6 | 	mov	local08, local09
0561c     14 13 02 F6 | 	mov	arg01, local06
05620     16 15 02 F6 | 	mov	arg02, local08
05624     10 B7 B1 FD | 	call	#__system___string_cmp
05628     FD 2A 0A F6 | 	mov	local07, result1 wz
0562c     00 FA 05 56 |  if_ne	mov	result1, #0
05630     D0 01 90 5D |  if_ne	jmp	#LR__0462
05634                 | LR__0453
05634                 | ' if m$="." then ds=1
05634     85 01 00 FF 
05638     00 15 06 F6 | 	mov	arg02, ##@LR__5306
0563c     14 13 02 F6 | 	mov	arg01, local06
05640     F4 B6 B1 FD | 	call	#__system___string_cmp
05644     00 FA 0D F2 | 	cmp	result1, #0 wz
05648     01 20 06 A6 |  if_e	mov	local02, #1
0564c                 | ' if l>1 then 
0564c     02 26 56 F2 | 	cmps	local05, #2 wc
05650     AC 01 90 CD |  if_b	jmp	#LR__0461
05654                 | '   for i=2 to l
05654     02 30 06 F6 | 	mov	local10, #2
05658     13 33 02 F6 | 	mov	local11, local05
0565c     01 32 06 F1 | 	add	local11, #1
05660                 | LR__0454
05660     19 31 52 F2 | 	cmps	local10, local11 wc
05664     98 01 90 3D |  if_ae	jmp	#LR__0460
05668     0F 13 02 F6 | 	mov	arg01, local01
0566c     18 15 02 F6 | 	mov	arg02, local10
05670     01 16 06 F6 | 	mov	arg03, #1
05674     2C D8 B1 FD | 	call	#__system__Mid_S
05678     FD 28 02 F6 | 	mov	local06, result1
0567c                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
0567c     85 01 00 FF 
05680     02 15 06 F6 | 	mov	arg02, ##@LR__5307
05684     14 13 02 F6 | 	mov	arg01, local06
05688     AC B6 B1 FD | 	call	#__system___string_cmp
0568c     00 FA 55 F2 | 	cmps	result1, #0 wc
05690     18 00 90 CD |  if_b	jmp	#LR__0455
05694     85 01 00 FF 
05698     04 15 06 F6 | 	mov	arg02, ##@LR__5308
0569c     14 13 02 F6 | 	mov	arg01, local06
056a0     94 B6 B1 FD | 	call	#__system___string_cmp
056a4     01 FA 55 F2 | 	cmps	result1, #1 wc
056a8     98 00 90 CD |  if_b	jmp	#LR__0456
056ac                 | LR__0455
056ac     85 01 00 FF 
056b0     06 15 06 F6 | 	mov	arg02, ##@LR__5309
056b4     14 13 02 F6 | 	mov	arg01, local06
056b8     7C B6 B1 FD | 	call	#__system___string_cmp
056bc     00 FA 0D F2 | 	cmp	result1, #0 wz
056c0     80 00 90 AD |  if_e	jmp	#LR__0456
056c4     85 01 00 FF 
056c8     08 2B 06 F6 | 	mov	local07, ##@LR__5310
056cc     14 13 02 F6 | 	mov	arg01, local06
056d0     15 15 02 F6 | 	mov	arg02, local07
056d4     60 B6 B1 FD | 	call	#__system___string_cmp
056d8     00 FA 4D F2 | 	cmps	result1, #0 wz
056dc     64 00 90 AD |  if_e	jmp	#LR__0456
056e0     85 01 00 FF 
056e4     0A 2D 06 F6 | 	mov	local08, ##@LR__5311
056e8     16 2B 02 F6 | 	mov	local07, local08
056ec     14 13 02 F6 | 	mov	arg01, local06
056f0     15 15 02 F6 | 	mov	arg02, local07
056f4     40 B6 B1 FD | 	call	#__system___string_cmp
056f8     FD 34 0A F6 | 	mov	local12, result1 wz
056fc     44 00 90 AD |  if_e	jmp	#LR__0456
05700     85 01 00 FF 
05704     0C 2F 06 F6 | 	mov	local09, ##@LR__5312
05708     17 2D 02 F6 | 	mov	local08, local09
0570c     14 13 02 F6 | 	mov	arg01, local06
05710     16 15 02 F6 | 	mov	arg02, local08
05714     20 B6 B1 FD | 	call	#__system___string_cmp
05718     FD 2A 0A F6 | 	mov	local07, result1 wz
0571c     24 00 90 AD |  if_e	jmp	#LR__0456
05720     85 01 00 FF 
05724     0E 37 06 F6 | 	mov	local13, ##@LR__5313
05728     1B 2F 02 F6 | 	mov	local09, local13
0572c     14 13 02 F6 | 	mov	arg01, local06
05730     17 15 02 F6 | 	mov	arg02, local09
05734     00 B6 B1 FD | 	call	#__system___string_cmp
05738     FD 2C 0A F6 | 	mov	local08, result1 wz
0573c     00 FA 05 56 |  if_ne	mov	result1, #0
05740     C0 00 90 5D |  if_ne	jmp	#LR__0462
05744                 | LR__0456
05744                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
05744     85 01 00 FF 
05748     10 15 06 F6 | 	mov	arg02, ##@LR__5314
0574c     14 13 02 F6 | 	mov	arg01, local06
05750     E4 B5 B1 FD | 	call	#__system___string_cmp
05754     00 FA 0D F2 | 	cmp	result1, #0 wz
05758     38 00 90 5D |  if_ne	jmp	#LR__0457
0575c     18 15 02 F6 | 	mov	arg02, local10
05760     01 14 86 F1 | 	sub	arg02, #1
05764     0F 13 02 F6 | 	mov	arg01, local01
05768     01 16 06 F6 | 	mov	arg03, #1
0576c     34 D7 B1 FD | 	call	#__system__Mid_S
05770     FD 12 02 F6 | 	mov	arg01, result1
05774     24 D9 B1 FD | 	call	#__system__LCase_S
05778     FD 12 02 F6 | 	mov	arg01, result1
0577c     85 01 00 FF 
05780     12 15 06 F6 | 	mov	arg02, ##@LR__5315
05784     B0 B5 B1 FD | 	call	#__system___string_cmp
05788     00 FA 0D F2 | 	cmp	result1, #0 wz
0578c     00 FA 05 56 |  if_ne	mov	result1, #0
05790     70 00 90 5D |  if_ne	jmp	#LR__0462
05794                 | LR__0457
05794                 | '     if m$="." then ds+=1: if ds>1 then return false
05794     85 01 00 FF 
05798     14 15 06 F6 | 	mov	arg02, ##@LR__5316
0579c     14 13 02 F6 | 	mov	arg01, local06
057a0     94 B5 B1 FD | 	call	#__system___string_cmp
057a4     00 FA 0D F2 | 	cmp	result1, #0 wz
057a8     01 20 06 A1 |  if_e	add	local02, #1
057ac     02 20 56 A2 |  if_e	cmps	local02, #2 wc
057b0     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
057b4     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0462
057b8                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
057b8     85 01 00 FF 
057bc     16 15 06 F6 | 	mov	arg02, ##@LR__5317
057c0     14 13 02 F6 | 	mov	arg01, local06
057c4     70 B5 B1 FD | 	call	#__system___string_cmp
057c8     00 FA 4D F2 | 	cmps	result1, #0 wz
057cc     18 00 90 AD |  if_e	jmp	#LR__0458
057d0     85 01 00 FF 
057d4     18 15 06 F6 | 	mov	arg02, ##@LR__5318
057d8     14 13 02 F6 | 	mov	arg01, local06
057dc     58 B5 B1 FD | 	call	#__system___string_cmp
057e0     00 FA 4D F2 | 	cmps	result1, #0 wz
057e4     10 00 90 5D |  if_ne	jmp	#LR__0459
057e8                 | LR__0458
057e8     01 22 06 F1 | 	add	local03, #1
057ec     02 22 56 F2 | 	cmps	local03, #2 wc
057f0     00 FA 05 36 |  if_ae	mov	result1, #0
057f4     0C 00 90 3D |  if_ae	jmp	#LR__0462
057f8                 | LR__0459
057f8     01 30 06 F1 | 	add	local10, #1
057fc     60 FE 9F FD | 	jmp	#LR__0454
05800                 | LR__0460
05800                 | LR__0461
05800                 | ' return true
05800     01 FA 65 F6 | 	neg	result1, #1
05804                 | LR__0462
05804     A7 F0 03 F6 | 	mov	ptra, fp
05808     B2 00 A0 FD | 	call	#popregs_
0580c                 | _isnum_ret
0580c     2D 00 64 FD | 	ret
05810                 | 
05810                 | '   
05810                 | ' function isint(s as string) as boolean
05810                 | _isint
05810     05 4A 05 F6 | 	mov	COUNT_, #5
05814     A8 00 A0 FD | 	call	#pushregs_
05818     09 1F 02 F6 | 	mov	local01, arg01
0581c     09 21 02 F6 | 	mov	local02, arg01
05820     97 06 48 FB | 	callpa	#(@LR__0471-@LR__0470)>>2,fcache_load_ptr_
05824                 | LR__0470
05824     10 FB C9 FA | 	rdbyte	result1, local02 wz
05828     01 20 06 51 |  if_ne	add	local02, #1
0582c     F4 FF 9F 5D |  if_ne	jmp	#LR__0470
05830                 | LR__0471
05830     09 21 82 F1 | 	sub	local02, arg01
05834     10 FB 01 F6 | 	mov	result1, local02
05838     FD 20 0A F6 | 	mov	local02, result1 wz
0583c     00 FA 05 A6 |  if_e	mov	result1, #0
05840     18 01 90 AD |  if_e	jmp	#LR__0479
05844     0F 13 02 F6 | 	mov	arg01, local01
05848     01 14 06 F6 | 	mov	arg02, #1
0584c     01 16 06 F6 | 	mov	arg03, #1
05850     50 D6 B1 FD | 	call	#__system__Mid_S
05854     FD 22 02 F6 | 	mov	local03, result1
05858                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
05858     85 01 00 FF 
0585c     1A 15 06 F6 | 	mov	arg02, ##@LR__5319
05860     11 13 02 F6 | 	mov	arg01, local03
05864     D0 B4 B1 FD | 	call	#__system___string_cmp
05868     00 FA 55 F2 | 	cmps	result1, #0 wc
0586c     18 00 90 CD |  if_b	jmp	#LR__0472
05870     85 01 00 FF 
05874     1C 15 06 F6 | 	mov	arg02, ##@LR__5320
05878     11 13 02 F6 | 	mov	arg01, local03
0587c     B8 B4 B1 FD | 	call	#__system___string_cmp
05880     01 FA 55 F2 | 	cmps	result1, #1 wc
05884     4C 00 90 CD |  if_b	jmp	#LR__0473
05888                 | LR__0472
05888     85 01 00 FF 
0588c     1E 15 06 F6 | 	mov	arg02, ##@LR__5321
05890     11 13 02 F6 | 	mov	arg01, local03
05894     A0 B4 B1 FD | 	call	#__system___string_cmp
05898     00 FA 0D F2 | 	cmp	result1, #0 wz
0589c     34 00 90 AD |  if_e	jmp	#LR__0473
058a0     85 01 00 FF 
058a4     20 15 06 F6 | 	mov	arg02, ##@LR__5322
058a8     11 13 02 F6 | 	mov	arg01, local03
058ac     88 B4 B1 FD | 	call	#__system___string_cmp
058b0     00 FA 0D F2 | 	cmp	result1, #0 wz
058b4     1C 00 90 AD |  if_e	jmp	#LR__0473
058b8     85 01 00 FF 
058bc     22 15 06 F6 | 	mov	arg02, ##@LR__5323
058c0     11 13 02 F6 | 	mov	arg01, local03
058c4     70 B4 B1 FD | 	call	#__system___string_cmp
058c8     00 FA 0D F2 | 	cmp	result1, #0 wz
058cc     00 FA 05 56 |  if_ne	mov	result1, #0
058d0     88 00 90 5D |  if_ne	jmp	#LR__0479
058d4                 | LR__0473
058d4                 | ' 
058d4                 | ' if l>1 then 
058d4     02 20 56 F2 | 	cmps	local02, #2 wc
058d8     7C 00 90 CD |  if_b	jmp	#LR__0478
058dc                 | '   for i=2 to l
058dc     02 24 06 F6 | 	mov	local04, #2
058e0     10 27 02 F6 | 	mov	local05, local02
058e4     01 26 06 F1 | 	add	local05, #1
058e8                 | LR__0474
058e8     13 25 52 F2 | 	cmps	local04, local05 wc
058ec     68 00 90 3D |  if_ae	jmp	#LR__0477
058f0     0F 13 02 F6 | 	mov	arg01, local01
058f4     12 15 02 F6 | 	mov	arg02, local04
058f8     01 16 06 F6 | 	mov	arg03, #1
058fc     A4 D5 B1 FD | 	call	#__system__Mid_S
05900     FD 22 02 F6 | 	mov	local03, result1
05904                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
05904     85 01 00 FF 
05908     24 15 06 F6 | 	mov	arg02, ##@LR__5324
0590c     11 13 02 F6 | 	mov	arg01, local03
05910     24 B4 B1 FD | 	call	#__system___string_cmp
05914     00 FA 55 F2 | 	cmps	result1, #0 wc
05918     18 00 90 CD |  if_b	jmp	#LR__0475
0591c     85 01 00 FF 
05920     26 15 06 F6 | 	mov	arg02, ##@LR__5325
05924     11 13 02 F6 | 	mov	arg01, local03
05928     0C B4 B1 FD | 	call	#__system___string_cmp
0592c     01 FA 55 F2 | 	cmps	result1, #1 wc
05930     1C 00 90 CD |  if_b	jmp	#LR__0476
05934                 | LR__0475
05934     85 01 00 FF 
05938     28 15 06 F6 | 	mov	arg02, ##@LR__5326
0593c     11 13 02 F6 | 	mov	arg01, local03
05940     F4 B3 B1 FD | 	call	#__system___string_cmp
05944     00 FA 0D F2 | 	cmp	result1, #0 wz
05948     00 FA 05 56 |  if_ne	mov	result1, #0
0594c     0C 00 90 5D |  if_ne	jmp	#LR__0479
05950                 | LR__0476
05950     01 24 06 F1 | 	add	local04, #1
05954     90 FF 9F FD | 	jmp	#LR__0474
05958                 | LR__0477
05958                 | LR__0478
05958                 | ' return true
05958     01 FA 65 F6 | 	neg	result1, #1
0595c                 | LR__0479
0595c     A7 F0 03 F6 | 	mov	ptra, fp
05960     B2 00 A0 FD | 	call	#popregs_
05964                 | _isint_ret
05964     2D 00 64 FD | 	ret
05968                 | 
05968                 | ' 
05968                 | ' function isdec(s as string) as boolean
05968                 | _isdec
05968     05 4A 05 F6 | 	mov	COUNT_, #5
0596c     A8 00 A0 FD | 	call	#pushregs_
05970     09 1F 02 F6 | 	mov	local01, arg01
05974     09 21 02 F6 | 	mov	local02, arg01
05978     97 06 48 FB | 	callpa	#(@LR__0481-@LR__0480)>>2,fcache_load_ptr_
0597c                 | LR__0480
0597c     10 FB C9 FA | 	rdbyte	result1, local02 wz
05980     01 20 06 51 |  if_ne	add	local02, #1
05984     F4 FF 9F 5D |  if_ne	jmp	#LR__0480
05988                 | LR__0481
05988     09 21 82 F1 | 	sub	local02, arg01
0598c     10 FB 01 F6 | 	mov	result1, local02
05990     FD 20 0A F6 | 	mov	local02, result1 wz
05994     00 FA 05 A6 |  if_e	mov	result1, #0
05998     80 00 90 AD |  if_e	jmp	#LR__0486
0599c                 | ' for i=1 to l
0599c     01 22 06 F6 | 	mov	local03, #1
059a0     10 25 02 F6 | 	mov	local04, local02
059a4     01 24 06 F1 | 	add	local04, #1
059a8                 | LR__0482
059a8     12 23 52 F2 | 	cmps	local03, local04 wc
059ac     68 00 90 3D |  if_ae	jmp	#LR__0485
059b0     0F 13 02 F6 | 	mov	arg01, local01
059b4     11 15 02 F6 | 	mov	arg02, local03
059b8     01 16 06 F6 | 	mov	arg03, #1
059bc     E4 D4 B1 FD | 	call	#__system__Mid_S
059c0     FD 26 02 F6 | 	mov	local05, result1
059c4                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
059c4     85 01 00 FF 
059c8     2A 15 06 F6 | 	mov	arg02, ##@LR__5327
059cc     13 13 02 F6 | 	mov	arg01, local05
059d0     64 B3 B1 FD | 	call	#__system___string_cmp
059d4     00 FA 55 F2 | 	cmps	result1, #0 wc
059d8     18 00 90 CD |  if_b	jmp	#LR__0483
059dc     85 01 00 FF 
059e0     2C 15 06 F6 | 	mov	arg02, ##@LR__5328
059e4     13 13 02 F6 | 	mov	arg01, local05
059e8     4C B3 B1 FD | 	call	#__system___string_cmp
059ec     01 FA 55 F2 | 	cmps	result1, #1 wc
059f0     1C 00 90 CD |  if_b	jmp	#LR__0484
059f4                 | LR__0483
059f4     85 01 00 FF 
059f8     2E 15 06 F6 | 	mov	arg02, ##@LR__5329
059fc     13 13 02 F6 | 	mov	arg01, local05
05a00     34 B3 B1 FD | 	call	#__system___string_cmp
05a04     00 FA 0D F2 | 	cmp	result1, #0 wz
05a08     00 FA 05 56 |  if_ne	mov	result1, #0
05a0c     0C 00 90 5D |  if_ne	jmp	#LR__0486
05a10                 | LR__0484
05a10     01 22 06 F1 | 	add	local03, #1
05a14     90 FF 9F FD | 	jmp	#LR__0482
05a18                 | LR__0485
05a18                 | ' return true
05a18     01 FA 65 F6 | 	neg	result1, #1
05a1c                 | LR__0486
05a1c     A7 F0 03 F6 | 	mov	ptra, fp
05a20     B2 00 A0 FD | 	call	#popregs_
05a24                 | _isdec_ret
05a24     2D 00 64 FD | 	ret
05a28                 | 
05a28                 | ' 
05a28                 | ' function isstring(s as string) as boolean
05a28                 | _isstring
05a28     01 4A 05 F6 | 	mov	COUNT_, #1
05a2c     A8 00 A0 FD | 	call	#pushregs_
05a30                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
05a30     09 1F 02 F6 | 	mov	local01, arg01
05a34     01 14 06 F6 | 	mov	arg02, #1
05a38     50 D3 B1 FD | 	call	#__system__Left_S
05a3c     FD 12 02 F6 | 	mov	arg01, result1
05a40     85 01 00 FF 
05a44     30 15 06 F6 | 	mov	arg02, ##@LR__5330
05a48     EC B2 B1 FD | 	call	#__system___string_cmp
05a4c     00 FA 4D F2 | 	cmps	result1, #0 wz
05a50     28 00 90 5D |  if_ne	jmp	#LR__0490
05a54     0F 13 02 F6 | 	mov	arg01, local01
05a58     01 14 06 F6 | 	mov	arg02, #1
05a5c     B4 D3 B1 FD | 	call	#__system__Right_S
05a60     FD 12 02 F6 | 	mov	arg01, result1
05a64     85 01 00 FF 
05a68     32 15 06 F6 | 	mov	arg02, ##@LR__5331
05a6c     C8 B2 B1 FD | 	call	#__system___string_cmp
05a70     00 FA 4D F2 | 	cmps	result1, #0 wz
05a74     01 FA 65 A6 |  if_e	neg	result1, #1
05a78     04 00 90 AD |  if_e	jmp	#LR__0491
05a7c                 | LR__0490
05a7c     00 FA 05 F6 | 	mov	result1, #0
05a80                 | LR__0491
05a80     A7 F0 03 F6 | 	mov	ptra, fp
05a84     B2 00 A0 FD | 	call	#popregs_
05a88                 | _isstring_ret
05a88     2D 00 64 FD | 	ret
05a8c                 | 
05a8c                 | ' 
05a8c                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
05a8c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
05a8c                 | ' 
05a8c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
05a8c                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
05a8c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
05a8c                 | ' 
05a8c                 | ' '----- delete a line from a program
05a8c                 | ' 
05a8c                 | ' function deleteline(aline as ulong) as integer
05a8c                 | _deleteline
05a8c     03 4A 05 F6 | 	mov	COUNT_, #3
05a90     A8 00 A0 FD | 	call	#pushregs_
05a94     2C F0 07 F1 | 	add	ptra, #44
05a98     04 4E 05 F1 | 	add	fp, #4
05a9c     A7 12 62 FC | 	wrlong	arg01, fp
05aa0     4A 00 00 FF 
05aa4     B4 E4 05 F1 | 	add	objptr, ##38068
05aa8     F2 1E 02 FB | 	rdlong	local01, objptr
05aac     0C 4E 05 F1 | 	add	fp, #12
05ab0     A7 1E 62 FC | 	wrlong	local01, fp
05ab4     10 4E 85 F1 | 	sub	fp, #16
05ab8                 | ' 
05ab8                 | ' 
05ab8                 | ' searchptr=programstart
05ab8                 | ' 
05ab8                 | ' do
05ab8     3E 00 00 FF 
05abc     E8 E5 85 F1 | 	sub	objptr, ##32232
05ac0                 | LR__0500
05ac0     14 4E 05 F1 | 	add	fp, #20
05ac4     A7 12 02 F6 | 	mov	arg01, fp
05ac8     04 4E 85 F1 | 	sub	fp, #4
05acc     A7 14 02 FB | 	rdlong	arg02, fp
05ad0     10 4E 85 F1 | 	sub	fp, #16
05ad4     18 16 06 F6 | 	mov	arg03, #24
05ad8     F4 A5 B1 FD | 	call	#_psram_spin2_read1
05adc     10 4E 05 F1 | 	add	fp, #16
05ae0     A7 1E 02 FB | 	rdlong	local01, fp
05ae4     08 4E 85 F1 | 	sub	fp, #8
05ae8     A7 1E 62 FC | 	wrlong	local01, fp
05aec     20 4E 05 F1 | 	add	fp, #32
05af0     A7 1E 02 FB | 	rdlong	local01, fp
05af4     18 4E 85 F1 | 	sub	fp, #24
05af8     A7 1E 62 FC | 	wrlong	local01, fp
05afc     04 4E 05 F1 | 	add	fp, #4
05b00     A7 1E 02 FB | 	rdlong	local01, fp
05b04     10 4E 85 F1 | 	sub	fp, #16
05b08     A7 16 02 FB | 	rdlong	arg03, fp
05b0c     04 4E 85 F1 | 	sub	fp, #4
05b10     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05b14     28 4E 05 C1 |  if_b	add	fp, #40
05b18     A7 20 02 CB |  if_b	rdlong	local02, fp
05b1c     28 4E 85 C1 |  if_b	sub	fp, #40
05b20     FF FF 3F CF 
05b24     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05b28     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0500
05b2c     0B 00 00 FF 
05b30     CC E4 85 F1 | 	sub	objptr, ##5836
05b34                 | ' 
05b34                 | ' 
05b34                 | ' if header(0)<>aline then return -1
05b34     14 4E 05 F1 | 	add	fp, #20
05b38     A7 1E 02 FB | 	rdlong	local01, fp
05b3c     10 4E 85 F1 | 	sub	fp, #16
05b40     A7 22 02 FB | 	rdlong	local03, fp
05b44     04 4E 85 F1 | 	sub	fp, #4
05b48     11 1F 0A F2 | 	cmp	local01, local03 wz
05b4c     01 FA 65 56 |  if_ne	neg	result1, #1
05b50     D8 02 90 5D |  if_ne	jmp	#LR__0506
05b54     08 4E 05 F1 | 	add	fp, #8
05b58     A7 12 02 FB | 	rdlong	arg01, fp
05b5c     08 4E 85 F1 | 	sub	fp, #8
05b60     01 14 66 F6 | 	neg	arg02, #1
05b64     64 6E B1 FD | 	call	#_pslpoke
05b68                 | ' 
05b68                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
05b68                 | ' 
05b68                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  ' this is one and only line in the program
05b68     28 4E 05 F1 | 	add	fp, #40
05b6c     A7 1E 02 FB | 	rdlong	local01, fp
05b70     28 4E 85 F1 | 	sub	fp, #40
05b74     FF FF 3F FF 
05b78     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05b7c     24 4E 05 A1 |  if_e	add	fp, #36
05b80     A7 22 02 AB |  if_e	rdlong	local03, fp
05b84     24 4E 85 A1 |  if_e	sub	fp, #36
05b88     FF FF 7F AF 
05b8c     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
05b90     88 00 90 5D |  if_ne	jmp	#LR__0501
05b94     4A 00 00 FF 
05b98     B4 E4 05 F1 | 	add	objptr, ##38068
05b9c     00 04 80 FF 
05ba0     F2 00 68 FC | 	wrlong	##524288, objptr
05ba4     07 00 00 FF 
05ba8     28 E4 85 F1 | 	sub	objptr, ##3624
05bac     00 04 80 FF 
05bb0     F2 00 68 FC | 	wrlong	##524288, objptr
05bb4     07 00 00 FF 
05bb8     2C E4 05 F1 | 	add	objptr, ##3628
05bbc     F2 00 68 FC | 	wrlong	#0, objptr
05bc0     04 E4 05 F1 | 	add	objptr, #4
05bc4     FF FF FF FF 
05bc8     F2 FE 6B FC | 	wrlong	##-1, objptr
05bcc     4A 00 00 FF 
05bd0     BC E4 85 F1 | 	sub	objptr, ##38076
05bd4     00 12 06 F6 | 	mov	arg01, #0
05bd8     01 14 66 F6 | 	neg	arg02, #1
05bdc     EC 6D B1 FD | 	call	#_pslpoke
05be0     10 12 06 F6 | 	mov	arg01, #16
05be4     01 14 66 F6 | 	neg	arg02, #1
05be8     E0 6D B1 FD | 	call	#_pslpoke
05bec     14 12 06 F6 | 	mov	arg01, #20
05bf0     1E 14 CE F9 | 	bmask	arg02, #30
05bf4     D4 6D B1 FD | 	call	#_pslpoke
05bf8     58 00 00 FF 
05bfc     EC E4 05 F1 | 	add	objptr, ##45292
05c00     00 04 80 FF 
05c04     F2 00 68 FC | 	wrlong	##524288, objptr
05c08     04 E4 05 F1 | 	add	objptr, #4
05c0c     00 04 80 FF 
05c10     F2 00 68 FC | 	wrlong	##524288, objptr
05c14     58 00 00 FF 
05c18     F0 E4 85 F1 | 	sub	objptr, ##45296
05c1c                 | LR__0501
05c1c                 | ' 
05c1c                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
05c1c     28 4E 05 F1 | 	add	fp, #40
05c20     A7 1E 02 FB | 	rdlong	local01, fp
05c24     28 4E 85 F1 | 	sub	fp, #40
05c28     FF FF 3F FF 
05c2c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05c30     74 00 90 5D |  if_ne	jmp	#LR__0502
05c34     24 4E 05 F1 | 	add	fp, #36
05c38     A7 22 02 FB | 	rdlong	local03, fp
05c3c     24 4E 85 F1 | 	sub	fp, #36
05c40     FF FF 7F FF 
05c44     FF 23 0E F2 | 	cmp	local03, ##-1 wz
05c48     5C 00 90 AD |  if_e	jmp	#LR__0502
05c4c     24 4E 05 F1 | 	add	fp, #36
05c50     A7 12 02 FB | 	rdlong	arg01, fp
05c54     24 4E 85 F1 | 	sub	fp, #36
05c58     14 12 06 F1 | 	add	arg01, #20
05c5c     1E 14 CE F9 | 	bmask	arg02, #30
05c60     68 6D B1 FD | 	call	#_pslpoke
05c64     24 4E 05 F1 | 	add	fp, #36
05c68     A7 1E 02 FB | 	rdlong	local01, fp
05c6c     4A 00 00 FF 
05c70     BC E4 05 F1 | 	add	objptr, ##38076
05c74     F2 1E 62 FC | 	wrlong	local01, objptr
05c78     4A 00 00 FF 
05c7c     BC E4 85 F1 | 	sub	objptr, ##38076
05c80     A7 12 02 FB | 	rdlong	arg01, fp
05c84     24 4E 85 F1 | 	sub	fp, #36
05c88     70 6E B1 FD | 	call	#_pslpeek
05c8c     4A 00 00 FF 
05c90     B8 E4 05 F1 | 	add	objptr, ##38072
05c94     F2 FA 61 FC | 	wrlong	result1, objptr
05c98     4A 00 00 FF 
05c9c     B8 E4 85 F1 | 	sub	objptr, ##38072
05ca0                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
05ca0                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
05ca0                 | '   lastline=pslpeek(header(4))
05ca0                 | '   return 0
05ca0     00 FA 05 F6 | 	mov	result1, #0
05ca4     84 01 90 FD | 	jmp	#LR__0506
05ca8                 | LR__0502
05ca8                 | ' 
05ca8                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
05ca8     28 4E 05 F1 | 	add	fp, #40
05cac     A7 1E 02 FB | 	rdlong	local01, fp
05cb0     28 4E 85 F1 | 	sub	fp, #40
05cb4     FF FF 3F FF 
05cb8     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05cbc     58 00 90 AD |  if_e	jmp	#LR__0503
05cc0     24 4E 05 F1 | 	add	fp, #36
05cc4     A7 22 02 FB | 	rdlong	local03, fp
05cc8     24 4E 85 F1 | 	sub	fp, #36
05ccc     FF FF 7F FF 
05cd0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
05cd4     40 00 90 5D |  if_ne	jmp	#LR__0503
05cd8     28 4E 05 F1 | 	add	fp, #40
05cdc     A7 12 02 FB | 	rdlong	arg01, fp
05ce0     28 4E 85 F1 | 	sub	fp, #40
05ce4     10 12 06 F1 | 	add	arg01, #16
05ce8     01 14 66 F6 | 	neg	arg02, #1
05cec     DC 6C B1 FD | 	call	#_pslpoke
05cf0     28 4E 05 F1 | 	add	fp, #40
05cf4     A7 1E 02 FB | 	rdlong	local01, fp
05cf8     28 4E 85 F1 | 	sub	fp, #40
05cfc     4A 00 00 FF 
05d00     B4 E4 05 F1 | 	add	objptr, ##38068
05d04     F2 1E 62 FC | 	wrlong	local01, objptr
05d08     4A 00 00 FF 
05d0c     B4 E4 85 F1 | 	sub	objptr, ##38068
05d10                 | ' '   print "deleted first line"
05d10                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
05d10                 | '   programstart=header(5) ' adjust the program start to point on the first new line
05d10                 | '   return 0
05d10     00 FA 05 F6 | 	mov	result1, #0
05d14     14 01 90 FD | 	jmp	#LR__0506
05d18                 | LR__0503
05d18                 | ' 
05d18                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
05d18     28 4E 05 F1 | 	add	fp, #40
05d1c     A7 1E 02 FB | 	rdlong	local01, fp
05d20     28 4E 85 F1 | 	sub	fp, #40
05d24     FF FF 3F FF 
05d28     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05d2c     24 4E 05 51 |  if_ne	add	fp, #36
05d30     A7 22 02 5B |  if_ne	rdlong	local03, fp
05d34     24 4E 85 51 |  if_ne	sub	fp, #36
05d38     FF FF 7F 5F 
05d3c     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
05d40     40 00 90 AD |  if_e	jmp	#LR__0504
05d44     28 4E 05 F1 | 	add	fp, #40
05d48     A7 12 02 FB | 	rdlong	arg01, fp
05d4c     10 12 06 F1 | 	add	arg01, #16
05d50     04 4E 85 F1 | 	sub	fp, #4
05d54     A7 14 02 FB | 	rdlong	arg02, fp
05d58     24 4E 85 F1 | 	sub	fp, #36
05d5c     6C 6C B1 FD | 	call	#_pslpoke
05d60     24 4E 05 F1 | 	add	fp, #36
05d64     A7 12 02 FB | 	rdlong	arg01, fp
05d68     14 12 06 F1 | 	add	arg01, #20
05d6c     04 4E 05 F1 | 	add	fp, #4
05d70     A7 14 02 FB | 	rdlong	arg02, fp
05d74     28 4E 85 F1 | 	sub	fp, #40
05d78     50 6C B1 FD | 	call	#_pslpoke
05d7c                 | '    pslpoke(header(5)+16,header(4))  
05d7c                 | '    pslpoke(header(4)+20, header(5))
05d7c                 | '    return 0
05d7c     00 FA 05 F6 | 	mov	result1, #0
05d80     A8 00 90 FD | 	jmp	#LR__0506
05d84                 | LR__0504
05d84     10 4E 05 F1 | 	add	fp, #16
05d88     A7 1E 02 FB | 	rdlong	local01, fp
05d8c     08 4E 85 F1 | 	sub	fp, #8
05d90     A7 1E 62 FC | 	wrlong	local01, fp
05d94     4A 00 00 FF 
05d98     B4 E4 05 F1 | 	add	objptr, ##38068
05d9c     F2 1E 02 FB | 	rdlong	local01, objptr
05da0     08 4E 05 F1 | 	add	fp, #8
05da4     A7 1E 62 FC | 	wrlong	local01, fp
05da8     10 4E 85 F1 | 	sub	fp, #16
05dac                 | ' 
05dac                 | ' 
05dac                 | ' 
05dac                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
05dac                 | ' 
05dac                 | ' lineptr2=searchptr
05dac                 | ' searchptr=programstart
05dac                 | ' 
05dac                 | ' do
05dac     3E 00 00 FF 
05db0     E8 E5 85 F1 | 	sub	objptr, ##32232
05db4                 | LR__0505
05db4     14 4E 05 F1 | 	add	fp, #20
05db8     A7 12 02 F6 | 	mov	arg01, fp
05dbc     04 4E 85 F1 | 	sub	fp, #4
05dc0     A7 14 02 FB | 	rdlong	arg02, fp
05dc4     10 4E 85 F1 | 	sub	fp, #16
05dc8     18 16 06 F6 | 	mov	arg03, #24
05dcc     00 A3 B1 FD | 	call	#_psram_spin2_read1
05dd0     10 4E 05 F1 | 	add	fp, #16
05dd4     A7 1E 02 FB | 	rdlong	local01, fp
05dd8     08 4E 85 F1 | 	sub	fp, #8
05ddc     A7 1E 62 FC | 	wrlong	local01, fp
05de0     20 4E 05 F1 | 	add	fp, #32
05de4     A7 1E 02 FB | 	rdlong	local01, fp
05de8     18 4E 85 F1 | 	sub	fp, #24
05dec     A7 1E 62 FC | 	wrlong	local01, fp
05df0     04 4E 05 F1 | 	add	fp, #4
05df4     A7 1E 02 FB | 	rdlong	local01, fp
05df8     10 4E 85 F1 | 	sub	fp, #16
05dfc     A7 22 02 FB | 	rdlong	local03, fp
05e00     04 4E 85 F1 | 	sub	fp, #4
05e04     11 1F 12 F2 | 	cmp	local01, local03 wc
05e08     28 4E 05 C1 |  if_b	add	fp, #40
05e0c     A7 20 02 CB |  if_b	rdlong	local02, fp
05e10     28 4E 85 C1 |  if_b	sub	fp, #40
05e14     FF FF 3F CF 
05e18     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05e1c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0505
05e20     0B 00 00 FF 
05e24     CC E4 85 F1 | 	sub	objptr, ##5836
05e28     00 FA 05 F6 | 	mov	result1, #0
05e2c                 | LR__0506
05e2c     A7 F0 03 F6 | 	mov	ptra, fp
05e30     B2 00 A0 FD | 	call	#popregs_
05e34                 | _deleteline_ret
05e34     2D 00 64 FD | 	ret
05e38                 | 
05e38                 | ' 
05e38                 | ' sub save_line
05e38                 | _save_line
05e38     03 4A 05 F6 | 	mov	COUNT_, #3
05e3c     A8 00 A0 FD | 	call	#pushregs_
05e40     4A 00 00 FF 
05e44     AC E4 05 F1 | 	add	objptr, ##38060
05e48     F2 16 02 FB | 	rdlong	arg03, objptr
05e4c     01 16 06 F1 | 	add	arg03, #1
05e50     05 00 00 FF 
05e54     18 E4 85 F1 | 	sub	objptr, ##2584
05e58     F2 14 02 FB | 	rdlong	arg02, objptr
05e5c     0B 15 02 FD | 	qmul	arg02, arg03
05e60     0E 00 00 FF 
05e64     44 E4 85 F1 | 	sub	objptr, ##7236
05e68     F2 12 02 FB | 	rdlong	arg01, objptr
05e6c     37 00 00 FF 
05e70     50 E4 85 F1 | 	sub	objptr, ##28240
05e74     09 1F 02 F6 | 	mov	local01, arg01
05e78     18 20 62 FD | 	getqx	local02
05e7c     97 06 48 FB | 	callpa	#(@LR__0511-@LR__0510)>>2,fcache_load_ptr_
05e80                 | LR__0510
05e80     0F FB C9 FA | 	rdbyte	result1, local01 wz
05e84     01 1E 06 51 |  if_ne	add	local01, #1
05e88     F4 FF 9F 5D |  if_ne	jmp	#LR__0510
05e8c                 | LR__0511
05e8c     09 1F 82 F1 | 	sub	local01, arg01
05e90     03 1E CE F7 | 	test	local01, #3 wz
05e94     02 1E 46 50 |  if_ne	shr	local01, #2
05e98     01 1E 06 51 |  if_ne	add	local01, #1
05e9c     02 1E 66 50 |  if_ne	shl	local01, #2
05ea0     10 23 02 F6 | 	mov	local03, local02
05ea4     0F 23 02 F1 | 	add	local03, local01
05ea8     43 00 00 FF 
05eac     8C E4 05 F1 | 	add	objptr, ##34444
05eb0     F2 16 02 FB | 	rdlong	arg03, objptr
05eb4     10 17 02 F1 | 	add	arg03, local02
05eb8     04 00 00 FF 
05ebc     28 E4 05 F1 | 	add	objptr, ##2088
05ec0     F2 16 62 FC | 	wrlong	arg03, objptr
05ec4     04 E4 05 F1 | 	add	objptr, #4
05ec8     F2 1E 62 FC | 	wrlong	local01, objptr
05ecc     0C E4 85 F1 | 	sub	objptr, #12
05ed0     F2 12 02 F6 | 	mov	arg01, objptr
05ed4     04 00 00 FF 
05ed8     20 E4 85 F1 | 	sub	objptr, ##2080
05edc     F2 14 02 FB | 	rdlong	arg02, objptr
05ee0     10 17 02 F6 | 	mov	arg03, local02
05ee4     37 00 00 FF 
05ee8     C0 E5 85 F1 | 	sub	objptr, ##28608
05eec     7C A2 B1 FD | 	call	#_psram_spin2_write
05ef0     2B 00 00 FF 
05ef4     84 E5 05 F1 | 	add	objptr, ##22404
05ef8     F2 12 02 FB | 	rdlong	arg01, objptr
05efc     0C 00 00 FF 
05f00     3C E4 05 F1 | 	add	objptr, ##6204
05f04     F2 14 02 FB | 	rdlong	arg02, objptr
05f08     10 15 02 F1 | 	add	arg02, local02
05f0c     0F 17 02 F6 | 	mov	arg03, local01
05f10     37 00 00 FF 
05f14     C0 E5 85 F1 | 	sub	objptr, ##28608
05f18     50 A2 B1 FD | 	call	#_psram_spin2_write
05f1c     37 00 00 FF 
05f20     C0 E5 05 F1 | 	add	objptr, ##28608
05f24     F2 1E 02 FB | 	rdlong	local01, objptr
05f28     11 1F 02 F1 | 	add	local01, local03
05f2c     F2 1E 62 FC | 	wrlong	local01, objptr
05f30     43 00 00 FF 
05f34     8C E4 85 F1 | 	sub	objptr, ##34444
05f38     A7 F0 03 F6 | 	mov	ptra, fp
05f3c     B2 00 A0 FD | 	call	#popregs_
05f40                 | _save_line_ret
05f40     2D 00 64 FD | 	ret
05f44                 | 
05f44                 | ' 
05f44                 | ' 
05f44                 | ' function insertline(aline as ulong) as integer
05f44                 | _insertline
05f44     02 4A 05 F6 | 	mov	COUNT_, #2
05f48     A8 00 A0 FD | 	call	#pushregs_
05f4c     28 F0 07 F1 | 	add	ptra, #40
05f50     04 4E 05 F1 | 	add	fp, #4
05f54     A7 12 62 FC | 	wrlong	arg01, fp
05f58     4A 00 00 FF 
05f5c     B4 E4 05 F1 | 	add	objptr, ##38068
05f60     F2 1E 02 FB | 	rdlong	local01, objptr
05f64     04 4E 05 F1 | 	add	fp, #4
05f68     A7 1E 62 FC | 	wrlong	local01, fp
05f6c     08 4E 85 F1 | 	sub	fp, #8
05f70                 | ' 
05f70                 | ' do
05f70     3E 00 00 FF 
05f74     E8 E5 85 F1 | 	sub	objptr, ##32232
05f78                 | LR__0520
05f78     10 4E 05 F1 | 	add	fp, #16
05f7c     A7 12 02 F6 | 	mov	arg01, fp
05f80     08 4E 85 F1 | 	sub	fp, #8
05f84     A7 14 02 FB | 	rdlong	arg02, fp
05f88     08 4E 85 F1 | 	sub	fp, #8
05f8c     18 16 06 F6 | 	mov	arg03, #24
05f90     3C A1 B1 FD | 	call	#_psram_spin2_read1
05f94     08 4E 05 F1 | 	add	fp, #8
05f98     A7 1E 02 FB | 	rdlong	local01, fp
05f9c     04 4E 05 F1 | 	add	fp, #4
05fa0     A7 1E 62 FC | 	wrlong	local01, fp
05fa4     18 4E 05 F1 | 	add	fp, #24
05fa8     A7 1E 02 FB | 	rdlong	local01, fp
05fac     1C 4E 85 F1 | 	sub	fp, #28
05fb0     A7 1E 62 FC | 	wrlong	local01, fp
05fb4     08 4E 05 F1 | 	add	fp, #8
05fb8     A7 1E 02 FB | 	rdlong	local01, fp
05fbc     0C 4E 85 F1 | 	sub	fp, #12
05fc0     A7 16 02 FB | 	rdlong	arg03, fp
05fc4     04 4E 85 F1 | 	sub	fp, #4
05fc8     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05fcc     24 4E 05 C1 |  if_b	add	fp, #36
05fd0     A7 20 02 CB |  if_b	rdlong	local02, fp
05fd4     24 4E 85 C1 |  if_b	sub	fp, #36
05fd8     FF FF 3F CF 
05fdc     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05fe0     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0520
05fe4     0B 00 00 FF 
05fe8     CC E4 85 F1 | 	sub	objptr, ##5836
05fec                 | ' 
05fec                 | ' if header(0)=aline then return -1 ' delete it first
05fec     10 4E 05 F1 | 	add	fp, #16
05ff0     A7 1E 02 FB | 	rdlong	local01, fp
05ff4     0C 4E 85 F1 | 	sub	fp, #12
05ff8     A7 20 02 FB | 	rdlong	local02, fp
05ffc     04 4E 85 F1 | 	sub	fp, #4
06000     10 1F 0A F2 | 	cmp	local01, local02 wz
06004     01 FA 65 A6 |  if_e	neg	result1, #1
06008     48 01 90 AD |  if_e	jmp	#LR__0523
0600c                 | ' if header(0)<aline then return -2 ' end of program reached
0600c     10 4E 05 F1 | 	add	fp, #16
06010     A7 1E 02 FB | 	rdlong	local01, fp
06014     0C 4E 85 F1 | 	sub	fp, #12
06018     A7 16 02 FB | 	rdlong	arg03, fp
0601c     04 4E 85 F1 | 	sub	fp, #4
06020     0B 1F 12 F2 | 	cmp	local01, arg03 wc
06024     02 FA 65 C6 |  if_b	neg	result1, #2
06028     28 01 90 CD |  if_b	jmp	#LR__0523
0602c                 | ' 
0602c                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
0602c     20 4E 05 F1 | 	add	fp, #32
06030     A7 1E 02 FB | 	rdlong	local01, fp
06034     20 4E 85 F1 | 	sub	fp, #32
06038     FF FF 7F FF 
0603c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
06040     78 00 90 5D |  if_ne	jmp	#LR__0521
06044     43 00 00 FF 
06048     8C E4 05 F1 | 	add	objptr, ##34444
0604c     F2 1E 02 FB | 	rdlong	local01, objptr
06050     07 00 00 FF 
06054     28 E4 05 F1 | 	add	objptr, ##3624
06058     F2 1E 62 FC | 	wrlong	local01, objptr
0605c     0C 4E 05 F1 | 	add	fp, #12
06060     A7 12 02 FB | 	rdlong	arg01, fp
06064     0C 4E 85 F1 | 	sub	fp, #12
06068     10 12 06 F1 | 	add	arg01, #16
0606c     07 00 00 FF 
06070     28 E4 85 F1 | 	sub	objptr, ##3624
06074     F2 14 02 FB | 	rdlong	arg02, objptr
06078     43 00 00 FF 
0607c     8C E4 85 F1 | 	sub	objptr, ##34444
06080     48 69 B1 FD | 	call	#_pslpoke
06084     47 00 00 FF 
06088     BC E4 05 F1 | 	add	objptr, ##36540
0608c     FF FF FF FF 
06090     F2 FE 6B FC | 	wrlong	##-1, objptr
06094     0C 4E 05 F1 | 	add	fp, #12
06098     A7 1E 02 FB | 	rdlong	local01, fp
0609c     0C 4E 85 F1 | 	sub	fp, #12
060a0     04 E4 05 F1 | 	add	objptr, #4
060a4     F2 1E 62 FC | 	wrlong	local01, objptr
060a8     47 00 00 FF 
060ac     C0 E4 85 F1 | 	sub	objptr, ##36544
060b0     84 FD BF FD | 	call	#_save_line
060b4                 | '   programstart=programptr
060b4                 | '   pslpoke(lineptr2+16,programptr)
060b4                 | '   ucompiledline(4)=$FFFF_FFFF
060b4                 | '   ucompiledline(5)=lineptr2
060b4                 | '   save_line
060b4                 | '   return 0
060b4     00 FA 05 F6 | 	mov	result1, #0
060b8     98 00 90 FD | 	jmp	#LR__0523
060bc                 | LR__0521
060bc                 | ' 
060bc                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
060bc     20 4E 05 F1 | 	add	fp, #32
060c0     A7 1E 02 FB | 	rdlong	local01, fp
060c4     20 4E 85 F1 | 	sub	fp, #32
060c8     FF FF 7F FF 
060cc     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
060d0     7C 00 90 AD |  if_e	jmp	#LR__0522
060d4     20 4E 05 F1 | 	add	fp, #32
060d8     A7 1E 02 FB | 	rdlong	local01, fp
060dc     47 00 00 FF 
060e0     BC E4 05 F1 | 	add	objptr, ##36540
060e4     F2 1E 62 FC | 	wrlong	local01, objptr
060e8     14 4E 85 F1 | 	sub	fp, #20
060ec     A7 1E 02 FB | 	rdlong	local01, fp
060f0     04 E4 05 F1 | 	add	objptr, #4
060f4     F2 1E 62 FC | 	wrlong	local01, objptr
060f8     A7 12 02 FB | 	rdlong	arg01, fp
060fc     0C 4E 85 F1 | 	sub	fp, #12
06100     10 12 06 F1 | 	add	arg01, #16
06104     04 00 00 FF 
06108     34 E4 85 F1 | 	sub	objptr, ##2100
0610c     F2 14 02 FB | 	rdlong	arg02, objptr
06110     43 00 00 FF 
06114     8C E4 85 F1 | 	sub	objptr, ##34444
06118     B0 68 B1 FD | 	call	#_pslpoke
0611c     20 4E 05 F1 | 	add	fp, #32
06120     A7 12 02 FB | 	rdlong	arg01, fp
06124     20 4E 85 F1 | 	sub	fp, #32
06128     14 12 06 F1 | 	add	arg01, #20
0612c     43 00 00 FF 
06130     8C E4 05 F1 | 	add	objptr, ##34444
06134     F2 14 02 FB | 	rdlong	arg02, objptr
06138     43 00 00 FF 
0613c     8C E4 85 F1 | 	sub	objptr, ##34444
06140     88 68 B1 FD | 	call	#_pslpoke
06144     F0 FC BF FD | 	call	#_save_line
06148                 | '   ucompiledline(4)=header(4)
06148                 | '   ucompiledline(5)=lineptr2
06148                 | '   pslpoke(lineptr2+16,programptr)
06148                 | '   pslpoke(header(4)+20,programptr)
06148                 | '   save_line
06148                 | '   return 0
06148     00 FA 05 F6 | 	mov	result1, #0
0614c     04 00 90 FD | 	jmp	#LR__0523
06150                 | LR__0522
06150     00 FA 05 F6 | 	mov	result1, #0
06154                 | LR__0523
06154     A7 F0 03 F6 | 	mov	ptra, fp
06158     B2 00 A0 FD | 	call	#popregs_
0615c                 | _insertline_ret
0615c     2D 00 64 FD | 	ret
06160                 | 
06160                 | ' 
06160                 | ' sub add_line_at_end(aline) 
06160                 | _add_line_at_end
06160     4A 00 00 FF 
06164     B8 E4 05 F1 | 	add	objptr, ##38072
06168     F2 12 62 FC | 	wrlong	arg01, objptr
0616c     04 E4 05 F1 | 	add	objptr, #4
06170     F2 14 02 FB | 	rdlong	arg02, objptr
06174     03 00 00 FF 
06178     00 E4 85 F1 | 	sub	objptr, ##1536
0617c     F2 14 62 FC | 	wrlong	arg02, objptr
06180     03 00 00 FF 
06184     00 E4 05 F1 | 	add	objptr, ##1536
06188     F2 12 02 FB | 	rdlong	arg01, objptr
0618c     14 12 06 F1 | 	add	arg01, #20
06190     07 00 00 FF 
06194     30 E4 85 F1 | 	sub	objptr, ##3632
06198     F2 14 02 FB | 	rdlong	arg02, objptr
0619c     43 00 00 FF 
061a0     8C E4 85 F1 | 	sub	objptr, ##34444
061a4     24 68 B1 FD | 	call	#_pslpoke
061a8     43 00 00 FF 
061ac     8C E4 05 F1 | 	add	objptr, ##34444
061b0     F2 14 02 FB | 	rdlong	arg02, objptr
061b4     07 00 00 FF 
061b8     30 E4 05 F1 | 	add	objptr, ##3632
061bc     F2 14 62 FC | 	wrlong	arg02, objptr
061c0     02 00 00 FF 
061c4     FC E5 85 F1 | 	sub	objptr, ##1532
061c8     FF FF BF FF 
061cc     F2 FE 6B FC | 	wrlong	##2147483647, objptr
061d0                 | ' 
061d0                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
061d0                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
061d0     04 00 00 FF 
061d4     34 E4 85 F1 | 	sub	objptr, ##2100
061d8     F2 14 02 FB | 	rdlong	arg02, objptr
061dc     43 00 00 FF 
061e0     8C E4 85 F1 | 	sub	objptr, ##34444
061e4     00 04 00 FF 
061e8     00 14 0E F2 | 	cmp	arg02, ##524288 wz
061ec     47 00 00 AF 
061f0     BC E4 05 A1 |  if_e	add	objptr, ##36540
061f4     FF FF FF AF 
061f8     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
061fc     47 00 00 AF 
06200     BC E4 85 A1 |  if_e	sub	objptr, ##36540
06204     30 FC BF FD | 	call	#_save_line
06208     43 00 00 FF 
0620c     8C E4 05 F1 | 	add	objptr, ##34444
06210     F2 12 02 FB | 	rdlong	arg01, objptr
06214     43 00 00 FF 
06218     8C E4 85 F1 | 	sub	objptr, ##34444
0621c     01 14 66 F6 | 	neg	arg02, #1
06220     A8 67 B1 FD | 	call	#_pslpoke
06224                 | _add_line_at_end_ret
06224     2D 00 64 FD | 	ret
06228                 | 
06228                 | ' 
06228                 | ' function compile_immediate(linetype as ulong) as integer
06228                 | _compile_immediate
06228     09 4A 05 F6 | 	mov	COUNT_, #9
0622c     A8 00 A0 FD | 	call	#pushregs_
06230                 | _compile_immediate_enter
06230     09 25 0A F6 | 	mov	local04, arg01 wz
06234     00 26 06 F6 | 	mov	local05, #0
06238     00 28 06 F6 | 	mov	local06, #0
0623c                 | ' 
0623c                 | ' ' linetype=cont+1, linetype=0 immediate
0623c                 | ' '  : 1: this is the first part of the line that will continue
0623c                 | ' ' 2 - this is the continuation of the line
0623c                 | ' ' 3 - this is the last continued line
0623c                 | ' ' 4 - this is the one and only part
0623c                 | ' 
0623c                 | ' err=0
0623c                 | ' cmd=0
0623c                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
0623c     30 00 90 5D |  if_ne	jmp	#LR__0530
06240     35 00 00 FF 
06244     40 E4 05 F1 | 	add	objptr, ##27200
06248     F2 28 02 FB | 	rdlong	local06, objptr
0624c     02 00 00 FF 
06250     34 E4 05 F1 | 	add	objptr, ##1076
06254     F2 02 68 FC | 	wrlong	#1, objptr
06258     00 2A 06 F6 | 	mov	local07, #0
0625c     13 00 00 FF 
06260     38 E4 05 F1 | 	add	objptr, ##9784
06264     F2 00 68 FC | 	wrlong	#0, objptr
06268     4A 00 00 FF 
0626c     AC E4 85 F1 | 	sub	objptr, ##38060
06270                 | LR__0530
06270                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
06270     02 24 0E F2 | 	cmp	local04, #2 wz
06274     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06278     24 00 90 5D |  if_ne	jmp	#LR__0531
0627c     35 00 00 FF 
06280     40 E4 05 F1 | 	add	objptr, ##27200
06284     F2 28 02 FB | 	rdlong	local06, objptr
06288     01 2A 06 F6 | 	mov	local07, #1
0628c     02 00 00 FF 
06290     34 E4 05 F1 | 	add	objptr, ##1076
06294     F2 02 68 FC | 	wrlong	#1, objptr
06298     37 00 00 FF 
0629c     74 E4 85 F1 | 	sub	objptr, ##28276
062a0                 | LR__0531
062a0                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
062a0     04 24 0E F2 | 	cmp	local04, #4 wz
062a4     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
062a8     30 00 90 5D |  if_ne	jmp	#LR__0532
062ac     35 00 00 FF 
062b0     48 E4 05 F1 | 	add	objptr, ##27208
062b4     F2 28 02 FB | 	rdlong	local06, objptr
062b8     02 2A 06 F6 | 	mov	local07, #2
062bc     02 00 00 FF 
062c0     2C E4 05 F1 | 	add	objptr, ##1068
062c4     F2 04 68 FC | 	wrlong	#2, objptr
062c8     13 00 00 FF 
062cc     38 E4 05 F1 | 	add	objptr, ##9784
062d0     F2 04 68 FC | 	wrlong	#2, objptr
062d4     4A 00 00 FF 
062d8     AC E4 85 F1 | 	sub	objptr, ##38060
062dc                 | LR__0532
062dc                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
062dc     05 24 0E F2 | 	cmp	local04, #5 wz
062e0     44 00 90 5D |  if_ne	jmp	#LR__0533
062e4     37 00 00 FF 
062e8     74 E4 05 F1 | 	add	objptr, ##28276
062ec     F2 FA 01 FB | 	rdlong	result1, objptr
062f0     FD 2A 02 F6 | 	mov	local07, result1
062f4     03 2A 66 F0 | 	shl	local07, #3
062f8     02 00 00 FF 
062fc     38 E4 85 F1 | 	sub	objptr, ##1080
06300     F2 2A 02 F1 | 	add	local07, objptr
06304     04 2A 06 F1 | 	add	local07, #4
06308     15 29 02 FB | 	rdlong	local06, local07
0630c     FD 2A 02 F6 | 	mov	local07, result1
06310     01 2A 06 F1 | 	add	local07, #1
06314     02 00 00 FF 
06318     38 E4 05 F1 | 	add	objptr, ##1080
0631c     F2 2A 62 FC | 	wrlong	local07, objptr
06320     37 00 00 FF 
06324     74 E4 85 F1 | 	sub	objptr, ##28276
06328                 | LR__0533
06328     00 2C 06 F6 | 	mov	local08, #0
0632c                 | ' vars=0
0632c                 | ' 'print  "In compile_immediate cmd=:", cmd
0632c                 | ' 451 select case cmd
0632c     5C 28 0E F2 | 	cmp	local06, #92 wz
06330     80 02 90 AD |  if_e	jmp	#LR__0534
06334     47 28 0E F2 | 	cmp	local06, #71 wz
06338     84 02 90 AD |  if_e	jmp	#LR__0535
0633c     59 28 0E F2 | 	cmp	local06, #89 wz
06340     88 02 90 AD |  if_e	jmp	#LR__0536
06344     45 28 0E F2 | 	cmp	local06, #69 wz
06348     8C 02 90 AD |  if_e	jmp	#LR__0537
0634c     69 28 0E F2 | 	cmp	local06, #105 wz
06350     90 02 90 AD |  if_e	jmp	#LR__0538
06354     40 28 0E F2 | 	cmp	local06, #64 wz
06358     84 05 90 AD |  if_e	jmp	#LR__0605
0635c     B4 28 0E F2 | 	cmp	local06, #180 wz
06360     8C 02 90 AD |  if_e	jmp	#LR__0539
06364     49 28 0E F2 | 	cmp	local06, #73 wz
06368     8C 02 90 AD |  if_e	jmp	#LR__0540
0636c     50 28 0E F2 | 	cmp	local06, #80 wz
06370     90 02 90 AD |  if_e	jmp	#LR__0541
06374     AE 28 0E F2 | 	cmp	local06, #174 wz
06378     94 02 90 AD |  if_e	jmp	#LR__0542
0637c     B0 28 0E F2 | 	cmp	local06, #176 wz
06380     98 02 90 AD |  if_e	jmp	#LR__0543
06384     AF 28 0E F2 | 	cmp	local06, #175 wz
06388     9C 02 90 AD |  if_e	jmp	#LR__0544
0638c     B1 28 0E F2 | 	cmp	local06, #177 wz
06390     A0 02 90 AD |  if_e	jmp	#LR__0545
06394     68 28 0E F2 | 	cmp	local06, #104 wz
06398     A4 02 90 AD |  if_e	jmp	#LR__0546
0639c     74 28 0E F2 | 	cmp	local06, #116 wz
063a0     A8 02 90 AD |  if_e	jmp	#LR__0547
063a4     73 28 0E F2 | 	cmp	local06, #115 wz
063a8     AC 02 90 AD |  if_e	jmp	#LR__0548
063ac     6C 28 0E F2 | 	cmp	local06, #108 wz
063b0     B0 02 90 AD |  if_e	jmp	#LR__0549
063b4     89 28 0E F2 | 	cmp	local06, #137 wz
063b8     24 05 90 AD |  if_e	jmp	#LR__0605
063bc     72 28 0E F2 | 	cmp	local06, #114 wz
063c0     AC 02 90 AD |  if_e	jmp	#LR__0550
063c4     5D 28 0E F2 | 	cmp	local06, #93 wz
063c8     14 05 90 AD |  if_e	jmp	#LR__0605
063cc     96 28 0E F2 | 	cmp	local06, #150 wz
063d0     A4 02 90 AD |  if_e	jmp	#LR__0551
063d4     43 28 0E F2 | 	cmp	local06, #67 wz
063d8     A4 02 90 AD |  if_e	jmp	#LR__0552
063dc     5A 28 0E F2 | 	cmp	local06, #90 wz
063e0     A8 02 90 AD |  if_e	jmp	#LR__0553
063e4     AB 28 0E F2 | 	cmp	local06, #171 wz
063e8     F4 04 90 AD |  if_e	jmp	#LR__0605
063ec     BD 28 0E F2 | 	cmp	local06, #189 wz
063f0     A0 02 90 AD |  if_e	jmp	#LR__0554
063f4     BB 28 0E F2 | 	cmp	local06, #187 wz
063f8     A4 02 90 AD |  if_e	jmp	#LR__0555
063fc     4E 28 0E F2 | 	cmp	local06, #78 wz
06400     A8 02 90 AD |  if_e	jmp	#LR__0556
06404     A9 28 0E F2 | 	cmp	local06, #169 wz
06408     BC 02 90 AD |  if_e	jmp	#LR__0558
0640c     46 28 0E F2 | 	cmp	local06, #70 wz
06410     BC 02 90 AD |  if_e	jmp	#LR__0559
06414     71 28 0E F2 | 	cmp	local06, #113 wz
06418     C0 02 90 AD |  if_e	jmp	#LR__0560
0641c     60 28 0E F2 | 	cmp	local06, #96 wz
06420     C4 02 90 AD |  if_e	jmp	#LR__0561
06424     4A 28 0E F2 | 	cmp	local06, #74 wz
06428     C8 02 90 AD |  if_e	jmp	#LR__0562
0642c     48 28 0E F2 | 	cmp	local06, #72 wz
06430     C8 02 90 AD |  if_e	jmp	#LR__0563
06434     58 28 0E F2 | 	cmp	local06, #88 wz
06438     CC 02 90 AD |  if_e	jmp	#LR__0564
0643c     5F 28 0E F2 | 	cmp	local06, #95 wz
06440     CC 02 90 AD |  if_e	jmp	#LR__0565
06444     8A 28 0E F2 | 	cmp	local06, #138 wz
06448     D0 02 90 AD |  if_e	jmp	#LR__0566
0644c     4C 28 0E F2 | 	cmp	local06, #76 wz
06450     D4 02 90 AD |  if_e	jmp	#LR__0567
06454     52 28 0E F2 | 	cmp	local06, #82 wz
06458     D8 02 90 AD |  if_e	jmp	#LR__0568
0645c     97 28 0E F2 | 	cmp	local06, #151 wz
06460     DC 02 90 AD |  if_e	jmp	#LR__0569
06464     61 28 0E F2 | 	cmp	local06, #97 wz
06468     E0 02 90 AD |  if_e	jmp	#LR__0570
0646c     63 28 0E F2 | 	cmp	local06, #99 wz
06470     E4 02 90 AD |  if_e	jmp	#LR__0571
06474     41 28 0E F2 | 	cmp	local06, #65 wz
06478     64 04 90 AD |  if_e	jmp	#LR__0605
0647c     4B 28 0E F2 | 	cmp	local06, #75 wz
06480     E0 02 90 AD |  if_e	jmp	#LR__0572
06484     B3 28 0E F2 | 	cmp	local06, #179 wz
06488     E0 02 90 AD |  if_e	jmp	#LR__0573
0648c     5E 28 0E F2 | 	cmp	local06, #94 wz
06490     E4 02 90 AD |  if_e	jmp	#LR__0574
06494     7C 28 0E F2 | 	cmp	local06, #124 wz
06498     E8 02 90 AD |  if_e	jmp	#LR__0575
0649c     7D 28 0E F2 | 	cmp	local06, #125 wz
064a0     EC 02 90 AD |  if_e	jmp	#LR__0576
064a4     7E 28 0E F2 | 	cmp	local06, #126 wz
064a8     F0 02 90 AD |  if_e	jmp	#LR__0577
064ac     7F 28 0E F2 | 	cmp	local06, #127 wz
064b0     F4 02 90 AD |  if_e	jmp	#LR__0578
064b4     80 28 0E F2 | 	cmp	local06, #128 wz
064b8     F8 02 90 AD |  if_e	jmp	#LR__0579
064bc     55 28 0E F2 | 	cmp	local06, #85 wz
064c0     FC 02 90 AD |  if_e	jmp	#LR__0580
064c4     75 28 0E F2 | 	cmp	local06, #117 wz
064c8     00 03 90 AD |  if_e	jmp	#LR__0581
064cc     42 28 0E F2 | 	cmp	local06, #66 wz
064d0     04 03 90 AD |  if_e	jmp	#LR__0582
064d4     95 28 0E F2 | 	cmp	local06, #149 wz
064d8     08 03 90 AD |  if_e	jmp	#LR__0583
064dc     AC 28 0E F2 | 	cmp	local06, #172 wz
064e0     FC 03 90 AD |  if_e	jmp	#LR__0605
064e4     81 28 0E F2 | 	cmp	local06, #129 wz
064e8     04 03 90 AD |  if_e	jmp	#LR__0584
064ec     44 28 0E F2 | 	cmp	local06, #68 wz
064f0     08 03 90 AD |  if_e	jmp	#LR__0585
064f4     BC 28 0E F2 | 	cmp	local06, #188 wz
064f8     0C 03 90 AD |  if_e	jmp	#LR__0586
064fc     88 28 0E F2 | 	cmp	local06, #136 wz
06500     DC 03 90 AD |  if_e	jmp	#LR__0605
06504     92 28 0E F2 | 	cmp	local06, #146 wz
06508     08 03 90 AD |  if_e	jmp	#LR__0587
0650c     BE 28 0E F2 | 	cmp	local06, #190 wz
06510     88 04 90 AD |  if_e	jmp	#LR__0606
06514     AA 28 0E F2 | 	cmp	local06, #170 wz
06518     C4 03 90 AD |  if_e	jmp	#LR__0605
0651c     4D 28 0E F2 | 	cmp	local06, #77 wz
06520     F8 02 90 AD |  if_e	jmp	#LR__0588
06524     51 28 0E F2 | 	cmp	local06, #81 wz
06528     FC 02 90 AD |  if_e	jmp	#LR__0589
0652c     8E 28 0E F2 | 	cmp	local06, #142 wz
06530     00 03 90 AD |  if_e	jmp	#LR__0590
06534     90 28 0E F2 | 	cmp	local06, #144 wz
06538     04 03 90 AD |  if_e	jmp	#LR__0591
0653c     8D 28 0E F2 | 	cmp	local06, #141 wz
06540     08 03 90 AD |  if_e	jmp	#LR__0592
06544     8C 28 0E F2 | 	cmp	local06, #140 wz
06548     0C 03 90 AD |  if_e	jmp	#LR__0593
0654c     91 28 0E F2 | 	cmp	local06, #145 wz
06550     10 03 90 AD |  if_e	jmp	#LR__0594
06554     8B 28 0E F2 | 	cmp	local06, #139 wz
06558     14 03 90 AD |  if_e	jmp	#LR__0595
0655c     8F 28 0E F2 | 	cmp	local06, #143 wz
06560     18 03 90 AD |  if_e	jmp	#LR__0596
06564     B2 28 0E F2 | 	cmp	local06, #178 wz
06568     1C 03 90 AD |  if_e	jmp	#LR__0597
0656c     6D 28 0E F2 | 	cmp	local06, #109 wz
06570     20 03 90 AD |  if_e	jmp	#LR__0598
06574     70 28 0E F2 | 	cmp	local06, #112 wz
06578     64 03 90 AD |  if_e	jmp	#LR__0605
0657c     56 28 0E F2 | 	cmp	local06, #86 wz
06580     1C 03 90 AD |  if_e	jmp	#LR__0599
06584     57 28 0E F2 | 	cmp	local06, #87 wz
06588     54 03 90 AD |  if_e	jmp	#LR__0605
0658c     79 28 0E F2 | 	cmp	local06, #121 wz
06590     18 03 90 AD |  if_e	jmp	#LR__0600
06594     77 28 0E F2 | 	cmp	local06, #119 wz
06598     1C 03 90 AD |  if_e	jmp	#LR__0601
0659c     78 28 0E F2 | 	cmp	local06, #120 wz
065a0     20 03 90 AD |  if_e	jmp	#LR__0602
065a4     01 00 00 FF 
065a8     04 28 0E F2 | 	cmp	local06, ##516 wz
065ac     20 03 90 AD |  if_e	jmp	#LR__0603
065b0     24 03 90 FD | 	jmp	#LR__0604
065b4                 | LR__0534
065b4     28 0D B0 FD | 	call	#_compile_fun_2p
065b8     FD 26 02 F6 | 	mov	local05, result1
065bc     20 03 90 FD | 	jmp	#LR__0605
065c0                 | LR__0535
065c0     5C 0E B0 FD | 	call	#_compile_fun_4p
065c4     FD 26 02 F6 | 	mov	local05, result1
065c8     14 03 90 FD | 	jmp	#LR__0605
065cc                 | LR__0536
065cc     A8 33 B0 FD | 	call	#_expr
065d0                 | ' expr()
065d0                 | ' return 0
065d0     00 26 06 F6 | 	mov	local05, #0
065d4     08 03 90 FD | 	jmp	#LR__0605
065d8                 | LR__0537
065d8     78 0D B0 FD | 	call	#_compile_fun_3p
065dc     FD 26 02 F6 | 	mov	local05, result1
065e0     FC 02 90 FD | 	jmp	#LR__0605
065e4                 | LR__0538
065e4     90 33 B0 FD | 	call	#_expr
065e8                 | ' expr()
065e8                 | ' return 0
065e8     00 26 06 F6 | 	mov	local05, #0
065ec     F0 02 90 FD | 	jmp	#LR__0605
065f0                 | LR__0539
065f0     84 33 B0 FD | 	call	#_expr
065f4                 | ' expr()
065f4                 | ' return 0
065f4     E8 02 90 FD | 	jmp	#LR__0605
065f8                 | LR__0540
065f8     7C 33 B0 FD | 	call	#_expr
065fc                 | ' expr()
065fc                 | ' return 0
065fc     00 26 06 F6 | 	mov	local05, #0
06600     DC 02 90 FD | 	jmp	#LR__0605
06604                 | LR__0541
06604     B8 10 B0 FD | 	call	#_compile_fun_varp
06608     FD 2C 02 F6 | 	mov	local08, result1
0660c     D0 02 90 FD | 	jmp	#LR__0605
06610                 | LR__0542
06610     AC 10 B0 FD | 	call	#_compile_fun_varp
06614     FD 2C 02 F6 | 	mov	local08, result1
06618     C4 02 90 FD | 	jmp	#LR__0605
0661c                 | LR__0543
0661c     A0 10 B0 FD | 	call	#_compile_fun_varp
06620     FD 2C 02 F6 | 	mov	local08, result1
06624     B8 02 90 FD | 	jmp	#LR__0605
06628                 | LR__0544
06628     94 10 B0 FD | 	call	#_compile_fun_varp
0662c     FD 2C 02 F6 | 	mov	local08, result1
06630     AC 02 90 FD | 	jmp	#LR__0605
06634                 | LR__0545
06634     88 10 B0 FD | 	call	#_compile_fun_varp
06638     FD 2C 02 F6 | 	mov	local08, result1
0663c     A0 02 90 FD | 	jmp	#LR__0605
06640                 | LR__0546
06640     34 33 B0 FD | 	call	#_expr
06644                 | ' expr()
06644                 | ' return 0
06644     00 26 06 F6 | 	mov	local05, #0
06648     94 02 90 FD | 	jmp	#LR__0605
0664c                 | LR__0547
0664c     70 10 B0 FD | 	call	#_compile_fun_varp
06650     FD 2C 02 F6 | 	mov	local08, result1
06654     88 02 90 FD | 	jmp	#LR__0605
06658                 | LR__0548
06658     64 10 B0 FD | 	call	#_compile_fun_varp
0665c     FD 2C 02 F6 | 	mov	local08, result1
06660     7C 02 90 FD | 	jmp	#LR__0605
06664                 | LR__0549
06664     DC 0E B0 FD | 	call	#_compile_fun_5p
06668     FD 26 02 F6 | 	mov	local05, result1
0666c     70 02 90 FD | 	jmp	#LR__0605
06670                 | LR__0550
06670     00 1B B0 FD | 	call	#_compile_dim
06674     24 03 90 FD | 	jmp	#LR__0606
06678                 | LR__0551
06678     64 0C B0 FD | 	call	#_compile_fun_2p
0667c     60 02 90 FD | 	jmp	#LR__0605
06680                 | LR__0552
06680     5C 0C B0 FD | 	call	#_compile_fun_2p
06684     FD 26 02 F6 | 	mov	local05, result1
06688     54 02 90 FD | 	jmp	#LR__0605
0668c                 | LR__0553
0668c     BC 19 B0 FD | 	call	#_compile_else
06690     08 03 90 FD | 	jmp	#LR__0606
06694                 | LR__0554
06694     28 10 B0 FD | 	call	#_compile_fun_varp
06698     FD 2C 02 F6 | 	mov	local08, result1
0669c     40 02 90 FD | 	jmp	#LR__0605
066a0                 | LR__0555
066a0     1C 10 B0 FD | 	call	#_compile_fun_varp
066a4     FD 2C 02 F6 | 	mov	local08, result1
066a8     34 02 90 FD | 	jmp	#LR__0605
066ac                 | LR__0556
066ac     01 24 16 F2 | 	cmp	local04, #1 wc
066b0     08 00 90 CD |  if_b	jmp	#LR__0557
066b4     D0 2E B0 FD | 	call	#_compile_goto
066b8     E0 02 90 FD | 	jmp	#LR__0606
066bc                 | LR__0557
066bc     19 12 06 F6 | 	mov	arg01, #25
066c0     A4 61 B1 FD | 	call	#_printerror
066c4     D4 02 90 FD | 	jmp	#LR__0606
066c8                 | LR__0558
066c8     54 2E B0 FD | 	call	#_compile_gosub
066cc     CC 02 90 FD | 	jmp	#LR__0606
066d0                 | LR__0559
066d0     80 0C B0 FD | 	call	#_compile_fun_3p
066d4     FD 26 02 F6 | 	mov	local05, result1
066d8     04 02 90 FD | 	jmp	#LR__0605
066dc                 | LR__0560
066dc     40 0D B0 FD | 	call	#_compile_fun_4p
066e0     FD 26 02 F6 | 	mov	local05, result1
066e4     F8 01 90 FD | 	jmp	#LR__0605
066e8                 | LR__0561
066e8     8C 32 B0 FD | 	call	#_expr
066ec                 | ' expr()
066ec                 | ' return 0
066ec     00 26 06 F6 | 	mov	local05, #0
066f0     EC 01 90 FD | 	jmp	#LR__0605
066f4                 | LR__0562
066f4     8C 21 B0 FD | 	call	#_compile_for
066f8     A0 02 90 FD | 	jmp	#LR__0606
066fc                 | LR__0563
066fc     20 0D B0 FD | 	call	#_compile_fun_4p
06700     FD 26 02 F6 | 	mov	local05, result1
06704     D8 01 90 FD | 	jmp	#LR__0605
06708                 | LR__0564
06708     00 18 B0 FD | 	call	#_compile_if
0670c     8C 02 90 FD | 	jmp	#LR__0606
06710                 | LR__0565
06710     64 32 B0 FD | 	call	#_expr
06714                 | ' expr()
06714                 | ' return 0
06714     00 26 06 F6 | 	mov	local05, #0
06718     C4 01 90 FD | 	jmp	#LR__0605
0671c                 | LR__0566
0671c     58 32 B0 FD | 	call	#_expr
06720                 | ' expr()
06720                 | ' return 0
06720     00 26 06 F6 | 	mov	local05, #0
06724     B8 01 90 FD | 	jmp	#LR__0605
06728                 | LR__0567
06728     94 0F B0 FD | 	call	#_compile_fun_varp
0672c     FD 2C 02 F6 | 	mov	local08, result1
06730     AC 01 90 FD | 	jmp	#LR__0605
06734                 | LR__0568
06734     88 0F B0 FD | 	call	#_compile_fun_varp
06738     FD 2C 02 F6 | 	mov	local08, result1
0673c     A0 01 90 FD | 	jmp	#LR__0605
06740                 | LR__0569
06740     9C 0B B0 FD | 	call	#_compile_fun_2p
06744     FD 26 02 F6 | 	mov	local05, result1
06748     94 01 90 FD | 	jmp	#LR__0605
0674c                 | LR__0570
0674c     28 32 B0 FD | 	call	#_expr
06750                 | ' expr()
06750                 | ' return 0
06750     00 26 06 F6 | 	mov	local05, #0
06754     88 01 90 FD | 	jmp	#LR__0605
06758                 | LR__0571
06758     1C 32 B0 FD | 	call	#_expr
0675c                 | ' expr()
0675c                 | ' return 0
0675c     00 26 06 F6 | 	mov	local05, #0
06760     7C 01 90 FD | 	jmp	#LR__0605
06764                 | LR__0572
06764     08 2C B0 FD | 	call	#_compile_next
06768     30 02 90 FD | 	jmp	#LR__0606
0676c                 | LR__0573
0676c     E4 0B B0 FD | 	call	#_compile_fun_3p
06770     FD 26 02 F6 | 	mov	local05, result1
06774     68 01 90 FD | 	jmp	#LR__0605
06778                 | LR__0574
06778     FC 31 B0 FD | 	call	#_expr
0677c                 | ' expr()
0677c                 | ' return 0
0677c     00 26 06 F6 | 	mov	local05, #0
06780     5C 01 90 FD | 	jmp	#LR__0605
06784                 | LR__0575
06784     F0 31 B0 FD | 	call	#_expr
06788                 | ' expr()
06788                 | ' return 0
06788     00 26 06 F6 | 	mov	local05, #0
0678c     50 01 90 FD | 	jmp	#LR__0605
06790                 | LR__0576
06790     E4 31 B0 FD | 	call	#_expr
06794                 | ' expr()
06794                 | ' return 0
06794     00 26 06 F6 | 	mov	local05, #0
06798     44 01 90 FD | 	jmp	#LR__0605
0679c                 | LR__0577
0679c     D8 31 B0 FD | 	call	#_expr
067a0                 | ' expr()
067a0                 | ' return 0
067a0     00 26 06 F6 | 	mov	local05, #0
067a4     38 01 90 FD | 	jmp	#LR__0605
067a8                 | LR__0578
067a8     74 0C B0 FD | 	call	#_compile_fun_4p
067ac     FD 26 02 F6 | 	mov	local05, result1
067b0     2C 01 90 FD | 	jmp	#LR__0605
067b4                 | LR__0579
067b4     C0 31 B0 FD | 	call	#_expr
067b8                 | ' expr()
067b8                 | ' return 0
067b8     00 26 06 F6 | 	mov	local05, #0
067bc     20 01 90 FD | 	jmp	#LR__0605
067c0                 | LR__0580
067c0     1C 0B B0 FD | 	call	#_compile_fun_2p
067c4     FD 26 02 F6 | 	mov	local05, result1
067c8     14 01 90 FD | 	jmp	#LR__0605
067cc                 | LR__0581
067cc     F0 0E B0 FD | 	call	#_compile_fun_varp
067d0     FD 2C 02 F6 | 	mov	local08, result1
067d4     08 01 90 FD | 	jmp	#LR__0605
067d8                 | LR__0582
067d8     04 0B B0 FD | 	call	#_compile_fun_2p
067dc     FD 26 02 F6 | 	mov	local05, result1
067e0     FC 00 90 FD | 	jmp	#LR__0605
067e4                 | LR__0583
067e4     F8 0A B0 FD | 	call	#_compile_fun_2p
067e8     FD 26 02 F6 | 	mov	local05, result1
067ec     F0 00 90 FD | 	jmp	#LR__0605
067f0                 | LR__0584
067f0     EC 0A B0 FD | 	call	#_compile_fun_2p
067f4     FD 26 02 F6 | 	mov	local05, result1
067f8     E4 00 90 FD | 	jmp	#LR__0605
067fc                 | LR__0585
067fc     6C 0F B0 FD | 	call	#_compile_print
06800     FD 26 02 F6 | 	mov	local05, result1
06804     94 01 90 FD | 	jmp	#LR__0606
06808                 | LR__0586
06808     B4 0E B0 FD | 	call	#_compile_fun_varp
0680c     FD 2C 02 F6 | 	mov	local08, result1
06810     CC 00 90 FD | 	jmp	#LR__0605
06814                 | LR__0587
06814     60 31 B0 FD | 	call	#_expr
06818                 | ' expr()
06818                 | ' return 0
06818     C4 00 90 FD | 	jmp	#LR__0605
0681c                 | LR__0588
0681c     A0 0E B0 FD | 	call	#_compile_fun_varp
06820     FD 2C 02 F6 | 	mov	local08, result1
06824     B8 00 90 FD | 	jmp	#LR__0605
06828                 | LR__0589
06828     94 0E B0 FD | 	call	#_compile_fun_varp
0682c     FD 2C 02 F6 | 	mov	local08, result1
06830     AC 00 90 FD | 	jmp	#LR__0605
06834                 | LR__0590
06834     A8 0A B0 FD | 	call	#_compile_fun_2p
06838     FD 26 02 F6 | 	mov	local05, result1
0683c     A0 00 90 FD | 	jmp	#LR__0605
06840                 | LR__0591
06840     9C 0A B0 FD | 	call	#_compile_fun_2p
06844     FD 26 02 F6 | 	mov	local05, result1
06848     94 00 90 FD | 	jmp	#LR__0605
0684c                 | LR__0592
0684c     90 0A B0 FD | 	call	#_compile_fun_2p
06850     FD 26 02 F6 | 	mov	local05, result1
06854     88 00 90 FD | 	jmp	#LR__0605
06858                 | LR__0593
06858     84 0A B0 FD | 	call	#_compile_fun_2p
0685c     FD 26 02 F6 | 	mov	local05, result1
06860     7C 00 90 FD | 	jmp	#LR__0605
06864                 | LR__0594
06864     78 0A B0 FD | 	call	#_compile_fun_2p
06868     FD 26 02 F6 | 	mov	local05, result1
0686c     70 00 90 FD | 	jmp	#LR__0605
06870                 | LR__0595
06870     6C 0A B0 FD | 	call	#_compile_fun_2p
06874     FD 26 02 F6 | 	mov	local05, result1
06878     64 00 90 FD | 	jmp	#LR__0605
0687c                 | LR__0596
0687c     60 0A B0 FD | 	call	#_compile_fun_2p
06880     FD 26 02 F6 | 	mov	local05, result1
06884     58 00 90 FD | 	jmp	#LR__0605
06888                 | LR__0597
06888     34 0E B0 FD | 	call	#_compile_fun_varp
0688c     FD 2C 02 F6 | 	mov	local08, result1
06890     4C 00 90 FD | 	jmp	#LR__0605
06894                 | LR__0598
06894     BC 0A B0 FD | 	call	#_compile_fun_3p
06898     FD 26 02 F6 | 	mov	local05, result1
0689c     40 00 90 FD | 	jmp	#LR__0605
068a0                 | LR__0599
068a0     D4 30 B0 FD | 	call	#_expr
068a4                 | ' expr()
068a4                 | ' return 0
068a4     00 26 06 F6 | 	mov	local05, #0
068a8     34 00 90 FD | 	jmp	#LR__0605
068ac                 | LR__0600
068ac     30 0A B0 FD | 	call	#_compile_fun_2p
068b0     FD 26 02 F6 | 	mov	local05, result1
068b4     28 00 90 FD | 	jmp	#LR__0605
068b8                 | LR__0601
068b8     24 0A B0 FD | 	call	#_compile_fun_2p
068bc     FD 26 02 F6 | 	mov	local05, result1
068c0     1C 00 90 FD | 	jmp	#LR__0605
068c4                 | LR__0602
068c4     18 0A B0 FD | 	call	#_compile_fun_2p
068c8     FD 26 02 F6 | 	mov	local05, result1
068cc     10 00 90 FD | 	jmp	#LR__0605
068d0                 | LR__0603
068d0     E8 01 B0 FD | 	call	#_compile_array_assign
068d4     C4 00 90 FD | 	jmp	#LR__0606
068d8                 | LR__0604
068d8     48 09 B0 FD | 	call	#_compile_unknown
068dc     BC 00 90 FD | 	jmp	#LR__0606
068e0                 | LR__0605
068e0     14 23 02 F6 | 	mov	local03, local06
068e4     16 1F 02 F6 | 	mov	local01, local08
068e8     0F 2B 02 F6 | 	mov	local07, local01
068ec     10 2F 02 F6 | 	mov	local09, local02
068f0     11 29 02 F6 | 	mov	local06, local03
068f4     4A 00 00 FF 
068f8     AC E4 05 F1 | 	add	objptr, ##38060
068fc     F2 1E 02 FB | 	rdlong	local01, objptr
06900     0F 2D 02 F6 | 	mov	local08, local01
06904     01 2C 66 F0 | 	shl	local08, #1
06908     0F 2D 02 F1 | 	add	local08, local01
0690c     02 2C 66 F0 | 	shl	local08, #2
06910     03 00 00 FF 
06914     00 E4 85 F1 | 	sub	objptr, ##1536
06918     F2 2C 02 F1 | 	add	local08, objptr
0691c     16 2B 62 FC | 	wrlong	local07, local08
06920     03 00 00 FF 
06924     00 E4 05 F1 | 	add	objptr, ##1536
06928     F2 1E 02 FB | 	rdlong	local01, objptr
0692c     0F 2D 02 F6 | 	mov	local08, local01
06930     01 2C 66 F0 | 	shl	local08, #1
06934     0F 2D 02 F1 | 	add	local08, local01
06938     02 2C 66 F0 | 	shl	local08, #2
0693c     03 00 00 FF 
06940     00 E4 85 F1 | 	sub	objptr, ##1536
06944     F2 2C 02 F1 | 	add	local08, objptr
06948     04 2C 06 F1 | 	add	local08, #4
0694c     16 2F 62 FC | 	wrlong	local09, local08
06950     03 00 00 FF 
06954     00 E4 05 F1 | 	add	objptr, ##1536
06958     F2 1E 02 FB | 	rdlong	local01, objptr
0695c     0F 2D 02 F6 | 	mov	local08, local01
06960     01 2C 66 F0 | 	shl	local08, #1
06964     0F 2D 02 F1 | 	add	local08, local01
06968     02 2C 66 F0 | 	shl	local08, #2
0696c     03 00 00 FF 
06970     00 E4 85 F1 | 	sub	objptr, ##1536
06974     F2 2C 02 F1 | 	add	local08, objptr
06978     08 2C 06 F1 | 	add	local08, #8
0697c     16 29 62 FC | 	wrlong	local06, local08
06980     03 00 00 FF 
06984     00 E4 05 F1 | 	add	objptr, ##1536
06988     F2 2A 02 FB | 	rdlong	local07, objptr
0698c     01 2A 06 F1 | 	add	local07, #1
06990     F2 2A 62 FC | 	wrlong	local07, objptr
06994     4A 00 00 FF 
06998     AC E4 85 F1 | 	sub	objptr, ##38060
0699c                 | LR__0606
0699c                 | ' 
0699c                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
0699c                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
0699c     00 24 0E F2 | 	cmp	local04, #0 wz
069a0     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
069a4     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
069a8     38 00 90 5D |  if_ne	jmp	#LR__0607
069ac     4A 00 00 FF 
069b0     AC E4 05 F1 | 	add	objptr, ##38060
069b4     F2 2C 02 FB | 	rdlong	local08, objptr
069b8     16 1F 02 F6 | 	mov	local01, local08
069bc     01 1E 66 F0 | 	shl	local01, #1
069c0     16 1F 02 F1 | 	add	local01, local08
069c4     02 1E 66 F0 | 	shl	local01, #2
069c8     03 00 00 FF 
069cc     00 E4 85 F1 | 	sub	objptr, ##1536
069d0     F2 1E 02 F1 | 	add	local01, objptr
069d4     08 1E 06 F1 | 	add	local01, #8
069d8     0F FD 6B FC | 	wrlong	#510, local01
069dc     47 00 00 FF 
069e0     AC E4 85 F1 | 	sub	objptr, ##36524
069e4                 | LR__0607
069e4                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
069e4     4A 00 00 FF 
069e8     AC E4 05 F1 | 	add	objptr, ##38060
069ec     F2 1E 02 FB | 	rdlong	local01, objptr
069f0     4A 00 00 FF 
069f4     AC E4 85 F1 | 	sub	objptr, ##38060
069f8     97 58 48 FB | 	callpa	#(@LR__0610-@LR__0608)>>2,fcache_load_ptr_
069fc                 | LR__0608
069fc     0F 2D 02 F6 | 	mov	local08, local01
06a00     01 2C 66 F0 | 	shl	local08, #1
06a04     0F 2D 02 F1 | 	add	local08, local01
06a08     02 2C 66 F0 | 	shl	local08, #2
06a0c     47 00 00 FF 
06a10     AC E4 05 F1 | 	add	objptr, ##36524
06a14     F2 2C 02 F1 | 	add	local08, objptr
06a18     08 2C 06 F1 | 	add	local08, #8
06a1c     16 2D 02 FB | 	rdlong	local08, local08
06a20     9B 2C 0E F2 | 	cmp	local08, #155 wz
06a24     47 00 00 FF 
06a28     AC E4 85 F1 | 	sub	objptr, ##36524
06a2c     70 00 90 5D |  if_ne	jmp	#LR__0609
06a30     0F 2D 02 F6 | 	mov	local08, local01
06a34     01 2C 86 F1 | 	sub	local08, #1
06a38     16 2F 02 F6 | 	mov	local09, local08
06a3c     01 2E 66 F0 | 	shl	local09, #1
06a40     16 2F 02 F1 | 	add	local09, local08
06a44     02 2E 66 F0 | 	shl	local09, #2
06a48     47 00 00 FF 
06a4c     AC E4 05 F1 | 	add	objptr, ##36524
06a50     F2 2E 02 F1 | 	add	local09, objptr
06a54     08 2E 06 F1 | 	add	local09, #8
06a58     17 2D 02 FB | 	rdlong	local08, local09
06a5c     11 2C 0E F2 | 	cmp	local08, #17 wz
06a60     47 00 00 FF 
06a64     AC E4 85 F1 | 	sub	objptr, ##36524
06a68     34 00 90 5D |  if_ne	jmp	#LR__0609
06a6c     0F 2F 02 F6 | 	mov	local09, local01
06a70     01 2E 86 F1 | 	sub	local09, #1
06a74     17 2D 02 F6 | 	mov	local08, local09
06a78     01 2C 66 F0 | 	shl	local08, #1
06a7c     17 2D 02 F1 | 	add	local08, local09
06a80     02 2C 66 F0 | 	shl	local08, #2
06a84     47 00 00 FF 
06a88     AC E4 05 F1 | 	add	objptr, ##36524
06a8c     F2 2C 02 F1 | 	add	local08, objptr
06a90     08 2C 06 F1 | 	add	local08, #8
06a94     16 25 68 FC | 	wrlong	#18, local08
06a98     47 00 00 FF 
06a9c     AC E4 85 F1 | 	sub	objptr, ##36524
06aa0                 | LR__0609
06aa0     01 1E 86 F1 | 	sub	local01, #1
06aa4     01 1E 56 F2 | 	cmps	local01, #1 wc
06aa8     50 FF 9F 3D |  if_ae	jmp	#LR__0608
06aac                 | LR__0610
06aac                 | '  '  print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
06aac                 | ' return err
06aac     13 FB 01 F6 | 	mov	result1, local05
06ab0     A7 F0 03 F6 | 	mov	ptra, fp
06ab4     B2 00 A0 FD | 	call	#popregs_
06ab8                 | _compile_immediate_ret
06ab8     2D 00 64 FD | 	ret
06abc                 | 
06abc                 | ' 
06abc                 | ' sub compile_array_assign
06abc                 | _compile_array_assign
06abc     0A 4A 05 F6 | 	mov	COUNT_, #10
06ac0     A8 00 A0 FD | 	call	#pushregs_
06ac4     00 24 06 F6 | 	mov	local04, #0
06ac8     37 00 00 FF 
06acc     74 E4 05 F1 | 	add	objptr, ##28276
06ad0     F2 26 02 FB | 	rdlong	local05, objptr
06ad4     13 FB 01 F6 | 	mov	result1, local05
06ad8     01 FA 85 F1 | 	sub	result1, #1
06adc     03 FA 65 F0 | 	shl	result1, #3
06ae0     02 00 00 FF 
06ae4     38 E4 85 F1 | 	sub	objptr, ##1080
06ae8     F2 FA 01 F1 | 	add	result1, objptr
06aec     FD 28 02 FB | 	rdlong	local06, result1
06af0                 | ' numpar=0
06af0                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
06af0                 | ' ' todo here: recognize params and t1.result.twowords=numpar
06af0                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
06af0                 | ' if lparts(ct).token=token_lpar then
06af0     03 26 66 F0 | 	shl	local05, #3
06af4     F2 26 02 F1 | 	add	local05, objptr
06af8     04 26 06 F1 | 	add	local05, #4
06afc     13 27 02 FB | 	rdlong	local05, local05
06b00     15 26 0E F2 | 	cmp	local05, #21 wz
06b04     35 00 00 FF 
06b08     3C E4 85 F1 | 	sub	objptr, ##27196
06b0c     D4 01 90 5D |  if_ne	jmp	#LR__0624
06b10     37 00 00 FF 
06b14     74 E4 05 F1 | 	add	objptr, ##28276
06b18     F2 2A 02 FB | 	rdlong	local07, objptr
06b1c     01 2A 06 F1 | 	add	local07, #1
06b20     F2 2A 62 FC | 	wrlong	local07, objptr
06b24     37 00 00 FF 
06b28     74 E4 85 F1 | 	sub	objptr, ##28276
06b2c                 | '   ct+=1 											' omit this lpar, this is for expr list
06b2c                 | '   do
06b2c                 | LR__0620
06b2c     48 2E B0 FD | 	call	#_expr
06b30     37 00 00 FF 
06b34     74 E4 05 F1 | 	add	objptr, ##28276
06b38     F2 26 02 FB | 	rdlong	local05, objptr
06b3c     01 26 06 F1 | 	add	local05, #1
06b40     F2 26 62 FC | 	wrlong	local05, objptr
06b44     01 24 06 F1 | 	add	local04, #1
06b48     01 26 86 F1 | 	sub	local05, #1
06b4c     03 26 66 F0 | 	shl	local05, #3
06b50     02 00 00 FF 
06b54     38 E4 85 F1 | 	sub	objptr, ##1080
06b58     F2 26 02 F1 | 	add	local05, objptr
06b5c     04 26 06 F1 | 	add	local05, #4
06b60     13 2B 02 FB | 	rdlong	local07, local05
06b64     14 2A 0E F2 | 	cmp	local07, #20 wz
06b68     35 00 00 FF 
06b6c     3C E4 85 F1 | 	sub	objptr, ##27196
06b70     34 00 90 AD |  if_e	jmp	#LR__0621
06b74     37 00 00 FF 
06b78     74 E4 05 F1 | 	add	objptr, ##28276
06b7c     F2 2A 02 FB | 	rdlong	local07, objptr
06b80     03 2A 66 F0 | 	shl	local07, #3
06b84     02 00 00 FF 
06b88     38 E4 85 F1 | 	sub	objptr, ##1080
06b8c     F2 2A 02 F1 | 	add	local07, objptr
06b90     04 2A 06 F1 | 	add	local07, #4
06b94     15 2B 02 FB | 	rdlong	local07, local07
06b98     FE 2B 0E F2 | 	cmp	local07, #510 wz
06b9c     35 00 00 FF 
06ba0     3C E4 85 F1 | 	sub	objptr, ##27196
06ba4     84 FF 9F 5D |  if_ne	jmp	#LR__0620
06ba8                 | LR__0621
06ba8     37 00 00 FF 
06bac     74 E4 05 F1 | 	add	objptr, ##28276
06bb0     F2 2A 02 FB | 	rdlong	local07, objptr
06bb4     01 2A 06 F1 | 	add	local07, #1
06bb8     F2 2A 62 FC | 	wrlong	local07, objptr
06bbc     37 00 00 FF 
06bc0     74 E4 85 F1 | 	sub	objptr, ##28276
06bc4     B0 2D B0 FD | 	call	#_expr
06bc8     01 2C 66 F6 | 	neg	local08, #1
06bcc     00 2E 06 F6 | 	mov	local09, #0
06bd0                 | ' '   print "in array_assign, rpar found, numpar=",numpar
06bd0                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
06bd0                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
06bd0                 | ' ct+=1 : expr()
06bd0                 | ' ' now find the vae
06bd0                 | ' 
06bd0                 | ' j=-1 : i=0 : do : 
06bd0                 | LR__0622
06bd0                 | '   if variables(i).name=varname$ then j=i: exit loop
06bd0     17 27 02 F6 | 	mov	local05, local09
06bd4     04 26 66 F0 | 	shl	local05, #4
06bd8     15 00 00 FF 
06bdc     28 E4 05 F1 | 	add	objptr, ##10792
06be0     F2 26 02 F1 | 	add	local05, objptr
06be4     13 13 02 FB | 	rdlong	arg01, local05
06be8     14 15 02 F6 | 	mov	arg02, local06
06bec     15 00 00 FF 
06bf0     28 E4 85 F1 | 	sub	objptr, ##10792
06bf4     40 A1 B1 FD | 	call	#__system___string_cmp
06bf8     00 FA 0D F2 | 	cmp	result1, #0 wz
06bfc     17 2D 02 A6 |  if_e	mov	local08, local09
06c00     20 00 90 AD |  if_e	jmp	#LR__0623
06c04     01 2E 06 F1 | 	add	local09, #1
06c08     35 00 00 FF 
06c0c     38 E4 05 F1 | 	add	objptr, ##27192
06c10     F2 2A 02 FB | 	rdlong	local07, objptr
06c14     35 00 00 FF 
06c18     38 E4 85 F1 | 	sub	objptr, ##27192
06c1c     15 2F 5A F2 | 	cmps	local09, local07 wcz
06c20     AC FF 9F ED |  if_be	jmp	#LR__0622
06c24                 | LR__0623
06c24     16 1F 02 F6 | 	mov	local01, local08
06c28     12 21 02 F6 | 	mov	local02, local04
06c2c     17 22 06 F6 | 	mov	local03, #23
06c30     0F 2B 02 F6 | 	mov	local07, local01
06c34     10 31 02 F6 | 	mov	local10, local02
06c38     11 2D 02 F6 | 	mov	local08, local03
06c3c     4A 00 00 FF 
06c40     AC E4 05 F1 | 	add	objptr, ##38060
06c44     F2 1E 02 FB | 	rdlong	local01, objptr
06c48     0F 2F 02 F6 | 	mov	local09, local01
06c4c     01 2E 66 F0 | 	shl	local09, #1
06c50     0F 2F 02 F1 | 	add	local09, local01
06c54     02 2E 66 F0 | 	shl	local09, #2
06c58     03 00 00 FF 
06c5c     00 E4 85 F1 | 	sub	objptr, ##1536
06c60     F2 2E 02 F1 | 	add	local09, objptr
06c64     17 2B 62 FC | 	wrlong	local07, local09
06c68     03 00 00 FF 
06c6c     00 E4 05 F1 | 	add	objptr, ##1536
06c70     F2 1E 02 FB | 	rdlong	local01, objptr
06c74     0F 2F 02 F6 | 	mov	local09, local01
06c78     01 2E 66 F0 | 	shl	local09, #1
06c7c     0F 2F 02 F1 | 	add	local09, local01
06c80     02 2E 66 F0 | 	shl	local09, #2
06c84     03 00 00 FF 
06c88     00 E4 85 F1 | 	sub	objptr, ##1536
06c8c     F2 2E 02 F1 | 	add	local09, objptr
06c90     04 2E 06 F1 | 	add	local09, #4
06c94     17 31 62 FC | 	wrlong	local10, local09
06c98     03 00 00 FF 
06c9c     00 E4 05 F1 | 	add	objptr, ##1536
06ca0     F2 30 02 FB | 	rdlong	local10, objptr
06ca4     18 1F 02 F6 | 	mov	local01, local10
06ca8     01 1E 66 F0 | 	shl	local01, #1
06cac     18 1F 02 F1 | 	add	local01, local10
06cb0     02 1E 66 F0 | 	shl	local01, #2
06cb4     03 00 00 FF 
06cb8     00 E4 85 F1 | 	sub	objptr, ##1536
06cbc     F2 1E 02 F1 | 	add	local01, objptr
06cc0     08 1E 06 F1 | 	add	local01, #8
06cc4     0F 2D 62 FC | 	wrlong	local08, local01
06cc8     03 00 00 FF 
06ccc     00 E4 05 F1 | 	add	objptr, ##1536
06cd0     F2 2A 02 FB | 	rdlong	local07, objptr
06cd4     01 2A 06 F1 | 	add	local07, #1
06cd8     F2 2A 62 FC | 	wrlong	local07, objptr
06cdc     4A 00 00 FF 
06ce0     AC E4 85 F1 | 	sub	objptr, ##38060
06ce4                 | LR__0624
06ce4     A7 F0 03 F6 | 	mov	ptra, fp
06ce8     B2 00 A0 FD | 	call	#popregs_
06cec                 | _compile_array_assign_ret
06cec     2D 00 64 FD | 	ret
06cf0                 | 
06cf0                 | ' 
06cf0                 | ' 
06cf0                 | ' sub compile_immediate_assign(linetype as ulong)
06cf0                 | _compile_immediate_assign
06cf0     09 4A 05 F6 | 	mov	COUNT_, #9
06cf4     A8 00 A0 FD | 	call	#pushregs_
06cf8     09 25 0A F6 | 	mov	local04, arg01 wz
06cfc     FF 22 06 F6 | 	mov	local03, #255
06d00     01 26 66 F6 | 	neg	local05, #1
06d04                 | ' 
06d04                 | ' t1.result_type=result_error : t1.result.uresult=0
06d04                 | ' i=-1: j=-1
06d04                 | ' 
06d04                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
06d04     2C 00 90 5D |  if_ne	jmp	#LR__0630
06d08     35 00 00 FF 
06d0c     3C E4 05 F1 | 	add	objptr, ##27196
06d10     F2 28 02 FB | 	rdlong	local06, objptr
06d14     02 00 00 FF 
06d18     38 E4 05 F1 | 	add	objptr, ##1080
06d1c     F2 04 68 FC | 	wrlong	#2, objptr
06d20     13 00 00 FF 
06d24     38 E4 05 F1 | 	add	objptr, ##9784
06d28     F2 00 68 FC | 	wrlong	#0, objptr
06d2c     4A 00 00 FF 
06d30     AC E4 85 F1 | 	sub	objptr, ##38060
06d34                 | LR__0630
06d34                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
06d34     02 24 0E F2 | 	cmp	local04, #2 wz
06d38     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06d3c     35 00 00 AF 
06d40     3C E4 05 A1 |  if_e	add	objptr, ##27196
06d44     F2 28 02 AB |  if_e	rdlong	local06, objptr
06d48     02 00 00 AF 
06d4c     38 E4 05 A1 |  if_e	add	objptr, ##1080
06d50     F2 04 68 AC |  if_e	wrlong	#2, objptr
06d54     37 00 00 AF 
06d58     74 E4 85 A1 |  if_e	sub	objptr, ##28276
06d5c                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
06d5c     04 24 0E F2 | 	cmp	local04, #4 wz
06d60     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
06d64     2C 00 90 5D |  if_ne	jmp	#LR__0631
06d68     35 00 00 FF 
06d6c     44 E4 05 F1 | 	add	objptr, ##27204
06d70     F2 28 02 FB | 	rdlong	local06, objptr
06d74     02 00 00 FF 
06d78     30 E4 05 F1 | 	add	objptr, ##1072
06d7c     F2 06 68 FC | 	wrlong	#3, objptr
06d80     13 00 00 FF 
06d84     38 E4 05 F1 | 	add	objptr, ##9784
06d88     F2 04 68 FC | 	wrlong	#2, objptr
06d8c     4A 00 00 FF 
06d90     AC E4 85 F1 | 	sub	objptr, ##38060
06d94                 | LR__0631
06d94                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
06d94     05 24 0E F2 | 	cmp	local04, #5 wz
06d98     3C 00 90 5D |  if_ne	jmp	#LR__0632
06d9c     37 00 00 FF 
06da0     74 E4 05 F1 | 	add	objptr, ##28276
06da4     F2 FA 01 FB | 	rdlong	result1, objptr
06da8     FD 28 02 F6 | 	mov	local06, result1
06dac     03 28 66 F0 | 	shl	local06, #3
06db0     02 00 00 FF 
06db4     38 E4 85 F1 | 	sub	objptr, ##1080
06db8     F2 28 02 F1 | 	add	local06, objptr
06dbc     14 29 02 FB | 	rdlong	local06, local06
06dc0     02 FA 05 F1 | 	add	result1, #2
06dc4     02 00 00 FF 
06dc8     38 E4 05 F1 | 	add	objptr, ##1080
06dcc     F2 FA 61 FC | 	wrlong	result1, objptr
06dd0     37 00 00 FF 
06dd4     74 E4 85 F1 | 	sub	objptr, ##28276
06dd8                 | LR__0632
06dd8     14 13 02 F6 | 	mov	arg01, local06
06ddc     01 14 06 F6 | 	mov	arg02, #1
06de0     30 C0 B1 FD | 	call	#__system__Right_S
06de4     90 2B B0 FD | 	call	#_expr
06de8                 | '  
06de8                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
06de8                 | ' 
06de8                 | ' suffix2$=right$(varname2$,1)
06de8                 | ' expr()
06de8                 | ' 
06de8                 | ' 
06de8                 | ' if varnum>0 then
06de8     35 00 00 FF 
06dec     38 E4 05 F1 | 	add	objptr, ##27192
06df0     F2 2A 02 FB | 	rdlong	local07, objptr
06df4     35 00 00 FF 
06df8     38 E4 85 F1 | 	sub	objptr, ##27192
06dfc     01 2A 56 F2 | 	cmps	local07, #1 wc
06e00     58 00 90 CD |  if_b	jmp	#LR__0635
06e04                 | '   for i=0 to varnum-1
06e04     00 2C 06 F6 | 	mov	local08, #0
06e08     35 00 00 FF 
06e0c     38 E4 05 F1 | 	add	objptr, ##27192
06e10     F2 2E 02 FB | 	rdlong	local09, objptr
06e14     35 00 00 FF 
06e18     38 E4 85 F1 | 	sub	objptr, ##27192
06e1c                 | LR__0633
06e1c     17 2D 52 F2 | 	cmps	local08, local09 wc
06e20     38 00 90 3D |  if_ae	jmp	#LR__0634
06e24                 | '     if variables(i).name=varname2$ then j=i : exit
06e24     16 2B 02 F6 | 	mov	local07, local08
06e28     04 2A 66 F0 | 	shl	local07, #4
06e2c     15 00 00 FF 
06e30     28 E4 05 F1 | 	add	objptr, ##10792
06e34     F2 2A 02 F1 | 	add	local07, objptr
06e38     15 13 02 FB | 	rdlong	arg01, local07
06e3c     14 15 02 F6 | 	mov	arg02, local06
06e40     15 00 00 FF 
06e44     28 E4 85 F1 | 	sub	objptr, ##10792
06e48     EC 9E B1 FD | 	call	#__system___string_cmp
06e4c     00 FA 0D F2 | 	cmp	result1, #0 wz
06e50     16 27 02 A6 |  if_e	mov	local05, local08
06e54     01 2C 06 51 |  if_ne	add	local08, #1
06e58     C0 FF 9F 5D |  if_ne	jmp	#LR__0633
06e5c                 | LR__0634
06e5c                 | LR__0635
06e5c                 | ' if  j=-1 andalso varnum<maxvars then   
06e5c     FF FF 7F FF 
06e60     FF 27 0E F2 | 	cmp	local05, ##-1 wz
06e64     60 00 90 5D |  if_ne	jmp	#LR__0636
06e68     35 00 00 FF 
06e6c     38 E4 05 F1 | 	add	objptr, ##27192
06e70     F2 2A 02 FB | 	rdlong	local07, objptr
06e74     35 00 00 FF 
06e78     38 E4 85 F1 | 	sub	objptr, ##27192
06e7c     02 00 00 FF 
06e80     00 2A 56 F2 | 	cmps	local07, ##1024 wc
06e84     40 00 90 3D |  if_ae	jmp	#LR__0636
06e88     35 00 00 FF 
06e8c     38 E4 05 F1 | 	add	objptr, ##27192
06e90     F2 2E 02 FB | 	rdlong	local09, objptr
06e94     04 2E 66 F0 | 	shl	local09, #4
06e98     20 00 00 FF 
06e9c     10 E4 85 F1 | 	sub	objptr, ##16400
06ea0     F2 2E 02 F1 | 	add	local09, objptr
06ea4     17 29 62 FC | 	wrlong	local06, local09
06ea8     20 00 00 FF 
06eac     10 E4 05 F1 | 	add	objptr, ##16400
06eb0     F2 2A 02 FB | 	rdlong	local07, objptr
06eb4     15 27 02 F6 | 	mov	local05, local07
06eb8     01 2A 06 F1 | 	add	local07, #1
06ebc     F2 2A 62 FC | 	wrlong	local07, objptr
06ec0     35 00 00 FF 
06ec4     38 E4 85 F1 | 	sub	objptr, ##27192
06ec8                 | LR__0636
06ec8     13 1F 02 F6 | 	mov	local01, local05
06ecc     17 22 06 F6 | 	mov	local03, #23
06ed0     0F 2B 02 F6 | 	mov	local07, local01
06ed4     10 2F 02 F6 | 	mov	local09, local02
06ed8     11 1F 02 F6 | 	mov	local01, local03
06edc     4A 00 00 FF 
06ee0     AC E4 05 F1 | 	add	objptr, ##38060
06ee4     F2 2C 02 FB | 	rdlong	local08, objptr
06ee8     16 29 02 F6 | 	mov	local06, local08
06eec     01 28 66 F0 | 	shl	local06, #1
06ef0     16 29 02 F1 | 	add	local06, local08
06ef4     02 28 66 F0 | 	shl	local06, #2
06ef8     03 00 00 FF 
06efc     00 E4 85 F1 | 	sub	objptr, ##1536
06f00     F2 28 02 F1 | 	add	local06, objptr
06f04     14 2B 62 FC | 	wrlong	local07, local06
06f08     03 00 00 FF 
06f0c     00 E4 05 F1 | 	add	objptr, ##1536
06f10     F2 2C 02 FB | 	rdlong	local08, objptr
06f14     16 2B 02 F6 | 	mov	local07, local08
06f18     01 2A 66 F0 | 	shl	local07, #1
06f1c     16 2B 02 F1 | 	add	local07, local08
06f20     02 2A 66 F0 | 	shl	local07, #2
06f24     03 00 00 FF 
06f28     00 E4 85 F1 | 	sub	objptr, ##1536
06f2c     F2 2A 02 F1 | 	add	local07, objptr
06f30     04 2A 06 F1 | 	add	local07, #4
06f34     15 2F 62 FC | 	wrlong	local09, local07
06f38     03 00 00 FF 
06f3c     00 E4 05 F1 | 	add	objptr, ##1536
06f40     F2 2E 02 FB | 	rdlong	local09, objptr
06f44     17 2D 02 F6 | 	mov	local08, local09
06f48     01 2C 66 F0 | 	shl	local08, #1
06f4c     17 2D 02 F1 | 	add	local08, local09
06f50     02 2C 66 F0 | 	shl	local08, #2
06f54     03 00 00 FF 
06f58     00 E4 85 F1 | 	sub	objptr, ##1536
06f5c     F2 2C 02 F1 | 	add	local08, objptr
06f60     08 2C 06 F1 | 	add	local08, #8
06f64     16 1F 62 FC | 	wrlong	local01, local08
06f68     03 00 00 FF 
06f6c     00 E4 05 F1 | 	add	objptr, ##1536
06f70     F2 2A 02 FB | 	rdlong	local07, objptr
06f74     01 2A 06 F1 | 	add	local07, #1
06f78     F2 2A 62 FC | 	wrlong	local07, objptr
06f7c     4A 00 00 FF 
06f80     AC E4 85 F1 | 	sub	objptr, ##38060
06f84                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
06f84                 | ' 
06f84                 | ' 
06f84                 | ' 
06f84                 | ' 
06f84                 | ' 
06f84                 | ' 
06f84                 | ' compiledline(lineptr)=t1:  lineptr+=1 
06f84                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
06f84     00 24 0E F2 | 	cmp	local04, #0 wz
06f88     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06f8c     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
06f90     38 00 90 5D |  if_ne	jmp	#LR__0637
06f94     4A 00 00 FF 
06f98     AC E4 05 F1 | 	add	objptr, ##38060
06f9c     F2 1E 02 FB | 	rdlong	local01, objptr
06fa0     0F 2F 02 F6 | 	mov	local09, local01
06fa4     01 2E 66 F0 | 	shl	local09, #1
06fa8     0F 2F 02 F1 | 	add	local09, local01
06fac     02 2E 66 F0 | 	shl	local09, #2
06fb0     03 00 00 FF 
06fb4     00 E4 85 F1 | 	sub	objptr, ##1536
06fb8     F2 2E 02 F1 | 	add	local09, objptr
06fbc     08 2E 06 F1 | 	add	local09, #8
06fc0     17 FD 6B FC | 	wrlong	#510, local09
06fc4     47 00 00 FF 
06fc8     AC E4 85 F1 | 	sub	objptr, ##36524
06fcc                 | LR__0637
06fcc     A7 F0 03 F6 | 	mov	ptra, fp
06fd0     B2 00 A0 FD | 	call	#popregs_
06fd4                 | _compile_immediate_assign_ret
06fd4     2D 00 64 FD | 	ret
06fd8                 | 
06fd8                 | ' 
06fd8                 | ' ' ------------------ compile the line that is calling a command 
06fd8                 | ' 
06fd8                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
06fd8                 | _compile
06fd8     04 4A 05 F6 | 	mov	COUNT_, #4
06fdc     A8 00 A0 FD | 	call	#pushregs_
06fe0     09 1F 0A F6 | 	mov	local01, arg01 wz
06fe4     0A 21 02 F6 | 	mov	local02, arg02
06fe8     0B 23 02 F6 | 	mov	local03, arg03
06fec                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
06fec                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
06fec                 | '  
06fec                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
06fec                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
06fec     0C 00 90 5D |  if_ne	jmp	#LR__0640
06ff0     00 12 06 F6 | 	mov	arg01, #0
06ff4     30 F2 BF FD | 	call	#_compile_immediate
06ff8     A0 00 90 FD | 	jmp	#LR__0647
06ffc                 | LR__0640
06ffc     47 00 00 FF 
07000     AC E4 05 F1 | 	add	objptr, ##36524
07004     F2 1E 62 FC | 	wrlong	local01, objptr
07008     04 E4 05 F1 | 	add	objptr, #4
0700c     F2 20 62 FC | 	wrlong	local02, objptr
07010     47 00 00 FF 
07014     B0 E4 85 F1 | 	sub	objptr, ##36528
07018     11 13 02 F6 | 	mov	arg01, local03
0701c     01 12 06 F1 | 	add	arg01, #1
07020     04 F2 BF FD | 	call	#_compile_immediate
07024     FD 24 0A F6 | 	mov	local04, result1 wz
07028                 | ' 
07028                 | ' ucompiledline(0)=alinemajor
07028                 | ' ucompiledline(1)=alineminor
07028                 | ' 
07028                 | ' 
07028                 | ' ' cont: 0: this is the first part of the line that will continue
07028                 | ' ' 1 - this is the continuation of the line
07028                 | ' ' 2 - this is the last continued line
07028                 | ' ' 3 - this is the ome and only part
07028                 | ' 
07028                 | ' err=compile_immediate(cont+1) 
07028                 | ' if err=0 then
07028     6C 00 90 5D |  if_ne	jmp	#LR__0646
0702c                 | '   if cont=3 orelse cont=2 then 
0702c     03 22 0E F2 | 	cmp	local03, #3 wz
07030     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
07034     60 00 90 5D |  if_ne	jmp	#LR__0645
07038                 | '     if alinemajor >lastline then 
07038     4A 00 00 FF 
0703c     B8 E4 05 F1 | 	add	objptr, ##38072
07040     F2 16 02 FB | 	rdlong	arg03, objptr
07044     4A 00 00 FF 
07048     B8 E4 85 F1 | 	sub	objptr, ##38072
0704c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
07050     0C 00 90 ED |  if_be	jmp	#LR__0641
07054     0F 13 02 F6 | 	mov	arg01, local01
07058     04 F1 BF FD | 	call	#_add_line_at_end
0705c     38 00 90 FD | 	jmp	#LR__0644
07060                 | LR__0641
07060     0F 13 02 F6 | 	mov	arg01, local01
07064     24 EA BF FD | 	call	#_deleteline
07068                 | '       deleteline(alinemajor)  
07068                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' yes I know that's not optimal    
07068     4A 00 00 FF 
0706c     B8 E4 05 F1 | 	add	objptr, ##38072
07070     F2 16 02 FB | 	rdlong	arg03, objptr
07074     4A 00 00 FF 
07078     B8 E4 85 F1 | 	sub	objptr, ##38072
0707c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
07080     0C 00 90 ED |  if_be	jmp	#LR__0642
07084     0F 13 02 F6 | 	mov	arg01, local01
07088     D4 F0 BF FD | 	call	#_add_line_at_end
0708c     08 00 90 FD | 	jmp	#LR__0643
07090                 | LR__0642
07090     0F 13 02 F6 | 	mov	arg01, local01
07094     AC EE BF FD | 	call	#_insertline
07098                 | LR__0643
07098                 | LR__0644
07098                 | LR__0645
07098                 | LR__0646
07098                 | ' return err
07098     12 FB 01 F6 | 	mov	result1, local04
0709c                 | LR__0647
0709c     A7 F0 03 F6 | 	mov	ptra, fp
070a0     B2 00 A0 FD | 	call	#popregs_
070a4                 | _compile_ret
070a4     2D 00 64 FD | 	ret
070a8                 | 
070a8                 | ' 
070a8                 | ' ' ------------------ compile the line that is assigning to a variable
070a8                 | ' 
070a8                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
070a8                 | _compile_assign
070a8     03 4A 05 F6 | 	mov	COUNT_, #3
070ac     A8 00 A0 FD | 	call	#pushregs_
070b0     09 1F 0A F6 | 	mov	local01, arg01 wz
070b4     0A 21 02 F6 | 	mov	local02, arg02
070b8     0B 23 02 F6 | 	mov	local03, arg03
070bc                 | ' 
070bc                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
070bc                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
070bc     0C 00 90 5D |  if_ne	jmp	#LR__0650
070c0     00 12 06 F6 | 	mov	arg01, #0
070c4     28 FC BF FD | 	call	#_compile_immediate_assign
070c8     94 00 90 FD | 	jmp	#LR__0656
070cc                 | LR__0650
070cc     47 00 00 FF 
070d0     AC E4 05 F1 | 	add	objptr, ##36524
070d4     F2 1E 62 FC | 	wrlong	local01, objptr
070d8     04 E4 05 F1 | 	add	objptr, #4
070dc     F2 20 62 FC | 	wrlong	local02, objptr
070e0     47 00 00 FF 
070e4     B0 E4 85 F1 | 	sub	objptr, ##36528
070e8     11 13 02 F6 | 	mov	arg01, local03
070ec     01 12 06 F1 | 	add	arg01, #1
070f0     FC FB BF FD | 	call	#_compile_immediate_assign
070f4                 | ' 
070f4                 | ' ucompiledline(0)=alinemajor
070f4                 | ' ucompiledline(1)=alineminor
070f4                 | ' 
070f4                 | ' compile_immediate_assign(cont+1) 
070f4                 | ' 
070f4                 | ' if cont=3 orelse cont=2 then 
070f4     03 22 0E F2 | 	cmp	local03, #3 wz
070f8     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
070fc     60 00 90 5D |  if_ne	jmp	#LR__0655
07100                 | '   if alinemajor >lastline then 
07100     4A 00 00 FF 
07104     B8 E4 05 F1 | 	add	objptr, ##38072
07108     F2 16 02 FB | 	rdlong	arg03, objptr
0710c     4A 00 00 FF 
07110     B8 E4 85 F1 | 	sub	objptr, ##38072
07114     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
07118     0C 00 90 ED |  if_be	jmp	#LR__0651
0711c     0F 13 02 F6 | 	mov	arg01, local01
07120     3C F0 BF FD | 	call	#_add_line_at_end
07124     38 00 90 FD | 	jmp	#LR__0654
07128                 | LR__0651
07128     0F 13 02 F6 | 	mov	arg01, local01
0712c     5C E9 BF FD | 	call	#_deleteline
07130                 | '     deleteline(alinemajor)  
07130                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
07130     4A 00 00 FF 
07134     B8 E4 05 F1 | 	add	objptr, ##38072
07138     F2 16 02 FB | 	rdlong	arg03, objptr
0713c     4A 00 00 FF 
07140     B8 E4 85 F1 | 	sub	objptr, ##38072
07144     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
07148     0C 00 90 ED |  if_be	jmp	#LR__0652
0714c     0F 13 02 F6 | 	mov	arg01, local01
07150     0C F0 BF FD | 	call	#_add_line_at_end
07154     08 00 90 FD | 	jmp	#LR__0653
07158                 | LR__0652
07158     0F 13 02 F6 | 	mov	arg01, local01
0715c     E4 ED BF FD | 	call	#_insertline
07160                 | LR__0653
07160                 | LR__0654
07160                 | LR__0655
07160                 | LR__0656
07160     A7 F0 03 F6 | 	mov	ptra, fp
07164     B2 00 A0 FD | 	call	#popregs_
07168                 | _compile_assign_ret
07168     2D 00 64 FD | 	ret
0716c                 | 
0716c                 | ' 
0716c                 | ' sub compile_error(errno)
0716c                 | _compile_error
0716c     FF 04 06 F6 | 	mov	_var03, #255
07170     01 07 02 F6 | 	mov	_var04, _var02
07174     02 09 02 F6 | 	mov	_var05, _var03
07178     4A 00 00 FF 
0717c     AC E4 05 F1 | 	add	objptr, ##38060
07180     F2 0A 02 FB | 	rdlong	_var06, objptr
07184     05 0D 02 F6 | 	mov	_var07, _var06
07188     01 0C 66 F0 | 	shl	_var07, #1
0718c     05 0D 02 F1 | 	add	_var07, _var06
07190     02 0C 66 F0 | 	shl	_var07, #2
07194     03 00 00 FF 
07198     00 E4 85 F1 | 	sub	objptr, ##1536
0719c     F2 0C 02 F1 | 	add	_var07, objptr
071a0     06 13 62 FC | 	wrlong	arg01, _var07
071a4     03 00 00 FF 
071a8     00 E4 05 F1 | 	add	objptr, ##1536
071ac     F2 0C 02 FB | 	rdlong	_var07, objptr
071b0     06 0B 02 F6 | 	mov	_var06, _var07
071b4     01 0A 66 F0 | 	shl	_var06, #1
071b8     06 0B 02 F1 | 	add	_var06, _var07
071bc     02 0A 66 F0 | 	shl	_var06, #2
071c0     03 00 00 FF 
071c4     00 E4 85 F1 | 	sub	objptr, ##1536
071c8     F2 0A 02 F1 | 	add	_var06, objptr
071cc     04 0A 06 F1 | 	add	_var06, #4
071d0     05 07 62 FC | 	wrlong	_var04, _var06
071d4     03 00 00 FF 
071d8     00 E4 05 F1 | 	add	objptr, ##1536
071dc     F2 0C 02 FB | 	rdlong	_var07, objptr
071e0     06 0B 02 F6 | 	mov	_var06, _var07
071e4     01 0A 66 F0 | 	shl	_var06, #1
071e8     06 0B 02 F1 | 	add	_var06, _var07
071ec     02 0A 66 F0 | 	shl	_var06, #2
071f0     03 00 00 FF 
071f4     00 E4 85 F1 | 	sub	objptr, ##1536
071f8     F2 0A 02 F1 | 	add	_var06, objptr
071fc     08 0A 06 F1 | 	add	_var06, #8
07200     05 09 62 FC | 	wrlong	_var05, _var06
07204     03 00 00 FF 
07208     00 E4 05 F1 | 	add	objptr, ##1536
0720c     F2 12 02 FB | 	rdlong	arg01, objptr
07210     01 12 06 F1 | 	add	arg01, #1
07214     F2 12 62 FC | 	wrlong	arg01, objptr
07218     4A 00 00 FF 
0721c     AC E4 85 F1 | 	sub	objptr, ##38060
07220                 | _compile_error_ret
07220     2D 00 64 FD | 	ret
07224                 | 
07224                 | ' 
07224                 | ' sub compile_unknown() 
07224                 | _compile_unknown
07224     FF 04 06 F6 | 	mov	_var03, #255
07228     17 00 06 F6 | 	mov	_var01, #23
0722c     01 07 02 F6 | 	mov	_var04, _var02
07230     02 01 02 F6 | 	mov	_var01, _var03
07234     4A 00 00 FF 
07238     AC E4 05 F1 | 	add	objptr, ##38060
0723c     F2 08 02 FB | 	rdlong	_var05, objptr
07240     04 0B 02 F6 | 	mov	_var06, _var05
07244     01 0A 66 F0 | 	shl	_var06, #1
07248     04 0B 02 F1 | 	add	_var06, _var05
0724c     02 0A 66 F0 | 	shl	_var06, #2
07250     03 00 00 FF 
07254     00 E4 85 F1 | 	sub	objptr, ##1536
07258     F2 0A 02 F1 | 	add	_var06, objptr
0725c     05 2F 68 FC | 	wrlong	#23, _var06
07260     03 00 00 FF 
07264     00 E4 05 F1 | 	add	objptr, ##1536
07268     F2 0A 02 FB | 	rdlong	_var06, objptr
0726c     05 09 02 F6 | 	mov	_var05, _var06
07270     01 08 66 F0 | 	shl	_var05, #1
07274     05 09 02 F1 | 	add	_var05, _var06
07278     02 08 66 F0 | 	shl	_var05, #2
0727c     03 00 00 FF 
07280     00 E4 85 F1 | 	sub	objptr, ##1536
07284     F2 08 02 F1 | 	add	_var05, objptr
07288     04 08 06 F1 | 	add	_var05, #4
0728c     04 07 62 FC | 	wrlong	_var04, _var05
07290     03 00 00 FF 
07294     00 E4 05 F1 | 	add	objptr, ##1536
07298     F2 0A 02 FB | 	rdlong	_var06, objptr
0729c     05 09 02 F6 | 	mov	_var05, _var06
072a0     01 08 66 F0 | 	shl	_var05, #1
072a4     05 09 02 F1 | 	add	_var05, _var06
072a8     02 08 66 F0 | 	shl	_var05, #2
072ac     03 00 00 FF 
072b0     00 E4 85 F1 | 	sub	objptr, ##1536
072b4     F2 08 02 F1 | 	add	_var05, objptr
072b8     08 08 06 F1 | 	add	_var05, #8
072bc     04 01 62 FC | 	wrlong	_var01, _var05
072c0     03 00 00 FF 
072c4     00 E4 05 F1 | 	add	objptr, ##1536
072c8     F2 0A 02 FB | 	rdlong	_var06, objptr
072cc     01 0A 06 F1 | 	add	_var06, #1
072d0     F2 0A 62 FC | 	wrlong	_var06, objptr
072d4     4A 00 00 FF 
072d8     AC E4 85 F1 | 	sub	objptr, ##38060
072dc                 | _compile_unknown_ret
072dc     2D 00 64 FD | 	ret
072e0                 | 
072e0                 | ' 
072e0                 | ' function compile_fun_2p() as ulong
072e0                 | _compile_fun_2p
072e0     01 4A 05 F6 | 	mov	COUNT_, #1
072e4     A8 00 A0 FD | 	call	#pushregs_
072e8     8C 26 B0 FD | 	call	#_expr
072ec                 | ' 
072ec                 | ' expr()
072ec                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
072ec     37 00 00 FF 
072f0     74 E4 05 F1 | 	add	objptr, ##28276
072f4     F2 1E 02 FB | 	rdlong	local01, objptr
072f8     03 1E 66 F0 | 	shl	local01, #3
072fc     02 00 00 FF 
07300     38 E4 85 F1 | 	sub	objptr, ##1080
07304     F2 1E 02 F1 | 	add	local01, objptr
07308     04 1E 06 F1 | 	add	local01, #4
0730c     0F 1F 02 FB | 	rdlong	local01, local01
07310     11 1E 0E F2 | 	cmp	local01, #17 wz
07314     35 00 00 FF 
07318     3C E4 85 F1 | 	sub	objptr, ##27196
0731c     15 FA 05 56 |  if_ne	mov	result1, #21
07320     24 00 90 5D |  if_ne	jmp	#LR__0660
07324     37 00 00 FF 
07328     74 E4 05 F1 | 	add	objptr, ##28276
0732c     F2 1E 02 FB | 	rdlong	local01, objptr
07330     01 1E 06 F1 | 	add	local01, #1
07334     F2 1E 62 FC | 	wrlong	local01, objptr
07338     37 00 00 FF 
0733c     74 E4 85 F1 | 	sub	objptr, ##28276
07340     34 26 B0 FD | 	call	#_expr
07344     00 FA 05 F6 | 	mov	result1, #0
07348                 | LR__0660
07348     A7 F0 03 F6 | 	mov	ptra, fp
0734c     B2 00 A0 FD | 	call	#popregs_
07350                 | _compile_fun_2p_ret
07350     2D 00 64 FD | 	ret
07354                 | 
07354                 | ' 
07354                 | ' function compile_fun_3p() as ulong
07354                 | _compile_fun_3p
07354     01 4A 05 F6 | 	mov	COUNT_, #1
07358     A8 00 A0 FD | 	call	#pushregs_
0735c     18 26 B0 FD | 	call	#_expr
07360                 | ' 
07360                 | ' expr()
07360                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07360     37 00 00 FF 
07364     74 E4 05 F1 | 	add	objptr, ##28276
07368     F2 1E 02 FB | 	rdlong	local01, objptr
0736c     03 1E 66 F0 | 	shl	local01, #3
07370     02 00 00 FF 
07374     38 E4 85 F1 | 	sub	objptr, ##1080
07378     F2 1E 02 F1 | 	add	local01, objptr
0737c     04 1E 06 F1 | 	add	local01, #4
07380     0F 1F 02 FB | 	rdlong	local01, local01
07384     11 1E 0E F2 | 	cmp	local01, #17 wz
07388     35 00 00 FF 
0738c     3C E4 85 F1 | 	sub	objptr, ##27196
07390     15 FA 05 56 |  if_ne	mov	result1, #21
07394     7C 00 90 5D |  if_ne	jmp	#LR__0670
07398     37 00 00 FF 
0739c     74 E4 05 F1 | 	add	objptr, ##28276
073a0     F2 1E 02 FB | 	rdlong	local01, objptr
073a4     01 1E 06 F1 | 	add	local01, #1
073a8     F2 1E 62 FC | 	wrlong	local01, objptr
073ac     37 00 00 FF 
073b0     74 E4 85 F1 | 	sub	objptr, ##28276
073b4     C0 25 B0 FD | 	call	#_expr
073b8                 | ' expr()
073b8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
073b8     37 00 00 FF 
073bc     74 E4 05 F1 | 	add	objptr, ##28276
073c0     F2 1E 02 FB | 	rdlong	local01, objptr
073c4     03 1E 66 F0 | 	shl	local01, #3
073c8     02 00 00 FF 
073cc     38 E4 85 F1 | 	sub	objptr, ##1080
073d0     F2 1E 02 F1 | 	add	local01, objptr
073d4     04 1E 06 F1 | 	add	local01, #4
073d8     0F 1F 02 FB | 	rdlong	local01, local01
073dc     11 1E 0E F2 | 	cmp	local01, #17 wz
073e0     35 00 00 FF 
073e4     3C E4 85 F1 | 	sub	objptr, ##27196
073e8     15 FA 05 56 |  if_ne	mov	result1, #21
073ec     24 00 90 5D |  if_ne	jmp	#LR__0670
073f0     37 00 00 FF 
073f4     74 E4 05 F1 | 	add	objptr, ##28276
073f8     F2 1E 02 FB | 	rdlong	local01, objptr
073fc     01 1E 06 F1 | 	add	local01, #1
07400     F2 1E 62 FC | 	wrlong	local01, objptr
07404     37 00 00 FF 
07408     74 E4 85 F1 | 	sub	objptr, ##28276
0740c     68 25 B0 FD | 	call	#_expr
07410     00 FA 05 F6 | 	mov	result1, #0
07414                 | LR__0670
07414     A7 F0 03 F6 | 	mov	ptra, fp
07418     B2 00 A0 FD | 	call	#popregs_
0741c                 | _compile_fun_3p_ret
0741c     2D 00 64 FD | 	ret
07420                 | 
07420                 | ' 
07420                 | ' function compile_fun_4p() as ulong
07420                 | _compile_fun_4p
07420     01 4A 05 F6 | 	mov	COUNT_, #1
07424     A8 00 A0 FD | 	call	#pushregs_
07428     4C 25 B0 FD | 	call	#_expr
0742c                 | ' 
0742c                 | ' expr()
0742c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0742c     37 00 00 FF 
07430     74 E4 05 F1 | 	add	objptr, ##28276
07434     F2 1E 02 FB | 	rdlong	local01, objptr
07438     03 1E 66 F0 | 	shl	local01, #3
0743c     02 00 00 FF 
07440     38 E4 85 F1 | 	sub	objptr, ##1080
07444     F2 1E 02 F1 | 	add	local01, objptr
07448     04 1E 06 F1 | 	add	local01, #4
0744c     0F 1F 02 FB | 	rdlong	local01, local01
07450     11 1E 0E F2 | 	cmp	local01, #17 wz
07454     35 00 00 FF 
07458     3C E4 85 F1 | 	sub	objptr, ##27196
0745c     15 FA 05 56 |  if_ne	mov	result1, #21
07460     D4 00 90 5D |  if_ne	jmp	#LR__0680
07464     37 00 00 FF 
07468     74 E4 05 F1 | 	add	objptr, ##28276
0746c     F2 1E 02 FB | 	rdlong	local01, objptr
07470     01 1E 06 F1 | 	add	local01, #1
07474     F2 1E 62 FC | 	wrlong	local01, objptr
07478     37 00 00 FF 
0747c     74 E4 85 F1 | 	sub	objptr, ##28276
07480     F4 24 B0 FD | 	call	#_expr
07484                 | ' expr()
07484                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07484     37 00 00 FF 
07488     74 E4 05 F1 | 	add	objptr, ##28276
0748c     F2 1E 02 FB | 	rdlong	local01, objptr
07490     03 1E 66 F0 | 	shl	local01, #3
07494     02 00 00 FF 
07498     38 E4 85 F1 | 	sub	objptr, ##1080
0749c     F2 1E 02 F1 | 	add	local01, objptr
074a0     04 1E 06 F1 | 	add	local01, #4
074a4     0F 1F 02 FB | 	rdlong	local01, local01
074a8     11 1E 0E F2 | 	cmp	local01, #17 wz
074ac     35 00 00 FF 
074b0     3C E4 85 F1 | 	sub	objptr, ##27196
074b4     15 FA 05 56 |  if_ne	mov	result1, #21
074b8     7C 00 90 5D |  if_ne	jmp	#LR__0680
074bc     37 00 00 FF 
074c0     74 E4 05 F1 | 	add	objptr, ##28276
074c4     F2 1E 02 FB | 	rdlong	local01, objptr
074c8     01 1E 06 F1 | 	add	local01, #1
074cc     F2 1E 62 FC | 	wrlong	local01, objptr
074d0     37 00 00 FF 
074d4     74 E4 85 F1 | 	sub	objptr, ##28276
074d8     9C 24 B0 FD | 	call	#_expr
074dc                 | ' expr()
074dc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
074dc     37 00 00 FF 
074e0     74 E4 05 F1 | 	add	objptr, ##28276
074e4     F2 1E 02 FB | 	rdlong	local01, objptr
074e8     03 1E 66 F0 | 	shl	local01, #3
074ec     02 00 00 FF 
074f0     38 E4 85 F1 | 	sub	objptr, ##1080
074f4     F2 1E 02 F1 | 	add	local01, objptr
074f8     04 1E 06 F1 | 	add	local01, #4
074fc     0F 1F 02 FB | 	rdlong	local01, local01
07500     11 1E 0E F2 | 	cmp	local01, #17 wz
07504     35 00 00 FF 
07508     3C E4 85 F1 | 	sub	objptr, ##27196
0750c     15 FA 05 56 |  if_ne	mov	result1, #21
07510     24 00 90 5D |  if_ne	jmp	#LR__0680
07514     37 00 00 FF 
07518     74 E4 05 F1 | 	add	objptr, ##28276
0751c     F2 1E 02 FB | 	rdlong	local01, objptr
07520     01 1E 06 F1 | 	add	local01, #1
07524     F2 1E 62 FC | 	wrlong	local01, objptr
07528     37 00 00 FF 
0752c     74 E4 85 F1 | 	sub	objptr, ##28276
07530     44 24 B0 FD | 	call	#_expr
07534     00 FA 05 F6 | 	mov	result1, #0
07538                 | LR__0680
07538     A7 F0 03 F6 | 	mov	ptra, fp
0753c     B2 00 A0 FD | 	call	#popregs_
07540                 | _compile_fun_4p_ret
07540     2D 00 64 FD | 	ret
07544                 | 
07544                 | ' 
07544                 | ' 
07544                 | ' function compile_fun_5p() as ulong
07544                 | _compile_fun_5p
07544     01 4A 05 F6 | 	mov	COUNT_, #1
07548     A8 00 A0 FD | 	call	#pushregs_
0754c     28 24 B0 FD | 	call	#_expr
07550                 | ' 
07550                 | ' expr()
07550                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07550     37 00 00 FF 
07554     74 E4 05 F1 | 	add	objptr, ##28276
07558     F2 1E 02 FB | 	rdlong	local01, objptr
0755c     03 1E 66 F0 | 	shl	local01, #3
07560     02 00 00 FF 
07564     38 E4 85 F1 | 	sub	objptr, ##1080
07568     F2 1E 02 F1 | 	add	local01, objptr
0756c     04 1E 06 F1 | 	add	local01, #4
07570     0F 1F 02 FB | 	rdlong	local01, local01
07574     11 1E 0E F2 | 	cmp	local01, #17 wz
07578     35 00 00 FF 
0757c     3C E4 85 F1 | 	sub	objptr, ##27196
07580     15 FA 05 56 |  if_ne	mov	result1, #21
07584     2C 01 90 5D |  if_ne	jmp	#LR__0690
07588     37 00 00 FF 
0758c     74 E4 05 F1 | 	add	objptr, ##28276
07590     F2 1E 02 FB | 	rdlong	local01, objptr
07594     01 1E 06 F1 | 	add	local01, #1
07598     F2 1E 62 FC | 	wrlong	local01, objptr
0759c     37 00 00 FF 
075a0     74 E4 85 F1 | 	sub	objptr, ##28276
075a4     D0 23 B0 FD | 	call	#_expr
075a8                 | ' expr()
075a8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
075a8     37 00 00 FF 
075ac     74 E4 05 F1 | 	add	objptr, ##28276
075b0     F2 1E 02 FB | 	rdlong	local01, objptr
075b4     03 1E 66 F0 | 	shl	local01, #3
075b8     02 00 00 FF 
075bc     38 E4 85 F1 | 	sub	objptr, ##1080
075c0     F2 1E 02 F1 | 	add	local01, objptr
075c4     04 1E 06 F1 | 	add	local01, #4
075c8     0F 1F 02 FB | 	rdlong	local01, local01
075cc     11 1E 0E F2 | 	cmp	local01, #17 wz
075d0     35 00 00 FF 
075d4     3C E4 85 F1 | 	sub	objptr, ##27196
075d8     15 FA 05 56 |  if_ne	mov	result1, #21
075dc     D4 00 90 5D |  if_ne	jmp	#LR__0690
075e0     37 00 00 FF 
075e4     74 E4 05 F1 | 	add	objptr, ##28276
075e8     F2 1E 02 FB | 	rdlong	local01, objptr
075ec     01 1E 06 F1 | 	add	local01, #1
075f0     F2 1E 62 FC | 	wrlong	local01, objptr
075f4     37 00 00 FF 
075f8     74 E4 85 F1 | 	sub	objptr, ##28276
075fc     78 23 B0 FD | 	call	#_expr
07600                 | ' expr()
07600                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07600     37 00 00 FF 
07604     74 E4 05 F1 | 	add	objptr, ##28276
07608     F2 1E 02 FB | 	rdlong	local01, objptr
0760c     03 1E 66 F0 | 	shl	local01, #3
07610     02 00 00 FF 
07614     38 E4 85 F1 | 	sub	objptr, ##1080
07618     F2 1E 02 F1 | 	add	local01, objptr
0761c     04 1E 06 F1 | 	add	local01, #4
07620     0F 1F 02 FB | 	rdlong	local01, local01
07624     11 1E 0E F2 | 	cmp	local01, #17 wz
07628     35 00 00 FF 
0762c     3C E4 85 F1 | 	sub	objptr, ##27196
07630     15 FA 05 56 |  if_ne	mov	result1, #21
07634     7C 00 90 5D |  if_ne	jmp	#LR__0690
07638     37 00 00 FF 
0763c     74 E4 05 F1 | 	add	objptr, ##28276
07640     F2 1E 02 FB | 	rdlong	local01, objptr
07644     01 1E 06 F1 | 	add	local01, #1
07648     F2 1E 62 FC | 	wrlong	local01, objptr
0764c     37 00 00 FF 
07650     74 E4 85 F1 | 	sub	objptr, ##28276
07654     20 23 B0 FD | 	call	#_expr
07658                 | ' expr()
07658                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07658     37 00 00 FF 
0765c     74 E4 05 F1 | 	add	objptr, ##28276
07660     F2 1E 02 FB | 	rdlong	local01, objptr
07664     03 1E 66 F0 | 	shl	local01, #3
07668     02 00 00 FF 
0766c     38 E4 85 F1 | 	sub	objptr, ##1080
07670     F2 1E 02 F1 | 	add	local01, objptr
07674     04 1E 06 F1 | 	add	local01, #4
07678     0F 1F 02 FB | 	rdlong	local01, local01
0767c     11 1E 0E F2 | 	cmp	local01, #17 wz
07680     35 00 00 FF 
07684     3C E4 85 F1 | 	sub	objptr, ##27196
07688     15 FA 05 56 |  if_ne	mov	result1, #21
0768c     24 00 90 5D |  if_ne	jmp	#LR__0690
07690     37 00 00 FF 
07694     74 E4 05 F1 | 	add	objptr, ##28276
07698     F2 1E 02 FB | 	rdlong	local01, objptr
0769c     01 1E 06 F1 | 	add	local01, #1
076a0     F2 1E 62 FC | 	wrlong	local01, objptr
076a4     37 00 00 FF 
076a8     74 E4 85 F1 | 	sub	objptr, ##28276
076ac     C8 22 B0 FD | 	call	#_expr
076b0     00 FA 05 F6 | 	mov	result1, #0
076b4                 | LR__0690
076b4     A7 F0 03 F6 | 	mov	ptra, fp
076b8     B2 00 A0 FD | 	call	#popregs_
076bc                 | _compile_fun_5p_ret
076bc     2D 00 64 FD | 	ret
076c0                 | 
076c0                 | ' 
076c0                 | ' function compile_fun_varp() as ulong 
076c0                 | _compile_fun_varp
076c0     02 4A 05 F6 | 	mov	COUNT_, #2
076c4     A8 00 A0 FD | 	call	#pushregs_
076c8     00 1E 06 F6 | 	mov	local01, #0
076cc                 | ' i=0
076cc                 | ' if lparts(ct).token<>token_end then
076cc     37 00 00 FF 
076d0     74 E4 05 F1 | 	add	objptr, ##28276
076d4     F2 20 02 FB | 	rdlong	local02, objptr
076d8     03 20 66 F0 | 	shl	local02, #3
076dc     02 00 00 FF 
076e0     38 E4 85 F1 | 	sub	objptr, ##1080
076e4     F2 20 02 F1 | 	add	local02, objptr
076e8     04 20 06 F1 | 	add	local02, #4
076ec     10 21 02 FB | 	rdlong	local02, local02
076f0     FE 21 0E F2 | 	cmp	local02, #510 wz
076f4     35 00 00 FF 
076f8     3C E4 85 F1 | 	sub	objptr, ##27196
076fc     5C 00 90 AD |  if_e	jmp	#LR__0702
07700                 | '   do
07700                 | LR__0700
07700     74 22 B0 FD | 	call	#_expr
07704     01 1E 06 F1 | 	add	local01, #1
07708                 | '   expr()
07708                 | '    i+=1
07708                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
07708     37 00 00 FF 
0770c     74 E4 05 F1 | 	add	objptr, ##28276
07710     F2 20 02 FB | 	rdlong	local02, objptr
07714     03 20 66 F0 | 	shl	local02, #3
07718     02 00 00 FF 
0771c     38 E4 85 F1 | 	sub	objptr, ##1080
07720     F2 20 02 F1 | 	add	local02, objptr
07724     04 20 06 F1 | 	add	local02, #4
07728     10 21 02 FB | 	rdlong	local02, local02
0772c     11 20 0E F2 | 	cmp	local02, #17 wz
07730     35 00 00 FF 
07734     3C E4 85 F1 | 	sub	objptr, ##27196
07738     20 00 90 5D |  if_ne	jmp	#LR__0701
0773c     37 00 00 FF 
07740     74 E4 05 F1 | 	add	objptr, ##28276
07744     F2 20 02 FB | 	rdlong	local02, objptr
07748     01 20 06 F1 | 	add	local02, #1
0774c     F2 20 62 FC | 	wrlong	local02, objptr
07750     37 00 00 FF 
07754     74 E4 85 F1 | 	sub	objptr, ##28276
07758     A4 FF 9F FD | 	jmp	#LR__0700
0775c                 | LR__0701
0775c                 | LR__0702
0775c                 | ' return i
0775c     0F FB 01 F6 | 	mov	result1, local01
07760     A7 F0 03 F6 | 	mov	ptra, fp
07764     B2 00 A0 FD | 	call	#popregs_
07768                 | _compile_fun_varp_ret
07768     2D 00 64 FD | 	ret
0776c                 | 
0776c                 | ' 
0776c                 | ' 
0776c                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
0776c                 | _compile_print
0776c     0B 4A 05 F6 | 	mov	COUNT_, #11
07770     A8 00 A0 FD | 	call	#pushregs_
07774     00 1E 06 F6 | 	mov	local01, #0
07778     1D 22 06 F6 | 	mov	local03, #29
0777c                 | ' t1.result.uresult=0 : t1.result_type=result_uint
0777c                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
0777c     37 00 00 FF 
07780     74 E4 05 F1 | 	add	objptr, ##28276
07784     F2 24 02 FB | 	rdlong	local04, objptr
07788     03 24 66 F0 | 	shl	local04, #3
0778c     02 00 00 FF 
07790     38 E4 85 F1 | 	sub	objptr, ##1080
07794     F2 24 02 F1 | 	add	local04, objptr
07798     04 24 06 F1 | 	add	local04, #4
0779c     12 25 02 FB | 	rdlong	local04, local04
077a0     FE 25 0E F2 | 	cmp	local04, #510 wz
077a4     35 00 00 FF 
077a8     3C E4 85 F1 | 	sub	objptr, ##27196
077ac     68 01 90 5D |  if_ne	jmp	#LR__0710
077b0     20 22 06 F6 | 	mov	local03, #32
077b4     0F 27 02 F6 | 	mov	local05, local01
077b8     10 29 02 F6 | 	mov	local06, local02
077bc     11 2B 02 F6 | 	mov	local07, local03
077c0     4A 00 00 FF 
077c4     AC E4 05 F1 | 	add	objptr, ##38060
077c8     F2 2C 02 FB | 	rdlong	local08, objptr
077cc     16 2F 02 F6 | 	mov	local09, local08
077d0     01 2E 66 F0 | 	shl	local09, #1
077d4     16 2F 02 F1 | 	add	local09, local08
077d8     02 2E 66 F0 | 	shl	local09, #2
077dc     03 00 00 FF 
077e0     00 E4 85 F1 | 	sub	objptr, ##1536
077e4     F2 2E 02 F1 | 	add	local09, objptr
077e8     17 27 62 FC | 	wrlong	local05, local09
077ec     03 00 00 FF 
077f0     00 E4 05 F1 | 	add	objptr, ##1536
077f4     F2 26 02 FB | 	rdlong	local05, objptr
077f8     13 31 02 F6 | 	mov	local10, local05
077fc     01 30 66 F0 | 	shl	local10, #1
07800     13 31 02 F1 | 	add	local10, local05
07804     02 30 66 F0 | 	shl	local10, #2
07808     03 00 00 FF 
0780c     00 E4 85 F1 | 	sub	objptr, ##1536
07810     F2 30 02 F1 | 	add	local10, objptr
07814     04 30 06 F1 | 	add	local10, #4
07818     18 29 62 FC | 	wrlong	local06, local10
0781c     03 00 00 FF 
07820     00 E4 05 F1 | 	add	objptr, ##1536
07824     F2 26 02 FB | 	rdlong	local05, objptr
07828     13 33 02 F6 | 	mov	local11, local05
0782c     01 32 66 F0 | 	shl	local11, #1
07830     13 33 02 F1 | 	add	local11, local05
07834     02 32 66 F0 | 	shl	local11, #2
07838     03 00 00 FF 
0783c     00 E4 85 F1 | 	sub	objptr, ##1536
07840     F2 32 02 F1 | 	add	local11, objptr
07844     08 32 06 F1 | 	add	local11, #8
07848     19 2B 62 FC | 	wrlong	local07, local11
0784c     03 00 00 FF 
07850     00 E4 05 F1 | 	add	objptr, ##1536
07854     F2 26 02 FB | 	rdlong	local05, objptr
07858     01 26 06 F1 | 	add	local05, #1
0785c     F2 26 62 FC | 	wrlong	local05, objptr
07860     44 22 06 F6 | 	mov	local03, #68
07864     0F 27 02 F6 | 	mov	local05, local01
07868     10 29 02 F6 | 	mov	local06, local02
0786c     11 2B 02 F6 | 	mov	local07, local03
07870     F2 2C 02 FB | 	rdlong	local08, objptr
07874     16 2F 02 F6 | 	mov	local09, local08
07878     01 2E 66 F0 | 	shl	local09, #1
0787c     16 2F 02 F1 | 	add	local09, local08
07880     02 2E 66 F0 | 	shl	local09, #2
07884     03 00 00 FF 
07888     00 E4 85 F1 | 	sub	objptr, ##1536
0788c     F2 2E 02 F1 | 	add	local09, objptr
07890     17 27 62 FC | 	wrlong	local05, local09
07894     03 00 00 FF 
07898     00 E4 05 F1 | 	add	objptr, ##1536
0789c     F2 32 02 FB | 	rdlong	local11, objptr
078a0     19 31 02 F6 | 	mov	local10, local11
078a4     01 30 66 F0 | 	shl	local10, #1
078a8     19 31 02 F1 | 	add	local10, local11
078ac     02 30 66 F0 | 	shl	local10, #2
078b0     03 00 00 FF 
078b4     00 E4 85 F1 | 	sub	objptr, ##1536
078b8     F2 30 02 F1 | 	add	local10, objptr
078bc     04 30 06 F1 | 	add	local10, #4
078c0     18 29 62 FC | 	wrlong	local06, local10
078c4     03 00 00 FF 
078c8     00 E4 05 F1 | 	add	objptr, ##1536
078cc     F2 30 02 FB | 	rdlong	local10, objptr
078d0     18 33 02 F6 | 	mov	local11, local10
078d4     01 32 66 F0 | 	shl	local11, #1
078d8     18 33 02 F1 | 	add	local11, local10
078dc     02 32 66 F0 | 	shl	local11, #2
078e0     03 00 00 FF 
078e4     00 E4 85 F1 | 	sub	objptr, ##1536
078e8     F2 32 02 F1 | 	add	local11, objptr
078ec     08 32 06 F1 | 	add	local11, #8
078f0     19 2B 62 FC | 	wrlong	local07, local11
078f4     03 00 00 FF 
078f8     00 E4 05 F1 | 	add	objptr, ##1536
078fc     F2 26 02 FB | 	rdlong	local05, objptr
07900     01 26 06 F1 | 	add	local05, #1
07904     F2 26 62 FC | 	wrlong	local05, objptr
07908     4A 00 00 FF 
0790c     AC E4 85 F1 | 	sub	objptr, ##38060
07910     00 FA 05 F6 | 	mov	result1, #0
07914     E8 05 90 FD | 	jmp	#LR__0717
07918                 | LR__0710
07918                 | ' do
07918                 | LR__0711
07918     5C 20 B0 FD | 	call	#_expr
0791c                 | '   expr()  : print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
0791c     00 12 06 F6 | 	mov	arg01, #0
07920     2C EE B1 FD | 	call	#__system___getiolock_0540
07924     FD 12 02 F6 | 	mov	arg01, result1
07928     E4 93 B1 FD | 	call	#__system___lockmem
0792c     85 01 00 FF 
07930     34 15 06 F6 | 	mov	arg02, ##@LR__5332
07934     00 12 06 F6 | 	mov	arg01, #0
07938     00 16 06 F6 | 	mov	arg03, #0
0793c     C4 A0 B1 FD | 	call	#__system___basic_print_string
07940     37 00 00 FF 
07944     74 E4 05 F1 | 	add	objptr, ##28276
07948     F2 2C 02 FB | 	rdlong	local08, objptr
0794c     03 2C 66 F0 | 	shl	local08, #3
07950     02 00 00 FF 
07954     38 E4 85 F1 | 	sub	objptr, ##1080
07958     F2 2C 02 F1 | 	add	local08, objptr
0795c     04 2C 06 F1 | 	add	local08, #4
07960     16 15 02 FB | 	rdlong	arg02, local08
07964     00 12 06 F6 | 	mov	arg01, #0
07968     00 16 06 F6 | 	mov	arg03, #0
0796c     0A 18 06 F6 | 	mov	arg04, #10
07970     35 00 00 FF 
07974     3C E4 85 F1 | 	sub	objptr, ##27196
07978     CC A0 B1 FD | 	call	#__system___basic_print_integer
0797c     85 01 00 FF 
07980     4D 15 06 F6 | 	mov	arg02, ##@LR__5333
07984     00 12 06 F6 | 	mov	arg01, #0
07988     00 16 06 F6 | 	mov	arg03, #0
0798c     74 A0 B1 FD | 	call	#__system___basic_print_string
07990     37 00 00 FF 
07994     74 E4 05 F1 | 	add	objptr, ##28276
07998     F2 2C 02 FB | 	rdlong	local08, objptr
0799c     03 2C 66 F0 | 	shl	local08, #3
079a0     02 00 00 FF 
079a4     38 E4 85 F1 | 	sub	objptr, ##1080
079a8     F2 2C 02 F1 | 	add	local08, objptr
079ac     16 15 02 FB | 	rdlong	arg02, local08
079b0     00 12 06 F6 | 	mov	arg01, #0
079b4     00 16 06 F6 | 	mov	arg03, #0
079b8     35 00 00 FF 
079bc     3C E4 85 F1 | 	sub	objptr, ##27196
079c0     40 A0 B1 FD | 	call	#__system___basic_print_string
079c4     00 12 06 F6 | 	mov	arg01, #0
079c8     0A 14 06 F6 | 	mov	arg02, #10
079cc     00 16 06 F6 | 	mov	arg03, #0
079d0     D8 9F B1 FD | 	call	#__system___basic_print_char
079d4     00 12 06 F6 | 	mov	arg01, #0
079d8     74 ED B1 FD | 	call	#__system___getiolock_0540
079dc     FD 00 68 FC | 	wrlong	#0, result1
079e0     00 FA 05 F6 | 	mov	result1, #0
079e4                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
079e4     37 00 00 FF 
079e8     74 E4 05 F1 | 	add	objptr, ##28276
079ec     F2 24 02 FB | 	rdlong	local04, objptr
079f0     03 24 66 F0 | 	shl	local04, #3
079f4     02 00 00 FF 
079f8     38 E4 85 F1 | 	sub	objptr, ##1080
079fc     F2 24 02 F1 | 	add	local04, objptr
07a00     04 24 06 F1 | 	add	local04, #4
07a04     12 2D 02 FB | 	rdlong	local08, local04
07a08     11 2C 0E F2 | 	cmp	local08, #17 wz
07a0c     35 00 00 FF 
07a10     3C E4 85 F1 | 	sub	objptr, ##27196
07a14     60 01 90 5D |  if_ne	jmp	#LR__0712
07a18     21 22 06 F6 | 	mov	local03, #33
07a1c     0F 27 02 F6 | 	mov	local05, local01
07a20     10 29 02 F6 | 	mov	local06, local02
07a24     11 2B 02 F6 | 	mov	local07, local03
07a28     4A 00 00 FF 
07a2c     AC E4 05 F1 | 	add	objptr, ##38060
07a30     F2 2C 02 FB | 	rdlong	local08, objptr
07a34     16 2F 02 F6 | 	mov	local09, local08
07a38     01 2E 66 F0 | 	shl	local09, #1
07a3c     16 2F 02 F1 | 	add	local09, local08
07a40     02 2E 66 F0 | 	shl	local09, #2
07a44     03 00 00 FF 
07a48     00 E4 85 F1 | 	sub	objptr, ##1536
07a4c     F2 2E 02 F1 | 	add	local09, objptr
07a50     17 27 62 FC | 	wrlong	local05, local09
07a54     03 00 00 FF 
07a58     00 E4 05 F1 | 	add	objptr, ##1536
07a5c     F2 32 02 FB | 	rdlong	local11, objptr
07a60     19 31 02 F6 | 	mov	local10, local11
07a64     01 30 66 F0 | 	shl	local10, #1
07a68     19 31 02 F1 | 	add	local10, local11
07a6c     02 30 66 F0 | 	shl	local10, #2
07a70     03 00 00 FF 
07a74     00 E4 85 F1 | 	sub	objptr, ##1536
07a78     F2 30 02 F1 | 	add	local10, objptr
07a7c     04 30 06 F1 | 	add	local10, #4
07a80     18 29 62 FC | 	wrlong	local06, local10
07a84     03 00 00 FF 
07a88     00 E4 05 F1 | 	add	objptr, ##1536
07a8c     F2 26 02 FB | 	rdlong	local05, objptr
07a90     13 33 02 F6 | 	mov	local11, local05
07a94     01 32 66 F0 | 	shl	local11, #1
07a98     13 33 02 F1 | 	add	local11, local05
07a9c     02 32 66 F0 | 	shl	local11, #2
07aa0     03 00 00 FF 
07aa4     00 E4 85 F1 | 	sub	objptr, ##1536
07aa8     F2 32 02 F1 | 	add	local11, objptr
07aac     08 32 06 F1 | 	add	local11, #8
07ab0     19 2B 62 FC | 	wrlong	local07, local11
07ab4     03 00 00 FF 
07ab8     00 E4 05 F1 | 	add	objptr, ##1536
07abc     F2 26 02 FB | 	rdlong	local05, objptr
07ac0     01 26 06 F1 | 	add	local05, #1
07ac4     F2 26 62 FC | 	wrlong	local05, objptr
07ac8     44 22 06 F6 | 	mov	local03, #68
07acc     0F 27 02 F6 | 	mov	local05, local01
07ad0     10 29 02 F6 | 	mov	local06, local02
07ad4     11 2B 02 F6 | 	mov	local07, local03
07ad8     F2 2C 02 FB | 	rdlong	local08, objptr
07adc     16 2F 02 F6 | 	mov	local09, local08
07ae0     01 2E 66 F0 | 	shl	local09, #1
07ae4     16 2F 02 F1 | 	add	local09, local08
07ae8     02 2E 66 F0 | 	shl	local09, #2
07aec     03 00 00 FF 
07af0     00 E4 85 F1 | 	sub	objptr, ##1536
07af4     F2 2E 02 F1 | 	add	local09, objptr
07af8     17 27 62 FC | 	wrlong	local05, local09
07afc     03 00 00 FF 
07b00     00 E4 05 F1 | 	add	objptr, ##1536
07b04     F2 32 02 FB | 	rdlong	local11, objptr
07b08     19 31 02 F6 | 	mov	local10, local11
07b0c     01 30 66 F0 | 	shl	local10, #1
07b10     19 31 02 F1 | 	add	local10, local11
07b14     02 30 66 F0 | 	shl	local10, #2
07b18     03 00 00 FF 
07b1c     00 E4 85 F1 | 	sub	objptr, ##1536
07b20     F2 30 02 F1 | 	add	local10, objptr
07b24     04 30 06 F1 | 	add	local10, #4
07b28     18 29 62 FC | 	wrlong	local06, local10
07b2c     03 00 00 FF 
07b30     00 E4 05 F1 | 	add	objptr, ##1536
07b34     F2 30 02 FB | 	rdlong	local10, objptr
07b38     18 33 02 F6 | 	mov	local11, local10
07b3c     01 32 66 F0 | 	shl	local11, #1
07b40     18 33 02 F1 | 	add	local11, local10
07b44     02 32 66 F0 | 	shl	local11, #2
07b48     03 00 00 FF 
07b4c     00 E4 85 F1 | 	sub	objptr, ##1536
07b50     F2 32 02 F1 | 	add	local11, objptr
07b54     08 32 06 F1 | 	add	local11, #8
07b58     19 2B 62 FC | 	wrlong	local07, local11
07b5c     03 00 00 FF 
07b60     00 E4 05 F1 | 	add	objptr, ##1536
07b64     F2 26 02 FB | 	rdlong	local05, objptr
07b68     01 26 06 F1 | 	add	local05, #1
07b6c     F2 26 62 FC | 	wrlong	local05, objptr
07b70     4A 00 00 FF 
07b74     AC E4 85 F1 | 	sub	objptr, ##38060
07b78                 | LR__0712
07b78                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
07b78     37 00 00 FF 
07b7c     74 E4 05 F1 | 	add	objptr, ##28276
07b80     F2 24 02 FB | 	rdlong	local04, objptr
07b84     03 24 66 F0 | 	shl	local04, #3
07b88     02 00 00 FF 
07b8c     38 E4 85 F1 | 	sub	objptr, ##1080
07b90     F2 24 02 F1 | 	add	local04, objptr
07b94     04 24 06 F1 | 	add	local04, #4
07b98     12 2D 02 FB | 	rdlong	local08, local04
07b9c     12 2C 0E F2 | 	cmp	local08, #18 wz
07ba0     35 00 00 FF 
07ba4     3C E4 85 F1 | 	sub	objptr, ##27196
07ba8     60 01 90 5D |  if_ne	jmp	#LR__0713
07bac     22 22 06 F6 | 	mov	local03, #34
07bb0     0F 27 02 F6 | 	mov	local05, local01
07bb4     10 29 02 F6 | 	mov	local06, local02
07bb8     11 2B 02 F6 | 	mov	local07, local03
07bbc     4A 00 00 FF 
07bc0     AC E4 05 F1 | 	add	objptr, ##38060
07bc4     F2 2C 02 FB | 	rdlong	local08, objptr
07bc8     16 2F 02 F6 | 	mov	local09, local08
07bcc     01 2E 66 F0 | 	shl	local09, #1
07bd0     16 2F 02 F1 | 	add	local09, local08
07bd4     02 2E 66 F0 | 	shl	local09, #2
07bd8     03 00 00 FF 
07bdc     00 E4 85 F1 | 	sub	objptr, ##1536
07be0     F2 2E 02 F1 | 	add	local09, objptr
07be4     17 27 62 FC | 	wrlong	local05, local09
07be8     03 00 00 FF 
07bec     00 E4 05 F1 | 	add	objptr, ##1536
07bf0     F2 32 02 FB | 	rdlong	local11, objptr
07bf4     19 31 02 F6 | 	mov	local10, local11
07bf8     01 30 66 F0 | 	shl	local10, #1
07bfc     19 31 02 F1 | 	add	local10, local11
07c00     02 30 66 F0 | 	shl	local10, #2
07c04     03 00 00 FF 
07c08     00 E4 85 F1 | 	sub	objptr, ##1536
07c0c     F2 30 02 F1 | 	add	local10, objptr
07c10     04 30 06 F1 | 	add	local10, #4
07c14     18 29 62 FC | 	wrlong	local06, local10
07c18     03 00 00 FF 
07c1c     00 E4 05 F1 | 	add	objptr, ##1536
07c20     F2 26 02 FB | 	rdlong	local05, objptr
07c24     13 33 02 F6 | 	mov	local11, local05
07c28     01 32 66 F0 | 	shl	local11, #1
07c2c     13 33 02 F1 | 	add	local11, local05
07c30     02 32 66 F0 | 	shl	local11, #2
07c34     03 00 00 FF 
07c38     00 E4 85 F1 | 	sub	objptr, ##1536
07c3c     F2 32 02 F1 | 	add	local11, objptr
07c40     08 32 06 F1 | 	add	local11, #8
07c44     19 2B 62 FC | 	wrlong	local07, local11
07c48     03 00 00 FF 
07c4c     00 E4 05 F1 | 	add	objptr, ##1536
07c50     F2 26 02 FB | 	rdlong	local05, objptr
07c54     01 26 06 F1 | 	add	local05, #1
07c58     F2 26 62 FC | 	wrlong	local05, objptr
07c5c     44 22 06 F6 | 	mov	local03, #68
07c60     0F 27 02 F6 | 	mov	local05, local01
07c64     10 29 02 F6 | 	mov	local06, local02
07c68     11 2B 02 F6 | 	mov	local07, local03
07c6c     F2 2C 02 FB | 	rdlong	local08, objptr
07c70     16 2F 02 F6 | 	mov	local09, local08
07c74     01 2E 66 F0 | 	shl	local09, #1
07c78     16 2F 02 F1 | 	add	local09, local08
07c7c     02 2E 66 F0 | 	shl	local09, #2
07c80     03 00 00 FF 
07c84     00 E4 85 F1 | 	sub	objptr, ##1536
07c88     F2 2E 02 F1 | 	add	local09, objptr
07c8c     17 27 62 FC | 	wrlong	local05, local09
07c90     03 00 00 FF 
07c94     00 E4 05 F1 | 	add	objptr, ##1536
07c98     F2 32 02 FB | 	rdlong	local11, objptr
07c9c     19 31 02 F6 | 	mov	local10, local11
07ca0     01 30 66 F0 | 	shl	local10, #1
07ca4     19 31 02 F1 | 	add	local10, local11
07ca8     02 30 66 F0 | 	shl	local10, #2
07cac     03 00 00 FF 
07cb0     00 E4 85 F1 | 	sub	objptr, ##1536
07cb4     F2 30 02 F1 | 	add	local10, objptr
07cb8     04 30 06 F1 | 	add	local10, #4
07cbc     18 29 62 FC | 	wrlong	local06, local10
07cc0     03 00 00 FF 
07cc4     00 E4 05 F1 | 	add	objptr, ##1536
07cc8     F2 30 02 FB | 	rdlong	local10, objptr
07ccc     18 33 02 F6 | 	mov	local11, local10
07cd0     01 32 66 F0 | 	shl	local11, #1
07cd4     18 33 02 F1 | 	add	local11, local10
07cd8     02 32 66 F0 | 	shl	local11, #2
07cdc     03 00 00 FF 
07ce0     00 E4 85 F1 | 	sub	objptr, ##1536
07ce4     F2 32 02 F1 | 	add	local11, objptr
07ce8     08 32 06 F1 | 	add	local11, #8
07cec     19 2B 62 FC | 	wrlong	local07, local11
07cf0     03 00 00 FF 
07cf4     00 E4 05 F1 | 	add	objptr, ##1536
07cf8     F2 26 02 FB | 	rdlong	local05, objptr
07cfc     01 26 06 F1 | 	add	local05, #1
07d00     F2 26 62 FC | 	wrlong	local05, objptr
07d04     4A 00 00 FF 
07d08     AC E4 85 F1 | 	sub	objptr, ##38060
07d0c                 | LR__0713
07d0c                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
07d0c     37 00 00 FF 
07d10     74 E4 05 F1 | 	add	objptr, ##28276
07d14     F2 24 02 FB | 	rdlong	local04, objptr
07d18     03 24 66 F0 | 	shl	local04, #3
07d1c     02 00 00 FF 
07d20     38 E4 85 F1 | 	sub	objptr, ##1080
07d24     F2 24 02 F1 | 	add	local04, objptr
07d28     04 24 06 F1 | 	add	local04, #4
07d2c     12 2D 02 FB | 	rdlong	local08, local04
07d30     FE 2D 0E F2 | 	cmp	local08, #510 wz
07d34     35 00 00 FF 
07d38     3C E4 85 F1 | 	sub	objptr, ##27196
07d3c     B8 00 90 5D |  if_ne	jmp	#LR__0714
07d40     44 22 06 F6 | 	mov	local03, #68
07d44     0F 27 02 F6 | 	mov	local05, local01
07d48     10 29 02 F6 | 	mov	local06, local02
07d4c     11 2B 02 F6 | 	mov	local07, local03
07d50     4A 00 00 FF 
07d54     AC E4 05 F1 | 	add	objptr, ##38060
07d58     F2 2C 02 FB | 	rdlong	local08, objptr
07d5c     16 2F 02 F6 | 	mov	local09, local08
07d60     01 2E 66 F0 | 	shl	local09, #1
07d64     16 2F 02 F1 | 	add	local09, local08
07d68     02 2E 66 F0 | 	shl	local09, #2
07d6c     03 00 00 FF 
07d70     00 E4 85 F1 | 	sub	objptr, ##1536
07d74     F2 2E 02 F1 | 	add	local09, objptr
07d78     17 27 62 FC | 	wrlong	local05, local09
07d7c     03 00 00 FF 
07d80     00 E4 05 F1 | 	add	objptr, ##1536
07d84     F2 32 02 FB | 	rdlong	local11, objptr
07d88     19 31 02 F6 | 	mov	local10, local11
07d8c     01 30 66 F0 | 	shl	local10, #1
07d90     19 31 02 F1 | 	add	local10, local11
07d94     02 30 66 F0 | 	shl	local10, #2
07d98     03 00 00 FF 
07d9c     00 E4 85 F1 | 	sub	objptr, ##1536
07da0     F2 30 02 F1 | 	add	local10, objptr
07da4     04 30 06 F1 | 	add	local10, #4
07da8     18 29 62 FC | 	wrlong	local06, local10
07dac     03 00 00 FF 
07db0     00 E4 05 F1 | 	add	objptr, ##1536
07db4     F2 30 02 FB | 	rdlong	local10, objptr
07db8     18 33 02 F6 | 	mov	local11, local10
07dbc     01 32 66 F0 | 	shl	local11, #1
07dc0     18 33 02 F1 | 	add	local11, local10
07dc4     02 32 66 F0 | 	shl	local11, #2
07dc8     03 00 00 FF 
07dcc     00 E4 85 F1 | 	sub	objptr, ##1536
07dd0     F2 32 02 F1 | 	add	local11, objptr
07dd4     08 32 06 F1 | 	add	local11, #8
07dd8     19 2B 62 FC | 	wrlong	local07, local11
07ddc     03 00 00 FF 
07de0     00 E4 05 F1 | 	add	objptr, ##1536
07de4     F2 26 02 FB | 	rdlong	local05, objptr
07de8     01 26 06 F1 | 	add	local05, #1
07dec     F2 26 62 FC | 	wrlong	local05, objptr
07df0     4A 00 00 FF 
07df4     AC E4 85 F1 | 	sub	objptr, ##38060
07df8                 | LR__0714
07df8                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
07df8     37 00 00 FF 
07dfc     74 E4 05 F1 | 	add	objptr, ##28276
07e00     F2 24 02 FB | 	rdlong	local04, objptr
07e04     03 24 66 F0 | 	shl	local04, #3
07e08     02 00 00 FF 
07e0c     38 E4 85 F1 | 	sub	objptr, ##1080
07e10     F2 24 02 F1 | 	add	local04, objptr
07e14     04 24 06 F1 | 	add	local04, #4
07e18     12 2D 02 FB | 	rdlong	local08, local04
07e1c     11 2C 0E F2 | 	cmp	local08, #17 wz
07e20     35 00 00 FF 
07e24     3C E4 85 F1 | 	sub	objptr, ##27196
07e28     6C 00 90 AD |  if_e	jmp	#LR__0715
07e2c     37 00 00 FF 
07e30     74 E4 05 F1 | 	add	objptr, ##28276
07e34     F2 2C 02 FB | 	rdlong	local08, objptr
07e38     03 2C 66 F0 | 	shl	local08, #3
07e3c     02 00 00 FF 
07e40     38 E4 85 F1 | 	sub	objptr, ##1080
07e44     F2 2C 02 F1 | 	add	local08, objptr
07e48     04 2C 06 F1 | 	add	local08, #4
07e4c     16 2D 02 FB | 	rdlong	local08, local08
07e50     12 2C 0E F2 | 	cmp	local08, #18 wz
07e54     35 00 00 FF 
07e58     3C E4 85 F1 | 	sub	objptr, ##27196
07e5c     38 00 90 AD |  if_e	jmp	#LR__0715
07e60     37 00 00 FF 
07e64     74 E4 05 F1 | 	add	objptr, ##28276
07e68     F2 32 02 FB | 	rdlong	local11, objptr
07e6c     03 32 66 F0 | 	shl	local11, #3
07e70     02 00 00 FF 
07e74     38 E4 85 F1 | 	sub	objptr, ##1080
07e78     F2 32 02 F1 | 	add	local11, objptr
07e7c     04 32 06 F1 | 	add	local11, #4
07e80     19 33 02 FB | 	rdlong	local11, local11
07e84     FE 33 0E F2 | 	cmp	local11, #510 wz
07e88     35 00 00 FF 
07e8c     3C E4 85 F1 | 	sub	objptr, ##27196
07e90     16 FA 05 56 |  if_ne	mov	result1, #22
07e94     68 00 90 5D |  if_ne	jmp	#LR__0717
07e98                 | LR__0715
07e98     37 00 00 FF 
07e9c     74 E4 05 F1 | 	add	objptr, ##28276
07ea0     F2 24 02 FB | 	rdlong	local04, objptr
07ea4     01 24 06 F1 | 	add	local04, #1
07ea8     F2 24 62 FC | 	wrlong	local04, objptr
07eac     03 24 66 F0 | 	shl	local04, #3
07eb0     02 00 00 FF 
07eb4     38 E4 85 F1 | 	sub	objptr, ##1080
07eb8     F2 24 02 F1 | 	add	local04, objptr
07ebc     04 24 06 F1 | 	add	local04, #4
07ec0     12 2D 02 FB | 	rdlong	local08, local04
07ec4     FE 2D 0E F2 | 	cmp	local08, #510 wz
07ec8     35 00 00 FF 
07ecc     3C E4 85 F1 | 	sub	objptr, ##27196
07ed0     28 00 90 AD |  if_e	jmp	#LR__0716
07ed4     37 00 00 FF 
07ed8     74 E4 05 F1 | 	add	objptr, ##28276
07edc     F2 32 02 FB | 	rdlong	local11, objptr
07ee0     0E 00 00 FF 
07ee4     1C E4 05 F1 | 	add	objptr, ##7196
07ee8     F2 30 02 FB | 	rdlong	local10, objptr
07eec     45 00 00 FF 
07ef0     90 E4 85 F1 | 	sub	objptr, ##35472
07ef4     18 33 52 F2 | 	cmps	local11, local10 wc
07ef8     1C FA 9F CD |  if_b	jmp	#LR__0711
07efc                 | LR__0716
07efc                 | ' return 0
07efc     00 FA 05 F6 | 	mov	result1, #0
07f00                 | LR__0717
07f00     A7 F0 03 F6 | 	mov	ptra, fp
07f04     B2 00 A0 FD | 	call	#popregs_
07f08                 | _compile_print_ret
07f08     2D 00 64 FD | 	ret
07f0c                 | 
07f0c                 | ' 
07f0c                 | ' function compile_if() as ulong  
07f0c                 | _compile_if
07f0c     05 4A 05 F6 | 	mov	COUNT_, #5
07f10     A8 00 A0 FD | 	call	#pushregs_
07f14                 | _compile_if_enter
07f14     60 1A B0 FD | 	call	#_expr
07f18                 | ' expr()
07f18                 | ' return 0
07f18     37 00 00 FF 
07f1c     74 E4 05 F1 | 	add	objptr, ##28276
07f20     F2 FA 01 FB | 	rdlong	result1, objptr
07f24     01 FA 05 F1 | 	add	result1, #1
07f28     F2 FA 61 FC | 	wrlong	result1, objptr
07f2c     58 22 06 F6 | 	mov	local03, #88
07f30     0F 25 02 F6 | 	mov	local04, local01
07f34     10 27 02 F6 | 	mov	local05, local02
07f38     11 1F 02 F6 | 	mov	local01, local03
07f3c     13 00 00 FF 
07f40     38 E4 05 F1 | 	add	objptr, ##9784
07f44     F2 12 02 FB | 	rdlong	arg01, objptr
07f48     09 FB 01 F6 | 	mov	result1, arg01
07f4c     01 FA 65 F0 | 	shl	result1, #1
07f50     09 FB 01 F1 | 	add	result1, arg01
07f54     02 FA 65 F0 | 	shl	result1, #2
07f58     03 00 00 FF 
07f5c     00 E4 85 F1 | 	sub	objptr, ##1536
07f60     F2 FA 01 F1 | 	add	result1, objptr
07f64     FD 24 62 FC | 	wrlong	local04, result1
07f68     03 00 00 FF 
07f6c     00 E4 05 F1 | 	add	objptr, ##1536
07f70     F2 12 02 FB | 	rdlong	arg01, objptr
07f74     09 25 02 F6 | 	mov	local04, arg01
07f78     01 24 66 F0 | 	shl	local04, #1
07f7c     09 25 02 F1 | 	add	local04, arg01
07f80     02 24 66 F0 | 	shl	local04, #2
07f84     03 00 00 FF 
07f88     00 E4 85 F1 | 	sub	objptr, ##1536
07f8c     F2 24 02 F1 | 	add	local04, objptr
07f90     04 24 06 F1 | 	add	local04, #4
07f94     12 27 62 FC | 	wrlong	local05, local04
07f98     03 00 00 FF 
07f9c     00 E4 05 F1 | 	add	objptr, ##1536
07fa0     F2 24 02 FB | 	rdlong	local04, objptr
07fa4     12 27 02 F6 | 	mov	local05, local04
07fa8     01 26 66 F0 | 	shl	local05, #1
07fac     12 27 02 F1 | 	add	local05, local04
07fb0     02 26 66 F0 | 	shl	local05, #2
07fb4     03 00 00 FF 
07fb8     00 E4 85 F1 | 	sub	objptr, ##1536
07fbc     F2 26 02 F1 | 	add	local05, objptr
07fc0     08 26 06 F1 | 	add	local05, #8
07fc4     13 1F 62 FC | 	wrlong	local01, local05
07fc8     03 00 00 FF 
07fcc     00 E4 05 F1 | 	add	objptr, ##1536
07fd0     F2 24 02 FB | 	rdlong	local04, objptr
07fd4     01 24 06 F1 | 	add	local04, #1
07fd8     F2 24 62 FC | 	wrlong	local04, objptr
07fdc                 | ' 
07fdc                 | ' 'print "In compile_if"
07fdc                 | ' compile_fun_1p()
07fdc                 | ' cmd=lparts(ct).token : ct+=1
07fdc                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
07fdc                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
07fdc                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
07fdc     13 00 00 FF 
07fe0     38 E4 85 F1 | 	sub	objptr, ##9784
07fe4     F2 26 02 FB | 	rdlong	local05, objptr
07fe8     01 26 06 F1 | 	add	local05, #1
07fec     03 26 66 F0 | 	shl	local05, #3
07ff0     02 00 00 FF 
07ff4     38 E4 85 F1 | 	sub	objptr, ##1080
07ff8     F2 26 02 F1 | 	add	local05, objptr
07ffc     13 13 02 FB | 	rdlong	arg01, local05
08000     35 00 00 FF 
08004     3C E4 85 F1 | 	sub	objptr, ##27196
08008                 | ' 
08008                 | ' select case s
08008     83 01 00 FF 
0800c     47 15 06 F6 | 	mov	arg02, ##@LR__5117
08010     24 8D B1 FD | 	call	#__system___string_cmp
08014     00 FA 0D F2 | 	cmp	result1, #0 wz
08018     1B FA 05 A6 |  if_e	mov	result1, #27
0801c     00 FA 05 56 |  if_ne	mov	result1, #0
08020     00 FA 0D F2 | 	cmp	result1, #0 wz
08024     0C 00 90 AD |  if_e	jmp	#LR__0720
08028     05 12 06 F6 | 	mov	arg01, #5
0802c     C0 EC BF FD | 	call	#_compile_immediate_assign
08030     08 00 90 FD | 	jmp	#LR__0721
08034                 | LR__0720
08034     05 12 06 F6 | 	mov	arg01, #5
08038     EC E1 BF FD | 	call	#_compile_immediate
0803c                 | LR__0721
0803c                 | ' 
0803c                 | ' 
0803c                 | ' return 0
0803c     00 FA 05 F6 | 	mov	result1, #0
08040     A7 F0 03 F6 | 	mov	ptra, fp
08044     B2 00 A0 FD | 	call	#popregs_
08048                 | _compile_if_ret
08048     2D 00 64 FD | 	ret
0804c                 | 
0804c                 | ' 
0804c                 | ' function compile_else() as ulong  
0804c                 | _compile_else
0804c     05 4A 05 F6 | 	mov	COUNT_, #5
08050     A8 00 A0 FD | 	call	#pushregs_
08054                 | _compile_else_enter
08054     5A 22 06 F6 | 	mov	local03, #90
08058     0F 25 02 F6 | 	mov	local04, local01
0805c     10 27 02 F6 | 	mov	local05, local02
08060     11 1F 02 F6 | 	mov	local01, local03
08064     4A 00 00 FF 
08068     AC E4 05 F1 | 	add	objptr, ##38060
0806c     F2 12 02 FB | 	rdlong	arg01, objptr
08070     09 FB 01 F6 | 	mov	result1, arg01
08074     01 FA 65 F0 | 	shl	result1, #1
08078     09 FB 01 F1 | 	add	result1, arg01
0807c     02 FA 65 F0 | 	shl	result1, #2
08080     03 00 00 FF 
08084     00 E4 85 F1 | 	sub	objptr, ##1536
08088     F2 FA 01 F1 | 	add	result1, objptr
0808c     FD 24 62 FC | 	wrlong	local04, result1
08090     03 00 00 FF 
08094     00 E4 05 F1 | 	add	objptr, ##1536
08098     F2 FA 01 FB | 	rdlong	result1, objptr
0809c     FD 24 02 F6 | 	mov	local04, result1
080a0     01 24 66 F0 | 	shl	local04, #1
080a4     FD 24 02 F1 | 	add	local04, result1
080a8     02 24 66 F0 | 	shl	local04, #2
080ac     03 00 00 FF 
080b0     00 E4 85 F1 | 	sub	objptr, ##1536
080b4     F2 24 02 F1 | 	add	local04, objptr
080b8     04 24 06 F1 | 	add	local04, #4
080bc     12 27 62 FC | 	wrlong	local05, local04
080c0     03 00 00 FF 
080c4     00 E4 05 F1 | 	add	objptr, ##1536
080c8     F2 24 02 FB | 	rdlong	local04, objptr
080cc     12 27 02 F6 | 	mov	local05, local04
080d0     01 26 66 F0 | 	shl	local05, #1
080d4     12 27 02 F1 | 	add	local05, local04
080d8     02 26 66 F0 | 	shl	local05, #2
080dc     03 00 00 FF 
080e0     00 E4 85 F1 | 	sub	objptr, ##1536
080e4     F2 26 02 F1 | 	add	local05, objptr
080e8     08 26 06 F1 | 	add	local05, #8
080ec     13 1F 62 FC | 	wrlong	local01, local05
080f0     03 00 00 FF 
080f4     00 E4 05 F1 | 	add	objptr, ##1536
080f8     F2 24 02 FB | 	rdlong	local04, objptr
080fc     01 24 06 F1 | 	add	local04, #1
08100     F2 24 62 FC | 	wrlong	local04, objptr
08104                 | ' 
08104                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
08104                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
08104     13 00 00 FF 
08108     38 E4 85 F1 | 	sub	objptr, ##9784
0810c     F2 26 02 FB | 	rdlong	local05, objptr
08110     01 26 06 F1 | 	add	local05, #1
08114     03 26 66 F0 | 	shl	local05, #3
08118     02 00 00 FF 
0811c     38 E4 85 F1 | 	sub	objptr, ##1080
08120     F2 26 02 F1 | 	add	local05, objptr
08124     13 13 02 FB | 	rdlong	arg01, local05
08128     35 00 00 FF 
0812c     3C E4 85 F1 | 	sub	objptr, ##27196
08130                 | ' 
08130                 | ' select case s
08130     83 01 00 FF 
08134     47 15 06 F6 | 	mov	arg02, ##@LR__5117
08138     FC 8B B1 FD | 	call	#__system___string_cmp
0813c     00 FA 0D F2 | 	cmp	result1, #0 wz
08140     1B FA 05 A6 |  if_e	mov	result1, #27
08144     00 FA 05 56 |  if_ne	mov	result1, #0
08148     00 FA 0D F2 | 	cmp	result1, #0 wz
0814c     0C 00 90 AD |  if_e	jmp	#LR__0730
08150     05 12 06 F6 | 	mov	arg01, #5
08154     98 EB BF FD | 	call	#_compile_immediate_assign
08158     08 00 90 FD | 	jmp	#LR__0731
0815c                 | LR__0730
0815c     05 12 06 F6 | 	mov	arg01, #5
08160     C4 E0 BF FD | 	call	#_compile_immediate
08164                 | LR__0731
08164                 | ' 
08164                 | ' 
08164                 | ' return 0
08164     00 FA 05 F6 | 	mov	result1, #0
08168     A7 F0 03 F6 | 	mov	ptra, fp
0816c     B2 00 A0 FD | 	call	#popregs_
08170                 | _compile_else_ret
08170     2D 00 64 FD | 	ret
08174                 | 
08174                 | ' 
08174                 | ' 
08174                 | ' function compile_dim() as ulong  
08174                 | _compile_dim
08174     11 4A 05 F6 | 	mov	COUNT_, #17
08178     A8 00 A0 FD | 	call	#pushregs_
0817c     01 1E 06 F6 | 	mov	local01, #1
08180     01 20 06 F6 | 	mov	local02, #1
08184     01 22 06 F6 | 	mov	local03, #1
08188                 | ' 
08188                 | ' dims(0)=1: dims(1)=1: dims(2)=1
08188                 | ' 
08188                 | ' if isname(lparts(ct).part$) then 
08188     37 00 00 FF 
0818c     74 E4 05 F1 | 	add	objptr, ##28276
08190     F2 18 02 FB | 	rdlong	arg04, objptr
08194     03 18 66 F0 | 	shl	arg04, #3
08198     02 00 00 FF 
0819c     38 E4 85 F1 | 	sub	objptr, ##1080
081a0     F2 18 02 F1 | 	add	arg04, objptr
081a4     0C 13 02 FB | 	rdlong	arg01, arg04
081a8     35 00 00 FF 
081ac     3C E4 85 F1 | 	sub	objptr, ##27196
081b0     10 D1 BF FD | 	call	#_isname
081b4     00 FA 0D F2 | 	cmp	result1, #0 wz
081b8     AC 05 90 AD |  if_e	jmp	#LR__0764
081bc     37 00 00 FF 
081c0     74 E4 05 F1 | 	add	objptr, ##28276
081c4     F2 24 02 FB | 	rdlong	local04, objptr
081c8     03 24 66 F0 | 	shl	local04, #3
081cc     02 00 00 FF 
081d0     38 E4 85 F1 | 	sub	objptr, ##1080
081d4     F2 24 02 F1 | 	add	local04, objptr
081d8     12 27 02 FB | 	rdlong	local05, local04
081dc     01 28 66 F6 | 	neg	local06, #1
081e0                 | '   varname2$=lparts(ct).part$ 
081e0                 | '   j=-1
081e0                 | '   if varnum>0 then
081e0     04 E4 85 F1 | 	sub	objptr, #4
081e4     F2 2A 02 FB | 	rdlong	local07, objptr
081e8     35 00 00 FF 
081ec     38 E4 85 F1 | 	sub	objptr, ##27192
081f0     01 2A 56 F2 | 	cmps	local07, #1 wc
081f4     58 00 90 CD |  if_b	jmp	#LR__0742
081f8                 | '  '   print "in dim, varnum=";varnum
081f8                 | '     for i=0 to varnum-1
081f8     00 2C 06 F6 | 	mov	local08, #0
081fc     35 00 00 FF 
08200     38 E4 05 F1 | 	add	objptr, ##27192
08204     F2 2E 02 FB | 	rdlong	local09, objptr
08208     35 00 00 FF 
0820c     38 E4 85 F1 | 	sub	objptr, ##27192
08210                 | LR__0740
08210     17 2D 52 F2 | 	cmps	local08, local09 wc
08214     38 00 90 3D |  if_ae	jmp	#LR__0741
08218                 | '       if variables(i).name=varname2$ then j=i : exit
08218     16 25 02 F6 | 	mov	local04, local08
0821c     04 24 66 F0 | 	shl	local04, #4
08220     15 00 00 FF 
08224     28 E4 05 F1 | 	add	objptr, ##10792
08228     F2 24 02 F1 | 	add	local04, objptr
0822c     12 13 02 FB | 	rdlong	arg01, local04
08230     13 15 02 F6 | 	mov	arg02, local05
08234     15 00 00 FF 
08238     28 E4 85 F1 | 	sub	objptr, ##10792
0823c     F8 8A B1 FD | 	call	#__system___string_cmp
08240     00 FA 0D F2 | 	cmp	result1, #0 wz
08244     16 29 02 A6 |  if_e	mov	local06, local08
08248     01 2C 06 51 |  if_ne	add	local08, #1
0824c     C0 FF 9F 5D |  if_ne	jmp	#LR__0740
08250                 | LR__0741
08250                 | LR__0742
08250                 | ' '  if j<>-1 then printerror (42) : return 42
08250                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
08250     FF FF 7F FF 
08254     FF 29 0E F2 | 	cmp	local06, ##-1 wz
08258     35 00 00 AF 
0825c     38 E4 05 A1 |  if_e	add	objptr, ##27192
08260     F2 28 02 AB |  if_e	rdlong	local06, objptr
08264     35 00 00 AF 
08268     38 E4 85 A1 |  if_e	sub	objptr, ##27192
0826c     78 00 90 AD |  if_e	jmp	#LR__0743
08270     00 12 06 F6 | 	mov	arg01, #0
08274     D8 E4 B1 FD | 	call	#__system___getiolock_0540
08278     FD 12 02 F6 | 	mov	arg01, result1
0827c     90 8A B1 FD | 	call	#__system___lockmem
08280     85 01 00 FF 
08284     56 15 06 F6 | 	mov	arg02, ##@LR__5334
08288     00 12 06 F6 | 	mov	arg01, #0
0828c     00 16 06 F6 | 	mov	arg03, #0
08290     70 97 B1 FD | 	call	#__system___basic_print_string
08294     59 00 00 FF 
08298     F8 E5 05 F1 | 	add	objptr, ##46072
0829c     F2 14 02 FB | 	rdlong	arg02, objptr
082a0     59 00 00 FF 
082a4     F8 E5 85 F1 | 	sub	objptr, ##46072
082a8     00 12 06 F6 | 	mov	arg01, #0
082ac     00 16 06 F6 | 	mov	arg03, #0
082b0     0A 18 06 F6 | 	mov	arg04, #10
082b4     D0 97 B1 FD | 	call	#__system___basic_print_unsigned
082b8     85 01 00 FF 
082bc     64 15 06 F6 | 	mov	arg02, ##@LR__5335
082c0     00 12 06 F6 | 	mov	arg01, #0
082c4     00 16 06 F6 | 	mov	arg03, #0
082c8     38 97 B1 FD | 	call	#__system___basic_print_string
082cc     00 12 06 F6 | 	mov	arg01, #0
082d0     0A 14 06 F6 | 	mov	arg02, #10
082d4     00 16 06 F6 | 	mov	arg03, #0
082d8     D0 96 B1 FD | 	call	#__system___basic_print_char
082dc     00 12 06 F6 | 	mov	arg01, #0
082e0     6C E4 B1 FD | 	call	#__system___getiolock_0540
082e4     FD 00 68 FC | 	wrlong	#0, result1
082e8                 | LR__0743
082e8                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
082e8     37 00 00 FF 
082ec     74 E4 05 F1 | 	add	objptr, ##28276
082f0     F2 18 02 FB | 	rdlong	arg04, objptr
082f4     01 18 06 F1 | 	add	arg04, #1
082f8     03 18 66 F0 | 	shl	arg04, #3
082fc     02 00 00 FF 
08300     38 E4 85 F1 | 	sub	objptr, ##1080
08304     F2 18 02 F1 | 	add	arg04, objptr
08308     0C 13 02 FB | 	rdlong	arg01, arg04
0830c     85 01 00 FF 
08310     85 15 06 F6 | 	mov	arg02, ##@LR__5336
08314     35 00 00 FF 
08318     3C E4 85 F1 | 	sub	objptr, ##27196
0831c     18 8A B1 FD | 	call	#__system___string_cmp
08320     00 FA 0D F2 | 	cmp	result1, #0 wz
08324     50 00 90 AD |  if_e	jmp	#LR__0744
08328     37 00 00 FF 
0832c     74 E4 05 F1 | 	add	objptr, ##28276
08330     F2 2E 02 FB | 	rdlong	local09, objptr
08334     01 2E 06 F1 | 	add	local09, #1
08338     03 2E 66 F0 | 	shl	local09, #3
0833c     02 00 00 FF 
08340     38 E4 85 F1 | 	sub	objptr, ##1080
08344     F2 2E 02 F1 | 	add	local09, objptr
08348     17 13 02 FB | 	rdlong	arg01, local09
0834c     85 01 00 FF 
08350     87 15 06 F6 | 	mov	arg02, ##@LR__5337
08354     35 00 00 FF 
08358     3C E4 85 F1 | 	sub	objptr, ##27196
0835c     D8 89 B1 FD | 	call	#__system___string_cmp
08360     00 FA 0D F2 | 	cmp	result1, #0 wz
08364     10 00 90 AD |  if_e	jmp	#LR__0744
08368     2B 12 06 F6 | 	mov	arg01, #43
0836c     F8 44 B1 FD | 	call	#_printerror
08370     2B FA 05 F6 | 	mov	result1, #43
08374     00 05 90 FD | 	jmp	#LR__0766
08378                 | LR__0744
08378                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
08378     37 00 00 FF 
0837c     74 E4 05 F1 | 	add	objptr, ##28276
08380     F2 14 02 FB | 	rdlong	arg02, objptr
08384     01 14 06 F1 | 	add	arg02, #1
08388     03 14 66 F0 | 	shl	arg02, #3
0838c     02 00 00 FF 
08390     38 E4 85 F1 | 	sub	objptr, ##1080
08394     F2 14 02 F1 | 	add	arg02, objptr
08398     0A 13 02 FB | 	rdlong	arg01, arg02
0839c     85 01 00 FF 
083a0     8A 15 06 F6 | 	mov	arg02, ##@LR__5338
083a4     35 00 00 FF 
083a8     3C E4 85 F1 | 	sub	objptr, ##27196
083ac     88 89 B1 FD | 	call	#__system___string_cmp
083b0     00 FA 0D F2 | 	cmp	result1, #0 wz
083b4     37 00 00 AF 
083b8     74 E4 05 A1 |  if_e	add	objptr, ##28276
083bc     F2 30 02 AB |  if_e	rdlong	local10, objptr
083c0     37 00 00 AF 
083c4     74 E4 85 A1 |  if_e	sub	objptr, ##28276
083c8     01 30 06 A1 |  if_e	add	local10, #1
083cc     7C 01 90 AD |  if_e	jmp	#LR__0750
083d0     37 00 00 FF 
083d4     74 E4 05 F1 | 	add	objptr, ##28276
083d8     F2 30 02 FB | 	rdlong	local10, objptr
083dc     37 00 00 FF 
083e0     74 E4 85 F1 | 	sub	objptr, ##28276
083e4     02 30 06 F1 | 	add	local10, #2
083e8     00 32 06 F6 | 	mov	local11, #0
083ec                 | '   l=ct+2 : m=0 : do
083ec                 | LR__0745
083ec                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
083ec                 | '     if isdec(lparts(l).part$) then 
083ec     18 25 02 F6 | 	mov	local04, local10
083f0     03 24 66 F0 | 	shl	local04, #3
083f4     35 00 00 FF 
083f8     3C E4 05 F1 | 	add	objptr, ##27196
083fc     F2 24 02 F1 | 	add	local04, objptr
08400     12 13 02 FB | 	rdlong	arg01, local04
08404     35 00 00 FF 
08408     3C E4 85 F1 | 	sub	objptr, ##27196
0840c     58 D5 BF FD | 	call	#_isdec
08410     00 FA 0D F2 | 	cmp	result1, #0 wz
08414     44 00 90 AD |  if_e	jmp	#LR__0746
08418     19 35 02 F6 | 	mov	local12, local11
0841c     0F 35 06 F1 | 	add	local12, #local01
08420     18 2F 02 F6 | 	mov	local09, local10
08424     03 2E 66 F0 | 	shl	local09, #3
08428     35 00 00 FF 
0842c     3C E4 05 F1 | 	add	objptr, ##27196
08430     F2 2E 02 F1 | 	add	local09, objptr
08434     17 13 02 FB | 	rdlong	arg01, local09
08438     00 14 06 F6 | 	mov	arg02, #0
0843c     35 00 00 FF 
08440     3C E4 85 F1 | 	sub	objptr, ##27196
08444     F4 BA B1 FD | 	call	#__system____builtin_atoi
08448     FD 36 02 F6 | 	mov	local13, result1
0844c                 | 	'.live	local13
0844c                 | 	'.live	local12
0844c     00 34 8E F9 | 	altd	local12, #0
08450     1B 35 02 F6 | 	mov	local12, local13
08454     01 32 06 F1 | 	add	local11, #1
08458     10 00 90 FD | 	jmp	#LR__0747
0845c                 | LR__0746
0845c     11 12 06 F6 | 	mov	arg01, #17
08460     04 44 B1 FD | 	call	#_printerror
08464                 | '       printerror (17)  : return(17)
08464     11 FA 05 F6 | 	mov	result1, #17
08468     0C 04 90 FD | 	jmp	#LR__0766
0846c                 | LR__0747
0846c                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
0846c     18 25 02 F6 | 	mov	local04, local10
08470     01 24 06 F1 | 	add	local04, #1
08474     03 24 66 F0 | 	shl	local04, #3
08478     35 00 00 FF 
0847c     3C E4 05 F1 | 	add	objptr, ##27196
08480     F2 24 02 F1 | 	add	local04, objptr
08484     12 13 02 FB | 	rdlong	arg01, local04
08488     85 01 00 FF 
0848c     8D 15 06 F6 | 	mov	arg02, ##@LR__5339
08490     35 00 00 FF 
08494     3C E4 85 F1 | 	sub	objptr, ##27196
08498     9C 88 B1 FD | 	call	#__system___string_cmp
0849c     00 FA 0D F2 | 	cmp	result1, #0 wz
084a0     48 00 90 AD |  if_e	jmp	#LR__0748
084a4     18 37 02 F6 | 	mov	local13, local10
084a8     01 36 06 F1 | 	add	local13, #1
084ac     03 36 66 F0 | 	shl	local13, #3
084b0     35 00 00 FF 
084b4     3C E4 05 F1 | 	add	objptr, ##27196
084b8     F2 36 02 F1 | 	add	local13, objptr
084bc     1B 13 02 FB | 	rdlong	arg01, local13
084c0     85 01 00 FF 
084c4     8F 15 06 F6 | 	mov	arg02, ##@LR__5340
084c8     35 00 00 FF 
084cc     3C E4 85 F1 | 	sub	objptr, ##27196
084d0     64 88 B1 FD | 	call	#__system___string_cmp
084d4     00 FA 0D F2 | 	cmp	result1, #0 wz
084d8     10 00 90 AD |  if_e	jmp	#LR__0748
084dc     2C 12 06 F6 | 	mov	arg01, #44
084e0     84 43 B1 FD | 	call	#_printerror
084e4     2C FA 05 F6 | 	mov	result1, #44
084e8     8C 03 90 FD | 	jmp	#LR__0766
084ec                 | LR__0748
084ec     02 30 06 F1 | 	add	local10, #2
084f0     18 25 02 F6 | 	mov	local04, local10
084f4     01 24 86 F1 | 	sub	local04, #1
084f8     03 24 66 F0 | 	shl	local04, #3
084fc     35 00 00 FF 
08500     3C E4 05 F1 | 	add	objptr, ##27196
08504     F2 24 02 F1 | 	add	local04, objptr
08508     12 13 02 FB | 	rdlong	arg01, local04
0850c     85 01 00 FF 
08510     91 15 06 F6 | 	mov	arg02, ##@LR__5341
08514     35 00 00 FF 
08518     3C E4 85 F1 | 	sub	objptr, ##27196
0851c     18 88 B1 FD | 	call	#__system___string_cmp
08520     00 FA 0D F2 | 	cmp	result1, #0 wz
08524     03 32 56 52 |  if_ne	cmps	local11, #3 wc
08528     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0745
0852c                 | '   if m>3 then printerror(45): return(45)
0852c     04 32 56 F2 | 	cmps	local11, #4 wc
08530     10 00 90 CD |  if_b	jmp	#LR__0749
08534     2D 12 06 F6 | 	mov	arg01, #45
08538     2C 43 B1 FD | 	call	#_printerror
0853c     2D FA 05 F6 | 	mov	result1, #45
08540     34 03 90 FD | 	jmp	#LR__0766
08544                 | LR__0749
08544     00 39 06 F6 | 	mov	local14, #256
08548     0C 3A 06 F6 | 	mov	local15, #12
0854c                 | LR__0750
0854c                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
0854c                 | '   arraytype=array_no_type : esize=12
0854c                 | ' 1350 
0854c                 | '   if lparts(l).part$="as" then
0854c     18 25 02 F6 | 	mov	local04, local10
08550     03 24 66 F0 | 	shl	local04, #3
08554     35 00 00 FF 
08558     3C E4 05 F1 | 	add	objptr, ##27196
0855c     F2 24 02 F1 | 	add	local04, objptr
08560     12 13 02 FB | 	rdlong	arg01, local04
08564     85 01 00 FF 
08568     93 15 06 F6 | 	mov	arg02, ##@LR__5342
0856c     35 00 00 FF 
08570     3C E4 85 F1 | 	sub	objptr, ##27196
08574     C0 87 B1 FD | 	call	#__system___string_cmp
08578     00 FA 0D F2 | 	cmp	result1, #0 wz
0857c     F8 01 90 5D |  if_ne	jmp	#LR__0765
08580                 | '     select case lparts(l+1).part$
08580     18 35 02 F6 | 	mov	local12, local10
08584     01 34 06 F1 | 	add	local12, #1
08588     03 34 66 F0 | 	shl	local12, #3
0858c     35 00 00 FF 
08590     3C E4 05 F1 | 	add	objptr, ##27196
08594     F2 34 02 F1 | 	add	local12, objptr
08598     1A 3D 02 FB | 	rdlong	local16, local12
0859c     85 01 00 FF 
085a0     96 15 06 F6 | 	mov	arg02, ##@LR__5343
085a4     1E 13 02 F6 | 	mov	arg01, local16
085a8     35 00 00 FF 
085ac     3C E4 85 F1 | 	sub	objptr, ##27196
085b0     84 87 B1 FD | 	call	#__system___string_cmp
085b4     00 FA 0D F2 | 	cmp	result1, #0 wz
085b8     0C 01 90 AD |  if_e	jmp	#LR__0751
085bc     85 01 00 FF 
085c0     9B 15 06 F6 | 	mov	arg02, ##@LR__5344
085c4     1E 13 02 F6 | 	mov	arg01, local16
085c8     6C 87 B1 FD | 	call	#__system___string_cmp
085cc     00 FA 0D F2 | 	cmp	result1, #0 wz
085d0     00 01 90 AD |  if_e	jmp	#LR__0752
085d4     85 01 00 FF 
085d8     A1 15 06 F6 | 	mov	arg02, ##@LR__5345
085dc     1E 13 02 F6 | 	mov	arg01, local16
085e0     54 87 B1 FD | 	call	#__system___string_cmp
085e4     00 FA 0D F2 | 	cmp	result1, #0 wz
085e8     F4 00 90 AD |  if_e	jmp	#LR__0753
085ec     85 01 00 FF 
085f0     A7 15 06 F6 | 	mov	arg02, ##@LR__5346
085f4     1E 13 02 F6 | 	mov	arg01, local16
085f8     3C 87 B1 FD | 	call	#__system___string_cmp
085fc     00 FA 0D F2 | 	cmp	result1, #0 wz
08600     E8 00 90 AD |  if_e	jmp	#LR__0754
08604     85 01 00 FF 
08608     AE 15 06 F6 | 	mov	arg02, ##@LR__5347
0860c     1E 13 02 F6 | 	mov	arg01, local16
08610     24 87 B1 FD | 	call	#__system___string_cmp
08614     00 FA 0D F2 | 	cmp	result1, #0 wz
08618     DC 00 90 AD |  if_e	jmp	#LR__0755
0861c     85 01 00 FF 
08620     B3 15 06 F6 | 	mov	arg02, ##@LR__5348
08624     1E 13 02 F6 | 	mov	arg01, local16
08628     0C 87 B1 FD | 	call	#__system___string_cmp
0862c     00 FA 0D F2 | 	cmp	result1, #0 wz
08630     D0 00 90 AD |  if_e	jmp	#LR__0756
08634     85 01 00 FF 
08638     BB 15 06 F6 | 	mov	arg02, ##@LR__5349
0863c     1E 13 02 F6 | 	mov	arg01, local16
08640     F4 86 B1 FD | 	call	#__system___string_cmp
08644     00 FA 0D F2 | 	cmp	result1, #0 wz
08648     C4 00 90 AD |  if_e	jmp	#LR__0757
0864c     85 01 00 FF 
08650     C1 15 06 F6 | 	mov	arg02, ##@LR__5350
08654     1E 13 02 F6 | 	mov	arg01, local16
08658     DC 86 B1 FD | 	call	#__system___string_cmp
0865c     00 FA 0D F2 | 	cmp	result1, #0 wz
08660     B8 00 90 AD |  if_e	jmp	#LR__0758
08664     85 01 00 FF 
08668     C7 15 06 F6 | 	mov	arg02, ##@LR__5351
0866c     1E 13 02 F6 | 	mov	arg01, local16
08670     C4 86 B1 FD | 	call	#__system___string_cmp
08674     00 FA 0D F2 | 	cmp	result1, #0 wz
08678     AC 00 90 AD |  if_e	jmp	#LR__0759
0867c     85 01 00 FF 
08680     CE 15 06 F6 | 	mov	arg02, ##@LR__5352
08684     1E 13 02 F6 | 	mov	arg01, local16
08688     AC 86 B1 FD | 	call	#__system___string_cmp
0868c     00 FA 0D F2 | 	cmp	result1, #0 wz
08690     A0 00 90 AD |  if_e	jmp	#LR__0760
08694     85 01 00 FF 
08698     D5 15 06 F6 | 	mov	arg02, ##@LR__5353
0869c     1E 13 02 F6 | 	mov	arg01, local16
086a0     94 86 B1 FD | 	call	#__system___string_cmp
086a4     00 FA 0D F2 | 	cmp	result1, #0 wz
086a8     94 00 90 AD |  if_e	jmp	#LR__0761
086ac     85 01 00 FF 
086b0     DC 15 06 F6 | 	mov	arg02, ##@LR__5354
086b4     1E 13 02 F6 | 	mov	arg01, local16
086b8     7C 86 B1 FD | 	call	#__system___string_cmp
086bc     00 FA 0D F2 | 	cmp	result1, #0 wz
086c0     88 00 90 AD |  if_e	jmp	#LR__0762
086c4     90 00 90 FD | 	jmp	#LR__0763
086c8                 | LR__0751
086c8     01 39 06 F6 | 	mov	local14, #257
086cc     01 3A 06 F6 | 	mov	local15, #1
086d0     A4 00 90 FD | 	jmp	#LR__0765
086d4                 | LR__0752
086d4     02 39 06 F6 | 	mov	local14, #258
086d8     01 3A 06 F6 | 	mov	local15, #1
086dc     98 00 90 FD | 	jmp	#LR__0765
086e0                 | LR__0753
086e0     03 39 06 F6 | 	mov	local14, #259
086e4     02 3A 06 F6 | 	mov	local15, #2
086e8     8C 00 90 FD | 	jmp	#LR__0765
086ec                 | LR__0754
086ec     04 39 06 F6 | 	mov	local14, #260
086f0     02 3A 06 F6 | 	mov	local15, #2
086f4     80 00 90 FD | 	jmp	#LR__0765
086f8                 | LR__0755
086f8     05 39 06 F6 | 	mov	local14, #261
086fc     04 3A 06 F6 | 	mov	local15, #4
08700     74 00 90 FD | 	jmp	#LR__0765
08704                 | LR__0756
08704     05 39 06 F6 | 	mov	local14, #261
08708     04 3A 06 F6 | 	mov	local15, #4
0870c     68 00 90 FD | 	jmp	#LR__0765
08710                 | LR__0757
08710     06 39 06 F6 | 	mov	local14, #262
08714     04 3A 06 F6 | 	mov	local15, #4
08718     5C 00 90 FD | 	jmp	#LR__0765
0871c                 | LR__0758
0871c     07 39 06 F6 | 	mov	local14, #263
08720     08 3A 06 F6 | 	mov	local15, #8
08724     50 00 90 FD | 	jmp	#LR__0765
08728                 | LR__0759
08728     08 39 06 F6 | 	mov	local14, #264
0872c     08 3A 06 F6 | 	mov	local15, #8
08730     44 00 90 FD | 	jmp	#LR__0765
08734                 | LR__0760
08734     09 39 06 F6 | 	mov	local14, #265
08738     04 3A 06 F6 | 	mov	local15, #4
0873c     38 00 90 FD | 	jmp	#LR__0765
08740                 | LR__0761
08740     0A 39 06 F6 | 	mov	local14, #266
08744     08 3A 06 F6 | 	mov	local15, #8
08748     2C 00 90 FD | 	jmp	#LR__0765
0874c                 | LR__0762
0874c     0B 39 06 F6 | 	mov	local14, #267
08750     04 3A 06 F6 | 	mov	local15, #4
08754     20 00 90 FD | 	jmp	#LR__0765
08758                 | LR__0763
08758     2F 12 06 F6 | 	mov	arg01, #47
0875c     08 41 B1 FD | 	call	#_printerror
08760     2F FA 05 F6 | 	mov	result1, #47
08764     10 01 90 FD | 	jmp	#LR__0766
08768                 | LR__0764
08768     2E 12 06 F6 | 	mov	arg01, #46
0876c     F8 40 B1 FD | 	call	#_printerror
08770                 | '   printerror(46): return 46
08770     2E FA 05 F6 | 	mov	result1, #46
08774     00 01 90 FD | 	jmp	#LR__0766
08778                 | LR__0765
08778     0F 3B 02 FD | 	qmul	local15, local01
0877c     18 2A 62 FD | 	getqx	local07
08780     10 2B 02 FD | 	qmul	local07, local02
08784     18 3C 62 FD | 	getqx	local16
08788     11 3D 02 FD | 	qmul	local16, local03
0878c     59 00 00 FF 
08790     E0 E5 05 F1 | 	add	objptr, ##46048
08794     F2 3E 02 FB | 	rdlong	local17, objptr
08798     1C 15 02 F6 | 	mov	arg02, local14
0879c     18 3C 62 FD | 	getqx	local16
087a0     1E 3F 82 F1 | 	sub	local17, local16
087a4     10 3E 86 F1 | 	sub	local17, #16
087a8     0F 3E 26 F5 | 	andn	local17, #15
087ac     F2 3E 62 FC | 	wrlong	local17, objptr
087b0     59 00 00 FF 
087b4     E0 E5 85 F1 | 	sub	objptr, ##46048
087b8     1F 13 02 F6 | 	mov	arg01, local17
087bc     54 42 B1 FD | 	call	#_psdpoke
087c0     1F 13 02 F6 | 	mov	arg01, local17
087c4     02 12 06 F1 | 	add	arg01, #2
087c8     1D 15 02 F6 | 	mov	arg02, local15
087cc     44 42 B1 FD | 	call	#_psdpoke
087d0     1F 13 02 F6 | 	mov	arg01, local17
087d4     04 12 06 F1 | 	add	arg01, #4
087d8     0F 15 02 F6 | 	mov	arg02, local01
087dc     EC 41 B1 FD | 	call	#_pslpoke
087e0     1F 13 02 F6 | 	mov	arg01, local17
087e4     08 12 06 F1 | 	add	arg01, #8
087e8     10 15 02 F6 | 	mov	arg02, local02
087ec     DC 41 B1 FD | 	call	#_pslpoke
087f0     1F 13 02 F6 | 	mov	arg01, local17
087f4     0C 12 06 F1 | 	add	arg01, #12
087f8     11 15 02 F6 | 	mov	arg02, local03
087fc     CC 41 B1 FD | 	call	#_pslpoke
08800     14 35 02 F6 | 	mov	local12, local06
08804     04 34 66 F0 | 	shl	local12, #4
08808     15 00 00 FF 
0880c     28 E4 05 F1 | 	add	objptr, ##10792
08810     F2 34 02 F1 | 	add	local12, objptr
08814     1A 27 62 FC | 	wrlong	local05, local12
08818     14 35 02 F6 | 	mov	local12, local06
0881c     04 34 66 F0 | 	shl	local12, #4
08820     F2 34 02 F1 | 	add	local12, objptr
08824     04 34 06 F1 | 	add	local12, #4
08828     1A 3F 62 FC | 	wrlong	local17, local12
0882c     14 35 02 F6 | 	mov	local12, local06
08830     04 34 66 F0 | 	shl	local12, #4
08834     F2 34 02 F1 | 	add	local12, objptr
08838     0C 34 06 F1 | 	add	local12, #12
0883c     1A 39 62 FC | 	wrlong	local14, local12
08840                 | ' memtop=arrayptr
08840                 | ' 
08840                 | ' psdpoke arrayptr,arraytype ': print arraytype, arrayptr
08840                 | ' psdpoke arrayptr+2,esize ': print esize , psdpeek(arrayptr+2)
08840                 | ' pslpoke arrayptr+4,dims(0)
08840                 | ' pslpoke arrayptr+8,dims(1)
08840                 | ' pslpoke arrayptr+12,dims(2)
08840                 | ' 'for i=0 to 15: print hex$(pspeek(arrayptr+i),2), : next i
08840                 | ' 'for i=0 to 3: print hex$(pslpeek(arrayptr+4*i),2), : next i
08840                 | ' 
08840                 | ' 
08840                 | ' variables(j).name=varname2$
08840                 | ' variables(j).value.uresult=arrayptr
08840                 | ' variables(j).vartype=arraytype
08840                 | ' if j=varnum then varnum+=1
08840     20 00 00 FF 
08844     10 E4 05 F1 | 	add	objptr, ##16400
08848     F2 2A 02 FB | 	rdlong	local07, objptr
0884c     35 00 00 FF 
08850     38 E4 85 F1 | 	sub	objptr, ##27192
08854     15 29 0A F2 | 	cmp	local06, local07 wz
08858     35 00 00 AF 
0885c     38 E4 05 A1 |  if_e	add	objptr, ##27192
08860     F2 2A 02 AB |  if_e	rdlong	local07, objptr
08864     01 2A 06 A1 |  if_e	add	local07, #1
08868     F2 2A 62 AC |  if_e	wrlong	local07, objptr
0886c     35 00 00 AF 
08870     38 E4 85 A1 |  if_e	sub	objptr, ##27192
08874                 | ' 
08874                 | ' return 0
08874     00 FA 05 F6 | 	mov	result1, #0
08878                 | LR__0766
08878     A7 F0 03 F6 | 	mov	ptra, fp
0887c     B2 00 A0 FD | 	call	#popregs_
08880                 | _compile_dim_ret
08880     2D 00 64 FD | 	ret
08884                 | 
08884                 | ' 
08884                 | ' 
08884                 | ' function compile_for() as ulong  
08884                 | _compile_for
08884     07 4A 05 F6 | 	mov	COUNT_, #7
08888     A8 00 A0 FD | 	call	#pushregs_
0888c                 | ' 
0888c                 | ' 
0888c                 | ' 
0888c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
0888c     37 00 00 FF 
08890     74 E4 05 F1 | 	add	objptr, ##28276
08894     F2 14 02 FB | 	rdlong	arg02, objptr
08898     01 14 06 F1 | 	add	arg02, #1
0889c     03 14 66 F0 | 	shl	arg02, #3
088a0     02 00 00 FF 
088a4     38 E4 85 F1 | 	sub	objptr, ##1080
088a8     F2 14 02 F1 | 	add	arg02, objptr
088ac     0A 13 02 FB | 	rdlong	arg01, arg02
088b0     35 00 00 FF 
088b4     3C E4 85 F1 | 	sub	objptr, ##27196
088b8                 | ' 
088b8                 | ' select case s
088b8     83 01 00 FF 
088bc     47 15 06 F6 | 	mov	arg02, ##@LR__5117
088c0     74 84 B1 FD | 	call	#__system___string_cmp
088c4     00 FA 0D F2 | 	cmp	result1, #0 wz
088c8     1B FA 05 A6 |  if_e	mov	result1, #27
088cc     00 FA 05 56 |  if_ne	mov	result1, #0
088d0     00 FA 0D F2 | 	cmp	result1, #0 wz
088d4     0C 00 90 AD |  if_e	jmp	#LR__0770
088d8     05 12 06 F6 | 	mov	arg01, #5
088dc     10 E4 BF FD | 	call	#_compile_immediate_assign
088e0     10 00 90 FD | 	jmp	#LR__0771
088e4                 | LR__0770
088e4     20 12 06 F6 | 	mov	arg01, #32
088e8     80 E8 BF FD | 	call	#_compile_error
088ec     20 FA 05 F6 | 	mov	result1, #32
088f0     E8 02 90 FD | 	jmp	#LR__0777
088f4                 | LR__0771
088f4     4A 00 00 FF 
088f8     AC E4 05 F1 | 	add	objptr, ##38060
088fc     F2 12 02 FB | 	rdlong	arg01, objptr
08900     09 25 02 F6 | 	mov	local04, arg01
08904     01 24 86 F1 | 	sub	local04, #1
08908     12 15 02 F6 | 	mov	arg02, local04
0890c     01 14 66 F0 | 	shl	arg02, #1
08910     12 15 02 F1 | 	add	arg02, local04
08914     02 14 66 F0 | 	shl	arg02, #2
08918     03 00 00 FF 
0891c     00 E4 85 F1 | 	sub	objptr, ##1536
08920     F2 14 02 F1 | 	add	arg02, objptr
08924     0A 1F 02 FB | 	rdlong	local01, arg02
08928     04 14 06 F1 | 	add	arg02, #4
0892c     0A 27 02 FB | 	rdlong	local05, arg02
08930     01 12 86 F1 | 	sub	arg01, #1
08934     09 29 02 F6 | 	mov	local06, arg01
08938     01 28 66 F0 | 	shl	local06, #1
0893c     09 29 02 F1 | 	add	local06, arg01
08940     02 28 66 F0 | 	shl	local06, #2
08944     F2 28 02 F1 | 	add	local06, objptr
08948     08 28 06 F1 | 	add	local06, #8
0894c     14 13 02 FB | 	rdlong	arg01, local06
08950     13 21 02 F6 | 	mov	local02, local05
08954     09 23 02 F6 | 	mov	local03, arg01
08958                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
08958                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
08958     17 22 0E F2 | 	cmp	local03, #23 wz
0895c     47 00 00 FF 
08960     AC E4 85 F1 | 	sub	objptr, ##36524
08964     10 00 90 AD |  if_e	jmp	#LR__0772
08968     22 12 06 F6 | 	mov	arg01, #34
0896c     FC E7 BF FD | 	call	#_compile_error
08970     22 FA 05 F6 | 	mov	result1, #34
08974     64 02 90 FD | 	jmp	#LR__0777
08978                 | LR__0772
08978     0F 2B 02 F6 | 	mov	local07, local01
0897c                 | ' varnum=t1.result.uresult
0897c                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
0897c     37 00 00 FF 
08980     74 E4 05 F1 | 	add	objptr, ##28276
08984     F2 24 02 FB | 	rdlong	local04, objptr
08988     03 24 66 F0 | 	shl	local04, #3
0898c     02 00 00 FF 
08990     38 E4 85 F1 | 	sub	objptr, ##1080
08994     F2 24 02 F1 | 	add	local04, objptr
08998     12 13 02 FB | 	rdlong	arg01, local04
0899c     85 01 00 FF 
089a0     E3 15 06 F6 | 	mov	arg02, ##@LR__5355
089a4     35 00 00 FF 
089a8     3C E4 85 F1 | 	sub	objptr, ##27196
089ac     88 83 B1 FD | 	call	#__system___string_cmp
089b0     00 FA 0D F2 | 	cmp	result1, #0 wz
089b4     10 00 90 AD |  if_e	jmp	#LR__0773
089b8     21 12 06 F6 | 	mov	arg01, #33
089bc     AC E7 BF FD | 	call	#_compile_error
089c0     21 FA 05 F6 | 	mov	result1, #33
089c4     14 02 90 FD | 	jmp	#LR__0777
089c8                 | LR__0773
089c8     37 00 00 FF 
089cc     74 E4 05 F1 | 	add	objptr, ##28276
089d0     F2 24 02 FB | 	rdlong	local04, objptr
089d4     01 24 06 F1 | 	add	local04, #1
089d8     F2 24 62 FC | 	wrlong	local04, objptr
089dc     37 00 00 FF 
089e0     74 E4 85 F1 | 	sub	objptr, ##28276
089e4     90 0F B0 FD | 	call	#_expr
089e8                 | ' ct+=1
089e8                 | ' expr()  ' there is "to" value pushed on the stack
089e8                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
089e8     37 00 00 FF 
089ec     74 E4 05 F1 | 	add	objptr, ##28276
089f0     F2 24 02 FB | 	rdlong	local04, objptr
089f4     03 24 66 F0 | 	shl	local04, #3
089f8     02 00 00 FF 
089fc     38 E4 85 F1 | 	sub	objptr, ##1080
08a00     F2 24 02 F1 | 	add	local04, objptr
08a04     12 13 02 FB | 	rdlong	arg01, local04
08a08     85 01 00 FF 
08a0c     E6 15 06 F6 | 	mov	arg02, ##@LR__5356
08a10     35 00 00 FF 
08a14     3C E4 85 F1 | 	sub	objptr, ##27196
08a18     1C 83 B1 FD | 	call	#__system___string_cmp
08a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
08a20     3C 00 90 AD |  if_e	jmp	#LR__0774
08a24     37 00 00 FF 
08a28     74 E4 05 F1 | 	add	objptr, ##28276
08a2c     F2 28 02 FB | 	rdlong	local06, objptr
08a30     03 28 66 F0 | 	shl	local06, #3
08a34     02 00 00 FF 
08a38     38 E4 85 F1 | 	sub	objptr, ##1080
08a3c     F2 28 02 F1 | 	add	local06, objptr
08a40     14 13 02 FB | 	rdlong	arg01, local06
08a44     85 01 00 FF 
08a48     EB 15 06 F6 | 	mov	arg02, ##@LR__5357
08a4c     35 00 00 FF 
08a50     3C E4 85 F1 | 	sub	objptr, ##27196
08a54     E0 82 B1 FD | 	call	#__system___string_cmp
08a58     00 FA 0D F2 | 	cmp	result1, #0 wz
08a5c     24 00 90 5D |  if_ne	jmp	#LR__0775
08a60                 | LR__0774
08a60     37 00 00 FF 
08a64     74 E4 05 F1 | 	add	objptr, ##28276
08a68     F2 28 02 FB | 	rdlong	local06, objptr
08a6c     01 28 06 F1 | 	add	local06, #1
08a70     F2 28 62 FC | 	wrlong	local06, objptr
08a74     37 00 00 FF 
08a78     74 E4 85 F1 | 	sub	objptr, ##28276
08a7c     F8 0E B0 FD | 	call	#_expr
08a80     78 00 90 FD | 	jmp	#LR__0776
08a84                 | LR__0775
08a84     4A 00 00 FF 
08a88     AC E4 05 F1 | 	add	objptr, ##38060
08a8c     F2 28 02 FB | 	rdlong	local06, objptr
08a90     14 27 02 F6 | 	mov	local05, local06
08a94     01 26 66 F0 | 	shl	local05, #1
08a98     14 27 02 F1 | 	add	local05, local06
08a9c     02 26 66 F0 | 	shl	local05, #2
08aa0     03 00 00 FF 
08aa4     00 E4 85 F1 | 	sub	objptr, ##1536
08aa8     F2 26 02 F1 | 	add	local05, objptr
08aac     08 26 06 F1 | 	add	local05, #8
08ab0     13 39 68 FC | 	wrlong	#28, local05
08ab4     03 00 00 FF 
08ab8     00 E4 05 F1 | 	add	objptr, ##1536
08abc     F2 28 02 FB | 	rdlong	local06, objptr
08ac0     14 27 02 F6 | 	mov	local05, local06
08ac4     01 26 66 F0 | 	shl	local05, #1
08ac8     14 27 02 F1 | 	add	local05, local06
08acc     02 26 66 F0 | 	shl	local05, #2
08ad0     03 00 00 FF 
08ad4     00 E4 85 F1 | 	sub	objptr, ##1536
08ad8     F2 26 02 F1 | 	add	local05, objptr
08adc     13 03 68 FC | 	wrlong	#1, local05
08ae0     03 00 00 FF 
08ae4     00 E4 05 F1 | 	add	objptr, ##1536
08ae8     F2 28 02 FB | 	rdlong	local06, objptr
08aec     01 28 06 F1 | 	add	local06, #1
08af0     F2 28 62 FC | 	wrlong	local06, objptr
08af4     4A 00 00 FF 
08af8     AC E4 85 F1 | 	sub	objptr, ##38060
08afc                 | LR__0776
08afc     4A 00 00 FF 
08b00     AC E4 05 F1 | 	add	objptr, ##38060
08b04     F2 28 02 FB | 	rdlong	local06, objptr
08b08     14 27 02 F6 | 	mov	local05, local06
08b0c     01 26 66 F0 | 	shl	local05, #1
08b10     14 27 02 F1 | 	add	local05, local06
08b14     02 26 66 F0 | 	shl	local05, #2
08b18     03 00 00 FF 
08b1c     00 E4 85 F1 | 	sub	objptr, ##1536
08b20     F2 26 02 F1 | 	add	local05, objptr
08b24     08 26 06 F1 | 	add	local05, #8
08b28     13 39 68 FC | 	wrlong	#28, local05
08b2c     03 00 00 FF 
08b30     00 E4 05 F1 | 	add	objptr, ##1536
08b34     F2 28 02 FB | 	rdlong	local06, objptr
08b38     14 27 02 F6 | 	mov	local05, local06
08b3c     01 26 66 F0 | 	shl	local05, #1
08b40     14 27 02 F1 | 	add	local05, local06
08b44     02 26 66 F0 | 	shl	local05, #2
08b48     03 00 00 FF 
08b4c     00 E4 85 F1 | 	sub	objptr, ##1536
08b50     F2 26 02 F1 | 	add	local05, objptr
08b54     13 2B 62 FC | 	wrlong	local07, local05
08b58     03 00 00 FF 
08b5c     00 E4 05 F1 | 	add	objptr, ##1536
08b60     F2 2A 02 FB | 	rdlong	local07, objptr
08b64     01 2A 06 F1 | 	add	local07, #1
08b68     F2 2A 62 FC | 	wrlong	local07, objptr
08b6c     15 29 02 F6 | 	mov	local06, local07
08b70     01 28 66 F0 | 	shl	local06, #1
08b74     15 29 02 F1 | 	add	local06, local07
08b78     02 28 66 F0 | 	shl	local06, #2
08b7c     03 00 00 FF 
08b80     00 E4 85 F1 | 	sub	objptr, ##1536
08b84     F2 28 02 F1 | 	add	local06, objptr
08b88     08 28 06 F1 | 	add	local06, #8
08b8c     14 95 68 FC | 	wrlong	#74, local06
08b90     03 00 00 FF 
08b94     00 E4 05 F1 | 	add	objptr, ##1536
08b98     F2 2A 02 FB | 	rdlong	local07, objptr
08b9c     15 29 02 F6 | 	mov	local06, local07
08ba0     01 28 66 F0 | 	shl	local06, #1
08ba4     15 29 02 F1 | 	add	local06, local07
08ba8     02 28 66 F0 | 	shl	local06, #2
08bac     03 00 00 FF 
08bb0     00 E4 85 F1 | 	sub	objptr, ##1536
08bb4     F2 28 02 F1 | 	add	local06, objptr
08bb8     14 01 68 FC | 	wrlong	#0, local06
08bbc     03 00 00 FF 
08bc0     00 E4 05 F1 | 	add	objptr, ##1536
08bc4     F2 2A 02 FB | 	rdlong	local07, objptr
08bc8     01 2A 06 F1 | 	add	local07, #1
08bcc     F2 2A 62 FC | 	wrlong	local07, objptr
08bd0     4A 00 00 FF 
08bd4     AC E4 85 F1 | 	sub	objptr, ##38060
08bd8                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
08bd8                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
08bd8                 | ' 
08bd8                 | ' 
08bd8                 | ' return 0
08bd8     00 FA 05 F6 | 	mov	result1, #0
08bdc                 | LR__0777
08bdc     A7 F0 03 F6 | 	mov	ptra, fp
08be0     B2 00 A0 FD | 	call	#popregs_
08be4                 | _compile_for_ret
08be4     2D 00 64 FD | 	ret
08be8                 | 
08be8                 | ' 
08be8                 | ' 
08be8                 | ' sub do_gosub()
08be8                 | _do_gosub
08be8     58 00 00 FF 
08bec     40 E5 05 F1 | 	add	objptr, ##45376
08bf0     F2 00 02 FB | 	rdlong	_var01, objptr
08bf4     01 00 06 F1 | 	add	_var01, #1
08bf8     F2 00 62 FC | 	wrlong	_var01, objptr
08bfc                 | ' gosubtop+=1
08bfc                 | ' if compiledline(lineptr_e+1).result_type=token_end then
08bfc     0E 00 00 FF 
08c00     90 E4 85 F1 | 	sub	objptr, ##7312
08c04     F2 00 02 FB | 	rdlong	_var01, objptr
08c08     01 00 06 F1 | 	add	_var01, #1
08c0c     00 03 02 F6 | 	mov	_var02, _var01
08c10     01 02 66 F0 | 	shl	_var02, #1
08c14     00 03 02 F1 | 	add	_var02, _var01
08c18     02 02 66 F0 | 	shl	_var02, #2
08c1c     03 00 00 FF 
08c20     04 E4 85 F1 | 	sub	objptr, ##1540
08c24     F2 02 02 F1 | 	add	_var02, objptr
08c28     08 02 06 F1 | 	add	_var02, #8
08c2c     01 03 02 FB | 	rdlong	_var02, _var02
08c30     FE 03 0E F2 | 	cmp	_var02, #510 wz
08c34     47 00 00 FF 
08c38     AC E4 85 F1 | 	sub	objptr, ##36524
08c3c     58 00 90 5D |  if_ne	jmp	#LR__0780
08c40     58 00 00 FF 
08c44     40 E5 05 F1 | 	add	objptr, ##45376
08c48     F2 02 02 FB | 	rdlong	_var02, objptr
08c4c     03 02 66 F0 | 	shl	_var02, #3
08c50     03 00 00 FF 
08c54     60 E5 85 F1 | 	sub	objptr, ##1888
08c58     F2 02 02 F1 | 	add	_var02, objptr
08c5c     03 00 00 FF 
08c60     0C E5 05 F1 | 	add	objptr, ##1804
08c64     F2 00 02 FB | 	rdlong	_var01, objptr
08c68     01 01 62 FC | 	wrlong	_var01, _var02
08c6c     54 E4 05 F1 | 	add	objptr, #84
08c70     F2 02 02 FB | 	rdlong	_var02, objptr
08c74     03 02 66 F0 | 	shl	_var02, #3
08c78     03 00 00 FF 
08c7c     60 E5 85 F1 | 	sub	objptr, ##1888
08c80     F2 02 02 F1 | 	add	_var02, objptr
08c84     04 02 06 F1 | 	add	_var02, #4
08c88     01 01 68 FC | 	wrlong	#0, _var02
08c8c     54 00 00 FF 
08c90     E0 E5 85 F1 | 	sub	objptr, ##43488
08c94     64 00 90 FD | 	jmp	#LR__0781
08c98                 | LR__0780
08c98     58 00 00 FF 
08c9c     40 E5 05 F1 | 	add	objptr, ##45376
08ca0     F2 02 02 FB | 	rdlong	_var02, objptr
08ca4     03 02 66 F0 | 	shl	_var02, #3
08ca8     03 00 00 FF 
08cac     60 E5 85 F1 | 	sub	objptr, ##1888
08cb0     F2 02 02 F1 | 	add	_var02, objptr
08cb4     03 00 00 FF 
08cb8     14 E5 05 F1 | 	add	objptr, ##1812
08cbc     F2 00 02 FB | 	rdlong	_var01, objptr
08cc0     01 01 62 FC | 	wrlong	_var01, _var02
08cc4     4C E4 05 F1 | 	add	objptr, #76
08cc8     F2 02 02 FB | 	rdlong	_var02, objptr
08ccc     03 02 66 F0 | 	shl	_var02, #3
08cd0     03 00 00 FF 
08cd4     60 E5 85 F1 | 	sub	objptr, ##1888
08cd8     F2 02 02 F1 | 	add	_var02, objptr
08cdc     0A 00 00 FF 
08ce0     30 E5 85 F1 | 	sub	objptr, ##5424
08ce4     F2 00 02 FB | 	rdlong	_var01, objptr
08ce8     4A 00 00 FF 
08cec     B0 E4 85 F1 | 	sub	objptr, ##38064
08cf0     02 00 06 F1 | 	add	_var01, #2
08cf4     04 02 06 F1 | 	add	_var02, #4
08cf8     01 01 62 FC | 	wrlong	_var01, _var02
08cfc                 | LR__0781
08cfc                 | _do_gosub_ret
08cfc     2D 00 64 FD | 	ret
08d00                 | 
08d00                 | ' 
08d00                 | ' 
08d00                 | ' sub do_for()
08d00                 | _do_for
08d00     01 4A 05 F6 | 	mov	COUNT_, #1
08d04     A8 00 A0 FD | 	call	#pushregs_
08d08     10 F0 07 F1 | 	add	ptra, #16
08d0c     58 00 00 FF 
08d10     3C E5 05 F1 | 	add	objptr, ##45372
08d14     F2 12 02 FB | 	rdlong	arg01, objptr
08d18     01 12 06 F1 | 	add	arg01, #1
08d1c     F2 12 62 FC | 	wrlong	arg01, objptr
08d20     58 00 00 FF 
08d24     3C E5 85 F1 | 	sub	objptr, ##45372
08d28     98 23 B0 FD | 	call	#_pop
08d2c     A7 FA 61 FC | 	wrlong	result1, fp
08d30     04 4E 05 F1 | 	add	fp, #4
08d34     A7 FC 61 FC | 	wrlong	result2, fp
08d38     04 4E 05 F1 | 	add	fp, #4
08d3c     A7 FE 61 FC | 	wrlong	result3, fp
08d40     08 4E 85 F1 | 	sub	fp, #8
08d44     58 00 00 FF 
08d48     3C E5 05 F1 | 	add	objptr, ##45372
08d4c     F2 12 02 FB | 	rdlong	arg01, objptr
08d50     09 1F 02 F6 | 	mov	local01, arg01
08d54     02 1E 66 F0 | 	shl	local01, #2
08d58     09 1F 02 F1 | 	add	local01, arg01
08d5c     02 1E 66 F0 | 	shl	local01, #2
08d60     06 00 00 FF 
08d64     70 E4 85 F1 | 	sub	objptr, ##3184
08d68     F2 1E 02 F1 | 	add	local01, objptr
08d6c     A7 12 02 FB | 	rdlong	arg01, fp
08d70     08 1E 06 F1 | 	add	local01, #8
08d74     0F 13 62 FC | 	wrlong	arg01, local01
08d78     52 00 00 FF 
08d7c     CC E4 85 F1 | 	sub	objptr, ##42188
08d80     40 23 B0 FD | 	call	#_pop
08d84     A7 FA 61 FC | 	wrlong	result1, fp
08d88     04 4E 05 F1 | 	add	fp, #4
08d8c     A7 FC 61 FC | 	wrlong	result2, fp
08d90     04 4E 05 F1 | 	add	fp, #4
08d94     A7 FE 61 FC | 	wrlong	result3, fp
08d98     08 4E 85 F1 | 	sub	fp, #8
08d9c     58 00 00 FF 
08da0     3C E5 05 F1 | 	add	objptr, ##45372
08da4     F2 12 02 FB | 	rdlong	arg01, objptr
08da8     09 1F 02 F6 | 	mov	local01, arg01
08dac     02 1E 66 F0 | 	shl	local01, #2
08db0     09 1F 02 F1 | 	add	local01, arg01
08db4     02 1E 66 F0 | 	shl	local01, #2
08db8     06 00 00 FF 
08dbc     70 E4 85 F1 | 	sub	objptr, ##3184
08dc0     F2 1E 02 F1 | 	add	local01, objptr
08dc4     A7 12 02 F6 | 	mov	arg01, fp
08dc8     52 00 00 FF 
08dcc     CC E4 85 F1 | 	sub	objptr, ##42188
08dd0     C0 C3 B0 FD | 	call	#_converttoint
08dd4     FD 12 02 F6 | 	mov	arg01, result1
08dd8     0C 1E 06 F1 | 	add	local01, #12
08ddc     0F 13 62 FC | 	wrlong	arg01, local01
08de0     E0 22 B0 FD | 	call	#_pop
08de4     A7 FA 61 FC | 	wrlong	result1, fp
08de8     04 4E 05 F1 | 	add	fp, #4
08dec     A7 FC 61 FC | 	wrlong	result2, fp
08df0     04 4E 05 F1 | 	add	fp, #4
08df4     A7 FE 61 FC | 	wrlong	result3, fp
08df8     08 4E 85 F1 | 	sub	fp, #8
08dfc     58 00 00 FF 
08e00     3C E5 05 F1 | 	add	objptr, ##45372
08e04     F2 12 02 FB | 	rdlong	arg01, objptr
08e08     09 1F 02 F6 | 	mov	local01, arg01
08e0c     02 1E 66 F0 | 	shl	local01, #2
08e10     09 1F 02 F1 | 	add	local01, arg01
08e14     02 1E 66 F0 | 	shl	local01, #2
08e18     06 00 00 FF 
08e1c     70 E4 85 F1 | 	sub	objptr, ##3184
08e20     F2 1E 02 F1 | 	add	local01, objptr
08e24     A7 12 02 F6 | 	mov	arg01, fp
08e28     52 00 00 FF 
08e2c     CC E4 85 F1 | 	sub	objptr, ##42188
08e30     60 C3 B0 FD | 	call	#_converttoint
08e34     10 1E 06 F1 | 	add	local01, #16
08e38     0F FB 61 FC | 	wrlong	result1, local01
08e3c                 | ' fortop+=1
08e3c                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
08e3c                 | ' 'if i> maxfor then printerror(36) : return
08e3c                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
08e3c                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
08e3c                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
08e3c                 | ' if compiledline(lineptr_e).result_type=token_end then
08e3c     4A 00 00 FF 
08e40     B0 E4 05 F1 | 	add	objptr, ##38064
08e44     F2 12 02 FB | 	rdlong	arg01, objptr
08e48     09 1F 02 F6 | 	mov	local01, arg01
08e4c     01 1E 66 F0 | 	shl	local01, #1
08e50     09 1F 02 F1 | 	add	local01, arg01
08e54     02 1E 66 F0 | 	shl	local01, #2
08e58     03 00 00 FF 
08e5c     04 E4 85 F1 | 	sub	objptr, ##1540
08e60     F2 1E 02 F1 | 	add	local01, objptr
08e64     08 1E 06 F1 | 	add	local01, #8
08e68     0F 1F 02 FB | 	rdlong	local01, local01
08e6c     FE 1F 0E F2 | 	cmp	local01, #510 wz
08e70     47 00 00 FF 
08e74     AC E4 85 F1 | 	sub	objptr, ##36524
08e78     70 00 90 5D |  if_ne	jmp	#LR__0790
08e7c     58 00 00 FF 
08e80     3C E5 05 F1 | 	add	objptr, ##45372
08e84     F2 12 02 FB | 	rdlong	arg01, objptr
08e88     09 1F 02 F6 | 	mov	local01, arg01
08e8c     02 1E 66 F0 | 	shl	local01, #2
08e90     09 1F 02 F1 | 	add	local01, arg01
08e94     02 1E 66 F0 | 	shl	local01, #2
08e98     06 00 00 FF 
08e9c     70 E4 85 F1 | 	sub	objptr, ##3184
08ea0     F2 1E 02 F1 | 	add	local01, objptr
08ea4     06 00 00 FF 
08ea8     20 E4 05 F1 | 	add	objptr, ##3104
08eac     F2 12 02 FB | 	rdlong	arg01, objptr
08eb0     0F 13 62 FC | 	wrlong	arg01, local01
08eb4     50 E4 05 F1 | 	add	objptr, #80
08eb8     F2 12 02 FB | 	rdlong	arg01, objptr
08ebc     09 1F 02 F6 | 	mov	local01, arg01
08ec0     02 1E 66 F0 | 	shl	local01, #2
08ec4     09 1F 02 F1 | 	add	local01, arg01
08ec8     02 1E 66 F0 | 	shl	local01, #2
08ecc     06 00 00 FF 
08ed0     70 E4 85 F1 | 	sub	objptr, ##3184
08ed4     F2 1E 02 F1 | 	add	local01, objptr
08ed8     04 1E 06 F1 | 	add	local01, #4
08edc     0F 01 68 FC | 	wrlong	#0, local01
08ee0     52 00 00 FF 
08ee4     CC E4 85 F1 | 	sub	objptr, ##42188
08ee8     7C 00 90 FD | 	jmp	#LR__0791
08eec                 | LR__0790
08eec     58 00 00 FF 
08ef0     3C E5 05 F1 | 	add	objptr, ##45372
08ef4     F2 12 02 FB | 	rdlong	arg01, objptr
08ef8     09 1F 02 F6 | 	mov	local01, arg01
08efc     02 1E 66 F0 | 	shl	local01, #2
08f00     09 1F 02 F1 | 	add	local01, arg01
08f04     02 1E 66 F0 | 	shl	local01, #2
08f08     06 00 00 FF 
08f0c     70 E4 85 F1 | 	sub	objptr, ##3184
08f10     F2 1E 02 F1 | 	add	local01, objptr
08f14     06 00 00 FF 
08f18     28 E4 05 F1 | 	add	objptr, ##3112
08f1c     F2 12 02 FB | 	rdlong	arg01, objptr
08f20     0F 13 62 FC | 	wrlong	arg01, local01
08f24     48 E4 05 F1 | 	add	objptr, #72
08f28     F2 12 02 FB | 	rdlong	arg01, objptr
08f2c     09 1F 02 F6 | 	mov	local01, arg01
08f30     02 1E 66 F0 | 	shl	local01, #2
08f34     09 1F 02 F1 | 	add	local01, arg01
08f38     02 1E 66 F0 | 	shl	local01, #2
08f3c     06 00 00 FF 
08f40     70 E4 85 F1 | 	sub	objptr, ##3184
08f44     F2 1E 02 F1 | 	add	local01, objptr
08f48     08 00 00 FF 
08f4c     1C E4 85 F1 | 	sub	objptr, ##4124
08f50     F2 12 02 FB | 	rdlong	arg01, objptr
08f54     4A 00 00 FF 
08f58     B0 E4 85 F1 | 	sub	objptr, ##38064
08f5c     01 12 06 F1 | 	add	arg01, #1
08f60     04 1E 06 F1 | 	add	local01, #4
08f64     0F 13 62 FC | 	wrlong	arg01, local01
08f68                 | LR__0791
08f68     A7 F0 03 F6 | 	mov	ptra, fp
08f6c     B2 00 A0 FD | 	call	#popregs_
08f70                 | _do_for_ret
08f70     2D 00 64 FD | 	ret
08f74                 | 
08f74                 | ' 
08f74                 | ' ' now do_next todo
08f74                 | ' 
08f74                 | ' sub do_return()
08f74                 | _do_return
08f74                 | ' if gosubtop>0 then
08f74     58 00 00 FF 
08f78     40 E5 05 F1 | 	add	objptr, ##45376
08f7c     F2 00 02 FB | 	rdlong	_var01, objptr
08f80     58 00 00 FF 
08f84     40 E5 85 F1 | 	sub	objptr, ##45376
08f88     01 00 56 F2 | 	cmps	_var01, #1 wc
08f8c     8C 00 90 CD |  if_b	jmp	#LR__0800
08f90     58 00 00 FF 
08f94     40 E5 05 F1 | 	add	objptr, ##45376
08f98     F2 00 02 FB | 	rdlong	_var01, objptr
08f9c     03 00 66 F0 | 	shl	_var01, #3
08fa0     03 00 00 FF 
08fa4     60 E5 85 F1 | 	sub	objptr, ##1888
08fa8     F2 00 02 F1 | 	add	_var01, objptr
08fac     00 01 02 FB | 	rdlong	_var01, _var01
08fb0     03 00 00 FF 
08fb4     0C E5 05 F1 | 	add	objptr, ##1804
08fb8     F2 00 62 FC | 	wrlong	_var01, objptr
08fbc     54 E4 05 F1 | 	add	objptr, #84
08fc0     F2 00 02 FB | 	rdlong	_var01, objptr
08fc4     03 00 66 F0 | 	shl	_var01, #3
08fc8     03 00 00 FF 
08fcc     60 E5 85 F1 | 	sub	objptr, ##1888
08fd0     F2 00 02 F1 | 	add	_var01, objptr
08fd4     04 00 06 F1 | 	add	_var01, #4
08fd8     00 01 02 FB | 	rdlong	_var01, _var01
08fdc     03 00 00 FF 
08fe0     10 E5 05 F1 | 	add	objptr, ##1808
08fe4     F2 00 62 FC | 	wrlong	_var01, objptr
08fe8     0E 00 00 FF 
08fec     44 E4 85 F1 | 	sub	objptr, ##7236
08ff0     F2 00 02 FB | 	rdlong	_var01, objptr
08ff4     01 00 86 F1 | 	sub	_var01, #1
08ff8     04 E4 05 F1 | 	add	objptr, #4
08ffc     F2 00 62 FC | 	wrlong	_var01, objptr
09000     0E 00 00 FF 
09004     90 E4 05 F1 | 	add	objptr, ##7312
09008     F2 00 02 FB | 	rdlong	_var01, objptr
0900c     01 00 86 F1 | 	sub	_var01, #1
09010     F2 00 62 FC | 	wrlong	_var01, objptr
09014     58 00 00 FF 
09018     40 E5 85 F1 | 	sub	objptr, ##45376
0901c                 | LR__0800
0901c                 | _do_return_ret
0901c     2D 00 64 FD | 	ret
09020                 | 
09020                 | ' 
09020                 | ' sub do_pop()
09020                 | _do_pop
09020                 | ' if gosubtop>0 then  gosubtop -=1 
09020     58 00 00 FF 
09024     40 E5 05 F1 | 	add	objptr, ##45376
09028     F2 00 02 FB | 	rdlong	_var01, objptr
0902c     58 00 00 FF 
09030     40 E5 85 F1 | 	sub	objptr, ##45376
09034     01 00 56 F2 | 	cmps	_var01, #1 wc
09038     58 00 00 3F 
0903c     40 E5 05 31 |  if_ae	add	objptr, ##45376
09040     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
09044     01 00 86 31 |  if_ae	sub	_var01, #1
09048     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
0904c     58 00 00 3F 
09050     40 E5 85 31 |  if_ae	sub	objptr, ##45376
09054                 | _do_pop_ret
09054     2D 00 64 FD | 	ret
09058                 | 
09058                 | ' 
09058                 | ' sub do_next()
09058                 | _do_next
09058     04 4A 05 F6 | 	mov	COUNT_, #4
0905c     A8 00 A0 FD | 	call	#pushregs_
09060     60 20 B0 FD | 	call	#_pop
09064     FD 1E 02 F6 | 	mov	local01, result1
09068     FE 20 02 F6 | 	mov	local02, result2
0906c     FF 22 02 F6 | 	mov	local03, result3
09070                 | ' 
09070                 | ' t1=pop() :varnum=t1.result.uresult
09070                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
09070     58 00 00 FF 
09074     3C E5 05 F1 | 	add	objptr, ##45372
09078     F2 12 02 FB | 	rdlong	arg01, objptr
0907c     09 15 02 F6 | 	mov	arg02, arg01
09080     02 14 66 F0 | 	shl	arg02, #2
09084     09 15 02 F1 | 	add	arg02, arg01
09088     02 14 66 F0 | 	shl	arg02, #2
0908c     06 00 00 FF 
09090     70 E4 85 F1 | 	sub	objptr, ##3184
09094     F2 14 02 F1 | 	add	arg02, objptr
09098     08 14 06 F1 | 	add	arg02, #8
0909c     0A 15 02 FB | 	rdlong	arg02, arg02
090a0     0F 15 0A F2 | 	cmp	arg02, local01 wz
090a4     52 00 00 FF 
090a8     CC E4 85 F1 | 	sub	objptr, ##42188
090ac     0C 00 90 AD |  if_e	jmp	#LR__0810
090b0     25 12 06 F6 | 	mov	arg01, #37
090b4     B0 37 B1 FD | 	call	#_printerror
090b8     A8 02 90 FD | 	jmp	#LR__0815
090bc                 | LR__0810
090bc                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
090bc     0F 15 02 F6 | 	mov	arg02, local01
090c0     04 14 66 F0 | 	shl	arg02, #4
090c4     15 00 00 FF 
090c8     28 E4 05 F1 | 	add	objptr, ##10792
090cc     F2 14 02 F1 | 	add	arg02, objptr
090d0     0C 14 06 F1 | 	add	arg02, #12
090d4     0A 15 02 FB | 	rdlong	arg02, arg02
090d8     1E 14 0E F2 | 	cmp	arg02, #30 wz
090dc     15 00 00 FF 
090e0     28 E4 85 F1 | 	sub	objptr, ##10792
090e4     54 00 90 5D |  if_ne	jmp	#LR__0811
090e8     0F 15 02 F6 | 	mov	arg02, local01
090ec     04 14 66 F0 | 	shl	arg02, #4
090f0     15 00 00 FF 
090f4     28 E4 05 F1 | 	add	objptr, ##10792
090f8     F2 14 02 F1 | 	add	arg02, objptr
090fc     0C 14 06 F1 | 	add	arg02, #12
09100     0A 39 68 FC | 	wrlong	#28, arg02
09104     0F 25 02 F6 | 	mov	local04, local01
09108     04 24 66 F0 | 	shl	local04, #4
0910c     F2 24 02 F1 | 	add	local04, objptr
09110     0F 13 02 F6 | 	mov	arg01, local01
09114     04 12 66 F0 | 	shl	arg01, #4
09118     F2 12 02 F1 | 	add	arg01, objptr
0911c     04 12 06 F1 | 	add	arg01, #4
09120     09 13 02 FB | 	rdlong	arg01, arg01
09124     15 00 00 FF 
09128     28 E4 85 F1 | 	sub	objptr, ##10792
0912c     01 14 06 F6 | 	mov	arg02, #1
09130     58 AC B1 FD | 	call	#__system___float_tointeger
09134     04 24 06 F1 | 	add	local04, #4
09138     12 FB 61 FC | 	wrlong	result1, local04
0913c                 | LR__0811
0913c     58 00 00 FF 
09140     3C E5 05 F1 | 	add	objptr, ##45372
09144     F2 12 02 FB | 	rdlong	arg01, objptr
09148     09 25 02 F6 | 	mov	local04, arg01
0914c     02 24 66 F0 | 	shl	local04, #2
09150     09 25 02 F1 | 	add	local04, arg01
09154     02 24 66 F0 | 	shl	local04, #2
09158     06 00 00 FF 
0915c     70 E4 85 F1 | 	sub	objptr, ##3184
09160     F2 24 02 F1 | 	add	local04, objptr
09164     0C 24 06 F1 | 	add	local04, #12
09168     12 25 02 FB | 	rdlong	local04, local04
0916c     0F 13 02 F6 | 	mov	arg01, local01
09170     04 12 66 F0 | 	shl	arg01, #4
09174     3D 00 00 FF 
09178     A4 E4 85 F1 | 	sub	objptr, ##31396
0917c     F2 12 02 F1 | 	add	arg01, objptr
09180     0F FF 01 F6 | 	mov	result3, local01
09184     04 FE 65 F0 | 	shl	result3, #4
09188     F2 FE 01 F1 | 	add	result3, objptr
0918c     04 FE 05 F1 | 	add	result3, #4
09190     FF FE 01 FB | 	rdlong	result3, result3
09194     12 FF 01 F1 | 	add	result3, local04
09198     04 12 06 F1 | 	add	arg01, #4
0919c     09 FF 61 FC | 	wrlong	result3, arg01
091a0                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
091a0                 | ' if fortable(fortop).stepval>=0 then
091a0     43 00 00 FF 
091a4     14 E5 05 F1 | 	add	objptr, ##34580
091a8     F2 12 02 FB | 	rdlong	arg01, objptr
091ac     09 25 02 F6 | 	mov	local04, arg01
091b0     02 24 66 F0 | 	shl	local04, #2
091b4     09 25 02 F1 | 	add	local04, arg01
091b8     02 24 66 F0 | 	shl	local04, #2
091bc     06 00 00 FF 
091c0     70 E4 85 F1 | 	sub	objptr, ##3184
091c4     F2 24 02 F1 | 	add	local04, objptr
091c8     0C 24 06 F1 | 	add	local04, #12
091cc     12 25 02 FB | 	rdlong	local04, local04
091d0     00 24 56 F2 | 	cmps	local04, #0 wc
091d4     52 00 00 FF 
091d8     CC E4 85 F1 | 	sub	objptr, ##42188
091dc     78 00 90 CD |  if_b	jmp	#LR__0812
091e0                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
091e0     04 1E 66 F0 | 	shl	local01, #4
091e4     15 00 00 FF 
091e8     28 E4 05 F1 | 	add	objptr, ##10792
091ec     F2 1E 02 F1 | 	add	local01, objptr
091f0     43 00 00 FF 
091f4     14 E5 05 F1 | 	add	objptr, ##34580
091f8     F2 24 02 FB | 	rdlong	local04, objptr
091fc     12 13 02 F6 | 	mov	arg01, local04
09200     02 12 66 F0 | 	shl	arg01, #2
09204     12 13 02 F1 | 	add	arg01, local04
09208     02 12 66 F0 | 	shl	arg01, #2
0920c     06 00 00 FF 
09210     70 E4 85 F1 | 	sub	objptr, ##3184
09214     F2 12 02 F1 | 	add	arg01, objptr
09218     04 1E 06 F1 | 	add	local01, #4
0921c     0F 25 02 FB | 	rdlong	local04, local01
09220     10 12 06 F1 | 	add	arg01, #16
09224     09 13 02 FB | 	rdlong	arg01, arg01
09228     09 25 5A F2 | 	cmps	local04, arg01 wcz
0922c     52 00 00 FF 
09230     CC E4 85 F1 | 	sub	objptr, ##42188
09234     9C 00 90 ED |  if_be	jmp	#LR__0814
09238     58 00 00 FF 
0923c     3C E5 05 F1 | 	add	objptr, ##45372
09240     F2 24 02 FB | 	rdlong	local04, objptr
09244     01 24 86 F1 | 	sub	local04, #1
09248     F2 24 62 FC | 	wrlong	local04, objptr
0924c     58 00 00 FF 
09250     3C E5 85 F1 | 	sub	objptr, ##45372
09254     0C 01 90 FD | 	jmp	#LR__0815
09258                 | LR__0812
09258                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
09258     0F 13 02 F6 | 	mov	arg01, local01
0925c     04 12 66 F0 | 	shl	arg01, #4
09260     15 00 00 FF 
09264     28 E4 05 F1 | 	add	objptr, ##10792
09268     F2 12 02 F1 | 	add	arg01, objptr
0926c     43 00 00 FF 
09270     14 E5 05 F1 | 	add	objptr, ##34580
09274     F2 24 02 FB | 	rdlong	local04, objptr
09278     12 1F 02 F6 | 	mov	local01, local04
0927c     02 1E 66 F0 | 	shl	local01, #2
09280     12 1F 02 F1 | 	add	local01, local04
09284     02 1E 66 F0 | 	shl	local01, #2
09288     06 00 00 FF 
0928c     70 E4 85 F1 | 	sub	objptr, ##3184
09290     F2 1E 02 F1 | 	add	local01, objptr
09294     04 12 06 F1 | 	add	arg01, #4
09298     09 13 02 FB | 	rdlong	arg01, arg01
0929c     10 1E 06 F1 | 	add	local01, #16
092a0     0F 1F 02 FB | 	rdlong	local01, local01
092a4     0F 13 52 F2 | 	cmps	arg01, local01 wc
092a8     52 00 00 FF 
092ac     CC E4 85 F1 | 	sub	objptr, ##42188
092b0     20 00 90 3D |  if_ae	jmp	#LR__0813
092b4     58 00 00 FF 
092b8     3C E5 05 F1 | 	add	objptr, ##45372
092bc     F2 24 02 FB | 	rdlong	local04, objptr
092c0     01 24 86 F1 | 	sub	local04, #1
092c4     F2 24 62 FC | 	wrlong	local04, objptr
092c8     58 00 00 FF 
092cc     3C E5 85 F1 | 	sub	objptr, ##45372
092d0     90 00 90 FD | 	jmp	#LR__0815
092d4                 | LR__0813
092d4                 | LR__0814
092d4     58 00 00 FF 
092d8     3C E5 05 F1 | 	add	objptr, ##45372
092dc     F2 1E 02 FB | 	rdlong	local01, objptr
092e0     0F 25 02 F6 | 	mov	local04, local01
092e4     02 24 66 F0 | 	shl	local04, #2
092e8     0F 25 02 F1 | 	add	local04, local01
092ec     02 24 66 F0 | 	shl	local04, #2
092f0     06 00 00 FF 
092f4     70 E4 85 F1 | 	sub	objptr, ##3184
092f8     F2 24 02 F1 | 	add	local04, objptr
092fc     12 25 02 FB | 	rdlong	local04, local04
09300     06 00 00 FF 
09304     20 E4 05 F1 | 	add	objptr, ##3104
09308     F2 24 62 FC | 	wrlong	local04, objptr
0930c     50 E4 05 F1 | 	add	objptr, #80
09310     F2 1E 02 FB | 	rdlong	local01, objptr
09314     0F 25 02 F6 | 	mov	local04, local01
09318     02 24 66 F0 | 	shl	local04, #2
0931c     0F 25 02 F1 | 	add	local04, local01
09320     02 24 66 F0 | 	shl	local04, #2
09324     06 00 00 FF 
09328     70 E4 85 F1 | 	sub	objptr, ##3184
0932c     F2 24 02 F1 | 	add	local04, objptr
09330     04 24 06 F1 | 	add	local04, #4
09334     12 25 02 FB | 	rdlong	local04, local04
09338     06 00 00 FF 
0933c     24 E4 05 F1 | 	add	objptr, ##3108
09340     F2 24 62 FC | 	wrlong	local04, objptr
09344     0E 00 00 FF 
09348     44 E4 85 F1 | 	sub	objptr, ##7236
0934c     F2 24 02 FB | 	rdlong	local04, objptr
09350     01 24 86 F1 | 	sub	local04, #1
09354     04 E4 05 F1 | 	add	objptr, #4
09358     F2 24 62 FC | 	wrlong	local04, objptr
0935c     4A 00 00 FF 
09360     B0 E4 85 F1 | 	sub	objptr, ##38064
09364                 | LR__0815
09364     A7 F0 03 F6 | 	mov	ptra, fp
09368     B2 00 A0 FD | 	call	#popregs_
0936c                 | _do_next_ret
0936c     2D 00 64 FD | 	ret
09370                 | 
09370                 | ' 
09370                 | ' 
09370                 | ' function compile_next() as ulong
09370                 | _compile_next
09370     04 4A 05 F6 | 	mov	COUNT_, #4
09374     A8 00 A0 FD | 	call	#pushregs_
09378     37 00 00 FF 
0937c     74 E4 05 F1 | 	add	objptr, ##28276
09380     F2 12 02 FB | 	rdlong	arg01, objptr
09384     03 12 66 F0 | 	shl	arg01, #3
09388     02 00 00 FF 
0938c     38 E4 85 F1 | 	sub	objptr, ##1080
09390     F2 12 02 F1 | 	add	arg01, objptr
09394     09 1F 02 FB | 	rdlong	local01, arg01
09398                 | ' 
09398                 | ' varname$=lparts(ct).part$ 
09398                 | ' 'suffix$=right$(varname$,1)
09398                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
09398                 | ' if varnum=0 then compile_error(35)  : return 35
09398     04 E4 85 F1 | 	sub	objptr, #4
0939c     F2 14 0A FB | 	rdlong	arg02, objptr wz
093a0     35 00 00 FF 
093a4     38 E4 85 F1 | 	sub	objptr, ##27192
093a8     10 00 90 5D |  if_ne	jmp	#LR__0820
093ac     23 12 06 F6 | 	mov	arg01, #35
093b0     B8 DD BF FD | 	call	#_compile_error
093b4     23 FA 05 F6 | 	mov	result1, #35
093b8     58 01 90 FD | 	jmp	#LR__0824
093bc                 | LR__0820
093bc     01 20 66 F6 | 	neg	local02, #1
093c0                 | ' j=-1
093c0                 | ' for i=0 to varnum-1
093c0     00 22 06 F6 | 	mov	local03, #0
093c4     35 00 00 FF 
093c8     38 E4 05 F1 | 	add	objptr, ##27192
093cc     F2 24 02 FB | 	rdlong	local04, objptr
093d0     35 00 00 FF 
093d4     38 E4 85 F1 | 	sub	objptr, ##27192
093d8                 | LR__0821
093d8     12 23 12 F2 | 	cmp	local03, local04 wc
093dc     38 00 90 3D |  if_ae	jmp	#LR__0822
093e0                 | '   if variables(i).name=varname$ then j=i : exit
093e0     11 15 02 F6 | 	mov	arg02, local03
093e4     04 14 66 F0 | 	shl	arg02, #4
093e8     15 00 00 FF 
093ec     28 E4 05 F1 | 	add	objptr, ##10792
093f0     F2 14 02 F1 | 	add	arg02, objptr
093f4     0A 13 02 FB | 	rdlong	arg01, arg02
093f8     0F 15 02 F6 | 	mov	arg02, local01
093fc     15 00 00 FF 
09400     28 E4 85 F1 | 	sub	objptr, ##10792
09404     30 79 B1 FD | 	call	#__system___string_cmp
09408     00 FA 0D F2 | 	cmp	result1, #0 wz
0940c     11 21 02 A6 |  if_e	mov	local02, local03
09410     01 22 06 51 |  if_ne	add	local03, #1
09414     C0 FF 9F 5D |  if_ne	jmp	#LR__0821
09418                 | LR__0822
09418                 | ' if j=-1 then compile_error(35) : return 35
09418     FF FF 7F FF 
0941c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
09420     10 00 90 5D |  if_ne	jmp	#LR__0823
09424     23 12 06 F6 | 	mov	arg01, #35
09428     40 DD BF FD | 	call	#_compile_error
0942c     23 FA 05 F6 | 	mov	result1, #35
09430     E0 00 90 FD | 	jmp	#LR__0824
09434                 | LR__0823
09434     4A 00 00 FF 
09438     AC E4 05 F1 | 	add	objptr, ##38060
0943c     F2 24 02 FB | 	rdlong	local04, objptr
09440     12 23 02 F6 | 	mov	local03, local04
09444     01 22 66 F0 | 	shl	local03, #1
09448     12 23 02 F1 | 	add	local03, local04
0944c     02 22 66 F0 | 	shl	local03, #2
09450     03 00 00 FF 
09454     00 E4 85 F1 | 	sub	objptr, ##1536
09458     F2 22 02 F1 | 	add	local03, objptr
0945c     08 22 06 F1 | 	add	local03, #8
09460     11 39 68 FC | 	wrlong	#28, local03
09464     03 00 00 FF 
09468     00 E4 05 F1 | 	add	objptr, ##1536
0946c     F2 24 02 FB | 	rdlong	local04, objptr
09470     12 23 02 F6 | 	mov	local03, local04
09474     01 22 66 F0 | 	shl	local03, #1
09478     12 23 02 F1 | 	add	local03, local04
0947c     02 22 66 F0 | 	shl	local03, #2
09480     03 00 00 FF 
09484     00 E4 85 F1 | 	sub	objptr, ##1536
09488     F2 22 02 F1 | 	add	local03, objptr
0948c     11 21 62 FC | 	wrlong	local02, local03
09490     03 00 00 FF 
09494     00 E4 05 F1 | 	add	objptr, ##1536
09498     F2 24 02 FB | 	rdlong	local04, objptr
0949c     01 24 06 F1 | 	add	local04, #1
094a0     F2 24 62 FC | 	wrlong	local04, objptr
094a4     12 23 02 F6 | 	mov	local03, local04
094a8     01 22 66 F0 | 	shl	local03, #1
094ac     12 23 02 F1 | 	add	local03, local04
094b0     02 22 66 F0 | 	shl	local03, #2
094b4     03 00 00 FF 
094b8     00 E4 85 F1 | 	sub	objptr, ##1536
094bc     F2 22 02 F1 | 	add	local03, objptr
094c0     08 22 06 F1 | 	add	local03, #8
094c4     11 97 68 FC | 	wrlong	#75, local03
094c8     03 00 00 FF 
094cc     00 E4 05 F1 | 	add	objptr, ##1536
094d0     F2 24 02 FB | 	rdlong	local04, objptr
094d4     12 23 02 F6 | 	mov	local03, local04
094d8     01 22 66 F0 | 	shl	local03, #1
094dc     12 23 02 F1 | 	add	local03, local04
094e0     02 22 66 F0 | 	shl	local03, #2
094e4     03 00 00 FF 
094e8     00 E4 85 F1 | 	sub	objptr, ##1536
094ec     F2 22 02 F1 | 	add	local03, objptr
094f0     11 01 68 FC | 	wrlong	#0, local03
094f4     03 00 00 FF 
094f8     00 E4 05 F1 | 	add	objptr, ##1536
094fc     F2 24 02 FB | 	rdlong	local04, objptr
09500     01 24 06 F1 | 	add	local04, #1
09504     F2 24 62 FC | 	wrlong	local04, objptr
09508     4A 00 00 FF 
0950c     AC E4 85 F1 | 	sub	objptr, ##38060
09510                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
09510                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
09510                 | ' return 0
09510     00 FA 05 F6 | 	mov	result1, #0
09514                 | LR__0824
09514     A7 F0 03 F6 | 	mov	ptra, fp
09518     B2 00 A0 FD | 	call	#popregs_
0951c                 | _compile_next_ret
0951c     2D 00 64 FD | 	ret
09520                 | 
09520                 | ' 
09520                 | ' 
09520                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
09520                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
09520                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
09520                 | ' 
09520                 | ' function compile_gosub() as ulong
09520                 | _compile_gosub
09520     01 4A 05 F6 | 	mov	COUNT_, #1
09524     A8 00 A0 FD | 	call	#pushregs_
09528     4A 00 00 FF 
0952c     AC E4 05 F1 | 	add	objptr, ##38060
09530     F2 1E 02 FB | 	rdlong	local01, objptr
09534     0F FB 01 F6 | 	mov	result1, local01
09538     01 FA 65 F0 | 	shl	result1, #1
0953c     0F FB 01 F1 | 	add	result1, local01
09540     02 FA 65 F0 | 	shl	result1, #2
09544     03 00 00 FF 
09548     00 E4 85 F1 | 	sub	objptr, ##1536
0954c     F2 FA 01 F1 | 	add	result1, objptr
09550     08 FA 05 F1 | 	add	result1, #8
09554     FD 52 69 FC | 	wrlong	#169, result1
09558     03 00 00 FF 
0955c     00 E4 05 F1 | 	add	objptr, ##1536
09560     F2 1E 02 FB | 	rdlong	local01, objptr
09564     01 1E 06 F1 | 	add	local01, #1
09568     F2 1E 62 FC | 	wrlong	local01, objptr
0956c     4A 00 00 FF 
09570     AC E4 85 F1 | 	sub	objptr, ##38060
09574     10 00 B0 FD | 	call	#_compile_goto
09578                 | ' 
09578                 | ' compiledline(lineptr).result_type=token_gosub
09578                 | ' lineptr+=1
09578                 | ' compile_goto()
09578                 | ' return 0
09578     00 FA 05 F6 | 	mov	result1, #0
0957c     A7 F0 03 F6 | 	mov	ptra, fp
09580     B2 00 A0 FD | 	call	#popregs_
09584                 | _compile_gosub_ret
09584     2D 00 64 FD | 	ret
09588                 | 
09588                 | ' 
09588                 | ' function compile_goto( ) as ulong
09588                 | _compile_goto
09588     03 4A 05 F6 | 	mov	COUNT_, #3
0958c     A8 00 A0 FD | 	call	#pushregs_
09590     34 F0 07 F1 | 	add	ptra, #52
09594                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
09594     37 00 00 FF 
09598     74 E4 05 F1 | 	add	objptr, ##28276
0959c     F2 16 02 FB | 	rdlong	arg03, objptr
095a0     03 16 66 F0 | 	shl	arg03, #3
095a4     02 00 00 FF 
095a8     38 E4 85 F1 | 	sub	objptr, ##1080
095ac     F2 16 02 F1 | 	add	arg03, objptr
095b0     04 16 06 F1 | 	add	arg03, #4
095b4     0B 17 02 FB | 	rdlong	arg03, arg03
095b8     01 00 00 FF 
095bc     00 16 0E F2 | 	cmp	arg03, ##512 wz
095c0     35 00 00 FF 
095c4     3C E4 85 F1 | 	sub	objptr, ##27196
095c8     CC 02 90 5D |  if_ne	jmp	#LR__0835
095cc     37 00 00 FF 
095d0     74 E4 05 F1 | 	add	objptr, ##28276
095d4     F2 16 02 FB | 	rdlong	arg03, objptr
095d8     01 16 06 F1 | 	add	arg03, #1
095dc     03 16 66 F0 | 	shl	arg03, #3
095e0     02 00 00 FF 
095e4     38 E4 85 F1 | 	sub	objptr, ##1080
095e8     F2 16 02 F1 | 	add	arg03, objptr
095ec     04 16 06 F1 | 	add	arg03, #4
095f0     0B 17 02 FB | 	rdlong	arg03, arg03
095f4     FE 17 0E F2 | 	cmp	arg03, #510 wz
095f8     35 00 00 FF 
095fc     3C E4 85 F1 | 	sub	objptr, ##27196
09600     94 02 90 5D |  if_ne	jmp	#LR__0835
09604     37 00 00 FF 
09608     74 E4 05 F1 | 	add	objptr, ##28276
0960c     F2 16 02 FB | 	rdlong	arg03, objptr
09610     03 16 66 F0 | 	shl	arg03, #3
09614     02 00 00 FF 
09618     38 E4 85 F1 | 	sub	objptr, ##1080
0961c     F2 16 02 F1 | 	add	arg03, objptr
09620     0B 13 02 FB | 	rdlong	arg01, arg03
09624     00 14 06 F6 | 	mov	arg02, #0
09628     35 00 00 FF 
0962c     3C E4 85 F1 | 	sub	objptr, ##27196
09630     08 A9 B1 FD | 	call	#__system____builtin_atoi
09634     04 4E 05 F1 | 	add	fp, #4
09638     A7 FA 61 FC | 	wrlong	result1, fp
0963c     4A 00 00 FF 
09640     AC E4 05 F1 | 	add	objptr, ##38060
09644     F2 1E 02 FB | 	rdlong	local01, objptr
09648     0F 21 02 F6 | 	mov	local02, local01
0964c     01 20 66 F0 | 	shl	local02, #1
09650     0F 21 02 F1 | 	add	local02, local01
09654     02 20 66 F0 | 	shl	local02, #2
09658     03 00 00 FF 
0965c     00 E4 85 F1 | 	sub	objptr, ##1536
09660     F2 20 02 F1 | 	add	local02, objptr
09664     08 20 06 F1 | 	add	local02, #8
09668     10 9D 68 FC | 	wrlong	#78, local02
0966c     03 00 00 FF 
09670     08 E4 05 F1 | 	add	objptr, ##1544
09674     F2 22 02 FB | 	rdlong	local03, objptr
09678     4A 00 00 FF 
0967c     B4 E4 85 F1 | 	sub	objptr, ##38068
09680     04 4E 05 F1 | 	add	fp, #4
09684     A7 22 62 FC | 	wrlong	local03, fp
09688     08 4E 85 F1 | 	sub	fp, #8
0968c                 | ' 
0968c                 | '   gotoline=val%(lparts(ct).part$) 
0968c                 | '   compiledline(lineptr).result_type=token_fast_goto
0968c                 | ' ' now find a pointer to goto
0968c                 | '   gotoptr=programstart
0968c                 | '   do
0968c                 | LR__0830
0968c     10 4E 05 F1 | 	add	fp, #16
09690     A7 12 02 F6 | 	mov	arg01, fp
09694     08 4E 85 F1 | 	sub	fp, #8
09698     A7 14 02 FB | 	rdlong	arg02, fp
0969c     08 4E 85 F1 | 	sub	fp, #8
096a0     18 16 06 F6 | 	mov	arg03, #24
096a4     0B 00 00 FF 
096a8     CC E4 05 F1 | 	add	objptr, ##5836
096ac     20 6A B1 FD | 	call	#_psram_spin2_read1
096b0     0B 00 00 FF 
096b4     CC E4 85 F1 | 	sub	objptr, ##5836
096b8                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
096b8                 | '     if gotoheader(0)<>$FFFFFFFF then
096b8     10 4E 05 F1 | 	add	fp, #16
096bc     A7 22 02 FB | 	rdlong	local03, fp
096c0     10 4E 85 F1 | 	sub	fp, #16
096c4     FF FF 7F FF 
096c8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
096cc     24 00 90 AD |  if_e	jmp	#LR__0831
096d0     08 4E 05 F1 | 	add	fp, #8
096d4     A7 22 02 FB | 	rdlong	local03, fp
096d8     04 4E 05 F1 | 	add	fp, #4
096dc     A7 22 62 FC | 	wrlong	local03, fp
096e0     18 4E 05 F1 | 	add	fp, #24
096e4     A7 22 02 FB | 	rdlong	local03, fp
096e8     1C 4E 85 F1 | 	sub	fp, #28
096ec     A7 22 62 FC | 	wrlong	local03, fp
096f0     08 4E 85 F1 | 	sub	fp, #8
096f4                 | LR__0831
096f4     24 4E 05 F1 | 	add	fp, #36
096f8     A7 22 02 FB | 	rdlong	local03, fp
096fc     24 4E 85 F1 | 	sub	fp, #36
09700     FF FF 3F FF 
09704     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
09708     10 4E 05 51 |  if_ne	add	fp, #16
0970c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
09710     10 4E 85 51 |  if_ne	sub	fp, #16
09714     FF FF 7F 5F 
09718     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0971c     1C 00 90 AD |  if_e	jmp	#LR__0832
09720     10 4E 05 F1 | 	add	fp, #16
09724     A7 22 02 FB | 	rdlong	local03, fp
09728     0C 4E 85 F1 | 	sub	fp, #12
0972c     A7 20 02 FB | 	rdlong	local02, fp
09730     04 4E 85 F1 | 	sub	fp, #4
09734     10 23 0A F2 | 	cmp	local03, local02 wz
09738     50 FF 9F 5D |  if_ne	jmp	#LR__0830
0973c                 | LR__0832
0973c                 | '   if gotoheader(0)=gotoline then
0973c     10 4E 05 F1 | 	add	fp, #16
09740     A7 22 02 FB | 	rdlong	local03, fp
09744     0C 4E 85 F1 | 	sub	fp, #12
09748     A7 1E 02 FB | 	rdlong	local01, fp
0974c     04 4E 85 F1 | 	sub	fp, #4
09750     0F 23 0A F2 | 	cmp	local03, local01 wz
09754     7C 00 90 5D |  if_ne	jmp	#LR__0833
09758     4A 00 00 FF 
0975c     AC E4 05 F1 | 	add	objptr, ##38060
09760     F2 1E 02 FB | 	rdlong	local01, objptr
09764     0F 21 02 F6 | 	mov	local02, local01
09768     01 20 66 F0 | 	shl	local02, #1
0976c     0F 21 02 F1 | 	add	local02, local01
09770     02 20 66 F0 | 	shl	local02, #2
09774     03 00 00 FF 
09778     00 E4 85 F1 | 	sub	objptr, ##1536
0977c     F2 20 02 F1 | 	add	local02, objptr
09780     0C 4E 05 F1 | 	add	fp, #12
09784     A7 22 02 FB | 	rdlong	local03, fp
09788     10 23 62 FC | 	wrlong	local03, local02
0978c     03 00 00 FF 
09790     00 E4 05 F1 | 	add	objptr, ##1536
09794     F2 1E 02 FB | 	rdlong	local01, objptr
09798     0F 21 02 F6 | 	mov	local02, local01
0979c     01 20 66 F0 | 	shl	local02, #1
097a0     0F 21 02 F1 | 	add	local02, local01
097a4     02 20 66 F0 | 	shl	local02, #2
097a8     03 00 00 FF 
097ac     00 E4 85 F1 | 	sub	objptr, ##1536
097b0     F2 20 02 F1 | 	add	local02, objptr
097b4     08 4E 85 F1 | 	sub	fp, #8
097b8     A7 22 02 FB | 	rdlong	local03, fp
097bc     04 4E 85 F1 | 	sub	fp, #4
097c0     04 20 06 F1 | 	add	local02, #4
097c4     10 23 62 FC | 	wrlong	local03, local02
097c8     47 00 00 FF 
097cc     AC E4 85 F1 | 	sub	objptr, ##36524
097d0     A4 00 90 FD | 	jmp	#LR__0834
097d4                 | LR__0833
097d4     4A 00 00 FF 
097d8     AC E4 05 F1 | 	add	objptr, ##38060
097dc     F2 1E 02 FB | 	rdlong	local01, objptr
097e0     0F 21 02 F6 | 	mov	local02, local01
097e4     01 20 66 F0 | 	shl	local02, #1
097e8     0F 21 02 F1 | 	add	local02, local01
097ec     02 20 66 F0 | 	shl	local02, #2
097f0     03 00 00 FF 
097f4     00 E4 85 F1 | 	sub	objptr, ##1536
097f8     F2 20 02 F1 | 	add	local02, objptr
097fc     00 00 C0 FF 
09800     10 01 68 FC | 	wrlong	##-2147483648, local02
09804     03 00 00 FF 
09808     00 E4 05 F1 | 	add	objptr, ##1536
0980c     F2 1E 02 FB | 	rdlong	local01, objptr
09810     0F 21 02 F6 | 	mov	local02, local01
09814     01 20 66 F0 | 	shl	local02, #1
09818     0F 21 02 F1 | 	add	local02, local01
0981c     02 20 66 F0 | 	shl	local02, #2
09820     03 00 00 FF 
09824     00 E4 85 F1 | 	sub	objptr, ##1536
09828     F2 20 02 F1 | 	add	local02, objptr
0982c     04 4E 05 F1 | 	add	fp, #4
09830     A7 22 02 FB | 	rdlong	local03, fp
09834     04 4E 85 F1 | 	sub	fp, #4
09838     04 20 06 F1 | 	add	local02, #4
0983c     10 23 62 FC | 	wrlong	local03, local02
09840     03 00 00 FF 
09844     00 E4 05 F1 | 	add	objptr, ##1536
09848     F2 1E 02 FB | 	rdlong	local01, objptr
0984c     0F 21 02 F6 | 	mov	local02, local01
09850     01 20 66 F0 | 	shl	local02, #1
09854     0F 21 02 F1 | 	add	local02, local01
09858     02 20 66 F0 | 	shl	local02, #2
0985c     03 00 00 FF 
09860     00 E4 85 F1 | 	sub	objptr, ##1536
09864     F2 20 02 F1 | 	add	local02, objptr
09868     08 20 06 F1 | 	add	local02, #8
0986c     10 A7 68 FC | 	wrlong	#83, local02
09870     47 00 00 FF 
09874     AC E4 85 F1 | 	sub	objptr, ##36524
09878                 | LR__0834
09878     4A 00 00 FF 
0987c     AC E4 05 F1 | 	add	objptr, ##38060
09880     F2 22 02 FB | 	rdlong	local03, objptr
09884     01 22 06 F1 | 	add	local03, #1
09888     F2 22 62 FC | 	wrlong	local03, objptr
0988c     4A 00 00 FF 
09890     AC E4 85 F1 | 	sub	objptr, ##38060
09894     D0 00 90 FD | 	jmp	#LR__0836
09898                 | LR__0835
09898     DC 00 B0 FD | 	call	#_expr
0989c     30 4E 05 F1 | 	add	fp, #48
098a0     A7 9E 68 FC | 	wrlong	#79, fp
098a4     08 4E 85 F1 | 	sub	fp, #8
098a8     A7 00 68 FC | 	wrlong	#0, fp
098ac     04 4E 05 F1 | 	add	fp, #4
098b0     A7 22 02 FB | 	rdlong	local03, fp
098b4     04 4E 05 F1 | 	add	fp, #4
098b8     A7 1E 02 FB | 	rdlong	local01, fp
098bc     30 4E 85 F1 | 	sub	fp, #48
098c0     4A 00 00 FF 
098c4     AC E4 05 F1 | 	add	objptr, ##38060
098c8     F2 20 02 FB | 	rdlong	local02, objptr
098cc     10 17 02 F6 | 	mov	arg03, local02
098d0     01 16 66 F0 | 	shl	arg03, #1
098d4     10 17 02 F1 | 	add	arg03, local02
098d8     02 16 66 F0 | 	shl	arg03, #2
098dc     03 00 00 FF 
098e0     00 E4 85 F1 | 	sub	objptr, ##1536
098e4     F2 16 02 F1 | 	add	arg03, objptr
098e8     0B 01 68 FC | 	wrlong	#0, arg03
098ec     03 00 00 FF 
098f0     00 E4 05 F1 | 	add	objptr, ##1536
098f4     F2 20 02 FB | 	rdlong	local02, objptr
098f8     10 17 02 F6 | 	mov	arg03, local02
098fc     01 16 66 F0 | 	shl	arg03, #1
09900     10 17 02 F1 | 	add	arg03, local02
09904     02 16 66 F0 | 	shl	arg03, #2
09908     03 00 00 FF 
0990c     00 E4 85 F1 | 	sub	objptr, ##1536
09910     F2 16 02 F1 | 	add	arg03, objptr
09914     04 16 06 F1 | 	add	arg03, #4
09918     0B 23 62 FC | 	wrlong	local03, arg03
0991c     03 00 00 FF 
09920     00 E4 05 F1 | 	add	objptr, ##1536
09924     F2 22 02 FB | 	rdlong	local03, objptr
09928     11 21 02 F6 | 	mov	local02, local03
0992c     01 20 66 F0 | 	shl	local02, #1
09930     11 21 02 F1 | 	add	local02, local03
09934     02 20 66 F0 | 	shl	local02, #2
09938     03 00 00 FF 
0993c     00 E4 85 F1 | 	sub	objptr, ##1536
09940     F2 20 02 F1 | 	add	local02, objptr
09944     08 20 06 F1 | 	add	local02, #8
09948     10 1F 62 FC | 	wrlong	local01, local02
0994c     03 00 00 FF 
09950     00 E4 05 F1 | 	add	objptr, ##1536
09954     F2 22 02 FB | 	rdlong	local03, objptr
09958     01 22 06 F1 | 	add	local03, #1
0995c     F2 22 62 FC | 	wrlong	local03, objptr
09960     4A 00 00 FF 
09964     AC E4 85 F1 | 	sub	objptr, ##38060
09968                 | LR__0836
09968                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
09968                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
09968                 | ' return 0
09968     00 FA 05 F6 | 	mov	result1, #0
0996c     A7 F0 03 F6 | 	mov	ptra, fp
09970     B2 00 A0 FD | 	call	#popregs_
09974                 | _compile_goto_ret
09974     2D 00 64 FD | 	ret
09978                 | 
09978                 | ' 
09978                 | ' 
09978                 | ' 
09978                 | ' 
09978                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09978                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
09978                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09978                 | ' 
09978                 | ' 
09978                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09978                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
09978                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09978                 | ' 
09978                 | ' 
09978                 | ' function expr() as integer 
09978                 | _expr
09978     07 4A 05 F6 | 	mov	COUNT_, #7
0997c     A8 00 A0 FD | 	call	#pushregs_
09980                 | _expr_enter
09980     37 00 00 FF 
09984     74 E4 05 F1 | 	add	objptr, ##28276
09988     F2 24 02 FB | 	rdlong	local04, objptr
0998c     03 24 66 F0 | 	shl	local04, #3
09990     02 00 00 FF 
09994     38 E4 85 F1 | 	sub	objptr, ##1080
09998     F2 24 02 F1 | 	add	local04, objptr
0999c     04 24 06 F1 | 	add	local04, #4
099a0     12 27 02 FB | 	rdlong	local05, local04
099a4                 | ' 
099a4                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
099a4     FE 27 0E F2 | 	cmp	local05, #510 wz
099a8     35 00 00 FF 
099ac     3C E4 85 F1 | 	sub	objptr, ##27196
099b0     C4 00 90 5D |  if_ne	jmp	#LR__0840
099b4     1D 1E 06 F6 | 	mov	local01, #29
099b8     FF 22 06 F6 | 	mov	local03, #255
099bc     0F 29 02 F6 | 	mov	local06, local01
099c0     10 2B 02 F6 | 	mov	local07, local02
099c4     11 1F 02 F6 | 	mov	local01, local03
099c8     4A 00 00 FF 
099cc     AC E4 05 F1 | 	add	objptr, ##38060
099d0     F2 26 02 FB | 	rdlong	local05, objptr
099d4     13 25 02 F6 | 	mov	local04, local05
099d8     01 24 66 F0 | 	shl	local04, #1
099dc     13 25 02 F1 | 	add	local04, local05
099e0     02 24 66 F0 | 	shl	local04, #2
099e4     03 00 00 FF 
099e8     00 E4 85 F1 | 	sub	objptr, ##1536
099ec     F2 24 02 F1 | 	add	local04, objptr
099f0     12 29 62 FC | 	wrlong	local06, local04
099f4     03 00 00 FF 
099f8     00 E4 05 F1 | 	add	objptr, ##1536
099fc     F2 28 02 FB | 	rdlong	local06, objptr
09a00     14 27 02 F6 | 	mov	local05, local06
09a04     01 26 66 F0 | 	shl	local05, #1
09a08     14 27 02 F1 | 	add	local05, local06
09a0c     02 26 66 F0 | 	shl	local05, #2
09a10     03 00 00 FF 
09a14     00 E4 85 F1 | 	sub	objptr, ##1536
09a18     F2 26 02 F1 | 	add	local05, objptr
09a1c     04 26 06 F1 | 	add	local05, #4
09a20     13 2B 62 FC | 	wrlong	local07, local05
09a24     03 00 00 FF 
09a28     00 E4 05 F1 | 	add	objptr, ##1536
09a2c     F2 2A 02 FB | 	rdlong	local07, objptr
09a30     15 29 02 F6 | 	mov	local06, local07
09a34     01 28 66 F0 | 	shl	local06, #1
09a38     15 29 02 F1 | 	add	local06, local07
09a3c     02 28 66 F0 | 	shl	local06, #2
09a40     03 00 00 FF 
09a44     00 E4 85 F1 | 	sub	objptr, ##1536
09a48     F2 28 02 F1 | 	add	local06, objptr
09a4c     08 28 06 F1 | 	add	local06, #8
09a50     14 1F 62 FC | 	wrlong	local01, local06
09a54     03 00 00 FF 
09a58     00 E4 05 F1 | 	add	objptr, ##1536
09a5c     F2 28 02 FB | 	rdlong	local06, objptr
09a60     01 28 06 F1 | 	add	local06, #1
09a64     F2 28 62 FC | 	wrlong	local06, objptr
09a68     4A 00 00 FF 
09a6c     AC E4 85 F1 | 	sub	objptr, ##38060
09a70     1D FA 05 F6 | 	mov	result1, #29
09a74     54 01 90 FD | 	jmp	#LR__0843
09a78                 | LR__0840
09a78     00 1E 06 F6 | 	mov	local01, #0
09a7c     58 01 B0 FD | 	call	#_addsub
09a80     37 00 00 FF 
09a84     74 E4 05 F1 | 	add	objptr, ##28276
09a88     F2 24 02 FB | 	rdlong	local04, objptr
09a8c     03 24 66 F0 | 	shl	local04, #3
09a90     02 00 00 FF 
09a94     38 E4 85 F1 | 	sub	objptr, ##1080
09a98     F2 24 02 F1 | 	add	local04, objptr
09a9c     04 24 06 F1 | 	add	local04, #4
09aa0     12 27 02 FB | 	rdlong	local05, local04
09aa4                 | ' t3.result.uresult=0
09aa4                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
09aa4                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
09aa4                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
09aa4     35 00 00 FF 
09aa8     3C E4 85 F1 | 	sub	objptr, ##27196
09aac                 | LR__0841
09aac     1B 26 0E F2 | 	cmp	local05, #27 wz
09ab0     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
09ab4     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
09ab8     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
09abc     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
09ac0     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
09ac4     00 01 90 5D |  if_ne	jmp	#LR__0842
09ac8     37 00 00 FF 
09acc     74 E4 05 F1 | 	add	objptr, ##28276
09ad0     F2 28 02 FB | 	rdlong	local06, objptr
09ad4     01 28 06 F1 | 	add	local06, #1
09ad8     F2 28 62 FC | 	wrlong	local06, objptr
09adc     37 00 00 FF 
09ae0     74 E4 85 F1 | 	sub	objptr, ##28276
09ae4     F0 00 B0 FD | 	call	#_addsub
09ae8     13 23 02 F6 | 	mov	local03, local05
09aec     0F 29 02 F6 | 	mov	local06, local01
09af0     10 2B 02 F6 | 	mov	local07, local02
09af4     11 27 02 F6 | 	mov	local05, local03
09af8     4A 00 00 FF 
09afc     AC E4 05 F1 | 	add	objptr, ##38060
09b00     F2 24 02 FB | 	rdlong	local04, objptr
09b04     12 FB 01 F6 | 	mov	result1, local04
09b08     01 FA 65 F0 | 	shl	result1, #1
09b0c     12 FB 01 F1 | 	add	result1, local04
09b10     02 FA 65 F0 | 	shl	result1, #2
09b14     03 00 00 FF 
09b18     00 E4 85 F1 | 	sub	objptr, ##1536
09b1c     F2 FA 01 F1 | 	add	result1, objptr
09b20     FD 28 62 FC | 	wrlong	local06, result1
09b24     03 00 00 FF 
09b28     00 E4 05 F1 | 	add	objptr, ##1536
09b2c     F2 28 02 FB | 	rdlong	local06, objptr
09b30     14 25 02 F6 | 	mov	local04, local06
09b34     01 24 66 F0 | 	shl	local04, #1
09b38     14 25 02 F1 | 	add	local04, local06
09b3c     02 24 66 F0 | 	shl	local04, #2
09b40     03 00 00 FF 
09b44     00 E4 85 F1 | 	sub	objptr, ##1536
09b48     F2 24 02 F1 | 	add	local04, objptr
09b4c     04 24 06 F1 | 	add	local04, #4
09b50     12 2B 62 FC | 	wrlong	local07, local04
09b54     03 00 00 FF 
09b58     00 E4 05 F1 | 	add	objptr, ##1536
09b5c     F2 2A 02 FB | 	rdlong	local07, objptr
09b60     15 29 02 F6 | 	mov	local06, local07
09b64     01 28 66 F0 | 	shl	local06, #1
09b68     15 29 02 F1 | 	add	local06, local07
09b6c     02 28 66 F0 | 	shl	local06, #2
09b70     03 00 00 FF 
09b74     00 E4 85 F1 | 	sub	objptr, ##1536
09b78     F2 28 02 F1 | 	add	local06, objptr
09b7c     08 28 06 F1 | 	add	local06, #8
09b80     14 27 62 FC | 	wrlong	local05, local06
09b84     03 00 00 FF 
09b88     00 E4 05 F1 | 	add	objptr, ##1536
09b8c     F2 28 02 FB | 	rdlong	local06, objptr
09b90     01 28 06 F1 | 	add	local06, #1
09b94     F2 28 62 FC | 	wrlong	local06, objptr
09b98     13 00 00 FF 
09b9c     38 E4 85 F1 | 	sub	objptr, ##9784
09ba0     F2 24 02 FB | 	rdlong	local04, objptr
09ba4     03 24 66 F0 | 	shl	local04, #3
09ba8     02 00 00 FF 
09bac     38 E4 85 F1 | 	sub	objptr, ##1080
09bb0     F2 24 02 F1 | 	add	local04, objptr
09bb4     04 24 06 F1 | 	add	local04, #4
09bb8     12 27 02 FB | 	rdlong	local05, local04
09bbc     35 00 00 FF 
09bc0     3C E4 85 F1 | 	sub	objptr, ##27196
09bc4     E4 FE 9F FD | 	jmp	#LR__0841
09bc8                 | LR__0842
09bc8                 | ' return 0  
09bc8     00 FA 05 F6 | 	mov	result1, #0
09bcc                 | LR__0843
09bcc     A7 F0 03 F6 | 	mov	ptra, fp
09bd0     B2 00 A0 FD | 	call	#popregs_
09bd4                 | _expr_ret
09bd4     2D 00 64 FD | 	ret
09bd8                 | 
09bd8                 | ' 
09bd8                 | ' 
09bd8                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
09bd8                 | ' 
09bd8                 | ' function addsub() as integer 
09bd8                 | _addsub
09bd8     07 4A 05 F6 | 	mov	COUNT_, #7
09bdc     A8 00 A0 FD | 	call	#pushregs_
09be0                 | _addsub_enter
09be0     00 1E 06 F6 | 	mov	local01, #0
09be4     50 01 B0 FD | 	call	#_muldiv
09be8     37 00 00 FF 
09bec     74 E4 05 F1 | 	add	objptr, ##28276
09bf0     F2 24 02 FB | 	rdlong	local04, objptr
09bf4     03 24 66 F0 | 	shl	local04, #3
09bf8     02 00 00 FF 
09bfc     38 E4 85 F1 | 	sub	objptr, ##1080
09c00     F2 24 02 F1 | 	add	local04, objptr
09c04     04 24 06 F1 | 	add	local04, #4
09c08     12 27 02 FB | 	rdlong	local05, local04
09c0c                 | ' t3.result.uresult=0
09c0c                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
09c0c                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
09c0c                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
09c0c     35 00 00 FF 
09c10     3C E4 85 F1 | 	sub	objptr, ##27196
09c14                 | LR__0850
09c14     01 26 0E F2 | 	cmp	local05, #1 wz
09c18     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
09c1c     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
09c20     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
09c24     00 01 90 5D |  if_ne	jmp	#LR__0851
09c28     37 00 00 FF 
09c2c     74 E4 05 F1 | 	add	objptr, ##28276
09c30     F2 24 02 FB | 	rdlong	local04, objptr
09c34     01 24 06 F1 | 	add	local04, #1
09c38     F2 24 62 FC | 	wrlong	local04, objptr
09c3c     37 00 00 FF 
09c40     74 E4 85 F1 | 	sub	objptr, ##28276
09c44     F0 00 B0 FD | 	call	#_muldiv
09c48     13 23 02 F6 | 	mov	local03, local05
09c4c     0F 29 02 F6 | 	mov	local06, local01
09c50     10 2B 02 F6 | 	mov	local07, local02
09c54     11 27 02 F6 | 	mov	local05, local03
09c58     4A 00 00 FF 
09c5c     AC E4 05 F1 | 	add	objptr, ##38060
09c60     F2 24 02 FB | 	rdlong	local04, objptr
09c64     12 FB 01 F6 | 	mov	result1, local04
09c68     01 FA 65 F0 | 	shl	result1, #1
09c6c     12 FB 01 F1 | 	add	result1, local04
09c70     02 FA 65 F0 | 	shl	result1, #2
09c74     03 00 00 FF 
09c78     00 E4 85 F1 | 	sub	objptr, ##1536
09c7c     F2 FA 01 F1 | 	add	result1, objptr
09c80     FD 28 62 FC | 	wrlong	local06, result1
09c84     03 00 00 FF 
09c88     00 E4 05 F1 | 	add	objptr, ##1536
09c8c     F2 28 02 FB | 	rdlong	local06, objptr
09c90     14 25 02 F6 | 	mov	local04, local06
09c94     01 24 66 F0 | 	shl	local04, #1
09c98     14 25 02 F1 | 	add	local04, local06
09c9c     02 24 66 F0 | 	shl	local04, #2
09ca0     03 00 00 FF 
09ca4     00 E4 85 F1 | 	sub	objptr, ##1536
09ca8     F2 24 02 F1 | 	add	local04, objptr
09cac     04 24 06 F1 | 	add	local04, #4
09cb0     12 2B 62 FC | 	wrlong	local07, local04
09cb4     03 00 00 FF 
09cb8     00 E4 05 F1 | 	add	objptr, ##1536
09cbc     F2 2A 02 FB | 	rdlong	local07, objptr
09cc0     15 29 02 F6 | 	mov	local06, local07
09cc4     01 28 66 F0 | 	shl	local06, #1
09cc8     15 29 02 F1 | 	add	local06, local07
09ccc     02 28 66 F0 | 	shl	local06, #2
09cd0     03 00 00 FF 
09cd4     00 E4 85 F1 | 	sub	objptr, ##1536
09cd8     F2 28 02 F1 | 	add	local06, objptr
09cdc     08 28 06 F1 | 	add	local06, #8
09ce0     14 27 62 FC | 	wrlong	local05, local06
09ce4     03 00 00 FF 
09ce8     00 E4 05 F1 | 	add	objptr, ##1536
09cec     F2 28 02 FB | 	rdlong	local06, objptr
09cf0     01 28 06 F1 | 	add	local06, #1
09cf4     F2 28 62 FC | 	wrlong	local06, objptr
09cf8     13 00 00 FF 
09cfc     38 E4 85 F1 | 	sub	objptr, ##9784
09d00     F2 24 02 FB | 	rdlong	local04, objptr
09d04     03 24 66 F0 | 	shl	local04, #3
09d08     02 00 00 FF 
09d0c     38 E4 85 F1 | 	sub	objptr, ##1080
09d10     F2 24 02 F1 | 	add	local04, objptr
09d14     04 24 06 F1 | 	add	local04, #4
09d18     12 27 02 FB | 	rdlong	local05, local04
09d1c     35 00 00 FF 
09d20     3C E4 85 F1 | 	sub	objptr, ##27196
09d24     EC FE 9F FD | 	jmp	#LR__0850
09d28                 | LR__0851
09d28                 | '   return 0
09d28     00 FA 05 F6 | 	mov	result1, #0
09d2c     A7 F0 03 F6 | 	mov	ptra, fp
09d30     B2 00 A0 FD | 	call	#popregs_
09d34                 | _addsub_ret
09d34     2D 00 64 FD | 	ret
09d38                 | 
09d38                 | ' 
09d38                 | ' sub muldiv()
09d38                 | _muldiv
09d38     08 4A 05 F6 | 	mov	COUNT_, #8
09d3c     A8 00 A0 FD | 	call	#pushregs_
09d40                 | _muldiv_enter
09d40     00 1E 06 F6 | 	mov	local01, #0
09d44     58 01 B0 FD | 	call	#_getvalue
09d48     37 00 00 FF 
09d4c     74 E4 05 F1 | 	add	objptr, ##28276
09d50     F2 24 02 FB | 	rdlong	local04, objptr
09d54     03 24 66 F0 | 	shl	local04, #3
09d58     02 00 00 FF 
09d5c     38 E4 85 F1 | 	sub	objptr, ##1080
09d60     F2 24 02 F1 | 	add	local04, objptr
09d64     04 24 06 F1 | 	add	local04, #4
09d68     12 27 02 FB | 	rdlong	local05, local04
09d6c                 | ' t3.result.uresult=0
09d6c                 | ' getvalue()    
09d6c                 | ' op = lparts(ct).token
09d6c                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
09d6c     35 00 00 FF 
09d70     3C E4 85 F1 | 	sub	objptr, ##27196
09d74                 | LR__0860
09d74     05 26 0E F2 | 	cmp	local05, #5 wz
09d78     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
09d7c     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
09d80     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
09d84     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
09d88     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
09d8c     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
09d90     00 01 90 5D |  if_ne	jmp	#LR__0861
09d94     37 00 00 FF 
09d98     74 E4 05 F1 | 	add	objptr, ##28276
09d9c     F2 24 02 FB | 	rdlong	local04, objptr
09da0     01 24 06 F1 | 	add	local04, #1
09da4     F2 24 62 FC | 	wrlong	local04, objptr
09da8     37 00 00 FF 
09dac     74 E4 85 F1 | 	sub	objptr, ##28276
09db0     EC 00 B0 FD | 	call	#_getvalue
09db4     13 23 02 F6 | 	mov	local03, local05
09db8     0F 29 02 F6 | 	mov	local06, local01
09dbc     10 2B 02 F6 | 	mov	local07, local02
09dc0     11 27 02 F6 | 	mov	local05, local03
09dc4     4A 00 00 FF 
09dc8     AC E4 05 F1 | 	add	objptr, ##38060
09dcc     F2 24 02 FB | 	rdlong	local04, objptr
09dd0     12 2D 02 F6 | 	mov	local08, local04
09dd4     01 2C 66 F0 | 	shl	local08, #1
09dd8     12 2D 02 F1 | 	add	local08, local04
09ddc     02 2C 66 F0 | 	shl	local08, #2
09de0     03 00 00 FF 
09de4     00 E4 85 F1 | 	sub	objptr, ##1536
09de8     F2 2C 02 F1 | 	add	local08, objptr
09dec     16 29 62 FC | 	wrlong	local06, local08
09df0     03 00 00 FF 
09df4     00 E4 05 F1 | 	add	objptr, ##1536
09df8     F2 2C 02 FB | 	rdlong	local08, objptr
09dfc     16 29 02 F6 | 	mov	local06, local08
09e00     01 28 66 F0 | 	shl	local06, #1
09e04     16 29 02 F1 | 	add	local06, local08
09e08     02 28 66 F0 | 	shl	local06, #2
09e0c     03 00 00 FF 
09e10     00 E4 85 F1 | 	sub	objptr, ##1536
09e14     F2 28 02 F1 | 	add	local06, objptr
09e18     04 28 06 F1 | 	add	local06, #4
09e1c     14 2B 62 FC | 	wrlong	local07, local06
09e20     03 00 00 FF 
09e24     00 E4 05 F1 | 	add	objptr, ##1536
09e28     F2 2C 02 FB | 	rdlong	local08, objptr
09e2c     16 2B 02 F6 | 	mov	local07, local08
09e30     01 2A 66 F0 | 	shl	local07, #1
09e34     16 2B 02 F1 | 	add	local07, local08
09e38     02 2A 66 F0 | 	shl	local07, #2
09e3c     03 00 00 FF 
09e40     00 E4 85 F1 | 	sub	objptr, ##1536
09e44     F2 2A 02 F1 | 	add	local07, objptr
09e48     08 2A 06 F1 | 	add	local07, #8
09e4c     15 27 62 FC | 	wrlong	local05, local07
09e50     03 00 00 FF 
09e54     00 E4 05 F1 | 	add	objptr, ##1536
09e58     F2 28 02 FB | 	rdlong	local06, objptr
09e5c     01 28 06 F1 | 	add	local06, #1
09e60     F2 28 62 FC | 	wrlong	local06, objptr
09e64     13 00 00 FF 
09e68     38 E4 85 F1 | 	sub	objptr, ##9784
09e6c     F2 24 02 FB | 	rdlong	local04, objptr
09e70     03 24 66 F0 | 	shl	local04, #3
09e74     02 00 00 FF 
09e78     38 E4 85 F1 | 	sub	objptr, ##1080
09e7c     F2 24 02 F1 | 	add	local04, objptr
09e80     04 24 06 F1 | 	add	local04, #4
09e84     12 27 02 FB | 	rdlong	local05, local04
09e88     35 00 00 FF 
09e8c     3C E4 85 F1 | 	sub	objptr, ##27196
09e90     E0 FE 9F FD | 	jmp	#LR__0860
09e94                 | LR__0861
09e94     A7 F0 03 F6 | 	mov	ptra, fp
09e98     B2 00 A0 FD | 	call	#popregs_
09e9c                 | _muldiv_ret
09e9c     2D 00 64 FD | 	ret
09ea0                 | 
09ea0                 | ' 
09ea0                 | ' sub getvalue() 
09ea0                 | _getvalue
09ea0     0B 4A 05 F6 | 	mov	COUNT_, #11
09ea4     A8 00 A0 FD | 	call	#pushregs_
09ea8                 | _getvalue_enter
09ea8     01 24 06 F6 | 	mov	local04, #1
09eac     00 1E 06 F6 | 	mov	local01, #0
09eb0     1D 22 06 F6 | 	mov	local03, #29
09eb4     37 00 00 FF 
09eb8     74 E4 05 F1 | 	add	objptr, ##28276
09ebc     F2 16 02 FB | 	rdlong	arg03, objptr
09ec0     03 16 66 F0 | 	shl	arg03, #3
09ec4     02 00 00 FF 
09ec8     38 E4 85 F1 | 	sub	objptr, ##1080
09ecc     F2 16 02 F1 | 	add	arg03, objptr
09ed0     04 16 06 F1 | 	add	arg03, #4
09ed4     0B 27 02 FB | 	rdlong	local05, arg03
09ed8                 | ' m=1
09ed8                 | ' t1.result.uresult=0: t1.result_type=result_uint
09ed8                 | ' op=lparts(ct).token
09ed8                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
09ed8     02 26 0E F2 | 	cmp	local05, #2 wz
09edc     35 00 00 FF 
09ee0     3C E4 85 F1 | 	sub	objptr, ##27196
09ee4     38 00 90 5D |  if_ne	jmp	#LR__0870
09ee8     01 24 66 F6 | 	neg	local04, #1
09eec     37 00 00 FF 
09ef0     74 E4 05 F1 | 	add	objptr, ##28276
09ef4     F2 26 02 FB | 	rdlong	local05, objptr
09ef8     01 26 06 F1 | 	add	local05, #1
09efc     F2 26 62 FC | 	wrlong	local05, objptr
09f00     03 26 66 F0 | 	shl	local05, #3
09f04     02 00 00 FF 
09f08     38 E4 85 F1 | 	sub	objptr, ##1080
09f0c     F2 26 02 F1 | 	add	local05, objptr
09f10     04 26 06 F1 | 	add	local05, #4
09f14     13 27 02 FB | 	rdlong	local05, local05
09f18     35 00 00 FF 
09f1c     3C E4 85 F1 | 	sub	objptr, ##27196
09f20                 | LR__0870
09f20                 | ' select case op
09f20     01 00 00 FF 
09f24     00 26 0E F2 | 	cmp	local05, ##512 wz
09f28     44 00 90 AD |  if_e	jmp	#LR__0871
09f2c     01 00 00 FF 
09f30     01 26 0E F2 | 	cmp	local05, ##513 wz
09f34     90 01 90 AD |  if_e	jmp	#LR__0874
09f38     01 00 00 FF 
09f3c     02 26 0E F2 | 	cmp	local05, ##514 wz
09f40     44 04 90 AD |  if_e	jmp	#LR__0881
09f44     01 00 00 FF 
09f48     03 26 0E F2 | 	cmp	local05, ##515 wz
09f4c     A8 05 90 AD |  if_e	jmp	#LR__0884
09f50     2C 26 0E F2 | 	cmp	local05, #44 wz
09f54     7C 07 90 AD |  if_e	jmp	#LR__0889
09f58     01 00 00 FF 
09f5c     04 26 0E F2 | 	cmp	local05, ##516 wz
09f60     74 08 90 AD |  if_e	jmp	#LR__0890
09f64     15 26 0E F2 | 	cmp	local05, #21 wz
09f68     94 08 90 AD |  if_e	jmp	#LR__0891
09f6c     04 09 90 FD | 	jmp	#LR__0892
09f70                 | LR__0871
09f70                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
09f70     01 24 0E F2 | 	cmp	local04, #1 wz
09f74     3C 00 90 5D |  if_ne	jmp	#LR__0872
09f78     37 00 00 FF 
09f7c     74 E4 05 F1 | 	add	objptr, ##28276
09f80     F2 26 02 FB | 	rdlong	local05, objptr
09f84     03 26 66 F0 | 	shl	local05, #3
09f88     02 00 00 FF 
09f8c     38 E4 85 F1 | 	sub	objptr, ##1080
09f90     F2 26 02 F1 | 	add	local05, objptr
09f94     13 13 02 FB | 	rdlong	arg01, local05
09f98     00 14 06 F6 | 	mov	arg02, #0
09f9c     35 00 00 FF 
09fa0     3C E4 85 F1 | 	sub	objptr, ##27196
09fa4     94 9F B1 FD | 	call	#__system____builtin_atoi
09fa8     FD 24 02 FD | 	qmul	local04, result1
09fac     18 1E 62 FD | 	getqx	local01
09fb0     1C 22 06 F6 | 	mov	local03, #28
09fb4                 | LR__0872
09fb4                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
09fb4     FF FF 7F FF 
09fb8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09fbc     3C 00 90 5D |  if_ne	jmp	#LR__0873
09fc0     37 00 00 FF 
09fc4     74 E4 05 F1 | 	add	objptr, ##28276
09fc8     F2 26 02 FB | 	rdlong	local05, objptr
09fcc     03 26 66 F0 | 	shl	local05, #3
09fd0     02 00 00 FF 
09fd4     38 E4 85 F1 | 	sub	objptr, ##1080
09fd8     F2 26 02 F1 | 	add	local05, objptr
09fdc     13 13 02 FB | 	rdlong	arg01, local05
09fe0     00 14 06 F6 | 	mov	arg02, #0
09fe4     35 00 00 FF 
09fe8     3C E4 85 F1 | 	sub	objptr, ##27196
09fec     4C 9F B1 FD | 	call	#__system____builtin_atoi
09ff0     FD 24 02 FD | 	qmul	local04, result1
09ff4     18 1E 62 FD | 	getqx	local01
09ff8     1C 22 06 F6 | 	mov	local03, #28
09ffc                 | LR__0873
09ffc     0F 29 02 F6 | 	mov	local06, local01
0a000     10 2B 02 F6 | 	mov	local07, local02
0a004     11 27 02 F6 | 	mov	local05, local03
0a008     4A 00 00 FF 
0a00c     AC E4 05 F1 | 	add	objptr, ##38060
0a010     F2 1E 02 FB | 	rdlong	local01, objptr
0a014     0F 25 02 F6 | 	mov	local04, local01
0a018     01 24 66 F0 | 	shl	local04, #1
0a01c     0F 25 02 F1 | 	add	local04, local01
0a020     02 24 66 F0 | 	shl	local04, #2
0a024     03 00 00 FF 
0a028     00 E4 85 F1 | 	sub	objptr, ##1536
0a02c     F2 24 02 F1 | 	add	local04, objptr
0a030     12 29 62 FC | 	wrlong	local06, local04
0a034     03 00 00 FF 
0a038     00 E4 05 F1 | 	add	objptr, ##1536
0a03c     F2 28 02 FB | 	rdlong	local06, objptr
0a040     14 1F 02 F6 | 	mov	local01, local06
0a044     01 1E 66 F0 | 	shl	local01, #1
0a048     14 1F 02 F1 | 	add	local01, local06
0a04c     02 1E 66 F0 | 	shl	local01, #2
0a050     03 00 00 FF 
0a054     00 E4 85 F1 | 	sub	objptr, ##1536
0a058     F2 1E 02 F1 | 	add	local01, objptr
0a05c     04 1E 06 F1 | 	add	local01, #4
0a060     0F 2B 62 FC | 	wrlong	local07, local01
0a064     03 00 00 FF 
0a068     00 E4 05 F1 | 	add	objptr, ##1536
0a06c     F2 2A 02 FB | 	rdlong	local07, objptr
0a070     15 29 02 F6 | 	mov	local06, local07
0a074     01 28 66 F0 | 	shl	local06, #1
0a078     15 29 02 F1 | 	add	local06, local07
0a07c     02 28 66 F0 | 	shl	local06, #2
0a080     03 00 00 FF 
0a084     00 E4 85 F1 | 	sub	objptr, ##1536
0a088     F2 28 02 F1 | 	add	local06, objptr
0a08c     08 28 06 F1 | 	add	local06, #8
0a090     14 27 62 FC | 	wrlong	local05, local06
0a094     03 00 00 FF 
0a098     00 E4 05 F1 | 	add	objptr, ##1536
0a09c     F2 28 02 FB | 	rdlong	local06, objptr
0a0a0     01 28 06 F1 | 	add	local06, #1
0a0a4     F2 28 62 FC | 	wrlong	local06, objptr
0a0a8     13 00 00 FF 
0a0ac     38 E4 85 F1 | 	sub	objptr, ##9784
0a0b0     F2 28 02 FB | 	rdlong	local06, objptr
0a0b4     01 28 06 F1 | 	add	local06, #1
0a0b8     F2 28 62 FC | 	wrlong	local06, objptr
0a0bc     37 00 00 FF 
0a0c0     74 E4 85 F1 | 	sub	objptr, ##28276
0a0c4     D0 07 90 FD | 	jmp	#LR__0893
0a0c8                 | LR__0874
0a0c8                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0a0c8     37 00 00 FF 
0a0cc     74 E4 05 F1 | 	add	objptr, ##28276
0a0d0     F2 16 02 FB | 	rdlong	arg03, objptr
0a0d4     03 16 66 F0 | 	shl	arg03, #3
0a0d8     02 00 00 FF 
0a0dc     38 E4 85 F1 | 	sub	objptr, ##1080
0a0e0     F2 16 02 F1 | 	add	arg03, objptr
0a0e4     0B 13 02 FB | 	rdlong	arg01, arg03
0a0e8     01 14 06 F6 | 	mov	arg02, #1
0a0ec     35 00 00 FF 
0a0f0     3C E4 85 F1 | 	sub	objptr, ##27196
0a0f4     94 8C B1 FD | 	call	#__system__Left_S
0a0f8     FD 12 02 F6 | 	mov	arg01, result1
0a0fc     85 01 00 FF 
0a100     EE 15 06 F6 | 	mov	arg02, ##@LR__5358
0a104     30 6C B1 FD | 	call	#__system___string_cmp
0a108     00 FA 0D F2 | 	cmp	result1, #0 wz
0a10c     94 00 90 5D |  if_ne	jmp	#LR__0877
0a110     37 00 00 FF 
0a114     74 E4 05 F1 | 	add	objptr, ##28276
0a118     F2 2A 02 FB | 	rdlong	local07, objptr
0a11c     15 29 02 F6 | 	mov	local06, local07
0a120     03 28 66 F0 | 	shl	local06, #3
0a124     02 00 00 FF 
0a128     38 E4 85 F1 | 	sub	objptr, ##1080
0a12c     F2 28 02 F1 | 	add	local06, objptr
0a130     85 01 00 FF 
0a134     F0 27 06 F6 | 	mov	local05, ##@LR__5359
0a138     03 2A 66 F0 | 	shl	local07, #3
0a13c     F2 2A 02 F1 | 	add	local07, objptr
0a140     15 2B 02 FB | 	rdlong	local07, local07
0a144     02 00 00 FF 
0a148     38 E4 05 F1 | 	add	objptr, ##1080
0a14c     F2 1E 02 FB | 	rdlong	local01, objptr
0a150     03 1E 66 F0 | 	shl	local01, #3
0a154     02 00 00 FF 
0a158     38 E4 85 F1 | 	sub	objptr, ##1080
0a15c     F2 1E 02 F1 | 	add	local01, objptr
0a160     0F 13 02 FB | 	rdlong	arg01, local01
0a164     35 00 00 FF 
0a168     3C E4 85 F1 | 	sub	objptr, ##27196
0a16c     09 2D 02 F6 | 	mov	local08, arg01
0a170     97 06 48 FB | 	callpa	#(@LR__0876-@LR__0875)>>2,fcache_load_ptr_
0a174                 | LR__0875
0a174     16 FB C9 FA | 	rdbyte	result1, local08 wz
0a178     01 2C 06 51 |  if_ne	add	local08, #1
0a17c     F4 FF 9F 5D |  if_ne	jmp	#LR__0875
0a180                 | LR__0876
0a180     09 2D 82 F1 | 	sub	local08, arg01
0a184     16 15 02 F6 | 	mov	arg02, local08
0a188     01 14 86 F1 | 	sub	arg02, #1
0a18c     15 13 02 F6 | 	mov	arg01, local07
0a190     80 8C B1 FD | 	call	#__system__Right_S
0a194     FD 14 02 F6 | 	mov	arg02, result1
0a198     13 13 02 F6 | 	mov	arg01, local05
0a19c     CC 6B B1 FD | 	call	#__system___string_concat
0a1a0     14 FB 61 FC | 	wrlong	result1, local06
0a1a4                 | LR__0877
0a1a4                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0a1a4     37 00 00 FF 
0a1a8     74 E4 05 F1 | 	add	objptr, ##28276
0a1ac     F2 16 02 FB | 	rdlong	arg03, objptr
0a1b0     03 16 66 F0 | 	shl	arg03, #3
0a1b4     02 00 00 FF 
0a1b8     38 E4 85 F1 | 	sub	objptr, ##1080
0a1bc     F2 16 02 F1 | 	add	arg03, objptr
0a1c0     0B 13 02 FB | 	rdlong	arg01, arg03
0a1c4     01 14 06 F6 | 	mov	arg02, #1
0a1c8     35 00 00 FF 
0a1cc     3C E4 85 F1 | 	sub	objptr, ##27196
0a1d0     B8 8B B1 FD | 	call	#__system__Left_S
0a1d4     FD 12 02 F6 | 	mov	arg01, result1
0a1d8     85 01 00 FF 
0a1dc     F3 15 06 F6 | 	mov	arg02, ##@LR__5360
0a1e0     54 6B B1 FD | 	call	#__system___string_cmp
0a1e4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a1e8     94 00 90 5D |  if_ne	jmp	#LR__0880
0a1ec     37 00 00 FF 
0a1f0     74 E4 05 F1 | 	add	objptr, ##28276
0a1f4     F2 2A 02 FB | 	rdlong	local07, objptr
0a1f8     15 29 02 F6 | 	mov	local06, local07
0a1fc     03 28 66 F0 | 	shl	local06, #3
0a200     02 00 00 FF 
0a204     38 E4 85 F1 | 	sub	objptr, ##1080
0a208     F2 28 02 F1 | 	add	local06, objptr
0a20c     85 01 00 FF 
0a210     F5 27 06 F6 | 	mov	local05, ##@LR__5361
0a214     03 2A 66 F0 | 	shl	local07, #3
0a218     F2 2A 02 F1 | 	add	local07, objptr
0a21c     15 2B 02 FB | 	rdlong	local07, local07
0a220     02 00 00 FF 
0a224     38 E4 05 F1 | 	add	objptr, ##1080
0a228     F2 1E 02 FB | 	rdlong	local01, objptr
0a22c     03 1E 66 F0 | 	shl	local01, #3
0a230     02 00 00 FF 
0a234     38 E4 85 F1 | 	sub	objptr, ##1080
0a238     F2 1E 02 F1 | 	add	local01, objptr
0a23c     0F 13 02 FB | 	rdlong	arg01, local01
0a240     35 00 00 FF 
0a244     3C E4 85 F1 | 	sub	objptr, ##27196
0a248     09 2D 02 F6 | 	mov	local08, arg01
0a24c     97 06 48 FB | 	callpa	#(@LR__0879-@LR__0878)>>2,fcache_load_ptr_
0a250                 | LR__0878
0a250     16 FB C9 FA | 	rdbyte	result1, local08 wz
0a254     01 2C 06 51 |  if_ne	add	local08, #1
0a258     F4 FF 9F 5D |  if_ne	jmp	#LR__0878
0a25c                 | LR__0879
0a25c     09 2D 82 F1 | 	sub	local08, arg01
0a260     16 15 02 F6 | 	mov	arg02, local08
0a264     01 14 86 F1 | 	sub	arg02, #1
0a268     15 13 02 F6 | 	mov	arg01, local07
0a26c     A4 8B B1 FD | 	call	#__system__Right_S
0a270     FD 14 02 F6 | 	mov	arg02, result1
0a274     13 13 02 F6 | 	mov	arg01, local05
0a278     F0 6A B1 FD | 	call	#__system___string_concat
0a27c     14 FB 61 FC | 	wrlong	result1, local06
0a280                 | LR__0880
0a280     37 00 00 FF 
0a284     74 E4 05 F1 | 	add	objptr, ##28276
0a288     F2 28 02 FB | 	rdlong	local06, objptr
0a28c     03 28 66 F0 | 	shl	local06, #3
0a290     02 00 00 FF 
0a294     38 E4 85 F1 | 	sub	objptr, ##1080
0a298     F2 28 02 F1 | 	add	local06, objptr
0a29c     14 13 02 FB | 	rdlong	arg01, local06
0a2a0     00 14 06 F6 | 	mov	arg02, #0
0a2a4     35 00 00 FF 
0a2a8     3C E4 85 F1 | 	sub	objptr, ##27196
0a2ac     8C 9C B1 FD | 	call	#__system____builtin_atoi
0a2b0     FD 24 02 FD | 	qmul	local04, result1
0a2b4     4A 00 00 FF 
0a2b8     AC E4 05 F1 | 	add	objptr, ##38060
0a2bc     F2 28 02 FB | 	rdlong	local06, objptr
0a2c0     14 2F 02 F6 | 	mov	local09, local06
0a2c4     01 2E 66 F0 | 	shl	local09, #1
0a2c8     14 2F 02 F1 | 	add	local09, local06
0a2cc     02 2E 66 F0 | 	shl	local09, #2
0a2d0     03 00 00 FF 
0a2d4     00 E4 85 F1 | 	sub	objptr, ##1536
0a2d8     F2 2E 02 F1 | 	add	local09, objptr
0a2dc     03 00 00 FF 
0a2e0     00 E4 05 F1 | 	add	objptr, ##1536
0a2e4     18 1E 62 FD | 	getqx	local01
0a2e8     1C 22 06 F6 | 	mov	local03, #28
0a2ec     0F 29 02 F6 | 	mov	local06, local01
0a2f0     10 2B 02 F6 | 	mov	local07, local02
0a2f4     17 29 62 FC | 	wrlong	local06, local09
0a2f8     11 2F 02 F6 | 	mov	local09, local03
0a2fc     F2 28 02 FB | 	rdlong	local06, objptr
0a300     14 27 02 F6 | 	mov	local05, local06
0a304     01 26 66 F0 | 	shl	local05, #1
0a308     14 27 02 F1 | 	add	local05, local06
0a30c     02 26 66 F0 | 	shl	local05, #2
0a310     03 00 00 FF 
0a314     00 E4 85 F1 | 	sub	objptr, ##1536
0a318     F2 26 02 F1 | 	add	local05, objptr
0a31c     04 26 06 F1 | 	add	local05, #4
0a320     13 2B 62 FC | 	wrlong	local07, local05
0a324     03 00 00 FF 
0a328     00 E4 05 F1 | 	add	objptr, ##1536
0a32c     F2 2A 02 FB | 	rdlong	local07, objptr
0a330     15 29 02 F6 | 	mov	local06, local07
0a334     01 28 66 F0 | 	shl	local06, #1
0a338     15 29 02 F1 | 	add	local06, local07
0a33c     02 28 66 F0 | 	shl	local06, #2
0a340     03 00 00 FF 
0a344     00 E4 85 F1 | 	sub	objptr, ##1536
0a348     F2 28 02 F1 | 	add	local06, objptr
0a34c     08 28 06 F1 | 	add	local06, #8
0a350     14 2F 62 FC | 	wrlong	local09, local06
0a354     03 00 00 FF 
0a358     00 E4 05 F1 | 	add	objptr, ##1536
0a35c     F2 28 02 FB | 	rdlong	local06, objptr
0a360     01 28 06 F1 | 	add	local06, #1
0a364     F2 28 62 FC | 	wrlong	local06, objptr
0a368     13 00 00 FF 
0a36c     38 E4 85 F1 | 	sub	objptr, ##9784
0a370     F2 28 02 FB | 	rdlong	local06, objptr
0a374     01 28 06 F1 | 	add	local06, #1
0a378     F2 28 62 FC | 	wrlong	local06, objptr
0a37c     37 00 00 FF 
0a380     74 E4 85 F1 | 	sub	objptr, ##28276
0a384     10 05 90 FD | 	jmp	#LR__0893
0a388                 | LR__0881
0a388                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0a388     01 24 0E F2 | 	cmp	local04, #1 wz
0a38c     48 00 90 5D |  if_ne	jmp	#LR__0882
0a390     00 C0 1F FF 
0a394     00 28 06 F6 | 	mov	local06, ##1065353216
0a398     37 00 00 FF 
0a39c     74 E4 05 F1 | 	add	objptr, ##28276
0a3a0     F2 2E 02 FB | 	rdlong	local09, objptr
0a3a4     03 2E 66 F0 | 	shl	local09, #3
0a3a8     02 00 00 FF 
0a3ac     38 E4 85 F1 | 	sub	objptr, ##1080
0a3b0     F2 2E 02 F1 | 	add	local09, objptr
0a3b4     17 13 02 FB | 	rdlong	arg01, local09
0a3b8     35 00 00 FF 
0a3bc     3C E4 85 F1 | 	sub	objptr, ##27196
0a3c0     E8 9C B1 FD | 	call	#__system____builtin_atof
0a3c4     FD 14 02 F6 | 	mov	arg02, result1
0a3c8     14 13 02 F6 | 	mov	arg01, local06
0a3cc     F4 94 B1 FD | 	call	#__system___float_mul
0a3d0     FD 1E 02 F6 | 	mov	local01, result1
0a3d4     1E 22 06 F6 | 	mov	local03, #30
0a3d8                 | LR__0882
0a3d8                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0a3d8     FF FF 7F FF 
0a3dc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a3e0     48 00 90 5D |  if_ne	jmp	#LR__0883
0a3e4     00 C0 5F FF 
0a3e8     00 28 06 F6 | 	mov	local06, ##-1082130432
0a3ec     37 00 00 FF 
0a3f0     74 E4 05 F1 | 	add	objptr, ##28276
0a3f4     F2 2E 02 FB | 	rdlong	local09, objptr
0a3f8     03 2E 66 F0 | 	shl	local09, #3
0a3fc     02 00 00 FF 
0a400     38 E4 85 F1 | 	sub	objptr, ##1080
0a404     F2 2E 02 F1 | 	add	local09, objptr
0a408     17 13 02 FB | 	rdlong	arg01, local09
0a40c     35 00 00 FF 
0a410     3C E4 85 F1 | 	sub	objptr, ##27196
0a414     94 9C B1 FD | 	call	#__system____builtin_atof
0a418     FD 14 02 F6 | 	mov	arg02, result1
0a41c     14 13 02 F6 | 	mov	arg01, local06
0a420     A0 94 B1 FD | 	call	#__system___float_mul
0a424     FD 1E 02 F6 | 	mov	local01, result1
0a428     1E 22 06 F6 | 	mov	local03, #30
0a42c                 | LR__0883
0a42c     0F 29 02 F6 | 	mov	local06, local01
0a430     10 2B 02 F6 | 	mov	local07, local02
0a434     11 27 02 F6 | 	mov	local05, local03
0a438     4A 00 00 FF 
0a43c     AC E4 05 F1 | 	add	objptr, ##38060
0a440     F2 1E 02 FB | 	rdlong	local01, objptr
0a444     0F 2F 02 F6 | 	mov	local09, local01
0a448     01 2E 66 F0 | 	shl	local09, #1
0a44c     0F 2F 02 F1 | 	add	local09, local01
0a450     02 2E 66 F0 | 	shl	local09, #2
0a454     03 00 00 FF 
0a458     00 E4 85 F1 | 	sub	objptr, ##1536
0a45c     F2 2E 02 F1 | 	add	local09, objptr
0a460     17 29 62 FC | 	wrlong	local06, local09
0a464     03 00 00 FF 
0a468     00 E4 05 F1 | 	add	objptr, ##1536
0a46c     F2 2E 02 FB | 	rdlong	local09, objptr
0a470     17 29 02 F6 | 	mov	local06, local09
0a474     01 28 66 F0 | 	shl	local06, #1
0a478     17 29 02 F1 | 	add	local06, local09
0a47c     02 28 66 F0 | 	shl	local06, #2
0a480     03 00 00 FF 
0a484     00 E4 85 F1 | 	sub	objptr, ##1536
0a488     F2 28 02 F1 | 	add	local06, objptr
0a48c     04 28 06 F1 | 	add	local06, #4
0a490     14 2B 62 FC | 	wrlong	local07, local06
0a494     03 00 00 FF 
0a498     00 E4 05 F1 | 	add	objptr, ##1536
0a49c     F2 2E 02 FB | 	rdlong	local09, objptr
0a4a0     17 2B 02 F6 | 	mov	local07, local09
0a4a4     01 2A 66 F0 | 	shl	local07, #1
0a4a8     17 2B 02 F1 | 	add	local07, local09
0a4ac     02 2A 66 F0 | 	shl	local07, #2
0a4b0     03 00 00 FF 
0a4b4     00 E4 85 F1 | 	sub	objptr, ##1536
0a4b8     F2 2A 02 F1 | 	add	local07, objptr
0a4bc     08 2A 06 F1 | 	add	local07, #8
0a4c0     15 27 62 FC | 	wrlong	local05, local07
0a4c4     03 00 00 FF 
0a4c8     00 E4 05 F1 | 	add	objptr, ##1536
0a4cc     F2 28 02 FB | 	rdlong	local06, objptr
0a4d0     01 28 06 F1 | 	add	local06, #1
0a4d4     F2 28 62 FC | 	wrlong	local06, objptr
0a4d8     13 00 00 FF 
0a4dc     38 E4 85 F1 | 	sub	objptr, ##9784
0a4e0     F2 28 02 FB | 	rdlong	local06, objptr
0a4e4     01 28 06 F1 | 	add	local06, #1
0a4e8     F2 28 62 FC | 	wrlong	local06, objptr
0a4ec     37 00 00 FF 
0a4f0     74 E4 85 F1 | 	sub	objptr, ##28276
0a4f4     A0 03 90 FD | 	jmp	#LR__0893
0a4f8                 | LR__0884
0a4f8     1F 22 06 F6 | 	mov	local03, #31
0a4fc     37 00 00 FF 
0a500     74 E4 05 F1 | 	add	objptr, ##28276
0a504     F2 16 02 FB | 	rdlong	arg03, objptr
0a508     03 16 66 F0 | 	shl	arg03, #3
0a50c     02 00 00 FF 
0a510     38 E4 85 F1 | 	sub	objptr, ##1080
0a514     F2 16 02 F1 | 	add	arg03, objptr
0a518     0B 13 02 FB | 	rdlong	arg01, arg03
0a51c     35 00 00 FF 
0a520     3C E4 85 F1 | 	sub	objptr, ##27196
0a524     09 2D 02 F6 | 	mov	local08, arg01
0a528     97 06 48 FB | 	callpa	#(@LR__0886-@LR__0885)>>2,fcache_load_ptr_
0a52c                 | LR__0885
0a52c     16 FB C9 FA | 	rdbyte	result1, local08 wz
0a530     01 2C 06 51 |  if_ne	add	local08, #1
0a534     F4 FF 9F 5D |  if_ne	jmp	#LR__0885
0a538                 | LR__0886
0a538     09 2D 82 F1 | 	sub	local08, arg01
0a53c     16 FB 01 F6 | 	mov	result1, local08
0a540     5A 00 00 FF 
0a544     3C E4 05 F1 | 	add	objptr, ##46140
0a548     F2 FA 61 FC | 	wrlong	result1, objptr
0a54c     5C E4 85 F1 | 	sub	objptr, #92
0a550     F2 12 02 FB | 	rdlong	arg01, objptr
0a554     FD 12 82 F1 | 	sub	arg01, result1
0a558     04 12 86 F1 | 	sub	arg01, #4
0a55c     03 12 26 F5 | 	andn	arg01, #3
0a560     F2 12 62 FC | 	wrlong	arg01, objptr
0a564     5C E4 05 F1 | 	add	objptr, #92
0a568     F2 14 02 FB | 	rdlong	arg02, objptr
0a56c     5A 00 00 FF 
0a570     3C E4 85 F1 | 	sub	objptr, ##46140
0a574     54 24 B1 FD | 	call	#_pslpoke
0a578                 | '     pslpoke memtop,l
0a578                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0a578     01 30 06 F6 | 	mov	local10, #1
0a57c     5A 00 00 FF 
0a580     3C E4 05 F1 | 	add	objptr, ##46140
0a584     F2 32 02 FB | 	rdlong	local11, objptr
0a588     5A 00 00 FF 
0a58c     3C E4 85 F1 | 	sub	objptr, ##46140
0a590     01 32 06 F1 | 	add	local11, #1
0a594                 | LR__0887
0a594     19 31 52 F2 | 	cmps	local10, local11 wc
0a598     5C 00 90 3D |  if_ae	jmp	#LR__0888
0a59c     59 00 00 FF 
0a5a0     E0 E5 05 F1 | 	add	objptr, ##46048
0a5a4     F2 2A 02 FB | 	rdlong	local07, objptr
0a5a8     03 2A 06 F1 | 	add	local07, #3
0a5ac     18 2B 02 F1 | 	add	local07, local10
0a5b0     22 00 00 FF 
0a5b4     6C E5 85 F1 | 	sub	objptr, ##17772
0a5b8     F2 2E 02 FB | 	rdlong	local09, objptr
0a5bc     03 2E 66 F0 | 	shl	local09, #3
0a5c0     02 00 00 FF 
0a5c4     38 E4 85 F1 | 	sub	objptr, ##1080
0a5c8     F2 2E 02 F1 | 	add	local09, objptr
0a5cc     17 13 02 FB | 	rdlong	arg01, local09
0a5d0     18 15 02 F6 | 	mov	arg02, local10
0a5d4     01 16 06 F6 | 	mov	arg03, #1
0a5d8     35 00 00 FF 
0a5dc     3C E4 85 F1 | 	sub	objptr, ##27196
0a5e0     C0 88 B1 FD | 	call	#__system__Mid_S
0a5e4     FD 14 C2 FA | 	rdbyte	arg02, result1
0a5e8     15 13 02 F6 | 	mov	arg01, local07
0a5ec     6C 24 B1 FD | 	call	#_pspoke
0a5f0     01 30 06 F1 | 	add	local10, #1
0a5f4     9C FF 9F FD | 	jmp	#LR__0887
0a5f8                 | LR__0888
0a5f8     59 00 00 FF 
0a5fc     E0 E5 05 F1 | 	add	objptr, ##46048
0a600     F2 1E 02 FB | 	rdlong	local01, objptr
0a604     2B 22 06 F6 | 	mov	local03, #43
0a608     0F 29 02 F6 | 	mov	local06, local01
0a60c     10 2B 02 F6 | 	mov	local07, local02
0a610     11 33 02 F6 | 	mov	local11, local03
0a614     0F 00 00 FF 
0a618     34 E5 85 F1 | 	sub	objptr, ##7988
0a61c     F2 30 02 FB | 	rdlong	local10, objptr
0a620     18 2F 02 F6 | 	mov	local09, local10
0a624     01 2E 66 F0 | 	shl	local09, #1
0a628     18 2F 02 F1 | 	add	local09, local10
0a62c     02 2E 66 F0 | 	shl	local09, #2
0a630     03 00 00 FF 
0a634     00 E4 85 F1 | 	sub	objptr, ##1536
0a638     F2 2E 02 F1 | 	add	local09, objptr
0a63c     17 29 62 FC | 	wrlong	local06, local09
0a640     03 00 00 FF 
0a644     00 E4 05 F1 | 	add	objptr, ##1536
0a648     F2 30 02 FB | 	rdlong	local10, objptr
0a64c     18 2F 02 F6 | 	mov	local09, local10
0a650     01 2E 66 F0 | 	shl	local09, #1
0a654     18 2F 02 F1 | 	add	local09, local10
0a658     02 2E 66 F0 | 	shl	local09, #2
0a65c     03 00 00 FF 
0a660     00 E4 85 F1 | 	sub	objptr, ##1536
0a664     F2 2E 02 F1 | 	add	local09, objptr
0a668     04 2E 06 F1 | 	add	local09, #4
0a66c     17 2B 62 FC | 	wrlong	local07, local09
0a670     03 00 00 FF 
0a674     00 E4 05 F1 | 	add	objptr, ##1536
0a678     F2 30 02 FB | 	rdlong	local10, objptr
0a67c     18 2F 02 F6 | 	mov	local09, local10
0a680     01 2E 66 F0 | 	shl	local09, #1
0a684     18 2F 02 F1 | 	add	local09, local10
0a688     02 2E 66 F0 | 	shl	local09, #2
0a68c     03 00 00 FF 
0a690     00 E4 85 F1 | 	sub	objptr, ##1536
0a694     F2 2E 02 F1 | 	add	local09, objptr
0a698     08 2E 06 F1 | 	add	local09, #8
0a69c     17 33 62 FC | 	wrlong	local11, local09
0a6a0     03 00 00 FF 
0a6a4     00 E4 05 F1 | 	add	objptr, ##1536
0a6a8     F2 28 02 FB | 	rdlong	local06, objptr
0a6ac     01 28 06 F1 | 	add	local06, #1
0a6b0     F2 28 62 FC | 	wrlong	local06, objptr
0a6b4     13 00 00 FF 
0a6b8     38 E4 85 F1 | 	sub	objptr, ##9784
0a6bc     F2 28 02 FB | 	rdlong	local06, objptr
0a6c0     01 28 06 F1 | 	add	local06, #1
0a6c4     F2 28 62 FC | 	wrlong	local06, objptr
0a6c8     37 00 00 FF 
0a6cc     74 E4 85 F1 | 	sub	objptr, ##28276
0a6d0     C4 01 90 FD | 	jmp	#LR__0893
0a6d4                 | LR__0889
0a6d4     2C 22 06 F6 | 	mov	local03, #44
0a6d8     37 00 00 FF 
0a6dc     74 E4 05 F1 | 	add	objptr, ##28276
0a6e0     F2 28 02 FB | 	rdlong	local06, objptr
0a6e4     03 28 66 F0 | 	shl	local06, #3
0a6e8     02 00 00 FF 
0a6ec     38 E4 85 F1 | 	sub	objptr, ##1080
0a6f0     F2 28 02 F1 | 	add	local06, objptr
0a6f4     14 13 02 FB | 	rdlong	arg01, local06
0a6f8     00 14 06 F6 | 	mov	arg02, #0
0a6fc     35 00 00 FF 
0a700     3C E4 85 F1 | 	sub	objptr, ##27196
0a704     34 98 B1 FD | 	call	#__system____builtin_atoi
0a708     FD 1E 02 F6 | 	mov	local01, result1
0a70c     0F 29 02 F6 | 	mov	local06, local01
0a710     10 2B 02 F6 | 	mov	local07, local02
0a714     11 33 02 F6 | 	mov	local11, local03
0a718     4A 00 00 FF 
0a71c     AC E4 05 F1 | 	add	objptr, ##38060
0a720     F2 30 02 FB | 	rdlong	local10, objptr
0a724     18 2F 02 F6 | 	mov	local09, local10
0a728     01 2E 66 F0 | 	shl	local09, #1
0a72c     18 2F 02 F1 | 	add	local09, local10
0a730     02 2E 66 F0 | 	shl	local09, #2
0a734     03 00 00 FF 
0a738     00 E4 85 F1 | 	sub	objptr, ##1536
0a73c     F2 2E 02 F1 | 	add	local09, objptr
0a740     17 29 62 FC | 	wrlong	local06, local09
0a744     03 00 00 FF 
0a748     00 E4 05 F1 | 	add	objptr, ##1536
0a74c     F2 30 02 FB | 	rdlong	local10, objptr
0a750     18 2F 02 F6 | 	mov	local09, local10
0a754     01 2E 66 F0 | 	shl	local09, #1
0a758     18 2F 02 F1 | 	add	local09, local10
0a75c     02 2E 66 F0 | 	shl	local09, #2
0a760     03 00 00 FF 
0a764     00 E4 85 F1 | 	sub	objptr, ##1536
0a768     F2 2E 02 F1 | 	add	local09, objptr
0a76c     04 2E 06 F1 | 	add	local09, #4
0a770     17 2B 62 FC | 	wrlong	local07, local09
0a774     03 00 00 FF 
0a778     00 E4 05 F1 | 	add	objptr, ##1536
0a77c     F2 30 02 FB | 	rdlong	local10, objptr
0a780     18 2F 02 F6 | 	mov	local09, local10
0a784     01 2E 66 F0 | 	shl	local09, #1
0a788     18 2F 02 F1 | 	add	local09, local10
0a78c     02 2E 66 F0 | 	shl	local09, #2
0a790     03 00 00 FF 
0a794     00 E4 85 F1 | 	sub	objptr, ##1536
0a798     F2 2E 02 F1 | 	add	local09, objptr
0a79c     08 2E 06 F1 | 	add	local09, #8
0a7a0     17 33 62 FC | 	wrlong	local11, local09
0a7a4     03 00 00 FF 
0a7a8     00 E4 05 F1 | 	add	objptr, ##1536
0a7ac     F2 28 02 FB | 	rdlong	local06, objptr
0a7b0     01 28 06 F1 | 	add	local06, #1
0a7b4     F2 28 62 FC | 	wrlong	local06, objptr
0a7b8     13 00 00 FF 
0a7bc     38 E4 85 F1 | 	sub	objptr, ##9784
0a7c0     F2 28 02 FB | 	rdlong	local06, objptr
0a7c4     01 28 06 F1 | 	add	local06, #1
0a7c8     F2 28 62 FC | 	wrlong	local06, objptr
0a7cc     37 00 00 FF 
0a7d0     74 E4 85 F1 | 	sub	objptr, ##28276
0a7d4     C0 00 90 FD | 	jmp	#LR__0893
0a7d8                 | LR__0890
0a7d8     12 13 02 F6 | 	mov	arg01, local04
0a7dc     B8 03 B0 FD | 	call	#_getvar
0a7e0     37 00 00 FF 
0a7e4     74 E4 05 F1 | 	add	objptr, ##28276
0a7e8     F2 28 02 FB | 	rdlong	local06, objptr
0a7ec     01 28 06 F1 | 	add	local06, #1
0a7f0     F2 28 62 FC | 	wrlong	local06, objptr
0a7f4     37 00 00 FF 
0a7f8     74 E4 85 F1 | 	sub	objptr, ##28276
0a7fc     98 00 90 FD | 	jmp	#LR__0893
0a800                 | LR__0891
0a800     37 00 00 FF 
0a804     74 E4 05 F1 | 	add	objptr, ##28276
0a808     F2 28 02 FB | 	rdlong	local06, objptr
0a80c     01 28 06 F1 | 	add	local06, #1
0a810     F2 28 62 FC | 	wrlong	local06, objptr
0a814     37 00 00 FF 
0a818     74 E4 85 F1 | 	sub	objptr, ##28276
0a81c     58 F1 BF FD | 	call	#_expr
0a820                 | '     ct+=1
0a820                 | '     expr() 
0a820                 | '     if lparts(ct).token=token_rpar then ct+=1
0a820     37 00 00 FF 
0a824     74 E4 05 F1 | 	add	objptr, ##28276
0a828     F2 32 02 FB | 	rdlong	local11, objptr
0a82c     03 32 66 F0 | 	shl	local11, #3
0a830     02 00 00 FF 
0a834     38 E4 85 F1 | 	sub	objptr, ##1080
0a838     F2 32 02 F1 | 	add	local11, objptr
0a83c     04 32 06 F1 | 	add	local11, #4
0a840     19 33 02 FB | 	rdlong	local11, local11
0a844     14 32 0E F2 | 	cmp	local11, #20 wz
0a848     35 00 00 FF 
0a84c     3C E4 85 F1 | 	sub	objptr, ##27196
0a850     44 00 90 5D |  if_ne	jmp	#LR__0893
0a854     37 00 00 FF 
0a858     74 E4 05 F1 | 	add	objptr, ##28276
0a85c     F2 28 02 FB | 	rdlong	local06, objptr
0a860     01 28 06 F1 | 	add	local06, #1
0a864     F2 28 62 FC | 	wrlong	local06, objptr
0a868     37 00 00 FF 
0a86c     74 E4 85 F1 | 	sub	objptr, ##28276
0a870     24 00 90 FD | 	jmp	#LR__0893
0a874                 | LR__0892
0a874     12 13 02 F6 | 	mov	arg01, local04
0a878     28 00 B0 FD | 	call	#_getfun
0a87c     37 00 00 FF 
0a880     74 E4 05 F1 | 	add	objptr, ##28276
0a884     F2 28 02 FB | 	rdlong	local06, objptr
0a888     01 28 06 F1 | 	add	local06, #1
0a88c     F2 28 62 FC | 	wrlong	local06, objptr
0a890     37 00 00 FF 
0a894     74 E4 85 F1 | 	sub	objptr, ##28276
0a898                 | LR__0893
0a898     A7 F0 03 F6 | 	mov	ptra, fp
0a89c     B2 00 A0 FD | 	call	#popregs_
0a8a0                 | _getvalue_ret
0a8a0     2D 00 64 FD | 	ret
0a8a4                 | 
0a8a4                 | ' 
0a8a4                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
0a8a4                 | _getfun
0a8a4     0A 4A 05 F6 | 	mov	COUNT_, #10
0a8a8     A8 00 A0 FD | 	call	#pushregs_
0a8ac                 | _getfun_enter
0a8ac     09 25 02 F6 | 	mov	local04, arg01
0a8b0     37 00 00 FF 
0a8b4     74 E4 05 F1 | 	add	objptr, ##28276
0a8b8     F2 26 02 FB | 	rdlong	local05, objptr
0a8bc     13 29 02 F6 | 	mov	local06, local05
0a8c0     00 2A 06 F6 | 	mov	local07, #0
0a8c4                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
0a8c4                 | ' oldct=ct
0a8c4                 | ' numpar=0
0a8c4                 | '   
0a8c4                 | ' if lparts(ct+1).token=token_lpar then
0a8c4     01 26 06 F1 | 	add	local05, #1
0a8c8     03 26 66 F0 | 	shl	local05, #3
0a8cc     02 00 00 FF 
0a8d0     38 E4 85 F1 | 	sub	objptr, ##1080
0a8d4     F2 26 02 F1 | 	add	local05, objptr
0a8d8     04 26 06 F1 | 	add	local05, #4
0a8dc     13 27 02 FB | 	rdlong	local05, local05
0a8e0     15 26 0E F2 | 	cmp	local05, #21 wz
0a8e4     35 00 00 FF 
0a8e8     3C E4 85 F1 | 	sub	objptr, ##27196
0a8ec     08 01 90 5D |  if_ne	jmp	#LR__0904
0a8f0     37 00 00 FF 
0a8f4     74 E4 05 F1 | 	add	objptr, ##28276
0a8f8     F2 2C 02 FB | 	rdlong	local08, objptr
0a8fc     01 2C 06 F1 | 	add	local08, #1
0a900     F2 2C 62 FC | 	wrlong	local08, objptr
0a904     37 00 00 FF 
0a908     74 E4 85 F1 | 	sub	objptr, ##28276
0a90c                 | '   ct+=1 											' omit this lpar, this is for expr list
0a90c                 | '   do
0a90c                 | LR__0900
0a90c     37 00 00 FF 
0a910     74 E4 05 F1 | 	add	objptr, ##28276
0a914     F2 26 02 FB | 	rdlong	local05, objptr
0a918     01 26 06 F1 | 	add	local05, #1
0a91c     F2 26 62 FC | 	wrlong	local05, objptr
0a920                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0a920                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0a920     03 26 66 F0 | 	shl	local05, #3
0a924     02 00 00 FF 
0a928     38 E4 85 F1 | 	sub	objptr, ##1080
0a92c     F2 26 02 F1 | 	add	local05, objptr
0a930     04 26 06 F1 | 	add	local05, #4
0a934     13 2D 02 FB | 	rdlong	local08, local05
0a938     15 2C 0E F2 | 	cmp	local08, #21 wz
0a93c     35 00 00 FF 
0a940     3C E4 85 F1 | 	sub	objptr, ##27196
0a944     40 00 90 5D |  if_ne	jmp	#LR__0901
0a948     37 00 00 FF 
0a94c     74 E4 05 F1 | 	add	objptr, ##28276
0a950     F2 2C 02 FB | 	rdlong	local08, objptr
0a954     01 2C 06 F1 | 	add	local08, #1
0a958     F2 2C 62 FC | 	wrlong	local08, objptr
0a95c     37 00 00 FF 
0a960     74 E4 85 F1 | 	sub	objptr, ##28276
0a964     10 F0 BF FD | 	call	#_expr
0a968     37 00 00 FF 
0a96c     74 E4 05 F1 | 	add	objptr, ##28276
0a970     F2 2C 02 FB | 	rdlong	local08, objptr
0a974     01 2C 06 F1 | 	add	local08, #1
0a978     F2 2C 62 FC | 	wrlong	local08, objptr
0a97c     37 00 00 FF 
0a980     74 E4 85 F1 | 	sub	objptr, ##28276
0a984     04 00 90 FD | 	jmp	#LR__0902
0a988                 | LR__0901
0a988     EC EF BF FD | 	call	#_expr
0a98c                 | LR__0902
0a98c     01 2A 06 F1 | 	add	local07, #1
0a990     37 00 00 FF 
0a994     74 E4 05 F1 | 	add	objptr, ##28276
0a998     F2 26 02 FB | 	rdlong	local05, objptr
0a99c     03 26 66 F0 | 	shl	local05, #3
0a9a0     02 00 00 FF 
0a9a4     38 E4 85 F1 | 	sub	objptr, ##1080
0a9a8     F2 26 02 F1 | 	add	local05, objptr
0a9ac     04 26 06 F1 | 	add	local05, #4
0a9b0     13 2D 02 FB | 	rdlong	local08, local05
0a9b4     14 2C 0E F2 | 	cmp	local08, #20 wz
0a9b8     35 00 00 FF 
0a9bc     3C E4 85 F1 | 	sub	objptr, ##27196
0a9c0     34 00 90 AD |  if_e	jmp	#LR__0903
0a9c4     37 00 00 FF 
0a9c8     74 E4 05 F1 | 	add	objptr, ##28276
0a9cc     F2 2C 02 FB | 	rdlong	local08, objptr
0a9d0     03 2C 66 F0 | 	shl	local08, #3
0a9d4     02 00 00 FF 
0a9d8     38 E4 85 F1 | 	sub	objptr, ##1080
0a9dc     F2 2C 02 F1 | 	add	local08, objptr
0a9e0     04 2C 06 F1 | 	add	local08, #4
0a9e4     16 2D 02 FB | 	rdlong	local08, local08
0a9e8     FE 2D 0E F2 | 	cmp	local08, #510 wz
0a9ec     35 00 00 FF 
0a9f0     3C E4 85 F1 | 	sub	objptr, ##27196
0a9f4     14 FF 9F 5D |  if_ne	jmp	#LR__0900
0a9f8                 | LR__0903
0a9f8                 | LR__0904
0a9f8     15 1F 02 F6 | 	mov	local01, local07
0a9fc     03 28 66 F0 | 	shl	local06, #3
0aa00     35 00 00 FF 
0aa04     3C E4 05 F1 | 	add	objptr, ##27196
0aa08     F2 28 02 F1 | 	add	local06, objptr
0aa0c     04 28 06 F1 | 	add	local06, #4
0aa10     14 23 02 FB | 	rdlong	local03, local06
0aa14     0F 2D 02 F6 | 	mov	local08, local01
0aa18     10 2B 02 F6 | 	mov	local07, local02
0aa1c     11 29 02 F6 | 	mov	local06, local03
0aa20     15 00 00 FF 
0aa24     70 E4 05 F1 | 	add	objptr, ##10864
0aa28     F2 26 02 FB | 	rdlong	local05, objptr
0aa2c     13 13 02 F6 | 	mov	arg01, local05
0aa30     01 12 66 F0 | 	shl	arg01, #1
0aa34     13 13 02 F1 | 	add	arg01, local05
0aa38     02 12 66 F0 | 	shl	arg01, #2
0aa3c     03 00 00 FF 
0aa40     00 E4 85 F1 | 	sub	objptr, ##1536
0aa44     F2 12 02 F1 | 	add	arg01, objptr
0aa48     09 2D 62 FC | 	wrlong	local08, arg01
0aa4c     03 00 00 FF 
0aa50     00 E4 05 F1 | 	add	objptr, ##1536
0aa54     F2 2C 02 FB | 	rdlong	local08, objptr
0aa58     16 2F 02 F6 | 	mov	local09, local08
0aa5c     01 2E 66 F0 | 	shl	local09, #1
0aa60     16 2F 02 F1 | 	add	local09, local08
0aa64     02 2E 66 F0 | 	shl	local09, #2
0aa68     03 00 00 FF 
0aa6c     00 E4 85 F1 | 	sub	objptr, ##1536
0aa70     F2 2E 02 F1 | 	add	local09, objptr
0aa74     04 2E 06 F1 | 	add	local09, #4
0aa78     17 2B 62 FC | 	wrlong	local07, local09
0aa7c     03 00 00 FF 
0aa80     00 E4 05 F1 | 	add	objptr, ##1536
0aa84     F2 2C 02 FB | 	rdlong	local08, objptr
0aa88     16 31 02 F6 | 	mov	local10, local08
0aa8c     01 30 66 F0 | 	shl	local10, #1
0aa90     16 31 02 F1 | 	add	local10, local08
0aa94     02 30 66 F0 | 	shl	local10, #2
0aa98     03 00 00 FF 
0aa9c     00 E4 85 F1 | 	sub	objptr, ##1536
0aaa0     F2 30 02 F1 | 	add	local10, objptr
0aaa4     08 30 06 F1 | 	add	local10, #8
0aaa8     18 29 62 FC | 	wrlong	local06, local10
0aaac     03 00 00 FF 
0aab0     00 E4 05 F1 | 	add	objptr, ##1536
0aab4     F2 2C 02 FB | 	rdlong	local08, objptr
0aab8     01 2C 06 F1 | 	add	local08, #1
0aabc     F2 2C 62 FC | 	wrlong	local08, objptr
0aac0     4A 00 00 FF 
0aac4     AC E4 85 F1 | 	sub	objptr, ##38060
0aac8                 | ' 
0aac8                 | ' t2.result.uresult=numpar
0aac8                 | ' 
0aac8                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0aac8                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0aac8                 | ' 
0aac8                 | '   
0aac8                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0aac8     FF FF 7F FF 
0aacc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0aad0     B8 00 90 5D |  if_ne	jmp	#LR__0905
0aad4     15 22 06 F6 | 	mov	local03, #21
0aad8     0F 2D 02 F6 | 	mov	local08, local01
0aadc     10 2B 02 F6 | 	mov	local07, local02
0aae0     11 29 02 F6 | 	mov	local06, local03
0aae4     4A 00 00 FF 
0aae8     AC E4 05 F1 | 	add	objptr, ##38060
0aaec     F2 26 02 FB | 	rdlong	local05, objptr
0aaf0     13 13 02 F6 | 	mov	arg01, local05
0aaf4     01 12 66 F0 | 	shl	arg01, #1
0aaf8     13 13 02 F1 | 	add	arg01, local05
0aafc     02 12 66 F0 | 	shl	arg01, #2
0ab00     03 00 00 FF 
0ab04     00 E4 85 F1 | 	sub	objptr, ##1536
0ab08     F2 12 02 F1 | 	add	arg01, objptr
0ab0c     09 2D 62 FC | 	wrlong	local08, arg01
0ab10     03 00 00 FF 
0ab14     00 E4 05 F1 | 	add	objptr, ##1536
0ab18     F2 30 02 FB | 	rdlong	local10, objptr
0ab1c     18 2F 02 F6 | 	mov	local09, local10
0ab20     01 2E 66 F0 | 	shl	local09, #1
0ab24     18 2F 02 F1 | 	add	local09, local10
0ab28     02 2E 66 F0 | 	shl	local09, #2
0ab2c     03 00 00 FF 
0ab30     00 E4 85 F1 | 	sub	objptr, ##1536
0ab34     F2 2E 02 F1 | 	add	local09, objptr
0ab38     04 2E 06 F1 | 	add	local09, #4
0ab3c     17 2B 62 FC | 	wrlong	local07, local09
0ab40     03 00 00 FF 
0ab44     00 E4 05 F1 | 	add	objptr, ##1536
0ab48     F2 2E 02 FB | 	rdlong	local09, objptr
0ab4c     17 31 02 F6 | 	mov	local10, local09
0ab50     01 30 66 F0 | 	shl	local10, #1
0ab54     17 31 02 F1 | 	add	local10, local09
0ab58     02 30 66 F0 | 	shl	local10, #2
0ab5c     03 00 00 FF 
0ab60     00 E4 85 F1 | 	sub	objptr, ##1536
0ab64     F2 30 02 F1 | 	add	local10, objptr
0ab68     08 30 06 F1 | 	add	local10, #8
0ab6c     18 29 62 FC | 	wrlong	local06, local10
0ab70     03 00 00 FF 
0ab74     00 E4 05 F1 | 	add	objptr, ##1536
0ab78     F2 2C 02 FB | 	rdlong	local08, objptr
0ab7c     01 2C 06 F1 | 	add	local08, #1
0ab80     F2 2C 62 FC | 	wrlong	local08, objptr
0ab84     4A 00 00 FF 
0ab88     AC E4 85 F1 | 	sub	objptr, ##38060
0ab8c                 | LR__0905
0ab8c     A7 F0 03 F6 | 	mov	ptra, fp
0ab90     B2 00 A0 FD | 	call	#popregs_
0ab94                 | _getfun_ret
0ab94     2D 00 64 FD | 	ret
0ab98                 | 
0ab98                 | '   
0ab98                 | '   
0ab98                 | ' sub getvar(m as integer) 
0ab98                 | _getvar
0ab98     0A 4A 05 F6 | 	mov	COUNT_, #10
0ab9c     A8 00 A0 FD | 	call	#pushregs_
0aba0                 | _getvar_enter
0aba0     09 25 02 F6 | 	mov	local04, arg01
0aba4     37 00 00 FF 
0aba8     74 E4 05 F1 | 	add	objptr, ##28276
0abac     F2 14 02 FB | 	rdlong	arg02, objptr
0abb0     03 14 66 F0 | 	shl	arg02, #3
0abb4     02 00 00 FF 
0abb8     38 E4 85 F1 | 	sub	objptr, ##1080
0abbc     F2 14 02 F1 | 	add	arg02, objptr
0abc0     0A 27 02 FB | 	rdlong	local05, arg02
0abc4     13 13 02 F6 | 	mov	arg01, local05
0abc8     01 14 06 F6 | 	mov	arg02, #1
0abcc     35 00 00 FF 
0abd0     3C E4 85 F1 | 	sub	objptr, ##27196
0abd4     3C 82 B1 FD | 	call	#__system__Right_S
0abd8     FD 28 02 F6 | 	mov	local06, result1
0abdc     01 2A 66 F6 | 	neg	local07, #1
0abe0                 | ' 
0abe0                 | ' varname$=lparts(ct).part$
0abe0                 | ' suffix$=right$(varname$,1)
0abe0                 | ' j=-1
0abe0                 | ' 
0abe0                 | ' for i=0 to varnum-1
0abe0     00 2C 06 F6 | 	mov	local08, #0
0abe4     35 00 00 FF 
0abe8     38 E4 05 F1 | 	add	objptr, ##27192
0abec     F2 2E 02 FB | 	rdlong	local09, objptr
0abf0     35 00 00 FF 
0abf4     38 E4 85 F1 | 	sub	objptr, ##27192
0abf8                 | LR__0910
0abf8     17 2D 52 F2 | 	cmps	local08, local09 wc
0abfc     38 00 90 3D |  if_ae	jmp	#LR__0911
0ac00                 | '   if variables(i).name=varname$ then j=i : exit
0ac00     16 15 02 F6 | 	mov	arg02, local08
0ac04     04 14 66 F0 | 	shl	arg02, #4
0ac08     15 00 00 FF 
0ac0c     28 E4 05 F1 | 	add	objptr, ##10792
0ac10     F2 14 02 F1 | 	add	arg02, objptr
0ac14     0A 13 02 FB | 	rdlong	arg01, arg02
0ac18     13 15 02 F6 | 	mov	arg02, local05
0ac1c     15 00 00 FF 
0ac20     28 E4 85 F1 | 	sub	objptr, ##10792
0ac24     10 61 B1 FD | 	call	#__system___string_cmp
0ac28     00 FA 0D F2 | 	cmp	result1, #0 wz
0ac2c     16 2B 02 A6 |  if_e	mov	local07, local08
0ac30     01 2C 06 51 |  if_ne	add	local08, #1
0ac34     C0 FF 9F 5D |  if_ne	jmp	#LR__0910
0ac38                 | LR__0911
0ac38                 | ' if  j=-1 andalso varnum<maxvars then   
0ac38     FF FF 7F FF 
0ac3c     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
0ac40     A8 00 90 5D |  if_ne	jmp	#LR__0912
0ac44     35 00 00 FF 
0ac48     38 E4 05 F1 | 	add	objptr, ##27192
0ac4c     F2 2E 02 FB | 	rdlong	local09, objptr
0ac50     35 00 00 FF 
0ac54     38 E4 85 F1 | 	sub	objptr, ##27192
0ac58     02 00 00 FF 
0ac5c     00 2E 56 F2 | 	cmps	local09, ##1024 wc
0ac60     88 00 90 3D |  if_ae	jmp	#LR__0912
0ac64     35 00 00 FF 
0ac68     38 E4 05 F1 | 	add	objptr, ##27192
0ac6c     F2 2E 02 FB | 	rdlong	local09, objptr
0ac70     04 2E 66 F0 | 	shl	local09, #4
0ac74     20 00 00 FF 
0ac78     10 E4 85 F1 | 	sub	objptr, ##16400
0ac7c     F2 2E 02 F1 | 	add	local09, objptr
0ac80     17 27 62 FC | 	wrlong	local05, local09
0ac84     20 00 00 FF 
0ac88     10 E4 05 F1 | 	add	objptr, ##16400
0ac8c     F2 2E 02 FB | 	rdlong	local09, objptr
0ac90     04 2E 66 F0 | 	shl	local09, #4
0ac94     20 00 00 FF 
0ac98     10 E4 85 F1 | 	sub	objptr, ##16400
0ac9c     F2 2E 02 F1 | 	add	local09, objptr
0aca0     04 2E 06 F1 | 	add	local09, #4
0aca4     17 01 68 FC | 	wrlong	#0, local09
0aca8     20 00 00 FF 
0acac     10 E4 05 F1 | 	add	objptr, ##16400
0acb0     F2 2E 02 FB | 	rdlong	local09, objptr
0acb4     04 2E 66 F0 | 	shl	local09, #4
0acb8     20 00 00 FF 
0acbc     10 E4 85 F1 | 	sub	objptr, ##16400
0acc0     F2 2E 02 F1 | 	add	local09, objptr
0acc4     0C 2E 06 F1 | 	add	local09, #12
0acc8     17 39 68 FC | 	wrlong	#28, local09
0accc     20 00 00 FF 
0acd0     10 E4 05 F1 | 	add	objptr, ##16400
0acd4     F2 2E 02 FB | 	rdlong	local09, objptr
0acd8     17 2B 02 F6 | 	mov	local07, local09
0acdc     01 2E 06 F1 | 	add	local09, #1
0ace0     F2 2E 62 FC | 	wrlong	local09, objptr
0ace4     35 00 00 FF 
0ace8     38 E4 85 F1 | 	sub	objptr, ##27192
0acec                 | LR__0912
0acec     00 2E 06 F6 | 	mov	local09, #0
0acf0                 | ' numpar=0
0acf0                 | ' ' check if it is an array
0acf0                 | ' 
0acf0                 | ' if lparts(ct+1).token=token_lpar then
0acf0     37 00 00 FF 
0acf4     74 E4 05 F1 | 	add	objptr, ##28276
0acf8     F2 2C 02 FB | 	rdlong	local08, objptr
0acfc     01 2C 06 F1 | 	add	local08, #1
0ad00     03 2C 66 F0 | 	shl	local08, #3
0ad04     02 00 00 FF 
0ad08     38 E4 85 F1 | 	sub	objptr, ##1080
0ad0c     F2 2C 02 F1 | 	add	local08, objptr
0ad10     04 2C 06 F1 | 	add	local08, #4
0ad14     16 2D 02 FB | 	rdlong	local08, local08
0ad18     15 2C 0E F2 | 	cmp	local08, #21 wz
0ad1c     35 00 00 FF 
0ad20     3C E4 85 F1 | 	sub	objptr, ##27196
0ad24     08 01 90 5D |  if_ne	jmp	#LR__0917
0ad28     37 00 00 FF 
0ad2c     74 E4 05 F1 | 	add	objptr, ##28276
0ad30     F2 30 02 FB | 	rdlong	local10, objptr
0ad34     01 30 06 F1 | 	add	local10, #1
0ad38     F2 30 62 FC | 	wrlong	local10, objptr
0ad3c     37 00 00 FF 
0ad40     74 E4 85 F1 | 	sub	objptr, ##28276
0ad44                 | '   ct+=1 											' omit this lpar, this is for expr list
0ad44                 | '   do
0ad44                 | LR__0913
0ad44     37 00 00 FF 
0ad48     74 E4 05 F1 | 	add	objptr, ##28276
0ad4c     F2 2C 02 FB | 	rdlong	local08, objptr
0ad50     01 2C 06 F1 | 	add	local08, #1
0ad54     F2 2C 62 FC | 	wrlong	local08, objptr
0ad58                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0ad58                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0ad58     03 2C 66 F0 | 	shl	local08, #3
0ad5c     02 00 00 FF 
0ad60     38 E4 85 F1 | 	sub	objptr, ##1080
0ad64     F2 2C 02 F1 | 	add	local08, objptr
0ad68     04 2C 06 F1 | 	add	local08, #4
0ad6c     16 31 02 FB | 	rdlong	local10, local08
0ad70     15 30 0E F2 | 	cmp	local10, #21 wz
0ad74     35 00 00 FF 
0ad78     3C E4 85 F1 | 	sub	objptr, ##27196
0ad7c     40 00 90 5D |  if_ne	jmp	#LR__0914
0ad80     37 00 00 FF 
0ad84     74 E4 05 F1 | 	add	objptr, ##28276
0ad88     F2 30 02 FB | 	rdlong	local10, objptr
0ad8c     01 30 06 F1 | 	add	local10, #1
0ad90     F2 30 62 FC | 	wrlong	local10, objptr
0ad94     37 00 00 FF 
0ad98     74 E4 85 F1 | 	sub	objptr, ##28276
0ad9c     D8 EB BF FD | 	call	#_expr
0ada0     37 00 00 FF 
0ada4     74 E4 05 F1 | 	add	objptr, ##28276
0ada8     F2 30 02 FB | 	rdlong	local10, objptr
0adac     01 30 06 F1 | 	add	local10, #1
0adb0     F2 30 62 FC | 	wrlong	local10, objptr
0adb4     37 00 00 FF 
0adb8     74 E4 85 F1 | 	sub	objptr, ##28276
0adbc     04 00 90 FD | 	jmp	#LR__0915
0adc0                 | LR__0914
0adc0     B4 EB BF FD | 	call	#_expr
0adc4                 | LR__0915
0adc4     01 2E 06 F1 | 	add	local09, #1
0adc8     37 00 00 FF 
0adcc     74 E4 05 F1 | 	add	objptr, ##28276
0add0     F2 2C 02 FB | 	rdlong	local08, objptr
0add4     03 2C 66 F0 | 	shl	local08, #3
0add8     02 00 00 FF 
0addc     38 E4 85 F1 | 	sub	objptr, ##1080
0ade0     F2 2C 02 F1 | 	add	local08, objptr
0ade4     04 2C 06 F1 | 	add	local08, #4
0ade8     16 31 02 FB | 	rdlong	local10, local08
0adec     14 30 0E F2 | 	cmp	local10, #20 wz
0adf0     35 00 00 FF 
0adf4     3C E4 85 F1 | 	sub	objptr, ##27196
0adf8     34 00 90 AD |  if_e	jmp	#LR__0916
0adfc     37 00 00 FF 
0ae00     74 E4 05 F1 | 	add	objptr, ##28276
0ae04     F2 30 02 FB | 	rdlong	local10, objptr
0ae08     03 30 66 F0 | 	shl	local10, #3
0ae0c     02 00 00 FF 
0ae10     38 E4 85 F1 | 	sub	objptr, ##1080
0ae14     F2 30 02 F1 | 	add	local10, objptr
0ae18     04 30 06 F1 | 	add	local10, #4
0ae1c     18 31 02 FB | 	rdlong	local10, local10
0ae20     FE 31 0E F2 | 	cmp	local10, #510 wz
0ae24     35 00 00 FF 
0ae28     3C E4 85 F1 | 	sub	objptr, ##27196
0ae2c     14 FF 9F 5D |  if_ne	jmp	#LR__0913
0ae30                 | LR__0916
0ae30                 | LR__0917
0ae30     17 21 02 F6 | 	mov	local02, local09
0ae34     11 22 06 F6 | 	mov	local03, #17
0ae38     15 1F 02 F6 | 	mov	local01, local07
0ae3c     0F 31 02 F6 | 	mov	local10, local01
0ae40     10 2F 02 F6 | 	mov	local09, local02
0ae44     11 2D 02 F6 | 	mov	local08, local03
0ae48     4A 00 00 FF 
0ae4c     AC E4 05 F1 | 	add	objptr, ##38060
0ae50     F2 2A 02 FB | 	rdlong	local07, objptr
0ae54     15 29 02 F6 | 	mov	local06, local07
0ae58     01 28 66 F0 | 	shl	local06, #1
0ae5c     15 29 02 F1 | 	add	local06, local07
0ae60     02 28 66 F0 | 	shl	local06, #2
0ae64     03 00 00 FF 
0ae68     00 E4 85 F1 | 	sub	objptr, ##1536
0ae6c     F2 28 02 F1 | 	add	local06, objptr
0ae70     14 31 62 FC | 	wrlong	local10, local06
0ae74     03 00 00 FF 
0ae78     00 E4 05 F1 | 	add	objptr, ##1536
0ae7c     F2 30 02 FB | 	rdlong	local10, objptr
0ae80     18 27 02 F6 | 	mov	local05, local10
0ae84     01 26 66 F0 | 	shl	local05, #1
0ae88     18 27 02 F1 | 	add	local05, local10
0ae8c     02 26 66 F0 | 	shl	local05, #2
0ae90     03 00 00 FF 
0ae94     00 E4 85 F1 | 	sub	objptr, ##1536
0ae98     F2 26 02 F1 | 	add	local05, objptr
0ae9c     04 26 06 F1 | 	add	local05, #4
0aea0     13 2F 62 FC | 	wrlong	local09, local05
0aea4     03 00 00 FF 
0aea8     00 E4 05 F1 | 	add	objptr, ##1536
0aeac     F2 30 02 FB | 	rdlong	local10, objptr
0aeb0     18 FB 01 F6 | 	mov	result1, local10
0aeb4     01 FA 65 F0 | 	shl	result1, #1
0aeb8     18 FB 01 F1 | 	add	result1, local10
0aebc     02 FA 65 F0 | 	shl	result1, #2
0aec0     03 00 00 FF 
0aec4     00 E4 85 F1 | 	sub	objptr, ##1536
0aec8     F2 FA 01 F1 | 	add	result1, objptr
0aecc     08 FA 05 F1 | 	add	result1, #8
0aed0     FD 2C 62 FC | 	wrlong	local08, result1
0aed4     03 00 00 FF 
0aed8     00 E4 05 F1 | 	add	objptr, ##1536
0aedc     F2 30 02 FB | 	rdlong	local10, objptr
0aee0     01 30 06 F1 | 	add	local10, #1
0aee4     F2 30 62 FC | 	wrlong	local10, objptr
0aee8     4A 00 00 FF 
0aeec     AC E4 85 F1 | 	sub	objptr, ##38060
0aef0                 | ' 
0aef0                 | ' t2.result.twowords(1)=numpar
0aef0                 | ' 
0aef0                 | ' 
0aef0                 | ' 
0aef0                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0aef0                 | ' 
0aef0                 | ' 
0aef0                 | '  
0aef0                 | ' 
0aef0                 | ' 701 
0aef0                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0aef0                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0aef0     FF FF 7F FF 
0aef4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0aef8     B8 00 90 5D |  if_ne	jmp	#LR__0918
0aefc     15 22 06 F6 | 	mov	local03, #21
0af00     0F 31 02 F6 | 	mov	local10, local01
0af04     10 2F 02 F6 | 	mov	local09, local02
0af08     11 2D 02 F6 | 	mov	local08, local03
0af0c     4A 00 00 FF 
0af10     AC E4 05 F1 | 	add	objptr, ##38060
0af14     F2 2A 02 FB | 	rdlong	local07, objptr
0af18     15 29 02 F6 | 	mov	local06, local07
0af1c     01 28 66 F0 | 	shl	local06, #1
0af20     15 29 02 F1 | 	add	local06, local07
0af24     02 28 66 F0 | 	shl	local06, #2
0af28     03 00 00 FF 
0af2c     00 E4 85 F1 | 	sub	objptr, ##1536
0af30     F2 28 02 F1 | 	add	local06, objptr
0af34     14 31 62 FC | 	wrlong	local10, local06
0af38     03 00 00 FF 
0af3c     00 E4 05 F1 | 	add	objptr, ##1536
0af40     F2 1E 02 FB | 	rdlong	local01, objptr
0af44     0F 27 02 F6 | 	mov	local05, local01
0af48     01 26 66 F0 | 	shl	local05, #1
0af4c     0F 27 02 F1 | 	add	local05, local01
0af50     02 26 66 F0 | 	shl	local05, #2
0af54     03 00 00 FF 
0af58     00 E4 85 F1 | 	sub	objptr, ##1536
0af5c     F2 26 02 F1 | 	add	local05, objptr
0af60     04 26 06 F1 | 	add	local05, #4
0af64     13 2F 62 FC | 	wrlong	local09, local05
0af68     03 00 00 FF 
0af6c     00 E4 05 F1 | 	add	objptr, ##1536
0af70     F2 1E 02 FB | 	rdlong	local01, objptr
0af74     0F FB 01 F6 | 	mov	result1, local01
0af78     01 FA 65 F0 | 	shl	result1, #1
0af7c     0F FB 01 F1 | 	add	result1, local01
0af80     02 FA 65 F0 | 	shl	result1, #2
0af84     03 00 00 FF 
0af88     00 E4 85 F1 | 	sub	objptr, ##1536
0af8c     F2 FA 01 F1 | 	add	result1, objptr
0af90     08 FA 05 F1 | 	add	result1, #8
0af94     FD 2C 62 FC | 	wrlong	local08, result1
0af98     03 00 00 FF 
0af9c     00 E4 05 F1 | 	add	objptr, ##1536
0afa0     F2 30 02 FB | 	rdlong	local10, objptr
0afa4     01 30 06 F1 | 	add	local10, #1
0afa8     F2 30 62 FC | 	wrlong	local10, objptr
0afac     4A 00 00 FF 
0afb0     AC E4 85 F1 | 	sub	objptr, ##38060
0afb4                 | LR__0918
0afb4     A7 F0 03 F6 | 	mov	ptra, fp
0afb8     B2 00 A0 FD | 	call	#popregs_
0afbc                 | _getvar_ret
0afbc     2D 00 64 FD | 	ret
0afc0                 | 
0afc0                 | ' 
0afc0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0afc0                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0afc0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0afc0                 | ' 
0afc0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0afc0                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
0afc0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0afc0                 | ' 
0afc0                 | ' function execute_line (astart=0 as integer) as integer
0afc0                 | _execute_line
0afc0     04 4A 05 F6 | 	mov	COUNT_, #4
0afc4     A8 00 A0 FD | 	call	#pushregs_
0afc8     58 00 00 FF 
0afcc     F0 E4 05 F1 | 	add	objptr, ##45296
0afd0     F2 00 68 FC | 	wrlong	#0, objptr
0afd4                 | ' runptr2=0
0afd4                 | ' for lineptr_e=astart to lineptr-1
0afd4     0E 00 00 FF 
0afd8     40 E4 85 F1 | 	sub	objptr, ##7232
0afdc     F2 12 62 FC | 	wrlong	arg01, objptr
0afe0     04 E4 85 F1 | 	sub	objptr, #4
0afe4     F2 1E 02 FB | 	rdlong	local01, objptr
0afe8     4A 00 00 FF 
0afec     AC E4 85 F1 | 	sub	objptr, ##38060
0aff0                 | LR__0920
0aff0     4A 00 00 FF 
0aff4     B0 E4 05 F1 | 	add	objptr, ##38064
0aff8     F2 FA 01 FB | 	rdlong	result1, objptr
0affc     4A 00 00 FF 
0b000     B0 E4 85 F1 | 	sub	objptr, ##38064
0b004     0F FB 51 F2 | 	cmps	result1, local01 wc
0b008     98 00 90 3D |  if_ae	jmp	#LR__0921
0b00c     4A 00 00 FF 
0b010     B0 E4 05 F1 | 	add	objptr, ##38064
0b014     F2 FA 01 FB | 	rdlong	result1, objptr
0b018     FD 20 02 F6 | 	mov	local02, result1
0b01c     01 20 66 F0 | 	shl	local02, #1
0b020     FD 20 02 F1 | 	add	local02, result1
0b024     02 20 66 F0 | 	shl	local02, #2
0b028     03 00 00 FF 
0b02c     04 E4 85 F1 | 	sub	objptr, ##1540
0b030     F2 20 02 F1 | 	add	local02, objptr
0b034     08 20 06 F1 | 	add	local02, #8
0b038     10 21 02 FB | 	rdlong	local02, local02
0b03c     10 21 E2 F8 | 	getbyte	local02, local02, #0
0b040     02 20 66 F0 | 	shl	local02, #2
0b044     04 00 00 FF 
0b048     1C E4 85 F1 | 	sub	objptr, ##2076
0b04c     F2 20 02 F1 | 	add	local02, objptr
0b050     10 21 02 FB | 	rdlong	local02, local02
0b054     10 23 02 F6 | 	mov	local03, local02
0b058     13 20 46 F7 | 	zerox	local02, #19
0b05c     14 22 46 F0 | 	shr	local03, #20
0b060     02 22 66 F0 | 	shl	local03, #2
0b064     ED 22 02 F1 | 	add	local03, __methods__
0b068     11 23 02 FB | 	rdlong	local03, local03
0b06c     43 00 00 FF 
0b070     90 E4 85 F1 | 	sub	objptr, ##34448
0b074     F2 24 02 F6 | 	mov	local04, objptr
0b078     10 E5 01 F6 | 	mov	objptr, local02
0b07c     2D 22 62 FD | 	call	local03
0b080     12 E5 01 F6 | 	mov	objptr, local04
0b084     4A 00 00 FF 
0b088     B0 E4 05 F1 | 	add	objptr, ##38064
0b08c     F2 24 02 FB | 	rdlong	local04, objptr
0b090     01 24 06 F1 | 	add	local04, #1
0b094     F2 24 62 FC | 	wrlong	local04, objptr
0b098     4A 00 00 FF 
0b09c     B0 E4 85 F1 | 	sub	objptr, ##38064
0b0a0     4C FF 9F FD | 	jmp	#LR__0920
0b0a4                 | LR__0921
0b0a4                 | ' return runptr2
0b0a4     58 00 00 FF 
0b0a8     F0 E4 05 F1 | 	add	objptr, ##45296
0b0ac     F2 FA 01 FB | 	rdlong	result1, objptr
0b0b0     58 00 00 FF 
0b0b4     F0 E4 85 F1 | 	sub	objptr, ##45296
0b0b8     A7 F0 03 F6 | 	mov	ptra, fp
0b0bc     B2 00 A0 FD | 	call	#popregs_
0b0c0                 | _execute_line_ret
0b0c0     2D 00 64 FD | 	ret
0b0c4                 | 
0b0c4                 | ' 
0b0c4                 | ' 
0b0c4                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0b0c4                 | ' 
0b0c4                 | ' function pop() as expr_result
0b0c4                 | _pop
0b0c4                 | ' 
0b0c4                 | ' if stackpointer=0 then
0b0c4     43 00 00 FF 
0b0c8     88 E4 05 F1 | 	add	objptr, ##34440
0b0cc     F2 FA 09 FB | 	rdlong	result1, objptr wz
0b0d0     43 00 00 FF 
0b0d4     88 E4 85 F1 | 	sub	objptr, ##34440
0b0d8     FF 04 06 A6 |  if_e	mov	_var03, #255
0b0dc     18 00 06 A6 |  if_e	mov	_var01, #24
0b0e0     68 00 90 AD |  if_e	jmp	#LR__0930
0b0e4     43 00 00 FF 
0b0e8     88 E4 05 F1 | 	add	objptr, ##34440
0b0ec     F2 FA 01 FB | 	rdlong	result1, objptr
0b0f0     01 FA 85 F1 | 	sub	result1, #1
0b0f4     F2 FA 61 FC | 	wrlong	result1, objptr
0b0f8     FD FE 01 F6 | 	mov	result3, result1
0b0fc     01 FE 65 F0 | 	shl	result3, #1
0b100     FD FE 01 F1 | 	add	result3, result1
0b104     02 FE 65 F0 | 	shl	result3, #2
0b108     0C 00 00 FF 
0b10c     0C E4 85 F1 | 	sub	objptr, ##6156
0b110     F2 FE 01 F1 | 	add	result3, objptr
0b114     FF 00 02 FB | 	rdlong	_var01, result3
0b118     04 FE 05 F1 | 	add	result3, #4
0b11c     FF FE 01 FB | 	rdlong	result3, result3
0b120     FD FC 01 F6 | 	mov	result2, result1
0b124     01 FC 65 F0 | 	shl	result2, #1
0b128     FD FC 01 F1 | 	add	result2, result1
0b12c     02 FC 65 F0 | 	shl	result2, #2
0b130     F2 FC 01 F1 | 	add	result2, objptr
0b134     08 FC 05 F1 | 	add	result2, #8
0b138     FE FA 01 FB | 	rdlong	result1, result2
0b13c     FF 02 02 F6 | 	mov	_var02, result3
0b140     FD 04 02 F6 | 	mov	_var03, result1
0b144     37 00 00 FF 
0b148     7C E4 85 F1 | 	sub	objptr, ##28284
0b14c                 | LR__0930
0b14c                 | ' return t1
0b14c     01 FD 01 F6 | 	mov	result2, _var02
0b150     02 FF 01 F6 | 	mov	result3, _var03
0b154     00 FB 01 F6 | 	mov	result1, _var01
0b158                 | _pop_ret
0b158     2D 00 64 FD | 	ret
0b15c                 | 
0b15c                 | ' 
0b15c                 | ' sub push(t1 as expr_result )
0b15c                 | _push
0b15c                 | ' 
0b15c                 | ' 'print "In push: "; t1.result_type
0b15c                 | ' 'print "In push: "; t1.result.uresult
0b15c                 | ' 
0b15c                 | ' if stackpointer<maxstack then 
0b15c     43 00 00 FF 
0b160     88 E4 05 F1 | 	add	objptr, ##34440
0b164     F2 00 02 FB | 	rdlong	_var01, objptr
0b168     43 00 00 FF 
0b16c     88 E4 85 F1 | 	sub	objptr, ##34440
0b170     01 00 00 FF 
0b174     00 00 56 F2 | 	cmps	_var01, ##512 wc
0b178     BC 00 90 3D |  if_ae	jmp	#LR__0940
0b17c     09 01 02 FB | 	rdlong	_var01, arg01
0b180     04 12 06 F1 | 	add	arg01, #4
0b184     09 03 02 FB | 	rdlong	_var02, arg01
0b188     04 12 06 F1 | 	add	arg01, #4
0b18c     09 13 02 FB | 	rdlong	arg01, arg01
0b190     43 00 00 FF 
0b194     88 E4 05 F1 | 	add	objptr, ##34440
0b198     F2 04 02 FB | 	rdlong	_var03, objptr
0b19c     02 07 02 F6 | 	mov	_var04, _var03
0b1a0     01 06 66 F0 | 	shl	_var04, #1
0b1a4     02 07 02 F1 | 	add	_var04, _var03
0b1a8     02 06 66 F0 | 	shl	_var04, #2
0b1ac     0C 00 00 FF 
0b1b0     0C E4 85 F1 | 	sub	objptr, ##6156
0b1b4     F2 06 02 F1 | 	add	_var04, objptr
0b1b8     03 01 62 FC | 	wrlong	_var01, _var04
0b1bc     0C 00 00 FF 
0b1c0     0C E4 05 F1 | 	add	objptr, ##6156
0b1c4     F2 06 02 FB | 	rdlong	_var04, objptr
0b1c8     03 05 02 F6 | 	mov	_var03, _var04
0b1cc     01 04 66 F0 | 	shl	_var03, #1
0b1d0     03 05 02 F1 | 	add	_var03, _var04
0b1d4     02 04 66 F0 | 	shl	_var03, #2
0b1d8     0C 00 00 FF 
0b1dc     0C E4 85 F1 | 	sub	objptr, ##6156
0b1e0     F2 04 02 F1 | 	add	_var03, objptr
0b1e4     04 04 06 F1 | 	add	_var03, #4
0b1e8     02 03 62 FC | 	wrlong	_var02, _var03
0b1ec     0C 00 00 FF 
0b1f0     0C E4 05 F1 | 	add	objptr, ##6156
0b1f4     F2 06 02 FB | 	rdlong	_var04, objptr
0b1f8     03 05 02 F6 | 	mov	_var03, _var04
0b1fc     01 04 66 F0 | 	shl	_var03, #1
0b200     03 05 02 F1 | 	add	_var03, _var04
0b204     02 04 66 F0 | 	shl	_var03, #2
0b208     0C 00 00 FF 
0b20c     0C E4 85 F1 | 	sub	objptr, ##6156
0b210     F2 04 02 F1 | 	add	_var03, objptr
0b214     08 04 06 F1 | 	add	_var03, #8
0b218     02 13 62 FC | 	wrlong	arg01, _var03
0b21c     0C 00 00 FF 
0b220     0C E4 05 F1 | 	add	objptr, ##6156
0b224     F2 00 02 FB | 	rdlong	_var01, objptr
0b228     01 00 06 F1 | 	add	_var01, #1
0b22c     F2 00 62 FC | 	wrlong	_var01, objptr
0b230     43 00 00 FF 
0b234     88 E4 85 F1 | 	sub	objptr, ##34440
0b238                 | LR__0940
0b238                 | _push_ret
0b238     2D 00 64 FD | 	ret
0b23c                 | 
0b23c                 | ' 
0b23c                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
0b23c                 | ' 
0b23c                 | ' sub do_push
0b23c                 | _do_push
0b23c                 | ' if stackpointer<maxstack then 
0b23c     43 00 00 FF 
0b240     88 E4 05 F1 | 	add	objptr, ##34440
0b244     F2 00 02 FB | 	rdlong	_var01, objptr
0b248     43 00 00 FF 
0b24c     88 E4 85 F1 | 	sub	objptr, ##34440
0b250     01 00 00 FF 
0b254     00 00 56 F2 | 	cmps	_var01, ##512 wc
0b258     F8 00 90 3D |  if_ae	jmp	#LR__0950
0b25c     4A 00 00 FF 
0b260     B0 E4 05 F1 | 	add	objptr, ##38064
0b264     F2 02 02 FB | 	rdlong	_var02, objptr
0b268     01 05 02 F6 | 	mov	_var03, _var02
0b26c     01 04 66 F0 | 	shl	_var03, #1
0b270     01 05 02 F1 | 	add	_var03, _var02
0b274     02 04 66 F0 | 	shl	_var03, #2
0b278     03 00 00 FF 
0b27c     04 E4 85 F1 | 	sub	objptr, ##1540
0b280     F2 04 02 F1 | 	add	_var03, objptr
0b284     02 01 02 FB | 	rdlong	_var01, _var03
0b288     04 04 06 F1 | 	add	_var03, #4
0b28c     02 07 02 FB | 	rdlong	_var04, _var03
0b290     01 05 02 F6 | 	mov	_var03, _var02
0b294     01 04 66 F0 | 	shl	_var03, #1
0b298     01 05 02 F1 | 	add	_var03, _var02
0b29c     02 04 66 F0 | 	shl	_var03, #2
0b2a0     F2 04 02 F1 | 	add	_var03, objptr
0b2a4     08 04 06 F1 | 	add	_var03, #8
0b2a8     02 03 02 FB | 	rdlong	_var02, _var03
0b2ac     04 00 00 FF 
0b2b0     24 E4 85 F1 | 	sub	objptr, ##2084
0b2b4     F2 04 02 FB | 	rdlong	_var03, objptr
0b2b8     02 09 02 F6 | 	mov	_var05, _var03
0b2bc     01 08 66 F0 | 	shl	_var05, #1
0b2c0     02 09 02 F1 | 	add	_var05, _var03
0b2c4     02 08 66 F0 | 	shl	_var05, #2
0b2c8     0C 00 00 FF 
0b2cc     0C E4 85 F1 | 	sub	objptr, ##6156
0b2d0     F2 08 02 F1 | 	add	_var05, objptr
0b2d4     04 01 62 FC | 	wrlong	_var01, _var05
0b2d8     0C 00 00 FF 
0b2dc     0C E4 05 F1 | 	add	objptr, ##6156
0b2e0     F2 08 02 FB | 	rdlong	_var05, objptr
0b2e4     04 05 02 F6 | 	mov	_var03, _var05
0b2e8     01 04 66 F0 | 	shl	_var03, #1
0b2ec     04 05 02 F1 | 	add	_var03, _var05
0b2f0     02 04 66 F0 | 	shl	_var03, #2
0b2f4     0C 00 00 FF 
0b2f8     0C E4 85 F1 | 	sub	objptr, ##6156
0b2fc     F2 04 02 F1 | 	add	_var03, objptr
0b300     04 04 06 F1 | 	add	_var03, #4
0b304     02 07 62 FC | 	wrlong	_var04, _var03
0b308     0C 00 00 FF 
0b30c     0C E4 05 F1 | 	add	objptr, ##6156
0b310     F2 08 02 FB | 	rdlong	_var05, objptr
0b314     04 07 02 F6 | 	mov	_var04, _var05
0b318     01 06 66 F0 | 	shl	_var04, #1
0b31c     04 07 02 F1 | 	add	_var04, _var05
0b320     02 06 66 F0 | 	shl	_var04, #2
0b324     0C 00 00 FF 
0b328     0C E4 85 F1 | 	sub	objptr, ##6156
0b32c     F2 06 02 F1 | 	add	_var04, objptr
0b330     08 06 06 F1 | 	add	_var04, #8
0b334     03 03 62 FC | 	wrlong	_var02, _var04
0b338     0C 00 00 FF 
0b33c     0C E4 05 F1 | 	add	objptr, ##6156
0b340     F2 00 02 FB | 	rdlong	_var01, objptr
0b344     01 00 06 F1 | 	add	_var01, #1
0b348     F2 00 62 FC | 	wrlong	_var01, objptr
0b34c     43 00 00 FF 
0b350     88 E4 85 F1 | 	sub	objptr, ##34440
0b354                 | LR__0950
0b354                 | _do_push_ret
0b354     2D 00 64 FD | 	ret
0b358                 | 
0b358                 | ' 
0b358                 | '   
0b358                 | ' sub csave_block(address as ulong)
0b358                 | _csave_block
0b358     09 01 02 F6 | 	mov	_var01, arg01
0b35c                 | ' 
0b35c                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
0b35c                 | ' ' we enter it at the state of playing 1 kHz header tone
0b35c                 | ' 
0b35c                 | ' for i=0 to 63 step 2
0b35c     00 02 06 F6 | 	mov	_var02, #0
0b360                 | LR__0960
0b360                 | '   do: loop until lpeek(base+64*7)>32768
0b360     37 00 00 FF 
0b364     40 E4 05 F1 | 	add	objptr, ##28224
0b368     97 0C 48 FB | 	callpa	#(@LR__0962-@LR__0961)>>2,fcache_load_ptr_
0b36c                 | LR__0961
0b36c     F2 12 02 FB | 	rdlong	arg01, objptr
0b370     C0 13 06 F1 | 	add	arg01, #448
0b374     09 FB 01 FB | 	rdlong	result1, arg01
0b378     40 00 00 FF 
0b37c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0b380     E8 FF 9F CD |  if_b	jmp	#LR__0961
0b384                 | LR__0962
0b384     00 13 02 F6 | 	mov	arg01, _var01
0b388     01 05 02 F6 | 	mov	_var03, _var02
0b38c     02 04 66 F0 | 	shl	_var03, #2
0b390     02 13 02 F1 | 	add	arg01, _var03
0b394     09 07 02 FB | 	rdlong	_var04, arg01
0b398     23 00 00 FF 
0b39c     1C E4 05 F1 | 	add	objptr, ##17948
0b3a0     F2 06 62 FC | 	wrlong	_var04, objptr
0b3a4     5A 00 00 FF 
0b3a8     5C E4 85 F1 | 	sub	objptr, ##46172
0b3ac                 | '   q=lpeek(address+4*i)
0b3ac                 | '      for bit=0 to 31
0b3ac     00 08 06 F6 | 	mov	_var05, #0
0b3b0     97 84 48 FB | 	callpa	#(@LR__0967-@LR__0963)>>2,fcache_load_ptr_
0b3b4                 | LR__0963
0b3b4                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0b3b4     5A 00 00 FF 
0b3b8     5C E4 05 F1 | 	add	objptr, ##46172
0b3bc     F2 06 02 FB | 	rdlong	_var04, objptr
0b3c0     5A 00 00 FF 
0b3c4     5C E4 85 F1 | 	sub	objptr, ##46172
0b3c8     04 05 C2 F9 | 	decod	_var03, _var05
0b3cc     02 07 CA F7 | 	test	_var04, _var03 wz
0b3d0     60 00 90 AD |  if_e	jmp	#LR__0964
0b3d4     04 05 02 F6 | 	mov	_var03, _var05
0b3d8     02 04 66 F0 | 	shl	_var03, #2
0b3dc     55 00 00 FF 
0b3e0     E8 E5 05 F1 | 	add	objptr, ##44008
0b3e4     F2 04 02 F1 | 	add	_var03, objptr
0b3e8     02 FF 48 FC | 	wrbyte	#127, _var03
0b3ec     04 05 02 F6 | 	mov	_var03, _var05
0b3f0     02 04 66 F0 | 	shl	_var03, #2
0b3f4     01 04 06 F1 | 	add	_var03, #1
0b3f8     F2 04 02 F1 | 	add	_var03, objptr
0b3fc     02 01 49 FC | 	wrbyte	#128, _var03
0b400     04 05 02 F6 | 	mov	_var03, _var05
0b404     02 04 66 F0 | 	shl	_var03, #2
0b408     02 04 06 F1 | 	add	_var03, #2
0b40c     F2 04 02 F1 | 	add	_var03, objptr
0b410     02 FF 48 FC | 	wrbyte	#127, _var03
0b414     04 05 02 F6 | 	mov	_var03, _var05
0b418     02 04 66 F0 | 	shl	_var03, #2
0b41c     03 04 06 F1 | 	add	_var03, #3
0b420     F2 04 02 F1 | 	add	_var03, objptr
0b424     02 01 49 FC | 	wrbyte	#128, _var03
0b428     55 00 00 FF 
0b42c     E8 E5 85 F1 | 	sub	objptr, ##44008
0b430     5C 00 90 FD | 	jmp	#LR__0965
0b434                 | LR__0964
0b434     04 05 02 F6 | 	mov	_var03, _var05
0b438     02 04 66 F0 | 	shl	_var03, #2
0b43c     55 00 00 FF 
0b440     E8 E5 05 F1 | 	add	objptr, ##44008
0b444     F2 04 02 F1 | 	add	_var03, objptr
0b448     02 01 49 FC | 	wrbyte	#128, _var03
0b44c     04 05 02 F6 | 	mov	_var03, _var05
0b450     02 04 66 F0 | 	shl	_var03, #2
0b454     01 04 06 F1 | 	add	_var03, #1
0b458     F2 04 02 F1 | 	add	_var03, objptr
0b45c     02 01 49 FC | 	wrbyte	#128, _var03
0b460     04 05 02 F6 | 	mov	_var03, _var05
0b464     02 04 66 F0 | 	shl	_var03, #2
0b468     02 04 06 F1 | 	add	_var03, #2
0b46c     F2 04 02 F1 | 	add	_var03, objptr
0b470     02 FF 48 FC | 	wrbyte	#127, _var03
0b474     04 05 02 F6 | 	mov	_var03, _var05
0b478     02 04 66 F0 | 	shl	_var03, #2
0b47c     03 04 06 F1 | 	add	_var03, #3
0b480     F2 04 02 F1 | 	add	_var03, objptr
0b484     02 FF 48 FC | 	wrbyte	#127, _var03
0b488     55 00 00 FF 
0b48c     E8 E5 85 F1 | 	sub	objptr, ##44008
0b490                 | LR__0965
0b490     01 08 06 F1 | 	add	_var05, #1
0b494     20 08 56 F2 | 	cmps	_var05, #32 wc
0b498     18 FF 9F CD |  if_b	jmp	#LR__0963
0b49c                 | '   do: loop until lpeek(base+64*7)<32768
0b49c     37 00 00 FF 
0b4a0     40 E4 05 F1 | 	add	objptr, ##28224
0b4a4                 | LR__0966
0b4a4     F2 12 02 FB | 	rdlong	arg01, objptr
0b4a8     C0 13 06 F1 | 	add	arg01, #448
0b4ac     09 FB 01 FB | 	rdlong	result1, arg01
0b4b0     40 00 00 FF 
0b4b4     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0b4b8     E8 FF 9F 3D |  if_ae	jmp	#LR__0966
0b4bc                 | LR__0967
0b4bc     00 13 02 F6 | 	mov	arg01, _var01
0b4c0     04 12 06 F1 | 	add	arg01, #4
0b4c4     01 05 02 F6 | 	mov	_var03, _var02
0b4c8     02 04 66 F0 | 	shl	_var03, #2
0b4cc     02 13 02 F1 | 	add	arg01, _var03
0b4d0     09 07 02 FB | 	rdlong	_var04, arg01
0b4d4     23 00 00 FF 
0b4d8     1C E4 05 F1 | 	add	objptr, ##17948
0b4dc     F2 06 62 FC | 	wrlong	_var04, objptr
0b4e0     5A 00 00 FF 
0b4e4     5C E4 85 F1 | 	sub	objptr, ##46172
0b4e8                 | '   q=lpeek(address+4+4*i)
0b4e8                 | '      for bit=0 to 31
0b4e8     00 08 06 F6 | 	mov	_var05, #0
0b4ec     97 94 48 FB | 	callpa	#(@LR__0971-@LR__0968)>>2,fcache_load_ptr_
0b4f0                 | LR__0968
0b4f0                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0b4f0     5A 00 00 FF 
0b4f4     5C E4 05 F1 | 	add	objptr, ##46172
0b4f8     F2 06 02 FB | 	rdlong	_var04, objptr
0b4fc     5A 00 00 FF 
0b500     5C E4 85 F1 | 	sub	objptr, ##46172
0b504     04 05 C2 F9 | 	decod	_var03, _var05
0b508     02 07 CA F7 | 	test	_var04, _var03 wz
0b50c     80 00 90 AD |  if_e	jmp	#LR__0969
0b510     04 0B 02 F6 | 	mov	_var06, _var05
0b514     02 0A 66 F0 | 	shl	_var06, #2
0b518     80 04 06 F6 | 	mov	_var03, #128
0b51c     05 05 02 F1 | 	add	_var03, _var06
0b520     55 00 00 FF 
0b524     E8 E5 05 F1 | 	add	objptr, ##44008
0b528     F2 04 02 F1 | 	add	_var03, objptr
0b52c     02 FF 48 FC | 	wrbyte	#127, _var03
0b530     04 0B 02 F6 | 	mov	_var06, _var05
0b534     02 0A 66 F0 | 	shl	_var06, #2
0b538     80 04 06 F6 | 	mov	_var03, #128
0b53c     05 05 02 F1 | 	add	_var03, _var06
0b540     01 04 06 F1 | 	add	_var03, #1
0b544     F2 04 02 F1 | 	add	_var03, objptr
0b548     02 01 49 FC | 	wrbyte	#128, _var03
0b54c     04 0B 02 F6 | 	mov	_var06, _var05
0b550     02 0A 66 F0 | 	shl	_var06, #2
0b554     80 04 06 F6 | 	mov	_var03, #128
0b558     05 05 02 F1 | 	add	_var03, _var06
0b55c     02 04 06 F1 | 	add	_var03, #2
0b560     F2 04 02 F1 | 	add	_var03, objptr
0b564     02 FF 48 FC | 	wrbyte	#127, _var03
0b568     04 0B 02 F6 | 	mov	_var06, _var05
0b56c     02 0A 66 F0 | 	shl	_var06, #2
0b570     80 04 06 F6 | 	mov	_var03, #128
0b574     05 05 02 F1 | 	add	_var03, _var06
0b578     03 04 06 F1 | 	add	_var03, #3
0b57c     F2 04 02 F1 | 	add	_var03, objptr
0b580     02 01 49 FC | 	wrbyte	#128, _var03
0b584     55 00 00 FF 
0b588     E8 E5 85 F1 | 	sub	objptr, ##44008
0b58c     7C 00 90 FD | 	jmp	#LR__0970
0b590                 | LR__0969
0b590     04 0B 02 F6 | 	mov	_var06, _var05
0b594     02 0A 66 F0 | 	shl	_var06, #2
0b598     80 04 06 F6 | 	mov	_var03, #128
0b59c     05 05 02 F1 | 	add	_var03, _var06
0b5a0     55 00 00 FF 
0b5a4     E8 E5 05 F1 | 	add	objptr, ##44008
0b5a8     F2 04 02 F1 | 	add	_var03, objptr
0b5ac     02 01 49 FC | 	wrbyte	#128, _var03
0b5b0     04 0B 02 F6 | 	mov	_var06, _var05
0b5b4     02 0A 66 F0 | 	shl	_var06, #2
0b5b8     80 04 06 F6 | 	mov	_var03, #128
0b5bc     05 05 02 F1 | 	add	_var03, _var06
0b5c0     01 04 06 F1 | 	add	_var03, #1
0b5c4     F2 04 02 F1 | 	add	_var03, objptr
0b5c8     02 01 49 FC | 	wrbyte	#128, _var03
0b5cc     04 0B 02 F6 | 	mov	_var06, _var05
0b5d0     02 0A 66 F0 | 	shl	_var06, #2
0b5d4     80 04 06 F6 | 	mov	_var03, #128
0b5d8     05 05 02 F1 | 	add	_var03, _var06
0b5dc     02 04 06 F1 | 	add	_var03, #2
0b5e0     F2 04 02 F1 | 	add	_var03, objptr
0b5e4     02 FF 48 FC | 	wrbyte	#127, _var03
0b5e8     04 0B 02 F6 | 	mov	_var06, _var05
0b5ec     02 0A 66 F0 | 	shl	_var06, #2
0b5f0     80 04 06 F6 | 	mov	_var03, #128
0b5f4     05 05 02 F1 | 	add	_var03, _var06
0b5f8     03 04 06 F1 | 	add	_var03, #3
0b5fc     F2 04 02 F1 | 	add	_var03, objptr
0b600     02 FF 48 FC | 	wrbyte	#127, _var03
0b604     55 00 00 FF 
0b608     E8 E5 85 F1 | 	sub	objptr, ##44008
0b60c                 | LR__0970
0b60c     01 08 06 F1 | 	add	_var05, #1
0b610     20 08 56 F2 | 	cmps	_var05, #32 wc
0b614     D8 FE 9F CD |  if_b	jmp	#LR__0968
0b618                 | LR__0971
0b618     02 02 06 F1 | 	add	_var02, #2
0b61c     40 02 56 F2 | 	cmps	_var02, #64 wc
0b620     3C FD 9F CD |  if_b	jmp	#LR__0960
0b624                 | ' do: loop until lpeek(base+64*7)>32768
0b624     37 00 00 FF 
0b628     40 E4 05 F1 | 	add	objptr, ##28224
0b62c     97 84 48 FB | 	callpa	#(@LR__0980-@LR__0972)>>2,fcache_load_ptr_
0b630                 | LR__0972
0b630     F2 12 02 FB | 	rdlong	arg01, objptr
0b634     C0 13 06 F1 | 	add	arg01, #448
0b638     09 FB 01 FB | 	rdlong	result1, arg01
0b63c     40 00 00 FF 
0b640     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0b644     E8 FF 9F CD |  if_b	jmp	#LR__0972
0b648     37 00 00 FF 
0b64c     40 E4 85 F1 | 	sub	objptr, ##28224
0b650                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0b650     00 02 06 F6 | 	mov	_var02, #0
0b654                 | LR__0973
0b654     01 07 52 F6 | 	abs	_var04, _var02 wc
0b658     07 06 06 F5 | 	and	_var04, #7
0b65c     03 07 82 F6 | 	negc	_var04, _var04
0b660     04 06 56 F2 | 	cmps	_var04, #4 wc
0b664     20 00 90 3D |  if_ae	jmp	#LR__0974
0b668     01 0B 02 F6 | 	mov	_var06, _var02
0b66c     55 00 00 FF 
0b670     E8 E5 05 F1 | 	add	objptr, ##44008
0b674     F2 0A 02 F1 | 	add	_var06, objptr
0b678     05 FF 48 FC | 	wrbyte	#127, _var06
0b67c     55 00 00 FF 
0b680     E8 E5 85 F1 | 	sub	objptr, ##44008
0b684     1C 00 90 FD | 	jmp	#LR__0975
0b688                 | LR__0974
0b688     01 0B 02 F6 | 	mov	_var06, _var02
0b68c     55 00 00 FF 
0b690     E8 E5 05 F1 | 	add	objptr, ##44008
0b694     F2 0A 02 F1 | 	add	_var06, objptr
0b698     05 01 49 FC | 	wrbyte	#128, _var06
0b69c     55 00 00 FF 
0b6a0     E8 E5 85 F1 | 	sub	objptr, ##44008
0b6a4                 | LR__0975
0b6a4     01 02 06 F1 | 	add	_var02, #1
0b6a8     80 02 56 F2 | 	cmps	_var02, #128 wc
0b6ac     A4 FF 9F CD |  if_b	jmp	#LR__0973
0b6b0                 | ' 
0b6b0                 | ' do: loop until lpeek(base+64*7)<32768
0b6b0     37 00 00 FF 
0b6b4     40 E4 05 F1 | 	add	objptr, ##28224
0b6b8                 | LR__0976
0b6b8     F2 12 02 FB | 	rdlong	arg01, objptr
0b6bc     C0 13 06 F1 | 	add	arg01, #448
0b6c0     09 FB 01 FB | 	rdlong	result1, arg01
0b6c4     40 00 00 FF 
0b6c8     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0b6cc     E8 FF 9F 3D |  if_ae	jmp	#LR__0976
0b6d0     37 00 00 FF 
0b6d4     40 E4 85 F1 | 	sub	objptr, ##28224
0b6d8                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0b6d8     80 02 06 F6 | 	mov	_var02, #128
0b6dc                 | LR__0977
0b6dc     01 07 52 F6 | 	abs	_var04, _var02 wc
0b6e0     07 06 06 F5 | 	and	_var04, #7
0b6e4     03 07 82 F6 | 	negc	_var04, _var04
0b6e8     04 06 56 F2 | 	cmps	_var04, #4 wc
0b6ec     20 00 90 3D |  if_ae	jmp	#LR__0978
0b6f0     01 0B 02 F6 | 	mov	_var06, _var02
0b6f4     55 00 00 FF 
0b6f8     E8 E5 05 F1 | 	add	objptr, ##44008
0b6fc     F2 0A 02 F1 | 	add	_var06, objptr
0b700     05 FF 48 FC | 	wrbyte	#127, _var06
0b704     55 00 00 FF 
0b708     E8 E5 85 F1 | 	sub	objptr, ##44008
0b70c     1C 00 90 FD | 	jmp	#LR__0979
0b710                 | LR__0978
0b710     01 0B 02 F6 | 	mov	_var06, _var02
0b714     55 00 00 FF 
0b718     E8 E5 05 F1 | 	add	objptr, ##44008
0b71c     F2 0A 02 F1 | 	add	_var06, objptr
0b720     05 01 49 FC | 	wrbyte	#128, _var06
0b724     55 00 00 FF 
0b728     E8 E5 85 F1 | 	sub	objptr, ##44008
0b72c                 | LR__0979
0b72c     01 02 06 F1 | 	add	_var02, #1
0b730     00 03 16 F2 | 	cmp	_var02, #256 wc
0b734     A4 FF 9F CD |  if_b	jmp	#LR__0977
0b738                 | LR__0980
0b738                 | _csave_block_ret
0b738     2D 00 64 FD | 	ret
0b73c                 | 
0b73c                 | ' 
0b73c                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0b73c                 | _csave_addtoblock
0b73c     04 4A 05 F6 | 	mov	COUNT_, #4
0b740     A8 00 A0 FD | 	call	#pushregs_
0b744     09 1F 02 F6 | 	mov	local01, arg01
0b748                 | ' 
0b748                 | ' 
0b748                 | ' if force=0 then
0b748     07 14 4E F7 | 	zerox	arg02, #7 wz
0b74c     78 00 90 5D |  if_ne	jmp	#LR__0990
0b750     58 00 00 FF 
0b754     E8 E4 05 F1 | 	add	objptr, ##45288
0b758     F2 14 02 FB | 	rdlong	arg02, objptr
0b75c     02 00 00 FF 
0b760     00 E4 85 F1 | 	sub	objptr, ##1024
0b764     F2 14 02 F1 | 	add	arg02, objptr
0b768     0A 1F 42 FC | 	wrbyte	local01, arg02
0b76c     02 00 00 FF 
0b770     00 E4 05 F1 | 	add	objptr, ##1024
0b774     F2 1E 02 FB | 	rdlong	local01, objptr
0b778     01 1E 06 F1 | 	add	local01, #1
0b77c     F2 1E 62 FC | 	wrlong	local01, objptr
0b780                 | '   block(blockptr)=d
0b780                 | '   blockptr+=1
0b780                 | '   if blockptr>=255 then
0b780     58 00 00 FF 
0b784     E8 E4 85 F1 | 	sub	objptr, ##45288
0b788     FF 1E 16 F2 | 	cmp	local01, #255 wc
0b78c     E4 00 90 CD |  if_b	jmp	#LR__0994
0b790     56 00 00 FF 
0b794     E8 E4 05 F1 | 	add	objptr, ##44264
0b798     F2 12 02 F6 | 	mov	arg01, objptr
0b79c     56 00 00 FF 
0b7a0     E8 E4 85 F1 | 	sub	objptr, ##44264
0b7a4     B0 FB BF FD | 	call	#_csave_block
0b7a8     58 00 00 FF 
0b7ac     E8 E4 05 F1 | 	add	objptr, ##45288
0b7b0     F2 00 68 FC | 	wrlong	#0, objptr
0b7b4     58 00 00 FF 
0b7b8     E8 E4 85 F1 | 	sub	objptr, ##45288
0b7bc     2C 13 06 F6 | 	mov	arg01, #300
0b7c0     40 58 B1 FD | 	call	#__system___waitms
0b7c4     AC 00 90 FD | 	jmp	#LR__0994
0b7c8                 | LR__0990
0b7c8     58 00 00 FF 
0b7cc     E8 E4 05 F1 | 	add	objptr, ##45288
0b7d0     F2 20 02 FB | 	rdlong	local02, objptr
0b7d4     02 00 00 FF 
0b7d8     00 E4 85 F1 | 	sub	objptr, ##1024
0b7dc     F2 20 02 F1 | 	add	local02, objptr
0b7e0     10 1F 42 FC | 	wrbyte	local01, local02
0b7e4                 | '   block(blockptr)=d
0b7e4                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0b7e4     02 00 00 FF 
0b7e8     00 E4 05 F1 | 	add	objptr, ##1024
0b7ec     F2 22 02 FB | 	rdlong	local03, objptr
0b7f0     58 00 00 FF 
0b7f4     E8 E4 85 F1 | 	sub	objptr, ##45288
0b7f8     FF 22 16 F2 | 	cmp	local03, #255 wc
0b7fc     40 00 90 3D |  if_ae	jmp	#LR__0993
0b800     58 00 00 FF 
0b804     E8 E4 05 F1 | 	add	objptr, ##45288
0b808     F2 24 02 FB | 	rdlong	local04, objptr
0b80c     58 00 00 FF 
0b810     E8 E4 85 F1 | 	sub	objptr, ##45288
0b814                 | LR__0991
0b814     00 25 56 F2 | 	cmps	local04, #256 wc
0b818     24 00 90 3D |  if_ae	jmp	#LR__0992
0b81c     12 21 02 F6 | 	mov	local02, local04
0b820     56 00 00 FF 
0b824     E8 E4 05 F1 | 	add	objptr, ##44264
0b828     F2 20 02 F1 | 	add	local02, objptr
0b82c     10 01 48 FC | 	wrbyte	#0, local02
0b830     01 24 06 F1 | 	add	local04, #1
0b834     56 00 00 FF 
0b838     E8 E4 85 F1 | 	sub	objptr, ##44264
0b83c     D4 FF 9F FD | 	jmp	#LR__0991
0b840                 | LR__0992
0b840                 | LR__0993
0b840     56 00 00 FF 
0b844     E8 E4 05 F1 | 	add	objptr, ##44264
0b848     F2 12 02 F6 | 	mov	arg01, objptr
0b84c     56 00 00 FF 
0b850     E8 E4 85 F1 | 	sub	objptr, ##44264
0b854     00 FB BF FD | 	call	#_csave_block
0b858     58 00 00 FF 
0b85c     E8 E4 05 F1 | 	add	objptr, ##45288
0b860     F2 00 68 FC | 	wrlong	#0, objptr
0b864     58 00 00 FF 
0b868     E8 E4 85 F1 | 	sub	objptr, ##45288
0b86c     2C 13 06 F6 | 	mov	arg01, #300
0b870     90 57 B1 FD | 	call	#__system___waitms
0b874                 | LR__0994
0b874     A7 F0 03 F6 | 	mov	ptra, fp
0b878     B2 00 A0 FD | 	call	#popregs_
0b87c                 | _csave_addtoblock_ret
0b87c     2D 00 64 FD | 	ret
0b880                 | 
0b880                 | ' 
0b880                 | ' sub test_csave
0b880                 | _test_csave
0b880     04 4A 05 F6 | 	mov	COUNT_, #4
0b884     A8 00 A0 FD | 	call	#pushregs_
0b888     C0 F0 07 F1 | 	add	ptra, #192
0b88c                 | ' 'dim fileheader,savestart, saveptr as ulong
0b88c                 | ' 
0b88c                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0b88c     4A 00 00 FF 
0b890     B4 E4 05 F1 | 	add	objptr, ##38068
0b894     F2 12 02 FB | 	rdlong	arg01, objptr
0b898     4A 00 00 FF 
0b89c     B4 E4 85 F1 | 	sub	objptr, ##38068
0b8a0     58 12 B1 FD | 	call	#_pslpeek
0b8a4     FF FF 7F FF 
0b8a8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0b8ac     0C 00 90 5D |  if_ne	jmp	#LR__1000
0b8b0     1B 12 06 F6 | 	mov	arg01, #27
0b8b4     B0 0F B1 FD | 	call	#_printerror
0b8b8     1C 03 90 FD | 	jmp	#LR__1014
0b8bc                 | LR__1000
0b8bc     04 F8 BF FD | 	call	#_pop
0b8c0     90 4E 05 F1 | 	add	fp, #144
0b8c4     A7 FA 61 FC | 	wrlong	result1, fp
0b8c8     04 4E 05 F1 | 	add	fp, #4
0b8cc     A7 FC 61 FC | 	wrlong	result2, fp
0b8d0     04 4E 05 F1 | 	add	fp, #4
0b8d4     A7 FE 61 FC | 	wrlong	result3, fp
0b8d8                 | ' t1=pop()
0b8d8                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0b8d8     98 4E 85 F1 | 	sub	fp, #152
0b8dc     1F FE 0D F2 | 	cmp	result3, #31 wz
0b8e0     24 00 90 AD |  if_e	jmp	#LR__1001
0b8e4     5A 00 00 FF 
0b8e8     0C E4 05 F1 | 	add	objptr, ##46092
0b8ec     F2 1C 02 FB | 	rdlong	arg06, objptr
0b8f0     5A 00 00 FF 
0b8f4     0C E4 85 F1 | 	sub	objptr, ##46092
0b8f8     8C 4E 05 F1 | 	add	fp, #140
0b8fc     A7 1C 62 FC | 	wrlong	arg06, fp
0b900     8C 4E 85 F1 | 	sub	fp, #140
0b904     14 00 90 FD | 	jmp	#LR__1002
0b908                 | LR__1001
0b908     90 4E 05 F1 | 	add	fp, #144
0b90c     A7 1C 02 FB | 	rdlong	arg06, fp
0b910     04 4E 85 F1 | 	sub	fp, #4
0b914     A7 1C 62 FC | 	wrlong	arg06, fp
0b918     8C 4E 85 F1 | 	sub	fp, #140
0b91c                 | LR__1002
0b91c                 | ' 
0b91c                 | ' ' prepare 1 kHz header wave
0b91c                 | ' 
0b91c                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0b91c     A7 00 68 FC | 	wrlong	#0, fp
0b920     97 34 48 FB | 	callpa	#(@LR__1006-@LR__1003)>>2,fcache_load_ptr_
0b924                 | LR__1003
0b924     A7 1C 02 FB | 	rdlong	arg06, fp
0b928     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0b92c     07 1A 06 F5 | 	and	arg05, #7
0b930     0D 1B 82 F6 | 	negc	arg05, arg05
0b934     04 1A 56 F2 | 	cmps	arg05, #4 wc
0b938     20 00 90 3D |  if_ae	jmp	#LR__1004
0b93c     A7 1A 02 FB | 	rdlong	arg05, fp
0b940     55 00 00 FF 
0b944     E8 E5 05 F1 | 	add	objptr, ##44008
0b948     F2 1A 02 F1 | 	add	arg05, objptr
0b94c     0D FF 48 FC | 	wrbyte	#127, arg05
0b950     55 00 00 FF 
0b954     E8 E5 85 F1 | 	sub	objptr, ##44008
0b958     1C 00 90 FD | 	jmp	#LR__1005
0b95c                 | LR__1004
0b95c     A7 1A 02 FB | 	rdlong	arg05, fp
0b960     55 00 00 FF 
0b964     E8 E5 05 F1 | 	add	objptr, ##44008
0b968     F2 1A 02 F1 | 	add	arg05, objptr
0b96c     0D 01 49 FC | 	wrbyte	#128, arg05
0b970     55 00 00 FF 
0b974     E8 E5 85 F1 | 	sub	objptr, ##44008
0b978                 | LR__1005
0b978     A7 1A 02 FB | 	rdlong	arg05, fp
0b97c     01 1A 06 F1 | 	add	arg05, #1
0b980     A7 1A 62 FC | 	wrlong	arg05, fp
0b984     00 1B 56 F2 | 	cmps	arg05, #256 wc
0b988     98 FF 9F CD |  if_b	jmp	#LR__1003
0b98c                 | LR__1006
0b98c     55 00 00 FF 
0b990     E8 E5 05 F1 | 	add	objptr, ##44008
0b994     F2 14 02 F6 | 	mov	arg02, objptr
0b998     07 12 06 F6 | 	mov	arg01, #7
0b99c     0F 00 00 FF 
0b9a0     40 17 06 F6 | 	mov	arg03, ##8000
0b9a4     0E 18 C6 F9 | 	decod	arg04, #14
0b9a8     00 1B 06 F6 | 	mov	arg05, #256
0b9ac     00 1C 06 F6 | 	mov	arg06, #0
0b9b0     4A 00 00 FF 
0b9b4     1C E5 85 F1 | 	sub	objptr, ##38172
0b9b8     B0 4F B1 FD | 	call	#_audio096_spin2_play8
0b9bc     0B 00 00 FF 
0b9c0     CC E4 85 F1 | 	sub	objptr, ##5836
0b9c4     05 00 00 FF 
0b9c8     B8 13 06 F6 | 	mov	arg01, ##3000
0b9cc     34 56 B1 FD | 	call	#__system___waitms
0b9d0     58 00 00 FF 
0b9d4     E8 E4 05 F1 | 	add	objptr, ##45288
0b9d8     F2 00 68 FC | 	wrlong	#0, objptr
0b9dc     58 00 00 FF 
0b9e0     E8 E4 85 F1 | 	sub	objptr, ##45288
0b9e4     72 12 06 F6 | 	mov	arg01, #114
0b9e8     00 14 06 F6 | 	mov	arg02, #0
0b9ec     4C FD BF FD | 	call	#_csave_addtoblock
0b9f0     62 12 06 F6 | 	mov	arg01, #98
0b9f4     00 14 06 F6 | 	mov	arg02, #0
0b9f8     40 FD BF FD | 	call	#_csave_addtoblock
0b9fc     61 12 06 F6 | 	mov	arg01, #97
0ba00     00 14 06 F6 | 	mov	arg02, #0
0ba04     34 FD BF FD | 	call	#_csave_addtoblock
0ba08     0D 12 06 F6 | 	mov	arg01, #13
0ba0c     00 14 06 F6 | 	mov	arg02, #0
0ba10     28 FD BF FD | 	call	#_csave_addtoblock
0ba14                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0ba14                 | ' waitms 3000 
0ba14                 | ' 
0ba14                 | ' blockptr=0
0ba14                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0ba14                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0ba14     A7 02 68 FC | 	wrlong	#1, fp
0ba18     8C 4E 05 F1 | 	add	fp, #140
0ba1c     A7 12 02 FB | 	rdlong	arg01, fp
0ba20     8C 4E 85 F1 | 	sub	fp, #140
0ba24     09 1F 02 F6 | 	mov	local01, arg01
0ba28     97 06 48 FB | 	callpa	#(@LR__1008-@LR__1007)>>2,fcache_load_ptr_
0ba2c                 | LR__1007
0ba2c     0F FB C9 FA | 	rdbyte	result1, local01 wz
0ba30     01 1E 06 51 |  if_ne	add	local01, #1
0ba34     F4 FF 9F 5D |  if_ne	jmp	#LR__1007
0ba38                 | LR__1008
0ba38     09 1F 82 F1 | 	sub	local01, arg01
0ba3c     0F 21 02 F6 | 	mov	local02, local01
0ba40     01 20 06 F1 | 	add	local02, #1
0ba44                 | LR__1009
0ba44     A7 1A 02 FB | 	rdlong	arg05, fp
0ba48     10 1B 52 F2 | 	cmps	arg05, local02 wc
0ba4c     34 00 90 3D |  if_ae	jmp	#LR__1010
0ba50     8C 4E 05 F1 | 	add	fp, #140
0ba54     A7 12 02 FB | 	rdlong	arg01, fp
0ba58     8C 4E 85 F1 | 	sub	fp, #140
0ba5c     A7 14 02 FB | 	rdlong	arg02, fp
0ba60     01 16 06 F6 | 	mov	arg03, #1
0ba64     3C 74 B1 FD | 	call	#__system__Mid_S
0ba68     FD 12 C2 FA | 	rdbyte	arg01, result1
0ba6c     00 14 06 F6 | 	mov	arg02, #0
0ba70     C8 FC BF FD | 	call	#_csave_addtoblock
0ba74     A7 1A 02 FB | 	rdlong	arg05, fp
0ba78     01 1A 06 F1 | 	add	arg05, #1
0ba7c     A7 1A 62 FC | 	wrlong	arg05, fp
0ba80     C0 FF 9F FD | 	jmp	#LR__1009
0ba84                 | LR__1010
0ba84     00 12 06 F6 | 	mov	arg01, #0
0ba88     00 14 06 F6 | 	mov	arg02, #0
0ba8c     AC FC BF FD | 	call	#_csave_addtoblock
0ba90     72 12 06 F6 | 	mov	arg01, #114
0ba94     00 14 06 F6 | 	mov	arg02, #0
0ba98     A0 FC BF FD | 	call	#_csave_addtoblock
0ba9c     62 12 06 F6 | 	mov	arg01, #98
0baa0     00 14 06 F6 | 	mov	arg02, #0
0baa4     94 FC BF FD | 	call	#_csave_addtoblock
0baa8     73 12 06 F6 | 	mov	arg01, #115
0baac     00 14 06 F6 | 	mov	arg02, #0
0bab0     88 FC BF FD | 	call	#_csave_addtoblock
0bab4     0D 12 06 F6 | 	mov	arg01, #13
0bab8     00 14 06 F6 | 	mov	arg02, #0
0babc     7C FC BF FD | 	call	#_csave_addtoblock
0bac0     4A 00 00 FF 
0bac4     B4 E4 05 F1 | 	add	objptr, ##38068
0bac8     F2 22 02 FB | 	rdlong	local03, objptr
0bacc     4A 00 00 FF 
0bad0     B4 E4 85 F1 | 	sub	objptr, ##38068
0bad4     9C 4E 05 F1 | 	add	fp, #156
0bad8     A7 22 62 FC | 	wrlong	local03, fp
0badc     9C 4E 85 F1 | 	sub	fp, #156
0bae0                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0bae0                 | ' 
0bae0                 | ' saveptr=programstart
0bae0                 | ' do
0bae0                 | LR__1011
0bae0     A0 4E 05 F1 | 	add	fp, #160
0bae4     A7 12 02 F6 | 	mov	arg01, fp
0bae8     04 4E 85 F1 | 	sub	fp, #4
0baec     A7 14 02 FB | 	rdlong	arg02, fp
0baf0     9C 4E 85 F1 | 	sub	fp, #156
0baf4     18 16 06 F6 | 	mov	arg03, #24
0baf8     0B 00 00 FF 
0bafc     CC E4 05 F1 | 	add	objptr, ##5836
0bb00     CC 45 B1 FD | 	call	#_psram_spin2_read1
0bb04     0C 4E 05 F1 | 	add	fp, #12
0bb08     A7 12 02 F6 | 	mov	arg01, fp
0bb0c     9C 4E 05 F1 | 	add	fp, #156
0bb10     A7 14 02 FB | 	rdlong	arg02, fp
0bb14     04 4E 05 F1 | 	add	fp, #4
0bb18     A7 16 02 FB | 	rdlong	arg03, fp
0bb1c     AC 4E 85 F1 | 	sub	fp, #172
0bb20     AC 45 B1 FD | 	call	#_psram_spin2_read1
0bb24     0B 00 00 FF 
0bb28     CC E4 85 F1 | 	sub	objptr, ##5836
0bb2c     AC 4E 05 F1 | 	add	fp, #172
0bb30     A7 12 02 FB | 	rdlong	arg01, fp
0bb34     AC 4E 85 F1 | 	sub	fp, #172
0bb38     00 14 06 F6 | 	mov	arg02, #0
0bb3c     FC FB BF FD | 	call	#_csave_addtoblock
0bb40                 | ' 
0bb40                 | '   psram.read1(varptr(header(0)),saveptr,24)
0bb40                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0bb40                 | '   csave_addtoblock(header(3),0) ' that's always <255
0bb40                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)  :next i
0bb40     A7 00 68 FC | 	wrlong	#0, fp
0bb44     AC 4E 05 F1 | 	add	fp, #172
0bb48     A7 24 02 FB | 	rdlong	local04, fp
0bb4c     AC 4E 85 F1 | 	sub	fp, #172
0bb50                 | LR__1012
0bb50     A7 22 02 FB | 	rdlong	local03, fp
0bb54     12 23 52 F2 | 	cmps	local03, local04 wc
0bb58     2C 00 90 3D |  if_ae	jmp	#LR__1013
0bb5c     A7 22 02 FB | 	rdlong	local03, fp
0bb60     0C 4E 05 F1 | 	add	fp, #12
0bb64     A7 22 02 F1 | 	add	local03, fp
0bb68     11 13 C2 FA | 	rdbyte	arg01, local03
0bb6c     00 14 06 F6 | 	mov	arg02, #0
0bb70     0C 4E 85 F1 | 	sub	fp, #12
0bb74     C4 FB BF FD | 	call	#_csave_addtoblock
0bb78     A7 22 02 FB | 	rdlong	local03, fp
0bb7c     01 22 06 F1 | 	add	local03, #1
0bb80     A7 22 62 FC | 	wrlong	local03, fp
0bb84     C8 FF 9F FD | 	jmp	#LR__1012
0bb88                 | LR__1013
0bb88     B4 4E 05 F1 | 	add	fp, #180
0bb8c     A7 22 02 FB | 	rdlong	local03, fp
0bb90     18 4E 85 F1 | 	sub	fp, #24
0bb94     A7 22 62 FC | 	wrlong	local03, fp
0bb98     18 4E 05 F1 | 	add	fp, #24
0bb9c     A7 22 02 FB | 	rdlong	local03, fp
0bba0     B4 4E 85 F1 | 	sub	fp, #180
0bba4     FF FF 3F FF 
0bba8     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0bbac     30 FF 9F 5D |  if_ne	jmp	#LR__1011
0bbb0     00 12 06 F6 | 	mov	arg01, #0
0bbb4     01 14 06 F6 | 	mov	arg02, #1
0bbb8     80 FB BF FD | 	call	#_csave_addtoblock
0bbbc     37 00 00 FF 
0bbc0     40 E4 05 F1 | 	add	objptr, ##28224
0bbc4     F2 12 02 FB | 	rdlong	arg01, objptr
0bbc8     37 00 00 FF 
0bbcc     40 E4 85 F1 | 	sub	objptr, ##28224
0bbd0     D4 13 06 F1 | 	add	arg01, #468
0bbd4     09 01 58 FC | 	wrword	#0, arg01
0bbd8                 | LR__1014
0bbd8     A7 F0 03 F6 | 	mov	ptra, fp
0bbdc     B2 00 A0 FD | 	call	#popregs_
0bbe0                 | _test_csave_ret
0bbe0     2D 00 64 FD | 	ret
0bbe4                 | 
0bbe4                 | ' 
0bbe4                 | ' ' ----------------- Save the program
0bbe4                 | ' 
0bbe4                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0bbe4                 | _do_save
0bbe4     04 4A 05 F6 | 	mov	COUNT_, #4
0bbe8     A8 00 A0 FD | 	call	#pushregs_
0bbec     01 00 00 FF 
0bbf0     C0 F0 07 F1 | 	add	ptra, ##704
0bbf4     4A 00 00 FF 
0bbf8     B0 E4 05 F1 | 	add	objptr, ##38064
0bbfc     F2 1E 02 FB | 	rdlong	local01, objptr
0bc00     0F 21 02 F6 | 	mov	local02, local01
0bc04     01 20 66 F0 | 	shl	local02, #1
0bc08     0F 21 02 F1 | 	add	local02, local01
0bc0c     02 20 66 F0 | 	shl	local02, #2
0bc10     03 00 00 FF 
0bc14     04 E4 85 F1 | 	sub	objptr, ##1540
0bc18     F2 20 02 F1 | 	add	local02, objptr
0bc1c     10 23 02 FB | 	rdlong	local03, local02
0bc20     01 00 00 FF 
0bc24     10 4E 05 F1 | 	add	fp, ##528
0bc28     A7 22 62 FC | 	wrlong	local03, fp
0bc2c                 | ' 
0bc2c                 | ' numpar=compiledline(lineptr_e).result.uresult
0bc2c                 | ' 
0bc2c                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0bc2c     01 00 00 FF 
0bc30     10 4E 85 F1 | 	sub	fp, ##528
0bc34     01 22 56 F2 | 	cmps	local03, #1 wc
0bc38     47 00 00 FF 
0bc3c     AC E4 85 F1 | 	sub	objptr, ##36524
0bc40     20 00 90 CD |  if_b	jmp	#LR__1020
0bc44     7C F4 BF FD | 	call	#_pop
0bc48     A7 FA 61 FC | 	wrlong	result1, fp
0bc4c     04 4E 05 F1 | 	add	fp, #4
0bc50     A7 FC 61 FC | 	wrlong	result2, fp
0bc54     04 4E 05 F1 | 	add	fp, #4
0bc58     A7 FE 61 FC | 	wrlong	result3, fp
0bc5c     08 4E 85 F1 | 	sub	fp, #8
0bc60     24 00 90 FD | 	jmp	#LR__1021
0bc64                 | LR__1020
0bc64     5A 00 00 FF 
0bc68     0C E4 05 F1 | 	add	objptr, ##46092
0bc6c     F2 22 02 FB | 	rdlong	local03, objptr
0bc70     5A 00 00 FF 
0bc74     0C E4 85 F1 | 	sub	objptr, ##46092
0bc78     A7 22 62 FC | 	wrlong	local03, fp
0bc7c     08 4E 05 F1 | 	add	fp, #8
0bc80     A7 3E 68 FC | 	wrlong	#31, fp
0bc84     08 4E 85 F1 | 	sub	fp, #8
0bc88                 | LR__1021
0bc88                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0bc88     4A 00 00 FF 
0bc8c     B4 E4 05 F1 | 	add	objptr, ##38068
0bc90     F2 12 02 FB | 	rdlong	arg01, objptr
0bc94     4A 00 00 FF 
0bc98     B4 E4 85 F1 | 	sub	objptr, ##38068
0bc9c     5C 0E B1 FD | 	call	#_pslpeek
0bca0     FF FF 7F FF 
0bca4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0bca8     0C 00 90 5D |  if_ne	jmp	#LR__1022
0bcac     1B 12 06 F6 | 	mov	arg01, #27
0bcb0     B4 0B B1 FD | 	call	#_printerror
0bcb4     1C 03 90 FD | 	jmp	#LR__1028
0bcb8                 | LR__1022
0bcb8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0bcb8     08 4E 05 F1 | 	add	fp, #8
0bcbc     A7 22 02 FB | 	rdlong	local03, fp
0bcc0     08 4E 85 F1 | 	sub	fp, #8
0bcc4     2B 22 0E F2 | 	cmp	local03, #43 wz
0bcc8     18 00 90 5D |  if_ne	jmp	#LR__1023
0bccc     A7 12 02 FB | 	rdlong	arg01, fp
0bcd0     9C 4C B0 FD | 	call	#_convertstring
0bcd4     A7 FA 61 FC | 	wrlong	result1, fp
0bcd8     08 4E 05 F1 | 	add	fp, #8
0bcdc     A7 3E 68 FC | 	wrlong	#31, fp
0bce0     08 4E 85 F1 | 	sub	fp, #8
0bce4                 | LR__1023
0bce4                 | ' if t1.result_type=result_string then
0bce4     08 4E 05 F1 | 	add	fp, #8
0bce8     A7 22 02 FB | 	rdlong	local03, fp
0bcec     08 4E 85 F1 | 	sub	fp, #8
0bcf0     1F 22 0E F2 | 	cmp	local03, #31 wz
0bcf4     DC 02 90 5D |  if_ne	jmp	#LR__1027
0bcf8                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0bcf8     A7 12 02 FB | 	rdlong	arg01, fp
0bcfc     85 01 00 FF 
0bd00     F8 15 06 F6 | 	mov	arg02, ##@LR__5362
0bd04     30 50 B1 FD | 	call	#__system___string_cmp
0bd08     00 FA 0D F2 | 	cmp	result1, #0 wz
0bd0c     5A 00 00 AF 
0bd10     0C E4 05 A1 |  if_e	add	objptr, ##46092
0bd14     F2 22 02 AB |  if_e	rdlong	local03, objptr
0bd18     A7 22 62 AC |  if_e	wrlong	local03, fp
0bd1c     5A 00 00 AF 
0bd20     0C E4 85 A1 |  if_e	sub	objptr, ##46092
0bd24     A7 22 02 5B |  if_ne	rdlong	local03, fp
0bd28     5A 00 00 5F 
0bd2c     0C E4 05 51 |  if_ne	add	objptr, ##46092
0bd30     F2 22 62 5C |  if_ne	wrlong	local03, objptr
0bd34     5A 00 00 5F 
0bd38     0C E4 85 51 |  if_ne	sub	objptr, ##46092
0bd3c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0bd3c     09 12 06 F6 | 	mov	arg01, #9
0bd40     3C A0 B1 FD | 	call	#__system__close
0bd44     09 22 06 F6 | 	mov	local03, #9
0bd48     52 00 00 FF 
0bd4c     C8 E4 05 F1 | 	add	objptr, ##42184
0bd50     F2 12 02 FB | 	rdlong	arg01, objptr
0bd54     52 00 00 FF 
0bd58     C8 E4 85 F1 | 	sub	objptr, ##42184
0bd5c     85 01 00 FF 
0bd60     F9 15 06 F6 | 	mov	arg02, ##@LR__5363
0bd64     04 50 B1 FD | 	call	#__system___string_concat
0bd68     FD 12 02 F6 | 	mov	arg01, result1
0bd6c     A7 14 02 FB | 	rdlong	arg02, fp
0bd70     F8 4F B1 FD | 	call	#__system___string_concat
0bd74     FD 14 02 F6 | 	mov	arg02, result1
0bd78     11 13 02 F6 | 	mov	arg01, local03
0bd7c     0D 16 06 F6 | 	mov	arg03, #13
0bd80     90 5B B1 FD | 	call	#__system___basic_open_string
0bd84     01 00 00 FF 
0bd88     0C 4E 05 F1 | 	add	fp, ##524
0bd8c     A7 0A 68 FC | 	wrlong	#5, fp
0bd90     4A 00 00 FF 
0bd94     B4 E4 05 F1 | 	add	objptr, ##38068
0bd98     F2 22 02 FB | 	rdlong	local03, objptr
0bd9c     4A 00 00 FF 
0bda0     B4 E4 85 F1 | 	sub	objptr, ##38068
0bda4     10 4E 05 F1 | 	add	fp, #16
0bda8     A7 22 62 FC | 	wrlong	local03, fp
0bdac     01 00 00 FF 
0bdb0     1C 4E 85 F1 | 	sub	fp, ##540
0bdb4                 | ' '  put #9,1,fileheader,1
0bdb4                 | '   i=5
0bdb4                 | '   saveptr=programstart
0bdb4                 | '   do
0bdb4                 | LR__1024
0bdb4     01 00 00 FF 
0bdb8     20 4E 05 F1 | 	add	fp, ##544
0bdbc     A7 12 02 F6 | 	mov	arg01, fp
0bdc0     04 4E 85 F1 | 	sub	fp, #4
0bdc4     A7 14 02 FB | 	rdlong	arg02, fp
0bdc8     01 00 00 FF 
0bdcc     1C 4E 85 F1 | 	sub	fp, ##540
0bdd0     18 16 06 F6 | 	mov	arg03, #24
0bdd4     0B 00 00 FF 
0bdd8     CC E4 05 F1 | 	add	objptr, ##5836
0bddc     F0 42 B1 FD | 	call	#_psram_spin2_read1
0bde0     01 00 00 FF 
0bde4     38 4E 05 F1 | 	add	fp, ##568
0bde8     A7 12 02 F6 | 	mov	arg01, fp
0bdec     10 4E 85 F1 | 	sub	fp, #16
0bdf0     A7 14 02 FB | 	rdlong	arg02, fp
0bdf4     04 4E 05 F1 | 	add	fp, #4
0bdf8     A7 16 02 FB | 	rdlong	arg03, fp
0bdfc     01 00 00 FF 
0be00     2C 4E 85 F1 | 	sub	fp, ##556
0be04     C8 42 B1 FD | 	call	#_psram_spin2_read1
0be08     0B 00 00 FF 
0be0c     CC E4 85 F1 | 	sub	objptr, ##5836
0be10     85 01 00 FF 
0be14     FB 23 06 F6 | 	mov	local03, ##@LR__5364
0be18     01 00 00 FF 
0be1c     B8 4E 05 F1 | 	add	fp, ##696
0be20     A7 22 62 FC | 	wrlong	local03, fp
0be24                 | '     psram.read1(varptr(header(0)),saveptr,24)
0be24                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0be24                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0be24     AC 4E 85 F1 | 	sub	fp, #172
0be28     A7 02 68 FC | 	wrlong	#1, fp
0be2c     20 4E 05 F1 | 	add	fp, #32
0be30     A7 24 02 FB | 	rdlong	local04, fp
0be34     01 00 00 FF 
0be38     2C 4E 85 F1 | 	sub	fp, ##556
0be3c     01 24 06 F1 | 	add	local04, #1
0be40                 | LR__1025
0be40     01 00 00 FF 
0be44     0C 4E 05 F1 | 	add	fp, ##524
0be48     A7 22 02 FB | 	rdlong	local03, fp
0be4c     01 00 00 FF 
0be50     0C 4E 85 F1 | 	sub	fp, ##524
0be54     12 23 52 F2 | 	cmps	local03, local04 wc
0be58     64 00 90 3D |  if_ae	jmp	#LR__1026
0be5c     01 00 00 FF 
0be60     B8 4E 05 F1 | 	add	fp, ##696
0be64     A7 1E 02 FB | 	rdlong	local01, fp
0be68     AC 4E 85 F1 | 	sub	fp, #172
0be6c     A7 22 02 FB | 	rdlong	local03, fp
0be70     01 22 86 F1 | 	sub	local03, #1
0be74     2C 4E 05 F1 | 	add	fp, #44
0be78     A7 22 02 F1 | 	add	local03, fp
0be7c     11 13 C2 FA | 	rdbyte	arg01, local03
0be80     01 00 00 FF 
0be84     38 4E 85 F1 | 	sub	fp, ##568
0be88     C4 70 B1 FD | 	call	#__system__Chr_S
0be8c     FD 14 02 F6 | 	mov	arg02, result1
0be90     0F 13 02 F6 | 	mov	arg01, local01
0be94     D4 4E B1 FD | 	call	#__system___string_concat
0be98     01 00 00 FF 
0be9c     B8 4E 05 F1 | 	add	fp, ##696
0bea0     A7 FA 61 FC | 	wrlong	result1, fp
0bea4     AC 4E 85 F1 | 	sub	fp, #172
0bea8     A7 22 02 FB | 	rdlong	local03, fp
0beac     01 22 06 F1 | 	add	local03, #1
0beb0     A7 22 62 FC | 	wrlong	local03, fp
0beb4     01 00 00 FF 
0beb8     0C 4E 85 F1 | 	sub	fp, ##524
0bebc     80 FF 9F FD | 	jmp	#LR__1025
0bec0                 | LR__1026
0bec0                 | '  '   put #9,i,header(3),1 : i+=4
0bec0                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0bec0                 | '      print #9, saveline$
0bec0     09 12 06 F6 | 	mov	arg01, #9
0bec4     88 A8 B1 FD | 	call	#__system___getiolock_0540
0bec8     FD 12 02 F6 | 	mov	arg01, result1
0becc     40 4E B1 FD | 	call	#__system___lockmem
0bed0     01 00 00 FF 
0bed4     B8 4E 05 F1 | 	add	fp, ##696
0bed8     A7 14 02 FB | 	rdlong	arg02, fp
0bedc     01 00 00 FF 
0bee0     B8 4E 85 F1 | 	sub	fp, ##696
0bee4     09 12 06 F6 | 	mov	arg01, #9
0bee8     00 16 06 F6 | 	mov	arg03, #0
0beec     14 5B B1 FD | 	call	#__system___basic_print_string
0bef0     09 12 06 F6 | 	mov	arg01, #9
0bef4     0A 14 06 F6 | 	mov	arg02, #10
0bef8     00 16 06 F6 | 	mov	arg03, #0
0befc     AC 5A B1 FD | 	call	#__system___basic_print_char
0bf00     09 12 06 F6 | 	mov	arg01, #9
0bf04     48 A8 B1 FD | 	call	#__system___getiolock_0540
0bf08     FD 00 68 FC | 	wrlong	#0, result1
0bf0c     01 00 00 FF 
0bf10     34 4E 05 F1 | 	add	fp, ##564
0bf14     A7 22 02 FB | 	rdlong	local03, fp
0bf18     18 4E 85 F1 | 	sub	fp, #24
0bf1c     A7 22 62 FC | 	wrlong	local03, fp
0bf20     18 4E 05 F1 | 	add	fp, #24
0bf24     A7 22 02 FB | 	rdlong	local03, fp
0bf28     01 00 00 FF 
0bf2c     34 4E 85 F1 | 	sub	fp, ##564
0bf30     FF FF 3F FF 
0bf34     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0bf38     78 FE 9F 5D |  if_ne	jmp	#LR__1024
0bf3c                 | '   close #9  
0bf3c     09 12 06 F6 | 	mov	arg01, #9
0bf40     3C 9E B1 FD | 	call	#__system__close
0bf44                 | '   print "Saved as ";currentdir$+"/"+loadname
0bf44     00 12 06 F6 | 	mov	arg01, #0
0bf48     04 A8 B1 FD | 	call	#__system___getiolock_0540
0bf4c     FD 12 02 F6 | 	mov	arg01, result1
0bf50     BC 4D B1 FD | 	call	#__system___lockmem
0bf54     85 01 00 FF 
0bf58     FC 15 06 F6 | 	mov	arg02, ##@LR__5365
0bf5c     00 12 06 F6 | 	mov	arg01, #0
0bf60     00 16 06 F6 | 	mov	arg03, #0
0bf64     9C 5A B1 FD | 	call	#__system___basic_print_string
0bf68     00 20 06 F6 | 	mov	local02, #0
0bf6c     52 00 00 FF 
0bf70     C8 E4 05 F1 | 	add	objptr, ##42184
0bf74     F2 12 02 FB | 	rdlong	arg01, objptr
0bf78     52 00 00 FF 
0bf7c     C8 E4 85 F1 | 	sub	objptr, ##42184
0bf80     86 01 00 FF 
0bf84     06 14 06 F6 | 	mov	arg02, ##@LR__5366
0bf88     E0 4D B1 FD | 	call	#__system___string_concat
0bf8c     FD 12 02 F6 | 	mov	arg01, result1
0bf90     5A 00 00 FF 
0bf94     0C E4 05 F1 | 	add	objptr, ##46092
0bf98     F2 14 02 FB | 	rdlong	arg02, objptr
0bf9c     5A 00 00 FF 
0bfa0     0C E4 85 F1 | 	sub	objptr, ##46092
0bfa4     C4 4D B1 FD | 	call	#__system___string_concat
0bfa8     FD 14 02 F6 | 	mov	arg02, result1
0bfac     10 13 02 F6 | 	mov	arg01, local02
0bfb0     00 16 06 F6 | 	mov	arg03, #0
0bfb4     4C 5A B1 FD | 	call	#__system___basic_print_string
0bfb8     00 12 06 F6 | 	mov	arg01, #0
0bfbc     0A 14 06 F6 | 	mov	arg02, #10
0bfc0     00 16 06 F6 | 	mov	arg03, #0
0bfc4     E4 59 B1 FD | 	call	#__system___basic_print_char
0bfc8     00 12 06 F6 | 	mov	arg01, #0
0bfcc     80 A7 B1 FD | 	call	#__system___getiolock_0540
0bfd0     FD 00 68 FC | 	wrlong	#0, result1
0bfd4                 | LR__1027
0bfd4                 | LR__1028
0bfd4     A7 F0 03 F6 | 	mov	ptra, fp
0bfd8     B2 00 A0 FD | 	call	#popregs_
0bfdc                 | _do_save_ret
0bfdc     2D 00 64 FD | 	ret
0bfe0                 | 
0bfe0                 | ' 
0bfe0                 | ' '----------------- Load the program
0bfe0                 | ' 'lo todo: errors while loading
0bfe0                 | ' 
0bfe0                 | ' sub do_enter
0bfe0                 | _do_enter
0bfe0     01 12 06 F6 | 	mov	arg01, #1
0bfe4     04 00 B0 FD | 	call	#_do_load
0bfe8                 | _do_enter_ret
0bfe8     2D 00 64 FD | 	ret
0bfec                 | 
0bfec                 | ' 
0bfec                 | ' 
0bfec                 | ' sub do_load(mode=0)
0bfec                 | _do_load
0bfec     01 4A 05 F6 | 	mov	COUNT_, #1
0bff0     A8 00 A0 FD | 	call	#pushregs_
0bff4     AC F0 07 F1 | 	add	ptra, #172
0bff8     A7 12 62 FC | 	wrlong	arg01, fp
0bffc     4A 00 00 FF 
0c000     B0 E4 05 F1 | 	add	objptr, ##38064
0c004     F2 14 02 FB | 	rdlong	arg02, objptr
0c008     0A 13 02 F6 | 	mov	arg01, arg02
0c00c     01 12 66 F0 | 	shl	arg01, #1
0c010     0A 13 02 F1 | 	add	arg01, arg02
0c014     02 12 66 F0 | 	shl	arg01, #2
0c018     03 00 00 FF 
0c01c     04 E4 85 F1 | 	sub	objptr, ##1540
0c020     F2 12 02 F1 | 	add	arg01, objptr
0c024     09 15 02 FB | 	rdlong	arg02, arg01
0c028     1C 4E 05 F1 | 	add	fp, #28
0c02c     A7 14 62 FC | 	wrlong	arg02, fp
0c030     8C 4E 05 F1 | 	add	fp, #140
0c034     A7 12 02 F6 | 	mov	arg01, fp
0c038     47 00 00 FF 
0c03c     AC E4 85 F1 | 	sub	objptr, ##36524
0c040     80 4E 85 F1 | 	sub	fp, #128
0c044     09 4F 61 FC | 	wrlong	fp, arg01
0c048                 | ' numpar=compiledline(lineptr_e).result.uresult
0c048                 | ' lpoke varptr(line2$),varptr(line2)
0c048                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0c048     0C 4E 85 F1 | 	sub	fp, #12
0c04c     A7 1E 02 FB | 	rdlong	local01, fp
0c050     1C 4E 85 F1 | 	sub	fp, #28
0c054     01 1E 56 F2 | 	cmps	local01, #1 wc
0c058     24 00 90 CD |  if_b	jmp	#LR__1030
0c05c     64 F0 BF FD | 	call	#_pop
0c060     04 4E 05 F1 | 	add	fp, #4
0c064     A7 FA 61 FC | 	wrlong	result1, fp
0c068     04 4E 05 F1 | 	add	fp, #4
0c06c     A7 FC 61 FC | 	wrlong	result2, fp
0c070     04 4E 05 F1 | 	add	fp, #4
0c074     A7 FE 61 FC | 	wrlong	result3, fp
0c078     0C 4E 85 F1 | 	sub	fp, #12
0c07c     28 00 90 FD | 	jmp	#LR__1031
0c080                 | LR__1030
0c080     5A 00 00 FF 
0c084     0C E4 05 F1 | 	add	objptr, ##46092
0c088     F2 1E 02 FB | 	rdlong	local01, objptr
0c08c     5A 00 00 FF 
0c090     0C E4 85 F1 | 	sub	objptr, ##46092
0c094     04 4E 05 F1 | 	add	fp, #4
0c098     A7 1E 62 FC | 	wrlong	local01, fp
0c09c     08 4E 05 F1 | 	add	fp, #8
0c0a0     A7 3E 68 FC | 	wrlong	#31, fp
0c0a4     0C 4E 85 F1 | 	sub	fp, #12
0c0a8                 | LR__1031
0c0a8                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0c0a8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0c0a8     0C 4E 05 F1 | 	add	fp, #12
0c0ac     A7 1E 02 FB | 	rdlong	local01, fp
0c0b0     0C 4E 85 F1 | 	sub	fp, #12
0c0b4     2B 1E 0E F2 | 	cmp	local01, #43 wz
0c0b8     24 00 90 5D |  if_ne	jmp	#LR__1032
0c0bc     04 4E 05 F1 | 	add	fp, #4
0c0c0     A7 12 02 FB | 	rdlong	arg01, fp
0c0c4     04 4E 85 F1 | 	sub	fp, #4
0c0c8     A4 48 B0 FD | 	call	#_convertstring
0c0cc     04 4E 05 F1 | 	add	fp, #4
0c0d0     A7 FA 61 FC | 	wrlong	result1, fp
0c0d4     08 4E 05 F1 | 	add	fp, #8
0c0d8     A7 3E 68 FC | 	wrlong	#31, fp
0c0dc     0C 4E 85 F1 | 	sub	fp, #12
0c0e0                 | LR__1032
0c0e0                 | ' if t1.result_type=result_string then
0c0e0     0C 4E 05 F1 | 	add	fp, #12
0c0e4     A7 1E 02 FB | 	rdlong	local01, fp
0c0e8     0C 4E 85 F1 | 	sub	fp, #12
0c0ec     1F 1E 0E F2 | 	cmp	local01, #31 wz
0c0f0     D8 02 90 5D |  if_ne	jmp	#LR__1038
0c0f4                 | '   if mode=0 then do_new
0c0f4     A7 1E 0A FB | 	rdlong	local01, fp wz
0c0f8     68 32 B0 AD |  if_e	call	#_do_new
0c0fc                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0c0fc     04 4E 05 F1 | 	add	fp, #4
0c100     A7 12 02 FB | 	rdlong	arg01, fp
0c104     04 4E 85 F1 | 	sub	fp, #4
0c108     86 01 00 FF 
0c10c     08 14 06 F6 | 	mov	arg02, ##@LR__5367
0c110     24 4C B1 FD | 	call	#__system___string_cmp
0c114     00 FA 0D F2 | 	cmp	result1, #0 wz
0c118     24 00 90 5D |  if_ne	jmp	#LR__1033
0c11c     5A 00 00 FF 
0c120     0C E4 05 F1 | 	add	objptr, ##46092
0c124     F2 1E 02 FB | 	rdlong	local01, objptr
0c128     5A 00 00 FF 
0c12c     0C E4 85 F1 | 	sub	objptr, ##46092
0c130     04 4E 05 F1 | 	add	fp, #4
0c134     A7 1E 62 FC | 	wrlong	local01, fp
0c138     04 4E 85 F1 | 	sub	fp, #4
0c13c     20 00 90 FD | 	jmp	#LR__1034
0c140                 | LR__1033
0c140     04 4E 05 F1 | 	add	fp, #4
0c144     A7 1E 02 FB | 	rdlong	local01, fp
0c148     04 4E 85 F1 | 	sub	fp, #4
0c14c     5A 00 00 FF 
0c150     0C E4 05 F1 | 	add	objptr, ##46092
0c154     F2 1E 62 FC | 	wrlong	local01, objptr
0c158     5A 00 00 FF 
0c15c     0C E4 85 F1 | 	sub	objptr, ##46092
0c160                 | LR__1034
0c160                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0c160     09 12 06 F6 | 	mov	arg01, #9
0c164     18 9C B1 FD | 	call	#__system__close
0c168     09 1E 06 F6 | 	mov	local01, #9
0c16c     52 00 00 FF 
0c170     C8 E4 05 F1 | 	add	objptr, ##42184
0c174     F2 12 02 FB | 	rdlong	arg01, objptr
0c178     52 00 00 FF 
0c17c     C8 E4 85 F1 | 	sub	objptr, ##42184
0c180     86 01 00 FF 
0c184     09 14 06 F6 | 	mov	arg02, ##@LR__5368
0c188     E0 4B B1 FD | 	call	#__system___string_concat
0c18c     FD 12 02 F6 | 	mov	arg01, result1
0c190     04 4E 05 F1 | 	add	fp, #4
0c194     A7 14 02 FB | 	rdlong	arg02, fp
0c198     04 4E 85 F1 | 	sub	fp, #4
0c19c     CC 4B B1 FD | 	call	#__system___string_concat
0c1a0     FD 14 02 F6 | 	mov	arg02, result1
0c1a4     0F 13 02 F6 | 	mov	arg01, local01
0c1a8     00 16 06 F6 | 	mov	arg03, #0
0c1ac     64 57 B1 FD | 	call	#__system___basic_open_string
0c1b0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0c1b4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0c1b8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0c1bc     14 4E 05 F1 | 	add	fp, #20
0c1c0     A7 FA 61 FC | 	wrlong	result1, fp
0c1c4                 | '   r=geterr() 
0c1c4                 | '   if r then 
0c1c4     14 4E 85 F1 | 	sub	fp, #20
0c1c8     50 01 90 AD |  if_e	jmp	#LR__1036
0c1cc                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
0c1cc     09 12 06 F6 | 	mov	arg01, #9
0c1d0     AC 9B B1 FD | 	call	#__system__close
0c1d4     09 1E 06 F6 | 	mov	local01, #9
0c1d8     52 00 00 FF 
0c1dc     C8 E4 05 F1 | 	add	objptr, ##42184
0c1e0     F2 12 02 FB | 	rdlong	arg01, objptr
0c1e4     52 00 00 FF 
0c1e8     C8 E4 85 F1 | 	sub	objptr, ##42184
0c1ec     86 01 00 FF 
0c1f0     0B 14 06 F6 | 	mov	arg02, ##@LR__5369
0c1f4     74 4B B1 FD | 	call	#__system___string_concat
0c1f8     FD 12 02 F6 | 	mov	arg01, result1
0c1fc     04 4E 05 F1 | 	add	fp, #4
0c200     A7 14 02 FB | 	rdlong	arg02, fp
0c204     04 4E 85 F1 | 	sub	fp, #4
0c208     60 4B B1 FD | 	call	#__system___string_concat
0c20c     FD 12 02 F6 | 	mov	arg01, result1
0c210     86 01 00 FF 
0c214     0D 14 06 F6 | 	mov	arg02, ##@LR__5370
0c218     50 4B B1 FD | 	call	#__system___string_concat
0c21c     FD 14 02 F6 | 	mov	arg02, result1
0c220     0F 13 02 F6 | 	mov	arg01, local01
0c224     00 16 06 F6 | 	mov	arg03, #0
0c228     E8 56 B1 FD | 	call	#__system___basic_open_string
0c22c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0c230     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0c234     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0c238     14 4E 05 F1 | 	add	fp, #20
0c23c     A7 FA 61 FC | 	wrlong	result1, fp
0c240                 | '     r=geterr() 
0c240                 | '     if r then 
0c240     14 4E 85 F1 | 	sub	fp, #20
0c244     A0 00 90 AD |  if_e	jmp	#LR__1035
0c248                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
0c248     00 12 06 F6 | 	mov	arg01, #0
0c24c     00 A5 B1 FD | 	call	#__system___getiolock_0540
0c250     FD 12 02 F6 | 	mov	arg01, result1
0c254     B8 4A B1 FD | 	call	#__system___lockmem
0c258     86 01 00 FF 
0c25c     12 14 06 F6 | 	mov	arg02, ##@LR__5371
0c260     00 12 06 F6 | 	mov	arg01, #0
0c264     00 16 06 F6 | 	mov	arg03, #0
0c268     98 57 B1 FD | 	call	#__system___basic_print_string
0c26c     14 4E 05 F1 | 	add	fp, #20
0c270     A7 14 02 FB | 	rdlong	arg02, fp
0c274     14 4E 85 F1 | 	sub	fp, #20
0c278     00 12 06 F6 | 	mov	arg01, #0
0c27c     00 16 06 F6 | 	mov	arg03, #0
0c280     0A 18 06 F6 | 	mov	arg04, #10
0c284     C0 57 B1 FD | 	call	#__system___basic_print_integer
0c288     86 01 00 FF 
0c28c     20 14 06 F6 | 	mov	arg02, ##@LR__5372
0c290     00 12 06 F6 | 	mov	arg01, #0
0c294     00 16 06 F6 | 	mov	arg03, #0
0c298     68 57 B1 FD | 	call	#__system___basic_print_string
0c29c     00 1E 06 F6 | 	mov	local01, #0
0c2a0     14 4E 05 F1 | 	add	fp, #20
0c2a4     A7 12 02 FB | 	rdlong	arg01, fp
0c2a8     14 4E 85 F1 | 	sub	fp, #20
0c2ac     28 71 B1 FD | 	call	#__system___strerror
0c2b0     FD 14 02 F6 | 	mov	arg02, result1
0c2b4     0F 13 02 F6 | 	mov	arg01, local01
0c2b8     00 16 06 F6 | 	mov	arg03, #0
0c2bc     44 57 B1 FD | 	call	#__system___basic_print_string
0c2c0     00 12 06 F6 | 	mov	arg01, #0
0c2c4     0A 14 06 F6 | 	mov	arg02, #10
0c2c8     00 16 06 F6 | 	mov	arg03, #0
0c2cc     DC 56 B1 FD | 	call	#__system___basic_print_char
0c2d0     00 12 06 F6 | 	mov	arg01, #0
0c2d4     78 A4 B1 FD | 	call	#__system___getiolock_0540
0c2d8     FD 00 68 FC | 	wrlong	#0, result1
0c2dc     09 12 06 F6 | 	mov	arg01, #9
0c2e0     9C 9A B1 FD | 	call	#__system__close
0c2e4     7C 01 90 FD | 	jmp	#LR__1040
0c2e8                 | LR__1035
0c2e8     5A 00 00 FF 
0c2ec     0C E4 05 F1 | 	add	objptr, ##46092
0c2f0     F2 12 02 FB | 	rdlong	arg01, objptr
0c2f4     5A 00 00 FF 
0c2f8     0C E4 85 F1 | 	sub	objptr, ##46092
0c2fc     86 01 00 FF 
0c300     23 14 06 F6 | 	mov	arg02, ##@LR__5373
0c304     64 4A B1 FD | 	call	#__system___string_concat
0c308     5A 00 00 FF 
0c30c     0C E4 05 F1 | 	add	objptr, ##46092
0c310     F2 FA 61 FC | 	wrlong	result1, objptr
0c314     5A 00 00 FF 
0c318     0C E4 85 F1 | 	sub	objptr, ##46092
0c31c                 | LR__1036
0c31c                 | '   close #9: open currentdir$+"/"+loadname for input as #9
0c31c     09 12 06 F6 | 	mov	arg01, #9
0c320     5C 9A B1 FD | 	call	#__system__close
0c324     09 1E 06 F6 | 	mov	local01, #9
0c328     52 00 00 FF 
0c32c     C8 E4 05 F1 | 	add	objptr, ##42184
0c330     F2 12 02 FB | 	rdlong	arg01, objptr
0c334     52 00 00 FF 
0c338     C8 E4 85 F1 | 	sub	objptr, ##42184
0c33c     86 01 00 FF 
0c340     28 14 06 F6 | 	mov	arg02, ##@LR__5374
0c344     24 4A B1 FD | 	call	#__system___string_concat
0c348     FD 12 02 F6 | 	mov	arg01, result1
0c34c     5A 00 00 FF 
0c350     0C E4 05 F1 | 	add	objptr, ##46092
0c354     F2 14 02 FB | 	rdlong	arg02, objptr
0c358     5A 00 00 FF 
0c35c     0C E4 85 F1 | 	sub	objptr, ##46092
0c360     08 4A B1 FD | 	call	#__system___string_concat
0c364     FD 14 02 F6 | 	mov	arg02, result1
0c368     0F 13 02 F6 | 	mov	arg01, local01
0c36c     00 16 06 F6 | 	mov	arg03, #0
0c370     A0 55 B1 FD | 	call	#__system___basic_open_string
0c374                 | '   do
0c374                 | LR__1037
0c374     09 12 06 F6 | 	mov	arg01, #9
0c378     A0 4B B1 FD | 	call	#__system___basic_read_line
0c37c     FD 1E 02 F6 | 	mov	local01, result1
0c380     37 00 00 FF 
0c384     4C E4 05 F1 | 	add	objptr, ##28236
0c388     F2 1E 62 FC | 	wrlong	local01, objptr
0c38c     37 00 00 FF 
0c390     4C E4 85 F1 | 	sub	objptr, ##28236
0c394     84 46 BF FD | 	call	#_interpret
0c398     37 00 00 FF 
0c39c     4C E4 05 F1 | 	add	objptr, ##28236
0c3a0     F2 12 02 FB | 	rdlong	arg01, objptr
0c3a4     37 00 00 FF 
0c3a8     4C E4 85 F1 | 	sub	objptr, ##28236
0c3ac     86 01 00 FF 
0c3b0     2A 14 06 F6 | 	mov	arg02, ##@LR__5375
0c3b4     80 49 B1 FD | 	call	#__system___string_cmp
0c3b8     00 FA 0D F2 | 	cmp	result1, #0 wz
0c3bc     B4 FF 9F 5D |  if_ne	jmp	#LR__1037
0c3c0                 | '   close #9   
0c3c0     09 12 06 F6 | 	mov	arg01, #9
0c3c4     B8 99 B1 FD | 	call	#__system__close
0c3c8     08 00 90 FD | 	jmp	#LR__1039
0c3cc                 | LR__1038
0c3cc     1E 12 06 F6 | 	mov	arg01, #30
0c3d0     94 04 B1 FD | 	call	#_printerror
0c3d4                 | LR__1039
0c3d4                 | ' print "Loaded ";currentdir$+"/"+loadname
0c3d4     00 12 06 F6 | 	mov	arg01, #0
0c3d8     74 A3 B1 FD | 	call	#__system___getiolock_0540
0c3dc     FD 12 02 F6 | 	mov	arg01, result1
0c3e0     2C 49 B1 FD | 	call	#__system___lockmem
0c3e4     86 01 00 FF 
0c3e8     2B 14 06 F6 | 	mov	arg02, ##@LR__5376
0c3ec     00 12 06 F6 | 	mov	arg01, #0
0c3f0     00 16 06 F6 | 	mov	arg03, #0
0c3f4     0C 56 B1 FD | 	call	#__system___basic_print_string
0c3f8     00 1E 06 F6 | 	mov	local01, #0
0c3fc     52 00 00 FF 
0c400     C8 E4 05 F1 | 	add	objptr, ##42184
0c404     F2 12 02 FB | 	rdlong	arg01, objptr
0c408     52 00 00 FF 
0c40c     C8 E4 85 F1 | 	sub	objptr, ##42184
0c410     86 01 00 FF 
0c414     33 14 06 F6 | 	mov	arg02, ##@LR__5377
0c418     50 49 B1 FD | 	call	#__system___string_concat
0c41c     FD 12 02 F6 | 	mov	arg01, result1
0c420     5A 00 00 FF 
0c424     0C E4 05 F1 | 	add	objptr, ##46092
0c428     F2 14 02 FB | 	rdlong	arg02, objptr
0c42c     5A 00 00 FF 
0c430     0C E4 85 F1 | 	sub	objptr, ##46092
0c434     34 49 B1 FD | 	call	#__system___string_concat
0c438     FD 14 02 F6 | 	mov	arg02, result1
0c43c     0F 13 02 F6 | 	mov	arg01, local01
0c440     00 16 06 F6 | 	mov	arg03, #0
0c444     BC 55 B1 FD | 	call	#__system___basic_print_string
0c448     00 12 06 F6 | 	mov	arg01, #0
0c44c     0A 14 06 F6 | 	mov	arg02, #10
0c450     00 16 06 F6 | 	mov	arg03, #0
0c454     54 55 B1 FD | 	call	#__system___basic_print_char
0c458     00 12 06 F6 | 	mov	arg01, #0
0c45c     F0 A2 B1 FD | 	call	#__system___getiolock_0540
0c460     FD 00 68 FC | 	wrlong	#0, result1
0c464                 | LR__1040
0c464     A7 F0 03 F6 | 	mov	ptra, fp
0c468     B2 00 A0 FD | 	call	#popregs_
0c46c                 | _do_load_ret
0c46c     2D 00 64 FD | 	ret
0c470                 | 
0c470                 | ' 
0c470                 | ' sub do_end
0c470                 | _do_end
0c470     4A 00 00 FF 
0c474     AC E4 05 F1 | 	add	objptr, ##38060
0c478     F2 00 02 FB | 	rdlong	_var01, objptr
0c47c     01 00 86 F1 | 	sub	_var01, #1
0c480     04 E4 05 F1 | 	add	objptr, #4
0c484     F2 00 62 FC | 	wrlong	_var01, objptr
0c488     0E 00 00 FF 
0c48c     3C E4 05 F1 | 	add	objptr, ##7228
0c490     FF FF BF FF 
0c494     F2 FE 6B FC | 	wrlong	##2147483647, objptr
0c498     58 00 00 FF 
0c49c     EC E4 85 F1 | 	sub	objptr, ##45292
0c4a0                 | _do_end_ret
0c4a0     2D 00 64 FD | 	ret
0c4a4                 | 
0c4a4                 | ' 
0c4a4                 | ' '----------------- Run the program 
0c4a4                 | ' 
0c4a4                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0c4a4                 | ' 
0c4a4                 | ' sub do_run
0c4a4                 | _do_run
0c4a4     01 4A 05 F6 | 	mov	COUNT_, #1
0c4a8     A8 00 A0 FD | 	call	#pushregs_
0c4ac     4A 00 00 FF 
0c4b0     B0 E4 05 F1 | 	add	objptr, ##38064
0c4b4     F2 18 02 FB | 	rdlong	arg04, objptr
0c4b8     0C 17 02 F6 | 	mov	arg03, arg04
0c4bc     01 16 66 F0 | 	shl	arg03, #1
0c4c0     0C 17 02 F1 | 	add	arg03, arg04
0c4c4     02 16 66 F0 | 	shl	arg03, #2
0c4c8     03 00 00 FF 
0c4cc     04 E4 85 F1 | 	sub	objptr, ##1540
0c4d0     F2 16 02 F1 | 	add	arg03, objptr
0c4d4     0B 15 02 FB | 	rdlong	arg02, arg03
0c4d8                 | ' numpar=compiledline(lineptr_e).result.uresult
0c4d8                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
0c4d8     01 14 0E F2 | 	cmp	arg02, #1 wz
0c4dc     47 00 00 FF 
0c4e0     AC E4 85 F1 | 	sub	objptr, ##36524
0c4e4     00 12 06 A6 |  if_e	mov	arg01, #0
0c4e8     00 FB BF AD |  if_e	call	#_do_load
0c4ec     4A 00 00 FF 
0c4f0     B4 E4 05 F1 | 	add	objptr, ##38068
0c4f4     F2 18 02 FB | 	rdlong	arg04, objptr
0c4f8     0E 00 00 FF 
0c4fc     38 E4 05 F1 | 	add	objptr, ##7224
0c500     F2 18 62 FC | 	wrlong	arg04, objptr
0c504     04 E4 05 F1 | 	add	objptr, #4
0c508     F2 00 68 FC | 	wrlong	#0, objptr
0c50c     04 E4 05 F1 | 	add	objptr, #4
0c510     FF FF FF FF 
0c514     F2 FE 6B FC | 	wrlong	##-1, objptr
0c518                 | ' if inrun>0 then 
0c518     2C E4 05 F1 | 	add	objptr, #44
0c51c     F2 18 02 FB | 	rdlong	arg04, objptr
0c520     58 00 00 FF 
0c524     20 E5 85 F1 | 	sub	objptr, ##45344
0c528     01 18 16 F2 | 	cmp	arg04, #1 wc
0c52c     30 00 90 CD |  if_b	jmp	#LR__1050
0c530     58 00 00 FF 
0c534     24 E5 05 F1 | 	add	objptr, ##45348
0c538     F2 12 02 F6 | 	mov	arg01, objptr
0c53c     38 E4 85 F1 | 	sub	objptr, #56
0c540     F2 14 02 FB | 	rdlong	arg02, objptr
0c544     18 16 06 F6 | 	mov	arg03, #24
0c548     4D 00 00 FF 
0c54c     20 E4 85 F1 | 	sub	objptr, ##39456
0c550     7C 3B B1 FD | 	call	#_psram_spin2_read1
0c554     0B 00 00 FF 
0c558     CC E4 85 F1 | 	sub	objptr, ##5836
0c55c                 | '   psram.read1(varptr(runheader),runptr,24)  
0c55c                 | '   return
0c55c     88 02 90 FD | 	jmp	#LR__1056
0c560                 | LR__1050
0c560     58 00 00 FF 
0c564     20 E5 05 F1 | 	add	objptr, ##45344
0c568     F2 02 68 FC | 	wrlong	#1, objptr
0c56c     04 E4 05 F1 | 	add	objptr, #4
0c570     F2 12 02 F6 | 	mov	arg01, objptr
0c574     38 E4 85 F1 | 	sub	objptr, #56
0c578     F2 14 02 FB | 	rdlong	arg02, objptr
0c57c     18 16 06 F6 | 	mov	arg03, #24
0c580     4D 00 00 FF 
0c584     20 E4 85 F1 | 	sub	objptr, ##39456
0c588     44 3B B1 FD | 	call	#_psram_spin2_read1
0c58c                 | ' inrun=1
0c58c                 | ' psram.read1(varptr(runheader),runptr,24) 
0c58c                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0c58c     4D 00 00 FF 
0c590     58 E4 05 F1 | 	add	objptr, ##39512
0c594     F2 1E 02 FB | 	rdlong	local01, objptr
0c598     58 00 00 FF 
0c59c     24 E5 85 F1 | 	sub	objptr, ##45348
0c5a0     FF FF 7F FF 
0c5a4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0c5a8     58 00 00 AF 
0c5ac     20 E5 05 A1 |  if_e	add	objptr, ##45344
0c5b0     F2 00 68 AC |  if_e	wrlong	#0, objptr
0c5b4     58 00 00 AF 
0c5b8     20 E5 85 A1 |  if_e	sub	objptr, ##45344
0c5bc     28 02 90 AD |  if_e	jmp	#LR__1056
0c5c0                 | ' do 
0c5c0                 | LR__1051
0c5c0                 | '   if runptr<>oldrunptr then
0c5c0     58 00 00 FF 
0c5c4     EC E4 05 F1 | 	add	objptr, ##45292
0c5c8     F2 1E 02 FB | 	rdlong	local01, objptr
0c5cc     08 E4 05 F1 | 	add	objptr, #8
0c5d0     F2 18 02 FB | 	rdlong	arg04, objptr
0c5d4     58 00 00 FF 
0c5d8     F4 E4 85 F1 | 	sub	objptr, ##45300
0c5dc     0C 1F 0A F2 | 	cmp	local01, arg04 wz
0c5e0     CC 00 90 AD |  if_e	jmp	#LR__1052
0c5e4     58 00 00 FF 
0c5e8     24 E5 05 F1 | 	add	objptr, ##45348
0c5ec     F2 12 02 F6 | 	mov	arg01, objptr
0c5f0     38 E4 85 F1 | 	sub	objptr, #56
0c5f4     F2 14 02 FB | 	rdlong	arg02, objptr
0c5f8     18 16 06 F6 | 	mov	arg03, #24
0c5fc     4D 00 00 FF 
0c600     20 E4 85 F1 | 	sub	objptr, ##39456
0c604     C8 3A B1 FD | 	call	#_psram_spin2_read1
0c608     3B 00 00 FF 
0c60c     E0 E5 05 F1 | 	add	objptr, ##30688
0c610     F2 12 02 F6 | 	mov	arg01, objptr
0c614     11 00 00 FF 
0c618     40 E4 05 F1 | 	add	objptr, ##8768
0c61c     F2 14 02 FB | 	rdlong	arg02, objptr
0c620     13 00 00 FF 
0c624     58 E4 85 F1 | 	sub	objptr, ##9816
0c628     F2 1E 02 FB | 	rdlong	local01, objptr
0c62c     01 1E 66 F0 | 	shl	local01, #1
0c630     0F 15 02 F1 | 	add	arg02, local01
0c634     13 00 00 FF 
0c638     98 E4 05 F1 | 	add	objptr, ##9880
0c63c     F2 16 02 FB | 	rdlong	arg03, objptr
0c640     40 E4 85 F1 | 	sub	objptr, #64
0c644     F2 1E 02 FB | 	rdlong	local01, objptr
0c648     0F 17 82 F1 | 	sub	arg03, local01
0c64c     4D 00 00 FF 
0c650     20 E4 85 F1 | 	sub	objptr, ##39456
0c654     78 3A B1 FD | 	call	#_psram_spin2_read1
0c658     4D 00 00 FF 
0c65c     60 E4 05 F1 | 	add	objptr, ##39520
0c660     F2 1E 02 FB | 	rdlong	local01, objptr
0c664     40 E4 85 F1 | 	sub	objptr, #64
0c668     F2 FA 01 FB | 	rdlong	result1, objptr
0c66c     FD 1E 82 F1 | 	sub	local01, result1
0c670     13 00 00 FF 
0c674     58 E4 85 F1 | 	sub	objptr, ##9816
0c678     F2 FA 01 FB | 	rdlong	result1, objptr
0c67c     FD 1E 12 FD | 	qdiv	local01, result1
0c680     05 00 00 FF 
0c684     18 E4 05 F1 | 	add	objptr, ##2584
0c688     18 1E 62 FD | 	getqx	local01
0c68c     03 1E 86 F1 | 	sub	local01, #3
0c690     F2 1E 62 FC | 	wrlong	local01, objptr
0c694     0E 00 00 FF 
0c698     40 E4 05 F1 | 	add	objptr, ##7232
0c69c     F2 1E 02 FB | 	rdlong	local01, objptr
0c6a0     08 E4 05 F1 | 	add	objptr, #8
0c6a4     F2 1E 62 FC | 	wrlong	local01, objptr
0c6a8     58 00 00 FF 
0c6ac     F4 E4 85 F1 | 	sub	objptr, ##45300
0c6b0                 | LR__1052
0c6b0     58 00 00 FF 
0c6b4     38 E5 05 F1 | 	add	objptr, ##45368
0c6b8     F2 1E 02 FB | 	rdlong	local01, objptr
0c6bc     4C E4 85 F1 | 	sub	objptr, #76
0c6c0     F2 1E 62 FC | 	wrlong	local01, objptr
0c6c4     04 E4 05 F1 | 	add	objptr, #4
0c6c8     F2 12 02 FB | 	rdlong	arg01, objptr
0c6cc     58 00 00 FF 
0c6d0     F0 E4 85 F1 | 	sub	objptr, ##45296
0c6d4     E8 E8 BF FD | 	call	#_execute_line
0c6d8     58 00 00 FF 
0c6dc     F0 E4 05 F1 | 	add	objptr, ##45296
0c6e0     F2 FA 61 FC | 	wrlong	result1, objptr
0c6e4     04 E4 85 F1 | 	sub	objptr, #4
0c6e8     F2 1E 02 FB | 	rdlong	local01, objptr
0c6ec     58 00 00 FF 
0c6f0     EC E4 85 F1 | 	sub	objptr, ##45292
0c6f4     FF FF 3F FF 
0c6f8     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0c6fc     30 00 90 AD |  if_e	jmp	#LR__1054
0c700     E0 12 06 F6 | 	mov	arg01, #224
0c704     58 3D B1 FD | 	call	#_usbnew_spin2_keystate
0c708     00 FA 0D F2 | 	cmp	result1, #0 wz
0c70c     10 00 90 5D |  if_ne	jmp	#LR__1053
0c710     E4 12 06 F6 | 	mov	arg01, #228
0c714     48 3D B1 FD | 	call	#_usbnew_spin2_keystate
0c718     00 FA 0D F2 | 	cmp	result1, #0 wz
0c71c     A0 FE 9F AD |  if_e	jmp	#LR__1051
0c720                 | LR__1053
0c720     06 12 06 F6 | 	mov	arg01, #6
0c724     38 3D B1 FD | 	call	#_usbnew_spin2_keystate
0c728     00 FA 0D F2 | 	cmp	result1, #0 wz
0c72c     90 FE 9F AD |  if_e	jmp	#LR__1051
0c730                 | LR__1054
0c730                 | '   ''do whatever kbm.peek_latest_key()=$106 
0c730                 | ' if runptr<>$7FFF_FFFF then 
0c730     58 00 00 FF 
0c734     EC E4 05 F1 | 	add	objptr, ##45292
0c738     F2 1E 02 FB | 	rdlong	local01, objptr
0c73c     58 00 00 FF 
0c740     EC E4 85 F1 | 	sub	objptr, ##45292
0c744     FF FF 3F FF 
0c748     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0c74c     64 00 90 AD |  if_e	jmp	#LR__1055
0c750                 | '     print "Stopped at line ";runheader(0)
0c750     00 12 06 F6 | 	mov	arg01, #0
0c754     F8 9F B1 FD | 	call	#__system___getiolock_0540
0c758     FD 12 02 F6 | 	mov	arg01, result1
0c75c     B0 45 B1 FD | 	call	#__system___lockmem
0c760     86 01 00 FF 
0c764     35 14 06 F6 | 	mov	arg02, ##@LR__5378
0c768     00 12 06 F6 | 	mov	arg01, #0
0c76c     00 16 06 F6 | 	mov	arg03, #0
0c770     90 52 B1 FD | 	call	#__system___basic_print_string
0c774     58 00 00 FF 
0c778     24 E5 05 F1 | 	add	objptr, ##45348
0c77c     F2 14 02 FB | 	rdlong	arg02, objptr
0c780     58 00 00 FF 
0c784     24 E5 85 F1 | 	sub	objptr, ##45348
0c788     00 12 06 F6 | 	mov	arg01, #0
0c78c     00 16 06 F6 | 	mov	arg03, #0
0c790     0A 18 06 F6 | 	mov	arg04, #10
0c794     F0 52 B1 FD | 	call	#__system___basic_print_unsigned
0c798     00 12 06 F6 | 	mov	arg01, #0
0c79c     0A 14 06 F6 | 	mov	arg02, #10
0c7a0     00 16 06 F6 | 	mov	arg03, #0
0c7a4     04 52 B1 FD | 	call	#__system___basic_print_char
0c7a8     00 12 06 F6 | 	mov	arg01, #0
0c7ac     A0 9F B1 FD | 	call	#__system___getiolock_0540
0c7b0     FD 00 68 FC | 	wrlong	#0, result1
0c7b4                 | LR__1055
0c7b4     58 00 00 FF 
0c7b8     20 E5 05 F1 | 	add	objptr, ##45344
0c7bc     F2 00 68 FC | 	wrlong	#0, objptr
0c7c0     58 00 00 FF 
0c7c4     20 E5 85 F1 | 	sub	objptr, ##45344
0c7c8     11 12 06 F6 | 	mov	arg01, #17
0c7cc     08 14 06 F6 | 	mov	arg02, #8
0c7d0     10 16 06 F6 | 	mov	arg03, #16
0c7d4     70 21 B1 FD | 	call	#_hg010b_spin2_setspritesize
0c7d8     10 12 06 F6 | 	mov	arg01, #16
0c7dc     20 14 06 F6 | 	mov	arg02, #32
0c7e0     20 16 06 F6 | 	mov	arg03, #32
0c7e4     60 21 B1 FD | 	call	#_hg010b_spin2_setspritesize
0c7e8                 | LR__1056
0c7e8     A7 F0 03 F6 | 	mov	ptra, fp
0c7ec     B2 00 A0 FD | 	call	#popregs_
0c7f0                 | _do_run_ret
0c7f0     2D 00 64 FD | 	ret
0c7f4                 | 
0c7f4                 | ' 
0c7f4                 | ' 
0c7f4                 | ' 
0c7f4                 | ' 
0c7f4                 | ' 
0c7f4                 | ' 
0c7f4                 | ' 
0c7f4                 | ' sub do_defenv
0c7f4                 | _do_defenv
0c7f4     08 4A 05 F6 | 	mov	COUNT_, #8
0c7f8     A8 00 A0 FD | 	call	#pushregs_
0c7fc     B4 F0 07 F1 | 	add	ptra, #180
0c800     4A 00 00 FF 
0c804     B0 E4 05 F1 | 	add	objptr, ##38064
0c808     F2 1E 02 FB | 	rdlong	local01, objptr
0c80c     0F 1B 02 F6 | 	mov	arg05, local01
0c810     01 1A 66 F0 | 	shl	arg05, #1
0c814     0F 1B 02 F1 | 	add	arg05, local01
0c818     02 1A 66 F0 | 	shl	arg05, #2
0c81c     03 00 00 FF 
0c820     04 E4 85 F1 | 	sub	objptr, ##1540
0c824     F2 20 02 F6 | 	mov	local02, objptr
0c828     F2 1A 02 F1 | 	add	arg05, objptr
0c82c     0D 1B 02 FB | 	rdlong	arg05, arg05
0c830     10 4E 05 F1 | 	add	fp, #16
0c834     A7 1A 62 FC | 	wrlong	arg05, fp
0c838                 | ' 
0c838                 | ' numpar=compiledline(lineptr_e).result.uresult
0c838                 | ' 
0c838                 | ' 
0c838                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0c838                 | ' 'TODO for 2.0: ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0c838                 | ' ' defsnd channel, a,d,s,r - defines ADSR attack time, decay time, sus level, release time. Sus point has to be returned - how?
0c838                 | ' 
0c838                 | ' 
0c838                 | ' if numpar<>2 andalso numpar<>5 andalso numpar<>9 then return ' and print error
0c838     10 4E 85 F1 | 	sub	fp, #16
0c83c     02 1A 0E F2 | 	cmp	arg05, #2 wz
0c840     47 00 00 FF 
0c844     AC E4 85 F1 | 	sub	objptr, ##36524
0c848     10 4E 05 51 |  if_ne	add	fp, #16
0c84c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c850     10 4E 85 51 |  if_ne	sub	fp, #16
0c854     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0c858     10 4E 05 51 |  if_ne	add	fp, #16
0c85c     0F 21 02 56 |  if_ne	mov	local02, local01
0c860     10 4E 85 51 |  if_ne	sub	fp, #16
0c864     09 20 0E 52 |  if_ne	cmp	local02, #9 wz
0c868     10 0C 90 5D |  if_ne	jmp	#LR__1081
0c86c                 | ' 
0c86c                 | '  
0c86c                 | ' if numpar=2 then
0c86c     10 4E 05 F1 | 	add	fp, #16
0c870     A7 20 02 FB | 	rdlong	local02, fp
0c874     10 4E 85 F1 | 	sub	fp, #16
0c878     02 20 0E F2 | 	cmp	local02, #2 wz
0c87c     24 04 90 5D |  if_ne	jmp	#LR__1073
0c880     40 E8 BF FD | 	call	#_pop
0c884     FF 1A 02 F6 | 	mov	arg05, result3
0c888     5C 4E 05 F1 | 	add	fp, #92
0c88c     A7 FA 61 FC | 	wrlong	result1, fp
0c890     04 4E 05 F1 | 	add	fp, #4
0c894     A7 FC 61 FC | 	wrlong	result2, fp
0c898     04 4E 05 F1 | 	add	fp, #4
0c89c     A7 1A 62 FC | 	wrlong	arg05, fp
0c8a0                 | '   t1=pop()
0c8a0                 | '   if t1.result_type=result_string2 then 
0c8a0     64 4E 85 F1 | 	sub	fp, #100
0c8a4     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0c8a8     20 00 90 5D |  if_ne	jmp	#LR__1060
0c8ac     5C 4E 05 F1 | 	add	fp, #92
0c8b0     A7 12 02 FB | 	rdlong	arg01, fp
0c8b4     5C 4E 85 F1 | 	sub	fp, #92
0c8b8     B4 40 B0 FD | 	call	#_convertstring
0c8bc     68 4E 05 F1 | 	add	fp, #104
0c8c0     A7 FA 61 FC | 	wrlong	result1, fp
0c8c4     68 4E 85 F1 | 	sub	fp, #104
0c8c8     58 00 90 FD | 	jmp	#LR__1063
0c8cc                 | LR__1060
0c8cc     64 4E 05 F1 | 	add	fp, #100
0c8d0     A7 20 02 FB | 	rdlong	local02, fp
0c8d4     64 4E 85 F1 | 	sub	fp, #100
0c8d8     1F 20 0E F2 | 	cmp	local02, #31 wz
0c8dc     18 00 90 5D |  if_ne	jmp	#LR__1061
0c8e0     5C 4E 05 F1 | 	add	fp, #92
0c8e4     A7 20 02 FB | 	rdlong	local02, fp
0c8e8     0C 4E 05 F1 | 	add	fp, #12
0c8ec     A7 20 62 FC | 	wrlong	local02, fp
0c8f0     68 4E 85 F1 | 	sub	fp, #104
0c8f4     2C 00 90 FD | 	jmp	#LR__1062
0c8f8                 | LR__1061
0c8f8     86 01 00 FF 
0c8fc     46 20 06 F6 | 	mov	local02, ##@LR__5379
0c900     68 4E 05 F1 | 	add	fp, #104
0c904     A7 20 62 FC | 	wrlong	local02, fp
0c908     0C 4E 85 F1 | 	sub	fp, #12
0c90c     A7 12 02 F6 | 	mov	arg01, fp
0c910     5C 4E 85 F1 | 	sub	fp, #92
0c914     7C 88 B0 FD | 	call	#_converttoint
0c918     24 4E 05 F1 | 	add	fp, #36
0c91c     A7 FA 61 FC | 	wrlong	result1, fp
0c920     24 4E 85 F1 | 	sub	fp, #36
0c924                 | LR__1062
0c924                 | LR__1063
0c924                 | ' 
0c924                 | '     
0c924                 | '   if s1<>"" then 
0c924     68 4E 05 F1 | 	add	fp, #104
0c928     A7 12 02 FB | 	rdlong	arg01, fp
0c92c     68 4E 85 F1 | 	sub	fp, #104
0c930     86 01 00 FF 
0c934     47 14 06 F6 | 	mov	arg02, ##@LR__5380
0c938     FC 43 B1 FD | 	call	#__system___string_cmp
0c93c     00 FA 0D F2 | 	cmp	result1, #0 wz
0c940     24 02 90 AD |  if_e	jmp	#LR__1067
0c944     7C E7 BF FD | 	call	#_pop
0c948     FF 1E 02 F6 | 	mov	local01, result3
0c94c     5C 4E 05 F1 | 	add	fp, #92
0c950     A7 FA 61 FC | 	wrlong	result1, fp
0c954     04 4E 05 F1 | 	add	fp, #4
0c958     A7 FC 61 FC | 	wrlong	result2, fp
0c95c     04 4E 05 F1 | 	add	fp, #4
0c960     A7 1E 62 FC | 	wrlong	local01, fp
0c964     08 4E 85 F1 | 	sub	fp, #8
0c968     A7 12 02 F6 | 	mov	arg01, fp
0c96c     5C 4E 85 F1 | 	sub	fp, #92
0c970     20 88 B0 FD | 	call	#_converttoint
0c974     20 4E 05 F1 | 	add	fp, #32
0c978     A7 FA 61 FC | 	wrlong	result1, fp
0c97c     20 4E 85 F1 | 	sub	fp, #32
0c980                 | '     t1=pop()
0c980                 | '     channel=converttoint(t1) 
0c980                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0c980     09 12 06 F6 | 	mov	arg01, #9
0c984     F8 93 B1 FD | 	call	#__system__close
0c988     09 20 06 F6 | 	mov	local02, #9
0c98c     86 01 00 FF 
0c990     48 12 06 F6 | 	mov	arg01, ##@LR__5381
0c994     68 4E 05 F1 | 	add	fp, #104
0c998     A7 14 02 FB | 	rdlong	arg02, fp
0c99c     68 4E 85 F1 | 	sub	fp, #104
0c9a0     C8 43 B1 FD | 	call	#__system___string_concat
0c9a4     FD 14 02 F6 | 	mov	arg02, result1
0c9a8     10 13 02 F6 | 	mov	arg01, local02
0c9ac     00 16 06 F6 | 	mov	arg03, #0
0c9b0     60 4F B1 FD | 	call	#__system___basic_open_string
0c9b4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0c9b8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0c9bc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0c9c0     0C 4E 05 F1 | 	add	fp, #12
0c9c4     A7 FA 61 FC | 	wrlong	result1, fp
0c9c8                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0c9c8     0C 4E 85 F1 | 	sub	fp, #12
0c9cc     A0 00 90 AD |  if_e	jmp	#LR__1064
0c9d0     00 12 06 F6 | 	mov	arg01, #0
0c9d4     78 9D B1 FD | 	call	#__system___getiolock_0540
0c9d8     FD 12 02 F6 | 	mov	arg01, result1
0c9dc     30 43 B1 FD | 	call	#__system___lockmem
0c9e0     86 01 00 FF 
0c9e4     55 14 06 F6 | 	mov	arg02, ##@LR__5382
0c9e8     00 12 06 F6 | 	mov	arg01, #0
0c9ec     00 16 06 F6 | 	mov	arg03, #0
0c9f0     10 50 B1 FD | 	call	#__system___basic_print_string
0c9f4     0C 4E 05 F1 | 	add	fp, #12
0c9f8     A7 14 02 FB | 	rdlong	arg02, fp
0c9fc     0C 4E 85 F1 | 	sub	fp, #12
0ca00     00 12 06 F6 | 	mov	arg01, #0
0ca04     00 16 06 F6 | 	mov	arg03, #0
0ca08     0A 18 06 F6 | 	mov	arg04, #10
0ca0c     38 50 B1 FD | 	call	#__system___basic_print_integer
0ca10     86 01 00 FF 
0ca14     63 14 06 F6 | 	mov	arg02, ##@LR__5383
0ca18     00 12 06 F6 | 	mov	arg01, #0
0ca1c     00 16 06 F6 | 	mov	arg03, #0
0ca20     E0 4F B1 FD | 	call	#__system___basic_print_string
0ca24     00 20 06 F6 | 	mov	local02, #0
0ca28     0C 4E 05 F1 | 	add	fp, #12
0ca2c     A7 12 02 FB | 	rdlong	arg01, fp
0ca30     0C 4E 85 F1 | 	sub	fp, #12
0ca34     A0 69 B1 FD | 	call	#__system___strerror
0ca38     FD 14 02 F6 | 	mov	arg02, result1
0ca3c     10 13 02 F6 | 	mov	arg01, local02
0ca40     00 16 06 F6 | 	mov	arg03, #0
0ca44     BC 4F B1 FD | 	call	#__system___basic_print_string
0ca48     00 12 06 F6 | 	mov	arg01, #0
0ca4c     0A 14 06 F6 | 	mov	arg02, #10
0ca50     00 16 06 F6 | 	mov	arg03, #0
0ca54     54 4F B1 FD | 	call	#__system___basic_print_char
0ca58     00 12 06 F6 | 	mov	arg01, #0
0ca5c     F0 9C B1 FD | 	call	#__system___getiolock_0540
0ca60     FD 00 68 FC | 	wrlong	#0, result1
0ca64     09 12 06 F6 | 	mov	arg01, #9
0ca68     14 93 B1 FD | 	call	#__system__close
0ca6c     0C 0A 90 FD | 	jmp	#LR__1081
0ca70                 | LR__1064
0ca70                 | '     get #9,17,envbuf8(channel,0),256
0ca70     20 4E 05 F1 | 	add	fp, #32
0ca74     A7 1A 02 FB | 	rdlong	arg05, fp
0ca78     20 4E 85 F1 | 	sub	fp, #32
0ca7c     0D 17 02 F6 | 	mov	arg03, arg05
0ca80     09 16 66 F0 | 	shl	arg03, #9
0ca84     0D 17 02 F1 | 	add	arg03, arg05
0ca88     0C 00 00 FF 
0ca8c     D8 E4 05 F1 | 	add	objptr, ##6360
0ca90     F2 16 02 F1 | 	add	arg03, objptr
0ca94     09 12 06 F6 | 	mov	arg01, #9
0ca98     11 14 06 F6 | 	mov	arg02, #17
0ca9c     00 19 06 F6 | 	mov	arg04, #256
0caa0     01 1A 06 F6 | 	mov	arg05, #1
0caa4     0C 00 00 FF 
0caa8     D8 E4 85 F1 | 	sub	objptr, ##6360
0caac     D0 50 B1 FD | 	call	#__system___basic_get
0cab0                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0cab0     14 4E 05 F1 | 	add	fp, #20
0cab4     A7 FE 69 FC | 	wrlong	#255, fp
0cab8     14 4E 85 F1 | 	sub	fp, #20
0cabc     0C 00 00 FF 
0cac0     D8 E4 05 F1 | 	add	objptr, ##6360
0cac4     97 30 48 FB | 	callpa	#(@LR__1066-@LR__1065)>>2,fcache_load_ptr_
0cac8                 | LR__1065
0cac8     20 4E 05 F1 | 	add	fp, #32
0cacc     A7 18 02 FB | 	rdlong	arg04, fp
0cad0     0C 21 02 F6 | 	mov	local02, arg04
0cad4     09 20 66 F0 | 	shl	local02, #9
0cad8     F2 20 02 F1 | 	add	local02, objptr
0cadc     0C 4E 85 F1 | 	sub	fp, #12
0cae0     A7 1E 02 FB | 	rdlong	local01, fp
0cae4     0F 1B 02 F6 | 	mov	arg05, local01
0cae8     01 1A 66 F0 | 	shl	arg05, #1
0caec     10 1B 02 F1 | 	add	arg05, local02
0caf0     0C 21 02 F6 | 	mov	local02, arg04
0caf4     09 20 66 F0 | 	shl	local02, #9
0caf8     0C 21 02 F1 | 	add	local02, arg04
0cafc     F2 20 02 F1 | 	add	local02, objptr
0cb00     10 1F 02 F1 | 	add	local01, local02
0cb04     0F 21 C2 FA | 	rdbyte	local02, local01
0cb08     00 21 06 FA | 	mul	local02, #256
0cb0c     0D 21 52 FC | 	wrword	local02, arg05
0cb10     A7 20 02 FB | 	rdlong	local02, fp
0cb14     01 20 86 F1 | 	sub	local02, #1
0cb18     A7 20 62 FC | 	wrlong	local02, fp
0cb1c     14 4E 85 F1 | 	sub	fp, #20
0cb20     00 20 56 F2 | 	cmps	local02, #0 wc
0cb24     A0 FF 9F 3D |  if_ae	jmp	#LR__1065
0cb28                 | LR__1066
0cb28     0C 00 00 FF 
0cb2c     D8 E4 85 F1 | 	sub	objptr, ##6360
0cb30                 | '     close #9
0cb30     09 12 06 F6 | 	mov	arg01, #9
0cb34     48 92 B1 FD | 	call	#__system__close
0cb38     20 4E 05 F1 | 	add	fp, #32
0cb3c     A7 20 02 FB | 	rdlong	local02, fp
0cb40     20 4E 85 F1 | 	sub	fp, #32
0cb44     09 20 66 F0 | 	shl	local02, #9
0cb48     0C 00 00 FF 
0cb4c     D8 E4 05 F1 | 	add	objptr, ##6360
0cb50     F2 20 02 F1 | 	add	local02, objptr
0cb54     FE 21 06 F1 | 	add	local02, #510
0cb58     10 01 58 FC | 	wrword	#0, local02
0cb5c                 | '     envbuf(channel,255)=0                                                                   '  for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0cb5c                 | '     return
0cb5c     0C 00 00 FF 
0cb60     D8 E4 85 F1 | 	sub	objptr, ##6360
0cb64     14 09 90 FD | 	jmp	#LR__1081
0cb68                 | LR__1067
0cb68                 | '     if wptr < ($80000 - 2048) then 
0cb68     24 4E 05 F1 | 	add	fp, #36
0cb6c     A7 22 02 FB | 	rdlong	local03, fp
0cb70     24 4E 85 F1 | 	sub	fp, #36
0cb74     FC 03 00 FF 
0cb78     00 22 56 F2 | 	cmps	local03, ##522240 wc
0cb7c     7C 00 90 3D |  if_ae	jmp	#LR__1070
0cb80                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0cb80     14 4E 05 F1 | 	add	fp, #20
0cb84     A7 00 68 FC | 	wrlong	#0, fp
0cb88     14 4E 85 F1 | 	sub	fp, #20
0cb8c     0C 00 00 FF 
0cb90     D8 E4 05 F1 | 	add	objptr, ##6360
0cb94     97 2C 48 FB | 	callpa	#(@LR__1069-@LR__1068)>>2,fcache_load_ptr_
0cb98                 | LR__1068
0cb98     20 4E 05 F1 | 	add	fp, #32
0cb9c     A7 22 02 FB | 	rdlong	local03, fp
0cba0     09 22 66 F0 | 	shl	local03, #9
0cba4     F2 22 02 F1 | 	add	local03, objptr
0cba8     0C 4E 85 F1 | 	sub	fp, #12
0cbac     A7 20 02 FB | 	rdlong	local02, fp
0cbb0     10 1F 02 F6 | 	mov	local01, local02
0cbb4     01 1E 66 F0 | 	shl	local01, #1
0cbb8     11 1F 02 F1 | 	add	local01, local03
0cbbc     10 4E 05 F1 | 	add	fp, #16
0cbc0     A7 12 02 FB | 	rdlong	arg01, fp
0cbc4     01 20 66 F0 | 	shl	local02, #1
0cbc8     10 13 02 F1 | 	add	arg01, local02
0cbcc     09 FB E1 FA | 	rdword	result1, arg01
0cbd0     0F FB 51 FC | 	wrword	result1, local01
0cbd4     10 4E 85 F1 | 	sub	fp, #16
0cbd8     A7 22 02 FB | 	rdlong	local03, fp
0cbdc     01 22 06 F1 | 	add	local03, #1
0cbe0     A7 22 62 FC | 	wrlong	local03, fp
0cbe4     14 4E 85 F1 | 	sub	fp, #20
0cbe8     00 23 56 F2 | 	cmps	local03, #256 wc
0cbec     A8 FF 9F CD |  if_b	jmp	#LR__1068
0cbf0                 | LR__1069
0cbf0     0C 00 00 FF 
0cbf4     D8 E4 85 F1 | 	sub	objptr, ##6360
0cbf8     78 00 90 FD | 	jmp	#LR__1072
0cbfc                 | LR__1070
0cbfc                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0cbfc     14 4E 05 F1 | 	add	fp, #20
0cc00     A7 00 68 FC | 	wrlong	#0, fp
0cc04     14 4E 85 F1 | 	sub	fp, #20
0cc08                 | LR__1071
0cc08     20 4E 05 F1 | 	add	fp, #32
0cc0c     A7 22 02 FB | 	rdlong	local03, fp
0cc10     09 22 66 F0 | 	shl	local03, #9
0cc14     0C 00 00 FF 
0cc18     D8 E4 05 F1 | 	add	objptr, ##6360
0cc1c     F2 22 02 F1 | 	add	local03, objptr
0cc20     0C 4E 85 F1 | 	sub	fp, #12
0cc24     A7 20 02 FB | 	rdlong	local02, fp
0cc28     10 1F 02 F6 | 	mov	local01, local02
0cc2c     01 1E 66 F0 | 	shl	local01, #1
0cc30     11 1F 02 F1 | 	add	local01, local03
0cc34     10 4E 05 F1 | 	add	fp, #16
0cc38     A7 12 02 FB | 	rdlong	arg01, fp
0cc3c     24 4E 85 F1 | 	sub	fp, #36
0cc40     01 20 66 F0 | 	shl	local02, #1
0cc44     10 13 02 F1 | 	add	arg01, local02
0cc48     0C 00 00 FF 
0cc4c     D8 E4 85 F1 | 	sub	objptr, ##6360
0cc50     00 FF B0 FD | 	call	#_psdpeek
0cc54     0F FB 51 FC | 	wrword	result1, local01
0cc58     14 4E 05 F1 | 	add	fp, #20
0cc5c     A7 22 02 FB | 	rdlong	local03, fp
0cc60     01 22 06 F1 | 	add	local03, #1
0cc64     A7 22 62 FC | 	wrlong	local03, fp
0cc68     14 4E 85 F1 | 	sub	fp, #20
0cc6c     00 23 56 F2 | 	cmps	local03, #256 wc
0cc70     94 FF 9F CD |  if_b	jmp	#LR__1071
0cc74                 | LR__1072
0cc74     20 4E 05 F1 | 	add	fp, #32
0cc78     A7 22 02 FB | 	rdlong	local03, fp
0cc7c     20 4E 85 F1 | 	sub	fp, #32
0cc80     09 22 66 F0 | 	shl	local03, #9
0cc84     0C 00 00 FF 
0cc88     D8 E4 05 F1 | 	add	objptr, ##6360
0cc8c     F2 22 02 F1 | 	add	local03, objptr
0cc90     FE 23 06 F1 | 	add	local03, #510
0cc94     11 01 58 FC | 	wrword	#0, local03
0cc98                 | '     envbuf(channel,255)=0
0cc98                 | '     return   
0cc98     0C 00 00 FF 
0cc9c     D8 E4 85 F1 | 	sub	objptr, ##6360
0cca0     D8 07 90 FD | 	jmp	#LR__1081
0cca4                 | LR__1073
0cca4                 | ' 
0cca4                 | ' if numpar=5 then    'simple adsr
0cca4     10 4E 05 F1 | 	add	fp, #16
0cca8     A7 22 02 FB | 	rdlong	local03, fp
0ccac     10 4E 85 F1 | 	sub	fp, #16
0ccb0     05 22 0E F2 | 	cmp	local03, #5 wz
0ccb4     98 07 90 5D |  if_ne	jmp	#LR__1080
0ccb8     08 E4 BF FD | 	call	#_pop
0ccbc     FF 1E 02 F6 | 	mov	local01, result3
0ccc0     5C 4E 05 F1 | 	add	fp, #92
0ccc4     A7 FA 61 FC | 	wrlong	result1, fp
0ccc8     04 4E 05 F1 | 	add	fp, #4
0cccc     A7 FC 61 FC | 	wrlong	result2, fp
0ccd0     04 4E 05 F1 | 	add	fp, #4
0ccd4     A7 1E 62 FC | 	wrlong	local01, fp
0ccd8     08 4E 85 F1 | 	sub	fp, #8
0ccdc     A7 12 02 F6 | 	mov	arg01, fp
0cce0     5C 4E 85 F1 | 	sub	fp, #92
0cce4     68 85 B0 FD | 	call	#_converttofloat
0cce8     FD 22 02 F6 | 	mov	local03, result1
0ccec     34 4E 05 F1 | 	add	fp, #52
0ccf0     A7 22 62 FC | 	wrlong	local03, fp
0ccf4     34 4E 85 F1 | 	sub	fp, #52
0ccf8     C8 E3 BF FD | 	call	#_pop
0ccfc     FF 1E 02 F6 | 	mov	local01, result3
0cd00     5C 4E 05 F1 | 	add	fp, #92
0cd04     A7 FA 61 FC | 	wrlong	result1, fp
0cd08     04 4E 05 F1 | 	add	fp, #4
0cd0c     A7 FC 61 FC | 	wrlong	result2, fp
0cd10     04 4E 05 F1 | 	add	fp, #4
0cd14     A7 1E 62 FC | 	wrlong	local01, fp
0cd18     08 4E 85 F1 | 	sub	fp, #8
0cd1c     A7 12 02 F6 | 	mov	arg01, fp
0cd20     5C 4E 85 F1 | 	sub	fp, #92
0cd24     28 85 B0 FD | 	call	#_converttofloat
0cd28     FD 22 02 F6 | 	mov	local03, result1
0cd2c     30 4E 05 F1 | 	add	fp, #48
0cd30     A7 22 62 FC | 	wrlong	local03, fp
0cd34     30 4E 85 F1 | 	sub	fp, #48
0cd38     88 E3 BF FD | 	call	#_pop
0cd3c     FF 1E 02 F6 | 	mov	local01, result3
0cd40     5C 4E 05 F1 | 	add	fp, #92
0cd44     A7 FA 61 FC | 	wrlong	result1, fp
0cd48     04 4E 05 F1 | 	add	fp, #4
0cd4c     A7 FC 61 FC | 	wrlong	result2, fp
0cd50     04 4E 05 F1 | 	add	fp, #4
0cd54     A7 1E 62 FC | 	wrlong	local01, fp
0cd58     08 4E 85 F1 | 	sub	fp, #8
0cd5c     A7 12 02 F6 | 	mov	arg01, fp
0cd60     5C 4E 85 F1 | 	sub	fp, #92
0cd64     E8 84 B0 FD | 	call	#_converttofloat
0cd68     FD 22 02 F6 | 	mov	local03, result1
0cd6c     2C 4E 05 F1 | 	add	fp, #44
0cd70     A7 22 62 FC | 	wrlong	local03, fp
0cd74     2C 4E 85 F1 | 	sub	fp, #44
0cd78     48 E3 BF FD | 	call	#_pop
0cd7c     FF 1E 02 F6 | 	mov	local01, result3
0cd80     5C 4E 05 F1 | 	add	fp, #92
0cd84     A7 FA 61 FC | 	wrlong	result1, fp
0cd88     04 4E 05 F1 | 	add	fp, #4
0cd8c     A7 FC 61 FC | 	wrlong	result2, fp
0cd90     04 4E 05 F1 | 	add	fp, #4
0cd94     A7 1E 62 FC | 	wrlong	local01, fp
0cd98     08 4E 85 F1 | 	sub	fp, #8
0cd9c     A7 12 02 F6 | 	mov	arg01, fp
0cda0     5C 4E 85 F1 | 	sub	fp, #92
0cda4     A8 84 B0 FD | 	call	#_converttofloat
0cda8     FD 22 02 F6 | 	mov	local03, result1
0cdac     28 4E 05 F1 | 	add	fp, #40
0cdb0     A7 22 62 FC | 	wrlong	local03, fp
0cdb4     28 4E 85 F1 | 	sub	fp, #40
0cdb8     08 E3 BF FD | 	call	#_pop
0cdbc     FF 1E 02 F6 | 	mov	local01, result3
0cdc0     5C 4E 05 F1 | 	add	fp, #92
0cdc4     A7 FA 61 FC | 	wrlong	result1, fp
0cdc8     04 4E 05 F1 | 	add	fp, #4
0cdcc     A7 FC 61 FC | 	wrlong	result2, fp
0cdd0     04 4E 05 F1 | 	add	fp, #4
0cdd4     A7 1E 62 FC | 	wrlong	local01, fp
0cdd8     08 4E 85 F1 | 	sub	fp, #8
0cddc     A7 12 02 F6 | 	mov	arg01, fp
0cde0     5C 4E 85 F1 | 	sub	fp, #92
0cde4     AC 83 B0 FD | 	call	#_converttoint
0cde8     20 4E 05 F1 | 	add	fp, #32
0cdec     A7 FA 61 FC | 	wrlong	result1, fp
0cdf0                 | ' 
0cdf0                 | '   t1=pop() : rr=converttofloat(t1)
0cdf0                 | '   t1=pop() : ss=converttofloat(t1) 
0cdf0                 | '   t1=pop() : dd=converttofloat(t1)
0cdf0                 | '   t1=pop() : aa=converttofloat(t1)
0cdf0                 | '   t1=pop() : channel=converttoint(t1)
0cdf0                 | '   if ss<0.0 then ss=0.0 
0cdf0     10 4E 05 F1 | 	add	fp, #16
0cdf4     A7 12 02 FB | 	rdlong	arg01, fp
0cdf8     30 4E 85 F1 | 	sub	fp, #48
0cdfc     00 14 06 F6 | 	mov	arg02, #0
0ce00     01 16 06 F6 | 	mov	arg03, #1
0ce04     F0 6E B1 FD | 	call	#__system___float_cmp
0ce08     00 FA 55 F2 | 	cmps	result1, #0 wc
0ce0c     30 4E 05 C1 |  if_b	add	fp, #48
0ce10     A7 00 68 CC |  if_b	wrlong	#0, fp
0ce14     30 4E 85 C1 |  if_b	sub	fp, #48
0ce18                 | '   if ss>1.0 then ss=1.0
0ce18     30 4E 05 F1 | 	add	fp, #48
0ce1c     A7 12 02 FB | 	rdlong	arg01, fp
0ce20     30 4E 85 F1 | 	sub	fp, #48
0ce24     00 C0 1F FF 
0ce28     00 14 06 F6 | 	mov	arg02, ##1065353216
0ce2c     01 16 66 F6 | 	neg	arg03, #1
0ce30     C4 6E B1 FD | 	call	#__system___float_cmp
0ce34     01 FA 55 F2 | 	cmps	result1, #1 wc
0ce38     30 4E 05 31 |  if_ae	add	fp, #48
0ce3c     00 C0 9F 3F 
0ce40     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0ce44     30 4E 85 31 |  if_ae	sub	fp, #48
0ce48     28 4E 05 F1 | 	add	fp, #40
0ce4c     A7 12 02 FB | 	rdlong	arg01, fp
0ce50     04 4E 05 F1 | 	add	fp, #4
0ce54     A7 14 02 FB | 	rdlong	arg02, fp
0ce58     2C 4E 85 F1 | 	sub	fp, #44
0ce5c     94 66 B1 FD | 	call	#__system___float_add
0ce60     FD 12 02 F6 | 	mov	arg01, result1
0ce64     34 4E 05 F1 | 	add	fp, #52
0ce68     A7 14 02 FB | 	rdlong	arg02, fp
0ce6c     34 4E 85 F1 | 	sub	fp, #52
0ce70     80 66 B1 FD | 	call	#__system___float_add
0ce74     4C 4E 05 F1 | 	add	fp, #76
0ce78     A7 FA 61 FC | 	wrlong	result1, fp
0ce7c     FD 14 02 F6 | 	mov	arg02, result1
0ce80     4C 4E 85 F1 | 	sub	fp, #76
0ce84     00 C0 21 FF 
0ce88     00 12 06 F6 | 	mov	arg01, ##1132462080
0ce8c     38 6C B1 FD | 	call	#__system___float_div
0ce90     50 4E 05 F1 | 	add	fp, #80
0ce94     A7 FA 61 FC | 	wrlong	result1, fp
0ce98     28 4E 85 F1 | 	sub	fp, #40
0ce9c     A7 12 02 FB | 	rdlong	arg01, fp
0cea0     FD 14 02 F6 | 	mov	arg02, result1
0cea4     28 4E 85 F1 | 	sub	fp, #40
0cea8     18 6A B1 FD | 	call	#__system___float_mul
0ceac     FD 12 02 F6 | 	mov	arg01, result1
0ceb0     01 14 06 F6 | 	mov	arg02, #1
0ceb4     D4 6E B1 FD | 	call	#__system___float_tointeger
0ceb8     A7 FA 61 FC | 	wrlong	result1, fp
0cebc     2C 4E 05 F1 | 	add	fp, #44
0cec0     A7 12 02 FB | 	rdlong	arg01, fp
0cec4     24 4E 05 F1 | 	add	fp, #36
0cec8     A7 14 02 FB | 	rdlong	arg02, fp
0cecc     50 4E 85 F1 | 	sub	fp, #80
0ced0     F0 69 B1 FD | 	call	#__system___float_mul
0ced4     FD 12 02 F6 | 	mov	arg01, result1
0ced8     01 14 06 F6 | 	mov	arg02, #1
0cedc     AC 6E B1 FD | 	call	#__system___float_tointeger
0cee0     04 4E 05 F1 | 	add	fp, #4
0cee4     A7 FA 61 FC | 	wrlong	result1, fp
0cee8     30 4E 05 F1 | 	add	fp, #48
0ceec     A7 12 02 FB | 	rdlong	arg01, fp
0cef0     1C 4E 05 F1 | 	add	fp, #28
0cef4     A7 14 02 FB | 	rdlong	arg02, fp
0cef8     50 4E 85 F1 | 	sub	fp, #80
0cefc     C4 69 B1 FD | 	call	#__system___float_mul
0cf00     FD 12 02 F6 | 	mov	arg01, result1
0cf04     01 14 06 F6 | 	mov	arg02, #1
0cf08     80 6E B1 FD | 	call	#__system___float_tointeger
0cf0c     FD 22 02 F6 | 	mov	local03, result1
0cf10     0C 4E 05 F1 | 	add	fp, #12
0cf14     A7 22 62 FC | 	wrlong	local03, fp
0cf18     0C 4E 85 F1 | 	sub	fp, #12
0cf1c                 | '   fulltime=aa+dd+rr
0cf1c                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit) :print a,d,r,a+d+r
0cf1c     00 12 06 F6 | 	mov	arg01, #0
0cf20     2C 98 B1 FD | 	call	#__system___getiolock_0540
0cf24     FD 12 02 F6 | 	mov	arg01, result1
0cf28     E4 3D B1 FD | 	call	#__system___lockmem
0cf2c     A7 14 02 FB | 	rdlong	arg02, fp
0cf30     00 12 06 F6 | 	mov	arg01, #0
0cf34     00 16 06 F6 | 	mov	arg03, #0
0cf38     0A 18 06 F6 | 	mov	arg04, #10
0cf3c     08 4B B1 FD | 	call	#__system___basic_print_integer
0cf40     00 12 06 F6 | 	mov	arg01, #0
0cf44     09 14 06 F6 | 	mov	arg02, #9
0cf48     00 16 06 F6 | 	mov	arg03, #0
0cf4c     5C 4A B1 FD | 	call	#__system___basic_print_char
0cf50     04 4E 05 F1 | 	add	fp, #4
0cf54     A7 14 02 FB | 	rdlong	arg02, fp
0cf58     04 4E 85 F1 | 	sub	fp, #4
0cf5c     00 12 06 F6 | 	mov	arg01, #0
0cf60     00 16 06 F6 | 	mov	arg03, #0
0cf64     0A 18 06 F6 | 	mov	arg04, #10
0cf68     DC 4A B1 FD | 	call	#__system___basic_print_integer
0cf6c     00 12 06 F6 | 	mov	arg01, #0
0cf70     09 14 06 F6 | 	mov	arg02, #9
0cf74     00 16 06 F6 | 	mov	arg03, #0
0cf78     30 4A B1 FD | 	call	#__system___basic_print_char
0cf7c     0C 4E 05 F1 | 	add	fp, #12
0cf80     A7 14 02 FB | 	rdlong	arg02, fp
0cf84     0C 4E 85 F1 | 	sub	fp, #12
0cf88     00 12 06 F6 | 	mov	arg01, #0
0cf8c     00 16 06 F6 | 	mov	arg03, #0
0cf90     0A 18 06 F6 | 	mov	arg04, #10
0cf94     B0 4A B1 FD | 	call	#__system___basic_print_integer
0cf98     00 12 06 F6 | 	mov	arg01, #0
0cf9c     09 14 06 F6 | 	mov	arg02, #9
0cfa0     00 16 06 F6 | 	mov	arg03, #0
0cfa4     04 4A B1 FD | 	call	#__system___basic_print_char
0cfa8     A7 14 02 FB | 	rdlong	arg02, fp
0cfac     04 4E 05 F1 | 	add	fp, #4
0cfb0     A7 22 02 FB | 	rdlong	local03, fp
0cfb4     11 15 02 F1 | 	add	arg02, local03
0cfb8     08 4E 05 F1 | 	add	fp, #8
0cfbc     A7 22 02 FB | 	rdlong	local03, fp
0cfc0     0C 4E 85 F1 | 	sub	fp, #12
0cfc4     11 15 02 F1 | 	add	arg02, local03
0cfc8     00 12 06 F6 | 	mov	arg01, #0
0cfcc     00 16 06 F6 | 	mov	arg03, #0
0cfd0     0A 18 06 F6 | 	mov	arg04, #10
0cfd4     70 4A B1 FD | 	call	#__system___basic_print_integer
0cfd8     00 12 06 F6 | 	mov	arg01, #0
0cfdc     0A 14 06 F6 | 	mov	arg02, #10
0cfe0     00 16 06 F6 | 	mov	arg03, #0
0cfe4     C4 49 B1 FD | 	call	#__system___basic_print_char
0cfe8     00 12 06 F6 | 	mov	arg01, #0
0cfec     60 97 B1 FD | 	call	#__system___getiolock_0540
0cff0     FD 00 68 FC | 	wrlong	#0, result1
0cff4     F8 BF 23 FF 
0cff8     00 22 06 F6 | 	mov	local03, ##1199566848
0cffc     A7 12 02 FB | 	rdlong	arg01, fp
0d000     09 13 52 F6 | 	abs	arg01, arg01 wc
0d004     1F 24 C6 C9 |  if_b	decod	local04, #31
0d008     00 24 06 36 |  if_ae	mov	local04, #0
0d00c     B0 64 B1 FD | 	call	#__system___float_fromuns
0d010     12 FB 61 F5 | 	xor	result1, local04
0d014     FD 14 02 F6 | 	mov	arg02, result1
0d018     11 13 02 F6 | 	mov	arg01, local03
0d01c     A8 6A B1 FD | 	call	#__system___float_div
0d020     54 4E 05 F1 | 	add	fp, #84
0d024     A7 FA 61 FC | 	wrlong	result1, fp
0d028     F8 BF 23 FF 
0d02c     00 22 06 F6 | 	mov	local03, ##1199566848
0d030     24 4E 85 F1 | 	sub	fp, #36
0d034     A7 14 02 FB | 	rdlong	arg02, fp
0d038     30 4E 85 F1 | 	sub	fp, #48
0d03c     F8 BF 23 FF 
0d040     00 12 06 F6 | 	mov	arg01, ##1199566848
0d044     7C 68 B1 FD | 	call	#__system___float_mul
0d048     FD 14 02 F6 | 	mov	arg02, result1
0d04c     11 13 02 F6 | 	mov	arg01, local03
0d050     1F 14 E6 F4 | 	bitnot	arg02, #31
0d054     9C 64 B1 FD | 	call	#__system___float_add
0d058     FD 22 02 F6 | 	mov	local03, result1
0d05c     04 4E 05 F1 | 	add	fp, #4
0d060     A7 12 02 FB | 	rdlong	arg01, fp
0d064     04 4E 85 F1 | 	sub	fp, #4
0d068     09 13 52 F6 | 	abs	arg01, arg01 wc
0d06c     1F 24 C6 C9 |  if_b	decod	local04, #31
0d070     00 24 06 36 |  if_ae	mov	local04, #0
0d074     48 64 B1 FD | 	call	#__system___float_fromuns
0d078     12 FB 61 F5 | 	xor	result1, local04
0d07c     FD 14 02 F6 | 	mov	arg02, result1
0d080     11 13 02 F6 | 	mov	arg01, local03
0d084     40 6A B1 FD | 	call	#__system___float_div
0d088     2C 4E 05 F1 | 	add	fp, #44
0d08c     A7 FA 61 FC | 	wrlong	result1, fp
0d090     04 4E 05 F1 | 	add	fp, #4
0d094     A7 14 02 FB | 	rdlong	arg02, fp
0d098     30 4E 85 F1 | 	sub	fp, #48
0d09c     F8 BF 23 FF 
0d0a0     00 12 06 F6 | 	mov	arg01, ##1199566848
0d0a4     1C 68 B1 FD | 	call	#__system___float_mul
0d0a8     FD 22 02 F6 | 	mov	local03, result1
0d0ac     0C 4E 05 F1 | 	add	fp, #12
0d0b0     A7 12 02 FB | 	rdlong	arg01, fp
0d0b4     0C 4E 85 F1 | 	sub	fp, #12
0d0b8     09 13 52 F6 | 	abs	arg01, arg01 wc
0d0bc     1F 24 C6 C9 |  if_b	decod	local04, #31
0d0c0     00 24 06 36 |  if_ae	mov	local04, #0
0d0c4     F8 63 B1 FD | 	call	#__system___float_fromuns
0d0c8     12 FB 61 F5 | 	xor	result1, local04
0d0cc     FD 14 02 F6 | 	mov	arg02, result1
0d0d0     11 13 02 F6 | 	mov	arg01, local03
0d0d4     F0 69 B1 FD | 	call	#__system___float_div
0d0d8     FD 22 02 F6 | 	mov	local03, result1
0d0dc     58 4E 05 F1 | 	add	fp, #88
0d0e0     A7 22 62 FC | 	wrlong	local03, fp
0d0e4     58 4E 85 F1 | 	sub	fp, #88
0d0e8                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r : print da,dd,dr
0d0e8     00 12 06 F6 | 	mov	arg01, #0
0d0ec     60 96 B1 FD | 	call	#__system___getiolock_0540
0d0f0     FD 12 02 F6 | 	mov	arg01, result1
0d0f4     18 3C B1 FD | 	call	#__system___lockmem
0d0f8     54 4E 05 F1 | 	add	fp, #84
0d0fc     A7 14 02 FB | 	rdlong	arg02, fp
0d100     54 4E 85 F1 | 	sub	fp, #84
0d104     00 12 06 F6 | 	mov	arg01, #0
0d108     00 16 06 F6 | 	mov	arg03, #0
0d10c     23 18 06 F6 | 	mov	arg04, #35
0d110     C8 6D B1 FD | 	call	#__system___basic_print_float
0d114     00 12 06 F6 | 	mov	arg01, #0
0d118     09 14 06 F6 | 	mov	arg02, #9
0d11c     00 16 06 F6 | 	mov	arg03, #0
0d120     88 48 B1 FD | 	call	#__system___basic_print_char
0d124     2C 4E 05 F1 | 	add	fp, #44
0d128     A7 14 02 FB | 	rdlong	arg02, fp
0d12c     2C 4E 85 F1 | 	sub	fp, #44
0d130     00 12 06 F6 | 	mov	arg01, #0
0d134     00 16 06 F6 | 	mov	arg03, #0
0d138     23 18 06 F6 | 	mov	arg04, #35
0d13c     9C 6D B1 FD | 	call	#__system___basic_print_float
0d140     00 12 06 F6 | 	mov	arg01, #0
0d144     09 14 06 F6 | 	mov	arg02, #9
0d148     00 16 06 F6 | 	mov	arg03, #0
0d14c     5C 48 B1 FD | 	call	#__system___basic_print_char
0d150     58 4E 05 F1 | 	add	fp, #88
0d154     A7 14 02 FB | 	rdlong	arg02, fp
0d158     58 4E 85 F1 | 	sub	fp, #88
0d15c     00 12 06 F6 | 	mov	arg01, #0
0d160     00 16 06 F6 | 	mov	arg03, #0
0d164     23 18 06 F6 | 	mov	arg04, #35
0d168     70 6D B1 FD | 	call	#__system___basic_print_float
0d16c     00 12 06 F6 | 	mov	arg01, #0
0d170     0A 14 06 F6 | 	mov	arg02, #10
0d174     00 16 06 F6 | 	mov	arg03, #0
0d178     30 48 B1 FD | 	call	#__system___basic_print_char
0d17c     00 12 06 F6 | 	mov	arg01, #0
0d180     CC 95 B1 FD | 	call	#__system___getiolock_0540
0d184     FD 00 68 FC | 	wrlong	#0, result1
0d188     20 4E 05 F1 | 	add	fp, #32
0d18c     A7 26 02 FB | 	rdlong	local05, fp
0d190     20 4E 85 F1 | 	sub	fp, #32
0d194     01 26 66 F0 | 	shl	local05, #1
0d198     59 00 00 FF 
0d19c     FC E5 05 F1 | 	add	objptr, ##46076
0d1a0     F2 26 02 F1 | 	add	local05, objptr
0d1a4     A7 28 02 FB | 	rdlong	local06, fp
0d1a8     04 4E 05 F1 | 	add	fp, #4
0d1ac     A7 22 02 FB | 	rdlong	local03, fp
0d1b0     11 29 02 F1 | 	add	local06, local03
0d1b4     13 29 52 FC | 	wrword	local06, local05
0d1b8     24 4E 05 F1 | 	add	fp, #36
0d1bc     A7 00 68 FC | 	wrlong	#0, fp
0d1c0                 | '   suspoints(channel)=a+d
0d1c0                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0d1c0     14 4E 85 F1 | 	sub	fp, #20
0d1c4     A7 00 68 FC | 	wrlong	#0, fp
0d1c8     14 4E 85 F1 | 	sub	fp, #20
0d1cc     A7 2A 02 FB | 	rdlong	local07, fp
0d1d0     59 00 00 FF 
0d1d4     FC E5 85 F1 | 	sub	objptr, ##46076
0d1d8                 | LR__1074
0d1d8     14 4E 05 F1 | 	add	fp, #20
0d1dc     A7 22 02 FB | 	rdlong	local03, fp
0d1e0     14 4E 85 F1 | 	sub	fp, #20
0d1e4     15 23 52 F2 | 	cmps	local03, local07 wc
0d1e8     80 00 90 3D |  if_ae	jmp	#LR__1075
0d1ec     20 4E 05 F1 | 	add	fp, #32
0d1f0     A7 28 02 FB | 	rdlong	local06, fp
0d1f4     09 28 66 F0 | 	shl	local06, #9
0d1f8     0C 00 00 FF 
0d1fc     D8 E4 05 F1 | 	add	objptr, ##6360
0d200     F2 28 02 F1 | 	add	local06, objptr
0d204     0C 4E 85 F1 | 	sub	fp, #12
0d208     A7 26 02 FB | 	rdlong	local05, fp
0d20c     01 26 66 F0 | 	shl	local05, #1
0d210     14 27 02 F1 | 	add	local05, local06
0d214     14 4E 05 F1 | 	add	fp, #20
0d218     A7 12 02 FB | 	rdlong	arg01, fp
0d21c     28 4E 85 F1 | 	sub	fp, #40
0d220     0C 00 00 FF 
0d224     D8 E4 85 F1 | 	sub	objptr, ##6360
0d228     01 14 06 F6 | 	mov	arg02, #1
0d22c     5C 6B B1 FD | 	call	#__system___float_tointeger
0d230     13 FB 51 FC | 	wrword	result1, local05
0d234     28 4E 05 F1 | 	add	fp, #40
0d238     A7 12 02 FB | 	rdlong	arg01, fp
0d23c     2C 4E 05 F1 | 	add	fp, #44
0d240     A7 14 02 FB | 	rdlong	arg02, fp
0d244     54 4E 85 F1 | 	sub	fp, #84
0d248     A8 62 B1 FD | 	call	#__system___float_add
0d24c     28 4E 05 F1 | 	add	fp, #40
0d250     A7 FA 61 FC | 	wrlong	result1, fp
0d254     14 4E 85 F1 | 	sub	fp, #20
0d258     A7 20 02 FB | 	rdlong	local02, fp
0d25c     01 20 06 F1 | 	add	local02, #1
0d260     A7 20 62 FC | 	wrlong	local02, fp
0d264     14 4E 85 F1 | 	sub	fp, #20
0d268     6C FF 9F FD | 	jmp	#LR__1074
0d26c                 | LR__1075
0d26c                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0d26c     A7 22 02 FB | 	rdlong	local03, fp
0d270     14 4E 05 F1 | 	add	fp, #20
0d274     A7 22 62 FC | 	wrlong	local03, fp
0d278     14 4E 85 F1 | 	sub	fp, #20
0d27c     A7 2C 02 FB | 	rdlong	local08, fp
0d280     04 4E 05 F1 | 	add	fp, #4
0d284     A7 22 02 FB | 	rdlong	local03, fp
0d288     04 4E 85 F1 | 	sub	fp, #4
0d28c     11 2D 02 F1 | 	add	local08, local03
0d290                 | LR__1076
0d290     14 4E 05 F1 | 	add	fp, #20
0d294     A7 22 02 FB | 	rdlong	local03, fp
0d298     14 4E 85 F1 | 	sub	fp, #20
0d29c     16 23 52 F2 | 	cmps	local03, local08 wc
0d2a0     A8 00 90 3D |  if_ae	jmp	#LR__1077
0d2a4     20 4E 05 F1 | 	add	fp, #32
0d2a8     A7 2A 02 FB | 	rdlong	local07, fp
0d2ac     09 2A 66 F0 | 	shl	local07, #9
0d2b0     0C 00 00 FF 
0d2b4     D8 E4 05 F1 | 	add	objptr, ##6360
0d2b8     F2 2A 02 F1 | 	add	local07, objptr
0d2bc     0C 4E 85 F1 | 	sub	fp, #12
0d2c0     A7 28 02 FB | 	rdlong	local06, fp
0d2c4     01 28 66 F0 | 	shl	local06, #1
0d2c8     15 29 02 F1 | 	add	local06, local07
0d2cc     14 4E 05 F1 | 	add	fp, #20
0d2d0     A7 12 02 FB | 	rdlong	arg01, fp
0d2d4     28 4E 85 F1 | 	sub	fp, #40
0d2d8     0C 00 00 FF 
0d2dc     D8 E4 85 F1 | 	sub	objptr, ##6360
0d2e0     01 14 06 F6 | 	mov	arg02, #1
0d2e4     A4 6A B1 FD | 	call	#__system___float_tointeger
0d2e8     14 FB 51 FC | 	wrword	result1, local06
0d2ec     28 4E 05 F1 | 	add	fp, #40
0d2f0     A7 12 02 FB | 	rdlong	arg01, fp
0d2f4     04 4E 05 F1 | 	add	fp, #4
0d2f8     A7 14 02 FB | 	rdlong	arg02, fp
0d2fc     2C 4E 85 F1 | 	sub	fp, #44
0d300     1F 14 E6 F4 | 	bitnot	arg02, #31
0d304     EC 61 B1 FD | 	call	#__system___float_add
0d308     28 4E 05 F1 | 	add	fp, #40
0d30c     A7 FA 61 FC | 	wrlong	result1, fp
0d310     28 4E 85 F1 | 	sub	fp, #40
0d314     FD 12 02 F6 | 	mov	arg01, result1
0d318     00 14 06 F6 | 	mov	arg02, #0
0d31c     01 16 06 F6 | 	mov	arg03, #1
0d320     D4 69 B1 FD | 	call	#__system___float_cmp
0d324     00 FA 55 F2 | 	cmps	result1, #0 wc
0d328     28 4E 05 C1 |  if_b	add	fp, #40
0d32c     A7 00 68 CC |  if_b	wrlong	#0, fp
0d330     28 4E 85 C1 |  if_b	sub	fp, #40
0d334     14 4E 05 F1 | 	add	fp, #20
0d338     A7 20 02 FB | 	rdlong	local02, fp
0d33c     01 20 06 F1 | 	add	local02, #1
0d340     A7 20 62 FC | 	wrlong	local02, fp
0d344     14 4E 85 F1 | 	sub	fp, #20
0d348     44 FF 9F FD | 	jmp	#LR__1076
0d34c                 | LR__1077
0d34c                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0d34c     A7 22 02 FB | 	rdlong	local03, fp
0d350     04 4E 05 F1 | 	add	fp, #4
0d354     A7 2C 02 FB | 	rdlong	local08, fp
0d358     16 23 02 F1 | 	add	local03, local08
0d35c     10 4E 05 F1 | 	add	fp, #16
0d360     A7 22 62 FC | 	wrlong	local03, fp
0d364     14 4E 85 F1 | 	sub	fp, #20
0d368                 | LR__1078
0d368     14 4E 05 F1 | 	add	fp, #20
0d36c     A7 26 02 FB | 	rdlong	local05, fp
0d370     14 4E 85 F1 | 	sub	fp, #20
0d374     00 27 56 F2 | 	cmps	local05, #256 wc
0d378     A8 00 90 3D |  if_ae	jmp	#LR__1079
0d37c     20 4E 05 F1 | 	add	fp, #32
0d380     A7 2C 02 FB | 	rdlong	local08, fp
0d384     09 2C 66 F0 | 	shl	local08, #9
0d388     0C 00 00 FF 
0d38c     D8 E4 05 F1 | 	add	objptr, ##6360
0d390     F2 2C 02 F1 | 	add	local08, objptr
0d394     0C 4E 85 F1 | 	sub	fp, #12
0d398     A7 2A 02 FB | 	rdlong	local07, fp
0d39c     01 2A 66 F0 | 	shl	local07, #1
0d3a0     16 2B 02 F1 | 	add	local07, local08
0d3a4     14 4E 05 F1 | 	add	fp, #20
0d3a8     A7 12 02 FB | 	rdlong	arg01, fp
0d3ac     28 4E 85 F1 | 	sub	fp, #40
0d3b0     0C 00 00 FF 
0d3b4     D8 E4 85 F1 | 	sub	objptr, ##6360
0d3b8     01 14 06 F6 | 	mov	arg02, #1
0d3bc     CC 69 B1 FD | 	call	#__system___float_tointeger
0d3c0     15 FB 51 FC | 	wrword	result1, local07
0d3c4     28 4E 05 F1 | 	add	fp, #40
0d3c8     A7 12 02 FB | 	rdlong	arg01, fp
0d3cc     30 4E 05 F1 | 	add	fp, #48
0d3d0     A7 14 02 FB | 	rdlong	arg02, fp
0d3d4     58 4E 85 F1 | 	sub	fp, #88
0d3d8     1F 14 E6 F4 | 	bitnot	arg02, #31
0d3dc     14 61 B1 FD | 	call	#__system___float_add
0d3e0     28 4E 05 F1 | 	add	fp, #40
0d3e4     A7 FA 61 FC | 	wrlong	result1, fp
0d3e8     28 4E 85 F1 | 	sub	fp, #40
0d3ec     FD 12 02 F6 | 	mov	arg01, result1
0d3f0     00 14 06 F6 | 	mov	arg02, #0
0d3f4     01 16 06 F6 | 	mov	arg03, #1
0d3f8     FC 68 B1 FD | 	call	#__system___float_cmp
0d3fc     00 FA 55 F2 | 	cmps	result1, #0 wc
0d400     28 4E 05 C1 |  if_b	add	fp, #40
0d404     A7 00 68 CC |  if_b	wrlong	#0, fp
0d408     28 4E 85 C1 |  if_b	sub	fp, #40
0d40c     14 4E 05 F1 | 	add	fp, #20
0d410     A7 2C 02 FB | 	rdlong	local08, fp
0d414     01 2C 06 F1 | 	add	local08, #1
0d418     A7 2C 62 FC | 	wrlong	local08, fp
0d41c     14 4E 85 F1 | 	sub	fp, #20
0d420     44 FF 9F FD | 	jmp	#LR__1078
0d424                 | LR__1079
0d424     20 4E 05 F1 | 	add	fp, #32
0d428     A7 26 02 FB | 	rdlong	local05, fp
0d42c     20 4E 85 F1 | 	sub	fp, #32
0d430     09 26 66 F0 | 	shl	local05, #9
0d434     0C 00 00 FF 
0d438     D8 E4 05 F1 | 	add	objptr, ##6360
0d43c     F2 26 02 F1 | 	add	local05, objptr
0d440     FE 27 06 F1 | 	add	local05, #510
0d444     13 01 58 FC | 	wrword	#0, local05
0d448     0C 00 00 FF 
0d44c     D8 E4 85 F1 | 	sub	objptr, ##6360
0d450                 | LR__1080
0d450     20 4E 05 F1 | 	add	fp, #32
0d454     A7 26 02 FB | 	rdlong	local05, fp
0d458     20 4E 85 F1 | 	sub	fp, #32
0d45c     09 26 66 F0 | 	shl	local05, #9
0d460     0C 00 00 FF 
0d464     D8 E4 05 F1 | 	add	objptr, ##6360
0d468     F2 26 02 F1 | 	add	local05, objptr
0d46c     FE 27 06 F1 | 	add	local05, #510
0d470     13 01 58 FC | 	wrword	#0, local05
0d474     0C 00 00 FF 
0d478     D8 E4 85 F1 | 	sub	objptr, ##6360
0d47c                 | LR__1081
0d47c     A7 F0 03 F6 | 	mov	ptra, fp
0d480     B2 00 A0 FD | 	call	#popregs_
0d484                 | _do_defenv_ret
0d484     2D 00 64 FD | 	ret
0d488                 | 
0d488                 | ' 
0d488                 | ' 
0d488                 | ' sub do_play
0d488                 | _do_play
0d488     06 4A 05 F6 | 	mov	COUNT_, #6
0d48c     A8 00 A0 FD | 	call	#pushregs_
0d490     7C F0 07 F1 | 	add	ptra, #124
0d494     68 4E 05 F1 | 	add	fp, #104
0d498     AB CB A1 FF 
0d49c     A7 D6 6B FC | 	wrlong	##1133991915, fp
0d4a0                 | ' speed_coeff=815.6614449376854599406528189911*(95.0/256.0)
0d4a0                 | ' 
0d4a0                 | ' for i=0 to 8 : params(i)=-2.0 : next i
0d4a0     64 4E 85 F1 | 	sub	fp, #100
0d4a4     A7 00 68 FC | 	wrlong	#0, fp
0d4a8     97 18 48 FB | 	callpa	#(@LR__1091-@LR__1090)>>2,fcache_load_ptr_
0d4ac                 | LR__1090
0d4ac     A7 16 02 FB | 	rdlong	arg03, fp
0d4b0     02 16 66 F0 | 	shl	arg03, #2
0d4b4     34 4E 05 F1 | 	add	fp, #52
0d4b8     A7 16 02 F1 | 	add	arg03, fp
0d4bc     00 00 E0 FF 
0d4c0     0B 01 68 FC | 	wrlong	##-1073741824, arg03
0d4c4     34 4E 85 F1 | 	sub	fp, #52
0d4c8     A7 1E 02 FB | 	rdlong	local01, fp
0d4cc     01 1E 06 F1 | 	add	local01, #1
0d4d0     A7 1E 62 FC | 	wrlong	local01, fp
0d4d4     09 1E 56 F2 | 	cmps	local01, #9 wc
0d4d8     D0 FF 9F CD |  if_b	jmp	#LR__1090
0d4dc                 | LR__1091
0d4dc     04 4E 85 F1 | 	sub	fp, #4
0d4e0     4A 00 00 FF 
0d4e4     B0 E4 05 F1 | 	add	objptr, ##38064
0d4e8     F2 20 02 FB | 	rdlong	local02, objptr
0d4ec     10 23 02 F6 | 	mov	local03, local02
0d4f0     01 22 66 F0 | 	shl	local03, #1
0d4f4     10 23 02 F1 | 	add	local03, local02
0d4f8     02 22 66 F0 | 	shl	local03, #2
0d4fc     03 00 00 FF 
0d500     04 E4 85 F1 | 	sub	objptr, ##1540
0d504     F2 22 02 F1 | 	add	local03, objptr
0d508     11 25 02 FB | 	rdlong	local04, local03
0d50c     A7 24 62 FC | 	wrlong	local04, fp
0d510                 | ' 'params(0)=0: params(1)=440.0 : params(2)=16.0 : params(3)=0.0 : params(4)=0.0 : params(5)=1.0 : params(6)=0.0 : params(7)=0.0 : 
0d510                 | ' 'chn		freq		   vol		   wave#	   env#		   len		   delay	   pan		: sus 
0d510                 | ' numpar=compiledline(lineptr_e).result.uresult
0d510                 | ' for i=numpar to 1 step -1 
0d510     04 4E 05 F1 | 	add	fp, #4
0d514     A7 24 62 FC | 	wrlong	local04, fp
0d518     04 4E 85 F1 | 	sub	fp, #4
0d51c     47 00 00 FF 
0d520     AC E4 85 F1 | 	sub	objptr, ##36524
0d524                 | LR__1092
0d524     9C DB BF FD | 	call	#_pop
0d528     5C 4E 05 F1 | 	add	fp, #92
0d52c     A7 FA 61 FC | 	wrlong	result1, fp
0d530     04 4E 05 F1 | 	add	fp, #4
0d534     A7 FC 61 FC | 	wrlong	result2, fp
0d538     04 4E 05 F1 | 	add	fp, #4
0d53c     A7 FE 61 FC | 	wrlong	result3, fp
0d540     60 4E 85 F1 | 	sub	fp, #96
0d544     A7 22 02 FB | 	rdlong	local03, fp
0d548     01 22 86 F1 | 	sub	local03, #1
0d54c     02 22 66 F0 | 	shl	local03, #2
0d550     34 4E 05 F1 | 	add	fp, #52
0d554     A7 22 02 F1 | 	add	local03, fp
0d558     24 4E 05 F1 | 	add	fp, #36
0d55c     A7 26 02 F6 | 	mov	local05, fp
0d560     13 13 02 F6 | 	mov	arg01, local05
0d564     5C 4E 85 F1 | 	sub	fp, #92
0d568     E4 7C B0 FD | 	call	#_converttofloat
0d56c     11 FB 61 FC | 	wrlong	result1, local03
0d570     04 4E 05 F1 | 	add	fp, #4
0d574     A7 1E 02 FB | 	rdlong	local01, fp
0d578     01 1E 86 F1 | 	sub	local01, #1
0d57c     A7 1E 62 FC | 	wrlong	local01, fp
0d580     04 4E 85 F1 | 	sub	fp, #4
0d584     01 1E 56 F2 | 	cmps	local01, #1 wc
0d588     98 FF 9F 3D |  if_ae	jmp	#LR__1092
0d58c                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
0d58c     38 4E 05 F1 | 	add	fp, #56
0d590     A7 12 02 FB | 	rdlong	arg01, fp
0d594     38 4E 85 F1 | 	sub	fp, #56
0d598     00 14 06 F6 | 	mov	arg02, #0
0d59c     01 16 06 F6 | 	mov	arg03, #1
0d5a0     54 67 B1 FD | 	call	#__system___float_cmp
0d5a4     00 FA 55 F2 | 	cmps	result1, #0 wc
0d5a8     0C 4E 05 C1 |  if_b	add	fp, #12
0d5ac     A7 00 68 CC |  if_b	wrlong	#0, fp
0d5b0     0C 4E 85 C1 |  if_b	sub	fp, #12
0d5b4     2C 00 90 CD |  if_b	jmp	#LR__1093
0d5b8     38 4E 05 F1 | 	add	fp, #56
0d5bc     A7 12 02 FB | 	rdlong	arg01, fp
0d5c0     38 4E 85 F1 | 	sub	fp, #56
0d5c4     01 14 06 F6 | 	mov	arg02, #1
0d5c8     C0 67 B1 FD | 	call	#__system___float_tointeger
0d5cc     FD 1E 52 F6 | 	abs	local01, result1 wc
0d5d0     07 1E 06 F5 | 	and	local01, #7
0d5d4     0F 1F 82 F6 | 	negc	local01, local01
0d5d8     0C 4E 05 F1 | 	add	fp, #12
0d5dc     A7 1E 62 FC | 	wrlong	local01, fp
0d5e0     0C 4E 85 F1 | 	sub	fp, #12
0d5e4                 | LR__1093
0d5e4                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
0d5e4     3C 4E 05 F1 | 	add	fp, #60
0d5e8     A7 12 02 FB | 	rdlong	arg01, fp
0d5ec     3C 4E 85 F1 | 	sub	fp, #60
0d5f0     00 14 06 F6 | 	mov	arg02, #0
0d5f4     01 16 06 F6 | 	mov	arg03, #1
0d5f8     FC 66 B1 FD | 	call	#__system___float_cmp
0d5fc     00 FA 55 F2 | 	cmps	result1, #0 wc
0d600     40 00 90 3D |  if_ae	jmp	#LR__1094
0d604     0C 4E 05 F1 | 	add	fp, #12
0d608     A7 20 02 FB | 	rdlong	local02, fp
0d60c     10 23 02 F6 | 	mov	local03, local02
0d610     01 22 66 F0 | 	shl	local03, #1
0d614     10 23 02 F1 | 	add	local03, local02
0d618     03 22 66 F0 | 	shl	local03, #3
0d61c     14 00 00 FF 
0d620     68 E5 05 F1 | 	add	objptr, ##10600
0d624     F2 22 02 F1 | 	add	local03, objptr
0d628     11 23 02 FB | 	rdlong	local03, local03
0d62c     60 4E 05 F1 | 	add	fp, #96
0d630     A7 22 62 FC | 	wrlong	local03, fp
0d634     6C 4E 85 F1 | 	sub	fp, #108
0d638     14 00 00 FF 
0d63c     68 E5 85 F1 | 	sub	objptr, ##10600
0d640     44 00 90 FD | 	jmp	#LR__1095
0d644                 | LR__1094
0d644     3C 4E 05 F1 | 	add	fp, #60
0d648     A7 24 02 FB | 	rdlong	local04, fp
0d64c     30 4E 05 F1 | 	add	fp, #48
0d650     A7 24 62 FC | 	wrlong	local04, fp
0d654     60 4E 85 F1 | 	sub	fp, #96
0d658     A7 20 02 FB | 	rdlong	local02, fp
0d65c     10 23 02 F6 | 	mov	local03, local02
0d660     01 22 66 F0 | 	shl	local03, #1
0d664     10 23 02 F1 | 	add	local03, local02
0d668     03 22 66 F0 | 	shl	local03, #3
0d66c     14 00 00 FF 
0d670     68 E5 05 F1 | 	add	objptr, ##10600
0d674     F2 22 02 F1 | 	add	local03, objptr
0d678     0C 4E 85 F1 | 	sub	fp, #12
0d67c     11 25 62 FC | 	wrlong	local04, local03
0d680     14 00 00 FF 
0d684     68 E5 85 F1 | 	sub	objptr, ##10600
0d688                 | LR__1095
0d688                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
0d688     44 4E 05 F1 | 	add	fp, #68
0d68c     A7 12 02 FB | 	rdlong	arg01, fp
0d690     44 4E 85 F1 | 	sub	fp, #68
0d694     00 14 06 F6 | 	mov	arg02, #0
0d698     01 16 06 F6 | 	mov	arg03, #1
0d69c     58 66 B1 FD | 	call	#__system___float_cmp
0d6a0     00 FA 55 F2 | 	cmps	result1, #0 wc
0d6a4     24 00 90 CD |  if_b	jmp	#LR__1096
0d6a8     44 4E 05 F1 | 	add	fp, #68
0d6ac     A7 12 02 FB | 	rdlong	arg01, fp
0d6b0     44 4E 85 F1 | 	sub	fp, #68
0d6b4     89 C1 20 FF 
0d6b8     6F 14 06 F6 | 	mov	arg02, ##1099108975
0d6bc     01 16 66 F6 | 	neg	arg03, #1
0d6c0     34 66 B1 FD | 	call	#__system___float_cmp
0d6c4     01 FA 55 F2 | 	cmps	result1, #1 wc
0d6c8     44 00 90 CD |  if_b	jmp	#LR__1097
0d6cc                 | LR__1096
0d6cc     0C 4E 05 F1 | 	add	fp, #12
0d6d0     A7 20 02 FB | 	rdlong	local02, fp
0d6d4     10 23 02 F6 | 	mov	local03, local02
0d6d8     01 22 66 F0 | 	shl	local03, #1
0d6dc     10 23 02 F1 | 	add	local03, local02
0d6e0     03 22 66 F0 | 	shl	local03, #3
0d6e4     14 00 00 FF 
0d6e8     68 E5 05 F1 | 	add	objptr, ##10600
0d6ec     F2 22 02 F1 | 	add	local03, objptr
0d6f0     0C 22 06 F1 | 	add	local03, #12
0d6f4     11 23 02 FB | 	rdlong	local03, local03
0d6f8     68 4E 05 F1 | 	add	fp, #104
0d6fc     A7 22 62 FC | 	wrlong	local03, fp
0d700     74 4E 85 F1 | 	sub	fp, #116
0d704     14 00 00 FF 
0d708     68 E5 85 F1 | 	sub	objptr, ##10600
0d70c     48 00 90 FD | 	jmp	#LR__1098
0d710                 | LR__1097
0d710     44 4E 05 F1 | 	add	fp, #68
0d714     A7 24 02 FB | 	rdlong	local04, fp
0d718     30 4E 05 F1 | 	add	fp, #48
0d71c     A7 24 62 FC | 	wrlong	local04, fp
0d720     68 4E 85 F1 | 	sub	fp, #104
0d724     A7 20 02 FB | 	rdlong	local02, fp
0d728     10 23 02 F6 | 	mov	local03, local02
0d72c     01 22 66 F0 | 	shl	local03, #1
0d730     10 23 02 F1 | 	add	local03, local02
0d734     03 22 66 F0 | 	shl	local03, #3
0d738     14 00 00 FF 
0d73c     68 E5 05 F1 | 	add	objptr, ##10600
0d740     F2 22 02 F1 | 	add	local03, objptr
0d744     0C 4E 85 F1 | 	sub	fp, #12
0d748     0C 22 06 F1 | 	add	local03, #12
0d74c     11 25 62 FC | 	wrlong	local04, local03
0d750     14 00 00 FF 
0d754     68 E5 85 F1 | 	sub	objptr, ##10600
0d758                 | LR__1098
0d758                 | ' if params(4)<0 orelse params(4)>8.0 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
0d758     48 4E 05 F1 | 	add	fp, #72
0d75c     A7 12 02 FB | 	rdlong	arg01, fp
0d760     48 4E 85 F1 | 	sub	fp, #72
0d764     00 14 06 F6 | 	mov	arg02, #0
0d768     01 16 06 F6 | 	mov	arg03, #1
0d76c     88 65 B1 FD | 	call	#__system___float_cmp
0d770     00 FA 55 F2 | 	cmps	result1, #0 wc
0d774     24 00 90 CD |  if_b	jmp	#LR__1099
0d778     48 4E 05 F1 | 	add	fp, #72
0d77c     A7 12 02 FB | 	rdlong	arg01, fp
0d780     48 4E 85 F1 | 	sub	fp, #72
0d784     00 80 20 FF 
0d788     00 14 06 F6 | 	mov	arg02, ##1090519040
0d78c     01 16 66 F6 | 	neg	arg03, #1
0d790     64 65 B1 FD | 	call	#__system___float_cmp
0d794     01 FA 55 F2 | 	cmps	result1, #1 wc
0d798     48 00 90 CD |  if_b	jmp	#LR__1100
0d79c                 | LR__1099
0d79c     0C 4E 05 F1 | 	add	fp, #12
0d7a0     A7 22 02 FB | 	rdlong	local03, fp
0d7a4     11 27 02 F6 | 	mov	local05, local03
0d7a8     01 26 66 F0 | 	shl	local05, #1
0d7ac     11 27 02 F1 | 	add	local05, local03
0d7b0     03 26 66 F0 | 	shl	local05, #3
0d7b4     14 00 00 FF 
0d7b8     68 E5 05 F1 | 	add	objptr, ##10600
0d7bc     F2 26 02 F1 | 	add	local05, objptr
0d7c0     04 26 06 F1 | 	add	local05, #4
0d7c4     13 27 C2 FA | 	rdbyte	local05, local05
0d7c8     13 25 E2 F8 | 	getbyte	local04, local05, #0
0d7cc     14 4E 05 F1 | 	add	fp, #20
0d7d0     A7 24 62 FC | 	wrlong	local04, fp
0d7d4     20 4E 85 F1 | 	sub	fp, #32
0d7d8     14 00 00 FF 
0d7dc     68 E5 85 F1 | 	sub	objptr, ##10600
0d7e0     54 00 90 FD | 	jmp	#LR__1101
0d7e4                 | LR__1100
0d7e4     48 4E 05 F1 | 	add	fp, #72
0d7e8     A7 12 02 FB | 	rdlong	arg01, fp
0d7ec     48 4E 85 F1 | 	sub	fp, #72
0d7f0     01 14 06 F6 | 	mov	arg02, #1
0d7f4     94 65 B1 FD | 	call	#__system___float_tointeger
0d7f8     20 4E 05 F1 | 	add	fp, #32
0d7fc     A7 FA 61 FC | 	wrlong	result1, fp
0d800     14 4E 85 F1 | 	sub	fp, #20
0d804     A7 20 02 FB | 	rdlong	local02, fp
0d808     10 23 02 F6 | 	mov	local03, local02
0d80c     01 22 66 F0 | 	shl	local03, #1
0d810     10 23 02 F1 | 	add	local03, local02
0d814     03 22 66 F0 | 	shl	local03, #3
0d818     14 00 00 FF 
0d81c     68 E5 05 F1 | 	add	objptr, ##10600
0d820     F2 22 02 F1 | 	add	local03, objptr
0d824     0C 4E 85 F1 | 	sub	fp, #12
0d828     04 22 06 F1 | 	add	local03, #4
0d82c     11 FB 41 FC | 	wrbyte	result1, local03
0d830     14 00 00 FF 
0d834     68 E5 85 F1 | 	sub	objptr, ##10600
0d838                 | LR__1101
0d838                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
0d838     4C 4E 05 F1 | 	add	fp, #76
0d83c     A7 12 02 FB | 	rdlong	arg01, fp
0d840     4C 4E 85 F1 | 	sub	fp, #76
0d844     00 14 06 F6 | 	mov	arg02, #0
0d848     01 16 06 F6 | 	mov	arg03, #1
0d84c     A8 64 B1 FD | 	call	#__system___float_cmp
0d850     00 FA 55 F2 | 	cmps	result1, #0 wc
0d854     24 00 90 CD |  if_b	jmp	#LR__1102
0d858     4C 4E 05 F1 | 	add	fp, #76
0d85c     A7 12 02 FB | 	rdlong	arg01, fp
0d860     4C 4E 85 F1 | 	sub	fp, #76
0d864     00 80 20 FF 
0d868     00 14 06 F6 | 	mov	arg02, ##1090519040
0d86c     01 16 66 F6 | 	neg	arg03, #1
0d870     84 64 B1 FD | 	call	#__system___float_cmp
0d874     01 FA 55 F2 | 	cmps	result1, #1 wc
0d878     48 00 90 CD |  if_b	jmp	#LR__1103
0d87c                 | LR__1102
0d87c     0C 4E 05 F1 | 	add	fp, #12
0d880     A7 22 02 FB | 	rdlong	local03, fp
0d884     11 27 02 F6 | 	mov	local05, local03
0d888     01 26 66 F0 | 	shl	local05, #1
0d88c     11 27 02 F1 | 	add	local05, local03
0d890     03 26 66 F0 | 	shl	local05, #3
0d894     14 00 00 FF 
0d898     68 E5 05 F1 | 	add	objptr, ##10600
0d89c     F2 26 02 F1 | 	add	local05, objptr
0d8a0     05 26 06 F1 | 	add	local05, #5
0d8a4     13 27 C2 FA | 	rdbyte	local05, local05
0d8a8     13 25 E2 F8 | 	getbyte	local04, local05, #0
0d8ac     18 4E 05 F1 | 	add	fp, #24
0d8b0     A7 24 62 FC | 	wrlong	local04, fp
0d8b4     24 4E 85 F1 | 	sub	fp, #36
0d8b8     14 00 00 FF 
0d8bc     68 E5 85 F1 | 	sub	objptr, ##10600
0d8c0     54 00 90 FD | 	jmp	#LR__1104
0d8c4                 | LR__1103
0d8c4     4C 4E 05 F1 | 	add	fp, #76
0d8c8     A7 12 02 FB | 	rdlong	arg01, fp
0d8cc     4C 4E 85 F1 | 	sub	fp, #76
0d8d0     01 14 06 F6 | 	mov	arg02, #1
0d8d4     B4 64 B1 FD | 	call	#__system___float_tointeger
0d8d8     24 4E 05 F1 | 	add	fp, #36
0d8dc     A7 FA 61 FC | 	wrlong	result1, fp
0d8e0     18 4E 85 F1 | 	sub	fp, #24
0d8e4     A7 20 02 FB | 	rdlong	local02, fp
0d8e8     10 23 02 F6 | 	mov	local03, local02
0d8ec     01 22 66 F0 | 	shl	local03, #1
0d8f0     10 23 02 F1 | 	add	local03, local02
0d8f4     03 22 66 F0 | 	shl	local03, #3
0d8f8     14 00 00 FF 
0d8fc     68 E5 05 F1 | 	add	objptr, ##10600
0d900     F2 22 02 F1 | 	add	local03, objptr
0d904     0C 4E 85 F1 | 	sub	fp, #12
0d908     05 22 06 F1 | 	add	local03, #5
0d90c     11 FB 41 FC | 	wrbyte	result1, local03
0d910     14 00 00 FF 
0d914     68 E5 85 F1 | 	sub	objptr, ##10600
0d918                 | LR__1104
0d918                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
0d918     50 4E 05 F1 | 	add	fp, #80
0d91c     A7 12 02 FB | 	rdlong	arg01, fp
0d920     50 4E 85 F1 | 	sub	fp, #80
0d924     00 14 06 F6 | 	mov	arg02, #0
0d928     01 16 06 F6 | 	mov	arg03, #1
0d92c     C8 63 B1 FD | 	call	#__system___float_cmp
0d930     00 FA 55 F2 | 	cmps	result1, #0 wc
0d934     24 00 90 CD |  if_b	jmp	#LR__1105
0d938     50 4E 05 F1 | 	add	fp, #80
0d93c     A7 12 02 FB | 	rdlong	arg01, fp
0d940     50 4E 85 F1 | 	sub	fp, #80
0d944     00 3D 22 FF 
0d948     00 14 06 F6 | 	mov	arg02, ##1148846080
0d94c     01 16 66 F6 | 	neg	arg03, #1
0d950     A4 63 B1 FD | 	call	#__system___float_cmp
0d954     01 FA 55 F2 | 	cmps	result1, #1 wc
0d958     44 00 90 CD |  if_b	jmp	#LR__1106
0d95c                 | LR__1105
0d95c     0C 4E 05 F1 | 	add	fp, #12
0d960     A7 20 02 FB | 	rdlong	local02, fp
0d964     10 23 02 F6 | 	mov	local03, local02
0d968     01 22 66 F0 | 	shl	local03, #1
0d96c     10 23 02 F1 | 	add	local03, local02
0d970     03 22 66 F0 | 	shl	local03, #3
0d974     14 00 00 FF 
0d978     68 E5 05 F1 | 	add	objptr, ##10600
0d97c     F2 22 02 F1 | 	add	local03, objptr
0d980     08 22 06 F1 | 	add	local03, #8
0d984     11 25 02 FB | 	rdlong	local04, local03
0d988     6C 4E 05 F1 | 	add	fp, #108
0d98c     A7 24 62 FC | 	wrlong	local04, fp
0d990     78 4E 85 F1 | 	sub	fp, #120
0d994     14 00 00 FF 
0d998     68 E5 85 F1 | 	sub	objptr, ##10600
0d99c     48 00 90 FD | 	jmp	#LR__1107
0d9a0                 | LR__1106
0d9a0     50 4E 05 F1 | 	add	fp, #80
0d9a4     A7 24 02 FB | 	rdlong	local04, fp
0d9a8     28 4E 05 F1 | 	add	fp, #40
0d9ac     A7 24 62 FC | 	wrlong	local04, fp
0d9b0     6C 4E 85 F1 | 	sub	fp, #108
0d9b4     A7 20 02 FB | 	rdlong	local02, fp
0d9b8     10 23 02 F6 | 	mov	local03, local02
0d9bc     01 22 66 F0 | 	shl	local03, #1
0d9c0     10 23 02 F1 | 	add	local03, local02
0d9c4     03 22 66 F0 | 	shl	local03, #3
0d9c8     14 00 00 FF 
0d9cc     68 E5 05 F1 | 	add	objptr, ##10600
0d9d0     F2 22 02 F1 | 	add	local03, objptr
0d9d4     0C 4E 85 F1 | 	sub	fp, #12
0d9d8     08 22 06 F1 | 	add	local03, #8
0d9dc     11 25 62 FC | 	wrlong	local04, local03
0d9e0     14 00 00 FF 
0d9e4     68 E5 85 F1 | 	sub	objptr, ##10600
0d9e8                 | LR__1107
0d9e8                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
0d9e8     40 4E 05 F1 | 	add	fp, #64
0d9ec     A7 12 02 FB | 	rdlong	arg01, fp
0d9f0     40 4E 85 F1 | 	sub	fp, #64
0d9f4     00 14 06 F6 | 	mov	arg02, #0
0d9f8     01 16 06 F6 | 	mov	arg03, #1
0d9fc     F8 62 B1 FD | 	call	#__system___float_cmp
0da00     00 FA 55 F2 | 	cmps	result1, #0 wc
0da04     24 00 90 CD |  if_b	jmp	#LR__1108
0da08     40 4E 05 F1 | 	add	fp, #64
0da0c     A7 12 02 FB | 	rdlong	arg01, fp
0da10     40 4E 85 F1 | 	sub	fp, #64
0da14     20 0E 23 FF 
0da18     00 14 06 F6 | 	mov	arg02, ##1176256512
0da1c     01 16 66 F6 | 	neg	arg03, #1
0da20     D4 62 B1 FD | 	call	#__system___float_cmp
0da24     01 FA 55 F2 | 	cmps	result1, #1 wc
0da28     44 00 90 CD |  if_b	jmp	#LR__1109
0da2c                 | LR__1108
0da2c     0C 4E 05 F1 | 	add	fp, #12
0da30     A7 22 02 FB | 	rdlong	local03, fp
0da34     11 25 02 F6 | 	mov	local04, local03
0da38     01 24 66 F0 | 	shl	local04, #1
0da3c     11 25 02 F1 | 	add	local04, local03
0da40     03 24 66 F0 | 	shl	local04, #3
0da44     14 00 00 FF 
0da48     68 E5 05 F1 | 	add	objptr, ##10600
0da4c     F2 24 02 F1 | 	add	local04, objptr
0da50     06 24 06 F1 | 	add	local04, #6
0da54     12 25 E2 FA | 	rdword	local04, local04
0da58     1C 4E 05 F1 | 	add	fp, #28
0da5c     A7 24 62 FC | 	wrlong	local04, fp
0da60     28 4E 85 F1 | 	sub	fp, #40
0da64     14 00 00 FF 
0da68     68 E5 85 F1 | 	sub	objptr, ##10600
0da6c     54 00 90 FD | 	jmp	#LR__1110
0da70                 | LR__1109
0da70     40 4E 05 F1 | 	add	fp, #64
0da74     A7 12 02 FB | 	rdlong	arg01, fp
0da78     40 4E 85 F1 | 	sub	fp, #64
0da7c     01 14 06 F6 | 	mov	arg02, #1
0da80     08 63 B1 FD | 	call	#__system___float_tointeger
0da84     28 4E 05 F1 | 	add	fp, #40
0da88     A7 FA 61 FC | 	wrlong	result1, fp
0da8c     1C 4E 85 F1 | 	sub	fp, #28
0da90     A7 20 02 FB | 	rdlong	local02, fp
0da94     10 23 02 F6 | 	mov	local03, local02
0da98     01 22 66 F0 | 	shl	local03, #1
0da9c     10 23 02 F1 | 	add	local03, local02
0daa0     03 22 66 F0 | 	shl	local03, #3
0daa4     14 00 00 FF 
0daa8     68 E5 05 F1 | 	add	objptr, ##10600
0daac     F2 22 02 F1 | 	add	local03, objptr
0dab0     0C 4E 85 F1 | 	sub	fp, #12
0dab4     06 22 06 F1 | 	add	local03, #6
0dab8     11 FB 51 FC | 	wrword	result1, local03
0dabc     14 00 00 FF 
0dac0     68 E5 85 F1 | 	sub	objptr, ##10600
0dac4                 | LR__1110
0dac4                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
0dac4     54 4E 05 F1 | 	add	fp, #84
0dac8     A7 12 02 FB | 	rdlong	arg01, fp
0dacc     54 4E 85 F1 | 	sub	fp, #84
0dad0     00 C0 5F FF 
0dad4     00 14 06 F6 | 	mov	arg02, ##-1082130432
0dad8     01 16 06 F6 | 	mov	arg03, #1
0dadc     18 62 B1 FD | 	call	#__system___float_cmp
0dae0     00 FA 55 F2 | 	cmps	result1, #0 wc
0dae4     24 00 90 CD |  if_b	jmp	#LR__1111
0dae8     54 4E 05 F1 | 	add	fp, #84
0daec     A7 12 02 FB | 	rdlong	arg01, fp
0daf0     54 4E 85 F1 | 	sub	fp, #84
0daf4     00 C0 1F FF 
0daf8     00 14 06 F6 | 	mov	arg02, ##1065353216
0dafc     01 16 66 F6 | 	neg	arg03, #1
0db00     F4 61 B1 FD | 	call	#__system___float_cmp
0db04     01 FA 55 F2 | 	cmps	result1, #1 wc
0db08     44 00 90 CD |  if_b	jmp	#LR__1112
0db0c                 | LR__1111
0db0c     0C 4E 05 F1 | 	add	fp, #12
0db10     A7 20 02 FB | 	rdlong	local02, fp
0db14     10 23 02 F6 | 	mov	local03, local02
0db18     01 22 66 F0 | 	shl	local03, #1
0db1c     10 23 02 F1 | 	add	local03, local02
0db20     03 22 66 F0 | 	shl	local03, #3
0db24     14 00 00 FF 
0db28     68 E5 05 F1 | 	add	objptr, ##10600
0db2c     F2 22 02 F1 | 	add	local03, objptr
0db30     10 22 06 F1 | 	add	local03, #16
0db34     11 25 02 FB | 	rdlong	local04, local03
0db38     64 4E 05 F1 | 	add	fp, #100
0db3c     A7 24 62 FC | 	wrlong	local04, fp
0db40     70 4E 85 F1 | 	sub	fp, #112
0db44     14 00 00 FF 
0db48     68 E5 85 F1 | 	sub	objptr, ##10600
0db4c     48 00 90 FD | 	jmp	#LR__1113
0db50                 | LR__1112
0db50     54 4E 05 F1 | 	add	fp, #84
0db54     A7 26 02 FB | 	rdlong	local05, fp
0db58     1C 4E 05 F1 | 	add	fp, #28
0db5c     A7 26 62 FC | 	wrlong	local05, fp
0db60     64 4E 85 F1 | 	sub	fp, #100
0db64     A7 20 02 FB | 	rdlong	local02, fp
0db68     10 23 02 F6 | 	mov	local03, local02
0db6c     01 22 66 F0 | 	shl	local03, #1
0db70     10 23 02 F1 | 	add	local03, local02
0db74     03 22 66 F0 | 	shl	local03, #3
0db78     14 00 00 FF 
0db7c     68 E5 05 F1 | 	add	objptr, ##10600
0db80     F2 22 02 F1 | 	add	local03, objptr
0db84     0C 4E 85 F1 | 	sub	fp, #12
0db88     10 22 06 F1 | 	add	local03, #16
0db8c     11 27 62 FC | 	wrlong	local05, local03
0db90     14 00 00 FF 
0db94     68 E5 85 F1 | 	sub	objptr, ##10600
0db98                 | LR__1113
0db98                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
0db98     58 4E 05 F1 | 	add	fp, #88
0db9c     A7 12 02 FB | 	rdlong	arg01, fp
0dba0     58 4E 85 F1 | 	sub	fp, #88
0dba4     00 14 06 F6 | 	mov	arg02, #0
0dba8     01 16 06 F6 | 	mov	arg03, #1
0dbac     48 61 B1 FD | 	call	#__system___float_cmp
0dbb0     00 FA 55 F2 | 	cmps	result1, #0 wc
0dbb4     24 00 90 CD |  if_b	jmp	#LR__1114
0dbb8     58 4E 05 F1 | 	add	fp, #88
0dbbc     A7 12 02 FB | 	rdlong	arg01, fp
0dbc0     58 4E 85 F1 | 	sub	fp, #88
0dbc4     80 BF 21 FF 
0dbc8     00 14 06 F6 | 	mov	arg02, ##1132396544
0dbcc     01 16 66 F6 | 	neg	arg03, #1
0dbd0     24 61 B1 FD | 	call	#__system___float_cmp
0dbd4     01 FA 55 F2 | 	cmps	result1, #1 wc
0dbd8     44 00 90 CD |  if_b	jmp	#LR__1115
0dbdc                 | LR__1114
0dbdc     0C 4E 05 F1 | 	add	fp, #12
0dbe0     A7 22 02 FB | 	rdlong	local03, fp
0dbe4     11 27 02 F6 | 	mov	local05, local03
0dbe8     01 26 66 F0 | 	shl	local05, #1
0dbec     11 27 02 F1 | 	add	local05, local03
0dbf0     03 26 66 F0 | 	shl	local05, #3
0dbf4     14 00 00 FF 
0dbf8     68 E5 05 F1 | 	add	objptr, ##10600
0dbfc     F2 26 02 F1 | 	add	local05, objptr
0dc00     14 26 06 F1 | 	add	local05, #20
0dc04     13 25 E2 FA | 	rdword	local04, local05
0dc08     20 4E 05 F1 | 	add	fp, #32
0dc0c     A7 24 62 FC | 	wrlong	local04, fp
0dc10     2C 4E 85 F1 | 	sub	fp, #44
0dc14     14 00 00 FF 
0dc18     68 E5 85 F1 | 	sub	objptr, ##10600
0dc1c     54 00 90 FD | 	jmp	#LR__1116
0dc20                 | LR__1115
0dc20     58 4E 05 F1 | 	add	fp, #88
0dc24     A7 12 02 FB | 	rdlong	arg01, fp
0dc28     58 4E 85 F1 | 	sub	fp, #88
0dc2c     01 14 06 F6 | 	mov	arg02, #1
0dc30     58 61 B1 FD | 	call	#__system___float_tointeger
0dc34     2C 4E 05 F1 | 	add	fp, #44
0dc38     A7 FA 61 FC | 	wrlong	result1, fp
0dc3c     20 4E 85 F1 | 	sub	fp, #32
0dc40     A7 20 02 FB | 	rdlong	local02, fp
0dc44     10 23 02 F6 | 	mov	local03, local02
0dc48     01 22 66 F0 | 	shl	local03, #1
0dc4c     10 23 02 F1 | 	add	local03, local02
0dc50     03 22 66 F0 | 	shl	local03, #3
0dc54     14 00 00 FF 
0dc58     68 E5 05 F1 | 	add	objptr, ##10600
0dc5c     F2 22 02 F1 | 	add	local03, objptr
0dc60     0C 4E 85 F1 | 	sub	fp, #12
0dc64     14 22 06 F1 | 	add	local03, #20
0dc68     11 FB 51 FC | 	wrword	result1, local03
0dc6c     14 00 00 FF 
0dc70     68 E5 85 F1 | 	sub	objptr, ##10600
0dc74                 | LR__1116
0dc74     6C 4E 05 F1 | 	add	fp, #108
0dc78     A7 14 02 FB | 	rdlong	arg02, fp
0dc7c     6C 4E 85 F1 | 	sub	fp, #108
0dc80     FC 16 20 FF 
0dc84     54 12 06 F6 | 	mov	arg01, ##1076754516
0dc88     E4 6B B1 FD | 	call	#__system____builtin_logbase
0dc8c     FD 24 02 F6 | 	mov	local04, result1
0dc90     1E 14 C6 F9 | 	decod	arg02, #30
0dc94     FC 16 20 FF 
0dc98     54 12 06 F6 | 	mov	arg01, ##1076754516
0dc9c     D0 6B B1 FD | 	call	#__system____builtin_logbase
0dca0     FD 14 02 F6 | 	mov	arg02, result1
0dca4     12 13 02 F6 | 	mov	arg01, local04
0dca8     1C 5E B1 FD | 	call	#__system___float_div
0dcac     FD 12 02 F6 | 	mov	arg01, result1
0dcb0     00 14 06 F6 | 	mov	arg02, #0
0dcb4     D4 60 B1 FD | 	call	#__system___float_tointeger
0dcb8     30 4E 05 F1 | 	add	fp, #48
0dcbc     A7 FA 61 FC | 	wrlong	result1, fp
0dcc0     1E 24 C6 F9 | 	decod	local04, #30
0dcc4     FD 12 02 F6 | 	mov	arg01, result1
0dcc8     30 4E 85 F1 | 	sub	fp, #48
0dccc     05 12 06 F1 | 	add	arg01, #5
0dcd0     09 13 52 F6 | 	abs	arg01, arg01 wc
0dcd4     1F 28 C6 C9 |  if_b	decod	local06, #31
0dcd8     00 28 06 36 |  if_ae	mov	local06, #0
0dcdc     E0 57 B1 FD | 	call	#__system___float_fromuns
0dce0     14 FB 61 F5 | 	xor	result1, local06
0dce4     FD 14 02 F6 | 	mov	arg02, result1
0dce8     12 13 02 F6 | 	mov	arg01, local04
0dcec     B8 6A B1 FD | 	call	#__system____builtin_powf
0dcf0     FD 12 02 F6 | 	mov	arg01, result1
0dcf4     01 14 06 F6 | 	mov	arg02, #1
0dcf8     90 60 B1 FD | 	call	#__system___float_tointeger
0dcfc     10 4E 05 F1 | 	add	fp, #16
0dd00     A7 FA 61 FC | 	wrlong	result1, fp
0dd04                 | ' skip=round(2^(lfreq+5))
0dd04                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0dd04     10 4E 85 F1 | 	sub	fp, #16
0dd08     40 00 00 FF 
0dd0c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0dd10     30 00 90 CD |  if_b	jmp	#LR__1117
0dd14     10 4E 05 F1 | 	add	fp, #16
0dd18     A7 1E 02 FB | 	rdlong	local01, fp
0dd1c     0F 25 52 F6 | 	abs	local04, local01 wc
0dd20     0F 24 46 F0 | 	shr	local04, #15
0dd24     12 25 82 F6 | 	negc	local04, local04
0dd28     0C 4E 85 F1 | 	sub	fp, #12
0dd2c     A7 24 62 FC | 	wrlong	local04, fp
0dd30     0C 4E 05 F1 | 	add	fp, #12
0dd34     40 00 80 FF 
0dd38     A7 00 68 FC | 	wrlong	##32768, fp
0dd3c     10 4E 85 F1 | 	sub	fp, #16
0dd40     0C 00 90 FD | 	jmp	#LR__1118
0dd44                 | LR__1117
0dd44     04 4E 05 F1 | 	add	fp, #4
0dd48     A7 02 68 FC | 	wrlong	#1, fp
0dd4c     04 4E 85 F1 | 	sub	fp, #4
0dd50                 | LR__1118
0dd50     6C 4E 05 F1 | 	add	fp, #108
0dd54     A7 14 02 FB | 	rdlong	arg02, fp
0dd58     6C 4E 85 F1 | 	sub	fp, #108
0dd5c     3E 2C 25 FF 
0dd60     3C 12 06 F6 | 	mov	arg01, ##1247312956
0dd64     60 5D B1 FD | 	call	#__system___float_div
0dd68     FD 24 02 F6 | 	mov	local04, result1
0dd6c     04 4E 05 F1 | 	add	fp, #4
0dd70     A7 12 02 FB | 	rdlong	arg01, fp
0dd74     04 4E 85 F1 | 	sub	fp, #4
0dd78     09 13 52 F6 | 	abs	arg01, arg01 wc
0dd7c     1F 28 C6 C9 |  if_b	decod	local06, #31
0dd80     00 28 06 36 |  if_ae	mov	local06, #0
0dd84     38 57 B1 FD | 	call	#__system___float_fromuns
0dd88     14 FB 61 F5 | 	xor	result1, local06
0dd8c     FD 1E 02 F6 | 	mov	local01, result1
0dd90     1E 20 C6 F9 | 	decod	local02, #30
0dd94     0D 12 06 F6 | 	mov	arg01, #13
0dd98     30 4E 05 F1 | 	add	fp, #48
0dd9c     A7 26 02 FB | 	rdlong	local05, fp
0dda0     30 4E 85 F1 | 	sub	fp, #48
0dda4     13 13 82 F1 | 	sub	arg01, local05
0dda8     09 13 52 F6 | 	abs	arg01, arg01 wc
0ddac     1F 28 C6 C9 |  if_b	decod	local06, #31
0ddb0     00 28 06 36 |  if_ae	mov	local06, #0
0ddb4     08 57 B1 FD | 	call	#__system___float_fromuns
0ddb8     14 FB 61 F5 | 	xor	result1, local06
0ddbc     FD 14 02 F6 | 	mov	arg02, result1
0ddc0     10 13 02 F6 | 	mov	arg01, local02
0ddc4     E0 69 B1 FD | 	call	#__system____builtin_powf
0ddc8     FD 14 02 F6 | 	mov	arg02, result1
0ddcc     0F 13 02 F6 | 	mov	arg01, local01
0ddd0     F0 5A B1 FD | 	call	#__system___float_mul
0ddd4     FD 14 02 F6 | 	mov	arg02, result1
0ddd8     12 13 02 F6 | 	mov	arg01, local04
0dddc     E8 5C B1 FD | 	call	#__system___float_div
0dde0     FD 12 02 F6 | 	mov	arg01, result1
0dde4     01 14 06 F6 | 	mov	arg02, #1
0dde8     A0 5F B1 FD | 	call	#__system___float_tointeger
0ddec     34 4E 05 F1 | 	add	fp, #52
0ddf0     A7 FA 61 FC | 	wrlong	result1, fp
0ddf4     34 4E 05 F1 | 	add	fp, #52
0ddf8     A7 12 02 FB | 	rdlong	arg01, fp
0ddfc     10 4E 05 F1 | 	add	fp, #16
0de00     A7 14 02 FB | 	rdlong	arg02, fp
0de04     78 4E 85 F1 | 	sub	fp, #120
0de08     BC 5C B1 FD | 	call	#__system___float_div
0de0c     FD 12 02 F6 | 	mov	arg01, result1
0de10     01 14 06 F6 | 	mov	arg02, #1
0de14     74 5F B1 FD | 	call	#__system___float_tointeger
0de18     FD 24 02 F6 | 	mov	local04, result1
0de1c     14 4E 05 F1 | 	add	fp, #20
0de20     A7 24 62 FC | 	wrlong	local04, fp
0de24     5C 4E 05 F1 | 	add	fp, #92
0de28     A7 14 02 FB | 	rdlong	arg02, fp
0de2c     70 4E 85 F1 | 	sub	fp, #112
0de30     00 00 23 FF 
0de34     00 12 06 F6 | 	mov	arg01, ##1174405120
0de38     88 5A B1 FD | 	call	#__system___float_mul
0de3c     FD 12 02 F6 | 	mov	arg01, result1
0de40     01 14 06 F6 | 	mov	arg02, #1
0de44     44 5F B1 FD | 	call	#__system___float_tointeger
0de48     0D 24 C6 F9 | 	decod	local04, #13
0de4c     FD 24 02 F1 | 	add	local04, result1
0de50     18 4E 05 F1 | 	add	fp, #24
0de54     A7 24 62 FC | 	wrlong	local04, fp
0de58     5C 4E 05 F1 | 	add	fp, #92
0de5c     A7 14 02 FB | 	rdlong	arg02, fp
0de60     74 4E 85 F1 | 	sub	fp, #116
0de64     00 3D 22 FF 
0de68     00 12 06 F6 | 	mov	arg01, ##1148846080
0de6c     54 5A B1 FD | 	call	#__system___float_mul
0de70     FD 12 02 F6 | 	mov	arg01, result1
0de74     01 14 06 F6 | 	mov	arg02, #1
0de78     10 5F B1 FD | 	call	#__system___float_tointeger
0de7c     1C 4E 05 F1 | 	add	fp, #28
0de80     A7 FA 61 FC | 	wrlong	result1, fp
0de84     37 00 00 FF 
0de88     40 E4 05 F1 | 	add	objptr, ##28224
0de8c     F2 24 02 FB | 	rdlong	local04, objptr
0de90     37 00 00 FF 
0de94     40 E4 85 F1 | 	sub	objptr, ##28224
0de98     10 4E 85 F1 | 	sub	fp, #16
0de9c     A7 20 02 FB | 	rdlong	local02, fp
0dea0     06 20 66 F0 | 	shl	local02, #6
0dea4     10 25 02 F1 | 	add	local04, local02
0dea8     04 4E 85 F1 | 	sub	fp, #4
0deac     A7 24 62 FC | 	wrlong	local04, fp
0deb0                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
0deb0                 | '  
0deb0                 | '   
0deb0                 | ' 'print period,skip
0deb0                 | ' speed=round(speed_coeff/slen)
0deb0                 | ' ipan=8192+round(8192*pan)
0deb0                 | ' ivol=round(1000.0*vol)
0deb0                 | ' base2=base+64*channel
0deb0                 | ' 'skip=round(freq*3.9827219) 
0deb0                 | ' if wave <32 then 
0deb0     18 4E 05 F1 | 	add	fp, #24
0deb4     A7 24 02 FB | 	rdlong	local04, fp
0deb8     20 4E 85 F1 | 	sub	fp, #32
0debc     20 24 56 F2 | 	cmps	local04, #32 wc
0dec0     2C 00 90 3D |  if_ae	jmp	#LR__1119
0dec4     08 4E 05 F1 | 	add	fp, #8
0dec8     A7 12 02 FB | 	rdlong	arg01, fp
0decc     08 12 06 F1 | 	add	arg01, #8
0ded0     18 4E 05 F1 | 	add	fp, #24
0ded4     A7 14 02 FB | 	rdlong	arg02, fp
0ded8     20 4E 85 F1 | 	sub	fp, #32
0dedc     0B 14 66 F0 | 	shl	arg02, #11
0dee0     00 00 60 FF 
0dee4     00 14 06 F1 | 	add	arg02, ##-1073741824
0dee8     09 15 62 FC | 	wrlong	arg02, arg01
0deec     18 00 90 FD | 	jmp	#LR__1120
0def0                 | LR__1119
0def0     08 4E 05 F1 | 	add	fp, #8
0def4     A7 12 02 FB | 	rdlong	arg01, fp
0def8     08 4E 85 F1 | 	sub	fp, #8
0defc     08 12 06 F1 | 	add	arg01, #8
0df00     00 00 E4 FF 
0df04     09 01 68 FC | 	wrlong	##-939524096, arg01
0df08                 | LR__1120
0df08     08 4E 05 F1 | 	add	fp, #8
0df0c     A7 12 02 FB | 	rdlong	arg01, fp
0df10     10 12 06 F1 | 	add	arg01, #16
0df14     04 00 80 FF 
0df18     09 01 68 FC | 	wrlong	##2048, arg01
0df1c     A7 12 02 FB | 	rdlong	arg01, fp
0df20     0C 12 06 F1 | 	add	arg01, #12
0df24     09 01 68 FC | 	wrlong	#0, arg01
0df28     A7 12 02 FB | 	rdlong	arg01, fp
0df2c     14 12 06 F1 | 	add	arg01, #20
0df30     14 4E 05 F1 | 	add	fp, #20
0df34     A7 14 02 FB | 	rdlong	arg02, fp
0df38     09 15 52 FC | 	wrword	arg02, arg01
0df3c     14 4E 85 F1 | 	sub	fp, #20
0df40     A7 12 02 FB | 	rdlong	arg01, fp
0df44     16 12 06 F1 | 	add	arg01, #22
0df48     10 4E 05 F1 | 	add	fp, #16
0df4c     A7 14 02 FB | 	rdlong	arg02, fp
0df50     09 15 52 FC | 	wrword	arg02, arg01
0df54                 | ' lpoke base2+16,2048
0df54                 | ' lpoke base2+12,0
0df54                 | ' dpoke base2+20,ivol 
0df54                 | ' dpoke base2+22,ipan 
0df54                 | ' if wave<32 then
0df54     08 4E 05 F1 | 	add	fp, #8
0df58     A7 24 02 FB | 	rdlong	local04, fp
0df5c     20 4E 85 F1 | 	sub	fp, #32
0df60     20 24 56 F2 | 	cmps	local04, #32 wc
0df64     38 00 90 3D |  if_ae	jmp	#LR__1121
0df68     08 4E 05 F1 | 	add	fp, #8
0df6c     A7 12 02 FB | 	rdlong	arg01, fp
0df70     18 12 06 F1 | 	add	arg01, #24
0df74     2C 4E 05 F1 | 	add	fp, #44
0df78     A7 14 02 FB | 	rdlong	arg02, fp
0df7c     09 15 52 FC | 	wrword	arg02, arg01
0df80     2C 4E 85 F1 | 	sub	fp, #44
0df84     A7 12 02 FB | 	rdlong	arg01, fp
0df88     1A 12 06 F1 | 	add	arg01, #26
0df8c     08 4E 05 F1 | 	add	fp, #8
0df90     A7 14 02 FB | 	rdlong	arg02, fp
0df94     10 4E 85 F1 | 	sub	fp, #16
0df98     09 15 52 FC | 	wrword	arg02, arg01
0df9c     48 00 90 FD | 	jmp	#LR__1122
0dfa0                 | LR__1121
0dfa0     08 4E 05 F1 | 	add	fp, #8
0dfa4     A7 24 02 FB | 	rdlong	local04, fp
0dfa8     18 24 06 F1 | 	add	local04, #24
0dfac     64 4E 05 F1 | 	add	fp, #100
0dfb0     A7 14 02 FB | 	rdlong	arg02, fp
0dfb4     6C 4E 85 F1 | 	sub	fp, #108
0dfb8     3E 2C 25 FF 
0dfbc     3C 12 06 F6 | 	mov	arg01, ##1247312956
0dfc0     04 5B B1 FD | 	call	#__system___float_div
0dfc4     FD 12 02 F6 | 	mov	arg01, result1
0dfc8     01 14 06 F6 | 	mov	arg02, #1
0dfcc     BC 5D B1 FD | 	call	#__system___float_tointeger
0dfd0     12 FB 51 FC | 	wrword	result1, local04
0dfd4     08 4E 05 F1 | 	add	fp, #8
0dfd8     A7 12 02 FB | 	rdlong	arg01, fp
0dfdc     08 4E 85 F1 | 	sub	fp, #8
0dfe0     1A 12 06 F1 | 	add	arg01, #26
0dfe4     09 01 5A FC | 	wrword	#256, arg01
0dfe8                 | LR__1122
0dfe8     08 4E 05 F1 | 	add	fp, #8
0dfec     A7 12 02 FB | 	rdlong	arg01, fp
0dff0     1C 12 06 F1 | 	add	arg01, #28
0dff4     09 01 68 FC | 	wrlong	#0, arg01
0dff8     A7 12 02 FB | 	rdlong	arg01, fp
0dffc     20 12 06 F1 | 	add	arg01, #32
0e000     09 01 68 FC | 	wrlong	#0, arg01
0e004                 | ' lpoke base2+28,$0000_0000
0e004                 | ' lpoke base2+32,0 
0e004                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
0e004     1C 4E 05 F1 | 	add	fp, #28
0e008     A7 24 02 FB | 	rdlong	local04, fp
0e00c     24 4E 85 F1 | 	sub	fp, #36
0e010     08 24 0E F2 | 	cmp	local04, #8 wz
0e014     18 00 90 5D |  if_ne	jmp	#LR__1123
0e018     08 4E 05 F1 | 	add	fp, #8
0e01c     A7 12 02 FB | 	rdlong	arg01, fp
0e020     08 4E 85 F1 | 	sub	fp, #8
0e024     24 12 06 F1 | 	add	arg01, #36
0e028     09 01 68 FC | 	wrlong	#0, arg01
0e02c     34 00 90 FD | 	jmp	#LR__1124
0e030                 | LR__1123
0e030     08 4E 05 F1 | 	add	fp, #8
0e034     A7 12 02 FB | 	rdlong	arg01, fp
0e038     24 12 06 F1 | 	add	arg01, #36
0e03c     1C 4E 05 F1 | 	add	fp, #28
0e040     A7 14 02 FB | 	rdlong	arg02, fp
0e044     24 4E 85 F1 | 	sub	fp, #36
0e048     09 14 66 F0 | 	shl	arg02, #9
0e04c     0C 00 00 FF 
0e050     D8 E4 05 F1 | 	add	objptr, ##6360
0e054     F2 14 02 F1 | 	add	arg02, objptr
0e058     0C 00 00 FF 
0e05c     D8 E4 85 F1 | 	sub	objptr, ##6360
0e060     09 15 62 FC | 	wrlong	arg02, arg01
0e064                 | LR__1124
0e064     08 4E 05 F1 | 	add	fp, #8
0e068     A7 12 02 FB | 	rdlong	arg01, fp
0e06c     28 12 06 F1 | 	add	arg01, #40
0e070     0C 4E 05 F1 | 	add	fp, #12
0e074     A7 14 02 FB | 	rdlong	arg02, fp
0e078     09 15 62 FC | 	wrlong	arg02, arg01
0e07c     0C 4E 85 F1 | 	sub	fp, #12
0e080     A7 12 02 FB | 	rdlong	arg01, fp
0e084     2C 12 06 F1 | 	add	arg01, #44
0e088     24 4E 05 F1 | 	add	fp, #36
0e08c     A7 14 02 FB | 	rdlong	arg02, fp
0e090     09 15 62 FC | 	wrlong	arg02, arg01
0e094                 | ' lpoke base2+40,speed' speed
0e094                 | ' lpoke base2+44,sus 'len
0e094                 | ' 
0e094                 | ' if delay>0 then waitms(delay) ' : print "wait "; round(params(6)) : l
0e094     04 4E 85 F1 | 	sub	fp, #4
0e098     A7 24 02 FB | 	rdlong	local04, fp
0e09c     28 4E 85 F1 | 	sub	fp, #40
0e0a0     01 24 56 F2 | 	cmps	local04, #1 wc
0e0a4     28 4E 05 31 |  if_ae	add	fp, #40
0e0a8     A7 12 02 3B |  if_ae	rdlong	arg01, fp
0e0ac     28 4E 85 31 |  if_ae	sub	fp, #40
0e0b0     50 2F B1 3D |  if_ae	call	#__system___waitms
0e0b4     A7 F0 03 F6 | 	mov	ptra, fp
0e0b8     B2 00 A0 FD | 	call	#popregs_
0e0bc                 | _do_play_ret
0e0bc     2D 00 64 FD | 	ret
0e0c0                 | 
0e0c0                 | ' 
0e0c0                 | ' sub do_changevol
0e0c0                 | _do_changevol
0e0c0     00 4A 05 F6 | 	mov	COUNT_, #0
0e0c4     A8 00 A0 FD | 	call	#pushregs_
0e0c8     14 F0 07 F1 | 	add	ptra, #20
0e0cc     F4 CF BF FD | 	call	#_pop
0e0d0     FF 14 02 F6 | 	mov	arg02, result3
0e0d4     A7 FA 61 FC | 	wrlong	result1, fp
0e0d8     04 4E 05 F1 | 	add	fp, #4
0e0dc     A7 FC 61 FC | 	wrlong	result2, fp
0e0e0     04 4E 05 F1 | 	add	fp, #4
0e0e4     A7 14 62 FC | 	wrlong	arg02, fp
0e0e8     08 4E 85 F1 | 	sub	fp, #8
0e0ec     A7 12 02 F6 | 	mov	arg01, fp
0e0f0     5C 71 B0 FD | 	call	#_converttofloat
0e0f4     FD 12 02 F6 | 	mov	arg01, result1
0e0f8     00 3D 22 FF 
0e0fc     00 14 06 F6 | 	mov	arg02, ##1148846080
0e100     C0 57 B1 FD | 	call	#__system___float_mul
0e104     FD 12 02 F6 | 	mov	arg01, result1
0e108     01 14 06 F6 | 	mov	arg02, #1
0e10c     7C 5C B1 FD | 	call	#__system___float_tointeger
0e110     FD 14 52 F6 | 	abs	arg02, result1 wc
0e114     0D 14 46 F7 | 	zerox	arg02, #13
0e118     0A 15 82 F6 | 	negc	arg02, arg02
0e11c     10 4E 05 F1 | 	add	fp, #16
0e120     A7 14 62 FC | 	wrlong	arg02, fp
0e124     10 4E 85 F1 | 	sub	fp, #16
0e128     98 CF BF FD | 	call	#_pop
0e12c     FF 14 02 F6 | 	mov	arg02, result3
0e130     A7 FA 61 FC | 	wrlong	result1, fp
0e134     04 4E 05 F1 | 	add	fp, #4
0e138     A7 FC 61 FC | 	wrlong	result2, fp
0e13c     04 4E 05 F1 | 	add	fp, #4
0e140     A7 14 62 FC | 	wrlong	arg02, fp
0e144     08 4E 85 F1 | 	sub	fp, #8
0e148     A7 12 02 F6 | 	mov	arg01, fp
0e14c     44 70 B0 FD | 	call	#_converttoint
0e150     FD 14 52 F6 | 	abs	arg02, result1 wc
0e154     07 14 06 F5 | 	and	arg02, #7
0e158     0A 15 82 F6 | 	negc	arg02, arg02
0e15c     0C 4E 05 F1 | 	add	fp, #12
0e160     A7 14 62 FC | 	wrlong	arg02, fp
0e164     37 00 00 FF 
0e168     40 E4 05 F1 | 	add	objptr, ##28224
0e16c     F2 12 02 FB | 	rdlong	arg01, objptr
0e170     37 00 00 FF 
0e174     40 E4 85 F1 | 	sub	objptr, ##28224
0e178     06 14 66 F0 | 	shl	arg02, #6
0e17c     0A 13 02 F1 | 	add	arg01, arg02
0e180     14 12 06 F1 | 	add	arg01, #20
0e184     04 4E 05 F1 | 	add	fp, #4
0e188     A7 14 02 FB | 	rdlong	arg02, fp
0e18c     10 4E 85 F1 | 	sub	fp, #16
0e190     09 15 52 FC | 	wrword	arg02, arg01
0e194     A7 F0 03 F6 | 	mov	ptra, fp
0e198     B2 00 A0 FD | 	call	#popregs_
0e19c                 | _do_changevol_ret
0e19c     2D 00 64 FD | 	ret
0e1a0                 | 
0e1a0                 | ' 
0e1a0                 | ' sub do_changepan
0e1a0                 | _do_changepan
0e1a0     01 4A 05 F6 | 	mov	COUNT_, #1
0e1a4     A8 00 A0 FD | 	call	#pushregs_
0e1a8     14 F0 07 F1 | 	add	ptra, #20
0e1ac     14 CF BF FD | 	call	#_pop
0e1b0     A7 FA 61 FC | 	wrlong	result1, fp
0e1b4     04 4E 05 F1 | 	add	fp, #4
0e1b8     A7 FC 61 FC | 	wrlong	result2, fp
0e1bc     04 4E 05 F1 | 	add	fp, #4
0e1c0     A7 FE 61 FC | 	wrlong	result3, fp
0e1c4     08 4E 85 F1 | 	sub	fp, #8
0e1c8     00 00 23 FF 
0e1cc     00 1E 06 F6 | 	mov	local01, ##1174405120
0e1d0     A7 12 02 F6 | 	mov	arg01, fp
0e1d4     78 70 B0 FD | 	call	#_converttofloat
0e1d8     FD 14 02 F6 | 	mov	arg02, result1
0e1dc     0F 13 02 F6 | 	mov	arg01, local01
0e1e0     E0 56 B1 FD | 	call	#__system___float_mul
0e1e4     FD 12 02 F6 | 	mov	arg01, result1
0e1e8     01 14 06 F6 | 	mov	arg02, #1
0e1ec     9C 5B B1 FD | 	call	#__system___float_tointeger
0e1f0     0D 1E C6 F9 | 	decod	local01, #13
0e1f4     FD 1E 02 F1 | 	add	local01, result1
0e1f8     10 4E 05 F1 | 	add	fp, #16
0e1fc     A7 1E 62 FC | 	wrlong	local01, fp
0e200                 | ' t1=pop()
0e200                 | ' pan=8192+round(8192*converttofloat(t1)) 
0e200                 | ' if pan<0 then pan=0
0e200     10 4E 85 F1 | 	sub	fp, #16
0e204     00 1E 56 F2 | 	cmps	local01, #0 wc
0e208     10 4E 05 C1 |  if_b	add	fp, #16
0e20c     A7 00 68 CC |  if_b	wrlong	#0, fp
0e210     10 4E 85 C1 |  if_b	sub	fp, #16
0e214                 | ' if pan>16384 then pan=16384
0e214     10 4E 05 F1 | 	add	fp, #16
0e218     A7 1E 02 FB | 	rdlong	local01, fp
0e21c     10 4E 85 F1 | 	sub	fp, #16
0e220     20 00 00 FF 
0e224     01 1E 56 F2 | 	cmps	local01, ##16385 wc
0e228     10 4E 05 31 |  if_ae	add	fp, #16
0e22c     20 00 80 3F 
0e230     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0e234     10 4E 85 31 |  if_ae	sub	fp, #16
0e238     88 CE BF FD | 	call	#_pop
0e23c     FF 1E 02 F6 | 	mov	local01, result3
0e240     A7 FA 61 FC | 	wrlong	result1, fp
0e244     04 4E 05 F1 | 	add	fp, #4
0e248     A7 FC 61 FC | 	wrlong	result2, fp
0e24c     04 4E 05 F1 | 	add	fp, #4
0e250     A7 1E 62 FC | 	wrlong	local01, fp
0e254     08 4E 85 F1 | 	sub	fp, #8
0e258     A7 12 02 F6 | 	mov	arg01, fp
0e25c     34 6F B0 FD | 	call	#_converttoint
0e260     FD 1E 52 F6 | 	abs	local01, result1 wc
0e264     07 1E 06 F5 | 	and	local01, #7
0e268     0F 1F 82 F6 | 	negc	local01, local01
0e26c     0C 4E 05 F1 | 	add	fp, #12
0e270     A7 1E 62 FC | 	wrlong	local01, fp
0e274     37 00 00 FF 
0e278     40 E4 05 F1 | 	add	objptr, ##28224
0e27c     F2 12 02 FB | 	rdlong	arg01, objptr
0e280     37 00 00 FF 
0e284     40 E4 85 F1 | 	sub	objptr, ##28224
0e288     06 1E 66 F0 | 	shl	local01, #6
0e28c     0F 13 02 F1 | 	add	arg01, local01
0e290     16 12 06 F1 | 	add	arg01, #22
0e294     04 4E 05 F1 | 	add	fp, #4
0e298     A7 14 02 FB | 	rdlong	arg02, fp
0e29c     10 4E 85 F1 | 	sub	fp, #16
0e2a0     09 15 52 FC | 	wrword	arg02, arg01
0e2a4     A7 F0 03 F6 | 	mov	ptra, fp
0e2a8     B2 00 A0 FD | 	call	#popregs_
0e2ac                 | _do_changepan_ret
0e2ac     2D 00 64 FD | 	ret
0e2b0                 | 
0e2b0                 | ' 
0e2b0                 | ' sub do_changefreq
0e2b0                 | _do_changefreq
0e2b0     04 4A 05 F6 | 	mov	COUNT_, #4
0e2b4     A8 00 A0 FD | 	call	#pushregs_
0e2b8     28 F0 07 F1 | 	add	ptra, #40
0e2bc     04 CE BF FD | 	call	#_pop
0e2c0     FF 14 02 F6 | 	mov	arg02, result3
0e2c4     A7 FA 61 FC | 	wrlong	result1, fp
0e2c8     04 4E 05 F1 | 	add	fp, #4
0e2cc     A7 FC 61 FC | 	wrlong	result2, fp
0e2d0     04 4E 05 F1 | 	add	fp, #4
0e2d4     A7 14 62 FC | 	wrlong	arg02, fp
0e2d8     08 4E 85 F1 | 	sub	fp, #8
0e2dc     A7 12 02 F6 | 	mov	arg01, fp
0e2e0     6C 6F B0 FD | 	call	#_converttofloat
0e2e4     24 4E 05 F1 | 	add	fp, #36
0e2e8     A7 FA 61 FC | 	wrlong	result1, fp
0e2ec     24 4E 85 F1 | 	sub	fp, #36
0e2f0     FD 14 02 F6 | 	mov	arg02, result1
0e2f4     FC 16 20 FF 
0e2f8     54 12 06 F6 | 	mov	arg01, ##1076754516
0e2fc     70 65 B1 FD | 	call	#__system____builtin_logbase
0e300     FD 1E 02 F6 | 	mov	local01, result1
0e304     1E 14 C6 F9 | 	decod	arg02, #30
0e308     FC 16 20 FF 
0e30c     54 12 06 F6 | 	mov	arg01, ##1076754516
0e310     5C 65 B1 FD | 	call	#__system____builtin_logbase
0e314     FD 14 02 F6 | 	mov	arg02, result1
0e318     0F 13 02 F6 | 	mov	arg01, local01
0e31c     A8 57 B1 FD | 	call	#__system___float_div
0e320     FD 12 02 F6 | 	mov	arg01, result1
0e324     00 14 06 F6 | 	mov	arg02, #0
0e328     60 5A B1 FD | 	call	#__system___float_tointeger
0e32c     10 4E 05 F1 | 	add	fp, #16
0e330     A7 FA 61 FC | 	wrlong	result1, fp
0e334     1E 1E C6 F9 | 	decod	local01, #30
0e338     FD 12 02 F6 | 	mov	arg01, result1
0e33c     10 4E 85 F1 | 	sub	fp, #16
0e340     05 12 06 F1 | 	add	arg01, #5
0e344     09 13 52 F6 | 	abs	arg01, arg01 wc
0e348     1F 20 C6 C9 |  if_b	decod	local02, #31
0e34c     00 20 06 36 |  if_ae	mov	local02, #0
0e350     6C 51 B1 FD | 	call	#__system___float_fromuns
0e354     10 FB 61 F5 | 	xor	result1, local02
0e358     FD 14 02 F6 | 	mov	arg02, result1
0e35c     0F 13 02 F6 | 	mov	arg01, local01
0e360     44 64 B1 FD | 	call	#__system____builtin_powf
0e364     FD 12 02 F6 | 	mov	arg01, result1
0e368     01 14 06 F6 | 	mov	arg02, #1
0e36c     1C 5A B1 FD | 	call	#__system___float_tointeger
0e370     14 4E 05 F1 | 	add	fp, #20
0e374     A7 FA 61 FC | 	wrlong	result1, fp
0e378                 | ' skip=round(2^(lfreq+5))
0e378                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0e378     14 4E 85 F1 | 	sub	fp, #20
0e37c     40 00 00 FF 
0e380     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0e384     30 00 90 CD |  if_b	jmp	#LR__1130
0e388     14 4E 05 F1 | 	add	fp, #20
0e38c     A7 1E 02 FB | 	rdlong	local01, fp
0e390     0F 1F 52 F6 | 	abs	local01, local01 wc
0e394     0F 1E 46 F0 | 	shr	local01, #15
0e398     0F 1F 82 F6 | 	negc	local01, local01
0e39c     04 4E 05 F1 | 	add	fp, #4
0e3a0     A7 1E 62 FC | 	wrlong	local01, fp
0e3a4     04 4E 85 F1 | 	sub	fp, #4
0e3a8     40 00 80 FF 
0e3ac     A7 00 68 FC | 	wrlong	##32768, fp
0e3b0     14 4E 85 F1 | 	sub	fp, #20
0e3b4     0C 00 90 FD | 	jmp	#LR__1131
0e3b8                 | LR__1130
0e3b8     18 4E 05 F1 | 	add	fp, #24
0e3bc     A7 02 68 FC | 	wrlong	#1, fp
0e3c0     18 4E 85 F1 | 	sub	fp, #24
0e3c4                 | LR__1131
0e3c4     24 4E 05 F1 | 	add	fp, #36
0e3c8     A7 14 02 FB | 	rdlong	arg02, fp
0e3cc     24 4E 85 F1 | 	sub	fp, #36
0e3d0     3E 2C 25 FF 
0e3d4     3C 12 06 F6 | 	mov	arg01, ##1247312956
0e3d8     EC 56 B1 FD | 	call	#__system___float_div
0e3dc     FD 1E 02 F6 | 	mov	local01, result1
0e3e0     18 4E 05 F1 | 	add	fp, #24
0e3e4     A7 12 02 FB | 	rdlong	arg01, fp
0e3e8     18 4E 85 F1 | 	sub	fp, #24
0e3ec     09 13 52 F6 | 	abs	arg01, arg01 wc
0e3f0     1F 20 C6 C9 |  if_b	decod	local02, #31
0e3f4     00 20 06 36 |  if_ae	mov	local02, #0
0e3f8     C4 50 B1 FD | 	call	#__system___float_fromuns
0e3fc     10 FB 61 F5 | 	xor	result1, local02
0e400     FD 22 02 F6 | 	mov	local03, result1
0e404     1E 24 C6 F9 | 	decod	local04, #30
0e408     0D 12 06 F6 | 	mov	arg01, #13
0e40c     10 4E 05 F1 | 	add	fp, #16
0e410     A7 14 02 FB | 	rdlong	arg02, fp
0e414     10 4E 85 F1 | 	sub	fp, #16
0e418     0A 13 82 F1 | 	sub	arg01, arg02
0e41c     09 13 52 F6 | 	abs	arg01, arg01 wc
0e420     1F 20 C6 C9 |  if_b	decod	local02, #31
0e424     00 20 06 36 |  if_ae	mov	local02, #0
0e428     94 50 B1 FD | 	call	#__system___float_fromuns
0e42c     10 FB 61 F5 | 	xor	result1, local02
0e430     FD 14 02 F6 | 	mov	arg02, result1
0e434     12 13 02 F6 | 	mov	arg01, local04
0e438     6C 63 B1 FD | 	call	#__system____builtin_powf
0e43c     FD 14 02 F6 | 	mov	arg02, result1
0e440     11 13 02 F6 | 	mov	arg01, local03
0e444     7C 54 B1 FD | 	call	#__system___float_mul
0e448     FD 14 02 F6 | 	mov	arg02, result1
0e44c     0F 13 02 F6 | 	mov	arg01, local01
0e450     74 56 B1 FD | 	call	#__system___float_div
0e454     FD 12 02 F6 | 	mov	arg01, result1
0e458     01 14 06 F6 | 	mov	arg02, #1
0e45c     2C 59 B1 FD | 	call	#__system___float_tointeger
0e460     FD 1E 02 F6 | 	mov	local01, result1
0e464     1C 4E 05 F1 | 	add	fp, #28
0e468     A7 1E 62 FC | 	wrlong	local01, fp
0e46c     1C 4E 85 F1 | 	sub	fp, #28
0e470     50 CC BF FD | 	call	#_pop
0e474     FF 24 02 F6 | 	mov	local04, result3
0e478     A7 FA 61 FC | 	wrlong	result1, fp
0e47c     04 4E 05 F1 | 	add	fp, #4
0e480     A7 FC 61 FC | 	wrlong	result2, fp
0e484     04 4E 05 F1 | 	add	fp, #4
0e488     A7 24 62 FC | 	wrlong	local04, fp
0e48c     08 4E 85 F1 | 	sub	fp, #8
0e490     A7 12 02 F6 | 	mov	arg01, fp
0e494     FC 6C B0 FD | 	call	#_converttoint
0e498     FD 22 52 F6 | 	abs	local03, result1 wc
0e49c     07 22 06 F5 | 	and	local03, #7
0e4a0     11 23 82 F6 | 	negc	local03, local03
0e4a4     0C 4E 05 F1 | 	add	fp, #12
0e4a8     A7 22 62 FC | 	wrlong	local03, fp
0e4ac     08 4E 05 F1 | 	add	fp, #8
0e4b0     A7 14 02 FB | 	rdlong	arg02, fp
0e4b4     10 14 66 F0 | 	shl	arg02, #16
0e4b8     08 4E 05 F1 | 	add	fp, #8
0e4bc     A7 24 02 FB | 	rdlong	local04, fp
0e4c0     12 15 02 F1 | 	add	arg02, local04
0e4c4     04 4E 05 F1 | 	add	fp, #4
0e4c8     A7 14 62 FC | 	wrlong	arg02, fp
0e4cc     37 00 00 FF 
0e4d0     40 E4 05 F1 | 	add	objptr, ##28224
0e4d4     F2 12 02 FB | 	rdlong	arg01, objptr
0e4d8     37 00 00 FF 
0e4dc     40 E4 85 F1 | 	sub	objptr, ##28224
0e4e0     14 4E 85 F1 | 	sub	fp, #20
0e4e4     A7 24 02 FB | 	rdlong	local04, fp
0e4e8     06 24 66 F0 | 	shl	local04, #6
0e4ec     12 13 02 F1 | 	add	arg01, local04
0e4f0     18 12 06 F1 | 	add	arg01, #24
0e4f4     0C 4E 85 F1 | 	sub	fp, #12
0e4f8     09 15 62 FC | 	wrlong	arg02, arg01
0e4fc     A7 F0 03 F6 | 	mov	ptra, fp
0e500     B2 00 A0 FD | 	call	#popregs_
0e504                 | _do_changefreq_ret
0e504     2D 00 64 FD | 	ret
0e508                 | 
0e508                 | ' 
0e508                 | ' sub do_changewav
0e508                 | _do_changewav
0e508     00 4A 05 F6 | 	mov	COUNT_, #0
0e50c     A8 00 A0 FD | 	call	#pushregs_
0e510     14 F0 07 F1 | 	add	ptra, #20
0e514     AC CB BF FD | 	call	#_pop
0e518     FF 14 02 F6 | 	mov	arg02, result3
0e51c     A7 FA 61 FC | 	wrlong	result1, fp
0e520     04 4E 05 F1 | 	add	fp, #4
0e524     A7 FC 61 FC | 	wrlong	result2, fp
0e528     04 4E 05 F1 | 	add	fp, #4
0e52c     A7 14 62 FC | 	wrlong	arg02, fp
0e530     08 4E 85 F1 | 	sub	fp, #8
0e534     A7 12 02 F6 | 	mov	arg01, fp
0e538     58 6C B0 FD | 	call	#_converttoint
0e53c     10 4E 05 F1 | 	add	fp, #16
0e540     A7 FA 61 FC | 	wrlong	result1, fp
0e544                 | ' t1=pop()
0e544                 | ' wave=converttoint(t1)
0e544                 | ' if wave<0 then wave=0
0e544     FD 14 02 F6 | 	mov	arg02, result1
0e548     10 4E 85 F1 | 	sub	fp, #16
0e54c     00 14 56 F2 | 	cmps	arg02, #0 wc
0e550     10 4E 05 C1 |  if_b	add	fp, #16
0e554     A7 00 68 CC |  if_b	wrlong	#0, fp
0e558     10 4E 85 C1 |  if_b	sub	fp, #16
0e55c     64 CB BF FD | 	call	#_pop
0e560     FF 14 02 F6 | 	mov	arg02, result3
0e564     A7 FA 61 FC | 	wrlong	result1, fp
0e568     04 4E 05 F1 | 	add	fp, #4
0e56c     A7 FC 61 FC | 	wrlong	result2, fp
0e570     04 4E 05 F1 | 	add	fp, #4
0e574     A7 14 62 FC | 	wrlong	arg02, fp
0e578     08 4E 85 F1 | 	sub	fp, #8
0e57c     A7 12 02 F6 | 	mov	arg01, fp
0e580     10 6C B0 FD | 	call	#_converttoint
0e584     FD 14 52 F6 | 	abs	arg02, result1 wc
0e588     07 14 06 F5 | 	and	arg02, #7
0e58c     0A 15 82 F6 | 	negc	arg02, arg02
0e590     0C 4E 05 F1 | 	add	fp, #12
0e594     A7 14 62 FC | 	wrlong	arg02, fp
0e598                 | ' if wave <32 then 
0e598     04 4E 05 F1 | 	add	fp, #4
0e59c     A7 14 02 FB | 	rdlong	arg02, fp
0e5a0     10 4E 85 F1 | 	sub	fp, #16
0e5a4     20 14 56 F2 | 	cmps	arg02, #32 wc
0e5a8     48 00 90 3D |  if_ae	jmp	#LR__1140
0e5ac     37 00 00 FF 
0e5b0     40 E4 05 F1 | 	add	objptr, ##28224
0e5b4     F2 12 02 FB | 	rdlong	arg01, objptr
0e5b8     37 00 00 FF 
0e5bc     40 E4 85 F1 | 	sub	objptr, ##28224
0e5c0     0C 4E 05 F1 | 	add	fp, #12
0e5c4     A7 14 02 FB | 	rdlong	arg02, fp
0e5c8     06 14 66 F0 | 	shl	arg02, #6
0e5cc     0A 13 02 F1 | 	add	arg01, arg02
0e5d0     08 12 06 F1 | 	add	arg01, #8
0e5d4     04 4E 05 F1 | 	add	fp, #4
0e5d8     A7 14 02 FB | 	rdlong	arg02, fp
0e5dc     10 4E 85 F1 | 	sub	fp, #16
0e5e0     0B 14 66 F0 | 	shl	arg02, #11
0e5e4     00 00 60 FF 
0e5e8     00 14 06 F1 | 	add	arg02, ##-1073741824
0e5ec     09 15 62 FC | 	wrlong	arg02, arg01
0e5f0     34 00 90 FD | 	jmp	#LR__1141
0e5f4                 | LR__1140
0e5f4     37 00 00 FF 
0e5f8     40 E4 05 F1 | 	add	objptr, ##28224
0e5fc     F2 12 02 FB | 	rdlong	arg01, objptr
0e600     37 00 00 FF 
0e604     40 E4 85 F1 | 	sub	objptr, ##28224
0e608     0C 4E 05 F1 | 	add	fp, #12
0e60c     A7 14 02 FB | 	rdlong	arg02, fp
0e610     0C 4E 85 F1 | 	sub	fp, #12
0e614     06 14 66 F0 | 	shl	arg02, #6
0e618     0A 13 02 F1 | 	add	arg01, arg02
0e61c     08 12 06 F1 | 	add	arg01, #8
0e620     00 00 E4 FF 
0e624     09 01 68 FC | 	wrlong	##-939524096, arg01
0e628                 | LR__1141
0e628     A7 F0 03 F6 | 	mov	ptra, fp
0e62c     B2 00 A0 FD | 	call	#popregs_
0e630                 | _do_changewav_ret
0e630     2D 00 64 FD | 	ret
0e634                 | 
0e634                 | ' 
0e634                 | ' 
0e634                 | ' sub do_shutup
0e634                 | _do_shutup
0e634     03 4A 05 F6 | 	mov	COUNT_, #3
0e638     A8 00 A0 FD | 	call	#pushregs_
0e63c     18 F0 07 F1 | 	add	ptra, #24
0e640     4A 00 00 FF 
0e644     B0 E4 05 F1 | 	add	objptr, ##38064
0e648     F2 1E 02 FB | 	rdlong	local01, objptr
0e64c     0F 21 02 F6 | 	mov	local02, local01
0e650     01 20 66 F0 | 	shl	local02, #1
0e654     0F 21 02 F1 | 	add	local02, local01
0e658     02 20 66 F0 | 	shl	local02, #2
0e65c     03 00 00 FF 
0e660     04 E4 85 F1 | 	sub	objptr, ##1540
0e664     F2 20 02 F1 | 	add	local02, objptr
0e668     10 23 0A FB | 	rdlong	local03, local02 wz
0e66c     14 4E 05 F1 | 	add	fp, #20
0e670     A7 22 62 FC | 	wrlong	local03, fp
0e674                 | ' 
0e674                 | ' numpar=compiledline(lineptr_e).result.uresult
0e674                 | ' if numpar=0 then
0e674     14 4E 85 F1 | 	sub	fp, #20
0e678     47 00 00 FF 
0e67c     AC E4 85 F1 | 	sub	objptr, ##36524
0e680     50 00 90 5D |  if_ne	jmp	#LR__1152
0e684                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
0e684     10 4E 05 F1 | 	add	fp, #16
0e688     A7 00 68 FC | 	wrlong	#0, fp
0e68c     37 00 00 FF 
0e690     40 E4 05 F1 | 	add	objptr, ##28224
0e694     97 16 48 FB | 	callpa	#(@LR__1151-@LR__1150)>>2,fcache_load_ptr_
0e698                 | LR__1150
0e698     F2 12 02 FB | 	rdlong	arg01, objptr
0e69c     A7 22 02 FB | 	rdlong	local03, fp
0e6a0     06 22 66 F0 | 	shl	local03, #6
0e6a4     11 13 02 F1 | 	add	arg01, local03
0e6a8     14 12 06 F1 | 	add	arg01, #20
0e6ac     09 01 58 FC | 	wrword	#0, arg01
0e6b0     A7 22 02 FB | 	rdlong	local03, fp
0e6b4     01 22 06 F1 | 	add	local03, #1
0e6b8     A7 22 62 FC | 	wrlong	local03, fp
0e6bc     08 22 56 F2 | 	cmps	local03, #8 wc
0e6c0     D4 FF 9F CD |  if_b	jmp	#LR__1150
0e6c4                 | LR__1151
0e6c4     37 00 00 FF 
0e6c8     40 E4 85 F1 | 	sub	objptr, ##28224
0e6cc     10 4E 85 F1 | 	sub	fp, #16
0e6d0     64 00 90 FD | 	jmp	#LR__1153
0e6d4                 | LR__1152
0e6d4     EC C9 BF FD | 	call	#_pop
0e6d8     FF 1E 02 F6 | 	mov	local01, result3
0e6dc     A7 FA 61 FC | 	wrlong	result1, fp
0e6e0     04 4E 05 F1 | 	add	fp, #4
0e6e4     A7 FC 61 FC | 	wrlong	result2, fp
0e6e8     04 4E 05 F1 | 	add	fp, #4
0e6ec     A7 1E 62 FC | 	wrlong	local01, fp
0e6f0     08 4E 85 F1 | 	sub	fp, #8
0e6f4     A7 12 02 F6 | 	mov	arg01, fp
0e6f8     98 6A B0 FD | 	call	#_converttoint
0e6fc     FD 22 52 F6 | 	abs	local03, result1 wc
0e700     07 22 06 F5 | 	and	local03, #7
0e704     11 21 82 F6 | 	negc	local02, local03
0e708     0C 4E 05 F1 | 	add	fp, #12
0e70c     A7 20 62 FC | 	wrlong	local02, fp
0e710     37 00 00 FF 
0e714     40 E4 05 F1 | 	add	objptr, ##28224
0e718     F2 12 02 FB | 	rdlong	arg01, objptr
0e71c     37 00 00 FF 
0e720     40 E4 85 F1 | 	sub	objptr, ##28224
0e724     0C 4E 85 F1 | 	sub	fp, #12
0e728     06 20 66 F0 | 	shl	local02, #6
0e72c     10 13 02 F1 | 	add	arg01, local02
0e730     14 12 06 F1 | 	add	arg01, #20
0e734     09 01 58 FC | 	wrword	#0, arg01
0e738                 | LR__1153
0e738     A7 F0 03 F6 | 	mov	ptra, fp
0e73c     B2 00 A0 FD | 	call	#popregs_
0e740                 | _do_shutup_ret
0e740     2D 00 64 FD | 	ret
0e744                 | 
0e744                 | ' 
0e744                 | ' 
0e744                 | ' sub do_release
0e744                 | _do_release
0e744     00 4A 05 F6 | 	mov	COUNT_, #0
0e748     A8 00 A0 FD | 	call	#pushregs_
0e74c     10 F0 07 F1 | 	add	ptra, #16
0e750     70 C9 BF FD | 	call	#_pop
0e754     FF 14 02 F6 | 	mov	arg02, result3
0e758     A7 FA 61 FC | 	wrlong	result1, fp
0e75c     04 4E 05 F1 | 	add	fp, #4
0e760     A7 FC 61 FC | 	wrlong	result2, fp
0e764     04 4E 05 F1 | 	add	fp, #4
0e768     A7 14 62 FC | 	wrlong	arg02, fp
0e76c     08 4E 85 F1 | 	sub	fp, #8
0e770     A7 12 02 F6 | 	mov	arg01, fp
0e774     1C 6A B0 FD | 	call	#_converttoint
0e778     0C 4E 05 F1 | 	add	fp, #12
0e77c     A7 FA 61 FC | 	wrlong	result1, fp
0e780                 | ' t1=pop()
0e780                 | ' channel=converttoint(t1)
0e780                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255 ' else printerror
0e780     0C 4E 85 F1 | 	sub	fp, #12
0e784     00 FA 55 F2 | 	cmps	result1, #0 wc
0e788     44 00 90 CD |  if_b	jmp	#LR__1160
0e78c     0C 4E 05 F1 | 	add	fp, #12
0e790     A7 14 02 FB | 	rdlong	arg02, fp
0e794     0C 4E 85 F1 | 	sub	fp, #12
0e798     08 14 56 F2 | 	cmps	arg02, #8 wc
0e79c     30 00 90 3D |  if_ae	jmp	#LR__1160
0e7a0     37 00 00 FF 
0e7a4     40 E4 05 F1 | 	add	objptr, ##28224
0e7a8     F2 12 02 FB | 	rdlong	arg01, objptr
0e7ac     37 00 00 FF 
0e7b0     40 E4 85 F1 | 	sub	objptr, ##28224
0e7b4     0C 4E 05 F1 | 	add	fp, #12
0e7b8     A7 14 02 FB | 	rdlong	arg02, fp
0e7bc     0C 4E 85 F1 | 	sub	fp, #12
0e7c0     06 14 66 F0 | 	shl	arg02, #6
0e7c4     0A 13 02 F1 | 	add	arg01, arg02
0e7c8     2C 12 06 F1 | 	add	arg01, #44
0e7cc     09 FF 69 FC | 	wrlong	#255, arg01
0e7d0                 | LR__1160
0e7d0     A7 F0 03 F6 | 	mov	ptra, fp
0e7d4     B2 00 A0 FD | 	call	#popregs_
0e7d8                 | _do_release_ret
0e7d8     2D 00 64 FD | 	ret
0e7dc                 | 
0e7dc                 | ' 
0e7dc                 | ' 
0e7dc                 | ' sub do_defsnd
0e7dc                 | _do_defsnd
0e7dc     04 4A 05 F6 | 	mov	COUNT_, #4
0e7e0     A8 00 A0 FD | 	call	#pushregs_
0e7e4     88 F0 07 F1 | 	add	ptra, #136
0e7e8     4A 00 00 FF 
0e7ec     B0 E4 05 F1 | 	add	objptr, ##38064
0e7f0     F2 1A 02 FB | 	rdlong	arg05, objptr
0e7f4     0D 19 02 F6 | 	mov	arg04, arg05
0e7f8     01 18 66 F0 | 	shl	arg04, #1
0e7fc     0D 19 02 F1 | 	add	arg04, arg05
0e800     02 18 66 F0 | 	shl	arg04, #2
0e804     03 00 00 FF 
0e808     04 E4 85 F1 | 	sub	objptr, ##1540
0e80c     F2 18 02 F1 | 	add	arg04, objptr
0e810     0C 1B 02 FB | 	rdlong	arg05, arg04
0e814     A7 1A 62 FC | 	wrlong	arg05, fp
0e818                 | ' 
0e818                 | ' numpar=compiledline(lineptr_e).result.uresult
0e818                 | ' 
0e818                 | ' 
0e818                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0e818                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0e818                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0e818                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0e818                 | ' 
0e818                 | ' if numpar<2 then return
0e818     02 1A 56 F2 | 	cmps	arg05, #2 wc
0e81c     47 00 00 FF 
0e820     AC E4 85 F1 | 	sub	objptr, ##36524
0e824     94 08 90 CD |  if_b	jmp	#LR__1193
0e828                 | ' 
0e828                 | '   
0e828                 | ' if numpar=2 then
0e828     A7 1A 02 FB | 	rdlong	arg05, fp
0e82c     02 1A 0E F2 | 	cmp	arg05, #2 wz
0e830     A0 03 90 5D |  if_ne	jmp	#LR__1180
0e834     8C C8 BF FD | 	call	#_pop
0e838     FF 1A 02 F6 | 	mov	arg05, result3
0e83c     2C 4E 05 F1 | 	add	fp, #44
0e840     A7 FA 61 FC | 	wrlong	result1, fp
0e844     04 4E 05 F1 | 	add	fp, #4
0e848     A7 FC 61 FC | 	wrlong	result2, fp
0e84c     04 4E 05 F1 | 	add	fp, #4
0e850     A7 1A 62 FC | 	wrlong	arg05, fp
0e854                 | '   t1=pop()
0e854                 | '   if t1.result_type=result_string2 then 
0e854     34 4E 85 F1 | 	sub	fp, #52
0e858     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0e85c     20 00 90 5D |  if_ne	jmp	#LR__1170
0e860     2C 4E 05 F1 | 	add	fp, #44
0e864     A7 12 02 FB | 	rdlong	arg01, fp
0e868     2C 4E 85 F1 | 	sub	fp, #44
0e86c     00 21 B0 FD | 	call	#_convertstring
0e870     38 4E 05 F1 | 	add	fp, #56
0e874     A7 FA 61 FC | 	wrlong	result1, fp
0e878     38 4E 85 F1 | 	sub	fp, #56
0e87c     58 00 90 FD | 	jmp	#LR__1173
0e880                 | LR__1170
0e880     34 4E 05 F1 | 	add	fp, #52
0e884     A7 1A 02 FB | 	rdlong	arg05, fp
0e888     34 4E 85 F1 | 	sub	fp, #52
0e88c     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0e890     18 00 90 5D |  if_ne	jmp	#LR__1171
0e894     2C 4E 05 F1 | 	add	fp, #44
0e898     A7 1A 02 FB | 	rdlong	arg05, fp
0e89c     0C 4E 05 F1 | 	add	fp, #12
0e8a0     A7 1A 62 FC | 	wrlong	arg05, fp
0e8a4     38 4E 85 F1 | 	sub	fp, #56
0e8a8     2C 00 90 FD | 	jmp	#LR__1172
0e8ac                 | LR__1171
0e8ac     86 01 00 FF 
0e8b0     66 1A 06 F6 | 	mov	arg05, ##@LR__5384
0e8b4     38 4E 05 F1 | 	add	fp, #56
0e8b8     A7 1A 62 FC | 	wrlong	arg05, fp
0e8bc     0C 4E 85 F1 | 	sub	fp, #12
0e8c0     A7 12 02 F6 | 	mov	arg01, fp
0e8c4     2C 4E 85 F1 | 	sub	fp, #44
0e8c8     C8 68 B0 FD | 	call	#_converttoint
0e8cc     14 4E 05 F1 | 	add	fp, #20
0e8d0     A7 FA 61 FC | 	wrlong	result1, fp
0e8d4     14 4E 85 F1 | 	sub	fp, #20
0e8d8                 | LR__1172
0e8d8                 | LR__1173
0e8d8                 | ' 
0e8d8                 | '     
0e8d8                 | '   if s<>"" then 
0e8d8     38 4E 05 F1 | 	add	fp, #56
0e8dc     A7 12 02 FB | 	rdlong	arg01, fp
0e8e0     38 4E 85 F1 | 	sub	fp, #56
0e8e4     86 01 00 FF 
0e8e8     67 14 06 F6 | 	mov	arg02, ##@LR__5385
0e8ec     48 24 B1 FD | 	call	#__system___string_cmp
0e8f0     00 FA 0D F2 | 	cmp	result1, #0 wz
0e8f4     E0 01 90 AD |  if_e	jmp	#LR__1176
0e8f8     C8 C7 BF FD | 	call	#_pop
0e8fc     FF 1A 02 F6 | 	mov	arg05, result3
0e900     2C 4E 05 F1 | 	add	fp, #44
0e904     A7 FA 61 FC | 	wrlong	result1, fp
0e908     04 4E 05 F1 | 	add	fp, #4
0e90c     A7 FC 61 FC | 	wrlong	result2, fp
0e910     04 4E 05 F1 | 	add	fp, #4
0e914     A7 1A 62 FC | 	wrlong	arg05, fp
0e918     08 4E 85 F1 | 	sub	fp, #8
0e91c     A7 12 02 F6 | 	mov	arg01, fp
0e920     2C 4E 85 F1 | 	sub	fp, #44
0e924     6C 68 B0 FD | 	call	#_converttoint
0e928     10 4E 05 F1 | 	add	fp, #16
0e92c     A7 FA 61 FC | 	wrlong	result1, fp
0e930                 | '     t1=pop()
0e930                 | '     channel=converttoint(t1) : if channel>31 then return
0e930     FD 1A 02 F6 | 	mov	arg05, result1
0e934     10 4E 85 F1 | 	sub	fp, #16
0e938     20 1A 56 F2 | 	cmps	arg05, #32 wc
0e93c     7C 07 90 3D |  if_ae	jmp	#LR__1193
0e940                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0e940     09 12 06 F6 | 	mov	arg01, #9
0e944     38 74 B1 FD | 	call	#__system__close
0e948     09 1E 06 F6 | 	mov	local01, #9
0e94c     86 01 00 FF 
0e950     68 12 06 F6 | 	mov	arg01, ##@LR__5386
0e954     38 4E 05 F1 | 	add	fp, #56
0e958     A7 14 02 FB | 	rdlong	arg02, fp
0e95c     38 4E 85 F1 | 	sub	fp, #56
0e960     08 24 B1 FD | 	call	#__system___string_concat
0e964     FD 14 02 F6 | 	mov	arg02, result1
0e968     0F 13 02 F6 | 	mov	arg01, local01
0e96c     00 16 06 F6 | 	mov	arg03, #0
0e970     A0 2F B1 FD | 	call	#__system___basic_open_string
0e974     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e978     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0e97c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e980     5A 00 00 FF 
0e984     88 E4 05 F1 | 	add	objptr, ##46216
0e988     F2 FA 61 FC | 	wrlong	result1, objptr
0e98c                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0e98c     5A 00 00 FF 
0e990     88 E4 85 F1 | 	sub	objptr, ##46216
0e994     B0 00 90 AD |  if_e	jmp	#LR__1174
0e998     00 12 06 F6 | 	mov	arg01, #0
0e99c     B0 7D B1 FD | 	call	#__system___getiolock_0540
0e9a0     FD 12 02 F6 | 	mov	arg01, result1
0e9a4     68 23 B1 FD | 	call	#__system___lockmem
0e9a8     86 01 00 FF 
0e9ac     75 14 06 F6 | 	mov	arg02, ##@LR__5387
0e9b0     00 12 06 F6 | 	mov	arg01, #0
0e9b4     00 16 06 F6 | 	mov	arg03, #0
0e9b8     48 30 B1 FD | 	call	#__system___basic_print_string
0e9bc     5A 00 00 FF 
0e9c0     88 E4 05 F1 | 	add	objptr, ##46216
0e9c4     F2 14 02 FB | 	rdlong	arg02, objptr
0e9c8     5A 00 00 FF 
0e9cc     88 E4 85 F1 | 	sub	objptr, ##46216
0e9d0     00 12 06 F6 | 	mov	arg01, #0
0e9d4     00 16 06 F6 | 	mov	arg03, #0
0e9d8     0A 18 06 F6 | 	mov	arg04, #10
0e9dc     68 30 B1 FD | 	call	#__system___basic_print_integer
0e9e0     86 01 00 FF 
0e9e4     83 14 06 F6 | 	mov	arg02, ##@LR__5388
0e9e8     00 12 06 F6 | 	mov	arg01, #0
0e9ec     00 16 06 F6 | 	mov	arg03, #0
0e9f0     10 30 B1 FD | 	call	#__system___basic_print_string
0e9f4     00 1E 06 F6 | 	mov	local01, #0
0e9f8     5A 00 00 FF 
0e9fc     88 E4 05 F1 | 	add	objptr, ##46216
0ea00     F2 12 02 FB | 	rdlong	arg01, objptr
0ea04     5A 00 00 FF 
0ea08     88 E4 85 F1 | 	sub	objptr, ##46216
0ea0c     C8 49 B1 FD | 	call	#__system___strerror
0ea10     FD 14 02 F6 | 	mov	arg02, result1
0ea14     0F 13 02 F6 | 	mov	arg01, local01
0ea18     00 16 06 F6 | 	mov	arg03, #0
0ea1c     E4 2F B1 FD | 	call	#__system___basic_print_string
0ea20     00 12 06 F6 | 	mov	arg01, #0
0ea24     0A 14 06 F6 | 	mov	arg02, #10
0ea28     00 16 06 F6 | 	mov	arg03, #0
0ea2c     7C 2F B1 FD | 	call	#__system___basic_print_char
0ea30     00 12 06 F6 | 	mov	arg01, #0
0ea34     18 7D B1 FD | 	call	#__system___getiolock_0540
0ea38     FD 00 68 FC | 	wrlong	#0, result1
0ea3c     09 12 06 F6 | 	mov	arg01, #9
0ea40     3C 73 B1 FD | 	call	#__system__close
0ea44     74 06 90 FD | 	jmp	#LR__1193
0ea48                 | LR__1174
0ea48                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
0ea48     04 4E 05 F1 | 	add	fp, #4
0ea4c     A7 00 68 FC | 	wrlong	#0, fp
0ea50                 | LR__1175
0ea50     A7 1E 02 FB | 	rdlong	local01, fp
0ea54     01 1E 66 F0 | 	shl	local01, #1
0ea58     11 14 06 F6 | 	mov	arg02, #17
0ea5c     0F 15 02 F1 | 	add	arg02, local01
0ea60     78 4E 05 F1 | 	add	fp, #120
0ea64     A7 16 02 F6 | 	mov	arg03, fp
0ea68     7C 4E 85 F1 | 	sub	fp, #124
0ea6c     09 12 06 F6 | 	mov	arg01, #9
0ea70     01 18 06 F6 | 	mov	arg04, #1
0ea74     02 1A 06 F6 | 	mov	arg05, #2
0ea78     04 31 B1 FD | 	call	#__system___basic_get
0ea7c     10 4E 05 F1 | 	add	fp, #16
0ea80     A7 12 02 FB | 	rdlong	arg01, fp
0ea84     0B 12 66 F0 | 	shl	arg01, #11
0ea88     0C 4E 85 F1 | 	sub	fp, #12
0ea8c     A7 1E 02 FB | 	rdlong	local01, fp
0ea90     01 1E 66 F0 | 	shl	local01, #1
0ea94     0F 13 02 F1 | 	add	arg01, local01
0ea98     78 4E 05 F1 | 	add	fp, #120
0ea9c     A7 14 E2 FA | 	rdword	arg02, fp
0eaa0     7C 4E 85 F1 | 	sub	fp, #124
0eaa4     0F 14 66 F7 | 	signx	arg02, #15
0eaa8     68 DF B0 FD | 	call	#_psdpoke
0eaac     04 4E 05 F1 | 	add	fp, #4
0eab0     A7 1E 02 FB | 	rdlong	local01, fp
0eab4     01 1E 06 F1 | 	add	local01, #1
0eab8     A7 1E 62 FC | 	wrlong	local01, fp
0eabc     02 00 00 FF 
0eac0     01 1E 56 F2 | 	cmps	local01, ##1025 wc
0eac4     88 FF 9F CD |  if_b	jmp	#LR__1175
0eac8     04 4E 85 F1 | 	sub	fp, #4
0eacc                 | '     close #9
0eacc     09 12 06 F6 | 	mov	arg01, #9
0ead0     AC 72 B1 FD | 	call	#__system__close
0ead4                 | '                                                                        'for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0ead4                 | '     return
0ead4     E4 05 90 FD | 	jmp	#LR__1193
0ead8                 | LR__1176
0ead8                 | '     if wptr < ($80000 - 2048) then 
0ead8     14 4E 05 F1 | 	add	fp, #20
0eadc     A7 1E 02 FB | 	rdlong	local01, fp
0eae0     14 4E 85 F1 | 	sub	fp, #20
0eae4     FC 03 00 FF 
0eae8     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0eaec     70 00 90 3D |  if_ae	jmp	#LR__1178
0eaf0                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
0eaf0     04 4E 05 F1 | 	add	fp, #4
0eaf4     A7 00 68 FC | 	wrlong	#0, fp
0eaf8     04 4E 85 F1 | 	sub	fp, #4
0eafc                 | LR__1177
0eafc     10 4E 05 F1 | 	add	fp, #16
0eb00     A7 1E 02 FB | 	rdlong	local01, fp
0eb04     0B 1E 66 F0 | 	shl	local01, #11
0eb08     0C 4E 85 F1 | 	sub	fp, #12
0eb0c     A7 1A 02 FB | 	rdlong	arg05, fp
0eb10     0D 19 02 F6 | 	mov	arg04, arg05
0eb14     01 18 66 F0 | 	shl	arg04, #1
0eb18     0C 1F 02 F1 | 	add	local01, arg04
0eb1c     10 4E 05 F1 | 	add	fp, #16
0eb20     A7 12 02 FB | 	rdlong	arg01, fp
0eb24     14 4E 85 F1 | 	sub	fp, #20
0eb28     01 1A 66 F0 | 	shl	arg05, #1
0eb2c     0D 13 02 F1 | 	add	arg01, arg05
0eb30     09 15 E2 FA | 	rdword	arg02, arg01
0eb34     0F 13 02 F6 | 	mov	arg01, local01
0eb38     D8 DE B0 FD | 	call	#_psdpoke
0eb3c     04 4E 05 F1 | 	add	fp, #4
0eb40     A7 1E 02 FB | 	rdlong	local01, fp
0eb44     01 1E 06 F1 | 	add	local01, #1
0eb48     A7 1E 62 FC | 	wrlong	local01, fp
0eb4c     04 4E 85 F1 | 	sub	fp, #4
0eb50     02 00 00 FF 
0eb54     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0eb58     A0 FF 9F CD |  if_b	jmp	#LR__1177
0eb5c     5C 05 90 FD | 	jmp	#LR__1193
0eb60                 | LR__1178
0eb60                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
0eb60     04 4E 05 F1 | 	add	fp, #4
0eb64     A7 00 68 FC | 	wrlong	#0, fp
0eb68     04 4E 85 F1 | 	sub	fp, #4
0eb6c                 | LR__1179
0eb6c     10 4E 05 F1 | 	add	fp, #16
0eb70     A7 1E 02 FB | 	rdlong	local01, fp
0eb74     0B 1E 66 F0 | 	shl	local01, #11
0eb78     0C 4E 85 F1 | 	sub	fp, #12
0eb7c     A7 1A 02 FB | 	rdlong	arg05, fp
0eb80     0D 19 02 F6 | 	mov	arg04, arg05
0eb84     01 18 66 F0 | 	shl	arg04, #1
0eb88     0C 1F 02 F1 | 	add	local01, arg04
0eb8c     10 4E 05 F1 | 	add	fp, #16
0eb90     A7 12 02 FB | 	rdlong	arg01, fp
0eb94     14 4E 85 F1 | 	sub	fp, #20
0eb98     01 1A 66 F0 | 	shl	arg05, #1
0eb9c     0D 13 02 F1 | 	add	arg01, arg05
0eba0     B0 DF B0 FD | 	call	#_psdpeek
0eba4     FD 14 02 F6 | 	mov	arg02, result1
0eba8     0F 13 02 F6 | 	mov	arg01, local01
0ebac     64 DE B0 FD | 	call	#_psdpoke
0ebb0     04 4E 05 F1 | 	add	fp, #4
0ebb4     A7 1E 02 FB | 	rdlong	local01, fp
0ebb8     01 1E 06 F1 | 	add	local01, #1
0ebbc     A7 1E 62 FC | 	wrlong	local01, fp
0ebc0     04 4E 85 F1 | 	sub	fp, #4
0ebc4     02 00 00 FF 
0ebc8     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0ebcc     9C FF 9F CD |  if_b	jmp	#LR__1179
0ebd0                 | '     return 
0ebd0     E8 04 90 FD | 	jmp	#LR__1193
0ebd4                 | '   
0ebd4                 | '                                                                         '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0ebd4                 | '   return
0ebd4                 | LR__1180
0ebd4                 | ' for i=0 to 15 : harm(i)=0: next i  
0ebd4     04 4E 05 F1 | 	add	fp, #4
0ebd8     A7 00 68 FC | 	wrlong	#0, fp
0ebdc     97 16 48 FB | 	callpa	#(@LR__1182-@LR__1181)>>2,fcache_load_ptr_
0ebe0                 | LR__1181
0ebe0     A7 1E 02 FB | 	rdlong	local01, fp
0ebe4     02 1E 66 F0 | 	shl	local01, #2
0ebe8     38 4E 05 F1 | 	add	fp, #56
0ebec     A7 1E 02 F1 | 	add	local01, fp
0ebf0     0F 01 68 FC | 	wrlong	#0, local01
0ebf4     38 4E 85 F1 | 	sub	fp, #56
0ebf8     A7 1E 02 FB | 	rdlong	local01, fp
0ebfc     01 1E 06 F1 | 	add	local01, #1
0ec00     A7 1E 62 FC | 	wrlong	local01, fp
0ec04     10 1E 56 F2 | 	cmps	local01, #16 wc
0ec08     D4 FF 9F CD |  if_b	jmp	#LR__1181
0ec0c                 | LR__1182
0ec0c     04 4E 85 F1 | 	sub	fp, #4
0ec10                 | ' for i=numpar to 2 step -1 
0ec10     A7 1E 02 FB | 	rdlong	local01, fp
0ec14     04 4E 05 F1 | 	add	fp, #4
0ec18     A7 1E 62 FC | 	wrlong	local01, fp
0ec1c     04 4E 85 F1 | 	sub	fp, #4
0ec20                 | LR__1183
0ec20     A0 C4 BF FD | 	call	#_pop
0ec24     2C 4E 05 F1 | 	add	fp, #44
0ec28     A7 FA 61 FC | 	wrlong	result1, fp
0ec2c     04 4E 05 F1 | 	add	fp, #4
0ec30     A7 FC 61 FC | 	wrlong	result2, fp
0ec34     04 4E 05 F1 | 	add	fp, #4
0ec38     A7 FE 61 FC | 	wrlong	result3, fp
0ec3c     30 4E 85 F1 | 	sub	fp, #48
0ec40     A7 1E 02 FB | 	rdlong	local01, fp
0ec44     02 1E 86 F1 | 	sub	local01, #2
0ec48     02 1E 66 F0 | 	shl	local01, #2
0ec4c     38 4E 05 F1 | 	add	fp, #56
0ec50     A7 1E 02 F1 | 	add	local01, fp
0ec54     10 4E 85 F1 | 	sub	fp, #16
0ec58     A7 12 02 F6 | 	mov	arg01, fp
0ec5c     2C 4E 85 F1 | 	sub	fp, #44
0ec60     EC 65 B0 FD | 	call	#_converttofloat
0ec64     0F FB 61 FC | 	wrlong	result1, local01
0ec68     04 4E 05 F1 | 	add	fp, #4
0ec6c     A7 1E 02 FB | 	rdlong	local01, fp
0ec70     01 1E 86 F1 | 	sub	local01, #1
0ec74     A7 1E 62 FC | 	wrlong	local01, fp
0ec78     04 4E 85 F1 | 	sub	fp, #4
0ec7c     02 1E 56 F2 | 	cmps	local01, #2 wc
0ec80     9C FF 9F 3D |  if_ae	jmp	#LR__1183
0ec84     3C C4 BF FD | 	call	#_pop
0ec88     FF 1E 02 F6 | 	mov	local01, result3
0ec8c     2C 4E 05 F1 | 	add	fp, #44
0ec90     A7 FA 61 FC | 	wrlong	result1, fp
0ec94     04 4E 05 F1 | 	add	fp, #4
0ec98     A7 FC 61 FC | 	wrlong	result2, fp
0ec9c     04 4E 05 F1 | 	add	fp, #4
0eca0     A7 1E 62 FC | 	wrlong	local01, fp
0eca4     08 4E 85 F1 | 	sub	fp, #8
0eca8     A7 12 02 F6 | 	mov	arg01, fp
0ecac     2C 4E 85 F1 | 	sub	fp, #44
0ecb0     E0 64 B0 FD | 	call	#_converttoint
0ecb4     10 4E 05 F1 | 	add	fp, #16
0ecb8     A7 FA 61 FC | 	wrlong	result1, fp
0ecbc                 | ' t1=pop()
0ecbc                 | ' channel=converttoint(t1) : : if channel>31 then return
0ecbc     FD 1E 02 F6 | 	mov	local01, result1
0ecc0     10 4E 85 F1 | 	sub	fp, #16
0ecc4     20 1E 56 F2 | 	cmps	local01, #32 wc
0ecc8     F0 03 90 3D |  if_ae	jmp	#LR__1193
0eccc     20 4E 05 F1 | 	add	fp, #32
0ecd0     A7 00 68 FC | 	wrlong	#0, fp
0ecd4                 | ' max=0
0ecd4                 | ' if harm(0)<0 then
0ecd4     1C 4E 05 F1 | 	add	fp, #28
0ecd8     A7 12 02 FB | 	rdlong	arg01, fp
0ecdc     3C 4E 85 F1 | 	sub	fp, #60
0ece0     00 14 06 F6 | 	mov	arg02, #0
0ece4     01 16 06 F6 | 	mov	arg03, #1
0ece8     0C 50 B1 FD | 	call	#__system___float_cmp
0ecec     00 FA 55 F2 | 	cmps	result1, #0 wc
0ecf0     04 01 90 3D |  if_ae	jmp	#LR__1186
0ecf4     3C 4E 05 F1 | 	add	fp, #60
0ecf8     A7 FA 01 FB | 	rdlong	result1, fp
0ecfc     1F FA 05 F4 | 	bitl	result1, #31
0ed00     24 4E 85 F1 | 	sub	fp, #36
0ed04     A7 FA 61 FC | 	wrlong	result1, fp
0ed08     28 4E 05 F1 | 	add	fp, #40
0ed0c     A7 FA 01 FB | 	rdlong	result1, fp
0ed10     1F FA 05 F4 | 	bitl	result1, #31
0ed14     24 4E 85 F1 | 	sub	fp, #36
0ed18     A7 FA 61 FC | 	wrlong	result1, fp
0ed1c     20 4E 05 F1 | 	add	fp, #32
0ed20     00 C0 9F FF 
0ed24     A7 00 68 FC | 	wrlong	##1065353216, fp
0ed28     24 4E 85 F1 | 	sub	fp, #36
0ed2c     A7 1E 02 FB | 	rdlong	local01, fp
0ed30     28 4E 05 F1 | 	add	fp, #40
0ed34     A7 1E 62 FC | 	wrlong	local01, fp
0ed38     24 4E 85 F1 | 	sub	fp, #36
0ed3c     A7 1E 02 FB | 	rdlong	local01, fp
0ed40     28 4E 05 F1 | 	add	fp, #40
0ed44     A7 1E 62 FC | 	wrlong	local01, fp
0ed48                 | '   harm(0)=1
0ed48                 | '   harm(1)=even
0ed48                 | '   harm(2)=odd
0ed48                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0ed48     40 4E 85 F1 | 	sub	fp, #64
0ed4c     A7 06 68 FC | 	wrlong	#3, fp
0ed50                 | LR__1184
0ed50     A7 1A 02 FB | 	rdlong	arg05, fp
0ed54     0D 21 02 F6 | 	mov	local02, arg05
0ed58     02 20 66 F0 | 	shl	local02, #2
0ed5c     38 4E 05 F1 | 	add	fp, #56
0ed60     A7 20 02 F1 | 	add	local02, fp
0ed64     02 1A 86 F1 | 	sub	arg05, #2
0ed68     02 1A 66 F0 | 	shl	arg05, #2
0ed6c     A7 1A 02 F1 | 	add	arg05, fp
0ed70     0D 13 02 FB | 	rdlong	arg01, arg05
0ed74     24 4E 85 F1 | 	sub	fp, #36
0ed78     A7 14 02 FB | 	rdlong	arg02, fp
0ed7c     18 4E 85 F1 | 	sub	fp, #24
0ed80     40 4B B1 FD | 	call	#__system___float_mul
0ed84     10 FB 61 FC | 	wrlong	result1, local02
0ed88     04 4E 05 F1 | 	add	fp, #4
0ed8c     A7 22 02 FB | 	rdlong	local03, fp
0ed90     02 22 06 F1 | 	add	local03, #2
0ed94     A7 22 62 FC | 	wrlong	local03, fp
0ed98     10 22 56 F2 | 	cmps	local03, #16 wc
0ed9c     B0 FF 9F CD |  if_b	jmp	#LR__1184
0eda0                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0eda0     A7 08 68 FC | 	wrlong	#4, fp
0eda4                 | LR__1185
0eda4     A7 22 02 FB | 	rdlong	local03, fp
0eda8     11 21 02 F6 | 	mov	local02, local03
0edac     02 20 66 F0 | 	shl	local02, #2
0edb0     38 4E 05 F1 | 	add	fp, #56
0edb4     A7 20 02 F1 | 	add	local02, fp
0edb8     02 22 86 F1 | 	sub	local03, #2
0edbc     02 22 66 F0 | 	shl	local03, #2
0edc0     A7 22 02 F1 | 	add	local03, fp
0edc4     11 13 02 FB | 	rdlong	arg01, local03
0edc8     20 4E 85 F1 | 	sub	fp, #32
0edcc     A7 14 02 FB | 	rdlong	arg02, fp
0edd0     1C 4E 85 F1 | 	sub	fp, #28
0edd4     EC 4A B1 FD | 	call	#__system___float_mul
0edd8     10 FB 61 FC | 	wrlong	result1, local02
0eddc     04 4E 05 F1 | 	add	fp, #4
0ede0     A7 22 02 FB | 	rdlong	local03, fp
0ede4     02 22 06 F1 | 	add	local03, #2
0ede8     A7 22 62 FC | 	wrlong	local03, fp
0edec     0F 22 56 F2 | 	cmps	local03, #15 wc
0edf0     B0 FF 9F CD |  if_b	jmp	#LR__1185
0edf4     04 4E 85 F1 | 	sub	fp, #4
0edf8                 | LR__1186
0edf8                 | ' if harm(0)>=0 then ' synthesize with harmonics
0edf8     3C 4E 05 F1 | 	add	fp, #60
0edfc     A7 12 02 FB | 	rdlong	arg01, fp
0ee00     3C 4E 85 F1 | 	sub	fp, #60
0ee04     00 14 06 F6 | 	mov	arg02, #0
0ee08     01 16 66 F6 | 	neg	arg03, #1
0ee0c     E8 4E B1 FD | 	call	#__system___float_cmp
0ee10     00 FA 55 F2 | 	cmps	result1, #0 wc
0ee14     A4 02 90 CD |  if_b	jmp	#LR__1192
0ee18                 | '   for i=0 to 1023
0ee18     04 4E 05 F1 | 	add	fp, #4
0ee1c     A7 00 68 FC | 	wrlong	#0, fp
0ee20     04 4E 85 F1 | 	sub	fp, #4
0ee24                 | LR__1187
0ee24     24 4E 05 F1 | 	add	fp, #36
0ee28     A7 00 68 FC | 	wrlong	#0, fp
0ee2c                 | '     spl=0
0ee2c                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0ee2c     1C 4E 85 F1 | 	sub	fp, #28
0ee30     A7 00 68 FC | 	wrlong	#0, fp
0ee34                 | LR__1188
0ee34     A7 20 02 FB | 	rdlong	local02, fp
0ee38     02 20 66 F0 | 	shl	local02, #2
0ee3c     34 4E 05 F1 | 	add	fp, #52
0ee40     A7 20 02 F1 | 	add	local02, fp
0ee44     10 23 02 FB | 	rdlong	local03, local02
0ee48     87 E4 1D FF 
0ee4c     DB 21 06 F6 | 	mov	local02, ##1003032539
0ee50     38 4E 85 F1 | 	sub	fp, #56
0ee54     A7 12 02 FB | 	rdlong	arg01, fp
0ee58     04 4E 85 F1 | 	sub	fp, #4
0ee5c     09 13 52 F6 | 	abs	arg01, arg01 wc
0ee60     1F 24 C6 C9 |  if_b	decod	local04, #31
0ee64     00 24 06 36 |  if_ae	mov	local04, #0
0ee68     54 46 B1 FD | 	call	#__system___float_fromuns
0ee6c     12 FB 61 F5 | 	xor	result1, local04
0ee70     FD 14 02 F6 | 	mov	arg02, result1
0ee74     10 13 02 F6 | 	mov	arg01, local02
0ee78     48 4A B1 FD | 	call	#__system___float_mul
0ee7c     FD 20 02 F6 | 	mov	local02, result1
0ee80     08 4E 05 F1 | 	add	fp, #8
0ee84     A7 12 02 FB | 	rdlong	arg01, fp
0ee88     08 4E 85 F1 | 	sub	fp, #8
0ee8c     01 12 06 F1 | 	add	arg01, #1
0ee90     09 13 52 F6 | 	abs	arg01, arg01 wc
0ee94     1F 24 C6 C9 |  if_b	decod	local04, #31
0ee98     00 24 06 36 |  if_ae	mov	local04, #0
0ee9c     20 46 B1 FD | 	call	#__system___float_fromuns
0eea0     12 FB 61 F5 | 	xor	result1, local04
0eea4     FD 14 02 F6 | 	mov	arg02, result1
0eea8     10 13 02 F6 | 	mov	arg01, local02
0eeac     14 4A B1 FD | 	call	#__system___float_mul
0eeb0     FD 12 02 F6 | 	mov	arg01, result1
0eeb4     48 53 B1 FD | 	call	#__system____builtin_sinf
0eeb8     FD 14 02 F6 | 	mov	arg02, result1
0eebc     11 13 02 F6 | 	mov	arg01, local03
0eec0     00 4A B1 FD | 	call	#__system___float_mul
0eec4     FD 14 02 F6 | 	mov	arg02, result1
0eec8     24 4E 05 F1 | 	add	fp, #36
0eecc     A7 12 02 FB | 	rdlong	arg01, fp
0eed0     24 4E 85 F1 | 	sub	fp, #36
0eed4     1C 46 B1 FD | 	call	#__system___float_add
0eed8     24 4E 05 F1 | 	add	fp, #36
0eedc     A7 FA 61 FC | 	wrlong	result1, fp
0eee0     1C 4E 85 F1 | 	sub	fp, #28
0eee4     A7 16 02 FB | 	rdlong	arg03, fp
0eee8     01 16 06 F1 | 	add	arg03, #1
0eeec     A7 16 62 FC | 	wrlong	arg03, fp
0eef0     10 16 56 F2 | 	cmps	arg03, #16 wc
0eef4     3C FF 9F CD |  if_b	jmp	#LR__1188
0eef8                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0eef8     1C 4E 05 F1 | 	add	fp, #28
0eefc     A7 12 02 FB | 	rdlong	arg01, fp
0ef00     1F 12 06 F4 | 	bitl	arg01, #31
0ef04     04 4E 85 F1 | 	sub	fp, #4
0ef08     A7 14 02 FB | 	rdlong	arg02, fp
0ef0c     20 4E 85 F1 | 	sub	fp, #32
0ef10     01 16 66 F6 | 	neg	arg03, #1
0ef14     E0 4D B1 FD | 	call	#__system___float_cmp
0ef18     01 FA 55 F2 | 	cmps	result1, #1 wc
0ef1c     18 00 90 CD |  if_b	jmp	#LR__1189
0ef20     24 4E 05 F1 | 	add	fp, #36
0ef24     A7 FA 01 FB | 	rdlong	result1, fp
0ef28     1F FA 05 F4 | 	bitl	result1, #31
0ef2c     04 4E 85 F1 | 	sub	fp, #4
0ef30     A7 FA 61 FC | 	wrlong	result1, fp
0ef34     20 4E 85 F1 | 	sub	fp, #32
0ef38                 | LR__1189
0ef38     04 4E 05 F1 | 	add	fp, #4
0ef3c     A7 22 02 FB | 	rdlong	local03, fp
0ef40     01 22 06 F1 | 	add	local03, #1
0ef44     A7 22 62 FC | 	wrlong	local03, fp
0ef48     04 4E 85 F1 | 	sub	fp, #4
0ef4c     02 00 00 FF 
0ef50     00 22 56 F2 | 	cmps	local03, ##1024 wc
0ef54     CC FE 9F CD |  if_b	jmp	#LR__1187
0ef58                 | '   for i=0 to 1023
0ef58     04 4E 05 F1 | 	add	fp, #4
0ef5c     A7 00 68 FC | 	wrlong	#0, fp
0ef60     04 4E 85 F1 | 	sub	fp, #4
0ef64                 | LR__1190
0ef64     24 4E 05 F1 | 	add	fp, #36
0ef68     A7 00 68 FC | 	wrlong	#0, fp
0ef6c                 | '     spl=0
0ef6c                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0ef6c     1C 4E 85 F1 | 	sub	fp, #28
0ef70     A7 00 68 FC | 	wrlong	#0, fp
0ef74                 | LR__1191
0ef74     A7 22 02 FB | 	rdlong	local03, fp
0ef78     02 22 66 F0 | 	shl	local03, #2
0ef7c     34 4E 05 F1 | 	add	fp, #52
0ef80     A7 22 02 F1 | 	add	local03, fp
0ef84     11 23 02 FB | 	rdlong	local03, local03
0ef88     1C 4E 85 F1 | 	sub	fp, #28
0ef8c     A7 14 02 FB | 	rdlong	arg02, fp
0ef90     20 4E 85 F1 | 	sub	fp, #32
0ef94     58 7F 23 FF 
0ef98     00 12 06 F6 | 	mov	arg01, ##1191096320
0ef9c     28 4B B1 FD | 	call	#__system___float_div
0efa0     FD 14 02 F6 | 	mov	arg02, result1
0efa4     11 13 02 F6 | 	mov	arg01, local03
0efa8     18 49 B1 FD | 	call	#__system___float_mul
0efac     FD 22 02 F6 | 	mov	local03, result1
0efb0     87 E4 1D FF 
0efb4     DB 21 06 F6 | 	mov	local02, ##1003032539
0efb8     04 4E 05 F1 | 	add	fp, #4
0efbc     A7 12 02 FB | 	rdlong	arg01, fp
0efc0     04 4E 85 F1 | 	sub	fp, #4
0efc4     09 13 52 F6 | 	abs	arg01, arg01 wc
0efc8     1F 24 C6 C9 |  if_b	decod	local04, #31
0efcc     00 24 06 36 |  if_ae	mov	local04, #0
0efd0     EC 44 B1 FD | 	call	#__system___float_fromuns
0efd4     12 FB 61 F5 | 	xor	result1, local04
0efd8     FD 14 02 F6 | 	mov	arg02, result1
0efdc     10 13 02 F6 | 	mov	arg01, local02
0efe0     E0 48 B1 FD | 	call	#__system___float_mul
0efe4     FD 20 02 F6 | 	mov	local02, result1
0efe8     08 4E 05 F1 | 	add	fp, #8
0efec     A7 12 02 FB | 	rdlong	arg01, fp
0eff0     08 4E 85 F1 | 	sub	fp, #8
0eff4     01 12 06 F1 | 	add	arg01, #1
0eff8     09 13 52 F6 | 	abs	arg01, arg01 wc
0effc     1F 24 C6 C9 |  if_b	decod	local04, #31
0f000     00 24 06 36 |  if_ae	mov	local04, #0
0f004     B8 44 B1 FD | 	call	#__system___float_fromuns
0f008     12 FB 61 F5 | 	xor	result1, local04
0f00c     FD 14 02 F6 | 	mov	arg02, result1
0f010     10 13 02 F6 | 	mov	arg01, local02
0f014     AC 48 B1 FD | 	call	#__system___float_mul
0f018     FD 12 02 F6 | 	mov	arg01, result1
0f01c     E0 51 B1 FD | 	call	#__system____builtin_sinf
0f020     FD 14 02 F6 | 	mov	arg02, result1
0f024     11 13 02 F6 | 	mov	arg01, local03
0f028     98 48 B1 FD | 	call	#__system___float_mul
0f02c     FD 14 02 F6 | 	mov	arg02, result1
0f030     24 4E 05 F1 | 	add	fp, #36
0f034     A7 12 02 FB | 	rdlong	arg01, fp
0f038     24 4E 85 F1 | 	sub	fp, #36
0f03c     B4 44 B1 FD | 	call	#__system___float_add
0f040     24 4E 05 F1 | 	add	fp, #36
0f044     A7 FA 61 FC | 	wrlong	result1, fp
0f048     1C 4E 85 F1 | 	sub	fp, #28
0f04c     A7 22 02 FB | 	rdlong	local03, fp
0f050     01 22 06 F1 | 	add	local03, #1
0f054     A7 22 62 FC | 	wrlong	local03, fp
0f058     10 22 56 F2 | 	cmps	local03, #16 wc
0f05c     14 FF 9F CD |  if_b	jmp	#LR__1191
0f060     08 4E 05 F1 | 	add	fp, #8
0f064     A7 22 02 FB | 	rdlong	local03, fp
0f068     0B 22 66 F0 | 	shl	local03, #11
0f06c     0C 4E 85 F1 | 	sub	fp, #12
0f070     A7 20 02 FB | 	rdlong	local02, fp
0f074     01 20 66 F0 | 	shl	local02, #1
0f078     10 23 02 F1 | 	add	local03, local02
0f07c     20 4E 05 F1 | 	add	fp, #32
0f080     A7 12 02 FB | 	rdlong	arg01, fp
0f084     24 4E 85 F1 | 	sub	fp, #36
0f088     01 14 06 F6 | 	mov	arg02, #1
0f08c     FC 4C B1 FD | 	call	#__system___float_tointeger
0f090     FD 14 02 F6 | 	mov	arg02, result1
0f094     11 13 02 F6 | 	mov	arg01, local03
0f098     78 D9 B0 FD | 	call	#_psdpoke
0f09c     04 4E 05 F1 | 	add	fp, #4
0f0a0     A7 22 02 FB | 	rdlong	local03, fp
0f0a4     01 22 06 F1 | 	add	local03, #1
0f0a8     A7 22 62 FC | 	wrlong	local03, fp
0f0ac     04 4E 85 F1 | 	sub	fp, #4
0f0b0     02 00 00 FF 
0f0b4     00 22 56 F2 | 	cmps	local03, ##1024 wc
0f0b8     A8 FE 9F CD |  if_b	jmp	#LR__1190
0f0bc                 | LR__1192
0f0bc                 | LR__1193
0f0bc     A7 F0 03 F6 | 	mov	ptra, fp
0f0c0     B2 00 A0 FD | 	call	#popregs_
0f0c4                 | _do_defsnd_ret
0f0c4     2D 00 64 FD | 	ret
0f0c8                 | 
0f0c8                 | ' 
0f0c8                 | ' ' ---------------  List the program. 
0f0c8                 | ' 
0f0c8                 | ' sub do_list
0f0c8                 | _do_list
0f0c8     02 4A 05 F6 | 	mov	COUNT_, #2
0f0cc     A8 00 A0 FD | 	call	#pushregs_
0f0d0     B8 F0 07 F1 | 	add	ptra, #184
0f0d4     04 4E 05 F1 | 	add	fp, #4
0f0d8     A7 00 68 FC | 	wrlong	#0, fp
0f0dc     04 4E 05 F1 | 	add	fp, #4
0f0e0     FF FF BF FF 
0f0e4     A7 FE 6B FC | 	wrlong	##2147483647, fp
0f0e8     08 4E 85 F1 | 	sub	fp, #8
0f0ec     4A 00 00 FF 
0f0f0     B0 E4 05 F1 | 	add	objptr, ##38064
0f0f4     F2 1E 02 FB | 	rdlong	local01, objptr
0f0f8     0F 17 02 F6 | 	mov	arg03, local01
0f0fc     01 16 66 F0 | 	shl	arg03, #1
0f100     0F 17 02 F1 | 	add	arg03, local01
0f104     02 16 66 F0 | 	shl	arg03, #2
0f108     03 00 00 FF 
0f10c     04 E4 85 F1 | 	sub	objptr, ##1540
0f110     F2 16 02 F1 | 	add	arg03, objptr
0f114     0B 17 02 FB | 	rdlong	arg03, arg03
0f118     A7 16 62 FC | 	wrlong	arg03, fp
0f11c                 | ' 
0f11c                 | ' startline=0 : endline=$7FFFFFFF
0f11c                 | ' numpar=compiledline(lineptr_e).result.uresult
0f11c                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0f11c     01 16 0E F2 | 	cmp	arg03, #1 wz
0f120     47 00 00 FF 
0f124     AC E4 85 F1 | 	sub	objptr, ##36524
0f128     3C 00 90 5D |  if_ne	jmp	#LR__1200
0f12c     94 BF BF FD | 	call	#_pop
0f130     FF 1E 02 F6 | 	mov	local01, result3
0f134     0C 4E 05 F1 | 	add	fp, #12
0f138     A7 FA 61 FC | 	wrlong	result1, fp
0f13c     04 4E 05 F1 | 	add	fp, #4
0f140     A7 FC 61 FC | 	wrlong	result2, fp
0f144     04 4E 05 F1 | 	add	fp, #4
0f148     A7 1E 62 FC | 	wrlong	local01, fp
0f14c     08 4E 85 F1 | 	sub	fp, #8
0f150     A7 12 02 F6 | 	mov	arg01, fp
0f154     0C 4E 85 F1 | 	sub	fp, #12
0f158     38 60 B0 FD | 	call	#_converttoint
0f15c     04 4E 05 F1 | 	add	fp, #4
0f160     A7 FA 61 FC | 	wrlong	result1, fp
0f164     04 4E 85 F1 | 	sub	fp, #4
0f168                 | LR__1200
0f168                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0f168     A7 16 02 FB | 	rdlong	arg03, fp
0f16c     02 16 0E F2 | 	cmp	arg03, #2 wz
0f170     7C 00 90 5D |  if_ne	jmp	#LR__1201
0f174     4C BF BF FD | 	call	#_pop
0f178     FF 1E 02 F6 | 	mov	local01, result3
0f17c     0C 4E 05 F1 | 	add	fp, #12
0f180     A7 FA 61 FC | 	wrlong	result1, fp
0f184     04 4E 05 F1 | 	add	fp, #4
0f188     A7 FC 61 FC | 	wrlong	result2, fp
0f18c     04 4E 05 F1 | 	add	fp, #4
0f190     A7 1E 62 FC | 	wrlong	local01, fp
0f194     08 4E 85 F1 | 	sub	fp, #8
0f198     A7 12 02 F6 | 	mov	arg01, fp
0f19c     0C 4E 85 F1 | 	sub	fp, #12
0f1a0     F0 5F B0 FD | 	call	#_converttoint
0f1a4     FD 1E 02 F6 | 	mov	local01, result1
0f1a8     08 4E 05 F1 | 	add	fp, #8
0f1ac     A7 1E 62 FC | 	wrlong	local01, fp
0f1b0     08 4E 85 F1 | 	sub	fp, #8
0f1b4     0C BF BF FD | 	call	#_pop
0f1b8     FF 1E 02 F6 | 	mov	local01, result3
0f1bc     0C 4E 05 F1 | 	add	fp, #12
0f1c0     A7 FA 61 FC | 	wrlong	result1, fp
0f1c4     04 4E 05 F1 | 	add	fp, #4
0f1c8     A7 FC 61 FC | 	wrlong	result2, fp
0f1cc     04 4E 05 F1 | 	add	fp, #4
0f1d0     A7 1E 62 FC | 	wrlong	local01, fp
0f1d4     08 4E 85 F1 | 	sub	fp, #8
0f1d8     A7 12 02 F6 | 	mov	arg01, fp
0f1dc     0C 4E 85 F1 | 	sub	fp, #12
0f1e0     B0 5F B0 FD | 	call	#_converttoint
0f1e4     04 4E 05 F1 | 	add	fp, #4
0f1e8     A7 FA 61 FC | 	wrlong	result1, fp
0f1ec     04 4E 85 F1 | 	sub	fp, #4
0f1f0                 | LR__1201
0f1f0                 | ' 
0f1f0                 | ' 
0f1f0                 | ' print
0f1f0     00 12 06 F6 | 	mov	arg01, #0
0f1f4     58 75 B1 FD | 	call	#__system___getiolock_0540
0f1f8     FD 12 02 F6 | 	mov	arg01, result1
0f1fc     10 1B B1 FD | 	call	#__system___lockmem
0f200     00 12 06 F6 | 	mov	arg01, #0
0f204     0A 14 06 F6 | 	mov	arg02, #10
0f208     00 16 06 F6 | 	mov	arg03, #0
0f20c     9C 27 B1 FD | 	call	#__system___basic_print_char
0f210     00 12 06 F6 | 	mov	arg01, #0
0f214     38 75 B1 FD | 	call	#__system___getiolock_0540
0f218     FD 00 68 FC | 	wrlong	#0, result1
0f21c     4A 00 00 FF 
0f220     B4 E4 05 F1 | 	add	objptr, ##38068
0f224     F2 20 02 FB | 	rdlong	local02, objptr
0f228     0F 00 00 FF 
0f22c     CC E5 05 F1 | 	add	objptr, ##8140
0f230     F2 20 62 FC | 	wrlong	local02, objptr
0f234     5A 00 00 FF 
0f238     80 E4 85 F1 | 	sub	objptr, ##46208
0f23c                 | ' do 
0f23c                 | LR__1202
0f23c     20 4E 05 F1 | 	add	fp, #32
0f240     A7 12 02 F6 | 	mov	arg01, fp
0f244     20 4E 85 F1 | 	sub	fp, #32
0f248     5A 00 00 FF 
0f24c     80 E4 05 F1 | 	add	objptr, ##46208
0f250     F2 14 02 FB | 	rdlong	arg02, objptr
0f254     18 16 06 F6 | 	mov	arg03, #24
0f258     4E 00 00 FF 
0f25c     B4 E5 85 F1 | 	sub	objptr, ##40372
0f260     6C 0E B1 FD | 	call	#_psram_spin2_read1
0f264     0B 00 00 FF 
0f268     CC E4 85 F1 | 	sub	objptr, ##5836
0f26c                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
0f26c                 | '   
0f26c                 | '   if header(0)<> $FFFFFFFF then
0f26c     20 4E 05 F1 | 	add	fp, #32
0f270     A7 20 02 FB | 	rdlong	local02, fp
0f274     20 4E 85 F1 | 	sub	fp, #32
0f278     FF FF 7F FF 
0f27c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0f280     A8 00 90 AD |  if_e	jmp	#LR__1204
0f284     38 4E 05 F1 | 	add	fp, #56
0f288     3F 16 06 F6 | 	mov	arg03, #63
0f28c     28 16 62 FD | 	setq	arg03
0f290     A7 00 68 FC | 	wrlong	#0, fp
0f294     A7 12 02 F6 | 	mov	arg01, fp
0f298     10 4E 85 F1 | 	sub	fp, #16
0f29c     A7 14 02 FB | 	rdlong	arg02, fp
0f2a0     04 4E 05 F1 | 	add	fp, #4
0f2a4     A7 16 02 FB | 	rdlong	arg03, fp
0f2a8     2C 4E 85 F1 | 	sub	fp, #44
0f2ac     0B 00 00 FF 
0f2b0     CC E4 05 F1 | 	add	objptr, ##5836
0f2b4     18 0E B1 FD | 	call	#_psram_spin2_read1
0f2b8     0B 00 00 FF 
0f2bc     CC E4 85 F1 | 	sub	objptr, ##5836
0f2c0                 | '     longfill(linebuf,0,64)
0f2c0                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0f2c0                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0f2c0     20 4E 05 F1 | 	add	fp, #32
0f2c4     A7 20 02 FB | 	rdlong	local02, fp
0f2c8     1C 4E 85 F1 | 	sub	fp, #28
0f2cc     A7 1E 02 FB | 	rdlong	local01, fp
0f2d0     04 4E 85 F1 | 	sub	fp, #4
0f2d4     0F 21 52 F2 | 	cmps	local02, local01 wc
0f2d8     30 00 90 CD |  if_b	jmp	#LR__1203
0f2dc     20 4E 05 F1 | 	add	fp, #32
0f2e0     A7 20 02 FB | 	rdlong	local02, fp
0f2e4     18 4E 85 F1 | 	sub	fp, #24
0f2e8     A7 16 02 FB | 	rdlong	arg03, fp
0f2ec     08 4E 85 F1 | 	sub	fp, #8
0f2f0     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0f2f4     14 00 90 1D |  if_a	jmp	#LR__1203
0f2f8     38 4E 05 F1 | 	add	fp, #56
0f2fc     A7 12 02 F6 | 	mov	arg01, fp
0f300     38 4E 85 F1 | 	sub	fp, #56
0f304                 | ' 
0f304                 | ' write(text)
0f304     20 07 B1 FD | 	call	#_hg010b_spin2_write
0f308                 | ' crlf
0f308     E8 09 B1 FD | 	call	#_hg010b_spin2_crlf
0f30c                 | LR__1203
0f30c     34 4E 05 F1 | 	add	fp, #52
0f310     A7 20 02 FB | 	rdlong	local02, fp
0f314     34 4E 85 F1 | 	sub	fp, #52
0f318     5A 00 00 FF 
0f31c     80 E4 05 F1 | 	add	objptr, ##46208
0f320     F2 20 62 FC | 	wrlong	local02, objptr
0f324     5A 00 00 FF 
0f328     80 E4 85 F1 | 	sub	objptr, ##46208
0f32c                 | LR__1204
0f32c     34 4E 05 F1 | 	add	fp, #52
0f330     A7 20 02 FB | 	rdlong	local02, fp
0f334     34 4E 85 F1 | 	sub	fp, #52
0f338     FF FF 3F FF 
0f33c     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0f340     20 4E 05 51 |  if_ne	add	fp, #32
0f344     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f348     20 4E 85 51 |  if_ne	sub	fp, #32
0f34c     FF FF 7F 5F 
0f350     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0f354     E4 FE 9F 5D |  if_ne	jmp	#LR__1202
0f358     A7 F0 03 F6 | 	mov	ptra, fp
0f35c     B2 00 A0 FD | 	call	#popregs_
0f360                 | _do_list_ret
0f360     2D 00 64 FD | 	ret
0f364                 | 
0f364                 | ' 
0f364                 | ' '---------------- Clear the program
0f364                 | ' 
0f364                 | ' sub do_new
0f364                 | _do_new
0f364     03 4A 05 F6 | 	mov	COUNT_, #3
0f368     A8 00 A0 FD | 	call	#pushregs_
0f36c     13 12 C6 F9 | 	decod	arg01, #19
0f370     01 14 66 F6 | 	neg	arg02, #1
0f374     54 D6 B0 FD | 	call	#_pslpoke
0f378     35 00 00 FF 
0f37c     38 E4 05 F1 | 	add	objptr, ##27192
0f380     F2 00 68 FC | 	wrlong	#0, objptr
0f384                 | ' 
0f384                 | ' pslpoke(memlo,$FFFFFFFF)
0f384                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
0f384     00 1E 06 F6 | 	mov	local01, #0
0f388     20 00 00 FF 
0f38c     10 E4 85 F1 | 	sub	objptr, ##16400
0f390     97 1E 48 FB | 	callpa	#(@LR__1211-@LR__1210)>>2,fcache_load_ptr_
0f394                 | LR__1210
0f394     0F 17 02 F6 | 	mov	arg03, local01
0f398     04 16 66 F0 | 	shl	arg03, #4
0f39c     F2 16 02 F1 | 	add	arg03, objptr
0f3a0     86 01 00 FF 
0f3a4     86 14 06 F6 | 	mov	arg02, ##@LR__5389
0f3a8     0B 15 62 FC | 	wrlong	arg02, arg03
0f3ac     0F 21 02 F6 | 	mov	local02, local01
0f3b0     04 20 66 F0 | 	shl	local02, #4
0f3b4     F2 20 02 F1 | 	add	local02, objptr
0f3b8     0C 20 06 F1 | 	add	local02, #12
0f3bc     10 01 68 FC | 	wrlong	#0, local02
0f3c0     01 1E 06 F1 | 	add	local01, #1
0f3c4     02 00 00 FF 
0f3c8     01 1E 56 F2 | 	cmps	local01, ##1025 wc
0f3cc     C4 FF 9F CD |  if_b	jmp	#LR__1210
0f3d0                 | LR__1211
0f3d0     35 00 00 FF 
0f3d4     8C E4 05 F1 | 	add	objptr, ##27276
0f3d8     00 04 80 FF 
0f3dc     F2 00 68 FC | 	wrlong	##524288, objptr
0f3e0     0E 00 00 FF 
0f3e4     38 E4 05 F1 | 	add	objptr, ##7224
0f3e8     00 04 80 FF 
0f3ec     F2 00 68 FC | 	wrlong	##524288, objptr
0f3f0     04 E4 05 F1 | 	add	objptr, #4
0f3f4     00 04 80 FF 
0f3f8     F2 00 68 FC | 	wrlong	##524288, objptr
0f3fc     15 00 00 FF 
0f400     68 E4 85 F1 | 	sub	objptr, ##10856
0f404     F2 00 68 FC | 	wrlong	#0, objptr
0f408     07 00 00 FF 
0f40c     24 E4 05 F1 | 	add	objptr, ##3620
0f410     F2 00 68 FC | 	wrlong	#0, objptr
0f414     07 00 00 FF 
0f418     20 E4 85 F1 | 	sub	objptr, ##3616
0f41c     00 04 80 FF 
0f420     F2 00 68 FC | 	wrlong	##524288, objptr
0f424     0F 00 00 FF 
0f428     38 E4 05 F1 | 	add	objptr, ##7736
0f42c     F2 00 68 FC | 	wrlong	#0, objptr
0f430     08 00 00 FF 
0f434     0C E4 85 F1 | 	sub	objptr, ##4108
0f438     F2 00 68 FC | 	wrlong	#0, objptr
0f43c     04 E4 05 F1 | 	add	objptr, #4
0f440     FF FF FF FF 
0f444     F2 FE 6B FC | 	wrlong	##-1, objptr
0f448     0E 00 00 FF 
0f44c     80 E4 05 F1 | 	add	objptr, ##7296
0f450     F2 00 68 FC | 	wrlong	#0, objptr
0f454     04 E4 05 F1 | 	add	objptr, #4
0f458     F2 00 68 FC | 	wrlong	#0, objptr
0f45c                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
0f45c                 | ' stackpointer=0
0f45c                 | ' lineptr=0 
0f45c                 | ' programptr=memlo : stringptr=0
0f45c                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
0f45c                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0f45c     00 1E 06 F6 | 	mov	local01, #0
0f460     06 00 00 FF 
0f464     74 E4 85 F1 | 	sub	objptr, ##3188
0f468     97 16 48 FB | 	callpa	#(@LR__1213-@LR__1212)>>2,fcache_load_ptr_
0f46c                 | LR__1212
0f46c     0F 21 02 F6 | 	mov	local02, local01
0f470     02 20 66 F0 | 	shl	local02, #2
0f474     0F 21 02 F1 | 	add	local02, local01
0f478     02 20 66 F0 | 	shl	local02, #2
0f47c     F2 20 02 F1 | 	add	local02, objptr
0f480     08 20 06 F1 | 	add	local02, #8
0f484     FF FF FF FF 
0f488     10 FF 6B FC | 	wrlong	##-1, local02
0f48c     01 1E 06 F1 | 	add	local01, #1
0f490     41 1E 56 F2 | 	cmps	local01, #65 wc
0f494     D4 FF 9F CD |  if_b	jmp	#LR__1212
0f498                 | LR__1213
0f498     52 00 00 FF 
0f49c     CC E4 85 F1 | 	sub	objptr, ##42188
0f4a0                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
0f4a0     00 1E 06 F6 | 	mov	local01, #0
0f4a4                 | LR__1214
0f4a4     0F 21 02 F6 | 	mov	local02, local01
0f4a8     02 20 66 F0 | 	shl	local02, #2
0f4ac     59 00 00 FF 
0f4b0     9C E5 05 F1 | 	add	objptr, ##45980
0f4b4     F2 20 02 F1 | 	add	local02, objptr
0f4b8     10 23 0A FB | 	rdlong	local03, local02 wz
0f4bc     59 00 00 FF 
0f4c0     9C E5 85 F1 | 	sub	objptr, ##45980
0f4c4     34 00 90 AD |  if_e	jmp	#LR__1215
0f4c8     0F 13 02 F6 | 	mov	arg01, local01
0f4cc     00 14 06 F6 | 	mov	arg02, #0
0f4d0     00 16 06 F6 | 	mov	arg03, #0
0f4d4     70 F4 B0 FD | 	call	#_hg010b_spin2_setspritesize
0f4d8     0F 21 02 F6 | 	mov	local02, local01
0f4dc     02 20 66 F0 | 	shl	local02, #2
0f4e0     59 00 00 FF 
0f4e4     9C E5 05 F1 | 	add	objptr, ##45980
0f4e8     F2 20 02 F1 | 	add	local02, objptr
0f4ec     10 13 02 FB | 	rdlong	arg01, local02
0f4f0     59 00 00 FF 
0f4f4     9C E5 85 F1 | 	sub	objptr, ##45980
0f4f8     08 58 B1 FD | 	call	#__system___gc_free
0f4fc                 | LR__1215
0f4fc     01 1E 06 F1 | 	add	local01, #1
0f500     10 1E 56 F2 | 	cmps	local01, #16 wc
0f504     9C FF 9F CD |  if_b	jmp	#LR__1214
0f508     59 00 00 FF 
0f50c     F0 E5 05 F1 | 	add	objptr, ##46064
0f510     00 C0 9F FF 
0f514     F2 00 68 FC | 	wrlong	##1065353216, objptr
0f518     04 E4 05 F1 | 	add	objptr, #4
0f51c     00 C0 9F FF 
0f520     F2 00 68 FC | 	wrlong	##1065353216, objptr
0f524     59 00 00 FF 
0f528     F0 E5 85 F1 | 	sub	objptr, ##46064
0f52c     F2 22 02 FB | 	rdlong	local03, objptr
0f530     59 00 00 FF 
0f534     DC E5 05 F1 | 	add	objptr, ##46044
0f538     F2 22 62 FC | 	wrlong	local03, objptr
0f53c     59 00 00 FF 
0f540     E0 E5 85 F1 | 	sub	objptr, ##46048
0f544     11 12 06 F6 | 	mov	arg01, #17
0f548     08 14 06 F6 | 	mov	arg02, #8
0f54c     10 16 06 F6 | 	mov	arg03, #16
0f550     F4 F3 B0 FD | 	call	#_hg010b_spin2_setspritesize
0f554     10 12 06 F6 | 	mov	arg01, #16
0f558     20 14 06 F6 | 	mov	arg02, #32
0f55c     20 16 06 F6 | 	mov	arg03, #32
0f560     E4 F3 B0 FD | 	call	#_hg010b_spin2_setspritesize
0f564     86 01 00 FF 
0f568     87 22 06 F6 | 	mov	local03, ##@LR__5390
0f56c     5A 00 00 FF 
0f570     0C E4 05 F1 | 	add	objptr, ##46092
0f574     F2 22 62 FC | 	wrlong	local03, objptr
0f578     5A 00 00 FF 
0f57c     0C E4 85 F1 | 	sub	objptr, ##46092
0f580     A4 C6 B0 FD | 	call	#_init_audio
0f584     A7 F0 03 F6 | 	mov	ptra, fp
0f588     B2 00 A0 FD | 	call	#popregs_
0f58c                 | _do_new_ret
0f58c     2D 00 64 FD | 	ret
0f590                 | 
0f590                 | ' 
0f590                 | ' '----------------------- goto
0f590                 | ' sub do_fast_goto
0f590                 | _do_fast_goto
0f590     02 4A 05 F6 | 	mov	COUNT_, #2
0f594     A8 00 A0 FD | 	call	#pushregs_
0f598                 | _do_fast_goto_enter
0f598     4A 00 00 FF 
0f59c     B0 E4 05 F1 | 	add	objptr, ##38064
0f5a0     F2 12 02 FB | 	rdlong	arg01, objptr
0f5a4     09 1F 02 F6 | 	mov	local01, arg01
0f5a8     01 1E 66 F0 | 	shl	local01, #1
0f5ac     09 1F 02 F1 | 	add	local01, arg01
0f5b0     02 1E 66 F0 | 	shl	local01, #2
0f5b4     03 00 00 FF 
0f5b8     04 E4 85 F1 | 	sub	objptr, ##1540
0f5bc     F2 1E 02 F1 | 	add	local01, objptr
0f5c0     0F 21 02 FB | 	rdlong	local02, local01
0f5c4     10 13 02 F6 | 	mov	arg01, local02
0f5c8     47 00 00 FF 
0f5cc     AC E4 85 F1 | 	sub	objptr, ##36524
0f5d0     28 D5 B0 FD | 	call	#_pslpeek
0f5d4     FD 12 02 F6 | 	mov	arg01, result1
0f5d8                 | ' 
0f5d8                 | ' testptr=compiledline(lineptr_e).result.uresult
0f5d8                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0f5d8                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0f5d8     4A 00 00 FF 
0f5dc     B0 E4 05 F1 | 	add	objptr, ##38064
0f5e0     F2 FA 01 FB | 	rdlong	result1, objptr
0f5e4     FD 1E 02 F6 | 	mov	local01, result1
0f5e8     01 1E 66 F0 | 	shl	local01, #1
0f5ec     FD 1E 02 F1 | 	add	local01, result1
0f5f0     02 1E 66 F0 | 	shl	local01, #2
0f5f4     03 00 00 FF 
0f5f8     04 E4 85 F1 | 	sub	objptr, ##1540
0f5fc     F2 1E 02 F1 | 	add	local01, objptr
0f600     04 1E 06 F1 | 	add	local01, #4
0f604     0F 1F 02 FB | 	rdlong	local01, local01
0f608     0F 13 0A F2 | 	cmp	arg01, local01 wz
0f60c     47 00 00 FF 
0f610     AC E4 85 F1 | 	sub	objptr, ##36524
0f614     58 00 90 5D |  if_ne	jmp	#LR__1220
0f618     58 00 00 FF 
0f61c     EC E4 05 F1 | 	add	objptr, ##45292
0f620     F2 20 62 FC | 	wrlong	local02, objptr
0f624     0E 00 00 FF 
0f628     40 E4 85 F1 | 	sub	objptr, ##7232
0f62c     F2 20 02 FB | 	rdlong	local02, objptr
0f630     01 20 86 F1 | 	sub	local02, #1
0f634     04 E4 05 F1 | 	add	objptr, #4
0f638     F2 20 62 FC | 	wrlong	local02, objptr
0f63c                 | '   runptr=testptr
0f63c                 | '   lineptr_e=lineptr-1
0f63c                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0f63c     0E 00 00 FF 
0f640     88 E4 05 F1 | 	add	objptr, ##7304
0f644     F2 20 02 FB | 	rdlong	local02, objptr
0f648     58 00 00 FF 
0f64c     38 E5 85 F1 | 	sub	objptr, ##45368
0f650     FF FF 3F FF 
0f654     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0f658     58 00 00 AF 
0f65c     38 E5 05 A1 |  if_e	add	objptr, ##45368
0f660     F2 00 68 AC |  if_e	wrlong	#0, objptr
0f664     58 00 00 AF 
0f668     38 E5 85 A1 |  if_e	sub	objptr, ##45368
0f66c     04 00 90 FD | 	jmp	#LR__1221
0f670                 | LR__1220
0f670     84 0E B0 FD | 	call	#_do_find_goto
0f674                 | LR__1221
0f674     A7 F0 03 F6 | 	mov	ptra, fp
0f678     B2 00 A0 FD | 	call	#popregs_
0f67c                 | _do_fast_goto_ret
0f67c     2D 00 64 FD | 	ret
0f680                 | 
0f680                 | ' 
0f680                 | ' sub do_open
0f680                 | _do_open
0f680     02 4A 05 F6 | 	mov	COUNT_, #2
0f684     A8 00 A0 FD | 	call	#pushregs_
0f688     20 F0 07 F1 | 	add	ptra, #32
0f68c     4A 00 00 FF 
0f690     B0 E4 05 F1 | 	add	objptr, ##38064
0f694     F2 16 02 FB | 	rdlong	arg03, objptr
0f698     0B 15 02 F6 | 	mov	arg02, arg03
0f69c     01 14 66 F0 | 	shl	arg02, #1
0f6a0     0B 15 02 F1 | 	add	arg02, arg03
0f6a4     02 14 66 F0 | 	shl	arg02, #2
0f6a8     03 00 00 FF 
0f6ac     04 E4 85 F1 | 	sub	objptr, ##1540
0f6b0     F2 14 02 F1 | 	add	arg02, objptr
0f6b4     0A 17 02 FB | 	rdlong	arg03, arg02
0f6b8     10 4E 05 F1 | 	add	fp, #16
0f6bc     A7 16 62 FC | 	wrlong	arg03, fp
0f6c0     10 4E 85 F1 | 	sub	fp, #16
0f6c4     47 00 00 FF 
0f6c8     AC E4 85 F1 | 	sub	objptr, ##36524
0f6cc     F4 B9 BF FD | 	call	#_pop
0f6d0     FF 16 02 F6 | 	mov	arg03, result3
0f6d4     A7 FA 61 FC | 	wrlong	result1, fp
0f6d8     04 4E 05 F1 | 	add	fp, #4
0f6dc     A7 FC 61 FC | 	wrlong	result2, fp
0f6e0     04 4E 05 F1 | 	add	fp, #4
0f6e4     A7 16 62 FC | 	wrlong	arg03, fp
0f6e8                 | ' 
0f6e8                 | ' numpar=compiledline(lineptr_e).result.uresult
0f6e8                 | ' 
0f6e8                 | ' t1=pop()
0f6e8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0f6e8     08 4E 85 F1 | 	sub	fp, #8
0f6ec     2B 16 0E F2 | 	cmp	arg03, #43 wz
0f6f0     18 00 90 5D |  if_ne	jmp	#LR__1230
0f6f4     A7 12 02 FB | 	rdlong	arg01, fp
0f6f8     74 12 B0 FD | 	call	#_convertstring
0f6fc     A7 FA 61 FC | 	wrlong	result1, fp
0f700     08 4E 05 F1 | 	add	fp, #8
0f704     A7 3E 68 FC | 	wrlong	#31, fp
0f708     08 4E 85 F1 | 	sub	fp, #8
0f70c                 | LR__1230
0f70c                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
0f70c     08 4E 05 F1 | 	add	fp, #8
0f710     A7 16 02 FB | 	rdlong	arg03, fp
0f714     08 4E 85 F1 | 	sub	fp, #8
0f718     1F 16 0E F2 | 	cmp	arg03, #31 wz
0f71c     44 00 90 AD |  if_e	jmp	#LR__1231
0f720     00 12 06 F6 | 	mov	arg01, #0
0f724     28 70 B1 FD | 	call	#__system___getiolock_0540
0f728     FD 12 02 F6 | 	mov	arg01, result1
0f72c     E0 15 B1 FD | 	call	#__system___lockmem
0f730     86 01 00 FF 
0f734     92 14 06 F6 | 	mov	arg02, ##@LR__5391
0f738     00 12 06 F6 | 	mov	arg01, #0
0f73c     00 16 06 F6 | 	mov	arg03, #0
0f740     C0 22 B1 FD | 	call	#__system___basic_print_string
0f744     00 12 06 F6 | 	mov	arg01, #0
0f748     0A 14 06 F6 | 	mov	arg02, #10
0f74c     00 16 06 F6 | 	mov	arg03, #0
0f750     58 22 B1 FD | 	call	#__system___basic_print_char
0f754     00 12 06 F6 | 	mov	arg01, #0
0f758     F4 6F B1 FD | 	call	#__system___getiolock_0540
0f75c     FD 00 68 FC | 	wrlong	#0, result1
0f760     28 02 90 FD | 	jmp	#LR__1242
0f764                 | LR__1231
0f764     A7 16 02 FB | 	rdlong	arg03, fp
0f768     0C 4E 05 F1 | 	add	fp, #12
0f76c     A7 16 62 FC | 	wrlong	arg03, fp
0f770     0C 4E 85 F1 | 	sub	fp, #12
0f774     4C B9 BF FD | 	call	#_pop
0f778     FF 16 02 F6 | 	mov	arg03, result3
0f77c     A7 FA 61 FC | 	wrlong	result1, fp
0f780     04 4E 05 F1 | 	add	fp, #4
0f784     A7 FC 61 FC | 	wrlong	result2, fp
0f788     04 4E 05 F1 | 	add	fp, #4
0f78c     A7 16 62 FC | 	wrlong	arg03, fp
0f790                 | ' filename=t1.result.sresult
0f790                 | ' t1=pop()
0f790                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0f790     08 4E 85 F1 | 	sub	fp, #8
0f794     2B 16 0E F2 | 	cmp	arg03, #43 wz
0f798     18 00 90 5D |  if_ne	jmp	#LR__1232
0f79c     A7 12 02 FB | 	rdlong	arg01, fp
0f7a0     CC 11 B0 FD | 	call	#_convertstring
0f7a4     A7 FA 61 FC | 	wrlong	result1, fp
0f7a8     08 4E 05 F1 | 	add	fp, #8
0f7ac     A7 3E 68 FC | 	wrlong	#31, fp
0f7b0     08 4E 85 F1 | 	sub	fp, #8
0f7b4                 | LR__1232
0f7b4     14 4E 05 F1 | 	add	fp, #20
0f7b8     A7 00 68 FC | 	wrlong	#0, fp
0f7bc                 | ' mode=0
0f7bc                 | ' if t1.result_type=result_string then
0f7bc     0C 4E 85 F1 | 	sub	fp, #12
0f7c0     A7 14 02 FB | 	rdlong	arg02, fp
0f7c4     08 4E 85 F1 | 	sub	fp, #8
0f7c8     1F 14 0E F2 | 	cmp	arg02, #31 wz
0f7cc     64 00 90 5D |  if_ne	jmp	#LR__1233
0f7d0                 | '   if t1.result.sresult="read" then mode=1
0f7d0     A7 12 02 FB | 	rdlong	arg01, fp
0f7d4     86 01 00 FF 
0f7d8     A4 14 06 F6 | 	mov	arg02, ##@LR__5392
0f7dc     58 15 B1 FD | 	call	#__system___string_cmp
0f7e0     00 FA 0D F2 | 	cmp	result1, #0 wz
0f7e4     14 4E 05 A1 |  if_e	add	fp, #20
0f7e8     A7 02 68 AC |  if_e	wrlong	#1, fp
0f7ec     14 4E 85 A1 |  if_e	sub	fp, #20
0f7f0                 | '   if t1.result.sresult="write" then mode=2
0f7f0     A7 12 02 FB | 	rdlong	arg01, fp
0f7f4     86 01 00 FF 
0f7f8     A9 14 06 F6 | 	mov	arg02, ##@LR__5393
0f7fc     38 15 B1 FD | 	call	#__system___string_cmp
0f800     00 FA 0D F2 | 	cmp	result1, #0 wz
0f804     14 4E 05 A1 |  if_e	add	fp, #20
0f808     A7 04 68 AC |  if_e	wrlong	#2, fp
0f80c     14 4E 85 A1 |  if_e	sub	fp, #20
0f810                 | '   if t1.result.sresult="append" then mode=4
0f810     A7 12 02 FB | 	rdlong	arg01, fp
0f814     86 01 00 FF 
0f818     AF 14 06 F6 | 	mov	arg02, ##@LR__5394
0f81c     18 15 B1 FD | 	call	#__system___string_cmp
0f820     00 FA 0D F2 | 	cmp	result1, #0 wz
0f824     14 4E 05 A1 |  if_e	add	fp, #20
0f828     A7 08 68 AC |  if_e	wrlong	#4, fp
0f82c     14 4E 85 A1 |  if_e	sub	fp, #20
0f830     14 00 90 FD | 	jmp	#LR__1234
0f834                 | LR__1233
0f834     A7 12 02 F6 | 	mov	arg01, fp
0f838     58 59 B0 FD | 	call	#_converttoint
0f83c     14 4E 05 F1 | 	add	fp, #20
0f840     A7 FA 61 FC | 	wrlong	result1, fp
0f844     14 4E 85 F1 | 	sub	fp, #20
0f848                 | LR__1234
0f848     78 B8 BF FD | 	call	#_pop
0f84c     FF 16 02 F6 | 	mov	arg03, result3
0f850     A7 FA 61 FC | 	wrlong	result1, fp
0f854     04 4E 05 F1 | 	add	fp, #4
0f858     A7 FC 61 FC | 	wrlong	result2, fp
0f85c     04 4E 05 F1 | 	add	fp, #4
0f860     A7 16 62 FC | 	wrlong	arg03, fp
0f864                 | ' t1=pop()
0f864                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f864     08 4E 85 F1 | 	sub	fp, #8
0f868     2C 16 0E F2 | 	cmp	arg03, #44 wz
0f86c     44 00 90 AD |  if_e	jmp	#LR__1235
0f870     00 12 06 F6 | 	mov	arg01, #0
0f874     D8 6E B1 FD | 	call	#__system___getiolock_0540
0f878     FD 12 02 F6 | 	mov	arg01, result1
0f87c     90 14 B1 FD | 	call	#__system___lockmem
0f880     86 01 00 FF 
0f884     B6 14 06 F6 | 	mov	arg02, ##@LR__5395
0f888     00 12 06 F6 | 	mov	arg01, #0
0f88c     00 16 06 F6 | 	mov	arg03, #0
0f890     70 21 B1 FD | 	call	#__system___basic_print_string
0f894     00 12 06 F6 | 	mov	arg01, #0
0f898     0A 14 06 F6 | 	mov	arg02, #10
0f89c     00 16 06 F6 | 	mov	arg03, #0
0f8a0     08 21 B1 FD | 	call	#__system___basic_print_char
0f8a4     00 12 06 F6 | 	mov	arg01, #0
0f8a8     A4 6E B1 FD | 	call	#__system___getiolock_0540
0f8ac     FD 00 68 FC | 	wrlong	#0, result1
0f8b0     D8 00 90 FD | 	jmp	#LR__1242
0f8b4                 | LR__1235
0f8b4     A7 1E 02 FB | 	rdlong	local01, fp
0f8b8     18 4E 05 F1 | 	add	fp, #24
0f8bc     A7 1E 62 FC | 	wrlong	local01, fp
0f8c0                 | ' channel  = t1.result.iresult
0f8c0                 | ' 'print "Open,  channel=";channel; " mode=";mode;  " filename=";filename
0f8c0                 | ' select case  mode
0f8c0     04 4E 85 F1 | 	sub	fp, #4
0f8c4     A7 20 02 FB | 	rdlong	local02, fp
0f8c8     14 4E 85 F1 | 	sub	fp, #20
0f8cc     01 20 86 F1 | 	sub	local02, #1
0f8d0     04 20 26 F3 | 	fle	local02, #4
0f8d4     30 20 62 FD | 	jmprel	local02
0f8d8                 | LR__1236
0f8d8     10 00 90 FD | 	jmp	#LR__1237
0f8dc     2C 00 90 FD | 	jmp	#LR__1238
0f8e0     68 00 90 FD | 	jmp	#LR__1240
0f8e4     44 00 90 FD | 	jmp	#LR__1239
0f8e8     60 00 90 FD | 	jmp	#LR__1240
0f8ec                 | LR__1237
0f8ec     18 4E 05 F1 | 	add	fp, #24
0f8f0     A7 12 02 FB | 	rdlong	arg01, fp
0f8f4     0C 4E 85 F1 | 	sub	fp, #12
0f8f8     A7 14 02 FB | 	rdlong	arg02, fp
0f8fc     0C 4E 85 F1 | 	sub	fp, #12
0f900     00 16 06 F6 | 	mov	arg03, #0
0f904     0C 20 B1 FD | 	call	#__system___basic_open_string
0f908     80 00 90 FD | 	jmp	#LR__1241
0f90c                 | LR__1238
0f90c     18 4E 05 F1 | 	add	fp, #24
0f910     A7 12 02 FB | 	rdlong	arg01, fp
0f914     0C 4E 85 F1 | 	sub	fp, #12
0f918     A7 14 02 FB | 	rdlong	arg02, fp
0f91c     0C 4E 85 F1 | 	sub	fp, #12
0f920     0D 16 06 F6 | 	mov	arg03, #13
0f924     EC 1F B1 FD | 	call	#__system___basic_open_string
0f928     60 00 90 FD | 	jmp	#LR__1241
0f92c                 | LR__1239
0f92c     18 4E 05 F1 | 	add	fp, #24
0f930     A7 12 02 FB | 	rdlong	arg01, fp
0f934     0C 4E 85 F1 | 	sub	fp, #12
0f938     A7 14 02 FB | 	rdlong	arg02, fp
0f93c     0C 4E 85 F1 | 	sub	fp, #12
0f940     25 16 06 F6 | 	mov	arg03, #37
0f944     CC 1F B1 FD | 	call	#__system___basic_open_string
0f948     40 00 90 FD | 	jmp	#LR__1241
0f94c                 | LR__1240
0f94c     00 12 06 F6 | 	mov	arg01, #0
0f950     FC 6D B1 FD | 	call	#__system___getiolock_0540
0f954     FD 12 02 F6 | 	mov	arg01, result1
0f958     B4 13 B1 FD | 	call	#__system___lockmem
0f95c     86 01 00 FF 
0f960     C8 14 06 F6 | 	mov	arg02, ##@LR__5396
0f964     00 12 06 F6 | 	mov	arg01, #0
0f968     00 16 06 F6 | 	mov	arg03, #0
0f96c     94 20 B1 FD | 	call	#__system___basic_print_string
0f970     00 12 06 F6 | 	mov	arg01, #0
0f974     0A 14 06 F6 | 	mov	arg02, #10
0f978     00 16 06 F6 | 	mov	arg03, #0
0f97c     2C 20 B1 FD | 	call	#__system___basic_print_char
0f980     00 12 06 F6 | 	mov	arg01, #0
0f984     C8 6D B1 FD | 	call	#__system___getiolock_0540
0f988     FD 00 68 FC | 	wrlong	#0, result1
0f98c                 | LR__1241
0f98c                 | LR__1242
0f98c     A7 F0 03 F6 | 	mov	ptra, fp
0f990     B2 00 A0 FD | 	call	#popregs_
0f994                 | _do_open_ret
0f994     2D 00 64 FD | 	ret
0f998                 | 
0f998                 | ' 
0f998                 | ' 
0f998                 | ' sub do_close
0f998                 | _do_close
0f998     03 4A 05 F6 | 	mov	COUNT_, #3
0f99c     A8 00 A0 FD | 	call	#pushregs_
0f9a0     20 B7 BF FD | 	call	#_pop
0f9a4     FD 1E 02 F6 | 	mov	local01, result1
0f9a8     FF 16 02 F6 | 	mov	arg03, result3
0f9ac     FE 20 02 F6 | 	mov	local02, result2
0f9b0     0B 23 02 F6 | 	mov	local03, arg03
0f9b4                 | ' numpar=compiledline(lineptr_e).result.uresult
0f9b4                 | ' 
0f9b4                 | ' t1=pop()
0f9b4                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f9b4     2C 22 0E F2 | 	cmp	local03, #44 wz
0f9b8     44 00 90 AD |  if_e	jmp	#LR__1250
0f9bc     00 12 06 F6 | 	mov	arg01, #0
0f9c0     8C 6D B1 FD | 	call	#__system___getiolock_0540
0f9c4     FD 12 02 F6 | 	mov	arg01, result1
0f9c8     44 13 B1 FD | 	call	#__system___lockmem
0f9cc     86 01 00 FF 
0f9d0     DB 14 06 F6 | 	mov	arg02, ##@LR__5397
0f9d4     00 12 06 F6 | 	mov	arg01, #0
0f9d8     00 16 06 F6 | 	mov	arg03, #0
0f9dc     24 20 B1 FD | 	call	#__system___basic_print_string
0f9e0     00 12 06 F6 | 	mov	arg01, #0
0f9e4     0A 14 06 F6 | 	mov	arg02, #10
0f9e8     00 16 06 F6 | 	mov	arg03, #0
0f9ec     BC 1F B1 FD | 	call	#__system___basic_print_char
0f9f0     00 12 06 F6 | 	mov	arg01, #0
0f9f4     58 6D B1 FD | 	call	#__system___getiolock_0540
0f9f8     FD 00 68 FC | 	wrlong	#0, result1
0f9fc     08 00 90 FD | 	jmp	#LR__1251
0fa00                 | LR__1250
0fa00                 | ' channel  = t1.result.iresult
0fa00                 | ' close #channel
0fa00     0F 13 02 F6 | 	mov	arg01, local01
0fa04     78 63 B1 FD | 	call	#__system__close
0fa08                 | LR__1251
0fa08     A7 F0 03 F6 | 	mov	ptra, fp
0fa0c     B2 00 A0 FD | 	call	#popregs_
0fa10                 | _do_close_ret
0fa10     2D 00 64 FD | 	ret
0fa14                 | 
0fa14                 | ' 
0fa14                 | ' sub  do_get
0fa14                 | _do_get
0fa14     09 4A 05 F6 | 	mov	COUNT_, #9
0fa18     A8 00 A0 FD | 	call	#pushregs_
0fa1c     40 F0 07 F1 | 	add	ptra, #64
0fa20     4A 00 00 FF 
0fa24     B0 E4 05 F1 | 	add	objptr, ##38064
0fa28     F2 1A 02 FB | 	rdlong	arg05, objptr
0fa2c     0D 19 02 F6 | 	mov	arg04, arg05
0fa30     01 18 66 F0 | 	shl	arg04, #1
0fa34     0D 19 02 F1 | 	add	arg04, arg05
0fa38     02 18 66 F0 | 	shl	arg04, #2
0fa3c     03 00 00 FF 
0fa40     04 E4 85 F1 | 	sub	objptr, ##1540
0fa44     F2 18 02 F1 | 	add	arg04, objptr
0fa48     0C 1B 02 FB | 	rdlong	arg05, arg04
0fa4c     A7 1A 62 FC | 	wrlong	arg05, fp
0fa50                 | ' numpar=compiledline(lineptr_e).result.uresult
0fa50                 | ' if  numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
0fa50     04 1A 0E F2 | 	cmp	arg05, #4 wz
0fa54     47 00 00 FF 
0fa58     AC E4 85 F1 | 	sub	objptr, ##36524
0fa5c     48 00 90 5D |  if_ne	jmp	#LR__1260
0fa60     60 B6 BF FD | 	call	#_pop
0fa64     FF 1A 02 F6 | 	mov	arg05, result3
0fa68     1C 4E 05 F1 | 	add	fp, #28
0fa6c     A7 FA 61 FC | 	wrlong	result1, fp
0fa70     04 4E 05 F1 | 	add	fp, #4
0fa74     A7 FC 61 FC | 	wrlong	result2, fp
0fa78     04 4E 05 F1 | 	add	fp, #4
0fa7c     A7 1A 62 FC | 	wrlong	arg05, fp
0fa80     08 4E 85 F1 | 	sub	fp, #8
0fa84     A7 12 02 F6 | 	mov	arg01, fp
0fa88     1C 4E 85 F1 | 	sub	fp, #28
0fa8c     04 57 B0 FD | 	call	#_converttoint
0fa90     5A 00 00 FF 
0fa94     84 E4 05 F1 | 	add	objptr, ##46212
0fa98     F2 FA 61 FC | 	wrlong	result1, objptr
0fa9c     5A 00 00 FF 
0faa0     84 E4 85 F1 | 	sub	objptr, ##46212
0faa4     18 00 90 FD | 	jmp	#LR__1261
0faa8                 | LR__1260
0faa8     5A 00 00 FF 
0faac     84 E4 05 F1 | 	add	objptr, ##46212
0fab0     FF FF FF FF 
0fab4     F2 FE 6B FC | 	wrlong	##-1, objptr
0fab8     5A 00 00 FF 
0fabc     84 E4 85 F1 | 	sub	objptr, ##46212
0fac0                 | LR__1261
0fac0                 | ' if  numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
0fac0     A7 16 02 FB | 	rdlong	arg03, fp
0fac4     03 16 56 F2 | 	cmps	arg03, #3 wc
0fac8     40 00 90 CD |  if_b	jmp	#LR__1262
0facc     F4 B5 BF FD | 	call	#_pop
0fad0     FF 16 02 F6 | 	mov	arg03, result3
0fad4     1C 4E 05 F1 | 	add	fp, #28
0fad8     A7 FA 61 FC | 	wrlong	result1, fp
0fadc     04 4E 05 F1 | 	add	fp, #4
0fae0     A7 FC 61 FC | 	wrlong	result2, fp
0fae4     04 4E 05 F1 | 	add	fp, #4
0fae8     A7 16 62 FC | 	wrlong	arg03, fp
0faec     08 4E 85 F1 | 	sub	fp, #8
0faf0     A7 12 02 F6 | 	mov	arg01, fp
0faf4     1C 4E 85 F1 | 	sub	fp, #28
0faf8     98 56 B0 FD | 	call	#_converttoint
0fafc     08 4E 05 F1 | 	add	fp, #8
0fb00     A7 FA 61 FC | 	wrlong	result1, fp
0fb04     08 4E 85 F1 | 	sub	fp, #8
0fb08     0C 00 90 FD | 	jmp	#LR__1263
0fb0c                 | LR__1262
0fb0c     08 4E 05 F1 | 	add	fp, #8
0fb10     A7 02 68 FC | 	wrlong	#1, fp
0fb14     08 4E 85 F1 | 	sub	fp, #8
0fb18                 | LR__1263
0fb18                 | ' if  numpar>=2  then t1=pop() : adr=converttoint(t1)
0fb18     A7 16 02 FB | 	rdlong	arg03, fp
0fb1c     02 16 56 F2 | 	cmps	arg03, #2 wc
0fb20     3C 00 90 CD |  if_b	jmp	#LR__1264
0fb24     9C B5 BF FD | 	call	#_pop
0fb28     FF 16 02 F6 | 	mov	arg03, result3
0fb2c     1C 4E 05 F1 | 	add	fp, #28
0fb30     A7 FA 61 FC | 	wrlong	result1, fp
0fb34     04 4E 05 F1 | 	add	fp, #4
0fb38     A7 FC 61 FC | 	wrlong	result2, fp
0fb3c     04 4E 05 F1 | 	add	fp, #4
0fb40     A7 16 62 FC | 	wrlong	arg03, fp
0fb44     08 4E 85 F1 | 	sub	fp, #8
0fb48     A7 12 02 F6 | 	mov	arg01, fp
0fb4c     1C 4E 85 F1 | 	sub	fp, #28
0fb50     40 56 B0 FD | 	call	#_converttoint
0fb54     0C 4E 05 F1 | 	add	fp, #12
0fb58     A7 FA 61 FC | 	wrlong	result1, fp
0fb5c     0C 4E 85 F1 | 	sub	fp, #12
0fb60                 | LR__1264
0fb60     60 B5 BF FD | 	call	#_pop
0fb64     FF 16 02 F6 | 	mov	arg03, result3
0fb68     1C 4E 05 F1 | 	add	fp, #28
0fb6c     A7 FA 61 FC | 	wrlong	result1, fp
0fb70     04 4E 05 F1 | 	add	fp, #4
0fb74     A7 FC 61 FC | 	wrlong	result2, fp
0fb78     04 4E 05 F1 | 	add	fp, #4
0fb7c     A7 16 62 FC | 	wrlong	arg03, fp
0fb80     08 4E 85 F1 | 	sub	fp, #8
0fb84     A7 12 02 F6 | 	mov	arg01, fp
0fb88     1C 4E 85 F1 | 	sub	fp, #28
0fb8c     04 56 B0 FD | 	call	#_converttoint
0fb90     04 4E 05 F1 | 	add	fp, #4
0fb94     A7 FA 61 FC | 	wrlong	result1, fp
0fb98     10 4E 05 F1 | 	add	fp, #16
0fb9c     A7 16 02 FB | 	rdlong	arg03, fp
0fba0     14 4E 85 F1 | 	sub	fp, #20
0fba4     02 16 66 F0 | 	shl	arg03, #2
0fba8     58 00 00 FF 
0fbac     F8 E4 05 F1 | 	add	objptr, ##45304
0fbb0     F2 1E 02 F6 | 	mov	local01, objptr
0fbb4     F2 16 02 F1 | 	add	arg03, objptr
0fbb8     0B 01 68 FC | 	wrlong	#0, arg03
0fbbc                 | ' t1=pop() : channel=converttoint(t1)
0fbbc                 | ' 
0fbbc                 | ' getres(j)=0
0fbbc                 | ' if pos>=0 then
0fbbc     01 00 00 FF 
0fbc0     8C E5 05 F1 | 	add	objptr, ##908
0fbc4     F2 20 02 FB | 	rdlong	local02, objptr
0fbc8     5A 00 00 FF 
0fbcc     84 E4 85 F1 | 	sub	objptr, ##46212
0fbd0     00 20 56 F2 | 	cmps	local02, #0 wc
0fbd4     F0 01 90 CD |  if_b	jmp	#LR__1271
0fbd8                 | '   for i=0 to  amount/1024
0fbd8     10 4E 05 F1 | 	add	fp, #16
0fbdc     A7 00 68 FC | 	wrlong	#0, fp
0fbe0     08 4E 85 F1 | 	sub	fp, #8
0fbe4     A7 22 02 FB | 	rdlong	local03, fp
0fbe8     08 4E 85 F1 | 	sub	fp, #8
0fbec     11 25 52 F6 | 	abs	local04, local03 wc
0fbf0     0A 24 46 F0 | 	shr	local04, #10
0fbf4     12 25 82 F6 | 	negc	local04, local04
0fbf8     01 24 06 F1 | 	add	local04, #1
0fbfc                 | LR__1265
0fbfc     10 4E 05 F1 | 	add	fp, #16
0fc00     A7 22 02 FB | 	rdlong	local03, fp
0fc04     10 4E 85 F1 | 	sub	fp, #16
0fc08     12 23 52 F2 | 	cmps	local03, local04 wc
0fc0c     9C 03 90 3D |  if_ae	jmp	#LR__1279
0fc10                 | '     get #channel,pos+1,block(0),amount,r
0fc10     04 4E 05 F1 | 	add	fp, #4
0fc14     A7 12 02 FB | 	rdlong	arg01, fp
0fc18     5A 00 00 FF 
0fc1c     84 E4 05 F1 | 	add	objptr, ##46212
0fc20     F2 14 02 FB | 	rdlong	arg02, objptr
0fc24     01 14 06 F1 | 	add	arg02, #1
0fc28     03 00 00 FF 
0fc2c     9C E5 85 F1 | 	sub	objptr, ##1948
0fc30     F2 16 02 F6 | 	mov	arg03, objptr
0fc34     56 00 00 FF 
0fc38     E8 E4 85 F1 | 	sub	objptr, ##44264
0fc3c     04 4E 05 F1 | 	add	fp, #4
0fc40     A7 18 02 FB | 	rdlong	arg04, fp
0fc44     08 4E 85 F1 | 	sub	fp, #8
0fc48     01 1A 06 F6 | 	mov	arg05, #1
0fc4c     30 1F B1 FD | 	call	#__system___basic_get
0fc50     18 4E 05 F1 | 	add	fp, #24
0fc54     A7 FA 61 FC | 	wrlong	result1, fp
0fc58                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
0fc58     0C 4E 85 F1 | 	sub	fp, #12
0fc5c     A7 20 02 FB | 	rdlong	local02, fp
0fc60     0C 4E 85 F1 | 	sub	fp, #12
0fc64     00 04 00 FF 
0fc68     00 20 56 F2 | 	cmps	local02, ##524288 wc
0fc6c     7C 00 90 3D |  if_ae	jmp	#LR__1267
0fc70     14 4E 05 F1 | 	add	fp, #20
0fc74     A7 00 68 FC | 	wrlong	#0, fp
0fc78     04 4E 05 F1 | 	add	fp, #4
0fc7c     A7 26 02 FB | 	rdlong	local05, fp
0fc80     18 4E 85 F1 | 	sub	fp, #24
0fc84                 | LR__1266
0fc84     14 4E 05 F1 | 	add	fp, #20
0fc88     A7 20 02 FB | 	rdlong	local02, fp
0fc8c     14 4E 85 F1 | 	sub	fp, #20
0fc90     13 21 52 F2 | 	cmps	local02, local05 wc
0fc94     D8 00 90 3D |  if_ae	jmp	#LR__1270
0fc98     0C 4E 05 F1 | 	add	fp, #12
0fc9c     A7 12 02 FB | 	rdlong	arg01, fp
0fca0     04 4E 05 F1 | 	add	fp, #4
0fca4     A7 22 02 FB | 	rdlong	local03, fp
0fca8     0A 22 66 F0 | 	shl	local03, #10
0fcac     11 13 02 F1 | 	add	arg01, local03
0fcb0     04 4E 05 F1 | 	add	fp, #4
0fcb4     A7 22 02 FB | 	rdlong	local03, fp
0fcb8     11 13 02 F1 | 	add	arg01, local03
0fcbc     56 00 00 FF 
0fcc0     E8 E4 05 F1 | 	add	objptr, ##44264
0fcc4     F2 22 02 F1 | 	add	local03, objptr
0fcc8     11 15 C2 FA | 	rdbyte	arg02, local03
0fccc     09 15 42 FC | 	wrbyte	arg02, arg01
0fcd0     56 00 00 FF 
0fcd4     E8 E4 85 F1 | 	sub	objptr, ##44264
0fcd8     A7 22 02 FB | 	rdlong	local03, fp
0fcdc     01 22 06 F1 | 	add	local03, #1
0fce0     A7 22 62 FC | 	wrlong	local03, fp
0fce4     14 4E 85 F1 | 	sub	fp, #20
0fce8     98 FF 9F FD | 	jmp	#LR__1266
0fcec                 | LR__1267
0fcec     14 4E 05 F1 | 	add	fp, #20
0fcf0     A7 00 68 FC | 	wrlong	#0, fp
0fcf4     04 4E 05 F1 | 	add	fp, #4
0fcf8     A7 28 02 FB | 	rdlong	local06, fp
0fcfc     18 4E 85 F1 | 	sub	fp, #24
0fd00                 | LR__1268
0fd00     14 4E 05 F1 | 	add	fp, #20
0fd04     A7 20 02 FB | 	rdlong	local02, fp
0fd08     14 4E 85 F1 | 	sub	fp, #20
0fd0c     14 21 52 F2 | 	cmps	local02, local06 wc
0fd10     5C 00 90 3D |  if_ae	jmp	#LR__1269
0fd14     0C 4E 05 F1 | 	add	fp, #12
0fd18     A7 12 02 FB | 	rdlong	arg01, fp
0fd1c     04 4E 05 F1 | 	add	fp, #4
0fd20     A7 26 02 FB | 	rdlong	local05, fp
0fd24     0A 26 66 F0 | 	shl	local05, #10
0fd28     13 13 02 F1 | 	add	arg01, local05
0fd2c     04 4E 05 F1 | 	add	fp, #4
0fd30     A7 26 02 FB | 	rdlong	local05, fp
0fd34     13 13 02 F1 | 	add	arg01, local05
0fd38     14 4E 85 F1 | 	sub	fp, #20
0fd3c     56 00 00 FF 
0fd40     E8 E4 05 F1 | 	add	objptr, ##44264
0fd44     F2 26 02 F1 | 	add	local05, objptr
0fd48     13 15 C2 FA | 	rdbyte	arg02, local05
0fd4c     56 00 00 FF 
0fd50     E8 E4 85 F1 | 	sub	objptr, ##44264
0fd54     04 CD B0 FD | 	call	#_pspoke
0fd58     14 4E 05 F1 | 	add	fp, #20
0fd5c     A7 26 02 FB | 	rdlong	local05, fp
0fd60     01 26 06 F1 | 	add	local05, #1
0fd64     A7 26 62 FC | 	wrlong	local05, fp
0fd68     14 4E 85 F1 | 	sub	fp, #20
0fd6c     90 FF 9F FD | 	jmp	#LR__1268
0fd70                 | LR__1269
0fd70                 | LR__1270
0fd70     14 4E 05 F1 | 	add	fp, #20
0fd74     A7 28 02 FB | 	rdlong	local06, fp
0fd78     14 23 02 F6 | 	mov	local03, local06
0fd7c     02 22 66 F0 | 	shl	local03, #2
0fd80     58 00 00 FF 
0fd84     F8 E4 05 F1 | 	add	objptr, ##45304
0fd88     F2 22 02 F1 | 	add	local03, objptr
0fd8c     02 28 66 F0 | 	shl	local06, #2
0fd90     F2 28 02 F1 | 	add	local06, objptr
0fd94     14 29 02 FB | 	rdlong	local06, local06
0fd98     04 4E 05 F1 | 	add	fp, #4
0fd9c     A7 26 02 FB | 	rdlong	local05, fp
0fda0     13 29 02 F1 | 	add	local06, local05
0fda4     11 29 62 FC | 	wrlong	local06, local03
0fda8     08 4E 85 F1 | 	sub	fp, #8
0fdac     A7 28 02 FB | 	rdlong	local06, fp
0fdb0     01 28 06 F1 | 	add	local06, #1
0fdb4     A7 28 62 FC | 	wrlong	local06, fp
0fdb8     10 4E 85 F1 | 	sub	fp, #16
0fdbc     58 00 00 FF 
0fdc0     F8 E4 85 F1 | 	sub	objptr, ##45304
0fdc4     34 FE 9F FD | 	jmp	#LR__1265
0fdc8                 | LR__1271
0fdc8                 | '   for i=0 to  amount/1024
0fdc8     10 4E 05 F1 | 	add	fp, #16
0fdcc     A7 00 68 FC | 	wrlong	#0, fp
0fdd0     08 4E 85 F1 | 	sub	fp, #8
0fdd4     A7 22 02 FB | 	rdlong	local03, fp
0fdd8     08 4E 85 F1 | 	sub	fp, #8
0fddc     11 2B 52 F6 | 	abs	local07, local03 wc
0fde0     0A 2A 46 F0 | 	shr	local07, #10
0fde4     15 2B 82 F6 | 	negc	local07, local07
0fde8     01 2A 06 F1 | 	add	local07, #1
0fdec                 | LR__1272
0fdec     10 4E 05 F1 | 	add	fp, #16
0fdf0     A7 22 02 FB | 	rdlong	local03, fp
0fdf4     10 4E 85 F1 | 	sub	fp, #16
0fdf8     15 23 52 F2 | 	cmps	local03, local07 wc
0fdfc     AC 01 90 3D |  if_ae	jmp	#LR__1278
0fe00                 | '     get #channel,,block(0),amount,r
0fe00     04 4E 05 F1 | 	add	fp, #4
0fe04     A7 12 02 FB | 	rdlong	arg01, fp
0fe08     56 00 00 FF 
0fe0c     E8 E4 05 F1 | 	add	objptr, ##44264
0fe10     F2 16 02 F6 | 	mov	arg03, objptr
0fe14     56 00 00 FF 
0fe18     E8 E4 85 F1 | 	sub	objptr, ##44264
0fe1c     04 4E 05 F1 | 	add	fp, #4
0fe20     A7 18 02 FB | 	rdlong	arg04, fp
0fe24     08 4E 85 F1 | 	sub	fp, #8
0fe28     00 14 06 F6 | 	mov	arg02, #0
0fe2c     01 1A 06 F6 | 	mov	arg05, #1
0fe30     4C 1D B1 FD | 	call	#__system___basic_get
0fe34     18 4E 05 F1 | 	add	fp, #24
0fe38     A7 FA 61 FC | 	wrlong	result1, fp
0fe3c                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
0fe3c     0C 4E 85 F1 | 	sub	fp, #12
0fe40     A7 20 02 FB | 	rdlong	local02, fp
0fe44     0C 4E 85 F1 | 	sub	fp, #12
0fe48     00 04 00 FF 
0fe4c     00 20 56 F2 | 	cmps	local02, ##524288 wc
0fe50     7C 00 90 3D |  if_ae	jmp	#LR__1274
0fe54     14 4E 05 F1 | 	add	fp, #20
0fe58     A7 00 68 FC | 	wrlong	#0, fp
0fe5c     04 4E 05 F1 | 	add	fp, #4
0fe60     A7 2C 02 FB | 	rdlong	local08, fp
0fe64     18 4E 85 F1 | 	sub	fp, #24
0fe68                 | LR__1273
0fe68     14 4E 05 F1 | 	add	fp, #20
0fe6c     A7 20 02 FB | 	rdlong	local02, fp
0fe70     14 4E 85 F1 | 	sub	fp, #20
0fe74     16 21 52 F2 | 	cmps	local02, local08 wc
0fe78     D8 00 90 3D |  if_ae	jmp	#LR__1277
0fe7c     0C 4E 05 F1 | 	add	fp, #12
0fe80     A7 12 02 FB | 	rdlong	arg01, fp
0fe84     04 4E 05 F1 | 	add	fp, #4
0fe88     A7 28 02 FB | 	rdlong	local06, fp
0fe8c     0A 28 66 F0 | 	shl	local06, #10
0fe90     14 13 02 F1 | 	add	arg01, local06
0fe94     04 4E 05 F1 | 	add	fp, #4
0fe98     A7 28 02 FB | 	rdlong	local06, fp
0fe9c     14 13 02 F1 | 	add	arg01, local06
0fea0     56 00 00 FF 
0fea4     E8 E4 05 F1 | 	add	objptr, ##44264
0fea8     F2 28 02 F1 | 	add	local06, objptr
0feac     14 15 C2 FA | 	rdbyte	arg02, local06
0feb0     09 15 42 FC | 	wrbyte	arg02, arg01
0feb4     56 00 00 FF 
0feb8     E8 E4 85 F1 | 	sub	objptr, ##44264
0febc     A7 28 02 FB | 	rdlong	local06, fp
0fec0     01 28 06 F1 | 	add	local06, #1
0fec4     A7 28 62 FC | 	wrlong	local06, fp
0fec8     14 4E 85 F1 | 	sub	fp, #20
0fecc     98 FF 9F FD | 	jmp	#LR__1273
0fed0                 | LR__1274
0fed0     14 4E 05 F1 | 	add	fp, #20
0fed4     A7 00 68 FC | 	wrlong	#0, fp
0fed8     04 4E 05 F1 | 	add	fp, #4
0fedc     A7 2E 02 FB | 	rdlong	local09, fp
0fee0     18 4E 85 F1 | 	sub	fp, #24
0fee4                 | LR__1275
0fee4     14 4E 05 F1 | 	add	fp, #20
0fee8     A7 20 02 FB | 	rdlong	local02, fp
0feec     14 4E 85 F1 | 	sub	fp, #20
0fef0     17 21 52 F2 | 	cmps	local02, local09 wc
0fef4     5C 00 90 3D |  if_ae	jmp	#LR__1276
0fef8     0C 4E 05 F1 | 	add	fp, #12
0fefc     A7 12 02 FB | 	rdlong	arg01, fp
0ff00     04 4E 05 F1 | 	add	fp, #4
0ff04     A7 2C 02 FB | 	rdlong	local08, fp
0ff08     0A 2C 66 F0 | 	shl	local08, #10
0ff0c     16 13 02 F1 | 	add	arg01, local08
0ff10     04 4E 05 F1 | 	add	fp, #4
0ff14     A7 2C 02 FB | 	rdlong	local08, fp
0ff18     16 13 02 F1 | 	add	arg01, local08
0ff1c     14 4E 85 F1 | 	sub	fp, #20
0ff20     56 00 00 FF 
0ff24     E8 E4 05 F1 | 	add	objptr, ##44264
0ff28     F2 2C 02 F1 | 	add	local08, objptr
0ff2c     16 15 C2 FA | 	rdbyte	arg02, local08
0ff30     56 00 00 FF 
0ff34     E8 E4 85 F1 | 	sub	objptr, ##44264
0ff38     20 CB B0 FD | 	call	#_pspoke
0ff3c     14 4E 05 F1 | 	add	fp, #20
0ff40     A7 2C 02 FB | 	rdlong	local08, fp
0ff44     01 2C 06 F1 | 	add	local08, #1
0ff48     A7 2C 62 FC | 	wrlong	local08, fp
0ff4c     14 4E 85 F1 | 	sub	fp, #20
0ff50     90 FF 9F FD | 	jmp	#LR__1275
0ff54                 | LR__1276
0ff54                 | LR__1277
0ff54     14 4E 05 F1 | 	add	fp, #20
0ff58     A7 2E 02 FB | 	rdlong	local09, fp
0ff5c     17 29 02 F6 | 	mov	local06, local09
0ff60     02 28 66 F0 | 	shl	local06, #2
0ff64     58 00 00 FF 
0ff68     F8 E4 05 F1 | 	add	objptr, ##45304
0ff6c     F2 28 02 F1 | 	add	local06, objptr
0ff70     02 2E 66 F0 | 	shl	local09, #2
0ff74     F2 2E 02 F1 | 	add	local09, objptr
0ff78     17 2F 02 FB | 	rdlong	local09, local09
0ff7c     04 4E 05 F1 | 	add	fp, #4
0ff80     A7 2C 02 FB | 	rdlong	local08, fp
0ff84     16 2F 02 F1 | 	add	local09, local08
0ff88     14 2F 62 FC | 	wrlong	local09, local06
0ff8c     08 4E 85 F1 | 	sub	fp, #8
0ff90     A7 2E 02 FB | 	rdlong	local09, fp
0ff94     01 2E 06 F1 | 	add	local09, #1
0ff98     A7 2E 62 FC | 	wrlong	local09, fp
0ff9c     10 4E 85 F1 | 	sub	fp, #16
0ffa0     58 00 00 FF 
0ffa4     F8 E4 85 F1 | 	sub	objptr, ##45304
0ffa8     40 FE 9F FD | 	jmp	#LR__1272
0ffac                 | LR__1278
0ffac                 | LR__1279
0ffac     A7 F0 03 F6 | 	mov	ptra, fp
0ffb0     B2 00 A0 FD | 	call	#popregs_
0ffb4                 | _do_get_ret
0ffb4     2D 00 64 FD | 	ret
0ffb8                 | 
0ffb8                 | ' 
0ffb8                 | ' sub  do_put
0ffb8                 | _do_put
0ffb8     03 4A 05 F6 | 	mov	COUNT_, #3
0ffbc     A8 00 A0 FD | 	call	#pushregs_
0ffc0     28 F0 07 F1 | 	add	ptra, #40
0ffc4     4A 00 00 FF 
0ffc8     B0 E4 05 F1 | 	add	objptr, ##38064
0ffcc     F2 1A 02 FB | 	rdlong	arg05, objptr
0ffd0     0D 19 02 F6 | 	mov	arg04, arg05
0ffd4     01 18 66 F0 | 	shl	arg04, #1
0ffd8     0D 19 02 F1 | 	add	arg04, arg05
0ffdc     02 18 66 F0 | 	shl	arg04, #2
0ffe0     03 00 00 FF 
0ffe4     04 E4 85 F1 | 	sub	objptr, ##1540
0ffe8     F2 18 02 F1 | 	add	arg04, objptr
0ffec     0C 1B 02 FB | 	rdlong	arg05, arg04
0fff0     A7 1A 62 FC | 	wrlong	arg05, fp
0fff4                 | ' numpar=compiledline(lineptr_e).result.uresult
0fff4                 | ' if  numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
0fff4     04 1A 0E F2 | 	cmp	arg05, #4 wz
0fff8     47 00 00 FF 
0fffc     AC E4 85 F1 | 	sub	objptr, ##36524
10000     48 00 90 5D |  if_ne	jmp	#LR__1280
10004     BC B0 BF FD | 	call	#_pop
10008     FF 1A 02 F6 | 	mov	arg05, result3
1000c     1C 4E 05 F1 | 	add	fp, #28
10010     A7 FA 61 FC | 	wrlong	result1, fp
10014     04 4E 05 F1 | 	add	fp, #4
10018     A7 FC 61 FC | 	wrlong	result2, fp
1001c     04 4E 05 F1 | 	add	fp, #4
10020     A7 1A 62 FC | 	wrlong	arg05, fp
10024     08 4E 85 F1 | 	sub	fp, #8
10028     A7 12 02 F6 | 	mov	arg01, fp
1002c     1C 4E 85 F1 | 	sub	fp, #28
10030     60 51 B0 FD | 	call	#_converttoint
10034     5A 00 00 FF 
10038     84 E4 05 F1 | 	add	objptr, ##46212
1003c     F2 FA 61 FC | 	wrlong	result1, objptr
10040     5A 00 00 FF 
10044     84 E4 85 F1 | 	sub	objptr, ##46212
10048     18 00 90 FD | 	jmp	#LR__1281
1004c                 | LR__1280
1004c     5A 00 00 FF 
10050     84 E4 05 F1 | 	add	objptr, ##46212
10054     FF FF FF FF 
10058     F2 FE 6B FC | 	wrlong	##-1, objptr
1005c     5A 00 00 FF 
10060     84 E4 85 F1 | 	sub	objptr, ##46212
10064                 | LR__1281
10064                 | ' if  numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
10064     A7 1A 02 FB | 	rdlong	arg05, fp
10068     03 1A 56 F2 | 	cmps	arg05, #3 wc
1006c     40 00 90 CD |  if_b	jmp	#LR__1282
10070     50 B0 BF FD | 	call	#_pop
10074     FF 1A 02 F6 | 	mov	arg05, result3
10078     1C 4E 05 F1 | 	add	fp, #28
1007c     A7 FA 61 FC | 	wrlong	result1, fp
10080     04 4E 05 F1 | 	add	fp, #4
10084     A7 FC 61 FC | 	wrlong	result2, fp
10088     04 4E 05 F1 | 	add	fp, #4
1008c     A7 1A 62 FC | 	wrlong	arg05, fp
10090     08 4E 85 F1 | 	sub	fp, #8
10094     A7 12 02 F6 | 	mov	arg01, fp
10098     1C 4E 85 F1 | 	sub	fp, #28
1009c     F4 50 B0 FD | 	call	#_converttoint
100a0     08 4E 05 F1 | 	add	fp, #8
100a4     A7 FA 61 FC | 	wrlong	result1, fp
100a8     08 4E 85 F1 | 	sub	fp, #8
100ac     0C 00 90 FD | 	jmp	#LR__1283
100b0                 | LR__1282
100b0     08 4E 05 F1 | 	add	fp, #8
100b4     A7 02 68 FC | 	wrlong	#1, fp
100b8     08 4E 85 F1 | 	sub	fp, #8
100bc                 | LR__1283
100bc                 | ' if  numpar>=2  then t1=pop() : adr=converttoint(t1)
100bc     A7 18 02 FB | 	rdlong	arg04, fp
100c0     02 18 56 F2 | 	cmps	arg04, #2 wc
100c4     3C 00 90 CD |  if_b	jmp	#LR__1284
100c8     F8 AF BF FD | 	call	#_pop
100cc     FF 18 02 F6 | 	mov	arg04, result3
100d0     1C 4E 05 F1 | 	add	fp, #28
100d4     A7 FA 61 FC | 	wrlong	result1, fp
100d8     04 4E 05 F1 | 	add	fp, #4
100dc     A7 FC 61 FC | 	wrlong	result2, fp
100e0     04 4E 05 F1 | 	add	fp, #4
100e4     A7 18 62 FC | 	wrlong	arg04, fp
100e8     08 4E 85 F1 | 	sub	fp, #8
100ec     A7 12 02 F6 | 	mov	arg01, fp
100f0     1C 4E 85 F1 | 	sub	fp, #28
100f4     9C 50 B0 FD | 	call	#_converttoint
100f8     0C 4E 05 F1 | 	add	fp, #12
100fc     A7 FA 61 FC | 	wrlong	result1, fp
10100     0C 4E 85 F1 | 	sub	fp, #12
10104                 | LR__1284
10104     BC AF BF FD | 	call	#_pop
10108     FF 18 02 F6 | 	mov	arg04, result3
1010c     1C 4E 05 F1 | 	add	fp, #28
10110     A7 FA 61 FC | 	wrlong	result1, fp
10114     04 4E 05 F1 | 	add	fp, #4
10118     A7 FC 61 FC | 	wrlong	result2, fp
1011c     04 4E 05 F1 | 	add	fp, #4
10120     A7 18 62 FC | 	wrlong	arg04, fp
10124     08 4E 85 F1 | 	sub	fp, #8
10128     A7 12 02 F6 | 	mov	arg01, fp
1012c     1C 4E 85 F1 | 	sub	fp, #28
10130     60 50 B0 FD | 	call	#_converttoint
10134     04 4E 05 F1 | 	add	fp, #4
10138     A7 FA 61 FC | 	wrlong	result1, fp
1013c     10 4E 05 F1 | 	add	fp, #16
10140     A7 1E 02 FB | 	rdlong	local01, fp
10144     14 4E 85 F1 | 	sub	fp, #20
10148     02 1E 66 F0 | 	shl	local01, #2
1014c     58 00 00 FF 
10150     F8 E4 05 F1 | 	add	objptr, ##45304
10154     F2 1E 02 F1 | 	add	local01, objptr
10158     0F 01 68 FC | 	wrlong	#0, local01
1015c                 | ' t1=pop() : channel=converttoint(t1)
1015c                 | ' 
1015c                 | ' getres(j)=0
1015c                 | ' if pos>=0 then
1015c     01 00 00 FF 
10160     8C E5 05 F1 | 	add	objptr, ##908
10164     F2 20 02 FB | 	rdlong	local02, objptr
10168     5A 00 00 FF 
1016c     84 E4 85 F1 | 	sub	objptr, ##46212
10170     00 20 56 F2 | 	cmps	local02, #0 wc
10174     C0 01 90 CD |  if_b	jmp	#LR__1290
10178     10 4E 05 F1 | 	add	fp, #16
1017c     A7 00 68 FC | 	wrlong	#0, fp
10180     10 4E 85 F1 | 	sub	fp, #16
10184                 | '    i=0: do
10184                 | LR__1285
10184     14 4E 05 F1 | 	add	fp, #20
10188     A7 00 68 FC | 	wrlong	#0, fp
1018c     14 4E 85 F1 | 	sub	fp, #20
10190                 | '    j=0: do    
10190                 | LR__1286
10190                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
10190     0C 4E 05 F1 | 	add	fp, #12
10194     A7 20 02 FB | 	rdlong	local02, fp
10198     0C 4E 85 F1 | 	sub	fp, #12
1019c     00 04 00 FF 
101a0     00 20 56 F2 | 	cmps	local02, ##524288 wc
101a4     4C 00 90 3D |  if_ae	jmp	#LR__1287
101a8     14 4E 05 F1 | 	add	fp, #20
101ac     A7 20 02 FB | 	rdlong	local02, fp
101b0     10 1F 02 F6 | 	mov	local01, local02
101b4     56 00 00 FF 
101b8     E8 E4 05 F1 | 	add	objptr, ##44264
101bc     F2 1E 02 F1 | 	add	local01, objptr
101c0     08 4E 85 F1 | 	sub	fp, #8
101c4     A7 12 02 FB | 	rdlong	arg01, fp
101c8     04 4E 05 F1 | 	add	fp, #4
101cc     A7 18 02 FB | 	rdlong	arg04, fp
101d0     0A 18 66 F0 | 	shl	arg04, #10
101d4     0C 13 02 F1 | 	add	arg01, arg04
101d8     10 4E 85 F1 | 	sub	fp, #16
101dc     10 13 02 F1 | 	add	arg01, local02
101e0     09 FB C1 FA | 	rdbyte	result1, arg01
101e4     56 00 00 FF 
101e8     E8 E4 85 F1 | 	sub	objptr, ##44264
101ec     0F FB 41 FC | 	wrbyte	result1, local01
101f0     48 00 90 FD | 	jmp	#LR__1288
101f4                 | LR__1287
101f4     14 4E 05 F1 | 	add	fp, #20
101f8     A7 20 02 FB | 	rdlong	local02, fp
101fc     10 1F 02 F6 | 	mov	local01, local02
10200     56 00 00 FF 
10204     E8 E4 05 F1 | 	add	objptr, ##44264
10208     F2 1E 02 F1 | 	add	local01, objptr
1020c     08 4E 85 F1 | 	sub	fp, #8
10210     A7 12 02 FB | 	rdlong	arg01, fp
10214     04 4E 05 F1 | 	add	fp, #4
10218     A7 18 02 FB | 	rdlong	arg04, fp
1021c     0A 18 66 F0 | 	shl	arg04, #10
10220     0C 13 02 F1 | 	add	arg01, arg04
10224     10 4E 85 F1 | 	sub	fp, #16
10228     10 13 02 F1 | 	add	arg01, local02
1022c     56 00 00 FF 
10230     E8 E4 85 F1 | 	sub	objptr, ##44264
10234     6C C8 B0 FD | 	call	#_pspeek
10238     0F FB 41 FC | 	wrbyte	result1, local01
1023c                 | LR__1288
1023c     14 4E 05 F1 | 	add	fp, #20
10240     A7 20 02 FB | 	rdlong	local02, fp
10244     01 20 06 F1 | 	add	local02, #1
10248     A7 20 62 FC | 	wrlong	local02, fp
1024c     14 4E 85 F1 | 	sub	fp, #20
10250     02 00 00 FF 
10254     00 20 56 F2 | 	cmps	local02, ##1024 wc
10258     2C 00 90 3D |  if_ae	jmp	#LR__1289
1025c     10 4E 05 F1 | 	add	fp, #16
10260     A7 1E 02 FB | 	rdlong	local01, fp
10264     0A 1E 66 F0 | 	shl	local01, #10
10268     04 4E 05 F1 | 	add	fp, #4
1026c     A7 20 02 FB | 	rdlong	local02, fp
10270     10 1F 02 F1 | 	add	local01, local02
10274     0C 4E 85 F1 | 	sub	fp, #12
10278     A7 20 02 FB | 	rdlong	local02, fp
1027c     08 4E 85 F1 | 	sub	fp, #8
10280     10 1F 5A F2 | 	cmps	local01, local02 wcz
10284     08 FF 9F ED |  if_be	jmp	#LR__1286
10288                 | LR__1289
10288                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
10288     04 4E 05 F1 | 	add	fp, #4
1028c     A7 12 02 FB | 	rdlong	arg01, fp
10290     5A 00 00 FF 
10294     84 E4 05 F1 | 	add	objptr, ##46212
10298     F2 14 02 FB | 	rdlong	arg02, objptr
1029c     01 14 06 F1 | 	add	arg02, #1
102a0     03 00 00 FF 
102a4     9C E5 85 F1 | 	sub	objptr, ##1948
102a8     F2 16 02 F6 | 	mov	arg03, objptr
102ac     56 00 00 FF 
102b0     E8 E4 85 F1 | 	sub	objptr, ##44264
102b4     04 4E 05 F1 | 	add	fp, #4
102b8     A7 18 02 FB | 	rdlong	arg04, fp
102bc     08 4E 85 F1 | 	sub	fp, #8
102c0     01 1A 06 F6 | 	mov	arg05, #1
102c4     4C 18 B1 FD | 	call	#__system___basic_put
102c8     18 4E 05 F1 | 	add	fp, #24
102cc     A7 FA 61 FC | 	wrlong	result1, fp
102d0     14 4E 85 F1 | 	sub	fp, #20
102d4     A7 1E 02 FB | 	rdlong	local01, fp
102d8     02 1E 66 F0 | 	shl	local01, #2
102dc     58 00 00 FF 
102e0     F8 E4 05 F1 | 	add	objptr, ##45304
102e4     F2 1E 02 F1 | 	add	local01, objptr
102e8     0F FB 61 FC | 	wrlong	result1, local01
102ec                 | '    if 1024*i+j>amount then exit loop
102ec     0C 4E 05 F1 | 	add	fp, #12
102f0     A7 20 02 FB | 	rdlong	local02, fp
102f4     0A 20 66 F0 | 	shl	local02, #10
102f8     04 4E 05 F1 | 	add	fp, #4
102fc     A7 1E 02 FB | 	rdlong	local01, fp
10300     0F 21 02 F1 | 	add	local02, local01
10304     0C 4E 85 F1 | 	sub	fp, #12
10308     A7 1E 02 FB | 	rdlong	local01, fp
1030c     08 4E 85 F1 | 	sub	fp, #8
10310     0F 21 5A F2 | 	cmps	local02, local01 wcz
10314     58 00 00 FF 
10318     F8 E4 85 F1 | 	sub	objptr, ##45304
1031c     CC 01 90 1D |  if_a	jmp	#LR__1297
10320     10 4E 05 F1 | 	add	fp, #16
10324     A7 20 02 FB | 	rdlong	local02, fp
10328     01 20 06 F1 | 	add	local02, #1
1032c     A7 20 62 FC | 	wrlong	local02, fp
10330     10 4E 85 F1 | 	sub	fp, #16
10334     4C FE 9F FD | 	jmp	#LR__1285
10338                 | LR__1290
10338     10 4E 05 F1 | 	add	fp, #16
1033c     A7 00 68 FC | 	wrlong	#0, fp
10340     10 4E 85 F1 | 	sub	fp, #16
10344                 | '    i=0: do
10344                 | LR__1291
10344     14 4E 05 F1 | 	add	fp, #20
10348     A7 00 68 FC | 	wrlong	#0, fp
1034c     14 4E 85 F1 | 	sub	fp, #20
10350                 | '    j=0: do  
10350                 | LR__1292
10350                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
10350     0C 4E 05 F1 | 	add	fp, #12
10354     A7 20 02 FB | 	rdlong	local02, fp
10358     0C 4E 85 F1 | 	sub	fp, #12
1035c     00 04 00 FF 
10360     00 20 56 F2 | 	cmps	local02, ##524288 wc
10364     4C 00 90 3D |  if_ae	jmp	#LR__1293
10368     14 4E 05 F1 | 	add	fp, #20
1036c     A7 20 02 FB | 	rdlong	local02, fp
10370     10 1F 02 F6 | 	mov	local01, local02
10374     56 00 00 FF 
10378     E8 E4 05 F1 | 	add	objptr, ##44264
1037c     F2 1E 02 F1 | 	add	local01, objptr
10380     08 4E 85 F1 | 	sub	fp, #8
10384     A7 12 02 FB | 	rdlong	arg01, fp
10388     04 4E 05 F1 | 	add	fp, #4
1038c     A7 18 02 FB | 	rdlong	arg04, fp
10390     0A 18 66 F0 | 	shl	arg04, #10
10394     0C 13 02 F1 | 	add	arg01, arg04
10398     10 4E 85 F1 | 	sub	fp, #16
1039c     10 13 02 F1 | 	add	arg01, local02
103a0     09 FB C1 FA | 	rdbyte	result1, arg01
103a4     56 00 00 FF 
103a8     E8 E4 85 F1 | 	sub	objptr, ##44264
103ac     0F FB 41 FC | 	wrbyte	result1, local01
103b0     48 00 90 FD | 	jmp	#LR__1294
103b4                 | LR__1293
103b4     14 4E 05 F1 | 	add	fp, #20
103b8     A7 20 02 FB | 	rdlong	local02, fp
103bc     10 1F 02 F6 | 	mov	local01, local02
103c0     56 00 00 FF 
103c4     E8 E4 05 F1 | 	add	objptr, ##44264
103c8     F2 1E 02 F1 | 	add	local01, objptr
103cc     08 4E 85 F1 | 	sub	fp, #8
103d0     A7 12 02 FB | 	rdlong	arg01, fp
103d4     04 4E 05 F1 | 	add	fp, #4
103d8     A7 18 02 FB | 	rdlong	arg04, fp
103dc     0A 18 66 F0 | 	shl	arg04, #10
103e0     0C 13 02 F1 | 	add	arg01, arg04
103e4     10 4E 85 F1 | 	sub	fp, #16
103e8     10 13 02 F1 | 	add	arg01, local02
103ec     56 00 00 FF 
103f0     E8 E4 85 F1 | 	sub	objptr, ##44264
103f4     AC C6 B0 FD | 	call	#_pspeek
103f8     0F FB 41 FC | 	wrbyte	result1, local01
103fc                 | LR__1294
103fc     14 4E 05 F1 | 	add	fp, #20
10400     A7 20 02 FB | 	rdlong	local02, fp
10404     01 20 06 F1 | 	add	local02, #1
10408     A7 20 62 FC | 	wrlong	local02, fp
1040c     14 4E 85 F1 | 	sub	fp, #20
10410     02 00 00 FF 
10414     00 20 56 F2 | 	cmps	local02, ##1024 wc
10418     2C 00 90 3D |  if_ae	jmp	#LR__1295
1041c     10 4E 05 F1 | 	add	fp, #16
10420     A7 1E 02 FB | 	rdlong	local01, fp
10424     0A 1E 66 F0 | 	shl	local01, #10
10428     04 4E 05 F1 | 	add	fp, #4
1042c     A7 20 02 FB | 	rdlong	local02, fp
10430     10 1F 02 F1 | 	add	local01, local02
10434     0C 4E 85 F1 | 	sub	fp, #12
10438     A7 20 02 FB | 	rdlong	local02, fp
1043c     08 4E 85 F1 | 	sub	fp, #8
10440     10 1F 5A F2 | 	cmps	local01, local02 wcz
10444     08 FF 9F ED |  if_be	jmp	#LR__1292
10448                 | LR__1295
10448                 | '    put #channel,,block(0),amount, r : getres(channel)=r
10448     04 4E 05 F1 | 	add	fp, #4
1044c     A7 12 02 FB | 	rdlong	arg01, fp
10450     56 00 00 FF 
10454     E8 E4 05 F1 | 	add	objptr, ##44264
10458     F2 16 02 F6 | 	mov	arg03, objptr
1045c     56 00 00 FF 
10460     E8 E4 85 F1 | 	sub	objptr, ##44264
10464     04 4E 05 F1 | 	add	fp, #4
10468     A7 18 02 FB | 	rdlong	arg04, fp
1046c     08 4E 85 F1 | 	sub	fp, #8
10470     00 14 06 F6 | 	mov	arg02, #0
10474     01 1A 06 F6 | 	mov	arg05, #1
10478     98 16 B1 FD | 	call	#__system___basic_put
1047c     18 4E 05 F1 | 	add	fp, #24
10480     A7 FA 61 FC | 	wrlong	result1, fp
10484     14 4E 85 F1 | 	sub	fp, #20
10488     A7 1E 02 FB | 	rdlong	local01, fp
1048c     02 1E 66 F0 | 	shl	local01, #2
10490     58 00 00 FF 
10494     F8 E4 05 F1 | 	add	objptr, ##45304
10498     F2 1E 02 F1 | 	add	local01, objptr
1049c     0F FB 61 FC | 	wrlong	result1, local01
104a0                 | '    if 1024*i+j>amount then exit loop
104a0     0C 4E 05 F1 | 	add	fp, #12
104a4     A7 20 02 FB | 	rdlong	local02, fp
104a8     0A 20 66 F0 | 	shl	local02, #10
104ac     04 4E 05 F1 | 	add	fp, #4
104b0     A7 1E 02 FB | 	rdlong	local01, fp
104b4     0F 21 02 F1 | 	add	local02, local01
104b8     0C 4E 85 F1 | 	sub	fp, #12
104bc     A7 22 02 FB | 	rdlong	local03, fp
104c0     08 4E 85 F1 | 	sub	fp, #8
104c4     11 21 5A F2 | 	cmps	local02, local03 wcz
104c8     58 00 00 FF 
104cc     F8 E4 85 F1 | 	sub	objptr, ##45304
104d0     18 00 90 1D |  if_a	jmp	#LR__1296
104d4     10 4E 05 F1 | 	add	fp, #16
104d8     A7 20 02 FB | 	rdlong	local02, fp
104dc     01 20 06 F1 | 	add	local02, #1
104e0     A7 20 62 FC | 	wrlong	local02, fp
104e4     10 4E 85 F1 | 	sub	fp, #16
104e8     58 FE 9F FD | 	jmp	#LR__1291
104ec                 | LR__1296
104ec                 | LR__1297
104ec     A7 F0 03 F6 | 	mov	ptra, fp
104f0     B2 00 A0 FD | 	call	#popregs_
104f4                 | _do_put_ret
104f4     2D 00 64 FD | 	ret
104f8                 | 
104f8                 | '   
104f8                 | ' sub do_find_goto
104f8                 | _do_find_goto
104f8     03 4A 05 F6 | 	mov	COUNT_, #3
104fc     A8 00 A0 FD | 	call	#pushregs_
10500     24 F0 07 F1 | 	add	ptra, #36
10504                 | _do_find_goto_enter
10504     4A 00 00 FF 
10508     B0 E4 05 F1 | 	add	objptr, ##38064
1050c     F2 1E 02 FB | 	rdlong	local01, objptr
10510     0F 21 02 F6 | 	mov	local02, local01
10514     01 20 66 F0 | 	shl	local02, #1
10518     0F 21 02 F1 | 	add	local02, local01
1051c     02 20 66 F0 | 	shl	local02, #2
10520     03 00 00 FF 
10524     04 E4 85 F1 | 	sub	objptr, ##1540
10528     F2 20 02 F1 | 	add	local02, objptr
1052c     04 20 06 F1 | 	add	local02, #4
10530     10 21 02 FB | 	rdlong	local02, local02
10534     A7 20 62 FC | 	wrlong	local02, fp
10538     03 00 00 FF 
1053c     08 E4 05 F1 | 	add	objptr, ##1544
10540     F2 22 02 FB | 	rdlong	local03, objptr
10544     4A 00 00 FF 
10548     B4 E4 85 F1 | 	sub	objptr, ##38068
1054c     04 4E 05 F1 | 	add	fp, #4
10550     A7 22 62 FC | 	wrlong	local03, fp
10554     04 4E 85 F1 | 	sub	fp, #4
10558                 | ' 
10558                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
10558                 | '  ' print "find goto"                                                                     'print gotoline 
10558                 | ' gotoptr=programstart
10558                 | ' do
10558                 | LR__1300
10558     0C 4E 05 F1 | 	add	fp, #12
1055c     A7 12 02 F6 | 	mov	arg01, fp
10560     08 4E 85 F1 | 	sub	fp, #8
10564     A7 14 02 FB | 	rdlong	arg02, fp
10568     04 4E 85 F1 | 	sub	fp, #4
1056c     18 16 06 F6 | 	mov	arg03, #24
10570     0B 00 00 FF 
10574     CC E4 05 F1 | 	add	objptr, ##5836
10578     54 FB B0 FD | 	call	#_psram_spin2_read1
1057c     0B 00 00 FF 
10580     CC E4 85 F1 | 	sub	objptr, ##5836
10584                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
10584                 | '   if gotoheader(0)<>$FFFFFFFF then
10584     0C 4E 05 F1 | 	add	fp, #12
10588     A7 22 02 FB | 	rdlong	local03, fp
1058c     0C 4E 85 F1 | 	sub	fp, #12
10590     FF FF 7F FF 
10594     FF 23 0E F2 | 	cmp	local03, ##-1 wz
10598     24 00 90 AD |  if_e	jmp	#LR__1301
1059c     04 4E 05 F1 | 	add	fp, #4
105a0     A7 22 02 FB | 	rdlong	local03, fp
105a4     04 4E 05 F1 | 	add	fp, #4
105a8     A7 22 62 FC | 	wrlong	local03, fp
105ac     18 4E 05 F1 | 	add	fp, #24
105b0     A7 22 02 FB | 	rdlong	local03, fp
105b4     1C 4E 85 F1 | 	sub	fp, #28
105b8     A7 22 62 FC | 	wrlong	local03, fp
105bc     04 4E 85 F1 | 	sub	fp, #4
105c0                 | LR__1301
105c0     20 4E 05 F1 | 	add	fp, #32
105c4     A7 22 02 FB | 	rdlong	local03, fp
105c8     20 4E 85 F1 | 	sub	fp, #32
105cc     FF FF 3F FF 
105d0     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
105d4     0C 4E 05 51 |  if_ne	add	fp, #12
105d8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
105dc     0C 4E 85 51 |  if_ne	sub	fp, #12
105e0     FF FF 7F 5F 
105e4     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
105e8     18 00 90 AD |  if_e	jmp	#LR__1302
105ec     0C 4E 05 F1 | 	add	fp, #12
105f0     A7 22 02 FB | 	rdlong	local03, fp
105f4     0C 4E 85 F1 | 	sub	fp, #12
105f8     A7 20 02 FB | 	rdlong	local02, fp
105fc     10 23 0A F2 | 	cmp	local03, local02 wz
10600     54 FF 9F 5D |  if_ne	jmp	#LR__1300
10604                 | LR__1302
10604                 | ' 
10604                 | ' if gotoheader(0)=gotoline then
10604     0C 4E 05 F1 | 	add	fp, #12
10608     A7 22 02 FB | 	rdlong	local03, fp
1060c     0C 4E 85 F1 | 	sub	fp, #12
10610     A7 1E 02 FB | 	rdlong	local01, fp
10614     0F 23 0A F2 | 	cmp	local03, local01 wz
10618     D8 00 90 5D |  if_ne	jmp	#LR__1303
1061c     4A 00 00 FF 
10620     B0 E4 05 F1 | 	add	objptr, ##38064
10624     F2 1E 02 FB | 	rdlong	local01, objptr
10628     0F 21 02 F6 | 	mov	local02, local01
1062c     01 20 66 F0 | 	shl	local02, #1
10630     0F 21 02 F1 | 	add	local02, local01
10634     02 20 66 F0 | 	shl	local02, #2
10638     03 00 00 FF 
1063c     04 E4 85 F1 | 	sub	objptr, ##1540
10640     F2 20 02 F1 | 	add	local02, objptr
10644     08 4E 05 F1 | 	add	fp, #8
10648     A7 22 02 FB | 	rdlong	local03, fp
1064c     10 23 62 FC | 	wrlong	local03, local02
10650     03 00 00 FF 
10654     04 E4 05 F1 | 	add	objptr, ##1540
10658     F2 1E 02 FB | 	rdlong	local01, objptr
1065c     0F 21 02 F6 | 	mov	local02, local01
10660     01 20 66 F0 | 	shl	local02, #1
10664     0F 21 02 F1 | 	add	local02, local01
10668     02 20 66 F0 | 	shl	local02, #2
1066c     03 00 00 FF 
10670     04 E4 85 F1 | 	sub	objptr, ##1540
10674     F2 20 02 F1 | 	add	local02, objptr
10678     08 20 06 F1 | 	add	local02, #8
1067c     10 9D 68 FC | 	wrlong	#78, local02
10680     03 00 00 FF 
10684     04 E4 05 F1 | 	add	objptr, ##1540
10688     F2 20 02 FB | 	rdlong	local02, objptr
1068c     10 13 02 F6 | 	mov	arg01, local02
10690     01 12 66 F0 | 	shl	arg01, #1
10694     10 13 02 F1 | 	add	arg01, local02
10698     02 12 66 F0 | 	shl	arg01, #2
1069c     03 00 00 FF 
106a0     04 E4 85 F1 | 	sub	objptr, ##1540
106a4     F2 12 02 F1 | 	add	arg01, objptr
106a8     11 00 00 FF 
106ac     48 E4 05 F1 | 	add	objptr, ##8776
106b0     F2 14 02 FB | 	rdlong	arg02, objptr
106b4     02 22 06 F6 | 	mov	local03, #2
106b8     10 23 02 F1 | 	add	local03, local02
106bc     13 00 00 FF 
106c0     60 E4 85 F1 | 	sub	objptr, ##9824
106c4     F2 16 02 FB | 	rdlong	arg03, objptr
106c8     0B 23 02 FD | 	qmul	local03, arg03
106cc     08 4E 85 F1 | 	sub	fp, #8
106d0     39 00 00 FF 
106d4     C8 E5 85 F1 | 	sub	objptr, ##29640
106d8     18 22 62 FD | 	getqx	local03
106dc     11 15 02 F1 | 	add	arg02, local03
106e0     88 FA B0 FD | 	call	#_psram_spin2_write
106e4     0B 00 00 FF 
106e8     CC E4 85 F1 | 	sub	objptr, ##5836
106ec     A0 EE BF FD | 	call	#_do_fast_goto
106f0     08 00 90 FD | 	jmp	#LR__1304
106f4                 | LR__1303
106f4     26 12 06 F6 | 	mov	arg01, #38
106f8     6C C1 B0 FD | 	call	#_printerror
106fc                 | LR__1304
106fc     A7 F0 03 F6 | 	mov	ptra, fp
10700     B2 00 A0 FD | 	call	#popregs_
10704                 | _do_find_goto_ret
10704     2D 00 64 FD | 	ret
10708                 | 
10708                 | ' 
10708                 | ' sub do_slow_goto
10708                 | _do_slow_goto
10708     02 4A 05 F6 | 	mov	COUNT_, #2
1070c     A8 00 A0 FD | 	call	#pushregs_
10710     30 F0 07 F1 | 	add	ptra, #48
10714     AC A9 BF FD | 	call	#_pop
10718     FF 1E 02 F6 | 	mov	local01, result3
1071c     24 4E 05 F1 | 	add	fp, #36
10720     A7 FA 61 FC | 	wrlong	result1, fp
10724     04 4E 05 F1 | 	add	fp, #4
10728     A7 FC 61 FC | 	wrlong	result2, fp
1072c     04 4E 05 F1 | 	add	fp, #4
10730     A7 1E 62 FC | 	wrlong	local01, fp
10734     08 4E 85 F1 | 	sub	fp, #8
10738     A7 12 02 F6 | 	mov	arg01, fp
1073c     24 4E 85 F1 | 	sub	fp, #36
10740     50 4A B0 FD | 	call	#_converttoint
10744     A7 FA 61 FC | 	wrlong	result1, fp
10748     4A 00 00 FF 
1074c     B4 E4 05 F1 | 	add	objptr, ##38068
10750     F2 20 02 FB | 	rdlong	local02, objptr
10754     4A 00 00 FF 
10758     B4 E4 85 F1 | 	sub	objptr, ##38068
1075c     04 4E 05 F1 | 	add	fp, #4
10760     A7 20 62 FC | 	wrlong	local02, fp
10764     04 4E 85 F1 | 	sub	fp, #4
10768                 | ' 
10768                 | ' t1=pop() : gotoline=converttoint(t1)
10768                 | ' gotoptr=programstart
10768                 | ' do
10768                 | LR__1310
10768     0C 4E 05 F1 | 	add	fp, #12
1076c     A7 12 02 F6 | 	mov	arg01, fp
10770     08 4E 85 F1 | 	sub	fp, #8
10774     A7 14 02 FB | 	rdlong	arg02, fp
10778     04 4E 85 F1 | 	sub	fp, #4
1077c     18 16 06 F6 | 	mov	arg03, #24
10780     0B 00 00 FF 
10784     CC E4 05 F1 | 	add	objptr, ##5836
10788     44 F9 B0 FD | 	call	#_psram_spin2_read1
1078c     0B 00 00 FF 
10790     CC E4 85 F1 | 	sub	objptr, ##5836
10794                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
10794                 | '   if gotoheader(0)<>$FFFFFFFF then
10794     0C 4E 05 F1 | 	add	fp, #12
10798     A7 20 02 FB | 	rdlong	local02, fp
1079c     0C 4E 85 F1 | 	sub	fp, #12
107a0     FF FF 7F FF 
107a4     FF 21 0E F2 | 	cmp	local02, ##-1 wz
107a8     24 00 90 AD |  if_e	jmp	#LR__1311
107ac     04 4E 05 F1 | 	add	fp, #4
107b0     A7 20 02 FB | 	rdlong	local02, fp
107b4     04 4E 05 F1 | 	add	fp, #4
107b8     A7 20 62 FC | 	wrlong	local02, fp
107bc     18 4E 05 F1 | 	add	fp, #24
107c0     A7 20 02 FB | 	rdlong	local02, fp
107c4     1C 4E 85 F1 | 	sub	fp, #28
107c8     A7 20 62 FC | 	wrlong	local02, fp
107cc     04 4E 85 F1 | 	sub	fp, #4
107d0                 | LR__1311
107d0     20 4E 05 F1 | 	add	fp, #32
107d4     A7 20 02 FB | 	rdlong	local02, fp
107d8     20 4E 85 F1 | 	sub	fp, #32
107dc     FF FF 3F FF 
107e0     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
107e4     0C 4E 05 51 |  if_ne	add	fp, #12
107e8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
107ec     0C 4E 85 51 |  if_ne	sub	fp, #12
107f0     FF FF 7F 5F 
107f4     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
107f8     18 00 90 AD |  if_e	jmp	#LR__1312
107fc     0C 4E 05 F1 | 	add	fp, #12
10800     A7 20 02 FB | 	rdlong	local02, fp
10804     0C 4E 85 F1 | 	sub	fp, #12
10808     A7 16 02 FB | 	rdlong	arg03, fp
1080c     0B 21 0A F2 | 	cmp	local02, arg03 wz
10810     54 FF 9F 5D |  if_ne	jmp	#LR__1310
10814                 | LR__1312
10814                 | ' if gotoheader(0)=gotoline then  
10814     0C 4E 05 F1 | 	add	fp, #12
10818     A7 20 02 FB | 	rdlong	local02, fp
1081c     0C 4E 85 F1 | 	sub	fp, #12
10820     A7 1E 02 FB | 	rdlong	local01, fp
10824     0F 21 0A F2 | 	cmp	local02, local01 wz
10828     60 00 90 5D |  if_ne	jmp	#LR__1313
1082c     08 4E 05 F1 | 	add	fp, #8
10830     A7 20 02 FB | 	rdlong	local02, fp
10834     08 4E 85 F1 | 	sub	fp, #8
10838     58 00 00 FF 
1083c     EC E4 05 F1 | 	add	objptr, ##45292
10840     F2 20 62 FC | 	wrlong	local02, objptr
10844     0E 00 00 FF 
10848     40 E4 85 F1 | 	sub	objptr, ##7232
1084c     F2 20 02 FB | 	rdlong	local02, objptr
10850     01 20 86 F1 | 	sub	local02, #1
10854     04 E4 05 F1 | 	add	objptr, #4
10858     F2 20 62 FC | 	wrlong	local02, objptr
1085c                 | '    runptr=oldgotoptr
1085c                 | '    lineptr_e=lineptr-1
1085c                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
1085c     0E 00 00 FF 
10860     88 E4 05 F1 | 	add	objptr, ##7304
10864     F2 20 02 FB | 	rdlong	local02, objptr
10868     58 00 00 FF 
1086c     38 E5 85 F1 | 	sub	objptr, ##45368
10870     FF FF 3F FF 
10874     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
10878     58 00 00 AF 
1087c     38 E5 05 A1 |  if_e	add	objptr, ##45368
10880     F2 00 68 AC |  if_e	wrlong	#0, objptr
10884     58 00 00 AF 
10888     38 E5 85 A1 |  if_e	sub	objptr, ##45368
1088c                 | LR__1313
1088c     A7 F0 03 F6 | 	mov	ptra, fp
10890     B2 00 A0 FD | 	call	#popregs_
10894                 | _do_slow_goto_ret
10894     2D 00 64 FD | 	ret
10898                 | 
10898                 | ' 
10898                 | ' '----------------------- Error processing
10898                 | ' 
10898                 | ' sub do_error
10898                 | _do_error
10898     01 4A 05 F6 | 	mov	COUNT_, #1
1089c     A8 00 A0 FD | 	call	#pushregs_
108a0     4A 00 00 FF 
108a4     B0 E4 05 F1 | 	add	objptr, ##38064
108a8     F2 18 02 FB | 	rdlong	arg04, objptr
108ac     0C 17 02 F6 | 	mov	arg03, arg04
108b0     01 16 66 F0 | 	shl	arg03, #1
108b4     0C 17 02 F1 | 	add	arg03, arg04
108b8     02 16 66 F0 | 	shl	arg03, #2
108bc     03 00 00 FF 
108c0     04 E4 85 F1 | 	sub	objptr, ##1540
108c4     F2 16 02 F1 | 	add	arg03, objptr
108c8     0B 1F 02 FB | 	rdlong	local01, arg03
108cc                 | ' r=compiledline(lineptr_e).result.uresult
108cc                 | ' print "Error ";r;": ";errors$(r)
108cc     00 12 06 F6 | 	mov	arg01, #0
108d0     47 00 00 FF 
108d4     AC E4 85 F1 | 	sub	objptr, ##36524
108d8     74 5E B1 FD | 	call	#__system___getiolock_0540
108dc     FD 12 02 F6 | 	mov	arg01, result1
108e0     2C 04 B1 FD | 	call	#__system___lockmem
108e4     86 01 00 FF 
108e8     ED 14 06 F6 | 	mov	arg02, ##@LR__5398
108ec     00 12 06 F6 | 	mov	arg01, #0
108f0     00 16 06 F6 | 	mov	arg03, #0
108f4     0C 11 B1 FD | 	call	#__system___basic_print_string
108f8     00 12 06 F6 | 	mov	arg01, #0
108fc     0F 15 02 F6 | 	mov	arg02, local01
10900     00 16 06 F6 | 	mov	arg03, #0
10904     0A 18 06 F6 | 	mov	arg04, #10
10908     7C 11 B1 FD | 	call	#__system___basic_print_unsigned
1090c     86 01 00 FF 
10910     F4 14 06 F6 | 	mov	arg02, ##@LR__5399
10914     00 12 06 F6 | 	mov	arg01, #0
10918     00 16 06 F6 | 	mov	arg03, #0
1091c     E4 10 B1 FD | 	call	#__system___basic_print_string
10920     02 1E 66 F0 | 	shl	local01, #2
10924     45 00 00 FF 
10928     AC E4 05 F1 | 	add	objptr, ##35500
1092c     F2 1E 02 F1 | 	add	local01, objptr
10930     0F 15 02 FB | 	rdlong	arg02, local01
10934     00 12 06 F6 | 	mov	arg01, #0
10938     00 16 06 F6 | 	mov	arg03, #0
1093c     45 00 00 FF 
10940     AC E4 85 F1 | 	sub	objptr, ##35500
10944     BC 10 B1 FD | 	call	#__system___basic_print_string
10948     00 12 06 F6 | 	mov	arg01, #0
1094c     0A 14 06 F6 | 	mov	arg02, #10
10950     00 16 06 F6 | 	mov	arg03, #0
10954     54 10 B1 FD | 	call	#__system___basic_print_char
10958     00 12 06 F6 | 	mov	arg01, #0
1095c     F0 5D B1 FD | 	call	#__system___getiolock_0540
10960     FD 00 68 FC | 	wrlong	#0, result1
10964     A7 F0 03 F6 | 	mov	ptra, fp
10968     B2 00 A0 FD | 	call	#popregs_
1096c                 | _do_error_ret
1096c     2D 00 64 FD | 	ret
10970                 | 
10970                 | ' 
10970                 | ' 
10970                 | ' '------------------ Assigning to a variable  
10970                 | ' 
10970                 | ' function  convertstring(psaddr as ulong) as string
10970                 | _convertstring
10970     04 4A 05 F6 | 	mov	COUNT_, #4
10974     A8 00 A0 FD | 	call	#pushregs_
10978     09 1F 02 F6 | 	mov	local01, arg01
1097c     7C C1 B0 FD | 	call	#_pslpeek
10980     FD 20 02 F6 | 	mov	local02, result1
10984     86 01 00 FF 
10988     F7 22 06 F6 | 	mov	local03, ##@LR__5400
1098c                 | ' 'print "in convertstring: psaddr=";psaddr
1098c                 | ' l=pslpeek(psaddr)
1098c                 | ' 'print "in convertstring: len=";l
1098c                 | ' s="" 
1098c                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
1098c     01 24 06 F6 | 	mov	local04, #1
10990     01 20 06 F1 | 	add	local02, #1
10994                 | LR__1320
10994     10 25 52 F2 | 	cmps	local04, local02 wc
10998     30 00 90 3D |  if_ae	jmp	#LR__1321
1099c     0F 13 02 F6 | 	mov	arg01, local01
109a0     03 12 06 F1 | 	add	arg01, #3
109a4     12 13 02 F1 | 	add	arg01, local04
109a8     F8 C0 B0 FD | 	call	#_pspeek
109ac     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
109b0     9C 25 B1 FD | 	call	#__system__Chr_S
109b4     FD 14 02 F6 | 	mov	arg02, result1
109b8     11 13 02 F6 | 	mov	arg01, local03
109bc     AC 03 B1 FD | 	call	#__system___string_concat
109c0     FD 22 02 F6 | 	mov	local03, result1
109c4     01 24 06 F1 | 	add	local04, #1
109c8     C8 FF 9F FD | 	jmp	#LR__1320
109cc                 | LR__1321
109cc                 | ' 'print "in convertstring: str=";s
109cc                 | ' return s
109cc     11 FB 01 F6 | 	mov	result1, local03
109d0     A7 F0 03 F6 | 	mov	ptra, fp
109d4     B2 00 A0 FD | 	call	#popregs_
109d8                 | _convertstring_ret
109d8     2D 00 64 FD | 	ret
109dc                 | 
109dc                 | ' 
109dc                 | ' sub do_assign
109dc                 | _do_assign
109dc     05 4A 05 F6 | 	mov	COUNT_, #5
109e0     A8 00 A0 FD | 	call	#pushregs_
109e4     44 F0 07 F1 | 	add	ptra, #68
109e8     4A 00 00 FF 
109ec     B0 E4 05 F1 | 	add	objptr, ##38064
109f0     F2 16 02 FB | 	rdlong	arg03, objptr
109f4     0B 15 02 F6 | 	mov	arg02, arg03
109f8     01 14 66 F0 | 	shl	arg02, #1
109fc     0B 15 02 F1 | 	add	arg02, arg03
10a00     02 14 66 F0 | 	shl	arg02, #2
10a04     03 00 00 FF 
10a08     04 E4 85 F1 | 	sub	objptr, ##1540
10a0c     F2 14 02 F1 | 	add	arg02, objptr
10a10     0A 15 02 FB | 	rdlong	arg02, arg02
10a14     18 4E 05 F1 | 	add	fp, #24
10a18     A7 14 62 FC | 	wrlong	arg02, fp
10a1c                 | ' 
10a1c                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
10a1c                 | ' if variables(varnum).vartype<array_no_type then 
10a1c     18 4E 85 F1 | 	sub	fp, #24
10a20     04 14 66 F0 | 	shl	arg02, #4
10a24     32 00 00 FF 
10a28     84 E4 85 F1 | 	sub	objptr, ##25732
10a2c     F2 14 02 F1 | 	add	arg02, objptr
10a30     0C 14 06 F1 | 	add	arg02, #12
10a34     0A 17 02 FB | 	rdlong	arg03, arg02
10a38     00 17 16 F2 | 	cmp	arg03, #256 wc
10a3c     15 00 00 FF 
10a40     28 E4 85 F1 | 	sub	objptr, ##10792
10a44     18 01 90 3D |  if_ae	jmp	#LR__1330
10a48     78 A6 BF FD | 	call	#_pop
10a4c     A7 FA 61 FC | 	wrlong	result1, fp
10a50     04 4E 05 F1 | 	add	fp, #4
10a54     A7 FC 61 FC | 	wrlong	result2, fp
10a58     04 4E 05 F1 | 	add	fp, #4
10a5c     A7 FE 61 FC | 	wrlong	result3, fp
10a60     08 4E 85 F1 | 	sub	fp, #8
10a64     A7 16 02 FB | 	rdlong	arg03, fp
10a68     04 4E 05 F1 | 	add	fp, #4
10a6c     A7 14 02 FB | 	rdlong	arg02, fp
10a70     14 4E 05 F1 | 	add	fp, #20
10a74     A7 12 02 FB | 	rdlong	arg01, fp
10a78     04 12 66 F0 | 	shl	arg01, #4
10a7c     15 00 00 FF 
10a80     28 E4 05 F1 | 	add	objptr, ##10792
10a84     F2 12 02 F1 | 	add	arg01, objptr
10a88     04 12 06 F1 | 	add	arg01, #4
10a8c     09 17 62 FC | 	wrlong	arg03, arg01
10a90     A7 16 02 FB | 	rdlong	arg03, fp
10a94     04 16 66 F0 | 	shl	arg03, #4
10a98     F2 16 02 F1 | 	add	arg03, objptr
10a9c     08 16 06 F1 | 	add	arg03, #8
10aa0     0B 15 62 FC | 	wrlong	arg02, arg03
10aa4     A7 16 02 FB | 	rdlong	arg03, fp
10aa8     04 16 66 F0 | 	shl	arg03, #4
10aac     F2 16 02 F1 | 	add	arg03, objptr
10ab0     10 4E 85 F1 | 	sub	fp, #16
10ab4     A7 14 02 FB | 	rdlong	arg02, fp
10ab8     0C 16 06 F1 | 	add	arg03, #12
10abc     0B 15 62 FC | 	wrlong	arg02, arg03
10ac0                 | '   t1=pop() 
10ac0                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
10ac0                 | '   if variables(varnum).vartype<>result_string2 then return
10ac0     10 4E 05 F1 | 	add	fp, #16
10ac4     A7 16 02 FB | 	rdlong	arg03, fp
10ac8     18 4E 85 F1 | 	sub	fp, #24
10acc     04 16 66 F0 | 	shl	arg03, #4
10ad0     F2 16 02 F1 | 	add	arg03, objptr
10ad4     0C 16 06 F1 | 	add	arg03, #12
10ad8     0B 17 02 FB | 	rdlong	arg03, arg03
10adc     2B 16 0E F2 | 	cmp	arg03, #43 wz
10ae0     15 00 00 FF 
10ae4     28 E4 85 F1 | 	sub	objptr, ##10792
10ae8     E4 04 90 5D |  if_ne	jmp	#LR__1353
10aec     18 4E 05 F1 | 	add	fp, #24
10af0     A7 16 02 FB | 	rdlong	arg03, fp
10af4     0B 1F 02 F6 | 	mov	local01, arg03
10af8     04 1E 66 F0 | 	shl	local01, #4
10afc     15 00 00 FF 
10b00     28 E4 05 F1 | 	add	objptr, ##10792
10b04     F2 1E 02 F1 | 	add	local01, objptr
10b08     18 4E 85 F1 | 	sub	fp, #24
10b0c     04 16 66 F0 | 	shl	arg03, #4
10b10     F2 16 02 F1 | 	add	arg03, objptr
10b14     04 16 06 F1 | 	add	arg03, #4
10b18     0B 13 02 FB | 	rdlong	arg01, arg03
10b1c     15 00 00 FF 
10b20     28 E4 85 F1 | 	sub	objptr, ##10792
10b24     48 FE BF FD | 	call	#_convertstring
10b28     04 1E 06 F1 | 	add	local01, #4
10b2c     0F FB 61 FC | 	wrlong	result1, local01
10b30     18 4E 05 F1 | 	add	fp, #24
10b34     A7 1E 02 FB | 	rdlong	local01, fp
10b38     18 4E 85 F1 | 	sub	fp, #24
10b3c     04 1E 66 F0 | 	shl	local01, #4
10b40     15 00 00 FF 
10b44     28 E4 05 F1 | 	add	objptr, ##10792
10b48     F2 1E 02 F1 | 	add	local01, objptr
10b4c     0C 1E 06 F1 | 	add	local01, #12
10b50     0F 3F 68 FC | 	wrlong	#31, local01
10b54                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
10b54                 | '   variables(varnum).vartype=result_string
10b54                 | '   return
10b54     15 00 00 FF 
10b58     28 E4 85 F1 | 	sub	objptr, ##10792
10b5c     70 04 90 FD | 	jmp	#LR__1353
10b60                 | LR__1330
10b60                 | ' for i=0 to 2 : arrid(i)=0 : next i
10b60     1C 4E 05 F1 | 	add	fp, #28
10b64     A7 00 68 FC | 	wrlong	#0, fp
10b68     97 16 48 FB | 	callpa	#(@LR__1332-@LR__1331)>>2,fcache_load_ptr_
10b6c                 | LR__1331
10b6c     A7 1E 02 FB | 	rdlong	local01, fp
10b70     02 1E 66 F0 | 	shl	local01, #2
10b74     18 4E 05 F1 | 	add	fp, #24
10b78     A7 1E 02 F1 | 	add	local01, fp
10b7c     0F 01 68 FC | 	wrlong	#0, local01
10b80     18 4E 85 F1 | 	sub	fp, #24
10b84     A7 1E 02 FB | 	rdlong	local01, fp
10b88     01 1E 06 F1 | 	add	local01, #1
10b8c     A7 1E 62 FC | 	wrlong	local01, fp
10b90     03 1E 16 F2 | 	cmp	local01, #3 wc
10b94     D4 FF 9F CD |  if_b	jmp	#LR__1331
10b98                 | LR__1332
10b98     4A 00 00 FF 
10b9c     B0 E4 05 F1 | 	add	objptr, ##38064
10ba0     F2 16 02 FB | 	rdlong	arg03, objptr
10ba4     0B 1F 02 F6 | 	mov	local01, arg03
10ba8     01 1E 66 F0 | 	shl	local01, #1
10bac     0B 1F 02 F1 | 	add	local01, arg03
10bb0     02 1E 66 F0 | 	shl	local01, #2
10bb4     03 00 00 FF 
10bb8     04 E4 85 F1 | 	sub	objptr, ##1540
10bbc     F2 1E 02 F1 | 	add	local01, objptr
10bc0     04 1E 06 F1 | 	add	local01, #4
10bc4     0F 21 02 FB | 	rdlong	local02, local01
10bc8     04 4E 05 F1 | 	add	fp, #4
10bcc     A7 20 62 FC | 	wrlong	local02, fp
10bd0     20 4E 85 F1 | 	sub	fp, #32
10bd4     47 00 00 FF 
10bd8     AC E4 85 F1 | 	sub	objptr, ##36524
10bdc     E4 A4 BF FD | 	call	#_pop
10be0     A7 FA 61 FC | 	wrlong	result1, fp
10be4     04 4E 05 F1 | 	add	fp, #4
10be8     A7 FC 61 FC | 	wrlong	result2, fp
10bec     04 4E 05 F1 | 	add	fp, #4
10bf0     A7 FE 61 FC | 	wrlong	result3, fp
10bf4                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
10bf4                 | ' t1=pop() ' var value
10bf4                 | ' if numpar>0 then
10bf4     18 4E 05 F1 | 	add	fp, #24
10bf8     A7 22 02 FB | 	rdlong	local03, fp
10bfc     20 4E 85 F1 | 	sub	fp, #32
10c00     01 22 16 F2 | 	cmp	local03, #1 wc
10c04     78 00 90 CD |  if_b	jmp	#LR__1335
10c08                 | '   for i=numpar to 1 step -1
10c08     20 4E 05 F1 | 	add	fp, #32
10c0c     A7 24 0A FB | 	rdlong	local04, fp wz
10c10     04 4E 85 F1 | 	sub	fp, #4
10c14     A7 24 62 FC | 	wrlong	local04, fp
10c18     1C 4E 85 F1 | 	sub	fp, #28
10c1c     60 00 90 AD |  if_e	jmp	#LR__1334
10c20                 | LR__1333
10c20     A0 A4 BF FD | 	call	#_pop
10c24     0C 4E 05 F1 | 	add	fp, #12
10c28     A7 FA 61 FC | 	wrlong	result1, fp
10c2c     04 4E 05 F1 | 	add	fp, #4
10c30     A7 FC 61 FC | 	wrlong	result2, fp
10c34     04 4E 05 F1 | 	add	fp, #4
10c38     A7 FE 61 FC | 	wrlong	result3, fp
10c3c     08 4E 05 F1 | 	add	fp, #8
10c40     A7 22 02 FB | 	rdlong	local03, fp
10c44     01 22 86 F1 | 	sub	local03, #1
10c48     02 22 66 F0 | 	shl	local03, #2
10c4c     18 4E 05 F1 | 	add	fp, #24
10c50     A7 22 02 F1 | 	add	local03, fp
10c54     28 4E 85 F1 | 	sub	fp, #40
10c58     A7 12 02 F6 | 	mov	arg01, fp
10c5c     0C 4E 85 F1 | 	sub	fp, #12
10c60     30 45 B0 FD | 	call	#_converttoint
10c64     11 FB 61 FC | 	wrlong	result1, local03
10c68     1C 4E 05 F1 | 	add	fp, #28
10c6c     A7 24 02 FB | 	rdlong	local04, fp
10c70     01 24 8E F1 | 	sub	local04, #1 wz
10c74     A7 24 62 FC | 	wrlong	local04, fp
10c78     1C 4E 85 F1 | 	sub	fp, #28
10c7c     A0 FF 9F 5D |  if_ne	jmp	#LR__1333
10c80                 | LR__1334
10c80                 | LR__1335
10c80     18 4E 05 F1 | 	add	fp, #24
10c84     A7 1E 02 FB | 	rdlong	local01, fp
10c88     04 1E 66 F0 | 	shl	local01, #4
10c8c     15 00 00 FF 
10c90     28 E4 05 F1 | 	add	objptr, ##10792
10c94     F2 1E 02 F1 | 	add	local01, objptr
10c98     04 1E 06 F1 | 	add	local01, #4
10c9c     0F 13 02 FB | 	rdlong	arg01, local01
10ca0     0C 4E 05 F1 | 	add	fp, #12
10ca4     A7 12 62 FC | 	wrlong	arg01, fp
10ca8     24 4E 85 F1 | 	sub	fp, #36
10cac     15 00 00 FF 
10cb0     28 E4 85 F1 | 	sub	objptr, ##10792
10cb4     44 BE B0 FD | 	call	#_pslpeek
10cb8     FD 24 32 F9 | 	getword	local04, result1, #0
10cbc     28 4E 05 F1 | 	add	fp, #40
10cc0     A7 24 62 FC | 	wrlong	local04, fp
10cc4     04 4E 85 F1 | 	sub	fp, #4
10cc8     A7 12 02 FB | 	rdlong	arg01, fp
10ccc     24 4E 85 F1 | 	sub	fp, #36
10cd0     02 12 06 F1 | 	add	arg01, #2
10cd4     CC BD B0 FD | 	call	#_pspeek
10cd8     FD FA E1 F8 | 	getbyte	result1, result1, #0
10cdc     2C 4E 05 F1 | 	add	fp, #44
10ce0     A7 FA 61 FC | 	wrlong	result1, fp
10ce4                 | ' esize=pspeek(arrptr+2)
10ce4                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
10ce4     08 4E 85 F1 | 	sub	fp, #8
10ce8     A7 12 02 FB | 	rdlong	arg01, fp
10cec     24 4E 85 F1 | 	sub	fp, #36
10cf0     04 12 06 F1 | 	add	arg01, #4
10cf4     04 BE B0 FD | 	call	#_pslpeek
10cf8     FD 24 02 F6 | 	mov	local04, result1
10cfc     34 4E 05 F1 | 	add	fp, #52
10d00     A7 1E 02 FB | 	rdlong	local01, fp
10d04     34 4E 85 F1 | 	sub	fp, #52
10d08     12 1F 12 F2 | 	cmp	local01, local04 wc
10d0c     54 00 90 3D |  if_ae	jmp	#LR__1336
10d10     24 4E 05 F1 | 	add	fp, #36
10d14     A7 12 02 FB | 	rdlong	arg01, fp
10d18     24 4E 85 F1 | 	sub	fp, #36
10d1c     08 12 06 F1 | 	add	arg01, #8
10d20     D8 BD B0 FD | 	call	#_pslpeek
10d24     FD 1E 02 F6 | 	mov	local01, result1
10d28     38 4E 05 F1 | 	add	fp, #56
10d2c     A7 24 02 FB | 	rdlong	local04, fp
10d30     38 4E 85 F1 | 	sub	fp, #56
10d34     0F 25 12 F2 | 	cmp	local04, local01 wc
10d38     28 00 90 3D |  if_ae	jmp	#LR__1336
10d3c     24 4E 05 F1 | 	add	fp, #36
10d40     A7 12 02 FB | 	rdlong	arg01, fp
10d44     24 4E 85 F1 | 	sub	fp, #36
10d48     0C 12 06 F1 | 	add	arg01, #12
10d4c     AC BD B0 FD | 	call	#_pslpeek
10d50     3C 4E 05 F1 | 	add	fp, #60
10d54     A7 24 02 FB | 	rdlong	local04, fp
10d58     3C 4E 85 F1 | 	sub	fp, #60
10d5c     FD 24 12 F2 | 	cmp	local04, result1 wc
10d60     0C 00 90 CD |  if_b	jmp	#LR__1337
10d64                 | LR__1336
10d64     31 12 06 F6 | 	mov	arg01, #49
10d68     FC BA B0 FD | 	call	#_printerror
10d6c     60 02 90 FD | 	jmp	#LR__1353
10d70                 | LR__1337
10d70     24 4E 05 F1 | 	add	fp, #36
10d74     A7 12 02 FB | 	rdlong	arg01, fp
10d78     09 25 02 F6 | 	mov	local04, arg01
10d7c     10 24 06 F1 | 	add	local04, #16
10d80     24 4E 85 F1 | 	sub	fp, #36
10d84     04 12 06 F1 | 	add	arg01, #4
10d88     70 BD B0 FD | 	call	#_pslpeek
10d8c     FD 1E 02 F6 | 	mov	local01, result1
10d90     38 4E 05 F1 | 	add	fp, #56
10d94     A7 20 02 FB | 	rdlong	local02, fp
10d98     10 1F 02 FD | 	qmul	local01, local02
10d9c     04 4E 85 F1 | 	sub	fp, #4
10da0     A7 22 02 FB | 	rdlong	local03, fp
10da4     10 4E 85 F1 | 	sub	fp, #16
10da8     A7 12 02 FB | 	rdlong	arg01, fp
10dac     24 4E 85 F1 | 	sub	fp, #36
10db0     08 12 06 F1 | 	add	arg01, #8
10db4     18 20 62 FD | 	getqx	local02
10db8     10 23 02 F1 | 	add	local03, local02
10dbc     3C BD B0 FD | 	call	#_pslpeek
10dc0     FD 20 02 F6 | 	mov	local02, result1
10dc4     24 4E 05 F1 | 	add	fp, #36
10dc8     A7 12 02 FB | 	rdlong	arg01, fp
10dcc     24 4E 85 F1 | 	sub	fp, #36
10dd0     04 12 06 F1 | 	add	arg01, #4
10dd4     24 BD B0 FD | 	call	#_pslpeek
10dd8     FD 20 02 FD | 	qmul	local02, result1
10ddc     3C 4E 05 F1 | 	add	fp, #60
10de0     A7 20 02 FB | 	rdlong	local02, fp
10de4     18 1E 62 FD | 	getqx	local01
10de8     10 1F 02 FD | 	qmul	local01, local02
10dec     10 4E 85 F1 | 	sub	fp, #16
10df0     A7 20 02 FB | 	rdlong	local02, fp
10df4     18 1E 62 FD | 	getqx	local01
10df8     0F 23 02 F1 | 	add	local03, local01
10dfc     11 21 02 FD | 	qmul	local02, local03
10e00     04 4E 05 F1 | 	add	fp, #4
10e04                 | ' 
10e04                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
10e04                 | ' select case arrtype
10e04     18 22 62 FD | 	getqx	local03
10e08     11 25 02 F1 | 	add	local04, local03
10e0c     A7 24 62 FC | 	wrlong	local04, fp
10e10     08 4E 85 F1 | 	sub	fp, #8
10e14     A7 26 02 FB | 	rdlong	local05, fp
10e18     28 4E 85 F1 | 	sub	fp, #40
10e1c     00 27 86 F1 | 	sub	local05, #256
10e20     0C 26 26 F3 | 	fle	local05, #12
10e24     30 26 62 FD | 	jmprel	local05
10e28                 | LR__1338
10e28     30 00 90 FD | 	jmp	#LR__1339
10e2c     58 00 90 FD | 	jmp	#LR__1340
10e30     6C 00 90 FD | 	jmp	#LR__1341
10e34     80 00 90 FD | 	jmp	#LR__1342
10e38     B0 00 90 FD | 	jmp	#LR__1343
10e3c     E0 00 90 FD | 	jmp	#LR__1344
10e40     F4 00 90 FD | 	jmp	#LR__1345
10e44     08 01 90 FD | 	jmp	#LR__1346
10e48     1C 01 90 FD | 	jmp	#LR__1347
10e4c     30 01 90 FD | 	jmp	#LR__1348
10e50     44 01 90 FD | 	jmp	#LR__1349
10e54     58 01 90 FD | 	jmp	#LR__1350
10e58     6C 01 90 FD | 	jmp	#LR__1351
10e5c                 | LR__1339
10e5c     A7 12 02 F6 | 	mov	arg01, fp
10e60     30 4E 05 F1 | 	add	fp, #48
10e64     A7 14 02 FB | 	rdlong	arg02, fp
10e68     30 4E 85 F1 | 	sub	fp, #48
10e6c     0C 16 06 F6 | 	mov	arg03, #12
10e70     0B 00 00 FF 
10e74     CC E4 05 F1 | 	add	objptr, ##5836
10e78     F0 F2 B0 FD | 	call	#_psram_spin2_write
10e7c     0B 00 00 FF 
10e80     CC E4 85 F1 | 	sub	objptr, ##5836
10e84     48 01 90 FD | 	jmp	#LR__1352
10e88                 | LR__1340
10e88     30 4E 05 F1 | 	add	fp, #48
10e8c     A7 12 02 FB | 	rdlong	arg01, fp
10e90     30 4E 85 F1 | 	sub	fp, #48
10e94     A7 14 02 FB | 	rdlong	arg02, fp
10e98     C0 BB B0 FD | 	call	#_pspoke
10e9c     30 01 90 FD | 	jmp	#LR__1352
10ea0                 | LR__1341
10ea0     30 4E 05 F1 | 	add	fp, #48
10ea4     A7 12 02 FB | 	rdlong	arg01, fp
10ea8     30 4E 85 F1 | 	sub	fp, #48
10eac     A7 14 02 FB | 	rdlong	arg02, fp
10eb0     A8 BB B0 FD | 	call	#_pspoke
10eb4     18 01 90 FD | 	jmp	#LR__1352
10eb8                 | LR__1342
10eb8     30 4E 05 F1 | 	add	fp, #48
10ebc     A7 12 02 FB | 	rdlong	arg01, fp
10ec0     30 4E 85 F1 | 	sub	fp, #48
10ec4     A7 14 02 FB | 	rdlong	arg02, fp
10ec8     90 BB B0 FD | 	call	#_pspoke
10ecc     30 4E 05 F1 | 	add	fp, #48
10ed0     A7 12 02 FB | 	rdlong	arg01, fp
10ed4     30 4E 85 F1 | 	sub	fp, #48
10ed8     01 12 06 F1 | 	add	arg01, #1
10edc     A7 14 02 FB | 	rdlong	arg02, fp
10ee0     08 14 46 F0 | 	shr	arg02, #8
10ee4     74 BB B0 FD | 	call	#_pspoke
10ee8     E4 00 90 FD | 	jmp	#LR__1352
10eec                 | LR__1343
10eec     30 4E 05 F1 | 	add	fp, #48
10ef0     A7 12 02 FB | 	rdlong	arg01, fp
10ef4     30 4E 85 F1 | 	sub	fp, #48
10ef8     A7 14 02 FB | 	rdlong	arg02, fp
10efc     5C BB B0 FD | 	call	#_pspoke
10f00     30 4E 05 F1 | 	add	fp, #48
10f04     A7 12 02 FB | 	rdlong	arg01, fp
10f08     30 4E 85 F1 | 	sub	fp, #48
10f0c     01 12 06 F1 | 	add	arg01, #1
10f10     A7 14 02 FB | 	rdlong	arg02, fp
10f14     08 14 46 F0 | 	shr	arg02, #8
10f18     40 BB B0 FD | 	call	#_pspoke
10f1c     B0 00 90 FD | 	jmp	#LR__1352
10f20                 | LR__1344
10f20     30 4E 05 F1 | 	add	fp, #48
10f24     A7 12 02 FB | 	rdlong	arg01, fp
10f28     30 4E 85 F1 | 	sub	fp, #48
10f2c     A7 14 02 FB | 	rdlong	arg02, fp
10f30     98 BA B0 FD | 	call	#_pslpoke
10f34     98 00 90 FD | 	jmp	#LR__1352
10f38                 | LR__1345
10f38     30 4E 05 F1 | 	add	fp, #48
10f3c     A7 12 02 FB | 	rdlong	arg01, fp
10f40     30 4E 85 F1 | 	sub	fp, #48
10f44     A7 14 02 FB | 	rdlong	arg02, fp
10f48     80 BA B0 FD | 	call	#_pslpoke
10f4c     80 00 90 FD | 	jmp	#LR__1352
10f50                 | LR__1346
10f50     30 4E 05 F1 | 	add	fp, #48
10f54     A7 12 02 FB | 	rdlong	arg01, fp
10f58     30 4E 85 F1 | 	sub	fp, #48
10f5c     A7 14 02 FB | 	rdlong	arg02, fp
10f60     68 BA B0 FD | 	call	#_pslpoke
10f64     68 00 90 FD | 	jmp	#LR__1352
10f68                 | LR__1347
10f68     30 4E 05 F1 | 	add	fp, #48
10f6c     A7 12 02 FB | 	rdlong	arg01, fp
10f70     30 4E 85 F1 | 	sub	fp, #48
10f74     A7 14 02 FB | 	rdlong	arg02, fp
10f78     50 BA B0 FD | 	call	#_pslpoke
10f7c     50 00 90 FD | 	jmp	#LR__1352
10f80                 | LR__1348
10f80     30 4E 05 F1 | 	add	fp, #48
10f84     A7 12 02 FB | 	rdlong	arg01, fp
10f88     30 4E 85 F1 | 	sub	fp, #48
10f8c     A7 14 02 FB | 	rdlong	arg02, fp
10f90     38 BA B0 FD | 	call	#_pslpoke
10f94     38 00 90 FD | 	jmp	#LR__1352
10f98                 | LR__1349
10f98     30 4E 05 F1 | 	add	fp, #48
10f9c     A7 12 02 FB | 	rdlong	arg01, fp
10fa0     30 4E 85 F1 | 	sub	fp, #48
10fa4     A7 14 02 FB | 	rdlong	arg02, fp
10fa8     20 BA B0 FD | 	call	#_pslpoke
10fac     20 00 90 FD | 	jmp	#LR__1352
10fb0                 | LR__1350
10fb0     30 4E 05 F1 | 	add	fp, #48
10fb4     A7 12 02 FB | 	rdlong	arg01, fp
10fb8     30 4E 85 F1 | 	sub	fp, #48
10fbc     A7 14 02 FB | 	rdlong	arg02, fp
10fc0     08 BA B0 FD | 	call	#_pslpoke
10fc4     08 00 90 FD | 	jmp	#LR__1352
10fc8                 | LR__1351
10fc8     32 12 06 F6 | 	mov	arg01, #50
10fcc     98 B8 B0 FD | 	call	#_printerror
10fd0                 | LR__1352
10fd0                 | LR__1353
10fd0     A7 F0 03 F6 | 	mov	ptra, fp
10fd4     B2 00 A0 FD | 	call	#popregs_
10fd8                 | _do_assign_ret
10fd8     2D 00 64 FD | 	ret
10fdc                 | 
10fdc                 | ' 
10fdc                 | ' 
10fdc                 | ' ' --------------------- Read a variable and push to the stack
10fdc                 | ' 
10fdc                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
10fdc                 | ' 
10fdc                 | ' sub do_getvar
10fdc                 | _do_getvar
10fdc     04 4A 05 F6 | 	mov	COUNT_, #4
10fe0     A8 00 A0 FD | 	call	#pushregs_
10fe4     3C F0 07 F1 | 	add	ptra, #60
10fe8                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
10fe8                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
10fe8     4A 00 00 FF 
10fec     B0 E4 05 F1 | 	add	objptr, ##38064
10ff0     F2 1E 02 FB | 	rdlong	local01, objptr
10ff4     0F 17 02 F6 | 	mov	arg03, local01
10ff8     01 16 66 F0 | 	shl	arg03, #1
10ffc     0F 17 02 F1 | 	add	arg03, local01
11000     02 16 66 F0 | 	shl	arg03, #2
11004     03 00 00 FF 
11008     04 E4 85 F1 | 	sub	objptr, ##1540
1100c     F2 16 02 F1 | 	add	arg03, objptr
11010     04 16 06 F1 | 	add	arg03, #4
11014     0B 17 0A FB | 	rdlong	arg03, arg03 wz
11018     47 00 00 FF 
1101c     AC E4 85 F1 | 	sub	objptr, ##36524
11020     C4 00 90 5D |  if_ne	jmp	#LR__1361
11024     4A 00 00 FF 
11028     B0 E4 05 F1 | 	add	objptr, ##38064
1102c     F2 1E 02 FB | 	rdlong	local01, objptr
11030     0F 13 02 F6 | 	mov	arg01, local01
11034     01 12 66 F0 | 	shl	arg01, #1
11038     0F 13 02 F1 | 	add	arg01, local01
1103c     02 12 66 F0 | 	shl	arg01, #2
11040     03 00 00 FF 
11044     04 E4 85 F1 | 	sub	objptr, ##1540
11048     F2 12 02 F1 | 	add	arg01, objptr
1104c     09 1F 02 FB | 	rdlong	local01, arg01
11050     04 1E 66 F0 | 	shl	local01, #4
11054     32 00 00 FF 
11058     84 E4 85 F1 | 	sub	objptr, ##25732
1105c     F2 1E 02 F1 | 	add	local01, objptr
11060     04 1E 06 F1 | 	add	local01, #4
11064     0F 13 02 FB | 	rdlong	arg01, local01
11068     04 1E 06 F1 | 	add	local01, #4
1106c     0F 1F 02 FB | 	rdlong	local01, local01
11070     A7 12 62 FC | 	wrlong	arg01, fp
11074     04 4E 05 F1 | 	add	fp, #4
11078     A7 1E 62 FC | 	wrlong	local01, fp
1107c     35 00 00 FF 
11080     88 E4 05 F1 | 	add	objptr, ##27272
11084     F2 1E 02 FB | 	rdlong	local01, objptr
11088     0F 13 02 F6 | 	mov	arg01, local01
1108c     01 12 66 F0 | 	shl	arg01, #1
11090     0F 13 02 F1 | 	add	arg01, local01
11094     02 12 66 F0 | 	shl	arg01, #2
11098     03 00 00 FF 
1109c     04 E4 85 F1 | 	sub	objptr, ##1540
110a0     F2 12 02 F1 | 	add	arg01, objptr
110a4     09 1F 02 FB | 	rdlong	local01, arg01
110a8     04 1E 66 F0 | 	shl	local01, #4
110ac     32 00 00 FF 
110b0     84 E4 85 F1 | 	sub	objptr, ##25732
110b4     F2 1E 02 F1 | 	add	local01, objptr
110b8     0C 1E 06 F1 | 	add	local01, #12
110bc     0F 1F 02 FB | 	rdlong	local01, local01
110c0     04 4E 05 F1 | 	add	fp, #4
110c4     A7 1E 62 FC | 	wrlong	local01, fp
110c8                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
110c8                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
110c8                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
110c8     08 4E 85 F1 | 	sub	fp, #8
110cc     00 1F 16 F2 | 	cmp	local01, #256 wc
110d0     15 00 00 FF 
110d4     28 E4 85 F1 | 	sub	objptr, ##10792
110d8     0C 00 90 3D |  if_ae	jmp	#LR__1360
110dc     A7 12 02 F6 | 	mov	arg01, fp
110e0     78 A0 BF FD | 	call	#_push
110e4     A0 04 90 FD | 	jmp	#LR__1382
110e8                 | LR__1360
110e8                 | LR__1361
110e8     4A 00 00 FF 
110ec     B0 E4 05 F1 | 	add	objptr, ##38064
110f0     F2 16 02 FB | 	rdlong	arg03, objptr
110f4     0B 15 02 F6 | 	mov	arg02, arg03
110f8     01 14 66 F0 | 	shl	arg02, #1
110fc     0B 15 02 F1 | 	add	arg02, arg03
11100     02 14 66 F0 | 	shl	arg02, #2
11104     03 00 00 FF 
11108     04 E4 85 F1 | 	sub	objptr, ##1540
1110c     F2 14 02 F1 | 	add	arg02, objptr
11110     0A 17 02 FB | 	rdlong	arg03, arg02
11114     04 16 66 F0 | 	shl	arg03, #4
11118     32 00 00 FF 
1111c     84 E4 85 F1 | 	sub	objptr, ##25732
11120     F2 16 02 F1 | 	add	arg03, objptr
11124     04 16 06 F1 | 	add	arg03, #4
11128     0B 13 02 FB | 	rdlong	arg01, arg03
1112c     0C 4E 05 F1 | 	add	fp, #12
11130     A7 12 62 FC | 	wrlong	arg01, fp
11134     0C 4E 85 F1 | 	sub	fp, #12
11138     15 00 00 FF 
1113c     28 E4 85 F1 | 	sub	objptr, ##10792
11140     B8 B9 B0 FD | 	call	#_pslpeek
11144     FD FA 31 F9 | 	getword	result1, result1, #0
11148     10 4E 05 F1 | 	add	fp, #16
1114c     A7 FA 61 FC | 	wrlong	result1, fp
11150     4A 00 00 FF 
11154     B0 E4 05 F1 | 	add	objptr, ##38064
11158     F2 16 02 FB | 	rdlong	arg03, objptr
1115c     0B 15 02 F6 | 	mov	arg02, arg03
11160     01 14 66 F0 | 	shl	arg02, #1
11164     0B 15 02 F1 | 	add	arg02, arg03
11168     02 14 66 F0 | 	shl	arg02, #2
1116c     03 00 00 FF 
11170     04 E4 85 F1 | 	sub	objptr, ##1540
11174     F2 14 02 F1 | 	add	arg02, objptr
11178     04 14 06 F1 | 	add	arg02, #4
1117c     0A 17 02 FB | 	rdlong	arg03, arg02
11180     04 4E 05 F1 | 	add	fp, #4
11184     A7 16 62 FC | 	wrlong	arg03, fp
11188     08 4E 85 F1 | 	sub	fp, #8
1118c     A7 12 02 FB | 	rdlong	arg01, fp
11190     0C 4E 85 F1 | 	sub	fp, #12
11194     02 12 06 F1 | 	add	arg01, #2
11198     47 00 00 FF 
1119c     AC E4 85 F1 | 	sub	objptr, ##36524
111a0     00 B9 B0 FD | 	call	#_pspeek
111a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
111a8     18 4E 05 F1 | 	add	fp, #24
111ac     A7 FA 61 FC | 	wrlong	result1, fp
111b0     0C 4E 85 F1 | 	sub	fp, #12
111b4     A7 12 02 FB | 	rdlong	arg01, fp
111b8     0C 4E 85 F1 | 	sub	fp, #12
111bc     04 12 06 F1 | 	add	arg01, #4
111c0     38 B9 B0 FD | 	call	#_pslpeek
111c4     1C 4E 05 F1 | 	add	fp, #28
111c8     A7 FA 61 FC | 	wrlong	result1, fp
111cc     10 4E 85 F1 | 	sub	fp, #16
111d0     A7 12 02 FB | 	rdlong	arg01, fp
111d4     0C 4E 85 F1 | 	sub	fp, #12
111d8     08 12 06 F1 | 	add	arg01, #8
111dc     1C B9 B0 FD | 	call	#_pslpeek
111e0     20 4E 05 F1 | 	add	fp, #32
111e4     A7 FA 61 FC | 	wrlong	result1, fp
111e8     14 4E 85 F1 | 	sub	fp, #20
111ec     A7 12 02 FB | 	rdlong	arg01, fp
111f0     0C 4E 85 F1 | 	sub	fp, #12
111f4     0C 12 06 F1 | 	add	arg01, #12
111f8     00 B9 B0 FD | 	call	#_pslpeek
111fc     24 4E 05 F1 | 	add	fp, #36
11200     A7 FA 61 FC | 	wrlong	result1, fp
11204                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
11204                 | ' esize=pspeek(arrptr+2)
11204                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
11204                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
11204                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
11204                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
11204     10 4E 85 F1 | 	sub	fp, #16
11208     A7 16 02 FB | 	rdlong	arg03, fp
1120c     14 4E 85 F1 | 	sub	fp, #20
11210     03 16 16 F2 | 	cmp	arg03, #3 wc
11214     38 00 90 CD |  if_b	jmp	#LR__1362
11218     A8 9E BF FD | 	call	#_pop
1121c     FF 16 02 F6 | 	mov	arg03, result3
11220     A7 FA 61 FC | 	wrlong	result1, fp
11224     04 4E 05 F1 | 	add	fp, #4
11228     A7 FC 61 FC | 	wrlong	result2, fp
1122c     04 4E 05 F1 | 	add	fp, #4
11230     A7 16 62 FC | 	wrlong	arg03, fp
11234     08 4E 85 F1 | 	sub	fp, #8
11238     A7 12 02 F6 | 	mov	arg01, fp
1123c     54 3F B0 FD | 	call	#_converttoint
11240     30 4E 05 F1 | 	add	fp, #48
11244     A7 FA 61 FC | 	wrlong	result1, fp
11248     30 4E 85 F1 | 	sub	fp, #48
1124c     0C 00 90 FD | 	jmp	#LR__1363
11250                 | LR__1362
11250     30 4E 05 F1 | 	add	fp, #48
11254     A7 00 68 FC | 	wrlong	#0, fp
11258     30 4E 85 F1 | 	sub	fp, #48
1125c                 | LR__1363
1125c                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1125c     14 4E 05 F1 | 	add	fp, #20
11260     A7 16 02 FB | 	rdlong	arg03, fp
11264     14 4E 85 F1 | 	sub	fp, #20
11268     02 16 16 F2 | 	cmp	arg03, #2 wc
1126c     38 00 90 CD |  if_b	jmp	#LR__1364
11270     50 9E BF FD | 	call	#_pop
11274     FF 16 02 F6 | 	mov	arg03, result3
11278     A7 FA 61 FC | 	wrlong	result1, fp
1127c     04 4E 05 F1 | 	add	fp, #4
11280     A7 FC 61 FC | 	wrlong	result2, fp
11284     04 4E 05 F1 | 	add	fp, #4
11288     A7 16 62 FC | 	wrlong	arg03, fp
1128c     08 4E 85 F1 | 	sub	fp, #8
11290     A7 12 02 F6 | 	mov	arg01, fp
11294     FC 3E B0 FD | 	call	#_converttoint
11298     2C 4E 05 F1 | 	add	fp, #44
1129c     A7 FA 61 FC | 	wrlong	result1, fp
112a0     2C 4E 85 F1 | 	sub	fp, #44
112a4     0C 00 90 FD | 	jmp	#LR__1365
112a8                 | LR__1364
112a8     2C 4E 05 F1 | 	add	fp, #44
112ac     A7 00 68 FC | 	wrlong	#0, fp
112b0     2C 4E 85 F1 | 	sub	fp, #44
112b4                 | LR__1365
112b4                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
112b4     14 4E 05 F1 | 	add	fp, #20
112b8     A7 16 02 FB | 	rdlong	arg03, fp
112bc     14 4E 85 F1 | 	sub	fp, #20
112c0     01 16 16 F2 | 	cmp	arg03, #1 wc
112c4     38 00 90 CD |  if_b	jmp	#LR__1366
112c8     F8 9D BF FD | 	call	#_pop
112cc     FF 16 02 F6 | 	mov	arg03, result3
112d0     A7 FA 61 FC | 	wrlong	result1, fp
112d4     04 4E 05 F1 | 	add	fp, #4
112d8     A7 FC 61 FC | 	wrlong	result2, fp
112dc     04 4E 05 F1 | 	add	fp, #4
112e0     A7 16 62 FC | 	wrlong	arg03, fp
112e4     08 4E 85 F1 | 	sub	fp, #8
112e8     A7 12 02 F6 | 	mov	arg01, fp
112ec     A4 3E B0 FD | 	call	#_converttoint
112f0     28 4E 05 F1 | 	add	fp, #40
112f4     A7 FA 61 FC | 	wrlong	result1, fp
112f8     28 4E 85 F1 | 	sub	fp, #40
112fc     0C 00 90 FD | 	jmp	#LR__1367
11300                 | LR__1366
11300     28 4E 05 F1 | 	add	fp, #40
11304     A7 00 68 FC | 	wrlong	#0, fp
11308     28 4E 85 F1 | 	sub	fp, #40
1130c                 | LR__1367
1130c     0C 4E 05 F1 | 	add	fp, #12
11310     A7 20 02 FB | 	rdlong	local02, fp
11314     1C 4E 05 F1 | 	add	fp, #28
11318     A7 22 02 FB | 	rdlong	local03, fp
1131c     04 4E 05 F1 | 	add	fp, #4
11320     A7 FC 01 FB | 	rdlong	result2, fp
11324     10 4E 85 F1 | 	sub	fp, #16
11328     A7 FE 01 FB | 	rdlong	result3, fp
1132c     FF FC 01 FD | 	qmul	result2, result3
11330     10 20 06 F1 | 	add	local02, #16
11334     14 4E 05 F1 | 	add	fp, #20
11338     A7 FC 01 FB | 	rdlong	result2, fp
1133c     18 FA 61 FD | 	getqx	result1
11340     FF FC 01 FD | 	qmul	result2, result3
11344     FD 22 02 F1 | 	add	local03, result1
11348     10 4E 85 F1 | 	sub	fp, #16
1134c     A7 FE 01 FB | 	rdlong	result3, fp
11350     18 FC 61 FD | 	getqx	result2
11354     FF FC 01 FD | 	qmul	result2, result3
11358     08 4E 85 F1 | 	sub	fp, #8
1135c     A7 FE 01 FB | 	rdlong	result3, fp
11360     18 FC 61 FD | 	getqx	result2
11364     FE 22 02 F1 | 	add	local03, result2
11368     FF 22 02 FD | 	qmul	local03, result3
1136c     1C 4E 05 F1 | 	add	fp, #28
11370                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
11370                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
11370                 | ' 
11370                 | ' select case vartype
11370     18 FC 61 FD | 	getqx	result2
11374     FE 20 02 F1 | 	add	local02, result2
11378     A7 20 62 FC | 	wrlong	local02, fp
1137c     24 4E 85 F1 | 	sub	fp, #36
11380     A7 24 02 FB | 	rdlong	local04, fp
11384     10 4E 85 F1 | 	sub	fp, #16
11388     00 25 86 F1 | 	sub	local04, #256
1138c     0C 24 26 F3 | 	fle	local04, #12
11390     30 24 62 FD | 	jmprel	local04
11394                 | LR__1368
11394     30 00 90 FD | 	jmp	#LR__1369
11398     58 00 90 FD | 	jmp	#LR__1370
1139c     8C 00 90 FD | 	jmp	#LR__1371
113a0     AC 00 90 FD | 	jmp	#LR__1372
113a4     E8 00 90 FD | 	jmp	#LR__1373
113a8     08 01 90 FD | 	jmp	#LR__1374
113ac     24 01 90 FD | 	jmp	#LR__1375
113b0     40 01 90 FD | 	jmp	#LR__1376
113b4     50 01 90 FD | 	jmp	#LR__1377
113b8     60 01 90 FD | 	jmp	#LR__1378
113bc     7C 01 90 FD | 	jmp	#LR__1379
113c0     8C 01 90 FD | 	jmp	#LR__1380
113c4     B8 01 90 FD | 	jmp	#LR__1381
113c8                 | LR__1369
113c8     A7 12 02 F6 | 	mov	arg01, fp
113cc     34 4E 05 F1 | 	add	fp, #52
113d0     A7 14 02 FB | 	rdlong	arg02, fp
113d4     34 4E 85 F1 | 	sub	fp, #52
113d8     0C 16 06 F6 | 	mov	arg03, #12
113dc     0B 00 00 FF 
113e0     CC E4 05 F1 | 	add	objptr, ##5836
113e4     E8 EC B0 FD | 	call	#_psram_spin2_read1
113e8     0B 00 00 FF 
113ec     CC E4 85 F1 | 	sub	objptr, ##5836
113f0     8C 01 90 FD | 	jmp	#LR__1381
113f4                 | LR__1370
113f4     08 4E 05 F1 | 	add	fp, #8
113f8     A7 38 68 FC | 	wrlong	#28, fp
113fc     2C 4E 05 F1 | 	add	fp, #44
11400     A7 12 02 FB | 	rdlong	arg01, fp
11404     34 4E 85 F1 | 	sub	fp, #52
11408     98 B6 B0 FD | 	call	#_pspeek
1140c     FD FA E1 F8 | 	getbyte	result1, result1, #0
11410     A7 FA 61 FC | 	wrlong	result1, fp
11414     80 FA 15 F2 | 	cmp	result1, #128 wc
11418     00 1F 66 36 |  if_ae	neg	local01, #256
1141c     A7 22 02 3B |  if_ae	rdlong	local03, fp
11420     11 1F 42 35 |  if_ae	or	local01, local03
11424     A7 1E 62 3C |  if_ae	wrlong	local01, fp
11428     54 01 90 FD | 	jmp	#LR__1381
1142c                 | LR__1371
1142c     08 4E 05 F1 | 	add	fp, #8
11430     A7 3A 68 FC | 	wrlong	#29, fp
11434     2C 4E 05 F1 | 	add	fp, #44
11438     A7 12 02 FB | 	rdlong	arg01, fp
1143c     34 4E 85 F1 | 	sub	fp, #52
11440     60 B6 B0 FD | 	call	#_pspeek
11444     FD FA E1 F8 | 	getbyte	result1, result1, #0
11448     A7 FA 61 FC | 	wrlong	result1, fp
1144c     30 01 90 FD | 	jmp	#LR__1381
11450                 | LR__1372
11450     08 4E 05 F1 | 	add	fp, #8
11454     A7 38 68 FC | 	wrlong	#28, fp
11458     2C 4E 05 F1 | 	add	fp, #44
1145c     A7 12 02 FB | 	rdlong	arg01, fp
11460     34 4E 85 F1 | 	sub	fp, #52
11464     94 B6 B0 FD | 	call	#_pslpeek
11468     FD FA 31 F9 | 	getword	result1, result1, #0
1146c     A7 FA 61 FC | 	wrlong	result1, fp
11470     40 00 00 FF 
11474     00 FA 15 F2 | 	cmp	result1, ##32768 wc
11478     FF 7F 00 3F 
1147c     00 1F 06 36 |  if_ae	mov	local01, ##16776960
11480     A7 22 02 3B |  if_ae	rdlong	local03, fp
11484     11 1F 42 35 |  if_ae	or	local01, local03
11488     A7 1E 62 3C |  if_ae	wrlong	local01, fp
1148c     F0 00 90 FD | 	jmp	#LR__1381
11490                 | LR__1373
11490     08 4E 05 F1 | 	add	fp, #8
11494     A7 3A 68 FC | 	wrlong	#29, fp
11498     2C 4E 05 F1 | 	add	fp, #44
1149c     A7 12 02 FB | 	rdlong	arg01, fp
114a0     34 4E 85 F1 | 	sub	fp, #52
114a4     54 B6 B0 FD | 	call	#_pslpeek
114a8     FD FA 31 F9 | 	getword	result1, result1, #0
114ac     A7 FA 61 FC | 	wrlong	result1, fp
114b0     CC 00 90 FD | 	jmp	#LR__1381
114b4                 | LR__1374
114b4     08 4E 05 F1 | 	add	fp, #8
114b8     A7 38 68 FC | 	wrlong	#28, fp
114bc     2C 4E 05 F1 | 	add	fp, #44
114c0     A7 12 02 FB | 	rdlong	arg01, fp
114c4     34 4E 85 F1 | 	sub	fp, #52
114c8     30 B6 B0 FD | 	call	#_pslpeek
114cc     A7 FA 61 FC | 	wrlong	result1, fp
114d0     AC 00 90 FD | 	jmp	#LR__1381
114d4                 | LR__1375
114d4     08 4E 05 F1 | 	add	fp, #8
114d8     A7 3A 68 FC | 	wrlong	#29, fp
114dc     2C 4E 05 F1 | 	add	fp, #44
114e0     A7 12 02 FB | 	rdlong	arg01, fp
114e4     34 4E 85 F1 | 	sub	fp, #52
114e8     10 B6 B0 FD | 	call	#_pslpeek
114ec     A7 FA 61 FC | 	wrlong	result1, fp
114f0     8C 00 90 FD | 	jmp	#LR__1381
114f4                 | LR__1376
114f4     08 4E 05 F1 | 	add	fp, #8
114f8     A7 FE 69 FC | 	wrlong	#255, fp
114fc     08 4E 85 F1 | 	sub	fp, #8
11500     A7 60 68 FC | 	wrlong	#48, fp
11504     78 00 90 FD | 	jmp	#LR__1381
11508                 | LR__1377
11508     08 4E 05 F1 | 	add	fp, #8
1150c     A7 FE 69 FC | 	wrlong	#255, fp
11510     08 4E 85 F1 | 	sub	fp, #8
11514     A7 60 68 FC | 	wrlong	#48, fp
11518     64 00 90 FD | 	jmp	#LR__1381
1151c                 | LR__1378
1151c     08 4E 05 F1 | 	add	fp, #8
11520     A7 3C 68 FC | 	wrlong	#30, fp
11524     2C 4E 05 F1 | 	add	fp, #44
11528     A7 12 02 FB | 	rdlong	arg01, fp
1152c     34 4E 85 F1 | 	sub	fp, #52
11530     C8 B5 B0 FD | 	call	#_pslpeek
11534     A7 FA 61 FC | 	wrlong	result1, fp
11538     44 00 90 FD | 	jmp	#LR__1381
1153c                 | LR__1379
1153c     08 4E 05 F1 | 	add	fp, #8
11540     A7 FE 69 FC | 	wrlong	#255, fp
11544     08 4E 85 F1 | 	sub	fp, #8
11548     A7 60 68 FC | 	wrlong	#48, fp
1154c     30 00 90 FD | 	jmp	#LR__1381
11550                 | LR__1380
11550     08 4E 05 F1 | 	add	fp, #8
11554     A7 3E 68 FC | 	wrlong	#31, fp
11558     2C 4E 05 F1 | 	add	fp, #44
1155c     A7 12 02 FB | 	rdlong	arg01, fp
11560     34 4E 85 F1 | 	sub	fp, #52
11564     94 B5 B0 FD | 	call	#_pslpeek
11568     A7 FA 61 FC | 	wrlong	result1, fp
1156c     00 04 00 FF 
11570     00 FA 15 F2 | 	cmp	result1, ##524288 wc
11574     08 4E 05 31 |  if_ae	add	fp, #8
11578     A7 56 68 3C |  if_ae	wrlong	#43, fp
1157c     08 4E 85 31 |  if_ae	sub	fp, #8
11580                 | LR__1381
11580     A7 12 02 F6 | 	mov	arg01, fp
11584     D4 9B BF FD | 	call	#_push
11588                 | LR__1382
11588     A7 F0 03 F6 | 	mov	ptra, fp
1158c     B2 00 A0 FD | 	call	#popregs_
11590                 | _do_getvar_ret
11590     2D 00 64 FD | 	ret
11594                 | 
11594                 | ' 
11594                 | ' 
11594                 | ' sub do_getaddr
11594                 | _do_getaddr
11594     01 4A 05 F6 | 	mov	COUNT_, #1
11598     A8 00 A0 FD | 	call	#pushregs_
1159c     38 F0 07 F1 | 	add	ptra, #56
115a0                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
115a0                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
115a0     4A 00 00 FF 
115a4     B0 E4 05 F1 | 	add	objptr, ##38064
115a8     F2 12 02 FB | 	rdlong	arg01, objptr
115ac     09 FD 01 F6 | 	mov	result2, arg01
115b0     01 FC 65 F0 | 	shl	result2, #1
115b4     09 FD 01 F1 | 	add	result2, arg01
115b8     02 FC 65 F0 | 	shl	result2, #2
115bc     03 00 00 FF 
115c0     04 E4 85 F1 | 	sub	objptr, ##1540
115c4     F2 FC 01 F1 | 	add	result2, objptr
115c8     04 FC 05 F1 | 	add	result2, #4
115cc     FE FC 09 FB | 	rdlong	result2, result2 wz
115d0     47 00 00 FF 
115d4     AC E4 85 F1 | 	sub	objptr, ##36524
115d8     C4 00 90 5D |  if_ne	jmp	#LR__1390
115dc     4A 00 00 FF 
115e0     B0 E4 05 F1 | 	add	objptr, ##38064
115e4     F2 12 02 FB | 	rdlong	arg01, objptr
115e8     09 FD 01 F6 | 	mov	result2, arg01
115ec     01 FC 65 F0 | 	shl	result2, #1
115f0     09 FD 01 F1 | 	add	result2, arg01
115f4     02 FC 65 F0 | 	shl	result2, #2
115f8     03 00 00 FF 
115fc     04 E4 85 F1 | 	sub	objptr, ##1540
11600     F2 FC 01 F1 | 	add	result2, objptr
11604     FE 12 02 FB | 	rdlong	arg01, result2
11608     04 12 66 F0 | 	shl	arg01, #4
1160c     32 00 00 FF 
11610     84 E4 85 F1 | 	sub	objptr, ##25732
11614     F2 12 02 F1 | 	add	arg01, objptr
11618     0C 12 06 F1 | 	add	arg01, #12
1161c     09 13 02 FB | 	rdlong	arg01, arg01
11620     08 4E 05 F1 | 	add	fp, #8
11624     A7 12 62 FC | 	wrlong	arg01, fp
11628                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
11628                 | '    if t1.result_type>=array_no_type then goto 2200
11628     08 4E 85 F1 | 	sub	fp, #8
1162c     00 13 16 F2 | 	cmp	arg01, #256 wc
11630     15 00 00 FF 
11634     28 E4 85 F1 | 	sub	objptr, ##10792
11638     64 00 90 3D |  if_ae	jmp	#LR__1391
1163c     4A 00 00 FF 
11640     B0 E4 05 F1 | 	add	objptr, ##38064
11644     F2 12 02 FB | 	rdlong	arg01, objptr
11648     09 FB 01 F6 | 	mov	result1, arg01
1164c     01 FA 65 F0 | 	shl	result1, #1
11650     09 FB 01 F1 | 	add	result1, arg01
11654     02 FA 65 F0 | 	shl	result1, #2
11658     03 00 00 FF 
1165c     04 E4 85 F1 | 	sub	objptr, ##1540
11660     F2 FA 01 F1 | 	add	result1, objptr
11664     FD FA 01 FB | 	rdlong	result1, result1
11668     04 FA 65 F0 | 	shl	result1, #4
1166c     32 00 00 FF 
11670     84 E4 85 F1 | 	sub	objptr, ##25732
11674     F2 FA 01 F1 | 	add	result1, objptr
11678     04 FA 05 F1 | 	add	result1, #4
1167c     15 00 00 FF 
11680     28 E4 85 F1 | 	sub	objptr, ##10792
11684     A7 FA 61 FC | 	wrlong	result1, fp
11688     08 4E 05 F1 | 	add	fp, #8
1168c     A7 3A 68 FC | 	wrlong	#29, fp
11690     08 4E 85 F1 | 	sub	fp, #8
11694     A7 12 02 F6 | 	mov	arg01, fp
11698     C0 9A BF FD | 	call	#_push
1169c                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1169c                 | '   t1.result_type=result_uint
1169c                 | '   push t1 : return
1169c     D8 02 90 FD | 	jmp	#LR__1400
116a0                 | LR__1390
116a0                 | LR__1391
116a0     4A 00 00 FF 
116a4     B0 E4 05 F1 | 	add	objptr, ##38064
116a8     F2 FE 01 FB | 	rdlong	result3, objptr
116ac     FF 12 02 F6 | 	mov	arg01, result3
116b0     01 12 66 F0 | 	shl	arg01, #1
116b4     FF 12 02 F1 | 	add	arg01, result3
116b8     02 12 66 F0 | 	shl	arg01, #2
116bc     03 00 00 FF 
116c0     04 E4 85 F1 | 	sub	objptr, ##1540
116c4     F2 12 02 F1 | 	add	arg01, objptr
116c8     09 13 02 FB | 	rdlong	arg01, arg01
116cc     04 12 66 F0 | 	shl	arg01, #4
116d0     32 00 00 FF 
116d4     84 E4 85 F1 | 	sub	objptr, ##25732
116d8     F2 12 02 F1 | 	add	arg01, objptr
116dc     04 12 06 F1 | 	add	arg01, #4
116e0     09 13 02 FB | 	rdlong	arg01, arg01
116e4     0C 4E 05 F1 | 	add	fp, #12
116e8     A7 12 62 FC | 	wrlong	arg01, fp
116ec     0C 4E 85 F1 | 	sub	fp, #12
116f0     15 00 00 FF 
116f4     28 E4 85 F1 | 	sub	objptr, ##10792
116f8     00 B4 B0 FD | 	call	#_pslpeek
116fc     FD FA 31 F9 | 	getword	result1, result1, #0
11700     10 4E 05 F1 | 	add	fp, #16
11704     A7 FA 61 FC | 	wrlong	result1, fp
11708     4A 00 00 FF 
1170c     B0 E4 05 F1 | 	add	objptr, ##38064
11710     F2 FE 01 FB | 	rdlong	result3, objptr
11714     FF 12 02 F6 | 	mov	arg01, result3
11718     01 12 66 F0 | 	shl	arg01, #1
1171c     FF 12 02 F1 | 	add	arg01, result3
11720     02 12 66 F0 | 	shl	arg01, #2
11724     03 00 00 FF 
11728     04 E4 85 F1 | 	sub	objptr, ##1540
1172c     F2 12 02 F1 | 	add	arg01, objptr
11730     04 12 06 F1 | 	add	arg01, #4
11734     09 13 02 FB | 	rdlong	arg01, arg01
11738     04 4E 05 F1 | 	add	fp, #4
1173c     A7 12 62 FC | 	wrlong	arg01, fp
11740     08 4E 85 F1 | 	sub	fp, #8
11744     A7 12 02 FB | 	rdlong	arg01, fp
11748     0C 4E 85 F1 | 	sub	fp, #12
1174c     02 12 06 F1 | 	add	arg01, #2
11750     47 00 00 FF 
11754     AC E4 85 F1 | 	sub	objptr, ##36524
11758     48 B3 B0 FD | 	call	#_pspeek
1175c     FD FA E1 F8 | 	getbyte	result1, result1, #0
11760     18 4E 05 F1 | 	add	fp, #24
11764     A7 FA 61 FC | 	wrlong	result1, fp
11768     0C 4E 85 F1 | 	sub	fp, #12
1176c     A7 12 02 FB | 	rdlong	arg01, fp
11770     0C 4E 85 F1 | 	sub	fp, #12
11774     04 12 06 F1 | 	add	arg01, #4
11778     80 B3 B0 FD | 	call	#_pslpeek
1177c     1C 4E 05 F1 | 	add	fp, #28
11780     A7 FA 61 FC | 	wrlong	result1, fp
11784     10 4E 85 F1 | 	sub	fp, #16
11788     A7 12 02 FB | 	rdlong	arg01, fp
1178c     0C 4E 85 F1 | 	sub	fp, #12
11790     08 12 06 F1 | 	add	arg01, #8
11794     64 B3 B0 FD | 	call	#_pslpeek
11798     20 4E 05 F1 | 	add	fp, #32
1179c     A7 FA 61 FC | 	wrlong	result1, fp
117a0     14 4E 85 F1 | 	sub	fp, #20
117a4     A7 12 02 FB | 	rdlong	arg01, fp
117a8     0C 4E 85 F1 | 	sub	fp, #12
117ac     0C 12 06 F1 | 	add	arg01, #12
117b0     48 B3 B0 FD | 	call	#_pslpeek
117b4     24 4E 05 F1 | 	add	fp, #36
117b8     A7 FA 61 FC | 	wrlong	result1, fp
117bc                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
117bc                 | ' esize=pspeek(arrptr+2)
117bc                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
117bc                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
117bc                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
117bc                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
117bc     10 4E 85 F1 | 	sub	fp, #16
117c0     A7 12 02 FB | 	rdlong	arg01, fp
117c4     14 4E 85 F1 | 	sub	fp, #20
117c8     03 12 16 F2 | 	cmp	arg01, #3 wc
117cc     34 00 90 CD |  if_b	jmp	#LR__1392
117d0     F0 98 BF FD | 	call	#_pop
117d4     A7 FA 61 FC | 	wrlong	result1, fp
117d8     04 4E 05 F1 | 	add	fp, #4
117dc     A7 FC 61 FC | 	wrlong	result2, fp
117e0     04 4E 05 F1 | 	add	fp, #4
117e4     A7 FE 61 FC | 	wrlong	result3, fp
117e8     08 4E 85 F1 | 	sub	fp, #8
117ec     A7 12 02 F6 | 	mov	arg01, fp
117f0     A0 39 B0 FD | 	call	#_converttoint
117f4     30 4E 05 F1 | 	add	fp, #48
117f8     A7 FA 61 FC | 	wrlong	result1, fp
117fc     30 4E 85 F1 | 	sub	fp, #48
11800     0C 00 90 FD | 	jmp	#LR__1393
11804                 | LR__1392
11804     30 4E 05 F1 | 	add	fp, #48
11808     A7 00 68 FC | 	wrlong	#0, fp
1180c     30 4E 85 F1 | 	sub	fp, #48
11810                 | LR__1393
11810                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
11810     14 4E 05 F1 | 	add	fp, #20
11814     A7 12 02 FB | 	rdlong	arg01, fp
11818     14 4E 85 F1 | 	sub	fp, #20
1181c     02 12 16 F2 | 	cmp	arg01, #2 wc
11820     34 00 90 CD |  if_b	jmp	#LR__1394
11824     9C 98 BF FD | 	call	#_pop
11828     A7 FA 61 FC | 	wrlong	result1, fp
1182c     04 4E 05 F1 | 	add	fp, #4
11830     A7 FC 61 FC | 	wrlong	result2, fp
11834     04 4E 05 F1 | 	add	fp, #4
11838     A7 FE 61 FC | 	wrlong	result3, fp
1183c     08 4E 85 F1 | 	sub	fp, #8
11840     A7 12 02 F6 | 	mov	arg01, fp
11844     4C 39 B0 FD | 	call	#_converttoint
11848     2C 4E 05 F1 | 	add	fp, #44
1184c     A7 FA 61 FC | 	wrlong	result1, fp
11850     2C 4E 85 F1 | 	sub	fp, #44
11854     0C 00 90 FD | 	jmp	#LR__1395
11858                 | LR__1394
11858     2C 4E 05 F1 | 	add	fp, #44
1185c     A7 00 68 FC | 	wrlong	#0, fp
11860     2C 4E 85 F1 | 	sub	fp, #44
11864                 | LR__1395
11864                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
11864     14 4E 05 F1 | 	add	fp, #20
11868     A7 12 02 FB | 	rdlong	arg01, fp
1186c     14 4E 85 F1 | 	sub	fp, #20
11870     01 12 16 F2 | 	cmp	arg01, #1 wc
11874     34 00 90 CD |  if_b	jmp	#LR__1396
11878     48 98 BF FD | 	call	#_pop
1187c     A7 FA 61 FC | 	wrlong	result1, fp
11880     04 4E 05 F1 | 	add	fp, #4
11884     A7 FC 61 FC | 	wrlong	result2, fp
11888     04 4E 05 F1 | 	add	fp, #4
1188c     A7 FE 61 FC | 	wrlong	result3, fp
11890     08 4E 85 F1 | 	sub	fp, #8
11894     A7 12 02 F6 | 	mov	arg01, fp
11898     F8 38 B0 FD | 	call	#_converttoint
1189c     28 4E 05 F1 | 	add	fp, #40
118a0     A7 FA 61 FC | 	wrlong	result1, fp
118a4     28 4E 85 F1 | 	sub	fp, #40
118a8     0C 00 90 FD | 	jmp	#LR__1397
118ac                 | LR__1396
118ac     28 4E 05 F1 | 	add	fp, #40
118b0     A7 00 68 FC | 	wrlong	#0, fp
118b4     28 4E 85 F1 | 	sub	fp, #40
118b8                 | LR__1397
118b8                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
118b8                 | ' if numpar>0 then
118b8     14 4E 05 F1 | 	add	fp, #20
118bc     A7 FE 01 FB | 	rdlong	result3, fp
118c0     14 4E 85 F1 | 	sub	fp, #20
118c4     01 FE 15 F2 | 	cmp	result3, #1 wc
118c8     8C 00 90 CD |  if_b	jmp	#LR__1398
118cc     0C 4E 05 F1 | 	add	fp, #12
118d0     A7 FC 01 FB | 	rdlong	result2, fp
118d4     1C 4E 05 F1 | 	add	fp, #28
118d8     A7 FE 01 FB | 	rdlong	result3, fp
118dc     04 4E 05 F1 | 	add	fp, #4
118e0     A7 12 02 FB | 	rdlong	arg01, fp
118e4     10 4E 85 F1 | 	sub	fp, #16
118e8     A7 FA 01 FB | 	rdlong	result1, fp
118ec     FD 12 02 FD | 	qmul	arg01, result1
118f0     10 FC 05 F1 | 	add	result2, #16
118f4     14 4E 05 F1 | 	add	fp, #20
118f8     A7 1E 02 FB | 	rdlong	local01, fp
118fc     18 12 62 FD | 	getqx	arg01
11900     FD 1E 02 FD | 	qmul	local01, result1
11904     09 FF 01 F1 | 	add	result3, arg01
11908     10 4E 85 F1 | 	sub	fp, #16
1190c     A7 1E 02 FB | 	rdlong	local01, fp
11910     18 FA 61 FD | 	getqx	result1
11914     0F FB 01 FD | 	qmul	result1, local01
11918     08 4E 85 F1 | 	sub	fp, #8
1191c     A7 1E 02 FB | 	rdlong	local01, fp
11920     18 FA 61 FD | 	getqx	result1
11924     FD FE 01 F1 | 	add	result3, result1
11928     0F FF 01 FD | 	qmul	result3, local01
1192c     1C 4E 05 F1 | 	add	fp, #28
11930     18 1E 62 FD | 	getqx	local01
11934     0F FD 01 F1 | 	add	result2, local01
11938     A7 FC 61 FC | 	wrlong	result2, fp
1193c     2C 4E 85 F1 | 	sub	fp, #44
11940     A7 3A 68 FC | 	wrlong	#29, fp
11944     2C 4E 05 F1 | 	add	fp, #44
11948     A7 1E 02 FB | 	rdlong	local01, fp
1194c     34 4E 85 F1 | 	sub	fp, #52
11950     A7 1E 62 FC | 	wrlong	local01, fp
11954     18 00 90 FD | 	jmp	#LR__1399
11958                 | LR__1398
11958     08 4E 05 F1 | 	add	fp, #8
1195c     A7 3A 68 FC | 	wrlong	#29, fp
11960     04 4E 05 F1 | 	add	fp, #4
11964     A7 1E 02 FB | 	rdlong	local01, fp
11968     0C 4E 85 F1 | 	sub	fp, #12
1196c     A7 1E 62 FC | 	wrlong	local01, fp
11970                 | LR__1399
11970     A7 12 02 F6 | 	mov	arg01, fp
11974     E4 97 BF FD | 	call	#_push
11978                 | LR__1400
11978     A7 F0 03 F6 | 	mov	ptra, fp
1197c     B2 00 A0 FD | 	call	#popregs_
11980                 | _do_getaddr_ret
11980     2D 00 64 FD | 	ret
11984                 | 
11984                 | ' 
11984                 | ' 
11984                 | ' sub do_inkey
11984                 | _do_inkey
11984     02 4A 05 F6 | 	mov	COUNT_, #2
11988     A8 00 A0 FD | 	call	#pushregs_
1198c     0C F0 07 F1 | 	add	ptra, #12
11990     68 EB B0 FD | 	call	#_usbnew_spin2_get_key
11994     45 00 00 FF 
11998     A4 E4 05 F1 | 	add	objptr, ##35492
1199c     F2 FA 61 FC | 	wrlong	result1, objptr
119a0                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
119a0     45 00 00 FF 
119a4     A4 E4 85 F1 | 	sub	objptr, ##35492
119a8     00 FA 0D F2 | 	cmp	result1, #0 wz
119ac     94 00 90 AD |  if_e	jmp	#LR__1411
119b0     45 00 00 FF 
119b4     A4 E4 05 F1 | 	add	objptr, ##35492
119b8     F2 1C 02 FB | 	rdlong	arg06, objptr
119bc     45 00 00 FF 
119c0     A4 E4 85 F1 | 	sub	objptr, ##35492
119c4     00 00 40 FF 
119c8     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
119cc     45 00 00 CF 
119d0     A4 E4 05 C1 |  if_b	add	objptr, ##35492
119d4     F2 1E 02 CB |  if_b	rdlong	local01, objptr
119d8     45 00 00 CF 
119dc     A4 E4 85 C1 |  if_b	sub	objptr, ##35492
119e0     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
119e4     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
119e8     58 00 90 3D |  if_ae	jmp	#LR__1411
119ec                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
119ec     58 00 00 FF 
119f0     48 E5 05 F1 | 	add	objptr, ##45384
119f4     F2 1C 02 FB | 	rdlong	arg06, objptr
119f8     58 00 00 FF 
119fc     48 E5 85 F1 | 	sub	objptr, ##45384
11a00     01 1C 0E F2 | 	cmp	arg06, #1 wz
11a04     3C 00 90 5D |  if_ne	jmp	#LR__1410
11a08     59 00 00 FF 
11a0c     EC E5 05 F1 | 	add	objptr, ##46060
11a10     F2 14 02 FB | 	rdlong	arg02, objptr
11a14     04 E4 85 F1 | 	sub	objptr, #4
11a18     F2 1A 02 FB | 	rdlong	arg05, objptr
11a1c     07 12 06 F6 | 	mov	arg01, #7
11a20     56 00 00 FF 
11a24     44 16 06 F6 | 	mov	arg03, ##44100
11a28     0C 18 C6 F9 | 	decod	arg04, #12
11a2c     01 1C 66 F6 | 	neg	arg06, #1
11a30     4E 00 00 FF 
11a34     1C E5 85 F1 | 	sub	objptr, ##40220
11a38     64 EE B0 FD | 	call	#_audio096_spin2_play
11a3c     0B 00 00 FF 
11a40     CC E4 85 F1 | 	sub	objptr, ##5836
11a44                 | LR__1410
11a44                 | LR__1411
11a44                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
11a44     45 00 00 FF 
11a48     A4 E4 05 F1 | 	add	objptr, ##35492
11a4c     F2 1C 0A FB | 	rdlong	arg06, objptr wz
11a50     45 00 00 FF 
11a54     A4 E4 85 F1 | 	sub	objptr, ##35492
11a58     D4 01 90 AD |  if_e	jmp	#LR__1420
11a5c     45 00 00 FF 
11a60     A4 E4 05 F1 | 	add	objptr, ##35492
11a64     F2 1C 02 FB | 	rdlong	arg06, objptr
11a68     45 00 00 FF 
11a6c     A4 E4 85 F1 | 	sub	objptr, ##35492
11a70     00 00 40 FF 
11a74     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
11a78     45 00 00 CF 
11a7c     A4 E4 05 C1 |  if_b	add	objptr, ##35492
11a80     F2 1E 02 CB |  if_b	rdlong	local01, objptr
11a84     45 00 00 CF 
11a88     A4 E4 85 C1 |  if_b	sub	objptr, ##35492
11a8c     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
11a90     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
11a94     98 01 90 3D |  if_ae	jmp	#LR__1420
11a98                 | '   if leds and 2 = 2 then 
11a98     5A 00 00 FF 
11a9c     14 E4 05 F1 | 	add	objptr, ##46100
11aa0     F2 1E 0A FB | 	rdlong	local01, objptr wz
11aa4     5A 00 00 FF 
11aa8     14 E4 85 F1 | 	sub	objptr, ##46100
11aac     58 01 90 AD |  if_e	jmp	#LR__1419
11ab0                 | '     if key>96 andalso key<123 then
11ab0     45 00 00 FF 
11ab4     A4 E4 05 F1 | 	add	objptr, ##35492
11ab8     F2 1E 02 FB | 	rdlong	local01, objptr
11abc     45 00 00 FF 
11ac0     A4 E4 85 F1 | 	sub	objptr, ##35492
11ac4     61 1E 16 F2 | 	cmp	local01, #97 wc
11ac8     3C 00 90 CD |  if_b	jmp	#LR__1412
11acc     45 00 00 FF 
11ad0     A4 E4 05 F1 | 	add	objptr, ##35492
11ad4     F2 1E 02 FB | 	rdlong	local01, objptr
11ad8     45 00 00 FF 
11adc     A4 E4 85 F1 | 	sub	objptr, ##35492
11ae0     7B 1E 16 F2 | 	cmp	local01, #123 wc
11ae4     20 00 90 3D |  if_ae	jmp	#LR__1412
11ae8     45 00 00 FF 
11aec     A4 E4 05 F1 | 	add	objptr, ##35492
11af0     F2 1E 02 FB | 	rdlong	local01, objptr
11af4     20 1E 86 F1 | 	sub	local01, #32
11af8     F2 1E 62 FC | 	wrlong	local01, objptr
11afc     45 00 00 FF 
11b00     A4 E4 85 F1 | 	sub	objptr, ##35492
11b04     00 01 90 FD | 	jmp	#LR__1418
11b08                 | LR__1412
11b08     45 00 00 FF 
11b0c     A4 E4 05 F1 | 	add	objptr, ##35492
11b10     F2 1E 02 FB | 	rdlong	local01, objptr
11b14     45 00 00 FF 
11b18     A4 E4 85 F1 | 	sub	objptr, ##35492
11b1c     41 1E 16 F2 | 	cmp	local01, #65 wc
11b20     3C 00 90 CD |  if_b	jmp	#LR__1413
11b24     45 00 00 FF 
11b28     A4 E4 05 F1 | 	add	objptr, ##35492
11b2c     F2 1E 02 FB | 	rdlong	local01, objptr
11b30     45 00 00 FF 
11b34     A4 E4 85 F1 | 	sub	objptr, ##35492
11b38     5B 1E 16 F2 | 	cmp	local01, #91 wc
11b3c     20 00 90 3D |  if_ae	jmp	#LR__1413
11b40     45 00 00 FF 
11b44     A4 E4 05 F1 | 	add	objptr, ##35492
11b48     F2 1E 02 FB | 	rdlong	local01, objptr
11b4c     20 1E 06 F1 | 	add	local01, #32
11b50     F2 1E 62 FC | 	wrlong	local01, objptr
11b54     45 00 00 FF 
11b58     A4 E4 85 F1 | 	sub	objptr, ##35492
11b5c     A8 00 90 FD | 	jmp	#LR__1417
11b60                 | LR__1413
11b60     45 00 00 FF 
11b64     A4 E4 05 F1 | 	add	objptr, ##35492
11b68     F2 1E 02 FB | 	rdlong	local01, objptr
11b6c     45 00 00 FF 
11b70     A4 E4 85 F1 | 	sub	objptr, ##35492
11b74     17 1E 16 F2 | 	cmp	local01, #23 wc
11b78     3C 00 90 CD |  if_b	jmp	#LR__1414
11b7c     45 00 00 FF 
11b80     A4 E4 05 F1 | 	add	objptr, ##35492
11b84     F2 1E 02 FB | 	rdlong	local01, objptr
11b88     45 00 00 FF 
11b8c     A4 E4 85 F1 | 	sub	objptr, ##35492
11b90     20 1E 16 F2 | 	cmp	local01, #32 wc
11b94     20 00 90 3D |  if_ae	jmp	#LR__1414
11b98     45 00 00 FF 
11b9c     A4 E4 05 F1 | 	add	objptr, ##35492
11ba0     F2 1E 02 FB | 	rdlong	local01, objptr
11ba4     09 1E 86 F1 | 	sub	local01, #9
11ba8     F2 1E 62 FC | 	wrlong	local01, objptr
11bac     45 00 00 FF 
11bb0     A4 E4 85 F1 | 	sub	objptr, ##35492
11bb4     50 00 90 FD | 	jmp	#LR__1416
11bb8                 | LR__1414
11bb8     45 00 00 FF 
11bbc     A4 E4 05 F1 | 	add	objptr, ##35492
11bc0     F2 20 02 FB | 	rdlong	local02, objptr
11bc4     45 00 00 FF 
11bc8     A4 E4 85 F1 | 	sub	objptr, ##35492
11bcc     0E 20 16 F2 | 	cmp	local02, #14 wc
11bd0     34 00 90 CD |  if_b	jmp	#LR__1415
11bd4     45 00 00 FF 
11bd8     A4 E4 05 F1 | 	add	objptr, ##35492
11bdc     F2 1E 02 FB | 	rdlong	local01, objptr
11be0     45 00 00 FF 
11be4     A4 E4 85 F1 | 	sub	objptr, ##35492
11be8     17 1E 16 F2 | 	cmp	local01, #23 wc
11bec     5A 00 00 CF 
11bf0     24 E4 05 C1 |  if_b	add	objptr, ##46116
11bf4     F2 20 02 CB |  if_b	rdlong	local02, objptr
11bf8     27 20 06 C1 |  if_b	add	local02, #39
11bfc     F2 20 62 CC |  if_b	wrlong	local02, objptr
11c00     5A 00 00 CF 
11c04     24 E4 85 C1 |  if_b	sub	objptr, ##46116
11c08                 | LR__1415
11c08                 | LR__1416
11c08                 | LR__1417
11c08                 | LR__1418
11c08                 | LR__1419
11c08     45 00 00 FF 
11c0c     A4 E4 05 F1 | 	add	objptr, ##35492
11c10     F2 12 02 FB | 	rdlong	arg01, objptr
11c14     45 00 00 FF 
11c18     A4 E4 85 F1 | 	sub	objptr, ##35492
11c1c     8C AF B0 FD | 	call	#_scantochar
11c20     FD 12 02 F6 | 	mov	arg01, result1
11c24     28 13 B1 FD | 	call	#__system__Chr_S
11c28     A7 FA 61 FC | 	wrlong	result1, fp
11c2c     0C 00 90 FD | 	jmp	#LR__1421
11c30                 | LR__1420
11c30     86 01 00 FF 
11c34     F8 20 06 F6 | 	mov	local02, ##@LR__5401
11c38     A7 20 62 FC | 	wrlong	local02, fp
11c3c                 | LR__1421
11c3c     08 4E 05 F1 | 	add	fp, #8
11c40     A7 3E 68 FC | 	wrlong	#31, fp
11c44     08 4E 85 F1 | 	sub	fp, #8
11c48     A7 12 02 F6 | 	mov	arg01, fp
11c4c     0C 95 BF FD | 	call	#_push
11c50     A7 F0 03 F6 | 	mov	ptra, fp
11c54     B2 00 A0 FD | 	call	#popregs_
11c58                 | _do_inkey_ret
11c58     2D 00 64 FD | 	ret
11c5c                 | 
11c5c                 | '  
11c5c                 | ' '------------------------ Operators 
11c5c                 | ' 
11c5c                 | ' sub do_plus 
11c5c                 | _do_plus
11c5c     05 4A 05 F6 | 	mov	COUNT_, #5
11c60     A8 00 A0 FD | 	call	#pushregs_
11c64     18 F0 07 F1 | 	add	ptra, #24
11c68     58 94 BF FD | 	call	#_pop
11c6c     FD 1E 02 F6 | 	mov	local01, result1
11c70     FE 20 02 F6 | 	mov	local02, result2
11c74     FF 22 02 F6 | 	mov	local03, result3
11c78     0C 4E 05 F1 | 	add	fp, #12
11c7c     A7 1E 62 FC | 	wrlong	local01, fp
11c80     04 4E 05 F1 | 	add	fp, #4
11c84     A7 20 62 FC | 	wrlong	local02, fp
11c88     04 4E 05 F1 | 	add	fp, #4
11c8c     A7 22 62 FC | 	wrlong	local03, fp
11c90     14 4E 85 F1 | 	sub	fp, #20
11c94     2C 94 BF FD | 	call	#_pop
11c98     FF 22 02 F6 | 	mov	local03, result3
11c9c     A7 FA 61 FC | 	wrlong	result1, fp
11ca0     04 4E 05 F1 | 	add	fp, #4
11ca4     A7 FC 61 FC | 	wrlong	result2, fp
11ca8     04 4E 05 F1 | 	add	fp, #4
11cac     A7 22 62 FC | 	wrlong	local03, fp
11cb0                 | ' 
11cb0                 | ' t2=pop()
11cb0                 | ' t1=pop()
11cb0                 | ' 
11cb0                 | ' 
11cb0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
11cb0     08 4E 85 F1 | 	sub	fp, #8
11cb4     1D 22 0E F2 | 	cmp	local03, #29 wz
11cb8     14 4E 05 A1 |  if_e	add	fp, #20
11cbc     A7 24 02 AB |  if_e	rdlong	local04, fp
11cc0     14 4E 85 A1 |  if_e	sub	fp, #20
11cc4     12 23 02 A6 |  if_e	mov	local03, local04
11cc8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11ccc     1C 00 90 5D |  if_ne	jmp	#LR__1430
11cd0     A7 1E 02 FB | 	rdlong	local01, fp
11cd4     0C 4E 05 F1 | 	add	fp, #12
11cd8     A7 20 02 FB | 	rdlong	local02, fp
11cdc     0C 4E 85 F1 | 	sub	fp, #12
11ce0     10 1F 02 F1 | 	add	local01, local02
11ce4     A7 1E 62 FC | 	wrlong	local01, fp
11ce8     48 04 90 FD | 	jmp	#LR__1445
11cec                 | LR__1430
11cec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
11cec     08 4E 05 F1 | 	add	fp, #8
11cf0     A7 1E 02 FB | 	rdlong	local01, fp
11cf4     08 4E 85 F1 | 	sub	fp, #8
11cf8     1D 1E 0E F2 | 	cmp	local01, #29 wz
11cfc     14 4E 05 A1 |  if_e	add	fp, #20
11d00     A7 24 02 AB |  if_e	rdlong	local04, fp
11d04     14 4E 85 A1 |  if_e	sub	fp, #20
11d08     12 23 02 A6 |  if_e	mov	local03, local04
11d0c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11d10     28 00 90 5D |  if_ne	jmp	#LR__1431
11d14     A7 1E 02 FB | 	rdlong	local01, fp
11d18     0C 4E 05 F1 | 	add	fp, #12
11d1c     A7 20 02 FB | 	rdlong	local02, fp
11d20     0C 4E 85 F1 | 	sub	fp, #12
11d24     10 1F 02 F1 | 	add	local01, local02
11d28     A7 1E 62 FC | 	wrlong	local01, fp
11d2c     08 4E 05 F1 | 	add	fp, #8
11d30     A7 38 68 FC | 	wrlong	#28, fp
11d34     08 4E 85 F1 | 	sub	fp, #8
11d38     F8 03 90 FD | 	jmp	#LR__1445
11d3c                 | LR__1431
11d3c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
11d3c     08 4E 05 F1 | 	add	fp, #8
11d40     A7 1E 02 FB | 	rdlong	local01, fp
11d44     08 4E 85 F1 | 	sub	fp, #8
11d48     1D 1E 0E F2 | 	cmp	local01, #29 wz
11d4c     14 4E 05 A1 |  if_e	add	fp, #20
11d50     A7 24 02 AB |  if_e	rdlong	local04, fp
11d54     14 4E 85 A1 |  if_e	sub	fp, #20
11d58     12 23 02 A6 |  if_e	mov	local03, local04
11d5c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11d60     30 00 90 5D |  if_ne	jmp	#LR__1432
11d64     A7 12 02 FB | 	rdlong	arg01, fp
11d68     54 17 B1 FD | 	call	#__system___float_fromuns
11d6c     FD 12 02 F6 | 	mov	arg01, result1
11d70     0C 4E 05 F1 | 	add	fp, #12
11d74     A7 14 02 FB | 	rdlong	arg02, fp
11d78     0C 4E 85 F1 | 	sub	fp, #12
11d7c     74 17 B1 FD | 	call	#__system___float_add
11d80     A7 FA 61 FC | 	wrlong	result1, fp
11d84     08 4E 05 F1 | 	add	fp, #8
11d88     A7 3C 68 FC | 	wrlong	#30, fp
11d8c     08 4E 85 F1 | 	sub	fp, #8
11d90     A0 03 90 FD | 	jmp	#LR__1445
11d94                 | LR__1432
11d94                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
11d94     08 4E 05 F1 | 	add	fp, #8
11d98     A7 1E 02 FB | 	rdlong	local01, fp
11d9c     08 4E 85 F1 | 	sub	fp, #8
11da0     1C 1E 0E F2 | 	cmp	local01, #28 wz
11da4     14 4E 05 A1 |  if_e	add	fp, #20
11da8     A7 24 02 AB |  if_e	rdlong	local04, fp
11dac     14 4E 85 A1 |  if_e	sub	fp, #20
11db0     12 23 02 A6 |  if_e	mov	local03, local04
11db4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11db8     1C 00 90 5D |  if_ne	jmp	#LR__1433
11dbc     A7 1E 02 FB | 	rdlong	local01, fp
11dc0     0C 4E 05 F1 | 	add	fp, #12
11dc4     A7 20 02 FB | 	rdlong	local02, fp
11dc8     0C 4E 85 F1 | 	sub	fp, #12
11dcc     10 1F 02 F1 | 	add	local01, local02
11dd0     A7 1E 62 FC | 	wrlong	local01, fp
11dd4     5C 03 90 FD | 	jmp	#LR__1445
11dd8                 | LR__1433
11dd8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
11dd8     08 4E 05 F1 | 	add	fp, #8
11ddc     A7 1E 02 FB | 	rdlong	local01, fp
11de0     08 4E 85 F1 | 	sub	fp, #8
11de4     1C 1E 0E F2 | 	cmp	local01, #28 wz
11de8     14 4E 05 A1 |  if_e	add	fp, #20
11dec     A7 24 02 AB |  if_e	rdlong	local04, fp
11df0     14 4E 85 A1 |  if_e	sub	fp, #20
11df4     12 23 02 A6 |  if_e	mov	local03, local04
11df8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11dfc     1C 00 90 5D |  if_ne	jmp	#LR__1434
11e00     A7 1E 02 FB | 	rdlong	local01, fp
11e04     0C 4E 05 F1 | 	add	fp, #12
11e08     A7 20 02 FB | 	rdlong	local02, fp
11e0c     0C 4E 85 F1 | 	sub	fp, #12
11e10     10 1F 02 F1 | 	add	local01, local02
11e14     A7 1E 62 FC | 	wrlong	local01, fp
11e18     18 03 90 FD | 	jmp	#LR__1445
11e1c                 | LR__1434
11e1c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
11e1c     08 4E 05 F1 | 	add	fp, #8
11e20     A7 1E 02 FB | 	rdlong	local01, fp
11e24     08 4E 85 F1 | 	sub	fp, #8
11e28     1C 1E 0E F2 | 	cmp	local01, #28 wz
11e2c     14 4E 05 A1 |  if_e	add	fp, #20
11e30     A7 24 02 AB |  if_e	rdlong	local04, fp
11e34     14 4E 85 A1 |  if_e	sub	fp, #20
11e38     12 23 02 A6 |  if_e	mov	local03, local04
11e3c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11e40     40 00 90 5D |  if_ne	jmp	#LR__1435
11e44     A7 12 02 FB | 	rdlong	arg01, fp
11e48     09 13 52 F6 | 	abs	arg01, arg01 wc
11e4c     1F 26 C6 C9 |  if_b	decod	local05, #31
11e50     00 26 06 36 |  if_ae	mov	local05, #0
11e54     68 16 B1 FD | 	call	#__system___float_fromuns
11e58     13 FB 61 F5 | 	xor	result1, local05
11e5c     FD 12 02 F6 | 	mov	arg01, result1
11e60     0C 4E 05 F1 | 	add	fp, #12
11e64     A7 14 02 FB | 	rdlong	arg02, fp
11e68     0C 4E 85 F1 | 	sub	fp, #12
11e6c     84 16 B1 FD | 	call	#__system___float_add
11e70     A7 FA 61 FC | 	wrlong	result1, fp
11e74     08 4E 05 F1 | 	add	fp, #8
11e78     A7 3C 68 FC | 	wrlong	#30, fp
11e7c     08 4E 85 F1 | 	sub	fp, #8
11e80     B0 02 90 FD | 	jmp	#LR__1445
11e84                 | LR__1435
11e84                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
11e84     08 4E 05 F1 | 	add	fp, #8
11e88     A7 1E 02 FB | 	rdlong	local01, fp
11e8c     08 4E 85 F1 | 	sub	fp, #8
11e90     1E 1E 0E F2 | 	cmp	local01, #30 wz
11e94     14 4E 05 A1 |  if_e	add	fp, #20
11e98     A7 24 02 AB |  if_e	rdlong	local04, fp
11e9c     14 4E 85 A1 |  if_e	sub	fp, #20
11ea0     12 23 02 A6 |  if_e	mov	local03, local04
11ea4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11ea8     28 00 90 5D |  if_ne	jmp	#LR__1436
11eac     A7 1E 02 FB | 	rdlong	local01, fp
11eb0     0C 4E 05 F1 | 	add	fp, #12
11eb4     A7 12 02 FB | 	rdlong	arg01, fp
11eb8     0C 4E 85 F1 | 	sub	fp, #12
11ebc     00 16 B1 FD | 	call	#__system___float_fromuns
11ec0     FD 14 02 F6 | 	mov	arg02, result1
11ec4     0F 13 02 F6 | 	mov	arg01, local01
11ec8     28 16 B1 FD | 	call	#__system___float_add
11ecc     A7 FA 61 FC | 	wrlong	result1, fp
11ed0     60 02 90 FD | 	jmp	#LR__1445
11ed4                 | LR__1436
11ed4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
11ed4     08 4E 05 F1 | 	add	fp, #8
11ed8     A7 1E 02 FB | 	rdlong	local01, fp
11edc     08 4E 85 F1 | 	sub	fp, #8
11ee0     1E 1E 0E F2 | 	cmp	local01, #30 wz
11ee4     14 4E 05 A1 |  if_e	add	fp, #20
11ee8     A7 24 02 AB |  if_e	rdlong	local04, fp
11eec     14 4E 85 A1 |  if_e	sub	fp, #20
11ef0     12 23 02 A6 |  if_e	mov	local03, local04
11ef4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11ef8     38 00 90 5D |  if_ne	jmp	#LR__1437
11efc     A7 1E 02 FB | 	rdlong	local01, fp
11f00     0C 4E 05 F1 | 	add	fp, #12
11f04     A7 12 02 FB | 	rdlong	arg01, fp
11f08     0C 4E 85 F1 | 	sub	fp, #12
11f0c     09 13 52 F6 | 	abs	arg01, arg01 wc
11f10     1F 26 C6 C9 |  if_b	decod	local05, #31
11f14     00 26 06 36 |  if_ae	mov	local05, #0
11f18     A4 15 B1 FD | 	call	#__system___float_fromuns
11f1c     13 FB 61 F5 | 	xor	result1, local05
11f20     FD 14 02 F6 | 	mov	arg02, result1
11f24     0F 13 02 F6 | 	mov	arg01, local01
11f28     C8 15 B1 FD | 	call	#__system___float_add
11f2c     A7 FA 61 FC | 	wrlong	result1, fp
11f30     00 02 90 FD | 	jmp	#LR__1445
11f34                 | LR__1437
11f34                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
11f34     08 4E 05 F1 | 	add	fp, #8
11f38     A7 1E 02 FB | 	rdlong	local01, fp
11f3c     08 4E 85 F1 | 	sub	fp, #8
11f40     1E 1E 0E F2 | 	cmp	local01, #30 wz
11f44     14 4E 05 A1 |  if_e	add	fp, #20
11f48     A7 24 02 AB |  if_e	rdlong	local04, fp
11f4c     14 4E 85 A1 |  if_e	sub	fp, #20
11f50     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
11f54     1C 00 90 5D |  if_ne	jmp	#LR__1438
11f58     A7 12 02 FB | 	rdlong	arg01, fp
11f5c     0C 4E 05 F1 | 	add	fp, #12
11f60     A7 14 02 FB | 	rdlong	arg02, fp
11f64     0C 4E 85 F1 | 	sub	fp, #12
11f68     88 15 B1 FD | 	call	#__system___float_add
11f6c     A7 FA 61 FC | 	wrlong	result1, fp
11f70     C0 01 90 FD | 	jmp	#LR__1445
11f74                 | LR__1438
11f74                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
11f74     08 4E 05 F1 | 	add	fp, #8
11f78     A7 1E 02 FB | 	rdlong	local01, fp
11f7c     08 4E 85 F1 | 	sub	fp, #8
11f80     1F 1E 0E F2 | 	cmp	local01, #31 wz
11f84     24 00 90 5D |  if_ne	jmp	#LR__1439
11f88     14 4E 05 F1 | 	add	fp, #20
11f8c     A7 22 02 FB | 	rdlong	local03, fp
11f90     14 4E 85 F1 | 	sub	fp, #20
11f94     1F 22 0E F2 | 	cmp	local03, #31 wz
11f98     A7 04 68 5C |  if_ne	wrlong	#2, fp
11f9c     08 4E 05 51 |  if_ne	add	fp, #8
11fa0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
11fa4     08 4E 85 51 |  if_ne	sub	fp, #8
11fa8     88 01 90 5D |  if_ne	jmp	#LR__1445
11fac                 | LR__1439
11fac                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
11fac     14 4E 05 F1 | 	add	fp, #20
11fb0     A7 1E 02 FB | 	rdlong	local01, fp
11fb4     14 4E 85 F1 | 	sub	fp, #20
11fb8     1F 1E 0E F2 | 	cmp	local01, #31 wz
11fbc     24 00 90 5D |  if_ne	jmp	#LR__1440
11fc0     08 4E 05 F1 | 	add	fp, #8
11fc4     A7 22 02 FB | 	rdlong	local03, fp
11fc8     08 4E 85 F1 | 	sub	fp, #8
11fcc     1F 22 0E F2 | 	cmp	local03, #31 wz
11fd0     A7 04 68 5C |  if_ne	wrlong	#2, fp
11fd4     08 4E 05 51 |  if_ne	add	fp, #8
11fd8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
11fdc     08 4E 85 51 |  if_ne	sub	fp, #8
11fe0     50 01 90 5D |  if_ne	jmp	#LR__1445
11fe4                 | LR__1440
11fe4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
11fe4     08 4E 05 F1 | 	add	fp, #8
11fe8     A7 1E 02 FB | 	rdlong	local01, fp
11fec     08 4E 85 F1 | 	sub	fp, #8
11ff0     1F 1E 0E F2 | 	cmp	local01, #31 wz
11ff4     14 4E 05 A1 |  if_e	add	fp, #20
11ff8     A7 22 02 AB |  if_e	rdlong	local03, fp
11ffc     14 4E 85 A1 |  if_e	sub	fp, #20
12000     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12004     1C 00 90 5D |  if_ne	jmp	#LR__1441
12008     A7 12 02 FB | 	rdlong	arg01, fp
1200c     0C 4E 05 F1 | 	add	fp, #12
12010     A7 14 02 FB | 	rdlong	arg02, fp
12014     0C 4E 85 F1 | 	sub	fp, #12
12018     50 ED B0 FD | 	call	#__system___string_concat
1201c     A7 FA 61 FC | 	wrlong	result1, fp
12020     10 01 90 FD | 	jmp	#LR__1445
12024                 | LR__1441
12024                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
12024     08 4E 05 F1 | 	add	fp, #8
12028     A7 1E 02 FB | 	rdlong	local01, fp
1202c     08 4E 85 F1 | 	sub	fp, #8
12030     2B 1E 0E F2 | 	cmp	local01, #43 wz
12034     14 4E 05 A1 |  if_e	add	fp, #20
12038     A7 22 02 AB |  if_e	rdlong	local03, fp
1203c     14 4E 85 A1 |  if_e	sub	fp, #20
12040     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12044     30 00 90 5D |  if_ne	jmp	#LR__1442
12048     A7 12 02 FB | 	rdlong	arg01, fp
1204c     20 E9 BF FD | 	call	#_convertstring
12050     FD 12 02 F6 | 	mov	arg01, result1
12054     0C 4E 05 F1 | 	add	fp, #12
12058     A7 14 02 FB | 	rdlong	arg02, fp
1205c     0C 4E 85 F1 | 	sub	fp, #12
12060     08 ED B0 FD | 	call	#__system___string_concat
12064     A7 FA 61 FC | 	wrlong	result1, fp
12068     08 4E 05 F1 | 	add	fp, #8
1206c     A7 3E 68 FC | 	wrlong	#31, fp
12070     08 4E 85 F1 | 	sub	fp, #8
12074     BC 00 90 FD | 	jmp	#LR__1445
12078                 | LR__1442
12078                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
12078     08 4E 05 F1 | 	add	fp, #8
1207c     A7 1E 02 FB | 	rdlong	local01, fp
12080     08 4E 85 F1 | 	sub	fp, #8
12084     1F 1E 0E F2 | 	cmp	local01, #31 wz
12088     14 4E 05 A1 |  if_e	add	fp, #20
1208c     A7 22 02 AB |  if_e	rdlong	local03, fp
12090     14 4E 85 A1 |  if_e	sub	fp, #20
12094     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12098     28 00 90 5D |  if_ne	jmp	#LR__1443
1209c     A7 1E 02 FB | 	rdlong	local01, fp
120a0     0C 4E 05 F1 | 	add	fp, #12
120a4     A7 12 02 FB | 	rdlong	arg01, fp
120a8     0C 4E 85 F1 | 	sub	fp, #12
120ac     C0 E8 BF FD | 	call	#_convertstring
120b0     FD 14 02 F6 | 	mov	arg02, result1
120b4     0F 13 02 F6 | 	mov	arg01, local01
120b8     B0 EC B0 FD | 	call	#__system___string_concat
120bc     A7 FA 61 FC | 	wrlong	result1, fp
120c0     70 00 90 FD | 	jmp	#LR__1445
120c4                 | LR__1443
120c4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
120c4     08 4E 05 F1 | 	add	fp, #8
120c8     A7 1E 02 FB | 	rdlong	local01, fp
120cc     08 4E 85 F1 | 	sub	fp, #8
120d0     2B 1E 0E F2 | 	cmp	local01, #43 wz
120d4     14 4E 05 A1 |  if_e	add	fp, #20
120d8     A7 22 02 AB |  if_e	rdlong	local03, fp
120dc     14 4E 85 A1 |  if_e	sub	fp, #20
120e0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
120e4     3C 00 90 5D |  if_ne	jmp	#LR__1444
120e8     A7 12 02 FB | 	rdlong	arg01, fp
120ec     80 E8 BF FD | 	call	#_convertstring
120f0     FD 1E 02 F6 | 	mov	local01, result1
120f4     0C 4E 05 F1 | 	add	fp, #12
120f8     A7 12 02 FB | 	rdlong	arg01, fp
120fc     0C 4E 85 F1 | 	sub	fp, #12
12100     6C E8 BF FD | 	call	#_convertstring
12104     FD 14 02 F6 | 	mov	arg02, result1
12108     0F 13 02 F6 | 	mov	arg01, local01
1210c     5C EC B0 FD | 	call	#__system___string_concat
12110     A7 FA 61 FC | 	wrlong	result1, fp
12114     08 4E 05 F1 | 	add	fp, #8
12118     A7 3E 68 FC | 	wrlong	#31, fp
1211c     08 4E 85 F1 | 	sub	fp, #8
12120     10 00 90 FD | 	jmp	#LR__1445
12124                 | LR__1444
12124     A7 08 68 FC | 	wrlong	#4, fp
12128     08 4E 05 F1 | 	add	fp, #8
1212c     A7 FE 69 FC | 	wrlong	#255, fp
12130     08 4E 85 F1 | 	sub	fp, #8
12134                 | LR__1445
12134     A7 12 02 F6 | 	mov	arg01, fp
12138     20 90 BF FD | 	call	#_push
1213c     A7 F0 03 F6 | 	mov	ptra, fp
12140     B2 00 A0 FD | 	call	#popregs_
12144                 | _do_plus_ret
12144     2D 00 64 FD | 	ret
12148                 | 
12148                 | ' 
12148                 | ' sub do_minus
12148                 | _do_minus
12148     05 4A 05 F6 | 	mov	COUNT_, #5
1214c     A8 00 A0 FD | 	call	#pushregs_
12150     18 F0 07 F1 | 	add	ptra, #24
12154     6C 8F BF FD | 	call	#_pop
12158     FD 1E 02 F6 | 	mov	local01, result1
1215c     FE 20 02 F6 | 	mov	local02, result2
12160     FF 22 02 F6 | 	mov	local03, result3
12164     0C 4E 05 F1 | 	add	fp, #12
12168     A7 1E 62 FC | 	wrlong	local01, fp
1216c     04 4E 05 F1 | 	add	fp, #4
12170     A7 20 62 FC | 	wrlong	local02, fp
12174     04 4E 05 F1 | 	add	fp, #4
12178     A7 22 62 FC | 	wrlong	local03, fp
1217c     14 4E 85 F1 | 	sub	fp, #20
12180     40 8F BF FD | 	call	#_pop
12184     FF 22 02 F6 | 	mov	local03, result3
12188     A7 FA 61 FC | 	wrlong	result1, fp
1218c     04 4E 05 F1 | 	add	fp, #4
12190     A7 FC 61 FC | 	wrlong	result2, fp
12194     04 4E 05 F1 | 	add	fp, #4
12198     A7 22 62 FC | 	wrlong	local03, fp
1219c                 | ' 
1219c                 | ' t2=pop()
1219c                 | ' t1=pop()
1219c                 | ' 
1219c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1219c     08 4E 85 F1 | 	sub	fp, #8
121a0     1D 22 0E F2 | 	cmp	local03, #29 wz
121a4     14 4E 05 A1 |  if_e	add	fp, #20
121a8     A7 24 02 AB |  if_e	rdlong	local04, fp
121ac     14 4E 85 A1 |  if_e	sub	fp, #20
121b0     12 23 02 A6 |  if_e	mov	local03, local04
121b4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
121b8     5C 00 90 5D |  if_ne	jmp	#LR__1451
121bc                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
121bc     0C 4E 05 F1 | 	add	fp, #12
121c0     A7 1E 02 FB | 	rdlong	local01, fp
121c4     0C 4E 85 F1 | 	sub	fp, #12
121c8     A7 22 02 FB | 	rdlong	local03, fp
121cc     11 1F 12 F2 | 	cmp	local01, local03 wc
121d0     1C 00 90 3D |  if_ae	jmp	#LR__1450
121d4     A7 1E 02 FB | 	rdlong	local01, fp
121d8     0C 4E 05 F1 | 	add	fp, #12
121dc     A7 20 02 FB | 	rdlong	local02, fp
121e0     0C 4E 85 F1 | 	sub	fp, #12
121e4     10 1F 82 F1 | 	sub	local01, local02
121e8     A7 1E 62 FC | 	wrlong	local01, fp
121ec     F4 02 90 FD | 	jmp	#LR__1460
121f0                 | LR__1450
121f0     A7 1E 02 FB | 	rdlong	local01, fp
121f4     0C 4E 05 F1 | 	add	fp, #12
121f8     A7 20 02 FB | 	rdlong	local02, fp
121fc     0C 4E 85 F1 | 	sub	fp, #12
12200     10 1F 82 F1 | 	sub	local01, local02
12204     A7 1E 62 FC | 	wrlong	local01, fp
12208     08 4E 05 F1 | 	add	fp, #8
1220c     A7 38 68 FC | 	wrlong	#28, fp
12210     08 4E 85 F1 | 	sub	fp, #8
12214     CC 02 90 FD | 	jmp	#LR__1460
12218                 | LR__1451
12218                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
12218     08 4E 05 F1 | 	add	fp, #8
1221c     A7 1E 02 FB | 	rdlong	local01, fp
12220     08 4E 85 F1 | 	sub	fp, #8
12224     1D 1E 0E F2 | 	cmp	local01, #29 wz
12228     14 4E 05 A1 |  if_e	add	fp, #20
1222c     A7 24 02 AB |  if_e	rdlong	local04, fp
12230     14 4E 85 A1 |  if_e	sub	fp, #20
12234     12 23 02 A6 |  if_e	mov	local03, local04
12238     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1223c     28 00 90 5D |  if_ne	jmp	#LR__1452
12240     A7 1E 02 FB | 	rdlong	local01, fp
12244     0C 4E 05 F1 | 	add	fp, #12
12248     A7 20 02 FB | 	rdlong	local02, fp
1224c     0C 4E 85 F1 | 	sub	fp, #12
12250     10 1F 82 F1 | 	sub	local01, local02
12254     A7 1E 62 FC | 	wrlong	local01, fp
12258     08 4E 05 F1 | 	add	fp, #8
1225c     A7 38 68 FC | 	wrlong	#28, fp
12260     08 4E 85 F1 | 	sub	fp, #8
12264     7C 02 90 FD | 	jmp	#LR__1460
12268                 | LR__1452
12268                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
12268     08 4E 05 F1 | 	add	fp, #8
1226c     A7 1E 02 FB | 	rdlong	local01, fp
12270     08 4E 85 F1 | 	sub	fp, #8
12274     1D 1E 0E F2 | 	cmp	local01, #29 wz
12278     14 4E 05 A1 |  if_e	add	fp, #20
1227c     A7 24 02 AB |  if_e	rdlong	local04, fp
12280     14 4E 85 A1 |  if_e	sub	fp, #20
12284     12 23 02 A6 |  if_e	mov	local03, local04
12288     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1228c     34 00 90 5D |  if_ne	jmp	#LR__1453
12290     A7 12 02 FB | 	rdlong	arg01, fp
12294     28 12 B1 FD | 	call	#__system___float_fromuns
12298     FD 12 02 F6 | 	mov	arg01, result1
1229c     0C 4E 05 F1 | 	add	fp, #12
122a0     A7 14 02 FB | 	rdlong	arg02, fp
122a4     0C 4E 85 F1 | 	sub	fp, #12
122a8     1F 14 E6 F4 | 	bitnot	arg02, #31
122ac     44 12 B1 FD | 	call	#__system___float_add
122b0     A7 FA 61 FC | 	wrlong	result1, fp
122b4     08 4E 05 F1 | 	add	fp, #8
122b8     A7 3C 68 FC | 	wrlong	#30, fp
122bc     08 4E 85 F1 | 	sub	fp, #8
122c0     20 02 90 FD | 	jmp	#LR__1460
122c4                 | LR__1453
122c4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
122c4     08 4E 05 F1 | 	add	fp, #8
122c8     A7 1E 02 FB | 	rdlong	local01, fp
122cc     08 4E 85 F1 | 	sub	fp, #8
122d0     1C 1E 0E F2 | 	cmp	local01, #28 wz
122d4     14 4E 05 A1 |  if_e	add	fp, #20
122d8     A7 24 02 AB |  if_e	rdlong	local04, fp
122dc     14 4E 85 A1 |  if_e	sub	fp, #20
122e0     12 23 02 A6 |  if_e	mov	local03, local04
122e4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
122e8     1C 00 90 5D |  if_ne	jmp	#LR__1454
122ec     A7 1E 02 FB | 	rdlong	local01, fp
122f0     0C 4E 05 F1 | 	add	fp, #12
122f4     A7 20 02 FB | 	rdlong	local02, fp
122f8     0C 4E 85 F1 | 	sub	fp, #12
122fc     10 1F 82 F1 | 	sub	local01, local02
12300     A7 1E 62 FC | 	wrlong	local01, fp
12304     DC 01 90 FD | 	jmp	#LR__1460
12308                 | LR__1454
12308                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
12308     08 4E 05 F1 | 	add	fp, #8
1230c     A7 1E 02 FB | 	rdlong	local01, fp
12310     08 4E 85 F1 | 	sub	fp, #8
12314     1C 1E 0E F2 | 	cmp	local01, #28 wz
12318     14 4E 05 A1 |  if_e	add	fp, #20
1231c     A7 24 02 AB |  if_e	rdlong	local04, fp
12320     14 4E 85 A1 |  if_e	sub	fp, #20
12324     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
12328     1C 00 90 5D |  if_ne	jmp	#LR__1455
1232c     A7 1E 02 FB | 	rdlong	local01, fp
12330     0C 4E 05 F1 | 	add	fp, #12
12334     A7 20 02 FB | 	rdlong	local02, fp
12338     0C 4E 85 F1 | 	sub	fp, #12
1233c     10 1F 82 F1 | 	sub	local01, local02
12340     A7 1E 62 FC | 	wrlong	local01, fp
12344     9C 01 90 FD | 	jmp	#LR__1460
12348                 | LR__1455
12348                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
12348     08 4E 05 F1 | 	add	fp, #8
1234c     A7 1E 02 FB | 	rdlong	local01, fp
12350     08 4E 85 F1 | 	sub	fp, #8
12354     1C 1E 0E F2 | 	cmp	local01, #28 wz
12358     14 4E 05 A1 |  if_e	add	fp, #20
1235c     A7 22 02 AB |  if_e	rdlong	local03, fp
12360     14 4E 85 A1 |  if_e	sub	fp, #20
12364     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12368     44 00 90 5D |  if_ne	jmp	#LR__1456
1236c     A7 12 02 FB | 	rdlong	arg01, fp
12370     09 13 52 F6 | 	abs	arg01, arg01 wc
12374     1F 26 C6 C9 |  if_b	decod	local05, #31
12378     00 26 06 36 |  if_ae	mov	local05, #0
1237c     40 11 B1 FD | 	call	#__system___float_fromuns
12380     13 FB 61 F5 | 	xor	result1, local05
12384     FD 12 02 F6 | 	mov	arg01, result1
12388     0C 4E 05 F1 | 	add	fp, #12
1238c     A7 14 02 FB | 	rdlong	arg02, fp
12390     0C 4E 85 F1 | 	sub	fp, #12
12394     1F 14 E6 F4 | 	bitnot	arg02, #31
12398     58 11 B1 FD | 	call	#__system___float_add
1239c     A7 FA 61 FC | 	wrlong	result1, fp
123a0     08 4E 05 F1 | 	add	fp, #8
123a4     A7 3C 68 FC | 	wrlong	#30, fp
123a8     08 4E 85 F1 | 	sub	fp, #8
123ac     34 01 90 FD | 	jmp	#LR__1460
123b0                 | LR__1456
123b0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
123b0     08 4E 05 F1 | 	add	fp, #8
123b4     A7 1E 02 FB | 	rdlong	local01, fp
123b8     08 4E 85 F1 | 	sub	fp, #8
123bc     1E 1E 0E F2 | 	cmp	local01, #30 wz
123c0     14 4E 05 A1 |  if_e	add	fp, #20
123c4     A7 22 02 AB |  if_e	rdlong	local03, fp
123c8     14 4E 85 A1 |  if_e	sub	fp, #20
123cc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
123d0     2C 00 90 5D |  if_ne	jmp	#LR__1457
123d4     A7 1E 02 FB | 	rdlong	local01, fp
123d8     0C 4E 05 F1 | 	add	fp, #12
123dc     A7 12 02 FB | 	rdlong	arg01, fp
123e0     0C 4E 85 F1 | 	sub	fp, #12
123e4     D8 10 B1 FD | 	call	#__system___float_fromuns
123e8     FD 14 02 F6 | 	mov	arg02, result1
123ec     0F 13 02 F6 | 	mov	arg01, local01
123f0     1F 14 E6 F4 | 	bitnot	arg02, #31
123f4     FC 10 B1 FD | 	call	#__system___float_add
123f8     A7 FA 61 FC | 	wrlong	result1, fp
123fc     E4 00 90 FD | 	jmp	#LR__1460
12400                 | LR__1457
12400                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
12400     08 4E 05 F1 | 	add	fp, #8
12404     A7 1E 02 FB | 	rdlong	local01, fp
12408     08 4E 85 F1 | 	sub	fp, #8
1240c     1E 1E 0E F2 | 	cmp	local01, #30 wz
12410     14 4E 05 A1 |  if_e	add	fp, #20
12414     A7 22 02 AB |  if_e	rdlong	local03, fp
12418     14 4E 85 A1 |  if_e	sub	fp, #20
1241c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12420     3C 00 90 5D |  if_ne	jmp	#LR__1458
12424     A7 1E 02 FB | 	rdlong	local01, fp
12428     0C 4E 05 F1 | 	add	fp, #12
1242c     A7 12 02 FB | 	rdlong	arg01, fp
12430     0C 4E 85 F1 | 	sub	fp, #12
12434     09 13 52 F6 | 	abs	arg01, arg01 wc
12438     1F 26 C6 C9 |  if_b	decod	local05, #31
1243c     00 26 06 36 |  if_ae	mov	local05, #0
12440     7C 10 B1 FD | 	call	#__system___float_fromuns
12444     13 FB 61 F5 | 	xor	result1, local05
12448     FD 14 02 F6 | 	mov	arg02, result1
1244c     0F 13 02 F6 | 	mov	arg01, local01
12450     1F 14 E6 F4 | 	bitnot	arg02, #31
12454     9C 10 B1 FD | 	call	#__system___float_add
12458     A7 FA 61 FC | 	wrlong	result1, fp
1245c     84 00 90 FD | 	jmp	#LR__1460
12460                 | LR__1458
12460                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
12460     08 4E 05 F1 | 	add	fp, #8
12464     A7 1E 02 FB | 	rdlong	local01, fp
12468     08 4E 85 F1 | 	sub	fp, #8
1246c     1E 1E 0E F2 | 	cmp	local01, #30 wz
12470     14 4E 05 A1 |  if_e	add	fp, #20
12474     A7 22 02 AB |  if_e	rdlong	local03, fp
12478     14 4E 85 A1 |  if_e	sub	fp, #20
1247c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12480     20 00 90 5D |  if_ne	jmp	#LR__1459
12484     A7 12 02 FB | 	rdlong	arg01, fp
12488     0C 4E 05 F1 | 	add	fp, #12
1248c     A7 14 02 FB | 	rdlong	arg02, fp
12490     0C 4E 85 F1 | 	sub	fp, #12
12494     1F 14 E6 F4 | 	bitnot	arg02, #31
12498     58 10 B1 FD | 	call	#__system___float_add
1249c     A7 FA 61 FC | 	wrlong	result1, fp
124a0     40 00 90 FD | 	jmp	#LR__1460
124a4                 | LR__1459
124a4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
124a4     08 4E 05 F1 | 	add	fp, #8
124a8     A7 1E 02 FB | 	rdlong	local01, fp
124ac     08 4E 85 F1 | 	sub	fp, #8
124b0     1F 1E 0E F2 | 	cmp	local01, #31 wz
124b4     14 4E 05 51 |  if_ne	add	fp, #20
124b8     A7 22 02 5B |  if_ne	rdlong	local03, fp
124bc     14 4E 85 51 |  if_ne	sub	fp, #20
124c0     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
124c4     A7 06 68 AC |  if_e	wrlong	#3, fp
124c8     08 4E 05 A1 |  if_e	add	fp, #8
124cc     A7 FE 69 AC |  if_e	wrlong	#255, fp
124d0     08 4E 85 A1 |  if_e	sub	fp, #8
124d4     A7 0A 68 5C |  if_ne	wrlong	#5, fp
124d8     08 4E 05 51 |  if_ne	add	fp, #8
124dc     A7 FE 69 5C |  if_ne	wrlong	#255, fp
124e0     08 4E 85 51 |  if_ne	sub	fp, #8
124e4                 | LR__1460
124e4     A7 12 02 F6 | 	mov	arg01, fp
124e8     70 8C BF FD | 	call	#_push
124ec     A7 F0 03 F6 | 	mov	ptra, fp
124f0     B2 00 A0 FD | 	call	#popregs_
124f4                 | _do_minus_ret
124f4     2D 00 64 FD | 	ret
124f8                 | 
124f8                 | ' 
124f8                 | ' sub do_and 
124f8                 | _do_and
124f8     03 4A 05 F6 | 	mov	COUNT_, #3
124fc     A8 00 A0 FD | 	call	#pushregs_
12500     18 F0 07 F1 | 	add	ptra, #24
12504     BC 8B BF FD | 	call	#_pop
12508     FD 12 02 F6 | 	mov	arg01, result1
1250c     FE 1E 02 F6 | 	mov	local01, result2
12510     FF 20 02 F6 | 	mov	local02, result3
12514     0C 4E 05 F1 | 	add	fp, #12
12518     A7 12 62 FC | 	wrlong	arg01, fp
1251c     04 4E 05 F1 | 	add	fp, #4
12520     A7 1E 62 FC | 	wrlong	local01, fp
12524     04 4E 05 F1 | 	add	fp, #4
12528     A7 20 62 FC | 	wrlong	local02, fp
1252c     14 4E 85 F1 | 	sub	fp, #20
12530     90 8B BF FD | 	call	#_pop
12534     FF 22 02 F6 | 	mov	local03, result3
12538     A7 FA 61 FC | 	wrlong	result1, fp
1253c     04 4E 05 F1 | 	add	fp, #4
12540     A7 FC 61 FC | 	wrlong	result2, fp
12544     04 4E 05 F1 | 	add	fp, #4
12548     A7 22 62 FC | 	wrlong	local03, fp
1254c                 | ' 
1254c                 | ' t2=pop()
1254c                 | ' t1=pop()
1254c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1254c     08 4E 85 F1 | 	sub	fp, #8
12550     1C 22 0E F2 | 	cmp	local03, #28 wz
12554     A7 22 02 AB |  if_e	rdlong	local03, fp
12558     A7 22 62 AC |  if_e	wrlong	local03, fp
1255c     08 4E 05 A1 |  if_e	add	fp, #8
12560     A7 3A 68 AC |  if_e	wrlong	#29, fp
12564     08 4E 85 A1 |  if_e	sub	fp, #8
12568                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
12568     14 4E 05 F1 | 	add	fp, #20
1256c     A7 22 02 FB | 	rdlong	local03, fp
12570     14 4E 85 F1 | 	sub	fp, #20
12574     1C 22 0E F2 | 	cmp	local03, #28 wz
12578     18 00 90 5D |  if_ne	jmp	#LR__1470
1257c     0C 4E 05 F1 | 	add	fp, #12
12580     A7 22 02 FB | 	rdlong	local03, fp
12584     A7 22 62 FC | 	wrlong	local03, fp
12588     08 4E 05 F1 | 	add	fp, #8
1258c     A7 3A 68 FC | 	wrlong	#29, fp
12590     14 4E 85 F1 | 	sub	fp, #20
12594                 | LR__1470
12594                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
12594     08 4E 05 F1 | 	add	fp, #8
12598     A7 22 02 FB | 	rdlong	local03, fp
1259c     08 4E 85 F1 | 	sub	fp, #8
125a0     1F 22 0E F2 | 	cmp	local03, #31 wz
125a4     14 4E 05 51 |  if_ne	add	fp, #20
125a8     A7 20 02 5B |  if_ne	rdlong	local02, fp
125ac     14 4E 85 51 |  if_ne	sub	fp, #20
125b0     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
125b4     08 4E 05 51 |  if_ne	add	fp, #8
125b8     A7 22 02 5B |  if_ne	rdlong	local03, fp
125bc     08 4E 85 51 |  if_ne	sub	fp, #8
125c0     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
125c4     14 4E 05 51 |  if_ne	add	fp, #20
125c8     14 4E 85 51 |  if_ne	sub	fp, #20
125cc     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
125d0     A7 0C 68 AC |  if_e	wrlong	#6, fp
125d4     08 4E 05 A1 |  if_e	add	fp, #8
125d8     A7 FE 69 AC |  if_e	wrlong	#255, fp
125dc     08 4E 85 A1 |  if_e	sub	fp, #8
125e0     18 00 90 AD |  if_e	jmp	#LR__1471
125e4     A7 22 02 FB | 	rdlong	local03, fp
125e8     0C 4E 05 F1 | 	add	fp, #12
125ec     A7 1E 02 FB | 	rdlong	local01, fp
125f0     0C 4E 85 F1 | 	sub	fp, #12
125f4     0F 23 02 F5 | 	and	local03, local01
125f8     A7 22 62 FC | 	wrlong	local03, fp
125fc                 | LR__1471
125fc     A7 12 02 F6 | 	mov	arg01, fp
12600     58 8B BF FD | 	call	#_push
12604     A7 F0 03 F6 | 	mov	ptra, fp
12608     B2 00 A0 FD | 	call	#popregs_
1260c                 | _do_and_ret
1260c     2D 00 64 FD | 	ret
12610                 | 
12610                 | ' 
12610                 | ' sub do_or 
12610                 | _do_or
12610     03 4A 05 F6 | 	mov	COUNT_, #3
12614     A8 00 A0 FD | 	call	#pushregs_
12618     18 F0 07 F1 | 	add	ptra, #24
1261c     A4 8A BF FD | 	call	#_pop
12620     FD 12 02 F6 | 	mov	arg01, result1
12624     FE 1E 02 F6 | 	mov	local01, result2
12628     FF 20 02 F6 | 	mov	local02, result3
1262c     0C 4E 05 F1 | 	add	fp, #12
12630     A7 12 62 FC | 	wrlong	arg01, fp
12634     04 4E 05 F1 | 	add	fp, #4
12638     A7 1E 62 FC | 	wrlong	local01, fp
1263c     04 4E 05 F1 | 	add	fp, #4
12640     A7 20 62 FC | 	wrlong	local02, fp
12644     14 4E 85 F1 | 	sub	fp, #20
12648     78 8A BF FD | 	call	#_pop
1264c     FF 22 02 F6 | 	mov	local03, result3
12650     A7 FA 61 FC | 	wrlong	result1, fp
12654     04 4E 05 F1 | 	add	fp, #4
12658     A7 FC 61 FC | 	wrlong	result2, fp
1265c     04 4E 05 F1 | 	add	fp, #4
12660     A7 22 62 FC | 	wrlong	local03, fp
12664                 | ' 
12664                 | ' t2=pop()
12664                 | ' t1=pop()
12664                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
12664     08 4E 85 F1 | 	sub	fp, #8
12668     1C 22 0E F2 | 	cmp	local03, #28 wz
1266c     A7 22 02 AB |  if_e	rdlong	local03, fp
12670     A7 22 62 AC |  if_e	wrlong	local03, fp
12674     08 4E 05 A1 |  if_e	add	fp, #8
12678     A7 3A 68 AC |  if_e	wrlong	#29, fp
1267c     08 4E 85 A1 |  if_e	sub	fp, #8
12680                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
12680     14 4E 05 F1 | 	add	fp, #20
12684     A7 22 02 FB | 	rdlong	local03, fp
12688     14 4E 85 F1 | 	sub	fp, #20
1268c     1C 22 0E F2 | 	cmp	local03, #28 wz
12690     18 00 90 5D |  if_ne	jmp	#LR__1480
12694     0C 4E 05 F1 | 	add	fp, #12
12698     A7 22 02 FB | 	rdlong	local03, fp
1269c     A7 22 62 FC | 	wrlong	local03, fp
126a0     08 4E 05 F1 | 	add	fp, #8
126a4     A7 3A 68 FC | 	wrlong	#29, fp
126a8     14 4E 85 F1 | 	sub	fp, #20
126ac                 | LR__1480
126ac                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
126ac     08 4E 05 F1 | 	add	fp, #8
126b0     A7 22 02 FB | 	rdlong	local03, fp
126b4     08 4E 85 F1 | 	sub	fp, #8
126b8     1F 22 0E F2 | 	cmp	local03, #31 wz
126bc     14 4E 05 51 |  if_ne	add	fp, #20
126c0     A7 20 02 5B |  if_ne	rdlong	local02, fp
126c4     14 4E 85 51 |  if_ne	sub	fp, #20
126c8     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
126cc     08 4E 05 51 |  if_ne	add	fp, #8
126d0     A7 22 02 5B |  if_ne	rdlong	local03, fp
126d4     08 4E 85 51 |  if_ne	sub	fp, #8
126d8     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
126dc     14 4E 05 51 |  if_ne	add	fp, #20
126e0     14 4E 85 51 |  if_ne	sub	fp, #20
126e4     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
126e8     A7 0C 68 AC |  if_e	wrlong	#6, fp
126ec     08 4E 05 A1 |  if_e	add	fp, #8
126f0     A7 FE 69 AC |  if_e	wrlong	#255, fp
126f4     08 4E 85 A1 |  if_e	sub	fp, #8
126f8     18 00 90 AD |  if_e	jmp	#LR__1481
126fc     A7 22 02 FB | 	rdlong	local03, fp
12700     0C 4E 05 F1 | 	add	fp, #12
12704     A7 1E 02 FB | 	rdlong	local01, fp
12708     0C 4E 85 F1 | 	sub	fp, #12
1270c     0F 23 42 F5 | 	or	local03, local01
12710     A7 22 62 FC | 	wrlong	local03, fp
12714                 | LR__1481
12714     A7 12 02 F6 | 	mov	arg01, fp
12718     40 8A BF FD | 	call	#_push
1271c     A7 F0 03 F6 | 	mov	ptra, fp
12720     B2 00 A0 FD | 	call	#popregs_
12724                 | _do_or_ret
12724     2D 00 64 FD | 	ret
12728                 | 
12728                 | ' 
12728                 | ' sub do_mul
12728                 | _do_mul
12728     05 4A 05 F6 | 	mov	COUNT_, #5
1272c     A8 00 A0 FD | 	call	#pushregs_
12730     18 F0 07 F1 | 	add	ptra, #24
12734     8C 89 BF FD | 	call	#_pop
12738     FD 1E 02 F6 | 	mov	local01, result1
1273c     FE 20 02 F6 | 	mov	local02, result2
12740     FF 22 02 F6 | 	mov	local03, result3
12744     0C 4E 05 F1 | 	add	fp, #12
12748     A7 1E 62 FC | 	wrlong	local01, fp
1274c     04 4E 05 F1 | 	add	fp, #4
12750     A7 20 62 FC | 	wrlong	local02, fp
12754     04 4E 05 F1 | 	add	fp, #4
12758     A7 22 62 FC | 	wrlong	local03, fp
1275c     14 4E 85 F1 | 	sub	fp, #20
12760     60 89 BF FD | 	call	#_pop
12764     FF 22 02 F6 | 	mov	local03, result3
12768     A7 FA 61 FC | 	wrlong	result1, fp
1276c     04 4E 05 F1 | 	add	fp, #4
12770     A7 FC 61 FC | 	wrlong	result2, fp
12774     04 4E 05 F1 | 	add	fp, #4
12778     A7 22 62 FC | 	wrlong	local03, fp
1277c                 | ' 
1277c                 | ' t2=pop()
1277c                 | ' t1=pop()
1277c                 | ' 
1277c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1277c     08 4E 85 F1 | 	sub	fp, #8
12780     1D 22 0E F2 | 	cmp	local03, #29 wz
12784     14 4E 05 A1 |  if_e	add	fp, #20
12788     A7 24 02 AB |  if_e	rdlong	local04, fp
1278c     14 4E 85 A1 |  if_e	sub	fp, #20
12790     12 23 02 A6 |  if_e	mov	local03, local04
12794     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12798     20 00 90 5D |  if_ne	jmp	#LR__1490
1279c     A7 20 02 FB | 	rdlong	local02, fp
127a0     0C 4E 05 F1 | 	add	fp, #12
127a4     A7 22 02 FB | 	rdlong	local03, fp
127a8     11 21 02 FD | 	qmul	local02, local03
127ac     0C 4E 85 F1 | 	sub	fp, #12
127b0     18 1E 62 FD | 	getqx	local01
127b4     A7 1E 62 FC | 	wrlong	local01, fp
127b8     C4 02 90 FD | 	jmp	#LR__1499
127bc                 | LR__1490
127bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
127bc     08 4E 05 F1 | 	add	fp, #8
127c0     A7 1E 02 FB | 	rdlong	local01, fp
127c4     08 4E 85 F1 | 	sub	fp, #8
127c8     1D 1E 0E F2 | 	cmp	local01, #29 wz
127cc     14 4E 05 A1 |  if_e	add	fp, #20
127d0     A7 24 02 AB |  if_e	rdlong	local04, fp
127d4     14 4E 85 A1 |  if_e	sub	fp, #20
127d8     12 23 02 A6 |  if_e	mov	local03, local04
127dc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
127e0     2C 00 90 5D |  if_ne	jmp	#LR__1491
127e4     A7 20 02 FB | 	rdlong	local02, fp
127e8     0C 4E 05 F1 | 	add	fp, #12
127ec     A7 22 02 FB | 	rdlong	local03, fp
127f0     11 21 02 FD | 	qmul	local02, local03
127f4     0C 4E 85 F1 | 	sub	fp, #12
127f8     18 1E 62 FD | 	getqx	local01
127fc     A7 1E 62 FC | 	wrlong	local01, fp
12800     08 4E 05 F1 | 	add	fp, #8
12804     A7 38 68 FC | 	wrlong	#28, fp
12808     08 4E 85 F1 | 	sub	fp, #8
1280c     70 02 90 FD | 	jmp	#LR__1499
12810                 | LR__1491
12810                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
12810     08 4E 05 F1 | 	add	fp, #8
12814     A7 1E 02 FB | 	rdlong	local01, fp
12818     08 4E 85 F1 | 	sub	fp, #8
1281c     1D 1E 0E F2 | 	cmp	local01, #29 wz
12820     14 4E 05 A1 |  if_e	add	fp, #20
12824     A7 24 02 AB |  if_e	rdlong	local04, fp
12828     14 4E 85 A1 |  if_e	sub	fp, #20
1282c     12 23 02 A6 |  if_e	mov	local03, local04
12830     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12834     30 00 90 5D |  if_ne	jmp	#LR__1492
12838     A7 12 02 FB | 	rdlong	arg01, fp
1283c     80 0C B1 FD | 	call	#__system___float_fromuns
12840     FD 12 02 F6 | 	mov	arg01, result1
12844     0C 4E 05 F1 | 	add	fp, #12
12848     A7 14 02 FB | 	rdlong	arg02, fp
1284c     0C 4E 85 F1 | 	sub	fp, #12
12850     70 10 B1 FD | 	call	#__system___float_mul
12854     A7 FA 61 FC | 	wrlong	result1, fp
12858     08 4E 05 F1 | 	add	fp, #8
1285c     A7 3C 68 FC | 	wrlong	#30, fp
12860     08 4E 85 F1 | 	sub	fp, #8
12864     18 02 90 FD | 	jmp	#LR__1499
12868                 | LR__1492
12868                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
12868     08 4E 05 F1 | 	add	fp, #8
1286c     A7 1E 02 FB | 	rdlong	local01, fp
12870     08 4E 85 F1 | 	sub	fp, #8
12874     1C 1E 0E F2 | 	cmp	local01, #28 wz
12878     14 4E 05 A1 |  if_e	add	fp, #20
1287c     A7 24 02 AB |  if_e	rdlong	local04, fp
12880     14 4E 85 A1 |  if_e	sub	fp, #20
12884     12 23 02 A6 |  if_e	mov	local03, local04
12888     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1288c     20 00 90 5D |  if_ne	jmp	#LR__1493
12890     A7 20 02 FB | 	rdlong	local02, fp
12894     0C 4E 05 F1 | 	add	fp, #12
12898     A7 22 02 FB | 	rdlong	local03, fp
1289c     11 21 02 FD | 	qmul	local02, local03
128a0     0C 4E 85 F1 | 	sub	fp, #12
128a4     18 1E 62 FD | 	getqx	local01
128a8     A7 1E 62 FC | 	wrlong	local01, fp
128ac     D0 01 90 FD | 	jmp	#LR__1499
128b0                 | LR__1493
128b0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
128b0     08 4E 05 F1 | 	add	fp, #8
128b4     A7 1E 02 FB | 	rdlong	local01, fp
128b8     08 4E 85 F1 | 	sub	fp, #8
128bc     1C 1E 0E F2 | 	cmp	local01, #28 wz
128c0     14 4E 05 A1 |  if_e	add	fp, #20
128c4     A7 24 02 AB |  if_e	rdlong	local04, fp
128c8     14 4E 85 A1 |  if_e	sub	fp, #20
128cc     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
128d0     20 00 90 5D |  if_ne	jmp	#LR__1494
128d4     A7 20 02 FB | 	rdlong	local02, fp
128d8     0C 4E 05 F1 | 	add	fp, #12
128dc     A7 22 02 FB | 	rdlong	local03, fp
128e0     11 21 02 FD | 	qmul	local02, local03
128e4     0C 4E 85 F1 | 	sub	fp, #12
128e8     18 1E 62 FD | 	getqx	local01
128ec     A7 1E 62 FC | 	wrlong	local01, fp
128f0     8C 01 90 FD | 	jmp	#LR__1499
128f4                 | LR__1494
128f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
128f4     08 4E 05 F1 | 	add	fp, #8
128f8     A7 1E 02 FB | 	rdlong	local01, fp
128fc     08 4E 85 F1 | 	sub	fp, #8
12900     1C 1E 0E F2 | 	cmp	local01, #28 wz
12904     14 4E 05 A1 |  if_e	add	fp, #20
12908     A7 22 02 AB |  if_e	rdlong	local03, fp
1290c     14 4E 85 A1 |  if_e	sub	fp, #20
12910     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12914     40 00 90 5D |  if_ne	jmp	#LR__1495
12918     A7 12 02 FB | 	rdlong	arg01, fp
1291c     09 13 52 F6 | 	abs	arg01, arg01 wc
12920     1F 26 C6 C9 |  if_b	decod	local05, #31
12924     00 26 06 36 |  if_ae	mov	local05, #0
12928     94 0B B1 FD | 	call	#__system___float_fromuns
1292c     13 FB 61 F5 | 	xor	result1, local05
12930     FD 12 02 F6 | 	mov	arg01, result1
12934     0C 4E 05 F1 | 	add	fp, #12
12938     A7 14 02 FB | 	rdlong	arg02, fp
1293c     0C 4E 85 F1 | 	sub	fp, #12
12940     80 0F B1 FD | 	call	#__system___float_mul
12944     A7 FA 61 FC | 	wrlong	result1, fp
12948     08 4E 05 F1 | 	add	fp, #8
1294c     A7 3C 68 FC | 	wrlong	#30, fp
12950     08 4E 85 F1 | 	sub	fp, #8
12954     28 01 90 FD | 	jmp	#LR__1499
12958                 | LR__1495
12958                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
12958     08 4E 05 F1 | 	add	fp, #8
1295c     A7 1E 02 FB | 	rdlong	local01, fp
12960     08 4E 85 F1 | 	sub	fp, #8
12964     1E 1E 0E F2 | 	cmp	local01, #30 wz
12968     14 4E 05 A1 |  if_e	add	fp, #20
1296c     A7 22 02 AB |  if_e	rdlong	local03, fp
12970     14 4E 85 A1 |  if_e	sub	fp, #20
12974     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12978     28 00 90 5D |  if_ne	jmp	#LR__1496
1297c     A7 1E 02 FB | 	rdlong	local01, fp
12980     0C 4E 05 F1 | 	add	fp, #12
12984     A7 12 02 FB | 	rdlong	arg01, fp
12988     0C 4E 85 F1 | 	sub	fp, #12
1298c     30 0B B1 FD | 	call	#__system___float_fromuns
12990     FD 14 02 F6 | 	mov	arg02, result1
12994     0F 13 02 F6 | 	mov	arg01, local01
12998     28 0F B1 FD | 	call	#__system___float_mul
1299c     A7 FA 61 FC | 	wrlong	result1, fp
129a0     DC 00 90 FD | 	jmp	#LR__1499
129a4                 | LR__1496
129a4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
129a4     08 4E 05 F1 | 	add	fp, #8
129a8     A7 1E 02 FB | 	rdlong	local01, fp
129ac     08 4E 85 F1 | 	sub	fp, #8
129b0     1E 1E 0E F2 | 	cmp	local01, #30 wz
129b4     14 4E 05 A1 |  if_e	add	fp, #20
129b8     A7 22 02 AB |  if_e	rdlong	local03, fp
129bc     14 4E 85 A1 |  if_e	sub	fp, #20
129c0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
129c4     38 00 90 5D |  if_ne	jmp	#LR__1497
129c8     A7 1E 02 FB | 	rdlong	local01, fp
129cc     0C 4E 05 F1 | 	add	fp, #12
129d0     A7 12 02 FB | 	rdlong	arg01, fp
129d4     0C 4E 85 F1 | 	sub	fp, #12
129d8     09 13 52 F6 | 	abs	arg01, arg01 wc
129dc     1F 26 C6 C9 |  if_b	decod	local05, #31
129e0     00 26 06 36 |  if_ae	mov	local05, #0
129e4     D8 0A B1 FD | 	call	#__system___float_fromuns
129e8     13 FB 61 F5 | 	xor	result1, local05
129ec     FD 14 02 F6 | 	mov	arg02, result1
129f0     0F 13 02 F6 | 	mov	arg01, local01
129f4     CC 0E B1 FD | 	call	#__system___float_mul
129f8     A7 FA 61 FC | 	wrlong	result1, fp
129fc     80 00 90 FD | 	jmp	#LR__1499
12a00                 | LR__1497
12a00                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
12a00     08 4E 05 F1 | 	add	fp, #8
12a04     A7 1E 02 FB | 	rdlong	local01, fp
12a08     08 4E 85 F1 | 	sub	fp, #8
12a0c     1E 1E 0E F2 | 	cmp	local01, #30 wz
12a10     14 4E 05 A1 |  if_e	add	fp, #20
12a14     A7 22 02 AB |  if_e	rdlong	local03, fp
12a18     14 4E 85 A1 |  if_e	sub	fp, #20
12a1c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12a20     1C 00 90 5D |  if_ne	jmp	#LR__1498
12a24     A7 12 02 FB | 	rdlong	arg01, fp
12a28     0C 4E 05 F1 | 	add	fp, #12
12a2c     A7 14 02 FB | 	rdlong	arg02, fp
12a30     0C 4E 85 F1 | 	sub	fp, #12
12a34     8C 0E B1 FD | 	call	#__system___float_mul
12a38     A7 FA 61 FC | 	wrlong	result1, fp
12a3c     40 00 90 FD | 	jmp	#LR__1499
12a40                 | LR__1498
12a40                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
12a40     08 4E 05 F1 | 	add	fp, #8
12a44     A7 1E 02 FB | 	rdlong	local01, fp
12a48     08 4E 85 F1 | 	sub	fp, #8
12a4c     1F 1E 0E F2 | 	cmp	local01, #31 wz
12a50     14 4E 05 51 |  if_ne	add	fp, #20
12a54     A7 22 02 5B |  if_ne	rdlong	local03, fp
12a58     14 4E 85 51 |  if_ne	sub	fp, #20
12a5c     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
12a60     A7 10 68 AC |  if_e	wrlong	#8, fp
12a64     08 4E 05 A1 |  if_e	add	fp, #8
12a68     A7 FE 69 AC |  if_e	wrlong	#255, fp
12a6c     08 4E 85 A1 |  if_e	sub	fp, #8
12a70     A7 12 68 5C |  if_ne	wrlong	#9, fp
12a74     08 4E 05 51 |  if_ne	add	fp, #8
12a78     A7 FE 69 5C |  if_ne	wrlong	#255, fp
12a7c     08 4E 85 51 |  if_ne	sub	fp, #8
12a80                 | LR__1499
12a80     A7 12 02 F6 | 	mov	arg01, fp
12a84     D4 86 BF FD | 	call	#_push
12a88     A7 F0 03 F6 | 	mov	ptra, fp
12a8c     B2 00 A0 FD | 	call	#popregs_
12a90                 | _do_mul_ret
12a90     2D 00 64 FD | 	ret
12a94                 | 
12a94                 | ' 
12a94                 | ' sub do_div 
12a94                 | _do_div
12a94     01 4A 05 F6 | 	mov	COUNT_, #1
12a98     A8 00 A0 FD | 	call	#pushregs_
12a9c     18 F0 07 F1 | 	add	ptra, #24
12aa0     20 86 BF FD | 	call	#_pop
12aa4     FD 66 02 F6 | 	mov	muldivb_, result1
12aa8     FE 64 02 F6 | 	mov	muldiva_, result2
12aac     FF 1E 02 F6 | 	mov	local01, result3
12ab0     0C 4E 05 F1 | 	add	fp, #12
12ab4     A7 66 62 FC | 	wrlong	muldivb_, fp
12ab8     04 4E 05 F1 | 	add	fp, #4
12abc     A7 64 62 FC | 	wrlong	muldiva_, fp
12ac0     04 4E 05 F1 | 	add	fp, #4
12ac4     A7 1E 62 FC | 	wrlong	local01, fp
12ac8     14 4E 85 F1 | 	sub	fp, #20
12acc     F4 85 BF FD | 	call	#_pop
12ad0     A7 FA 61 FC | 	wrlong	result1, fp
12ad4     04 4E 05 F1 | 	add	fp, #4
12ad8     A7 FC 61 FC | 	wrlong	result2, fp
12adc     04 4E 05 F1 | 	add	fp, #4
12ae0     A7 FE 61 FC | 	wrlong	result3, fp
12ae4                 | ' 
12ae4                 | ' t2=pop()
12ae4                 | ' t1=pop()
12ae4                 | ' 
12ae4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
12ae4     08 4E 85 F1 | 	sub	fp, #8
12ae8     1F FE 0D F2 | 	cmp	result3, #31 wz
12aec     14 4E 05 51 |  if_ne	add	fp, #20
12af0     A7 12 02 5B |  if_ne	rdlong	arg01, fp
12af4     14 4E 85 51 |  if_ne	sub	fp, #20
12af8     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
12afc     A7 14 68 AC |  if_e	wrlong	#10, fp
12b00     08 4E 05 A1 |  if_e	add	fp, #8
12b04     A7 FE 69 AC |  if_e	wrlong	#255, fp
12b08     08 4E 85 A1 |  if_e	sub	fp, #8
12b0c     90 01 90 AD |  if_e	jmp	#LR__1506
12b10                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
12b10     08 4E 05 F1 | 	add	fp, #8
12b14     A7 66 02 FB | 	rdlong	muldivb_, fp
12b18     08 4E 85 F1 | 	sub	fp, #8
12b1c     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
12b20     1C 00 90 5D |  if_ne	jmp	#LR__1500
12b24     08 4E 05 F1 | 	add	fp, #8
12b28     A7 38 68 FC | 	wrlong	#28, fp
12b2c     08 4E 85 F1 | 	sub	fp, #8
12b30     A7 12 02 FB | 	rdlong	arg01, fp
12b34     00 14 06 F6 | 	mov	arg02, #0
12b38     50 12 B1 FD | 	call	#__system___float_tointeger
12b3c     A7 FA 61 FC | 	wrlong	result1, fp
12b40                 | LR__1500
12b40                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
12b40     14 4E 05 F1 | 	add	fp, #20
12b44     A7 66 02 FB | 	rdlong	muldivb_, fp
12b48     14 4E 85 F1 | 	sub	fp, #20
12b4c     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
12b50     28 00 90 5D |  if_ne	jmp	#LR__1501
12b54     14 4E 05 F1 | 	add	fp, #20
12b58     A7 38 68 FC | 	wrlong	#28, fp
12b5c     08 4E 85 F1 | 	sub	fp, #8
12b60     A7 12 02 FB | 	rdlong	arg01, fp
12b64     0C 4E 85 F1 | 	sub	fp, #12
12b68     00 14 06 F6 | 	mov	arg02, #0
12b6c     1C 12 B1 FD | 	call	#__system___float_tointeger
12b70     0C 4E 05 F1 | 	add	fp, #12
12b74     A7 FA 61 FC | 	wrlong	result1, fp
12b78     0C 4E 85 F1 | 	sub	fp, #12
12b7c                 | LR__1501
12b7c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
12b7c     08 4E 05 F1 | 	add	fp, #8
12b80     A7 66 02 FB | 	rdlong	muldivb_, fp
12b84     08 4E 85 F1 | 	sub	fp, #8
12b88     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
12b8c     14 4E 05 A1 |  if_e	add	fp, #20
12b90     A7 1E 02 AB |  if_e	rdlong	local01, fp
12b94     14 4E 85 A1 |  if_e	sub	fp, #20
12b98     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
12b9c     20 00 90 5D |  if_ne	jmp	#LR__1502
12ba0     0C 4E 05 F1 | 	add	fp, #12
12ba4     A7 1E 02 FB | 	rdlong	local01, fp
12ba8     0C 4E 85 F1 | 	sub	fp, #12
12bac     A7 66 02 FB | 	rdlong	muldivb_, fp
12bb0     0F 67 12 FD | 	qdiv	muldivb_, local01
12bb4     18 1E 62 FD | 	getqx	local01
12bb8     A7 1E 62 FC | 	wrlong	local01, fp
12bbc     E0 00 90 FD | 	jmp	#LR__1506
12bc0                 | LR__1502
12bc0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
12bc0     08 4E 05 F1 | 	add	fp, #8
12bc4     A7 66 02 FB | 	rdlong	muldivb_, fp
12bc8     08 4E 85 F1 | 	sub	fp, #8
12bcc     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
12bd0     14 4E 05 A1 |  if_e	add	fp, #20
12bd4     A7 1E 02 AB |  if_e	rdlong	local01, fp
12bd8     14 4E 85 A1 |  if_e	sub	fp, #20
12bdc     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
12be0     2C 00 90 5D |  if_ne	jmp	#LR__1503
12be4     0C 4E 05 F1 | 	add	fp, #12
12be8     A7 1E 02 FB | 	rdlong	local01, fp
12bec     0C 4E 85 F1 | 	sub	fp, #12
12bf0     A7 66 02 FB | 	rdlong	muldivb_, fp
12bf4     0F 67 12 FD | 	qdiv	muldivb_, local01
12bf8     18 1E 62 FD | 	getqx	local01
12bfc     A7 1E 62 FC | 	wrlong	local01, fp
12c00     08 4E 05 F1 | 	add	fp, #8
12c04     A7 38 68 FC | 	wrlong	#28, fp
12c08     08 4E 85 F1 | 	sub	fp, #8
12c0c     90 00 90 FD | 	jmp	#LR__1506
12c10                 | LR__1503
12c10                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
12c10     08 4E 05 F1 | 	add	fp, #8
12c14     A7 66 02 FB | 	rdlong	muldivb_, fp
12c18     08 4E 85 F1 | 	sub	fp, #8
12c1c     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
12c20     14 4E 05 A1 |  if_e	add	fp, #20
12c24     A7 1E 02 AB |  if_e	rdlong	local01, fp
12c28     14 4E 85 A1 |  if_e	sub	fp, #20
12c2c     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
12c30     1C 00 90 5D |  if_ne	jmp	#LR__1504
12c34     A7 64 02 FB | 	rdlong	muldiva_, fp
12c38     0C 4E 05 F1 | 	add	fp, #12
12c3c     A7 66 02 FB | 	rdlong	muldivb_, fp
12c40     0C 4E 85 F1 | 	sub	fp, #12
12c44     BA 00 A0 FD | 	call	#divide_
12c48     A7 66 62 FC | 	wrlong	muldivb_, fp
12c4c     50 00 90 FD | 	jmp	#LR__1506
12c50                 | LR__1504
12c50                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
12c50     08 4E 05 F1 | 	add	fp, #8
12c54     A7 66 02 FB | 	rdlong	muldivb_, fp
12c58     08 4E 85 F1 | 	sub	fp, #8
12c5c     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
12c60     14 4E 05 A1 |  if_e	add	fp, #20
12c64     A7 1E 02 AB |  if_e	rdlong	local01, fp
12c68     14 4E 85 A1 |  if_e	sub	fp, #20
12c6c     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
12c70     1C 00 90 5D |  if_ne	jmp	#LR__1505
12c74     A7 64 02 FB | 	rdlong	muldiva_, fp
12c78     0C 4E 05 F1 | 	add	fp, #12
12c7c     A7 66 02 FB | 	rdlong	muldivb_, fp
12c80     0C 4E 85 F1 | 	sub	fp, #12
12c84     BA 00 A0 FD | 	call	#divide_
12c88     A7 66 62 FC | 	wrlong	muldivb_, fp
12c8c     10 00 90 FD | 	jmp	#LR__1506
12c90                 | LR__1505
12c90     A7 16 68 FC | 	wrlong	#11, fp
12c94     08 4E 05 F1 | 	add	fp, #8
12c98     A7 FE 69 FC | 	wrlong	#255, fp
12c9c     08 4E 85 F1 | 	sub	fp, #8
12ca0                 | LR__1506
12ca0     A7 12 02 F6 | 	mov	arg01, fp
12ca4     B4 84 BF FD | 	call	#_push
12ca8     A7 F0 03 F6 | 	mov	ptra, fp
12cac     B2 00 A0 FD | 	call	#popregs_
12cb0                 | _do_div_ret
12cb0     2D 00 64 FD | 	ret
12cb4                 | 
12cb4                 | ' 
12cb4                 | ' sub do_fdiv 
12cb4                 | _do_fdiv
12cb4     02 4A 05 F6 | 	mov	COUNT_, #2
12cb8     A8 00 A0 FD | 	call	#pushregs_
12cbc     18 F0 07 F1 | 	add	ptra, #24
12cc0     00 84 BF FD | 	call	#_pop
12cc4     FD 14 02 F6 | 	mov	arg02, result1
12cc8     FE 12 02 F6 | 	mov	arg01, result2
12ccc     FF 1E 02 F6 | 	mov	local01, result3
12cd0     0C 4E 05 F1 | 	add	fp, #12
12cd4     A7 14 62 FC | 	wrlong	arg02, fp
12cd8     04 4E 05 F1 | 	add	fp, #4
12cdc     A7 12 62 FC | 	wrlong	arg01, fp
12ce0     04 4E 05 F1 | 	add	fp, #4
12ce4     A7 1E 62 FC | 	wrlong	local01, fp
12ce8     14 4E 85 F1 | 	sub	fp, #20
12cec     D4 83 BF FD | 	call	#_pop
12cf0     A7 FA 61 FC | 	wrlong	result1, fp
12cf4     04 4E 05 F1 | 	add	fp, #4
12cf8     A7 FC 61 FC | 	wrlong	result2, fp
12cfc     04 4E 05 F1 | 	add	fp, #4
12d00     A7 FE 61 FC | 	wrlong	result3, fp
12d04                 | ' 
12d04                 | ' t2=pop()
12d04                 | ' t1=pop()
12d04                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
12d04     08 4E 85 F1 | 	sub	fp, #8
12d08     1F FE 0D F2 | 	cmp	result3, #31 wz
12d0c     14 4E 05 51 |  if_ne	add	fp, #20
12d10     A7 1E 02 5B |  if_ne	rdlong	local01, fp
12d14     14 4E 85 51 |  if_ne	sub	fp, #20
12d18     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
12d1c     A7 14 68 AC |  if_e	wrlong	#10, fp
12d20     08 4E 05 A1 |  if_e	add	fp, #8
12d24     A7 FE 69 AC |  if_e	wrlong	#255, fp
12d28     08 4E 85 A1 |  if_e	sub	fp, #8
12d2c     38 01 90 AD |  if_e	jmp	#LR__1515
12d30                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
12d30     08 4E 05 F1 | 	add	fp, #8
12d34     A7 14 02 FB | 	rdlong	arg02, fp
12d38     08 4E 85 F1 | 	sub	fp, #8
12d3c     1C 14 0E F2 | 	cmp	arg02, #28 wz
12d40     28 00 90 5D |  if_ne	jmp	#LR__1510
12d44     08 4E 05 F1 | 	add	fp, #8
12d48     A7 3C 68 FC | 	wrlong	#30, fp
12d4c     08 4E 85 F1 | 	sub	fp, #8
12d50     A7 12 02 FB | 	rdlong	arg01, fp
12d54     09 13 52 F6 | 	abs	arg01, arg01 wc
12d58     1F 20 C6 C9 |  if_b	decod	local02, #31
12d5c     00 20 06 36 |  if_ae	mov	local02, #0
12d60     5C 07 B1 FD | 	call	#__system___float_fromuns
12d64     10 FB 61 F5 | 	xor	result1, local02
12d68     A7 FA 61 FC | 	wrlong	result1, fp
12d6c                 | LR__1510
12d6c                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
12d6c     08 4E 05 F1 | 	add	fp, #8
12d70     A7 14 02 FB | 	rdlong	arg02, fp
12d74     08 4E 85 F1 | 	sub	fp, #8
12d78     1D 14 0E F2 | 	cmp	arg02, #29 wz
12d7c     18 00 90 5D |  if_ne	jmp	#LR__1511
12d80     08 4E 05 F1 | 	add	fp, #8
12d84     A7 3C 68 FC | 	wrlong	#30, fp
12d88     08 4E 85 F1 | 	sub	fp, #8
12d8c     A7 12 02 FB | 	rdlong	arg01, fp
12d90     2C 07 B1 FD | 	call	#__system___float_fromuns
12d94     A7 FA 61 FC | 	wrlong	result1, fp
12d98                 | LR__1511
12d98                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
12d98     14 4E 05 F1 | 	add	fp, #20
12d9c     A7 14 02 FB | 	rdlong	arg02, fp
12da0     14 4E 85 F1 | 	sub	fp, #20
12da4     1C 14 0E F2 | 	cmp	arg02, #28 wz
12da8     34 00 90 5D |  if_ne	jmp	#LR__1512
12dac     14 4E 05 F1 | 	add	fp, #20
12db0     A7 3C 68 FC | 	wrlong	#30, fp
12db4     08 4E 85 F1 | 	sub	fp, #8
12db8     A7 12 02 FB | 	rdlong	arg01, fp
12dbc     0C 4E 85 F1 | 	sub	fp, #12
12dc0     09 13 52 F6 | 	abs	arg01, arg01 wc
12dc4     1F 20 C6 C9 |  if_b	decod	local02, #31
12dc8     00 20 06 36 |  if_ae	mov	local02, #0
12dcc     F0 06 B1 FD | 	call	#__system___float_fromuns
12dd0     10 FB 61 F5 | 	xor	result1, local02
12dd4     0C 4E 05 F1 | 	add	fp, #12
12dd8     A7 FA 61 FC | 	wrlong	result1, fp
12ddc     0C 4E 85 F1 | 	sub	fp, #12
12de0                 | LR__1512
12de0                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
12de0     14 4E 05 F1 | 	add	fp, #20
12de4     A7 14 02 FB | 	rdlong	arg02, fp
12de8     14 4E 85 F1 | 	sub	fp, #20
12dec     1D 14 0E F2 | 	cmp	arg02, #29 wz
12df0     24 00 90 5D |  if_ne	jmp	#LR__1513
12df4     14 4E 05 F1 | 	add	fp, #20
12df8     A7 3C 68 FC | 	wrlong	#30, fp
12dfc     08 4E 85 F1 | 	sub	fp, #8
12e00     A7 12 02 FB | 	rdlong	arg01, fp
12e04     0C 4E 85 F1 | 	sub	fp, #12
12e08     B4 06 B1 FD | 	call	#__system___float_fromuns
12e0c     0C 4E 05 F1 | 	add	fp, #12
12e10     A7 FA 61 FC | 	wrlong	result1, fp
12e14     0C 4E 85 F1 | 	sub	fp, #12
12e18                 | LR__1513
12e18                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
12e18     08 4E 05 F1 | 	add	fp, #8
12e1c     A7 14 02 FB | 	rdlong	arg02, fp
12e20     08 4E 85 F1 | 	sub	fp, #8
12e24     1E 14 0E F2 | 	cmp	arg02, #30 wz
12e28     14 4E 05 A1 |  if_e	add	fp, #20
12e2c     A7 1E 02 AB |  if_e	rdlong	local01, fp
12e30     14 4E 85 A1 |  if_e	sub	fp, #20
12e34     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
12e38     1C 00 90 5D |  if_ne	jmp	#LR__1514
12e3c     A7 12 02 FB | 	rdlong	arg01, fp
12e40     0C 4E 05 F1 | 	add	fp, #12
12e44     A7 14 02 FB | 	rdlong	arg02, fp
12e48     0C 4E 85 F1 | 	sub	fp, #12
12e4c     78 0C B1 FD | 	call	#__system___float_div
12e50     A7 FA 61 FC | 	wrlong	result1, fp
12e54     10 00 90 FD | 	jmp	#LR__1515
12e58                 | LR__1514
12e58     A7 16 68 FC | 	wrlong	#11, fp
12e5c     08 4E 05 F1 | 	add	fp, #8
12e60     A7 FE 69 FC | 	wrlong	#255, fp
12e64     08 4E 85 F1 | 	sub	fp, #8
12e68                 | LR__1515
12e68     A7 12 02 F6 | 	mov	arg01, fp
12e6c     EC 82 BF FD | 	call	#_push
12e70     A7 F0 03 F6 | 	mov	ptra, fp
12e74     B2 00 A0 FD | 	call	#popregs_
12e78                 | _do_fdiv_ret
12e78     2D 00 64 FD | 	ret
12e7c                 | 
12e7c                 | ' 
12e7c                 | ' 
12e7c                 | ' sub do_mod 
12e7c                 | _do_mod
12e7c     01 4A 05 F6 | 	mov	COUNT_, #1
12e80     A8 00 A0 FD | 	call	#pushregs_
12e84     18 F0 07 F1 | 	add	ptra, #24
12e88     38 82 BF FD | 	call	#_pop
12e8c     FD 66 02 F6 | 	mov	muldivb_, result1
12e90     FE 64 02 F6 | 	mov	muldiva_, result2
12e94     FF 1E 02 F6 | 	mov	local01, result3
12e98     0C 4E 05 F1 | 	add	fp, #12
12e9c     A7 66 62 FC | 	wrlong	muldivb_, fp
12ea0     04 4E 05 F1 | 	add	fp, #4
12ea4     A7 64 62 FC | 	wrlong	muldiva_, fp
12ea8     04 4E 05 F1 | 	add	fp, #4
12eac     A7 1E 62 FC | 	wrlong	local01, fp
12eb0     14 4E 85 F1 | 	sub	fp, #20
12eb4     0C 82 BF FD | 	call	#_pop
12eb8     A7 FA 61 FC | 	wrlong	result1, fp
12ebc     04 4E 05 F1 | 	add	fp, #4
12ec0     A7 FC 61 FC | 	wrlong	result2, fp
12ec4     04 4E 05 F1 | 	add	fp, #4
12ec8     A7 FE 61 FC | 	wrlong	result3, fp
12ecc                 | ' 
12ecc                 | ' t2=pop()
12ecc                 | ' t1=pop()
12ecc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
12ecc     08 4E 85 F1 | 	sub	fp, #8
12ed0     1F FE 0D F2 | 	cmp	result3, #31 wz
12ed4     14 4E 05 51 |  if_ne	add	fp, #20
12ed8     A7 12 02 5B |  if_ne	rdlong	arg01, fp
12edc     14 4E 85 51 |  if_ne	sub	fp, #20
12ee0     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
12ee4     A7 14 68 AC |  if_e	wrlong	#10, fp
12ee8     08 4E 05 A1 |  if_e	add	fp, #8
12eec     A7 FE 69 AC |  if_e	wrlong	#255, fp
12ef0     08 4E 85 A1 |  if_e	sub	fp, #8
12ef4     90 01 90 AD |  if_e	jmp	#LR__1526
12ef8                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
12ef8     08 4E 05 F1 | 	add	fp, #8
12efc     A7 66 02 FB | 	rdlong	muldivb_, fp
12f00     08 4E 85 F1 | 	sub	fp, #8
12f04     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
12f08     1C 00 90 5D |  if_ne	jmp	#LR__1520
12f0c     08 4E 05 F1 | 	add	fp, #8
12f10     A7 38 68 FC | 	wrlong	#28, fp
12f14     08 4E 85 F1 | 	sub	fp, #8
12f18     A7 12 02 FB | 	rdlong	arg01, fp
12f1c     00 14 06 F6 | 	mov	arg02, #0
12f20     68 0E B1 FD | 	call	#__system___float_tointeger
12f24     A7 FA 61 FC | 	wrlong	result1, fp
12f28                 | LR__1520
12f28                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
12f28     14 4E 05 F1 | 	add	fp, #20
12f2c     A7 66 02 FB | 	rdlong	muldivb_, fp
12f30     14 4E 85 F1 | 	sub	fp, #20
12f34     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
12f38     28 00 90 5D |  if_ne	jmp	#LR__1521
12f3c     14 4E 05 F1 | 	add	fp, #20
12f40     A7 38 68 FC | 	wrlong	#28, fp
12f44     08 4E 85 F1 | 	sub	fp, #8
12f48     A7 12 02 FB | 	rdlong	arg01, fp
12f4c     0C 4E 85 F1 | 	sub	fp, #12
12f50     00 14 06 F6 | 	mov	arg02, #0
12f54     34 0E B1 FD | 	call	#__system___float_tointeger
12f58     0C 4E 05 F1 | 	add	fp, #12
12f5c     A7 FA 61 FC | 	wrlong	result1, fp
12f60     0C 4E 85 F1 | 	sub	fp, #12
12f64                 | LR__1521
12f64                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
12f64     08 4E 05 F1 | 	add	fp, #8
12f68     A7 66 02 FB | 	rdlong	muldivb_, fp
12f6c     08 4E 85 F1 | 	sub	fp, #8
12f70     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
12f74     14 4E 05 A1 |  if_e	add	fp, #20
12f78     A7 1E 02 AB |  if_e	rdlong	local01, fp
12f7c     14 4E 85 A1 |  if_e	sub	fp, #20
12f80     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
12f84     20 00 90 5D |  if_ne	jmp	#LR__1522
12f88     0C 4E 05 F1 | 	add	fp, #12
12f8c     A7 1E 02 FB | 	rdlong	local01, fp
12f90     0C 4E 85 F1 | 	sub	fp, #12
12f94     A7 66 02 FB | 	rdlong	muldivb_, fp
12f98     0F 67 12 FD | 	qdiv	muldivb_, local01
12f9c     19 1E 62 FD | 	getqy	local01
12fa0     A7 1E 62 FC | 	wrlong	local01, fp
12fa4     E0 00 90 FD | 	jmp	#LR__1526
12fa8                 | LR__1522
12fa8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
12fa8     08 4E 05 F1 | 	add	fp, #8
12fac     A7 66 02 FB | 	rdlong	muldivb_, fp
12fb0     08 4E 85 F1 | 	sub	fp, #8
12fb4     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
12fb8     14 4E 05 A1 |  if_e	add	fp, #20
12fbc     A7 1E 02 AB |  if_e	rdlong	local01, fp
12fc0     14 4E 85 A1 |  if_e	sub	fp, #20
12fc4     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
12fc8     2C 00 90 5D |  if_ne	jmp	#LR__1523
12fcc     0C 4E 05 F1 | 	add	fp, #12
12fd0     A7 1E 02 FB | 	rdlong	local01, fp
12fd4     0C 4E 85 F1 | 	sub	fp, #12
12fd8     A7 66 02 FB | 	rdlong	muldivb_, fp
12fdc     0F 67 12 FD | 	qdiv	muldivb_, local01
12fe0     19 1E 62 FD | 	getqy	local01
12fe4     A7 1E 62 FC | 	wrlong	local01, fp
12fe8     08 4E 05 F1 | 	add	fp, #8
12fec     A7 38 68 FC | 	wrlong	#28, fp
12ff0     08 4E 85 F1 | 	sub	fp, #8
12ff4     90 00 90 FD | 	jmp	#LR__1526
12ff8                 | LR__1523
12ff8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
12ff8     08 4E 05 F1 | 	add	fp, #8
12ffc     A7 66 02 FB | 	rdlong	muldivb_, fp
13000     08 4E 85 F1 | 	sub	fp, #8
13004     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
13008     14 4E 05 A1 |  if_e	add	fp, #20
1300c     A7 1E 02 AB |  if_e	rdlong	local01, fp
13010     14 4E 85 A1 |  if_e	sub	fp, #20
13014     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
13018     1C 00 90 5D |  if_ne	jmp	#LR__1524
1301c     A7 64 02 FB | 	rdlong	muldiva_, fp
13020     0C 4E 05 F1 | 	add	fp, #12
13024     A7 66 02 FB | 	rdlong	muldivb_, fp
13028     0C 4E 85 F1 | 	sub	fp, #12
1302c     BA 00 A0 FD | 	call	#divide_
13030     A7 64 62 FC | 	wrlong	muldiva_, fp
13034     50 00 90 FD | 	jmp	#LR__1526
13038                 | LR__1524
13038                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
13038     08 4E 05 F1 | 	add	fp, #8
1303c     A7 66 02 FB | 	rdlong	muldivb_, fp
13040     08 4E 85 F1 | 	sub	fp, #8
13044     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
13048     14 4E 05 A1 |  if_e	add	fp, #20
1304c     A7 1E 02 AB |  if_e	rdlong	local01, fp
13050     14 4E 85 A1 |  if_e	sub	fp, #20
13054     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
13058     1C 00 90 5D |  if_ne	jmp	#LR__1525
1305c     A7 64 02 FB | 	rdlong	muldiva_, fp
13060     0C 4E 05 F1 | 	add	fp, #12
13064     A7 66 02 FB | 	rdlong	muldivb_, fp
13068     0C 4E 85 F1 | 	sub	fp, #12
1306c     BA 00 A0 FD | 	call	#divide_
13070     A7 64 62 FC | 	wrlong	muldiva_, fp
13074     10 00 90 FD | 	jmp	#LR__1526
13078                 | LR__1525
13078     A7 16 68 FC | 	wrlong	#11, fp
1307c     08 4E 05 F1 | 	add	fp, #8
13080     A7 FE 69 FC | 	wrlong	#255, fp
13084     08 4E 85 F1 | 	sub	fp, #8
13088                 | LR__1526
13088     A7 12 02 F6 | 	mov	arg01, fp
1308c     CC 80 BF FD | 	call	#_push
13090     A7 F0 03 F6 | 	mov	ptra, fp
13094     B2 00 A0 FD | 	call	#popregs_
13098                 | _do_mod_ret
13098     2D 00 64 FD | 	ret
1309c                 | 
1309c                 | ' 
1309c                 | ' sub do_shl 
1309c                 | _do_shl
1309c     03 4A 05 F6 | 	mov	COUNT_, #3
130a0     A8 00 A0 FD | 	call	#pushregs_
130a4     18 F0 07 F1 | 	add	ptra, #24
130a8     18 80 BF FD | 	call	#_pop
130ac     FD 12 02 F6 | 	mov	arg01, result1
130b0     FE 1E 02 F6 | 	mov	local01, result2
130b4     FF 20 02 F6 | 	mov	local02, result3
130b8     0C 4E 05 F1 | 	add	fp, #12
130bc     A7 12 62 FC | 	wrlong	arg01, fp
130c0     04 4E 05 F1 | 	add	fp, #4
130c4     A7 1E 62 FC | 	wrlong	local01, fp
130c8     04 4E 05 F1 | 	add	fp, #4
130cc     A7 20 62 FC | 	wrlong	local02, fp
130d0     14 4E 85 F1 | 	sub	fp, #20
130d4     EC 7F BF FD | 	call	#_pop
130d8     FF 22 02 F6 | 	mov	local03, result3
130dc     A7 FA 61 FC | 	wrlong	result1, fp
130e0     04 4E 05 F1 | 	add	fp, #4
130e4     A7 FC 61 FC | 	wrlong	result2, fp
130e8     04 4E 05 F1 | 	add	fp, #4
130ec     A7 22 62 FC | 	wrlong	local03, fp
130f0                 | ' 
130f0                 | ' t2=pop()
130f0                 | ' t1=pop()
130f0                 | ' 
130f0                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
130f0     08 4E 85 F1 | 	sub	fp, #8
130f4     1C 22 0E F2 | 	cmp	local03, #28 wz
130f8     A7 22 02 AB |  if_e	rdlong	local03, fp
130fc     A7 22 62 AC |  if_e	wrlong	local03, fp
13100     08 4E 05 A1 |  if_e	add	fp, #8
13104     A7 3A 68 AC |  if_e	wrlong	#29, fp
13108     08 4E 85 A1 |  if_e	sub	fp, #8
1310c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1310c     14 4E 05 F1 | 	add	fp, #20
13110     A7 22 02 FB | 	rdlong	local03, fp
13114     14 4E 85 F1 | 	sub	fp, #20
13118     1C 22 0E F2 | 	cmp	local03, #28 wz
1311c     18 00 90 5D |  if_ne	jmp	#LR__1530
13120     0C 4E 05 F1 | 	add	fp, #12
13124     A7 22 02 FB | 	rdlong	local03, fp
13128     A7 22 62 FC | 	wrlong	local03, fp
1312c     08 4E 05 F1 | 	add	fp, #8
13130     A7 3A 68 FC | 	wrlong	#29, fp
13134     14 4E 85 F1 | 	sub	fp, #20
13138                 | LR__1530
13138                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
13138     08 4E 05 F1 | 	add	fp, #8
1313c     A7 22 02 FB | 	rdlong	local03, fp
13140     08 4E 85 F1 | 	sub	fp, #8
13144     1F 22 0E F2 | 	cmp	local03, #31 wz
13148     14 4E 05 51 |  if_ne	add	fp, #20
1314c     A7 20 02 5B |  if_ne	rdlong	local02, fp
13150     14 4E 85 51 |  if_ne	sub	fp, #20
13154     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
13158     08 4E 05 51 |  if_ne	add	fp, #8
1315c     A7 22 02 5B |  if_ne	rdlong	local03, fp
13160     08 4E 85 51 |  if_ne	sub	fp, #8
13164     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
13168     14 4E 05 51 |  if_ne	add	fp, #20
1316c     14 4E 85 51 |  if_ne	sub	fp, #20
13170     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
13174     A7 0C 68 AC |  if_e	wrlong	#6, fp
13178     08 4E 05 A1 |  if_e	add	fp, #8
1317c     A7 FE 69 AC |  if_e	wrlong	#255, fp
13180     08 4E 85 A1 |  if_e	sub	fp, #8
13184     18 00 90 AD |  if_e	jmp	#LR__1531
13188     A7 22 02 FB | 	rdlong	local03, fp
1318c     0C 4E 05 F1 | 	add	fp, #12
13190     A7 1E 02 FB | 	rdlong	local01, fp
13194     0C 4E 85 F1 | 	sub	fp, #12
13198     0F 23 62 F0 | 	shl	local03, local01
1319c     A7 22 62 FC | 	wrlong	local03, fp
131a0                 | LR__1531
131a0     A7 12 02 F6 | 	mov	arg01, fp
131a4     B4 7F BF FD | 	call	#_push
131a8     A7 F0 03 F6 | 	mov	ptra, fp
131ac     B2 00 A0 FD | 	call	#popregs_
131b0                 | _do_shl_ret
131b0     2D 00 64 FD | 	ret
131b4                 | 
131b4                 | ' 
131b4                 | ' sub do_shr 
131b4                 | _do_shr
131b4     03 4A 05 F6 | 	mov	COUNT_, #3
131b8     A8 00 A0 FD | 	call	#pushregs_
131bc     18 F0 07 F1 | 	add	ptra, #24
131c0     00 7F BF FD | 	call	#_pop
131c4     FD 12 02 F6 | 	mov	arg01, result1
131c8     FE 1E 02 F6 | 	mov	local01, result2
131cc     FF 20 02 F6 | 	mov	local02, result3
131d0     0C 4E 05 F1 | 	add	fp, #12
131d4     A7 12 62 FC | 	wrlong	arg01, fp
131d8     04 4E 05 F1 | 	add	fp, #4
131dc     A7 1E 62 FC | 	wrlong	local01, fp
131e0     04 4E 05 F1 | 	add	fp, #4
131e4     A7 20 62 FC | 	wrlong	local02, fp
131e8     14 4E 85 F1 | 	sub	fp, #20
131ec     D4 7E BF FD | 	call	#_pop
131f0     FF 22 02 F6 | 	mov	local03, result3
131f4     A7 FA 61 FC | 	wrlong	result1, fp
131f8     04 4E 05 F1 | 	add	fp, #4
131fc     A7 FC 61 FC | 	wrlong	result2, fp
13200     04 4E 05 F1 | 	add	fp, #4
13204     A7 22 62 FC | 	wrlong	local03, fp
13208                 | ' t2=pop()
13208                 | ' t1=pop()
13208                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
13208     08 4E 85 F1 | 	sub	fp, #8
1320c     1C 22 0E F2 | 	cmp	local03, #28 wz
13210     A7 22 02 AB |  if_e	rdlong	local03, fp
13214     A7 22 62 AC |  if_e	wrlong	local03, fp
13218     08 4E 05 A1 |  if_e	add	fp, #8
1321c     A7 3A 68 AC |  if_e	wrlong	#29, fp
13220     08 4E 85 A1 |  if_e	sub	fp, #8
13224                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
13224     14 4E 05 F1 | 	add	fp, #20
13228     A7 22 02 FB | 	rdlong	local03, fp
1322c     14 4E 85 F1 | 	sub	fp, #20
13230     1C 22 0E F2 | 	cmp	local03, #28 wz
13234     18 00 90 5D |  if_ne	jmp	#LR__1540
13238     0C 4E 05 F1 | 	add	fp, #12
1323c     A7 22 02 FB | 	rdlong	local03, fp
13240     A7 22 62 FC | 	wrlong	local03, fp
13244     08 4E 05 F1 | 	add	fp, #8
13248     A7 3A 68 FC | 	wrlong	#29, fp
1324c     14 4E 85 F1 | 	sub	fp, #20
13250                 | LR__1540
13250                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
13250     08 4E 05 F1 | 	add	fp, #8
13254     A7 22 02 FB | 	rdlong	local03, fp
13258     08 4E 85 F1 | 	sub	fp, #8
1325c     1F 22 0E F2 | 	cmp	local03, #31 wz
13260     14 4E 05 51 |  if_ne	add	fp, #20
13264     A7 20 02 5B |  if_ne	rdlong	local02, fp
13268     14 4E 85 51 |  if_ne	sub	fp, #20
1326c     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
13270     08 4E 05 51 |  if_ne	add	fp, #8
13274     A7 22 02 5B |  if_ne	rdlong	local03, fp
13278     08 4E 85 51 |  if_ne	sub	fp, #8
1327c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
13280     14 4E 05 51 |  if_ne	add	fp, #20
13284     14 4E 85 51 |  if_ne	sub	fp, #20
13288     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
1328c     A7 0C 68 AC |  if_e	wrlong	#6, fp
13290     08 4E 05 A1 |  if_e	add	fp, #8
13294     A7 FE 69 AC |  if_e	wrlong	#255, fp
13298     08 4E 85 A1 |  if_e	sub	fp, #8
1329c     18 00 90 AD |  if_e	jmp	#LR__1541
132a0     A7 22 02 FB | 	rdlong	local03, fp
132a4     0C 4E 05 F1 | 	add	fp, #12
132a8     A7 1E 02 FB | 	rdlong	local01, fp
132ac     0C 4E 85 F1 | 	sub	fp, #12
132b0     0F 23 42 F0 | 	shr	local03, local01
132b4     A7 22 62 FC | 	wrlong	local03, fp
132b8                 | LR__1541
132b8     A7 12 02 F6 | 	mov	arg01, fp
132bc     9C 7E BF FD | 	call	#_push
132c0     A7 F0 03 F6 | 	mov	ptra, fp
132c4     B2 00 A0 FD | 	call	#popregs_
132c8                 | _do_shr_ret
132c8     2D 00 64 FD | 	ret
132cc                 | 
132cc                 | ' 
132cc                 | ' sub do_power 
132cc                 | _do_power
132cc     02 4A 05 F6 | 	mov	COUNT_, #2
132d0     A8 00 A0 FD | 	call	#pushregs_
132d4     18 F0 07 F1 | 	add	ptra, #24
132d8     E8 7D BF FD | 	call	#_pop
132dc     FD 14 02 F6 | 	mov	arg02, result1
132e0     FE 12 02 F6 | 	mov	arg01, result2
132e4     FF 1E 02 F6 | 	mov	local01, result3
132e8     0C 4E 05 F1 | 	add	fp, #12
132ec     A7 14 62 FC | 	wrlong	arg02, fp
132f0     04 4E 05 F1 | 	add	fp, #4
132f4     A7 12 62 FC | 	wrlong	arg01, fp
132f8     04 4E 05 F1 | 	add	fp, #4
132fc     A7 1E 62 FC | 	wrlong	local01, fp
13300     14 4E 85 F1 | 	sub	fp, #20
13304     BC 7D BF FD | 	call	#_pop
13308     A7 FA 61 FC | 	wrlong	result1, fp
1330c     04 4E 05 F1 | 	add	fp, #4
13310     A7 FC 61 FC | 	wrlong	result2, fp
13314     04 4E 05 F1 | 	add	fp, #4
13318     A7 FE 61 FC | 	wrlong	result3, fp
1331c                 | ' t2=pop()
1331c                 | ' t1=pop()
1331c                 | ' 
1331c                 | ' 
1331c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
1331c     08 4E 85 F1 | 	sub	fp, #8
13320     1F FE 0D F2 | 	cmp	result3, #31 wz
13324     14 4E 05 51 |  if_ne	add	fp, #20
13328     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1332c     14 4E 85 51 |  if_ne	sub	fp, #20
13330     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
13334     A7 18 68 AC |  if_e	wrlong	#12, fp
13338     08 4E 05 A1 |  if_e	add	fp, #8
1333c     A7 FE 69 AC |  if_e	wrlong	#255, fp
13340     08 4E 85 A1 |  if_e	sub	fp, #8
13344     38 01 90 AD |  if_e	jmp	#LR__1555
13348                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
13348     08 4E 05 F1 | 	add	fp, #8
1334c     A7 14 02 FB | 	rdlong	arg02, fp
13350     08 4E 85 F1 | 	sub	fp, #8
13354     1C 14 0E F2 | 	cmp	arg02, #28 wz
13358     28 00 90 5D |  if_ne	jmp	#LR__1550
1335c     08 4E 05 F1 | 	add	fp, #8
13360     A7 3C 68 FC | 	wrlong	#30, fp
13364     08 4E 85 F1 | 	sub	fp, #8
13368     A7 12 02 FB | 	rdlong	arg01, fp
1336c     09 13 52 F6 | 	abs	arg01, arg01 wc
13370     1F 20 C6 C9 |  if_b	decod	local02, #31
13374     00 20 06 36 |  if_ae	mov	local02, #0
13378     44 01 B1 FD | 	call	#__system___float_fromuns
1337c     10 FB 61 F5 | 	xor	result1, local02
13380     A7 FA 61 FC | 	wrlong	result1, fp
13384                 | LR__1550
13384                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
13384     08 4E 05 F1 | 	add	fp, #8
13388     A7 14 02 FB | 	rdlong	arg02, fp
1338c     08 4E 85 F1 | 	sub	fp, #8
13390     1D 14 0E F2 | 	cmp	arg02, #29 wz
13394     18 00 90 5D |  if_ne	jmp	#LR__1551
13398     08 4E 05 F1 | 	add	fp, #8
1339c     A7 3C 68 FC | 	wrlong	#30, fp
133a0     08 4E 85 F1 | 	sub	fp, #8
133a4     A7 12 02 FB | 	rdlong	arg01, fp
133a8     14 01 B1 FD | 	call	#__system___float_fromuns
133ac     A7 FA 61 FC | 	wrlong	result1, fp
133b0                 | LR__1551
133b0                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
133b0     14 4E 05 F1 | 	add	fp, #20
133b4     A7 14 02 FB | 	rdlong	arg02, fp
133b8     14 4E 85 F1 | 	sub	fp, #20
133bc     1C 14 0E F2 | 	cmp	arg02, #28 wz
133c0     34 00 90 5D |  if_ne	jmp	#LR__1552
133c4     14 4E 05 F1 | 	add	fp, #20
133c8     A7 3C 68 FC | 	wrlong	#30, fp
133cc     08 4E 85 F1 | 	sub	fp, #8
133d0     A7 12 02 FB | 	rdlong	arg01, fp
133d4     0C 4E 85 F1 | 	sub	fp, #12
133d8     09 13 52 F6 | 	abs	arg01, arg01 wc
133dc     1F 20 C6 C9 |  if_b	decod	local02, #31
133e0     00 20 06 36 |  if_ae	mov	local02, #0
133e4     D8 00 B1 FD | 	call	#__system___float_fromuns
133e8     10 FB 61 F5 | 	xor	result1, local02
133ec     0C 4E 05 F1 | 	add	fp, #12
133f0     A7 FA 61 FC | 	wrlong	result1, fp
133f4     0C 4E 85 F1 | 	sub	fp, #12
133f8                 | LR__1552
133f8                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
133f8     14 4E 05 F1 | 	add	fp, #20
133fc     A7 14 02 FB | 	rdlong	arg02, fp
13400     14 4E 85 F1 | 	sub	fp, #20
13404     1D 14 0E F2 | 	cmp	arg02, #29 wz
13408     24 00 90 5D |  if_ne	jmp	#LR__1553
1340c     14 4E 05 F1 | 	add	fp, #20
13410     A7 3C 68 FC | 	wrlong	#30, fp
13414     08 4E 85 F1 | 	sub	fp, #8
13418     A7 12 02 FB | 	rdlong	arg01, fp
1341c     0C 4E 85 F1 | 	sub	fp, #12
13420     9C 00 B1 FD | 	call	#__system___float_fromuns
13424     0C 4E 05 F1 | 	add	fp, #12
13428     A7 FA 61 FC | 	wrlong	result1, fp
1342c     0C 4E 85 F1 | 	sub	fp, #12
13430                 | LR__1553
13430                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
13430     08 4E 05 F1 | 	add	fp, #8
13434     A7 14 02 FB | 	rdlong	arg02, fp
13438     08 4E 85 F1 | 	sub	fp, #8
1343c     1E 14 0E F2 | 	cmp	arg02, #30 wz
13440     14 4E 05 A1 |  if_e	add	fp, #20
13444     A7 1E 02 AB |  if_e	rdlong	local01, fp
13448     14 4E 85 A1 |  if_e	sub	fp, #20
1344c     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
13450     1C 00 90 5D |  if_ne	jmp	#LR__1554
13454     A7 12 02 FB | 	rdlong	arg01, fp
13458     0C 4E 05 F1 | 	add	fp, #12
1345c     A7 14 02 FB | 	rdlong	arg02, fp
13460     0C 4E 85 F1 | 	sub	fp, #12
13464     40 13 B1 FD | 	call	#__system____builtin_powf
13468     A7 FA 61 FC | 	wrlong	result1, fp
1346c     10 00 90 FD | 	jmp	#LR__1555
13470                 | LR__1554
13470     A7 1A 68 FC | 	wrlong	#13, fp
13474     08 4E 05 F1 | 	add	fp, #8
13478     A7 FE 69 FC | 	wrlong	#255, fp
1347c     08 4E 85 F1 | 	sub	fp, #8
13480                 | LR__1555
13480     A7 12 02 F6 | 	mov	arg01, fp
13484     D4 7C BF FD | 	call	#_push
13488     A7 F0 03 F6 | 	mov	ptra, fp
1348c     B2 00 A0 FD | 	call	#popregs_
13490                 | _do_power_ret
13490     2D 00 64 FD | 	ret
13494                 | 
13494                 | ' 
13494                 | ' 
13494                 | ' sub do_eq
13494                 | _do_eq
13494     05 4A 05 F6 | 	mov	COUNT_, #5
13498     A8 00 A0 FD | 	call	#pushregs_
1349c     18 F0 07 F1 | 	add	ptra, #24
134a0     20 7C BF FD | 	call	#_pop
134a4     FD 1E 02 F6 | 	mov	local01, result1
134a8     FE 20 02 F6 | 	mov	local02, result2
134ac     FF 22 02 F6 | 	mov	local03, result3
134b0     0C 4E 05 F1 | 	add	fp, #12
134b4     A7 1E 62 FC | 	wrlong	local01, fp
134b8     04 4E 05 F1 | 	add	fp, #4
134bc     A7 20 62 FC | 	wrlong	local02, fp
134c0     04 4E 05 F1 | 	add	fp, #4
134c4     A7 22 62 FC | 	wrlong	local03, fp
134c8     14 4E 85 F1 | 	sub	fp, #20
134cc     F4 7B BF FD | 	call	#_pop
134d0     FF 22 02 F6 | 	mov	local03, result3
134d4     A7 FA 61 FC | 	wrlong	result1, fp
134d8     04 4E 05 F1 | 	add	fp, #4
134dc     A7 FC 61 FC | 	wrlong	result2, fp
134e0     04 4E 05 F1 | 	add	fp, #4
134e4     A7 22 62 FC | 	wrlong	local03, fp
134e8                 | ' t2=pop()
134e8                 | ' t1=pop()
134e8                 | ' 
134e8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
134e8     08 4E 85 F1 | 	sub	fp, #8
134ec     1F 22 0E F2 | 	cmp	local03, #31 wz
134f0     14 4E 05 A1 |  if_e	add	fp, #20
134f4     A7 24 02 AB |  if_e	rdlong	local04, fp
134f8     14 4E 85 A1 |  if_e	sub	fp, #20
134fc     12 23 02 A6 |  if_e	mov	local03, local04
13500     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
13504     28 00 90 5D |  if_ne	jmp	#LR__1560
13508     00 1E 06 F6 | 	mov	local01, #0
1350c     A7 12 02 FB | 	rdlong	arg01, fp
13510     0C 4E 05 F1 | 	add	fp, #12
13514     A7 14 02 FB | 	rdlong	arg02, fp
13518     0C 4E 85 F1 | 	sub	fp, #12
1351c     18 D8 B0 FD | 	call	#__system___string_cmp
13520     00 FA 0D F2 | 	cmp	result1, #0 wz
13524     00 1E 26 A6 |  if_e	not	local01, #0
13528     A7 1E 62 FC | 	wrlong	local01, fp
1352c     1C 04 90 FD | 	jmp	#LR__1573
13530                 | LR__1560
13530                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
13530     08 4E 05 F1 | 	add	fp, #8
13534     A7 1E 02 FB | 	rdlong	local01, fp
13538     08 4E 85 F1 | 	sub	fp, #8
1353c     1E 1E 0E F2 | 	cmp	local01, #30 wz
13540     14 4E 05 A1 |  if_e	add	fp, #20
13544     A7 24 02 AB |  if_e	rdlong	local04, fp
13548     14 4E 85 A1 |  if_e	sub	fp, #20
1354c     12 23 02 A6 |  if_e	mov	local03, local04
13550     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13554     2C 00 90 5D |  if_ne	jmp	#LR__1561
13558     00 1E 06 F6 | 	mov	local01, #0
1355c     A7 12 02 FB | 	rdlong	arg01, fp
13560     0C 4E 05 F1 | 	add	fp, #12
13564     A7 14 02 FB | 	rdlong	arg02, fp
13568     0C 4E 85 F1 | 	sub	fp, #12
1356c     01 16 06 F6 | 	mov	arg03, #1
13570     84 07 B1 FD | 	call	#__system___float_cmp
13574     00 FA 0D F2 | 	cmp	result1, #0 wz
13578     00 1E 26 A6 |  if_e	not	local01, #0
1357c     A7 1E 62 FC | 	wrlong	local01, fp
13580     C8 03 90 FD | 	jmp	#LR__1573
13584                 | LR__1561
13584                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
13584     08 4E 05 F1 | 	add	fp, #8
13588     A7 1E 02 FB | 	rdlong	local01, fp
1358c     08 4E 85 F1 | 	sub	fp, #8
13590     1E 1E 0E F2 | 	cmp	local01, #30 wz
13594     14 4E 05 A1 |  if_e	add	fp, #20
13598     A7 24 02 AB |  if_e	rdlong	local04, fp
1359c     14 4E 85 A1 |  if_e	sub	fp, #20
135a0     12 23 02 A6 |  if_e	mov	local03, local04
135a4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
135a8     48 00 90 5D |  if_ne	jmp	#LR__1562
135ac     00 1E 06 F6 | 	mov	local01, #0
135b0     A7 20 02 FB | 	rdlong	local02, fp
135b4     0C 4E 05 F1 | 	add	fp, #12
135b8     A7 12 02 FB | 	rdlong	arg01, fp
135bc     0C 4E 85 F1 | 	sub	fp, #12
135c0     09 13 52 F6 | 	abs	arg01, arg01 wc
135c4     1F 26 C6 C9 |  if_b	decod	local05, #31
135c8     00 26 06 36 |  if_ae	mov	local05, #0
135cc     F0 FE B0 FD | 	call	#__system___float_fromuns
135d0     13 FB 61 F5 | 	xor	result1, local05
135d4     FD 14 02 F6 | 	mov	arg02, result1
135d8     10 13 02 F6 | 	mov	arg01, local02
135dc     01 16 06 F6 | 	mov	arg03, #1
135e0     14 07 B1 FD | 	call	#__system___float_cmp
135e4     00 FA 0D F2 | 	cmp	result1, #0 wz
135e8     00 1E 26 A6 |  if_e	not	local01, #0
135ec     A7 1E 62 FC | 	wrlong	local01, fp
135f0     58 03 90 FD | 	jmp	#LR__1573
135f4                 | LR__1562
135f4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
135f4     08 4E 05 F1 | 	add	fp, #8
135f8     A7 1E 02 FB | 	rdlong	local01, fp
135fc     08 4E 85 F1 | 	sub	fp, #8
13600     1E 1E 0E F2 | 	cmp	local01, #30 wz
13604     14 4E 05 A1 |  if_e	add	fp, #20
13608     A7 24 02 AB |  if_e	rdlong	local04, fp
1360c     14 4E 85 A1 |  if_e	sub	fp, #20
13610     12 23 02 A6 |  if_e	mov	local03, local04
13614     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
13618     38 00 90 5D |  if_ne	jmp	#LR__1563
1361c     00 1E 06 F6 | 	mov	local01, #0
13620     A7 20 02 FB | 	rdlong	local02, fp
13624     0C 4E 05 F1 | 	add	fp, #12
13628     A7 12 02 FB | 	rdlong	arg01, fp
1362c     0C 4E 85 F1 | 	sub	fp, #12
13630     8C FE B0 FD | 	call	#__system___float_fromuns
13634     FD 14 02 F6 | 	mov	arg02, result1
13638     10 13 02 F6 | 	mov	arg01, local02
1363c     01 16 06 F6 | 	mov	arg03, #1
13640     B4 06 B1 FD | 	call	#__system___float_cmp
13644     00 FA 0D F2 | 	cmp	result1, #0 wz
13648     00 1E 26 A6 |  if_e	not	local01, #0
1364c     A7 1E 62 FC | 	wrlong	local01, fp
13650     F8 02 90 FD | 	jmp	#LR__1573
13654                 | LR__1563
13654                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
13654     08 4E 05 F1 | 	add	fp, #8
13658     A7 1E 02 FB | 	rdlong	local01, fp
1365c     08 4E 85 F1 | 	sub	fp, #8
13660     1C 1E 0E F2 | 	cmp	local01, #28 wz
13664     14 4E 05 A1 |  if_e	add	fp, #20
13668     A7 24 02 AB |  if_e	rdlong	local04, fp
1366c     14 4E 85 A1 |  if_e	sub	fp, #20
13670     12 23 02 A6 |  if_e	mov	local03, local04
13674     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13678     44 00 90 5D |  if_ne	jmp	#LR__1564
1367c     00 1E 06 F6 | 	mov	local01, #0
13680     A7 12 02 FB | 	rdlong	arg01, fp
13684     09 13 52 F6 | 	abs	arg01, arg01 wc
13688     1F 26 C6 C9 |  if_b	decod	local05, #31
1368c     00 26 06 36 |  if_ae	mov	local05, #0
13690     2C FE B0 FD | 	call	#__system___float_fromuns
13694     13 FB 61 F5 | 	xor	result1, local05
13698     FD 12 02 F6 | 	mov	arg01, result1
1369c     0C 4E 05 F1 | 	add	fp, #12
136a0     A7 14 02 FB | 	rdlong	arg02, fp
136a4     0C 4E 85 F1 | 	sub	fp, #12
136a8     01 16 06 F6 | 	mov	arg03, #1
136ac     48 06 B1 FD | 	call	#__system___float_cmp
136b0     00 FA 0D F2 | 	cmp	result1, #0 wz
136b4     00 1E 26 A6 |  if_e	not	local01, #0
136b8     A7 1E 62 FC | 	wrlong	local01, fp
136bc     8C 02 90 FD | 	jmp	#LR__1573
136c0                 | LR__1564
136c0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
136c0     08 4E 05 F1 | 	add	fp, #8
136c4     A7 1E 02 FB | 	rdlong	local01, fp
136c8     08 4E 85 F1 | 	sub	fp, #8
136cc     1C 1E 0E F2 | 	cmp	local01, #28 wz
136d0     14 4E 05 A1 |  if_e	add	fp, #20
136d4     A7 24 02 AB |  if_e	rdlong	local04, fp
136d8     14 4E 85 A1 |  if_e	sub	fp, #20
136dc     12 23 02 A6 |  if_e	mov	local03, local04
136e0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
136e4     24 00 90 5D |  if_ne	jmp	#LR__1565
136e8     00 1E 06 F6 | 	mov	local01, #0
136ec     A7 20 02 FB | 	rdlong	local02, fp
136f0     0C 4E 05 F1 | 	add	fp, #12
136f4     A7 22 02 FB | 	rdlong	local03, fp
136f8     0C 4E 85 F1 | 	sub	fp, #12
136fc     11 21 0A F2 | 	cmp	local02, local03 wz
13700     01 1E 66 A6 |  if_e	neg	local01, #1
13704     A7 1E 62 FC | 	wrlong	local01, fp
13708     40 02 90 FD | 	jmp	#LR__1573
1370c                 | LR__1565
1370c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1370c     08 4E 05 F1 | 	add	fp, #8
13710     A7 1E 02 FB | 	rdlong	local01, fp
13714     08 4E 85 F1 | 	sub	fp, #8
13718     1C 1E 0E F2 | 	cmp	local01, #28 wz
1371c     14 4E 05 A1 |  if_e	add	fp, #20
13720     A7 24 02 AB |  if_e	rdlong	local04, fp
13724     14 4E 85 A1 |  if_e	sub	fp, #20
13728     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
1372c     24 00 90 5D |  if_ne	jmp	#LR__1566
13730     00 1E 06 F6 | 	mov	local01, #0
13734     A7 20 02 FB | 	rdlong	local02, fp
13738     0C 4E 05 F1 | 	add	fp, #12
1373c     A7 22 02 FB | 	rdlong	local03, fp
13740     0C 4E 85 F1 | 	sub	fp, #12
13744     11 21 0A F2 | 	cmp	local02, local03 wz
13748     01 1E 66 A6 |  if_e	neg	local01, #1
1374c     A7 1E 62 FC | 	wrlong	local01, fp
13750     F8 01 90 FD | 	jmp	#LR__1573
13754                 | LR__1566
13754                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
13754     08 4E 05 F1 | 	add	fp, #8
13758     A7 1E 02 FB | 	rdlong	local01, fp
1375c     08 4E 85 F1 | 	sub	fp, #8
13760     1D 1E 0E F2 | 	cmp	local01, #29 wz
13764     14 4E 05 A1 |  if_e	add	fp, #20
13768     A7 22 02 AB |  if_e	rdlong	local03, fp
1376c     14 4E 85 A1 |  if_e	sub	fp, #20
13770     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13774     34 00 90 5D |  if_ne	jmp	#LR__1567
13778     00 1E 06 F6 | 	mov	local01, #0
1377c     A7 12 02 FB | 	rdlong	arg01, fp
13780     3C FD B0 FD | 	call	#__system___float_fromuns
13784     FD 12 02 F6 | 	mov	arg01, result1
13788     0C 4E 05 F1 | 	add	fp, #12
1378c     A7 14 02 FB | 	rdlong	arg02, fp
13790     0C 4E 85 F1 | 	sub	fp, #12
13794     01 16 06 F6 | 	mov	arg03, #1
13798     5C 05 B1 FD | 	call	#__system___float_cmp
1379c     00 FA 0D F2 | 	cmp	result1, #0 wz
137a0     00 1E 26 A6 |  if_e	not	local01, #0
137a4     A7 1E 62 FC | 	wrlong	local01, fp
137a8     A0 01 90 FD | 	jmp	#LR__1573
137ac                 | LR__1567
137ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
137ac     08 4E 05 F1 | 	add	fp, #8
137b0     A7 1E 02 FB | 	rdlong	local01, fp
137b4     08 4E 85 F1 | 	sub	fp, #8
137b8     1D 1E 0E F2 | 	cmp	local01, #29 wz
137bc     14 4E 05 A1 |  if_e	add	fp, #20
137c0     A7 22 02 AB |  if_e	rdlong	local03, fp
137c4     14 4E 85 A1 |  if_e	sub	fp, #20
137c8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
137cc     24 00 90 5D |  if_ne	jmp	#LR__1568
137d0     00 1E 06 F6 | 	mov	local01, #0
137d4     A7 20 02 FB | 	rdlong	local02, fp
137d8     0C 4E 05 F1 | 	add	fp, #12
137dc     A7 22 02 FB | 	rdlong	local03, fp
137e0     0C 4E 85 F1 | 	sub	fp, #12
137e4     11 21 0A F2 | 	cmp	local02, local03 wz
137e8     01 1E 66 A6 |  if_e	neg	local01, #1
137ec     A7 1E 62 FC | 	wrlong	local01, fp
137f0     58 01 90 FD | 	jmp	#LR__1573
137f4                 | LR__1568
137f4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
137f4     08 4E 05 F1 | 	add	fp, #8
137f8     A7 1E 02 FB | 	rdlong	local01, fp
137fc     08 4E 85 F1 | 	sub	fp, #8
13800     1D 1E 0E F2 | 	cmp	local01, #29 wz
13804     14 4E 05 A1 |  if_e	add	fp, #20
13808     A7 22 02 AB |  if_e	rdlong	local03, fp
1380c     14 4E 85 A1 |  if_e	sub	fp, #20
13810     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
13814     24 00 90 5D |  if_ne	jmp	#LR__1569
13818     00 1E 06 F6 | 	mov	local01, #0
1381c     A7 20 02 FB | 	rdlong	local02, fp
13820     0C 4E 05 F1 | 	add	fp, #12
13824     A7 22 02 FB | 	rdlong	local03, fp
13828     0C 4E 85 F1 | 	sub	fp, #12
1382c     11 21 0A F2 | 	cmp	local02, local03 wz
13830     01 1E 66 A6 |  if_e	neg	local01, #1
13834     A7 1E 62 FC | 	wrlong	local01, fp
13838     10 01 90 FD | 	jmp	#LR__1573
1383c                 | LR__1569
1383c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1383c     08 4E 05 F1 | 	add	fp, #8
13840     A7 1E 02 FB | 	rdlong	local01, fp
13844     08 4E 85 F1 | 	sub	fp, #8
13848     2B 1E 0E F2 | 	cmp	local01, #43 wz
1384c     14 4E 05 A1 |  if_e	add	fp, #20
13850     A7 22 02 AB |  if_e	rdlong	local03, fp
13854     14 4E 85 A1 |  if_e	sub	fp, #20
13858     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1385c     30 00 90 5D |  if_ne	jmp	#LR__1570
13860     00 1E 06 F6 | 	mov	local01, #0
13864     A7 12 02 FB | 	rdlong	arg01, fp
13868     04 D1 BF FD | 	call	#_convertstring
1386c     FD 12 02 F6 | 	mov	arg01, result1
13870     0C 4E 05 F1 | 	add	fp, #12
13874     A7 14 02 FB | 	rdlong	arg02, fp
13878     0C 4E 85 F1 | 	sub	fp, #12
1387c     B8 D4 B0 FD | 	call	#__system___string_cmp
13880     00 FA 0D F2 | 	cmp	result1, #0 wz
13884     00 1E 26 A6 |  if_e	not	local01, #0
13888     A7 1E 62 FC | 	wrlong	local01, fp
1388c     BC 00 90 FD | 	jmp	#LR__1573
13890                 | LR__1570
13890                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
13890     08 4E 05 F1 | 	add	fp, #8
13894     A7 1E 02 FB | 	rdlong	local01, fp
13898     08 4E 85 F1 | 	sub	fp, #8
1389c     1F 1E 0E F2 | 	cmp	local01, #31 wz
138a0     14 4E 05 A1 |  if_e	add	fp, #20
138a4     A7 22 02 AB |  if_e	rdlong	local03, fp
138a8     14 4E 85 A1 |  if_e	sub	fp, #20
138ac     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
138b0     34 00 90 5D |  if_ne	jmp	#LR__1571
138b4     00 1E 06 F6 | 	mov	local01, #0
138b8     A7 20 02 FB | 	rdlong	local02, fp
138bc     0C 4E 05 F1 | 	add	fp, #12
138c0     A7 12 02 FB | 	rdlong	arg01, fp
138c4     0C 4E 85 F1 | 	sub	fp, #12
138c8     A4 D0 BF FD | 	call	#_convertstring
138cc     FD 14 02 F6 | 	mov	arg02, result1
138d0     10 13 02 F6 | 	mov	arg01, local02
138d4     60 D4 B0 FD | 	call	#__system___string_cmp
138d8     00 FA 0D F2 | 	cmp	result1, #0 wz
138dc     00 1E 26 A6 |  if_e	not	local01, #0
138e0     A7 1E 62 FC | 	wrlong	local01, fp
138e4     64 00 90 FD | 	jmp	#LR__1573
138e8                 | LR__1571
138e8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
138e8     08 4E 05 F1 | 	add	fp, #8
138ec     A7 1E 02 FB | 	rdlong	local01, fp
138f0     08 4E 85 F1 | 	sub	fp, #8
138f4     2B 1E 0E F2 | 	cmp	local01, #43 wz
138f8     14 4E 05 A1 |  if_e	add	fp, #20
138fc     A7 22 02 AB |  if_e	rdlong	local03, fp
13900     14 4E 85 A1 |  if_e	sub	fp, #20
13904     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
13908     3C 00 90 5D |  if_ne	jmp	#LR__1572
1390c     00 1E 06 F6 | 	mov	local01, #0
13910     A7 12 02 FB | 	rdlong	arg01, fp
13914     58 D0 BF FD | 	call	#_convertstring
13918     FD 20 02 F6 | 	mov	local02, result1
1391c     0C 4E 05 F1 | 	add	fp, #12
13920     A7 12 02 FB | 	rdlong	arg01, fp
13924     0C 4E 85 F1 | 	sub	fp, #12
13928     44 D0 BF FD | 	call	#_convertstring
1392c     FD 14 02 F6 | 	mov	arg02, result1
13930     10 13 02 F6 | 	mov	arg01, local02
13934     00 D4 B0 FD | 	call	#__system___string_cmp
13938     00 FA 0D F2 | 	cmp	result1, #0 wz
1393c     00 1E 26 A6 |  if_e	not	local01, #0
13940     A7 1E 62 FC | 	wrlong	local01, fp
13944     04 00 90 FD | 	jmp	#LR__1573
13948                 | LR__1572
13948     A7 00 68 FC | 	wrlong	#0, fp
1394c                 | LR__1573
1394c     08 4E 05 F1 | 	add	fp, #8
13950     A7 38 68 FC | 	wrlong	#28, fp
13954     08 4E 85 F1 | 	sub	fp, #8
13958     A7 12 02 F6 | 	mov	arg01, fp
1395c     FC 77 BF FD | 	call	#_push
13960     A7 F0 03 F6 | 	mov	ptra, fp
13964     B2 00 A0 FD | 	call	#popregs_
13968                 | _do_eq_ret
13968     2D 00 64 FD | 	ret
1396c                 | 
1396c                 | ' 
1396c                 | ' sub do_gt
1396c                 | _do_gt
1396c     05 4A 05 F6 | 	mov	COUNT_, #5
13970     A8 00 A0 FD | 	call	#pushregs_
13974     18 F0 07 F1 | 	add	ptra, #24
13978     48 77 BF FD | 	call	#_pop
1397c     FD 1E 02 F6 | 	mov	local01, result1
13980     FE 20 02 F6 | 	mov	local02, result2
13984     FF 22 02 F6 | 	mov	local03, result3
13988     0C 4E 05 F1 | 	add	fp, #12
1398c     A7 1E 62 FC | 	wrlong	local01, fp
13990     04 4E 05 F1 | 	add	fp, #4
13994     A7 20 62 FC | 	wrlong	local02, fp
13998     04 4E 05 F1 | 	add	fp, #4
1399c     A7 22 62 FC | 	wrlong	local03, fp
139a0     14 4E 85 F1 | 	sub	fp, #20
139a4     1C 77 BF FD | 	call	#_pop
139a8     FF 22 02 F6 | 	mov	local03, result3
139ac     A7 FA 61 FC | 	wrlong	result1, fp
139b0     04 4E 05 F1 | 	add	fp, #4
139b4     A7 FC 61 FC | 	wrlong	result2, fp
139b8     04 4E 05 F1 | 	add	fp, #4
139bc     A7 22 62 FC | 	wrlong	local03, fp
139c0                 | ' t2=pop()
139c0                 | ' t1=pop()
139c0                 | ' 
139c0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
139c0     08 4E 85 F1 | 	sub	fp, #8
139c4     1F 22 0E F2 | 	cmp	local03, #31 wz
139c8     14 4E 05 A1 |  if_e	add	fp, #20
139cc     A7 24 02 AB |  if_e	rdlong	local04, fp
139d0     14 4E 85 A1 |  if_e	sub	fp, #20
139d4     12 23 02 A6 |  if_e	mov	local03, local04
139d8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
139dc     28 00 90 5D |  if_ne	jmp	#LR__1580
139e0     00 1E 06 F6 | 	mov	local01, #0
139e4     A7 12 02 FB | 	rdlong	arg01, fp
139e8     0C 4E 05 F1 | 	add	fp, #12
139ec     A7 14 02 FB | 	rdlong	arg02, fp
139f0     0C 4E 85 F1 | 	sub	fp, #12
139f4     40 D3 B0 FD | 	call	#__system___string_cmp
139f8     01 FA 55 F2 | 	cmps	result1, #1 wc
139fc     00 1E 26 36 |  if_ae	not	local01, #0
13a00     A7 1E 62 FC | 	wrlong	local01, fp
13a04     1C 04 90 FD | 	jmp	#LR__1593
13a08                 | LR__1580
13a08                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
13a08     08 4E 05 F1 | 	add	fp, #8
13a0c     A7 1E 02 FB | 	rdlong	local01, fp
13a10     08 4E 85 F1 | 	sub	fp, #8
13a14     1E 1E 0E F2 | 	cmp	local01, #30 wz
13a18     14 4E 05 A1 |  if_e	add	fp, #20
13a1c     A7 24 02 AB |  if_e	rdlong	local04, fp
13a20     14 4E 85 A1 |  if_e	sub	fp, #20
13a24     12 23 02 A6 |  if_e	mov	local03, local04
13a28     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13a2c     2C 00 90 5D |  if_ne	jmp	#LR__1581
13a30     00 1E 06 F6 | 	mov	local01, #0
13a34     A7 12 02 FB | 	rdlong	arg01, fp
13a38     0C 4E 05 F1 | 	add	fp, #12
13a3c     A7 14 02 FB | 	rdlong	arg02, fp
13a40     0C 4E 85 F1 | 	sub	fp, #12
13a44     01 16 66 F6 | 	neg	arg03, #1
13a48     AC 02 B1 FD | 	call	#__system___float_cmp
13a4c     01 FA 55 F2 | 	cmps	result1, #1 wc
13a50     00 1E 26 36 |  if_ae	not	local01, #0
13a54     A7 1E 62 FC | 	wrlong	local01, fp
13a58     C8 03 90 FD | 	jmp	#LR__1593
13a5c                 | LR__1581
13a5c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
13a5c     08 4E 05 F1 | 	add	fp, #8
13a60     A7 1E 02 FB | 	rdlong	local01, fp
13a64     08 4E 85 F1 | 	sub	fp, #8
13a68     1E 1E 0E F2 | 	cmp	local01, #30 wz
13a6c     14 4E 05 A1 |  if_e	add	fp, #20
13a70     A7 24 02 AB |  if_e	rdlong	local04, fp
13a74     14 4E 85 A1 |  if_e	sub	fp, #20
13a78     12 23 02 A6 |  if_e	mov	local03, local04
13a7c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13a80     48 00 90 5D |  if_ne	jmp	#LR__1582
13a84     00 1E 06 F6 | 	mov	local01, #0
13a88     A7 20 02 FB | 	rdlong	local02, fp
13a8c     0C 4E 05 F1 | 	add	fp, #12
13a90     A7 12 02 FB | 	rdlong	arg01, fp
13a94     0C 4E 85 F1 | 	sub	fp, #12
13a98     09 13 52 F6 | 	abs	arg01, arg01 wc
13a9c     1F 26 C6 C9 |  if_b	decod	local05, #31
13aa0     00 26 06 36 |  if_ae	mov	local05, #0
13aa4     18 FA B0 FD | 	call	#__system___float_fromuns
13aa8     13 FB 61 F5 | 	xor	result1, local05
13aac     FD 14 02 F6 | 	mov	arg02, result1
13ab0     10 13 02 F6 | 	mov	arg01, local02
13ab4     01 16 66 F6 | 	neg	arg03, #1
13ab8     3C 02 B1 FD | 	call	#__system___float_cmp
13abc     01 FA 55 F2 | 	cmps	result1, #1 wc
13ac0     00 1E 26 36 |  if_ae	not	local01, #0
13ac4     A7 1E 62 FC | 	wrlong	local01, fp
13ac8     58 03 90 FD | 	jmp	#LR__1593
13acc                 | LR__1582
13acc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
13acc     08 4E 05 F1 | 	add	fp, #8
13ad0     A7 1E 02 FB | 	rdlong	local01, fp
13ad4     08 4E 85 F1 | 	sub	fp, #8
13ad8     1E 1E 0E F2 | 	cmp	local01, #30 wz
13adc     14 4E 05 A1 |  if_e	add	fp, #20
13ae0     A7 24 02 AB |  if_e	rdlong	local04, fp
13ae4     14 4E 85 A1 |  if_e	sub	fp, #20
13ae8     12 23 02 A6 |  if_e	mov	local03, local04
13aec     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
13af0     38 00 90 5D |  if_ne	jmp	#LR__1583
13af4     00 1E 06 F6 | 	mov	local01, #0
13af8     A7 20 02 FB | 	rdlong	local02, fp
13afc     0C 4E 05 F1 | 	add	fp, #12
13b00     A7 12 02 FB | 	rdlong	arg01, fp
13b04     0C 4E 85 F1 | 	sub	fp, #12
13b08     B4 F9 B0 FD | 	call	#__system___float_fromuns
13b0c     FD 14 02 F6 | 	mov	arg02, result1
13b10     10 13 02 F6 | 	mov	arg01, local02
13b14     01 16 66 F6 | 	neg	arg03, #1
13b18     DC 01 B1 FD | 	call	#__system___float_cmp
13b1c     01 FA 55 F2 | 	cmps	result1, #1 wc
13b20     00 1E 26 36 |  if_ae	not	local01, #0
13b24     A7 1E 62 FC | 	wrlong	local01, fp
13b28     F8 02 90 FD | 	jmp	#LR__1593
13b2c                 | LR__1583
13b2c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
13b2c     08 4E 05 F1 | 	add	fp, #8
13b30     A7 1E 02 FB | 	rdlong	local01, fp
13b34     08 4E 85 F1 | 	sub	fp, #8
13b38     1C 1E 0E F2 | 	cmp	local01, #28 wz
13b3c     14 4E 05 A1 |  if_e	add	fp, #20
13b40     A7 24 02 AB |  if_e	rdlong	local04, fp
13b44     14 4E 85 A1 |  if_e	sub	fp, #20
13b48     12 23 02 A6 |  if_e	mov	local03, local04
13b4c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13b50     44 00 90 5D |  if_ne	jmp	#LR__1584
13b54     00 1E 06 F6 | 	mov	local01, #0
13b58     A7 12 02 FB | 	rdlong	arg01, fp
13b5c     09 13 52 F6 | 	abs	arg01, arg01 wc
13b60     1F 26 C6 C9 |  if_b	decod	local05, #31
13b64     00 26 06 36 |  if_ae	mov	local05, #0
13b68     54 F9 B0 FD | 	call	#__system___float_fromuns
13b6c     13 FB 61 F5 | 	xor	result1, local05
13b70     FD 12 02 F6 | 	mov	arg01, result1
13b74     0C 4E 05 F1 | 	add	fp, #12
13b78     A7 14 02 FB | 	rdlong	arg02, fp
13b7c     0C 4E 85 F1 | 	sub	fp, #12
13b80     01 16 66 F6 | 	neg	arg03, #1
13b84     70 01 B1 FD | 	call	#__system___float_cmp
13b88     01 FA 55 F2 | 	cmps	result1, #1 wc
13b8c     00 1E 26 36 |  if_ae	not	local01, #0
13b90     A7 1E 62 FC | 	wrlong	local01, fp
13b94     8C 02 90 FD | 	jmp	#LR__1593
13b98                 | LR__1584
13b98                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
13b98     08 4E 05 F1 | 	add	fp, #8
13b9c     A7 1E 02 FB | 	rdlong	local01, fp
13ba0     08 4E 85 F1 | 	sub	fp, #8
13ba4     1C 1E 0E F2 | 	cmp	local01, #28 wz
13ba8     14 4E 05 A1 |  if_e	add	fp, #20
13bac     A7 24 02 AB |  if_e	rdlong	local04, fp
13bb0     14 4E 85 A1 |  if_e	sub	fp, #20
13bb4     12 23 02 A6 |  if_e	mov	local03, local04
13bb8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13bbc     24 00 90 5D |  if_ne	jmp	#LR__1585
13bc0     00 1E 06 F6 | 	mov	local01, #0
13bc4     A7 20 02 FB | 	rdlong	local02, fp
13bc8     0C 4E 05 F1 | 	add	fp, #12
13bcc     A7 22 02 FB | 	rdlong	local03, fp
13bd0     0C 4E 85 F1 | 	sub	fp, #12
13bd4     11 21 5A F2 | 	cmps	local02, local03 wcz
13bd8     01 1E 66 16 |  if_a	neg	local01, #1
13bdc     A7 1E 62 FC | 	wrlong	local01, fp
13be0     40 02 90 FD | 	jmp	#LR__1593
13be4                 | LR__1585
13be4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
13be4     08 4E 05 F1 | 	add	fp, #8
13be8     A7 1E 02 FB | 	rdlong	local01, fp
13bec     08 4E 85 F1 | 	sub	fp, #8
13bf0     1C 1E 0E F2 | 	cmp	local01, #28 wz
13bf4     14 4E 05 A1 |  if_e	add	fp, #20
13bf8     A7 24 02 AB |  if_e	rdlong	local04, fp
13bfc     14 4E 85 A1 |  if_e	sub	fp, #20
13c00     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
13c04     24 00 90 5D |  if_ne	jmp	#LR__1586
13c08     00 1E 06 F6 | 	mov	local01, #0
13c0c     A7 20 02 FB | 	rdlong	local02, fp
13c10     0C 4E 05 F1 | 	add	fp, #12
13c14     A7 22 02 FB | 	rdlong	local03, fp
13c18     0C 4E 85 F1 | 	sub	fp, #12
13c1c     11 21 5A F2 | 	cmps	local02, local03 wcz
13c20     01 1E 66 16 |  if_a	neg	local01, #1
13c24     A7 1E 62 FC | 	wrlong	local01, fp
13c28     F8 01 90 FD | 	jmp	#LR__1593
13c2c                 | LR__1586
13c2c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
13c2c     08 4E 05 F1 | 	add	fp, #8
13c30     A7 1E 02 FB | 	rdlong	local01, fp
13c34     08 4E 85 F1 | 	sub	fp, #8
13c38     1D 1E 0E F2 | 	cmp	local01, #29 wz
13c3c     14 4E 05 A1 |  if_e	add	fp, #20
13c40     A7 22 02 AB |  if_e	rdlong	local03, fp
13c44     14 4E 85 A1 |  if_e	sub	fp, #20
13c48     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13c4c     34 00 90 5D |  if_ne	jmp	#LR__1587
13c50     00 1E 06 F6 | 	mov	local01, #0
13c54     A7 12 02 FB | 	rdlong	arg01, fp
13c58     64 F8 B0 FD | 	call	#__system___float_fromuns
13c5c     FD 12 02 F6 | 	mov	arg01, result1
13c60     0C 4E 05 F1 | 	add	fp, #12
13c64     A7 14 02 FB | 	rdlong	arg02, fp
13c68     0C 4E 85 F1 | 	sub	fp, #12
13c6c     01 16 66 F6 | 	neg	arg03, #1
13c70     84 00 B1 FD | 	call	#__system___float_cmp
13c74     01 FA 55 F2 | 	cmps	result1, #1 wc
13c78     00 1E 26 36 |  if_ae	not	local01, #0
13c7c     A7 1E 62 FC | 	wrlong	local01, fp
13c80     A0 01 90 FD | 	jmp	#LR__1593
13c84                 | LR__1587
13c84                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
13c84     08 4E 05 F1 | 	add	fp, #8
13c88     A7 1E 02 FB | 	rdlong	local01, fp
13c8c     08 4E 85 F1 | 	sub	fp, #8
13c90     1D 1E 0E F2 | 	cmp	local01, #29 wz
13c94     14 4E 05 A1 |  if_e	add	fp, #20
13c98     A7 22 02 AB |  if_e	rdlong	local03, fp
13c9c     14 4E 85 A1 |  if_e	sub	fp, #20
13ca0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13ca4     24 00 90 5D |  if_ne	jmp	#LR__1588
13ca8     00 1E 06 F6 | 	mov	local01, #0
13cac     A7 20 02 FB | 	rdlong	local02, fp
13cb0     0C 4E 05 F1 | 	add	fp, #12
13cb4     A7 22 02 FB | 	rdlong	local03, fp
13cb8     0C 4E 85 F1 | 	sub	fp, #12
13cbc     11 21 5A F2 | 	cmps	local02, local03 wcz
13cc0     01 1E 66 16 |  if_a	neg	local01, #1
13cc4     A7 1E 62 FC | 	wrlong	local01, fp
13cc8     58 01 90 FD | 	jmp	#LR__1593
13ccc                 | LR__1588
13ccc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
13ccc     08 4E 05 F1 | 	add	fp, #8
13cd0     A7 1E 02 FB | 	rdlong	local01, fp
13cd4     08 4E 85 F1 | 	sub	fp, #8
13cd8     1D 1E 0E F2 | 	cmp	local01, #29 wz
13cdc     14 4E 05 A1 |  if_e	add	fp, #20
13ce0     A7 22 02 AB |  if_e	rdlong	local03, fp
13ce4     14 4E 85 A1 |  if_e	sub	fp, #20
13ce8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
13cec     24 00 90 5D |  if_ne	jmp	#LR__1589
13cf0     00 1E 06 F6 | 	mov	local01, #0
13cf4     A7 20 02 FB | 	rdlong	local02, fp
13cf8     0C 4E 05 F1 | 	add	fp, #12
13cfc     A7 22 02 FB | 	rdlong	local03, fp
13d00     0C 4E 85 F1 | 	sub	fp, #12
13d04     11 21 1A F2 | 	cmp	local02, local03 wcz
13d08     01 1E 66 16 |  if_a	neg	local01, #1
13d0c     A7 1E 62 FC | 	wrlong	local01, fp
13d10     10 01 90 FD | 	jmp	#LR__1593
13d14                 | LR__1589
13d14                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
13d14     08 4E 05 F1 | 	add	fp, #8
13d18     A7 1E 02 FB | 	rdlong	local01, fp
13d1c     08 4E 85 F1 | 	sub	fp, #8
13d20     2B 1E 0E F2 | 	cmp	local01, #43 wz
13d24     14 4E 05 A1 |  if_e	add	fp, #20
13d28     A7 22 02 AB |  if_e	rdlong	local03, fp
13d2c     14 4E 85 A1 |  if_e	sub	fp, #20
13d30     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
13d34     30 00 90 5D |  if_ne	jmp	#LR__1590
13d38     00 1E 06 F6 | 	mov	local01, #0
13d3c     A7 12 02 FB | 	rdlong	arg01, fp
13d40     2C CC BF FD | 	call	#_convertstring
13d44     FD 12 02 F6 | 	mov	arg01, result1
13d48     0C 4E 05 F1 | 	add	fp, #12
13d4c     A7 14 02 FB | 	rdlong	arg02, fp
13d50     0C 4E 85 F1 | 	sub	fp, #12
13d54     E0 CF B0 FD | 	call	#__system___string_cmp
13d58     01 FA 55 F2 | 	cmps	result1, #1 wc
13d5c     00 1E 26 36 |  if_ae	not	local01, #0
13d60     A7 1E 62 FC | 	wrlong	local01, fp
13d64     BC 00 90 FD | 	jmp	#LR__1593
13d68                 | LR__1590
13d68                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
13d68     08 4E 05 F1 | 	add	fp, #8
13d6c     A7 1E 02 FB | 	rdlong	local01, fp
13d70     08 4E 85 F1 | 	sub	fp, #8
13d74     1F 1E 0E F2 | 	cmp	local01, #31 wz
13d78     14 4E 05 A1 |  if_e	add	fp, #20
13d7c     A7 22 02 AB |  if_e	rdlong	local03, fp
13d80     14 4E 85 A1 |  if_e	sub	fp, #20
13d84     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
13d88     34 00 90 5D |  if_ne	jmp	#LR__1591
13d8c     00 1E 06 F6 | 	mov	local01, #0
13d90     A7 20 02 FB | 	rdlong	local02, fp
13d94     0C 4E 05 F1 | 	add	fp, #12
13d98     A7 12 02 FB | 	rdlong	arg01, fp
13d9c     0C 4E 85 F1 | 	sub	fp, #12
13da0     CC CB BF FD | 	call	#_convertstring
13da4     FD 14 02 F6 | 	mov	arg02, result1
13da8     10 13 02 F6 | 	mov	arg01, local02
13dac     88 CF B0 FD | 	call	#__system___string_cmp
13db0     01 FA 55 F2 | 	cmps	result1, #1 wc
13db4     00 1E 26 36 |  if_ae	not	local01, #0
13db8     A7 1E 62 FC | 	wrlong	local01, fp
13dbc     64 00 90 FD | 	jmp	#LR__1593
13dc0                 | LR__1591
13dc0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
13dc0     08 4E 05 F1 | 	add	fp, #8
13dc4     A7 1E 02 FB | 	rdlong	local01, fp
13dc8     08 4E 85 F1 | 	sub	fp, #8
13dcc     2B 1E 0E F2 | 	cmp	local01, #43 wz
13dd0     14 4E 05 A1 |  if_e	add	fp, #20
13dd4     A7 22 02 AB |  if_e	rdlong	local03, fp
13dd8     14 4E 85 A1 |  if_e	sub	fp, #20
13ddc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
13de0     3C 00 90 5D |  if_ne	jmp	#LR__1592
13de4     00 1E 06 F6 | 	mov	local01, #0
13de8     A7 12 02 FB | 	rdlong	arg01, fp
13dec     80 CB BF FD | 	call	#_convertstring
13df0     FD 20 02 F6 | 	mov	local02, result1
13df4     0C 4E 05 F1 | 	add	fp, #12
13df8     A7 12 02 FB | 	rdlong	arg01, fp
13dfc     0C 4E 85 F1 | 	sub	fp, #12
13e00     6C CB BF FD | 	call	#_convertstring
13e04     FD 14 02 F6 | 	mov	arg02, result1
13e08     10 13 02 F6 | 	mov	arg01, local02
13e0c     28 CF B0 FD | 	call	#__system___string_cmp
13e10     01 FA 55 F2 | 	cmps	result1, #1 wc
13e14     00 1E 26 36 |  if_ae	not	local01, #0
13e18     A7 1E 62 FC | 	wrlong	local01, fp
13e1c     04 00 90 FD | 	jmp	#LR__1593
13e20                 | LR__1592
13e20     A7 00 68 FC | 	wrlong	#0, fp
13e24                 | LR__1593
13e24     08 4E 05 F1 | 	add	fp, #8
13e28     A7 38 68 FC | 	wrlong	#28, fp
13e2c     08 4E 85 F1 | 	sub	fp, #8
13e30     A7 12 02 F6 | 	mov	arg01, fp
13e34     24 73 BF FD | 	call	#_push
13e38     A7 F0 03 F6 | 	mov	ptra, fp
13e3c     B2 00 A0 FD | 	call	#popregs_
13e40                 | _do_gt_ret
13e40     2D 00 64 FD | 	ret
13e44                 | 
13e44                 | ' 
13e44                 | ' sub do_lt
13e44                 | _do_lt
13e44     05 4A 05 F6 | 	mov	COUNT_, #5
13e48     A8 00 A0 FD | 	call	#pushregs_
13e4c     18 F0 07 F1 | 	add	ptra, #24
13e50     70 72 BF FD | 	call	#_pop
13e54     FD 1E 02 F6 | 	mov	local01, result1
13e58     FE 20 02 F6 | 	mov	local02, result2
13e5c     FF 22 02 F6 | 	mov	local03, result3
13e60     0C 4E 05 F1 | 	add	fp, #12
13e64     A7 1E 62 FC | 	wrlong	local01, fp
13e68     04 4E 05 F1 | 	add	fp, #4
13e6c     A7 20 62 FC | 	wrlong	local02, fp
13e70     04 4E 05 F1 | 	add	fp, #4
13e74     A7 22 62 FC | 	wrlong	local03, fp
13e78     14 4E 85 F1 | 	sub	fp, #20
13e7c     44 72 BF FD | 	call	#_pop
13e80     FF 22 02 F6 | 	mov	local03, result3
13e84     A7 FA 61 FC | 	wrlong	result1, fp
13e88     04 4E 05 F1 | 	add	fp, #4
13e8c     A7 FC 61 FC | 	wrlong	result2, fp
13e90     04 4E 05 F1 | 	add	fp, #4
13e94     A7 22 62 FC | 	wrlong	local03, fp
13e98                 | ' t2=pop()
13e98                 | ' t1=pop()
13e98                 | ' 
13e98                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
13e98     08 4E 85 F1 | 	sub	fp, #8
13e9c     1F 22 0E F2 | 	cmp	local03, #31 wz
13ea0     14 4E 05 A1 |  if_e	add	fp, #20
13ea4     A7 24 02 AB |  if_e	rdlong	local04, fp
13ea8     14 4E 85 A1 |  if_e	sub	fp, #20
13eac     12 23 02 A6 |  if_e	mov	local03, local04
13eb0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
13eb4     28 00 90 5D |  if_ne	jmp	#LR__1600
13eb8     00 1E 06 F6 | 	mov	local01, #0
13ebc     A7 12 02 FB | 	rdlong	arg01, fp
13ec0     0C 4E 05 F1 | 	add	fp, #12
13ec4     A7 14 02 FB | 	rdlong	arg02, fp
13ec8     0C 4E 85 F1 | 	sub	fp, #12
13ecc     68 CE B0 FD | 	call	#__system___string_cmp
13ed0     00 FA 55 F2 | 	cmps	result1, #0 wc
13ed4     00 1E 26 C6 |  if_b	not	local01, #0
13ed8     A7 1E 62 FC | 	wrlong	local01, fp
13edc     0C 04 90 FD | 	jmp	#LR__1613
13ee0                 | LR__1600
13ee0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
13ee0     08 4E 05 F1 | 	add	fp, #8
13ee4     A7 1E 02 FB | 	rdlong	local01, fp
13ee8     08 4E 85 F1 | 	sub	fp, #8
13eec     1E 1E 0E F2 | 	cmp	local01, #30 wz
13ef0     14 4E 05 A1 |  if_e	add	fp, #20
13ef4     A7 24 02 AB |  if_e	rdlong	local04, fp
13ef8     14 4E 85 A1 |  if_e	sub	fp, #20
13efc     12 23 02 A6 |  if_e	mov	local03, local04
13f00     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13f04     2C 00 90 5D |  if_ne	jmp	#LR__1601
13f08     00 1E 06 F6 | 	mov	local01, #0
13f0c     A7 12 02 FB | 	rdlong	arg01, fp
13f10     0C 4E 05 F1 | 	add	fp, #12
13f14     A7 14 02 FB | 	rdlong	arg02, fp
13f18     0C 4E 85 F1 | 	sub	fp, #12
13f1c     01 16 06 F6 | 	mov	arg03, #1
13f20     D4 FD B0 FD | 	call	#__system___float_cmp
13f24     00 FA 55 F2 | 	cmps	result1, #0 wc
13f28     00 1E 26 C6 |  if_b	not	local01, #0
13f2c     A7 1E 62 FC | 	wrlong	local01, fp
13f30     B8 03 90 FD | 	jmp	#LR__1613
13f34                 | LR__1601
13f34                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
13f34     08 4E 05 F1 | 	add	fp, #8
13f38     A7 1E 02 FB | 	rdlong	local01, fp
13f3c     08 4E 85 F1 | 	sub	fp, #8
13f40     1E 1E 0E F2 | 	cmp	local01, #30 wz
13f44     14 4E 05 A1 |  if_e	add	fp, #20
13f48     A7 24 02 AB |  if_e	rdlong	local04, fp
13f4c     14 4E 85 A1 |  if_e	sub	fp, #20
13f50     12 23 02 A6 |  if_e	mov	local03, local04
13f54     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13f58     48 00 90 5D |  if_ne	jmp	#LR__1602
13f5c     00 1E 06 F6 | 	mov	local01, #0
13f60     A7 20 02 FB | 	rdlong	local02, fp
13f64     0C 4E 05 F1 | 	add	fp, #12
13f68     A7 12 02 FB | 	rdlong	arg01, fp
13f6c     0C 4E 85 F1 | 	sub	fp, #12
13f70     09 13 52 F6 | 	abs	arg01, arg01 wc
13f74     1F 26 C6 C9 |  if_b	decod	local05, #31
13f78     00 26 06 36 |  if_ae	mov	local05, #0
13f7c     40 F5 B0 FD | 	call	#__system___float_fromuns
13f80     13 FB 61 F5 | 	xor	result1, local05
13f84     FD 14 02 F6 | 	mov	arg02, result1
13f88     10 13 02 F6 | 	mov	arg01, local02
13f8c     01 16 06 F6 | 	mov	arg03, #1
13f90     64 FD B0 FD | 	call	#__system___float_cmp
13f94     00 FA 55 F2 | 	cmps	result1, #0 wc
13f98     00 1E 26 C6 |  if_b	not	local01, #0
13f9c     A7 1E 62 FC | 	wrlong	local01, fp
13fa0     48 03 90 FD | 	jmp	#LR__1613
13fa4                 | LR__1602
13fa4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
13fa4     08 4E 05 F1 | 	add	fp, #8
13fa8     A7 1E 02 FB | 	rdlong	local01, fp
13fac     08 4E 85 F1 | 	sub	fp, #8
13fb0     1E 1E 0E F2 | 	cmp	local01, #30 wz
13fb4     14 4E 05 A1 |  if_e	add	fp, #20
13fb8     A7 24 02 AB |  if_e	rdlong	local04, fp
13fbc     14 4E 85 A1 |  if_e	sub	fp, #20
13fc0     12 23 02 A6 |  if_e	mov	local03, local04
13fc4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
13fc8     38 00 90 5D |  if_ne	jmp	#LR__1603
13fcc     00 1E 06 F6 | 	mov	local01, #0
13fd0     A7 20 02 FB | 	rdlong	local02, fp
13fd4     0C 4E 05 F1 | 	add	fp, #12
13fd8     A7 12 02 FB | 	rdlong	arg01, fp
13fdc     0C 4E 85 F1 | 	sub	fp, #12
13fe0     DC F4 B0 FD | 	call	#__system___float_fromuns
13fe4     FD 14 02 F6 | 	mov	arg02, result1
13fe8     10 13 02 F6 | 	mov	arg01, local02
13fec     01 16 06 F6 | 	mov	arg03, #1
13ff0     04 FD B0 FD | 	call	#__system___float_cmp
13ff4     00 FA 55 F2 | 	cmps	result1, #0 wc
13ff8     00 1E 26 C6 |  if_b	not	local01, #0
13ffc     A7 1E 62 FC | 	wrlong	local01, fp
14000     E8 02 90 FD | 	jmp	#LR__1613
14004                 | LR__1603
14004                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
14004     08 4E 05 F1 | 	add	fp, #8
14008     A7 1E 02 FB | 	rdlong	local01, fp
1400c     08 4E 85 F1 | 	sub	fp, #8
14010     1C 1E 0E F2 | 	cmp	local01, #28 wz
14014     14 4E 05 A1 |  if_e	add	fp, #20
14018     A7 24 02 AB |  if_e	rdlong	local04, fp
1401c     14 4E 85 A1 |  if_e	sub	fp, #20
14020     12 23 02 A6 |  if_e	mov	local03, local04
14024     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14028     44 00 90 5D |  if_ne	jmp	#LR__1604
1402c     00 1E 06 F6 | 	mov	local01, #0
14030     A7 12 02 FB | 	rdlong	arg01, fp
14034     09 13 52 F6 | 	abs	arg01, arg01 wc
14038     1F 26 C6 C9 |  if_b	decod	local05, #31
1403c     00 26 06 36 |  if_ae	mov	local05, #0
14040     7C F4 B0 FD | 	call	#__system___float_fromuns
14044     13 FB 61 F5 | 	xor	result1, local05
14048     FD 12 02 F6 | 	mov	arg01, result1
1404c     0C 4E 05 F1 | 	add	fp, #12
14050     A7 14 02 FB | 	rdlong	arg02, fp
14054     0C 4E 85 F1 | 	sub	fp, #12
14058     01 16 06 F6 | 	mov	arg03, #1
1405c     98 FC B0 FD | 	call	#__system___float_cmp
14060     00 FA 55 F2 | 	cmps	result1, #0 wc
14064     00 1E 26 C6 |  if_b	not	local01, #0
14068     A7 1E 62 FC | 	wrlong	local01, fp
1406c     7C 02 90 FD | 	jmp	#LR__1613
14070                 | LR__1604
14070                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
14070     08 4E 05 F1 | 	add	fp, #8
14074     A7 1E 02 FB | 	rdlong	local01, fp
14078     08 4E 85 F1 | 	sub	fp, #8
1407c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14080     14 4E 05 A1 |  if_e	add	fp, #20
14084     A7 24 02 AB |  if_e	rdlong	local04, fp
14088     14 4E 85 A1 |  if_e	sub	fp, #20
1408c     12 23 02 A6 |  if_e	mov	local03, local04
14090     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14094     20 00 90 5D |  if_ne	jmp	#LR__1605
14098     A7 20 02 FB | 	rdlong	local02, fp
1409c     0C 4E 05 F1 | 	add	fp, #12
140a0     A7 22 02 FB | 	rdlong	local03, fp
140a4     0C 4E 85 F1 | 	sub	fp, #12
140a8     11 21 52 F2 | 	cmps	local02, local03 wc
140ac     0F 1F A2 F1 | 	subx	local01, local01
140b0     A7 1E 62 FC | 	wrlong	local01, fp
140b4     34 02 90 FD | 	jmp	#LR__1613
140b8                 | LR__1605
140b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
140b8     08 4E 05 F1 | 	add	fp, #8
140bc     A7 1E 02 FB | 	rdlong	local01, fp
140c0     08 4E 85 F1 | 	sub	fp, #8
140c4     1C 1E 0E F2 | 	cmp	local01, #28 wz
140c8     14 4E 05 A1 |  if_e	add	fp, #20
140cc     A7 24 02 AB |  if_e	rdlong	local04, fp
140d0     14 4E 85 A1 |  if_e	sub	fp, #20
140d4     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
140d8     20 00 90 5D |  if_ne	jmp	#LR__1606
140dc     A7 20 02 FB | 	rdlong	local02, fp
140e0     0C 4E 05 F1 | 	add	fp, #12
140e4     A7 22 02 FB | 	rdlong	local03, fp
140e8     0C 4E 85 F1 | 	sub	fp, #12
140ec     11 21 52 F2 | 	cmps	local02, local03 wc
140f0     0F 1F A2 F1 | 	subx	local01, local01
140f4     A7 1E 62 FC | 	wrlong	local01, fp
140f8     F0 01 90 FD | 	jmp	#LR__1613
140fc                 | LR__1606
140fc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
140fc     08 4E 05 F1 | 	add	fp, #8
14100     A7 1E 02 FB | 	rdlong	local01, fp
14104     08 4E 85 F1 | 	sub	fp, #8
14108     1D 1E 0E F2 | 	cmp	local01, #29 wz
1410c     14 4E 05 A1 |  if_e	add	fp, #20
14110     A7 22 02 AB |  if_e	rdlong	local03, fp
14114     14 4E 85 A1 |  if_e	sub	fp, #20
14118     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1411c     34 00 90 5D |  if_ne	jmp	#LR__1607
14120     00 1E 06 F6 | 	mov	local01, #0
14124     A7 12 02 FB | 	rdlong	arg01, fp
14128     94 F3 B0 FD | 	call	#__system___float_fromuns
1412c     FD 12 02 F6 | 	mov	arg01, result1
14130     0C 4E 05 F1 | 	add	fp, #12
14134     A7 14 02 FB | 	rdlong	arg02, fp
14138     0C 4E 85 F1 | 	sub	fp, #12
1413c     01 16 06 F6 | 	mov	arg03, #1
14140     B4 FB B0 FD | 	call	#__system___float_cmp
14144     00 FA 55 F2 | 	cmps	result1, #0 wc
14148     00 1E 26 C6 |  if_b	not	local01, #0
1414c     A7 1E 62 FC | 	wrlong	local01, fp
14150     98 01 90 FD | 	jmp	#LR__1613
14154                 | LR__1607
14154                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
14154     08 4E 05 F1 | 	add	fp, #8
14158     A7 1E 02 FB | 	rdlong	local01, fp
1415c     08 4E 85 F1 | 	sub	fp, #8
14160     1D 1E 0E F2 | 	cmp	local01, #29 wz
14164     14 4E 05 A1 |  if_e	add	fp, #20
14168     A7 22 02 AB |  if_e	rdlong	local03, fp
1416c     14 4E 85 A1 |  if_e	sub	fp, #20
14170     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14174     20 00 90 5D |  if_ne	jmp	#LR__1608
14178     A7 20 02 FB | 	rdlong	local02, fp
1417c     0C 4E 05 F1 | 	add	fp, #12
14180     A7 22 02 FB | 	rdlong	local03, fp
14184     0C 4E 85 F1 | 	sub	fp, #12
14188     11 21 52 F2 | 	cmps	local02, local03 wc
1418c     0F 1F A2 F1 | 	subx	local01, local01
14190     A7 1E 62 FC | 	wrlong	local01, fp
14194     54 01 90 FD | 	jmp	#LR__1613
14198                 | LR__1608
14198                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
14198     08 4E 05 F1 | 	add	fp, #8
1419c     A7 1E 02 FB | 	rdlong	local01, fp
141a0     08 4E 85 F1 | 	sub	fp, #8
141a4     1D 1E 0E F2 | 	cmp	local01, #29 wz
141a8     14 4E 05 A1 |  if_e	add	fp, #20
141ac     A7 22 02 AB |  if_e	rdlong	local03, fp
141b0     14 4E 85 A1 |  if_e	sub	fp, #20
141b4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
141b8     20 00 90 5D |  if_ne	jmp	#LR__1609
141bc     A7 20 02 FB | 	rdlong	local02, fp
141c0     0C 4E 05 F1 | 	add	fp, #12
141c4     A7 22 02 FB | 	rdlong	local03, fp
141c8     0C 4E 85 F1 | 	sub	fp, #12
141cc     11 21 12 F2 | 	cmp	local02, local03 wc
141d0     0F 1F A2 F1 | 	subx	local01, local01
141d4     A7 1E 62 FC | 	wrlong	local01, fp
141d8     10 01 90 FD | 	jmp	#LR__1613
141dc                 | LR__1609
141dc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
141dc     08 4E 05 F1 | 	add	fp, #8
141e0     A7 1E 02 FB | 	rdlong	local01, fp
141e4     08 4E 85 F1 | 	sub	fp, #8
141e8     2B 1E 0E F2 | 	cmp	local01, #43 wz
141ec     14 4E 05 A1 |  if_e	add	fp, #20
141f0     A7 22 02 AB |  if_e	rdlong	local03, fp
141f4     14 4E 85 A1 |  if_e	sub	fp, #20
141f8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
141fc     30 00 90 5D |  if_ne	jmp	#LR__1610
14200     00 1E 06 F6 | 	mov	local01, #0
14204     A7 12 02 FB | 	rdlong	arg01, fp
14208     64 C7 BF FD | 	call	#_convertstring
1420c     FD 12 02 F6 | 	mov	arg01, result1
14210     0C 4E 05 F1 | 	add	fp, #12
14214     A7 14 02 FB | 	rdlong	arg02, fp
14218     0C 4E 85 F1 | 	sub	fp, #12
1421c     18 CB B0 FD | 	call	#__system___string_cmp
14220     00 FA 55 F2 | 	cmps	result1, #0 wc
14224     00 1E 26 C6 |  if_b	not	local01, #0
14228     A7 1E 62 FC | 	wrlong	local01, fp
1422c     BC 00 90 FD | 	jmp	#LR__1613
14230                 | LR__1610
14230                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
14230     08 4E 05 F1 | 	add	fp, #8
14234     A7 1E 02 FB | 	rdlong	local01, fp
14238     08 4E 85 F1 | 	sub	fp, #8
1423c     1F 1E 0E F2 | 	cmp	local01, #31 wz
14240     14 4E 05 A1 |  if_e	add	fp, #20
14244     A7 22 02 AB |  if_e	rdlong	local03, fp
14248     14 4E 85 A1 |  if_e	sub	fp, #20
1424c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14250     34 00 90 5D |  if_ne	jmp	#LR__1611
14254     00 1E 06 F6 | 	mov	local01, #0
14258     A7 20 02 FB | 	rdlong	local02, fp
1425c     0C 4E 05 F1 | 	add	fp, #12
14260     A7 12 02 FB | 	rdlong	arg01, fp
14264     0C 4E 85 F1 | 	sub	fp, #12
14268     04 C7 BF FD | 	call	#_convertstring
1426c     FD 14 02 F6 | 	mov	arg02, result1
14270     10 13 02 F6 | 	mov	arg01, local02
14274     C0 CA B0 FD | 	call	#__system___string_cmp
14278     00 FA 55 F2 | 	cmps	result1, #0 wc
1427c     00 1E 26 C6 |  if_b	not	local01, #0
14280     A7 1E 62 FC | 	wrlong	local01, fp
14284     64 00 90 FD | 	jmp	#LR__1613
14288                 | LR__1611
14288                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
14288     08 4E 05 F1 | 	add	fp, #8
1428c     A7 1E 02 FB | 	rdlong	local01, fp
14290     08 4E 85 F1 | 	sub	fp, #8
14294     2B 1E 0E F2 | 	cmp	local01, #43 wz
14298     14 4E 05 A1 |  if_e	add	fp, #20
1429c     A7 22 02 AB |  if_e	rdlong	local03, fp
142a0     14 4E 85 A1 |  if_e	sub	fp, #20
142a4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
142a8     3C 00 90 5D |  if_ne	jmp	#LR__1612
142ac     00 1E 06 F6 | 	mov	local01, #0
142b0     A7 12 02 FB | 	rdlong	arg01, fp
142b4     B8 C6 BF FD | 	call	#_convertstring
142b8     FD 20 02 F6 | 	mov	local02, result1
142bc     0C 4E 05 F1 | 	add	fp, #12
142c0     A7 12 02 FB | 	rdlong	arg01, fp
142c4     0C 4E 85 F1 | 	sub	fp, #12
142c8     A4 C6 BF FD | 	call	#_convertstring
142cc     FD 14 02 F6 | 	mov	arg02, result1
142d0     10 13 02 F6 | 	mov	arg01, local02
142d4     60 CA B0 FD | 	call	#__system___string_cmp
142d8     00 FA 55 F2 | 	cmps	result1, #0 wc
142dc     00 1E 26 C6 |  if_b	not	local01, #0
142e0     A7 1E 62 FC | 	wrlong	local01, fp
142e4     04 00 90 FD | 	jmp	#LR__1613
142e8                 | LR__1612
142e8     A7 00 68 FC | 	wrlong	#0, fp
142ec                 | LR__1613
142ec     08 4E 05 F1 | 	add	fp, #8
142f0     A7 38 68 FC | 	wrlong	#28, fp
142f4     08 4E 85 F1 | 	sub	fp, #8
142f8     A7 12 02 F6 | 	mov	arg01, fp
142fc     5C 6E BF FD | 	call	#_push
14300     A7 F0 03 F6 | 	mov	ptra, fp
14304     B2 00 A0 FD | 	call	#popregs_
14308                 | _do_lt_ret
14308     2D 00 64 FD | 	ret
1430c                 | 
1430c                 | ' 
1430c                 | ' sub do_ge
1430c                 | _do_ge
1430c     05 4A 05 F6 | 	mov	COUNT_, #5
14310     A8 00 A0 FD | 	call	#pushregs_
14314     18 F0 07 F1 | 	add	ptra, #24
14318     A8 6D BF FD | 	call	#_pop
1431c     FD 1E 02 F6 | 	mov	local01, result1
14320     FE 20 02 F6 | 	mov	local02, result2
14324     FF 22 02 F6 | 	mov	local03, result3
14328     0C 4E 05 F1 | 	add	fp, #12
1432c     A7 1E 62 FC | 	wrlong	local01, fp
14330     04 4E 05 F1 | 	add	fp, #4
14334     A7 20 62 FC | 	wrlong	local02, fp
14338     04 4E 05 F1 | 	add	fp, #4
1433c     A7 22 62 FC | 	wrlong	local03, fp
14340     14 4E 85 F1 | 	sub	fp, #20
14344     7C 6D BF FD | 	call	#_pop
14348     FF 22 02 F6 | 	mov	local03, result3
1434c     A7 FA 61 FC | 	wrlong	result1, fp
14350     04 4E 05 F1 | 	add	fp, #4
14354     A7 FC 61 FC | 	wrlong	result2, fp
14358     04 4E 05 F1 | 	add	fp, #4
1435c     A7 22 62 FC | 	wrlong	local03, fp
14360                 | ' t2=pop()
14360                 | ' t1=pop()
14360                 | ' 
14360                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
14360     08 4E 85 F1 | 	sub	fp, #8
14364     1F 22 0E F2 | 	cmp	local03, #31 wz
14368     14 4E 05 A1 |  if_e	add	fp, #20
1436c     A7 24 02 AB |  if_e	rdlong	local04, fp
14370     14 4E 85 A1 |  if_e	sub	fp, #20
14374     12 23 02 A6 |  if_e	mov	local03, local04
14378     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1437c     28 00 90 5D |  if_ne	jmp	#LR__1620
14380     00 1E 06 F6 | 	mov	local01, #0
14384     A7 12 02 FB | 	rdlong	arg01, fp
14388     0C 4E 05 F1 | 	add	fp, #12
1438c     A7 14 02 FB | 	rdlong	arg02, fp
14390     0C 4E 85 F1 | 	sub	fp, #12
14394     A0 C9 B0 FD | 	call	#__system___string_cmp
14398     00 FA 55 F2 | 	cmps	result1, #0 wc
1439c     00 1E 26 36 |  if_ae	not	local01, #0
143a0     A7 1E 62 FC | 	wrlong	local01, fp
143a4     1C 04 90 FD | 	jmp	#LR__1633
143a8                 | LR__1620
143a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
143a8     08 4E 05 F1 | 	add	fp, #8
143ac     A7 1E 02 FB | 	rdlong	local01, fp
143b0     08 4E 85 F1 | 	sub	fp, #8
143b4     1E 1E 0E F2 | 	cmp	local01, #30 wz
143b8     14 4E 05 A1 |  if_e	add	fp, #20
143bc     A7 24 02 AB |  if_e	rdlong	local04, fp
143c0     14 4E 85 A1 |  if_e	sub	fp, #20
143c4     12 23 02 A6 |  if_e	mov	local03, local04
143c8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
143cc     2C 00 90 5D |  if_ne	jmp	#LR__1621
143d0     00 1E 06 F6 | 	mov	local01, #0
143d4     A7 12 02 FB | 	rdlong	arg01, fp
143d8     0C 4E 05 F1 | 	add	fp, #12
143dc     A7 14 02 FB | 	rdlong	arg02, fp
143e0     0C 4E 85 F1 | 	sub	fp, #12
143e4     01 16 66 F6 | 	neg	arg03, #1
143e8     0C F9 B0 FD | 	call	#__system___float_cmp
143ec     00 FA 55 F2 | 	cmps	result1, #0 wc
143f0     00 1E 26 36 |  if_ae	not	local01, #0
143f4     A7 1E 62 FC | 	wrlong	local01, fp
143f8     C8 03 90 FD | 	jmp	#LR__1633
143fc                 | LR__1621
143fc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
143fc     08 4E 05 F1 | 	add	fp, #8
14400     A7 1E 02 FB | 	rdlong	local01, fp
14404     08 4E 85 F1 | 	sub	fp, #8
14408     1E 1E 0E F2 | 	cmp	local01, #30 wz
1440c     14 4E 05 A1 |  if_e	add	fp, #20
14410     A7 24 02 AB |  if_e	rdlong	local04, fp
14414     14 4E 85 A1 |  if_e	sub	fp, #20
14418     12 23 02 A6 |  if_e	mov	local03, local04
1441c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14420     48 00 90 5D |  if_ne	jmp	#LR__1622
14424     00 1E 06 F6 | 	mov	local01, #0
14428     A7 20 02 FB | 	rdlong	local02, fp
1442c     0C 4E 05 F1 | 	add	fp, #12
14430     A7 12 02 FB | 	rdlong	arg01, fp
14434     0C 4E 85 F1 | 	sub	fp, #12
14438     09 13 52 F6 | 	abs	arg01, arg01 wc
1443c     1F 26 C6 C9 |  if_b	decod	local05, #31
14440     00 26 06 36 |  if_ae	mov	local05, #0
14444     78 F0 B0 FD | 	call	#__system___float_fromuns
14448     13 FB 61 F5 | 	xor	result1, local05
1444c     FD 14 02 F6 | 	mov	arg02, result1
14450     10 13 02 F6 | 	mov	arg01, local02
14454     01 16 66 F6 | 	neg	arg03, #1
14458     9C F8 B0 FD | 	call	#__system___float_cmp
1445c     00 FA 55 F2 | 	cmps	result1, #0 wc
14460     00 1E 26 36 |  if_ae	not	local01, #0
14464     A7 1E 62 FC | 	wrlong	local01, fp
14468     58 03 90 FD | 	jmp	#LR__1633
1446c                 | LR__1622
1446c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1446c     08 4E 05 F1 | 	add	fp, #8
14470     A7 1E 02 FB | 	rdlong	local01, fp
14474     08 4E 85 F1 | 	sub	fp, #8
14478     1E 1E 0E F2 | 	cmp	local01, #30 wz
1447c     14 4E 05 A1 |  if_e	add	fp, #20
14480     A7 24 02 AB |  if_e	rdlong	local04, fp
14484     14 4E 85 A1 |  if_e	sub	fp, #20
14488     12 23 02 A6 |  if_e	mov	local03, local04
1448c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14490     38 00 90 5D |  if_ne	jmp	#LR__1623
14494     00 1E 06 F6 | 	mov	local01, #0
14498     A7 20 02 FB | 	rdlong	local02, fp
1449c     0C 4E 05 F1 | 	add	fp, #12
144a0     A7 12 02 FB | 	rdlong	arg01, fp
144a4     0C 4E 85 F1 | 	sub	fp, #12
144a8     14 F0 B0 FD | 	call	#__system___float_fromuns
144ac     FD 14 02 F6 | 	mov	arg02, result1
144b0     10 13 02 F6 | 	mov	arg01, local02
144b4     01 16 66 F6 | 	neg	arg03, #1
144b8     3C F8 B0 FD | 	call	#__system___float_cmp
144bc     00 FA 55 F2 | 	cmps	result1, #0 wc
144c0     00 1E 26 36 |  if_ae	not	local01, #0
144c4     A7 1E 62 FC | 	wrlong	local01, fp
144c8     F8 02 90 FD | 	jmp	#LR__1633
144cc                 | LR__1623
144cc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
144cc     08 4E 05 F1 | 	add	fp, #8
144d0     A7 1E 02 FB | 	rdlong	local01, fp
144d4     08 4E 85 F1 | 	sub	fp, #8
144d8     1C 1E 0E F2 | 	cmp	local01, #28 wz
144dc     14 4E 05 A1 |  if_e	add	fp, #20
144e0     A7 24 02 AB |  if_e	rdlong	local04, fp
144e4     14 4E 85 A1 |  if_e	sub	fp, #20
144e8     12 23 02 A6 |  if_e	mov	local03, local04
144ec     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
144f0     44 00 90 5D |  if_ne	jmp	#LR__1624
144f4     00 1E 06 F6 | 	mov	local01, #0
144f8     A7 12 02 FB | 	rdlong	arg01, fp
144fc     09 13 52 F6 | 	abs	arg01, arg01 wc
14500     1F 26 C6 C9 |  if_b	decod	local05, #31
14504     00 26 06 36 |  if_ae	mov	local05, #0
14508     B4 EF B0 FD | 	call	#__system___float_fromuns
1450c     13 FB 61 F5 | 	xor	result1, local05
14510     FD 12 02 F6 | 	mov	arg01, result1
14514     0C 4E 05 F1 | 	add	fp, #12
14518     A7 14 02 FB | 	rdlong	arg02, fp
1451c     0C 4E 85 F1 | 	sub	fp, #12
14520     01 16 66 F6 | 	neg	arg03, #1
14524     D0 F7 B0 FD | 	call	#__system___float_cmp
14528     00 FA 55 F2 | 	cmps	result1, #0 wc
1452c     00 1E 26 36 |  if_ae	not	local01, #0
14530     A7 1E 62 FC | 	wrlong	local01, fp
14534     8C 02 90 FD | 	jmp	#LR__1633
14538                 | LR__1624
14538                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
14538     08 4E 05 F1 | 	add	fp, #8
1453c     A7 1E 02 FB | 	rdlong	local01, fp
14540     08 4E 85 F1 | 	sub	fp, #8
14544     1C 1E 0E F2 | 	cmp	local01, #28 wz
14548     14 4E 05 A1 |  if_e	add	fp, #20
1454c     A7 24 02 AB |  if_e	rdlong	local04, fp
14550     14 4E 85 A1 |  if_e	sub	fp, #20
14554     12 23 02 A6 |  if_e	mov	local03, local04
14558     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1455c     24 00 90 5D |  if_ne	jmp	#LR__1625
14560     00 1E 06 F6 | 	mov	local01, #0
14564     A7 20 02 FB | 	rdlong	local02, fp
14568     0C 4E 05 F1 | 	add	fp, #12
1456c     A7 22 02 FB | 	rdlong	local03, fp
14570     0C 4E 85 F1 | 	sub	fp, #12
14574     11 21 52 F2 | 	cmps	local02, local03 wc
14578     01 1E 66 36 |  if_ae	neg	local01, #1
1457c     A7 1E 62 FC | 	wrlong	local01, fp
14580     40 02 90 FD | 	jmp	#LR__1633
14584                 | LR__1625
14584                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
14584     08 4E 05 F1 | 	add	fp, #8
14588     A7 1E 02 FB | 	rdlong	local01, fp
1458c     08 4E 85 F1 | 	sub	fp, #8
14590     1C 1E 0E F2 | 	cmp	local01, #28 wz
14594     14 4E 05 A1 |  if_e	add	fp, #20
14598     A7 24 02 AB |  if_e	rdlong	local04, fp
1459c     14 4E 85 A1 |  if_e	sub	fp, #20
145a0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
145a4     24 00 90 5D |  if_ne	jmp	#LR__1626
145a8     00 1E 06 F6 | 	mov	local01, #0
145ac     A7 20 02 FB | 	rdlong	local02, fp
145b0     0C 4E 05 F1 | 	add	fp, #12
145b4     A7 22 02 FB | 	rdlong	local03, fp
145b8     0C 4E 85 F1 | 	sub	fp, #12
145bc     11 21 52 F2 | 	cmps	local02, local03 wc
145c0     01 1E 66 36 |  if_ae	neg	local01, #1
145c4     A7 1E 62 FC | 	wrlong	local01, fp
145c8     F8 01 90 FD | 	jmp	#LR__1633
145cc                 | LR__1626
145cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
145cc     08 4E 05 F1 | 	add	fp, #8
145d0     A7 1E 02 FB | 	rdlong	local01, fp
145d4     08 4E 85 F1 | 	sub	fp, #8
145d8     1D 1E 0E F2 | 	cmp	local01, #29 wz
145dc     14 4E 05 A1 |  if_e	add	fp, #20
145e0     A7 22 02 AB |  if_e	rdlong	local03, fp
145e4     14 4E 85 A1 |  if_e	sub	fp, #20
145e8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
145ec     34 00 90 5D |  if_ne	jmp	#LR__1627
145f0     00 1E 06 F6 | 	mov	local01, #0
145f4     A7 12 02 FB | 	rdlong	arg01, fp
145f8     C4 EE B0 FD | 	call	#__system___float_fromuns
145fc     FD 12 02 F6 | 	mov	arg01, result1
14600     0C 4E 05 F1 | 	add	fp, #12
14604     A7 14 02 FB | 	rdlong	arg02, fp
14608     0C 4E 85 F1 | 	sub	fp, #12
1460c     01 16 66 F6 | 	neg	arg03, #1
14610     E4 F6 B0 FD | 	call	#__system___float_cmp
14614     00 FA 55 F2 | 	cmps	result1, #0 wc
14618     00 1E 26 36 |  if_ae	not	local01, #0
1461c     A7 1E 62 FC | 	wrlong	local01, fp
14620     A0 01 90 FD | 	jmp	#LR__1633
14624                 | LR__1627
14624                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
14624     08 4E 05 F1 | 	add	fp, #8
14628     A7 1E 02 FB | 	rdlong	local01, fp
1462c     08 4E 85 F1 | 	sub	fp, #8
14630     1D 1E 0E F2 | 	cmp	local01, #29 wz
14634     14 4E 05 A1 |  if_e	add	fp, #20
14638     A7 22 02 AB |  if_e	rdlong	local03, fp
1463c     14 4E 85 A1 |  if_e	sub	fp, #20
14640     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14644     24 00 90 5D |  if_ne	jmp	#LR__1628
14648     00 1E 06 F6 | 	mov	local01, #0
1464c     A7 20 02 FB | 	rdlong	local02, fp
14650     0C 4E 05 F1 | 	add	fp, #12
14654     A7 22 02 FB | 	rdlong	local03, fp
14658     0C 4E 85 F1 | 	sub	fp, #12
1465c     11 21 52 F2 | 	cmps	local02, local03 wc
14660     01 1E 66 36 |  if_ae	neg	local01, #1
14664     A7 1E 62 FC | 	wrlong	local01, fp
14668     58 01 90 FD | 	jmp	#LR__1633
1466c                 | LR__1628
1466c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1466c     08 4E 05 F1 | 	add	fp, #8
14670     A7 1E 02 FB | 	rdlong	local01, fp
14674     08 4E 85 F1 | 	sub	fp, #8
14678     1D 1E 0E F2 | 	cmp	local01, #29 wz
1467c     14 4E 05 A1 |  if_e	add	fp, #20
14680     A7 22 02 AB |  if_e	rdlong	local03, fp
14684     14 4E 85 A1 |  if_e	sub	fp, #20
14688     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1468c     24 00 90 5D |  if_ne	jmp	#LR__1629
14690     00 1E 06 F6 | 	mov	local01, #0
14694     A7 20 02 FB | 	rdlong	local02, fp
14698     0C 4E 05 F1 | 	add	fp, #12
1469c     A7 22 02 FB | 	rdlong	local03, fp
146a0     0C 4E 85 F1 | 	sub	fp, #12
146a4     11 21 12 F2 | 	cmp	local02, local03 wc
146a8     01 1E 66 36 |  if_ae	neg	local01, #1
146ac     A7 1E 62 FC | 	wrlong	local01, fp
146b0     10 01 90 FD | 	jmp	#LR__1633
146b4                 | LR__1629
146b4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
146b4     08 4E 05 F1 | 	add	fp, #8
146b8     A7 1E 02 FB | 	rdlong	local01, fp
146bc     08 4E 85 F1 | 	sub	fp, #8
146c0     2B 1E 0E F2 | 	cmp	local01, #43 wz
146c4     14 4E 05 A1 |  if_e	add	fp, #20
146c8     A7 22 02 AB |  if_e	rdlong	local03, fp
146cc     14 4E 85 A1 |  if_e	sub	fp, #20
146d0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
146d4     30 00 90 5D |  if_ne	jmp	#LR__1630
146d8     00 1E 06 F6 | 	mov	local01, #0
146dc     A7 12 02 FB | 	rdlong	arg01, fp
146e0     8C C2 BF FD | 	call	#_convertstring
146e4     FD 12 02 F6 | 	mov	arg01, result1
146e8     0C 4E 05 F1 | 	add	fp, #12
146ec     A7 14 02 FB | 	rdlong	arg02, fp
146f0     0C 4E 85 F1 | 	sub	fp, #12
146f4     40 C6 B0 FD | 	call	#__system___string_cmp
146f8     00 FA 55 F2 | 	cmps	result1, #0 wc
146fc     00 1E 26 36 |  if_ae	not	local01, #0
14700     A7 1E 62 FC | 	wrlong	local01, fp
14704     BC 00 90 FD | 	jmp	#LR__1633
14708                 | LR__1630
14708                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
14708     08 4E 05 F1 | 	add	fp, #8
1470c     A7 1E 02 FB | 	rdlong	local01, fp
14710     08 4E 85 F1 | 	sub	fp, #8
14714     1F 1E 0E F2 | 	cmp	local01, #31 wz
14718     14 4E 05 A1 |  if_e	add	fp, #20
1471c     A7 22 02 AB |  if_e	rdlong	local03, fp
14720     14 4E 85 A1 |  if_e	sub	fp, #20
14724     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14728     34 00 90 5D |  if_ne	jmp	#LR__1631
1472c     00 1E 06 F6 | 	mov	local01, #0
14730     A7 20 02 FB | 	rdlong	local02, fp
14734     0C 4E 05 F1 | 	add	fp, #12
14738     A7 12 02 FB | 	rdlong	arg01, fp
1473c     0C 4E 85 F1 | 	sub	fp, #12
14740     2C C2 BF FD | 	call	#_convertstring
14744     FD 14 02 F6 | 	mov	arg02, result1
14748     10 13 02 F6 | 	mov	arg01, local02
1474c     E8 C5 B0 FD | 	call	#__system___string_cmp
14750     00 FA 55 F2 | 	cmps	result1, #0 wc
14754     00 1E 26 36 |  if_ae	not	local01, #0
14758     A7 1E 62 FC | 	wrlong	local01, fp
1475c     64 00 90 FD | 	jmp	#LR__1633
14760                 | LR__1631
14760                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
14760     08 4E 05 F1 | 	add	fp, #8
14764     A7 1E 02 FB | 	rdlong	local01, fp
14768     08 4E 85 F1 | 	sub	fp, #8
1476c     2B 1E 0E F2 | 	cmp	local01, #43 wz
14770     14 4E 05 A1 |  if_e	add	fp, #20
14774     A7 22 02 AB |  if_e	rdlong	local03, fp
14778     14 4E 85 A1 |  if_e	sub	fp, #20
1477c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14780     3C 00 90 5D |  if_ne	jmp	#LR__1632
14784     00 1E 06 F6 | 	mov	local01, #0
14788     A7 12 02 FB | 	rdlong	arg01, fp
1478c     E0 C1 BF FD | 	call	#_convertstring
14790     FD 20 02 F6 | 	mov	local02, result1
14794     0C 4E 05 F1 | 	add	fp, #12
14798     A7 12 02 FB | 	rdlong	arg01, fp
1479c     0C 4E 85 F1 | 	sub	fp, #12
147a0     CC C1 BF FD | 	call	#_convertstring
147a4     FD 14 02 F6 | 	mov	arg02, result1
147a8     10 13 02 F6 | 	mov	arg01, local02
147ac     88 C5 B0 FD | 	call	#__system___string_cmp
147b0     00 FA 55 F2 | 	cmps	result1, #0 wc
147b4     00 1E 26 36 |  if_ae	not	local01, #0
147b8     A7 1E 62 FC | 	wrlong	local01, fp
147bc     04 00 90 FD | 	jmp	#LR__1633
147c0                 | LR__1632
147c0     A7 00 68 FC | 	wrlong	#0, fp
147c4                 | LR__1633
147c4     08 4E 05 F1 | 	add	fp, #8
147c8     A7 38 68 FC | 	wrlong	#28, fp
147cc     08 4E 85 F1 | 	sub	fp, #8
147d0     A7 12 02 F6 | 	mov	arg01, fp
147d4     84 69 BF FD | 	call	#_push
147d8     A7 F0 03 F6 | 	mov	ptra, fp
147dc     B2 00 A0 FD | 	call	#popregs_
147e0                 | _do_ge_ret
147e0     2D 00 64 FD | 	ret
147e4                 | 
147e4                 | ' 
147e4                 | ' sub do_le
147e4                 | _do_le
147e4     05 4A 05 F6 | 	mov	COUNT_, #5
147e8     A8 00 A0 FD | 	call	#pushregs_
147ec     18 F0 07 F1 | 	add	ptra, #24
147f0     D0 68 BF FD | 	call	#_pop
147f4     FD 1E 02 F6 | 	mov	local01, result1
147f8     FE 20 02 F6 | 	mov	local02, result2
147fc     FF 22 02 F6 | 	mov	local03, result3
14800     0C 4E 05 F1 | 	add	fp, #12
14804     A7 1E 62 FC | 	wrlong	local01, fp
14808     04 4E 05 F1 | 	add	fp, #4
1480c     A7 20 62 FC | 	wrlong	local02, fp
14810     04 4E 05 F1 | 	add	fp, #4
14814     A7 22 62 FC | 	wrlong	local03, fp
14818     14 4E 85 F1 | 	sub	fp, #20
1481c     A4 68 BF FD | 	call	#_pop
14820     FF 22 02 F6 | 	mov	local03, result3
14824     A7 FA 61 FC | 	wrlong	result1, fp
14828     04 4E 05 F1 | 	add	fp, #4
1482c     A7 FC 61 FC | 	wrlong	result2, fp
14830     04 4E 05 F1 | 	add	fp, #4
14834     A7 22 62 FC | 	wrlong	local03, fp
14838                 | ' t2=pop()
14838                 | ' t1=pop()
14838                 | ' 
14838                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
14838     08 4E 85 F1 | 	sub	fp, #8
1483c     1F 22 0E F2 | 	cmp	local03, #31 wz
14840     14 4E 05 A1 |  if_e	add	fp, #20
14844     A7 24 02 AB |  if_e	rdlong	local04, fp
14848     14 4E 85 A1 |  if_e	sub	fp, #20
1484c     12 23 02 A6 |  if_e	mov	local03, local04
14850     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14854     28 00 90 5D |  if_ne	jmp	#LR__1640
14858     00 1E 06 F6 | 	mov	local01, #0
1485c     A7 12 02 FB | 	rdlong	arg01, fp
14860     0C 4E 05 F1 | 	add	fp, #12
14864     A7 14 02 FB | 	rdlong	arg02, fp
14868     0C 4E 85 F1 | 	sub	fp, #12
1486c     C8 C4 B0 FD | 	call	#__system___string_cmp
14870     01 FA 55 F2 | 	cmps	result1, #1 wc
14874     00 1E 26 C6 |  if_b	not	local01, #0
14878     A7 1E 62 FC | 	wrlong	local01, fp
1487c     1C 04 90 FD | 	jmp	#LR__1653
14880                 | LR__1640
14880                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
14880     08 4E 05 F1 | 	add	fp, #8
14884     A7 1E 02 FB | 	rdlong	local01, fp
14888     08 4E 85 F1 | 	sub	fp, #8
1488c     1E 1E 0E F2 | 	cmp	local01, #30 wz
14890     14 4E 05 A1 |  if_e	add	fp, #20
14894     A7 24 02 AB |  if_e	rdlong	local04, fp
14898     14 4E 85 A1 |  if_e	sub	fp, #20
1489c     12 23 02 A6 |  if_e	mov	local03, local04
148a0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
148a4     2C 00 90 5D |  if_ne	jmp	#LR__1641
148a8     00 1E 06 F6 | 	mov	local01, #0
148ac     A7 12 02 FB | 	rdlong	arg01, fp
148b0     0C 4E 05 F1 | 	add	fp, #12
148b4     A7 14 02 FB | 	rdlong	arg02, fp
148b8     0C 4E 85 F1 | 	sub	fp, #12
148bc     01 16 06 F6 | 	mov	arg03, #1
148c0     34 F4 B0 FD | 	call	#__system___float_cmp
148c4     01 FA 55 F2 | 	cmps	result1, #1 wc
148c8     00 1E 26 C6 |  if_b	not	local01, #0
148cc     A7 1E 62 FC | 	wrlong	local01, fp
148d0     C8 03 90 FD | 	jmp	#LR__1653
148d4                 | LR__1641
148d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
148d4     08 4E 05 F1 | 	add	fp, #8
148d8     A7 1E 02 FB | 	rdlong	local01, fp
148dc     08 4E 85 F1 | 	sub	fp, #8
148e0     1E 1E 0E F2 | 	cmp	local01, #30 wz
148e4     14 4E 05 A1 |  if_e	add	fp, #20
148e8     A7 24 02 AB |  if_e	rdlong	local04, fp
148ec     14 4E 85 A1 |  if_e	sub	fp, #20
148f0     12 23 02 A6 |  if_e	mov	local03, local04
148f4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
148f8     48 00 90 5D |  if_ne	jmp	#LR__1642
148fc     00 1E 06 F6 | 	mov	local01, #0
14900     A7 20 02 FB | 	rdlong	local02, fp
14904     0C 4E 05 F1 | 	add	fp, #12
14908     A7 12 02 FB | 	rdlong	arg01, fp
1490c     0C 4E 85 F1 | 	sub	fp, #12
14910     09 13 52 F6 | 	abs	arg01, arg01 wc
14914     1F 26 C6 C9 |  if_b	decod	local05, #31
14918     00 26 06 36 |  if_ae	mov	local05, #0
1491c     A0 EB B0 FD | 	call	#__system___float_fromuns
14920     13 FB 61 F5 | 	xor	result1, local05
14924     FD 14 02 F6 | 	mov	arg02, result1
14928     10 13 02 F6 | 	mov	arg01, local02
1492c     01 16 06 F6 | 	mov	arg03, #1
14930     C4 F3 B0 FD | 	call	#__system___float_cmp
14934     01 FA 55 F2 | 	cmps	result1, #1 wc
14938     00 1E 26 C6 |  if_b	not	local01, #0
1493c     A7 1E 62 FC | 	wrlong	local01, fp
14940     58 03 90 FD | 	jmp	#LR__1653
14944                 | LR__1642
14944                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
14944     08 4E 05 F1 | 	add	fp, #8
14948     A7 1E 02 FB | 	rdlong	local01, fp
1494c     08 4E 85 F1 | 	sub	fp, #8
14950     1E 1E 0E F2 | 	cmp	local01, #30 wz
14954     14 4E 05 A1 |  if_e	add	fp, #20
14958     A7 24 02 AB |  if_e	rdlong	local04, fp
1495c     14 4E 85 A1 |  if_e	sub	fp, #20
14960     12 23 02 A6 |  if_e	mov	local03, local04
14964     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14968     38 00 90 5D |  if_ne	jmp	#LR__1643
1496c     00 1E 06 F6 | 	mov	local01, #0
14970     A7 20 02 FB | 	rdlong	local02, fp
14974     0C 4E 05 F1 | 	add	fp, #12
14978     A7 12 02 FB | 	rdlong	arg01, fp
1497c     0C 4E 85 F1 | 	sub	fp, #12
14980     3C EB B0 FD | 	call	#__system___float_fromuns
14984     FD 14 02 F6 | 	mov	arg02, result1
14988     10 13 02 F6 | 	mov	arg01, local02
1498c     01 16 06 F6 | 	mov	arg03, #1
14990     64 F3 B0 FD | 	call	#__system___float_cmp
14994     01 FA 55 F2 | 	cmps	result1, #1 wc
14998     00 1E 26 C6 |  if_b	not	local01, #0
1499c     A7 1E 62 FC | 	wrlong	local01, fp
149a0     F8 02 90 FD | 	jmp	#LR__1653
149a4                 | LR__1643
149a4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
149a4     08 4E 05 F1 | 	add	fp, #8
149a8     A7 1E 02 FB | 	rdlong	local01, fp
149ac     08 4E 85 F1 | 	sub	fp, #8
149b0     1C 1E 0E F2 | 	cmp	local01, #28 wz
149b4     14 4E 05 A1 |  if_e	add	fp, #20
149b8     A7 24 02 AB |  if_e	rdlong	local04, fp
149bc     14 4E 85 A1 |  if_e	sub	fp, #20
149c0     12 23 02 A6 |  if_e	mov	local03, local04
149c4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
149c8     44 00 90 5D |  if_ne	jmp	#LR__1644
149cc     00 1E 06 F6 | 	mov	local01, #0
149d0     A7 12 02 FB | 	rdlong	arg01, fp
149d4     09 13 52 F6 | 	abs	arg01, arg01 wc
149d8     1F 26 C6 C9 |  if_b	decod	local05, #31
149dc     00 26 06 36 |  if_ae	mov	local05, #0
149e0     DC EA B0 FD | 	call	#__system___float_fromuns
149e4     13 FB 61 F5 | 	xor	result1, local05
149e8     FD 12 02 F6 | 	mov	arg01, result1
149ec     0C 4E 05 F1 | 	add	fp, #12
149f0     A7 14 02 FB | 	rdlong	arg02, fp
149f4     0C 4E 85 F1 | 	sub	fp, #12
149f8     01 16 06 F6 | 	mov	arg03, #1
149fc     F8 F2 B0 FD | 	call	#__system___float_cmp
14a00     01 FA 55 F2 | 	cmps	result1, #1 wc
14a04     00 1E 26 C6 |  if_b	not	local01, #0
14a08     A7 1E 62 FC | 	wrlong	local01, fp
14a0c     8C 02 90 FD | 	jmp	#LR__1653
14a10                 | LR__1644
14a10                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
14a10     08 4E 05 F1 | 	add	fp, #8
14a14     A7 1E 02 FB | 	rdlong	local01, fp
14a18     08 4E 85 F1 | 	sub	fp, #8
14a1c     1C 1E 0E F2 | 	cmp	local01, #28 wz
14a20     14 4E 05 A1 |  if_e	add	fp, #20
14a24     A7 24 02 AB |  if_e	rdlong	local04, fp
14a28     14 4E 85 A1 |  if_e	sub	fp, #20
14a2c     12 23 02 A6 |  if_e	mov	local03, local04
14a30     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14a34     24 00 90 5D |  if_ne	jmp	#LR__1645
14a38     00 1E 06 F6 | 	mov	local01, #0
14a3c     A7 20 02 FB | 	rdlong	local02, fp
14a40     0C 4E 05 F1 | 	add	fp, #12
14a44     A7 22 02 FB | 	rdlong	local03, fp
14a48     0C 4E 85 F1 | 	sub	fp, #12
14a4c     11 21 5A F2 | 	cmps	local02, local03 wcz
14a50     01 1E 66 E6 |  if_be	neg	local01, #1
14a54     A7 1E 62 FC | 	wrlong	local01, fp
14a58     40 02 90 FD | 	jmp	#LR__1653
14a5c                 | LR__1645
14a5c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
14a5c     08 4E 05 F1 | 	add	fp, #8
14a60     A7 1E 02 FB | 	rdlong	local01, fp
14a64     08 4E 85 F1 | 	sub	fp, #8
14a68     1C 1E 0E F2 | 	cmp	local01, #28 wz
14a6c     14 4E 05 A1 |  if_e	add	fp, #20
14a70     A7 24 02 AB |  if_e	rdlong	local04, fp
14a74     14 4E 85 A1 |  if_e	sub	fp, #20
14a78     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
14a7c     24 00 90 5D |  if_ne	jmp	#LR__1646
14a80     00 1E 06 F6 | 	mov	local01, #0
14a84     A7 20 02 FB | 	rdlong	local02, fp
14a88     0C 4E 05 F1 | 	add	fp, #12
14a8c     A7 22 02 FB | 	rdlong	local03, fp
14a90     0C 4E 85 F1 | 	sub	fp, #12
14a94     11 21 5A F2 | 	cmps	local02, local03 wcz
14a98     01 1E 66 E6 |  if_be	neg	local01, #1
14a9c     A7 1E 62 FC | 	wrlong	local01, fp
14aa0     F8 01 90 FD | 	jmp	#LR__1653
14aa4                 | LR__1646
14aa4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
14aa4     08 4E 05 F1 | 	add	fp, #8
14aa8     A7 1E 02 FB | 	rdlong	local01, fp
14aac     08 4E 85 F1 | 	sub	fp, #8
14ab0     1D 1E 0E F2 | 	cmp	local01, #29 wz
14ab4     14 4E 05 A1 |  if_e	add	fp, #20
14ab8     A7 22 02 AB |  if_e	rdlong	local03, fp
14abc     14 4E 85 A1 |  if_e	sub	fp, #20
14ac0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14ac4     34 00 90 5D |  if_ne	jmp	#LR__1647
14ac8     00 1E 06 F6 | 	mov	local01, #0
14acc     A7 12 02 FB | 	rdlong	arg01, fp
14ad0     EC E9 B0 FD | 	call	#__system___float_fromuns
14ad4     FD 12 02 F6 | 	mov	arg01, result1
14ad8     0C 4E 05 F1 | 	add	fp, #12
14adc     A7 14 02 FB | 	rdlong	arg02, fp
14ae0     0C 4E 85 F1 | 	sub	fp, #12
14ae4     01 16 06 F6 | 	mov	arg03, #1
14ae8     0C F2 B0 FD | 	call	#__system___float_cmp
14aec     01 FA 55 F2 | 	cmps	result1, #1 wc
14af0     00 1E 26 C6 |  if_b	not	local01, #0
14af4     A7 1E 62 FC | 	wrlong	local01, fp
14af8     A0 01 90 FD | 	jmp	#LR__1653
14afc                 | LR__1647
14afc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
14afc     08 4E 05 F1 | 	add	fp, #8
14b00     A7 1E 02 FB | 	rdlong	local01, fp
14b04     08 4E 85 F1 | 	sub	fp, #8
14b08     1D 1E 0E F2 | 	cmp	local01, #29 wz
14b0c     14 4E 05 A1 |  if_e	add	fp, #20
14b10     A7 22 02 AB |  if_e	rdlong	local03, fp
14b14     14 4E 85 A1 |  if_e	sub	fp, #20
14b18     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14b1c     24 00 90 5D |  if_ne	jmp	#LR__1648
14b20     00 1E 06 F6 | 	mov	local01, #0
14b24     A7 20 02 FB | 	rdlong	local02, fp
14b28     0C 4E 05 F1 | 	add	fp, #12
14b2c     A7 22 02 FB | 	rdlong	local03, fp
14b30     0C 4E 85 F1 | 	sub	fp, #12
14b34     11 21 5A F2 | 	cmps	local02, local03 wcz
14b38     01 1E 66 E6 |  if_be	neg	local01, #1
14b3c     A7 1E 62 FC | 	wrlong	local01, fp
14b40     58 01 90 FD | 	jmp	#LR__1653
14b44                 | LR__1648
14b44                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
14b44     08 4E 05 F1 | 	add	fp, #8
14b48     A7 1E 02 FB | 	rdlong	local01, fp
14b4c     08 4E 85 F1 | 	sub	fp, #8
14b50     1D 1E 0E F2 | 	cmp	local01, #29 wz
14b54     14 4E 05 A1 |  if_e	add	fp, #20
14b58     A7 22 02 AB |  if_e	rdlong	local03, fp
14b5c     14 4E 85 A1 |  if_e	sub	fp, #20
14b60     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14b64     24 00 90 5D |  if_ne	jmp	#LR__1649
14b68     00 1E 06 F6 | 	mov	local01, #0
14b6c     A7 20 02 FB | 	rdlong	local02, fp
14b70     0C 4E 05 F1 | 	add	fp, #12
14b74     A7 22 02 FB | 	rdlong	local03, fp
14b78     0C 4E 85 F1 | 	sub	fp, #12
14b7c     11 21 1A F2 | 	cmp	local02, local03 wcz
14b80     01 1E 66 E6 |  if_be	neg	local01, #1
14b84     A7 1E 62 FC | 	wrlong	local01, fp
14b88     10 01 90 FD | 	jmp	#LR__1653
14b8c                 | LR__1649
14b8c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
14b8c     08 4E 05 F1 | 	add	fp, #8
14b90     A7 1E 02 FB | 	rdlong	local01, fp
14b94     08 4E 85 F1 | 	sub	fp, #8
14b98     2B 1E 0E F2 | 	cmp	local01, #43 wz
14b9c     14 4E 05 A1 |  if_e	add	fp, #20
14ba0     A7 22 02 AB |  if_e	rdlong	local03, fp
14ba4     14 4E 85 A1 |  if_e	sub	fp, #20
14ba8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14bac     30 00 90 5D |  if_ne	jmp	#LR__1650
14bb0     00 1E 06 F6 | 	mov	local01, #0
14bb4     A7 12 02 FB | 	rdlong	arg01, fp
14bb8     B4 BD BF FD | 	call	#_convertstring
14bbc     FD 12 02 F6 | 	mov	arg01, result1
14bc0     0C 4E 05 F1 | 	add	fp, #12
14bc4     A7 14 02 FB | 	rdlong	arg02, fp
14bc8     0C 4E 85 F1 | 	sub	fp, #12
14bcc     68 C1 B0 FD | 	call	#__system___string_cmp
14bd0     01 FA 55 F2 | 	cmps	result1, #1 wc
14bd4     00 1E 26 C6 |  if_b	not	local01, #0
14bd8     A7 1E 62 FC | 	wrlong	local01, fp
14bdc     BC 00 90 FD | 	jmp	#LR__1653
14be0                 | LR__1650
14be0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
14be0     08 4E 05 F1 | 	add	fp, #8
14be4     A7 1E 02 FB | 	rdlong	local01, fp
14be8     08 4E 85 F1 | 	sub	fp, #8
14bec     1F 1E 0E F2 | 	cmp	local01, #31 wz
14bf0     14 4E 05 A1 |  if_e	add	fp, #20
14bf4     A7 22 02 AB |  if_e	rdlong	local03, fp
14bf8     14 4E 85 A1 |  if_e	sub	fp, #20
14bfc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14c00     34 00 90 5D |  if_ne	jmp	#LR__1651
14c04     00 1E 06 F6 | 	mov	local01, #0
14c08     A7 20 02 FB | 	rdlong	local02, fp
14c0c     0C 4E 05 F1 | 	add	fp, #12
14c10     A7 12 02 FB | 	rdlong	arg01, fp
14c14     0C 4E 85 F1 | 	sub	fp, #12
14c18     54 BD BF FD | 	call	#_convertstring
14c1c     FD 14 02 F6 | 	mov	arg02, result1
14c20     10 13 02 F6 | 	mov	arg01, local02
14c24     10 C1 B0 FD | 	call	#__system___string_cmp
14c28     01 FA 55 F2 | 	cmps	result1, #1 wc
14c2c     00 1E 26 C6 |  if_b	not	local01, #0
14c30     A7 1E 62 FC | 	wrlong	local01, fp
14c34     64 00 90 FD | 	jmp	#LR__1653
14c38                 | LR__1651
14c38                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
14c38     08 4E 05 F1 | 	add	fp, #8
14c3c     A7 1E 02 FB | 	rdlong	local01, fp
14c40     08 4E 85 F1 | 	sub	fp, #8
14c44     2B 1E 0E F2 | 	cmp	local01, #43 wz
14c48     14 4E 05 A1 |  if_e	add	fp, #20
14c4c     A7 22 02 AB |  if_e	rdlong	local03, fp
14c50     14 4E 85 A1 |  if_e	sub	fp, #20
14c54     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
14c58     3C 00 90 5D |  if_ne	jmp	#LR__1652
14c5c     00 1E 06 F6 | 	mov	local01, #0
14c60     A7 12 02 FB | 	rdlong	arg01, fp
14c64     08 BD BF FD | 	call	#_convertstring
14c68     FD 20 02 F6 | 	mov	local02, result1
14c6c     0C 4E 05 F1 | 	add	fp, #12
14c70     A7 12 02 FB | 	rdlong	arg01, fp
14c74     0C 4E 85 F1 | 	sub	fp, #12
14c78     F4 BC BF FD | 	call	#_convertstring
14c7c     FD 14 02 F6 | 	mov	arg02, result1
14c80     10 13 02 F6 | 	mov	arg01, local02
14c84     B0 C0 B0 FD | 	call	#__system___string_cmp
14c88     01 FA 55 F2 | 	cmps	result1, #1 wc
14c8c     00 1E 26 C6 |  if_b	not	local01, #0
14c90     A7 1E 62 FC | 	wrlong	local01, fp
14c94     04 00 90 FD | 	jmp	#LR__1653
14c98                 | LR__1652
14c98     A7 00 68 FC | 	wrlong	#0, fp
14c9c                 | LR__1653
14c9c     08 4E 05 F1 | 	add	fp, #8
14ca0     A7 38 68 FC | 	wrlong	#28, fp
14ca4     08 4E 85 F1 | 	sub	fp, #8
14ca8     A7 12 02 F6 | 	mov	arg01, fp
14cac     AC 64 BF FD | 	call	#_push
14cb0     A7 F0 03 F6 | 	mov	ptra, fp
14cb4     B2 00 A0 FD | 	call	#popregs_
14cb8                 | _do_le_ret
14cb8     2D 00 64 FD | 	ret
14cbc                 | 
14cbc                 | ' 
14cbc                 | ' 
14cbc                 | ' sub do_ne
14cbc                 | _do_ne
14cbc     05 4A 05 F6 | 	mov	COUNT_, #5
14cc0     A8 00 A0 FD | 	call	#pushregs_
14cc4     18 F0 07 F1 | 	add	ptra, #24
14cc8     F8 63 BF FD | 	call	#_pop
14ccc     FD 1E 02 F6 | 	mov	local01, result1
14cd0     FE 20 02 F6 | 	mov	local02, result2
14cd4     FF 22 02 F6 | 	mov	local03, result3
14cd8     0C 4E 05 F1 | 	add	fp, #12
14cdc     A7 1E 62 FC | 	wrlong	local01, fp
14ce0     04 4E 05 F1 | 	add	fp, #4
14ce4     A7 20 62 FC | 	wrlong	local02, fp
14ce8     04 4E 05 F1 | 	add	fp, #4
14cec     A7 22 62 FC | 	wrlong	local03, fp
14cf0     14 4E 85 F1 | 	sub	fp, #20
14cf4     CC 63 BF FD | 	call	#_pop
14cf8     FF 22 02 F6 | 	mov	local03, result3
14cfc     A7 FA 61 FC | 	wrlong	result1, fp
14d00     04 4E 05 F1 | 	add	fp, #4
14d04     A7 FC 61 FC | 	wrlong	result2, fp
14d08     04 4E 05 F1 | 	add	fp, #4
14d0c     A7 22 62 FC | 	wrlong	local03, fp
14d10                 | ' t2=pop()
14d10                 | ' t1=pop()
14d10                 | ' 
14d10                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
14d10     08 4E 85 F1 | 	sub	fp, #8
14d14     1F 22 0E F2 | 	cmp	local03, #31 wz
14d18     14 4E 05 A1 |  if_e	add	fp, #20
14d1c     A7 24 02 AB |  if_e	rdlong	local04, fp
14d20     14 4E 85 A1 |  if_e	sub	fp, #20
14d24     12 23 02 A6 |  if_e	mov	local03, local04
14d28     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
14d2c     28 00 90 5D |  if_ne	jmp	#LR__1660
14d30     00 1E 06 F6 | 	mov	local01, #0
14d34     A7 12 02 FB | 	rdlong	arg01, fp
14d38     0C 4E 05 F1 | 	add	fp, #12
14d3c     A7 14 02 FB | 	rdlong	arg02, fp
14d40     0C 4E 85 F1 | 	sub	fp, #12
14d44     F0 BF B0 FD | 	call	#__system___string_cmp
14d48     00 FA 0D F2 | 	cmp	result1, #0 wz
14d4c     00 1E 26 56 |  if_ne	not	local01, #0
14d50     A7 1E 62 FC | 	wrlong	local01, fp
14d54     1C 04 90 FD | 	jmp	#LR__1673
14d58                 | LR__1660
14d58                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
14d58     08 4E 05 F1 | 	add	fp, #8
14d5c     A7 1E 02 FB | 	rdlong	local01, fp
14d60     08 4E 85 F1 | 	sub	fp, #8
14d64     1E 1E 0E F2 | 	cmp	local01, #30 wz
14d68     14 4E 05 A1 |  if_e	add	fp, #20
14d6c     A7 24 02 AB |  if_e	rdlong	local04, fp
14d70     14 4E 85 A1 |  if_e	sub	fp, #20
14d74     12 23 02 A6 |  if_e	mov	local03, local04
14d78     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14d7c     2C 00 90 5D |  if_ne	jmp	#LR__1661
14d80     00 1E 06 F6 | 	mov	local01, #0
14d84     A7 12 02 FB | 	rdlong	arg01, fp
14d88     0C 4E 05 F1 | 	add	fp, #12
14d8c     A7 14 02 FB | 	rdlong	arg02, fp
14d90     0C 4E 85 F1 | 	sub	fp, #12
14d94     01 16 06 F6 | 	mov	arg03, #1
14d98     5C EF B0 FD | 	call	#__system___float_cmp
14d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
14da0     00 1E 26 56 |  if_ne	not	local01, #0
14da4     A7 1E 62 FC | 	wrlong	local01, fp
14da8     C8 03 90 FD | 	jmp	#LR__1673
14dac                 | LR__1661
14dac                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
14dac     08 4E 05 F1 | 	add	fp, #8
14db0     A7 1E 02 FB | 	rdlong	local01, fp
14db4     08 4E 85 F1 | 	sub	fp, #8
14db8     1E 1E 0E F2 | 	cmp	local01, #30 wz
14dbc     14 4E 05 A1 |  if_e	add	fp, #20
14dc0     A7 24 02 AB |  if_e	rdlong	local04, fp
14dc4     14 4E 85 A1 |  if_e	sub	fp, #20
14dc8     12 23 02 A6 |  if_e	mov	local03, local04
14dcc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14dd0     48 00 90 5D |  if_ne	jmp	#LR__1662
14dd4     00 1E 06 F6 | 	mov	local01, #0
14dd8     A7 20 02 FB | 	rdlong	local02, fp
14ddc     0C 4E 05 F1 | 	add	fp, #12
14de0     A7 12 02 FB | 	rdlong	arg01, fp
14de4     0C 4E 85 F1 | 	sub	fp, #12
14de8     09 13 52 F6 | 	abs	arg01, arg01 wc
14dec     1F 26 C6 C9 |  if_b	decod	local05, #31
14df0     00 26 06 36 |  if_ae	mov	local05, #0
14df4     C8 E6 B0 FD | 	call	#__system___float_fromuns
14df8     13 FB 61 F5 | 	xor	result1, local05
14dfc     FD 14 02 F6 | 	mov	arg02, result1
14e00     10 13 02 F6 | 	mov	arg01, local02
14e04     01 16 06 F6 | 	mov	arg03, #1
14e08     EC EE B0 FD | 	call	#__system___float_cmp
14e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
14e10     00 1E 26 56 |  if_ne	not	local01, #0
14e14     A7 1E 62 FC | 	wrlong	local01, fp
14e18     58 03 90 FD | 	jmp	#LR__1673
14e1c                 | LR__1662
14e1c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
14e1c     08 4E 05 F1 | 	add	fp, #8
14e20     A7 1E 02 FB | 	rdlong	local01, fp
14e24     08 4E 85 F1 | 	sub	fp, #8
14e28     1E 1E 0E F2 | 	cmp	local01, #30 wz
14e2c     14 4E 05 A1 |  if_e	add	fp, #20
14e30     A7 24 02 AB |  if_e	rdlong	local04, fp
14e34     14 4E 85 A1 |  if_e	sub	fp, #20
14e38     12 23 02 A6 |  if_e	mov	local03, local04
14e3c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
14e40     38 00 90 5D |  if_ne	jmp	#LR__1663
14e44     00 1E 06 F6 | 	mov	local01, #0
14e48     A7 20 02 FB | 	rdlong	local02, fp
14e4c     0C 4E 05 F1 | 	add	fp, #12
14e50     A7 12 02 FB | 	rdlong	arg01, fp
14e54     0C 4E 85 F1 | 	sub	fp, #12
14e58     64 E6 B0 FD | 	call	#__system___float_fromuns
14e5c     FD 14 02 F6 | 	mov	arg02, result1
14e60     10 13 02 F6 | 	mov	arg01, local02
14e64     01 16 06 F6 | 	mov	arg03, #1
14e68     8C EE B0 FD | 	call	#__system___float_cmp
14e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
14e70     00 1E 26 56 |  if_ne	not	local01, #0
14e74     A7 1E 62 FC | 	wrlong	local01, fp
14e78     F8 02 90 FD | 	jmp	#LR__1673
14e7c                 | LR__1663
14e7c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
14e7c     08 4E 05 F1 | 	add	fp, #8
14e80     A7 1E 02 FB | 	rdlong	local01, fp
14e84     08 4E 85 F1 | 	sub	fp, #8
14e88     1C 1E 0E F2 | 	cmp	local01, #28 wz
14e8c     14 4E 05 A1 |  if_e	add	fp, #20
14e90     A7 24 02 AB |  if_e	rdlong	local04, fp
14e94     14 4E 85 A1 |  if_e	sub	fp, #20
14e98     12 23 02 A6 |  if_e	mov	local03, local04
14e9c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14ea0     44 00 90 5D |  if_ne	jmp	#LR__1664
14ea4     00 1E 06 F6 | 	mov	local01, #0
14ea8     A7 12 02 FB | 	rdlong	arg01, fp
14eac     09 13 52 F6 | 	abs	arg01, arg01 wc
14eb0     1F 26 C6 C9 |  if_b	decod	local05, #31
14eb4     00 26 06 36 |  if_ae	mov	local05, #0
14eb8     04 E6 B0 FD | 	call	#__system___float_fromuns
14ebc     13 FB 61 F5 | 	xor	result1, local05
14ec0     FD 12 02 F6 | 	mov	arg01, result1
14ec4     0C 4E 05 F1 | 	add	fp, #12
14ec8     A7 14 02 FB | 	rdlong	arg02, fp
14ecc     0C 4E 85 F1 | 	sub	fp, #12
14ed0     01 16 06 F6 | 	mov	arg03, #1
14ed4     20 EE B0 FD | 	call	#__system___float_cmp
14ed8     00 FA 0D F2 | 	cmp	result1, #0 wz
14edc     00 1E 26 56 |  if_ne	not	local01, #0
14ee0     A7 1E 62 FC | 	wrlong	local01, fp
14ee4     8C 02 90 FD | 	jmp	#LR__1673
14ee8                 | LR__1664
14ee8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
14ee8     08 4E 05 F1 | 	add	fp, #8
14eec     A7 1E 02 FB | 	rdlong	local01, fp
14ef0     08 4E 85 F1 | 	sub	fp, #8
14ef4     1C 1E 0E F2 | 	cmp	local01, #28 wz
14ef8     14 4E 05 A1 |  if_e	add	fp, #20
14efc     A7 24 02 AB |  if_e	rdlong	local04, fp
14f00     14 4E 85 A1 |  if_e	sub	fp, #20
14f04     12 23 02 A6 |  if_e	mov	local03, local04
14f08     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14f0c     24 00 90 5D |  if_ne	jmp	#LR__1665
14f10     00 1E 06 F6 | 	mov	local01, #0
14f14     A7 20 02 FB | 	rdlong	local02, fp
14f18     0C 4E 05 F1 | 	add	fp, #12
14f1c     A7 22 02 FB | 	rdlong	local03, fp
14f20     0C 4E 85 F1 | 	sub	fp, #12
14f24     11 21 0A F2 | 	cmp	local02, local03 wz
14f28     01 1E 66 56 |  if_ne	neg	local01, #1
14f2c     A7 1E 62 FC | 	wrlong	local01, fp
14f30     40 02 90 FD | 	jmp	#LR__1673
14f34                 | LR__1665
14f34                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
14f34     08 4E 05 F1 | 	add	fp, #8
14f38     A7 1E 02 FB | 	rdlong	local01, fp
14f3c     08 4E 85 F1 | 	sub	fp, #8
14f40     1C 1E 0E F2 | 	cmp	local01, #28 wz
14f44     14 4E 05 A1 |  if_e	add	fp, #20
14f48     A7 24 02 AB |  if_e	rdlong	local04, fp
14f4c     14 4E 85 A1 |  if_e	sub	fp, #20
14f50     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
14f54     24 00 90 5D |  if_ne	jmp	#LR__1666
14f58     00 1E 06 F6 | 	mov	local01, #0
14f5c     A7 20 02 FB | 	rdlong	local02, fp
14f60     0C 4E 05 F1 | 	add	fp, #12
14f64     A7 22 02 FB | 	rdlong	local03, fp
14f68     0C 4E 85 F1 | 	sub	fp, #12
14f6c     11 21 0A F2 | 	cmp	local02, local03 wz
14f70     01 1E 66 56 |  if_ne	neg	local01, #1
14f74     A7 1E 62 FC | 	wrlong	local01, fp
14f78     F8 01 90 FD | 	jmp	#LR__1673
14f7c                 | LR__1666
14f7c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
14f7c     08 4E 05 F1 | 	add	fp, #8
14f80     A7 1E 02 FB | 	rdlong	local01, fp
14f84     08 4E 85 F1 | 	sub	fp, #8
14f88     1D 1E 0E F2 | 	cmp	local01, #29 wz
14f8c     14 4E 05 A1 |  if_e	add	fp, #20
14f90     A7 22 02 AB |  if_e	rdlong	local03, fp
14f94     14 4E 85 A1 |  if_e	sub	fp, #20
14f98     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
14f9c     34 00 90 5D |  if_ne	jmp	#LR__1667
14fa0     00 1E 06 F6 | 	mov	local01, #0
14fa4     A7 12 02 FB | 	rdlong	arg01, fp
14fa8     14 E5 B0 FD | 	call	#__system___float_fromuns
14fac     FD 12 02 F6 | 	mov	arg01, result1
14fb0     0C 4E 05 F1 | 	add	fp, #12
14fb4     A7 14 02 FB | 	rdlong	arg02, fp
14fb8     0C 4E 85 F1 | 	sub	fp, #12
14fbc     01 16 06 F6 | 	mov	arg03, #1
14fc0     34 ED B0 FD | 	call	#__system___float_cmp
14fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
14fc8     00 1E 26 56 |  if_ne	not	local01, #0
14fcc     A7 1E 62 FC | 	wrlong	local01, fp
14fd0     A0 01 90 FD | 	jmp	#LR__1673
14fd4                 | LR__1667
14fd4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
14fd4     08 4E 05 F1 | 	add	fp, #8
14fd8     A7 1E 02 FB | 	rdlong	local01, fp
14fdc     08 4E 85 F1 | 	sub	fp, #8
14fe0     1D 1E 0E F2 | 	cmp	local01, #29 wz
14fe4     14 4E 05 A1 |  if_e	add	fp, #20
14fe8     A7 22 02 AB |  if_e	rdlong	local03, fp
14fec     14 4E 85 A1 |  if_e	sub	fp, #20
14ff0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
14ff4     24 00 90 5D |  if_ne	jmp	#LR__1668
14ff8     00 1E 06 F6 | 	mov	local01, #0
14ffc     A7 20 02 FB | 	rdlong	local02, fp
15000     0C 4E 05 F1 | 	add	fp, #12
15004     A7 22 02 FB | 	rdlong	local03, fp
15008     0C 4E 85 F1 | 	sub	fp, #12
1500c     11 21 0A F2 | 	cmp	local02, local03 wz
15010     01 1E 66 56 |  if_ne	neg	local01, #1
15014     A7 1E 62 FC | 	wrlong	local01, fp
15018     58 01 90 FD | 	jmp	#LR__1673
1501c                 | LR__1668
1501c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1501c     08 4E 05 F1 | 	add	fp, #8
15020     A7 1E 02 FB | 	rdlong	local01, fp
15024     08 4E 85 F1 | 	sub	fp, #8
15028     1D 1E 0E F2 | 	cmp	local01, #29 wz
1502c     14 4E 05 A1 |  if_e	add	fp, #20
15030     A7 22 02 AB |  if_e	rdlong	local03, fp
15034     14 4E 85 A1 |  if_e	sub	fp, #20
15038     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1503c     24 00 90 5D |  if_ne	jmp	#LR__1669
15040     00 1E 06 F6 | 	mov	local01, #0
15044     A7 20 02 FB | 	rdlong	local02, fp
15048     0C 4E 05 F1 | 	add	fp, #12
1504c     A7 22 02 FB | 	rdlong	local03, fp
15050     0C 4E 85 F1 | 	sub	fp, #12
15054     11 21 0A F2 | 	cmp	local02, local03 wz
15058     01 1E 66 56 |  if_ne	neg	local01, #1
1505c     A7 1E 62 FC | 	wrlong	local01, fp
15060     10 01 90 FD | 	jmp	#LR__1673
15064                 | LR__1669
15064                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
15064     08 4E 05 F1 | 	add	fp, #8
15068     A7 1E 02 FB | 	rdlong	local01, fp
1506c     08 4E 85 F1 | 	sub	fp, #8
15070     2B 1E 0E F2 | 	cmp	local01, #43 wz
15074     14 4E 05 A1 |  if_e	add	fp, #20
15078     A7 22 02 AB |  if_e	rdlong	local03, fp
1507c     14 4E 85 A1 |  if_e	sub	fp, #20
15080     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
15084     30 00 90 5D |  if_ne	jmp	#LR__1670
15088     00 1E 06 F6 | 	mov	local01, #0
1508c     A7 12 02 FB | 	rdlong	arg01, fp
15090     DC B8 BF FD | 	call	#_convertstring
15094     FD 12 02 F6 | 	mov	arg01, result1
15098     0C 4E 05 F1 | 	add	fp, #12
1509c     A7 14 02 FB | 	rdlong	arg02, fp
150a0     0C 4E 85 F1 | 	sub	fp, #12
150a4     90 BC B0 FD | 	call	#__system___string_cmp
150a8     00 FA 0D F2 | 	cmp	result1, #0 wz
150ac     00 1E 26 56 |  if_ne	not	local01, #0
150b0     A7 1E 62 FC | 	wrlong	local01, fp
150b4     BC 00 90 FD | 	jmp	#LR__1673
150b8                 | LR__1670
150b8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
150b8     08 4E 05 F1 | 	add	fp, #8
150bc     A7 1E 02 FB | 	rdlong	local01, fp
150c0     08 4E 85 F1 | 	sub	fp, #8
150c4     1F 1E 0E F2 | 	cmp	local01, #31 wz
150c8     14 4E 05 A1 |  if_e	add	fp, #20
150cc     A7 22 02 AB |  if_e	rdlong	local03, fp
150d0     14 4E 85 A1 |  if_e	sub	fp, #20
150d4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
150d8     34 00 90 5D |  if_ne	jmp	#LR__1671
150dc     00 1E 06 F6 | 	mov	local01, #0
150e0     A7 20 02 FB | 	rdlong	local02, fp
150e4     0C 4E 05 F1 | 	add	fp, #12
150e8     A7 12 02 FB | 	rdlong	arg01, fp
150ec     0C 4E 85 F1 | 	sub	fp, #12
150f0     7C B8 BF FD | 	call	#_convertstring
150f4     FD 14 02 F6 | 	mov	arg02, result1
150f8     10 13 02 F6 | 	mov	arg01, local02
150fc     38 BC B0 FD | 	call	#__system___string_cmp
15100     00 FA 0D F2 | 	cmp	result1, #0 wz
15104     00 1E 26 56 |  if_ne	not	local01, #0
15108     A7 1E 62 FC | 	wrlong	local01, fp
1510c     64 00 90 FD | 	jmp	#LR__1673
15110                 | LR__1671
15110                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
15110     08 4E 05 F1 | 	add	fp, #8
15114     A7 1E 02 FB | 	rdlong	local01, fp
15118     08 4E 85 F1 | 	sub	fp, #8
1511c     2B 1E 0E F2 | 	cmp	local01, #43 wz
15120     14 4E 05 A1 |  if_e	add	fp, #20
15124     A7 22 02 AB |  if_e	rdlong	local03, fp
15128     14 4E 85 A1 |  if_e	sub	fp, #20
1512c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
15130     3C 00 90 5D |  if_ne	jmp	#LR__1672
15134     00 1E 06 F6 | 	mov	local01, #0
15138     A7 12 02 FB | 	rdlong	arg01, fp
1513c     30 B8 BF FD | 	call	#_convertstring
15140     FD 20 02 F6 | 	mov	local02, result1
15144     0C 4E 05 F1 | 	add	fp, #12
15148     A7 12 02 FB | 	rdlong	arg01, fp
1514c     0C 4E 85 F1 | 	sub	fp, #12
15150     1C B8 BF FD | 	call	#_convertstring
15154     FD 14 02 F6 | 	mov	arg02, result1
15158     10 13 02 F6 | 	mov	arg01, local02
1515c     D8 BB B0 FD | 	call	#__system___string_cmp
15160     00 FA 0D F2 | 	cmp	result1, #0 wz
15164     00 1E 26 56 |  if_ne	not	local01, #0
15168     A7 1E 62 FC | 	wrlong	local01, fp
1516c     04 00 90 FD | 	jmp	#LR__1673
15170                 | LR__1672
15170     A7 00 68 FC | 	wrlong	#0, fp
15174                 | LR__1673
15174     08 4E 05 F1 | 	add	fp, #8
15178     A7 38 68 FC | 	wrlong	#28, fp
1517c     08 4E 85 F1 | 	sub	fp, #8
15180     A7 12 02 F6 | 	mov	arg01, fp
15184     D4 5F BF FD | 	call	#_push
15188     A7 F0 03 F6 | 	mov	ptra, fp
1518c     B2 00 A0 FD | 	call	#popregs_
15190                 | _do_ne_ret
15190     2D 00 64 FD | 	ret
15194                 | 
15194                 | ' 
15194                 | ' 
15194                 | ' 
15194                 | ' ' -------------------   convert a variable on the top of stack to integer
15194                 | ' 
15194                 | ' 'sub do_converttoint'
15194                 | ' 
15194                 | ' 'dim t1 as expr_result 
15194                 | ' 'dim a1,r as integer
15194                 | ' 't1=pop() 
15194                 | ' 'select case t1.result_type
15194                 | ' '  case result_int: a1=t1.result.iresult : r=result_int
15194                 | ' '  case result_uint: a1=t1.result.uresult : r=result_int
15194                 | ' '  case result_float: a1=round(t1.result.fresult) : r=result_int
15194                 | ' '  case result_string: a1=val(t1.result.sresult) :r=result_int
15194                 | ' '  case result_string2: a1=val(convertstring(t1.result.uresult)) :r=result_int
15194                 | ' '  case result_error: a1=0: r=t1.result.uresult
15194                 | ' '  case else : a1=0 : r=1
15194                 | ' 
15194                 | ' 'end select
15194                 | ' 't1.result.iresult=a1 : t1.result_type=r : push t1 
15194                 | ' 
15194                 | ' 'end sub
15194                 | ' 
15194                 | ' 
15194                 | ' 
15194                 | ' 
15194                 | ' function converttoint (t1 as expr_result) as integer 
15194                 | _converttoint
15194     02 4A 05 F6 | 	mov	COUNT_, #2
15198     A8 00 A0 FD | 	call	#pushregs_
1519c     09 1F 02 F6 | 	mov	local01, arg01
151a0                 | ' 
151a0                 | ' select case t1.result_type
151a0     08 1E 06 F1 | 	add	local01, #8
151a4     0F 21 02 FB | 	rdlong	local02, local01
151a8     08 1E 86 F1 | 	sub	local01, #8
151ac     1C 20 0E F2 | 	cmp	local02, #28 wz
151b0     2C 00 90 AD |  if_e	jmp	#LR__1680
151b4     1D 20 0E F2 | 	cmp	local02, #29 wz
151b8     2C 00 90 AD |  if_e	jmp	#LR__1681
151bc     1E 20 0E F2 | 	cmp	local02, #30 wz
151c0     2C 00 90 AD |  if_e	jmp	#LR__1682
151c4     1F 20 0E F2 | 	cmp	local02, #31 wz
151c8     34 00 90 AD |  if_e	jmp	#LR__1683
151cc     2B 20 0E F2 | 	cmp	local02, #43 wz
151d0     44 00 90 AD |  if_e	jmp	#LR__1684
151d4     2C 20 0E F2 | 	cmp	local02, #44 wz
151d8     5C 00 90 AD |  if_e	jmp	#LR__1685
151dc     60 00 90 FD | 	jmp	#LR__1686
151e0                 | LR__1680
151e0     0F FB 01 FB | 	rdlong	result1, local01
151e4     5C 00 90 FD | 	jmp	#LR__1687
151e8                 | LR__1681
151e8     0F FB 01 FB | 	rdlong	result1, local01
151ec     54 00 90 FD | 	jmp	#LR__1687
151f0                 | LR__1682
151f0     0F 13 02 FB | 	rdlong	arg01, local01
151f4     01 14 06 F6 | 	mov	arg02, #1
151f8     90 EB B0 FD | 	call	#__system___float_tointeger
151fc     44 00 90 FD | 	jmp	#LR__1687
15200                 | LR__1683
15200     0F 13 02 FB | 	rdlong	arg01, local01
15204     A4 EE B0 FD | 	call	#__system____builtin_atof
15208     FD 12 02 F6 | 	mov	arg01, result1
1520c     01 14 06 F6 | 	mov	arg02, #1
15210     78 EB B0 FD | 	call	#__system___float_tointeger
15214     2C 00 90 FD | 	jmp	#LR__1687
15218                 | LR__1684
15218     0F 13 02 FB | 	rdlong	arg01, local01
1521c     50 B7 BF FD | 	call	#_convertstring
15220     FD 12 02 F6 | 	mov	arg01, result1
15224     84 EE B0 FD | 	call	#__system____builtin_atof
15228     FD 12 02 F6 | 	mov	arg01, result1
1522c     01 14 06 F6 | 	mov	arg02, #1
15230     58 EB B0 FD | 	call	#__system___float_tointeger
15234     0C 00 90 FD | 	jmp	#LR__1687
15238                 | LR__1685
15238     0F FB 01 FB | 	rdlong	result1, local01
1523c     04 00 90 FD | 	jmp	#LR__1687
15240                 | LR__1686
15240     00 FA 05 F6 | 	mov	result1, #0
15244                 | LR__1687
15244     A7 F0 03 F6 | 	mov	ptra, fp
15248     B2 00 A0 FD | 	call	#popregs_
1524c                 | _converttoint_ret
1524c     2D 00 64 FD | 	ret
15250                 | 
15250                 | ' 
15250                 | ' function converttofloat (t1 as expr_result) as single
15250                 | _converttofloat
15250     03 4A 05 F6 | 	mov	COUNT_, #3
15254     A8 00 A0 FD | 	call	#pushregs_
15258     09 1F 02 F6 | 	mov	local01, arg01
1525c                 | ' 
1525c                 | ' select case t1.result_type
1525c     08 1E 06 F1 | 	add	local01, #8
15260     0F 21 02 FB | 	rdlong	local02, local01
15264     08 1E 86 F1 | 	sub	local01, #8
15268     1C 20 0E F2 | 	cmp	local02, #28 wz
1526c     24 00 90 AD |  if_e	jmp	#LR__1690
15270     1D 20 0E F2 | 	cmp	local02, #29 wz
15274     38 00 90 AD |  if_e	jmp	#LR__1691
15278     1E 20 0E F2 | 	cmp	local02, #30 wz
1527c     3C 00 90 AD |  if_e	jmp	#LR__1692
15280     1F 20 0E F2 | 	cmp	local02, #31 wz
15284     3C 00 90 AD |  if_e	jmp	#LR__1693
15288     2B 20 0E F2 | 	cmp	local02, #43 wz
1528c     40 00 90 AD |  if_e	jmp	#LR__1694
15290     50 00 90 FD | 	jmp	#LR__1695
15294                 | LR__1690
15294     0F 13 02 FB | 	rdlong	arg01, local01
15298     09 13 52 F6 | 	abs	arg01, arg01 wc
1529c     1F 22 C6 C9 |  if_b	decod	local03, #31
152a0     00 22 06 36 |  if_ae	mov	local03, #0
152a4     18 E2 B0 FD | 	call	#__system___float_fromuns
152a8     11 FB 61 F5 | 	xor	result1, local03
152ac     38 00 90 FD | 	jmp	#LR__1696
152b0                 | LR__1691
152b0     0F 13 02 FB | 	rdlong	arg01, local01
152b4     08 E2 B0 FD | 	call	#__system___float_fromuns
152b8     2C 00 90 FD | 	jmp	#LR__1696
152bc                 | LR__1692
152bc     0F FB 01 FB | 	rdlong	result1, local01
152c0     24 00 90 FD | 	jmp	#LR__1696
152c4                 | LR__1693
152c4     0F 13 02 FB | 	rdlong	arg01, local01
152c8     E0 ED B0 FD | 	call	#__system____builtin_atof
152cc     18 00 90 FD | 	jmp	#LR__1696
152d0                 | LR__1694
152d0     0F 13 02 FB | 	rdlong	arg01, local01
152d4     98 B6 BF FD | 	call	#_convertstring
152d8     FD 12 02 F6 | 	mov	arg01, result1
152dc     CC ED B0 FD | 	call	#__system____builtin_atof
152e0     04 00 90 FD | 	jmp	#LR__1696
152e4                 | LR__1695
152e4     00 FA 05 F6 | 	mov	result1, #0
152e8                 | LR__1696
152e8     A7 F0 03 F6 | 	mov	ptra, fp
152ec     B2 00 A0 FD | 	call	#popregs_
152f0                 | _converttofloat_ret
152f0     2D 00 64 FD | 	ret
152f4                 | 
152f4                 | ' 
152f4                 | ' sub do_rnd
152f4                 | _do_rnd
152f4     01 4A 05 F6 | 	mov	COUNT_, #1
152f8     A8 00 A0 FD | 	call	#pushregs_
152fc     10 F0 07 F1 | 	add	ptra, #16
15300     4A 00 00 FF 
15304     B0 E4 05 F1 | 	add	objptr, ##38064
15308     F2 1E 02 FB | 	rdlong	local01, objptr
1530c     0F 17 02 F6 | 	mov	arg03, local01
15310     01 16 66 F0 | 	shl	arg03, #1
15314     0F 17 02 F1 | 	add	arg03, local01
15318     02 16 66 F0 | 	shl	arg03, #2
1531c     03 00 00 FF 
15320     04 E4 85 F1 | 	sub	objptr, ##1540
15324     F2 16 02 F1 | 	add	arg03, objptr
15328     0B 17 02 FB | 	rdlong	arg03, arg03
1532c     0C 4E 05 F1 | 	add	fp, #12
15330     A7 16 62 FC | 	wrlong	arg03, fp
15334                 | ' 
15334                 | ' numpar=compiledline(lineptr_e).result.uresult
15334                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
15334     0C 4E 85 F1 | 	sub	fp, #12
15338     02 16 16 F2 | 	cmp	arg03, #2 wc
1533c     47 00 00 FF 
15340     AC E4 85 F1 | 	sub	objptr, ##36524
15344     3C 00 90 CD |  if_b	jmp	#LR__1700
15348     00 12 06 F6 | 	mov	arg01, #0
1534c     00 14 B1 FD | 	call	#__system___getiolock_0540
15350     FD 12 02 F6 | 	mov	arg01, result1
15354     B8 B9 B0 FD | 	call	#__system___lockmem
15358     86 01 00 FF 
1535c     F9 14 06 F6 | 	mov	arg02, ##@LR__5402
15360     00 12 06 F6 | 	mov	arg01, #0
15364     00 16 06 F6 | 	mov	arg03, #0
15368     98 C6 B0 FD | 	call	#__system___basic_print_string
1536c     00 12 06 F6 | 	mov	arg01, #0
15370     DC 13 B1 FD | 	call	#__system___getiolock_0540
15374     FD 00 68 FC | 	wrlong	#0, result1
15378     27 12 06 F6 | 	mov	arg01, #39
1537c     E8 74 B0 FD | 	call	#_printerror
15380     2C 01 90 FD | 	jmp	#LR__1707
15384                 | LR__1700
15384                 | ' if numpar=0 then
15384     0C 4E 05 F1 | 	add	fp, #12
15388     A7 FE 09 FB | 	rdlong	result3, fp wz
1538c     0C 4E 85 F1 | 	sub	fp, #12
15390     20 00 90 5D |  if_ne	jmp	#LR__1701
15394     08 4E 05 F1 | 	add	fp, #8
15398     A7 3A 68 FC | 	wrlong	#29, fp
1539c     08 4E 85 F1 | 	sub	fp, #8
153a0     1B FA 61 FD | 	getrnd	result1
153a4     A7 FA 61 FC | 	wrlong	result1, fp
153a8     A7 12 02 F6 | 	mov	arg01, fp
153ac     AC 5D BF FD | 	call	#_push
153b0     FC 00 90 FD | 	jmp	#LR__1706
153b4                 | LR__1701
153b4     0C 5D BF FD | 	call	#_pop
153b8     A7 FA 61 FC | 	wrlong	result1, fp
153bc     04 4E 05 F1 | 	add	fp, #4
153c0     A7 FC 61 FC | 	wrlong	result2, fp
153c4     04 4E 05 F1 | 	add	fp, #4
153c8     A7 FE 61 FC | 	wrlong	result3, fp
153cc                 | '   t1=pop()
153cc                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
153cc     08 4E 85 F1 | 	sub	fp, #8
153d0     1C FE 0D F2 | 	cmp	result3, #28 wz
153d4     08 4E 05 51 |  if_ne	add	fp, #8
153d8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
153dc     08 4E 85 51 |  if_ne	sub	fp, #8
153e0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
153e4     2C 00 90 5D |  if_ne	jmp	#LR__1702
153e8     1B FA 61 FD | 	getrnd	result1
153ec     A7 1E 02 FB | 	rdlong	local01, fp
153f0     0F FB 11 FD | 	qdiv	result1, local01
153f4     A7 12 02 F6 | 	mov	arg01, fp
153f8     19 1E 62 FD | 	getqy	local01
153fc     A7 1E 62 FC | 	wrlong	local01, fp
15400     08 4E 05 F1 | 	add	fp, #8
15404     A7 3A 68 FC | 	wrlong	#29, fp
15408     08 4E 85 F1 | 	sub	fp, #8
1540c     4C 5D BF FD | 	call	#_push
15410     9C 00 90 FD | 	jmp	#LR__1705
15414                 | LR__1702
15414     08 4E 05 F1 | 	add	fp, #8
15418     A7 1E 02 FB | 	rdlong	local01, fp
1541c     08 4E 85 F1 | 	sub	fp, #8
15420     1E 1E 0E F2 | 	cmp	local01, #30 wz
15424     48 00 90 5D |  if_ne	jmp	#LR__1703
15428     A7 12 02 FB | 	rdlong	arg01, fp
1542c     00 C0 24 FF 
15430     00 14 06 F6 | 	mov	arg02, ##1233125376
15434     90 E6 B0 FD | 	call	#__system___float_div
15438     FD 1E 02 F6 | 	mov	local01, result1
1543c     1B 12 62 FD | 	getrnd	arg01
15440     74 13 06 F4 | 	bitl	arg01, #372
15444     78 E0 B0 FD | 	call	#__system___float_fromuns
15448     FD 14 02 F6 | 	mov	arg02, result1
1544c     0F 13 02 F6 | 	mov	arg01, local01
15450     70 E4 B0 FD | 	call	#__system___float_mul
15454     A7 FA 61 FC | 	wrlong	result1, fp
15458     08 4E 05 F1 | 	add	fp, #8
1545c     A7 3C 68 FC | 	wrlong	#30, fp
15460     08 4E 85 F1 | 	sub	fp, #8
15464     A7 12 02 F6 | 	mov	arg01, fp
15468     F0 5C BF FD | 	call	#_push
1546c     40 00 90 FD | 	jmp	#LR__1704
15470                 | LR__1703
15470                 | '     print "rnd: "; : printerror(40) 
15470     00 12 06 F6 | 	mov	arg01, #0
15474     D8 12 B1 FD | 	call	#__system___getiolock_0540
15478     FD 12 02 F6 | 	mov	arg01, result1
1547c     90 B8 B0 FD | 	call	#__system___lockmem
15480     86 01 00 FF 
15484     FF 14 06 F6 | 	mov	arg02, ##@LR__5403
15488     00 12 06 F6 | 	mov	arg01, #0
1548c     00 16 06 F6 | 	mov	arg03, #0
15490     70 C5 B0 FD | 	call	#__system___basic_print_string
15494     00 12 06 F6 | 	mov	arg01, #0
15498     B4 12 B1 FD | 	call	#__system___getiolock_0540
1549c     FD 00 68 FC | 	wrlong	#0, result1
154a0     28 12 06 F6 | 	mov	arg01, #40
154a4     C0 73 B0 FD | 	call	#_printerror
154a8     A7 12 02 F6 | 	mov	arg01, fp
154ac     AC 5C BF FD | 	call	#_push
154b0                 | LR__1704
154b0                 | LR__1705
154b0                 | LR__1706
154b0                 | LR__1707
154b0     A7 F0 03 F6 | 	mov	ptra, fp
154b4     B2 00 A0 FD | 	call	#popregs_
154b8                 | _do_rnd_ret
154b8     2D 00 64 FD | 	ret
154bc                 | 
154bc                 | ' 
154bc                 | ' sub do_getenvsustain
154bc                 | _do_getenvsustain
154bc     01 4A 05 F6 | 	mov	COUNT_, #1
154c0     A8 00 A0 FD | 	call	#pushregs_
154c4     10 F0 07 F1 | 	add	ptra, #16
154c8     4A 00 00 FF 
154cc     B0 E4 05 F1 | 	add	objptr, ##38064
154d0     F2 1E 02 FB | 	rdlong	local01, objptr
154d4     0F 17 02 F6 | 	mov	arg03, local01
154d8     01 16 66 F0 | 	shl	arg03, #1
154dc     0F 17 02 F1 | 	add	arg03, local01
154e0     02 16 66 F0 | 	shl	arg03, #2
154e4     03 00 00 FF 
154e8     04 E4 85 F1 | 	sub	objptr, ##1540
154ec     F2 16 02 F1 | 	add	arg03, objptr
154f0     0B 17 02 FB | 	rdlong	arg03, arg03
154f4     0C 4E 05 F1 | 	add	fp, #12
154f8     A7 16 62 FC | 	wrlong	arg03, fp
154fc                 | ' 
154fc                 | ' numpar=compiledline(lineptr_e).result.uresult
154fc                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
154fc     0C 4E 85 F1 | 	sub	fp, #12
15500     02 16 16 F2 | 	cmp	arg03, #2 wc
15504     47 00 00 FF 
15508     AC E4 85 F1 | 	sub	objptr, ##36524
1550c     0C 4E 05 C1 |  if_b	add	fp, #12
15510     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
15514     0C 4E 85 C1 |  if_b	sub	fp, #12
15518     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1710
1551c     00 12 06 F6 | 	mov	arg01, #0
15520     2C 12 B1 FD | 	call	#__system___getiolock_0540
15524     FD 12 02 F6 | 	mov	arg01, result1
15528     E4 B7 B0 FD | 	call	#__system___lockmem
1552c     86 01 00 FF 
15530     05 15 06 F6 | 	mov	arg02, ##@LR__5404
15534     00 12 06 F6 | 	mov	arg01, #0
15538     00 16 06 F6 | 	mov	arg03, #0
1553c     C4 C4 B0 FD | 	call	#__system___basic_print_string
15540     00 12 06 F6 | 	mov	arg01, #0
15544     08 12 B1 FD | 	call	#__system___getiolock_0540
15548     FD 00 68 FC | 	wrlong	#0, result1
1554c     27 12 06 F6 | 	mov	arg01, #39
15550     14 73 B0 FD | 	call	#_printerror
15554     64 00 90 FD | 	jmp	#LR__1711
15558                 | LR__1710
15558     68 5B BF FD | 	call	#_pop
1555c     FD 1E 02 F6 | 	mov	local01, result1
15560     FE 16 02 F6 | 	mov	arg03, result2
15564     A7 1E 62 FC | 	wrlong	local01, fp
15568     04 4E 05 F1 | 	add	fp, #4
1556c     A7 16 62 FC | 	wrlong	arg03, fp
15570     04 4E 05 F1 | 	add	fp, #4
15574     A7 FE 61 FC | 	wrlong	result3, fp
15578     08 4E 85 F1 | 	sub	fp, #8
1557c     A7 12 02 F6 | 	mov	arg01, fp
15580     10 FC BF FD | 	call	#_converttoint
15584     FD 1E 02 F6 | 	mov	local01, result1
15588     01 1E 66 F0 | 	shl	local01, #1
1558c     59 00 00 FF 
15590     FC E5 05 F1 | 	add	objptr, ##46076
15594     F2 1E 02 F1 | 	add	local01, objptr
15598     0F 1F E2 FA | 	rdword	local01, local01
1559c     A7 1E 62 FC | 	wrlong	local01, fp
155a0     08 4E 05 F1 | 	add	fp, #8
155a4     A7 38 68 FC | 	wrlong	#28, fp
155a8     08 4E 85 F1 | 	sub	fp, #8
155ac     A7 12 02 F6 | 	mov	arg01, fp
155b0     59 00 00 FF 
155b4     FC E5 85 F1 | 	sub	objptr, ##46076
155b8     A0 5B BF FD | 	call	#_push
155bc                 | LR__1711
155bc     A7 F0 03 F6 | 	mov	ptra, fp
155c0     B2 00 A0 FD | 	call	#popregs_
155c4                 | _do_getenvsustain_ret
155c4     2D 00 64 FD | 	ret
155c8                 | 
155c8                 | ' 
155c8                 | ' sub do_sin
155c8                 | _do_sin
155c8     01 4A 05 F6 | 	mov	COUNT_, #1
155cc     A8 00 A0 FD | 	call	#pushregs_
155d0     10 F0 07 F1 | 	add	ptra, #16
155d4     4A 00 00 FF 
155d8     B0 E4 05 F1 | 	add	objptr, ##38064
155dc     F2 1E 02 FB | 	rdlong	local01, objptr
155e0     0F 17 02 F6 | 	mov	arg03, local01
155e4     01 16 66 F0 | 	shl	arg03, #1
155e8     0F 17 02 F1 | 	add	arg03, local01
155ec     02 16 66 F0 | 	shl	arg03, #2
155f0     03 00 00 FF 
155f4     04 E4 85 F1 | 	sub	objptr, ##1540
155f8     F2 16 02 F1 | 	add	arg03, objptr
155fc     0B 17 02 FB | 	rdlong	arg03, arg03
15600     0C 4E 05 F1 | 	add	fp, #12
15604     A7 16 62 FC | 	wrlong	arg03, fp
15608                 | ' 
15608                 | ' numpar=compiledline(lineptr_e).result.uresult
15608                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
15608     0C 4E 85 F1 | 	sub	fp, #12
1560c     02 16 16 F2 | 	cmp	arg03, #2 wc
15610     47 00 00 FF 
15614     AC E4 85 F1 | 	sub	objptr, ##36524
15618     0C 4E 05 C1 |  if_b	add	fp, #12
1561c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
15620     0C 4E 85 C1 |  if_b	sub	fp, #12
15624     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1720
15628     00 12 06 F6 | 	mov	arg01, #0
1562c     20 11 B1 FD | 	call	#__system___getiolock_0540
15630     FD 12 02 F6 | 	mov	arg01, result1
15634     D8 B6 B0 FD | 	call	#__system___lockmem
15638     86 01 00 FF 
1563c     15 15 06 F6 | 	mov	arg02, ##@LR__5405
15640     00 12 06 F6 | 	mov	arg01, #0
15644     00 16 06 F6 | 	mov	arg03, #0
15648     B8 C3 B0 FD | 	call	#__system___basic_print_string
1564c     00 12 06 F6 | 	mov	arg01, #0
15650     FC 10 B1 FD | 	call	#__system___getiolock_0540
15654     FD 00 68 FC | 	wrlong	#0, result1
15658     27 12 06 F6 | 	mov	arg01, #39
1565c     08 72 B0 FD | 	call	#_printerror
15660     64 00 90 FD | 	jmp	#LR__1721
15664                 | LR__1720
15664     5C 5A BF FD | 	call	#_pop
15668     A7 FA 61 FC | 	wrlong	result1, fp
1566c     04 4E 05 F1 | 	add	fp, #4
15670     A7 FC 61 FC | 	wrlong	result2, fp
15674     04 4E 05 F1 | 	add	fp, #4
15678     A7 FE 61 FC | 	wrlong	result3, fp
1567c     08 4E 85 F1 | 	sub	fp, #8
15680     59 00 00 FF 
15684     F0 E5 05 F1 | 	add	objptr, ##46064
15688     F2 1E 02 FB | 	rdlong	local01, objptr
1568c     59 00 00 FF 
15690     F0 E5 85 F1 | 	sub	objptr, ##46064
15694     A7 12 02 F6 | 	mov	arg01, fp
15698     B4 FB BF FD | 	call	#_converttofloat
1569c     FD 14 02 F6 | 	mov	arg02, result1
156a0     0F 13 02 F6 | 	mov	arg01, local01
156a4     1C E2 B0 FD | 	call	#__system___float_mul
156a8     FD 12 02 F6 | 	mov	arg01, result1
156ac     50 EB B0 FD | 	call	#__system____builtin_sinf
156b0     A7 FA 61 FC | 	wrlong	result1, fp
156b4     08 4E 05 F1 | 	add	fp, #8
156b8     A7 3C 68 FC | 	wrlong	#30, fp
156bc     08 4E 85 F1 | 	sub	fp, #8
156c0     A7 12 02 F6 | 	mov	arg01, fp
156c4     94 5A BF FD | 	call	#_push
156c8                 | LR__1721
156c8     A7 F0 03 F6 | 	mov	ptra, fp
156cc     B2 00 A0 FD | 	call	#popregs_
156d0                 | _do_sin_ret
156d0     2D 00 64 FD | 	ret
156d4                 | 
156d4                 | ' 
156d4                 | ' 
156d4                 | ' sub do_mid
156d4                 | _do_mid
156d4     00 4A 05 F6 | 	mov	COUNT_, #0
156d8     A8 00 A0 FD | 	call	#pushregs_
156dc     18 F0 07 F1 | 	add	ptra, #24
156e0     4A 00 00 FF 
156e4     B0 E4 05 F1 | 	add	objptr, ##38064
156e8     F2 16 02 FB | 	rdlong	arg03, objptr
156ec     0B 15 02 F6 | 	mov	arg02, arg03
156f0     01 14 66 F0 | 	shl	arg02, #1
156f4     0B 15 02 F1 | 	add	arg02, arg03
156f8     02 14 66 F0 | 	shl	arg02, #2
156fc     03 00 00 FF 
15700     04 E4 85 F1 | 	sub	objptr, ##1540
15704     F2 14 02 F1 | 	add	arg02, objptr
15708     0A 17 02 FB | 	rdlong	arg03, arg02
1570c     0C 4E 05 F1 | 	add	fp, #12
15710     A7 16 62 FC | 	wrlong	arg03, fp
15714                 | ' 
15714                 | ' numpar=compiledline(lineptr_e).result.uresult
15714                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
15714     0C 4E 85 F1 | 	sub	fp, #12
15718     03 16 0E F2 | 	cmp	arg03, #3 wz
1571c     47 00 00 FF 
15720     AC E4 85 F1 | 	sub	objptr, ##36524
15724     3C 00 90 AD |  if_e	jmp	#LR__1730
15728     00 12 06 F6 | 	mov	arg01, #0
1572c     20 10 B1 FD | 	call	#__system___getiolock_0540
15730     FD 12 02 F6 | 	mov	arg01, result1
15734     D8 B5 B0 FD | 	call	#__system___lockmem
15738     86 01 00 FF 
1573c     1B 15 06 F6 | 	mov	arg02, ##@LR__5406
15740     00 12 06 F6 | 	mov	arg01, #0
15744     00 16 06 F6 | 	mov	arg03, #0
15748     B8 C2 B0 FD | 	call	#__system___basic_print_string
1574c     00 12 06 F6 | 	mov	arg01, #0
15750     FC 0F B1 FD | 	call	#__system___getiolock_0540
15754     FD 00 68 FC | 	wrlong	#0, result1
15758     27 12 06 F6 | 	mov	arg01, #39
1575c     08 71 B0 FD | 	call	#_printerror
15760     28 01 90 FD | 	jmp	#LR__1733
15764                 | LR__1730
15764     5C 59 BF FD | 	call	#_pop
15768     FF 16 02 F6 | 	mov	arg03, result3
1576c     A7 FA 61 FC | 	wrlong	result1, fp
15770     04 4E 05 F1 | 	add	fp, #4
15774     A7 FC 61 FC | 	wrlong	result2, fp
15778     04 4E 05 F1 | 	add	fp, #4
1577c     A7 16 62 FC | 	wrlong	arg03, fp
15780     08 4E 85 F1 | 	sub	fp, #8
15784     A7 12 02 F6 | 	mov	arg01, fp
15788     08 FA BF FD | 	call	#_converttoint
1578c     FD 16 02 F6 | 	mov	arg03, result1
15790     14 4E 05 F1 | 	add	fp, #20
15794     A7 16 62 FC | 	wrlong	arg03, fp
15798     14 4E 85 F1 | 	sub	fp, #20
1579c     24 59 BF FD | 	call	#_pop
157a0     FF 16 02 F6 | 	mov	arg03, result3
157a4     A7 FA 61 FC | 	wrlong	result1, fp
157a8     04 4E 05 F1 | 	add	fp, #4
157ac     A7 FC 61 FC | 	wrlong	result2, fp
157b0     04 4E 05 F1 | 	add	fp, #4
157b4     A7 16 62 FC | 	wrlong	arg03, fp
157b8     08 4E 85 F1 | 	sub	fp, #8
157bc     A7 12 02 F6 | 	mov	arg01, fp
157c0     D0 F9 BF FD | 	call	#_converttoint
157c4     FD 16 02 F6 | 	mov	arg03, result1
157c8     10 4E 05 F1 | 	add	fp, #16
157cc     A7 16 62 FC | 	wrlong	arg03, fp
157d0     10 4E 85 F1 | 	sub	fp, #16
157d4     EC 58 BF FD | 	call	#_pop
157d8     FF 16 02 F6 | 	mov	arg03, result3
157dc     A7 FA 61 FC | 	wrlong	result1, fp
157e0     04 4E 05 F1 | 	add	fp, #4
157e4     A7 FC 61 FC | 	wrlong	result2, fp
157e8     04 4E 05 F1 | 	add	fp, #4
157ec     A7 16 62 FC | 	wrlong	arg03, fp
157f0                 | ' t1=pop() : arg2=converttoint(t1)
157f0                 | ' t1=pop() : arg1=converttoint(t1)
157f0                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
157f0     08 4E 85 F1 | 	sub	fp, #8
157f4     2B 16 0E F2 | 	cmp	arg03, #43 wz
157f8     18 00 90 5D |  if_ne	jmp	#LR__1731
157fc     A7 12 02 FB | 	rdlong	arg01, fp
15800     6C B1 BF FD | 	call	#_convertstring
15804     A7 FA 61 FC | 	wrlong	result1, fp
15808     08 4E 05 F1 | 	add	fp, #8
1580c     A7 3E 68 FC | 	wrlong	#31, fp
15810     08 4E 85 F1 | 	sub	fp, #8
15814                 | LR__1731
15814                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
15814     08 4E 05 F1 | 	add	fp, #8
15818     A7 16 02 FB | 	rdlong	arg03, fp
1581c     08 4E 85 F1 | 	sub	fp, #8
15820     1F 16 0E F2 | 	cmp	arg03, #31 wz
15824     3C 00 90 AD |  if_e	jmp	#LR__1732
15828     00 12 06 F6 | 	mov	arg01, #0
1582c     20 0F B1 FD | 	call	#__system___getiolock_0540
15830     FD 12 02 F6 | 	mov	arg01, result1
15834     D8 B4 B0 FD | 	call	#__system___lockmem
15838     86 01 00 FF 
1583c     22 15 06 F6 | 	mov	arg02, ##@LR__5407
15840     00 12 06 F6 | 	mov	arg01, #0
15844     00 16 06 F6 | 	mov	arg03, #0
15848     B8 C1 B0 FD | 	call	#__system___basic_print_string
1584c     00 12 06 F6 | 	mov	arg01, #0
15850     FC 0E B1 FD | 	call	#__system___getiolock_0540
15854     FD 00 68 FC | 	wrlong	#0, result1
15858     0F 12 06 F6 | 	mov	arg01, #15
1585c     08 70 B0 FD | 	call	#_printerror
15860     28 00 90 FD | 	jmp	#LR__1733
15864                 | LR__1732
15864     A7 12 02 FB | 	rdlong	arg01, fp
15868     10 4E 05 F1 | 	add	fp, #16
1586c     A7 14 02 FB | 	rdlong	arg02, fp
15870     04 4E 05 F1 | 	add	fp, #4
15874     A7 16 02 FB | 	rdlong	arg03, fp
15878     14 4E 85 F1 | 	sub	fp, #20
1587c     24 D6 B0 FD | 	call	#__system__Mid_S
15880     A7 FA 61 FC | 	wrlong	result1, fp
15884     A7 12 02 F6 | 	mov	arg01, fp
15888     D0 58 BF FD | 	call	#_push
1588c                 | LR__1733
1588c     A7 F0 03 F6 | 	mov	ptra, fp
15890     B2 00 A0 FD | 	call	#popregs_
15894                 | _do_mid_ret
15894     2D 00 64 FD | 	ret
15898                 | 
15898                 | ' 
15898                 | ' sub do_right
15898                 | _do_right
15898     00 4A 05 F6 | 	mov	COUNT_, #0
1589c     A8 00 A0 FD | 	call	#pushregs_
158a0     14 F0 07 F1 | 	add	ptra, #20
158a4     4A 00 00 FF 
158a8     B0 E4 05 F1 | 	add	objptr, ##38064
158ac     F2 16 02 FB | 	rdlong	arg03, objptr
158b0     0B 15 02 F6 | 	mov	arg02, arg03
158b4     01 14 66 F0 | 	shl	arg02, #1
158b8     0B 15 02 F1 | 	add	arg02, arg03
158bc     02 14 66 F0 | 	shl	arg02, #2
158c0     03 00 00 FF 
158c4     04 E4 85 F1 | 	sub	objptr, ##1540
158c8     F2 14 02 F1 | 	add	arg02, objptr
158cc     0A 17 02 FB | 	rdlong	arg03, arg02
158d0     0C 4E 05 F1 | 	add	fp, #12
158d4     A7 16 62 FC | 	wrlong	arg03, fp
158d8                 | ' 
158d8                 | ' numpar=compiledline(lineptr_e).result.uresult
158d8                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
158d8     0C 4E 85 F1 | 	sub	fp, #12
158dc     02 16 0E F2 | 	cmp	arg03, #2 wz
158e0     47 00 00 FF 
158e4     AC E4 85 F1 | 	sub	objptr, ##36524
158e8     3C 00 90 AD |  if_e	jmp	#LR__1740
158ec     00 12 06 F6 | 	mov	arg01, #0
158f0     5C 0E B1 FD | 	call	#__system___getiolock_0540
158f4     FD 12 02 F6 | 	mov	arg01, result1
158f8     14 B4 B0 FD | 	call	#__system___lockmem
158fc     86 01 00 FF 
15900     29 15 06 F6 | 	mov	arg02, ##@LR__5408
15904     00 12 06 F6 | 	mov	arg01, #0
15908     00 16 06 F6 | 	mov	arg03, #0
1590c     F4 C0 B0 FD | 	call	#__system___basic_print_string
15910     00 12 06 F6 | 	mov	arg01, #0
15914     38 0E B1 FD | 	call	#__system___getiolock_0540
15918     FD 00 68 FC | 	wrlong	#0, result1
1591c     27 12 06 F6 | 	mov	arg01, #39
15920     44 6F B0 FD | 	call	#_printerror
15924     E8 00 90 FD | 	jmp	#LR__1743
15928                 | LR__1740
15928     98 57 BF FD | 	call	#_pop
1592c     FF 16 02 F6 | 	mov	arg03, result3
15930     A7 FA 61 FC | 	wrlong	result1, fp
15934     04 4E 05 F1 | 	add	fp, #4
15938     A7 FC 61 FC | 	wrlong	result2, fp
1593c     04 4E 05 F1 | 	add	fp, #4
15940     A7 16 62 FC | 	wrlong	arg03, fp
15944     08 4E 85 F1 | 	sub	fp, #8
15948     A7 12 02 F6 | 	mov	arg01, fp
1594c     44 F8 BF FD | 	call	#_converttoint
15950     FD 16 02 F6 | 	mov	arg03, result1
15954     10 4E 05 F1 | 	add	fp, #16
15958     A7 16 62 FC | 	wrlong	arg03, fp
1595c     10 4E 85 F1 | 	sub	fp, #16
15960     60 57 BF FD | 	call	#_pop
15964     FF 16 02 F6 | 	mov	arg03, result3
15968     A7 FA 61 FC | 	wrlong	result1, fp
1596c     04 4E 05 F1 | 	add	fp, #4
15970     A7 FC 61 FC | 	wrlong	result2, fp
15974     04 4E 05 F1 | 	add	fp, #4
15978     A7 16 62 FC | 	wrlong	arg03, fp
1597c                 | ' t1=pop() : arg=converttoint(t1)
1597c                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1597c     08 4E 85 F1 | 	sub	fp, #8
15980     2B 16 0E F2 | 	cmp	arg03, #43 wz
15984     18 00 90 5D |  if_ne	jmp	#LR__1741
15988     A7 12 02 FB | 	rdlong	arg01, fp
1598c     E0 AF BF FD | 	call	#_convertstring
15990     A7 FA 61 FC | 	wrlong	result1, fp
15994     08 4E 05 F1 | 	add	fp, #8
15998     A7 3E 68 FC | 	wrlong	#31, fp
1599c     08 4E 85 F1 | 	sub	fp, #8
159a0                 | LR__1741
159a0                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
159a0     08 4E 05 F1 | 	add	fp, #8
159a4     A7 16 02 FB | 	rdlong	arg03, fp
159a8     08 4E 85 F1 | 	sub	fp, #8
159ac     1F 16 0E F2 | 	cmp	arg03, #31 wz
159b0     3C 00 90 AD |  if_e	jmp	#LR__1742
159b4     00 12 06 F6 | 	mov	arg01, #0
159b8     94 0D B1 FD | 	call	#__system___getiolock_0540
159bc     FD 12 02 F6 | 	mov	arg01, result1
159c0     4C B3 B0 FD | 	call	#__system___lockmem
159c4     86 01 00 FF 
159c8     32 15 06 F6 | 	mov	arg02, ##@LR__5409
159cc     00 12 06 F6 | 	mov	arg01, #0
159d0     00 16 06 F6 | 	mov	arg03, #0
159d4     2C C0 B0 FD | 	call	#__system___basic_print_string
159d8     00 12 06 F6 | 	mov	arg01, #0
159dc     70 0D B1 FD | 	call	#__system___getiolock_0540
159e0     FD 00 68 FC | 	wrlong	#0, result1
159e4     0F 12 06 F6 | 	mov	arg01, #15
159e8     7C 6E B0 FD | 	call	#_printerror
159ec     20 00 90 FD | 	jmp	#LR__1743
159f0                 | LR__1742
159f0     A7 12 02 FB | 	rdlong	arg01, fp
159f4     10 4E 05 F1 | 	add	fp, #16
159f8     A7 14 02 FB | 	rdlong	arg02, fp
159fc     10 4E 85 F1 | 	sub	fp, #16
15a00     10 D4 B0 FD | 	call	#__system__Right_S
15a04     A7 FA 61 FC | 	wrlong	result1, fp
15a08     A7 12 02 F6 | 	mov	arg01, fp
15a0c     4C 57 BF FD | 	call	#_push
15a10                 | LR__1743
15a10     A7 F0 03 F6 | 	mov	ptra, fp
15a14     B2 00 A0 FD | 	call	#popregs_
15a18                 | _do_right_ret
15a18     2D 00 64 FD | 	ret
15a1c                 | 
15a1c                 | ' 
15a1c                 | ' sub do_left
15a1c                 | _do_left
15a1c     00 4A 05 F6 | 	mov	COUNT_, #0
15a20     A8 00 A0 FD | 	call	#pushregs_
15a24     14 F0 07 F1 | 	add	ptra, #20
15a28     4A 00 00 FF 
15a2c     B0 E4 05 F1 | 	add	objptr, ##38064
15a30     F2 16 02 FB | 	rdlong	arg03, objptr
15a34     0B 15 02 F6 | 	mov	arg02, arg03
15a38     01 14 66 F0 | 	shl	arg02, #1
15a3c     0B 15 02 F1 | 	add	arg02, arg03
15a40     02 14 66 F0 | 	shl	arg02, #2
15a44     03 00 00 FF 
15a48     04 E4 85 F1 | 	sub	objptr, ##1540
15a4c     F2 14 02 F1 | 	add	arg02, objptr
15a50     0A 17 02 FB | 	rdlong	arg03, arg02
15a54     0C 4E 05 F1 | 	add	fp, #12
15a58     A7 16 62 FC | 	wrlong	arg03, fp
15a5c                 | ' 
15a5c                 | ' numpar=compiledline(lineptr_e).result.uresult
15a5c                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
15a5c     0C 4E 85 F1 | 	sub	fp, #12
15a60     02 16 0E F2 | 	cmp	arg03, #2 wz
15a64     47 00 00 FF 
15a68     AC E4 85 F1 | 	sub	objptr, ##36524
15a6c     3C 00 90 AD |  if_e	jmp	#LR__1750
15a70     00 12 06 F6 | 	mov	arg01, #0
15a74     D8 0C B1 FD | 	call	#__system___getiolock_0540
15a78     FD 12 02 F6 | 	mov	arg01, result1
15a7c     90 B2 B0 FD | 	call	#__system___lockmem
15a80     86 01 00 FF 
15a84     3B 15 06 F6 | 	mov	arg02, ##@LR__5410
15a88     00 12 06 F6 | 	mov	arg01, #0
15a8c     00 16 06 F6 | 	mov	arg03, #0
15a90     70 BF B0 FD | 	call	#__system___basic_print_string
15a94     00 12 06 F6 | 	mov	arg01, #0
15a98     B4 0C B1 FD | 	call	#__system___getiolock_0540
15a9c     FD 00 68 FC | 	wrlong	#0, result1
15aa0     27 12 06 F6 | 	mov	arg01, #39
15aa4     C0 6D B0 FD | 	call	#_printerror
15aa8     E8 00 90 FD | 	jmp	#LR__1753
15aac                 | LR__1750
15aac     14 56 BF FD | 	call	#_pop
15ab0     FF 16 02 F6 | 	mov	arg03, result3
15ab4     A7 FA 61 FC | 	wrlong	result1, fp
15ab8     04 4E 05 F1 | 	add	fp, #4
15abc     A7 FC 61 FC | 	wrlong	result2, fp
15ac0     04 4E 05 F1 | 	add	fp, #4
15ac4     A7 16 62 FC | 	wrlong	arg03, fp
15ac8     08 4E 85 F1 | 	sub	fp, #8
15acc     A7 12 02 F6 | 	mov	arg01, fp
15ad0     C0 F6 BF FD | 	call	#_converttoint
15ad4     FD 16 02 F6 | 	mov	arg03, result1
15ad8     10 4E 05 F1 | 	add	fp, #16
15adc     A7 16 62 FC | 	wrlong	arg03, fp
15ae0     10 4E 85 F1 | 	sub	fp, #16
15ae4     DC 55 BF FD | 	call	#_pop
15ae8     FF 16 02 F6 | 	mov	arg03, result3
15aec     A7 FA 61 FC | 	wrlong	result1, fp
15af0     04 4E 05 F1 | 	add	fp, #4
15af4     A7 FC 61 FC | 	wrlong	result2, fp
15af8     04 4E 05 F1 | 	add	fp, #4
15afc     A7 16 62 FC | 	wrlong	arg03, fp
15b00                 | ' t1=pop() : arg=converttoint(t1)
15b00                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15b00     08 4E 85 F1 | 	sub	fp, #8
15b04     2B 16 0E F2 | 	cmp	arg03, #43 wz
15b08     18 00 90 5D |  if_ne	jmp	#LR__1751
15b0c     A7 12 02 FB | 	rdlong	arg01, fp
15b10     5C AE BF FD | 	call	#_convertstring
15b14     A7 FA 61 FC | 	wrlong	result1, fp
15b18     08 4E 05 F1 | 	add	fp, #8
15b1c     A7 3E 68 FC | 	wrlong	#31, fp
15b20     08 4E 85 F1 | 	sub	fp, #8
15b24                 | LR__1751
15b24                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
15b24     08 4E 05 F1 | 	add	fp, #8
15b28     A7 16 02 FB | 	rdlong	arg03, fp
15b2c     08 4E 85 F1 | 	sub	fp, #8
15b30     1F 16 0E F2 | 	cmp	arg03, #31 wz
15b34     3C 00 90 AD |  if_e	jmp	#LR__1752
15b38     00 12 06 F6 | 	mov	arg01, #0
15b3c     10 0C B1 FD | 	call	#__system___getiolock_0540
15b40     FD 12 02 F6 | 	mov	arg01, result1
15b44     C8 B1 B0 FD | 	call	#__system___lockmem
15b48     86 01 00 FF 
15b4c     43 15 06 F6 | 	mov	arg02, ##@LR__5411
15b50     00 12 06 F6 | 	mov	arg01, #0
15b54     00 16 06 F6 | 	mov	arg03, #0
15b58     A8 BE B0 FD | 	call	#__system___basic_print_string
15b5c     00 12 06 F6 | 	mov	arg01, #0
15b60     EC 0B B1 FD | 	call	#__system___getiolock_0540
15b64     FD 00 68 FC | 	wrlong	#0, result1
15b68     0F 12 06 F6 | 	mov	arg01, #15
15b6c     F8 6C B0 FD | 	call	#_printerror
15b70     20 00 90 FD | 	jmp	#LR__1753
15b74                 | LR__1752
15b74     A7 12 02 FB | 	rdlong	arg01, fp
15b78     10 4E 05 F1 | 	add	fp, #16
15b7c     A7 14 02 FB | 	rdlong	arg02, fp
15b80     10 4E 85 F1 | 	sub	fp, #16
15b84     04 D2 B0 FD | 	call	#__system__Left_S
15b88     A7 FA 61 FC | 	wrlong	result1, fp
15b8c     A7 12 02 F6 | 	mov	arg01, fp
15b90     C8 55 BF FD | 	call	#_push
15b94                 | LR__1753
15b94     A7 F0 03 F6 | 	mov	ptra, fp
15b98     B2 00 A0 FD | 	call	#popregs_
15b9c                 | _do_left_ret
15b9c     2D 00 64 FD | 	ret
15ba0                 | 
15ba0                 | ' 
15ba0                 | ' sub do_asc
15ba0                 | _do_asc
15ba0     01 4A 05 F6 | 	mov	COUNT_, #1
15ba4     A8 00 A0 FD | 	call	#pushregs_
15ba8     14 F0 07 F1 | 	add	ptra, #20
15bac     4A 00 00 FF 
15bb0     B0 E4 05 F1 | 	add	objptr, ##38064
15bb4     F2 1E 02 FB | 	rdlong	local01, objptr
15bb8     0F 17 02 F6 | 	mov	arg03, local01
15bbc     01 16 66 F0 | 	shl	arg03, #1
15bc0     0F 17 02 F1 | 	add	arg03, local01
15bc4     02 16 66 F0 | 	shl	arg03, #2
15bc8     03 00 00 FF 
15bcc     04 E4 85 F1 | 	sub	objptr, ##1540
15bd0     F2 16 02 F1 | 	add	arg03, objptr
15bd4     0B 17 02 FB | 	rdlong	arg03, arg03
15bd8     0C 4E 05 F1 | 	add	fp, #12
15bdc     A7 16 62 FC | 	wrlong	arg03, fp
15be0                 | ' 
15be0                 | ' numpar=compiledline(lineptr_e).result.uresult
15be0                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
15be0     0C 4E 85 F1 | 	sub	fp, #12
15be4     02 16 16 F2 | 	cmp	arg03, #2 wc
15be8     47 00 00 FF 
15bec     AC E4 85 F1 | 	sub	objptr, ##36524
15bf0     0C 4E 05 C1 |  if_b	add	fp, #12
15bf4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
15bf8     0C 4E 85 C1 |  if_b	sub	fp, #12
15bfc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1760
15c00     00 12 06 F6 | 	mov	arg01, #0
15c04     48 0B B1 FD | 	call	#__system___getiolock_0540
15c08     FD 12 02 F6 | 	mov	arg01, result1
15c0c     00 B1 B0 FD | 	call	#__system___lockmem
15c10     86 01 00 FF 
15c14     4B 15 06 F6 | 	mov	arg02, ##@LR__5412
15c18     00 12 06 F6 | 	mov	arg01, #0
15c1c     00 16 06 F6 | 	mov	arg03, #0
15c20     E0 BD B0 FD | 	call	#__system___basic_print_string
15c24     00 12 06 F6 | 	mov	arg01, #0
15c28     24 0B B1 FD | 	call	#__system___getiolock_0540
15c2c     FD 00 68 FC | 	wrlong	#0, result1
15c30     27 12 06 F6 | 	mov	arg01, #39
15c34     30 6C B0 FD | 	call	#_printerror
15c38     B0 00 90 FD | 	jmp	#LR__1763
15c3c                 | LR__1760
15c3c     84 54 BF FD | 	call	#_pop
15c40     FF 16 02 F6 | 	mov	arg03, result3
15c44     A7 FA 61 FC | 	wrlong	result1, fp
15c48     04 4E 05 F1 | 	add	fp, #4
15c4c     A7 FC 61 FC | 	wrlong	result2, fp
15c50     04 4E 05 F1 | 	add	fp, #4
15c54     A7 16 62 FC | 	wrlong	arg03, fp
15c58                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15c58     08 4E 85 F1 | 	sub	fp, #8
15c5c     2B 16 0E F2 | 	cmp	arg03, #43 wz
15c60     18 00 90 5D |  if_ne	jmp	#LR__1761
15c64     A7 12 02 FB | 	rdlong	arg01, fp
15c68     04 AD BF FD | 	call	#_convertstring
15c6c     A7 FA 61 FC | 	wrlong	result1, fp
15c70     08 4E 05 F1 | 	add	fp, #8
15c74     A7 3E 68 FC | 	wrlong	#31, fp
15c78     08 4E 85 F1 | 	sub	fp, #8
15c7c                 | LR__1761
15c7c                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
15c7c     08 4E 05 F1 | 	add	fp, #8
15c80     A7 16 02 FB | 	rdlong	arg03, fp
15c84     08 4E 85 F1 | 	sub	fp, #8
15c88     1F 16 0E F2 | 	cmp	arg03, #31 wz
15c8c     3C 00 90 AD |  if_e	jmp	#LR__1762
15c90     00 12 06 F6 | 	mov	arg01, #0
15c94     B8 0A B1 FD | 	call	#__system___getiolock_0540
15c98     FD 12 02 F6 | 	mov	arg01, result1
15c9c     70 B0 B0 FD | 	call	#__system___lockmem
15ca0     86 01 00 FF 
15ca4     51 15 06 F6 | 	mov	arg02, ##@LR__5413
15ca8     00 12 06 F6 | 	mov	arg01, #0
15cac     00 16 06 F6 | 	mov	arg03, #0
15cb0     50 BD B0 FD | 	call	#__system___basic_print_string
15cb4     00 12 06 F6 | 	mov	arg01, #0
15cb8     94 0A B1 FD | 	call	#__system___getiolock_0540
15cbc     FD 00 68 FC | 	wrlong	#0, result1
15cc0     0F 12 06 F6 | 	mov	arg01, #15
15cc4     A0 6B B0 FD | 	call	#_printerror
15cc8     20 00 90 FD | 	jmp	#LR__1763
15ccc                 | LR__1762
15ccc     A7 1E 02 FB | 	rdlong	local01, fp
15cd0     0F 1F C2 FA | 	rdbyte	local01, local01
15cd4     A7 1E 62 FC | 	wrlong	local01, fp
15cd8     08 4E 05 F1 | 	add	fp, #8
15cdc     A7 38 68 FC | 	wrlong	#28, fp
15ce0     08 4E 85 F1 | 	sub	fp, #8
15ce4     A7 12 02 F6 | 	mov	arg01, fp
15ce8     70 54 BF FD | 	call	#_push
15cec                 | LR__1763
15cec     A7 F0 03 F6 | 	mov	ptra, fp
15cf0     B2 00 A0 FD | 	call	#popregs_
15cf4                 | _do_asc_ret
15cf4     2D 00 64 FD | 	ret
15cf8                 | 
15cf8                 | ' 
15cf8                 | ' sub do_len
15cf8                 | _do_len
15cf8     02 4A 05 F6 | 	mov	COUNT_, #2
15cfc     A8 00 A0 FD | 	call	#pushregs_
15d00     14 F0 07 F1 | 	add	ptra, #20
15d04     4A 00 00 FF 
15d08     B0 E4 05 F1 | 	add	objptr, ##38064
15d0c     F2 1E 02 FB | 	rdlong	local01, objptr
15d10     0F 17 02 F6 | 	mov	arg03, local01
15d14     01 16 66 F0 | 	shl	arg03, #1
15d18     0F 17 02 F1 | 	add	arg03, local01
15d1c     02 16 66 F0 | 	shl	arg03, #2
15d20     03 00 00 FF 
15d24     04 E4 85 F1 | 	sub	objptr, ##1540
15d28     F2 16 02 F1 | 	add	arg03, objptr
15d2c     0B 17 02 FB | 	rdlong	arg03, arg03
15d30     0C 4E 05 F1 | 	add	fp, #12
15d34     A7 16 62 FC | 	wrlong	arg03, fp
15d38                 | ' 
15d38                 | ' numpar=compiledline(lineptr_e).result.uresult
15d38                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
15d38     0C 4E 85 F1 | 	sub	fp, #12
15d3c     02 16 16 F2 | 	cmp	arg03, #2 wc
15d40     47 00 00 FF 
15d44     AC E4 85 F1 | 	sub	objptr, ##36524
15d48     0C 4E 05 C1 |  if_b	add	fp, #12
15d4c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
15d50     0C 4E 85 C1 |  if_b	sub	fp, #12
15d54     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1770
15d58     00 12 06 F6 | 	mov	arg01, #0
15d5c     F0 09 B1 FD | 	call	#__system___getiolock_0540
15d60     FD 12 02 F6 | 	mov	arg01, result1
15d64     A8 AF B0 FD | 	call	#__system___lockmem
15d68     86 01 00 FF 
15d6c     57 15 06 F6 | 	mov	arg02, ##@LR__5414
15d70     00 12 06 F6 | 	mov	arg01, #0
15d74     00 16 06 F6 | 	mov	arg03, #0
15d78     88 BC B0 FD | 	call	#__system___basic_print_string
15d7c     00 12 06 F6 | 	mov	arg01, #0
15d80     CC 09 B1 FD | 	call	#__system___getiolock_0540
15d84     FD 00 68 FC | 	wrlong	#0, result1
15d88     27 12 06 F6 | 	mov	arg01, #39
15d8c     D8 6A B0 FD | 	call	#_printerror
15d90     C4 00 90 FD | 	jmp	#LR__1775
15d94                 | LR__1770
15d94     2C 53 BF FD | 	call	#_pop
15d98     FF 16 02 F6 | 	mov	arg03, result3
15d9c     A7 FA 61 FC | 	wrlong	result1, fp
15da0     04 4E 05 F1 | 	add	fp, #4
15da4     A7 FC 61 FC | 	wrlong	result2, fp
15da8     04 4E 05 F1 | 	add	fp, #4
15dac     A7 16 62 FC | 	wrlong	arg03, fp
15db0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15db0     08 4E 85 F1 | 	sub	fp, #8
15db4     2B 16 0E F2 | 	cmp	arg03, #43 wz
15db8     18 00 90 5D |  if_ne	jmp	#LR__1771
15dbc     A7 12 02 FB | 	rdlong	arg01, fp
15dc0     AC AB BF FD | 	call	#_convertstring
15dc4     A7 FA 61 FC | 	wrlong	result1, fp
15dc8     08 4E 05 F1 | 	add	fp, #8
15dcc     A7 3E 68 FC | 	wrlong	#31, fp
15dd0     08 4E 85 F1 | 	sub	fp, #8
15dd4                 | LR__1771
15dd4                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
15dd4     08 4E 05 F1 | 	add	fp, #8
15dd8     A7 16 02 FB | 	rdlong	arg03, fp
15ddc     08 4E 85 F1 | 	sub	fp, #8
15de0     1F 16 0E F2 | 	cmp	arg03, #31 wz
15de4     3C 00 90 AD |  if_e	jmp	#LR__1772
15de8     00 12 06 F6 | 	mov	arg01, #0
15dec     60 09 B1 FD | 	call	#__system___getiolock_0540
15df0     FD 12 02 F6 | 	mov	arg01, result1
15df4     18 AF B0 FD | 	call	#__system___lockmem
15df8     86 01 00 FF 
15dfc     5D 15 06 F6 | 	mov	arg02, ##@LR__5415
15e00     00 12 06 F6 | 	mov	arg01, #0
15e04     00 16 06 F6 | 	mov	arg03, #0
15e08     F8 BB B0 FD | 	call	#__system___basic_print_string
15e0c     00 12 06 F6 | 	mov	arg01, #0
15e10     3C 09 B1 FD | 	call	#__system___getiolock_0540
15e14     FD 00 68 FC | 	wrlong	#0, result1
15e18     0F 12 06 F6 | 	mov	arg01, #15
15e1c     48 6A B0 FD | 	call	#_printerror
15e20     34 00 90 FD | 	jmp	#LR__1775
15e24                 | LR__1772
15e24     A7 12 02 FB | 	rdlong	arg01, fp
15e28     09 21 02 F6 | 	mov	local02, arg01
15e2c     97 06 48 FB | 	callpa	#(@LR__1774-@LR__1773)>>2,fcache_load_ptr_
15e30                 | LR__1773
15e30     10 FB C9 FA | 	rdbyte	result1, local02 wz
15e34     01 20 06 51 |  if_ne	add	local02, #1
15e38     F4 FF 9F 5D |  if_ne	jmp	#LR__1773
15e3c                 | LR__1774
15e3c     09 21 82 F1 | 	sub	local02, arg01
15e40     A7 20 62 FC | 	wrlong	local02, fp
15e44     08 4E 05 F1 | 	add	fp, #8
15e48     A7 38 68 FC | 	wrlong	#28, fp
15e4c     08 4E 85 F1 | 	sub	fp, #8
15e50     A7 12 02 F6 | 	mov	arg01, fp
15e54     04 53 BF FD | 	call	#_push
15e58                 | LR__1775
15e58     A7 F0 03 F6 | 	mov	ptra, fp
15e5c     B2 00 A0 FD | 	call	#popregs_
15e60                 | _do_len_ret
15e60     2D 00 64 FD | 	ret
15e64                 | 
15e64                 | ' 
15e64                 | ' sub do_chr
15e64                 | _do_chr
15e64     01 4A 05 F6 | 	mov	COUNT_, #1
15e68     A8 00 A0 FD | 	call	#pushregs_
15e6c     14 F0 07 F1 | 	add	ptra, #20
15e70     4A 00 00 FF 
15e74     B0 E4 05 F1 | 	add	objptr, ##38064
15e78     F2 1E 02 FB | 	rdlong	local01, objptr
15e7c     0F 17 02 F6 | 	mov	arg03, local01
15e80     01 16 66 F0 | 	shl	arg03, #1
15e84     0F 17 02 F1 | 	add	arg03, local01
15e88     02 16 66 F0 | 	shl	arg03, #2
15e8c     03 00 00 FF 
15e90     04 E4 85 F1 | 	sub	objptr, ##1540
15e94     F2 16 02 F1 | 	add	arg03, objptr
15e98     0B 17 02 FB | 	rdlong	arg03, arg03
15e9c     0C 4E 05 F1 | 	add	fp, #12
15ea0     A7 16 62 FC | 	wrlong	arg03, fp
15ea4                 | ' 
15ea4                 | ' numpar=compiledline(lineptr_e).result.uresult
15ea4                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
15ea4     0C 4E 85 F1 | 	sub	fp, #12
15ea8     02 16 16 F2 | 	cmp	arg03, #2 wc
15eac     47 00 00 FF 
15eb0     AC E4 85 F1 | 	sub	objptr, ##36524
15eb4     0C 4E 05 C1 |  if_b	add	fp, #12
15eb8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
15ebc     0C 4E 85 C1 |  if_b	sub	fp, #12
15ec0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1780
15ec4     00 12 06 F6 | 	mov	arg01, #0
15ec8     84 08 B1 FD | 	call	#__system___getiolock_0540
15ecc     FD 12 02 F6 | 	mov	arg01, result1
15ed0     3C AE B0 FD | 	call	#__system___lockmem
15ed4     86 01 00 FF 
15ed8     63 15 06 F6 | 	mov	arg02, ##@LR__5416
15edc     00 12 06 F6 | 	mov	arg01, #0
15ee0     00 16 06 F6 | 	mov	arg03, #0
15ee4     1C BB B0 FD | 	call	#__system___basic_print_string
15ee8     00 12 06 F6 | 	mov	arg01, #0
15eec     60 08 B1 FD | 	call	#__system___getiolock_0540
15ef0     FD 00 68 FC | 	wrlong	#0, result1
15ef4     27 12 06 F6 | 	mov	arg01, #39
15ef8     6C 69 B0 FD | 	call	#_printerror
15efc     54 00 90 FD | 	jmp	#LR__1781
15f00                 | LR__1780
15f00     C0 51 BF FD | 	call	#_pop
15f04     FF 1E 02 F6 | 	mov	local01, result3
15f08     A7 FA 61 FC | 	wrlong	result1, fp
15f0c     04 4E 05 F1 | 	add	fp, #4
15f10     A7 FC 61 FC | 	wrlong	result2, fp
15f14     04 4E 05 F1 | 	add	fp, #4
15f18     A7 1E 62 FC | 	wrlong	local01, fp
15f1c     08 4E 85 F1 | 	sub	fp, #8
15f20     A7 12 02 F6 | 	mov	arg01, fp
15f24     6C F2 BF FD | 	call	#_converttoint
15f28     10 4E 05 F1 | 	add	fp, #16
15f2c     A7 FA 61 FC | 	wrlong	result1, fp
15f30     FD 12 02 F6 | 	mov	arg01, result1
15f34     10 4E 85 F1 | 	sub	fp, #16
15f38     14 D0 B0 FD | 	call	#__system__Chr_S
15f3c     A7 FA 61 FC | 	wrlong	result1, fp
15f40     08 4E 05 F1 | 	add	fp, #8
15f44     A7 3E 68 FC | 	wrlong	#31, fp
15f48     08 4E 85 F1 | 	sub	fp, #8
15f4c     A7 12 02 F6 | 	mov	arg01, fp
15f50     08 52 BF FD | 	call	#_push
15f54                 | LR__1781
15f54     A7 F0 03 F6 | 	mov	ptra, fp
15f58     B2 00 A0 FD | 	call	#popregs_
15f5c                 | _do_chr_ret
15f5c     2D 00 64 FD | 	ret
15f60                 | 
15f60                 | ' 
15f60                 | ' sub do_val
15f60                 | _do_val
15f60     03 4A 05 F6 | 	mov	COUNT_, #3
15f64     A8 00 A0 FD | 	call	#pushregs_
15f68     20 F0 07 F1 | 	add	ptra, #32
15f6c     4A 00 00 FF 
15f70     B0 E4 05 F1 | 	add	objptr, ##38064
15f74     F2 16 02 FB | 	rdlong	arg03, objptr
15f78     0B 1F 02 F6 | 	mov	local01, arg03
15f7c     01 1E 66 F0 | 	shl	local01, #1
15f80     0B 1F 02 F1 | 	add	local01, arg03
15f84     02 1E 66 F0 | 	shl	local01, #2
15f88     03 00 00 FF 
15f8c     04 E4 85 F1 | 	sub	objptr, ##1540
15f90     F2 1E 02 F1 | 	add	local01, objptr
15f94     0F 17 02 FB | 	rdlong	arg03, local01
15f98     0C 4E 05 F1 | 	add	fp, #12
15f9c     A7 16 62 FC | 	wrlong	arg03, fp
15fa0                 | ' 
15fa0                 | ' numpar=compiledline(lineptr_e).result.uresult
15fa0                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
15fa0     0C 4E 85 F1 | 	sub	fp, #12
15fa4     02 16 16 F2 | 	cmp	arg03, #2 wc
15fa8     47 00 00 FF 
15fac     AC E4 85 F1 | 	sub	objptr, ##36524
15fb0     0C 4E 05 C1 |  if_b	add	fp, #12
15fb4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
15fb8     0C 4E 85 C1 |  if_b	sub	fp, #12
15fbc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1790
15fc0     00 12 06 F6 | 	mov	arg01, #0
15fc4     88 07 B1 FD | 	call	#__system___getiolock_0540
15fc8     FD 12 02 F6 | 	mov	arg01, result1
15fcc     40 AD B0 FD | 	call	#__system___lockmem
15fd0     86 01 00 FF 
15fd4     6A 15 06 F6 | 	mov	arg02, ##@LR__5417
15fd8     00 12 06 F6 | 	mov	arg01, #0
15fdc     00 16 06 F6 | 	mov	arg03, #0
15fe0     20 BA B0 FD | 	call	#__system___basic_print_string
15fe4     00 12 06 F6 | 	mov	arg01, #0
15fe8     64 07 B1 FD | 	call	#__system___getiolock_0540
15fec     FD 00 68 FC | 	wrlong	#0, result1
15ff0     27 12 06 F6 | 	mov	arg01, #39
15ff4     70 68 B0 FD | 	call	#_printerror
15ff8     5C 02 90 FD | 	jmp	#LR__1803
15ffc                 | LR__1790
15ffc     C4 50 BF FD | 	call	#_pop
16000     FF 16 02 F6 | 	mov	arg03, result3
16004     A7 FA 61 FC | 	wrlong	result1, fp
16008     04 4E 05 F1 | 	add	fp, #4
1600c     A7 FC 61 FC | 	wrlong	result2, fp
16010     04 4E 05 F1 | 	add	fp, #4
16014     A7 16 62 FC | 	wrlong	arg03, fp
16018                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16018     08 4E 85 F1 | 	sub	fp, #8
1601c     2B 16 0E F2 | 	cmp	arg03, #43 wz
16020     18 00 90 5D |  if_ne	jmp	#LR__1791
16024     A7 12 02 FB | 	rdlong	arg01, fp
16028     44 A9 BF FD | 	call	#_convertstring
1602c     A7 FA 61 FC | 	wrlong	result1, fp
16030     08 4E 05 F1 | 	add	fp, #8
16034     A7 3E 68 FC | 	wrlong	#31, fp
16038     08 4E 85 F1 | 	sub	fp, #8
1603c                 | LR__1791
1603c                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1603c     08 4E 05 F1 | 	add	fp, #8
16040     A7 16 02 FB | 	rdlong	arg03, fp
16044     08 4E 85 F1 | 	sub	fp, #8
16048     1F 16 0E F2 | 	cmp	arg03, #31 wz
1604c     3C 00 90 AD |  if_e	jmp	#LR__1792
16050     00 12 06 F6 | 	mov	arg01, #0
16054     F8 06 B1 FD | 	call	#__system___getiolock_0540
16058     FD 12 02 F6 | 	mov	arg01, result1
1605c     B0 AC B0 FD | 	call	#__system___lockmem
16060     86 01 00 FF 
16064     70 15 06 F6 | 	mov	arg02, ##@LR__5418
16068     00 12 06 F6 | 	mov	arg01, #0
1606c     00 16 06 F6 | 	mov	arg03, #0
16070     90 B9 B0 FD | 	call	#__system___basic_print_string
16074     00 12 06 F6 | 	mov	arg01, #0
16078     D4 06 B1 FD | 	call	#__system___getiolock_0540
1607c     FD 00 68 FC | 	wrlong	#0, result1
16080     0F 12 06 F6 | 	mov	arg01, #15
16084     E0 67 B0 FD | 	call	#_printerror
16088     CC 01 90 FD | 	jmp	#LR__1803
1608c                 | LR__1792
1608c                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1608c     A7 12 02 FB | 	rdlong	arg01, fp
16090     01 14 06 F6 | 	mov	arg02, #1
16094     F4 CC B0 FD | 	call	#__system__Left_S
16098     FD 12 02 F6 | 	mov	arg01, result1
1609c     86 01 00 FF 
160a0     76 15 06 F6 | 	mov	arg02, ##@LR__5419
160a4     90 AC B0 FD | 	call	#__system___string_cmp
160a8     00 FA 0D F2 | 	cmp	result1, #0 wz
160ac     48 00 90 5D |  if_ne	jmp	#LR__1795
160b0     86 01 00 FF 
160b4     78 1F 06 F6 | 	mov	local01, ##@LR__5420
160b8     A7 16 02 FB | 	rdlong	arg03, fp
160bc     0B 13 02 F6 | 	mov	arg01, arg03
160c0     09 21 02 F6 | 	mov	local02, arg01
160c4     97 06 48 FB | 	callpa	#(@LR__1794-@LR__1793)>>2,fcache_load_ptr_
160c8                 | LR__1793
160c8     10 FB C9 FA | 	rdbyte	result1, local02 wz
160cc     01 20 06 51 |  if_ne	add	local02, #1
160d0     F4 FF 9F 5D |  if_ne	jmp	#LR__1793
160d4                 | LR__1794
160d4     09 21 82 F1 | 	sub	local02, arg01
160d8     10 15 02 F6 | 	mov	arg02, local02
160dc     01 14 86 F1 | 	sub	arg02, #1
160e0     0B 13 02 F6 | 	mov	arg01, arg03
160e4     2C CD B0 FD | 	call	#__system__Right_S
160e8     FD 14 02 F6 | 	mov	arg02, result1
160ec     0F 13 02 F6 | 	mov	arg01, local01
160f0     78 AC B0 FD | 	call	#__system___string_concat
160f4     A7 FA 61 FC | 	wrlong	result1, fp
160f8                 | LR__1795
160f8                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
160f8     A7 12 02 FB | 	rdlong	arg01, fp
160fc     01 14 06 F6 | 	mov	arg02, #1
16100     88 CC B0 FD | 	call	#__system__Left_S
16104     FD 12 02 F6 | 	mov	arg01, result1
16108     86 01 00 FF 
1610c     7B 15 06 F6 | 	mov	arg02, ##@LR__5421
16110     24 AC B0 FD | 	call	#__system___string_cmp
16114     00 FA 0D F2 | 	cmp	result1, #0 wz
16118     48 00 90 5D |  if_ne	jmp	#LR__1798
1611c     86 01 00 FF 
16120     7D 1F 06 F6 | 	mov	local01, ##@LR__5422
16124     A7 16 02 FB | 	rdlong	arg03, fp
16128     0B 13 02 F6 | 	mov	arg01, arg03
1612c     09 21 02 F6 | 	mov	local02, arg01
16130     97 06 48 FB | 	callpa	#(@LR__1797-@LR__1796)>>2,fcache_load_ptr_
16134                 | LR__1796
16134     10 FB C9 FA | 	rdbyte	result1, local02 wz
16138     01 20 06 51 |  if_ne	add	local02, #1
1613c     F4 FF 9F 5D |  if_ne	jmp	#LR__1796
16140                 | LR__1797
16140     09 21 82 F1 | 	sub	local02, arg01
16144     10 15 02 F6 | 	mov	arg02, local02
16148     01 14 86 F1 | 	sub	arg02, #1
1614c     0B 13 02 F6 | 	mov	arg01, arg03
16150     C0 CC B0 FD | 	call	#__system__Right_S
16154     FD 14 02 F6 | 	mov	arg02, result1
16158     0F 13 02 F6 | 	mov	arg01, local01
1615c     0C AC B0 FD | 	call	#__system___string_concat
16160     A7 FA 61 FC | 	wrlong	result1, fp
16164                 | LR__1798
16164     A7 12 02 FB | 	rdlong	arg01, fp
16168     40 DF B0 FD | 	call	#__system____builtin_atof
1616c     1C 4E 05 F1 | 	add	fp, #28
16170     A7 FA 61 FC | 	wrlong	result1, fp
16174     1C 4E 85 F1 | 	sub	fp, #28
16178     A7 12 02 FB | 	rdlong	arg01, fp
1617c     00 14 06 F6 | 	mov	arg02, #0
16180     B8 DD B0 FD | 	call	#__system____builtin_atoi
16184     18 4E 05 F1 | 	add	fp, #24
16188     A7 FA 61 FC | 	wrlong	result1, fp
1618c                 | ' fval=val(t1.result.sresult)
1618c                 | ' ival=val%(t1.result.sresult)
1618c                 | ' if fval=ival then
1618c     04 4E 05 F1 | 	add	fp, #4
16190     A7 1E 02 FB | 	rdlong	local01, fp
16194     1C 4E 85 F1 | 	sub	fp, #28
16198     FD 12 52 F6 | 	abs	arg01, result1 wc
1619c     1F 22 C6 C9 |  if_b	decod	local03, #31
161a0     00 22 06 36 |  if_ae	mov	local03, #0
161a4     18 D3 B0 FD | 	call	#__system___float_fromuns
161a8     11 FB 61 F5 | 	xor	result1, local03
161ac     FD 14 02 F6 | 	mov	arg02, result1
161b0     0F 13 02 F6 | 	mov	arg01, local01
161b4     01 16 06 F6 | 	mov	arg03, #1
161b8     3C DB B0 FD | 	call	#__system___float_cmp
161bc     00 FA 0D F2 | 	cmp	result1, #0 wz
161c0     20 00 90 5D |  if_ne	jmp	#LR__1799
161c4     18 4E 05 F1 | 	add	fp, #24
161c8     A7 1E 02 FB | 	rdlong	local01, fp
161cc     18 4E 85 F1 | 	sub	fp, #24
161d0     A7 1E 62 FC | 	wrlong	local01, fp
161d4     08 4E 05 F1 | 	add	fp, #8
161d8     A7 38 68 FC | 	wrlong	#28, fp
161dc     08 4E 85 F1 | 	sub	fp, #8
161e0     6C 00 90 FD | 	jmp	#LR__1802
161e4                 | LR__1799
161e4                 | '   if fval=0 andalso ival<>0 then
161e4     1C 4E 05 F1 | 	add	fp, #28
161e8     A7 12 02 FB | 	rdlong	arg01, fp
161ec     1C 4E 85 F1 | 	sub	fp, #28
161f0     00 14 06 F6 | 	mov	arg02, #0
161f4     01 16 06 F6 | 	mov	arg03, #1
161f8     FC DA B0 FD | 	call	#__system___float_cmp
161fc     00 FA 0D F2 | 	cmp	result1, #0 wz
16200     30 00 90 5D |  if_ne	jmp	#LR__1800
16204     18 4E 05 F1 | 	add	fp, #24
16208     A7 1E 0A FB | 	rdlong	local01, fp wz
1620c     18 4E 85 F1 | 	sub	fp, #24
16210     20 00 90 AD |  if_e	jmp	#LR__1800
16214     18 4E 05 F1 | 	add	fp, #24
16218     A7 1E 02 FB | 	rdlong	local01, fp
1621c     18 4E 85 F1 | 	sub	fp, #24
16220     A7 1E 62 FC | 	wrlong	local01, fp
16224     08 4E 05 F1 | 	add	fp, #8
16228     A7 38 68 FC | 	wrlong	#28, fp
1622c     08 4E 85 F1 | 	sub	fp, #8
16230     1C 00 90 FD | 	jmp	#LR__1801
16234                 | LR__1800
16234     1C 4E 05 F1 | 	add	fp, #28
16238     A7 1E 02 FB | 	rdlong	local01, fp
1623c     1C 4E 85 F1 | 	sub	fp, #28
16240     A7 1E 62 FC | 	wrlong	local01, fp
16244     08 4E 05 F1 | 	add	fp, #8
16248     A7 3C 68 FC | 	wrlong	#30, fp
1624c     08 4E 85 F1 | 	sub	fp, #8
16250                 | LR__1801
16250                 | LR__1802
16250     A7 12 02 F6 | 	mov	arg01, fp
16254     04 4F BF FD | 	call	#_push
16258                 | LR__1803
16258     A7 F0 03 F6 | 	mov	ptra, fp
1625c     B2 00 A0 FD | 	call	#popregs_
16260                 | _do_val_ret
16260     2D 00 64 FD | 	ret
16264                 | 
16264                 | ' 
16264                 | ' 
16264                 | ' sub do_hex
16264                 | _do_hex
16264     01 4A 05 F6 | 	mov	COUNT_, #1
16268     A8 00 A0 FD | 	call	#pushregs_
1626c     18 F0 07 F1 | 	add	ptra, #24
16270     4A 00 00 FF 
16274     B0 E4 05 F1 | 	add	objptr, ##38064
16278     F2 1E 02 FB | 	rdlong	local01, objptr
1627c     0F 17 02 F6 | 	mov	arg03, local01
16280     01 16 66 F0 | 	shl	arg03, #1
16284     0F 17 02 F1 | 	add	arg03, local01
16288     02 16 66 F0 | 	shl	arg03, #2
1628c     03 00 00 FF 
16290     04 E4 85 F1 | 	sub	objptr, ##1540
16294     F2 16 02 F1 | 	add	arg03, objptr
16298     0B 17 02 FB | 	rdlong	arg03, arg03
1629c     0C 4E 05 F1 | 	add	fp, #12
162a0     A7 16 62 FC | 	wrlong	arg03, fp
162a4                 | ' 
162a4                 | ' numpar=compiledline(lineptr_e).result.uresult
162a4                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
162a4     0C 4E 85 F1 | 	sub	fp, #12
162a8     03 16 16 F2 | 	cmp	arg03, #3 wc
162ac     47 00 00 FF 
162b0     AC E4 85 F1 | 	sub	objptr, ##36524
162b4     0C 4E 05 C1 |  if_b	add	fp, #12
162b8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
162bc     0C 4E 85 C1 |  if_b	sub	fp, #12
162c0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1810
162c4     00 12 06 F6 | 	mov	arg01, #0
162c8     84 04 B1 FD | 	call	#__system___getiolock_0540
162cc     FD 12 02 F6 | 	mov	arg01, result1
162d0     3C AA B0 FD | 	call	#__system___lockmem
162d4     86 01 00 FF 
162d8     80 15 06 F6 | 	mov	arg02, ##@LR__5423
162dc     00 12 06 F6 | 	mov	arg01, #0
162e0     00 16 06 F6 | 	mov	arg03, #0
162e4     1C B7 B0 FD | 	call	#__system___basic_print_string
162e8     00 12 06 F6 | 	mov	arg01, #0
162ec     60 04 B1 FD | 	call	#__system___getiolock_0540
162f0     FD 00 68 FC | 	wrlong	#0, result1
162f4     27 12 06 F6 | 	mov	arg01, #39
162f8     6C 65 B0 FD | 	call	#_printerror
162fc     B8 00 90 FD | 	jmp	#LR__1813
16300                 | LR__1810
16300                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
16300     0C 4E 05 F1 | 	add	fp, #12
16304     A7 1E 02 FB | 	rdlong	local01, fp
16308     0C 4E 85 F1 | 	sub	fp, #12
1630c     02 1E 0E F2 | 	cmp	local01, #2 wz
16310     38 00 90 5D |  if_ne	jmp	#LR__1811
16314     AC 4D BF FD | 	call	#_pop
16318     FF 1E 02 F6 | 	mov	local01, result3
1631c     A7 FA 61 FC | 	wrlong	result1, fp
16320     04 4E 05 F1 | 	add	fp, #4
16324     A7 FC 61 FC | 	wrlong	result2, fp
16328     04 4E 05 F1 | 	add	fp, #4
1632c     A7 1E 62 FC | 	wrlong	local01, fp
16330     08 4E 85 F1 | 	sub	fp, #8
16334     A7 12 02 F6 | 	mov	arg01, fp
16338     58 EE BF FD | 	call	#_converttoint
1633c     14 4E 05 F1 | 	add	fp, #20
16340     A7 FA 61 FC | 	wrlong	result1, fp
16344     14 4E 85 F1 | 	sub	fp, #20
16348     0C 00 90 FD | 	jmp	#LR__1812
1634c                 | LR__1811
1634c     14 4E 05 F1 | 	add	fp, #20
16350     A7 10 68 FC | 	wrlong	#8, fp
16354     14 4E 85 F1 | 	sub	fp, #20
16358                 | LR__1812
16358     68 4D BF FD | 	call	#_pop
1635c     FF 1E 02 F6 | 	mov	local01, result3
16360     A7 FA 61 FC | 	wrlong	result1, fp
16364     04 4E 05 F1 | 	add	fp, #4
16368     A7 FC 61 FC | 	wrlong	result2, fp
1636c     04 4E 05 F1 | 	add	fp, #4
16370     A7 1E 62 FC | 	wrlong	local01, fp
16374     08 4E 85 F1 | 	sub	fp, #8
16378     A7 12 02 F6 | 	mov	arg01, fp
1637c     14 EE BF FD | 	call	#_converttoint
16380     10 4E 05 F1 | 	add	fp, #16
16384     A7 FA 61 FC | 	wrlong	result1, fp
16388     FD 12 02 F6 | 	mov	arg01, result1
1638c     04 4E 05 F1 | 	add	fp, #4
16390     A7 14 02 FB | 	rdlong	arg02, fp
16394     14 4E 85 F1 | 	sub	fp, #20
16398     10 16 06 F6 | 	mov	arg03, #16
1639c     40 CC B0 FD | 	call	#__system__Number_S
163a0     A7 FA 61 FC | 	wrlong	result1, fp
163a4     08 4E 05 F1 | 	add	fp, #8
163a8     A7 3E 68 FC | 	wrlong	#31, fp
163ac     08 4E 85 F1 | 	sub	fp, #8
163b0     A7 12 02 F6 | 	mov	arg01, fp
163b4     A4 4D BF FD | 	call	#_push
163b8                 | LR__1813
163b8     A7 F0 03 F6 | 	mov	ptra, fp
163bc     B2 00 A0 FD | 	call	#popregs_
163c0                 | _do_hex_ret
163c0     2D 00 64 FD | 	ret
163c4                 | 
163c4                 | ' 
163c4                 | ' sub do_bin
163c4                 | _do_bin
163c4     01 4A 05 F6 | 	mov	COUNT_, #1
163c8     A8 00 A0 FD | 	call	#pushregs_
163cc     18 F0 07 F1 | 	add	ptra, #24
163d0     4A 00 00 FF 
163d4     B0 E4 05 F1 | 	add	objptr, ##38064
163d8     F2 1E 02 FB | 	rdlong	local01, objptr
163dc     0F 17 02 F6 | 	mov	arg03, local01
163e0     01 16 66 F0 | 	shl	arg03, #1
163e4     0F 17 02 F1 | 	add	arg03, local01
163e8     02 16 66 F0 | 	shl	arg03, #2
163ec     03 00 00 FF 
163f0     04 E4 85 F1 | 	sub	objptr, ##1540
163f4     F2 16 02 F1 | 	add	arg03, objptr
163f8     0B 17 02 FB | 	rdlong	arg03, arg03
163fc     0C 4E 05 F1 | 	add	fp, #12
16400     A7 16 62 FC | 	wrlong	arg03, fp
16404                 | ' 
16404                 | ' numpar=compiledline(lineptr_e).result.uresult
16404                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
16404     0C 4E 85 F1 | 	sub	fp, #12
16408     03 16 16 F2 | 	cmp	arg03, #3 wc
1640c     47 00 00 FF 
16410     AC E4 85 F1 | 	sub	objptr, ##36524
16414     0C 4E 05 C1 |  if_b	add	fp, #12
16418     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1641c     0C 4E 85 C1 |  if_b	sub	fp, #12
16420     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1820
16424     00 12 06 F6 | 	mov	arg01, #0
16428     24 03 B1 FD | 	call	#__system___getiolock_0540
1642c     FD 12 02 F6 | 	mov	arg01, result1
16430     DC A8 B0 FD | 	call	#__system___lockmem
16434     86 01 00 FF 
16438     87 15 06 F6 | 	mov	arg02, ##@LR__5424
1643c     00 12 06 F6 | 	mov	arg01, #0
16440     00 16 06 F6 | 	mov	arg03, #0
16444     BC B5 B0 FD | 	call	#__system___basic_print_string
16448     00 12 06 F6 | 	mov	arg01, #0
1644c     00 03 B1 FD | 	call	#__system___getiolock_0540
16450     FD 00 68 FC | 	wrlong	#0, result1
16454     27 12 06 F6 | 	mov	arg01, #39
16458     0C 64 B0 FD | 	call	#_printerror
1645c     B8 00 90 FD | 	jmp	#LR__1823
16460                 | LR__1820
16460                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
16460     0C 4E 05 F1 | 	add	fp, #12
16464     A7 1E 02 FB | 	rdlong	local01, fp
16468     0C 4E 85 F1 | 	sub	fp, #12
1646c     02 1E 0E F2 | 	cmp	local01, #2 wz
16470     38 00 90 5D |  if_ne	jmp	#LR__1821
16474     4C 4C BF FD | 	call	#_pop
16478     FF 1E 02 F6 | 	mov	local01, result3
1647c     A7 FA 61 FC | 	wrlong	result1, fp
16480     04 4E 05 F1 | 	add	fp, #4
16484     A7 FC 61 FC | 	wrlong	result2, fp
16488     04 4E 05 F1 | 	add	fp, #4
1648c     A7 1E 62 FC | 	wrlong	local01, fp
16490     08 4E 85 F1 | 	sub	fp, #8
16494     A7 12 02 F6 | 	mov	arg01, fp
16498     F8 EC BF FD | 	call	#_converttoint
1649c     14 4E 05 F1 | 	add	fp, #20
164a0     A7 FA 61 FC | 	wrlong	result1, fp
164a4     14 4E 85 F1 | 	sub	fp, #20
164a8     0C 00 90 FD | 	jmp	#LR__1822
164ac                 | LR__1821
164ac     14 4E 05 F1 | 	add	fp, #20
164b0     A7 00 68 FC | 	wrlong	#0, fp
164b4     14 4E 85 F1 | 	sub	fp, #20
164b8                 | LR__1822
164b8     08 4C BF FD | 	call	#_pop
164bc     FF 1E 02 F6 | 	mov	local01, result3
164c0     A7 FA 61 FC | 	wrlong	result1, fp
164c4     04 4E 05 F1 | 	add	fp, #4
164c8     A7 FC 61 FC | 	wrlong	result2, fp
164cc     04 4E 05 F1 | 	add	fp, #4
164d0     A7 1E 62 FC | 	wrlong	local01, fp
164d4     08 4E 85 F1 | 	sub	fp, #8
164d8     A7 12 02 F6 | 	mov	arg01, fp
164dc     B4 EC BF FD | 	call	#_converttoint
164e0     10 4E 05 F1 | 	add	fp, #16
164e4     A7 FA 61 FC | 	wrlong	result1, fp
164e8     FD 12 02 F6 | 	mov	arg01, result1
164ec     04 4E 05 F1 | 	add	fp, #4
164f0     A7 14 02 FB | 	rdlong	arg02, fp
164f4     14 4E 85 F1 | 	sub	fp, #20
164f8     02 16 06 F6 | 	mov	arg03, #2
164fc     E0 CA B0 FD | 	call	#__system__Number_S
16500     A7 FA 61 FC | 	wrlong	result1, fp
16504     08 4E 05 F1 | 	add	fp, #8
16508     A7 3E 68 FC | 	wrlong	#31, fp
1650c     08 4E 85 F1 | 	sub	fp, #8
16510     A7 12 02 F6 | 	mov	arg01, fp
16514     44 4C BF FD | 	call	#_push
16518                 | LR__1823
16518     A7 F0 03 F6 | 	mov	ptra, fp
1651c     B2 00 A0 FD | 	call	#popregs_
16520                 | _do_bin_ret
16520     2D 00 64 FD | 	ret
16524                 | 
16524                 | ' 
16524                 | ' sub do_cos
16524                 | _do_cos
16524     01 4A 05 F6 | 	mov	COUNT_, #1
16528     A8 00 A0 FD | 	call	#pushregs_
1652c     10 F0 07 F1 | 	add	ptra, #16
16530     4A 00 00 FF 
16534     B0 E4 05 F1 | 	add	objptr, ##38064
16538     F2 1E 02 FB | 	rdlong	local01, objptr
1653c     0F 17 02 F6 | 	mov	arg03, local01
16540     01 16 66 F0 | 	shl	arg03, #1
16544     0F 17 02 F1 | 	add	arg03, local01
16548     02 16 66 F0 | 	shl	arg03, #2
1654c     03 00 00 FF 
16550     04 E4 85 F1 | 	sub	objptr, ##1540
16554     F2 16 02 F1 | 	add	arg03, objptr
16558     0B 17 02 FB | 	rdlong	arg03, arg03
1655c     0C 4E 05 F1 | 	add	fp, #12
16560     A7 16 62 FC | 	wrlong	arg03, fp
16564                 | ' 
16564                 | ' numpar=compiledline(lineptr_e).result.uresult
16564                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
16564     0C 4E 85 F1 | 	sub	fp, #12
16568     02 16 16 F2 | 	cmp	arg03, #2 wc
1656c     47 00 00 FF 
16570     AC E4 85 F1 | 	sub	objptr, ##36524
16574     0C 4E 05 C1 |  if_b	add	fp, #12
16578     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1657c     0C 4E 85 C1 |  if_b	sub	fp, #12
16580     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1830
16584     00 12 06 F6 | 	mov	arg01, #0
16588     C4 01 B1 FD | 	call	#__system___getiolock_0540
1658c     FD 12 02 F6 | 	mov	arg01, result1
16590     7C A7 B0 FD | 	call	#__system___lockmem
16594     86 01 00 FF 
16598     8E 15 06 F6 | 	mov	arg02, ##@LR__5425
1659c     00 12 06 F6 | 	mov	arg01, #0
165a0     00 16 06 F6 | 	mov	arg03, #0
165a4     5C B4 B0 FD | 	call	#__system___basic_print_string
165a8     00 12 06 F6 | 	mov	arg01, #0
165ac     A0 01 B1 FD | 	call	#__system___getiolock_0540
165b0     FD 00 68 FC | 	wrlong	#0, result1
165b4     27 12 06 F6 | 	mov	arg01, #39
165b8     AC 62 B0 FD | 	call	#_printerror
165bc     78 00 90 FD | 	jmp	#LR__1831
165c0                 | LR__1830
165c0     00 4B BF FD | 	call	#_pop
165c4     A7 FA 61 FC | 	wrlong	result1, fp
165c8     04 4E 05 F1 | 	add	fp, #4
165cc     A7 FC 61 FC | 	wrlong	result2, fp
165d0     04 4E 05 F1 | 	add	fp, #4
165d4     A7 FE 61 FC | 	wrlong	result3, fp
165d8     08 4E 85 F1 | 	sub	fp, #8
165dc     59 00 00 FF 
165e0     F0 E5 05 F1 | 	add	objptr, ##46064
165e4     F2 1E 02 FB | 	rdlong	local01, objptr
165e8     59 00 00 FF 
165ec     F0 E5 85 F1 | 	sub	objptr, ##46064
165f0     A7 12 02 F6 | 	mov	arg01, fp
165f4     58 EC BF FD | 	call	#_converttofloat
165f8     FD 14 02 F6 | 	mov	arg02, result1
165fc     0F 13 02 F6 | 	mov	arg01, local01
16600     C0 D2 B0 FD | 	call	#__system___float_mul
16604     FD 14 02 F6 | 	mov	arg02, result1
16608     87 E4 1F FF 
1660c     DB 13 06 F6 | 	mov	arg01, ##1070141403
16610     1F 14 E6 F4 | 	bitnot	arg02, #31
16614     DC CE B0 FD | 	call	#__system___float_add
16618     FD 12 02 F6 | 	mov	arg01, result1
1661c     E0 DB B0 FD | 	call	#__system____builtin_sinf
16620     A7 FA 61 FC | 	wrlong	result1, fp
16624     08 4E 05 F1 | 	add	fp, #8
16628     A7 3C 68 FC | 	wrlong	#30, fp
1662c     08 4E 85 F1 | 	sub	fp, #8
16630     A7 12 02 F6 | 	mov	arg01, fp
16634     24 4B BF FD | 	call	#_push
16638                 | LR__1831
16638     A7 F0 03 F6 | 	mov	ptra, fp
1663c     B2 00 A0 FD | 	call	#popregs_
16640                 | _do_cos_ret
16640     2D 00 64 FD | 	ret
16644                 | 
16644                 | ' 
16644                 | ' sub do_tan
16644                 | _do_tan
16644     01 4A 05 F6 | 	mov	COUNT_, #1
16648     A8 00 A0 FD | 	call	#pushregs_
1664c     10 F0 07 F1 | 	add	ptra, #16
16650     4A 00 00 FF 
16654     B0 E4 05 F1 | 	add	objptr, ##38064
16658     F2 1E 02 FB | 	rdlong	local01, objptr
1665c     0F 17 02 F6 | 	mov	arg03, local01
16660     01 16 66 F0 | 	shl	arg03, #1
16664     0F 17 02 F1 | 	add	arg03, local01
16668     02 16 66 F0 | 	shl	arg03, #2
1666c     03 00 00 FF 
16670     04 E4 85 F1 | 	sub	objptr, ##1540
16674     F2 16 02 F1 | 	add	arg03, objptr
16678     0B 17 02 FB | 	rdlong	arg03, arg03
1667c     0C 4E 05 F1 | 	add	fp, #12
16680     A7 16 62 FC | 	wrlong	arg03, fp
16684                 | ' 
16684                 | ' numpar=compiledline(lineptr_e).result.uresult
16684                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
16684     0C 4E 85 F1 | 	sub	fp, #12
16688     02 16 16 F2 | 	cmp	arg03, #2 wc
1668c     47 00 00 FF 
16690     AC E4 85 F1 | 	sub	objptr, ##36524
16694     0C 4E 05 C1 |  if_b	add	fp, #12
16698     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1669c     0C 4E 85 C1 |  if_b	sub	fp, #12
166a0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1840
166a4     00 12 06 F6 | 	mov	arg01, #0
166a8     A4 00 B1 FD | 	call	#__system___getiolock_0540
166ac     FD 12 02 F6 | 	mov	arg01, result1
166b0     5C A6 B0 FD | 	call	#__system___lockmem
166b4     86 01 00 FF 
166b8     94 15 06 F6 | 	mov	arg02, ##@LR__5426
166bc     00 12 06 F6 | 	mov	arg01, #0
166c0     00 16 06 F6 | 	mov	arg03, #0
166c4     3C B3 B0 FD | 	call	#__system___basic_print_string
166c8     00 12 06 F6 | 	mov	arg01, #0
166cc     80 00 B1 FD | 	call	#__system___getiolock_0540
166d0     FD 00 68 FC | 	wrlong	#0, result1
166d4     27 12 06 F6 | 	mov	arg01, #39
166d8     8C 61 B0 FD | 	call	#_printerror
166dc     64 00 90 FD | 	jmp	#LR__1841
166e0                 | LR__1840
166e0     E0 49 BF FD | 	call	#_pop
166e4     A7 FA 61 FC | 	wrlong	result1, fp
166e8     04 4E 05 F1 | 	add	fp, #4
166ec     A7 FC 61 FC | 	wrlong	result2, fp
166f0     04 4E 05 F1 | 	add	fp, #4
166f4     A7 FE 61 FC | 	wrlong	result3, fp
166f8     08 4E 85 F1 | 	sub	fp, #8
166fc     59 00 00 FF 
16700     F0 E5 05 F1 | 	add	objptr, ##46064
16704     F2 1E 02 FB | 	rdlong	local01, objptr
16708     59 00 00 FF 
1670c     F0 E5 85 F1 | 	sub	objptr, ##46064
16710     A7 12 02 F6 | 	mov	arg01, fp
16714     38 EB BF FD | 	call	#_converttofloat
16718     FD 14 02 F6 | 	mov	arg02, result1
1671c     0F 13 02 F6 | 	mov	arg01, local01
16720     A0 D1 B0 FD | 	call	#__system___float_mul
16724     FD 12 02 F6 | 	mov	arg01, result1
16728     20 DC B0 FD | 	call	#__system____builtin_tanf
1672c     A7 FA 61 FC | 	wrlong	result1, fp
16730     08 4E 05 F1 | 	add	fp, #8
16734     A7 3C 68 FC | 	wrlong	#30, fp
16738     08 4E 85 F1 | 	sub	fp, #8
1673c     A7 12 02 F6 | 	mov	arg01, fp
16740     18 4A BF FD | 	call	#_push
16744                 | LR__1841
16744     A7 F0 03 F6 | 	mov	ptra, fp
16748     B2 00 A0 FD | 	call	#popregs_
1674c                 | _do_tan_ret
1674c     2D 00 64 FD | 	ret
16750                 | 
16750                 | ' 
16750                 | ' sub do_asin
16750                 | _do_asin
16750     01 4A 05 F6 | 	mov	COUNT_, #1
16754     A8 00 A0 FD | 	call	#pushregs_
16758     10 F0 07 F1 | 	add	ptra, #16
1675c     4A 00 00 FF 
16760     B0 E4 05 F1 | 	add	objptr, ##38064
16764     F2 1E 02 FB | 	rdlong	local01, objptr
16768     0F 17 02 F6 | 	mov	arg03, local01
1676c     01 16 66 F0 | 	shl	arg03, #1
16770     0F 17 02 F1 | 	add	arg03, local01
16774     02 16 66 F0 | 	shl	arg03, #2
16778     03 00 00 FF 
1677c     04 E4 85 F1 | 	sub	objptr, ##1540
16780     F2 16 02 F1 | 	add	arg03, objptr
16784     0B 17 02 FB | 	rdlong	arg03, arg03
16788     0C 4E 05 F1 | 	add	fp, #12
1678c     A7 16 62 FC | 	wrlong	arg03, fp
16790                 | ' 
16790                 | ' numpar=compiledline(lineptr_e).result.uresult
16790                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
16790     0C 4E 85 F1 | 	sub	fp, #12
16794     02 16 16 F2 | 	cmp	arg03, #2 wc
16798     47 00 00 FF 
1679c     AC E4 85 F1 | 	sub	objptr, ##36524
167a0     0C 4E 05 C1 |  if_b	add	fp, #12
167a4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
167a8     0C 4E 85 C1 |  if_b	sub	fp, #12
167ac     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1850
167b0     00 12 06 F6 | 	mov	arg01, #0
167b4     98 FF B0 FD | 	call	#__system___getiolock_0540
167b8     FD 12 02 F6 | 	mov	arg01, result1
167bc     50 A5 B0 FD | 	call	#__system___lockmem
167c0     86 01 00 FF 
167c4     9A 15 06 F6 | 	mov	arg02, ##@LR__5427
167c8     00 12 06 F6 | 	mov	arg01, #0
167cc     00 16 06 F6 | 	mov	arg03, #0
167d0     30 B2 B0 FD | 	call	#__system___basic_print_string
167d4     00 12 06 F6 | 	mov	arg01, #0
167d8     74 FF B0 FD | 	call	#__system___getiolock_0540
167dc     FD 00 68 FC | 	wrlong	#0, result1
167e0     27 12 06 F6 | 	mov	arg01, #39
167e4     80 60 B0 FD | 	call	#_printerror
167e8     64 00 90 FD | 	jmp	#LR__1851
167ec                 | LR__1850
167ec     D4 48 BF FD | 	call	#_pop
167f0     FF 1E 02 F6 | 	mov	local01, result3
167f4     A7 FA 61 FC | 	wrlong	result1, fp
167f8     04 4E 05 F1 | 	add	fp, #4
167fc     A7 FC 61 FC | 	wrlong	result2, fp
16800     04 4E 05 F1 | 	add	fp, #4
16804     A7 1E 62 FC | 	wrlong	local01, fp
16808     08 4E 85 F1 | 	sub	fp, #8
1680c     A7 12 02 F6 | 	mov	arg01, fp
16810     3C EA BF FD | 	call	#_converttofloat
16814     FD 12 02 F6 | 	mov	arg01, result1
16818     78 DB B0 FD | 	call	#__system____builtin_asinf
1681c     FD 12 02 F6 | 	mov	arg01, result1
16820     59 00 00 FF 
16824     F4 E5 05 F1 | 	add	objptr, ##46068
16828     F2 14 02 FB | 	rdlong	arg02, objptr
1682c     59 00 00 FF 
16830     F4 E5 85 F1 | 	sub	objptr, ##46068
16834     8C D0 B0 FD | 	call	#__system___float_mul
16838     A7 FA 61 FC | 	wrlong	result1, fp
1683c     08 4E 05 F1 | 	add	fp, #8
16840     A7 3C 68 FC | 	wrlong	#30, fp
16844     08 4E 85 F1 | 	sub	fp, #8
16848     A7 12 02 F6 | 	mov	arg01, fp
1684c     0C 49 BF FD | 	call	#_push
16850                 | LR__1851
16850     A7 F0 03 F6 | 	mov	ptra, fp
16854     B2 00 A0 FD | 	call	#popregs_
16858                 | _do_asin_ret
16858     2D 00 64 FD | 	ret
1685c                 | 
1685c                 | ' 
1685c                 | ' sub do_acos
1685c                 | _do_acos
1685c     01 4A 05 F6 | 	mov	COUNT_, #1
16860     A8 00 A0 FD | 	call	#pushregs_
16864     10 F0 07 F1 | 	add	ptra, #16
16868     4A 00 00 FF 
1686c     B0 E4 05 F1 | 	add	objptr, ##38064
16870     F2 1E 02 FB | 	rdlong	local01, objptr
16874     0F 17 02 F6 | 	mov	arg03, local01
16878     01 16 66 F0 | 	shl	arg03, #1
1687c     0F 17 02 F1 | 	add	arg03, local01
16880     02 16 66 F0 | 	shl	arg03, #2
16884     03 00 00 FF 
16888     04 E4 85 F1 | 	sub	objptr, ##1540
1688c     F2 16 02 F1 | 	add	arg03, objptr
16890     0B 17 02 FB | 	rdlong	arg03, arg03
16894     0C 4E 05 F1 | 	add	fp, #12
16898     A7 16 62 FC | 	wrlong	arg03, fp
1689c                 | ' 
1689c                 | ' numpar=compiledline(lineptr_e).result.uresult
1689c                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
1689c     0C 4E 85 F1 | 	sub	fp, #12
168a0     02 16 16 F2 | 	cmp	arg03, #2 wc
168a4     47 00 00 FF 
168a8     AC E4 85 F1 | 	sub	objptr, ##36524
168ac     0C 4E 05 C1 |  if_b	add	fp, #12
168b0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
168b4     0C 4E 85 C1 |  if_b	sub	fp, #12
168b8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1860
168bc     00 12 06 F6 | 	mov	arg01, #0
168c0     8C FE B0 FD | 	call	#__system___getiolock_0540
168c4     FD 12 02 F6 | 	mov	arg01, result1
168c8     44 A4 B0 FD | 	call	#__system___lockmem
168cc     86 01 00 FF 
168d0     A1 15 06 F6 | 	mov	arg02, ##@LR__5428
168d4     00 12 06 F6 | 	mov	arg01, #0
168d8     00 16 06 F6 | 	mov	arg03, #0
168dc     24 B1 B0 FD | 	call	#__system___basic_print_string
168e0     00 12 06 F6 | 	mov	arg01, #0
168e4     68 FE B0 FD | 	call	#__system___getiolock_0540
168e8     FD 00 68 FC | 	wrlong	#0, result1
168ec     27 12 06 F6 | 	mov	arg01, #39
168f0     74 5F B0 FD | 	call	#_printerror
168f4     64 00 90 FD | 	jmp	#LR__1861
168f8                 | LR__1860
168f8     C8 47 BF FD | 	call	#_pop
168fc     FF 1E 02 F6 | 	mov	local01, result3
16900     A7 FA 61 FC | 	wrlong	result1, fp
16904     04 4E 05 F1 | 	add	fp, #4
16908     A7 FC 61 FC | 	wrlong	result2, fp
1690c     04 4E 05 F1 | 	add	fp, #4
16910     A7 1E 62 FC | 	wrlong	local01, fp
16914     08 4E 85 F1 | 	sub	fp, #8
16918     A7 12 02 F6 | 	mov	arg01, fp
1691c     30 E9 BF FD | 	call	#_converttofloat
16920     FD 12 02 F6 | 	mov	arg01, result1
16924     B8 DA B0 FD | 	call	#__system____builtin_acosf
16928     FD 12 02 F6 | 	mov	arg01, result1
1692c     59 00 00 FF 
16930     F4 E5 05 F1 | 	add	objptr, ##46068
16934     F2 14 02 FB | 	rdlong	arg02, objptr
16938     59 00 00 FF 
1693c     F4 E5 85 F1 | 	sub	objptr, ##46068
16940     80 CF B0 FD | 	call	#__system___float_mul
16944     A7 FA 61 FC | 	wrlong	result1, fp
16948     08 4E 05 F1 | 	add	fp, #8
1694c     A7 3C 68 FC | 	wrlong	#30, fp
16950     08 4E 85 F1 | 	sub	fp, #8
16954     A7 12 02 F6 | 	mov	arg01, fp
16958     00 48 BF FD | 	call	#_push
1695c                 | LR__1861
1695c     A7 F0 03 F6 | 	mov	ptra, fp
16960     B2 00 A0 FD | 	call	#popregs_
16964                 | _do_acos_ret
16964     2D 00 64 FD | 	ret
16968                 | 
16968                 | ' 
16968                 | ' sub do_atn
16968                 | _do_atn
16968     01 4A 05 F6 | 	mov	COUNT_, #1
1696c     A8 00 A0 FD | 	call	#pushregs_
16970     10 F0 07 F1 | 	add	ptra, #16
16974     4A 00 00 FF 
16978     B0 E4 05 F1 | 	add	objptr, ##38064
1697c     F2 1E 02 FB | 	rdlong	local01, objptr
16980     0F 17 02 F6 | 	mov	arg03, local01
16984     01 16 66 F0 | 	shl	arg03, #1
16988     0F 17 02 F1 | 	add	arg03, local01
1698c     02 16 66 F0 | 	shl	arg03, #2
16990     03 00 00 FF 
16994     04 E4 85 F1 | 	sub	objptr, ##1540
16998     F2 16 02 F1 | 	add	arg03, objptr
1699c     0B 17 02 FB | 	rdlong	arg03, arg03
169a0     0C 4E 05 F1 | 	add	fp, #12
169a4     A7 16 62 FC | 	wrlong	arg03, fp
169a8                 | ' 
169a8                 | ' numpar=compiledline(lineptr_e).result.uresult
169a8                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
169a8     0C 4E 85 F1 | 	sub	fp, #12
169ac     02 16 16 F2 | 	cmp	arg03, #2 wc
169b0     47 00 00 FF 
169b4     AC E4 85 F1 | 	sub	objptr, ##36524
169b8     0C 4E 05 C1 |  if_b	add	fp, #12
169bc     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
169c0     0C 4E 85 C1 |  if_b	sub	fp, #12
169c4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1870
169c8     00 12 06 F6 | 	mov	arg01, #0
169cc     80 FD B0 FD | 	call	#__system___getiolock_0540
169d0     FD 12 02 F6 | 	mov	arg01, result1
169d4     38 A3 B0 FD | 	call	#__system___lockmem
169d8     86 01 00 FF 
169dc     A8 15 06 F6 | 	mov	arg02, ##@LR__5429
169e0     00 12 06 F6 | 	mov	arg01, #0
169e4     00 16 06 F6 | 	mov	arg03, #0
169e8     18 B0 B0 FD | 	call	#__system___basic_print_string
169ec     00 12 06 F6 | 	mov	arg01, #0
169f0     5C FD B0 FD | 	call	#__system___getiolock_0540
169f4     FD 00 68 FC | 	wrlong	#0, result1
169f8     27 12 06 F6 | 	mov	arg01, #39
169fc     68 5E B0 FD | 	call	#_printerror
16a00     6C 00 90 FD | 	jmp	#LR__1871
16a04                 | LR__1870
16a04     BC 46 BF FD | 	call	#_pop
16a08     FF 1E 02 F6 | 	mov	local01, result3
16a0c     A7 FA 61 FC | 	wrlong	result1, fp
16a10     04 4E 05 F1 | 	add	fp, #4
16a14     A7 FC 61 FC | 	wrlong	result2, fp
16a18     04 4E 05 F1 | 	add	fp, #4
16a1c     A7 1E 62 FC | 	wrlong	local01, fp
16a20     08 4E 85 F1 | 	sub	fp, #8
16a24     A7 12 02 F6 | 	mov	arg01, fp
16a28     24 E8 BF FD | 	call	#_converttofloat
16a2c     FD 12 02 F6 | 	mov	arg01, result1
16a30     00 C0 1F FF 
16a34     00 14 06 F6 | 	mov	arg02, ##1065353216
16a38     F0 D9 B0 FD | 	call	#__system____builtin_atan2f
16a3c     FD 12 02 F6 | 	mov	arg01, result1
16a40     59 00 00 FF 
16a44     F4 E5 05 F1 | 	add	objptr, ##46068
16a48     F2 14 02 FB | 	rdlong	arg02, objptr
16a4c     59 00 00 FF 
16a50     F4 E5 85 F1 | 	sub	objptr, ##46068
16a54     6C CE B0 FD | 	call	#__system___float_mul
16a58     A7 FA 61 FC | 	wrlong	result1, fp
16a5c     08 4E 05 F1 | 	add	fp, #8
16a60     A7 3C 68 FC | 	wrlong	#30, fp
16a64     08 4E 85 F1 | 	sub	fp, #8
16a68     A7 12 02 F6 | 	mov	arg01, fp
16a6c     EC 46 BF FD | 	call	#_push
16a70                 | LR__1871
16a70     A7 F0 03 F6 | 	mov	ptra, fp
16a74     B2 00 A0 FD | 	call	#popregs_
16a78                 | _do_atn_ret
16a78     2D 00 64 FD | 	ret
16a7c                 | 
16a7c                 | ' 
16a7c                 | ' sub do_sqr
16a7c                 | _do_sqr
16a7c     01 4A 05 F6 | 	mov	COUNT_, #1
16a80     A8 00 A0 FD | 	call	#pushregs_
16a84     10 F0 07 F1 | 	add	ptra, #16
16a88     4A 00 00 FF 
16a8c     B0 E4 05 F1 | 	add	objptr, ##38064
16a90     F2 1E 02 FB | 	rdlong	local01, objptr
16a94     0F 17 02 F6 | 	mov	arg03, local01
16a98     01 16 66 F0 | 	shl	arg03, #1
16a9c     0F 17 02 F1 | 	add	arg03, local01
16aa0     02 16 66 F0 | 	shl	arg03, #2
16aa4     03 00 00 FF 
16aa8     04 E4 85 F1 | 	sub	objptr, ##1540
16aac     F2 16 02 F1 | 	add	arg03, objptr
16ab0     0B 17 02 FB | 	rdlong	arg03, arg03
16ab4     0C 4E 05 F1 | 	add	fp, #12
16ab8     A7 16 62 FC | 	wrlong	arg03, fp
16abc                 | ' 
16abc                 | ' numpar=compiledline(lineptr_e).result.uresult
16abc                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
16abc     0C 4E 85 F1 | 	sub	fp, #12
16ac0     02 16 16 F2 | 	cmp	arg03, #2 wc
16ac4     47 00 00 FF 
16ac8     AC E4 85 F1 | 	sub	objptr, ##36524
16acc     0C 4E 05 C1 |  if_b	add	fp, #12
16ad0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16ad4     0C 4E 85 C1 |  if_b	sub	fp, #12
16ad8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1880
16adc     00 12 06 F6 | 	mov	arg01, #0
16ae0     6C FC B0 FD | 	call	#__system___getiolock_0540
16ae4     FD 12 02 F6 | 	mov	arg01, result1
16ae8     24 A2 B0 FD | 	call	#__system___lockmem
16aec     86 01 00 FF 
16af0     AE 15 06 F6 | 	mov	arg02, ##@LR__5430
16af4     00 12 06 F6 | 	mov	arg01, #0
16af8     00 16 06 F6 | 	mov	arg03, #0
16afc     04 AF B0 FD | 	call	#__system___basic_print_string
16b00     00 12 06 F6 | 	mov	arg01, #0
16b04     48 FC B0 FD | 	call	#__system___getiolock_0540
16b08     FD 00 68 FC | 	wrlong	#0, result1
16b0c     27 12 06 F6 | 	mov	arg01, #39
16b10     54 5D B0 FD | 	call	#_printerror
16b14     48 00 90 FD | 	jmp	#LR__1881
16b18                 | LR__1880
16b18     A8 45 BF FD | 	call	#_pop
16b1c     FF 1E 02 F6 | 	mov	local01, result3
16b20     A7 FA 61 FC | 	wrlong	result1, fp
16b24     04 4E 05 F1 | 	add	fp, #4
16b28     A7 FC 61 FC | 	wrlong	result2, fp
16b2c     04 4E 05 F1 | 	add	fp, #4
16b30     A7 1E 62 FC | 	wrlong	local01, fp
16b34     08 4E 85 F1 | 	sub	fp, #8
16b38     A7 12 02 F6 | 	mov	arg01, fp
16b3c     10 E7 BF FD | 	call	#_converttofloat
16b40     FD 12 02 F6 | 	mov	arg01, result1
16b44     A4 CC B0 FD | 	call	#__system___float_sqrt
16b48     A7 FA 61 FC | 	wrlong	result1, fp
16b4c     08 4E 05 F1 | 	add	fp, #8
16b50     A7 3C 68 FC | 	wrlong	#30, fp
16b54     08 4E 85 F1 | 	sub	fp, #8
16b58     A7 12 02 F6 | 	mov	arg01, fp
16b5c     FC 45 BF FD | 	call	#_push
16b60                 | LR__1881
16b60     A7 F0 03 F6 | 	mov	ptra, fp
16b64     B2 00 A0 FD | 	call	#popregs_
16b68                 | _do_sqr_ret
16b68     2D 00 64 FD | 	ret
16b6c                 | 
16b6c                 | ' 
16b6c                 | ' sub do_stick
16b6c                 | _do_stick
16b6c     01 4A 05 F6 | 	mov	COUNT_, #1
16b70     A8 00 A0 FD | 	call	#pushregs_
16b74     10 F0 07 F1 | 	add	ptra, #16
16b78     4A 00 00 FF 
16b7c     B0 E4 05 F1 | 	add	objptr, ##38064
16b80     F2 1E 02 FB | 	rdlong	local01, objptr
16b84     0F 17 02 F6 | 	mov	arg03, local01
16b88     01 16 66 F0 | 	shl	arg03, #1
16b8c     0F 17 02 F1 | 	add	arg03, local01
16b90     02 16 66 F0 | 	shl	arg03, #2
16b94     03 00 00 FF 
16b98     04 E4 85 F1 | 	sub	objptr, ##1540
16b9c     F2 16 02 F1 | 	add	arg03, objptr
16ba0     0B 17 02 FB | 	rdlong	arg03, arg03
16ba4     0C 4E 05 F1 | 	add	fp, #12
16ba8     A7 16 62 FC | 	wrlong	arg03, fp
16bac                 | ' 
16bac                 | ' numpar=compiledline(lineptr_e).result.uresult
16bac                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
16bac     0C 4E 85 F1 | 	sub	fp, #12
16bb0     02 16 16 F2 | 	cmp	arg03, #2 wc
16bb4     47 00 00 FF 
16bb8     AC E4 85 F1 | 	sub	objptr, ##36524
16bbc     3C 00 90 CD |  if_b	jmp	#LR__1890
16bc0     00 12 06 F6 | 	mov	arg01, #0
16bc4     88 FB B0 FD | 	call	#__system___getiolock_0540
16bc8     FD 12 02 F6 | 	mov	arg01, result1
16bcc     40 A1 B0 FD | 	call	#__system___lockmem
16bd0     86 01 00 FF 
16bd4     B4 15 06 F6 | 	mov	arg02, ##@LR__5431
16bd8     00 12 06 F6 | 	mov	arg01, #0
16bdc     00 16 06 F6 | 	mov	arg03, #0
16be0     20 AE B0 FD | 	call	#__system___basic_print_string
16be4     00 12 06 F6 | 	mov	arg01, #0
16be8     64 FB B0 FD | 	call	#__system___getiolock_0540
16bec     FD 00 68 FC | 	wrlong	#0, result1
16bf0     27 12 06 F6 | 	mov	arg01, #39
16bf4     70 5C B0 FD | 	call	#_printerror
16bf8     E8 00 90 FD | 	jmp	#LR__1894
16bfc                 | LR__1890
16bfc                 | ' 
16bfc                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
16bfc     0C 4E 05 F1 | 	add	fp, #12
16c00     A7 FE 09 FB | 	rdlong	result3, fp wz
16c04     0C 4E 85 F1 | 	sub	fp, #12
16c08     30 00 90 5D |  if_ne	jmp	#LR__1891
16c0c     59 00 00 FF 
16c10     64 E5 05 F1 | 	add	objptr, ##45924
16c14     F2 1E 02 FB | 	rdlong	local01, objptr
16c18     59 00 00 FF 
16c1c     64 E5 85 F1 | 	sub	objptr, ##45924
16c20     A7 1E 62 FC | 	wrlong	local01, fp
16c24     08 4E 05 F1 | 	add	fp, #8
16c28     A7 3A 68 FC | 	wrlong	#29, fp
16c2c     08 4E 85 F1 | 	sub	fp, #8
16c30     A7 12 02 F6 | 	mov	arg01, fp
16c34     24 45 BF FD | 	call	#_push
16c38     A8 00 90 FD | 	jmp	#LR__1894
16c3c                 | LR__1891
16c3c     84 44 BF FD | 	call	#_pop
16c40     A7 FA 61 FC | 	wrlong	result1, fp
16c44     04 4E 05 F1 | 	add	fp, #4
16c48     A7 FC 61 FC | 	wrlong	result2, fp
16c4c     04 4E 05 F1 | 	add	fp, #4
16c50     A7 FE 61 FC | 	wrlong	result3, fp
16c54                 | ' 
16c54                 | ' t1=pop()
16c54                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16c54     08 4E 85 F1 | 	sub	fp, #8
16c58     1C FE 0D F2 | 	cmp	result3, #28 wz
16c5c     08 4E 05 51 |  if_ne	add	fp, #8
16c60     A7 1E 02 5B |  if_ne	rdlong	local01, fp
16c64     08 4E 85 51 |  if_ne	sub	fp, #8
16c68     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
16c6c     6C 00 90 5D |  if_ne	jmp	#LR__1893
16c70     A7 1E 02 FB | 	rdlong	local01, fp
16c74     5A 00 00 FF 
16c78     5C E4 05 F1 | 	add	objptr, ##46172
16c7c     F2 1E 62 FC | 	wrlong	local01, objptr
16c80                 | '   q=t1.result.uresult
16c80                 | '   if q<7 then 
16c80     5A 00 00 FF 
16c84     5C E4 85 F1 | 	sub	objptr, ##46172
16c88     07 1E 56 F2 | 	cmps	local01, #7 wc
16c8c     40 00 90 3D |  if_ae	jmp	#LR__1892
16c90     5A 00 00 FF 
16c94     5C E4 05 F1 | 	add	objptr, ##46172
16c98     F2 1E 02 FB | 	rdlong	local01, objptr
16c9c     02 1E 66 F0 | 	shl	local01, #2
16ca0     F8 E4 85 F1 | 	sub	objptr, #248
16ca4     F2 1E 02 F1 | 	add	local01, objptr
16ca8     0F 1F 02 FB | 	rdlong	local01, local01
16cac     A7 1E 62 FC | 	wrlong	local01, fp
16cb0     08 4E 05 F1 | 	add	fp, #8
16cb4     A7 3A 68 FC | 	wrlong	#29, fp
16cb8     08 4E 85 F1 | 	sub	fp, #8
16cbc     A7 12 02 F6 | 	mov	arg01, fp
16cc0     59 00 00 FF 
16cc4     64 E5 85 F1 | 	sub	objptr, ##45924
16cc8     90 44 BF FD | 	call	#_push
16ccc                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
16ccc     14 00 90 FD | 	jmp	#LR__1894
16cd0                 | LR__1892
16cd0     29 12 06 F6 | 	mov	arg01, #41
16cd4     90 5B B0 FD | 	call	#_printerror
16cd8                 | '      printerror(41) : return
16cd8     08 00 90 FD | 	jmp	#LR__1894
16cdc                 | LR__1893
16cdc     29 12 06 F6 | 	mov	arg01, #41
16ce0     84 5B B0 FD | 	call	#_printerror
16ce4                 | LR__1894
16ce4     A7 F0 03 F6 | 	mov	ptra, fp
16ce8     B2 00 A0 FD | 	call	#popregs_
16cec                 | _do_stick_ret
16cec     2D 00 64 FD | 	ret
16cf0                 | 
16cf0                 | ' 
16cf0                 | ' sub do_strig
16cf0                 | _do_strig
16cf0     01 4A 05 F6 | 	mov	COUNT_, #1
16cf4     A8 00 A0 FD | 	call	#pushregs_
16cf8     10 F0 07 F1 | 	add	ptra, #16
16cfc     4A 00 00 FF 
16d00     B0 E4 05 F1 | 	add	objptr, ##38064
16d04     F2 1E 02 FB | 	rdlong	local01, objptr
16d08     0F 17 02 F6 | 	mov	arg03, local01
16d0c     01 16 66 F0 | 	shl	arg03, #1
16d10     0F 17 02 F1 | 	add	arg03, local01
16d14     02 16 66 F0 | 	shl	arg03, #2
16d18     03 00 00 FF 
16d1c     04 E4 85 F1 | 	sub	objptr, ##1540
16d20     F2 16 02 F1 | 	add	arg03, objptr
16d24     0B 17 02 FB | 	rdlong	arg03, arg03
16d28     0C 4E 05 F1 | 	add	fp, #12
16d2c     A7 16 62 FC | 	wrlong	arg03, fp
16d30                 | ' 
16d30                 | ' numpar=compiledline(lineptr_e).result.uresult
16d30                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
16d30     0C 4E 85 F1 | 	sub	fp, #12
16d34     02 16 16 F2 | 	cmp	arg03, #2 wc
16d38     47 00 00 FF 
16d3c     AC E4 85 F1 | 	sub	objptr, ##36524
16d40     3C 00 90 CD |  if_b	jmp	#LR__1900
16d44     00 12 06 F6 | 	mov	arg01, #0
16d48     04 FA B0 FD | 	call	#__system___getiolock_0540
16d4c     FD 12 02 F6 | 	mov	arg01, result1
16d50     BC 9F B0 FD | 	call	#__system___lockmem
16d54     86 01 00 FF 
16d58     BC 15 06 F6 | 	mov	arg02, ##@LR__5432
16d5c     00 12 06 F6 | 	mov	arg01, #0
16d60     00 16 06 F6 | 	mov	arg03, #0
16d64     9C AC B0 FD | 	call	#__system___basic_print_string
16d68     00 12 06 F6 | 	mov	arg01, #0
16d6c     E0 F9 B0 FD | 	call	#__system___getiolock_0540
16d70     FD 00 68 FC | 	wrlong	#0, result1
16d74     27 12 06 F6 | 	mov	arg01, #39
16d78     EC 5A B0 FD | 	call	#_printerror
16d7c     E8 00 90 FD | 	jmp	#LR__1904
16d80                 | LR__1900
16d80                 | ' 
16d80                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
16d80     0C 4E 05 F1 | 	add	fp, #12
16d84     A7 FE 09 FB | 	rdlong	result3, fp wz
16d88     0C 4E 85 F1 | 	sub	fp, #12
16d8c     30 00 90 5D |  if_ne	jmp	#LR__1901
16d90     59 00 00 FF 
16d94     80 E5 05 F1 | 	add	objptr, ##45952
16d98     F2 1E 02 FB | 	rdlong	local01, objptr
16d9c     59 00 00 FF 
16da0     80 E5 85 F1 | 	sub	objptr, ##45952
16da4     A7 1E 62 FC | 	wrlong	local01, fp
16da8     08 4E 05 F1 | 	add	fp, #8
16dac     A7 3A 68 FC | 	wrlong	#29, fp
16db0     08 4E 85 F1 | 	sub	fp, #8
16db4     A7 12 02 F6 | 	mov	arg01, fp
16db8     A0 43 BF FD | 	call	#_push
16dbc     A8 00 90 FD | 	jmp	#LR__1904
16dc0                 | LR__1901
16dc0     00 43 BF FD | 	call	#_pop
16dc4     A7 FA 61 FC | 	wrlong	result1, fp
16dc8     04 4E 05 F1 | 	add	fp, #4
16dcc     A7 FC 61 FC | 	wrlong	result2, fp
16dd0     04 4E 05 F1 | 	add	fp, #4
16dd4     A7 FE 61 FC | 	wrlong	result3, fp
16dd8                 | ' 
16dd8                 | ' t1=pop()
16dd8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16dd8     08 4E 85 F1 | 	sub	fp, #8
16ddc     1C FE 0D F2 | 	cmp	result3, #28 wz
16de0     08 4E 05 51 |  if_ne	add	fp, #8
16de4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
16de8     08 4E 85 51 |  if_ne	sub	fp, #8
16dec     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
16df0     6C 00 90 5D |  if_ne	jmp	#LR__1903
16df4     A7 1E 02 FB | 	rdlong	local01, fp
16df8     5A 00 00 FF 
16dfc     5C E4 05 F1 | 	add	objptr, ##46172
16e00     F2 1E 62 FC | 	wrlong	local01, objptr
16e04                 | '   q=t1.result.uresult
16e04                 | '   if q<7 then 
16e04     5A 00 00 FF 
16e08     5C E4 85 F1 | 	sub	objptr, ##46172
16e0c     07 1E 56 F2 | 	cmps	local01, #7 wc
16e10     40 00 90 3D |  if_ae	jmp	#LR__1902
16e14     5A 00 00 FF 
16e18     5C E4 05 F1 | 	add	objptr, ##46172
16e1c     F2 1E 02 FB | 	rdlong	local01, objptr
16e20     02 1E 66 F0 | 	shl	local01, #2
16e24     DC E4 85 F1 | 	sub	objptr, #220
16e28     F2 1E 02 F1 | 	add	local01, objptr
16e2c     0F 1F 02 FB | 	rdlong	local01, local01
16e30     A7 1E 62 FC | 	wrlong	local01, fp
16e34     08 4E 05 F1 | 	add	fp, #8
16e38     A7 3A 68 FC | 	wrlong	#29, fp
16e3c     08 4E 85 F1 | 	sub	fp, #8
16e40     A7 12 02 F6 | 	mov	arg01, fp
16e44     59 00 00 FF 
16e48     80 E5 85 F1 | 	sub	objptr, ##45952
16e4c     0C 43 BF FD | 	call	#_push
16e50                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
16e50     14 00 90 FD | 	jmp	#LR__1904
16e54                 | LR__1902
16e54     29 12 06 F6 | 	mov	arg01, #41
16e58     0C 5A B0 FD | 	call	#_printerror
16e5c                 | '      printerror(41) : return
16e5c     08 00 90 FD | 	jmp	#LR__1904
16e60                 | LR__1903
16e60     29 12 06 F6 | 	mov	arg01, #41
16e64     00 5A B0 FD | 	call	#_printerror
16e68                 | LR__1904
16e68     A7 F0 03 F6 | 	mov	ptra, fp
16e6c     B2 00 A0 FD | 	call	#popregs_
16e70                 | _do_strig_ret
16e70     2D 00 64 FD | 	ret
16e74                 | 
16e74                 | ' 
16e74                 | ' sub do_getpixel
16e74                 | _do_getpixel
16e74     00 4A 05 F6 | 	mov	COUNT_, #0
16e78     A8 00 A0 FD | 	call	#pushregs_
16e7c     24 F0 07 F1 | 	add	ptra, #36
16e80     4A 00 00 FF 
16e84     B0 E4 05 F1 | 	add	objptr, ##38064
16e88     F2 16 02 FB | 	rdlong	arg03, objptr
16e8c     0B 15 02 F6 | 	mov	arg02, arg03
16e90     01 14 66 F0 | 	shl	arg02, #1
16e94     0B 15 02 F1 | 	add	arg02, arg03
16e98     02 14 66 F0 | 	shl	arg02, #2
16e9c     03 00 00 FF 
16ea0     04 E4 85 F1 | 	sub	objptr, ##1540
16ea4     F2 14 02 F1 | 	add	arg02, objptr
16ea8     0A 17 02 FB | 	rdlong	arg03, arg02
16eac     18 4E 05 F1 | 	add	fp, #24
16eb0     A7 16 62 FC | 	wrlong	arg03, fp
16eb4                 | ' 
16eb4                 | ' numpar=compiledline(lineptr_e).result.uresult
16eb4                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
16eb4     18 4E 85 F1 | 	sub	fp, #24
16eb8     02 16 0E F2 | 	cmp	arg03, #2 wz
16ebc     47 00 00 FF 
16ec0     AC E4 85 F1 | 	sub	objptr, ##36524
16ec4     3C 00 90 AD |  if_e	jmp	#LR__1910
16ec8     00 12 06 F6 | 	mov	arg01, #0
16ecc     80 F8 B0 FD | 	call	#__system___getiolock_0540
16ed0     FD 12 02 F6 | 	mov	arg01, result1
16ed4     38 9E B0 FD | 	call	#__system___lockmem
16ed8     86 01 00 FF 
16edc     C4 15 06 F6 | 	mov	arg02, ##@LR__5433
16ee0     00 12 06 F6 | 	mov	arg01, #0
16ee4     00 16 06 F6 | 	mov	arg03, #0
16ee8     18 AB B0 FD | 	call	#__system___basic_print_string
16eec     00 12 06 F6 | 	mov	arg01, #0
16ef0     5C F8 B0 FD | 	call	#__system___getiolock_0540
16ef4     FD 00 68 FC | 	wrlong	#0, result1
16ef8     27 12 06 F6 | 	mov	arg01, #39
16efc     68 59 B0 FD | 	call	#_printerror
16f00     B4 00 90 FD | 	jmp	#LR__1911
16f04                 | LR__1910
16f04     BC 41 BF FD | 	call	#_pop
16f08     FD 16 02 F6 | 	mov	arg03, result1
16f0c     FE 14 02 F6 | 	mov	arg02, result2
16f10     FF 12 02 F6 | 	mov	arg01, result3
16f14     0C 4E 05 F1 | 	add	fp, #12
16f18     A7 16 62 FC | 	wrlong	arg03, fp
16f1c     04 4E 05 F1 | 	add	fp, #4
16f20     A7 14 62 FC | 	wrlong	arg02, fp
16f24     04 4E 05 F1 | 	add	fp, #4
16f28     A7 12 62 FC | 	wrlong	arg01, fp
16f2c     14 4E 85 F1 | 	sub	fp, #20
16f30     90 41 BF FD | 	call	#_pop
16f34     FF 16 02 F6 | 	mov	arg03, result3
16f38     A7 FA 61 FC | 	wrlong	result1, fp
16f3c     04 4E 05 F1 | 	add	fp, #4
16f40     A7 FC 61 FC | 	wrlong	result2, fp
16f44     04 4E 05 F1 | 	add	fp, #4
16f48     A7 16 62 FC | 	wrlong	arg03, fp
16f4c     08 4E 85 F1 | 	sub	fp, #8
16f50     A7 12 02 F6 | 	mov	arg01, fp
16f54     3C E2 BF FD | 	call	#_converttoint
16f58     1C 4E 05 F1 | 	add	fp, #28
16f5c     A7 FA 61 FC | 	wrlong	result1, fp
16f60     10 4E 85 F1 | 	sub	fp, #16
16f64     A7 12 02 F6 | 	mov	arg01, fp
16f68     0C 4E 85 F1 | 	sub	fp, #12
16f6c     24 E2 BF FD | 	call	#_converttoint
16f70     FD 16 02 F6 | 	mov	arg03, result1
16f74     20 4E 05 F1 | 	add	fp, #32
16f78     A7 16 62 FC | 	wrlong	arg03, fp
16f7c     F2 12 02 FB | 	rdlong	arg01, objptr
16f80     04 4E 85 F1 | 	sub	fp, #4
16f84     A7 FE 01 FB | 	rdlong	result3, fp
16f88     FF 12 02 F1 | 	add	arg01, result3
16f8c     1C 4E 85 F1 | 	sub	fp, #28
16f90     0A 16 66 F0 | 	shl	arg03, #10
16f94     0B 13 02 F1 | 	add	arg01, arg03
16f98     08 5B B0 FD | 	call	#_pspeek
16f9c     FD FA E1 F8 | 	getbyte	result1, result1, #0
16fa0     A7 FA 61 FC | 	wrlong	result1, fp
16fa4     08 4E 05 F1 | 	add	fp, #8
16fa8     A7 3A 68 FC | 	wrlong	#29, fp
16fac     08 4E 85 F1 | 	sub	fp, #8
16fb0     A7 12 02 F6 | 	mov	arg01, fp
16fb4     A4 41 BF FD | 	call	#_push
16fb8                 | LR__1911
16fb8     A7 F0 03 F6 | 	mov	ptra, fp
16fbc     B2 00 A0 FD | 	call	#popregs_
16fc0                 | _do_getpixel_ret
16fc0     2D 00 64 FD | 	ret
16fc4                 | 
16fc4                 | ' 
16fc4                 | ' sub do_log
16fc4                 | _do_log
16fc4     01 4A 05 F6 | 	mov	COUNT_, #1
16fc8     A8 00 A0 FD | 	call	#pushregs_
16fcc     14 F0 07 F1 | 	add	ptra, #20
16fd0     4A 00 00 FF 
16fd4     B0 E4 05 F1 | 	add	objptr, ##38064
16fd8     F2 1E 02 FB | 	rdlong	local01, objptr
16fdc     0F 17 02 F6 | 	mov	arg03, local01
16fe0     01 16 66 F0 | 	shl	arg03, #1
16fe4     0F 17 02 F1 | 	add	arg03, local01
16fe8     02 16 66 F0 | 	shl	arg03, #2
16fec     03 00 00 FF 
16ff0     04 E4 85 F1 | 	sub	objptr, ##1540
16ff4     F2 16 02 F1 | 	add	arg03, objptr
16ff8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
16ffc     0C 4E 05 F1 | 	add	fp, #12
17000     A7 16 62 FC | 	wrlong	arg03, fp
17004                 | ' 
17004                 | ' numpar=compiledline(lineptr_e).result.uresult
17004                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
17004     0C 4E 85 F1 | 	sub	fp, #12
17008     47 00 00 FF 
1700c     AC E4 85 F1 | 	sub	objptr, ##36524
17010     0C 4E 05 51 |  if_ne	add	fp, #12
17014     A7 1E 02 5B |  if_ne	rdlong	local01, fp
17018     0C 4E 85 51 |  if_ne	sub	fp, #12
1701c     03 1E 16 52 |  if_ne	cmp	local01, #3 wc
17020     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1920
17024     00 12 06 F6 | 	mov	arg01, #0
17028     24 F7 B0 FD | 	call	#__system___getiolock_0540
1702c     FD 12 02 F6 | 	mov	arg01, result1
17030     DC 9C B0 FD | 	call	#__system___lockmem
17034     86 01 00 FF 
17038     CF 15 06 F6 | 	mov	arg02, ##@LR__5434
1703c     00 12 06 F6 | 	mov	arg01, #0
17040     00 16 06 F6 | 	mov	arg03, #0
17044     BC A9 B0 FD | 	call	#__system___basic_print_string
17048     00 12 06 F6 | 	mov	arg01, #0
1704c     00 F7 B0 FD | 	call	#__system___getiolock_0540
17050     FD 00 68 FC | 	wrlong	#0, result1
17054     27 12 06 F6 | 	mov	arg01, #39
17058     0C 58 B0 FD | 	call	#_printerror
1705c     D0 00 90 FD | 	jmp	#LR__1923
17060                 | LR__1920
17060                 | ' 
17060                 | ' if numpar=2 then 
17060     0C 4E 05 F1 | 	add	fp, #12
17064     A7 1E 02 FB | 	rdlong	local01, fp
17068     0C 4E 85 F1 | 	sub	fp, #12
1706c     02 1E 0E F2 | 	cmp	local01, #2 wz
17070     48 00 90 5D |  if_ne	jmp	#LR__1921
17074     4C 40 BF FD | 	call	#_pop
17078     FF 1E 02 F6 | 	mov	local01, result3
1707c     A7 FA 61 FC | 	wrlong	result1, fp
17080     04 4E 05 F1 | 	add	fp, #4
17084     A7 FC 61 FC | 	wrlong	result2, fp
17088     04 4E 05 F1 | 	add	fp, #4
1708c     A7 1E 62 FC | 	wrlong	local01, fp
17090     08 4E 85 F1 | 	sub	fp, #8
17094     A7 12 02 F6 | 	mov	arg01, fp
17098     B4 E1 BF FD | 	call	#_converttofloat
1709c     FD 14 02 F6 | 	mov	arg02, result1
170a0     FC 16 20 FF 
170a4     54 12 06 F6 | 	mov	arg01, ##1076754516
170a8     C4 D7 B0 FD | 	call	#__system____builtin_logbase
170ac     10 4E 05 F1 | 	add	fp, #16
170b0     A7 FA 61 FC | 	wrlong	result1, fp
170b4     10 4E 85 F1 | 	sub	fp, #16
170b8     10 00 90 FD | 	jmp	#LR__1922
170bc                 | LR__1921
170bc     10 4E 05 F1 | 	add	fp, #16
170c0     00 C0 9F FF 
170c4     A7 00 68 FC | 	wrlong	##1065353216, fp
170c8     10 4E 85 F1 | 	sub	fp, #16
170cc                 | LR__1922
170cc     F4 3F BF FD | 	call	#_pop
170d0     FF 1E 02 F6 | 	mov	local01, result3
170d4     A7 FA 61 FC | 	wrlong	result1, fp
170d8     04 4E 05 F1 | 	add	fp, #4
170dc     A7 FC 61 FC | 	wrlong	result2, fp
170e0     04 4E 05 F1 | 	add	fp, #4
170e4     A7 1E 62 FC | 	wrlong	local01, fp
170e8     08 4E 85 F1 | 	sub	fp, #8
170ec     A7 12 02 F6 | 	mov	arg01, fp
170f0     5C E1 BF FD | 	call	#_converttofloat
170f4     FD 14 02 F6 | 	mov	arg02, result1
170f8     FC 16 20 FF 
170fc     54 12 06 F6 | 	mov	arg01, ##1076754516
17100     6C D7 B0 FD | 	call	#__system____builtin_logbase
17104     FD 12 02 F6 | 	mov	arg01, result1
17108     10 4E 05 F1 | 	add	fp, #16
1710c     A7 14 02 FB | 	rdlong	arg02, fp
17110     10 4E 85 F1 | 	sub	fp, #16
17114     B0 C9 B0 FD | 	call	#__system___float_div
17118     A7 FA 61 FC | 	wrlong	result1, fp
1711c     08 4E 05 F1 | 	add	fp, #8
17120     A7 3C 68 FC | 	wrlong	#30, fp
17124     08 4E 85 F1 | 	sub	fp, #8
17128     A7 12 02 F6 | 	mov	arg01, fp
1712c     2C 40 BF FD | 	call	#_push
17130                 | LR__1923
17130     A7 F0 03 F6 | 	mov	ptra, fp
17134     B2 00 A0 FD | 	call	#popregs_
17138                 | _do_log_ret
17138     2D 00 64 FD | 	ret
1713c                 | 
1713c                 | ' 
1713c                 | ' sub do_defsprite
1713c                 | _do_defsprite
1713c     07 4A 05 F6 | 	mov	COUNT_, #7
17140     A8 00 A0 FD | 	call	#pushregs_
17144     60 F0 07 F1 | 	add	ptra, #96
17148     78 3F BF FD | 	call	#_pop
1714c     FD 16 02 F6 | 	mov	arg03, result1
17150     FE 14 02 F6 | 	mov	arg02, result2
17154     FF 12 02 F6 | 	mov	arg01, result3
17158     30 4E 05 F1 | 	add	fp, #48
1715c     A7 16 62 FC | 	wrlong	arg03, fp
17160     04 4E 05 F1 | 	add	fp, #4
17164     A7 14 62 FC | 	wrlong	arg02, fp
17168     04 4E 05 F1 | 	add	fp, #4
1716c     A7 12 62 FC | 	wrlong	arg01, fp
17170     38 4E 85 F1 | 	sub	fp, #56
17174     4C 3F BF FD | 	call	#_pop
17178     FD 16 02 F6 | 	mov	arg03, result1
1717c     FE 14 02 F6 | 	mov	arg02, result2
17180     FF 12 02 F6 | 	mov	arg01, result3
17184     24 4E 05 F1 | 	add	fp, #36
17188     A7 16 62 FC | 	wrlong	arg03, fp
1718c     04 4E 05 F1 | 	add	fp, #4
17190     A7 14 62 FC | 	wrlong	arg02, fp
17194     04 4E 05 F1 | 	add	fp, #4
17198     A7 12 62 FC | 	wrlong	arg01, fp
1719c     2C 4E 85 F1 | 	sub	fp, #44
171a0     20 3F BF FD | 	call	#_pop
171a4     FD 16 02 F6 | 	mov	arg03, result1
171a8     FE 14 02 F6 | 	mov	arg02, result2
171ac     FF 12 02 F6 | 	mov	arg01, result3
171b0     18 4E 05 F1 | 	add	fp, #24
171b4     A7 16 62 FC | 	wrlong	arg03, fp
171b8     04 4E 05 F1 | 	add	fp, #4
171bc     A7 14 62 FC | 	wrlong	arg02, fp
171c0     04 4E 05 F1 | 	add	fp, #4
171c4     A7 12 62 FC | 	wrlong	arg01, fp
171c8     20 4E 85 F1 | 	sub	fp, #32
171cc     F4 3E BF FD | 	call	#_pop
171d0     FD 16 02 F6 | 	mov	arg03, result1
171d4     FE 14 02 F6 | 	mov	arg02, result2
171d8     FF 12 02 F6 | 	mov	arg01, result3
171dc     0C 4E 05 F1 | 	add	fp, #12
171e0     A7 16 62 FC | 	wrlong	arg03, fp
171e4     04 4E 05 F1 | 	add	fp, #4
171e8     A7 14 62 FC | 	wrlong	arg02, fp
171ec     04 4E 05 F1 | 	add	fp, #4
171f0     A7 12 62 FC | 	wrlong	arg01, fp
171f4     14 4E 85 F1 | 	sub	fp, #20
171f8     C8 3E BF FD | 	call	#_pop
171fc     FF 16 02 F6 | 	mov	arg03, result3
17200     A7 FA 61 FC | 	wrlong	result1, fp
17204     04 4E 05 F1 | 	add	fp, #4
17208     A7 FC 61 FC | 	wrlong	result2, fp
1720c     04 4E 05 F1 | 	add	fp, #4
17210     A7 16 62 FC | 	wrlong	arg03, fp
17214     08 4E 85 F1 | 	sub	fp, #8
17218     A7 12 02 F6 | 	mov	arg01, fp
1721c     74 DF BF FD | 	call	#_converttoint
17220     3C 4E 05 F1 | 	add	fp, #60
17224     A7 FA 61 FC | 	wrlong	result1, fp
17228     30 4E 85 F1 | 	sub	fp, #48
1722c     A7 12 02 F6 | 	mov	arg01, fp
17230     0C 4E 85 F1 | 	sub	fp, #12
17234     5C DF BF FD | 	call	#_converttoint
17238     40 4E 05 F1 | 	add	fp, #64
1723c     A7 FA 61 FC | 	wrlong	result1, fp
17240     28 4E 85 F1 | 	sub	fp, #40
17244     A7 12 02 F6 | 	mov	arg01, fp
17248     18 4E 85 F1 | 	sub	fp, #24
1724c     44 DF BF FD | 	call	#_converttoint
17250     44 4E 05 F1 | 	add	fp, #68
17254     A7 FA 61 FC | 	wrlong	result1, fp
17258     20 4E 85 F1 | 	sub	fp, #32
1725c     A7 12 02 F6 | 	mov	arg01, fp
17260     24 4E 85 F1 | 	sub	fp, #36
17264     2C DF BF FD | 	call	#_converttoint
17268     48 4E 05 F1 | 	add	fp, #72
1726c     A7 FA 61 FC | 	wrlong	result1, fp
17270     18 4E 85 F1 | 	sub	fp, #24
17274     A7 12 02 F6 | 	mov	arg01, fp
17278     30 4E 85 F1 | 	sub	fp, #48
1727c     14 DF BF FD | 	call	#_converttoint
17280     4C 4E 05 F1 | 	add	fp, #76
17284     A7 FA 61 FC | 	wrlong	result1, fp
17288                 | ' 
17288                 | ' t5=pop()
17288                 | ' t4=pop()
17288                 | ' t3=pop()
17288                 | ' t2=pop()
17288                 | ' t1=pop()
17288                 | ' 
17288                 | ' ' do convert, defsprite is not a racing command
17288                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
17288                 | '  
17288                 | ' ' todo: check parameters for linits
17288                 | ' if sprite(a1)<> nil then delete(sprite(a1))
17288     10 4E 85 F1 | 	sub	fp, #16
1728c     A7 16 02 FB | 	rdlong	arg03, fp
17290     3C 4E 85 F1 | 	sub	fp, #60
17294     02 16 66 F0 | 	shl	arg03, #2
17298     59 00 00 FF 
1729c     9C E5 05 F1 | 	add	objptr, ##45980
172a0     F2 16 02 F1 | 	add	arg03, objptr
172a4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
172a8     59 00 00 FF 
172ac     9C E5 85 F1 | 	sub	objptr, ##45980
172b0     2C 00 90 AD |  if_e	jmp	#LR__1930
172b4     3C 4E 05 F1 | 	add	fp, #60
172b8     A7 16 02 FB | 	rdlong	arg03, fp
172bc     3C 4E 85 F1 | 	sub	fp, #60
172c0     02 16 66 F0 | 	shl	arg03, #2
172c4     59 00 00 FF 
172c8     9C E5 05 F1 | 	add	objptr, ##45980
172cc     F2 16 02 F1 | 	add	arg03, objptr
172d0     0B 13 02 FB | 	rdlong	arg01, arg03
172d4     59 00 00 FF 
172d8     9C E5 85 F1 | 	sub	objptr, ##45980
172dc     24 DA B0 FD | 	call	#__system___gc_free
172e0                 | LR__1930
172e0     3C 4E 05 F1 | 	add	fp, #60
172e4     A7 1E 02 FB | 	rdlong	local01, fp
172e8     0C 4E 05 F1 | 	add	fp, #12
172ec     A7 16 02 FB | 	rdlong	arg03, fp
172f0     04 4E 05 F1 | 	add	fp, #4
172f4     A7 14 02 FB | 	rdlong	arg02, fp
172f8     0A 17 02 FD | 	qmul	arg03, arg02
172fc     02 1E 66 F0 | 	shl	local01, #2
17300     59 00 00 FF 
17304     9C E5 05 F1 | 	add	objptr, ##45980
17308     F2 1E 02 F1 | 	add	local01, objptr
1730c     4C 4E 85 F1 | 	sub	fp, #76
17310     59 00 00 FF 
17314     9C E5 85 F1 | 	sub	objptr, ##45980
17318     18 12 62 FD | 	getqx	arg01
1731c     A8 D8 B0 FD | 	call	#__system___gc_alloc_managed
17320     0F FB 61 FC | 	wrlong	result1, local01
17324                 | ' for y=a3 to a3+a5-1
17324     44 4E 05 F1 | 	add	fp, #68
17328     A7 20 02 FB | 	rdlong	local02, fp
1732c     0C 4E 05 F1 | 	add	fp, #12
17330     A7 20 62 FC | 	wrlong	local02, fp
17334     0C 4E 85 F1 | 	sub	fp, #12
17338     A7 22 02 FB | 	rdlong	local03, fp
1733c     08 4E 05 F1 | 	add	fp, #8
17340     A7 24 02 FB | 	rdlong	local04, fp
17344     4C 4E 85 F1 | 	sub	fp, #76
17348     12 23 02 F1 | 	add	local03, local04
1734c                 | LR__1931
1734c     50 4E 05 F1 | 	add	fp, #80
17350     A7 20 02 FB | 	rdlong	local02, fp
17354     50 4E 85 F1 | 	sub	fp, #80
17358     11 21 52 F2 | 	cmps	local02, local03 wc
1735c     F4 00 90 3D |  if_ae	jmp	#LR__1934
17360                 | '   for x=a2 to a4+a2-1
17360     40 4E 05 F1 | 	add	fp, #64
17364     A7 1E 02 FB | 	rdlong	local01, fp
17368     14 4E 05 F1 | 	add	fp, #20
1736c     A7 1E 62 FC | 	wrlong	local01, fp
17370     0C 4E 85 F1 | 	sub	fp, #12
17374     A7 26 02 FB | 	rdlong	local05, fp
17378     08 4E 85 F1 | 	sub	fp, #8
1737c     A7 28 02 FB | 	rdlong	local06, fp
17380     40 4E 85 F1 | 	sub	fp, #64
17384     14 27 02 F1 | 	add	local05, local06
17388                 | LR__1932
17388     54 4E 05 F1 | 	add	fp, #84
1738c     A7 1E 02 FB | 	rdlong	local01, fp
17390     54 4E 85 F1 | 	sub	fp, #84
17394     13 1F 52 F2 | 	cmps	local01, local05 wc
17398     A0 00 90 3D |  if_ae	jmp	#LR__1933
1739c     3C 4E 05 F1 | 	add	fp, #60
173a0     A7 28 02 FB | 	rdlong	local06, fp
173a4     18 4E 05 F1 | 	add	fp, #24
173a8     A7 24 02 FB | 	rdlong	local04, fp
173ac     14 4E 85 F1 | 	sub	fp, #20
173b0     A7 20 02 FB | 	rdlong	local02, fp
173b4     10 4E 05 F1 | 	add	fp, #16
173b8     A7 1E 02 FB | 	rdlong	local01, fp
173bc     0F 17 02 F6 | 	mov	arg03, local01
173c0     0C 4E 85 F1 | 	sub	fp, #12
173c4     A7 14 02 FB | 	rdlong	arg02, fp
173c8     0A 17 82 F1 | 	sub	arg03, arg02
173cc     04 4E 05 F1 | 	add	fp, #4
173d0     A7 14 02 FB | 	rdlong	arg02, fp
173d4     0A 17 02 FD | 	qmul	arg03, arg02
173d8     02 28 66 F0 | 	shl	local06, #2
173dc     59 00 00 FF 
173e0     9C E5 05 F1 | 	add	objptr, ##45980
173e4     F2 28 02 F1 | 	add	local06, objptr
173e8     14 29 02 FB | 	rdlong	local06, local06
173ec     12 2B 02 F6 | 	mov	local07, local04
173f0     10 2B 82 F1 | 	sub	local07, local02
173f4     59 00 00 FF 
173f8     9C E5 85 F1 | 	sub	objptr, ##45980
173fc     F2 12 02 FB | 	rdlong	arg01, objptr
17400     12 13 02 F1 | 	add	arg01, local04
17404     48 4E 85 F1 | 	sub	fp, #72
17408     0A 1E 66 F0 | 	shl	local01, #10
1740c     0F 13 02 F1 | 	add	arg01, local01
17410     18 24 62 FD | 	getqx	local04
17414     12 2B 02 F1 | 	add	local07, local04
17418     14 2B 02 F1 | 	add	local07, local06
1741c     84 56 B0 FD | 	call	#_pspeek
17420     15 FB 41 FC | 	wrbyte	result1, local07
17424     54 4E 05 F1 | 	add	fp, #84
17428     A7 2A 02 FB | 	rdlong	local07, fp
1742c     01 2A 06 F1 | 	add	local07, #1
17430     A7 2A 62 FC | 	wrlong	local07, fp
17434     54 4E 85 F1 | 	sub	fp, #84
17438     4C FF 9F FD | 	jmp	#LR__1932
1743c                 | LR__1933
1743c     50 4E 05 F1 | 	add	fp, #80
17440     A7 2A 02 FB | 	rdlong	local07, fp
17444     01 2A 06 F1 | 	add	local07, #1
17448     A7 2A 62 FC | 	wrlong	local07, fp
1744c     50 4E 85 F1 | 	sub	fp, #80
17450     F8 FE 9F FD | 	jmp	#LR__1931
17454                 | LR__1934
17454     3C 4E 05 F1 | 	add	fp, #60
17458     A7 2A 02 FB | 	rdlong	local07, fp
1745c     15 13 02 F6 | 	mov	arg01, local07
17460     3C 4E 85 F1 | 	sub	fp, #60
17464     02 2A 66 F0 | 	shl	local07, #2
17468     59 00 00 FF 
1746c     9C E5 05 F1 | 	add	objptr, ##45980
17470     F2 2A 02 F1 | 	add	local07, objptr
17474     15 15 02 FB | 	rdlong	arg02, local07
17478     59 00 00 FF 
1747c     9C E5 85 F1 | 	sub	objptr, ##45980
17480     34 74 B0 FD | 	call	#_hg010b_spin2_setspriteptr
17484     3C 4E 05 F1 | 	add	fp, #60
17488     A7 12 02 FB | 	rdlong	arg01, fp
1748c     0C 4E 05 F1 | 	add	fp, #12
17490     A7 14 02 FB | 	rdlong	arg02, fp
17494     04 4E 05 F1 | 	add	fp, #4
17498     A7 16 02 FB | 	rdlong	arg03, fp
1749c     4C 4E 85 F1 | 	sub	fp, #76
174a0     A4 74 B0 FD | 	call	#_hg010b_spin2_setspritesize
174a4     A7 F0 03 F6 | 	mov	ptra, fp
174a8     B2 00 A0 FD | 	call	#popregs_
174ac                 | _do_defsprite_ret
174ac     2D 00 64 FD | 	ret
174b0                 | 
174b0                 | ' 
174b0                 | ' sub do_sprite
174b0                 | _do_sprite
174b0     00 4A 05 F6 | 	mov	COUNT_, #0
174b4     A8 00 A0 FD | 	call	#pushregs_
174b8     30 F0 07 F1 | 	add	ptra, #48
174bc     04 3C BF FD | 	call	#_pop
174c0     FD 16 02 F6 | 	mov	arg03, result1
174c4     FE 14 02 F6 | 	mov	arg02, result2
174c8     FF 12 02 F6 | 	mov	arg01, result3
174cc     18 4E 05 F1 | 	add	fp, #24
174d0     A7 16 62 FC | 	wrlong	arg03, fp
174d4     04 4E 05 F1 | 	add	fp, #4
174d8     A7 14 62 FC | 	wrlong	arg02, fp
174dc     04 4E 05 F1 | 	add	fp, #4
174e0     A7 12 62 FC | 	wrlong	arg01, fp
174e4     20 4E 85 F1 | 	sub	fp, #32
174e8     D8 3B BF FD | 	call	#_pop
174ec     FD 16 02 F6 | 	mov	arg03, result1
174f0     FE 14 02 F6 | 	mov	arg02, result2
174f4     FF 12 02 F6 | 	mov	arg01, result3
174f8     0C 4E 05 F1 | 	add	fp, #12
174fc     A7 16 62 FC | 	wrlong	arg03, fp
17500     04 4E 05 F1 | 	add	fp, #4
17504     A7 14 62 FC | 	wrlong	arg02, fp
17508     04 4E 05 F1 | 	add	fp, #4
1750c     A7 12 62 FC | 	wrlong	arg01, fp
17510     14 4E 85 F1 | 	sub	fp, #20
17514     AC 3B BF FD | 	call	#_pop
17518     FF 16 02 F6 | 	mov	arg03, result3
1751c     A7 FA 61 FC | 	wrlong	result1, fp
17520     04 4E 05 F1 | 	add	fp, #4
17524     A7 FC 61 FC | 	wrlong	result2, fp
17528     04 4E 05 F1 | 	add	fp, #4
1752c     A7 16 62 FC | 	wrlong	arg03, fp
17530     08 4E 85 F1 | 	sub	fp, #8
17534     A7 12 02 F6 | 	mov	arg01, fp
17538     58 DC BF FD | 	call	#_converttoint
1753c     24 4E 05 F1 | 	add	fp, #36
17540     A7 FA 61 FC | 	wrlong	result1, fp
17544     18 4E 85 F1 | 	sub	fp, #24
17548     A7 12 02 F6 | 	mov	arg01, fp
1754c     0C 4E 85 F1 | 	sub	fp, #12
17550     40 DC BF FD | 	call	#_converttoint
17554     28 4E 05 F1 | 	add	fp, #40
17558     A7 FA 61 FC | 	wrlong	result1, fp
1755c     10 4E 85 F1 | 	sub	fp, #16
17560     A7 12 02 F6 | 	mov	arg01, fp
17564     18 4E 85 F1 | 	sub	fp, #24
17568     28 DC BF FD | 	call	#_converttoint
1756c     2C 4E 05 F1 | 	add	fp, #44
17570     A7 FA 61 FC | 	wrlong	result1, fp
17574     08 4E 85 F1 | 	sub	fp, #8
17578     A7 12 02 FB | 	rdlong	arg01, fp
1757c     04 4E 05 F1 | 	add	fp, #4
17580     A7 14 02 FB | 	rdlong	arg02, fp
17584     FD 16 02 F6 | 	mov	arg03, result1
17588     28 4E 85 F1 | 	sub	fp, #40
1758c     50 73 B0 FD | 	call	#_hg010b_spin2_setspritepos
17590     A7 F0 03 F6 | 	mov	ptra, fp
17594     B2 00 A0 FD | 	call	#popregs_
17598                 | _do_sprite_ret
17598     2D 00 64 FD | 	ret
1759c                 | 
1759c                 | ' 
1759c                 | ' sub do_mousex
1759c                 | _do_mousex
1759c     00 4A 05 F6 | 	mov	COUNT_, #0
175a0     A8 00 A0 FD | 	call	#pushregs_
175a4     0C F0 07 F1 | 	add	ptra, #12
175a8     08 4E 05 F1 | 	add	fp, #8
175ac     A7 3A 68 FC | 	wrlong	#29, fp
175b0     08 4E 85 F1 | 	sub	fp, #8
175b4     59 00 00 FF 
175b8     54 E5 05 F1 | 	add	objptr, ##45908
175bc     F2 12 02 FB | 	rdlong	arg01, objptr
175c0     59 00 00 FF 
175c4     54 E5 85 F1 | 	sub	objptr, ##45908
175c8     A7 12 62 FC | 	wrlong	arg01, fp
175cc     A7 12 02 F6 | 	mov	arg01, fp
175d0     88 3B BF FD | 	call	#_push
175d4     A7 F0 03 F6 | 	mov	ptra, fp
175d8     B2 00 A0 FD | 	call	#popregs_
175dc                 | _do_mousex_ret
175dc     2D 00 64 FD | 	ret
175e0                 | 
175e0                 | ' 
175e0                 | ' sub do_mousey
175e0                 | _do_mousey
175e0     00 4A 05 F6 | 	mov	COUNT_, #0
175e4     A8 00 A0 FD | 	call	#pushregs_
175e8     0C F0 07 F1 | 	add	ptra, #12
175ec     08 4E 05 F1 | 	add	fp, #8
175f0     A7 3A 68 FC | 	wrlong	#29, fp
175f4     08 4E 85 F1 | 	sub	fp, #8
175f8     59 00 00 FF 
175fc     58 E5 05 F1 | 	add	objptr, ##45912
17600     F2 12 02 FB | 	rdlong	arg01, objptr
17604     59 00 00 FF 
17608     58 E5 85 F1 | 	sub	objptr, ##45912
1760c     A7 12 62 FC | 	wrlong	arg01, fp
17610     A7 12 02 F6 | 	mov	arg01, fp
17614     44 3B BF FD | 	call	#_push
17618     A7 F0 03 F6 | 	mov	ptra, fp
1761c     B2 00 A0 FD | 	call	#popregs_
17620                 | _do_mousey_ret
17620     2D 00 64 FD | 	ret
17624                 | 
17624                 | ' 
17624                 | ' sub do_mousew
17624                 | _do_mousew
17624     00 4A 05 F6 | 	mov	COUNT_, #0
17628     A8 00 A0 FD | 	call	#pushregs_
1762c     0C F0 07 F1 | 	add	ptra, #12
17630     08 4E 05 F1 | 	add	fp, #8
17634     A7 38 68 FC | 	wrlong	#28, fp
17638     08 4E 85 F1 | 	sub	fp, #8
1763c     59 00 00 FF 
17640     60 E5 05 F1 | 	add	objptr, ##45920
17644     F2 12 02 FB | 	rdlong	arg01, objptr
17648     59 00 00 FF 
1764c     60 E5 85 F1 | 	sub	objptr, ##45920
17650     A7 12 62 FC | 	wrlong	arg01, fp
17654     A7 12 02 F6 | 	mov	arg01, fp
17658     00 3B BF FD | 	call	#_push
1765c     A7 F0 03 F6 | 	mov	ptra, fp
17660     B2 00 A0 FD | 	call	#popregs_
17664                 | _do_mousew_ret
17664     2D 00 64 FD | 	ret
17668                 | 
17668                 | ' 
17668                 | ' sub do_mousek
17668                 | _do_mousek
17668     00 4A 05 F6 | 	mov	COUNT_, #0
1766c     A8 00 A0 FD | 	call	#pushregs_
17670     0C F0 07 F1 | 	add	ptra, #12
17674     08 4E 05 F1 | 	add	fp, #8
17678     A7 3A 68 FC | 	wrlong	#29, fp
1767c     08 4E 85 F1 | 	sub	fp, #8
17680     59 00 00 FF 
17684     5C E5 05 F1 | 	add	objptr, ##45916
17688     F2 12 02 FB | 	rdlong	arg01, objptr
1768c     59 00 00 FF 
17690     5C E5 85 F1 | 	sub	objptr, ##45916
17694     A7 12 62 FC | 	wrlong	arg01, fp
17698     A7 12 02 F6 | 	mov	arg01, fp
1769c     BC 3A BF FD | 	call	#_push
176a0     A7 F0 03 F6 | 	mov	ptra, fp
176a4     B2 00 A0 FD | 	call	#popregs_
176a8                 | _do_mousek_ret
176a8     2D 00 64 FD | 	ret
176ac                 | 
176ac                 | ' 
176ac                 | ' 
176ac                 | ' sub do_rdpin
176ac                 | _do_rdpin
176ac     00 4A 05 F6 | 	mov	COUNT_, #0
176b0     A8 00 A0 FD | 	call	#pushregs_
176b4     0C F0 07 F1 | 	add	ptra, #12
176b8     08 3A BF FD | 	call	#_pop
176bc     A7 FA 61 FC | 	wrlong	result1, fp
176c0     04 4E 05 F1 | 	add	fp, #4
176c4     A7 FC 61 FC | 	wrlong	result2, fp
176c8     04 4E 05 F1 | 	add	fp, #4
176cc     A7 FE 61 FC | 	wrlong	result3, fp
176d0     08 4E 85 F1 | 	sub	fp, #8
176d4     A7 12 02 F6 | 	mov	arg01, fp
176d8     B8 DA BF FD | 	call	#_converttoint
176dc     FD FA 89 FA | 	rdpin	result1, result1
176e0     5A 00 00 FF 
176e4     88 E4 05 F1 | 	add	objptr, ##46216
176e8     F2 FA 61 FC | 	wrlong	result1, objptr
176ec     5A 00 00 FF 
176f0     88 E4 85 F1 | 	sub	objptr, ##46216
176f4     08 4E 05 F1 | 	add	fp, #8
176f8     A7 3A 68 FC | 	wrlong	#29, fp
176fc     08 4E 85 F1 | 	sub	fp, #8
17700     A7 08 68 FC | 	wrlong	#4, fp
17704     A7 12 02 F6 | 	mov	arg01, fp
17708     50 3A BF FD | 	call	#_push
1770c     A7 F0 03 F6 | 	mov	ptra, fp
17710     B2 00 A0 FD | 	call	#popregs_
17714                 | _do_rdpin_ret
17714     2D 00 64 FD | 	ret
17718                 | 
17718                 | ' 
17718                 | ' sub do_rqpin
17718                 | _do_rqpin
17718     00 4A 05 F6 | 	mov	COUNT_, #0
1771c     A8 00 A0 FD | 	call	#pushregs_
17720     0C F0 07 F1 | 	add	ptra, #12
17724     9C 39 BF FD | 	call	#_pop
17728     A7 FA 61 FC | 	wrlong	result1, fp
1772c     04 4E 05 F1 | 	add	fp, #4
17730     A7 FC 61 FC | 	wrlong	result2, fp
17734     04 4E 05 F1 | 	add	fp, #4
17738     A7 FE 61 FC | 	wrlong	result3, fp
1773c     08 4E 85 F1 | 	sub	fp, #8
17740     A7 12 02 F6 | 	mov	arg01, fp
17744     4C DA BF FD | 	call	#_converttoint
17748     FD 12 02 F6 | 	mov	arg01, result1
1774c     00 FA 05 F6 | 	mov	result1, #0
17750     09 FB 81 FA | 	rqpin	result1, arg01
17754     5A 00 00 FF 
17758     88 E4 05 F1 | 	add	objptr, ##46216
1775c     F2 FA 61 FC | 	wrlong	result1, objptr
17760     5A 00 00 FF 
17764     88 E4 85 F1 | 	sub	objptr, ##46216
17768     08 4E 05 F1 | 	add	fp, #8
1776c     A7 3A 68 FC | 	wrlong	#29, fp
17770     08 4E 85 F1 | 	sub	fp, #8
17774     A7 08 68 FC | 	wrlong	#4, fp
17778     A7 12 02 F6 | 	mov	arg01, fp
1777c     DC 39 BF FD | 	call	#_push
17780     A7 F0 03 F6 | 	mov	ptra, fp
17784     B2 00 A0 FD | 	call	#popregs_
17788                 | _do_rqpin_ret
17788     2D 00 64 FD | 	ret
1778c                 | 
1778c                 | ' 
1778c                 | ' sub do_pinread
1778c                 | _do_pinread
1778c     00 4A 05 F6 | 	mov	COUNT_, #0
17790     A8 00 A0 FD | 	call	#pushregs_
17794     0C F0 07 F1 | 	add	ptra, #12
17798     28 39 BF FD | 	call	#_pop
1779c     A7 FA 61 FC | 	wrlong	result1, fp
177a0     04 4E 05 F1 | 	add	fp, #4
177a4     A7 FC 61 FC | 	wrlong	result2, fp
177a8     04 4E 05 F1 | 	add	fp, #4
177ac     A7 FE 61 FC | 	wrlong	result3, fp
177b0     08 4E 85 F1 | 	sub	fp, #8
177b4     A7 12 02 F6 | 	mov	arg01, fp
177b8     D8 D9 BF FD | 	call	#_converttoint
177bc     FD 12 02 F6 | 	mov	arg01, result1
177c0     20 12 CE F7 | 	test	arg01, #32 wz
177c4     FF FB 01 56 |  if_ne	mov	result1, inb
177c8     FE FB 01 A6 |  if_e	mov	result1, ina
177cc     09 FB 41 F0 | 	shr	result1, arg01
177d0     06 12 46 F0 | 	shr	arg01, #6
177d4     09 FB 41 F7 | 	zerox	result1, arg01
177d8     5A 00 00 FF 
177dc     88 E4 05 F1 | 	add	objptr, ##46216
177e0     F2 FA 61 FC | 	wrlong	result1, objptr
177e4     5A 00 00 FF 
177e8     88 E4 85 F1 | 	sub	objptr, ##46216
177ec     08 4E 05 F1 | 	add	fp, #8
177f0     A7 3A 68 FC | 	wrlong	#29, fp
177f4     08 4E 85 F1 | 	sub	fp, #8
177f8     A7 08 68 FC | 	wrlong	#4, fp
177fc     A7 12 02 F6 | 	mov	arg01, fp
17800     58 39 BF FD | 	call	#_push
17804     A7 F0 03 F6 | 	mov	ptra, fp
17808     B2 00 A0 FD | 	call	#popregs_
1780c                 | _do_pinread_ret
1780c     2D 00 64 FD | 	ret
17810                 | 
17810                 | ' 
17810                 | ' sub do_gettime
17810                 | _do_gettime
17810     02 4A 05 F6 | 	mov	COUNT_, #2
17814     A8 00 A0 FD | 	call	#pushregs_
17818     14 F0 07 F1 | 	add	ptra, #20
1781c                 | ' 
1781c                 | ' const asm 
1781c     1A 1E 72 FD | 	getct	local01 wc
17820     1A 20 62 FD | 	getct	local02
17824                 | ' 
17824                 | ' return hi1, lo1
17824     10 FD 01 F6 | 	mov	result2, local02
17828     A7 1E 62 FC | 	wrlong	local01, fp
1782c     04 4E 05 F1 | 	add	fp, #4
17830     A7 FC 61 FC | 	wrlong	result2, fp
17834     0C 4E 05 F1 | 	add	fp, #12
17838     A7 3A 68 FC | 	wrlong	#29, fp
1783c     0C 4E 85 F1 | 	sub	fp, #12
17840     A7 12 02 FB | 	rdlong	arg01, fp
17844     04 4E 05 F1 | 	add	fp, #4
17848     A7 12 62 FC | 	wrlong	arg01, fp
1784c     08 4E 85 F1 | 	sub	fp, #8
17850     A7 12 02 FB | 	rdlong	arg01, fp
17854     0C 4E 05 F1 | 	add	fp, #12
17858     A7 12 62 FC | 	wrlong	arg01, fp
1785c     04 4E 85 F1 | 	sub	fp, #4
17860     A7 12 02 F6 | 	mov	arg01, fp
17864     08 4E 85 F1 | 	sub	fp, #8
17868     F0 38 BF FD | 	call	#_push
1786c     A7 F0 03 F6 | 	mov	ptra, fp
17870     B2 00 A0 FD | 	call	#popregs_
17874                 | _do_gettime_ret
17874     2D 00 64 FD | 	ret
17878                 | 
17878                 | '    
17878                 | ' 
17878                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
17878                 | ' 
17878                 | ' '' ----------------------------- Clear the screen
17878                 | ' 
17878                 | ' sub do_cls
17878                 | _do_cls
17878     37 00 00 FF 
1787c     6C E4 05 F1 | 	add	objptr, ##28268
17880     F2 12 02 FB | 	rdlong	arg01, objptr
17884     04 E4 85 F1 | 	sub	objptr, #4
17888     F2 14 02 FB | 	rdlong	arg02, objptr
1788c     37 00 00 FF 
17890     68 E4 85 F1 | 	sub	objptr, ##28264
17894     D0 7D B0 FD | 	call	#_hg010b_spin2_cls
17898     37 00 00 FF 
1789c     6C E4 05 F1 | 	add	objptr, ##28268
178a0     F2 14 02 FB | 	rdlong	arg02, objptr
178a4     14 E4 85 F1 | 	sub	objptr, #20
178a8     F2 14 62 FC | 	wrlong	arg02, objptr
178ac     37 00 00 FF 
178b0     58 E4 85 F1 | 	sub	objptr, ##28248
178b4                 | _do_cls_ret
178b4     2D 00 64 FD | 	ret
178b8                 | 
178b8                 | ' 
178b8                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
178b8                 | ' 
178b8                 | ' sub do_color
178b8                 | _do_color
178b8     03 4A 05 F6 | 	mov	COUNT_, #3
178bc     A8 00 A0 FD | 	call	#pushregs_
178c0     00 38 BF FD | 	call	#_pop
178c4     FD 1E 02 F6 | 	mov	local01, result1
178c8     FE 20 02 F6 | 	mov	local02, result2
178cc     FF 22 02 F6 | 	mov	local03, result3
178d0     37 00 00 FF 
178d4     58 E4 05 F1 | 	add	objptr, ##28248
178d8     F2 1E 62 FC | 	wrlong	local01, objptr
178dc     37 00 00 FF 
178e0     58 E4 85 F1 | 	sub	objptr, ##28248
178e4     A7 F0 03 F6 | 	mov	ptra, fp
178e8     B2 00 A0 FD | 	call	#popregs_
178ec                 | _do_color_ret
178ec     2D 00 64 FD | 	ret
178f0                 | 
178f0                 | ' 
178f0                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
178f0                 | ' 
178f0                 | ' sub do_plot
178f0                 | _do_plot
178f0     00 4A 05 F6 | 	mov	COUNT_, #0
178f4     A8 00 A0 FD | 	call	#pushregs_
178f8     20 F0 07 F1 | 	add	ptra, #32
178fc     C4 37 BF FD | 	call	#_pop
17900     FD 16 02 F6 | 	mov	arg03, result1
17904     FE 14 02 F6 | 	mov	arg02, result2
17908     FF 12 02 F6 | 	mov	arg01, result3
1790c     0C 4E 05 F1 | 	add	fp, #12
17910     A7 16 62 FC | 	wrlong	arg03, fp
17914     04 4E 05 F1 | 	add	fp, #4
17918     A7 14 62 FC | 	wrlong	arg02, fp
1791c     04 4E 05 F1 | 	add	fp, #4
17920     A7 12 62 FC | 	wrlong	arg01, fp
17924     14 4E 85 F1 | 	sub	fp, #20
17928     98 37 BF FD | 	call	#_pop
1792c     FF 16 02 F6 | 	mov	arg03, result3
17930     A7 FA 61 FC | 	wrlong	result1, fp
17934     04 4E 05 F1 | 	add	fp, #4
17938     A7 FC 61 FC | 	wrlong	result2, fp
1793c     04 4E 05 F1 | 	add	fp, #4
17940     A7 16 62 FC | 	wrlong	arg03, fp
17944     08 4E 85 F1 | 	sub	fp, #8
17948     A7 12 02 F6 | 	mov	arg01, fp
1794c     44 D8 BF FD | 	call	#_converttoint
17950     18 4E 05 F1 | 	add	fp, #24
17954     A7 FA 61 FC | 	wrlong	result1, fp
17958     0C 4E 85 F1 | 	sub	fp, #12
1795c     A7 12 02 F6 | 	mov	arg01, fp
17960     0C 4E 85 F1 | 	sub	fp, #12
17964     2C D8 BF FD | 	call	#_converttoint
17968     1C 4E 05 F1 | 	add	fp, #28
1796c     A7 FA 61 FC | 	wrlong	result1, fp
17970     04 4E 85 F1 | 	sub	fp, #4
17974     A7 16 02 FB | 	rdlong	arg03, fp
17978     37 00 00 FF 
1797c     5C E4 05 F1 | 	add	objptr, ##28252
17980     F2 16 62 FC | 	wrlong	arg03, objptr
17984     04 4E 05 F1 | 	add	fp, #4
17988     A7 14 02 FB | 	rdlong	arg02, fp
1798c     1C 4E 85 F1 | 	sub	fp, #28
17990     04 E4 05 F1 | 	add	objptr, #4
17994     F2 14 62 FC | 	wrlong	arg02, objptr
17998     04 E4 85 F1 | 	sub	objptr, #4
1799c     F2 12 02 FB | 	rdlong	arg01, objptr
179a0     04 E4 85 F1 | 	sub	objptr, #4
179a4     F2 16 02 FB | 	rdlong	arg03, objptr
179a8     37 00 00 FF 
179ac     58 E4 85 F1 | 	sub	objptr, ##28248
179b0     E0 6F B0 FD | 	call	#_hg010b_spin2_putpixel
179b4     A7 F0 03 F6 | 	mov	ptra, fp
179b8     B2 00 A0 FD | 	call	#popregs_
179bc                 | _do_plot_ret
179bc     2D 00 64 FD | 	ret
179c0                 | 
179c0                 | ' 
179c0                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
179c0                 | ' 
179c0                 | ' sub do_draw
179c0                 | _do_draw
179c0     00 4A 05 F6 | 	mov	COUNT_, #0
179c4     A8 00 A0 FD | 	call	#pushregs_
179c8     20 F0 07 F1 | 	add	ptra, #32
179cc     F4 36 BF FD | 	call	#_pop
179d0     FD 1A 02 F6 | 	mov	arg05, result1
179d4     FE 18 02 F6 | 	mov	arg04, result2
179d8     FF 16 02 F6 | 	mov	arg03, result3
179dc     0C 4E 05 F1 | 	add	fp, #12
179e0     A7 1A 62 FC | 	wrlong	arg05, fp
179e4     04 4E 05 F1 | 	add	fp, #4
179e8     A7 18 62 FC | 	wrlong	arg04, fp
179ec     04 4E 05 F1 | 	add	fp, #4
179f0     A7 16 62 FC | 	wrlong	arg03, fp
179f4     14 4E 85 F1 | 	sub	fp, #20
179f8     C8 36 BF FD | 	call	#_pop
179fc     FF 1A 02 F6 | 	mov	arg05, result3
17a00     A7 FA 61 FC | 	wrlong	result1, fp
17a04     04 4E 05 F1 | 	add	fp, #4
17a08     A7 FC 61 FC | 	wrlong	result2, fp
17a0c     04 4E 05 F1 | 	add	fp, #4
17a10     A7 1A 62 FC | 	wrlong	arg05, fp
17a14     08 4E 85 F1 | 	sub	fp, #8
17a18     A7 12 02 F6 | 	mov	arg01, fp
17a1c     74 D7 BF FD | 	call	#_converttoint
17a20     18 4E 05 F1 | 	add	fp, #24
17a24     A7 FA 61 FC | 	wrlong	result1, fp
17a28     0C 4E 85 F1 | 	sub	fp, #12
17a2c     A7 12 02 F6 | 	mov	arg01, fp
17a30     0C 4E 85 F1 | 	sub	fp, #12
17a34     5C D7 BF FD | 	call	#_converttoint
17a38     1C 4E 05 F1 | 	add	fp, #28
17a3c     A7 FA 61 FC | 	wrlong	result1, fp
17a40     37 00 00 FF 
17a44     5C E4 05 F1 | 	add	objptr, ##28252
17a48     F2 12 02 FB | 	rdlong	arg01, objptr
17a4c     04 E4 05 F1 | 	add	objptr, #4
17a50     F2 14 02 FB | 	rdlong	arg02, objptr
17a54     04 4E 85 F1 | 	sub	fp, #4
17a58     A7 16 02 FB | 	rdlong	arg03, fp
17a5c     FD 18 02 F6 | 	mov	arg04, result1
17a60     18 4E 85 F1 | 	sub	fp, #24
17a64     08 E4 85 F1 | 	sub	objptr, #8
17a68     F2 1A 02 FB | 	rdlong	arg05, objptr
17a6c     37 00 00 FF 
17a70     58 E4 85 F1 | 	sub	objptr, ##28248
17a74     CC 71 B0 FD | 	call	#_hg010b_spin2_draw
17a78     18 4E 05 F1 | 	add	fp, #24
17a7c     A7 1A 02 FB | 	rdlong	arg05, fp
17a80     37 00 00 FF 
17a84     5C E4 05 F1 | 	add	objptr, ##28252
17a88     F2 1A 62 FC | 	wrlong	arg05, objptr
17a8c     04 4E 05 F1 | 	add	fp, #4
17a90     A7 1A 02 FB | 	rdlong	arg05, fp
17a94     1C 4E 85 F1 | 	sub	fp, #28
17a98     04 E4 05 F1 | 	add	objptr, #4
17a9c     F2 1A 62 FC | 	wrlong	arg05, objptr
17aa0     37 00 00 FF 
17aa4     60 E4 85 F1 | 	sub	objptr, ##28256
17aa8     A7 F0 03 F6 | 	mov	ptra, fp
17aac     B2 00 A0 FD | 	call	#popregs_
17ab0                 | _do_draw_ret
17ab0     2D 00 64 FD | 	ret
17ab4                 | 
17ab4                 | ' 
17ab4                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
17ab4                 | ' 
17ab4                 | ' sub do_fcircle
17ab4                 | _do_fcircle
17ab4     02 4A 05 F6 | 	mov	COUNT_, #2
17ab8     A8 00 A0 FD | 	call	#pushregs_
17abc     24 F0 07 F1 | 	add	ptra, #36
17ac0     00 36 BF FD | 	call	#_pop
17ac4     FD 18 02 F6 | 	mov	arg04, result1
17ac8     FE 16 02 F6 | 	mov	arg03, result2
17acc     FF 14 02 F6 | 	mov	arg02, result3
17ad0     18 4E 05 F1 | 	add	fp, #24
17ad4     A7 18 62 FC | 	wrlong	arg04, fp
17ad8     04 4E 05 F1 | 	add	fp, #4
17adc     A7 16 62 FC | 	wrlong	arg03, fp
17ae0     04 4E 05 F1 | 	add	fp, #4
17ae4     A7 14 62 FC | 	wrlong	arg02, fp
17ae8     20 4E 85 F1 | 	sub	fp, #32
17aec     D4 35 BF FD | 	call	#_pop
17af0     FD 18 02 F6 | 	mov	arg04, result1
17af4     FE 16 02 F6 | 	mov	arg03, result2
17af8     FF 1E 02 F6 | 	mov	local01, result3
17afc     0C 4E 05 F1 | 	add	fp, #12
17b00     A7 18 62 FC | 	wrlong	arg04, fp
17b04     04 4E 05 F1 | 	add	fp, #4
17b08     A7 16 62 FC | 	wrlong	arg03, fp
17b0c     04 4E 05 F1 | 	add	fp, #4
17b10     A7 1E 62 FC | 	wrlong	local01, fp
17b14     14 4E 85 F1 | 	sub	fp, #20
17b18     A8 35 BF FD | 	call	#_pop
17b1c     A7 FA 61 FC | 	wrlong	result1, fp
17b20     04 4E 05 F1 | 	add	fp, #4
17b24     A7 FC 61 FC | 	wrlong	result2, fp
17b28     04 4E 05 F1 | 	add	fp, #4
17b2c     A7 FE 61 FC | 	wrlong	result3, fp
17b30                 | ' 
17b30                 | ' t3=pop()
17b30                 | ' t2=pop()
17b30                 | ' t1=pop()
17b30                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
17b30     FF 18 02 F6 | 	mov	arg04, result3
17b34     08 4E 85 F1 | 	sub	fp, #8
17b38     1C 18 0E F2 | 	cmp	arg04, #28 wz
17b3c     08 4E 05 51 |  if_ne	add	fp, #8
17b40     A7 1E 02 5B |  if_ne	rdlong	local01, fp
17b44     08 4E 85 51 |  if_ne	sub	fp, #8
17b48     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
17b4c     7C 00 90 5D |  if_ne	jmp	#LR__1940
17b50     14 4E 05 F1 | 	add	fp, #20
17b54     A7 1E 02 FB | 	rdlong	local01, fp
17b58     14 4E 85 F1 | 	sub	fp, #20
17b5c     1C 1E 0E F2 | 	cmp	local01, #28 wz
17b60     14 4E 05 51 |  if_ne	add	fp, #20
17b64     A7 18 02 5B |  if_ne	rdlong	arg04, fp
17b68     14 4E 85 51 |  if_ne	sub	fp, #20
17b6c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
17b70     58 00 90 5D |  if_ne	jmp	#LR__1940
17b74     20 4E 05 F1 | 	add	fp, #32
17b78     A7 1E 02 FB | 	rdlong	local01, fp
17b7c     20 4E 85 F1 | 	sub	fp, #32
17b80     1C 1E 0E F2 | 	cmp	local01, #28 wz
17b84     20 4E 05 51 |  if_ne	add	fp, #32
17b88     A7 18 02 5B |  if_ne	rdlong	arg04, fp
17b8c     20 4E 85 51 |  if_ne	sub	fp, #32
17b90     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
17b94     34 00 90 5D |  if_ne	jmp	#LR__1940
17b98     A7 12 02 FB | 	rdlong	arg01, fp
17b9c     0C 4E 05 F1 | 	add	fp, #12
17ba0     A7 14 02 FB | 	rdlong	arg02, fp
17ba4     0C 4E 05 F1 | 	add	fp, #12
17ba8     A7 16 02 FB | 	rdlong	arg03, fp
17bac     18 4E 85 F1 | 	sub	fp, #24
17bb0     37 00 00 FF 
17bb4     58 E4 05 F1 | 	add	objptr, ##28248
17bb8     F2 18 02 FB | 	rdlong	arg04, objptr
17bbc     37 00 00 FF 
17bc0     58 E4 85 F1 | 	sub	objptr, ##28248
17bc4     00 75 B0 FD | 	call	#_hg010b_spin2_fcircle
17bc8                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
17bc8     54 00 90 FD | 	jmp	#LR__1941
17bcc                 | LR__1940
17bcc     A7 12 02 F6 | 	mov	arg01, fp
17bd0     C0 D5 BF FD | 	call	#_converttoint
17bd4     FD 1E 02 F6 | 	mov	local01, result1
17bd8     0C 4E 05 F1 | 	add	fp, #12
17bdc     A7 12 02 F6 | 	mov	arg01, fp
17be0     0C 4E 85 F1 | 	sub	fp, #12
17be4     AC D5 BF FD | 	call	#_converttoint
17be8     FD 20 02 F6 | 	mov	local02, result1
17bec     18 4E 05 F1 | 	add	fp, #24
17bf0     A7 12 02 F6 | 	mov	arg01, fp
17bf4     18 4E 85 F1 | 	sub	fp, #24
17bf8     98 D5 BF FD | 	call	#_converttoint
17bfc     FD 16 02 F6 | 	mov	arg03, result1
17c00     37 00 00 FF 
17c04     58 E4 05 F1 | 	add	objptr, ##28248
17c08     F2 18 02 FB | 	rdlong	arg04, objptr
17c0c     37 00 00 FF 
17c10     58 E4 85 F1 | 	sub	objptr, ##28248
17c14     0F 13 02 F6 | 	mov	arg01, local01
17c18     10 15 02 F6 | 	mov	arg02, local02
17c1c     A8 74 B0 FD | 	call	#_hg010b_spin2_fcircle
17c20                 | LR__1941
17c20     A7 F0 03 F6 | 	mov	ptra, fp
17c24     B2 00 A0 FD | 	call	#popregs_
17c28                 | _do_fcircle_ret
17c28     2D 00 64 FD | 	ret
17c2c                 | 
17c2c                 | ' 
17c2c                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
17c2c                 | ' 
17c2c                 | ' sub do_circle
17c2c                 | _do_circle
17c2c     02 4A 05 F6 | 	mov	COUNT_, #2
17c30     A8 00 A0 FD | 	call	#pushregs_
17c34     24 F0 07 F1 | 	add	ptra, #36
17c38     88 34 BF FD | 	call	#_pop
17c3c     FD 18 02 F6 | 	mov	arg04, result1
17c40     FE 16 02 F6 | 	mov	arg03, result2
17c44     FF 14 02 F6 | 	mov	arg02, result3
17c48     18 4E 05 F1 | 	add	fp, #24
17c4c     A7 18 62 FC | 	wrlong	arg04, fp
17c50     04 4E 05 F1 | 	add	fp, #4
17c54     A7 16 62 FC | 	wrlong	arg03, fp
17c58     04 4E 05 F1 | 	add	fp, #4
17c5c     A7 14 62 FC | 	wrlong	arg02, fp
17c60     20 4E 85 F1 | 	sub	fp, #32
17c64     5C 34 BF FD | 	call	#_pop
17c68     FD 18 02 F6 | 	mov	arg04, result1
17c6c     FE 16 02 F6 | 	mov	arg03, result2
17c70     FF 1E 02 F6 | 	mov	local01, result3
17c74     0C 4E 05 F1 | 	add	fp, #12
17c78     A7 18 62 FC | 	wrlong	arg04, fp
17c7c     04 4E 05 F1 | 	add	fp, #4
17c80     A7 16 62 FC | 	wrlong	arg03, fp
17c84     04 4E 05 F1 | 	add	fp, #4
17c88     A7 1E 62 FC | 	wrlong	local01, fp
17c8c     14 4E 85 F1 | 	sub	fp, #20
17c90     30 34 BF FD | 	call	#_pop
17c94     A7 FA 61 FC | 	wrlong	result1, fp
17c98     04 4E 05 F1 | 	add	fp, #4
17c9c     A7 FC 61 FC | 	wrlong	result2, fp
17ca0     04 4E 05 F1 | 	add	fp, #4
17ca4     A7 FE 61 FC | 	wrlong	result3, fp
17ca8                 | ' 
17ca8                 | ' t3=pop()
17ca8                 | ' t2=pop()
17ca8                 | ' t1=pop()
17ca8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
17ca8     FF 18 02 F6 | 	mov	arg04, result3
17cac     08 4E 85 F1 | 	sub	fp, #8
17cb0     1C 18 0E F2 | 	cmp	arg04, #28 wz
17cb4     08 4E 05 51 |  if_ne	add	fp, #8
17cb8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
17cbc     08 4E 85 51 |  if_ne	sub	fp, #8
17cc0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
17cc4     7C 00 90 5D |  if_ne	jmp	#LR__1950
17cc8     14 4E 05 F1 | 	add	fp, #20
17ccc     A7 1E 02 FB | 	rdlong	local01, fp
17cd0     14 4E 85 F1 | 	sub	fp, #20
17cd4     1C 1E 0E F2 | 	cmp	local01, #28 wz
17cd8     14 4E 05 51 |  if_ne	add	fp, #20
17cdc     A7 18 02 5B |  if_ne	rdlong	arg04, fp
17ce0     14 4E 85 51 |  if_ne	sub	fp, #20
17ce4     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
17ce8     58 00 90 5D |  if_ne	jmp	#LR__1950
17cec     20 4E 05 F1 | 	add	fp, #32
17cf0     A7 1E 02 FB | 	rdlong	local01, fp
17cf4     20 4E 85 F1 | 	sub	fp, #32
17cf8     1C 1E 0E F2 | 	cmp	local01, #28 wz
17cfc     20 4E 05 51 |  if_ne	add	fp, #32
17d00     A7 18 02 5B |  if_ne	rdlong	arg04, fp
17d04     20 4E 85 51 |  if_ne	sub	fp, #32
17d08     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
17d0c     34 00 90 5D |  if_ne	jmp	#LR__1950
17d10     A7 12 02 FB | 	rdlong	arg01, fp
17d14     0C 4E 05 F1 | 	add	fp, #12
17d18     A7 14 02 FB | 	rdlong	arg02, fp
17d1c     0C 4E 05 F1 | 	add	fp, #12
17d20     A7 16 02 FB | 	rdlong	arg03, fp
17d24     18 4E 85 F1 | 	sub	fp, #24
17d28     37 00 00 FF 
17d2c     58 E4 05 F1 | 	add	objptr, ##28248
17d30     F2 18 02 FB | 	rdlong	arg04, objptr
17d34     37 00 00 FF 
17d38     58 E4 85 F1 | 	sub	objptr, ##28248
17d3c     94 74 B0 FD | 	call	#_hg010b_spin2_circle
17d40                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
17d40     54 00 90 FD | 	jmp	#LR__1951
17d44                 | LR__1950
17d44     A7 12 02 F6 | 	mov	arg01, fp
17d48     48 D4 BF FD | 	call	#_converttoint
17d4c     FD 1E 02 F6 | 	mov	local01, result1
17d50     0C 4E 05 F1 | 	add	fp, #12
17d54     A7 12 02 F6 | 	mov	arg01, fp
17d58     0C 4E 85 F1 | 	sub	fp, #12
17d5c     34 D4 BF FD | 	call	#_converttoint
17d60     FD 20 02 F6 | 	mov	local02, result1
17d64     18 4E 05 F1 | 	add	fp, #24
17d68     A7 12 02 F6 | 	mov	arg01, fp
17d6c     18 4E 85 F1 | 	sub	fp, #24
17d70     20 D4 BF FD | 	call	#_converttoint
17d74     FD 16 02 F6 | 	mov	arg03, result1
17d78     37 00 00 FF 
17d7c     58 E4 05 F1 | 	add	objptr, ##28248
17d80     F2 18 02 FB | 	rdlong	arg04, objptr
17d84     37 00 00 FF 
17d88     58 E4 85 F1 | 	sub	objptr, ##28248
17d8c     0F 13 02 F6 | 	mov	arg01, local01
17d90     10 15 02 F6 | 	mov	arg02, local02
17d94     3C 74 B0 FD | 	call	#_hg010b_spin2_circle
17d98                 | LR__1951
17d98     A7 F0 03 F6 | 	mov	ptra, fp
17d9c     B2 00 A0 FD | 	call	#popregs_
17da0                 | _do_circle_ret
17da0     2D 00 64 FD | 	ret
17da4                 | 
17da4                 | ' 
17da4                 | ' ' -------------------------- Draw a rectangle
17da4                 | ' 
17da4                 | ' sub do_box
17da4                 | _do_box
17da4     03 4A 05 F6 | 	mov	COUNT_, #3
17da8     A8 00 A0 FD | 	call	#pushregs_
17dac     30 F0 07 F1 | 	add	ptra, #48
17db0     10 33 BF FD | 	call	#_pop
17db4     FD 1A 02 F6 | 	mov	arg05, result1
17db8     FE 18 02 F6 | 	mov	arg04, result2
17dbc     FF 16 02 F6 | 	mov	arg03, result3
17dc0     24 4E 05 F1 | 	add	fp, #36
17dc4     A7 1A 62 FC | 	wrlong	arg05, fp
17dc8     04 4E 05 F1 | 	add	fp, #4
17dcc     A7 18 62 FC | 	wrlong	arg04, fp
17dd0     04 4E 05 F1 | 	add	fp, #4
17dd4     A7 16 62 FC | 	wrlong	arg03, fp
17dd8     2C 4E 85 F1 | 	sub	fp, #44
17ddc     E4 32 BF FD | 	call	#_pop
17de0     FD 1A 02 F6 | 	mov	arg05, result1
17de4     FE 18 02 F6 | 	mov	arg04, result2
17de8     FF 16 02 F6 | 	mov	arg03, result3
17dec     18 4E 05 F1 | 	add	fp, #24
17df0     A7 1A 62 FC | 	wrlong	arg05, fp
17df4     04 4E 05 F1 | 	add	fp, #4
17df8     A7 18 62 FC | 	wrlong	arg04, fp
17dfc     04 4E 05 F1 | 	add	fp, #4
17e00     A7 16 62 FC | 	wrlong	arg03, fp
17e04     20 4E 85 F1 | 	sub	fp, #32
17e08     B8 32 BF FD | 	call	#_pop
17e0c     FD 1A 02 F6 | 	mov	arg05, result1
17e10     FE 18 02 F6 | 	mov	arg04, result2
17e14     FF 1E 02 F6 | 	mov	local01, result3
17e18     0C 4E 05 F1 | 	add	fp, #12
17e1c     A7 1A 62 FC | 	wrlong	arg05, fp
17e20     04 4E 05 F1 | 	add	fp, #4
17e24     A7 18 62 FC | 	wrlong	arg04, fp
17e28     04 4E 05 F1 | 	add	fp, #4
17e2c     A7 1E 62 FC | 	wrlong	local01, fp
17e30     14 4E 85 F1 | 	sub	fp, #20
17e34     8C 32 BF FD | 	call	#_pop
17e38     A7 FA 61 FC | 	wrlong	result1, fp
17e3c     04 4E 05 F1 | 	add	fp, #4
17e40     A7 FC 61 FC | 	wrlong	result2, fp
17e44     04 4E 05 F1 | 	add	fp, #4
17e48     A7 FE 61 FC | 	wrlong	result3, fp
17e4c                 | ' 
17e4c                 | ' t4=pop()
17e4c                 | ' t3=pop()
17e4c                 | ' t2=pop()
17e4c                 | ' t1=pop()
17e4c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
17e4c     FF 1A 02 F6 | 	mov	arg05, result3
17e50     08 4E 85 F1 | 	sub	fp, #8
17e54     1C 1A 0E F2 | 	cmp	arg05, #28 wz
17e58     08 4E 05 51 |  if_ne	add	fp, #8
17e5c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
17e60     08 4E 85 51 |  if_ne	sub	fp, #8
17e64     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
17e68     A8 00 90 5D |  if_ne	jmp	#LR__1960
17e6c     14 4E 05 F1 | 	add	fp, #20
17e70     A7 1E 02 FB | 	rdlong	local01, fp
17e74     14 4E 85 F1 | 	sub	fp, #20
17e78     1C 1E 0E F2 | 	cmp	local01, #28 wz
17e7c     14 4E 05 51 |  if_ne	add	fp, #20
17e80     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
17e84     14 4E 85 51 |  if_ne	sub	fp, #20
17e88     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
17e8c     84 00 90 5D |  if_ne	jmp	#LR__1960
17e90     20 4E 05 F1 | 	add	fp, #32
17e94     A7 1E 02 FB | 	rdlong	local01, fp
17e98     20 4E 85 F1 | 	sub	fp, #32
17e9c     1C 1E 0E F2 | 	cmp	local01, #28 wz
17ea0     20 4E 05 51 |  if_ne	add	fp, #32
17ea4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
17ea8     20 4E 85 51 |  if_ne	sub	fp, #32
17eac     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
17eb0     60 00 90 5D |  if_ne	jmp	#LR__1960
17eb4     2C 4E 05 F1 | 	add	fp, #44
17eb8     A7 1E 02 FB | 	rdlong	local01, fp
17ebc     2C 4E 85 F1 | 	sub	fp, #44
17ec0     1C 1E 0E F2 | 	cmp	local01, #28 wz
17ec4     2C 4E 05 51 |  if_ne	add	fp, #44
17ec8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
17ecc     2C 4E 85 51 |  if_ne	sub	fp, #44
17ed0     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
17ed4     3C 00 90 5D |  if_ne	jmp	#LR__1960
17ed8     A7 12 02 FB | 	rdlong	arg01, fp
17edc     0C 4E 05 F1 | 	add	fp, #12
17ee0     A7 14 02 FB | 	rdlong	arg02, fp
17ee4     0C 4E 05 F1 | 	add	fp, #12
17ee8     A7 16 02 FB | 	rdlong	arg03, fp
17eec     0C 4E 05 F1 | 	add	fp, #12
17ef0     A7 18 02 FB | 	rdlong	arg04, fp
17ef4     24 4E 85 F1 | 	sub	fp, #36
17ef8     37 00 00 FF 
17efc     58 E4 05 F1 | 	add	objptr, ##28248
17f00     F2 1A 02 FB | 	rdlong	arg05, objptr
17f04     37 00 00 FF 
17f08     58 E4 85 F1 | 	sub	objptr, ##28248
17f0c     90 74 B0 FD | 	call	#_hg010b_spin2_box
17f10                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
17f10     6C 00 90 FD | 	jmp	#LR__1961
17f14                 | LR__1960
17f14     A7 12 02 F6 | 	mov	arg01, fp
17f18     78 D2 BF FD | 	call	#_converttoint
17f1c     FD 20 02 F6 | 	mov	local02, result1
17f20     0C 4E 05 F1 | 	add	fp, #12
17f24     A7 12 02 F6 | 	mov	arg01, fp
17f28     0C 4E 85 F1 | 	sub	fp, #12
17f2c     64 D2 BF FD | 	call	#_converttoint
17f30     FD 22 02 F6 | 	mov	local03, result1
17f34     18 4E 05 F1 | 	add	fp, #24
17f38     A7 12 02 F6 | 	mov	arg01, fp
17f3c     18 4E 85 F1 | 	sub	fp, #24
17f40     50 D2 BF FD | 	call	#_converttoint
17f44     FD 1E 02 F6 | 	mov	local01, result1
17f48     24 4E 05 F1 | 	add	fp, #36
17f4c     A7 12 02 F6 | 	mov	arg01, fp
17f50     24 4E 85 F1 | 	sub	fp, #36
17f54     3C D2 BF FD | 	call	#_converttoint
17f58     FD 18 02 F6 | 	mov	arg04, result1
17f5c     37 00 00 FF 
17f60     58 E4 05 F1 | 	add	objptr, ##28248
17f64     F2 1A 02 FB | 	rdlong	arg05, objptr
17f68     37 00 00 FF 
17f6c     58 E4 85 F1 | 	sub	objptr, ##28248
17f70     10 13 02 F6 | 	mov	arg01, local02
17f74     11 15 02 F6 | 	mov	arg02, local03
17f78     0F 17 02 F6 | 	mov	arg03, local01
17f7c     20 74 B0 FD | 	call	#_hg010b_spin2_box
17f80                 | LR__1961
17f80     A7 F0 03 F6 | 	mov	ptra, fp
17f84     B2 00 A0 FD | 	call	#popregs_
17f88                 | _do_box_ret
17f88     2D 00 64 FD | 	ret
17f8c                 | 
17f8c                 | ' 
17f8c                 | ' sub do_fill
17f8c                 | _do_fill
17f8c     03 4A 05 F6 | 	mov	COUNT_, #3
17f90     A8 00 A0 FD | 	call	#pushregs_
17f94     30 F0 07 F1 | 	add	ptra, #48
17f98     28 31 BF FD | 	call	#_pop
17f9c     FD 18 02 F6 | 	mov	arg04, result1
17fa0     FE 16 02 F6 | 	mov	arg03, result2
17fa4     FF 14 02 F6 | 	mov	arg02, result3
17fa8     24 4E 05 F1 | 	add	fp, #36
17fac     A7 18 62 FC | 	wrlong	arg04, fp
17fb0     04 4E 05 F1 | 	add	fp, #4
17fb4     A7 16 62 FC | 	wrlong	arg03, fp
17fb8     04 4E 05 F1 | 	add	fp, #4
17fbc     A7 14 62 FC | 	wrlong	arg02, fp
17fc0     2C 4E 85 F1 | 	sub	fp, #44
17fc4     FC 30 BF FD | 	call	#_pop
17fc8     FD 18 02 F6 | 	mov	arg04, result1
17fcc     FE 16 02 F6 | 	mov	arg03, result2
17fd0     FF 14 02 F6 | 	mov	arg02, result3
17fd4     18 4E 05 F1 | 	add	fp, #24
17fd8     A7 18 62 FC | 	wrlong	arg04, fp
17fdc     04 4E 05 F1 | 	add	fp, #4
17fe0     A7 16 62 FC | 	wrlong	arg03, fp
17fe4     04 4E 05 F1 | 	add	fp, #4
17fe8     A7 14 62 FC | 	wrlong	arg02, fp
17fec     20 4E 85 F1 | 	sub	fp, #32
17ff0     D0 30 BF FD | 	call	#_pop
17ff4     FD 18 02 F6 | 	mov	arg04, result1
17ff8     FE 16 02 F6 | 	mov	arg03, result2
17ffc     FF 1E 02 F6 | 	mov	local01, result3
18000     0C 4E 05 F1 | 	add	fp, #12
18004     A7 18 62 FC | 	wrlong	arg04, fp
18008     04 4E 05 F1 | 	add	fp, #4
1800c     A7 16 62 FC | 	wrlong	arg03, fp
18010     04 4E 05 F1 | 	add	fp, #4
18014     A7 1E 62 FC | 	wrlong	local01, fp
18018     14 4E 85 F1 | 	sub	fp, #20
1801c     A4 30 BF FD | 	call	#_pop
18020     A7 FA 61 FC | 	wrlong	result1, fp
18024     04 4E 05 F1 | 	add	fp, #4
18028     A7 FC 61 FC | 	wrlong	result2, fp
1802c     04 4E 05 F1 | 	add	fp, #4
18030     A7 FE 61 FC | 	wrlong	result3, fp
18034                 | ' 
18034                 | ' t4=pop()
18034                 | ' t3=pop()
18034                 | ' t2=pop()
18034                 | ' t1=pop()
18034                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
18034     FF 18 02 F6 | 	mov	arg04, result3
18038     08 4E 85 F1 | 	sub	fp, #8
1803c     1C 18 0E F2 | 	cmp	arg04, #28 wz
18040     08 4E 05 51 |  if_ne	add	fp, #8
18044     A7 1E 02 5B |  if_ne	rdlong	local01, fp
18048     08 4E 85 51 |  if_ne	sub	fp, #8
1804c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
18050     94 00 90 5D |  if_ne	jmp	#LR__1970
18054     14 4E 05 F1 | 	add	fp, #20
18058     A7 1E 02 FB | 	rdlong	local01, fp
1805c     14 4E 85 F1 | 	sub	fp, #20
18060     1C 1E 0E F2 | 	cmp	local01, #28 wz
18064     14 4E 05 51 |  if_ne	add	fp, #20
18068     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1806c     14 4E 85 51 |  if_ne	sub	fp, #20
18070     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18074     70 00 90 5D |  if_ne	jmp	#LR__1970
18078     20 4E 05 F1 | 	add	fp, #32
1807c     A7 1E 02 FB | 	rdlong	local01, fp
18080     20 4E 85 F1 | 	sub	fp, #32
18084     1C 1E 0E F2 | 	cmp	local01, #28 wz
18088     20 4E 05 51 |  if_ne	add	fp, #32
1808c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
18090     20 4E 85 51 |  if_ne	sub	fp, #32
18094     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
18098     4C 00 90 5D |  if_ne	jmp	#LR__1970
1809c     2C 4E 05 F1 | 	add	fp, #44
180a0     A7 1E 02 FB | 	rdlong	local01, fp
180a4     2C 4E 85 F1 | 	sub	fp, #44
180a8     1C 1E 0E F2 | 	cmp	local01, #28 wz
180ac     2C 4E 05 51 |  if_ne	add	fp, #44
180b0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
180b4     2C 4E 85 51 |  if_ne	sub	fp, #44
180b8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
180bc     28 00 90 5D |  if_ne	jmp	#LR__1970
180c0     A7 12 02 FB | 	rdlong	arg01, fp
180c4     0C 4E 05 F1 | 	add	fp, #12
180c8     A7 14 02 FB | 	rdlong	arg02, fp
180cc     0C 4E 05 F1 | 	add	fp, #12
180d0     A7 16 02 FB | 	rdlong	arg03, fp
180d4     0C 4E 05 F1 | 	add	fp, #12
180d8     A7 18 02 FB | 	rdlong	arg04, fp
180dc     24 4E 85 F1 | 	sub	fp, #36
180e0     50 6D B0 FD | 	call	#_hg010b_spin2_fill
180e4                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
180e4     58 00 90 FD | 	jmp	#LR__1971
180e8                 | LR__1970
180e8     A7 12 02 F6 | 	mov	arg01, fp
180ec     A4 D0 BF FD | 	call	#_converttoint
180f0     FD 20 02 F6 | 	mov	local02, result1
180f4     0C 4E 05 F1 | 	add	fp, #12
180f8     A7 12 02 F6 | 	mov	arg01, fp
180fc     0C 4E 85 F1 | 	sub	fp, #12
18100     90 D0 BF FD | 	call	#_converttoint
18104     FD 22 02 F6 | 	mov	local03, result1
18108     18 4E 05 F1 | 	add	fp, #24
1810c     A7 12 02 F6 | 	mov	arg01, fp
18110     18 4E 85 F1 | 	sub	fp, #24
18114     7C D0 BF FD | 	call	#_converttoint
18118     FD 1E 02 F6 | 	mov	local01, result1
1811c     24 4E 05 F1 | 	add	fp, #36
18120     A7 12 02 F6 | 	mov	arg01, fp
18124     24 4E 85 F1 | 	sub	fp, #36
18128     68 D0 BF FD | 	call	#_converttoint
1812c     FD 18 02 F6 | 	mov	arg04, result1
18130     10 13 02 F6 | 	mov	arg01, local02
18134     11 15 02 F6 | 	mov	arg02, local03
18138     0F 17 02 F6 | 	mov	arg03, local01
1813c     F4 6C B0 FD | 	call	#_hg010b_spin2_fill
18140                 | LR__1971
18140     A7 F0 03 F6 | 	mov	ptra, fp
18144     B2 00 A0 FD | 	call	#popregs_
18148                 | _do_fill_ret
18148     2D 00 64 FD | 	ret
1814c                 | 
1814c                 | ' 
1814c                 | ' ' -------------------------- Draw a frane
1814c                 | ' 
1814c                 | ' sub do_frame
1814c                 | _do_frame
1814c     03 4A 05 F6 | 	mov	COUNT_, #3
18150     A8 00 A0 FD | 	call	#pushregs_
18154     30 F0 07 F1 | 	add	ptra, #48
18158     68 2F BF FD | 	call	#_pop
1815c     FD 1A 02 F6 | 	mov	arg05, result1
18160     FE 18 02 F6 | 	mov	arg04, result2
18164     FF 16 02 F6 | 	mov	arg03, result3
18168     24 4E 05 F1 | 	add	fp, #36
1816c     A7 1A 62 FC | 	wrlong	arg05, fp
18170     04 4E 05 F1 | 	add	fp, #4
18174     A7 18 62 FC | 	wrlong	arg04, fp
18178     04 4E 05 F1 | 	add	fp, #4
1817c     A7 16 62 FC | 	wrlong	arg03, fp
18180     2C 4E 85 F1 | 	sub	fp, #44
18184     3C 2F BF FD | 	call	#_pop
18188     FD 1A 02 F6 | 	mov	arg05, result1
1818c     FE 18 02 F6 | 	mov	arg04, result2
18190     FF 16 02 F6 | 	mov	arg03, result3
18194     18 4E 05 F1 | 	add	fp, #24
18198     A7 1A 62 FC | 	wrlong	arg05, fp
1819c     04 4E 05 F1 | 	add	fp, #4
181a0     A7 18 62 FC | 	wrlong	arg04, fp
181a4     04 4E 05 F1 | 	add	fp, #4
181a8     A7 16 62 FC | 	wrlong	arg03, fp
181ac     20 4E 85 F1 | 	sub	fp, #32
181b0     10 2F BF FD | 	call	#_pop
181b4     FD 1A 02 F6 | 	mov	arg05, result1
181b8     FE 18 02 F6 | 	mov	arg04, result2
181bc     FF 1E 02 F6 | 	mov	local01, result3
181c0     0C 4E 05 F1 | 	add	fp, #12
181c4     A7 1A 62 FC | 	wrlong	arg05, fp
181c8     04 4E 05 F1 | 	add	fp, #4
181cc     A7 18 62 FC | 	wrlong	arg04, fp
181d0     04 4E 05 F1 | 	add	fp, #4
181d4     A7 1E 62 FC | 	wrlong	local01, fp
181d8     14 4E 85 F1 | 	sub	fp, #20
181dc     E4 2E BF FD | 	call	#_pop
181e0     A7 FA 61 FC | 	wrlong	result1, fp
181e4     04 4E 05 F1 | 	add	fp, #4
181e8     A7 FC 61 FC | 	wrlong	result2, fp
181ec     04 4E 05 F1 | 	add	fp, #4
181f0     A7 FE 61 FC | 	wrlong	result3, fp
181f4                 | ' 
181f4                 | ' t4=pop()
181f4                 | ' t3=pop()
181f4                 | ' t2=pop()
181f4                 | ' t1=pop()
181f4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
181f4     FF 1A 02 F6 | 	mov	arg05, result3
181f8     08 4E 85 F1 | 	sub	fp, #8
181fc     1C 1A 0E F2 | 	cmp	arg05, #28 wz
18200     08 4E 05 51 |  if_ne	add	fp, #8
18204     A7 1E 02 5B |  if_ne	rdlong	local01, fp
18208     08 4E 85 51 |  if_ne	sub	fp, #8
1820c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
18210     A8 00 90 5D |  if_ne	jmp	#LR__1980
18214     14 4E 05 F1 | 	add	fp, #20
18218     A7 1E 02 FB | 	rdlong	local01, fp
1821c     14 4E 85 F1 | 	sub	fp, #20
18220     1C 1E 0E F2 | 	cmp	local01, #28 wz
18224     14 4E 05 51 |  if_ne	add	fp, #20
18228     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
1822c     14 4E 85 51 |  if_ne	sub	fp, #20
18230     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18234     84 00 90 5D |  if_ne	jmp	#LR__1980
18238     20 4E 05 F1 | 	add	fp, #32
1823c     A7 1E 02 FB | 	rdlong	local01, fp
18240     20 4E 85 F1 | 	sub	fp, #32
18244     1C 1E 0E F2 | 	cmp	local01, #28 wz
18248     20 4E 05 51 |  if_ne	add	fp, #32
1824c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18250     20 4E 85 51 |  if_ne	sub	fp, #32
18254     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
18258     60 00 90 5D |  if_ne	jmp	#LR__1980
1825c     2C 4E 05 F1 | 	add	fp, #44
18260     A7 1E 02 FB | 	rdlong	local01, fp
18264     2C 4E 85 F1 | 	sub	fp, #44
18268     1C 1E 0E F2 | 	cmp	local01, #28 wz
1826c     2C 4E 05 51 |  if_ne	add	fp, #44
18270     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
18274     2C 4E 85 51 |  if_ne	sub	fp, #44
18278     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
1827c     3C 00 90 5D |  if_ne	jmp	#LR__1980
18280     A7 12 02 FB | 	rdlong	arg01, fp
18284     0C 4E 05 F1 | 	add	fp, #12
18288     A7 14 02 FB | 	rdlong	arg02, fp
1828c     0C 4E 05 F1 | 	add	fp, #12
18290     A7 16 02 FB | 	rdlong	arg03, fp
18294     0C 4E 05 F1 | 	add	fp, #12
18298     A7 18 02 FB | 	rdlong	arg04, fp
1829c     24 4E 85 F1 | 	sub	fp, #36
182a0     37 00 00 FF 
182a4     58 E4 05 F1 | 	add	objptr, ##28248
182a8     F2 1A 02 FB | 	rdlong	arg05, objptr
182ac     37 00 00 FF 
182b0     58 E4 85 F1 | 	sub	objptr, ##28248
182b4     68 70 B0 FD | 	call	#_hg010b_spin2_frame
182b8                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
182b8     6C 00 90 FD | 	jmp	#LR__1981
182bc                 | LR__1980
182bc     A7 12 02 F6 | 	mov	arg01, fp
182c0     D0 CE BF FD | 	call	#_converttoint
182c4     FD 20 02 F6 | 	mov	local02, result1
182c8     0C 4E 05 F1 | 	add	fp, #12
182cc     A7 12 02 F6 | 	mov	arg01, fp
182d0     0C 4E 85 F1 | 	sub	fp, #12
182d4     BC CE BF FD | 	call	#_converttoint
182d8     FD 22 02 F6 | 	mov	local03, result1
182dc     18 4E 05 F1 | 	add	fp, #24
182e0     A7 12 02 F6 | 	mov	arg01, fp
182e4     18 4E 85 F1 | 	sub	fp, #24
182e8     A8 CE BF FD | 	call	#_converttoint
182ec     FD 1E 02 F6 | 	mov	local01, result1
182f0     24 4E 05 F1 | 	add	fp, #36
182f4     A7 12 02 F6 | 	mov	arg01, fp
182f8     24 4E 85 F1 | 	sub	fp, #36
182fc     94 CE BF FD | 	call	#_converttoint
18300     FD 18 02 F6 | 	mov	arg04, result1
18304     37 00 00 FF 
18308     58 E4 05 F1 | 	add	objptr, ##28248
1830c     F2 1A 02 FB | 	rdlong	arg05, objptr
18310     37 00 00 FF 
18314     58 E4 85 F1 | 	sub	objptr, ##28248
18318     10 13 02 F6 | 	mov	arg01, local02
1831c     11 15 02 F6 | 	mov	arg02, local03
18320     0F 17 02 F6 | 	mov	arg03, local01
18324     F8 6F B0 FD | 	call	#_hg010b_spin2_frame
18328                 | LR__1981
18328     A7 F0 03 F6 | 	mov	ptra, fp
1832c     B2 00 A0 FD | 	call	#popregs_
18330                 | _do_frame_ret
18330     2D 00 64 FD | 	ret
18334                 | 
18334                 | ' 
18334                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
18334                 | ' 
18334                 | ' ' ------------------------- Print to the screem
18334                 | ' 
18334                 | ' sub do_print  
18334                 | _do_print
18334     0B 4A 05 F6 | 	mov	COUNT_, #11
18338     A8 00 A0 FD | 	call	#pushregs_
1833c     00 24 06 F6 | 	mov	local04, #0
18340     80 2D BF FD | 	call	#_pop
18344     FD 26 02 F6 | 	mov	local05, result1
18348     FE 28 02 F6 | 	mov	local06, result2
1834c     FF 2A 02 F6 | 	mov	local07, result3
18350     13 1F 02 F6 | 	mov	local01, local05
18354     14 21 02 F6 | 	mov	local02, local06
18358     15 23 02 F6 | 	mov	local03, local07
1835c                 | '  
1835c                 | ' r=0
1835c                 | ' t1=pop() 
1835c                 | ' 'print t1.result_type,t1.result.uresult
1835c                 | ' 
1835c                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
1835c     21 22 0E F2 | 	cmp	local03, #33 wz
18360     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
18364     20 00 90 5D |  if_ne	jmp	#LR__1990
18368     11 25 02 F6 | 	mov	local04, local03
1836c     54 2D BF FD | 	call	#_pop
18370     FD 26 02 F6 | 	mov	local05, result1
18374     FE 28 02 F6 | 	mov	local06, result2
18378     FF 2A 02 F6 | 	mov	local07, result3
1837c     13 1F 02 F6 | 	mov	local01, local05
18380     14 21 02 F6 | 	mov	local02, local06
18384     15 23 02 F6 | 	mov	local03, local07
18388                 | LR__1990
18388                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
18388     20 22 0E F2 | 	cmp	local03, #32 wz
1838c     11 25 02 A6 |  if_e	mov	local04, local03
18390                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
18390     FF 22 0E F2 | 	cmp	local03, #255 wz
18394     0C 00 90 5D |  if_ne	jmp	#LR__1991
18398     0F 13 02 F6 | 	mov	arg01, local01
1839c     C8 44 B0 FD | 	call	#_printerror
183a0     D4 04 90 FD | 	jmp	#LR__2010
183a4                 | LR__1991
183a4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
183a4     2B 22 0E F2 | 	cmp	local03, #43 wz
183a8     14 00 90 5D |  if_ne	jmp	#LR__1992
183ac     0F 13 02 F6 | 	mov	arg01, local01
183b0     BC 85 BF FD | 	call	#_convertstring
183b4     FD 26 02 F6 | 	mov	local05, result1
183b8     13 1F 02 F6 | 	mov	local01, local05
183bc     1F 22 06 F6 | 	mov	local03, #31
183c0                 | LR__1992
183c0                 | ' 
183c0                 | ' if t1.result_type=token_channel then print "Print to channel "; t1.result.iresult : t1=pop()
183c0     2C 22 0E F2 | 	cmp	local03, #44 wz
183c4     80 00 90 5D |  if_ne	jmp	#LR__1993
183c8     00 12 06 F6 | 	mov	arg01, #0
183cc     80 E3 B0 FD | 	call	#__system___getiolock_0540
183d0     FD 12 02 F6 | 	mov	arg01, result1
183d4     38 89 B0 FD | 	call	#__system___lockmem
183d8     86 01 00 FF 
183dc     D5 15 06 F6 | 	mov	arg02, ##@LR__5435
183e0     00 12 06 F6 | 	mov	arg01, #0
183e4     00 16 06 F6 | 	mov	arg03, #0
183e8     18 96 B0 FD | 	call	#__system___basic_print_string
183ec     0A 2C 06 F6 | 	mov	local08, #10
183f0     00 12 06 F6 | 	mov	arg01, #0
183f4     0F 15 02 F6 | 	mov	arg02, local01
183f8     00 16 06 F6 | 	mov	arg03, #0
183fc     0A 18 06 F6 | 	mov	arg04, #10
18400     44 96 B0 FD | 	call	#__system___basic_print_integer
18404     FD 2E 02 F6 | 	mov	local09, result1
18408     00 12 06 F6 | 	mov	arg01, #0
1840c     0A 14 06 F6 | 	mov	arg02, #10
18410     00 16 06 F6 | 	mov	arg03, #0
18414     94 95 B0 FD | 	call	#__system___basic_print_char
18418     01 30 06 F6 | 	mov	local10, #1
1841c     00 12 06 F6 | 	mov	arg01, #0
18420     2C E3 B0 FD | 	call	#__system___getiolock_0540
18424     FD 00 68 FC | 	wrlong	#0, result1
18428     00 32 06 F6 | 	mov	local11, #0
1842c     94 2C BF FD | 	call	#_pop
18430     FD 26 02 F6 | 	mov	local05, result1
18434     FE 28 02 F6 | 	mov	local06, result2
18438     FF 2A 02 F6 | 	mov	local07, result3
1843c     13 1F 02 F6 | 	mov	local01, local05
18440     14 21 02 F6 | 	mov	local02, local06
18444     15 23 02 F6 | 	mov	local03, local07
18448                 | LR__1993
18448                 | ' 
18448                 | ' if r=print_mod_comma  then
18448     21 24 0E F2 | 	cmp	local04, #33 wz
1844c     AC 01 90 5D |  if_ne	jmp	#LR__1998
18450                 | '   if t1.result_type=result_int then print t1.result.iresult,
18450     1C 22 0E F2 | 	cmp	local03, #28 wz
18454     64 00 90 5D |  if_ne	jmp	#LR__1994
18458     00 12 06 F6 | 	mov	arg01, #0
1845c     F0 E2 B0 FD | 	call	#__system___getiolock_0540
18460     FD 12 02 F6 | 	mov	arg01, result1
18464     A8 88 B0 FD | 	call	#__system___lockmem
18468     00 28 06 F6 | 	mov	local06, #0
1846c     00 12 06 F6 | 	mov	arg01, #0
18470     0F 15 02 F6 | 	mov	arg02, local01
18474     00 16 06 F6 | 	mov	arg03, #0
18478     0A 18 06 F6 | 	mov	arg04, #10
1847c     C8 95 B0 FD | 	call	#__system___basic_print_integer
18480     FD 2A 02 F6 | 	mov	local07, result1
18484     14 27 02 F6 | 	mov	local05, local06
18488     15 27 02 F1 | 	add	local05, local07
1848c     00 32 06 F6 | 	mov	local11, #0
18490     00 12 06 F6 | 	mov	arg01, #0
18494     09 14 06 F6 | 	mov	arg02, #9
18498     00 16 06 F6 | 	mov	arg03, #0
1849c     0C 95 B0 FD | 	call	#__system___basic_print_char
184a0     FD 2E 02 F6 | 	mov	local09, result1
184a4     FD 26 02 F1 | 	add	local05, result1
184a8     00 12 06 F6 | 	mov	arg01, #0
184ac     A0 E2 B0 FD | 	call	#__system___getiolock_0540
184b0     FD 00 68 FC | 	wrlong	#0, result1
184b4     00 FA 05 F6 | 	mov	result1, #0
184b8     00 30 06 F6 | 	mov	local10, #0
184bc                 | LR__1994
184bc                 | '   if t1.result_type=result_uint then print t1.result.uresult,
184bc     1D 22 0E F2 | 	cmp	local03, #29 wz
184c0     64 00 90 5D |  if_ne	jmp	#LR__1995
184c4     00 12 06 F6 | 	mov	arg01, #0
184c8     84 E2 B0 FD | 	call	#__system___getiolock_0540
184cc     FD 12 02 F6 | 	mov	arg01, result1
184d0     3C 88 B0 FD | 	call	#__system___lockmem
184d4     00 28 06 F6 | 	mov	local06, #0
184d8     00 12 06 F6 | 	mov	arg01, #0
184dc     0F 15 02 F6 | 	mov	arg02, local01
184e0     00 16 06 F6 | 	mov	arg03, #0
184e4     0A 18 06 F6 | 	mov	arg04, #10
184e8     9C 95 B0 FD | 	call	#__system___basic_print_unsigned
184ec     FD 2A 02 F6 | 	mov	local07, result1
184f0     14 27 02 F6 | 	mov	local05, local06
184f4     15 27 02 F1 | 	add	local05, local07
184f8     00 32 06 F6 | 	mov	local11, #0
184fc     00 12 06 F6 | 	mov	arg01, #0
18500     09 14 06 F6 | 	mov	arg02, #9
18504     00 16 06 F6 | 	mov	arg03, #0
18508     A0 94 B0 FD | 	call	#__system___basic_print_char
1850c     FD 2E 02 F6 | 	mov	local09, result1
18510     FD 26 02 F1 | 	add	local05, result1
18514     00 12 06 F6 | 	mov	arg01, #0
18518     34 E2 B0 FD | 	call	#__system___getiolock_0540
1851c     FD 00 68 FC | 	wrlong	#0, result1
18520     00 FA 05 F6 | 	mov	result1, #0
18524     00 30 06 F6 | 	mov	local10, #0
18528                 | LR__1995
18528                 | '   if t1.result_type=result_float then print t1.result.fresult,
18528     1E 22 0E F2 | 	cmp	local03, #30 wz
1852c     64 00 90 5D |  if_ne	jmp	#LR__1996
18530     00 12 06 F6 | 	mov	arg01, #0
18534     18 E2 B0 FD | 	call	#__system___getiolock_0540
18538     FD 12 02 F6 | 	mov	arg01, result1
1853c     D0 87 B0 FD | 	call	#__system___lockmem
18540     00 28 06 F6 | 	mov	local06, #0
18544     00 12 06 F6 | 	mov	arg01, #0
18548     0F 15 02 F6 | 	mov	arg02, local01
1854c     00 16 06 F6 | 	mov	arg03, #0
18550     23 18 06 F6 | 	mov	arg04, #35
18554     84 B9 B0 FD | 	call	#__system___basic_print_float
18558     FD 2A 02 F6 | 	mov	local07, result1
1855c     14 27 02 F6 | 	mov	local05, local06
18560     15 27 02 F1 | 	add	local05, local07
18564     00 32 06 F6 | 	mov	local11, #0
18568     00 12 06 F6 | 	mov	arg01, #0
1856c     09 14 06 F6 | 	mov	arg02, #9
18570     00 16 06 F6 | 	mov	arg03, #0
18574     34 94 B0 FD | 	call	#__system___basic_print_char
18578     FD 2E 02 F6 | 	mov	local09, result1
1857c     FD 26 02 F1 | 	add	local05, result1
18580     00 12 06 F6 | 	mov	arg01, #0
18584     C8 E1 B0 FD | 	call	#__system___getiolock_0540
18588     FD 00 68 FC | 	wrlong	#0, result1
1858c     00 FA 05 F6 | 	mov	result1, #0
18590     00 30 06 F6 | 	mov	local10, #0
18594                 | LR__1996
18594                 | '   if t1.result_type=result_string then print t1.result.sresult,
18594     1F 22 0E F2 | 	cmp	local03, #31 wz
18598     60 00 90 5D |  if_ne	jmp	#LR__1997
1859c     00 12 06 F6 | 	mov	arg01, #0
185a0     AC E1 B0 FD | 	call	#__system___getiolock_0540
185a4     FD 12 02 F6 | 	mov	arg01, result1
185a8     64 87 B0 FD | 	call	#__system___lockmem
185ac     00 28 06 F6 | 	mov	local06, #0
185b0     00 12 06 F6 | 	mov	arg01, #0
185b4     0F 15 02 F6 | 	mov	arg02, local01
185b8     00 16 06 F6 | 	mov	arg03, #0
185bc     44 94 B0 FD | 	call	#__system___basic_print_string
185c0     FD 2A 02 F6 | 	mov	local07, result1
185c4     14 27 02 F6 | 	mov	local05, local06
185c8     15 27 02 F1 | 	add	local05, local07
185cc     00 32 06 F6 | 	mov	local11, #0
185d0     00 12 06 F6 | 	mov	arg01, #0
185d4     09 14 06 F6 | 	mov	arg02, #9
185d8     00 16 06 F6 | 	mov	arg03, #0
185dc     CC 93 B0 FD | 	call	#__system___basic_print_char
185e0     FD 2E 02 F6 | 	mov	local09, result1
185e4     FD 26 02 F1 | 	add	local05, result1
185e8     00 12 06 F6 | 	mov	arg01, #0
185ec     60 E1 B0 FD | 	call	#__system___getiolock_0540
185f0     FD 00 68 FC | 	wrlong	#0, result1
185f4     00 FA 05 F6 | 	mov	result1, #0
185f8     00 30 06 F6 | 	mov	local10, #0
185fc                 | LR__1997
185fc                 | LR__1998
185fc                 | ' if r=print_mod_semicolon then 
185fc     22 24 0E F2 | 	cmp	local04, #34 wz
18600     1C 01 90 5D |  if_ne	jmp	#LR__2003
18604                 | '   if t1.result_type=result_int then print t1.result.iresult;
18604     1C 22 0E F2 | 	cmp	local03, #28 wz
18608     50 00 90 5D |  if_ne	jmp	#LR__1999
1860c     00 12 06 F6 | 	mov	arg01, #0
18610     3C E1 B0 FD | 	call	#__system___getiolock_0540
18614     FD 12 02 F6 | 	mov	arg01, result1
18618     F4 86 B0 FD | 	call	#__system___lockmem
1861c     00 28 06 F6 | 	mov	local06, #0
18620     00 30 06 F6 | 	mov	local10, #0
18624     0A 32 06 F6 | 	mov	local11, #10
18628     00 12 06 F6 | 	mov	arg01, #0
1862c     0F 15 02 F6 | 	mov	arg02, local01
18630     00 16 06 F6 | 	mov	arg03, #0
18634     0A 18 06 F6 | 	mov	arg04, #10
18638     0C 94 B0 FD | 	call	#__system___basic_print_integer
1863c     FD 2A 02 F6 | 	mov	local07, result1
18640     14 27 02 F6 | 	mov	local05, local06
18644     15 27 02 F1 | 	add	local05, local07
18648     00 12 06 F6 | 	mov	arg01, #0
1864c     00 E1 B0 FD | 	call	#__system___getiolock_0540
18650     FD 00 68 FC | 	wrlong	#0, result1
18654     00 FA 05 F6 | 	mov	result1, #0
18658     00 2E 06 F6 | 	mov	local09, #0
1865c                 | LR__1999
1865c                 | '   if t1.result_type=result_uint then print t1.result.uresult;
1865c     1D 22 0E F2 | 	cmp	local03, #29 wz
18660     50 00 90 5D |  if_ne	jmp	#LR__2000
18664     00 12 06 F6 | 	mov	arg01, #0
18668     E4 E0 B0 FD | 	call	#__system___getiolock_0540
1866c     FD 12 02 F6 | 	mov	arg01, result1
18670     9C 86 B0 FD | 	call	#__system___lockmem
18674     00 28 06 F6 | 	mov	local06, #0
18678     00 30 06 F6 | 	mov	local10, #0
1867c     0A 32 06 F6 | 	mov	local11, #10
18680     00 12 06 F6 | 	mov	arg01, #0
18684     0F 15 02 F6 | 	mov	arg02, local01
18688     00 16 06 F6 | 	mov	arg03, #0
1868c     0A 18 06 F6 | 	mov	arg04, #10
18690     F4 93 B0 FD | 	call	#__system___basic_print_unsigned
18694     FD 2A 02 F6 | 	mov	local07, result1
18698     14 27 02 F6 | 	mov	local05, local06
1869c     15 27 02 F1 | 	add	local05, local07
186a0     00 12 06 F6 | 	mov	arg01, #0
186a4     A8 E0 B0 FD | 	call	#__system___getiolock_0540
186a8     FD 00 68 FC | 	wrlong	#0, result1
186ac     00 FA 05 F6 | 	mov	result1, #0
186b0     00 2E 06 F6 | 	mov	local09, #0
186b4                 | LR__2000
186b4                 | '   if t1.result_type=result_float then print t1.result.fresult;
186b4     1E 22 0E F2 | 	cmp	local03, #30 wz
186b8     30 00 90 5D |  if_ne	jmp	#LR__2001
186bc     00 12 06 F6 | 	mov	arg01, #0
186c0     8C E0 B0 FD | 	call	#__system___getiolock_0540
186c4     FD 12 02 F6 | 	mov	arg01, result1
186c8     44 86 B0 FD | 	call	#__system___lockmem
186cc     00 12 06 F6 | 	mov	arg01, #0
186d0     0F 15 02 F6 | 	mov	arg02, local01
186d4     00 16 06 F6 | 	mov	arg03, #0
186d8     23 18 06 F6 | 	mov	arg04, #35
186dc     FC B7 B0 FD | 	call	#__system___basic_print_float
186e0     00 12 06 F6 | 	mov	arg01, #0
186e4     68 E0 B0 FD | 	call	#__system___getiolock_0540
186e8     FD 00 68 FC | 	wrlong	#0, result1
186ec                 | LR__2001
186ec                 | '   if t1.result_type=result_string then print t1.result.sresult;
186ec     1F 22 0E F2 | 	cmp	local03, #31 wz
186f0     2C 00 90 5D |  if_ne	jmp	#LR__2002
186f4     00 12 06 F6 | 	mov	arg01, #0
186f8     54 E0 B0 FD | 	call	#__system___getiolock_0540
186fc     FD 12 02 F6 | 	mov	arg01, result1
18700     0C 86 B0 FD | 	call	#__system___lockmem
18704     00 12 06 F6 | 	mov	arg01, #0
18708     0F 15 02 F6 | 	mov	arg02, local01
1870c     00 16 06 F6 | 	mov	arg03, #0
18710     F0 92 B0 FD | 	call	#__system___basic_print_string
18714     00 12 06 F6 | 	mov	arg01, #0
18718     34 E0 B0 FD | 	call	#__system___getiolock_0540
1871c     FD 00 68 FC | 	wrlong	#0, result1
18720                 | LR__2002
18720                 | LR__2003
18720                 | ' if r=0 then 
18720     00 24 0E F2 | 	cmp	local04, #0 wz
18724     1C 01 90 5D |  if_ne	jmp	#LR__2008
18728                 | '   if t1.result_type=result_int then print t1.result.iresult
18728     1C 22 0E F2 | 	cmp	local03, #28 wz
1872c     40 00 90 5D |  if_ne	jmp	#LR__2004
18730     00 12 06 F6 | 	mov	arg01, #0
18734     18 E0 B0 FD | 	call	#__system___getiolock_0540
18738     FD 12 02 F6 | 	mov	arg01, result1
1873c     D0 85 B0 FD | 	call	#__system___lockmem
18740     00 12 06 F6 | 	mov	arg01, #0
18744     0F 15 02 F6 | 	mov	arg02, local01
18748     00 16 06 F6 | 	mov	arg03, #0
1874c     0A 18 06 F6 | 	mov	arg04, #10
18750     F4 92 B0 FD | 	call	#__system___basic_print_integer
18754     00 12 06 F6 | 	mov	arg01, #0
18758     0A 14 06 F6 | 	mov	arg02, #10
1875c     00 16 06 F6 | 	mov	arg03, #0
18760     48 92 B0 FD | 	call	#__system___basic_print_char
18764     00 12 06 F6 | 	mov	arg01, #0
18768     E4 DF B0 FD | 	call	#__system___getiolock_0540
1876c     FD 00 68 FC | 	wrlong	#0, result1
18770                 | LR__2004
18770                 | '   if t1.result_type=result_uint then print t1.result.uresult
18770     1D 22 0E F2 | 	cmp	local03, #29 wz
18774     40 00 90 5D |  if_ne	jmp	#LR__2005
18778     00 12 06 F6 | 	mov	arg01, #0
1877c     D0 DF B0 FD | 	call	#__system___getiolock_0540
18780     FD 12 02 F6 | 	mov	arg01, result1
18784     88 85 B0 FD | 	call	#__system___lockmem
18788     00 12 06 F6 | 	mov	arg01, #0
1878c     0F 15 02 F6 | 	mov	arg02, local01
18790     00 16 06 F6 | 	mov	arg03, #0
18794     0A 18 06 F6 | 	mov	arg04, #10
18798     EC 92 B0 FD | 	call	#__system___basic_print_unsigned
1879c     00 12 06 F6 | 	mov	arg01, #0
187a0     0A 14 06 F6 | 	mov	arg02, #10
187a4     00 16 06 F6 | 	mov	arg03, #0
187a8     00 92 B0 FD | 	call	#__system___basic_print_char
187ac     00 12 06 F6 | 	mov	arg01, #0
187b0     9C DF B0 FD | 	call	#__system___getiolock_0540
187b4     FD 00 68 FC | 	wrlong	#0, result1
187b8                 | LR__2005
187b8                 | '   if t1.result_type=result_float then print t1.result.fresult
187b8     1E 22 0E F2 | 	cmp	local03, #30 wz
187bc     40 00 90 5D |  if_ne	jmp	#LR__2006
187c0     00 12 06 F6 | 	mov	arg01, #0
187c4     88 DF B0 FD | 	call	#__system___getiolock_0540
187c8     FD 12 02 F6 | 	mov	arg01, result1
187cc     40 85 B0 FD | 	call	#__system___lockmem
187d0     00 12 06 F6 | 	mov	arg01, #0
187d4     0F 15 02 F6 | 	mov	arg02, local01
187d8     00 16 06 F6 | 	mov	arg03, #0
187dc     23 18 06 F6 | 	mov	arg04, #35
187e0     F8 B6 B0 FD | 	call	#__system___basic_print_float
187e4     00 12 06 F6 | 	mov	arg01, #0
187e8     0A 14 06 F6 | 	mov	arg02, #10
187ec     00 16 06 F6 | 	mov	arg03, #0
187f0     B8 91 B0 FD | 	call	#__system___basic_print_char
187f4     00 12 06 F6 | 	mov	arg01, #0
187f8     54 DF B0 FD | 	call	#__system___getiolock_0540
187fc     FD 00 68 FC | 	wrlong	#0, result1
18800                 | LR__2006
18800                 | '   if t1.result_type=result_string then print t1.result.sresult
18800     1F 22 0E F2 | 	cmp	local03, #31 wz
18804     3C 00 90 5D |  if_ne	jmp	#LR__2007
18808     00 12 06 F6 | 	mov	arg01, #0
1880c     40 DF B0 FD | 	call	#__system___getiolock_0540
18810     FD 12 02 F6 | 	mov	arg01, result1
18814     F8 84 B0 FD | 	call	#__system___lockmem
18818     00 12 06 F6 | 	mov	arg01, #0
1881c     0F 15 02 F6 | 	mov	arg02, local01
18820     00 16 06 F6 | 	mov	arg03, #0
18824     DC 91 B0 FD | 	call	#__system___basic_print_string
18828     00 12 06 F6 | 	mov	arg01, #0
1882c     0A 14 06 F6 | 	mov	arg02, #10
18830     00 16 06 F6 | 	mov	arg03, #0
18834     74 91 B0 FD | 	call	#__system___basic_print_char
18838     00 12 06 F6 | 	mov	arg01, #0
1883c     10 DF B0 FD | 	call	#__system___getiolock_0540
18840     FD 00 68 FC | 	wrlong	#0, result1
18844                 | LR__2007
18844                 | LR__2008
18844                 | ' if r=print_mod_empty then print
18844     20 24 0E F2 | 	cmp	local04, #32 wz
18848     2C 00 90 5D |  if_ne	jmp	#LR__2009
1884c     00 12 06 F6 | 	mov	arg01, #0
18850     FC DE B0 FD | 	call	#__system___getiolock_0540
18854     FD 12 02 F6 | 	mov	arg01, result1
18858     B4 84 B0 FD | 	call	#__system___lockmem
1885c     00 12 06 F6 | 	mov	arg01, #0
18860     0A 14 06 F6 | 	mov	arg02, #10
18864     00 16 06 F6 | 	mov	arg03, #0
18868     40 91 B0 FD | 	call	#__system___basic_print_char
1886c     00 12 06 F6 | 	mov	arg01, #0
18870     DC DE B0 FD | 	call	#__system___getiolock_0540
18874     FD 00 68 FC | 	wrlong	#0, result1
18878                 | LR__2009
18878                 | LR__2010
18878     A7 F0 03 F6 | 	mov	ptra, fp
1887c     B2 00 A0 FD | 	call	#popregs_
18880                 | _do_print_ret
18880     2D 00 64 FD | 	ret
18884                 | 
18884                 | ' 
18884                 | ' 
18884                 | ' sub do_paper
18884                 | _do_paper
18884     03 4A 05 F6 | 	mov	COUNT_, #3
18888     A8 00 A0 FD | 	call	#pushregs_
1888c     34 28 BF FD | 	call	#_pop
18890     FD 1E 02 F6 | 	mov	local01, result1
18894     FE 20 02 F6 | 	mov	local02, result2
18898     FF 22 02 F6 | 	mov	local03, result3
1889c                 | ' t1=pop() 
1889c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1889c     1E 22 0E F2 | 	cmp	local03, #30 wz
188a0     10 00 90 5D |  if_ne	jmp	#LR__2020
188a4     0F 13 02 F6 | 	mov	arg01, local01
188a8     00 14 06 F6 | 	mov	arg02, #0
188ac     DC B4 B0 FD | 	call	#__system___float_tointeger
188b0     FD 1E 02 F6 | 	mov	local01, result1
188b4                 | LR__2020
188b4                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
188b4     1F 22 0E F2 | 	cmp	local03, #31 wz
188b8     18 00 90 5D |  if_ne	jmp	#LR__2021
188bc     0F 13 02 F6 | 	mov	arg01, local01
188c0     E8 B7 B0 FD | 	call	#__system____builtin_atof
188c4     FD 12 02 F6 | 	mov	arg01, result1
188c8     00 14 06 F6 | 	mov	arg02, #0
188cc     BC B4 B0 FD | 	call	#__system___float_tointeger
188d0     FD 1E 02 F6 | 	mov	local01, result1
188d4                 | LR__2021
188d4     37 00 00 FF 
188d8     68 E4 05 F1 | 	add	objptr, ##28264
188dc     F2 1E 62 FC | 	wrlong	local01, objptr
188e0     04 E4 05 F1 | 	add	objptr, #4
188e4     F2 12 02 FB | 	rdlong	arg01, objptr
188e8                 | ' 
188e8                 | ' write_color:=ff
188e8     37 00 00 FF 
188ec     2B E4 85 F1 | 	sub	objptr, ##28203
188f0     F2 12 62 FC | 	wrlong	arg01, objptr
188f4                 | ' write_background:=bb
188f4     04 E4 05 F1 | 	add	objptr, #4
188f8     F2 1E 62 FC | 	wrlong	local01, objptr
188fc     45 E4 85 F1 | 	sub	objptr, #69
18900     A7 F0 03 F6 | 	mov	ptra, fp
18904     B2 00 A0 FD | 	call	#popregs_
18908                 | _do_paper_ret
18908     2D 00 64 FD | 	ret
1890c                 | 
1890c                 | ' 
1890c                 | ' sub do_ink
1890c                 | _do_ink
1890c     03 4A 05 F6 | 	mov	COUNT_, #3
18910     A8 00 A0 FD | 	call	#pushregs_
18914     AC 27 BF FD | 	call	#_pop
18918     FD 1E 02 F6 | 	mov	local01, result1
1891c     FE 20 02 F6 | 	mov	local02, result2
18920     FF 22 02 F6 | 	mov	local03, result3
18924                 | ' t1=pop() 
18924                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
18924     1E 22 0E F2 | 	cmp	local03, #30 wz
18928     10 00 90 5D |  if_ne	jmp	#LR__2030
1892c     0F 13 02 F6 | 	mov	arg01, local01
18930     00 14 06 F6 | 	mov	arg02, #0
18934     54 B4 B0 FD | 	call	#__system___float_tointeger
18938     FD 1E 02 F6 | 	mov	local01, result1
1893c                 | LR__2030
1893c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1893c     1F 22 0E F2 | 	cmp	local03, #31 wz
18940     18 00 90 5D |  if_ne	jmp	#LR__2031
18944     0F 13 02 F6 | 	mov	arg01, local01
18948     60 B7 B0 FD | 	call	#__system____builtin_atof
1894c     FD 12 02 F6 | 	mov	arg01, result1
18950     00 14 06 F6 | 	mov	arg02, #0
18954     34 B4 B0 FD | 	call	#__system___float_tointeger
18958     FD 1E 02 F6 | 	mov	local01, result1
1895c                 | LR__2031
1895c     37 00 00 FF 
18960     6C E4 05 F1 | 	add	objptr, ##28268
18964     F2 1E 62 FC | 	wrlong	local01, objptr
18968     04 E4 85 F1 | 	sub	objptr, #4
1896c     F2 14 02 FB | 	rdlong	arg02, objptr
18970                 | ' 
18970                 | ' write_color:=ff
18970     37 00 00 FF 
18974     27 E4 85 F1 | 	sub	objptr, ##28199
18978     F2 1E 62 FC | 	wrlong	local01, objptr
1897c                 | ' write_background:=bb
1897c     04 E4 05 F1 | 	add	objptr, #4
18980     F2 14 62 FC | 	wrlong	arg02, objptr
18984     37 00 00 FF 
18988     27 E4 05 F1 | 	add	objptr, ##28199
1898c     F2 12 02 FB | 	rdlong	arg01, objptr
18990     37 00 00 FF 
18994     6C E4 85 F1 | 	sub	objptr, ##28268
18998     38 5B B0 FD | 	call	#_hg010b_spin2_setcursorcolor
1899c     A7 F0 03 F6 | 	mov	ptra, fp
189a0     B2 00 A0 FD | 	call	#popregs_
189a4                 | _do_ink_ret
189a4     2D 00 64 FD | 	ret
189a8                 | 
189a8                 | ' 
189a8                 | ' 
189a8                 | ' sub do_font
189a8                 | _do_font
189a8     03 4A 05 F6 | 	mov	COUNT_, #3
189ac     A8 00 A0 FD | 	call	#pushregs_
189b0     10 27 BF FD | 	call	#_pop
189b4     FD 1E 02 F6 | 	mov	local01, result1
189b8     FE 20 02 F6 | 	mov	local02, result2
189bc     FF 22 02 F6 | 	mov	local03, result3
189c0                 | ' t1=pop() 
189c0                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
189c0     1E 22 0E F2 | 	cmp	local03, #30 wz
189c4     10 00 90 5D |  if_ne	jmp	#LR__2040
189c8     0F 13 02 F6 | 	mov	arg01, local01
189cc     00 14 06 F6 | 	mov	arg02, #0
189d0     B8 B3 B0 FD | 	call	#__system___float_tointeger
189d4     FD 1E 02 F6 | 	mov	local01, result1
189d8                 | LR__2040
189d8                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
189d8     1F 22 0E F2 | 	cmp	local03, #31 wz
189dc     18 00 90 5D |  if_ne	jmp	#LR__2041
189e0     0F 13 02 F6 | 	mov	arg01, local01
189e4     C4 B6 B0 FD | 	call	#__system____builtin_atof
189e8     FD 12 02 F6 | 	mov	arg01, result1
189ec     00 14 06 F6 | 	mov	arg02, #0
189f0     98 B3 B0 FD | 	call	#__system___float_tointeger
189f4     FD 1E 02 F6 | 	mov	local01, result1
189f8                 | LR__2041
189f8     37 00 00 FF 
189fc     70 E4 05 F1 | 	add	objptr, ##28272
18a00     F2 1E 62 FC | 	wrlong	local01, objptr
18a04     37 00 00 FF 
18a08     70 E4 85 F1 | 	sub	objptr, ##28272
18a0c     02 1E 66 F0 | 	shl	local01, #2
18a10     0F 13 02 F6 | 	mov	arg01, local01
18a14     00 6B B0 FD | 	call	#_hg010b_spin2_setfontfamily
18a18     A7 F0 03 F6 | 	mov	ptra, fp
18a1c     B2 00 A0 FD | 	call	#popregs_
18a20                 | _do_font_ret
18a20     2D 00 64 FD | 	ret
18a24                 | 
18a24                 | ' 
18a24                 | ' sub do_mode
18a24                 | _do_mode
18a24     05 4A 05 F6 | 	mov	COUNT_, #5
18a28     A8 00 A0 FD | 	call	#pushregs_
18a2c     94 26 BF FD | 	call	#_pop
18a30     FD 1E 02 F6 | 	mov	local01, result1
18a34     FE 20 02 F6 | 	mov	local02, result2
18a38     FF 22 02 F6 | 	mov	local03, result3
18a3c                 | ' t1=pop() 
18a3c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
18a3c     1E 22 0E F2 | 	cmp	local03, #30 wz
18a40     10 00 90 5D |  if_ne	jmp	#LR__2050
18a44     0F 13 02 F6 | 	mov	arg01, local01
18a48     00 14 06 F6 | 	mov	arg02, #0
18a4c     3C B3 B0 FD | 	call	#__system___float_tointeger
18a50     FD 1E 02 F6 | 	mov	local01, result1
18a54                 | LR__2050
18a54                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
18a54     1F 22 0E F2 | 	cmp	local03, #31 wz
18a58     18 00 90 5D |  if_ne	jmp	#LR__2051
18a5c     0F 13 02 F6 | 	mov	arg01, local01
18a60     48 B6 B0 FD | 	call	#__system____builtin_atof
18a64     FD 12 02 F6 | 	mov	arg01, result1
18a68     00 14 06 F6 | 	mov	arg02, #0
18a6c     1C B3 B0 FD | 	call	#__system___float_tointeger
18a70     FD 1E 02 F6 | 	mov	local01, result1
18a74                 | LR__2051
18a74                 | ' select case t1.result.iresult
18a74     0F 25 02 F6 | 	mov	local04, local01
18a78     05 24 26 F3 | 	fle	local04, #5
18a7c     30 24 62 FD | 	jmprel	local04
18a80                 | LR__2052
18a80     14 00 90 FD | 	jmp	#LR__2053
18a84     A8 00 90 FD | 	jmp	#LR__2054
18a88     10 01 90 FD | 	jmp	#LR__2055
18a8c     78 01 90 FD | 	jmp	#LR__2056
18a90     E0 01 90 FD | 	jmp	#LR__2057
18a94     70 02 90 FD | 	jmp	#LR__2058
18a98                 | LR__2053
18a98     37 00 00 FF 
18a9c     70 E4 05 F1 | 	add	objptr, ##28272
18aa0     F2 02 68 FC | 	wrlong	#1, objptr
18aa4     04 E4 85 F1 | 	sub	objptr, #4
18aa8     F2 34 69 FC | 	wrlong	#154, objptr
18aac     21 00 00 FF 
18ab0     DC E4 05 F1 | 	add	objptr, ##17116
18ab4     F2 02 68 FC | 	wrlong	#1, objptr
18ab8     21 00 00 FF 
18abc     E0 E4 85 F1 | 	sub	objptr, ##17120
18ac0     F2 26 69 FC | 	wrlong	#147, objptr
18ac4     37 00 00 FF 
18ac8     68 E4 85 F1 | 	sub	objptr, ##28264
18acc     04 12 06 F6 | 	mov	arg01, #4
18ad0     44 6A B0 FD | 	call	#_hg010b_spin2_setfontfamily
18ad4     37 00 00 FF 
18ad8     6C E4 05 F1 | 	add	objptr, ##28268
18adc     F2 12 02 FB | 	rdlong	arg01, objptr
18ae0     04 E4 85 F1 | 	sub	objptr, #4
18ae4     F2 14 02 FB | 	rdlong	arg02, objptr
18ae8                 | ' 
18ae8                 | ' write_color:=ff
18ae8     37 00 00 FF 
18aec     27 E4 85 F1 | 	sub	objptr, ##28199
18af0     F2 12 62 FC | 	wrlong	arg01, objptr
18af4                 | ' write_background:=bb
18af4     04 E4 05 F1 | 	add	objptr, #4
18af8     F2 14 62 FC | 	wrlong	arg02, objptr
18afc     01 00 00 FF 
18b00     00 EA 05 F1 | 	add	ptr__dat__, ##512
18b04     59 00 00 FF 
18b08     A7 E5 05 F1 | 	add	objptr, ##45991
18b0c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
18b10     04 E4 85 F1 | 	sub	objptr, #4
18b14     03 00 80 FF 
18b18     F2 30 69 FC | 	wrlong	##1688, objptr
18b1c     59 00 00 FF 
18b20     E8 E5 85 F1 | 	sub	objptr, ##46056
18b24     01 00 00 FF 
18b28     00 EA 85 F1 | 	sub	ptr__dat__, ##512
18b2c     D8 01 90 FD | 	jmp	#LR__2058
18b30                 | LR__2054
18b30     37 00 00 FF 
18b34     70 E4 05 F1 | 	add	objptr, ##28272
18b38     F2 00 68 FC | 	wrlong	#0, objptr
18b3c     04 E4 85 F1 | 	sub	objptr, #4
18b40     F2 2E 68 FC | 	wrlong	#23, objptr
18b44     21 00 00 FF 
18b48     DC E4 05 F1 | 	add	objptr, ##17116
18b4c     F2 00 68 FC | 	wrlong	#0, objptr
18b50     21 00 00 FF 
18b54     E0 E4 85 F1 | 	sub	objptr, ##17120
18b58     F2 00 68 FC | 	wrlong	#0, objptr
18b5c     37 00 00 FF 
18b60     68 E4 85 F1 | 	sub	objptr, ##28264
18b64     00 12 06 F6 | 	mov	arg01, #0
18b68     AC 69 B0 FD | 	call	#_hg010b_spin2_setfontfamily
18b6c     37 00 00 FF 
18b70     6C E4 05 F1 | 	add	objptr, ##28268
18b74     F2 12 02 FB | 	rdlong	arg01, objptr
18b78     04 E4 85 F1 | 	sub	objptr, #4
18b7c     F2 14 02 FB | 	rdlong	arg02, objptr
18b80                 | ' 
18b80                 | ' write_color:=ff
18b80     37 00 00 FF 
18b84     27 E4 85 F1 | 	sub	objptr, ##28199
18b88     F2 12 62 FC | 	wrlong	arg01, objptr
18b8c                 | ' write_background:=bb
18b8c     04 E4 05 F1 | 	add	objptr, #4
18b90     F2 14 62 FC | 	wrlong	arg02, objptr
18b94     45 E4 85 F1 | 	sub	objptr, #69
18b98     6C 01 90 FD | 	jmp	#LR__2058
18b9c                 | LR__2055
18b9c     37 00 00 FF 
18ba0     70 E4 05 F1 | 	add	objptr, ##28272
18ba4     F2 00 68 FC | 	wrlong	#0, objptr
18ba8     04 E4 85 F1 | 	sub	objptr, #4
18bac     F2 6A 69 FC | 	wrlong	#181, objptr
18bb0     21 00 00 FF 
18bb4     DC E4 05 F1 | 	add	objptr, ##17116
18bb8     F2 00 68 FC | 	wrlong	#0, objptr
18bbc     21 00 00 FF 
18bc0     E0 E4 85 F1 | 	sub	objptr, ##17120
18bc4     F2 00 68 FC | 	wrlong	#0, objptr
18bc8     37 00 00 FF 
18bcc     68 E4 85 F1 | 	sub	objptr, ##28264
18bd0     00 12 06 F6 | 	mov	arg01, #0
18bd4     40 69 B0 FD | 	call	#_hg010b_spin2_setfontfamily
18bd8     37 00 00 FF 
18bdc     6C E4 05 F1 | 	add	objptr, ##28268
18be0     F2 12 02 FB | 	rdlong	arg01, objptr
18be4     04 E4 85 F1 | 	sub	objptr, #4
18be8     F2 14 02 FB | 	rdlong	arg02, objptr
18bec                 | ' 
18bec                 | ' write_color:=ff
18bec     37 00 00 FF 
18bf0     27 E4 85 F1 | 	sub	objptr, ##28199
18bf4     F2 12 62 FC | 	wrlong	arg01, objptr
18bf8                 | ' write_background:=bb
18bf8     04 E4 05 F1 | 	add	objptr, #4
18bfc     F2 14 62 FC | 	wrlong	arg02, objptr
18c00     45 E4 85 F1 | 	sub	objptr, #69
18c04     00 01 90 FD | 	jmp	#LR__2058
18c08                 | LR__2056
18c08     37 00 00 FF 
18c0c     70 E4 05 F1 | 	add	objptr, ##28272
18c10     F2 00 68 FC | 	wrlong	#0, objptr
18c14     04 E4 85 F1 | 	sub	objptr, #4
18c18     F2 1E 68 FC | 	wrlong	#15, objptr
18c1c     21 00 00 FF 
18c20     DC E4 05 F1 | 	add	objptr, ##17116
18c24     F2 00 68 FC | 	wrlong	#0, objptr
18c28     21 00 00 FF 
18c2c     E0 E4 85 F1 | 	sub	objptr, ##17120
18c30     F2 00 68 FC | 	wrlong	#0, objptr
18c34     37 00 00 FF 
18c38     68 E4 85 F1 | 	sub	objptr, ##28264
18c3c     00 12 06 F6 | 	mov	arg01, #0
18c40     D4 68 B0 FD | 	call	#_hg010b_spin2_setfontfamily
18c44     37 00 00 FF 
18c48     6C E4 05 F1 | 	add	objptr, ##28268
18c4c     F2 12 02 FB | 	rdlong	arg01, objptr
18c50     04 E4 85 F1 | 	sub	objptr, #4
18c54     F2 14 02 FB | 	rdlong	arg02, objptr
18c58                 | ' 
18c58                 | ' write_color:=ff
18c58     37 00 00 FF 
18c5c     27 E4 85 F1 | 	sub	objptr, ##28199
18c60     F2 12 62 FC | 	wrlong	arg01, objptr
18c64                 | ' write_background:=bb
18c64     04 E4 05 F1 | 	add	objptr, #4
18c68     F2 14 62 FC | 	wrlong	arg02, objptr
18c6c     45 E4 85 F1 | 	sub	objptr, #69
18c70     94 00 90 FD | 	jmp	#LR__2058
18c74                 | LR__2057
18c74     37 00 00 FF 
18c78     70 E4 05 F1 | 	add	objptr, ##28272
18c7c     F2 02 68 FC | 	wrlong	#1, objptr
18c80     04 E4 85 F1 | 	sub	objptr, #4
18c84     F2 02 68 FC | 	wrlong	#1, objptr
18c88     21 00 00 FF 
18c8c     DC E4 05 F1 | 	add	objptr, ##17116
18c90     F2 02 68 FC | 	wrlong	#1, objptr
18c94     21 00 00 FF 
18c98     E0 E4 85 F1 | 	sub	objptr, ##17120
18c9c     F2 1C 68 FC | 	wrlong	#14, objptr
18ca0     37 00 00 FF 
18ca4     68 E4 85 F1 | 	sub	objptr, ##28264
18ca8     04 12 06 F6 | 	mov	arg01, #4
18cac     68 68 B0 FD | 	call	#_hg010b_spin2_setfontfamily
18cb0     37 00 00 FF 
18cb4     6C E4 05 F1 | 	add	objptr, ##28268
18cb8     F2 12 02 FB | 	rdlong	arg01, objptr
18cbc     04 E4 85 F1 | 	sub	objptr, #4
18cc0     F2 14 02 FB | 	rdlong	arg02, objptr
18cc4                 | ' 
18cc4                 | ' write_color:=ff
18cc4     37 00 00 FF 
18cc8     27 E4 85 F1 | 	sub	objptr, ##28199
18ccc     F2 12 62 FC | 	wrlong	arg01, objptr
18cd0                 | ' write_background:=bb
18cd0     04 E4 05 F1 | 	add	objptr, #4
18cd4     F2 14 62 FC | 	wrlong	arg02, objptr
18cd8     07 00 00 FF 
18cdc     8A EB 05 F1 | 	add	ptr__dat__, ##3978
18ce0     59 00 00 FF 
18ce4     A7 E5 05 F1 | 	add	objptr, ##45991
18ce8     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
18cec     04 E4 85 F1 | 	sub	objptr, #4
18cf0     03 00 80 FF 
18cf4     F2 30 69 FC | 	wrlong	##1688, objptr
18cf8     59 00 00 FF 
18cfc     E8 E5 85 F1 | 	sub	objptr, ##46056
18d00     07 00 00 FF 
18d04     8A EB 85 F1 | 	sub	ptr__dat__, ##3978
18d08                 | LR__2058
18d08     59 00 00 FF 
18d0c     E4 E5 05 F1 | 	add	objptr, ##46052
18d10     F2 1E 62 FC | 	wrlong	local01, objptr
18d14     04 E4 85 F1 | 	sub	objptr, #4
18d18     F2 12 02 FB | 	rdlong	arg01, objptr
18d1c     16 00 00 FF 
18d20     54 E5 85 F1 | 	sub	objptr, ##11604
18d24     F2 26 02 FB | 	rdlong	local05, objptr
18d28     43 00 00 FF 
18d2c     8C E4 85 F1 | 	sub	objptr, ##34444
18d30     13 13 82 F1 | 	sub	arg01, local05
18d34     00 14 06 F6 | 	mov	arg02, #0
18d38     0A 16 06 F6 | 	mov	arg03, #10
18d3c     A0 A2 B0 FD | 	call	#__system__Number_S
18d40     FD 12 02 F6 | 	mov	arg01, result1
18d44     86 01 00 FF 
18d48     E7 15 06 F6 | 	mov	arg02, ##@LR__5436
18d4c     1C 80 B0 FD | 	call	#__system___string_concat
18d50     58 00 00 FF 
18d54     44 E5 05 F1 | 	add	objptr, ##45380
18d58     F2 FA 61 FC | 	wrlong	result1, objptr
18d5c     21 00 00 FF 
18d60     D8 E4 85 F1 | 	sub	objptr, ##17112
18d64     F2 12 02 FB | 	rdlong	arg01, objptr
18d68     04 E4 85 F1 | 	sub	objptr, #4
18d6c     F2 14 02 FB | 	rdlong	arg02, objptr
18d70     37 00 00 FF 
18d74     68 E4 85 F1 | 	sub	objptr, ##28264
18d78     EC 68 B0 FD | 	call	#_hg010b_spin2_cls
18d7c     86 01 00 FF 
18d80     F9 13 06 F6 | 	mov	arg01, ##@LR__5437
18d84                 | ' 
18d84                 | ' write(text)
18d84     A0 6C B0 FD | 	call	#_hg010b_spin2_write
18d88                 | ' crlf
18d88     68 6F B0 FD | 	call	#_hg010b_spin2_crlf
18d8c     18 00 00 FF 
18d90     4C EB 05 F1 | 	add	ptr__dat__, ##12620
18d94     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
18d98     18 00 00 FF 
18d9c     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
18da0                 | ' 
18da0                 | ' write(text)
18da0     84 6C B0 FD | 	call	#_hg010b_spin2_write
18da4                 | ' crlf
18da4     4C 6F B0 FD | 	call	#_hg010b_spin2_crlf
18da8     58 00 00 FF 
18dac     44 E5 05 F1 | 	add	objptr, ##45380
18db0     F2 12 02 FB | 	rdlong	arg01, objptr
18db4     58 00 00 FF 
18db8     44 E5 85 F1 | 	sub	objptr, ##45380
18dbc                 | ' 
18dbc                 | ' write(text)
18dbc     68 6C B0 FD | 	call	#_hg010b_spin2_write
18dc0                 | ' crlf
18dc0     30 6F B0 FD | 	call	#_hg010b_spin2_crlf
18dc4     A7 F0 03 F6 | 	mov	ptra, fp
18dc8     B2 00 A0 FD | 	call	#popregs_
18dcc                 | _do_mode_ret
18dcc     2D 00 64 FD | 	ret
18dd0                 | 
18dd0                 | ' 
18dd0                 | ' sub do_setwave
18dd0                 | _do_setwave
18dd0     02 4A 05 F6 | 	mov	COUNT_, #2
18dd4     A8 00 A0 FD | 	call	#pushregs_
18dd8     18 F0 07 F1 | 	add	ptra, #24
18ddc     E4 22 BF FD | 	call	#_pop
18de0     FD 12 02 F6 | 	mov	arg01, result1
18de4     FE 1E 02 F6 | 	mov	local01, result2
18de8     FF 20 02 F6 | 	mov	local02, result3
18dec     A7 12 62 FC | 	wrlong	arg01, fp
18df0     04 4E 05 F1 | 	add	fp, #4
18df4     A7 1E 62 FC | 	wrlong	local01, fp
18df8     04 4E 05 F1 | 	add	fp, #4
18dfc     A7 20 62 FC | 	wrlong	local02, fp
18e00     08 4E 85 F1 | 	sub	fp, #8
18e04     BC 22 BF FD | 	call	#_pop
18e08     FD 20 02 F6 | 	mov	local02, result1
18e0c     0C 4E 05 F1 | 	add	fp, #12
18e10     A7 20 62 FC | 	wrlong	local02, fp
18e14     04 4E 05 F1 | 	add	fp, #4
18e18     A7 FC 61 FC | 	wrlong	result2, fp
18e1c     04 4E 05 F1 | 	add	fp, #4
18e20     A7 FE 61 FC | 	wrlong	result3, fp
18e24     08 4E 85 F1 | 	sub	fp, #8
18e28     A7 12 02 F6 | 	mov	arg01, fp
18e2c     0C 4E 85 F1 | 	sub	fp, #12
18e30     60 C3 BF FD | 	call	#_converttoint
18e34     FD 20 02 F6 | 	mov	local02, result1
18e38     10 1F 02 F6 | 	mov	local01, local02
18e3c     01 1E 66 F0 | 	shl	local01, #1
18e40     10 1F 02 F1 | 	add	local01, local02
18e44     03 1E 66 F0 | 	shl	local01, #3
18e48     14 00 00 FF 
18e4c     68 E5 05 F1 | 	add	objptr, ##10600
18e50     F2 1E 02 F1 | 	add	local01, objptr
18e54     A7 12 02 F6 | 	mov	arg01, fp
18e58     14 00 00 FF 
18e5c     68 E5 85 F1 | 	sub	objptr, ##10600
18e60     30 C3 BF FD | 	call	#_converttoint
18e64     04 1E 06 F1 | 	add	local01, #4
18e68     0F FB 41 FC | 	wrbyte	result1, local01
18e6c     A7 F0 03 F6 | 	mov	ptra, fp
18e70     B2 00 A0 FD | 	call	#popregs_
18e74                 | _do_setwave_ret
18e74     2D 00 64 FD | 	ret
18e78                 | 
18e78                 | ' 
18e78                 | ' sub do_setsustain
18e78                 | _do_setsustain
18e78     02 4A 05 F6 | 	mov	COUNT_, #2
18e7c     A8 00 A0 FD | 	call	#pushregs_
18e80     18 F0 07 F1 | 	add	ptra, #24
18e84     3C 22 BF FD | 	call	#_pop
18e88     FD 12 02 F6 | 	mov	arg01, result1
18e8c     FE 1E 02 F6 | 	mov	local01, result2
18e90     FF 20 02 F6 | 	mov	local02, result3
18e94     A7 12 62 FC | 	wrlong	arg01, fp
18e98     04 4E 05 F1 | 	add	fp, #4
18e9c     A7 1E 62 FC | 	wrlong	local01, fp
18ea0     04 4E 05 F1 | 	add	fp, #4
18ea4     A7 20 62 FC | 	wrlong	local02, fp
18ea8     08 4E 85 F1 | 	sub	fp, #8
18eac     14 22 BF FD | 	call	#_pop
18eb0     FD 20 02 F6 | 	mov	local02, result1
18eb4     0C 4E 05 F1 | 	add	fp, #12
18eb8     A7 20 62 FC | 	wrlong	local02, fp
18ebc     04 4E 05 F1 | 	add	fp, #4
18ec0     A7 FC 61 FC | 	wrlong	result2, fp
18ec4     04 4E 05 F1 | 	add	fp, #4
18ec8     A7 FE 61 FC | 	wrlong	result3, fp
18ecc     08 4E 85 F1 | 	sub	fp, #8
18ed0     A7 12 02 F6 | 	mov	arg01, fp
18ed4     0C 4E 85 F1 | 	sub	fp, #12
18ed8     B8 C2 BF FD | 	call	#_converttoint
18edc     FD 20 02 F6 | 	mov	local02, result1
18ee0     10 1F 02 F6 | 	mov	local01, local02
18ee4     01 1E 66 F0 | 	shl	local01, #1
18ee8     10 1F 02 F1 | 	add	local01, local02
18eec     03 1E 66 F0 | 	shl	local01, #3
18ef0     14 00 00 FF 
18ef4     68 E5 05 F1 | 	add	objptr, ##10600
18ef8     F2 1E 02 F1 | 	add	local01, objptr
18efc     A7 12 02 F6 | 	mov	arg01, fp
18f00     14 00 00 FF 
18f04     68 E5 85 F1 | 	sub	objptr, ##10600
18f08     88 C2 BF FD | 	call	#_converttoint
18f0c     14 1E 06 F1 | 	add	local01, #20
18f10     0F FB 51 FC | 	wrword	result1, local01
18f14     A7 F0 03 F6 | 	mov	ptra, fp
18f18     B2 00 A0 FD | 	call	#popregs_
18f1c                 | _do_setsustain_ret
18f1c     2D 00 64 FD | 	ret
18f20                 | 
18f20                 | ' 
18f20                 | ' sub do_setenv
18f20                 | _do_setenv
18f20     02 4A 05 F6 | 	mov	COUNT_, #2
18f24     A8 00 A0 FD | 	call	#pushregs_
18f28     18 F0 07 F1 | 	add	ptra, #24
18f2c     94 21 BF FD | 	call	#_pop
18f30     FD 12 02 F6 | 	mov	arg01, result1
18f34     FE 1E 02 F6 | 	mov	local01, result2
18f38     FF 20 02 F6 | 	mov	local02, result3
18f3c     A7 12 62 FC | 	wrlong	arg01, fp
18f40     04 4E 05 F1 | 	add	fp, #4
18f44     A7 1E 62 FC | 	wrlong	local01, fp
18f48     04 4E 05 F1 | 	add	fp, #4
18f4c     A7 20 62 FC | 	wrlong	local02, fp
18f50     08 4E 85 F1 | 	sub	fp, #8
18f54     6C 21 BF FD | 	call	#_pop
18f58     FD 20 02 F6 | 	mov	local02, result1
18f5c     0C 4E 05 F1 | 	add	fp, #12
18f60     A7 20 62 FC | 	wrlong	local02, fp
18f64     04 4E 05 F1 | 	add	fp, #4
18f68     A7 FC 61 FC | 	wrlong	result2, fp
18f6c     04 4E 05 F1 | 	add	fp, #4
18f70     A7 FE 61 FC | 	wrlong	result3, fp
18f74     08 4E 85 F1 | 	sub	fp, #8
18f78     A7 12 02 F6 | 	mov	arg01, fp
18f7c     0C 4E 85 F1 | 	sub	fp, #12
18f80     10 C2 BF FD | 	call	#_converttoint
18f84     FD 20 02 F6 | 	mov	local02, result1
18f88     10 1F 02 F6 | 	mov	local01, local02
18f8c     01 1E 66 F0 | 	shl	local01, #1
18f90     10 1F 02 F1 | 	add	local01, local02
18f94     03 1E 66 F0 | 	shl	local01, #3
18f98     14 00 00 FF 
18f9c     68 E5 05 F1 | 	add	objptr, ##10600
18fa0     F2 1E 02 F1 | 	add	local01, objptr
18fa4     A7 12 02 F6 | 	mov	arg01, fp
18fa8     14 00 00 FF 
18fac     68 E5 85 F1 | 	sub	objptr, ##10600
18fb0     E0 C1 BF FD | 	call	#_converttoint
18fb4     05 1E 06 F1 | 	add	local01, #5
18fb8     0F FB 41 FC | 	wrbyte	result1, local01
18fbc     A7 F0 03 F6 | 	mov	ptra, fp
18fc0     B2 00 A0 FD | 	call	#popregs_
18fc4                 | _do_setenv_ret
18fc4     2D 00 64 FD | 	ret
18fc8                 | 
18fc8                 | ' 
18fc8                 | ' sub do_setdelay
18fc8                 | _do_setdelay
18fc8     02 4A 05 F6 | 	mov	COUNT_, #2
18fcc     A8 00 A0 FD | 	call	#pushregs_
18fd0     18 F0 07 F1 | 	add	ptra, #24
18fd4     EC 20 BF FD | 	call	#_pop
18fd8     FD 12 02 F6 | 	mov	arg01, result1
18fdc     FE 1E 02 F6 | 	mov	local01, result2
18fe0     FF 20 02 F6 | 	mov	local02, result3
18fe4     A7 12 62 FC | 	wrlong	arg01, fp
18fe8     04 4E 05 F1 | 	add	fp, #4
18fec     A7 1E 62 FC | 	wrlong	local01, fp
18ff0     04 4E 05 F1 | 	add	fp, #4
18ff4     A7 20 62 FC | 	wrlong	local02, fp
18ff8     08 4E 85 F1 | 	sub	fp, #8
18ffc     C4 20 BF FD | 	call	#_pop
19000     FD 20 02 F6 | 	mov	local02, result1
19004     0C 4E 05 F1 | 	add	fp, #12
19008     A7 20 62 FC | 	wrlong	local02, fp
1900c     04 4E 05 F1 | 	add	fp, #4
19010     A7 FC 61 FC | 	wrlong	result2, fp
19014     04 4E 05 F1 | 	add	fp, #4
19018     A7 FE 61 FC | 	wrlong	result3, fp
1901c     08 4E 85 F1 | 	sub	fp, #8
19020     A7 12 02 F6 | 	mov	arg01, fp
19024     0C 4E 85 F1 | 	sub	fp, #12
19028     68 C1 BF FD | 	call	#_converttoint
1902c     FD 20 02 F6 | 	mov	local02, result1
19030     10 1F 02 F6 | 	mov	local01, local02
19034     01 1E 66 F0 | 	shl	local01, #1
19038     10 1F 02 F1 | 	add	local01, local02
1903c     03 1E 66 F0 | 	shl	local01, #3
19040     14 00 00 FF 
19044     68 E5 05 F1 | 	add	objptr, ##10600
19048     F2 1E 02 F1 | 	add	local01, objptr
1904c     A7 12 02 F6 | 	mov	arg01, fp
19050     14 00 00 FF 
19054     68 E5 85 F1 | 	sub	objptr, ##10600
19058     38 C1 BF FD | 	call	#_converttoint
1905c     06 1E 06 F1 | 	add	local01, #6
19060     0F FB 51 FC | 	wrword	result1, local01
19064     A7 F0 03 F6 | 	mov	ptra, fp
19068     B2 00 A0 FD | 	call	#popregs_
1906c                 | _do_setdelay_ret
1906c     2D 00 64 FD | 	ret
19070                 | 
19070                 | ' 
19070                 | ' sub do_setlen
19070                 | _do_setlen
19070     02 4A 05 F6 | 	mov	COUNT_, #2
19074     A8 00 A0 FD | 	call	#pushregs_
19078     18 F0 07 F1 | 	add	ptra, #24
1907c     44 20 BF FD | 	call	#_pop
19080     FD 12 02 F6 | 	mov	arg01, result1
19084     FE 1E 02 F6 | 	mov	local01, result2
19088     FF 20 02 F6 | 	mov	local02, result3
1908c     A7 12 62 FC | 	wrlong	arg01, fp
19090     04 4E 05 F1 | 	add	fp, #4
19094     A7 1E 62 FC | 	wrlong	local01, fp
19098     04 4E 05 F1 | 	add	fp, #4
1909c     A7 20 62 FC | 	wrlong	local02, fp
190a0     08 4E 85 F1 | 	sub	fp, #8
190a4     1C 20 BF FD | 	call	#_pop
190a8     FD 20 02 F6 | 	mov	local02, result1
190ac     0C 4E 05 F1 | 	add	fp, #12
190b0     A7 20 62 FC | 	wrlong	local02, fp
190b4     04 4E 05 F1 | 	add	fp, #4
190b8     A7 FC 61 FC | 	wrlong	result2, fp
190bc     04 4E 05 F1 | 	add	fp, #4
190c0     A7 FE 61 FC | 	wrlong	result3, fp
190c4     08 4E 85 F1 | 	sub	fp, #8
190c8     A7 12 02 F6 | 	mov	arg01, fp
190cc     0C 4E 85 F1 | 	sub	fp, #12
190d0     C0 C0 BF FD | 	call	#_converttoint
190d4     FD 20 02 F6 | 	mov	local02, result1
190d8     10 1F 02 F6 | 	mov	local01, local02
190dc     01 1E 66 F0 | 	shl	local01, #1
190e0     10 1F 02 F1 | 	add	local01, local02
190e4     03 1E 66 F0 | 	shl	local01, #3
190e8     14 00 00 FF 
190ec     68 E5 05 F1 | 	add	objptr, ##10600
190f0     F2 1E 02 F1 | 	add	local01, objptr
190f4     A7 12 02 F6 | 	mov	arg01, fp
190f8     14 00 00 FF 
190fc     68 E5 85 F1 | 	sub	objptr, ##10600
19100     4C C1 BF FD | 	call	#_converttofloat
19104     08 1E 06 F1 | 	add	local01, #8
19108     0F FB 61 FC | 	wrlong	result1, local01
1910c     A7 F0 03 F6 | 	mov	ptra, fp
19110     B2 00 A0 FD | 	call	#popregs_
19114                 | _do_setlen_ret
19114     2D 00 64 FD | 	ret
19118                 | 
19118                 | ' 
19118                 | ' sub do_setvol
19118                 | _do_setvol
19118     02 4A 05 F6 | 	mov	COUNT_, #2
1911c     A8 00 A0 FD | 	call	#pushregs_
19120     18 F0 07 F1 | 	add	ptra, #24
19124     9C 1F BF FD | 	call	#_pop
19128     FD 12 02 F6 | 	mov	arg01, result1
1912c     FE 1E 02 F6 | 	mov	local01, result2
19130     FF 20 02 F6 | 	mov	local02, result3
19134     A7 12 62 FC | 	wrlong	arg01, fp
19138     04 4E 05 F1 | 	add	fp, #4
1913c     A7 1E 62 FC | 	wrlong	local01, fp
19140     04 4E 05 F1 | 	add	fp, #4
19144     A7 20 62 FC | 	wrlong	local02, fp
19148     08 4E 85 F1 | 	sub	fp, #8
1914c     74 1F BF FD | 	call	#_pop
19150     FD 20 02 F6 | 	mov	local02, result1
19154     0C 4E 05 F1 | 	add	fp, #12
19158     A7 20 62 FC | 	wrlong	local02, fp
1915c     04 4E 05 F1 | 	add	fp, #4
19160     A7 FC 61 FC | 	wrlong	result2, fp
19164     04 4E 05 F1 | 	add	fp, #4
19168     A7 FE 61 FC | 	wrlong	result3, fp
1916c     08 4E 85 F1 | 	sub	fp, #8
19170     A7 12 02 F6 | 	mov	arg01, fp
19174     0C 4E 85 F1 | 	sub	fp, #12
19178     18 C0 BF FD | 	call	#_converttoint
1917c     FD 20 02 F6 | 	mov	local02, result1
19180     10 1F 02 F6 | 	mov	local01, local02
19184     01 1E 66 F0 | 	shl	local01, #1
19188     10 1F 02 F1 | 	add	local01, local02
1918c     03 1E 66 F0 | 	shl	local01, #3
19190     14 00 00 FF 
19194     68 E5 05 F1 | 	add	objptr, ##10600
19198     F2 1E 02 F1 | 	add	local01, objptr
1919c     A7 12 02 F6 | 	mov	arg01, fp
191a0     14 00 00 FF 
191a4     68 E5 85 F1 | 	sub	objptr, ##10600
191a8     A4 C0 BF FD | 	call	#_converttofloat
191ac     0C 1E 06 F1 | 	add	local01, #12
191b0     0F FB 61 FC | 	wrlong	result1, local01
191b4     A7 F0 03 F6 | 	mov	ptra, fp
191b8     B2 00 A0 FD | 	call	#popregs_
191bc                 | _do_setvol_ret
191bc     2D 00 64 FD | 	ret
191c0                 | 
191c0                 | ' 
191c0                 | ' sub do_setpan
191c0                 | _do_setpan
191c0     02 4A 05 F6 | 	mov	COUNT_, #2
191c4     A8 00 A0 FD | 	call	#pushregs_
191c8     18 F0 07 F1 | 	add	ptra, #24
191cc     F4 1E BF FD | 	call	#_pop
191d0     FD 12 02 F6 | 	mov	arg01, result1
191d4     FE 1E 02 F6 | 	mov	local01, result2
191d8     FF 20 02 F6 | 	mov	local02, result3
191dc     A7 12 62 FC | 	wrlong	arg01, fp
191e0     04 4E 05 F1 | 	add	fp, #4
191e4     A7 1E 62 FC | 	wrlong	local01, fp
191e8     04 4E 05 F1 | 	add	fp, #4
191ec     A7 20 62 FC | 	wrlong	local02, fp
191f0     08 4E 85 F1 | 	sub	fp, #8
191f4     CC 1E BF FD | 	call	#_pop
191f8     FD 20 02 F6 | 	mov	local02, result1
191fc     0C 4E 05 F1 | 	add	fp, #12
19200     A7 20 62 FC | 	wrlong	local02, fp
19204     04 4E 05 F1 | 	add	fp, #4
19208     A7 FC 61 FC | 	wrlong	result2, fp
1920c     04 4E 05 F1 | 	add	fp, #4
19210     A7 FE 61 FC | 	wrlong	result3, fp
19214     08 4E 85 F1 | 	sub	fp, #8
19218     A7 12 02 F6 | 	mov	arg01, fp
1921c     0C 4E 85 F1 | 	sub	fp, #12
19220     70 BF BF FD | 	call	#_converttoint
19224     FD 20 02 F6 | 	mov	local02, result1
19228     10 1F 02 F6 | 	mov	local01, local02
1922c     01 1E 66 F0 | 	shl	local01, #1
19230     10 1F 02 F1 | 	add	local01, local02
19234     03 1E 66 F0 | 	shl	local01, #3
19238     14 00 00 FF 
1923c     68 E5 05 F1 | 	add	objptr, ##10600
19240     F2 1E 02 F1 | 	add	local01, objptr
19244     A7 12 02 F6 | 	mov	arg01, fp
19248     14 00 00 FF 
1924c     68 E5 85 F1 | 	sub	objptr, ##10600
19250     FC BF BF FD | 	call	#_converttofloat
19254     10 1E 06 F1 | 	add	local01, #16
19258     0F FB 61 FC | 	wrlong	result1, local01
1925c     A7 F0 03 F6 | 	mov	ptra, fp
19260     B2 00 A0 FD | 	call	#popregs_
19264                 | _do_setpan_ret
19264     2D 00 64 FD | 	ret
19268                 | 
19268                 | ' 
19268                 | ' 
19268                 | ' sub do_pinwrite
19268                 | _do_pinwrite
19268     01 4A 05 F6 | 	mov	COUNT_, #1
1926c     A8 00 A0 FD | 	call	#pushregs_
19270     18 F0 07 F1 | 	add	ptra, #24
19274     4C 1E BF FD | 	call	#_pop
19278     FD 14 02 F6 | 	mov	arg02, result1
1927c     FE 12 02 F6 | 	mov	arg01, result2
19280     FF 1E 02 F6 | 	mov	local01, result3
19284     A7 14 62 FC | 	wrlong	arg02, fp
19288     04 4E 05 F1 | 	add	fp, #4
1928c     A7 12 62 FC | 	wrlong	arg01, fp
19290     04 4E 05 F1 | 	add	fp, #4
19294     A7 1E 62 FC | 	wrlong	local01, fp
19298     08 4E 85 F1 | 	sub	fp, #8
1929c     24 1E BF FD | 	call	#_pop
192a0     FF 1E 02 F6 | 	mov	local01, result3
192a4     0C 4E 05 F1 | 	add	fp, #12
192a8     A7 FA 61 FC | 	wrlong	result1, fp
192ac     04 4E 05 F1 | 	add	fp, #4
192b0     A7 FC 61 FC | 	wrlong	result2, fp
192b4     04 4E 05 F1 | 	add	fp, #4
192b8     A7 1E 62 FC | 	wrlong	local01, fp
192bc     08 4E 85 F1 | 	sub	fp, #8
192c0     A7 12 02 F6 | 	mov	arg01, fp
192c4     0C 4E 85 F1 | 	sub	fp, #12
192c8     C8 BE BF FD | 	call	#_converttoint
192cc     FD 1E 02 F6 | 	mov	local01, result1
192d0     A7 12 02 F6 | 	mov	arg01, fp
192d4     BC BE BF FD | 	call	#_converttoint
192d8     FD 14 02 F6 | 	mov	arg02, result1
192dc     0F 13 02 F6 | 	mov	arg01, local01
192e0     E0 7B B0 FD | 	call	#__system___pinwrite
192e4     A7 F0 03 F6 | 	mov	ptra, fp
192e8     B2 00 A0 FD | 	call	#popregs_
192ec                 | _do_pinwrite_ret
192ec     2D 00 64 FD | 	ret
192f0                 | 
192f0                 | ' 
192f0                 | ' sub do_pinfloat
192f0                 | _do_pinfloat
192f0     00 4A 05 F6 | 	mov	COUNT_, #0
192f4     A8 00 A0 FD | 	call	#pushregs_
192f8     0C F0 07 F1 | 	add	ptra, #12
192fc     C4 1D BF FD | 	call	#_pop
19300     A7 FA 61 FC | 	wrlong	result1, fp
19304     04 4E 05 F1 | 	add	fp, #4
19308     A7 FC 61 FC | 	wrlong	result2, fp
1930c     04 4E 05 F1 | 	add	fp, #4
19310     A7 FE 61 FC | 	wrlong	result3, fp
19314     08 4E 85 F1 | 	sub	fp, #8
19318     A7 12 02 F6 | 	mov	arg01, fp
1931c     74 BE BF FD | 	call	#_converttoint
19320     50 FA 61 FD | 	fltl	result1
19324     A7 F0 03 F6 | 	mov	ptra, fp
19328     B2 00 A0 FD | 	call	#popregs_
1932c                 | _do_pinfloat_ret
1932c     2D 00 64 FD | 	ret
19330                 | 
19330                 | ' 
19330                 | ' sub do_pinlo
19330                 | _do_pinlo
19330     00 4A 05 F6 | 	mov	COUNT_, #0
19334     A8 00 A0 FD | 	call	#pushregs_
19338     0C F0 07 F1 | 	add	ptra, #12
1933c     84 1D BF FD | 	call	#_pop
19340     A7 FA 61 FC | 	wrlong	result1, fp
19344     04 4E 05 F1 | 	add	fp, #4
19348     A7 FC 61 FC | 	wrlong	result2, fp
1934c     04 4E 05 F1 | 	add	fp, #4
19350     A7 FE 61 FC | 	wrlong	result3, fp
19354     08 4E 85 F1 | 	sub	fp, #8
19358     A7 12 02 F6 | 	mov	arg01, fp
1935c     34 BE BF FD | 	call	#_converttoint
19360     58 FA 61 FD | 	drvl	result1
19364     A7 F0 03 F6 | 	mov	ptra, fp
19368     B2 00 A0 FD | 	call	#popregs_
1936c                 | _do_pinlo_ret
1936c     2D 00 64 FD | 	ret
19370                 | 
19370                 | ' 
19370                 | ' sub do_pinhi
19370                 | _do_pinhi
19370     00 4A 05 F6 | 	mov	COUNT_, #0
19374     A8 00 A0 FD | 	call	#pushregs_
19378     0C F0 07 F1 | 	add	ptra, #12
1937c     44 1D BF FD | 	call	#_pop
19380     A7 FA 61 FC | 	wrlong	result1, fp
19384     04 4E 05 F1 | 	add	fp, #4
19388     A7 FC 61 FC | 	wrlong	result2, fp
1938c     04 4E 05 F1 | 	add	fp, #4
19390     A7 FE 61 FC | 	wrlong	result3, fp
19394     08 4E 85 F1 | 	sub	fp, #8
19398     A7 12 02 F6 | 	mov	arg01, fp
1939c     F4 BD BF FD | 	call	#_converttoint
193a0     59 FA 61 FD | 	drvh	result1
193a4     A7 F0 03 F6 | 	mov	ptra, fp
193a8     B2 00 A0 FD | 	call	#popregs_
193ac                 | _do_pinhi_ret
193ac     2D 00 64 FD | 	ret
193b0                 | 
193b0                 | ' 
193b0                 | ' sub do_pintoggle
193b0                 | _do_pintoggle
193b0     00 4A 05 F6 | 	mov	COUNT_, #0
193b4     A8 00 A0 FD | 	call	#pushregs_
193b8     0C F0 07 F1 | 	add	ptra, #12
193bc     04 1D BF FD | 	call	#_pop
193c0     A7 FA 61 FC | 	wrlong	result1, fp
193c4     04 4E 05 F1 | 	add	fp, #4
193c8     A7 FC 61 FC | 	wrlong	result2, fp
193cc     04 4E 05 F1 | 	add	fp, #4
193d0     A7 FE 61 FC | 	wrlong	result3, fp
193d4     08 4E 85 F1 | 	sub	fp, #8
193d8     A7 12 02 F6 | 	mov	arg01, fp
193dc     B4 BD BF FD | 	call	#_converttoint
193e0     5F FA 61 FD | 	drvnot	result1
193e4     A7 F0 03 F6 | 	mov	ptra, fp
193e8     B2 00 A0 FD | 	call	#popregs_
193ec                 | _do_pintoggle_ret
193ec     2D 00 64 FD | 	ret
193f0                 | 
193f0                 | ' 
193f0                 | ' 
193f0                 | ' sub do_pinstart
193f0                 | _do_pinstart
193f0     03 4A 05 F6 | 	mov	COUNT_, #3
193f4     A8 00 A0 FD | 	call	#pushregs_
193f8     30 F0 07 F1 | 	add	ptra, #48
193fc     C4 1C BF FD | 	call	#_pop
19400     FD 16 02 F6 | 	mov	arg03, result1
19404     FE 14 02 F6 | 	mov	arg02, result2
19408     FF 18 02 F6 | 	mov	arg04, result3
1940c     A7 16 62 FC | 	wrlong	arg03, fp
19410     04 4E 05 F1 | 	add	fp, #4
19414     A7 14 62 FC | 	wrlong	arg02, fp
19418     04 4E 05 F1 | 	add	fp, #4
1941c     A7 18 62 FC | 	wrlong	arg04, fp
19420     08 4E 85 F1 | 	sub	fp, #8
19424     9C 1C BF FD | 	call	#_pop
19428     FD 16 02 F6 | 	mov	arg03, result1
1942c     FE 14 02 F6 | 	mov	arg02, result2
19430     FF 18 02 F6 | 	mov	arg04, result3
19434     0C 4E 05 F1 | 	add	fp, #12
19438     A7 16 62 FC | 	wrlong	arg03, fp
1943c     04 4E 05 F1 | 	add	fp, #4
19440     A7 14 62 FC | 	wrlong	arg02, fp
19444     04 4E 05 F1 | 	add	fp, #4
19448     A7 18 62 FC | 	wrlong	arg04, fp
1944c     14 4E 85 F1 | 	sub	fp, #20
19450     70 1C BF FD | 	call	#_pop
19454     FD 16 02 F6 | 	mov	arg03, result1
19458     FE 14 02 F6 | 	mov	arg02, result2
1945c     FF 18 02 F6 | 	mov	arg04, result3
19460     18 4E 05 F1 | 	add	fp, #24
19464     A7 16 62 FC | 	wrlong	arg03, fp
19468     04 4E 05 F1 | 	add	fp, #4
1946c     A7 14 62 FC | 	wrlong	arg02, fp
19470     04 4E 05 F1 | 	add	fp, #4
19474     A7 18 62 FC | 	wrlong	arg04, fp
19478     20 4E 85 F1 | 	sub	fp, #32
1947c     44 1C BF FD | 	call	#_pop
19480     FF 16 02 F6 | 	mov	arg03, result3
19484     24 4E 05 F1 | 	add	fp, #36
19488     A7 FA 61 FC | 	wrlong	result1, fp
1948c     04 4E 05 F1 | 	add	fp, #4
19490     A7 FC 61 FC | 	wrlong	result2, fp
19494     04 4E 05 F1 | 	add	fp, #4
19498     A7 16 62 FC | 	wrlong	arg03, fp
1949c     08 4E 85 F1 | 	sub	fp, #8
194a0     A7 12 02 F6 | 	mov	arg01, fp
194a4     24 4E 85 F1 | 	sub	fp, #36
194a8     E8 BC BF FD | 	call	#_converttoint
194ac     FD 1E 02 F6 | 	mov	local01, result1
194b0     18 4E 05 F1 | 	add	fp, #24
194b4     A7 12 02 F6 | 	mov	arg01, fp
194b8     18 4E 85 F1 | 	sub	fp, #24
194bc     D4 BC BF FD | 	call	#_converttoint
194c0     FD 20 02 F6 | 	mov	local02, result1
194c4     0C 4E 05 F1 | 	add	fp, #12
194c8     A7 12 02 F6 | 	mov	arg01, fp
194cc     0C 4E 85 F1 | 	sub	fp, #12
194d0     C0 BC BF FD | 	call	#_converttoint
194d4     FD 22 02 F6 | 	mov	local03, result1
194d8     A7 12 02 F6 | 	mov	arg01, fp
194dc     B4 BC BF FD | 	call	#_converttoint
194e0     40 1E 62 FD | 	dirl	local01
194e4     0F 21 02 FC | 	wrpin	local02, local01
194e8     0F 23 12 FC | 	wxpin	local03, local01
194ec     0F FB 21 FC | 	wypin	result1, local01
194f0     41 1E 62 FD | 	dirh	local01
194f4     A7 F0 03 F6 | 	mov	ptra, fp
194f8     B2 00 A0 FD | 	call	#popregs_
194fc                 | _do_pinstart_ret
194fc     2D 00 64 FD | 	ret
19500                 | 
19500                 | ' 
19500                 | ' 
19500                 | ' sub do_wrpin
19500                 | _do_wrpin
19500     01 4A 05 F6 | 	mov	COUNT_, #1
19504     A8 00 A0 FD | 	call	#pushregs_
19508     18 F0 07 F1 | 	add	ptra, #24
1950c     B4 1B BF FD | 	call	#_pop
19510     FD 14 02 F6 | 	mov	arg02, result1
19514     FE 12 02 F6 | 	mov	arg01, result2
19518     FF 1E 02 F6 | 	mov	local01, result3
1951c     A7 14 62 FC | 	wrlong	arg02, fp
19520     04 4E 05 F1 | 	add	fp, #4
19524     A7 12 62 FC | 	wrlong	arg01, fp
19528     04 4E 05 F1 | 	add	fp, #4
1952c     A7 1E 62 FC | 	wrlong	local01, fp
19530     08 4E 85 F1 | 	sub	fp, #8
19534     8C 1B BF FD | 	call	#_pop
19538     FF 1E 02 F6 | 	mov	local01, result3
1953c     0C 4E 05 F1 | 	add	fp, #12
19540     A7 FA 61 FC | 	wrlong	result1, fp
19544     04 4E 05 F1 | 	add	fp, #4
19548     A7 FC 61 FC | 	wrlong	result2, fp
1954c     04 4E 05 F1 | 	add	fp, #4
19550     A7 1E 62 FC | 	wrlong	local01, fp
19554     08 4E 85 F1 | 	sub	fp, #8
19558     A7 12 02 F6 | 	mov	arg01, fp
1955c     0C 4E 85 F1 | 	sub	fp, #12
19560     30 BC BF FD | 	call	#_converttoint
19564     FD 1E 02 F6 | 	mov	local01, result1
19568     A7 12 02 F6 | 	mov	arg01, fp
1956c     24 BC BF FD | 	call	#_converttoint
19570     0F FB 01 FC | 	wrpin	result1, local01
19574     A7 F0 03 F6 | 	mov	ptra, fp
19578     B2 00 A0 FD | 	call	#popregs_
1957c                 | _do_wrpin_ret
1957c     2D 00 64 FD | 	ret
19580                 | 
19580                 | ' 
19580                 | ' sub do_wxpin
19580                 | _do_wxpin
19580     01 4A 05 F6 | 	mov	COUNT_, #1
19584     A8 00 A0 FD | 	call	#pushregs_
19588     18 F0 07 F1 | 	add	ptra, #24
1958c     34 1B BF FD | 	call	#_pop
19590     FD 14 02 F6 | 	mov	arg02, result1
19594     FE 12 02 F6 | 	mov	arg01, result2
19598     FF 1E 02 F6 | 	mov	local01, result3
1959c     A7 14 62 FC | 	wrlong	arg02, fp
195a0     04 4E 05 F1 | 	add	fp, #4
195a4     A7 12 62 FC | 	wrlong	arg01, fp
195a8     04 4E 05 F1 | 	add	fp, #4
195ac     A7 1E 62 FC | 	wrlong	local01, fp
195b0     08 4E 85 F1 | 	sub	fp, #8
195b4     0C 1B BF FD | 	call	#_pop
195b8     FF 1E 02 F6 | 	mov	local01, result3
195bc     0C 4E 05 F1 | 	add	fp, #12
195c0     A7 FA 61 FC | 	wrlong	result1, fp
195c4     04 4E 05 F1 | 	add	fp, #4
195c8     A7 FC 61 FC | 	wrlong	result2, fp
195cc     04 4E 05 F1 | 	add	fp, #4
195d0     A7 1E 62 FC | 	wrlong	local01, fp
195d4     08 4E 85 F1 | 	sub	fp, #8
195d8     A7 12 02 F6 | 	mov	arg01, fp
195dc     0C 4E 85 F1 | 	sub	fp, #12
195e0     B0 BB BF FD | 	call	#_converttoint
195e4     FD 1E 02 F6 | 	mov	local01, result1
195e8     A7 12 02 F6 | 	mov	arg01, fp
195ec     A4 BB BF FD | 	call	#_converttoint
195f0     0F FB 11 FC | 	wxpin	result1, local01
195f4     A7 F0 03 F6 | 	mov	ptra, fp
195f8     B2 00 A0 FD | 	call	#popregs_
195fc                 | _do_wxpin_ret
195fc     2D 00 64 FD | 	ret
19600                 | 
19600                 | ' 
19600                 | ' sub do_wypin
19600                 | _do_wypin
19600     01 4A 05 F6 | 	mov	COUNT_, #1
19604     A8 00 A0 FD | 	call	#pushregs_
19608     18 F0 07 F1 | 	add	ptra, #24
1960c     B4 1A BF FD | 	call	#_pop
19610     FD 14 02 F6 | 	mov	arg02, result1
19614     FE 12 02 F6 | 	mov	arg01, result2
19618     FF 1E 02 F6 | 	mov	local01, result3
1961c     A7 14 62 FC | 	wrlong	arg02, fp
19620     04 4E 05 F1 | 	add	fp, #4
19624     A7 12 62 FC | 	wrlong	arg01, fp
19628     04 4E 05 F1 | 	add	fp, #4
1962c     A7 1E 62 FC | 	wrlong	local01, fp
19630     08 4E 85 F1 | 	sub	fp, #8
19634     8C 1A BF FD | 	call	#_pop
19638     FF 1E 02 F6 | 	mov	local01, result3
1963c     0C 4E 05 F1 | 	add	fp, #12
19640     A7 FA 61 FC | 	wrlong	result1, fp
19644     04 4E 05 F1 | 	add	fp, #4
19648     A7 FC 61 FC | 	wrlong	result2, fp
1964c     04 4E 05 F1 | 	add	fp, #4
19650     A7 1E 62 FC | 	wrlong	local01, fp
19654     08 4E 85 F1 | 	sub	fp, #8
19658     A7 12 02 F6 | 	mov	arg01, fp
1965c     0C 4E 85 F1 | 	sub	fp, #12
19660     30 BB BF FD | 	call	#_converttoint
19664     FD 1E 02 F6 | 	mov	local01, result1
19668     A7 12 02 F6 | 	mov	arg01, fp
1966c     24 BB BF FD | 	call	#_converttoint
19670     0F FB 21 FC | 	wypin	result1, local01
19674     A7 F0 03 F6 | 	mov	ptra, fp
19678     B2 00 A0 FD | 	call	#popregs_
1967c                 | _do_wypin_ret
1967c     2D 00 64 FD | 	ret
19680                 | 
19680                 | ' 
19680                 | ' sub do_position
19680                 | _do_position
19680     01 4A 05 F6 | 	mov	COUNT_, #1
19684     A8 00 A0 FD | 	call	#pushregs_
19688     18 F0 07 F1 | 	add	ptra, #24
1968c     34 1A BF FD | 	call	#_pop
19690     FD 14 02 F6 | 	mov	arg02, result1
19694     FE 12 02 F6 | 	mov	arg01, result2
19698     FF 1E 02 F6 | 	mov	local01, result3
1969c     A7 14 62 FC | 	wrlong	arg02, fp
196a0     04 4E 05 F1 | 	add	fp, #4
196a4     A7 12 62 FC | 	wrlong	arg01, fp
196a8     04 4E 05 F1 | 	add	fp, #4
196ac     A7 1E 62 FC | 	wrlong	local01, fp
196b0     08 4E 85 F1 | 	sub	fp, #8
196b4     0C 1A BF FD | 	call	#_pop
196b8     FF 1E 02 F6 | 	mov	local01, result3
196bc     0C 4E 05 F1 | 	add	fp, #12
196c0     A7 FA 61 FC | 	wrlong	result1, fp
196c4     04 4E 05 F1 | 	add	fp, #4
196c8     A7 FC 61 FC | 	wrlong	result2, fp
196cc     04 4E 05 F1 | 	add	fp, #4
196d0     A7 1E 62 FC | 	wrlong	local01, fp
196d4     08 4E 85 F1 | 	sub	fp, #8
196d8     A7 12 02 F6 | 	mov	arg01, fp
196dc     0C 4E 85 F1 | 	sub	fp, #12
196e0     B0 BA BF FD | 	call	#_converttoint
196e4     FD 1E 02 F6 | 	mov	local01, result1
196e8     A7 12 02 F6 | 	mov	arg01, fp
196ec     A4 BA BF FD | 	call	#_converttoint
196f0     FD 14 02 F6 | 	mov	arg02, result1
196f4     0F 13 02 F6 | 	mov	arg01, local01
196f8     5C 5E B0 FD | 	call	#_hg010b_spin2_setcursorpos
196fc     A7 F0 03 F6 | 	mov	ptra, fp
19700     B2 00 A0 FD | 	call	#popregs_
19704                 | _do_position_ret
19704     2D 00 64 FD | 	ret
19708                 | 
19708                 | ' 
19708                 | ' sub do_poke
19708                 | _do_poke
19708     01 4A 05 F6 | 	mov	COUNT_, #1
1970c     A8 00 A0 FD | 	call	#pushregs_
19710     20 F0 07 F1 | 	add	ptra, #32
19714     AC 19 BF FD | 	call	#_pop
19718     FD 14 02 F6 | 	mov	arg02, result1
1971c     FE 12 02 F6 | 	mov	arg01, result2
19720     FF 1E 02 F6 | 	mov	local01, result3
19724     A7 14 62 FC | 	wrlong	arg02, fp
19728     04 4E 05 F1 | 	add	fp, #4
1972c     A7 12 62 FC | 	wrlong	arg01, fp
19730     04 4E 05 F1 | 	add	fp, #4
19734     A7 1E 62 FC | 	wrlong	local01, fp
19738     08 4E 85 F1 | 	sub	fp, #8
1973c     84 19 BF FD | 	call	#_pop
19740     FF 1E 02 F6 | 	mov	local01, result3
19744     0C 4E 05 F1 | 	add	fp, #12
19748     A7 FA 61 FC | 	wrlong	result1, fp
1974c     04 4E 05 F1 | 	add	fp, #4
19750     A7 FC 61 FC | 	wrlong	result2, fp
19754     04 4E 05 F1 | 	add	fp, #4
19758     A7 1E 62 FC | 	wrlong	local01, fp
1975c     08 4E 85 F1 | 	sub	fp, #8
19760     A7 12 02 F6 | 	mov	arg01, fp
19764     0C 4E 85 F1 | 	sub	fp, #12
19768     28 BA BF FD | 	call	#_converttoint
1976c     18 4E 05 F1 | 	add	fp, #24
19770     A7 FA 61 FC | 	wrlong	result1, fp
19774     18 4E 85 F1 | 	sub	fp, #24
19778     A7 12 02 F6 | 	mov	arg01, fp
1977c     14 BA BF FD | 	call	#_converttoint
19780     1C 4E 05 F1 | 	add	fp, #28
19784     A7 FA 61 FC | 	wrlong	result1, fp
19788                 | ' t1=pop() 'value
19788                 | ' t2=pop() 
19788                 | ' a=converttoint(t2) : v=converttoint(t1)
19788                 | ' if a<$80000 then poke a,v else pspoke a,v
19788     04 4E 85 F1 | 	sub	fp, #4
1978c     A7 1E 02 FB | 	rdlong	local01, fp
19790     18 4E 85 F1 | 	sub	fp, #24
19794     00 04 00 FF 
19798     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1979c     1C 00 90 3D |  if_ae	jmp	#LR__2060
197a0     18 4E 05 F1 | 	add	fp, #24
197a4     A7 12 02 FB | 	rdlong	arg01, fp
197a8     04 4E 05 F1 | 	add	fp, #4
197ac     A7 14 02 FB | 	rdlong	arg02, fp
197b0     1C 4E 85 F1 | 	sub	fp, #28
197b4     09 15 42 FC | 	wrbyte	arg02, arg01
197b8     18 00 90 FD | 	jmp	#LR__2061
197bc                 | LR__2060
197bc     18 4E 05 F1 | 	add	fp, #24
197c0     A7 12 02 FB | 	rdlong	arg01, fp
197c4     04 4E 05 F1 | 	add	fp, #4
197c8     A7 14 02 FB | 	rdlong	arg02, fp
197cc     1C 4E 85 F1 | 	sub	fp, #28
197d0     88 32 B0 FD | 	call	#_pspoke
197d4                 | LR__2061
197d4     A7 F0 03 F6 | 	mov	ptra, fp
197d8     B2 00 A0 FD | 	call	#popregs_
197dc                 | _do_poke_ret
197dc     2D 00 64 FD | 	ret
197e0                 | 
197e0                 | ' 
197e0                 | ' sub do_dpoke
197e0                 | _do_dpoke
197e0     01 4A 05 F6 | 	mov	COUNT_, #1
197e4     A8 00 A0 FD | 	call	#pushregs_
197e8     20 F0 07 F1 | 	add	ptra, #32
197ec     D4 18 BF FD | 	call	#_pop
197f0     FD 14 02 F6 | 	mov	arg02, result1
197f4     FE 12 02 F6 | 	mov	arg01, result2
197f8     FF 1E 02 F6 | 	mov	local01, result3
197fc     A7 14 62 FC | 	wrlong	arg02, fp
19800     04 4E 05 F1 | 	add	fp, #4
19804     A7 12 62 FC | 	wrlong	arg01, fp
19808     04 4E 05 F1 | 	add	fp, #4
1980c     A7 1E 62 FC | 	wrlong	local01, fp
19810     08 4E 85 F1 | 	sub	fp, #8
19814     AC 18 BF FD | 	call	#_pop
19818     FF 1E 02 F6 | 	mov	local01, result3
1981c     0C 4E 05 F1 | 	add	fp, #12
19820     A7 FA 61 FC | 	wrlong	result1, fp
19824     04 4E 05 F1 | 	add	fp, #4
19828     A7 FC 61 FC | 	wrlong	result2, fp
1982c     04 4E 05 F1 | 	add	fp, #4
19830     A7 1E 62 FC | 	wrlong	local01, fp
19834     08 4E 85 F1 | 	sub	fp, #8
19838     A7 12 02 F6 | 	mov	arg01, fp
1983c     0C 4E 85 F1 | 	sub	fp, #12
19840     50 B9 BF FD | 	call	#_converttoint
19844     18 4E 05 F1 | 	add	fp, #24
19848     A7 FA 61 FC | 	wrlong	result1, fp
1984c     18 4E 85 F1 | 	sub	fp, #24
19850     A7 12 02 F6 | 	mov	arg01, fp
19854     3C B9 BF FD | 	call	#_converttoint
19858     1C 4E 05 F1 | 	add	fp, #28
1985c     A7 FA 61 FC | 	wrlong	result1, fp
19860                 | ' t1=pop() 'value
19860                 | ' t2=pop() 
19860                 | ' a=converttoint(t2) : v=converttoint(t1)
19860                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
19860     04 4E 85 F1 | 	sub	fp, #4
19864     A7 1E 02 FB | 	rdlong	local01, fp
19868     18 4E 85 F1 | 	sub	fp, #24
1986c     00 04 00 FF 
19870     00 1E 16 F2 | 	cmp	local01, ##524288 wc
19874     1C 00 90 3D |  if_ae	jmp	#LR__2070
19878     18 4E 05 F1 | 	add	fp, #24
1987c     A7 12 02 FB | 	rdlong	arg01, fp
19880     04 4E 05 F1 | 	add	fp, #4
19884     A7 14 02 FB | 	rdlong	arg02, fp
19888     1C 4E 85 F1 | 	sub	fp, #28
1988c     09 15 52 FC | 	wrword	arg02, arg01
19890     18 00 90 FD | 	jmp	#LR__2071
19894                 | LR__2070
19894     18 4E 05 F1 | 	add	fp, #24
19898     A7 12 02 FB | 	rdlong	arg01, fp
1989c     04 4E 05 F1 | 	add	fp, #4
198a0     A7 14 02 FB | 	rdlong	arg02, fp
198a4     1C 4E 85 F1 | 	sub	fp, #28
198a8     68 31 B0 FD | 	call	#_psdpoke
198ac                 | LR__2071
198ac     A7 F0 03 F6 | 	mov	ptra, fp
198b0     B2 00 A0 FD | 	call	#popregs_
198b4                 | _do_dpoke_ret
198b4     2D 00 64 FD | 	ret
198b8                 | 
198b8                 | ' 
198b8                 | ' sub do_lpoke
198b8                 | _do_lpoke
198b8     01 4A 05 F6 | 	mov	COUNT_, #1
198bc     A8 00 A0 FD | 	call	#pushregs_
198c0     20 F0 07 F1 | 	add	ptra, #32
198c4     FC 17 BF FD | 	call	#_pop
198c8     FD 14 02 F6 | 	mov	arg02, result1
198cc     FE 12 02 F6 | 	mov	arg01, result2
198d0     FF 1E 02 F6 | 	mov	local01, result3
198d4     A7 14 62 FC | 	wrlong	arg02, fp
198d8     04 4E 05 F1 | 	add	fp, #4
198dc     A7 12 62 FC | 	wrlong	arg01, fp
198e0     04 4E 05 F1 | 	add	fp, #4
198e4     A7 1E 62 FC | 	wrlong	local01, fp
198e8     08 4E 85 F1 | 	sub	fp, #8
198ec     D4 17 BF FD | 	call	#_pop
198f0     FF 1E 02 F6 | 	mov	local01, result3
198f4     0C 4E 05 F1 | 	add	fp, #12
198f8     A7 FA 61 FC | 	wrlong	result1, fp
198fc     04 4E 05 F1 | 	add	fp, #4
19900     A7 FC 61 FC | 	wrlong	result2, fp
19904     04 4E 05 F1 | 	add	fp, #4
19908     A7 1E 62 FC | 	wrlong	local01, fp
1990c     08 4E 85 F1 | 	sub	fp, #8
19910     A7 12 02 F6 | 	mov	arg01, fp
19914     0C 4E 85 F1 | 	sub	fp, #12
19918     78 B8 BF FD | 	call	#_converttoint
1991c     18 4E 05 F1 | 	add	fp, #24
19920     A7 FA 61 FC | 	wrlong	result1, fp
19924     18 4E 85 F1 | 	sub	fp, #24
19928     A7 12 02 F6 | 	mov	arg01, fp
1992c     64 B8 BF FD | 	call	#_converttoint
19930     1C 4E 05 F1 | 	add	fp, #28
19934     A7 FA 61 FC | 	wrlong	result1, fp
19938                 | ' t1=pop() 'value
19938                 | ' t2=pop() 
19938                 | ' a=converttoint(t2) : v=converttoint(t1)
19938                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
19938     04 4E 85 F1 | 	sub	fp, #4
1993c     A7 1E 02 FB | 	rdlong	local01, fp
19940     18 4E 85 F1 | 	sub	fp, #24
19944     00 04 00 FF 
19948     00 1E 16 F2 | 	cmp	local01, ##524288 wc
1994c     1C 00 90 3D |  if_ae	jmp	#LR__2080
19950     18 4E 05 F1 | 	add	fp, #24
19954     A7 12 02 FB | 	rdlong	arg01, fp
19958     04 4E 05 F1 | 	add	fp, #4
1995c     A7 14 02 FB | 	rdlong	arg02, fp
19960     1C 4E 85 F1 | 	sub	fp, #28
19964     09 15 62 FC | 	wrlong	arg02, arg01
19968     18 00 90 FD | 	jmp	#LR__2081
1996c                 | LR__2080
1996c     18 4E 05 F1 | 	add	fp, #24
19970     A7 12 02 FB | 	rdlong	arg01, fp
19974     04 4E 05 F1 | 	add	fp, #4
19978     A7 14 02 FB | 	rdlong	arg02, fp
1997c     1C 4E 85 F1 | 	sub	fp, #28
19980     48 30 B0 FD | 	call	#_pslpoke
19984                 | LR__2081
19984     A7 F0 03 F6 | 	mov	ptra, fp
19988     B2 00 A0 FD | 	call	#popregs_
1998c                 | _do_lpoke_ret
1998c     2D 00 64 FD | 	ret
19990                 | 
19990                 | ' 
19990                 | ' sub do_peek
19990                 | _do_peek
19990     00 4A 05 F6 | 	mov	COUNT_, #0
19994     A8 00 A0 FD | 	call	#pushregs_
19998     14 F0 07 F1 | 	add	ptra, #20
1999c     24 17 BF FD | 	call	#_pop
199a0     A7 FA 61 FC | 	wrlong	result1, fp
199a4     04 4E 05 F1 | 	add	fp, #4
199a8     A7 FC 61 FC | 	wrlong	result2, fp
199ac     04 4E 05 F1 | 	add	fp, #4
199b0     A7 FE 61 FC | 	wrlong	result3, fp
199b4     08 4E 85 F1 | 	sub	fp, #8
199b8     A7 12 02 F6 | 	mov	arg01, fp
199bc     D4 B7 BF FD | 	call	#_converttoint
199c0     0C 4E 05 F1 | 	add	fp, #12
199c4     A7 FA 61 FC | 	wrlong	result1, fp
199c8                 | ' t1=pop()
199c8                 | ' a=converttoint(t1)
199c8                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
199c8     0C 4E 85 F1 | 	sub	fp, #12
199cc     00 04 00 FF 
199d0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
199d4     1C 00 90 3D |  if_ae	jmp	#LR__2090
199d8     0C 4E 05 F1 | 	add	fp, #12
199dc     A7 12 02 FB | 	rdlong	arg01, fp
199e0     09 FB C1 FA | 	rdbyte	result1, arg01
199e4     04 4E 05 F1 | 	add	fp, #4
199e8     A7 FA 61 FC | 	wrlong	result1, fp
199ec     10 4E 85 F1 | 	sub	fp, #16
199f0     20 00 90 FD | 	jmp	#LR__2091
199f4                 | LR__2090
199f4     0C 4E 05 F1 | 	add	fp, #12
199f8     A7 12 02 FB | 	rdlong	arg01, fp
199fc     0C 4E 85 F1 | 	sub	fp, #12
19a00     A0 30 B0 FD | 	call	#_pspeek
19a04     FD FA E1 F8 | 	getbyte	result1, result1, #0
19a08     10 4E 05 F1 | 	add	fp, #16
19a0c     A7 FA 61 FC | 	wrlong	result1, fp
19a10     10 4E 85 F1 | 	sub	fp, #16
19a14                 | LR__2091
19a14     08 4E 05 F1 | 	add	fp, #8
19a18     A7 3A 68 FC | 	wrlong	#29, fp
19a1c     08 4E 05 F1 | 	add	fp, #8
19a20     A7 12 02 FB | 	rdlong	arg01, fp
19a24     10 4E 85 F1 | 	sub	fp, #16
19a28     A7 12 62 FC | 	wrlong	arg01, fp
19a2c     A7 12 02 F6 | 	mov	arg01, fp
19a30     28 17 BF FD | 	call	#_push
19a34     A7 F0 03 F6 | 	mov	ptra, fp
19a38     B2 00 A0 FD | 	call	#popregs_
19a3c                 | _do_peek_ret
19a3c     2D 00 64 FD | 	ret
19a40                 | 
19a40                 | ' 
19a40                 | ' sub do_dpeek
19a40                 | _do_dpeek
19a40     00 4A 05 F6 | 	mov	COUNT_, #0
19a44     A8 00 A0 FD | 	call	#pushregs_
19a48     14 F0 07 F1 | 	add	ptra, #20
19a4c     74 16 BF FD | 	call	#_pop
19a50     A7 FA 61 FC | 	wrlong	result1, fp
19a54     04 4E 05 F1 | 	add	fp, #4
19a58     A7 FC 61 FC | 	wrlong	result2, fp
19a5c     04 4E 05 F1 | 	add	fp, #4
19a60     A7 FE 61 FC | 	wrlong	result3, fp
19a64     08 4E 85 F1 | 	sub	fp, #8
19a68     A7 12 02 F6 | 	mov	arg01, fp
19a6c     24 B7 BF FD | 	call	#_converttoint
19a70     0C 4E 05 F1 | 	add	fp, #12
19a74     A7 FA 61 FC | 	wrlong	result1, fp
19a78                 | ' t1=pop()
19a78                 | ' a=converttoint(t1)
19a78                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
19a78     0C 4E 85 F1 | 	sub	fp, #12
19a7c     00 04 00 FF 
19a80     00 FA 15 F2 | 	cmp	result1, ##524288 wc
19a84     1C 00 90 3D |  if_ae	jmp	#LR__2100
19a88     0C 4E 05 F1 | 	add	fp, #12
19a8c     A7 12 02 FB | 	rdlong	arg01, fp
19a90     09 FB E1 FA | 	rdword	result1, arg01
19a94     04 4E 05 F1 | 	add	fp, #4
19a98     A7 FA 61 FC | 	wrlong	result1, fp
19a9c     10 4E 85 F1 | 	sub	fp, #16
19aa0     1C 00 90 FD | 	jmp	#LR__2101
19aa4                 | LR__2100
19aa4     0C 4E 05 F1 | 	add	fp, #12
19aa8     A7 12 02 FB | 	rdlong	arg01, fp
19aac     0C 4E 85 F1 | 	sub	fp, #12
19ab0     A0 30 B0 FD | 	call	#_psdpeek
19ab4     10 4E 05 F1 | 	add	fp, #16
19ab8     A7 FA 61 FC | 	wrlong	result1, fp
19abc     10 4E 85 F1 | 	sub	fp, #16
19ac0                 | LR__2101
19ac0     08 4E 05 F1 | 	add	fp, #8
19ac4     A7 3A 68 FC | 	wrlong	#29, fp
19ac8     08 4E 05 F1 | 	add	fp, #8
19acc     A7 12 02 FB | 	rdlong	arg01, fp
19ad0     10 4E 85 F1 | 	sub	fp, #16
19ad4     A7 12 62 FC | 	wrlong	arg01, fp
19ad8     A7 12 02 F6 | 	mov	arg01, fp
19adc     7C 16 BF FD | 	call	#_push
19ae0     A7 F0 03 F6 | 	mov	ptra, fp
19ae4     B2 00 A0 FD | 	call	#popregs_
19ae8                 | _do_dpeek_ret
19ae8     2D 00 64 FD | 	ret
19aec                 | 
19aec                 | ' 
19aec                 | ' 
19aec                 | ' sub do_lpeek
19aec                 | _do_lpeek
19aec     00 4A 05 F6 | 	mov	COUNT_, #0
19af0     A8 00 A0 FD | 	call	#pushregs_
19af4     14 F0 07 F1 | 	add	ptra, #20
19af8     C8 15 BF FD | 	call	#_pop
19afc     A7 FA 61 FC | 	wrlong	result1, fp
19b00     04 4E 05 F1 | 	add	fp, #4
19b04     A7 FC 61 FC | 	wrlong	result2, fp
19b08     04 4E 05 F1 | 	add	fp, #4
19b0c     A7 FE 61 FC | 	wrlong	result3, fp
19b10     08 4E 85 F1 | 	sub	fp, #8
19b14     A7 12 02 F6 | 	mov	arg01, fp
19b18     78 B6 BF FD | 	call	#_converttoint
19b1c     0C 4E 05 F1 | 	add	fp, #12
19b20     A7 FA 61 FC | 	wrlong	result1, fp
19b24                 | ' t1=pop()
19b24                 | ' a=converttoint(t1)
19b24                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
19b24     0C 4E 85 F1 | 	sub	fp, #12
19b28     00 04 00 FF 
19b2c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
19b30     1C 00 90 3D |  if_ae	jmp	#LR__2110
19b34     0C 4E 05 F1 | 	add	fp, #12
19b38     A7 12 02 FB | 	rdlong	arg01, fp
19b3c     09 FB 01 FB | 	rdlong	result1, arg01
19b40     04 4E 05 F1 | 	add	fp, #4
19b44     A7 FA 61 FC | 	wrlong	result1, fp
19b48     10 4E 85 F1 | 	sub	fp, #16
19b4c     1C 00 90 FD | 	jmp	#LR__2111
19b50                 | LR__2110
19b50     0C 4E 05 F1 | 	add	fp, #12
19b54     A7 12 02 FB | 	rdlong	arg01, fp
19b58     0C 4E 85 F1 | 	sub	fp, #12
19b5c     9C 2F B0 FD | 	call	#_pslpeek
19b60     10 4E 05 F1 | 	add	fp, #16
19b64     A7 FA 61 FC | 	wrlong	result1, fp
19b68     10 4E 85 F1 | 	sub	fp, #16
19b6c                 | LR__2111
19b6c     08 4E 05 F1 | 	add	fp, #8
19b70     A7 3A 68 FC | 	wrlong	#29, fp
19b74     08 4E 05 F1 | 	add	fp, #8
19b78     A7 12 02 FB | 	rdlong	arg01, fp
19b7c     10 4E 85 F1 | 	sub	fp, #16
19b80     A7 12 62 FC | 	wrlong	arg01, fp
19b84     A7 12 02 F6 | 	mov	arg01, fp
19b88     D0 15 BF FD | 	call	#_push
19b8c     A7 F0 03 F6 | 	mov	ptra, fp
19b90     B2 00 A0 FD | 	call	#popregs_
19b94                 | _do_lpeek_ret
19b94     2D 00 64 FD | 	ret
19b98                 | 
19b98                 | ' 
19b98                 | ' sub do_fre
19b98                 | _do_fre
19b98     01 4A 05 F6 | 	mov	COUNT_, #1
19b9c     A8 00 A0 FD | 	call	#pushregs_
19ba0     0C F0 07 F1 | 	add	ptra, #12
19ba4     59 00 00 FF 
19ba8     E0 E5 05 F1 | 	add	objptr, ##46048
19bac     F2 12 02 FB | 	rdlong	arg01, objptr
19bb0     16 00 00 FF 
19bb4     54 E5 85 F1 | 	sub	objptr, ##11604
19bb8     F2 1E 02 FB | 	rdlong	local01, objptr
19bbc     0F 13 82 F1 | 	sub	arg01, local01
19bc0     16 00 00 FF 
19bc4     FC E5 05 F1 | 	add	objptr, ##11772
19bc8     F2 12 62 FC | 	wrlong	arg01, objptr
19bcc     08 4E 05 F1 | 	add	fp, #8
19bd0     A7 3A 68 FC | 	wrlong	#29, fp
19bd4     08 4E 85 F1 | 	sub	fp, #8
19bd8     F2 1E 02 FB | 	rdlong	local01, objptr
19bdc     5A 00 00 FF 
19be0     88 E4 85 F1 | 	sub	objptr, ##46216
19be4     A7 1E 62 FC | 	wrlong	local01, fp
19be8     A7 12 02 F6 | 	mov	arg01, fp
19bec     6C 15 BF FD | 	call	#_push
19bf0     A7 F0 03 F6 | 	mov	ptra, fp
19bf4     B2 00 A0 FD | 	call	#popregs_
19bf8                 | _do_fre_ret
19bf8     2D 00 64 FD | 	ret
19bfc                 | 
19bfc                 | ' 
19bfc                 | ' sub do_adr
19bfc                 | _do_adr
19bfc                 | _do_adr_ret
19bfc     2D 00 64 FD | 	ret
19c00                 | 
19c00                 | ' 
19c00                 | ' sub do_getnotevalue
19c00                 | _do_getnotevalue
19c00     01 4A 05 F6 | 	mov	COUNT_, #1
19c04     A8 00 A0 FD | 	call	#pushregs_
19c08     1C F0 07 F1 | 	add	ptra, #28
19c0c     B4 14 BF FD | 	call	#_pop
19c10     FF 14 02 F6 | 	mov	arg02, result3
19c14     10 4E 05 F1 | 	add	fp, #16
19c18     A7 FA 61 FC | 	wrlong	result1, fp
19c1c     04 4E 05 F1 | 	add	fp, #4
19c20     A7 FC 61 FC | 	wrlong	result2, fp
19c24     04 4E 05 F1 | 	add	fp, #4
19c28     A7 14 62 FC | 	wrlong	arg02, fp
19c2c     08 4E 85 F1 | 	sub	fp, #8
19c30     A7 12 02 F6 | 	mov	arg01, fp
19c34     10 4E 85 F1 | 	sub	fp, #16
19c38     58 B5 BF FD | 	call	#_converttoint
19c3c     FD 14 52 F6 | 	abs	arg02, result1 wc
19c40     0C 14 16 FD | 	qdiv	arg02, #12
19c44     0C 4E 05 F1 | 	add	fp, #12
19c48     A7 FA 61 FC | 	wrlong	result1, fp
19c4c     14 00 00 FF 
19c50     D8 E4 05 F1 | 	add	objptr, ##10456
19c54     08 4E 85 F1 | 	sub	fp, #8
19c58     19 14 62 FD | 	getqy	arg02
19c5c     0A 15 82 F6 | 	negc	arg02, arg02
19c60     02 14 66 F0 | 	shl	arg02, #2
19c64     F2 14 02 F1 | 	add	arg02, objptr
19c68     0A 15 02 FB | 	rdlong	arg02, arg02
19c6c     A7 14 62 FC | 	wrlong	arg02, fp
19c70     08 4E 05 F1 | 	add	fp, #8
19c74     A7 14 02 FB | 	rdlong	arg02, fp
19c78     0A 15 52 F6 | 	abs	arg02, arg02 wc
19c7c     0C 14 16 FD | 	qdiv	arg02, #12
19c80     0C 4E 85 F1 | 	sub	fp, #12
19c84     14 00 00 FF 
19c88     D8 E4 85 F1 | 	sub	objptr, ##10456
19c8c     18 14 62 FD | 	getqx	arg02
19c90     0A 13 82 F6 | 	negc	arg01, arg02
19c94     09 13 52 F6 | 	abs	arg01, arg01 wc
19c98     1F 1E C6 C9 |  if_b	decod	local01, #31
19c9c     00 1E 06 36 |  if_ae	mov	local01, #0
19ca0     1C 98 B0 FD | 	call	#__system___float_fromuns
19ca4     0F FB 61 F5 | 	xor	result1, local01
19ca8     08 4E 05 F1 | 	add	fp, #8
19cac     A7 FA 61 FC | 	wrlong	result1, fp
19cb0     FD 14 02 F6 | 	mov	arg02, result1
19cb4     08 4E 85 F1 | 	sub	fp, #8
19cb8     1E 12 C6 F9 | 	decod	arg01, #30
19cbc     E8 AA B0 FD | 	call	#__system____builtin_powf
19cc0     FD 12 02 F6 | 	mov	arg01, result1
19cc4     04 4E 05 F1 | 	add	fp, #4
19cc8     A7 14 02 FB | 	rdlong	arg02, fp
19ccc     04 4E 85 F1 | 	sub	fp, #4
19cd0     F0 9B B0 FD | 	call	#__system___float_mul
19cd4     A7 FA 61 FC | 	wrlong	result1, fp
19cd8     10 4E 05 F1 | 	add	fp, #16
19cdc     A7 FA 61 FC | 	wrlong	result1, fp
19ce0     08 4E 05 F1 | 	add	fp, #8
19ce4     A7 3C 68 FC | 	wrlong	#30, fp
19ce8     08 4E 85 F1 | 	sub	fp, #8
19cec     A7 12 02 F6 | 	mov	arg01, fp
19cf0     10 4E 85 F1 | 	sub	fp, #16
19cf4     64 14 BF FD | 	call	#_push
19cf8     A7 F0 03 F6 | 	mov	ptra, fp
19cfc     B2 00 A0 FD | 	call	#popregs_
19d00                 | _do_getnotevalue_ret
19d00     2D 00 64 FD | 	ret
19d04                 | 
19d04                 | ' 
19d04                 | ' 
19d04                 | ' sub do_waitms
19d04                 | _do_waitms
19d04     01 4A 05 F6 | 	mov	COUNT_, #1
19d08     A8 00 A0 FD | 	call	#pushregs_
19d0c     18 F0 07 F1 | 	add	ptra, #24
19d10     B0 13 BF FD | 	call	#_pop
19d14     A7 FA 61 FC | 	wrlong	result1, fp
19d18     04 4E 05 F1 | 	add	fp, #4
19d1c     A7 FC 61 FC | 	wrlong	result2, fp
19d20     04 4E 05 F1 | 	add	fp, #4
19d24     A7 FE 61 FC | 	wrlong	result3, fp
19d28                 | ' 
19d28                 | ' t1=pop() 'value
19d28                 | ' 
19d28                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
19d28     08 4E 85 F1 | 	sub	fp, #8
19d2c     1C FE 0D F2 | 	cmp	result3, #28 wz
19d30     08 4E 05 51 |  if_ne	add	fp, #8
19d34     A7 12 02 5B |  if_ne	rdlong	arg01, fp
19d38     08 4E 85 51 |  if_ne	sub	fp, #8
19d3c     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
19d40     A7 12 02 AB |  if_e	rdlong	arg01, fp
19d44     0C 4E 05 A1 |  if_e	add	fp, #12
19d48     A7 12 62 AC |  if_e	wrlong	arg01, fp
19d4c     0C 4E 85 A1 |  if_e	sub	fp, #12
19d50     14 00 90 AD |  if_e	jmp	#LR__2120
19d54     A7 12 02 F6 | 	mov	arg01, fp
19d58     38 B4 BF FD | 	call	#_converttoint
19d5c     0C 4E 05 F1 | 	add	fp, #12
19d60     A7 FA 61 FC | 	wrlong	result1, fp
19d64     0C 4E 85 F1 | 	sub	fp, #12
19d68                 | LR__2120
19d68                 | ' if t<0 then return
19d68     0C 4E 05 F1 | 	add	fp, #12
19d6c     A7 12 02 FB | 	rdlong	arg01, fp
19d70     0C 4E 85 F1 | 	sub	fp, #12
19d74     00 12 56 F2 | 	cmps	arg01, #0 wc
19d78     B8 00 90 CD |  if_b	jmp	#LR__2125
19d7c                 | ' if t < 5000 then 
19d7c     0C 4E 05 F1 | 	add	fp, #12
19d80     A7 12 02 FB | 	rdlong	arg01, fp
19d84     0C 4E 85 F1 | 	sub	fp, #12
19d88     09 00 00 FF 
19d8c     88 13 56 F2 | 	cmps	arg01, ##5000 wc
19d90     14 00 90 3D |  if_ae	jmp	#LR__2121
19d94     0C 4E 05 F1 | 	add	fp, #12
19d98     A7 12 02 FB | 	rdlong	arg01, fp
19d9c     0C 4E 85 F1 | 	sub	fp, #12
19da0     60 72 B0 FD | 	call	#__system___waitms
19da4     8C 00 90 FD | 	jmp	#LR__2124
19da8                 | LR__2121
19da8     10 4E 05 F1 | 	add	fp, #16
19dac     A7 02 68 FC | 	wrlong	#1, fp
19db0     04 4E 85 F1 | 	sub	fp, #4
19db4     A7 12 02 FB | 	rdlong	arg01, fp
19db8     09 13 52 F6 | 	abs	arg01, arg01 wc
19dbc     09 00 00 FF 
19dc0     88 13 16 FD | 	qdiv	arg01, ##5000
19dc4                 | '   for i=1 to t/5000
19dc4     0C 4E 85 F1 | 	sub	fp, #12
19dc8     18 1E 62 FD | 	getqx	local01
19dcc     0F 1F 82 F6 | 	negc	local01, local01
19dd0     01 1E 06 F1 | 	add	local01, #1
19dd4                 | LR__2122
19dd4     10 4E 05 F1 | 	add	fp, #16
19dd8     A7 12 02 FB | 	rdlong	arg01, fp
19ddc     10 4E 85 F1 | 	sub	fp, #16
19de0     0F 13 52 F2 | 	cmps	arg01, local01 wc
19de4     28 00 90 3D |  if_ae	jmp	#LR__2123
19de8     0C 4E 05 F1 | 	add	fp, #12
19dec     A7 12 02 FB | 	rdlong	arg01, fp
19df0     0C 4E 85 F1 | 	sub	fp, #12
19df4     0C 72 B0 FD | 	call	#__system___waitms
19df8     10 4E 05 F1 | 	add	fp, #16
19dfc     A7 12 02 FB | 	rdlong	arg01, fp
19e00     01 12 06 F1 | 	add	arg01, #1
19e04     A7 12 62 FC | 	wrlong	arg01, fp
19e08     10 4E 85 F1 | 	sub	fp, #16
19e0c     C4 FF 9F FD | 	jmp	#LR__2122
19e10                 | LR__2123
19e10     0C 4E 05 F1 | 	add	fp, #12
19e14     A7 1E 02 FB | 	rdlong	local01, fp
19e18     0F 1F 52 F6 | 	abs	local01, local01 wc
19e1c     09 00 00 FF 
19e20     88 1F 16 FD | 	qdiv	local01, ##5000
19e24     0C 4E 85 F1 | 	sub	fp, #12
19e28     19 1E 62 FD | 	getqy	local01
19e2c     0F 13 82 F6 | 	negc	arg01, local01
19e30     D0 71 B0 FD | 	call	#__system___waitms
19e34                 | LR__2124
19e34                 | LR__2125
19e34     A7 F0 03 F6 | 	mov	ptra, fp
19e38     B2 00 A0 FD | 	call	#popregs_
19e3c                 | _do_waitms_ret
19e3c     2D 00 64 FD | 	ret
19e40                 | 
19e40                 | ' 
19e40                 | ' sub do_waitvbl
19e40                 | _do_waitvbl
19e40     01 12 06 F6 | 	mov	arg01, #1
19e44     B0 57 B0 FD | 	call	#_hg010b_spin2_waitvbl
19e48                 | _do_waitvbl_ret
19e48     2D 00 64 FD | 	ret
19e4c                 | 
19e4c                 | ' 
19e4c                 | ' sub do_waitclock
19e4c                 | _do_waitclock
19e4c     59 00 00 FF 
19e50     DC E5 05 F1 | 	add	objptr, ##46044
19e54     F2 00 02 FB | 	rdlong	_var01, objptr
19e58                 | ' c=hkcnt
19e58                 | ' do: loop until hkcnt<>c
19e58                 | LR__2130
19e58     F2 02 02 FB | 	rdlong	_var02, objptr
19e5c     00 03 0A F2 | 	cmp	_var02, _var01 wz
19e60     F4 FF 9F AD |  if_e	jmp	#LR__2130
19e64     59 00 00 FF 
19e68     DC E5 85 F1 | 	sub	objptr, ##46044
19e6c                 | _do_waitclock_ret
19e6c     2D 00 64 FD | 	ret
19e70                 | 
19e70                 | ' 
19e70                 | ' sub do_dir
19e70                 | _do_dir
19e70     05 4A 05 F6 | 	mov	COUNT_, #5
19e74     A8 00 A0 FD | 	call	#pushregs_
19e78     86 01 00 FF 
19e7c     FA 13 06 F6 | 	mov	arg01, ##@LR__5438
19e80     18 75 B0 FD | 	call	#__system___chdir
19e84                 | ' chdir("/sd/bas")       ' set working directory
19e84                 | ' print "Working directory: "; currentdir$ 
19e84     00 12 06 F6 | 	mov	arg01, #0
19e88     C4 C8 B0 FD | 	call	#__system___getiolock_0540
19e8c     FD 12 02 F6 | 	mov	arg01, result1
19e90     7C 6E B0 FD | 	call	#__system___lockmem
19e94     87 01 00 FF 
19e98     02 14 06 F6 | 	mov	arg02, ##@LR__5439
19e9c     00 12 06 F6 | 	mov	arg01, #0
19ea0     00 16 06 F6 | 	mov	arg03, #0
19ea4     5C 7B B0 FD | 	call	#__system___basic_print_string
19ea8     52 00 00 FF 
19eac     C8 E4 05 F1 | 	add	objptr, ##42184
19eb0     F2 14 02 FB | 	rdlong	arg02, objptr
19eb4     52 00 00 FF 
19eb8     C8 E4 85 F1 | 	sub	objptr, ##42184
19ebc     00 12 06 F6 | 	mov	arg01, #0
19ec0     00 16 06 F6 | 	mov	arg03, #0
19ec4     3C 7B B0 FD | 	call	#__system___basic_print_string
19ec8     00 12 06 F6 | 	mov	arg01, #0
19ecc     0A 14 06 F6 | 	mov	arg02, #10
19ed0     00 16 06 F6 | 	mov	arg03, #0
19ed4     D4 7A B0 FD | 	call	#__system___basic_print_char
19ed8     00 12 06 F6 | 	mov	arg01, #0
19edc     70 C8 B0 FD | 	call	#__system___getiolock_0540
19ee0     FD 00 68 FC | 	wrlong	#0, result1
19ee4     00 1E 06 F6 | 	mov	local01, #0
19ee8     87 01 00 FF 
19eec     16 12 06 F6 | 	mov	arg01, ##@LR__5440
19ef0     10 14 06 F6 | 	mov	arg02, #16
19ef4     90 C9 B0 FD | 	call	#__system___basic_dir
19ef8     FD 20 02 F6 | 	mov	local02, result1
19efc                 | ' px=0:
19efc                 | ' filename=dir$("*", fbDirectory)
19efc                 | ' while filename <> "" and filename <> nil
19efc                 | LR__2140
19efc     00 22 06 F6 | 	mov	local03, #0
19f00     87 01 00 FF 
19f04     18 14 06 F6 | 	mov	arg02, ##@LR__5441
19f08     10 13 02 F6 | 	mov	arg01, local02
19f0c     28 6E B0 FD | 	call	#__system___string_cmp
19f10     00 FA 0D F2 | 	cmp	result1, #0 wz
19f14     00 22 26 56 |  if_ne	not	local03, #0
19f18     00 24 06 F6 | 	mov	local04, #0
19f1c     10 13 02 F6 | 	mov	arg01, local02
19f20     00 14 06 F6 | 	mov	arg02, #0
19f24     10 6E B0 FD | 	call	#__system___string_cmp
19f28     00 FA 0D F2 | 	cmp	result1, #0 wz
19f2c     00 24 26 56 |  if_ne	not	local04, #0
19f30     12 23 CA F7 | 	test	local03, local04 wz
19f34     9C 00 90 AD |  if_e	jmp	#LR__2142
19f38                 | '   print "[dir] ";filename; : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
19f38     00 12 06 F6 | 	mov	arg01, #0
19f3c     10 C8 B0 FD | 	call	#__system___getiolock_0540
19f40     FD 12 02 F6 | 	mov	arg01, result1
19f44     C8 6D B0 FD | 	call	#__system___lockmem
19f48     87 01 00 FF 
19f4c     19 14 06 F6 | 	mov	arg02, ##@LR__5442
19f50     00 12 06 F6 | 	mov	arg01, #0
19f54     00 16 06 F6 | 	mov	arg03, #0
19f58     A8 7A B0 FD | 	call	#__system___basic_print_string
19f5c     00 26 06 F6 | 	mov	local05, #0
19f60     00 12 06 F6 | 	mov	arg01, #0
19f64     10 15 02 F6 | 	mov	arg02, local02
19f68     00 16 06 F6 | 	mov	arg03, #0
19f6c     94 7A B0 FD | 	call	#__system___basic_print_string
19f70     00 12 06 F6 | 	mov	arg01, #0
19f74     D8 C7 B0 FD | 	call	#__system___getiolock_0540
19f78     FD 00 68 FC | 	wrlong	#0, result1
19f7c     40 1E 06 F1 | 	add	local01, #64
19f80     0F 13 02 F6 | 	mov	arg01, local01
19f84     0C 56 B0 FD | 	call	#_hg010b_spin2_setcursorx
19f88     00 1F 56 F2 | 	cmps	local01, #256 wc
19f8c     30 00 90 CD |  if_b	jmp	#LR__2141
19f90     00 1E 06 F6 | 	mov	local01, #0
19f94     00 12 06 F6 | 	mov	arg01, #0
19f98     B4 C7 B0 FD | 	call	#__system___getiolock_0540
19f9c     FD 12 02 F6 | 	mov	arg01, result1
19fa0     6C 6D B0 FD | 	call	#__system___lockmem
19fa4     00 12 06 F6 | 	mov	arg01, #0
19fa8     0A 14 06 F6 | 	mov	arg02, #10
19fac     00 16 06 F6 | 	mov	arg03, #0
19fb0     F8 79 B0 FD | 	call	#__system___basic_print_char
19fb4     00 12 06 F6 | 	mov	arg01, #0
19fb8     94 C7 B0 FD | 	call	#__system___getiolock_0540
19fbc     FD 00 68 FC | 	wrlong	#0, result1
19fc0                 | LR__2141
19fc0     00 12 06 F6 | 	mov	arg01, #0
19fc4     00 14 06 F6 | 	mov	arg02, #0
19fc8     BC C8 B0 FD | 	call	#__system___basic_dir
19fcc     FD 20 02 F6 | 	mov	local02, result1
19fd0     28 FF 9F FD | 	jmp	#LR__2140
19fd4                 | LR__2142
19fd4                 | ' print
19fd4     00 12 06 F6 | 	mov	arg01, #0
19fd8     74 C7 B0 FD | 	call	#__system___getiolock_0540
19fdc     FD 12 02 F6 | 	mov	arg01, result1
19fe0     2C 6D B0 FD | 	call	#__system___lockmem
19fe4     00 12 06 F6 | 	mov	arg01, #0
19fe8     0A 14 06 F6 | 	mov	arg02, #10
19fec     00 16 06 F6 | 	mov	arg03, #0
19ff0     B8 79 B0 FD | 	call	#__system___basic_print_char
19ff4     00 12 06 F6 | 	mov	arg01, #0
19ff8     54 C7 B0 FD | 	call	#__system___getiolock_0540
19ffc     FD 00 68 FC | 	wrlong	#0, result1
1a000     00 1E 06 F6 | 	mov	local01, #0
1a004                 | ' return cursor_y
1a004     87 01 00 FF 
1a008     20 12 06 F6 | 	mov	arg01, ##@LR__5443
1a00c     21 14 06 F6 | 	mov	arg02, #33
1a010     74 C8 B0 FD | 	call	#__system___basic_dir
1a014     FD 20 02 F6 | 	mov	local02, result1
1a018                 | ' px=0: py=v.getcursory()
1a018                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
1a018                 | ' do while filename <> "" and filename <> nil
1a018                 | LR__2143
1a018     00 22 06 F6 | 	mov	local03, #0
1a01c     87 01 00 FF 
1a020     22 14 06 F6 | 	mov	arg02, ##@LR__5444
1a024     10 13 02 F6 | 	mov	arg01, local02
1a028     0C 6D B0 FD | 	call	#__system___string_cmp
1a02c     00 FA 0D F2 | 	cmp	result1, #0 wz
1a030     00 22 26 56 |  if_ne	not	local03, #0
1a034     00 24 06 F6 | 	mov	local04, #0
1a038     10 13 02 F6 | 	mov	arg01, local02
1a03c     00 14 06 F6 | 	mov	arg02, #0
1a040     F4 6C B0 FD | 	call	#__system___string_cmp
1a044     00 FA 0D F2 | 	cmp	result1, #0 wz
1a048     00 24 26 56 |  if_ne	not	local04, #0
1a04c     12 23 CA F7 | 	test	local03, local04 wz
1a050     80 01 90 AD |  if_e	jmp	#LR__2148
1a054                 | '   print filename; : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
1a054     00 12 06 F6 | 	mov	arg01, #0
1a058     F4 C6 B0 FD | 	call	#__system___getiolock_0540
1a05c     FD 12 02 F6 | 	mov	arg01, result1
1a060     AC 6C B0 FD | 	call	#__system___lockmem
1a064     00 12 06 F6 | 	mov	arg01, #0
1a068     10 15 02 F6 | 	mov	arg02, local02
1a06c     00 16 06 F6 | 	mov	arg03, #0
1a070     90 79 B0 FD | 	call	#__system___basic_print_string
1a074     00 12 06 F6 | 	mov	arg01, #0
1a078     D4 C6 B0 FD | 	call	#__system___getiolock_0540
1a07c     FD 00 68 FC | 	wrlong	#0, result1
1a080     40 1E 06 F1 | 	add	local01, #64
1a084     0F 13 02 F6 | 	mov	arg01, local01
1a088     08 55 B0 FD | 	call	#_hg010b_spin2_setcursorx
1a08c     00 1F 56 F2 | 	cmps	local01, #256 wc
1a090     30 00 90 CD |  if_b	jmp	#LR__2144
1a094     00 1E 06 F6 | 	mov	local01, #0
1a098     00 12 06 F6 | 	mov	arg01, #0
1a09c     B0 C6 B0 FD | 	call	#__system___getiolock_0540
1a0a0     FD 12 02 F6 | 	mov	arg01, result1
1a0a4     68 6C B0 FD | 	call	#__system___lockmem
1a0a8     00 12 06 F6 | 	mov	arg01, #0
1a0ac     0A 14 06 F6 | 	mov	arg02, #10
1a0b0     00 16 06 F6 | 	mov	arg03, #0
1a0b4     F4 78 B0 FD | 	call	#__system___basic_print_char
1a0b8     00 12 06 F6 | 	mov	arg01, #0
1a0bc     90 C6 B0 FD | 	call	#__system___getiolock_0540
1a0c0     FD 00 68 FC | 	wrlong	#0, result1
1a0c4                 | LR__2144
1a0c4     00 12 06 F6 | 	mov	arg01, #0
1a0c8     00 14 06 F6 | 	mov	arg02, #0
1a0cc     B8 C7 B0 FD | 	call	#__system___basic_dir
1a0d0     FD 20 02 F6 | 	mov	local02, result1
1a0d4                 | '   filename = dir$()      ' continue scan
1a0d4                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
1a0d4                 | ' return cursor_y
1a0d4     3E E4 05 F1 | 	add	objptr, #62
1a0d8     F2 FA C1 FA | 	rdbyte	result1, objptr
1a0dc     3E E4 85 F1 | 	sub	objptr, #62
1a0e0     22 FA 0D F2 | 	cmp	result1, #34 wz
1a0e4     30 FF 9F 5D |  if_ne	jmp	#LR__2143
1a0e8                 | '     print "-----more, press any key";
1a0e8     00 12 06 F6 | 	mov	arg01, #0
1a0ec     60 C6 B0 FD | 	call	#__system___getiolock_0540
1a0f0     FD 12 02 F6 | 	mov	arg01, result1
1a0f4     18 6C B0 FD | 	call	#__system___lockmem
1a0f8     87 01 00 FF 
1a0fc     23 14 06 F6 | 	mov	arg02, ##@LR__5445
1a100     00 12 06 F6 | 	mov	arg01, #0
1a104     00 16 06 F6 | 	mov	arg03, #0
1a108     F8 78 B0 FD | 	call	#__system___basic_print_string
1a10c     00 12 06 F6 | 	mov	arg01, #0
1a110     3C C6 B0 FD | 	call	#__system___getiolock_0540
1a114     FD 00 68 FC | 	wrlong	#0, result1
1a118                 | '     do 
1a118                 | LR__2145
1a118     E0 63 B0 FD | 	call	#_usbnew_spin2_get_key
1a11c     00 FA 0D F2 | 	cmp	result1, #0 wz
1a120     F4 FF 9F 5D |  if_ne	jmp	#LR__2145
1a124                 | '     do
1a124                 | LR__2146
1a124     D4 63 B0 FD | 	call	#_usbnew_spin2_get_key
1a128     00 FA 0D F2 | 	cmp	result1, #0 wz
1a12c     F4 FF 9F AD |  if_e	jmp	#LR__2146
1a130                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
1a130     58 00 00 FF 
1a134     48 E5 05 F1 | 	add	objptr, ##45384
1a138     F2 22 02 FB | 	rdlong	local03, objptr
1a13c     58 00 00 FF 
1a140     48 E5 85 F1 | 	sub	objptr, ##45384
1a144     01 22 0E F2 | 	cmp	local03, #1 wz
1a148     3C 00 90 5D |  if_ne	jmp	#LR__2147
1a14c     59 00 00 FF 
1a150     EC E5 05 F1 | 	add	objptr, ##46060
1a154     F2 14 02 FB | 	rdlong	arg02, objptr
1a158     04 E4 85 F1 | 	sub	objptr, #4
1a15c     F2 1A 02 FB | 	rdlong	arg05, objptr
1a160     07 12 06 F6 | 	mov	arg01, #7
1a164     56 00 00 FF 
1a168     44 16 06 F6 | 	mov	arg03, ##44100
1a16c     0C 18 C6 F9 | 	decod	arg04, #12
1a170     01 1C 66 F6 | 	neg	arg06, #1
1a174     4E 00 00 FF 
1a178     1C E5 85 F1 | 	sub	objptr, ##40220
1a17c     20 67 B0 FD | 	call	#_audio096_spin2_play
1a180     0B 00 00 FF 
1a184     CC E4 85 F1 | 	sub	objptr, ##5836
1a188                 | LR__2147
1a188     00 12 06 F6 | 	mov	arg01, #0
1a18c     23 14 06 F6 | 	mov	arg02, #35
1a190     C4 53 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1a194                 | '     position 0,35: print "                             ";: position 4,35  
1a194     00 12 06 F6 | 	mov	arg01, #0
1a198     B4 C5 B0 FD | 	call	#__system___getiolock_0540
1a19c     FD 12 02 F6 | 	mov	arg01, result1
1a1a0     6C 6B B0 FD | 	call	#__system___lockmem
1a1a4     87 01 00 FF 
1a1a8     3C 14 06 F6 | 	mov	arg02, ##@LR__5446
1a1ac     00 12 06 F6 | 	mov	arg01, #0
1a1b0     00 16 06 F6 | 	mov	arg03, #0
1a1b4     4C 78 B0 FD | 	call	#__system___basic_print_string
1a1b8     00 12 06 F6 | 	mov	arg01, #0
1a1bc     90 C5 B0 FD | 	call	#__system___getiolock_0540
1a1c0     FD 00 68 FC | 	wrlong	#0, result1
1a1c4     04 12 06 F6 | 	mov	arg01, #4
1a1c8     23 14 06 F6 | 	mov	arg02, #35
1a1cc     88 53 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1a1d0     44 FE 9F FD | 	jmp	#LR__2143
1a1d4                 | LR__2148
1a1d4     A7 F0 03 F6 | 	mov	ptra, fp
1a1d8     B2 00 A0 FD | 	call	#popregs_
1a1dc                 | _do_dir_ret
1a1dc     2D 00 64 FD | 	ret
1a1e0                 | 
1a1e0                 | ' 
1a1e0                 | ' sub do_if
1a1e0                 | _do_if
1a1e0     05 4A 05 F6 | 	mov	COUNT_, #5
1a1e4     A8 00 A0 FD | 	call	#pushregs_
1a1e8     D8 0E BF FD | 	call	#_pop
1a1ec     FD 1E 0A F6 | 	mov	local01, result1 wz
1a1f0     FE 20 02 F6 | 	mov	local02, result2
1a1f4     FF 22 02 F6 | 	mov	local03, result3
1a1f8                 | ' t1=pop()
1a1f8                 | ' ' if uresult=0, jump over else
1a1f8                 | ' if t1.result.uresult = 0 then 
1a1f8     BC 00 90 5D |  if_ne	jmp	#LR__2152
1a1fc                 | '   for i=lineptr_e to lineptr-1
1a1fc     4A 00 00 FF 
1a200     B0 E4 05 F1 | 	add	objptr, ##38064
1a204     F2 24 02 FB | 	rdlong	local04, objptr
1a208     04 E4 85 F1 | 	sub	objptr, #4
1a20c     F2 26 02 FB | 	rdlong	local05, objptr
1a210     4A 00 00 FF 
1a214     AC E4 85 F1 | 	sub	objptr, ##38060
1a218                 | LR__2150
1a218     13 25 52 F2 | 	cmps	local04, local05 wc
1a21c     78 00 90 3D |  if_ae	jmp	#LR__2151
1a220     12 FF 01 F6 | 	mov	result3, local04
1a224     01 FE 65 F0 | 	shl	result3, #1
1a228     12 FF 01 F1 | 	add	result3, local04
1a22c     02 FE 65 F0 | 	shl	result3, #2
1a230     47 00 00 FF 
1a234     AC E4 05 F1 | 	add	objptr, ##36524
1a238     F2 FE 01 F1 | 	add	result3, objptr
1a23c     FF 1E 02 FB | 	rdlong	local01, result3
1a240     04 FE 05 F1 | 	add	result3, #4
1a244     FF FC 01 FB | 	rdlong	result2, result3
1a248     12 FF 01 F6 | 	mov	result3, local04
1a24c     01 FE 65 F0 | 	shl	result3, #1
1a250     12 FF 01 F1 | 	add	result3, local04
1a254     02 FE 65 F0 | 	shl	result3, #2
1a258     F2 FE 01 F1 | 	add	result3, objptr
1a25c     08 FE 05 F1 | 	add	result3, #8
1a260     FF FE 01 FB | 	rdlong	result3, result3
1a264     FE 20 02 F6 | 	mov	local02, result2
1a268     FF 22 02 F6 | 	mov	local03, result3
1a26c                 | '     t1=compiledline(i)
1a26c                 | '     if t1.result_type=token_else then lineptr_e=i : return
1a26c     5A 22 0E F2 | 	cmp	local03, #90 wz
1a270     47 00 00 FF 
1a274     AC E4 85 F1 | 	sub	objptr, ##36524
1a278     4A 00 00 AF 
1a27c     B0 E4 05 A1 |  if_e	add	objptr, ##38064
1a280     F2 24 62 AC |  if_e	wrlong	local04, objptr
1a284     4A 00 00 AF 
1a288     B0 E4 85 A1 |  if_e	sub	objptr, ##38064
1a28c     28 00 90 AD |  if_e	jmp	#LR__2153
1a290     01 24 06 F1 | 	add	local04, #1
1a294     80 FF 9F FD | 	jmp	#LR__2150
1a298                 | LR__2151
1a298     4A 00 00 FF 
1a29c     AC E4 05 F1 | 	add	objptr, ##38060
1a2a0     F2 26 02 FB | 	rdlong	local05, objptr
1a2a4     01 26 86 F1 | 	sub	local05, #1
1a2a8     04 E4 05 F1 | 	add	objptr, #4
1a2ac     F2 26 62 FC | 	wrlong	local05, objptr
1a2b0     4A 00 00 FF 
1a2b4     B0 E4 85 F1 | 	sub	objptr, ##38064
1a2b8                 | LR__2152
1a2b8                 | LR__2153
1a2b8     A7 F0 03 F6 | 	mov	ptra, fp
1a2bc     B2 00 A0 FD | 	call	#popregs_
1a2c0                 | _do_if_ret
1a2c0     2D 00 64 FD | 	ret
1a2c4                 | 
1a2c4                 | ' 
1a2c4                 | ' sub do_else
1a2c4                 | _do_else
1a2c4     4A 00 00 FF 
1a2c8     AC E4 05 F1 | 	add	objptr, ##38060
1a2cc     F2 00 02 FB | 	rdlong	_var01, objptr
1a2d0     01 00 86 F1 | 	sub	_var01, #1
1a2d4     04 E4 05 F1 | 	add	objptr, #4
1a2d8     F2 00 62 FC | 	wrlong	_var01, objptr
1a2dc     4A 00 00 FF 
1a2e0     B0 E4 85 F1 | 	sub	objptr, ##38064
1a2e4                 | _do_else_ret
1a2e4     2D 00 64 FD | 	ret
1a2e8                 | 
1a2e8                 | ' 
1a2e8                 | ' sub do_rad
1a2e8                 | _do_rad
1a2e8     59 00 00 FF 
1a2ec     F0 E5 05 F1 | 	add	objptr, ##46064
1a2f0     00 C0 9F FF 
1a2f4     F2 00 68 FC | 	wrlong	##1065353216, objptr
1a2f8     04 E4 05 F1 | 	add	objptr, #4
1a2fc     00 C0 9F FF 
1a300     F2 00 68 FC | 	wrlong	##1065353216, objptr
1a304     59 00 00 FF 
1a308     F4 E5 85 F1 | 	sub	objptr, ##46068
1a30c                 | _do_rad_ret
1a30c     2D 00 64 FD | 	ret
1a310                 | 
1a310                 | ' 
1a310                 | ' sub do_deg
1a310                 | _do_deg
1a310     59 00 00 FF 
1a314     F0 E5 05 F1 | 	add	objptr, ##46064
1a318     7D 47 9E FF 
1a31c     F2 6A 68 FC | 	wrlong	##1016003125, objptr
1a320     04 E4 05 F1 | 	add	objptr, #4
1a324     97 32 A1 FF 
1a328     F2 C2 69 FC | 	wrlong	##1113927393, objptr
1a32c     59 00 00 FF 
1a330     F4 E5 85 F1 | 	sub	objptr, ##46068
1a334                 | _do_deg_ret
1a334     2D 00 64 FD | 	ret
1a338                 | 
1a338                 | ' 
1a338                 | ' sub do_round
1a338                 | _do_round
1a338     00 4A 05 F6 | 	mov	COUNT_, #0
1a33c     A8 00 A0 FD | 	call	#pushregs_
1a340     0C F0 07 F1 | 	add	ptra, #12
1a344     7C 0D BF FD | 	call	#_pop
1a348     A7 FA 61 FC | 	wrlong	result1, fp
1a34c     04 4E 05 F1 | 	add	fp, #4
1a350     A7 FC 61 FC | 	wrlong	result2, fp
1a354     04 4E 05 F1 | 	add	fp, #4
1a358     A7 FE 61 FC | 	wrlong	result3, fp
1a35c     08 4E 85 F1 | 	sub	fp, #8
1a360     A7 12 02 F6 | 	mov	arg01, fp
1a364     2C AE BF FD | 	call	#_converttoint
1a368     A7 FA 61 FC | 	wrlong	result1, fp
1a36c     08 4E 05 F1 | 	add	fp, #8
1a370     A7 38 68 FC | 	wrlong	#28, fp
1a374     08 4E 85 F1 | 	sub	fp, #8
1a378     A7 12 02 F6 | 	mov	arg01, fp
1a37c     DC 0D BF FD | 	call	#_push
1a380     A7 F0 03 F6 | 	mov	ptra, fp
1a384     B2 00 A0 FD | 	call	#popregs_
1a388                 | _do_round_ret
1a388     2D 00 64 FD | 	ret
1a38c                 | 
1a38c                 | ' 
1a38c                 | ' sub do_int
1a38c                 | _do_int
1a38c     02 4A 05 F6 | 	mov	COUNT_, #2
1a390     A8 00 A0 FD | 	call	#pushregs_
1a394     10 F0 07 F1 | 	add	ptra, #16
1a398     28 0D BF FD | 	call	#_pop
1a39c     FE 1E 02 F6 | 	mov	local01, result2
1a3a0     FF 20 02 F6 | 	mov	local02, result3
1a3a4     A7 FA 61 FC | 	wrlong	result1, fp
1a3a8     04 4E 05 F1 | 	add	fp, #4
1a3ac     A7 1E 62 FC | 	wrlong	local01, fp
1a3b0     04 4E 05 F1 | 	add	fp, #4
1a3b4     A7 20 62 FC | 	wrlong	local02, fp
1a3b8                 | ' 
1a3b8                 | ' t1=pop()
1a3b8                 | ' select case t1.result_type
1a3b8     08 4E 85 F1 | 	sub	fp, #8
1a3bc     1E 20 0E F2 | 	cmp	local02, #30 wz
1a3c0     14 00 90 AD |  if_e	jmp	#LR__2160
1a3c4     1F 20 0E F2 | 	cmp	local02, #31 wz
1a3c8     20 00 90 AD |  if_e	jmp	#LR__2161
1a3cc     2B 20 0E F2 | 	cmp	local02, #43 wz
1a3d0     34 00 90 AD |  if_e	jmp	#LR__2162
1a3d4     50 00 90 FD | 	jmp	#LR__2163
1a3d8                 | LR__2160
1a3d8     A7 12 02 FB | 	rdlong	arg01, fp
1a3dc     00 14 06 F6 | 	mov	arg02, #0
1a3e0     A8 99 B0 FD | 	call	#__system___float_tointeger
1a3e4     A7 FA 61 FC | 	wrlong	result1, fp
1a3e8     3C 00 90 FD | 	jmp	#LR__2163
1a3ec                 | LR__2161
1a3ec     A7 12 02 FB | 	rdlong	arg01, fp
1a3f0     B8 9C B0 FD | 	call	#__system____builtin_atof
1a3f4     FD 12 02 F6 | 	mov	arg01, result1
1a3f8     00 14 06 F6 | 	mov	arg02, #0
1a3fc     8C 99 B0 FD | 	call	#__system___float_tointeger
1a400     A7 FA 61 FC | 	wrlong	result1, fp
1a404     20 00 90 FD | 	jmp	#LR__2163
1a408                 | LR__2162
1a408     A7 12 02 FB | 	rdlong	arg01, fp
1a40c     60 65 BF FD | 	call	#_convertstring
1a410     FD 12 02 F6 | 	mov	arg01, result1
1a414     94 9C B0 FD | 	call	#__system____builtin_atof
1a418     FD 12 02 F6 | 	mov	arg01, result1
1a41c     00 14 06 F6 | 	mov	arg02, #0
1a420     68 99 B0 FD | 	call	#__system___float_tointeger
1a424     A7 FA 61 FC | 	wrlong	result1, fp
1a428                 | LR__2163
1a428     08 4E 05 F1 | 	add	fp, #8
1a42c     A7 38 68 FC | 	wrlong	#28, fp
1a430     08 4E 85 F1 | 	sub	fp, #8
1a434     A7 12 02 F6 | 	mov	arg01, fp
1a438     20 0D BF FD | 	call	#_push
1a43c     A7 F0 03 F6 | 	mov	ptra, fp
1a440     B2 00 A0 FD | 	call	#popregs_
1a444                 | _do_int_ret
1a444     2D 00 64 FD | 	ret
1a448                 | 
1a448                 | ' 
1a448                 | ' 
1a448                 | ' sub do_nothing
1a448                 | _do_nothing
1a448                 | _do_nothing_ret
1a448     2D 00 64 FD | 	ret
1a44c                 | 
1a44c                 | ' 
1a44c                 | ' sub do_brun
1a44c                 | _do_brun
1a44c     08 4A 05 F6 | 	mov	COUNT_, #8
1a450     A8 00 A0 FD | 	call	#pushregs_
1a454     6C 0C BF FD | 	call	#_pop
1a458     FE 1A 02 F6 | 	mov	arg05, result2
1a45c     FF 18 02 F6 | 	mov	arg04, result3
1a460     FD 1E 02 F6 | 	mov	local01, result1
1a464     0D 21 02 F6 | 	mov	local02, arg05
1a468     0C 23 02 F6 | 	mov	local03, arg04
1a46c                 | ' 
1a46c                 | ' t1=pop() 
1a46c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1a46c     2B 22 0E F2 | 	cmp	local03, #43 wz
1a470     10 00 90 5D |  if_ne	jmp	#LR__2170
1a474     0F 13 02 F6 | 	mov	arg01, local01
1a478     F4 64 BF FD | 	call	#_convertstring
1a47c     FD 1E 02 F6 | 	mov	local01, result1
1a480     1F 22 06 F6 | 	mov	local03, #31
1a484                 | LR__2170
1a484                 | ' if t1.result_type=result_string then
1a484     1F 22 0E F2 | 	cmp	local03, #31 wz
1a488     EC 01 90 5D |  if_ne	jmp	#LR__2174
1a48c     0F 25 02 F6 | 	mov	local04, local01
1a490                 | '   filename=t1.result.sresult
1a490                 | '   if left$(filename,1)="/" then 
1a490     12 13 02 F6 | 	mov	arg01, local04
1a494     01 14 06 F6 | 	mov	arg02, #1
1a498     F0 88 B0 FD | 	call	#__system__Left_S
1a49c     FD 12 02 F6 | 	mov	arg01, result1
1a4a0     87 01 00 FF 
1a4a4     5A 14 06 F6 | 	mov	arg02, ##@LR__5447
1a4a8     8C 68 B0 FD | 	call	#__system___string_cmp
1a4ac     00 FA 0D F2 | 	cmp	result1, #0 wz
1a4b0     12 27 02 A6 |  if_e	mov	local05, local04
1a4b4     14 00 90 AD |  if_e	jmp	#LR__2171
1a4b8     87 01 00 FF 
1a4bc     5C 12 06 F6 | 	mov	arg01, ##@LR__5448
1a4c0     12 15 02 F6 | 	mov	arg02, local04
1a4c4     A4 68 B0 FD | 	call	#__system___string_concat
1a4c8     FD 26 02 F6 | 	mov	local05, result1
1a4cc                 | LR__2171
1a4cc                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
1a4cc                 | '   open fullfilename for input as #9
1a4cc     09 12 06 F6 | 	mov	arg01, #9
1a4d0     13 15 02 F6 | 	mov	arg02, local05
1a4d4     00 16 06 F6 | 	mov	arg03, #0
1a4d8     38 74 B0 FD | 	call	#__system___basic_open_string
1a4dc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1a4e0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1a4e4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1a4e8     FD 28 0A F6 | 	mov	local06, result1 wz
1a4ec                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
1a4ec     8C 00 90 AD |  if_e	jmp	#LR__2172
1a4f0     00 12 06 F6 | 	mov	arg01, #0
1a4f4     58 C2 B0 FD | 	call	#__system___getiolock_0540
1a4f8     FD 12 02 F6 | 	mov	arg01, result1
1a4fc     10 68 B0 FD | 	call	#__system___lockmem
1a500     87 01 00 FF 
1a504     65 14 06 F6 | 	mov	arg02, ##@LR__5449
1a508     00 12 06 F6 | 	mov	arg01, #0
1a50c     00 16 06 F6 | 	mov	arg03, #0
1a510     F0 74 B0 FD | 	call	#__system___basic_print_string
1a514     00 12 06 F6 | 	mov	arg01, #0
1a518     14 15 02 F6 | 	mov	arg02, local06
1a51c     00 16 06 F6 | 	mov	arg03, #0
1a520     0A 18 06 F6 | 	mov	arg04, #10
1a524     20 75 B0 FD | 	call	#__system___basic_print_integer
1a528     87 01 00 FF 
1a52c     73 14 06 F6 | 	mov	arg02, ##@LR__5450
1a530     00 12 06 F6 | 	mov	arg01, #0
1a534     00 16 06 F6 | 	mov	arg03, #0
1a538     C8 74 B0 FD | 	call	#__system___basic_print_string
1a53c     14 13 02 F6 | 	mov	arg01, local06
1a540     94 8E B0 FD | 	call	#__system___strerror
1a544     FD 14 02 F6 | 	mov	arg02, result1
1a548     00 12 06 F6 | 	mov	arg01, #0
1a54c     00 16 06 F6 | 	mov	arg03, #0
1a550     B0 74 B0 FD | 	call	#__system___basic_print_string
1a554     00 12 06 F6 | 	mov	arg01, #0
1a558     0A 14 06 F6 | 	mov	arg02, #10
1a55c     00 16 06 F6 | 	mov	arg03, #0
1a560     48 74 B0 FD | 	call	#__system___basic_print_char
1a564     00 12 06 F6 | 	mov	arg01, #0
1a568     E4 C1 B0 FD | 	call	#__system___getiolock_0540
1a56c     FD 00 68 FC | 	wrlong	#0, result1
1a570     09 12 06 F6 | 	mov	arg01, #9
1a574     08 B8 B0 FD | 	call	#__system__close
1a578     FC 00 90 FD | 	jmp	#LR__2175
1a57c                 | LR__2172
1a57c     01 2A 06 F6 | 	mov	local07, #1
1a580     00 2C 06 F6 | 	mov	local08, #0
1a584                 | '   do
1a584                 | LR__2173
1a584                 | '     get #9,pos,block(0),1024,r : pos+=r	
1a584     56 00 00 FF 
1a588     E8 E4 05 F1 | 	add	objptr, ##44264
1a58c     F2 16 02 F6 | 	mov	arg03, objptr
1a590     56 00 00 FF 
1a594     E8 E4 85 F1 | 	sub	objptr, ##44264
1a598     09 12 06 F6 | 	mov	arg01, #9
1a59c     15 15 02 F6 | 	mov	arg02, local07
1a5a0     0A 18 C6 F9 | 	decod	arg04, #10
1a5a4     01 1A 06 F6 | 	mov	arg05, #1
1a5a8     D4 75 B0 FD | 	call	#__system___basic_get
1a5ac     FD 28 02 F6 | 	mov	local06, result1
1a5b0     FD 2A 02 F1 | 	add	local07, result1
1a5b4     56 00 00 FF 
1a5b8     E8 E4 05 F1 | 	add	objptr, ##44264
1a5bc     F2 12 02 F6 | 	mov	arg01, objptr
1a5c0     16 15 02 F6 | 	mov	arg02, local08
1a5c4     0A 16 C6 F9 | 	decod	arg03, #10
1a5c8     4B 00 00 FF 
1a5cc     1C E4 85 F1 | 	sub	objptr, ##38428
1a5d0     98 5B B0 FD | 	call	#_psram_spin2_write
1a5d4     0B 00 00 FF 
1a5d8     CC E4 85 F1 | 	sub	objptr, ##5836
1a5dc     14 2D 02 F1 | 	add	local08, local06
1a5e0     02 00 00 FF 
1a5e4     00 28 0E F2 | 	cmp	local06, ##1024 wz
1a5e8     E0 03 00 AF 
1a5ec     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
1a5f0     90 FF 9F 8D |  if_c_and_z	jmp	#LR__2173
1a5f4     37 00 00 FF 
1a5f8     2C E4 05 F1 | 	add	objptr, ##28204
1a5fc     F2 12 02 FB | 	rdlong	arg01, objptr
1a600     03 12 62 FD | 	cogstop	arg01
1a604     04 E4 05 F1 | 	add	objptr, #4
1a608     F2 12 02 FB | 	rdlong	arg01, objptr
1a60c     03 12 62 FD | 	cogstop	arg01
1a610     04 E4 05 F1 | 	add	objptr, #4
1a614     F2 12 02 FB | 	rdlong	arg01, objptr
1a618     03 12 62 FD | 	cogstop	arg01
1a61c     21 00 00 FF 
1a620     18 E5 05 F1 | 	add	objptr, ##17176
1a624     F2 12 02 FB | 	rdlong	arg01, objptr
1a628     03 12 62 FD | 	cogstop	arg01
1a62c     18 00 00 FF 
1a630     D8 EA 05 F1 | 	add	ptr__dat__, ##12504
1a634     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1a638     18 00 00 FF 
1a63c     D8 EA 85 F1 | 	sub	ptr__dat__, ##12504
1a640     21 00 00 FF 
1a644     10 E5 85 F1 | 	sub	objptr, ##17168
1a648     1E 2C 06 F6 | 	mov	local08, #30
1a64c     28 E4 61 FD | 	setq	objptr
1a650     0A 2D F2 FC | 	coginit	local08, arg02 wc
1a654     01 2C 66 C6 |  if_b	neg	local08, #1
1a658     23 00 00 FF 
1a65c     54 E4 05 F1 | 	add	objptr, ##18004
1a660     F2 2C 62 FC | 	wrlong	local08, objptr
1a664     5A 00 00 FF 
1a668     90 E4 85 F1 | 	sub	objptr, ##46224
1a66c     00 12 06 F6 | 	mov	arg01, #0
1a670     01 12 62 FD | 	cogid	arg01
1a674     03 12 62 FD | 	cogstop	arg01
1a678                 | LR__2174
1a678                 | LR__2175
1a678     A7 F0 03 F6 | 	mov	ptra, fp
1a67c     B2 00 A0 FD | 	call	#popregs_
1a680                 | _do_brun_ret
1a680     2D 00 64 FD | 	ret
1a684                 | 
1a684                 | ' 
1a684                 | ' 
1a684                 | ' sub do_mouse
1a684                 | _do_mouse
1a684     3C 0A BF FD | 	call	#_pop
1a688     00 FA 4D F2 | 	cmps	result1, #0 wz
1a68c                 | ' t1=pop()
1a68c                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
1a68c     14 00 90 5D |  if_ne	jmp	#LR__2180
1a690     10 12 06 F6 | 	mov	arg01, #16
1a694     00 14 06 F6 | 	mov	arg02, #0
1a698     00 16 06 F6 | 	mov	arg03, #0
1a69c     A8 42 B0 FD | 	call	#_hg010b_spin2_setspritesize
1a6a0     10 00 90 FD | 	jmp	#LR__2181
1a6a4                 | LR__2180
1a6a4     10 12 06 F6 | 	mov	arg01, #16
1a6a8     20 14 06 F6 | 	mov	arg02, #32
1a6ac     20 16 06 F6 | 	mov	arg03, #32
1a6b0     94 42 B0 FD | 	call	#_hg010b_spin2_setspritesize
1a6b4                 | LR__2181
1a6b4                 | _do_mouse_ret
1a6b4     2D 00 64 FD | 	ret
1a6b8                 | 
1a6b8                 | ' 
1a6b8                 | ' sub do_cursor
1a6b8                 | _do_cursor
1a6b8     08 0A BF FD | 	call	#_pop
1a6bc     00 FA 4D F2 | 	cmps	result1, #0 wz
1a6c0                 | ' t1=pop()
1a6c0                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
1a6c0     14 00 90 5D |  if_ne	jmp	#LR__2190
1a6c4     11 12 06 F6 | 	mov	arg01, #17
1a6c8     00 14 06 F6 | 	mov	arg02, #0
1a6cc     00 16 06 F6 | 	mov	arg03, #0
1a6d0     74 42 B0 FD | 	call	#_hg010b_spin2_setspritesize
1a6d4     10 00 90 FD | 	jmp	#LR__2191
1a6d8                 | LR__2190
1a6d8     11 12 06 F6 | 	mov	arg01, #17
1a6dc     08 14 06 F6 | 	mov	arg02, #8
1a6e0     10 16 06 F6 | 	mov	arg03, #16
1a6e4     60 42 B0 FD | 	call	#_hg010b_spin2_setspritesize
1a6e8                 | LR__2191
1a6e8                 | _do_cursor_ret
1a6e8     2D 00 64 FD | 	ret
1a6ec                 | 
1a6ec                 | ' 
1a6ec                 | ' 
1a6ec                 | ' sub do_click
1a6ec                 | _do_click
1a6ec     D4 09 BF FD | 	call	#_pop
1a6f0     00 FA 4D F2 | 	cmps	result1, #0 wz
1a6f4                 | ' t1=pop()
1a6f4                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
1a6f4     58 00 00 AF 
1a6f8     48 E5 05 A1 |  if_e	add	objptr, ##45384
1a6fc     F2 00 68 AC |  if_e	wrlong	#0, objptr
1a700     58 00 00 FF 
1a704     48 E5 C5 F3 | 	sumz	objptr, ##45384
1a708     F2 02 68 5C |  if_ne	wrlong	#1, objptr
1a70c     58 00 00 5F 
1a710     48 E5 85 51 |  if_ne	sub	objptr, ##45384
1a714                 | _do_click_ret
1a714     2D 00 64 FD | 	ret
1a718                 | 
1a718                 | ' 
1a718                 | ' 
1a718                 | ' sub do_beep
1a718                 | _do_beep
1a718     02 4A 05 F6 | 	mov	COUNT_, #2
1a71c     A8 00 A0 FD | 	call	#pushregs_
1a720     20 F0 07 F1 | 	add	ptra, #32
1a724     9C 09 BF FD | 	call	#_pop
1a728     FD 1E 02 F6 | 	mov	local01, result1
1a72c     FE 1C 02 F6 | 	mov	arg06, result2
1a730     FF 20 02 F6 | 	mov	local02, result3
1a734     0C 4E 05 F1 | 	add	fp, #12
1a738     A7 1E 62 FC | 	wrlong	local01, fp
1a73c     04 4E 05 F1 | 	add	fp, #4
1a740     A7 1C 62 FC | 	wrlong	arg06, fp
1a744     04 4E 05 F1 | 	add	fp, #4
1a748     A7 20 62 FC | 	wrlong	local02, fp
1a74c     14 4E 85 F1 | 	sub	fp, #20
1a750     70 09 BF FD | 	call	#_pop
1a754     A7 FA 61 FC | 	wrlong	result1, fp
1a758     04 4E 05 F1 | 	add	fp, #4
1a75c     A7 FC 61 FC | 	wrlong	result2, fp
1a760     04 4E 05 F1 | 	add	fp, #4
1a764     A7 FE 61 FC | 	wrlong	result3, fp
1a768                 | ' 
1a768                 | ' t2=pop()
1a768                 | ' t1=pop()
1a768                 | ' 
1a768                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
1a768     08 4E 85 F1 | 	sub	fp, #8
1a76c     1C FE 0D F2 | 	cmp	result3, #28 wz
1a770     08 4E 05 51 |  if_ne	add	fp, #8
1a774     A7 20 02 5B |  if_ne	rdlong	local02, fp
1a778     08 4E 85 51 |  if_ne	sub	fp, #8
1a77c     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
1a780     A7 1E 02 AB |  if_e	rdlong	local01, fp
1a784     18 4E 05 A1 |  if_e	add	fp, #24
1a788     A7 1E 62 AC |  if_e	wrlong	local01, fp
1a78c     18 4E 85 A1 |  if_e	sub	fp, #24
1a790     14 00 90 AD |  if_e	jmp	#LR__2200
1a794     A7 12 02 F6 | 	mov	arg01, fp
1a798     F8 A9 BF FD | 	call	#_converttoint
1a79c     18 4E 05 F1 | 	add	fp, #24
1a7a0     A7 FA 61 FC | 	wrlong	result1, fp
1a7a4     18 4E 85 F1 | 	sub	fp, #24
1a7a8                 | LR__2200
1a7a8     1C 4E 05 F1 | 	add	fp, #28
1a7ac     A7 FE 48 FC | 	wrbyte	#127, fp
1a7b0     01 4E 05 F1 | 	add	fp, #1
1a7b4     A7 00 49 FC | 	wrbyte	#128, fp
1a7b8     01 4E 85 F1 | 	sub	fp, #1
1a7bc     A7 14 02 F6 | 	mov	arg02, fp
1a7c0     04 4E 85 F1 | 	sub	fp, #4
1a7c4     A7 16 02 FB | 	rdlong	arg03, fp
1a7c8     18 4E 85 F1 | 	sub	fp, #24
1a7cc     01 16 66 F0 | 	shl	arg03, #1
1a7d0     07 12 06 F6 | 	mov	arg01, #7
1a7d4     0E 18 C6 F9 | 	decod	arg04, #14
1a7d8     02 1A 06 F6 | 	mov	arg05, #2
1a7dc     00 1C 06 F6 | 	mov	arg06, #0
1a7e0     0B 00 00 FF 
1a7e4     CC E4 05 F1 | 	add	objptr, ##5836
1a7e8     80 61 B0 FD | 	call	#_audio096_spin2_play8
1a7ec     0B 00 00 FF 
1a7f0     CC E4 85 F1 | 	sub	objptr, ##5836
1a7f4     0C 4E 05 F1 | 	add	fp, #12
1a7f8     A7 12 02 F6 | 	mov	arg01, fp
1a7fc     0C 4E 85 F1 | 	sub	fp, #12
1a800     58 09 BF FD | 	call	#_push
1a804     FC F4 BF FD | 	call	#_do_waitms
1a808     07 12 06 F6 | 	mov	arg01, #7
1a80c     0B 00 00 FF 
1a810     CC E4 05 F1 | 	add	objptr, ##5836
1a814     F8 61 B0 FD | 	call	#_audio096_spin2_stop
1a818     0B 00 00 FF 
1a81c     CC E4 85 F1 | 	sub	objptr, ##5836
1a820     A7 F0 03 F6 | 	mov	ptra, fp
1a824     B2 00 A0 FD | 	call	#popregs_
1a828                 | _do_beep_ret
1a828     2D 00 64 FD | 	ret
1a82c                 | 
1a82c                 | ' 
1a82c                 | ' sub do_no_command
1a82c                 | _do_no_command
1a82c     17 12 06 F6 | 	mov	arg01, #23
1a830     34 20 B0 FD | 	call	#_printerror
1a834                 | _do_no_command_ret
1a834     2D 00 64 FD | 	ret
1a838                 | 
1a838                 | ' 
1a838                 | ' sub do_negative
1a838                 | _do_negative
1a838     02 4A 05 F6 | 	mov	COUNT_, #2
1a83c     A8 00 A0 FD | 	call	#pushregs_
1a840     0C F0 07 F1 | 	add	ptra, #12
1a844     7C 08 BF FD | 	call	#_pop
1a848     FF 1E 02 F6 | 	mov	local01, result3
1a84c     A7 FA 61 FC | 	wrlong	result1, fp
1a850     04 4E 05 F1 | 	add	fp, #4
1a854     A7 FC 61 FC | 	wrlong	result2, fp
1a858     04 4E 05 F1 | 	add	fp, #4
1a85c     A7 1E 62 FC | 	wrlong	local01, fp
1a860                 | ' t1=pop()
1a860                 | ' if t1.result_type=result_int then 
1a860     08 4E 85 F1 | 	sub	fp, #8
1a864     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a868     A7 20 02 AB |  if_e	rdlong	local02, fp
1a86c     10 1F 62 A6 |  if_e	neg	local01, local02
1a870     A7 1E 62 AC |  if_e	wrlong	local01, fp
1a874     5C 00 90 AD |  if_e	jmp	#LR__2212
1a878     08 4E 05 F1 | 	add	fp, #8
1a87c     A7 1E 02 FB | 	rdlong	local01, fp
1a880     08 4E 85 F1 | 	sub	fp, #8
1a884     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a888     1C 00 90 5D |  if_ne	jmp	#LR__2210
1a88c     A7 20 02 FB | 	rdlong	local02, fp
1a890     10 1F 62 F6 | 	neg	local01, local02
1a894     A7 1E 62 FC | 	wrlong	local01, fp
1a898     08 4E 05 F1 | 	add	fp, #8
1a89c     A7 38 68 FC | 	wrlong	#28, fp
1a8a0     08 4E 85 F1 | 	sub	fp, #8
1a8a4     2C 00 90 FD | 	jmp	#LR__2211
1a8a8                 | LR__2210
1a8a8     08 4E 05 F1 | 	add	fp, #8
1a8ac     A7 1E 02 FB | 	rdlong	local01, fp
1a8b0     08 4E 85 F1 | 	sub	fp, #8
1a8b4     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a8b8     A7 FA 01 AB |  if_e	rdlong	result1, fp
1a8bc     1F FA E5 A4 |  if_e	bitnot	result1, #31
1a8c0     A7 FA 61 AC |  if_e	wrlong	result1, fp
1a8c4     08 4E 05 51 |  if_ne	add	fp, #8
1a8c8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1a8cc     08 4E 85 51 |  if_ne	sub	fp, #8
1a8d0     A7 50 68 5C |  if_ne	wrlong	#40, fp
1a8d4                 | LR__2211
1a8d4                 | LR__2212
1a8d4     A7 12 02 F6 | 	mov	arg01, fp
1a8d8     80 08 BF FD | 	call	#_push
1a8dc     A7 F0 03 F6 | 	mov	ptra, fp
1a8e0     B2 00 A0 FD | 	call	#popregs_
1a8e4                 | _do_negative_ret
1a8e4     2D 00 64 FD | 	ret
1a8e8                 | 
1a8e8                 | ' 
1a8e8                 | ' sub do_abs
1a8e8                 | _do_abs
1a8e8     01 4A 05 F6 | 	mov	COUNT_, #1
1a8ec     A8 00 A0 FD | 	call	#pushregs_
1a8f0     0C F0 07 F1 | 	add	ptra, #12
1a8f4     CC 07 BF FD | 	call	#_pop
1a8f8     FF 1E 02 F6 | 	mov	local01, result3
1a8fc     A7 FA 61 FC | 	wrlong	result1, fp
1a900     04 4E 05 F1 | 	add	fp, #4
1a904     A7 FC 61 FC | 	wrlong	result2, fp
1a908     04 4E 05 F1 | 	add	fp, #4
1a90c     A7 1E 62 FC | 	wrlong	local01, fp
1a910                 | ' t1=pop()
1a910                 | ' if t1.result_type=result_int then 
1a910     08 4E 85 F1 | 	sub	fp, #8
1a914     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a918     A7 12 02 AB |  if_e	rdlong	arg01, fp
1a91c     09 1F 42 A6 |  if_e	abs	local01, arg01
1a920     A7 1E 62 AC |  if_e	wrlong	local01, fp
1a924     2C 00 90 AD |  if_e	jmp	#LR__2220
1a928     08 4E 05 F1 | 	add	fp, #8
1a92c     A7 1E 02 FB | 	rdlong	local01, fp
1a930     08 4E 85 F1 | 	sub	fp, #8
1a934     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a938     A7 FA 01 AB |  if_e	rdlong	result1, fp
1a93c     1F FA 05 A4 |  if_e	bitl	result1, #31
1a940     A7 FA 61 AC |  if_e	wrlong	result1, fp
1a944     08 4E 05 51 |  if_ne	add	fp, #8
1a948     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1a94c     08 4E 85 51 |  if_ne	sub	fp, #8
1a950     A7 50 68 5C |  if_ne	wrlong	#40, fp
1a954                 | LR__2220
1a954     A7 12 02 F6 | 	mov	arg01, fp
1a958     00 08 BF FD | 	call	#_push
1a95c     A7 F0 03 F6 | 	mov	ptra, fp
1a960     B2 00 A0 FD | 	call	#popregs_
1a964                 | _do_abs_ret
1a964     2D 00 64 FD | 	ret
1a968                 | 
1a968                 | ' 
1a968                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1a968                 | ' 
1a968                 | ' ''----------------------------------------------------------------------------------------------------
1a968                 | ' ''------------------ Initialization procedures -------------------------------------------------------
1a968                 | ' ''----------------------------------------------------------------------------------------------------
1a968                 | ' 
1a968                 | ' ''--------------------------- Command function pointers
1a968                 | ' 
1a968                 | ' sub init_commands
1a968                 | _init_commands
1a968                 | ' 
1a968                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1a968     00 00 06 F6 | 	mov	_var01, #0
1a96c     97 16 48 FB | 	callpa	#(@LR__2231-@LR__2230)>>2,fcache_load_ptr_
1a970                 | LR__2230
1a970     00 FB 01 F6 | 	mov	result1, _var01
1a974     02 FA 65 F0 | 	shl	result1, #2
1a978     43 00 00 FF 
1a97c     90 E4 05 F1 | 	add	objptr, ##34448
1a980     F2 FA 01 F1 | 	add	result1, objptr
1a984     43 00 00 FF 
1a988     90 E4 85 F1 | 	sub	objptr, ##34448
1a98c     FD E4 61 FC | 	wrlong	objptr, result1
1a990     01 00 06 F1 | 	add	_var01, #1
1a994     00 01 56 F2 | 	cmps	_var01, #256 wc
1a998     D4 FF 9F CD |  if_b	jmp	#LR__2230
1a99c                 | LR__2231
1a99c     F2 FA 01 F6 | 	mov	result1, objptr
1a9a0     14 FA 25 F4 | 	bith	result1, #20
1a9a4     43 00 00 FF 
1a9a8     94 E4 05 F1 | 	add	objptr, ##34452
1a9ac     F2 FA 61 FC | 	wrlong	result1, objptr
1a9b0     43 00 00 FF 
1a9b4     94 E4 85 F1 | 	sub	objptr, ##34452
1a9b8     F2 FA 01 F6 | 	mov	result1, objptr
1a9bc     15 FA 25 F4 | 	bith	result1, #21
1a9c0     43 00 00 FF 
1a9c4     98 E4 05 F1 | 	add	objptr, ##34456
1a9c8     F2 FA 61 FC | 	wrlong	result1, objptr
1a9cc     43 00 00 FF 
1a9d0     98 E4 85 F1 | 	sub	objptr, ##34456
1a9d4     F2 FA 01 F6 | 	mov	result1, objptr
1a9d8     34 FA 25 F4 | 	bith	result1, #52
1a9dc     43 00 00 FF 
1a9e0     9C E4 05 F1 | 	add	objptr, ##34460
1a9e4     F2 FA 61 FC | 	wrlong	result1, objptr
1a9e8     43 00 00 FF 
1a9ec     9C E4 85 F1 | 	sub	objptr, ##34460
1a9f0     F2 FA 01 F6 | 	mov	result1, objptr
1a9f4     16 FA 25 F4 | 	bith	result1, #22
1a9f8     43 00 00 FF 
1a9fc     A4 E4 05 F1 | 	add	objptr, ##34468
1aa00     F2 FA 61 FC | 	wrlong	result1, objptr
1aa04     43 00 00 FF 
1aa08     A4 E4 85 F1 | 	sub	objptr, ##34468
1aa0c     F2 FA 01 F6 | 	mov	result1, objptr
1aa10     00 28 00 FF 
1aa14     00 FA 45 F5 | 	or	result1, ##5242880
1aa18     43 00 00 FF 
1aa1c     A8 E4 05 F1 | 	add	objptr, ##34472
1aa20     F2 FA 61 FC | 	wrlong	result1, objptr
1aa24     43 00 00 FF 
1aa28     A8 E4 85 F1 | 	sub	objptr, ##34472
1aa2c     F2 FA 01 F6 | 	mov	result1, objptr
1aa30     35 FA 25 F4 | 	bith	result1, #53
1aa34     43 00 00 FF 
1aa38     AC E4 05 F1 | 	add	objptr, ##34476
1aa3c     F2 FA 61 FC | 	wrlong	result1, objptr
1aa40     43 00 00 FF 
1aa44     AC E4 85 F1 | 	sub	objptr, ##34476
1aa48     F2 FA 01 F6 | 	mov	result1, objptr
1aa4c     54 FA 25 F4 | 	bith	result1, #84
1aa50     43 00 00 FF 
1aa54     B0 E4 05 F1 | 	add	objptr, ##34480
1aa58     F2 FA 61 FC | 	wrlong	result1, objptr
1aa5c     43 00 00 FF 
1aa60     B0 E4 85 F1 | 	sub	objptr, ##34480
1aa64     F2 FA 01 F6 | 	mov	result1, objptr
1aa68     17 FA 25 F4 | 	bith	result1, #23
1aa6c     43 00 00 FF 
1aa70     B4 E4 05 F1 | 	add	objptr, ##34484
1aa74     F2 FA 61 FC | 	wrlong	result1, objptr
1aa78     43 00 00 FF 
1aa7c     B4 E4 85 F1 | 	sub	objptr, ##34484
1aa80     F2 FA 01 F6 | 	mov	result1, objptr
1aa84     00 48 00 FF 
1aa88     00 FA 45 F5 | 	or	result1, ##9437184
1aa8c     43 00 00 FF 
1aa90     B8 E4 05 F1 | 	add	objptr, ##34488
1aa94     F2 FA 61 FC | 	wrlong	result1, objptr
1aa98     43 00 00 FF 
1aa9c     B8 E4 85 F1 | 	sub	objptr, ##34488
1aaa0     F2 FA 01 F6 | 	mov	result1, objptr
1aaa4     00 50 00 FF 
1aaa8     00 FA 45 F5 | 	or	result1, ##10485760
1aaac     43 00 00 FF 
1aab0     BC E4 05 F1 | 	add	objptr, ##34492
1aab4     F2 FA 61 FC | 	wrlong	result1, objptr
1aab8     43 00 00 FF 
1aabc     BC E4 85 F1 | 	sub	objptr, ##34492
1aac0     F2 FA 01 F6 | 	mov	result1, objptr
1aac4     00 58 00 FF 
1aac8     00 FA 45 F5 | 	or	result1, ##11534336
1aacc     43 00 00 FF 
1aad0     C0 E4 05 F1 | 	add	objptr, ##34496
1aad4     F2 FA 61 FC | 	wrlong	result1, objptr
1aad8     43 00 00 FF 
1aadc     C0 E4 85 F1 | 	sub	objptr, ##34496
1aae0     F2 FA 01 F6 | 	mov	result1, objptr
1aae4     36 FA 25 F4 | 	bith	result1, #54
1aae8     43 00 00 FF 
1aaec     D4 E4 05 F1 | 	add	objptr, ##34516
1aaf0     F2 FA 61 FC | 	wrlong	result1, objptr
1aaf4     43 00 00 FF 
1aaf8     D4 E4 85 F1 | 	sub	objptr, ##34516
1aafc     F2 FA 01 F6 | 	mov	result1, objptr
1ab00     00 68 00 FF 
1ab04     00 FA 45 F5 | 	or	result1, ##13631488
1ab08     43 00 00 FF 
1ab0c     04 E5 05 F1 | 	add	objptr, ##34564
1ab10     F2 FA 61 FC | 	wrlong	result1, objptr
1ab14     43 00 00 FF 
1ab18     04 E5 85 F1 | 	sub	objptr, ##34564
1ab1c     F2 FA 01 F6 | 	mov	result1, objptr
1ab20     00 68 00 FF 
1ab24     00 FA 45 F5 | 	or	result1, ##13631488
1ab28     43 00 00 FF 
1ab2c     00 E5 05 F1 | 	add	objptr, ##34560
1ab30     F2 FA 61 FC | 	wrlong	result1, objptr
1ab34     43 00 00 FF 
1ab38     00 E5 85 F1 | 	sub	objptr, ##34560
1ab3c     F2 FA 01 F6 | 	mov	result1, objptr
1ab40     00 68 00 FF 
1ab44     00 FA 45 F5 | 	or	result1, ##13631488
1ab48     43 00 00 FF 
1ab4c     08 E5 05 F1 | 	add	objptr, ##34568
1ab50     F2 FA 61 FC | 	wrlong	result1, objptr
1ab54     43 00 00 FF 
1ab58     08 E5 85 F1 | 	sub	objptr, ##34568
1ab5c     F2 FA 01 F6 | 	mov	result1, objptr
1ab60     00 68 00 FF 
1ab64     00 FA 45 F5 | 	or	result1, ##13631488
1ab68     43 00 00 FF 
1ab6c     0C E5 05 F1 | 	add	objptr, ##34572
1ab70     F2 FA 61 FC | 	wrlong	result1, objptr
1ab74     43 00 00 FF 
1ab78     0C E5 85 F1 | 	sub	objptr, ##34572
1ab7c     F2 FA 01 F6 | 	mov	result1, objptr
1ab80     00 68 00 FF 
1ab84     00 FA 45 F5 | 	or	result1, ##13631488
1ab88     43 00 00 FF 
1ab8c     3C E5 05 F1 | 	add	objptr, ##34620
1ab90     F2 FA 61 FC | 	wrlong	result1, objptr
1ab94     43 00 00 FF 
1ab98     3C E5 85 F1 | 	sub	objptr, ##34620
1ab9c     F2 FA 01 F6 | 	mov	result1, objptr
1aba0     55 FA 25 F4 | 	bith	result1, #85
1aba4     43 00 00 FF 
1aba8     EC E4 05 F1 | 	add	objptr, ##34540
1abac     F2 FA 61 FC | 	wrlong	result1, objptr
1abb0     43 00 00 FF 
1abb4     EC E4 85 F1 | 	sub	objptr, ##34540
1abb8     F2 FA 01 F6 | 	mov	result1, objptr
1abbc     00 68 00 FF 
1abc0     00 FA 45 F5 | 	or	result1, ##13631488
1abc4     43 00 00 FF 
1abc8     40 E5 05 F1 | 	add	objptr, ##34624
1abcc     F2 FA 61 FC | 	wrlong	result1, objptr
1abd0     43 00 00 FF 
1abd4     40 E5 85 F1 | 	sub	objptr, ##34624
1abd8     F2 FA 01 F6 | 	mov	result1, objptr
1abdc     00 68 00 FF 
1abe0     00 FA 45 F5 | 	or	result1, ##13631488
1abe4     43 00 00 FF 
1abe8     10 E5 05 F1 | 	add	objptr, ##34576
1abec     F2 FA 61 FC | 	wrlong	result1, objptr
1abf0     43 00 00 FF 
1abf4     10 E5 85 F1 | 	sub	objptr, ##34576
1abf8     F2 FA 01 F6 | 	mov	result1, objptr
1abfc     00 68 00 FF 
1ac00     00 FA 45 F5 | 	or	result1, ##13631488
1ac04     43 00 00 FF 
1ac08     14 E5 05 F1 | 	add	objptr, ##34580
1ac0c     F2 FA 61 FC | 	wrlong	result1, objptr
1ac10     43 00 00 FF 
1ac14     14 E5 85 F1 | 	sub	objptr, ##34580
1ac18     F2 FA 01 F6 | 	mov	result1, objptr
1ac1c     00 68 00 FF 
1ac20     00 FA 45 F5 | 	or	result1, ##13631488
1ac24     43 00 00 FF 
1ac28     18 E5 05 F1 | 	add	objptr, ##34584
1ac2c     F2 FA 61 FC | 	wrlong	result1, objptr
1ac30     43 00 00 FF 
1ac34     18 E5 85 F1 | 	sub	objptr, ##34584
1ac38     F2 FA 01 F6 | 	mov	result1, objptr
1ac3c     74 FA 25 F4 | 	bith	result1, #116
1ac40     43 00 00 FF 
1ac44     90 E5 05 F1 | 	add	objptr, ##34704
1ac48     F2 FA 61 FC | 	wrlong	result1, objptr
1ac4c     43 00 00 FF 
1ac50     90 E5 85 F1 | 	sub	objptr, ##34704
1ac54     F2 FA 01 F6 | 	mov	result1, objptr
1ac58     18 FA 25 F4 | 	bith	result1, #24
1ac5c     43 00 00 FF 
1ac60     94 E5 05 F1 | 	add	objptr, ##34708
1ac64     F2 FA 61 FC | 	wrlong	result1, objptr
1ac68     43 00 00 FF 
1ac6c     94 E5 85 F1 | 	sub	objptr, ##34708
1ac70     F2 FA 01 F6 | 	mov	result1, objptr
1ac74     00 88 00 FF 
1ac78     00 FA 45 F5 | 	or	result1, ##17825792
1ac7c     43 00 00 FF 
1ac80     98 E5 05 F1 | 	add	objptr, ##34712
1ac84     F2 FA 61 FC | 	wrlong	result1, objptr
1ac88     43 00 00 FF 
1ac8c     98 E5 85 F1 | 	sub	objptr, ##34712
1ac90     F2 FA 01 F6 | 	mov	result1, objptr
1ac94     00 90 00 FF 
1ac98     00 FA 45 F5 | 	or	result1, ##18874368
1ac9c     43 00 00 FF 
1aca0     9C E5 05 F1 | 	add	objptr, ##34716
1aca4     F2 FA 61 FC | 	wrlong	result1, objptr
1aca8     43 00 00 FF 
1acac     9C E5 85 F1 | 	sub	objptr, ##34716
1acb0     F2 FA 01 F6 | 	mov	result1, objptr
1acb4     00 98 00 FF 
1acb8     00 FA 45 F5 | 	or	result1, ##19922944
1acbc     43 00 00 FF 
1acc0     A0 E5 05 F1 | 	add	objptr, ##34720
1acc4     F2 FA 61 FC | 	wrlong	result1, objptr
1acc8     43 00 00 FF 
1accc     A0 E5 85 F1 | 	sub	objptr, ##34720
1acd0     F2 FA 01 F6 | 	mov	result1, objptr
1acd4     00 A0 00 FF 
1acd8     00 FA 45 F5 | 	or	result1, ##20971520
1acdc     43 00 00 FF 
1ace0     A4 E5 05 F1 | 	add	objptr, ##34724
1ace4     F2 FA 61 FC | 	wrlong	result1, objptr
1ace8     43 00 00 FF 
1acec     A4 E5 85 F1 | 	sub	objptr, ##34724
1acf0     F2 FA 01 F6 | 	mov	result1, objptr
1acf4     00 A8 00 FF 
1acf8     00 FA 45 F5 | 	or	result1, ##22020096
1acfc     43 00 00 FF 
1ad00     A8 E5 05 F1 | 	add	objptr, ##34728
1ad04     F2 FA 61 FC | 	wrlong	result1, objptr
1ad08     43 00 00 FF 
1ad0c     A8 E5 85 F1 | 	sub	objptr, ##34728
1ad10     F2 FA 01 F6 | 	mov	result1, objptr
1ad14     00 B0 00 FF 
1ad18     00 FA 45 F5 | 	or	result1, ##23068672
1ad1c     43 00 00 FF 
1ad20     AC E5 05 F1 | 	add	objptr, ##34732
1ad24     F2 FA 61 FC | 	wrlong	result1, objptr
1ad28     43 00 00 FF 
1ad2c     AC E5 85 F1 | 	sub	objptr, ##34732
1ad30     F2 FA 01 F6 | 	mov	result1, objptr
1ad34     00 B8 00 FF 
1ad38     00 FA 45 F5 | 	or	result1, ##24117248
1ad3c     43 00 00 FF 
1ad40     B0 E5 05 F1 | 	add	objptr, ##34736
1ad44     F2 FA 61 FC | 	wrlong	result1, objptr
1ad48     43 00 00 FF 
1ad4c     B0 E5 85 F1 | 	sub	objptr, ##34736
1ad50     F2 FA 01 F6 | 	mov	result1, objptr
1ad54     37 FA 25 F4 | 	bith	result1, #55
1ad58     43 00 00 FF 
1ad5c     B4 E5 05 F1 | 	add	objptr, ##34740
1ad60     F2 FA 61 FC | 	wrlong	result1, objptr
1ad64     43 00 00 FF 
1ad68     B4 E5 85 F1 | 	sub	objptr, ##34740
1ad6c     F2 FA 01 F6 | 	mov	result1, objptr
1ad70     00 C8 00 FF 
1ad74     00 FA 45 F5 | 	or	result1, ##26214400
1ad78     43 00 00 FF 
1ad7c     B8 E5 05 F1 | 	add	objptr, ##34744
1ad80     F2 FA 61 FC | 	wrlong	result1, objptr
1ad84     43 00 00 FF 
1ad88     B8 E5 85 F1 | 	sub	objptr, ##34744
1ad8c     F2 FA 01 F6 | 	mov	result1, objptr
1ad90     00 D0 00 FF 
1ad94     00 FA 45 F5 | 	or	result1, ##27262976
1ad98     43 00 00 FF 
1ad9c     BC E5 05 F1 | 	add	objptr, ##34748
1ada0     F2 FA 61 FC | 	wrlong	result1, objptr
1ada4     43 00 00 FF 
1ada8     BC E5 85 F1 | 	sub	objptr, ##34748
1adac     F2 FA 01 F6 | 	mov	result1, objptr
1adb0     00 D8 00 FF 
1adb4     00 FA 45 F5 | 	or	result1, ##28311552
1adb8     43 00 00 FF 
1adbc     C0 E5 05 F1 | 	add	objptr, ##34752
1adc0     F2 FA 61 FC | 	wrlong	result1, objptr
1adc4     43 00 00 FF 
1adc8     C0 E5 85 F1 | 	sub	objptr, ##34752
1adcc     F2 FA 01 F6 | 	mov	result1, objptr
1add0     56 FA 25 F4 | 	bith	result1, #86
1add4     43 00 00 FF 
1add8     C4 E5 05 F1 | 	add	objptr, ##34756
1addc     F2 FA 61 FC | 	wrlong	result1, objptr
1ade0     43 00 00 FF 
1ade4     C4 E5 85 F1 | 	sub	objptr, ##34756
1ade8     F2 FA 01 F6 | 	mov	result1, objptr
1adec     00 E8 00 FF 
1adf0     00 FA 45 F5 | 	or	result1, ##30408704
1adf4     45 00 00 FF 
1adf8     8C E4 05 F1 | 	add	objptr, ##35468
1adfc     F2 FA 61 FC | 	wrlong	result1, objptr
1ae00     45 00 00 FF 
1ae04     8C E4 85 F1 | 	sub	objptr, ##35468
1ae08     F2 FA 01 F6 | 	mov	result1, objptr
1ae0c     75 FA 25 F4 | 	bith	result1, #117
1ae10     43 00 00 FF 
1ae14     C8 E5 05 F1 | 	add	objptr, ##34760
1ae18     F2 FA 61 FC | 	wrlong	result1, objptr
1ae1c     43 00 00 FF 
1ae20     C8 E5 85 F1 | 	sub	objptr, ##34760
1ae24     F2 FA 01 F6 | 	mov	result1, objptr
1ae28     94 FA 25 F4 | 	bith	result1, #148
1ae2c     43 00 00 FF 
1ae30     DC E5 05 F1 | 	add	objptr, ##34780
1ae34     F2 FA 61 FC | 	wrlong	result1, objptr
1ae38     43 00 00 FF 
1ae3c     DC E5 85 F1 | 	sub	objptr, ##34780
1ae40     F2 FA 01 F6 | 	mov	result1, objptr
1ae44     19 FA 25 F4 | 	bith	result1, #25
1ae48     43 00 00 FF 
1ae4c     CC E5 05 F1 | 	add	objptr, ##34764
1ae50     F2 FA 61 FC | 	wrlong	result1, objptr
1ae54     43 00 00 FF 
1ae58     CC E5 85 F1 | 	sub	objptr, ##34764
1ae5c     F2 FA 01 F6 | 	mov	result1, objptr
1ae60     00 08 01 FF 
1ae64     00 FA 45 F5 | 	or	result1, ##34603008
1ae68     43 00 00 FF 
1ae6c     E8 E4 05 F1 | 	add	objptr, ##34536
1ae70     F2 FA 61 FC | 	wrlong	result1, objptr
1ae74     43 00 00 FF 
1ae78     E8 E4 85 F1 | 	sub	objptr, ##34536
1ae7c     F2 FA 01 F6 | 	mov	result1, objptr
1ae80     00 10 01 FF 
1ae84     00 FA 45 F5 | 	or	result1, ##35651584
1ae88     43 00 00 FF 
1ae8c     D0 E5 05 F1 | 	add	objptr, ##34768
1ae90     F2 FA 61 FC | 	wrlong	result1, objptr
1ae94     43 00 00 FF 
1ae98     D0 E5 85 F1 | 	sub	objptr, ##34768
1ae9c     F2 FA 01 F6 | 	mov	result1, objptr
1aea0     00 18 01 FF 
1aea4     00 FA 45 F5 | 	or	result1, ##36700160
1aea8     43 00 00 FF 
1aeac     D4 E5 05 F1 | 	add	objptr, ##34772
1aeb0     F2 FA 61 FC | 	wrlong	result1, objptr
1aeb4     43 00 00 FF 
1aeb8     D4 E5 85 F1 | 	sub	objptr, ##34772
1aebc     F2 FA 01 F6 | 	mov	result1, objptr
1aec0     00 20 01 FF 
1aec4     00 FA 45 F5 | 	or	result1, ##37748736
1aec8     43 00 00 FF 
1aecc     D8 E5 05 F1 | 	add	objptr, ##34776
1aed0     F2 FA 61 FC | 	wrlong	result1, objptr
1aed4     43 00 00 FF 
1aed8     D8 E5 85 F1 | 	sub	objptr, ##34776
1aedc     F2 FA 01 F6 | 	mov	result1, objptr
1aee0     00 28 01 FF 
1aee4     00 FA 45 F5 | 	or	result1, ##38797312
1aee8     43 00 00 FF 
1aeec     E4 E5 05 F1 | 	add	objptr, ##34788
1aef0     F2 FA 61 FC | 	wrlong	result1, objptr
1aef4     43 00 00 FF 
1aef8     E4 E5 85 F1 | 	sub	objptr, ##34788
1aefc     F2 FA 01 F6 | 	mov	result1, objptr
1af00     00 30 01 FF 
1af04     00 FA 45 F5 | 	or	result1, ##39845888
1af08     43 00 00 FF 
1af0c     E8 E5 05 F1 | 	add	objptr, ##34792
1af10     F2 FA 61 FC | 	wrlong	result1, objptr
1af14     43 00 00 FF 
1af18     E8 E5 85 F1 | 	sub	objptr, ##34792
1af1c     F2 FA 01 F6 | 	mov	result1, objptr
1af20     00 38 01 FF 
1af24     00 FA 45 F5 | 	or	result1, ##40894464
1af28     43 00 00 FF 
1af2c     EC E5 05 F1 | 	add	objptr, ##34796
1af30     F2 FA 61 FC | 	wrlong	result1, objptr
1af34     43 00 00 FF 
1af38     EC E5 85 F1 | 	sub	objptr, ##34796
1af3c     F2 FA 01 F6 | 	mov	result1, objptr
1af40     00 40 01 FF 
1af44     00 FA 45 F5 | 	or	result1, ##41943040
1af48     43 00 00 FF 
1af4c     F0 E5 05 F1 | 	add	objptr, ##34800
1af50     F2 FA 61 FC | 	wrlong	result1, objptr
1af54     43 00 00 FF 
1af58     F0 E5 85 F1 | 	sub	objptr, ##34800
1af5c     F2 FA 01 F6 | 	mov	result1, objptr
1af60     00 48 01 FF 
1af64     00 FA 45 F5 | 	or	result1, ##42991616
1af68     43 00 00 FF 
1af6c     F8 E5 05 F1 | 	add	objptr, ##34808
1af70     F2 FA 61 FC | 	wrlong	result1, objptr
1af74     43 00 00 FF 
1af78     F8 E5 85 F1 | 	sub	objptr, ##34808
1af7c     F2 FA 01 F6 | 	mov	result1, objptr
1af80     00 08 01 FF 
1af84     00 FA 45 F5 | 	or	result1, ##34603008
1af88     43 00 00 FF 
1af8c     FC E5 05 F1 | 	add	objptr, ##34812
1af90     F2 FA 61 FC | 	wrlong	result1, objptr
1af94     43 00 00 FF 
1af98     FC E5 85 F1 | 	sub	objptr, ##34812
1af9c     F2 FA 01 F6 | 	mov	result1, objptr
1afa0     00 50 01 FF 
1afa4     00 FA 45 F5 | 	or	result1, ##44040192
1afa8     43 00 00 FF 
1afac     FC E4 05 F1 | 	add	objptr, ##34556
1afb0     F2 FA 61 FC | 	wrlong	result1, objptr
1afb4     43 00 00 FF 
1afb8     FC E4 85 F1 | 	sub	objptr, ##34556
1afbc     F2 FA 01 F6 | 	mov	result1, objptr
1afc0     00 58 01 FF 
1afc4     00 FA 45 F5 | 	or	result1, ##45088768
1afc8     43 00 00 FF 
1afcc     2C E5 05 F1 | 	add	objptr, ##34604
1afd0     F2 FA 61 FC | 	wrlong	result1, objptr
1afd4     43 00 00 FF 
1afd8     2C E5 85 F1 | 	sub	objptr, ##34604
1afdc     F2 FA 01 F6 | 	mov	result1, objptr
1afe0     00 60 01 FF 
1afe4     00 FA 45 F5 | 	or	result1, ##46137344
1afe8     43 00 00 FF 
1afec     28 E5 05 F1 | 	add	objptr, ##34600
1aff0     F2 FA 61 FC | 	wrlong	result1, objptr
1aff4     43 00 00 FF 
1aff8     28 E5 85 F1 | 	sub	objptr, ##34600
1affc     F2 FA 01 F6 | 	mov	result1, objptr
1b000     00 68 01 FF 
1b004     00 FA 45 F5 | 	or	result1, ##47185920
1b008     43 00 00 FF 
1b00c     CC E4 05 F1 | 	add	objptr, ##34508
1b010     F2 FA 61 FC | 	wrlong	result1, objptr
1b014     43 00 00 FF 
1b018     CC E4 85 F1 | 	sub	objptr, ##34508
1b01c     F2 FA 01 F6 | 	mov	result1, objptr
1b020     00 70 01 FF 
1b024     00 FA 45 F5 | 	or	result1, ##48234496
1b028     43 00 00 FF 
1b02c     D0 E4 05 F1 | 	add	objptr, ##34512
1b030     F2 FA 61 FC | 	wrlong	result1, objptr
1b034     43 00 00 FF 
1b038     D0 E4 85 F1 | 	sub	objptr, ##34512
1b03c     F2 FA 01 F6 | 	mov	result1, objptr
1b040     00 78 01 FF 
1b044     00 FA 45 F5 | 	or	result1, ##49283072
1b048     43 00 00 FF 
1b04c     38 E5 05 F1 | 	add	objptr, ##34616
1b050     F2 FA 61 FC | 	wrlong	result1, objptr
1b054     43 00 00 FF 
1b058     38 E5 85 F1 | 	sub	objptr, ##34616
1b05c     F2 FA 01 F6 | 	mov	result1, objptr
1b060     38 FA 25 F4 | 	bith	result1, #56
1b064     43 00 00 FF 
1b068     E0 E5 05 F1 | 	add	objptr, ##34784
1b06c     F2 FA 61 FC | 	wrlong	result1, objptr
1b070     43 00 00 FF 
1b074     E0 E5 85 F1 | 	sub	objptr, ##34784
1b078     F2 FA 01 F6 | 	mov	result1, objptr
1b07c     00 88 01 FF 
1b080     00 FA 45 F5 | 	or	result1, ##51380224
1b084     43 00 00 FF 
1b088     F4 E5 05 F1 | 	add	objptr, ##34804
1b08c     F2 FA 61 FC | 	wrlong	result1, objptr
1b090     43 00 00 FF 
1b094     F4 E5 85 F1 | 	sub	objptr, ##34804
1b098     F2 FA 01 F6 | 	mov	result1, objptr
1b09c     00 90 01 FF 
1b0a0     00 FA 45 F5 | 	or	result1, ##52428800
1b0a4     44 00 00 FF 
1b0a8     00 E4 05 F1 | 	add	objptr, ##34816
1b0ac     F2 FA 61 FC | 	wrlong	result1, objptr
1b0b0     44 00 00 FF 
1b0b4     00 E4 85 F1 | 	sub	objptr, ##34816
1b0b8     F2 FA 01 F6 | 	mov	result1, objptr
1b0bc     00 98 01 FF 
1b0c0     00 FA 45 F5 | 	or	result1, ##53477376
1b0c4     44 00 00 FF 
1b0c8     04 E4 05 F1 | 	add	objptr, ##34820
1b0cc     F2 FA 61 FC | 	wrlong	result1, objptr
1b0d0     44 00 00 FF 
1b0d4     04 E4 85 F1 | 	sub	objptr, ##34820
1b0d8     F2 FA 01 F6 | 	mov	result1, objptr
1b0dc     00 A0 01 FF 
1b0e0     00 FA 45 F5 | 	or	result1, ##54525952
1b0e4     44 00 00 FF 
1b0e8     08 E4 05 F1 | 	add	objptr, ##34824
1b0ec     F2 FA 61 FC | 	wrlong	result1, objptr
1b0f0     44 00 00 FF 
1b0f4     08 E4 85 F1 | 	sub	objptr, ##34824
1b0f8     F2 FA 01 F6 | 	mov	result1, objptr
1b0fc     00 A8 01 FF 
1b100     00 FA 45 F5 | 	or	result1, ##55574528
1b104     44 00 00 FF 
1b108     0C E4 05 F1 | 	add	objptr, ##34828
1b10c     F2 FA 61 FC | 	wrlong	result1, objptr
1b110     44 00 00 FF 
1b114     0C E4 85 F1 | 	sub	objptr, ##34828
1b118     F2 FA 01 F6 | 	mov	result1, objptr
1b11c     00 B0 01 FF 
1b120     00 FA 45 F5 | 	or	result1, ##56623104
1b124     44 00 00 FF 
1b128     10 E4 05 F1 | 	add	objptr, ##34832
1b12c     F2 FA 61 FC | 	wrlong	result1, objptr
1b130     44 00 00 FF 
1b134     10 E4 85 F1 | 	sub	objptr, ##34832
1b138     F2 FA 01 F6 | 	mov	result1, objptr
1b13c     00 B8 01 FF 
1b140     00 FA 45 F5 | 	or	result1, ##57671680
1b144     44 00 00 FF 
1b148     14 E4 05 F1 | 	add	objptr, ##34836
1b14c     F2 FA 61 FC | 	wrlong	result1, objptr
1b150     44 00 00 FF 
1b154     14 E4 85 F1 | 	sub	objptr, ##34836
1b158     F2 FA 01 F6 | 	mov	result1, objptr
1b15c     94 FA 25 F4 | 	bith	result1, #148
1b160     43 00 00 FF 
1b164     DC E5 05 F1 | 	add	objptr, ##34780
1b168     F2 FA 61 FC | 	wrlong	result1, objptr
1b16c     43 00 00 FF 
1b170     DC E5 85 F1 | 	sub	objptr, ##34780
1b174     F2 FA 01 F6 | 	mov	result1, objptr
1b178     57 FA 25 F4 | 	bith	result1, #87
1b17c     44 00 00 FF 
1b180     1C E4 05 F1 | 	add	objptr, ##34844
1b184     F2 FA 61 FC | 	wrlong	result1, objptr
1b188     44 00 00 FF 
1b18c     1C E4 85 F1 | 	sub	objptr, ##34844
1b190     F2 FA 01 F6 | 	mov	result1, objptr
1b194     00 C8 01 FF 
1b198     00 FA 45 F5 | 	or	result1, ##59768832
1b19c     44 00 00 FF 
1b1a0     18 E4 05 F1 | 	add	objptr, ##34840
1b1a4     F2 FA 61 FC | 	wrlong	result1, objptr
1b1a8     44 00 00 FF 
1b1ac     18 E4 85 F1 | 	sub	objptr, ##34840
1b1b0     F2 FA 01 F6 | 	mov	result1, objptr
1b1b4     00 D0 01 FF 
1b1b8     00 FA 45 F5 | 	or	result1, ##60817408
1b1bc     44 00 00 FF 
1b1c0     30 E4 05 F1 | 	add	objptr, ##34864
1b1c4     F2 FA 61 FC | 	wrlong	result1, objptr
1b1c8     44 00 00 FF 
1b1cc     30 E4 85 F1 | 	sub	objptr, ##34864
1b1d0     F2 FA 01 F6 | 	mov	result1, objptr
1b1d4     00 D8 01 FF 
1b1d8     00 FA 45 F5 | 	or	result1, ##61865984
1b1dc     44 00 00 FF 
1b1e0     34 E4 05 F1 | 	add	objptr, ##34868
1b1e4     F2 FA 61 FC | 	wrlong	result1, objptr
1b1e8     44 00 00 FF 
1b1ec     34 E4 85 F1 | 	sub	objptr, ##34868
1b1f0     F2 FA 01 F6 | 	mov	result1, objptr
1b1f4     76 FA 25 F4 | 	bith	result1, #118
1b1f8     44 00 00 FF 
1b1fc     20 E4 05 F1 | 	add	objptr, ##34848
1b200     F2 FA 61 FC | 	wrlong	result1, objptr
1b204     44 00 00 FF 
1b208     20 E4 85 F1 | 	sub	objptr, ##34848
1b20c     F2 FA 01 F6 | 	mov	result1, objptr
1b210     00 E8 01 FF 
1b214     00 FA 45 F5 | 	or	result1, ##63963136
1b218     44 00 00 FF 
1b21c     24 E4 05 F1 | 	add	objptr, ##34852
1b220     F2 FA 61 FC | 	wrlong	result1, objptr
1b224     44 00 00 FF 
1b228     24 E4 85 F1 | 	sub	objptr, ##34852
1b22c     F2 FA 01 F6 | 	mov	result1, objptr
1b230     95 FA 25 F4 | 	bith	result1, #149
1b234     44 00 00 FF 
1b238     28 E4 05 F1 | 	add	objptr, ##34856
1b23c     F2 FA 61 FC | 	wrlong	result1, objptr
1b240     44 00 00 FF 
1b244     28 E4 85 F1 | 	sub	objptr, ##34856
1b248     F2 FA 01 F6 | 	mov	result1, objptr
1b24c     B4 FA 25 F4 | 	bith	result1, #180
1b250     44 00 00 FF 
1b254     2C E4 05 F1 | 	add	objptr, ##34860
1b258     F2 FA 61 FC | 	wrlong	result1, objptr
1b25c     44 00 00 FF 
1b260     2C E4 85 F1 | 	sub	objptr, ##34860
1b264     F2 FA 01 F6 | 	mov	result1, objptr
1b268     1A FA 25 F4 | 	bith	result1, #26
1b26c     44 00 00 FF 
1b270     3C E4 05 F1 | 	add	objptr, ##34876
1b274     F2 FA 61 FC | 	wrlong	result1, objptr
1b278     44 00 00 FF 
1b27c     3C E4 85 F1 | 	sub	objptr, ##34876
1b280     F2 FA 01 F6 | 	mov	result1, objptr
1b284     00 08 02 FF 
1b288     00 FA 45 F5 | 	or	result1, ##68157440
1b28c     44 00 00 FF 
1b290     38 E4 05 F1 | 	add	objptr, ##34872
1b294     F2 FA 61 FC | 	wrlong	result1, objptr
1b298     44 00 00 FF 
1b29c     38 E4 85 F1 | 	sub	objptr, ##34872
1b2a0     F2 FA 01 F6 | 	mov	result1, objptr
1b2a4     00 10 02 FF 
1b2a8     00 FA 45 F5 | 	or	result1, ##69206016
1b2ac     44 00 00 FF 
1b2b0     48 E4 05 F1 | 	add	objptr, ##34888
1b2b4     F2 FA 61 FC | 	wrlong	result1, objptr
1b2b8     44 00 00 FF 
1b2bc     48 E4 85 F1 | 	sub	objptr, ##34888
1b2c0     F2 FA 01 F6 | 	mov	result1, objptr
1b2c4     00 18 02 FF 
1b2c8     00 FA 45 F5 | 	or	result1, ##70254592
1b2cc     44 00 00 FF 
1b2d0     44 E4 05 F1 | 	add	objptr, ##34884
1b2d4     F2 FA 61 FC | 	wrlong	result1, objptr
1b2d8     44 00 00 FF 
1b2dc     44 E4 85 F1 | 	sub	objptr, ##34884
1b2e0     F2 FA 01 F6 | 	mov	result1, objptr
1b2e4     00 20 02 FF 
1b2e8     00 FA 45 F5 | 	or	result1, ##71303168
1b2ec     44 00 00 FF 
1b2f0     40 E4 05 F1 | 	add	objptr, ##34880
1b2f4     F2 FA 61 FC | 	wrlong	result1, objptr
1b2f8     44 00 00 FF 
1b2fc     40 E4 85 F1 | 	sub	objptr, ##34880
1b300     F2 FA 01 F6 | 	mov	result1, objptr
1b304     00 28 02 FF 
1b308     00 FA 45 F5 | 	or	result1, ##72351744
1b30c     44 00 00 FF 
1b310     4C E4 05 F1 | 	add	objptr, ##34892
1b314     F2 FA 61 FC | 	wrlong	result1, objptr
1b318     44 00 00 FF 
1b31c     4C E4 85 F1 | 	sub	objptr, ##34892
1b320     F2 FA 01 F6 | 	mov	result1, objptr
1b324     00 30 02 FF 
1b328     00 FA 45 F5 | 	or	result1, ##73400320
1b32c     44 00 00 FF 
1b330     50 E4 05 F1 | 	add	objptr, ##34896
1b334     F2 FA 61 FC | 	wrlong	result1, objptr
1b338     44 00 00 FF 
1b33c     50 E4 85 F1 | 	sub	objptr, ##34896
1b340     F2 FA 01 F6 | 	mov	result1, objptr
1b344     00 38 02 FF 
1b348     00 FA 45 F5 | 	or	result1, ##74448896
1b34c     43 00 00 FF 
1b350     E4 E4 05 F1 | 	add	objptr, ##34532
1b354     F2 FA 61 FC | 	wrlong	result1, objptr
1b358     43 00 00 FF 
1b35c     E4 E4 85 F1 | 	sub	objptr, ##34532
1b360     F2 FA 01 F6 | 	mov	result1, objptr
1b364     00 40 02 FF 
1b368     00 FA 45 F5 | 	or	result1, ##75497472
1b36c     44 00 00 FF 
1b370     68 E4 05 F1 | 	add	objptr, ##34920
1b374     F2 FA 61 FC | 	wrlong	result1, objptr
1b378     44 00 00 FF 
1b37c     68 E4 85 F1 | 	sub	objptr, ##34920
1b380     F2 FA 01 F6 | 	mov	result1, objptr
1b384     00 48 02 FF 
1b388     00 FA 45 F5 | 	or	result1, ##76546048
1b38c     44 00 00 FF 
1b390     78 E4 05 F1 | 	add	objptr, ##34936
1b394     F2 FA 61 FC | 	wrlong	result1, objptr
1b398     44 00 00 FF 
1b39c     78 E4 85 F1 | 	sub	objptr, ##34936
1b3a0     F2 FA 01 F6 | 	mov	result1, objptr
1b3a4     00 50 02 FF 
1b3a8     00 FA 45 F5 | 	or	result1, ##77594624
1b3ac     44 00 00 FF 
1b3b0     7C E4 05 F1 | 	add	objptr, ##34940
1b3b4     F2 FA 61 FC | 	wrlong	result1, objptr
1b3b8     44 00 00 FF 
1b3bc     7C E4 85 F1 | 	sub	objptr, ##34940
1b3c0     F2 FA 01 F6 | 	mov	result1, objptr
1b3c4     00 58 02 FF 
1b3c8     00 FA 45 F5 | 	or	result1, ##78643200
1b3cc     44 00 00 FF 
1b3d0     74 E4 05 F1 | 	add	objptr, ##34932
1b3d4     F2 FA 61 FC | 	wrlong	result1, objptr
1b3d8     44 00 00 FF 
1b3dc     74 E4 85 F1 | 	sub	objptr, ##34932
1b3e0     F2 FA 01 F6 | 	mov	result1, objptr
1b3e4     00 60 02 FF 
1b3e8     00 FA 45 F5 | 	or	result1, ##79691776
1b3ec     44 00 00 FF 
1b3f0     6C E4 05 F1 | 	add	objptr, ##34924
1b3f4     F2 FA 61 FC | 	wrlong	result1, objptr
1b3f8     44 00 00 FF 
1b3fc     6C E4 85 F1 | 	sub	objptr, ##34924
1b400     F2 FA 01 F6 | 	mov	result1, objptr
1b404     00 68 02 FF 
1b408     00 FA 45 F5 | 	or	result1, ##80740352
1b40c     44 00 00 FF 
1b410     70 E4 05 F1 | 	add	objptr, ##34928
1b414     F2 FA 61 FC | 	wrlong	result1, objptr
1b418     44 00 00 FF 
1b41c     70 E4 85 F1 | 	sub	objptr, ##34928
1b420     F2 FA 01 F6 | 	mov	result1, objptr
1b424     00 70 02 FF 
1b428     00 FA 45 F5 | 	or	result1, ##81788928
1b42c     44 00 00 FF 
1b430     80 E4 05 F1 | 	add	objptr, ##34944
1b434     F2 FA 61 FC | 	wrlong	result1, objptr
1b438     44 00 00 FF 
1b43c     80 E4 85 F1 | 	sub	objptr, ##34944
1b440     F2 FA 01 F6 | 	mov	result1, objptr
1b444     00 78 02 FF 
1b448     00 FA 45 F5 | 	or	result1, ##82837504
1b44c     44 00 00 FF 
1b450     84 E4 05 F1 | 	add	objptr, ##34948
1b454     F2 FA 61 FC | 	wrlong	result1, objptr
1b458     44 00 00 FF 
1b45c     84 E4 85 F1 | 	sub	objptr, ##34948
1b460     F2 FA 01 F6 | 	mov	result1, objptr
1b464     00 80 02 FF 
1b468     00 FA 45 F5 | 	or	result1, ##83886080
1b46c     44 00 00 FF 
1b470     88 E4 05 F1 | 	add	objptr, ##34952
1b474     F2 FA 61 FC | 	wrlong	result1, objptr
1b478     44 00 00 FF 
1b47c     88 E4 85 F1 | 	sub	objptr, ##34952
1b480     F2 FA 01 F6 | 	mov	result1, objptr
1b484     00 88 02 FF 
1b488     00 FA 45 F5 | 	or	result1, ##84934656
1b48c     44 00 00 FF 
1b490     8C E4 05 F1 | 	add	objptr, ##34956
1b494     F2 FA 61 FC | 	wrlong	result1, objptr
1b498     44 00 00 FF 
1b49c     8C E4 85 F1 | 	sub	objptr, ##34956
1b4a0     F2 FA 01 F6 | 	mov	result1, objptr
1b4a4     00 90 02 FF 
1b4a8     00 FA 45 F5 | 	or	result1, ##85983232
1b4ac     44 00 00 FF 
1b4b0     90 E4 05 F1 | 	add	objptr, ##34960
1b4b4     F2 FA 61 FC | 	wrlong	result1, objptr
1b4b8     44 00 00 FF 
1b4bc     90 E4 85 F1 | 	sub	objptr, ##34960
1b4c0     F2 FA 01 F6 | 	mov	result1, objptr
1b4c4     00 98 02 FF 
1b4c8     00 FA 45 F5 | 	or	result1, ##87031808
1b4cc     44 00 00 FF 
1b4d0     94 E4 05 F1 | 	add	objptr, ##34964
1b4d4     F2 FA 61 FC | 	wrlong	result1, objptr
1b4d8     44 00 00 FF 
1b4dc     94 E4 85 F1 | 	sub	objptr, ##34964
1b4e0     F2 FA 01 F6 | 	mov	result1, objptr
1b4e4     00 A0 02 FF 
1b4e8     00 FA 45 F5 | 	or	result1, ##88080384
1b4ec     44 00 00 FF 
1b4f0     98 E4 05 F1 | 	add	objptr, ##34968
1b4f4     F2 FA 61 FC | 	wrlong	result1, objptr
1b4f8     44 00 00 FF 
1b4fc     98 E4 85 F1 | 	sub	objptr, ##34968
1b500     F2 FA 01 F6 | 	mov	result1, objptr
1b504     00 A8 02 FF 
1b508     00 FA 45 F5 | 	or	result1, ##89128960
1b50c     44 00 00 FF 
1b510     9C E4 05 F1 | 	add	objptr, ##34972
1b514     F2 FA 61 FC | 	wrlong	result1, objptr
1b518     44 00 00 FF 
1b51c     9C E4 85 F1 | 	sub	objptr, ##34972
1b520     F2 FA 01 F6 | 	mov	result1, objptr
1b524     00 B0 02 FF 
1b528     00 FA 45 F5 | 	or	result1, ##90177536
1b52c     44 00 00 FF 
1b530     A8 E4 05 F1 | 	add	objptr, ##34984
1b534     F2 FA 61 FC | 	wrlong	result1, objptr
1b538     44 00 00 FF 
1b53c     A8 E4 85 F1 | 	sub	objptr, ##34984
1b540     F2 FA 01 F6 | 	mov	result1, objptr
1b544     00 B8 02 FF 
1b548     00 FA 45 F5 | 	or	result1, ##91226112
1b54c     44 00 00 FF 
1b550     A0 E4 05 F1 | 	add	objptr, ##34976
1b554     F2 FA 61 FC | 	wrlong	result1, objptr
1b558     44 00 00 FF 
1b55c     A0 E4 85 F1 | 	sub	objptr, ##34976
1b560     F2 FA 01 F6 | 	mov	result1, objptr
1b564     00 C0 02 FF 
1b568     00 FA 45 F5 | 	or	result1, ##92274688
1b56c     44 00 00 FF 
1b570     A4 E4 05 F1 | 	add	objptr, ##34980
1b574     F2 FA 61 FC | 	wrlong	result1, objptr
1b578     44 00 00 FF 
1b57c     A4 E4 85 F1 | 	sub	objptr, ##34980
1b580     F2 FA 01 F6 | 	mov	result1, objptr
1b584     00 C8 02 FF 
1b588     00 FA 45 F5 | 	or	result1, ##93323264
1b58c     44 00 00 FF 
1b590     AC E4 05 F1 | 	add	objptr, ##34988
1b594     F2 FA 61 FC | 	wrlong	result1, objptr
1b598     44 00 00 FF 
1b59c     AC E4 85 F1 | 	sub	objptr, ##34988
1b5a0     F2 FA 01 F6 | 	mov	result1, objptr
1b5a4     00 D0 02 FF 
1b5a8     00 FA 45 F5 | 	or	result1, ##94371840
1b5ac     44 00 00 FF 
1b5b0     54 E4 05 F1 | 	add	objptr, ##34900
1b5b4     F2 FA 61 FC | 	wrlong	result1, objptr
1b5b8     44 00 00 FF 
1b5bc     54 E4 85 F1 | 	sub	objptr, ##34900
1b5c0     F2 FA 01 F6 | 	mov	result1, objptr
1b5c4     00 D8 02 FF 
1b5c8     00 FA 45 F5 | 	or	result1, ##95420416
1b5cc     44 00 00 FF 
1b5d0     5C E4 05 F1 | 	add	objptr, ##34908
1b5d4     F2 FA 61 FC | 	wrlong	result1, objptr
1b5d8     44 00 00 FF 
1b5dc     5C E4 85 F1 | 	sub	objptr, ##34908
1b5e0     F2 FA 01 F6 | 	mov	result1, objptr
1b5e4     00 E0 02 FF 
1b5e8     00 FA 45 F5 | 	or	result1, ##96468992
1b5ec     44 00 00 FF 
1b5f0     60 E4 05 F1 | 	add	objptr, ##34912
1b5f4     F2 FA 61 FC | 	wrlong	result1, objptr
1b5f8     44 00 00 FF 
1b5fc     60 E4 85 F1 | 	sub	objptr, ##34912
1b600     F2 FA 01 F6 | 	mov	result1, objptr
1b604     00 E8 02 FF 
1b608     00 FA 45 F5 | 	or	result1, ##97517568
1b60c     44 00 00 FF 
1b610     B0 E4 05 F1 | 	add	objptr, ##34992
1b614     F2 FA 61 FC | 	wrlong	result1, objptr
1b618     44 00 00 FF 
1b61c     B0 E4 85 F1 | 	sub	objptr, ##34992
1b620     F2 FA 01 F6 | 	mov	result1, objptr
1b624     00 F0 02 FF 
1b628     00 FA 45 F5 | 	or	result1, ##98566144
1b62c     44 00 00 FF 
1b630     B4 E4 05 F1 | 	add	objptr, ##34996
1b634     F2 FA 61 FC | 	wrlong	result1, objptr
1b638     44 00 00 FF 
1b63c     B4 E4 85 F1 | 	sub	objptr, ##34996
1b640     F2 FA 01 F6 | 	mov	result1, objptr
1b644     00 F8 02 FF 
1b648     00 FA 45 F5 | 	or	result1, ##99614720
1b64c     44 00 00 FF 
1b650     B8 E4 05 F1 | 	add	objptr, ##35000
1b654     F2 FA 61 FC | 	wrlong	result1, objptr
1b658     44 00 00 FF 
1b65c     B8 E4 85 F1 | 	sub	objptr, ##35000
1b660     F2 FA 01 F6 | 	mov	result1, objptr
1b664     39 FA 25 F4 | 	bith	result1, #57
1b668     44 00 00 FF 
1b66c     64 E4 05 F1 | 	add	objptr, ##34916
1b670     F2 FA 61 FC | 	wrlong	result1, objptr
1b674     44 00 00 FF 
1b678     64 E4 85 F1 | 	sub	objptr, ##34916
1b67c     F2 FA 01 F6 | 	mov	result1, objptr
1b680     00 08 03 FF 
1b684     00 FA 45 F5 | 	or	result1, ##101711872
1b688     44 00 00 FF 
1b68c     C8 E4 05 F1 | 	add	objptr, ##35016
1b690     F2 FA 61 FC | 	wrlong	result1, objptr
1b694     44 00 00 FF 
1b698     C8 E4 85 F1 | 	sub	objptr, ##35016
1b69c     F2 FA 01 F6 | 	mov	result1, objptr
1b6a0     00 10 03 FF 
1b6a4     00 FA 45 F5 | 	or	result1, ##102760448
1b6a8     44 00 00 FF 
1b6ac     D0 E4 05 F1 | 	add	objptr, ##35024
1b6b0     F2 FA 61 FC | 	wrlong	result1, objptr
1b6b4     44 00 00 FF 
1b6b8     D0 E4 85 F1 | 	sub	objptr, ##35024
1b6bc     F2 FA 01 F6 | 	mov	result1, objptr
1b6c0     00 18 03 FF 
1b6c4     00 FA 45 F5 | 	or	result1, ##103809024
1b6c8     44 00 00 FF 
1b6cc     C4 E4 05 F1 | 	add	objptr, ##35012
1b6d0     F2 FA 61 FC | 	wrlong	result1, objptr
1b6d4     44 00 00 FF 
1b6d8     C4 E4 85 F1 | 	sub	objptr, ##35012
1b6dc     F2 FA 01 F6 | 	mov	result1, objptr
1b6e0     00 20 03 FF 
1b6e4     00 FA 45 F5 | 	or	result1, ##104857600
1b6e8     44 00 00 FF 
1b6ec     C0 E4 05 F1 | 	add	objptr, ##35008
1b6f0     F2 FA 61 FC | 	wrlong	result1, objptr
1b6f4     44 00 00 FF 
1b6f8     C0 E4 85 F1 | 	sub	objptr, ##35008
1b6fc     F2 FA 01 F6 | 	mov	result1, objptr
1b700     00 28 03 FF 
1b704     00 FA 45 F5 | 	or	result1, ##105906176
1b708     44 00 00 FF 
1b70c     BC E4 05 F1 | 	add	objptr, ##35004
1b710     F2 FA 61 FC | 	wrlong	result1, objptr
1b714     44 00 00 FF 
1b718     BC E4 85 F1 | 	sub	objptr, ##35004
1b71c     F2 FA 01 F6 | 	mov	result1, objptr
1b720     00 30 03 FF 
1b724     00 FA 45 F5 | 	or	result1, ##106954752
1b728     44 00 00 FF 
1b72c     CC E4 05 F1 | 	add	objptr, ##35020
1b730     F2 FA 61 FC | 	wrlong	result1, objptr
1b734     44 00 00 FF 
1b738     CC E4 85 F1 | 	sub	objptr, ##35020
1b73c     F2 FA 01 F6 | 	mov	result1, objptr
1b740     00 38 03 FF 
1b744     00 FA 45 F5 | 	or	result1, ##108003328
1b748     44 00 00 FF 
1b74c     D4 E4 05 F1 | 	add	objptr, ##35028
1b750     F2 FA 61 FC | 	wrlong	result1, objptr
1b754     44 00 00 FF 
1b758     D4 E4 85 F1 | 	sub	objptr, ##35028
1b75c     F2 FA 01 F6 | 	mov	result1, objptr
1b760     00 40 03 FF 
1b764     00 FA 45 F5 | 	or	result1, ##109051904
1b768     44 00 00 FF 
1b76c     D8 E4 05 F1 | 	add	objptr, ##35032
1b770     F2 FA 61 FC | 	wrlong	result1, objptr
1b774     44 00 00 FF 
1b778     D8 E4 85 F1 | 	sub	objptr, ##35032
1b77c     F2 FA 01 F6 | 	mov	result1, objptr
1b780     00 48 03 FF 
1b784     00 FA 45 F5 | 	or	result1, ##110100480
1b788     44 00 00 FF 
1b78c     DC E4 05 F1 | 	add	objptr, ##35036
1b790     F2 FA 61 FC | 	wrlong	result1, objptr
1b794     44 00 00 FF 
1b798     DC E4 85 F1 | 	sub	objptr, ##35036
1b79c     F2 FA 01 F6 | 	mov	result1, objptr
1b7a0     00 50 03 FF 
1b7a4     00 FA 45 F5 | 	or	result1, ##111149056
1b7a8     44 00 00 FF 
1b7ac     E4 E4 05 F1 | 	add	objptr, ##35044
1b7b0     F2 FA 61 FC | 	wrlong	result1, objptr
1b7b4     44 00 00 FF 
1b7b8     E4 E4 85 F1 | 	sub	objptr, ##35044
1b7bc     F2 FA 01 F6 | 	mov	result1, objptr
1b7c0     00 58 03 FF 
1b7c4     00 FA 45 F5 | 	or	result1, ##112197632
1b7c8     44 00 00 FF 
1b7cc     E8 E4 05 F1 | 	add	objptr, ##35048
1b7d0     F2 FA 61 FC | 	wrlong	result1, objptr
1b7d4     44 00 00 FF 
1b7d8     E8 E4 85 F1 | 	sub	objptr, ##35048
1b7dc     F2 FA 01 F6 | 	mov	result1, objptr
1b7e0     00 60 03 FF 
1b7e4     00 FA 45 F5 | 	or	result1, ##113246208
1b7e8     44 00 00 FF 
1b7ec     EC E4 05 F1 | 	add	objptr, ##35052
1b7f0     F2 FA 61 FC | 	wrlong	result1, objptr
1b7f4     44 00 00 FF 
1b7f8     EC E4 85 F1 | 	sub	objptr, ##35052
1b7fc     F2 FA 01 F6 | 	mov	result1, objptr
1b800     00 68 03 FF 
1b804     00 FA 45 F5 | 	or	result1, ##114294784
1b808     44 00 00 FF 
1b80c     F0 E4 05 F1 | 	add	objptr, ##35056
1b810     F2 FA 61 FC | 	wrlong	result1, objptr
1b814     44 00 00 FF 
1b818     F0 E4 85 F1 | 	sub	objptr, ##35056
1b81c     F2 FA 01 F6 | 	mov	result1, objptr
1b820     00 70 03 FF 
1b824     00 FA 45 F5 | 	or	result1, ##115343360
1b828     44 00 00 FF 
1b82c     F4 E4 05 F1 | 	add	objptr, ##35060
1b830     F2 FA 61 FC | 	wrlong	result1, objptr
1b834     44 00 00 FF 
1b838     F4 E4 85 F1 | 	sub	objptr, ##35060
1b83c     F2 FA 01 F6 | 	mov	result1, objptr
1b840     00 78 03 FF 
1b844     00 FA 45 F5 | 	or	result1, ##116391936
1b848     44 00 00 FF 
1b84c     F8 E4 05 F1 | 	add	objptr, ##35064
1b850     F2 FA 61 FC | 	wrlong	result1, objptr
1b854     44 00 00 FF 
1b858     F8 E4 85 F1 | 	sub	objptr, ##35064
1b85c     F2 FA 01 F6 | 	mov	result1, objptr
1b860     58 FA 25 F4 | 	bith	result1, #88
1b864     44 00 00 FF 
1b868     FC E4 05 F1 | 	add	objptr, ##35068
1b86c     F2 FA 61 FC | 	wrlong	result1, objptr
1b870     44 00 00 FF 
1b874     FC E4 85 F1 | 	sub	objptr, ##35068
1b878     F2 FA 01 F6 | 	mov	result1, objptr
1b87c     00 88 03 FF 
1b880     00 FA 45 F5 | 	or	result1, ##118489088
1b884     44 00 00 FF 
1b888     00 E5 05 F1 | 	add	objptr, ##35072
1b88c     F2 FA 61 FC | 	wrlong	result1, objptr
1b890     44 00 00 FF 
1b894     00 E5 85 F1 | 	sub	objptr, ##35072
1b898     F2 FA 01 F6 | 	mov	result1, objptr
1b89c     00 90 03 FF 
1b8a0     00 FA 45 F5 | 	or	result1, ##119537664
1b8a4     44 00 00 FF 
1b8a8     E0 E4 05 F1 | 	add	objptr, ##35040
1b8ac     F2 FA 61 FC | 	wrlong	result1, objptr
1b8b0     44 00 00 FF 
1b8b4     E0 E4 85 F1 | 	sub	objptr, ##35040
1b8b8     F2 FA 01 F6 | 	mov	result1, objptr
1b8bc     00 98 03 FF 
1b8c0     00 FA 45 F5 | 	or	result1, ##120586240
1b8c4     43 00 00 FF 
1b8c8     D8 E4 05 F1 | 	add	objptr, ##34520
1b8cc     F2 FA 61 FC | 	wrlong	result1, objptr
1b8d0     43 00 00 FF 
1b8d4     D8 E4 85 F1 | 	sub	objptr, ##34520
1b8d8     F2 FA 01 F6 | 	mov	result1, objptr
1b8dc     00 A0 03 FF 
1b8e0     00 FA 45 F5 | 	or	result1, ##121634816
1b8e4     44 00 00 FF 
1b8e8     04 E5 05 F1 | 	add	objptr, ##35076
1b8ec     F2 FA 61 FC | 	wrlong	result1, objptr
1b8f0     44 00 00 FF 
1b8f4     04 E5 85 F1 | 	sub	objptr, ##35076
1b8f8     F2 FA 01 F6 | 	mov	result1, objptr
1b8fc     00 A8 03 FF 
1b900     00 FA 45 F5 | 	or	result1, ##122683392
1b904     44 00 00 FF 
1b908     08 E5 05 F1 | 	add	objptr, ##35080
1b90c     F2 FA 61 FC | 	wrlong	result1, objptr
1b910     44 00 00 FF 
1b914     08 E5 85 F1 | 	sub	objptr, ##35080
1b918     F2 FA 01 F6 | 	mov	result1, objptr
1b91c     00 B0 03 FF 
1b920     00 FA 45 F5 | 	or	result1, ##123731968
1b924     44 00 00 FF 
1b928     1C E5 05 F1 | 	add	objptr, ##35100
1b92c     F2 FA 61 FC | 	wrlong	result1, objptr
1b930     44 00 00 FF 
1b934     1C E5 85 F1 | 	sub	objptr, ##35100
1b938     F2 FA 01 F6 | 	mov	result1, objptr
1b93c     00 B8 03 FF 
1b940     00 FA 45 F5 | 	or	result1, ##124780544
1b944     44 00 00 FF 
1b948     18 E5 05 F1 | 	add	objptr, ##35096
1b94c     F2 FA 61 FC | 	wrlong	result1, objptr
1b950     44 00 00 FF 
1b954     18 E5 85 F1 | 	sub	objptr, ##35096
1b958     F2 FA 01 F6 | 	mov	result1, objptr
1b95c     77 FA 25 F4 | 	bith	result1, #119
1b960     44 00 00 FF 
1b964     10 E5 05 F1 | 	add	objptr, ##35088
1b968     F2 FA 61 FC | 	wrlong	result1, objptr
1b96c     44 00 00 FF 
1b970     10 E5 85 F1 | 	sub	objptr, ##35088
1b974     F2 FA 01 F6 | 	mov	result1, objptr
1b978     00 C8 03 FF 
1b97c     00 FA 45 F5 | 	or	result1, ##126877696
1b980     44 00 00 FF 
1b984     0C E5 05 F1 | 	add	objptr, ##35084
1b988     F2 FA 61 FC | 	wrlong	result1, objptr
1b98c     44 00 00 FF 
1b990     0C E5 85 F1 | 	sub	objptr, ##35084
1b994     F2 FA 01 F6 | 	mov	result1, objptr
1b998     00 D0 03 FF 
1b99c     00 FA 45 F5 | 	or	result1, ##127926272
1b9a0     44 00 00 FF 
1b9a4     2C E5 05 F1 | 	add	objptr, ##35116
1b9a8     F2 FA 61 FC | 	wrlong	result1, objptr
1b9ac     44 00 00 FF 
1b9b0     2C E5 85 F1 | 	sub	objptr, ##35116
1b9b4     F2 FA 01 F6 | 	mov	result1, objptr
1b9b8     00 D8 03 FF 
1b9bc     00 FA 45 F5 | 	or	result1, ##128974848
1b9c0     44 00 00 FF 
1b9c4     20 E5 05 F1 | 	add	objptr, ##35104
1b9c8     F2 FA 61 FC | 	wrlong	result1, objptr
1b9cc     44 00 00 FF 
1b9d0     20 E5 85 F1 | 	sub	objptr, ##35104
1b9d4     F2 FA 01 F6 | 	mov	result1, objptr
1b9d8     96 FA 25 F4 | 	bith	result1, #150
1b9dc     44 00 00 FF 
1b9e0     24 E5 05 F1 | 	add	objptr, ##35108
1b9e4     F2 FA 61 FC | 	wrlong	result1, objptr
1b9e8     44 00 00 FF 
1b9ec     24 E5 85 F1 | 	sub	objptr, ##35108
1b9f0     F2 FA 01 F6 | 	mov	result1, objptr
1b9f4     00 E8 03 FF 
1b9f8     00 FA 45 F5 | 	or	result1, ##131072000
1b9fc     44 00 00 FF 
1ba00     28 E5 05 F1 | 	add	objptr, ##35112
1ba04     F2 FA 61 FC | 	wrlong	result1, objptr
1ba08     44 00 00 FF 
1ba0c     28 E5 85 F1 | 	sub	objptr, ##35112
1ba10     F2 FA 01 F6 | 	mov	result1, objptr
1ba14     B5 FA 25 F4 | 	bith	result1, #181
1ba18     44 00 00 FF 
1ba1c     30 E5 05 F1 | 	add	objptr, ##35120
1ba20     F2 FA 61 FC | 	wrlong	result1, objptr
1ba24     44 00 00 FF 
1ba28     30 E5 85 F1 | 	sub	objptr, ##35120
1ba2c     F2 FA 01 F6 | 	mov	result1, objptr
1ba30     D4 FA 25 F4 | 	bith	result1, #212
1ba34     44 00 00 FF 
1ba38     34 E5 05 F1 | 	add	objptr, ##35124
1ba3c     F2 FA 61 FC | 	wrlong	result1, objptr
1ba40     44 00 00 FF 
1ba44     34 E5 85 F1 | 	sub	objptr, ##35124
1ba48     F2 FA 01 F6 | 	mov	result1, objptr
1ba4c     1B FA 25 F4 | 	bith	result1, #27
1ba50     44 00 00 FF 
1ba54     38 E5 05 F1 | 	add	objptr, ##35128
1ba58     F2 FA 61 FC | 	wrlong	result1, objptr
1ba5c     44 00 00 FF 
1ba60     38 E5 85 F1 | 	sub	objptr, ##35128
1ba64     F2 FA 01 F6 | 	mov	result1, objptr
1ba68     00 08 04 FF 
1ba6c     00 FA 45 F5 | 	or	result1, ##135266304
1ba70     44 00 00 FF 
1ba74     3C E5 05 F1 | 	add	objptr, ##35132
1ba78     F2 FA 61 FC | 	wrlong	result1, objptr
1ba7c     44 00 00 FF 
1ba80     3C E5 85 F1 | 	sub	objptr, ##35132
1ba84     F2 FA 01 F6 | 	mov	result1, objptr
1ba88     00 10 04 FF 
1ba8c     00 FA 45 F5 | 	or	result1, ##136314880
1ba90     44 00 00 FF 
1ba94     40 E5 05 F1 | 	add	objptr, ##35136
1ba98     F2 FA 61 FC | 	wrlong	result1, objptr
1ba9c     44 00 00 FF 
1baa0     40 E5 85 F1 | 	sub	objptr, ##35136
1baa4     F2 FA 01 F6 | 	mov	result1, objptr
1baa8     00 18 04 FF 
1baac     00 FA 45 F5 | 	or	result1, ##137363456
1bab0     44 00 00 FF 
1bab4     44 E5 05 F1 | 	add	objptr, ##35140
1bab8     F2 FA 61 FC | 	wrlong	result1, objptr
1babc     44 00 00 FF 
1bac0     44 E5 85 F1 | 	sub	objptr, ##35140
1bac4     F2 FA 01 F6 | 	mov	result1, objptr
1bac8     00 20 04 FF 
1bacc     00 FA 45 F5 | 	or	result1, ##138412032
1bad0     44 00 00 FF 
1bad4     4C E5 05 F1 | 	add	objptr, ##35148
1bad8     F2 FA 61 FC | 	wrlong	result1, objptr
1badc     44 00 00 FF 
1bae0     4C E5 85 F1 | 	sub	objptr, ##35148
1bae4     F2 FA 01 F6 | 	mov	result1, objptr
1bae8     00 28 04 FF 
1baec     00 FA 45 F5 | 	or	result1, ##139460608
1baf0     44 00 00 FF 
1baf4     50 E5 05 F1 | 	add	objptr, ##35152
1baf8     F2 FA 61 FC | 	wrlong	result1, objptr
1bafc     44 00 00 FF 
1bb00     50 E5 85 F1 | 	sub	objptr, ##35152
1bb04     F2 FA 01 F6 | 	mov	result1, objptr
1bb08     00 30 04 FF 
1bb0c     00 FA 45 F5 | 	or	result1, ##140509184
1bb10     44 00 00 FF 
1bb14     54 E5 05 F1 | 	add	objptr, ##35156
1bb18     F2 FA 61 FC | 	wrlong	result1, objptr
1bb1c     44 00 00 FF 
1bb20     54 E5 85 F1 | 	sub	objptr, ##35156
1bb24     F2 FA 01 F6 | 	mov	result1, objptr
1bb28     00 38 04 FF 
1bb2c     00 FA 45 F5 | 	or	result1, ##141557760
1bb30     44 00 00 FF 
1bb34     48 E5 05 F1 | 	add	objptr, ##35144
1bb38     F2 FA 61 FC | 	wrlong	result1, objptr
1bb3c     44 00 00 FF 
1bb40     48 E5 85 F1 | 	sub	objptr, ##35144
1bb44     F2 FA 01 F6 | 	mov	result1, objptr
1bb48     00 40 04 FF 
1bb4c     00 FA 45 F5 | 	or	result1, ##142606336
1bb50     44 00 00 FF 
1bb54     58 E5 05 F1 | 	add	objptr, ##35160
1bb58     F2 FA 61 FC | 	wrlong	result1, objptr
1bb5c     44 00 00 FF 
1bb60     58 E5 85 F1 | 	sub	objptr, ##35160
1bb64     F2 FA 01 F6 | 	mov	result1, objptr
1bb68     00 48 04 FF 
1bb6c     00 FA 45 F5 | 	or	result1, ##143654912
1bb70     44 00 00 FF 
1bb74     8C E5 05 F1 | 	add	objptr, ##35212
1bb78     F2 FA 61 FC | 	wrlong	result1, objptr
1bb7c     44 00 00 FF 
1bb80     8C E5 85 F1 | 	sub	objptr, ##35212
1bb84     F2 FA 01 F6 | 	mov	result1, objptr
1bb88     00 50 04 FF 
1bb8c     00 FA 45 F5 | 	or	result1, ##144703488
1bb90     44 00 00 FF 
1bb94     84 E5 05 F1 | 	add	objptr, ##35204
1bb98     F2 FA 61 FC | 	wrlong	result1, objptr
1bb9c     44 00 00 FF 
1bba0     84 E5 85 F1 | 	sub	objptr, ##35204
1bba4     F2 FA 01 F6 | 	mov	result1, objptr
1bba8     00 58 04 FF 
1bbac     00 FA 45 F5 | 	or	result1, ##145752064
1bbb0     44 00 00 FF 
1bbb4     5C E5 05 F1 | 	add	objptr, ##35164
1bbb8     F2 FA 61 FC | 	wrlong	result1, objptr
1bbbc     44 00 00 FF 
1bbc0     5C E5 85 F1 | 	sub	objptr, ##35164
1bbc4     F2 FA 01 F6 | 	mov	result1, objptr
1bbc8     00 60 04 FF 
1bbcc     00 FA 45 F5 | 	or	result1, ##146800640
1bbd0     44 00 00 FF 
1bbd4     60 E5 05 F1 | 	add	objptr, ##35168
1bbd8     F2 FA 61 FC | 	wrlong	result1, objptr
1bbdc     44 00 00 FF 
1bbe0     60 E5 85 F1 | 	sub	objptr, ##35168
1bbe4     F2 FA 01 F6 | 	mov	result1, objptr
1bbe8     00 68 04 FF 
1bbec     00 FA 45 F5 | 	or	result1, ##147849216
1bbf0     44 00 00 FF 
1bbf4     7C E5 05 F1 | 	add	objptr, ##35196
1bbf8     F2 FA 61 FC | 	wrlong	result1, objptr
1bbfc     44 00 00 FF 
1bc00     7C E5 85 F1 | 	sub	objptr, ##35196
1bc04     F2 FA 01 F6 | 	mov	result1, objptr
1bc08     00 70 04 FF 
1bc0c     00 FA 45 F5 | 	or	result1, ##148897792
1bc10     44 00 00 FF 
1bc14     80 E5 05 F1 | 	add	objptr, ##35200
1bc18     F2 FA 61 FC | 	wrlong	result1, objptr
1bc1c     44 00 00 FF 
1bc20     80 E5 85 F1 | 	sub	objptr, ##35200
1bc24                 | _init_commands_ret
1bc24     2D 00 64 FD | 	ret
1bc28                 | 
1bc28                 | ' 
1bc28                 | ' ''--------------------------------Error strings -------------------------------------
1bc28                 | ' sub init_audio
1bc28                 | _init_audio
1bc28     06 4A 05 F6 | 	mov	COUNT_, #6
1bc2c     A8 00 A0 FD | 	call	#pushregs_
1bc30     00 C0 1F FF 
1bc34     00 1E 06 F6 | 	mov	local01, ##1065353216
1bc38                 | ' 'for i=0 to 1023 : samplebuf(0,i)=round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1bc38                 | ' 'for i=0 to 511  : samplebuf(1,i)= -32512+127*i: samplebuf(1,512+i)=-samplebuf(1,i) : next i   		' 1 : triangle 
1bc38                 | ' 'for i=0 to 1023 : samplebuf(2,i)= -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1bc38                 | ' 'for i=0 to 127  : samplebuf(3,i)= -32600 : next i : for i=128 to 1023 : samplebuf(3,i) =32600 : next i 	' 3 pulse 12.5%
1bc38                 | ' 'for i=0 to 511  : samplebuf(4,i)= -32600 : next i : for i=512 to 1023 : samplebuf(4,i) =32600 : next i 	' 4 square
1bc38                 | ' 'for i=0 to 255  : samplebuf(5,i)= -32600 : next i : for i=256 to 1023 : samplebuf(5,i) =32600 : next i 	' 5 pulse 25%
1bc38                 | ' 'for i=0 to 1023 : samplebuf(6,i)= dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1bc38                 | ' 'for i=0 to 1023 : samplebuf(7,i)= dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1bc38                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1bc38     00 20 06 F6 | 	mov	local02, #0
1bc3c                 | LR__2240
1bc3c     10 23 02 F6 | 	mov	local03, local02
1bc40     01 22 66 F0 | 	shl	local03, #1
1bc44     58 7F 23 FF 
1bc48     00 24 06 F6 | 	mov	local04, ##1191096320
1bc4c     10 13 52 F6 | 	abs	arg01, local02 wc
1bc50     1F 26 C6 C9 |  if_b	decod	local05, #31
1bc54     00 26 06 36 |  if_ae	mov	local05, #0
1bc58     64 78 B0 FD | 	call	#__system___float_fromuns
1bc5c     13 FB 61 F5 | 	xor	result1, local05
1bc60     FD 12 02 F6 | 	mov	arg01, result1
1bc64     87 24 20 FF 
1bc68     DB 15 06 F6 | 	mov	arg02, ##1078530011
1bc6c     54 7C B0 FD | 	call	#__system___float_mul
1bc70     FD 12 02 F6 | 	mov	arg01, result1
1bc74     00 00 22 FF 
1bc78     00 14 06 F6 | 	mov	arg02, ##1140850688
1bc7c     48 7E B0 FD | 	call	#__system___float_div
1bc80     FD 12 02 F6 | 	mov	arg01, result1
1bc84     78 85 B0 FD | 	call	#__system____builtin_sinf
1bc88     FD 14 02 F6 | 	mov	arg02, result1
1bc8c     12 13 02 F6 | 	mov	arg01, local04
1bc90     30 7C B0 FD | 	call	#__system___float_mul
1bc94     FD 12 02 F6 | 	mov	arg01, result1
1bc98     01 14 06 F6 | 	mov	arg02, #1
1bc9c     EC 80 B0 FD | 	call	#__system___float_tointeger
1bca0     FD 14 02 F6 | 	mov	arg02, result1
1bca4     11 13 02 F6 | 	mov	arg01, local03
1bca8     68 0D B0 FD | 	call	#_psdpoke
1bcac     01 20 06 F1 | 	add	local02, #1
1bcb0     02 00 00 FF 
1bcb4     00 20 56 F2 | 	cmps	local02, ##1024 wc
1bcb8     80 FF 9F CD |  if_b	jmp	#LR__2240
1bcbc                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
1bcbc     00 20 06 F6 | 	mov	local02, #0
1bcc0                 | LR__2241
1bcc0     10 15 02 F6 | 	mov	arg02, local02
1bcc4     01 14 66 F0 | 	shl	arg02, #1
1bcc8     0B 12 C6 F9 | 	decod	arg01, #11
1bccc     0A 13 02 F1 | 	add	arg01, arg02
1bcd0     10 25 02 F6 | 	mov	local04, local02
1bcd4     07 24 66 F0 | 	shl	local04, #7
1bcd8     10 25 82 F1 | 	sub	local04, local02
1bcdc     C0 FF 7F FF 
1bce0     00 15 06 F6 | 	mov	arg02, ##-32512
1bce4     12 15 02 F1 | 	add	arg02, local04
1bce8     28 0D B0 FD | 	call	#_psdpoke
1bcec     09 24 C6 F9 | 	decod	local04, #9
1bcf0     10 25 02 F1 | 	add	local04, local02
1bcf4     01 24 66 F0 | 	shl	local04, #1
1bcf8     0B 12 C6 F9 | 	decod	arg01, #11
1bcfc     12 13 02 F1 | 	add	arg01, local04
1bd00     10 27 02 F6 | 	mov	local05, local02
1bd04     07 26 66 F0 | 	shl	local05, #7
1bd08     10 27 82 F1 | 	sub	local05, local02
1bd0c     3F 00 00 FF 
1bd10     00 15 06 F6 | 	mov	arg02, ##32512
1bd14     13 15 82 F1 | 	sub	arg02, local05
1bd18     F8 0C B0 FD | 	call	#_psdpoke
1bd1c     01 20 06 F1 | 	add	local02, #1
1bd20     01 00 00 FF 
1bd24     00 20 56 F2 | 	cmps	local02, ##512 wc
1bd28     94 FF 9F CD |  if_b	jmp	#LR__2241
1bd2c                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1bd2c     00 20 06 F6 | 	mov	local02, #0
1bd30                 | LR__2242
1bd30     10 27 02 F6 | 	mov	local05, local02
1bd34     01 26 66 F0 | 	shl	local05, #1
1bd38     0C 12 C6 F9 | 	decod	arg01, #12
1bd3c     13 13 02 F1 | 	add	arg01, local05
1bd40     10 27 02 F6 | 	mov	local05, local02
1bd44     06 26 66 F0 | 	shl	local05, #6
1bd48     10 27 82 F1 | 	sub	local05, local02
1bd4c     C1 FF 7F FF 
1bd50     00 14 06 F6 | 	mov	arg02, ##-32256
1bd54     13 15 02 F1 | 	add	arg02, local05
1bd58     B8 0C B0 FD | 	call	#_psdpoke
1bd5c     01 20 06 F1 | 	add	local02, #1
1bd60     02 00 00 FF 
1bd64     00 20 56 F2 | 	cmps	local02, ##1024 wc
1bd68     C4 FF 9F CD |  if_b	jmp	#LR__2242
1bd6c                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
1bd6c     00 20 06 F6 | 	mov	local02, #0
1bd70                 | LR__2243
1bd70     10 27 02 F6 | 	mov	local05, local02
1bd74     01 26 66 F0 | 	shl	local05, #1
1bd78     0C 00 00 FF 
1bd7c     00 12 06 F6 | 	mov	arg01, ##6144
1bd80     13 13 02 F1 | 	add	arg01, local05
1bd84     C0 FF 7F FF 
1bd88     A8 14 06 F6 | 	mov	arg02, ##-32600
1bd8c     84 0C B0 FD | 	call	#_psdpoke
1bd90     01 20 06 F1 | 	add	local02, #1
1bd94     80 20 56 F2 | 	cmps	local02, #128 wc
1bd98     D4 FF 9F CD |  if_b	jmp	#LR__2243
1bd9c     80 20 06 F6 | 	mov	local02, #128
1bda0                 | LR__2244
1bda0     10 27 02 F6 | 	mov	local05, local02
1bda4     01 26 66 F0 | 	shl	local05, #1
1bda8     0C 00 00 FF 
1bdac     00 12 06 F6 | 	mov	arg01, ##6144
1bdb0     13 13 02 F1 | 	add	arg01, local05
1bdb4     3F 00 00 FF 
1bdb8     58 15 06 F6 | 	mov	arg02, ##32600
1bdbc     54 0C B0 FD | 	call	#_psdpoke
1bdc0     01 20 06 F1 | 	add	local02, #1
1bdc4     02 00 00 FF 
1bdc8     00 20 16 F2 | 	cmp	local02, ##1024 wc
1bdcc     D0 FF 9F CD |  if_b	jmp	#LR__2244
1bdd0                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
1bdd0     00 20 06 F6 | 	mov	local02, #0
1bdd4                 | LR__2245
1bdd4     10 27 02 F6 | 	mov	local05, local02
1bdd8     01 26 66 F0 | 	shl	local05, #1
1bddc     0D 12 C6 F9 | 	decod	arg01, #13
1bde0     13 13 02 F1 | 	add	arg01, local05
1bde4     C0 FF 7F FF 
1bde8     A8 14 06 F6 | 	mov	arg02, ##-32600
1bdec     24 0C B0 FD | 	call	#_psdpoke
1bdf0     01 20 06 F1 | 	add	local02, #1
1bdf4     01 00 00 FF 
1bdf8     00 20 56 F2 | 	cmps	local02, ##512 wc
1bdfc     D4 FF 9F CD |  if_b	jmp	#LR__2245
1be00     09 20 C6 F9 | 	decod	local02, #9
1be04                 | LR__2246
1be04     10 27 02 F6 | 	mov	local05, local02
1be08     01 26 66 F0 | 	shl	local05, #1
1be0c     0D 12 C6 F9 | 	decod	arg01, #13
1be10     13 13 02 F1 | 	add	arg01, local05
1be14     3F 00 00 FF 
1be18     58 15 06 F6 | 	mov	arg02, ##32600
1be1c     F4 0B B0 FD | 	call	#_psdpoke
1be20     01 20 06 F1 | 	add	local02, #1
1be24     02 00 00 FF 
1be28     00 20 16 F2 | 	cmp	local02, ##1024 wc
1be2c     D4 FF 9F CD |  if_b	jmp	#LR__2246
1be30                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
1be30     00 20 06 F6 | 	mov	local02, #0
1be34                 | LR__2247
1be34     10 27 02 F6 | 	mov	local05, local02
1be38     01 26 66 F0 | 	shl	local05, #1
1be3c     14 00 00 FF 
1be40     00 12 06 F6 | 	mov	arg01, ##10240
1be44     13 13 02 F1 | 	add	arg01, local05
1be48     C0 FF 7F FF 
1be4c     A8 14 06 F6 | 	mov	arg02, ##-32600
1be50     C0 0B B0 FD | 	call	#_psdpoke
1be54     01 20 06 F1 | 	add	local02, #1
1be58     00 21 56 F2 | 	cmps	local02, #256 wc
1be5c     D4 FF 9F CD |  if_b	jmp	#LR__2247
1be60     00 21 06 F6 | 	mov	local02, #256
1be64                 | LR__2248
1be64     10 27 02 F6 | 	mov	local05, local02
1be68     01 26 66 F0 | 	shl	local05, #1
1be6c     14 00 00 FF 
1be70     00 12 06 F6 | 	mov	arg01, ##10240
1be74     13 13 02 F1 | 	add	arg01, local05
1be78     3F 00 00 FF 
1be7c     58 15 06 F6 | 	mov	arg02, ##32600
1be80     90 0B B0 FD | 	call	#_psdpoke
1be84     01 20 06 F1 | 	add	local02, #1
1be88     02 00 00 FF 
1be8c     00 20 16 F2 | 	cmp	local02, ##1024 wc
1be90     D0 FF 9F CD |  if_b	jmp	#LR__2248
1be94                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
1be94     18 00 00 FF 
1be98     00 20 06 F6 | 	mov	local02, ##12288
1be9c                 | LR__2249
1be9c     10 13 02 F6 | 	mov	arg01, local02
1bea0     00 14 06 F6 | 	mov	arg02, #0
1bea4     24 0B B0 FD | 	call	#_pslpoke
1bea8     04 20 06 F1 | 	add	local02, #4
1beac     77 00 00 FF 
1beb0     FD 21 56 F2 | 	cmps	local02, ##61437 wc
1beb4     E4 FF 9F CD |  if_b	jmp	#LR__2249
1beb8                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1beb8     00 20 06 F6 | 	mov	local02, #0
1bebc                 | LR__2250
1bebc     10 27 02 F6 | 	mov	local05, local02
1bec0     01 26 66 F0 | 	shl	local05, #1
1bec4     78 00 00 FF 
1bec8     00 22 06 F6 | 	mov	local03, ##61440
1becc     13 23 02 F1 | 	add	local03, local05
1bed0     14 00 00 FF 
1bed4     C6 EA 05 F1 | 	add	ptr__dat__, ##10438
1bed8     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1bedc     14 00 00 FF 
1bee0     C6 EA 85 F1 | 	sub	ptr__dat__, ##10438
1bee4     10 12 06 F1 | 	add	arg01, #16
1bee8     10 15 02 F6 | 	mov	arg02, local02
1beec     01 14 66 F0 | 	shl	arg02, #1
1bef0     0A 13 02 F1 | 	add	arg01, arg02
1bef4     09 15 E2 FA | 	rdword	arg02, arg01
1bef8     11 13 02 F6 | 	mov	arg01, local03
1befc     14 0B B0 FD | 	call	#_psdpoke
1bf00     01 20 06 F1 | 	add	local02, #1
1bf04     02 00 00 FF 
1bf08     00 20 56 F2 | 	cmps	local02, ##1024 wc
1bf0c     AC FF 9F CD |  if_b	jmp	#LR__2250
1bf10                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1bf10     00 20 06 F6 | 	mov	local02, #0
1bf14                 | LR__2251
1bf14     10 27 02 F6 | 	mov	local05, local02
1bf18     01 26 66 F0 | 	shl	local05, #1
1bf1c     7C 00 00 FF 
1bf20     00 22 06 F6 | 	mov	local03, ##63488
1bf24     13 23 02 F1 | 	add	local03, local05
1bf28     10 00 00 FF 
1bf2c     B6 EA 05 F1 | 	add	ptr__dat__, ##8374
1bf30     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1bf34     10 00 00 FF 
1bf38     B6 EA 85 F1 | 	sub	ptr__dat__, ##8374
1bf3c     10 12 06 F1 | 	add	arg01, #16
1bf40     10 15 02 F6 | 	mov	arg02, local02
1bf44     01 14 66 F0 | 	shl	arg02, #1
1bf48     0A 13 02 F1 | 	add	arg01, arg02
1bf4c     09 15 E2 FA | 	rdword	arg02, arg01
1bf50     11 13 02 F6 | 	mov	arg01, local03
1bf54     BC 0A B0 FD | 	call	#_psdpoke
1bf58     01 20 06 F1 | 	add	local02, #1
1bf5c     02 00 00 FF 
1bf60     00 20 56 F2 | 	cmps	local02, ##1024 wc
1bf64     AC FF 9F CD |  if_b	jmp	#LR__2251
1bf68                 | ' 
1bf68                 | ' 
1bf68                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
1bf68     00 20 06 F6 | 	mov	local02, #0
1bf6c     0C 00 00 FF 
1bf70     D8 E4 05 F1 | 	add	objptr, ##6360
1bf74     97 18 48 FB | 	callpa	#(@LR__2253-@LR__2252)>>2,fcache_load_ptr_
1bf78                 | LR__2252
1bf78     10 27 02 F6 | 	mov	local05, local02
1bf7c     01 26 66 F0 | 	shl	local05, #1
1bf80     F2 26 02 F1 | 	add	local05, objptr
1bf84     10 23 02 F6 | 	mov	local03, local02
1bf88     08 22 66 F0 | 	shl	local03, #8
1bf8c     7F 00 00 FF 
1bf90     00 29 06 F6 | 	mov	local06, ##65280
1bf94     11 29 82 F1 | 	sub	local06, local03
1bf98     13 29 52 FC | 	wrword	local06, local05
1bf9c     01 20 06 F1 | 	add	local02, #1
1bfa0     00 21 56 F2 | 	cmps	local02, #256 wc
1bfa4     D0 FF 9F CD |  if_b	jmp	#LR__2252
1bfa8                 | LR__2253
1bfa8     0C 00 00 FF 
1bfac     D8 E4 85 F1 | 	sub	objptr, ##6360
1bfb0                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
1bfb0     00 20 06 F6 | 	mov	local02, #0
1bfb4                 | LR__2254
1bfb4     10 27 02 F6 | 	mov	local05, local02
1bfb8     01 26 66 F0 | 	shl	local05, #1
1bfbc     0D 00 00 FF 
1bfc0     D8 E4 05 F1 | 	add	objptr, ##6872
1bfc4     F2 26 02 F1 | 	add	local05, objptr
1bfc8     80 BF 23 FF 
1bfcc     00 12 06 F6 | 	mov	arg01, ##1199505408
1bfd0     0F 15 02 F6 | 	mov	arg02, local01
1bfd4     0D 00 00 FF 
1bfd8     D8 E4 85 F1 | 	sub	objptr, ##6872
1bfdc     E4 78 B0 FD | 	call	#__system___float_mul
1bfe0     FD 12 02 F6 | 	mov	arg01, result1
1bfe4     01 14 06 F6 | 	mov	arg02, #1
1bfe8     A0 7D B0 FD | 	call	#__system___float_tointeger
1bfec     13 FB 51 FC | 	wrword	result1, local05
1bff0     0F 13 02 F6 | 	mov	arg01, local01
1bff4     CC BC 1F FF 
1bff8     9A 15 06 F6 | 	mov	arg02, ##1064933786
1bffc     C4 78 B0 FD | 	call	#__system___float_mul
1c000     FD 1E 02 F6 | 	mov	local01, result1
1c004     01 20 06 F1 | 	add	local02, #1
1c008     00 21 56 F2 | 	cmps	local02, #256 wc
1c00c     A4 FF 9F CD |  if_b	jmp	#LR__2254
1c010     0E 00 00 FF 
1c014     D6 E4 05 F1 | 	add	objptr, ##7382
1c018     F2 00 58 FC | 	wrword	#0, objptr
1c01c                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
1c01c     00 20 06 F6 | 	mov	local02, #0
1c020     02 E4 05 F1 | 	add	objptr, #2
1c024     97 10 48 FB | 	callpa	#(@LR__2256-@LR__2255)>>2,fcache_load_ptr_
1c028                 | LR__2255
1c028     10 27 02 F6 | 	mov	local05, local02
1c02c     01 26 66 F0 | 	shl	local05, #1
1c030     F2 26 02 F1 | 	add	local05, objptr
1c034     7F 00 80 FF 
1c038     13 01 5A FC | 	wrword	##65280, local05
1c03c     01 20 06 F1 | 	add	local02, #1
1c040     FF 20 56 F2 | 	cmps	local02, #255 wc
1c044     E0 FF 9F CD |  if_b	jmp	#LR__2255
1c048                 | LR__2256
1c048     FE E5 05 F1 | 	add	objptr, #510
1c04c     F2 00 58 FC | 	wrword	#0, objptr
1c050                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
1c050     00 20 06 F6 | 	mov	local02, #0
1c054     02 E4 05 F1 | 	add	objptr, #2
1c058     97 52 48 FB | 	callpa	#(@LR__2261-@LR__2257)>>2,fcache_load_ptr_
1c05c                 | LR__2257
1c05c     10 27 02 F6 | 	mov	local05, local02
1c060     01 26 66 F0 | 	shl	local05, #1
1c064     F2 26 02 F1 | 	add	local05, objptr
1c068     10 29 02 F6 | 	mov	local06, local02
1c06c     0C 28 66 F0 | 	shl	local06, #12
1c070     13 29 52 FC | 	wrword	local06, local05
1c074     01 20 06 F1 | 	add	local02, #1
1c078     10 20 56 F2 | 	cmps	local02, #16 wc
1c07c     DC FF 9F CD |  if_b	jmp	#LR__2257
1c080                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
1c080     10 20 06 F6 | 	mov	local02, #16
1c084                 | LR__2258
1c084     10 27 02 F6 | 	mov	local05, local02
1c088     01 26 66 F0 | 	shl	local05, #1
1c08c     F2 26 02 F1 | 	add	local05, objptr
1c090     7F 00 80 FF 
1c094     13 01 5A FC | 	wrword	##65280, local05
1c098     01 20 06 F1 | 	add	local02, #1
1c09c     F0 20 16 F2 | 	cmp	local02, #240 wc
1c0a0     E0 FF 9F CD |  if_b	jmp	#LR__2258
1c0a4                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
1c0a4     F0 20 06 F6 | 	mov	local02, #240
1c0a8                 | LR__2259
1c0a8     10 27 02 F6 | 	mov	local05, local02
1c0ac     01 26 66 F0 | 	shl	local05, #1
1c0b0     F2 26 02 F1 | 	add	local05, objptr
1c0b4     FF 22 06 F6 | 	mov	local03, #255
1c0b8     10 23 82 F1 | 	sub	local03, local02
1c0bc     0C 22 66 F0 | 	shl	local03, #12
1c0c0     13 23 52 FC | 	wrword	local03, local05
1c0c4     01 20 06 F1 | 	add	local02, #1
1c0c8     00 21 16 F2 | 	cmp	local02, #256 wc
1c0cc     D8 FF 9F CD |  if_b	jmp	#LR__2259
1c0d0                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
1c0d0     00 20 06 F6 | 	mov	local02, #0
1c0d4     01 00 00 FF 
1c0d8     00 E4 05 F1 | 	add	objptr, ##512
1c0dc                 | LR__2260
1c0dc     10 27 02 F6 | 	mov	local05, local02
1c0e0     01 26 66 F0 | 	shl	local05, #1
1c0e4     F2 26 02 F1 | 	add	local05, objptr
1c0e8     10 29 02 F6 | 	mov	local06, local02
1c0ec     08 28 66 F0 | 	shl	local06, #8
1c0f0     13 29 52 FC | 	wrword	local06, local05
1c0f4     01 20 06 F1 | 	add	local02, #1
1c0f8     00 21 56 F2 | 	cmps	local02, #256 wc
1c0fc     DC FF 9F CD |  if_b	jmp	#LR__2260
1c100                 | LR__2261
1c100     FE E5 05 F1 | 	add	objptr, #510
1c104     F2 00 58 FC | 	wrword	#0, objptr
1c108                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1c108     00 20 06 F6 | 	mov	local02, #0
1c10c     02 E4 05 F1 | 	add	objptr, #2
1c110     97 6A 48 FB | 	callpa	#(@LR__2266-@LR__2262)>>2,fcache_load_ptr_
1c114                 | LR__2262
1c114     10 27 02 F6 | 	mov	local05, local02
1c118     01 26 66 F0 | 	shl	local05, #1
1c11c     F2 26 02 F1 | 	add	local05, objptr
1c120     10 29 02 F6 | 	mov	local06, local02
1c124     04 28 66 F0 | 	shl	local06, #4
1c128     10 29 02 F1 | 	add	local06, local02
1c12c     04 28 66 F0 | 	shl	local06, #4
1c130     13 29 52 FC | 	wrword	local06, local05
1c134     01 20 06 F1 | 	add	local02, #1
1c138     F0 20 56 F2 | 	cmps	local02, #240 wc
1c13c     D4 FF 9F CD |  if_b	jmp	#LR__2262
1c140     F0 20 06 F6 | 	mov	local02, #240
1c144                 | LR__2263
1c144     10 27 02 F6 | 	mov	local05, local02
1c148     01 26 66 F0 | 	shl	local05, #1
1c14c     F2 26 02 F1 | 	add	local05, objptr
1c150     FF 22 06 F6 | 	mov	local03, #255
1c154     10 23 82 F1 | 	sub	local03, local02
1c158     0C 22 66 F0 | 	shl	local03, #12
1c15c     13 23 52 FC | 	wrword	local03, local05
1c160     01 20 06 F1 | 	add	local02, #1
1c164     00 21 16 F2 | 	cmp	local02, #256 wc
1c168     D8 FF 9F CD |  if_b	jmp	#LR__2263
1c16c                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
1c16c     00 20 06 F6 | 	mov	local02, #0
1c170     01 00 00 FF 
1c174     00 E4 05 F1 | 	add	objptr, ##512
1c178                 | LR__2264
1c178     10 27 02 F6 | 	mov	local05, local02
1c17c     01 26 66 F0 | 	shl	local05, #1
1c180     F2 26 02 F1 | 	add	local05, objptr
1c184     10 29 02 F6 | 	mov	local06, local02
1c188     09 28 66 F0 | 	shl	local06, #9
1c18c     13 29 52 FC | 	wrword	local06, local05
1c190     FF 26 06 F6 | 	mov	local05, #255
1c194     10 27 82 F1 | 	sub	local05, local02
1c198     01 26 66 F0 | 	shl	local05, #1
1c19c     F2 26 02 F1 | 	add	local05, objptr
1c1a0     10 29 02 F6 | 	mov	local06, local02
1c1a4     09 28 66 F0 | 	shl	local06, #9
1c1a8     13 29 52 FC | 	wrword	local06, local05
1c1ac     01 20 06 F1 | 	add	local02, #1
1c1b0     80 20 56 F2 | 	cmps	local02, #128 wc
1c1b4     C0 FF 9F CD |  if_b	jmp	#LR__2264
1c1b8                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1c1b8     00 20 06 F6 | 	mov	local02, #0
1c1bc     01 00 00 FF 
1c1c0     00 E4 05 F1 | 	add	objptr, ##512
1c1c4                 | LR__2265
1c1c4     10 27 02 F6 | 	mov	local05, local02
1c1c8     01 26 66 F0 | 	shl	local05, #1
1c1cc     F2 26 02 F1 | 	add	local05, objptr
1c1d0     10 29 02 F6 | 	mov	local06, local02
1c1d4     0D 28 66 F0 | 	shl	local06, #13
1c1d8     13 29 52 FC | 	wrword	local06, local05
1c1dc     01 20 06 F1 | 	add	local02, #1
1c1e0     08 20 56 F2 | 	cmps	local02, #8 wc
1c1e4     DC FF 9F CD |  if_b	jmp	#LR__2265
1c1e8                 | LR__2266
1c1e8                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1c1e8     08 20 06 F6 | 	mov	local02, #8
1c1ec     97 42 48 FB | 	callpa	#(@LR__2270-@LR__2267)>>2,fcache_load_ptr_
1c1f0                 | LR__2267
1c1f0     10 27 02 F6 | 	mov	local05, local02
1c1f4     01 26 66 F0 | 	shl	local05, #1
1c1f8     F2 26 02 F1 | 	add	local05, objptr
1c1fc     10 1F 02 F6 | 	mov	local01, local02
1c200     08 1E 86 F1 | 	sub	local01, #8
1c204     0B 1E 66 F0 | 	shl	local01, #11
1c208     7F 00 00 FF 
1c20c     00 29 06 F6 | 	mov	local06, ##65280
1c210     0F 29 82 F1 | 	sub	local06, local01
1c214     13 29 52 FC | 	wrword	local06, local05
1c218     01 20 06 F1 | 	add	local02, #1
1c21c     18 20 16 F2 | 	cmp	local02, #24 wc
1c220     CC FF 9F CD |  if_b	jmp	#LR__2267
1c224                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
1c224     18 20 06 F6 | 	mov	local02, #24
1c228                 | LR__2268
1c228     10 27 02 F6 | 	mov	local05, local02
1c22c     01 26 66 F0 | 	shl	local05, #1
1c230     F2 26 02 F1 | 	add	local05, objptr
1c234     40 00 80 FF 
1c238     13 01 58 FC | 	wrword	##32768, local05
1c23c     01 20 06 F1 | 	add	local02, #1
1c240     81 20 16 F2 | 	cmp	local02, #129 wc
1c244     E0 FF 9F CD |  if_b	jmp	#LR__2268
1c248                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
1c248     81 20 06 F6 | 	mov	local02, #129
1c24c                 | LR__2269
1c24c     10 27 02 F6 | 	mov	local05, local02
1c250     01 26 66 F0 | 	shl	local05, #1
1c254     F2 26 02 F1 | 	add	local05, objptr
1c258     FF 22 06 F6 | 	mov	local03, #255
1c25c     10 23 82 F1 | 	sub	local03, local02
1c260     08 22 66 F0 | 	shl	local03, #8
1c264     13 23 52 FC | 	wrword	local03, local05
1c268     01 20 06 F1 | 	add	local02, #1
1c26c     00 21 16 F2 | 	cmp	local02, #256 wc
1c270     D8 FF 9F CD |  if_b	jmp	#LR__2269
1c274                 | LR__2270
1c274     46 00 00 FF 
1c278     32 E5 05 F1 | 	add	objptr, ##36146
1c27c     F2 00 59 FC | 	wrword	#128, objptr
1c280     5A 00 00 FF 
1c284     0A E4 85 F1 | 	sub	objptr, ##46090
1c288                 | ' for i=0 to 7
1c288     00 20 06 F6 | 	mov	local02, #0
1c28c     97 8E 48 FB | 	callpa	#(@LR__2272-@LR__2271)>>2,fcache_load_ptr_
1c290                 | LR__2271
1c290     10 27 02 F6 | 	mov	local05, local02
1c294     01 26 66 F0 | 	shl	local05, #1
1c298     10 27 02 F1 | 	add	local05, local02
1c29c     03 26 66 F0 | 	shl	local05, #3
1c2a0     14 00 00 FF 
1c2a4     68 E5 05 F1 | 	add	objptr, ##10600
1c2a8     F2 26 02 F1 | 	add	local05, objptr
1c2ac     00 EE A1 FF 
1c2b0     13 01 68 FC | 	wrlong	##1138491392, local05
1c2b4     10 27 02 F6 | 	mov	local05, local02
1c2b8     01 26 66 F0 | 	shl	local05, #1
1c2bc     10 27 02 F1 | 	add	local05, local02
1c2c0     03 26 66 F0 | 	shl	local05, #3
1c2c4     F2 26 02 F1 | 	add	local05, objptr
1c2c8     04 26 06 F1 | 	add	local05, #4
1c2cc     13 21 42 FC | 	wrbyte	local02, local05
1c2d0     10 27 02 F6 | 	mov	local05, local02
1c2d4     01 26 66 F0 | 	shl	local05, #1
1c2d8     10 27 02 F1 | 	add	local05, local02
1c2dc     03 26 66 F0 | 	shl	local05, #3
1c2e0     F2 26 02 F1 | 	add	local05, objptr
1c2e4     05 26 06 F1 | 	add	local05, #5
1c2e8     13 21 42 FC | 	wrbyte	local02, local05
1c2ec     10 27 02 F6 | 	mov	local05, local02
1c2f0     01 26 66 F0 | 	shl	local05, #1
1c2f4     10 27 02 F1 | 	add	local05, local02
1c2f8     03 26 66 F0 | 	shl	local05, #3
1c2fc     F2 26 02 F1 | 	add	local05, objptr
1c300     06 26 06 F1 | 	add	local05, #6
1c304     13 01 58 FC | 	wrword	#0, local05
1c308     10 27 02 F6 | 	mov	local05, local02
1c30c     01 26 66 F0 | 	shl	local05, #1
1c310     10 27 02 F1 | 	add	local05, local02
1c314     03 26 66 F0 | 	shl	local05, #3
1c318     F2 26 02 F1 | 	add	local05, objptr
1c31c     08 26 06 F1 | 	add	local05, #8
1c320     00 C0 9F FF 
1c324     13 01 68 FC | 	wrlong	##1065353216, local05
1c328     10 27 02 F6 | 	mov	local05, local02
1c32c     01 26 66 F0 | 	shl	local05, #1
1c330     10 27 02 F1 | 	add	local05, local02
1c334     03 26 66 F0 | 	shl	local05, #3
1c338     F2 26 02 F1 | 	add	local05, objptr
1c33c     0C 26 06 F1 | 	add	local05, #12
1c340     00 40 A0 FF 
1c344     13 01 68 FC | 	wrlong	##1082130432, local05
1c348     10 27 02 F6 | 	mov	local05, local02
1c34c     01 26 66 F0 | 	shl	local05, #1
1c350     10 27 02 F1 | 	add	local05, local02
1c354     03 26 66 F0 | 	shl	local05, #3
1c358     F2 26 02 F1 | 	add	local05, objptr
1c35c     10 26 06 F1 | 	add	local05, #16
1c360     13 01 68 FC | 	wrlong	#0, local05
1c364     10 27 02 F6 | 	mov	local05, local02
1c368     01 26 66 F0 | 	shl	local05, #1
1c36c     10 27 02 F1 | 	add	local05, local02
1c370     03 26 66 F0 | 	shl	local05, #3
1c374     F2 26 02 F1 | 	add	local05, objptr
1c378     14 26 06 F1 | 	add	local05, #20
1c37c     13 FF 59 FC | 	wrword	#255, local05
1c380     10 27 02 F6 | 	mov	local05, local02
1c384     01 26 66 F0 | 	shl	local05, #1
1c388     45 00 00 FF 
1c38c     94 E4 05 F1 | 	add	objptr, ##35476
1c390     F2 26 02 F1 | 	add	local05, objptr
1c394     13 FF 59 FC | 	wrword	#255, local05
1c398     01 20 06 F1 | 	add	local02, #1
1c39c     08 20 56 F2 | 	cmps	local02, #8 wc
1c3a0     59 00 00 FF 
1c3a4     FC E5 85 F1 | 	sub	objptr, ##46076
1c3a8     E4 FE 9F CD |  if_b	jmp	#LR__2271
1c3ac                 | LR__2272
1c3ac     00 6E 20 FF 
1c3b0     00 28 06 F6 | 	mov	local06, ##1088159744
1c3b4                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
1c3b4     03 26 06 F6 | 	mov	local05, #3
1c3b8                 | LR__2273
1c3b8     14 13 02 F6 | 	mov	arg01, local06
1c3bc     CE C3 1F FF 
1c3c0     7D 14 06 F6 | 	mov	arg02, ##1065852029
1c3c4     FC 74 B0 FD | 	call	#__system___float_mul
1c3c8     FD 28 02 F6 | 	mov	local06, result1
1c3cc     FA 27 6E FB | 	djnz	local05, #LR__2273
1c3d0     00 20 06 F6 | 	mov	local02, #0
1c3d4                 | LR__2274
1c3d4     10 25 02 F6 | 	mov	local04, local02
1c3d8     02 24 66 F0 | 	shl	local04, #2
1c3dc     14 00 00 FF 
1c3e0     D8 E4 05 F1 | 	add	objptr, ##10456
1c3e4     F2 24 02 F1 | 	add	local04, objptr
1c3e8     12 29 62 FC | 	wrlong	local06, local04
1c3ec     14 13 02 F6 | 	mov	arg01, local06
1c3f0     CE C3 1F FF 
1c3f4     7D 14 06 F6 | 	mov	arg02, ##1065852029
1c3f8     14 00 00 FF 
1c3fc     D8 E4 85 F1 | 	sub	objptr, ##10456
1c400     C0 74 B0 FD | 	call	#__system___float_mul
1c404     FD 28 02 F6 | 	mov	local06, result1
1c408     01 20 06 F1 | 	add	local02, #1
1c40c     0C 20 56 F2 | 	cmps	local02, #12 wc
1c410     C0 FF 9F CD |  if_b	jmp	#LR__2274
1c414     14 00 00 FF 
1c418     38 E5 05 F1 | 	add	objptr, ##10552
1c41c     F2 50 6B FC | 	wrlong	#424, objptr
1c420     04 E4 05 F1 | 	add	objptr, #4
1c424     F2 20 6B FC | 	wrlong	#400, objptr
1c428     04 E4 05 F1 | 	add	objptr, #4
1c42c     F2 F2 6A FC | 	wrlong	#377, objptr
1c430     04 E4 05 F1 | 	add	objptr, #4
1c434     F2 C8 6A FC | 	wrlong	#356, objptr
1c438     04 E4 05 F1 | 	add	objptr, #4
1c43c     F2 A0 6A FC | 	wrlong	#336, objptr
1c440     04 E4 05 F1 | 	add	objptr, #4
1c444     F2 7A 6A FC | 	wrlong	#317, objptr
1c448     04 E4 05 F1 | 	add	objptr, #4
1c44c     F2 58 6A FC | 	wrlong	#300, objptr
1c450     04 E4 05 F1 | 	add	objptr, #4
1c454     F2 36 6A FC | 	wrlong	#283, objptr
1c458     04 E4 05 F1 | 	add	objptr, #4
1c45c     F2 16 6A FC | 	wrlong	#267, objptr
1c460     04 E4 05 F1 | 	add	objptr, #4
1c464     F2 F8 69 FC | 	wrlong	#252, objptr
1c468     04 E4 05 F1 | 	add	objptr, #4
1c46c     F2 DC 69 FC | 	wrlong	#238, objptr
1c470     04 E4 05 F1 | 	add	objptr, #4
1c474     F2 C0 69 FC | 	wrlong	#224, objptr
1c478     45 00 00 FF 
1c47c     A6 E4 05 F1 | 	add	objptr, ##35494
1c480     F2 00 59 FC | 	wrword	#128, objptr
1c484     02 E4 85 F1 | 	sub	objptr, #2
1c488     F2 00 59 FC | 	wrword	#128, objptr
1c48c     5A 00 00 FF 
1c490     08 E4 85 F1 | 	sub	objptr, ##46088
1c494     A7 F0 03 F6 | 	mov	ptra, fp
1c498     B2 00 A0 FD | 	call	#popregs_
1c49c                 | _init_audio_ret
1c49c     2D 00 64 FD | 	ret
1c4a0                 | 
1c4a0                 | ' 
1c4a0                 | ' 
1c4a0                 | ' function getnoteval(token) as single
1c4a0                 | _getnoteval
1c4a0     02 4A 05 F6 | 	mov	COUNT_, #2
1c4a4     A8 00 A0 FD | 	call	#pushregs_
1c4a8     01 00 00 FF 
1c4ac     00 13 86 F1 | 	sub	arg01, ##768
1c4b0     09 15 52 F6 | 	abs	arg02, arg01 wc
1c4b4     0C 14 16 FD | 	qdiv	arg02, #12
1c4b8     14 00 00 FF 
1c4bc     D8 E4 05 F1 | 	add	objptr, ##10456
1c4c0     19 14 62 FD | 	getqy	arg02
1c4c4     0A 15 82 F6 | 	negc	arg02, arg02
1c4c8     02 14 66 F0 | 	shl	arg02, #2
1c4cc     F2 14 02 F1 | 	add	arg02, objptr
1c4d0     0A 1F 02 FB | 	rdlong	local01, arg02
1c4d4     09 15 52 F6 | 	abs	arg02, arg01 wc
1c4d8     0C 14 16 FD | 	qdiv	arg02, #12
1c4dc     14 00 00 FF 
1c4e0     D8 E4 85 F1 | 	sub	objptr, ##10456
1c4e4     01 12 06 F6 | 	mov	arg01, #1
1c4e8                 | ' noteexp=1+(note/12) 
1c4e8                 | ' return (2.0^noteexp)*notebase
1c4e8     18 14 62 FD | 	getqx	arg02
1c4ec     0A 13 82 F3 | 	sumc	arg01, arg02
1c4f0     09 13 52 F6 | 	abs	arg01, arg01 wc
1c4f4     1F 20 C6 C9 |  if_b	decod	local02, #31
1c4f8     00 20 06 36 |  if_ae	mov	local02, #0
1c4fc     C0 6F B0 FD | 	call	#__system___float_fromuns
1c500     10 FB 61 F5 | 	xor	result1, local02
1c504     FD 14 02 F6 | 	mov	arg02, result1
1c508     1E 12 C6 F9 | 	decod	arg01, #30
1c50c     98 82 B0 FD | 	call	#__system____builtin_powf
1c510     FD 12 02 F6 | 	mov	arg01, result1
1c514     0F 15 02 F6 | 	mov	arg02, local01
1c518     A8 73 B0 FD | 	call	#__system___float_mul
1c51c     A7 F0 03 F6 | 	mov	ptra, fp
1c520     B2 00 A0 FD | 	call	#popregs_
1c524                 | _getnoteval_ret
1c524     2D 00 64 FD | 	ret
1c528                 | 
1c528                 | ' 
1c528                 | ' 
1c528                 | ' 
1c528                 | ' sub init_error_strings
1c528                 | _init_error_strings
1c528     87 01 00 FF 
1c52c     76 00 06 F6 | 	mov	_var01, ##@LR__5451
1c530     45 00 00 FF 
1c534     AC E4 05 F1 | 	add	objptr, ##35500
1c538     F2 00 62 FC | 	wrlong	_var01, objptr
1c53c     87 01 00 FF 
1c540     77 00 06 F6 | 	mov	_var01, ##@LR__5452
1c544     04 E4 05 F1 | 	add	objptr, #4
1c548     F2 00 62 FC | 	wrlong	_var01, objptr
1c54c     87 01 00 FF 
1c550     9C 00 06 F6 | 	mov	_var01, ##@LR__5453
1c554     04 E4 05 F1 | 	add	objptr, #4
1c558     F2 00 62 FC | 	wrlong	_var01, objptr
1c55c     87 01 00 FF 
1c560     BD 00 06 F6 | 	mov	_var01, ##@LR__5454
1c564     04 E4 05 F1 | 	add	objptr, #4
1c568     F2 00 62 FC | 	wrlong	_var01, objptr
1c56c     87 01 00 FF 
1c570     D7 00 06 F6 | 	mov	_var01, ##@LR__5455
1c574     04 E4 05 F1 | 	add	objptr, #4
1c578     F2 00 62 FC | 	wrlong	_var01, objptr
1c57c     87 01 00 FF 
1c580     F3 00 06 F6 | 	mov	_var01, ##@LR__5456
1c584     04 E4 05 F1 | 	add	objptr, #4
1c588     F2 00 62 FC | 	wrlong	_var01, objptr
1c58c     87 01 00 FF 
1c590     15 01 06 F6 | 	mov	_var01, ##@LR__5457
1c594     04 E4 05 F1 | 	add	objptr, #4
1c598     F2 00 62 FC | 	wrlong	_var01, objptr
1c59c     87 01 00 FF 
1c5a0     43 01 06 F6 | 	mov	_var01, ##@LR__5458
1c5a4     04 E4 05 F1 | 	add	objptr, #4
1c5a8     F2 00 62 FC | 	wrlong	_var01, objptr
1c5ac     87 01 00 FF 
1c5b0     6E 01 06 F6 | 	mov	_var01, ##@LR__5459
1c5b4     04 E4 05 F1 | 	add	objptr, #4
1c5b8     F2 00 62 FC | 	wrlong	_var01, objptr
1c5bc     87 01 00 FF 
1c5c0     87 01 06 F6 | 	mov	_var01, ##@LR__5460
1c5c4     04 E4 05 F1 | 	add	objptr, #4
1c5c8     F2 00 62 FC | 	wrlong	_var01, objptr
1c5cc     87 01 00 FF 
1c5d0     A8 01 06 F6 | 	mov	_var01, ##@LR__5461
1c5d4     04 E4 05 F1 | 	add	objptr, #4
1c5d8     F2 00 62 FC | 	wrlong	_var01, objptr
1c5dc     87 01 00 FF 
1c5e0     BF 01 06 F6 | 	mov	_var01, ##@LR__5462
1c5e4     04 E4 05 F1 | 	add	objptr, #4
1c5e8     F2 00 62 FC | 	wrlong	_var01, objptr
1c5ec     87 01 00 FF 
1c5f0     DD 01 06 F6 | 	mov	_var01, ##@LR__5463
1c5f4     04 E4 05 F1 | 	add	objptr, #4
1c5f8     F2 00 62 FC | 	wrlong	_var01, objptr
1c5fc     88 01 00 FF 
1c600     01 00 06 F6 | 	mov	_var01, ##@LR__5464
1c604     04 E4 05 F1 | 	add	objptr, #4
1c608     F2 00 62 FC | 	wrlong	_var01, objptr
1c60c     88 01 00 FF 
1c610     28 00 06 F6 | 	mov	_var01, ##@LR__5465
1c614     04 E4 05 F1 | 	add	objptr, #4
1c618     F2 00 62 FC | 	wrlong	_var01, objptr
1c61c     88 01 00 FF 
1c620     44 00 06 F6 | 	mov	_var01, ##@LR__5466
1c624     04 E4 05 F1 | 	add	objptr, #4
1c628     F2 00 62 FC | 	wrlong	_var01, objptr
1c62c     88 01 00 FF 
1c630     55 00 06 F6 | 	mov	_var01, ##@LR__5467
1c634     04 E4 05 F1 | 	add	objptr, #4
1c638     F2 00 62 FC | 	wrlong	_var01, objptr
1c63c     88 01 00 FF 
1c640     65 00 06 F6 | 	mov	_var01, ##@LR__5468
1c644     04 E4 05 F1 | 	add	objptr, #4
1c648     F2 00 62 FC | 	wrlong	_var01, objptr
1c64c     88 01 00 FF 
1c650     80 00 06 F6 | 	mov	_var01, ##@LR__5469
1c654     04 E4 05 F1 | 	add	objptr, #4
1c658     F2 00 62 FC | 	wrlong	_var01, objptr
1c65c     88 01 00 FF 
1c660     92 00 06 F6 | 	mov	_var01, ##@LR__5470
1c664     04 E4 05 F1 | 	add	objptr, #4
1c668     F2 00 62 FC | 	wrlong	_var01, objptr
1c66c     88 01 00 FF 
1c670     AA 00 06 F6 | 	mov	_var01, ##@LR__5471
1c674     04 E4 05 F1 | 	add	objptr, #4
1c678     F2 00 62 FC | 	wrlong	_var01, objptr
1c67c     88 01 00 FF 
1c680     BE 00 06 F6 | 	mov	_var01, ##@LR__5472
1c684     04 E4 05 F1 | 	add	objptr, #4
1c688     F2 00 62 FC | 	wrlong	_var01, objptr
1c68c     88 01 00 FF 
1c690     CE 00 06 F6 | 	mov	_var01, ##@LR__5473
1c694     04 E4 05 F1 | 	add	objptr, #4
1c698     F2 00 62 FC | 	wrlong	_var01, objptr
1c69c     88 01 00 FF 
1c6a0     EB 00 06 F6 | 	mov	_var01, ##@LR__5474
1c6a4     04 E4 05 F1 | 	add	objptr, #4
1c6a8     F2 00 62 FC | 	wrlong	_var01, objptr
1c6ac     88 01 00 FF 
1c6b0     FC 00 06 F6 | 	mov	_var01, ##@LR__5475
1c6b4     04 E4 05 F1 | 	add	objptr, #4
1c6b8     F2 00 62 FC | 	wrlong	_var01, objptr
1c6bc     88 01 00 FF 
1c6c0     0D 01 06 F6 | 	mov	_var01, ##@LR__5476
1c6c4     04 E4 05 F1 | 	add	objptr, #4
1c6c8     F2 00 62 FC | 	wrlong	_var01, objptr
1c6cc     88 01 00 FF 
1c6d0     38 01 06 F6 | 	mov	_var01, ##@LR__5477
1c6d4     04 E4 05 F1 | 	add	objptr, #4
1c6d8     F2 00 62 FC | 	wrlong	_var01, objptr
1c6dc     88 01 00 FF 
1c6e0     54 01 06 F6 | 	mov	_var01, ##@LR__5478
1c6e4     04 E4 05 F1 | 	add	objptr, #4
1c6e8     F2 00 62 FC | 	wrlong	_var01, objptr
1c6ec     88 01 00 FF 
1c6f0     6A 01 06 F6 | 	mov	_var01, ##@LR__5479
1c6f4     04 E4 05 F1 | 	add	objptr, #4
1c6f8     F2 00 62 FC | 	wrlong	_var01, objptr
1c6fc     88 01 00 FF 
1c700     77 01 06 F6 | 	mov	_var01, ##@LR__5480
1c704     04 E4 05 F1 | 	add	objptr, #4
1c708     F2 00 62 FC | 	wrlong	_var01, objptr
1c70c     88 01 00 FF 
1c710     89 01 06 F6 | 	mov	_var01, ##@LR__5481
1c714     04 E4 05 F1 | 	add	objptr, #4
1c718     F2 00 62 FC | 	wrlong	_var01, objptr
1c71c     88 01 00 FF 
1c720     9A 01 06 F6 | 	mov	_var01, ##@LR__5482
1c724     04 E4 05 F1 | 	add	objptr, #4
1c728     F2 00 62 FC | 	wrlong	_var01, objptr
1c72c     88 01 00 FF 
1c730     B6 01 06 F6 | 	mov	_var01, ##@LR__5483
1c734     04 E4 05 F1 | 	add	objptr, #4
1c738     F2 00 62 FC | 	wrlong	_var01, objptr
1c73c     88 01 00 FF 
1c740     C7 01 06 F6 | 	mov	_var01, ##@LR__5484
1c744     04 E4 05 F1 | 	add	objptr, #4
1c748     F2 00 62 FC | 	wrlong	_var01, objptr
1c74c     88 01 00 FF 
1c750     D6 01 06 F6 | 	mov	_var01, ##@LR__5485
1c754     04 E4 05 F1 | 	add	objptr, #4
1c758     F2 00 62 FC | 	wrlong	_var01, objptr
1c75c     88 01 00 FF 
1c760     F1 01 06 F6 | 	mov	_var01, ##@LR__5486
1c764     04 E4 05 F1 | 	add	objptr, #4
1c768     F2 00 62 FC | 	wrlong	_var01, objptr
1c76c     89 01 00 FF 
1c770     25 00 06 F6 | 	mov	_var01, ##@LR__5487
1c774     04 E4 05 F1 | 	add	objptr, #4
1c778     F2 00 62 FC | 	wrlong	_var01, objptr
1c77c     89 01 00 FF 
1c780     3E 00 06 F6 | 	mov	_var01, ##@LR__5488
1c784     04 E4 05 F1 | 	add	objptr, #4
1c788     F2 00 62 FC | 	wrlong	_var01, objptr
1c78c     89 01 00 FF 
1c790     5A 00 06 F6 | 	mov	_var01, ##@LR__5489
1c794     04 E4 05 F1 | 	add	objptr, #4
1c798     F2 00 62 FC | 	wrlong	_var01, objptr
1c79c     89 01 00 FF 
1c7a0     78 00 06 F6 | 	mov	_var01, ##@LR__5490
1c7a4     04 E4 05 F1 | 	add	objptr, #4
1c7a8     F2 00 62 FC | 	wrlong	_var01, objptr
1c7ac     89 01 00 FF 
1c7b0     91 00 06 F6 | 	mov	_var01, ##@LR__5491
1c7b4     04 E4 05 F1 | 	add	objptr, #4
1c7b8     F2 00 62 FC | 	wrlong	_var01, objptr
1c7bc     89 01 00 FF 
1c7c0     B0 00 06 F6 | 	mov	_var01, ##@LR__5492
1c7c4     04 E4 05 F1 | 	add	objptr, #4
1c7c8     F2 00 62 FC | 	wrlong	_var01, objptr
1c7cc     89 01 00 FF 
1c7d0     BF 00 06 F6 | 	mov	_var01, ##@LR__5493
1c7d4     04 E4 05 F1 | 	add	objptr, #4
1c7d8     F2 00 62 FC | 	wrlong	_var01, objptr
1c7dc     89 01 00 FF 
1c7e0     ED 00 06 F6 | 	mov	_var01, ##@LR__5494
1c7e4     04 E4 05 F1 | 	add	objptr, #4
1c7e8     F2 00 62 FC | 	wrlong	_var01, objptr
1c7ec     89 01 00 FF 
1c7f0     FB 00 06 F6 | 	mov	_var01, ##@LR__5495
1c7f4     04 E4 05 F1 | 	add	objptr, #4
1c7f8     F2 00 62 FC | 	wrlong	_var01, objptr
1c7fc     89 01 00 FF 
1c800     10 01 06 F6 | 	mov	_var01, ##@LR__5496
1c804     04 E4 05 F1 | 	add	objptr, #4
1c808     F2 00 62 FC | 	wrlong	_var01, objptr
1c80c     89 01 00 FF 
1c810     34 01 06 F6 | 	mov	_var01, ##@LR__5497
1c814     04 E4 05 F1 | 	add	objptr, #4
1c818     F2 00 62 FC | 	wrlong	_var01, objptr
1c81c     89 01 00 FF 
1c820     4B 01 06 F6 | 	mov	_var01, ##@LR__5498
1c824     04 E4 05 F1 | 	add	objptr, #4
1c828     F2 00 62 FC | 	wrlong	_var01, objptr
1c82c     89 01 00 FF 
1c830     5E 01 06 F6 | 	mov	_var01, ##@LR__5499
1c834     04 E4 05 F1 | 	add	objptr, #4
1c838     F2 00 62 FC | 	wrlong	_var01, objptr
1c83c     89 01 00 FF 
1c840     75 01 06 F6 | 	mov	_var01, ##@LR__5500
1c844     04 E4 05 F1 | 	add	objptr, #4
1c848     F2 00 62 FC | 	wrlong	_var01, objptr
1c84c     89 01 00 FF 
1c850     8E 01 06 F6 | 	mov	_var01, ##@LR__5501
1c854     04 E4 05 F1 | 	add	objptr, #4
1c858     F2 00 62 FC | 	wrlong	_var01, objptr
1c85c     45 00 00 FF 
1c860     74 E5 85 F1 | 	sub	objptr, ##35700
1c864                 | _init_error_strings_ret
1c864     2D 00 64 FD | 	ret
1c868                 | 
1c868                 | '         
1c868                 | ' sub printerror(err as integer)
1c868                 | _printerror
1c868     01 4A 05 F6 | 	mov	COUNT_, #1
1c86c     A8 00 A0 FD | 	call	#pushregs_
1c870     09 1F 02 F6 | 	mov	local01, arg01
1c874     89 01 00 FF 
1c878     B0 13 06 F6 | 	mov	arg01, ##@LR__5502
1c87c     A8 31 B0 FD | 	call	#_hg010b_spin2_write
1c880     0F 13 02 F6 | 	mov	arg01, local01
1c884     10 35 B0 FD | 	call	#_hg010b_spin2_inttostr
1c888     FD 12 02 F6 | 	mov	arg01, result1
1c88c     98 31 B0 FD | 	call	#_hg010b_spin2_write
1c890     89 01 00 FF 
1c894     B7 13 06 F6 | 	mov	arg01, ##@LR__5503
1c898     8C 31 B0 FD | 	call	#_hg010b_spin2_write
1c89c     02 1E 66 F0 | 	shl	local01, #2
1c8a0     45 00 00 FF 
1c8a4     AC E4 05 F1 | 	add	objptr, ##35500
1c8a8     F2 1E 02 F1 | 	add	local01, objptr
1c8ac     0F 13 02 FB | 	rdlong	arg01, local01
1c8b0     45 00 00 FF 
1c8b4     AC E4 85 F1 | 	sub	objptr, ##35500
1c8b8                 | ' 
1c8b8                 | ' write(text)
1c8b8     6C 31 B0 FD | 	call	#_hg010b_spin2_write
1c8bc                 | ' crlf
1c8bc     34 34 B0 FD | 	call	#_hg010b_spin2_crlf
1c8c0     A7 F0 03 F6 | 	mov	ptra, fp
1c8c4     B2 00 A0 FD | 	call	#popregs_
1c8c8                 | _printerror_ret
1c8c8     2D 00 64 FD | 	ret
1c8cc                 | 
1c8cc                 | ' 
1c8cc                 | ' '' ------------------------------- Hardware start/stop/initialization 
1c8cc                 | ' 
1c8cc                 | ' sub startpsram
1c8cc                 | _startpsram
1c8cc     00 12 06 F6 | 	mov	arg01, #0
1c8d0     0A 14 C6 F9 | 	decod	arg02, #10
1c8d4     0B 16 06 F6 | 	mov	arg03, #11
1c8d8     07 18 06 F6 | 	mov	arg04, #7
1c8dc     0B 00 00 FF 
1c8e0     CC E4 05 F1 | 	add	objptr, ##5836
1c8e4     BC 35 B0 FD | 	call	#_psram_spin2_startx
1c8e8     2B 00 00 FF 
1c8ec     6C E5 05 F1 | 	add	objptr, ##22380
1c8f0     F2 FA 61 FC | 	wrlong	result1, objptr
1c8f4                 | '     return $7FF00 + cog*12
1c8f4     0C E4 05 F1 | 	add	objptr, #12
1c8f8     FF 03 80 FF 
1c8fc     F2 00 6A FC | 	wrlong	##524032, objptr
1c900     37 00 00 FF 
1c904     44 E4 85 F1 | 	sub	objptr, ##28228
1c908                 | _startpsram_ret
1c908     2D 00 64 FD | 	ret
1c90c                 | 
1c90c                 | ' 
1c90c                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
1c90c                 | _startvideo
1c90c     01 4A 05 F6 | 	mov	COUNT_, #1
1c910     A8 00 A0 FD | 	call	#pushregs_
1c914     37 00 00 FF 
1c918     44 E4 05 F1 | 	add	objptr, ##28228
1c91c     F2 18 02 FB | 	rdlong	arg04, objptr
1c920     37 00 00 FF 
1c924     44 E4 85 F1 | 	sub	objptr, ##28228
1c928     0A 13 02 F6 | 	mov	arg01, arg02
1c92c     0C 15 02 F6 | 	mov	arg02, arg04
1c930     EC 18 B0 FD | 	call	#_hg010b_spin2_start
1c934     37 00 00 FF 
1c938     30 E4 05 F1 | 	add	objptr, ##28208
1c93c     F2 FA 61 FC | 	wrlong	result1, objptr
1c940                 | ' 
1c940                 | ' videocog=v.start(pin,mbox)
1c940                 | ' 
1c940                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1c940     00 1E 06 F6 | 	mov	local01, #0
1c944     2B 00 00 FF 
1c948     64 E5 85 F1 | 	sub	objptr, ##22372
1c94c                 | LR__2280
1c94c     0F 13 02 F6 | 	mov	arg01, local01
1c950     00 28 00 FF 
1c954     00 14 06 F6 | 	mov	arg02, ##5242880
1c958     A0 39 B0 FD | 	call	#_psram_spin2_setQos
1c95c     01 1E 06 F1 | 	add	local01, #1
1c960     08 1E 56 F2 | 	cmps	local01, #8 wc
1c964     E4 FF 9F CD |  if_b	jmp	#LR__2280
1c968     2B 00 00 FF 
1c96c     64 E5 05 F1 | 	add	objptr, ##22372
1c970     F2 12 02 FB | 	rdlong	arg01, objptr
1c974     7A 00 02 FF 
1c978     00 14 06 F6 | 	mov	arg02, ##67171328
1c97c     2B 00 00 FF 
1c980     64 E5 85 F1 | 	sub	objptr, ##22372
1c984     74 39 B0 FD | 	call	#_psram_spin2_setQos
1c988     0B 00 00 FF 
1c98c     CC E4 85 F1 | 	sub	objptr, ##5836
1c990                 | ' psram.setQoS(videocog, $0400f400) 
1c990                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1c990     F2 14 02 F6 | 	mov	arg02, objptr
1c994     00 78 04 FF 
1c998     00 14 46 F5 | 	or	arg02, ##149946368
1c99c     00 16 06 F6 | 	mov	arg03, #0
1c9a0     00 18 06 F6 | 	mov	arg04, #0
1c9a4     00 12 06 F6 | 	mov	arg01, #0
1c9a8     0C 4E B0 FD | 	call	#__system___basic_open
1c9ac                 | ' return videocog
1c9ac     37 00 00 FF 
1c9b0     30 E4 05 F1 | 	add	objptr, ##28208
1c9b4     F2 FA 01 FB | 	rdlong	result1, objptr
1c9b8     37 00 00 FF 
1c9bc     30 E4 85 F1 | 	sub	objptr, ##28208
1c9c0     A7 F0 03 F6 | 	mov	ptra, fp
1c9c4     B2 00 A0 FD | 	call	#popregs_
1c9c8                 | _startvideo_ret
1c9c8     2D 00 64 FD | 	ret
1c9cc                 | 
1c9cc                 | ' 
1c9cc                 | ' 
1c9cc                 | ' 
1c9cc                 | ' 
1c9cc                 | ' '' ------------------------------- Convenient psram peek/poke
1c9cc                 | ' 
1c9cc                 | ' sub pslpoke(addr as ulong,value as ulong)
1c9cc                 | _pslpoke
1c9cc     00 4A 05 F6 | 	mov	COUNT_, #0
1c9d0     A8 00 A0 FD | 	call	#pushregs_
1c9d4     08 F0 07 F1 | 	add	ptra, #8
1c9d8     A7 12 62 FC | 	wrlong	arg01, fp
1c9dc     04 4E 05 F1 | 	add	fp, #4
1c9e0     A7 14 62 FC | 	wrlong	arg02, fp
1c9e4     A7 12 02 F6 | 	mov	arg01, fp
1c9e8     04 4E 85 F1 | 	sub	fp, #4
1c9ec     A7 14 02 FB | 	rdlong	arg02, fp
1c9f0     04 16 06 F6 | 	mov	arg03, #4
1c9f4     0B 00 00 FF 
1c9f8     CC E4 05 F1 | 	add	objptr, ##5836
1c9fc     6C 37 B0 FD | 	call	#_psram_spin2_write
1ca00     0B 00 00 FF 
1ca04     CC E4 85 F1 | 	sub	objptr, ##5836
1ca08     A7 F0 03 F6 | 	mov	ptra, fp
1ca0c     B2 00 A0 FD | 	call	#popregs_
1ca10                 | _pslpoke_ret
1ca10     2D 00 64 FD | 	ret
1ca14                 | 
1ca14                 | ' 
1ca14                 | ' sub psdpoke(addr as ulong,value as ulong)
1ca14                 | _psdpoke
1ca14     00 4A 05 F6 | 	mov	COUNT_, #0
1ca18     A8 00 A0 FD | 	call	#pushregs_
1ca1c     08 F0 07 F1 | 	add	ptra, #8
1ca20     A7 12 62 FC | 	wrlong	arg01, fp
1ca24     04 4E 05 F1 | 	add	fp, #4
1ca28     A7 14 62 FC | 	wrlong	arg02, fp
1ca2c     A7 12 02 F6 | 	mov	arg01, fp
1ca30     04 4E 85 F1 | 	sub	fp, #4
1ca34     A7 14 02 FB | 	rdlong	arg02, fp
1ca38     02 16 06 F6 | 	mov	arg03, #2
1ca3c     0B 00 00 FF 
1ca40     CC E4 05 F1 | 	add	objptr, ##5836
1ca44     24 37 B0 FD | 	call	#_psram_spin2_write
1ca48     0B 00 00 FF 
1ca4c     CC E4 85 F1 | 	sub	objptr, ##5836
1ca50     A7 F0 03 F6 | 	mov	ptra, fp
1ca54     B2 00 A0 FD | 	call	#popregs_
1ca58                 | _psdpoke_ret
1ca58     2D 00 64 FD | 	ret
1ca5c                 | 
1ca5c                 | ' 
1ca5c                 | ' sub pspoke(addr as ulong,value as ulong)
1ca5c                 | _pspoke
1ca5c     00 4A 05 F6 | 	mov	COUNT_, #0
1ca60     A8 00 A0 FD | 	call	#pushregs_
1ca64     08 F0 07 F1 | 	add	ptra, #8
1ca68     A7 12 62 FC | 	wrlong	arg01, fp
1ca6c     04 4E 05 F1 | 	add	fp, #4
1ca70     A7 14 62 FC | 	wrlong	arg02, fp
1ca74     A7 12 02 F6 | 	mov	arg01, fp
1ca78     04 4E 85 F1 | 	sub	fp, #4
1ca7c     A7 14 02 FB | 	rdlong	arg02, fp
1ca80     01 16 06 F6 | 	mov	arg03, #1
1ca84     0B 00 00 FF 
1ca88     CC E4 05 F1 | 	add	objptr, ##5836
1ca8c     DC 36 B0 FD | 	call	#_psram_spin2_write
1ca90     0B 00 00 FF 
1ca94     CC E4 85 F1 | 	sub	objptr, ##5836
1ca98     A7 F0 03 F6 | 	mov	ptra, fp
1ca9c     B2 00 A0 FD | 	call	#popregs_
1caa0                 | _pspoke_ret
1caa0     2D 00 64 FD | 	ret
1caa4                 | 
1caa4                 | ' 
1caa4                 | ' function pspeek(adr as ulong) as ubyte
1caa4                 | _pspeek
1caa4     00 4A 05 F6 | 	mov	COUNT_, #0
1caa8     A8 00 A0 FD | 	call	#pushregs_
1caac     0C F0 07 F1 | 	add	ptra, #12
1cab0     04 4E 05 F1 | 	add	fp, #4
1cab4     A7 12 62 FC | 	wrlong	arg01, fp
1cab8     04 4E 05 F1 | 	add	fp, #4
1cabc     A7 12 02 F6 | 	mov	arg01, fp
1cac0     04 4E 85 F1 | 	sub	fp, #4
1cac4     A7 14 02 FB | 	rdlong	arg02, fp
1cac8     04 4E 85 F1 | 	sub	fp, #4
1cacc     01 16 06 F6 | 	mov	arg03, #1
1cad0     0B 00 00 FF 
1cad4     CC E4 05 F1 | 	add	objptr, ##5836
1cad8     F4 35 B0 FD | 	call	#_psram_spin2_read1
1cadc     0B 00 00 FF 
1cae0     CC E4 85 F1 | 	sub	objptr, ##5836
1cae4                 | ' psram.read1(varptr(res),adr,1)
1cae4                 | ' return res
1cae4     08 4E 05 F1 | 	add	fp, #8
1cae8     A7 FA C1 FA | 	rdbyte	result1, fp
1caec     08 4E 85 F1 | 	sub	fp, #8
1caf0     A7 F0 03 F6 | 	mov	ptra, fp
1caf4     B2 00 A0 FD | 	call	#popregs_
1caf8                 | _pspeek_ret
1caf8     2D 00 64 FD | 	ret
1cafc                 | 
1cafc                 | ' 
1cafc                 | ' function pslpeek(adr as ulong) as ulong
1cafc                 | _pslpeek
1cafc     00 4A 05 F6 | 	mov	COUNT_, #0
1cb00     A8 00 A0 FD | 	call	#pushregs_
1cb04     0C F0 07 F1 | 	add	ptra, #12
1cb08     04 4E 05 F1 | 	add	fp, #4
1cb0c     A7 12 62 FC | 	wrlong	arg01, fp
1cb10     04 4E 05 F1 | 	add	fp, #4
1cb14     A7 12 02 F6 | 	mov	arg01, fp
1cb18     04 4E 85 F1 | 	sub	fp, #4
1cb1c     A7 14 02 FB | 	rdlong	arg02, fp
1cb20     04 4E 85 F1 | 	sub	fp, #4
1cb24     04 16 06 F6 | 	mov	arg03, #4
1cb28     0B 00 00 FF 
1cb2c     CC E4 05 F1 | 	add	objptr, ##5836
1cb30     9C 35 B0 FD | 	call	#_psram_spin2_read1
1cb34     0B 00 00 FF 
1cb38     CC E4 85 F1 | 	sub	objptr, ##5836
1cb3c                 | ' psram.read1(varptr(res),adr,4)
1cb3c                 | ' return res
1cb3c     08 4E 05 F1 | 	add	fp, #8
1cb40     A7 FA 01 FB | 	rdlong	result1, fp
1cb44     08 4E 85 F1 | 	sub	fp, #8
1cb48     A7 F0 03 F6 | 	mov	ptra, fp
1cb4c     B2 00 A0 FD | 	call	#popregs_
1cb50                 | _pslpeek_ret
1cb50     2D 00 64 FD | 	ret
1cb54                 | 
1cb54                 | ' 
1cb54                 | ' function psdpeek(adr as ulong) as ulong
1cb54                 | _psdpeek
1cb54     00 4A 05 F6 | 	mov	COUNT_, #0
1cb58     A8 00 A0 FD | 	call	#pushregs_
1cb5c     0C F0 07 F1 | 	add	ptra, #12
1cb60     04 4E 05 F1 | 	add	fp, #4
1cb64     A7 12 62 FC | 	wrlong	arg01, fp
1cb68     04 4E 05 F1 | 	add	fp, #4
1cb6c     A7 12 02 F6 | 	mov	arg01, fp
1cb70     04 4E 85 F1 | 	sub	fp, #4
1cb74     A7 14 02 FB | 	rdlong	arg02, fp
1cb78     04 4E 85 F1 | 	sub	fp, #4
1cb7c     02 16 06 F6 | 	mov	arg03, #2
1cb80     0B 00 00 FF 
1cb84     CC E4 05 F1 | 	add	objptr, ##5836
1cb88     44 35 B0 FD | 	call	#_psram_spin2_read1
1cb8c     0B 00 00 FF 
1cb90     CC E4 85 F1 | 	sub	objptr, ##5836
1cb94                 | ' psram.read1(varptr(res),adr,2)
1cb94                 | ' return res
1cb94     08 4E 05 F1 | 	add	fp, #8
1cb98     A7 FA E1 FA | 	rdword	result1, fp
1cb9c     08 4E 85 F1 | 	sub	fp, #8
1cba0     A7 F0 03 F6 | 	mov	ptra, fp
1cba4     B2 00 A0 FD | 	call	#popregs_
1cba8                 | _psdpeek_ret
1cba8     2D 00 64 FD | 	ret
1cbac                 | 
1cbac                 | ' 
1cbac                 | ' '' ------------------------------- USB keyboard scan to char translator
1cbac                 | ' 
1cbac                 | ' function scantochar(key)
1cbac                 | _scantochar
1cbac                 | ' 
1cbac                 | ' select case (key shr 8) and 255
1cbac     09 01 02 F6 | 	mov	_var01, arg01
1cbb0     08 00 C6 F0 | 	sar	_var01, #8
1cbb4     FF 00 0E F5 | 	and	_var01, #255 wz
1cbb8     24 00 90 AD |  if_e	jmp	#LR__2290
1cbbc     02 00 0E F2 | 	cmp	_var01, #2 wz
1cbc0     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1cbc4     30 00 90 AD |  if_e	jmp	#LR__2291
1cbc8     40 00 0E F2 | 	cmp	_var01, #64 wz
1cbcc     44 00 90 AD |  if_e	jmp	#LR__2292
1cbd0     42 00 0E F2 | 	cmp	_var01, #66 wz
1cbd4     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1cbd8     70 00 90 5D |  if_ne	jmp	#LR__2294
1cbdc     50 00 90 FD | 	jmp	#LR__2293
1cbe0                 | LR__2290
1cbe0     09 FB 01 F6 | 	mov	result1, arg01
1cbe4     7F FA 05 F5 | 	and	result1, #127
1cbe8     02 FA 65 F0 | 	shl	result1, #2
1cbec     F5 FA 01 F1 | 	add	result1, ptr__dat__
1cbf0     FD FA C1 FA | 	rdbyte	result1, result1
1cbf4     54 00 90 FD | 	jmp	#_scantochar_ret
1cbf8                 | LR__2291
1cbf8     09 FB 01 F6 | 	mov	result1, arg01
1cbfc     7F FA 05 F5 | 	and	result1, #127
1cc00     02 FA 65 F0 | 	shl	result1, #2
1cc04     01 FA 05 F1 | 	add	result1, #1
1cc08     F5 FA 01 F1 | 	add	result1, ptr__dat__
1cc0c     FD FA C1 FA | 	rdbyte	result1, result1
1cc10     38 00 90 FD | 	jmp	#_scantochar_ret
1cc14                 | LR__2292
1cc14     09 FB 01 F6 | 	mov	result1, arg01
1cc18     7F FA 05 F5 | 	and	result1, #127
1cc1c     02 FA 65 F0 | 	shl	result1, #2
1cc20     02 FA 05 F1 | 	add	result1, #2
1cc24     F5 FA 01 F1 | 	add	result1, ptr__dat__
1cc28     FD FA C1 FA | 	rdbyte	result1, result1
1cc2c     1C 00 90 FD | 	jmp	#_scantochar_ret
1cc30                 | LR__2293
1cc30     09 FB 01 F6 | 	mov	result1, arg01
1cc34     7F FA 05 F5 | 	and	result1, #127
1cc38     02 FA 65 F0 | 	shl	result1, #2
1cc3c     03 FA 05 F1 | 	add	result1, #3
1cc40     F5 FA 01 F1 | 	add	result1, ptr__dat__
1cc44     FD FA C1 FA | 	rdbyte	result1, result1
1cc48     00 00 90 FD | 	jmp	#_scantochar_ret
1cc4c                 | LR__2294
1cc4c                 | _scantochar_ret
1cc4c     2D 00 64 FD | 	ret
1cc50                 | 
1cc50                 | _program
1cc50     13 4A 05 F6 | 	mov	COUNT_, #19
1cc54     A8 00 A0 FD | 	call	#pushregs_
1cc58     70 FC BF FD | 	call	#_startpsram
1cc5c     40 12 06 F6 | 	mov	arg01, #64
1cc60     00 14 06 F6 | 	mov	arg02, #0
1cc64     00 16 06 F6 | 	mov	arg03, #0
1cc68     A0 FC BF FD | 	call	#_startvideo
1cc6c     37 00 00 FF 
1cc70     44 E4 05 F1 | 	add	objptr, ##28228
1cc74     F2 12 02 FB | 	rdlong	arg01, objptr
1cc78     00 14 06 F6 | 	mov	arg02, #0
1cc7c     FB 03 00 FF 
1cc80     00 17 06 F6 | 	mov	arg03, ##521984
1cc84     2B 00 00 FF 
1cc88     78 E5 85 F1 | 	sub	objptr, ##22392
1cc8c     1C 3A B0 FD | 	call	#_audio096_spin2_start
1cc90     FE 1C 02 F6 | 	mov	arg06, result2
1cc94     2B 00 00 FF 
1cc98     60 E5 05 F1 | 	add	objptr, ##22368
1cc9c     F2 FA 61 FC | 	wrlong	result1, objptr
1cca0     14 E4 05 F1 | 	add	objptr, #20
1cca4     F2 1C 62 FC | 	wrlong	arg06, objptr
1cca8     37 00 00 FF 
1ccac     40 E4 85 F1 | 	sub	objptr, ##28224
1ccb0     32 12 06 F6 | 	mov	arg01, #50
1ccb4     4C 43 B0 FD | 	call	#__system___waitms
1ccb8     37 00 00 FF 
1ccbc     40 E4 05 F1 | 	add	objptr, ##28224
1ccc0     F2 12 02 FB | 	rdlong	arg01, objptr
1ccc4     37 00 00 FF 
1ccc8     40 E4 85 F1 | 	sub	objptr, ##28224
1cccc     14 12 06 F1 | 	add	arg01, #20
1ccd0     20 00 80 FF 
1ccd4     09 01 58 FC | 	wrword	##16384, arg01
1ccd8     28 37 B0 FD | 	call	#_usbnew_spin2_start
1ccdc     37 00 00 FF 
1cce0     34 E4 05 F1 | 	add	objptr, ##28212
1cce4     F2 FA 61 FC | 	wrlong	result1, objptr
1cce8                 | '   mouse_limits[0] := xlim
1cce8     0F 00 00 FF 
1ccec     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
1ccf0     01 00 80 FF 
1ccf4     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1ccf8                 | '   mouse_limits[1] := ylim
1ccf8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1ccfc     01 00 80 FF 
1cd00     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
1cd04     36 00 00 FF 
1cd08     23 E5 85 F1 | 	sub	objptr, ##27939
1cd0c     F2 12 02 F6 | 	mov	arg01, objptr
1cd10     11 E5 85 F1 | 	sub	objptr, #273
1cd14     C4 12 06 F1 | 	add	arg01, #196
1cd18                 | '   mouse_outptr := ptr
1cd18     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1cd1c     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
1cd20     0F 00 00 FF 
1cd24     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1cd28     0E 00 00 FF 
1cd2c     B6 EA 05 F1 | 	add	ptr__dat__, ##7350
1cd30     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1cd34     0E 00 00 FF 
1cd38     B6 EA 85 F1 | 	sub	ptr__dat__, ##7350
1cd3c     10 12 06 F6 | 	mov	arg01, #16
1cd40     74 1B B0 FD | 	call	#_hg010b_spin2_setspriteptr
1cd44     10 12 06 F6 | 	mov	arg01, #16
1cd48     20 14 06 F6 | 	mov	arg02, #32
1cd4c     20 16 06 F6 | 	mov	arg03, #32
1cd50     F4 1B B0 FD | 	call	#_hg010b_spin2_setspritesize
1cd54     09 12 C6 F9 | 	decod	arg01, #9
1cd58     2C 15 06 F6 | 	mov	arg02, #300
1cd5c     FC 37 B0 FD | 	call	#_usbnew_spin2_mouse_move
1cd60     F2 1C 02 F6 | 	mov	arg06, objptr
1cd64     58 00 00 FF 
1cd68     50 E5 05 F1 | 	add	objptr, ##45392
1cd6c     F2 1A 02 F6 | 	mov	arg05, objptr
1cd70     0D 1D 62 FC | 	wrlong	arg06, arg05
1cd74     04 1A 06 F1 | 	add	arg05, #4
1cd78     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
1cd7c     EF 14 02 F6 | 	mov	arg02, entryptr__
1cd80     F2 1E 02 F6 | 	mov	local01, objptr
1cd84     1E FA 05 F6 | 	mov	result1, #30
1cd88     28 1E 62 FD | 	setq	local01
1cd8c     0A FB F1 FC | 	coginit	result1, arg02 wc
1cd90     01 FA 65 C6 |  if_b	neg	result1, #1
1cd94     04 E4 85 F1 | 	sub	objptr, #4
1cd98     F2 FA 61 FC | 	wrlong	result1, objptr
1cd9c     01 00 00 FF 
1cda0     90 E4 05 F1 | 	add	objptr, ##656
1cda4     F2 00 68 FC | 	wrlong	#0, objptr
1cda8     22 00 00 FF 
1cdac     78 E5 85 F1 | 	sub	objptr, ##17784
1cdb0     F2 04 68 FC | 	wrlong	#2, objptr
1cdb4     04 E4 05 F1 | 	add	objptr, #4
1cdb8     F2 26 69 FC | 	wrlong	#147, objptr
1cdbc     04 E4 05 F1 | 	add	objptr, #4
1cdc0     F2 34 69 FC | 	wrlong	#154, objptr
1cdc4     04 E4 05 F1 | 	add	objptr, #4
1cdc8     F2 08 68 FC | 	wrlong	#4, objptr
1cdcc     04 E4 85 F1 | 	sub	objptr, #4
1cdd0     F2 1C 02 FB | 	rdlong	arg06, objptr
1cdd4     14 E4 85 F1 | 	sub	objptr, #20
1cdd8     F2 1C 62 FC | 	wrlong	arg06, objptr
1cddc     04 E4 05 F1 | 	add	objptr, #4
1cde0     F2 00 68 FC | 	wrlong	#0, objptr
1cde4     04 E4 05 F1 | 	add	objptr, #4
1cde8     F2 00 68 FC | 	wrlong	#0, objptr
1cdec     21 00 00 FF 
1cdf0     E8 E4 05 F1 | 	add	objptr, ##17128
1cdf4     F2 02 68 FC | 	wrlong	#1, objptr
1cdf8     01 00 00 FF 
1cdfc     9C E4 05 F1 | 	add	objptr, ##668
1ce00     F2 00 68 FC | 	wrlong	#0, objptr
1ce04     01 00 00 FF 
1ce08     00 EA 05 F1 | 	add	ptr__dat__, ##512
1ce0c     08 E4 05 F1 | 	add	objptr, #8
1ce10     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1ce14     04 E4 85 F1 | 	sub	objptr, #4
1ce18     03 00 80 FF 
1ce1c     F2 3C 69 FC | 	wrlong	##1694, objptr
1ce20     14 00 00 FF 
1ce24     54 E5 85 F1 | 	sub	objptr, ##10580
1ce28     F2 18 68 FC | 	wrlong	#12, objptr
1ce2c     45 00 00 FF 
1ce30     94 E4 85 F1 | 	sub	objptr, ##35476
1ce34     01 00 00 FF 
1ce38     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1ce3c     28 DB BF FD | 	call	#_init_commands
1ce40     E4 F6 BF FD | 	call	#_init_error_strings
1ce44     E0 ED BF FD | 	call	#_init_audio
1ce48     18 25 BF FD | 	call	#_do_new
1ce4c     37 00 00 FF 
1ce50     6C E4 05 F1 | 	add	objptr, ##28268
1ce54     F2 12 02 FB | 	rdlong	arg01, objptr
1ce58     04 E4 85 F1 | 	sub	objptr, #4
1ce5c     F2 14 02 FB | 	rdlong	arg02, objptr
1ce60     37 00 00 FF 
1ce64     68 E4 85 F1 | 	sub	objptr, ##28264
1ce68     FC 27 B0 FD | 	call	#_hg010b_spin2_cls
1ce6c     37 00 00 FF 
1ce70     70 E4 05 F1 | 	add	objptr, ##28272
1ce74     F2 12 02 FB | 	rdlong	arg01, objptr
1ce78     37 00 00 FF 
1ce7c     70 E4 85 F1 | 	sub	objptr, ##28272
1ce80     94 26 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1ce84                 | ' 
1ce84                 | ' leading_spaces:=amount
1ce84     01 00 00 FF 
1ce88     B6 E4 05 F1 | 	add	objptr, ##694
1ce8c     F2 04 68 FC | 	wrlong	#2, objptr
1ce90     01 00 00 FF 
1ce94     B6 E4 85 F1 | 	sub	objptr, ##694
1ce98     89 01 00 FF 
1ce9c     BA 21 06 F6 | 	mov	local02, ##@LR__5504
1cea0     3D 12 06 F6 | 	mov	arg01, #61
1cea4     3C 14 06 F6 | 	mov	arg02, #60
1cea8     3B 16 06 F6 | 	mov	arg03, #59
1ceac     3A 18 06 F6 | 	mov	arg04, #58
1ceb0     F8 88 B0 FD | 	call	#__system___vfs_open_sdcardx
1ceb4     FD 14 02 F6 | 	mov	arg02, result1
1ceb8     10 13 02 F6 | 	mov	arg01, local02
1cebc     1C 42 B0 FD | 	call	#__system___mount
1cec0     89 01 00 FF 
1cec4     BE 13 06 F6 | 	mov	arg01, ##@LR__5505
1cec8     D0 44 B0 FD | 	call	#__system___chdir
1cecc     89 01 00 FF 
1ced0     C6 21 06 F6 | 	mov	local02, ##@LR__5506
1ced4     52 00 00 FF 
1ced8     C8 E4 05 F1 | 	add	objptr, ##42184
1cedc     F2 20 62 FC | 	wrlong	local02, objptr
1cee0     1B 00 00 FF 
1cee4     64 E4 85 F1 | 	sub	objptr, ##13924
1cee8     F2 12 02 FB | 	rdlong	arg01, objptr
1ceec     37 00 00 FF 
1cef0     64 E4 85 F1 | 	sub	objptr, ##28260
1cef4     01 12 66 F0 | 	shl	arg01, #1
1cef8     01 14 06 F6 | 	mov	arg02, #1
1cefc     58 26 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1cf00                 | ' 
1cf00                 | ' init_commands
1cf00                 | ' init_error_strings
1cf00                 | ' init_audio
1cf00                 | ' do_new
1cf00                 | ' 
1cf00                 | ' 
1cf00                 | ' cls(ink, paper)
1cf00                 | ' v.setfontfamily(font) 				' use ST Mono font
1cf00                 | ' v.setleadingspaces(2)
1cf00                 | ' mount "/sd", _vfs_open_sdcard()
1cf00                 | ' chdir "/sd/bas"
1cf00                 | ' 
1cf00                 | ' currentdir$="/sd/bas"
1cf00                 | ' 
1cf00                 | ' position 2*editor_spaces,1 : print ver$
1cf00     00 12 06 F6 | 	mov	arg01, #0
1cf04     48 98 B0 FD | 	call	#__system___getiolock_0540
1cf08     FD 12 02 F6 | 	mov	arg01, result1
1cf0c     00 3E B0 FD | 	call	#__system___lockmem
1cf10     18 00 00 FF 
1cf14     4C EB 05 F1 | 	add	ptr__dat__, ##12620
1cf18     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1cf1c     18 00 00 FF 
1cf20     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
1cf24     00 12 06 F6 | 	mov	arg01, #0
1cf28     00 16 06 F6 | 	mov	arg03, #0
1cf2c     D4 4A B0 FD | 	call	#__system___basic_print_string
1cf30     00 12 06 F6 | 	mov	arg01, #0
1cf34     0A 14 06 F6 | 	mov	arg02, #10
1cf38     00 16 06 F6 | 	mov	arg03, #0
1cf3c     6C 4A B0 FD | 	call	#__system___basic_print_char
1cf40     00 12 06 F6 | 	mov	arg01, #0
1cf44     08 98 B0 FD | 	call	#__system___getiolock_0540
1cf48     FD 00 68 FC | 	wrlong	#0, result1
1cf4c     59 00 00 FF 
1cf50     E0 E5 05 F1 | 	add	objptr, ##46048
1cf54     F2 12 02 FB | 	rdlong	arg01, objptr
1cf58     16 00 00 FF 
1cf5c     54 E5 85 F1 | 	sub	objptr, ##11604
1cf60     F2 20 02 FB | 	rdlong	local02, objptr
1cf64     43 00 00 FF 
1cf68     8C E4 85 F1 | 	sub	objptr, ##34444
1cf6c     10 13 82 F1 | 	sub	arg01, local02
1cf70     00 14 06 F6 | 	mov	arg02, #0
1cf74     0A 16 06 F6 | 	mov	arg03, #10
1cf78     64 60 B0 FD | 	call	#__system__Number_S
1cf7c     FD 12 02 F6 | 	mov	arg01, result1
1cf80     89 01 00 FF 
1cf84     CE 15 06 F6 | 	mov	arg02, ##@LR__5507
1cf88     E0 3D B0 FD | 	call	#__system___string_concat
1cf8c     FD 20 02 F6 | 	mov	local02, result1
1cf90     58 00 00 FF 
1cf94     44 E5 05 F1 | 	add	objptr, ##45380
1cf98     F2 20 62 FC | 	wrlong	local02, objptr
1cf9c     58 00 00 FF 
1cfa0     44 E5 85 F1 | 	sub	objptr, ##45380
1cfa4                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
1cfa4     00 12 06 F6 | 	mov	arg01, #0
1cfa8     A4 97 B0 FD | 	call	#__system___getiolock_0540
1cfac     FD 12 02 F6 | 	mov	arg01, result1
1cfb0     5C 3D B0 FD | 	call	#__system___lockmem
1cfb4     58 00 00 FF 
1cfb8     44 E5 05 F1 | 	add	objptr, ##45380
1cfbc     F2 14 02 FB | 	rdlong	arg02, objptr
1cfc0     58 00 00 FF 
1cfc4     44 E5 85 F1 | 	sub	objptr, ##45380
1cfc8     00 12 06 F6 | 	mov	arg01, #0
1cfcc     00 16 06 F6 | 	mov	arg03, #0
1cfd0     30 4A B0 FD | 	call	#__system___basic_print_string
1cfd4     00 12 06 F6 | 	mov	arg01, #0
1cfd8     0A 14 06 F6 | 	mov	arg02, #10
1cfdc     00 16 06 F6 | 	mov	arg03, #0
1cfe0     C8 49 B0 FD | 	call	#__system___basic_print_char
1cfe4     00 12 06 F6 | 	mov	arg01, #0
1cfe8     64 97 B0 FD | 	call	#__system___getiolock_0540
1cfec     FD 00 68 FC | 	wrlong	#0, result1
1cff0     37 00 00 FF 
1cff4     64 E4 05 F1 | 	add	objptr, ##28260
1cff8     F2 12 02 FB | 	rdlong	arg01, objptr
1cffc     37 00 00 FF 
1d000     64 E4 85 F1 | 	sub	objptr, ##28260
1d004     01 12 66 F0 | 	shl	arg01, #1
1d008     04 14 06 F6 | 	mov	arg02, #4
1d00c     48 25 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1d010                 | ' position 2*editor_spaces,4 : print "Ready"
1d010     00 12 06 F6 | 	mov	arg01, #0
1d014     38 97 B0 FD | 	call	#__system___getiolock_0540
1d018     FD 12 02 F6 | 	mov	arg01, result1
1d01c     F0 3C B0 FD | 	call	#__system___lockmem
1d020     89 01 00 FF 
1d024     E0 15 06 F6 | 	mov	arg02, ##@LR__5508
1d028     00 12 06 F6 | 	mov	arg01, #0
1d02c     00 16 06 F6 | 	mov	arg03, #0
1d030     D0 49 B0 FD | 	call	#__system___basic_print_string
1d034     FD 22 02 F6 | 	mov	local03, result1
1d038     00 12 06 F6 | 	mov	arg01, #0
1d03c     0A 14 06 F6 | 	mov	arg02, #10
1d040     00 16 06 F6 | 	mov	arg03, #0
1d044     64 49 B0 FD | 	call	#__system___basic_print_char
1d048     01 24 06 F6 | 	mov	local04, #1
1d04c     00 12 06 F6 | 	mov	arg01, #0
1d050     FC 96 B0 FD | 	call	#__system___getiolock_0540
1d054     FD 00 68 FC | 	wrlong	#0, result1
1d058     00 26 06 F6 | 	mov	local05, #0
1d05c     00 14 06 F6 | 	mov	arg02, #0
1d060     01 14 D6 F7 | 	test	arg02, #1 wc
1d064     5A 4C 64 FD | 	drvc	#38
1d068     01 14 D6 F7 | 	test	arg02, #1 wc
1d06c     5A 4E 64 FD | 	drvc	#39
1d070     89 01 00 FF 
1d074     E6 21 06 F6 | 	mov	local02, ##@LR__5509
1d078     5A 00 00 FF 
1d07c     0C E4 05 F1 | 	add	objptr, ##46092
1d080     F2 20 62 FC | 	wrlong	local02, objptr
1d084     04 E4 05 F1 | 	add	objptr, #4
1d088     FF FF FF FF 
1d08c     F2 FE 6B FC | 	wrlong	##-1, objptr
1d090     5A 00 00 FF 
1d094     10 E4 85 F1 | 	sub	objptr, ##46096
1d098                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
1d098                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1d098                 | ' 
1d098                 | ' loadname="noname.bas"
1d098                 | ' do_insert=-1
1d098                 | ' 
1d098                 | ' 
1d098                 | ' '-------------------------------------------------------------------------------------------------------- 
1d098                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1d098                 | ' '--------------------------------------------------------------------------------------------------------
1d098                 | ' 
1d098                 | ' do
1d098                 | LR__2300
1d098     01 12 06 F6 | 	mov	arg01, #1
1d09c     58 25 B0 FD | 	call	#_hg010b_spin2_waitvbl
1d0a0     07 12 06 F6 | 	mov	arg01, #7
1d0a4     0B 00 00 FF 
1d0a8     CC E4 05 F1 | 	add	objptr, ##5836
1d0ac     60 39 B0 FD | 	call	#_audio096_spin2_stop
1d0b0     0B 00 00 FF 
1d0b4     CC E4 85 F1 | 	sub	objptr, ##5836
1d0b8     40 34 B0 FD | 	call	#_usbnew_spin2_get_key
1d0bc     45 00 00 FF 
1d0c0     A4 E4 05 F1 | 	add	objptr, ##35492
1d0c4     F2 FA 61 FC | 	wrlong	result1, objptr
1d0c8                 | '   return hkbd_led_rep
1d0c8     13 00 00 FF 
1d0cc     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
1d0d0     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
1d0d4     13 00 00 FF 
1d0d8     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
1d0dc     14 00 00 FF 
1d0e0     70 E5 05 F1 | 	add	objptr, ##10608
1d0e4     F2 FA 61 FC | 	wrlong	result1, objptr
1d0e8                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
1d0e8     14 00 00 FF 
1d0ec     70 E5 85 F1 | 	sub	objptr, ##10608
1d0f0     F2 20 02 FB | 	rdlong	local02, objptr
1d0f4     45 00 00 FF 
1d0f8     A4 E4 85 F1 | 	sub	objptr, ##35492
1d0fc     01 20 16 F2 | 	cmp	local02, #1 wc
1d100     BC 00 90 CD |  if_b	jmp	#LR__2301
1d104     45 00 00 FF 
1d108     A4 E4 05 F1 | 	add	objptr, ##35492
1d10c     F2 24 02 FB | 	rdlong	local04, objptr
1d110     45 00 00 FF 
1d114     A4 E4 85 F1 | 	sub	objptr, ##35492
1d118     12 23 02 F6 | 	mov	local03, local04
1d11c     04 22 16 F2 | 	cmp	local03, #4 wc
1d120     9C 00 90 3D |  if_ae	jmp	#LR__2301
1d124     58 00 00 FF 
1d128     48 E5 05 F1 | 	add	objptr, ##45384
1d12c     F2 1E 02 FB | 	rdlong	local01, objptr
1d130     58 00 00 FF 
1d134     48 E5 85 F1 | 	sub	objptr, ##45384
1d138     0F 27 02 F6 | 	mov	local05, local01
1d13c     01 26 0E F2 | 	cmp	local05, #1 wz
1d140     7C 00 90 5D |  if_ne	jmp	#LR__2301
1d144     04 00 00 FF 
1d148     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
1d14c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1d150     04 00 00 FF 
1d154     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1d158     56 00 00 FF 
1d15c     44 22 06 F6 | 	mov	local03, ##44100
1d160     0C 24 C6 F9 | 	decod	local04, #12
1d164     00 26 06 F6 | 	mov	local05, #0
1d168     03 00 00 FF 
1d16c     DE 1E 06 F6 | 	mov	local01, ##1758
1d170     07 12 06 F6 | 	mov	arg01, #7
1d174     56 00 00 FF 
1d178     44 16 06 F6 | 	mov	arg03, ##44100
1d17c     0C 18 C6 F9 | 	decod	arg04, #12
1d180     00 1A 06 F6 | 	mov	arg05, #0
1d184     03 00 00 FF 
1d188     DE 1C 06 F6 | 	mov	arg06, ##1758
1d18c     0B 00 00 FF 
1d190     CC E4 05 F1 | 	add	objptr, ##5836
1d194     08 37 B0 FD | 	call	#_audio096_spin2_play
1d198     0B 00 00 FF 
1d19c     CC E4 85 F1 | 	sub	objptr, ##5836
1d1a0     0A 12 06 F6 | 	mov	arg01, #10
1d1a4     5C 3E B0 FD | 	call	#__system___waitms
1d1a8     07 12 06 F6 | 	mov	arg01, #7
1d1ac     0B 00 00 FF 
1d1b0     CC E4 05 F1 | 	add	objptr, ##5836
1d1b4     58 38 B0 FD | 	call	#_audio096_spin2_stop
1d1b8     0B 00 00 FF 
1d1bc     CC E4 85 F1 | 	sub	objptr, ##5836
1d1c0                 | LR__2301
1d1c0                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
1d1c0     45 00 00 FF 
1d1c4     A4 E4 05 F1 | 	add	objptr, ##35492
1d1c8     F2 20 02 FB | 	rdlong	local02, objptr
1d1cc     45 00 00 FF 
1d1d0     A4 E4 85 F1 | 	sub	objptr, ##35492
1d1d4     04 20 16 F2 | 	cmp	local02, #4 wc
1d1d8     80 00 90 CD |  if_b	jmp	#LR__2302
1d1dc     45 00 00 FF 
1d1e0     A4 E4 05 F1 | 	add	objptr, ##35492
1d1e4     F2 24 02 FB | 	rdlong	local04, objptr
1d1e8     45 00 00 FF 
1d1ec     A4 E4 85 F1 | 	sub	objptr, ##35492
1d1f0     12 23 02 F6 | 	mov	local03, local04
1d1f4     00 00 40 FF 
1d1f8     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
1d1fc     45 00 00 CF 
1d200     A4 E4 05 C1 |  if_b	add	objptr, ##35492
1d204     F2 1E 02 CB |  if_b	rdlong	local01, objptr
1d208     45 00 00 CF 
1d20c     A4 E4 85 C1 |  if_b	sub	objptr, ##35492
1d210     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
1d214     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
1d218     40 00 90 3D |  if_ae	jmp	#LR__2302
1d21c     45 00 00 FF 
1d220     A4 E4 05 F1 | 	add	objptr, ##35492
1d224     F2 20 02 FB | 	rdlong	local02, objptr
1d228     04 E4 05 F1 | 	add	objptr, #4
1d22c     F2 20 62 FC | 	wrlong	local02, objptr
1d230     14 00 00 FF 
1d234     70 E5 05 F1 | 	add	objptr, ##10608
1d238     F2 02 68 FC | 	wrlong	#1, objptr
1d23c     14 00 00 FF 
1d240     70 E5 85 F1 | 	sub	objptr, ##10608
1d244     F2 20 02 FB | 	rdlong	local02, objptr
1d248     14 00 00 FF 
1d24c     74 E5 05 F1 | 	add	objptr, ##10612
1d250     F2 20 62 FC | 	wrlong	local02, objptr
1d254     5A 00 00 FF 
1d258     1C E4 85 F1 | 	sub	objptr, ##46108
1d25c                 | LR__2302
1d25c                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
1d25c     45 00 00 FF 
1d260     A4 E4 05 F1 | 	add	objptr, ##35492
1d264     F2 20 02 FB | 	rdlong	local02, objptr
1d268     45 00 00 FF 
1d26c     A4 E4 85 F1 | 	sub	objptr, ##35492
1d270     00 00 40 FF 
1d274     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
1d278     5A 00 00 3F 
1d27c     20 E4 05 31 |  if_ae	add	objptr, ##46112
1d280     F2 00 68 3C |  if_ae	wrlong	#0, objptr
1d284     08 E4 85 31 |  if_ae	sub	objptr, #8
1d288     F2 00 68 3C |  if_ae	wrlong	#0, objptr
1d28c     5A 00 00 3F 
1d290     18 E4 85 31 |  if_ae	sub	objptr, ##46104
1d294                 | ' if key=0 andalso rpt=1 then rptcnt+=1
1d294     45 00 00 FF 
1d298     A4 E4 05 F1 | 	add	objptr, ##35492
1d29c     F2 20 0A FB | 	rdlong	local02, objptr wz
1d2a0     45 00 00 FF 
1d2a4     A4 E4 85 F1 | 	sub	objptr, ##35492
1d2a8     5A 00 00 AF 
1d2ac     18 E4 05 A1 |  if_e	add	objptr, ##46104
1d2b0     F2 24 02 AB |  if_e	rdlong	local04, objptr
1d2b4     5A 00 00 AF 
1d2b8     18 E4 85 A1 |  if_e	sub	objptr, ##46104
1d2bc     12 23 02 A6 |  if_e	mov	local03, local04
1d2c0     01 22 0E A2 |  if_e	cmp	local03, #1 wz
1d2c4     5A 00 00 AF 
1d2c8     20 E4 05 A1 |  if_e	add	objptr, ##46112
1d2cc     F2 20 02 AB |  if_e	rdlong	local02, objptr
1d2d0     01 20 06 A1 |  if_e	add	local02, #1
1d2d4     F2 20 62 AC |  if_e	wrlong	local02, objptr
1d2d8     5A 00 00 AF 
1d2dc     20 E4 85 A1 |  if_e	sub	objptr, ##46112
1d2e0                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
1d2e0     45 00 00 FF 
1d2e4     A4 E4 05 F1 | 	add	objptr, ##35492
1d2e8     F2 20 02 FB | 	rdlong	local02, objptr
1d2ec     45 00 00 FF 
1d2f0     A4 E4 85 F1 | 	sub	objptr, ##35492
1d2f4     00 00 40 FF 
1d2f8     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
1d2fc     44 00 90 3D |  if_ae	jmp	#LR__2304
1d300     5A 00 00 FF 
1d304     20 E4 05 F1 | 	add	objptr, ##46112
1d308     F2 20 02 FB | 	rdlong	local02, objptr
1d30c     5A 00 00 FF 
1d310     20 E4 85 F1 | 	sub	objptr, ##46112
1d314     19 20 0E F2 | 	cmp	local02, #25 wz
1d318     28 00 90 5D |  if_ne	jmp	#LR__2303
1d31c     45 00 00 FF 
1d320     A8 E4 05 F1 | 	add	objptr, ##35496
1d324     F2 20 02 FB | 	rdlong	local02, objptr
1d328     14 00 00 FF 
1d32c     74 E5 05 F1 | 	add	objptr, ##10612
1d330     F2 20 62 FC | 	wrlong	local02, objptr
1d334     04 E4 05 F1 | 	add	objptr, #4
1d338     F2 2A 68 FC | 	wrlong	#21, objptr
1d33c     5A 00 00 FF 
1d340     20 E4 85 F1 | 	sub	objptr, ##46112
1d344                 | LR__2303
1d344                 | LR__2304
1d344                 | ' 
1d344                 | ' 
1d344                 | ' if key3<>0 then
1d344     5A 00 00 FF 
1d348     1C E4 05 F1 | 	add	objptr, ##46108
1d34c     F2 28 0A FB | 	rdlong	local06, objptr wz
1d350     5A 00 00 FF 
1d354     1C E4 85 F1 | 	sub	objptr, ##46108
1d358     3C FD 9F AD |  if_e	jmp	#LR__2300
1d35c                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
1d35c     58 00 00 FF 
1d360     48 E5 05 F1 | 	add	objptr, ##45384
1d364     F2 20 02 FB | 	rdlong	local02, objptr
1d368     58 00 00 FF 
1d36c     48 E5 85 F1 | 	sub	objptr, ##45384
1d370     01 20 0E F2 | 	cmp	local02, #1 wz
1d374     50 00 90 5D |  if_ne	jmp	#LR__2305
1d378     59 00 00 FF 
1d37c     EC E5 05 F1 | 	add	objptr, ##46060
1d380     F2 14 02 FB | 	rdlong	arg02, objptr
1d384     56 00 00 FF 
1d388     44 22 06 F6 | 	mov	local03, ##44100
1d38c     0C 24 C6 F9 | 	decod	local04, #12
1d390     04 E4 85 F1 | 	sub	objptr, #4
1d394     F2 26 02 FB | 	rdlong	local05, objptr
1d398     01 1E 66 F6 | 	neg	local01, #1
1d39c     07 12 06 F6 | 	mov	arg01, #7
1d3a0     56 00 00 FF 
1d3a4     44 16 06 F6 | 	mov	arg03, ##44100
1d3a8     0C 18 C6 F9 | 	decod	arg04, #12
1d3ac     13 1B 02 F6 | 	mov	arg05, local05
1d3b0     01 1C 66 F6 | 	neg	arg06, #1
1d3b4     4E 00 00 FF 
1d3b8     1C E5 85 F1 | 	sub	objptr, ##40220
1d3bc     E0 34 B0 FD | 	call	#_audio096_spin2_play
1d3c0     0B 00 00 FF 
1d3c4     CC E4 85 F1 | 	sub	objptr, ##5836
1d3c8                 | LR__2305
1d3c8     5A 00 00 FF 
1d3cc     1C E4 05 F1 | 	add	objptr, ##46108
1d3d0     F2 12 02 FB | 	rdlong	arg01, objptr
1d3d4     5A 00 00 FF 
1d3d8     1C E4 85 F1 | 	sub	objptr, ##46108
1d3dc     CC F7 BF FD | 	call	#_scantochar
1d3e0     5A 00 00 FF 
1d3e4     24 E4 05 F1 | 	add	objptr, ##46116
1d3e8     F2 FA 61 FC | 	wrlong	result1, objptr
1d3ec                 | '   if leds and 2 = 2 then 
1d3ec     10 E4 85 F1 | 	sub	objptr, #16
1d3f0     F2 20 0A FB | 	rdlong	local02, objptr wz
1d3f4     5A 00 00 FF 
1d3f8     14 E4 85 F1 | 	sub	objptr, ##46100
1d3fc     68 01 90 AD |  if_e	jmp	#LR__2313
1d400                 | '     if key4>96 andalso key4<123 then
1d400     5A 00 00 FF 
1d404     24 E4 05 F1 | 	add	objptr, ##46116
1d408     F2 20 02 FB | 	rdlong	local02, objptr
1d40c     5A 00 00 FF 
1d410     24 E4 85 F1 | 	sub	objptr, ##46116
1d414     61 20 56 F2 | 	cmps	local02, #97 wc
1d418     40 00 90 CD |  if_b	jmp	#LR__2306
1d41c     5A 00 00 FF 
1d420     24 E4 05 F1 | 	add	objptr, ##46116
1d424     F2 24 02 FB | 	rdlong	local04, objptr
1d428     5A 00 00 FF 
1d42c     24 E4 85 F1 | 	sub	objptr, ##46116
1d430     12 23 02 F6 | 	mov	local03, local04
1d434     7B 22 56 F2 | 	cmps	local03, #123 wc
1d438     20 00 90 3D |  if_ae	jmp	#LR__2306
1d43c     5A 00 00 FF 
1d440     24 E4 05 F1 | 	add	objptr, ##46116
1d444     F2 20 02 FB | 	rdlong	local02, objptr
1d448     20 20 86 F1 | 	sub	local02, #32
1d44c     F2 20 62 FC | 	wrlong	local02, objptr
1d450     5A 00 00 FF 
1d454     24 E4 85 F1 | 	sub	objptr, ##46116
1d458     0C 01 90 FD | 	jmp	#LR__2312
1d45c                 | LR__2306
1d45c     5A 00 00 FF 
1d460     24 E4 05 F1 | 	add	objptr, ##46116
1d464     F2 20 02 FB | 	rdlong	local02, objptr
1d468     5A 00 00 FF 
1d46c     24 E4 85 F1 | 	sub	objptr, ##46116
1d470     41 20 56 F2 | 	cmps	local02, #65 wc
1d474     40 00 90 CD |  if_b	jmp	#LR__2307
1d478     5A 00 00 FF 
1d47c     24 E4 05 F1 | 	add	objptr, ##46116
1d480     F2 24 02 FB | 	rdlong	local04, objptr
1d484     5A 00 00 FF 
1d488     24 E4 85 F1 | 	sub	objptr, ##46116
1d48c     12 23 02 F6 | 	mov	local03, local04
1d490     5B 22 56 F2 | 	cmps	local03, #91 wc
1d494     20 00 90 3D |  if_ae	jmp	#LR__2307
1d498     5A 00 00 FF 
1d49c     24 E4 05 F1 | 	add	objptr, ##46116
1d4a0     F2 20 02 FB | 	rdlong	local02, objptr
1d4a4     20 20 06 F1 | 	add	local02, #32
1d4a8     F2 20 62 FC | 	wrlong	local02, objptr
1d4ac     5A 00 00 FF 
1d4b0     24 E4 85 F1 | 	sub	objptr, ##46116
1d4b4     B0 00 90 FD | 	jmp	#LR__2311
1d4b8                 | LR__2307
1d4b8     5A 00 00 FF 
1d4bc     24 E4 05 F1 | 	add	objptr, ##46116
1d4c0     F2 20 02 FB | 	rdlong	local02, objptr
1d4c4     5A 00 00 FF 
1d4c8     24 E4 85 F1 | 	sub	objptr, ##46116
1d4cc     17 20 56 F2 | 	cmps	local02, #23 wc
1d4d0     40 00 90 CD |  if_b	jmp	#LR__2308
1d4d4     5A 00 00 FF 
1d4d8     24 E4 05 F1 | 	add	objptr, ##46116
1d4dc     F2 24 02 FB | 	rdlong	local04, objptr
1d4e0     5A 00 00 FF 
1d4e4     24 E4 85 F1 | 	sub	objptr, ##46116
1d4e8     12 23 02 F6 | 	mov	local03, local04
1d4ec     20 22 56 F2 | 	cmps	local03, #32 wc
1d4f0     20 00 90 3D |  if_ae	jmp	#LR__2308
1d4f4     5A 00 00 FF 
1d4f8     24 E4 05 F1 | 	add	objptr, ##46116
1d4fc     F2 20 02 FB | 	rdlong	local02, objptr
1d500     09 20 86 F1 | 	sub	local02, #9
1d504     F2 20 62 FC | 	wrlong	local02, objptr
1d508     5A 00 00 FF 
1d50c     24 E4 85 F1 | 	sub	objptr, ##46116
1d510     54 00 90 FD | 	jmp	#LR__2310
1d514                 | LR__2308
1d514     5A 00 00 FF 
1d518     24 E4 05 F1 | 	add	objptr, ##46116
1d51c     F2 20 02 FB | 	rdlong	local02, objptr
1d520     5A 00 00 FF 
1d524     24 E4 85 F1 | 	sub	objptr, ##46116
1d528     0E 20 56 F2 | 	cmps	local02, #14 wc
1d52c     38 00 90 CD |  if_b	jmp	#LR__2309
1d530     5A 00 00 FF 
1d534     24 E4 05 F1 | 	add	objptr, ##46116
1d538     F2 24 02 FB | 	rdlong	local04, objptr
1d53c     5A 00 00 FF 
1d540     24 E4 85 F1 | 	sub	objptr, ##46116
1d544     12 23 02 F6 | 	mov	local03, local04
1d548     17 22 56 F2 | 	cmps	local03, #23 wc
1d54c     5A 00 00 CF 
1d550     24 E4 05 C1 |  if_b	add	objptr, ##46116
1d554     F2 20 02 CB |  if_b	rdlong	local02, objptr
1d558     27 20 06 C1 |  if_b	add	local02, #39
1d55c     F2 20 62 CC |  if_b	wrlong	local02, objptr
1d560     5A 00 00 CF 
1d564     24 E4 85 C1 |  if_b	sub	objptr, ##46116
1d568                 | LR__2309
1d568                 | LR__2310
1d568                 | LR__2311
1d568                 | LR__2312
1d568                 | LR__2313
1d568                 | '  
1d568                 | '  
1d568                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then 
1d568     5A 00 00 FF 
1d56c     24 E4 05 F1 | 	add	objptr, ##46116
1d570     F2 20 02 FB | 	rdlong	local02, objptr
1d574     5A 00 00 FF 
1d578     24 E4 85 F1 | 	sub	objptr, ##46116
1d57c     01 20 56 F2 | 	cmps	local02, #1 wc
1d580     E8 01 90 CD |  if_b	jmp	#LR__2318
1d584     5A 00 00 FF 
1d588     24 E4 05 F1 | 	add	objptr, ##46116
1d58c     F2 24 02 FB | 	rdlong	local04, objptr
1d590     5A 00 00 FF 
1d594     24 E4 85 F1 | 	sub	objptr, ##46116
1d598     12 23 02 F6 | 	mov	local03, local04
1d59c     7F 22 56 F2 | 	cmps	local03, #127 wc
1d5a0     3C E4 05 C1 |  if_b	add	objptr, #60
1d5a4     F2 1E E2 CA |  if_b	rdword	local01, objptr
1d5a8     3C E4 85 C1 |  if_b	sub	objptr, #60
1d5ac     0F 27 32 C9 |  if_b	getword	local05, local01, #0
1d5b0     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
1d5b4     B4 01 90 3D |  if_ae	jmp	#LR__2318
1d5b8                 | '     if do_insert then
1d5b8     5A 00 00 FF 
1d5bc     10 E4 05 F1 | 	add	objptr, ##46096
1d5c0     F2 20 0A FB | 	rdlong	local02, objptr wz
1d5c4     5A 00 00 FF 
1d5c8     10 E4 85 F1 | 	sub	objptr, ##46096
1d5cc     84 01 90 AD |  if_e	jmp	#LR__2317
1d5d0                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
1d5d0     3E E4 05 F1 | 	add	objptr, #62
1d5d4     F2 22 C2 FA | 	rdbyte	local03, objptr
1d5d8     11 25 E2 F8 | 	getbyte	local04, local03, #0
1d5dc     80 24 06 FA | 	mul	local04, #128
1d5e0     3A E4 85 F1 | 	sub	objptr, #58
1d5e4     F2 2A 02 FB | 	rdlong	local07, objptr
1d5e8     15 2D 02 F6 | 	mov	local08, local07
1d5ec     12 2D 02 F1 | 	add	local08, local04
1d5f0     7F 2C 06 F1 | 	add	local08, #127
1d5f4     11 23 E2 F8 | 	getbyte	local03, local03, #0
1d5f8     80 22 06 FA | 	mul	local03, #128
1d5fc     11 2B 02 F1 | 	add	local07, local03
1d600     38 E4 05 F1 | 	add	objptr, #56
1d604     F2 26 E2 FA | 	rdword	local05, objptr
1d608     3C E4 85 F1 | 	sub	objptr, #60
1d60c     13 2F 52 F6 | 	abs	local09, local05 wc
1d610     01 2E 46 F0 | 	shr	local09, #1
1d614     17 2B 82 F3 | 	sumc	local07, local09
1d618     01 2A 06 F1 | 	add	local07, #1
1d61c                 | LR__2314
1d61c     16 31 02 F6 | 	mov	local10, local08
1d620     01 30 86 F1 | 	sub	local10, #1
1d624     18 13 02 F6 | 	mov	arg01, local10
1d628     78 F4 BF FD | 	call	#_pspeek
1d62c     FD 32 02 F6 | 	mov	local11, result1
1d630     19 35 E2 F8 | 	getbyte	local12, local11, #0
1d634     1A 37 02 F6 | 	mov	local13, local12
1d638     16 13 02 F6 | 	mov	arg01, local08
1d63c     1B 15 02 F6 | 	mov	arg02, local13
1d640     18 F4 BF FD | 	call	#_pspoke
1d644     01 2C 86 F1 | 	sub	local08, #1
1d648     15 2D 52 F2 | 	cmps	local08, local07 wc
1d64c     CC FF 9F 3D |  if_ae	jmp	#LR__2314
1d650     5A 00 00 FF 
1d654     28 E4 05 F1 | 	add	objptr, ##46120
1d658     F2 00 68 FC | 	wrlong	#0, objptr
1d65c     59 00 00 FF 
1d660     EA E5 85 F1 | 	sub	objptr, ##46058
1d664     F2 22 C2 FA | 	rdbyte	local03, objptr
1d668     11 25 E2 F8 | 	getbyte	local04, local03, #0
1d66c     80 24 06 FA | 	mul	local04, #128
1d670     3A E4 85 F1 | 	sub	objptr, #58
1d674     F2 26 02 FB | 	rdlong	local05, objptr
1d678     13 2D 02 F6 | 	mov	local08, local05
1d67c     12 2D 02 F1 | 	add	local08, local04
1d680     38 E4 05 F1 | 	add	objptr, #56
1d684     F2 2E E2 FA | 	rdword	local09, objptr
1d688     17 1F 32 F9 | 	getword	local01, local09, #0
1d68c     0F 39 52 F6 | 	abs	local14, local01 wc
1d690     01 38 46 F0 | 	shr	local14, #1
1d694     1C 39 82 F6 | 	negc	local14, local14
1d698     1C 2D 02 F1 | 	add	local08, local14
1d69c     11 23 E2 F8 | 	getbyte	local03, local03, #0
1d6a0     80 22 06 FA | 	mul	local03, #128
1d6a4     13 25 02 F6 | 	mov	local04, local05
1d6a8     3C E4 85 F1 | 	sub	objptr, #60
1d6ac     12 3B 02 F6 | 	mov	local15, local04
1d6b0     11 3B 02 F1 | 	add	local15, local03
1d6b4     80 3A 06 F1 | 	add	local15, #128
1d6b8                 | LR__2315
1d6b8     1D 2D 52 F2 | 	cmps	local08, local15 wc
1d6bc     94 00 90 3D |  if_ae	jmp	#LR__2316
1d6c0     3C E4 05 F1 | 	add	objptr, #60
1d6c4     F2 20 E2 FA | 	rdword	local02, objptr
1d6c8     59 00 00 FF 
1d6cc     EC E5 05 F1 | 	add	objptr, ##46060
1d6d0     F2 24 02 FB | 	rdlong	local04, objptr
1d6d4     01 24 66 F0 | 	shl	local04, #1
1d6d8     12 21 02 F1 | 	add	local02, local04
1d6dc     59 00 00 FF 
1d6e0     EA E5 85 F1 | 	sub	objptr, ##46058
1d6e4     F2 28 C2 FA | 	rdbyte	local06, objptr
1d6e8     3E E4 85 F1 | 	sub	objptr, #62
1d6ec     10 28 06 FA | 	mul	local06, #16
1d6f0     04 28 06 F1 | 	add	local06, #4
1d6f4     16 13 02 F6 | 	mov	arg01, local08
1d6f8     A8 F3 BF FD | 	call	#_pspeek
1d6fc     FD 22 E2 F8 | 	getbyte	local03, result1, #0
1d700     41 E4 05 F1 | 	add	objptr, #65
1d704     F2 24 02 FB | 	rdlong	local04, objptr
1d708     04 E4 05 F1 | 	add	objptr, #4
1d70c     F2 1E 02 FB | 	rdlong	local01, objptr
1d710     45 E4 85 F1 | 	sub	objptr, #69
1d714     0F 27 02 F6 | 	mov	local05, local01
1d718     10 13 02 F6 | 	mov	arg01, local02
1d71c     14 15 02 F6 | 	mov	arg02, local06
1d720     11 17 02 F6 | 	mov	arg03, local03
1d724     12 19 02 F6 | 	mov	arg04, local04
1d728     13 1B 02 F6 | 	mov	arg05, local05
1d72c     C4 1C B0 FD | 	call	#_hg010b_spin2_putcharxycgf
1d730     5A 00 00 FF 
1d734     28 E4 05 F1 | 	add	objptr, ##46120
1d738     F2 20 02 FB | 	rdlong	local02, objptr
1d73c     01 20 06 F1 | 	add	local02, #1
1d740     F2 20 62 FC | 	wrlong	local02, objptr
1d744     5A 00 00 FF 
1d748     28 E4 85 F1 | 	sub	objptr, ##46120
1d74c     01 2C 06 F1 | 	add	local08, #1
1d750     64 FF 9F FD | 	jmp	#LR__2315
1d754                 | LR__2316
1d754                 | LR__2317
1d754     5A 00 00 FF 
1d758     24 E4 05 F1 | 	add	objptr, ##46116
1d75c     F2 12 02 FB | 	rdlong	arg01, objptr
1d760     5A 00 00 FF 
1d764     24 E4 85 F1 | 	sub	objptr, ##46116
1d768     D0 1F B0 FD | 	call	#_hg010b_spin2_putchar
1d76c                 | LR__2318
1d76c                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
1d76c     5A 00 00 FF 
1d770     24 E4 05 F1 | 	add	objptr, ##46116
1d774     F2 20 02 FB | 	rdlong	local02, objptr
1d778     5A 00 00 FF 
1d77c     24 E4 85 F1 | 	sub	objptr, ##46116
1d780     01 20 56 F2 | 	cmps	local02, #1 wc
1d784     D0 00 90 CD |  if_b	jmp	#LR__2319
1d788     5A 00 00 FF 
1d78c     24 E4 05 F1 | 	add	objptr, ##46116
1d790     F2 24 02 FB | 	rdlong	local04, objptr
1d794     5A 00 00 FF 
1d798     24 E4 85 F1 | 	sub	objptr, ##46116
1d79c     12 23 02 F6 | 	mov	local03, local04
1d7a0     7F 22 56 F2 | 	cmps	local03, #127 wc
1d7a4     B0 00 90 3D |  if_ae	jmp	#LR__2319
1d7a8     3C E4 05 F1 | 	add	objptr, #60
1d7ac     F2 1E E2 FA | 	rdword	local01, objptr
1d7b0     3C E4 85 F1 | 	sub	objptr, #60
1d7b4     0F 27 32 F9 | 	getword	local05, local01, #0
1d7b8     FE 26 0E F2 | 	cmp	local05, #254 wz
1d7bc     58 00 00 AF 
1d7c0     48 E5 05 A1 |  if_e	add	objptr, ##45384
1d7c4     F2 38 02 AB |  if_e	rdlong	local14, objptr
1d7c8     58 00 00 AF 
1d7cc     48 E5 85 A1 |  if_e	sub	objptr, ##45384
1d7d0     1C 2F 02 A6 |  if_e	mov	local09, local14
1d7d4     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
1d7d8     7C 00 90 5D |  if_ne	jmp	#LR__2319
1d7dc     04 00 00 FF 
1d7e0     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
1d7e4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1d7e8     04 00 00 FF 
1d7ec     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1d7f0     56 00 00 FF 
1d7f4     44 22 06 F6 | 	mov	local03, ##44100
1d7f8     0C 24 C6 F9 | 	decod	local04, #12
1d7fc     00 26 06 F6 | 	mov	local05, #0
1d800     03 00 00 FF 
1d804     DE 1E 06 F6 | 	mov	local01, ##1758
1d808     07 12 06 F6 | 	mov	arg01, #7
1d80c     56 00 00 FF 
1d810     44 16 06 F6 | 	mov	arg03, ##44100
1d814     0C 18 C6 F9 | 	decod	arg04, #12
1d818     00 1A 06 F6 | 	mov	arg05, #0
1d81c     03 00 00 FF 
1d820     DE 1C 06 F6 | 	mov	arg06, ##1758
1d824     0B 00 00 FF 
1d828     CC E4 05 F1 | 	add	objptr, ##5836
1d82c     70 30 B0 FD | 	call	#_audio096_spin2_play
1d830     0B 00 00 FF 
1d834     CC E4 85 F1 | 	sub	objptr, ##5836
1d838     2C 13 06 F6 | 	mov	arg01, #300
1d83c     C4 37 B0 FD | 	call	#__system___waitms
1d840     07 12 06 F6 | 	mov	arg01, #7
1d844     0B 00 00 FF 
1d848     CC E4 05 F1 | 	add	objptr, ##5836
1d84c     C0 31 B0 FD | 	call	#_audio096_spin2_stop
1d850     0B 00 00 FF 
1d854     CC E4 85 F1 | 	sub	objptr, ##5836
1d858                 | LR__2319
1d858                 | '  
1d858                 | '   if key4=key_enter then 
1d858     5A 00 00 FF 
1d85c     24 E4 05 F1 | 	add	objptr, ##46116
1d860     F2 20 02 FB | 	rdlong	local02, objptr
1d864     5A 00 00 FF 
1d868     24 E4 85 F1 | 	sub	objptr, ##46116
1d86c     8D 20 0E F2 | 	cmp	local02, #141 wz
1d870     F0 00 90 5D |  if_ne	jmp	#LR__2322
1d874     89 01 00 FF 
1d878     F1 21 06 F6 | 	mov	local02, ##@LR__5510
1d87c     37 00 00 FF 
1d880     4C E4 05 F1 | 	add	objptr, ##28236
1d884     F2 20 62 FC | 	wrlong	local02, objptr
1d888                 | ' 
1d888                 | ' ''      interpret: line$="" :let t1=getct()-t1 :rpt=0: rptcnt=0
1d888                 | '     line$="" : for i=editor_spaces to 127
1d888     18 E4 05 F1 | 	add	objptr, #24
1d88c     F2 2C 02 FB | 	rdlong	local08, objptr
1d890     37 00 00 FF 
1d894     64 E4 85 F1 | 	sub	objptr, ##28260
1d898                 | LR__2320
1d898     80 2C 56 F2 | 	cmps	local08, #128 wc
1d89c     8C 00 90 3D |  if_ae	jmp	#LR__2321
1d8a0     3E E4 05 F1 | 	add	objptr, #62
1d8a4     F2 1E C2 FA | 	rdbyte	local01, objptr
1d8a8     0F 27 E2 F8 | 	getbyte	local05, local01, #0
1d8ac     13 2F 02 F6 | 	mov	local09, local05
1d8b0     80 2E 06 FA | 	mul	local09, #128
1d8b4     3A E4 85 F1 | 	sub	objptr, #58
1d8b8     F2 38 02 FB | 	rdlong	local14, objptr
1d8bc     04 E4 85 F1 | 	sub	objptr, #4
1d8c0     1C 13 02 F6 | 	mov	arg01, local14
1d8c4     17 13 02 F1 | 	add	arg01, local09
1d8c8     16 13 02 F1 | 	add	arg01, local08
1d8cc     D4 F1 BF FD | 	call	#_pspeek
1d8d0     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1d8d4     5A 00 00 FF 
1d8d8     2C E4 05 F1 | 	add	objptr, ##46124
1d8dc     F2 24 62 FC | 	wrlong	local04, objptr
1d8e0     22 00 00 FF 
1d8e4     E0 E5 85 F1 | 	sub	objptr, ##17888
1d8e8     F2 28 02 FB | 	rdlong	local06, objptr
1d8ec     37 00 00 FF 
1d8f0     4C E4 85 F1 | 	sub	objptr, ##28236
1d8f4     12 13 02 F6 | 	mov	arg01, local04
1d8f8     54 56 B0 FD | 	call	#__system__Chr_S
1d8fc     FD 14 02 F6 | 	mov	arg02, result1
1d900     14 13 02 F6 | 	mov	arg01, local06
1d904     64 34 B0 FD | 	call	#__system___string_concat
1d908     37 00 00 FF 
1d90c     4C E4 05 F1 | 	add	objptr, ##28236
1d910     F2 FA 61 FC | 	wrlong	result1, objptr
1d914     37 00 00 FF 
1d918     4C E4 85 F1 | 	sub	objptr, ##28236
1d91c     16 23 02 F6 | 	mov	local03, local08
1d920     01 22 06 F1 | 	add	local03, #1
1d924     11 2D 02 F6 | 	mov	local08, local03
1d928     6C FF 9F FD | 	jmp	#LR__2320
1d92c                 | LR__2321
1d92c     C4 23 B0 FD | 	call	#_hg010b_spin2_crlf
1d930     E8 30 BE FD | 	call	#_interpret
1d934     89 01 00 FF 
1d938     F2 21 06 F6 | 	mov	local02, ##@LR__5511
1d93c     37 00 00 FF 
1d940     4C E4 05 F1 | 	add	objptr, ##28236
1d944     F2 20 62 FC | 	wrlong	local02, objptr
1d948     22 00 00 FF 
1d94c     CC E5 05 F1 | 	add	objptr, ##17868
1d950     F2 00 68 FC | 	wrlong	#0, objptr
1d954     08 E4 05 F1 | 	add	objptr, #8
1d958     F2 00 68 FC | 	wrlong	#0, objptr
1d95c     5A 00 00 FF 
1d960     20 E4 85 F1 | 	sub	objptr, ##46112
1d964                 | LR__2322
1d964     5A 00 00 FF 
1d968     1C E4 05 F1 | 	add	objptr, ##46108
1d96c     F2 20 02 FB | 	rdlong	local02, objptr
1d970     10 21 E2 F8 | 	getbyte	local02, local02, #0
1d974     08 E4 05 F1 | 	add	objptr, #8
1d978     F2 20 62 FC | 	wrlong	local02, objptr
1d97c                 | '   'tab
1d97c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
1d97c     5A 00 00 FF 
1d980     24 E4 85 F1 | 	sub	objptr, ##46116
1d984     2B 20 0E F2 | 	cmp	local02, #43 wz
1d988     B4 00 90 5D |  if_ne	jmp	#LR__2323
1d98c     3C E4 05 F1 | 	add	objptr, #60
1d990     F2 24 E2 FA | 	rdword	local04, objptr
1d994     3C E4 85 F1 | 	sub	objptr, #60
1d998     12 23 32 F9 | 	getword	local03, local04, #0
1d99c     F0 22 16 F2 | 	cmp	local03, #240 wc
1d9a0     9C 00 90 CD |  if_b	jmp	#LR__2323
1d9a4     58 00 00 FF 
1d9a8     48 E5 05 F1 | 	add	objptr, ##45384
1d9ac     F2 1E 02 FB | 	rdlong	local01, objptr
1d9b0     58 00 00 FF 
1d9b4     48 E5 85 F1 | 	sub	objptr, ##45384
1d9b8     0F 27 02 F6 | 	mov	local05, local01
1d9bc     01 26 0E F2 | 	cmp	local05, #1 wz
1d9c0     7C 00 90 5D |  if_ne	jmp	#LR__2323
1d9c4     04 00 00 FF 
1d9c8     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
1d9cc     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1d9d0     04 00 00 FF 
1d9d4     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1d9d8     56 00 00 FF 
1d9dc     44 22 06 F6 | 	mov	local03, ##44100
1d9e0     0E 24 C6 F9 | 	decod	local04, #14
1d9e4     00 26 06 F6 | 	mov	local05, #0
1d9e8     03 00 00 FF 
1d9ec     DE 1E 06 F6 | 	mov	local01, ##1758
1d9f0     00 12 06 F6 | 	mov	arg01, #0
1d9f4     56 00 00 FF 
1d9f8     44 16 06 F6 | 	mov	arg03, ##44100
1d9fc     0E 18 C6 F9 | 	decod	arg04, #14
1da00     00 1A 06 F6 | 	mov	arg05, #0
1da04     03 00 00 FF 
1da08     DE 1C 06 F6 | 	mov	arg06, ##1758
1da0c     0B 00 00 FF 
1da10     CC E4 05 F1 | 	add	objptr, ##5836
1da14     88 2E B0 FD | 	call	#_audio096_spin2_play
1da18     0B 00 00 FF 
1da1c     CC E4 85 F1 | 	sub	objptr, ##5836
1da20     2C 13 06 F6 | 	mov	arg01, #300
1da24     DC 35 B0 FD | 	call	#__system___waitms
1da28     00 12 06 F6 | 	mov	arg01, #0
1da2c     0B 00 00 FF 
1da30     CC E4 05 F1 | 	add	objptr, ##5836
1da34     D8 2F B0 FD | 	call	#_audio096_spin2_stop
1da38     0B 00 00 FF 
1da3c     CC E4 85 F1 | 	sub	objptr, ##5836
1da40                 | LR__2323
1da40                 | '   if key4 = 43 andalso v.cursor_x<240 then v.setcursorx((v.cursor_x+8) and $F8)  
1da40     5A 00 00 FF 
1da44     24 E4 05 F1 | 	add	objptr, ##46116
1da48     F2 20 02 FB | 	rdlong	local02, objptr
1da4c     5A 00 00 FF 
1da50     24 E4 85 F1 | 	sub	objptr, ##46116
1da54     2B 20 0E F2 | 	cmp	local02, #43 wz
1da58     34 00 90 5D |  if_ne	jmp	#LR__2324
1da5c     3C E4 05 F1 | 	add	objptr, #60
1da60     F2 24 E2 FA | 	rdword	local04, objptr
1da64     3C E4 85 F1 | 	sub	objptr, #60
1da68     12 23 32 F9 | 	getword	local03, local04, #0
1da6c     F0 22 16 F2 | 	cmp	local03, #240 wc
1da70     1C 00 90 3D |  if_ae	jmp	#LR__2324
1da74     3C E4 05 F1 | 	add	objptr, #60
1da78     F2 22 E2 FA | 	rdword	local03, objptr
1da7c     3C E4 85 F1 | 	sub	objptr, #60
1da80     11 13 32 F9 | 	getword	arg01, local03, #0
1da84     08 12 06 F1 | 	add	arg01, #8
1da88     F8 12 06 F5 | 	and	arg01, #248
1da8c     04 1B B0 FD | 	call	#_hg010b_spin2_setcursorx
1da90                 | LR__2324
1da90                 | '  ' tab43 del 76 home74 end 77 pgup=75 pgdn 78
1da90                 | '   if key4=77 then i=127 : do: 
1da90     5A 00 00 FF 
1da94     24 E4 05 F1 | 	add	objptr, ##46116
1da98     F2 20 02 FB | 	rdlong	local02, objptr
1da9c     5A 00 00 FF 
1daa0     24 E4 85 F1 | 	sub	objptr, ##46116
1daa4     4D 20 0E F2 | 	cmp	local02, #77 wz
1daa8     90 00 90 5D |  if_ne	jmp	#LR__2329
1daac     7F 2C 06 F6 | 	mov	local08, #127
1dab0                 | LR__2325
1dab0                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
1dab0     3E E4 05 F1 | 	add	objptr, #62
1dab4     F2 26 C2 FA | 	rdbyte	local05, objptr
1dab8     13 25 E2 F8 | 	getbyte	local04, local05, #0
1dabc     12 1F 02 F6 | 	mov	local01, local04
1dac0     80 1E 06 FA | 	mul	local01, #128
1dac4     3A E4 85 F1 | 	sub	objptr, #58
1dac8     F2 2E 02 FB | 	rdlong	local09, objptr
1dacc     04 E4 85 F1 | 	sub	objptr, #4
1dad0     17 23 02 F6 | 	mov	local03, local09
1dad4     0F 23 02 F1 | 	add	local03, local01
1dad8     16 23 02 F1 | 	add	local03, local08
1dadc     11 13 02 F6 | 	mov	arg01, local03
1dae0     C0 EF BF FD | 	call	#_pspeek
1dae4     FD 20 E2 F8 | 	getbyte	local02, result1, #0
1dae8     20 20 0E F2 | 	cmp	local02, #32 wz
1daec     2C 00 90 AD |  if_e	jmp	#LR__2327
1daf0                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
1daf0     7F 2C 56 F2 | 	cmps	local08, #127 wc
1daf4     18 00 90 3D |  if_ae	jmp	#LR__2326
1daf8     16 23 02 F6 | 	mov	local03, local08
1dafc     01 22 66 F0 | 	shl	local03, #1
1db00     11 13 02 F6 | 	mov	arg01, local03
1db04     02 12 06 F1 | 	add	arg01, #2
1db08     88 1A B0 FD | 	call	#_hg010b_spin2_setcursorx
1db0c     2C 00 90 FD | 	jmp	#LR__2328
1db10                 | LR__2326
1db10     FE 12 06 F6 | 	mov	arg01, #254
1db14     7C 1A B0 FD | 	call	#_hg010b_spin2_setcursorx
1db18     20 00 90 FD | 	jmp	#LR__2328
1db1c                 | LR__2327
1db1c     01 2C 86 F1 | 	sub	local08, #1
1db20     37 00 00 FF 
1db24     64 E4 05 F1 | 	add	objptr, ##28260
1db28     F2 20 02 FB | 	rdlong	local02, objptr
1db2c     37 00 00 FF 
1db30     64 E4 85 F1 | 	sub	objptr, ##28260
1db34     10 2D 0A F2 | 	cmp	local08, local02 wz
1db38     74 FF 9F 5D |  if_ne	jmp	#LR__2325
1db3c                 | LR__2328
1db3c                 | LR__2329
1db3c                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
1db3c     37 00 00 FF 
1db40     64 E4 05 F1 | 	add	objptr, ##28260
1db44     F2 20 02 FB | 	rdlong	local02, objptr
1db48     37 00 00 FF 
1db4c     64 E4 85 F1 | 	sub	objptr, ##28260
1db50     10 2D 0A F2 | 	cmp	local08, local02 wz
1db54     24 00 90 5D |  if_ne	jmp	#LR__2330
1db58     37 00 00 FF 
1db5c     64 E4 05 F1 | 	add	objptr, ##28260
1db60     F2 24 02 FB | 	rdlong	local04, objptr
1db64     37 00 00 FF 
1db68     64 E4 85 F1 | 	sub	objptr, ##28260
1db6c     12 23 02 F6 | 	mov	local03, local04
1db70     11 13 02 F6 | 	mov	arg01, local03
1db74     01 12 66 F0 | 	shl	arg01, #1
1db78     18 1A B0 FD | 	call	#_hg010b_spin2_setcursorx
1db7c                 | LR__2330
1db7c                 | '   
1db7c                 | '   
1db7c                 | '   if key4=74 then v.setcursorx(editor_spaces*2)
1db7c     5A 00 00 FF 
1db80     24 E4 05 F1 | 	add	objptr, ##46116
1db84     F2 20 02 FB | 	rdlong	local02, objptr
1db88     5A 00 00 FF 
1db8c     24 E4 85 F1 | 	sub	objptr, ##46116
1db90     4A 20 0E F2 | 	cmp	local02, #74 wz
1db94     24 00 90 5D |  if_ne	jmp	#LR__2331
1db98     37 00 00 FF 
1db9c     64 E4 05 F1 | 	add	objptr, ##28260
1dba0     F2 24 02 FB | 	rdlong	local04, objptr
1dba4     37 00 00 FF 
1dba8     64 E4 85 F1 | 	sub	objptr, ##28260
1dbac     12 23 02 F6 | 	mov	local03, local04
1dbb0     11 13 02 F6 | 	mov	arg01, local03
1dbb4     01 12 66 F0 | 	shl	arg01, #1
1dbb8     D8 19 B0 FD | 	call	#_hg010b_spin2_setcursorx
1dbbc                 | LR__2331
1dbbc                 | '   if key4=75 then v.setcursory(0)
1dbbc     5A 00 00 FF 
1dbc0     24 E4 05 F1 | 	add	objptr, ##46116
1dbc4     F2 20 02 FB | 	rdlong	local02, objptr
1dbc8     5A 00 00 FF 
1dbcc     24 E4 85 F1 | 	sub	objptr, ##46116
1dbd0     4B 20 0E F2 | 	cmp	local02, #75 wz
1dbd4     00 12 06 A6 |  if_e	mov	arg01, #0
1dbd8     E8 19 B0 AD |  if_e	call	#_hg010b_spin2_setcursory
1dbdc                 | '   if key4=78 then v.setcursory(36) ' todo: parameter instead 36
1dbdc     5A 00 00 FF 
1dbe0     24 E4 05 F1 | 	add	objptr, ##46116
1dbe4     F2 20 02 FB | 	rdlong	local02, objptr
1dbe8     5A 00 00 FF 
1dbec     24 E4 85 F1 | 	sub	objptr, ##46116
1dbf0     4E 20 0E F2 | 	cmp	local02, #78 wz
1dbf4     24 12 06 A6 |  if_e	mov	arg01, #36
1dbf8     C8 19 B0 AD |  if_e	call	#_hg010b_spin2_setcursory
1dbfc                 | '   
1dbfc                 | '   if key4=76 then 'del
1dbfc     5A 00 00 FF 
1dc00     24 E4 05 F1 | 	add	objptr, ##46116
1dc04     F2 20 02 FB | 	rdlong	local02, objptr
1dc08     5A 00 00 FF 
1dc0c     24 E4 85 F1 | 	sub	objptr, ##46116
1dc10     4C 20 0E F2 | 	cmp	local02, #76 wz
1dc14     9C 01 90 5D |  if_ne	jmp	#LR__2336
1dc18                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
1dc18     3E E4 05 F1 | 	add	objptr, #62
1dc1c     F2 22 C2 FA | 	rdbyte	local03, objptr
1dc20     11 25 E2 F8 | 	getbyte	local04, local03, #0
1dc24     80 24 06 FA | 	mul	local04, #128
1dc28     3A E4 85 F1 | 	sub	objptr, #58
1dc2c     F2 3C 02 FB | 	rdlong	local16, objptr
1dc30     1E 2D 02 F6 | 	mov	local08, local16
1dc34     12 2D 02 F1 | 	add	local08, local04
1dc38     38 E4 05 F1 | 	add	objptr, #56
1dc3c     F2 1E E2 FA | 	rdword	local01, objptr
1dc40     0F 39 52 F6 | 	abs	local14, local01 wc
1dc44     01 38 46 F0 | 	shr	local14, #1
1dc48     1C 2D 82 F3 | 	sumc	local08, local14
1dc4c     11 23 E2 F8 | 	getbyte	local03, local03, #0
1dc50     80 22 06 FA | 	mul	local03, #128
1dc54     3C E4 85 F1 | 	sub	objptr, #60
1dc58     11 3D 02 F1 | 	add	local16, local03
1dc5c     80 3C 06 F1 | 	add	local16, #128
1dc60                 | LR__2332
1dc60     1E 2D 52 F2 | 	cmps	local08, local16 wc
1dc64     20 00 90 3D |  if_ae	jmp	#LR__2333
1dc68     16 13 02 F6 | 	mov	arg01, local08
1dc6c     01 12 06 F1 | 	add	arg01, #1
1dc70     30 EE BF FD | 	call	#_pspeek
1dc74     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
1dc78     16 13 02 F6 | 	mov	arg01, local08
1dc7c     DC ED BF FD | 	call	#_pspoke
1dc80     01 2C 06 F1 | 	add	local08, #1
1dc84     D8 FF 9F FD | 	jmp	#LR__2332
1dc88                 | LR__2333
1dc88     3E E4 05 F1 | 	add	objptr, #62
1dc8c     F2 26 C2 FA | 	rdbyte	local05, objptr
1dc90     80 26 06 FA | 	mul	local05, #128
1dc94     3A E4 85 F1 | 	sub	objptr, #58
1dc98     F2 12 02 FB | 	rdlong	arg01, objptr
1dc9c     04 E4 85 F1 | 	sub	objptr, #4
1dca0     13 13 02 F1 | 	add	arg01, local05
1dca4     7F 12 06 F1 | 	add	arg01, #127
1dca8     20 14 06 F6 | 	mov	arg02, #32
1dcac     AC ED BF FD | 	call	#_pspoke
1dcb0     5A 00 00 FF 
1dcb4     28 E4 05 F1 | 	add	objptr, ##46120
1dcb8     F2 00 68 FC | 	wrlong	#0, objptr
1dcbc     59 00 00 FF 
1dcc0     EA E5 85 F1 | 	sub	objptr, ##46058
1dcc4     F2 22 C2 FA | 	rdbyte	local03, objptr
1dcc8     11 25 E2 F8 | 	getbyte	local04, local03, #0
1dccc     80 24 06 FA | 	mul	local04, #128
1dcd0     3A E4 85 F1 | 	sub	objptr, #58
1dcd4     F2 26 02 FB | 	rdlong	local05, objptr
1dcd8     13 2D 02 F6 | 	mov	local08, local05
1dcdc     12 2D 02 F1 | 	add	local08, local04
1dce0     38 E4 05 F1 | 	add	objptr, #56
1dce4     F2 2E E2 FA | 	rdword	local09, objptr
1dce8     17 1F 32 F9 | 	getword	local01, local09, #0
1dcec     0F 39 52 F6 | 	abs	local14, local01 wc
1dcf0     01 38 46 F0 | 	shr	local14, #1
1dcf4     1C 39 82 F6 | 	negc	local14, local14
1dcf8     1C 2D 02 F1 | 	add	local08, local14
1dcfc     11 23 E2 F8 | 	getbyte	local03, local03, #0
1dd00     80 22 06 FA | 	mul	local03, #128
1dd04     13 25 02 F6 | 	mov	local04, local05
1dd08     3C E4 85 F1 | 	sub	objptr, #60
1dd0c     12 3F 02 F6 | 	mov	local17, local04
1dd10     11 3F 02 F1 | 	add	local17, local03
1dd14     80 3E 06 F1 | 	add	local17, #128
1dd18                 | LR__2334
1dd18     1F 2D 52 F2 | 	cmps	local08, local17 wc
1dd1c     94 00 90 3D |  if_ae	jmp	#LR__2335
1dd20     3C E4 05 F1 | 	add	objptr, #60
1dd24     F2 20 E2 FA | 	rdword	local02, objptr
1dd28     59 00 00 FF 
1dd2c     EC E5 05 F1 | 	add	objptr, ##46060
1dd30     F2 24 02 FB | 	rdlong	local04, objptr
1dd34     01 24 66 F0 | 	shl	local04, #1
1dd38     12 21 02 F1 | 	add	local02, local04
1dd3c     59 00 00 FF 
1dd40     EA E5 85 F1 | 	sub	objptr, ##46058
1dd44     F2 28 C2 FA | 	rdbyte	local06, objptr
1dd48     3E E4 85 F1 | 	sub	objptr, #62
1dd4c     10 28 06 FA | 	mul	local06, #16
1dd50     04 28 06 F1 | 	add	local06, #4
1dd54     16 13 02 F6 | 	mov	arg01, local08
1dd58     48 ED BF FD | 	call	#_pspeek
1dd5c     FD 22 E2 F8 | 	getbyte	local03, result1, #0
1dd60     41 E4 05 F1 | 	add	objptr, #65
1dd64     F2 24 02 FB | 	rdlong	local04, objptr
1dd68     04 E4 05 F1 | 	add	objptr, #4
1dd6c     F2 1E 02 FB | 	rdlong	local01, objptr
1dd70     45 E4 85 F1 | 	sub	objptr, #69
1dd74     0F 27 02 F6 | 	mov	local05, local01
1dd78     10 13 02 F6 | 	mov	arg01, local02
1dd7c     14 15 02 F6 | 	mov	arg02, local06
1dd80     11 17 02 F6 | 	mov	arg03, local03
1dd84     12 19 02 F6 | 	mov	arg04, local04
1dd88     13 1B 02 F6 | 	mov	arg05, local05
1dd8c     64 16 B0 FD | 	call	#_hg010b_spin2_putcharxycgf
1dd90     5A 00 00 FF 
1dd94     28 E4 05 F1 | 	add	objptr, ##46120
1dd98     F2 20 02 FB | 	rdlong	local02, objptr
1dd9c     01 20 06 F1 | 	add	local02, #1
1dda0     F2 20 62 FC | 	wrlong	local02, objptr
1dda4     5A 00 00 FF 
1dda8     28 E4 85 F1 | 	sub	objptr, ##46120
1ddac     01 2C 06 F1 | 	add	local08, #1
1ddb0     64 FF 9F FD | 	jmp	#LR__2334
1ddb4                 | LR__2335
1ddb4                 | LR__2336
1ddb4                 | '    
1ddb4                 | '   'backspace
1ddb4                 | '   if key4 = 42 then 
1ddb4     5A 00 00 FF 
1ddb8     24 E4 05 F1 | 	add	objptr, ##46116
1ddbc     F2 20 02 FB | 	rdlong	local02, objptr
1ddc0     5A 00 00 FF 
1ddc4     24 E4 85 F1 | 	sub	objptr, ##46116
1ddc8     2A 20 0E F2 | 	cmp	local02, #42 wz
1ddcc     0C 02 90 5D |  if_ne	jmp	#LR__2342
1ddd0                 | '       if v.cursor_x>editor_spaces*2 then 
1ddd0     3C E4 05 F1 | 	add	objptr, #60
1ddd4     F2 20 E2 FA | 	rdword	local02, objptr
1ddd8     37 00 00 FF 
1dddc     28 E4 05 F1 | 	add	objptr, ##28200
1dde0     F2 26 02 FB | 	rdlong	local05, objptr
1dde4     37 00 00 FF 
1dde8     64 E4 85 F1 | 	sub	objptr, ##28260
1ddec     13 25 02 F6 | 	mov	local04, local05
1ddf0     12 23 02 F6 | 	mov	local03, local04
1ddf4     01 22 66 F0 | 	shl	local03, #1
1ddf8     11 21 5A F2 | 	cmps	local02, local03 wcz
1ddfc     B8 01 90 ED |  if_be	jmp	#LR__2340
1de00     3C E4 05 F1 | 	add	objptr, #60
1de04     F2 12 E2 FA | 	rdword	arg01, objptr
1de08     02 12 86 F1 | 	sub	arg01, #2
1de0c     02 E4 05 F1 | 	add	objptr, #2
1de10     F2 14 C2 FA | 	rdbyte	arg02, objptr
1de14     3E E4 85 F1 | 	sub	objptr, #62
1de18     3C 17 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1de1c                 | '          position v.cursor_x-2,v.cursor_y
1de1c                 | '          for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
1de1c     3E E4 05 F1 | 	add	objptr, #62
1de20     F2 22 C2 FA | 	rdbyte	local03, objptr
1de24     11 25 E2 F8 | 	getbyte	local04, local03, #0
1de28     80 24 06 FA | 	mul	local04, #128
1de2c     3A E4 85 F1 | 	sub	objptr, #58
1de30     F2 40 02 FB | 	rdlong	local18, objptr
1de34     20 2D 02 F6 | 	mov	local08, local18
1de38     12 2D 02 F1 | 	add	local08, local04
1de3c     38 E4 05 F1 | 	add	objptr, #56
1de40     F2 1E E2 FA | 	rdword	local01, objptr
1de44     0F 39 52 F6 | 	abs	local14, local01 wc
1de48     01 38 46 F0 | 	shr	local14, #1
1de4c     1C 2D 82 F3 | 	sumc	local08, local14
1de50     11 23 E2 F8 | 	getbyte	local03, local03, #0
1de54     80 22 06 FA | 	mul	local03, #128
1de58     3C E4 85 F1 | 	sub	objptr, #60
1de5c     11 41 02 F1 | 	add	local18, local03
1de60     80 40 06 F1 | 	add	local18, #128
1de64                 | LR__2337
1de64     20 2D 52 F2 | 	cmps	local08, local18 wc
1de68     20 00 90 3D |  if_ae	jmp	#LR__2338
1de6c     16 13 02 F6 | 	mov	arg01, local08
1de70     01 12 06 F1 | 	add	arg01, #1
1de74     2C EC BF FD | 	call	#_pspeek
1de78     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
1de7c     16 13 02 F6 | 	mov	arg01, local08
1de80     D8 EB BF FD | 	call	#_pspoke
1de84     01 2C 06 F1 | 	add	local08, #1
1de88     D8 FF 9F FD | 	jmp	#LR__2337
1de8c                 | LR__2338
1de8c     3E E4 05 F1 | 	add	objptr, #62
1de90     F2 26 C2 FA | 	rdbyte	local05, objptr
1de94     80 26 06 FA | 	mul	local05, #128
1de98     3A E4 85 F1 | 	sub	objptr, #58
1de9c     F2 12 02 FB | 	rdlong	arg01, objptr
1dea0     04 E4 85 F1 | 	sub	objptr, #4
1dea4     13 13 02 F1 | 	add	arg01, local05
1dea8     7F 12 06 F1 | 	add	arg01, #127
1deac     20 14 06 F6 | 	mov	arg02, #32
1deb0     A8 EB BF FD | 	call	#_pspoke
1deb4     5A 00 00 FF 
1deb8     28 E4 05 F1 | 	add	objptr, ##46120
1debc     F2 00 68 FC | 	wrlong	#0, objptr
1dec0     59 00 00 FF 
1dec4     EA E5 85 F1 | 	sub	objptr, ##46058
1dec8     F2 22 C2 FA | 	rdbyte	local03, objptr
1decc     11 25 E2 F8 | 	getbyte	local04, local03, #0
1ded0     80 24 06 FA | 	mul	local04, #128
1ded4     3A E4 85 F1 | 	sub	objptr, #58
1ded8     F2 26 02 FB | 	rdlong	local05, objptr
1dedc     13 2D 02 F6 | 	mov	local08, local05
1dee0     12 2D 02 F1 | 	add	local08, local04
1dee4     38 E4 05 F1 | 	add	objptr, #56
1dee8     F2 2E E2 FA | 	rdword	local09, objptr
1deec     17 1F 32 F9 | 	getword	local01, local09, #0
1def0     0F 39 52 F6 | 	abs	local14, local01 wc
1def4     01 38 46 F0 | 	shr	local14, #1
1def8     1C 39 82 F6 | 	negc	local14, local14
1defc     1C 2D 02 F1 | 	add	local08, local14
1df00     11 23 E2 F8 | 	getbyte	local03, local03, #0
1df04     80 22 06 FA | 	mul	local03, #128
1df08     13 25 02 F6 | 	mov	local04, local05
1df0c     3C E4 85 F1 | 	sub	objptr, #60
1df10     12 43 02 F6 | 	mov	local19, local04
1df14     11 43 02 F1 | 	add	local19, local03
1df18     80 42 06 F1 | 	add	local19, #128
1df1c                 | LR__2339
1df1c     21 2D 52 F2 | 	cmps	local08, local19 wc
1df20     B8 00 90 3D |  if_ae	jmp	#LR__2341
1df24     3C E4 05 F1 | 	add	objptr, #60
1df28     F2 20 E2 FA | 	rdword	local02, objptr
1df2c     59 00 00 FF 
1df30     EC E5 05 F1 | 	add	objptr, ##46060
1df34     F2 24 02 FB | 	rdlong	local04, objptr
1df38     01 24 66 F0 | 	shl	local04, #1
1df3c     12 21 02 F1 | 	add	local02, local04
1df40     59 00 00 FF 
1df44     EA E5 85 F1 | 	sub	objptr, ##46058
1df48     F2 28 C2 FA | 	rdbyte	local06, objptr
1df4c     3E E4 85 F1 | 	sub	objptr, #62
1df50     10 28 06 FA | 	mul	local06, #16
1df54     04 28 06 F1 | 	add	local06, #4
1df58     16 13 02 F6 | 	mov	arg01, local08
1df5c     44 EB BF FD | 	call	#_pspeek
1df60     FD 22 E2 F8 | 	getbyte	local03, result1, #0
1df64     41 E4 05 F1 | 	add	objptr, #65
1df68     F2 24 02 FB | 	rdlong	local04, objptr
1df6c     04 E4 05 F1 | 	add	objptr, #4
1df70     F2 1E 02 FB | 	rdlong	local01, objptr
1df74     45 E4 85 F1 | 	sub	objptr, #69
1df78     0F 27 02 F6 | 	mov	local05, local01
1df7c     10 13 02 F6 | 	mov	arg01, local02
1df80     14 15 02 F6 | 	mov	arg02, local06
1df84     11 17 02 F6 | 	mov	arg03, local03
1df88     12 19 02 F6 | 	mov	arg04, local04
1df8c     13 1B 02 F6 | 	mov	arg05, local05
1df90     60 14 B0 FD | 	call	#_hg010b_spin2_putcharxycgf
1df94     5A 00 00 FF 
1df98     28 E4 05 F1 | 	add	objptr, ##46120
1df9c     F2 20 02 FB | 	rdlong	local02, objptr
1dfa0     01 20 06 F1 | 	add	local02, #1
1dfa4     F2 20 62 FC | 	wrlong	local02, objptr
1dfa8     5A 00 00 FF 
1dfac     28 E4 85 F1 | 	sub	objptr, ##46120
1dfb0     01 2C 06 F1 | 	add	local08, #1
1dfb4     64 FF 9F FD | 	jmp	#LR__2339
1dfb8                 | LR__2340
1dfb8     89 01 00 FF 
1dfbc     F3 21 06 F6 | 	mov	local02, ##@LR__5512
1dfc0     37 00 00 FF 
1dfc4     4C E4 05 F1 | 	add	objptr, ##28236
1dfc8     F2 20 62 FC | 	wrlong	local02, objptr
1dfcc     37 00 00 FF 
1dfd0     10 E4 85 F1 | 	sub	objptr, ##28176
1dfd4     F2 08 58 FC | 	wrword	#4, objptr
1dfd8     3C E4 85 F1 | 	sub	objptr, #60
1dfdc                 | LR__2341
1dfdc                 | LR__2342
1dfdc                 | '      if key4= 82 then 
1dfdc     5A 00 00 FF 
1dfe0     24 E4 05 F1 | 	add	objptr, ##46116
1dfe4     F2 20 02 FB | 	rdlong	local02, objptr
1dfe8     5A 00 00 FF 
1dfec     24 E4 85 F1 | 	sub	objptr, ##46116
1dff0     52 20 0E F2 | 	cmp	local02, #82 wz
1dff4     50 00 90 5D |  if_ne	jmp	#LR__2343
1dff8                 | ' return cursor_y
1dff8     3E E4 05 F1 | 	add	objptr, #62
1dffc     F2 20 C2 FA | 	rdbyte	local02, objptr
1e000     01 20 86 F1 | 	sub	local02, #1
1e004     59 00 00 FF 
1e008     F2 E5 05 F1 | 	add	objptr, ##46066
1e00c     F2 20 62 FC | 	wrlong	local02, objptr
1e010     5A 00 00 FF 
1e014     30 E4 85 F1 | 	sub	objptr, ##46128
1e018     00 20 56 F2 | 	cmps	local02, #0 wc
1e01c     5A 00 00 CF 
1e020     30 E4 05 C1 |  if_b	add	objptr, ##46128
1e024     F2 00 68 CC |  if_b	wrlong	#0, objptr
1e028     5A 00 00 CF 
1e02c     30 E4 85 C1 |  if_b	sub	objptr, ##46128
1e030     5A 00 00 FF 
1e034     30 E4 05 F1 | 	add	objptr, ##46128
1e038     F2 12 02 FB | 	rdlong	arg01, objptr
1e03c     5A 00 00 FF 
1e040     30 E4 85 F1 | 	sub	objptr, ##46128
1e044     7C 15 B0 FD | 	call	#_hg010b_spin2_setcursory
1e048                 | LR__2343
1e048                 | '    if key4= 81 then
1e048     5A 00 00 FF 
1e04c     24 E4 05 F1 | 	add	objptr, ##46116
1e050     F2 20 02 FB | 	rdlong	local02, objptr
1e054     5A 00 00 FF 
1e058     24 E4 85 F1 | 	sub	objptr, ##46116
1e05c     51 20 0E F2 | 	cmp	local02, #81 wz
1e060     50 00 90 5D |  if_ne	jmp	#LR__2344
1e064                 | ' return cursor_y
1e064     3E E4 05 F1 | 	add	objptr, #62
1e068     F2 20 C2 FA | 	rdbyte	local02, objptr
1e06c     01 20 06 F1 | 	add	local02, #1
1e070     59 00 00 FF 
1e074     F2 E5 05 F1 | 	add	objptr, ##46066
1e078     F2 20 62 FC | 	wrlong	local02, objptr
1e07c     5A 00 00 FF 
1e080     30 E4 85 F1 | 	sub	objptr, ##46128
1e084     25 20 56 F2 | 	cmps	local02, #37 wc
1e088     5A 00 00 3F 
1e08c     30 E4 05 31 |  if_ae	add	objptr, ##46128
1e090     F2 48 68 3C |  if_ae	wrlong	#36, objptr
1e094     5A 00 00 3F 
1e098     30 E4 85 31 |  if_ae	sub	objptr, ##46128
1e09c     5A 00 00 FF 
1e0a0     30 E4 05 F1 | 	add	objptr, ##46128
1e0a4     F2 12 02 FB | 	rdlong	arg01, objptr
1e0a8     5A 00 00 FF 
1e0ac     30 E4 85 F1 | 	sub	objptr, ##46128
1e0b0     10 15 B0 FD | 	call	#_hg010b_spin2_setcursory
1e0b4                 | LR__2344
1e0b4                 | '    if key4= 80 then
1e0b4     5A 00 00 FF 
1e0b8     24 E4 05 F1 | 	add	objptr, ##46116
1e0bc     F2 20 02 FB | 	rdlong	local02, objptr
1e0c0     5A 00 00 FF 
1e0c4     24 E4 85 F1 | 	sub	objptr, ##46116
1e0c8     50 20 0E F2 | 	cmp	local02, #80 wz
1e0cc     6C 00 90 5D |  if_ne	jmp	#LR__2345
1e0d0                 | ' return cursor_x
1e0d0     3C E4 05 F1 | 	add	objptr, #60
1e0d4     F2 20 E2 FA | 	rdword	local02, objptr
1e0d8     02 20 86 F1 | 	sub	local02, #2
1e0dc     59 00 00 FF 
1e0e0     F8 E5 05 F1 | 	add	objptr, ##46072
1e0e4     F2 20 62 FC | 	wrlong	local02, objptr
1e0e8                 | '      if cx<editor_spaces then cx=editor_spaces
1e0e8     22 00 00 FF 
1e0ec     D0 E5 85 F1 | 	sub	objptr, ##17872
1e0f0     F2 24 02 FB | 	rdlong	local04, objptr
1e0f4     37 00 00 FF 
1e0f8     64 E4 85 F1 | 	sub	objptr, ##28260
1e0fc     12 23 02 F6 | 	mov	local03, local04
1e100     11 21 52 F2 | 	cmps	local02, local03 wc
1e104     37 00 00 CF 
1e108     64 E4 05 C1 |  if_b	add	objptr, ##28260
1e10c     F2 20 02 CB |  if_b	rdlong	local02, objptr
1e110     22 00 00 CF 
1e114     D0 E5 05 C1 |  if_b	add	objptr, ##17872
1e118     F2 20 62 CC |  if_b	wrlong	local02, objptr
1e11c     5A 00 00 CF 
1e120     34 E4 85 C1 |  if_b	sub	objptr, ##46132
1e124     5A 00 00 FF 
1e128     34 E4 05 F1 | 	add	objptr, ##46132
1e12c     F2 12 02 FB | 	rdlong	arg01, objptr
1e130     5A 00 00 FF 
1e134     34 E4 85 F1 | 	sub	objptr, ##46132
1e138     58 14 B0 FD | 	call	#_hg010b_spin2_setcursorx
1e13c                 | LR__2345
1e13c                 | '    if key4= 79 then
1e13c     5A 00 00 FF 
1e140     24 E4 05 F1 | 	add	objptr, ##46116
1e144     F2 20 02 FB | 	rdlong	local02, objptr
1e148     5A 00 00 FF 
1e14c     24 E4 85 F1 | 	sub	objptr, ##46116
1e150     4F 20 0E F2 | 	cmp	local02, #79 wz
1e154     50 00 90 5D |  if_ne	jmp	#LR__2346
1e158                 | ' return cursor_x
1e158     3C E4 05 F1 | 	add	objptr, #60
1e15c     F2 20 E2 FA | 	rdword	local02, objptr
1e160     02 20 06 F1 | 	add	local02, #2
1e164     59 00 00 FF 
1e168     F8 E5 05 F1 | 	add	objptr, ##46072
1e16c     F2 20 62 FC | 	wrlong	local02, objptr
1e170                 | '      if cx>254  then cx=254 
1e170     5A 00 00 FF 
1e174     34 E4 85 F1 | 	sub	objptr, ##46132
1e178     FF 20 56 F2 | 	cmps	local02, #255 wc
1e17c     5A 00 00 3F 
1e180     34 E4 05 31 |  if_ae	add	objptr, ##46132
1e184     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
1e188     5A 00 00 3F 
1e18c     34 E4 85 31 |  if_ae	sub	objptr, ##46132
1e190     5A 00 00 FF 
1e194     34 E4 05 F1 | 	add	objptr, ##46132
1e198     F2 12 02 FB | 	rdlong	arg01, objptr
1e19c     5A 00 00 FF 
1e1a0     34 E4 85 F1 | 	sub	objptr, ##46132
1e1a4     EC 13 B0 FD | 	call	#_hg010b_spin2_setcursorx
1e1a8                 | LR__2346
1e1a8                 | '   ' print key3 and 255
1e1a8                 | '    
1e1a8                 | '    if key4=73 then ' ins
1e1a8     5A 00 00 FF 
1e1ac     24 E4 05 F1 | 	add	objptr, ##46116
1e1b0     F2 28 02 FB | 	rdlong	local06, objptr
1e1b4     5A 00 00 FF 
1e1b8     24 E4 85 F1 | 	sub	objptr, ##46116
1e1bc     49 28 0E F2 | 	cmp	local06, #73 wz
1e1c0     38 00 90 5D |  if_ne	jmp	#LR__2349
1e1c4     5A 00 00 FF 
1e1c8     10 E4 05 F1 | 	add	objptr, ##46096
1e1cc     F2 20 02 FB | 	rdlong	local02, objptr
1e1d0     10 29 22 F6 | 	not	local06, local02
1e1d4     F2 28 62 FC | 	wrlong	local06, objptr
1e1d8                 | '      if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
1e1d8     5A 00 00 FF 
1e1dc     10 E4 85 F1 | 	sub	objptr, ##46096
1e1e0     00 28 0E F2 | 	cmp	local06, #0 wz
1e1e4     0C 00 90 AD |  if_e	jmp	#LR__2347
1e1e8     0E 12 06 F6 | 	mov	arg01, #14
1e1ec     28 02 B0 FD | 	call	#_hg010b_spin2_setcursorshape
1e1f0     08 00 90 FD | 	jmp	#LR__2348
1e1f4                 | LR__2347
1e1f4     00 12 06 F6 | 	mov	arg01, #0
1e1f8     1C 02 B0 FD | 	call	#_hg010b_spin2_setcursorshape
1e1fc                 | LR__2348
1e1fc                 | LR__2349
1e1fc     5A 00 00 FF 
1e200     1C E4 05 F1 | 	add	objptr, ##46108
1e204     F2 00 68 FC | 	wrlong	#0, objptr
1e208     5A 00 00 FF 
1e20c     1C E4 85 F1 | 	sub	objptr, ##46108
1e210     84 EE 9F FD | 	jmp	#LR__2300
1e214     A7 F0 03 F6 | 	mov	ptra, fp
1e218     B2 00 A0 FD | 	call	#popregs_
1e21c                 | _program_ret
1e21c     2D 00 64 FD | 	ret
1e220                 | 
1e220                 | ' '' this is not a main program.
1e220                 | ' 
1e220                 | ' '****************************************************************************************************************
1e220                 | ' '                                                                                                             	*
1e220                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
1e220                 | ' '                                                                                                            	*
1e220                 | ' ' base - HDMI base pin												*
1e220                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1e220                 | ' '														*
1e220                 | ' '														*
1e220                 | ' '****************************************************************************************************************
1e220                 | ' 
1e220                 | ' pub start(base,mb):result |i
1e220                 | _hg010b_spin2_start
1e220                 | ' 
1e220                 | ' '--------------------------- initialize pointers and variables
1e220                 | ' 
1e220                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1e220     34 E4 05 F1 | 	add	objptr, #52
1e224     F2 FA 01 F6 | 	mov	result1, objptr
1e228     28 E4 85 F1 | 	sub	objptr, #40
1e22c     F2 FA 61 FC | 	wrlong	result1, objptr
1e230                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1e230                 | ' hdmibase:=base							' HDMI base pin, 8*n
1e230     18 E4 05 F1 | 	add	objptr, #24
1e234     F2 12 62 FC | 	wrlong	arg01, objptr
1e238                 | ' mailbox_ptr:=mb		
1e238     04 E4 05 F1 | 	add	objptr, #4
1e23c     F2 14 62 FC | 	wrlong	arg02, objptr
1e240                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1e240     C1 E5 05 F1 | 	add	objptr, #449
1e244     F2 14 62 FC | 	wrlong	arg02, objptr
1e248                 | ' sprite_ptr:=@spr1ptr
1e248     D8 E4 85 F1 | 	sub	objptr, #216
1e24c     F2 FA 01 F6 | 	mov	result1, objptr
1e250     E5 E4 85 F1 | 	sub	objptr, #229
1e254     F2 FA 61 FC | 	wrlong	result1, objptr
1e258                 | ' 
1e258                 | ' 		'
1e258                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1e258     E5 E4 05 F1 | 	add	objptr, #229
1e25c     F2 FA 01 FB | 	rdlong	result1, objptr
1e260     D0 FA 05 F1 | 	add	result1, #208
1e264     FD 10 58 FC | 	wrword	#8, result1
1e268                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1e268     F2 16 02 FB | 	rdlong	arg03, objptr
1e26c     D2 16 06 F1 | 	add	arg03, #210
1e270     0B 21 58 FC | 	wrword	#16, arg03
1e274                 | ' leading_spaces:=0				'
1e274     A5 E5 05 F1 | 	add	objptr, #421
1e278     F2 00 68 FC | 	wrlong	#0, objptr
1e27c                 | ' 
1e27c                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1e27c     99 E4 85 F1 | 	sub	objptr, #153
1e280     00 00 A0 FF 
1e284     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1e288                 | ' emptydl[1]:=0
1e288     04 E4 05 F1 | 	add	objptr, #4
1e28c     F2 00 68 FC | 	wrlong	#0, objptr
1e290                 | ' 
1e290                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1e290                 | ' 
1e290                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1e290     28 E5 85 F1 | 	sub	objptr, #296
1e294     F2 02 68 FC | 	wrlong	#1, objptr
1e298                 | ' if s_debug<>0
1e298                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1e298     20 00 80 FF 
1e29c     F2 00 68 FC | 	wrlong	##16384, objptr
1e2a0     F9 E4 85 F1 | 	sub	objptr, #249
1e2a4                 | ' setmode()							' set the mode, see below
1e2a4     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
1e2a8                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1e2a8     49 E4 05 F1 | 	add	objptr, #73
1e2ac     F2 FA 01 F6 | 	mov	result1, objptr
1e2b0     35 E4 85 F1 | 	sub	objptr, #53
1e2b4     F2 FA 61 FC | 	wrlong	result1, objptr
1e2b8                 | ' cursor_ptr:=@cursor_x						
1e2b8     28 E4 05 F1 | 	add	objptr, #40
1e2bc     F2 16 02 F6 | 	mov	arg03, objptr
1e2c0     2C E4 85 F1 | 	sub	objptr, #44
1e2c4     F2 16 62 FC | 	wrlong	arg03, objptr
1e2c8                 | ' fontnum:=0  							' start with a PC type font 
1e2c8     55 E4 05 F1 | 	add	objptr, #85
1e2cc     F2 00 68 FC | 	wrlong	#0, objptr
1e2d0                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1e2d0     1C E4 05 F1 | 	add	objptr, #28
1e2d4     F2 12 02 F6 | 	mov	arg01, objptr
1e2d8     81 E4 85 F1 | 	sub	objptr, #129
1e2dc     10 00 00 FF 
1e2e0     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1e2e4     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1e2e8     10 00 00 FF 
1e2ec     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1e2f0     10 16 06 F6 | 	mov	arg03, #16
1e2f4     38 29 B0 FD | 	call	#__system____builtin_memmove
1e2f8                 | ' leading_spaces:=0
1e2f8     01 00 00 FF 
1e2fc     B6 E4 05 F1 | 	add	objptr, ##694
1e300     F2 00 68 FC | 	wrlong	#0, objptr
1e304     01 00 00 FF 
1e308     B6 E4 85 F1 | 	sub	objptr, ##694
1e30c                 | ' '---------------------------- initialize a cursor (MSDOS type)
1e30c                 | ' 
1e30c                 | ' initcursor(154)
1e30c     9A 12 06 F6 | 	mov	arg01, #154
1e310     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1e314                 | ' 
1e314                 | ' '---------------------------- start the cog
1e314                 | ' 
1e314                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1e314     10 00 00 FF 
1e318     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1e31c     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1e320     10 00 00 FF 
1e324     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1e328     14 E4 05 F1 | 	add	objptr, #20
1e32c     10 FA 05 F6 | 	mov	result1, #16
1e330     28 E4 61 FD | 	setq	objptr
1e334     0A FB F1 FC | 	coginit	result1, arg02 wc
1e338     01 FA 65 C6 |  if_b	neg	result1, #1
1e33c     1C E4 05 F1 | 	add	objptr, #28
1e340     F2 FA 61 FC | 	wrlong	result1, objptr
1e344     30 E4 85 F1 | 	sub	objptr, #48
1e348                 | ' waitms(40)							' wait for stabilize
1e348     28 12 06 F6 | 	mov	arg01, #40
1e34c     B4 2C B0 FD | 	call	#__system___waitms
1e350                 | ' return cog							' return the driver's cog #
1e350     30 E4 05 F1 | 	add	objptr, #48
1e354     F2 FA 01 FB | 	rdlong	result1, objptr
1e358     30 E4 85 F1 | 	sub	objptr, #48
1e35c                 | _hg010b_spin2_start_ret
1e35c     2D 00 64 FD | 	ret
1e360                 | 
1e360                 | ' 
1e360                 | ' 
1e360                 | ' '**************************************************************************************************************** 
1e360                 | ' '                                                                                                             	*
1e360                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1e360                 | ' '  Mode number - see start() above or bits below								*
1e360                 | ' '                                                                                                             	*
1e360                 | ' '****************************************************************************************************************
1e360                 | ' 
1e360                 | ' '---------------------------- initialize a cursor (MSDOS type)
1e360                 | ' pub initcursor(color) |i
1e360                 | _hg010b_spin2_initcursor
1e360     03 4A 05 F6 | 	mov	COUNT_, #3
1e364     A8 00 A0 FD | 	call	#pushregs_
1e368     09 1F 02 F6 | 	mov	local01, arg01
1e36c                 | ' 
1e36c                 | ' cursor_x:=0							' place the cursor at 0:0
1e36c     3C E4 05 F1 | 	add	objptr, #60
1e370     F2 00 58 FC | 	wrword	#0, objptr
1e374                 | ' cursor_y:=0
1e374     02 E4 05 F1 | 	add	objptr, #2
1e378     F2 00 48 FC | 	wrbyte	#0, objptr
1e37c                 | ' repeat i from 0 to 111
1e37c     00 20 06 F6 | 	mov	local02, #0
1e380     F8 E5 05 F1 | 	add	objptr, #504
1e384     97 1A 48 FB | 	callpa	#(@LR__2352-@LR__2350)>>2,fcache_load_ptr_
1e388                 | LR__2350
1e388                 | '   cursor[i]:=0
1e388     10 23 02 F6 | 	mov	local03, local02
1e38c     F2 22 02 F1 | 	add	local03, objptr
1e390     11 01 48 FC | 	wrbyte	#0, local03
1e394     01 20 06 F1 | 	add	local02, #1
1e398     70 20 56 F2 | 	cmps	local02, #112 wc
1e39c     E8 FF 9F CD |  if_b	jmp	#LR__2350
1e3a0                 | ' repeat i from 112 to 127
1e3a0     70 20 06 F6 | 	mov	local02, #112
1e3a4                 | LR__2351
1e3a4                 | '   cursor[i]:=color  
1e3a4     10 23 02 F6 | 	mov	local03, local02
1e3a8     F2 22 02 F1 | 	add	local03, objptr
1e3ac     11 1F 42 FC | 	wrbyte	local01, local03
1e3b0     01 20 06 F1 | 	add	local02, #1
1e3b4     80 20 16 F2 | 	cmp	local02, #128 wc
1e3b8     E8 FF 9F CD |  if_b	jmp	#LR__2351
1e3bc                 | LR__2352
1e3bc                 | ' 'repeat i from 0 to 127
1e3bc                 | ' '  if ((i/8)//2)
1e3bc                 | ' '    cursor[i]:=15
1e3bc                 | ' '  else
1e3bc                 | ' '    cursor[i]:=0
1e3bc                 | ' '  if i>=120    
1e3bc                 | ' '    cursor[i]:=40
1e3bc                 | ' setspriteptr(17,@cursor)
1e3bc     F2 14 02 F6 | 	mov	arg02, objptr
1e3c0     01 00 00 FF 
1e3c4     36 E4 85 F1 | 	sub	objptr, ##566
1e3c8     11 12 06 F6 | 	mov	arg01, #17
1e3cc     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1e3d0                 | ' setspritesize(17,8,16)
1e3d0     11 12 06 F6 | 	mov	arg01, #17
1e3d4     08 14 06 F6 | 	mov	arg02, #8
1e3d8     10 16 06 F6 | 	mov	arg03, #16
1e3dc     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
1e3e0                 | ' setspritepos(17,0,0)
1e3e0     11 12 06 F6 | 	mov	arg01, #17
1e3e4     00 14 06 F6 | 	mov	arg02, #0
1e3e8     00 16 06 F6 | 	mov	arg03, #0
1e3ec     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
1e3f0                 | ' cursorshape:=14
1e3f0     0B 00 00 FF 
1e3f4     C6 E4 05 F1 | 	add	objptr, ##5830
1e3f8     F2 1C 68 FC | 	wrlong	#14, objptr
1e3fc                 | ' cursorcolor:=color
1e3fc     04 E4 85 F1 | 	sub	objptr, #4
1e400     F2 1E 62 FC | 	wrlong	local01, objptr
1e404     0B 00 00 FF 
1e408     C2 E4 85 F1 | 	sub	objptr, ##5826
1e40c     A7 F0 03 F6 | 	mov	ptra, fp
1e410     B2 00 A0 FD | 	call	#popregs_
1e414                 | _hg010b_spin2_initcursor_ret
1e414     2D 00 64 FD | 	ret
1e418                 | 
1e418                 | ' 
1e418                 | ' pub setcursorshape(shape) | i
1e418                 | _hg010b_spin2_setcursorshape
1e418                 | ' 
1e418                 | ' cursorshape:=shape
1e418     0B 00 00 FF 
1e41c     C6 E4 05 F1 | 	add	objptr, ##5830
1e420     F2 12 62 FC | 	wrlong	arg01, objptr
1e424                 | ' repeat i from 0 to (8*cursorshape)-1
1e424     00 00 06 F6 | 	mov	_var01, #0
1e428     09 03 02 F6 | 	mov	_var02, arg01
1e42c     03 02 66 F0 | 	shl	_var02, #3
1e430     01 02 86 F1 | 	sub	_var02, #1
1e434     00 02 56 F2 | 	cmps	_var02, #0 wc
1e438     01 04 86 F6 | 	negc	_var03, #1
1e43c     02 07 02 F6 | 	mov	_var04, _var03
1e440     02 03 02 F1 | 	add	_var02, _var03
1e444     0A 00 00 FF 
1e448     90 E4 85 F1 | 	sub	objptr, ##5264
1e44c     97 0C 48 FB | 	callpa	#(@LR__2361-@LR__2360)>>2,fcache_load_ptr_
1e450                 | LR__2360
1e450                 | '   cursor[i]:=0
1e450     00 05 02 F6 | 	mov	_var03, _var01
1e454     F2 04 02 F1 | 	add	_var03, objptr
1e458     02 01 48 FC | 	wrbyte	#0, _var03
1e45c     03 01 02 F1 | 	add	_var01, _var04
1e460     01 01 0A F2 | 	cmp	_var01, _var02 wz
1e464     E8 FF 9F 5D |  if_ne	jmp	#LR__2360
1e468                 | LR__2361
1e468                 | ' repeat i from 8*cursorshape to 127
1e468     0A 00 00 FF 
1e46c     90 E4 05 F1 | 	add	objptr, ##5264
1e470     F2 06 02 FB | 	rdlong	_var04, objptr
1e474     03 01 02 F6 | 	mov	_var01, _var04
1e478     03 00 66 F0 | 	shl	_var01, #3
1e47c     0B 00 00 FF 
1e480     C6 E4 85 F1 | 	sub	objptr, ##5830
1e484     03 06 66 F0 | 	shl	_var04, #3
1e488     80 06 56 F2 | 	cmps	_var04, #128 wc
1e48c     01 04 A6 F6 | 	negnc	_var03, #1
1e490     7F 02 06 F6 | 	mov	_var02, #127
1e494     02 03 02 F1 | 	add	_var02, _var03
1e498     97 1A 48 FB | 	callpa	#(@LR__2363-@LR__2362)>>2,fcache_load_ptr_
1e49c                 | LR__2362
1e49c                 | '   cursor[i]:=cursorcolor
1e49c     00 07 02 F6 | 	mov	_var04, _var01
1e4a0     01 00 00 FF 
1e4a4     36 E4 05 F1 | 	add	objptr, ##566
1e4a8     F2 06 02 F1 | 	add	_var04, objptr
1e4ac     0A 00 00 FF 
1e4b0     8C E4 05 F1 | 	add	objptr, ##5260
1e4b4     F2 12 02 FB | 	rdlong	arg01, objptr
1e4b8     0B 00 00 FF 
1e4bc     C2 E4 85 F1 | 	sub	objptr, ##5826
1e4c0     03 13 42 FC | 	wrbyte	arg01, _var04
1e4c4     02 01 02 F1 | 	add	_var01, _var03
1e4c8     01 01 0A F2 | 	cmp	_var01, _var02 wz
1e4cc     CC FF 9F 5D |  if_ne	jmp	#LR__2362
1e4d0                 | LR__2363
1e4d0                 | _hg010b_spin2_setcursorshape_ret
1e4d0     2D 00 64 FD | 	ret
1e4d4                 | 
1e4d4                 | ' 
1e4d4                 | ' pub setcursorcolor(color) | i
1e4d4                 | _hg010b_spin2_setcursorcolor
1e4d4                 | ' 
1e4d4                 | ' cursorcolor:=color
1e4d4     0B 00 00 FF 
1e4d8     C2 E4 05 F1 | 	add	objptr, ##5826
1e4dc     F2 12 62 FC | 	wrlong	arg01, objptr
1e4e0                 | ' repeat i from 0 to (8*cursorshape)-1
1e4e0     00 12 06 F6 | 	mov	arg01, #0
1e4e4     04 E4 05 F1 | 	add	objptr, #4
1e4e8     F2 00 02 FB | 	rdlong	_var01, objptr
1e4ec     03 00 66 F0 | 	shl	_var01, #3
1e4f0     01 00 86 F1 | 	sub	_var01, #1
1e4f4     00 00 56 F2 | 	cmps	_var01, #0 wc
1e4f8     01 02 86 F6 | 	negc	_var02, #1
1e4fc     01 05 02 F6 | 	mov	_var03, _var02
1e500     01 01 02 F1 | 	add	_var01, _var02
1e504     0A 00 00 FF 
1e508     90 E4 85 F1 | 	sub	objptr, ##5264
1e50c     97 0C 48 FB | 	callpa	#(@LR__2371-@LR__2370)>>2,fcache_load_ptr_
1e510                 | LR__2370
1e510                 | '   cursor[i]:=0
1e510     09 03 02 F6 | 	mov	_var02, arg01
1e514     F2 02 02 F1 | 	add	_var02, objptr
1e518     01 01 48 FC | 	wrbyte	#0, _var02
1e51c     02 13 02 F1 | 	add	arg01, _var03
1e520     00 13 0A F2 | 	cmp	arg01, _var01 wz
1e524     E8 FF 9F 5D |  if_ne	jmp	#LR__2370
1e528                 | LR__2371
1e528                 | ' repeat i from 8*cursorshape to 127
1e528     0A 00 00 FF 
1e52c     90 E4 05 F1 | 	add	objptr, ##5264
1e530     F2 04 02 FB | 	rdlong	_var03, objptr
1e534     02 13 02 F6 | 	mov	arg01, _var03
1e538     03 12 66 F0 | 	shl	arg01, #3
1e53c     0B 00 00 FF 
1e540     C6 E4 85 F1 | 	sub	objptr, ##5830
1e544     03 04 66 F0 | 	shl	_var03, #3
1e548     80 04 56 F2 | 	cmps	_var03, #128 wc
1e54c     01 02 A6 F6 | 	negnc	_var02, #1
1e550     7F 00 06 F6 | 	mov	_var01, #127
1e554     01 01 02 F1 | 	add	_var01, _var02
1e558     97 1A 48 FB | 	callpa	#(@LR__2373-@LR__2372)>>2,fcache_load_ptr_
1e55c                 | LR__2372
1e55c                 | '   cursor[i]:=cursorcolor
1e55c     09 05 02 F6 | 	mov	_var03, arg01
1e560     01 00 00 FF 
1e564     36 E4 05 F1 | 	add	objptr, ##566
1e568     F2 04 02 F1 | 	add	_var03, objptr
1e56c     0A 00 00 FF 
1e570     8C E4 05 F1 | 	add	objptr, ##5260
1e574     F2 06 02 FB | 	rdlong	_var04, objptr
1e578     0B 00 00 FF 
1e57c     C2 E4 85 F1 | 	sub	objptr, ##5826
1e580     02 07 42 FC | 	wrbyte	_var04, _var03
1e584     01 13 02 F1 | 	add	arg01, _var02
1e588     00 13 0A F2 | 	cmp	arg01, _var01 wz
1e58c     CC FF 9F 5D |  if_ne	jmp	#LR__2372
1e590                 | LR__2373
1e590                 | _hg010b_spin2_setcursorcolor_ret
1e590     2D 00 64 FD | 	ret
1e594                 | 
1e594                 | '   
1e594                 | '   
1e594                 | '   
1e594                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1e594                 | _hg010b_spin2_setmode
1e594     02 4A 05 F6 | 	mov	COUNT_, #2
1e598     A8 00 A0 FD | 	call	#pushregs_
1e59c                 | ' 
1e59c                 | ' 
1e59c                 | ' dl_ptr:=@emptydl[0]
1e59c     01 00 00 FF 
1e5a0     1D E4 05 F1 | 	add	objptr, ##541
1e5a4     F2 1A 02 F6 | 	mov	arg05, objptr
1e5a8     FD E5 85 F1 | 	sub	objptr, #509
1e5ac     F2 1A 62 FC | 	wrlong	arg05, objptr
1e5b0                 | ' 
1e5b0                 | ' if cog>0 
1e5b0     10 E4 05 F1 | 	add	objptr, #16
1e5b4     F2 1A 02 FB | 	rdlong	arg05, objptr
1e5b8     30 E4 85 F1 | 	sub	objptr, #48
1e5bc     01 1A 56 F2 | 	cmps	arg05, #1 wc
1e5c0                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1e5c0     01 12 06 36 |  if_ae	mov	arg01, #1
1e5c4     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1e5c8                 | ' xres:=1024
1e5c8     01 00 00 FF 
1e5cc     26 E4 05 F1 | 	add	objptr, ##550
1e5d0     02 00 80 FF 
1e5d4     F2 00 68 FC | 	wrlong	##1024, objptr
1e5d8                 | ' yres:=600
1e5d8     04 E4 05 F1 | 	add	objptr, #4
1e5dc     01 00 80 FF 
1e5e0     F2 B0 68 FC | 	wrlong	##600, objptr
1e5e4                 | ' ppl:=(timings[3])
1e5e4     10 00 00 FF 
1e5e8     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1e5ec     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1e5f0     51 E5 85 F1 | 	sub	objptr, #337
1e5f4     F2 1A 62 FC | 	wrlong	arg05, objptr
1e5f8                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1e5f8     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1e5fc     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1e600     01 1E 66 F0 | 	shl	local01, #1
1e604     80 E4 85 F1 | 	sub	objptr, #128
1e608     F2 1E 62 FC | 	wrlong	local01, objptr
1e60c                 | ' cpl1:=cpl '' todo remove
1e60c     04 E4 05 F1 | 	add	objptr, #4
1e610     F2 1E 62 FC | 	wrlong	local01, objptr
1e614                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1e614     02 00 00 FF 
1e618     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1e61c     41 E4 85 F1 | 	sub	objptr, #65
1e620     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1e624                 | ' repeat i from 0 to 3
1e624     00 20 06 F6 | 	mov	local02, #0
1e628     02 00 00 FF 
1e62c     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1e630     08 E4 05 F1 | 	add	objptr, #8
1e634     97 20 48 FB | 	callpa	#(@LR__2381-@LR__2380)>>2,fcache_load_ptr_
1e638                 | LR__2380
1e638                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1e638     10 1F 02 F6 | 	mov	local01, local02
1e63c     02 1E 66 F0 | 	shl	local01, #2
1e640     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1e644     F2 1A 02 FB | 	rdlong	arg05, objptr
1e648     11 1A 66 F0 | 	shl	arg05, #17
1e64c     0F 1F 02 FB | 	rdlong	local01, local01
1e650     0D 1F 02 F1 | 	add	local01, arg05
1e654     80 40 38 FF 
1e658     00 1E 06 F1 | 	add	local01, ##1887502336
1e65c     10 1B 02 F6 | 	mov	arg05, local02
1e660     02 1A 66 F0 | 	shl	arg05, #2
1e664     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
1e668     0D 1F 62 FC | 	wrlong	local01, arg05
1e66c     01 20 06 F1 | 	add	local02, #1
1e670     04 20 56 F2 | 	cmps	local02, #4 wc
1e674     C0 FF 9F CD |  if_b	jmp	#LR__2380
1e678                 | LR__2381
1e678     24 E4 85 F1 | 	sub	objptr, #36
1e67c                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1e67c     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1e680     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1e684     14 1E 66 FC | 	wrlong	local01, #20
1e688                 | ' hubset(timings[10])
1e688     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1e68c     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1e690     10 00 00 FF 
1e694     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1e698     00 12 62 FD | 	hubset	arg01
1e69c                 | ' waitms(1)                                                   	' wait for stabilization
1e69c     01 12 06 F6 | 	mov	arg01, #1
1e6a0     60 29 B0 FD | 	call	#__system___waitms
1e6a4     10 00 00 FF 
1e6a8     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1e6ac     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1e6b0     61 E4 05 F1 | 	add	objptr, #97
1e6b4     F2 20 62 FC | 	wrlong	local02, objptr
1e6b8     10 1F 52 F6 | 	abs	local01, local02 wc
1e6bc     04 1E 46 F0 | 	shr	local01, #4
1e6c0     0F 1F 82 F6 | 	negc	local01, local01
1e6c4     9C E4 05 F1 | 	add	objptr, #156
1e6c8     F2 1E 62 FC | 	wrlong	local01, objptr
1e6cc     A4 E4 85 F1 | 	sub	objptr, #164
1e6d0     F2 20 02 FB | 	rdlong	local02, objptr
1e6d4     08 E4 05 F1 | 	add	objptr, #8
1e6d8     F2 1E 02 FB | 	rdlong	local01, objptr
1e6dc     0F 21 02 FD | 	qmul	local02, local01
1e6e0                 | ' lines:=timings[11]
1e6e0                 | ' t_lines:=lines/16
1e6e0                 | ' buflen:=cpl*lines						' framebuffer length in longs
1e6e0     29 E4 85 F1 | 	sub	objptr, #41
1e6e4     19 1E C6 F9 | 	decod	local01, #25
1e6e8     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
1e6ec     18 20 62 FD | 	getqx	local02
1e6f0     F2 20 62 FC | 	wrlong	local02, objptr
1e6f4     38 E4 85 F1 | 	sub	objptr, #56
1e6f8     02 20 66 F0 | 	shl	local02, #2
1e6fc     10 1F 82 F1 | 	sub	local01, local02
1e700     F2 1E 62 FC | 	wrlong	local01, objptr
1e704     FD E4 05 F1 | 	add	objptr, #253
1e708     F2 20 02 FB | 	rdlong	local02, objptr
1e70c     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1e710     0D 21 02 FD | 	qmul	local02, arg05
1e714                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1e714                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
1e714     F9 E4 85 F1 | 	sub	objptr, #249
1e718                 | ' mode_ptr:=@timings						' set pointers to timings
1e718     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
1e71c                 | ' graphmode:=1024+512+192+48							' det global variable
1e71c                 | ' makedl(graphmode)							' make a DL for the mode
1e71c     03 00 00 FF 
1e720     F0 12 06 F6 | 	mov	arg01, ##1776
1e724     18 20 62 FD | 	getqx	local02
1e728     10 1F 82 F1 | 	sub	local01, local02
1e72c     F2 1E 62 FC | 	wrlong	local01, objptr
1e730     14 E4 05 F1 | 	add	objptr, #20
1e734     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1e738     79 E4 05 F1 | 	add	objptr, #121
1e73c     03 00 80 FF 
1e740     F2 E0 69 FC | 	wrlong	##1776, objptr
1e744     91 E4 85 F1 | 	sub	objptr, #145
1e748     10 00 00 FF 
1e74c     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1e750     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
1e754                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1e754     F2 1E 02 FB | 	rdlong	local01, objptr
1e758     DD E4 05 F1 | 	add	objptr, #221
1e75c     F2 1E 62 FC | 	wrlong	local01, objptr
1e760                 | ' s_font_ptr:=font_ptr
1e760     D5 E4 85 F1 | 	sub	objptr, #213
1e764     F2 1E 02 FB | 	rdlong	local01, objptr
1e768     D9 E4 05 F1 | 	add	objptr, #217
1e76c     F2 1E 62 FC | 	wrlong	local01, objptr
1e770                 | ' s_lines:=lines
1e770     80 E4 85 F1 | 	sub	objptr, #128
1e774     F2 1E 02 FB | 	rdlong	local01, objptr
1e778     84 E4 05 F1 | 	add	objptr, #132
1e77c     F2 1E 62 FC | 	wrlong	local01, objptr
1e780                 | ' s_buflen:=buflen
1e780     AD E4 85 F1 | 	sub	objptr, #173
1e784     F2 1E 02 FB | 	rdlong	local01, objptr
1e788     B5 E4 05 F1 | 	add	objptr, #181
1e78c     F2 1E 62 FC | 	wrlong	local01, objptr
1e790                 | ' s_cpl:=cpl
1e790     94 E4 85 F1 | 	sub	objptr, #148
1e794     F2 1E 02 FB | 	rdlong	local01, objptr
1e798     90 E4 05 F1 | 	add	objptr, #144
1e79c     F2 1E 62 FC | 	wrlong	local01, objptr
1e7a0                 | ' s_cpl1:=cpl
1e7a0     90 E4 85 F1 | 	sub	objptr, #144
1e7a4     F2 1E 02 FB | 	rdlong	local01, objptr
1e7a8     98 E4 05 F1 | 	add	objptr, #152
1e7ac     F2 1E 62 FC | 	wrlong	local01, objptr
1e7b0                 | ' st_lines:=t_lines
1e7b0     0C E4 05 F1 | 	add	objptr, #12
1e7b4     F2 1E 02 FB | 	rdlong	local01, objptr
1e7b8     04 E4 05 F1 | 	add	objptr, #4
1e7bc     F2 1E 62 FC | 	wrlong	local01, objptr
1e7c0                 | ' ppl:=ppl/xzoom  
1e7c0     28 E4 85 F1 | 	sub	objptr, #40
1e7c4     F2 64 02 FB | 	rdlong	muldiva_, objptr
1e7c8     2C E4 05 F1 | 	add	objptr, #44
1e7cc     F2 66 02 FB | 	rdlong	muldivb_, objptr
1e7d0     05 E5 85 F1 | 	sub	objptr, #261
1e7d4     BA 00 A0 FD | 	call	#divide_
1e7d8     D9 E4 05 F1 | 	add	objptr, #217
1e7dc     F2 66 62 FC | 	wrlong	muldivb_, objptr
1e7e0                 | ' s_ppl:=ppl
1e7e0     1C E4 05 F1 | 	add	objptr, #28
1e7e4     F2 66 62 FC | 	wrlong	muldivb_, objptr
1e7e8     F5 E4 85 F1 | 	sub	objptr, #245
1e7ec                 | ' waitms(20)							' wait 
1e7ec     14 12 06 F6 | 	mov	arg01, #20
1e7f0     10 28 B0 FD | 	call	#__system___waitms
1e7f4                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1e7f4     04 E4 05 F1 | 	add	objptr, #4
1e7f8     F2 12 02 FB | 	rdlong	arg01, objptr
1e7fc     04 E4 85 F1 | 	sub	objptr, #4
1e800     F2 16 02 FB | 	rdlong	arg03, objptr
1e804     09 17 82 F1 | 	sub	arg03, arg01
1e808     20 14 06 F6 | 	mov	arg02, #32
1e80c     00 18 06 F6 | 	mov	arg04, #0
1e810     01 1A 06 F6 | 	mov	arg05, #1
1e814     0B 00 00 FF 
1e818     CC E4 05 F1 | 	add	objptr, ##5836
1e81c     E8 19 B0 FD | 	call	#_psram_spin2_fill
1e820     0B 00 00 FF 
1e824     CC E4 85 F1 | 	sub	objptr, ##5836
1e828     A7 F0 03 F6 | 	mov	ptra, fp
1e82c     B2 00 A0 FD | 	call	#popregs_
1e830                 | _hg010b_spin2_setmode_ret
1e830     2D 00 64 FD | 	ret
1e834                 | 
1e834                 | ' 
1e834                 | ' '****************************************************************************************************************
1e834                 | ' '                                                                                                             	*
1e834                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1e834                 | ' '                                                                                                             	*
1e834                 | ' '****************************************************************************************************************
1e834                 | ' 
1e834                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1e834                 | _hg010b_spin2_makedl
1e834                 | ' 
1e834                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1e834                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1e834                 | ' repeat i from 0 to 11                                                           ' clear DL
1e834     00 00 06 F6 | 	mov	_var01, #0
1e838     ED E5 05 F1 | 	add	objptr, #493
1e83c     97 0E 48 FB | 	callpa	#(@LR__2391-@LR__2390)>>2,fcache_load_ptr_
1e840                 | LR__2390
1e840                 | '   displaylist[i]:=0 
1e840     00 03 02 F6 | 	mov	_var02, _var01
1e844     02 02 66 F0 | 	shl	_var02, #2
1e848     F2 02 02 F1 | 	add	_var02, objptr
1e84c     01 01 68 FC | 	wrlong	#0, _var02
1e850     01 00 06 F1 | 	add	_var01, #1
1e854     0C 00 56 F2 | 	cmps	_var01, #12 wc
1e858     E4 FF 9F CD |  if_b	jmp	#LR__2390
1e85c                 | LR__2391
1e85c                 | '                         ' 
1e85c                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1e85c     8C E5 85 F1 | 	sub	objptr, #396
1e860     F2 02 02 FB | 	rdlong	_var02, objptr
1e864     14 02 66 F0 | 	shl	_var02, #20
1e868     01 02 06 F1 | 	add	_var02, #1
1e86c     04 E4 85 F1 | 	sub	objptr, #4
1e870     F2 00 02 FB | 	rdlong	_var01, objptr
1e874     02 00 66 F0 | 	shl	_var01, #2
1e878     04 00 66 F0 | 	shl	_var01, #4
1e87c     00 03 02 F1 | 	add	_var02, _var01
1e880     90 E5 05 F1 | 	add	objptr, #400
1e884     F2 02 62 FC | 	wrlong	_var02, objptr
1e888     ED E5 85 F1 | 	sub	objptr, #493
1e88c                 | ' displaylist[1]:=buf_ptr<<4+%10  
1e88c     F2 02 02 FB | 	rdlong	_var02, objptr
1e890     04 02 66 F0 | 	shl	_var02, #4
1e894     02 02 06 F1 | 	add	_var02, #2
1e898     F1 E5 05 F1 | 	add	objptr, #497
1e89c     F2 02 62 FC | 	wrlong	_var02, objptr
1e8a0                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1e8a0     04 E4 85 F1 | 	sub	objptr, #4
1e8a4     F2 02 02 F6 | 	mov	_var02, objptr
1e8a8     CD E5 85 F1 | 	sub	objptr, #461
1e8ac     F2 02 62 FC | 	wrlong	_var02, objptr
1e8b0     20 E4 85 F1 | 	sub	objptr, #32
1e8b4                 | _hg010b_spin2_makedl_ret
1e8b4     2D 00 64 FD | 	ret
1e8b8                 | 
1e8b8                 | ' 
1e8b8                 | ' 
1e8b8                 | ' '****************************************************************************************************************
1e8b8                 | ' '                                                                        					*
1e8b8                 | ' '  Graphic primitives                                                    					*
1e8b8                 | ' '                                                                        					*
1e8b8                 | ' '****************************************************************************************************************
1e8b8                 | ' 
1e8b8                 | ' pub setspriteptr(num,ptr)
1e8b8                 | _hg010b_spin2_setspriteptr
1e8b8                 | ' long[@spr1ptr+12*num]:=ptr
1e8b8     11 E5 05 F1 | 	add	objptr, #273
1e8bc     F2 00 02 F6 | 	mov	_var01, objptr
1e8c0     09 03 02 F6 | 	mov	_var02, arg01
1e8c4     01 02 66 F0 | 	shl	_var02, #1
1e8c8     09 03 02 F1 | 	add	_var02, arg01
1e8cc     02 02 66 F0 | 	shl	_var02, #2
1e8d0     01 01 02 F1 | 	add	_var01, _var02
1e8d4     00 15 62 FC | 	wrlong	arg02, _var01
1e8d8     11 E5 85 F1 | 	sub	objptr, #273
1e8dc                 | _hg010b_spin2_setspriteptr_ret
1e8dc     2D 00 64 FD | 	ret
1e8e0                 | 
1e8e0                 | ' 
1e8e0                 | ' pub setspritepos(num,x,y)
1e8e0                 | _hg010b_spin2_setspritepos
1e8e0                 | ' if y>601
1e8e0     01 00 00 FF 
1e8e4     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1e8e8                 | '   y:=601
1e8e8     01 00 00 3F 
1e8ec     59 16 06 36 |  if_ae	mov	arg03, ##601
1e8f0                 | ' if x>1024
1e8f0     02 00 00 FF 
1e8f4     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1e8f8                 | '   x:=1024
1e8f8     0A 14 C6 39 |  if_ae	decod	arg02, #10
1e8fc                 | ' word[@spr1ptr+12*num+4]:=x
1e8fc     11 E5 05 F1 | 	add	objptr, #273
1e900     F2 00 02 F6 | 	mov	_var01, objptr
1e904     09 03 02 F6 | 	mov	_var02, arg01
1e908     01 02 66 F0 | 	shl	_var02, #1
1e90c     09 03 02 F1 | 	add	_var02, arg01
1e910     02 02 66 F0 | 	shl	_var02, #2
1e914     01 01 02 F1 | 	add	_var01, _var02
1e918     04 00 06 F1 | 	add	_var01, #4
1e91c     00 15 52 FC | 	wrword	arg02, _var01
1e920                 | ' word[@spr1ptr+12*num+6]:=y
1e920     F2 00 02 F6 | 	mov	_var01, objptr
1e924     09 03 02 F6 | 	mov	_var02, arg01
1e928     01 02 66 F0 | 	shl	_var02, #1
1e92c     09 03 02 F1 | 	add	_var02, arg01
1e930     02 02 66 F0 | 	shl	_var02, #2
1e934     01 01 02 F1 | 	add	_var01, _var02
1e938     06 00 06 F1 | 	add	_var01, #6
1e93c     00 17 52 FC | 	wrword	arg03, _var01
1e940     11 E5 85 F1 | 	sub	objptr, #273
1e944                 | _hg010b_spin2_setspritepos_ret
1e944     2D 00 64 FD | 	ret
1e948                 | 
1e948                 | ' 
1e948                 | ' pub setspritesize(num,w,h)
1e948                 | _hg010b_spin2_setspritesize
1e948                 | ' word[@spr1ptr+12*num+8]:=w
1e948     11 E5 05 F1 | 	add	objptr, #273
1e94c     F2 00 02 F6 | 	mov	_var01, objptr
1e950     09 03 02 F6 | 	mov	_var02, arg01
1e954     01 02 66 F0 | 	shl	_var02, #1
1e958     09 03 02 F1 | 	add	_var02, arg01
1e95c     02 02 66 F0 | 	shl	_var02, #2
1e960     01 01 02 F1 | 	add	_var01, _var02
1e964     08 00 06 F1 | 	add	_var01, #8
1e968     00 15 52 FC | 	wrword	arg02, _var01
1e96c                 | ' word[@spr1ptr+12*num+10]:=h
1e96c     F2 00 02 F6 | 	mov	_var01, objptr
1e970     09 03 02 F6 | 	mov	_var02, arg01
1e974     01 02 66 F0 | 	shl	_var02, #1
1e978     09 03 02 F1 | 	add	_var02, arg01
1e97c     02 02 66 F0 | 	shl	_var02, #2
1e980     01 01 02 F1 | 	add	_var01, _var02
1e984     0A 00 06 F1 | 	add	_var01, #10
1e988     00 17 52 FC | 	wrword	arg03, _var01
1e98c     11 E5 85 F1 | 	sub	objptr, #273
1e990                 | _hg010b_spin2_setspritesize_ret
1e990     2D 00 64 FD | 	ret
1e994                 | 
1e994                 | ' 
1e994                 | ' 
1e994                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1e994                 | ' 
1e994                 | ' 
1e994                 | ' pub putpixel(x,y,c)
1e994                 | _hg010b_spin2_putpixel
1e994     04 4A 05 F6 | 	mov	COUNT_, #4
1e998     A8 00 A0 FD | 	call	#pushregs_
1e99c     09 1F 02 F6 | 	mov	local01, arg01
1e9a0                 | ' 
1e9a0                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1e9a0     00 20 06 F6 | 	mov	local02, #0
1e9a4     00 1E 56 F2 | 	cmps	local01, #0 wc
1e9a8     01 20 66 36 |  if_ae	neg	local02, #1
1e9ac     E9 E4 05 F1 | 	add	objptr, #233
1e9b0     F2 1A 02 FB | 	rdlong	arg05, objptr
1e9b4     02 1A 66 F0 | 	shl	arg05, #2
1e9b8     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1e9bc     11 23 A2 F1 | 	subx	local03, local03
1e9c0     11 21 02 F5 | 	and	local02, local03
1e9c4     00 22 06 F6 | 	mov	local03, #0
1e9c8     00 14 56 F2 | 	cmps	arg02, #0 wc
1e9cc     01 22 66 36 |  if_ae	neg	local03, #1
1e9d0     11 21 02 F5 | 	and	local02, local03
1e9d4     04 E4 85 F1 | 	sub	objptr, #4
1e9d8     F2 22 02 FB | 	rdlong	local03, objptr
1e9dc     E5 E4 85 F1 | 	sub	objptr, #229
1e9e0     11 15 52 F2 | 	cmps	arg02, local03 wc
1e9e4     12 25 A2 F1 | 	subx	local04, local04
1e9e8     12 21 CA F7 | 	test	local02, local04 wz
1e9ec     48 00 90 AD |  if_e	jmp	#LR__2400
1e9f0     DD E4 05 F1 | 	add	objptr, #221
1e9f4     F2 12 02 FB | 	rdlong	arg01, objptr
1e9f8     14 E4 05 F1 | 	add	objptr, #20
1e9fc     F2 24 02 FB | 	rdlong	local04, objptr
1ea00     02 24 66 F0 | 	shl	local04, #2
1ea04     0A 25 02 FD | 	qmul	local04, arg02
1ea08                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1ea08     0B 15 02 F6 | 	mov	arg02, arg03
1ea0c     01 16 06 F6 | 	mov	arg03, #1
1ea10     00 18 06 F6 | 	mov	arg04, #0
1ea14     01 1A 06 F6 | 	mov	arg05, #1
1ea18     0A 00 00 FF 
1ea1c     DB E5 05 F1 | 	add	objptr, ##5595
1ea20     18 24 62 FD | 	getqx	local04
1ea24     0F 25 02 F1 | 	add	local04, local01
1ea28     12 13 02 F1 | 	add	arg01, local04
1ea2c     D8 17 B0 FD | 	call	#_psram_spin2_fill
1ea30     0B 00 00 FF 
1ea34     CC E4 85 F1 | 	sub	objptr, ##5836
1ea38                 | LR__2400
1ea38     A7 F0 03 F6 | 	mov	ptra, fp
1ea3c     B2 00 A0 FD | 	call	#popregs_
1ea40                 | _hg010b_spin2_putpixel_ret
1ea40     2D 00 64 FD | 	ret
1ea44                 | 
1ea44                 | ' 
1ea44                 | ' pub putpixel2(x,y,c)
1ea44                 | _hg010b_spin2_putpixel2
1ea44     02 4A 05 F6 | 	mov	COUNT_, #2
1ea48     A8 00 A0 FD | 	call	#pushregs_
1ea4c     DD E4 05 F1 | 	add	objptr, #221
1ea50     F2 1E 02 FB | 	rdlong	local01, objptr
1ea54     14 E4 05 F1 | 	add	objptr, #20
1ea58     F2 1A 02 FB | 	rdlong	arg05, objptr
1ea5c     02 1A 66 F0 | 	shl	arg05, #2
1ea60     0A 1B 02 FD | 	qmul	arg05, arg02
1ea64                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1ea64     0B 15 02 F6 | 	mov	arg02, arg03
1ea68     01 16 06 F6 | 	mov	arg03, #1
1ea6c     00 18 06 F6 | 	mov	arg04, #0
1ea70     01 1A 06 F6 | 	mov	arg05, #1
1ea74     0A 00 00 FF 
1ea78     DB E5 05 F1 | 	add	objptr, ##5595
1ea7c     18 20 62 FD | 	getqx	local02
1ea80     09 21 02 F1 | 	add	local02, arg01
1ea84     10 1F 02 F1 | 	add	local01, local02
1ea88     0F 13 02 F6 | 	mov	arg01, local01
1ea8c     78 17 B0 FD | 	call	#_psram_spin2_fill
1ea90     0B 00 00 FF 
1ea94     CC E4 85 F1 | 	sub	objptr, ##5836
1ea98     A7 F0 03 F6 | 	mov	ptra, fp
1ea9c     B2 00 A0 FD | 	call	#popregs_
1eaa0                 | _hg010b_spin2_putpixel2_ret
1eaa0     2D 00 64 FD | 	ret
1eaa4                 | 
1eaa4                 | ' 
1eaa4                 | ' pub getpixel2(x,y): c 
1eaa4                 | _hg010b_spin2_getpixel2
1eaa4     02 4A 05 F6 | 	mov	COUNT_, #2
1eaa8     A8 00 A0 FD | 	call	#pushregs_
1eaac     0C F0 07 F1 | 	add	ptra, #12
1eab0     04 4E 05 F1 | 	add	fp, #4
1eab4     A7 12 62 FC | 	wrlong	arg01, fp
1eab8     04 4E 05 F1 | 	add	fp, #4
1eabc     A7 14 62 FC | 	wrlong	arg02, fp
1eac0     08 4E 85 F1 | 	sub	fp, #8
1eac4     A7 00 68 FC | 	wrlong	#0, fp
1eac8     A7 12 02 F6 | 	mov	arg01, fp
1eacc     DD E4 05 F1 | 	add	objptr, #221
1ead0     F2 14 02 FB | 	rdlong	arg02, objptr
1ead4     14 E4 05 F1 | 	add	objptr, #20
1ead8     F2 16 02 FB | 	rdlong	arg03, objptr
1eadc     02 16 66 F0 | 	shl	arg03, #2
1eae0     08 4E 05 F1 | 	add	fp, #8
1eae4     A7 FA 01 FB | 	rdlong	result1, fp
1eae8     FD 16 02 FD | 	qmul	arg03, result1
1eaec                 | ' 
1eaec                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1eaec     04 4E 85 F1 | 	sub	fp, #4
1eaf0     A7 1E 02 FB | 	rdlong	local01, fp
1eaf4     04 4E 85 F1 | 	sub	fp, #4
1eaf8     01 16 06 F6 | 	mov	arg03, #1
1eafc     0A 00 00 FF 
1eb00     DB E5 05 F1 | 	add	objptr, ##5595
1eb04     18 20 62 FD | 	getqx	local02
1eb08     0F 21 02 F1 | 	add	local02, local01
1eb0c     10 15 02 F1 | 	add	arg02, local02
1eb10     BC 15 B0 FD | 	call	#_psram_spin2_read1
1eb14     0B 00 00 FF 
1eb18     CC E4 85 F1 | 	sub	objptr, ##5836
1eb1c                 | ' return c
1eb1c     A7 FA 01 FB | 	rdlong	result1, fp
1eb20     A7 F0 03 F6 | 	mov	ptra, fp
1eb24     B2 00 A0 FD | 	call	#popregs_
1eb28                 | _hg010b_spin2_getpixel2_ret
1eb28     2D 00 64 FD | 	ret
1eb2c                 | 
1eb2c                 | '   
1eb2c                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1eb2c                 | ' 
1eb2c                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1eb2c                 | _hg010b_spin2_fastline
1eb2c     02 4A 05 F6 | 	mov	COUNT_, #2
1eb30     A8 00 A0 FD | 	call	#pushregs_
1eb34     09 1F 02 F6 | 	mov	local01, arg01
1eb38     0A 21 02 F6 | 	mov	local02, arg02
1eb3c                 | ' 
1eb3c                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1eb3c     00 16 56 F2 | 	cmps	arg03, #0 wc
1eb40     F4 00 90 CD |  if_b	jmp	#LR__2410
1eb44     01 00 00 FF 
1eb48     2A E4 05 F1 | 	add	objptr, ##554
1eb4c     F2 1A 02 FB | 	rdlong	arg05, objptr
1eb50     01 00 00 FF 
1eb54     2A E4 85 F1 | 	sub	objptr, ##554
1eb58     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1eb5c     D8 00 90 3D |  if_ae	jmp	#LR__2410
1eb60     00 1E 56 F2 | 	cmps	local01, #0 wc
1eb64     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1eb68     CC 00 90 CD |  if_b	jmp	#LR__2410
1eb6c     01 00 00 FF 
1eb70     26 E4 05 F1 | 	add	objptr, ##550
1eb74     F2 1A 02 FB | 	rdlong	arg05, objptr
1eb78     01 00 00 FF 
1eb7c     26 E4 85 F1 | 	sub	objptr, ##550
1eb80     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1eb84     01 00 00 1F 
1eb88     26 E4 05 11 |  if_a	add	objptr, ##550
1eb8c     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1eb90     01 00 00 1F 
1eb94     26 E4 85 11 |  if_a	sub	objptr, ##550
1eb98     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1eb9c                 | '   return
1eb9c     98 00 90 1D |  if_a	jmp	#LR__2410
1eba0     10 1F 5A F2 | 	cmps	local01, local02 wcz
1eba4     0F 1B 02 16 |  if_a	mov	arg05, local01
1eba8     10 1F 02 16 |  if_a	mov	local01, local02
1ebac     0D 21 02 16 |  if_a	mov	local02, arg05
1ebb0     00 1E 56 F2 | 	cmps	local01, #0 wc
1ebb4     00 1E 06 C6 |  if_b	mov	local01, #0
1ebb8     01 00 00 FF 
1ebbc     26 E4 05 F1 | 	add	objptr, ##550
1ebc0     F2 1A 02 FB | 	rdlong	arg05, objptr
1ebc4     01 00 00 FF 
1ebc8     26 E4 85 F1 | 	sub	objptr, ##550
1ebcc     0D 21 52 F2 | 	cmps	local02, arg05 wc
1ebd0     01 00 00 3F 
1ebd4     26 E4 05 31 |  if_ae	add	objptr, ##550
1ebd8     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1ebdc     01 00 00 3F 
1ebe0     26 E4 85 31 |  if_ae	sub	objptr, ##550
1ebe4     DD E4 05 F1 | 	add	objptr, #221
1ebe8     F2 12 02 FB | 	rdlong	arg01, objptr
1ebec     14 E4 05 F1 | 	add	objptr, #20
1ebf0     F2 1A 02 FB | 	rdlong	arg05, objptr
1ebf4     02 1A 66 F0 | 	shl	arg05, #2
1ebf8     0B 1B 02 FD | 	qmul	arg05, arg03
1ebfc                 | ' if x1>x2
1ebfc                 | '   x1,x2:=x2,x1
1ebfc                 | ' if x1<0 
1ebfc                 | '   x1:=0
1ebfc                 | ' if x2>=xres
1ebfc                 | '   x2:=xres-1  
1ebfc     01 20 86 31 |  if_ae	sub	local02, #1
1ec00                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1ec00     01 16 06 F6 | 	mov	arg03, #1
1ec04     10 17 02 F1 | 	add	arg03, local02
1ec08     0F 17 82 F1 | 	sub	arg03, local01
1ec0c     0C 15 02 F6 | 	mov	arg02, arg04
1ec10     00 18 06 F6 | 	mov	arg04, #0
1ec14     01 1A 06 F6 | 	mov	arg05, #1
1ec18     0A 00 00 FF 
1ec1c     DB E5 05 F1 | 	add	objptr, ##5595
1ec20     18 20 62 FD | 	getqx	local02
1ec24     0F 21 02 F1 | 	add	local02, local01
1ec28     10 13 02 F1 | 	add	arg01, local02
1ec2c     D8 15 B0 FD | 	call	#_psram_spin2_fill
1ec30     0B 00 00 FF 
1ec34     CC E4 85 F1 | 	sub	objptr, ##5836
1ec38                 | LR__2410
1ec38     A7 F0 03 F6 | 	mov	ptra, fp
1ec3c     B2 00 A0 FD | 	call	#popregs_
1ec40                 | _hg010b_spin2_fastline_ret
1ec40     2D 00 64 FD | 	ret
1ec44                 | 
1ec44                 | ' 
1ec44                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1ec44                 | _hg010b_spin2_draw
1ec44     0E 4A 05 F6 | 	mov	COUNT_, #14
1ec48     A8 00 A0 FD | 	call	#pushregs_
1ec4c     09 1F 02 F6 | 	mov	local01, arg01
1ec50     0A 21 02 F6 | 	mov	local02, arg02
1ec54     0B 23 02 F6 | 	mov	local03, arg03
1ec58     0C 25 02 F6 | 	mov	local04, arg04
1ec5c     0D 27 02 F6 | 	mov	local05, arg05
1ec60                 | ' 
1ec60                 | ' if (y1==y2)
1ec60     12 21 0A F2 | 	cmp	local02, local04 wz
1ec64     18 00 90 5D |  if_ne	jmp	#LR__2420
1ec68                 | '   fastline(x1,x2,y1,c)
1ec68     0F 13 02 F6 | 	mov	arg01, local01
1ec6c     11 15 02 F6 | 	mov	arg02, local03
1ec70     10 17 02 F6 | 	mov	arg03, local02
1ec74     13 19 02 F6 | 	mov	arg04, local05
1ec78     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1ec7c     F8 00 90 FD | 	jmp	#LR__2426
1ec80                 | LR__2420
1ec80                 | ' else  
1ec80                 | '   x:=x1
1ec80     0F 29 02 F6 | 	mov	local06, local01
1ec84                 | '   y:=y1
1ec84     10 2B 02 F6 | 	mov	local07, local02
1ec88                 | ' 
1ec88                 | '   if (x1<x2) 
1ec88     11 1F 52 F2 | 	cmps	local01, local03 wc
1ec8c                 | '     xi:=1
1ec8c     01 2C 06 C6 |  if_b	mov	local08, #1
1ec90                 | '     dx:=x2-x1
1ec90     11 2F 02 C6 |  if_b	mov	local09, local03
1ec94     0F 2F 82 C1 |  if_b	sub	local09, local01
1ec98                 | '   else
1ec98                 | '     xi:=-1
1ec98     01 2C 66 36 |  if_ae	neg	local08, #1
1ec9c                 | '     dx:=x1-x2
1ec9c     11 1F 82 31 |  if_ae	sub	local01, local03
1eca0     0F 2F 02 36 |  if_ae	mov	local09, local01
1eca4                 | '   
1eca4                 | '   if (y1<y2) 
1eca4     12 21 52 F2 | 	cmps	local02, local04 wc
1eca8                 | '     yi:=1
1eca8     01 30 06 C6 |  if_b	mov	local10, #1
1ecac                 | '     dy:=y2-y1
1ecac     12 33 02 C6 |  if_b	mov	local11, local04
1ecb0     10 33 82 C1 |  if_b	sub	local11, local02
1ecb4                 | '   else
1ecb4                 | '     yi:=-1
1ecb4     01 30 66 36 |  if_ae	neg	local10, #1
1ecb8                 | '     dy:=y1-y2
1ecb8     12 21 82 31 |  if_ae	sub	local02, local04
1ecbc     10 33 02 36 |  if_ae	mov	local11, local02
1ecc0                 | ' 
1ecc0                 | '   putpixel(x,y,c)
1ecc0     13 17 02 F6 | 	mov	arg03, local05
1ecc4     14 13 02 F6 | 	mov	arg01, local06
1ecc8     15 15 02 F6 | 	mov	arg02, local07
1eccc     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1ecd0                 | ' 
1ecd0                 | '   if (dx>dy)
1ecd0     19 2F 5A F2 | 	cmps	local09, local11 wcz
1ecd4     50 00 90 ED |  if_be	jmp	#LR__2422
1ecd8                 | '     ai:=(dy-dx)*2
1ecd8     19 35 02 F6 | 	mov	local12, local11
1ecdc     17 35 82 F1 | 	sub	local12, local09
1ece0     01 34 66 F0 | 	shl	local12, #1
1ece4                 | '     bi:=dy*2
1ece4     01 32 66 F0 | 	shl	local11, #1
1ece8     19 37 02 F6 | 	mov	local13, local11
1ecec                 | '     d:= bi-dx
1ecec     1B 39 02 F6 | 	mov	local14, local13
1ecf0     17 39 82 F1 | 	sub	local14, local09
1ecf4                 | '     repeat while (x<>x2) 
1ecf4                 | LR__2421
1ecf4     11 29 0A F2 | 	cmp	local06, local03 wz
1ecf8     7C 00 90 AD |  if_e	jmp	#LR__2425
1ecfc                 | '       if (d>=0) 
1ecfc     00 38 56 F2 | 	cmps	local14, #0 wc
1ed00                 | '         x+=xi
1ed00     16 29 02 31 |  if_ae	add	local06, local08
1ed04                 | '         y+=yi
1ed04     18 2B 02 31 |  if_ae	add	local07, local10
1ed08                 | '         d+=ai
1ed08     1A 39 02 31 |  if_ae	add	local14, local12
1ed0c                 | '       else
1ed0c                 | '         d+=bi
1ed0c     1B 39 02 C1 |  if_b	add	local14, local13
1ed10                 | '         x+=xi
1ed10     16 29 02 C1 |  if_b	add	local06, local08
1ed14                 | '       putpixel(x,y,c)
1ed14     14 13 02 F6 | 	mov	arg01, local06
1ed18     15 15 02 F6 | 	mov	arg02, local07
1ed1c     13 17 02 F6 | 	mov	arg03, local05
1ed20     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1ed24     CC FF 9F FD | 	jmp	#LR__2421
1ed28                 | LR__2422
1ed28                 | '   else
1ed28                 | '     ai:=(dx-dy)*2
1ed28     17 35 02 F6 | 	mov	local12, local09
1ed2c     19 35 82 F1 | 	sub	local12, local11
1ed30     01 34 66 F0 | 	shl	local12, #1
1ed34                 | '     bi:=dx*2
1ed34     01 2E 66 F0 | 	shl	local09, #1
1ed38     17 37 02 F6 | 	mov	local13, local09
1ed3c                 | '     d:=bi-dy
1ed3c     1B 39 02 F6 | 	mov	local14, local13
1ed40     19 39 82 F1 | 	sub	local14, local11
1ed44                 | '     repeat while (y<>y2)
1ed44                 | LR__2423
1ed44     12 2B 0A F2 | 	cmp	local07, local04 wz
1ed48     2C 00 90 AD |  if_e	jmp	#LR__2424
1ed4c                 | '       if (d>=0)
1ed4c     00 38 56 F2 | 	cmps	local14, #0 wc
1ed50                 | '         x+=xi
1ed50     16 29 02 31 |  if_ae	add	local06, local08
1ed54                 | '         y+=yi
1ed54     18 2B 02 31 |  if_ae	add	local07, local10
1ed58                 | '         d+=ai
1ed58     1A 39 02 31 |  if_ae	add	local14, local12
1ed5c                 | '       else
1ed5c                 | '         d+=bi
1ed5c     1B 39 02 C1 |  if_b	add	local14, local13
1ed60                 | '         y+=yi
1ed60     18 2B 02 C1 |  if_b	add	local07, local10
1ed64                 | '       putpixel(x, y,c)
1ed64     14 13 02 F6 | 	mov	arg01, local06
1ed68     15 15 02 F6 | 	mov	arg02, local07
1ed6c     13 17 02 F6 | 	mov	arg03, local05
1ed70     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1ed74     CC FF 9F FD | 	jmp	#LR__2423
1ed78                 | LR__2424
1ed78                 | LR__2425
1ed78                 | LR__2426
1ed78     A7 F0 03 F6 | 	mov	ptra, fp
1ed7c     B2 00 A0 FD | 	call	#popregs_
1ed80                 | _hg010b_spin2_draw_ret
1ed80     2D 00 64 FD | 	ret
1ed84                 | 
1ed84                 | '  
1ed84                 | ' pub fillpush(val) 
1ed84                 | _hg010b_spin2_fillpush
1ed84                 | ' fillstack[fillptr]:=val
1ed84     0B 00 00 FF 
1ed88     BA E4 05 F1 | 	add	objptr, ##5818
1ed8c     F2 00 02 FB | 	rdlong	_var01, objptr
1ed90     02 00 66 F0 | 	shl	_var01, #2
1ed94     0A 00 00 FF 
1ed98     00 E4 85 F1 | 	sub	objptr, ##5120
1ed9c     F2 00 02 F1 | 	add	_var01, objptr
1eda0     00 13 62 FC | 	wrlong	arg01, _var01
1eda4                 | ' fillptr+=1   
1eda4     0A 00 00 FF 
1eda8     00 E4 05 F1 | 	add	objptr, ##5120
1edac     F2 00 02 FB | 	rdlong	_var01, objptr
1edb0     01 00 06 F1 | 	add	_var01, #1
1edb4     F2 00 62 FC | 	wrlong	_var01, objptr
1edb8     0B 00 00 FF 
1edbc     BA E4 85 F1 | 	sub	objptr, ##5818
1edc0                 | _hg010b_spin2_fillpush_ret
1edc0     2D 00 64 FD | 	ret
1edc4                 | 
1edc4                 | ' 
1edc4                 | '     
1edc4                 | ' pub fillpop() : val
1edc4                 | _hg010b_spin2_fillpop
1edc4                 | ' 
1edc4                 | ' fillptr-=1
1edc4     0B 00 00 FF 
1edc8     BA E4 05 F1 | 	add	objptr, ##5818
1edcc     F2 FA 01 FB | 	rdlong	result1, objptr
1edd0     01 FA 85 F1 | 	sub	result1, #1
1edd4     F2 FA 61 FC | 	wrlong	result1, objptr
1edd8                 | ' if fillptr<0
1edd8     0B 00 00 FF 
1eddc     BA E4 85 F1 | 	sub	objptr, ##5818
1ede0     00 FA 55 F2 | 	cmps	result1, #0 wc
1ede4                 | '   fillptr:=0
1ede4     0B 00 00 CF 
1ede8     BA E4 05 C1 |  if_b	add	objptr, ##5818
1edec     F2 00 68 CC |  if_b	wrlong	#0, objptr
1edf0     0B 00 00 CF 
1edf4     BA E4 85 C1 |  if_b	sub	objptr, ##5818
1edf8                 | '   val:=-12345
1edf8     E7 FF 7F CF 
1edfc     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1ee00     28 00 90 CD |  if_b	jmp	#LR__2430
1ee04                 | ' else 
1ee04                 | '   val:=fillstack[fillptr]
1ee04     0B 00 00 FF 
1ee08     BA E4 05 F1 | 	add	objptr, ##5818
1ee0c     F2 00 02 FB | 	rdlong	_var01, objptr
1ee10     02 00 66 F0 | 	shl	_var01, #2
1ee14     0A 00 00 FF 
1ee18     00 E4 85 F1 | 	sub	objptr, ##5120
1ee1c     F2 00 02 F1 | 	add	_var01, objptr
1ee20     00 01 02 FB | 	rdlong	_var01, _var01
1ee24     01 00 00 FF 
1ee28     BA E4 85 F1 | 	sub	objptr, ##698
1ee2c                 | LR__2430
1ee2c                 | ' return val
1ee2c     00 FB 01 F6 | 	mov	result1, _var01
1ee30                 | _hg010b_spin2_fillpop_ret
1ee30     2D 00 64 FD | 	ret
1ee34                 | 
1ee34                 | ' 
1ee34                 | '       
1ee34                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1ee34                 | _hg010b_spin2_fill
1ee34     0B 4A 05 F6 | 	mov	COUNT_, #11
1ee38     A8 00 A0 FD | 	call	#pushregs_
1ee3c                 | ' 
1ee3c                 | ' newcolor:=newcolor & 255
1ee3c     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1ee40                 | ' oldcolor:=oldcolor & 255
1ee40     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1ee44                 | ' 
1ee44                 | ' if (oldcolor == newcolor) 
1ee44     0F 21 0A F2 | 	cmp	local02, local01 wz
1ee48                 | '   return
1ee48     70 02 90 AD |  if_e	jmp	#LR__2449
1ee4c                 | ' 
1ee4c                 | ' fillptr:=0
1ee4c     0B 00 00 FF 
1ee50     BA E4 05 F1 | 	add	objptr, ##5818
1ee54     F2 00 68 FC | 	wrlong	#0, objptr
1ee58                 | ' fillmax:=0
1ee58     04 E4 05 F1 | 	add	objptr, #4
1ee5c     F2 00 68 FC | 	wrlong	#0, objptr
1ee60     0B 00 00 FF 
1ee64     BE E4 85 F1 | 	sub	objptr, ##5822
1ee68                 | ' fillpush(x)
1ee68     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1ee6c                 | ' fillpush(y)
1ee6c     0A 13 02 F6 | 	mov	arg01, arg02
1ee70     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1ee74                 | ' y:=fillpop()
1ee74     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1ee78     FD 22 02 F6 | 	mov	local03, result1
1ee7c                 | ' x:=fillpop()
1ee7c     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1ee80     FD 24 02 F6 | 	mov	local04, result1
1ee84                 | ' 'pinhigh(38)
1ee84                 | ' repeat while (x>-1)       
1ee84                 | LR__2440
1ee84     00 24 56 F2 | 	cmps	local04, #0 wc
1ee88     30 02 90 CD |  if_b	jmp	#LR__2448
1ee8c                 | '  ' pintoggle(39)
1ee8c                 | '   x1 := x
1ee8c     12 27 02 F6 | 	mov	local05, local04
1ee90                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1ee90                 | LR__2441
1ee90     00 28 06 F6 | 	mov	local06, #0
1ee94     00 2A 06 F6 | 	mov	local07, #0
1ee98     00 26 56 F2 | 	cmps	local05, #0 wc
1ee9c     01 2A 66 36 |  if_ae	neg	local07, #1
1eea0     00 2A 0E F2 | 	cmp	local07, #0 wz
1eea4     00 28 26 56 |  if_ne	not	local06, #0
1eea8     00 2C 06 F6 | 	mov	local08, #0
1eeac     00 2E 06 F6 | 	mov	local09, #0
1eeb0     11 15 02 F6 | 	mov	arg02, local03
1eeb4     13 13 02 F6 | 	mov	arg01, local05
1eeb8     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1eebc     10 FB 09 F2 | 	cmp	result1, local02 wz
1eec0     00 2E 26 A6 |  if_e	not	local09, #0
1eec4     00 2E 0E F2 | 	cmp	local09, #0 wz
1eec8     00 2C 26 56 |  if_ne	not	local08, #0
1eecc     16 29 CA F7 | 	test	local06, local08 wz
1eed0                 | '     x1--
1eed0     01 26 86 51 |  if_ne	sub	local05, #1
1eed4     B8 FF 9F 5D |  if_ne	jmp	#LR__2441
1eed8                 | '   x1++
1eed8     01 26 06 F1 | 	add	local05, #1
1eedc                 | '   spanabove := 0
1eedc     00 30 06 F6 | 	mov	local10, #0
1eee0                 | '   spanbelow := 0
1eee0     00 32 06 F6 | 	mov	local11, #0
1eee4                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1eee4                 | LR__2442
1eee4     00 28 06 F6 | 	mov	local06, #0
1eee8     02 00 00 FF 
1eeec     00 26 56 F2 | 	cmps	local05, ##1024 wc
1eef0     00 28 26 C6 |  if_b	not	local06, #0
1eef4     00 2C 06 F6 | 	mov	local08, #0
1eef8     00 2E 06 F6 | 	mov	local09, #0
1eefc     11 15 02 F6 | 	mov	arg02, local03
1ef00     13 13 02 F6 | 	mov	arg01, local05
1ef04     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1ef08     10 FB 09 F2 | 	cmp	result1, local02 wz
1ef0c     00 2E 26 A6 |  if_e	not	local09, #0
1ef10     00 2E 0E F2 | 	cmp	local09, #0 wz
1ef14     00 2C 26 56 |  if_ne	not	local08, #0
1ef18     16 29 CA F7 | 	test	local06, local08 wz
1ef1c     88 01 90 AD |  if_e	jmp	#LR__2447
1ef20                 | '     putpixel2 (x1,y, newcolor & 255)
1ef20     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1ef24     13 13 02 F6 | 	mov	arg01, local05
1ef28     11 15 02 F6 | 	mov	arg02, local03
1ef2c     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1ef30                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1ef30     00 28 06 F6 | 	mov	local06, #0
1ef34     00 2A 06 F6 | 	mov	local07, #0
1ef38     00 30 0E F2 | 	cmp	local10, #0 wz
1ef3c     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1ef40     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1ef44     00 2A 0E F2 | 	cmp	local07, #0 wz
1ef48     00 28 26 56 |  if_ne	not	local06, #0
1ef4c     00 2C 06 F6 | 	mov	local08, #0
1ef50     00 2E 06 F6 | 	mov	local09, #0
1ef54     11 15 02 F6 | 	mov	arg02, local03
1ef58     01 14 86 F1 | 	sub	arg02, #1
1ef5c     13 13 02 F6 | 	mov	arg01, local05
1ef60     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1ef64     10 FB 09 F2 | 	cmp	result1, local02 wz
1ef68     00 2E 26 A6 |  if_e	not	local09, #0
1ef6c     00 2E 0E F2 | 	cmp	local09, #0 wz
1ef70     00 2C 26 56 |  if_ne	not	local08, #0
1ef74     16 29 CA F7 | 	test	local06, local08 wz
1ef78     1C 00 90 AD |  if_e	jmp	#LR__2443
1ef7c                 | '       fillpush(x1)
1ef7c     13 13 02 F6 | 	mov	arg01, local05
1ef80     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1ef84                 | '       fillpush(y-1)
1ef84     11 13 02 F6 | 	mov	arg01, local03
1ef88     01 12 86 F1 | 	sub	arg01, #1
1ef8c     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1ef90                 | '       spanabove := 1 
1ef90     01 30 06 F6 | 	mov	local10, #1
1ef94     4C 00 90 FD | 	jmp	#LR__2444
1ef98                 | LR__2443
1ef98                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1ef98     00 28 06 F6 | 	mov	local06, #0
1ef9c     00 2A 06 F6 | 	mov	local07, #0
1efa0     00 30 0E F2 | 	cmp	local10, #0 wz
1efa4     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1efa8     01 2A 66 16 |  if_a	neg	local07, #1
1efac     00 2A 0E F2 | 	cmp	local07, #0 wz
1efb0     00 28 26 56 |  if_ne	not	local06, #0
1efb4     00 2C 06 F6 | 	mov	local08, #0
1efb8     00 2E 06 F6 | 	mov	local09, #0
1efbc     11 15 02 F6 | 	mov	arg02, local03
1efc0     01 14 86 F1 | 	sub	arg02, #1
1efc4     13 13 02 F6 | 	mov	arg01, local05
1efc8     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1efcc     10 FB 09 F2 | 	cmp	result1, local02 wz
1efd0     00 2E 26 56 |  if_ne	not	local09, #0
1efd4     00 2E 0E F2 | 	cmp	local09, #0 wz
1efd8     00 2C 26 56 |  if_ne	not	local08, #0
1efdc     16 29 CA F7 | 	test	local06, local08 wz
1efe0                 | '       spanabove := 0 
1efe0     00 30 06 56 |  if_ne	mov	local10, #0
1efe4                 | LR__2444
1efe4                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1efe4     00 28 06 F6 | 	mov	local06, #0
1efe8     00 2A 06 F6 | 	mov	local07, #0
1efec     00 32 0E F2 | 	cmp	local11, #0 wz
1eff0     01 00 00 AF 
1eff4     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1eff8     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1effc     00 2A 0E F2 | 	cmp	local07, #0 wz
1f000     00 28 26 56 |  if_ne	not	local06, #0
1f004     00 2C 06 F6 | 	mov	local08, #0
1f008     00 2E 06 F6 | 	mov	local09, #0
1f00c     11 15 02 F6 | 	mov	arg02, local03
1f010     01 14 06 F1 | 	add	arg02, #1
1f014     13 13 02 F6 | 	mov	arg01, local05
1f018     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1f01c     10 FB 09 F2 | 	cmp	result1, local02 wz
1f020     00 2E 26 A6 |  if_e	not	local09, #0
1f024     00 2E 0E F2 | 	cmp	local09, #0 wz
1f028     00 2C 26 56 |  if_ne	not	local08, #0
1f02c     16 29 CA F7 | 	test	local06, local08 wz
1f030     1C 00 90 AD |  if_e	jmp	#LR__2445
1f034                 | '       fillpush(x1)
1f034     13 13 02 F6 | 	mov	arg01, local05
1f038     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1f03c                 | '       fillpush(y + 1)
1f03c     11 13 02 F6 | 	mov	arg01, local03
1f040     01 12 06 F1 | 	add	arg01, #1
1f044     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1f048                 | '       spanBelow := 1
1f048     01 32 06 F6 | 	mov	local11, #1
1f04c     50 00 90 FD | 	jmp	#LR__2446
1f050                 | LR__2445
1f050                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1f050     00 28 06 F6 | 	mov	local06, #0
1f054     00 2A 06 F6 | 	mov	local07, #0
1f058     00 32 0E F2 | 	cmp	local11, #0 wz
1f05c     01 00 00 5F 
1f060     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1f064     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1f068     00 2A 0E F2 | 	cmp	local07, #0 wz
1f06c     00 28 26 56 |  if_ne	not	local06, #0
1f070     00 2C 06 F6 | 	mov	local08, #0
1f074     00 2E 06 F6 | 	mov	local09, #0
1f078     11 15 02 F6 | 	mov	arg02, local03
1f07c     01 14 06 F1 | 	add	arg02, #1
1f080     13 13 02 F6 | 	mov	arg01, local05
1f084     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1f088     10 FB 09 F2 | 	cmp	result1, local02 wz
1f08c     00 2E 26 56 |  if_ne	not	local09, #0
1f090     00 2E 0E F2 | 	cmp	local09, #0 wz
1f094     00 2C 26 56 |  if_ne	not	local08, #0
1f098     16 29 CA F7 | 	test	local06, local08 wz
1f09c                 | '       spanbelow := 0
1f09c     00 32 06 56 |  if_ne	mov	local11, #0
1f0a0                 | LR__2446
1f0a0                 | '     x1++
1f0a0     01 26 06 F1 | 	add	local05, #1
1f0a4     3C FE 9F FD | 	jmp	#LR__2442
1f0a8                 | LR__2447
1f0a8                 | '   y:=fillpop()
1f0a8     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1f0ac     FD 22 02 F6 | 	mov	local03, result1
1f0b0                 | '   x:=fillpop()
1f0b0     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1f0b4     FD 24 02 F6 | 	mov	local04, result1
1f0b8     C8 FD 9F FD | 	jmp	#LR__2440
1f0bc                 | LR__2448
1f0bc                 | LR__2449
1f0bc     A7 F0 03 F6 | 	mov	ptra, fp
1f0c0     B2 00 A0 FD | 	call	#popregs_
1f0c4                 | _hg010b_spin2_fill_ret
1f0c4     2D 00 64 FD | 	ret
1f0c8                 | 
1f0c8                 | ' 'pinlow(38)    
1f0c8                 | ' 
1f0c8                 | ' '-- A filled circle -----------------------------------------------------
1f0c8                 | ' 
1f0c8                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1f0c8                 | _hg010b_spin2_fcircle
1f0c8     08 4A 05 F6 | 	mov	COUNT_, #8
1f0cc     A8 00 A0 FD | 	call	#pushregs_
1f0d0     0B 1F 02 F6 | 	mov	local01, arg03
1f0d4     FF FF 7F FF 
1f0d8     FE 1F 06 FD | 	qmul	local01, ##-2
1f0dc     09 21 02 F6 | 	mov	local02, arg01
1f0e0     0A 23 02 F6 | 	mov	local03, arg02
1f0e4     0C 25 02 F6 | 	mov	local04, arg04
1f0e8                 | ' 
1f0e8                 | ' d:=5-4*r
1f0e8     0F 19 02 F6 | 	mov	arg04, local01
1f0ec     02 18 66 F0 | 	shl	arg04, #2
1f0f0     05 26 06 F6 | 	mov	local05, #5
1f0f4     0C 27 82 F1 | 	sub	local05, arg04
1f0f8                 | ' x:=0
1f0f8     00 28 06 F6 | 	mov	local06, #0
1f0fc                 | ' y:=r
1f0fc                 | ' da:=(-2*r+5)*4
1f0fc                 | ' db:=3*4
1f0fc     0C 2A 06 F6 | 	mov	local07, #12
1f100                 | ' repeat while (x<=y) 
1f100     18 2C 62 FD | 	getqx	local08
1f104     05 2C 06 F1 | 	add	local08, #5
1f108     02 2C 66 F0 | 	shl	local08, #2
1f10c                 | LR__2450
1f10c     0F 29 5A F2 | 	cmps	local06, local01 wcz
1f110     B4 00 90 1D |  if_a	jmp	#LR__2452
1f114                 | '   fastline(x0-x,x0+x,y0-y,c)
1f114     10 13 02 F6 | 	mov	arg01, local02
1f118     14 13 82 F1 | 	sub	arg01, local06
1f11c     10 15 02 F6 | 	mov	arg02, local02
1f120     14 15 02 F1 | 	add	arg02, local06
1f124     11 17 02 F6 | 	mov	arg03, local03
1f128     0F 17 82 F1 | 	sub	arg03, local01
1f12c     12 19 02 F6 | 	mov	arg04, local04
1f130     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1f134                 | '   fastline(x0-x,x0+x,y0+y,c)
1f134     10 13 02 F6 | 	mov	arg01, local02
1f138     14 13 82 F1 | 	sub	arg01, local06
1f13c     10 15 02 F6 | 	mov	arg02, local02
1f140     14 15 02 F1 | 	add	arg02, local06
1f144     11 17 02 F6 | 	mov	arg03, local03
1f148     0F 17 02 F1 | 	add	arg03, local01
1f14c     12 19 02 F6 | 	mov	arg04, local04
1f150     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1f154                 | '   fastline(x0-y,x0+y,y0-x,c)
1f154     10 13 02 F6 | 	mov	arg01, local02
1f158     0F 13 82 F1 | 	sub	arg01, local01
1f15c     10 15 02 F6 | 	mov	arg02, local02
1f160     0F 15 02 F1 | 	add	arg02, local01
1f164     11 17 02 F6 | 	mov	arg03, local03
1f168     14 17 82 F1 | 	sub	arg03, local06
1f16c     12 19 02 F6 | 	mov	arg04, local04
1f170     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1f174                 | '   fastline(x0-y,x0+y,y0+x,c)
1f174     10 13 02 F6 | 	mov	arg01, local02
1f178     0F 13 82 F1 | 	sub	arg01, local01
1f17c     10 15 02 F6 | 	mov	arg02, local02
1f180     0F 15 02 F1 | 	add	arg02, local01
1f184     11 17 02 F6 | 	mov	arg03, local03
1f188     14 17 02 F1 | 	add	arg03, local06
1f18c     12 19 02 F6 | 	mov	arg04, local04
1f190     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1f194                 | '   if d>0 
1f194     01 26 56 F2 | 	cmps	local05, #1 wc
1f198     18 00 90 CD |  if_b	jmp	#LR__2451
1f19c                 | '     d+=da
1f19c     16 27 02 F1 | 	add	local05, local08
1f1a0                 | '     y-=1
1f1a0     01 1E 86 F1 | 	sub	local01, #1
1f1a4                 | '     x+=1
1f1a4     01 28 06 F1 | 	add	local06, #1
1f1a8                 | '     da+=4*4
1f1a8     10 2C 06 F1 | 	add	local08, #16
1f1ac                 | '     db+=2*4
1f1ac     08 2A 06 F1 | 	add	local07, #8
1f1b0     58 FF 9F FD | 	jmp	#LR__2450
1f1b4                 | LR__2451
1f1b4                 | '   else
1f1b4                 | '     d+=db
1f1b4     15 27 02 F1 | 	add	local05, local07
1f1b8                 | '     x+=1
1f1b8     01 28 06 F1 | 	add	local06, #1
1f1bc                 | '     da+=2*4
1f1bc     08 2C 06 F1 | 	add	local08, #8
1f1c0                 | '     db+=2*4
1f1c0     08 2A 06 F1 | 	add	local07, #8
1f1c4     44 FF 9F FD | 	jmp	#LR__2450
1f1c8                 | LR__2452
1f1c8     A7 F0 03 F6 | 	mov	ptra, fp
1f1cc     B2 00 A0 FD | 	call	#popregs_
1f1d0                 | _hg010b_spin2_fcircle_ret
1f1d0     2D 00 64 FD | 	ret
1f1d4                 | 
1f1d4                 | '  
1f1d4                 | ' '-- A circle ------------------------------------------------------------ 
1f1d4                 | '  
1f1d4                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1f1d4                 | _hg010b_spin2_circle
1f1d4     08 4A 05 F6 | 	mov	COUNT_, #8
1f1d8     A8 00 A0 FD | 	call	#pushregs_
1f1dc     0B 1F 02 F6 | 	mov	local01, arg03
1f1e0     FF FF 7F FF 
1f1e4     FE 1F 06 FD | 	qmul	local01, ##-2
1f1e8     09 21 02 F6 | 	mov	local02, arg01
1f1ec     0A 23 02 F6 | 	mov	local03, arg02
1f1f0     0C 25 02 F6 | 	mov	local04, arg04
1f1f4                 | ' 
1f1f4                 | '  
1f1f4                 | ' d:=5-4*r
1f1f4     0F 19 02 F6 | 	mov	arg04, local01
1f1f8     02 18 66 F0 | 	shl	arg04, #2
1f1fc     05 26 06 F6 | 	mov	local05, #5
1f200     0C 27 82 F1 | 	sub	local05, arg04
1f204                 | ' x:=0
1f204     00 28 06 F6 | 	mov	local06, #0
1f208                 | ' y:=r
1f208                 | ' da:=(-2*r+5)*4
1f208                 | ' db:=3*4
1f208     0C 2A 06 F6 | 	mov	local07, #12
1f20c                 | ' repeat while (x<=y) 
1f20c     18 2C 62 FD | 	getqx	local08
1f210     05 2C 06 F1 | 	add	local08, #5
1f214     02 2C 66 F0 | 	shl	local08, #2
1f218                 | LR__2460
1f218     0F 29 5A F2 | 	cmps	local06, local01 wcz
1f21c     F4 00 90 1D |  if_a	jmp	#LR__2462
1f220                 | '   putpixel(x0-x,y0-y,c)
1f220     10 13 02 F6 | 	mov	arg01, local02
1f224     14 13 82 F1 | 	sub	arg01, local06
1f228     11 15 02 F6 | 	mov	arg02, local03
1f22c     0F 15 82 F1 | 	sub	arg02, local01
1f230     12 17 02 F6 | 	mov	arg03, local04
1f234     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1f238                 | '   putpixel(x0-x,y0+y,c)
1f238     10 13 02 F6 | 	mov	arg01, local02
1f23c     14 13 82 F1 | 	sub	arg01, local06
1f240     11 15 02 F6 | 	mov	arg02, local03
1f244     0F 15 02 F1 | 	add	arg02, local01
1f248     12 17 02 F6 | 	mov	arg03, local04
1f24c     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1f250                 | '   putpixel(x0+x,y0-y,c)
1f250     10 13 02 F6 | 	mov	arg01, local02
1f254     14 13 02 F1 | 	add	arg01, local06
1f258     11 15 02 F6 | 	mov	arg02, local03
1f25c     0F 15 82 F1 | 	sub	arg02, local01
1f260     12 17 02 F6 | 	mov	arg03, local04
1f264     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1f268                 | '   putpixel(x0+x,y0+y,c)
1f268     10 13 02 F6 | 	mov	arg01, local02
1f26c     14 13 02 F1 | 	add	arg01, local06
1f270     11 15 02 F6 | 	mov	arg02, local03
1f274     0F 15 02 F1 | 	add	arg02, local01
1f278     12 17 02 F6 | 	mov	arg03, local04
1f27c     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1f280                 | '   putpixel(x0-y,y0-x,c)
1f280     10 13 02 F6 | 	mov	arg01, local02
1f284     0F 13 82 F1 | 	sub	arg01, local01
1f288     11 15 02 F6 | 	mov	arg02, local03
1f28c     14 15 82 F1 | 	sub	arg02, local06
1f290     12 17 02 F6 | 	mov	arg03, local04
1f294     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1f298                 | '   putpixel(x0-y,y0+x,c)
1f298     10 13 02 F6 | 	mov	arg01, local02
1f29c     0F 13 82 F1 | 	sub	arg01, local01
1f2a0     11 15 02 F6 | 	mov	arg02, local03
1f2a4     14 15 02 F1 | 	add	arg02, local06
1f2a8     12 17 02 F6 | 	mov	arg03, local04
1f2ac     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1f2b0                 | '   putpixel(x0+y,y0-x,c)
1f2b0     10 13 02 F6 | 	mov	arg01, local02
1f2b4     0F 13 02 F1 | 	add	arg01, local01
1f2b8     11 15 02 F6 | 	mov	arg02, local03
1f2bc     14 15 82 F1 | 	sub	arg02, local06
1f2c0     12 17 02 F6 | 	mov	arg03, local04
1f2c4     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1f2c8                 | '   putpixel(x0+y,y0+x,c)
1f2c8     10 13 02 F6 | 	mov	arg01, local02
1f2cc     0F 13 02 F1 | 	add	arg01, local01
1f2d0     11 15 02 F6 | 	mov	arg02, local03
1f2d4     14 15 02 F1 | 	add	arg02, local06
1f2d8     12 17 02 F6 | 	mov	arg03, local04
1f2dc     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1f2e0                 | '   if d>0 
1f2e0     01 26 56 F2 | 	cmps	local05, #1 wc
1f2e4     18 00 90 CD |  if_b	jmp	#LR__2461
1f2e8                 | '     d+=da
1f2e8     16 27 02 F1 | 	add	local05, local08
1f2ec                 | '     y-=1
1f2ec     01 1E 86 F1 | 	sub	local01, #1
1f2f0                 | '     x+=1
1f2f0     01 28 06 F1 | 	add	local06, #1
1f2f4                 | '     da+=4*4
1f2f4     10 2C 06 F1 | 	add	local08, #16
1f2f8                 | '     db+=2*4
1f2f8     08 2A 06 F1 | 	add	local07, #8
1f2fc     18 FF 9F FD | 	jmp	#LR__2460
1f300                 | LR__2461
1f300                 | '   else
1f300                 | '     d+=db
1f300     15 27 02 F1 | 	add	local05, local07
1f304                 | '     x+=1
1f304     01 28 06 F1 | 	add	local06, #1
1f308                 | '     da+=2*4
1f308     08 2C 06 F1 | 	add	local08, #8
1f30c                 | '     db+=2*4
1f30c     08 2A 06 F1 | 	add	local07, #8
1f310     04 FF 9F FD | 	jmp	#LR__2460
1f314                 | LR__2462
1f314     A7 F0 03 F6 | 	mov	ptra, fp
1f318     B2 00 A0 FD | 	call	#popregs_
1f31c                 | _hg010b_spin2_circle_ret
1f31c     2D 00 64 FD | 	ret
1f320                 | 
1f320                 | '     
1f320                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1f320                 | ' 
1f320                 | ' pub frame(x1,y1,x2,y2,c)
1f320                 | _hg010b_spin2_frame
1f320     05 4A 05 F6 | 	mov	COUNT_, #5
1f324     A8 00 A0 FD | 	call	#pushregs_
1f328     09 1F 02 F6 | 	mov	local01, arg01
1f32c     0A 21 02 F6 | 	mov	local02, arg02
1f330     0B 23 02 F6 | 	mov	local03, arg03
1f334     0C 25 02 F6 | 	mov	local04, arg04
1f338     0D 27 02 F6 | 	mov	local05, arg05
1f33c                 | ' 
1f33c                 | ' fastline(x1,x2,y1,c)
1f33c     0F 13 02 F6 | 	mov	arg01, local01
1f340     11 15 02 F6 | 	mov	arg02, local03
1f344     10 17 02 F6 | 	mov	arg03, local02
1f348     13 19 02 F6 | 	mov	arg04, local05
1f34c     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1f350                 | ' fastline(x1,x2,y2,c)
1f350     0F 13 02 F6 | 	mov	arg01, local01
1f354     11 15 02 F6 | 	mov	arg02, local03
1f358     12 17 02 F6 | 	mov	arg03, local04
1f35c     13 19 02 F6 | 	mov	arg04, local05
1f360     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1f364                 | ' line(x1,y1,x1,y2,c)
1f364     0F 13 02 F6 | 	mov	arg01, local01
1f368     10 15 02 F6 | 	mov	arg02, local02
1f36c     0F 17 02 F6 | 	mov	arg03, local01
1f370     12 19 02 F6 | 	mov	arg04, local04
1f374     13 1B 02 F6 | 	mov	arg05, local05
1f378                 | ' draw(x1,y1,x2,y2,c)
1f378     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1f37c                 | ' line(x2,y1,x2,y2,c)
1f37c     11 13 02 F6 | 	mov	arg01, local03
1f380     10 15 02 F6 | 	mov	arg02, local02
1f384     11 17 02 F6 | 	mov	arg03, local03
1f388     12 19 02 F6 | 	mov	arg04, local04
1f38c     13 1B 02 F6 | 	mov	arg05, local05
1f390                 | ' draw(x1,y1,x2,y2,c)
1f390     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1f394     A7 F0 03 F6 | 	mov	ptra, fp
1f398     B2 00 A0 FD | 	call	#popregs_
1f39c                 | _hg010b_spin2_frame_ret
1f39c     2D 00 64 FD | 	ret
1f3a0                 | 
1f3a0                 | ' 
1f3a0                 | ' '-- A box (a filled rectangle) ----------------------------------------
1f3a0                 | ' 
1f3a0                 | ' pub box(x1,y1,x2,y2,c) |yy
1f3a0                 | _hg010b_spin2_box
1f3a0     06 4A 05 F6 | 	mov	COUNT_, #6
1f3a4     A8 00 A0 FD | 	call	#pushregs_
1f3a8     09 1F 02 F6 | 	mov	local01, arg01
1f3ac     0A 21 02 F6 | 	mov	local02, arg02
1f3b0     0B 23 02 F6 | 	mov	local03, arg03
1f3b4     0C 25 02 F6 | 	mov	local04, arg04
1f3b8     0D 27 02 F6 | 	mov	local05, arg05
1f3bc                 | ' 
1f3bc                 | ' repeat yy from y1 to y2
1f3bc     10 25 52 F2 | 	cmps	local04, local02 wc
1f3c0     01 28 86 F6 | 	negc	local06, #1
1f3c4     14 25 02 F1 | 	add	local04, local06
1f3c8                 | LR__2470
1f3c8                 | '   fastline(x1,x2,yy,c)
1f3c8     0F 13 02 F6 | 	mov	arg01, local01
1f3cc     11 15 02 F6 | 	mov	arg02, local03
1f3d0     13 19 02 F6 | 	mov	arg04, local05
1f3d4     10 17 02 F6 | 	mov	arg03, local02
1f3d8     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1f3dc     14 21 02 F1 | 	add	local02, local06
1f3e0     12 21 0A F2 | 	cmp	local02, local04 wz
1f3e4     E0 FF 9F 5D |  if_ne	jmp	#LR__2470
1f3e8     A7 F0 03 F6 | 	mov	ptra, fp
1f3ec     B2 00 A0 FD | 	call	#popregs_
1f3f0                 | _hg010b_spin2_box_ret
1f3f0     2D 00 64 FD | 	ret
1f3f4                 | 
1f3f4                 | '       
1f3f4                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1f3f4                 | _hg010b_spin2_putcharxycgf
1f3f4                 | ' 
1f3f4                 | '  
1f3f4                 | ' repeat yy from 0 to 15
1f3f4     00 00 06 F6 | 	mov	_var01, #0
1f3f8     97 8C 48 FB | 	callpa	#(@LR__2482-@LR__2480)>>2,fcache_load_ptr_
1f3fc                 | LR__2480
1f3fc                 | ' 
1f3fc                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1f3fc     95 E4 05 F1 | 	add	objptr, #149
1f400     F2 02 02 FB | 	rdlong	_var02, objptr
1f404     0A 02 66 F0 | 	shl	_var02, #10
1f408     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1f40c     01 05 02 F1 | 	add	_var03, _var02
1f410     0B 03 02 F6 | 	mov	_var02, arg03
1f414     04 02 66 F0 | 	shl	_var02, #4
1f418     01 05 02 F1 | 	add	_var03, _var02
1f41c     00 05 02 F1 | 	add	_var03, _var01
1f420     02 05 C2 FA | 	rdbyte	_var03, _var03
1f424                 | '   asm
1f424     00 04 0E F4 | 	testb	_var03, #0 wz
1f428     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1f42c     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1f430     01 04 0E F4 | 	testb	_var03, #1 wz
1f434     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1f438     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1f43c     02 04 0E F4 | 	testb	_var03, #2 wz
1f440     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1f444     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1f448     03 04 0E F4 | 	testb	_var03, #3 wz
1f44c     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1f450     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1f454     04 04 0E F4 | 	testb	_var03, #4 wz
1f458     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1f45c     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1f460     05 04 0E F4 | 	testb	_var03, #5 wz
1f464     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1f468     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1f46c     06 04 0E F4 | 	testb	_var03, #6 wz
1f470     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1f474     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1f478     07 04 0E F4 | 	testb	_var03, #7 wz
1f47c     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1f480     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1f484                 | '   
1f484                 | '   ccc[0]:=c1
1f484     99 E5 05 F1 | 	add	objptr, #409
1f488     F2 06 62 FC | 	wrlong	_var04, objptr
1f48c                 | '   ccc[1]:=c2 
1f48c     04 E4 05 F1 | 	add	objptr, #4
1f490     F2 08 62 FC | 	wrlong	_var05, objptr
1f494                 | '   long[mailbox0][2]:=8
1f494     49 E4 85 F1 | 	sub	objptr, #73
1f498     F2 04 02 FB | 	rdlong	_var03, objptr
1f49c     08 04 06 F1 | 	add	_var03, #8
1f4a0     02 11 68 FC | 	wrlong	#8, _var03
1f4a4                 | '   long[mailbox0][1]:=@ccc
1f4a4     45 E4 05 F1 | 	add	objptr, #69
1f4a8     F2 04 02 F6 | 	mov	_var03, objptr
1f4ac     45 E4 85 F1 | 	sub	objptr, #69
1f4b0     F2 02 02 FB | 	rdlong	_var02, objptr
1f4b4     04 02 06 F1 | 	add	_var02, #4
1f4b8     01 05 62 FC | 	wrlong	_var03, _var02
1f4bc                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1f4bc     0C E5 85 F1 | 	sub	objptr, #268
1f4c0     F2 04 02 FB | 	rdlong	_var03, objptr
1f4c4     0A 03 02 F6 | 	mov	_var02, arg02
1f4c8     00 03 02 F1 | 	add	_var02, _var01
1f4cc     0A 02 66 F0 | 	shl	_var02, #10
1f4d0     09 0B 02 F6 | 	mov	_var06, arg01
1f4d4     02 0A 66 F0 | 	shl	_var06, #2
1f4d8     05 03 02 F1 | 	add	_var02, _var06
1f4dc     01 05 02 F1 | 	add	_var03, _var02
1f4e0     00 00 78 FF 
1f4e4     00 04 06 F1 | 	add	_var03, ##-268435456
1f4e8     0C E5 05 F1 | 	add	objptr, #268
1f4ec     F2 0A 02 FB | 	rdlong	_var06, objptr
1f4f0     05 05 62 FC | 	wrlong	_var03, _var06
1f4f4                 | '   repeat
1f4f4                 | LR__2481
1f4f4     F2 04 02 FB | 	rdlong	_var03, objptr
1f4f8     02 03 02 FB | 	rdlong	_var02, _var03
1f4fc     00 02 56 F2 | 	cmps	_var02, #0 wc
1f500     F0 FF 9F CD |  if_b	jmp	#LR__2481
1f504     E9 E5 85 F1 | 	sub	objptr, #489
1f508     01 00 06 F1 | 	add	_var01, #1
1f50c     10 00 56 F2 | 	cmps	_var01, #16 wc
1f510     E8 FE 9F CD |  if_b	jmp	#LR__2480
1f514                 | LR__2482
1f514                 | _hg010b_spin2_putcharxycgf_ret
1f514     2D 00 64 FD | 	ret
1f518                 | 
1f518                 | ' 
1f518                 | ' 
1f518                 | ' '**********************************************************************r***
1f518                 | ' '                                                                        *
1f518                 | ' ' Font related functions                                                 *
1f518                 | ' '                                                                        *
1f518                 | ' '*************************************************************************
1f518                 | ' 
1f518                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1f518                 | ' 
1f518                 | ' pub setfontfamily(afontnum)
1f518                 | _hg010b_spin2_setfontfamily
1f518                 | ' 
1f518                 | ' font_family:=afontnum
1f518     95 E4 05 F1 | 	add	objptr, #149
1f51c     F2 12 62 FC | 	wrlong	arg01, objptr
1f520     95 E4 85 F1 | 	sub	objptr, #149
1f524                 | ' 'if afontnum==8
1f524                 | ' '  font_ptr:=@amiga_font
1f524                 | ' 
1f524                 | ' if afontnum==4
1f524     04 12 0E F2 | 	cmp	arg01, #4 wz
1f528                 | '   font_ptr:=@st_font
1f528     08 00 00 AF 
1f52c     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1f530     08 E4 05 A1 |  if_e	add	objptr, #8
1f534     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1f538     08 E4 85 A1 |  if_e	sub	objptr, #8
1f53c     08 00 00 AF 
1f540     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1f544                 | ' if afontnum==0
1f544     00 12 0E F2 | 	cmp	arg01, #0 wz
1f548                 | '   font_ptr:=@vga_font
1f548     08 E4 05 A1 |  if_e	add	objptr, #8
1f54c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1f550     08 E4 85 A1 |  if_e	sub	objptr, #8
1f554                 | _hg010b_spin2_setfontfamily_ret
1f554     2D 00 64 FD | 	ret
1f558                 | 
1f558                 | ' 
1f558                 | ' '*************************************************************************
1f558                 | ' '                                                                        *
1f558                 | ' '  Cursor functions                                                      *
1f558                 | ' '                                                                        *
1f558                 | ' '*************************************************************************
1f558                 | ' 
1f558                 | ' 
1f558                 | ' pub setcursorpos(x,y)
1f558                 | _hg010b_spin2_setcursorpos
1f558                 | ' 
1f558                 | ' ''---------- Set the (x,y) position of cursor
1f558                 | ' 
1f558                 | ' cursor_x:=x
1f558     3C E4 05 F1 | 	add	objptr, #60
1f55c     F2 12 52 FC | 	wrword	arg01, objptr
1f560                 | ' cursor_y:=y
1f560     02 E4 05 F1 | 	add	objptr, #2
1f564     F2 14 42 FC | 	wrbyte	arg02, objptr
1f568                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f568     02 E4 85 F1 | 	sub	objptr, #2
1f56c     F2 14 E2 FA | 	rdword	arg02, objptr
1f570     02 14 66 F0 | 	shl	arg02, #2
1f574     02 E4 05 F1 | 	add	objptr, #2
1f578     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f57c     3E E4 85 F1 | 	sub	objptr, #62
1f580     04 16 66 F0 | 	shl	arg03, #4
1f584     04 16 06 F1 | 	add	arg03, #4
1f588     11 12 06 F6 | 	mov	arg01, #17
1f58c     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1f590                 | _hg010b_spin2_setcursorpos_ret
1f590     2D 00 64 FD | 	ret
1f594                 | 
1f594                 | ' 
1f594                 | ' pub setcursorx(x)
1f594                 | _hg010b_spin2_setcursorx
1f594                 | ' cursor_x:=x
1f594     3C E4 05 F1 | 	add	objptr, #60
1f598     F2 12 52 FC | 	wrword	arg01, objptr
1f59c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f59c     F2 14 E2 FA | 	rdword	arg02, objptr
1f5a0     02 14 66 F0 | 	shl	arg02, #2
1f5a4     02 E4 05 F1 | 	add	objptr, #2
1f5a8     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f5ac     3E E4 85 F1 | 	sub	objptr, #62
1f5b0     04 16 66 F0 | 	shl	arg03, #4
1f5b4     04 16 06 F1 | 	add	arg03, #4
1f5b8     11 12 06 F6 | 	mov	arg01, #17
1f5bc     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1f5c0                 | _hg010b_spin2_setcursorx_ret
1f5c0     2D 00 64 FD | 	ret
1f5c4                 | 
1f5c4                 | ' 
1f5c4                 | ' pub setcursory(y) 
1f5c4                 | _hg010b_spin2_setcursory
1f5c4                 | ' cursor_y:=y
1f5c4     3E E4 05 F1 | 	add	objptr, #62
1f5c8     F2 12 42 FC | 	wrbyte	arg01, objptr
1f5cc                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
1f5cc     02 E4 85 F1 | 	sub	objptr, #2
1f5d0     F2 14 E2 FA | 	rdword	arg02, objptr
1f5d4     02 14 66 F0 | 	shl	arg02, #2
1f5d8     02 E4 05 F1 | 	add	objptr, #2
1f5dc     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f5e0     3E E4 85 F1 | 	sub	objptr, #62
1f5e4     04 16 66 F0 | 	shl	arg03, #4
1f5e8     04 16 06 F1 | 	add	arg03, #4
1f5ec     11 12 06 F6 | 	mov	arg01, #17
1f5f0     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1f5f4                 | _hg010b_spin2_setcursory_ret
1f5f4     2D 00 64 FD | 	ret
1f5f8                 | 
1f5f8                 | ' 
1f5f8                 | ' '*************************************************************************
1f5f8                 | ' '                                                                        *
1f5f8                 | ' '  VBlank functions                                                      *
1f5f8                 | ' '                                                                        *
1f5f8                 | ' '*************************************************************************
1f5f8                 | ' 
1f5f8                 | ' pub waitvbl(amount) | i
1f5f8                 | _hg010b_spin2_waitvbl
1f5f8     03 4A 05 F6 | 	mov	COUNT_, #3
1f5fc     A8 00 A0 FD | 	call	#pushregs_
1f600     09 1F 02 F6 | 	mov	local01, arg01
1f604                 | ' 
1f604                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1f604                 | ' 
1f604                 | ' repeat i from 1 to amount
1f604     01 20 06 F6 | 	mov	local02, #1
1f608     01 1E 56 F2 | 	cmps	local01, #1 wc
1f60c     01 22 86 F6 | 	negc	local03, #1
1f610     11 1F 02 F1 | 	add	local01, local03
1f614                 | LR__2490
1f614                 | '   repeat until vblank==0
1f614                 | LR__2491
1f614     49 E4 05 F1 | 	add	objptr, #73
1f618     F2 12 0A FB | 	rdlong	arg01, objptr wz
1f61c     49 E4 85 F1 | 	sub	objptr, #73
1f620     0C 00 90 AD |  if_e	jmp	#LR__2492
1f624                 | '     waitus(100)
1f624     64 12 06 F6 | 	mov	arg01, #100
1f628     44 1A B0 FD | 	call	#__system___waitus
1f62c     E4 FF 9F FD | 	jmp	#LR__2491
1f630                 | LR__2492
1f630                 | '   repeat until vblank==1
1f630                 | LR__2493
1f630     49 E4 05 F1 | 	add	objptr, #73
1f634     F2 12 02 FB | 	rdlong	arg01, objptr
1f638     49 E4 85 F1 | 	sub	objptr, #73
1f63c     01 12 0E F2 | 	cmp	arg01, #1 wz
1f640     0C 00 90 AD |  if_e	jmp	#LR__2494
1f644                 | '     waitus(100)
1f644     64 12 06 F6 | 	mov	arg01, #100
1f648     24 1A B0 FD | 	call	#__system___waitus
1f64c     E0 FF 9F FD | 	jmp	#LR__2493
1f650                 | LR__2494
1f650     11 21 02 F1 | 	add	local02, local03
1f654     0F 21 0A F2 | 	cmp	local02, local01 wz
1f658     B8 FF 9F 5D |  if_ne	jmp	#LR__2490
1f65c     A7 F0 03 F6 | 	mov	ptra, fp
1f660     B2 00 A0 FD | 	call	#popregs_
1f664                 | _hg010b_spin2_waitvbl_ret
1f664     2D 00 64 FD | 	ret
1f668                 | 
1f668                 | ' 
1f668                 | ' 
1f668                 | ' pub cls(fc,bc)   :c,i
1f668                 | _hg010b_spin2_cls
1f668     02 4A 05 F6 | 	mov	COUNT_, #2
1f66c     A8 00 A0 FD | 	call	#pushregs_
1f670     09 1F 02 F6 | 	mov	local01, arg01
1f674     0A 21 02 F6 | 	mov	local02, arg02
1f678                 | ' 
1f678                 | ' c:=bc
1f678                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1f678     DD E4 05 F1 | 	add	objptr, #221
1f67c     F2 12 02 FB | 	rdlong	arg01, objptr
1f680     A5 E4 85 F1 | 	sub	objptr, #165
1f684     F2 16 02 FB | 	rdlong	arg03, objptr
1f688     02 16 66 F0 | 	shl	arg03, #2
1f68c     10 15 02 F6 | 	mov	arg02, local02
1f690     00 18 06 F6 | 	mov	arg04, #0
1f694     01 1A 06 F6 | 	mov	arg05, #1
1f698     0B 00 00 FF 
1f69c     94 E4 05 F1 | 	add	objptr, ##5780
1f6a0     64 0B B0 FD | 	call	#_psram_spin2_fill
1f6a4                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1f6a4     0B 00 00 FF 
1f6a8     C8 E4 85 F1 | 	sub	objptr, ##5832
1f6ac     F2 12 02 FB | 	rdlong	arg01, objptr
1f6b0     04 E4 85 F1 | 	sub	objptr, #4
1f6b4     F2 16 02 FB | 	rdlong	arg03, objptr
1f6b8     09 17 82 F1 | 	sub	arg03, arg01
1f6bc     20 14 06 F6 | 	mov	arg02, #32
1f6c0     00 18 06 F6 | 	mov	arg04, #0
1f6c4     01 1A 06 F6 | 	mov	arg05, #1
1f6c8     0B 00 00 FF 
1f6cc     CC E4 05 F1 | 	add	objptr, ##5836
1f6d0     34 0B B0 FD | 	call	#_psram_spin2_fill
1f6d4                 | ' setwritecolors(fc,bc)
1f6d4                 | ' 
1f6d4                 | ' write_color:=ff
1f6d4     0B 00 00 FF 
1f6d8     8B E4 85 F1 | 	sub	objptr, ##5771
1f6dc     F2 1E 62 FC | 	wrlong	local01, objptr
1f6e0                 | ' write_background:=bb
1f6e0     04 E4 05 F1 | 	add	objptr, #4
1f6e4     F2 20 62 FC | 	wrlong	local02, objptr
1f6e8                 | ' cursor_x:=0
1f6e8     09 E4 85 F1 | 	sub	objptr, #9
1f6ec     F2 00 58 FC | 	wrword	#0, objptr
1f6f0                 | ' cursor_y:=0
1f6f0     02 E4 05 F1 | 	add	objptr, #2
1f6f4     F2 00 48 FC | 	wrbyte	#0, objptr
1f6f8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f6f8     02 E4 85 F1 | 	sub	objptr, #2
1f6fc     F2 14 E2 FA | 	rdword	arg02, objptr
1f700     02 14 66 F0 | 	shl	arg02, #2
1f704     02 E4 05 F1 | 	add	objptr, #2
1f708     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f70c     3E E4 85 F1 | 	sub	objptr, #62
1f710     04 16 66 F0 | 	shl	arg03, #4
1f714     04 16 06 F1 | 	add	arg03, #4
1f718     11 12 06 F6 | 	mov	arg01, #17
1f71c     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
1f720                 | ' setcursorcolor(fc)
1f720     0F 13 02 F6 | 	mov	arg01, local01
1f724     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
1f728     10 FB 01 F6 | 	mov	result1, local02
1f72c     00 FC 05 F6 | 	mov	result2, #0
1f730     A7 F0 03 F6 | 	mov	ptra, fp
1f734     B2 00 A0 FD | 	call	#popregs_
1f738                 | _hg010b_spin2_cls_ret
1f738     2D 00 64 FD | 	ret
1f73c                 | 
1f73c                 | ' 
1f73c                 | ' ''---------- Output a char at the cursor position, move the cursor 
1f73c                 | ' 
1f73c                 | ' pub putchar(achar) | c,x,y,l,newcpl
1f73c                 | _hg010b_spin2_putchar
1f73c     02 4A 05 F6 | 	mov	COUNT_, #2
1f740     A8 00 A0 FD | 	call	#pushregs_
1f744     09 1F 02 F6 | 	mov	local01, arg01
1f748                 | ' 
1f748                 | ' if achar==10
1f748     0A 1E 0E F2 | 	cmp	local01, #10 wz
1f74c                 | '   crlf()
1f74c     A4 05 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1f750                 | ' if achar==9
1f750     09 1E 0E F2 | 	cmp	local01, #9 wz
1f754     18 00 90 5D |  if_ne	jmp	#LR__2500
1f758                 | '   cursor_x:=(cursor_x& %11110000)+16
1f758     3C E4 05 F1 | 	add	objptr, #60
1f75c     F2 16 E2 FA | 	rdword	arg03, objptr
1f760     F0 16 06 F5 | 	and	arg03, #240
1f764     10 16 06 F1 | 	add	arg03, #16
1f768     F2 16 52 FC | 	wrword	arg03, objptr
1f76c     3C E4 85 F1 | 	sub	objptr, #60
1f770                 | LR__2500
1f770                 | '   
1f770                 | ' if (achar<>9) && (achar<>10) 
1f770     09 1E 0E F2 | 	cmp	local01, #9 wz
1f774     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1f778     A8 00 90 AD |  if_e	jmp	#LR__2501
1f77c                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1f77c     3C E4 05 F1 | 	add	objptr, #60
1f780     F2 12 E2 FA | 	rdword	arg01, objptr
1f784     02 E4 05 F1 | 	add	objptr, #2
1f788     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f78c     04 14 66 F0 | 	shl	arg02, #4
1f790     04 14 06 F1 | 	add	arg02, #4
1f794     03 E4 05 F1 | 	add	objptr, #3
1f798     F2 18 02 FB | 	rdlong	arg04, objptr
1f79c     04 E4 05 F1 | 	add	objptr, #4
1f7a0     F2 1A 02 FB | 	rdlong	arg05, objptr
1f7a4     45 E4 85 F1 | 	sub	objptr, #69
1f7a8     0F 17 02 F6 | 	mov	arg03, local01
1f7ac     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1f7b0     04 E4 05 F1 | 	add	objptr, #4
1f7b4     F2 12 02 FB | 	rdlong	arg01, objptr
1f7b8     10 00 00 FF 
1f7bc     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f7c0     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f7c4     3A E4 05 F1 | 	add	objptr, #58
1f7c8     F2 1A C2 FA | 	rdbyte	arg05, objptr
1f7cc     0D 17 02 FD | 	qmul	arg03, arg05
1f7d0                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1f7d0     10 00 00 FF 
1f7d4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f7d8     02 E4 85 F1 | 	sub	objptr, #2
1f7dc     F2 20 E2 FA | 	rdword	local02, objptr
1f7e0     01 20 46 F0 | 	shr	local02, #1
1f7e4     0F 15 02 F6 | 	mov	arg02, local01
1f7e8     01 16 06 F6 | 	mov	arg03, #1
1f7ec     00 18 06 F6 | 	mov	arg04, #0
1f7f0     01 1A 06 F6 | 	mov	arg05, #1
1f7f4     0B 00 00 FF 
1f7f8     90 E4 05 F1 | 	add	objptr, ##5776
1f7fc     18 1E 62 FD | 	getqx	local01
1f800     10 1F 02 F1 | 	add	local01, local02
1f804     0F 13 02 F1 | 	add	arg01, local01
1f808     FC 09 B0 FD | 	call	#_psram_spin2_fill
1f80c                 | '   cursor_x+=2
1f80c     0B 00 00 FF 
1f810     90 E4 85 F1 | 	sub	objptr, ##5776
1f814     F2 20 E2 FA | 	rdword	local02, objptr
1f818     02 20 06 F1 | 	add	local02, #2
1f81c     F2 20 52 FC | 	wrword	local02, objptr
1f820     3C E4 85 F1 | 	sub	objptr, #60
1f824                 | LR__2501
1f824                 | ' 
1f824                 | ' if cursor_x>=256
1f824     3C E4 05 F1 | 	add	objptr, #60
1f828     F2 20 E2 FA | 	rdword	local02, objptr
1f82c     3C E4 85 F1 | 	sub	objptr, #60
1f830     00 21 56 F2 | 	cmps	local02, #256 wc
1f834     64 00 90 CD |  if_b	jmp	#LR__2503
1f838                 | '   cursor_x:=0
1f838     3C E4 05 F1 | 	add	objptr, #60
1f83c     F2 00 58 FC | 	wrword	#0, objptr
1f840                 | '   cursor_y+=1
1f840     02 E4 05 F1 | 	add	objptr, #2
1f844     F2 20 C2 FA | 	rdbyte	local02, objptr
1f848     01 20 06 F1 | 	add	local02, #1
1f84c     F2 20 42 FC | 	wrbyte	local02, objptr
1f850                 | '   if cursor_y>st_lines-1
1f850     C3 E4 05 F1 | 	add	objptr, #195
1f854     F2 20 02 FB | 	rdlong	local02, objptr
1f858     01 20 86 F1 | 	sub	local02, #1
1f85c     C3 E4 85 F1 | 	sub	objptr, #195
1f860     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f864     3E E4 85 F1 | 	sub	objptr, #62
1f868     10 17 5A F2 | 	cmps	arg03, local02 wcz
1f86c     2C 00 90 ED |  if_be	jmp	#LR__2502
1f870                 | '     scrollup2()
1f870     00 12 06 F6 | 	mov	arg01, #0
1f874     01 00 00 FF 
1f878     58 14 06 F6 | 	mov	arg02, ##600
1f87c     10 16 06 F6 | 	mov	arg03, #16
1f880     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
1f884                 | '     cursor_y:=st_lines-1
1f884     01 E5 05 F1 | 	add	objptr, #257
1f888     F2 20 02 FB | 	rdlong	local02, objptr
1f88c     01 20 86 F1 | 	sub	local02, #1
1f890     C3 E4 85 F1 | 	sub	objptr, #195
1f894     F2 20 42 FC | 	wrbyte	local02, objptr
1f898     3E E4 85 F1 | 	sub	objptr, #62
1f89c                 | LR__2502
1f89c                 | LR__2503
1f89c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f89c     3C E4 05 F1 | 	add	objptr, #60
1f8a0     F2 14 E2 FA | 	rdword	arg02, objptr
1f8a4     02 14 66 F0 | 	shl	arg02, #2
1f8a8     02 E4 05 F1 | 	add	objptr, #2
1f8ac     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f8b0     3E E4 85 F1 | 	sub	objptr, #62
1f8b4     04 16 66 F0 | 	shl	arg03, #4
1f8b8     04 16 06 F1 | 	add	arg03, #4
1f8bc     11 12 06 F6 | 	mov	arg01, #17
1f8c0     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1f8c4     A7 F0 03 F6 | 	mov	ptra, fp
1f8c8     B2 00 A0 FD | 	call	#popregs_
1f8cc                 | _hg010b_spin2_putchar_ret
1f8cc     2D 00 64 FD | 	ret
1f8d0                 | 
1f8d0                 | '     
1f8d0                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1f8d0                 | ' 
1f8d0                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1f8d0                 | _hg010b_spin2_putchar2
1f8d0     02 4A 05 F6 | 	mov	COUNT_, #2
1f8d4     A8 00 A0 FD | 	call	#pushregs_
1f8d8     09 1F 02 F6 | 	mov	local01, arg01
1f8dc                 | ' 
1f8dc                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1f8dc     3C E4 05 F1 | 	add	objptr, #60
1f8e0     F2 12 E2 FA | 	rdword	arg01, objptr
1f8e4     02 E4 05 F1 | 	add	objptr, #2
1f8e8     F2 14 C2 FA | 	rdbyte	arg02, objptr
1f8ec     04 14 66 F0 | 	shl	arg02, #4
1f8f0     04 14 06 F1 | 	add	arg02, #4
1f8f4     03 E4 05 F1 | 	add	objptr, #3
1f8f8     F2 18 02 FB | 	rdlong	arg04, objptr
1f8fc     04 E4 05 F1 | 	add	objptr, #4
1f900     F2 1A 02 FB | 	rdlong	arg05, objptr
1f904     45 E4 85 F1 | 	sub	objptr, #69
1f908     0F 17 02 F6 | 	mov	arg03, local01
1f90c     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
1f910     04 E4 05 F1 | 	add	objptr, #4
1f914     F2 12 02 FB | 	rdlong	arg01, objptr
1f918     10 00 00 FF 
1f91c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1f920     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1f924     3A E4 05 F1 | 	add	objptr, #58
1f928     F2 1A C2 FA | 	rdbyte	arg05, objptr
1f92c     0D 17 02 FD | 	qmul	arg03, arg05
1f930                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1f930     10 00 00 FF 
1f934     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1f938     02 E4 85 F1 | 	sub	objptr, #2
1f93c     F2 20 E2 FA | 	rdword	local02, objptr
1f940     01 20 46 F0 | 	shr	local02, #1
1f944     0F 15 02 F6 | 	mov	arg02, local01
1f948     01 16 06 F6 | 	mov	arg03, #1
1f94c     00 18 06 F6 | 	mov	arg04, #0
1f950     01 1A 06 F6 | 	mov	arg05, #1
1f954     0B 00 00 FF 
1f958     90 E4 05 F1 | 	add	objptr, ##5776
1f95c     18 1E 62 FD | 	getqx	local01
1f960     10 1F 02 F1 | 	add	local01, local02
1f964     0F 13 02 F1 | 	add	arg01, local01
1f968     9C 08 B0 FD | 	call	#_psram_spin2_fill
1f96c                 | ' 
1f96c                 | ' cursor_x+=2
1f96c     0B 00 00 FF 
1f970     90 E4 85 F1 | 	sub	objptr, ##5776
1f974     F2 20 E2 FA | 	rdword	local02, objptr
1f978     02 20 06 F1 | 	add	local02, #2
1f97c     F2 20 52 FC | 	wrword	local02, objptr
1f980                 | ' if cursor_x>=256
1f980     F2 20 E2 FA | 	rdword	local02, objptr
1f984     3C E4 85 F1 | 	sub	objptr, #60
1f988     00 21 56 F2 | 	cmps	local02, #256 wc
1f98c     64 00 90 CD |  if_b	jmp	#LR__2511
1f990                 | '   cursor_x:=0
1f990     3C E4 05 F1 | 	add	objptr, #60
1f994     F2 00 58 FC | 	wrword	#0, objptr
1f998                 | '   cursor_y+=1
1f998     02 E4 05 F1 | 	add	objptr, #2
1f99c     F2 20 C2 FA | 	rdbyte	local02, objptr
1f9a0     01 20 06 F1 | 	add	local02, #1
1f9a4     F2 20 42 FC | 	wrbyte	local02, objptr
1f9a8                 | '   if cursor_y>st_lines-1
1f9a8     C3 E4 05 F1 | 	add	objptr, #195
1f9ac     F2 20 02 FB | 	rdlong	local02, objptr
1f9b0     01 20 86 F1 | 	sub	local02, #1
1f9b4     C3 E4 85 F1 | 	sub	objptr, #195
1f9b8     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f9bc     3E E4 85 F1 | 	sub	objptr, #62
1f9c0     10 17 5A F2 | 	cmps	arg03, local02 wcz
1f9c4     2C 00 90 ED |  if_be	jmp	#LR__2510
1f9c8                 | '     scrollup2()
1f9c8     00 12 06 F6 | 	mov	arg01, #0
1f9cc     01 00 00 FF 
1f9d0     58 14 06 F6 | 	mov	arg02, ##600
1f9d4     10 16 06 F6 | 	mov	arg03, #16
1f9d8     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
1f9dc                 | '     cursor_y:=st_lines-1
1f9dc     01 E5 05 F1 | 	add	objptr, #257
1f9e0     F2 20 02 FB | 	rdlong	local02, objptr
1f9e4     01 20 86 F1 | 	sub	local02, #1
1f9e8     C3 E4 85 F1 | 	sub	objptr, #195
1f9ec     F2 20 42 FC | 	wrbyte	local02, objptr
1f9f0     3E E4 85 F1 | 	sub	objptr, #62
1f9f4                 | LR__2510
1f9f4                 | LR__2511
1f9f4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
1f9f4     3C E4 05 F1 | 	add	objptr, #60
1f9f8     F2 14 E2 FA | 	rdword	arg02, objptr
1f9fc     02 14 66 F0 | 	shl	arg02, #2
1fa00     02 E4 05 F1 | 	add	objptr, #2
1fa04     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fa08     3E E4 85 F1 | 	sub	objptr, #62
1fa0c     04 16 66 F0 | 	shl	arg03, #4
1fa10     04 16 06 F1 | 	add	arg03, #4
1fa14     11 12 06 F6 | 	mov	arg01, #17
1fa18     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
1fa1c     A7 F0 03 F6 | 	mov	ptra, fp
1fa20     B2 00 A0 FD | 	call	#popregs_
1fa24                 | _hg010b_spin2_putchar2_ret
1fa24     2D 00 64 FD | 	ret
1fa28                 | 
1fa28                 | ' ''--------- Output a string at the cursor position, move the cursor  
1fa28                 | ' 
1fa28                 | ' pub write(text) | iii,c,ncx,ncy
1fa28                 | _hg010b_spin2_write
1fa28     04 4A 05 F6 | 	mov	COUNT_, #4
1fa2c     A8 00 A0 FD | 	call	#pushregs_
1fa30     09 1F 02 F6 | 	mov	local01, arg01
1fa34                 | ' 
1fa34                 | ' repeat iii from 0 to strsize(text)-1
1fa34     00 20 06 F6 | 	mov	local02, #0
1fa38     0F 13 02 F6 | 	mov	arg01, local01
1fa3c     09 23 02 F6 | 	mov	local03, arg01
1fa40     97 06 48 FB | 	callpa	#(@LR__2521-@LR__2520)>>2,fcache_load_ptr_
1fa44                 | LR__2520
1fa44     11 FB C9 FA | 	rdbyte	result1, local03 wz
1fa48     01 22 06 51 |  if_ne	add	local03, #1
1fa4c     F4 FF 9F 5D |  if_ne	jmp	#LR__2520
1fa50                 | LR__2521
1fa50     09 23 82 F1 | 	sub	local03, arg01
1fa54     01 22 86 F1 | 	sub	local03, #1
1fa58     00 22 56 F2 | 	cmps	local03, #0 wc
1fa5c     01 24 86 F6 | 	negc	local04, #1
1fa60     12 23 02 F1 | 	add	local03, local04
1fa64                 | LR__2522
1fa64                 | '   putchar2(byte[text+iii])
1fa64     0F 13 02 F6 | 	mov	arg01, local01
1fa68     10 13 02 F1 | 	add	arg01, local02
1fa6c     09 13 C2 FA | 	rdbyte	arg01, arg01
1fa70     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
1fa74     12 21 02 F1 | 	add	local02, local04
1fa78     11 21 0A F2 | 	cmp	local02, local03 wz
1fa7c     E4 FF 9F 5D |  if_ne	jmp	#LR__2522
1fa80     A7 F0 03 F6 | 	mov	ptra, fp
1fa84     B2 00 A0 FD | 	call	#popregs_
1fa88                 | _hg010b_spin2_write_ret
1fa88     2D 00 64 FD | 	ret
1fa8c                 | 
1fa8c                 | '    
1fa8c                 | ' ' a version for text scrolling in Basic shifted 4 lines down
1fa8c                 | ' 
1fa8c                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
1fa8c                 | _hg010b_spin2_scrollup2
1fa8c     03 4A 05 F6 | 	mov	COUNT_, #3
1fa90     A8 00 A0 FD | 	call	#pushregs_
1fa94                 | ' 	
1fa94                 | ' repeat i from 4 to 579 
1fa94     04 1E 06 F6 | 	mov	local01, #4
1fa98                 | LR__2530
1fa98     F9 E4 05 F1 | 	add	objptr, #249
1fa9c     F2 1A 02 FB | 	rdlong	arg05, objptr
1faa0     1C E4 85 F1 | 	sub	objptr, #28
1faa4     F2 14 02 FB | 	rdlong	arg02, objptr
1faa8     0F 19 02 F6 | 	mov	arg04, local01
1faac     10 18 06 F1 | 	add	arg04, #16
1fab0     02 18 66 F0 | 	shl	arg04, #2
1fab4     14 E4 05 F1 | 	add	objptr, #20
1fab8     F2 16 02 FB | 	rdlong	arg03, objptr
1fabc     0B 19 02 FD | 	qmul	arg04, arg03
1fac0                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1fac0     F6 03 00 FF 
1fac4     00 12 06 F6 | 	mov	arg01, ##519168
1fac8     0D 13 82 F1 | 	sub	arg01, arg05
1facc     02 16 66 F0 | 	shl	arg03, #2
1fad0     0A 00 00 FF 
1fad4     DB E5 05 F1 | 	add	objptr, ##5595
1fad8     18 1A 62 FD | 	getqx	arg05
1fadc     0D 15 02 F1 | 	add	arg02, arg05
1fae0     EC 05 B0 FD | 	call	#_psram_spin2_read1
1fae4     0A 00 00 FF 
1fae8     D3 E5 85 F1 | 	sub	objptr, ##5587
1faec     F2 1A 02 FB | 	rdlong	arg05, objptr
1faf0     1C E4 85 F1 | 	sub	objptr, #28
1faf4     F2 14 02 FB | 	rdlong	arg02, objptr
1faf8     0F 19 02 F6 | 	mov	arg04, local01
1fafc     02 18 66 F0 | 	shl	arg04, #2
1fb00     14 E4 05 F1 | 	add	objptr, #20
1fb04     F2 16 02 FB | 	rdlong	arg03, objptr
1fb08     0B 19 02 FD | 	qmul	arg04, arg03
1fb0c                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1fb0c     F6 03 00 FF 
1fb10     00 12 06 F6 | 	mov	arg01, ##519168
1fb14     0D 13 82 F1 | 	sub	arg01, arg05
1fb18     02 16 66 F0 | 	shl	arg03, #2
1fb1c     0A 00 00 FF 
1fb20     DB E5 05 F1 | 	add	objptr, ##5595
1fb24     18 1A 62 FD | 	getqx	arg05
1fb28     0D 15 02 F1 | 	add	arg02, arg05
1fb2c     3C 06 B0 FD | 	call	#_psram_spin2_write
1fb30     0B 00 00 FF 
1fb34     CC E4 85 F1 | 	sub	objptr, ##5836
1fb38     01 1E 06 F1 | 	add	local01, #1
1fb3c     01 00 00 FF 
1fb40     44 1E 16 F2 | 	cmp	local01, ##580 wc
1fb44     50 FF 9F CD |  if_b	jmp	#LR__2530
1fb48                 | ' 
1fb48                 | ' repeat i from 580 to 599
1fb48     01 00 00 FF 
1fb4c     44 1E 06 F6 | 	mov	local01, ##580
1fb50                 | LR__2531
1fb50                 | '    fastline(0,1023,i,write_background)   
1fb50     45 E4 05 F1 | 	add	objptr, #69
1fb54     F2 18 02 FB | 	rdlong	arg04, objptr
1fb58     45 E4 85 F1 | 	sub	objptr, #69
1fb5c     00 12 06 F6 | 	mov	arg01, #0
1fb60     09 14 CE F9 | 	bmask	arg02, #9
1fb64     0F 17 02 F6 | 	mov	arg03, local01
1fb68     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
1fb6c     01 1E 06 F1 | 	add	local01, #1
1fb70     01 00 00 FF 
1fb74     58 1E 16 F2 | 	cmp	local01, ##600 wc
1fb78     D4 FF 9F CD |  if_b	jmp	#LR__2531
1fb7c                 | ' repeat i from 0 to 3
1fb7c     00 1E 06 F6 | 	mov	local01, #0
1fb80                 | LR__2532
1fb80                 | '    fastline(0,1023,i,write_background)      
1fb80     45 E4 05 F1 | 	add	objptr, #69
1fb84     F2 18 02 FB | 	rdlong	arg04, objptr
1fb88     45 E4 85 F1 | 	sub	objptr, #69
1fb8c     00 12 06 F6 | 	mov	arg01, #0
1fb90     09 14 CE F9 | 	bmask	arg02, #9
1fb94     0F 17 02 F6 | 	mov	arg03, local01
1fb98     90 EF BF FD | 	call	#_hg010b_spin2_fastline
1fb9c     01 1E 06 F1 | 	add	local01, #1
1fba0     04 1E 56 F2 | 	cmps	local01, #4 wc
1fba4     D8 FF 9F CD |  if_b	jmp	#LR__2532
1fba8                 | ' 
1fba8                 | ' repeat i from 0 to 35
1fba8     00 1E 06 F6 | 	mov	local01, #0
1fbac                 | LR__2533
1fbac     0F 1B 02 F6 | 	mov	arg05, local01
1fbb0     01 1A 06 F1 | 	add	arg05, #1
1fbb4     10 00 00 FF 
1fbb8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1fbbc     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1fbc0     0B 1B 02 FD | 	qmul	arg05, arg03
1fbc4                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
1fbc4     F6 03 00 FF 
1fbc8     00 12 06 F6 | 	mov	arg01, ##519168
1fbcc     F9 E4 05 F1 | 	add	objptr, #249
1fbd0     F2 1A 02 FB | 	rdlong	arg05, objptr
1fbd4     0D 13 82 F1 | 	sub	arg01, arg05
1fbd8     F5 E4 85 F1 | 	sub	objptr, #245
1fbdc     F2 14 02 FB | 	rdlong	arg02, objptr
1fbe0     10 00 00 FF 
1fbe4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1fbe8     0B 00 00 FF 
1fbec     C8 E4 05 F1 | 	add	objptr, ##5832
1fbf0     18 1A 62 FD | 	getqx	arg05
1fbf4     0D 15 02 F1 | 	add	arg02, arg05
1fbf8     D4 04 B0 FD | 	call	#_psram_spin2_read1
1fbfc     10 00 00 FF 
1fc00     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1fc04     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1fc08     0B 1F 02 FD | 	qmul	local01, arg03
1fc0c                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
1fc0c     F6 03 00 FF 
1fc10     00 12 06 F6 | 	mov	arg01, ##519168
1fc14     0A 00 00 FF 
1fc18     D3 E5 85 F1 | 	sub	objptr, ##5587
1fc1c     F2 1A 02 FB | 	rdlong	arg05, objptr
1fc20     0D 13 82 F1 | 	sub	arg01, arg05
1fc24     F5 E4 85 F1 | 	sub	objptr, #245
1fc28     F2 14 02 FB | 	rdlong	arg02, objptr
1fc2c     10 00 00 FF 
1fc30     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1fc34     0B 00 00 FF 
1fc38     C8 E4 05 F1 | 	add	objptr, ##5832
1fc3c     18 1A 62 FD | 	getqx	arg05
1fc40     0D 15 02 F1 | 	add	arg02, arg05
1fc44     24 05 B0 FD | 	call	#_psram_spin2_write
1fc48     0B 00 00 FF 
1fc4c     CC E4 85 F1 | 	sub	objptr, ##5836
1fc50     01 1E 06 F1 | 	add	local01, #1
1fc54     24 1E 56 F2 | 	cmps	local01, #36 wc
1fc58     50 FF 9F CD |  if_b	jmp	#LR__2533
1fc5c                 | ' repeat i from 0 to timings[7]-1
1fc5c     00 1E 06 F6 | 	mov	local01, #0
1fc60     10 00 00 FF 
1fc64     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1fc68     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1fc6c     10 00 00 FF 
1fc70     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1fc74     01 20 86 F1 | 	sub	local02, #1
1fc78     00 20 56 F2 | 	cmps	local02, #0 wc
1fc7c     01 22 86 F6 | 	negc	local03, #1
1fc80     11 21 02 F1 | 	add	local02, local03
1fc84                 | LR__2534
1fc84                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
1fc84     04 E4 05 F1 | 	add	objptr, #4
1fc88     F2 12 02 FB | 	rdlong	arg01, objptr
1fc8c     10 00 00 FF 
1fc90     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1fc94     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1fc98     10 00 00 FF 
1fc9c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1fca0     0D 19 02 F6 | 	mov	arg04, arg05
1fca4     03 18 66 F0 | 	shl	arg04, #3
1fca8     0D 19 02 F1 | 	add	arg04, arg05
1fcac     02 18 66 F0 | 	shl	arg04, #2
1fcb0     0F 19 02 F1 | 	add	arg04, local01
1fcb4     0C 13 02 F1 | 	add	arg01, arg04
1fcb8     20 14 06 F6 | 	mov	arg02, #32
1fcbc     01 16 06 F6 | 	mov	arg03, #1
1fcc0     00 18 06 F6 | 	mov	arg04, #0
1fcc4     01 1A 06 F6 | 	mov	arg05, #1
1fcc8     0B 00 00 FF 
1fccc     C8 E4 05 F1 | 	add	objptr, ##5832
1fcd0     34 05 B0 FD | 	call	#_psram_spin2_fill
1fcd4     0B 00 00 FF 
1fcd8     CC E4 85 F1 | 	sub	objptr, ##5836
1fcdc     11 1F 02 F1 | 	add	local01, local03
1fce0     10 1F 0A F2 | 	cmp	local01, local02 wz
1fce4     9C FF 9F 5D |  if_ne	jmp	#LR__2534
1fce8     A7 F0 03 F6 | 	mov	ptra, fp
1fcec     B2 00 A0 FD | 	call	#popregs_
1fcf0                 | _hg010b_spin2_scrollup2_ret
1fcf0     2D 00 64 FD | 	ret
1fcf4                 | 
1fcf4                 | ' 
1fcf4                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
1fcf4                 | ' 
1fcf4                 | ' pub crlf()
1fcf4                 | _hg010b_spin2_crlf
1fcf4                 | ' 
1fcf4                 | ' cursor_x:=leading_spaces*2
1fcf4     01 00 00 FF 
1fcf8     B6 E4 05 F1 | 	add	objptr, ##694
1fcfc     F2 16 02 FB | 	rdlong	arg03, objptr
1fd00     01 16 66 F0 | 	shl	arg03, #1
1fd04     01 00 00 FF 
1fd08     7A E4 85 F1 | 	sub	objptr, ##634
1fd0c     F2 16 52 FC | 	wrword	arg03, objptr
1fd10                 | ' cursor_y+=1
1fd10     02 E4 05 F1 | 	add	objptr, #2
1fd14     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fd18     01 16 06 F1 | 	add	arg03, #1
1fd1c     F2 16 42 FC | 	wrbyte	arg03, objptr
1fd20                 | ' if cursor_y>st_lines-1
1fd20     C3 E4 05 F1 | 	add	objptr, #195
1fd24     F2 16 02 FB | 	rdlong	arg03, objptr
1fd28     01 16 86 F1 | 	sub	arg03, #1
1fd2c     C3 E4 85 F1 | 	sub	objptr, #195
1fd30     F2 14 C2 FA | 	rdbyte	arg02, objptr
1fd34     3E E4 85 F1 | 	sub	objptr, #62
1fd38     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
1fd3c     2C 00 90 ED |  if_be	jmp	#LR__2540
1fd40                 | '   scrollup2()
1fd40     00 12 06 F6 | 	mov	arg01, #0
1fd44     01 00 00 FF 
1fd48     58 14 06 F6 | 	mov	arg02, ##600
1fd4c     10 16 06 F6 | 	mov	arg03, #16
1fd50     38 FD BF FD | 	call	#_hg010b_spin2_scrollup2
1fd54                 | '   cursor_y:=st_lines-1
1fd54     01 E5 05 F1 | 	add	objptr, #257
1fd58     F2 16 02 FB | 	rdlong	arg03, objptr
1fd5c     01 16 86 F1 | 	sub	arg03, #1
1fd60     C3 E4 85 F1 | 	sub	objptr, #195
1fd64     F2 16 42 FC | 	wrbyte	arg03, objptr
1fd68     3E E4 85 F1 | 	sub	objptr, #62
1fd6c                 | LR__2540
1fd6c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
1fd6c     3C E4 05 F1 | 	add	objptr, #60
1fd70     F2 14 E2 FA | 	rdword	arg02, objptr
1fd74     02 14 66 F0 | 	shl	arg02, #2
1fd78     02 E4 05 F1 | 	add	objptr, #2
1fd7c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fd80     3E E4 85 F1 | 	sub	objptr, #62
1fd84     04 16 66 F0 | 	shl	arg03, #4
1fd88     04 16 06 F1 | 	add	arg03, #4
1fd8c     11 12 06 F6 | 	mov	arg01, #17
1fd90     4C EB BF FD | 	call	#_hg010b_spin2_setspritepos
1fd94                 | _hg010b_spin2_crlf_ret
1fd94     2D 00 64 FD | 	ret
1fd98                 | 
1fd98                 | ' 
1fd98                 | ' 
1fd98                 | ' '*************************************************************************
1fd98                 | ' '                                                                        *
1fd98                 | ' '  Conversions                                                           *
1fd98                 | ' '                                                                        *
1fd98                 | ' '*************************************************************************
1fd98                 | ' 
1fd98                 | ' ''---------- Convert a integer to dec string, return a pointer
1fd98                 | ' 
1fd98                 | ' pub inttostr(i):result |q,pos,k,j
1fd98                 | _hg010b_spin2_inttostr
1fd98     03 4A 05 F6 | 	mov	COUNT_, #3
1fd9c     A8 00 A0 FD | 	call	#pushregs_
1fda0     09 1F 0A F6 | 	mov	local01, arg01 wz
1fda4                 | ' 
1fda4                 | ' j:=i
1fda4                 | ' pos:=10
1fda4     0A 20 06 F6 | 	mov	local02, #10
1fda8                 | ' k:=0
1fda8     00 22 06 F6 | 	mov	local03, #0
1fdac                 | ' 
1fdac                 | ' if (j==0)
1fdac     18 00 90 5D |  if_ne	jmp	#LR__2550
1fdb0                 | '   n_string[0]:=48
1fdb0     4D E4 05 F1 | 	add	objptr, #77
1fdb4     F2 60 48 FC | 	wrbyte	#48, objptr
1fdb8                 | '   n_string[1]:=0
1fdb8     01 E4 05 F1 | 	add	objptr, #1
1fdbc     F2 00 48 FC | 	wrbyte	#0, objptr
1fdc0     4E E4 85 F1 | 	sub	objptr, #78
1fdc4     C4 00 90 FD | 	jmp	#LR__2557
1fdc8                 | LR__2550
1fdc8                 | ' 
1fdc8                 | ' else
1fdc8                 | '   if (j<0)
1fdc8     0F 1F 52 F6 | 	abs	local01, local01 wc
1fdcc                 | '     j:=0-j
1fdcc                 | '     k:=45
1fdcc     2D 22 06 C6 |  if_b	mov	local03, #45
1fdd0                 | ' 
1fdd0                 | '   n_string[11]:=0
1fdd0     58 E4 05 F1 | 	add	objptr, #88
1fdd4     F2 00 48 FC | 	wrbyte	#0, objptr
1fdd8     58 E4 85 F1 | 	sub	objptr, #88
1fddc     97 24 48 FB | 	callpa	#(@LR__2552-@LR__2551)>>2,fcache_load_ptr_
1fde0                 | '   repeat while (pos>-1)
1fde0                 | LR__2551
1fde0     00 20 56 F2 | 	cmps	local02, #0 wc
1fde4     40 00 90 CD |  if_b	jmp	#LR__2553
1fde8     0F FB 51 F6 | 	abs	result1, local01 wc
1fdec     0A FA 15 FD | 	qdiv	result1, #10
1fdf0                 | '     q:=j//10
1fdf0     19 FA 61 FD | 	getqy	result1
1fdf4     FD FA 81 F6 | 	negc	result1, result1
1fdf8     0F 1F 52 F6 | 	abs	local01, local01 wc
1fdfc     0A 1E 16 FD | 	qdiv	local01, #10
1fe00                 | '     q:=48+q
1fe00     30 FA 05 F1 | 	add	result1, #48
1fe04                 | '     n_string[pos]:=q
1fe04     10 1F 02 F6 | 	mov	local01, local02
1fe08     4D E4 05 F1 | 	add	objptr, #77
1fe0c     F2 1E 02 F1 | 	add	local01, objptr
1fe10     0F FB 41 FC | 	wrbyte	result1, local01
1fe14                 | '     j:=j/10
1fe14     4D E4 85 F1 | 	sub	objptr, #77
1fe18                 | '     pos-=1
1fe18     01 20 86 F1 | 	sub	local02, #1
1fe1c     18 1E 62 FD | 	getqx	local01
1fe20     0F 1F 82 F6 | 	negc	local01, local01
1fe24     B8 FF 9F FD | 	jmp	#LR__2551
1fe28                 | LR__2552
1fe28                 | LR__2553
1fe28                 | '   repeat while n_string[0]==48
1fe28                 | LR__2554
1fe28     4D E4 05 F1 | 	add	objptr, #77
1fe2c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fe30     4D E4 85 F1 | 	sub	objptr, #77
1fe34     30 16 0E F2 | 	cmp	arg03, #48 wz
1fe38     20 00 90 5D |  if_ne	jmp	#LR__2555
1fe3c                 | '     bytemove(@n_string,@n_string+1,12)
1fe3c     4D E4 05 F1 | 	add	objptr, #77
1fe40     F2 12 02 F6 | 	mov	arg01, objptr
1fe44     F2 14 02 F6 | 	mov	arg02, objptr
1fe48     4D E4 85 F1 | 	sub	objptr, #77
1fe4c     01 14 06 F1 | 	add	arg02, #1
1fe50     0C 16 06 F6 | 	mov	arg03, #12
1fe54     D8 0D B0 FD | 	call	#__system____builtin_memmove
1fe58     CC FF 9F FD | 	jmp	#LR__2554
1fe5c                 | LR__2555
1fe5c                 | ' 
1fe5c                 | '   if k==45
1fe5c     2D 22 0E F2 | 	cmp	local03, #45 wz
1fe60     28 00 90 5D |  if_ne	jmp	#LR__2556
1fe64                 | '      bytemove(@n_string+1,@n_string,12)
1fe64     4D E4 05 F1 | 	add	objptr, #77
1fe68     F2 12 02 F6 | 	mov	arg01, objptr
1fe6c     01 12 06 F1 | 	add	arg01, #1
1fe70     F2 14 02 F6 | 	mov	arg02, objptr
1fe74     4D E4 85 F1 | 	sub	objptr, #77
1fe78     0C 16 06 F6 | 	mov	arg03, #12
1fe7c     B0 0D B0 FD | 	call	#__system____builtin_memmove
1fe80                 | '      n_string[0]:=k
1fe80     4D E4 05 F1 | 	add	objptr, #77
1fe84     F2 22 42 FC | 	wrbyte	local03, objptr
1fe88     4D E4 85 F1 | 	sub	objptr, #77
1fe8c                 | LR__2556
1fe8c                 | LR__2557
1fe8c                 | ' 
1fe8c                 | ' q:=@n_string
1fe8c     4D E4 05 F1 | 	add	objptr, #77
1fe90     F2 FA 01 F6 | 	mov	result1, objptr
1fe94     4D E4 85 F1 | 	sub	objptr, #77
1fe98                 | ' return q
1fe98     A7 F0 03 F6 | 	mov	ptra, fp
1fe9c     B2 00 A0 FD | 	call	#popregs_
1fea0                 | _hg010b_spin2_inttostr_ret
1fea0     2D 00 64 FD | 	ret
1fea4                 | 
1fea4                 | ' 
1fea4                 | ' '..............................................................................
1fea4                 | ' 
1fea4                 | ' {{
1fea4                 | ' }}
1fea4                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1fea4                 | _psram_spin2_startx
1fea4     04 4A 05 F6 | 	mov	COUNT_, #4
1fea8     A8 00 A0 FD | 	call	#pushregs_
1feac     09 1F 02 F6 | 	mov	local01, arg01
1feb0     0B 21 02 F6 | 	mov	local02, arg03
1feb4     0C 23 02 F6 | 	mov	local03, arg04
1feb8                 | '     stop() ' restart driver if required
1feb8     54 01 B0 FD | 	call	#_psram_spin2_stop
1febc     00 1E 0E F2 | 	cmp	local01, #0 wz
1fec0     14 1E 06 AB |  if_e	rdlong	local01, #20
1fec4     0F 15 52 F6 | 	abs	arg02, local01 wc
1fec8     A1 07 00 FF 
1fecc     40 14 16 FD | 	qdiv	arg02, ##1000000
1fed0                 | ' 
1fed0                 | '     ' use current frequency if none specified
1fed0                 | ' 
1fed0                 | '     if freq == 0 
1fed0                 | '         freq := clkfreq 
1fed0                 | ' 
1fed0                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1fed0                 | ' 
1fed0                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1fed0                 | '     if burst < 0
1fed0                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1fed0     18 14 62 FD | 	getqx	arg02
1fed4     0A 19 82 F6 | 	negc	arg04, arg02
1fed8     03 18 66 F0 | 	shl	arg04, #3
1fedc     84 18 86 F1 | 	sub	arg04, #132
1fee0     04 18 46 F0 | 	shr	arg04, #4
1fee4     04 18 66 F0 | 	shl	arg04, #4
1fee8     00 18 56 F2 | 	cmps	arg04, #0 wc
1feec     0E FA 65 C6 |  if_b	neg	result1, #14
1fef0     10 01 90 CD |  if_b	jmp	#LR__2563
1fef4                 | ' 
1fef4                 | '     ' compute the input delay
1fef4                 | ' 
1fef4                 | '     if delay <= 0
1fef4     01 20 56 F2 | 	cmps	local02, #1 wc
1fef8     10 00 90 3D |  if_ae	jmp	#LR__2560
1fefc                 | '         delay := lookupDelay(freq)
1fefc     0F 13 02 F6 | 	mov	arg01, local01
1ff00     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
1ff04     FD 20 02 F6 | 	mov	local02, result1
1ff08     04 00 90 FD | 	jmp	#LR__2561
1ff0c                 | LR__2560
1ff0c                 | '     else
1ff0c                 | '         delay <#= $f ' limit to 15
1ff0c     0F 20 66 F3 | 	fles	local02, #15
1ff10                 | LR__2561
1ff10                 | ' 
1ff10                 | '     ' create our lock
1ff10                 | ' 
1ff10                 | '     driverlock := LOCKNEW()  
1ff10     00 FA 05 F6 | 	mov	result1, #0
1ff14     04 FA 61 FD | 	locknew	result1
1ff18     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1ff1c     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1ff20                 | '     if driverlock == -1
1ff20     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1ff24     FF FF 7F FF 
1ff28     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1ff2c                 | '         return ERR_NO_LOCK
1ff2c     1A FA 65 A6 |  if_e	neg	result1, #26
1ff30     D0 00 90 AD |  if_e	jmp	#LR__2563
1ff34                 | ' 
1ff34                 | '     ' patch in the proper data and HUB addresses to the startup structure
1ff34                 | ' 
1ff34                 | '     long[@startupData][0]:=clkfreq
1ff34     14 1E 06 FB | 	rdlong	local01, #20
1ff38     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
1ff3c     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1ff40                 | ' '    long[@startupData][1]:=$1000_0000
1ff40                 | '     long[@startupData][5]:=@deviceData
1ff40     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1ff44     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1ff48     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
1ff4c     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1ff50     14 14 06 F1 | 	add	arg02, #20
1ff54     0A 1F 62 FC | 	wrlong	local01, arg02
1ff58                 | '     long[@startupData][6]:=@qosData
1ff58     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
1ff5c     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1ff60     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1ff64     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1ff68     18 14 06 F1 | 	add	arg02, #24
1ff6c     0A 1F 62 FC | 	wrlong	local01, arg02
1ff70                 | '     long[@startupData][7]:=$7FF00
1ff70     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1ff74     1C 1E 06 F1 | 	add	local01, #28
1ff78     FF 03 80 FF 
1ff7c     0F 01 6A FC | 	wrlong	##524032, local01
1ff80                 | ' 
1ff80                 | '     ' setup some default bank and QoS parameter values
1ff80                 | ' 
1ff80                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1ff80     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1ff84     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1ff88     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
1ff8c     10 18 66 F0 | 	shl	arg04, #16
1ff90     0C 20 66 F0 | 	shl	local02, #12
1ff94     10 19 42 F5 | 	or	arg04, local02
1ff98     18 18 46 F5 | 	or	arg04, #24
1ff9c     0C 15 02 F6 | 	mov	arg02, arg04
1ffa0     02 16 06 F6 | 	mov	arg03, #2
1ffa4     A0 00 A0 FD | 	call	#\builtin_longfill_
1ffa8                 | '     longfill(@qosData, $FFFF0000, 8)
1ffa8     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1ffac     07 16 06 F6 | 	mov	arg03, #7
1ffb0     28 16 62 FD | 	setq	arg03
1ffb4     80 FF FF FF 
1ffb8     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
1ffbc                 | ' 
1ffbc                 | '     ' get the address of the PSRAM memory driver so we can start it
1ffbc                 | ' 
1ffbc                 | '     driverAddr:= driver.getDriverAddr()
1ffbc                 | '     return @driver_start
1ffbc     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1ffc0     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1ffc4     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1ffc8                 | ' 
1ffc8                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1ffc8                 | ' 
1ffc8                 | '     if desiredcog < 0
1ffc8     00 22 56 F2 | 	cmps	local03, #0 wc
1ffcc                 | '         desiredcog := NEWCOG
1ffcc     10 22 06 C6 |  if_b	mov	local03, #16
1ffd0                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1ffd0     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1ffd4     11 25 02 F6 | 	mov	local04, local03
1ffd8     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
1ffdc     0A 25 F2 FC | 	coginit	local04, arg02 wc
1ffe0     01 24 66 C6 |  if_b	neg	local04, #1
1ffe4     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1ffe8     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
1ffec                 | '     repeat until long[@startupData] == 0 
1ffec     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1fff0                 | LR__2562
1fff0     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1fff4     F8 FF 9F 5D |  if_ne	jmp	#LR__2562
1fff8                 | ' 
1fff8                 | '     return drivercog
1fff8     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1fffc     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
20000     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20004                 | LR__2563
20004     A7 F0 03 F6 | 	mov	ptra, fp
20008     B2 00 A0 FD | 	call	#popregs_
2000c                 | _psram_spin2_startx_ret
2000c     2D 00 64 FD | 	ret
20010                 | 
20010                 | ' 
20010                 | ' '..............................................................................
20010                 | ' 
20010                 | ' {{
20010                 | ' }}
20010                 | ' PUB stop() : i
20010                 | _psram_spin2_stop
20010     00 00 06 F6 | 	mov	_var01, #0
20014                 | '     if drivercog <> -1
20014     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20018     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
2001c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20020     FF FF 7F FF 
20024     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
20028     70 00 90 AD |  if_e	jmp	#LR__2573
2002c                 | '         cogstop(drivercog) ' a rather brutal stop
2002c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20030     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
20034     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20038     03 12 62 FD | 	cogstop	arg01
2003c     97 26 48 FB | 	callpa	#(@LR__2572-@LR__2570)>>2,fcache_load_ptr_
20040                 | '         repeat i from 0 to 7
20040                 | LR__2570
20040                 | '             if long[$7FF00][i*3] < 0
20040     00 FB 01 F6 | 	mov	result1, _var01
20044     01 FA 65 F0 | 	shl	result1, #1
20048     00 FB 01 F1 | 	add	result1, _var01
2004c     02 FA 65 F0 | 	shl	result1, #2
20050     FF 03 00 FF 
20054     00 FB 05 F1 | 	add	result1, ##524032
20058     FD FA 01 FB | 	rdlong	result1, result1
2005c     00 FA 55 F2 | 	cmps	result1, #0 wc
20060     1C 00 90 3D |  if_ae	jmp	#LR__2571
20064                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
20064     00 FB 01 F6 | 	mov	result1, _var01
20068     01 FA 65 F0 | 	shl	result1, #1
2006c     00 FB 01 F1 | 	add	result1, _var01
20070     02 FA 65 F0 | 	shl	result1, #2
20074     FF 03 00 FF 
20078     00 FB 05 F1 | 	add	result1, ##524032
2007c     FD 20 68 FC | 	wrlong	#16, result1
20080                 | LR__2571
20080     01 00 06 F1 | 	add	_var01, #1
20084     08 00 56 F2 | 	cmps	_var01, #8 wc
20088     B4 FF 9F CD |  if_b	jmp	#LR__2570
2008c                 | LR__2572
2008c                 | '         drivercog := -1
2008c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20090     FF FF FF FF 
20094     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
20098     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2009c                 | LR__2573
2009c                 | '     if driverlock <> -1
2009c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
200a0     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
200a4     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
200a8     FF FF 7F FF 
200ac     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
200b0                 | '         LOCKRET(driverlock)
200b0     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
200b4     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
200b8     05 12 62 5D |  if_ne	lockret	arg01
200bc                 | '         driverlock := -1
200bc     FF FF FF 5F 
200c0     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
200c4     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
200c8     00 FB 01 F6 | 	mov	result1, _var01
200cc                 | _psram_spin2_stop_ret
200cc     2D 00 64 FD | 	ret
200d0                 | 
200d0                 | ' 
200d0                 | ' '..............................................................................
200d0                 | ' 
200d0                 | ' {{
200d0                 | ' }}
200d0                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
200d0                 | _psram_spin2_read1
200d0                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
200d0                 | '     if drivercog == -1 ' driver must be running
200d0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
200d4     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
200d8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
200dc     FF FF 7F FF 
200e0     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
200e4                 | '         return ERR_INACTIVE
200e4     0F FA 65 A6 |  if_e	neg	result1, #15
200e8     7C 00 90 AD |  if_e	jmp	#LR__2581
200ec                 | '     if count == 0 ' don't even bother reading
200ec     00 16 0E F2 | 	cmp	arg03, #0 wz
200f0                 | '         return 0
200f0     00 FA 05 A6 |  if_e	mov	result1, #0
200f4     70 00 90 AD |  if_e	jmp	#LR__2581
200f8                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
200f8     00 FA 05 F6 | 	mov	result1, #0
200fc     01 FA 61 FD | 	cogid	result1
20100     FD 00 02 F6 | 	mov	_var01, result1
20104     01 00 66 F0 | 	shl	_var01, #1
20108     FD 00 02 F1 | 	add	_var01, result1
2010c     02 00 66 F0 | 	shl	_var01, #2
20110     FF 03 00 FF 
20114     00 03 06 F6 | 	mov	_var02, ##524032
20118     00 03 02 F1 | 	add	_var02, _var01
2011c                 | '     if long[mailbox] < 0
2011c     01 01 02 FB | 	rdlong	_var01, _var02
20120     00 00 56 F2 | 	cmps	_var01, #0 wc
20124                 | '         return ERR_MAILBOX_BUSY
20124     1C FA 65 C6 |  if_b	neg	result1, #28
20128     3C 00 90 CD |  if_b	jmp	#LR__2581
2012c                 | '     long[mailbox][2] := count
2012c     08 02 06 F1 | 	add	_var02, #8
20130     01 17 62 FC | 	wrlong	arg03, _var02
20134                 | '     long[mailbox][1] := dstHubAddr
20134     04 02 86 F1 | 	sub	_var02, #4
20138     01 13 62 FC | 	wrlong	arg01, _var02
2013c     04 02 86 F1 | 	sub	_var02, #4
20140                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
20140     0A 05 02 F6 | 	mov	_var03, arg02
20144     D9 04 06 F4 | 	bitl	_var03, #217
20148     00 00 58 FF 
2014c     00 00 06 F6 | 	mov	_var01, ##-1342177280
20150     02 01 02 F1 | 	add	_var01, _var03
20154     01 01 62 FC | 	wrlong	_var01, _var02
20158                 | '     repeat
20158                 | LR__2580
20158                 | '         result := long[mailbox]    
20158     01 05 02 FB | 	rdlong	_var03, _var02
2015c     00 04 56 F2 | 	cmps	_var03, #0 wc
20160     F4 FF 9F CD |  if_b	jmp	#LR__2580
20164                 | '     while result < 0   
20164                 | '     return -result                       'return success or error
20164     02 FB 61 F6 | 	neg	result1, _var03
20168                 | LR__2581
20168                 | _psram_spin2_read1_ret
20168     2D 00 64 FD | 	ret
2016c                 | 
2016c                 | ' 
2016c                 | ' '..............................................................................
2016c                 | ' 
2016c                 | ' {{
2016c                 | ' }}
2016c                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
2016c                 | _psram_spin2_write
2016c                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
2016c                 | '     if drivercog == -1 ' driver must be running
2016c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20170     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
20174     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20178     FF FF 7F FF 
2017c     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
20180                 | '         return ERR_INACTIVE
20180     0F FA 65 A6 |  if_e	neg	result1, #15
20184     7C 00 90 AD |  if_e	jmp	#LR__2591
20188                 | '     if count == 0 ' don't even bother writing
20188     00 16 0E F2 | 	cmp	arg03, #0 wz
2018c                 | '         return 0
2018c     00 FA 05 A6 |  if_e	mov	result1, #0
20190     70 00 90 AD |  if_e	jmp	#LR__2591
20194                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
20194     00 FA 05 F6 | 	mov	result1, #0
20198     01 FA 61 FD | 	cogid	result1
2019c     FD 00 02 F6 | 	mov	_var01, result1
201a0     01 00 66 F0 | 	shl	_var01, #1
201a4     FD 00 02 F1 | 	add	_var01, result1
201a8     02 00 66 F0 | 	shl	_var01, #2
201ac     FF 03 00 FF 
201b0     00 03 06 F6 | 	mov	_var02, ##524032
201b4     00 03 02 F1 | 	add	_var02, _var01
201b8                 | '     if long[mailbox] < 0
201b8     01 01 02 FB | 	rdlong	_var01, _var02
201bc     00 00 56 F2 | 	cmps	_var01, #0 wc
201c0                 | '         return ERR_MAILBOX_BUSY
201c0     1C FA 65 C6 |  if_b	neg	result1, #28
201c4     3C 00 90 CD |  if_b	jmp	#LR__2591
201c8                 | '     long[mailbox][2] := count
201c8     08 02 06 F1 | 	add	_var02, #8
201cc     01 17 62 FC | 	wrlong	arg03, _var02
201d0                 | '     long[mailbox][1] := srcHubAddr
201d0     04 02 86 F1 | 	sub	_var02, #4
201d4     01 13 62 FC | 	wrlong	arg01, _var02
201d8     04 02 86 F1 | 	sub	_var02, #4
201dc                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
201dc     0A 05 02 F6 | 	mov	_var03, arg02
201e0     D9 04 06 F4 | 	bitl	_var03, #217
201e4     00 00 78 FF 
201e8     00 00 06 F6 | 	mov	_var01, ##-268435456
201ec     02 01 02 F1 | 	add	_var01, _var03
201f0     01 01 62 FC | 	wrlong	_var01, _var02
201f4                 | '     repeat
201f4                 | LR__2590
201f4                 | '         result := long[mailbox]    
201f4     01 05 02 FB | 	rdlong	_var03, _var02
201f8     00 04 56 F2 | 	cmps	_var03, #0 wc
201fc     F4 FF 9F CD |  if_b	jmp	#LR__2590
20200                 | '     while result < 0   
20200                 | '     return -result                       'return success or error
20200     02 FB 61 F6 | 	neg	result1, _var03
20204                 | LR__2591
20204                 | _psram_spin2_write_ret
20204     2D 00 64 FD | 	ret
20208                 | 
20208                 | ' 
20208                 | ' ' generalized fill
20208                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
20208                 | _psram_spin2_fill
20208     09 01 02 F6 | 	mov	_var01, arg01
2020c     0A 03 02 F6 | 	mov	_var02, arg02
20210     0B 05 02 F6 | 	mov	_var03, arg03
20214     0D 07 02 F6 | 	mov	_var04, arg05
20218                 | '     case datasize 
20218     01 06 86 F1 | 	sub	_var04, #1
2021c     04 06 26 F3 | 	fle	_var04, #4
20220     30 06 62 FD | 	jmprel	_var04
20224                 | LR__2600
20224     10 00 90 FD | 	jmp	#LR__2601
20228     18 00 90 FD | 	jmp	#LR__2602
2022c     2C 00 90 FD | 	jmp	#LR__2604
20230     1C 00 90 FD | 	jmp	#LR__2603
20234     24 00 90 FD | 	jmp	#LR__2604
20238                 | LR__2601
20238                 | '         1: req := driver.R_WRITEBYTE
20238     00 00 60 FF 
2023c     00 08 06 F6 | 	mov	_var05, ##-1073741824
20240     20 00 90 FD | 	jmp	#LR__2605
20244                 | LR__2602
20244                 | '         2: req := driver.R_WRITEWORD
20244     00 00 68 FF 
20248     00 08 06 F6 | 	mov	_var05, ##-805306368
2024c     14 00 90 FD | 	jmp	#LR__2605
20250                 | LR__2603
20250                 | '         4: req := driver.R_WRITELONG
20250     00 00 70 FF 
20254     00 08 06 F6 | 	mov	_var05, ##-536870912
20258     08 00 90 FD | 	jmp	#LR__2605
2025c                 | LR__2604
2025c                 | '         other : return ERR_INVALID
2025c     06 FA 65 F6 | 	neg	result1, #6
20260     94 00 90 FD | 	jmp	#LR__2607
20264                 | LR__2605
20264                 | '     if count == 0   ' nothing to do
20264     00 04 0E F2 | 	cmp	_var03, #0 wz
20268                 | '         return 0
20268     00 FA 05 A6 |  if_e	mov	result1, #0
2026c     88 00 90 AD |  if_e	jmp	#LR__2607
20270                 | '     if drivercog == -1
20270     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20274     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
20278     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2027c     FF FF 7F FF 
20280     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
20284                 | '         return ERR_INACTIVE
20284     0F FA 65 A6 |  if_e	neg	result1, #15
20288     6C 00 90 AD |  if_e	jmp	#LR__2607
2028c                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
2028c     00 FA 05 F6 | 	mov	result1, #0
20290     01 FA 61 FD | 	cogid	result1
20294     FD 06 02 F6 | 	mov	_var04, result1
20298     01 06 66 F0 | 	shl	_var04, #1
2029c     FD 06 02 F1 | 	add	_var04, result1
202a0     02 06 66 F0 | 	shl	_var04, #2
202a4     FF 03 00 FF 
202a8     00 0B 06 F6 | 	mov	_var06, ##524032
202ac     03 0B 02 F1 | 	add	_var06, _var04
202b0                 | '     if long[mailbox] < 0
202b0     05 07 02 FB | 	rdlong	_var04, _var06
202b4     00 06 56 F2 | 	cmps	_var04, #0 wc
202b8                 | '         return ERR_MAILBOX_BUSY
202b8     1C FA 65 C6 |  if_b	neg	result1, #28
202bc     38 00 90 CD |  if_b	jmp	#LR__2607
202c0                 | '     long[mailbox][2] := count
202c0     08 0A 06 F1 | 	add	_var06, #8
202c4     05 05 62 FC | 	wrlong	_var03, _var06
202c8                 | '     long[mailbox][1] := pattern
202c8     04 0A 86 F1 | 	sub	_var06, #4
202cc     05 03 62 FC | 	wrlong	_var02, _var06
202d0     04 0A 86 F1 | 	sub	_var06, #4
202d4                 | '     long[mailbox] := req + (addr & $1ffffff)
202d4     04 0D 02 F6 | 	mov	_var07, _var05
202d8     00 0F 02 F6 | 	mov	_var08, _var01
202dc     D9 0E 06 F4 | 	bitl	_var08, #217
202e0     07 0D 02 F1 | 	add	_var07, _var08
202e4     05 0D 62 FC | 	wrlong	_var07, _var06
202e8                 | '     repeat
202e8                 | LR__2606
202e8                 | '         r := long[mailbox]
202e8     05 0F 02 FB | 	rdlong	_var08, _var06
202ec     00 0E 56 F2 | 	cmps	_var08, #0 wc
202f0     F4 FF 9F CD |  if_b	jmp	#LR__2606
202f4                 | '     while r < 0
202f4                 | '     return -r                  ' return 0 for success or negated error code
202f4     07 FB 61 F6 | 	neg	result1, _var08
202f8                 | LR__2607
202f8                 | _psram_spin2_fill_ret
202f8     2D 00 64 FD | 	ret
202fc                 | 
202fc                 | ' 
202fc                 | ' '..............................................................................
202fc                 | ' 
202fc                 | ' {{
202fc                 | ' }}
202fc                 | ' PUB setQos(cog, qos) : result | mailbox
202fc                 | _psram_spin2_setQos
202fc     09 01 02 F6 | 	mov	_var01, arg01
20300                 | '     if drivercog == -1 ' driver must be running
20300     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20304     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
20308     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2030c     FF FF 7F FF 
20310     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
20314                 | '         return ERR_INACTIVE
20314     0F FA 65 A6 |  if_e	neg	result1, #15
20318     9C 00 90 AD |  if_e	jmp	#LR__2614
2031c                 | '     if cog < 0 or cog > 7 ' enforce cog id range
2031c     00 00 56 F2 | 	cmps	_var01, #0 wc
20320     08 00 90 CD |  if_b	jmp	#LR__2610
20324     08 00 56 F2 | 	cmps	_var01, #8 wc
20328     08 00 90 CD |  if_b	jmp	#LR__2611
2032c                 | LR__2610
2032c                 | '         return ERR_INVALID
2032c     06 FA 65 F6 | 	neg	result1, #6
20330     84 00 90 FD | 	jmp	#LR__2614
20334                 | LR__2611
20334                 | '     long[@qosData][cog] := qos & !$1ff
20334     FF 15 26 F5 | 	andn	arg02, #511
20338     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
2033c     02 00 66 F0 | 	shl	_var01, #2
20340     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
20344     00 15 62 FC | 	wrlong	arg02, _var01
20348                 | '     mailbox := $7FF00 + drivercog*12
20348     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
2034c     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
20350     02 07 02 F6 | 	mov	_var04, _var03
20354     01 06 66 F0 | 	shl	_var04, #1
20358     02 07 02 F1 | 	add	_var04, _var03
2035c     02 06 66 F0 | 	shl	_var04, #2
20360     FF 03 00 FF 
20364     00 09 06 F6 | 	mov	_var05, ##524032
20368     03 09 02 F1 | 	add	_var05, _var04
2036c                 | '     repeat until LOCKTRY(driverlock)
2036c     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
20370                 | LR__2612
20370     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
20374     06 12 72 FD | 	locktry	arg01 wc
20378     F4 FF 9F 3D |  if_ae	jmp	#LR__2612
2037c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
20380                 | '     long[mailbox] := driver.R_CONFIG + cogid()
20380     00 06 06 F6 | 	mov	_var04, #0
20384     01 06 62 FD | 	cogid	_var04
20388     00 00 78 FF 
2038c     00 02 06 F6 | 	mov	_var02, ##-268435456
20390     03 03 02 F1 | 	add	_var02, _var04
20394     04 03 62 FC | 	wrlong	_var02, _var05
20398                 | '     repeat while long[mailbox] < 0
20398                 | LR__2613
20398     04 03 02 FB | 	rdlong	_var02, _var05
2039c     00 02 56 F2 | 	cmps	_var02, #0 wc
203a0     F4 FF 9F CD |  if_b	jmp	#LR__2613
203a4                 | '     LOCKREL(driverlock)
203a4     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
203a8     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
203ac     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
203b0     07 12 72 FD | 	lockrel	arg01 wc
203b4     00 FA 05 F6 | 	mov	result1, #0
203b8                 | LR__2614
203b8                 | _psram_spin2_setQos_ret
203b8     2D 00 64 FD | 	ret
203bc                 | 
203bc                 | ' 
203bc                 | ' '..............................................................................
203bc                 | ' 
203bc                 | ' {{
203bc                 | ' }}
203bc                 | ' PRI lookupDelay(freq) : delay | profile
203bc                 | _psram_spin2_lookupDelay
203bc                 | '     profile := @delayTable
203bc     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
203c0     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
203c4                 | '     delay := long[profile][0]
203c4     00 03 02 FB | 	rdlong	_var02, _var01
203c8                 | '     repeat while long[profile][1] 
203c8     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
203cc     97 16 48 FB | 	callpa	#(@LR__2621-@LR__2620)>>2,fcache_load_ptr_
203d0                 | LR__2620
203d0     04 00 06 F1 | 	add	_var01, #4
203d4     00 FB 09 FB | 	rdlong	result1, _var01 wz
203d8     04 00 86 F1 | 	sub	_var01, #4
203dc     1C 00 90 AD |  if_e	jmp	#LR__2622
203e0                 | '         if freq +< long[profile][1] 
203e0     04 00 06 F1 | 	add	_var01, #4
203e4     00 FB 01 FB | 	rdlong	result1, _var01
203e8     04 00 86 F1 | 	sub	_var01, #4
203ec     FD 12 12 F2 | 	cmp	arg01, result1 wc
203f0                 | '             quit
203f0                 | '         profile += 4
203f0     04 00 06 31 |  if_ae	add	_var01, #4
203f4                 | '         delay++
203f4     01 02 06 31 |  if_ae	add	_var02, #1
203f8     D4 FF 9F 3D |  if_ae	jmp	#LR__2620
203fc                 | LR__2621
203fc                 | LR__2622
203fc     01 FB 01 F6 | 	mov	result1, _var02
20400                 | _psram_spin2_lookupDelay_ret
20400     2D 00 64 FD | 	ret
20404                 | 
20404                 | ' 
20404                 | ' PUB start() : r
20404                 | _usbnew_spin2_start
20404     00 00 06 F6 | 	mov	_var01, #0
20408                 | '   ifnot driver_cog
20408     15 00 00 FF 
2040c     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
20410     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
20414     15 00 00 FF 
20418     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
2041c     38 00 90 5D |  if_ne	jmp	#LR__2630
20420                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
20420     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
20424     10 00 06 F6 | 	mov	_var01, #16
20428     00 16 06 F6 | 	mov	arg03, #0
2042c     28 16 62 FD | 	setq	arg03
20430     0A 01 F2 FC | 	coginit	_var01, arg02 wc
20434     01 00 66 C6 |  if_b	neg	_var01, #1
20438                 | '     if r >= 0
20438     00 00 56 F2 | 	cmps	_var01, #0 wc
2043c                 | '       driver_cog := r+1
2043c     00 03 02 36 |  if_ae	mov	_var02, _var01
20440     01 02 06 31 |  if_ae	add	_var02, #1
20444     15 00 00 3F 
20448     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
2044c     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
20450     15 00 00 3F 
20454     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
20458                 | LR__2630
20458     00 FB 01 F6 | 	mov	result1, _var01
2045c                 | _usbnew_spin2_start_ret
2045c     2D 00 64 FD | 	ret
20460                 | 
20460                 | '     '' (Always enabled)
20460                 | ' 
20460                 | ' '' Get current pressed state of a keyboard key
20460                 | ' PUB keystate(key) : r | buf[2],tmp
20460                 | _usbnew_spin2_keystate
20460     00 04 06 F6 | 	mov	_var03, #0
20464                 | '   if key >= $E0 && key < $E8
20464     E0 12 56 F2 | 	cmps	arg01, #224 wc
20468     34 00 90 CD |  if_b	jmp	#LR__2640
2046c     E8 12 56 F2 | 	cmps	arg01, #232 wc
20470     2C 00 90 3D |  if_ae	jmp	#LR__2640
20474                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
20474     00 FA 05 F6 | 	mov	result1, #0
20478     13 00 00 FF 
2047c     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
20480     09 07 02 F6 | 	mov	_var04, arg01
20484     E0 06 86 F1 | 	sub	_var04, #224
20488     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
2048c     03 09 4A F0 | 	shr	_var05, _var04 wz
20490     13 00 00 FF 
20494     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
20498     01 FA 65 56 |  if_ne	neg	result1, #1
2049c     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
204a0                 | LR__2640
204a0                 | '   else
204a0                 | '     '' Do this in inline ASM to ensure atomicity
204a0                 | '     tmp := @hkbd_report
204a0     13 00 00 FF 
204a4     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
204a8     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
204ac                 | '     org
204ac     13 00 00 FF 
204b0     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
204b4     97 1E 48 FB | 	callpa	#(@LR__2642-@LR__2641)>>2,fcache_load_ptr_
204b8                 | LR__2641
204b8 000             | 	org	0
204b8 000 28 02 64 FD | 	setq	#1
204bc 001 04 01 02 FB | 	rdlong	_var01, _var05
204c0 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
204c4 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
204c8 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
204cc 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
204d0 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
204d4 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
204d8 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
204dc 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
204e0 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
204e4 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
204e8 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
204ec 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
204f0 00e 01 04 66 A6 |  if_e	neg	_var03, #1
204f4 00f             | LR__2642
204f4                 | 	orgh
204f4     02 FB 01 F6 | 	mov	result1, _var03
204f8                 | _usbnew_spin2_keystate_ret
204f8     2D 00 64 FD | 	ret
204fc                 | 
204fc                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
204fc                 | ' 
204fc                 | ' '' Return key event from buffer if there is one
204fc                 | ' PUB get_key() : r | tail
204fc                 | _usbnew_spin2_get_key
204fc                 | '   tail := keyq_tail
204fc     0F 00 00 FF 
20500     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
20504     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
20508                 | '   if keyq_head == tail
20508     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
2050c     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
20510     0F 00 00 FF 
20514     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
20518     00 03 0A F2 | 	cmp	_var02, _var01 wz
2051c                 | '     return 0 ' No event
2051c     00 FA 05 A6 |  if_e	mov	result1, #0
20520     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
20524                 | '   r := keyq_data[tail]
20524     00 03 02 F6 | 	mov	_var02, _var01
20528     02 02 66 F0 | 	shl	_var02, #2
2052c     0F 00 00 FF 
20530     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
20534     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
20538     01 FB 01 FB | 	rdlong	result1, _var02
2053c                 | '   if ++tail == KEYQUEUE_SIZE
2053c     01 00 06 F1 | 	add	_var01, #1
20540     80 00 0E F2 | 	cmp	_var01, #128 wz
20544                 | '     tail := 0
20544     00 00 06 A6 |  if_e	mov	_var01, #0
20548                 | '   keyq_tail := tail
20548     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
2054c     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
20550     0F 00 00 FF 
20554     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
20558                 | _usbnew_spin2_get_key_ret
20558     2D 00 64 FD | 	ret
2055c                 | 
2055c                 | ' 
2055c                 | ' '' Emulate mouse movement
2055c                 | ' PUB mouse_move(x,y)
2055c                 | _usbnew_spin2_mouse_move
2055c     02 4A 05 F6 | 	mov	COUNT_, #2
20560     A8 00 A0 FD | 	call	#pushregs_
20564     09 1F 02 F6 | 	mov	local01, arg01
20568     0A 21 02 F6 | 	mov	local02, arg02
2056c                 | '   mouse_lock := 1
2056c     14 00 00 FF 
20570     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
20574     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
20578     14 00 00 FF 
2057c     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
20580                 | '   waitus(2) ' hope driver is now done
20580     02 12 06 F6 | 	mov	arg01, #2
20584     E8 0A B0 FD | 	call	#__system___waitus
20588                 | '   mouse_xacc := x
20588     14 00 00 FF 
2058c     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
20590     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
20594                 | '   mouse_yacc := y
20594     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
20598     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
2059c                 | '   if mouse_outptr
2059c     04 00 00 FF 
205a0     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
205a4     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
205a8     0F 00 00 FF 
205ac     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
205b0     24 00 90 AD |  if_e	jmp	#LR__2650
205b4                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
205b4     10 20 66 F0 | 	shl	local02, #16
205b8     0F 1F 32 F9 | 	getword	local01, local01, #0
205bc     0F 21 42 F5 | 	or	local02, local01
205c0     0F 00 00 FF 
205c4     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
205c8     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
205cc     0F 00 00 FF 
205d0     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
205d4     0F 21 62 FC | 	wrlong	local02, local01
205d8                 | LR__2650
205d8                 | '   mouse_lock := 0
205d8     14 00 00 FF 
205dc     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
205e0     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
205e4     14 00 00 FF 
205e8     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
205ec     A7 F0 03 F6 | 	mov	ptra, fp
205f0     B2 00 A0 FD | 	call	#popregs_
205f4                 | _usbnew_spin2_mouse_move_ret
205f4     2D 00 64 FD | 	ret
205f8                 | 
205f8                 | '     '' Set HAVE_HIDPAD to enable.
205f8                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
205f8                 | ' 
205f8                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
205f8                 | ' PUB hidpad_id(dev) : r
205f8                 | _usbnew_spin2_hidpad_id
205f8                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
205f8     13 00 00 FF 
205fc     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20600     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20604     09 01 02 F6 | 	mov	_var01, arg01
20608     03 00 66 F0 | 	shl	_var01, #3
2060c     09 01 82 F1 | 	sub	_var01, arg01
20610     02 00 66 F0 | 	shl	_var01, #2
20614     00 FB 01 F1 | 	add	result1, _var01
20618     FD FA 01 FB | 	rdlong	result1, result1
2061c     13 00 00 FF 
20620     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
20624                 | _usbnew_spin2_hidpad_id_ret
20624     2D 00 64 FD | 	ret
20628                 | 
20628                 | ' 
20628                 | ' '' Get all button states for a device
20628                 | ' PUB hidpad_buttons(dev) : r 
20628                 | _usbnew_spin2_hidpad_buttons
20628                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
20628     13 00 00 FF 
2062c     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20630     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20634     09 01 02 F6 | 	mov	_var01, arg01
20638     03 00 66 F0 | 	shl	_var01, #3
2063c     09 01 82 F1 | 	sub	_var01, arg01
20640     02 00 66 F0 | 	shl	_var01, #2
20644     00 FB 01 F1 | 	add	result1, _var01
20648     14 FA 05 F1 | 	add	result1, #20
2064c     FD FA 01 FB | 	rdlong	result1, result1
20650     13 00 00 FF 
20654     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
20658                 | _usbnew_spin2_hidpad_buttons_ret
20658     2D 00 64 FD | 	ret
2065c                 | 
2065c                 | ' 
2065c                 | ' '' Get state of an axis (normalized between -32768 and 32767)
2065c                 | ' PUB hidpad_axis(dev,axnum) : r
2065c                 | _usbnew_spin2_hidpad_axis
2065c                 | '   if axnum +>= 6
2065c     06 14 16 F2 | 	cmp	arg02, #6 wc
20660                 | '     return 0
20660     00 FA 05 36 |  if_ae	mov	result1, #0
20664     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
20668                 | '   else 
20668                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
20668     13 00 00 FF 
2066c     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20670     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20674     09 01 02 F6 | 	mov	_var01, arg01
20678     03 00 66 F0 | 	shl	_var01, #3
2067c     09 01 82 F1 | 	sub	_var01, arg01
20680     02 00 66 F0 | 	shl	_var01, #2
20684     00 FB 01 F1 | 	add	result1, _var01
20688     04 00 06 F6 | 	mov	_var01, #4
2068c     0A 01 02 F1 | 	add	_var01, arg02
20690     01 00 66 F0 | 	shl	_var01, #1
20694     FD 00 02 F1 | 	add	_var01, result1
20698     00 FB E1 FA | 	rdword	result1, _var01
2069c     0F FA 65 F7 | 	signx	result1, #15
206a0     13 00 00 FF 
206a4     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
206a8                 | _usbnew_spin2_hidpad_axis_ret
206a8     2D 00 64 FD | 	ret
206ac                 | 
206ac                 | ' 
206ac                 | ' 
206ac                 | ' '--------------------------------------------------------------
206ac                 | ' '---------- Init the variables, start the cog. ----------------
206ac                 | ' '--------------------------------------------------------------
206ac                 | ' 
206ac                 | ' pub start(mbox,scope,cache) :cog,base | iii
206ac                 | _audio096_spin2_start
206ac     04 4A 05 F6 | 	mov	COUNT_, #4
206b0     A8 00 A0 FD | 	call	#pushregs_
206b4     09 1F 02 F6 | 	mov	local01, arg01
206b8                 | ' 
206b8                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
206b8                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
206b8                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
206b8                 | ' 
206b8                 | ' mailboxaddr:=mbox 
206b8     F2 1E 62 FC | 	wrlong	local01, objptr
206bc                 | ' scope_ptr:=scope
206bc     04 E4 05 F1 | 	add	objptr, #4
206c0     F2 14 62 FC | 	wrlong	arg02, objptr
206c4                 | ' cache_ptr:=cache
206c4     04 E4 05 F1 | 	add	objptr, #4
206c8     F2 16 62 FC | 	wrlong	arg03, objptr
206cc                 | ' base:=@channel1[0]
206cc     04 E4 05 F1 | 	add	objptr, #4
206d0     F2 20 02 F6 | 	mov	local02, objptr
206d4                 | ' long[$40]:=mbox
206d4     40 1E 66 FC | 	wrlong	local01, #64
206d8                 | ' repeat iii from 0 to 7
206d8     00 22 06 F6 | 	mov	local03, #0
206dc     02 00 00 FF 
206e0     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
206e4     0C E4 85 F1 | 	sub	objptr, #12
206e8     97 BC 48 FB | 	callpa	#(@LR__2661-@LR__2660)>>2,fcache_load_ptr_
206ec                 | LR__2660
206ec                 | '   long[base+64*iii]:=0
206ec     10 1F 02 F6 | 	mov	local01, local02
206f0     11 FD 01 F6 | 	mov	result2, local03
206f4     06 FC 65 F0 | 	shl	result2, #6
206f8     FE 1E 02 F1 | 	add	local01, result2
206fc     0F 01 68 FC | 	wrlong	#0, local01
20700                 | '   long[base+64*iii+4]:=0
20700     10 1F 02 F6 | 	mov	local01, local02
20704     11 FD 01 F6 | 	mov	result2, local03
20708     06 FC 65 F0 | 	shl	result2, #6
2070c     FE 1E 02 F1 | 	add	local01, result2
20710     04 1E 06 F1 | 	add	local01, #4
20714     0F 01 68 FC | 	wrlong	#0, local01
20718                 | '   long[base+64*iii+12]:=0
20718     10 25 02 F6 | 	mov	local04, local02
2071c     11 1F 02 F6 | 	mov	local01, local03
20720     06 1E 66 F0 | 	shl	local01, #6
20724     0F 25 02 F1 | 	add	local04, local01
20728     0C 24 06 F1 | 	add	local04, #12
2072c     12 01 68 FC | 	wrlong	#0, local04
20730                 | '   long[base+64*iii+16]:=2 
20730     10 25 02 F6 | 	mov	local04, local02
20734     11 1F 02 F6 | 	mov	local01, local03
20738     06 1E 66 F0 | 	shl	local01, #6
2073c     0F 25 02 F1 | 	add	local04, local01
20740     10 24 06 F1 | 	add	local04, #16
20744     12 05 68 FC | 	wrlong	#2, local04
20748                 | '   word[base+64*iii+20]:=0
20748     10 25 02 F6 | 	mov	local04, local02
2074c     11 1F 02 F6 | 	mov	local01, local03
20750     06 1E 66 F0 | 	shl	local01, #6
20754     0F 25 02 F1 | 	add	local04, local01
20758     14 24 06 F1 | 	add	local04, #20
2075c     12 01 58 FC | 	wrword	#0, local04
20760                 | '   word[base+64*iii+22]:=8192
20760     10 25 02 F6 | 	mov	local04, local02
20764     11 1F 02 F6 | 	mov	local01, local03
20768     06 1E 66 F0 | 	shl	local01, #6
2076c     0F 25 02 F1 | 	add	local04, local01
20770     16 24 06 F1 | 	add	local04, #22
20774     10 00 80 FF 
20778     12 01 58 FC | 	wrword	##8192, local04
2077c                 | '   word[base+64*iii+24]:=4000+2*iii
2077c     11 25 02 F6 | 	mov	local04, local03
20780     01 24 66 F0 | 	shl	local04, #1
20784     07 00 00 FF 
20788     A0 1F 06 F6 | 	mov	local01, ##4000
2078c     12 1F 02 F1 | 	add	local01, local04
20790     10 25 02 F6 | 	mov	local04, local02
20794     11 FD 01 F6 | 	mov	result2, local03
20798     06 FC 65 F0 | 	shl	result2, #6
2079c     FE 24 02 F1 | 	add	local04, result2
207a0     18 24 06 F1 | 	add	local04, #24
207a4     12 1F 52 FC | 	wrword	local01, local04
207a8                 | '   word[base+64*iii+26]:=2
207a8     10 25 02 F6 | 	mov	local04, local02
207ac     11 1F 02 F6 | 	mov	local01, local03
207b0     06 1E 66 F0 | 	shl	local01, #6
207b4     0F 25 02 F1 | 	add	local04, local01
207b8     1A 24 06 F1 | 	add	local04, #26
207bc     12 05 58 FC | 	wrword	#2, local04
207c0                 | '   long [base+64*iii+8]:=@null | $C0000000
207c0     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
207c4     3E 1E 26 F4 | 	bith	local01, #62
207c8     10 25 02 F6 | 	mov	local04, local02
207cc     11 17 02 F6 | 	mov	arg03, local03
207d0     06 16 66 F0 | 	shl	arg03, #6
207d4     0B 25 02 F1 | 	add	local04, arg03
207d8     08 24 06 F1 | 	add	local04, #8
207dc     12 1F 62 FC | 	wrlong	local01, local04
207e0                 | '   long[base+64*iii+32]:=0
207e0     10 25 02 F6 | 	mov	local04, local02
207e4     11 1F 02 F6 | 	mov	local01, local03
207e8     06 1E 66 F0 | 	shl	local01, #6
207ec     0F 25 02 F1 | 	add	local04, local01
207f0     20 24 06 F1 | 	add	local04, #32
207f4     12 01 68 FC | 	wrlong	#0, local04
207f8                 | '   long[base+64*iii+36]:=0
207f8     10 25 02 F6 | 	mov	local04, local02
207fc     11 1F 02 F6 | 	mov	local01, local03
20800     06 1E 66 F0 | 	shl	local01, #6
20804     0F 25 02 F1 | 	add	local04, local01
20808     24 24 06 F1 | 	add	local04, #36
2080c     12 01 68 FC | 	wrlong	#0, local04
20810                 | '   long[base+64*iii+40]:=0
20810     10 25 02 F6 | 	mov	local04, local02
20814     11 1F 02 F6 | 	mov	local01, local03
20818     06 1E 66 F0 | 	shl	local01, #6
2081c     0F 25 02 F1 | 	add	local04, local01
20820     28 24 06 F1 | 	add	local04, #40
20824     12 01 68 FC | 	wrlong	#0, local04
20828                 | '   long[base+64*iii+44]:=0
20828     10 25 02 F6 | 	mov	local04, local02
2082c     11 1F 02 F6 | 	mov	local01, local03
20830     06 1E 66 F0 | 	shl	local01, #6
20834     0F 25 02 F1 | 	add	local04, local01
20838     2C 24 06 F1 | 	add	local04, #44
2083c     12 01 68 FC | 	wrlong	#0, local04
20840                 | '   long[base+64*iii+28]:=0
20840     10 25 02 F6 | 	mov	local04, local02
20844     11 1F 02 F6 | 	mov	local01, local03
20848     06 1E 66 F0 | 	shl	local01, #6
2084c     0F 25 02 F1 | 	add	local04, local01
20850     1C 24 06 F1 | 	add	local04, #28
20854     12 01 68 FC | 	wrlong	#0, local04
20858     01 22 06 F1 | 	add	local03, #1
2085c     08 22 56 F2 | 	cmps	local03, #8 wc
20860     88 FE 9F CD |  if_b	jmp	#LR__2660
20864                 | LR__2661
20864     02 00 00 FF 
20868     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
2086c                 | '   
2086c                 | ' cog:=coginit(16,@audio,@mailboxaddr)
2086c     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
20870     F2 16 02 F6 | 	mov	arg03, objptr
20874     10 24 06 F6 | 	mov	local04, #16
20878     28 16 62 FD | 	setq	arg03
2087c     0A 25 F2 FC | 	coginit	local04, arg02 wc
20880     01 24 66 C6 |  if_b	neg	local04, #1
20884                 | ' waitms(100)
20884     64 12 06 F6 | 	mov	arg01, #100
20888     78 07 B0 FD | 	call	#__system___waitms
2088c                 | ' return cog,base
2088c     10 FD 01 F6 | 	mov	result2, local02
20890     12 FB 01 F6 | 	mov	result1, local04
20894     A7 F0 03 F6 | 	mov	ptra, fp
20898     B2 00 A0 FD | 	call	#popregs_
2089c                 | _audio096_spin2_start_ret
2089c     2D 00 64 FD | 	ret
208a0                 | 
208a0                 | ' 
208a0                 | ' ' a simple play procedure to not poke everything. 
208a0                 | ' 
208a0                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
208a0                 | _audio096_spin2_play
208a0     0C E4 05 F1 | 	add	objptr, #12
208a4     F2 00 02 F6 | 	mov	_var01, objptr
208a8     06 12 66 F0 | 	shl	arg01, #6
208ac     09 01 02 F1 | 	add	_var01, arg01
208b0     00 13 02 F6 | 	mov	arg01, _var01
208b4     0C 12 06 F1 | 	add	arg01, #12
208b8     09 1B 62 FC | 	wrlong	arg05, arg01
208bc     00 1C 56 F2 | 	cmps	arg06, #0 wc
208c0     00 13 02 36 |  if_ae	mov	arg01, _var01
208c4     10 12 06 31 |  if_ae	add	arg01, #16
208c8     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
208cc     02 1A 06 C1 |  if_b	add	arg05, #2
208d0     00 13 02 C6 |  if_b	mov	arg01, _var01
208d4     10 12 06 C1 |  if_b	add	arg01, #16
208d8     09 1B 62 CC |  if_b	wrlong	arg05, arg01
208dc     0B 13 52 F6 | 	abs	arg01, arg03 wc
208e0     0F 1B 80 FF 
208e4     09 1F 1A FD | 	qdiv	##3546895, arg01
208e8                 | ' 
208e8                 | ' base2:=@channel1[0]+64*channel
208e8                 | ' 
208e8                 | ' 
208e8                 | ' long[base2+12]:= len
208e8                 | ' if loop >=0 
208e8                 | '   long[base2+16]:= loop
208e8     0C E4 85 F1 | 	sub	objptr, #12
208ec                 | ' else
208ec                 | '   long[base2+16]:= len+2
208ec                 | ' word[base2+20]:=vol
208ec     00 13 02 F6 | 	mov	arg01, _var01
208f0     14 12 06 F1 | 	add	arg01, #20
208f4     09 19 52 FC | 	wrword	arg04, arg01
208f8                 | ' word[base2+24]:= 3546895/splfreq 
208f8     00 19 02 F6 | 	mov	arg04, _var01
208fc     18 18 06 F1 | 	add	arg04, #24
20900                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
20900                 | ' long[base2+28]:=$40000000    
20900                 | ' long[base2+32]:=0    
20900                 | ' long[base2+36]:=0    
20900                 | ' long[base2+40]:=0    
20900                 | ' long[base2+44]:=0    
20900                 | ' long[base2+8]:=sample+$C0000000     
20900     00 00 60 FF 
20904     00 14 06 F1 | 	add	arg02, ##-1073741824
20908     18 12 62 FD | 	getqx	arg01
2090c     09 13 82 F6 | 	negc	arg01, arg01
20910     0C 13 52 FC | 	wrword	arg01, arg04
20914     00 13 02 F6 | 	mov	arg01, _var01
20918     1A 12 06 F1 | 	add	arg01, #26
2091c     09 01 5A FC | 	wrword	#256, arg01
20920     00 13 02 F6 | 	mov	arg01, _var01
20924     1C 12 06 F1 | 	add	arg01, #28
20928     00 00 A0 FF 
2092c     09 01 68 FC | 	wrlong	##1073741824, arg01
20930     00 13 02 F6 | 	mov	arg01, _var01
20934     20 12 06 F1 | 	add	arg01, #32
20938     09 01 68 FC | 	wrlong	#0, arg01
2093c     00 13 02 F6 | 	mov	arg01, _var01
20940     24 12 06 F1 | 	add	arg01, #36
20944     09 01 68 FC | 	wrlong	#0, arg01
20948     00 13 02 F6 | 	mov	arg01, _var01
2094c     28 12 06 F1 | 	add	arg01, #40
20950     09 01 68 FC | 	wrlong	#0, arg01
20954     00 13 02 F6 | 	mov	arg01, _var01
20958     2C 12 06 F1 | 	add	arg01, #44
2095c     09 01 68 FC | 	wrlong	#0, arg01
20960     08 00 06 F1 | 	add	_var01, #8
20964     00 15 62 FC | 	wrlong	arg02, _var01
20968                 | _audio096_spin2_play_ret
20968     2D 00 64 FD | 	ret
2096c                 | 
2096c                 | ' 
2096c                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
2096c                 | _audio096_spin2_play8
2096c                 | ' 
2096c                 | ' base2:=@channel1[0]+64*channel
2096c     0C E4 05 F1 | 	add	objptr, #12
20970     F2 00 02 F6 | 	mov	_var01, objptr
20974     06 12 66 F0 | 	shl	arg01, #6
20978     09 01 02 F1 | 	add	_var01, arg01
2097c                 | ' long[base2]:=0
2097c     00 01 68 FC | 	wrlong	#0, _var01
20980                 | ' long[base2+8]:=sample+$40000000 
20980     00 00 20 FF 
20984     00 14 06 F1 | 	add	arg02, ##1073741824
20988     00 13 02 F6 | 	mov	arg01, _var01
2098c     08 12 06 F1 | 	add	arg01, #8
20990     09 15 62 FC | 	wrlong	arg02, arg01
20994                 | ' if loop>=0
20994     00 1C 56 F2 | 	cmps	arg06, #0 wc
20998     0C E4 85 F1 | 	sub	objptr, #12
2099c     1C 00 90 CD |  if_b	jmp	#LR__2670
209a0                 | '   long[base2+12]:=loop
209a0     00 15 02 F6 | 	mov	arg02, _var01
209a4     0C 14 06 F1 | 	add	arg02, #12
209a8     0A 1D 62 FC | 	wrlong	arg06, arg02
209ac                 | '   long[base2+16]:= len
209ac     00 1D 02 F6 | 	mov	arg06, _var01
209b0     10 1C 06 F1 | 	add	arg06, #16
209b4     0E 1B 62 FC | 	wrlong	arg05, arg06
209b8     1C 00 90 FD | 	jmp	#LR__2671
209bc                 | LR__2670
209bc                 | ' else
209bc                 | '   long[base2+12]:= len
209bc     00 1D 02 F6 | 	mov	arg06, _var01
209c0     0C 1C 06 F1 | 	add	arg06, #12
209c4     0E 1B 62 FC | 	wrlong	arg05, arg06
209c8                 | '   long[base2+16]:= len+1
209c8     01 1A 06 F1 | 	add	arg05, #1
209cc     00 13 02 F6 | 	mov	arg01, _var01
209d0     10 12 06 F1 | 	add	arg01, #16
209d4     09 1B 62 FC | 	wrlong	arg05, arg01
209d8                 | LR__2671
209d8     0B 17 52 F6 | 	abs	arg03, arg03 wc
209dc     0F 1B 80 FF 
209e0     0B 1F 1A FD | 	qdiv	##3546895, arg03
209e4                 | ' word[base2+20]:=vol
209e4     00 17 02 F6 | 	mov	arg03, _var01
209e8     14 16 06 F1 | 	add	arg03, #20
209ec     0B 19 52 FC | 	wrword	arg04, arg03
209f0                 | ' word[base2+24]:= 3546895 /splfreq 
209f0     00 13 02 F6 | 	mov	arg01, _var01
209f4     18 12 06 F1 | 	add	arg01, #24
209f8                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
209f8     1A 00 06 F1 | 	add	_var01, #26
209fc     18 18 62 FD | 	getqx	arg04
20a00     0C 19 82 F6 | 	negc	arg04, arg04
20a04     09 19 52 FC | 	wrword	arg04, arg01
20a08     00 01 5A FC | 	wrword	#256, _var01
20a0c                 | _audio096_spin2_play8_ret
20a0c     2D 00 64 FD | 	ret
20a10                 | 
20a10                 | ' 'long[base2+28]:=$40000000
20a10                 | ' 
20a10                 | '     
20a10                 | ' pub stop(channel) 'silence it
20a10                 | _audio096_spin2_stop
20a10                 | ' 
20a10                 | ' word[@channel1[0]+64*channel+20]:=0
20a10     0C E4 05 F1 | 	add	objptr, #12
20a14     F2 00 02 F6 | 	mov	_var01, objptr
20a18     09 03 02 F6 | 	mov	_var02, arg01
20a1c     06 02 66 F0 | 	shl	_var02, #6
20a20     01 01 02 F1 | 	add	_var01, _var02
20a24     14 00 06 F1 | 	add	_var01, #20
20a28     00 01 58 FC | 	wrword	#0, _var01
20a2c                 | ' word[@channel1[0]+64*channel+20]:=0
20a2c     F2 00 02 F6 | 	mov	_var01, objptr
20a30     06 12 66 F0 | 	shl	arg01, #6
20a34     09 01 02 F1 | 	add	_var01, arg01
20a38     14 00 06 F1 | 	add	_var01, #20
20a3c     00 01 58 FC | 	wrword	#0, _var01
20a40     0C E4 85 F1 | 	sub	objptr, #12
20a44                 | _audio096_spin2_stop_ret
20a44     2D 00 64 FD | 	ret
20a48                 | hubexit
20a48     81 00 80 FD | 	jmp	#cogexit
20a4c                 | 
20a4c                 | __system___setbaud
20a4c     14 64 06 FB | 	rdlong	muldiva_, #20
20a50     09 67 02 F6 | 	mov	muldivb_, arg01
20a54     BA 00 A0 FD | 	call	#divide_
20a58     97 06 48 FB | 	callpa	#(@LR__2681-@LR__2680)>>2,fcache_load_ptr_
20a5c                 | LR__2680
20a5c     3E FA 9D FA | 	rdpin	result1, #62 wc
20a60     FE FC A1 F1 | 	subx	result2, result2
20a64     F4 FF 9F CD |  if_b	jmp	#LR__2680
20a68                 | LR__2681
20a68     40 7C 64 FD | 	dirl	#62
20a6c     40 7E 64 FD | 	dirl	#63
20a70     F3 66 62 FC | 	wrlong	muldivb_, ptr___system__dat__
20a74     10 66 66 F0 | 	shl	muldivb_, #16
20a78     07 14 06 F6 | 	mov	arg02, #7
20a7c     33 15 02 F1 | 	add	arg02, muldivb_
20a80     3E F8 0C FC | 	wrpin	#124, #62
20a84     3E 14 16 FC | 	wxpin	arg02, #62
20a88     3F 7C 0C FC | 	wrpin	#62, #63
20a8c     14 14 06 F1 | 	add	arg02, #20
20a90     3F 14 16 FC | 	wxpin	arg02, #63
20a94     41 7C 64 FD | 	dirh	#62
20a98     41 7E 64 FD | 	dirh	#63
20a9c                 | __system___setbaud_ret
20a9c     2D 00 64 FD | 	ret
20aa0                 | 
20aa0                 | __system___txraw
20aa0     01 4A 05 F6 | 	mov	COUNT_, #1
20aa4     A8 00 A0 FD | 	call	#pushregs_
20aa8     09 1F 02 F6 | 	mov	local01, arg01
20aac     97 06 48 FB | 	callpa	#(@LR__2691-@LR__2690)>>2,fcache_load_ptr_
20ab0                 | LR__2690
20ab0     3E FA 9D FA | 	rdpin	result1, #62 wc
20ab4     FE FC A1 F1 | 	subx	result2, result2
20ab8     F4 FF 9F CD |  if_b	jmp	#LR__2690
20abc                 | LR__2691
20abc     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
20ac0     C2 01 00 AF 
20ac4     00 12 06 A6 |  if_e	mov	arg01, ##230400
20ac8     80 FF BF AD |  if_e	call	#__system___setbaud
20acc     58 7C 64 FD | 	drvl	#62
20ad0     3E 1E 26 FC | 	wypin	local01, #62
20ad4     01 FA 05 F6 | 	mov	result1, #1
20ad8     A7 F0 03 F6 | 	mov	ptra, fp
20adc     B2 00 A0 FD | 	call	#popregs_
20ae0                 | __system___txraw_ret
20ae0     2D 00 64 FD | 	ret
20ae4                 | 
20ae4                 | __system___rxraw
20ae4     0D 4A 05 F6 | 	mov	COUNT_, #13
20ae8     A8 00 A0 FD | 	call	#pushregs_
20aec     09 1F 02 F6 | 	mov	local01, arg01
20af0     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
20af4     C2 01 00 AF 
20af8     00 12 06 A6 |  if_e	mov	arg01, ##230400
20afc     4C FF BF AD |  if_e	call	#__system___setbaud
20b00     00 1E 0E F2 | 	cmp	local01, #0 wz
20b04     20 00 90 AD |  if_e	jmp	#LR__2700
20b08     14 22 06 FB | 	rdlong	local03, #20
20b0c     0A 22 46 F0 | 	shr	local03, #10
20b10     11 1F 02 FD | 	qmul	local01, local03
20b14     1A FA 61 FD | 	getct	result1
20b18     18 24 62 FD | 	getqx	local04
20b1c     12 FB 01 F1 | 	add	result1, local04
20b20     FD 26 02 F6 | 	mov	local05, result1
20b24     04 00 90 FD | 	jmp	#LR__2701
20b28                 | LR__2700
20b28     00 26 06 F6 | 	mov	local05, #0
20b2c                 | LR__2701
20b2c     01 28 66 F6 | 	neg	local06, #1
20b30     3F 2A 06 F6 | 	mov	local07, #63
20b34     00 2C 06 F6 | 	mov	local08, #0
20b38     04 E6 05 F1 | 	add	ptr___system__dat__, #4
20b3c     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
20b40     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
20b44                 | LR__2702
20b44     08 2E 16 F4 | 	testb	local09, #8 wc
20b48     09 2E 76 F4 | 	testbn	local09, #9 andc
20b4c     0A 2E 46 F0 | 	shr	local09, #10
20b50     01 2C 06 C6 |  if_b	mov	local08, #1
20b54     40 7E 6C 3D |  if_ae	testp	#63 wz
20b58     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
20b5c     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
20b60     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
20b64                 | LR__2703
20b64     00 20 06 F6 | 	mov	local02, #0
20b68     00 2C 0E F2 | 	cmp	local08, #0 wz
20b6c     01 20 66 56 |  if_ne	neg	local02, #1
20b70     00 30 06 F6 | 	mov	local10, #0
20b74     00 22 06 F6 | 	mov	local03, #0
20b78     00 1E 0E F2 | 	cmp	local01, #0 wz
20b7c     01 22 66 56 |  if_ne	neg	local03, #1
20b80     00 24 06 F6 | 	mov	local04, #0
20b84     00 32 06 F6 | 	mov	local11, #0
20b88     1A FA 61 FD | 	getct	result1
20b8c     FD 34 02 F6 | 	mov	local12, result1
20b90     1A 37 02 F6 | 	mov	local13, local12
20b94     13 37 82 F1 | 	sub	local13, local05
20b98     00 36 56 F2 | 	cmps	local13, #0 wc
20b9c     00 32 26 C6 |  if_b	not	local11, #0
20ba0     00 32 0E F2 | 	cmp	local11, #0 wz
20ba4     00 24 26 56 |  if_ne	not	local04, #0
20ba8     12 23 CA F7 | 	test	local03, local04 wz
20bac     00 30 26 56 |  if_ne	not	local10, #0
20bb0     18 21 4A F5 | 	or	local02, local10 wz
20bb4     8C FF 9F AD |  if_e	jmp	#LR__2702
20bb8     00 2C 0E F2 | 	cmp	local08, #0 wz
20bbc     17 29 02 56 |  if_ne	mov	local06, local09
20bc0     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
20bc4     04 E6 05 F1 | 	add	ptr___system__dat__, #4
20bc8     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
20bcc     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
20bd0     14 FB 01 F6 | 	mov	result1, local06
20bd4     A7 F0 03 F6 | 	mov	ptra, fp
20bd8     B2 00 A0 FD | 	call	#popregs_
20bdc                 | __system___rxraw_ret
20bdc     2D 00 64 FD | 	ret
20be0                 | 
20be0                 | __system___getus
20be0     1A FC 71 FD | 	getct	result2 wc
20be4     1A 00 62 FD | 	getct	_var01
20be8     10 E6 05 F1 | 	add	ptr___system__dat__, #16
20bec     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
20bf0     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
20bf4     20 00 90 5D |  if_ne	jmp	#LR__2710
20bf8     14 02 06 FB | 	rdlong	_var02, #20
20bfc     A1 07 00 FF 
20c00     40 02 16 FD | 	qdiv	_var02, ##1000000
20c04     10 E6 05 F1 | 	add	ptr___system__dat__, #16
20c08     18 FA 61 FD | 	getqx	result1
20c0c     FD 02 02 F6 | 	mov	_var02, result1
20c10     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
20c14     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
20c18                 | LR__2710
20c18     01 FD 11 FD | 	qdiv	result2, _var02
20c1c     19 FC 61 FD | 	getqy	result2
20c20     28 FC 61 FD | 	setq	result2
20c24     01 01 12 FD | 	qdiv	_var01, _var02
20c28     18 FA 61 FD | 	getqx	result1
20c2c                 | __system___getus_ret
20c2c     2D 00 64 FD | 	ret
20c30                 | 
20c30                 | __system____builtin_memmove
20c30     09 01 02 F6 | 	mov	_var01, arg01
20c34     0A 13 52 F2 | 	cmps	arg01, arg02 wc
20c38     10 00 90 CD |  if_b	jmp	#LR__2720
20c3c     0A 03 02 F6 | 	mov	_var02, arg02
20c40     0B 03 02 F1 | 	add	_var02, arg03
20c44     01 13 52 F2 | 	cmps	arg01, _var02 wc
20c48     48 00 90 CD |  if_b	jmp	#LR__2726
20c4c                 | LR__2720
20c4c     0B 05 02 F6 | 	mov	_var03, arg03
20c50     02 04 4E F0 | 	shr	_var03, #2 wz
20c54     18 00 90 AD |  if_e	jmp	#LR__2725
20c58     97 0A 48 FB | 	callpa	#(@LR__2723-@LR__2721)>>2,fcache_load_ptr_
20c5c                 | LR__2721
20c5c     02 09 D8 FC | 	rep	@LR__2724, _var03
20c60                 | LR__2722
20c60     0A 05 02 FB | 	rdlong	_var03, arg02
20c64     09 05 62 FC | 	wrlong	_var03, arg01
20c68     04 12 06 F1 | 	add	arg01, #4
20c6c     04 14 06 F1 | 	add	arg02, #4
20c70                 | LR__2723
20c70                 | LR__2724
20c70                 | LR__2725
20c70     02 16 CE F7 | 	test	arg03, #2 wz
20c74     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
20c78     09 03 52 5C |  if_ne	wrword	_var02, arg01
20c7c     02 12 06 51 |  if_ne	add	arg01, #2
20c80     02 14 06 51 |  if_ne	add	arg02, #2
20c84     01 16 CE F7 | 	test	arg03, #1 wz
20c88     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
20c8c     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
20c90     28 00 90 FD | 	jmp	#LR__2732
20c94                 | LR__2726
20c94     0B 13 02 F1 | 	add	arg01, arg03
20c98     0B 15 02 F1 | 	add	arg02, arg03
20c9c     0B 07 0A F6 | 	mov	_var04, arg03 wz
20ca0     18 00 90 AD |  if_e	jmp	#LR__2731
20ca4     97 0A 48 FB | 	callpa	#(@LR__2729-@LR__2727)>>2,fcache_load_ptr_
20ca8                 | LR__2727
20ca8     03 09 D8 FC | 	rep	@LR__2730, _var04
20cac                 | LR__2728
20cac     01 12 86 F1 | 	sub	arg01, #1
20cb0     01 14 86 F1 | 	sub	arg02, #1
20cb4     0A 03 C2 FA | 	rdbyte	_var02, arg02
20cb8     09 03 42 FC | 	wrbyte	_var02, arg01
20cbc                 | LR__2729
20cbc                 | LR__2730
20cbc                 | LR__2731
20cbc                 | LR__2732
20cbc     00 FB 01 F6 | 	mov	result1, _var01
20cc0                 | __system____builtin_memmove_ret
20cc0     2D 00 64 FD | 	ret
20cc4                 | 
20cc4                 | __system____builtin_strcpy
20cc4     09 01 02 F6 | 	mov	_var01, arg01
20cc8     97 0A 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
20ccc                 | LR__2740
20ccc     0A FB C9 FA | 	rdbyte	result1, arg02 wz
20cd0     09 FB 41 FC | 	wrbyte	result1, arg01
20cd4     01 14 06 F1 | 	add	arg02, #1
20cd8     01 12 06 F1 | 	add	arg01, #1
20cdc     EC FF 9F 5D |  if_ne	jmp	#LR__2740
20ce0                 | LR__2741
20ce0     00 FB 01 F6 | 	mov	result1, _var01
20ce4                 | __system____builtin_strcpy_ret
20ce4     2D 00 64 FD | 	ret
20ce8                 | 
20ce8                 | __system____topofstack
20ce8     00 4A 05 F6 | 	mov	COUNT_, #0
20cec     A8 00 A0 FD | 	call	#pushregs_
20cf0     08 F0 07 F1 | 	add	ptra, #8
20cf4     04 4E 05 F1 | 	add	fp, #4
20cf8     A7 12 62 FC | 	wrlong	arg01, fp
20cfc     A7 FA 01 F6 | 	mov	result1, fp
20d00     04 4E 85 F1 | 	sub	fp, #4
20d04     A7 F0 03 F6 | 	mov	ptra, fp
20d08     B2 00 A0 FD | 	call	#popregs_
20d0c                 | __system____topofstack_ret
20d0c     2D 00 64 FD | 	ret
20d10                 | 
20d10                 | __system___lockmem
20d10     00 FA 05 F6 | 	mov	result1, #0
20d14     01 FA 61 FD | 	cogid	result1
20d18     00 FB 05 F1 | 	add	result1, #256
20d1c                 | LR__2750
20d1c     09 01 0A FB | 	rdlong	_var01, arg01 wz
20d20     09 FB 61 AC |  if_e	wrlong	result1, arg01
20d24     09 01 02 AB |  if_e	rdlong	_var01, arg01
20d28     09 01 02 AB |  if_e	rdlong	_var01, arg01
20d2c     FD 00 0A F2 | 	cmp	_var01, result1 wz
20d30     E8 FF 9F 5D |  if_ne	jmp	#LR__2750
20d34                 | __system___lockmem_ret
20d34     2D 00 64 FD | 	ret
20d38                 | 
20d38                 | __system___string_cmp
20d38     97 14 48 FB | 	callpa	#(@LR__2761-@LR__2760)>>2,fcache_load_ptr_
20d3c                 | LR__2760
20d3c     09 01 C2 FA | 	rdbyte	_var01, arg01
20d40     0A 03 C2 FA | 	rdbyte	_var02, arg02
20d44     00 05 02 F6 | 	mov	_var03, _var01
20d48     01 05 8A F1 | 	sub	_var03, _var02 wz
20d4c     01 12 06 F1 | 	add	arg01, #1
20d50     01 14 06 F1 | 	add	arg02, #1
20d54     0C 00 90 5D |  if_ne	jmp	#LR__2762
20d58     00 00 0E F2 | 	cmp	_var01, #0 wz
20d5c     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
20d60     D8 FF 9F 5D |  if_ne	jmp	#LR__2760
20d64                 | LR__2761
20d64                 | LR__2762
20d64     02 FB 01 F6 | 	mov	result1, _var03
20d68                 | __system___string_cmp_ret
20d68     2D 00 64 FD | 	ret
20d6c                 | 
20d6c                 | __system___string_concat
20d6c     05 4A 05 F6 | 	mov	COUNT_, #5
20d70     A8 00 A0 FD | 	call	#pushregs_
20d74     09 1F 02 F6 | 	mov	local01, arg01
20d78     0A 21 02 F6 | 	mov	local02, arg02
20d7c     0F 13 02 F6 | 	mov	arg01, local01
20d80     09 23 02 F6 | 	mov	local03, arg01
20d84     97 06 48 FB | 	callpa	#(@LR__2771-@LR__2770)>>2,fcache_load_ptr_
20d88                 | LR__2770
20d88     11 FB C9 FA | 	rdbyte	result1, local03 wz
20d8c     01 22 06 51 |  if_ne	add	local03, #1
20d90     F4 FF 9F 5D |  if_ne	jmp	#LR__2770
20d94                 | LR__2771
20d94     09 23 82 F1 | 	sub	local03, arg01
20d98     11 25 02 F6 | 	mov	local04, local03
20d9c     10 13 02 F6 | 	mov	arg01, local02
20da0     09 23 02 F6 | 	mov	local03, arg01
20da4     97 06 48 FB | 	callpa	#(@LR__2773-@LR__2772)>>2,fcache_load_ptr_
20da8                 | LR__2772
20da8     11 FB C9 FA | 	rdbyte	result1, local03 wz
20dac     01 22 06 51 |  if_ne	add	local03, #1
20db0     F4 FF 9F 5D |  if_ne	jmp	#LR__2772
20db4                 | LR__2773
20db4     09 23 82 F1 | 	sub	local03, arg01
20db8     12 13 02 F6 | 	mov	arg01, local04
20dbc     11 13 02 F1 | 	add	arg01, local03
20dc0     01 12 06 F1 | 	add	arg01, #1
20dc4     00 3E B0 FD | 	call	#__system___gc_alloc_managed
20dc8     FD 26 0A F6 | 	mov	local05, result1 wz
20dcc     28 00 90 AD |  if_e	jmp	#LR__2774
20dd0     13 13 02 F6 | 	mov	arg01, local05
20dd4     0F 15 02 F6 | 	mov	arg02, local01
20dd8     12 17 02 F6 | 	mov	arg03, local04
20ddc     50 FE BF FD | 	call	#__system____builtin_memmove
20de0     13 13 02 F6 | 	mov	arg01, local05
20de4     12 13 02 F1 | 	add	arg01, local04
20de8     01 22 06 F1 | 	add	local03, #1
20dec     10 15 02 F6 | 	mov	arg02, local02
20df0     11 17 02 F6 | 	mov	arg03, local03
20df4     38 FE BF FD | 	call	#__system____builtin_memmove
20df8                 | LR__2774
20df8     13 FB 01 F6 | 	mov	result1, local05
20dfc     A7 F0 03 F6 | 	mov	ptra, fp
20e00     B2 00 A0 FD | 	call	#popregs_
20e04                 | __system___string_concat_ret
20e04     2D 00 64 FD | 	ret
20e08                 | 
20e08                 | __system___tx
20e08     02 4A 05 F6 | 	mov	COUNT_, #2
20e0c     A8 00 A0 FD | 	call	#pushregs_
20e10     09 1F 02 F6 | 	mov	local01, arg01
20e14     0A 1E 0E F2 | 	cmp	local01, #10 wz
20e18     18 00 90 5D |  if_ne	jmp	#LR__2780
20e1c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20e20     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
20e24     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20e28     02 20 CE F7 | 	test	local02, #2 wz
20e2c     0D 12 06 56 |  if_ne	mov	arg01, #13
20e30     6C FC BF 5D |  if_ne	call	#__system___txraw
20e34                 | LR__2780
20e34     0F 13 02 F6 | 	mov	arg01, local01
20e38     64 FC BF FD | 	call	#__system___txraw
20e3c     A7 F0 03 F6 | 	mov	ptra, fp
20e40     B2 00 A0 FD | 	call	#popregs_
20e44                 | __system___tx_ret
20e44     2D 00 64 FD | 	ret
20e48                 | 
20e48                 | __system___rx
20e48     01 4A 05 F6 | 	mov	COUNT_, #1
20e4c     A8 00 A0 FD | 	call	#pushregs_
20e50                 | LR__2790
20e50     00 12 06 F6 | 	mov	arg01, #0
20e54     8C FC BF FD | 	call	#__system___rxraw
20e58     FD 1E 02 F6 | 	mov	local01, result1
20e5c     FF FF 7F FF 
20e60     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
20e64     E8 FF 9F AD |  if_e	jmp	#LR__2790
20e68     0D 1E 0E F2 | 	cmp	local01, #13 wz
20e6c     14 00 90 5D |  if_ne	jmp	#LR__2791
20e70     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20e74     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
20e78     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20e7c     02 FA CD F7 | 	test	result1, #2 wz
20e80     0A 1E 06 56 |  if_ne	mov	local01, #10
20e84                 | LR__2791
20e84     08 E6 05 F1 | 	add	ptr___system__dat__, #8
20e88     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
20e8c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
20e90     01 12 CE F7 | 	test	arg01, #1 wz
20e94     1C 00 90 AD |  if_e	jmp	#LR__2794
20e98     7F 1E 0E F2 | 	cmp	local01, #127 wz
20e9c     0C 00 90 5D |  if_ne	jmp	#LR__2792
20ea0     08 12 06 F6 | 	mov	arg01, #8
20ea4     60 FF BF FD | 	call	#__system___tx
20ea8     08 00 90 FD | 	jmp	#LR__2793
20eac                 | LR__2792
20eac     0F 13 02 F6 | 	mov	arg01, local01
20eb0     54 FF BF FD | 	call	#__system___tx
20eb4                 | LR__2793
20eb4                 | LR__2794
20eb4     0F FB 01 F6 | 	mov	result1, local01
20eb8     A7 F0 03 F6 | 	mov	ptra, fp
20ebc     B2 00 A0 FD | 	call	#popregs_
20ec0                 | __system___rx_ret
20ec0     2D 00 64 FD | 	ret
20ec4                 | 
20ec4                 | __system___pinwrite
20ec4     09 01 02 F6 | 	mov	_var01, arg01
20ec8     1F 00 06 F5 | 	and	_var01, #31
20ecc     20 12 CE F7 | 	test	arg01, #32 wz
20ed0     06 12 46 F0 | 	shr	arg01, #6
20ed4     09 13 CA F9 | 	bmask	arg01, arg01
20ed8     00 13 62 F0 | 	shl	arg01, _var01
20edc     00 15 62 F0 | 	shl	arg02, _var01
20ee0     1C 00 90 AD |  if_e	jmp	#LR__2800
20ee4     09 F7 43 F5 | 	or	dirb, arg01
20ee8     FD 01 02 F6 | 	mov	_var01, outb
20eec     09 01 22 F5 | 	andn	_var01, arg01
20ef0     09 15 02 F5 | 	and	arg02, arg01
20ef4     0A 01 42 F5 | 	or	_var01, arg02
20ef8     00 FB 03 F6 | 	mov	outb, _var01
20efc     18 00 90 FD | 	jmp	#LR__2801
20f00                 | LR__2800
20f00     09 F5 43 F5 | 	or	dira, arg01
20f04     FC 01 02 F6 | 	mov	_var01, outa
20f08     09 01 22 F5 | 	andn	_var01, arg01
20f0c     09 15 02 F5 | 	and	arg02, arg01
20f10     0A 01 42 F5 | 	or	_var01, arg02
20f14     00 F9 03 F6 | 	mov	outa, _var01
20f18                 | LR__2801
20f18                 | __system___pinwrite_ret
20f18     2D 00 64 FD | 	ret
20f1c                 | 
20f1c                 | __system___basic_read_line
20f1c     06 4A 05 F6 | 	mov	COUNT_, #6
20f20     A8 00 A0 FD | 	call	#pushregs_
20f24     09 1F 02 F6 | 	mov	local01, arg01
20f28     00 20 06 F6 | 	mov	local02, #0
20f2c     18 22 06 F6 | 	mov	local03, #24
20f30     00 24 06 F6 | 	mov	local04, #0
20f34     18 12 06 F6 | 	mov	arg01, #24
20f38     8C 3C B0 FD | 	call	#__system___gc_alloc_managed
20f3c     FD 26 0A F6 | 	mov	local05, result1 wz
20f40     13 FB 01 A6 |  if_e	mov	result1, local05
20f44     B0 00 90 AD |  if_e	jmp	#LR__2813
20f48                 | LR__2810
20f48     0F 13 02 F6 | 	mov	arg01, local01
20f4c     78 0B B0 FD | 	call	#__system___basic_get_char
20f50     FD 28 02 F6 | 	mov	local06, result1
20f54     01 28 56 F2 | 	cmps	local06, #1 wc
20f58     8C 00 90 CD |  if_b	jmp	#LR__2812
20f5c     0A 28 0E F2 | 	cmp	local06, #10 wz
20f60     10 00 90 5D |  if_ne	jmp	#LR__2811
20f64     00 24 0E F2 | 	cmp	local04, #0 wz
20f68     01 20 56 52 |  if_ne	cmps	local02, #1 wc
20f6c     01 20 86 11 |  if_a	sub	local02, #1
20f70     74 00 90 FD | 	jmp	#LR__2812
20f74                 | LR__2811
20f74     0D 28 0E F2 | 	cmp	local06, #13 wz
20f78     01 24 06 A6 |  if_e	mov	local04, #1
20f7c     00 24 06 56 |  if_ne	mov	local04, #0
20f80     08 28 0E F2 | 	cmp	local06, #8 wz
20f84     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
20f88     01 20 56 A2 |  if_e	cmps	local02, #1 wc
20f8c     01 20 86 21 |  if_nc_and_z	sub	local02, #1
20f90     B4 FF 9F AD |  if_e	jmp	#LR__2810
20f94     13 17 02 F6 | 	mov	arg03, local05
20f98     10 17 02 F1 | 	add	arg03, local02
20f9c     0B 29 42 FC | 	wrbyte	local06, arg03
20fa0     01 20 06 F1 | 	add	local02, #1
20fa4     11 21 0A F2 | 	cmp	local02, local03 wz
20fa8     9C FF 9F 5D |  if_ne	jmp	#LR__2810
20fac     11 13 02 F6 | 	mov	arg01, local03
20fb0     20 12 06 F1 | 	add	arg01, #32
20fb4     10 3C B0 FD | 	call	#__system___gc_alloc_managed
20fb8     FD 28 0A F6 | 	mov	local06, result1 wz
20fbc     14 FB 01 A6 |  if_e	mov	result1, local06
20fc0     34 00 90 AD |  if_e	jmp	#LR__2813
20fc4     14 13 02 F6 | 	mov	arg01, local06
20fc8     13 15 02 F6 | 	mov	arg02, local05
20fcc     11 17 02 F6 | 	mov	arg03, local03
20fd0     5C FC BF FD | 	call	#__system____builtin_memmove
20fd4     20 22 06 F1 | 	add	local03, #32
20fd8     13 13 02 F6 | 	mov	arg01, local05
20fdc     24 3D B0 FD | 	call	#__system___gc_free
20fe0     14 27 02 F6 | 	mov	local05, local06
20fe4     60 FF 9F FD | 	jmp	#LR__2810
20fe8                 | LR__2812
20fe8     13 29 02 F6 | 	mov	local06, local05
20fec     10 29 02 F1 | 	add	local06, local02
20ff0     14 01 48 FC | 	wrbyte	#0, local06
20ff4     13 FB 01 F6 | 	mov	result1, local05
20ff8                 | LR__2813
20ff8     A7 F0 03 F6 | 	mov	ptra, fp
20ffc     B2 00 A0 FD | 	call	#popregs_
21000                 | __system___basic_read_line_ret
21000     2D 00 64 FD | 	ret
21004                 | 
21004                 | __system___waitms
21004     09 01 02 F6 | 	mov	_var01, arg01
21008     1A 02 62 FD | 	getct	_var02
2100c     14 04 06 FB | 	rdlong	_var03, #20
21010     97 14 48 FB | 	callpa	#(@LR__2821-@LR__2820)>>2,fcache_load_ptr_
21014                 | LR__2820
21014     01 00 00 FF 
21018     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
2101c     1C 00 90 CD |  if_b	jmp	#LR__2822
21020     02 03 02 F1 | 	add	_var02, _var03
21024     01 13 02 F6 | 	mov	arg01, _var02
21028     00 12 66 FA | 	addct1	arg01, #0
2102c     24 22 60 FD | 	waitct1
21030     01 00 00 FF 
21034     E8 01 86 F1 | 	sub	_var01, ##1000
21038     D8 FF 9F FD | 	jmp	#LR__2820
2103c                 | LR__2821
2103c                 | LR__2822
2103c     01 00 56 F2 | 	cmps	_var01, #1 wc
21040     28 00 90 CD |  if_b	jmp	#LR__2823
21044     02 01 02 FD | 	qmul	_var01, _var03
21048     01 00 00 FF 
2104c     E8 17 06 F6 | 	mov	arg03, ##1000
21050     19 FA 61 FD | 	getqy	result1
21054     18 12 62 FD | 	getqx	arg01
21058     28 FA 61 FD | 	setq	result1
2105c     0B 13 12 FD | 	qdiv	arg01, arg03
21060     18 12 62 FD | 	getqx	arg01
21064     01 13 62 FA | 	addct1	arg01, _var02
21068     24 22 60 FD | 	waitct1
2106c                 | LR__2823
2106c                 | __system___waitms_ret
2106c     2D 00 64 FD | 	ret
21070                 | 
21070                 | __system___waitus
21070     09 01 02 F6 | 	mov	_var01, arg01
21074     1A 02 62 FD | 	getct	_var02
21078     14 04 06 FB | 	rdlong	_var03, #20
2107c     97 14 48 FB | 	callpa	#(@LR__2831-@LR__2830)>>2,fcache_load_ptr_
21080                 | LR__2830
21080     A1 07 00 FF 
21084     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
21088     1C 00 90 CD |  if_b	jmp	#LR__2832
2108c     02 03 02 F1 | 	add	_var02, _var03
21090     01 13 02 F6 | 	mov	arg01, _var02
21094     00 12 66 FA | 	addct1	arg01, #0
21098     24 22 60 FD | 	waitct1
2109c     A1 07 00 FF 
210a0     40 00 86 F1 | 	sub	_var01, ##1000000
210a4     D8 FF 9F FD | 	jmp	#LR__2830
210a8                 | LR__2831
210a8                 | LR__2832
210a8     01 00 56 F2 | 	cmps	_var01, #1 wc
210ac     28 00 90 CD |  if_b	jmp	#LR__2833
210b0     02 01 02 FD | 	qmul	_var01, _var03
210b4     A1 07 00 FF 
210b8     40 16 06 F6 | 	mov	arg03, ##1000000
210bc     19 FA 61 FD | 	getqy	result1
210c0     18 12 62 FD | 	getqx	arg01
210c4     28 FA 61 FD | 	setq	result1
210c8     0B 13 12 FD | 	qdiv	arg01, arg03
210cc     18 FA 61 FD | 	getqx	result1
210d0     FD 02 62 FA | 	addct1	_var02, result1
210d4     24 22 60 FD | 	waitct1
210d8                 | LR__2833
210d8                 | __system___waitus_ret
210d8     2D 00 64 FD | 	ret
210dc                 | 
210dc                 | __system___mount
210dc     0B 4A 05 F6 | 	mov	COUNT_, #11
210e0     A8 00 A0 FD | 	call	#pushregs_
210e4     09 1F 02 F6 | 	mov	local01, arg01
210e8     0A 21 0A F6 | 	mov	local02, arg02 wz
210ec     01 22 66 F6 | 	neg	local03, #1
210f0     01 FA 65 A6 |  if_e	neg	result1, #1
210f4     98 02 90 AD |  if_e	jmp	#LR__2855
210f8     0F FB C1 FA | 	rdbyte	result1, local01
210fc     2F FA 0D F2 | 	cmp	result1, #47 wz
21100     28 00 90 5D |  if_ne	jmp	#LR__2842
21104     0F 13 02 F6 | 	mov	arg01, local01
21108     09 25 02 F6 | 	mov	local04, arg01
2110c     97 06 48 FB | 	callpa	#(@LR__2841-@LR__2840)>>2,fcache_load_ptr_
21110                 | LR__2840
21110     12 FB C9 FA | 	rdbyte	result1, local04 wz
21114     01 24 06 51 |  if_ne	add	local04, #1
21118     F4 FF 9F 5D |  if_ne	jmp	#LR__2840
2111c                 | LR__2841
2111c     09 25 82 F1 | 	sub	local04, arg01
21120     12 FB 01 F6 | 	mov	result1, local04
21124     10 FA 55 F2 | 	cmps	result1, #16 wc
21128     14 00 90 CD |  if_b	jmp	#LR__2843
2112c                 | LR__2842
2112c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
21130     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
21134     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21138     01 FA 65 F6 | 	neg	result1, #1
2113c     50 02 90 FD | 	jmp	#LR__2855
21140                 | LR__2843
21140     00 26 06 F6 | 	mov	local05, #0
21144                 | LR__2844
21144     04 26 56 F2 | 	cmps	local05, #4 wc
21148     B0 00 90 3D |  if_ae	jmp	#LR__2849
2114c     13 13 02 F6 | 	mov	arg01, local05
21150     02 12 66 F0 | 	shl	arg01, #2
21154     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21158     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2115c     09 FB 09 FB | 	rdlong	result1, arg01 wz
21160     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21164     00 22 56 A2 |  if_e	cmps	local03, #0 wc
21168     13 23 02 86 |  if_c_and_z	mov	local03, local05
2116c     84 00 90 8D |  if_c_and_z	jmp	#LR__2848
21170     13 13 02 F6 | 	mov	arg01, local05
21174     02 12 66 F0 | 	shl	arg01, #2
21178     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2117c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
21180     09 13 02 FB | 	rdlong	arg01, arg01
21184     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21188     09 25 02 F6 | 	mov	local04, arg01
2118c     97 06 48 FB | 	callpa	#(@LR__2846-@LR__2845)>>2,fcache_load_ptr_
21190                 | LR__2845
21190     12 FB C9 FA | 	rdbyte	result1, local04 wz
21194     01 24 06 51 |  if_ne	add	local04, #1
21198     F4 FF 9F 5D |  if_ne	jmp	#LR__2845
2119c                 | LR__2846
2119c     09 25 82 F1 | 	sub	local04, arg01
211a0     12 29 02 F6 | 	mov	local06, local04
211a4     14 13 02 F6 | 	mov	arg01, local06
211a8     0F 13 02 F1 | 	add	arg01, local01
211ac     09 FB C1 FA | 	rdbyte	result1, arg01
211b0     2F FA 0D F2 | 	cmp	result1, #47 wz
211b4     14 2B 02 56 |  if_ne	mov	local07, local06
211b8     0F 2B 02 51 |  if_ne	add	local07, local01
211bc     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
211c0     30 00 90 5D |  if_ne	jmp	#LR__2847
211c4     13 17 02 F6 | 	mov	arg03, local05
211c8     02 16 66 F0 | 	shl	arg03, #2
211cc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
211d0     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
211d4     0B 15 02 FB | 	rdlong	arg02, arg03
211d8     0F 13 02 F6 | 	mov	arg01, local01
211dc     14 17 02 F6 | 	mov	arg03, local06
211e0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
211e4     60 4E B0 FD | 	call	#__system__strncmp
211e8     00 FA 0D F2 | 	cmp	result1, #0 wz
211ec     13 23 02 A6 |  if_e	mov	local03, local05
211f0     08 00 90 AD |  if_e	jmp	#LR__2849
211f4                 | LR__2847
211f4                 | LR__2848
211f4     01 26 06 F1 | 	add	local05, #1
211f8     48 FF 9F FD | 	jmp	#LR__2844
211fc                 | LR__2849
211fc     FF FF 7F FF 
21200     FF 23 0E F2 | 	cmp	local03, ##-1 wz
21204     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
21208     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
2120c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
21210     01 FA 65 A6 |  if_e	neg	result1, #1
21214     78 01 90 AD |  if_e	jmp	#LR__2855
21218     11 27 02 F6 | 	mov	local05, local03
2121c     13 2B 02 F6 | 	mov	local07, local05
21220     02 2A 66 F0 | 	shl	local07, #2
21224     74 E6 05 F1 | 	add	ptr___system__dat__, #116
21228     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
2122c     15 29 0A FB | 	rdlong	local06, local07 wz
21230     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
21234     58 00 90 AD |  if_e	jmp	#LR__2850
21238     4C 28 06 F1 | 	add	local06, #76
2123c     14 2B 0A FB | 	rdlong	local07, local06 wz
21240     4C 28 86 F1 | 	sub	local06, #76
21244     48 00 90 AD |  if_e	jmp	#LR__2850
21248     4C 28 06 F1 | 	add	local06, #76
2124c     14 2B 02 FB | 	rdlong	local07, local06
21250     15 23 02 F6 | 	mov	local03, local07
21254     13 2A 46 F7 | 	zerox	local07, #19
21258     14 22 46 F0 | 	shr	local03, #20
2125c     02 22 66 F0 | 	shl	local03, #2
21260     ED 22 02 F1 | 	add	local03, __methods__
21264     11 23 02 FB | 	rdlong	local03, local03
21268     13 29 02 F6 | 	mov	local06, local05
2126c     02 28 66 F0 | 	shl	local06, #2
21270     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21274     F3 28 02 F1 | 	add	local06, ptr___system__dat__
21278     14 13 02 FB | 	rdlong	arg01, local06
2127c     F2 28 02 F6 | 	mov	local06, objptr
21280     15 E5 01 F6 | 	mov	objptr, local07
21284     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21288     2D 22 62 FD | 	call	local03
2128c     14 E5 01 F6 | 	mov	objptr, local06
21290                 | LR__2850
21290     13 2D 02 F6 | 	mov	local08, local05
21294     02 2C 66 F0 | 	shl	local08, #2
21298     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2129c     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
212a0     16 21 62 FC | 	wrlong	local02, local08
212a4     00 20 0E F2 | 	cmp	local02, #0 wz
212a8     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
212ac     18 00 90 5D |  if_ne	jmp	#LR__2851
212b0     02 26 66 F0 | 	shl	local05, #2
212b4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
212b8     F3 26 02 F1 | 	add	local05, ptr___system__dat__
212bc     13 01 68 FC | 	wrlong	#0, local05
212c0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
212c4     C4 00 90 FD | 	jmp	#LR__2854
212c8                 | LR__2851
212c8     13 2F 02 F6 | 	mov	local09, local05
212cc     04 2E 66 F0 | 	shl	local09, #4
212d0     24 E6 05 F1 | 	add	ptr___system__dat__, #36
212d4     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
212d8     17 13 02 F6 | 	mov	arg01, local09
212dc     0F 15 02 F6 | 	mov	arg02, local01
212e0     10 16 06 F6 | 	mov	arg03, #16
212e4     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
212e8     B0 4C B0 FD | 	call	#__system__strncpy
212ec     48 20 06 F1 | 	add	local02, #72
212f0     10 2D 0A FB | 	rdlong	local08, local02 wz
212f4     48 20 86 F1 | 	sub	local02, #72
212f8     7C 00 90 AD |  if_e	jmp	#LR__2853
212fc     48 20 06 F1 | 	add	local02, #72
21300     10 2D 02 FB | 	rdlong	local08, local02
21304     16 31 02 F6 | 	mov	local10, local08
21308     13 2C 46 F7 | 	zerox	local08, #19
2130c     14 30 46 F0 | 	shr	local10, #20
21310     02 30 66 F0 | 	shl	local10, #2
21314     ED 30 02 F1 | 	add	local10, __methods__
21318     18 31 02 FB | 	rdlong	local10, local10
2131c     17 13 02 F6 | 	mov	arg01, local09
21320     F2 32 02 F6 | 	mov	local11, objptr
21324     16 E5 01 F6 | 	mov	objptr, local08
21328     2D 30 62 FD | 	call	local10
2132c     19 E5 01 F6 | 	mov	objptr, local11
21330     FD 12 0A F6 | 	mov	arg01, result1 wz
21334     40 00 90 AD |  if_e	jmp	#LR__2852
21338     13 2D 02 F6 | 	mov	local08, local05
2133c     02 2C 66 F0 | 	shl	local08, #2
21340     74 E6 05 F1 | 	add	ptr___system__dat__, #116
21344     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
21348     16 01 68 FC | 	wrlong	#0, local08
2134c     02 26 66 F0 | 	shl	local05, #2
21350     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
21354     F3 26 02 F1 | 	add	local05, ptr___system__dat__
21358     13 01 68 FC | 	wrlong	#0, local05
2135c     09 13 6A F6 | 	neg	arg01, arg01 wz
21360     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
21364     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
21368     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2136c     01 FA 65 56 |  if_ne	neg	result1, #1
21370     00 FA 05 A6 |  if_e	mov	result1, #0
21374     18 00 90 FD | 	jmp	#LR__2855
21378                 | LR__2852
21378                 | LR__2853
21378     02 26 66 F0 | 	shl	local05, #2
2137c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21380     F3 26 02 F1 | 	add	local05, ptr___system__dat__
21384     13 2F 62 FC | 	wrlong	local09, local05
21388     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2138c                 | LR__2854
2138c     00 FA 05 F6 | 	mov	result1, #0
21390                 | LR__2855
21390     A7 F0 03 F6 | 	mov	ptra, fp
21394     B2 00 A0 FD | 	call	#popregs_
21398                 | __system___mount_ret
21398     2D 00 64 FD | 	ret
2139c                 | 
2139c                 | __system___chdir
2139c     00 4A 05 F6 | 	mov	COUNT_, #0
213a0     A8 00 A0 FD | 	call	#pushregs_
213a4     40 F0 07 F1 | 	add	ptra, #64
213a8     04 4E 05 F1 | 	add	fp, #4
213ac     A7 12 62 FC | 	wrlong	arg01, fp
213b0     04 4E 05 F1 | 	add	fp, #4
213b4     A7 14 02 F6 | 	mov	arg02, fp
213b8     08 4E 85 F1 | 	sub	fp, #8
213bc     80 48 B0 FD | 	call	#__system__stat
213c0     3C 4E 05 F1 | 	add	fp, #60
213c4     A7 FA 61 FC | 	wrlong	result1, fp
213c8     3C 4E 85 F1 | 	sub	fp, #60
213cc     00 FA 0D F2 | 	cmp	result1, #0 wz
213d0     3C 4E 05 51 |  if_ne	add	fp, #60
213d4     A7 FA 01 5B |  if_ne	rdlong	result1, fp
213d8     3C 4E 85 51 |  if_ne	sub	fp, #60
213dc     BC 00 90 5D |  if_ne	jmp	#LR__2862
213e0     10 4E 05 F1 | 	add	fp, #16
213e4     A7 12 02 FB | 	rdlong	arg01, fp
213e8     10 4E 85 F1 | 	sub	fp, #16
213ec     78 00 00 FF 
213f0     00 12 06 F5 | 	and	arg01, ##61440
213f4     08 00 00 FF 
213f8     00 12 0E F2 | 	cmp	arg01, ##4096 wz
213fc     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
21400     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
21404     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
21408     01 FA 65 56 |  if_ne	neg	result1, #1
2140c     8C 00 90 5D |  if_ne	jmp	#LR__2862
21410     04 4E 05 F1 | 	add	fp, #4
21414     A7 16 02 FB | 	rdlong	arg03, fp
21418     04 4E 85 F1 | 	sub	fp, #4
2141c     0B 17 C2 FA | 	rdbyte	arg03, arg03
21420     2F 16 0E F2 | 	cmp	arg03, #47 wz
21424     24 00 90 5D |  if_ne	jmp	#LR__2860
21428     84 E6 05 F1 | 	add	ptr___system__dat__, #132
2142c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
21430     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21434     04 4E 05 F1 | 	add	fp, #4
21438     A7 14 02 FB | 	rdlong	arg02, fp
2143c     04 4E 85 F1 | 	sub	fp, #4
21440     00 17 06 F6 | 	mov	arg03, #256
21444     54 4B B0 FD | 	call	#__system__strncpy
21448     4C 00 90 FD | 	jmp	#LR__2861
2144c                 | LR__2860
2144c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
21450     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
21454     38 4E 05 F1 | 	add	fp, #56
21458     A7 12 62 FC | 	wrlong	arg01, fp
2145c     38 4E 85 F1 | 	sub	fp, #56
21460     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
21464     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
21468     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
2146c     00 17 06 F6 | 	mov	arg03, #256
21470     28 4B B0 FD | 	call	#__system__strncpy
21474     38 4E 05 F1 | 	add	fp, #56
21478     A7 12 02 FB | 	rdlong	arg01, fp
2147c     34 4E 85 F1 | 	sub	fp, #52
21480     A7 14 02 FB | 	rdlong	arg02, fp
21484     04 4E 85 F1 | 	sub	fp, #4
21488     84 E6 05 F1 | 	add	ptr___system__dat__, #132
2148c     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
21490     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21494     10 00 B0 FD | 	call	#__system____getvfsforfile
21498                 | LR__2861
21498     00 FA 05 F6 | 	mov	result1, #0
2149c                 | LR__2862
2149c     A7 F0 03 F6 | 	mov	ptra, fp
214a0     B2 00 A0 FD | 	call	#popregs_
214a4                 | __system___chdir_ret
214a4     2D 00 64 FD | 	ret
214a8                 | 
214a8                 | __system____getvfsforfile
214a8     0E 4A 05 F6 | 	mov	COUNT_, #14
214ac     A8 00 A0 FD | 	call	#pushregs_
214b0     09 1F 02 F6 | 	mov	local01, arg01
214b4     0A 21 02 F6 | 	mov	local02, arg02
214b8     0B 23 02 F6 | 	mov	local03, arg03
214bc     97 10 48 FB | 	callpa	#(@LR__2871-@LR__2870)>>2,fcache_load_ptr_
214c0                 | LR__2870
214c0     10 FB C1 FA | 	rdbyte	result1, local02
214c4     2F FA 0D F2 | 	cmp	result1, #47 wz
214c8     01 20 06 A1 |  if_e	add	local02, #1
214cc     10 25 C2 AA |  if_e	rdbyte	local04, local02
214d0     01 20 86 A1 |  if_e	sub	local02, #1
214d4     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
214d8     01 20 06 A1 |  if_e	add	local02, #1
214dc     E0 FF 9F AD |  if_e	jmp	#LR__2870
214e0                 | LR__2871
214e0     10 25 C2 FA | 	rdbyte	local04, local02
214e4     2F 24 0E F2 | 	cmp	local04, #47 wz
214e8     14 00 90 5D |  if_ne	jmp	#LR__2872
214ec     0F 13 02 F6 | 	mov	arg01, local01
214f0     10 15 02 F6 | 	mov	arg02, local02
214f4     00 17 06 F6 | 	mov	arg03, #256
214f8     A0 4A B0 FD | 	call	#__system__strncpy
214fc     7C 00 90 FD | 	jmp	#LR__2874
21500                 | LR__2872
21500     84 E6 05 F1 | 	add	ptr___system__dat__, #132
21504     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
21508     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
2150c     0F 13 02 F6 | 	mov	arg01, local01
21510     00 17 06 F6 | 	mov	arg03, #256
21514     84 4A B0 FD | 	call	#__system__strncpy
21518     10 25 CA FA | 	rdbyte	local04, local02 wz
2151c     5C 00 90 AD |  if_e	jmp	#LR__2873
21520     10 25 C2 FA | 	rdbyte	local04, local02
21524     2E 24 0E F2 | 	cmp	local04, #46 wz
21528     01 20 06 A1 |  if_e	add	local02, #1
2152c     10 27 C2 AA |  if_e	rdbyte	local05, local02
21530     01 20 86 A1 |  if_e	sub	local02, #1
21534     13 29 02 A6 |  if_e	mov	local06, local05
21538     07 28 4E A7 |  if_e	zerox	local06, #7 wz
2153c     3C 00 90 AD |  if_e	jmp	#LR__2873
21540     0F 27 C2 FA | 	rdbyte	local05, local01
21544     2F 26 0E F2 | 	cmp	local05, #47 wz
21548     01 1E 06 A1 |  if_e	add	local01, #1
2154c     0F 25 C2 AA |  if_e	rdbyte	local04, local01
21550     01 1E 86 A1 |  if_e	sub	local01, #1
21554     00 24 4E A2 |  if_e	cmps	local04, #0 wz
21558     82 01 00 5F 
2155c     34 15 06 56 |  if_ne	mov	arg02, ##@LR__4960
21560     0F 13 02 56 |  if_ne	mov	arg01, local01
21564     00 17 06 56 |  if_ne	mov	arg03, #256
21568     7C 4A B0 5D |  if_ne	call	#__system__strncat
2156c     0F 13 02 F6 | 	mov	arg01, local01
21570     10 15 02 F6 | 	mov	arg02, local02
21574     00 17 06 F6 | 	mov	arg03, #256
21578     6C 4A B0 FD | 	call	#__system__strncat
2157c                 | LR__2873
2157c                 | LR__2874
2157c     0F 13 02 F6 | 	mov	arg01, local01
21580     24 4C B0 FD | 	call	#__system___normalizeName
21584     0F 25 CA FA | 	rdbyte	local04, local01 wz
21588     1C 00 90 AD |  if_e	jmp	#LR__2875
2158c     0F 25 C2 FA | 	rdbyte	local04, local01
21590     2F 24 0E F2 | 	cmp	local04, #47 wz
21594     01 1E 06 A1 |  if_e	add	local01, #1
21598     0F 29 C2 AA |  if_e	rdbyte	local06, local01
2159c     01 1E 86 A1 |  if_e	sub	local01, #1
215a0     00 28 4E A2 |  if_e	cmps	local06, #0 wz
215a4     18 00 90 5D |  if_ne	jmp	#LR__2876
215a8                 | LR__2875
215a8     01 00 00 FF 
215ac     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
215b0     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
215b4     01 00 00 FF 
215b8     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
215bc     EC 01 90 FD | 	jmp	#LR__2890
215c0                 | LR__2876
215c0     00 2A 06 F6 | 	mov	local07, #0
215c4                 | LR__2877
215c4     04 2A 56 F2 | 	cmps	local07, #4 wc
215c8     CC 01 90 3D |  if_ae	jmp	#LR__2889
215cc     15 29 02 F6 | 	mov	local06, local07
215d0     02 28 66 F0 | 	shl	local06, #2
215d4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
215d8     F3 28 02 F1 | 	add	local06, ptr___system__dat__
215dc     14 29 0A FB | 	rdlong	local06, local06 wz
215e0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
215e4     A8 01 90 AD |  if_e	jmp	#LR__2888
215e8     15 25 02 F6 | 	mov	local04, local07
215ec     02 24 66 F0 | 	shl	local04, #2
215f0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
215f4     F3 24 02 F1 | 	add	local04, ptr___system__dat__
215f8     12 13 02 FB | 	rdlong	arg01, local04
215fc     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21600     09 2D 02 F6 | 	mov	local08, arg01
21604     97 06 48 FB | 	callpa	#(@LR__2879-@LR__2878)>>2,fcache_load_ptr_
21608                 | LR__2878
21608     16 FB C9 FA | 	rdbyte	result1, local08 wz
2160c     01 2C 06 51 |  if_ne	add	local08, #1
21610     F4 FF 9F 5D |  if_ne	jmp	#LR__2878
21614                 | LR__2879
21614     09 2D 82 F1 | 	sub	local08, arg01
21618     16 2F 02 F6 | 	mov	local09, local08
2161c     17 25 02 F6 | 	mov	local04, local09
21620     0F 25 02 F1 | 	add	local04, local01
21624     12 29 C2 FA | 	rdbyte	local06, local04
21628     2F 28 0E F2 | 	cmp	local06, #47 wz
2162c     17 31 02 56 |  if_ne	mov	local10, local09
21630     0F 31 02 51 |  if_ne	add	local10, local01
21634     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
21638     54 01 90 5D |  if_ne	jmp	#LR__2887
2163c     15 17 02 F6 | 	mov	arg03, local07
21640     02 16 66 F0 | 	shl	arg03, #2
21644     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21648     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
2164c     0B 15 02 FB | 	rdlong	arg02, arg03
21650     17 17 02 F6 | 	mov	arg03, local09
21654     0F 13 02 F6 | 	mov	arg01, local01
21658     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2165c     E8 49 B0 FD | 	call	#__system__strncmp
21660     00 FA 4D F2 | 	cmps	result1, #0 wz
21664     28 01 90 5D |  if_ne	jmp	#LR__2887
21668     15 33 02 F6 | 	mov	local11, local07
2166c     02 32 66 F0 | 	shl	local11, #2
21670     74 E6 05 F1 | 	add	ptr___system__dat__, #116
21674     F3 32 02 F1 | 	add	local11, ptr___system__dat__
21678     19 35 02 FB | 	rdlong	local12, local11
2167c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
21680     97 22 48 FB | 	callpa	#(@LR__2881-@LR__2880)>>2,fcache_load_ptr_
21684                 | LR__2880
21684     17 29 02 F6 | 	mov	local06, local09
21688     01 28 06 F1 | 	add	local06, #1
2168c     0F 29 02 F1 | 	add	local06, local01
21690     14 33 C2 FA | 	rdbyte	local11, local06
21694     2E 32 0E F2 | 	cmp	local11, #46 wz
21698     2C 00 90 5D |  if_ne	jmp	#LR__2882
2169c     17 33 02 F6 | 	mov	local11, local09
216a0     02 32 06 F1 | 	add	local11, #2
216a4     0F 33 02 F1 | 	add	local11, local01
216a8     19 31 C2 FA | 	rdbyte	local10, local11
216ac     2F 30 0E F2 | 	cmp	local10, #47 wz
216b0     17 37 02 56 |  if_ne	mov	local13, local09
216b4     02 36 06 51 |  if_ne	add	local13, #2
216b8     0F 37 02 51 |  if_ne	add	local13, local01
216bc     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
216c0     01 2E 06 A1 |  if_e	add	local09, #1
216c4     BC FF 9F AD |  if_e	jmp	#LR__2880
216c8                 | LR__2881
216c8                 | LR__2882
216c8     00 22 0E F2 | 	cmp	local03, #0 wz
216cc     11 13 02 56 |  if_ne	mov	arg01, local03
216d0     0F 15 02 56 |  if_ne	mov	arg02, local01
216d4     00 17 06 56 |  if_ne	mov	arg03, #256
216d8     C0 48 B0 5D |  if_ne	call	#__system__strncpy
216dc     0F 15 02 F6 | 	mov	arg02, local01
216e0     17 15 02 F1 | 	add	arg02, local09
216e4     01 14 06 F1 | 	add	arg02, #1
216e8     0F 13 02 F6 | 	mov	arg01, local01
216ec     D4 F5 BF FD | 	call	#__system____builtin_strcpy
216f0     0F 13 02 F6 | 	mov	arg01, local01
216f4     09 2D 02 F6 | 	mov	local08, arg01
216f8     97 06 48 FB | 	callpa	#(@LR__2884-@LR__2883)>>2,fcache_load_ptr_
216fc                 | LR__2883
216fc     16 FB C9 FA | 	rdbyte	result1, local08 wz
21700     01 2C 06 51 |  if_ne	add	local08, #1
21704     F4 FF 9F 5D |  if_ne	jmp	#LR__2883
21708                 | LR__2884
21708     09 2D 82 F1 | 	sub	local08, arg01
2170c     16 2F 02 F6 | 	mov	local09, local08
21710                 | LR__2885
21710     01 2E 56 F2 | 	cmps	local09, #1 wc
21714     70 00 90 CD |  if_b	jmp	#LR__2886
21718     17 25 02 F6 | 	mov	local04, local09
2171c     0F 25 02 F1 | 	add	local04, local01
21720     12 33 C2 FA | 	rdbyte	local11, local04
21724     2F 32 0E F2 | 	cmp	local11, #47 wz
21728     17 33 02 A6 |  if_e	mov	local11, local09
2172c     0F 33 02 A1 |  if_e	add	local11, local01
21730     19 01 48 AC |  if_e	wrbyte	#0, local11
21734     01 2E 86 A1 |  if_e	sub	local09, #1
21738     D4 FF 9F AD |  if_e	jmp	#LR__2885
2173c     17 25 02 F6 | 	mov	local04, local09
21740     0F 25 02 F1 | 	add	local04, local01
21744     12 33 C2 FA | 	rdbyte	local11, local04
21748     2E 32 0E F2 | 	cmp	local11, #46 wz
2174c     38 00 90 5D |  if_ne	jmp	#LR__2886
21750     02 2E 56 F2 | 	cmps	local09, #2 wc
21754     30 00 90 CD |  if_b	jmp	#LR__2886
21758     17 39 02 F6 | 	mov	local14, local09
2175c     01 38 86 F1 | 	sub	local14, #1
21760     0F 39 02 F1 | 	add	local14, local01
21764     1C 27 C2 FA | 	rdbyte	local05, local14
21768     2F 26 0E F2 | 	cmp	local05, #47 wz
2176c     18 00 90 5D |  if_ne	jmp	#LR__2886
21770     17 25 02 F6 | 	mov	local04, local09
21774     01 24 86 F1 | 	sub	local04, #1
21778     0F 25 02 F1 | 	add	local04, local01
2177c     12 01 48 FC | 	wrbyte	#0, local04
21780     02 2E 86 F1 | 	sub	local09, #2
21784     88 FF 9F FD | 	jmp	#LR__2885
21788                 | LR__2886
21788     1A FB 01 F6 | 	mov	result1, local12
2178c     1C 00 90 FD | 	jmp	#LR__2890
21790                 | LR__2887
21790                 | LR__2888
21790     01 2A 06 F1 | 	add	local07, #1
21794     2C FE 9F FD | 	jmp	#LR__2877
21798                 | LR__2889
21798     03 00 00 FF 
2179c     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
217a0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
217a4     03 00 00 FF 
217a8     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
217ac                 | LR__2890
217ac     A7 F0 03 F6 | 	mov	ptra, fp
217b0     B2 00 A0 FD | 	call	#popregs_
217b4                 | __system____getvfsforfile_ret
217b4     2D 00 64 FD | 	ret
217b8                 | 
217b8                 | __system___basic_open
217b8     05 4A 05 F6 | 	mov	COUNT_, #5
217bc     A8 00 A0 FD | 	call	#pushregs_
217c0     0A 1F 02 F6 | 	mov	local01, arg02
217c4     0B 21 02 F6 | 	mov	local02, arg03
217c8     0C 23 02 F6 | 	mov	local03, arg04
217cc     00 24 06 F6 | 	mov	local04, #0
217d0     A0 47 B0 FD | 	call	#__system____getftab
217d4     FD 26 0A F6 | 	mov	local05, result1 wz
217d8     18 00 90 5D |  if_ne	jmp	#LR__2900
217dc     EE 12 02 F6 | 	mov	arg01, abortchain
217e0     0C 14 06 F6 | 	mov	arg02, #12
217e4     01 16 06 F6 | 	mov	arg03, #1
217e8     DA 00 A0 FD | 	call	#__longjmp
217ec     01 FA 65 F6 | 	neg	result1, #1
217f0     14 01 90 FD | 	jmp	#LR__2909
217f4                 | LR__2900
217f4     08 26 06 F1 | 	add	local05, #8
217f8     13 FB 09 FB | 	rdlong	result1, local05 wz
217fc     08 26 86 F1 | 	sub	local05, #8
21800     13 13 02 56 |  if_ne	mov	arg01, local05
21804     C0 3E B0 5D |  if_ne	call	#__system___closeraw
21808     00 1E 0E F2 | 	cmp	local01, #0 wz
2180c     00 20 0E A2 |  if_e	cmp	local02, #0 wz
21810     00 22 0E A2 |  if_e	cmp	local03, #0 wz
21814     3C 00 90 AD |  if_e	jmp	#LR__2902
21818     0C 12 06 F6 | 	mov	arg01, #12
2181c     A8 33 B0 FD | 	call	#__system___gc_alloc_managed
21820     FD 24 0A F6 | 	mov	local04, result1 wz
21824     18 00 90 5D |  if_ne	jmp	#LR__2901
21828     EE 12 02 F6 | 	mov	arg01, abortchain
2182c     07 14 06 F6 | 	mov	arg02, #7
21830     01 16 06 F6 | 	mov	arg03, #1
21834     DA 00 A0 FD | 	call	#__longjmp
21838     01 FA 65 F6 | 	neg	result1, #1
2183c     C8 00 90 FD | 	jmp	#LR__2909
21840                 | LR__2901
21840     12 01 68 FC | 	wrlong	#0, local04
21844     04 24 06 F1 | 	add	local04, #4
21848     12 01 68 FC | 	wrlong	#0, local04
2184c     04 24 86 F1 | 	sub	local04, #4
21850     13 25 62 FC | 	wrlong	local04, local05
21854                 | LR__2902
21854     00 1E 0E F2 | 	cmp	local01, #0 wz
21858     20 00 90 AD |  if_e	jmp	#LR__2903
2185c     12 1F 62 FC | 	wrlong	local01, local04
21860     12 FB 01 F6 | 	mov	result1, local04
21864     00 80 04 FF 
21868     00 FA 45 F5 | 	or	result1, ##150994944
2186c     1C 26 06 F1 | 	add	local05, #28
21870     13 FB 61 FC | 	wrlong	result1, local05
21874     1C 26 86 F1 | 	sub	local05, #28
21878     0C 00 90 FD | 	jmp	#LR__2904
2187c                 | LR__2903
2187c     1C 26 06 F1 | 	add	local05, #28
21880     13 01 68 FC | 	wrlong	#0, local05
21884     1C 26 86 F1 | 	sub	local05, #28
21888                 | LR__2904
21888     00 20 0E F2 | 	cmp	local02, #0 wz
2188c     28 00 90 AD |  if_e	jmp	#LR__2905
21890     04 24 06 F1 | 	add	local04, #4
21894     12 21 62 FC | 	wrlong	local02, local04
21898     04 24 86 F1 | 	sub	local04, #4
2189c     12 FB 01 F6 | 	mov	result1, local04
218a0     00 88 04 FF 
218a4     00 FA 45 F5 | 	or	result1, ##152043520
218a8     20 26 06 F1 | 	add	local05, #32
218ac     13 FB 61 FC | 	wrlong	result1, local05
218b0     20 26 86 F1 | 	sub	local05, #32
218b4     0C 00 90 FD | 	jmp	#LR__2906
218b8                 | LR__2905
218b8     20 26 06 F1 | 	add	local05, #32
218bc     13 01 68 FC | 	wrlong	#0, local05
218c0     20 26 86 F1 | 	sub	local05, #32
218c4                 | LR__2906
218c4     00 22 0E F2 | 	cmp	local03, #0 wz
218c8     24 00 90 AD |  if_e	jmp	#LR__2907
218cc     08 24 06 F1 | 	add	local04, #8
218d0     12 23 62 FC | 	wrlong	local03, local04
218d4     08 24 86 F1 | 	sub	local04, #8
218d8     00 90 04 FF 
218dc     00 24 46 F5 | 	or	local04, ##153092096
218e0     24 26 06 F1 | 	add	local05, #36
218e4     13 25 62 FC | 	wrlong	local04, local05
218e8     24 26 86 F1 | 	sub	local05, #36
218ec     0C 00 90 FD | 	jmp	#LR__2908
218f0                 | LR__2907
218f0     24 26 06 F1 | 	add	local05, #36
218f4     13 01 68 FC | 	wrlong	#0, local05
218f8     24 26 86 F1 | 	sub	local05, #36
218fc                 | LR__2908
218fc     08 26 06 F1 | 	add	local05, #8
21900     13 0F 68 FC | 	wrlong	#7, local05
21904     00 FA 05 F6 | 	mov	result1, #0
21908                 | LR__2909
21908     A7 F0 03 F6 | 	mov	ptra, fp
2190c     B2 00 A0 FD | 	call	#popregs_
21910                 | __system___basic_open_ret
21910     2D 00 64 FD | 	ret
21914                 | 
21914                 | __system___basic_open_string
21914     04 4A 05 F6 | 	mov	COUNT_, #4
21918     A8 00 A0 FD | 	call	#pushregs_
2191c     0A 1F 02 F6 | 	mov	local01, arg02
21920     0B 21 02 F6 | 	mov	local02, arg03
21924     4C 46 B0 FD | 	call	#__system____getftab
21928     FD 22 0A F6 | 	mov	local03, result1 wz
2192c     18 00 90 5D |  if_ne	jmp	#LR__2910
21930     EE 12 02 F6 | 	mov	arg01, abortchain
21934     0C 14 06 F6 | 	mov	arg02, #12
21938     01 16 06 F6 | 	mov	arg03, #1
2193c     DA 00 A0 FD | 	call	#__longjmp
21940     01 FA 65 F6 | 	neg	result1, #1
21944     58 00 90 FD | 	jmp	#LR__2912
21948                 | LR__2910
21948     08 22 06 F1 | 	add	local03, #8
2194c     11 19 0A FB | 	rdlong	arg04, local03 wz
21950     08 22 86 F1 | 	sub	local03, #8
21954     11 13 02 56 |  if_ne	mov	arg01, local03
21958     6C 3D B0 5D |  if_ne	call	#__system___closeraw
2195c     0F 15 02 F6 | 	mov	arg02, local01
21960     10 17 02 F6 | 	mov	arg03, local02
21964     11 13 02 F6 | 	mov	arg01, local03
21968     B6 19 06 F6 | 	mov	arg04, #438
2196c     54 3A B0 FD | 	call	#__system___openraw
21970     FD 24 02 F6 | 	mov	local04, result1
21974     00 24 56 F2 | 	cmps	local04, #0 wc
21978     20 00 90 3D |  if_ae	jmp	#LR__2911
2197c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
21980     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
21984     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21988     EE 12 02 F6 | 	mov	arg01, abortchain
2198c     01 16 06 F6 | 	mov	arg03, #1
21990     DA 00 A0 FD | 	call	#__longjmp
21994     01 FA 65 F6 | 	neg	result1, #1
21998     04 00 90 FD | 	jmp	#LR__2912
2199c                 | LR__2911
2199c     12 FB 01 F6 | 	mov	result1, local04
219a0                 | LR__2912
219a0     A7 F0 03 F6 | 	mov	ptra, fp
219a4     B2 00 A0 FD | 	call	#popregs_
219a8                 | __system___basic_open_string_ret
219a8     2D 00 64 FD | 	ret
219ac                 | 
219ac                 | __system___basic_print_char
219ac     03 4A 05 F6 | 	mov	COUNT_, #3
219b0     A8 00 A0 FD | 	call	#pushregs_
219b4     0A 1F 02 F6 | 	mov	local01, arg02
219b8     0C 4D B0 FD | 	call	#__system___gettxfunc
219bc     FD 20 0A F6 | 	mov	local02, result1 wz
219c0     00 FA 05 A6 |  if_e	mov	result1, #0
219c4     30 00 90 AD |  if_e	jmp	#LR__2920
219c8     10 23 02 F6 | 	mov	local03, local02
219cc     13 20 46 F7 | 	zerox	local02, #19
219d0     14 22 46 F0 | 	shr	local03, #20
219d4     02 22 66 F0 | 	shl	local03, #2
219d8     ED 22 02 F1 | 	add	local03, __methods__
219dc     11 23 02 FB | 	rdlong	local03, local03
219e0     0F 13 02 F6 | 	mov	arg01, local01
219e4     F2 1E 02 F6 | 	mov	local01, objptr
219e8     10 E5 01 F6 | 	mov	objptr, local02
219ec     2D 22 62 FD | 	call	local03
219f0     0F E5 01 F6 | 	mov	objptr, local01
219f4     01 FA 05 F6 | 	mov	result1, #1
219f8                 | LR__2920
219f8     A7 F0 03 F6 | 	mov	ptra, fp
219fc     B2 00 A0 FD | 	call	#popregs_
21a00                 | __system___basic_print_char_ret
21a00     2D 00 64 FD | 	ret
21a04                 | 
21a04                 | __system___basic_print_string
21a04     03 4A 05 F6 | 	mov	COUNT_, #3
21a08     A8 00 A0 FD | 	call	#pushregs_
21a0c     0A 1F 02 F6 | 	mov	local01, arg02
21a10     0B 21 02 F6 | 	mov	local02, arg03
21a14     B0 4C B0 FD | 	call	#__system___gettxfunc
21a18     FD 22 0A F6 | 	mov	local03, result1 wz
21a1c     00 FA 05 A6 |  if_e	mov	result1, #0
21a20     18 00 90 AD |  if_e	jmp	#LR__2930
21a24     00 1E 0E F2 | 	cmp	local01, #0 wz
21a28     00 FA 05 A6 |  if_e	mov	result1, #0
21a2c     11 13 02 56 |  if_ne	mov	arg01, local03
21a30     10 15 02 56 |  if_ne	mov	arg02, local02
21a34     0F 17 02 56 |  if_ne	mov	arg03, local01
21a38     08 02 B0 5D |  if_ne	call	#__system___fmtstr
21a3c                 | LR__2930
21a3c     A7 F0 03 F6 | 	mov	ptra, fp
21a40     B2 00 A0 FD | 	call	#popregs_
21a44                 | __system___basic_print_string_ret
21a44     2D 00 64 FD | 	ret
21a48                 | 
21a48                 | __system___basic_print_integer
21a48     04 4A 05 F6 | 	mov	COUNT_, #4
21a4c     A8 00 A0 FD | 	call	#pushregs_
21a50     0A 1F 02 F6 | 	mov	local01, arg02
21a54     0B 21 02 F6 | 	mov	local02, arg03
21a58     0C 23 02 F6 | 	mov	local03, arg04
21a5c     68 4C B0 FD | 	call	#__system___gettxfunc
21a60     FD 24 0A F6 | 	mov	local04, result1 wz
21a64     00 FA 05 A6 |  if_e	mov	result1, #0
21a68     12 13 02 56 |  if_ne	mov	arg01, local04
21a6c     10 15 02 56 |  if_ne	mov	arg02, local02
21a70     0F 17 02 56 |  if_ne	mov	arg03, local01
21a74     11 19 02 56 |  if_ne	mov	arg04, local03
21a78     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
21a7c     A7 F0 03 F6 | 	mov	ptra, fp
21a80     B2 00 A0 FD | 	call	#popregs_
21a84                 | __system___basic_print_integer_ret
21a84     2D 00 64 FD | 	ret
21a88                 | 
21a88                 | __system___basic_print_unsigned
21a88     03 4A 05 F6 | 	mov	COUNT_, #3
21a8c     A8 00 A0 FD | 	call	#pushregs_
21a90     0A 1F 02 F6 | 	mov	local01, arg02
21a94     0B 21 02 F6 | 	mov	local02, arg03
21a98     0C 23 02 F6 | 	mov	local03, arg04
21a9c     28 4C B0 FD | 	call	#__system___gettxfunc
21aa0     FD 12 0A F6 | 	mov	arg01, result1 wz
21aa4     00 FA 05 A6 |  if_e	mov	result1, #0
21aa8     3A 20 26 54 |  if_ne	bith	local02, #58
21aac     10 15 02 56 |  if_ne	mov	arg02, local02
21ab0     0F 17 02 56 |  if_ne	mov	arg03, local01
21ab4     11 19 02 56 |  if_ne	mov	arg04, local03
21ab8     74 02 B0 5D |  if_ne	call	#__system___fmtnum
21abc     A7 F0 03 F6 | 	mov	ptra, fp
21ac0     B2 00 A0 FD | 	call	#popregs_
21ac4                 | __system___basic_print_unsigned_ret
21ac4     2D 00 64 FD | 	ret
21ac8                 | 
21ac8                 | __system___basic_get_char
21ac8     03 4A 05 F6 | 	mov	COUNT_, #3
21acc     A8 00 A0 FD | 	call	#pushregs_
21ad0     38 4C B0 FD | 	call	#__system___getrxfunc
21ad4     FD 1E 0A F6 | 	mov	local01, result1 wz
21ad8     01 FA 65 A6 |  if_e	neg	result1, #1
21adc     28 00 90 AD |  if_e	jmp	#LR__2940
21ae0     0F 21 02 F6 | 	mov	local02, local01
21ae4     13 1E 46 F7 | 	zerox	local01, #19
21ae8     14 20 46 F0 | 	shr	local02, #20
21aec     02 20 66 F0 | 	shl	local02, #2
21af0     ED 20 02 F1 | 	add	local02, __methods__
21af4     10 21 02 FB | 	rdlong	local02, local02
21af8     F2 22 02 F6 | 	mov	local03, objptr
21afc     0F E5 01 F6 | 	mov	objptr, local01
21b00     2D 20 62 FD | 	call	local02
21b04     11 E5 01 F6 | 	mov	objptr, local03
21b08                 | LR__2940
21b08     A7 F0 03 F6 | 	mov	ptra, fp
21b0c     B2 00 A0 FD | 	call	#popregs_
21b10                 | __system___basic_get_char_ret
21b10     2D 00 64 FD | 	ret
21b14                 | 
21b14                 | __system___basic_put
21b14     04 4A 05 F6 | 	mov	COUNT_, #4
21b18     A8 00 A0 FD | 	call	#pushregs_
21b1c     0D 1F 02 F6 | 	mov	local01, arg05
21b20     0F 19 02 FD | 	qmul	arg04, local01
21b24     09 21 02 F6 | 	mov	local02, arg01
21b28     0B 23 02 F6 | 	mov	local03, arg03
21b2c     00 14 0E F2 | 	cmp	arg02, #0 wz
21b30     01 14 86 51 |  if_ne	sub	arg02, #1
21b34     10 13 02 56 |  if_ne	mov	arg01, local02
21b38     00 16 06 56 |  if_ne	mov	arg03, #0
21b3c     18 24 62 FD | 	getqx	local04
21b40     78 42 B0 5D |  if_ne	call	#__system__lseek
21b44     11 15 02 F6 | 	mov	arg02, local03
21b48     12 17 02 F6 | 	mov	arg03, local04
21b4c     10 13 02 F6 | 	mov	arg01, local02
21b50     B4 41 B0 FD | 	call	#__system__write
21b54     FD 24 02 F6 | 	mov	local04, result1
21b58     01 24 56 F2 | 	cmps	local04, #1 wc
21b5c     10 00 90 CD |  if_b	jmp	#LR__2950
21b60     12 65 02 F6 | 	mov	muldiva_, local04
21b64     0F 67 02 F6 | 	mov	muldivb_, local01
21b68     BA 00 A0 FD | 	call	#divide_
21b6c     33 25 02 F6 | 	mov	local04, muldivb_
21b70                 | LR__2950
21b70     12 FB 01 F6 | 	mov	result1, local04
21b74     A7 F0 03 F6 | 	mov	ptra, fp
21b78     B2 00 A0 FD | 	call	#popregs_
21b7c                 | __system___basic_put_ret
21b7c     2D 00 64 FD | 	ret
21b80                 | 
21b80                 | __system___basic_get
21b80     04 4A 05 F6 | 	mov	COUNT_, #4
21b84     A8 00 A0 FD | 	call	#pushregs_
21b88     0D 1F 02 F6 | 	mov	local01, arg05
21b8c     0F 19 02 FD | 	qmul	arg04, local01
21b90     09 21 02 F6 | 	mov	local02, arg01
21b94     0B 23 02 F6 | 	mov	local03, arg03
21b98     00 14 0E F2 | 	cmp	arg02, #0 wz
21b9c     01 14 86 51 |  if_ne	sub	arg02, #1
21ba0     10 13 02 56 |  if_ne	mov	arg01, local02
21ba4     00 16 06 56 |  if_ne	mov	arg03, #0
21ba8     18 24 62 FD | 	getqx	local04
21bac     0C 42 B0 5D |  if_ne	call	#__system__lseek
21bb0     11 15 02 F6 | 	mov	arg02, local03
21bb4     12 17 02 F6 | 	mov	arg03, local04
21bb8     10 13 02 F6 | 	mov	arg01, local02
21bbc     84 41 B0 FD | 	call	#__system__read
21bc0     FD 24 02 F6 | 	mov	local04, result1
21bc4     01 24 56 F2 | 	cmps	local04, #1 wc
21bc8     10 00 90 CD |  if_b	jmp	#LR__2960
21bcc     12 65 02 F6 | 	mov	muldiva_, local04
21bd0     0F 67 02 F6 | 	mov	muldivb_, local01
21bd4     BA 00 A0 FD | 	call	#divide_
21bd8     33 25 02 F6 | 	mov	local04, muldivb_
21bdc                 | LR__2960
21bdc     12 FB 01 F6 | 	mov	result1, local04
21be0     A7 F0 03 F6 | 	mov	ptra, fp
21be4     B2 00 A0 FD | 	call	#popregs_
21be8                 | __system___basic_get_ret
21be8     2D 00 64 FD | 	ret
21bec                 | 
21bec                 | __system___fmtchar
21bec     00 4A 05 F6 | 	mov	COUNT_, #0
21bf0     A8 00 A0 FD | 	call	#pushregs_
21bf4     10 F0 07 F1 | 	add	ptra, #16
21bf8     04 4E 05 F1 | 	add	fp, #4
21bfc     A7 12 62 FC | 	wrlong	arg01, fp
21c00     04 4E 05 F1 | 	add	fp, #4
21c04     A7 14 62 FC | 	wrlong	arg02, fp
21c08     04 4E 05 F1 | 	add	fp, #4
21c0c     A7 16 62 FC | 	wrlong	arg03, fp
21c10     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
21c14     A7 16 62 FC | 	wrlong	arg03, fp
21c18     08 4E 85 F1 | 	sub	fp, #8
21c1c     A7 12 02 FB | 	rdlong	arg01, fp
21c20     04 4E 05 F1 | 	add	fp, #4
21c24     A7 14 02 FB | 	rdlong	arg02, fp
21c28     04 4E 05 F1 | 	add	fp, #4
21c2c     A7 16 02 F6 | 	mov	arg03, fp
21c30     0C 4E 85 F1 | 	sub	fp, #12
21c34     0C 00 B0 FD | 	call	#__system___fmtstr
21c38     A7 F0 03 F6 | 	mov	ptra, fp
21c3c     B2 00 A0 FD | 	call	#popregs_
21c40                 | __system___fmtchar_ret
21c40     2D 00 64 FD | 	ret
21c44                 | 
21c44                 | __system___fmtstr
21c44     09 4A 05 F6 | 	mov	COUNT_, #9
21c48     A8 00 A0 FD | 	call	#pushregs_
21c4c     09 1F 02 F6 | 	mov	local01, arg01
21c50     0A 21 02 F6 | 	mov	local02, arg02
21c54     0B 23 02 F6 | 	mov	local03, arg03
21c58     10 19 E2 F8 | 	getbyte	arg04, local02, #0
21c5c     11 13 02 F6 | 	mov	arg01, local03
21c60     09 25 02 F6 | 	mov	local04, arg01
21c64     97 06 48 FB | 	callpa	#(@LR__2971-@LR__2970)>>2,fcache_load_ptr_
21c68                 | LR__2970
21c68     12 FB C9 FA | 	rdbyte	result1, local04 wz
21c6c     01 24 06 51 |  if_ne	add	local04, #1
21c70     F4 FF 9F 5D |  if_ne	jmp	#LR__2970
21c74                 | LR__2971
21c74     09 25 82 F1 | 	sub	local04, arg01
21c78     00 18 0E F2 | 	cmp	arg04, #0 wz
21c7c     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
21c80     10 15 02 F6 | 	mov	arg02, local02
21c84     12 17 02 F6 | 	mov	arg03, local04
21c88     0F 13 02 F6 | 	mov	arg01, local01
21c8c     02 18 06 F6 | 	mov	arg04, #2
21c90     D4 46 B0 FD | 	call	#__system___fmtpad
21c94     FD 26 02 F6 | 	mov	local05, result1
21c98     00 26 56 F2 | 	cmps	local05, #0 wc
21c9c     13 FB 01 C6 |  if_b	mov	result1, local05
21ca0     80 00 90 CD |  if_b	jmp	#LR__2974
21ca4     01 24 56 F2 | 	cmps	local04, #1 wc
21ca8     50 00 90 CD |  if_b	jmp	#LR__2973
21cac     12 29 02 F6 | 	mov	local06, local04
21cb0                 | LR__2972
21cb0     0F 2B 02 F6 | 	mov	local07, local01
21cb4     0F 2D 02 F6 | 	mov	local08, local01
21cb8     13 2A 46 F7 | 	zerox	local07, #19
21cbc     14 2C 46 F0 | 	shr	local08, #20
21cc0     02 2C 66 F0 | 	shl	local08, #2
21cc4     ED 2C 02 F1 | 	add	local08, __methods__
21cc8     16 2D 02 FB | 	rdlong	local08, local08
21ccc     11 13 C2 FA | 	rdbyte	arg01, local03
21cd0     F2 2E 02 F6 | 	mov	local09, objptr
21cd4     15 E5 01 F6 | 	mov	objptr, local07
21cd8     01 22 06 F1 | 	add	local03, #1
21cdc     2D 2C 62 FD | 	call	local08
21ce0     17 E5 01 F6 | 	mov	objptr, local09
21ce4     FD 2E 02 F6 | 	mov	local09, result1
21ce8     00 2E 56 F2 | 	cmps	local09, #0 wc
21cec     17 FB 01 C6 |  if_b	mov	result1, local09
21cf0     30 00 90 CD |  if_b	jmp	#LR__2974
21cf4     17 27 02 F1 | 	add	local05, local09
21cf8     ED 29 6E FB | 	djnz	local06, #LR__2972
21cfc                 | LR__2973
21cfc     10 15 02 F6 | 	mov	arg02, local02
21d00     12 17 02 F6 | 	mov	arg03, local04
21d04     0F 13 02 F6 | 	mov	arg01, local01
21d08     01 18 06 F6 | 	mov	arg04, #1
21d0c     58 46 B0 FD | 	call	#__system___fmtpad
21d10     FD 2E 02 F6 | 	mov	local09, result1
21d14     00 2E 56 F2 | 	cmps	local09, #0 wc
21d18     17 FB 01 C6 |  if_b	mov	result1, local09
21d1c     17 27 02 31 |  if_ae	add	local05, local09
21d20     13 FB 01 36 |  if_ae	mov	result1, local05
21d24                 | LR__2974
21d24     A7 F0 03 F6 | 	mov	ptra, fp
21d28     B2 00 A0 FD | 	call	#popregs_
21d2c                 | __system___fmtstr_ret
21d2c     2D 00 64 FD | 	ret
21d30                 | 
21d30                 | __system___fmtnum
21d30     0B 4A 05 F6 | 	mov	COUNT_, #11
21d34     A8 00 A0 FD | 	call	#pushregs_
21d38     09 1F 02 F6 | 	mov	local01, arg01
21d3c     0A 21 02 F6 | 	mov	local02, arg02
21d40     0B 23 02 F6 | 	mov	local03, arg03
21d44     0C 25 02 F6 | 	mov	local04, arg04
21d48     F8 27 02 F6 | 	mov	local05, ptra
21d4c     13 29 02 F6 | 	mov	local06, local05
21d50     00 2A 06 F6 | 	mov	local07, #0
21d54     10 2D 02 F6 | 	mov	local08, local02
21d58     10 2C 46 F0 | 	shr	local08, #16
21d5c     3F 2C 06 F5 | 	and	local08, #63
21d60     10 2F E2 F8 | 	getbyte	local09, local02, #0
21d64     10 31 02 F6 | 	mov	local10, local02
21d68     1A 30 46 F0 | 	shr	local10, #26
21d6c     03 30 06 F5 | 	and	local10, #3
21d70     18 33 02 F6 | 	mov	local11, local10
21d74     01 2C 56 F2 | 	cmps	local08, #1 wc
21d78     44 F0 07 F1 | 	add	ptra, #68
21d7c     01 2C 86 31 |  if_ae	sub	local08, #1
21d80     41 2E 56 F2 | 	cmps	local09, #65 wc
21d84     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
21d88     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
21d8c     03 32 0E F2 | 	cmp	local11, #3 wz
21d90     00 32 06 A6 |  if_e	mov	local11, #0
21d94     00 22 56 52 |  if_ne	cmps	local03, #0 wc
21d98     04 32 06 46 |  if_c_and_nz	mov	local11, #4
21d9c     11 23 62 46 |  if_c_and_nz	neg	local03, local03
21da0     00 32 0E F2 | 	cmp	local11, #0 wz
21da4     4C 00 90 AD |  if_e	jmp	#LR__2983
21da8     01 2A 06 F6 | 	mov	local07, #1
21dac     17 2D 0A F2 | 	cmp	local08, local09 wz
21db0     18 00 90 5D |  if_ne	jmp	#LR__2981
21db4     05 2C 6E FB | 	djnz	local08, #LR__2980
21db8     0F 13 02 F6 | 	mov	arg01, local01
21dbc     10 15 02 F6 | 	mov	arg02, local02
21dc0     23 16 06 F6 | 	mov	arg03, #35
21dc4     24 FE BF FD | 	call	#__system___fmtchar
21dc8     88 00 90 FD | 	jmp	#LR__2987
21dcc                 | LR__2980
21dcc                 | LR__2981
21dcc     02 32 0E F2 | 	cmp	local11, #2 wz
21dd0     14 31 02 A6 |  if_e	mov	local10, local06
21dd4     01 28 06 A1 |  if_e	add	local06, #1
21dd8     18 41 48 AC |  if_e	wrbyte	#32, local10
21ddc     14 00 90 AD |  if_e	jmp	#LR__2982
21de0     04 32 0E F2 | 	cmp	local11, #4 wz
21de4     14 5B 48 AC |  if_e	wrbyte	#45, local06
21de8     01 28 06 A1 |  if_e	add	local06, #1
21dec     14 57 48 5C |  if_ne	wrbyte	#43, local06
21df0     01 28 06 51 |  if_ne	add	local06, #1
21df4                 | LR__2982
21df4                 | LR__2983
21df4     14 13 02 F6 | 	mov	arg01, local06
21df8     11 15 02 F6 | 	mov	arg02, local03
21dfc     12 17 02 F6 | 	mov	arg03, local04
21e00     16 19 02 F6 | 	mov	arg04, local08
21e04     00 1A 06 F6 | 	mov	arg05, #0
21e08     1D 20 2E F4 | 	testbn	local02, #29 wz
21e0c     01 1A 06 56 |  if_ne	mov	arg05, #1
21e10     1C 46 B0 FD | 	call	#__system___uitoa
21e14     FD 2A 02 F1 | 	add	local07, result1
21e18     17 2B 5A F2 | 	cmps	local07, local09 wcz
21e1c     24 00 90 ED |  if_be	jmp	#LR__2986
21e20     97 0E 48 FB | 	callpa	#(@LR__2985-@LR__2984)>>2,fcache_load_ptr_
21e24                 | LR__2984
21e24     17 31 02 F6 | 	mov	local10, local09
21e28     01 30 56 F2 | 	cmps	local10, #1 wc
21e2c     01 2E 86 F1 | 	sub	local09, #1
21e30     14 31 02 36 |  if_ae	mov	local10, local06
21e34     01 28 06 31 |  if_ae	add	local06, #1
21e38     18 47 48 3C |  if_ae	wrbyte	#35, local10
21e3c     E4 FF 9F 3D |  if_ae	jmp	#LR__2984
21e40                 | LR__2985
21e40     14 01 48 FC | 	wrbyte	#0, local06
21e44                 | LR__2986
21e44     0F 13 02 F6 | 	mov	arg01, local01
21e48     10 15 02 F6 | 	mov	arg02, local02
21e4c     13 17 02 F6 | 	mov	arg03, local05
21e50     F0 FD BF FD | 	call	#__system___fmtstr
21e54                 | LR__2987
21e54     A7 F0 03 F6 | 	mov	ptra, fp
21e58     B2 00 A0 FD | 	call	#popregs_
21e5c                 | __system___fmtnum_ret
21e5c     2D 00 64 FD | 	ret
21e60                 | 
21e60                 | __system___fmtfloat
21e60     10 4A 05 F6 | 	mov	COUNT_, #16
21e64     A8 00 A0 FD | 	call	#pushregs_
21e68     24 F1 07 F1 | 	add	ptra, #292
21e6c     04 4E 05 F1 | 	add	fp, #4
21e70     A7 12 62 FC | 	wrlong	arg01, fp
21e74     04 4E 05 F1 | 	add	fp, #4
21e78     A7 14 62 FC | 	wrlong	arg02, fp
21e7c     04 4E 05 F1 | 	add	fp, #4
21e80     A7 16 62 FC | 	wrlong	arg03, fp
21e84     04 4E 05 F1 | 	add	fp, #4
21e88     A7 18 62 FC | 	wrlong	arg04, fp
21e8c     0C 4E 05 F1 | 	add	fp, #12
21e90     A7 14 68 FC | 	wrlong	#10, fp
21e94     08 4E 05 F1 | 	add	fp, #8
21e98     A7 00 68 FC | 	wrlong	#0, fp
21e9c     08 4E 05 F1 | 	add	fp, #8
21ea0     A7 00 68 FC | 	wrlong	#0, fp
21ea4     08 4E 05 F1 | 	add	fp, #8
21ea8     A7 00 68 FC | 	wrlong	#0, fp
21eac     04 4E 05 F1 | 	add	fp, #4
21eb0     A7 04 68 FC | 	wrlong	#2, fp
21eb4     04 4E 05 F1 | 	add	fp, #4
21eb8     A7 00 68 FC | 	wrlong	#0, fp
21ebc     04 4E 05 F1 | 	add	fp, #4
21ec0     A7 00 68 FC | 	wrlong	#0, fp
21ec4     04 4E 05 F1 | 	add	fp, #4
21ec8     A7 00 68 FC | 	wrlong	#0, fp
21ecc     04 4E 05 F1 | 	add	fp, #4
21ed0     A7 00 68 FC | 	wrlong	#0, fp
21ed4     18 4E 05 F1 | 	add	fp, #24
21ed8     A7 00 68 FC | 	wrlong	#0, fp
21edc     68 4E 05 F1 | 	add	fp, #104
21ee0     A7 1E 02 F6 | 	mov	local01, fp
21ee4     08 4E 85 F1 | 	sub	fp, #8
21ee8     A7 1E 62 FC | 	wrlong	local01, fp
21eec     04 4E 05 F1 | 	add	fp, #4
21ef0     A7 1E 62 FC | 	wrlong	local01, fp
21ef4     BC 4E 85 F1 | 	sub	fp, #188
21ef8     A7 1E 02 FB | 	rdlong	local01, fp
21efc     10 1E 46 F0 | 	shr	local01, #16
21f00     3F 1E 06 F5 | 	and	local01, #63
21f04     B0 4E 05 F1 | 	add	fp, #176
21f08     A7 1E 62 FC | 	wrlong	local01, fp
21f0c     B0 4E 85 F1 | 	sub	fp, #176
21f10     A7 1E 02 FB | 	rdlong	local01, fp
21f14     1C 1E 46 F0 | 	shr	local01, #28
21f18     01 1E 06 F5 | 	and	local01, #1
21f1c     08 4F 05 F1 | 	add	fp, #264
21f20     A7 1E 62 FC | 	wrlong	local01, fp
21f24     58 4E 85 F1 | 	sub	fp, #88
21f28     A7 1E 0A FB | 	rdlong	local01, fp wz
21f2c     B8 4E 85 F1 | 	sub	fp, #184
21f30     3C 00 90 5D |  if_ne	jmp	#LR__2991
21f34     10 4E 05 F1 | 	add	fp, #16
21f38     A7 1E 02 FB | 	rdlong	local01, fp
21f3c     10 4E 85 F1 | 	sub	fp, #16
21f40     61 1E 0E F2 | 	cmp	local01, #97 wz
21f44     18 00 90 5D |  if_ne	jmp	#LR__2990
21f48     B8 4E 05 F1 | 	add	fp, #184
21f4c     A7 1A 68 FC | 	wrlong	#13, fp
21f50     84 4E 85 F1 | 	sub	fp, #132
21f54     A7 02 68 FC | 	wrlong	#1, fp
21f58     34 4E 85 F1 | 	sub	fp, #52
21f5c     24 00 90 FD | 	jmp	#LR__2992
21f60                 | LR__2990
21f60     B8 4E 05 F1 | 	add	fp, #184
21f64     A7 0C 68 FC | 	wrlong	#6, fp
21f68     B8 4E 85 F1 | 	sub	fp, #184
21f6c     14 00 90 FD | 	jmp	#LR__2992
21f70                 | LR__2991
21f70     B8 4E 05 F1 | 	add	fp, #184
21f74     A7 1E 02 FB | 	rdlong	local01, fp
21f78     01 1E 86 F1 | 	sub	local01, #1
21f7c     A7 1E 62 FC | 	wrlong	local01, fp
21f80     B8 4E 85 F1 | 	sub	fp, #184
21f84                 | LR__2992
21f84     08 4E 05 F1 | 	add	fp, #8
21f88     A7 1E 02 FB | 	rdlong	local01, fp
21f8c     16 1E 46 F0 | 	shr	local01, #22
21f90     03 1E 06 F5 | 	and	local01, #3
21f94     04 4F 05 F1 | 	add	fp, #260
21f98     A7 1E 62 FC | 	wrlong	local01, fp
21f9c     04 4F 85 F1 | 	sub	fp, #260
21fa0     A7 1E 02 FB | 	rdlong	local01, fp
21fa4     1D 1E 46 F0 | 	shr	local01, #29
21fa8     01 1E 06 F5 | 	and	local01, #1
21fac     B4 4E 05 F1 | 	add	fp, #180
21fb0     A7 1E 62 FC | 	wrlong	local01, fp
21fb4     B4 4E 85 F1 | 	sub	fp, #180
21fb8     A7 1E 02 FB | 	rdlong	local01, fp
21fbc     0F 1F EA F8 | 	getbyte	local01, local01, #1
21fc0     60 4E 05 F1 | 	add	fp, #96
21fc4     A7 1E 62 FC | 	wrlong	local01, fp
21fc8     60 4E 85 F1 | 	sub	fp, #96
21fcc     A7 1E 02 FB | 	rdlong	local01, fp
21fd0     0F 1F E2 F8 | 	getbyte	local01, local01, #0
21fd4     64 4E 05 F1 | 	add	fp, #100
21fd8     A7 1E 62 FC | 	wrlong	local01, fp
21fdc     00 1E 06 F6 | 	mov	local01, #0
21fe0     5C 4E 85 F1 | 	sub	fp, #92
21fe4     A7 1A 02 FB | 	rdlong	arg05, fp
21fe8     65 1A 0E F2 | 	cmp	arg05, #101 wz
21fec     01 1E 06 A6 |  if_e	mov	local01, #1
21ff0     14 4E 05 F1 | 	add	fp, #20
21ff4     A7 1E 62 FC | 	wrlong	local01, fp
21ff8     98 4E 05 F1 | 	add	fp, #152
21ffc     A7 20 0A FB | 	rdlong	local02, fp wz
22000     45 1E 06 56 |  if_ne	mov	local01, #69
22004     65 1E 06 A6 |  if_e	mov	local01, #101
22008     8C 4E 85 F1 | 	sub	fp, #140
2200c     A7 1E 62 FC | 	wrlong	local01, fp
22010     20 4E 85 F1 | 	sub	fp, #32
22014     A7 1E 02 FB | 	rdlong	local01, fp
22018     10 4E 85 F1 | 	sub	fp, #16
2201c     61 1E 0E F2 | 	cmp	local01, #97 wz
22020     4C 00 90 5D |  if_ne	jmp	#LR__2993
22024     24 4E 05 F1 | 	add	fp, #36
22028     A7 02 68 FC | 	wrlong	#1, fp
2202c     98 4E 05 F1 | 	add	fp, #152
22030     A7 20 0A FB | 	rdlong	local02, fp wz
22034     50 1E 06 56 |  if_ne	mov	local01, #80
22038     70 1E 06 A6 |  if_e	mov	local01, #112
2203c     8C 4E 85 F1 | 	sub	fp, #140
22040     A7 1E 62 FC | 	wrlong	local01, fp
22044     14 4E 85 F1 | 	sub	fp, #20
22048     A7 04 68 FC | 	wrlong	#2, fp
2204c     1C 4E 05 F1 | 	add	fp, #28
22050     A7 02 68 FC | 	wrlong	#1, fp
22054     84 4E 05 F1 | 	add	fp, #132
22058     A7 20 0A FB | 	rdlong	local02, fp wz
2205c     58 1E 06 56 |  if_ne	mov	local01, #88
22060     78 1E 06 A6 |  if_e	mov	local01, #120
22064     7C 4E 85 F1 | 	sub	fp, #124
22068     A7 1E 62 FC | 	wrlong	local01, fp
2206c     40 4E 85 F1 | 	sub	fp, #64
22070                 | LR__2993
22070     10 4E 05 F1 | 	add	fp, #16
22074     A7 1E 02 FB | 	rdlong	local01, fp
22078     10 4E 85 F1 | 	sub	fp, #16
2207c     23 1E 0E F2 | 	cmp	local01, #35 wz
22080     3C 00 90 5D |  if_ne	jmp	#LR__2996
22084     48 4E 05 F1 | 	add	fp, #72
22088     A7 02 68 FC | 	wrlong	#1, fp
2208c     C8 4E 05 F1 | 	add	fp, #200
22090     A7 1E 0A FB | 	rdlong	local01, fp wz
22094     10 4F 85 F1 | 	sub	fp, #272
22098     18 00 90 AD |  if_e	jmp	#LR__2994
2209c     10 4E 05 F1 | 	add	fp, #16
220a0     A7 CC 68 FC | 	wrlong	#102, fp
220a4     00 4F 05 F1 | 	add	fp, #256
220a8     A7 00 68 FC | 	wrlong	#0, fp
220ac     10 4F 85 F1 | 	sub	fp, #272
220b0     0C 00 90 FD | 	jmp	#LR__2995
220b4                 | LR__2994
220b4     10 4F 05 F1 | 	add	fp, #272
220b8     A7 02 68 FC | 	wrlong	#1, fp
220bc     10 4F 85 F1 | 	sub	fp, #272
220c0                 | LR__2995
220c0                 | LR__2996
220c0     08 4E 05 F1 | 	add	fp, #8
220c4     A7 1E 02 FB | 	rdlong	local01, fp
220c8     1A 1E 46 F0 | 	shr	local01, #26
220cc     03 1E 06 F5 | 	and	local01, #3
220d0     5C 4E 05 F1 | 	add	fp, #92
220d4     A7 1E 62 FC | 	wrlong	local01, fp
220d8     58 4E 85 F1 | 	sub	fp, #88
220dc     A7 FA 01 FB | 	rdlong	result1, fp
220e0     0C 4E 85 F1 | 	sub	fp, #12
220e4     1F FA 4D F0 | 	shr	result1, #31 wz
220e8     20 00 90 AD |  if_e	jmp	#LR__2997
220ec     2C 4E 05 F1 | 	add	fp, #44
220f0     A7 5A 68 FC | 	wrlong	#45, fp
220f4     20 4E 85 F1 | 	sub	fp, #32
220f8     A7 FA 01 FB | 	rdlong	result1, fp
220fc     1F FA E5 F4 | 	bitnot	result1, #31
22100     A7 FA 61 FC | 	wrlong	result1, fp
22104     0C 4E 85 F1 | 	sub	fp, #12
22108     3C 00 90 FD | 	jmp	#LR__2999
2210c                 | LR__2997
2210c     64 4E 05 F1 | 	add	fp, #100
22110     A7 1E 02 FB | 	rdlong	local01, fp
22114     64 4E 85 F1 | 	sub	fp, #100
22118     01 1E 0E F2 | 	cmp	local01, #1 wz
2211c     2C 4E 05 A1 |  if_e	add	fp, #44
22120     A7 56 68 AC |  if_e	wrlong	#43, fp
22124     2C 4E 85 A1 |  if_e	sub	fp, #44
22128     1C 00 90 AD |  if_e	jmp	#LR__2998
2212c     64 4E 05 F1 | 	add	fp, #100
22130     A7 1E 02 FB | 	rdlong	local01, fp
22134     64 4E 85 F1 | 	sub	fp, #100
22138     02 1E 0E F2 | 	cmp	local01, #2 wz
2213c     2C 4E 05 A1 |  if_e	add	fp, #44
22140     A7 40 68 AC |  if_e	wrlong	#32, fp
22144     2C 4E 85 A1 |  if_e	sub	fp, #44
22148                 | LR__2998
22148                 | LR__2999
22148     08 4E 05 F1 | 	add	fp, #8
2214c     A7 1E 02 FB | 	rdlong	local01, fp
22150     18 1E 46 F0 | 	shr	local01, #24
22154     03 1E 06 F5 | 	and	local01, #3
22158     3C 4E 05 F1 | 	add	fp, #60
2215c     A7 1E 62 FC | 	wrlong	local01, fp
22160     00 1E 06 F6 | 	mov	local01, #0
22164     18 4E 85 F1 | 	sub	fp, #24
22168     A7 22 0A FB | 	rdlong	local03, fp wz
2216c     2C 4E 85 F1 | 	sub	fp, #44
22170     18 00 90 5D |  if_ne	jmp	#LR__3000
22174     1C 4E 05 F1 | 	add	fp, #28
22178     A7 24 02 FB | 	rdlong	local04, fp
2217c     1C 4E 85 F1 | 	sub	fp, #28
22180     12 27 02 F6 | 	mov	local05, local04
22184     0A 26 0E F2 | 	cmp	local05, #10 wz
22188     04 00 90 AD |  if_e	jmp	#LR__3001
2218c                 | LR__3000
2218c     01 1E 66 F5 | 	xor	local01, #1
22190                 | LR__3001
22190     3C 4E 05 F1 | 	add	fp, #60
22194     A7 1E 62 FC | 	wrlong	local01, fp
22198     3C 4E 85 F1 | 	sub	fp, #60
2219c     00 1E 0E F2 | 	cmp	local01, #0 wz
221a0     0C 01 90 AD |  if_e	jmp	#LR__3003
221a4     44 4E 05 F1 | 	add	fp, #68
221a8     A7 26 02 FB | 	rdlong	local05, fp
221ac     44 4E 85 F1 | 	sub	fp, #68
221b0     13 23 02 F6 | 	mov	local03, local05
221b4     02 22 0E F2 | 	cmp	local03, #2 wz
221b8     F4 00 90 5D |  if_ne	jmp	#LR__3003
221bc     0C 4F 05 F1 | 	add	fp, #268
221c0     A7 28 02 FB | 	rdlong	local06, fp
221c4     0C 4F 85 F1 | 	sub	fp, #268
221c8     14 25 02 F6 | 	mov	local04, local06
221cc     02 24 0E F2 | 	cmp	local04, #2 wz
221d0     DC 00 90 AD |  if_e	jmp	#LR__3003
221d4     C0 4E 05 F1 | 	add	fp, #192
221d8     A7 12 02 FB | 	rdlong	arg01, fp
221dc     94 4E 85 F1 | 	sub	fp, #148
221e0     A7 14 02 FB | 	rdlong	arg02, fp
221e4     14 4E 05 F1 | 	add	fp, #20
221e8     A7 16 02 FB | 	rdlong	arg03, fp
221ec     40 4E 85 F1 | 	sub	fp, #64
221f0     A4 44 B0 FD | 	call	#__system__emitsign_0500
221f4     14 4F 05 F1 | 	add	fp, #276
221f8     A7 FA 61 FC | 	wrlong	result1, fp
221fc     14 4F 85 F1 | 	sub	fp, #276
22200     00 FA 55 F2 | 	cmps	result1, #0 wc
22204     14 4F 05 C1 |  if_b	add	fp, #276
22208     A7 FA 01 CB |  if_b	rdlong	result1, fp
2220c     14 4F 85 C1 |  if_b	sub	fp, #276
22210     6C 0B 90 CD |  if_b	jmp	#LR__3053
22214     C0 4E 05 F1 | 	add	fp, #192
22218     A7 1E 02 FB | 	rdlong	local01, fp
2221c     54 4E 05 F1 | 	add	fp, #84
22220     A7 26 02 FB | 	rdlong	local05, fp
22224     13 23 02 F6 | 	mov	local03, local05
22228     13 1F 02 F1 | 	add	local01, local05
2222c     54 4E 85 F1 | 	sub	fp, #84
22230     A7 1E 62 FC | 	wrlong	local01, fp
22234     58 4E 85 F1 | 	sub	fp, #88
22238     A7 1E 0A FB | 	rdlong	local01, fp wz
2223c     68 4E 85 F1 | 	sub	fp, #104
22240     60 00 90 AD |  if_e	jmp	#LR__3002
22244     68 4E 05 F1 | 	add	fp, #104
22248     A7 1E 02 FB | 	rdlong	local01, fp
2224c     AC 4E 05 F1 | 	add	fp, #172
22250     A7 22 02 FB | 	rdlong	local03, fp
22254     11 1F 82 F1 | 	sub	local01, local03
22258     AC 4E 85 F1 | 	sub	fp, #172
2225c     A7 1E 62 FC | 	wrlong	local01, fp
22260     68 4E 85 F1 | 	sub	fp, #104
22264     00 1E 56 F2 | 	cmps	local01, #0 wc
22268     68 4E 05 C1 |  if_b	add	fp, #104
2226c     A7 00 68 CC |  if_b	wrlong	#0, fp
22270     68 4E 85 C1 |  if_b	sub	fp, #104
22274     08 4E 05 F1 | 	add	fp, #8
22278     A7 1E 02 FB | 	rdlong	local01, fp
2227c     E8 1E 06 F4 | 	bitl	local01, #232
22280     A7 1E 62 FC | 	wrlong	local01, fp
22284     60 4E 05 F1 | 	add	fp, #96
22288     A7 26 02 FB | 	rdlong	local05, fp
2228c     13 23 02 F6 | 	mov	local03, local05
22290     08 22 66 F0 | 	shl	local03, #8
22294     11 1F 42 F5 | 	or	local01, local03
22298     60 4E 85 F1 | 	sub	fp, #96
2229c     A7 1E 62 FC | 	wrlong	local01, fp
222a0     08 4E 85 F1 | 	sub	fp, #8
222a4                 | LR__3002
222a4     3C 4E 05 F1 | 	add	fp, #60
222a8     A7 00 68 FC | 	wrlong	#0, fp
222ac     3C 4E 85 F1 | 	sub	fp, #60
222b0                 | LR__3003
222b0     0C 4E 05 F1 | 	add	fp, #12
222b4     A7 12 02 FB | 	rdlong	arg01, fp
222b8     0C 4E 85 F1 | 	sub	fp, #12
222bc     04 1F B0 FD | 	call	#__system____builtin_ilogb
222c0     FF FF 3F FF 
222c4     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
222c8     50 00 90 5D |  if_ne	jmp	#LR__3005
222cc     2C 4E 05 F1 | 	add	fp, #44
222d0     A7 1E 0A FB | 	rdlong	local01, fp wz
222d4     2C 4E 85 F1 | 	sub	fp, #44
222d8     24 00 90 AD |  if_e	jmp	#LR__3004
222dc     C0 4E 05 F1 | 	add	fp, #192
222e0     A7 20 02 FB | 	rdlong	local02, fp
222e4     10 23 02 F6 | 	mov	local03, local02
222e8     01 22 06 F1 | 	add	local03, #1
222ec     A7 22 62 FC | 	wrlong	local03, fp
222f0     94 4E 85 F1 | 	sub	fp, #148
222f4     A7 24 02 FB | 	rdlong	local04, fp
222f8     2C 4E 85 F1 | 	sub	fp, #44
222fc     10 25 42 FC | 	wrbyte	local04, local02
22300                 | LR__3004
22300     C0 4E 05 F1 | 	add	fp, #192
22304     A7 12 02 FB | 	rdlong	arg01, fp
22308     C0 4E 85 F1 | 	sub	fp, #192
2230c     82 01 00 FF 
22310     36 15 06 F6 | 	mov	arg02, ##@LR__4961
22314     AC E9 BF FD | 	call	#__system____builtin_strcpy
22318     A4 08 90 FD | 	jmp	#LR__3041
2231c                 | LR__3005
2231c     0C 4E 05 F1 | 	add	fp, #12
22320     A7 20 02 FB | 	rdlong	local02, fp
22324     0C 4E 85 F1 | 	sub	fp, #12
22328     10 13 02 F6 | 	mov	arg01, local02
2232c     94 1E B0 FD | 	call	#__system____builtin_ilogb
22330     00 00 40 FF 
22334     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
22338     50 00 90 5D |  if_ne	jmp	#LR__3007
2233c     2C 4E 05 F1 | 	add	fp, #44
22340     A7 1E 0A FB | 	rdlong	local01, fp wz
22344     2C 4E 85 F1 | 	sub	fp, #44
22348     24 00 90 AD |  if_e	jmp	#LR__3006
2234c     C0 4E 05 F1 | 	add	fp, #192
22350     A7 20 02 FB | 	rdlong	local02, fp
22354     10 23 02 F6 | 	mov	local03, local02
22358     01 22 06 F1 | 	add	local03, #1
2235c     A7 22 62 FC | 	wrlong	local03, fp
22360     94 4E 85 F1 | 	sub	fp, #148
22364     A7 24 02 FB | 	rdlong	local04, fp
22368     2C 4E 85 F1 | 	sub	fp, #44
2236c     10 25 42 FC | 	wrbyte	local04, local02
22370                 | LR__3006
22370     C0 4E 05 F1 | 	add	fp, #192
22374     A7 12 02 FB | 	rdlong	arg01, fp
22378     C0 4E 85 F1 | 	sub	fp, #192
2237c     82 01 00 FF 
22380     3A 15 06 F6 | 	mov	arg02, ##@LR__4962
22384     3C E9 BF FD | 	call	#__system____builtin_strcpy
22388     34 08 90 FD | 	jmp	#LR__3041
2238c                 | LR__3007
2238c     10 4E 05 F1 | 	add	fp, #16
22390     A7 1E 02 FB | 	rdlong	local01, fp
22394     10 4E 85 F1 | 	sub	fp, #16
22398     67 1E 0E F2 | 	cmp	local01, #103 wz
2239c     10 4E 05 51 |  if_ne	add	fp, #16
223a0     A7 22 02 5B |  if_ne	rdlong	local03, fp
223a4     10 4E 85 51 |  if_ne	sub	fp, #16
223a8     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
223ac     94 01 90 5D |  if_ne	jmp	#LR__3012
223b0     0C 4E 05 F1 | 	add	fp, #12
223b4     A7 12 02 FB | 	rdlong	arg01, fp
223b8     08 4E 05 F1 | 	add	fp, #8
223bc     A7 14 02 F6 | 	mov	arg02, fp
223c0     0C 4E 05 F1 | 	add	fp, #12
223c4     A7 16 02 F6 | 	mov	arg03, fp
223c8     98 4E 05 F1 | 	add	fp, #152
223cc     A7 18 02 FB | 	rdlong	arg04, fp
223d0     9C 4E 85 F1 | 	sub	fp, #156
223d4     A7 1A 02 FB | 	rdlong	arg05, fp
223d8     1C 4E 85 F1 | 	sub	fp, #28
223dc     C4 40 B0 FD | 	call	#__system__disassemble_0498
223e0     10 4E 05 F1 | 	add	fp, #16
223e4     A7 1E 02 FB | 	rdlong	local01, fp
223e8     10 4E 85 F1 | 	sub	fp, #16
223ec     23 1E 0E F2 | 	cmp	local01, #35 wz
223f0     A0 00 90 5D |  if_ne	jmp	#LR__3009
223f4     20 4E 05 F1 | 	add	fp, #32
223f8     A7 1E 02 FB | 	rdlong	local01, fp
223fc     98 4E 05 F1 | 	add	fp, #152
22400     A7 22 02 FB | 	rdlong	local03, fp
22404     B8 4E 85 F1 | 	sub	fp, #184
22408     11 1F 5A F2 | 	cmps	local01, local03 wcz
2240c     24 4E 05 11 |  if_a	add	fp, #36
22410     A7 02 68 1C |  if_a	wrlong	#1, fp
22414     24 4E 85 11 |  if_a	sub	fp, #36
22418     A4 01 90 1D |  if_a	jmp	#LR__3015
2241c     20 4E 05 F1 | 	add	fp, #32
22420     A7 1E 02 FB | 	rdlong	local01, fp
22424     20 4E 85 F1 | 	sub	fp, #32
22428     00 1E 56 F2 | 	cmps	local01, #0 wc
2242c     2C 00 90 3D |  if_ae	jmp	#LR__3008
22430     B8 4E 05 F1 | 	add	fp, #184
22434     A7 1E 02 FB | 	rdlong	local01, fp
22438     0F 1F 62 F6 | 	neg	local01, local01
2243c     98 4E 85 F1 | 	sub	fp, #152
22440     A7 22 02 FB | 	rdlong	local03, fp
22444     20 4E 85 F1 | 	sub	fp, #32
22448     0F 23 5A F2 | 	cmps	local03, local01 wcz
2244c     24 4E 05 E1 |  if_be	add	fp, #36
22450     A7 02 68 EC |  if_be	wrlong	#1, fp
22454     24 4E 85 E1 |  if_be	sub	fp, #36
22458     64 01 90 FD | 	jmp	#LR__3015
2245c                 | LR__3008
2245c     20 4E 05 F1 | 	add	fp, #32
22460     A7 1E 02 FB | 	rdlong	local01, fp
22464     20 4E 85 F1 | 	sub	fp, #32
22468     01 1E 56 F2 | 	cmps	local01, #1 wc
2246c     50 01 90 CD |  if_b	jmp	#LR__3015
22470     B8 4E 05 F1 | 	add	fp, #184
22474     A7 1E 02 FB | 	rdlong	local01, fp
22478     98 4E 85 F1 | 	sub	fp, #152
2247c     A7 22 02 FB | 	rdlong	local03, fp
22480     11 1F 82 F1 | 	sub	local01, local03
22484     98 4E 05 F1 | 	add	fp, #152
22488     A7 1E 62 FC | 	wrlong	local01, fp
2248c     B8 4E 85 F1 | 	sub	fp, #184
22490     2C 01 90 FD | 	jmp	#LR__3015
22494                 | LR__3009
22494     00 1E 06 F6 | 	mov	local01, #0
22498     08 4E 05 F1 | 	add	fp, #8
2249c     A7 20 02 FB | 	rdlong	local02, fp
224a0     1C 20 46 F0 | 	shr	local02, #28
224a4     01 20 0E F5 | 	and	local02, #1 wz
224a8     01 1E 06 A6 |  if_e	mov	local01, #1
224ac     2C 4E 05 F1 | 	add	fp, #44
224b0     A7 1E 62 FC | 	wrlong	local01, fp
224b4     14 4E 85 F1 | 	sub	fp, #20
224b8     A7 1E 02 FB | 	rdlong	local01, fp
224bc     98 4E 05 F1 | 	add	fp, #152
224c0     A7 22 02 FB | 	rdlong	local03, fp
224c4     B8 4E 85 F1 | 	sub	fp, #184
224c8     11 1F 52 F2 | 	cmps	local01, local03 wc
224cc     18 00 90 3D |  if_ae	jmp	#LR__3010
224d0     20 4E 05 F1 | 	add	fp, #32
224d4     A7 24 02 FB | 	rdlong	local04, fp
224d8     20 4E 85 F1 | 	sub	fp, #32
224dc     FF FF 7F FF 
224e0     FC 25 56 F2 | 	cmps	local04, ##-4 wc
224e4     10 00 90 3D |  if_ae	jmp	#LR__3011
224e8                 | LR__3010
224e8     24 4E 05 F1 | 	add	fp, #36
224ec     A7 02 68 FC | 	wrlong	#1, fp
224f0     24 4E 85 F1 | 	sub	fp, #36
224f4     C8 00 90 FD | 	jmp	#LR__3015
224f8                 | LR__3011
224f8     B8 4E 05 F1 | 	add	fp, #184
224fc     A7 24 02 FB | 	rdlong	local04, fp
22500     98 4E 85 F1 | 	sub	fp, #152
22504     A7 22 02 FB | 	rdlong	local03, fp
22508     11 25 82 F1 | 	sub	local04, local03
2250c     98 4E 05 F1 | 	add	fp, #152
22510     A7 24 62 FC | 	wrlong	local04, fp
22514     AC 4E 85 F1 | 	sub	fp, #172
22518     A7 12 02 FB | 	rdlong	arg01, fp
2251c     08 4E 05 F1 | 	add	fp, #8
22520     A7 14 02 F6 | 	mov	arg02, fp
22524     0C 4E 05 F1 | 	add	fp, #12
22528     A7 16 02 F6 | 	mov	arg03, fp
2252c     12 19 62 F6 | 	neg	arg04, local04
22530     04 4E 85 F1 | 	sub	fp, #4
22534     A7 1A 02 FB | 	rdlong	arg05, fp
22538     1C 4E 85 F1 | 	sub	fp, #28
2253c     64 3F B0 FD | 	call	#__system__disassemble_0498
22540     7C 00 90 FD | 	jmp	#LR__3015
22544                 | LR__3012
22544     24 4E 05 F1 | 	add	fp, #36
22548     A7 1E 0A FB | 	rdlong	local01, fp wz
2254c     24 4E 85 F1 | 	sub	fp, #36
22550     34 00 90 AD |  if_e	jmp	#LR__3013
22554     0C 4E 05 F1 | 	add	fp, #12
22558     A7 12 02 FB | 	rdlong	arg01, fp
2255c     08 4E 05 F1 | 	add	fp, #8
22560     A7 14 02 F6 | 	mov	arg02, fp
22564     0C 4E 05 F1 | 	add	fp, #12
22568     A7 16 02 F6 | 	mov	arg03, fp
2256c     98 4E 05 F1 | 	add	fp, #152
22570     A7 18 02 FB | 	rdlong	arg04, fp
22574     9C 4E 85 F1 | 	sub	fp, #156
22578     A7 1A 02 FB | 	rdlong	arg05, fp
2257c     1C 4E 85 F1 | 	sub	fp, #28
22580     20 3F B0 FD | 	call	#__system__disassemble_0498
22584     38 00 90 FD | 	jmp	#LR__3014
22588                 | LR__3013
22588     0C 4E 05 F1 | 	add	fp, #12
2258c     A7 12 02 FB | 	rdlong	arg01, fp
22590     08 4E 05 F1 | 	add	fp, #8
22594     A7 14 02 F6 | 	mov	arg02, fp
22598     0C 4E 05 F1 | 	add	fp, #12
2259c     A7 16 02 F6 | 	mov	arg03, fp
225a0     98 4E 05 F1 | 	add	fp, #152
225a4     A7 24 02 FB | 	rdlong	local04, fp
225a8     01 24 06 F1 | 	add	local04, #1
225ac     12 19 62 F6 | 	neg	arg04, local04
225b0     9C 4E 85 F1 | 	sub	fp, #156
225b4     A7 1A 02 FB | 	rdlong	arg05, fp
225b8     1C 4E 85 F1 | 	sub	fp, #28
225bc     E4 3E B0 FD | 	call	#__system__disassemble_0498
225c0                 | LR__3014
225c0                 | LR__3015
225c0     1C 4E 05 F1 | 	add	fp, #28
225c4     A7 1E 02 FB | 	rdlong	local01, fp
225c8     1C 4E 85 F1 | 	sub	fp, #28
225cc     02 1E 0E F2 | 	cmp	local01, #2 wz
225d0     4C 00 90 5D |  if_ne	jmp	#LR__3018
225d4     1C 4E 05 F1 | 	add	fp, #28
225d8     A7 20 68 FC | 	wrlong	#16, fp
225dc     1C 4E 85 F1 | 	sub	fp, #28
225e0                 | LR__3016
225e0     14 4E 05 F1 | 	add	fp, #20
225e4     A7 1E 0A FB | 	rdlong	local01, fp wz
225e8     14 4E 85 F1 | 	sub	fp, #20
225ec     30 00 90 AD |  if_e	jmp	#LR__3017
225f0     14 4E 05 F1 | 	add	fp, #20
225f4     A7 22 02 FB | 	rdlong	local03, fp
225f8     14 4E 85 F1 | 	sub	fp, #20
225fc     00 80 00 FF 
22600     00 22 16 F2 | 	cmp	local03, ##16777216 wc
22604     18 00 90 3D |  if_ae	jmp	#LR__3017
22608     14 4E 05 F1 | 	add	fp, #20
2260c     A7 1E 02 FB | 	rdlong	local01, fp
22610     01 1E 66 F0 | 	shl	local01, #1
22614     A7 1E 62 FC | 	wrlong	local01, fp
22618     14 4E 85 F1 | 	sub	fp, #20
2261c     C0 FF 9F FD | 	jmp	#LR__3016
22620                 | LR__3017
22620                 | LR__3018
22620     70 4E 05 F1 | 	add	fp, #112
22624     A7 12 02 F6 | 	mov	arg01, fp
22628     5C 4E 85 F1 | 	sub	fp, #92
2262c     A7 14 02 FB | 	rdlong	arg02, fp
22630     08 4E 05 F1 | 	add	fp, #8
22634     A7 16 02 FB | 	rdlong	arg03, fp
22638     A0 4E 05 F1 | 	add	fp, #160
2263c     A7 1A 02 FB | 	rdlong	arg05, fp
22640     BC 4E 85 F1 | 	sub	fp, #188
22644     01 18 06 F6 | 	mov	arg04, #1
22648     E4 3D B0 FD | 	call	#__system___uitoa
2264c     58 4E 05 F1 | 	add	fp, #88
22650     A7 FA 61 FC | 	wrlong	result1, fp
22654     38 4E 85 F1 | 	sub	fp, #56
22658     A7 1E 02 FB | 	rdlong	local01, fp
2265c     20 4E 85 F1 | 	sub	fp, #32
22660     00 1E 56 F2 | 	cmps	local01, #0 wc
22664     50 00 90 3D |  if_ae	jmp	#LR__3019
22668     60 4E 05 F1 | 	add	fp, #96
2266c     A7 5A 68 FC | 	wrlong	#45, fp
22670     50 4E 05 F1 | 	add	fp, #80
22674     A7 12 02 F6 | 	mov	arg01, fp
22678     90 4E 85 F1 | 	sub	fp, #144
2267c     A7 22 02 FB | 	rdlong	local03, fp
22680     11 15 62 F6 | 	neg	arg02, local03
22684     18 4E 05 F1 | 	add	fp, #24
22688     A7 18 02 FB | 	rdlong	arg04, fp
2268c     84 4E 05 F1 | 	add	fp, #132
22690     A7 28 02 FB | 	rdlong	local06, fp
22694     BC 4E 85 F1 | 	sub	fp, #188
22698     14 25 02 F6 | 	mov	local04, local06
2269c     0A 16 06 F6 | 	mov	arg03, #10
226a0     12 1B 02 F6 | 	mov	arg05, local04
226a4     88 3D B0 FD | 	call	#__system___uitoa
226a8     5C 4E 05 F1 | 	add	fp, #92
226ac     A7 FA 61 FC | 	wrlong	result1, fp
226b0     5C 4E 85 F1 | 	sub	fp, #92
226b4     48 00 90 FD | 	jmp	#LR__3020
226b8                 | LR__3019
226b8     60 4E 05 F1 | 	add	fp, #96
226bc     A7 56 68 FC | 	wrlong	#43, fp
226c0     50 4E 05 F1 | 	add	fp, #80
226c4     A7 12 02 F6 | 	mov	arg01, fp
226c8     90 4E 85 F1 | 	sub	fp, #144
226cc     A7 14 02 FB | 	rdlong	arg02, fp
226d0     18 4E 05 F1 | 	add	fp, #24
226d4     A7 18 02 FB | 	rdlong	arg04, fp
226d8     84 4E 05 F1 | 	add	fp, #132
226dc     A7 28 02 FB | 	rdlong	local06, fp
226e0     BC 4E 85 F1 | 	sub	fp, #188
226e4     14 25 02 F6 | 	mov	local04, local06
226e8     0A 16 06 F6 | 	mov	arg03, #10
226ec     12 1B 02 F6 | 	mov	arg05, local04
226f0     3C 3D B0 FD | 	call	#__system___uitoa
226f4     5C 4E 05 F1 | 	add	fp, #92
226f8     A7 FA 61 FC | 	wrlong	result1, fp
226fc     5C 4E 85 F1 | 	sub	fp, #92
22700                 | LR__3020
22700     24 4E 05 F1 | 	add	fp, #36
22704     A7 1E 0A FB | 	rdlong	local01, fp wz
22708     24 4E 85 F1 | 	sub	fp, #36
2270c     2C 00 90 AD |  if_e	jmp	#LR__3021
22710     50 4E 05 F1 | 	add	fp, #80
22714     A7 00 68 FC | 	wrlong	#0, fp
22718     04 4E 85 F1 | 	sub	fp, #4
2271c     A7 00 68 FC | 	wrlong	#0, fp
22720     6C 4E 05 F1 | 	add	fp, #108
22724     A7 1E 02 FB | 	rdlong	local01, fp
22728     01 1E 06 F1 | 	add	local01, #1
2272c     64 4E 85 F1 | 	sub	fp, #100
22730     A7 1E 62 FC | 	wrlong	local01, fp
22734     54 4E 85 F1 | 	sub	fp, #84
22738     88 00 90 FD | 	jmp	#LR__3024
2273c                 | LR__3021
2273c     20 4E 05 F1 | 	add	fp, #32
22740     A7 1E 02 FB | 	rdlong	local01, fp
22744     20 4E 85 F1 | 	sub	fp, #32
22748     00 1E 56 F2 | 	cmps	local01, #0 wc
2274c     40 00 90 3D |  if_ae	jmp	#LR__3022
22750     20 4E 05 F1 | 	add	fp, #32
22754     A7 20 02 FB | 	rdlong	local02, fp
22758     30 4E 05 F1 | 	add	fp, #48
2275c     A7 20 62 FC | 	wrlong	local02, fp
22760     04 4E 85 F1 | 	sub	fp, #4
22764     A7 20 62 FC | 	wrlong	local02, fp
22768     2C 4E 85 F1 | 	sub	fp, #44
2276c     A7 1E 02 FB | 	rdlong	local01, fp
22770     98 4E 05 F1 | 	add	fp, #152
22774     A7 22 02 FB | 	rdlong	local03, fp
22778     11 1F 02 F1 | 	add	local01, local03
2277c     01 1E 06 F1 | 	add	local01, #1
22780     64 4E 85 F1 | 	sub	fp, #100
22784     A7 1E 62 FC | 	wrlong	local01, fp
22788     54 4E 85 F1 | 	sub	fp, #84
2278c     34 00 90 FD | 	jmp	#LR__3023
22790                 | LR__3022
22790     4C 4E 05 F1 | 	add	fp, #76
22794     A7 00 68 FC | 	wrlong	#0, fp
22798     2C 4E 85 F1 | 	sub	fp, #44
2279c     A7 1E 02 FB | 	rdlong	local01, fp
227a0     30 4E 05 F1 | 	add	fp, #48
227a4     A7 1E 62 FC | 	wrlong	local01, fp
227a8     68 4E 05 F1 | 	add	fp, #104
227ac     A7 22 02 FB | 	rdlong	local03, fp
227b0     11 1F 02 F1 | 	add	local01, local03
227b4     01 1E 06 F1 | 	add	local01, #1
227b8     64 4E 85 F1 | 	sub	fp, #100
227bc     A7 1E 62 FC | 	wrlong	local01, fp
227c0     54 4E 85 F1 | 	sub	fp, #84
227c4                 | LR__3023
227c4                 | LR__3024
227c4     54 4E 05 F1 | 	add	fp, #84
227c8     A7 1E 02 FB | 	rdlong	local01, fp
227cc     08 4E 85 F1 | 	sub	fp, #8
227d0     A7 22 02 FB | 	rdlong	local03, fp
227d4     11 1F 82 F1 | 	sub	local01, local03
227d8     01 1E 06 F1 | 	add	local01, #1
227dc     24 4E 85 F1 | 	sub	fp, #36
227e0     A7 1E 62 FC | 	wrlong	local01, fp
227e4     04 4E 05 F1 | 	add	fp, #4
227e8     A7 1E 0A FB | 	rdlong	local01, fp wz
227ec     2C 4E 85 F1 | 	sub	fp, #44
227f0     28 4E 05 51 |  if_ne	add	fp, #40
227f4     A7 22 02 5B |  if_ne	rdlong	local03, fp
227f8     01 22 06 51 |  if_ne	add	local03, #1
227fc     A7 22 62 5C |  if_ne	wrlong	local03, fp
22800     28 4E 85 51 |  if_ne	sub	fp, #40
22804     1C 4E 05 F1 | 	add	fp, #28
22808     A7 1E 02 FB | 	rdlong	local01, fp
2280c     1C 4E 85 F1 | 	sub	fp, #28
22810     10 1E 0E F2 | 	cmp	local01, #16 wz
22814     28 4E 05 A1 |  if_e	add	fp, #40
22818     A7 1E 02 AB |  if_e	rdlong	local01, fp
2281c     02 1E 06 A1 |  if_e	add	local01, #2
22820     A7 1E 62 AC |  if_e	wrlong	local01, fp
22824     28 4E 85 A1 |  if_e	sub	fp, #40
22828     24 4E 05 F1 | 	add	fp, #36
2282c     A7 1E 0A FB | 	rdlong	local01, fp wz
22830     24 4E 85 F1 | 	sub	fp, #36
22834     28 00 90 AD |  if_e	jmp	#LR__3025
22838     28 4E 05 F1 | 	add	fp, #40
2283c     A7 1E 02 FB | 	rdlong	local01, fp
22840     02 22 06 F6 | 	mov	local03, #2
22844     34 4E 05 F1 | 	add	fp, #52
22848     A7 26 02 FB | 	rdlong	local05, fp
2284c     13 23 02 F1 | 	add	local03, local05
22850     11 1F 02 F1 | 	add	local01, local03
22854     34 4E 85 F1 | 	sub	fp, #52
22858     A7 1E 62 FC | 	wrlong	local01, fp
2285c     28 4E 85 F1 | 	sub	fp, #40
22860                 | LR__3025
22860     28 4E 05 F1 | 	add	fp, #40
22864     A7 1E 02 FB | 	rdlong	local01, fp
22868     28 4E 85 F1 | 	sub	fp, #40
2286c     41 1E 56 F2 | 	cmps	local01, #65 wc
22870     01 FA 65 36 |  if_ae	neg	result1, #1
22874     08 05 90 3D |  if_ae	jmp	#LR__3053
22878     3C 4E 05 F1 | 	add	fp, #60
2287c     A7 1E 0A FB | 	rdlong	local01, fp wz
22880     3C 4E 85 F1 | 	sub	fp, #60
22884     60 00 90 AD |  if_e	jmp	#LR__3026
22888     C0 4E 05 F1 | 	add	fp, #192
2288c     A7 12 02 FB | 	rdlong	arg01, fp
22890     94 4E 85 F1 | 	sub	fp, #148
22894     A7 14 02 FB | 	rdlong	arg02, fp
22898     14 4E 05 F1 | 	add	fp, #20
2289c     A7 16 02 FB | 	rdlong	arg03, fp
228a0     40 4E 85 F1 | 	sub	fp, #64
228a4     F0 3D B0 FD | 	call	#__system__emitsign_0500
228a8     18 4F 05 F1 | 	add	fp, #280
228ac     A7 FA 61 FC | 	wrlong	result1, fp
228b0     18 4F 85 F1 | 	sub	fp, #280
228b4     00 FA 55 F2 | 	cmps	result1, #0 wc
228b8     18 4F 05 C1 |  if_b	add	fp, #280
228bc     A7 FA 01 CB |  if_b	rdlong	result1, fp
228c0     18 4F 85 C1 |  if_b	sub	fp, #280
228c4     B8 04 90 CD |  if_b	jmp	#LR__3053
228c8     C0 4E 05 F1 | 	add	fp, #192
228cc     A7 1E 02 FB | 	rdlong	local01, fp
228d0     58 4E 05 F1 | 	add	fp, #88
228d4     A7 22 02 FB | 	rdlong	local03, fp
228d8     11 1F 02 F1 | 	add	local01, local03
228dc     58 4E 85 F1 | 	sub	fp, #88
228e0     A7 1E 62 FC | 	wrlong	local01, fp
228e4     C0 4E 85 F1 | 	sub	fp, #192
228e8                 | LR__3026
228e8     4C 4E 05 F1 | 	add	fp, #76
228ec     A7 1E 02 FB | 	rdlong	local01, fp
228f0     34 4E 85 F1 | 	sub	fp, #52
228f4     A7 1E 62 FC | 	wrlong	local01, fp
228f8     18 4E 85 F1 | 	sub	fp, #24
228fc     97 9E 48 FB | 	callpa	#(@LR__3032-@LR__3027)>>2,fcache_load_ptr_
22900                 | LR__3027
22900     18 4E 05 F1 | 	add	fp, #24
22904     A7 20 02 FB | 	rdlong	local02, fp
22908     3C 4E 05 F1 | 	add	fp, #60
2290c     A7 26 02 FB | 	rdlong	local05, fp
22910     54 4E 85 F1 | 	sub	fp, #84
22914     13 21 52 F2 | 	cmps	local02, local05 wc
22918     20 01 90 3D |  if_ae	jmp	#LR__3033
2291c     18 4E 05 F1 | 	add	fp, #24
22920     A7 28 02 FB | 	rdlong	local06, fp
22924     18 4E 85 F1 | 	sub	fp, #24
22928     00 28 56 F2 | 	cmps	local06, #0 wc
2292c     58 00 90 CD |  if_b	jmp	#LR__3028
22930     18 4E 05 F1 | 	add	fp, #24
22934     A7 28 02 FB | 	rdlong	local06, fp
22938     40 4E 05 F1 | 	add	fp, #64
2293c     A7 2A 02 FB | 	rdlong	local07, fp
22940     58 4E 85 F1 | 	sub	fp, #88
22944     15 29 52 F2 | 	cmps	local06, local07 wc
22948     3C 00 90 3D |  if_ae	jmp	#LR__3028
2294c     C0 4E 05 F1 | 	add	fp, #192
22950     A7 2C 02 FB | 	rdlong	local08, fp
22954     16 2B 02 F6 | 	mov	local07, local08
22958     01 2A 06 F1 | 	add	local07, #1
2295c     A7 2A 62 FC | 	wrlong	local07, fp
22960     A8 4E 85 F1 | 	sub	fp, #168
22964     A7 2A 02 FB | 	rdlong	local07, fp
22968     15 2F 02 F6 | 	mov	local09, local07
2296c     58 4E 05 F1 | 	add	fp, #88
22970     A7 30 02 F6 | 	mov	local10, fp
22974     A7 2E 02 F1 | 	add	local09, fp
22978     17 33 C2 FA | 	rdbyte	local11, local09
2297c     16 33 42 FC | 	wrbyte	local11, local08
22980     70 4E 85 F1 | 	sub	fp, #112
22984     20 00 90 FD | 	jmp	#LR__3029
22988                 | LR__3028
22988     C0 4E 05 F1 | 	add	fp, #192
2298c     A7 2C 02 FB | 	rdlong	local08, fp
22990     16 2F 02 F6 | 	mov	local09, local08
22994     01 2E 06 F1 | 	add	local09, #1
22998     A7 2E 62 FC | 	wrlong	local09, fp
2299c     C0 4E 85 F1 | 	sub	fp, #192
229a0     30 2E 06 F6 | 	mov	local09, #48
229a4     16 61 48 FC | 	wrbyte	#48, local08
229a8                 | LR__3029
229a8     18 4E 05 F1 | 	add	fp, #24
229ac     A7 28 02 FB | 	rdlong	local06, fp
229b0     38 4E 05 F1 | 	add	fp, #56
229b4     A7 34 02 FB | 	rdlong	local12, fp
229b8     50 4E 85 F1 | 	sub	fp, #80
229bc     1A 29 0A F2 | 	cmp	local06, local12 wz
229c0     5C 00 90 5D |  if_ne	jmp	#LR__3031
229c4     10 4F 05 F1 | 	add	fp, #272
229c8     A7 2A 02 FB | 	rdlong	local07, fp
229cc     10 4F 85 F1 | 	sub	fp, #272
229d0     15 2F 0A F6 | 	mov	local09, local07 wz
229d4     28 00 90 5D |  if_ne	jmp	#LR__3030
229d8     54 4E 05 F1 | 	add	fp, #84
229dc     A7 32 02 FB | 	rdlong	local11, fp
229e0     19 31 02 F6 | 	mov	local10, local11
229e4     01 30 86 F1 | 	sub	local10, #1
229e8     3C 4E 85 F1 | 	sub	fp, #60
229ec     A7 36 02 FB | 	rdlong	local13, fp
229f0     18 4E 85 F1 | 	sub	fp, #24
229f4     1B 39 02 F6 | 	mov	local14, local13
229f8     18 39 52 F2 | 	cmps	local14, local10 wc
229fc     20 00 90 3D |  if_ae	jmp	#LR__3031
22a00                 | LR__3030
22a00     C0 4E 05 F1 | 	add	fp, #192
22a04     A7 2C 02 FB | 	rdlong	local08, fp
22a08     16 35 02 F6 | 	mov	local12, local08
22a0c     01 34 06 F1 | 	add	local12, #1
22a10     A7 34 62 FC | 	wrlong	local12, fp
22a14     C0 4E 85 F1 | 	sub	fp, #192
22a18     2E 2E 06 F6 | 	mov	local09, #46
22a1c     16 5D 48 FC | 	wrbyte	#46, local08
22a20                 | LR__3031
22a20     18 4E 05 F1 | 	add	fp, #24
22a24     A7 3A 02 FB | 	rdlong	local15, fp
22a28     1D 35 02 F6 | 	mov	local12, local15
22a2c     01 34 06 F1 | 	add	local12, #1
22a30     A7 34 62 FC | 	wrlong	local12, fp
22a34     18 4E 85 F1 | 	sub	fp, #24
22a38     C4 FE 9F FD | 	jmp	#LR__3027
22a3c                 | LR__3032
22a3c                 | LR__3033
22a3c     34 4E 05 F1 | 	add	fp, #52
22a40     A7 1E 0A FB | 	rdlong	local01, fp wz
22a44     34 4E 85 F1 | 	sub	fp, #52
22a48     A0 00 90 AD |  if_e	jmp	#LR__3037
22a4c     C0 4E 05 F1 | 	add	fp, #192
22a50     A7 1E 02 FB | 	rdlong	local01, fp
22a54     01 1E 86 F1 | 	sub	local01, #1
22a58     A7 1E 62 FC | 	wrlong	local01, fp
22a5c     C0 4E 85 F1 | 	sub	fp, #192
22a60     97 26 48 FB | 	callpa	#(@LR__3035-@LR__3034)>>2,fcache_load_ptr_
22a64                 | LR__3034
22a64     C0 4E 05 F1 | 	add	fp, #192
22a68     A7 1E 02 FB | 	rdlong	local01, fp
22a6c     04 4E 05 F1 | 	add	fp, #4
22a70     A7 22 02 FB | 	rdlong	local03, fp
22a74     C4 4E 85 F1 | 	sub	fp, #196
22a78     11 1F 5A F2 | 	cmps	local01, local03 wcz
22a7c     30 00 90 ED |  if_be	jmp	#LR__3036
22a80     C0 4E 05 F1 | 	add	fp, #192
22a84     A7 28 02 FB | 	rdlong	local06, fp
22a88     C0 4E 85 F1 | 	sub	fp, #192
22a8c     14 25 C2 FA | 	rdbyte	local04, local06
22a90     30 24 0E F2 | 	cmp	local04, #48 wz
22a94     18 00 90 5D |  if_ne	jmp	#LR__3036
22a98     C0 4E 05 F1 | 	add	fp, #192
22a9c     A7 1E 02 FB | 	rdlong	local01, fp
22aa0     01 1E 86 F1 | 	sub	local01, #1
22aa4     A7 1E 62 FC | 	wrlong	local01, fp
22aa8     C0 4E 85 F1 | 	sub	fp, #192
22aac     B4 FF 9F FD | 	jmp	#LR__3034
22ab0                 | LR__3035
22ab0                 | LR__3036
22ab0     C0 4E 05 F1 | 	add	fp, #192
22ab4     A7 20 02 FB | 	rdlong	local02, fp
22ab8     C0 4E 85 F1 | 	sub	fp, #192
22abc     10 1F C2 FA | 	rdbyte	local01, local02
22ac0     2E 1E 0E F2 | 	cmp	local01, #46 wz
22ac4     C0 4E 05 A1 |  if_e	add	fp, #192
22ac8     A7 1E 02 AB |  if_e	rdlong	local01, fp
22acc     01 1E 86 A1 |  if_e	sub	local01, #1
22ad0     A7 1E 62 AC |  if_e	wrlong	local01, fp
22ad4     C0 4E 85 A1 |  if_e	sub	fp, #192
22ad8     C0 4E 05 F1 | 	add	fp, #192
22adc     A7 22 02 FB | 	rdlong	local03, fp
22ae0     01 22 06 F1 | 	add	local03, #1
22ae4     A7 22 62 FC | 	wrlong	local03, fp
22ae8     C0 4E 85 F1 | 	sub	fp, #192
22aec                 | LR__3037
22aec     24 4E 05 F1 | 	add	fp, #36
22af0     A7 1E 0A FB | 	rdlong	local01, fp wz
22af4     24 4E 85 F1 | 	sub	fp, #36
22af8     B4 00 90 AD |  if_e	jmp	#LR__3040
22afc     C0 4E 05 F1 | 	add	fp, #192
22b00     A7 20 02 FB | 	rdlong	local02, fp
22b04     10 23 02 F6 | 	mov	local03, local02
22b08     01 22 06 F1 | 	add	local03, #1
22b0c     A7 22 62 FC | 	wrlong	local03, fp
22b10     90 4E 85 F1 | 	sub	fp, #144
22b14     A7 24 02 FB | 	rdlong	local04, fp
22b18     10 25 42 FC | 	wrbyte	local04, local02
22b1c     90 4E 05 F1 | 	add	fp, #144
22b20     A7 20 02 FB | 	rdlong	local02, fp
22b24     10 23 02 F6 | 	mov	local03, local02
22b28     01 22 06 F1 | 	add	local03, #1
22b2c     A7 22 62 FC | 	wrlong	local03, fp
22b30     60 4E 85 F1 | 	sub	fp, #96
22b34     A7 24 02 FB | 	rdlong	local04, fp
22b38     10 25 42 FC | 	wrbyte	local04, local02
22b3c     48 4E 85 F1 | 	sub	fp, #72
22b40     A7 00 68 FC | 	wrlong	#0, fp
22b44     18 4E 85 F1 | 	sub	fp, #24
22b48                 | LR__3038
22b48     18 4E 05 F1 | 	add	fp, #24
22b4c     A7 20 02 FB | 	rdlong	local02, fp
22b50     44 4E 05 F1 | 	add	fp, #68
22b54     A7 26 02 FB | 	rdlong	local05, fp
22b58     5C 4E 85 F1 | 	sub	fp, #92
22b5c     13 21 52 F2 | 	cmps	local02, local05 wc
22b60     4C 00 90 3D |  if_ae	jmp	#LR__3039
22b64     C0 4E 05 F1 | 	add	fp, #192
22b68     A7 2C 02 FB | 	rdlong	local08, fp
22b6c     16 35 02 F6 | 	mov	local12, local08
22b70     01 34 06 F1 | 	add	local12, #1
22b74     A7 34 62 FC | 	wrlong	local12, fp
22b78     A8 4E 85 F1 | 	sub	fp, #168
22b7c     A7 2A 02 FB | 	rdlong	local07, fp
22b80     15 2F 02 F6 | 	mov	local09, local07
22b84     98 4E 05 F1 | 	add	fp, #152
22b88     A7 30 02 F6 | 	mov	local10, fp
22b8c     A7 2E 02 F1 | 	add	local09, fp
22b90     17 33 C2 FA | 	rdbyte	local11, local09
22b94     16 33 42 FC | 	wrbyte	local11, local08
22b98     98 4E 85 F1 | 	sub	fp, #152
22b9c     A7 34 02 FB | 	rdlong	local12, fp
22ba0     01 34 06 F1 | 	add	local12, #1
22ba4     A7 34 62 FC | 	wrlong	local12, fp
22ba8     18 4E 85 F1 | 	sub	fp, #24
22bac     98 FF 9F FD | 	jmp	#LR__3038
22bb0                 | LR__3039
22bb0                 | LR__3040
22bb0     C0 4E 05 F1 | 	add	fp, #192
22bb4     A7 1E 02 FB | 	rdlong	local01, fp
22bb8     C0 4E 85 F1 | 	sub	fp, #192
22bbc     0F 01 48 FC | 	wrbyte	#0, local01
22bc0                 | LR__3041
22bc0     6C 4E 05 F1 | 	add	fp, #108
22bc4     A7 1E 0A FB | 	rdlong	local01, fp wz
22bc8     6C 4E 85 F1 | 	sub	fp, #108
22bcc     90 01 90 AD |  if_e	jmp	#LR__3052
22bd0     48 4E 05 F1 | 	add	fp, #72
22bd4     A7 22 0A FB | 	rdlong	local03, fp wz
22bd8     48 4E 85 F1 | 	sub	fp, #72
22bdc     80 01 90 AD |  if_e	jmp	#LR__3052
22be0     C4 4E 05 F1 | 	add	fp, #196
22be4     A7 12 02 FB | 	rdlong	arg01, fp
22be8     C4 4E 85 F1 | 	sub	fp, #196
22bec     09 3D 02 F6 | 	mov	local16, arg01
22bf0     97 06 48 FB | 	callpa	#(@LR__3043-@LR__3042)>>2,fcache_load_ptr_
22bf4                 | LR__3042
22bf4     1E FB C9 FA | 	rdbyte	result1, local16 wz
22bf8     01 3C 06 51 |  if_ne	add	local16, #1
22bfc     F4 FF 9F 5D |  if_ne	jmp	#LR__3042
22c00                 | LR__3043
22c00     09 3D 82 F1 | 	sub	local16, arg01
22c04     1E 25 02 F6 | 	mov	local04, local16
22c08     6C 4E 05 F1 | 	add	fp, #108
22c0c     A7 28 02 FB | 	rdlong	local06, fp
22c10     6C 4E 85 F1 | 	sub	fp, #108
22c14     14 25 5A F2 | 	cmps	local04, local06 wcz
22c18     44 01 90 ED |  if_be	jmp	#LR__3052
22c1c     C4 4E 05 F1 | 	add	fp, #196
22c20     A7 1E 02 FB | 	rdlong	local01, fp
22c24     5C 4E 05 F1 | 	add	fp, #92
22c28     A7 1E 62 FC | 	wrlong	local01, fp
22c2c     FC 4E 85 F1 | 	sub	fp, #252
22c30     A7 1E 0A FB | 	rdlong	local01, fp wz
22c34     24 4E 85 F1 | 	sub	fp, #36
22c38     20 00 90 AD |  if_e	jmp	#LR__3044
22c3c     B8 4E 05 F1 | 	add	fp, #184
22c40     A7 00 68 FC | 	wrlong	#0, fp
22c44     4C 4E 85 F1 | 	sub	fp, #76
22c48     A7 1E 02 FB | 	rdlong	local01, fp
22c4c     B0 4E 05 F1 | 	add	fp, #176
22c50     A7 1E 62 FC | 	wrlong	local01, fp
22c54     1C 4F 85 F1 | 	sub	fp, #284
22c58     24 00 90 FD | 	jmp	#LR__3045
22c5c                 | LR__3044
22c5c     6C 4E 05 F1 | 	add	fp, #108
22c60     A7 1E 02 FB | 	rdlong	local01, fp
22c64     01 1E 86 F1 | 	sub	local01, #1
22c68     4C 4E 05 F1 | 	add	fp, #76
22c6c     A7 22 02 FB | 	rdlong	local03, fp
22c70     11 1F 82 F1 | 	sub	local01, local03
22c74     64 4E 05 F1 | 	add	fp, #100
22c78     A7 1E 62 FC | 	wrlong	local01, fp
22c7c     1C 4F 85 F1 | 	sub	fp, #284
22c80                 | LR__3045
22c80     97 20 48 FB | 	callpa	#(@LR__3047-@LR__3046)>>2,fcache_load_ptr_
22c84                 | LR__3046
22c84     1C 4F 05 F1 | 	add	fp, #284
22c88     A7 1E 0A FB | 	rdlong	local01, fp wz
22c8c     1C 4F 85 F1 | 	sub	fp, #284
22c90     30 00 90 AD |  if_e	jmp	#LR__3048
22c94     20 4F 05 F1 | 	add	fp, #288
22c98     A7 20 02 FB | 	rdlong	local02, fp
22c9c     10 23 02 F6 | 	mov	local03, local02
22ca0     01 22 06 F1 | 	add	local03, #1
22ca4     A7 22 62 FC | 	wrlong	local03, fp
22ca8     10 55 48 FC | 	wrbyte	#42, local02
22cac     04 4E 85 F1 | 	sub	fp, #4
22cb0     A7 1E 02 FB | 	rdlong	local01, fp
22cb4     01 1E 86 F1 | 	sub	local01, #1
22cb8     A7 1E 62 FC | 	wrlong	local01, fp
22cbc     1C 4F 85 F1 | 	sub	fp, #284
22cc0     C0 FF 9F FD | 	jmp	#LR__3046
22cc4                 | LR__3047
22cc4                 | LR__3048
22cc4     B8 4E 05 F1 | 	add	fp, #184
22cc8     A7 1E 0A FB | 	rdlong	local01, fp wz
22ccc     B8 4E 85 F1 | 	sub	fp, #184
22cd0     70 00 90 AD |  if_e	jmp	#LR__3051
22cd4     20 4F 05 F1 | 	add	fp, #288
22cd8     A7 20 02 FB | 	rdlong	local02, fp
22cdc     10 23 02 F6 | 	mov	local03, local02
22ce0     01 22 06 F1 | 	add	local03, #1
22ce4     A7 22 62 FC | 	wrlong	local03, fp
22ce8     10 5D 48 FC | 	wrbyte	#46, local02
22cec     04 4E 85 F1 | 	sub	fp, #4
22cf0     A7 00 68 FC | 	wrlong	#0, fp
22cf4     1C 4F 85 F1 | 	sub	fp, #284
22cf8                 | LR__3049
22cf8     1C 4F 05 F1 | 	add	fp, #284
22cfc     A7 20 02 FB | 	rdlong	local02, fp
22d00     64 4E 85 F1 | 	sub	fp, #100
22d04     A7 26 02 FB | 	rdlong	local05, fp
22d08     B8 4E 85 F1 | 	sub	fp, #184
22d0c     13 21 52 F2 | 	cmps	local02, local05 wc
22d10     30 00 90 3D |  if_ae	jmp	#LR__3050
22d14     20 4F 05 F1 | 	add	fp, #288
22d18     A7 2C 02 FB | 	rdlong	local08, fp
22d1c     16 35 02 F6 | 	mov	local12, local08
22d20     01 34 06 F1 | 	add	local12, #1
22d24     A7 34 62 FC | 	wrlong	local12, fp
22d28     16 55 48 FC | 	wrbyte	#42, local08
22d2c     04 4E 85 F1 | 	sub	fp, #4
22d30     A7 34 02 FB | 	rdlong	local12, fp
22d34     01 34 06 F1 | 	add	local12, #1
22d38     A7 34 62 FC | 	wrlong	local12, fp
22d3c     1C 4F 85 F1 | 	sub	fp, #284
22d40     B4 FF 9F FD | 	jmp	#LR__3049
22d44                 | LR__3050
22d44                 | LR__3051
22d44     20 4F 05 F1 | 	add	fp, #288
22d48     A7 20 02 FB | 	rdlong	local02, fp
22d4c     10 23 02 F6 | 	mov	local03, local02
22d50     01 22 06 F1 | 	add	local03, #1
22d54     A7 22 62 FC | 	wrlong	local03, fp
22d58     20 4F 85 F1 | 	sub	fp, #288
22d5c     10 01 48 FC | 	wrbyte	#0, local02
22d60                 | LR__3052
22d60     04 4E 05 F1 | 	add	fp, #4
22d64     A7 12 02 FB | 	rdlong	arg01, fp
22d68     04 4E 05 F1 | 	add	fp, #4
22d6c     A7 14 02 FB | 	rdlong	arg02, fp
22d70     BC 4E 05 F1 | 	add	fp, #188
22d74     A7 16 02 FB | 	rdlong	arg03, fp
22d78     C4 4E 85 F1 | 	sub	fp, #196
22d7c     C4 EE BF FD | 	call	#__system___fmtstr
22d80                 | LR__3053
22d80     A7 F0 03 F6 | 	mov	ptra, fp
22d84     B2 00 A0 FD | 	call	#popregs_
22d88                 | __system___fmtfloat_ret
22d88     2D 00 64 FD | 	ret
22d8c                 | 
22d8c                 | __system__Left_S
22d8c     04 4A 05 F6 | 	mov	COUNT_, #4
22d90     A8 00 A0 FD | 	call	#pushregs_
22d94     09 1F 02 F6 | 	mov	local01, arg01
22d98     0A 21 02 F6 | 	mov	local02, arg02
22d9c     01 20 56 F2 | 	cmps	local02, #1 wc
22da0     82 01 00 CF 
22da4     3E FB 05 C6 |  if_b	mov	result1, ##@LR__4963
22da8     5C 00 90 CD |  if_b	jmp	#LR__3063
22dac     0F 13 02 F6 | 	mov	arg01, local01
22db0     09 23 02 F6 | 	mov	local03, arg01
22db4     97 06 48 FB | 	callpa	#(@LR__3061-@LR__3060)>>2,fcache_load_ptr_
22db8                 | LR__3060
22db8     11 FB C9 FA | 	rdbyte	result1, local03 wz
22dbc     01 22 06 51 |  if_ne	add	local03, #1
22dc0     F4 FF 9F 5D |  if_ne	jmp	#LR__3060
22dc4                 | LR__3061
22dc4     09 23 82 F1 | 	sub	local03, arg01
22dc8     11 FB 01 F6 | 	mov	result1, local03
22dcc     10 FB 59 F2 | 	cmps	result1, local02 wcz
22dd0     0F FB 01 E6 |  if_be	mov	result1, local01
22dd4     30 00 90 ED |  if_be	jmp	#LR__3063
22dd8     10 13 02 F6 | 	mov	arg01, local02
22ddc     02 12 06 F1 | 	add	arg01, #2
22de0     E4 1D B0 FD | 	call	#__system___gc_alloc_managed
22de4     FD 24 0A F6 | 	mov	local04, result1 wz
22de8     18 00 90 AD |  if_e	jmp	#LR__3062
22dec     12 13 02 F6 | 	mov	arg01, local04
22df0     0F 15 02 F6 | 	mov	arg02, local01
22df4     10 17 02 F6 | 	mov	arg03, local02
22df8     34 DE BF FD | 	call	#__system____builtin_memmove
22dfc     12 21 02 F1 | 	add	local02, local04
22e00     10 01 48 FC | 	wrbyte	#0, local02
22e04                 | LR__3062
22e04     12 FB 01 F6 | 	mov	result1, local04
22e08                 | LR__3063
22e08     A7 F0 03 F6 | 	mov	ptra, fp
22e0c     B2 00 A0 FD | 	call	#popregs_
22e10                 | __system__Left_S_ret
22e10     2D 00 64 FD | 	ret
22e14                 | 
22e14                 | __system__Right_S
22e14     05 4A 05 F6 | 	mov	COUNT_, #5
22e18     A8 00 A0 FD | 	call	#pushregs_
22e1c     09 1F 02 F6 | 	mov	local01, arg01
22e20     0A 21 02 F6 | 	mov	local02, arg02
22e24     01 20 56 F2 | 	cmps	local02, #1 wc
22e28     82 01 00 CF 
22e2c     3F FB 05 C6 |  if_b	mov	result1, ##@LR__4964
22e30     64 00 90 CD |  if_b	jmp	#LR__3073
22e34     0F 13 02 F6 | 	mov	arg01, local01
22e38     09 23 02 F6 | 	mov	local03, arg01
22e3c     97 06 48 FB | 	callpa	#(@LR__3071-@LR__3070)>>2,fcache_load_ptr_
22e40                 | LR__3070
22e40     11 FB C9 FA | 	rdbyte	result1, local03 wz
22e44     01 22 06 51 |  if_ne	add	local03, #1
22e48     F4 FF 9F 5D |  if_ne	jmp	#LR__3070
22e4c                 | LR__3071
22e4c     09 23 82 F1 | 	sub	local03, arg01
22e50     11 FB 01 F6 | 	mov	result1, local03
22e54     FD 24 02 F6 | 	mov	local04, result1
22e58     10 25 5A F2 | 	cmps	local04, local02 wcz
22e5c     0F FB 01 E6 |  if_be	mov	result1, local01
22e60     34 00 90 ED |  if_be	jmp	#LR__3073
22e64     10 13 02 F6 | 	mov	arg01, local02
22e68     02 12 06 F1 | 	add	arg01, #2
22e6c     58 1D B0 FD | 	call	#__system___gc_alloc_managed
22e70     FD 26 0A F6 | 	mov	local05, result1 wz
22e74     1C 00 90 AD |  if_e	jmp	#LR__3072
22e78     10 25 82 F1 | 	sub	local04, local02
22e7c     0F 25 02 F1 | 	add	local04, local01
22e80     01 20 06 F1 | 	add	local02, #1
22e84     13 13 02 F6 | 	mov	arg01, local05
22e88     12 15 02 F6 | 	mov	arg02, local04
22e8c     10 17 02 F6 | 	mov	arg03, local02
22e90     9C DD BF FD | 	call	#__system____builtin_memmove
22e94                 | LR__3072
22e94     13 FB 01 F6 | 	mov	result1, local05
22e98                 | LR__3073
22e98     A7 F0 03 F6 | 	mov	ptra, fp
22e9c     B2 00 A0 FD | 	call	#popregs_
22ea0                 | __system__Right_S_ret
22ea0     2D 00 64 FD | 	ret
22ea4                 | 
22ea4                 | __system__Mid_S
22ea4     05 4A 05 F6 | 	mov	COUNT_, #5
22ea8     A8 00 A0 FD | 	call	#pushregs_
22eac     09 1F 02 F6 | 	mov	local01, arg01
22eb0     0A 21 02 F6 | 	mov	local02, arg02
22eb4     01 16 56 F2 | 	cmps	arg03, #1 wc
22eb8     82 01 00 CF 
22ebc     40 FB 05 C6 |  if_b	mov	result1, ##@LR__4965
22ec0     80 00 90 CD |  if_b	jmp	#LR__3083
22ec4     01 20 86 F1 | 	sub	local02, #1
22ec8     00 20 56 F3 | 	fges	local02, #0 wc
22ecc     0F 13 02 F6 | 	mov	arg01, local01
22ed0     09 23 02 F6 | 	mov	local03, arg01
22ed4     97 06 48 FB | 	callpa	#(@LR__3081-@LR__3080)>>2,fcache_load_ptr_
22ed8                 | LR__3080
22ed8     11 FB C9 FA | 	rdbyte	result1, local03 wz
22edc     01 22 06 51 |  if_ne	add	local03, #1
22ee0     F4 FF 9F 5D |  if_ne	jmp	#LR__3080
22ee4                 | LR__3081
22ee4     09 23 82 F1 | 	sub	local03, arg01
22ee8     11 FB 01 F6 | 	mov	result1, local03
22eec     FD 14 02 F6 | 	mov	arg02, result1
22ef0     10 15 52 F2 | 	cmps	arg02, local02 wc
22ef4     82 01 00 CF 
22ef8     41 FB 05 C6 |  if_b	mov	result1, ##@LR__4966
22efc     44 00 90 CD |  if_b	jmp	#LR__3083
22f00     0A 25 02 F6 | 	mov	local04, arg02
22f04     10 25 82 F1 | 	sub	local04, local02
22f08     0B 25 5A F2 | 	cmps	local04, arg03 wcz
22f0c     0B 25 02 16 |  if_a	mov	local04, arg03
22f10     12 13 02 F6 | 	mov	arg01, local04
22f14     02 12 06 F1 | 	add	arg01, #2
22f18     AC 1C B0 FD | 	call	#__system___gc_alloc_managed
22f1c     FD 26 0A F6 | 	mov	local05, result1 wz
22f20     1C 00 90 AD |  if_e	jmp	#LR__3082
22f24     0F 21 02 F1 | 	add	local02, local01
22f28     13 13 02 F6 | 	mov	arg01, local05
22f2c     10 15 02 F6 | 	mov	arg02, local02
22f30     12 17 02 F6 | 	mov	arg03, local04
22f34     F8 DC BF FD | 	call	#__system____builtin_memmove
22f38     13 25 02 F1 | 	add	local04, local05
22f3c     12 01 48 FC | 	wrbyte	#0, local04
22f40                 | LR__3082
22f40     13 FB 01 F6 | 	mov	result1, local05
22f44                 | LR__3083
22f44     A7 F0 03 F6 | 	mov	ptra, fp
22f48     B2 00 A0 FD | 	call	#popregs_
22f4c                 | __system__Mid_S_ret
22f4c     2D 00 64 FD | 	ret
22f50                 | 
22f50                 | __system__Chr_S
22f50     01 4A 05 F6 | 	mov	COUNT_, #1
22f54     A8 00 A0 FD | 	call	#pushregs_
22f58     09 1F 02 F6 | 	mov	local01, arg01
22f5c     03 12 06 F6 | 	mov	arg01, #3
22f60     64 1C B0 FD | 	call	#__system___gc_alloc_managed
22f64     00 FA 4D F2 | 	cmps	result1, #0 wz
22f68     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
22f6c     01 FA 05 51 |  if_ne	add	result1, #1
22f70     FD 00 48 5C |  if_ne	wrbyte	#0, result1
22f74     01 FA 85 51 |  if_ne	sub	result1, #1
22f78     A7 F0 03 F6 | 	mov	ptra, fp
22f7c     B2 00 A0 FD | 	call	#popregs_
22f80                 | __system__Chr_S_ret
22f80     2D 00 64 FD | 	ret
22f84                 | 
22f84                 | __system__str_S
22f84     02 4A 05 F6 | 	mov	COUNT_, #2
22f88     A8 00 A0 FD | 	call	#pushregs_
22f8c     09 1F 02 F6 | 	mov	local01, arg01
22f90     10 12 06 F6 | 	mov	arg01, #16
22f94     30 1C B0 FD | 	call	#__system___gc_alloc_managed
22f98     FD 20 0A F6 | 	mov	local02, result1 wz
22f9c     30 00 90 AD |  if_e	jmp	#LR__3090
22fa0     F8 13 02 F6 | 	mov	arg01, ptra
22fa4     08 F0 07 F1 | 	add	ptra, #8
22fa8     09 21 62 FC | 	wrlong	local02, arg01
22fac     04 12 06 F1 | 	add	arg01, #4
22fb0     09 01 68 FC | 	wrlong	#0, arg01
22fb4     04 12 86 F1 | 	sub	arg01, #4
22fb8     00 A8 04 FF 
22fbc     00 12 46 F5 | 	or	arg01, ##156237824
22fc0     00 14 06 F6 | 	mov	arg02, #0
22fc4     0F 17 02 F6 | 	mov	arg03, local01
22fc8     67 18 06 F6 | 	mov	arg04, #103
22fcc     90 EE BF FD | 	call	#__system___fmtfloat
22fd0                 | LR__3090
22fd0     10 FB 01 F6 | 	mov	result1, local02
22fd4     A7 F0 03 F6 | 	mov	ptra, fp
22fd8     B2 00 A0 FD | 	call	#popregs_
22fdc                 | __system__str_S_ret
22fdc     2D 00 64 FD | 	ret
22fe0                 | 
22fe0                 | __system__Number_S
22fe0     08 4A 05 F6 | 	mov	COUNT_, #8
22fe4     A8 00 A0 FD | 	call	#pushregs_
22fe8     09 1F 02 F6 | 	mov	local01, arg01
22fec     0A 21 0A F6 | 	mov	local02, arg02 wz
22ff0     0B 23 02 F6 | 	mov	local03, arg03
22ff4     3C 00 90 5D |  if_ne	jmp	#LR__3102
22ff8     01 20 06 F6 | 	mov	local02, #1
22ffc     11 25 02 F6 | 	mov	local04, local03
23000     01 26 06 F6 | 	mov	local05, #1
23004     97 16 48 FB | 	callpa	#(@LR__3101-@LR__3100)>>2,fcache_load_ptr_
23008                 | LR__3100
23008     00 28 06 F6 | 	mov	local06, #0
2300c     0F 25 1A F2 | 	cmp	local04, local01 wcz
23010     01 28 66 E6 |  if_be	neg	local06, #1
23014     12 27 12 F2 | 	cmp	local05, local04 wc
23018     15 2B A2 F1 | 	subx	local07, local07
2301c     15 29 CA F7 | 	test	local06, local07 wz
23020     11 25 02 5D |  if_ne	qmul	local04, local03
23024     12 27 02 56 |  if_ne	mov	local05, local04
23028     01 20 06 51 |  if_ne	add	local02, #1
2302c     18 24 62 5D |  if_ne	getqx	local04
23030     D4 FF 9F 5D |  if_ne	jmp	#LR__3100
23034                 | LR__3101
23034                 | LR__3102
23034     20 20 36 F3 | 	fle	local02, #32 wc
23038     10 13 02 F6 | 	mov	arg01, local02
2303c     02 12 06 F1 | 	add	arg01, #2
23040     84 1B B0 FD | 	call	#__system___gc_alloc_managed
23044     FD 28 02 F6 | 	mov	local06, result1
23048     10 2B 02 F6 | 	mov	local07, local02
2304c     14 2B 02 F1 | 	add	local07, local06
23050     15 01 48 FC | 	wrbyte	#0, local07
23054     97 1A 48 FB | 	callpa	#(@LR__3104-@LR__3103)>>2,fcache_load_ptr_
23058                 | LR__3103
23058     01 20 16 F2 | 	cmp	local02, #1 wc
2305c     2C 00 90 CD |  if_b	jmp	#LR__3105
23060     11 1F 12 FD | 	qdiv	local01, local03
23064     01 20 86 F1 | 	sub	local02, #1
23068     10 2B 02 F6 | 	mov	local07, local02
2306c     14 2B 02 F1 | 	add	local07, local06
23070     19 2C 62 FD | 	getqy	local08
23074     0A 2C 16 F2 | 	cmp	local08, #10 wc
23078     30 2C 06 C1 |  if_b	add	local08, #48
2307c     37 2C 06 31 |  if_ae	add	local08, #55
23080     15 2D 42 FC | 	wrbyte	local08, local07
23084     18 1E 62 FD | 	getqx	local01
23088     CC FF 9F FD | 	jmp	#LR__3103
2308c                 | LR__3104
2308c                 | LR__3105
2308c     14 FB 01 F6 | 	mov	result1, local06
23090     A7 F0 03 F6 | 	mov	ptra, fp
23094     B2 00 A0 FD | 	call	#popregs_
23098                 | __system__Number_S_ret
23098     2D 00 64 FD | 	ret
2309c                 | 
2309c                 | __system__LCase_S
2309c     07 4A 05 F6 | 	mov	COUNT_, #7
230a0     A8 00 A0 FD | 	call	#pushregs_
230a4     09 1F 02 F6 | 	mov	local01, arg01
230a8     09 21 02 F6 | 	mov	local02, arg01
230ac     97 06 48 FB | 	callpa	#(@LR__3111-@LR__3110)>>2,fcache_load_ptr_
230b0                 | LR__3110
230b0     10 FB C9 FA | 	rdbyte	result1, local02 wz
230b4     01 20 06 51 |  if_ne	add	local02, #1
230b8     F4 FF 9F 5D |  if_ne	jmp	#LR__3110
230bc                 | LR__3111
230bc     09 21 82 F1 | 	sub	local02, arg01
230c0     10 FB 01 F6 | 	mov	result1, local02
230c4     FD 20 0A F6 | 	mov	local02, result1 wz
230c8     82 01 00 AF 
230cc     42 FB 05 A6 |  if_e	mov	result1, ##@LR__4967
230d0     7C 00 90 AD |  if_e	jmp	#LR__3117
230d4     10 13 02 F6 | 	mov	arg01, local02
230d8     02 12 06 F1 | 	add	arg01, #2
230dc     E8 1A B0 FD | 	call	#__system___gc_alloc_managed
230e0     FD 22 0A F6 | 	mov	local03, result1 wz
230e4     64 00 90 AD |  if_e	jmp	#LR__3116
230e8     01 24 66 F6 | 	neg	local04, #1
230ec     97 26 48 FB | 	callpa	#(@LR__3115-@LR__3112)>>2,fcache_load_ptr_
230f0                 | LR__3112
230f0     01 24 06 F1 | 	add	local04, #1
230f4     12 27 02 F6 | 	mov	local05, local04
230f8     0F 27 02 F1 | 	add	local05, local01
230fc     13 29 C2 FA | 	rdbyte	local06, local05
23100     41 28 56 F2 | 	cmps	local06, #65 wc
23104     18 00 90 CD |  if_b	jmp	#LR__3113
23108     5B 28 56 F2 | 	cmps	local06, #91 wc
2310c     12 2B 02 C6 |  if_b	mov	local07, local04
23110     11 2B 02 C1 |  if_b	add	local07, local03
23114     20 28 06 C1 |  if_b	add	local06, #32
23118     15 29 42 CC |  if_b	wrbyte	local06, local07
2311c     0C 00 90 CD |  if_b	jmp	#LR__3114
23120                 | LR__3113
23120     12 2B 02 F6 | 	mov	local07, local04
23124     11 2B 02 F1 | 	add	local07, local03
23128     15 29 42 FC | 	wrbyte	local06, local07
2312c                 | LR__3114
2312c     10 29 02 F6 | 	mov	local06, local02
23130     01 28 86 F1 | 	sub	local06, #1
23134     14 25 0A F2 | 	cmp	local04, local06 wz
23138     B4 FF 9F 5D |  if_ne	jmp	#LR__3112
2313c                 | LR__3115
2313c     11 21 02 F1 | 	add	local02, local03
23140     10 01 48 FC | 	wrbyte	#0, local02
23144     11 FB 01 F6 | 	mov	result1, local03
23148     04 00 90 FD | 	jmp	#LR__3117
2314c                 | LR__3116
2314c     11 FB 01 F6 | 	mov	result1, local03
23150                 | LR__3117
23150     A7 F0 03 F6 | 	mov	ptra, fp
23154     B2 00 A0 FD | 	call	#popregs_
23158                 | __system__LCase_S_ret
23158     2D 00 64 FD | 	ret
2315c                 | 
2315c                 | __system__LTrim_S
2315c     05 4A 05 F6 | 	mov	COUNT_, #5
23160     A8 00 A0 FD | 	call	#pushregs_
23164     09 1F 02 F6 | 	mov	local01, arg01
23168     09 21 02 F6 | 	mov	local02, arg01
2316c     97 06 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
23170                 | LR__3120
23170     10 FB C9 FA | 	rdbyte	result1, local02 wz
23174     01 20 06 51 |  if_ne	add	local02, #1
23178     F4 FF 9F 5D |  if_ne	jmp	#LR__3120
2317c                 | LR__3121
2317c     09 21 82 F1 | 	sub	local02, arg01
23180     10 FB 01 F6 | 	mov	result1, local02
23184     FD 20 0A F6 | 	mov	local02, result1 wz
23188     82 01 00 AF 
2318c     43 FB 05 A6 |  if_e	mov	result1, ##@LR__4968
23190     7C 00 90 AD |  if_e	jmp	#LR__3126
23194     00 22 06 F6 | 	mov	local03, #0
23198     10 25 02 F6 | 	mov	local04, local02
2319c                 | LR__3122
2319c     12 23 52 F2 | 	cmps	local03, local04 wc
231a0     68 00 90 3D |  if_ae	jmp	#LR__3125
231a4     11 17 02 F6 | 	mov	arg03, local03
231a8     0F 17 02 F1 | 	add	arg03, local01
231ac     0B 17 C2 FA | 	rdbyte	arg03, arg03
231b0     20 16 0E F2 | 	cmp	arg03, #32 wz
231b4     4C 00 90 AD |  if_e	jmp	#LR__3124
231b8     10 13 02 F6 | 	mov	arg01, local02
231bc     11 13 82 F1 | 	sub	arg01, local03
231c0     02 12 06 F1 | 	add	arg01, #2
231c4     00 1A B0 FD | 	call	#__system___gc_alloc_managed
231c8     FD 26 0A F6 | 	mov	local05, result1 wz
231cc     2C 00 90 AD |  if_e	jmp	#LR__3123
231d0     11 15 02 F6 | 	mov	arg02, local03
231d4     0F 15 02 F1 | 	add	arg02, local01
231d8     10 17 02 F6 | 	mov	arg03, local02
231dc     11 17 82 F1 | 	sub	arg03, local03
231e0     13 13 02 F6 | 	mov	arg01, local05
231e4     48 DA BF FD | 	call	#__system____builtin_memmove
231e8     11 21 82 F1 | 	sub	local02, local03
231ec     13 21 02 F1 | 	add	local02, local05
231f0     10 01 48 FC | 	wrbyte	#0, local02
231f4     13 FB 01 F6 | 	mov	result1, local05
231f8     14 00 90 FD | 	jmp	#LR__3126
231fc                 | LR__3123
231fc     13 FB 01 F6 | 	mov	result1, local05
23200     0C 00 90 FD | 	jmp	#LR__3126
23204                 | LR__3124
23204     01 22 06 F1 | 	add	local03, #1
23208     90 FF 9F FD | 	jmp	#LR__3122
2320c                 | LR__3125
2320c     0F FB 01 F6 | 	mov	result1, local01
23210                 | LR__3126
23210     A7 F0 03 F6 | 	mov	ptra, fp
23214     B2 00 A0 FD | 	call	#popregs_
23218                 | __system__LTrim_S_ret
23218     2D 00 64 FD | 	ret
2321c                 | 
2321c                 | __system__RTrim_S
2321c     04 4A 05 F6 | 	mov	COUNT_, #4
23220     A8 00 A0 FD | 	call	#pushregs_
23224     09 1F 02 F6 | 	mov	local01, arg01
23228     09 21 02 F6 | 	mov	local02, arg01
2322c     97 06 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
23230                 | LR__3130
23230     10 FB C9 FA | 	rdbyte	result1, local02 wz
23234     01 20 06 51 |  if_ne	add	local02, #1
23238     F4 FF 9F 5D |  if_ne	jmp	#LR__3130
2323c                 | LR__3131
2323c     09 21 82 F1 | 	sub	local02, arg01
23240     10 FB 01 F6 | 	mov	result1, local02
23244     FD 20 0A F6 | 	mov	local02, result1 wz
23248     82 01 00 AF 
2324c     44 FB 05 A6 |  if_e	mov	result1, ##@LR__4969
23250     74 00 90 AD |  if_e	jmp	#LR__3135
23254     10 23 02 F6 | 	mov	local03, local02
23258     01 22 86 F1 | 	sub	local03, #1
2325c                 | LR__3132
2325c     11 15 02 F6 | 	mov	arg02, local03
23260     0F 15 02 F1 | 	add	arg02, local01
23264     0A 21 C2 FA | 	rdbyte	local02, arg02
23268     20 20 0E F2 | 	cmp	local02, #32 wz
2326c     44 00 90 AD |  if_e	jmp	#LR__3134
23270     11 13 02 F6 | 	mov	arg01, local03
23274     02 12 06 F1 | 	add	arg01, #2
23278     4C 19 B0 FD | 	call	#__system___gc_alloc_managed
2327c     FD 24 0A F6 | 	mov	local04, result1 wz
23280     28 00 90 AD |  if_e	jmp	#LR__3133
23284     11 17 02 F6 | 	mov	arg03, local03
23288     01 16 06 F1 | 	add	arg03, #1
2328c     12 13 02 F6 | 	mov	arg01, local04
23290     0F 15 02 F6 | 	mov	arg02, local01
23294     98 D9 BF FD | 	call	#__system____builtin_memmove
23298     01 22 06 F1 | 	add	local03, #1
2329c     12 23 02 F1 | 	add	local03, local04
232a0     11 01 48 FC | 	wrbyte	#0, local03
232a4     12 FB 01 F6 | 	mov	result1, local04
232a8     1C 00 90 FD | 	jmp	#LR__3135
232ac                 | LR__3133
232ac     12 FB 01 F6 | 	mov	result1, local04
232b0     14 00 90 FD | 	jmp	#LR__3135
232b4                 | LR__3134
232b4     01 22 86 F1 | 	sub	local03, #1
232b8     00 22 56 F2 | 	cmps	local03, #0 wc
232bc     9C FF 9F 3D |  if_ae	jmp	#LR__3132
232c0     82 01 00 FF 
232c4     45 FB 05 F6 | 	mov	result1, ##@LR__4970
232c8                 | LR__3135
232c8     A7 F0 03 F6 | 	mov	ptra, fp
232cc     B2 00 A0 FD | 	call	#popregs_
232d0                 | __system__RTrim_S_ret
232d0     2D 00 64 FD | 	ret
232d4                 | 
232d4                 | __system__Instr
232d4     07 4A 05 F6 | 	mov	COUNT_, #7
232d8     A8 00 A0 FD | 	call	#pushregs_
232dc     09 1F 02 F6 | 	mov	local01, arg01
232e0     0A 21 02 F6 | 	mov	local02, arg02
232e4     0B 23 02 F6 | 	mov	local03, arg03
232e8     11 13 02 F6 | 	mov	arg01, local03
232ec     09 25 02 F6 | 	mov	local04, arg01
232f0     97 06 48 FB | 	callpa	#(@LR__3141-@LR__3140)>>2,fcache_load_ptr_
232f4                 | LR__3140
232f4     12 FB C9 FA | 	rdbyte	result1, local04 wz
232f8     01 24 06 51 |  if_ne	add	local04, #1
232fc     F4 FF 9F 5D |  if_ne	jmp	#LR__3140
23300                 | LR__3141
23300     09 25 82 F1 | 	sub	local04, arg01
23304     12 27 02 F6 | 	mov	local05, local04
23308     10 13 02 F6 | 	mov	arg01, local02
2330c     09 25 02 F6 | 	mov	local04, arg01
23310     97 06 48 FB | 	callpa	#(@LR__3143-@LR__3142)>>2,fcache_load_ptr_
23314                 | LR__3142
23314     12 FB C9 FA | 	rdbyte	result1, local04 wz
23318     01 24 06 51 |  if_ne	add	local04, #1
2331c     F4 FF 9F 5D |  if_ne	jmp	#LR__3142
23320                 | LR__3143
23320     09 25 82 F1 | 	sub	local04, arg01
23324     12 FB 01 F6 | 	mov	result1, local04
23328     FD 18 0A F6 | 	mov	arg04, result1 wz
2332c     00 FA 05 A6 |  if_e	mov	result1, #0
23330     98 00 90 AD |  if_e	jmp	#LR__3147
23334     00 26 0E F2 | 	cmp	local05, #0 wz
23338     00 FA 05 A6 |  if_e	mov	result1, #0
2333c     8C 00 90 AD |  if_e	jmp	#LR__3147
23340     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
23344     00 FA 05 16 |  if_a	mov	result1, #0
23348     80 00 90 1D |  if_a	jmp	#LR__3147
2334c     01 1E 56 F2 | 	cmps	local01, #1 wc
23350     01 1E 06 C6 |  if_b	mov	local01, #1
23354     11 29 C2 FA | 	rdbyte	local06, local03
23358     01 26 0E F2 | 	cmp	local05, #1 wz
2335c     18 00 90 5D |  if_ne	jmp	#LR__3144
23360     10 13 02 F6 | 	mov	arg01, local02
23364     14 15 02 F6 | 	mov	arg02, local06
23368     0F 17 02 F6 | 	mov	arg03, local01
2336c     00 18 06 F6 | 	mov	arg04, #0
23370     2C 34 B0 FD | 	call	#__system____ScanForChar
23374     54 00 90 FD | 	jmp	#LR__3147
23378                 | LR__3144
23378     0F 2B 02 F6 | 	mov	local07, local01
2337c                 | LR__3145
2337c     10 13 02 F6 | 	mov	arg01, local02
23380     14 15 02 F6 | 	mov	arg02, local06
23384     15 17 02 F6 | 	mov	arg03, local07
23388     00 18 06 F6 | 	mov	arg04, #0
2338c     10 34 B0 FD | 	call	#__system____ScanForChar
23390     FD 2A 0A F6 | 	mov	local07, result1 wz
23394     30 00 90 AD |  if_e	jmp	#LR__3146
23398     13 17 02 F6 | 	mov	arg03, local05
2339c     10 13 02 F6 | 	mov	arg01, local02
233a0     15 15 02 F6 | 	mov	arg02, local07
233a4     FC FA BF FD | 	call	#__system__Mid_S
233a8     FD 12 02 F6 | 	mov	arg01, result1
233ac     11 15 02 F6 | 	mov	arg02, local03
233b0     84 D9 BF FD | 	call	#__system___string_cmp
233b4     00 FA 0D F2 | 	cmp	result1, #0 wz
233b8     15 FB 01 A6 |  if_e	mov	result1, local07
233bc     0C 00 90 AD |  if_e	jmp	#LR__3147
233c0     13 2B 02 F1 | 	add	local07, local05
233c4     B4 FF 9F FD | 	jmp	#LR__3145
233c8                 | LR__3146
233c8     00 FA 05 F6 | 	mov	result1, #0
233cc                 | LR__3147
233cc     A7 F0 03 F6 | 	mov	ptra, fp
233d0     B2 00 A0 FD | 	call	#popregs_
233d4                 | __system__Instr_ret
233d4     2D 00 64 FD | 	ret
233d8                 | 
233d8                 | __system___strerror
233d8     00 12 56 F2 | 	cmps	arg01, #0 wc
233dc     08 00 90 CD |  if_b	jmp	#LR__3150
233e0     1A 12 56 F2 | 	cmps	arg01, #26 wc
233e4     04 00 90 CD |  if_b	jmp	#LR__3151
233e8                 | LR__3150
233e8     19 12 06 F6 | 	mov	arg01, #25
233ec                 | LR__3151
233ec     02 12 66 F0 | 	shl	arg01, #2
233f0     01 00 00 FF 
233f4     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
233f8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
233fc     09 FB 01 FB | 	rdlong	result1, arg01
23400     01 00 00 FF 
23404     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
23408                 | __system___strerror_ret
23408     2D 00 64 FD | 	ret
2340c                 | 
2340c                 | __system___int64_shl
2340c     20 16 CE F7 | 	test	arg03, #32 wz
23410     09 15 02 56 |  if_ne	mov	arg02, arg01
23414     00 12 06 56 |  if_ne	mov	arg01, #0
23418     1F 16 CE F7 | 	test	arg03, #31 wz
2341c     18 00 90 AD |  if_e	jmp	#LR__3160
23420     0B 15 62 F0 | 	shl	arg02, arg03
23424     09 FB 01 F6 | 	mov	result1, arg01
23428     0B FD 61 F6 | 	neg	result2, arg03
2342c     FE FA 41 F0 | 	shr	result1, result2
23430     FD 14 42 F5 | 	or	arg02, result1
23434     0B 13 62 F0 | 	shl	arg01, arg03
23438                 | LR__3160
23438     0A FD 01 F6 | 	mov	result2, arg02
2343c     09 FB 01 F6 | 	mov	result1, arg01
23440                 | __system___int64_shl_ret
23440     2D 00 64 FD | 	ret
23444                 | 
23444                 | __system___usepins
23444     14 E6 05 F1 | 	add	ptr___system__dat__, #20
23448     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
2344c     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
23450     00 13 CA F7 | 	test	arg01, _var01 wz
23454     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
23458     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
2345c     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
23460     01 15 CA A7 |  if_e	test	arg02, _var02 wz
23464     00 FA 05 56 |  if_ne	mov	result1, #0
23468     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
2346c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
23470     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
23474     09 03 42 F5 | 	or	_var02, arg01
23478     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2347c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
23480     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
23484     0A 03 42 F5 | 	or	_var02, arg02
23488     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2348c     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
23490     01 FA 65 F6 | 	neg	result1, #1
23494                 | __system___usepins_ret
23494     2D 00 64 FD | 	ret
23498                 | 
23498                 | __system___freepins
23498     14 E6 05 F1 | 	add	ptr___system__dat__, #20
2349c     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
234a0     09 01 22 F5 | 	andn	_var01, arg01
234a4     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
234a8     04 E6 05 F1 | 	add	ptr___system__dat__, #4
234ac     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
234b0     0A 01 22 F5 | 	andn	_var01, arg02
234b4     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
234b8     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
234bc                 | __system___freepins_ret
234bc     2D 00 64 FD | 	ret
234c0                 | 
234c0                 | __system___float_fromuns
234c0     09 17 0A F6 | 	mov	arg03, arg01 wz
234c4     0B FB 01 A6 |  if_e	mov	result1, arg03
234c8     24 00 90 AD |  if_e	jmp	#LR__3170
234cc     0B 15 92 F7 | 	encod	arg02, arg03 wc
234d0     01 14 06 C1 |  if_b	add	arg02, #1
234d4     01 14 86 F1 | 	sub	arg02, #1
234d8     1F 12 06 F6 | 	mov	arg01, #31
234dc     0A 13 82 F1 | 	sub	arg01, arg02
234e0     09 17 62 F0 | 	shl	arg03, arg01
234e4     02 16 46 F0 | 	shr	arg03, #2
234e8     00 12 06 F6 | 	mov	arg01, #0
234ec     4C 09 B0 FD | 	call	#__system___float_Pack
234f0                 | LR__3170
234f0                 | __system___float_fromuns_ret
234f0     2D 00 64 FD | 	ret
234f4                 | 
234f4                 | __system___float_add
234f4     0F 4A 05 F6 | 	mov	COUNT_, #15
234f8     A8 00 A0 FD | 	call	#pushregs_
234fc     09 1F 02 F6 | 	mov	local01, arg01
23500     0A 21 02 F6 | 	mov	local02, arg02
23504     00 22 06 F6 | 	mov	local03, #0
23508     0F 25 02 F6 | 	mov	local04, local01
2350c     12 27 02 F6 | 	mov	local05, local04
23510     16 26 46 F7 | 	zerox	local05, #22
23514     12 29 02 F6 | 	mov	local06, local04
23518     01 28 66 F0 | 	shl	local06, #1
2351c     18 28 46 F0 | 	shr	local06, #24
23520     1F 24 46 F0 | 	shr	local04, #31
23524     10 13 02 F6 | 	mov	arg01, local02
23528     09 FB 01 F6 | 	mov	result1, arg01
2352c     FD 2A 02 F6 | 	mov	local07, result1
23530     15 2D 02 F6 | 	mov	local08, local07
23534     16 2C 46 F7 | 	zerox	local08, #22
23538     15 2F 02 F6 | 	mov	local09, local07
2353c     01 2E 66 F0 | 	shl	local09, #1
23540     18 2E 46 F0 | 	shr	local09, #24
23544     17 31 02 F6 | 	mov	local10, local09
23548     1F 2A 46 F0 | 	shr	local07, #31
2354c     00 32 06 F6 | 	mov	local11, #0
23550     00 34 06 F6 | 	mov	local12, #0
23554     18 29 12 F2 | 	cmp	local06, local10 wc
23558     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
2355c     2C 00 90 1D |  if_a	jmp	#LR__3180
23560     16 27 12 32 |  if_ae	cmp	local05, local08 wc
23564     24 00 90 3D |  if_ae	jmp	#LR__3180
23568     13 37 02 F6 | 	mov	local13, local05
2356c     16 27 02 F6 | 	mov	local05, local08
23570     1B 2D 02 F6 | 	mov	local08, local13
23574     14 37 02 F6 | 	mov	local13, local06
23578     18 29 02 F6 | 	mov	local06, local10
2357c     1B 31 02 F6 | 	mov	local10, local13
23580     12 37 02 F6 | 	mov	local13, local04
23584     15 25 02 F6 | 	mov	local04, local07
23588     1B 2B 02 F6 | 	mov	local07, local13
2358c                 | LR__3180
2358c     FF 28 0E F2 | 	cmp	local06, #255 wz
23590     70 01 90 AD |  if_e	jmp	#LR__3195
23594     00 28 0E F2 | 	cmp	local06, #0 wz
23598     AC 01 90 AD |  if_e	jmp	#LR__3197
2359c     17 26 26 F4 | 	bith	local05, #23
235a0                 | LR__3181
235a0     00 30 0E F2 | 	cmp	local10, #0 wz
235a4     F0 01 90 AD |  if_e	jmp	#LR__3201
235a8     17 2C 26 F4 | 	bith	local08, #23
235ac                 | LR__3182
235ac     7F 28 86 F1 | 	sub	local06, #127
235b0     7F 30 86 F1 | 	sub	local10, #127
235b4     14 39 02 F6 | 	mov	local14, local06
235b8     18 39 82 F1 | 	sub	local14, local10
235bc     97 14 48 FB | 	callpa	#(@LR__3184-@LR__3183)>>2,fcache_load_ptr_
235c0                 | LR__3183
235c0     20 38 56 F2 | 	cmps	local14, #32 wc
235c4     20 00 90 CD |  if_b	jmp	#LR__3185
235c8     16 2F 02 F6 | 	mov	local09, local08
235cc     00 32 0E F2 | 	cmp	local11, #0 wz
235d0     6F 32 62 FD | 	wrnz	local11
235d4     19 2F 42 F5 | 	or	local09, local11
235d8     17 33 02 F6 | 	mov	local11, local09
235dc     00 2C 06 F6 | 	mov	local08, #0
235e0     20 38 86 F1 | 	sub	local14, #32
235e4     D8 FF 9F FD | 	jmp	#LR__3183
235e8                 | LR__3184
235e8                 | LR__3185
235e8     00 38 0E F2 | 	cmp	local14, #0 wz
235ec     38 00 90 AD |  if_e	jmp	#LR__3186
235f0     16 37 02 F6 | 	mov	local13, local08
235f4     20 30 06 F6 | 	mov	local10, #32
235f8     1C 31 82 F1 | 	sub	local10, local14
235fc     18 37 62 F0 | 	shl	local13, local10
23600     19 31 02 F6 | 	mov	local10, local11
23604     20 2E 06 F6 | 	mov	local09, #32
23608     1C 2F 82 F1 | 	sub	local09, local14
2360c     17 31 6A F0 | 	shl	local10, local09 wz
23610     1C 33 42 F0 | 	shr	local11, local14
23614     1C 2D 42 F0 | 	shr	local08, local14
23618     1B 33 42 F5 | 	or	local11, local13
2361c     00 3A 06 F6 | 	mov	local15, #0
23620     01 3A 06 56 |  if_ne	mov	local15, #1
23624     1D 33 42 F5 | 	or	local11, local15
23628                 | LR__3186
23628     12 3B 02 F6 | 	mov	local15, local04
2362c     15 3B 62 F5 | 	xor	local15, local07
23630     01 3A CE F7 | 	test	local15, #1 wz
23634     18 00 90 AD |  if_e	jmp	#LR__3187
23638     16 2D 22 F6 | 	not	local08, local08
2363c     19 33 22 F6 | 	not	local11, local11
23640     01 32 0E F1 | 	add	local11, #1 wz
23644     00 3A 06 F6 | 	mov	local15, #0
23648     01 3A 06 A6 |  if_e	mov	local15, #1
2364c     1D 2D 02 F1 | 	add	local08, local15
23650                 | LR__3187
23650     19 35 12 F1 | 	add	local12, local11 wc
23654     16 27 22 F1 | 	addx	local05, local08
23658     00 26 56 F2 | 	cmps	local05, #0 wc
2365c     1C 00 90 3D |  if_ae	jmp	#LR__3188
23660     01 24 66 F5 | 	xor	local04, #1
23664     13 27 22 F6 | 	not	local05, local05
23668     1A 35 22 F6 | 	not	local12, local12
2366c     01 34 0E F1 | 	add	local12, #1 wz
23670     00 3A 06 F6 | 	mov	local15, #0
23674     01 3A 06 A6 |  if_e	mov	local15, #1
23678     1D 27 02 F1 | 	add	local05, local15
2367c                 | LR__3188
2367c     00 80 00 FF 
23680     00 26 16 F2 | 	cmp	local05, ##16777216 wc
23684     28 00 90 CD |  if_b	jmp	#LR__3189
23688     01 28 06 F1 | 	add	local06, #1
2368c     1A 39 02 F6 | 	mov	local14, local12
23690     01 38 06 F5 | 	and	local14, #1
23694     01 34 46 F0 | 	shr	local12, #1
23698     13 3B 02 F6 | 	mov	local15, local05
2369c     1F 3A 66 F0 | 	shl	local15, #31
236a0     1D 35 42 F5 | 	or	local12, local15
236a4     1C 35 42 F5 | 	or	local12, local14
236a8     01 26 46 F0 | 	shr	local05, #1
236ac     3C 00 90 FD | 	jmp	#LR__3194
236b0                 | LR__3189
236b0     00 40 00 FF 
236b4     00 26 16 F2 | 	cmp	local05, ##8388608 wc
236b8     30 00 90 3D |  if_ae	jmp	#LR__3193
236bc     00 26 0E F2 | 	cmp	local05, #0 wz
236c0     00 34 0E A2 |  if_e	cmp	local12, #0 wz
236c4     08 24 46 A5 |  if_e	or	local04, #8
236c8     01 24 26 A5 |  if_e	andn	local04, #1
236cc     1C 00 90 AD |  if_e	jmp	#LR__3192
236d0                 | LR__3190
236d0     00 40 00 FF 
236d4     00 26 16 F2 | 	cmp	local05, ##8388608 wc
236d8     10 00 90 3D |  if_ae	jmp	#LR__3191
236dc     1A 35 12 F1 | 	add	local12, local12 wc
236e0     13 27 22 F1 | 	addx	local05, local05
236e4     01 28 86 F1 | 	sub	local06, #1
236e8     E4 FF 9F FD | 	jmp	#LR__3190
236ec                 | LR__3191
236ec                 | LR__3192
236ec                 | LR__3193
236ec                 | LR__3194
236ec     13 13 02 F6 | 	mov	arg01, local05
236f0     1A 15 02 F6 | 	mov	arg02, local12
236f4     14 17 02 F6 | 	mov	arg03, local06
236f8     12 19 02 F6 | 	mov	arg04, local04
236fc     E4 34 B0 FD | 	call	#__system__pack_0606
23700     DC 00 90 FD | 	jmp	#LR__3205
23704                 | LR__3195
23704     FF 30 0E F2 | 	cmp	local10, #255 wz
23708     10 00 90 5D |  if_ne	jmp	#LR__3196
2370c     12 2B 0A F2 | 	cmp	local07, local04 wz
23710     00 F8 3F 5F 
23714     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
23718     C4 00 90 5D |  if_ne	jmp	#LR__3205
2371c                 | LR__3196
2371c     00 26 0E F2 | 	cmp	local05, #0 wz
23720     00 F8 3F 5F 
23724     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
23728     B4 00 90 5D |  if_ne	jmp	#LR__3205
2372c     1A 15 02 F6 | 	mov	arg02, local12
23730     14 17 02 F6 | 	mov	arg03, local06
23734     12 19 02 F6 | 	mov	arg04, local04
23738     02 18 46 F5 | 	or	arg04, #2
2373c     13 13 02 F6 | 	mov	arg01, local05
23740     A0 34 B0 FD | 	call	#__system__pack_0606
23744     98 00 90 FD | 	jmp	#LR__3205
23748                 | LR__3197
23748     00 26 0E F2 | 	cmp	local05, #0 wz
2374c     28 00 90 AD |  if_e	jmp	#LR__3200
23750     01 26 66 F0 | 	shl	local05, #1
23754     97 0E 48 FB | 	callpa	#(@LR__3199-@LR__3198)>>2,fcache_load_ptr_
23758                 | LR__3198
23758     00 40 00 FF 
2375c     00 26 16 F2 | 	cmp	local05, ##8388608 wc
23760     14 3B 02 C6 |  if_b	mov	local15, local06
23764     01 3A 86 C1 |  if_b	sub	local15, #1
23768     1D 29 02 C6 |  if_b	mov	local06, local15
2376c     01 26 66 C0 |  if_b	shl	local05, #1
23770     E4 FF 9F CD |  if_b	jmp	#LR__3198
23774                 | LR__3199
23774     28 FE 9F FD | 	jmp	#LR__3181
23778                 | LR__3200
23778     15 25 02 F5 | 	and	local04, local07
2377c     12 19 02 F6 | 	mov	arg04, local04
23780     08 18 46 F5 | 	or	arg04, #8
23784     00 12 06 F6 | 	mov	arg01, #0
23788     00 14 06 F6 | 	mov	arg02, #0
2378c     00 16 06 F6 | 	mov	arg03, #0
23790     50 34 B0 FD | 	call	#__system__pack_0606
23794     48 00 90 FD | 	jmp	#LR__3205
23798                 | LR__3201
23798     00 2C 0E F2 | 	cmp	local08, #0 wz
2379c     28 00 90 AD |  if_e	jmp	#LR__3204
237a0     01 2C 66 F0 | 	shl	local08, #1
237a4     97 0E 48 FB | 	callpa	#(@LR__3203-@LR__3202)>>2,fcache_load_ptr_
237a8                 | LR__3202
237a8     00 40 00 FF 
237ac     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
237b0     18 3B 02 C6 |  if_b	mov	local15, local10
237b4     01 3A 86 C1 |  if_b	sub	local15, #1
237b8     1D 31 02 C6 |  if_b	mov	local10, local15
237bc     01 2C 66 C0 |  if_b	shl	local08, #1
237c0     E4 FF 9F CD |  if_b	jmp	#LR__3202
237c4                 | LR__3203
237c4     E4 FD 9F FD | 	jmp	#LR__3182
237c8                 | LR__3204
237c8     7F 28 86 F1 | 	sub	local06, #127
237cc     13 13 02 F6 | 	mov	arg01, local05
237d0     1A 15 02 F6 | 	mov	arg02, local12
237d4     14 17 02 F6 | 	mov	arg03, local06
237d8     12 19 02 F6 | 	mov	arg04, local04
237dc     04 34 B0 FD | 	call	#__system__pack_0606
237e0                 | LR__3205
237e0     A7 F0 03 F6 | 	mov	ptra, fp
237e4     B2 00 A0 FD | 	call	#popregs_
237e8                 | __system___float_add_ret
237e8     2D 00 64 FD | 	ret
237ec                 | 
237ec                 | __system___float_sqrt
237ec     04 4A 05 F6 | 	mov	COUNT_, #4
237f0     A8 00 A0 FD | 	call	#pushregs_
237f4     09 1F 02 F6 | 	mov	local01, arg01
237f8     09 FB 01 F6 | 	mov	result1, arg01
237fc     FD 20 02 F6 | 	mov	local02, result1
23800     10 23 02 F6 | 	mov	local03, local02
23804     16 22 46 F7 | 	zerox	local03, #22
23808     10 25 02 F6 | 	mov	local04, local02
2380c     01 24 66 F0 | 	shl	local04, #1
23810     18 24 4E F0 | 	shr	local04, #24 wz
23814     1F 20 46 F0 | 	shr	local02, #31
23818     70 00 90 AD |  if_e	jmp	#LR__3211
2381c     17 22 26 F4 | 	bith	local03, #23
23820                 | LR__3210
23820     00 20 0E F2 | 	cmp	local02, #0 wz
23824     00 F8 3F 5F 
23828     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2382c     88 00 90 5D |  if_ne	jmp	#LR__3214
23830     FF 24 0E F2 | 	cmp	local04, #255 wz
23834     0F FB 01 A6 |  if_e	mov	result1, local01
23838     7C 00 90 AD |  if_e	jmp	#LR__3214
2383c     7F 24 86 F1 | 	sub	local04, #127
23840     01 24 CE F7 | 	test	local04, #1 wz
23844     01 22 66 50 |  if_ne	shl	local03, #1
23848     05 22 66 F0 | 	shl	local03, #5
2384c     11 01 38 FD | 	qsqrt	#0, local03
23850     01 24 86 51 |  if_ne	sub	local04, #1
23854     12 25 52 F6 | 	abs	local04, local04 wc
23858     01 24 46 F0 | 	shr	local04, #1
2385c     12 17 82 F6 | 	negc	arg03, local04
23860     10 19 02 F6 | 	mov	arg04, local02
23864     18 12 62 FD | 	getqx	arg01
23868     09 15 02 F6 | 	mov	arg02, arg01
2386c     19 14 66 F0 | 	shl	arg02, #25
23870     07 12 46 F0 | 	shr	arg01, #7
23874     00 80 00 FF 
23878     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
2387c     01 16 06 31 |  if_ae	add	arg03, #1
23880     01 12 46 30 |  if_ae	shr	arg01, #1
23884     5C 33 B0 FD | 	call	#__system__pack_0606
23888     2C 00 90 FD | 	jmp	#LR__3214
2388c                 | LR__3211
2388c     00 22 0E F2 | 	cmp	local03, #0 wz
23890     0F FB 01 A6 |  if_e	mov	result1, local01
23894     20 00 90 AD |  if_e	jmp	#LR__3214
23898     01 22 66 F0 | 	shl	local03, #1
2389c     97 0A 48 FB | 	callpa	#(@LR__3213-@LR__3212)>>2,fcache_load_ptr_
238a0                 | LR__3212
238a0     00 40 00 FF 
238a4     00 22 16 F2 | 	cmp	local03, ##8388608 wc
238a8     01 24 86 C1 |  if_b	sub	local04, #1
238ac     01 22 66 C0 |  if_b	shl	local03, #1
238b0     EC FF 9F CD |  if_b	jmp	#LR__3212
238b4                 | LR__3213
238b4     68 FF 9F FD | 	jmp	#LR__3210
238b8                 | LR__3214
238b8     A7 F0 03 F6 | 	mov	ptra, fp
238bc     B2 00 A0 FD | 	call	#popregs_
238c0                 | __system___float_sqrt_ret
238c0     2D 00 64 FD | 	ret
238c4                 | 
238c4                 | __system___float_mul
238c4     0B 4A 05 F6 | 	mov	COUNT_, #11
238c8     A8 00 A0 FD | 	call	#pushregs_
238cc     09 1F 02 F6 | 	mov	local01, arg01
238d0     0A 21 02 F6 | 	mov	local02, arg02
238d4     0F 23 02 F6 | 	mov	local03, local01
238d8     11 25 02 F6 | 	mov	local04, local03
238dc     16 24 46 F7 | 	zerox	local04, #22
238e0     11 27 02 F6 | 	mov	local05, local03
238e4     01 26 66 F0 | 	shl	local05, #1
238e8     18 26 46 F0 | 	shr	local05, #24
238ec     1F 22 46 F0 | 	shr	local03, #31
238f0     10 FB 01 F6 | 	mov	result1, local02
238f4     FD 28 02 F6 | 	mov	local06, result1
238f8     14 2B 02 F6 | 	mov	local07, local06
238fc     16 2A 46 F7 | 	zerox	local07, #22
23900     14 2D 02 F6 | 	mov	local08, local06
23904     01 2C 66 F0 | 	shl	local08, #1
23908     18 2C 46 F0 | 	shr	local08, #24
2390c     1F 28 46 F0 | 	shr	local06, #31
23910     14 23 62 F5 | 	xor	local03, local06
23914     FF 26 0E F2 | 	cmp	local05, #255 wz
23918     90 00 90 AD |  if_e	jmp	#LR__3223
2391c     FF 2C 0E F2 | 	cmp	local08, #255 wz
23920     D8 00 90 AD |  if_e	jmp	#LR__3225
23924     00 26 0E F2 | 	cmp	local05, #0 wz
23928     0C 01 90 AD |  if_e	jmp	#LR__3226
2392c     17 24 26 F4 | 	bith	local04, #23
23930                 | LR__3220
23930     00 2C 0E F2 | 	cmp	local08, #0 wz
23934     44 01 90 AD |  if_e	jmp	#LR__3230
23938     17 2A 26 F4 | 	bith	local07, #23
2393c                 | LR__3221
2393c     12 21 02 F6 | 	mov	local02, local04
23940     04 20 66 F0 | 	shl	local02, #4
23944     15 29 02 F6 | 	mov	local06, local07
23948     05 28 66 F0 | 	shl	local06, #5
2394c     14 21 02 FD | 	qmul	local02, local06
23950     16 27 02 F1 | 	add	local05, local08
23954     FE 26 86 F1 | 	sub	local05, #254
23958     13 2F 02 F6 | 	mov	local09, local05
2395c     04 24 66 F0 | 	shl	local04, #4
23960     05 2A 66 F0 | 	shl	local07, #5
23964     18 30 62 FD | 	getqx	local10
23968     15 25 02 FD | 	qmul	local04, local07
2396c     19 32 62 FD | 	getqy	local11
23970     00 80 00 FF 
23974     00 32 16 F2 | 	cmp	local11, ##16777216 wc
23978     18 00 90 CD |  if_b	jmp	#LR__3222
2397c     01 2E 06 F1 | 	add	local09, #1
23980     01 30 46 F0 | 	shr	local10, #1
23984     19 2D 02 F6 | 	mov	local08, local11
23988     1F 2C 66 F0 | 	shl	local08, #31
2398c     16 31 42 F5 | 	or	local10, local08
23990     01 32 46 F0 | 	shr	local11, #1
23994                 | LR__3222
23994     19 13 02 F6 | 	mov	arg01, local11
23998     18 15 02 F6 | 	mov	arg02, local10
2399c     17 17 02 F6 | 	mov	arg03, local09
239a0     11 19 02 F6 | 	mov	arg04, local03
239a4     3C 32 B0 FD | 	call	#__system__pack_0606
239a8     10 01 90 FD | 	jmp	#LR__3234
239ac                 | LR__3223
239ac     00 24 0E F2 | 	cmp	local04, #0 wz
239b0     0F FB 01 56 |  if_ne	mov	result1, local01
239b4     04 01 90 5D |  if_ne	jmp	#LR__3234
239b8     FF 2C 56 F2 | 	cmps	local08, #255 wc
239bc     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
239c0     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
239c4     18 00 90 4D |  if_c_and_nz	jmp	#LR__3224
239c8     00 F8 3F CF 
239cc     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
239d0     E8 00 90 CD |  if_b	jmp	#LR__3234
239d4     00 2A 0E F2 | 	cmp	local07, #0 wz
239d8     10 FB 01 56 |  if_ne	mov	result1, local02
239dc     DC 00 90 5D |  if_ne	jmp	#LR__3234
239e0                 | LR__3224
239e0     02 22 46 F5 | 	or	local03, #2
239e4     00 12 06 F6 | 	mov	arg01, #0
239e8     00 14 06 F6 | 	mov	arg02, #0
239ec     13 17 02 F6 | 	mov	arg03, local05
239f0     11 19 02 F6 | 	mov	arg04, local03
239f4     EC 31 B0 FD | 	call	#__system__pack_0606
239f8     C0 00 90 FD | 	jmp	#LR__3234
239fc                 | LR__3225
239fc     00 26 0E F2 | 	cmp	local05, #0 wz
23a00     00 24 0E A2 |  if_e	cmp	local04, #0 wz
23a04     00 F8 3F AF 
23a08     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
23a0c     AC 00 90 AD |  if_e	jmp	#LR__3234
23a10     00 2A 0E F2 | 	cmp	local07, #0 wz
23a14     10 FB 01 56 |  if_ne	mov	result1, local02
23a18     A0 00 90 5D |  if_ne	jmp	#LR__3234
23a1c     16 17 02 F6 | 	mov	arg03, local08
23a20     11 19 02 F6 | 	mov	arg04, local03
23a24     02 18 46 F5 | 	or	arg04, #2
23a28     00 12 06 F6 | 	mov	arg01, #0
23a2c     00 14 06 F6 | 	mov	arg02, #0
23a30     B0 31 B0 FD | 	call	#__system__pack_0606
23a34     84 00 90 FD | 	jmp	#LR__3234
23a38                 | LR__3226
23a38     00 24 0E F2 | 	cmp	local04, #0 wz
23a3c     20 00 90 AD |  if_e	jmp	#LR__3229
23a40     01 24 66 F0 | 	shl	local04, #1
23a44     97 0A 48 FB | 	callpa	#(@LR__3228-@LR__3227)>>2,fcache_load_ptr_
23a48                 | LR__3227
23a48     00 40 00 FF 
23a4c     00 24 16 F2 | 	cmp	local04, ##8388608 wc
23a50     01 26 86 C1 |  if_b	sub	local05, #1
23a54     01 24 66 C0 |  if_b	shl	local04, #1
23a58     EC FF 9F CD |  if_b	jmp	#LR__3227
23a5c                 | LR__3228
23a5c     D0 FE 9F FD | 	jmp	#LR__3220
23a60                 | LR__3229
23a60     08 22 46 F5 | 	or	local03, #8
23a64     00 12 06 F6 | 	mov	arg01, #0
23a68     00 14 06 F6 | 	mov	arg02, #0
23a6c     00 16 06 F6 | 	mov	arg03, #0
23a70     11 19 02 F6 | 	mov	arg04, local03
23a74     6C 31 B0 FD | 	call	#__system__pack_0606
23a78     40 00 90 FD | 	jmp	#LR__3234
23a7c                 | LR__3230
23a7c     00 2A 0E F2 | 	cmp	local07, #0 wz
23a80     20 00 90 AD |  if_e	jmp	#LR__3233
23a84     01 2A 66 F0 | 	shl	local07, #1
23a88     97 0A 48 FB | 	callpa	#(@LR__3232-@LR__3231)>>2,fcache_load_ptr_
23a8c                 | LR__3231
23a8c     00 40 00 FF 
23a90     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
23a94     01 2C 86 C1 |  if_b	sub	local08, #1
23a98     01 2A 66 C0 |  if_b	shl	local07, #1
23a9c     EC FF 9F CD |  if_b	jmp	#LR__3231
23aa0                 | LR__3232
23aa0     98 FE 9F FD | 	jmp	#LR__3221
23aa4                 | LR__3233
23aa4     08 22 46 F5 | 	or	local03, #8
23aa8     00 12 06 F6 | 	mov	arg01, #0
23aac     00 14 06 F6 | 	mov	arg02, #0
23ab0     00 16 06 F6 | 	mov	arg03, #0
23ab4     11 19 02 F6 | 	mov	arg04, local03
23ab8     28 31 B0 FD | 	call	#__system__pack_0606
23abc                 | LR__3234
23abc     A7 F0 03 F6 | 	mov	ptra, fp
23ac0     B2 00 A0 FD | 	call	#popregs_
23ac4                 | __system___float_mul_ret
23ac4     2D 00 64 FD | 	ret
23ac8                 | 
23ac8                 | __system___float_div
23ac8     0E 4A 05 F6 | 	mov	COUNT_, #14
23acc     A8 00 A0 FD | 	call	#pushregs_
23ad0     09 23 02 F6 | 	mov	local03, arg01
23ad4     0A 25 02 F6 | 	mov	local04, arg02
23ad8     11 27 02 F6 | 	mov	local05, local03
23adc     13 29 02 F6 | 	mov	local06, local05
23ae0     16 28 46 F7 | 	zerox	local06, #22
23ae4     13 2B 02 F6 | 	mov	local07, local05
23ae8     01 2A 66 F0 | 	shl	local07, #1
23aec     18 2A 46 F0 | 	shr	local07, #24
23af0     1F 26 46 F0 | 	shr	local05, #31
23af4     12 FB 01 F6 | 	mov	result1, local04
23af8     FD 2C 02 F6 | 	mov	local08, result1
23afc     16 2F 02 F6 | 	mov	local09, local08
23b00     16 2E 46 F7 | 	zerox	local09, #22
23b04     16 31 02 F6 | 	mov	local10, local08
23b08     01 30 66 F0 | 	shl	local10, #1
23b0c     18 30 46 F0 | 	shr	local10, #24
23b10     1F 2C 46 F0 | 	shr	local08, #31
23b14     16 27 62 F5 | 	xor	local05, local08
23b18     FF 2A 0E F2 | 	cmp	local07, #255 wz
23b1c     D4 00 90 AD |  if_e	jmp	#LR__3245
23b20     FF 30 0E F2 | 	cmp	local10, #255 wz
23b24     04 01 90 AD |  if_e	jmp	#LR__3246
23b28     00 2A 0E F2 | 	cmp	local07, #0 wz
23b2c     24 01 90 AD |  if_e	jmp	#LR__3247
23b30     17 28 26 F4 | 	bith	local06, #23
23b34                 | LR__3240
23b34     00 30 0E F2 | 	cmp	local10, #0 wz
23b38     70 01 90 AD |  if_e	jmp	#LR__3251
23b3c     17 2E 26 F4 | 	bith	local09, #23
23b40                 | LR__3241
23b40     18 2B 82 F1 | 	sub	local07, local10
23b44     15 33 02 F6 | 	mov	local11, local07
23b48     14 13 02 F6 | 	mov	arg01, local06
23b4c     02 12 46 F0 | 	shr	arg01, #2
23b50     1E 28 66 F0 | 	shl	local06, #30
23b54     14 15 02 F6 | 	mov	arg02, local06
23b58     17 17 02 F6 | 	mov	arg03, local09
23b5c     28 12 62 FD | 	setq	arg01
23b60     0B 15 12 FD | 	qdiv	arg02, arg03
23b64     00 34 06 F6 | 	mov	local12, #0
23b68     18 1E 62 FD | 	getqx	local01
23b6c     19 FC 61 FD | 	getqy	result2
23b70     FE 20 02 F6 | 	mov	local02, result2
23b74     0F 37 02 F6 | 	mov	local13, local01
23b78     00 20 4E F2 | 	cmps	local02, #0 wz
23b7c     1B 39 02 F6 | 	mov	local14, local13
23b80     19 38 66 F0 | 	shl	local14, #25
23b84     01 34 06 56 |  if_ne	mov	local12, #1
23b88     1A 39 42 F5 | 	or	local14, local12
23b8c     07 36 46 F0 | 	shr	local13, #7
23b90     00 80 00 FF 
23b94     00 36 16 F2 | 	cmp	local13, ##16777216 wc
23b98     1C 00 90 CD |  if_b	jmp	#LR__3242
23b9c     01 32 06 F1 | 	add	local11, #1
23ba0     01 38 46 F0 | 	shr	local14, #1
23ba4     1B 35 02 F6 | 	mov	local12, local13
23ba8     1F 34 66 F0 | 	shl	local12, #31
23bac     1A 39 42 F5 | 	or	local14, local12
23bb0     01 36 46 F0 | 	shr	local13, #1
23bb4     24 00 90 FD | 	jmp	#LR__3244
23bb8                 | LR__3242
23bb8     00 40 00 FF 
23bbc     00 36 16 F2 | 	cmp	local13, ##8388608 wc
23bc0     18 00 90 3D |  if_ae	jmp	#LR__3243
23bc4     01 32 86 F1 | 	sub	local11, #1
23bc8     01 36 66 F0 | 	shl	local13, #1
23bcc     1C 35 02 F6 | 	mov	local12, local14
23bd0     1F 34 46 F0 | 	shr	local12, #31
23bd4     1A 37 42 F5 | 	or	local13, local12
23bd8     01 38 66 F0 | 	shl	local14, #1
23bdc                 | LR__3243
23bdc                 | LR__3244
23bdc     1B 13 02 F6 | 	mov	arg01, local13
23be0     1C 15 02 F6 | 	mov	arg02, local14
23be4     19 17 02 F6 | 	mov	arg03, local11
23be8     13 19 02 F6 | 	mov	arg04, local05
23bec     F4 2F B0 FD | 	call	#__system__pack_0606
23bf0     F8 00 90 FD | 	jmp	#LR__3255
23bf4                 | LR__3245
23bf4     00 28 0E F2 | 	cmp	local06, #0 wz
23bf8     11 FB 01 56 |  if_ne	mov	result1, local03
23bfc     EC 00 90 5D |  if_ne	jmp	#LR__3255
23c00     FF 30 0E F2 | 	cmp	local10, #255 wz
23c04     00 F8 3F AF 
23c08     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
23c0c     DC 00 90 AD |  if_e	jmp	#LR__3255
23c10     02 26 46 F5 | 	or	local05, #2
23c14     00 12 06 F6 | 	mov	arg01, #0
23c18     00 14 06 F6 | 	mov	arg02, #0
23c1c     15 17 02 F6 | 	mov	arg03, local07
23c20     13 19 02 F6 | 	mov	arg04, local05
23c24     BC 2F B0 FD | 	call	#__system__pack_0606
23c28     C0 00 90 FD | 	jmp	#LR__3255
23c2c                 | LR__3246
23c2c     00 2E 0E F2 | 	cmp	local09, #0 wz
23c30     12 FB 01 56 |  if_ne	mov	result1, local04
23c34     B4 00 90 5D |  if_ne	jmp	#LR__3255
23c38     13 19 02 F6 | 	mov	arg04, local05
23c3c     08 18 46 F5 | 	or	arg04, #8
23c40     00 12 06 F6 | 	mov	arg01, #0
23c44     00 14 06 F6 | 	mov	arg02, #0
23c48     00 16 06 F6 | 	mov	arg03, #0
23c4c     94 2F B0 FD | 	call	#__system__pack_0606
23c50     98 00 90 FD | 	jmp	#LR__3255
23c54                 | LR__3247
23c54     00 28 0E F2 | 	cmp	local06, #0 wz
23c58     20 00 90 AD |  if_e	jmp	#LR__3250
23c5c     01 28 66 F0 | 	shl	local06, #1
23c60     97 0A 48 FB | 	callpa	#(@LR__3249-@LR__3248)>>2,fcache_load_ptr_
23c64                 | LR__3248
23c64     00 40 00 FF 
23c68     00 28 16 F2 | 	cmp	local06, ##8388608 wc
23c6c     01 2A 86 C1 |  if_b	sub	local07, #1
23c70     01 28 66 C0 |  if_b	shl	local06, #1
23c74     EC FF 9F CD |  if_b	jmp	#LR__3248
23c78                 | LR__3249
23c78     B8 FE 9F FD | 	jmp	#LR__3240
23c7c                 | LR__3250
23c7c     00 30 0E F2 | 	cmp	local10, #0 wz
23c80     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
23c84     00 F8 3F AF 
23c88     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
23c8c     5C 00 90 AD |  if_e	jmp	#LR__3255
23c90     13 19 02 F6 | 	mov	arg04, local05
23c94     08 18 46 F5 | 	or	arg04, #8
23c98     00 12 06 F6 | 	mov	arg01, #0
23c9c     00 14 06 F6 | 	mov	arg02, #0
23ca0     00 16 06 F6 | 	mov	arg03, #0
23ca4     3C 2F B0 FD | 	call	#__system__pack_0606
23ca8     40 00 90 FD | 	jmp	#LR__3255
23cac                 | LR__3251
23cac     00 2E 0E F2 | 	cmp	local09, #0 wz
23cb0     20 00 90 AD |  if_e	jmp	#LR__3254
23cb4     01 2E 66 F0 | 	shl	local09, #1
23cb8     97 0A 48 FB | 	callpa	#(@LR__3253-@LR__3252)>>2,fcache_load_ptr_
23cbc                 | LR__3252
23cbc     00 40 00 FF 
23cc0     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
23cc4     01 30 86 C1 |  if_b	sub	local10, #1
23cc8     01 2E 66 C0 |  if_b	shl	local09, #1
23ccc     EC FF 9F CD |  if_b	jmp	#LR__3252
23cd0                 | LR__3253
23cd0     6C FE 9F FD | 	jmp	#LR__3241
23cd4                 | LR__3254
23cd4     02 26 46 F5 | 	or	local05, #2
23cd8     00 12 06 F6 | 	mov	arg01, #0
23cdc     00 14 06 F6 | 	mov	arg02, #0
23ce0     00 16 06 F6 | 	mov	arg03, #0
23ce4     13 19 02 F6 | 	mov	arg04, local05
23ce8     F8 2E B0 FD | 	call	#__system__pack_0606
23cec                 | LR__3255
23cec     A7 F0 03 F6 | 	mov	ptra, fp
23cf0     B2 00 A0 FD | 	call	#popregs_
23cf4                 | __system___float_div_ret
23cf4     2D 00 64 FD | 	ret
23cf8                 | 
23cf8                 | __system___float_cmp
23cf8     00 C0 3F FF 
23cfc     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
23d00     00 C0 3F CF 
23d04     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
23d08     0B FB 01 36 |  if_ae	mov	result1, arg03
23d0c     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
23d10     00 C0 7F FF 
23d14     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
23d18     00 C0 7F CF 
23d1c     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
23d20     0B FB 01 36 |  if_ae	mov	result1, arg03
23d24     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
23d28     00 12 56 F2 | 	cmps	arg01, #0 wc
23d2c     2C 00 90 3D |  if_ae	jmp	#LR__3260
23d30     00 14 56 F2 | 	cmps	arg02, #0 wc
23d34     0A FB 01 C6 |  if_b	mov	result1, arg02
23d38     09 FB 81 C1 |  if_b	sub	result1, arg01
23d3c     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
23d40     00 14 0E F2 | 	cmp	arg02, #0 wz
23d44     00 00 40 AF 
23d48     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
23d4c     00 FA 05 A6 |  if_e	mov	result1, #0
23d50     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
23d54     01 FA 65 F6 | 	neg	result1, #1
23d58     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
23d5c                 | LR__3260
23d5c     00 14 56 F2 | 	cmps	arg02, #0 wc
23d60     1C 00 90 3D |  if_ae	jmp	#LR__3261
23d64     00 12 0E F2 | 	cmp	arg01, #0 wz
23d68     00 00 40 AF 
23d6c     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
23d70     00 FA 05 A6 |  if_e	mov	result1, #0
23d74     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
23d78     01 FA 05 F6 | 	mov	result1, #1
23d7c     08 00 90 FD | 	jmp	#__system___float_cmp_ret
23d80                 | LR__3261
23d80     0A 13 82 F1 | 	sub	arg01, arg02
23d84     09 FB 01 F6 | 	mov	result1, arg01
23d88                 | __system___float_cmp_ret
23d88     2D 00 64 FD | 	ret
23d8c                 | 
23d8c                 | __system___float_tointeger
23d8c     02 4A 05 F6 | 	mov	COUNT_, #2
23d90     A8 00 A0 FD | 	call	#pushregs_
23d94     50 00 B0 FD | 	call	#__system___float_Unpack
23d98     FF FF 7F FF 
23d9c     FF FD 55 F2 | 	cmps	result2, ##-1 wc
23da0     34 00 90 CD |  if_b	jmp	#LR__3270
23da4     1F FC 55 F2 | 	cmps	result2, #31 wc
23da8     2C 00 90 3D |  if_ae	jmp	#LR__3270
23dac     02 FE 65 F0 | 	shl	result3, #2
23db0     1E 1E 06 F6 | 	mov	local01, #30
23db4     FE 1E 82 F1 | 	sub	local01, result2
23db8     0F FF 41 F0 | 	shr	result3, local01
23dbc     FF 20 02 F6 | 	mov	local02, result3
23dc0     0A 21 02 F1 | 	add	local02, arg02
23dc4     01 20 46 F0 | 	shr	local02, #1
23dc8     00 FA 0D F2 | 	cmp	result1, #0 wz
23dcc     10 21 62 56 |  if_ne	neg	local02, local02
23dd0     10 FB 01 F6 | 	mov	result1, local02
23dd4     04 00 90 FD | 	jmp	#LR__3271
23dd8                 | LR__3270
23dd8     00 FA 05 F6 | 	mov	result1, #0
23ddc                 | LR__3271
23ddc     A7 F0 03 F6 | 	mov	ptra, fp
23de0     B2 00 A0 FD | 	call	#popregs_
23de4                 | __system___float_tointeger_ret
23de4     2D 00 64 FD | 	ret
23de8                 | 
23de8                 | __system___float_Unpack
23de8     09 01 02 F6 | 	mov	_var01, arg01
23dec     1F 00 46 F0 | 	shr	_var01, #31
23df0     09 03 02 F6 | 	mov	_var02, arg01
23df4     01 02 66 F0 | 	shl	_var02, #1
23df8     18 02 4E F0 | 	shr	_var02, #24 wz
23dfc     17 13 06 F4 | 	bitl	arg01, #279
23e00     06 12 66 50 |  if_ne	shl	arg01, #6
23e04     1D 12 26 54 |  if_ne	bith	arg01, #29
23e08     1C 00 90 5D |  if_ne	jmp	#LR__3280
23e0c     09 05 92 F7 | 	encod	_var03, arg01 wc
23e10     01 04 06 C1 |  if_b	add	_var03, #1
23e14     17 04 86 F1 | 	sub	_var03, #23
23e18     02 03 02 F6 | 	mov	_var02, _var03
23e1c     07 FC 05 F6 | 	mov	result2, #7
23e20     02 FD 81 F1 | 	sub	result2, _var03
23e24     FE 12 62 F0 | 	shl	arg01, result2
23e28                 | LR__3280
23e28     7F 02 86 F1 | 	sub	_var02, #127
23e2c     09 FF 01 F6 | 	mov	result3, arg01
23e30     00 FB 01 F6 | 	mov	result1, _var01
23e34     01 FD 01 F6 | 	mov	result2, _var02
23e38                 | __system___float_Unpack_ret
23e38     2D 00 64 FD | 	ret
23e3c                 | 
23e3c                 | __system___float_Pack
23e3c     00 00 06 F6 | 	mov	_var01, #0
23e40     00 16 0E F2 | 	cmp	arg03, #0 wz
23e44     8C 00 90 AD |  if_e	jmp	#LR__3291
23e48     0B 03 92 F7 | 	encod	_var02, arg03 wc
23e4c     01 02 06 C1 |  if_b	add	_var02, #1
23e50     21 00 06 F6 | 	mov	_var01, #33
23e54     01 01 82 F1 | 	sub	_var01, _var02
23e58     00 17 62 F0 | 	shl	arg03, _var01
23e5c     03 02 06 F6 | 	mov	_var02, #3
23e60     00 03 82 F1 | 	sub	_var02, _var01
23e64     01 15 02 F1 | 	add	arg02, _var02
23e68     0A 05 02 F6 | 	mov	_var03, arg02
23e6c     00 17 06 F1 | 	add	arg03, #256
23e70     0B 03 02 F6 | 	mov	_var02, arg03
23e74     FF 02 2E F5 | 	andn	_var02, #255 wz
23e78     01 04 06 A1 |  if_e	add	_var03, #1
23e7c     7F 04 06 F1 | 	add	_var03, #127
23e80     FF FF 7F FF 
23e84     E9 05 46 F3 | 	fges	_var03, ##-23
23e88     FF 04 66 F3 | 	fles	_var03, #255
23e8c     01 04 56 F2 | 	cmps	_var03, #1 wc
23e90     1C 00 90 3D |  if_ae	jmp	#LR__3290
23e94     01 16 46 F0 | 	shr	arg03, #1
23e98     1F 02 C6 F9 | 	decod	_var02, #31
23e9c     0B 03 02 F1 | 	add	_var02, arg03
23ea0     02 05 62 F6 | 	neg	_var03, _var03
23ea4     02 03 42 F0 | 	shr	_var02, _var03
23ea8     01 17 02 F6 | 	mov	arg03, _var02
23eac     00 04 06 F6 | 	mov	_var03, #0
23eb0                 | LR__3290
23eb0     09 FB 01 F6 | 	mov	result1, arg01
23eb4     1F FA 65 F0 | 	shl	result1, #31
23eb8     02 03 02 F6 | 	mov	_var02, _var03
23ebc     17 02 66 F0 | 	shl	_var02, #23
23ec0     01 FB 41 F5 | 	or	result1, _var02
23ec4     0B 07 02 F6 | 	mov	_var04, arg03
23ec8     09 06 46 F0 | 	shr	_var04, #9
23ecc     03 FB 41 F5 | 	or	result1, _var04
23ed0     04 00 90 FD | 	jmp	#__system___float_Pack_ret
23ed4                 | LR__3291
23ed4     00 FB 01 F6 | 	mov	result1, _var01
23ed8                 | __system___float_Pack_ret
23ed8     2D 00 64 FD | 	ret
23edc                 | 
23edc                 | __system___basic_print_float
23edc     05 4A 05 F6 | 	mov	COUNT_, #5
23ee0     A8 00 A0 FD | 	call	#pushregs_
23ee4     09 1F 02 F6 | 	mov	local01, arg01
23ee8     0A 21 02 F6 | 	mov	local02, arg02
23eec     0B 23 0A F6 | 	mov	local03, arg03 wz
23ef0     0C 25 02 F6 | 	mov	local04, arg04
23ef4     14 00 90 5D |  if_ne	jmp	#LR__3300
23ef8     23 24 0E F2 | 	cmp	local04, #35 wz
23efc     80 02 10 AF 
23f00     00 26 06 A6 |  if_e	mov	local05, ##537198592
23f04     1D 26 C6 59 |  if_ne	decod	local05, #29
23f08     13 23 02 F6 | 	mov	local03, local05
23f0c                 | LR__3300
23f0c     0F 13 02 F6 | 	mov	arg01, local01
23f10     B4 27 B0 FD | 	call	#__system___gettxfunc
23f14     FD 26 0A F6 | 	mov	local05, result1 wz
23f18     00 FA 05 A6 |  if_e	mov	result1, #0
23f1c     13 13 02 56 |  if_ne	mov	arg01, local05
23f20     11 15 02 56 |  if_ne	mov	arg02, local03
23f24     10 17 02 56 |  if_ne	mov	arg03, local02
23f28     12 19 02 56 |  if_ne	mov	arg04, local04
23f2c     30 DF BF 5D |  if_ne	call	#__system___fmtfloat
23f30     A7 F0 03 F6 | 	mov	ptra, fp
23f34     B2 00 A0 FD | 	call	#popregs_
23f38                 | __system___basic_print_float_ret
23f38     2D 00 64 FD | 	ret
23f3c                 | 
23f3c                 | __system____builtin_atoi
23f3c     07 4A 05 F6 | 	mov	COUNT_, #7
23f40     A8 00 A0 FD | 	call	#pushregs_
23f44                 | __system____builtin_atoi_enter
23f44     09 1F 02 F6 | 	mov	local01, arg01
23f48     0A 21 02 F6 | 	mov	local02, arg02
23f4c     00 22 06 F6 | 	mov	local03, #0
23f50     00 24 06 F6 | 	mov	local04, #0
23f54     00 26 06 F6 | 	mov	local05, #0
23f58     97 08 48 FB | 	callpa	#(@LR__3311-@LR__3310)>>2,fcache_load_ptr_
23f5c                 | LR__3310
23f5c     0F 29 C2 FA | 	rdbyte	local06, local01
23f60     20 28 0E F2 | 	cmp	local06, #32 wz
23f64     01 1E 06 A1 |  if_e	add	local01, #1
23f68     F0 FF 9F AD |  if_e	jmp	#LR__3310
23f6c                 | LR__3311
23f6c     0F 2B C2 FA | 	rdbyte	local07, local01
23f70                 | LR__3312
23f70     2D 2A 0E F2 | 	cmp	local07, #45 wz
23f74     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
23f78     18 00 90 5D |  if_ne	jmp	#LR__3313
23f7c     01 1E 06 F1 | 	add	local01, #1
23f80     2D 2A 0E F2 | 	cmp	local07, #45 wz
23f84     01 28 06 A6 |  if_e	mov	local06, #1
23f88     14 27 C2 A2 |  if_e	subr	local05, local06
23f8c     0F 2B C2 FA | 	rdbyte	local07, local01
23f90     DC FF 9F FD | 	jmp	#LR__3312
23f94                 | LR__3313
23f94     97 48 48 FB | 	callpa	#(@LR__3321-@LR__3314)>>2,fcache_load_ptr_
23f98                 | LR__3314
23f98                 | LR__3315
23f98     0F 2B C2 FA | 	rdbyte	local07, local01
23f9c     5F 2A 0E F2 | 	cmp	local07, #95 wz
23fa0     01 1E 06 F1 | 	add	local01, #1
23fa4     F0 FF 9F AD |  if_e	jmp	#LR__3315
23fa8     30 2A 0E F2 | 	cmp	local07, #48 wz
23fac     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
23fb0     00 24 06 A6 |  if_e	mov	local04, #0
23fb4     60 00 90 AD |  if_e	jmp	#LR__3320
23fb8     31 2A 56 F2 | 	cmps	local07, #49 wc
23fbc     18 00 90 CD |  if_b	jmp	#LR__3316
23fc0     3A 2A 56 F2 | 	cmps	local07, #58 wc
23fc4     15 25 02 C6 |  if_b	mov	local04, local07
23fc8     30 24 86 C1 |  if_b	sub	local04, #48
23fcc     00 20 0E C2 |  if_b	cmp	local02, #0 wz
23fd0     0A 20 06 86 |  if_c_and_z	mov	local02, #10
23fd4     40 00 90 CD |  if_b	jmp	#LR__3319
23fd8                 | LR__3316
23fd8     0B 20 56 F2 | 	cmps	local02, #11 wc
23fdc     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
23fe0     14 00 90 CD |  if_b	jmp	#LR__3317
23fe4     67 2A 56 F2 | 	cmps	local07, #103 wc
23fe8     61 2A 86 C1 |  if_b	sub	local07, #97
23fec     0A 24 06 C6 |  if_b	mov	local04, #10
23ff0     15 25 02 C1 |  if_b	add	local04, local07
23ff4     20 00 90 CD |  if_b	jmp	#LR__3318
23ff8                 | LR__3317
23ff8     0B 20 56 F2 | 	cmps	local02, #11 wc
23ffc     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
24000     24 00 90 CD |  if_b	jmp	#LR__3322
24004     47 2A 56 F2 | 	cmps	local07, #71 wc
24008     41 2A 86 C1 |  if_b	sub	local07, #65
2400c     0A 24 06 C6 |  if_b	mov	local04, #10
24010     15 25 02 C1 |  if_b	add	local04, local07
24014     10 00 90 3D |  if_ae	jmp	#LR__3322
24018                 | LR__3318
24018                 | LR__3319
24018                 | LR__3320
24018     11 21 02 FD | 	qmul	local02, local03
2401c     18 22 62 FD | 	getqx	local03
24020     12 23 02 F1 | 	add	local03, local04
24024     70 FF 9F FD | 	jmp	#LR__3314
24028                 | LR__3321
24028                 | LR__3322
24028     00 20 0E F2 | 	cmp	local02, #0 wz
2402c     64 00 90 5D |  if_ne	jmp	#LR__3328
24030     78 2A 0E F2 | 	cmp	local07, #120 wz
24034     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
24038     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
2403c     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
24040     14 00 90 5D |  if_ne	jmp	#LR__3323
24044     0F 13 02 F6 | 	mov	arg01, local01
24048     10 14 06 F6 | 	mov	arg02, #16
2404c     EC FE BF FD | 	call	#__system____builtin_atoi
24050     FD 22 02 F6 | 	mov	local03, result1
24054     3C 00 90 FD | 	jmp	#LR__3327
24058                 | LR__3323
24058     62 2A 0E F2 | 	cmp	local07, #98 wz
2405c     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
24060     14 00 90 5D |  if_ne	jmp	#LR__3324
24064     0F 13 02 F6 | 	mov	arg01, local01
24068     02 14 06 F6 | 	mov	arg02, #2
2406c     CC FE BF FD | 	call	#__system____builtin_atoi
24070     FD 22 02 F6 | 	mov	local03, result1
24074     1C 00 90 FD | 	jmp	#LR__3326
24078                 | LR__3324
24078     6F 2A 0E F2 | 	cmp	local07, #111 wz
2407c     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
24080     10 00 90 5D |  if_ne	jmp	#LR__3325
24084     0F 13 02 F6 | 	mov	arg01, local01
24088     08 14 06 F6 | 	mov	arg02, #8
2408c     AC FE BF FD | 	call	#__system____builtin_atoi
24090     FD 22 02 F6 | 	mov	local03, result1
24094                 | LR__3325
24094                 | LR__3326
24094                 | LR__3327
24094                 | LR__3328
24094     00 26 0E F2 | 	cmp	local05, #0 wz
24098     11 23 62 56 |  if_ne	neg	local03, local03
2409c     11 FB 01 F6 | 	mov	result1, local03
240a0     A7 F0 03 F6 | 	mov	ptra, fp
240a4     B2 00 A0 FD | 	call	#popregs_
240a8                 | __system____builtin_atoi_ret
240a8     2D 00 64 FD | 	ret
240ac                 | 
240ac                 | __system____builtin_atof
240ac     07 4A 05 F6 | 	mov	COUNT_, #7
240b0     A8 00 A0 FD | 	call	#pushregs_
240b4     09 1F 02 F6 | 	mov	local01, arg01
240b8     00 20 06 F6 | 	mov	local02, #0
240bc     00 22 06 F6 | 	mov	local03, #0
240c0     00 24 06 F6 | 	mov	local04, #0
240c4     00 26 06 F6 | 	mov	local05, #0
240c8     97 08 48 FB | 	callpa	#(@LR__3331-@LR__3330)>>2,fcache_load_ptr_
240cc                 | LR__3330
240cc     0F 17 C2 FA | 	rdbyte	arg03, local01
240d0     20 16 0E F2 | 	cmp	arg03, #32 wz
240d4     01 1E 06 A1 |  if_e	add	local01, #1
240d8     F0 FF 9F AD |  if_e	jmp	#LR__3330
240dc                 | LR__3331
240dc     0F 29 C2 FA | 	rdbyte	local06, local01
240e0                 | LR__3332
240e0     2B 28 0E F2 | 	cmp	local06, #43 wz
240e4     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
240e8     14 00 90 5D |  if_ne	jmp	#LR__3333
240ec     2D 28 0E F2 | 	cmp	local06, #45 wz
240f0     1F 24 E6 A4 |  if_e	bitnot	local04, #31
240f4     01 1E 06 F1 | 	add	local01, #1
240f8     0F 29 C2 FA | 	rdbyte	local06, local01
240fc     E0 FF 9F FD | 	jmp	#LR__3332
24100                 | LR__3333
24100                 | LR__3334
24100     97 08 48 FB | 	callpa	#(@LR__3336-@LR__3335)>>2,fcache_load_ptr_
24104                 | LR__3335
24104     0F 29 C2 FA | 	rdbyte	local06, local01
24108     5F 28 0E F2 | 	cmp	local06, #95 wz
2410c     01 1E 06 F1 | 	add	local01, #1
24110     F0 FF 9F AD |  if_e	jmp	#LR__3335
24114                 | LR__3336
24114     00 28 0E F2 | 	cmp	local06, #0 wz
24118     5C 00 90 AD |  if_e	jmp	#LR__3338
2411c     30 28 56 F2 | 	cmps	local06, #48 wc
24120     44 00 90 CD |  if_b	jmp	#LR__3337
24124     3A 28 56 F2 | 	cmps	local06, #58 wc
24128     3C 00 90 3D |  if_ae	jmp	#LR__3337
2412c     10 13 02 F6 | 	mov	arg01, local02
24130     00 90 20 FF 
24134     00 14 06 F6 | 	mov	arg02, ##1092616192
24138     88 F7 BF FD | 	call	#__system___float_mul
2413c     FD 20 02 F6 | 	mov	local02, result1
24140     30 28 86 F1 | 	sub	local06, #48
24144     14 13 02 F6 | 	mov	arg01, local06
24148     74 F3 BF FD | 	call	#__system___float_fromuns
2414c     FD 14 02 F6 | 	mov	arg02, result1
24150     10 13 02 F6 | 	mov	arg01, local02
24154     9C F3 BF FD | 	call	#__system___float_add
24158     FD 20 02 F6 | 	mov	local02, result1
2415c     00 26 0E F2 | 	cmp	local05, #0 wz
24160     01 22 86 51 |  if_ne	sub	local03, #1
24164     98 FF 9F FD | 	jmp	#LR__3334
24168                 | LR__3337
24168     2E 28 0E F2 | 	cmp	local06, #46 wz
2416c     00 26 0E A2 |  if_e	cmp	local05, #0 wz
24170     01 26 06 A6 |  if_e	mov	local05, #1
24174     88 FF 9F AD |  if_e	jmp	#LR__3334
24178                 | LR__3338
24178     45 28 0E F2 | 	cmp	local06, #69 wz
2417c     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
24180     18 00 90 5D |  if_ne	jmp	#LR__3339
24184     0F 13 02 F6 | 	mov	arg01, local01
24188     00 14 06 F6 | 	mov	arg02, #0
2418c     AC FD BF FD | 	call	#__system____builtin_atoi
24190     11 FB 01 F1 | 	add	result1, local03
24194     FD 2A 02 F6 | 	mov	local07, result1
24198     04 00 90 FD | 	jmp	#LR__3340
2419c                 | LR__3339
2419c     11 2B 02 F6 | 	mov	local07, local03
241a0                 | LR__3340
241a0     15 17 02 F6 | 	mov	arg03, local07
241a4     10 13 02 F6 | 	mov	arg01, local02
241a8     00 90 20 FF 
241ac     00 14 06 F6 | 	mov	arg02, ##1092616192
241b0     F4 06 B0 FD | 	call	#__system___float_pow_n
241b4     12 FB 61 F5 | 	xor	result1, local04
241b8     A7 F0 03 F6 | 	mov	ptra, fp
241bc     B2 00 A0 FD | 	call	#popregs_
241c0                 | __system____builtin_atof_ret
241c0     2D 00 64 FD | 	ret
241c4                 | 
241c4                 | __system____builtin_ilogb
241c4     20 FC BF FD | 	call	#__system___float_Unpack
241c8     00 FE 0D F2 | 	cmp	result3, #0 wz
241cc     00 00 40 AF 
241d0     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
241d4     24 00 90 AD |  if_e	jmp	#LR__3351
241d8     80 FC 0D F2 | 	cmp	result2, #128 wz
241dc     18 00 90 5D |  if_ne	jmp	#LR__3350
241e0     00 00 10 FF 
241e4     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
241e8     1E FA CD A9 |  if_e	bmask	result1, #30
241ec     0C 00 90 AD |  if_e	jmp	#LR__3351
241f0     1F FA C5 F9 | 	decod	result1, #31
241f4     04 00 90 FD | 	jmp	#LR__3351
241f8                 | LR__3350
241f8     FE FA 01 F6 | 	mov	result1, result2
241fc                 | LR__3351
241fc                 | __system____builtin_ilogb_ret
241fc     2D 00 64 FD | 	ret
24200                 | 
24200                 | __system____builtin_sinf
24200     03 4A 05 F6 | 	mov	COUNT_, #3
24204     A8 00 A0 FD | 	call	#pushregs_
24208     09 1F 02 F6 | 	mov	local01, arg01
2420c     87 64 20 FF 
24210     DB 15 06 F6 | 	mov	arg02, ##1086918619
24214     B0 F8 BF FD | 	call	#__system___float_div
24218     FD 12 02 F6 | 	mov	arg01, result1
2421c     00 14 06 F6 | 	mov	arg02, #0
24220     68 FB BF FD | 	call	#__system___float_tointeger
24224     FD 16 0A F6 | 	mov	arg03, result1 wz
24228     44 00 90 AD |  if_e	jmp	#LR__3360
2422c     0B 13 52 F6 | 	abs	arg01, arg03 wc
24230     1F 20 C6 C9 |  if_b	decod	local02, #31
24234     00 20 06 36 |  if_ae	mov	local02, #0
24238     84 F2 BF FD | 	call	#__system___float_fromuns
2423c     10 FB 61 F5 | 	xor	result1, local02
24240     FD 12 02 F6 | 	mov	arg01, result1
24244     1E 14 C6 F9 | 	decod	arg02, #30
24248     78 F6 BF FD | 	call	#__system___float_mul
2424c     FD 12 02 F6 | 	mov	arg01, result1
24250     87 24 20 FF 
24254     DB 15 06 F6 | 	mov	arg02, ##1078530011
24258     68 F6 BF FD | 	call	#__system___float_mul
2425c     FD 14 02 F6 | 	mov	arg02, result1
24260     0F 13 02 F6 | 	mov	arg01, local01
24264     1F 14 E6 F4 | 	bitnot	arg02, #31
24268     88 F2 BF FD | 	call	#__system___float_add
2426c     FD 1E 02 F6 | 	mov	local01, result1
24270                 | LR__3360
24270     0F 13 02 F6 | 	mov	arg01, local01
24274     66 E6 1E FF 
24278     CD 14 06 F6 | 	mov	arg02, ##1036831949
2427c     01 16 06 F6 | 	mov	arg03, #1
24280     74 FA BF FD | 	call	#__system___float_cmp
24284     00 FA 55 F2 | 	cmps	result1, #0 wc
24288     5C 00 90 3D |  if_ae	jmp	#LR__3361
2428c     0F 13 02 F6 | 	mov	arg01, local01
24290     66 E6 5E FF 
24294     CD 14 06 F6 | 	mov	arg02, ##-1110651699
24298     01 16 66 F6 | 	neg	arg03, #1
2429c     58 FA BF FD | 	call	#__system___float_cmp
242a0     01 FA 55 F2 | 	cmps	result1, #1 wc
242a4     40 00 90 CD |  if_b	jmp	#LR__3361
242a8     0F 13 02 F6 | 	mov	arg01, local01
242ac     0F 15 02 F6 | 	mov	arg02, local01
242b0     10 F6 BF FD | 	call	#__system___float_mul
242b4     FD 12 02 F6 | 	mov	arg01, result1
242b8     0F 15 02 F6 | 	mov	arg02, local01
242bc     04 F6 BF FD | 	call	#__system___float_mul
242c0     FD 12 02 F6 | 	mov	arg01, result1
242c4     00 60 20 FF 
242c8     00 14 06 F6 | 	mov	arg02, ##1086324736
242cc     F8 F7 BF FD | 	call	#__system___float_div
242d0     FD 14 02 F6 | 	mov	arg02, result1
242d4     0F 13 02 F6 | 	mov	arg01, local01
242d8     1F 14 E6 F4 | 	bitnot	arg02, #31
242dc     14 F2 BF FD | 	call	#__system___float_add
242e0     FD 22 02 F6 | 	mov	local03, result1
242e4     54 00 90 FD | 	jmp	#LR__3362
242e8                 | LR__3361
242e8     0F 13 02 F6 | 	mov	arg01, local01
242ec     7C 91 26 FF 
242f0     83 15 06 F6 | 	mov	arg02, ##1294137731
242f4     CC F5 BF FD | 	call	#__system___float_mul
242f8     FD 12 02 F6 | 	mov	arg01, result1
242fc     00 14 06 F6 | 	mov	arg02, #0
24300     88 FA BF FD | 	call	#__system___float_tointeger
24304     02 FA 65 F0 | 	shl	result1, #2
24308     00 00 A0 FF 
2430c     FD 00 48 FD | 	qrotate	##1073741824, result1
24310     19 12 62 FD | 	getqy	arg01
24314     09 13 52 F6 | 	abs	arg01, arg01 wc
24318     1F 20 C6 C9 |  if_b	decod	local02, #31
2431c     00 20 06 36 |  if_ae	mov	local02, #0
24320     9C F1 BF FD | 	call	#__system___float_fromuns
24324     10 FB 61 F5 | 	xor	result1, local02
24328     FD 12 02 F6 | 	mov	arg01, result1
2432c     00 40 27 FF 
24330     00 14 06 F6 | 	mov	arg02, ##1317011456
24334     90 F7 BF FD | 	call	#__system___float_div
24338     FD 22 02 F6 | 	mov	local03, result1
2433c                 | LR__3362
2433c     11 FB 01 F6 | 	mov	result1, local03
24340     A7 F0 03 F6 | 	mov	ptra, fp
24344     B2 00 A0 FD | 	call	#popregs_
24348                 | __system____builtin_sinf_ret
24348     2D 00 64 FD | 	ret
2434c                 | 
2434c                 | __system____builtin_tanf
2434c     02 4A 05 F6 | 	mov	COUNT_, #2
24350     A8 00 A0 FD | 	call	#pushregs_
24354     09 1F 02 F6 | 	mov	local01, arg01
24358     A4 FE BF FD | 	call	#__system____builtin_sinf
2435c     FD 20 02 F6 | 	mov	local02, result1
24360     0F 15 02 F6 | 	mov	arg02, local01
24364     87 E4 1F FF 
24368     DB 13 06 F6 | 	mov	arg01, ##1070141403
2436c     1F 14 E6 F4 | 	bitnot	arg02, #31
24370     80 F1 BF FD | 	call	#__system___float_add
24374     FD 12 02 F6 | 	mov	arg01, result1
24378     84 FE BF FD | 	call	#__system____builtin_sinf
2437c     FD 14 02 F6 | 	mov	arg02, result1
24380     10 13 02 F6 | 	mov	arg01, local02
24384     40 F7 BF FD | 	call	#__system___float_div
24388     A7 F0 03 F6 | 	mov	ptra, fp
2438c     B2 00 A0 FD | 	call	#popregs_
24390                 | __system____builtin_tanf_ret
24390     2D 00 64 FD | 	ret
24394                 | 
24394                 | __system____builtin_asinf
24394     01 4A 05 F6 | 	mov	COUNT_, #1
24398     A8 00 A0 FD | 	call	#pushregs_
2439c     09 1F 02 F6 | 	mov	local01, arg01
243a0     0F 15 02 F6 | 	mov	arg02, local01
243a4     0F 13 02 F6 | 	mov	arg01, local01
243a8     18 F5 BF FD | 	call	#__system___float_mul
243ac     FD 14 02 F6 | 	mov	arg02, result1
243b0     00 C0 1F FF 
243b4     00 12 06 F6 | 	mov	arg01, ##1065353216
243b8     1F 14 E6 F4 | 	bitnot	arg02, #31
243bc     34 F1 BF FD | 	call	#__system___float_add
243c0     FD 12 02 F6 | 	mov	arg01, result1
243c4     24 F4 BF FD | 	call	#__system___float_sqrt
243c8     FD 14 02 F6 | 	mov	arg02, result1
243cc     0F 13 02 F6 | 	mov	arg01, local01
243d0     58 00 B0 FD | 	call	#__system____builtin_atan2f
243d4     A7 F0 03 F6 | 	mov	ptra, fp
243d8     B2 00 A0 FD | 	call	#popregs_
243dc                 | __system____builtin_asinf_ret
243dc     2D 00 64 FD | 	ret
243e0                 | 
243e0                 | __system____builtin_acosf
243e0     01 4A 05 F6 | 	mov	COUNT_, #1
243e4     A8 00 A0 FD | 	call	#pushregs_
243e8     09 1F 02 F6 | 	mov	local01, arg01
243ec     0F 15 02 F6 | 	mov	arg02, local01
243f0     0F 13 02 F6 | 	mov	arg01, local01
243f4     CC F4 BF FD | 	call	#__system___float_mul
243f8     FD 14 02 F6 | 	mov	arg02, result1
243fc     00 C0 1F FF 
24400     00 12 06 F6 | 	mov	arg01, ##1065353216
24404     1F 14 E6 F4 | 	bitnot	arg02, #31
24408     E8 F0 BF FD | 	call	#__system___float_add
2440c     FD 12 02 F6 | 	mov	arg01, result1
24410     D8 F3 BF FD | 	call	#__system___float_sqrt
24414     FD 12 02 F6 | 	mov	arg01, result1
24418     0F 15 02 F6 | 	mov	arg02, local01
2441c     0C 00 B0 FD | 	call	#__system____builtin_atan2f
24420     A7 F0 03 F6 | 	mov	ptra, fp
24424     B2 00 A0 FD | 	call	#popregs_
24428                 | __system____builtin_acosf_ret
24428     2D 00 64 FD | 	ret
2442c                 | 
2442c                 | __system____builtin_atan2f
2442c     04 4A 05 F6 | 	mov	COUNT_, #4
24430     A8 00 A0 FD | 	call	#pushregs_
24434     09 1F 02 F6 | 	mov	local01, arg01
24438     0A 21 02 F6 | 	mov	local02, arg02
2443c     0F 13 02 F6 | 	mov	arg01, local01
24440     00 14 06 F6 | 	mov	arg02, #0
24444     01 16 06 F6 | 	mov	arg03, #1
24448     AC F8 BF FD | 	call	#__system___float_cmp
2444c     00 FA 0D F2 | 	cmp	result1, #0 wz
24450     28 00 90 5D |  if_ne	jmp	#LR__3370
24454     10 13 02 F6 | 	mov	arg01, local02
24458     00 14 06 F6 | 	mov	arg02, #0
2445c     01 16 06 F6 | 	mov	arg03, #1
24460     94 F8 BF FD | 	call	#__system___float_cmp
24464     00 FA 55 F2 | 	cmps	result1, #0 wc
24468     87 24 60 CF 
2446c     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
24470     DC 00 90 CD |  if_b	jmp	#LR__3371
24474     00 FA 05 F6 | 	mov	result1, #0
24478     D4 00 90 FD | 	jmp	#LR__3371
2447c                 | LR__3370
2447c     10 13 02 F6 | 	mov	arg01, local02
24480     10 15 02 F6 | 	mov	arg02, local02
24484     3C F4 BF FD | 	call	#__system___float_mul
24488     FD 22 02 F6 | 	mov	local03, result1
2448c     0F 13 02 F6 | 	mov	arg01, local01
24490     0F 15 02 F6 | 	mov	arg02, local01
24494     2C F4 BF FD | 	call	#__system___float_mul
24498     FD 14 02 F6 | 	mov	arg02, result1
2449c     11 13 02 F6 | 	mov	arg01, local03
244a0     50 F0 BF FD | 	call	#__system___float_add
244a4     FD 12 02 F6 | 	mov	arg01, result1
244a8     40 F3 BF FD | 	call	#__system___float_sqrt
244ac     FD 22 02 F6 | 	mov	local03, result1
244b0     10 13 02 F6 | 	mov	arg01, local02
244b4     11 15 02 F6 | 	mov	arg02, local03
244b8     0C F6 BF FD | 	call	#__system___float_div
244bc     FD 20 02 F6 | 	mov	local02, result1
244c0     0F 13 02 F6 | 	mov	arg01, local01
244c4     11 15 02 F6 | 	mov	arg02, local03
244c8     FC F5 BF FD | 	call	#__system___float_div
244cc     FD 1E 02 F6 | 	mov	local01, result1
244d0     00 40 27 FF 
244d4     00 12 06 F6 | 	mov	arg01, ##1317011456
244d8     10 15 02 F6 | 	mov	arg02, local02
244dc     E4 F3 BF FD | 	call	#__system___float_mul
244e0     FD 12 02 F6 | 	mov	arg01, result1
244e4     00 14 06 F6 | 	mov	arg02, #0
244e8     A0 F8 BF FD | 	call	#__system___float_tointeger
244ec     FD 22 02 F6 | 	mov	local03, result1
244f0     00 40 27 FF 
244f4     00 12 06 F6 | 	mov	arg01, ##1317011456
244f8     0F 15 02 F6 | 	mov	arg02, local01
244fc     C4 F3 BF FD | 	call	#__system___float_mul
24500     FD 12 02 F6 | 	mov	arg01, result1
24504     00 14 06 F6 | 	mov	arg02, #0
24508     80 F8 BF FD | 	call	#__system___float_tointeger
2450c     FD 22 52 FD | 	qvector	local03, result1
24510     87 24 20 FF 
24514     DB 23 06 F6 | 	mov	local03, ##1078530011
24518     19 12 62 FD | 	getqy	arg01
2451c     01 12 C6 F0 | 	sar	arg01, #1
24520     09 13 52 F6 | 	abs	arg01, arg01 wc
24524     1F 24 C6 C9 |  if_b	decod	local04, #31
24528     00 24 06 36 |  if_ae	mov	local04, #0
2452c     90 EF BF FD | 	call	#__system___float_fromuns
24530     12 FB 61 F5 | 	xor	result1, local04
24534     FD 12 02 F6 | 	mov	arg01, result1
24538     00 40 27 FF 
2453c     00 14 06 F6 | 	mov	arg02, ##1317011456
24540     84 F5 BF FD | 	call	#__system___float_div
24544     FD 14 02 F6 | 	mov	arg02, result1
24548     11 13 02 F6 | 	mov	arg01, local03
2454c     74 F3 BF FD | 	call	#__system___float_mul
24550                 | LR__3371
24550     A7 F0 03 F6 | 	mov	ptra, fp
24554     B2 00 A0 FD | 	call	#popregs_
24558                 | __system____builtin_atan2f_ret
24558     2D 00 64 FD | 	ret
2455c                 | 
2455c                 | __system____builtin_exp2f
2455c     04 4A 05 F6 | 	mov	COUNT_, #4
24560     A8 00 A0 FD | 	call	#pushregs_
24564     09 1F 02 F6 | 	mov	local01, arg01
24568     00 7F 21 FF 
2456c     00 14 06 F6 | 	mov	arg02, ##1123942400
24570     01 16 66 F6 | 	neg	arg03, #1
24574     80 F7 BF FD | 	call	#__system___float_cmp
24578     00 FA 55 F2 | 	cmps	result1, #0 wc
2457c     00 C0 3F 3F 
24580     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
24584     DC 00 90 3D |  if_ae	jmp	#LR__3381
24588     0F 13 02 F6 | 	mov	arg01, local01
2458c     00 7F 61 FF 
24590     00 14 06 F6 | 	mov	arg02, ##-1023541248
24594     01 16 06 F6 | 	mov	arg03, #1
24598     5C F7 BF FD | 	call	#__system___float_cmp
2459c     00 FA 55 F2 | 	cmps	result1, #0 wc
245a0     00 FA 05 C6 |  if_b	mov	result1, #0
245a4     BC 00 90 CD |  if_b	jmp	#LR__3381
245a8     0F 13 02 F6 | 	mov	arg01, local01
245ac     00 14 06 F6 | 	mov	arg02, #0
245b0     D8 F7 BF FD | 	call	#__system___float_tointeger
245b4     FD 20 02 F6 | 	mov	local02, result1
245b8     10 13 52 F6 | 	abs	arg01, local02 wc
245bc     1F 22 C6 C9 |  if_b	decod	local03, #31
245c0     00 22 06 36 |  if_ae	mov	local03, #0
245c4     F8 EE BF FD | 	call	#__system___float_fromuns
245c8     11 FB 61 F5 | 	xor	result1, local03
245cc     FD 14 02 F6 | 	mov	arg02, result1
245d0     0F 13 02 F6 | 	mov	arg01, local01
245d4     1F 14 E6 F4 | 	bitnot	arg02, #31
245d8     18 EF BF FD | 	call	#__system___float_add
245dc     FD 24 02 F6 | 	mov	local04, result1
245e0     12 13 02 F6 | 	mov	arg01, local04
245e4     00 14 06 F6 | 	mov	arg02, #0
245e8     01 16 06 F6 | 	mov	arg03, #1
245ec     08 F7 BF FD | 	call	#__system___float_cmp
245f0     00 FA 55 F2 | 	cmps	result1, #0 wc
245f4     18 00 90 3D |  if_ae	jmp	#LR__3380
245f8     12 13 02 F6 | 	mov	arg01, local04
245fc     00 C0 1F FF 
24600     00 14 06 F6 | 	mov	arg02, ##1065353216
24604     EC EE BF FD | 	call	#__system___float_add
24608     FD 24 02 F6 | 	mov	local04, result1
2460c     01 20 86 F1 | 	sub	local02, #1
24610                 | LR__3380
24610     7F 20 06 F1 | 	add	local02, #127
24614     17 20 66 F0 | 	shl	local02, #23
24618     12 13 02 F6 | 	mov	arg01, local04
2461c     00 80 26 FF 
24620     00 14 06 F6 | 	mov	arg02, ##1291845632
24624     9C F2 BF FD | 	call	#__system___float_mul
24628     FD 12 02 F6 | 	mov	arg01, result1
2462c     00 14 06 F6 | 	mov	arg02, #0
24630     58 F7 BF FD | 	call	#__system___float_tointeger
24634     FD 24 0A F6 | 	mov	local04, result1 wz
24638     10 FB 01 A6 |  if_e	mov	result1, local02
2463c     24 00 90 AD |  if_e	jmp	#LR__3381
24640     3E 24 26 F4 | 	bith	local04, #62
24644     0F 24 62 FD | 	qexp	local04
24648     10 13 02 F6 | 	mov	arg01, local02
2464c     18 14 62 FD | 	getqx	arg02
24650     01 14 06 F1 | 	add	arg02, #1
24654     01 14 46 F0 | 	shr	arg02, #1
24658     00 80 1F FF 
2465c     00 14 06 F1 | 	add	arg02, ##1056964608
24660     60 F2 BF FD | 	call	#__system___float_mul
24664                 | LR__3381
24664     A7 F0 03 F6 | 	mov	ptra, fp
24668     B2 00 A0 FD | 	call	#popregs_
2466c                 | __system____builtin_exp2f_ret
2466c     2D 00 64 FD | 	ret
24670                 | 
24670                 | __system____builtin_log2f
24670     06 4A 05 F6 | 	mov	COUNT_, #6
24674     A8 00 A0 FD | 	call	#pushregs_
24678     09 1F 02 F6 | 	mov	local01, arg01
2467c     09 21 0A F6 | 	mov	local02, arg01 wz
24680     00 00 40 5F 
24684     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
24688     00 40 00 AF 
2468c     00 FA 65 A6 |  if_e	neg	result1, ##8388608
24690     08 01 90 AD |  if_e	jmp	#LR__3394
24694     00 20 56 F2 | 	cmps	local02, #0 wc
24698     00 E0 3F CF 
2469c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
246a0     F8 00 90 CD |  if_b	jmp	#LR__3394
246a4     0F 13 02 F6 | 	mov	arg01, local01
246a8     00 90 20 FF 
246ac     00 14 06 F6 | 	mov	arg02, ##1092616192
246b0     01 16 06 F6 | 	mov	arg03, #1
246b4     40 F6 BF FD | 	call	#__system___float_cmp
246b8     00 FA 0D F2 | 	cmp	result1, #0 wz
246bc     4D 2A 20 AF 
246c0     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
246c4     D4 00 90 AD |  if_e	jmp	#LR__3394
246c8     0F 13 02 F6 | 	mov	arg01, local01
246cc     FC 16 20 FF 
246d0     54 14 06 F6 | 	mov	arg02, ##1076754516
246d4     01 16 06 F6 | 	mov	arg03, #1
246d8     1C F6 BF FD | 	call	#__system___float_cmp
246dc     00 FA 0D F2 | 	cmp	result1, #0 wz
246e0     55 DC 1F AF 
246e4     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
246e8     B0 00 90 AD |  if_e	jmp	#LR__3394
246ec     10 23 02 F6 | 	mov	local03, local02
246f0     17 22 46 F0 | 	shr	local03, #23
246f4     11 23 E2 F8 | 	getbyte	local03, local03, #0
246f8     17 21 06 F4 | 	bitl	local02, #279
246fc     10 25 02 F6 | 	mov	local04, local02
24700     FF 22 0E F2 | 	cmp	local03, #255 wz
24704     1C 00 90 5D |  if_ne	jmp	#LR__3390
24708     00 24 0E F2 | 	cmp	local04, #0 wz
2470c     00 C0 3F 5F 
24710     00 26 06 56 |  if_ne	mov	local05, ##2139095040
24714     00 E0 3F AF 
24718     00 26 06 A6 |  if_e	mov	local05, ##2143289344
2471c     13 FB 01 F6 | 	mov	result1, local05
24720     78 00 90 FD | 	jmp	#LR__3394
24724                 | LR__3390
24724     00 22 0E F2 | 	cmp	local03, #0 wz
24728     17 24 26 54 |  if_ne	bith	local04, #23
2472c     7F 22 86 51 |  if_ne	sub	local03, #127
24730     28 00 90 5D |  if_ne	jmp	#LR__3393
24734     00 24 0E F2 | 	cmp	local04, #0 wz
24738     00 40 00 AF 
2473c     00 FA 65 A6 |  if_e	neg	result1, ##8388608
24740     58 00 90 AD |  if_e	jmp	#LR__3394
24744     7E 22 66 F6 | 	neg	local03, #126
24748     97 08 48 FB | 	callpa	#(@LR__3392-@LR__3391)>>2,fcache_load_ptr_
2474c                 | LR__3391
2474c     17 24 2E F4 | 	testbn	local04, #23 wz
24750     01 24 66 A0 |  if_e	shl	local04, #1
24754     01 22 06 A1 |  if_e	add	local03, #1
24758     F0 FF 9F AD |  if_e	jmp	#LR__3391
2475c                 | LR__3392
2475c                 | LR__3393
2475c     0E 24 62 FD | 	qlog	local04
24760     01 22 86 F1 | 	sub	local03, #1
24764     11 13 52 F6 | 	abs	arg01, local03 wc
24768     1F 28 C6 C9 |  if_b	decod	local06, #31
2476c     00 28 06 36 |  if_ae	mov	local06, #0
24770     18 26 62 FD | 	getqx	local05
24774     9B 26 06 F4 | 	bitl	local05, #155
24778     08 26 06 F1 | 	add	local05, #8
2477c     04 26 46 F0 | 	shr	local05, #4
24780     00 C0 1F FF 
24784     00 26 06 F1 | 	add	local05, ##1065353216
24788     34 ED BF FD | 	call	#__system___float_fromuns
2478c     14 FB 61 F5 | 	xor	result1, local06
24790     FD 14 02 F6 | 	mov	arg02, result1
24794     13 13 02 F6 | 	mov	arg01, local05
24798     58 ED BF FD | 	call	#__system___float_add
2479c                 | LR__3394
2479c     A7 F0 03 F6 | 	mov	ptra, fp
247a0     B2 00 A0 FD | 	call	#popregs_
247a4                 | __system____builtin_log2f_ret
247a4     2D 00 64 FD | 	ret
247a8                 | 
247a8                 | __system____builtin_powf
247a8     04 4A 05 F6 | 	mov	COUNT_, #4
247ac     A8 00 A0 FD | 	call	#pushregs_
247b0     09 1F 02 F6 | 	mov	local01, arg01
247b4     0A 21 02 F6 | 	mov	local02, arg02
247b8     10 13 02 F6 | 	mov	arg01, local02
247bc     00 14 06 F6 | 	mov	arg02, #0
247c0     C8 F5 BF FD | 	call	#__system___float_tointeger
247c4     FD 22 02 F6 | 	mov	local03, result1
247c8     11 13 52 F6 | 	abs	arg01, local03 wc
247cc     1F 24 C6 C9 |  if_b	decod	local04, #31
247d0     00 24 06 36 |  if_ae	mov	local04, #0
247d4     E8 EC BF FD | 	call	#__system___float_fromuns
247d8     12 FB 61 F5 | 	xor	result1, local04
247dc     FD 12 02 F6 | 	mov	arg01, result1
247e0     10 15 02 F6 | 	mov	arg02, local02
247e4     01 16 06 F6 | 	mov	arg03, #1
247e8     0C F5 BF FD | 	call	#__system___float_cmp
247ec     00 FA 0D F2 | 	cmp	result1, #0 wz
247f0     18 00 90 5D |  if_ne	jmp	#LR__3400
247f4     00 C0 1F FF 
247f8     00 12 06 F6 | 	mov	arg01, ##1065353216
247fc     0F 15 02 F6 | 	mov	arg02, local01
24800     11 17 02 F6 | 	mov	arg03, local03
24804     A0 00 B0 FD | 	call	#__system___float_pow_n
24808     58 00 90 FD | 	jmp	#LR__3401
2480c                 | LR__3400
2480c     0F 13 02 F6 | 	mov	arg01, local01
24810     00 14 06 F6 | 	mov	arg02, #0
24814     01 16 06 F6 | 	mov	arg03, #1
24818     DC F4 BF FD | 	call	#__system___float_cmp
2481c     00 FA 55 F2 | 	cmps	result1, #0 wc
24820     00 E0 3F CF 
24824     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
24828     38 00 90 CD |  if_b	jmp	#LR__3401
2482c     0F 13 02 F6 | 	mov	arg01, local01
24830     00 14 06 F6 | 	mov	arg02, #0
24834     01 16 06 F6 | 	mov	arg03, #1
24838     BC F4 BF FD | 	call	#__system___float_cmp
2483c     00 FA 0D F2 | 	cmp	result1, #0 wz
24840     00 FA 05 A6 |  if_e	mov	result1, #0
24844     1C 00 90 AD |  if_e	jmp	#LR__3401
24848     0F 13 02 F6 | 	mov	arg01, local01
2484c     20 FE BF FD | 	call	#__system____builtin_log2f
24850     FD 12 02 F6 | 	mov	arg01, result1
24854     10 15 02 F6 | 	mov	arg02, local02
24858     68 F0 BF FD | 	call	#__system___float_mul
2485c     FD 12 02 F6 | 	mov	arg01, result1
24860     F8 FC BF FD | 	call	#__system____builtin_exp2f
24864                 | LR__3401
24864     A7 F0 03 F6 | 	mov	ptra, fp
24868     B2 00 A0 FD | 	call	#popregs_
2486c                 | __system____builtin_powf_ret
2486c     2D 00 64 FD | 	ret
24870                 | 
24870                 | __system____builtin_logbase
24870     02 4A 05 F6 | 	mov	COUNT_, #2
24874     A8 00 A0 FD | 	call	#pushregs_
24878     09 1F 02 F6 | 	mov	local01, arg01
2487c     0A 13 02 F6 | 	mov	arg01, arg02
24880     EC FD BF FD | 	call	#__system____builtin_log2f
24884     FD 20 02 F6 | 	mov	local02, result1
24888     0F 13 02 F6 | 	mov	arg01, local01
2488c     E0 FD BF FD | 	call	#__system____builtin_log2f
24890     FD 14 02 F6 | 	mov	arg02, result1
24894     10 13 02 F6 | 	mov	arg01, local02
24898     2C F2 BF FD | 	call	#__system___float_div
2489c     A7 F0 03 F6 | 	mov	ptra, fp
248a0     B2 00 A0 FD | 	call	#popregs_
248a4                 | __system____builtin_logbase_ret
248a4     2D 00 64 FD | 	ret
248a8                 | 
248a8                 | __system___float_pow_n
248a8     05 4A 05 F6 | 	mov	COUNT_, #5
248ac     A8 00 A0 FD | 	call	#pushregs_
248b0     09 1F 02 F6 | 	mov	local01, arg01
248b4     0A 21 02 F6 | 	mov	local02, arg02
248b8     0B 23 02 F6 | 	mov	local03, arg03
248bc     00 22 56 F2 | 	cmps	local03, #0 wc
248c0     18 00 90 3D |  if_ae	jmp	#LR__3410
248c4     01 24 06 F6 | 	mov	local04, #1
248c8     11 23 62 F6 | 	neg	local03, local03
248cc     00 22 56 F2 | 	cmps	local03, #0 wc
248d0     00 FA 05 C6 |  if_b	mov	result1, #0
248d4     94 00 90 CD |  if_b	jmp	#LR__3418
248d8     04 00 90 FD | 	jmp	#LR__3411
248dc                 | LR__3410
248dc     00 24 06 F6 | 	mov	local04, #0
248e0                 | LR__3411
248e0     00 C0 1F FF 
248e4     00 26 06 F6 | 	mov	local05, ##1065353216
248e8                 | LR__3412
248e8     01 22 56 F2 | 	cmps	local03, #1 wc
248ec     30 00 90 CD |  if_b	jmp	#LR__3414
248f0     01 22 CE F7 | 	test	local03, #1 wz
248f4     10 00 90 AD |  if_e	jmp	#LR__3413
248f8     13 13 02 F6 | 	mov	arg01, local05
248fc     10 15 02 F6 | 	mov	arg02, local02
24900     C0 EF BF FD | 	call	#__system___float_mul
24904     FD 26 02 F6 | 	mov	local05, result1
24908                 | LR__3413
24908     01 22 C6 F0 | 	sar	local03, #1
2490c     10 13 02 F6 | 	mov	arg01, local02
24910     10 15 02 F6 | 	mov	arg02, local02
24914     AC EF BF FD | 	call	#__system___float_mul
24918     FD 20 02 F6 | 	mov	local02, result1
2491c     C8 FF 9F FD | 	jmp	#LR__3412
24920                 | LR__3414
24920     00 24 0E F2 | 	cmp	local04, #0 wz
24924     14 00 90 AD |  if_e	jmp	#LR__3415
24928     0F 13 02 F6 | 	mov	arg01, local01
2492c     13 15 02 F6 | 	mov	arg02, local05
24930     94 F1 BF FD | 	call	#__system___float_div
24934     FD 26 02 F6 | 	mov	local05, result1
24938     2C 00 90 FD | 	jmp	#LR__3417
2493c                 | LR__3415
2493c     0F 13 02 F6 | 	mov	arg01, local01
24940     00 C0 1F FF 
24944     00 14 06 F6 | 	mov	arg02, ##1065353216
24948     01 16 06 F6 | 	mov	arg03, #1
2494c     A8 F3 BF FD | 	call	#__system___float_cmp
24950     00 FA 0D F2 | 	cmp	result1, #0 wz
24954     10 00 90 AD |  if_e	jmp	#LR__3416
24958     0F 13 02 F6 | 	mov	arg01, local01
2495c     13 15 02 F6 | 	mov	arg02, local05
24960     60 EF BF FD | 	call	#__system___float_mul
24964     FD 26 02 F6 | 	mov	local05, result1
24968                 | LR__3416
24968                 | LR__3417
24968     13 FB 01 F6 | 	mov	result1, local05
2496c                 | LR__3418
2496c     A7 F0 03 F6 | 	mov	ptra, fp
24970     B2 00 A0 FD | 	call	#popregs_
24974                 | __system___float_pow_n_ret
24974     2D 00 64 FD | 	ret
24978                 | 
24978                 | __system___gc_ptrs
24978     EC 00 02 F6 | 	mov	_var01, __heap_ptr
2497c     00 03 02 F6 | 	mov	_var02, _var01
24980     76 01 00 FF 
24984     F8 03 06 F1 | 	add	_var02, ##191992
24988     00 FD 09 FB | 	rdlong	result2, _var01 wz
2498c     74 00 90 5D |  if_ne	jmp	#LR__3420
24990     01 FD 01 F6 | 	mov	result2, _var02
24994     00 FD 81 F1 | 	sub	result2, _var01
24998     00 03 58 FC | 	wrword	#1, _var01
2499c     00 FB 01 F6 | 	mov	result1, _var01
249a0     02 FA 05 F1 | 	add	result1, #2
249a4     36 00 80 FF 
249a8     FD 20 59 FC | 	wrword	##27792, result1
249ac     00 FB 01 F6 | 	mov	result1, _var01
249b0     04 FA 05 F1 | 	add	result1, #4
249b4     FD 00 58 FC | 	wrword	#0, result1
249b8     00 FB 01 F6 | 	mov	result1, _var01
249bc     06 FA 05 F1 | 	add	result1, #6
249c0     FD 02 58 FC | 	wrword	#1, result1
249c4     10 00 06 F1 | 	add	_var01, #16
249c8     FE FC 51 F6 | 	abs	result2, result2 wc
249cc     04 FC 45 F0 | 	shr	result2, #4
249d0     FE FC 81 F6 | 	negc	result2, result2
249d4     00 FD 51 FC | 	wrword	result2, _var01
249d8     00 FD 01 F6 | 	mov	result2, _var01
249dc     02 FC 05 F1 | 	add	result2, #2
249e0     36 00 80 FF 
249e4     FE 1E 59 FC | 	wrword	##27791, result2
249e8     00 FD 01 F6 | 	mov	result2, _var01
249ec     04 FC 05 F1 | 	add	result2, #4
249f0     FE 00 58 FC | 	wrword	#0, result2
249f4     00 FD 01 F6 | 	mov	result2, _var01
249f8     06 FC 05 F1 | 	add	result2, #6
249fc     FE 00 58 FC | 	wrword	#0, result2
24a00     10 00 86 F1 | 	sub	_var01, #16
24a04                 | LR__3420
24a04     00 FB 01 F6 | 	mov	result1, _var01
24a08     01 FD 01 F6 | 	mov	result2, _var02
24a0c                 | __system___gc_ptrs_ret
24a0c     2D 00 64 FD | 	ret
24a10                 | 
24a10                 | __system___gc_tryalloc
24a10     0B 4A 05 F6 | 	mov	COUNT_, #11
24a14     A8 00 A0 FD | 	call	#pushregs_
24a18     09 1F 02 F6 | 	mov	local01, arg01
24a1c     0A 21 02 F6 | 	mov	local02, arg02
24a20     54 FF BF FD | 	call	#__system___gc_ptrs
24a24     FD 22 02 F6 | 	mov	local03, result1
24a28     FE 24 02 F6 | 	mov	local04, result2
24a2c     11 27 02 F6 | 	mov	local05, local03
24a30     00 28 06 F6 | 	mov	local06, #0
24a34     97 1E 48 FB | 	callpa	#(@LR__3431-@LR__3430)>>2,fcache_load_ptr_
24a38                 | LR__3430
24a38     13 2B 02 F6 | 	mov	local07, local05
24a3c     06 26 06 F1 | 	add	local05, #6
24a40     13 15 EA FA | 	rdword	arg02, local05 wz
24a44     11 13 02 F6 | 	mov	arg01, local03
24a48     00 FA 05 A6 |  if_e	mov	result1, #0
24a4c     04 14 66 50 |  if_ne	shl	arg02, #4
24a50     0A 13 02 51 |  if_ne	add	arg01, arg02
24a54     09 FB 01 56 |  if_ne	mov	result1, arg01
24a58     FD 26 0A F6 | 	mov	local05, result1 wz
24a5c     13 29 E2 5A |  if_ne	rdword	local06, local05
24a60     00 26 0E F2 | 	cmp	local05, #0 wz
24a64     12 27 52 52 |  if_ne	cmps	local05, local04 wc
24a68     08 00 90 1D |  if_a	jmp	#LR__3432
24a6c     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
24a70     C4 FF 9F 1D |  if_a	jmp	#LR__3430
24a74                 | LR__3431
24a74                 | LR__3432
24a74     00 26 0E F2 | 	cmp	local05, #0 wz
24a78     13 FB 01 A6 |  if_e	mov	result1, local05
24a7c     3C 01 90 AD |  if_e	jmp	#LR__3435
24a80     13 FD 01 F6 | 	mov	result2, local05
24a84     06 FC 05 F1 | 	add	result2, #6
24a88     FE 2C E2 FA | 	rdword	local08, result2
24a8c     14 1F 52 F2 | 	cmps	local01, local06 wc
24a90     C0 00 90 3D |  if_ae	jmp	#LR__3434
24a94     13 1F 52 FC | 	wrword	local01, local05
24a98     13 13 02 F6 | 	mov	arg01, local05
24a9c     0F 2D 02 F6 | 	mov	local08, local01
24aa0     04 2C 66 F0 | 	shl	local08, #4
24aa4     16 13 02 F1 | 	add	arg01, local08
24aa8     0F 29 82 F1 | 	sub	local06, local01
24aac     09 29 52 FC | 	wrword	local06, arg01
24ab0     09 2D 02 F6 | 	mov	local08, arg01
24ab4     02 2C 06 F1 | 	add	local08, #2
24ab8     36 00 80 FF 
24abc     16 1F 59 FC | 	wrword	##27791, local08
24ac0     13 15 0A F6 | 	mov	arg02, local05 wz
24ac4     00 FA 05 A6 |  if_e	mov	result1, #0
24ac8     11 15 82 51 |  if_ne	sub	arg02, local03
24acc     04 14 46 50 |  if_ne	shr	arg02, #4
24ad0     0A FB 01 56 |  if_ne	mov	result1, arg02
24ad4     09 2D 02 F6 | 	mov	local08, arg01
24ad8     04 2C 06 F1 | 	add	local08, #4
24adc     16 FB 51 FC | 	wrword	result1, local08
24ae0     13 2D 02 F6 | 	mov	local08, local05
24ae4     06 2C 06 F1 | 	add	local08, #6
24ae8     09 15 02 F6 | 	mov	arg02, arg01
24aec     16 2D E2 FA | 	rdword	local08, local08
24af0     06 14 06 F1 | 	add	arg02, #6
24af4     0A 2D 52 FC | 	wrword	local08, arg02
24af8     09 2F 02 F6 | 	mov	local09, arg01
24afc     17 15 0A F6 | 	mov	arg02, local09 wz
24b00     00 FA 05 A6 |  if_e	mov	result1, #0
24b04     11 15 82 51 |  if_ne	sub	arg02, local03
24b08     04 14 46 50 |  if_ne	shr	arg02, #4
24b0c     0A FB 01 56 |  if_ne	mov	result1, arg02
24b10     FD 2C 02 F6 | 	mov	local08, result1
24b14     09 31 EA FA | 	rdword	local10, arg01 wz
24b18     00 FA 05 A6 |  if_e	mov	result1, #0
24b1c     04 30 66 50 |  if_ne	shl	local10, #4
24b20     18 13 02 51 |  if_ne	add	arg01, local10
24b24     09 FB 01 56 |  if_ne	mov	result1, arg01
24b28     FD 32 0A F6 | 	mov	local11, result1 wz
24b2c     24 00 90 AD |  if_e	jmp	#LR__3433
24b30     12 33 52 F2 | 	cmps	local11, local04 wc
24b34     1C 00 90 3D |  if_ae	jmp	#LR__3433
24b38     17 15 0A F6 | 	mov	arg02, local09 wz
24b3c     00 FA 05 A6 |  if_e	mov	result1, #0
24b40     11 15 82 51 |  if_ne	sub	arg02, local03
24b44     04 14 46 50 |  if_ne	shr	arg02, #4
24b48     0A FB 01 56 |  if_ne	mov	result1, arg02
24b4c     04 32 06 F1 | 	add	local11, #4
24b50     19 FB 51 FC | 	wrword	result1, local11
24b54                 | LR__3433
24b54                 | LR__3434
24b54     06 2A 06 F1 | 	add	local07, #6
24b58     15 2D 52 FC | 	wrword	local08, local07
24b5c     36 00 00 FF 
24b60     80 2E 06 F6 | 	mov	local09, ##27776
24b64     10 2F 42 F5 | 	or	local09, local02
24b68     00 FA 05 F6 | 	mov	result1, #0
24b6c     01 FA 61 FD | 	cogid	result1
24b70     FD 2E 42 F5 | 	or	local09, result1
24b74     13 33 02 F6 | 	mov	local11, local05
24b78     02 32 06 F1 | 	add	local11, #2
24b7c     19 2F 52 FC | 	wrword	local09, local11
24b80     11 2F 02 F6 | 	mov	local09, local03
24b84     08 2E 06 F1 | 	add	local09, #8
24b88     13 33 02 F6 | 	mov	local11, local05
24b8c     17 2F E2 FA | 	rdword	local09, local09
24b90     06 32 06 F1 | 	add	local11, #6
24b94     19 2F 52 FC | 	wrword	local09, local11
24b98     13 15 0A F6 | 	mov	arg02, local05 wz
24b9c     00 FA 05 A6 |  if_e	mov	result1, #0
24ba0     11 15 82 51 |  if_ne	sub	arg02, local03
24ba4     04 14 46 50 |  if_ne	shr	arg02, #4
24ba8     0A FB 01 56 |  if_ne	mov	result1, arg02
24bac     08 22 06 F1 | 	add	local03, #8
24bb0     11 FB 51 FC | 	wrword	result1, local03
24bb4     08 26 06 F1 | 	add	local05, #8
24bb8     13 FB 01 F6 | 	mov	result1, local05
24bbc                 | LR__3435
24bbc     A7 F0 03 F6 | 	mov	ptra, fp
24bc0     B2 00 A0 FD | 	call	#popregs_
24bc4                 | __system___gc_tryalloc_ret
24bc4     2D 00 64 FD | 	ret
24bc8                 | 
24bc8                 | __system___gc_alloc_managed
24bc8     01 4A 05 F6 | 	mov	COUNT_, #1
24bcc     A8 00 A0 FD | 	call	#pushregs_
24bd0     09 1F 02 F6 | 	mov	local01, arg01
24bd4     00 14 06 F6 | 	mov	arg02, #0
24bd8     1C 00 B0 FD | 	call	#__system___gc_doalloc
24bdc     FD 14 0A F6 | 	mov	arg02, result1 wz
24be0     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
24be4     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
24be8     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
24bec     A7 F0 03 F6 | 	mov	ptra, fp
24bf0     B2 00 A0 FD | 	call	#popregs_
24bf4                 | __system___gc_alloc_managed_ret
24bf4     2D 00 64 FD | 	ret
24bf8                 | 
24bf8                 | __system___gc_doalloc
24bf8     06 4A 05 F6 | 	mov	COUNT_, #6
24bfc     A8 00 A0 FD | 	call	#pushregs_
24c00     09 1F 0A F6 | 	mov	local01, arg01 wz
24c04     0A 21 02 F6 | 	mov	local02, arg02
24c08     00 FA 05 A6 |  if_e	mov	result1, #0
24c0c     8C 00 90 AD |  if_e	jmp	#LR__3447
24c10     17 1E 06 F1 | 	add	local01, #23
24c14     0F 1E 26 F5 | 	andn	local01, #15
24c18     04 1E 46 F0 | 	shr	local01, #4
24c1c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24c20     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24c24     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24c28     E4 C0 BF FD | 	call	#__system___lockmem
24c2c     0F 13 02 F6 | 	mov	arg01, local01
24c30     10 15 02 F6 | 	mov	arg02, local02
24c34     D8 FD BF FD | 	call	#__system___gc_tryalloc
24c38     FD 22 0A F6 | 	mov	local03, result1 wz
24c3c     14 00 90 5D |  if_ne	jmp	#LR__3440
24c40     70 03 B0 FD | 	call	#__system___gc_docollect
24c44     0F 13 02 F6 | 	mov	arg01, local01
24c48     10 15 02 F6 | 	mov	arg02, local02
24c4c     C0 FD BF FD | 	call	#__system___gc_tryalloc
24c50     FD 22 02 F6 | 	mov	local03, result1
24c54                 | LR__3440
24c54     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24c58     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24c5c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24c60     09 01 68 FC | 	wrlong	#0, arg01
24c64     00 22 0E F2 | 	cmp	local03, #0 wz
24c68     2C 00 90 AD |  if_e	jmp	#LR__3446
24c6c     04 1E 66 F0 | 	shl	local01, #4
24c70     08 1E 86 F1 | 	sub	local01, #8
24c74     0F 25 52 F6 | 	abs	local04, local01 wc
24c78     02 24 46 F0 | 	shr	local04, #2
24c7c     12 27 8A F6 | 	negc	local05, local04 wz
24c80     11 29 02 F6 | 	mov	local06, local03
24c84     10 00 90 AD |  if_e	jmp	#LR__3445
24c88     97 06 48 FB | 	callpa	#(@LR__3443-@LR__3441)>>2,fcache_load_ptr_
24c8c                 | LR__3441
24c8c     13 05 D8 FC | 	rep	@LR__3444, local05
24c90                 | LR__3442
24c90     14 01 68 FC | 	wrlong	#0, local06
24c94     04 28 06 F1 | 	add	local06, #4
24c98                 | LR__3443
24c98                 | LR__3444
24c98                 | LR__3445
24c98                 | LR__3446
24c98     11 FB 01 F6 | 	mov	result1, local03
24c9c                 | LR__3447
24c9c     A7 F0 03 F6 | 	mov	ptra, fp
24ca0     B2 00 A0 FD | 	call	#popregs_
24ca4                 | __system___gc_doalloc_ret
24ca4     2D 00 64 FD | 	ret
24ca8                 | 
24ca8                 | __system___gc_isvalidptr
24ca8     F8 16 06 F4 | 	bitl	arg03, #248
24cac     08 16 86 F1 | 	sub	arg03, #8
24cb0     09 17 52 F2 | 	cmps	arg03, arg01 wc
24cb4     08 00 90 CD |  if_b	jmp	#LR__3450
24cb8     0A 17 52 F2 | 	cmps	arg03, arg02 wc
24cbc     08 00 90 CD |  if_b	jmp	#LR__3451
24cc0                 | LR__3450
24cc0     00 FA 05 F6 | 	mov	result1, #0
24cc4     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
24cc8                 | LR__3451
24cc8     0B 01 02 F6 | 	mov	_var01, arg03
24ccc     09 01 62 F5 | 	xor	_var01, arg01
24cd0     0F 00 CE F7 | 	test	_var01, #15 wz
24cd4     00 FA 05 56 |  if_ne	mov	result1, #0
24cd8     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
24cdc     0B 01 02 F6 | 	mov	_var01, arg03
24ce0     02 00 06 F1 | 	add	_var01, #2
24ce4     00 01 E2 FA | 	rdword	_var01, _var01
24ce8     7F 00 00 FF 
24cec     C0 01 06 F5 | 	and	_var01, ##65472
24cf0     36 00 00 FF 
24cf4     80 00 0E F2 | 	cmp	_var01, ##27776 wz
24cf8     00 FA 05 56 |  if_ne	mov	result1, #0
24cfc     0B FB 01 A6 |  if_e	mov	result1, arg03
24d00                 | __system___gc_isvalidptr_ret
24d00     2D 00 64 FD | 	ret
24d04                 | 
24d04                 | __system___gc_free
24d04     09 17 02 F6 | 	mov	arg03, arg01
24d08     6C FC BF FD | 	call	#__system___gc_ptrs
24d0c     FD 12 02 F6 | 	mov	arg01, result1
24d10     FE 14 02 F6 | 	mov	arg02, result2
24d14     90 FF BF FD | 	call	#__system___gc_isvalidptr
24d18     FD 14 0A F6 | 	mov	arg02, result1 wz
24d1c     28 00 90 AD |  if_e	jmp	#LR__3460
24d20     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24d24     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24d28     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24d2c     E0 BF BF FD | 	call	#__system___lockmem
24d30     0A 13 02 F6 | 	mov	arg01, arg02
24d34     14 00 B0 FD | 	call	#__system___gc_dofree
24d38     1C E6 05 F1 | 	add	ptr___system__dat__, #28
24d3c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
24d40     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
24d44     09 01 68 FC | 	wrlong	#0, arg01
24d48                 | LR__3460
24d48                 | __system___gc_free_ret
24d48     2D 00 64 FD | 	ret
24d4c                 | 
24d4c                 | __system___gc_dofree
24d4c     06 4A 05 F6 | 	mov	COUNT_, #6
24d50     A8 00 A0 FD | 	call	#pushregs_
24d54     09 1F 02 F6 | 	mov	local01, arg01
24d58     1C FC BF FD | 	call	#__system___gc_ptrs
24d5c     FD 20 02 F6 | 	mov	local02, result1
24d60     FE 22 02 F6 | 	mov	local03, result2
24d64     0F 15 02 F6 | 	mov	arg02, local01
24d68     02 14 06 F1 | 	add	arg02, #2
24d6c     36 00 80 FF 
24d70     0A 1F 59 FC | 	wrword	##27791, arg02
24d74     0F 25 02 F6 | 	mov	local04, local01
24d78     0F 13 02 F6 | 	mov	arg01, local01
24d7c     09 27 EA FA | 	rdword	local05, arg01 wz
24d80     00 FA 05 A6 |  if_e	mov	result1, #0
24d84     04 26 66 50 |  if_ne	shl	local05, #4
24d88     13 13 02 51 |  if_ne	add	arg01, local05
24d8c     09 FB 01 56 |  if_ne	mov	result1, arg01
24d90     FD 28 02 F6 | 	mov	local06, result1
24d94     97 24 48 FB | 	callpa	#(@LR__3471-@LR__3470)>>2,fcache_load_ptr_
24d98                 | LR__3470
24d98     04 24 06 F1 | 	add	local04, #4
24d9c     12 15 EA FA | 	rdword	arg02, local04 wz
24da0     10 13 02 F6 | 	mov	arg01, local02
24da4     00 FA 05 A6 |  if_e	mov	result1, #0
24da8     04 14 66 50 |  if_ne	shl	arg02, #4
24dac     0A 13 02 51 |  if_ne	add	arg01, arg02
24db0     09 FB 01 56 |  if_ne	mov	result1, arg01
24db4     FD 24 0A F6 | 	mov	local04, result1 wz
24db8     24 00 90 AD |  if_e	jmp	#LR__3472
24dbc     12 13 02 F6 | 	mov	arg01, local04
24dc0     00 FA 05 F6 | 	mov	result1, #0
24dc4     02 12 06 F1 | 	add	arg01, #2
24dc8     09 13 E2 FA | 	rdword	arg01, arg01
24dcc     36 00 00 FF 
24dd0     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24dd4     01 FA 65 A6 |  if_e	neg	result1, #1
24dd8     00 FA 0D F2 | 	cmp	result1, #0 wz
24ddc     B8 FF 9F AD |  if_e	jmp	#LR__3470
24de0                 | LR__3471
24de0                 | LR__3472
24de0     00 24 0E F2 | 	cmp	local04, #0 wz
24de4     10 25 02 A6 |  if_e	mov	local04, local02
24de8     12 15 02 F6 | 	mov	arg02, local04
24dec     06 14 06 F1 | 	add	arg02, #6
24df0     0F 13 02 F6 | 	mov	arg01, local01
24df4     0A 15 E2 FA | 	rdword	arg02, arg02
24df8     06 12 06 F1 | 	add	arg01, #6
24dfc     09 15 52 FC | 	wrword	arg02, arg01
24e00     0F 15 0A F6 | 	mov	arg02, local01 wz
24e04     00 FA 05 A6 |  if_e	mov	result1, #0
24e08     10 15 82 51 |  if_ne	sub	arg02, local02
24e0c     04 14 46 50 |  if_ne	shr	arg02, #4
24e10     0A FB 01 56 |  if_ne	mov	result1, arg02
24e14     12 15 02 F6 | 	mov	arg02, local04
24e18     06 14 06 F1 | 	add	arg02, #6
24e1c     0A FB 51 FC | 	wrword	result1, arg02
24e20     10 25 0A F2 | 	cmp	local04, local02 wz
24e24     A4 00 90 AD |  if_e	jmp	#LR__3475
24e28     12 13 02 F6 | 	mov	arg01, local04
24e2c     09 27 EA FA | 	rdword	local05, arg01 wz
24e30     00 FA 05 A6 |  if_e	mov	result1, #0
24e34     04 26 66 50 |  if_ne	shl	local05, #4
24e38     13 13 02 51 |  if_ne	add	arg01, local05
24e3c     09 FB 01 56 |  if_ne	mov	result1, arg01
24e40     0F FB 09 F2 | 	cmp	result1, local01 wz
24e44     84 00 90 5D |  if_ne	jmp	#LR__3474
24e48     12 29 E2 FA | 	rdword	local06, local04
24e4c     0F 15 E2 FA | 	rdword	arg02, local01
24e50     0A 29 02 F1 | 	add	local06, arg02
24e54     12 29 52 FC | 	wrword	local06, local04
24e58     0F 29 02 F6 | 	mov	local06, local01
24e5c     02 28 06 F1 | 	add	local06, #2
24e60     14 01 58 FC | 	wrword	#0, local06
24e64     0F 13 02 F6 | 	mov	arg01, local01
24e68     09 27 EA FA | 	rdword	local05, arg01 wz
24e6c     00 FA 05 A6 |  if_e	mov	result1, #0
24e70     04 26 66 50 |  if_ne	shl	local05, #4
24e74     13 13 02 51 |  if_ne	add	arg01, local05
24e78     09 FB 01 56 |  if_ne	mov	result1, arg01
24e7c     FD 28 02 F6 | 	mov	local06, result1
24e80     11 29 52 F2 | 	cmps	local06, local03 wc
24e84     20 00 90 3D |  if_ae	jmp	#LR__3473
24e88     12 15 0A F6 | 	mov	arg02, local04 wz
24e8c     00 FA 05 A6 |  if_e	mov	result1, #0
24e90     10 15 82 51 |  if_ne	sub	arg02, local02
24e94     04 14 46 50 |  if_ne	shr	arg02, #4
24e98     0A FB 01 56 |  if_ne	mov	result1, arg02
24e9c     14 15 02 F6 | 	mov	arg02, local06
24ea0     04 14 06 F1 | 	add	arg02, #4
24ea4     0A FB 51 FC | 	wrword	result1, arg02
24ea8                 | LR__3473
24ea8     0F 15 02 F6 | 	mov	arg02, local01
24eac     06 14 06 F1 | 	add	arg02, #6
24eb0     12 FD 01 F6 | 	mov	result2, local04
24eb4     0A 15 E2 FA | 	rdword	arg02, arg02
24eb8     06 FC 05 F1 | 	add	result2, #6
24ebc     FE 14 52 FC | 	wrword	arg02, result2
24ec0     06 1E 06 F1 | 	add	local01, #6
24ec4     0F 01 58 FC | 	wrword	#0, local01
24ec8     12 1F 02 F6 | 	mov	local01, local04
24ecc                 | LR__3474
24ecc                 | LR__3475
24ecc     0F 13 02 F6 | 	mov	arg01, local01
24ed0     09 27 EA FA | 	rdword	local05, arg01 wz
24ed4     00 FA 05 A6 |  if_e	mov	result1, #0
24ed8     04 26 66 50 |  if_ne	shl	local05, #4
24edc     13 13 02 51 |  if_ne	add	arg01, local05
24ee0     09 FB 01 56 |  if_ne	mov	result1, arg01
24ee4     FD 14 0A F6 | 	mov	arg02, result1 wz
24ee8     B8 00 90 AD |  if_e	jmp	#LR__3477
24eec     11 15 52 F2 | 	cmps	arg02, local03 wc
24ef0     B0 00 90 3D |  if_ae	jmp	#LR__3477
24ef4     0A 13 02 F6 | 	mov	arg01, arg02
24ef8     00 FA 05 F6 | 	mov	result1, #0
24efc     02 12 06 F1 | 	add	arg01, #2
24f00     09 13 E2 FA | 	rdword	arg01, arg01
24f04     36 00 00 FF 
24f08     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
24f0c     01 FA 65 A6 |  if_e	neg	result1, #1
24f10     00 FA 0D F2 | 	cmp	result1, #0 wz
24f14     8C 00 90 AD |  if_e	jmp	#LR__3477
24f18     0F 25 02 F6 | 	mov	local04, local01
24f1c     12 29 E2 FA | 	rdword	local06, local04
24f20     0A 13 02 F6 | 	mov	arg01, arg02
24f24     09 1F E2 FA | 	rdword	local01, arg01
24f28     0F 29 02 F1 | 	add	local06, local01
24f2c     12 29 52 FC | 	wrword	local06, local04
24f30     09 29 02 F6 | 	mov	local06, arg01
24f34     06 28 06 F1 | 	add	local06, #6
24f38     12 1F 02 F6 | 	mov	local01, local04
24f3c     14 29 E2 FA | 	rdword	local06, local06
24f40     06 1E 06 F1 | 	add	local01, #6
24f44     0F 29 52 FC | 	wrword	local06, local01
24f48     09 29 02 F6 | 	mov	local06, arg01
24f4c     02 28 06 F1 | 	add	local06, #2
24f50     14 55 59 FC | 	wrword	#170, local06
24f54     09 29 02 F6 | 	mov	local06, arg01
24f58     06 28 06 F1 | 	add	local06, #6
24f5c     14 01 58 FC | 	wrword	#0, local06
24f60     09 27 EA FA | 	rdword	local05, arg01 wz
24f64     00 FA 05 A6 |  if_e	mov	result1, #0
24f68     04 26 66 50 |  if_ne	shl	local05, #4
24f6c     13 13 02 51 |  if_ne	add	arg01, local05
24f70     09 FB 01 56 |  if_ne	mov	result1, arg01
24f74     FD 28 0A F6 | 	mov	local06, result1 wz
24f78     28 00 90 AD |  if_e	jmp	#LR__3476
24f7c     11 29 52 F2 | 	cmps	local06, local03 wc
24f80     20 00 90 3D |  if_ae	jmp	#LR__3476
24f84     12 15 0A F6 | 	mov	arg02, local04 wz
24f88     00 FA 05 A6 |  if_e	mov	result1, #0
24f8c     10 15 82 51 |  if_ne	sub	arg02, local02
24f90     04 14 46 50 |  if_ne	shr	arg02, #4
24f94     0A FB 01 56 |  if_ne	mov	result1, arg02
24f98     14 25 02 F6 | 	mov	local04, local06
24f9c     04 24 06 F1 | 	add	local04, #4
24fa0     12 FB 51 FC | 	wrword	result1, local04
24fa4                 | LR__3476
24fa4                 | LR__3477
24fa4     14 FB 01 F6 | 	mov	result1, local06
24fa8     A7 F0 03 F6 | 	mov	ptra, fp
24fac     B2 00 A0 FD | 	call	#popregs_
24fb0                 | __system___gc_dofree_ret
24fb0     2D 00 64 FD | 	ret
24fb4                 | 
24fb4                 | __system___gc_docollect
24fb4     05 4A 05 F6 | 	mov	COUNT_, #5
24fb8     A8 00 A0 FD | 	call	#pushregs_
24fbc     B8 F9 BF FD | 	call	#__system___gc_ptrs
24fc0     FE 1E 02 F6 | 	mov	local01, result2
24fc4     FD 20 02 F6 | 	mov	local02, result1
24fc8     10 13 02 F6 | 	mov	arg01, local02
24fcc     09 23 EA FA | 	rdword	local03, arg01 wz
24fd0     00 FA 05 A6 |  if_e	mov	result1, #0
24fd4     04 22 66 50 |  if_ne	shl	local03, #4
24fd8     11 13 02 51 |  if_ne	add	arg01, local03
24fdc     09 FB 01 56 |  if_ne	mov	result1, arg01
24fe0     FD 24 0A F6 | 	mov	local04, result1 wz
24fe4     00 FA 05 F6 | 	mov	result1, #0
24fe8     01 FA 61 FD | 	cogid	result1
24fec     FD 26 02 F6 | 	mov	local05, result1
24ff0     48 00 90 AD |  if_e	jmp	#LR__3482
24ff4     97 22 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
24ff8                 | LR__3480
24ff8     0F 25 52 F2 | 	cmps	local04, local01 wc
24ffc     3C 00 90 3D |  if_ae	jmp	#LR__3482
25000     12 15 02 F6 | 	mov	arg02, local04
25004     02 14 06 F1 | 	add	arg02, #2
25008     0A 15 E2 FA | 	rdword	arg02, arg02
2500c     20 14 26 F5 | 	andn	arg02, #32
25010     12 13 02 F6 | 	mov	arg01, local04
25014     02 12 06 F1 | 	add	arg01, #2
25018     09 15 52 FC | 	wrword	arg02, arg01
2501c     12 13 02 F6 | 	mov	arg01, local04
25020     09 23 EA FA | 	rdword	local03, arg01 wz
25024     00 FA 05 A6 |  if_e	mov	result1, #0
25028     04 22 66 50 |  if_ne	shl	local03, #4
2502c     11 13 02 51 |  if_ne	add	arg01, local03
25030     09 FB 01 56 |  if_ne	mov	result1, arg01
25034     FD 24 0A F6 | 	mov	local04, result1 wz
25038     BC FF 9F 5D |  if_ne	jmp	#LR__3480
2503c                 | LR__3481
2503c                 | LR__3482
2503c     00 22 06 F6 | 	mov	local03, #0
25040     00 12 06 F6 | 	mov	arg01, #0
25044     A0 BC BF FD | 	call	#__system____topofstack
25048     FD 14 02 F6 | 	mov	arg02, result1
2504c     11 13 02 F6 | 	mov	arg01, local03
25050     90 00 B0 FD | 	call	#__system___gc_markhub
25054     1C 01 B0 FD | 	call	#__system___gc_markcog
25058     10 13 02 F6 | 	mov	arg01, local02
2505c     09 23 EA FA | 	rdword	local03, arg01 wz
25060     00 FA 05 A6 |  if_e	mov	result1, #0
25064     04 22 66 50 |  if_ne	shl	local03, #4
25068     11 13 02 51 |  if_ne	add	arg01, local03
2506c     09 FB 01 56 |  if_ne	mov	result1, arg01
25070     FD 20 0A F6 | 	mov	local02, result1 wz
25074     60 00 90 AD |  if_e	jmp	#LR__3486
25078                 | LR__3483
25078     10 25 02 F6 | 	mov	local04, local02
2507c     12 13 02 F6 | 	mov	arg01, local04
25080     09 23 EA FA | 	rdword	local03, arg01 wz
25084     00 FA 05 A6 |  if_e	mov	result1, #0
25088     04 22 66 50 |  if_ne	shl	local03, #4
2508c     11 13 02 51 |  if_ne	add	arg01, local03
25090     09 FB 01 56 |  if_ne	mov	result1, arg01
25094     FD 20 02 F6 | 	mov	local02, result1
25098     12 15 02 F6 | 	mov	arg02, local04
2509c     02 14 06 F1 | 	add	arg02, #2
250a0     0A 15 E2 FA | 	rdword	arg02, arg02
250a4     20 14 CE F7 | 	test	arg02, #32 wz
250a8     10 14 CE A7 |  if_e	test	arg02, #16 wz
250ac     1C 00 90 5D |  if_ne	jmp	#LR__3485
250b0     0A 15 42 F8 | 	getnib	arg02, arg02, #0
250b4     13 15 0A F2 | 	cmp	arg02, local05 wz
250b8     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
250bc     0C 00 90 5D |  if_ne	jmp	#LR__3484
250c0     12 13 02 F6 | 	mov	arg01, local04
250c4     84 FC BF FD | 	call	#__system___gc_dofree
250c8     FD 20 02 F6 | 	mov	local02, result1
250cc                 | LR__3484
250cc                 | LR__3485
250cc     00 20 0E F2 | 	cmp	local02, #0 wz
250d0     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
250d4     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3483
250d8                 | LR__3486
250d8     A7 F0 03 F6 | 	mov	ptra, fp
250dc     B2 00 A0 FD | 	call	#popregs_
250e0                 | __system___gc_docollect_ret
250e0     2D 00 64 FD | 	ret
250e4                 | 
250e4                 | __system___gc_markhub
250e4     04 4A 05 F6 | 	mov	COUNT_, #4
250e8     A8 00 A0 FD | 	call	#pushregs_
250ec     09 1F 02 F6 | 	mov	local01, arg01
250f0     0A 21 02 F6 | 	mov	local02, arg02
250f4     80 F8 BF FD | 	call	#__system___gc_ptrs
250f8     FD 22 02 F6 | 	mov	local03, result1
250fc     FE 24 02 F6 | 	mov	local04, result2
25100                 | LR__3490
25100     10 1F 52 F2 | 	cmps	local01, local02 wc
25104     60 00 90 3D |  if_ae	jmp	#LR__3491
25108     0F 17 02 FB | 	rdlong	arg03, local01
2510c     04 1E 06 F1 | 	add	local01, #4
25110     12 15 02 F6 | 	mov	arg02, local04
25114     11 13 02 F6 | 	mov	arg01, local03
25118     8C FB BF FD | 	call	#__system___gc_isvalidptr
2511c     FD 16 0A F6 | 	mov	arg03, result1 wz
25120     DC FF 9F AD |  if_e	jmp	#LR__3490
25124     0B 13 02 F6 | 	mov	arg01, arg03
25128     00 FA 05 F6 | 	mov	result1, #0
2512c     02 12 06 F1 | 	add	arg01, #2
25130     09 13 E2 FA | 	rdword	arg01, arg01
25134     36 00 00 FF 
25138     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2513c     01 FA 65 A6 |  if_e	neg	result1, #1
25140     00 FA 0D F2 | 	cmp	result1, #0 wz
25144     B8 FF 9F 5D |  if_ne	jmp	#LR__3490
25148     0B FD 01 F6 | 	mov	result2, arg03
2514c     02 FC 05 F1 | 	add	result2, #2
25150     FE FC E1 FA | 	rdword	result2, result2
25154     0F FC 25 F5 | 	andn	result2, #15
25158     2E FC 45 F5 | 	or	result2, #46
2515c     02 16 06 F1 | 	add	arg03, #2
25160     0B FD 51 FC | 	wrword	result2, arg03
25164     98 FF 9F FD | 	jmp	#LR__3490
25168                 | LR__3491
25168     A7 F0 03 F6 | 	mov	ptra, fp
2516c     B2 00 A0 FD | 	call	#popregs_
25170                 | __system___gc_markhub_ret
25170     2D 00 64 FD | 	ret
25174                 | 
25174                 | __system___gc_markcog
25174     04 4A 05 F6 | 	mov	COUNT_, #4
25178     A8 00 A0 FD | 	call	#pushregs_
2517c     F8 F7 BF FD | 	call	#__system___gc_ptrs
25180     FD 1E 02 F6 | 	mov	local01, result1
25184     FE 20 02 F6 | 	mov	local02, result2
25188     EF 23 06 F6 | 	mov	local03, #495
2518c                 | LR__3500
2518c                 | 	'.live	local03
2518c     00 22 96 F9 | 	alts	local03, #0
25190     11 25 02 F6 | 	mov	local04, local03
25194     0F 13 02 F6 | 	mov	arg01, local01
25198     10 15 02 F6 | 	mov	arg02, local02
2519c     12 17 02 F6 | 	mov	arg03, local04
251a0     04 FB BF FD | 	call	#__system___gc_isvalidptr
251a4     00 FA 0D F2 | 	cmp	result1, #0 wz
251a8     18 00 90 AD |  if_e	jmp	#LR__3501
251ac     FD 24 02 F6 | 	mov	local04, result1
251b0     02 24 06 F1 | 	add	local04, #2
251b4     12 25 E2 FA | 	rdword	local04, local04
251b8     20 24 46 F5 | 	or	local04, #32
251bc     02 FA 05 F1 | 	add	result1, #2
251c0     FD 24 52 FC | 	wrword	local04, result1
251c4                 | LR__3501
251c4     01 22 86 F1 | 	sub	local03, #1
251c8     00 22 56 F2 | 	cmps	local03, #0 wc
251cc     BC FF 9F 3D |  if_ae	jmp	#LR__3500
251d0     A7 F0 03 F6 | 	mov	ptra, fp
251d4     B2 00 A0 FD | 	call	#popregs_
251d8                 | __system___gc_markcog_ret
251d8     2D 00 64 FD | 	ret
251dc                 | 
251dc                 | __system__opendir
251dc     06 4A 05 F6 | 	mov	COUNT_, #6
251e0     A8 00 A0 FD | 	call	#pushregs_
251e4     84 E7 05 F1 | 	add	ptr___system__dat__, #388
251e8     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
251ec     09 15 02 F6 | 	mov	arg02, arg01
251f0     0F 13 02 F6 | 	mov	arg01, local01
251f4     00 16 06 F6 | 	mov	arg03, #0
251f8     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
251fc     A8 C2 BF FD | 	call	#__system____getvfsforfile
25200     FD 20 0A F6 | 	mov	local02, result1 wz
25204     10 00 90 AD |  if_e	jmp	#LR__3510
25208     28 20 06 F1 | 	add	local02, #40
2520c     10 17 0A FB | 	rdlong	arg03, local02 wz
25210     28 20 86 F1 | 	sub	local02, #40
25214     14 00 90 5D |  if_ne	jmp	#LR__3511
25218                 | LR__3510
25218     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2521c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
25220     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25224     00 FA 05 F6 | 	mov	result1, #0
25228     90 00 90 FD | 	jmp	#LR__3513
2522c                 | LR__3511
2522c     5C 12 06 F6 | 	mov	arg01, #92
25230     10 14 06 F6 | 	mov	arg02, #16
25234     C0 F9 BF FD | 	call	#__system___gc_doalloc
25238     FD 22 0A F6 | 	mov	local03, result1 wz
2523c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25240     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
25244     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25248     00 FA 05 A6 |  if_e	mov	result1, #0
2524c     6C 00 90 AD |  if_e	jmp	#LR__3513
25250     28 20 06 F1 | 	add	local02, #40
25254     10 25 02 FB | 	rdlong	local04, local02
25258     12 27 02 F6 | 	mov	local05, local04
2525c     28 20 86 F1 | 	sub	local02, #40
25260     13 26 46 F7 | 	zerox	local05, #19
25264     14 24 46 F0 | 	shr	local04, #20
25268     02 24 66 F0 | 	shl	local04, #2
2526c     ED 24 02 F1 | 	add	local04, __methods__
25270     12 25 02 FB | 	rdlong	local04, local04
25274     11 13 02 F6 | 	mov	arg01, local03
25278     0F 15 02 F6 | 	mov	arg02, local01
2527c     F2 28 02 F6 | 	mov	local06, objptr
25280     13 E5 01 F6 | 	mov	objptr, local05
25284     2D 24 62 FD | 	call	local04
25288     14 E5 01 F6 | 	mov	objptr, local06
2528c     FD 16 0A F6 | 	mov	arg03, result1 wz
25290     20 00 90 AD |  if_e	jmp	#LR__3512
25294     00 16 4E F2 | 	cmps	arg03, #0 wz
25298     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2529c     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
252a0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
252a4     11 13 02 F6 | 	mov	arg01, local03
252a8     58 FA BF FD | 	call	#__system___gc_free
252ac     00 FA 05 F6 | 	mov	result1, #0
252b0     08 00 90 FD | 	jmp	#LR__3513
252b4                 | LR__3512
252b4     11 21 62 FC | 	wrlong	local02, local03
252b8     11 FB 01 F6 | 	mov	result1, local03
252bc                 | LR__3513
252bc     A7 F0 03 F6 | 	mov	ptra, fp
252c0     B2 00 A0 FD | 	call	#popregs_
252c4                 | __system__opendir_ret
252c4     2D 00 64 FD | 	ret
252c8                 | 
252c8                 | __system__closedir
252c8     04 4A 05 F6 | 	mov	COUNT_, #4
252cc     A8 00 A0 FD | 	call	#pushregs_
252d0     09 1F 02 F6 | 	mov	local01, arg01
252d4     0F 13 02 FB | 	rdlong	arg01, local01
252d8     2C 12 06 F1 | 	add	arg01, #44
252dc     09 21 02 FB | 	rdlong	local02, arg01
252e0     10 23 02 F6 | 	mov	local03, local02
252e4     13 22 46 F7 | 	zerox	local03, #19
252e8     14 20 46 F0 | 	shr	local02, #20
252ec     02 20 66 F0 | 	shl	local02, #2
252f0     ED 20 02 F1 | 	add	local02, __methods__
252f4     10 21 02 FB | 	rdlong	local02, local02
252f8     0F 13 02 F6 | 	mov	arg01, local01
252fc     F2 24 02 F6 | 	mov	local04, objptr
25300     11 E5 01 F6 | 	mov	objptr, local03
25304     2D 20 62 FD | 	call	local02
25308     12 E5 01 F6 | 	mov	objptr, local04
2530c     FD 24 02 F6 | 	mov	local04, result1
25310     0F 13 02 F6 | 	mov	arg01, local01
25314     EC F9 BF FD | 	call	#__system___gc_free
25318     00 24 4E F2 | 	cmps	local04, #0 wz
2531c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25320     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
25324     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25328     01 FA 65 56 |  if_ne	neg	result1, #1
2532c     00 FA 05 A6 |  if_e	mov	result1, #0
25330     A7 F0 03 F6 | 	mov	ptra, fp
25334     B2 00 A0 FD | 	call	#popregs_
25338                 | __system__closedir_ret
25338     2D 00 64 FD | 	ret
2533c                 | 
2533c                 | __system__readdir
2533c     04 4A 05 F6 | 	mov	COUNT_, #4
25340     A8 00 A0 FD | 	call	#pushregs_
25344     09 15 0A FB | 	rdlong	arg02, arg01 wz
25348     08 12 06 F1 | 	add	arg01, #8
2534c     09 1F 02 F6 | 	mov	local01, arg01
25350     08 12 86 F1 | 	sub	arg01, #8
25354     00 FA 05 A6 |  if_e	mov	result1, #0
25358     5C 00 90 AD |  if_e	jmp	#LR__3521
2535c     30 14 06 F1 | 	add	arg02, #48
25360     0A 21 02 FB | 	rdlong	local02, arg02
25364     10 23 02 F6 | 	mov	local03, local02
25368     13 22 46 F7 | 	zerox	local03, #19
2536c     14 20 46 F0 | 	shr	local02, #20
25370     02 20 66 F0 | 	shl	local02, #2
25374     ED 20 02 F1 | 	add	local02, __methods__
25378     10 21 02 FB | 	rdlong	local02, local02
2537c     0F 15 02 F6 | 	mov	arg02, local01
25380     F2 24 02 F6 | 	mov	local04, objptr
25384     11 E5 01 F6 | 	mov	objptr, local03
25388     2D 20 62 FD | 	call	local02
2538c     12 E5 01 F6 | 	mov	objptr, local04
25390     00 FA 4D F2 | 	cmps	result1, #0 wz
25394     1C 00 90 AD |  if_e	jmp	#LR__3520
25398     01 FA 55 F2 | 	cmps	result1, #1 wc
2539c     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
253a0     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
253a4     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
253a8     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
253ac     00 FA 05 F6 | 	mov	result1, #0
253b0     04 00 90 FD | 	jmp	#LR__3521
253b4                 | LR__3520
253b4     0F FB 01 F6 | 	mov	result1, local01
253b8                 | LR__3521
253b8     A7 F0 03 F6 | 	mov	ptra, fp
253bc     B2 00 A0 FD | 	call	#popregs_
253c0                 | __system__readdir_ret
253c0     2D 00 64 FD | 	ret
253c4                 | 
253c4                 | __system___openraw
253c4     15 4A 05 F6 | 	mov	COUNT_, #21
253c8     A8 00 A0 FD | 	call	#pushregs_
253cc     09 1F 02 F6 | 	mov	local01, arg01
253d0     0A 21 02 F6 | 	mov	local02, arg02
253d4     0B 23 02 F6 | 	mov	local03, arg03
253d8     0C 25 02 F6 | 	mov	local04, arg04
253dc     04 26 06 F6 | 	mov	local05, #4
253e0     0F 29 02 F6 | 	mov	local06, local01
253e4     00 2A 06 F6 | 	mov	local07, #0
253e8     84 E7 05 F1 | 	add	ptr___system__dat__, #388
253ec     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
253f0     16 13 02 F6 | 	mov	arg01, local08
253f4     10 15 02 F6 | 	mov	arg02, local02
253f8     00 16 06 F6 | 	mov	arg03, #0
253fc     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
25400     A4 C0 BF FD | 	call	#__system____getvfsforfile
25404     FD 2E 0A F6 | 	mov	local09, result1 wz
25408     10 00 90 AD |  if_e	jmp	#LR__3530
2540c     20 2E 06 F1 | 	add	local09, #32
25410     17 FB 09 FB | 	rdlong	result1, local09 wz
25414     20 2E 86 F1 | 	sub	local09, #32
25418     14 00 90 5D |  if_ne	jmp	#LR__3531
2541c                 | LR__3530
2541c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25420     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
25424     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25428     01 FA 65 F6 | 	neg	result1, #1
2542c     8C 02 90 FD | 	jmp	#LR__3544
25430                 | LR__3531
25430     14 13 02 F6 | 	mov	arg01, local06
25434     00 14 06 F6 | 	mov	arg02, #0
25438     34 16 06 F6 | 	mov	arg03, #52
2543c     09 31 02 F6 | 	mov	local10, arg01
25440     98 00 A0 FD | 	call	#\builtin_bytefill_
25444     20 2E 06 F1 | 	add	local09, #32
25448     17 33 02 FB | 	rdlong	local11, local09
2544c     19 35 02 F6 | 	mov	local12, local11
25450     19 37 02 F6 | 	mov	local13, local11
25454     20 2E 86 F1 | 	sub	local09, #32
25458     1B 39 02 F6 | 	mov	local14, local13
2545c     13 34 46 F7 | 	zerox	local12, #19
25460     14 38 46 F0 | 	shr	local14, #20
25464     02 38 66 F0 | 	shl	local14, #2
25468     ED 38 02 F1 | 	add	local14, __methods__
2546c     1C 39 02 FB | 	rdlong	local14, local14
25470     14 3B 02 F6 | 	mov	local15, local06
25474     16 3D 02 F6 | 	mov	local16, local08
25478     11 3F 02 F6 | 	mov	local17, local03
2547c     1D 13 02 F6 | 	mov	arg01, local15
25480     1E 15 02 F6 | 	mov	arg02, local16
25484     1F 17 02 F6 | 	mov	arg03, local17
25488     F2 40 02 F6 | 	mov	local18, objptr
2548c     1A E5 01 F6 | 	mov	objptr, local12
25490     2D 38 62 FD | 	call	local14
25494     20 E5 01 F6 | 	mov	objptr, local18
25498     FD 42 0A F6 | 	mov	local19, result1 wz
2549c     04 22 CE 57 |  if_ne	test	local03, #4 wz
254a0     58 00 90 AD |  if_e	jmp	#LR__3532
254a4     24 2E 06 F1 | 	add	local09, #36
254a8     17 33 02 FB | 	rdlong	local11, local09
254ac     19 35 02 F6 | 	mov	local12, local11
254b0     19 37 02 F6 | 	mov	local13, local11
254b4     24 2E 86 F1 | 	sub	local09, #36
254b8     1B 39 02 F6 | 	mov	local14, local13
254bc     13 34 46 F7 | 	zerox	local12, #19
254c0     14 38 46 F0 | 	shr	local14, #20
254c4     02 38 66 F0 | 	shl	local14, #2
254c8     ED 38 02 F1 | 	add	local14, __methods__
254cc     1C 39 02 FB | 	rdlong	local14, local14
254d0     14 3B 02 F6 | 	mov	local15, local06
254d4     16 3D 02 F6 | 	mov	local16, local08
254d8     12 3F 02 F6 | 	mov	local17, local04
254dc     1D 13 02 F6 | 	mov	arg01, local15
254e0     1E 15 02 F6 | 	mov	arg02, local16
254e4     1F 17 02 F6 | 	mov	arg03, local17
254e8     F2 40 02 F6 | 	mov	local18, objptr
254ec     1A E5 01 F6 | 	mov	objptr, local12
254f0     2D 38 62 FD | 	call	local14
254f4     20 E5 01 F6 | 	mov	objptr, local18
254f8     FD 42 02 F6 | 	mov	local19, result1
254fc                 | LR__3532
254fc     00 42 0E F2 | 	cmp	local19, #0 wz
25500     8C 01 90 5D |  if_ne	jmp	#LR__3542
25504     11 45 02 F6 | 	mov	local20, local03
25508     03 44 0E F5 | 	and	local20, #3 wz
2550c     02 26 46 55 |  if_ne	or	local05, #2
25510     01 44 0E F2 | 	cmp	local20, #1 wz
25514     01 26 46 55 |  if_ne	or	local05, #1
25518     20 22 CE F7 | 	test	local03, #32 wz
2551c     C0 26 46 55 |  if_ne	or	local05, #192
25520     08 28 06 F1 | 	add	local06, #8
25524     14 27 62 FC | 	wrlong	local05, local06
25528     0C 28 06 F1 | 	add	local06, #12
2552c     14 47 0A FB | 	rdlong	local21, local06 wz
25530     14 28 86 F1 | 	sub	local06, #20
25534     18 00 90 5D |  if_ne	jmp	#LR__3533
25538     04 2E 06 F1 | 	add	local09, #4
2553c     17 47 02 FB | 	rdlong	local21, local09
25540     04 2E 86 F1 | 	sub	local09, #4
25544     14 28 06 F1 | 	add	local06, #20
25548     14 47 62 FC | 	wrlong	local21, local06
2554c     14 28 86 F1 | 	sub	local06, #20
25550                 | LR__3533
25550     18 28 06 F1 | 	add	local06, #24
25554     14 47 0A FB | 	rdlong	local21, local06 wz
25558     18 28 86 F1 | 	sub	local06, #24
2555c     18 00 90 5D |  if_ne	jmp	#LR__3534
25560     08 2E 06 F1 | 	add	local09, #8
25564     17 47 02 FB | 	rdlong	local21, local09
25568     08 2E 86 F1 | 	sub	local09, #8
2556c     18 28 06 F1 | 	add	local06, #24
25570     14 47 62 FC | 	wrlong	local21, local06
25574     18 28 86 F1 | 	sub	local06, #24
25578                 | LR__3534
25578     24 28 06 F1 | 	add	local06, #36
2557c     14 47 0A FB | 	rdlong	local21, local06 wz
25580     24 28 86 F1 | 	sub	local06, #36
25584     17 47 02 AB |  if_e	rdlong	local21, local09
25588     24 28 06 A1 |  if_e	add	local06, #36
2558c     14 47 62 AC |  if_e	wrlong	local21, local06
25590     24 28 86 A1 |  if_e	sub	local06, #36
25594     28 28 06 F1 | 	add	local06, #40
25598     14 47 0A FB | 	rdlong	local21, local06 wz
2559c     28 28 86 F1 | 	sub	local06, #40
255a0     18 00 90 5D |  if_ne	jmp	#LR__3535
255a4     10 2E 06 F1 | 	add	local09, #16
255a8     17 47 02 FB | 	rdlong	local21, local09
255ac     10 2E 86 F1 | 	sub	local09, #16
255b0     28 28 06 F1 | 	add	local06, #40
255b4     14 47 62 FC | 	wrlong	local21, local06
255b8     28 28 86 F1 | 	sub	local06, #40
255bc                 | LR__3535
255bc     30 28 06 F1 | 	add	local06, #48
255c0     14 47 0A FB | 	rdlong	local21, local06 wz
255c4     30 28 86 F1 | 	sub	local06, #48
255c8     18 00 90 5D |  if_ne	jmp	#LR__3536
255cc     0C 2E 06 F1 | 	add	local09, #12
255d0     17 47 02 FB | 	rdlong	local21, local09
255d4     0C 2E 86 F1 | 	sub	local09, #12
255d8     30 28 06 F1 | 	add	local06, #48
255dc     14 47 62 FC | 	wrlong	local21, local06
255e0     30 28 86 F1 | 	sub	local06, #48
255e4                 | LR__3536
255e4     1C 28 06 F1 | 	add	local06, #28
255e8     14 47 0A FB | 	rdlong	local21, local06 wz
255ec     1C 28 86 F1 | 	sub	local06, #28
255f0     1C 00 90 5D |  if_ne	jmp	#LR__3537
255f4     01 2A 06 F6 | 	mov	local07, #1
255f8     F2 12 02 F6 | 	mov	arg01, objptr
255fc     00 D0 04 FF 
25600     00 12 46 F5 | 	or	arg01, ##161480704
25604     1C 28 06 F1 | 	add	local06, #28
25608     14 13 62 FC | 	wrlong	arg01, local06
2560c     1C 28 86 F1 | 	sub	local06, #28
25610                 | LR__3537
25610     20 28 06 F1 | 	add	local06, #32
25614     14 47 0A FB | 	rdlong	local21, local06 wz
25618     20 28 86 F1 | 	sub	local06, #32
2561c     1C 00 90 5D |  if_ne	jmp	#LR__3538
25620     01 2A 06 F6 | 	mov	local07, #1
25624     F2 12 02 F6 | 	mov	arg01, objptr
25628     00 D8 04 FF 
2562c     00 12 46 F5 | 	or	arg01, ##162529280
25630     20 28 06 F1 | 	add	local06, #32
25634     14 13 62 FC | 	wrlong	arg01, local06
25638     20 28 86 F1 | 	sub	local06, #32
2563c                 | LR__3538
2563c     2C 28 06 F1 | 	add	local06, #44
25640     14 47 0A FB | 	rdlong	local21, local06 wz
25644     2C 28 86 F1 | 	sub	local06, #44
25648     44 00 90 5D |  if_ne	jmp	#LR__3541
2564c     14 2E 06 F1 | 	add	local09, #20
25650     17 47 0A FB | 	rdlong	local21, local09 wz
25654     14 2E 86 F1 | 	sub	local09, #20
25658     18 00 90 AD |  if_e	jmp	#LR__3539
2565c     14 2E 06 F1 | 	add	local09, #20
25660     17 47 02 FB | 	rdlong	local21, local09
25664     2C 28 06 F1 | 	add	local06, #44
25668     14 47 62 FC | 	wrlong	local21, local06
2566c     2C 28 86 F1 | 	sub	local06, #44
25670     1C 00 90 FD | 	jmp	#LR__3540
25674                 | LR__3539
25674     01 2A 06 F6 | 	mov	local07, #1
25678     F2 12 02 F6 | 	mov	arg01, objptr
2567c     00 E0 04 FF 
25680     00 12 46 F5 | 	or	arg01, ##163577856
25684     2C 28 06 F1 | 	add	local06, #44
25688     14 13 62 FC | 	wrlong	arg01, local06
2568c     2C 28 86 F1 | 	sub	local06, #44
25690                 | LR__3540
25690                 | LR__3541
25690                 | LR__3542
25690     00 2A 0E F2 | 	cmp	local07, #0 wz
25694     14 13 02 56 |  if_ne	mov	arg01, local06
25698     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
2569c     00 42 0E F2 | 	cmp	local19, #0 wz
256a0     00 12 06 A6 |  if_e	mov	arg01, #0
256a4     10 00 90 5D |  if_ne	jmp	#LR__3543
256a8     00 12 4E F2 | 	cmps	arg01, #0 wz
256ac     20 E6 05 F1 | 	add	ptr___system__dat__, #32
256b0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
256b4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
256b8                 | LR__3543
256b8     21 FB 01 F6 | 	mov	result1, local19
256bc                 | LR__3544
256bc     A7 F0 03 F6 | 	mov	ptra, fp
256c0     B2 00 A0 FD | 	call	#popregs_
256c4                 | __system___openraw_ret
256c4     2D 00 64 FD | 	ret
256c8                 | 
256c8                 | __system___closeraw
256c8     05 4A 05 F6 | 	mov	COUNT_, #5
256cc     A8 00 A0 FD | 	call	#pushregs_
256d0     09 1F 02 F6 | 	mov	local01, arg01
256d4     00 20 06 F6 | 	mov	local02, #0
256d8     08 1E 06 F1 | 	add	local01, #8
256dc     0F FB 09 FB | 	rdlong	result1, local01 wz
256e0     08 1E 86 F1 | 	sub	local01, #8
256e4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
256e8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
256ec     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
256f0     01 FA 65 A6 |  if_e	neg	result1, #1
256f4     A8 00 90 AD |  if_e	jmp	#LR__3552
256f8     2C 1E 06 F1 | 	add	local01, #44
256fc     0F FB 09 FB | 	rdlong	result1, local01 wz
25700     2C 1E 86 F1 | 	sub	local01, #44
25704     38 00 90 AD |  if_e	jmp	#LR__3550
25708     2C 1E 06 F1 | 	add	local01, #44
2570c     0F 23 02 FB | 	rdlong	local03, local01
25710     11 25 02 F6 | 	mov	local04, local03
25714     2C 1E 86 F1 | 	sub	local01, #44
25718     13 24 46 F7 | 	zerox	local04, #19
2571c     14 22 46 F0 | 	shr	local03, #20
25720     02 22 66 F0 | 	shl	local03, #2
25724     ED 22 02 F1 | 	add	local03, __methods__
25728     11 23 02 FB | 	rdlong	local03, local03
2572c     0F 13 02 F6 | 	mov	arg01, local01
25730     F2 26 02 F6 | 	mov	local05, objptr
25734     12 E5 01 F6 | 	mov	objptr, local04
25738     2D 22 62 FD | 	call	local03
2573c     13 E5 01 F6 | 	mov	objptr, local05
25740                 | LR__3550
25740     24 1E 06 F1 | 	add	local01, #36
25744     0F 27 0A FB | 	rdlong	local05, local01 wz
25748     24 1E 86 F1 | 	sub	local01, #36
2574c     3C 00 90 AD |  if_e	jmp	#LR__3551
25750     24 1E 06 F1 | 	add	local01, #36
25754     0F 23 02 FB | 	rdlong	local03, local01
25758     11 25 02 F6 | 	mov	local04, local03
2575c     24 1E 86 F1 | 	sub	local01, #36
25760     13 24 46 F7 | 	zerox	local04, #19
25764     14 22 46 F0 | 	shr	local03, #20
25768     02 22 66 F0 | 	shl	local03, #2
2576c     ED 22 02 F1 | 	add	local03, __methods__
25770     11 23 02 FB | 	rdlong	local03, local03
25774     0F 13 02 F6 | 	mov	arg01, local01
25778     F2 26 02 F6 | 	mov	local05, objptr
2577c     12 E5 01 F6 | 	mov	objptr, local04
25780     2D 22 62 FD | 	call	local03
25784     13 E5 01 F6 | 	mov	objptr, local05
25788     FD 20 02 F6 | 	mov	local02, result1
2578c                 | LR__3551
2578c     0F 13 02 F6 | 	mov	arg01, local01
25790     00 14 06 F6 | 	mov	arg02, #0
25794     34 16 06 F6 | 	mov	arg03, #52
25798     98 00 A0 FD | 	call	#\builtin_bytefill_
2579c     10 FB 01 F6 | 	mov	result1, local02
257a0                 | LR__3552
257a0     A7 F0 03 F6 | 	mov	ptra, fp
257a4     B2 00 A0 FD | 	call	#popregs_
257a8                 | __system___closeraw_ret
257a8     2D 00 64 FD | 	ret
257ac                 | 
257ac                 | __system___vfs_open_sdcardx
257ac     0B 4A 05 F6 | 	mov	COUNT_, #11
257b0     A8 00 A0 FD | 	call	#pushregs_
257b4     09 23 02 F6 | 	mov	local03, arg01
257b8     0A 25 02 F6 | 	mov	local04, arg02
257bc     0B 27 02 F6 | 	mov	local05, arg03
257c0     0C 29 02 F6 | 	mov	local06, arg04
257c4     01 00 00 FF 
257c8     24 12 06 F6 | 	mov	arg01, ##548
257cc     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
257d0     FD 2A 02 F6 | 	mov	local07, result1
257d4     01 00 00 FF 
257d8     34 12 06 F6 | 	mov	arg01, ##564
257dc     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
257e0     FD 2C 02 F6 | 	mov	local08, result1
257e4     11 19 02 F6 | 	mov	arg04, local03
257e8     1F 18 C6 F0 | 	sar	arg04, #31
257ec     11 17 02 F6 | 	mov	arg03, local03
257f0     01 12 06 F6 | 	mov	arg01, #1
257f4     00 14 06 F6 | 	mov	arg02, #0
257f8     10 DC BF FD | 	call	#__system___int64_shl
257fc     FD 1E 02 F6 | 	mov	local01, result1
25800     FE 2E 02 F6 | 	mov	local09, result2
25804     12 19 02 F6 | 	mov	arg04, local04
25808     1F 18 C6 F0 | 	sar	arg04, #31
2580c     12 17 02 F6 | 	mov	arg03, local04
25810     01 12 06 F6 | 	mov	arg01, #1
25814     00 14 06 F6 | 	mov	arg02, #0
25818     F0 DB BF FD | 	call	#__system___int64_shl
2581c     FD 1E 42 F5 | 	or	local01, result1
25820     FE 2E 42 F5 | 	or	local09, result2
25824     13 19 02 F6 | 	mov	arg04, local05
25828     1F 18 C6 F0 | 	sar	arg04, #31
2582c     13 17 02 F6 | 	mov	arg03, local05
25830     01 12 06 F6 | 	mov	arg01, #1
25834     00 14 06 F6 | 	mov	arg02, #0
25838     D0 DB BF FD | 	call	#__system___int64_shl
2583c     FD 1E 42 F5 | 	or	local01, result1
25840     FE 2E 42 F5 | 	or	local09, result2
25844     14 19 02 F6 | 	mov	arg04, local06
25848     1F 18 C6 F0 | 	sar	arg04, #31
2584c     14 17 02 F6 | 	mov	arg03, local06
25850     01 12 06 F6 | 	mov	arg01, #1
25854     00 14 06 F6 | 	mov	arg02, #0
25858     B0 DB BF FD | 	call	#__system___int64_shl
2585c     17 15 02 F6 | 	mov	arg02, local09
25860     FD 1E 42 F5 | 	or	local01, result1
25864     0A FD 41 F5 | 	or	result2, arg02
25868     FE 20 02 F6 | 	mov	local02, result2
2586c     0F 13 02 F6 | 	mov	arg01, local01
25870     10 15 02 F6 | 	mov	arg02, local02
25874     CC DB BF FD | 	call	#__system___usepins
25878     00 FA 0D F2 | 	cmp	result1, #0 wz
2587c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25880     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
25884     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25888     00 FA 05 A6 |  if_e	mov	result1, #0
2588c     B4 00 90 AD |  if_e	jmp	#LR__3562
25890     0F 31 02 F6 | 	mov	local10, local01
25894     10 2F 02 F6 | 	mov	local09, local02
25898     01 00 00 FF 
2589c     08 2A 06 F1 | 	add	local07, ##520
258a0     15 31 62 FC | 	wrlong	local10, local07
258a4     04 2A 06 F1 | 	add	local07, #4
258a8     15 2F 62 FC | 	wrlong	local09, local07
258ac     01 00 00 FF 
258b0     0C 2A 86 F1 | 	sub	local07, ##524
258b4     14 1B 02 F6 | 	mov	arg05, local06
258b8     00 12 06 F6 | 	mov	arg01, #0
258bc     11 15 02 F6 | 	mov	arg02, local03
258c0     12 17 02 F6 | 	mov	arg03, local04
258c4     13 19 02 F6 | 	mov	arg04, local05
258c8     F2 30 02 F6 | 	mov	local10, objptr
258cc     15 E5 01 F6 | 	mov	objptr, local07
258d0     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
258d4     18 E5 01 F6 | 	mov	objptr, local10
258d8     FD 32 0A F6 | 	mov	local11, result1 wz
258dc     24 00 90 5D |  if_ne	jmp	#LR__3560
258e0     82 01 00 FF 
258e4     9E 15 06 F6 | 	mov	arg02, ##@LR__4977
258e8     16 13 02 F6 | 	mov	arg01, local08
258ec     00 16 06 F6 | 	mov	arg03, #0
258f0     F2 32 02 F6 | 	mov	local11, objptr
258f4     15 E5 01 F6 | 	mov	objptr, local07
258f8     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
258fc     19 E5 01 F6 | 	mov	objptr, local11
25900     FD 32 02 F6 | 	mov	local11, result1
25904                 | LR__3560
25904     00 32 0E F2 | 	cmp	local11, #0 wz
25908     24 00 90 AD |  if_e	jmp	#LR__3561
2590c     0F 13 02 F6 | 	mov	arg01, local01
25910     10 15 02 F6 | 	mov	arg02, local02
25914     80 DB BF FD | 	call	#__system___freepins
25918     19 13 6A F6 | 	neg	arg01, local11 wz
2591c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25920     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25924     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25928     00 FA 05 F6 | 	mov	result1, #0
2592c     14 00 90 FD | 	jmp	#LR__3562
25930                 | LR__3561
25930     15 13 02 F6 | 	mov	arg01, local07
25934     F2 32 02 F6 | 	mov	local11, objptr
25938     15 E5 01 F6 | 	mov	objptr, local07
2593c     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
25940     19 E5 01 F6 | 	mov	objptr, local11
25944                 | LR__3562
25944     A7 F0 03 F6 | 	mov	ptra, fp
25948     B2 00 A0 FD | 	call	#popregs_
2594c                 | __system___vfs_open_sdcardx_ret
2594c     2D 00 64 FD | 	ret
25950                 | 
25950                 | __system____default_getc
25950     03 4A 05 F6 | 	mov	COUNT_, #3
25954     A8 00 A0 FD | 	call	#pushregs_
25958     09 1F 02 F6 | 	mov	local01, arg01
2595c     0F 21 02 FB | 	rdlong	local02, local01
25960     08 20 06 F1 | 	add	local02, #8
25964     10 23 02 FB | 	rdlong	local03, local02
25968     02 22 CE F7 | 	test	local03, #2 wz
2596c     0F 13 02 56 |  if_ne	mov	arg01, local01
25970     00 01 B0 5D |  if_ne	call	#__system____default_flush
25974     10 23 02 FB | 	rdlong	local03, local02
25978     01 22 46 F5 | 	or	local03, #1
2597c     10 23 62 FC | 	wrlong	local03, local02
25980     08 20 86 F1 | 	sub	local02, #8
25984     10 23 0A FB | 	rdlong	local03, local02 wz
25988     0C 00 90 5D |  if_ne	jmp	#LR__3570
2598c     0F 13 02 F6 | 	mov	arg01, local01
25990     68 18 B0 FD | 	call	#__system____default_filbuf
25994     FD 22 02 F6 | 	mov	local03, result1
25998                 | LR__3570
25998     01 22 56 F2 | 	cmps	local03, #1 wc
2599c     01 FA 65 C6 |  if_b	neg	result1, #1
259a0     1C 00 90 CD |  if_b	jmp	#LR__3571
259a4     01 22 86 F1 | 	sub	local03, #1
259a8     10 23 62 FC | 	wrlong	local03, local02
259ac     04 20 06 F1 | 	add	local02, #4
259b0     10 23 02 FB | 	rdlong	local03, local02
259b4     11 FB C1 FA | 	rdbyte	result1, local03
259b8     01 22 06 F1 | 	add	local03, #1
259bc     10 23 62 FC | 	wrlong	local03, local02
259c0                 | LR__3571
259c0     A7 F0 03 F6 | 	mov	ptra, fp
259c4     B2 00 A0 FD | 	call	#popregs_
259c8                 | __system____default_getc_ret
259c8     2D 00 64 FD | 	ret
259cc                 | 
259cc                 | __system____default_putc
259cc     06 4A 05 F6 | 	mov	COUNT_, #6
259d0     A8 00 A0 FD | 	call	#pushregs_
259d4     09 1F 02 F6 | 	mov	local01, arg01
259d8     0A 21 02 F6 | 	mov	local02, arg02
259dc     10 23 02 FB | 	rdlong	local03, local02
259e0     08 22 06 F1 | 	add	local03, #8
259e4     11 FB 01 FB | 	rdlong	result1, local03
259e8     01 FA CD F7 | 	test	result1, #1 wz
259ec     10 13 02 56 |  if_ne	mov	arg01, local02
259f0     80 00 B0 5D |  if_ne	call	#__system____default_flush
259f4     11 25 02 FB | 	rdlong	local04, local03
259f8     02 24 46 F5 | 	or	local04, #2
259fc     11 25 62 FC | 	wrlong	local04, local03
25a00     08 22 86 F1 | 	sub	local03, #8
25a04     11 27 02 FB | 	rdlong	local05, local03
25a08     10 22 06 F1 | 	add	local03, #16
25a0c     11 15 02 FB | 	rdlong	arg02, local03
25a10     10 22 86 F1 | 	sub	local03, #16
25a14     13 FB 01 F6 | 	mov	result1, local05
25a18     0A FB 01 F1 | 	add	result1, arg02
25a1c     FD 1E 42 FC | 	wrbyte	local01, result1
25a20     0F 1F E2 F8 | 	getbyte	local01, local01, #0
25a24     01 26 06 F1 | 	add	local05, #1
25a28     11 27 62 FC | 	wrlong	local05, local03
25a2c     06 20 06 F1 | 	add	local02, #6
25a30     10 29 EA FA | 	rdword	local06, local02 wz
25a34     06 20 86 F1 | 	sub	local02, #6
25a38     0C 22 06 51 |  if_ne	add	local03, #12
25a3c     11 25 02 5B |  if_ne	rdlong	local04, local03
25a40     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
25a44     0C 00 90 AD |  if_e	jmp	#LR__3580
25a48     0A 1E 0E F2 | 	cmp	local01, #10 wz
25a4c     01 28 0E A2 |  if_e	cmp	local06, #1 wz
25a50     10 00 90 5D |  if_ne	jmp	#LR__3581
25a54                 | LR__3580
25a54     10 13 02 F6 | 	mov	arg01, local02
25a58     18 00 B0 FD | 	call	#__system____default_flush
25a5c     00 FA 0D F2 | 	cmp	result1, #0 wz
25a60     01 1E 66 56 |  if_ne	neg	local01, #1
25a64                 | LR__3581
25a64     0F FB 01 F6 | 	mov	result1, local01
25a68     A7 F0 03 F6 | 	mov	ptra, fp
25a6c     B2 00 A0 FD | 	call	#popregs_
25a70                 | __system____default_putc_ret
25a70     2D 00 64 FD | 	ret
25a74                 | 
25a74                 | __system____default_flush
25a74     06 4A 05 F6 | 	mov	COUNT_, #6
25a78     A8 00 A0 FD | 	call	#pushregs_
25a7c     09 1F 02 F6 | 	mov	local01, arg01
25a80     0F 21 02 FB | 	rdlong	local02, local01
25a84     10 23 02 FB | 	rdlong	local03, local02
25a88     08 20 06 F1 | 	add	local02, #8
25a8c     10 FB 01 FB | 	rdlong	result1, local02
25a90     08 20 86 F1 | 	sub	local02, #8
25a94     02 FA CD F7 | 	test	result1, #2 wz
25a98     D0 00 90 AD |  if_e	jmp	#LR__3592
25a9c     01 22 56 F2 | 	cmps	local03, #1 wc
25aa0     20 01 90 CD |  if_b	jmp	#LR__3594
25aa4     08 1E 06 F1 | 	add	local01, #8
25aa8     0F FB 01 FB | 	rdlong	result1, local01
25aac     08 1E 86 F1 | 	sub	local01, #8
25ab0     40 FA CD F7 | 	test	result1, #64 wz
25ab4     68 00 90 AD |  if_e	jmp	#LR__3591
25ab8     08 1E 06 F1 | 	add	local01, #8
25abc     0F 17 02 FB | 	rdlong	arg03, local01
25ac0     08 1E 86 F1 | 	sub	local01, #8
25ac4     80 16 CE F7 | 	test	arg03, #128 wz
25ac8     54 00 90 AD |  if_e	jmp	#LR__3590
25acc     30 1E 06 F1 | 	add	local01, #48
25ad0     0F 25 02 FB | 	rdlong	local04, local01
25ad4     12 27 02 F6 | 	mov	local05, local04
25ad8     30 1E 86 F1 | 	sub	local01, #48
25adc     13 26 46 F7 | 	zerox	local05, #19
25ae0     14 24 46 F0 | 	shr	local04, #20
25ae4     02 24 66 F0 | 	shl	local04, #2
25ae8     ED 24 02 F1 | 	add	local04, __methods__
25aec     12 25 02 FB | 	rdlong	local04, local04
25af0     0F 13 02 F6 | 	mov	arg01, local01
25af4     00 14 06 F6 | 	mov	arg02, #0
25af8     02 16 06 F6 | 	mov	arg03, #2
25afc     F2 28 02 F6 | 	mov	local06, objptr
25b00     13 E5 01 F6 | 	mov	objptr, local05
25b04     2D 24 62 FD | 	call	local04
25b08     14 E5 01 F6 | 	mov	objptr, local06
25b0c     08 1E 06 F1 | 	add	local01, #8
25b10     0F 29 02 FB | 	rdlong	local06, local01
25b14     80 28 26 F5 | 	andn	local06, #128
25b18     0F 29 62 FC | 	wrlong	local06, local01
25b1c     08 1E 86 F1 | 	sub	local01, #8
25b20                 | LR__3590
25b20                 | LR__3591
25b20     18 1E 06 F1 | 	add	local01, #24
25b24     0F 25 02 FB | 	rdlong	local04, local01
25b28     12 27 02 F6 | 	mov	local05, local04
25b2c     18 1E 86 F1 | 	sub	local01, #24
25b30     13 26 46 F7 | 	zerox	local05, #19
25b34     14 24 46 F0 | 	shr	local04, #20
25b38     02 24 66 F0 | 	shl	local04, #2
25b3c     ED 24 02 F1 | 	add	local04, __methods__
25b40     12 25 02 FB | 	rdlong	local04, local04
25b44     10 20 06 F1 | 	add	local02, #16
25b48     10 15 02 FB | 	rdlong	arg02, local02
25b4c     10 20 86 F1 | 	sub	local02, #16
25b50     0F 13 02 F6 | 	mov	arg01, local01
25b54     11 17 02 F6 | 	mov	arg03, local03
25b58     F2 28 02 F6 | 	mov	local06, objptr
25b5c     13 E5 01 F6 | 	mov	objptr, local05
25b60     2D 24 62 FD | 	call	local04
25b64     14 E5 01 F6 | 	mov	objptr, local06
25b68     58 00 90 FD | 	jmp	#LR__3594
25b6c                 | LR__3592
25b6c     08 20 06 F1 | 	add	local02, #8
25b70     10 29 02 FB | 	rdlong	local06, local02
25b74     08 20 86 F1 | 	sub	local02, #8
25b78     01 28 CE F7 | 	test	local06, #1 wz
25b7c     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
25b80     40 00 90 AD |  if_e	jmp	#LR__3593
25b84     30 1E 06 F1 | 	add	local01, #48
25b88     0F 25 02 FB | 	rdlong	local04, local01
25b8c     12 27 02 F6 | 	mov	local05, local04
25b90     30 1E 86 F1 | 	sub	local01, #48
25b94     13 26 46 F7 | 	zerox	local05, #19
25b98     14 24 46 F0 | 	shr	local04, #20
25b9c     02 24 66 F0 | 	shl	local04, #2
25ba0     ED 24 02 F1 | 	add	local04, __methods__
25ba4     12 25 02 FB | 	rdlong	local04, local04
25ba8     0F 13 02 F6 | 	mov	arg01, local01
25bac     11 15 62 F6 | 	neg	arg02, local03
25bb0     01 16 06 F6 | 	mov	arg03, #1
25bb4     F2 28 02 F6 | 	mov	local06, objptr
25bb8     13 E5 01 F6 | 	mov	objptr, local05
25bbc     2D 24 62 FD | 	call	local04
25bc0     14 E5 01 F6 | 	mov	objptr, local06
25bc4                 | LR__3593
25bc4                 | LR__3594
25bc4     10 01 68 FC | 	wrlong	#0, local02
25bc8     04 20 06 F1 | 	add	local02, #4
25bcc     10 01 68 FC | 	wrlong	#0, local02
25bd0     04 20 06 F1 | 	add	local02, #4
25bd4     10 01 68 FC | 	wrlong	#0, local02
25bd8     00 FA 05 F6 | 	mov	result1, #0
25bdc     A7 F0 03 F6 | 	mov	ptra, fp
25be0     B2 00 A0 FD | 	call	#popregs_
25be4                 | __system____default_flush_ret
25be4     2D 00 64 FD | 	ret
25be8                 | 
25be8                 | __system____default_buffer_init
25be8     02 4A 05 F6 | 	mov	COUNT_, #2
25bec     A8 00 A0 FD | 	call	#pushregs_
25bf0     09 1F 02 F6 | 	mov	local01, arg01
25bf4     0F 21 02 FB | 	rdlong	local02, local01
25bf8     0F 13 02 F6 | 	mov	arg01, local01
25bfc     34 03 B0 FD | 	call	#__system___isatty
25c00     00 FA 0D F2 | 	cmp	result1, #0 wz
25c04     06 1E 06 51 |  if_ne	add	local01, #6
25c08     0F 0B 58 5C |  if_ne	wrword	#5, local01
25c0c     06 1E 06 A1 |  if_e	add	local01, #6
25c10     0F 0D 58 AC |  if_e	wrword	#6, local01
25c14     14 20 06 F1 | 	add	local02, #20
25c18     10 1F 02 F6 | 	mov	local01, local02
25c1c     04 20 86 F1 | 	sub	local02, #4
25c20     10 1F 62 FC | 	wrlong	local01, local02
25c24     04 20 86 F1 | 	sub	local02, #4
25c28     02 00 80 FF 
25c2c     10 01 68 FC | 	wrlong	##1024, local02
25c30     00 FA 05 F6 | 	mov	result1, #0
25c34     A7 F0 03 F6 | 	mov	ptra, fp
25c38     B2 00 A0 FD | 	call	#popregs_
25c3c                 | __system____default_buffer_init_ret
25c3c     2D 00 64 FD | 	ret
25c40                 | 
25c40                 | __system__stat
25c40     04 4A 05 F6 | 	mov	COUNT_, #4
25c44     A8 00 A0 FD | 	call	#pushregs_
25c48     0A 1F 02 F6 | 	mov	local01, arg02
25c4c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
25c50     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
25c54     09 15 02 F6 | 	mov	arg02, arg01
25c58     10 13 02 F6 | 	mov	arg01, local02
25c5c     00 16 06 F6 | 	mov	arg03, #0
25c60     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
25c64     40 B8 BF FD | 	call	#__system____getvfsforfile
25c68     FD 22 0A F6 | 	mov	local03, result1 wz
25c6c     10 00 90 AD |  if_e	jmp	#LR__3600
25c70     34 22 06 F1 | 	add	local03, #52
25c74     11 17 0A FB | 	rdlong	arg03, local03 wz
25c78     34 22 86 F1 | 	sub	local03, #52
25c7c     14 00 90 5D |  if_ne	jmp	#LR__3601
25c80                 | LR__3600
25c80     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25c84     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
25c88     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25c8c     01 FA 65 F6 | 	neg	result1, #1
25c90     68 00 90 FD | 	jmp	#LR__3602
25c94                 | LR__3601
25c94     0F 13 02 F6 | 	mov	arg01, local01
25c98     00 14 06 F6 | 	mov	arg02, #0
25c9c     30 16 06 F6 | 	mov	arg03, #48
25ca0     09 25 02 F6 | 	mov	local04, arg01
25ca4     98 00 A0 FD | 	call	#\builtin_bytefill_
25ca8     12 FB 01 F6 | 	mov	result1, local04
25cac     10 13 CA FA | 	rdbyte	arg01, local02 wz
25cb0     08 1E 06 A1 |  if_e	add	local01, #8
25cb4     08 00 80 AF 
25cb8     0F FF 6B AC |  if_e	wrlong	##4607, local01
25cbc     00 FA 05 A6 |  if_e	mov	result1, #0
25cc0     38 00 90 AD |  if_e	jmp	#LR__3602
25cc4     34 22 06 F1 | 	add	local03, #52
25cc8     11 23 02 FB | 	rdlong	local03, local03
25ccc     11 25 02 F6 | 	mov	local04, local03
25cd0     13 22 46 F7 | 	zerox	local03, #19
25cd4     14 24 46 F0 | 	shr	local04, #20
25cd8     02 24 66 F0 | 	shl	local04, #2
25cdc     ED 24 02 F1 | 	add	local04, __methods__
25ce0     12 25 02 FB | 	rdlong	local04, local04
25ce4     10 13 02 F6 | 	mov	arg01, local02
25ce8     0F 15 02 F6 | 	mov	arg02, local01
25cec     F2 20 02 F6 | 	mov	local02, objptr
25cf0     11 E5 01 F6 | 	mov	objptr, local03
25cf4     2D 24 62 FD | 	call	local04
25cf8     10 E5 01 F6 | 	mov	objptr, local02
25cfc                 | LR__3602
25cfc     A7 F0 03 F6 | 	mov	ptra, fp
25d00     B2 00 A0 FD | 	call	#popregs_
25d04                 | __system__stat_ret
25d04     2D 00 64 FD | 	ret
25d08                 | 
25d08                 | __system__write
25d08     0A 12 16 F2 | 	cmp	arg01, #10 wc
25d0c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25d10     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25d14     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25d18     01 FA 65 36 |  if_ae	neg	result1, #1
25d1c     20 00 90 3D |  if_ae	jmp	#LR__3610
25d20     34 12 06 FD | 	qmul	arg01, #52
25d24     02 00 00 FF 
25d28     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25d2c     18 12 62 FD | 	getqx	arg01
25d30     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25d34     02 00 00 FF 
25d38     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25d3c     0C 10 B0 FD | 	call	#__system___vfswrite
25d40                 | LR__3610
25d40                 | __system__write_ret
25d40     2D 00 64 FD | 	ret
25d44                 | 
25d44                 | __system__read
25d44     0A 12 16 F2 | 	cmp	arg01, #10 wc
25d48     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25d4c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25d50     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25d54     01 FA 65 36 |  if_ae	neg	result1, #1
25d58     20 00 90 3D |  if_ae	jmp	#LR__3620
25d5c     34 12 06 FD | 	qmul	arg01, #52
25d60     02 00 00 FF 
25d64     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25d68     18 12 62 FD | 	getqx	arg01
25d6c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25d70     02 00 00 FF 
25d74     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25d78     98 11 B0 FD | 	call	#__system___vfsread
25d7c                 | LR__3620
25d7c                 | __system__read_ret
25d7c     2D 00 64 FD | 	ret
25d80                 | 
25d80                 | __system__close
25d80     0A 12 16 F2 | 	cmp	arg01, #10 wc
25d84     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25d88     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25d8c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25d90     01 FA 65 36 |  if_ae	neg	result1, #1
25d94     20 00 90 3D |  if_ae	jmp	#LR__3630
25d98     34 12 06 FD | 	qmul	arg01, #52
25d9c     02 00 00 FF 
25da0     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25da4     18 12 62 FD | 	getqx	arg01
25da8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
25dac     02 00 00 FF 
25db0     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25db4     10 F9 BF FD | 	call	#__system___closeraw
25db8                 | LR__3630
25db8                 | __system__close_ret
25db8     2D 00 64 FD | 	ret
25dbc                 | 
25dbc                 | __system__lseek
25dbc     06 4A 05 F6 | 	mov	COUNT_, #6
25dc0     A8 00 A0 FD | 	call	#pushregs_
25dc4     0A 12 16 F2 | 	cmp	arg01, #10 wc
25dc8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25dcc     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
25dd0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25dd4     01 FA 65 36 |  if_ae	neg	result1, #1
25dd8     C4 00 90 3D |  if_ae	jmp	#LR__3641
25ddc     34 12 06 FD | 	qmul	arg01, #52
25de0     02 00 00 FF 
25de4     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
25de8     18 1E 62 FD | 	getqx	local01
25dec     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
25df0     30 1E 06 F1 | 	add	local01, #48
25df4     0F 13 0A FB | 	rdlong	arg01, local01 wz
25df8     30 1E 86 F1 | 	sub	local01, #48
25dfc     02 00 00 FF 
25e00     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
25e04     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25e08     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
25e0c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25e10     01 FA 65 A6 |  if_e	neg	result1, #1
25e14     88 00 90 AD |  if_e	jmp	#LR__3641
25e18     08 1E 06 F1 | 	add	local01, #8
25e1c     0F 21 02 FB | 	rdlong	local02, local01
25e20     08 1E 86 F1 | 	sub	local01, #8
25e24     40 20 CE F7 | 	test	local02, #64 wz
25e28     08 1E 06 51 |  if_ne	add	local01, #8
25e2c     0F 21 02 5B |  if_ne	rdlong	local02, local01
25e30     80 20 46 55 |  if_ne	or	local02, #128
25e34     0F 21 62 5C |  if_ne	wrlong	local02, local01
25e38     08 1E 86 51 |  if_ne	sub	local01, #8
25e3c     30 1E 06 F1 | 	add	local01, #48
25e40     0F 23 02 FB | 	rdlong	local03, local01
25e44     11 25 02 F6 | 	mov	local04, local03
25e48     30 1E 86 F1 | 	sub	local01, #48
25e4c     13 24 46 F7 | 	zerox	local04, #19
25e50     14 22 46 F0 | 	shr	local03, #20
25e54     02 22 66 F0 | 	shl	local03, #2
25e58     ED 22 02 F1 | 	add	local03, __methods__
25e5c     11 23 02 FB | 	rdlong	local03, local03
25e60     0F 13 02 F6 | 	mov	arg01, local01
25e64     F2 26 02 F6 | 	mov	local05, objptr
25e68     12 E5 01 F6 | 	mov	objptr, local04
25e6c     2D 22 62 FD | 	call	local03
25e70     13 E5 01 F6 | 	mov	objptr, local05
25e74     FD 28 02 F6 | 	mov	local06, result1
25e78     00 28 56 F2 | 	cmps	local06, #0 wc
25e7c     1C 00 90 3D |  if_ae	jmp	#LR__3640
25e80     14 13 6A F6 | 	neg	arg01, local06 wz
25e84     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25e88     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25e8c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25e90     01 FA 65 56 |  if_ne	neg	result1, #1
25e94     00 FA 05 A6 |  if_e	mov	result1, #0
25e98     04 00 90 FD | 	jmp	#LR__3641
25e9c                 | LR__3640
25e9c     14 FB 01 F6 | 	mov	result1, local06
25ea0                 | LR__3641
25ea0     A7 F0 03 F6 | 	mov	ptra, fp
25ea4     B2 00 A0 FD | 	call	#popregs_
25ea8                 | __system__lseek_ret
25ea8     2D 00 64 FD | 	ret
25eac                 | 
25eac                 | __system___ioctl
25eac     03 4A 05 F6 | 	mov	COUNT_, #3
25eb0     A8 00 A0 FD | 	call	#pushregs_
25eb4     00 12 4E F2 | 	cmps	arg01, #0 wz
25eb8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25ebc     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
25ec0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25ec4     01 FA 65 A6 |  if_e	neg	result1, #1
25ec8     5C 00 90 AD |  if_e	jmp	#LR__3651
25ecc     28 12 06 F1 | 	add	arg01, #40
25ed0     09 1F 02 FB | 	rdlong	local01, arg01
25ed4     0F 21 02 F6 | 	mov	local02, local01
25ed8     28 12 86 F1 | 	sub	arg01, #40
25edc     13 20 46 F7 | 	zerox	local02, #19
25ee0     14 1E 46 F0 | 	shr	local01, #20
25ee4     02 1E 66 F0 | 	shl	local01, #2
25ee8     ED 1E 02 F1 | 	add	local01, __methods__
25eec     0F 1F 02 FB | 	rdlong	local01, local01
25ef0     F2 22 02 F6 | 	mov	local03, objptr
25ef4     10 E5 01 F6 | 	mov	objptr, local02
25ef8     2D 1E 62 FD | 	call	local01
25efc     11 E5 01 F6 | 	mov	objptr, local03
25f00     FD 12 0A F6 | 	mov	arg01, result1 wz
25f04     1C 00 90 AD |  if_e	jmp	#LR__3650
25f08     00 12 4E F2 | 	cmps	arg01, #0 wz
25f0c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25f10     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25f14     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25f18     01 FA 65 56 |  if_ne	neg	result1, #1
25f1c     00 FA 05 A6 |  if_e	mov	result1, #0
25f20     04 00 90 FD | 	jmp	#LR__3651
25f24                 | LR__3650
25f24     00 FA 05 F6 | 	mov	result1, #0
25f28                 | LR__3651
25f28     A7 F0 03 F6 | 	mov	ptra, fp
25f2c     B2 00 A0 FD | 	call	#popregs_
25f30                 | __system___ioctl_ret
25f30     2D 00 64 FD | 	ret
25f34                 | 
25f34                 | __system___isatty
25f34     00 4A 05 F6 | 	mov	COUNT_, #0
25f38     A8 00 A0 FD | 	call	#pushregs_
25f3c     0C F0 07 F1 | 	add	ptra, #12
25f40     04 4E 05 F1 | 	add	fp, #4
25f44     A7 12 62 FC | 	wrlong	arg01, fp
25f48     04 4E 05 F1 | 	add	fp, #4
25f4c     A7 16 02 F6 | 	mov	arg03, fp
25f50     08 4E 85 F1 | 	sub	fp, #8
25f54     00 15 06 F6 | 	mov	arg02, #256
25f58     50 FF BF FD | 	call	#__system___ioctl
25f5c     00 FA 0D F2 | 	cmp	result1, #0 wz
25f60     01 FA 05 A6 |  if_e	mov	result1, #1
25f64     00 FA 05 56 |  if_ne	mov	result1, #0
25f68     A7 F0 03 F6 | 	mov	ptra, fp
25f6c     B2 00 A0 FD | 	call	#popregs_
25f70                 | __system___isatty_ret
25f70     2D 00 64 FD | 	ret
25f74                 | 
25f74                 | __system____getftab
25f74     0A 12 16 F2 | 	cmp	arg01, #10 wc
25f78     34 12 06 CD |  if_b	qmul	arg01, #52
25f7c     00 FA 05 36 |  if_ae	mov	result1, #0
25f80     02 00 00 CF 
25f84     20 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1312
25f88     18 FA 61 CD |  if_b	getqx	result1
25f8c     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
25f90     02 00 00 CF 
25f94     20 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
25f98                 | __system____getftab_ret
25f98     2D 00 64 FD | 	ret
25f9c                 | 
25f9c                 | __system__strncpy
25f9c     09 01 02 F6 | 	mov	_var01, arg01
25fa0                 | LR__3660
25fa0     01 16 86 F1 | 	sub	arg03, #1
25fa4     00 16 56 F2 | 	cmps	arg03, #0 wc
25fa8     18 00 90 CD |  if_b	jmp	#LR__3661
25fac     0A FB C1 FA | 	rdbyte	result1, arg02
25fb0     00 FB 41 FC | 	wrbyte	result1, _var01
25fb4     01 14 06 F1 | 	add	arg02, #1
25fb8     00 FB C9 FA | 	rdbyte	result1, _var01 wz
25fbc     01 00 06 F1 | 	add	_var01, #1
25fc0     DC FF 9F 5D |  if_ne	jmp	#LR__3660
25fc4                 | LR__3661
25fc4     97 0C 48 FB | 	callpa	#(@LR__3663-@LR__3662)>>2,fcache_load_ptr_
25fc8                 | LR__3662
25fc8     01 16 86 F1 | 	sub	arg03, #1
25fcc     00 16 56 F2 | 	cmps	arg03, #0 wc
25fd0     00 03 02 36 |  if_ae	mov	_var02, _var01
25fd4     01 00 06 31 |  if_ae	add	_var01, #1
25fd8     01 01 48 3C |  if_ae	wrbyte	#0, _var02
25fdc     E8 FF 9F 3D |  if_ae	jmp	#LR__3662
25fe0                 | LR__3663
25fe0     09 FB 01 F6 | 	mov	result1, arg01
25fe4                 | __system__strncpy_ret
25fe4     2D 00 64 FD | 	ret
25fe8                 | 
25fe8                 | __system__strncat
25fe8     00 14 4E F2 | 	cmps	arg02, #0 wz
25fec     50 00 90 AD |  if_e	jmp	#LR__3674
25ff0     01 16 16 F2 | 	cmp	arg03, #1 wc
25ff4     48 00 90 CD |  if_b	jmp	#LR__3674
25ff8     09 01 02 F6 | 	mov	_var01, arg01
25ffc     97 1E 48 FB | 	callpa	#(@LR__3672-@LR__3670)>>2,fcache_load_ptr_
26000                 | LR__3670
26000     00 FB C9 FA | 	rdbyte	result1, _var01 wz
26004     01 00 06 51 |  if_ne	add	_var01, #1
26008     F4 FF 9F 5D |  if_ne	jmp	#LR__3670
2600c     0B 03 02 F6 | 	mov	_var02, arg03
26010                 | LR__3671
26010     0A 05 C2 FA | 	rdbyte	_var03, arg02
26014     02 07 02 F6 | 	mov	_var04, _var03
26018     07 06 4E F7 | 	zerox	_var04, #7 wz
2601c     01 14 06 F1 | 	add	arg02, #1
26020     18 00 90 AD |  if_e	jmp	#LR__3673
26024     01 02 86 F1 | 	sub	_var02, #1
26028     00 02 56 F2 | 	cmps	_var02, #0 wc
2602c     00 07 02 36 |  if_ae	mov	_var04, _var01
26030     01 00 06 31 |  if_ae	add	_var01, #1
26034     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
26038     D4 FF 9F 3D |  if_ae	jmp	#LR__3671
2603c                 | LR__3672
2603c                 | LR__3673
2603c     00 01 48 FC | 	wrbyte	#0, _var01
26040                 | LR__3674
26040     09 FB 01 F6 | 	mov	result1, arg01
26044                 | __system__strncat_ret
26044     2D 00 64 FD | 	ret
26048                 | 
26048                 | __system__strncmp
26048     09 01 0A F6 | 	mov	_var01, arg01 wz
2604c     14 00 90 5D |  if_ne	jmp	#LR__3680
26050     00 14 0E F2 | 	cmp	arg02, #0 wz
26054     01 02 66 56 |  if_ne	neg	_var02, #1
26058     00 02 06 A6 |  if_e	mov	_var02, #0
2605c     01 FB 01 F6 | 	mov	result1, _var02
26060     74 00 90 FD | 	jmp	#__system__strncmp_ret
26064                 | LR__3680
26064     00 14 0E F2 | 	cmp	arg02, #0 wz
26068     01 FA 05 A6 |  if_e	mov	result1, #1
2606c     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
26070     0B 05 02 F6 | 	mov	_var03, arg03
26074     97 16 48 FB | 	callpa	#(@LR__3682-@LR__3681)>>2,fcache_load_ptr_
26078                 | LR__3681
26078     00 07 C2 FA | 	rdbyte	_var04, _var01
2607c     0A 09 02 F6 | 	mov	_var05, arg02
26080     04 0B C2 FA | 	rdbyte	_var06, _var05
26084     01 04 86 F1 | 	sub	_var03, #1
26088     00 04 56 F2 | 	cmps	_var03, #0 wc
2608c     01 00 06 F1 | 	add	_var01, #1
26090     01 14 06 F1 | 	add	arg02, #1
26094     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
26098     08 00 90 2D |  if_nc_and_z	jmp	#LR__3683
2609c     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
260a0     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3681
260a4                 | LR__3682
260a4                 | LR__3683
260a4     00 04 56 F2 | 	cmps	_var03, #0 wc
260a8     00 FA 05 C6 |  if_b	mov	result1, #0
260ac     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
260b0     05 07 0A F2 | 	cmp	_var04, _var06 wz
260b4     00 FA 05 A6 |  if_e	mov	result1, #0
260b8     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
260bc     00 06 0E F2 | 	cmp	_var04, #0 wz
260c0     01 FA 65 A6 |  if_e	neg	result1, #1
260c4     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
260c8     00 0A 0E F2 | 	cmp	_var06, #0 wz
260cc     01 FA 05 A6 |  if_e	mov	result1, #1
260d0     03 FB 01 56 |  if_ne	mov	result1, _var04
260d4     05 FB 81 51 |  if_ne	sub	result1, _var06
260d8                 | __system__strncmp_ret
260d8     2D 00 64 FD | 	ret
260dc                 | 
260dc                 | __system____root_opendir
260dc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
260e0     04 12 06 F1 | 	add	arg01, #4
260e4     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
260e8     00 FA 05 F6 | 	mov	result1, #0
260ec     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
260f0                 | __system____root_opendir_ret
260f0     2D 00 64 FD | 	ret
260f4                 | 
260f4                 | __system____root_readdir
260f4     03 4A 05 F6 | 	mov	COUNT_, #3
260f8     A8 00 A0 FD | 	call	#pushregs_
260fc     09 1F 02 F6 | 	mov	local01, arg01
26100     0A 21 02 F6 | 	mov	local02, arg02
26104     04 1E 06 F1 | 	add	local01, #4
26108     0F 23 02 FB | 	rdlong	local03, local01
2610c     04 1E 86 F1 | 	sub	local01, #4
26110                 | LR__3690
26110     74 E6 05 F1 | 	add	ptr___system__dat__, #116
26114     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
26118     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2611c     01 FA 65 A6 |  if_e	neg	result1, #1
26120     48 00 90 AD |  if_e	jmp	#LR__3691
26124     11 17 0A FB | 	rdlong	arg03, local03 wz
26128     04 22 06 A1 |  if_e	add	local03, #4
2612c     E0 FF 9F AD |  if_e	jmp	#LR__3690
26130     11 15 02 FB | 	rdlong	arg02, local03
26134     01 14 06 F1 | 	add	arg02, #1
26138     10 13 02 F6 | 	mov	arg01, local02
2613c     40 16 06 F6 | 	mov	arg03, #64
26140     58 FE BF FD | 	call	#__system__strncpy
26144     50 20 06 F1 | 	add	local02, #80
26148     10 03 48 FC | 	wrbyte	#1, local02
2614c     08 20 86 F1 | 	sub	local02, #8
26150     10 01 68 FC | 	wrlong	#0, local02
26154     04 20 06 F1 | 	add	local02, #4
26158     10 01 68 FC | 	wrlong	#0, local02
2615c     04 22 06 F1 | 	add	local03, #4
26160     04 1E 06 F1 | 	add	local01, #4
26164     0F 23 62 FC | 	wrlong	local03, local01
26168     00 FA 05 F6 | 	mov	result1, #0
2616c                 | LR__3691
2616c     A7 F0 03 F6 | 	mov	ptra, fp
26170     B2 00 A0 FD | 	call	#popregs_
26174                 | __system____root_readdir_ret
26174     2D 00 64 FD | 	ret
26178                 | 
26178                 | __system____root_closedir
26178     00 FA 05 F6 | 	mov	result1, #0
2617c                 | __system____root_closedir_ret
2617c     2D 00 64 FD | 	ret
26180                 | 
26180                 | __system____root_stat
26180     0A 01 02 F6 | 	mov	_var01, arg02
26184     00 13 02 F6 | 	mov	arg01, _var01
26188     00 14 06 F6 | 	mov	arg02, #0
2618c     30 16 06 F6 | 	mov	arg03, #48
26190     98 00 A0 FD | 	call	#\builtin_bytefill_
26194     08 00 06 F1 | 	add	_var01, #8
26198     08 00 80 FF 
2619c     00 FF 6B FC | 	wrlong	##4607, _var01
261a0     00 FA 05 F6 | 	mov	result1, #0
261a4                 | __system____root_stat_ret
261a4     2D 00 64 FD | 	ret
261a8                 | 
261a8                 | __system___normalizeName
261a8     00 00 06 F6 | 	mov	_var01, #0
261ac     09 03 02 F6 | 	mov	_var02, arg01
261b0     01 05 02 F6 | 	mov	_var03, _var02
261b4                 | LR__3700
261b4     01 07 CA FA | 	rdbyte	_var04, _var02 wz
261b8     5C 01 90 AD |  if_e	jmp	#LR__3719
261bc     00 00 0E F2 | 	cmp	_var01, #0 wz
261c0     02 07 02 56 |  if_ne	mov	_var04, _var03
261c4     01 04 06 51 |  if_ne	add	_var03, #1
261c8     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
261cc     00 00 06 56 |  if_ne	mov	_var01, #0
261d0     01 07 C2 FA | 	rdbyte	_var04, _var02
261d4     2E 06 0E F2 | 	cmp	_var04, #46 wz
261d8     D8 00 90 5D |  if_ne	jmp	#LR__3712
261dc     01 02 06 F1 | 	add	_var02, #1
261e0     01 07 C2 FA | 	rdbyte	_var04, _var02
261e4     01 02 86 F1 | 	sub	_var02, #1
261e8     2F 06 0E F2 | 	cmp	_var04, #47 wz
261ec     18 00 90 AD |  if_e	jmp	#LR__3701
261f0     01 02 06 F1 | 	add	_var02, #1
261f4     01 09 C2 FA | 	rdbyte	_var05, _var02
261f8     01 02 86 F1 | 	sub	_var02, #1
261fc     04 0B 02 F6 | 	mov	_var06, _var05
26200     07 0A 4E F7 | 	zerox	_var06, #7 wz
26204     10 00 90 5D |  if_ne	jmp	#LR__3702
26208                 | LR__3701
26208     01 0D 02 F6 | 	mov	_var07, _var02
2620c     01 0C 06 F1 | 	add	_var07, #1
26210     06 03 02 F6 | 	mov	_var02, _var07
26214     E0 00 90 FD | 	jmp	#LR__3716
26218                 | LR__3702
26218     01 02 06 F1 | 	add	_var02, #1
2621c     01 0D C2 FA | 	rdbyte	_var07, _var02
26220     01 02 86 F1 | 	sub	_var02, #1
26224     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
26228     2E 06 0E F2 | 	cmp	_var04, #46 wz
2622c     84 00 90 5D |  if_ne	jmp	#LR__3711
26230     02 02 06 F1 | 	add	_var02, #2
26234     01 0D C2 FA | 	rdbyte	_var07, _var02
26238     02 02 86 F1 | 	sub	_var02, #2
2623c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
26240     2F 06 0E F2 | 	cmp	_var04, #47 wz
26244     18 00 90 AD |  if_e	jmp	#LR__3703
26248     02 02 06 F1 | 	add	_var02, #2
2624c     01 09 C2 FA | 	rdbyte	_var05, _var02
26250     02 02 86 F1 | 	sub	_var02, #2
26254     04 0B 02 F6 | 	mov	_var06, _var05
26258     07 0A 4E F7 | 	zerox	_var06, #7 wz
2625c     54 00 90 5D |  if_ne	jmp	#LR__3710
26260                 | LR__3703
26260     02 02 06 F1 | 	add	_var02, #2
26264     09 05 5A F2 | 	cmps	_var03, arg01 wcz
26268     40 00 90 ED |  if_be	jmp	#LR__3709
2626c     02 0F 02 F6 | 	mov	_var08, _var03
26270     01 0E 86 F1 | 	sub	_var08, #1
26274                 | LR__3704
26274     07 07 C2 FA | 	rdbyte	_var04, _var08
26278     2F 06 0E F2 | 	cmp	_var04, #47 wz
2627c     0C 00 90 5D |  if_ne	jmp	#LR__3705
26280     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
26284     01 0E 86 11 |  if_a	sub	_var08, #1
26288     E8 FF 9F 1D |  if_a	jmp	#LR__3704
2628c                 | LR__3705
2628c     97 0C 48 FB | 	callpa	#(@LR__3707-@LR__3706)>>2,fcache_load_ptr_
26290                 | LR__3706
26290     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
26294     10 00 90 ED |  if_be	jmp	#LR__3708
26298     07 07 C2 FA | 	rdbyte	_var04, _var08
2629c     2F 06 0E F2 | 	cmp	_var04, #47 wz
262a0     01 0E 86 51 |  if_ne	sub	_var08, #1
262a4     E8 FF 9F 5D |  if_ne	jmp	#LR__3706
262a8                 | LR__3707
262a8                 | LR__3708
262a8     07 05 02 F6 | 	mov	_var03, _var08
262ac                 | LR__3709
262ac     01 00 06 F6 | 	mov	_var01, #1
262b0     44 00 90 FD | 	jmp	#LR__3716
262b4                 | LR__3710
262b4                 | LR__3711
262b4                 | LR__3712
262b4     97 18 48 FB | 	callpa	#(@LR__3714-@LR__3713)>>2,fcache_load_ptr_
262b8                 | LR__3713
262b8     01 07 CA FA | 	rdbyte	_var04, _var02 wz
262bc     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
262c0     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
262c4     20 00 90 AD |  if_e	jmp	#LR__3715
262c8     01 0B 02 F6 | 	mov	_var06, _var02
262cc     01 09 02 F6 | 	mov	_var05, _var02
262d0     01 08 06 F1 | 	add	_var05, #1
262d4     05 11 C2 FA | 	rdbyte	_var09, _var06
262d8     04 03 02 F6 | 	mov	_var02, _var05
262dc     02 11 42 FC | 	wrbyte	_var09, _var03
262e0     01 04 06 F1 | 	add	_var03, #1
262e4     D0 FF 9F FD | 	jmp	#LR__3713
262e8                 | LR__3714
262e8                 | LR__3715
262e8     01 07 C2 FA | 	rdbyte	_var04, _var02
262ec     2F 06 0E F2 | 	cmp	_var04, #47 wz
262f0     C0 FE 9F 5D |  if_ne	jmp	#LR__3700
262f4     01 00 06 F6 | 	mov	_var01, #1
262f8                 | LR__3716
262f8     97 0C 48 FB | 	callpa	#(@LR__3718-@LR__3717)>>2,fcache_load_ptr_
262fc                 | LR__3717
262fc     01 07 C2 FA | 	rdbyte	_var04, _var02
26300     2F 06 0E F2 | 	cmp	_var04, #47 wz
26304     01 0D 02 A6 |  if_e	mov	_var07, _var02
26308     01 0C 06 A1 |  if_e	add	_var07, #1
2630c     06 03 02 A6 |  if_e	mov	_var02, _var07
26310     E8 FF 9F AD |  if_e	jmp	#LR__3717
26314                 | LR__3718
26314     9C FE 9F FD | 	jmp	#LR__3700
26318                 | LR__3719
26318     02 01 48 FC | 	wrbyte	#0, _var03
2631c                 | __system___normalizeName_ret
2631c     2D 00 64 FD | 	ret
26320                 | 
26320                 | __system___strrev
26320     09 01 CA FA | 	rdbyte	_var01, arg01 wz
26324     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
26328     09 03 02 F6 | 	mov	_var02, arg01
2632c     97 1A 48 FB | 	callpa	#(@LR__3722-@LR__3720)>>2,fcache_load_ptr_
26330                 | LR__3720
26330     01 01 CA FA | 	rdbyte	_var01, _var02 wz
26334     01 02 06 51 |  if_ne	add	_var02, #1
26338     F4 FF 9F 5D |  if_ne	jmp	#LR__3720
2633c     01 02 86 F1 | 	sub	_var02, #1
26340                 | LR__3721
26340     09 03 5A F2 | 	cmps	_var02, arg01 wcz
26344     1C 00 90 ED |  if_be	jmp	#LR__3723
26348     09 01 C2 FA | 	rdbyte	_var01, arg01
2634c     01 05 C2 FA | 	rdbyte	_var03, _var02
26350     09 05 42 FC | 	wrbyte	_var03, arg01
26354     01 01 42 FC | 	wrbyte	_var01, _var02
26358     01 12 06 F1 | 	add	arg01, #1
2635c     01 02 86 F1 | 	sub	_var02, #1
26360     DC FF 9F FD | 	jmp	#LR__3721
26364                 | LR__3722
26364                 | LR__3723
26364                 | __system___strrev_ret
26364     2D 00 64 FD | 	ret
26368                 | 
26368                 | __system___fmtpad
26368     06 4A 05 F6 | 	mov	COUNT_, #6
2636c     A8 00 A0 FD | 	call	#pushregs_
26370     09 1F 02 F6 | 	mov	local01, arg01
26374     0A 21 02 F6 | 	mov	local02, arg02
26378     0B 23 02 F6 | 	mov	local03, arg03
2637c     10 13 EA F8 | 	getbyte	arg01, local02, #1
26380     16 20 46 F0 | 	shr	local02, #22
26384     03 20 0E F5 | 	and	local02, #3 wz
26388     00 24 06 F6 | 	mov	local04, #0
2638c     01 20 06 A6 |  if_e	mov	local02, #1
26390     0C 21 CA F7 | 	test	local02, arg04 wz
26394     00 FA 05 A6 |  if_e	mov	result1, #0
26398     88 00 90 AD |  if_e	jmp	#LR__3733
2639c     09 23 C2 F2 | 	subr	local03, arg01
263a0     01 22 56 F2 | 	cmps	local03, #1 wc
263a4     00 FA 05 C6 |  if_b	mov	result1, #0
263a8     78 00 90 CD |  if_b	jmp	#LR__3733
263ac     03 20 0E F2 | 	cmp	local02, #3 wz
263b0     18 00 90 5D |  if_ne	jmp	#LR__3730
263b4     01 18 0E F2 | 	cmp	arg04, #1 wz
263b8     6E 20 62 FD | 	wrz	local02
263bc     10 23 02 F1 | 	add	local03, local02
263c0     11 23 52 F6 | 	abs	local03, local03 wc
263c4     01 22 46 F0 | 	shr	local03, #1
263c8     11 23 82 F6 | 	negc	local03, local03
263cc                 | LR__3730
263cc     01 22 56 F2 | 	cmps	local03, #1 wc
263d0     4C 00 90 CD |  if_b	jmp	#LR__3732
263d4     11 27 02 F6 | 	mov	local05, local03
263d8                 | LR__3731
263d8     0F 21 02 F6 | 	mov	local02, local01
263dc     0F 29 02 F6 | 	mov	local06, local01
263e0     13 20 46 F7 | 	zerox	local02, #19
263e4     14 28 46 F0 | 	shr	local06, #20
263e8     02 28 66 F0 | 	shl	local06, #2
263ec     ED 28 02 F1 | 	add	local06, __methods__
263f0     14 29 02 FB | 	rdlong	local06, local06
263f4     20 12 06 F6 | 	mov	arg01, #32
263f8     F2 22 02 F6 | 	mov	local03, objptr
263fc     10 E5 01 F6 | 	mov	objptr, local02
26400     2D 28 62 FD | 	call	local06
26404     11 E5 01 F6 | 	mov	objptr, local03
26408     FD 28 02 F6 | 	mov	local06, result1
2640c     00 28 56 F2 | 	cmps	local06, #0 wc
26410     14 FB 01 C6 |  if_b	mov	result1, local06
26414     0C 00 90 CD |  if_b	jmp	#LR__3733
26418     14 25 02 F1 | 	add	local04, local06
2641c     EE 27 6E FB | 	djnz	local05, #LR__3731
26420                 | LR__3732
26420     12 FB 01 F6 | 	mov	result1, local04
26424                 | LR__3733
26424     A7 F0 03 F6 | 	mov	ptra, fp
26428     B2 00 A0 FD | 	call	#popregs_
2642c                 | __system___fmtpad_ret
2642c     2D 00 64 FD | 	ret
26430                 | 
26430                 | __system___uitoa
26430     04 4A 05 F6 | 	mov	COUNT_, #4
26434     A8 00 A0 FD | 	call	#pushregs_
26438     09 1F 02 F6 | 	mov	local01, arg01
2643c     00 1A 4E F2 | 	cmps	arg05, #0 wz
26440     0F 1B 02 F6 | 	mov	arg05, local01
26444     00 20 06 F6 | 	mov	local02, #0
26448     37 22 06 56 |  if_ne	mov	local03, #55
2644c     57 22 06 A6 |  if_e	mov	local03, #87
26450                 | LR__3740
26450     0B 15 12 FD | 	qdiv	arg02, arg03
26454     19 24 62 FD | 	getqy	local04
26458     0B 15 12 FD | 	qdiv	arg02, arg03
2645c     0A 24 16 F2 | 	cmp	local04, #10 wc
26460     30 24 06 C1 |  if_b	add	local04, #48
26464     11 25 02 31 |  if_ae	add	local04, local03
26468     0D 25 42 FC | 	wrbyte	local04, arg05
2646c     01 1A 06 F1 | 	add	arg05, #1
26470     01 20 06 F1 | 	add	local02, #1
26474     18 14 62 FD | 	getqx	arg02
26478     00 14 0E F2 | 	cmp	arg02, #0 wz
2647c     D0 FF 9F 5D |  if_ne	jmp	#LR__3740
26480     0C 21 12 F2 | 	cmp	local02, arg04 wc
26484     C8 FF 9F CD |  if_b	jmp	#LR__3740
26488     0D 01 48 FC | 	wrbyte	#0, arg05
2648c     0F 13 02 F6 | 	mov	arg01, local01
26490     8C FE BF FD | 	call	#__system___strrev
26494     10 FB 01 F6 | 	mov	result1, local02
26498     A7 F0 03 F6 | 	mov	ptra, fp
2649c     B2 00 A0 FD | 	call	#popregs_
264a0                 | __system___uitoa_ret
264a0     2D 00 64 FD | 	ret
264a4                 | 
264a4                 | __system__disassemble_0498
264a4     10 4A 05 F6 | 	mov	COUNT_, #16
264a8     A8 00 A0 FD | 	call	#pushregs_
264ac     09 1F 02 F6 | 	mov	local01, arg01
264b0     0A 21 02 F6 | 	mov	local02, arg02
264b4     0B 23 02 F6 | 	mov	local03, arg03
264b8     0C 25 02 F6 | 	mov	local04, arg04
264bc     0D 27 02 F6 | 	mov	local05, arg05
264c0     13 13 52 F6 | 	abs	arg01, local05 wc
264c4     1F 28 C6 C9 |  if_b	decod	local06, #31
264c8     00 28 06 36 |  if_ae	mov	local06, #0
264cc     F0 CF BF FD | 	call	#__system___float_fromuns
264d0     14 FB 61 F5 | 	xor	result1, local06
264d4     FD 2A 02 F6 | 	mov	local07, result1
264d8     00 2C 06 F6 | 	mov	local08, #0
264dc     0F 13 02 F6 | 	mov	arg01, local01
264e0     00 14 06 F6 | 	mov	arg02, #0
264e4     01 16 06 F6 | 	mov	arg03, #1
264e8     0C D8 BF FD | 	call	#__system___float_cmp
264ec     00 FA 0D F2 | 	cmp	result1, #0 wz
264f0     00 2E 06 A6 |  if_e	mov	local09, #0
264f4     10 01 68 AC |  if_e	wrlong	#0, local02
264f8     11 2F 62 AC |  if_e	wrlong	local09, local03
264fc     8C 01 90 AD |  if_e	jmp	#LR__3762
26500     0F 13 02 F6 | 	mov	arg01, local01
26504     BC DC BF FD | 	call	#__system____builtin_ilogb
26508     FD 30 02 F6 | 	mov	local10, result1
2650c     0A 26 0E F2 | 	cmp	local05, #10 wz
26510     24 00 90 5D |  if_ne	jmp	#LR__3750
26514     18 2F 02 F6 | 	mov	local09, local10
26518     01 2E 66 F0 | 	shl	local09, #1
2651c     18 2F 02 F1 | 	add	local09, local10
26520     17 31 52 F6 | 	abs	local10, local09 wc
26524     0A 30 16 FD | 	qdiv	local10, #10
26528     09 32 06 F6 | 	mov	local11, #9
2652c     18 30 62 FD | 	getqx	local10
26530     18 31 82 F6 | 	negc	local10, local10
26534     04 00 90 FD | 	jmp	#LR__3751
26538                 | LR__3750
26538     18 32 06 F6 | 	mov	local11, #24
2653c                 | LR__3751
2653c                 | LR__3752
2653c     08 2C 56 F2 | 	cmps	local08, #8 wc
26540     01 2C 06 F1 | 	add	local08, #1
26544     60 00 90 3D |  if_ae	jmp	#LR__3753
26548     00 C0 1F FF 
2654c     00 12 06 F6 | 	mov	arg01, ##1065353216
26550     15 15 02 F6 | 	mov	arg02, local07
26554     18 17 02 F6 | 	mov	arg03, local10
26558     4C E3 BF FD | 	call	#__system___float_pow_n
2655c     FD 14 02 F6 | 	mov	arg02, result1
26560     0F 13 02 F6 | 	mov	arg01, local01
26564     60 D5 BF FD | 	call	#__system___float_div
26568     FD 34 02 F6 | 	mov	local12, result1
2656c     1A 13 02 F6 | 	mov	arg01, local12
26570     00 C0 1F FF 
26574     00 14 06 F6 | 	mov	arg02, ##1065353216
26578     01 16 06 F6 | 	mov	arg03, #1
2657c     78 D7 BF FD | 	call	#__system___float_cmp
26580     00 FA 55 F2 | 	cmps	result1, #0 wc
26584     01 30 86 C1 |  if_b	sub	local10, #1
26588     B0 FF 9F CD |  if_b	jmp	#LR__3752
2658c     15 15 02 F6 | 	mov	arg02, local07
26590     1A 13 02 F6 | 	mov	arg01, local12
26594     01 16 66 F6 | 	neg	arg03, #1
26598     5C D7 BF FD | 	call	#__system___float_cmp
2659c     00 FA 55 F2 | 	cmps	result1, #0 wc
265a0     01 30 06 31 |  if_ae	add	local10, #1
265a4     94 FF 9F 3D |  if_ae	jmp	#LR__3752
265a8                 | LR__3753
265a8     1A 13 02 F6 | 	mov	arg01, local12
265ac     14 DC BF FD | 	call	#__system____builtin_ilogb
265b0     FD 36 02 F6 | 	mov	local13, result1
265b4     1A 39 02 F6 | 	mov	local14, local12
265b8     17 39 06 F4 | 	bitl	local14, #279
265bc     17 38 26 F4 | 	bith	local14, #23
265c0     1B 39 62 F0 | 	shl	local14, local13
265c4     02 26 0E F2 | 	cmp	local05, #2 wz
265c8     02 24 66 A0 |  if_e	shl	local04, #2
265cc     00 3A 06 F6 | 	mov	local15, #0
265d0     00 24 56 F2 | 	cmps	local04, #0 wc
265d4     10 00 90 3D |  if_ae	jmp	#LR__3754
265d8     18 25 C2 F2 | 	subr	local04, local10
265dc     00 24 56 F2 | 	cmps	local04, #0 wc
265e0     A0 00 90 CD |  if_b	jmp	#LR__3761
265e4     04 00 90 FD | 	jmp	#LR__3755
265e8                 | LR__3754
265e8     01 24 06 F1 | 	add	local04, #1
265ec                 | LR__3755
265ec     19 25 7A F3 | 	fles	local04, local11 wcz
265f0     01 3C 06 F6 | 	mov	local16, #1
265f4     97 22 48 FB | 	callpa	#(@LR__3757-@LR__3756)>>2,fcache_load_ptr_
265f8                 | LR__3756
265f8     00 40 00 FF 
265fc     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
26600     38 00 90 3D |  if_ae	jmp	#LR__3758
26604     01 24 56 F2 | 	cmps	local04, #1 wc
26608     01 24 86 F1 | 	sub	local04, #1
2660c     2C 00 90 CD |  if_b	jmp	#LR__3758
26610     13 3B 02 FD | 	qmul	local15, local05
26614     1C 37 02 F6 | 	mov	local13, local14
26618     17 36 46 F0 | 	shr	local13, #23
2661c     17 39 06 F4 | 	bitl	local14, #279
26620     18 3A 62 FD | 	getqx	local15
26624     13 3D 02 FD | 	qmul	local16, local05
26628     18 3C 62 FD | 	getqx	local16
2662c     13 39 02 FD | 	qmul	local14, local05
26630     1B 3B 02 F1 | 	add	local15, local13
26634     18 38 62 FD | 	getqx	local14
26638     BC FF 9F FD | 	jmp	#LR__3756
2663c                 | LR__3757
2663c                 | LR__3758
2663c     13 2F 02 F6 | 	mov	local09, local05
26640     17 2E 66 F0 | 	shl	local09, #23
26644     17 37 52 F6 | 	abs	local13, local09 wc
26648     01 36 46 F0 | 	shr	local13, #1
2664c     1B 37 82 F6 | 	negc	local13, local13
26650     1B 39 1A F2 | 	cmp	local14, local13 wcz
26654     20 00 90 1D |  if_a	jmp	#LR__3759
26658     17 26 66 F0 | 	shl	local05, #23
2665c     13 37 52 F6 | 	abs	local13, local05 wc
26660     01 36 46 F0 | 	shr	local13, #1
26664     1B 37 82 F6 | 	negc	local13, local13
26668     1B 39 0A F2 | 	cmp	local14, local13 wz
2666c     14 00 90 5D |  if_ne	jmp	#LR__3760
26670     01 3A CE F7 | 	test	local15, #1 wz
26674     0C 00 90 AD |  if_e	jmp	#LR__3760
26678                 | LR__3759
26678     01 3A 06 F1 | 	add	local15, #1
2667c     1E 3B 0A F2 | 	cmp	local15, local16 wz
26680     01 30 06 A1 |  if_e	add	local10, #1
26684                 | LR__3760
26684                 | LR__3761
26684     10 3B 62 FC | 	wrlong	local15, local02
26688     11 31 62 FC | 	wrlong	local10, local03
2668c                 | LR__3762
2668c     A7 F0 03 F6 | 	mov	ptra, fp
26690     B2 00 A0 FD | 	call	#popregs_
26694                 | __system__disassemble_0498_ret
26694     2D 00 64 FD | 	ret
26698                 | 
26698                 | __system__emitsign_0500
26698     00 FA 05 F6 | 	mov	result1, #0
2669c     00 14 0E F2 | 	cmp	arg02, #0 wz
266a0     09 01 02 56 |  if_ne	mov	_var01, arg01
266a4     01 12 06 51 |  if_ne	add	arg01, #1
266a8     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
266ac     01 FA 05 56 |  if_ne	mov	result1, #1
266b0     00 16 0E F2 | 	cmp	arg03, #0 wz
266b4     09 61 48 5C |  if_ne	wrbyte	#48, arg01
266b8     01 12 06 51 |  if_ne	add	arg01, #1
266bc     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
266c0     02 FA 05 51 |  if_ne	add	result1, #2
266c4                 | __system__emitsign_0500_ret
266c4     2D 00 64 FD | 	ret
266c8                 | 
266c8                 | __system___gettxfunc
266c8     01 4A 05 F6 | 	mov	COUNT_, #1
266cc     A8 00 A0 FD | 	call	#pushregs_
266d0     A0 F8 BF FD | 	call	#__system____getftab
266d4     FD 1E 0A F6 | 	mov	local01, result1 wz
266d8     10 00 90 AD |  if_e	jmp	#LR__3770
266dc     08 1E 06 F1 | 	add	local01, #8
266e0     0F 15 0A FB | 	rdlong	arg02, local01 wz
266e4     08 1E 86 F1 | 	sub	local01, #8
266e8     08 00 90 5D |  if_ne	jmp	#LR__3771
266ec                 | LR__3770
266ec     00 FA 05 F6 | 	mov	result1, #0
266f0     0C 00 90 FD | 	jmp	#LR__3772
266f4                 | LR__3771
266f4     00 98 04 FF 
266f8     00 1E 46 F5 | 	or	local01, ##154140672
266fc     0F FB 01 F6 | 	mov	result1, local01
26700                 | LR__3772
26700     A7 F0 03 F6 | 	mov	ptra, fp
26704     B2 00 A0 FD | 	call	#popregs_
26708                 | __system___gettxfunc_ret
26708     2D 00 64 FD | 	ret
2670c                 | 
2670c                 | __system___getrxfunc
2670c     01 4A 05 F6 | 	mov	COUNT_, #1
26710     A8 00 A0 FD | 	call	#pushregs_
26714     5C F8 BF FD | 	call	#__system____getftab
26718     FD 1E 0A F6 | 	mov	local01, result1 wz
2671c     10 00 90 AD |  if_e	jmp	#LR__3780
26720     08 1E 06 F1 | 	add	local01, #8
26724     0F 15 0A FB | 	rdlong	arg02, local01 wz
26728     08 1E 86 F1 | 	sub	local01, #8
2672c     08 00 90 5D |  if_ne	jmp	#LR__3781
26730                 | LR__3780
26730     00 FA 05 F6 | 	mov	result1, #0
26734     0C 00 90 FD | 	jmp	#LR__3782
26738                 | LR__3781
26738     00 A0 04 FF 
2673c     00 1E 46 F5 | 	or	local01, ##155189248
26740     0F FB 01 F6 | 	mov	result1, local01
26744                 | LR__3782
26744     A7 F0 03 F6 | 	mov	ptra, fp
26748     B2 00 A0 FD | 	call	#popregs_
2674c                 | __system___getrxfunc_ret
2674c     2D 00 64 FD | 	ret
26750                 | 
26750                 | __system___getiolock_0540
26750     01 4A 05 F6 | 	mov	COUNT_, #1
26754     A8 00 A0 FD | 	call	#pushregs_
26758     18 F8 BF FD | 	call	#__system____getftab
2675c     FD 1E 0A F6 | 	mov	local01, result1 wz
26760     10 00 90 AD |  if_e	jmp	#LR__3790
26764     08 1E 06 F1 | 	add	local01, #8
26768     0F FB 09 FB | 	rdlong	result1, local01 wz
2676c     08 1E 86 F1 | 	sub	local01, #8
26770     18 00 90 5D |  if_ne	jmp	#LR__3791
26774                 | LR__3790
26774     01 00 00 FF 
26778     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
2677c     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
26780     01 00 00 FF 
26784     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
26788     08 00 90 FD | 	jmp	#LR__3792
2678c                 | LR__3791
2678c     0C 1E 06 F1 | 	add	local01, #12
26790     0F FB 01 F6 | 	mov	result1, local01
26794                 | LR__3792
26794     A7 F0 03 F6 | 	mov	ptra, fp
26798     B2 00 A0 FD | 	call	#popregs_
2679c                 | __system___getiolock_0540_ret
2679c     2D 00 64 FD | 	ret
267a0                 | 
267a0                 | __system____ScanForChar
267a0     09 01 02 F6 | 	mov	_var01, arg01
267a4     09 03 02 F6 | 	mov	_var02, arg01
267a8     97 06 48 FB | 	callpa	#(@LR__3801-@LR__3800)>>2,fcache_load_ptr_
267ac                 | LR__3800
267ac     01 FB C9 FA | 	rdbyte	result1, _var02 wz
267b0     01 02 06 51 |  if_ne	add	_var02, #1
267b4     F4 FF 9F 5D |  if_ne	jmp	#LR__3800
267b8                 | LR__3801
267b8     09 03 82 F1 | 	sub	_var02, arg01
267bc     01 FB 01 F6 | 	mov	result1, _var02
267c0     FD 12 0A F6 | 	mov	arg01, result1 wz
267c4     00 FA 05 A6 |  if_e	mov	result1, #0
267c8     B8 00 90 AD |  if_e	jmp	#LR__3808
267cc     0A 05 02 F6 | 	mov	_var03, arg02
267d0     07 04 4E F7 | 	zerox	_var03, #7 wz
267d4     00 FA 05 A6 |  if_e	mov	result1, #0
267d8     A8 00 90 AD |  if_e	jmp	#LR__3808
267dc     01 16 16 F2 | 	cmp	arg03, #1 wc
267e0     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
267e4     01 16 06 86 |  if_c_and_z	mov	arg03, #1
267e8     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
267ec     94 00 90 4D |  if_c_and_nz	jmp	#LR__3808
267f0     09 17 1A F2 | 	cmp	arg03, arg01 wcz
267f4     10 00 90 ED |  if_be	jmp	#LR__3802
267f8     00 18 0E F2 | 	cmp	arg04, #0 wz
267fc     00 FA 05 A6 |  if_e	mov	result1, #0
26800     80 00 90 AD |  if_e	jmp	#LR__3808
26804     09 17 02 F6 | 	mov	arg03, arg01
26808                 | LR__3802
26808     01 16 86 F1 | 	sub	arg03, #1
2680c     00 18 0E F2 | 	cmp	arg04, #0 wz
26810     38 00 90 5D |  if_ne	jmp	#LR__3804
26814     0B 07 02 F6 | 	mov	_var04, arg03
26818     09 09 02 F6 | 	mov	_var05, arg01
2681c                 | LR__3803
2681c     04 07 12 F2 | 	cmp	_var04, _var05 wc
26820     5C 00 90 3D |  if_ae	jmp	#LR__3807
26824     03 05 02 F6 | 	mov	_var03, _var04
26828     00 05 02 F1 | 	add	_var03, _var01
2682c     02 05 C2 FA | 	rdbyte	_var03, _var03
26830     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
26834     0C 05 0A F2 | 	cmp	_var03, arg04 wz
26838     01 06 06 A1 |  if_e	add	_var04, #1
2683c     03 FB 01 A6 |  if_e	mov	result1, _var04
26840     40 00 90 AD |  if_e	jmp	#LR__3808
26844     01 06 06 F1 | 	add	_var04, #1
26848     D0 FF 9F FD | 	jmp	#LR__3803
2684c                 | LR__3804
2684c     0B 07 02 F6 | 	mov	_var04, arg03
26850                 | LR__3805
26850     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
26854     28 00 90 1D |  if_a	jmp	#LR__3806
26858     03 09 02 F6 | 	mov	_var05, _var04
2685c     00 09 02 F1 | 	add	_var05, _var01
26860     04 05 C2 FA | 	rdbyte	_var03, _var05
26864     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
26868     04 05 0A F2 | 	cmp	_var03, _var05 wz
2686c     01 06 06 A1 |  if_e	add	_var04, #1
26870     03 FB 01 A6 |  if_e	mov	result1, _var04
26874     0C 00 90 AD |  if_e	jmp	#LR__3808
26878     01 06 86 F1 | 	sub	_var04, #1
2687c     D0 FF 9F FD | 	jmp	#LR__3805
26880                 | LR__3806
26880                 | LR__3807
26880     00 FA 05 F6 | 	mov	result1, #0
26884                 | LR__3808
26884                 | __system____ScanForChar_ret
26884     2D 00 64 FD | 	ret
26888                 | 
26888                 | __system___basic_dir
26888     05 4A 05 F6 | 	mov	COUNT_, #5
2688c     A8 00 A0 FD | 	call	#pushregs_
26890     4C F0 07 F1 | 	add	ptra, #76
26894     04 4E 05 F1 | 	add	fp, #4
26898     A7 12 62 FC | 	wrlong	arg01, fp
2689c     04 4E 05 F1 | 	add	fp, #4
268a0     A7 14 62 FC | 	wrlong	arg02, fp
268a4     04 4E 85 F1 | 	sub	fp, #4
268a8     A7 14 0A FB | 	rdlong	arg02, fp wz
268ac     04 4E 85 F1 | 	sub	fp, #4
268b0     04 4E 05 51 |  if_ne	add	fp, #4
268b4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
268b8     04 4E 85 51 |  if_ne	sub	fp, #4
268bc     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
268c0     70 00 90 AD |  if_e	jmp	#LR__3810
268c4     03 00 00 FF 
268c8     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
268cc     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
268d0     03 00 00 FF 
268d4     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
268d8     03 00 00 5F 
268dc     28 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1832
268e0     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
268e4     03 00 00 5F 
268e8     28 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
268ec     D8 E9 BF 5D |  if_ne	call	#__system__closedir
268f0     82 01 00 FF 
268f4     A0 13 06 F6 | 	mov	arg01, ##@LR__4978
268f8     E0 E8 BF FD | 	call	#__system__opendir
268fc     03 00 00 FF 
26900     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26904     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
26908     08 4E 05 F1 | 	add	fp, #8
2690c     A7 20 02 FB | 	rdlong	local02, fp
26910     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26914     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
26918     04 4E 85 F1 | 	sub	fp, #4
2691c     A7 20 02 FB | 	rdlong	local02, fp
26920     04 4E 85 F1 | 	sub	fp, #4
26924     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26928     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
2692c     03 00 00 FF 
26930     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
26934                 | LR__3810
26934     03 00 00 FF 
26938     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
2693c     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
26940     03 00 00 FF 
26944     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
26948     82 01 00 AF 
2694c     A2 FB 05 A6 |  if_e	mov	result1, ##@LR__4979
26950     84 02 90 AD |  if_e	jmp	#LR__3823
26954                 | LR__3811
26954     03 00 00 FF 
26958     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
2695c     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
26960     03 00 00 FF 
26964     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
26968     D0 E9 BF FD | 	call	#__system__readdir
2696c     0C 4E 05 F1 | 	add	fp, #12
26970     A7 FA 61 FC | 	wrlong	result1, fp
26974     0C 4E 85 F1 | 	sub	fp, #12
26978     00 FA 0D F2 | 	cmp	result1, #0 wz
2697c     38 00 90 5D |  if_ne	jmp	#LR__3812
26980     03 00 00 FF 
26984     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
26988     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2698c     03 00 00 FF 
26990     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
26994     30 E9 BF FD | 	call	#__system__closedir
26998     03 00 00 FF 
2699c     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
269a0     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
269a4     03 00 00 FF 
269a8     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
269ac     82 01 00 FF 
269b0     A4 FB 05 F6 | 	mov	result1, ##@LR__4980
269b4     20 02 90 FD | 	jmp	#LR__3823
269b8                 | LR__3812
269b8     0C 4E 05 F1 | 	add	fp, #12
269bc     A7 12 02 FB | 	rdlong	arg01, fp
269c0     0C 4E 85 F1 | 	sub	fp, #12
269c4     03 00 00 FF 
269c8     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
269cc     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
269d0     03 00 00 FF 
269d4     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
269d8     10 09 B0 FD | 	call	#__system___pat_match
269dc     00 FA 0D F2 | 	cmp	result1, #0 wz
269e0     70 FF 9F AD |  if_e	jmp	#LR__3811
269e4     03 00 00 FF 
269e8     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
269ec     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
269f0     03 00 00 FF 
269f4     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
269f8     78 01 90 AD |  if_e	jmp	#LR__3819
269fc     0C 4E 05 F1 | 	add	fp, #12
26a00     A7 12 02 FB | 	rdlong	arg01, fp
26a04     04 4E 05 F1 | 	add	fp, #4
26a08     A7 14 02 F6 | 	mov	arg02, fp
26a0c     10 4E 85 F1 | 	sub	fp, #16
26a10     2C F2 BF FD | 	call	#__system__stat
26a14     40 4E 05 F1 | 	add	fp, #64
26a18     A7 FA 61 FC | 	wrlong	result1, fp
26a1c     40 4E 85 F1 | 	sub	fp, #64
26a20     00 FA 0D F2 | 	cmp	result1, #0 wz
26a24     82 01 00 5F 
26a28     A6 FB 05 56 |  if_ne	mov	result1, ##@LR__4981
26a2c     A8 01 90 5D |  if_ne	jmp	#LR__3823
26a30     18 4E 05 F1 | 	add	fp, #24
26a34     A7 20 02 FB | 	rdlong	local02, fp
26a38     78 00 00 FF 
26a3c     00 20 06 F5 | 	and	local02, ##61440
26a40     2C 4E 05 F1 | 	add	fp, #44
26a44     A7 20 62 FC | 	wrlong	local02, fp
26a48     38 4E 85 F1 | 	sub	fp, #56
26a4c     A7 20 02 FB | 	rdlong	local02, fp
26a50     0C 4E 85 F1 | 	sub	fp, #12
26a54     10 21 C2 FA | 	rdbyte	local02, local02
26a58     2E 20 0E F2 | 	cmp	local02, #46 wz
26a5c     08 4E 05 A1 |  if_e	add	fp, #8
26a60     A7 04 68 AC |  if_e	wrlong	#2, fp
26a64     08 4E C5 F3 | 	sumz	fp, #8
26a68     A7 00 68 5C |  if_ne	wrlong	#0, fp
26a6c     08 4E 85 51 |  if_ne	sub	fp, #8
26a70     44 4E 05 F1 | 	add	fp, #68
26a74     A7 20 02 FB | 	rdlong	local02, fp
26a78     44 4E 85 F1 | 	sub	fp, #68
26a7c     08 00 00 FF 
26a80     00 20 0E F2 | 	cmp	local02, ##4096 wz
26a84     18 00 90 5D |  if_ne	jmp	#LR__3813
26a88     08 4E 05 F1 | 	add	fp, #8
26a8c     A7 20 02 FB | 	rdlong	local02, fp
26a90     10 20 46 F5 | 	or	local02, #16
26a94     A7 20 62 FC | 	wrlong	local02, fp
26a98     08 4E 85 F1 | 	sub	fp, #8
26a9c     AC 00 90 FD | 	jmp	#LR__3818
26aa0                 | LR__3813
26aa0     44 4E 05 F1 | 	add	fp, #68
26aa4     A7 20 02 FB | 	rdlong	local02, fp
26aa8     44 4E 85 F1 | 	sub	fp, #68
26aac     10 00 00 FF 
26ab0     00 20 0E F2 | 	cmp	local02, ##8192 wz
26ab4     44 4E 05 51 |  if_ne	add	fp, #68
26ab8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
26abc     44 4E 85 51 |  if_ne	sub	fp, #68
26ac0     18 00 00 5F 
26ac4     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
26ac8     44 4E 05 51 |  if_ne	add	fp, #68
26acc     0F 23 02 56 |  if_ne	mov	local03, local01
26ad0     44 4E 85 51 |  if_ne	sub	fp, #68
26ad4     20 00 00 5F 
26ad8     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
26adc     18 00 90 5D |  if_ne	jmp	#LR__3814
26ae0     08 4E 05 F1 | 	add	fp, #8
26ae4     A7 20 02 FB | 	rdlong	local02, fp
26ae8     04 20 46 F5 | 	or	local02, #4
26aec     A7 20 62 FC | 	wrlong	local02, fp
26af0     08 4E 85 F1 | 	sub	fp, #8
26af4     54 00 90 FD | 	jmp	#LR__3817
26af8                 | LR__3814
26af8     18 4E 05 F1 | 	add	fp, #24
26afc     A7 20 02 FB | 	rdlong	local02, fp
26b00     18 4E 85 F1 | 	sub	fp, #24
26b04     92 20 CE F7 | 	test	local02, #146 wz
26b08     18 00 90 5D |  if_ne	jmp	#LR__3815
26b0c     08 4E 05 F1 | 	add	fp, #8
26b10     A7 20 02 FB | 	rdlong	local02, fp
26b14     01 20 46 F5 | 	or	local02, #1
26b18     A7 20 62 FC | 	wrlong	local02, fp
26b1c     08 4E 85 F1 | 	sub	fp, #8
26b20     28 00 90 FD | 	jmp	#LR__3816
26b24                 | LR__3815
26b24     44 4E 05 F1 | 	add	fp, #68
26b28     A7 24 02 FB | 	rdlong	local04, fp
26b2c     44 4E 85 F1 | 	sub	fp, #68
26b30     08 00 00 FF 
26b34     00 24 0E F2 | 	cmp	local04, ##4096 wz
26b38     08 4E 05 51 |  if_ne	add	fp, #8
26b3c     A7 24 02 5B |  if_ne	rdlong	local04, fp
26b40     20 24 46 55 |  if_ne	or	local04, #32
26b44     A7 24 62 5C |  if_ne	wrlong	local04, fp
26b48     08 4E 85 51 |  if_ne	sub	fp, #8
26b4c                 | LR__3816
26b4c                 | LR__3817
26b4c                 | LR__3818
26b4c     08 4E 05 F1 | 	add	fp, #8
26b50     A7 24 02 FB | 	rdlong	local04, fp
26b54     08 4E 85 F1 | 	sub	fp, #8
26b58     03 00 00 FF 
26b5c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
26b60     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
26b64     03 00 00 FF 
26b68     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
26b6c     0F 25 CA F7 | 	test	local04, local01 wz
26b70     E0 FD 9F AD |  if_e	jmp	#LR__3811
26b74                 | LR__3819
26b74     0C 4E 05 F1 | 	add	fp, #12
26b78     A7 12 02 FB | 	rdlong	arg01, fp
26b7c     0C 4E 85 F1 | 	sub	fp, #12
26b80     09 27 02 F6 | 	mov	local05, arg01
26b84     97 06 48 FB | 	callpa	#(@LR__3821-@LR__3820)>>2,fcache_load_ptr_
26b88                 | LR__3820
26b88     13 FB C9 FA | 	rdbyte	result1, local05 wz
26b8c     01 26 06 51 |  if_ne	add	local05, #1
26b90     F4 FF 9F 5D |  if_ne	jmp	#LR__3820
26b94                 | LR__3821
26b94     13 13 C2 F2 | 	subr	arg01, local05
26b98     01 12 06 F1 | 	add	arg01, #1
26b9c     28 E0 BF FD | 	call	#__system___gc_alloc_managed
26ba0     48 4E 05 F1 | 	add	fp, #72
26ba4     A7 FA 61 FC | 	wrlong	result1, fp
26ba8     48 4E 85 F1 | 	sub	fp, #72
26bac     00 FA 0D F2 | 	cmp	result1, #0 wz
26bb0     18 00 90 AD |  if_e	jmp	#LR__3822
26bb4     48 4E 05 F1 | 	add	fp, #72
26bb8     A7 12 02 FB | 	rdlong	arg01, fp
26bbc     3C 4E 85 F1 | 	sub	fp, #60
26bc0     A7 14 02 FB | 	rdlong	arg02, fp
26bc4     0C 4E 85 F1 | 	sub	fp, #12
26bc8     F8 A0 BF FD | 	call	#__system____builtin_strcpy
26bcc                 | LR__3822
26bcc     48 4E 05 F1 | 	add	fp, #72
26bd0     A7 FA 01 FB | 	rdlong	result1, fp
26bd4     48 4E 85 F1 | 	sub	fp, #72
26bd8                 | LR__3823
26bd8     A7 F0 03 F6 | 	mov	ptra, fp
26bdc     B2 00 A0 FD | 	call	#popregs_
26be0                 | __system___basic_dir_ret
26be0     2D 00 64 FD | 	ret
26be4                 | 
26be4                 | __system__pack_0606
26be4     09 01 02 F6 | 	mov	_var01, arg01
26be8     7F 16 06 F1 | 	add	arg03, #127
26bec     04 18 CE F7 | 	test	arg04, #4 wz
26bf0     10 00 90 AD |  if_e	jmp	#LR__3830
26bf4     00 00 0E F2 | 	cmp	_var01, #0 wz
26bf8     16 00 C6 A9 |  if_e	decod	_var01, #22
26bfc     F7 00 26 F4 | 	bith	_var01, #247
26c00     B4 00 90 FD | 	jmp	#LR__3839
26c04                 | LR__3830
26c04     02 18 CE F7 | 	test	arg04, #2 wz
26c08     00 C0 3F 5F 
26c0c     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
26c10     00 14 06 56 |  if_ne	mov	arg02, #0
26c14     A0 00 90 5D |  if_ne	jmp	#LR__3838
26c18     08 18 CE F7 | 	test	arg04, #8 wz
26c1c     00 00 06 56 |  if_ne	mov	_var01, #0
26c20     94 00 90 5D |  if_ne	jmp	#LR__3837
26c24     FF 16 56 F2 | 	cmps	arg03, #255 wc
26c28     00 C0 3F 3F 
26c2c     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
26c30     00 14 06 36 |  if_ae	mov	arg02, #0
26c34     80 00 90 3D |  if_ae	jmp	#LR__3836
26c38     01 16 56 F2 | 	cmps	arg03, #1 wc
26c3c     6C 00 90 3D |  if_ae	jmp	#LR__3834
26c40     01 14 46 F0 | 	shr	arg02, #1
26c44     00 03 02 F6 | 	mov	_var02, _var01
26c48     01 02 06 F5 | 	and	_var02, #1
26c4c     1F 02 66 F0 | 	shl	_var02, #31
26c50     01 15 42 F5 | 	or	arg02, _var02
26c54     01 00 46 F0 | 	shr	_var01, #1
26c58     97 1E 48 FB | 	callpa	#(@LR__3832-@LR__3831)>>2,fcache_load_ptr_
26c5c                 | LR__3831
26c5c     00 16 56 F2 | 	cmps	arg03, #0 wc
26c60     34 00 90 3D |  if_ae	jmp	#LR__3833
26c64     00 00 0E F2 | 	cmp	_var01, #0 wz
26c68     2C 00 90 AD |  if_e	jmp	#LR__3833
26c6c     0A 13 02 F6 | 	mov	arg01, arg02
26c70     01 12 06 F5 | 	and	arg01, #1
26c74     01 16 06 F1 | 	add	arg03, #1
26c78     01 14 46 F0 | 	shr	arg02, #1
26c7c     00 03 02 F6 | 	mov	_var02, _var01
26c80     01 02 06 F5 | 	and	_var02, #1
26c84     1F 02 66 F0 | 	shl	_var02, #31
26c88     01 15 42 F5 | 	or	arg02, _var02
26c8c     09 15 42 F5 | 	or	arg02, arg01
26c90     01 00 46 F0 | 	shr	_var01, #1
26c94     C4 FF 9F FD | 	jmp	#LR__3831
26c98                 | LR__3832
26c98                 | LR__3833
26c98     00 16 56 F2 | 	cmps	arg03, #0 wc
26c9c     18 00 90 3D |  if_ae	jmp	#LR__3835
26ca0     00 14 0E F2 | 	cmp	arg02, #0 wz
26ca4     6F 14 62 FD | 	wrnz	arg02
26ca8     0C 00 90 FD | 	jmp	#LR__3835
26cac                 | LR__3834
26cac     17 01 06 F4 | 	bitl	_var01, #279
26cb0     17 16 66 F0 | 	shl	arg03, #23
26cb4     0B 01 42 F5 | 	or	_var01, arg03
26cb8                 | LR__3835
26cb8                 | LR__3836
26cb8                 | LR__3837
26cb8                 | LR__3838
26cb8                 | LR__3839
26cb8     01 00 CE F7 | 	test	_var01, #1 wz
26cbc     01 14 46 55 |  if_ne	or	arg02, #1
26cc0     0A 17 02 F6 | 	mov	arg03, arg02
26cc4     00 02 06 F6 | 	mov	_var02, #0
26cc8     FF FF 3F FF 
26ccc     FF 15 06 F1 | 	add	arg02, ##2147483647
26cd0     0B 15 12 F2 | 	cmp	arg02, arg03 wc
26cd4     01 02 06 C6 |  if_b	mov	_var02, #1
26cd8     01 01 02 F1 | 	add	_var01, _var02
26cdc     01 18 CE F7 | 	test	arg04, #1 wz
26ce0     1F 00 26 54 |  if_ne	bith	_var01, #31
26ce4     00 FB 01 F6 | 	mov	result1, _var01
26ce8                 | __system__pack_0606_ret
26ce8     2D 00 64 FD | 	ret
26cec                 | 
26cec                 | __system___rxtxioctl_0696
26cec     00 15 0E F2 | 	cmp	arg02, #256 wz
26cf0     0C 00 90 AD |  if_e	jmp	#LR__3840
26cf4     01 15 0E F2 | 	cmp	arg02, #257 wz
26cf8     1C 00 90 AD |  if_e	jmp	#LR__3841
26cfc     30 00 90 FD | 	jmp	#LR__3842
26d00                 | LR__3840
26d00     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26d04     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
26d08     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26d0c     0B FB 61 FC | 	wrlong	result1, arg03
26d10     00 FA 05 F6 | 	mov	result1, #0
26d14     28 00 90 FD | 	jmp	#LR__3843
26d18                 | LR__3841
26d18     0B 13 02 FB | 	rdlong	arg01, arg03
26d1c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26d20     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26d24     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26d28     00 FA 05 F6 | 	mov	result1, #0
26d2c     10 00 90 FD | 	jmp	#LR__3843
26d30                 | LR__3842
26d30     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26d34     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
26d38     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26d3c     01 FA 65 F6 | 	neg	result1, #1
26d40                 | LR__3843
26d40                 | __system___rxtxioctl_0696_ret
26d40     2D 00 64 FD | 	ret
26d44                 | 
26d44                 | __system____dummy_flush_0697
26d44     00 FA 05 F6 | 	mov	result1, #0
26d48                 | __system____dummy_flush_0697_ret
26d48     2D 00 64 FD | 	ret
26d4c                 | 
26d4c                 | __system___vfswrite
26d4c     09 4A 05 F6 | 	mov	COUNT_, #9
26d50     A8 00 A0 FD | 	call	#pushregs_
26d54     09 1F 02 F6 | 	mov	local01, arg01
26d58     0A 21 02 F6 | 	mov	local02, arg02
26d5c     0B 23 02 F6 | 	mov	local03, arg03
26d60     10 25 02 F6 | 	mov	local04, local02
26d64     08 1E 06 F1 | 	add	local01, #8
26d68     0F 13 02 FB | 	rdlong	arg01, local01
26d6c     08 1E 86 F1 | 	sub	local01, #8
26d70     02 12 CE F7 | 	test	arg01, #2 wz
26d74     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26d78     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26d7c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26d80     01 FA 65 A6 |  if_e	neg	result1, #1
26d84     80 01 90 AD |  if_e	jmp	#LR__3856
26d88     08 1E 06 F1 | 	add	local01, #8
26d8c     0F FB 01 FB | 	rdlong	result1, local01
26d90     08 1E 86 F1 | 	sub	local01, #8
26d94     40 FA CD F7 | 	test	result1, #64 wz
26d98     68 00 90 AD |  if_e	jmp	#LR__3851
26d9c     08 1E 06 F1 | 	add	local01, #8
26da0     0F 15 02 FB | 	rdlong	arg02, local01
26da4     08 1E 86 F1 | 	sub	local01, #8
26da8     80 14 CE F7 | 	test	arg02, #128 wz
26dac     54 00 90 AD |  if_e	jmp	#LR__3850
26db0     30 1E 06 F1 | 	add	local01, #48
26db4     0F 27 02 FB | 	rdlong	local05, local01
26db8     13 29 02 F6 | 	mov	local06, local05
26dbc     30 1E 86 F1 | 	sub	local01, #48
26dc0     13 28 46 F7 | 	zerox	local06, #19
26dc4     14 26 46 F0 | 	shr	local05, #20
26dc8     02 26 66 F0 | 	shl	local05, #2
26dcc     ED 26 02 F1 | 	add	local05, __methods__
26dd0     13 27 02 FB | 	rdlong	local05, local05
26dd4     0F 13 02 F6 | 	mov	arg01, local01
26dd8     00 14 06 F6 | 	mov	arg02, #0
26ddc     02 16 06 F6 | 	mov	arg03, #2
26de0     F2 2A 02 F6 | 	mov	local07, objptr
26de4     14 E5 01 F6 | 	mov	objptr, local06
26de8     2D 26 62 FD | 	call	local05
26dec     15 E5 01 F6 | 	mov	objptr, local07
26df0     08 1E 06 F1 | 	add	local01, #8
26df4     0F 2B 02 FB | 	rdlong	local07, local01
26df8     80 2A 26 F5 | 	andn	local07, #128
26dfc     0F 2B 62 FC | 	wrlong	local07, local01
26e00     08 1E 86 F1 | 	sub	local01, #8
26e04                 | LR__3850
26e04                 | LR__3851
26e04     18 1E 06 F1 | 	add	local01, #24
26e08     0F 2B 0A FB | 	rdlong	local07, local01 wz
26e0c     18 1E 86 F1 | 	sub	local01, #24
26e10     80 00 90 AD |  if_e	jmp	#LR__3853
26e14     18 1E 06 F1 | 	add	local01, #24
26e18     0F 27 02 FB | 	rdlong	local05, local01
26e1c     13 29 02 F6 | 	mov	local06, local05
26e20     18 1E 86 F1 | 	sub	local01, #24
26e24     13 28 46 F7 | 	zerox	local06, #19
26e28     14 26 46 F0 | 	shr	local05, #20
26e2c     02 26 66 F0 | 	shl	local05, #2
26e30     ED 26 02 F1 | 	add	local05, __methods__
26e34     13 27 02 FB | 	rdlong	local05, local05
26e38     10 15 02 F6 | 	mov	arg02, local02
26e3c     11 17 02 F6 | 	mov	arg03, local03
26e40     0F 13 02 F6 | 	mov	arg01, local01
26e44     F2 2A 02 F6 | 	mov	local07, objptr
26e48     14 E5 01 F6 | 	mov	objptr, local06
26e4c     2D 26 62 FD | 	call	local05
26e50     15 E5 01 F6 | 	mov	objptr, local07
26e54     FD 2C 02 F6 | 	mov	local08, result1
26e58     00 2C 56 F2 | 	cmps	local08, #0 wc
26e5c     2C 00 90 3D |  if_ae	jmp	#LR__3852
26e60     08 1E 06 F1 | 	add	local01, #8
26e64     0F 2B 02 FB | 	rdlong	local07, local01
26e68     20 2A 46 F5 | 	or	local07, #32
26e6c     0F 2B 62 FC | 	wrlong	local07, local01
26e70     00 2C 4E F2 | 	cmps	local08, #0 wz
26e74     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26e78     F3 2C 62 FC | 	wrlong	local08, ptr___system__dat__
26e7c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26e80     01 FA 65 56 |  if_ne	neg	result1, #1
26e84     00 FA 05 A6 |  if_e	mov	result1, #0
26e88     7C 00 90 FD | 	jmp	#LR__3856
26e8c                 | LR__3852
26e8c     16 FB 01 F6 | 	mov	result1, local08
26e90     74 00 90 FD | 	jmp	#LR__3856
26e94                 | LR__3853
26e94     1C 1E 06 F1 | 	add	local01, #28
26e98     0F 2F 0A FB | 	rdlong	local09, local01 wz
26e9c     1C 1E 86 F1 | 	sub	local01, #28
26ea0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26ea4     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26ea8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26eac     01 FA 65 A6 |  if_e	neg	result1, #1
26eb0     54 00 90 AD |  if_e	jmp	#LR__3856
26eb4     00 2C 06 F6 | 	mov	local08, #0
26eb8                 | LR__3854
26eb8     01 22 16 F2 | 	cmp	local03, #1 wc
26ebc     44 00 90 CD |  if_b	jmp	#LR__3855
26ec0     17 29 02 F6 | 	mov	local06, local09
26ec4     17 27 02 F6 | 	mov	local05, local09
26ec8     13 28 46 F7 | 	zerox	local06, #19
26ecc     14 26 46 F0 | 	shr	local05, #20
26ed0     02 26 66 F0 | 	shl	local05, #2
26ed4     ED 26 02 F1 | 	add	local05, __methods__
26ed8     13 27 02 FB | 	rdlong	local05, local05
26edc     12 13 C2 FA | 	rdbyte	arg01, local04
26ee0     0F 15 02 F6 | 	mov	arg02, local01
26ee4     F2 2A 02 F6 | 	mov	local07, objptr
26ee8     14 E5 01 F6 | 	mov	objptr, local06
26eec     01 24 06 F1 | 	add	local04, #1
26ef0     2D 26 62 FD | 	call	local05
26ef4     15 E5 01 F6 | 	mov	objptr, local07
26ef8     FD 2C 02 F1 | 	add	local08, result1
26efc     01 22 86 F1 | 	sub	local03, #1
26f00     B4 FF 9F FD | 	jmp	#LR__3854
26f04                 | LR__3855
26f04     16 FB 01 F6 | 	mov	result1, local08
26f08                 | LR__3856
26f08     A7 F0 03 F6 | 	mov	ptra, fp
26f0c     B2 00 A0 FD | 	call	#popregs_
26f10                 | __system___vfswrite_ret
26f10     2D 00 64 FD | 	ret
26f14                 | 
26f14                 | __system___vfsread
26f14     03 4A 05 F6 | 	mov	COUNT_, #3
26f18     A8 00 A0 FD | 	call	#pushregs_
26f1c     28 F0 07 F1 | 	add	ptra, #40
26f20     04 4E 05 F1 | 	add	fp, #4
26f24     A7 12 62 FC | 	wrlong	arg01, fp
26f28     04 4E 05 F1 | 	add	fp, #4
26f2c     A7 14 62 FC | 	wrlong	arg02, fp
26f30     04 4E 05 F1 | 	add	fp, #4
26f34     A7 16 62 FC | 	wrlong	arg03, fp
26f38     04 4E 85 F1 | 	sub	fp, #4
26f3c     A7 FA 01 FB | 	rdlong	result1, fp
26f40     14 4E 05 F1 | 	add	fp, #20
26f44     A7 FA 61 FC | 	wrlong	result1, fp
26f48     04 4E 05 F1 | 	add	fp, #4
26f4c     A7 00 68 FC | 	wrlong	#0, fp
26f50     1C 4E 85 F1 | 	sub	fp, #28
26f54     A7 12 02 FB | 	rdlong	arg01, fp
26f58     04 4E 85 F1 | 	sub	fp, #4
26f5c     08 12 06 F1 | 	add	arg01, #8
26f60     09 FB 01 FB | 	rdlong	result1, arg01
26f64     01 FA CD F7 | 	test	result1, #1 wz
26f68     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26f6c     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
26f70     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26f74     01 FA 65 A6 |  if_e	neg	result1, #1
26f78     74 02 90 AD |  if_e	jmp	#LR__3866
26f7c     04 4E 05 F1 | 	add	fp, #4
26f80     A7 12 02 FB | 	rdlong	arg01, fp
26f84     04 4E 85 F1 | 	sub	fp, #4
26f88     14 12 06 F1 | 	add	arg01, #20
26f8c     09 FB 09 FB | 	rdlong	result1, arg01 wz
26f90     B8 00 90 AD |  if_e	jmp	#LR__3861
26f94     04 4E 05 F1 | 	add	fp, #4
26f98     A7 12 02 FB | 	rdlong	arg01, fp
26f9c     09 17 02 F6 | 	mov	arg03, arg01
26fa0     14 16 06 F1 | 	add	arg03, #20
26fa4     0B 1F 02 FB | 	rdlong	local01, arg03
26fa8     0F 21 02 F6 | 	mov	local02, local01
26fac     13 1E 46 F7 | 	zerox	local01, #19
26fb0     14 20 46 F0 | 	shr	local02, #20
26fb4     02 20 66 F0 | 	shl	local02, #2
26fb8     ED 20 02 F1 | 	add	local02, __methods__
26fbc     10 21 02 FB | 	rdlong	local02, local02
26fc0     04 4E 05 F1 | 	add	fp, #4
26fc4     A7 14 02 FB | 	rdlong	arg02, fp
26fc8     04 4E 05 F1 | 	add	fp, #4
26fcc     A7 16 02 FB | 	rdlong	arg03, fp
26fd0     0C 4E 85 F1 | 	sub	fp, #12
26fd4     F2 22 02 F6 | 	mov	local03, objptr
26fd8     0F E5 01 F6 | 	mov	objptr, local01
26fdc     2D 20 62 FD | 	call	local02
26fe0     11 E5 01 F6 | 	mov	objptr, local03
26fe4     10 4E 05 F1 | 	add	fp, #16
26fe8     A7 FA 61 FC | 	wrlong	result1, fp
26fec     10 4E 85 F1 | 	sub	fp, #16
26ff0     00 FA 55 F2 | 	cmps	result1, #0 wc
26ff4     44 00 90 3D |  if_ae	jmp	#LR__3860
26ff8     04 4E 05 F1 | 	add	fp, #4
26ffc     A7 22 02 FB | 	rdlong	local03, fp
27000     11 1F 02 F6 | 	mov	local01, local03
27004     08 22 06 F1 | 	add	local03, #8
27008     11 21 02 FB | 	rdlong	local02, local03
2700c     20 20 46 F5 | 	or	local02, #32
27010     08 1E 06 F1 | 	add	local01, #8
27014     0F 21 62 FC | 	wrlong	local02, local01
27018     0C 4E 05 F1 | 	add	fp, #12
2701c     A7 12 0A FB | 	rdlong	arg01, fp wz
27020     10 4E 85 F1 | 	sub	fp, #16
27024     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27028     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2702c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27030     01 FA 65 56 |  if_ne	neg	result1, #1
27034     00 FA 05 A6 |  if_e	mov	result1, #0
27038     B4 01 90 FD | 	jmp	#LR__3866
2703c                 | LR__3860
2703c     10 4E 05 F1 | 	add	fp, #16
27040     A7 FA 01 FB | 	rdlong	result1, fp
27044     10 4E 85 F1 | 	sub	fp, #16
27048     A4 01 90 FD | 	jmp	#LR__3866
2704c                 | LR__3861
2704c     04 4E 05 F1 | 	add	fp, #4
27050     A7 12 02 FB | 	rdlong	arg01, fp
27054     20 12 06 F1 | 	add	arg01, #32
27058     09 13 0A FB | 	rdlong	arg01, arg01 wz
2705c     14 4E 05 F1 | 	add	fp, #20
27060     A7 12 62 FC | 	wrlong	arg01, fp
27064     18 4E 85 F1 | 	sub	fp, #24
27068     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2706c     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
27070     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
27074     01 FA 65 A6 |  if_e	neg	result1, #1
27078     74 01 90 AD |  if_e	jmp	#LR__3866
2707c     04 4E 05 F1 | 	add	fp, #4
27080     A7 22 02 FB | 	rdlong	local03, fp
27084     04 4E 85 F1 | 	sub	fp, #4
27088     28 22 06 F1 | 	add	local03, #40
2708c     11 21 0A FB | 	rdlong	local02, local03 wz
27090     7C 00 90 AD |  if_e	jmp	#LR__3863
27094     04 4E 05 F1 | 	add	fp, #4
27098     A7 12 02 FB | 	rdlong	arg01, fp
2709c     09 23 02 F6 | 	mov	local03, arg01
270a0     28 22 06 F1 | 	add	local03, #40
270a4     11 1F 02 FB | 	rdlong	local01, local03
270a8     0F 21 02 F6 | 	mov	local02, local01
270ac     13 1E 46 F7 | 	zerox	local01, #19
270b0     14 20 46 F0 | 	shr	local02, #20
270b4     02 20 66 F0 | 	shl	local02, #2
270b8     ED 20 02 F1 | 	add	local02, __methods__
270bc     10 21 02 FB | 	rdlong	local02, local02
270c0     20 4E 05 F1 | 	add	fp, #32
270c4     A7 16 02 F6 | 	mov	arg03, fp
270c8     24 4E 85 F1 | 	sub	fp, #36
270cc     00 15 06 F6 | 	mov	arg02, #256
270d0     F2 22 02 F6 | 	mov	local03, objptr
270d4     0F E5 01 F6 | 	mov	objptr, local01
270d8     2D 20 62 FD | 	call	local02
270dc     11 E5 01 F6 | 	mov	objptr, local03
270e0     10 4E 05 F1 | 	add	fp, #16
270e4     A7 FA 61 FC | 	wrlong	result1, fp
270e8     00 FA 4D F2 | 	cmps	result1, #0 wz
270ec     10 4E 85 F1 | 	sub	fp, #16
270f0     1C 00 90 5D |  if_ne	jmp	#LR__3862
270f4     24 4E 05 F1 | 	add	fp, #36
270f8     A7 20 02 FB | 	rdlong	local02, fp
270fc     24 4E 85 F1 | 	sub	fp, #36
27100     02 20 CE F7 | 	test	local02, #2 wz
27104     20 4E 05 51 |  if_ne	add	fp, #32
27108     A7 02 68 5C |  if_ne	wrlong	#1, fp
2710c     20 4E 85 51 |  if_ne	sub	fp, #32
27110                 | LR__3862
27110                 | LR__3863
27110     10 4E 05 F1 | 	add	fp, #16
27114     A7 00 68 FC | 	wrlong	#0, fp
27118     10 4E 85 F1 | 	sub	fp, #16
2711c                 | LR__3864
2711c     0C 4E 05 F1 | 	add	fp, #12
27120     A7 22 02 FB | 	rdlong	local03, fp
27124     0C 4E 85 F1 | 	sub	fp, #12
27128     01 22 16 F2 | 	cmp	local03, #1 wc
2712c     B4 00 90 CD |  if_b	jmp	#LR__3865
27130     18 4E 05 F1 | 	add	fp, #24
27134     A7 20 02 FB | 	rdlong	local02, fp
27138     10 23 02 F6 | 	mov	local03, local02
2713c     13 22 46 F7 | 	zerox	local03, #19
27140     14 20 46 F0 | 	shr	local02, #20
27144     02 20 66 F0 | 	shl	local02, #2
27148     ED 20 02 F1 | 	add	local02, __methods__
2714c     10 21 02 FB | 	rdlong	local02, local02
27150     14 4E 85 F1 | 	sub	fp, #20
27154     A7 12 02 FB | 	rdlong	arg01, fp
27158     04 4E 85 F1 | 	sub	fp, #4
2715c     F2 1E 02 F6 | 	mov	local01, objptr
27160     11 E5 01 F6 | 	mov	objptr, local03
27164     2D 20 62 FD | 	call	local02
27168     0F E5 01 F6 | 	mov	objptr, local01
2716c     14 4E 05 F1 | 	add	fp, #20
27170     A7 FA 61 FC | 	wrlong	result1, fp
27174     14 4E 85 F1 | 	sub	fp, #20
27178     00 FA 55 F2 | 	cmps	result1, #0 wc
2717c     64 00 90 CD |  if_b	jmp	#LR__3865
27180     1C 4E 05 F1 | 	add	fp, #28
27184     A7 22 02 FB | 	rdlong	local03, fp
27188     11 21 02 F6 | 	mov	local02, local03
2718c     01 20 06 F1 | 	add	local02, #1
27190     A7 20 62 FC | 	wrlong	local02, fp
27194     08 4E 85 F1 | 	sub	fp, #8
27198     A7 20 02 FB | 	rdlong	local02, fp
2719c     11 21 42 FC | 	wrbyte	local02, local03
271a0     04 4E 85 F1 | 	sub	fp, #4
271a4     A7 22 02 FB | 	rdlong	local03, fp
271a8     01 22 06 F1 | 	add	local03, #1
271ac     A7 22 62 FC | 	wrlong	local03, fp
271b0     04 4E 85 F1 | 	sub	fp, #4
271b4     A7 22 02 FB | 	rdlong	local03, fp
271b8     01 22 86 F1 | 	sub	local03, #1
271bc     A7 22 62 FC | 	wrlong	local03, fp
271c0     14 4E 05 F1 | 	add	fp, #20
271c4     A7 22 0A FB | 	rdlong	local03, fp wz
271c8     20 4E 85 F1 | 	sub	fp, #32
271cc     4C FF 9F AD |  if_e	jmp	#LR__3864
271d0     14 4E 05 F1 | 	add	fp, #20
271d4     A7 20 02 FB | 	rdlong	local02, fp
271d8     14 4E 85 F1 | 	sub	fp, #20
271dc     0A 20 0E F2 | 	cmp	local02, #10 wz
271e0     38 FF 9F 5D |  if_ne	jmp	#LR__3864
271e4                 | LR__3865
271e4     10 4E 05 F1 | 	add	fp, #16
271e8     A7 FA 01 FB | 	rdlong	result1, fp
271ec     10 4E 85 F1 | 	sub	fp, #16
271f0                 | LR__3866
271f0     A7 F0 03 F6 | 	mov	ptra, fp
271f4     B2 00 A0 FD | 	call	#popregs_
271f8                 | __system___vfsread_ret
271f8     2D 00 64 FD | 	ret
271fc                 | 
271fc                 | __system____default_filbuf
271fc     04 4A 05 F6 | 	mov	COUNT_, #4
27200     A8 00 A0 FD | 	call	#pushregs_
27204     09 1F 02 F6 | 	mov	local01, arg01
27208     0F 21 02 FB | 	rdlong	local02, local01
2720c     0C 20 06 F1 | 	add	local02, #12
27210     10 FB 09 FB | 	rdlong	result1, local02 wz
27214     0C 20 86 F1 | 	sub	local02, #12
27218     20 00 90 5D |  if_ne	jmp	#LR__3870
2721c     14 20 06 F1 | 	add	local02, #20
27220     10 FB 01 F6 | 	mov	result1, local02
27224     04 20 86 F1 | 	sub	local02, #4
27228     10 FB 61 FC | 	wrlong	result1, local02
2722c     04 20 86 F1 | 	sub	local02, #4
27230     02 00 80 FF 
27234     10 01 68 FC | 	wrlong	##1024, local02
27238     0C 20 86 F1 | 	sub	local02, #12
2723c                 | LR__3870
2723c     14 1E 06 F1 | 	add	local01, #20
27240     0F 23 02 FB | 	rdlong	local03, local01
27244     11 25 02 F6 | 	mov	local04, local03
27248     14 1E 86 F1 | 	sub	local01, #20
2724c     13 24 46 F7 | 	zerox	local04, #19
27250     14 22 46 F0 | 	shr	local03, #20
27254     02 22 66 F0 | 	shl	local03, #2
27258     ED 22 02 F1 | 	add	local03, __methods__
2725c     11 23 02 FB | 	rdlong	local03, local03
27260     10 20 06 F1 | 	add	local02, #16
27264     10 15 02 FB | 	rdlong	arg02, local02
27268     04 20 86 F1 | 	sub	local02, #4
2726c     10 17 02 FB | 	rdlong	arg03, local02
27270     0C 20 86 F1 | 	sub	local02, #12
27274     0F 13 02 F6 | 	mov	arg01, local01
27278     F2 1E 02 F6 | 	mov	local01, objptr
2727c     12 E5 01 F6 | 	mov	objptr, local04
27280     2D 22 62 FD | 	call	local03
27284     0F E5 01 F6 | 	mov	objptr, local01
27288     FD 24 02 F6 | 	mov	local04, result1
2728c     00 24 56 F2 | 	cmps	local04, #0 wc
27290     01 FA 65 C6 |  if_b	neg	result1, #1
27294     28 00 90 CD |  if_b	jmp	#LR__3871
27298     10 25 62 FC | 	wrlong	local04, local02
2729c     10 20 06 F1 | 	add	local02, #16
272a0     10 23 02 FB | 	rdlong	local03, local02
272a4     0C 20 86 F1 | 	sub	local02, #12
272a8     10 23 62 FC | 	wrlong	local03, local02
272ac     04 20 06 F1 | 	add	local02, #4
272b0     10 23 02 FB | 	rdlong	local03, local02
272b4     01 22 46 F5 | 	or	local03, #1
272b8     10 23 62 FC | 	wrlong	local03, local02
272bc     12 FB 01 F6 | 	mov	result1, local04
272c0                 | LR__3871
272c0     A7 F0 03 F6 | 	mov	ptra, fp
272c4     B2 00 A0 FD | 	call	#popregs_
272c8                 | __system____default_filbuf_ret
272c8     2D 00 64 FD | 	ret
272cc                 | 
272cc                 | __system__getlower_1082
272cc     41 12 56 F2 | 	cmps	arg01, #65 wc
272d0     10 00 90 CD |  if_b	jmp	#LR__3880
272d4     5B 12 56 F2 | 	cmps	arg01, #91 wc
272d8     09 FB 01 C6 |  if_b	mov	result1, arg01
272dc     20 FA 05 C1 |  if_b	add	result1, #32
272e0     04 00 90 CD |  if_b	jmp	#__system__getlower_1082_ret
272e4                 | LR__3880
272e4     09 FB 01 F6 | 	mov	result1, arg01
272e8                 | __system__getlower_1082_ret
272e8     2D 00 64 FD | 	ret
272ec                 | 
272ec                 | __system___pat_match
272ec     08 4A 05 F6 | 	mov	COUNT_, #8
272f0     A8 00 A0 FD | 	call	#pushregs_
272f4     09 1F 02 F6 | 	mov	local01, arg01
272f8                 | LR__3890
272f8     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
272fc     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
27300     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
27304     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
27308     2C 00 90 AD |  if_e	jmp	#LR__3891
2730c     0A 13 C2 FA | 	rdbyte	arg01, arg02
27310     B8 FF BF FD | 	call	#__system__getlower_1082
27314     FD 22 02 F6 | 	mov	local03, result1
27318     0F 13 C2 FA | 	rdbyte	arg01, local01
2731c     AC FF BF FD | 	call	#__system__getlower_1082
27320     11 FB 09 F2 | 	cmp	result1, local03 wz
27324     00 FA 05 56 |  if_ne	mov	result1, #0
27328     FC 00 90 5D |  if_ne	jmp	#LR__3899
2732c     01 1E 06 F1 | 	add	local01, #1
27330     01 14 06 F1 | 	add	arg02, #1
27334     C0 FF 9F FD | 	jmp	#LR__3890
27338                 | LR__3891
27338     0A 23 C2 FA | 	rdbyte	local03, arg02
2733c     2A 22 0E F2 | 	cmp	local03, #42 wz
27340     D4 00 90 5D |  if_ne	jmp	#LR__3898
27344     01 14 06 F1 | 	add	arg02, #1
27348     0A 21 C2 FA | 	rdbyte	local02, arg02
2734c     01 14 86 F1 | 	sub	arg02, #1
27350     2E 20 0E F2 | 	cmp	local02, #46 wz
27354     28 00 90 5D |  if_ne	jmp	#LR__3892
27358     02 14 06 F1 | 	add	arg02, #2
2735c     0A 21 C2 FA | 	rdbyte	local02, arg02
27360     02 14 86 F1 | 	sub	arg02, #2
27364     2A 20 0E F2 | 	cmp	local02, #42 wz
27368     03 14 06 A1 |  if_e	add	arg02, #3
2736c     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
27370     03 14 86 A1 |  if_e	sub	arg02, #3
27374     12 27 0A A6 |  if_e	mov	local05, local04 wz
27378     01 FA 05 A6 |  if_e	mov	result1, #1
2737c     A8 00 90 AD |  if_e	jmp	#LR__3899
27380                 | LR__3892
27380     01 14 06 F1 | 	add	arg02, #1
27384     00 28 06 F6 | 	mov	local06, #0
27388     97 1E 48 FB | 	callpa	#(@LR__3895-@LR__3893)>>2,fcache_load_ptr_
2738c                 | LR__3893
2738c     14 2B 02 F6 | 	mov	local07, local06
27390     0A 2B 02 F1 | 	add	local07, arg02
27394     15 2B CA FA | 	rdbyte	local07, local07 wz
27398     14 27 02 56 |  if_ne	mov	local05, local06
2739c     01 26 06 51 |  if_ne	add	local05, #1
273a0     13 29 02 56 |  if_ne	mov	local06, local05
273a4     E4 FF 9F 5D |  if_ne	jmp	#LR__3893
273a8     00 2C 06 F6 | 	mov	local08, #0
273ac                 | LR__3894
273ac     16 2B 02 F6 | 	mov	local07, local08
273b0     0F 2B 02 F1 | 	add	local07, local01
273b4     15 2B CA FA | 	rdbyte	local07, local07 wz
273b8     16 27 02 56 |  if_ne	mov	local05, local08
273bc     01 26 06 51 |  if_ne	add	local05, #1
273c0     13 2D 02 56 |  if_ne	mov	local08, local05
273c4     E4 FF 9F 5D |  if_ne	jmp	#LR__3894
273c8                 | LR__3895
273c8     14 2D 52 F2 | 	cmps	local08, local06 wc
273cc     00 FA 05 C6 |  if_b	mov	result1, #0
273d0     54 00 90 CD |  if_b	jmp	#LR__3899
273d4     16 21 02 F6 | 	mov	local02, local08
273d8     14 21 82 F1 | 	sub	local02, local06
273dc     10 1F 02 F1 | 	add	local01, local02
273e0                 | LR__3896
273e0     01 28 56 F2 | 	cmps	local06, #1 wc
273e4     30 00 90 CD |  if_b	jmp	#LR__3897
273e8     0F 13 C2 FA | 	rdbyte	arg01, local01
273ec     DC FE BF FD | 	call	#__system__getlower_1082
273f0     FD 2C 02 F6 | 	mov	local08, result1
273f4     0A 13 C2 FA | 	rdbyte	arg01, arg02
273f8     D0 FE BF FD | 	call	#__system__getlower_1082
273fc     FD 2C 0A F2 | 	cmp	local08, result1 wz
27400     00 FA 05 56 |  if_ne	mov	result1, #0
27404     20 00 90 5D |  if_ne	jmp	#LR__3899
27408     01 1E 06 F1 | 	add	local01, #1
2740c     01 14 06 F1 | 	add	arg02, #1
27410     01 28 86 F1 | 	sub	local06, #1
27414     C8 FF 9F FD | 	jmp	#LR__3896
27418                 | LR__3897
27418                 | LR__3898
27418     0A 2D CA FA | 	rdbyte	local08, arg02 wz
2741c     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
27420     01 FA 05 A6 |  if_e	mov	result1, #1
27424     00 FA 05 56 |  if_ne	mov	result1, #0
27428                 | LR__3899
27428     A7 F0 03 F6 | 	mov	ptra, fp
2742c     B2 00 A0 FD | 	call	#popregs_
27430                 | __system___pat_match_ret
27430     2D 00 64 FD | 	ret
27434                 | 
27434                 | _fatfs_cc_ff_uni2oem
27434     00 00 06 F6 | 	mov	_var01, #0
27438     80 12 16 F2 | 	cmp	arg01, #128 wc
2743c     09 01 02 C6 |  if_b	mov	_var01, arg01
27440     58 00 90 CD |  if_b	jmp	#LR__3904
27444     80 00 00 FF 
27448     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2744c     4C 00 90 3D |  if_ae	jmp	#LR__3903
27450     0A FB 31 F9 | 	getword	result1, arg02, #0
27454     01 00 00 FF 
27458     52 FB 0D F2 | 	cmp	result1, ##850 wz
2745c     3C 00 90 5D |  if_ne	jmp	#LR__3903
27460                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
27460     00 00 06 F6 | 	mov	_var01, #0
27464     97 14 48 FB | 	callpa	#(@LR__3901-@LR__3900)>>2,fcache_load_ptr_
27468                 | LR__3900
27468     00 FB 31 F9 | 	getword	result1, _var01, #0
2746c     80 FA 15 F2 | 	cmp	result1, #128 wc
27470     1C 00 90 3D |  if_ae	jmp	#LR__3902
27474     00 FB 31 F9 | 	getword	result1, _var01, #0
27478     01 FA 65 F0 | 	shl	result1, #1
2747c     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
27480     FD FA E1 FA | 	rdword	result1, result1
27484     FD 12 0A F2 | 	cmp	arg01, result1 wz
27488     01 00 06 51 |  if_ne	add	_var01, #1
2748c     D8 FF 9F 5D |  if_ne	jmp	#LR__3900
27490                 | LR__3901
27490                 | LR__3902
27490     00 01 32 F9 | 	getword	_var01, _var01, #0
27494     80 00 06 F1 | 	add	_var01, #128
27498     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2749c                 | LR__3903
2749c                 | LR__3904
2749c                 | ' 			c = (c + 0x80) & 0xFF;
2749c                 | ' 		}
2749c                 | ' 	}
2749c                 | ' 
2749c                 | ' 	return c;
2749c     00 FB 01 F6 | 	mov	result1, _var01
274a0                 | _fatfs_cc_ff_uni2oem_ret
274a0     2D 00 64 FD | 	ret
274a4                 | 
274a4                 | _fatfs_cc_ff_oem2uni
274a4     00 00 06 F6 | 	mov	_var01, #0
274a8     09 FB 31 F9 | 	getword	result1, arg01, #0
274ac     80 FA 15 F2 | 	cmp	result1, #128 wc
274b0     09 01 02 C6 |  if_b	mov	_var01, arg01
274b4     2C 00 90 CD |  if_b	jmp	#LR__3911
274b8     0A 15 32 F9 | 	getword	arg02, arg02, #0
274bc     01 00 00 FF 
274c0     52 15 0E F2 | 	cmp	arg02, ##850 wz
274c4     1C 00 90 5D |  if_ne	jmp	#LR__3910
274c8     09 FB 31 F9 | 	getword	result1, arg01, #0
274cc     00 FB 15 F2 | 	cmp	result1, #256 wc
274d0     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
274d4     80 12 86 C1 |  if_b	sub	arg01, #128
274d8     01 12 66 C0 |  if_b	shl	arg01, #1
274dc     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
274e0     09 01 E2 CA |  if_b	rdword	_var01, arg01
274e4                 | LR__3910
274e4                 | LR__3911
274e4                 | ' 		}
274e4                 | ' 	}
274e4                 | ' 
274e4                 | ' 	return c;
274e4     00 FB 01 F6 | 	mov	result1, _var01
274e8                 | _fatfs_cc_ff_oem2uni_ret
274e8     2D 00 64 FD | 	ret
274ec                 | 
274ec                 | _fatfs_cc_ff_wtoupper
274ec     09 01 02 F6 | 	mov	_var01, arg01
274f0     80 00 00 FF 
274f4     00 00 16 F2 | 	cmp	_var01, ##65536 wc
274f8     60 01 90 3D |  if_ae	jmp	#LR__3933
274fc     00 03 02 F6 | 	mov	_var02, _var01
27500     01 01 32 F9 | 	getword	_var01, _var02, #0
27504     08 00 00 FF 
27508     00 00 16 F2 | 	cmp	_var01, ##4096 wc
2750c     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
27510     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
27514     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
27518     01 00 00 3F 
2751c     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
27520     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
27524     01 00 00 3F 
27528     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
2752c     02 07 02 F6 | 	mov	_var04, _var03
27530                 | ' 		uc = (WORD)uni;
27530                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
27530                 | ' 		for (;;) {
27530                 | LR__3920
27530     03 09 E2 FA | 	rdword	_var05, _var04
27534     04 05 02 F6 | 	mov	_var03, _var05
27538     0F 04 4E F7 | 	zerox	_var03, #15 wz
2753c     02 06 06 F1 | 	add	_var04, #2
27540     14 01 90 AD |  if_e	jmp	#LR__3932
27544     01 05 32 F9 | 	getword	_var03, _var02, #0
27548     04 01 32 F9 | 	getword	_var01, _var05, #0
2754c     00 05 12 F2 | 	cmp	_var03, _var01 wc
27550     04 01 90 CD |  if_b	jmp	#LR__3932
27554     03 0B E2 FA | 	rdword	_var06, _var04
27558     05 0D 32 F9 | 	getword	_var07, _var06, #0
2755c     08 0C 46 F0 | 	shr	_var07, #8
27560     05 0B 32 F9 | 	getword	_var06, _var06, #0
27564     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
27568     01 05 32 F9 | 	getword	_var03, _var02, #0
2756c     04 0F 32 F9 | 	getword	_var08, _var05, #0
27570     05 01 32 F9 | 	getword	_var01, _var06, #0
27574     00 0F 02 F1 | 	add	_var08, _var01
27578     07 05 52 F2 | 	cmps	_var03, _var08 wc
2757c     02 06 06 F1 | 	add	_var04, #2
27580     C4 00 90 3D |  if_ae	jmp	#LR__3931
27584                 | ' 				switch (cmd) {
27584     06 11 32 F9 | 	getword	_var09, _var07, #0
27588     09 10 26 F3 | 	fle	_var09, #9
2758c     30 10 62 FD | 	jmprel	_var09
27590                 | LR__3921
27590     24 00 90 FD | 	jmp	#LR__3922
27594     3C 00 90 FD | 	jmp	#LR__3923
27598     54 00 90 FD | 	jmp	#LR__3924
2759c     5C 00 90 FD | 	jmp	#LR__3925
275a0     64 00 90 FD | 	jmp	#LR__3926
275a4     6C 00 90 FD | 	jmp	#LR__3927
275a8     74 00 90 FD | 	jmp	#LR__3928
275ac     7C 00 90 FD | 	jmp	#LR__3929
275b0     84 00 90 FD | 	jmp	#LR__3930
275b4     A0 00 90 FD | 	jmp	#LR__3932
275b8                 | LR__3922
275b8     01 03 32 F9 | 	getword	_var02, _var02, #0
275bc     04 09 32 F9 | 	getword	_var05, _var05, #0
275c0     04 03 82 F1 | 	sub	_var02, _var05
275c4     01 02 66 F0 | 	shl	_var02, #1
275c8     03 03 02 F1 | 	add	_var02, _var04
275cc     01 03 E2 FA | 	rdword	_var02, _var02
275d0     84 00 90 FD | 	jmp	#LR__3932
275d4                 | LR__3923
275d4     01 05 32 F9 | 	getword	_var03, _var02, #0
275d8     01 03 32 F9 | 	getword	_var02, _var02, #0
275dc     04 09 32 F9 | 	getword	_var05, _var05, #0
275e0     04 03 82 F1 | 	sub	_var02, _var05
275e4     01 02 06 F5 | 	and	_var02, #1
275e8     02 03 C2 F2 | 	subr	_var02, _var03
275ec     68 00 90 FD | 	jmp	#LR__3932
275f0                 | LR__3924
275f0     01 03 32 F9 | 	getword	_var02, _var02, #0
275f4     10 02 86 F1 | 	sub	_var02, #16
275f8     5C 00 90 FD | 	jmp	#LR__3932
275fc                 | LR__3925
275fc     01 03 32 F9 | 	getword	_var02, _var02, #0
27600     20 02 86 F1 | 	sub	_var02, #32
27604     50 00 90 FD | 	jmp	#LR__3932
27608                 | LR__3926
27608     01 03 32 F9 | 	getword	_var02, _var02, #0
2760c     30 02 86 F1 | 	sub	_var02, #48
27610     44 00 90 FD | 	jmp	#LR__3932
27614                 | LR__3927
27614     01 03 32 F9 | 	getword	_var02, _var02, #0
27618     1A 02 86 F1 | 	sub	_var02, #26
2761c     38 00 90 FD | 	jmp	#LR__3932
27620                 | LR__3928
27620     01 03 32 F9 | 	getword	_var02, _var02, #0
27624     08 02 06 F1 | 	add	_var02, #8
27628     2C 00 90 FD | 	jmp	#LR__3932
2762c                 | LR__3929
2762c     01 03 32 F9 | 	getword	_var02, _var02, #0
27630     50 02 86 F1 | 	sub	_var02, #80
27634     20 00 90 FD | 	jmp	#LR__3932
27638                 | LR__3930
27638     01 03 32 F9 | 	getword	_var02, _var02, #0
2763c     0E 00 00 FF 
27640     60 02 86 F1 | 	sub	_var02, ##7264
27644                 | ' 				}
27644                 | ' 				break;
27644     10 00 90 FD | 	jmp	#LR__3932
27648                 | LR__3931
27648     0F 0C 4E F7 | 	zerox	_var07, #15 wz
2764c     02 0A 06 AA |  if_e	mul	_var06, #2
27650     05 07 02 A1 |  if_e	add	_var04, _var06
27654     D8 FE 9F FD | 	jmp	#LR__3920
27658                 | LR__3932
27658     01 01 32 F9 | 	getword	_var01, _var02, #0
2765c                 | LR__3933
2765c                 | ' 		}
2765c                 | ' 		uni = uc;
2765c                 | ' 	}
2765c                 | ' 
2765c                 | ' 	return uni;
2765c     00 FB 01 F6 | 	mov	result1, _var01
27660                 | _fatfs_cc_ff_wtoupper_ret
27660     2D 00 64 FD | 	ret
27664                 | 
27664                 | _fatfs_cc_strncpy
27664     09 01 02 F6 | 	mov	_var01, arg01
27668     97 12 48 FB | 	callpa	#(@LR__3941-@LR__3940)>>2,fcache_load_ptr_
2766c                 | ' 
2766c                 | ' 	dscan = dst;
2766c                 | ' 	sscan = src;
2766c                 | ' 	count = n;
2766c                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2766c                 | LR__3940
2766c     01 16 86 F1 | 	sub	arg03, #1
27670     00 16 56 F2 | 	cmps	arg03, #0 wc
27674     18 00 90 CD |  if_b	jmp	#LR__3942
27678     0A FB C1 FA | 	rdbyte	result1, arg02
2767c     00 FB 41 FC | 	wrbyte	result1, _var01
27680     01 14 06 F1 | 	add	arg02, #1
27684     00 FB C9 FA | 	rdbyte	result1, _var01 wz
27688                 | ' 		continue;
27688     01 00 06 F1 | 	add	_var01, #1
2768c     DC FF 9F 5D |  if_ne	jmp	#LR__3940
27690                 | LR__3941
27690                 | LR__3942
27690     97 0C 48 FB | 	callpa	#(@LR__3944-@LR__3943)>>2,fcache_load_ptr_
27694                 | ' 	while (--count >= 0)
27694                 | LR__3943
27694     01 16 86 F1 | 	sub	arg03, #1
27698     00 16 56 F2 | 	cmps	arg03, #0 wc
2769c     00 03 02 36 |  if_ae	mov	_var02, _var01
276a0     01 00 06 31 |  if_ae	add	_var01, #1
276a4     01 01 48 3C |  if_ae	wrbyte	#0, _var02
276a8     E8 FF 9F 3D |  if_ae	jmp	#LR__3943
276ac                 | LR__3944
276ac                 | ' 		*dscan++ = '\0';
276ac                 | ' 	return(dst);
276ac     09 FB 01 F6 | 	mov	result1, arg01
276b0                 | _fatfs_cc_strncpy_ret
276b0     2D 00 64 FD | 	ret
276b4                 | 
276b4                 | _fatfs_cc_memcmp
276b4                 | ' 	for (n = size; n > 0; n--)
276b4     00 16 0E F2 | 	cmp	arg03, #0 wz
276b8     28 00 90 AD |  if_e	jmp	#LR__3951
276bc                 | LR__3950
276bc     09 01 C2 FA | 	rdbyte	_var01, arg01
276c0     0A 03 C2 FA | 	rdbyte	_var02, arg02
276c4     01 01 0A F2 | 	cmp	_var01, _var02 wz
276c8     01 12 06 A1 |  if_e	add	arg01, #1
276cc     01 14 06 A1 |  if_e	add	arg02, #1
276d0                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
276d0     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
276d4     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
276d8     01 FB 81 51 |  if_ne	sub	result1, _var02
276dc     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
276e0     F6 17 6E FB | 	djnz	arg03, #LR__3950
276e4                 | LR__3951
276e4                 | ' 
276e4                 | ' 	return(0);
276e4     00 FA 05 F6 | 	mov	result1, #0
276e8                 | _fatfs_cc_memcmp_ret
276e8     2D 00 64 FD | 	ret
276ec                 | 
276ec                 | _fatfs_cc_strncmp
276ec     09 01 0A F6 | 	mov	_var01, arg01 wz
276f0     14 00 90 5D |  if_ne	jmp	#LR__3960
276f4                 | ' 		return scan2 ? -1 : 0;
276f4     00 14 0E F2 | 	cmp	arg02, #0 wz
276f8     01 02 66 56 |  if_ne	neg	_var02, #1
276fc     00 02 06 A6 |  if_e	mov	_var02, #0
27700     01 FB 01 F6 | 	mov	result1, _var02
27704     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
27708                 | LR__3960
27708     00 14 0E F2 | 	cmp	arg02, #0 wz
2770c     01 FA 05 A6 |  if_e	mov	result1, #1
27710     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
27714     0B 05 02 F6 | 	mov	_var03, arg03
27718     97 16 48 FB | 	callpa	#(@LR__3962-@LR__3961)>>2,fcache_load_ptr_
2771c                 | ' 	count = n;
2771c                 | ' 	do {
2771c                 | LR__3961
2771c     00 07 C2 FA | 	rdbyte	_var04, _var01
27720     0A 09 02 F6 | 	mov	_var05, arg02
27724     04 0B C2 FA | 	rdbyte	_var06, _var05
27728     01 04 86 F1 | 	sub	_var03, #1
2772c     00 04 56 F2 | 	cmps	_var03, #0 wc
27730     01 00 06 F1 | 	add	_var01, #1
27734     01 14 06 F1 | 	add	arg02, #1
27738     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2773c     08 00 90 2D |  if_nc_and_z	jmp	#LR__3963
27740     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
27744     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3961
27748                 | LR__3962
27748                 | LR__3963
27748     00 04 56 F2 | 	cmps	_var03, #0 wc
2774c                 | ' 		return(0);
2774c     00 FA 05 C6 |  if_b	mov	result1, #0
27750     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
27754     05 07 0A F2 | 	cmp	_var04, _var06 wz
27758                 | ' 		return(0);
27758     00 FA 05 A6 |  if_e	mov	result1, #0
2775c     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
27760     00 06 0E F2 | 	cmp	_var04, #0 wz
27764                 | ' 		return(-1);
27764     01 FA 65 A6 |  if_e	neg	result1, #1
27768     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2776c     00 0A 0E F2 | 	cmp	_var06, #0 wz
27770                 | ' 		return(1);
27770     01 FA 05 A6 |  if_e	mov	result1, #1
27774                 | ' 		return(c1 - c2);
27774     03 FB 01 56 |  if_ne	mov	result1, _var04
27778     05 FB 81 51 |  if_ne	sub	result1, _var06
2777c                 | _fatfs_cc_strncmp_ret
2777c     2D 00 64 FD | 	ret
27780                 | 
27780                 | _fatfs_cc_strchr
27780                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
27780                 | ' 	while ((c = *s++) != (char) charwanted)
27780                 | LR__3970
27780     09 01 02 F6 | 	mov	_var01, arg01
27784     00 03 C2 FA | 	rdbyte	_var02, _var01
27788     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
2778c     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
27790     03 05 0A F2 | 	cmp	_var03, _var04 wz
27794     01 12 06 F1 | 	add	arg01, #1
27798     14 00 90 AD |  if_e	jmp	#LR__3971
2779c     01 05 02 F6 | 	mov	_var03, _var02
277a0     07 04 4E F7 | 	zerox	_var03, #7 wz
277a4     00 FA 05 A6 |  if_e	mov	result1, #0
277a8     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
277ac     D0 FF 9F FD | 	jmp	#LR__3970
277b0                 | LR__3971
277b0                 | ' 	return((char *)--s);
277b0     01 12 86 F1 | 	sub	arg01, #1
277b4     09 FB 01 F6 | 	mov	result1, arg01
277b8                 | _fatfs_cc_strchr_ret
277b8     2D 00 64 FD | 	ret
277bc                 | 
277bc                 | _fatfs_cc_disk_initialize
277bc     04 4A 05 F6 | 	mov	COUNT_, #4
277c0     A8 00 A0 FD | 	call	#pushregs_
277c4     40 F0 07 F1 | 	add	ptra, #64
277c8     04 4E 05 F1 | 	add	fp, #4
277cc     A7 12 42 FC | 	wrbyte	arg01, fp
277d0     01 00 00 FF 
277d4     14 E4 05 F1 | 	add	objptr, ##532
277d8     F2 18 02 FB | 	rdlong	arg04, objptr
277dc     2C 4E 05 F1 | 	add	fp, #44
277e0     A7 18 62 FC | 	wrlong	arg04, fp
277e4     04 E4 85 F1 | 	sub	objptr, #4
277e8     F2 18 02 FB | 	rdlong	arg04, objptr
277ec     04 4E 05 F1 | 	add	fp, #4
277f0     A7 18 62 FC | 	wrlong	arg04, fp
277f4     08 E4 05 F1 | 	add	objptr, #8
277f8     F2 18 02 FB | 	rdlong	arg04, objptr
277fc     04 4E 05 F1 | 	add	fp, #4
27800     A7 18 62 FC | 	wrlong	arg04, fp
27804     04 E4 05 F1 | 	add	objptr, #4
27808     F2 18 02 FB | 	rdlong	arg04, objptr
2780c     04 4E 05 F1 | 	add	fp, #4
27810     A7 18 62 FC | 	wrlong	arg04, fp
27814     04 E4 05 F1 | 	add	objptr, #4
27818     F2 02 48 FC | 	wrbyte	#1, objptr
2781c     01 00 00 FF 
27820     20 E4 85 F1 | 	sub	objptr, ##544
27824     38 4E 85 F1 | 	sub	fp, #56
27828     A7 18 CA FA | 	rdbyte	arg04, fp wz
2782c     04 4E 85 F1 | 	sub	fp, #4
27830                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27830                 | '             return RES_NOTRDY;
27830     03 FA 05 56 |  if_ne	mov	result1, #3
27834     D8 05 90 5D |  if_ne	jmp	#LR__3998
27838     13 00 00 FF 
2783c     10 13 06 F6 | 	mov	arg01, ##10000
27840     2C 98 BF FD | 	call	#__system___waitus
27844     30 4E 05 F1 | 	add	fp, #48
27848     A7 12 02 FB | 	rdlong	arg01, fp
2784c     09 01 08 FC | 	wrpin	#0, arg01
27850     04 4E 05 F1 | 	add	fp, #4
27854     A7 12 02 FB | 	rdlong	arg01, fp
27858     09 01 08 FC | 	wrpin	#0, arg01
2785c     04 4E 05 F1 | 	add	fp, #4
27860     A7 12 02 FB | 	rdlong	arg01, fp
27864     09 01 08 FC | 	wrpin	#0, arg01
27868     04 4E 05 F1 | 	add	fp, #4
2786c     A7 12 02 FB | 	rdlong	arg01, fp
27870     09 00 80 FF 
27874     09 01 08 FC | 	wrpin	##4608, arg01
27878     0C 4E 85 F1 | 	sub	fp, #12
2787c     A7 12 02 FB | 	rdlong	arg01, fp
27880     59 12 62 FD | 	drvh	arg01
27884     04 4E 05 F1 | 	add	fp, #4
27888     A7 12 02 FB | 	rdlong	arg01, fp
2788c     59 12 62 FD | 	drvh	arg01
27890     04 4E 05 F1 | 	add	fp, #4
27894     A7 12 02 FB | 	rdlong	arg01, fp
27898     59 12 62 FD | 	drvh	arg01
2789c     04 4E 05 F1 | 	add	fp, #4
278a0     A7 12 02 FB | 	rdlong	arg01, fp
278a4     59 12 62 FD | 	drvh	arg01
278a8     20 4E 85 F1 | 	sub	fp, #32
278ac     00 04 80 FF 
278b0     A7 20 68 FC | 	wrlong	##524304, fp
278b4     04 4E 05 F1 | 	add	fp, #4
278b8     20 03 80 FF 
278bc     A7 90 68 FC | 	wrlong	##409672, fp
278c0     14 4E 05 F1 | 	add	fp, #20
278c4     A7 1E 02 FB | 	rdlong	local01, fp
278c8     18 4E 85 F1 | 	sub	fp, #24
278cc     A7 16 02 FB | 	rdlong	arg03, fp
278d0     40 1E 62 FD | 	dirl	local01
278d4     A0 03 80 FF 
278d8     0F 91 08 FC | 	wrpin	##475208, local01
278dc     0F 17 12 FC | 	wxpin	arg03, local01
278e0     0F 01 28 FC | 	wypin	#0, local01
278e4     41 1E 62 FD | 	dirh	local01
278e8     1C 4E 05 F1 | 	add	fp, #28
278ec     A7 20 02 FB | 	rdlong	local02, fp
278f0     10 1F 82 F1 | 	sub	local01, local02
278f4     07 1E 06 F5 | 	and	local01, #7
278f8     18 1E 66 F0 | 	shl	local01, #24
278fc     78 14 06 F6 | 	mov	arg02, #120
27900     0F 15 42 F5 | 	or	arg02, local01
27904     14 4E 85 F1 | 	sub	fp, #20
27908     A7 14 62 FC | 	wrlong	arg02, fp
2790c     14 4E 05 F1 | 	add	fp, #20
27910     A7 12 02 FB | 	rdlong	arg01, fp
27914     10 14 26 F4 | 	bith	arg02, #16
27918     40 12 62 FD | 	dirl	arg01
2791c     09 15 02 FC | 	wrpin	arg02, arg01
27920     09 3F 18 FC | 	wxpin	#31, arg01
27924     FF FF FF FF 
27928     09 FF 2B FC | 	wypin	##-1, arg01
2792c     41 12 62 FD | 	dirh	arg01
27930     04 4E 85 F1 | 	sub	fp, #4
27934     A7 14 02 FB | 	rdlong	arg02, fp
27938     08 4E 05 F1 | 	add	fp, #8
2793c     A7 22 02 FB | 	rdlong	local03, fp
27940     11 15 82 F1 | 	sub	arg02, local03
27944     07 14 06 F5 | 	and	arg02, #7
27948     18 14 66 F0 | 	shl	arg02, #24
2794c     14 4E 85 F1 | 	sub	fp, #20
27950     A7 14 62 FC | 	wrlong	arg02, fp
27954     29 00 00 FF 
27958     7A 14 46 F5 | 	or	arg02, ##21114
2795c     A7 14 62 FC | 	wrlong	arg02, fp
27960     14 4E 05 F1 | 	add	fp, #20
27964     A7 12 02 FB | 	rdlong	arg01, fp
27968     40 12 62 FD | 	dirl	arg01
2796c     09 15 02 FC | 	wrpin	arg02, arg01
27970     09 4F 18 FC | 	wxpin	#39, arg01
27974     09 01 28 FC | 	wypin	#0, arg01
27978     41 12 62 FD | 	dirh	arg01
2797c     28 4E 85 F1 | 	sub	fp, #40
27980     A7 12 02 F6 | 	mov	arg01, fp
27984     14 4E 85 F1 | 	sub	fp, #20
27988     0A 14 06 F6 | 	mov	arg02, #10
2798c     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
27990     00 12 06 F6 | 	mov	arg01, #0
27994     00 14 06 F6 | 	mov	arg02, #0
27998     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
2799c     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1126
279a0     64 12 06 F6 | 	mov	arg01, #100
279a4     C8 96 BF FD | 	call	#__system___waitus
279a8     14 4E 05 F1 | 	add	fp, #20
279ac     A7 12 02 F6 | 	mov	arg01, fp
279b0     14 4E 85 F1 | 	sub	fp, #20
279b4     0A 14 06 F6 | 	mov	arg02, #10
279b8     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
279bc     0C 4E 05 F1 | 	add	fp, #12
279c0     A7 00 48 FC | 	wrbyte	#0, fp
279c4     0C 4E 85 F1 | 	sub	fp, #12
279c8     00 12 06 F6 | 	mov	arg01, #0
279cc     00 14 06 F6 | 	mov	arg02, #0
279d0     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
279d4     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
279d8     01 18 0E F2 | 	cmp	arg04, #1 wz
279dc     B8 03 90 5D |  if_ne	jmp	#LR__3997
279e0     08 12 06 F6 | 	mov	arg01, #8
279e4     AA 15 06 F6 | 	mov	arg02, #426
279e8     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
279ec     FD FA E1 F8 | 	getbyte	result1, result1, #0
279f0     01 FA 0D F2 | 	cmp	result1, #1 wz
279f4     98 01 90 5D |  if_ne	jmp	#LR__3983
279f8     14 4E 05 F1 | 	add	fp, #20
279fc     A7 12 02 F6 | 	mov	arg01, fp
27a00     14 4E 85 F1 | 	sub	fp, #20
27a04     04 14 06 F6 | 	mov	arg02, #4
27a08     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
27a0c     16 4E 05 F1 | 	add	fp, #22
27a10     A7 24 C2 FA | 	rdbyte	local04, fp
27a14     16 4E 85 F1 | 	sub	fp, #22
27a18     01 24 0E F2 | 	cmp	local04, #1 wz
27a1c     17 4E 05 A1 |  if_e	add	fp, #23
27a20     A7 22 C2 AA |  if_e	rdbyte	local03, fp
27a24     17 4E 85 A1 |  if_e	sub	fp, #23
27a28     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
27a2c     68 03 90 5D |  if_ne	jmp	#LR__3996
27a30                 | ' 				for (tmr = 1000; tmr; tmr--) {
27a30     18 4E 05 F1 | 	add	fp, #24
27a34     01 00 80 FF 
27a38     A7 D0 6B FC | 	wrlong	##1000, fp
27a3c     18 4E 85 F1 | 	sub	fp, #24
27a40                 | LR__3980
27a40     18 4E 05 F1 | 	add	fp, #24
27a44     A7 1E 0A FB | 	rdlong	local01, fp wz
27a48     18 4E 85 F1 | 	sub	fp, #24
27a4c     3C 00 90 AD |  if_e	jmp	#LR__3981
27a50     A9 12 06 F6 | 	mov	arg01, #169
27a54     1E 14 C6 F9 | 	decod	arg02, #30
27a58     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27a5c     FD 24 02 F6 | 	mov	local04, result1
27a60     07 24 4E F7 | 	zerox	local04, #7 wz
27a64     24 00 90 AD |  if_e	jmp	#LR__3981
27a68     01 00 00 FF 
27a6c     E8 13 06 F6 | 	mov	arg01, ##1000
27a70     FC 95 BF FD | 	call	#__system___waitus
27a74     18 4E 05 F1 | 	add	fp, #24
27a78     A7 24 02 FB | 	rdlong	local04, fp
27a7c     01 24 86 F1 | 	sub	local04, #1
27a80     A7 24 62 FC | 	wrlong	local04, fp
27a84     18 4E 85 F1 | 	sub	fp, #24
27a88     B4 FF 9F FD | 	jmp	#LR__3980
27a8c                 | LR__3981
27a8c     18 4E 05 F1 | 	add	fp, #24
27a90     A7 24 0A FB | 	rdlong	local04, fp wz
27a94     18 4E 85 F1 | 	sub	fp, #24
27a98     4C 00 90 AD |  if_e	jmp	#LR__3982
27a9c     3A 12 06 F6 | 	mov	arg01, #58
27aa0     00 14 06 F6 | 	mov	arg02, #0
27aa4     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27aa8     FD 22 02 F6 | 	mov	local03, result1
27aac     07 22 4E F7 | 	zerox	local03, #7 wz
27ab0     34 00 90 5D |  if_ne	jmp	#LR__3982
27ab4     14 4E 05 F1 | 	add	fp, #20
27ab8     A7 12 02 F6 | 	mov	arg01, fp
27abc     14 4E 85 F1 | 	sub	fp, #20
27ac0     04 14 06 F6 | 	mov	arg02, #4
27ac4     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1116
27ac8     14 4E 05 F1 | 	add	fp, #20
27acc     A7 1E C2 FA | 	rdbyte	local01, fp
27ad0     40 1E CE F7 | 	test	local01, #64 wz
27ad4     0C 24 06 56 |  if_ne	mov	local04, #12
27ad8     04 24 06 A6 |  if_e	mov	local04, #4
27adc     08 4E 85 F1 | 	sub	fp, #8
27ae0     A7 24 42 FC | 	wrbyte	local04, fp
27ae4     0C 4E 85 F1 | 	sub	fp, #12
27ae8                 | LR__3982
27ae8     14 24 06 FB | 	rdlong	local04, #20
27aec     18 4E 05 F1 | 	add	fp, #24
27af0     A7 24 62 FC | 	wrlong	local04, fp
27af4     0C 4E 05 F1 | 	add	fp, #12
27af8     A7 24 02 FB | 	rdlong	local04, fp
27afc     1B 24 26 F4 | 	bith	local04, #27
27b00     A7 24 62 FC | 	wrlong	local04, fp
27b04     0C 4E 85 F1 | 	sub	fp, #12
27b08     A7 24 02 FB | 	rdlong	local04, fp
27b0c     18 4E 85 F1 | 	sub	fp, #24
27b10     68 78 04 FF 
27b14     81 25 16 F2 | 	cmp	local04, ##150000001 wc
27b18     1C 4E 05 C1 |  if_b	add	fp, #28
27b1c     00 01 80 CF 
27b20     A7 08 68 CC |  if_b	wrlong	##131076, fp
27b24     1C 4E 85 C1 |  if_b	sub	fp, #28
27b28     6C 02 90 CD |  if_b	jmp	#LR__3996
27b2c     18 4E 05 F1 | 	add	fp, #24
27b30     A7 24 02 FB | 	rdlong	local04, fp
27b34     18 4E 85 F1 | 	sub	fp, #24
27b38     E1 F5 05 FF 
27b3c     01 24 16 F2 | 	cmp	local04, ##200000001 wc
27b40     1C 4E 05 C1 |  if_b	add	fp, #28
27b44     00 01 80 CF 
27b48     A7 0A 68 CC |  if_b	wrlong	##131077, fp
27b4c     1C 4E 85 C1 |  if_b	sub	fp, #28
27b50     44 02 90 CD |  if_b	jmp	#LR__3996
27b54     18 4E 05 F1 | 	add	fp, #24
27b58     A7 24 02 FB | 	rdlong	local04, fp
27b5c     18 4E 85 F1 | 	sub	fp, #24
27b60     3B 58 08 FF 
27b64     01 24 16 F2 | 	cmp	local04, ##280000001 wc
27b68     1C 4E 05 C1 |  if_b	add	fp, #28
27b6c     00 01 80 CF 
27b70     A7 0C 68 CC |  if_b	wrlong	##131078, fp
27b74     1C 4E 85 C1 |  if_b	sub	fp, #28
27b78     1C 02 90 CD |  if_b	jmp	#LR__3996
27b7c     1C 4E 05 F1 | 	add	fp, #28
27b80     80 01 80 FF 
27b84     A7 10 68 FC | 	wrlong	##196616, fp
27b88     1C 4E 85 F1 | 	sub	fp, #28
27b8c     08 02 90 FD | 	jmp	#LR__3996
27b90                 | LR__3983
27b90     A9 12 06 F6 | 	mov	arg01, #169
27b94     00 14 06 F6 | 	mov	arg02, #0
27b98     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27b9c     FD 24 E2 F8 | 	getbyte	local04, result1, #0
27ba0     02 24 16 F2 | 	cmp	local04, #2 wc
27ba4     18 00 90 3D |  if_ae	jmp	#LR__3984
27ba8     0C 4E 05 F1 | 	add	fp, #12
27bac     A7 04 48 FC | 	wrbyte	#2, fp
27bb0     04 4E 05 F1 | 	add	fp, #4
27bb4     A7 52 49 FC | 	wrbyte	#169, fp
27bb8     10 4E 85 F1 | 	sub	fp, #16
27bbc     14 00 90 FD | 	jmp	#LR__3985
27bc0                 | LR__3984
27bc0     0C 4E 05 F1 | 	add	fp, #12
27bc4     A7 02 48 FC | 	wrbyte	#1, fp
27bc8     04 4E 05 F1 | 	add	fp, #4
27bcc     A7 02 48 FC | 	wrbyte	#1, fp
27bd0     10 4E 85 F1 | 	sub	fp, #16
27bd4                 | LR__3985
27bd4                 | ' 				ty =  0x01 ; cmd =  (1) ;
27bd4                 | ' 			}
27bd4                 | ' 			for (tmr = 1000; tmr; tmr--) {
27bd4     18 4E 05 F1 | 	add	fp, #24
27bd8     01 00 80 FF 
27bdc     A7 D0 6B FC | 	wrlong	##1000, fp
27be0     18 4E 85 F1 | 	sub	fp, #24
27be4                 | LR__3986
27be4     18 4E 05 F1 | 	add	fp, #24
27be8     A7 22 0A FB | 	rdlong	local03, fp wz
27bec     18 4E 85 F1 | 	sub	fp, #24
27bf0     44 00 90 AD |  if_e	jmp	#LR__3987
27bf4     10 4E 05 F1 | 	add	fp, #16
27bf8     A7 12 C2 FA | 	rdbyte	arg01, fp
27bfc     10 4E 85 F1 | 	sub	fp, #16
27c00     00 14 06 F6 | 	mov	arg02, #0
27c04     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27c08     FD 24 02 F6 | 	mov	local04, result1
27c0c     07 24 4E F7 | 	zerox	local04, #7 wz
27c10     24 00 90 AD |  if_e	jmp	#LR__3987
27c14     01 00 00 FF 
27c18     E8 13 06 F6 | 	mov	arg01, ##1000
27c1c     50 94 BF FD | 	call	#__system___waitus
27c20     18 4E 05 F1 | 	add	fp, #24
27c24     A7 24 02 FB | 	rdlong	local04, fp
27c28     01 24 86 F1 | 	sub	local04, #1
27c2c     A7 24 62 FC | 	wrlong	local04, fp
27c30     18 4E 85 F1 | 	sub	fp, #24
27c34     AC FF 9F FD | 	jmp	#LR__3986
27c38                 | LR__3987
27c38     18 4E 05 F1 | 	add	fp, #24
27c3c     A7 24 0A FB | 	rdlong	local04, fp wz
27c40     18 4E 85 F1 | 	sub	fp, #24
27c44     14 00 90 AD |  if_e	jmp	#LR__3988
27c48     10 12 06 F6 | 	mov	arg01, #16
27c4c     09 14 C6 F9 | 	decod	arg02, #9
27c50     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27c54     07 FA 4D F7 | 	zerox	result1, #7 wz
27c58     0C 00 90 AD |  if_e	jmp	#LR__3989
27c5c                 | LR__3988
27c5c     0C 4E 05 F1 | 	add	fp, #12
27c60     A7 00 48 FC | 	wrbyte	#0, fp
27c64     0C 4E 85 F1 | 	sub	fp, #12
27c68                 | LR__3989
27c68     14 24 06 FB | 	rdlong	local04, #20
27c6c     18 4E 05 F1 | 	add	fp, #24
27c70     A7 24 62 FC | 	wrlong	local04, fp
27c74     18 4E 85 F1 | 	sub	fp, #24
27c78     F0 FA 02 FF 
27c7c     01 25 16 F2 | 	cmp	local04, ##100000001 wc
27c80     18 00 90 3D |  if_ae	jmp	#LR__3990
27c84     24 4E 05 F1 | 	add	fp, #36
27c88     A7 24 02 FB | 	rdlong	local04, fp
27c8c     1B 24 26 F4 | 	bith	local04, #27
27c90     A7 24 62 FC | 	wrlong	local04, fp
27c94     24 4E 85 F1 | 	sub	fp, #36
27c98     2C 00 90 FD | 	jmp	#LR__3991
27c9c                 | LR__3990
27c9c     18 4E 05 F1 | 	add	fp, #24
27ca0     A7 24 02 FB | 	rdlong	local04, fp
27ca4     18 4E 85 F1 | 	sub	fp, #24
27ca8     E1 F5 05 FF 
27cac     01 24 16 F2 | 	cmp	local04, ##200000001 wc
27cb0     24 4E 05 C1 |  if_b	add	fp, #36
27cb4     A7 24 02 CB |  if_b	rdlong	local04, fp
27cb8     80 00 04 CF 
27cbc     00 24 46 C5 |  if_b	or	local04, ##134283264
27cc0     A7 24 62 CC |  if_b	wrlong	local04, fp
27cc4     24 4E 85 C1 |  if_b	sub	fp, #36
27cc8                 | LR__3991
27cc8     18 4E 05 F1 | 	add	fp, #24
27ccc     A7 24 02 FB | 	rdlong	local04, fp
27cd0     18 4E 85 F1 | 	sub	fp, #24
27cd4     F0 FA 02 FF 
27cd8     01 25 16 F2 | 	cmp	local04, ##100000001 wc
27cdc     1C 4E 05 C1 |  if_b	add	fp, #28
27ce0     00 01 80 CF 
27ce4     A7 08 68 CC |  if_b	wrlong	##131076, fp
27ce8     1C 4E 85 C1 |  if_b	sub	fp, #28
27cec     A8 00 90 CD |  if_b	jmp	#LR__3995
27cf0     18 4E 05 F1 | 	add	fp, #24
27cf4     A7 24 02 FB | 	rdlong	local04, fp
27cf8     18 4E 85 F1 | 	sub	fp, #24
27cfc     68 78 04 FF 
27d00     81 25 16 F2 | 	cmp	local04, ##150000001 wc
27d04     1C 4E 05 C1 |  if_b	add	fp, #28
27d08     80 01 80 CF 
27d0c     A7 0C 68 CC |  if_b	wrlong	##196614, fp
27d10     1C 4E 85 C1 |  if_b	sub	fp, #28
27d14     80 00 90 CD |  if_b	jmp	#LR__3994
27d18     18 4E 05 F1 | 	add	fp, #24
27d1c     A7 24 02 FB | 	rdlong	local04, fp
27d20     18 4E 85 F1 | 	sub	fp, #24
27d24     E1 F5 05 FF 
27d28     01 24 16 F2 | 	cmp	local04, ##200000001 wc
27d2c     1C 4E 05 C1 |  if_b	add	fp, #28
27d30     00 02 80 CF 
27d34     A7 10 68 CC |  if_b	wrlong	##262152, fp
27d38     1C 4E 85 C1 |  if_b	sub	fp, #28
27d3c     58 00 90 CD |  if_b	jmp	#LR__3993
27d40     18 4E 05 F1 | 	add	fp, #24
27d44     A7 24 02 FB | 	rdlong	local04, fp
27d48     18 4E 85 F1 | 	sub	fp, #24
27d4c     59 73 07 FF 
27d50     81 24 16 F2 | 	cmp	local04, ##250000001 wc
27d54     1C 4E 05 C1 |  if_b	add	fp, #28
27d58     80 02 80 CF 
27d5c     A7 14 68 CC |  if_b	wrlong	##327690, fp
27d60     1C 4E 85 C1 |  if_b	sub	fp, #28
27d64     30 00 90 CD |  if_b	jmp	#LR__3992
27d68     18 4E 05 F1 | 	add	fp, #24
27d6c     A7 24 02 FB | 	rdlong	local04, fp
27d70     18 4E 85 F1 | 	sub	fp, #24
27d74     D1 F0 08 FF 
27d78     01 25 16 F2 | 	cmp	local04, ##300000001 wc
27d7c     1C 4E 05 C1 |  if_b	add	fp, #28
27d80     00 03 80 CF 
27d84     A7 18 68 CC |  if_b	wrlong	##393228, fp
27d88     1C 4E 85 F3 | 	sumc	fp, #28
27d8c     80 03 80 3F 
27d90     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
27d94     1C 4E 85 31 |  if_ae	sub	fp, #28
27d98                 | LR__3992
27d98                 | LR__3993
27d98                 | LR__3994
27d98                 | LR__3995
27d98                 | LR__3996
27d98                 | LR__3997
27d98     0C 4E 05 F1 | 	add	fp, #12
27d9c     A7 24 C2 FA | 	rdbyte	local04, fp
27da0     01 00 00 FF 
27da4     21 E4 05 F1 | 	add	objptr, ##545
27da8     F2 24 42 FC | 	wrbyte	local04, objptr
27dac     A7 1E CA FA | 	rdbyte	local01, fp wz
27db0     00 24 06 56 |  if_ne	mov	local04, #0
27db4     01 24 06 A6 |  if_e	mov	local04, #1
27db8     20 4E 05 F1 | 	add	fp, #32
27dbc     A7 24 42 FC | 	wrbyte	local04, fp
27dc0     A7 24 C2 FA | 	rdbyte	local04, fp
27dc4     2C 4E 85 F1 | 	sub	fp, #44
27dc8     01 E4 85 F1 | 	sub	objptr, #1
27dcc     F2 24 42 FC | 	wrbyte	local04, objptr
27dd0     01 00 00 FF 
27dd4     20 E4 85 F1 | 	sub	objptr, ##544
27dd8     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1126
27ddc     34 4E 05 F1 | 	add	fp, #52
27de0     A7 12 02 FB | 	rdlong	arg01, fp
27de4     18 4E 85 F1 | 	sub	fp, #24
27de8     A7 14 02 FB | 	rdlong	arg02, fp
27dec     09 15 12 FC | 	wxpin	arg02, arg01
27df0     1C 4E 05 F1 | 	add	fp, #28
27df4     A7 12 02 FB | 	rdlong	arg01, fp
27df8     14 4E 85 F1 | 	sub	fp, #20
27dfc     A7 14 02 FB | 	rdlong	arg02, fp
27e00     09 15 02 FC | 	wrpin	arg02, arg01
27e04                 | ' 
27e04                 | ' 		}
27e04                 | ' 	}
27e04                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27e04                 | ' 	CardType = ty;
27e04                 | ' 	s = ty ? 0 :  0x01 ;
27e04                 | ' 	Stat = s;
27e04                 | ' 
27e04                 | ' 	deselect();
27e04                 | ' 
27e04                 | ' 
27e04                 | ' 	_wxpin( PIN_CLK, ck_div );
27e04                 | ' 	_wrpin( PIN_DI, spm_tx );
27e04                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
27e04                 | ' 	return s;
27e04     08 4E 05 F1 | 	add	fp, #8
27e08     A7 FA C1 FA | 	rdbyte	result1, fp
27e0c     2C 4E 85 F1 | 	sub	fp, #44
27e10                 | LR__3998
27e10     A7 F0 03 F6 | 	mov	ptra, fp
27e14     B2 00 A0 FD | 	call	#popregs_
27e18                 | _fatfs_cc_disk_initialize_ret
27e18     2D 00 64 FD | 	ret
27e1c                 | 
27e1c                 | _fatfs_cc_disk_read
27e1c     05 4A 05 F6 | 	mov	COUNT_, #5
27e20     A8 00 A0 FD | 	call	#pushregs_
27e24     0A 1F 02 F6 | 	mov	local01, arg02
27e28     0B 21 02 F6 | 	mov	local02, arg03
27e2c     0C 23 02 F6 | 	mov	local03, arg04
27e30     00 12 0E F2 | 	cmp	arg01, #0 wz
27e34     01 FA 05 56 |  if_ne	mov	result1, #1
27e38                 | ' 
27e38                 | ' 	return Stat;
27e38     01 00 00 AF 
27e3c     20 E4 05 A1 |  if_e	add	objptr, ##544
27e40     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27e44     01 00 00 AF 
27e48     20 E4 85 A1 |  if_e	sub	objptr, ##544
27e4c     FD FA E1 F8 | 	getbyte	result1, result1, #0
27e50     01 FA CD F7 | 	test	result1, #1 wz
27e54     03 FA 05 56 |  if_ne	mov	result1, #3
27e58     84 00 90 5D |  if_ne	jmp	#LR__4002
27e5c     01 00 00 FF 
27e60     21 E4 05 F1 | 	add	objptr, ##545
27e64     F2 24 C2 FA | 	rdbyte	local04, objptr
27e68     01 00 00 FF 
27e6c     21 E4 85 F1 | 	sub	objptr, ##545
27e70     08 24 CE F7 | 	test	local04, #8 wz
27e74     09 20 66 A0 |  if_e	shl	local02, #9
27e78     02 22 16 F2 | 	cmp	local03, #2 wc
27e7c     12 24 06 36 |  if_ae	mov	local04, #18
27e80     11 24 06 C6 |  if_b	mov	local04, #17
27e84     10 15 02 F6 | 	mov	arg02, local02
27e88     12 13 02 F6 | 	mov	arg01, local04
27e8c     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27e90     FD 26 02 F6 | 	mov	local05, result1
27e94     07 26 4E F7 | 	zerox	local05, #7 wz
27e98     30 00 90 5D |  if_ne	jmp	#LR__4001
27e9c                 | ' 		do {
27e9c                 | LR__4000
27e9c     0F 13 02 F6 | 	mov	arg01, local01
27ea0     09 14 C6 F9 | 	decod	arg02, #9
27ea4     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1134
27ea8     00 FA 0D F2 | 	cmp	result1, #0 wz
27eac     01 00 00 5F 
27eb0     00 1E 06 51 |  if_ne	add	local01, ##512
27eb4     F9 23 6E 5B |  if_ne	djnz	local03, #LR__4000
27eb8     12 25 E2 F8 | 	getbyte	local04, local04, #0
27ebc     12 24 0E F2 | 	cmp	local04, #18 wz
27ec0     0C 12 06 A6 |  if_e	mov	arg01, #12
27ec4     00 14 06 A6 |  if_e	mov	arg02, #0
27ec8     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1140
27ecc                 | LR__4001
27ecc     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1126
27ed0                 | ' 	}
27ed0                 | ' 	deselect();
27ed0                 | ' 
27ed0                 | ' 	return count ? RES_ERROR : RES_OK;
27ed0     00 22 0E F2 | 	cmp	local03, #0 wz
27ed4     01 26 06 56 |  if_ne	mov	local05, #1
27ed8     00 26 06 A6 |  if_e	mov	local05, #0
27edc     13 FB 01 F6 | 	mov	result1, local05
27ee0                 | LR__4002
27ee0     A7 F0 03 F6 | 	mov	ptra, fp
27ee4     B2 00 A0 FD | 	call	#popregs_
27ee8                 | _fatfs_cc_disk_read_ret
27ee8     2D 00 64 FD | 	ret
27eec                 | 
27eec                 | _fatfs_cc_disk_write
27eec     04 4A 05 F6 | 	mov	COUNT_, #4
27ef0     A8 00 A0 FD | 	call	#pushregs_
27ef4     0A 1F 02 F6 | 	mov	local01, arg02
27ef8     0C 21 02 F6 | 	mov	local02, arg04
27efc     0B 23 02 F6 | 	mov	local03, arg03
27f00     00 12 0E F2 | 	cmp	arg01, #0 wz
27f04     01 FA 05 56 |  if_ne	mov	result1, #1
27f08                 | ' 
27f08                 | ' 	return Stat;
27f08     01 00 00 AF 
27f0c     20 E4 05 A1 |  if_e	add	objptr, ##544
27f10     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
27f14     01 00 00 AF 
27f18     20 E4 85 A1 |  if_e	sub	objptr, ##544
27f1c     FD FA E1 F8 | 	getbyte	result1, result1, #0
27f20     01 FA CD F7 | 	test	result1, #1 wz
27f24     03 FA 05 56 |  if_ne	mov	result1, #3
27f28     D4 00 90 5D |  if_ne	jmp	#LR__4014
27f2c     01 00 00 FF 
27f30     21 E4 05 F1 | 	add	objptr, ##545
27f34     F2 16 C2 FA | 	rdbyte	arg03, objptr
27f38     01 00 00 FF 
27f3c     21 E4 85 F1 | 	sub	objptr, ##545
27f40     08 16 CE F7 | 	test	arg03, #8 wz
27f44     09 22 66 A0 |  if_e	shl	local03, #9
27f48     01 20 0E F2 | 	cmp	local02, #1 wz
27f4c     30 00 90 5D |  if_ne	jmp	#LR__4010
27f50     18 12 06 F6 | 	mov	arg01, #24
27f54     11 15 02 F6 | 	mov	arg02, local03
27f58     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27f5c     FD 24 02 F6 | 	mov	local04, result1
27f60     07 24 4E F7 | 	zerox	local04, #7 wz
27f64     84 00 90 5D |  if_ne	jmp	#LR__4013
27f68     0F 13 02 F6 | 	mov	arg01, local01
27f6c     FE 14 06 F6 | 	mov	arg02, #254
27f70     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1136
27f74     00 FA 0D F2 | 	cmp	result1, #0 wz
27f78     00 20 06 56 |  if_ne	mov	local02, #0
27f7c     6C 00 90 FD | 	jmp	#LR__4013
27f80                 | LR__4010
27f80     01 00 00 FF 
27f84     21 E4 05 F1 | 	add	objptr, ##545
27f88     F2 24 C2 FA | 	rdbyte	local04, objptr
27f8c     01 00 00 FF 
27f90     21 E4 85 F1 | 	sub	objptr, ##545
27f94     06 24 CE F7 | 	test	local04, #6 wz
27f98     97 12 06 56 |  if_ne	mov	arg01, #151
27f9c     10 15 02 56 |  if_ne	mov	arg02, local02
27fa0     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1140
27fa4     11 15 02 F6 | 	mov	arg02, local03
27fa8     19 12 06 F6 | 	mov	arg01, #25
27fac     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1140
27fb0     FD 24 02 F6 | 	mov	local04, result1
27fb4     07 24 4E F7 | 	zerox	local04, #7 wz
27fb8     30 00 90 5D |  if_ne	jmp	#LR__4012
27fbc                 | ' 			do {
27fbc                 | LR__4011
27fbc     0F 13 02 F6 | 	mov	arg01, local01
27fc0     FC 14 06 F6 | 	mov	arg02, #252
27fc4     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1136
27fc8     00 FA 0D F2 | 	cmp	result1, #0 wz
27fcc     01 00 00 5F 
27fd0     00 1E 06 51 |  if_ne	add	local01, ##512
27fd4     F9 21 6E 5B |  if_ne	djnz	local02, #LR__4011
27fd8     00 12 06 F6 | 	mov	arg01, #0
27fdc     FD 14 06 F6 | 	mov	arg02, #253
27fe0     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1136
27fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
27fe8     01 20 06 A6 |  if_e	mov	local02, #1
27fec                 | LR__4012
27fec                 | LR__4013
27fec     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1126
27ff0                 | ' 				count = 1;
27ff0                 | ' 		}
27ff0                 | ' 	}
27ff0                 | ' 	deselect();
27ff0                 | ' 
27ff0                 | ' 	return count ? RES_ERROR : RES_OK;
27ff0     00 20 0E F2 | 	cmp	local02, #0 wz
27ff4     01 24 06 56 |  if_ne	mov	local04, #1
27ff8     00 24 06 A6 |  if_e	mov	local04, #0
27ffc     12 FB 01 F6 | 	mov	result1, local04
28000                 | LR__4014
28000     A7 F0 03 F6 | 	mov	ptra, fp
28004     B2 00 A0 FD | 	call	#popregs_
28008                 | _fatfs_cc_disk_write_ret
28008     2D 00 64 FD | 	ret
2800c                 | 
2800c                 | _fatfs_cc_disk_ioctl
2800c     01 4A 05 F6 | 	mov	COUNT_, #1
28010     A8 00 A0 FD | 	call	#pushregs_
28014     30 F0 07 F1 | 	add	ptra, #48
28018     04 4E 05 F1 | 	add	fp, #4
2801c     A7 12 42 FC | 	wrbyte	arg01, fp
28020     04 4E 05 F1 | 	add	fp, #4
28024     A7 14 42 FC | 	wrbyte	arg02, fp
28028     04 4E 05 F1 | 	add	fp, #4
2802c     A7 16 62 FC | 	wrlong	arg03, fp
28030     08 4E 85 F1 | 	sub	fp, #8
28034     A7 12 CA FA | 	rdbyte	arg01, fp wz
28038     04 4E 85 F1 | 	sub	fp, #4
2803c     01 FA 05 56 |  if_ne	mov	result1, #1
28040                 | ' 
28040                 | ' 	return Stat;
28040     01 00 00 AF 
28044     20 E4 05 A1 |  if_e	add	objptr, ##544
28048     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2804c     01 00 00 AF 
28050     20 E4 85 A1 |  if_e	sub	objptr, ##544
28054     FD FA E1 F8 | 	getbyte	result1, result1, #0
28058     01 FA CD F7 | 	test	result1, #1 wz
2805c     03 FA 05 56 |  if_ne	mov	result1, #3
28060     E4 01 90 5D |  if_ne	jmp	#LR__4028
28064     10 4E 05 F1 | 	add	fp, #16
28068     A7 02 68 FC | 	wrlong	#1, fp
2806c                 | ' 
2806c                 | ' 	res = RES_ERROR;
2806c                 | ' 	switch (ctrl) {
2806c     08 4E 85 F1 | 	sub	fp, #8
28070     A7 1E C2 FA | 	rdbyte	local01, fp
28074     08 4E 85 F1 | 	sub	fp, #8
28078     04 1E 26 F3 | 	fle	local01, #4
2807c     30 1E 62 FD | 	jmprel	local01
28080                 | LR__4020
28080     10 00 90 FD | 	jmp	#LR__4021
28084     24 00 90 FD | 	jmp	#LR__4022
28088     A0 01 90 FD | 	jmp	#LR__4026
2808c     80 01 90 FD | 	jmp	#LR__4025
28090     98 01 90 FD | 	jmp	#LR__4026
28094                 | LR__4021
28094     B4 79 B0 FD | 	call	#_fatfs_cc_select_1130
28098     00 FA 0D F2 | 	cmp	result1, #0 wz
2809c     10 4E 05 51 |  if_ne	add	fp, #16
280a0     A7 00 68 5C |  if_ne	wrlong	#0, fp
280a4     10 4E 85 51 |  if_ne	sub	fp, #16
280a8                 | ' 			break;
280a8     8C 01 90 FD | 	jmp	#LR__4027
280ac                 | LR__4022
280ac     09 12 06 F6 | 	mov	arg01, #9
280b0     00 14 06 F6 | 	mov	arg02, #0
280b4     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1140
280b8     FD 1E 02 F6 | 	mov	local01, result1
280bc     07 1E 4E F7 | 	zerox	local01, #7 wz
280c0     74 01 90 5D |  if_ne	jmp	#LR__4027
280c4     18 4E 05 F1 | 	add	fp, #24
280c8     A7 12 02 F6 | 	mov	arg01, fp
280cc     18 4E 85 F1 | 	sub	fp, #24
280d0     10 14 06 F6 | 	mov	arg02, #16
280d4     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1134
280d8     00 FA 0D F2 | 	cmp	result1, #0 wz
280dc     58 01 90 AD |  if_e	jmp	#LR__4027
280e0     18 4E 05 F1 | 	add	fp, #24
280e4     A7 1E C2 FA | 	rdbyte	local01, fp
280e8     18 4E 85 F1 | 	sub	fp, #24
280ec     06 1E 46 F0 | 	shr	local01, #6
280f0     01 1E 0E F2 | 	cmp	local01, #1 wz
280f4     5C 00 90 5D |  if_ne	jmp	#LR__4023
280f8     21 4E 05 F1 | 	add	fp, #33
280fc     A7 1E C2 FA | 	rdbyte	local01, fp
28100     01 4E 85 F1 | 	sub	fp, #1
28104     A7 FA C1 FA | 	rdbyte	result1, fp
28108     FD FA 31 F9 | 	getword	result1, result1, #0
2810c     08 FA 65 F0 | 	shl	result1, #8
28110     FD 1E 02 F1 | 	add	local01, result1
28114     01 4E 85 F1 | 	sub	fp, #1
28118     A7 FA C1 FA | 	rdbyte	result1, fp
2811c     3F FA 05 F5 | 	and	result1, #63
28120     10 FA 65 F0 | 	shl	result1, #16
28124     FD 1E 02 F1 | 	add	local01, result1
28128     01 1E 06 F1 | 	add	local01, #1
2812c     09 4E 05 F1 | 	add	fp, #9
28130     A7 1E 62 FC | 	wrlong	local01, fp
28134     1C 4E 85 F1 | 	sub	fp, #28
28138     A7 1E 02 FB | 	rdlong	local01, fp
2813c     1C 4E 05 F1 | 	add	fp, #28
28140     A7 FA 01 FB | 	rdlong	result1, fp
28144     28 4E 85 F1 | 	sub	fp, #40
28148     0A FA 65 F0 | 	shl	result1, #10
2814c     0F FB 61 FC | 	wrlong	result1, local01
28150     AC 00 90 FD | 	jmp	#LR__4024
28154                 | LR__4023
28154     1D 4E 05 F1 | 	add	fp, #29
28158     A7 1E C2 FA | 	rdbyte	local01, fp
2815c     0F 1F 42 F8 | 	getnib	local01, local01, #0
28160     05 4E 05 F1 | 	add	fp, #5
28164     A7 FA C1 FA | 	rdbyte	result1, fp
28168     80 FA 05 F5 | 	and	result1, #128
2816c     07 FA C5 F0 | 	sar	result1, #7
28170     FD 1E 02 F1 | 	add	local01, result1
28174     01 4E 85 F1 | 	sub	fp, #1
28178     A7 FA C1 FA | 	rdbyte	result1, fp
2817c     03 FA 05 F5 | 	and	result1, #3
28180     01 FA 65 F0 | 	shl	result1, #1
28184     FD 1E 02 F1 | 	add	local01, result1
28188     02 1E 06 F1 | 	add	local01, #2
2818c     0D 4E 85 F1 | 	sub	fp, #13
28190     A7 1E 42 FC | 	wrbyte	local01, fp
28194     0C 4E 05 F1 | 	add	fp, #12
28198     A7 1E C2 FA | 	rdbyte	local01, fp
2819c     06 1E 46 F0 | 	shr	local01, #6
281a0     01 4E 85 F1 | 	sub	fp, #1
281a4     A7 FA C1 FA | 	rdbyte	result1, fp
281a8     FD FA 31 F9 | 	getword	result1, result1, #0
281ac     02 FA 65 F0 | 	shl	result1, #2
281b0     FD 1E 02 F1 | 	add	local01, result1
281b4     01 4E 85 F1 | 	sub	fp, #1
281b8     A7 FA C1 FA | 	rdbyte	result1, fp
281bc     03 FA 05 F5 | 	and	result1, #3
281c0     FD FA 31 F9 | 	getword	result1, result1, #0
281c4     0A FA 65 F0 | 	shl	result1, #10
281c8     FD 1E 02 F1 | 	add	local01, result1
281cc     01 1E 06 F1 | 	add	local01, #1
281d0     0A 4E 05 F1 | 	add	fp, #10
281d4     A7 1E 62 FC | 	wrlong	local01, fp
281d8     1C 4E 85 F1 | 	sub	fp, #28
281dc     A7 1E 02 FB | 	rdlong	local01, fp
281e0     1C 4E 05 F1 | 	add	fp, #28
281e4     A7 FA 01 FB | 	rdlong	result1, fp
281e8     14 4E 85 F1 | 	sub	fp, #20
281ec     A7 16 C2 FA | 	rdbyte	arg03, fp
281f0     14 4E 85 F1 | 	sub	fp, #20
281f4     09 16 86 F1 | 	sub	arg03, #9
281f8     0B FB 61 F0 | 	shl	result1, arg03
281fc     0F FB 61 FC | 	wrlong	result1, local01
28200                 | LR__4024
28200     10 4E 05 F1 | 	add	fp, #16
28204     A7 00 68 FC | 	wrlong	#0, fp
28208     10 4E 85 F1 | 	sub	fp, #16
2820c                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
2820c                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
2820c                 | ' 					*(LBA_t*)buff = cs << (n - 9);
2820c                 | ' 				}
2820c                 | ' 				res = RES_OK;
2820c                 | ' 			}
2820c                 | ' 			break;
2820c     28 00 90 FD | 	jmp	#LR__4027
28210                 | LR__4025
28210     0C 4E 05 F1 | 	add	fp, #12
28214     A7 1E 02 FB | 	rdlong	local01, fp
28218     0F 01 69 FC | 	wrlong	#128, local01
2821c     04 4E 05 F1 | 	add	fp, #4
28220     A7 00 68 FC | 	wrlong	#0, fp
28224     10 4E 85 F1 | 	sub	fp, #16
28228                 | ' 			*(DWORD*)buff = 128;
28228                 | ' 			res = RES_OK;
28228                 | ' 			break;
28228     0C 00 90 FD | 	jmp	#LR__4027
2822c                 | LR__4026
2822c     10 4E 05 F1 | 	add	fp, #16
28230     A7 08 68 FC | 	wrlong	#4, fp
28234     10 4E 85 F1 | 	sub	fp, #16
28238                 | LR__4027
28238     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1126
2823c                 | ' 			res = RES_PARERR;
2823c                 | ' 	}
2823c                 | ' 
2823c                 | ' 	deselect();
2823c                 | ' 
2823c                 | ' 	return res;
2823c     10 4E 05 F1 | 	add	fp, #16
28240     A7 FA 01 FB | 	rdlong	result1, fp
28244     10 4E 85 F1 | 	sub	fp, #16
28248                 | LR__4028
28248     A7 F0 03 F6 | 	mov	ptra, fp
2824c     B2 00 A0 FD | 	call	#popregs_
28250                 | _fatfs_cc_disk_ioctl_ret
28250     2D 00 64 FD | 	ret
28254                 | 
28254                 | _fatfs_cc_disk_setpins
28254     00 12 0E F2 | 	cmp	arg01, #0 wz
28258     01 FA 65 56 |  if_ne	neg	result1, #1
2825c     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
28260     01 00 00 FF 
28264     10 E4 05 F1 | 	add	objptr, ##528
28268     F2 14 62 FC | 	wrlong	arg02, objptr
2826c     04 E4 05 F1 | 	add	objptr, #4
28270     F2 16 62 FC | 	wrlong	arg03, objptr
28274     04 E4 05 F1 | 	add	objptr, #4
28278     F2 18 62 FC | 	wrlong	arg04, objptr
2827c     04 E4 05 F1 | 	add	objptr, #4
28280     F2 1A 62 FC | 	wrlong	arg05, objptr
28284     01 00 00 FF 
28288     1C E4 85 F1 | 	sub	objptr, ##540
2828c     00 FA 05 F6 | 	mov	result1, #0
28290                 | _fatfs_cc_disk_setpins_ret
28290     2D 00 64 FD | 	ret
28294                 | 
28294                 | _fatfs_cc_tchar2uni
28294     09 01 02 FB | 	rdlong	_var01, arg01
28298     00 03 02 F6 | 	mov	_var02, _var01
2829c     01 00 06 F1 | 	add	_var01, #1
282a0     00 05 02 F6 | 	mov	_var03, _var01
282a4     01 07 C2 FA | 	rdbyte	_var04, _var02
282a8     80 06 CE F7 | 	test	_var04, #128 wz
282ac     E8 00 90 AD |  if_e	jmp	#LR__4037
282b0     03 09 02 F6 | 	mov	_var05, _var04
282b4     E0 08 06 F5 | 	and	_var05, #224
282b8     C0 08 0E F2 | 	cmp	_var05, #192 wz
282bc     1F 06 06 A5 |  if_e	and	_var04, #31
282c0     01 0A 06 A6 |  if_e	mov	_var06, #1
282c4     34 00 90 AD |  if_e	jmp	#LR__4031
282c8     03 09 02 F6 | 	mov	_var05, _var04
282cc     F0 08 06 F5 | 	and	_var05, #240
282d0     E0 08 0E F2 | 	cmp	_var05, #224 wz
282d4     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
282d8     02 0A 06 A6 |  if_e	mov	_var06, #2
282dc     1C 00 90 AD |  if_e	jmp	#LR__4030
282e0     03 09 02 F6 | 	mov	_var05, _var04
282e4     F8 08 06 F5 | 	and	_var05, #248
282e8     F0 08 0E F2 | 	cmp	_var05, #240 wz
282ec     07 06 06 A5 |  if_e	and	_var04, #7
282f0     03 0A 06 A6 |  if_e	mov	_var06, #3
282f4                 | ' 			return 0xFFFFFFFF;
282f4     01 FA 65 56 |  if_ne	neg	result1, #1
282f8     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
282fc                 | LR__4030
282fc                 | LR__4031
282fc                 | ' 		}
282fc                 | ' 		do {
282fc                 | LR__4032
282fc     02 0D C2 FA | 	rdbyte	_var07, _var03
28300     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
28304     C0 08 06 F5 | 	and	_var05, #192
28308     80 08 0E F2 | 	cmp	_var05, #128 wz
2830c     01 04 06 F1 | 	add	_var03, #1
28310     01 FA 65 56 |  if_ne	neg	result1, #1
28314     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
28318     06 06 66 F0 | 	shl	_var04, #6
2831c     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
28320     3F 02 06 F5 | 	and	_var02, #63
28324     01 07 42 F5 | 	or	_var04, _var02
28328     F4 0B 6E FB | 	djnz	_var06, #LR__4032
2832c     80 06 16 F2 | 	cmp	_var04, #128 wc
28330     24 00 90 CD |  if_b	jmp	#LR__4034
28334     6C 00 00 FF 
28338     00 06 16 F2 | 	cmp	_var04, ##55296 wc
2833c     0C 00 90 CD |  if_b	jmp	#LR__4033
28340     70 00 00 FF 
28344     00 06 16 F2 | 	cmp	_var04, ##57344 wc
28348     0C 00 90 CD |  if_b	jmp	#LR__4034
2834c                 | LR__4033
2834c     80 08 00 FF 
28350     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
28354     08 00 90 CD |  if_b	jmp	#LR__4035
28358                 | LR__4034
28358     01 FA 65 F6 | 	neg	result1, #1
2835c     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
28360                 | LR__4035
28360     80 00 00 FF 
28364     00 06 16 F2 | 	cmp	_var04, ##65536 wc
28368     2C 00 90 CD |  if_b	jmp	#LR__4036
2836c     03 03 02 F6 | 	mov	_var02, _var04
28370     80 00 00 FF 
28374     00 02 86 F1 | 	sub	_var02, ##65536
28378     06 02 66 F0 | 	shl	_var02, #6
2837c     80 FF 01 FF 
28380     00 02 06 F5 | 	and	_var02, ##67043328
28384     6E 00 6C FF 
28388     00 08 06 F6 | 	mov	_var05, ##-671032320
2838c     01 09 42 F5 | 	or	_var05, _var02
28390     09 06 46 F7 | 	zerox	_var04, #9
28394     04 07 42 F5 | 	or	_var04, _var05
28398                 | LR__4036
28398                 | LR__4037
28398     09 05 62 FC | 	wrlong	_var03, arg01
2839c                 | ' 	}
2839c                 | ' #line 811 "ff.c"
2839c                 | ' 	*str = p;
2839c                 | ' 	return uc;
2839c     03 FB 01 F6 | 	mov	result1, _var04
283a0                 | _fatfs_cc_tchar2uni_ret
283a0     2D 00 64 FD | 	ret
283a4                 | 
283a4                 | _fatfs_cc_put_utf
283a4     80 12 16 F2 | 	cmp	arg01, #128 wc
283a8     18 00 90 3D |  if_ae	jmp	#LR__4040
283ac     01 16 16 F2 | 	cmp	arg03, #1 wc
283b0     00 FA 05 C6 |  if_b	mov	result1, #0
283b4     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
283b8     0A 13 42 FC | 	wrbyte	arg01, arg02
283bc                 | ' 		*buf = (TCHAR)chr;
283bc                 | ' 		return 1;
283bc     01 FA 05 F6 | 	mov	result1, #1
283c0     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
283c4                 | LR__4040
283c4     04 00 00 FF 
283c8     00 12 16 F2 | 	cmp	arg01, ##2048 wc
283cc     40 00 90 3D |  if_ae	jmp	#LR__4041
283d0     02 16 16 F2 | 	cmp	arg03, #2 wc
283d4     00 FA 05 C6 |  if_b	mov	result1, #0
283d8     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
283dc     09 FB 01 F6 | 	mov	result1, arg01
283e0     06 FA 45 F0 | 	shr	result1, #6
283e4     1F FA 05 F5 | 	and	result1, #31
283e8     C0 16 06 F6 | 	mov	arg03, #192
283ec     FD 16 42 F5 | 	or	arg03, result1
283f0     0A 17 42 FC | 	wrbyte	arg03, arg02
283f4     01 14 06 F1 | 	add	arg02, #1
283f8     3F 12 06 F5 | 	and	arg01, #63
283fc     80 FA 05 F6 | 	mov	result1, #128
28400     09 FB 41 F5 | 	or	result1, arg01
28404     0A FB 41 FC | 	wrbyte	result1, arg02
28408                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
28408                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
28408                 | ' 		return 2;
28408     02 FA 05 F6 | 	mov	result1, #2
2840c     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
28410                 | LR__4041
28410     80 00 00 FF 
28414     00 12 16 F2 | 	cmp	arg01, ##65536 wc
28418     70 00 90 3D |  if_ae	jmp	#LR__4044
2841c     03 16 16 F2 | 	cmp	arg03, #3 wc
28420     18 00 90 CD |  if_b	jmp	#LR__4042
28424     6C 00 00 FF 
28428     00 12 16 F2 | 	cmp	arg01, ##55296 wc
2842c     14 00 90 CD |  if_b	jmp	#LR__4043
28430     70 00 00 FF 
28434     00 12 16 F2 | 	cmp	arg01, ##57344 wc
28438     08 00 90 3D |  if_ae	jmp	#LR__4043
2843c                 | LR__4042
2843c     00 FA 05 F6 | 	mov	result1, #0
28440     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
28444                 | LR__4043
28444     09 FB 59 F8 | 	getnib	result1, arg01, #3
28448     E0 16 06 F6 | 	mov	arg03, #224
2844c     FD 16 42 F5 | 	or	arg03, result1
28450     0A 17 42 FC | 	wrbyte	arg03, arg02
28454     01 14 06 F1 | 	add	arg02, #1
28458     09 FB 01 F6 | 	mov	result1, arg01
2845c     06 FA 45 F0 | 	shr	result1, #6
28460     3F FA 05 F5 | 	and	result1, #63
28464     80 16 06 F6 | 	mov	arg03, #128
28468     FD 16 42 F5 | 	or	arg03, result1
2846c     0A 17 42 FC | 	wrbyte	arg03, arg02
28470     01 14 06 F1 | 	add	arg02, #1
28474     3F 12 06 F5 | 	and	arg01, #63
28478     80 FA 05 F6 | 	mov	result1, #128
2847c     09 FB 41 F5 | 	or	result1, arg01
28480     0A FB 41 FC | 	wrbyte	result1, arg02
28484                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
28484                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
28484                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
28484                 | ' 		return 3;
28484     03 FA 05 F6 | 	mov	result1, #3
28488     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2848c                 | LR__4044
2848c     04 16 16 F2 | 	cmp	arg03, #4 wc
28490     00 FA 05 C6 |  if_b	mov	result1, #0
28494     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
28498     09 01 02 F6 | 	mov	_var01, arg01
2849c     E0 01 06 F4 | 	bitl	_var01, #480
284a0     00 00 6C FF 
284a4     00 00 86 F1 | 	sub	_var01, ##-671088640
284a8     06 00 46 F0 | 	shr	_var01, #6
284ac     09 13 32 F9 | 	getword	arg01, arg01, #0
284b0     6E 00 00 FF 
284b4     00 12 86 F1 | 	sub	arg01, ##56320
284b8     00 08 00 FF 
284bc     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
284c0     02 00 00 CF 
284c4     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
284c8     00 FA 05 36 |  if_ae	mov	result1, #0
284cc     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
284d0     09 01 42 F5 | 	or	_var01, arg01
284d4     80 00 00 FF 
284d8     00 00 06 F1 | 	add	_var01, ##65536
284dc     00 FB 01 F6 | 	mov	result1, _var01
284e0     12 FA 45 F0 | 	shr	result1, #18
284e4     07 FA 05 F5 | 	and	result1, #7
284e8     F0 16 06 F6 | 	mov	arg03, #240
284ec     FD 16 42 F5 | 	or	arg03, result1
284f0     0A 17 42 FC | 	wrbyte	arg03, arg02
284f4     01 14 06 F1 | 	add	arg02, #1
284f8     00 FB 01 F6 | 	mov	result1, _var01
284fc     0C FA 45 F0 | 	shr	result1, #12
28500     3F FA 05 F5 | 	and	result1, #63
28504     80 16 06 F6 | 	mov	arg03, #128
28508     FD 16 42 F5 | 	or	arg03, result1
2850c     0A 17 42 FC | 	wrbyte	arg03, arg02
28510     01 14 06 F1 | 	add	arg02, #1
28514     00 FB 01 F6 | 	mov	result1, _var01
28518     06 FA 45 F0 | 	shr	result1, #6
2851c     3F FA 05 F5 | 	and	result1, #63
28520     80 16 06 F6 | 	mov	arg03, #128
28524     FD 16 42 F5 | 	or	arg03, result1
28528     0A 17 42 FC | 	wrbyte	arg03, arg02
2852c     01 14 06 F1 | 	add	arg02, #1
28530     3F 00 06 F5 | 	and	_var01, #63
28534     80 FA 05 F6 | 	mov	result1, #128
28538     00 FB 41 F5 | 	or	result1, _var01
2853c     0A FB 41 FC | 	wrbyte	result1, arg02
28540                 | ' 	chr = (hc | chr) + 0x10000;
28540                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
28540                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
28540                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
28540                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
28540                 | ' 	return 4;
28540     04 FA 05 F6 | 	mov	result1, #4
28544                 | _fatfs_cc_put_utf_ret
28544     2D 00 64 FD | 	ret
28548                 | 
28548                 | _fatfs_cc_sync_window
28548     02 4A 05 F6 | 	mov	COUNT_, #2
2854c     A8 00 A0 FD | 	call	#pushregs_
28550     09 1F 02 F6 | 	mov	local01, arg01
28554     00 20 06 F6 | 	mov	local02, #0
28558     03 1E 06 F1 | 	add	local01, #3
2855c     0F FB C9 FA | 	rdbyte	result1, local01 wz
28560     03 1E 86 F1 | 	sub	local01, #3
28564     A4 00 90 AD |  if_e	jmp	#LR__4052
28568     01 1E 06 F1 | 	add	local01, #1
2856c     0F 13 C2 FA | 	rdbyte	arg01, local01
28570     33 1E 06 F1 | 	add	local01, #51
28574     0F 15 02 F6 | 	mov	arg02, local01
28578     04 1E 86 F1 | 	sub	local01, #4
2857c     0F 17 02 FB | 	rdlong	arg03, local01
28580     30 1E 86 F1 | 	sub	local01, #48
28584     01 18 06 F6 | 	mov	arg04, #1
28588     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
2858c     00 FA 0D F2 | 	cmp	result1, #0 wz
28590     74 00 90 5D |  if_ne	jmp	#LR__4050
28594     03 1E 06 F1 | 	add	local01, #3
28598     0F 01 48 FC | 	wrbyte	#0, local01
2859c     2D 1E 06 F1 | 	add	local01, #45
285a0     0F FB 01 FB | 	rdlong	result1, local01
285a4     0C 1E 86 F1 | 	sub	local01, #12
285a8     0F 19 02 FB | 	rdlong	arg04, local01
285ac     0C FB 81 F1 | 	sub	result1, arg04
285b0     08 1E 86 F1 | 	sub	local01, #8
285b4     0F 19 02 FB | 	rdlong	arg04, local01
285b8     1C 1E 86 F1 | 	sub	local01, #28
285bc     0C FB 11 F2 | 	cmp	result1, arg04 wc
285c0     48 00 90 3D |  if_ae	jmp	#LR__4051
285c4     02 1E 06 F1 | 	add	local01, #2
285c8     0F 19 C2 FA | 	rdbyte	arg04, local01
285cc     02 1E 86 F1 | 	sub	local01, #2
285d0     02 18 0E F2 | 	cmp	arg04, #2 wz
285d4     34 00 90 5D |  if_ne	jmp	#LR__4051
285d8     01 1E 06 F1 | 	add	local01, #1
285dc     0F 13 C2 FA | 	rdbyte	arg01, local01
285e0     33 1E 06 F1 | 	add	local01, #51
285e4     0F 15 02 F6 | 	mov	arg02, local01
285e8     04 1E 86 F1 | 	sub	local01, #4
285ec     0F 17 02 FB | 	rdlong	arg03, local01
285f0     14 1E 86 F1 | 	sub	local01, #20
285f4     0F 1F 02 FB | 	rdlong	local01, local01
285f8     0F 17 02 F1 | 	add	arg03, local01
285fc     01 18 06 F6 | 	mov	arg04, #1
28600     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
28604     04 00 90 FD | 	jmp	#LR__4051
28608                 | LR__4050
28608     01 20 06 F6 | 	mov	local02, #1
2860c                 | LR__4051
2860c                 | LR__4052
2860c                 | ' 			res = FR_DISK_ERR;
2860c                 | ' 		}
2860c                 | ' 	}
2860c                 | ' 	return res;
2860c     10 FB 01 F6 | 	mov	result1, local02
28610     A7 F0 03 F6 | 	mov	ptra, fp
28614     B2 00 A0 FD | 	call	#popregs_
28618                 | _fatfs_cc_sync_window_ret
28618     2D 00 64 FD | 	ret
2861c                 | 
2861c                 | _fatfs_cc_move_window
2861c     03 4A 05 F6 | 	mov	COUNT_, #3
28620     A8 00 A0 FD | 	call	#pushregs_
28624     09 1F 02 F6 | 	mov	local01, arg01
28628     0A 21 02 F6 | 	mov	local02, arg02
2862c     00 22 06 F6 | 	mov	local03, #0
28630     30 1E 06 F1 | 	add	local01, #48
28634     0F 19 02 FB | 	rdlong	arg04, local01
28638     30 1E 86 F1 | 	sub	local01, #48
2863c     0C 21 0A F2 | 	cmp	local02, arg04 wz
28640     40 00 90 AD |  if_e	jmp	#LR__4061
28644     0F 13 02 F6 | 	mov	arg01, local01
28648     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2864c     FD 22 0A F6 | 	mov	local03, result1 wz
28650     30 00 90 5D |  if_ne	jmp	#LR__4060
28654     01 1E 06 F1 | 	add	local01, #1
28658     0F 13 C2 FA | 	rdbyte	arg01, local01
2865c     33 1E 06 F1 | 	add	local01, #51
28660     0F 15 02 F6 | 	mov	arg02, local01
28664     10 17 02 F6 | 	mov	arg03, local02
28668     01 18 06 F6 | 	mov	arg04, #1
2866c     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
28670     00 FA 0D F2 | 	cmp	result1, #0 wz
28674     01 20 66 56 |  if_ne	neg	local02, #1
28678     01 22 06 56 |  if_ne	mov	local03, #1
2867c     04 1E 86 F1 | 	sub	local01, #4
28680     0F 21 62 FC | 	wrlong	local02, local01
28684                 | LR__4060
28684                 | LR__4061
28684                 | ' 				sect = (LBA_t)0 - 1;
28684                 | ' 				res = FR_DISK_ERR;
28684                 | ' 			}
28684                 | ' 			fs->winsect = sect;
28684                 | ' 		}
28684                 | ' 	}
28684                 | ' 	return res;
28684     11 FB 01 F6 | 	mov	result1, local03
28688     A7 F0 03 F6 | 	mov	ptra, fp
2868c     B2 00 A0 FD | 	call	#popregs_
28690                 | _fatfs_cc_move_window_ret
28690     2D 00 64 FD | 	ret
28694                 | 
28694                 | _fatfs_cc_sync_fs
28694     02 4A 05 F6 | 	mov	COUNT_, #2
28698     A8 00 A0 FD | 	call	#pushregs_
2869c     09 1F 02 F6 | 	mov	local01, arg01
286a0     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
286a4     FD 20 0A F6 | 	mov	local02, result1 wz
286a8     D8 00 90 5D |  if_ne	jmp	#LR__4071
286ac     0F 19 C2 FA | 	rdbyte	arg04, local01
286b0     03 18 0E F2 | 	cmp	arg04, #3 wz
286b4     04 1E 06 A1 |  if_e	add	local01, #4
286b8     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
286bc     04 1E 86 A1 |  if_e	sub	local01, #4
286c0     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
286c4     A0 00 90 5D |  if_ne	jmp	#LR__4070
286c8     34 1E 06 F1 | 	add	local01, #52
286cc     0F 13 02 F6 | 	mov	arg01, local01
286d0     00 14 06 F6 | 	mov	arg02, #0
286d4     09 16 C6 F9 | 	decod	arg03, #9
286d8     98 00 A0 FD | 	call	#\builtin_bytefill_
286dc     0F 13 02 F6 | 	mov	arg01, local01
286e0     FE 13 06 F1 | 	add	arg01, #510
286e4     55 00 80 FF 
286e8     09 AB 58 FC | 	wrword	##43605, arg01
286ec     A9 B0 A0 FF 
286f0     0F A5 68 FC | 	wrlong	##1096897106, local01
286f4     0F 13 02 F6 | 	mov	arg01, local01
286f8     E4 13 06 F1 | 	add	arg01, #484
286fc     B9 A0 B0 FF 
28700     09 E5 68 FC | 	wrlong	##1631679090, arg01
28704     0F 13 02 F6 | 	mov	arg01, local01
28708     E8 13 06 F1 | 	add	arg01, #488
2870c     20 1E 86 F1 | 	sub	local01, #32
28710     0F 15 02 FB | 	rdlong	arg02, local01
28714     09 15 62 FC | 	wrlong	arg02, arg01
28718     20 1E 06 F1 | 	add	local01, #32
2871c     0F 13 02 F6 | 	mov	arg01, local01
28720     EC 13 06 F1 | 	add	arg01, #492
28724     24 1E 86 F1 | 	sub	local01, #36
28728     0F 15 02 FB | 	rdlong	arg02, local01
2872c     09 15 62 FC | 	wrlong	arg02, arg01
28730     10 1E 06 F1 | 	add	local01, #16
28734     0F 17 02 FB | 	rdlong	arg03, local01
28738     01 16 06 F1 | 	add	arg03, #1
2873c     10 1E 06 F1 | 	add	local01, #16
28740     0F 17 62 FC | 	wrlong	arg03, local01
28744     2F 1E 86 F1 | 	sub	local01, #47
28748     0F 13 C2 FA | 	rdbyte	arg01, local01
2874c     33 1E 06 F1 | 	add	local01, #51
28750     0F 15 02 F6 | 	mov	arg02, local01
28754     01 18 06 F6 | 	mov	arg04, #1
28758     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
2875c     30 1E 86 F1 | 	sub	local01, #48
28760     0F 01 48 FC | 	wrbyte	#0, local01
28764     04 1E 86 F1 | 	sub	local01, #4
28768                 | LR__4070
28768     01 1E 06 F1 | 	add	local01, #1
2876c     0F 13 C2 FA | 	rdbyte	arg01, local01
28770     00 14 06 F6 | 	mov	arg02, #0
28774     00 16 06 F6 | 	mov	arg03, #0
28778     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
2877c     00 FA 0D F2 | 	cmp	result1, #0 wz
28780     01 20 06 56 |  if_ne	mov	local02, #1
28784                 | LR__4071
28784                 | ' 	}
28784                 | ' 
28784                 | ' 	return res;
28784     10 FB 01 F6 | 	mov	result1, local02
28788     A7 F0 03 F6 | 	mov	ptra, fp
2878c     B2 00 A0 FD | 	call	#popregs_
28790                 | _fatfs_cc_sync_fs_ret
28790     2D 00 64 FD | 	ret
28794                 | 
28794                 | _fatfs_cc_clst2sect
28794     02 14 86 F1 | 	sub	arg02, #2
28798     18 12 06 F1 | 	add	arg01, #24
2879c     09 01 02 FB | 	rdlong	_var01, arg01
287a0     18 12 86 F1 | 	sub	arg01, #24
287a4     02 00 86 F1 | 	sub	_var01, #2
287a8     00 15 12 F2 | 	cmp	arg02, _var01 wc
287ac     00 FA 05 36 |  if_ae	mov	result1, #0
287b0     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
287b4     0A 12 06 F1 | 	add	arg01, #10
287b8     09 01 E2 FA | 	rdword	_var01, arg01
287bc     0A 01 02 FD | 	qmul	_var01, arg02
287c0                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
287c0     22 12 06 F1 | 	add	arg01, #34
287c4     09 FB 01 FB | 	rdlong	result1, arg01
287c8     18 00 62 FD | 	getqx	_var01
287cc     00 FB 01 F1 | 	add	result1, _var01
287d0                 | _fatfs_cc_clst2sect_ret
287d0     2D 00 64 FD | 	ret
287d4                 | 
287d4                 | _fatfs_cc_get_fat
287d4     07 4A 05 F6 | 	mov	COUNT_, #7
287d8     A8 00 A0 FD | 	call	#pushregs_
287dc     0A 1F 02 F6 | 	mov	local01, arg02
287e0     09 21 02 FB | 	rdlong	local02, arg01
287e4     02 1E 16 F2 | 	cmp	local01, #2 wc
287e8     14 00 90 CD |  if_b	jmp	#LR__4080
287ec     18 20 06 F1 | 	add	local02, #24
287f0     10 23 02 FB | 	rdlong	local03, local02
287f4     18 20 86 F1 | 	sub	local02, #24
287f8     11 1F 12 F2 | 	cmp	local01, local03 wc
287fc     08 00 90 CD |  if_b	jmp	#LR__4081
28800                 | LR__4080
28800     01 24 06 F6 | 	mov	local04, #1
28804     60 01 90 FD | 	jmp	#LR__4088
28808                 | LR__4081
28808     01 24 66 F6 | 	neg	local04, #1
2880c                 | ' 		val = 0xFFFFFFFF;
2880c                 | ' 
2880c                 | ' 		switch (fs->fs_type) {
2880c     10 27 C2 FA | 	rdbyte	local05, local02
28810     01 26 86 F1 | 	sub	local05, #1
28814     03 26 26 F3 | 	fle	local05, #3
28818     30 26 62 FD | 	jmprel	local05
2881c                 | LR__4082
2881c     0C 00 90 FD | 	jmp	#LR__4083
28820     B8 00 90 FD | 	jmp	#LR__4084
28824     F8 00 90 FD | 	jmp	#LR__4085
28828     38 01 90 FD | 	jmp	#LR__4086
2882c                 | LR__4083
2882c     0F 27 02 F6 | 	mov	local05, local01
28830     0F 13 02 F6 | 	mov	arg01, local01
28834     01 12 46 F0 | 	shr	arg01, #1
28838     09 27 02 F1 | 	add	local05, arg01
2883c     10 13 02 F6 | 	mov	arg01, local02
28840     13 29 02 F6 | 	mov	local06, local05
28844     09 28 46 F0 | 	shr	local06, #9
28848     24 20 06 F1 | 	add	local02, #36
2884c     10 15 02 FB | 	rdlong	arg02, local02
28850     24 20 86 F1 | 	sub	local02, #36
28854     14 15 02 F1 | 	add	arg02, local06
28858     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2885c     00 FA 0D F2 | 	cmp	result1, #0 wz
28860     04 01 90 5D |  if_ne	jmp	#LR__4087
28864     13 29 02 F6 | 	mov	local06, local05
28868     FF 29 06 F5 | 	and	local06, #511
2886c     34 20 06 F1 | 	add	local02, #52
28870     10 29 02 F1 | 	add	local06, local02
28874     14 2B C2 FA | 	rdbyte	local07, local06
28878     34 20 86 F1 | 	sub	local02, #52
2887c     10 13 02 F6 | 	mov	arg01, local02
28880     01 26 06 F1 | 	add	local05, #1
28884     13 29 02 F6 | 	mov	local06, local05
28888     09 28 46 F0 | 	shr	local06, #9
2888c     24 20 06 F1 | 	add	local02, #36
28890     10 15 02 FB | 	rdlong	arg02, local02
28894     24 20 86 F1 | 	sub	local02, #36
28898     14 15 02 F1 | 	add	arg02, local06
2889c     7C FD BF FD | 	call	#_fatfs_cc_move_window
288a0     00 FA 0D F2 | 	cmp	result1, #0 wz
288a4     C0 00 90 5D |  if_ne	jmp	#LR__4087
288a8     FF 27 06 F5 | 	and	local05, #511
288ac     34 20 06 F1 | 	add	local02, #52
288b0     10 27 02 F1 | 	add	local05, local02
288b4     13 29 C2 FA | 	rdbyte	local06, local05
288b8     08 28 66 F0 | 	shl	local06, #8
288bc     14 2B 42 F5 | 	or	local07, local06
288c0     01 1E CE F7 | 	test	local01, #1 wz
288c4     04 2A 46 50 |  if_ne	shr	local07, #4
288c8     15 23 02 56 |  if_ne	mov	local03, local07
288cc     0B 2A 46 A7 |  if_e	zerox	local07, #11
288d0     15 23 02 A6 |  if_e	mov	local03, local07
288d4     11 25 02 F6 | 	mov	local04, local03
288d8                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
288d8                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
288d8                 | ' 			break;
288d8     8C 00 90 FD | 	jmp	#LR__4087
288dc                 | LR__4084
288dc     10 13 02 F6 | 	mov	arg01, local02
288e0     0F 29 02 F6 | 	mov	local06, local01
288e4     08 28 46 F0 | 	shr	local06, #8
288e8     24 20 06 F1 | 	add	local02, #36
288ec     10 15 02 FB | 	rdlong	arg02, local02
288f0     24 20 86 F1 | 	sub	local02, #36
288f4     14 15 02 F1 | 	add	arg02, local06
288f8     20 FD BF FD | 	call	#_fatfs_cc_move_window
288fc     00 FA 0D F2 | 	cmp	result1, #0 wz
28900     64 00 90 5D |  if_ne	jmp	#LR__4087
28904     34 20 06 F1 | 	add	local02, #52
28908     01 1E 66 F0 | 	shl	local01, #1
2890c     FF 1F 06 F5 | 	and	local01, #511
28910     0F 21 02 F1 | 	add	local02, local01
28914                 | ' {
28914                 | ' 
28914                 | ' 	return *((WORD*)ptr);
28914     10 FB E1 FA | 	rdword	result1, local02
28918     FD 24 32 F9 | 	getword	local04, result1, #0
2891c                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2891c                 | ' 			break;
2891c     48 00 90 FD | 	jmp	#LR__4087
28920                 | LR__4085
28920     10 13 02 F6 | 	mov	arg01, local02
28924     0F 29 02 F6 | 	mov	local06, local01
28928     07 28 46 F0 | 	shr	local06, #7
2892c     24 20 06 F1 | 	add	local02, #36
28930     10 15 02 FB | 	rdlong	arg02, local02
28934     24 20 86 F1 | 	sub	local02, #36
28938     14 15 02 F1 | 	add	arg02, local06
2893c     DC FC BF FD | 	call	#_fatfs_cc_move_window
28940     00 FA 0D F2 | 	cmp	result1, #0 wz
28944     20 00 90 5D |  if_ne	jmp	#LR__4087
28948     34 20 06 F1 | 	add	local02, #52
2894c     02 1E 66 F0 | 	shl	local01, #2
28950     FF 1F 06 F5 | 	and	local01, #511
28954     0F 21 02 F1 | 	add	local02, local01
28958                 | ' {
28958                 | ' 
28958                 | ' 	return *((DWORD*)ptr);
28958     10 25 02 FB | 	rdlong	local04, local02
2895c     7C 24 06 F4 | 	bitl	local04, #124
28960                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
28960                 | ' 			break;
28960     04 00 90 FD | 	jmp	#LR__4087
28964                 | LR__4086
28964     01 24 06 F6 | 	mov	local04, #1
28968                 | LR__4087
28968                 | LR__4088
28968                 | ' 			val = 1;
28968                 | ' 		}
28968                 | ' 	}
28968                 | ' 
28968                 | ' 	return val;
28968     12 FB 01 F6 | 	mov	result1, local04
2896c     A7 F0 03 F6 | 	mov	ptra, fp
28970     B2 00 A0 FD | 	call	#popregs_
28974                 | _fatfs_cc_get_fat_ret
28974     2D 00 64 FD | 	ret
28978                 | 
28978                 | _fatfs_cc_put_fat
28978     08 4A 05 F6 | 	mov	COUNT_, #8
2897c     A8 00 A0 FD | 	call	#pushregs_
28980     09 1F 02 F6 | 	mov	local01, arg01
28984     0A 21 02 F6 | 	mov	local02, arg02
28988     0B 23 02 F6 | 	mov	local03, arg03
2898c     02 24 06 F6 | 	mov	local04, #2
28990     02 20 16 F2 | 	cmp	local02, #2 wc
28994     E0 01 90 CD |  if_b	jmp	#LR__4097
28998     18 1E 06 F1 | 	add	local01, #24
2899c     0F 27 02 FB | 	rdlong	local05, local01
289a0     18 1E 86 F1 | 	sub	local01, #24
289a4     13 21 12 F2 | 	cmp	local02, local05 wc
289a8     CC 01 90 3D |  if_ae	jmp	#LR__4097
289ac                 | ' 		switch (fs->fs_type) {
289ac     0F 29 C2 FA | 	rdbyte	local06, local01
289b0     01 28 86 F1 | 	sub	local06, #1
289b4     03 28 26 F3 | 	fle	local06, #3
289b8     30 28 62 FD | 	jmprel	local06
289bc                 | LR__4090
289bc     0C 00 90 FD | 	jmp	#LR__4091
289c0     F8 00 90 FD | 	jmp	#LR__4094
289c4     40 01 90 FD | 	jmp	#LR__4095
289c8     AC 01 90 FD | 	jmp	#LR__4096
289cc                 | LR__4091
289cc     10 2B 02 F6 | 	mov	local07, local02
289d0     10 27 02 F6 | 	mov	local05, local02
289d4     01 26 46 F0 | 	shr	local05, #1
289d8     13 2B 02 F1 | 	add	local07, local05
289dc     0F 13 02 F6 | 	mov	arg01, local01
289e0     15 29 02 F6 | 	mov	local06, local07
289e4     09 28 46 F0 | 	shr	local06, #9
289e8     24 1E 06 F1 | 	add	local01, #36
289ec     0F 15 02 FB | 	rdlong	arg02, local01
289f0     24 1E 86 F1 | 	sub	local01, #36
289f4     14 15 02 F1 | 	add	arg02, local06
289f8     20 FC BF FD | 	call	#_fatfs_cc_move_window
289fc     FD 24 0A F6 | 	mov	local04, result1 wz
28a00     74 01 90 5D |  if_ne	jmp	#LR__4096
28a04     34 1E 06 F1 | 	add	local01, #52
28a08     0F 2D 02 F6 | 	mov	local08, local01
28a0c     15 27 02 F6 | 	mov	local05, local07
28a10     FF 27 06 F5 | 	and	local05, #511
28a14     13 2D 02 F1 | 	add	local08, local05
28a18     01 20 CE F7 | 	test	local02, #1 wz
28a1c     34 1E 86 F1 | 	sub	local01, #52
28a20     01 2A 06 F1 | 	add	local07, #1
28a24     18 00 90 AD |  if_e	jmp	#LR__4092
28a28     16 27 C2 FA | 	rdbyte	local05, local08
28a2c     13 27 42 F8 | 	getnib	local05, local05, #0
28a30     11 29 E2 F8 | 	getbyte	local06, local03, #0
28a34     04 28 66 F0 | 	shl	local06, #4
28a38     14 27 42 F5 | 	or	local05, local06
28a3c     04 00 90 FD | 	jmp	#LR__4093
28a40                 | LR__4092
28a40     11 27 02 F6 | 	mov	local05, local03
28a44                 | LR__4093
28a44     16 27 42 FC | 	wrbyte	local05, local08
28a48     03 1E 06 F1 | 	add	local01, #3
28a4c     0F 03 48 FC | 	wrbyte	#1, local01
28a50     03 1E 86 F1 | 	sub	local01, #3
28a54     0F 13 02 F6 | 	mov	arg01, local01
28a58     15 2D 02 F6 | 	mov	local08, local07
28a5c     09 2C 46 F0 | 	shr	local08, #9
28a60     24 1E 06 F1 | 	add	local01, #36
28a64     0F 15 02 FB | 	rdlong	arg02, local01
28a68     24 1E 86 F1 | 	sub	local01, #36
28a6c     16 15 02 F1 | 	add	arg02, local08
28a70     A8 FB BF FD | 	call	#_fatfs_cc_move_window
28a74     FD 24 0A F6 | 	mov	local04, result1 wz
28a78     FC 00 90 5D |  if_ne	jmp	#LR__4096
28a7c     34 1E 06 F1 | 	add	local01, #52
28a80     0F 2D 02 F6 | 	mov	local08, local01
28a84     FF 2B 06 F5 | 	and	local07, #511
28a88     15 2D 02 F1 | 	add	local08, local07
28a8c     01 20 CE F7 | 	test	local02, #1 wz
28a90     04 22 46 50 |  if_ne	shr	local03, #4
28a94     11 27 02 56 |  if_ne	mov	local05, local03
28a98     16 27 C2 AA |  if_e	rdbyte	local05, local08
28a9c     F0 26 06 A5 |  if_e	and	local05, #240
28aa0     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
28aa4     11 23 42 A8 |  if_e	getnib	local03, local03, #0
28aa8     11 27 42 A5 |  if_e	or	local05, local03
28aac     16 27 42 FC | 	wrbyte	local05, local08
28ab0     31 1E 86 F1 | 	sub	local01, #49
28ab4     0F 03 48 FC | 	wrbyte	#1, local01
28ab8                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
28ab8                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
28ab8                 | ' 			fs->wflag = 1;
28ab8                 | ' 			break;
28ab8     BC 00 90 FD | 	jmp	#LR__4096
28abc                 | LR__4094
28abc     0F 13 02 F6 | 	mov	arg01, local01
28ac0     10 2D 02 F6 | 	mov	local08, local02
28ac4     08 2C 46 F0 | 	shr	local08, #8
28ac8     24 1E 06 F1 | 	add	local01, #36
28acc     0F 15 02 FB | 	rdlong	arg02, local01
28ad0     24 1E 86 F1 | 	sub	local01, #36
28ad4     16 15 02 F1 | 	add	arg02, local08
28ad8     40 FB BF FD | 	call	#_fatfs_cc_move_window
28adc     FD 24 0A F6 | 	mov	local04, result1 wz
28ae0     94 00 90 5D |  if_ne	jmp	#LR__4096
28ae4     34 1E 06 F1 | 	add	local01, #52
28ae8     0F 13 02 F6 | 	mov	arg01, local01
28aec     01 20 66 F0 | 	shl	local02, #1
28af0     FF 21 06 F5 | 	and	local02, #511
28af4     10 13 02 F1 | 	add	arg01, local02
28af8     09 23 52 FC | 	wrword	local03, arg01
28afc     31 1E 86 F1 | 	sub	local01, #49
28b00     0F 03 48 FC | 	wrbyte	#1, local01
28b04                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
28b04                 | ' 			fs->wflag = 1;
28b04                 | ' 			break;
28b04     70 00 90 FD | 	jmp	#LR__4096
28b08                 | LR__4095
28b08     0F 13 02 F6 | 	mov	arg01, local01
28b0c     10 2D 02 F6 | 	mov	local08, local02
28b10     07 2C 46 F0 | 	shr	local08, #7
28b14     24 1E 06 F1 | 	add	local01, #36
28b18     0F 15 02 FB | 	rdlong	arg02, local01
28b1c     24 1E 86 F1 | 	sub	local01, #36
28b20     16 15 02 F1 | 	add	arg02, local08
28b24     F4 FA BF FD | 	call	#_fatfs_cc_move_window
28b28     FD 24 0A F6 | 	mov	local04, result1 wz
28b2c     48 00 90 5D |  if_ne	jmp	#LR__4096
28b30     7C 22 06 F4 | 	bitl	local03, #124
28b34     34 1E 06 F1 | 	add	local01, #52
28b38     10 2D 02 F6 | 	mov	local08, local02
28b3c     02 2C 66 F0 | 	shl	local08, #2
28b40     FF 2D 06 F5 | 	and	local08, #511
28b44     0F 13 02 F6 | 	mov	arg01, local01
28b48     16 13 02 F1 | 	add	arg01, local08
28b4c                 | ' {
28b4c                 | ' 
28b4c                 | ' 	return *((DWORD*)ptr);
28b4c     09 2D 02 FB | 	rdlong	local08, arg01
28b50     00 00 78 FF 
28b54     00 2C 06 F5 | 	and	local08, ##-268435456
28b58     16 23 42 F5 | 	or	local03, local08
28b5c     0F 13 02 F6 | 	mov	arg01, local01
28b60     02 20 66 F0 | 	shl	local02, #2
28b64     FF 21 06 F5 | 	and	local02, #511
28b68     10 13 02 F1 | 	add	arg01, local02
28b6c     09 23 62 FC | 	wrlong	local03, arg01
28b70     31 1E 86 F1 | 	sub	local01, #49
28b74     0F 03 48 FC | 	wrbyte	#1, local01
28b78                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
28b78                 | ' 			}
28b78                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
28b78                 | ' 			fs->wflag = 1;
28b78                 | ' 			break;
28b78                 | LR__4096
28b78                 | LR__4097
28b78                 | ' 		}
28b78                 | ' 	}
28b78                 | ' 	return res;
28b78     12 FB 01 F6 | 	mov	result1, local04
28b7c     A7 F0 03 F6 | 	mov	ptra, fp
28b80     B2 00 A0 FD | 	call	#popregs_
28b84                 | _fatfs_cc_put_fat_ret
28b84     2D 00 64 FD | 	ret
28b88                 | 
28b88                 | _fatfs_cc_remove_chain
28b88     05 4A 05 F6 | 	mov	COUNT_, #5
28b8c     A8 00 A0 FD | 	call	#pushregs_
28b90     09 1F 02 F6 | 	mov	local01, arg01
28b94     0A 21 02 F6 | 	mov	local02, arg02
28b98     0B 23 02 F6 | 	mov	local03, arg03
28b9c     0F 25 02 FB | 	rdlong	local04, local01
28ba0     02 20 16 F2 | 	cmp	local02, #2 wc
28ba4     14 00 90 CD |  if_b	jmp	#LR__4100
28ba8     18 24 06 F1 | 	add	local04, #24
28bac     12 FB 01 FB | 	rdlong	result1, local04
28bb0     18 24 86 F1 | 	sub	local04, #24
28bb4     FD 20 12 F2 | 	cmp	local02, result1 wc
28bb8     08 00 90 CD |  if_b	jmp	#LR__4101
28bbc                 | LR__4100
28bbc     02 FA 05 F6 | 	mov	result1, #2
28bc0     CC 00 90 FD | 	jmp	#LR__4106
28bc4                 | LR__4101
28bc4     00 22 0E F2 | 	cmp	local03, #0 wz
28bc8     18 00 90 AD |  if_e	jmp	#LR__4102
28bcc     11 15 02 F6 | 	mov	arg02, local03
28bd0     12 13 02 F6 | 	mov	arg01, local04
28bd4     01 16 66 F6 | 	neg	arg03, #1
28bd8     9C FD BF FD | 	call	#_fatfs_cc_put_fat
28bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
28be0     AC 00 90 5D |  if_ne	jmp	#LR__4106
28be4                 | LR__4102
28be4                 | ' 	}
28be4                 | ' 
28be4                 | ' 
28be4                 | ' 	do {
28be4                 | LR__4103
28be4     10 15 02 F6 | 	mov	arg02, local02
28be8     0F 13 02 F6 | 	mov	arg01, local01
28bec     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
28bf0     FD 26 0A F6 | 	mov	local05, result1 wz
28bf4     94 00 90 AD |  if_e	jmp	#LR__4105
28bf8     01 26 0E F2 | 	cmp	local05, #1 wz
28bfc     02 FA 05 A6 |  if_e	mov	result1, #2
28c00     8C 00 90 AD |  if_e	jmp	#LR__4106
28c04     FF FF 7F FF 
28c08     FF 27 0E F2 | 	cmp	local05, ##-1 wz
28c0c     01 FA 05 A6 |  if_e	mov	result1, #1
28c10     7C 00 90 AD |  if_e	jmp	#LR__4106
28c14     10 15 02 F6 | 	mov	arg02, local02
28c18     12 13 02 F6 | 	mov	arg01, local04
28c1c     00 16 06 F6 | 	mov	arg03, #0
28c20     54 FD BF FD | 	call	#_fatfs_cc_put_fat
28c24     FD 22 0A F6 | 	mov	local03, result1 wz
28c28     11 FB 01 56 |  if_ne	mov	result1, local03
28c2c     60 00 90 5D |  if_ne	jmp	#LR__4106
28c30     18 24 06 F1 | 	add	local04, #24
28c34     12 23 02 FB | 	rdlong	local03, local04
28c38     02 22 86 F1 | 	sub	local03, #2
28c3c     04 24 86 F1 | 	sub	local04, #4
28c40     12 21 02 FB | 	rdlong	local02, local04
28c44     14 24 86 F1 | 	sub	local04, #20
28c48     11 21 12 F2 | 	cmp	local02, local03 wc
28c4c     24 00 90 3D |  if_ae	jmp	#LR__4104
28c50     14 24 06 F1 | 	add	local04, #20
28c54     12 23 02 FB | 	rdlong	local03, local04
28c58     01 22 06 F1 | 	add	local03, #1
28c5c     12 23 62 FC | 	wrlong	local03, local04
28c60     10 24 86 F1 | 	sub	local04, #16
28c64     12 23 C2 FA | 	rdbyte	local03, local04
28c68     01 22 46 F5 | 	or	local03, #1
28c6c     12 23 42 FC | 	wrbyte	local03, local04
28c70     04 24 86 F1 | 	sub	local04, #4
28c74                 | LR__4104
28c74     13 21 02 F6 | 	mov	local02, local05
28c78     18 24 06 F1 | 	add	local04, #24
28c7c     12 27 02 FB | 	rdlong	local05, local04
28c80     18 24 86 F1 | 	sub	local04, #24
28c84     13 21 12 F2 | 	cmp	local02, local05 wc
28c88     58 FF 9F CD |  if_b	jmp	#LR__4103
28c8c                 | LR__4105
28c8c                 | ' #line 1500 "ff.c"
28c8c                 | ' 	return FR_OK;
28c8c     00 FA 05 F6 | 	mov	result1, #0
28c90                 | LR__4106
28c90     A7 F0 03 F6 | 	mov	ptra, fp
28c94     B2 00 A0 FD | 	call	#popregs_
28c98                 | _fatfs_cc_remove_chain_ret
28c98     2D 00 64 FD | 	ret
28c9c                 | 
28c9c                 | _fatfs_cc_create_chain
28c9c     09 4A 05 F6 | 	mov	COUNT_, #9
28ca0     A8 00 A0 FD | 	call	#pushregs_
28ca4     09 1F 02 F6 | 	mov	local01, arg01
28ca8     0A 21 0A F6 | 	mov	local02, arg02 wz
28cac     0F 23 02 FB | 	rdlong	local03, local01
28cb0     28 00 90 5D |  if_ne	jmp	#LR__4110
28cb4     10 22 06 F1 | 	add	local03, #16
28cb8     11 25 0A FB | 	rdlong	local04, local03 wz
28cbc     10 22 86 F1 | 	sub	local03, #16
28cc0     18 22 06 51 |  if_ne	add	local03, #24
28cc4     11 27 02 5B |  if_ne	rdlong	local05, local03
28cc8     18 22 86 51 |  if_ne	sub	local03, #24
28ccc     13 25 12 52 |  if_ne	cmp	local04, local05 wc
28cd0     50 00 90 4D |  if_c_and_nz	jmp	#LR__4111
28cd4     01 24 06 F6 | 	mov	local04, #1
28cd8     48 00 90 FD | 	jmp	#LR__4111
28cdc                 | LR__4110
28cdc     10 15 02 F6 | 	mov	arg02, local02
28ce0     0F 13 02 F6 | 	mov	arg01, local01
28ce4     EC FA BF FD | 	call	#_fatfs_cc_get_fat
28ce8     FD 24 02 F6 | 	mov	local04, result1
28cec     02 24 16 F2 | 	cmp	local04, #2 wc
28cf0     01 FA 05 C6 |  if_b	mov	result1, #1
28cf4     BC 01 90 CD |  if_b	jmp	#LR__4121
28cf8     FF FF 7F FF 
28cfc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
28d00     12 FB 01 A6 |  if_e	mov	result1, local04
28d04     AC 01 90 AD |  if_e	jmp	#LR__4121
28d08     18 22 06 F1 | 	add	local03, #24
28d0c     11 27 02 FB | 	rdlong	local05, local03
28d10     18 22 86 F1 | 	sub	local03, #24
28d14     13 25 12 F2 | 	cmp	local04, local05 wc
28d18     12 FB 01 C6 |  if_b	mov	result1, local04
28d1c     94 01 90 CD |  if_b	jmp	#LR__4121
28d20     10 25 02 F6 | 	mov	local04, local02
28d24                 | LR__4111
28d24     14 22 06 F1 | 	add	local03, #20
28d28     11 27 0A FB | 	rdlong	local05, local03 wz
28d2c     14 22 86 F1 | 	sub	local03, #20
28d30     00 FA 05 A6 |  if_e	mov	result1, #0
28d34     7C 01 90 AD |  if_e	jmp	#LR__4121
28d38     00 28 06 F6 | 	mov	local06, #0
28d3c     10 25 0A F2 | 	cmp	local04, local02 wz
28d40     74 00 90 5D |  if_ne	jmp	#LR__4114
28d44     12 29 02 F6 | 	mov	local06, local04
28d48     01 28 06 F1 | 	add	local06, #1
28d4c     18 22 06 F1 | 	add	local03, #24
28d50     11 27 02 FB | 	rdlong	local05, local03
28d54     18 22 86 F1 | 	sub	local03, #24
28d58     13 29 12 F2 | 	cmp	local06, local05 wc
28d5c     02 28 06 36 |  if_ae	mov	local06, #2
28d60     14 15 02 F6 | 	mov	arg02, local06
28d64     0F 13 02 F6 | 	mov	arg01, local01
28d68     68 FA BF FD | 	call	#_fatfs_cc_get_fat
28d6c     FD 26 02 F6 | 	mov	local05, result1
28d70     01 26 0E F2 | 	cmp	local05, #1 wz
28d74     FF FF 7F 5F 
28d78     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
28d7c     13 FB 01 A6 |  if_e	mov	result1, local05
28d80     30 01 90 AD |  if_e	jmp	#LR__4121
28d84     00 26 0E F2 | 	cmp	local05, #0 wz
28d88     2C 00 90 AD |  if_e	jmp	#LR__4113
28d8c     10 22 06 F1 | 	add	local03, #16
28d90     11 2B 02 FB | 	rdlong	local07, local03
28d94     10 22 86 F1 | 	sub	local03, #16
28d98     02 2A 16 F2 | 	cmp	local07, #2 wc
28d9c     14 00 90 CD |  if_b	jmp	#LR__4112
28da0     18 22 06 F1 | 	add	local03, #24
28da4     11 27 02 FB | 	rdlong	local05, local03
28da8     18 22 86 F1 | 	sub	local03, #24
28dac     13 2B 12 F2 | 	cmp	local07, local05 wc
28db0     15 25 02 C6 |  if_b	mov	local04, local07
28db4                 | LR__4112
28db4     00 28 06 F6 | 	mov	local06, #0
28db8                 | LR__4113
28db8                 | LR__4114
28db8     00 28 0E F2 | 	cmp	local06, #0 wz
28dbc     60 00 90 5D |  if_ne	jmp	#LR__4117
28dc0     12 29 02 F6 | 	mov	local06, local04
28dc4                 | ' 			ncl = scl;
28dc4                 | ' 			for (;;) {
28dc4                 | LR__4115
28dc4     01 28 06 F1 | 	add	local06, #1
28dc8     18 22 06 F1 | 	add	local03, #24
28dcc     11 27 02 FB | 	rdlong	local05, local03
28dd0     18 22 86 F1 | 	sub	local03, #24
28dd4     13 29 12 F2 | 	cmp	local06, local05 wc
28dd8     02 28 06 36 |  if_ae	mov	local06, #2
28ddc     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
28de0     00 FA 05 16 |  if_a	mov	result1, #0
28de4     CC 00 90 1D |  if_a	jmp	#LR__4121
28de8     14 15 02 F6 | 	mov	arg02, local06
28dec     0F 13 02 F6 | 	mov	arg01, local01
28df0     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
28df4     FD 2A 0A F6 | 	mov	local07, result1 wz
28df8     24 00 90 AD |  if_e	jmp	#LR__4116
28dfc     01 2A 0E F2 | 	cmp	local07, #1 wz
28e00     FF FF 7F 5F 
28e04     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
28e08     15 FB 01 A6 |  if_e	mov	result1, local07
28e0c     A4 00 90 AD |  if_e	jmp	#LR__4121
28e10     12 29 0A F2 | 	cmp	local06, local04 wz
28e14     00 FA 05 A6 |  if_e	mov	result1, #0
28e18     98 00 90 AD |  if_e	jmp	#LR__4121
28e1c     A4 FF 9F FD | 	jmp	#LR__4115
28e20                 | LR__4116
28e20                 | LR__4117
28e20     11 13 02 F6 | 	mov	arg01, local03
28e24     14 15 02 F6 | 	mov	arg02, local06
28e28     01 16 66 F6 | 	neg	arg03, #1
28e2c     48 FB BF FD | 	call	#_fatfs_cc_put_fat
28e30     FD 2C 0A F6 | 	mov	local08, result1 wz
28e34     1C 00 90 5D |  if_ne	jmp	#LR__4118
28e38     00 20 0E F2 | 	cmp	local02, #0 wz
28e3c     14 00 90 AD |  if_e	jmp	#LR__4118
28e40     11 13 02 F6 | 	mov	arg01, local03
28e44     10 15 02 F6 | 	mov	arg02, local02
28e48     14 17 02 F6 | 	mov	arg03, local06
28e4c     28 FB BF FD | 	call	#_fatfs_cc_put_fat
28e50     FD 2C 02 F6 | 	mov	local08, result1
28e54                 | LR__4118
28e54     00 2C 0E F2 | 	cmp	local08, #0 wz
28e58     4C 00 90 5D |  if_ne	jmp	#LR__4119
28e5c     10 22 06 F1 | 	add	local03, #16
28e60     11 29 62 FC | 	wrlong	local06, local03
28e64     08 22 06 F1 | 	add	local03, #8
28e68     11 27 02 FB | 	rdlong	local05, local03
28e6c     02 26 86 F1 | 	sub	local05, #2
28e70     04 22 86 F1 | 	sub	local03, #4
28e74     11 2F 02 FB | 	rdlong	local09, local03
28e78     14 22 86 F1 | 	sub	local03, #20
28e7c     13 2F 1A F2 | 	cmp	local09, local05 wcz
28e80     14 22 06 E1 |  if_be	add	local03, #20
28e84     11 2F 02 EB |  if_be	rdlong	local09, local03
28e88     01 2E 86 E1 |  if_be	sub	local09, #1
28e8c     11 2F 62 EC |  if_be	wrlong	local09, local03
28e90     14 22 86 E1 |  if_be	sub	local03, #20
28e94     04 22 06 F1 | 	add	local03, #4
28e98     11 27 C2 FA | 	rdbyte	local05, local03
28e9c     01 26 46 F5 | 	or	local05, #1
28ea0     11 27 42 FC | 	wrbyte	local05, local03
28ea4     08 00 90 FD | 	jmp	#LR__4120
28ea8                 | LR__4119
28ea8     01 2C 0E F2 | 	cmp	local08, #1 wz
28eac     01 28 C6 F6 | 	negz	local06, #1
28eb0                 | LR__4120
28eb0                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
28eb0                 | ' 	}
28eb0                 | ' 
28eb0                 | ' 	return ncl;
28eb0     14 FB 01 F6 | 	mov	result1, local06
28eb4                 | LR__4121
28eb4     A7 F0 03 F6 | 	mov	ptra, fp
28eb8     B2 00 A0 FD | 	call	#popregs_
28ebc                 | _fatfs_cc_create_chain_ret
28ebc     2D 00 64 FD | 	ret
28ec0                 | 
28ec0                 | _fatfs_cc_dir_clear
28ec0     06 4A 05 F6 | 	mov	COUNT_, #6
28ec4     A8 00 A0 FD | 	call	#pushregs_
28ec8     09 1F 02 F6 | 	mov	local01, arg01
28ecc     0A 21 02 F6 | 	mov	local02, arg02
28ed0     0F 13 02 F6 | 	mov	arg01, local01
28ed4     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
28ed8     00 FA 0D F2 | 	cmp	result1, #0 wz
28edc     01 FA 05 56 |  if_ne	mov	result1, #1
28ee0     90 00 90 5D |  if_ne	jmp	#LR__4132
28ee4     0F 13 02 F6 | 	mov	arg01, local01
28ee8     10 15 02 F6 | 	mov	arg02, local02
28eec     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
28ef0     FD 22 02 F6 | 	mov	local03, result1
28ef4     30 1E 06 F1 | 	add	local01, #48
28ef8     0F 23 62 FC | 	wrlong	local03, local01
28efc     04 1E 06 F1 | 	add	local01, #4
28f00     0F 13 02 F6 | 	mov	arg01, local01
28f04     00 14 06 F6 | 	mov	arg02, #0
28f08     09 16 C6 F9 | 	decod	arg03, #9
28f0c     98 00 A0 FD | 	call	#\builtin_bytefill_
28f10     0F 25 02 F6 | 	mov	local04, local01
28f14                 | ' #line 1667 "ff.c"
28f14                 | ' 	{
28f14                 | ' 		ibuf = fs->win; szb = 1;
28f14                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
28f14     00 26 06 F6 | 	mov	local05, #0
28f18     34 1E 86 F1 | 	sub	local01, #52
28f1c                 | LR__4130
28f1c     0A 1E 06 F1 | 	add	local01, #10
28f20     0F 29 E2 FA | 	rdword	local06, local01
28f24     0A 1E 86 F1 | 	sub	local01, #10
28f28     14 27 12 F2 | 	cmp	local05, local06 wc
28f2c     2C 00 90 3D |  if_ae	jmp	#LR__4131
28f30     01 1E 06 F1 | 	add	local01, #1
28f34     0F 13 C2 FA | 	rdbyte	arg01, local01
28f38     01 1E 86 F1 | 	sub	local01, #1
28f3c     12 15 02 F6 | 	mov	arg02, local04
28f40     11 17 02 F6 | 	mov	arg03, local03
28f44     13 17 02 F1 | 	add	arg03, local05
28f48     01 18 06 F6 | 	mov	arg04, #1
28f4c     9C EF BF FD | 	call	#_fatfs_cc_disk_write
28f50     00 FA 0D F2 | 	cmp	result1, #0 wz
28f54     01 26 06 A1 |  if_e	add	local05, #1
28f58     C0 FF 9F AD |  if_e	jmp	#LR__4130
28f5c                 | LR__4131
28f5c                 | ' 	}
28f5c                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
28f5c     0A 1E 06 F1 | 	add	local01, #10
28f60     0F 25 E2 FA | 	rdword	local04, local01
28f64     12 27 0A F2 | 	cmp	local05, local04 wz
28f68     00 28 06 A6 |  if_e	mov	local06, #0
28f6c     01 28 06 56 |  if_ne	mov	local06, #1
28f70     14 FB 01 F6 | 	mov	result1, local06
28f74                 | LR__4132
28f74     A7 F0 03 F6 | 	mov	ptra, fp
28f78     B2 00 A0 FD | 	call	#popregs_
28f7c                 | _fatfs_cc_dir_clear_ret
28f7c     2D 00 64 FD | 	ret
28f80                 | 
28f80                 | _fatfs_cc_dir_sdi
28f80     06 4A 05 F6 | 	mov	COUNT_, #6
28f84     A8 00 A0 FD | 	call	#pushregs_
28f88     09 1F 02 F6 | 	mov	local01, arg01
28f8c     0A 21 02 F6 | 	mov	local02, arg02
28f90     0F 23 02 FB | 	rdlong	local03, local01
28f94     00 10 00 FF 
28f98     00 20 16 F2 | 	cmp	local02, ##2097152 wc
28f9c     1F 20 CE C7 |  if_b	test	local02, #31 wz
28fa0                 | ' 		return FR_INT_ERR;
28fa0     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
28fa4     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4146
28fa8     10 1E 06 F1 | 	add	local01, #16
28fac     0F 21 62 FC | 	wrlong	local02, local01
28fb0     08 1E 86 F1 | 	sub	local01, #8
28fb4     0F 25 0A FB | 	rdlong	local04, local01 wz
28fb8     08 1E 86 F1 | 	sub	local01, #8
28fbc     11 27 C2 AA |  if_e	rdbyte	local05, local03
28fc0     03 26 16 A2 |  if_e	cmp	local05, #3 wc
28fc4     28 22 06 21 |  if_nc_and_z	add	local03, #40
28fc8     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
28fcc     28 22 86 21 |  if_nc_and_z	sub	local03, #40
28fd0     00 24 0E F2 | 	cmp	local04, #0 wz
28fd4     3C 00 90 5D |  if_ne	jmp	#LR__4140
28fd8     10 27 02 F6 | 	mov	local05, local02
28fdc     05 26 46 F0 | 	shr	local05, #5
28fe0     08 22 06 F1 | 	add	local03, #8
28fe4     11 15 E2 FA | 	rdword	arg02, local03
28fe8     08 22 86 F1 | 	sub	local03, #8
28fec     0A 27 12 F2 | 	cmp	local05, arg02 wc
28ff0     02 FA 05 36 |  if_ae	mov	result1, #2
28ff4     E4 00 90 3D |  if_ae	jmp	#LR__4146
28ff8     28 22 06 F1 | 	add	local03, #40
28ffc     11 27 02 FB | 	rdlong	local05, local03
29000     28 22 86 F1 | 	sub	local03, #40
29004     18 1E 06 F1 | 	add	local01, #24
29008     0F 27 62 FC | 	wrlong	local05, local01
2900c     18 1E 86 F1 | 	sub	local01, #24
29010     7C 00 90 FD | 	jmp	#LR__4145
29014                 | LR__4140
29014     0A 22 06 F1 | 	add	local03, #10
29018     11 29 E2 FA | 	rdword	local06, local03
2901c     0A 22 86 F1 | 	sub	local03, #10
29020     09 28 66 F0 | 	shl	local06, #9
29024                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
29024                 | ' 		while (ofs >= csz) {
29024                 | LR__4141
29024     14 21 12 F2 | 	cmp	local02, local06 wc
29028     4C 00 90 CD |  if_b	jmp	#LR__4144
2902c     0F 13 02 F6 | 	mov	arg01, local01
29030     12 15 02 F6 | 	mov	arg02, local04
29034     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
29038     FD 24 02 F6 | 	mov	local04, result1
2903c     FF FF 7F FF 
29040     FF 25 0E F2 | 	cmp	local04, ##-1 wz
29044     01 FA 05 A6 |  if_e	mov	result1, #1
29048     90 00 90 AD |  if_e	jmp	#LR__4146
2904c     02 24 16 F2 | 	cmp	local04, #2 wc
29050     14 00 90 CD |  if_b	jmp	#LR__4142
29054     18 22 06 F1 | 	add	local03, #24
29058     11 27 02 FB | 	rdlong	local05, local03
2905c     18 22 86 F1 | 	sub	local03, #24
29060     13 25 12 F2 | 	cmp	local04, local05 wc
29064     08 00 90 CD |  if_b	jmp	#LR__4143
29068                 | LR__4142
29068     02 FA 05 F6 | 	mov	result1, #2
2906c     6C 00 90 FD | 	jmp	#LR__4146
29070                 | LR__4143
29070     14 21 82 F1 | 	sub	local02, local06
29074     AC FF 9F FD | 	jmp	#LR__4141
29078                 | LR__4144
29078     11 13 02 F6 | 	mov	arg01, local03
2907c     12 15 02 F6 | 	mov	arg02, local04
29080     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
29084     18 1E 06 F1 | 	add	local01, #24
29088     0F FB 61 FC | 	wrlong	result1, local01
2908c     18 1E 86 F1 | 	sub	local01, #24
29090                 | LR__4145
29090     14 1E 06 F1 | 	add	local01, #20
29094     0F 25 62 FC | 	wrlong	local04, local01
29098     04 1E 06 F1 | 	add	local01, #4
2909c     0F 27 0A FB | 	rdlong	local05, local01 wz
290a0     18 1E 86 F1 | 	sub	local01, #24
290a4     02 FA 05 A6 |  if_e	mov	result1, #2
290a8     30 00 90 AD |  if_e	jmp	#LR__4146
290ac     10 29 02 F6 | 	mov	local06, local02
290b0     09 28 46 F0 | 	shr	local06, #9
290b4     18 1E 06 F1 | 	add	local01, #24
290b8     0F 27 02 FB | 	rdlong	local05, local01
290bc     14 27 02 F1 | 	add	local05, local06
290c0     0F 27 62 FC | 	wrlong	local05, local01
290c4     34 22 06 F1 | 	add	local03, #52
290c8     FF 21 06 F5 | 	and	local02, #511
290cc     10 23 02 F1 | 	add	local03, local02
290d0     04 1E 06 F1 | 	add	local01, #4
290d4     0F 23 62 FC | 	wrlong	local03, local01
290d8                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
290d8                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
290d8                 | ' 
290d8                 | ' 	return FR_OK;
290d8     00 FA 05 F6 | 	mov	result1, #0
290dc                 | LR__4146
290dc     A7 F0 03 F6 | 	mov	ptra, fp
290e0     B2 00 A0 FD | 	call	#popregs_
290e4                 | _fatfs_cc_dir_sdi_ret
290e4     2D 00 64 FD | 	ret
290e8                 | 
290e8                 | _fatfs_cc_dir_next
290e8     05 4A 05 F6 | 	mov	COUNT_, #5
290ec     A8 00 A0 FD | 	call	#pushregs_
290f0     09 1F 02 F6 | 	mov	local01, arg01
290f4     0A 21 02 F6 | 	mov	local02, arg02
290f8     0F 23 02 FB | 	rdlong	local03, local01
290fc     10 1E 06 F1 | 	add	local01, #16
29100     0F 25 02 FB | 	rdlong	local04, local01
29104     10 1E 86 F1 | 	sub	local01, #16
29108     20 24 06 F1 | 	add	local04, #32
2910c     00 10 00 FF 
29110     00 24 16 F2 | 	cmp	local04, ##2097152 wc
29114     18 1E 06 31 |  if_ae	add	local01, #24
29118     0F 01 68 3C |  if_ae	wrlong	#0, local01
2911c     18 1E 86 31 |  if_ae	sub	local01, #24
29120     18 1E 06 F1 | 	add	local01, #24
29124     0F 15 0A FB | 	rdlong	arg02, local01 wz
29128     18 1E 86 F1 | 	sub	local01, #24
2912c     04 FA 05 A6 |  if_e	mov	result1, #4
29130     64 01 90 AD |  if_e	jmp	#LR__4155
29134     FF 25 CE F7 | 	test	local04, #511 wz
29138     3C 01 90 5D |  if_ne	jmp	#LR__4154
2913c     18 1E 06 F1 | 	add	local01, #24
29140     0F 15 02 FB | 	rdlong	arg02, local01
29144     01 14 06 F1 | 	add	arg02, #1
29148     0F 15 62 FC | 	wrlong	arg02, local01
2914c     04 1E 86 F1 | 	sub	local01, #4
29150     0F 15 0A FB | 	rdlong	arg02, local01 wz
29154     14 1E 86 F1 | 	sub	local01, #20
29158     2C 00 90 5D |  if_ne	jmp	#LR__4150
2915c     12 15 02 F6 | 	mov	arg02, local04
29160     05 14 46 F0 | 	shr	arg02, #5
29164     08 22 06 F1 | 	add	local03, #8
29168     11 21 E2 FA | 	rdword	local02, local03
2916c     08 22 86 F1 | 	sub	local03, #8
29170     10 15 12 F2 | 	cmp	arg02, local02 wc
29174     18 1E 06 31 |  if_ae	add	local01, #24
29178     0F 01 68 3C |  if_ae	wrlong	#0, local01
2917c                 | ' 				dp->sect = 0; return FR_NO_FILE;
2917c     04 FA 05 36 |  if_ae	mov	result1, #4
29180     14 01 90 3D |  if_ae	jmp	#LR__4155
29184     F0 00 90 FD | 	jmp	#LR__4153
29188                 | LR__4150
29188     12 13 02 F6 | 	mov	arg01, local04
2918c     09 12 46 F0 | 	shr	arg01, #9
29190     0A 22 06 F1 | 	add	local03, #10
29194     11 15 E2 FA | 	rdword	arg02, local03
29198     0A 22 86 F1 | 	sub	local03, #10
2919c     01 14 86 F1 | 	sub	arg02, #1
291a0     0A 13 CA F7 | 	test	arg01, arg02 wz
291a4     D0 00 90 5D |  if_ne	jmp	#LR__4152
291a8     0F 13 02 F6 | 	mov	arg01, local01
291ac     14 1E 06 F1 | 	add	local01, #20
291b0     0F 15 02 FB | 	rdlong	arg02, local01
291b4     14 1E 86 F1 | 	sub	local01, #20
291b8     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
291bc     FD 26 02 F6 | 	mov	local05, result1
291c0     02 26 16 F2 | 	cmp	local05, #2 wc
291c4     02 FA 05 C6 |  if_b	mov	result1, #2
291c8     CC 00 90 CD |  if_b	jmp	#LR__4155
291cc     FF FF 7F FF 
291d0     FF 27 0E F2 | 	cmp	local05, ##-1 wz
291d4     01 FA 05 A6 |  if_e	mov	result1, #1
291d8     BC 00 90 AD |  if_e	jmp	#LR__4155
291dc     18 22 06 F1 | 	add	local03, #24
291e0     11 15 02 FB | 	rdlong	arg02, local03
291e4     18 22 86 F1 | 	sub	local03, #24
291e8     0A 27 12 F2 | 	cmp	local05, arg02 wc
291ec     68 00 90 CD |  if_b	jmp	#LR__4151
291f0     00 20 0E F2 | 	cmp	local02, #0 wz
291f4     18 1E 06 A1 |  if_e	add	local01, #24
291f8     0F 01 68 AC |  if_e	wrlong	#0, local01
291fc                 | ' 						dp->sect = 0; return FR_NO_FILE;
291fc     04 FA 05 A6 |  if_e	mov	result1, #4
29200     94 00 90 AD |  if_e	jmp	#LR__4155
29204     0F 13 02 F6 | 	mov	arg01, local01
29208     14 1E 06 F1 | 	add	local01, #20
2920c     0F 15 02 FB | 	rdlong	arg02, local01
29210     14 1E 86 F1 | 	sub	local01, #20
29214     84 FA BF FD | 	call	#_fatfs_cc_create_chain
29218     FD 26 0A F6 | 	mov	local05, result1 wz
2921c     07 FA 05 A6 |  if_e	mov	result1, #7
29220     74 00 90 AD |  if_e	jmp	#LR__4155
29224     01 26 0E F2 | 	cmp	local05, #1 wz
29228     02 FA 05 A6 |  if_e	mov	result1, #2
2922c     68 00 90 AD |  if_e	jmp	#LR__4155
29230     FF FF 7F FF 
29234     FF 27 0E F2 | 	cmp	local05, ##-1 wz
29238     01 FA 05 A6 |  if_e	mov	result1, #1
2923c     58 00 90 AD |  if_e	jmp	#LR__4155
29240     13 15 02 F6 | 	mov	arg02, local05
29244     11 13 02 F6 | 	mov	arg01, local03
29248     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2924c     00 FA 0D F2 | 	cmp	result1, #0 wz
29250     01 FA 05 56 |  if_ne	mov	result1, #1
29254     40 00 90 5D |  if_ne	jmp	#LR__4155
29258                 | LR__4151
29258     14 1E 06 F1 | 	add	local01, #20
2925c     0F 27 62 FC | 	wrlong	local05, local01
29260     11 13 02 F6 | 	mov	arg01, local03
29264     13 15 02 F6 | 	mov	arg02, local05
29268     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2926c     04 1E 06 F1 | 	add	local01, #4
29270     0F FB 61 FC | 	wrlong	result1, local01
29274     18 1E 86 F1 | 	sub	local01, #24
29278                 | LR__4152
29278                 | LR__4153
29278                 | LR__4154
29278     10 1E 06 F1 | 	add	local01, #16
2927c     0F 25 62 FC | 	wrlong	local04, local01
29280     34 22 06 F1 | 	add	local03, #52
29284     FF 25 06 F5 | 	and	local04, #511
29288     12 23 02 F1 | 	add	local03, local04
2928c     0C 1E 06 F1 | 	add	local01, #12
29290     0F 23 62 FC | 	wrlong	local03, local01
29294                 | ' #line 1771 "ff.c"
29294                 | ' 				}
29294                 | ' 				dp->clust = clst;
29294                 | ' 				dp->sect = clst2sect(fs, clst);
29294                 | ' 			}
29294                 | ' 		}
29294                 | ' 	}
29294                 | ' 	dp->dptr = ofs;
29294                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
29294                 | ' 
29294                 | ' 	return FR_OK;
29294     00 FA 05 F6 | 	mov	result1, #0
29298                 | LR__4155
29298     A7 F0 03 F6 | 	mov	ptra, fp
2929c     B2 00 A0 FD | 	call	#popregs_
292a0                 | _fatfs_cc_dir_next_ret
292a0     2D 00 64 FD | 	ret
292a4                 | 
292a4                 | _fatfs_cc_dir_alloc
292a4     08 4A 05 F6 | 	mov	COUNT_, #8
292a8     A8 00 A0 FD | 	call	#pushregs_
292ac     09 1F 02 F6 | 	mov	local01, arg01
292b0     0A 21 02 F6 | 	mov	local02, arg02
292b4     0F 23 02 FB | 	rdlong	local03, local01
292b8     0F 13 02 F6 | 	mov	arg01, local01
292bc     00 14 06 F6 | 	mov	arg02, #0
292c0     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
292c4     FD 24 0A F6 | 	mov	local04, result1 wz
292c8     70 00 90 5D |  if_ne	jmp	#LR__4164
292cc     00 26 06 F6 | 	mov	local05, #0
292d0                 | ' 		n = 0;
292d0                 | ' 		do {
292d0                 | LR__4160
292d0     18 1E 06 F1 | 	add	local01, #24
292d4     0F 15 02 FB | 	rdlong	arg02, local01
292d8     18 1E 86 F1 | 	sub	local01, #24
292dc     11 13 02 F6 | 	mov	arg01, local03
292e0     38 F3 BF FD | 	call	#_fatfs_cc_move_window
292e4     FD 24 0A F6 | 	mov	local04, result1 wz
292e8     50 00 90 5D |  if_ne	jmp	#LR__4163
292ec     1C 1E 06 F1 | 	add	local01, #28
292f0     0F 29 02 FB | 	rdlong	local06, local01
292f4     1C 1E 86 F1 | 	sub	local01, #28
292f8     14 29 C2 FA | 	rdbyte	local06, local06
292fc     E5 28 0E F2 | 	cmp	local06, #229 wz
29300     1C 1E 06 51 |  if_ne	add	local01, #28
29304     0F 2B 02 5B |  if_ne	rdlong	local07, local01
29308     1C 1E 86 51 |  if_ne	sub	local01, #28
2930c     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
29310     10 00 90 5D |  if_ne	jmp	#LR__4161
29314     01 26 06 F1 | 	add	local05, #1
29318     10 27 0A F2 | 	cmp	local05, local02 wz
2931c     1C 00 90 AD |  if_e	jmp	#LR__4163
29320     04 00 90 FD | 	jmp	#LR__4162
29324                 | LR__4161
29324     00 26 06 F6 | 	mov	local05, #0
29328                 | LR__4162
29328     0F 13 02 F6 | 	mov	arg01, local01
2932c     01 14 06 F6 | 	mov	arg02, #1
29330     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
29334     FD 24 0A F6 | 	mov	local04, result1 wz
29338     94 FF 9F AD |  if_e	jmp	#LR__4160
2933c                 | LR__4163
2933c                 | LR__4164
2933c     04 24 0E F2 | 	cmp	local04, #4 wz
29340     07 24 06 A6 |  if_e	mov	local04, #7
29344                 | ' 	return res;
29344     12 FB 01 F6 | 	mov	result1, local04
29348     A7 F0 03 F6 | 	mov	ptra, fp
2934c     B2 00 A0 FD | 	call	#popregs_
29350                 | _fatfs_cc_dir_alloc_ret
29350     2D 00 64 FD | 	ret
29354                 | 
29354                 | _fatfs_cc_ld_clust
29354     09 01 02 F6 | 	mov	_var01, arg01
29358     0A 13 02 F6 | 	mov	arg01, arg02
2935c     1A 12 06 F1 | 	add	arg01, #26
29360                 | ' {
29360                 | ' 
29360                 | ' 	return *((WORD*)ptr);
29360     09 FB E1 FA | 	rdword	result1, arg01
29364     FD 12 32 F9 | 	getword	arg01, result1, #0
29368     00 01 C2 FA | 	rdbyte	_var01, _var01
2936c     03 00 0E F2 | 	cmp	_var01, #3 wz
29370     14 14 06 A1 |  if_e	add	arg02, #20
29374                 | ' {
29374                 | ' 
29374                 | ' 	return *((WORD*)ptr);
29374     0A FB E1 AA |  if_e	rdword	result1, arg02
29378     10 FA 65 A0 |  if_e	shl	result1, #16
2937c     FD 12 42 A5 |  if_e	or	arg01, result1
29380                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
29380                 | ' 	}
29380                 | ' 
29380                 | ' 	return cl;
29380     09 FB 01 F6 | 	mov	result1, arg01
29384                 | _fatfs_cc_ld_clust_ret
29384     2D 00 64 FD | 	ret
29388                 | 
29388                 | _fatfs_cc_st_clust
29388     09 01 02 F6 | 	mov	_var01, arg01
2938c     0A 13 02 F6 | 	mov	arg01, arg02
29390     1A 12 06 F1 | 	add	arg01, #26
29394     09 17 52 FC | 	wrword	arg03, arg01
29398     00 01 C2 FA | 	rdbyte	_var01, _var01
2939c     03 00 0E F2 | 	cmp	_var01, #3 wz
293a0     14 14 06 A1 |  if_e	add	arg02, #20
293a4     10 16 46 A0 |  if_e	shr	arg03, #16
293a8     0A 17 52 AC |  if_e	wrword	arg03, arg02
293ac                 | _fatfs_cc_st_clust_ret
293ac     2D 00 64 FD | 	ret
293b0                 | 
293b0                 | _fatfs_cc_cmp_lfn
293b0     07 4A 05 F6 | 	mov	COUNT_, #7
293b4     A8 00 A0 FD | 	call	#pushregs_
293b8     09 1F 02 F6 | 	mov	local01, arg01
293bc     0A 13 02 F6 | 	mov	arg01, arg02
293c0     1A 12 06 F1 | 	add	arg01, #26
293c4                 | ' {
293c4                 | ' 
293c4                 | ' 	return *((WORD*)ptr);
293c4     09 FB E9 FA | 	rdword	result1, arg01 wz
293c8     00 FA 05 56 |  if_ne	mov	result1, #0
293cc     E0 00 90 5D |  if_ne	jmp	#LR__4176
293d0     0A 21 C2 FA | 	rdbyte	local02, arg02
293d4     3F 20 06 F5 | 	and	local02, #63
293d8     01 20 86 F1 | 	sub	local02, #1
293dc     0D 20 06 FD | 	qmul	local02, #13
293e0                 | ' 
293e0                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
293e0                 | ' 
293e0                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
293e0     01 22 06 F6 | 	mov	local03, #1
293e4     00 24 06 F6 | 	mov	local04, #0
293e8     18 26 62 FD | 	getqx	local05
293ec                 | LR__4170
293ec     0D 24 16 F2 | 	cmp	local04, #13 wc
293f0     9C 00 90 3D |  if_ae	jmp	#LR__4175
293f4     0A 13 02 F6 | 	mov	arg01, arg02
293f8     12 21 02 F6 | 	mov	local02, local04
293fc     01 00 00 FF 
29400     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
29404     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
29408     10 21 C2 FA | 	rdbyte	local02, local02
2940c     01 20 06 FA | 	mul	local02, #1
29410     10 13 02 F1 | 	add	arg01, local02
29414     01 00 00 FF 
29418     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2941c                 | ' {
2941c                 | ' 
2941c                 | ' 	return *((WORD*)ptr);
2941c     09 FB E1 FA | 	rdword	result1, arg01
29420     FD 28 02 F6 | 	mov	local06, result1
29424     11 21 02 F6 | 	mov	local02, local03
29428     0F 20 4E F7 | 	zerox	local02, #15 wz
2942c     44 00 90 AD |  if_e	jmp	#LR__4173
29430     00 27 16 F2 | 	cmp	local05, #256 wc
29434     2C 00 90 3D |  if_ae	jmp	#LR__4171
29438     14 13 32 F9 | 	getword	arg01, local06, #0
2943c     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
29440     FD 20 02 F6 | 	mov	local02, result1
29444     13 23 02 F6 | 	mov	local03, local05
29448     01 22 66 F0 | 	shl	local03, #1
2944c     0F 23 02 F1 | 	add	local03, local01
29450     11 13 E2 FA | 	rdword	arg01, local03
29454     01 26 06 F1 | 	add	local05, #1
29458     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2945c     FD 20 0A F2 | 	cmp	local02, result1 wz
29460     08 00 90 AD |  if_e	jmp	#LR__4172
29464                 | LR__4171
29464                 | ' 				return 0;
29464     00 FA 05 F6 | 	mov	result1, #0
29468     44 00 90 FD | 	jmp	#LR__4176
2946c                 | LR__4172
2946c     14 23 02 F6 | 	mov	local03, local06
29470     14 00 90 FD | 	jmp	#LR__4174
29474                 | LR__4173
29474     14 29 32 F9 | 	getword	local06, local06, #0
29478     7F 00 00 FF 
2947c     FF 29 0E F2 | 	cmp	local06, ##65535 wz
29480     00 FA 05 56 |  if_ne	mov	result1, #0
29484     28 00 90 5D |  if_ne	jmp	#LR__4176
29488                 | LR__4174
29488     01 24 06 F1 | 	add	local04, #1
2948c     5C FF 9F FD | 	jmp	#LR__4170
29490                 | LR__4175
29490     0A 21 C2 FA | 	rdbyte	local02, arg02
29494     40 20 CE F7 | 	test	local02, #64 wz
29498     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
2949c     01 26 66 50 |  if_ne	shl	local05, #1
294a0     0F 27 02 51 |  if_ne	add	local05, local01
294a4     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
294a8     00 FA 05 56 |  if_ne	mov	result1, #0
294ac                 | ' 
294ac                 | ' 	return 1;
294ac     01 FA 05 A6 |  if_e	mov	result1, #1
294b0                 | LR__4176
294b0     A7 F0 03 F6 | 	mov	ptra, fp
294b4     B2 00 A0 FD | 	call	#popregs_
294b8                 | _fatfs_cc_cmp_lfn_ret
294b8     2D 00 64 FD | 	ret
294bc                 | 
294bc                 | _fatfs_cc_pick_lfn
294bc     09 01 02 F6 | 	mov	_var01, arg01
294c0     0A 13 02 F6 | 	mov	arg01, arg02
294c4     1A 12 06 F1 | 	add	arg01, #26
294c8                 | ' {
294c8                 | ' 
294c8                 | ' 	return *((WORD*)ptr);
294c8     09 FB E9 FA | 	rdword	result1, arg01 wz
294cc     00 FA 05 56 |  if_ne	mov	result1, #0
294d0     D4 00 90 5D |  if_ne	jmp	#LR__4185
294d4     0A 03 C2 FA | 	rdbyte	_var02, arg02
294d8     40 02 26 F5 | 	andn	_var02, #64
294dc     01 02 86 F1 | 	sub	_var02, #1
294e0     0D 02 06 FD | 	qmul	_var02, #13
294e4                 | ' 
294e4                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
294e4                 | ' 
294e4                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
294e4     01 04 06 F6 | 	mov	_var03, #1
294e8     00 06 06 F6 | 	mov	_var04, #0
294ec     18 08 62 FD | 	getqx	_var05
294f0                 | LR__4180
294f0     0D 06 16 F2 | 	cmp	_var04, #13 wc
294f4     80 00 90 3D |  if_ae	jmp	#LR__4183
294f8     0A 13 02 F6 | 	mov	arg01, arg02
294fc     03 03 02 F6 | 	mov	_var02, _var04
29500     01 00 00 FF 
29504     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
29508     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
2950c     01 03 C2 FA | 	rdbyte	_var02, _var02
29510     01 02 06 FA | 	mul	_var02, #1
29514     01 13 02 F1 | 	add	arg01, _var02
29518     01 00 00 FF 
2951c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
29520                 | ' {
29520                 | ' 
29520                 | ' 	return *((WORD*)ptr);
29520     09 FB E1 FA | 	rdword	result1, arg01
29524     FD 0A 02 F6 | 	mov	_var06, result1
29528     02 03 02 F6 | 	mov	_var02, _var03
2952c     0F 02 4E F7 | 	zerox	_var02, #15 wz
29530     28 00 90 AD |  if_e	jmp	#LR__4181
29534     00 09 16 F2 | 	cmp	_var05, #256 wc
29538     00 FA 05 36 |  if_ae	mov	result1, #0
2953c     68 00 90 3D |  if_ae	jmp	#LR__4185
29540     04 03 02 F6 | 	mov	_var02, _var05
29544     01 02 66 F0 | 	shl	_var02, #1
29548     00 03 02 F1 | 	add	_var02, _var01
2954c     05 05 02 F6 | 	mov	_var03, _var06
29550     01 05 52 FC | 	wrword	_var03, _var02
29554     01 08 06 F1 | 	add	_var05, #1
29558     14 00 90 FD | 	jmp	#LR__4182
2955c                 | LR__4181
2955c     05 0B 32 F9 | 	getword	_var06, _var06, #0
29560     7F 00 00 FF 
29564     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
29568     00 FA 05 56 |  if_ne	mov	result1, #0
2956c     38 00 90 5D |  if_ne	jmp	#LR__4185
29570                 | LR__4182
29570     01 06 06 F1 | 	add	_var04, #1
29574     78 FF 9F FD | 	jmp	#LR__4180
29578                 | LR__4183
29578     0A 03 C2 FA | 	rdbyte	_var02, arg02
2957c     40 02 CE F7 | 	test	_var02, #64 wz
29580     02 0D 02 56 |  if_ne	mov	_var07, _var03
29584     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
29588     18 00 90 AD |  if_e	jmp	#LR__4184
2958c     00 09 16 F2 | 	cmp	_var05, #256 wc
29590     00 FA 05 36 |  if_ae	mov	result1, #0
29594     10 00 90 3D |  if_ae	jmp	#LR__4185
29598     01 08 66 F0 | 	shl	_var05, #1
2959c     00 09 02 F1 | 	add	_var05, _var01
295a0     04 01 58 FC | 	wrword	#0, _var05
295a4                 | LR__4184
295a4                 | ' 		lfnbuf[i] = 0;
295a4                 | ' 	}
295a4                 | ' 
295a4                 | ' 	return 1;
295a4     01 FA 05 F6 | 	mov	result1, #1
295a8                 | LR__4185
295a8                 | _fatfs_cc_pick_lfn_ret
295a8     2D 00 64 FD | 	ret
295ac                 | 
295ac                 | _fatfs_cc_put_lfn
295ac     0D 14 06 F1 | 	add	arg02, #13
295b0     0A 19 42 FC | 	wrbyte	arg04, arg02
295b4     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
295b8     01 18 86 F1 | 	sub	arg04, #1
295bc     0D 18 06 FD | 	qmul	arg04, #13
295c0     09 01 02 F6 | 	mov	_var01, arg01
295c4     02 14 86 F1 | 	sub	arg02, #2
295c8     0A 1F 48 FC | 	wrbyte	#15, arg02
295cc     01 14 06 F1 | 	add	arg02, #1
295d0     0A 01 48 FC | 	wrbyte	#0, arg02
295d4     0C 14 86 F1 | 	sub	arg02, #12
295d8     0A 13 02 F6 | 	mov	arg01, arg02
295dc     1A 12 06 F1 | 	add	arg01, #26
295e0     09 01 58 FC | 	wrword	#0, arg01
295e4     00 02 06 F6 | 	mov	_var02, #0
295e8     00 04 06 F6 | 	mov	_var03, #0
295ec                 | ' 	BYTE* dir,
295ec                 | ' 	BYTE ord,
295ec                 | ' 	BYTE sum
295ec                 | ' )
295ec                 | ' {
295ec                 | ' 	UINT i, s;
295ec                 | ' 	WCHAR wc;
295ec                 | ' 
295ec                 | ' 
295ec                 | ' 	dir[ 13 ] = sum;
295ec                 | ' 	dir[ 11 ] =  0x0F ;
295ec                 | ' 	dir[ 12 ] = 0;
295ec                 | ' 	st_word(dir +  26 , 0);
295ec                 | ' 
295ec                 | ' 	i = (ord - 1) * 13;
295ec                 | ' 	s = wc = 0;
295ec                 | ' 	do {
295ec     01 00 00 FF 
295f0     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
295f4     18 06 62 FD | 	getqx	_var04
295f8     97 2A 48 FB | 	callpa	#(@LR__4191-@LR__4190)>>2,fcache_load_ptr_
295fc                 | LR__4190
295fc     01 19 32 F9 | 	getword	arg04, _var02, #0
29600     7F 00 00 FF 
29604     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
29608     03 13 02 56 |  if_ne	mov	arg01, _var04
2960c     01 06 06 51 |  if_ne	add	_var04, #1
29610     01 12 66 50 |  if_ne	shl	arg01, #1
29614     00 13 02 51 |  if_ne	add	arg01, _var01
29618     09 03 E2 5A |  if_ne	rdword	_var02, arg01
2961c     0A 13 02 F6 | 	mov	arg01, arg02
29620     02 19 02 F6 | 	mov	arg04, _var03
29624     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
29628     0C 19 C2 FA | 	rdbyte	arg04, arg04
2962c     01 18 06 FA | 	mul	arg04, #1
29630     0C 13 02 F1 | 	add	arg01, arg04
29634     09 03 52 FC | 	wrword	_var02, arg01
29638     01 19 02 F6 | 	mov	arg04, _var02
2963c     0F 18 4E F7 | 	zerox	arg04, #15 wz
29640     0F 02 CE A9 |  if_e	bmask	_var02, #15
29644     01 04 06 F1 | 	add	_var03, #1
29648     0D 04 16 F2 | 	cmp	_var03, #13 wc
2964c     AC FF 9F CD |  if_b	jmp	#LR__4190
29650                 | LR__4191
29650     01 00 00 FF 
29654     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
29658     01 03 32 F9 | 	getword	_var02, _var02, #0
2965c     7F 00 00 FF 
29660     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
29664     01 06 66 50 |  if_ne	shl	_var04, #1
29668     00 07 02 51 |  if_ne	add	_var04, _var01
2966c     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
29670     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
29674     40 16 46 A5 |  if_e	or	arg03, #64
29678     0A 17 42 FC | 	wrbyte	arg03, arg02
2967c                 | _fatfs_cc_put_lfn_ret
2967c     2D 00 64 FD | 	ret
29680                 | 
29680                 | _fatfs_cc_gen_numname
29680     08 4A 05 F6 | 	mov	COUNT_, #8
29684     A8 00 A0 FD | 	call	#pushregs_
29688     2C F0 07 F1 | 	add	ptra, #44
2968c     09 1F 02 F6 | 	mov	local01, arg01
29690     0A 21 02 F6 | 	mov	local02, arg02
29694     0B 23 02 F6 | 	mov	local03, arg03
29698     0C 25 02 F6 | 	mov	local04, arg04
2969c     0F 13 02 F6 | 	mov	arg01, local01
296a0     10 15 02 F6 | 	mov	arg02, local02
296a4     0B 16 06 F6 | 	mov	arg03, #11
296a8     84 75 BF FD | 	call	#__system____builtin_memmove
296ac     06 24 16 F2 | 	cmp	local04, #6 wc
296b0     48 00 90 CD |  if_b	jmp	#LR__4205
296b4     12 27 02 F6 | 	mov	local05, local04
296b8     97 1E 48 FB | 	callpa	#(@LR__4203-@LR__4200)>>2,fcache_load_ptr_
296bc                 | ' 		sreg = seq;
296bc                 | ' 		while (*lfn) {
296bc                 | LR__4200
296bc     11 29 EA FA | 	rdword	local06, local03 wz
296c0     34 00 90 AD |  if_e	jmp	#LR__4204
296c4     11 2B E2 FA | 	rdword	local07, local03
296c8                 | ' 			wc = *lfn++;
296c8                 | ' 			for (i = 0; i < 16; i++) {
296c8     02 22 06 F1 | 	add	local03, #2
296cc     10 12 DC FC | 	rep	@LR__4202, #16
296d0                 | LR__4201
296d0     01 26 66 F0 | 	shl	local05, #1
296d4     15 29 32 F9 | 	getword	local06, local07, #0
296d8     01 28 06 F5 | 	and	local06, #1
296dc     14 27 02 F1 | 	add	local05, local06
296e0     15 2B 32 F9 | 	getword	local07, local07, #0
296e4     01 2A 46 F0 | 	shr	local07, #1
296e8     10 26 2E F4 | 	testbn	local05, #16 wz
296ec     88 00 00 5F 
296f0     21 26 66 55 |  if_ne	xor	local05, ##69665
296f4                 | LR__4202
296f4     C4 FF 9F FD | 	jmp	#LR__4200
296f8                 | LR__4203
296f8                 | LR__4204
296f8     13 25 02 F6 | 	mov	local04, local05
296fc                 | LR__4205
296fc     07 2A 06 F6 | 	mov	local07, #7
29700                 | ' 			}
29700                 | ' 		}
29700                 | ' 		seq = (UINT)sreg;
29700                 | ' 	}
29700                 | ' 
29700                 | ' 
29700                 | ' 	i = 7;
29700                 | ' 	do {
29700     10 4E 05 F1 | 	add	fp, #16
29704     97 1A 48 FB | 	callpa	#(@LR__4207-@LR__4206)>>2,fcache_load_ptr_
29708                 | LR__4206
29708     12 27 42 F8 | 	getnib	local05, local04, #0
2970c     30 26 06 F1 | 	add	local05, #48
29710     04 24 46 F0 | 	shr	local04, #4
29714     13 29 E2 F8 | 	getbyte	local06, local05, #0
29718     3A 28 16 F2 | 	cmp	local06, #58 wc
2971c     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
29720     07 26 06 31 |  if_ae	add	local05, #7
29724     15 29 02 F6 | 	mov	local06, local07
29728     01 2A 8E F1 | 	sub	local07, #1 wz
2972c     A7 28 02 F1 | 	add	local06, fp
29730     14 27 42 FC | 	wrbyte	local05, local06
29734     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
29738     CC FF 9F 5D |  if_ne	jmp	#LR__4206
2973c                 | LR__4207
2973c     15 29 02 F6 | 	mov	local06, local07
29740     A7 28 02 F1 | 	add	local06, fp
29744     14 FD 48 FC | 	wrbyte	#126, local06
29748                 | ' 	ns[i] = '~';
29748                 | ' 
29748                 | ' 
29748                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
29748     00 26 06 F6 | 	mov	local05, #0
2974c     10 4E 85 F1 | 	sub	fp, #16
29750     97 2A 48 FB | 	callpa	#(@LR__4210-@LR__4208)>>2,fcache_load_ptr_
29754                 | LR__4208
29754     15 27 12 F2 | 	cmp	local05, local07 wc
29758     4C 00 90 3D |  if_ae	jmp	#LR__4211
2975c     13 29 02 F6 | 	mov	local06, local05
29760     0F 29 02 F1 | 	add	local06, local01
29764     14 29 C2 FA | 	rdbyte	local06, local06
29768     20 28 0E F2 | 	cmp	local06, #32 wz
2976c     38 00 90 AD |  if_e	jmp	#LR__4211
29770     13 13 02 F6 | 	mov	arg01, local05
29774     0F 13 02 F1 | 	add	arg01, local01
29778     09 13 CA FA | 	rdbyte	arg01, arg01 wz
2977c     00 FA 05 56 |  if_ne	mov	result1, #0
29780                 | ' 
29780                 | ' 	return 0;
29780     00 FA 05 A6 |  if_e	mov	result1, #0
29784     00 FA 0D F2 | 	cmp	result1, #0 wz
29788     14 00 90 AD |  if_e	jmp	#LR__4209
2978c     15 29 02 F6 | 	mov	local06, local07
29790     01 28 86 F1 | 	sub	local06, #1
29794     14 27 0A F2 | 	cmp	local05, local06 wz
29798     0C 00 90 AD |  if_e	jmp	#LR__4211
2979c     01 26 06 F1 | 	add	local05, #1
297a0                 | LR__4209
297a0     01 26 06 F1 | 	add	local05, #1
297a4     AC FF 9F FD | 	jmp	#LR__4208
297a8                 | LR__4210
297a8                 | LR__4211
297a8     97 20 48 FB | 	callpa	#(@LR__4215-@LR__4212)>>2,fcache_load_ptr_
297ac                 | ' 			j++;
297ac                 | ' 		}
297ac                 | ' 	}
297ac                 | ' 	do {
297ac                 | LR__4212
297ac     13 29 02 F6 | 	mov	local06, local05
297b0     0F 29 02 F1 | 	add	local06, local01
297b4     08 2A 16 F2 | 	cmp	local07, #8 wc
297b8     01 26 06 F1 | 	add	local05, #1
297bc     1C 00 90 3D |  if_ae	jmp	#LR__4213
297c0     15 25 02 F6 | 	mov	local04, local07
297c4     10 4E 05 F1 | 	add	fp, #16
297c8     A7 24 02 F1 | 	add	local04, fp
297cc     12 2D C2 FA | 	rdbyte	local08, local04
297d0     01 2A 06 F1 | 	add	local07, #1
297d4     10 4E 85 F1 | 	sub	fp, #16
297d8     04 00 90 FD | 	jmp	#LR__4214
297dc                 | LR__4213
297dc     20 2C 06 F6 | 	mov	local08, #32
297e0                 | LR__4214
297e0     14 2D 42 FC | 	wrbyte	local08, local06
297e4     08 26 16 F2 | 	cmp	local05, #8 wc
297e8     C0 FF 9F CD |  if_b	jmp	#LR__4212
297ec                 | LR__4215
297ec     A7 F0 03 F6 | 	mov	ptra, fp
297f0     B2 00 A0 FD | 	call	#popregs_
297f4                 | _fatfs_cc_gen_numname_ret
297f4     2D 00 64 FD | 	ret
297f8                 | 
297f8                 | _fatfs_cc_sum_sfn
297f8     00 00 06 F6 | 	mov	_var01, #0
297fc                 | ' )
297fc                 | ' {
297fc                 | ' 	BYTE sum = 0;
297fc                 | ' 	UINT n = 11;
297fc                 | ' 
297fc                 | ' 	do {
297fc     97 12 48 FB | 	callpa	#(@LR__4222-@LR__4220)>>2,fcache_load_ptr_
29800                 | LR__4220
29800     0B 10 DC FC | 	rep	@LR__4223, #11
29804                 | LR__4221
29804     00 FB E1 F8 | 	getbyte	result1, _var01, #0
29808     01 FA 45 F0 | 	shr	result1, #1
2980c     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
29810     07 00 66 F0 | 	shl	_var01, #7
29814     00 FB 01 F1 | 	add	result1, _var01
29818     09 01 C2 FA | 	rdbyte	_var01, arg01
2981c     FD 00 02 F1 | 	add	_var01, result1
29820     01 12 06 F1 | 	add	arg01, #1
29824                 | LR__4222
29824                 | LR__4223
29824                 | ' 	return sum;
29824     00 FB 01 F6 | 	mov	result1, _var01
29828                 | _fatfs_cc_sum_sfn_ret
29828     2D 00 64 FD | 	ret
2982c                 | 
2982c                 | _fatfs_cc_dir_read
2982c     0C 4A 05 F6 | 	mov	COUNT_, #12
29830     A8 00 A0 FD | 	call	#pushregs_
29834     09 1F 02 F6 | 	mov	local01, arg01
29838     0A 21 02 F6 | 	mov	local02, arg02
2983c     04 22 06 F6 | 	mov	local03, #4
29840     0F 25 02 FB | 	rdlong	local04, local01
29844     FF 26 06 F6 | 	mov	local05, #255
29848     FF 28 06 F6 | 	mov	local06, #255
2984c                 | ' )
2984c                 | ' {
2984c                 | ' 	FRESULT res = FR_NO_FILE;
2984c                 | ' 	FATFS *fs = dp->obj.fs;
2984c                 | ' 	BYTE attr, b;
2984c                 | ' 
2984c                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2984c                 | ' 
2984c                 | ' 
2984c                 | ' 	while (dp->sect) {
2984c                 | LR__4230
2984c     18 1E 06 F1 | 	add	local01, #24
29850     0F FB 09 FB | 	rdlong	result1, local01 wz
29854     18 1E 86 F1 | 	sub	local01, #24
29858     AC 01 90 AD |  if_e	jmp	#LR__4240
2985c     18 1E 06 F1 | 	add	local01, #24
29860     0F 15 02 FB | 	rdlong	arg02, local01
29864     18 1E 86 F1 | 	sub	local01, #24
29868     12 13 02 F6 | 	mov	arg01, local04
2986c     AC ED BF FD | 	call	#_fatfs_cc_move_window
29870     FD 22 0A F6 | 	mov	local03, result1 wz
29874     90 01 90 5D |  if_ne	jmp	#LR__4240
29878     1C 1E 06 F1 | 	add	local01, #28
2987c     0F FB 01 FB | 	rdlong	result1, local01
29880     1C 1E 86 F1 | 	sub	local01, #28
29884     FD 2A C2 FA | 	rdbyte	local07, result1
29888     15 FB 01 F6 | 	mov	result1, local07
2988c     07 FA 4D F7 | 	zerox	result1, #7 wz
29890     04 22 06 A6 |  if_e	mov	local03, #4
29894                 | ' 			res = FR_NO_FILE; break;
29894     70 01 90 AD |  if_e	jmp	#LR__4240
29898     1C 1E 06 F1 | 	add	local01, #28
2989c     0F 2D 02 FB | 	rdlong	local08, local01
298a0     0B 2C 06 F1 | 	add	local08, #11
298a4     16 2F C2 FA | 	rdbyte	local09, local08
298a8     3F 2E 06 F5 | 	and	local09, #63
298ac     16 1E 86 F1 | 	sub	local01, #22
298b0     0F 2F 42 FC | 	wrbyte	local09, local01
298b4     06 1E 86 F1 | 	sub	local01, #6
298b8     15 FB E1 F8 | 	getbyte	result1, local07, #0
298bc     E5 FA 0D F2 | 	cmp	result1, #229 wz
298c0     15 2D 02 56 |  if_ne	mov	local08, local07
298c4     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
298c8     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
298cc     1C 00 90 AD |  if_e	jmp	#LR__4231
298d0     00 30 06 F6 | 	mov	local10, #0
298d4     17 2D E2 F8 | 	getbyte	local08, local09, #0
298d8     20 2C 26 F5 | 	andn	local08, #32
298dc     08 2C 0E F2 | 	cmp	local08, #8 wz
298e0     01 30 06 A6 |  if_e	mov	local10, #1
298e4     10 31 0A F2 | 	cmp	local10, local02 wz
298e8     08 00 90 AD |  if_e	jmp	#LR__4232
298ec                 | LR__4231
298ec     FF 26 06 F6 | 	mov	local05, #255
298f0     00 01 90 FD | 	jmp	#LR__4239
298f4                 | LR__4232
298f4     17 2F E2 F8 | 	getbyte	local09, local09, #0
298f8     0F 2E 0E F2 | 	cmp	local09, #15 wz
298fc     B4 00 90 5D |  if_ne	jmp	#LR__4236
29900     15 33 E2 F8 | 	getbyte	local11, local07, #0
29904     40 32 CE F7 | 	test	local11, #64 wz
29908     30 00 90 AD |  if_e	jmp	#LR__4233
2990c     1C 1E 06 F1 | 	add	local01, #28
29910     0F 33 02 FB | 	rdlong	local11, local01
29914     0D 32 06 F1 | 	add	local11, #13
29918     19 29 C2 FA | 	rdbyte	local06, local11
2991c     15 2B E2 F8 | 	getbyte	local07, local07, #0
29920     BF 2A 06 F5 | 	and	local07, #191
29924     15 27 02 F6 | 	mov	local05, local07
29928     0C 1E 86 F1 | 	sub	local01, #12
2992c     0F 33 02 FB | 	rdlong	local11, local01
29930     1C 1E 06 F1 | 	add	local01, #28
29934     0F 33 62 FC | 	wrlong	local11, local01
29938     2C 1E 86 F1 | 	sub	local01, #44
2993c                 | LR__4233
2993c     15 2D E2 F8 | 	getbyte	local08, local07, #0
29940     13 31 E2 F8 | 	getbyte	local10, local05, #0
29944     18 2D 0A F2 | 	cmp	local08, local10 wz
29948     5C 00 90 5D |  if_ne	jmp	#LR__4234
2994c     14 31 E2 F8 | 	getbyte	local10, local06, #0
29950     1C 1E 06 F1 | 	add	local01, #28
29954     0F 2F 02 FB | 	rdlong	local09, local01
29958     1C 1E 86 F1 | 	sub	local01, #28
2995c     0D 2E 06 F1 | 	add	local09, #13
29960     17 2D C2 FA | 	rdbyte	local08, local09
29964     16 2F E2 F8 | 	getbyte	local09, local08, #0
29968     17 31 0A F2 | 	cmp	local10, local09 wz
2996c     38 00 90 5D |  if_ne	jmp	#LR__4234
29970     0C 24 06 F1 | 	add	local04, #12
29974     12 13 02 FB | 	rdlong	arg01, local04
29978     0C 24 86 F1 | 	sub	local04, #12
2997c     1C 1E 06 F1 | 	add	local01, #28
29980     0F 35 02 FB | 	rdlong	local12, local01
29984     1C 1E 86 F1 | 	sub	local01, #28
29988     1A 15 02 F6 | 	mov	arg02, local12
2998c     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
29990     00 FA 4D F2 | 	cmps	result1, #0 wz
29994     13 35 02 56 |  if_ne	mov	local12, local05
29998     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
2999c     01 34 86 51 |  if_ne	sub	local12, #1
299a0     1A 33 02 56 |  if_ne	mov	local11, local12
299a4     04 00 90 5D |  if_ne	jmp	#LR__4235
299a8                 | LR__4234
299a8     FF 32 06 F6 | 	mov	local11, #255
299ac                 | LR__4235
299ac     19 27 02 F6 | 	mov	local05, local11
299b0     40 00 90 FD | 	jmp	#LR__4238
299b4                 | LR__4236
299b4     13 33 02 F6 | 	mov	local11, local05
299b8     07 32 4E F7 | 	zerox	local11, #7 wz
299bc     20 00 90 5D |  if_ne	jmp	#LR__4237
299c0     14 29 E2 F8 | 	getbyte	local06, local06, #0
299c4     1C 1E 06 F1 | 	add	local01, #28
299c8     0F 13 02 FB | 	rdlong	arg01, local01
299cc     1C 1E 86 F1 | 	sub	local01, #28
299d0     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
299d4     FD FA E1 F8 | 	getbyte	result1, result1, #0
299d8     FD 28 0A F2 | 	cmp	local06, result1 wz
299dc     28 00 90 AD |  if_e	jmp	#LR__4240
299e0                 | LR__4237
299e0     2C 1E 06 F1 | 	add	local01, #44
299e4     FF FF FF FF 
299e8     0F FF 6B FC | 	wrlong	##-1, local01
299ec     2C 1E 86 F1 | 	sub	local01, #44
299f0                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
299f0                 | ' 					}
299f0                 | ' 					break;
299f0     14 00 90 FD | 	jmp	#LR__4240
299f4                 | LR__4238
299f4                 | LR__4239
299f4     0F 13 02 F6 | 	mov	arg01, local01
299f8     00 14 06 F6 | 	mov	arg02, #0
299fc     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
29a00     FD 22 0A F6 | 	mov	local03, result1 wz
29a04     44 FE 9F AD |  if_e	jmp	#LR__4230
29a08                 | LR__4240
29a08     00 22 0E F2 | 	cmp	local03, #0 wz
29a0c     18 1E 06 51 |  if_ne	add	local01, #24
29a10     0F 01 68 5C |  if_ne	wrlong	#0, local01
29a14                 | ' 	return res;
29a14     11 FB 01 F6 | 	mov	result1, local03
29a18     A7 F0 03 F6 | 	mov	ptra, fp
29a1c     B2 00 A0 FD | 	call	#popregs_
29a20                 | _fatfs_cc_dir_read_ret
29a20     2D 00 64 FD | 	ret
29a24                 | 
29a24                 | _fatfs_cc_dir_find
29a24     0B 4A 05 F6 | 	mov	COUNT_, #11
29a28     A8 00 A0 FD | 	call	#pushregs_
29a2c     09 1F 02 F6 | 	mov	local01, arg01
29a30     0F 21 02 FB | 	rdlong	local02, local01
29a34     0F 13 02 F6 | 	mov	arg01, local01
29a38     00 14 06 F6 | 	mov	arg02, #0
29a3c     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
29a40     00 FA 0D F2 | 	cmp	result1, #0 wz
29a44     18 02 90 5D |  if_ne	jmp	#LR__4262
29a48     FF 22 06 F6 | 	mov	local03, #255
29a4c     FF 24 06 F6 | 	mov	local04, #255
29a50     2C 1E 06 F1 | 	add	local01, #44
29a54     FF FF FF FF 
29a58     0F FF 6B FC | 	wrlong	##-1, local01
29a5c     2C 1E 86 F1 | 	sub	local01, #44
29a60                 | ' #line 2404 "ff.c"
29a60                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
29a60                 | ' 
29a60                 | ' 	do {
29a60                 | LR__4250
29a60     18 1E 06 F1 | 	add	local01, #24
29a64     0F 15 02 FB | 	rdlong	arg02, local01
29a68     18 1E 86 F1 | 	sub	local01, #24
29a6c     10 13 02 F6 | 	mov	arg01, local02
29a70     A8 EB BF FD | 	call	#_fatfs_cc_move_window
29a74     FD 26 0A F6 | 	mov	local05, result1 wz
29a78     E0 01 90 5D |  if_ne	jmp	#LR__4261
29a7c     1C 1E 06 F1 | 	add	local01, #28
29a80     0F 17 02 FB | 	rdlong	arg03, local01
29a84     1C 1E 86 F1 | 	sub	local01, #28
29a88     0B 29 C2 FA | 	rdbyte	local06, arg03
29a8c     14 17 02 F6 | 	mov	arg03, local06
29a90     07 16 4E F7 | 	zerox	arg03, #7 wz
29a94     04 26 06 A6 |  if_e	mov	local05, #4
29a98     C0 01 90 AD |  if_e	jmp	#LR__4261
29a9c     1C 1E 06 F1 | 	add	local01, #28
29aa0     0F 2B 02 FB | 	rdlong	local07, local01
29aa4     15 17 02 F6 | 	mov	arg03, local07
29aa8     0B 16 06 F1 | 	add	arg03, #11
29aac     0B 2D C2 FA | 	rdbyte	local08, arg03
29ab0     3F 2C 06 F5 | 	and	local08, #63
29ab4     16 1E 86 F1 | 	sub	local01, #22
29ab8     0F 2D 42 FC | 	wrbyte	local08, local01
29abc     06 1E 86 F1 | 	sub	local01, #6
29ac0     14 17 E2 F8 | 	getbyte	arg03, local06, #0
29ac4     E5 16 0E F2 | 	cmp	arg03, #229 wz
29ac8     18 00 90 AD |  if_e	jmp	#LR__4251
29acc     16 17 E2 F8 | 	getbyte	arg03, local08, #0
29ad0     08 16 CE F7 | 	test	arg03, #8 wz
29ad4     16 2B 02 56 |  if_ne	mov	local07, local08
29ad8     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
29adc     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
29ae0     18 00 90 AD |  if_e	jmp	#LR__4252
29ae4                 | LR__4251
29ae4     FF 24 06 F6 | 	mov	local04, #255
29ae8     2C 1E 06 F1 | 	add	local01, #44
29aec     FF FF FF FF 
29af0     0F FF 6B FC | 	wrlong	##-1, local01
29af4     2C 1E 86 F1 | 	sub	local01, #44
29af8     4C 01 90 FD | 	jmp	#LR__4260
29afc                 | LR__4252
29afc     16 2D E2 F8 | 	getbyte	local08, local08, #0
29b00     0F 2C 0E F2 | 	cmp	local08, #15 wz
29b04     C8 00 90 5D |  if_ne	jmp	#LR__4256
29b08     2B 1E 06 F1 | 	add	local01, #43
29b0c     0F 2D C2 FA | 	rdbyte	local08, local01
29b10     2B 1E 86 F1 | 	sub	local01, #43
29b14     40 2C CE F7 | 	test	local08, #64 wz
29b18     2C 01 90 5D |  if_ne	jmp	#LR__4259
29b1c     14 2F E2 F8 | 	getbyte	local09, local06, #0
29b20     40 2E CE F7 | 	test	local09, #64 wz
29b24     30 00 90 AD |  if_e	jmp	#LR__4253
29b28     1C 1E 06 F1 | 	add	local01, #28
29b2c     0F 2F 02 FB | 	rdlong	local09, local01
29b30     0D 2E 06 F1 | 	add	local09, #13
29b34     17 23 C2 FA | 	rdbyte	local03, local09
29b38     14 29 E2 F8 | 	getbyte	local06, local06, #0
29b3c     BF 28 06 F5 | 	and	local06, #191
29b40     14 25 02 F6 | 	mov	local04, local06
29b44     0C 1E 86 F1 | 	sub	local01, #12
29b48     0F 2F 02 FB | 	rdlong	local09, local01
29b4c     1C 1E 06 F1 | 	add	local01, #28
29b50     0F 2F 62 FC | 	wrlong	local09, local01
29b54     2C 1E 86 F1 | 	sub	local01, #44
29b58                 | LR__4253
29b58     14 31 E2 F8 | 	getbyte	local10, local06, #0
29b5c     12 2B E2 F8 | 	getbyte	local07, local04, #0
29b60     15 31 0A F2 | 	cmp	local10, local07 wz
29b64     5C 00 90 5D |  if_ne	jmp	#LR__4254
29b68     11 2D E2 F8 | 	getbyte	local08, local03, #0
29b6c     1C 1E 06 F1 | 	add	local01, #28
29b70     0F 2B 02 FB | 	rdlong	local07, local01
29b74     1C 1E 86 F1 | 	sub	local01, #28
29b78     0D 2A 06 F1 | 	add	local07, #13
29b7c     15 29 C2 FA | 	rdbyte	local06, local07
29b80     14 2B E2 F8 | 	getbyte	local07, local06, #0
29b84     15 2D 0A F2 | 	cmp	local08, local07 wz
29b88     38 00 90 5D |  if_ne	jmp	#LR__4254
29b8c     0C 20 06 F1 | 	add	local02, #12
29b90     10 13 02 FB | 	rdlong	arg01, local02
29b94     0C 20 86 F1 | 	sub	local02, #12
29b98     1C 1E 06 F1 | 	add	local01, #28
29b9c     0F 33 02 FB | 	rdlong	local11, local01
29ba0     1C 1E 86 F1 | 	sub	local01, #28
29ba4     19 15 02 F6 | 	mov	arg02, local11
29ba8     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
29bac     00 FA 4D F2 | 	cmps	result1, #0 wz
29bb0     12 33 02 56 |  if_ne	mov	local11, local04
29bb4     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
29bb8     01 32 86 51 |  if_ne	sub	local11, #1
29bbc     19 2F 02 56 |  if_ne	mov	local09, local11
29bc0     04 00 90 5D |  if_ne	jmp	#LR__4255
29bc4                 | LR__4254
29bc4     FF 2E 06 F6 | 	mov	local09, #255
29bc8                 | LR__4255
29bc8     17 25 02 F6 | 	mov	local04, local09
29bcc     78 00 90 FD | 	jmp	#LR__4259
29bd0                 | LR__4256
29bd0     12 2F 02 F6 | 	mov	local09, local04
29bd4     07 2E 4E F7 | 	zerox	local09, #7 wz
29bd8     20 00 90 5D |  if_ne	jmp	#LR__4257
29bdc     11 31 E2 F8 | 	getbyte	local10, local03, #0
29be0     1C 1E 06 F1 | 	add	local01, #28
29be4     0F 13 02 FB | 	rdlong	arg01, local01
29be8     1C 1E 86 F1 | 	sub	local01, #28
29bec     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
29bf0     FD FA E1 F8 | 	getbyte	result1, result1, #0
29bf4     FD 30 0A F2 | 	cmp	local10, result1 wz
29bf8     60 00 90 AD |  if_e	jmp	#LR__4261
29bfc                 | LR__4257
29bfc     2B 1E 06 F1 | 	add	local01, #43
29c00     0F 2F C2 FA | 	rdbyte	local09, local01
29c04     2B 1E 86 F1 | 	sub	local01, #43
29c08     01 2E CE F7 | 	test	local09, #1 wz
29c0c     24 00 90 5D |  if_ne	jmp	#LR__4258
29c10     1C 1E 06 F1 | 	add	local01, #28
29c14     0F 13 02 FB | 	rdlong	arg01, local01
29c18     04 1E 06 F1 | 	add	local01, #4
29c1c     0F 15 02 F6 | 	mov	arg02, local01
29c20     20 1E 86 F1 | 	sub	local01, #32
29c24     0B 16 06 F6 | 	mov	arg03, #11
29c28     88 DA BF FD | 	call	#_fatfs_cc_memcmp
29c2c     00 FA 0D F2 | 	cmp	result1, #0 wz
29c30     28 00 90 AD |  if_e	jmp	#LR__4261
29c34                 | LR__4258
29c34     FF 24 06 F6 | 	mov	local04, #255
29c38     2C 1E 06 F1 | 	add	local01, #44
29c3c     FF FF FF FF 
29c40     0F FF 6B FC | 	wrlong	##-1, local01
29c44     2C 1E 86 F1 | 	sub	local01, #44
29c48                 | LR__4259
29c48                 | LR__4260
29c48     0F 13 02 F6 | 	mov	arg01, local01
29c4c     00 14 06 F6 | 	mov	arg02, #0
29c50     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
29c54     FD 26 0A F6 | 	mov	local05, result1 wz
29c58     04 FE 9F AD |  if_e	jmp	#LR__4250
29c5c                 | LR__4261
29c5c                 | ' 
29c5c                 | ' 	return res;
29c5c     13 FB 01 F6 | 	mov	result1, local05
29c60                 | LR__4262
29c60     A7 F0 03 F6 | 	mov	ptra, fp
29c64     B2 00 A0 FD | 	call	#popregs_
29c68                 | _fatfs_cc_dir_find_ret
29c68     2D 00 64 FD | 	ret
29c6c                 | 
29c6c                 | _fatfs_cc_dir_register
29c6c     0A 4A 05 F6 | 	mov	COUNT_, #10
29c70     A8 00 A0 FD | 	call	#pushregs_
29c74     2C F0 07 F1 | 	add	ptra, #44
29c78     04 4E 05 F1 | 	add	fp, #4
29c7c     A7 12 62 FC | 	wrlong	arg01, fp
29c80     09 1F 02 FB | 	rdlong	local01, arg01
29c84     08 4E 05 F1 | 	add	fp, #8
29c88     A7 1E 62 FC | 	wrlong	local01, fp
29c8c     08 4E 85 F1 | 	sub	fp, #8
29c90     A7 20 02 FB | 	rdlong	local02, fp
29c94     04 4E 85 F1 | 	sub	fp, #4
29c98     2B 20 06 F1 | 	add	local02, #43
29c9c     10 21 C2 FA | 	rdbyte	local02, local02
29ca0     A0 20 CE F7 | 	test	local02, #160 wz
29ca4     06 FA 05 56 |  if_ne	mov	result1, #6
29ca8     F8 03 90 5D |  if_ne	jmp	#LR__4285
29cac                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
29cac     14 4E 05 F1 | 	add	fp, #20
29cb0     A7 00 68 FC | 	wrlong	#0, fp
29cb4     14 4E 85 F1 | 	sub	fp, #20
29cb8     97 28 48 FB | 	callpa	#(@LR__4271-@LR__4270)>>2,fcache_load_ptr_
29cbc                 | LR__4270
29cbc     0C 4E 05 F1 | 	add	fp, #12
29cc0     A7 20 02 FB | 	rdlong	local02, fp
29cc4     0C 20 06 F1 | 	add	local02, #12
29cc8     10 23 02 FB | 	rdlong	local03, local02
29ccc     08 4E 05 F1 | 	add	fp, #8
29cd0     A7 24 02 FB | 	rdlong	local04, fp
29cd4     14 4E 85 F1 | 	sub	fp, #20
29cd8     01 24 66 F0 | 	shl	local04, #1
29cdc     11 25 02 F1 | 	add	local04, local03
29ce0     12 21 EA FA | 	rdword	local02, local04 wz
29ce4     24 00 90 AD |  if_e	jmp	#LR__4272
29ce8     14 4E 05 F1 | 	add	fp, #20
29cec     A7 26 02 FB | 	rdlong	local05, fp
29cf0     13 29 02 F6 | 	mov	local06, local05
29cf4     13 2B 02 F6 | 	mov	local07, local05
29cf8     15 2D 02 F6 | 	mov	local08, local07
29cfc     01 2C 06 F1 | 	add	local08, #1
29d00     A7 2C 62 FC | 	wrlong	local08, fp
29d04     14 4E 85 F1 | 	sub	fp, #20
29d08     B0 FF 9F FD | 	jmp	#LR__4270
29d0c                 | LR__4271
29d0c                 | LR__4272
29d0c     1C 4E 05 F1 | 	add	fp, #28
29d10     A7 12 02 F6 | 	mov	arg01, fp
29d14     18 4E 85 F1 | 	sub	fp, #24
29d18     A7 14 02 FB | 	rdlong	arg02, fp
29d1c     04 4E 85 F1 | 	sub	fp, #4
29d20     20 14 06 F1 | 	add	arg02, #32
29d24     0C 16 06 F6 | 	mov	arg03, #12
29d28     04 6F BF FD | 	call	#__system____builtin_memmove
29d2c     27 4E 05 F1 | 	add	fp, #39
29d30     A7 2E C2 FA | 	rdbyte	local09, fp
29d34     27 4E 85 F1 | 	sub	fp, #39
29d38     01 2E CE F7 | 	test	local09, #1 wz
29d3c     F4 00 90 AD |  if_e	jmp	#LR__4275
29d40     04 4E 05 F1 | 	add	fp, #4
29d44     A7 30 02 FB | 	rdlong	local10, fp
29d48     2B 30 06 F1 | 	add	local10, #43
29d4c     18 81 48 FC | 	wrbyte	#64, local10
29d50                 | ' 		dp->fn[ 11 ] =  0x40 ;
29d50                 | ' 		for (n = 1; n < 100; n++) {
29d50     0C 4E 05 F1 | 	add	fp, #12
29d54     A7 02 68 FC | 	wrlong	#1, fp
29d58     10 4E 85 F1 | 	sub	fp, #16
29d5c                 | LR__4273
29d5c     10 4E 05 F1 | 	add	fp, #16
29d60     A7 20 02 FB | 	rdlong	local02, fp
29d64     10 4E 85 F1 | 	sub	fp, #16
29d68     64 20 16 F2 | 	cmp	local02, #100 wc
29d6c     70 00 90 3D |  if_ae	jmp	#LR__4274
29d70     04 4E 05 F1 | 	add	fp, #4
29d74     A7 12 02 FB | 	rdlong	arg01, fp
29d78     20 12 06 F1 | 	add	arg01, #32
29d7c     18 4E 05 F1 | 	add	fp, #24
29d80     A7 14 02 F6 | 	mov	arg02, fp
29d84     10 4E 85 F1 | 	sub	fp, #16
29d88     A7 30 02 FB | 	rdlong	local10, fp
29d8c     0C 30 06 F1 | 	add	local10, #12
29d90     18 17 02 FB | 	rdlong	arg03, local10
29d94     04 4E 05 F1 | 	add	fp, #4
29d98     A7 18 02 FB | 	rdlong	arg04, fp
29d9c     10 4E 85 F1 | 	sub	fp, #16
29da0     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
29da4     04 4E 05 F1 | 	add	fp, #4
29da8     A7 12 02 FB | 	rdlong	arg01, fp
29dac     04 4E 85 F1 | 	sub	fp, #4
29db0     70 FC BF FD | 	call	#_fatfs_cc_dir_find
29db4     08 4E 05 F1 | 	add	fp, #8
29db8     A7 FA 61 FC | 	wrlong	result1, fp
29dbc     00 FA 4D F2 | 	cmps	result1, #0 wz
29dc0     08 4E 85 F1 | 	sub	fp, #8
29dc4     18 00 90 5D |  if_ne	jmp	#LR__4274
29dc8     10 4E 05 F1 | 	add	fp, #16
29dcc     A7 30 02 FB | 	rdlong	local10, fp
29dd0     01 30 06 F1 | 	add	local10, #1
29dd4     A7 30 62 FC | 	wrlong	local10, fp
29dd8     10 4E 85 F1 | 	sub	fp, #16
29ddc     7C FF 9F FD | 	jmp	#LR__4273
29de0                 | LR__4274
29de0     10 4E 05 F1 | 	add	fp, #16
29de4     A7 30 02 FB | 	rdlong	local10, fp
29de8     10 4E 85 F1 | 	sub	fp, #16
29dec     64 30 0E F2 | 	cmp	local10, #100 wz
29df0     07 FA 05 A6 |  if_e	mov	result1, #7
29df4     AC 02 90 AD |  if_e	jmp	#LR__4285
29df8     08 4E 05 F1 | 	add	fp, #8
29dfc     A7 30 02 FB | 	rdlong	local10, fp
29e00     08 4E 85 F1 | 	sub	fp, #8
29e04     04 30 0E F2 | 	cmp	local10, #4 wz
29e08     08 4E 05 51 |  if_ne	add	fp, #8
29e0c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
29e10     08 4E 85 51 |  if_ne	sub	fp, #8
29e14     8C 02 90 5D |  if_ne	jmp	#LR__4285
29e18     04 4E 05 F1 | 	add	fp, #4
29e1c     A7 30 02 FB | 	rdlong	local10, fp
29e20     23 4E 05 F1 | 	add	fp, #35
29e24     A7 1E C2 FA | 	rdbyte	local01, fp
29e28     27 4E 85 F1 | 	sub	fp, #39
29e2c     2B 30 06 F1 | 	add	local10, #43
29e30     18 1F 42 FC | 	wrbyte	local01, local10
29e34                 | LR__4275
29e34     27 4E 05 F1 | 	add	fp, #39
29e38     A7 20 C2 FA | 	rdbyte	local02, fp
29e3c     27 4E 85 F1 | 	sub	fp, #39
29e40     02 20 CE F7 | 	test	local02, #2 wz
29e44     20 00 90 AD |  if_e	jmp	#LR__4276
29e48     14 4E 05 F1 | 	add	fp, #20
29e4c     A7 30 02 FB | 	rdlong	local10, fp
29e50     0C 30 06 F1 | 	add	local10, #12
29e54     0D 30 16 FD | 	qdiv	local10, #13
29e58     14 4E 85 F1 | 	sub	fp, #20
29e5c     18 30 62 FD | 	getqx	local10
29e60     01 30 06 F1 | 	add	local10, #1
29e64     04 00 90 FD | 	jmp	#LR__4277
29e68                 | LR__4276
29e68     01 30 06 F6 | 	mov	local10, #1
29e6c                 | LR__4277
29e6c     18 4E 05 F1 | 	add	fp, #24
29e70     A7 30 62 FC | 	wrlong	local10, fp
29e74     14 4E 85 F1 | 	sub	fp, #20
29e78     A7 12 02 FB | 	rdlong	arg01, fp
29e7c     18 15 02 F6 | 	mov	arg02, local10
29e80     04 4E 85 F1 | 	sub	fp, #4
29e84     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
29e88     08 4E 05 F1 | 	add	fp, #8
29e8c     A7 FA 61 FC | 	wrlong	result1, fp
29e90     08 4E 85 F1 | 	sub	fp, #8
29e94     00 FA 0D F2 | 	cmp	result1, #0 wz
29e98     38 01 90 5D |  if_ne	jmp	#LR__4282
29e9c     18 4E 05 F1 | 	add	fp, #24
29ea0     A7 30 02 FB | 	rdlong	local10, fp
29ea4     01 30 8E F1 | 	sub	local10, #1 wz
29ea8     A7 30 62 FC | 	wrlong	local10, fp
29eac     18 4E 85 F1 | 	sub	fp, #24
29eb0     20 01 90 AD |  if_e	jmp	#LR__4282
29eb4     04 4E 05 F1 | 	add	fp, #4
29eb8     A7 30 02 FB | 	rdlong	local10, fp
29ebc     18 13 02 F6 | 	mov	arg01, local10
29ec0     14 4E 05 F1 | 	add	fp, #20
29ec4     A7 18 02 FB | 	rdlong	arg04, fp
29ec8     18 4E 85 F1 | 	sub	fp, #24
29ecc     05 18 66 F0 | 	shl	arg04, #5
29ed0     10 30 06 F1 | 	add	local10, #16
29ed4     18 15 02 FB | 	rdlong	arg02, local10
29ed8     0C 15 82 F1 | 	sub	arg02, arg04
29edc     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
29ee0     08 4E 05 F1 | 	add	fp, #8
29ee4     A7 FA 61 FC | 	wrlong	result1, fp
29ee8     08 4E 85 F1 | 	sub	fp, #8
29eec     00 FA 0D F2 | 	cmp	result1, #0 wz
29ef0     E0 00 90 5D |  if_ne	jmp	#LR__4281
29ef4     04 4E 05 F1 | 	add	fp, #4
29ef8     A7 12 02 FB | 	rdlong	arg01, fp
29efc     04 4E 85 F1 | 	sub	fp, #4
29f00     20 12 06 F1 | 	add	arg01, #32
29f04     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
29f08     FD 30 02 F6 | 	mov	local10, result1
29f0c     28 4E 05 F1 | 	add	fp, #40
29f10     A7 30 42 FC | 	wrbyte	local10, fp
29f14     28 4E 85 F1 | 	sub	fp, #40
29f18                 | ' 			sum = sum_sfn(dp->fn);
29f18                 | ' 			do {
29f18                 | LR__4278
29f18     0C 4E 05 F1 | 	add	fp, #12
29f1c     A7 12 02 FB | 	rdlong	arg01, fp
29f20     08 4E 85 F1 | 	sub	fp, #8
29f24     A7 1E 02 FB | 	rdlong	local01, fp
29f28     04 4E 85 F1 | 	sub	fp, #4
29f2c     18 1E 06 F1 | 	add	local01, #24
29f30     0F 15 02 FB | 	rdlong	arg02, local01
29f34     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
29f38     08 4E 05 F1 | 	add	fp, #8
29f3c     A7 FA 61 FC | 	wrlong	result1, fp
29f40     00 FA 4D F2 | 	cmps	result1, #0 wz
29f44     08 4E 85 F1 | 	sub	fp, #8
29f48     88 00 90 5D |  if_ne	jmp	#LR__4280
29f4c     0C 4E 05 F1 | 	add	fp, #12
29f50     A7 20 02 FB | 	rdlong	local02, fp
29f54     0C 20 06 F1 | 	add	local02, #12
29f58     10 13 02 FB | 	rdlong	arg01, local02
29f5c     08 4E 85 F1 | 	sub	fp, #8
29f60     A7 1E 02 FB | 	rdlong	local01, fp
29f64     1C 1E 06 F1 | 	add	local01, #28
29f68     0F 15 02 FB | 	rdlong	arg02, local01
29f6c     14 4E 05 F1 | 	add	fp, #20
29f70     A7 16 02 FB | 	rdlong	arg03, fp
29f74     10 4E 05 F1 | 	add	fp, #16
29f78     A7 18 C2 FA | 	rdbyte	arg04, fp
29f7c     28 4E 85 F1 | 	sub	fp, #40
29f80     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
29f84     0C 4E 05 F1 | 	add	fp, #12
29f88     A7 30 02 FB | 	rdlong	local10, fp
29f8c     03 30 06 F1 | 	add	local10, #3
29f90     18 03 48 FC | 	wrbyte	#1, local10
29f94     08 4E 85 F1 | 	sub	fp, #8
29f98     A7 12 02 FB | 	rdlong	arg01, fp
29f9c     04 4E 85 F1 | 	sub	fp, #4
29fa0     00 14 06 F6 | 	mov	arg02, #0
29fa4     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
29fa8     08 4E 05 F1 | 	add	fp, #8
29fac     A7 FA 61 FC | 	wrlong	result1, fp
29fb0     00 FA 4D F2 | 	cmps	result1, #0 wz
29fb4     08 4E 85 F1 | 	sub	fp, #8
29fb8     18 00 90 5D |  if_ne	jmp	#LR__4279
29fbc     18 4E 05 F1 | 	add	fp, #24
29fc0     A7 30 02 FB | 	rdlong	local10, fp
29fc4     01 30 8E F1 | 	sub	local10, #1 wz
29fc8     A7 30 62 FC | 	wrlong	local10, fp
29fcc     18 4E 85 F1 | 	sub	fp, #24
29fd0     44 FF 9F 5D |  if_ne	jmp	#LR__4278
29fd4                 | LR__4279
29fd4                 | LR__4280
29fd4                 | LR__4281
29fd4                 | LR__4282
29fd4     08 4E 05 F1 | 	add	fp, #8
29fd8     A7 30 0A FB | 	rdlong	local10, fp wz
29fdc     08 4E 85 F1 | 	sub	fp, #8
29fe0     B4 00 90 5D |  if_ne	jmp	#LR__4284
29fe4     0C 4E 05 F1 | 	add	fp, #12
29fe8     A7 12 02 FB | 	rdlong	arg01, fp
29fec     08 4E 85 F1 | 	sub	fp, #8
29ff0     A7 1E 02 FB | 	rdlong	local01, fp
29ff4     04 4E 85 F1 | 	sub	fp, #4
29ff8     18 1E 06 F1 | 	add	local01, #24
29ffc     0F 15 02 FB | 	rdlong	arg02, local01
2a000     18 E6 BF FD | 	call	#_fatfs_cc_move_window
2a004     08 4E 05 F1 | 	add	fp, #8
2a008     A7 FA 61 FC | 	wrlong	result1, fp
2a00c     08 4E 85 F1 | 	sub	fp, #8
2a010     00 FA 0D F2 | 	cmp	result1, #0 wz
2a014     80 00 90 5D |  if_ne	jmp	#LR__4283
2a018     04 4E 05 F1 | 	add	fp, #4
2a01c     A7 20 02 FB | 	rdlong	local02, fp
2a020     04 4E 85 F1 | 	sub	fp, #4
2a024     1C 20 06 F1 | 	add	local02, #28
2a028     10 13 02 FB | 	rdlong	arg01, local02
2a02c     00 14 06 F6 | 	mov	arg02, #0
2a030     20 16 06 F6 | 	mov	arg03, #32
2a034     98 00 A0 FD | 	call	#\builtin_bytefill_
2a038     04 4E 05 F1 | 	add	fp, #4
2a03c     A7 14 02 FB | 	rdlong	arg02, fp
2a040     0A 1F 02 F6 | 	mov	local01, arg02
2a044     1C 1E 06 F1 | 	add	local01, #28
2a048     0F 13 02 FB | 	rdlong	arg01, local01
2a04c     04 4E 85 F1 | 	sub	fp, #4
2a050     20 14 06 F1 | 	add	arg02, #32
2a054     0B 16 06 F6 | 	mov	arg03, #11
2a058     D4 6B BF FD | 	call	#__system____builtin_memmove
2a05c     04 4E 05 F1 | 	add	fp, #4
2a060     A7 2E 02 FB | 	rdlong	local09, fp
2a064     17 31 02 F6 | 	mov	local10, local09
2a068     1C 30 06 F1 | 	add	local10, #28
2a06c     18 1F 02 FB | 	rdlong	local01, local10
2a070     2B 2E 06 F1 | 	add	local09, #43
2a074     17 31 C2 FA | 	rdbyte	local10, local09
2a078     18 30 06 F5 | 	and	local10, #24
2a07c     0C 1E 06 F1 | 	add	local01, #12
2a080     0F 31 42 FC | 	wrbyte	local10, local01
2a084     08 4E 05 F1 | 	add	fp, #8
2a088     A7 30 02 FB | 	rdlong	local10, fp
2a08c     0C 4E 85 F1 | 	sub	fp, #12
2a090     03 30 06 F1 | 	add	local10, #3
2a094     18 03 48 FC | 	wrbyte	#1, local10
2a098                 | LR__4283
2a098                 | LR__4284
2a098                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2a098                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2a098                 | ' 
2a098                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2a098                 | ' 
2a098                 | ' 			fs->wflag = 1;
2a098                 | ' 		}
2a098                 | ' 	}
2a098                 | ' 
2a098                 | ' 	return res;
2a098     08 4E 05 F1 | 	add	fp, #8
2a09c     A7 FA 01 FB | 	rdlong	result1, fp
2a0a0     08 4E 85 F1 | 	sub	fp, #8
2a0a4                 | LR__4285
2a0a4     A7 F0 03 F6 | 	mov	ptra, fp
2a0a8     B2 00 A0 FD | 	call	#popregs_
2a0ac                 | _fatfs_cc_dir_register_ret
2a0ac     2D 00 64 FD | 	ret
2a0b0                 | 
2a0b0                 | _fatfs_cc_dir_remove
2a0b0     05 4A 05 F6 | 	mov	COUNT_, #5
2a0b4     A8 00 A0 FD | 	call	#pushregs_
2a0b8     09 1F 02 F6 | 	mov	local01, arg01
2a0bc     0F 21 02 FB | 	rdlong	local02, local01
2a0c0     10 1E 06 F1 | 	add	local01, #16
2a0c4     0F 23 02 FB | 	rdlong	local03, local01
2a0c8     1C 1E 06 F1 | 	add	local01, #28
2a0cc     0F 15 02 FB | 	rdlong	arg02, local01
2a0d0     2C 1E 86 F1 | 	sub	local01, #44
2a0d4     FF FF 7F FF 
2a0d8     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
2a0dc     00 24 06 A6 |  if_e	mov	local04, #0
2a0e0     18 00 90 AD |  if_e	jmp	#LR__4290
2a0e4     0F 13 02 F6 | 	mov	arg01, local01
2a0e8     2C 1E 06 F1 | 	add	local01, #44
2a0ec     0F 15 02 FB | 	rdlong	arg02, local01
2a0f0     2C 1E 86 F1 | 	sub	local01, #44
2a0f4     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
2a0f8     FD 24 02 F6 | 	mov	local04, result1
2a0fc                 | LR__4290
2a0fc     12 27 0A F6 | 	mov	local05, local04 wz
2a100     64 00 90 5D |  if_ne	jmp	#LR__4293
2a104                 | ' 		do {
2a104                 | LR__4291
2a104     18 1E 06 F1 | 	add	local01, #24
2a108     0F 15 02 FB | 	rdlong	arg02, local01
2a10c     18 1E 86 F1 | 	sub	local01, #24
2a110     10 13 02 F6 | 	mov	arg01, local02
2a114     04 E5 BF FD | 	call	#_fatfs_cc_move_window
2a118     FD 26 0A F6 | 	mov	local05, result1 wz
2a11c     40 00 90 5D |  if_ne	jmp	#LR__4292
2a120     1C 1E 06 F1 | 	add	local01, #28
2a124     0F 25 02 FB | 	rdlong	local04, local01
2a128     12 CB 49 FC | 	wrbyte	#229, local04
2a12c     03 20 06 F1 | 	add	local02, #3
2a130     10 03 48 FC | 	wrbyte	#1, local02
2a134     03 20 86 F1 | 	sub	local02, #3
2a138     0C 1E 86 F1 | 	sub	local01, #12
2a13c     0F 25 02 FB | 	rdlong	local04, local01
2a140     10 1E 86 F1 | 	sub	local01, #16
2a144     11 25 12 F2 | 	cmp	local04, local03 wc
2a148     14 00 90 3D |  if_ae	jmp	#LR__4292
2a14c     0F 13 02 F6 | 	mov	arg01, local01
2a150     00 14 06 F6 | 	mov	arg02, #0
2a154     90 EF BF FD | 	call	#_fatfs_cc_dir_next
2a158     FD 26 0A F6 | 	mov	local05, result1 wz
2a15c     A4 FF 9F AD |  if_e	jmp	#LR__4291
2a160                 | LR__4292
2a160     04 26 0E F2 | 	cmp	local05, #4 wz
2a164     02 26 06 A6 |  if_e	mov	local05, #2
2a168                 | LR__4293
2a168                 | ' 	}
2a168                 | ' #line 2590 "ff.c"
2a168                 | ' 	return res;
2a168     13 FB 01 F6 | 	mov	result1, local05
2a16c     A7 F0 03 F6 | 	mov	ptra, fp
2a170     B2 00 A0 FD | 	call	#popregs_
2a174                 | _fatfs_cc_dir_remove_ret
2a174     2D 00 64 FD | 	ret
2a178                 | 
2a178                 | _fatfs_cc_get_fileinfo
2a178     0F 4A 05 F6 | 	mov	COUNT_, #15
2a17c     A8 00 A0 FD | 	call	#pushregs_
2a180     09 1F 02 F6 | 	mov	local01, arg01
2a184     0A 21 02 F6 | 	mov	local02, arg02
2a188     0F 23 02 FB | 	rdlong	local03, local01
2a18c     1C 20 06 F1 | 	add	local02, #28
2a190     10 01 48 FC | 	wrbyte	#0, local02
2a194     1C 20 86 F1 | 	sub	local02, #28
2a198     18 1E 06 F1 | 	add	local01, #24
2a19c     0F 25 0A FB | 	rdlong	local04, local01 wz
2a1a0     18 1E 86 F1 | 	sub	local01, #24
2a1a4     90 03 90 AD |  if_e	jmp	#LR__4314
2a1a8     2C 1E 06 F1 | 	add	local01, #44
2a1ac     0F 25 02 FB | 	rdlong	local04, local01
2a1b0     2C 1E 86 F1 | 	sub	local01, #44
2a1b4     FF FF 7F FF 
2a1b8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
2a1bc     D8 00 90 AD |  if_e	jmp	#LR__4303
2a1c0     00 26 06 F6 | 	mov	local05, #0
2a1c4     00 28 06 F6 | 	mov	local06, #0
2a1c8     00 2A 06 F6 | 	mov	local07, #0
2a1cc                 | ' 			si = di = 0;
2a1cc                 | ' 			hs = 0;
2a1cc                 | ' 			while (fs->lfnbuf[si] != 0) {
2a1cc                 | LR__4300
2a1cc     0C 22 06 F1 | 	add	local03, #12
2a1d0     11 25 02 FB | 	rdlong	local04, local03
2a1d4     0C 22 86 F1 | 	sub	local03, #12
2a1d8     14 2D 02 F6 | 	mov	local08, local06
2a1dc     01 2C 66 F0 | 	shl	local08, #1
2a1e0     12 2D 02 F1 | 	add	local08, local04
2a1e4     16 25 EA FA | 	rdword	local04, local08 wz
2a1e8     90 00 90 AD |  if_e	jmp	#LR__4302
2a1ec     0C 22 06 F1 | 	add	local03, #12
2a1f0     11 2F 02 FB | 	rdlong	local09, local03
2a1f4     0C 22 86 F1 | 	sub	local03, #12
2a1f8     14 31 02 F6 | 	mov	local10, local06
2a1fc     01 30 66 F0 | 	shl	local10, #1
2a200     17 31 02 F1 | 	add	local10, local09
2a204     18 33 E2 FA | 	rdword	local11, local10
2a208     15 25 02 F6 | 	mov	local04, local07
2a20c     0F 24 4E F7 | 	zerox	local04, #15 wz
2a210     01 28 06 F1 | 	add	local06, #1
2a214     24 00 90 5D |  if_ne	jmp	#LR__4301
2a218     19 35 32 F9 | 	getword	local12, local11, #0
2a21c     6C 00 00 FF 
2a220     00 34 16 F2 | 	cmp	local12, ##55296 wc
2a224     14 00 90 CD |  if_b	jmp	#LR__4301
2a228     19 37 32 F9 | 	getword	local13, local11, #0
2a22c     70 00 00 FF 
2a230     00 36 16 F2 | 	cmp	local13, ##57344 wc
2a234     19 2B 02 C6 |  if_b	mov	local07, local11
2a238                 | ' 					hs = wc; continue;
2a238     90 FF 9F CD |  if_b	jmp	#LR__4300
2a23c                 | LR__4301
2a23c     15 13 32 F9 | 	getword	arg01, local07, #0
2a240     10 12 66 F0 | 	shl	arg01, #16
2a244     19 33 32 F9 | 	getword	local11, local11, #0
2a248     19 13 42 F5 | 	or	arg01, local11
2a24c     13 15 02 F6 | 	mov	arg02, local05
2a250     1C 20 06 F1 | 	add	local02, #28
2a254     10 15 02 F1 | 	add	arg02, local02
2a258     FF 16 06 F6 | 	mov	arg03, #255
2a25c     13 17 82 F1 | 	sub	arg03, local05
2a260     1C 20 86 F1 | 	sub	local02, #28
2a264     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
2a268     FD 38 0A F6 | 	mov	local14, result1 wz
2a26c     00 26 06 A6 |  if_e	mov	local05, #0
2a270     1C 27 02 51 |  if_ne	add	local05, local14
2a274     00 2A 06 56 |  if_ne	mov	local07, #0
2a278     50 FF 9F 5D |  if_ne	jmp	#LR__4300
2a27c                 | LR__4302
2a27c     15 25 02 F6 | 	mov	local04, local07
2a280     0F 24 4E F7 | 	zerox	local04, #15 wz
2a284     00 26 06 56 |  if_ne	mov	local05, #0
2a288     1C 20 06 F1 | 	add	local02, #28
2a28c     10 27 02 F1 | 	add	local05, local02
2a290     13 01 48 FC | 	wrbyte	#0, local05
2a294     1C 20 86 F1 | 	sub	local02, #28
2a298                 | LR__4303
2a298     00 26 06 F6 | 	mov	local05, #0
2a29c     00 28 06 F6 | 	mov	local06, #0
2a2a0                 | ' 			fno->fname[di] = 0;
2a2a0                 | ' 		}
2a2a0                 | ' 	}
2a2a0                 | ' 
2a2a0                 | ' 	si = di = 0;
2a2a0                 | ' 	while (si < 11) {
2a2a0                 | LR__4304
2a2a0     0B 28 16 F2 | 	cmp	local06, #11 wc
2a2a4     20 01 90 3D |  if_ae	jmp	#LR__4307
2a2a8     1C 1E 06 F1 | 	add	local01, #28
2a2ac     0F 2F 02 FB | 	rdlong	local09, local01
2a2b0     1C 1E 86 F1 | 	sub	local01, #28
2a2b4     14 31 02 F6 | 	mov	local10, local06
2a2b8     17 31 02 F1 | 	add	local10, local09
2a2bc     18 33 C2 FA | 	rdbyte	local11, local10
2a2c0     19 25 32 F9 | 	getword	local04, local11, #0
2a2c4     20 24 0E F2 | 	cmp	local04, #32 wz
2a2c8     01 28 06 F1 | 	add	local06, #1
2a2cc     D0 FF 9F AD |  if_e	jmp	#LR__4304
2a2d0     19 25 32 F9 | 	getword	local04, local11, #0
2a2d4     05 24 0E F2 | 	cmp	local04, #5 wz
2a2d8     E5 32 06 A6 |  if_e	mov	local11, #229
2a2dc     09 28 0E F2 | 	cmp	local06, #9 wz
2a2e0     20 00 90 5D |  if_ne	jmp	#LR__4305
2a2e4     0C 26 16 F2 | 	cmp	local05, #12 wc
2a2e8     18 00 90 3D |  if_ae	jmp	#LR__4305
2a2ec     13 37 02 F6 | 	mov	local13, local05
2a2f0     0C 20 06 F1 | 	add	local02, #12
2a2f4     10 37 02 F1 | 	add	local13, local02
2a2f8     1B 5D 48 FC | 	wrbyte	#46, local13
2a2fc     01 26 06 F1 | 	add	local05, #1
2a300     0C 20 86 F1 | 	sub	local02, #12
2a304                 | LR__4305
2a304     19 13 32 F9 | 	getword	arg01, local11, #0
2a308     07 12 4E F7 | 	zerox	arg01, #7 wz
2a30c     00 FA 05 56 |  if_ne	mov	result1, #0
2a310                 | ' 
2a310                 | ' 	return 0;
2a310     00 FA 05 A6 |  if_e	mov	result1, #0
2a314     00 FA 0D F2 | 	cmp	result1, #0 wz
2a318     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
2a31c     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
2a320     50 00 90 AD |  if_e	jmp	#LR__4306
2a324     1C 1E 06 F1 | 	add	local01, #28
2a328     0F 31 02 FB | 	rdlong	local10, local01
2a32c     1C 1E 86 F1 | 	sub	local01, #28
2a330     14 2D 02 F6 | 	mov	local08, local06
2a334     18 2D 02 F1 | 	add	local08, local10
2a338     16 13 CA FA | 	rdbyte	arg01, local08 wz
2a33c     00 FA 05 56 |  if_ne	mov	result1, #0
2a340                 | ' 
2a340                 | ' 	return 0;
2a340     00 FA 05 A6 |  if_e	mov	result1, #0
2a344     00 FA 0D F2 | 	cmp	result1, #0 wz
2a348     28 00 90 AD |  if_e	jmp	#LR__4306
2a34c     19 33 32 F9 | 	getword	local11, local11, #0
2a350     08 32 66 F0 | 	shl	local11, #8
2a354     1C 1E 06 F1 | 	add	local01, #28
2a358     0F 39 02 FB | 	rdlong	local14, local01
2a35c     1C 1E 86 F1 | 	sub	local01, #28
2a360     14 2F 02 F6 | 	mov	local09, local06
2a364     1C 2F 02 F1 | 	add	local09, local14
2a368     17 35 C2 FA | 	rdbyte	local12, local09
2a36c     1A 33 42 F5 | 	or	local11, local12
2a370     01 28 06 F1 | 	add	local06, #1
2a374                 | LR__4306
2a374     19 13 02 F6 | 	mov	arg01, local11
2a378     01 00 00 FF 
2a37c     52 15 06 F6 | 	mov	arg02, ##850
2a380     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2a384     FD 32 02 F6 | 	mov	local11, result1
2a388     19 25 02 F6 | 	mov	local04, local11
2a38c     0F 24 4E F7 | 	zerox	local04, #15 wz
2a390     00 26 06 A6 |  if_e	mov	local05, #0
2a394     30 00 90 AD |  if_e	jmp	#LR__4307
2a398     19 13 32 F9 | 	getword	arg01, local11, #0
2a39c     13 15 02 F6 | 	mov	arg02, local05
2a3a0     0C 20 06 F1 | 	add	local02, #12
2a3a4     10 15 02 F1 | 	add	arg02, local02
2a3a8     0C 16 06 F6 | 	mov	arg03, #12
2a3ac     13 17 82 F1 | 	sub	arg03, local05
2a3b0     0C 20 86 F1 | 	sub	local02, #12
2a3b4     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2a3b8     FD 38 0A F6 | 	mov	local14, result1 wz
2a3bc     00 26 06 A6 |  if_e	mov	local05, #0
2a3c0     1C 27 02 51 |  if_ne	add	local05, local14
2a3c4     D8 FE 9F 5D |  if_ne	jmp	#LR__4304
2a3c8                 | LR__4307
2a3c8     13 25 02 F6 | 	mov	local04, local05
2a3cc     0C 20 06 F1 | 	add	local02, #12
2a3d0     10 25 02 F1 | 	add	local04, local02
2a3d4     12 01 48 FC | 	wrbyte	#0, local04
2a3d8     10 20 06 F1 | 	add	local02, #16
2a3dc     10 25 CA FA | 	rdbyte	local04, local02 wz
2a3e0     1C 20 86 F1 | 	sub	local02, #28
2a3e4     F8 00 90 5D |  if_ne	jmp	#LR__4313
2a3e8     00 26 0E F2 | 	cmp	local05, #0 wz
2a3ec     1C 00 90 5D |  if_ne	jmp	#LR__4308
2a3f0     13 37 02 F6 | 	mov	local13, local05
2a3f4     1C 20 06 F1 | 	add	local02, #28
2a3f8     10 37 02 F1 | 	add	local13, local02
2a3fc     1B 7F 48 FC | 	wrbyte	#63, local13
2a400     01 26 06 F1 | 	add	local05, #1
2a404     1C 20 86 F1 | 	sub	local02, #28
2a408     A4 00 90 FD | 	jmp	#LR__4312
2a40c                 | LR__4308
2a40c                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2a40c     00 26 06 F6 | 	mov	local05, #0
2a410     00 28 06 F6 | 	mov	local06, #0
2a414     08 3A 06 F6 | 	mov	local15, #8
2a418                 | LR__4309
2a418     14 25 02 F6 | 	mov	local04, local06
2a41c     0C 20 06 F1 | 	add	local02, #12
2a420     10 25 02 F1 | 	add	local04, local02
2a424     12 37 CA FA | 	rdbyte	local13, local04 wz
2a428     0C 20 86 F1 | 	sub	local02, #12
2a42c     80 00 90 AD |  if_e	jmp	#LR__4311
2a430     14 2D 02 F6 | 	mov	local08, local06
2a434     0C 20 06 F1 | 	add	local02, #12
2a438     10 2D 02 F1 | 	add	local08, local02
2a43c     16 33 C2 FA | 	rdbyte	local11, local08
2a440     19 39 32 F9 | 	getword	local14, local11, #0
2a444     2E 38 0E F2 | 	cmp	local14, #46 wz
2a448     0C 20 86 F1 | 	sub	local02, #12
2a44c     10 3A 06 A6 |  if_e	mov	local15, #16
2a450     19 39 32 F9 | 	getword	local14, local11, #0
2a454     41 38 16 F2 | 	cmp	local14, #65 wc
2a458     30 00 90 CD |  if_b	jmp	#LR__4310
2a45c     19 2D 32 F9 | 	getword	local08, local11, #0
2a460     5B 2C 16 F2 | 	cmp	local08, #91 wc
2a464     24 00 90 3D |  if_ae	jmp	#LR__4310
2a468     1C 1E 06 F1 | 	add	local01, #28
2a46c     0F 2F 02 FB | 	rdlong	local09, local01
2a470     1C 1E 86 F1 | 	sub	local01, #28
2a474     0C 2E 06 F1 | 	add	local09, #12
2a478     17 31 C2 FA | 	rdbyte	local10, local09
2a47c     1D 39 E2 F8 | 	getbyte	local14, local15, #0
2a480     1C 31 CA F7 | 	test	local10, local14 wz
2a484     19 33 32 59 |  if_ne	getword	local11, local11, #0
2a488     20 32 06 51 |  if_ne	add	local11, #32
2a48c                 | LR__4310
2a48c     13 39 02 F6 | 	mov	local14, local05
2a490     1C 20 06 F1 | 	add	local02, #28
2a494     10 39 02 F1 | 	add	local14, local02
2a498     19 33 32 F9 | 	getword	local11, local11, #0
2a49c     1C 33 42 FC | 	wrbyte	local11, local14
2a4a0     01 28 06 F1 | 	add	local06, #1
2a4a4     01 26 06 F1 | 	add	local05, #1
2a4a8     1C 20 86 F1 | 	sub	local02, #28
2a4ac     68 FF 9F FD | 	jmp	#LR__4309
2a4b0                 | LR__4311
2a4b0                 | LR__4312
2a4b0     1C 20 06 F1 | 	add	local02, #28
2a4b4     10 27 02 F1 | 	add	local05, local02
2a4b8     13 01 48 FC | 	wrbyte	#0, local05
2a4bc     1C 1E 06 F1 | 	add	local01, #28
2a4c0     0F 25 02 FB | 	rdlong	local04, local01
2a4c4     1C 1E 86 F1 | 	sub	local01, #28
2a4c8     0C 24 06 F1 | 	add	local04, #12
2a4cc     12 37 CA FA | 	rdbyte	local13, local04 wz
2a4d0     1C 20 86 F1 | 	sub	local02, #28
2a4d4     0C 20 06 A1 |  if_e	add	local02, #12
2a4d8     10 01 48 AC |  if_e	wrbyte	#0, local02
2a4dc     0C 20 86 A1 |  if_e	sub	local02, #12
2a4e0                 | LR__4313
2a4e0     1C 1E 06 F1 | 	add	local01, #28
2a4e4     0F 35 02 FB | 	rdlong	local12, local01
2a4e8     0B 34 06 F1 | 	add	local12, #11
2a4ec     1A 25 C2 FA | 	rdbyte	local04, local12
2a4f0     3F 24 06 F5 | 	and	local04, #63
2a4f4     08 20 06 F1 | 	add	local02, #8
2a4f8     10 25 42 FC | 	wrbyte	local04, local02
2a4fc     08 20 86 F1 | 	sub	local02, #8
2a500     0F 13 02 FB | 	rdlong	arg01, local01
2a504     1C 12 06 F1 | 	add	arg01, #28
2a508                 | ' {
2a508                 | ' 
2a508                 | ' 	return *((DWORD*)ptr);
2a508     09 FB 01 FB | 	rdlong	result1, arg01
2a50c     10 FB 61 FC | 	wrlong	result1, local02
2a510     0F 13 02 FB | 	rdlong	arg01, local01
2a514     16 12 06 F1 | 	add	arg01, #22
2a518                 | ' {
2a518                 | ' 
2a518                 | ' 	return *((WORD*)ptr);
2a518     09 FB E1 FA | 	rdword	result1, arg01
2a51c     06 20 06 F1 | 	add	local02, #6
2a520     10 FB 51 FC | 	wrword	result1, local02
2a524     0F 13 02 FB | 	rdlong	arg01, local01
2a528     18 12 06 F1 | 	add	arg01, #24
2a52c                 | ' {
2a52c                 | ' 
2a52c                 | ' 	return *((WORD*)ptr);
2a52c     09 FB E1 FA | 	rdword	result1, arg01
2a530     02 20 86 F1 | 	sub	local02, #2
2a534     10 FB 51 FC | 	wrword	result1, local02
2a538                 | LR__4314
2a538     A7 F0 03 F6 | 	mov	ptra, fp
2a53c     B2 00 A0 FD | 	call	#popregs_
2a540                 | _fatfs_cc_get_fileinfo_ret
2a540     2D 00 64 FD | 	ret
2a544                 | 
2a544                 | _fatfs_cc_create_name
2a544     0D 4A 05 F6 | 	mov	COUNT_, #13
2a548     A8 00 A0 FD | 	call	#pushregs_
2a54c     34 F0 07 F1 | 	add	ptra, #52
2a550     04 4E 05 F1 | 	add	fp, #4
2a554     A7 12 62 FC | 	wrlong	arg01, fp
2a558     04 4E 05 F1 | 	add	fp, #4
2a55c     A7 14 62 FC | 	wrlong	arg02, fp
2a560     0A FB 01 FB | 	rdlong	result1, arg02
2a564     28 4E 05 F1 | 	add	fp, #40
2a568     A7 FA 61 FC | 	wrlong	result1, fp
2a56c     2C 4E 85 F1 | 	sub	fp, #44
2a570     A7 FA 01 FB | 	rdlong	result1, fp
2a574     FD 1E 02 FB | 	rdlong	local01, result1
2a578     0C 1E 06 F1 | 	add	local01, #12
2a57c     0F 21 02 FB | 	rdlong	local02, local01
2a580     14 4E 05 F1 | 	add	fp, #20
2a584     A7 20 62 FC | 	wrlong	local02, fp
2a588     14 4E 05 F1 | 	add	fp, #20
2a58c     A7 00 68 FC | 	wrlong	#0, fp
2a590     2C 4E 85 F1 | 	sub	fp, #44
2a594                 | ' 
2a594                 | ' 
2a594                 | ' 
2a594                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2a594                 | ' 	for (;;) {
2a594                 | LR__4320
2a594     30 4E 05 F1 | 	add	fp, #48
2a598     A7 12 02 F6 | 	mov	arg01, fp
2a59c     30 4E 85 F1 | 	sub	fp, #48
2a5a0     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2a5a4     1C 4E 05 F1 | 	add	fp, #28
2a5a8     A7 FA 61 FC | 	wrlong	result1, fp
2a5ac     1C 4E 85 F1 | 	sub	fp, #28
2a5b0     FF FF 7F FF 
2a5b4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2a5b8     06 FA 05 A6 |  if_e	mov	result1, #6
2a5bc     74 08 90 AD |  if_e	jmp	#LR__4360
2a5c0     1C 4E 05 F1 | 	add	fp, #28
2a5c4     A7 1E 02 FB | 	rdlong	local01, fp
2a5c8     1C 4E 85 F1 | 	sub	fp, #28
2a5cc     80 00 00 FF 
2a5d0     00 1E 16 F2 | 	cmp	local01, ##65536 wc
2a5d4     3C 00 90 CD |  if_b	jmp	#LR__4321
2a5d8     18 4E 05 F1 | 	add	fp, #24
2a5dc     A7 22 02 FB | 	rdlong	local03, fp
2a5e0     14 4E 05 F1 | 	add	fp, #20
2a5e4     A7 1E 02 FB | 	rdlong	local01, fp
2a5e8     0F 25 02 F6 | 	mov	local04, local01
2a5ec     01 24 06 F1 | 	add	local04, #1
2a5f0     A7 24 62 FC | 	wrlong	local04, fp
2a5f4     01 1E 66 F0 | 	shl	local01, #1
2a5f8     11 1F 02 F1 | 	add	local01, local03
2a5fc     10 4E 85 F1 | 	sub	fp, #16
2a600     A7 26 02 FB | 	rdlong	local05, fp
2a604     1C 4E 85 F1 | 	sub	fp, #28
2a608     13 29 02 F6 | 	mov	local06, local05
2a60c     10 28 46 F0 | 	shr	local06, #16
2a610     0F 29 52 FC | 	wrword	local06, local01
2a614                 | LR__4321
2a614     1C 4E 05 F1 | 	add	fp, #28
2a618     A7 1E 02 FB | 	rdlong	local01, fp
2a61c     08 4E 85 F1 | 	sub	fp, #8
2a620     A7 1E 52 FC | 	wrword	local01, fp
2a624     A7 1E E2 FA | 	rdword	local01, fp
2a628     14 4E 85 F1 | 	sub	fp, #20
2a62c     20 1E 16 F2 | 	cmp	local01, #32 wc
2a630     B0 00 90 CD |  if_b	jmp	#LR__4323
2a634     14 4E 05 F1 | 	add	fp, #20
2a638     A7 1E E2 FA | 	rdword	local01, fp
2a63c     14 4E 85 F1 | 	sub	fp, #20
2a640     2F 1E 0E F2 | 	cmp	local01, #47 wz
2a644     14 4E 05 51 |  if_ne	add	fp, #20
2a648     A7 24 E2 5A |  if_ne	rdword	local04, fp
2a64c     14 4E 85 51 |  if_ne	sub	fp, #20
2a650     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
2a654     8C 00 90 AD |  if_e	jmp	#LR__4323
2a658     14 4E 05 F1 | 	add	fp, #20
2a65c     A7 12 E2 FA | 	rdword	arg01, fp
2a660     14 4E 85 F1 | 	sub	fp, #20
2a664     80 12 16 F2 | 	cmp	arg01, #128 wc
2a668     24 00 90 3D |  if_ae	jmp	#LR__4322
2a66c     82 01 00 FF 
2a670     A8 13 06 F6 | 	mov	arg01, ##@LR__4982
2a674     14 4E 05 F1 | 	add	fp, #20
2a678     A7 14 E2 FA | 	rdword	arg02, fp
2a67c     14 4E 85 F1 | 	sub	fp, #20
2a680     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2a684     00 FA 0D F2 | 	cmp	result1, #0 wz
2a688     06 FA 05 56 |  if_ne	mov	result1, #6
2a68c     A4 07 90 5D |  if_ne	jmp	#LR__4360
2a690                 | LR__4322
2a690     2C 4E 05 F1 | 	add	fp, #44
2a694     A7 28 02 FB | 	rdlong	local06, fp
2a698     2C 4E 85 F1 | 	sub	fp, #44
2a69c     FF 28 16 F2 | 	cmp	local06, #255 wc
2a6a0     06 FA 05 36 |  if_ae	mov	result1, #6
2a6a4     8C 07 90 3D |  if_ae	jmp	#LR__4360
2a6a8     18 4E 05 F1 | 	add	fp, #24
2a6ac     A7 22 02 FB | 	rdlong	local03, fp
2a6b0     14 4E 05 F1 | 	add	fp, #20
2a6b4     A7 20 02 FB | 	rdlong	local02, fp
2a6b8     10 25 02 F6 | 	mov	local04, local02
2a6bc     01 24 06 F1 | 	add	local04, #1
2a6c0     A7 24 62 FC | 	wrlong	local04, fp
2a6c4     10 1F 02 F6 | 	mov	local01, local02
2a6c8     01 1E 66 F0 | 	shl	local01, #1
2a6cc     11 1F 02 F1 | 	add	local01, local03
2a6d0     18 4E 85 F1 | 	sub	fp, #24
2a6d4     A7 28 E2 FA | 	rdword	local06, fp
2a6d8     14 4E 85 F1 | 	sub	fp, #20
2a6dc     0F 29 52 FC | 	wrword	local06, local01
2a6e0     B0 FE 9F FD | 	jmp	#LR__4320
2a6e4                 | LR__4323
2a6e4     14 4E 05 F1 | 	add	fp, #20
2a6e8     A7 2A E2 FA | 	rdword	local07, fp
2a6ec     14 4E 85 F1 | 	sub	fp, #20
2a6f0     20 2A 16 F2 | 	cmp	local07, #32 wc
2a6f4     10 4E 05 C1 |  if_b	add	fp, #16
2a6f8     A7 08 48 CC |  if_b	wrbyte	#4, fp
2a6fc     10 4E 85 C1 |  if_b	sub	fp, #16
2a700     74 00 90 CD |  if_b	jmp	#LR__4328
2a704     97 24 48 FB | 	callpa	#(@LR__4326-@LR__4324)>>2,fcache_load_ptr_
2a708                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2a708                 | LR__4324
2a708     30 4E 05 F1 | 	add	fp, #48
2a70c     A7 24 02 FB | 	rdlong	local04, fp
2a710     30 4E 85 F1 | 	sub	fp, #48
2a714     12 2B C2 FA | 	rdbyte	local07, local04
2a718     2F 2A 0E F2 | 	cmp	local07, #47 wz
2a71c     18 00 90 AD |  if_e	jmp	#LR__4325
2a720     30 4E 05 F1 | 	add	fp, #48
2a724     A7 24 02 FB | 	rdlong	local04, fp
2a728     30 4E 85 F1 | 	sub	fp, #48
2a72c     12 21 C2 FA | 	rdbyte	local02, local04
2a730     5C 20 0E F2 | 	cmp	local02, #92 wz
2a734     18 00 90 5D |  if_ne	jmp	#LR__4327
2a738                 | LR__4325
2a738     30 4E 05 F1 | 	add	fp, #48
2a73c     A7 1E 02 FB | 	rdlong	local01, fp
2a740     01 1E 06 F1 | 	add	local01, #1
2a744     A7 1E 62 FC | 	wrlong	local01, fp
2a748     30 4E 85 F1 | 	sub	fp, #48
2a74c     B8 FF 9F FD | 	jmp	#LR__4324
2a750                 | LR__4326
2a750                 | LR__4327
2a750     10 4E 05 F1 | 	add	fp, #16
2a754     A7 00 48 FC | 	wrbyte	#0, fp
2a758     20 4E 05 F1 | 	add	fp, #32
2a75c     A7 28 02 FB | 	rdlong	local06, fp
2a760     30 4E 85 F1 | 	sub	fp, #48
2a764     14 2B C2 FA | 	rdbyte	local07, local06
2a768     20 2A 16 F2 | 	cmp	local07, #32 wc
2a76c     10 4E 05 C1 |  if_b	add	fp, #16
2a770     A7 08 48 CC |  if_b	wrbyte	#4, fp
2a774     10 4E 85 C1 |  if_b	sub	fp, #16
2a778                 | LR__4328
2a778     08 4E 05 F1 | 	add	fp, #8
2a77c     A7 2A 02 FB | 	rdlong	local07, fp
2a780     28 4E 05 F1 | 	add	fp, #40
2a784     A7 1E 02 FB | 	rdlong	local01, fp
2a788     30 4E 85 F1 | 	sub	fp, #48
2a78c     15 1F 62 FC | 	wrlong	local01, local07
2a790     97 38 48 FB | 	callpa	#(@LR__4330-@LR__4329)>>2,fcache_load_ptr_
2a794                 | ' 	}
2a794                 | ' 	*path = p;
2a794                 | ' #line 2862 "ff.c"
2a794                 | ' 	while (di) {
2a794                 | LR__4329
2a794     2C 4E 05 F1 | 	add	fp, #44
2a798     A7 2A 0A FB | 	rdlong	local07, fp wz
2a79c     2C 4E 85 F1 | 	sub	fp, #44
2a7a0     60 00 90 AD |  if_e	jmp	#LR__4331
2a7a4     18 4E 05 F1 | 	add	fp, #24
2a7a8     A7 28 02 FB | 	rdlong	local06, fp
2a7ac     14 4E 05 F1 | 	add	fp, #20
2a7b0     A7 24 02 FB | 	rdlong	local04, fp
2a7b4     01 24 86 F1 | 	sub	local04, #1
2a7b8     01 24 66 F0 | 	shl	local04, #1
2a7bc     14 25 02 F1 | 	add	local04, local06
2a7c0     12 29 E2 FA | 	rdword	local06, local04
2a7c4     18 4E 85 F1 | 	sub	fp, #24
2a7c8     A7 28 52 FC | 	wrword	local06, fp
2a7cc     A7 2A E2 FA | 	rdword	local07, fp
2a7d0     14 4E 85 F1 | 	sub	fp, #20
2a7d4     20 2A 0E F2 | 	cmp	local07, #32 wz
2a7d8     14 4E 05 51 |  if_ne	add	fp, #20
2a7dc     A7 1E E2 5A |  if_ne	rdword	local01, fp
2a7e0     14 4E 85 51 |  if_ne	sub	fp, #20
2a7e4     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
2a7e8     18 00 90 5D |  if_ne	jmp	#LR__4331
2a7ec     2C 4E 05 F1 | 	add	fp, #44
2a7f0     A7 1E 02 FB | 	rdlong	local01, fp
2a7f4     01 1E 86 F1 | 	sub	local01, #1
2a7f8     A7 1E 62 FC | 	wrlong	local01, fp
2a7fc     2C 4E 85 F1 | 	sub	fp, #44
2a800     90 FF 9F FD | 	jmp	#LR__4329
2a804                 | LR__4330
2a804                 | LR__4331
2a804     18 4E 05 F1 | 	add	fp, #24
2a808     A7 2C 02 FB | 	rdlong	local08, fp
2a80c     14 4E 05 F1 | 	add	fp, #20
2a810     A7 24 02 FB | 	rdlong	local04, fp
2a814     01 24 66 F0 | 	shl	local04, #1
2a818     16 25 02 F1 | 	add	local04, local08
2a81c     12 01 58 FC | 	wrword	#0, local04
2a820     A7 2A 0A FB | 	rdlong	local07, fp wz
2a824     2C 4E 85 F1 | 	sub	fp, #44
2a828     06 FA 05 A6 |  if_e	mov	result1, #6
2a82c     04 06 90 AD |  if_e	jmp	#LR__4360
2a830                 | ' 
2a830                 | ' 
2a830                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2a830     28 4E 05 F1 | 	add	fp, #40
2a834     A7 00 68 FC | 	wrlong	#0, fp
2a838     28 4E 85 F1 | 	sub	fp, #40
2a83c     97 22 48 FB | 	callpa	#(@LR__4333-@LR__4332)>>2,fcache_load_ptr_
2a840                 | LR__4332
2a840     18 4E 05 F1 | 	add	fp, #24
2a844     A7 2E 02 FB | 	rdlong	local09, fp
2a848     10 4E 05 F1 | 	add	fp, #16
2a84c     A7 30 02 FB | 	rdlong	local10, fp
2a850     28 4E 85 F1 | 	sub	fp, #40
2a854     01 30 66 F0 | 	shl	local10, #1
2a858     17 31 02 F1 | 	add	local10, local09
2a85c     18 33 E2 FA | 	rdword	local11, local10
2a860     20 32 0E F2 | 	cmp	local11, #32 wz
2a864     1C 00 90 5D |  if_ne	jmp	#LR__4334
2a868     28 4E 05 F1 | 	add	fp, #40
2a86c     A7 34 02 FB | 	rdlong	local12, fp
2a870     1A 27 02 F6 | 	mov	local05, local12
2a874     01 26 06 F1 | 	add	local05, #1
2a878     A7 26 62 FC | 	wrlong	local05, fp
2a87c     28 4E 85 F1 | 	sub	fp, #40
2a880     BC FF 9F FD | 	jmp	#LR__4332
2a884                 | LR__4333
2a884                 | LR__4334
2a884     28 4E 05 F1 | 	add	fp, #40
2a888     A7 2A 02 FB | 	rdlong	local07, fp
2a88c     28 4E 85 F1 | 	sub	fp, #40
2a890     01 2A 16 F2 | 	cmp	local07, #1 wc
2a894     28 00 90 3D |  if_ae	jmp	#LR__4335
2a898     18 4E 05 F1 | 	add	fp, #24
2a89c     A7 22 02 FB | 	rdlong	local03, fp
2a8a0     10 4E 05 F1 | 	add	fp, #16
2a8a4     A7 2E 02 FB | 	rdlong	local09, fp
2a8a8     28 4E 85 F1 | 	sub	fp, #40
2a8ac     01 2E 66 F0 | 	shl	local09, #1
2a8b0     11 2F 02 F1 | 	add	local09, local03
2a8b4     17 1F E2 FA | 	rdword	local01, local09
2a8b8     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a8bc     14 00 90 5D |  if_ne	jmp	#LR__4336
2a8c0                 | LR__4335
2a8c0     10 4E 05 F1 | 	add	fp, #16
2a8c4     A7 2A C2 FA | 	rdbyte	local07, fp
2a8c8     03 2A 46 F5 | 	or	local07, #3
2a8cc     A7 2A 42 FC | 	wrbyte	local07, fp
2a8d0     10 4E 85 F1 | 	sub	fp, #16
2a8d4                 | LR__4336
2a8d4     97 2C 48 FB | 	callpa	#(@LR__4338-@LR__4337)>>2,fcache_load_ptr_
2a8d8                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2a8d8                 | LR__4337
2a8d8     2C 4E 05 F1 | 	add	fp, #44
2a8dc     A7 2A 02 FB | 	rdlong	local07, fp
2a8e0     2C 4E 85 F1 | 	sub	fp, #44
2a8e4     01 2A 16 F2 | 	cmp	local07, #1 wc
2a8e8     44 00 90 CD |  if_b	jmp	#LR__4339
2a8ec     18 4E 05 F1 | 	add	fp, #24
2a8f0     A7 28 02 FB | 	rdlong	local06, fp
2a8f4     14 4E 05 F1 | 	add	fp, #20
2a8f8     A7 22 02 FB | 	rdlong	local03, fp
2a8fc     2C 4E 85 F1 | 	sub	fp, #44
2a900     01 22 86 F1 | 	sub	local03, #1
2a904     01 22 66 F0 | 	shl	local03, #1
2a908     14 23 02 F1 | 	add	local03, local06
2a90c     11 1F E2 FA | 	rdword	local01, local03
2a910     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a914     18 00 90 AD |  if_e	jmp	#LR__4339
2a918     2C 4E 05 F1 | 	add	fp, #44
2a91c     A7 1E 02 FB | 	rdlong	local01, fp
2a920     01 1E 86 F1 | 	sub	local01, #1
2a924     A7 1E 62 FC | 	wrlong	local01, fp
2a928     2C 4E 85 F1 | 	sub	fp, #44
2a92c     A8 FF 9F FD | 	jmp	#LR__4337
2a930                 | LR__4338
2a930                 | LR__4339
2a930     04 4E 05 F1 | 	add	fp, #4
2a934     A7 12 02 FB | 	rdlong	arg01, fp
2a938     04 4E 85 F1 | 	sub	fp, #4
2a93c     20 12 06 F1 | 	add	arg01, #32
2a940     20 14 06 F6 | 	mov	arg02, #32
2a944     0B 16 06 F6 | 	mov	arg03, #11
2a948     09 37 02 F6 | 	mov	local13, arg01
2a94c     98 00 A0 FD | 	call	#\builtin_bytefill_
2a950     1B FB 01 F6 | 	mov	result1, local13
2a954     0C 4E 05 F1 | 	add	fp, #12
2a958     A7 00 48 FC | 	wrbyte	#0, fp
2a95c     A7 2A C2 FA | 	rdbyte	local07, fp
2a960     14 4E 05 F1 | 	add	fp, #20
2a964     A7 2A 62 FC | 	wrlong	local07, fp
2a968     04 4E 05 F1 | 	add	fp, #4
2a96c     A7 10 68 FC | 	wrlong	#8, fp
2a970     24 4E 85 F1 | 	sub	fp, #36
2a974                 | ' 
2a974                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2a974                 | ' 	i = b = 0; ni = 8;
2a974                 | ' 	for (;;) {
2a974                 | LR__4340
2a974     18 4E 05 F1 | 	add	fp, #24
2a978     A7 22 02 FB | 	rdlong	local03, fp
2a97c     10 4E 05 F1 | 	add	fp, #16
2a980     A7 2E 02 FB | 	rdlong	local09, fp
2a984     17 25 02 F6 | 	mov	local04, local09
2a988     01 24 06 F1 | 	add	local04, #1
2a98c     A7 24 62 FC | 	wrlong	local04, fp
2a990     01 2E 66 F0 | 	shl	local09, #1
2a994     11 2F 02 F1 | 	add	local09, local03
2a998     17 29 E2 FA | 	rdword	local06, local09
2a99c     14 4E 85 F1 | 	sub	fp, #20
2a9a0     A7 28 52 FC | 	wrword	local06, fp
2a9a4     A7 2A EA FA | 	rdword	local07, fp wz
2a9a8     14 4E 85 F1 | 	sub	fp, #20
2a9ac     74 03 90 AD |  if_e	jmp	#LR__4356
2a9b0     14 4E 05 F1 | 	add	fp, #20
2a9b4     A7 2A E2 FA | 	rdword	local07, fp
2a9b8     14 4E 85 F1 | 	sub	fp, #20
2a9bc     20 2A 0E F2 | 	cmp	local07, #32 wz
2a9c0     30 00 90 AD |  if_e	jmp	#LR__4341
2a9c4     14 4E 05 F1 | 	add	fp, #20
2a9c8     A7 1E E2 FA | 	rdword	local01, fp
2a9cc     14 4E 85 F1 | 	sub	fp, #20
2a9d0     2E 1E 0E F2 | 	cmp	local01, #46 wz
2a9d4     34 00 90 5D |  if_ne	jmp	#LR__4342
2a9d8     28 4E 05 F1 | 	add	fp, #40
2a9dc     A7 24 02 FB | 	rdlong	local04, fp
2a9e0     04 4E 05 F1 | 	add	fp, #4
2a9e4     A7 30 02 FB | 	rdlong	local10, fp
2a9e8     2C 4E 85 F1 | 	sub	fp, #44
2a9ec     18 25 0A F2 | 	cmp	local04, local10 wz
2a9f0     18 00 90 AD |  if_e	jmp	#LR__4342
2a9f4                 | LR__4341
2a9f4     10 4E 05 F1 | 	add	fp, #16
2a9f8     A7 2A C2 FA | 	rdbyte	local07, fp
2a9fc     03 2A 46 F5 | 	or	local07, #3
2aa00     A7 2A 42 FC | 	wrbyte	local07, fp
2aa04     10 4E 85 F1 | 	sub	fp, #16
2aa08                 | ' 			cf |=  0x01  |  0x02 ;
2aa08                 | ' 			continue;
2aa08     68 FF 9F FD | 	jmp	#LR__4340
2aa0c                 | LR__4342
2aa0c     20 4E 05 F1 | 	add	fp, #32
2aa10     A7 2A 02 FB | 	rdlong	local07, fp
2aa14     04 4E 05 F1 | 	add	fp, #4
2aa18     A7 1E 02 FB | 	rdlong	local01, fp
2aa1c     24 4E 85 F1 | 	sub	fp, #36
2aa20     0F 2B 12 F2 | 	cmp	local07, local01 wc
2aa24     1C 00 90 3D |  if_ae	jmp	#LR__4343
2aa28     28 4E 05 F1 | 	add	fp, #40
2aa2c     A7 2C 02 FB | 	rdlong	local08, fp
2aa30     04 4E 05 F1 | 	add	fp, #4
2aa34     A7 30 02 FB | 	rdlong	local10, fp
2aa38     2C 4E 85 F1 | 	sub	fp, #44
2aa3c     18 2D 0A F2 | 	cmp	local08, local10 wz
2aa40     B0 00 90 5D |  if_ne	jmp	#LR__4345
2aa44                 | LR__4343
2aa44     24 4E 05 F1 | 	add	fp, #36
2aa48     A7 2A 02 FB | 	rdlong	local07, fp
2aa4c     24 4E 85 F1 | 	sub	fp, #36
2aa50     0B 2A 0E F2 | 	cmp	local07, #11 wz
2aa54     18 00 90 5D |  if_ne	jmp	#LR__4344
2aa58     10 4E 05 F1 | 	add	fp, #16
2aa5c     A7 2A C2 FA | 	rdbyte	local07, fp
2aa60     03 2A 46 F5 | 	or	local07, #3
2aa64     A7 2A 42 FC | 	wrbyte	local07, fp
2aa68     10 4E 85 F1 | 	sub	fp, #16
2aa6c                 | ' 				cf |=  0x01  |  0x02 ;
2aa6c                 | ' 				break;
2aa6c     B4 02 90 FD | 	jmp	#LR__4356
2aa70                 | LR__4344
2aa70     28 4E 05 F1 | 	add	fp, #40
2aa74     A7 2A 02 FB | 	rdlong	local07, fp
2aa78     04 4E 05 F1 | 	add	fp, #4
2aa7c     A7 1E 02 FB | 	rdlong	local01, fp
2aa80     2C 4E 85 F1 | 	sub	fp, #44
2aa84     0F 2B 0A F2 | 	cmp	local07, local01 wz
2aa88     10 4E 05 51 |  if_ne	add	fp, #16
2aa8c     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2aa90     03 2A 46 55 |  if_ne	or	local07, #3
2aa94     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2aa98     10 4E 85 51 |  if_ne	sub	fp, #16
2aa9c     28 4E 05 F1 | 	add	fp, #40
2aaa0     A7 2A 02 FB | 	rdlong	local07, fp
2aaa4     04 4E 05 F1 | 	add	fp, #4
2aaa8     A7 20 02 FB | 	rdlong	local02, fp
2aaac     2C 4E 85 F1 | 	sub	fp, #44
2aab0     10 2B 1A F2 | 	cmp	local07, local02 wcz
2aab4     6C 02 90 1D |  if_a	jmp	#LR__4356
2aab8     2C 4E 05 F1 | 	add	fp, #44
2aabc     A7 2A 02 FB | 	rdlong	local07, fp
2aac0     04 4E 85 F1 | 	sub	fp, #4
2aac4     A7 2A 62 FC | 	wrlong	local07, fp
2aac8     08 4E 85 F1 | 	sub	fp, #8
2aacc     A7 10 68 FC | 	wrlong	#8, fp
2aad0     04 4E 05 F1 | 	add	fp, #4
2aad4     A7 16 68 FC | 	wrlong	#11, fp
2aad8     18 4E 85 F1 | 	sub	fp, #24
2aadc     A7 32 C2 FA | 	rdbyte	local11, fp
2aae0     19 2B E2 F8 | 	getbyte	local07, local11, #0
2aae4     02 2A 66 F0 | 	shl	local07, #2
2aae8     A7 2A 42 FC | 	wrbyte	local07, fp
2aaec     0C 4E 85 F1 | 	sub	fp, #12
2aaf0                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2aaf0                 | ' 			continue;
2aaf0     80 FE 9F FD | 	jmp	#LR__4340
2aaf4                 | LR__4345
2aaf4     14 4E 05 F1 | 	add	fp, #20
2aaf8     A7 2A E2 FA | 	rdword	local07, fp
2aafc     14 4E 85 F1 | 	sub	fp, #20
2ab00     80 2A 16 F2 | 	cmp	local07, #128 wc
2ab04     6C 00 90 CD |  if_b	jmp	#LR__4347
2ab08     10 4E 05 F1 | 	add	fp, #16
2ab0c     A7 2A C2 FA | 	rdbyte	local07, fp
2ab10     02 2A 46 F5 | 	or	local07, #2
2ab14     A7 2A 42 FC | 	wrbyte	local07, fp
2ab18     04 4E 05 F1 | 	add	fp, #4
2ab1c     A7 12 E2 FA | 	rdword	arg01, fp
2ab20     14 4E 85 F1 | 	sub	fp, #20
2ab24     01 00 00 FF 
2ab28     52 15 06 F6 | 	mov	arg02, ##850
2ab2c     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2ab30     14 4E 05 F1 | 	add	fp, #20
2ab34     A7 FA 51 FC | 	wrword	result1, fp
2ab38     A7 2A E2 FA | 	rdword	local07, fp
2ab3c     14 4E 85 F1 | 	sub	fp, #20
2ab40     80 2A CE F7 | 	test	local07, #128 wz
2ab44     2C 00 90 AD |  if_e	jmp	#LR__4346
2ab48     14 4E 05 F1 | 	add	fp, #20
2ab4c     A7 20 E2 FA | 	rdword	local02, fp
2ab50     7F 20 06 F5 | 	and	local02, #127
2ab54     01 00 00 FF 
2ab58     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
2ab5c     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2ab60     10 2B C2 FA | 	rdbyte	local07, local02
2ab64     A7 2A 52 FC | 	wrword	local07, fp
2ab68     14 4E 85 F1 | 	sub	fp, #20
2ab6c     01 00 00 FF 
2ab70     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
2ab74                 | LR__4346
2ab74                 | LR__4347
2ab74     14 4E 05 F1 | 	add	fp, #20
2ab78     A7 2A E2 FA | 	rdword	local07, fp
2ab7c     14 4E 85 F1 | 	sub	fp, #20
2ab80     00 2B 16 F2 | 	cmp	local07, #256 wc
2ab84     88 00 90 CD |  if_b	jmp	#LR__4349
2ab88     24 4E 05 F1 | 	add	fp, #36
2ab8c     A7 2A 02 FB | 	rdlong	local07, fp
2ab90     01 2A 86 F1 | 	sub	local07, #1
2ab94     04 4E 85 F1 | 	sub	fp, #4
2ab98     A7 20 02 FB | 	rdlong	local02, fp
2ab9c     20 4E 85 F1 | 	sub	fp, #32
2aba0     15 21 12 F2 | 	cmp	local02, local07 wc
2aba4     2C 00 90 CD |  if_b	jmp	#LR__4348
2aba8     10 4E 05 F1 | 	add	fp, #16
2abac     A7 32 C2 FA | 	rdbyte	local11, fp
2abb0     19 2B E2 F8 | 	getbyte	local07, local11, #0
2abb4     03 2A 46 F5 | 	or	local07, #3
2abb8     A7 2A 42 FC | 	wrbyte	local07, fp
2abbc     14 4E 05 F1 | 	add	fp, #20
2abc0     A7 2A 02 FB | 	rdlong	local07, fp
2abc4     04 4E 85 F1 | 	sub	fp, #4
2abc8     A7 2A 62 FC | 	wrlong	local07, fp
2abcc     20 4E 85 F1 | 	sub	fp, #32
2abd0                 | ' 				cf |=  0x01  |  0x02 ;
2abd0                 | ' 				i = ni; continue;
2abd0     A0 FD 9F FD | 	jmp	#LR__4340
2abd4                 | LR__4348
2abd4     04 4E 05 F1 | 	add	fp, #4
2abd8     A7 2E 02 FB | 	rdlong	local09, fp
2abdc     1C 4E 05 F1 | 	add	fp, #28
2abe0     A7 30 02 FB | 	rdlong	local10, fp
2abe4     18 25 02 F6 | 	mov	local04, local10
2abe8     01 24 06 F1 | 	add	local04, #1
2abec     A7 24 62 FC | 	wrlong	local04, fp
2abf0     20 2E 06 F1 | 	add	local09, #32
2abf4     17 31 02 F1 | 	add	local10, local09
2abf8     0C 4E 85 F1 | 	sub	fp, #12
2abfc     A7 22 E2 FA | 	rdword	local03, fp
2ac00     14 4E 85 F1 | 	sub	fp, #20
2ac04     08 22 46 F0 | 	shr	local03, #8
2ac08     18 23 42 FC | 	wrbyte	local03, local10
2ac0c     D4 00 90 FD | 	jmp	#LR__4355
2ac10                 | LR__4349
2ac10     14 4E 05 F1 | 	add	fp, #20
2ac14     A7 2A EA FA | 	rdword	local07, fp wz
2ac18     14 4E 85 F1 | 	sub	fp, #20
2ac1c     20 00 90 AD |  if_e	jmp	#LR__4350
2ac20     82 01 00 FF 
2ac24     B1 13 06 F6 | 	mov	arg01, ##@LR__4983
2ac28     14 4E 05 F1 | 	add	fp, #20
2ac2c     A7 14 E2 FA | 	rdword	arg02, fp
2ac30     14 4E 85 F1 | 	sub	fp, #20
2ac34     48 CB BF FD | 	call	#_fatfs_cc_strchr
2ac38     00 FA 0D F2 | 	cmp	result1, #0 wz
2ac3c     20 00 90 AD |  if_e	jmp	#LR__4351
2ac40                 | LR__4350
2ac40     14 4E 05 F1 | 	add	fp, #20
2ac44     A7 BE 58 FC | 	wrword	#95, fp
2ac48     04 4E 85 F1 | 	sub	fp, #4
2ac4c     A7 2A C2 FA | 	rdbyte	local07, fp
2ac50     03 2A 46 F5 | 	or	local07, #3
2ac54     A7 2A 42 FC | 	wrbyte	local07, fp
2ac58     10 4E 85 F1 | 	sub	fp, #16
2ac5c     84 00 90 FD | 	jmp	#LR__4354
2ac60                 | LR__4351
2ac60     14 4E 05 F1 | 	add	fp, #20
2ac64     A7 2A E2 FA | 	rdword	local07, fp
2ac68     14 4E 85 F1 | 	sub	fp, #20
2ac6c     41 2A 16 F2 | 	cmp	local07, #65 wc
2ac70     24 00 90 CD |  if_b	jmp	#LR__4352
2ac74     14 4E 05 F1 | 	add	fp, #20
2ac78     A7 1E E2 FA | 	rdword	local01, fp
2ac7c     14 4E 85 F1 | 	sub	fp, #20
2ac80     5B 1E 16 F2 | 	cmp	local01, #91 wc
2ac84     0C 4E 05 C1 |  if_b	add	fp, #12
2ac88     A7 2A C2 CA |  if_b	rdbyte	local07, fp
2ac8c     02 2A 46 C5 |  if_b	or	local07, #2
2ac90     A7 2A 42 CC |  if_b	wrbyte	local07, fp
2ac94     0C 4E 85 C1 |  if_b	sub	fp, #12
2ac98                 | LR__4352
2ac98     14 4E 05 F1 | 	add	fp, #20
2ac9c     A7 2A E2 FA | 	rdword	local07, fp
2aca0     14 4E 85 F1 | 	sub	fp, #20
2aca4     61 2A 16 F2 | 	cmp	local07, #97 wc
2aca8     38 00 90 CD |  if_b	jmp	#LR__4353
2acac     14 4E 05 F1 | 	add	fp, #20
2acb0     A7 1E E2 FA | 	rdword	local01, fp
2acb4     14 4E 85 F1 | 	sub	fp, #20
2acb8     7B 1E 16 F2 | 	cmp	local01, #123 wc
2acbc     24 00 90 3D |  if_ae	jmp	#LR__4353
2acc0     0C 4E 05 F1 | 	add	fp, #12
2acc4     A7 2A C2 FA | 	rdbyte	local07, fp
2acc8     01 2A 46 F5 | 	or	local07, #1
2accc     A7 2A 42 FC | 	wrbyte	local07, fp
2acd0     08 4E 05 F1 | 	add	fp, #8
2acd4     A7 2A E2 FA | 	rdword	local07, fp
2acd8     20 2A 86 F1 | 	sub	local07, #32
2acdc     A7 2A 52 FC | 	wrword	local07, fp
2ace0     14 4E 85 F1 | 	sub	fp, #20
2ace4                 | LR__4353
2ace4                 | LR__4354
2ace4                 | LR__4355
2ace4     04 4E 05 F1 | 	add	fp, #4
2ace8     A7 32 02 FB | 	rdlong	local11, fp
2acec     19 2F 02 F6 | 	mov	local09, local11
2acf0     1C 4E 05 F1 | 	add	fp, #28
2acf4     A7 20 02 FB | 	rdlong	local02, fp
2acf8     10 25 02 F6 | 	mov	local04, local02
2acfc     01 24 06 F1 | 	add	local04, #1
2ad00     A7 24 62 FC | 	wrlong	local04, fp
2ad04     10 31 02 F6 | 	mov	local10, local02
2ad08     20 2E 06 F1 | 	add	local09, #32
2ad0c     17 31 02 F1 | 	add	local10, local09
2ad10     0C 4E 85 F1 | 	sub	fp, #12
2ad14     A7 22 E2 FA | 	rdword	local03, fp
2ad18     14 4E 85 F1 | 	sub	fp, #20
2ad1c     18 23 42 FC | 	wrbyte	local03, local10
2ad20     50 FC 9F FD | 	jmp	#LR__4340
2ad24                 | LR__4356
2ad24     04 4E 05 F1 | 	add	fp, #4
2ad28     A7 32 02 FB | 	rdlong	local11, fp
2ad2c     04 4E 85 F1 | 	sub	fp, #4
2ad30     20 32 06 F1 | 	add	local11, #32
2ad34     19 2B C2 FA | 	rdbyte	local07, local11
2ad38     E5 2A 0E F2 | 	cmp	local07, #229 wz
2ad3c     04 4E 05 A1 |  if_e	add	fp, #4
2ad40     A7 2A 02 AB |  if_e	rdlong	local07, fp
2ad44     04 4E 85 A1 |  if_e	sub	fp, #4
2ad48     20 2A 06 A1 |  if_e	add	local07, #32
2ad4c     15 0B 48 AC |  if_e	wrbyte	#5, local07
2ad50     24 4E 05 F1 | 	add	fp, #36
2ad54     A7 2A 02 FB | 	rdlong	local07, fp
2ad58     24 4E 85 F1 | 	sub	fp, #36
2ad5c     08 2A 0E F2 | 	cmp	local07, #8 wz
2ad60     0C 4E 05 A1 |  if_e	add	fp, #12
2ad64     A7 2A C2 AA |  if_e	rdbyte	local07, fp
2ad68     02 2A 66 A0 |  if_e	shl	local07, #2
2ad6c     A7 2A 42 AC |  if_e	wrbyte	local07, fp
2ad70     0C 4E 85 A1 |  if_e	sub	fp, #12
2ad74     0C 4E 05 F1 | 	add	fp, #12
2ad78     A7 2A C2 FA | 	rdbyte	local07, fp
2ad7c     0C 4E 85 F1 | 	sub	fp, #12
2ad80     0C 2A 06 F5 | 	and	local07, #12
2ad84     0C 2A 0E F2 | 	cmp	local07, #12 wz
2ad88     18 00 90 AD |  if_e	jmp	#LR__4357
2ad8c     0C 4E 05 F1 | 	add	fp, #12
2ad90     A7 1E C2 FA | 	rdbyte	local01, fp
2ad94     0C 4E 85 F1 | 	sub	fp, #12
2ad98     03 1E 06 F5 | 	and	local01, #3
2ad9c     03 1E 0E F2 | 	cmp	local01, #3 wz
2ada0     14 00 90 5D |  if_ne	jmp	#LR__4358
2ada4                 | LR__4357
2ada4     10 4E 05 F1 | 	add	fp, #16
2ada8     A7 2A C2 FA | 	rdbyte	local07, fp
2adac     02 2A 46 F5 | 	or	local07, #2
2adb0     A7 2A 42 FC | 	wrbyte	local07, fp
2adb4     10 4E 85 F1 | 	sub	fp, #16
2adb8                 | LR__4358
2adb8     10 4E 05 F1 | 	add	fp, #16
2adbc     A7 2A C2 FA | 	rdbyte	local07, fp
2adc0     10 4E 85 F1 | 	sub	fp, #16
2adc4     02 2A CE F7 | 	test	local07, #2 wz
2adc8     48 00 90 5D |  if_ne	jmp	#LR__4359
2adcc     0C 4E 05 F1 | 	add	fp, #12
2add0     A7 2A C2 FA | 	rdbyte	local07, fp
2add4     0C 4E 85 F1 | 	sub	fp, #12
2add8     01 2A CE F7 | 	test	local07, #1 wz
2addc     10 4E 05 51 |  if_ne	add	fp, #16
2ade0     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2ade4     10 2A 46 55 |  if_ne	or	local07, #16
2ade8     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2adec     10 4E 85 51 |  if_ne	sub	fp, #16
2adf0     0C 4E 05 F1 | 	add	fp, #12
2adf4     A7 2A C2 FA | 	rdbyte	local07, fp
2adf8     0C 4E 85 F1 | 	sub	fp, #12
2adfc     04 2A CE F7 | 	test	local07, #4 wz
2ae00     10 4E 05 51 |  if_ne	add	fp, #16
2ae04     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2ae08     08 2A 46 55 |  if_ne	or	local07, #8
2ae0c     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2ae10     10 4E 85 51 |  if_ne	sub	fp, #16
2ae14                 | LR__4359
2ae14     04 4E 05 F1 | 	add	fp, #4
2ae18     A7 2A 02 FB | 	rdlong	local07, fp
2ae1c     0C 4E 05 F1 | 	add	fp, #12
2ae20     A7 1E C2 FA | 	rdbyte	local01, fp
2ae24     10 4E 85 F1 | 	sub	fp, #16
2ae28     2B 2A 06 F1 | 	add	local07, #43
2ae2c     15 1F 42 FC | 	wrbyte	local01, local07
2ae30                 | ' 	}
2ae30                 | ' 
2ae30                 | ' 	dp->fn[ 11 ] = cf;
2ae30                 | ' 
2ae30                 | ' 	return FR_OK;
2ae30     00 FA 05 F6 | 	mov	result1, #0
2ae34                 | LR__4360
2ae34     A7 F0 03 F6 | 	mov	ptra, fp
2ae38     B2 00 A0 FD | 	call	#popregs_
2ae3c                 | _fatfs_cc_create_name_ret
2ae3c     2D 00 64 FD | 	ret
2ae40                 | 
2ae40                 | _fatfs_cc_follow_path
2ae40     02 4A 05 F6 | 	mov	COUNT_, #2
2ae44     A8 00 A0 FD | 	call	#pushregs_
2ae48     18 F0 07 F1 | 	add	ptra, #24
2ae4c     04 4E 05 F1 | 	add	fp, #4
2ae50     A7 12 62 FC | 	wrlong	arg01, fp
2ae54     04 4E 05 F1 | 	add	fp, #4
2ae58     A7 14 62 FC | 	wrlong	arg02, fp
2ae5c     04 4E 85 F1 | 	sub	fp, #4
2ae60     A7 FA 01 FB | 	rdlong	result1, fp
2ae64     FD 1E 02 FB | 	rdlong	local01, result1
2ae68     10 4E 05 F1 | 	add	fp, #16
2ae6c     A7 1E 62 FC | 	wrlong	local01, fp
2ae70     14 4E 85 F1 | 	sub	fp, #20
2ae74     97 24 48 FB | 	callpa	#(@LR__4372-@LR__4370)>>2,fcache_load_ptr_
2ae78                 | ' )
2ae78                 | ' {
2ae78                 | ' 	FRESULT res;
2ae78                 | ' 	BYTE ns;
2ae78                 | ' 	FATFS *fs = dp->obj.fs;
2ae78                 | ' #line 3034 "ff.c"
2ae78                 | ' 	{
2ae78                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2ae78                 | LR__4370
2ae78     08 4E 05 F1 | 	add	fp, #8
2ae7c     A7 1E 02 FB | 	rdlong	local01, fp
2ae80     08 4E 85 F1 | 	sub	fp, #8
2ae84     0F 1F C2 FA | 	rdbyte	local01, local01
2ae88     2F 1E 0E F2 | 	cmp	local01, #47 wz
2ae8c     18 00 90 AD |  if_e	jmp	#LR__4371
2ae90     08 4E 05 F1 | 	add	fp, #8
2ae94     A7 1E 02 FB | 	rdlong	local01, fp
2ae98     08 4E 85 F1 | 	sub	fp, #8
2ae9c     0F 1F C2 FA | 	rdbyte	local01, local01
2aea0     5C 1E 0E F2 | 	cmp	local01, #92 wz
2aea4     18 00 90 5D |  if_ne	jmp	#LR__4373
2aea8                 | LR__4371
2aea8     08 4E 05 F1 | 	add	fp, #8
2aeac     A7 1E 02 FB | 	rdlong	local01, fp
2aeb0     01 1E 06 F1 | 	add	local01, #1
2aeb4     A7 1E 62 FC | 	wrlong	local01, fp
2aeb8     08 4E 85 F1 | 	sub	fp, #8
2aebc     B8 FF 9F FD | 	jmp	#LR__4370
2aec0                 | LR__4372
2aec0                 | LR__4373
2aec0     04 4E 05 F1 | 	add	fp, #4
2aec4     A7 1E 02 FB | 	rdlong	local01, fp
2aec8     08 1E 06 F1 | 	add	local01, #8
2aecc     0F 01 68 FC | 	wrlong	#0, local01
2aed0     04 4E 05 F1 | 	add	fp, #4
2aed4     A7 1E 02 FB | 	rdlong	local01, fp
2aed8     08 4E 85 F1 | 	sub	fp, #8
2aedc     0F 1F C2 FA | 	rdbyte	local01, local01
2aee0     20 1E 16 F2 | 	cmp	local01, #32 wc
2aee4     30 00 90 3D |  if_ae	jmp	#LR__4374
2aee8     04 4E 05 F1 | 	add	fp, #4
2aeec     A7 1E 02 FB | 	rdlong	local01, fp
2aef0     2B 1E 06 F1 | 	add	local01, #43
2aef4     0F 01 49 FC | 	wrbyte	#128, local01
2aef8     A7 12 02 FB | 	rdlong	arg01, fp
2aefc     04 4E 85 F1 | 	sub	fp, #4
2af00     00 14 06 F6 | 	mov	arg02, #0
2af04     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
2af08     0C 4E 05 F1 | 	add	fp, #12
2af0c     A7 FA 61 FC | 	wrlong	result1, fp
2af10     0C 4E 85 F1 | 	sub	fp, #12
2af14     1C 01 90 FD | 	jmp	#LR__4378
2af18                 | LR__4374
2af18                 | ' 		for (;;) {
2af18                 | LR__4375
2af18     04 4E 05 F1 | 	add	fp, #4
2af1c     A7 12 02 FB | 	rdlong	arg01, fp
2af20     04 4E 05 F1 | 	add	fp, #4
2af24     A7 14 02 F6 | 	mov	arg02, fp
2af28     08 4E 85 F1 | 	sub	fp, #8
2af2c     14 F6 BF FD | 	call	#_fatfs_cc_create_name
2af30     0C 4E 05 F1 | 	add	fp, #12
2af34     A7 FA 61 FC | 	wrlong	result1, fp
2af38     00 FA 4D F2 | 	cmps	result1, #0 wz
2af3c     0C 4E 85 F1 | 	sub	fp, #12
2af40     F0 00 90 5D |  if_ne	jmp	#LR__4377
2af44     04 4E 05 F1 | 	add	fp, #4
2af48     A7 12 02 FB | 	rdlong	arg01, fp
2af4c     04 4E 85 F1 | 	sub	fp, #4
2af50     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
2af54     0C 4E 05 F1 | 	add	fp, #12
2af58     A7 FA 61 FC | 	wrlong	result1, fp
2af5c     08 4E 85 F1 | 	sub	fp, #8
2af60     A7 1E 02 FB | 	rdlong	local01, fp
2af64     2B 1E 06 F1 | 	add	local01, #43
2af68     0F 1F C2 FA | 	rdbyte	local01, local01
2af6c     0C 4E 05 F1 | 	add	fp, #12
2af70     A7 1E 42 FC | 	wrbyte	local01, fp
2af74     04 4E 85 F1 | 	sub	fp, #4
2af78     A7 1E 0A FB | 	rdlong	local01, fp wz
2af7c     0C 4E 85 F1 | 	sub	fp, #12
2af80     34 00 90 AD |  if_e	jmp	#LR__4376
2af84     0C 4E 05 F1 | 	add	fp, #12
2af88     A7 1E 02 FB | 	rdlong	local01, fp
2af8c     0C 4E 85 F1 | 	sub	fp, #12
2af90     04 1E 0E F2 | 	cmp	local01, #4 wz
2af94     9C 00 90 5D |  if_ne	jmp	#LR__4377
2af98     10 4E 05 F1 | 	add	fp, #16
2af9c     A7 1E C2 FA | 	rdbyte	local01, fp
2afa0     10 4E 85 F1 | 	sub	fp, #16
2afa4     04 1E CE F7 | 	test	local01, #4 wz
2afa8     0C 4E 05 A1 |  if_e	add	fp, #12
2afac     A7 0A 68 AC |  if_e	wrlong	#5, fp
2afb0     0C 4E 85 A1 |  if_e	sub	fp, #12
2afb4                 | ' 					}
2afb4                 | ' 				}
2afb4                 | ' 				break;
2afb4     7C 00 90 FD | 	jmp	#LR__4377
2afb8                 | LR__4376
2afb8     10 4E 05 F1 | 	add	fp, #16
2afbc     A7 1E C2 FA | 	rdbyte	local01, fp
2afc0     10 4E 85 F1 | 	sub	fp, #16
2afc4     04 1E CE F7 | 	test	local01, #4 wz
2afc8     68 00 90 5D |  if_ne	jmp	#LR__4377
2afcc     04 4E 05 F1 | 	add	fp, #4
2afd0     A7 1E 02 FB | 	rdlong	local01, fp
2afd4     04 4E 85 F1 | 	sub	fp, #4
2afd8     06 1E 06 F1 | 	add	local01, #6
2afdc     0F 1F C2 FA | 	rdbyte	local01, local01
2afe0     10 1E CE F7 | 	test	local01, #16 wz
2afe4     0C 4E 05 A1 |  if_e	add	fp, #12
2afe8     A7 0A 68 AC |  if_e	wrlong	#5, fp
2afec     0C 4E 85 A1 |  if_e	sub	fp, #12
2aff0                 | ' 				res = FR_NO_PATH; break;
2aff0     40 00 90 AD |  if_e	jmp	#LR__4377
2aff4     04 4E 05 F1 | 	add	fp, #4
2aff8     A7 20 02 FB | 	rdlong	local02, fp
2affc     10 1F 02 F6 | 	mov	local01, local02
2b000     10 4E 05 F1 | 	add	fp, #16
2b004     A7 14 02 FB | 	rdlong	arg02, fp
2b008     0A 13 02 F6 | 	mov	arg01, arg02
2b00c     34 14 06 F1 | 	add	arg02, #52
2b010     14 4E 85 F1 | 	sub	fp, #20
2b014     10 20 06 F1 | 	add	local02, #16
2b018     10 21 02 FB | 	rdlong	local02, local02
2b01c     FF 21 06 F5 | 	and	local02, #511
2b020     10 15 02 F1 | 	add	arg02, local02
2b024     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
2b028     08 1E 06 F1 | 	add	local01, #8
2b02c     0F FB 61 FC | 	wrlong	result1, local01
2b030     E4 FE 9F FD | 	jmp	#LR__4375
2b034                 | LR__4377
2b034                 | LR__4378
2b034                 | ' 			}
2b034                 | ' #line 3090 "ff.c"
2b034                 | ' 			{
2b034                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2b034                 | ' 			}
2b034                 | ' 		}
2b034                 | ' 	}
2b034                 | ' 
2b034                 | ' 	return res;
2b034     0C 4E 05 F1 | 	add	fp, #12
2b038     A7 FA 01 FB | 	rdlong	result1, fp
2b03c     0C 4E 85 F1 | 	sub	fp, #12
2b040     A7 F0 03 F6 | 	mov	ptra, fp
2b044     B2 00 A0 FD | 	call	#popregs_
2b048                 | _fatfs_cc_follow_path_ret
2b048     2D 00 64 FD | 	ret
2b04c                 | 
2b04c                 | _fatfs_cc_get_ldnumber
2b04c     01 00 66 F6 | 	neg	_var01, #1
2b050     09 03 0A FB | 	rdlong	_var02, arg01 wz
2b054     01 05 02 F6 | 	mov	_var03, _var02
2b058     01 FA 65 A6 |  if_e	neg	result1, #1
2b05c     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2b060     97 10 48 FB | 	callpa	#(@LR__4381-@LR__4380)>>2,fcache_load_ptr_
2b064                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2b064                 | LR__4380
2b064     02 07 C2 FA | 	rdbyte	_var04, _var03
2b068     03 FB E1 F8 | 	getbyte	result1, _var04, #0
2b06c     20 FA 15 F2 | 	cmp	result1, #32 wc
2b070     01 04 06 F1 | 	add	_var03, #1
2b074     03 09 02 36 |  if_ae	mov	_var05, _var04
2b078     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2b07c     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
2b080     E0 FF 9F 1D |  if_a	jmp	#LR__4380
2b084                 | LR__4381
2b084     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2b088     3A 06 0E F2 | 	cmp	_var04, #58 wz
2b08c     40 00 90 5D |  if_ne	jmp	#LR__4383
2b090     01 0A 06 F6 | 	mov	_var06, #1
2b094     01 09 C2 FA | 	rdbyte	_var05, _var02
2b098     30 08 16 F2 | 	cmp	_var05, #48 wc
2b09c     1C 00 90 CD |  if_b	jmp	#LR__4382
2b0a0     01 09 C2 FA | 	rdbyte	_var05, _var02
2b0a4     3A 08 16 F2 | 	cmp	_var05, #58 wc
2b0a8     01 0D 02 C6 |  if_b	mov	_var07, _var02
2b0ac     02 0C 06 C1 |  if_b	add	_var07, #2
2b0b0     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
2b0b4     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
2b0b8     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
2b0bc                 | LR__4382
2b0bc     01 0A 56 F2 | 	cmps	_var06, #1 wc
2b0c0     05 01 02 C6 |  if_b	mov	_var01, _var06
2b0c4     09 05 62 CC |  if_b	wrlong	_var03, arg01
2b0c8                 | ' 			vol = i;
2b0c8                 | ' 			*path = tt;
2b0c8                 | ' 		}
2b0c8                 | ' 		return vol;
2b0c8     00 FB 01 F6 | 	mov	result1, _var01
2b0cc     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2b0d0                 | LR__4383
2b0d0                 | ' 	}
2b0d0                 | ' #line 3170 "ff.c"
2b0d0                 | ' 	vol = 0;
2b0d0                 | ' 
2b0d0                 | ' 	return vol;
2b0d0     00 FA 05 F6 | 	mov	result1, #0
2b0d4                 | _fatfs_cc_get_ldnumber_ret
2b0d4     2D 00 64 FD | 	ret
2b0d8                 | 
2b0d8                 | _fatfs_cc_check_fs
2b0d8     04 4A 05 F6 | 	mov	COUNT_, #4
2b0dc     A8 00 A0 FD | 	call	#pushregs_
2b0e0     09 1F 02 F6 | 	mov	local01, arg01
2b0e4     03 1E 06 F1 | 	add	local01, #3
2b0e8     0F 01 48 FC | 	wrbyte	#0, local01
2b0ec     2D 1E 06 F1 | 	add	local01, #45
2b0f0     FF FF FF FF 
2b0f4     0F FF 6B FC | 	wrlong	##-1, local01
2b0f8     30 1E 86 F1 | 	sub	local01, #48
2b0fc     0F 13 02 F6 | 	mov	arg01, local01
2b100     18 D5 BF FD | 	call	#_fatfs_cc_move_window
2b104     00 FA 0D F2 | 	cmp	result1, #0 wz
2b108     04 FA 05 56 |  if_ne	mov	result1, #4
2b10c     94 01 90 5D |  if_ne	jmp	#LR__4394
2b110     34 1E 06 F1 | 	add	local01, #52
2b114     0F 13 02 F6 | 	mov	arg01, local01
2b118     FE 13 06 F1 | 	add	arg01, #510
2b11c                 | ' {
2b11c                 | ' 
2b11c                 | ' 	return *((WORD*)ptr);
2b11c     09 21 E2 FA | 	rdword	local02, arg01
2b120     0F 23 C2 FA | 	rdbyte	local03, local01
2b124     34 1E 86 F1 | 	sub	local01, #52
2b128     11 25 E2 F8 | 	getbyte	local04, local03, #0
2b12c     EB 24 0E F2 | 	cmp	local04, #235 wz
2b130     11 17 02 56 |  if_ne	mov	arg03, local03
2b134     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2b138     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
2b13c     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
2b140     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
2b144     44 01 90 5D |  if_ne	jmp	#LR__4393
2b148     10 25 32 F9 | 	getword	local04, local02, #0
2b14c     55 00 00 FF 
2b150     55 24 0E F2 | 	cmp	local04, ##43605 wz
2b154     2C 00 90 5D |  if_ne	jmp	#LR__4390
2b158     34 1E 06 F1 | 	add	local01, #52
2b15c     0F 13 02 F6 | 	mov	arg01, local01
2b160     34 1E 86 F1 | 	sub	local01, #52
2b164     52 12 06 F1 | 	add	arg01, #82
2b168     82 01 00 FF 
2b16c     B8 15 06 F6 | 	mov	arg02, ##@LR__4984
2b170     08 16 06 F6 | 	mov	arg03, #8
2b174     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
2b178     00 FA 0D F2 | 	cmp	result1, #0 wz
2b17c                 | ' 			return 0;
2b17c     00 FA 05 A6 |  if_e	mov	result1, #0
2b180     20 01 90 AD |  if_e	jmp	#LR__4394
2b184                 | LR__4390
2b184     34 1E 06 F1 | 	add	local01, #52
2b188     0F 13 02 F6 | 	mov	arg01, local01
2b18c     0B 12 06 F1 | 	add	arg01, #11
2b190                 | ' {
2b190                 | ' 
2b190                 | ' 	return *((WORD*)ptr);
2b190     09 FB E1 FA | 	rdword	result1, arg01
2b194     0D 1E 06 F1 | 	add	local01, #13
2b198     0F 23 C2 FA | 	rdbyte	local03, local01
2b19c     41 1E 86 F1 | 	sub	local01, #65
2b1a0     FD 24 32 F9 | 	getword	local04, result1, #0
2b1a4     FD 14 32 F9 | 	getword	arg02, result1, #0
2b1a8     01 14 86 F1 | 	sub	arg02, #1
2b1ac     0A 25 CA F7 | 	test	local04, arg02 wz
2b1b0     D8 00 90 5D |  if_ne	jmp	#LR__4392
2b1b4     FD 14 32 F9 | 	getword	arg02, result1, #0
2b1b8     01 00 00 FF 
2b1bc     00 14 16 F2 | 	cmp	arg02, ##512 wc
2b1c0     C8 00 90 CD |  if_b	jmp	#LR__4392
2b1c4     FD 14 32 F9 | 	getword	arg02, result1, #0
2b1c8     01 00 00 FF 
2b1cc     01 14 16 F2 | 	cmp	arg02, ##513 wc
2b1d0     B8 00 90 3D |  if_ae	jmp	#LR__4392
2b1d4     11 13 02 F6 | 	mov	arg01, local03
2b1d8     07 12 4E F7 | 	zerox	arg01, #7 wz
2b1dc     AC 00 90 AD |  if_e	jmp	#LR__4392
2b1e0     11 13 E2 F8 | 	getbyte	arg01, local03, #0
2b1e4     11 23 E2 F8 | 	getbyte	local03, local03, #0
2b1e8     01 22 86 F1 | 	sub	local03, #1
2b1ec     11 13 CA F7 | 	test	arg01, local03 wz
2b1f0     98 00 90 5D |  if_ne	jmp	#LR__4392
2b1f4     34 1E 06 F1 | 	add	local01, #52
2b1f8     0F 13 02 F6 | 	mov	arg01, local01
2b1fc     34 1E 86 F1 | 	sub	local01, #52
2b200     0E 12 06 F1 | 	add	arg01, #14
2b204                 | ' {
2b204                 | ' 
2b204                 | ' 	return *((WORD*)ptr);
2b204     09 FB E9 FA | 	rdword	result1, arg01 wz
2b208     80 00 90 AD |  if_e	jmp	#LR__4392
2b20c     44 1E 06 F1 | 	add	local01, #68
2b210     0F 13 C2 FA | 	rdbyte	arg01, local01
2b214     44 1E 86 F1 | 	sub	local01, #68
2b218     01 12 86 F1 | 	sub	arg01, #1
2b21c     02 12 16 F2 | 	cmp	arg01, #2 wc
2b220     68 00 90 3D |  if_ae	jmp	#LR__4392
2b224     34 1E 06 F1 | 	add	local01, #52
2b228     0F 13 02 F6 | 	mov	arg01, local01
2b22c     34 1E 86 F1 | 	sub	local01, #52
2b230     11 12 06 F1 | 	add	arg01, #17
2b234                 | ' {
2b234                 | ' 
2b234                 | ' 	return *((WORD*)ptr);
2b234     09 FB E9 FA | 	rdword	result1, arg01 wz
2b238     50 00 90 AD |  if_e	jmp	#LR__4392
2b23c     34 1E 06 F1 | 	add	local01, #52
2b240     0F 13 02 F6 | 	mov	arg01, local01
2b244     34 1E 86 F1 | 	sub	local01, #52
2b248     13 12 06 F1 | 	add	arg01, #19
2b24c                 | ' {
2b24c                 | ' 
2b24c                 | ' 	return *((WORD*)ptr);
2b24c     09 FB E1 FA | 	rdword	result1, arg01
2b250     FD 22 32 F9 | 	getword	local03, result1, #0
2b254     80 22 16 F2 | 	cmp	local03, #128 wc
2b258     20 00 90 3D |  if_ae	jmp	#LR__4391
2b25c     34 1E 06 F1 | 	add	local01, #52
2b260     0F 13 02 F6 | 	mov	arg01, local01
2b264     34 1E 86 F1 | 	sub	local01, #52
2b268     20 12 06 F1 | 	add	arg01, #32
2b26c                 | ' {
2b26c                 | ' 
2b26c                 | ' 	return *((DWORD*)ptr);
2b26c     09 FB 01 FB | 	rdlong	result1, arg01
2b270     80 00 00 FF 
2b274     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2b278     10 00 90 CD |  if_b	jmp	#LR__4392
2b27c                 | LR__4391
2b27c     4A 1E 06 F1 | 	add	local01, #74
2b280                 | ' {
2b280                 | ' 
2b280                 | ' 	return *((WORD*)ptr);
2b280     0F FB E9 FA | 	rdword	result1, local01 wz
2b284                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2b284                 | ' 			&& ld_word(fs->win +  14 ) != 0
2b284                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2b284                 | ' 			&& ld_word(fs->win +  17 ) != 0
2b284                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2b284                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2b284                 | ' 				return 0;
2b284     00 FA 05 56 |  if_ne	mov	result1, #0
2b288     18 00 90 5D |  if_ne	jmp	#LR__4394
2b28c                 | LR__4392
2b28c                 | LR__4393
2b28c                 | ' 		}
2b28c                 | ' 	}
2b28c                 | ' 	return sign == 0xAA55 ? 2 : 3;
2b28c     10 23 32 F9 | 	getword	local03, local02, #0
2b290     55 00 00 FF 
2b294     55 22 0E F2 | 	cmp	local03, ##43605 wz
2b298     02 24 06 A6 |  if_e	mov	local04, #2
2b29c     03 24 06 56 |  if_ne	mov	local04, #3
2b2a0     12 FB 01 F6 | 	mov	result1, local04
2b2a4                 | LR__4394
2b2a4     A7 F0 03 F6 | 	mov	ptra, fp
2b2a8     B2 00 A0 FD | 	call	#popregs_
2b2ac                 | _fatfs_cc_check_fs_ret
2b2ac     2D 00 64 FD | 	ret
2b2b0                 | 
2b2b0                 | _fatfs_cc_find_volume
2b2b0     05 4A 05 F6 | 	mov	COUNT_, #5
2b2b4     A8 00 A0 FD | 	call	#pushregs_
2b2b8     24 F0 07 F1 | 	add	ptra, #36
2b2bc     09 1F 02 F6 | 	mov	local01, arg01
2b2c0     0A 21 02 F6 | 	mov	local02, arg02
2b2c4     0F 13 02 F6 | 	mov	arg01, local01
2b2c8     00 14 06 F6 | 	mov	arg02, #0
2b2cc     08 FE BF FD | 	call	#_fatfs_cc_check_fs
2b2d0     02 FA 0D F2 | 	cmp	result1, #2 wz
2b2d4     0C 00 90 AD |  if_e	jmp	#LR__4400
2b2d8     03 FA 15 F2 | 	cmp	result1, #3 wc
2b2dc     00 20 0E C2 |  if_b	cmp	local02, #0 wz
2b2e0     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4408
2b2e4                 | LR__4400
2b2e4                 | ' 	for (i = 0; i < 4; i++) {
2b2e4     00 22 06 F6 | 	mov	local03, #0
2b2e8     97 26 48 FB | 	callpa	#(@LR__4402-@LR__4401)>>2,fcache_load_ptr_
2b2ec                 | LR__4401
2b2ec     04 22 16 F2 | 	cmp	local03, #4 wc
2b2f0     44 00 90 3D |  if_ae	jmp	#LR__4403
2b2f4     11 25 02 F6 | 	mov	local04, local03
2b2f8     02 24 66 F0 | 	shl	local04, #2
2b2fc     14 4E 05 F1 | 	add	fp, #20
2b300     A7 24 02 F1 | 	add	local04, fp
2b304     34 1E 06 F1 | 	add	local01, #52
2b308     0F 13 02 F6 | 	mov	arg01, local01
2b30c     34 1E 86 F1 | 	sub	local01, #52
2b310     BE 13 06 F1 | 	add	arg01, #446
2b314     11 15 02 F6 | 	mov	arg02, local03
2b318     04 14 66 F0 | 	shl	arg02, #4
2b31c     0A 13 02 F1 | 	add	arg01, arg02
2b320     08 12 06 F1 | 	add	arg01, #8
2b324                 | ' {
2b324                 | ' 
2b324                 | ' 	return *((DWORD*)ptr);
2b324     09 FB 01 FB | 	rdlong	result1, arg01
2b328     14 4E 85 F1 | 	sub	fp, #20
2b32c     12 FB 61 FC | 	wrlong	result1, local04
2b330     01 22 06 F1 | 	add	local03, #1
2b334     B4 FF 9F FD | 	jmp	#LR__4401
2b338                 | LR__4402
2b338                 | LR__4403
2b338     00 20 0E F2 | 	cmp	local02, #0 wz
2b33c     10 25 02 56 |  if_ne	mov	local04, local02
2b340     01 24 86 51 |  if_ne	sub	local04, #1
2b344     00 24 06 A6 |  if_e	mov	local04, #0
2b348     12 23 02 F6 | 	mov	local03, local04
2b34c                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2b34c                 | ' 	}
2b34c                 | ' 	i = part ? part - 1 : 0;
2b34c                 | ' 	do {
2b34c                 | LR__4404
2b34c     11 25 02 F6 | 	mov	local04, local03
2b350     02 24 66 F0 | 	shl	local04, #2
2b354     14 4E 05 F1 | 	add	fp, #20
2b358     A7 24 02 F1 | 	add	local04, fp
2b35c     12 25 0A FB | 	rdlong	local04, local04 wz
2b360     14 4E 85 F1 | 	sub	fp, #20
2b364     28 00 90 AD |  if_e	jmp	#LR__4405
2b368     11 25 02 F6 | 	mov	local04, local03
2b36c     02 24 66 F0 | 	shl	local04, #2
2b370     14 4E 05 F1 | 	add	fp, #20
2b374     A7 24 02 F1 | 	add	local04, fp
2b378     12 15 02 FB | 	rdlong	arg02, local04
2b37c     0F 13 02 F6 | 	mov	arg01, local01
2b380     14 4E 85 F1 | 	sub	fp, #20
2b384     50 FD BF FD | 	call	#_fatfs_cc_check_fs
2b388     FD 24 02 F6 | 	mov	local04, result1
2b38c     04 00 90 FD | 	jmp	#LR__4406
2b390                 | LR__4405
2b390     03 24 06 F6 | 	mov	local04, #3
2b394                 | LR__4406
2b394     12 27 02 F6 | 	mov	local05, local04
2b398     00 20 0E F2 | 	cmp	local02, #0 wz
2b39c     02 26 16 A2 |  if_e	cmp	local05, #2 wc
2b3a0     0C 00 90 8D |  if_c_and_z	jmp	#LR__4407
2b3a4     01 22 06 A1 |  if_e	add	local03, #1
2b3a8     04 22 16 A2 |  if_e	cmp	local03, #4 wc
2b3ac     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4404
2b3b0                 | LR__4407
2b3b0                 | ' 	return fmt;
2b3b0     13 FB 01 F6 | 	mov	result1, local05
2b3b4                 | LR__4408
2b3b4     A7 F0 03 F6 | 	mov	ptra, fp
2b3b8     B2 00 A0 FD | 	call	#popregs_
2b3bc                 | _fatfs_cc_find_volume_ret
2b3bc     2D 00 64 FD | 	ret
2b3c0                 | 
2b3c0                 | _fatfs_cc_mount_volume
2b3c0     0B 4A 05 F6 | 	mov	COUNT_, #11
2b3c4     A8 00 A0 FD | 	call	#pushregs_
2b3c8     0A 1F 02 F6 | 	mov	local01, arg02
2b3cc     0B 21 02 F6 | 	mov	local02, arg03
2b3d0     0F 01 68 FC | 	wrlong	#0, local01
2b3d4     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2b3d8     FD 22 02 F6 | 	mov	local03, result1
2b3dc     00 22 56 F2 | 	cmps	local03, #0 wc
2b3e0     0B FA 05 C6 |  if_b	mov	result1, #11
2b3e4     3C 05 90 CD |  if_b	jmp	#LR__4420
2b3e8     11 17 02 F6 | 	mov	arg03, local03
2b3ec     02 16 66 F0 | 	shl	arg03, #2
2b3f0     F2 16 02 F1 | 	add	arg03, objptr
2b3f4     0B 25 0A FB | 	rdlong	local04, arg03 wz
2b3f8     0C FA 05 A6 |  if_e	mov	result1, #12
2b3fc     24 05 90 AD |  if_e	jmp	#LR__4420
2b400     0F 25 62 FC | 	wrlong	local04, local01
2b404     10 21 E2 F8 | 	getbyte	local02, local02, #0
2b408     FE 20 06 F5 | 	and	local02, #254
2b40c     12 17 CA FA | 	rdbyte	arg03, local04 wz
2b410     4C 00 90 AD |  if_e	jmp	#LR__4411
2b414     01 24 06 F1 | 	add	local04, #1
2b418     12 13 CA FA | 	rdbyte	arg01, local04 wz
2b41c     01 24 86 F1 | 	sub	local04, #1
2b420     01 FA 05 56 |  if_ne	mov	result1, #1
2b424                 | ' 
2b424                 | ' 	return Stat;
2b424     01 00 00 AF 
2b428     20 E4 05 A1 |  if_e	add	objptr, ##544
2b42c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2b430     01 00 00 AF 
2b434     20 E4 85 A1 |  if_e	sub	objptr, ##544
2b438     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
2b43c     01 16 CE F7 | 	test	arg03, #1 wz
2b440     1C 00 90 5D |  if_ne	jmp	#LR__4410
2b444     00 20 0E F2 | 	cmp	local02, #0 wz
2b448     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
2b44c     04 FA CD 57 |  if_ne	test	result1, #4 wz
2b450                 | ' 				return FR_WRITE_PROTECTED;
2b450     0A FA 05 56 |  if_ne	mov	result1, #10
2b454     CC 04 90 5D |  if_ne	jmp	#LR__4420
2b458                 | ' 			}
2b458                 | ' 			return FR_OK;
2b458     00 FA 05 F6 | 	mov	result1, #0
2b45c     C4 04 90 FD | 	jmp	#LR__4420
2b460                 | LR__4410
2b460                 | LR__4411
2b460     12 01 48 FC | 	wrbyte	#0, local04
2b464     01 24 06 F1 | 	add	local04, #1
2b468     12 23 42 FC | 	wrbyte	local03, local04
2b46c     12 13 C2 FA | 	rdbyte	arg01, local04
2b470     01 24 86 F1 | 	sub	local04, #1
2b474     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
2b478     FD 16 02 F6 | 	mov	arg03, result1
2b47c     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
2b480     01 26 CE F7 | 	test	local05, #1 wz
2b484                 | ' 		return FR_NOT_READY;
2b484     03 FA 05 56 |  if_ne	mov	result1, #3
2b488     98 04 90 5D |  if_ne	jmp	#LR__4420
2b48c     00 20 0E F2 | 	cmp	local02, #0 wz
2b490     0B 27 02 56 |  if_ne	mov	local05, arg03
2b494     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
2b498     04 26 CE 57 |  if_ne	test	local05, #4 wz
2b49c                 | ' 		return FR_WRITE_PROTECTED;
2b49c     0A FA 05 56 |  if_ne	mov	result1, #10
2b4a0     80 04 90 5D |  if_ne	jmp	#LR__4420
2b4a4     12 13 02 F6 | 	mov	arg01, local04
2b4a8     00 14 06 F6 | 	mov	arg02, #0
2b4ac     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2b4b0     FD 12 02 F6 | 	mov	arg01, result1
2b4b4     04 12 0E F2 | 	cmp	arg01, #4 wz
2b4b8     01 FA 05 A6 |  if_e	mov	result1, #1
2b4bc     64 04 90 AD |  if_e	jmp	#LR__4420
2b4c0     02 12 16 F2 | 	cmp	arg01, #2 wc
2b4c4     0D FA 05 36 |  if_ae	mov	result1, #13
2b4c8     58 04 90 3D |  if_ae	jmp	#LR__4420
2b4cc     30 24 06 F1 | 	add	local04, #48
2b4d0     12 29 02 FB | 	rdlong	local06, local04
2b4d4     04 24 06 F1 | 	add	local04, #4
2b4d8     12 13 02 F6 | 	mov	arg01, local04
2b4dc     34 24 86 F1 | 	sub	local04, #52
2b4e0     0B 12 06 F1 | 	add	arg01, #11
2b4e4                 | ' {
2b4e4                 | ' 
2b4e4                 | ' 	return *((WORD*)ptr);
2b4e4     09 FB E1 FA | 	rdword	result1, arg01
2b4e8     01 00 00 FF 
2b4ec     00 FA 0D F2 | 	cmp	result1, ##512 wz
2b4f0     0D FA 05 56 |  if_ne	mov	result1, #13
2b4f4     2C 04 90 5D |  if_ne	jmp	#LR__4420
2b4f8     34 24 06 F1 | 	add	local04, #52
2b4fc     12 13 02 F6 | 	mov	arg01, local04
2b500     34 24 86 F1 | 	sub	local04, #52
2b504     16 12 06 F1 | 	add	arg01, #22
2b508                 | ' {
2b508                 | ' 
2b508                 | ' 	return *((WORD*)ptr);
2b508     09 FB E1 FA | 	rdword	result1, arg01
2b50c     FD 2A 0A F6 | 	mov	local07, result1 wz
2b510     18 00 90 5D |  if_ne	jmp	#LR__4412
2b514     34 24 06 F1 | 	add	local04, #52
2b518     12 13 02 F6 | 	mov	arg01, local04
2b51c     34 24 86 F1 | 	sub	local04, #52
2b520     24 12 06 F1 | 	add	arg01, #36
2b524                 | ' {
2b524                 | ' 
2b524                 | ' 	return *((DWORD*)ptr);
2b524     09 FB 01 FB | 	rdlong	result1, arg01
2b528     FD 2A 02 F6 | 	mov	local07, result1
2b52c                 | LR__4412
2b52c     1C 24 06 F1 | 	add	local04, #28
2b530     12 2B 62 FC | 	wrlong	local07, local04
2b534     28 24 06 F1 | 	add	local04, #40
2b538     12 27 C2 FA | 	rdbyte	local05, local04
2b53c     42 24 86 F1 | 	sub	local04, #66
2b540     12 27 42 FC | 	wrbyte	local05, local04
2b544     12 27 C2 FA | 	rdbyte	local05, local04
2b548     02 24 86 F1 | 	sub	local04, #2
2b54c     01 26 0E F2 | 	cmp	local05, #1 wz
2b550     02 24 06 51 |  if_ne	add	local04, #2
2b554     12 27 C2 5A |  if_ne	rdbyte	local05, local04
2b558     02 24 86 51 |  if_ne	sub	local04, #2
2b55c     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
2b560     0D FA 05 56 |  if_ne	mov	result1, #13
2b564     BC 03 90 5D |  if_ne	jmp	#LR__4420
2b568     02 24 06 F1 | 	add	local04, #2
2b56c     12 27 C2 FA | 	rdbyte	local05, local04
2b570     13 2B 02 FD | 	qmul	local07, local05
2b574     3F 24 06 F1 | 	add	local04, #63
2b578     12 27 C2 FA | 	rdbyte	local05, local04
2b57c     37 24 86 F1 | 	sub	local04, #55
2b580     12 27 52 FC | 	wrword	local05, local04
2b584     12 27 EA FA | 	rdword	local05, local04 wz
2b588     0A 24 86 F1 | 	sub	local04, #10
2b58c     18 2A 62 FD | 	getqx	local07
2b590     20 00 90 AD |  if_e	jmp	#LR__4413
2b594     0A 24 06 F1 | 	add	local04, #10
2b598     12 27 E2 FA | 	rdword	local05, local04
2b59c     13 23 32 F9 | 	getword	local03, local05, #0
2b5a0     0A 24 86 F1 | 	sub	local04, #10
2b5a4     13 27 32 F9 | 	getword	local05, local05, #0
2b5a8     01 26 86 F1 | 	sub	local05, #1
2b5ac     13 23 CA F7 | 	test	local03, local05 wz
2b5b0     08 00 90 AD |  if_e	jmp	#LR__4414
2b5b4                 | LR__4413
2b5b4     0D FA 05 F6 | 	mov	result1, #13
2b5b8     68 03 90 FD | 	jmp	#LR__4420
2b5bc                 | LR__4414
2b5bc     34 24 06 F1 | 	add	local04, #52
2b5c0     12 13 02 F6 | 	mov	arg01, local04
2b5c4     11 12 06 F1 | 	add	arg01, #17
2b5c8                 | ' {
2b5c8                 | ' 
2b5c8                 | ' 	return *((WORD*)ptr);
2b5c8     09 FB E1 FA | 	rdword	result1, arg01
2b5cc     2C 24 86 F1 | 	sub	local04, #44
2b5d0     12 FB 51 FC | 	wrword	result1, local04
2b5d4     12 27 E2 FA | 	rdword	local05, local04
2b5d8     08 24 86 F1 | 	sub	local04, #8
2b5dc     13 13 52 F6 | 	abs	arg01, local05 wc
2b5e0     09 13 42 F8 | 	getnib	arg01, arg01, #0
2b5e4     09 13 8A F6 | 	negc	arg01, arg01 wz
2b5e8     0D FA 05 56 |  if_ne	mov	result1, #13
2b5ec     34 03 90 5D |  if_ne	jmp	#LR__4420
2b5f0     34 24 06 F1 | 	add	local04, #52
2b5f4     12 13 02 F6 | 	mov	arg01, local04
2b5f8     34 24 86 F1 | 	sub	local04, #52
2b5fc     13 12 06 F1 | 	add	arg01, #19
2b600                 | ' {
2b600                 | ' 
2b600                 | ' 	return *((WORD*)ptr);
2b600     09 FB E1 FA | 	rdword	result1, arg01
2b604     FD 2C 0A F6 | 	mov	local08, result1 wz
2b608     34 24 06 A1 |  if_e	add	local04, #52
2b60c     12 13 02 A6 |  if_e	mov	arg01, local04
2b610     34 24 86 A1 |  if_e	sub	local04, #52
2b614     20 12 06 A1 |  if_e	add	arg01, #32
2b618                 | ' {
2b618                 | ' 
2b618                 | ' 	return *((DWORD*)ptr);
2b618     09 2D 02 AB |  if_e	rdlong	local08, arg01
2b61c     34 24 06 F1 | 	add	local04, #52
2b620     12 13 02 F6 | 	mov	arg01, local04
2b624     34 24 86 F1 | 	sub	local04, #52
2b628     0E 12 06 F1 | 	add	arg01, #14
2b62c                 | ' {
2b62c                 | ' 
2b62c                 | ' 	return *((WORD*)ptr);
2b62c     09 FB E1 FA | 	rdword	result1, arg01
2b630     FD 12 02 F6 | 	mov	arg01, result1
2b634     09 27 02 F6 | 	mov	local05, arg01
2b638     0F 26 4E F7 | 	zerox	local05, #15 wz
2b63c     0D FA 05 A6 |  if_e	mov	result1, #13
2b640     E0 02 90 AD |  if_e	jmp	#LR__4420
2b644     09 2F 32 F9 | 	getword	local09, arg01, #0
2b648     15 2F 02 F1 | 	add	local09, local07
2b64c     08 24 06 F1 | 	add	local04, #8
2b650     12 27 E2 FA | 	rdword	local05, local04
2b654     08 24 86 F1 | 	sub	local04, #8
2b658     13 27 52 F6 | 	abs	local05, local05 wc
2b65c     04 26 46 F0 | 	shr	local05, #4
2b660     13 2F 82 F3 | 	sumc	local09, local05
2b664     17 2D 12 F2 | 	cmp	local08, local09 wc
2b668     0D FA 05 C6 |  if_b	mov	result1, #13
2b66c     B4 02 90 CD |  if_b	jmp	#LR__4420
2b670     17 2D 82 F1 | 	sub	local08, local09
2b674     0A 24 06 F1 | 	add	local04, #10
2b678     12 27 E2 FA | 	rdword	local05, local04
2b67c     13 2D 12 FD | 	qdiv	local08, local05
2b680     0A 24 86 F1 | 	sub	local04, #10
2b684     18 26 62 FD | 	getqx	local05
2b688     00 26 0E F2 | 	cmp	local05, #0 wz
2b68c     0D FA 05 A6 |  if_e	mov	result1, #13
2b690     90 02 90 AD |  if_e	jmp	#LR__4420
2b694     00 30 06 F6 | 	mov	local10, #0
2b698     FF FF 07 FF 
2b69c     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
2b6a0     03 30 06 C6 |  if_b	mov	local10, #3
2b6a4     7F 00 00 FF 
2b6a8     F6 27 16 F2 | 	cmp	local05, ##65526 wc
2b6ac     02 30 06 C6 |  if_b	mov	local10, #2
2b6b0     07 00 00 FF 
2b6b4     F6 27 16 F2 | 	cmp	local05, ##4086 wc
2b6b8     01 30 06 C6 |  if_b	mov	local10, #1
2b6bc     00 30 0E F2 | 	cmp	local10, #0 wz
2b6c0     0D FA 05 A6 |  if_e	mov	result1, #13
2b6c4     5C 02 90 AD |  if_e	jmp	#LR__4420
2b6c8     02 26 06 F1 | 	add	local05, #2
2b6cc     18 24 06 F1 | 	add	local04, #24
2b6d0     12 27 62 FC | 	wrlong	local05, local04
2b6d4     08 24 06 F1 | 	add	local04, #8
2b6d8     12 29 62 FC | 	wrlong	local06, local04
2b6dc     14 27 02 F6 | 	mov	local05, local06
2b6e0     09 13 32 F9 | 	getword	arg01, arg01, #0
2b6e4     09 27 02 F1 | 	add	local05, arg01
2b6e8     04 24 06 F1 | 	add	local04, #4
2b6ec     12 27 62 FC | 	wrlong	local05, local04
2b6f0     14 27 02 F6 | 	mov	local05, local06
2b6f4     17 27 02 F1 | 	add	local05, local09
2b6f8     08 24 06 F1 | 	add	local04, #8
2b6fc     12 27 62 FC | 	wrlong	local05, local04
2b700     2C 24 86 F1 | 	sub	local04, #44
2b704     03 30 0E F2 | 	cmp	local10, #3 wz
2b708     5C 00 90 5D |  if_ne	jmp	#LR__4415
2b70c     34 24 06 F1 | 	add	local04, #52
2b710     12 13 02 F6 | 	mov	arg01, local04
2b714     34 24 86 F1 | 	sub	local04, #52
2b718     2A 12 06 F1 | 	add	arg01, #42
2b71c                 | ' {
2b71c                 | ' 
2b71c                 | ' 	return *((WORD*)ptr);
2b71c     09 FB E9 FA | 	rdword	result1, arg01 wz
2b720     0D FA 05 56 |  if_ne	mov	result1, #13
2b724     FC 01 90 5D |  if_ne	jmp	#LR__4420
2b728     08 24 06 F1 | 	add	local04, #8
2b72c     12 27 EA FA | 	rdword	local05, local04 wz
2b730     08 24 86 F1 | 	sub	local04, #8
2b734     0D FA 05 56 |  if_ne	mov	result1, #13
2b738     E8 01 90 5D |  if_ne	jmp	#LR__4420
2b73c     34 24 06 F1 | 	add	local04, #52
2b740     12 13 02 F6 | 	mov	arg01, local04
2b744     2C 12 06 F1 | 	add	arg01, #44
2b748                 | ' {
2b748                 | ' 
2b748                 | ' 	return *((DWORD*)ptr);
2b748     09 FB 01 FB | 	rdlong	result1, arg01
2b74c     0C 24 86 F1 | 	sub	local04, #12
2b750     12 FB 61 FC | 	wrlong	result1, local04
2b754     10 24 86 F1 | 	sub	local04, #16
2b758     12 33 02 FB | 	rdlong	local11, local04
2b75c     18 24 86 F1 | 	sub	local04, #24
2b760     02 32 66 F0 | 	shl	local11, #2
2b764     6C 00 90 FD | 	jmp	#LR__4417
2b768                 | LR__4415
2b768     08 24 06 F1 | 	add	local04, #8
2b76c     12 27 EA FA | 	rdword	local05, local04 wz
2b770     08 24 86 F1 | 	sub	local04, #8
2b774     0D FA 05 A6 |  if_e	mov	result1, #13
2b778     A8 01 90 AD |  if_e	jmp	#LR__4420
2b77c     24 24 06 F1 | 	add	local04, #36
2b780     12 27 02 FB | 	rdlong	local05, local04
2b784     15 27 02 F1 | 	add	local05, local07
2b788     04 24 06 F1 | 	add	local04, #4
2b78c     12 27 62 FC | 	wrlong	local05, local04
2b790     28 24 86 F1 | 	sub	local04, #40
2b794     02 30 0E F2 | 	cmp	local10, #2 wz
2b798     18 24 06 A1 |  if_e	add	local04, #24
2b79c     12 27 02 AB |  if_e	rdlong	local05, local04
2b7a0     18 24 86 A1 |  if_e	sub	local04, #24
2b7a4     01 26 66 A0 |  if_e	shl	local05, #1
2b7a8     24 00 90 AD |  if_e	jmp	#LR__4416
2b7ac     18 24 06 F1 | 	add	local04, #24
2b7b0     12 33 02 FB | 	rdlong	local11, local04
2b7b4     19 27 02 F6 | 	mov	local05, local11
2b7b8     01 26 66 F0 | 	shl	local05, #1
2b7bc     19 27 02 F1 | 	add	local05, local11
2b7c0     01 26 46 F0 | 	shr	local05, #1
2b7c4     18 24 86 F1 | 	sub	local04, #24
2b7c8     01 32 06 F5 | 	and	local11, #1
2b7cc     19 27 02 F1 | 	add	local05, local11
2b7d0                 | LR__4416
2b7d0     13 33 02 F6 | 	mov	local11, local05
2b7d4                 | LR__4417
2b7d4     FF 33 06 F1 | 	add	local11, #511
2b7d8     09 32 46 F0 | 	shr	local11, #9
2b7dc     1C 24 06 F1 | 	add	local04, #28
2b7e0     12 17 02 FB | 	rdlong	arg03, local04
2b7e4     1C 24 86 F1 | 	sub	local04, #28
2b7e8     19 17 12 F2 | 	cmp	arg03, local11 wc
2b7ec     0D FA 05 C6 |  if_b	mov	result1, #13
2b7f0     30 01 90 CD |  if_b	jmp	#LR__4420
2b7f4     14 24 06 F1 | 	add	local04, #20
2b7f8     FF FF FF FF 
2b7fc     12 FF 6B FC | 	wrlong	##-1, local04
2b800     04 24 86 F1 | 	sub	local04, #4
2b804     FF FF FF FF 
2b808     12 FF 6B FC | 	wrlong	##-1, local04
2b80c     0C 24 86 F1 | 	sub	local04, #12
2b810     12 01 49 FC | 	wrbyte	#128, local04
2b814     04 24 86 F1 | 	sub	local04, #4
2b818     03 30 0E F2 | 	cmp	local10, #3 wz
2b81c     D0 00 90 5D |  if_ne	jmp	#LR__4419
2b820     34 24 06 F1 | 	add	local04, #52
2b824     12 13 02 F6 | 	mov	arg01, local04
2b828     34 24 86 F1 | 	sub	local04, #52
2b82c     30 12 06 F1 | 	add	arg01, #48
2b830                 | ' {
2b830                 | ' 
2b830                 | ' 	return *((WORD*)ptr);
2b830     09 FB E1 FA | 	rdword	result1, arg01
2b834     FD 26 32 F9 | 	getword	local05, result1, #0
2b838     01 26 0E F2 | 	cmp	local05, #1 wz
2b83c     B0 00 90 5D |  if_ne	jmp	#LR__4419
2b840     01 28 06 F1 | 	add	local06, #1
2b844     12 13 02 F6 | 	mov	arg01, local04
2b848     14 15 02 F6 | 	mov	arg02, local06
2b84c     CC CD BF FD | 	call	#_fatfs_cc_move_window
2b850     00 FA 0D F2 | 	cmp	result1, #0 wz
2b854     98 00 90 5D |  if_ne	jmp	#LR__4419
2b858     04 24 06 F1 | 	add	local04, #4
2b85c     12 01 48 FC | 	wrbyte	#0, local04
2b860     30 24 06 F1 | 	add	local04, #48
2b864     12 13 02 F6 | 	mov	arg01, local04
2b868     34 24 86 F1 | 	sub	local04, #52
2b86c     FE 13 06 F1 | 	add	arg01, #510
2b870                 | ' {
2b870                 | ' 
2b870                 | ' 	return *((WORD*)ptr);
2b870     09 FB E1 FA | 	rdword	result1, arg01
2b874     FD 26 32 F9 | 	getword	local05, result1, #0
2b878     55 00 00 FF 
2b87c     55 26 0E F2 | 	cmp	local05, ##43605 wz
2b880     34 24 06 A1 |  if_e	add	local04, #52
2b884     12 13 02 A6 |  if_e	mov	arg01, local04
2b888     34 24 86 A1 |  if_e	sub	local04, #52
2b88c                 | ' {
2b88c                 | ' 
2b88c                 | ' 	return *((DWORD*)ptr);
2b88c     09 FB 01 AB |  if_e	rdlong	result1, arg01
2b890     A9 B0 20 AF 
2b894     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
2b898     54 00 90 5D |  if_ne	jmp	#LR__4418
2b89c     34 24 06 F1 | 	add	local04, #52
2b8a0     12 13 02 F6 | 	mov	arg01, local04
2b8a4     34 24 86 F1 | 	sub	local04, #52
2b8a8     E4 13 06 F1 | 	add	arg01, #484
2b8ac                 | ' {
2b8ac                 | ' 
2b8ac                 | ' 	return *((DWORD*)ptr);
2b8ac     09 FB 01 FB | 	rdlong	result1, arg01
2b8b0     B9 A0 30 FF 
2b8b4     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
2b8b8     34 00 90 5D |  if_ne	jmp	#LR__4418
2b8bc     34 24 06 F1 | 	add	local04, #52
2b8c0     12 13 02 F6 | 	mov	arg01, local04
2b8c4     E8 13 06 F1 | 	add	arg01, #488
2b8c8                 | ' {
2b8c8                 | ' 
2b8c8                 | ' 	return *((DWORD*)ptr);
2b8c8     09 FB 01 FB | 	rdlong	result1, arg01
2b8cc     20 24 86 F1 | 	sub	local04, #32
2b8d0     12 FB 61 FC | 	wrlong	result1, local04
2b8d4     20 24 06 F1 | 	add	local04, #32
2b8d8     12 13 02 F6 | 	mov	arg01, local04
2b8dc     EC 13 06 F1 | 	add	arg01, #492
2b8e0                 | ' {
2b8e0                 | ' 
2b8e0                 | ' 	return *((DWORD*)ptr);
2b8e0     09 FB 01 FB | 	rdlong	result1, arg01
2b8e4     24 24 86 F1 | 	sub	local04, #36
2b8e8     12 FB 61 FC | 	wrlong	result1, local04
2b8ec     10 24 86 F1 | 	sub	local04, #16
2b8f0                 | LR__4418
2b8f0                 | LR__4419
2b8f0     12 31 42 FC | 	wrbyte	local10, local04
2b8f4     04 E4 05 F1 | 	add	objptr, #4
2b8f8     F2 26 E2 FA | 	rdword	local05, objptr
2b8fc     01 26 06 F1 | 	add	local05, #1
2b900     F2 26 52 FC | 	wrword	local05, objptr
2b904     F2 32 E2 FA | 	rdword	local11, objptr
2b908     06 24 06 F1 | 	add	local04, #6
2b90c     12 33 52 FC | 	wrword	local11, local04
2b910     04 E4 05 F1 | 	add	objptr, #4
2b914     06 24 06 F1 | 	add	local04, #6
2b918     12 E5 61 FC | 	wrlong	objptr, local04
2b91c                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2b91c                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2b91c                 | ' 			{
2b91c                 | ' 
2b91c                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2b91c                 | ' 
2b91c                 | ' 
2b91c                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2b91c                 | ' 
2b91c                 | ' 			}
2b91c                 | ' 		}
2b91c                 | ' 
2b91c                 | ' 
2b91c                 | ' 	}
2b91c                 | ' 
2b91c                 | ' 	fs->fs_type = (BYTE)fmt;
2b91c                 | ' 	fs->id = ++Fsid;
2b91c                 | ' 
2b91c                 | ' 	fs->lfnbuf = LfnBuf;
2b91c                 | ' #line 3567 "ff.c"
2b91c                 | ' 	return FR_OK;
2b91c     00 FA 05 F6 | 	mov	result1, #0
2b920     08 E4 85 F1 | 	sub	objptr, #8
2b924                 | LR__4420
2b924     A7 F0 03 F6 | 	mov	ptra, fp
2b928     B2 00 A0 FD | 	call	#popregs_
2b92c                 | _fatfs_cc_mount_volume_ret
2b92c     2D 00 64 FD | 	ret
2b930                 | 
2b930                 | _fatfs_cc_validate
2b930     09 01 0A F6 | 	mov	_var01, arg01 wz
2b934     09 02 06 F6 | 	mov	_var02, #9
2b938     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2b93c     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2b940     50 00 90 AD |  if_e	jmp	#LR__4430
2b944     04 00 06 F1 | 	add	_var01, #4
2b948     00 07 E2 FA | 	rdword	_var04, _var01
2b94c     04 00 86 F1 | 	sub	_var01, #4
2b950     00 13 02 FB | 	rdlong	arg01, _var01
2b954     06 12 06 F1 | 	add	arg01, #6
2b958     09 FB E1 FA | 	rdword	result1, arg01
2b95c     FD 06 0A F2 | 	cmp	_var04, result1 wz
2b960     30 00 90 5D |  if_ne	jmp	#LR__4430
2b964     00 07 02 FB | 	rdlong	_var04, _var01
2b968     01 06 06 F1 | 	add	_var04, #1
2b96c     03 13 CA FA | 	rdbyte	arg01, _var04 wz
2b970     01 FA 05 56 |  if_ne	mov	result1, #1
2b974                 | ' 
2b974                 | ' 	return Stat;
2b974     01 00 00 AF 
2b978     20 E4 05 A1 |  if_e	add	objptr, ##544
2b97c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2b980     01 00 00 AF 
2b984     20 E4 85 A1 |  if_e	sub	objptr, ##544
2b988     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
2b98c     01 04 CE F7 | 	test	_var03, #1 wz
2b990     00 02 06 A6 |  if_e	mov	_var02, #0
2b994                 | LR__4430
2b994     00 02 0E F2 | 	cmp	_var02, #0 wz
2b998     00 05 02 AB |  if_e	rdlong	_var03, _var01
2b99c     00 04 06 56 |  if_ne	mov	_var03, #0
2b9a0     0A 05 62 FC | 	wrlong	_var03, arg02
2b9a4                 | ' 			res = FR_OK;
2b9a4                 | ' 		}
2b9a4                 | ' 
2b9a4                 | ' 	}
2b9a4                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2b9a4                 | ' 	return res;
2b9a4     01 FB 01 F6 | 	mov	result1, _var02
2b9a8                 | _fatfs_cc_validate_ret
2b9a8     2D 00 64 FD | 	ret
2b9ac                 | 
2b9ac                 | _fatfs_cc_f_mount
2b9ac     01 4A 05 F6 | 	mov	COUNT_, #1
2b9b0     A8 00 A0 FD | 	call	#pushregs_
2b9b4     20 F0 07 F1 | 	add	ptra, #32
2b9b8     04 4E 05 F1 | 	add	fp, #4
2b9bc     A7 12 62 FC | 	wrlong	arg01, fp
2b9c0     04 4E 05 F1 | 	add	fp, #4
2b9c4     A7 14 62 FC | 	wrlong	arg02, fp
2b9c8     04 4E 05 F1 | 	add	fp, #4
2b9cc     A7 16 42 FC | 	wrbyte	arg03, fp
2b9d0     04 4E 85 F1 | 	sub	fp, #4
2b9d4     A7 16 02 FB | 	rdlong	arg03, fp
2b9d8     14 4E 05 F1 | 	add	fp, #20
2b9dc     A7 16 62 FC | 	wrlong	arg03, fp
2b9e0     A7 12 02 F6 | 	mov	arg01, fp
2b9e4     1C 4E 85 F1 | 	sub	fp, #28
2b9e8     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2b9ec     14 4E 05 F1 | 	add	fp, #20
2b9f0     A7 FA 61 FC | 	wrlong	result1, fp
2b9f4     14 4E 85 F1 | 	sub	fp, #20
2b9f8     00 FA 55 F2 | 	cmps	result1, #0 wc
2b9fc     0B FA 05 C6 |  if_b	mov	result1, #11
2ba00     C0 00 90 CD |  if_b	jmp	#LR__4441
2ba04     14 4E 05 F1 | 	add	fp, #20
2ba08     A7 16 02 FB | 	rdlong	arg03, fp
2ba0c     02 16 66 F0 | 	shl	arg03, #2
2ba10     F2 16 02 F1 | 	add	arg03, objptr
2ba14     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2ba18     04 4E 85 F1 | 	sub	fp, #4
2ba1c     A7 16 62 FC | 	wrlong	arg03, fp
2ba20     10 4E 85 F1 | 	sub	fp, #16
2ba24     28 00 90 AD |  if_e	jmp	#LR__4440
2ba28     10 4E 05 F1 | 	add	fp, #16
2ba2c     A7 16 02 FB | 	rdlong	arg03, fp
2ba30     10 4E 85 F1 | 	sub	fp, #16
2ba34     01 16 06 F1 | 	add	arg03, #1
2ba38     0B 13 C2 FA | 	rdbyte	arg01, arg03
2ba3c     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2ba40     10 4E 05 F1 | 	add	fp, #16
2ba44     A7 16 02 FB | 	rdlong	arg03, fp
2ba48     10 4E 85 F1 | 	sub	fp, #16
2ba4c     0B 01 48 FC | 	wrbyte	#0, arg03
2ba50                 | LR__4440
2ba50     04 4E 05 F1 | 	add	fp, #4
2ba54     A7 1E 0A FB | 	rdlong	local01, fp wz
2ba58     04 4E 85 F1 | 	sub	fp, #4
2ba5c     04 4E 05 51 |  if_ne	add	fp, #4
2ba60     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2ba64     04 4E 85 51 |  if_ne	sub	fp, #4
2ba68     0F 01 48 5C |  if_ne	wrbyte	#0, local01
2ba6c     14 4E 05 F1 | 	add	fp, #20
2ba70     A7 1E 02 FB | 	rdlong	local01, fp
2ba74     02 1E 66 F0 | 	shl	local01, #2
2ba78     F2 1E 02 F1 | 	add	local01, objptr
2ba7c     10 4E 85 F1 | 	sub	fp, #16
2ba80     A7 16 02 FB | 	rdlong	arg03, fp
2ba84     0F 17 62 FC | 	wrlong	arg03, local01
2ba88     08 4E 05 F1 | 	add	fp, #8
2ba8c     A7 1E CA FA | 	rdbyte	local01, fp wz
2ba90     0C 4E 85 F1 | 	sub	fp, #12
2ba94     00 FA 05 A6 |  if_e	mov	result1, #0
2ba98     28 00 90 AD |  if_e	jmp	#LR__4441
2ba9c     08 4E 05 F1 | 	add	fp, #8
2baa0     A7 12 02 F6 | 	mov	arg01, fp
2baa4     04 4E 85 F1 | 	sub	fp, #4
2baa8     A7 14 02 F6 | 	mov	arg02, fp
2baac     04 4E 85 F1 | 	sub	fp, #4
2bab0     00 16 06 F6 | 	mov	arg03, #0
2bab4     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2bab8     18 4E 05 F1 | 	add	fp, #24
2babc     A7 FA 61 FC | 	wrlong	result1, fp
2bac0                 | ' 
2bac0                 | ' 	res = mount_volume(&path, &fs, 0);
2bac0                 | ' 	return res ;
2bac0     18 4E 85 F1 | 	sub	fp, #24
2bac4                 | LR__4441
2bac4     A7 F0 03 F6 | 	mov	ptra, fp
2bac8     B2 00 A0 FD | 	call	#popregs_
2bacc                 | _fatfs_cc_f_mount_ret
2bacc     2D 00 64 FD | 	ret
2bad0                 | 
2bad0                 | _fatfs_cc_f_open
2bad0     02 4A 05 F6 | 	mov	COUNT_, #2
2bad4     A8 00 A0 FD | 	call	#pushregs_
2bad8     60 F0 07 F1 | 	add	ptra, #96
2badc     04 4E 05 F1 | 	add	fp, #4
2bae0     A7 12 62 FC | 	wrlong	arg01, fp
2bae4     04 4E 05 F1 | 	add	fp, #4
2bae8     A7 14 62 FC | 	wrlong	arg02, fp
2baec     04 4E 05 F1 | 	add	fp, #4
2baf0     A7 16 42 FC | 	wrbyte	arg03, fp
2baf4     08 4E 85 F1 | 	sub	fp, #8
2baf8     A7 18 0A FB | 	rdlong	arg04, fp wz
2bafc     04 4E 85 F1 | 	sub	fp, #4
2bb00     09 FA 05 A6 |  if_e	mov	result1, #9
2bb04     98 06 90 AD |  if_e	jmp	#LR__4467
2bb08     0C 4E 05 F1 | 	add	fp, #12
2bb0c     A7 18 C2 FA | 	rdbyte	arg04, fp
2bb10     3F 18 06 F5 | 	and	arg04, #63
2bb14     A7 18 42 FC | 	wrbyte	arg04, fp
2bb18     04 4E 85 F1 | 	sub	fp, #4
2bb1c     A7 12 02 F6 | 	mov	arg01, fp
2bb20     3C 4E 05 F1 | 	add	fp, #60
2bb24     A7 14 02 F6 | 	mov	arg02, fp
2bb28     38 4E 85 F1 | 	sub	fp, #56
2bb2c     A7 16 C2 FA | 	rdbyte	arg03, fp
2bb30     0C 4E 85 F1 | 	sub	fp, #12
2bb34     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
2bb38     10 4E 05 F1 | 	add	fp, #16
2bb3c     A7 FA 61 FC | 	wrlong	result1, fp
2bb40     10 4E 85 F1 | 	sub	fp, #16
2bb44     00 FA 0D F2 | 	cmp	result1, #0 wz
2bb48     2C 06 90 5D |  if_ne	jmp	#LR__4466
2bb4c     44 4E 05 F1 | 	add	fp, #68
2bb50     A7 18 02 FB | 	rdlong	arg04, fp
2bb54     30 4E 85 F1 | 	sub	fp, #48
2bb58     A7 18 62 FC | 	wrlong	arg04, fp
2bb5c     A7 12 02 F6 | 	mov	arg01, fp
2bb60     0C 4E 85 F1 | 	sub	fp, #12
2bb64     A7 1E 02 FB | 	rdlong	local01, fp
2bb68     08 4E 85 F1 | 	sub	fp, #8
2bb6c     0F 15 02 F6 | 	mov	arg02, local01
2bb70     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
2bb74     10 4E 05 F1 | 	add	fp, #16
2bb78     A7 FA 61 FC | 	wrlong	result1, fp
2bb7c     10 4E 85 F1 | 	sub	fp, #16
2bb80     00 FA 0D F2 | 	cmp	result1, #0 wz
2bb84     1C 00 90 5D |  if_ne	jmp	#LR__4450
2bb88     3F 4E 05 F1 | 	add	fp, #63
2bb8c     A7 18 C2 FA | 	rdbyte	arg04, fp
2bb90     3F 4E 85 F1 | 	sub	fp, #63
2bb94     80 18 CE F7 | 	test	arg04, #128 wz
2bb98     10 4E 05 51 |  if_ne	add	fp, #16
2bb9c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2bba0     10 4E 85 51 |  if_ne	sub	fp, #16
2bba4                 | LR__4450
2bba4     0C 4E 05 F1 | 	add	fp, #12
2bba8     A7 18 C2 FA | 	rdbyte	arg04, fp
2bbac     0C 4E 85 F1 | 	sub	fp, #12
2bbb0     1C 18 CE F7 | 	test	arg04, #28 wz
2bbb4     F0 01 90 AD |  if_e	jmp	#LR__4455
2bbb8     10 4E 05 F1 | 	add	fp, #16
2bbbc     A7 1E 0A FB | 	rdlong	local01, fp wz
2bbc0     10 4E 85 F1 | 	sub	fp, #16
2bbc4     48 00 90 AD |  if_e	jmp	#LR__4452
2bbc8     10 4E 05 F1 | 	add	fp, #16
2bbcc     A7 18 02 FB | 	rdlong	arg04, fp
2bbd0     10 4E 85 F1 | 	sub	fp, #16
2bbd4     04 18 0E F2 | 	cmp	arg04, #4 wz
2bbd8     1C 00 90 5D |  if_ne	jmp	#LR__4451
2bbdc     14 4E 05 F1 | 	add	fp, #20
2bbe0     A7 12 02 F6 | 	mov	arg01, fp
2bbe4     14 4E 85 F1 | 	sub	fp, #20
2bbe8     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
2bbec     10 4E 05 F1 | 	add	fp, #16
2bbf0     A7 FA 61 FC | 	wrlong	result1, fp
2bbf4     10 4E 85 F1 | 	sub	fp, #16
2bbf8                 | LR__4451
2bbf8     0C 4E 05 F1 | 	add	fp, #12
2bbfc     A7 1E C2 FA | 	rdbyte	local01, fp
2bc00     08 1E 46 F5 | 	or	local01, #8
2bc04     A7 1E 42 FC | 	wrbyte	local01, fp
2bc08     0C 4E 85 F1 | 	sub	fp, #12
2bc0c     3C 00 90 FD | 	jmp	#LR__4454
2bc10                 | LR__4452
2bc10     1A 4E 05 F1 | 	add	fp, #26
2bc14     A7 1E C2 FA | 	rdbyte	local01, fp
2bc18     1A 4E 85 F1 | 	sub	fp, #26
2bc1c     11 1E CE F7 | 	test	local01, #17 wz
2bc20     10 4E 05 51 |  if_ne	add	fp, #16
2bc24     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2bc28     10 4E 85 51 |  if_ne	sub	fp, #16
2bc2c     1C 00 90 5D |  if_ne	jmp	#LR__4453
2bc30     0C 4E 05 F1 | 	add	fp, #12
2bc34     A7 1E C2 FA | 	rdbyte	local01, fp
2bc38     0C 4E 85 F1 | 	sub	fp, #12
2bc3c     04 1E CE F7 | 	test	local01, #4 wz
2bc40     10 4E 05 51 |  if_ne	add	fp, #16
2bc44     A7 10 68 5C |  if_ne	wrlong	#8, fp
2bc48     10 4E 85 51 |  if_ne	sub	fp, #16
2bc4c                 | LR__4453
2bc4c                 | LR__4454
2bc4c     10 4E 05 F1 | 	add	fp, #16
2bc50     A7 1E 0A FB | 	rdlong	local01, fp wz
2bc54     10 4E 85 F1 | 	sub	fp, #16
2bc58     A8 01 90 5D |  if_ne	jmp	#LR__4458
2bc5c     0C 4E 05 F1 | 	add	fp, #12
2bc60     A7 1E C2 FA | 	rdbyte	local01, fp
2bc64     0C 4E 85 F1 | 	sub	fp, #12
2bc68     08 1E CE F7 | 	test	local01, #8 wz
2bc6c     94 01 90 AD |  if_e	jmp	#LR__4458
2bc70     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
2bc74     54 4E 05 F1 | 	add	fp, #84
2bc78     A7 FA 61 FC | 	wrlong	result1, fp
2bc7c     24 4E 85 F1 | 	sub	fp, #36
2bc80     A7 12 02 FB | 	rdlong	arg01, fp
2bc84     0E 12 06 F1 | 	add	arg01, #14
2bc88     09 FB 61 FC | 	wrlong	result1, arg01
2bc8c     A7 12 02 FB | 	rdlong	arg01, fp
2bc90     16 12 06 F1 | 	add	arg01, #22
2bc94     24 4E 05 F1 | 	add	fp, #36
2bc98     A7 14 02 FB | 	rdlong	arg02, fp
2bc9c     09 15 62 FC | 	wrlong	arg02, arg01
2bca0     10 4E 85 F1 | 	sub	fp, #16
2bca4     A7 12 02 FB | 	rdlong	arg01, fp
2bca8     14 4E 85 F1 | 	sub	fp, #20
2bcac     A7 14 02 FB | 	rdlong	arg02, fp
2bcb0     30 4E 85 F1 | 	sub	fp, #48
2bcb4     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
2bcb8     48 4E 05 F1 | 	add	fp, #72
2bcbc     A7 FA 61 FC | 	wrlong	result1, fp
2bcc0     18 4E 85 F1 | 	sub	fp, #24
2bcc4     A7 1E 02 FB | 	rdlong	local01, fp
2bcc8     0B 1E 06 F1 | 	add	local01, #11
2bccc     0F 41 48 FC | 	wrbyte	#32, local01
2bcd0     14 4E 05 F1 | 	add	fp, #20
2bcd4     A7 12 02 FB | 	rdlong	arg01, fp
2bcd8     14 4E 85 F1 | 	sub	fp, #20
2bcdc     A7 14 02 FB | 	rdlong	arg02, fp
2bce0     30 4E 85 F1 | 	sub	fp, #48
2bce4     00 16 06 F6 | 	mov	arg03, #0
2bce8     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
2bcec     30 4E 05 F1 | 	add	fp, #48
2bcf0     A7 12 02 FB | 	rdlong	arg01, fp
2bcf4     1C 12 06 F1 | 	add	arg01, #28
2bcf8     09 01 68 FC | 	wrlong	#0, arg01
2bcfc     14 4E 05 F1 | 	add	fp, #20
2bd00     A7 1E 02 FB | 	rdlong	local01, fp
2bd04     03 1E 06 F1 | 	add	local01, #3
2bd08     0F 03 48 FC | 	wrbyte	#1, local01
2bd0c     04 4E 05 F1 | 	add	fp, #4
2bd10     A7 1E 0A FB | 	rdlong	local01, fp wz
2bd14     48 4E 85 F1 | 	sub	fp, #72
2bd18     E8 00 90 AD |  if_e	jmp	#LR__4458
2bd1c     44 4E 05 F1 | 	add	fp, #68
2bd20     A7 1E 02 FB | 	rdlong	local01, fp
2bd24     30 1E 06 F1 | 	add	local01, #48
2bd28     0F 1F 02 FB | 	rdlong	local01, local01
2bd2c     14 4E 05 F1 | 	add	fp, #20
2bd30     A7 1E 62 FC | 	wrlong	local01, fp
2bd34     44 4E 85 F1 | 	sub	fp, #68
2bd38     A7 12 02 F6 | 	mov	arg01, fp
2bd3c     34 4E 05 F1 | 	add	fp, #52
2bd40     A7 14 02 FB | 	rdlong	arg02, fp
2bd44     48 4E 85 F1 | 	sub	fp, #72
2bd48     00 16 06 F6 | 	mov	arg03, #0
2bd4c     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
2bd50     10 4E 05 F1 | 	add	fp, #16
2bd54     A7 FA 61 FC | 	wrlong	result1, fp
2bd58     10 4E 85 F1 | 	sub	fp, #16
2bd5c     00 FA 0D F2 | 	cmp	result1, #0 wz
2bd60     A0 00 90 5D |  if_ne	jmp	#LR__4458
2bd64     44 4E 05 F1 | 	add	fp, #68
2bd68     A7 12 02 FB | 	rdlong	arg01, fp
2bd6c     14 4E 05 F1 | 	add	fp, #20
2bd70     A7 14 02 FB | 	rdlong	arg02, fp
2bd74     58 4E 85 F1 | 	sub	fp, #88
2bd78     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
2bd7c     10 4E 05 F1 | 	add	fp, #16
2bd80     A7 FA 61 FC | 	wrlong	result1, fp
2bd84     34 4E 05 F1 | 	add	fp, #52
2bd88     A7 18 02 FB | 	rdlong	arg04, fp
2bd8c     04 4E 05 F1 | 	add	fp, #4
2bd90     A7 1E 02 FB | 	rdlong	local01, fp
2bd94     48 4E 85 F1 | 	sub	fp, #72
2bd98     01 1E 86 F1 | 	sub	local01, #1
2bd9c     10 18 06 F1 | 	add	arg04, #16
2bda0     0C 1F 62 FC | 	wrlong	local01, arg04
2bda4     5C 00 90 FD | 	jmp	#LR__4458
2bda8                 | LR__4455
2bda8     10 4E 05 F1 | 	add	fp, #16
2bdac     A7 18 0A FB | 	rdlong	arg04, fp wz
2bdb0     10 4E 85 F1 | 	sub	fp, #16
2bdb4     4C 00 90 5D |  if_ne	jmp	#LR__4457
2bdb8     1A 4E 05 F1 | 	add	fp, #26
2bdbc     A7 18 C2 FA | 	rdbyte	arg04, fp
2bdc0     1A 4E 85 F1 | 	sub	fp, #26
2bdc4     10 18 CE F7 | 	test	arg04, #16 wz
2bdc8     10 4E 05 51 |  if_ne	add	fp, #16
2bdcc     A7 08 68 5C |  if_ne	wrlong	#4, fp
2bdd0     10 4E 85 51 |  if_ne	sub	fp, #16
2bdd4     2C 00 90 5D |  if_ne	jmp	#LR__4456
2bdd8     0C 4E 05 F1 | 	add	fp, #12
2bddc     A7 18 C2 FA | 	rdbyte	arg04, fp
2bde0     0C 4E 85 F1 | 	sub	fp, #12
2bde4     02 18 CE F7 | 	test	arg04, #2 wz
2bde8     1A 4E 05 51 |  if_ne	add	fp, #26
2bdec     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
2bdf0     1A 4E 85 51 |  if_ne	sub	fp, #26
2bdf4     01 1E CE 57 |  if_ne	test	local01, #1 wz
2bdf8     10 4E 05 51 |  if_ne	add	fp, #16
2bdfc     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2be00     10 4E 85 51 |  if_ne	sub	fp, #16
2be04                 | LR__4456
2be04                 | LR__4457
2be04                 | LR__4458
2be04     10 4E 05 F1 | 	add	fp, #16
2be08     A7 1E 0A FB | 	rdlong	local01, fp wz
2be0c     10 4E 85 F1 | 	sub	fp, #16
2be10     60 00 90 5D |  if_ne	jmp	#LR__4459
2be14     0C 4E 05 F1 | 	add	fp, #12
2be18     A7 20 C2 FA | 	rdbyte	local02, fp
2be1c     0C 4E 85 F1 | 	sub	fp, #12
2be20     08 20 CE F7 | 	test	local02, #8 wz
2be24     0C 4E 05 51 |  if_ne	add	fp, #12
2be28     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
2be2c     40 20 46 55 |  if_ne	or	local02, #64
2be30     A7 20 42 5C |  if_ne	wrbyte	local02, fp
2be34     0C 4E 85 51 |  if_ne	sub	fp, #12
2be38     04 4E 05 F1 | 	add	fp, #4
2be3c     A7 20 02 FB | 	rdlong	local02, fp
2be40     40 4E 05 F1 | 	add	fp, #64
2be44     A7 1E 02 FB | 	rdlong	local01, fp
2be48     30 1E 06 F1 | 	add	local01, #48
2be4c     0F 1F 02 FB | 	rdlong	local01, local01
2be50     20 20 06 F1 | 	add	local02, #32
2be54     10 1F 62 FC | 	wrlong	local01, local02
2be58     40 4E 85 F1 | 	sub	fp, #64
2be5c     A7 20 02 FB | 	rdlong	local02, fp
2be60     2C 4E 05 F1 | 	add	fp, #44
2be64     A7 1E 02 FB | 	rdlong	local01, fp
2be68     30 4E 85 F1 | 	sub	fp, #48
2be6c     24 20 06 F1 | 	add	local02, #36
2be70     10 1F 62 FC | 	wrlong	local01, local02
2be74                 | LR__4459
2be74     10 4E 05 F1 | 	add	fp, #16
2be78     A7 20 0A FB | 	rdlong	local02, fp wz
2be7c     10 4E 85 F1 | 	sub	fp, #16
2be80     F4 02 90 5D |  if_ne	jmp	#LR__4465
2be84     04 4E 05 F1 | 	add	fp, #4
2be88     A7 20 02 FB | 	rdlong	local02, fp
2be8c     40 4E 05 F1 | 	add	fp, #64
2be90     A7 12 02 FB | 	rdlong	arg01, fp
2be94     14 4E 85 F1 | 	sub	fp, #20
2be98     A7 14 02 FB | 	rdlong	arg02, fp
2be9c     30 4E 85 F1 | 	sub	fp, #48
2bea0     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
2bea4     08 20 06 F1 | 	add	local02, #8
2bea8     10 FB 61 FC | 	wrlong	result1, local02
2beac     04 4E 05 F1 | 	add	fp, #4
2beb0     A7 20 02 FB | 	rdlong	local02, fp
2beb4     2C 4E 05 F1 | 	add	fp, #44
2beb8     A7 12 02 FB | 	rdlong	arg01, fp
2bebc     1C 12 06 F1 | 	add	arg01, #28
2bec0                 | ' {
2bec0                 | ' 
2bec0                 | ' 	return *((DWORD*)ptr);
2bec0     09 FB 01 FB | 	rdlong	result1, arg01
2bec4     0C 20 06 F1 | 	add	local02, #12
2bec8     10 FB 61 FC | 	wrlong	result1, local02
2becc     2C 4E 85 F1 | 	sub	fp, #44
2bed0     A7 20 02 FB | 	rdlong	local02, fp
2bed4     40 4E 05 F1 | 	add	fp, #64
2bed8     A7 1E 02 FB | 	rdlong	local01, fp
2bedc     10 1F 62 FC | 	wrlong	local01, local02
2bee0     40 4E 85 F1 | 	sub	fp, #64
2bee4     A7 20 02 FB | 	rdlong	local02, fp
2bee8     40 4E 05 F1 | 	add	fp, #64
2beec     A7 1E 02 FB | 	rdlong	local01, fp
2bef0     06 1E 06 F1 | 	add	local01, #6
2bef4     0F 1F E2 FA | 	rdword	local01, local01
2bef8     04 20 06 F1 | 	add	local02, #4
2befc     10 1F 52 FC | 	wrword	local01, local02
2bf00     40 4E 85 F1 | 	sub	fp, #64
2bf04     A7 20 02 FB | 	rdlong	local02, fp
2bf08     08 4E 05 F1 | 	add	fp, #8
2bf0c     A7 1E C2 FA | 	rdbyte	local01, fp
2bf10     10 20 06 F1 | 	add	local02, #16
2bf14     10 1F 42 FC | 	wrbyte	local01, local02
2bf18     08 4E 85 F1 | 	sub	fp, #8
2bf1c     A7 20 02 FB | 	rdlong	local02, fp
2bf20     11 20 06 F1 | 	add	local02, #17
2bf24     10 01 48 FC | 	wrbyte	#0, local02
2bf28     A7 20 02 FB | 	rdlong	local02, fp
2bf2c     1C 20 06 F1 | 	add	local02, #28
2bf30     10 01 68 FC | 	wrlong	#0, local02
2bf34     A7 20 02 FB | 	rdlong	local02, fp
2bf38     14 20 06 F1 | 	add	local02, #20
2bf3c     10 01 68 FC | 	wrlong	#0, local02
2bf40     A7 12 02 FB | 	rdlong	arg01, fp
2bf44     04 4E 85 F1 | 	sub	fp, #4
2bf48     28 12 06 F1 | 	add	arg01, #40
2bf4c     00 14 06 F6 | 	mov	arg02, #0
2bf50     09 16 C6 F9 | 	decod	arg03, #9
2bf54     98 00 A0 FD | 	call	#\builtin_bytefill_
2bf58     0C 4E 05 F1 | 	add	fp, #12
2bf5c     A7 20 C2 FA | 	rdbyte	local02, fp
2bf60     0C 4E 85 F1 | 	sub	fp, #12
2bf64     20 20 CE F7 | 	test	local02, #32 wz
2bf68     0C 02 90 AD |  if_e	jmp	#LR__4464
2bf6c     04 4E 05 F1 | 	add	fp, #4
2bf70     A7 1E 02 FB | 	rdlong	local01, fp
2bf74     04 4E 85 F1 | 	sub	fp, #4
2bf78     0C 1E 06 F1 | 	add	local01, #12
2bf7c     0F 21 02 FB | 	rdlong	local02, local01
2bf80     01 20 16 F2 | 	cmp	local02, #1 wc
2bf84     F0 01 90 CD |  if_b	jmp	#LR__4464
2bf88     04 4E 05 F1 | 	add	fp, #4
2bf8c     A7 1E 02 FB | 	rdlong	local01, fp
2bf90     0F 21 02 F6 | 	mov	local02, local01
2bf94     0C 1E 06 F1 | 	add	local01, #12
2bf98     0F 1F 02 FB | 	rdlong	local01, local01
2bf9c     14 20 06 F1 | 	add	local02, #20
2bfa0     10 1F 62 FC | 	wrlong	local01, local02
2bfa4     40 4E 05 F1 | 	add	fp, #64
2bfa8     A7 20 02 FB | 	rdlong	local02, fp
2bfac     0A 20 06 F1 | 	add	local02, #10
2bfb0     10 21 E2 FA | 	rdword	local02, local02
2bfb4     09 20 66 F0 | 	shl	local02, #9
2bfb8     08 4E 05 F1 | 	add	fp, #8
2bfbc     A7 20 62 FC | 	wrlong	local02, fp
2bfc0     48 4E 85 F1 | 	sub	fp, #72
2bfc4     A7 20 02 FB | 	rdlong	local02, fp
2bfc8     08 20 06 F1 | 	add	local02, #8
2bfcc     10 1F 02 FB | 	rdlong	local01, local02
2bfd0     4C 4E 05 F1 | 	add	fp, #76
2bfd4     A7 1E 62 FC | 	wrlong	local01, fp
2bfd8                 | ' 				fp->fptr = fp->obj.objsize;
2bfd8                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2bfd8                 | ' 				clst = fp->obj.sclust;
2bfd8                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2bfd8     4C 4E 85 F1 | 	sub	fp, #76
2bfdc     A7 20 02 FB | 	rdlong	local02, fp
2bfe0     0C 20 06 F1 | 	add	local02, #12
2bfe4     10 1F 02 FB | 	rdlong	local01, local02
2bfe8     58 4E 05 F1 | 	add	fp, #88
2bfec     A7 1E 62 FC | 	wrlong	local01, fp
2bff0     5C 4E 85 F1 | 	sub	fp, #92
2bff4                 | LR__4460
2bff4     10 4E 05 F1 | 	add	fp, #16
2bff8     A7 20 0A FB | 	rdlong	local02, fp wz
2bffc     10 4E 85 F1 | 	sub	fp, #16
2c000     94 00 90 5D |  if_ne	jmp	#LR__4461
2c004     5C 4E 05 F1 | 	add	fp, #92
2c008     A7 20 02 FB | 	rdlong	local02, fp
2c00c     10 4E 85 F1 | 	sub	fp, #16
2c010     A7 1E 02 FB | 	rdlong	local01, fp
2c014     4C 4E 85 F1 | 	sub	fp, #76
2c018     0F 21 1A F2 | 	cmp	local02, local01 wcz
2c01c     78 00 90 ED |  if_be	jmp	#LR__4461
2c020     04 4E 05 F1 | 	add	fp, #4
2c024     A7 12 02 FB | 	rdlong	arg01, fp
2c028     4C 4E 05 F1 | 	add	fp, #76
2c02c     A7 14 02 FB | 	rdlong	arg02, fp
2c030     50 4E 85 F1 | 	sub	fp, #80
2c034     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
2c038     50 4E 05 F1 | 	add	fp, #80
2c03c     A7 FA 61 FC | 	wrlong	result1, fp
2c040     50 4E 85 F1 | 	sub	fp, #80
2c044     02 FA 15 F2 | 	cmp	result1, #2 wc
2c048     10 4E 05 C1 |  if_b	add	fp, #16
2c04c     A7 04 68 CC |  if_b	wrlong	#2, fp
2c050     10 4E 85 C1 |  if_b	sub	fp, #16
2c054     50 4E 05 F1 | 	add	fp, #80
2c058     A7 20 02 FB | 	rdlong	local02, fp
2c05c     50 4E 85 F1 | 	sub	fp, #80
2c060     FF FF 7F FF 
2c064     FF 21 0E F2 | 	cmp	local02, ##-1 wz
2c068     10 4E 05 A1 |  if_e	add	fp, #16
2c06c     A7 02 68 AC |  if_e	wrlong	#1, fp
2c070     10 4E 85 A1 |  if_e	sub	fp, #16
2c074     5C 4E 05 F1 | 	add	fp, #92
2c078     A7 20 02 FB | 	rdlong	local02, fp
2c07c     10 4E 85 F1 | 	sub	fp, #16
2c080     A7 1E 02 FB | 	rdlong	local01, fp
2c084     0F 21 82 F1 | 	sub	local02, local01
2c088     10 4E 05 F1 | 	add	fp, #16
2c08c     A7 20 62 FC | 	wrlong	local02, fp
2c090     5C 4E 85 F1 | 	sub	fp, #92
2c094     5C FF 9F FD | 	jmp	#LR__4460
2c098                 | LR__4461
2c098     04 4E 05 F1 | 	add	fp, #4
2c09c     A7 20 02 FB | 	rdlong	local02, fp
2c0a0     4C 4E 05 F1 | 	add	fp, #76
2c0a4     A7 1E 02 FB | 	rdlong	local01, fp
2c0a8     18 20 06 F1 | 	add	local02, #24
2c0ac     10 1F 62 FC | 	wrlong	local01, local02
2c0b0     40 4E 85 F1 | 	sub	fp, #64
2c0b4     A7 20 0A FB | 	rdlong	local02, fp wz
2c0b8     10 4E 85 F1 | 	sub	fp, #16
2c0bc     B8 00 90 5D |  if_ne	jmp	#LR__4463
2c0c0     5C 4E 05 F1 | 	add	fp, #92
2c0c4     A7 1E 02 FB | 	rdlong	local01, fp
2c0c8     5C 4E 85 F1 | 	sub	fp, #92
2c0cc     FF 1F CE F7 | 	test	local01, #511 wz
2c0d0     A4 00 90 AD |  if_e	jmp	#LR__4463
2c0d4     44 4E 05 F1 | 	add	fp, #68
2c0d8     A7 12 02 FB | 	rdlong	arg01, fp
2c0dc     0C 4E 05 F1 | 	add	fp, #12
2c0e0     A7 14 02 FB | 	rdlong	arg02, fp
2c0e4     50 4E 85 F1 | 	sub	fp, #80
2c0e8     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
2c0ec     58 4E 05 F1 | 	add	fp, #88
2c0f0     A7 FA 61 FC | 	wrlong	result1, fp
2c0f4     00 FA 4D F2 | 	cmps	result1, #0 wz
2c0f8     58 4E 85 F1 | 	sub	fp, #88
2c0fc     10 4E 05 A1 |  if_e	add	fp, #16
2c100     A7 04 68 AC |  if_e	wrlong	#2, fp
2c104     10 4E 85 A1 |  if_e	sub	fp, #16
2c108     6C 00 90 AD |  if_e	jmp	#LR__4462
2c10c     04 4E 05 F1 | 	add	fp, #4
2c110     A7 20 02 FB | 	rdlong	local02, fp
2c114     54 4E 05 F1 | 	add	fp, #84
2c118     A7 1E 02 FB | 	rdlong	local01, fp
2c11c     04 4E 05 F1 | 	add	fp, #4
2c120     A7 18 02 FB | 	rdlong	arg04, fp
2c124     09 18 46 F0 | 	shr	arg04, #9
2c128     0C 1F 02 F1 | 	add	local01, arg04
2c12c     1C 20 06 F1 | 	add	local02, #28
2c130     10 1F 62 FC | 	wrlong	local01, local02
2c134     18 4E 85 F1 | 	sub	fp, #24
2c138     A7 20 02 FB | 	rdlong	local02, fp
2c13c     01 20 06 F1 | 	add	local02, #1
2c140     10 13 C2 FA | 	rdbyte	arg01, local02
2c144     40 4E 85 F1 | 	sub	fp, #64
2c148     A7 20 02 FB | 	rdlong	local02, fp
2c14c     10 15 02 F6 | 	mov	arg02, local02
2c150     28 14 06 F1 | 	add	arg02, #40
2c154     04 4E 85 F1 | 	sub	fp, #4
2c158     1C 20 06 F1 | 	add	local02, #28
2c15c     10 17 02 FB | 	rdlong	arg03, local02
2c160     01 18 06 F6 | 	mov	arg04, #1
2c164     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
2c168     00 FA 0D F2 | 	cmp	result1, #0 wz
2c16c     10 4E 05 51 |  if_ne	add	fp, #16
2c170     A7 02 68 5C |  if_ne	wrlong	#1, fp
2c174     10 4E 85 51 |  if_ne	sub	fp, #16
2c178                 | LR__4462
2c178                 | LR__4463
2c178                 | LR__4464
2c178                 | LR__4465
2c178                 | LR__4466
2c178     10 4E 05 F1 | 	add	fp, #16
2c17c     A7 20 0A FB | 	rdlong	local02, fp wz
2c180     10 4E 85 F1 | 	sub	fp, #16
2c184     04 4E 05 51 |  if_ne	add	fp, #4
2c188     A7 20 02 5B |  if_ne	rdlong	local02, fp
2c18c     04 4E 85 51 |  if_ne	sub	fp, #4
2c190     10 01 68 5C |  if_ne	wrlong	#0, local02
2c194                 | ' 
2c194                 | ' 	return res ;
2c194     10 4E 05 F1 | 	add	fp, #16
2c198     A7 FA 01 FB | 	rdlong	result1, fp
2c19c     10 4E 85 F1 | 	sub	fp, #16
2c1a0                 | LR__4467
2c1a0     A7 F0 03 F6 | 	mov	ptra, fp
2c1a4     B2 00 A0 FD | 	call	#popregs_
2c1a8                 | _fatfs_cc_f_open_ret
2c1a8     2D 00 64 FD | 	ret
2c1ac                 | 
2c1ac                 | _fatfs_cc_f_read
2c1ac     0E 4A 05 F6 | 	mov	COUNT_, #14
2c1b0     A8 00 A0 FD | 	call	#pushregs_
2c1b4     38 F0 07 F1 | 	add	ptra, #56
2c1b8     04 4E 05 F1 | 	add	fp, #4
2c1bc     A7 12 62 FC | 	wrlong	arg01, fp
2c1c0     04 4E 05 F1 | 	add	fp, #4
2c1c4     A7 14 62 FC | 	wrlong	arg02, fp
2c1c8     04 4E 05 F1 | 	add	fp, #4
2c1cc     A7 16 62 FC | 	wrlong	arg03, fp
2c1d0     04 4E 05 F1 | 	add	fp, #4
2c1d4     A7 18 62 FC | 	wrlong	arg04, fp
2c1d8     08 4E 85 F1 | 	sub	fp, #8
2c1dc     A7 FA 01 FB | 	rdlong	result1, fp
2c1e0     2C 4E 05 F1 | 	add	fp, #44
2c1e4     A7 FA 61 FC | 	wrlong	result1, fp
2c1e8     24 4E 85 F1 | 	sub	fp, #36
2c1ec     A7 FA 01 FB | 	rdlong	result1, fp
2c1f0     FD 00 68 FC | 	wrlong	#0, result1
2c1f4     0C 4E 85 F1 | 	sub	fp, #12
2c1f8     A7 12 02 FB | 	rdlong	arg01, fp
2c1fc     14 4E 05 F1 | 	add	fp, #20
2c200     A7 14 02 F6 | 	mov	arg02, fp
2c204     18 4E 85 F1 | 	sub	fp, #24
2c208     24 F7 BF FD | 	call	#_fatfs_cc_validate
2c20c     14 4E 05 F1 | 	add	fp, #20
2c210     A7 FA 61 FC | 	wrlong	result1, fp
2c214     00 FA 4D F2 | 	cmps	result1, #0 wz
2c218     14 4E 85 F1 | 	sub	fp, #20
2c21c     20 00 90 5D |  if_ne	jmp	#LR__4470
2c220     04 4E 05 F1 | 	add	fp, #4
2c224     A7 14 02 FB | 	rdlong	arg02, fp
2c228     11 14 06 F1 | 	add	arg02, #17
2c22c     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2c230     10 4E 05 F1 | 	add	fp, #16
2c234     A7 14 62 FC | 	wrlong	arg02, fp
2c238     14 4E 85 F1 | 	sub	fp, #20
2c23c     10 00 90 AD |  if_e	jmp	#LR__4471
2c240                 | LR__4470
2c240     14 4E 05 F1 | 	add	fp, #20
2c244     A7 FA 01 FB | 	rdlong	result1, fp
2c248     14 4E 85 F1 | 	sub	fp, #20
2c24c     EC 05 90 FD | 	jmp	#LR__4490
2c250                 | LR__4471
2c250     04 4E 05 F1 | 	add	fp, #4
2c254     A7 18 02 FB | 	rdlong	arg04, fp
2c258     04 4E 85 F1 | 	sub	fp, #4
2c25c     10 18 06 F1 | 	add	arg04, #16
2c260     0C 19 C2 FA | 	rdbyte	arg04, arg04
2c264     01 18 CE F7 | 	test	arg04, #1 wz
2c268     07 FA 05 A6 |  if_e	mov	result1, #7
2c26c     CC 05 90 AD |  if_e	jmp	#LR__4490
2c270     04 4E 05 F1 | 	add	fp, #4
2c274     A7 1E 02 FB | 	rdlong	local01, fp
2c278     0F 21 02 F6 | 	mov	local02, local01
2c27c     0C 20 06 F1 | 	add	local02, #12
2c280     10 23 02 FB | 	rdlong	local03, local02
2c284     14 1E 06 F1 | 	add	local01, #20
2c288     0F 1F 02 FB | 	rdlong	local01, local01
2c28c     0F 23 82 F1 | 	sub	local03, local01
2c290     20 4E 05 F1 | 	add	fp, #32
2c294     A7 22 62 FC | 	wrlong	local03, fp
2c298     18 4E 85 F1 | 	sub	fp, #24
2c29c     A7 24 02 FB | 	rdlong	local04, fp
2c2a0     0C 4E 85 F1 | 	sub	fp, #12
2c2a4     11 25 1A F2 | 	cmp	local04, local03 wcz
2c2a8     24 4E 05 11 |  if_a	add	fp, #36
2c2ac     A7 24 02 1B |  if_a	rdlong	local04, fp
2c2b0     18 4E 85 11 |  if_a	sub	fp, #24
2c2b4     A7 24 62 1C |  if_a	wrlong	local04, fp
2c2b8     0C 4E 85 11 |  if_a	sub	fp, #12
2c2bc                 | ' 
2c2bc                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2c2bc                 | LR__4472
2c2bc     0C 4E 05 F1 | 	add	fp, #12
2c2c0     A7 20 02 FB | 	rdlong	local02, fp
2c2c4     0C 4E 85 F1 | 	sub	fp, #12
2c2c8     10 25 02 F6 | 	mov	local04, local02
2c2cc     01 24 16 F2 | 	cmp	local04, #1 wc
2c2d0     64 05 90 CD |  if_b	jmp	#LR__4489
2c2d4     04 4E 05 F1 | 	add	fp, #4
2c2d8     A7 22 02 FB | 	rdlong	local03, fp
2c2dc     04 4E 85 F1 | 	sub	fp, #4
2c2e0     14 22 06 F1 | 	add	local03, #20
2c2e4     11 23 02 FB | 	rdlong	local03, local03
2c2e8     FF 23 CE F7 | 	test	local03, #511 wz
2c2ec     3C 04 90 5D |  if_ne	jmp	#LR__4487
2c2f0     04 4E 05 F1 | 	add	fp, #4
2c2f4     A7 1E 02 FB | 	rdlong	local01, fp
2c2f8     14 1E 06 F1 | 	add	local01, #20
2c2fc     0F 23 02 FB | 	rdlong	local03, local01
2c300     09 22 46 F0 | 	shr	local03, #9
2c304     14 4E 05 F1 | 	add	fp, #20
2c308     A7 26 02 FB | 	rdlong	local05, fp
2c30c     13 29 02 F6 | 	mov	local06, local05
2c310     0A 28 06 F1 | 	add	local06, #10
2c314     14 2B E2 FA | 	rdword	local07, local06
2c318     0A 28 86 F1 | 	sub	local06, #10
2c31c     15 2D 32 F9 | 	getword	local08, local07, #0
2c320     01 2C 86 F1 | 	sub	local08, #1
2c324     16 23 0A F5 | 	and	local03, local08 wz
2c328     18 4E 05 F1 | 	add	fp, #24
2c32c     A7 22 62 FC | 	wrlong	local03, fp
2c330     30 4E 85 F1 | 	sub	fp, #48
2c334     E0 00 90 5D |  if_ne	jmp	#LR__4477
2c338     04 4E 05 F1 | 	add	fp, #4
2c33c     A7 22 02 FB | 	rdlong	local03, fp
2c340     04 4E 85 F1 | 	sub	fp, #4
2c344     14 22 06 F1 | 	add	local03, #20
2c348     11 23 0A FB | 	rdlong	local03, local03 wz
2c34c     20 00 90 5D |  if_ne	jmp	#LR__4473
2c350     04 4E 05 F1 | 	add	fp, #4
2c354     A7 22 02 FB | 	rdlong	local03, fp
2c358     08 22 06 F1 | 	add	local03, #8
2c35c     11 23 02 FB | 	rdlong	local03, local03
2c360     18 4E 05 F1 | 	add	fp, #24
2c364     A7 22 62 FC | 	wrlong	local03, fp
2c368     1C 4E 85 F1 | 	sub	fp, #28
2c36c     28 00 90 FD | 	jmp	#LR__4474
2c370                 | LR__4473
2c370     04 4E 05 F1 | 	add	fp, #4
2c374     A7 2C 02 FB | 	rdlong	local08, fp
2c378     16 13 02 F6 | 	mov	arg01, local08
2c37c     04 4E 85 F1 | 	sub	fp, #4
2c380     18 2C 06 F1 | 	add	local08, #24
2c384     16 15 02 FB | 	rdlong	arg02, local08
2c388     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
2c38c     1C 4E 05 F1 | 	add	fp, #28
2c390     A7 FA 61 FC | 	wrlong	result1, fp
2c394     1C 4E 85 F1 | 	sub	fp, #28
2c398                 | LR__4474
2c398     1C 4E 05 F1 | 	add	fp, #28
2c39c     A7 22 02 FB | 	rdlong	local03, fp
2c3a0     1C 4E 85 F1 | 	sub	fp, #28
2c3a4     02 22 16 F2 | 	cmp	local03, #2 wc
2c3a8     1C 00 90 3D |  if_ae	jmp	#LR__4475
2c3ac     04 4E 05 F1 | 	add	fp, #4
2c3b0     A7 22 02 FB | 	rdlong	local03, fp
2c3b4     04 4E 85 F1 | 	sub	fp, #4
2c3b8     11 22 06 F1 | 	add	local03, #17
2c3bc     11 05 48 FC | 	wrbyte	#2, local03
2c3c0     02 FA 05 F6 | 	mov	result1, #2
2c3c4     74 04 90 FD | 	jmp	#LR__4490
2c3c8                 | LR__4475
2c3c8     1C 4E 05 F1 | 	add	fp, #28
2c3cc     A7 22 02 FB | 	rdlong	local03, fp
2c3d0     1C 4E 85 F1 | 	sub	fp, #28
2c3d4     FF FF 7F FF 
2c3d8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
2c3dc     1C 00 90 5D |  if_ne	jmp	#LR__4476
2c3e0     04 4E 05 F1 | 	add	fp, #4
2c3e4     A7 22 02 FB | 	rdlong	local03, fp
2c3e8     04 4E 85 F1 | 	sub	fp, #4
2c3ec     11 22 06 F1 | 	add	local03, #17
2c3f0     11 03 48 FC | 	wrbyte	#1, local03
2c3f4     01 FA 05 F6 | 	mov	result1, #1
2c3f8     40 04 90 FD | 	jmp	#LR__4490
2c3fc                 | LR__4476
2c3fc     04 4E 05 F1 | 	add	fp, #4
2c400     A7 22 02 FB | 	rdlong	local03, fp
2c404     18 4E 05 F1 | 	add	fp, #24
2c408     A7 2C 02 FB | 	rdlong	local08, fp
2c40c     1C 4E 85 F1 | 	sub	fp, #28
2c410     18 22 06 F1 | 	add	local03, #24
2c414     11 2D 62 FC | 	wrlong	local08, local03
2c418                 | LR__4477
2c418     18 4E 05 F1 | 	add	fp, #24
2c41c     A7 12 02 FB | 	rdlong	arg01, fp
2c420     14 4E 85 F1 | 	sub	fp, #20
2c424     A7 22 02 FB | 	rdlong	local03, fp
2c428     04 4E 85 F1 | 	sub	fp, #4
2c42c     18 22 06 F1 | 	add	local03, #24
2c430     11 15 02 FB | 	rdlong	arg02, local03
2c434     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
2c438     20 4E 05 F1 | 	add	fp, #32
2c43c     A7 FA 61 FC | 	wrlong	result1, fp
2c440     20 4E 85 F1 | 	sub	fp, #32
2c444     00 FA 0D F2 | 	cmp	result1, #0 wz
2c448     1C 00 90 5D |  if_ne	jmp	#LR__4478
2c44c     04 4E 05 F1 | 	add	fp, #4
2c450     A7 22 02 FB | 	rdlong	local03, fp
2c454     04 4E 85 F1 | 	sub	fp, #4
2c458     11 22 06 F1 | 	add	local03, #17
2c45c     11 05 48 FC | 	wrbyte	#2, local03
2c460     02 FA 05 F6 | 	mov	result1, #2
2c464     D4 03 90 FD | 	jmp	#LR__4490
2c468                 | LR__4478
2c468     20 4E 05 F1 | 	add	fp, #32
2c46c     A7 22 02 FB | 	rdlong	local03, fp
2c470     10 4E 05 F1 | 	add	fp, #16
2c474     A7 2C 02 FB | 	rdlong	local08, fp
2c478     16 23 02 F1 | 	add	local03, local08
2c47c     10 4E 85 F1 | 	sub	fp, #16
2c480     A7 22 62 FC | 	wrlong	local03, fp
2c484     14 4E 85 F1 | 	sub	fp, #20
2c488     A7 22 02 FB | 	rdlong	local03, fp
2c48c     09 22 46 F0 | 	shr	local03, #9
2c490     20 4E 05 F1 | 	add	fp, #32
2c494     A7 22 62 FC | 	wrlong	local03, fp
2c498     2C 4E 85 F1 | 	sub	fp, #44
2c49c     01 22 16 F2 | 	cmp	local03, #1 wc
2c4a0     5C 01 90 CD |  if_b	jmp	#LR__4482
2c4a4     30 4E 05 F1 | 	add	fp, #48
2c4a8     A7 22 02 FB | 	rdlong	local03, fp
2c4ac     04 4E 85 F1 | 	sub	fp, #4
2c4b0     A7 2C 02 FB | 	rdlong	local08, fp
2c4b4     16 23 02 F1 | 	add	local03, local08
2c4b8     14 4E 85 F1 | 	sub	fp, #20
2c4bc     A7 2C 02 FB | 	rdlong	local08, fp
2c4c0     18 4E 85 F1 | 	sub	fp, #24
2c4c4     0A 2C 06 F1 | 	add	local08, #10
2c4c8     16 2D E2 FA | 	rdword	local08, local08
2c4cc     16 23 1A F2 | 	cmp	local03, local08 wcz
2c4d0     28 00 90 ED |  if_be	jmp	#LR__4479
2c4d4     18 4E 05 F1 | 	add	fp, #24
2c4d8     A7 1E 02 FB | 	rdlong	local01, fp
2c4dc     0A 1E 06 F1 | 	add	local01, #10
2c4e0     0F 23 E2 FA | 	rdword	local03, local01
2c4e4     18 4E 05 F1 | 	add	fp, #24
2c4e8     A7 2C 02 FB | 	rdlong	local08, fp
2c4ec     16 23 82 F1 | 	sub	local03, local08
2c4f0     04 4E 85 F1 | 	sub	fp, #4
2c4f4     A7 22 62 FC | 	wrlong	local03, fp
2c4f8     2C 4E 85 F1 | 	sub	fp, #44
2c4fc                 | LR__4479
2c4fc     18 4E 05 F1 | 	add	fp, #24
2c500     A7 1E 02 FB | 	rdlong	local01, fp
2c504     01 1E 06 F1 | 	add	local01, #1
2c508     0F 13 C2 FA | 	rdbyte	arg01, local01
2c50c     1C 4E 05 F1 | 	add	fp, #28
2c510     A7 14 02 FB | 	rdlong	arg02, fp
2c514     14 4E 85 F1 | 	sub	fp, #20
2c518     A7 16 02 FB | 	rdlong	arg03, fp
2c51c     0C 4E 05 F1 | 	add	fp, #12
2c520     A7 18 02 FB | 	rdlong	arg04, fp
2c524     2C 4E 85 F1 | 	sub	fp, #44
2c528     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2c52c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c530     1C 00 90 AD |  if_e	jmp	#LR__4480
2c534     04 4E 05 F1 | 	add	fp, #4
2c538     A7 22 02 FB | 	rdlong	local03, fp
2c53c     04 4E 85 F1 | 	sub	fp, #4
2c540     11 22 06 F1 | 	add	local03, #17
2c544     11 03 48 FC | 	wrbyte	#1, local03
2c548     01 FA 05 F6 | 	mov	result1, #1
2c54c     EC 02 90 FD | 	jmp	#LR__4490
2c550                 | LR__4480
2c550     04 4E 05 F1 | 	add	fp, #4
2c554     A7 1E 02 FB | 	rdlong	local01, fp
2c558     04 4E 85 F1 | 	sub	fp, #4
2c55c     10 1E 06 F1 | 	add	local01, #16
2c560     0F 23 C2 FA | 	rdbyte	local03, local01
2c564     80 22 CE F7 | 	test	local03, #128 wz
2c568     78 00 90 AD |  if_e	jmp	#LR__4481
2c56c     04 4E 05 F1 | 	add	fp, #4
2c570     A7 2C 02 FB | 	rdlong	local08, fp
2c574     1C 2C 06 F1 | 	add	local08, #28
2c578     16 2D 02 FB | 	rdlong	local08, local08
2c57c     1C 4E 05 F1 | 	add	fp, #28
2c580     A7 2E 02 FB | 	rdlong	local09, fp
2c584     17 2D 82 F1 | 	sub	local08, local09
2c588     0C 4E 05 F1 | 	add	fp, #12
2c58c     A7 30 02 FB | 	rdlong	local10, fp
2c590     2C 4E 85 F1 | 	sub	fp, #44
2c594     18 33 02 F6 | 	mov	local11, local10
2c598     19 2D 12 F2 | 	cmp	local08, local11 wc
2c59c     44 00 90 3D |  if_ae	jmp	#LR__4481
2c5a0     34 4E 05 F1 | 	add	fp, #52
2c5a4     A7 12 02 FB | 	rdlong	arg01, fp
2c5a8     30 4E 85 F1 | 	sub	fp, #48
2c5ac     A7 14 02 FB | 	rdlong	arg02, fp
2c5b0     0A 33 02 F6 | 	mov	local11, arg02
2c5b4     1C 32 06 F1 | 	add	local11, #28
2c5b8     19 2F 02 FB | 	rdlong	local09, local11
2c5bc     1C 4E 05 F1 | 	add	fp, #28
2c5c0     A7 26 02 FB | 	rdlong	local05, fp
2c5c4     13 2F 82 F1 | 	sub	local09, local05
2c5c8     09 2E 66 F0 | 	shl	local09, #9
2c5cc     17 33 02 F6 | 	mov	local11, local09
2c5d0     17 13 02 F1 | 	add	arg01, local09
2c5d4     20 4E 85 F1 | 	sub	fp, #32
2c5d8     28 14 06 F1 | 	add	arg02, #40
2c5dc     09 16 C6 F9 | 	decod	arg03, #9
2c5e0     4C 46 BF FD | 	call	#__system____builtin_memmove
2c5e4                 | LR__4481
2c5e4     2C 4E 05 F1 | 	add	fp, #44
2c5e8     A7 22 02 FB | 	rdlong	local03, fp
2c5ec     09 22 66 F0 | 	shl	local03, #9
2c5f0     04 4E 85 F1 | 	sub	fp, #4
2c5f4     A7 22 62 FC | 	wrlong	local03, fp
2c5f8     28 4E 85 F1 | 	sub	fp, #40
2c5fc                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2c5fc                 | ' 				}
2c5fc                 | ' 
2c5fc                 | ' 
2c5fc                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2c5fc                 | ' 				continue;
2c5fc     B4 01 90 FD | 	jmp	#LR__4488
2c600                 | LR__4482
2c600     04 4E 05 F1 | 	add	fp, #4
2c604     A7 22 02 FB | 	rdlong	local03, fp
2c608     1C 22 06 F1 | 	add	local03, #28
2c60c     11 23 02 FB | 	rdlong	local03, local03
2c610     1C 4E 05 F1 | 	add	fp, #28
2c614     A7 1E 02 FB | 	rdlong	local01, fp
2c618     20 4E 85 F1 | 	sub	fp, #32
2c61c     0F 23 0A F2 | 	cmp	local03, local01 wz
2c620     EC 00 90 AD |  if_e	jmp	#LR__4486
2c624     04 4E 05 F1 | 	add	fp, #4
2c628     A7 1E 02 FB | 	rdlong	local01, fp
2c62c     04 4E 85 F1 | 	sub	fp, #4
2c630     10 1E 06 F1 | 	add	local01, #16
2c634     0F 23 C2 FA | 	rdbyte	local03, local01
2c638     80 22 CE F7 | 	test	local03, #128 wz
2c63c     7C 00 90 AD |  if_e	jmp	#LR__4484
2c640     18 4E 05 F1 | 	add	fp, #24
2c644     A7 1E 02 FB | 	rdlong	local01, fp
2c648     01 1E 06 F1 | 	add	local01, #1
2c64c     0F 13 C2 FA | 	rdbyte	arg01, local01
2c650     14 4E 85 F1 | 	sub	fp, #20
2c654     A7 22 02 FB | 	rdlong	local03, fp
2c658     11 15 02 F6 | 	mov	arg02, local03
2c65c     28 14 06 F1 | 	add	arg02, #40
2c660     04 4E 85 F1 | 	sub	fp, #4
2c664     1C 22 06 F1 | 	add	local03, #28
2c668     11 17 02 FB | 	rdlong	arg03, local03
2c66c     01 18 06 F6 | 	mov	arg04, #1
2c670     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2c674     00 FA 0D F2 | 	cmp	result1, #0 wz
2c678     1C 00 90 AD |  if_e	jmp	#LR__4483
2c67c     04 4E 05 F1 | 	add	fp, #4
2c680     A7 22 02 FB | 	rdlong	local03, fp
2c684     04 4E 85 F1 | 	sub	fp, #4
2c688     11 22 06 F1 | 	add	local03, #17
2c68c     11 03 48 FC | 	wrbyte	#1, local03
2c690     01 FA 05 F6 | 	mov	result1, #1
2c694     A4 01 90 FD | 	jmp	#LR__4490
2c698                 | LR__4483
2c698     04 4E 05 F1 | 	add	fp, #4
2c69c     A7 32 02 FB | 	rdlong	local11, fp
2c6a0     19 23 02 F6 | 	mov	local03, local11
2c6a4     04 4E 85 F1 | 	sub	fp, #4
2c6a8     10 32 06 F1 | 	add	local11, #16
2c6ac     19 33 C2 FA | 	rdbyte	local11, local11
2c6b0     7F 32 06 F5 | 	and	local11, #127
2c6b4     10 22 06 F1 | 	add	local03, #16
2c6b8     11 33 42 FC | 	wrbyte	local11, local03
2c6bc                 | LR__4484
2c6bc     18 4E 05 F1 | 	add	fp, #24
2c6c0     A7 1E 02 FB | 	rdlong	local01, fp
2c6c4     01 1E 06 F1 | 	add	local01, #1
2c6c8     0F 13 C2 FA | 	rdbyte	arg01, local01
2c6cc     14 4E 85 F1 | 	sub	fp, #20
2c6d0     A7 14 02 FB | 	rdlong	arg02, fp
2c6d4     28 14 06 F1 | 	add	arg02, #40
2c6d8     1C 4E 05 F1 | 	add	fp, #28
2c6dc     A7 16 02 FB | 	rdlong	arg03, fp
2c6e0     20 4E 85 F1 | 	sub	fp, #32
2c6e4     01 18 06 F6 | 	mov	arg04, #1
2c6e8     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2c6ec     00 FA 0D F2 | 	cmp	result1, #0 wz
2c6f0     1C 00 90 AD |  if_e	jmp	#LR__4485
2c6f4     04 4E 05 F1 | 	add	fp, #4
2c6f8     A7 22 02 FB | 	rdlong	local03, fp
2c6fc     04 4E 85 F1 | 	sub	fp, #4
2c700     11 22 06 F1 | 	add	local03, #17
2c704     11 03 48 FC | 	wrbyte	#1, local03
2c708     01 FA 05 F6 | 	mov	result1, #1
2c70c     2C 01 90 FD | 	jmp	#LR__4490
2c710                 | LR__4485
2c710                 | LR__4486
2c710     04 4E 05 F1 | 	add	fp, #4
2c714     A7 22 02 FB | 	rdlong	local03, fp
2c718     1C 4E 05 F1 | 	add	fp, #28
2c71c     A7 32 02 FB | 	rdlong	local11, fp
2c720     20 4E 85 F1 | 	sub	fp, #32
2c724     1C 22 06 F1 | 	add	local03, #28
2c728     11 33 62 FC | 	wrlong	local11, local03
2c72c                 | LR__4487
2c72c     04 4E 05 F1 | 	add	fp, #4
2c730     A7 1E 02 FB | 	rdlong	local01, fp
2c734     14 1E 06 F1 | 	add	local01, #20
2c738     0F 33 02 FB | 	rdlong	local11, local01
2c73c     FF 33 06 F5 | 	and	local11, #511
2c740     09 22 C6 F9 | 	decod	local03, #9
2c744     19 23 82 F1 | 	sub	local03, local11
2c748     24 4E 05 F1 | 	add	fp, #36
2c74c     A7 22 62 FC | 	wrlong	local03, fp
2c750     1C 4E 85 F1 | 	sub	fp, #28
2c754     A7 32 02 FB | 	rdlong	local11, fp
2c758     0C 4E 85 F1 | 	sub	fp, #12
2c75c     19 23 1A F2 | 	cmp	local03, local11 wcz
2c760     0C 4E 05 11 |  if_a	add	fp, #12
2c764     A7 22 02 1B |  if_a	rdlong	local03, fp
2c768     1C 4E 05 11 |  if_a	add	fp, #28
2c76c     A7 22 62 1C |  if_a	wrlong	local03, fp
2c770     28 4E 85 11 |  if_a	sub	fp, #40
2c774     34 4E 05 F1 | 	add	fp, #52
2c778     A7 12 02 FB | 	rdlong	arg01, fp
2c77c     30 4E 85 F1 | 	sub	fp, #48
2c780     A7 28 02 FB | 	rdlong	local06, fp
2c784     14 15 02 F6 | 	mov	arg02, local06
2c788     28 14 06 F1 | 	add	arg02, #40
2c78c     14 28 06 F1 | 	add	local06, #20
2c790     14 33 02 FB | 	rdlong	local11, local06
2c794     19 2F 02 F6 | 	mov	local09, local11
2c798     17 31 02 F6 | 	mov	local10, local09
2c79c     FF 31 06 F5 | 	and	local10, #511
2c7a0     18 15 02 F1 | 	add	arg02, local10
2c7a4     24 4E 05 F1 | 	add	fp, #36
2c7a8     A7 16 02 FB | 	rdlong	arg03, fp
2c7ac     28 4E 85 F1 | 	sub	fp, #40
2c7b0     7C 44 BF FD | 	call	#__system____builtin_memmove
2c7b4                 | LR__4488
2c7b4     0C 4E 05 F1 | 	add	fp, #12
2c7b8     A7 22 02 FB | 	rdlong	local03, fp
2c7bc     1C 4E 05 F1 | 	add	fp, #28
2c7c0     A7 2C 02 FB | 	rdlong	local08, fp
2c7c4     16 23 82 F1 | 	sub	local03, local08
2c7c8     1C 4E 85 F1 | 	sub	fp, #28
2c7cc     A7 22 62 FC | 	wrlong	local03, fp
2c7d0     04 4E 05 F1 | 	add	fp, #4
2c7d4     A7 1E 02 FB | 	rdlong	local01, fp
2c7d8     0F 2B 02 FB | 	rdlong	local07, local01
2c7dc     18 4E 05 F1 | 	add	fp, #24
2c7e0     A7 2C 02 FB | 	rdlong	local08, fp
2c7e4     16 2B 02 F1 | 	add	local07, local08
2c7e8     0F 2B 62 FC | 	wrlong	local07, local01
2c7ec     0C 4E 05 F1 | 	add	fp, #12
2c7f0     A7 22 02 FB | 	rdlong	local03, fp
2c7f4     0C 4E 85 F1 | 	sub	fp, #12
2c7f8     A7 34 02 FB | 	rdlong	local12, fp
2c7fc     1A 23 02 F1 | 	add	local03, local12
2c800     0C 4E 05 F1 | 	add	fp, #12
2c804     A7 22 62 FC | 	wrlong	local03, fp
2c808     30 4E 85 F1 | 	sub	fp, #48
2c80c     A7 36 02 FB | 	rdlong	local13, fp
2c810     1B 23 02 F6 | 	mov	local03, local13
2c814     14 36 06 F1 | 	add	local13, #20
2c818     1B 39 02 FB | 	rdlong	local14, local13
2c81c     24 4E 05 F1 | 	add	fp, #36
2c820     A7 28 02 FB | 	rdlong	local06, fp
2c824     28 4E 85 F1 | 	sub	fp, #40
2c828     14 39 02 F1 | 	add	local14, local06
2c82c     14 22 06 F1 | 	add	local03, #20
2c830     11 39 62 FC | 	wrlong	local14, local03
2c834     84 FA 9F FD | 	jmp	#LR__4472
2c838                 | LR__4489
2c838                 | ' 
2c838                 | ' 
2c838                 | ' 
2c838                 | ' 
2c838                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2c838                 | ' 
2c838                 | ' 	}
2c838                 | ' 
2c838                 | ' 	return FR_OK ;
2c838     00 FA 05 F6 | 	mov	result1, #0
2c83c                 | LR__4490
2c83c     A7 F0 03 F6 | 	mov	ptra, fp
2c840     B2 00 A0 FD | 	call	#popregs_
2c844                 | _fatfs_cc_f_read_ret
2c844     2D 00 64 FD | 	ret
2c848                 | 
2c848                 | _fatfs_cc_f_write
2c848     15 4A 05 F6 | 	mov	COUNT_, #21
2c84c     A8 00 A0 FD | 	call	#pushregs_
2c850     34 F0 07 F1 | 	add	ptra, #52
2c854     04 4E 05 F1 | 	add	fp, #4
2c858     A7 12 62 FC | 	wrlong	arg01, fp
2c85c     04 4E 05 F1 | 	add	fp, #4
2c860     A7 14 62 FC | 	wrlong	arg02, fp
2c864     04 4E 05 F1 | 	add	fp, #4
2c868     A7 16 62 FC | 	wrlong	arg03, fp
2c86c     04 4E 05 F1 | 	add	fp, #4
2c870     A7 18 62 FC | 	wrlong	arg04, fp
2c874     08 4E 85 F1 | 	sub	fp, #8
2c878     A7 FA 01 FB | 	rdlong	result1, fp
2c87c     28 4E 05 F1 | 	add	fp, #40
2c880     A7 FA 61 FC | 	wrlong	result1, fp
2c884     20 4E 85 F1 | 	sub	fp, #32
2c888     A7 FA 01 FB | 	rdlong	result1, fp
2c88c     FD 00 68 FC | 	wrlong	#0, result1
2c890     0C 4E 85 F1 | 	sub	fp, #12
2c894     A7 12 02 FB | 	rdlong	arg01, fp
2c898     14 4E 05 F1 | 	add	fp, #20
2c89c     A7 14 02 F6 | 	mov	arg02, fp
2c8a0     18 4E 85 F1 | 	sub	fp, #24
2c8a4     88 F0 BF FD | 	call	#_fatfs_cc_validate
2c8a8     14 4E 05 F1 | 	add	fp, #20
2c8ac     A7 FA 61 FC | 	wrlong	result1, fp
2c8b0     00 FA 4D F2 | 	cmps	result1, #0 wz
2c8b4     14 4E 85 F1 | 	sub	fp, #20
2c8b8     20 00 90 5D |  if_ne	jmp	#LR__4500
2c8bc     04 4E 05 F1 | 	add	fp, #4
2c8c0     A7 14 02 FB | 	rdlong	arg02, fp
2c8c4     11 14 06 F1 | 	add	arg02, #17
2c8c8     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2c8cc     10 4E 05 F1 | 	add	fp, #16
2c8d0     A7 14 62 FC | 	wrlong	arg02, fp
2c8d4     14 4E 85 F1 | 	sub	fp, #20
2c8d8     10 00 90 AD |  if_e	jmp	#LR__4501
2c8dc                 | LR__4500
2c8dc     14 4E 05 F1 | 	add	fp, #20
2c8e0     A7 FA 01 FB | 	rdlong	result1, fp
2c8e4     14 4E 85 F1 | 	sub	fp, #20
2c8e8     44 07 90 FD | 	jmp	#LR__4523
2c8ec                 | LR__4501
2c8ec     04 4E 05 F1 | 	add	fp, #4
2c8f0     A7 14 02 FB | 	rdlong	arg02, fp
2c8f4     04 4E 85 F1 | 	sub	fp, #4
2c8f8     10 14 06 F1 | 	add	arg02, #16
2c8fc     0A 15 C2 FA | 	rdbyte	arg02, arg02
2c900     02 14 CE F7 | 	test	arg02, #2 wz
2c904     07 FA 05 A6 |  if_e	mov	result1, #7
2c908     24 07 90 AD |  if_e	jmp	#LR__4523
2c90c     04 4E 05 F1 | 	add	fp, #4
2c910     A7 14 02 FB | 	rdlong	arg02, fp
2c914     0A 13 02 F6 | 	mov	arg01, arg02
2c918     14 12 06 F1 | 	add	arg01, #20
2c91c     09 13 02 FB | 	rdlong	arg01, arg01
2c920     08 4E 05 F1 | 	add	fp, #8
2c924     A7 FA 01 FB | 	rdlong	result1, fp
2c928     FD 12 02 F1 | 	add	arg01, result1
2c92c     0C 4E 85 F1 | 	sub	fp, #12
2c930     14 14 06 F1 | 	add	arg02, #20
2c934     0A FB 01 FB | 	rdlong	result1, arg02
2c938     FD 12 12 F2 | 	cmp	arg01, result1 wc
2c93c     24 00 90 3D |  if_ae	jmp	#LR__4502
2c940     04 4E 05 F1 | 	add	fp, #4
2c944     A7 14 02 FB | 	rdlong	arg02, fp
2c948     01 FA 65 F6 | 	neg	result1, #1
2c94c     14 14 06 F1 | 	add	arg02, #20
2c950     0A 15 02 FB | 	rdlong	arg02, arg02
2c954     0A FB 81 F1 | 	sub	result1, arg02
2c958     08 4E 05 F1 | 	add	fp, #8
2c95c     A7 FA 61 FC | 	wrlong	result1, fp
2c960     0C 4E 85 F1 | 	sub	fp, #12
2c964                 | LR__4502
2c964                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2c964                 | ' 	}
2c964                 | ' 
2c964                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2c964                 | LR__4503
2c964     0C 4E 05 F1 | 	add	fp, #12
2c968     A7 FA 01 FB | 	rdlong	result1, fp
2c96c     0C 4E 85 F1 | 	sub	fp, #12
2c970     01 FA 15 F2 | 	cmp	result1, #1 wc
2c974     90 06 90 CD |  if_b	jmp	#LR__4522
2c978     04 4E 05 F1 | 	add	fp, #4
2c97c     A7 FA 01 FB | 	rdlong	result1, fp
2c980     04 4E 85 F1 | 	sub	fp, #4
2c984     14 FA 05 F1 | 	add	result1, #20
2c988     FD FA 01 FB | 	rdlong	result1, result1
2c98c     FF FB CD F7 | 	test	result1, #511 wz
2c990     D8 04 90 5D |  if_ne	jmp	#LR__4518
2c994     04 4E 05 F1 | 	add	fp, #4
2c998     A7 FA 01 FB | 	rdlong	result1, fp
2c99c     14 FA 05 F1 | 	add	result1, #20
2c9a0     FD FA 01 FB | 	rdlong	result1, result1
2c9a4     09 FA 45 F0 | 	shr	result1, #9
2c9a8     14 4E 05 F1 | 	add	fp, #20
2c9ac     A7 14 02 FB | 	rdlong	arg02, fp
2c9b0     0A 14 06 F1 | 	add	arg02, #10
2c9b4     0A 19 E2 FA | 	rdword	arg04, arg02
2c9b8     0C 15 32 F9 | 	getword	arg02, arg04, #0
2c9bc     01 14 86 F1 | 	sub	arg02, #1
2c9c0     0A FB 09 F5 | 	and	result1, arg02 wz
2c9c4     14 4E 05 F1 | 	add	fp, #20
2c9c8     A7 FA 61 FC | 	wrlong	result1, fp
2c9cc     2C 4E 85 F1 | 	sub	fp, #44
2c9d0     44 01 90 5D |  if_ne	jmp	#LR__4509
2c9d4     04 4E 05 F1 | 	add	fp, #4
2c9d8     A7 FA 01 FB | 	rdlong	result1, fp
2c9dc     04 4E 85 F1 | 	sub	fp, #4
2c9e0     14 FA 05 F1 | 	add	result1, #20
2c9e4     FD 14 0A FB | 	rdlong	arg02, result1 wz
2c9e8     44 00 90 5D |  if_ne	jmp	#LR__4504
2c9ec     04 4E 05 F1 | 	add	fp, #4
2c9f0     A7 14 02 FB | 	rdlong	arg02, fp
2c9f4     08 14 06 F1 | 	add	arg02, #8
2c9f8     0A 15 0A FB | 	rdlong	arg02, arg02 wz
2c9fc     18 4E 05 F1 | 	add	fp, #24
2ca00     A7 14 62 FC | 	wrlong	arg02, fp
2ca04     1C 4E 85 F1 | 	sub	fp, #28
2ca08     4C 00 90 5D |  if_ne	jmp	#LR__4505
2ca0c     04 4E 05 F1 | 	add	fp, #4
2ca10     A7 12 02 FB | 	rdlong	arg01, fp
2ca14     04 4E 85 F1 | 	sub	fp, #4
2ca18     00 14 06 F6 | 	mov	arg02, #0
2ca1c     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
2ca20     1C 4E 05 F1 | 	add	fp, #28
2ca24     A7 FA 61 FC | 	wrlong	result1, fp
2ca28     1C 4E 85 F1 | 	sub	fp, #28
2ca2c     28 00 90 FD | 	jmp	#LR__4505
2ca30                 | LR__4504
2ca30     04 4E 05 F1 | 	add	fp, #4
2ca34     A7 18 02 FB | 	rdlong	arg04, fp
2ca38     0C 13 02 F6 | 	mov	arg01, arg04
2ca3c     04 4E 85 F1 | 	sub	fp, #4
2ca40     18 18 06 F1 | 	add	arg04, #24
2ca44     0C 15 02 FB | 	rdlong	arg02, arg04
2ca48     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2ca4c     1C 4E 05 F1 | 	add	fp, #28
2ca50     A7 FA 61 FC | 	wrlong	result1, fp
2ca54     1C 4E 85 F1 | 	sub	fp, #28
2ca58                 | LR__4505
2ca58     1C 4E 05 F1 | 	add	fp, #28
2ca5c     A7 FA 09 FB | 	rdlong	result1, fp wz
2ca60     1C 4E 85 F1 | 	sub	fp, #28
2ca64     A0 05 90 AD |  if_e	jmp	#LR__4522
2ca68     1C 4E 05 F1 | 	add	fp, #28
2ca6c     A7 FA 01 FB | 	rdlong	result1, fp
2ca70     1C 4E 85 F1 | 	sub	fp, #28
2ca74     01 FA 0D F2 | 	cmp	result1, #1 wz
2ca78     1C 00 90 5D |  if_ne	jmp	#LR__4506
2ca7c     04 4E 05 F1 | 	add	fp, #4
2ca80     A7 FA 01 FB | 	rdlong	result1, fp
2ca84     04 4E 85 F1 | 	sub	fp, #4
2ca88     11 FA 05 F1 | 	add	result1, #17
2ca8c     FD 04 48 FC | 	wrbyte	#2, result1
2ca90     02 FA 05 F6 | 	mov	result1, #2
2ca94     98 05 90 FD | 	jmp	#LR__4523
2ca98                 | LR__4506
2ca98     1C 4E 05 F1 | 	add	fp, #28
2ca9c     A7 FA 01 FB | 	rdlong	result1, fp
2caa0     1C 4E 85 F1 | 	sub	fp, #28
2caa4     FF FF 7F FF 
2caa8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2caac     1C 00 90 5D |  if_ne	jmp	#LR__4507
2cab0     04 4E 05 F1 | 	add	fp, #4
2cab4     A7 FA 01 FB | 	rdlong	result1, fp
2cab8     04 4E 85 F1 | 	sub	fp, #4
2cabc     11 FA 05 F1 | 	add	result1, #17
2cac0     FD 02 48 FC | 	wrbyte	#1, result1
2cac4     01 FA 05 F6 | 	mov	result1, #1
2cac8     64 05 90 FD | 	jmp	#LR__4523
2cacc                 | LR__4507
2cacc     04 4E 05 F1 | 	add	fp, #4
2cad0     A7 FA 01 FB | 	rdlong	result1, fp
2cad4     18 4E 05 F1 | 	add	fp, #24
2cad8     A7 18 02 FB | 	rdlong	arg04, fp
2cadc     18 FA 05 F1 | 	add	result1, #24
2cae0     FD 18 62 FC | 	wrlong	arg04, result1
2cae4     18 4E 85 F1 | 	sub	fp, #24
2cae8     A7 FA 01 FB | 	rdlong	result1, fp
2caec     04 4E 85 F1 | 	sub	fp, #4
2caf0     08 FA 05 F1 | 	add	result1, #8
2caf4     FD FA 09 FB | 	rdlong	result1, result1 wz
2caf8     1C 00 90 5D |  if_ne	jmp	#LR__4508
2cafc     04 4E 05 F1 | 	add	fp, #4
2cb00     A7 18 02 FB | 	rdlong	arg04, fp
2cb04     18 4E 05 F1 | 	add	fp, #24
2cb08     A7 FA 01 FB | 	rdlong	result1, fp
2cb0c     1C 4E 85 F1 | 	sub	fp, #28
2cb10     08 18 06 F1 | 	add	arg04, #8
2cb14     0C FB 61 FC | 	wrlong	result1, arg04
2cb18                 | LR__4508
2cb18                 | LR__4509
2cb18     04 4E 05 F1 | 	add	fp, #4
2cb1c     A7 18 02 FB | 	rdlong	arg04, fp
2cb20     04 4E 85 F1 | 	sub	fp, #4
2cb24     10 18 06 F1 | 	add	arg04, #16
2cb28     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cb2c     80 18 CE F7 | 	test	arg04, #128 wz
2cb30     7C 00 90 AD |  if_e	jmp	#LR__4511
2cb34     18 4E 05 F1 | 	add	fp, #24
2cb38     A7 18 02 FB | 	rdlong	arg04, fp
2cb3c     01 18 06 F1 | 	add	arg04, #1
2cb40     0C 13 C2 FA | 	rdbyte	arg01, arg04
2cb44     14 4E 85 F1 | 	sub	fp, #20
2cb48     A7 18 02 FB | 	rdlong	arg04, fp
2cb4c     0C 15 02 F6 | 	mov	arg02, arg04
2cb50     28 14 06 F1 | 	add	arg02, #40
2cb54     04 4E 85 F1 | 	sub	fp, #4
2cb58     1C 18 06 F1 | 	add	arg04, #28
2cb5c     0C 17 02 FB | 	rdlong	arg03, arg04
2cb60     01 18 06 F6 | 	mov	arg04, #1
2cb64     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2cb68     00 FA 0D F2 | 	cmp	result1, #0 wz
2cb6c     1C 00 90 AD |  if_e	jmp	#LR__4510
2cb70     04 4E 05 F1 | 	add	fp, #4
2cb74     A7 FA 01 FB | 	rdlong	result1, fp
2cb78     04 4E 85 F1 | 	sub	fp, #4
2cb7c     11 FA 05 F1 | 	add	result1, #17
2cb80     FD 02 48 FC | 	wrbyte	#1, result1
2cb84     01 FA 05 F6 | 	mov	result1, #1
2cb88     A4 04 90 FD | 	jmp	#LR__4523
2cb8c                 | LR__4510
2cb8c     04 4E 05 F1 | 	add	fp, #4
2cb90     A7 18 02 FB | 	rdlong	arg04, fp
2cb94     0C FB 01 F6 | 	mov	result1, arg04
2cb98     04 4E 85 F1 | 	sub	fp, #4
2cb9c     10 18 06 F1 | 	add	arg04, #16
2cba0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cba4     7F 18 06 F5 | 	and	arg04, #127
2cba8     10 FA 05 F1 | 	add	result1, #16
2cbac     FD 18 42 FC | 	wrbyte	arg04, result1
2cbb0                 | LR__4511
2cbb0     18 4E 05 F1 | 	add	fp, #24
2cbb4     A7 12 02 FB | 	rdlong	arg01, fp
2cbb8     14 4E 85 F1 | 	sub	fp, #20
2cbbc     A7 14 02 FB | 	rdlong	arg02, fp
2cbc0     04 4E 85 F1 | 	sub	fp, #4
2cbc4     18 14 06 F1 | 	add	arg02, #24
2cbc8     0A 15 02 FB | 	rdlong	arg02, arg02
2cbcc     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2cbd0     20 4E 05 F1 | 	add	fp, #32
2cbd4     A7 FA 61 FC | 	wrlong	result1, fp
2cbd8     20 4E 85 F1 | 	sub	fp, #32
2cbdc     00 FA 0D F2 | 	cmp	result1, #0 wz
2cbe0     1C 00 90 5D |  if_ne	jmp	#LR__4512
2cbe4     04 4E 05 F1 | 	add	fp, #4
2cbe8     A7 FA 01 FB | 	rdlong	result1, fp
2cbec     04 4E 85 F1 | 	sub	fp, #4
2cbf0     11 FA 05 F1 | 	add	result1, #17
2cbf4     FD 04 48 FC | 	wrbyte	#2, result1
2cbf8     02 FA 05 F6 | 	mov	result1, #2
2cbfc     30 04 90 FD | 	jmp	#LR__4523
2cc00                 | LR__4512
2cc00     20 4E 05 F1 | 	add	fp, #32
2cc04     A7 FA 01 FB | 	rdlong	result1, fp
2cc08     0C 4E 05 F1 | 	add	fp, #12
2cc0c     A7 1E 02 FB | 	rdlong	local01, fp
2cc10     0F FB 01 F1 | 	add	result1, local01
2cc14     0C 4E 85 F1 | 	sub	fp, #12
2cc18     A7 FA 61 FC | 	wrlong	result1, fp
2cc1c     14 4E 85 F1 | 	sub	fp, #20
2cc20     A7 FA 01 FB | 	rdlong	result1, fp
2cc24     09 FA 45 F0 | 	shr	result1, #9
2cc28     1C 4E 05 F1 | 	add	fp, #28
2cc2c     A7 FA 61 FC | 	wrlong	result1, fp
2cc30     28 4E 85 F1 | 	sub	fp, #40
2cc34     01 FA 15 F2 | 	cmp	result1, #1 wc
2cc38     60 01 90 CD |  if_b	jmp	#LR__4516
2cc3c     2C 4E 05 F1 | 	add	fp, #44
2cc40     A7 FA 01 FB | 	rdlong	result1, fp
2cc44     04 4E 85 F1 | 	sub	fp, #4
2cc48     A7 18 02 FB | 	rdlong	arg04, fp
2cc4c     0C FB 01 F1 | 	add	result1, arg04
2cc50     10 4E 85 F1 | 	sub	fp, #16
2cc54     A7 18 02 FB | 	rdlong	arg04, fp
2cc58     18 4E 85 F1 | 	sub	fp, #24
2cc5c     0A 18 06 F1 | 	add	arg04, #10
2cc60     0C 19 E2 FA | 	rdword	arg04, arg04
2cc64     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2cc68     28 00 90 ED |  if_be	jmp	#LR__4513
2cc6c     18 4E 05 F1 | 	add	fp, #24
2cc70     A7 FA 01 FB | 	rdlong	result1, fp
2cc74     0A FA 05 F1 | 	add	result1, #10
2cc78     FD FA E1 FA | 	rdword	result1, result1
2cc7c     14 4E 05 F1 | 	add	fp, #20
2cc80     A7 18 02 FB | 	rdlong	arg04, fp
2cc84     0C FB 81 F1 | 	sub	result1, arg04
2cc88     04 4E 85 F1 | 	sub	fp, #4
2cc8c     A7 FA 61 FC | 	wrlong	result1, fp
2cc90     28 4E 85 F1 | 	sub	fp, #40
2cc94                 | LR__4513
2cc94     18 4E 05 F1 | 	add	fp, #24
2cc98     A7 18 02 FB | 	rdlong	arg04, fp
2cc9c     01 18 06 F1 | 	add	arg04, #1
2cca0     0C 13 C2 FA | 	rdbyte	arg01, arg04
2cca4     18 4E 05 F1 | 	add	fp, #24
2cca8     A7 14 02 FB | 	rdlong	arg02, fp
2ccac     10 4E 85 F1 | 	sub	fp, #16
2ccb0     A7 16 02 FB | 	rdlong	arg03, fp
2ccb4     08 4E 05 F1 | 	add	fp, #8
2ccb8     A7 18 02 FB | 	rdlong	arg04, fp
2ccbc     28 4E 85 F1 | 	sub	fp, #40
2ccc0     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2ccc4     00 FA 0D F2 | 	cmp	result1, #0 wz
2ccc8     1C 00 90 AD |  if_e	jmp	#LR__4514
2cccc     04 4E 05 F1 | 	add	fp, #4
2ccd0     A7 1E 02 FB | 	rdlong	local01, fp
2ccd4     04 4E 85 F1 | 	sub	fp, #4
2ccd8     11 1E 06 F1 | 	add	local01, #17
2ccdc     0F 03 48 FC | 	wrbyte	#1, local01
2cce0     01 FA 05 F6 | 	mov	result1, #1
2cce4     48 03 90 FD | 	jmp	#LR__4523
2cce8                 | LR__4514
2cce8     04 4E 05 F1 | 	add	fp, #4
2ccec     A7 FA 01 FB | 	rdlong	result1, fp
2ccf0     1C FA 05 F1 | 	add	result1, #28
2ccf4     FD FA 01 FB | 	rdlong	result1, result1
2ccf8     1C 4E 05 F1 | 	add	fp, #28
2ccfc     A7 20 02 FB | 	rdlong	local02, fp
2cd00     10 FB 81 F1 | 	sub	result1, local02
2cd04     08 4E 05 F1 | 	add	fp, #8
2cd08     A7 18 02 FB | 	rdlong	arg04, fp
2cd0c     28 4E 85 F1 | 	sub	fp, #40
2cd10     0C FB 11 F2 | 	cmp	result1, arg04 wc
2cd14     68 00 90 3D |  if_ae	jmp	#LR__4515
2cd18     04 4E 05 F1 | 	add	fp, #4
2cd1c     A7 12 02 FB | 	rdlong	arg01, fp
2cd20     28 12 06 F1 | 	add	arg01, #40
2cd24     2C 4E 05 F1 | 	add	fp, #44
2cd28     A7 14 02 FB | 	rdlong	arg02, fp
2cd2c     2C 4E 85 F1 | 	sub	fp, #44
2cd30     A7 FA 01 FB | 	rdlong	result1, fp
2cd34     1C FA 05 F1 | 	add	result1, #28
2cd38     FD 22 02 FB | 	rdlong	local03, result1
2cd3c     1C 4E 05 F1 | 	add	fp, #28
2cd40     A7 18 02 FB | 	rdlong	arg04, fp
2cd44     20 4E 85 F1 | 	sub	fp, #32
2cd48     0C 23 82 F1 | 	sub	local03, arg04
2cd4c     09 22 66 F0 | 	shl	local03, #9
2cd50     11 15 02 F1 | 	add	arg02, local03
2cd54     09 16 C6 F9 | 	decod	arg03, #9
2cd58     D4 3E BF FD | 	call	#__system____builtin_memmove
2cd5c     04 4E 05 F1 | 	add	fp, #4
2cd60     A7 18 02 FB | 	rdlong	arg04, fp
2cd64     0C FB 01 F6 | 	mov	result1, arg04
2cd68     04 4E 85 F1 | 	sub	fp, #4
2cd6c     10 18 06 F1 | 	add	arg04, #16
2cd70     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cd74     7F 18 06 F5 | 	and	arg04, #127
2cd78     10 FA 05 F1 | 	add	result1, #16
2cd7c     FD 18 42 FC | 	wrbyte	arg04, result1
2cd80                 | LR__4515
2cd80     28 4E 05 F1 | 	add	fp, #40
2cd84     A7 FA 01 FB | 	rdlong	result1, fp
2cd88     09 FA 65 F0 | 	shl	result1, #9
2cd8c     04 4E 85 F1 | 	sub	fp, #4
2cd90     A7 FA 61 FC | 	wrlong	result1, fp
2cd94     24 4E 85 F1 | 	sub	fp, #36
2cd98                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2cd98                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2cd98                 | ' 				}
2cd98                 | ' 
2cd98                 | ' 
2cd98                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2cd98                 | ' 				continue;
2cd98     74 01 90 FD | 	jmp	#LR__4519
2cd9c                 | LR__4516
2cd9c     04 4E 05 F1 | 	add	fp, #4
2cda0     A7 20 02 FB | 	rdlong	local02, fp
2cda4     1C 20 06 F1 | 	add	local02, #28
2cda8     10 FB 01 FB | 	rdlong	result1, local02
2cdac     1C 4E 05 F1 | 	add	fp, #28
2cdb0     A7 20 02 FB | 	rdlong	local02, fp
2cdb4     20 4E 85 F1 | 	sub	fp, #32
2cdb8     10 FB 09 F2 | 	cmp	result1, local02 wz
2cdbc     90 00 90 AD |  if_e	jmp	#LR__4517
2cdc0     04 4E 05 F1 | 	add	fp, #4
2cdc4     A7 FA 01 FB | 	rdlong	result1, fp
2cdc8     FD 22 02 F6 | 	mov	local03, result1
2cdcc     04 4E 85 F1 | 	sub	fp, #4
2cdd0     14 22 06 F1 | 	add	local03, #20
2cdd4     11 23 02 FB | 	rdlong	local03, local03
2cdd8     0C FA 05 F1 | 	add	result1, #12
2cddc     FD 24 02 FB | 	rdlong	local04, result1
2cde0     12 27 02 F6 | 	mov	local05, local04
2cde4     13 23 12 F2 | 	cmp	local03, local05 wc
2cde8     64 00 90 3D |  if_ae	jmp	#LR__4517
2cdec     18 4E 05 F1 | 	add	fp, #24
2cdf0     A7 18 02 FB | 	rdlong	arg04, fp
2cdf4     01 18 06 F1 | 	add	arg04, #1
2cdf8     0C 13 C2 FA | 	rdbyte	arg01, arg04
2cdfc     14 4E 85 F1 | 	sub	fp, #20
2ce00     A7 28 02 FB | 	rdlong	local06, fp
2ce04     28 28 06 F1 | 	add	local06, #40
2ce08     14 2B 02 F6 | 	mov	local07, local06
2ce0c     1C 4E 05 F1 | 	add	fp, #28
2ce10     A7 2C 02 FB | 	rdlong	local08, fp
2ce14     20 4E 85 F1 | 	sub	fp, #32
2ce18     01 2E 06 F6 | 	mov	local09, #1
2ce1c     15 15 02 F6 | 	mov	arg02, local07
2ce20     16 17 02 F6 | 	mov	arg03, local08
2ce24     01 18 06 F6 | 	mov	arg04, #1
2ce28     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2ce2c     FD 30 0A F6 | 	mov	local10, result1 wz
2ce30     1C 00 90 AD |  if_e	jmp	#LR__4517
2ce34     04 4E 05 F1 | 	add	fp, #4
2ce38     A7 30 02 FB | 	rdlong	local10, fp
2ce3c     04 4E 85 F1 | 	sub	fp, #4
2ce40     11 30 06 F1 | 	add	local10, #17
2ce44     18 03 48 FC | 	wrbyte	#1, local10
2ce48                 | ' 				fp->fptr < fp->obj.objsize &&
2ce48                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2ce48                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2ce48     01 FA 05 F6 | 	mov	result1, #1
2ce4c     E0 01 90 FD | 	jmp	#LR__4523
2ce50                 | LR__4517
2ce50     04 4E 05 F1 | 	add	fp, #4
2ce54     A7 18 02 FB | 	rdlong	arg04, fp
2ce58     1C 4E 05 F1 | 	add	fp, #28
2ce5c     A7 FA 01 FB | 	rdlong	result1, fp
2ce60     20 4E 85 F1 | 	sub	fp, #32
2ce64     1C 18 06 F1 | 	add	arg04, #28
2ce68     0C FB 61 FC | 	wrlong	result1, arg04
2ce6c                 | LR__4518
2ce6c     04 4E 05 F1 | 	add	fp, #4
2ce70     A7 FA 01 FB | 	rdlong	result1, fp
2ce74     14 FA 05 F1 | 	add	result1, #20
2ce78     FD FA 01 FB | 	rdlong	result1, result1
2ce7c     FF FB 05 F5 | 	and	result1, #511
2ce80     09 32 C6 F9 | 	decod	local11, #9
2ce84     FD 32 82 F1 | 	sub	local11, result1
2ce88     20 4E 05 F1 | 	add	fp, #32
2ce8c     A7 32 62 FC | 	wrlong	local11, fp
2ce90     18 4E 85 F1 | 	sub	fp, #24
2ce94     A7 FA 01 FB | 	rdlong	result1, fp
2ce98     0C 4E 85 F1 | 	sub	fp, #12
2ce9c     FD 32 1A F2 | 	cmp	local11, result1 wcz
2cea0     0C 4E 05 11 |  if_a	add	fp, #12
2cea4     A7 32 02 1B |  if_a	rdlong	local11, fp
2cea8     18 4E 05 11 |  if_a	add	fp, #24
2ceac     A7 32 62 1C |  if_a	wrlong	local11, fp
2ceb0     24 4E 85 11 |  if_a	sub	fp, #36
2ceb4     04 4E 05 F1 | 	add	fp, #4
2ceb8     A7 32 02 FB | 	rdlong	local11, fp
2cebc     19 13 02 F6 | 	mov	arg01, local11
2cec0     28 12 06 F1 | 	add	arg01, #40
2cec4     14 32 06 F1 | 	add	local11, #20
2cec8     19 33 02 FB | 	rdlong	local11, local11
2cecc     FF 33 06 F5 | 	and	local11, #511
2ced0     19 13 02 F1 | 	add	arg01, local11
2ced4     2C 4E 05 F1 | 	add	fp, #44
2ced8     A7 14 02 FB | 	rdlong	arg02, fp
2cedc     0C 4E 85 F1 | 	sub	fp, #12
2cee0     A7 16 02 FB | 	rdlong	arg03, fp
2cee4     24 4E 85 F1 | 	sub	fp, #36
2cee8     44 3D BF FD | 	call	#__system____builtin_memmove
2ceec     04 4E 05 F1 | 	add	fp, #4
2cef0     A7 FA 01 FB | 	rdlong	result1, fp
2cef4     FD 32 02 F6 | 	mov	local11, result1
2cef8     04 4E 85 F1 | 	sub	fp, #4
2cefc     10 FA 05 F1 | 	add	result1, #16
2cf00     FD FA C1 FA | 	rdbyte	result1, result1
2cf04     80 FA 45 F5 | 	or	result1, #128
2cf08     10 32 06 F1 | 	add	local11, #16
2cf0c     19 FB 41 FC | 	wrbyte	result1, local11
2cf10                 | LR__4519
2cf10     0C 4E 05 F1 | 	add	fp, #12
2cf14     A7 32 02 FB | 	rdlong	local11, fp
2cf18     18 4E 05 F1 | 	add	fp, #24
2cf1c     A7 FA 01 FB | 	rdlong	result1, fp
2cf20     FD 32 82 F1 | 	sub	local11, result1
2cf24     18 4E 85 F1 | 	sub	fp, #24
2cf28     A7 32 62 FC | 	wrlong	local11, fp
2cf2c     04 4E 05 F1 | 	add	fp, #4
2cf30     A7 34 02 FB | 	rdlong	local12, fp
2cf34     1A 33 02 FB | 	rdlong	local11, local12
2cf38     14 4E 05 F1 | 	add	fp, #20
2cf3c     A7 36 02 FB | 	rdlong	local13, fp
2cf40     1B 33 02 F1 | 	add	local11, local13
2cf44     1A 33 62 FC | 	wrlong	local11, local12
2cf48     0C 4E 05 F1 | 	add	fp, #12
2cf4c     A7 32 02 FB | 	rdlong	local11, fp
2cf50     0C 4E 85 F1 | 	sub	fp, #12
2cf54     A7 38 02 FB | 	rdlong	local14, fp
2cf58     1C 33 02 F1 | 	add	local11, local14
2cf5c     0C 4E 05 F1 | 	add	fp, #12
2cf60     A7 32 62 FC | 	wrlong	local11, fp
2cf64     2C 4E 85 F1 | 	sub	fp, #44
2cf68     A7 3A 02 FB | 	rdlong	local15, fp
2cf6c     1D 33 02 F6 | 	mov	local11, local15
2cf70     14 3A 06 F1 | 	add	local15, #20
2cf74     1D 3B 02 FB | 	rdlong	local15, local15
2cf78     20 4E 05 F1 | 	add	fp, #32
2cf7c     A7 3C 02 FB | 	rdlong	local16, fp
2cf80     1E 3B 02 F1 | 	add	local15, local16
2cf84     14 32 06 F1 | 	add	local11, #20
2cf88     19 3B 62 FC | 	wrlong	local15, local11
2cf8c     20 4E 85 F1 | 	sub	fp, #32
2cf90     A7 3E 02 FB | 	rdlong	local17, fp
2cf94     1F 33 02 F6 | 	mov	local11, local17
2cf98     1F 41 02 F6 | 	mov	local18, local17
2cf9c     04 4E 85 F1 | 	sub	fp, #4
2cfa0     14 3E 06 F1 | 	add	local17, #20
2cfa4     1F 43 02 FB | 	rdlong	local19, local17
2cfa8     0C 40 06 F1 | 	add	local18, #12
2cfac     20 45 02 FB | 	rdlong	local20, local18
2cfb0     22 43 1A F2 | 	cmp	local19, local20 wcz
2cfb4     24 00 90 ED |  if_be	jmp	#LR__4520
2cfb8     04 4E 05 F1 | 	add	fp, #4
2cfbc     A7 26 02 FB | 	rdlong	local05, fp
2cfc0     04 4E 85 F1 | 	sub	fp, #4
2cfc4     13 23 02 F6 | 	mov	local03, local05
2cfc8     14 22 06 F1 | 	add	local03, #20
2cfcc     11 25 02 FB | 	rdlong	local04, local03
2cfd0     14 22 86 F1 | 	sub	local03, #20
2cfd4     12 47 02 F6 | 	mov	local21, local04
2cfd8     20 00 90 FD | 	jmp	#LR__4521
2cfdc                 | LR__4520
2cfdc     04 4E 05 F1 | 	add	fp, #4
2cfe0     A7 2A 02 FB | 	rdlong	local07, fp
2cfe4     04 4E 85 F1 | 	sub	fp, #4
2cfe8     15 31 02 F6 | 	mov	local10, local07
2cfec     0C 30 06 F1 | 	add	local10, #12
2cff0     18 2D 02 FB | 	rdlong	local08, local10
2cff4     0C 30 86 F1 | 	sub	local10, #12
2cff8     16 47 02 F6 | 	mov	local21, local08
2cffc                 | LR__4521
2cffc     0C 32 06 F1 | 	add	local11, #12
2d000     19 47 62 FC | 	wrlong	local21, local11
2d004     5C F9 9F FD | 	jmp	#LR__4503
2d008                 | LR__4522
2d008     04 4E 05 F1 | 	add	fp, #4
2d00c     A7 34 02 FB | 	rdlong	local12, fp
2d010     1A 1F 02 F6 | 	mov	local01, local12
2d014     04 4E 85 F1 | 	sub	fp, #4
2d018     10 34 06 F1 | 	add	local12, #16
2d01c     1A 33 C2 FA | 	rdbyte	local11, local12
2d020     40 32 46 F5 | 	or	local11, #64
2d024     10 1E 06 F1 | 	add	local01, #16
2d028     0F 33 42 FC | 	wrbyte	local11, local01
2d02c                 | ' 
2d02c                 | ' 
2d02c                 | ' 
2d02c                 | ' 
2d02c                 | ' 
2d02c                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2d02c                 | ' 		fp->flag |=  0x80 ;
2d02c                 | ' 
2d02c                 | ' 	}
2d02c                 | ' 
2d02c                 | ' 	fp->flag |=  0x40 ;
2d02c                 | ' 
2d02c                 | ' 	return FR_OK ;
2d02c     00 FA 05 F6 | 	mov	result1, #0
2d030                 | LR__4523
2d030     A7 F0 03 F6 | 	mov	ptra, fp
2d034     B2 00 A0 FD | 	call	#popregs_
2d038                 | _fatfs_cc_f_write_ret
2d038     2D 00 64 FD | 	ret
2d03c                 | 
2d03c                 | _fatfs_cc_f_sync
2d03c     00 4A 05 F6 | 	mov	COUNT_, #0
2d040     A8 00 A0 FD | 	call	#pushregs_
2d044     18 F0 07 F1 | 	add	ptra, #24
2d048     04 4E 05 F1 | 	add	fp, #4
2d04c     A7 12 62 FC | 	wrlong	arg01, fp
2d050     08 4E 05 F1 | 	add	fp, #8
2d054     A7 14 02 F6 | 	mov	arg02, fp
2d058     0C 4E 85 F1 | 	sub	fp, #12
2d05c     D0 E8 BF FD | 	call	#_fatfs_cc_validate
2d060     08 4E 05 F1 | 	add	fp, #8
2d064     A7 FA 61 FC | 	wrlong	result1, fp
2d068     08 4E 85 F1 | 	sub	fp, #8
2d06c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d070     C0 01 90 5D |  if_ne	jmp	#LR__4533
2d074     04 4E 05 F1 | 	add	fp, #4
2d078     A7 18 02 FB | 	rdlong	arg04, fp
2d07c     04 4E 85 F1 | 	sub	fp, #4
2d080     10 18 06 F1 | 	add	arg04, #16
2d084     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d088     40 18 CE F7 | 	test	arg04, #64 wz
2d08c     A4 01 90 AD |  if_e	jmp	#LR__4532
2d090     04 4E 05 F1 | 	add	fp, #4
2d094     A7 18 02 FB | 	rdlong	arg04, fp
2d098     04 4E 85 F1 | 	sub	fp, #4
2d09c     10 18 06 F1 | 	add	arg04, #16
2d0a0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d0a4     80 18 CE F7 | 	test	arg04, #128 wz
2d0a8     64 00 90 AD |  if_e	jmp	#LR__4530
2d0ac     0C 4E 05 F1 | 	add	fp, #12
2d0b0     A7 18 02 FB | 	rdlong	arg04, fp
2d0b4     01 18 06 F1 | 	add	arg04, #1
2d0b8     0C 13 C2 FA | 	rdbyte	arg01, arg04
2d0bc     08 4E 85 F1 | 	sub	fp, #8
2d0c0     A7 18 02 FB | 	rdlong	arg04, fp
2d0c4     0C 15 02 F6 | 	mov	arg02, arg04
2d0c8     28 14 06 F1 | 	add	arg02, #40
2d0cc     04 4E 85 F1 | 	sub	fp, #4
2d0d0     1C 18 06 F1 | 	add	arg04, #28
2d0d4     0C 17 02 FB | 	rdlong	arg03, arg04
2d0d8     01 18 06 F6 | 	mov	arg04, #1
2d0dc     0C AE BF FD | 	call	#_fatfs_cc_disk_write
2d0e0     00 FA 0D F2 | 	cmp	result1, #0 wz
2d0e4     01 FA 05 56 |  if_ne	mov	result1, #1
2d0e8     54 01 90 5D |  if_ne	jmp	#LR__4534
2d0ec     04 4E 05 F1 | 	add	fp, #4
2d0f0     A7 18 02 FB | 	rdlong	arg04, fp
2d0f4     0C 17 02 F6 | 	mov	arg03, arg04
2d0f8     04 4E 85 F1 | 	sub	fp, #4
2d0fc     10 18 06 F1 | 	add	arg04, #16
2d100     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d104     7F 18 06 F5 | 	and	arg04, #127
2d108     10 16 06 F1 | 	add	arg03, #16
2d10c     0B 19 42 FC | 	wrbyte	arg04, arg03
2d110                 | LR__4530
2d110     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2d114     10 4E 05 F1 | 	add	fp, #16
2d118     A7 FA 61 FC | 	wrlong	result1, fp
2d11c     04 4E 85 F1 | 	sub	fp, #4
2d120     A7 12 02 FB | 	rdlong	arg01, fp
2d124     08 4E 85 F1 | 	sub	fp, #8
2d128     A7 18 02 FB | 	rdlong	arg04, fp
2d12c     04 4E 85 F1 | 	sub	fp, #4
2d130     20 18 06 F1 | 	add	arg04, #32
2d134     0C 15 02 FB | 	rdlong	arg02, arg04
2d138     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
2d13c     08 4E 05 F1 | 	add	fp, #8
2d140     A7 FA 61 FC | 	wrlong	result1, fp
2d144     08 4E 85 F1 | 	sub	fp, #8
2d148     00 FA 0D F2 | 	cmp	result1, #0 wz
2d14c     E4 00 90 5D |  if_ne	jmp	#LR__4531
2d150     04 4E 05 F1 | 	add	fp, #4
2d154     A7 18 02 FB | 	rdlong	arg04, fp
2d158     24 18 06 F1 | 	add	arg04, #36
2d15c     0C 19 02 FB | 	rdlong	arg04, arg04
2d160     10 4E 05 F1 | 	add	fp, #16
2d164     A7 18 62 FC | 	wrlong	arg04, fp
2d168     0C 17 02 F6 | 	mov	arg03, arg04
2d16c     0B 16 06 F1 | 	add	arg03, #11
2d170     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d174     20 16 46 F5 | 	or	arg03, #32
2d178     0B 18 06 F1 | 	add	arg04, #11
2d17c     0C 17 42 FC | 	wrbyte	arg03, arg04
2d180     10 4E 85 F1 | 	sub	fp, #16
2d184     A7 18 02 FB | 	rdlong	arg04, fp
2d188     0C 13 02 FB | 	rdlong	arg01, arg04
2d18c     10 4E 05 F1 | 	add	fp, #16
2d190     A7 14 02 FB | 	rdlong	arg02, fp
2d194     14 4E 85 F1 | 	sub	fp, #20
2d198     08 18 06 F1 | 	add	arg04, #8
2d19c     0C 17 02 FB | 	rdlong	arg03, arg04
2d1a0     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2d1a4     14 4E 05 F1 | 	add	fp, #20
2d1a8     A7 12 02 FB | 	rdlong	arg01, fp
2d1ac     1C 12 06 F1 | 	add	arg01, #28
2d1b0     10 4E 85 F1 | 	sub	fp, #16
2d1b4     A7 18 02 FB | 	rdlong	arg04, fp
2d1b8     0C 18 06 F1 | 	add	arg04, #12
2d1bc     0C 15 02 FB | 	rdlong	arg02, arg04
2d1c0     09 15 62 FC | 	wrlong	arg02, arg01
2d1c4     10 4E 05 F1 | 	add	fp, #16
2d1c8     A7 12 02 FB | 	rdlong	arg01, fp
2d1cc     16 12 06 F1 | 	add	arg01, #22
2d1d0     04 4E 85 F1 | 	sub	fp, #4
2d1d4     A7 14 02 FB | 	rdlong	arg02, fp
2d1d8     09 15 62 FC | 	wrlong	arg02, arg01
2d1dc     04 4E 05 F1 | 	add	fp, #4
2d1e0     A7 12 02 FB | 	rdlong	arg01, fp
2d1e4     12 12 06 F1 | 	add	arg01, #18
2d1e8     09 01 58 FC | 	wrword	#0, arg01
2d1ec     08 4E 85 F1 | 	sub	fp, #8
2d1f0     A7 18 02 FB | 	rdlong	arg04, fp
2d1f4     03 18 06 F1 | 	add	arg04, #3
2d1f8     0C 03 48 FC | 	wrbyte	#1, arg04
2d1fc     A7 12 02 FB | 	rdlong	arg01, fp
2d200     0C 4E 85 F1 | 	sub	fp, #12
2d204     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
2d208     08 4E 05 F1 | 	add	fp, #8
2d20c     A7 FA 61 FC | 	wrlong	result1, fp
2d210     04 4E 85 F1 | 	sub	fp, #4
2d214     A7 18 02 FB | 	rdlong	arg04, fp
2d218     0C 17 02 F6 | 	mov	arg03, arg04
2d21c     04 4E 85 F1 | 	sub	fp, #4
2d220     10 18 06 F1 | 	add	arg04, #16
2d224     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d228     BF 18 06 F5 | 	and	arg04, #191
2d22c     10 16 06 F1 | 	add	arg03, #16
2d230     0B 19 42 FC | 	wrbyte	arg04, arg03
2d234                 | LR__4531
2d234                 | LR__4532
2d234                 | LR__4533
2d234                 | ' 					dir = fp->dir_ptr;
2d234                 | ' 					dir[ 11 ] |=  0x20 ;
2d234                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2d234                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2d234                 | ' 					st_dword(dir +  22 , tm);
2d234                 | ' 					st_word(dir +  18 , 0);
2d234                 | ' 					fs->wflag = 1;
2d234                 | ' 					res = sync_fs(fs);
2d234                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2d234                 | ' 				}
2d234                 | ' 			}
2d234                 | ' 		}
2d234                 | ' 	}
2d234                 | ' 
2d234                 | ' 	return res ;
2d234     08 4E 05 F1 | 	add	fp, #8
2d238     A7 FA 01 FB | 	rdlong	result1, fp
2d23c     08 4E 85 F1 | 	sub	fp, #8
2d240                 | LR__4534
2d240     A7 F0 03 F6 | 	mov	ptra, fp
2d244     B2 00 A0 FD | 	call	#popregs_
2d248                 | _fatfs_cc_f_sync_ret
2d248     2D 00 64 FD | 	ret
2d24c                 | 
2d24c                 | _fatfs_cc_f_close
2d24c     01 4A 05 F6 | 	mov	COUNT_, #1
2d250     A8 00 A0 FD | 	call	#pushregs_
2d254     10 F0 07 F1 | 	add	ptra, #16
2d258     04 4E 05 F1 | 	add	fp, #4
2d25c     A7 12 62 FC | 	wrlong	arg01, fp
2d260     04 4E 85 F1 | 	sub	fp, #4
2d264     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2d268     08 4E 05 F1 | 	add	fp, #8
2d26c     A7 FA 61 FC | 	wrlong	result1, fp
2d270     08 4E 85 F1 | 	sub	fp, #8
2d274     00 FA 0D F2 | 	cmp	result1, #0 wz
2d278     38 00 90 5D |  if_ne	jmp	#LR__4540
2d27c     04 4E 05 F1 | 	add	fp, #4
2d280     A7 12 02 FB | 	rdlong	arg01, fp
2d284     08 4E 05 F1 | 	add	fp, #8
2d288     A7 14 02 F6 | 	mov	arg02, fp
2d28c     0C 4E 85 F1 | 	sub	fp, #12
2d290     9C E6 BF FD | 	call	#_fatfs_cc_validate
2d294     08 4E 05 F1 | 	add	fp, #8
2d298     A7 FA 61 FC | 	wrlong	result1, fp
2d29c     08 4E 85 F1 | 	sub	fp, #8
2d2a0     00 FA 0D F2 | 	cmp	result1, #0 wz
2d2a4     04 4E 05 A1 |  if_e	add	fp, #4
2d2a8     A7 1E 02 AB |  if_e	rdlong	local01, fp
2d2ac     04 4E 85 A1 |  if_e	sub	fp, #4
2d2b0     0F 01 68 AC |  if_e	wrlong	#0, local01
2d2b4                 | LR__4540
2d2b4                 | ' 
2d2b4                 | ' 
2d2b4                 | ' 
2d2b4                 | ' 
2d2b4                 | ' 			fp->obj.fs = 0;
2d2b4                 | ' #line 4192 "ff.c"
2d2b4                 | ' 		}
2d2b4                 | ' 	}
2d2b4                 | ' 	return res;
2d2b4     08 4E 05 F1 | 	add	fp, #8
2d2b8     A7 FA 01 FB | 	rdlong	result1, fp
2d2bc     08 4E 85 F1 | 	sub	fp, #8
2d2c0     A7 F0 03 F6 | 	mov	ptra, fp
2d2c4     B2 00 A0 FD | 	call	#popregs_
2d2c8                 | _fatfs_cc_f_close_ret
2d2c8     2D 00 64 FD | 	ret
2d2cc                 | 
2d2cc                 | _fatfs_cc_f_lseek
2d2cc     00 4A 05 F6 | 	mov	COUNT_, #0
2d2d0     A8 00 A0 FD | 	call	#pushregs_
2d2d4     24 F0 07 F1 | 	add	ptra, #36
2d2d8     04 4E 05 F1 | 	add	fp, #4
2d2dc     A7 12 62 FC | 	wrlong	arg01, fp
2d2e0     04 4E 05 F1 | 	add	fp, #4
2d2e4     A7 14 62 FC | 	wrlong	arg02, fp
2d2e8     04 4E 85 F1 | 	sub	fp, #4
2d2ec     A7 12 02 FB | 	rdlong	arg01, fp
2d2f0     0C 4E 05 F1 | 	add	fp, #12
2d2f4     A7 14 02 F6 | 	mov	arg02, fp
2d2f8     10 4E 85 F1 | 	sub	fp, #16
2d2fc     30 E6 BF FD | 	call	#_fatfs_cc_validate
2d300     0C 4E 05 F1 | 	add	fp, #12
2d304     A7 FA 61 FC | 	wrlong	result1, fp
2d308     0C 4E 85 F1 | 	sub	fp, #12
2d30c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d310     1C 00 90 5D |  if_ne	jmp	#LR__4550
2d314     04 4E 05 F1 | 	add	fp, #4
2d318     A7 18 02 FB | 	rdlong	arg04, fp
2d31c     11 18 06 F1 | 	add	arg04, #17
2d320     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d324     08 4E 05 F1 | 	add	fp, #8
2d328     A7 18 62 FC | 	wrlong	arg04, fp
2d32c     0C 4E 85 F1 | 	sub	fp, #12
2d330                 | LR__4550
2d330     0C 4E 05 F1 | 	add	fp, #12
2d334     A7 18 0A FB | 	rdlong	arg04, fp wz
2d338     0C 4E 85 F1 | 	sub	fp, #12
2d33c     0C 4E 05 51 |  if_ne	add	fp, #12
2d340     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2d344     0C 4E 85 51 |  if_ne	sub	fp, #12
2d348     40 06 90 5D |  if_ne	jmp	#LR__4573
2d34c     04 4E 05 F1 | 	add	fp, #4
2d350     A7 18 02 FB | 	rdlong	arg04, fp
2d354     04 4E 05 F1 | 	add	fp, #4
2d358     A7 16 02 FB | 	rdlong	arg03, fp
2d35c     08 4E 85 F1 | 	sub	fp, #8
2d360     0C 18 06 F1 | 	add	arg04, #12
2d364     0C 19 02 FB | 	rdlong	arg04, arg04
2d368     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2d36c     3C 00 90 ED |  if_be	jmp	#LR__4551
2d370     04 4E 05 F1 | 	add	fp, #4
2d374     A7 16 02 FB | 	rdlong	arg03, fp
2d378     04 4E 85 F1 | 	sub	fp, #4
2d37c     10 16 06 F1 | 	add	arg03, #16
2d380     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d384     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2d388     02 16 CE F7 | 	test	arg03, #2 wz
2d38c     1C 00 90 5D |  if_ne	jmp	#LR__4551
2d390     04 4E 05 F1 | 	add	fp, #4
2d394     A7 16 02 FB | 	rdlong	arg03, fp
2d398     0C 16 06 F1 | 	add	arg03, #12
2d39c     0B 17 02 FB | 	rdlong	arg03, arg03
2d3a0     04 4E 05 F1 | 	add	fp, #4
2d3a4     A7 16 62 FC | 	wrlong	arg03, fp
2d3a8     08 4E 85 F1 | 	sub	fp, #8
2d3ac                 | LR__4551
2d3ac     04 4E 05 F1 | 	add	fp, #4
2d3b0     A7 16 02 FB | 	rdlong	arg03, fp
2d3b4     14 16 06 F1 | 	add	arg03, #20
2d3b8     0B 17 02 FB | 	rdlong	arg03, arg03
2d3bc     1C 4E 05 F1 | 	add	fp, #28
2d3c0     A7 16 62 FC | 	wrlong	arg03, fp
2d3c4     1C 4E 85 F1 | 	sub	fp, #28
2d3c8     A7 16 02 FB | 	rdlong	arg03, fp
2d3cc     18 4E 05 F1 | 	add	fp, #24
2d3d0     A7 00 68 FC | 	wrlong	#0, fp
2d3d4     14 16 06 F1 | 	add	arg03, #20
2d3d8     0B 01 68 FC | 	wrlong	#0, arg03
2d3dc     14 4E 85 F1 | 	sub	fp, #20
2d3e0     A7 16 02 FB | 	rdlong	arg03, fp
2d3e4     08 4E 85 F1 | 	sub	fp, #8
2d3e8     01 16 16 F2 | 	cmp	arg03, #1 wc
2d3ec     E4 03 90 CD |  if_b	jmp	#LR__4567
2d3f0     10 4E 05 F1 | 	add	fp, #16
2d3f4     A7 16 02 FB | 	rdlong	arg03, fp
2d3f8     0A 16 06 F1 | 	add	arg03, #10
2d3fc     0B 19 E2 FA | 	rdword	arg04, arg03
2d400     09 18 66 F0 | 	shl	arg04, #9
2d404     08 4E 05 F1 | 	add	fp, #8
2d408     A7 18 62 FC | 	wrlong	arg04, fp
2d40c     08 4E 05 F1 | 	add	fp, #8
2d410     A7 18 02 FB | 	rdlong	arg04, fp
2d414     20 4E 85 F1 | 	sub	fp, #32
2d418     01 18 16 F2 | 	cmp	arg04, #1 wc
2d41c     AC 00 90 CD |  if_b	jmp	#LR__4552
2d420     08 4E 05 F1 | 	add	fp, #8
2d424     A7 18 02 FB | 	rdlong	arg04, fp
2d428     01 18 86 F1 | 	sub	arg04, #1
2d42c     10 4E 05 F1 | 	add	fp, #16
2d430     A7 16 02 FB | 	rdlong	arg03, fp
2d434     0B 19 12 FD | 	qdiv	arg04, arg03
2d438     08 4E 05 F1 | 	add	fp, #8
2d43c     A7 FA 01 FB | 	rdlong	result1, fp
2d440     01 FA 85 F1 | 	sub	result1, #1
2d444     18 18 62 FD | 	getqx	arg04
2d448     0B FB 11 FD | 	qdiv	result1, arg03
2d44c     20 4E 85 F1 | 	sub	fp, #32
2d450     18 16 62 FD | 	getqx	arg03
2d454     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2d458     70 00 90 CD |  if_b	jmp	#LR__4552
2d45c     04 4E 05 F1 | 	add	fp, #4
2d460     A7 16 02 FB | 	rdlong	arg03, fp
2d464     1C 4E 05 F1 | 	add	fp, #28
2d468     A7 FA 01 FB | 	rdlong	result1, fp
2d46c     01 FA 85 F1 | 	sub	result1, #1
2d470     08 4E 85 F1 | 	sub	fp, #8
2d474     A7 18 02 FB | 	rdlong	arg04, fp
2d478     01 18 86 F1 | 	sub	arg04, #1
2d47c     0C FB 21 F5 | 	andn	result1, arg04
2d480     14 16 06 F1 | 	add	arg03, #20
2d484     0B FB 61 FC | 	wrlong	result1, arg03
2d488     10 4E 85 F1 | 	sub	fp, #16
2d48c     A7 16 02 FB | 	rdlong	arg03, fp
2d490     04 4E 85 F1 | 	sub	fp, #4
2d494     A7 18 02 FB | 	rdlong	arg04, fp
2d498     14 18 06 F1 | 	add	arg04, #20
2d49c     0C 19 02 FB | 	rdlong	arg04, arg04
2d4a0     0C 17 82 F1 | 	sub	arg03, arg04
2d4a4     04 4E 05 F1 | 	add	fp, #4
2d4a8     A7 16 62 FC | 	wrlong	arg03, fp
2d4ac     04 4E 85 F1 | 	sub	fp, #4
2d4b0     A7 16 02 FB | 	rdlong	arg03, fp
2d4b4     18 16 06 F1 | 	add	arg03, #24
2d4b8     0B 17 02 FB | 	rdlong	arg03, arg03
2d4bc     10 4E 05 F1 | 	add	fp, #16
2d4c0     A7 16 62 FC | 	wrlong	arg03, fp
2d4c4     14 4E 85 F1 | 	sub	fp, #20
2d4c8     D0 00 90 FD | 	jmp	#LR__4556
2d4cc                 | LR__4552
2d4cc     04 4E 05 F1 | 	add	fp, #4
2d4d0     A7 16 02 FB | 	rdlong	arg03, fp
2d4d4     08 16 06 F1 | 	add	arg03, #8
2d4d8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2d4dc     10 4E 05 F1 | 	add	fp, #16
2d4e0     A7 16 62 FC | 	wrlong	arg03, fp
2d4e4     14 4E 85 F1 | 	sub	fp, #20
2d4e8     94 00 90 5D |  if_ne	jmp	#LR__4555
2d4ec     04 4E 05 F1 | 	add	fp, #4
2d4f0     A7 12 02 FB | 	rdlong	arg01, fp
2d4f4     04 4E 85 F1 | 	sub	fp, #4
2d4f8     00 14 06 F6 | 	mov	arg02, #0
2d4fc     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
2d500     14 4E 05 F1 | 	add	fp, #20
2d504     A7 FA 61 FC | 	wrlong	result1, fp
2d508     14 4E 85 F1 | 	sub	fp, #20
2d50c     01 FA 0D F2 | 	cmp	result1, #1 wz
2d510     1C 00 90 5D |  if_ne	jmp	#LR__4553
2d514     04 4E 05 F1 | 	add	fp, #4
2d518     A7 16 02 FB | 	rdlong	arg03, fp
2d51c     04 4E 85 F1 | 	sub	fp, #4
2d520     11 16 06 F1 | 	add	arg03, #17
2d524     0B 05 48 FC | 	wrbyte	#2, arg03
2d528     02 FA 05 F6 | 	mov	result1, #2
2d52c     5C 04 90 FD | 	jmp	#LR__4573
2d530                 | LR__4553
2d530     14 4E 05 F1 | 	add	fp, #20
2d534     A7 FA 01 FB | 	rdlong	result1, fp
2d538     14 4E 85 F1 | 	sub	fp, #20
2d53c     FF FF 7F FF 
2d540     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2d544     1C 00 90 5D |  if_ne	jmp	#LR__4554
2d548     04 4E 05 F1 | 	add	fp, #4
2d54c     A7 16 02 FB | 	rdlong	arg03, fp
2d550     04 4E 85 F1 | 	sub	fp, #4
2d554     11 16 06 F1 | 	add	arg03, #17
2d558     0B 03 48 FC | 	wrbyte	#1, arg03
2d55c     01 FA 05 F6 | 	mov	result1, #1
2d560     28 04 90 FD | 	jmp	#LR__4573
2d564                 | LR__4554
2d564     04 4E 05 F1 | 	add	fp, #4
2d568     A7 16 02 FB | 	rdlong	arg03, fp
2d56c     10 4E 05 F1 | 	add	fp, #16
2d570     A7 18 02 FB | 	rdlong	arg04, fp
2d574     14 4E 85 F1 | 	sub	fp, #20
2d578     08 16 06 F1 | 	add	arg03, #8
2d57c     0B 19 62 FC | 	wrlong	arg04, arg03
2d580                 | LR__4555
2d580     04 4E 05 F1 | 	add	fp, #4
2d584     A7 16 02 FB | 	rdlong	arg03, fp
2d588     10 4E 05 F1 | 	add	fp, #16
2d58c     A7 18 02 FB | 	rdlong	arg04, fp
2d590     14 4E 85 F1 | 	sub	fp, #20
2d594     18 16 06 F1 | 	add	arg03, #24
2d598     0B 19 62 FC | 	wrlong	arg04, arg03
2d59c                 | LR__4556
2d59c     14 4E 05 F1 | 	add	fp, #20
2d5a0     A7 16 0A FB | 	rdlong	arg03, fp wz
2d5a4     14 4E 85 F1 | 	sub	fp, #20
2d5a8     28 02 90 AD |  if_e	jmp	#LR__4566
2d5ac                 | ' 				while (ofs > bcs) {
2d5ac                 | LR__4557
2d5ac     08 4E 05 F1 | 	add	fp, #8
2d5b0     A7 18 02 FB | 	rdlong	arg04, fp
2d5b4     10 4E 05 F1 | 	add	fp, #16
2d5b8     A7 16 02 FB | 	rdlong	arg03, fp
2d5bc     18 4E 85 F1 | 	sub	fp, #24
2d5c0     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2d5c4     68 01 90 ED |  if_be	jmp	#LR__4563
2d5c8     08 4E 05 F1 | 	add	fp, #8
2d5cc     A7 18 02 FB | 	rdlong	arg04, fp
2d5d0     10 4E 05 F1 | 	add	fp, #16
2d5d4     A7 16 02 FB | 	rdlong	arg03, fp
2d5d8     0B 19 82 F1 | 	sub	arg04, arg03
2d5dc     10 4E 85 F1 | 	sub	fp, #16
2d5e0     A7 18 62 FC | 	wrlong	arg04, fp
2d5e4     04 4E 85 F1 | 	sub	fp, #4
2d5e8     A7 18 02 FB | 	rdlong	arg04, fp
2d5ec     0C FB 01 F6 | 	mov	result1, arg04
2d5f0     14 18 06 F1 | 	add	arg04, #20
2d5f4     0C 19 02 FB | 	rdlong	arg04, arg04
2d5f8     14 4E 05 F1 | 	add	fp, #20
2d5fc     A7 16 02 FB | 	rdlong	arg03, fp
2d600     0B 19 02 F1 | 	add	arg04, arg03
2d604     14 FA 05 F1 | 	add	result1, #20
2d608     FD 18 62 FC | 	wrlong	arg04, result1
2d60c     14 4E 85 F1 | 	sub	fp, #20
2d610     A7 16 02 FB | 	rdlong	arg03, fp
2d614     04 4E 85 F1 | 	sub	fp, #4
2d618     10 16 06 F1 | 	add	arg03, #16
2d61c     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d620     02 16 CE F7 | 	test	arg03, #2 wz
2d624     3C 00 90 AD |  if_e	jmp	#LR__4558
2d628     04 4E 05 F1 | 	add	fp, #4
2d62c     A7 12 02 FB | 	rdlong	arg01, fp
2d630     10 4E 05 F1 | 	add	fp, #16
2d634     A7 14 02 FB | 	rdlong	arg02, fp
2d638     14 4E 85 F1 | 	sub	fp, #20
2d63c     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
2d640     14 4E 05 F1 | 	add	fp, #20
2d644     A7 FA 61 FC | 	wrlong	result1, fp
2d648     00 FA 4D F2 | 	cmps	result1, #0 wz
2d64c     14 4E 85 F1 | 	sub	fp, #20
2d650     08 4E 05 A1 |  if_e	add	fp, #8
2d654     A7 00 68 AC |  if_e	wrlong	#0, fp
2d658     08 4E 85 A1 |  if_e	sub	fp, #8
2d65c                 | ' 							ofs = 0; break;
2d65c     D0 00 90 AD |  if_e	jmp	#LR__4563
2d660     24 00 90 FD | 	jmp	#LR__4559
2d664                 | LR__4558
2d664     04 4E 05 F1 | 	add	fp, #4
2d668     A7 12 02 FB | 	rdlong	arg01, fp
2d66c     10 4E 05 F1 | 	add	fp, #16
2d670     A7 14 02 FB | 	rdlong	arg02, fp
2d674     14 4E 85 F1 | 	sub	fp, #20
2d678     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2d67c     14 4E 05 F1 | 	add	fp, #20
2d680     A7 FA 61 FC | 	wrlong	result1, fp
2d684     14 4E 85 F1 | 	sub	fp, #20
2d688                 | LR__4559
2d688     14 4E 05 F1 | 	add	fp, #20
2d68c     A7 16 02 FB | 	rdlong	arg03, fp
2d690     14 4E 85 F1 | 	sub	fp, #20
2d694     FF FF 7F FF 
2d698     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2d69c     1C 00 90 5D |  if_ne	jmp	#LR__4560
2d6a0     04 4E 05 F1 | 	add	fp, #4
2d6a4     A7 16 02 FB | 	rdlong	arg03, fp
2d6a8     04 4E 85 F1 | 	sub	fp, #4
2d6ac     11 16 06 F1 | 	add	arg03, #17
2d6b0     0B 03 48 FC | 	wrbyte	#1, arg03
2d6b4     01 FA 05 F6 | 	mov	result1, #1
2d6b8     D0 02 90 FD | 	jmp	#LR__4573
2d6bc                 | LR__4560
2d6bc     14 4E 05 F1 | 	add	fp, #20
2d6c0     A7 16 02 FB | 	rdlong	arg03, fp
2d6c4     14 4E 85 F1 | 	sub	fp, #20
2d6c8     02 16 16 F2 | 	cmp	arg03, #2 wc
2d6cc     24 00 90 CD |  if_b	jmp	#LR__4561
2d6d0     10 4E 05 F1 | 	add	fp, #16
2d6d4     A7 18 02 FB | 	rdlong	arg04, fp
2d6d8     04 4E 05 F1 | 	add	fp, #4
2d6dc     A7 16 02 FB | 	rdlong	arg03, fp
2d6e0     14 4E 85 F1 | 	sub	fp, #20
2d6e4     18 18 06 F1 | 	add	arg04, #24
2d6e8     0C 19 02 FB | 	rdlong	arg04, arg04
2d6ec     0C 17 12 F2 | 	cmp	arg03, arg04 wc
2d6f0     1C 00 90 CD |  if_b	jmp	#LR__4562
2d6f4                 | LR__4561
2d6f4     04 4E 05 F1 | 	add	fp, #4
2d6f8     A7 16 02 FB | 	rdlong	arg03, fp
2d6fc     04 4E 85 F1 | 	sub	fp, #4
2d700     11 16 06 F1 | 	add	arg03, #17
2d704     0B 05 48 FC | 	wrbyte	#2, arg03
2d708     02 FA 05 F6 | 	mov	result1, #2
2d70c     7C 02 90 FD | 	jmp	#LR__4573
2d710                 | LR__4562
2d710     04 4E 05 F1 | 	add	fp, #4
2d714     A7 18 02 FB | 	rdlong	arg04, fp
2d718     10 4E 05 F1 | 	add	fp, #16
2d71c     A7 16 02 FB | 	rdlong	arg03, fp
2d720     14 4E 85 F1 | 	sub	fp, #20
2d724     18 18 06 F1 | 	add	arg04, #24
2d728     0C 17 62 FC | 	wrlong	arg03, arg04
2d72c     7C FE 9F FD | 	jmp	#LR__4557
2d730                 | LR__4563
2d730     04 4E 05 F1 | 	add	fp, #4
2d734     A7 16 02 FB | 	rdlong	arg03, fp
2d738     0B 13 02 F6 | 	mov	arg01, arg03
2d73c     14 16 06 F1 | 	add	arg03, #20
2d740     0B 15 02 FB | 	rdlong	arg02, arg03
2d744     04 4E 05 F1 | 	add	fp, #4
2d748     A7 16 02 FB | 	rdlong	arg03, fp
2d74c     0B 15 02 F1 | 	add	arg02, arg03
2d750     14 12 06 F1 | 	add	arg01, #20
2d754     09 15 62 FC | 	wrlong	arg02, arg01
2d758     A7 16 02 FB | 	rdlong	arg03, fp
2d75c     08 4E 85 F1 | 	sub	fp, #8
2d760     FF 17 CE F7 | 	test	arg03, #511 wz
2d764     6C 00 90 AD |  if_e	jmp	#LR__4565
2d768     10 4E 05 F1 | 	add	fp, #16
2d76c     A7 12 02 FB | 	rdlong	arg01, fp
2d770     04 4E 05 F1 | 	add	fp, #4
2d774     A7 14 02 FB | 	rdlong	arg02, fp
2d778     14 4E 85 F1 | 	sub	fp, #20
2d77c     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2d780     1C 4E 05 F1 | 	add	fp, #28
2d784     A7 FA 61 FC | 	wrlong	result1, fp
2d788     1C 4E 85 F1 | 	sub	fp, #28
2d78c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d790     1C 00 90 5D |  if_ne	jmp	#LR__4564
2d794     04 4E 05 F1 | 	add	fp, #4
2d798     A7 16 02 FB | 	rdlong	arg03, fp
2d79c     04 4E 85 F1 | 	sub	fp, #4
2d7a0     11 16 06 F1 | 	add	arg03, #17
2d7a4     0B 05 48 FC | 	wrbyte	#2, arg03
2d7a8     02 FA 05 F6 | 	mov	result1, #2
2d7ac     DC 01 90 FD | 	jmp	#LR__4573
2d7b0                 | LR__4564
2d7b0     1C 4E 05 F1 | 	add	fp, #28
2d7b4     A7 18 02 FB | 	rdlong	arg04, fp
2d7b8     14 4E 85 F1 | 	sub	fp, #20
2d7bc     A7 16 02 FB | 	rdlong	arg03, fp
2d7c0     09 16 46 F0 | 	shr	arg03, #9
2d7c4     0B 19 02 F1 | 	add	arg04, arg03
2d7c8     14 4E 05 F1 | 	add	fp, #20
2d7cc     A7 18 62 FC | 	wrlong	arg04, fp
2d7d0     1C 4E 85 F1 | 	sub	fp, #28
2d7d4                 | LR__4565
2d7d4                 | LR__4566
2d7d4                 | LR__4567
2d7d4     04 4E 05 F1 | 	add	fp, #4
2d7d8     A7 18 02 FB | 	rdlong	arg04, fp
2d7dc     0C 17 02 F6 | 	mov	arg03, arg04
2d7e0     04 4E 85 F1 | 	sub	fp, #4
2d7e4     14 16 06 F1 | 	add	arg03, #20
2d7e8     0B 17 02 FB | 	rdlong	arg03, arg03
2d7ec     0C 18 06 F1 | 	add	arg04, #12
2d7f0     0C 19 02 FB | 	rdlong	arg04, arg04
2d7f4     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2d7f8     3C 00 90 ED |  if_be	jmp	#LR__4568
2d7fc     04 4E 05 F1 | 	add	fp, #4
2d800     A7 18 02 FB | 	rdlong	arg04, fp
2d804     0C 17 02 F6 | 	mov	arg03, arg04
2d808     14 18 06 F1 | 	add	arg04, #20
2d80c     0C 19 02 FB | 	rdlong	arg04, arg04
2d810     0C 16 06 F1 | 	add	arg03, #12
2d814     0B 19 62 FC | 	wrlong	arg04, arg03
2d818     A7 18 02 FB | 	rdlong	arg04, fp
2d81c     0C 17 02 F6 | 	mov	arg03, arg04
2d820     04 4E 85 F1 | 	sub	fp, #4
2d824     10 18 06 F1 | 	add	arg04, #16
2d828     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d82c     40 18 46 F5 | 	or	arg04, #64
2d830     10 16 06 F1 | 	add	arg03, #16
2d834     0B 19 42 FC | 	wrbyte	arg04, arg03
2d838                 | LR__4568
2d838     04 4E 05 F1 | 	add	fp, #4
2d83c     A7 16 02 FB | 	rdlong	arg03, fp
2d840     04 4E 85 F1 | 	sub	fp, #4
2d844     14 16 06 F1 | 	add	arg03, #20
2d848     0B 17 02 FB | 	rdlong	arg03, arg03
2d84c     FF 17 CE F7 | 	test	arg03, #511 wz
2d850     2C 01 90 AD |  if_e	jmp	#LR__4572
2d854     04 4E 05 F1 | 	add	fp, #4
2d858     A7 18 02 FB | 	rdlong	arg04, fp
2d85c     18 4E 05 F1 | 	add	fp, #24
2d860     A7 16 02 FB | 	rdlong	arg03, fp
2d864     1C 4E 85 F1 | 	sub	fp, #28
2d868     1C 18 06 F1 | 	add	arg04, #28
2d86c     0C 19 02 FB | 	rdlong	arg04, arg04
2d870     0C 17 0A F2 | 	cmp	arg03, arg04 wz
2d874     08 01 90 AD |  if_e	jmp	#LR__4572
2d878     04 4E 05 F1 | 	add	fp, #4
2d87c     A7 16 02 FB | 	rdlong	arg03, fp
2d880     04 4E 85 F1 | 	sub	fp, #4
2d884     10 16 06 F1 | 	add	arg03, #16
2d888     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d88c     80 16 CE F7 | 	test	arg03, #128 wz
2d890     7C 00 90 AD |  if_e	jmp	#LR__4570
2d894     10 4E 05 F1 | 	add	fp, #16
2d898     A7 16 02 FB | 	rdlong	arg03, fp
2d89c     01 16 06 F1 | 	add	arg03, #1
2d8a0     0B 13 C2 FA | 	rdbyte	arg01, arg03
2d8a4     0C 4E 85 F1 | 	sub	fp, #12
2d8a8     A7 16 02 FB | 	rdlong	arg03, fp
2d8ac     0B 15 02 F6 | 	mov	arg02, arg03
2d8b0     28 14 06 F1 | 	add	arg02, #40
2d8b4     04 4E 85 F1 | 	sub	fp, #4
2d8b8     1C 16 06 F1 | 	add	arg03, #28
2d8bc     0B 17 02 FB | 	rdlong	arg03, arg03
2d8c0     01 18 06 F6 | 	mov	arg04, #1
2d8c4     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2d8c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2d8cc     1C 00 90 AD |  if_e	jmp	#LR__4569
2d8d0     04 4E 05 F1 | 	add	fp, #4
2d8d4     A7 16 02 FB | 	rdlong	arg03, fp
2d8d8     04 4E 85 F1 | 	sub	fp, #4
2d8dc     11 16 06 F1 | 	add	arg03, #17
2d8e0     0B 03 48 FC | 	wrbyte	#1, arg03
2d8e4     01 FA 05 F6 | 	mov	result1, #1
2d8e8     A0 00 90 FD | 	jmp	#LR__4573
2d8ec                 | LR__4569
2d8ec     04 4E 05 F1 | 	add	fp, #4
2d8f0     A7 18 02 FB | 	rdlong	arg04, fp
2d8f4     0C 17 02 F6 | 	mov	arg03, arg04
2d8f8     04 4E 85 F1 | 	sub	fp, #4
2d8fc     10 18 06 F1 | 	add	arg04, #16
2d900     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d904     7F 18 06 F5 | 	and	arg04, #127
2d908     10 16 06 F1 | 	add	arg03, #16
2d90c     0B 19 42 FC | 	wrbyte	arg04, arg03
2d910                 | LR__4570
2d910     10 4E 05 F1 | 	add	fp, #16
2d914     A7 16 02 FB | 	rdlong	arg03, fp
2d918     01 16 06 F1 | 	add	arg03, #1
2d91c     0B 13 C2 FA | 	rdbyte	arg01, arg03
2d920     0C 4E 85 F1 | 	sub	fp, #12
2d924     A7 14 02 FB | 	rdlong	arg02, fp
2d928     28 14 06 F1 | 	add	arg02, #40
2d92c     18 4E 05 F1 | 	add	fp, #24
2d930     A7 16 02 FB | 	rdlong	arg03, fp
2d934     1C 4E 85 F1 | 	sub	fp, #28
2d938     01 18 06 F6 | 	mov	arg04, #1
2d93c     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
2d940     00 FA 0D F2 | 	cmp	result1, #0 wz
2d944     1C 00 90 AD |  if_e	jmp	#LR__4571
2d948     04 4E 05 F1 | 	add	fp, #4
2d94c     A7 16 02 FB | 	rdlong	arg03, fp
2d950     04 4E 85 F1 | 	sub	fp, #4
2d954     11 16 06 F1 | 	add	arg03, #17
2d958     0B 03 48 FC | 	wrbyte	#1, arg03
2d95c     01 FA 05 F6 | 	mov	result1, #1
2d960     28 00 90 FD | 	jmp	#LR__4573
2d964                 | LR__4571
2d964     04 4E 05 F1 | 	add	fp, #4
2d968     A7 18 02 FB | 	rdlong	arg04, fp
2d96c     18 4E 05 F1 | 	add	fp, #24
2d970     A7 16 02 FB | 	rdlong	arg03, fp
2d974     1C 4E 85 F1 | 	sub	fp, #28
2d978     1C 18 06 F1 | 	add	arg04, #28
2d97c     0C 17 62 FC | 	wrlong	arg03, arg04
2d980                 | LR__4572
2d980                 | ' 
2d980                 | ' 			fp->sect = nsect;
2d980                 | ' 		}
2d980                 | ' 	}
2d980                 | ' 
2d980                 | ' 	return res ;
2d980     0C 4E 05 F1 | 	add	fp, #12
2d984     A7 FA 01 FB | 	rdlong	result1, fp
2d988     0C 4E 85 F1 | 	sub	fp, #12
2d98c                 | LR__4573
2d98c     A7 F0 03 F6 | 	mov	ptra, fp
2d990     B2 00 A0 FD | 	call	#popregs_
2d994                 | _fatfs_cc_f_lseek_ret
2d994     2D 00 64 FD | 	ret
2d998                 | 
2d998                 | _fatfs_cc_f_opendir
2d998     01 4A 05 F6 | 	mov	COUNT_, #1
2d99c     A8 00 A0 FD | 	call	#pushregs_
2d9a0     14 F0 07 F1 | 	add	ptra, #20
2d9a4     04 4E 05 F1 | 	add	fp, #4
2d9a8     A7 12 62 FC | 	wrlong	arg01, fp
2d9ac     04 4E 05 F1 | 	add	fp, #4
2d9b0     A7 14 62 FC | 	wrlong	arg02, fp
2d9b4     04 4E 85 F1 | 	sub	fp, #4
2d9b8     A7 16 0A FB | 	rdlong	arg03, fp wz
2d9bc     04 4E 85 F1 | 	sub	fp, #4
2d9c0     09 FA 05 A6 |  if_e	mov	result1, #9
2d9c4     78 01 90 AD |  if_e	jmp	#LR__4586
2d9c8     08 4E 05 F1 | 	add	fp, #8
2d9cc     A7 12 02 F6 | 	mov	arg01, fp
2d9d0     08 4E 05 F1 | 	add	fp, #8
2d9d4     A7 14 02 F6 | 	mov	arg02, fp
2d9d8     10 4E 85 F1 | 	sub	fp, #16
2d9dc     00 16 06 F6 | 	mov	arg03, #0
2d9e0     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2d9e4     0C 4E 05 F1 | 	add	fp, #12
2d9e8     A7 FA 61 FC | 	wrlong	result1, fp
2d9ec     0C 4E 85 F1 | 	sub	fp, #12
2d9f0     00 FA 0D F2 | 	cmp	result1, #0 wz
2d9f4     20 01 90 5D |  if_ne	jmp	#LR__4585
2d9f8     04 4E 05 F1 | 	add	fp, #4
2d9fc     A7 16 02 FB | 	rdlong	arg03, fp
2da00     0C 4E 05 F1 | 	add	fp, #12
2da04     A7 FA 01 FB | 	rdlong	result1, fp
2da08     0B FB 61 FC | 	wrlong	result1, arg03
2da0c     0C 4E 85 F1 | 	sub	fp, #12
2da10     A7 12 02 FB | 	rdlong	arg01, fp
2da14     04 4E 05 F1 | 	add	fp, #4
2da18     A7 14 02 FB | 	rdlong	arg02, fp
2da1c     08 4E 85 F1 | 	sub	fp, #8
2da20     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
2da24     0C 4E 05 F1 | 	add	fp, #12
2da28     A7 FA 61 FC | 	wrlong	result1, fp
2da2c     0C 4E 85 F1 | 	sub	fp, #12
2da30     00 FA 0D F2 | 	cmp	result1, #0 wz
2da34     C4 00 90 5D |  if_ne	jmp	#LR__4584
2da38     04 4E 05 F1 | 	add	fp, #4
2da3c     A7 16 02 FB | 	rdlong	arg03, fp
2da40     04 4E 85 F1 | 	sub	fp, #4
2da44     2B 16 06 F1 | 	add	arg03, #43
2da48     0B 17 C2 FA | 	rdbyte	arg03, arg03
2da4c     80 16 CE F7 | 	test	arg03, #128 wz
2da50     58 00 90 5D |  if_ne	jmp	#LR__4582
2da54     04 4E 05 F1 | 	add	fp, #4
2da58     A7 16 02 FB | 	rdlong	arg03, fp
2da5c     04 4E 85 F1 | 	sub	fp, #4
2da60     06 16 06 F1 | 	add	arg03, #6
2da64     0B 17 C2 FA | 	rdbyte	arg03, arg03
2da68     10 16 CE F7 | 	test	arg03, #16 wz
2da6c     30 00 90 AD |  if_e	jmp	#LR__4580
2da70     04 4E 05 F1 | 	add	fp, #4
2da74     A7 16 02 FB | 	rdlong	arg03, fp
2da78     0B 1F 02 F6 | 	mov	local01, arg03
2da7c     0C 4E 05 F1 | 	add	fp, #12
2da80     A7 12 02 FB | 	rdlong	arg01, fp
2da84     10 4E 85 F1 | 	sub	fp, #16
2da88     1C 16 06 F1 | 	add	arg03, #28
2da8c     0B 15 02 FB | 	rdlong	arg02, arg03
2da90     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
2da94     08 1E 06 F1 | 	add	local01, #8
2da98     0F FB 61 FC | 	wrlong	result1, local01
2da9c     0C 00 90 FD | 	jmp	#LR__4581
2daa0                 | LR__4580
2daa0     0C 4E 05 F1 | 	add	fp, #12
2daa4     A7 0A 68 FC | 	wrlong	#5, fp
2daa8     0C 4E 85 F1 | 	sub	fp, #12
2daac                 | LR__4581
2daac                 | LR__4582
2daac     0C 4E 05 F1 | 	add	fp, #12
2dab0     A7 1E 0A FB | 	rdlong	local01, fp wz
2dab4     0C 4E 85 F1 | 	sub	fp, #12
2dab8     40 00 90 5D |  if_ne	jmp	#LR__4583
2dabc     04 4E 05 F1 | 	add	fp, #4
2dac0     A7 1E 02 FB | 	rdlong	local01, fp
2dac4     0C 4E 05 F1 | 	add	fp, #12
2dac8     A7 16 02 FB | 	rdlong	arg03, fp
2dacc     06 16 06 F1 | 	add	arg03, #6
2dad0     0B 17 E2 FA | 	rdword	arg03, arg03
2dad4     04 1E 06 F1 | 	add	local01, #4
2dad8     0F 17 52 FC | 	wrword	arg03, local01
2dadc     0C 4E 85 F1 | 	sub	fp, #12
2dae0     A7 12 02 FB | 	rdlong	arg01, fp
2dae4     04 4E 85 F1 | 	sub	fp, #4
2dae8     00 14 06 F6 | 	mov	arg02, #0
2daec     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
2daf0     0C 4E 05 F1 | 	add	fp, #12
2daf4     A7 FA 61 FC | 	wrlong	result1, fp
2daf8     0C 4E 85 F1 | 	sub	fp, #12
2dafc                 | LR__4583
2dafc                 | LR__4584
2dafc     0C 4E 05 F1 | 	add	fp, #12
2db00     A7 1E 02 FB | 	rdlong	local01, fp
2db04     0C 4E 85 F1 | 	sub	fp, #12
2db08     04 1E 0E F2 | 	cmp	local01, #4 wz
2db0c     0C 4E 05 A1 |  if_e	add	fp, #12
2db10     A7 0A 68 AC |  if_e	wrlong	#5, fp
2db14     0C 4E 85 A1 |  if_e	sub	fp, #12
2db18                 | LR__4585
2db18     0C 4E 05 F1 | 	add	fp, #12
2db1c     A7 1E 0A FB | 	rdlong	local01, fp wz
2db20     0C 4E 85 F1 | 	sub	fp, #12
2db24     04 4E 05 51 |  if_ne	add	fp, #4
2db28     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2db2c     04 4E 85 51 |  if_ne	sub	fp, #4
2db30     0F 01 68 5C |  if_ne	wrlong	#0, local01
2db34                 | ' 
2db34                 | ' 	return res ;
2db34     0C 4E 05 F1 | 	add	fp, #12
2db38     A7 FA 01 FB | 	rdlong	result1, fp
2db3c     0C 4E 85 F1 | 	sub	fp, #12
2db40                 | LR__4586
2db40     A7 F0 03 F6 | 	mov	ptra, fp
2db44     B2 00 A0 FD | 	call	#popregs_
2db48                 | _fatfs_cc_f_opendir_ret
2db48     2D 00 64 FD | 	ret
2db4c                 | 
2db4c                 | _fatfs_cc_f_closedir
2db4c     00 4A 05 F6 | 	mov	COUNT_, #0
2db50     A8 00 A0 FD | 	call	#pushregs_
2db54     10 F0 07 F1 | 	add	ptra, #16
2db58     04 4E 05 F1 | 	add	fp, #4
2db5c     A7 12 62 FC | 	wrlong	arg01, fp
2db60     08 4E 05 F1 | 	add	fp, #8
2db64     A7 14 02 F6 | 	mov	arg02, fp
2db68     0C 4E 85 F1 | 	sub	fp, #12
2db6c     C0 DD BF FD | 	call	#_fatfs_cc_validate
2db70     08 4E 05 F1 | 	add	fp, #8
2db74     A7 FA 61 FC | 	wrlong	result1, fp
2db78     08 4E 85 F1 | 	sub	fp, #8
2db7c     00 FA 0D F2 | 	cmp	result1, #0 wz
2db80     04 4E 05 A1 |  if_e	add	fp, #4
2db84     A7 FA 01 AB |  if_e	rdlong	result1, fp
2db88     04 4E 85 A1 |  if_e	sub	fp, #4
2db8c     FD 00 68 AC |  if_e	wrlong	#0, result1
2db90                 | ' 
2db90                 | ' 
2db90                 | ' 
2db90                 | ' 
2db90                 | ' 		dp->obj.fs = 0;
2db90                 | ' #line 4633 "ff.c"
2db90                 | ' 	}
2db90                 | ' 	return res;
2db90     08 4E 05 F1 | 	add	fp, #8
2db94     A7 FA 01 FB | 	rdlong	result1, fp
2db98     08 4E 85 F1 | 	sub	fp, #8
2db9c     A7 F0 03 F6 | 	mov	ptra, fp
2dba0     B2 00 A0 FD | 	call	#popregs_
2dba4                 | _fatfs_cc_f_closedir_ret
2dba4     2D 00 64 FD | 	ret
2dba8                 | 
2dba8                 | _fatfs_cc_f_readdir
2dba8     00 4A 05 F6 | 	mov	COUNT_, #0
2dbac     A8 00 A0 FD | 	call	#pushregs_
2dbb0     14 F0 07 F1 | 	add	ptra, #20
2dbb4     04 4E 05 F1 | 	add	fp, #4
2dbb8     A7 12 62 FC | 	wrlong	arg01, fp
2dbbc     04 4E 05 F1 | 	add	fp, #4
2dbc0     A7 14 62 FC | 	wrlong	arg02, fp
2dbc4     04 4E 85 F1 | 	sub	fp, #4
2dbc8     A7 12 02 FB | 	rdlong	arg01, fp
2dbcc     0C 4E 05 F1 | 	add	fp, #12
2dbd0     A7 14 02 F6 | 	mov	arg02, fp
2dbd4     10 4E 85 F1 | 	sub	fp, #16
2dbd8     54 DD BF FD | 	call	#_fatfs_cc_validate
2dbdc     0C 4E 05 F1 | 	add	fp, #12
2dbe0     A7 FA 61 FC | 	wrlong	result1, fp
2dbe4     0C 4E 85 F1 | 	sub	fp, #12
2dbe8     00 FA 0D F2 | 	cmp	result1, #0 wz
2dbec     BC 00 90 5D |  if_ne	jmp	#LR__4593
2dbf0     08 4E 05 F1 | 	add	fp, #8
2dbf4     A7 FA 09 FB | 	rdlong	result1, fp wz
2dbf8     08 4E 85 F1 | 	sub	fp, #8
2dbfc     24 00 90 5D |  if_ne	jmp	#LR__4590
2dc00     04 4E 05 F1 | 	add	fp, #4
2dc04     A7 12 02 FB | 	rdlong	arg01, fp
2dc08     04 4E 85 F1 | 	sub	fp, #4
2dc0c     00 14 06 F6 | 	mov	arg02, #0
2dc10     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2dc14     0C 4E 05 F1 | 	add	fp, #12
2dc18     A7 FA 61 FC | 	wrlong	result1, fp
2dc1c     0C 4E 85 F1 | 	sub	fp, #12
2dc20     88 00 90 FD | 	jmp	#LR__4592
2dc24                 | LR__4590
2dc24     04 4E 05 F1 | 	add	fp, #4
2dc28     A7 12 02 FB | 	rdlong	arg01, fp
2dc2c     04 4E 85 F1 | 	sub	fp, #4
2dc30     00 14 06 F6 | 	mov	arg02, #0
2dc34     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2dc38     0C 4E 05 F1 | 	add	fp, #12
2dc3c     A7 FA 61 FC | 	wrlong	result1, fp
2dc40     0C 4E 85 F1 | 	sub	fp, #12
2dc44     04 FA 0D F2 | 	cmp	result1, #4 wz
2dc48     0C 4E 05 A1 |  if_e	add	fp, #12
2dc4c     A7 00 68 AC |  if_e	wrlong	#0, fp
2dc50     0C 4E 85 A1 |  if_e	sub	fp, #12
2dc54     0C 4E 05 F1 | 	add	fp, #12
2dc58     A7 FA 09 FB | 	rdlong	result1, fp wz
2dc5c     0C 4E 85 F1 | 	sub	fp, #12
2dc60     48 00 90 5D |  if_ne	jmp	#LR__4591
2dc64     04 4E 05 F1 | 	add	fp, #4
2dc68     A7 12 02 FB | 	rdlong	arg01, fp
2dc6c     04 4E 05 F1 | 	add	fp, #4
2dc70     A7 14 02 FB | 	rdlong	arg02, fp
2dc74     08 4E 85 F1 | 	sub	fp, #8
2dc78     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2dc7c     04 4E 05 F1 | 	add	fp, #4
2dc80     A7 12 02 FB | 	rdlong	arg01, fp
2dc84     04 4E 85 F1 | 	sub	fp, #4
2dc88     00 14 06 F6 | 	mov	arg02, #0
2dc8c     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2dc90     0C 4E 05 F1 | 	add	fp, #12
2dc94     A7 FA 61 FC | 	wrlong	result1, fp
2dc98     0C 4E 85 F1 | 	sub	fp, #12
2dc9c     04 FA 0D F2 | 	cmp	result1, #4 wz
2dca0     0C 4E 05 A1 |  if_e	add	fp, #12
2dca4     A7 00 68 AC |  if_e	wrlong	#0, fp
2dca8     0C 4E 85 A1 |  if_e	sub	fp, #12
2dcac                 | LR__4591
2dcac                 | LR__4592
2dcac                 | LR__4593
2dcac                 | ' 			}
2dcac                 | ' 			;
2dcac                 | ' 		}
2dcac                 | ' 	}
2dcac                 | ' 	return res ;
2dcac     0C 4E 05 F1 | 	add	fp, #12
2dcb0     A7 FA 01 FB | 	rdlong	result1, fp
2dcb4     0C 4E 85 F1 | 	sub	fp, #12
2dcb8     A7 F0 03 F6 | 	mov	ptra, fp
2dcbc     B2 00 A0 FD | 	call	#popregs_
2dcc0                 | _fatfs_cc_f_readdir_ret
2dcc0     2D 00 64 FD | 	ret
2dcc4                 | 
2dcc4                 | _fatfs_cc_f_stat
2dcc4     00 4A 05 F6 | 	mov	COUNT_, #0
2dcc8     A8 00 A0 FD | 	call	#pushregs_
2dccc     40 F0 07 F1 | 	add	ptra, #64
2dcd0     04 4E 05 F1 | 	add	fp, #4
2dcd4     A7 12 62 FC | 	wrlong	arg01, fp
2dcd8     04 4E 05 F1 | 	add	fp, #4
2dcdc     A7 14 62 FC | 	wrlong	arg02, fp
2dce0     04 4E 85 F1 | 	sub	fp, #4
2dce4     A7 12 02 F6 | 	mov	arg01, fp
2dce8     0C 4E 05 F1 | 	add	fp, #12
2dcec     A7 14 02 F6 | 	mov	arg02, fp
2dcf0     10 4E 85 F1 | 	sub	fp, #16
2dcf4     00 16 06 F6 | 	mov	arg03, #0
2dcf8     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2dcfc     0C 4E 05 F1 | 	add	fp, #12
2dd00     A7 FA 61 FC | 	wrlong	result1, fp
2dd04     0C 4E 85 F1 | 	sub	fp, #12
2dd08     00 FA 0D F2 | 	cmp	result1, #0 wz
2dd0c     74 00 90 5D |  if_ne	jmp	#LR__4603
2dd10     10 4E 05 F1 | 	add	fp, #16
2dd14     A7 12 02 F6 | 	mov	arg01, fp
2dd18     0C 4E 85 F1 | 	sub	fp, #12
2dd1c     A7 14 02 FB | 	rdlong	arg02, fp
2dd20     04 4E 85 F1 | 	sub	fp, #4
2dd24     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2dd28     0C 4E 05 F1 | 	add	fp, #12
2dd2c     A7 FA 61 FC | 	wrlong	result1, fp
2dd30     0C 4E 85 F1 | 	sub	fp, #12
2dd34     00 FA 0D F2 | 	cmp	result1, #0 wz
2dd38     48 00 90 5D |  if_ne	jmp	#LR__4602
2dd3c     3B 4E 05 F1 | 	add	fp, #59
2dd40     A7 FA C1 FA | 	rdbyte	result1, fp
2dd44     3B 4E 85 F1 | 	sub	fp, #59
2dd48     80 FA CD F7 | 	test	result1, #128 wz
2dd4c     0C 4E 05 51 |  if_ne	add	fp, #12
2dd50     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2dd54     0C 4E 85 51 |  if_ne	sub	fp, #12
2dd58     28 00 90 5D |  if_ne	jmp	#LR__4601
2dd5c     08 4E 05 F1 | 	add	fp, #8
2dd60     A7 FA 09 FB | 	rdlong	result1, fp wz
2dd64     08 4E 85 F1 | 	sub	fp, #8
2dd68     18 00 90 AD |  if_e	jmp	#LR__4600
2dd6c     10 4E 05 F1 | 	add	fp, #16
2dd70     A7 12 02 F6 | 	mov	arg01, fp
2dd74     08 4E 85 F1 | 	sub	fp, #8
2dd78     A7 14 02 FB | 	rdlong	arg02, fp
2dd7c     08 4E 85 F1 | 	sub	fp, #8
2dd80     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
2dd84                 | LR__4600
2dd84                 | LR__4601
2dd84                 | LR__4602
2dd84                 | LR__4603
2dd84                 | ' 			}
2dd84                 | ' 		}
2dd84                 | ' 		;
2dd84                 | ' 	}
2dd84                 | ' 
2dd84                 | ' 	return res ;
2dd84     0C 4E 05 F1 | 	add	fp, #12
2dd88     A7 FA 01 FB | 	rdlong	result1, fp
2dd8c     0C 4E 85 F1 | 	sub	fp, #12
2dd90     A7 F0 03 F6 | 	mov	ptra, fp
2dd94     B2 00 A0 FD | 	call	#popregs_
2dd98                 | _fatfs_cc_f_stat_ret
2dd98     2D 00 64 FD | 	ret
2dd9c                 | 
2dd9c                 | _fatfs_cc_f_unlink
2dd9c     00 4A 05 F6 | 	mov	COUNT_, #0
2dda0     A8 00 A0 FD | 	call	#pushregs_
2dda4     74 F0 07 F1 | 	add	ptra, #116
2dda8     04 4E 05 F1 | 	add	fp, #4
2ddac     A7 12 62 FC | 	wrlong	arg01, fp
2ddb0     68 4E 05 F1 | 	add	fp, #104
2ddb4     A7 00 68 FC | 	wrlong	#0, fp
2ddb8     68 4E 85 F1 | 	sub	fp, #104
2ddbc     A7 12 02 F6 | 	mov	arg01, fp
2ddc0     6C 4E 05 F1 | 	add	fp, #108
2ddc4     A7 14 02 F6 | 	mov	arg02, fp
2ddc8     70 4E 85 F1 | 	sub	fp, #112
2ddcc     02 16 06 F6 | 	mov	arg03, #2
2ddd0     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2ddd4     08 4E 05 F1 | 	add	fp, #8
2ddd8     A7 FA 61 FC | 	wrlong	result1, fp
2dddc     08 4E 85 F1 | 	sub	fp, #8
2dde0     00 FA 0D F2 | 	cmp	result1, #0 wz
2dde4     E4 01 90 5D |  if_ne	jmp	#LR__4618
2dde8     70 4E 05 F1 | 	add	fp, #112
2ddec     A7 16 02 FB | 	rdlong	arg03, fp
2ddf0     64 4E 85 F1 | 	sub	fp, #100
2ddf4     A7 16 62 FC | 	wrlong	arg03, fp
2ddf8     A7 12 02 F6 | 	mov	arg01, fp
2ddfc     08 4E 85 F1 | 	sub	fp, #8
2de00     A7 14 02 FB | 	rdlong	arg02, fp
2de04     04 4E 85 F1 | 	sub	fp, #4
2de08     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2de0c     08 4E 05 F1 | 	add	fp, #8
2de10     A7 FA 61 FC | 	wrlong	result1, fp
2de14     00 FA 4D F2 | 	cmps	result1, #0 wz
2de18     08 4E 85 F1 | 	sub	fp, #8
2de1c     AC 01 90 5D |  if_ne	jmp	#LR__4617
2de20     37 4E 05 F1 | 	add	fp, #55
2de24     A7 FA C1 FA | 	rdbyte	result1, fp
2de28     37 4E 85 F1 | 	sub	fp, #55
2de2c     80 FA CD F7 | 	test	result1, #128 wz
2de30     08 4E 05 51 |  if_ne	add	fp, #8
2de34     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2de38     08 4E 85 51 |  if_ne	sub	fp, #8
2de3c     1C 00 90 5D |  if_ne	jmp	#LR__4610
2de40     12 4E 05 F1 | 	add	fp, #18
2de44     A7 FA C1 FA | 	rdbyte	result1, fp
2de48     12 4E 85 F1 | 	sub	fp, #18
2de4c     01 FA CD F7 | 	test	result1, #1 wz
2de50     08 4E 05 51 |  if_ne	add	fp, #8
2de54     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2de58     08 4E 85 51 |  if_ne	sub	fp, #8
2de5c                 | LR__4610
2de5c     08 4E 05 F1 | 	add	fp, #8
2de60     A7 FA 09 FB | 	rdlong	result1, fp wz
2de64     08 4E 85 F1 | 	sub	fp, #8
2de68     C8 00 90 5D |  if_ne	jmp	#LR__4613
2de6c     70 4E 05 F1 | 	add	fp, #112
2de70     A7 12 02 FB | 	rdlong	arg01, fp
2de74     48 4E 85 F1 | 	sub	fp, #72
2de78     A7 14 02 FB | 	rdlong	arg02, fp
2de7c     28 4E 85 F1 | 	sub	fp, #40
2de80     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2de84     6C 4E 05 F1 | 	add	fp, #108
2de88     A7 FA 61 FC | 	wrlong	result1, fp
2de8c     5A 4E 85 F1 | 	sub	fp, #90
2de90     A7 FA C1 FA | 	rdbyte	result1, fp
2de94     12 4E 85 F1 | 	sub	fp, #18
2de98     10 FA CD F7 | 	test	result1, #16 wz
2de9c     94 00 90 AD |  if_e	jmp	#LR__4612
2dea0     70 4E 05 F1 | 	add	fp, #112
2dea4     A7 FA 01 FB | 	rdlong	result1, fp
2dea8     34 4E 85 F1 | 	sub	fp, #52
2deac     A7 FA 61 FC | 	wrlong	result1, fp
2deb0     30 4E 05 F1 | 	add	fp, #48
2deb4     A7 16 02 FB | 	rdlong	arg03, fp
2deb8     28 4E 85 F1 | 	sub	fp, #40
2debc     A7 16 62 FC | 	wrlong	arg03, fp
2dec0     08 4E 85 F1 | 	sub	fp, #8
2dec4     A7 12 02 F6 | 	mov	arg01, fp
2dec8     3C 4E 85 F1 | 	sub	fp, #60
2decc     00 14 06 F6 | 	mov	arg02, #0
2ded0     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2ded4     08 4E 05 F1 | 	add	fp, #8
2ded8     A7 FA 61 FC | 	wrlong	result1, fp
2dedc     08 4E 85 F1 | 	sub	fp, #8
2dee0     00 FA 0D F2 | 	cmp	result1, #0 wz
2dee4     4C 00 90 5D |  if_ne	jmp	#LR__4611
2dee8     3C 4E 05 F1 | 	add	fp, #60
2deec     A7 12 02 F6 | 	mov	arg01, fp
2def0     3C 4E 85 F1 | 	sub	fp, #60
2def4     00 14 06 F6 | 	mov	arg02, #0
2def8     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
2defc     08 4E 05 F1 | 	add	fp, #8
2df00     A7 FA 61 FC | 	wrlong	result1, fp
2df04     00 FA 4D F2 | 	cmps	result1, #0 wz
2df08     08 4E 85 F1 | 	sub	fp, #8
2df0c     08 4E 05 A1 |  if_e	add	fp, #8
2df10     A7 0E 68 AC |  if_e	wrlong	#7, fp
2df14     08 4E 85 A1 |  if_e	sub	fp, #8
2df18     08 4E 05 F1 | 	add	fp, #8
2df1c     A7 FA 01 FB | 	rdlong	result1, fp
2df20     08 4E 85 F1 | 	sub	fp, #8
2df24     04 FA 0D F2 | 	cmp	result1, #4 wz
2df28     08 4E 05 A1 |  if_e	add	fp, #8
2df2c     A7 00 68 AC |  if_e	wrlong	#0, fp
2df30     08 4E 85 A1 |  if_e	sub	fp, #8
2df34                 | LR__4611
2df34                 | LR__4612
2df34                 | LR__4613
2df34     08 4E 05 F1 | 	add	fp, #8
2df38     A7 FA 09 FB | 	rdlong	result1, fp wz
2df3c     08 4E 85 F1 | 	sub	fp, #8
2df40     88 00 90 5D |  if_ne	jmp	#LR__4616
2df44     0C 4E 05 F1 | 	add	fp, #12
2df48     A7 12 02 F6 | 	mov	arg01, fp
2df4c     0C 4E 85 F1 | 	sub	fp, #12
2df50     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2df54     08 4E 05 F1 | 	add	fp, #8
2df58     A7 FA 61 FC | 	wrlong	result1, fp
2df5c     08 4E 85 F1 | 	sub	fp, #8
2df60     00 FA 0D F2 | 	cmp	result1, #0 wz
2df64     38 00 90 5D |  if_ne	jmp	#LR__4614
2df68     6C 4E 05 F1 | 	add	fp, #108
2df6c     A7 FA 09 FB | 	rdlong	result1, fp wz
2df70     6C 4E 85 F1 | 	sub	fp, #108
2df74     28 00 90 AD |  if_e	jmp	#LR__4614
2df78     0C 4E 05 F1 | 	add	fp, #12
2df7c     A7 12 02 F6 | 	mov	arg01, fp
2df80     60 4E 05 F1 | 	add	fp, #96
2df84     A7 14 02 FB | 	rdlong	arg02, fp
2df88     6C 4E 85 F1 | 	sub	fp, #108
2df8c     00 16 06 F6 | 	mov	arg03, #0
2df90     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2df94     08 4E 05 F1 | 	add	fp, #8
2df98     A7 FA 61 FC | 	wrlong	result1, fp
2df9c     08 4E 85 F1 | 	sub	fp, #8
2dfa0                 | LR__4614
2dfa0     08 4E 05 F1 | 	add	fp, #8
2dfa4     A7 FA 09 FB | 	rdlong	result1, fp wz
2dfa8     08 4E 85 F1 | 	sub	fp, #8
2dfac     1C 00 90 5D |  if_ne	jmp	#LR__4615
2dfb0     70 4E 05 F1 | 	add	fp, #112
2dfb4     A7 12 02 FB | 	rdlong	arg01, fp
2dfb8     70 4E 85 F1 | 	sub	fp, #112
2dfbc     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2dfc0     08 4E 05 F1 | 	add	fp, #8
2dfc4     A7 FA 61 FC | 	wrlong	result1, fp
2dfc8     08 4E 85 F1 | 	sub	fp, #8
2dfcc                 | LR__4615
2dfcc                 | LR__4616
2dfcc                 | LR__4617
2dfcc                 | LR__4618
2dfcc                 | ' 			}
2dfcc                 | ' 		}
2dfcc                 | ' 		;
2dfcc                 | ' 	}
2dfcc                 | ' 
2dfcc                 | ' 	return res ;
2dfcc     08 4E 05 F1 | 	add	fp, #8
2dfd0     A7 FA 01 FB | 	rdlong	result1, fp
2dfd4     08 4E 85 F1 | 	sub	fp, #8
2dfd8     A7 F0 03 F6 | 	mov	ptra, fp
2dfdc     B2 00 A0 FD | 	call	#popregs_
2dfe0                 | _fatfs_cc_f_unlink_ret
2dfe0     2D 00 64 FD | 	ret
2dfe4                 | 
2dfe4                 | _fatfs_cc_f_mkdir
2dfe4     00 4A 05 F6 | 	mov	COUNT_, #0
2dfe8     A8 00 A0 FD | 	call	#pushregs_
2dfec     5C F0 07 F1 | 	add	ptra, #92
2dff0     04 4E 05 F1 | 	add	fp, #4
2dff4     A7 12 62 FC | 	wrlong	arg01, fp
2dff8     A7 12 02 F6 | 	mov	arg01, fp
2dffc     48 4E 05 F1 | 	add	fp, #72
2e000     A7 14 02 F6 | 	mov	arg02, fp
2e004     4C 4E 85 F1 | 	sub	fp, #76
2e008     02 16 06 F6 | 	mov	arg03, #2
2e00c     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2e010     08 4E 05 F1 | 	add	fp, #8
2e014     A7 FA 61 FC | 	wrlong	result1, fp
2e018     08 4E 85 F1 | 	sub	fp, #8
2e01c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e020     C4 02 90 5D |  if_ne	jmp	#LR__4625
2e024     4C 4E 05 F1 | 	add	fp, #76
2e028     A7 16 02 FB | 	rdlong	arg03, fp
2e02c     40 4E 85 F1 | 	sub	fp, #64
2e030     A7 16 62 FC | 	wrlong	arg03, fp
2e034     A7 12 02 F6 | 	mov	arg01, fp
2e038     08 4E 85 F1 | 	sub	fp, #8
2e03c     A7 14 02 FB | 	rdlong	arg02, fp
2e040     04 4E 85 F1 | 	sub	fp, #4
2e044     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2e048     08 4E 05 F1 | 	add	fp, #8
2e04c     A7 FA 61 FC | 	wrlong	result1, fp
2e050     00 FA 4D F2 | 	cmps	result1, #0 wz
2e054     08 4E 85 F1 | 	sub	fp, #8
2e058     08 4E 05 A1 |  if_e	add	fp, #8
2e05c     A7 10 68 AC |  if_e	wrlong	#8, fp
2e060     08 4E 85 A1 |  if_e	sub	fp, #8
2e064     08 4E 05 F1 | 	add	fp, #8
2e068     A7 FA 01 FB | 	rdlong	result1, fp
2e06c     08 4E 85 F1 | 	sub	fp, #8
2e070     04 FA 0D F2 | 	cmp	result1, #4 wz
2e074     70 02 90 5D |  if_ne	jmp	#LR__4624
2e078     4C 4E 05 F1 | 	add	fp, #76
2e07c     A7 16 02 FB | 	rdlong	arg03, fp
2e080     10 4E 85 F1 | 	sub	fp, #16
2e084     A7 16 62 FC | 	wrlong	arg03, fp
2e088     A7 12 02 F6 | 	mov	arg01, fp
2e08c     3C 4E 85 F1 | 	sub	fp, #60
2e090     00 14 06 F6 | 	mov	arg02, #0
2e094     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2e098     50 4E 05 F1 | 	add	fp, #80
2e09c     A7 FA 61 FC | 	wrlong	result1, fp
2e0a0     48 4E 85 F1 | 	sub	fp, #72
2e0a4     A7 00 68 FC | 	wrlong	#0, fp
2e0a8     48 4E 05 F1 | 	add	fp, #72
2e0ac     A7 FA 09 FB | 	rdlong	result1, fp wz
2e0b0     50 4E 85 F1 | 	sub	fp, #80
2e0b4     08 4E 05 A1 |  if_e	add	fp, #8
2e0b8     A7 0E 68 AC |  if_e	wrlong	#7, fp
2e0bc     08 4E 85 A1 |  if_e	sub	fp, #8
2e0c0     50 4E 05 F1 | 	add	fp, #80
2e0c4     A7 FA 01 FB | 	rdlong	result1, fp
2e0c8     50 4E 85 F1 | 	sub	fp, #80
2e0cc     01 FA 0D F2 | 	cmp	result1, #1 wz
2e0d0     08 4E 05 A1 |  if_e	add	fp, #8
2e0d4     A7 04 68 AC |  if_e	wrlong	#2, fp
2e0d8     08 4E 85 A1 |  if_e	sub	fp, #8
2e0dc     50 4E 05 F1 | 	add	fp, #80
2e0e0     A7 16 02 FB | 	rdlong	arg03, fp
2e0e4     50 4E 85 F1 | 	sub	fp, #80
2e0e8     FF FF 7F FF 
2e0ec     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2e0f0     08 4E 05 A1 |  if_e	add	fp, #8
2e0f4     A7 02 68 AC |  if_e	wrlong	#1, fp
2e0f8     08 4E 85 A1 |  if_e	sub	fp, #8
2e0fc     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2e100     58 4E 05 F1 | 	add	fp, #88
2e104     A7 FA 61 FC | 	wrlong	result1, fp
2e108     50 4E 85 F1 | 	sub	fp, #80
2e10c     A7 FA 09 FB | 	rdlong	result1, fp wz
2e110     08 4E 85 F1 | 	sub	fp, #8
2e114     1C 01 90 5D |  if_ne	jmp	#LR__4621
2e118     4C 4E 05 F1 | 	add	fp, #76
2e11c     A7 12 02 FB | 	rdlong	arg01, fp
2e120     04 4E 05 F1 | 	add	fp, #4
2e124     A7 14 02 FB | 	rdlong	arg02, fp
2e128     50 4E 85 F1 | 	sub	fp, #80
2e12c     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
2e130     08 4E 05 F1 | 	add	fp, #8
2e134     A7 FA 61 FC | 	wrlong	result1, fp
2e138     00 FA 4D F2 | 	cmps	result1, #0 wz
2e13c     08 4E 85 F1 | 	sub	fp, #8
2e140     F0 00 90 5D |  if_ne	jmp	#LR__4620
2e144     4C 4E 05 F1 | 	add	fp, #76
2e148     A7 12 02 FB | 	rdlong	arg01, fp
2e14c     4C 4E 85 F1 | 	sub	fp, #76
2e150     34 12 06 F1 | 	add	arg01, #52
2e154     20 14 06 F6 | 	mov	arg02, #32
2e158     0B 16 06 F6 | 	mov	arg03, #11
2e15c     98 00 A0 FD | 	call	#\builtin_bytefill_
2e160     4C 4E 05 F1 | 	add	fp, #76
2e164     A7 FA 01 FB | 	rdlong	result1, fp
2e168     34 FA 05 F1 | 	add	result1, #52
2e16c     FD 5C 48 FC | 	wrbyte	#46, result1
2e170     A7 16 02 FB | 	rdlong	arg03, fp
2e174     3F 16 06 F1 | 	add	arg03, #63
2e178     0B 21 48 FC | 	wrbyte	#16, arg03
2e17c     A7 12 02 FB | 	rdlong	arg01, fp
2e180     4A 12 06 F1 | 	add	arg01, #74
2e184     0C 4E 05 F1 | 	add	fp, #12
2e188     A7 14 02 FB | 	rdlong	arg02, fp
2e18c     09 15 62 FC | 	wrlong	arg02, arg01
2e190     0C 4E 85 F1 | 	sub	fp, #12
2e194     A7 14 02 FB | 	rdlong	arg02, fp
2e198     0A 13 02 F6 | 	mov	arg01, arg02
2e19c     34 14 06 F1 | 	add	arg02, #52
2e1a0     04 4E 05 F1 | 	add	fp, #4
2e1a4     A7 16 02 FB | 	rdlong	arg03, fp
2e1a8     50 4E 85 F1 | 	sub	fp, #80
2e1ac     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
2e1b0     4C 4E 05 F1 | 	add	fp, #76
2e1b4     A7 14 02 FB | 	rdlong	arg02, fp
2e1b8     0A 13 02 F6 | 	mov	arg01, arg02
2e1bc     54 12 06 F1 | 	add	arg01, #84
2e1c0     4C 4E 85 F1 | 	sub	fp, #76
2e1c4     34 14 06 F1 | 	add	arg02, #52
2e1c8     20 16 06 F6 | 	mov	arg03, #32
2e1cc     60 2A BF FD | 	call	#__system____builtin_memmove
2e1d0     4C 4E 05 F1 | 	add	fp, #76
2e1d4     A7 16 02 FB | 	rdlong	arg03, fp
2e1d8     55 16 06 F1 | 	add	arg03, #85
2e1dc     0B 5D 48 FC | 	wrbyte	#46, arg03
2e1e0     38 4E 85 F1 | 	sub	fp, #56
2e1e4     A7 16 02 FB | 	rdlong	arg03, fp
2e1e8     40 4E 05 F1 | 	add	fp, #64
2e1ec     A7 16 62 FC | 	wrlong	arg03, fp
2e1f0     08 4E 85 F1 | 	sub	fp, #8
2e1f4     A7 14 02 FB | 	rdlong	arg02, fp
2e1f8     0A 13 02 F6 | 	mov	arg01, arg02
2e1fc     54 14 06 F1 | 	add	arg02, #84
2e200     4C 4E 85 F1 | 	sub	fp, #76
2e204     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2e208     4C 4E 05 F1 | 	add	fp, #76
2e20c     A7 16 02 FB | 	rdlong	arg03, fp
2e210     03 16 06 F1 | 	add	arg03, #3
2e214     0B 03 48 FC | 	wrbyte	#1, arg03
2e218     40 4E 85 F1 | 	sub	fp, #64
2e21c     A7 12 02 F6 | 	mov	arg01, fp
2e220     0C 4E 85 F1 | 	sub	fp, #12
2e224     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2e228     08 4E 05 F1 | 	add	fp, #8
2e22c     A7 FA 61 FC | 	wrlong	result1, fp
2e230     08 4E 85 F1 | 	sub	fp, #8
2e234                 | LR__4620
2e234                 | LR__4621
2e234     08 4E 05 F1 | 	add	fp, #8
2e238     A7 FA 09 FB | 	rdlong	result1, fp wz
2e23c     08 4E 85 F1 | 	sub	fp, #8
2e240     88 00 90 5D |  if_ne	jmp	#LR__4622
2e244     28 4E 05 F1 | 	add	fp, #40
2e248     A7 12 02 FB | 	rdlong	arg01, fp
2e24c     16 12 06 F1 | 	add	arg01, #22
2e250     30 4E 05 F1 | 	add	fp, #48
2e254     A7 14 02 FB | 	rdlong	arg02, fp
2e258     09 15 62 FC | 	wrlong	arg02, arg01
2e25c     0C 4E 85 F1 | 	sub	fp, #12
2e260     A7 12 02 FB | 	rdlong	arg01, fp
2e264     24 4E 85 F1 | 	sub	fp, #36
2e268     A7 14 02 FB | 	rdlong	arg02, fp
2e26c     28 4E 05 F1 | 	add	fp, #40
2e270     A7 16 02 FB | 	rdlong	arg03, fp
2e274     50 4E 85 F1 | 	sub	fp, #80
2e278     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2e27c     28 4E 05 F1 | 	add	fp, #40
2e280     A7 FA 01 FB | 	rdlong	result1, fp
2e284     0B FA 05 F1 | 	add	result1, #11
2e288     FD 20 48 FC | 	wrbyte	#16, result1
2e28c     24 4E 05 F1 | 	add	fp, #36
2e290     A7 FA 01 FB | 	rdlong	result1, fp
2e294     03 FA 05 F1 | 	add	result1, #3
2e298     FD 02 48 FC | 	wrbyte	#1, result1
2e29c     44 4E 85 F1 | 	sub	fp, #68
2e2a0     A7 FA 09 FB | 	rdlong	result1, fp wz
2e2a4     08 4E 85 F1 | 	sub	fp, #8
2e2a8     3C 00 90 5D |  if_ne	jmp	#LR__4623
2e2ac     4C 4E 05 F1 | 	add	fp, #76
2e2b0     A7 12 02 FB | 	rdlong	arg01, fp
2e2b4     4C 4E 85 F1 | 	sub	fp, #76
2e2b8     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2e2bc     08 4E 05 F1 | 	add	fp, #8
2e2c0     A7 FA 61 FC | 	wrlong	result1, fp
2e2c4     08 4E 85 F1 | 	sub	fp, #8
2e2c8     1C 00 90 FD | 	jmp	#LR__4623
2e2cc                 | LR__4622
2e2cc     3C 4E 05 F1 | 	add	fp, #60
2e2d0     A7 12 02 F6 | 	mov	arg01, fp
2e2d4     14 4E 05 F1 | 	add	fp, #20
2e2d8     A7 14 02 FB | 	rdlong	arg02, fp
2e2dc     50 4E 85 F1 | 	sub	fp, #80
2e2e0     00 16 06 F6 | 	mov	arg03, #0
2e2e4     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2e2e8                 | LR__4623
2e2e8                 | LR__4624
2e2e8                 | LR__4625
2e2e8                 | ' 				remove_chain(&sobj, dcl, 0);
2e2e8                 | ' 			}
2e2e8                 | ' 		}
2e2e8                 | ' 		;
2e2e8                 | ' 	}
2e2e8                 | ' 
2e2e8                 | ' 	return res ;
2e2e8     08 4E 05 F1 | 	add	fp, #8
2e2ec     A7 FA 01 FB | 	rdlong	result1, fp
2e2f0     08 4E 85 F1 | 	sub	fp, #8
2e2f4     A7 F0 03 F6 | 	mov	ptra, fp
2e2f8     B2 00 A0 FD | 	call	#popregs_
2e2fc                 | _fatfs_cc_f_mkdir_ret
2e2fc     2D 00 64 FD | 	ret
2e300                 | 
2e300                 | _fatfs_cc_f_rename
2e300     01 4A 05 F6 | 	mov	COUNT_, #1
2e304     A8 00 A0 FD | 	call	#pushregs_
2e308     9C F0 07 F1 | 	add	ptra, #156
2e30c     04 4E 05 F1 | 	add	fp, #4
2e310     A7 12 62 FC | 	wrlong	arg01, fp
2e314     04 4E 05 F1 | 	add	fp, #4
2e318     A7 14 62 FC | 	wrlong	arg02, fp
2e31c     A7 12 02 F6 | 	mov	arg01, fp
2e320     08 4E 85 F1 | 	sub	fp, #8
2e324     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2e328     04 4E 05 F1 | 	add	fp, #4
2e32c     A7 12 02 F6 | 	mov	arg01, fp
2e330     6C 4E 05 F1 | 	add	fp, #108
2e334     A7 14 02 F6 | 	mov	arg02, fp
2e338     70 4E 85 F1 | 	sub	fp, #112
2e33c     02 16 06 F6 | 	mov	arg03, #2
2e340     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2e344     0C 4E 05 F1 | 	add	fp, #12
2e348     A7 FA 61 FC | 	wrlong	result1, fp
2e34c     0C 4E 85 F1 | 	sub	fp, #12
2e350     00 FA 0D F2 | 	cmp	result1, #0 wz
2e354     44 03 90 5D |  if_ne	jmp	#LR__4643
2e358     70 4E 05 F1 | 	add	fp, #112
2e35c     A7 16 02 FB | 	rdlong	arg03, fp
2e360     60 4E 85 F1 | 	sub	fp, #96
2e364     A7 16 62 FC | 	wrlong	arg03, fp
2e368     A7 12 02 F6 | 	mov	arg01, fp
2e36c     0C 4E 85 F1 | 	sub	fp, #12
2e370     A7 14 02 FB | 	rdlong	arg02, fp
2e374     04 4E 85 F1 | 	sub	fp, #4
2e378     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2e37c     0C 4E 05 F1 | 	add	fp, #12
2e380     A7 FA 61 FC | 	wrlong	result1, fp
2e384     00 FA 4D F2 | 	cmps	result1, #0 wz
2e388     0C 4E 85 F1 | 	sub	fp, #12
2e38c     1C 00 90 5D |  if_ne	jmp	#LR__4630
2e390     3B 4E 05 F1 | 	add	fp, #59
2e394     A7 FA C1 FA | 	rdbyte	result1, fp
2e398     3B 4E 85 F1 | 	sub	fp, #59
2e39c     A0 FA CD F7 | 	test	result1, #160 wz
2e3a0     0C 4E 05 51 |  if_ne	add	fp, #12
2e3a4     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2e3a8     0C 4E 85 51 |  if_ne	sub	fp, #12
2e3ac                 | LR__4630
2e3ac     0C 4E 05 F1 | 	add	fp, #12
2e3b0     A7 1E 0A FB | 	rdlong	local01, fp wz
2e3b4     0C 4E 85 F1 | 	sub	fp, #12
2e3b8     E0 02 90 5D |  if_ne	jmp	#LR__4642
2e3bc     74 4E 05 F1 | 	add	fp, #116
2e3c0     A7 12 02 F6 | 	mov	arg01, fp
2e3c4     48 4E 85 F1 | 	sub	fp, #72
2e3c8     A7 14 02 FB | 	rdlong	arg02, fp
2e3cc     2C 4E 85 F1 | 	sub	fp, #44
2e3d0     20 16 06 F6 | 	mov	arg03, #32
2e3d4     58 28 BF FD | 	call	#__system____builtin_memmove
2e3d8     40 4E 05 F1 | 	add	fp, #64
2e3dc     A7 12 02 F6 | 	mov	arg01, fp
2e3e0     30 4E 85 F1 | 	sub	fp, #48
2e3e4     A7 14 02 F6 | 	mov	arg02, fp
2e3e8     10 4E 85 F1 | 	sub	fp, #16
2e3ec     30 16 06 F6 | 	mov	arg03, #48
2e3f0     3C 28 BF FD | 	call	#__system____builtin_memmove
2e3f4     40 4E 05 F1 | 	add	fp, #64
2e3f8     A7 12 02 F6 | 	mov	arg01, fp
2e3fc     38 4E 85 F1 | 	sub	fp, #56
2e400     A7 14 02 FB | 	rdlong	arg02, fp
2e404     08 4E 85 F1 | 	sub	fp, #8
2e408     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2e40c     0C 4E 05 F1 | 	add	fp, #12
2e410     A7 FA 61 FC | 	wrlong	result1, fp
2e414     0C 4E 85 F1 | 	sub	fp, #12
2e418     00 FA 0D F2 | 	cmp	result1, #0 wz
2e41c     4C 00 90 5D |  if_ne	jmp	#LR__4633
2e420     48 4E 05 F1 | 	add	fp, #72
2e424     A7 FA 01 FB | 	rdlong	result1, fp
2e428     30 4E 85 F1 | 	sub	fp, #48
2e42c     A7 16 02 FB | 	rdlong	arg03, fp
2e430     18 4E 85 F1 | 	sub	fp, #24
2e434     0B FB 09 F2 | 	cmp	result1, arg03 wz
2e438     20 00 90 5D |  if_ne	jmp	#LR__4631
2e43c     50 4E 05 F1 | 	add	fp, #80
2e440     A7 FA 01 FB | 	rdlong	result1, fp
2e444     30 4E 85 F1 | 	sub	fp, #48
2e448     A7 16 02 FB | 	rdlong	arg03, fp
2e44c     20 4E 85 F1 | 	sub	fp, #32
2e450     0B FB 09 F2 | 	cmp	result1, arg03 wz
2e454     04 1E 06 A6 |  if_e	mov	local01, #4
2e458     04 00 90 AD |  if_e	jmp	#LR__4632
2e45c                 | LR__4631
2e45c     08 1E 06 F6 | 	mov	local01, #8
2e460                 | LR__4632
2e460     0C 4E 05 F1 | 	add	fp, #12
2e464     A7 1E 62 FC | 	wrlong	local01, fp
2e468     0C 4E 85 F1 | 	sub	fp, #12
2e46c                 | LR__4633
2e46c     0C 4E 05 F1 | 	add	fp, #12
2e470     A7 1E 02 FB | 	rdlong	local01, fp
2e474     0C 4E 85 F1 | 	sub	fp, #12
2e478     04 1E 0E F2 | 	cmp	local01, #4 wz
2e47c     CC 01 90 5D |  if_ne	jmp	#LR__4639
2e480     40 4E 05 F1 | 	add	fp, #64
2e484     A7 12 02 F6 | 	mov	arg01, fp
2e488     40 4E 85 F1 | 	sub	fp, #64
2e48c     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2e490     0C 4E 05 F1 | 	add	fp, #12
2e494     A7 FA 61 FC | 	wrlong	result1, fp
2e498     0C 4E 85 F1 | 	sub	fp, #12
2e49c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e4a0     A8 01 90 5D |  if_ne	jmp	#LR__4638
2e4a4     5C 4E 05 F1 | 	add	fp, #92
2e4a8     A7 12 02 FB | 	rdlong	arg01, fp
2e4ac     38 4E 05 F1 | 	add	fp, #56
2e4b0     A7 12 62 FC | 	wrlong	arg01, fp
2e4b4     0D 12 06 F1 | 	add	arg01, #13
2e4b8     20 4E 85 F1 | 	sub	fp, #32
2e4bc     A7 14 02 F6 | 	mov	arg02, fp
2e4c0     74 4E 85 F1 | 	sub	fp, #116
2e4c4     0D 14 06 F1 | 	add	arg02, #13
2e4c8     13 16 06 F6 | 	mov	arg03, #19
2e4cc     60 27 BF FD | 	call	#__system____builtin_memmove
2e4d0     94 4E 05 F1 | 	add	fp, #148
2e4d4     A7 1E 02 FB | 	rdlong	local01, fp
2e4d8     15 4E 85 F1 | 	sub	fp, #21
2e4dc     A7 FA C1 FA | 	rdbyte	result1, fp
2e4e0     0B 1E 06 F1 | 	add	local01, #11
2e4e4     0F FB 41 FC | 	wrbyte	result1, local01
2e4e8     15 4E 05 F1 | 	add	fp, #21
2e4ec     A7 1E 02 FB | 	rdlong	local01, fp
2e4f0     94 4E 85 F1 | 	sub	fp, #148
2e4f4     0B 1E 06 F1 | 	add	local01, #11
2e4f8     0F 1F C2 FA | 	rdbyte	local01, local01
2e4fc     10 1E CE F7 | 	test	local01, #16 wz
2e500     24 00 90 5D |  if_ne	jmp	#LR__4634
2e504     94 4E 05 F1 | 	add	fp, #148
2e508     A7 FA 01 FB | 	rdlong	result1, fp
2e50c     FD 1E 02 F6 | 	mov	local01, result1
2e510     94 4E 85 F1 | 	sub	fp, #148
2e514     0B FA 05 F1 | 	add	result1, #11
2e518     FD FA C1 FA | 	rdbyte	result1, result1
2e51c     20 FA 45 F5 | 	or	result1, #32
2e520     0B 1E 06 F1 | 	add	local01, #11
2e524     0F FB 41 FC | 	wrbyte	result1, local01
2e528                 | LR__4634
2e528     70 4E 05 F1 | 	add	fp, #112
2e52c     A7 1E 02 FB | 	rdlong	local01, fp
2e530     03 1E 06 F1 | 	add	local01, #3
2e534     0F 03 48 FC | 	wrbyte	#1, local01
2e538     24 4E 05 F1 | 	add	fp, #36
2e53c     A7 1E 02 FB | 	rdlong	local01, fp
2e540     94 4E 85 F1 | 	sub	fp, #148
2e544     0B 1E 06 F1 | 	add	local01, #11
2e548     0F 1F C2 FA | 	rdbyte	local01, local01
2e54c     10 1E CE F7 | 	test	local01, #16 wz
2e550     F8 00 90 AD |  if_e	jmp	#LR__4637
2e554     18 4E 05 F1 | 	add	fp, #24
2e558     A7 16 02 FB | 	rdlong	arg03, fp
2e55c     30 4E 05 F1 | 	add	fp, #48
2e560     A7 1E 02 FB | 	rdlong	local01, fp
2e564     48 4E 85 F1 | 	sub	fp, #72
2e568     0F 17 0A F2 | 	cmp	arg03, local01 wz
2e56c     DC 00 90 AD |  if_e	jmp	#LR__4637
2e570     70 4E 05 F1 | 	add	fp, #112
2e574     A7 12 02 FB | 	rdlong	arg01, fp
2e578     09 1F 02 F6 | 	mov	local01, arg01
2e57c     24 4E 05 F1 | 	add	fp, #36
2e580     A7 14 02 FB | 	rdlong	arg02, fp
2e584     94 4E 85 F1 | 	sub	fp, #148
2e588     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2e58c     FD 14 02 F6 | 	mov	arg02, result1
2e590     0F 13 02 F6 | 	mov	arg01, local01
2e594     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
2e598     98 4E 05 F1 | 	add	fp, #152
2e59c     A7 FA 61 FC | 	wrlong	result1, fp
2e5a0     00 FA 4D F2 | 	cmps	result1, #0 wz
2e5a4     98 4E 85 F1 | 	sub	fp, #152
2e5a8     0C 4E 05 A1 |  if_e	add	fp, #12
2e5ac     A7 04 68 AC |  if_e	wrlong	#2, fp
2e5b0     0C 4E 85 A1 |  if_e	sub	fp, #12
2e5b4     94 00 90 AD |  if_e	jmp	#LR__4636
2e5b8     70 4E 05 F1 | 	add	fp, #112
2e5bc     A7 12 02 FB | 	rdlong	arg01, fp
2e5c0     28 4E 05 F1 | 	add	fp, #40
2e5c4     A7 14 02 FB | 	rdlong	arg02, fp
2e5c8     98 4E 85 F1 | 	sub	fp, #152
2e5cc     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2e5d0     0C 4E 05 F1 | 	add	fp, #12
2e5d4     A7 FA 61 FC | 	wrlong	result1, fp
2e5d8     64 4E 05 F1 | 	add	fp, #100
2e5dc     A7 1E 02 FB | 	rdlong	local01, fp
2e5e0     54 1E 06 F1 | 	add	local01, #84
2e5e4     24 4E 05 F1 | 	add	fp, #36
2e5e8     A7 1E 62 FC | 	wrlong	local01, fp
2e5ec     88 4E 85 F1 | 	sub	fp, #136
2e5f0     A7 1E 0A FB | 	rdlong	local01, fp wz
2e5f4     0C 4E 85 F1 | 	sub	fp, #12
2e5f8     50 00 90 5D |  if_ne	jmp	#LR__4635
2e5fc     94 4E 05 F1 | 	add	fp, #148
2e600     A7 1E 02 FB | 	rdlong	local01, fp
2e604     94 4E 85 F1 | 	sub	fp, #148
2e608     01 1E 06 F1 | 	add	local01, #1
2e60c     0F 1F C2 FA | 	rdbyte	local01, local01
2e610     2E 1E 0E F2 | 	cmp	local01, #46 wz
2e614     34 00 90 5D |  if_ne	jmp	#LR__4635
2e618     70 4E 05 F1 | 	add	fp, #112
2e61c     A7 12 02 FB | 	rdlong	arg01, fp
2e620     24 4E 05 F1 | 	add	fp, #36
2e624     A7 14 02 FB | 	rdlong	arg02, fp
2e628     4C 4E 85 F1 | 	sub	fp, #76
2e62c     A7 16 02 FB | 	rdlong	arg03, fp
2e630     48 4E 85 F1 | 	sub	fp, #72
2e634     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2e638     70 4E 05 F1 | 	add	fp, #112
2e63c     A7 1E 02 FB | 	rdlong	local01, fp
2e640     70 4E 85 F1 | 	sub	fp, #112
2e644     03 1E 06 F1 | 	add	local01, #3
2e648     0F 03 48 FC | 	wrbyte	#1, local01
2e64c                 | LR__4635
2e64c                 | LR__4636
2e64c                 | LR__4637
2e64c                 | LR__4638
2e64c                 | LR__4639
2e64c     0C 4E 05 F1 | 	add	fp, #12
2e650     A7 1E 0A FB | 	rdlong	local01, fp wz
2e654     0C 4E 85 F1 | 	sub	fp, #12
2e658     40 00 90 5D |  if_ne	jmp	#LR__4641
2e65c     10 4E 05 F1 | 	add	fp, #16
2e660     A7 12 02 F6 | 	mov	arg01, fp
2e664     10 4E 85 F1 | 	sub	fp, #16
2e668     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2e66c     0C 4E 05 F1 | 	add	fp, #12
2e670     A7 FA 61 FC | 	wrlong	result1, fp
2e674     0C 4E 85 F1 | 	sub	fp, #12
2e678     00 FA 0D F2 | 	cmp	result1, #0 wz
2e67c     1C 00 90 5D |  if_ne	jmp	#LR__4640
2e680     70 4E 05 F1 | 	add	fp, #112
2e684     A7 12 02 FB | 	rdlong	arg01, fp
2e688     70 4E 85 F1 | 	sub	fp, #112
2e68c     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
2e690     0C 4E 05 F1 | 	add	fp, #12
2e694     A7 FA 61 FC | 	wrlong	result1, fp
2e698     0C 4E 85 F1 | 	sub	fp, #12
2e69c                 | LR__4640
2e69c                 | LR__4641
2e69c                 | LR__4642
2e69c                 | LR__4643
2e69c                 | ' 					res = sync_fs(fs);
2e69c                 | ' 				}
2e69c                 | ' 			}
2e69c                 | ' 
2e69c                 | ' 		}
2e69c                 | ' 		;
2e69c                 | ' 	}
2e69c                 | ' 
2e69c                 | ' 	return res ;
2e69c     0C 4E 05 F1 | 	add	fp, #12
2e6a0     A7 FA 01 FB | 	rdlong	result1, fp
2e6a4     0C 4E 85 F1 | 	sub	fp, #12
2e6a8     A7 F0 03 F6 | 	mov	ptra, fp
2e6ac     B2 00 A0 FD | 	call	#popregs_
2e6b0                 | _fatfs_cc_f_rename_ret
2e6b0     2D 00 64 FD | 	ret
2e6b4                 | 
2e6b4                 | _fatfs_cc_time
2e6b4     00 4A 05 F6 | 	mov	COUNT_, #0
2e6b8     A8 00 A0 FD | 	call	#pushregs_
2e6bc     14 F0 07 F1 | 	add	ptra, #20
2e6c0     04 4E 05 F1 | 	add	fp, #4
2e6c4     A7 12 62 FC | 	wrlong	arg01, fp
2e6c8     04 4E 05 F1 | 	add	fp, #4
2e6cc     A7 12 02 F6 | 	mov	arg01, fp
2e6d0     08 4E 85 F1 | 	sub	fp, #8
2e6d4     00 14 06 F6 | 	mov	arg02, #0
2e6d8     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
2e6dc     08 4E 05 F1 | 	add	fp, #8
2e6e0     A7 FA 01 FB | 	rdlong	result1, fp
2e6e4     08 4E 05 F1 | 	add	fp, #8
2e6e8     A7 FA 61 FC | 	wrlong	result1, fp
2e6ec     0C 4E 85 F1 | 	sub	fp, #12
2e6f0     A7 FA 09 FB | 	rdlong	result1, fp wz
2e6f4     04 4E 85 F1 | 	sub	fp, #4
2e6f8     18 00 90 AD |  if_e	jmp	#LR__4650
2e6fc     04 4E 05 F1 | 	add	fp, #4
2e700     A7 FA 01 FB | 	rdlong	result1, fp
2e704     0C 4E 05 F1 | 	add	fp, #12
2e708     A7 14 02 FB | 	rdlong	arg02, fp
2e70c     10 4E 85 F1 | 	sub	fp, #16
2e710     FD 14 62 FC | 	wrlong	arg02, result1
2e714                 | LR__4650
2e714                 | '         *tp = now;
2e714                 | '     return now;
2e714     10 4E 05 F1 | 	add	fp, #16
2e718     A7 FA 01 FB | 	rdlong	result1, fp
2e71c     10 4E 85 F1 | 	sub	fp, #16
2e720     A7 F0 03 F6 | 	mov	ptra, fp
2e724     B2 00 A0 FD | 	call	#popregs_
2e728                 | _fatfs_cc_time_ret
2e728     2D 00 64 FD | 	ret
2e72c                 | 
2e72c                 | _fatfs_cc_mktime
2e72c     06 4A 05 F6 | 	mov	COUNT_, #6
2e730     A8 00 A0 FD | 	call	#pushregs_
2e734     09 1F 02 F6 | 	mov	local01, arg01
2e738     14 1E 06 F1 | 	add	local01, #20
2e73c     0F 13 02 FB | 	rdlong	arg01, local01
2e740     14 1E 86 F1 | 	sub	local01, #20
2e744     46 12 56 F2 | 	cmps	arg01, #70 wc
2e748                 | '                 return (time_t) -1;
2e748     01 FA 65 C6 |  if_b	neg	result1, #1
2e74c     7C 01 90 CD |  if_b	jmp	#LR__4664
2e750     03 00 00 FF 
2e754     6C 21 06 F6 | 	mov	local02, ##1900
2e758     14 1E 06 F1 | 	add	local01, #20
2e75c     0F FB 01 FB | 	rdlong	result1, local01
2e760     FD 20 02 F1 | 	add	local02, result1
2e764     08 1E 86 F1 | 	sub	local01, #8
2e768     0F 23 02 FB | 	rdlong	local03, local01
2e76c     01 22 86 F1 | 	sub	local03, #1
2e770     04 1E 06 F1 | 	add	local01, #4
2e774     0F 13 02 FB | 	rdlong	arg01, local01
2e778     10 1E 86 F1 | 	sub	local01, #16
2e77c     02 12 66 F0 | 	shl	arg01, #2
2e780     02 00 00 FF 
2e784     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
2e788     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2e78c     09 FB 01 FB | 	rdlong	result1, arg01
2e790     FD 22 02 F1 | 	add	local03, result1
2e794     10 13 02 F6 | 	mov	arg01, local02
2e798     02 00 00 FF 
2e79c     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2e7a0     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e7a4     00 FA 0D F2 | 	cmp	result1, #0 wz
2e7a8     1C 00 90 AD |  if_e	jmp	#LR__4660
2e7ac     00 24 06 F6 | 	mov	local04, #0
2e7b0     10 1E 06 F1 | 	add	local01, #16
2e7b4     0F FB 01 FB | 	rdlong	result1, local01
2e7b8     10 1E 86 F1 | 	sub	local01, #16
2e7bc     02 FA 55 F2 | 	cmps	result1, #2 wc
2e7c0     01 24 06 36 |  if_ae	mov	local04, #1
2e7c4     04 00 90 FD | 	jmp	#LR__4661
2e7c8                 | LR__4660
2e7c8     00 24 06 F6 | 	mov	local04, #0
2e7cc                 | LR__4661
2e7cc     04 1E 06 F1 | 	add	local01, #4
2e7d0     0F FB 01 FB | 	rdlong	result1, local01
2e7d4     04 1E 86 F1 | 	sub	local01, #4
2e7d8     0F 27 02 FB | 	rdlong	local05, local01
2e7dc     08 1E 06 F1 | 	add	local01, #8
2e7e0     0F 13 02 FB | 	rdlong	arg01, local01
2e7e4     07 00 00 FF 
2e7e8     10 12 06 FD | 	qmul	arg01, ##3600
2e7ec     12 23 02 F1 | 	add	local03, local04
2e7f0     FD 24 02 F6 | 	mov	local04, result1
2e7f4     04 24 66 F0 | 	shl	local04, #4
2e7f8     FD 24 82 F1 | 	sub	local04, result1
2e7fc     02 24 66 F0 | 	shl	local04, #2
2e800     12 27 02 F1 | 	add	local05, local04
2e804     08 1E 86 F1 | 	sub	local01, #8
2e808     18 24 62 FD | 	getqx	local04
2e80c     A8 00 00 FF 
2e810     80 23 06 FD | 	qmul	local03, ##86400
2e814     12 27 02 F1 | 	add	local05, local04
2e818     10 23 02 F6 | 	mov	local03, local02
2e81c     03 00 00 FF 
2e820     B2 23 86 F1 | 	sub	local03, ##1970
2e824     18 24 62 FD | 	getqx	local04
2e828     99 F0 00 FF 
2e82c     80 23 06 FD | 	qmul	local03, ##31536000
2e830     12 27 02 F1 | 	add	local05, local04
2e834     10 23 02 F6 | 	mov	local03, local02
2e838     03 00 00 FF 
2e83c     B1 23 86 F1 | 	sub	local03, ##1969
2e840     11 29 52 F6 | 	abs	local06, local03 wc
2e844     02 28 46 F0 | 	shr	local06, #2
2e848     14 29 82 F6 | 	negc	local06, local06
2e84c     03 00 00 FF 
2e850     D1 21 56 F2 | 	cmps	local02, ##2001 wc
2e854     18 24 62 FD | 	getqx	local04
2e858     12 27 02 F1 | 	add	local05, local04
2e85c     18 00 90 CD |  if_b	jmp	#LR__4662
2e860     03 00 00 FF 
2e864     D0 21 86 F1 | 	sub	local02, ##2000
2e868     10 25 52 F6 | 	abs	local04, local02 wc
2e86c     64 24 16 FD | 	qdiv	local04, #100
2e870     18 24 62 FD | 	getqx	local04
2e874     12 29 A2 F3 | 	sumnc	local06, local04
2e878                 | LR__4662
2e878     A8 00 00 FF 
2e87c     80 29 06 FD | 	qmul	local06, ##86400
2e880     18 28 62 FD | 	getqx	local06
2e884     14 27 02 F1 | 	add	local05, local06
2e888     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2e88c     02 00 00 FF 
2e890     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2e894     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2e898     14 27 02 F1 | 	add	local05, local06
2e89c     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2e8a0     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2e8a4     02 00 00 FF 
2e8a8     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2e8ac     01 22 0E F2 | 	cmp	local03, #1 wz
2e8b0     14 00 90 5D |  if_ne	jmp	#LR__4663
2e8b4     0F 13 02 F6 | 	mov	arg01, local01
2e8b8     DC 19 B0 FD | 	call	#_fatfs_cc___indst
2e8bc     00 FA 0D F2 | 	cmp	result1, #0 wz
2e8c0     07 00 00 5F 
2e8c4     10 26 86 51 |  if_ne	sub	local05, ##3600
2e8c8                 | LR__4663
2e8c8                 | '                 s -=  (3600L) ;
2e8c8                 | ' 
2e8c8                 | '         return s;
2e8c8     13 FB 01 F6 | 	mov	result1, local05
2e8cc                 | LR__4664
2e8cc     A7 F0 03 F6 | 	mov	ptra, fp
2e8d0     B2 00 A0 FD | 	call	#popregs_
2e8d4                 | _fatfs_cc_mktime_ret
2e8d4     2D 00 64 FD | 	ret
2e8d8                 | 
2e8d8                 | _fatfs_cc__gmtime_r
2e8d8     03 4A 05 F6 | 	mov	COUNT_, #3
2e8dc     A8 00 A0 FD | 	call	#pushregs_
2e8e0     09 1F 02 FB | 	rdlong	local01, arg01
2e8e4     A8 00 00 FF 
2e8e8     80 1F 16 FD | 	qdiv	local01, ##86400
2e8ec     18 FA 61 FD | 	getqx	result1
2e8f0     04 FA 05 F1 | 	add	result1, #4
2e8f4     07 FA 15 FD | 	qdiv	result1, #7
2e8f8     18 14 06 F1 | 	add	arg02, #24
2e8fc     D1 7F 27 FF 
2e900     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
2e904     D1 7F 27 3F 
2e908     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
2e90c     03 00 00 3F 
2e910     DC 21 06 36 |  if_ae	mov	local02, ##2012
2e914     03 00 00 CF 
2e918     B2 21 06 C6 |  if_b	mov	local02, ##1970
2e91c                 | ' 	  year = 1970;
2e91c                 | ' 	}
2e91c                 | ' 
2e91c                 | ' 	for(;;) {
2e91c     19 FA 61 FD | 	getqy	result1
2e920     0A FB 61 FC | 	wrlong	result1, arg02
2e924     18 14 86 F1 | 	sub	arg02, #24
2e928                 | LR__4670
2e928     10 13 02 F6 | 	mov	arg01, local02
2e92c     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e930     00 FA 0D F2 | 	cmp	result1, #0 wz
2e934     42 F1 00 5F 
2e938     00 23 06 56 |  if_ne	mov	local03, ##31622400
2e93c     99 F0 00 AF 
2e940     80 23 06 A6 |  if_e	mov	local03, ##31536000
2e944     11 1F 12 F2 | 	cmp	local01, local03 wc
2e948                 | ' 	    break;
2e948     01 20 06 31 |  if_ae	add	local02, #1
2e94c     11 1F 82 31 |  if_ae	sub	local01, local03
2e950     D4 FF 9F 3D |  if_ae	jmp	#LR__4670
2e954     A8 00 00 FF 
2e958     80 1F 16 FD | 	qdiv	local01, ##86400
2e95c     10 23 02 F6 | 	mov	local03, local02
2e960     03 00 00 FF 
2e964     6C 23 86 F1 | 	sub	local03, ##1900
2e968     14 14 06 F1 | 	add	arg02, #20
2e96c     0A 23 62 FC | 	wrlong	local03, arg02
2e970     08 14 06 F1 | 	add	arg02, #8
2e974     10 13 02 F6 | 	mov	arg01, local02
2e978     18 20 62 FD | 	getqx	local02
2e97c     0A 21 62 FC | 	wrlong	local02, arg02
2e980     1C 14 86 F1 | 	sub	arg02, #28
2e984     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2e988     00 FA 0D F2 | 	cmp	result1, #0 wz
2e98c     1D 22 06 56 |  if_ne	mov	local03, #29
2e990     1C 22 06 A6 |  if_e	mov	local03, #28
2e994     02 00 00 FF 
2e998     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2e99c     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2e9a0     02 00 00 FF 
2e9a4     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2e9a8                 | ' 
2e9a8                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2e9a8                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2e9a8     00 12 06 F6 | 	mov	arg01, #0
2e9ac     97 2A 48 FB | 	callpa	#(@LR__4672-@LR__4671)>>2,fcache_load_ptr_
2e9b0                 | LR__4671
2e9b0     09 23 02 F6 | 	mov	local03, arg01
2e9b4     02 22 66 F0 | 	shl	local03, #2
2e9b8     02 00 00 FF 
2e9bc     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2e9c0     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2e9c4     11 23 02 FB | 	rdlong	local03, local03
2e9c8     11 21 52 F2 | 	cmps	local02, local03 wc
2e9cc     02 00 00 FF 
2e9d0     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2e9d4     2C 00 90 CD |  if_b	jmp	#LR__4673
2e9d8     09 23 02 F6 | 	mov	local03, arg01
2e9dc     02 22 66 F0 | 	shl	local03, #2
2e9e0     02 00 00 FF 
2e9e4     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2e9e8     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2e9ec     11 23 02 FB | 	rdlong	local03, local03
2e9f0     11 21 82 F1 | 	sub	local02, local03
2e9f4     01 12 06 F1 | 	add	arg01, #1
2e9f8     02 00 00 FF 
2e9fc     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2ea00     AC FF 9F FD | 	jmp	#LR__4671
2ea04                 | LR__4672
2ea04                 | LR__4673
2ea04     A8 00 00 FF 
2ea08     80 1F 16 FD | 	qdiv	local01, ##86400
2ea0c     10 14 06 F1 | 	add	arg02, #16
2ea10     0A 13 62 FC | 	wrlong	arg01, arg02
2ea14     01 20 06 F1 | 	add	local02, #1
2ea18     04 14 86 F1 | 	sub	arg02, #4
2ea1c     0A 21 62 FC | 	wrlong	local02, arg02
2ea20     19 1E 62 FD | 	getqy	local01
2ea24     07 00 00 FF 
2ea28     10 1E 16 FD | 	qdiv	local01, ##3600
2ea2c     18 22 62 FD | 	getqx	local03
2ea30     07 00 00 FF 
2ea34     10 1E 16 FD | 	qdiv	local01, ##3600
2ea38     04 14 86 F1 | 	sub	arg02, #4
2ea3c     0A 23 62 FC | 	wrlong	local03, arg02
2ea40     19 1E 62 FD | 	getqy	local01
2ea44     3C 1E 16 FD | 	qdiv	local01, #60
2ea48     18 22 62 FD | 	getqx	local03
2ea4c     3C 1E 16 FD | 	qdiv	local01, #60
2ea50     04 14 86 F1 | 	sub	arg02, #4
2ea54     0A 23 62 FC | 	wrlong	local03, arg02
2ea58     04 14 86 F1 | 	sub	arg02, #4
2ea5c                 | '         stm->tm_isdst = 0;
2ea5c                 | ' 
2ea5c                 | ' ;
2ea5c                 | '         return stm;
2ea5c     0A FB 01 F6 | 	mov	result1, arg02
2ea60     19 22 62 FD | 	getqy	local03
2ea64     0A 23 62 FC | 	wrlong	local03, arg02
2ea68     20 14 06 F1 | 	add	arg02, #32
2ea6c     0A 01 68 FC | 	wrlong	#0, arg02
2ea70     A7 F0 03 F6 | 	mov	ptra, fp
2ea74     B2 00 A0 FD | 	call	#popregs_
2ea78                 | _fatfs_cc__gmtime_r_ret
2ea78     2D 00 64 FD | 	ret
2ea7c                 | 
2ea7c                 | _fatfs_cc__tzset
2ea7c     82 01 00 FF 
2ea80     C1 13 06 F6 | 	mov	arg01, ##@LR__4985
2ea84     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2ea88     FD 12 02 F6 | 	mov	arg01, result1
2ea8c     02 00 00 FF 
2ea90     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2ea94     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2ea98     02 00 00 FF 
2ea9c     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2eaa0     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2eaa4     02 00 00 FF 
2eaa8     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2eaac     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2eab0     02 00 00 FF 
2eab4     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2eab8                 | _fatfs_cc__tzset_ret
2eab8     2D 00 64 FD | 	ret
2eabc                 | 
2eabc                 | _fatfs_cc_getenv
2eabc     06 4A 05 F6 | 	mov	COUNT_, #6
2eac0     A8 00 A0 FD | 	call	#pushregs_
2eac4     09 1F 02 F6 | 	mov	local01, arg01
2eac8     09 21 02 F6 | 	mov	local02, arg01
2eacc     97 06 48 FB | 	callpa	#(@LR__4681-@LR__4680)>>2,fcache_load_ptr_
2ead0                 | LR__4680
2ead0     10 FB C9 FA | 	rdbyte	result1, local02 wz
2ead4     01 20 06 51 |  if_ne	add	local02, #1
2ead8     F4 FF 9F 5D |  if_ne	jmp	#LR__4680
2eadc                 | LR__4681
2eadc     09 21 82 F1 | 	sub	local02, arg01
2eae0     10 FB 01 F6 | 	mov	result1, local02
2eae4     02 00 00 FF 
2eae8     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2eaec     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2eaf0     02 00 00 FF 
2eaf4     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2eaf8                 | '             return 0;
2eaf8     00 FA 05 A6 |  if_e	mov	result1, #0
2eafc     5C 00 90 AD |  if_e	jmp	#LR__4684
2eb00                 | ' 
2eb00                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2eb00     02 00 00 FF 
2eb04     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2eb08     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2eb0c     02 00 00 FF 
2eb10     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2eb14                 | LR__4682
2eb14     11 25 0A FB | 	rdlong	local04, local03 wz
2eb18     3C 00 90 AD |  if_e	jmp	#LR__4683
2eb1c     12 13 02 F6 | 	mov	arg01, local04
2eb20     0F 15 02 F6 | 	mov	arg02, local01
2eb24     10 17 02 F6 | 	mov	arg03, local02
2eb28     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
2eb2c     00 FA 0D F2 | 	cmp	result1, #0 wz
2eb30     10 27 02 A6 |  if_e	mov	local05, local02
2eb34     12 27 02 A1 |  if_e	add	local05, local04
2eb38     13 29 C2 AA |  if_e	rdbyte	local06, local05
2eb3c     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
2eb40                 | ' 			return name+len+1;
2eb40     10 25 02 A1 |  if_e	add	local04, local02
2eb44     01 24 06 A1 |  if_e	add	local04, #1
2eb48     12 FB 01 A6 |  if_e	mov	result1, local04
2eb4c     0C 00 90 AD |  if_e	jmp	#LR__4684
2eb50     04 22 06 F1 | 	add	local03, #4
2eb54     BC FF 9F FD | 	jmp	#LR__4682
2eb58                 | LR__4683
2eb58                 | ' 	}
2eb58                 | ' 	return 0;
2eb58     00 FA 05 F6 | 	mov	result1, #0
2eb5c                 | LR__4684
2eb5c     A7 F0 03 F6 | 	mov	ptra, fp
2eb60     B2 00 A0 FD | 	call	#popregs_
2eb64                 | _fatfs_cc_getenv_ret
2eb64     2D 00 64 FD | 	ret
2eb68                 | 
2eb68                 | _fatfs_cc__get_fattime
2eb68     00 4A 05 F6 | 	mov	COUNT_, #0
2eb6c     A8 00 A0 FD | 	call	#pushregs_
2eb70     34 F0 07 F1 | 	add	ptra, #52
2eb74     00 12 06 F6 | 	mov	arg01, #0
2eb78     38 FB BF FD | 	call	#_fatfs_cc_time
2eb7c     04 4E 05 F1 | 	add	fp, #4
2eb80     A7 FA 61 FC | 	wrlong	result1, fp
2eb84     A7 12 02 F6 | 	mov	arg01, fp
2eb88     0C 4E 05 F1 | 	add	fp, #12
2eb8c     A7 14 02 F6 | 	mov	arg02, fp
2eb90     10 4E 85 F1 | 	sub	fp, #16
2eb94     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2eb98     24 4E 05 F1 | 	add	fp, #36
2eb9c     A7 14 02 FB | 	rdlong	arg02, fp
2eba0     50 14 86 F1 | 	sub	arg02, #80
2eba4     09 14 66 F0 | 	shl	arg02, #9
2eba8     04 4E 85 F1 | 	sub	fp, #4
2ebac     A7 FA 01 FB | 	rdlong	result1, fp
2ebb0     01 FA 05 F1 | 	add	result1, #1
2ebb4     05 FA 65 F0 | 	shl	result1, #5
2ebb8     FD 14 42 F5 | 	or	arg02, result1
2ebbc     04 4E 85 F1 | 	sub	fp, #4
2ebc0     A7 FA 01 FB | 	rdlong	result1, fp
2ebc4     FD 14 42 F5 | 	or	arg02, result1
2ebc8     14 4E 85 F1 | 	sub	fp, #20
2ebcc     A7 14 62 FC | 	wrlong	arg02, fp
2ebd0     10 4E 05 F1 | 	add	fp, #16
2ebd4     A7 14 02 FB | 	rdlong	arg02, fp
2ebd8     0B 14 66 F0 | 	shl	arg02, #11
2ebdc     04 4E 85 F1 | 	sub	fp, #4
2ebe0     A7 FA 01 FB | 	rdlong	result1, fp
2ebe4     05 FA 65 F0 | 	shl	result1, #5
2ebe8     FD 14 42 F5 | 	or	arg02, result1
2ebec     04 4E 85 F1 | 	sub	fp, #4
2ebf0     A7 FA 01 FB | 	rdlong	result1, fp
2ebf4     FD 14 42 F5 | 	or	arg02, result1
2ebf8     04 4E 85 F1 | 	sub	fp, #4
2ebfc     A7 14 62 FC | 	wrlong	arg02, fp
2ec00                 | ' 
2ec00                 | '     now = time(0);
2ec00                 | '     _gmtime_r (&now, &date);
2ec00                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2ec00                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2ec00                 | '     return (ffdate << 16) | fftime;
2ec00     04 4E 85 F1 | 	sub	fp, #4
2ec04     A7 FA 01 FB | 	rdlong	result1, fp
2ec08     10 FA 65 F0 | 	shl	result1, #16
2ec0c     08 4E 85 F1 | 	sub	fp, #8
2ec10     0A FB 41 F5 | 	or	result1, arg02
2ec14     A7 F0 03 F6 | 	mov	ptra, fp
2ec18     B2 00 A0 FD | 	call	#popregs_
2ec1c                 | _fatfs_cc__get_fattime_ret
2ec1c     2D 00 64 FD | 	ret
2ec20                 | 
2ec20                 | _fatfs_cc_unixtime_0960
2ec20     00 4A 05 F6 | 	mov	COUNT_, #0
2ec24     A8 00 A0 FD | 	call	#pushregs_
2ec28     34 F0 07 F1 | 	add	ptra, #52
2ec2c     04 4E 05 F1 | 	add	fp, #4
2ec30     A7 12 62 FC | 	wrlong	arg01, fp
2ec34     04 4E 05 F1 | 	add	fp, #4
2ec38     A7 14 62 FC | 	wrlong	arg02, fp
2ec3c     04 4E 85 F1 | 	sub	fp, #4
2ec40     A7 14 02 FB | 	rdlong	arg02, fp
2ec44     09 14 46 F0 | 	shr	arg02, #9
2ec48     7F 14 06 F5 | 	and	arg02, #127
2ec4c     50 FA 05 F6 | 	mov	result1, #80
2ec50     0A FB 01 F1 | 	add	result1, arg02
2ec54     20 4E 05 F1 | 	add	fp, #32
2ec58     A7 FA 61 FC | 	wrlong	result1, fp
2ec5c     20 4E 85 F1 | 	sub	fp, #32
2ec60     A7 FA 01 FB | 	rdlong	result1, fp
2ec64     05 FA 45 F0 | 	shr	result1, #5
2ec68     FD FA 41 F8 | 	getnib	result1, result1, #0
2ec6c     01 FA 85 F1 | 	sub	result1, #1
2ec70     1C 4E 05 F1 | 	add	fp, #28
2ec74     A7 FA 61 FC | 	wrlong	result1, fp
2ec78     1C 4E 85 F1 | 	sub	fp, #28
2ec7c     A7 FA 01 FB | 	rdlong	result1, fp
2ec80     1F FA 05 F5 | 	and	result1, #31
2ec84     18 4E 05 F1 | 	add	fp, #24
2ec88     A7 FA 61 FC | 	wrlong	result1, fp
2ec8c     14 4E 85 F1 | 	sub	fp, #20
2ec90     A7 FA 01 FB | 	rdlong	result1, fp
2ec94     0B FA 45 F0 | 	shr	result1, #11
2ec98     1F FA 05 F5 | 	and	result1, #31
2ec9c     10 4E 05 F1 | 	add	fp, #16
2eca0     A7 FA 61 FC | 	wrlong	result1, fp
2eca4     10 4E 85 F1 | 	sub	fp, #16
2eca8     A7 FA 01 FB | 	rdlong	result1, fp
2ecac     05 FA 45 F0 | 	shr	result1, #5
2ecb0     3F FA 05 F5 | 	and	result1, #63
2ecb4     0C 4E 05 F1 | 	add	fp, #12
2ecb8     A7 FA 61 FC | 	wrlong	result1, fp
2ecbc     0C 4E 85 F1 | 	sub	fp, #12
2ecc0     A7 14 02 FB | 	rdlong	arg02, fp
2ecc4     1F 14 06 F5 | 	and	arg02, #31
2ecc8     01 14 66 F0 | 	shl	arg02, #1
2eccc     08 4E 05 F1 | 	add	fp, #8
2ecd0     A7 14 62 FC | 	wrlong	arg02, fp
2ecd4     A7 12 02 F6 | 	mov	arg01, fp
2ecd8     10 4E 85 F1 | 	sub	fp, #16
2ecdc     4C FA BF FD | 	call	#_fatfs_cc_mktime
2ece0     0C 4E 05 F1 | 	add	fp, #12
2ece4     A7 FA 61 FC | 	wrlong	result1, fp
2ece8                 | ' 
2ece8                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2ece8                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2ece8                 | '     date.tm_mday = (dosdate & 0x1f);
2ece8                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2ece8                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2ece8                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2ece8                 | ' 
2ece8                 | '     t = mktime(&date);
2ece8                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ece8                 | '     return t;
2ece8     0C 4E 85 F1 | 	sub	fp, #12
2ecec     A7 F0 03 F6 | 	mov	ptra, fp
2ecf0     B2 00 A0 FD | 	call	#popregs_
2ecf4                 | _fatfs_cc_unixtime_0960_ret
2ecf4     2D 00 64 FD | 	ret
2ecf8                 | 
2ecf8                 | _fatfs_cc__set_dos_error_0962
2ecf8     09 01 02 F6 | 	mov	_var01, arg01
2ecfc                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ecfc                 | '     switch (derr) {
2ecfc     14 00 26 F3 | 	fle	_var01, #20
2ed00     30 00 62 FD | 	jmprel	_var01
2ed04                 | LR__4690
2ed04     50 00 90 FD | 	jmp	#LR__4691
2ed08     84 00 90 FD | 	jmp	#LR__4705
2ed0c     80 00 90 FD | 	jmp	#LR__4706
2ed10     7C 00 90 FD | 	jmp	#LR__4707
2ed14     48 00 90 FD | 	jmp	#LR__4692
2ed18     44 00 90 FD | 	jmp	#LR__4693
2ed1c     40 00 90 FD | 	jmp	#LR__4694
2ed20     44 00 90 FD | 	jmp	#LR__4695
2ed24     48 00 90 FD | 	jmp	#LR__4697
2ed28     54 00 90 FD | 	jmp	#LR__4700
2ed2c     38 00 90 FD | 	jmp	#LR__4696
2ed30     4C 00 90 FD | 	jmp	#LR__4701
2ed34     48 00 90 FD | 	jmp	#LR__4702
2ed38     44 00 90 FD | 	jmp	#LR__4703
2ed3c     50 00 90 FD | 	jmp	#LR__4708
2ed40     4C 00 90 FD | 	jmp	#LR__4708
2ed44     48 00 90 FD | 	jmp	#LR__4708
2ed48     2C 00 90 FD | 	jmp	#LR__4698
2ed4c     38 00 90 FD | 	jmp	#LR__4704
2ed50     2C 00 90 FD | 	jmp	#LR__4699
2ed54     38 00 90 FD | 	jmp	#LR__4708
2ed58                 | LR__4691
2ed58     00 02 06 F6 | 	mov	_var02, #0
2ed5c                 | '         r = 0;
2ed5c                 | '         break;
2ed5c     34 00 90 FD | 	jmp	#LR__4709
2ed60                 | LR__4692
2ed60                 | LR__4693
2ed60                 | LR__4694
2ed60     04 02 06 F6 | 	mov	_var02, #4
2ed64                 | '         r =  4 ;
2ed64                 | '         break;
2ed64     2C 00 90 FD | 	jmp	#LR__4709
2ed68                 | LR__4695
2ed68                 | LR__4696
2ed68     06 02 06 F6 | 	mov	_var02, #6
2ed6c                 | '         r =  6 ;
2ed6c                 | '         break;
2ed6c     24 00 90 FD | 	jmp	#LR__4709
2ed70                 | LR__4697
2ed70     09 02 06 F6 | 	mov	_var02, #9
2ed74                 | '         r =  9 ;
2ed74                 | '         break;
2ed74     1C 00 90 FD | 	jmp	#LR__4709
2ed78                 | LR__4698
2ed78     07 02 06 F6 | 	mov	_var02, #7
2ed7c                 | '         r =  7 ;
2ed7c                 | '         break;
2ed7c     14 00 90 FD | 	jmp	#LR__4709
2ed80                 | LR__4699
2ed80                 | LR__4700
2ed80                 | LR__4701
2ed80                 | LR__4702
2ed80                 | LR__4703
2ed80     0A 02 06 F6 | 	mov	_var02, #10
2ed84                 | '         r =  10 ;
2ed84                 | '         break;
2ed84     0C 00 90 FD | 	jmp	#LR__4709
2ed88                 | LR__4704
2ed88     0B 02 06 F6 | 	mov	_var02, #11
2ed8c                 | '         r =  11 ;
2ed8c                 | '         break;
2ed8c     04 00 90 FD | 	jmp	#LR__4709
2ed90                 | LR__4705
2ed90                 | LR__4706
2ed90                 | LR__4707
2ed90                 | LR__4708
2ed90     0C 02 06 F6 | 	mov	_var02, #12
2ed94                 | '         r =  12 ;
2ed94                 | '         break;
2ed94                 | LR__4709
2ed94                 | '     }
2ed94                 | '     return _seterror(r);
2ed94     00 02 4E F2 | 	cmps	_var02, #0 wz
2ed98     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2ed9c     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2eda0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2eda4     01 FA 65 56 |  if_ne	neg	result1, #1
2eda8     00 FA 05 A6 |  if_e	mov	result1, #0
2edac                 | _fatfs_cc__set_dos_error_0962_ret
2edac     2D 00 64 FD | 	ret
2edb0                 | 
2edb0                 | _fatfs_cc_v_creat
2edb0     04 4A 05 F6 | 	mov	COUNT_, #4
2edb4     A8 00 A0 FD | 	call	#pushregs_
2edb8     09 1F 02 F6 | 	mov	local01, arg01
2edbc     0A 21 02 F6 | 	mov	local02, arg02
2edc0     03 00 00 FF 
2edc4     3C 12 06 F6 | 	mov	arg01, ##1596
2edc8                 | '     return _gc_alloc(size);
2edc8     10 14 06 F6 | 	mov	arg02, #16
2edcc     28 5E BF FD | 	call	#__system___gc_doalloc
2edd0     FD 22 0A F6 | 	mov	local03, result1 wz
2edd4                 | '       return _seterror( 7 );
2edd4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2edd8     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2eddc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ede0     01 FA 65 A6 |  if_e	neg	result1, #1
2ede4     58 00 90 AD |  if_e	jmp	#LR__4711
2ede8     11 13 02 F6 | 	mov	arg01, local03
2edec     00 14 06 F6 | 	mov	arg02, #0
2edf0     03 00 00 FF 
2edf4     3C 16 06 F6 | 	mov	arg03, ##1596
2edf8     98 00 A0 FD | 	call	#\builtin_bytefill_
2edfc     02 00 00 FF 
2ee00     14 22 06 F1 | 	add	local03, ##1044
2ee04     11 13 02 F6 | 	mov	arg01, local03
2ee08     02 00 00 FF 
2ee0c     14 22 86 F1 | 	sub	local03, ##1044
2ee10     10 15 02 F6 | 	mov	arg02, local02
2ee14     07 16 06 F6 | 	mov	arg03, #7
2ee18     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2ee1c     FD 24 0A F6 | 	mov	local04, result1 wz
2ee20     14 00 90 AD |  if_e	jmp	#LR__4710
2ee24     11 13 02 F6 | 	mov	arg01, local03
2ee28                 | '     return _gc_free(ptr);
2ee28     D8 5E BF FD | 	call	#__system___gc_free
2ee2c                 | '     free(f);
2ee2c                 | '     return _set_dos_error(r);
2ee2c     12 13 02 F6 | 	mov	arg01, local04
2ee30     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ee34     08 00 90 FD | 	jmp	#LR__4711
2ee38                 | LR__4710
2ee38     0F 23 62 FC | 	wrlong	local03, local01
2ee3c                 | '   }
2ee3c                 | '   fil->vfsdata = f;
2ee3c                 | '   return 0;
2ee3c     00 FA 05 F6 | 	mov	result1, #0
2ee40                 | LR__4711
2ee40     A7 F0 03 F6 | 	mov	ptra, fp
2ee44     B2 00 A0 FD | 	call	#popregs_
2ee48                 | _fatfs_cc_v_creat_ret
2ee48     2D 00 64 FD | 	ret
2ee4c                 | 
2ee4c                 | _fatfs_cc_v_close
2ee4c     02 4A 05 F6 | 	mov	COUNT_, #2
2ee50     A8 00 A0 FD | 	call	#pushregs_
2ee54     09 1F 02 FB | 	rdlong	local01, arg01
2ee58     02 00 00 FF 
2ee5c     14 1E 06 F1 | 	add	local01, ##1044
2ee60     0F 13 02 F6 | 	mov	arg01, local01
2ee64     02 00 00 FF 
2ee68     14 1E 86 F1 | 	sub	local01, ##1044
2ee6c     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2ee70     FD 20 02 F6 | 	mov	local02, result1
2ee74     0F 13 02 F6 | 	mov	arg01, local01
2ee78                 | '     return _gc_free(ptr);
2ee78     88 5E BF FD | 	call	#__system___gc_free
2ee7c                 | '     FAT_FIL *f = fil->vfsdata;
2ee7c                 | '     r=f_close(&f->fil);
2ee7c                 | '     free(f);
2ee7c                 | '     return _set_dos_error(r);
2ee7c     10 13 02 F6 | 	mov	arg01, local02
2ee80     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2ee84     A7 F0 03 F6 | 	mov	ptra, fp
2ee88     B2 00 A0 FD | 	call	#popregs_
2ee8c                 | _fatfs_cc_v_close_ret
2ee8c     2D 00 64 FD | 	ret
2ee90                 | 
2ee90                 | _fatfs_cc_v_opendir
2ee90     04 4A 05 F6 | 	mov	COUNT_, #4
2ee94     A8 00 A0 FD | 	call	#pushregs_
2ee98     09 1F 02 F6 | 	mov	local01, arg01
2ee9c     0A 21 02 F6 | 	mov	local02, arg02
2eea0     30 12 06 F6 | 	mov	arg01, #48
2eea4                 | '     return _gc_alloc(size);
2eea4     10 14 06 F6 | 	mov	arg02, #16
2eea8     4C 5D BF FD | 	call	#__system___gc_doalloc
2eeac     FD 22 0A F6 | 	mov	local03, result1 wz
2eeb0                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2eeb0                 | '       return _seterror( 7 );
2eeb0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2eeb4     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2eeb8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2eebc     01 FA 65 A6 |  if_e	neg	result1, #1
2eec0     34 00 90 AD |  if_e	jmp	#LR__4721
2eec4     10 15 02 F6 | 	mov	arg02, local02
2eec8     11 13 02 F6 | 	mov	arg01, local03
2eecc     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2eed0     FD 24 0A F6 | 	mov	local04, result1 wz
2eed4     14 00 90 AD |  if_e	jmp	#LR__4720
2eed8     11 13 02 F6 | 	mov	arg01, local03
2eedc                 | '     return _gc_free(ptr);
2eedc     24 5E BF FD | 	call	#__system___gc_free
2eee0                 | '         free(f);
2eee0                 | '         return _set_dos_error(r);
2eee0     12 13 02 F6 | 	mov	arg01, local04
2eee4     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2eee8     0C 00 90 FD | 	jmp	#LR__4721
2eeec                 | LR__4720
2eeec     04 1E 06 F1 | 	add	local01, #4
2eef0     0F 23 62 FC | 	wrlong	local03, local01
2eef4                 | '     }
2eef4                 | '     dir->vfsdata = f;
2eef4                 | '     return 0;
2eef4     00 FA 05 F6 | 	mov	result1, #0
2eef8                 | LR__4721
2eef8     A7 F0 03 F6 | 	mov	ptra, fp
2eefc     B2 00 A0 FD | 	call	#popregs_
2ef00                 | _fatfs_cc_v_opendir_ret
2ef00     2D 00 64 FD | 	ret
2ef04                 | 
2ef04                 | _fatfs_cc_v_closedir
2ef04     02 4A 05 F6 | 	mov	COUNT_, #2
2ef08     A8 00 A0 FD | 	call	#pushregs_
2ef0c     04 12 06 F1 | 	add	arg01, #4
2ef10     09 1F 02 FB | 	rdlong	local01, arg01
2ef14     0F 13 02 F6 | 	mov	arg01, local01
2ef18     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2ef1c     FD 20 02 F6 | 	mov	local02, result1
2ef20     0F 13 02 F6 | 	mov	arg01, local01
2ef24                 | '     return _gc_free(ptr);
2ef24     DC 5D BF FD | 	call	#__system___gc_free
2ef28     00 20 0E F2 | 	cmp	local02, #0 wz
2ef2c     10 13 02 56 |  if_ne	mov	arg01, local02
2ef30     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0962
2ef34                 | '     return r;
2ef34     10 FB 01 F6 | 	mov	result1, local02
2ef38     A7 F0 03 F6 | 	mov	ptra, fp
2ef3c     B2 00 A0 FD | 	call	#popregs_
2ef40                 | _fatfs_cc_v_closedir_ret
2ef40     2D 00 64 FD | 	ret
2ef44                 | 
2ef44                 | _fatfs_cc_v_readdir
2ef44     01 4A 05 F6 | 	mov	COUNT_, #1
2ef48     A8 00 A0 FD | 	call	#pushregs_
2ef4c     2C F1 07 F1 | 	add	ptra, #300
2ef50     04 4E 05 F1 | 	add	fp, #4
2ef54     A7 12 62 FC | 	wrlong	arg01, fp
2ef58     04 4E 05 F1 | 	add	fp, #4
2ef5c     A7 14 62 FC | 	wrlong	arg02, fp
2ef60     04 4E 85 F1 | 	sub	fp, #4
2ef64     A7 16 02 FB | 	rdlong	arg03, fp
2ef68     04 16 06 F1 | 	add	arg03, #4
2ef6c     0B 13 02 FB | 	rdlong	arg01, arg03
2ef70     08 4E 05 F1 | 	add	fp, #8
2ef74     A7 14 02 F6 | 	mov	arg02, fp
2ef78     0C 4E 85 F1 | 	sub	fp, #12
2ef7c     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2ef80     28 4F 05 F1 | 	add	fp, #296
2ef84     A7 FA 61 FC | 	wrlong	result1, fp
2ef88     28 4F 85 F1 | 	sub	fp, #296
2ef8c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ef90     14 00 90 AD |  if_e	jmp	#LR__4730
2ef94                 | '         return _set_dos_error(r);
2ef94     28 4F 05 F1 | 	add	fp, #296
2ef98     A7 12 02 FB | 	rdlong	arg01, fp
2ef9c     28 4F 85 F1 | 	sub	fp, #296
2efa0     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2efa4     C4 00 90 FD | 	jmp	#LR__4733
2efa8                 | LR__4730
2efa8     28 4E 05 F1 | 	add	fp, #40
2efac     A7 16 CA FA | 	rdbyte	arg03, fp wz
2efb0     28 4E 85 F1 | 	sub	fp, #40
2efb4                 | '         return -1;
2efb4     01 FA 65 A6 |  if_e	neg	result1, #1
2efb8     B0 00 90 AD |  if_e	jmp	#LR__4733
2efbc     08 4E 05 F1 | 	add	fp, #8
2efc0     A7 12 02 FB | 	rdlong	arg01, fp
2efc4     20 4E 05 F1 | 	add	fp, #32
2efc8     A7 14 02 F6 | 	mov	arg02, fp
2efcc     28 4E 85 F1 | 	sub	fp, #40
2efd0     3F 16 06 F6 | 	mov	arg03, #63
2efd4     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2efd8     08 4E 05 F1 | 	add	fp, #8
2efdc     A7 16 02 FB | 	rdlong	arg03, fp
2efe0     3F 16 06 F1 | 	add	arg03, #63
2efe4     0B 01 48 FC | 	wrbyte	#0, arg03
2efe8     0C 4E 05 F1 | 	add	fp, #12
2efec     A7 16 C2 FA | 	rdbyte	arg03, fp
2eff0     14 4E 85 F1 | 	sub	fp, #20
2eff4     10 16 CE F7 | 	test	arg03, #16 wz
2eff8     18 00 90 AD |  if_e	jmp	#LR__4731
2effc     08 4E 05 F1 | 	add	fp, #8
2f000     A7 16 02 FB | 	rdlong	arg03, fp
2f004     08 4E 85 F1 | 	sub	fp, #8
2f008     50 16 06 F1 | 	add	arg03, #80
2f00c     0B 03 48 FC | 	wrbyte	#1, arg03
2f010     14 00 90 FD | 	jmp	#LR__4732
2f014                 | LR__4731
2f014     08 4E 05 F1 | 	add	fp, #8
2f018     A7 16 02 FB | 	rdlong	arg03, fp
2f01c     08 4E 85 F1 | 	sub	fp, #8
2f020     50 16 06 F1 | 	add	arg03, #80
2f024     0B 01 48 FC | 	wrbyte	#0, arg03
2f028                 | LR__4732
2f028     08 4E 05 F1 | 	add	fp, #8
2f02c     A7 16 02 FB | 	rdlong	arg03, fp
2f030     04 4E 05 F1 | 	add	fp, #4
2f034     A7 14 02 FB | 	rdlong	arg02, fp
2f038     48 16 06 F1 | 	add	arg03, #72
2f03c     0B 15 62 FC | 	wrlong	arg02, arg03
2f040     04 4E 85 F1 | 	sub	fp, #4
2f044     A7 1E 02 FB | 	rdlong	local01, fp
2f048     08 4E 05 F1 | 	add	fp, #8
2f04c     A7 12 E2 FA | 	rdword	arg01, fp
2f050     02 4E 05 F1 | 	add	fp, #2
2f054     A7 14 E2 FA | 	rdword	arg02, fp
2f058     12 4E 85 F1 | 	sub	fp, #18
2f05c     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0960
2f060     4C 1E 06 F1 | 	add	local01, #76
2f064     0F FB 61 FC | 	wrlong	result1, local01
2f068                 | '         ent->d_type =  (0) ;
2f068                 | '     }
2f068                 | '     ent->d_size = finfo.fsize;
2f068                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2f068                 | '     return 0;
2f068     00 FA 05 F6 | 	mov	result1, #0
2f06c                 | LR__4733
2f06c     A7 F0 03 F6 | 	mov	ptra, fp
2f070     B2 00 A0 FD | 	call	#popregs_
2f074                 | _fatfs_cc_v_readdir_ret
2f074     2D 00 64 FD | 	ret
2f078                 | 
2f078                 | _fatfs_cc_v_stat
2f078     03 4A 05 F6 | 	mov	COUNT_, #3
2f07c     A8 00 A0 FD | 	call	#pushregs_
2f080     30 F1 07 F1 | 	add	ptra, #304
2f084     04 4E 05 F1 | 	add	fp, #4
2f088     A7 12 62 FC | 	wrlong	arg01, fp
2f08c     04 4E 05 F1 | 	add	fp, #4
2f090     A7 14 62 FC | 	wrlong	arg02, fp
2f094     08 4E 85 F1 | 	sub	fp, #8
2f098     0A 13 02 F6 | 	mov	arg01, arg02
2f09c     00 14 06 F6 | 	mov	arg02, #0
2f0a0     30 16 06 F6 | 	mov	arg03, #48
2f0a4     98 00 A0 FD | 	call	#\builtin_bytefill_
2f0a8     04 4E 05 F1 | 	add	fp, #4
2f0ac     A7 FA 01 FB | 	rdlong	result1, fp
2f0b0     04 4E 85 F1 | 	sub	fp, #4
2f0b4     FD FA C9 FA | 	rdbyte	result1, result1 wz
2f0b8     2C 00 90 AD |  if_e	jmp	#LR__4740
2f0bc     04 4E 05 F1 | 	add	fp, #4
2f0c0     A7 FA 01 FB | 	rdlong	result1, fp
2f0c4     04 4E 85 F1 | 	sub	fp, #4
2f0c8     FD FA C1 FA | 	rdbyte	result1, result1
2f0cc     2E FA 0D F2 | 	cmp	result1, #46 wz
2f0d0     04 4E 05 A1 |  if_e	add	fp, #4
2f0d4     A7 1E 02 AB |  if_e	rdlong	local01, fp
2f0d8     04 4E 85 A1 |  if_e	sub	fp, #4
2f0dc     01 1E 06 A1 |  if_e	add	local01, #1
2f0e0     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2f0e4     18 00 90 5D |  if_ne	jmp	#LR__4741
2f0e8                 | LR__4740
2f0e8     18 4E 05 F1 | 	add	fp, #24
2f0ec     A7 20 48 FC | 	wrbyte	#16, fp
2f0f0     0C 4E 85 F1 | 	sub	fp, #12
2f0f4     A7 00 68 FC | 	wrlong	#0, fp
2f0f8     0C 4E 85 F1 | 	sub	fp, #12
2f0fc     24 00 90 FD | 	jmp	#LR__4742
2f100                 | LR__4741
2f100     04 4E 05 F1 | 	add	fp, #4
2f104     A7 12 02 FB | 	rdlong	arg01, fp
2f108     0C 4E 05 F1 | 	add	fp, #12
2f10c     A7 14 02 F6 | 	mov	arg02, fp
2f110     10 4E 85 F1 | 	sub	fp, #16
2f114     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2f118     0C 4E 05 F1 | 	add	fp, #12
2f11c     A7 FA 61 FC | 	wrlong	result1, fp
2f120     0C 4E 85 F1 | 	sub	fp, #12
2f124                 | LR__4742
2f124     0C 4E 05 F1 | 	add	fp, #12
2f128     A7 20 0A FB | 	rdlong	local02, fp wz
2f12c     0C 4E 85 F1 | 	sub	fp, #12
2f130     14 00 90 AD |  if_e	jmp	#LR__4743
2f134                 | '         return _set_dos_error(r);
2f134     0C 4E 05 F1 | 	add	fp, #12
2f138     A7 12 02 FB | 	rdlong	arg01, fp
2f13c     0C 4E 85 F1 | 	sub	fp, #12
2f140     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f144     14 01 90 FD | 	jmp	#LR__4744
2f148                 | LR__4743
2f148     2C 4F 05 F1 | 	add	fp, #300
2f14c     A7 48 6A FC | 	wrlong	#292, fp
2f150     14 4F 85 F1 | 	sub	fp, #276
2f154     A7 22 C2 FA | 	rdbyte	local03, fp
2f158     18 4E 85 F1 | 	sub	fp, #24
2f15c     01 22 CE F7 | 	test	local03, #1 wz
2f160     2C 4F 05 A1 |  if_e	add	fp, #300
2f164     A7 22 02 AB |  if_e	rdlong	local03, fp
2f168     92 22 46 A5 |  if_e	or	local03, #146
2f16c     A7 22 62 AC |  if_e	wrlong	local03, fp
2f170     2C 4F 85 A1 |  if_e	sub	fp, #300
2f174     18 4E 05 F1 | 	add	fp, #24
2f178     A7 22 C2 FA | 	rdbyte	local03, fp
2f17c     18 4E 85 F1 | 	sub	fp, #24
2f180     10 22 CE F7 | 	test	local03, #16 wz
2f184     2C 4F 05 51 |  if_ne	add	fp, #300
2f188     A7 22 02 5B |  if_ne	rdlong	local03, fp
2f18c     08 00 00 5F 
2f190     49 22 46 55 |  if_ne	or	local03, ##4169
2f194     A7 22 62 5C |  if_ne	wrlong	local03, fp
2f198     2C 4F 85 51 |  if_ne	sub	fp, #300
2f19c     08 4E 05 F1 | 	add	fp, #8
2f1a0     A7 22 02 FB | 	rdlong	local03, fp
2f1a4     24 4F 05 F1 | 	add	fp, #292
2f1a8     A7 20 02 FB | 	rdlong	local02, fp
2f1ac     08 22 06 F1 | 	add	local03, #8
2f1b0     11 21 62 FC | 	wrlong	local02, local03
2f1b4     24 4F 85 F1 | 	sub	fp, #292
2f1b8     A7 22 02 FB | 	rdlong	local03, fp
2f1bc     0C 22 06 F1 | 	add	local03, #12
2f1c0     11 03 68 FC | 	wrlong	#1, local03
2f1c4     A7 22 02 FB | 	rdlong	local03, fp
2f1c8     08 4E 05 F1 | 	add	fp, #8
2f1cc     A7 20 02 FB | 	rdlong	local02, fp
2f1d0     18 22 06 F1 | 	add	local03, #24
2f1d4     11 21 62 FC | 	wrlong	local02, local03
2f1d8     08 4E 85 F1 | 	sub	fp, #8
2f1dc     A7 22 02 FB | 	rdlong	local03, fp
2f1e0     1C 22 06 F1 | 	add	local03, #28
2f1e4     01 00 80 FF 
2f1e8     11 01 68 FC | 	wrlong	##512, local03
2f1ec     A7 20 02 FB | 	rdlong	local02, fp
2f1f0     10 23 02 F6 | 	mov	local03, local02
2f1f4     18 20 06 F1 | 	add	local02, #24
2f1f8     10 21 02 FB | 	rdlong	local02, local02
2f1fc     FF 21 06 F1 | 	add	local02, #511
2f200     10 21 52 F6 | 	abs	local02, local02 wc
2f204     09 20 46 F0 | 	shr	local02, #9
2f208     10 21 82 F6 | 	negc	local02, local02
2f20c     20 22 06 F1 | 	add	local03, #32
2f210     11 21 62 FC | 	wrlong	local02, local03
2f214     A7 20 02 FB | 	rdlong	local02, fp
2f218     10 23 02 F6 | 	mov	local03, local02
2f21c     10 1F 02 F6 | 	mov	local01, local02
2f220     0C 4E 05 F1 | 	add	fp, #12
2f224     A7 12 E2 FA | 	rdword	arg01, fp
2f228     02 4E 05 F1 | 	add	fp, #2
2f22c     A7 14 E2 FA | 	rdword	arg02, fp
2f230     16 4E 85 F1 | 	sub	fp, #22
2f234     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0960
2f238     2C 1E 06 F1 | 	add	local01, #44
2f23c     0F FB 61 FC | 	wrlong	result1, local01
2f240     28 20 06 F1 | 	add	local02, #40
2f244     10 FB 61 FC | 	wrlong	result1, local02
2f248     24 22 06 F1 | 	add	local03, #36
2f24c     11 FB 61 FC | 	wrlong	result1, local03
2f250                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2f250                 | '     }
2f250                 | '     buf->st_mode = mode;
2f250                 | '     buf->st_nlink = 1;
2f250                 | '     buf->st_size = finfo.fsize;
2f250                 | '     buf->st_blksize = 512;
2f250                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2f250                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2f250                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f250                 | '     return r;
2f250     0C 4E 05 F1 | 	add	fp, #12
2f254     A7 FA 01 FB | 	rdlong	result1, fp
2f258     0C 4E 85 F1 | 	sub	fp, #12
2f25c                 | LR__4744
2f25c     A7 F0 03 F6 | 	mov	ptra, fp
2f260     B2 00 A0 FD | 	call	#popregs_
2f264                 | _fatfs_cc_v_stat_ret
2f264     2D 00 64 FD | 	ret
2f268                 | 
2f268                 | _fatfs_cc_v_read
2f268     00 4A 05 F6 | 	mov	COUNT_, #0
2f26c     A8 00 A0 FD | 	call	#pushregs_
2f270     1C F0 07 F1 | 	add	ptra, #28
2f274     04 4E 05 F1 | 	add	fp, #4
2f278     A7 12 62 FC | 	wrlong	arg01, fp
2f27c     04 4E 05 F1 | 	add	fp, #4
2f280     A7 14 62 FC | 	wrlong	arg02, fp
2f284     04 4E 05 F1 | 	add	fp, #4
2f288     A7 16 62 FC | 	wrlong	arg03, fp
2f28c     08 4E 85 F1 | 	sub	fp, #8
2f290     A7 12 02 FB | 	rdlong	arg01, fp
2f294     09 13 0A FB | 	rdlong	arg01, arg01 wz
2f298     0C 4E 05 F1 | 	add	fp, #12
2f29c     A7 12 62 FC | 	wrlong	arg01, fp
2f2a0     10 4E 85 F1 | 	sub	fp, #16
2f2a4                 | '         return _seterror( 5 );
2f2a4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f2a8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f2ac     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f2b0     01 FA 65 A6 |  if_e	neg	result1, #1
2f2b4     B8 00 90 AD |  if_e	jmp	#LR__4752
2f2b8     10 4E 05 F1 | 	add	fp, #16
2f2bc     A7 12 02 FB | 	rdlong	arg01, fp
2f2c0     02 00 00 FF 
2f2c4     14 12 06 F1 | 	add	arg01, ##1044
2f2c8     08 4E 85 F1 | 	sub	fp, #8
2f2cc     A7 14 02 FB | 	rdlong	arg02, fp
2f2d0     04 4E 05 F1 | 	add	fp, #4
2f2d4     A7 16 02 FB | 	rdlong	arg03, fp
2f2d8     0C 4E 05 F1 | 	add	fp, #12
2f2dc     A7 18 02 F6 | 	mov	arg04, fp
2f2e0     18 4E 85 F1 | 	sub	fp, #24
2f2e4     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2f2e8     14 4E 05 F1 | 	add	fp, #20
2f2ec     A7 FA 61 FC | 	wrlong	result1, fp
2f2f0     14 4E 85 F1 | 	sub	fp, #20
2f2f4     00 FA 0D F2 | 	cmp	result1, #0 wz
2f2f8     34 00 90 AD |  if_e	jmp	#LR__4750
2f2fc     04 4E 05 F1 | 	add	fp, #4
2f300     A7 18 02 FB | 	rdlong	arg04, fp
2f304     0C 17 02 F6 | 	mov	arg03, arg04
2f308     08 18 06 F1 | 	add	arg04, #8
2f30c     0C 19 02 FB | 	rdlong	arg04, arg04
2f310     20 18 46 F5 | 	or	arg04, #32
2f314     08 16 06 F1 | 	add	arg03, #8
2f318     0B 19 62 FC | 	wrlong	arg04, arg03
2f31c                 | '         fil->state |=  (0x20) ;
2f31c                 | '         return _set_dos_error(r);
2f31c     10 4E 05 F1 | 	add	fp, #16
2f320     A7 12 02 FB | 	rdlong	arg01, fp
2f324     14 4E 85 F1 | 	sub	fp, #20
2f328     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f32c     40 00 90 FD | 	jmp	#LR__4752
2f330                 | LR__4750
2f330     18 4E 05 F1 | 	add	fp, #24
2f334     A7 FA 09 FB | 	rdlong	result1, fp wz
2f338     18 4E 85 F1 | 	sub	fp, #24
2f33c     24 00 90 5D |  if_ne	jmp	#LR__4751
2f340     04 4E 05 F1 | 	add	fp, #4
2f344     A7 FA 01 FB | 	rdlong	result1, fp
2f348     FD 18 02 F6 | 	mov	arg04, result1
2f34c     04 4E 85 F1 | 	sub	fp, #4
2f350     08 FA 05 F1 | 	add	result1, #8
2f354     FD FA 01 FB | 	rdlong	result1, result1
2f358     10 FA 45 F5 | 	or	result1, #16
2f35c     08 18 06 F1 | 	add	arg04, #8
2f360     0C FB 61 FC | 	wrlong	result1, arg04
2f364                 | LR__4751
2f364                 | '         fil->state |=  (0x10) ;
2f364                 | '     }
2f364                 | '     return x;
2f364     18 4E 05 F1 | 	add	fp, #24
2f368     A7 FA 01 FB | 	rdlong	result1, fp
2f36c     18 4E 85 F1 | 	sub	fp, #24
2f370                 | LR__4752
2f370     A7 F0 03 F6 | 	mov	ptra, fp
2f374     B2 00 A0 FD | 	call	#popregs_
2f378                 | _fatfs_cc_v_read_ret
2f378     2D 00 64 FD | 	ret
2f37c                 | 
2f37c                 | _fatfs_cc_v_write
2f37c     00 4A 05 F6 | 	mov	COUNT_, #0
2f380     A8 00 A0 FD | 	call	#pushregs_
2f384     1C F0 07 F1 | 	add	ptra, #28
2f388     04 4E 05 F1 | 	add	fp, #4
2f38c     A7 12 62 FC | 	wrlong	arg01, fp
2f390     04 4E 05 F1 | 	add	fp, #4
2f394     A7 14 62 FC | 	wrlong	arg02, fp
2f398     04 4E 05 F1 | 	add	fp, #4
2f39c     A7 16 62 FC | 	wrlong	arg03, fp
2f3a0     08 4E 85 F1 | 	sub	fp, #8
2f3a4     A7 12 02 FB | 	rdlong	arg01, fp
2f3a8     09 13 0A FB | 	rdlong	arg01, arg01 wz
2f3ac     0C 4E 05 F1 | 	add	fp, #12
2f3b0     A7 12 62 FC | 	wrlong	arg01, fp
2f3b4     10 4E 85 F1 | 	sub	fp, #16
2f3b8                 | '         return _seterror( 5 );
2f3b8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f3bc     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f3c0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f3c4     01 FA 65 A6 |  if_e	neg	result1, #1
2f3c8     84 00 90 AD |  if_e	jmp	#LR__4761
2f3cc     10 4E 05 F1 | 	add	fp, #16
2f3d0     A7 12 02 FB | 	rdlong	arg01, fp
2f3d4     02 00 00 FF 
2f3d8     14 12 06 F1 | 	add	arg01, ##1044
2f3dc     08 4E 85 F1 | 	sub	fp, #8
2f3e0     A7 14 02 FB | 	rdlong	arg02, fp
2f3e4     04 4E 05 F1 | 	add	fp, #4
2f3e8     A7 16 02 FB | 	rdlong	arg03, fp
2f3ec     0C 4E 05 F1 | 	add	fp, #12
2f3f0     A7 18 02 F6 | 	mov	arg04, fp
2f3f4     18 4E 85 F1 | 	sub	fp, #24
2f3f8     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2f3fc     14 4E 05 F1 | 	add	fp, #20
2f400     A7 FA 61 FC | 	wrlong	result1, fp
2f404     14 4E 85 F1 | 	sub	fp, #20
2f408     00 FA 0D F2 | 	cmp	result1, #0 wz
2f40c     34 00 90 AD |  if_e	jmp	#LR__4760
2f410     04 4E 05 F1 | 	add	fp, #4
2f414     A7 18 02 FB | 	rdlong	arg04, fp
2f418     0C 17 02 F6 | 	mov	arg03, arg04
2f41c     08 18 06 F1 | 	add	arg04, #8
2f420     0C 19 02 FB | 	rdlong	arg04, arg04
2f424     20 18 46 F5 | 	or	arg04, #32
2f428     08 16 06 F1 | 	add	arg03, #8
2f42c     0B 19 62 FC | 	wrlong	arg04, arg03
2f430                 | '         fil->state |=  (0x20) ;
2f430                 | '         return _set_dos_error(r);
2f430     10 4E 05 F1 | 	add	fp, #16
2f434     A7 12 02 FB | 	rdlong	arg01, fp
2f438     14 4E 85 F1 | 	sub	fp, #20
2f43c     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f440     0C 00 90 FD | 	jmp	#LR__4761
2f444                 | LR__4760
2f444                 | '     }
2f444                 | '     return x;
2f444     18 4E 05 F1 | 	add	fp, #24
2f448     A7 FA 01 FB | 	rdlong	result1, fp
2f44c     18 4E 85 F1 | 	sub	fp, #24
2f450                 | LR__4761
2f450     A7 F0 03 F6 | 	mov	ptra, fp
2f454     B2 00 A0 FD | 	call	#popregs_
2f458                 | _fatfs_cc_v_write_ret
2f458     2D 00 64 FD | 	ret
2f45c                 | 
2f45c                 | _fatfs_cc_v_lseek
2f45c     04 4A 05 F6 | 	mov	COUNT_, #4
2f460     A8 00 A0 FD | 	call	#pushregs_
2f464     0A 1F 02 F6 | 	mov	local01, arg02
2f468     0B 21 02 F6 | 	mov	local02, arg03
2f46c     09 23 02 FB | 	rdlong	local03, arg01
2f470     02 00 00 FF 
2f474     14 22 0E F1 | 	add	local03, ##1044 wz
2f478                 | '         return _seterror( 5 );
2f478     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f47c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f480     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f484     01 FA 65 A6 |  if_e	neg	result1, #1
2f488     4C 00 90 AD |  if_e	jmp	#LR__4772
2f48c     00 20 0E F2 | 	cmp	local02, #0 wz
2f490     24 00 90 AD |  if_e	jmp	#LR__4770
2f494     01 20 0E F2 | 	cmp	local02, #1 wz
2f498     14 22 06 A1 |  if_e	add	local03, #20
2f49c     11 25 02 AB |  if_e	rdlong	local04, local03
2f4a0     14 22 86 A1 |  if_e	sub	local03, #20
2f4a4     12 1F 02 A1 |  if_e	add	local01, local04
2f4a8     0C 22 06 51 |  if_ne	add	local03, #12
2f4ac     11 25 02 5B |  if_ne	rdlong	local04, local03
2f4b0     0C 22 86 51 |  if_ne	sub	local03, #12
2f4b4     12 1F 02 51 |  if_ne	add	local01, local04
2f4b8                 | LR__4770
2f4b8     0F 15 02 F6 | 	mov	arg02, local01
2f4bc     11 13 02 F6 | 	mov	arg01, local03
2f4c0     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2f4c4     FD 12 0A F6 | 	mov	arg01, result1 wz
2f4c8     08 00 90 AD |  if_e	jmp	#LR__4771
2f4cc                 | '         return _set_dos_error(result);
2f4cc     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f4d0     04 00 90 FD | 	jmp	#LR__4772
2f4d4                 | LR__4771
2f4d4                 | '     }
2f4d4                 | '     return offset;
2f4d4     0F FB 01 F6 | 	mov	result1, local01
2f4d8                 | LR__4772
2f4d8     A7 F0 03 F6 | 	mov	ptra, fp
2f4dc     B2 00 A0 FD | 	call	#popregs_
2f4e0                 | _fatfs_cc_v_lseek_ret
2f4e0     2D 00 64 FD | 	ret
2f4e4                 | 
2f4e4                 | _fatfs_cc_v_ioctl
2f4e4                 | ' {
2f4e4                 | '     return _seterror( 10 );
2f4e4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2f4e8     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2f4ec     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2f4f0     01 FA 65 F6 | 	neg	result1, #1
2f4f4                 | _fatfs_cc_v_ioctl_ret
2f4f4     2D 00 64 FD | 	ret
2f4f8                 | 
2f4f8                 | _fatfs_cc_v_mkdir
2f4f8     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2f4fc     FD 12 02 F6 | 	mov	arg01, result1
2f500                 | ' 
2f500                 | '     r = f_mkdir(name);
2f500                 | '     return _set_dos_error(r);
2f500     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f504                 | _fatfs_cc_v_mkdir_ret
2f504     2D 00 64 FD | 	ret
2f508                 | 
2f508                 | _fatfs_cc_v_remove
2f508     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2f50c     FD 12 02 F6 | 	mov	arg01, result1
2f510                 | ' 
2f510                 | '     r = f_unlink(name);
2f510                 | '     return _set_dos_error(r);
2f510     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f514                 | _fatfs_cc_v_remove_ret
2f514     2D 00 64 FD | 	ret
2f518                 | 
2f518                 | _fatfs_cc_v_rmdir
2f518     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2f51c     FD 12 02 F6 | 	mov	arg01, result1
2f520                 | ' 
2f520                 | '     r = f_unlink(name);
2f520                 | '     return _set_dos_error(r);
2f520     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f524                 | _fatfs_cc_v_rmdir_ret
2f524     2D 00 64 FD | 	ret
2f528                 | 
2f528                 | _fatfs_cc_v_rename
2f528     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2f52c     FD 12 02 F6 | 	mov	arg01, result1
2f530                 | '     return _set_dos_error(r);
2f530     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f534                 | _fatfs_cc_v_rename_ret
2f534     2D 00 64 FD | 	ret
2f538                 | 
2f538                 | _fatfs_cc_v_open
2f538     07 4A 05 F6 | 	mov	COUNT_, #7
2f53c     A8 00 A0 FD | 	call	#pushregs_
2f540     09 1F 02 F6 | 	mov	local01, arg01
2f544     0A 21 02 F6 | 	mov	local02, arg02
2f548     0B 23 02 F6 | 	mov	local03, arg03
2f54c     03 00 00 FF 
2f550     3C 12 06 F6 | 	mov	arg01, ##1596
2f554                 | '     return _gc_alloc(size);
2f554     10 14 06 F6 | 	mov	arg02, #16
2f558     9C 56 BF FD | 	call	#__system___gc_doalloc
2f55c     FD 24 0A F6 | 	mov	local04, result1 wz
2f560                 | '       return _seterror( 7 );
2f560     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f564     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2f568     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f56c     01 FA 65 A6 |  if_e	neg	result1, #1
2f570     98 00 90 AD |  if_e	jmp	#LR__4786
2f574     12 13 02 F6 | 	mov	arg01, local04
2f578     00 14 06 F6 | 	mov	arg02, #0
2f57c     03 00 00 FF 
2f580     3C 16 06 F6 | 	mov	arg03, ##1596
2f584     98 00 A0 FD | 	call	#\builtin_bytefill_
2f588                 | '   switch (flags & 3) {
2f588     11 27 02 F6 | 	mov	local05, local03
2f58c     03 26 0E F5 | 	and	local05, #3 wz
2f590     0C 00 90 AD |  if_e	jmp	#LR__4780
2f594     01 26 0E F2 | 	cmp	local05, #1 wz
2f598     0C 00 90 AD |  if_e	jmp	#LR__4781
2f59c     10 00 90 FD | 	jmp	#LR__4782
2f5a0                 | LR__4780
2f5a0     01 28 06 F6 | 	mov	local06, #1
2f5a4                 | '       fs_flags =  0x01 ;
2f5a4                 | '       break;
2f5a4     0C 00 90 FD | 	jmp	#LR__4783
2f5a8                 | LR__4781
2f5a8     02 28 06 F6 | 	mov	local06, #2
2f5ac                 | '       fs_flags =  0x02 ;
2f5ac                 | '       break;
2f5ac     04 00 90 FD | 	jmp	#LR__4783
2f5b0                 | LR__4782
2f5b0     03 28 06 F6 | 	mov	local06, #3
2f5b4                 | '       fs_flags =  0x01  |  0x02 ;
2f5b4                 | '       break;
2f5b4                 | LR__4783
2f5b4     08 22 CE F7 | 	test	local03, #8 wz
2f5b8     18 28 46 55 |  if_ne	or	local06, #24
2f5bc     08 00 90 5D |  if_ne	jmp	#LR__4784
2f5c0     20 22 CE F7 | 	test	local03, #32 wz
2f5c4     30 28 46 55 |  if_ne	or	local06, #48
2f5c8                 | LR__4784
2f5c8     02 00 00 FF 
2f5cc     14 24 06 F1 | 	add	local04, ##1044
2f5d0     12 13 02 F6 | 	mov	arg01, local04
2f5d4     02 00 00 FF 
2f5d8     14 24 86 F1 | 	sub	local04, ##1044
2f5dc     10 15 02 F6 | 	mov	arg02, local02
2f5e0     14 17 02 F6 | 	mov	arg03, local06
2f5e4     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2f5e8     FD 2A 0A F6 | 	mov	local07, result1 wz
2f5ec     14 00 90 AD |  if_e	jmp	#LR__4785
2f5f0     12 13 02 F6 | 	mov	arg01, local04
2f5f4                 | '     return _gc_free(ptr);
2f5f4     0C 57 BF FD | 	call	#__system___gc_free
2f5f8                 | '     free(f);
2f5f8                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f5f8                 | '     return _set_dos_error(r);
2f5f8     15 13 02 F6 | 	mov	arg01, local07
2f5fc     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f600     08 00 90 FD | 	jmp	#LR__4786
2f604                 | LR__4785
2f604     0F 25 62 FC | 	wrlong	local04, local01
2f608                 | '   }
2f608                 | '   fil->vfsdata = f;
2f608                 | '   return 0;
2f608     00 FA 05 F6 | 	mov	result1, #0
2f60c                 | LR__4786
2f60c     A7 F0 03 F6 | 	mov	ptra, fp
2f610     B2 00 A0 FD | 	call	#popregs_
2f614                 | _fatfs_cc_v_open_ret
2f614     2D 00 64 FD | 	ret
2f618                 | 
2f618                 | _fatfs_cc_v_flush
2f618     09 13 02 FB | 	rdlong	arg01, arg01
2f61c     02 00 00 FF 
2f620     14 12 0E F1 | 	add	arg01, ##1044 wz
2f624                 | '         return _seterror( 5 );
2f624     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f628     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2f62c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f630     01 FA 65 A6 |  if_e	neg	result1, #1
2f634     0C 00 90 AD |  if_e	jmp	#LR__4790
2f638     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2f63c     FD 12 02 F6 | 	mov	arg01, result1
2f640                 | '     }
2f640                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f640                 | '     result = f_sync(f);
2f640                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f640                 | '     return _set_dos_error(result);
2f640     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0962
2f644                 | LR__4790
2f644                 | _fatfs_cc_v_flush_ret
2f644     2D 00 64 FD | 	ret
2f648                 | 
2f648                 | _fatfs_cc_v_init
2f648                 | ' {
2f648                 | '     return 0;
2f648     00 FA 05 F6 | 	mov	result1, #0
2f64c                 | _fatfs_cc_v_init_ret
2f64c     2D 00 64 FD | 	ret
2f650                 | 
2f650                 | _fatfs_cc_v_deinit
2f650     82 01 00 FF 
2f654     C4 15 06 F6 | 	mov	arg02, ##@LR__4986
2f658     00 12 06 F6 | 	mov	arg01, #0
2f65c     00 16 06 F6 | 	mov	arg03, #0
2f660     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
2f664     01 00 00 FF 
2f668     08 E4 05 F1 | 	add	objptr, ##520
2f66c     F2 12 02 FB | 	rdlong	arg01, objptr
2f670     04 E4 05 F1 | 	add	objptr, #4
2f674     F2 14 02 FB | 	rdlong	arg02, objptr
2f678     01 00 00 FF 
2f67c     0C E4 85 F1 | 	sub	objptr, ##524
2f680     14 3E BF FD | 	call	#__system___freepins
2f684                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f684                 | '     _freepins(f_pinmask);
2f684                 | '     return 0;
2f684     00 FA 05 F6 | 	mov	result1, #0
2f688                 | _fatfs_cc_v_deinit_ret
2f688     2D 00 64 FD | 	ret
2f68c                 | 
2f68c                 | _fatfs_cc_get_vfs
2f68c     01 4A 05 F6 | 	mov	COUNT_, #1
2f690     A8 00 A0 FD | 	call	#pushregs_
2f694     09 1F 02 F6 | 	mov	local01, arg01
2f698     50 12 06 F6 | 	mov	arg01, #80
2f69c     28 55 BF FD | 	call	#__system___gc_alloc_managed
2f6a0     FD 12 02 F6 | 	mov	arg01, result1
2f6a4     F2 FA 01 F6 | 	mov	result1, objptr
2f6a8     00 E8 04 FF 
2f6ac     00 FA 45 F5 | 	or	result1, ##164626432
2f6b0     09 FB 61 FC | 	wrlong	result1, arg01
2f6b4     F2 FA 01 F6 | 	mov	result1, objptr
2f6b8     00 F0 04 FF 
2f6bc     00 FA 45 F5 | 	or	result1, ##165675008
2f6c0     04 12 06 F1 | 	add	arg01, #4
2f6c4     09 FB 61 FC | 	wrlong	result1, arg01
2f6c8     F2 FA 01 F6 | 	mov	result1, objptr
2f6cc     00 F8 04 FF 
2f6d0     00 FA 45 F5 | 	or	result1, ##166723584
2f6d4     04 12 06 F1 | 	add	arg01, #4
2f6d8     09 FB 61 FC | 	wrlong	result1, arg01
2f6dc     F2 FA 01 F6 | 	mov	result1, objptr
2f6e0     00 00 05 FF 
2f6e4     00 FA 45 F5 | 	or	result1, ##167772160
2f6e8     04 12 06 F1 | 	add	arg01, #4
2f6ec     09 FB 61 FC | 	wrlong	result1, arg01
2f6f0     F2 FA 01 F6 | 	mov	result1, objptr
2f6f4     00 08 05 FF 
2f6f8     00 FA 45 F5 | 	or	result1, ##168820736
2f6fc     04 12 06 F1 | 	add	arg01, #4
2f700     09 FB 61 FC | 	wrlong	result1, arg01
2f704     04 12 06 F1 | 	add	arg01, #4
2f708     09 01 68 FC | 	wrlong	#0, arg01
2f70c     04 12 06 F1 | 	add	arg01, #4
2f710     09 1F 62 FC | 	wrlong	local01, arg01
2f714     04 12 06 F1 | 	add	arg01, #4
2f718     09 01 68 FC | 	wrlong	#0, arg01
2f71c     F2 FA 01 F6 | 	mov	result1, objptr
2f720     00 10 05 FF 
2f724     00 FA 45 F5 | 	or	result1, ##169869312
2f728     04 12 06 F1 | 	add	arg01, #4
2f72c     09 FB 61 FC | 	wrlong	result1, arg01
2f730     F2 FA 01 F6 | 	mov	result1, objptr
2f734     00 18 05 FF 
2f738     00 FA 45 F5 | 	or	result1, ##170917888
2f73c     04 12 06 F1 | 	add	arg01, #4
2f740     09 FB 61 FC | 	wrlong	result1, arg01
2f744     F2 FA 01 F6 | 	mov	result1, objptr
2f748     00 20 05 FF 
2f74c     00 FA 45 F5 | 	or	result1, ##171966464
2f750     04 12 06 F1 | 	add	arg01, #4
2f754     09 FB 61 FC | 	wrlong	result1, arg01
2f758     F2 FA 01 F6 | 	mov	result1, objptr
2f75c     00 28 05 FF 
2f760     00 FA 45 F5 | 	or	result1, ##173015040
2f764     04 12 06 F1 | 	add	arg01, #4
2f768     09 FB 61 FC | 	wrlong	result1, arg01
2f76c     F2 FA 01 F6 | 	mov	result1, objptr
2f770     00 30 05 FF 
2f774     00 FA 45 F5 | 	or	result1, ##174063616
2f778     04 12 06 F1 | 	add	arg01, #4
2f77c     09 FB 61 FC | 	wrlong	result1, arg01
2f780     F2 FA 01 F6 | 	mov	result1, objptr
2f784     00 38 05 FF 
2f788     00 FA 45 F5 | 	or	result1, ##175112192
2f78c     04 12 06 F1 | 	add	arg01, #4
2f790     09 FB 61 FC | 	wrlong	result1, arg01
2f794     F2 FA 01 F6 | 	mov	result1, objptr
2f798     00 40 05 FF 
2f79c     00 FA 45 F5 | 	or	result1, ##176160768
2f7a0     04 12 06 F1 | 	add	arg01, #4
2f7a4     09 FB 61 FC | 	wrlong	result1, arg01
2f7a8     F2 FA 01 F6 | 	mov	result1, objptr
2f7ac     00 48 05 FF 
2f7b0     00 FA 45 F5 | 	or	result1, ##177209344
2f7b4     04 12 06 F1 | 	add	arg01, #4
2f7b8     09 FB 61 FC | 	wrlong	result1, arg01
2f7bc     F2 FA 01 F6 | 	mov	result1, objptr
2f7c0     00 50 05 FF 
2f7c4     00 FA 45 F5 | 	or	result1, ##178257920
2f7c8     04 12 06 F1 | 	add	arg01, #4
2f7cc     09 FB 61 FC | 	wrlong	result1, arg01
2f7d0     F2 FA 01 F6 | 	mov	result1, objptr
2f7d4     00 58 05 FF 
2f7d8     00 FA 45 F5 | 	or	result1, ##179306496
2f7dc     04 12 06 F1 | 	add	arg01, #4
2f7e0     09 FB 61 FC | 	wrlong	result1, arg01
2f7e4     F2 FA 01 F6 | 	mov	result1, objptr
2f7e8     00 60 05 FF 
2f7ec     00 FA 45 F5 | 	or	result1, ##180355072
2f7f0     04 12 06 F1 | 	add	arg01, #4
2f7f4     09 FB 61 FC | 	wrlong	result1, arg01
2f7f8     F2 FA 01 F6 | 	mov	result1, objptr
2f7fc     00 68 05 FF 
2f800     00 FA 45 F5 | 	or	result1, ##181403648
2f804     04 12 06 F1 | 	add	arg01, #4
2f808     09 FB 61 FC | 	wrlong	result1, arg01
2f80c     4C 12 86 F1 | 	sub	arg01, #76
2f810                 | ' 
2f810                 | '     v->close = &v_close;
2f810                 | '     v->read = &v_read;
2f810                 | '     v->write = &v_write;
2f810                 | '     v->lseek = &v_lseek;
2f810                 | '     v->ioctl = &v_ioctl;
2f810                 | '     v->flush = 0;
2f810                 | '     v->vfs_data = ptr;
2f810                 | '     v->reserved = 0;
2f810                 | ' 
2f810                 | '     v->open = &v_open;
2f810                 | '     v->creat = &v_creat;
2f810                 | '     v->opendir = &v_opendir;
2f810                 | '     v->closedir = &v_closedir;
2f810                 | '     v->readdir = &v_readdir;
2f810                 | '     v->stat = &v_stat;
2f810                 | ' 
2f810                 | '     v->mkdir = &v_mkdir;
2f810                 | '     v->rmdir = &v_rmdir;
2f810                 | ' 
2f810                 | '     v->remove = &v_remove;
2f810                 | '     v->rename = &v_rename;
2f810                 | ' 
2f810                 | '     v->init = &v_init;
2f810                 | '     v->deinit = &v_deinit;
2f810                 | ' 
2f810                 | '     return v;
2f810     09 FB 01 F6 | 	mov	result1, arg01
2f814     A7 F0 03 F6 | 	mov	ptra, fp
2f818     B2 00 A0 FD | 	call	#popregs_
2f81c                 | _fatfs_cc_get_vfs_ret
2f81c     2D 00 64 FD | 	ret
2f820                 | 
2f820                 | _fatfs_cc_xmit_mmc_1109
2f820     01 00 00 FF 
2f824     10 E4 05 F1 | 	add	objptr, ##528
2f828     F2 00 02 FB | 	rdlong	_var01, objptr
2f82c     08 E4 05 F1 | 	add	objptr, #8
2f830     F2 02 02 FB | 	rdlong	_var02, objptr
2f834     01 00 00 FF 
2f838     18 E4 85 F1 | 	sub	objptr, ##536
2f83c     40 02 62 FD | 	dirl	_var02
2f840     28 02 64 FD | 	setq	#1
2f844     09 05 02 FB | 	rdlong	_var03, arg01
2f848     69 04 62 FD | 	rev	_var03
2f84c     1B 04 FE F9 | 	movbyts	_var03, #27
2f850     01 05 22 FC | 	wypin	_var03, _var02
2f854     0A 05 02 F6 | 	mov	_var03, arg02
2f858     02 14 4E F0 | 	shr	arg02, #2 wz
2f85c     03 04 66 F0 | 	shl	_var03, #3
2f860     00 05 22 FC | 	wypin	_var03, _var01
2f864     41 02 62 FD | 	dirh	_var02
2f868     08 12 06 F1 | 	add	arg01, #8
2f86c     69 06 62 FD | 	rev	_var04
2f870     1B 06 FE F9 | 	movbyts	_var04, #27
2f874                 | LR__4800
2f874     01 07 22 5C |  if_ne	wypin	_var04, _var02
2f878     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2f87c     04 12 06 51 |  if_ne	add	arg01, #4
2f880     69 06 62 5D |  if_ne	rev	_var04
2f884     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
2f888                 | LR__4801
2f888     40 02 72 5D |  if_ne	testp	_var02 wc
2f88c     F8 FF 9F 1D |  if_a	jmp	#LR__4801
2f890     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4800
2f894                 | LR__4802
2f894     40 00 72 FD | 	testp	_var01 wc
2f898     F8 FF 9F 3D |  if_ae	jmp	#LR__4802
2f89c     40 02 62 FD | 	dirl	_var02
2f8a0     FF FF FF FF 
2f8a4     01 FF 2B FC | 	wypin	##-1, _var02
2f8a8     41 02 62 FD | 	dirh	_var02
2f8ac                 | _fatfs_cc_xmit_mmc_1109_ret
2f8ac     2D 00 64 FD | 	ret
2f8b0                 | 
2f8b0                 | _fatfs_cc_rcvr_mmc_1116
2f8b0     01 00 00 FF 
2f8b4     10 E4 05 F1 | 	add	objptr, ##528
2f8b8     F2 00 02 FB | 	rdlong	_var01, objptr
2f8bc     0C E4 05 F1 | 	add	objptr, #12
2f8c0     F2 02 02 FB | 	rdlong	_var02, objptr
2f8c4     01 00 00 FF 
2f8c8     1C E4 85 F1 | 	sub	objptr, ##540
2f8cc     01 03 08 FC | 	akpin	_var02
2f8d0     0A 05 0A F6 | 	mov	_var03, arg02 wz
2f8d4     02 04 4E F0 | 	shr	_var03, #2 wz
2f8d8     30 00 90 AD |  if_e	jmp	#LR__4812
2f8dc     02 07 02 F6 | 	mov	_var04, _var03
2f8e0     05 06 66 F0 | 	shl	_var04, #5
2f8e4     00 07 22 FC | 	wypin	_var04, _var01
2f8e8     01 7F 18 FC | 	wxpin	#63, _var02
2f8ec                 | LR__4810
2f8ec                 | LR__4811
2f8ec     40 02 72 FD | 	testp	_var02 wc
2f8f0     F8 FF 9F 3D |  if_ae	jmp	#LR__4811
2f8f4     01 07 8A FA | 	rdpin	_var04, _var02
2f8f8     69 06 62 FD | 	rev	_var04
2f8fc     1B 06 FE F9 | 	movbyts	_var04, #27
2f900     09 07 62 FC | 	wrlong	_var04, arg01
2f904     04 12 06 F1 | 	add	arg01, #4
2f908     F8 05 6E FB | 	djnz	_var03, #LR__4810
2f90c                 | LR__4812
2f90c     03 14 0E F5 | 	and	arg02, #3 wz
2f910     24 00 90 AD |  if_e	jmp	#LR__4815
2f914     01 4F 18 FC | 	wxpin	#39, _var02
2f918                 | LR__4813
2f918     00 11 28 FC | 	wypin	#8, _var01
2f91c                 | LR__4814
2f91c     40 02 72 FD | 	testp	_var02 wc
2f920     F8 FF 9F 3D |  if_ae	jmp	#LR__4814
2f924     01 07 8A FA | 	rdpin	_var04, _var02
2f928     69 06 62 FD | 	rev	_var04
2f92c     09 07 42 FC | 	wrbyte	_var04, arg01
2f930     01 12 06 F1 | 	add	arg01, #1
2f934     F8 15 6E FB | 	djnz	arg02, #LR__4813
2f938                 | LR__4815
2f938                 | _fatfs_cc_rcvr_mmc_1116_ret
2f938     2D 00 64 FD | 	ret
2f93c                 | 
2f93c                 | _fatfs_cc_wait_ready_1120
2f93c     01 4A 05 F6 | 	mov	COUNT_, #1
2f940     A8 00 A0 FD | 	call	#pushregs_
2f944     10 F0 07 F1 | 	add	ptra, #16
2f948     1A FA 61 FD | 	getct	result1
2f94c     08 4E 05 F1 | 	add	fp, #8
2f950     A7 FA 61 FC | 	wrlong	result1, fp
2f954     14 1E 06 FB | 	rdlong	local01, #20
2f958     01 1E 46 F0 | 	shr	local01, #1
2f95c     04 4E 05 F1 | 	add	fp, #4
2f960     A7 1E 62 FC | 	wrlong	local01, fp
2f964     0C 4E 85 F1 | 	sub	fp, #12
2f968                 | ' {
2f968                 | ' 	BYTE d;
2f968                 | ' 	UINT tmr, tmout;
2f968                 | ' 
2f968                 | ' 	tmr = _cnt();
2f968                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2f968                 | ' 	for(;;) {
2f968                 | LR__4820
2f968     04 4E 05 F1 | 	add	fp, #4
2f96c     A7 12 02 F6 | 	mov	arg01, fp
2f970     04 4E 85 F1 | 	sub	fp, #4
2f974     01 14 06 F6 | 	mov	arg02, #1
2f978     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2f97c     04 4E 05 F1 | 	add	fp, #4
2f980     A7 1E C2 FA | 	rdbyte	local01, fp
2f984     04 4E 85 F1 | 	sub	fp, #4
2f988     FF 1E 0E F2 | 	cmp	local01, #255 wz
2f98c     01 FA 05 A6 |  if_e	mov	result1, #1
2f990     28 00 90 AD |  if_e	jmp	#LR__4821
2f994     1A FA 61 FD | 	getct	result1
2f998     08 4E 05 F1 | 	add	fp, #8
2f99c     A7 1E 02 FB | 	rdlong	local01, fp
2f9a0     0F FB 81 F1 | 	sub	result1, local01
2f9a4     04 4E 05 F1 | 	add	fp, #4
2f9a8     A7 1E 02 FB | 	rdlong	local01, fp
2f9ac     0C 4E 85 F1 | 	sub	fp, #12
2f9b0     0F FB 11 F2 | 	cmp	result1, local01 wc
2f9b4     00 FA 05 36 |  if_ae	mov	result1, #0
2f9b8     AC FF 9F CD |  if_b	jmp	#LR__4820
2f9bc                 | LR__4821
2f9bc     A7 F0 03 F6 | 	mov	ptra, fp
2f9c0     B2 00 A0 FD | 	call	#popregs_
2f9c4                 | _fatfs_cc_wait_ready_1120_ret
2f9c4     2D 00 64 FD | 	ret
2f9c8                 | 
2f9c8                 | _fatfs_cc_deselect_1126
2f9c8     00 4A 05 F6 | 	mov	COUNT_, #0
2f9cc     A8 00 A0 FD | 	call	#pushregs_
2f9d0     14 F0 07 F1 | 	add	ptra, #20
2f9d4     01 00 00 FF 
2f9d8     14 E4 05 F1 | 	add	objptr, ##532
2f9dc     F2 14 02 FB | 	rdlong	arg02, objptr
2f9e0     04 4E 05 F1 | 	add	fp, #4
2f9e4     A7 14 62 FC | 	wrlong	arg02, fp
2f9e8     04 E4 85 F1 | 	sub	objptr, #4
2f9ec     F2 14 02 FB | 	rdlong	arg02, objptr
2f9f0     04 4E 05 F1 | 	add	fp, #4
2f9f4     A7 14 62 FC | 	wrlong	arg02, fp
2f9f8     08 E4 05 F1 | 	add	objptr, #8
2f9fc     F2 14 02 FB | 	rdlong	arg02, objptr
2fa00     04 4E 05 F1 | 	add	fp, #4
2fa04     A7 14 62 FC | 	wrlong	arg02, fp
2fa08     04 E4 05 F1 | 	add	objptr, #4
2fa0c     F2 14 02 FB | 	rdlong	arg02, objptr
2fa10     01 00 00 FF 
2fa14     1C E4 85 F1 | 	sub	objptr, ##540
2fa18     04 4E 05 F1 | 	add	fp, #4
2fa1c     A7 14 62 FC | 	wrlong	arg02, fp
2fa20     0C 4E 85 F1 | 	sub	fp, #12
2fa24     A7 12 02 FB | 	rdlong	arg01, fp
2fa28     04 4E 85 F1 | 	sub	fp, #4
2fa2c     59 12 62 FD | 	drvh	arg01
2fa30     1F 20 64 FD | 	waitx	#16
2fa34     A7 12 02 F6 | 	mov	arg01, fp
2fa38     01 14 06 F6 | 	mov	arg02, #1
2fa3c     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2fa40     A7 F0 03 F6 | 	mov	ptra, fp
2fa44     B2 00 A0 FD | 	call	#popregs_
2fa48                 | _fatfs_cc_deselect_1126_ret
2fa48     2D 00 64 FD | 	ret
2fa4c                 | 
2fa4c                 | _fatfs_cc_select_1130
2fa4c     00 4A 05 F6 | 	mov	COUNT_, #0
2fa50     A8 00 A0 FD | 	call	#pushregs_
2fa54     10 F0 07 F1 | 	add	ptra, #16
2fa58     01 00 00 FF 
2fa5c     14 E4 05 F1 | 	add	objptr, ##532
2fa60     F2 14 02 FB | 	rdlong	arg02, objptr
2fa64     08 4E 05 F1 | 	add	fp, #8
2fa68     A7 14 62 FC | 	wrlong	arg02, fp
2fa6c     08 E4 05 F1 | 	add	objptr, #8
2fa70     F2 12 02 FB | 	rdlong	arg01, objptr
2fa74     01 00 00 FF 
2fa78     1C E4 85 F1 | 	sub	objptr, ##540
2fa7c     04 4E 05 F1 | 	add	fp, #4
2fa80     A7 12 62 FC | 	wrlong	arg01, fp
2fa84     50 12 62 FD | 	fltl	arg01
2fa88     04 4E 85 F1 | 	sub	fp, #4
2fa8c     A7 12 02 FB | 	rdlong	arg01, fp
2fa90     58 12 62 FD | 	drvl	arg01
2fa94     1F 20 64 FD | 	waitx	#16
2fa98     04 4E 05 F1 | 	add	fp, #4
2fa9c     A7 12 02 FB | 	rdlong	arg01, fp
2faa0     41 12 62 FD | 	dirh	arg01
2faa4     08 4E 85 F1 | 	sub	fp, #8
2faa8     A7 12 02 F6 | 	mov	arg01, fp
2faac     04 4E 85 F1 | 	sub	fp, #4
2fab0     01 14 06 F6 | 	mov	arg02, #1
2fab4     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2fab8     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1120
2fabc     00 FA 0D F2 | 	cmp	result1, #0 wz
2fac0     01 FA 05 56 |  if_ne	mov	result1, #1
2fac4     08 00 90 5D |  if_ne	jmp	#LR__4830
2fac8     FC FE BF FD | 	call	#_fatfs_cc_deselect_1126
2facc                 | ' 
2facc                 | ' 	deselect();
2facc                 | ' 	return 0;
2facc     00 FA 05 F6 | 	mov	result1, #0
2fad0                 | LR__4830
2fad0     A7 F0 03 F6 | 	mov	ptra, fp
2fad4     B2 00 A0 FD | 	call	#popregs_
2fad8                 | _fatfs_cc_select_1130_ret
2fad8     2D 00 64 FD | 	ret
2fadc                 | 
2fadc                 | _fatfs_cc_rcvr_datablock_1134
2fadc     01 4A 05 F6 | 	mov	COUNT_, #1
2fae0     A8 00 A0 FD | 	call	#pushregs_
2fae4     18 F0 07 F1 | 	add	ptra, #24
2fae8     04 4E 05 F1 | 	add	fp, #4
2faec     A7 12 62 FC | 	wrlong	arg01, fp
2faf0     04 4E 05 F1 | 	add	fp, #4
2faf4     A7 14 62 FC | 	wrlong	arg02, fp
2faf8     1A FA 61 FD | 	getct	result1
2fafc     08 4E 05 F1 | 	add	fp, #8
2fb00     A7 FA 61 FC | 	wrlong	result1, fp
2fb04     14 1E 06 FB | 	rdlong	local01, #20
2fb08     03 1E 46 F0 | 	shr	local01, #3
2fb0c     04 4E 05 F1 | 	add	fp, #4
2fb10     A7 1E 62 FC | 	wrlong	local01, fp
2fb14     14 4E 85 F1 | 	sub	fp, #20
2fb18                 | ' 	BYTE *buff,
2fb18                 | ' 	UINT btr
2fb18                 | ' )
2fb18                 | ' {
2fb18                 | ' 	BYTE d[2];
2fb18                 | ' 	UINT tmr, tmout;
2fb18                 | ' 
2fb18                 | ' 	tmr = _cnt();
2fb18                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2fb18                 | ' 	for(;;) {
2fb18                 | LR__4840
2fb18     0C 4E 05 F1 | 	add	fp, #12
2fb1c     A7 12 02 F6 | 	mov	arg01, fp
2fb20     0C 4E 85 F1 | 	sub	fp, #12
2fb24     01 14 06 F6 | 	mov	arg02, #1
2fb28     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2fb2c     0C 4E 05 F1 | 	add	fp, #12
2fb30     A7 1E C2 FA | 	rdbyte	local01, fp
2fb34     0C 4E 85 F1 | 	sub	fp, #12
2fb38     FF 1E 0E F2 | 	cmp	local01, #255 wz
2fb3c     28 00 90 5D |  if_ne	jmp	#LR__4841
2fb40     1A FA 61 FD | 	getct	result1
2fb44     FD 1E 02 F6 | 	mov	local01, result1
2fb48     10 4E 05 F1 | 	add	fp, #16
2fb4c     A7 14 02 FB | 	rdlong	arg02, fp
2fb50     0A 1F 82 F1 | 	sub	local01, arg02
2fb54     04 4E 05 F1 | 	add	fp, #4
2fb58     A7 14 02 FB | 	rdlong	arg02, fp
2fb5c     14 4E 85 F1 | 	sub	fp, #20
2fb60     0A 1F 12 F2 | 	cmp	local01, arg02 wc
2fb64     B0 FF 9F CD |  if_b	jmp	#LR__4840
2fb68                 | LR__4841
2fb68     0C 4E 05 F1 | 	add	fp, #12
2fb6c     A7 1E C2 FA | 	rdbyte	local01, fp
2fb70     0C 4E 85 F1 | 	sub	fp, #12
2fb74     FE 1E 0E F2 | 	cmp	local01, #254 wz
2fb78     00 FA 05 56 |  if_ne	mov	result1, #0
2fb7c     30 00 90 5D |  if_ne	jmp	#LR__4842
2fb80     04 4E 05 F1 | 	add	fp, #4
2fb84     A7 12 02 FB | 	rdlong	arg01, fp
2fb88     04 4E 05 F1 | 	add	fp, #4
2fb8c     A7 14 02 FB | 	rdlong	arg02, fp
2fb90     08 4E 85 F1 | 	sub	fp, #8
2fb94     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2fb98     0C 4E 05 F1 | 	add	fp, #12
2fb9c     A7 12 02 F6 | 	mov	arg01, fp
2fba0     0C 4E 85 F1 | 	sub	fp, #12
2fba4     02 14 06 F6 | 	mov	arg02, #2
2fba8     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2fbac                 | ' 
2fbac                 | ' 	rcvr_mmc(buff, btr);
2fbac                 | ' 	rcvr_mmc(d, 2);
2fbac                 | ' 
2fbac                 | ' 	return 1;
2fbac     01 FA 05 F6 | 	mov	result1, #1
2fbb0                 | LR__4842
2fbb0     A7 F0 03 F6 | 	mov	ptra, fp
2fbb4     B2 00 A0 FD | 	call	#popregs_
2fbb8                 | _fatfs_cc_rcvr_datablock_1134_ret
2fbb8     2D 00 64 FD | 	ret
2fbbc                 | 
2fbbc                 | _fatfs_cc_xmit_datablock_1136
2fbbc     00 4A 05 F6 | 	mov	COUNT_, #0
2fbc0     A8 00 A0 FD | 	call	#pushregs_
2fbc4     10 F0 07 F1 | 	add	ptra, #16
2fbc8     04 4E 05 F1 | 	add	fp, #4
2fbcc     A7 12 62 FC | 	wrlong	arg01, fp
2fbd0     04 4E 05 F1 | 	add	fp, #4
2fbd4     A7 14 42 FC | 	wrbyte	arg02, fp
2fbd8     08 4E 85 F1 | 	sub	fp, #8
2fbdc     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1120
2fbe0     00 FA 0D F2 | 	cmp	result1, #0 wz
2fbe4     00 FA 05 A6 |  if_e	mov	result1, #0
2fbe8     90 00 90 AD |  if_e	jmp	#LR__4851
2fbec     08 4E 05 F1 | 	add	fp, #8
2fbf0     A7 14 C2 FA | 	rdbyte	arg02, fp
2fbf4     04 4E 05 F1 | 	add	fp, #4
2fbf8     A7 14 42 FC | 	wrbyte	arg02, fp
2fbfc     A7 12 02 F6 | 	mov	arg01, fp
2fc00     0C 4E 85 F1 | 	sub	fp, #12
2fc04     01 14 06 F6 | 	mov	arg02, #1
2fc08     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1109
2fc0c     08 4E 05 F1 | 	add	fp, #8
2fc10     A7 14 C2 FA | 	rdbyte	arg02, fp
2fc14     08 4E 85 F1 | 	sub	fp, #8
2fc18     FD 14 0E F2 | 	cmp	arg02, #253 wz
2fc1c     58 00 90 AD |  if_e	jmp	#LR__4850
2fc20     04 4E 05 F1 | 	add	fp, #4
2fc24     A7 12 02 FB | 	rdlong	arg01, fp
2fc28     04 4E 85 F1 | 	sub	fp, #4
2fc2c     09 14 C6 F9 | 	decod	arg02, #9
2fc30     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1109
2fc34     0C 4E 05 F1 | 	add	fp, #12
2fc38     A7 12 02 F6 | 	mov	arg01, fp
2fc3c     0C 4E 85 F1 | 	sub	fp, #12
2fc40     02 14 06 F6 | 	mov	arg02, #2
2fc44     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2fc48     0C 4E 05 F1 | 	add	fp, #12
2fc4c     A7 12 02 F6 | 	mov	arg01, fp
2fc50     0C 4E 85 F1 | 	sub	fp, #12
2fc54     01 14 06 F6 | 	mov	arg02, #1
2fc58     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2fc5c     0C 4E 05 F1 | 	add	fp, #12
2fc60     A7 14 C2 FA | 	rdbyte	arg02, fp
2fc64     0C 4E 85 F1 | 	sub	fp, #12
2fc68     1F 14 06 F5 | 	and	arg02, #31
2fc6c     05 14 0E F2 | 	cmp	arg02, #5 wz
2fc70                 | ' 			return 0;
2fc70     00 FA 05 56 |  if_ne	mov	result1, #0
2fc74     04 00 90 5D |  if_ne	jmp	#LR__4851
2fc78                 | LR__4850
2fc78                 | ' 	}
2fc78                 | ' 
2fc78                 | ' 	return 1;
2fc78     01 FA 05 F6 | 	mov	result1, #1
2fc7c                 | LR__4851
2fc7c     A7 F0 03 F6 | 	mov	ptra, fp
2fc80     B2 00 A0 FD | 	call	#popregs_
2fc84                 | _fatfs_cc_xmit_datablock_1136_ret
2fc84     2D 00 64 FD | 	ret
2fc88                 | 
2fc88                 | _fatfs_cc_send_cmd_1140
2fc88     01 4A 05 F6 | 	mov	COUNT_, #1
2fc8c     A8 00 A0 FD | 	call	#pushregs_
2fc90     1C F0 07 F1 | 	add	ptra, #28
2fc94                 | _fatfs_cc_send_cmd_1140_enter
2fc94     04 4E 05 F1 | 	add	fp, #4
2fc98     A7 12 42 FC | 	wrbyte	arg01, fp
2fc9c     04 4E 05 F1 | 	add	fp, #4
2fca0     A7 14 62 FC | 	wrlong	arg02, fp
2fca4     04 4E 85 F1 | 	sub	fp, #4
2fca8     A7 FA C1 FA | 	rdbyte	result1, fp
2fcac     04 4E 85 F1 | 	sub	fp, #4
2fcb0     80 FA CD F7 | 	test	result1, #128 wz
2fcb4     44 00 90 AD |  if_e	jmp	#LR__4860
2fcb8     04 4E 05 F1 | 	add	fp, #4
2fcbc     A7 14 C2 FA | 	rdbyte	arg02, fp
2fcc0     7F 14 06 F5 | 	and	arg02, #127
2fcc4     A7 14 42 FC | 	wrbyte	arg02, fp
2fcc8     04 4E 85 F1 | 	sub	fp, #4
2fccc     37 12 06 F6 | 	mov	arg01, #55
2fcd0     00 14 06 F6 | 	mov	arg02, #0
2fcd4     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1140
2fcd8     0C 4E 05 F1 | 	add	fp, #12
2fcdc     A7 FA 41 FC | 	wrbyte	result1, fp
2fce0     A7 14 C2 FA | 	rdbyte	arg02, fp
2fce4     0C 4E 85 F1 | 	sub	fp, #12
2fce8     02 14 16 F2 | 	cmp	arg02, #2 wc
2fcec     0C 4E 05 31 |  if_ae	add	fp, #12
2fcf0     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
2fcf4     0C 4E 85 31 |  if_ae	sub	fp, #12
2fcf8     6C 01 90 3D |  if_ae	jmp	#LR__4864
2fcfc                 | LR__4860
2fcfc     04 4E 05 F1 | 	add	fp, #4
2fd00     A7 14 C2 FA | 	rdbyte	arg02, fp
2fd04     04 4E 85 F1 | 	sub	fp, #4
2fd08     0C 14 0E F2 | 	cmp	arg02, #12 wz
2fd0c     14 00 90 AD |  if_e	jmp	#LR__4861
2fd10     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1126
2fd14     34 FD BF FD | 	call	#_fatfs_cc_select_1130
2fd18     00 FA 0D F2 | 	cmp	result1, #0 wz
2fd1c     FF FA 05 A6 |  if_e	mov	result1, #255
2fd20     44 01 90 AD |  if_e	jmp	#LR__4864
2fd24                 | LR__4861
2fd24     04 4E 05 F1 | 	add	fp, #4
2fd28     A7 14 C2 FA | 	rdbyte	arg02, fp
2fd2c     40 FA 05 F6 | 	mov	result1, #64
2fd30     0A FB 41 F5 | 	or	result1, arg02
2fd34     10 4E 05 F1 | 	add	fp, #16
2fd38     A7 FA 41 FC | 	wrbyte	result1, fp
2fd3c     0C 4E 85 F1 | 	sub	fp, #12
2fd40     A7 FA 01 FB | 	rdlong	result1, fp
2fd44     18 FA 45 F0 | 	shr	result1, #24
2fd48     0D 4E 05 F1 | 	add	fp, #13
2fd4c     A7 FA 41 FC | 	wrbyte	result1, fp
2fd50     0D 4E 85 F1 | 	sub	fp, #13
2fd54     A7 FA 01 FB | 	rdlong	result1, fp
2fd58     10 FA 45 F0 | 	shr	result1, #16
2fd5c     0E 4E 05 F1 | 	add	fp, #14
2fd60     A7 FA 41 FC | 	wrbyte	result1, fp
2fd64     0E 4E 85 F1 | 	sub	fp, #14
2fd68     A7 FA 01 FB | 	rdlong	result1, fp
2fd6c     08 FA 45 F0 | 	shr	result1, #8
2fd70     0F 4E 05 F1 | 	add	fp, #15
2fd74     A7 FA 41 FC | 	wrbyte	result1, fp
2fd78     0F 4E 85 F1 | 	sub	fp, #15
2fd7c     A7 FA 01 FB | 	rdlong	result1, fp
2fd80     10 4E 05 F1 | 	add	fp, #16
2fd84     A7 FA 41 FC | 	wrbyte	result1, fp
2fd88     0C 4E 85 F1 | 	sub	fp, #12
2fd8c     A7 02 48 FC | 	wrbyte	#1, fp
2fd90     08 4E 85 F1 | 	sub	fp, #8
2fd94     A7 FA C9 FA | 	rdbyte	result1, fp wz
2fd98     04 4E 85 F1 | 	sub	fp, #4
2fd9c     0C 4E 05 A1 |  if_e	add	fp, #12
2fda0     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2fda4     0C 4E 85 A1 |  if_e	sub	fp, #12
2fda8     04 4E 05 F1 | 	add	fp, #4
2fdac     A7 FA C1 FA | 	rdbyte	result1, fp
2fdb0     04 4E 85 F1 | 	sub	fp, #4
2fdb4     08 FA 0D F2 | 	cmp	result1, #8 wz
2fdb8     0C 4E 05 A1 |  if_e	add	fp, #12
2fdbc     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2fdc0     0C 4E 85 A1 |  if_e	sub	fp, #12
2fdc4     0C 4E 05 F1 | 	add	fp, #12
2fdc8     A7 14 C2 FA | 	rdbyte	arg02, fp
2fdcc     0D 4E 05 F1 | 	add	fp, #13
2fdd0     A7 14 42 FC | 	wrbyte	arg02, fp
2fdd4     05 4E 85 F1 | 	sub	fp, #5
2fdd8     A7 12 02 F6 | 	mov	arg01, fp
2fddc     14 4E 85 F1 | 	sub	fp, #20
2fde0     06 14 06 F6 | 	mov	arg02, #6
2fde4     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1109
2fde8     04 4E 05 F1 | 	add	fp, #4
2fdec     A7 1E C2 FA | 	rdbyte	local01, fp
2fdf0     04 4E 85 F1 | 	sub	fp, #4
2fdf4     0C 1E 0E F2 | 	cmp	local01, #12 wz
2fdf8     10 4E 05 A1 |  if_e	add	fp, #16
2fdfc     A7 12 02 A6 |  if_e	mov	arg01, fp
2fe00     10 4E 85 A1 |  if_e	sub	fp, #16
2fe04     01 14 06 A6 |  if_e	mov	arg02, #1
2fe08     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1116
2fe0c     0C 4E 05 F1 | 	add	fp, #12
2fe10     A7 14 48 FC | 	wrbyte	#10, fp
2fe14     0C 4E 85 F1 | 	sub	fp, #12
2fe18                 | ' 	n = 10;
2fe18                 | ' 	do
2fe18                 | LR__4862
2fe18     10 4E 05 F1 | 	add	fp, #16
2fe1c     A7 12 02 F6 | 	mov	arg01, fp
2fe20     10 4E 85 F1 | 	sub	fp, #16
2fe24     01 14 06 F6 | 	mov	arg02, #1
2fe28     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1116
2fe2c     10 4E 05 F1 | 	add	fp, #16
2fe30     A7 1E C2 FA | 	rdbyte	local01, fp
2fe34     10 4E 85 F1 | 	sub	fp, #16
2fe38     80 1E CE F7 | 	test	local01, #128 wz
2fe3c     1C 00 90 AD |  if_e	jmp	#LR__4863
2fe40     0C 4E 05 F1 | 	add	fp, #12
2fe44     A7 1E C2 FA | 	rdbyte	local01, fp
2fe48     01 1E 86 F1 | 	sub	local01, #1
2fe4c     A7 1E 42 FC | 	wrbyte	local01, fp
2fe50     A7 1E CA FA | 	rdbyte	local01, fp wz
2fe54     0C 4E 85 F1 | 	sub	fp, #12
2fe58     BC FF 9F 5D |  if_ne	jmp	#LR__4862
2fe5c                 | LR__4863
2fe5c                 | ' 
2fe5c                 | ' 	return d;
2fe5c     10 4E 05 F1 | 	add	fp, #16
2fe60     A7 FA C1 FA | 	rdbyte	result1, fp
2fe64     10 4E 85 F1 | 	sub	fp, #16
2fe68                 | LR__4864
2fe68     A7 F0 03 F6 | 	mov	ptra, fp
2fe6c     B2 00 A0 FD | 	call	#popregs_
2fe70                 | _fatfs_cc_send_cmd_1140_ret
2fe70     2D 00 64 FD | 	ret
2fe74                 | 
2fe74                 | _fatfs_cc_disk_deinitialize
2fe74     03 4A 05 F6 | 	mov	COUNT_, #3
2fe78     A8 00 A0 FD | 	call	#pushregs_
2fe7c     00 12 4E F2 | 	cmps	arg01, #0 wz
2fe80     01 00 00 FF 
2fe84     14 E4 05 F1 | 	add	objptr, ##532
2fe88     F2 12 02 FB | 	rdlong	arg01, objptr
2fe8c     04 E4 85 F1 | 	sub	objptr, #4
2fe90     F2 1E 02 FB | 	rdlong	local01, objptr
2fe94     08 E4 05 F1 | 	add	objptr, #8
2fe98     F2 20 02 FB | 	rdlong	local02, objptr
2fe9c     04 E4 05 F1 | 	add	objptr, #4
2fea0     F2 22 02 FB | 	rdlong	local03, objptr
2fea4     01 00 00 FF 
2fea8     1C E4 85 F1 | 	sub	objptr, ##540
2feac                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2feac                 | '         return RES_NOTRDY;
2feac     03 FA 05 56 |  if_ne	mov	result1, #3
2feb0     2C 00 90 5D |  if_ne	jmp	#LR__4870
2feb4     50 12 62 FD | 	fltl	arg01
2feb8     09 01 08 FC | 	wrpin	#0, arg01
2febc     50 1E 62 FD | 	fltl	local01
2fec0     0F 01 08 FC | 	wrpin	#0, local01
2fec4     50 20 62 FD | 	fltl	local02
2fec8     10 01 08 FC | 	wrpin	#0, local02
2fecc     50 22 62 FD | 	fltl	local03
2fed0     11 01 08 FC | 	wrpin	#0, local03
2fed4     0A 12 06 F6 | 	mov	arg01, #10
2fed8     28 11 BF FD | 	call	#__system___waitms
2fedc                 | '     }
2fedc                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2fedc                 | '     _pinclear(PIN_SS);
2fedc                 | '     _pinclear(PIN_CLK);
2fedc                 | '     _pinclear(PIN_DI);
2fedc                 | '     _pinclear(PIN_DO);
2fedc                 | ' 
2fedc                 | '     _waitms(10);
2fedc                 | ' 
2fedc                 | '     return 0;
2fedc     00 FA 05 F6 | 	mov	result1, #0
2fee0                 | LR__4870
2fee0     A7 F0 03 F6 | 	mov	ptra, fp
2fee4     B2 00 A0 FD | 	call	#popregs_
2fee8                 | _fatfs_cc_disk_deinitialize_ret
2fee8     2D 00 64 FD | 	ret
2feec                 | 
2feec                 | _fatfs_cc_gettimeofday
2feec     04 4A 05 F6 | 	mov	COUNT_, #4
2fef0     A8 00 A0 FD | 	call	#pushregs_
2fef4     09 1F 02 F6 | 	mov	local01, arg01
2fef8     E4 0C BF FD | 	call	#__system___getus
2fefc     FD 12 02 F6 | 	mov	arg01, result1
2ff00     02 00 00 FF 
2ff04     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
2ff08     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
2ff0c     09 FB 01 F6 | 	mov	result1, arg01
2ff10     10 FB 81 F1 | 	sub	result1, local02
2ff14     A1 07 00 FF 
2ff18     40 FA 15 FD | 	qdiv	result1, ##1000000
2ff1c     02 00 00 FF 
2ff20     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2ff24     18 20 62 FD | 	getqx	local02
2ff28     A1 07 00 FF 
2ff2c     40 FA 15 FD | 	qdiv	result1, ##1000000
2ff30     00 20 0E F2 | 	cmp	local02, #0 wz
2ff34     19 22 62 FD | 	getqy	local03
2ff38     28 00 90 AD |  if_e	jmp	#LR__4880
2ff3c     02 00 00 FF 
2ff40     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2ff44     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2ff48     10 25 02 F1 | 	add	local04, local02
2ff4c     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2ff50     11 13 82 F1 | 	sub	arg01, local03
2ff54     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
2ff58     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
2ff5c     02 00 00 FF 
2ff60     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2ff64                 | LR__4880
2ff64     02 00 00 FF 
2ff68     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2ff6c     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2ff70     02 00 00 FF 
2ff74     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
2ff78     0F 25 62 FC | 	wrlong	local04, local01
2ff7c     04 1E 06 F1 | 	add	local01, #4
2ff80     0F 23 62 FC | 	wrlong	local03, local01
2ff84                 | '         lastsec += secs;
2ff84                 | '         lastus = now - leftover;
2ff84                 | '     }
2ff84                 | '     tv->tv_sec = lastsec;
2ff84                 | '     tv->tv_usec = leftover;
2ff84                 | '     return 0;
2ff84     00 FA 05 F6 | 	mov	result1, #0
2ff88     A7 F0 03 F6 | 	mov	ptra, fp
2ff8c     B2 00 A0 FD | 	call	#popregs_
2ff90                 | _fatfs_cc_gettimeofday_ret
2ff90     2D 00 64 FD | 	ret
2ff94                 | 
2ff94                 | _fatfs_cc__is_leap_year
2ff94     09 FB 51 F6 | 	abs	result1, arg01 wc
2ff98     03 FA 05 F5 | 	and	result1, #3
2ff9c     FD FA 89 F6 | 	negc	result1, result1 wz
2ffa0     38 00 90 5D |  if_ne	jmp	#LR__4891
2ffa4     09 FB 51 F6 | 	abs	result1, arg01 wc
2ffa8     64 FA 15 FD | 	qdiv	result1, #100
2ffac     19 FA 61 FD | 	getqy	result1
2ffb0     FD FA 89 F6 | 	negc	result1, result1 wz
2ffb4     1C 00 90 5D |  if_ne	jmp	#LR__4890
2ffb8     09 FB 51 F6 | 	abs	result1, arg01 wc
2ffbc     90 FB 15 FD | 	qdiv	result1, #400
2ffc0                 | '       return (0 == y % 400);
2ffc0     00 FA 05 F6 | 	mov	result1, #0
2ffc4     19 00 62 FD | 	getqy	_var01
2ffc8     00 01 8A F6 | 	negc	_var01, _var01 wz
2ffcc     01 FA 05 A6 |  if_e	mov	result1, #1
2ffd0     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2ffd4                 | LR__4890
2ffd4                 | '     return 1;
2ffd4     01 FA 05 F6 | 	mov	result1, #1
2ffd8     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2ffdc                 | LR__4891
2ffdc                 | '   }
2ffdc                 | '   return 0;
2ffdc     00 FA 05 F6 | 	mov	result1, #0
2ffe0                 | _fatfs_cc__is_leap_year_ret
2ffe0     2D 00 64 FD | 	ret
2ffe4                 | 
2ffe4                 | _fatfs_cc___tzoffset
2ffe4     09 01 0A F6 | 	mov	_var01, arg01 wz
2ffe8     FF FF FF FF 
2ffec     0A FF 6B FC | 	wrlong	##-1, arg02
2fff0     01 02 06 F6 | 	mov	_var02, #1
2fff4     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
2fff8                 | '                 return 0;
2fff8     00 FA 05 A6 |  if_e	mov	result1, #0
2fffc     94 02 90 AD |  if_e	jmp	#LR__4917
30000     0A 01 68 FC | 	wrlong	#0, arg02
30004     02 00 00 FF 
30008     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
3000c     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
30010                 | ' 
30010                 | '        *hasdst = 0;
30010                 | ' 
30010                 | ' 	n = stdname;
30010                 | '         while (*s && isalpha(*s)) {
30010     02 00 00 FF 
30014     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
30018     97 28 48 FB | 	callpa	#(@LR__4901-@LR__4900)>>2,fcache_load_ptr_
3001c                 | LR__4900
3001c     00 05 CA FA | 	rdbyte	_var03, _var01 wz
30020     48 00 90 AD |  if_e	jmp	#LR__4902
30024     00 13 C2 FA | 	rdbyte	arg01, _var01
30028                 | ' {
30028                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
30028     80 12 36 F3 | 	fle	arg01, #128 wc
3002c                 | '     return __ctype[c];
3002c     02 00 00 FF 
30030     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
30034     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
30038     09 FB C1 FA | 	rdbyte	result1, arg01
3003c     02 00 00 FF 
30040     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
30044     0C FA CD F7 | 	test	result1, #12 wz
30048     20 00 90 AD |  if_e	jmp	#LR__4902
3004c     00 09 02 F6 | 	mov	_var05, _var01
30050     00 0B 02 F6 | 	mov	_var06, _var01
30054     01 0A 06 F1 | 	add	_var06, #1
30058     04 0D C2 FA | 	rdbyte	_var07, _var05
3005c     05 01 02 F6 | 	mov	_var01, _var06
30060     03 0D 42 FC | 	wrbyte	_var07, _var04
30064     01 06 06 F1 | 	add	_var04, #1
30068     B0 FF 9F FD | 	jmp	#LR__4900
3006c                 | LR__4901
3006c                 | LR__4902
3006c     03 01 48 FC | 	wrbyte	#0, _var04
30070     00 0E 06 F6 | 	mov	_var08, #0
30074     00 05 C2 FA | 	rdbyte	_var03, _var01
30078     2D 04 0E F2 | 	cmp	_var03, #45 wz
3007c     01 02 66 A6 |  if_e	neg	_var02, #1
30080     01 00 06 A1 |  if_e	add	_var01, #1
30084     97 28 48 FB | 	callpa	#(@LR__4904-@LR__4903)>>2,fcache_load_ptr_
30088                 | '                 sgn = -1;
30088                 | '                 s++;
30088                 | '         }
30088                 | '         while (isdigit(*s)) {
30088                 | LR__4903
30088     00 13 C2 FA | 	rdbyte	arg01, _var01
3008c                 | ' {
3008c                 | '   return  (__ctype_get(c) & 0x02 ) ;
3008c     80 12 36 F3 | 	fle	arg01, #128 wc
30090                 | '     return __ctype[c];
30090     02 00 00 FF 
30094     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
30098     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
3009c     09 FB C1 FA | 	rdbyte	result1, arg01
300a0     02 00 00 FF 
300a4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
300a8     02 FA CD F7 | 	test	result1, #2 wz
300ac     28 00 90 AD |  if_e	jmp	#LR__4905
300b0     07 05 02 F6 | 	mov	_var03, _var08
300b4     02 04 66 F0 | 	shl	_var03, #2
300b8     07 05 02 F1 | 	add	_var03, _var08
300bc     01 04 66 F0 | 	shl	_var03, #1
300c0     00 09 C2 FA | 	rdbyte	_var05, _var01
300c4     30 08 86 F1 | 	sub	_var05, #48
300c8     04 05 02 F1 | 	add	_var03, _var05
300cc     02 0F 02 F6 | 	mov	_var08, _var03
300d0     01 00 06 F1 | 	add	_var01, #1
300d4     B0 FF 9F FD | 	jmp	#LR__4903
300d8                 | LR__4904
300d8                 | LR__4905
300d8     07 00 00 FF 
300dc     10 0E 06 FD | 	qmul	_var08, ##3600
300e0     00 05 C2 FA | 	rdbyte	_var03, _var01
300e4     3A 04 0E F2 | 	cmp	_var03, #58 wz
300e8     18 10 62 FD | 	getqx	_var09
300ec     70 00 90 5D |  if_ne	jmp	#LR__4909
300f0     00 0E 06 F6 | 	mov	_var08, #0
300f4     01 00 06 F1 | 	add	_var01, #1
300f8     97 28 48 FB | 	callpa	#(@LR__4907-@LR__4906)>>2,fcache_load_ptr_
300fc                 | '                 x = 0;
300fc                 | '                 s++;
300fc                 | '                 while (isdigit(*s)) {
300fc                 | LR__4906
300fc     00 13 C2 FA | 	rdbyte	arg01, _var01
30100                 | ' {
30100                 | '   return  (__ctype_get(c) & 0x02 ) ;
30100     80 12 36 F3 | 	fle	arg01, #128 wc
30104                 | '     return __ctype[c];
30104     02 00 00 FF 
30108     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
3010c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
30110     09 FB C1 FA | 	rdbyte	result1, arg01
30114     02 00 00 FF 
30118     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
3011c     02 FA CD F7 | 	test	result1, #2 wz
30120     28 00 90 AD |  if_e	jmp	#LR__4908
30124     07 05 02 F6 | 	mov	_var03, _var08
30128     02 04 66 F0 | 	shl	_var03, #2
3012c     07 05 02 F1 | 	add	_var03, _var08
30130     01 04 66 F0 | 	shl	_var03, #1
30134     00 09 C2 FA | 	rdbyte	_var05, _var01
30138     30 08 86 F1 | 	sub	_var05, #48
3013c     04 05 02 F1 | 	add	_var03, _var05
30140     02 0F 02 F6 | 	mov	_var08, _var03
30144     01 00 06 F1 | 	add	_var01, #1
30148     B0 FF 9F FD | 	jmp	#LR__4906
3014c                 | LR__4907
3014c                 | LR__4908
3014c     07 0D 02 F6 | 	mov	_var07, _var08
30150     04 0C 66 F0 | 	shl	_var07, #4
30154     07 0D 82 F1 | 	sub	_var07, _var08
30158     02 0C 66 F0 | 	shl	_var07, #2
3015c     06 11 02 F1 | 	add	_var09, _var07
30160                 | LR__4909
30160     02 00 00 FF 
30164     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
30168     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
3016c     00 13 C2 FA | 	rdbyte	arg01, _var01
30170                 | ' {
30170                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
30170     80 12 36 F3 | 	fle	arg01, #128 wc
30174                 | '     return __ctype[c];
30174     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
30178     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
3017c     09 FB C1 FA | 	rdbyte	result1, arg01
30180     02 00 00 FF 
30184     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
30188     0C FA CD F7 | 	test	result1, #12 wz
3018c     50 00 90 AD |  if_e	jmp	#LR__4912
30190     0A 03 68 FC | 	wrlong	#1, arg02
30194                 | '                 *hasdst = 1;
30194                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
30194                 | LR__4910
30194     00 05 CA FA | 	rdbyte	_var03, _var01 wz
30198     44 00 90 AD |  if_e	jmp	#LR__4911
3019c     00 13 C2 FA | 	rdbyte	arg01, _var01
301a0                 | ' {
301a0                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
301a0     80 12 36 F3 | 	fle	arg01, #128 wc
301a4                 | '     return __ctype[c];
301a4     02 00 00 FF 
301a8     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
301ac     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
301b0     09 FB C1 FA | 	rdbyte	result1, arg01
301b4     02 00 00 FF 
301b8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
301bc     0C FA CD F7 | 	test	result1, #12 wz
301c0     1C 00 90 AD |  if_e	jmp	#LR__4911
301c4     00 0B 02 F6 | 	mov	_var06, _var01
301c8     01 0A 06 F1 | 	add	_var06, #1
301cc     00 0D C2 FA | 	rdbyte	_var07, _var01
301d0     05 01 02 F6 | 	mov	_var01, _var06
301d4     03 0D 42 FC | 	wrbyte	_var07, _var04
301d8     01 06 06 F1 | 	add	_var04, #1
301dc     B4 FF 9F FD | 	jmp	#LR__4910
301e0                 | LR__4911
301e0                 | LR__4912
301e0     03 01 48 FC | 	wrbyte	#0, _var04
301e4     02 00 00 FF 
301e8     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
301ec     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
301f0     02 00 00 FF 
301f4     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
301f8     20 00 90 AD |  if_e	jmp	#LR__4913
301fc     02 00 00 FF 
30200     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
30204     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
30208     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
3020c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
30210     02 00 00 FF 
30214     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
30218     1C 00 90 FD | 	jmp	#LR__4914
3021c                 | LR__4913
3021c     02 00 00 FF 
30220     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
30224     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
30228     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
3022c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
30230     02 00 00 FF 
30234     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
30238                 | LR__4914
30238     02 00 00 FF 
3023c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
30240     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
30244     02 00 00 FF 
30248     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
3024c     20 00 90 AD |  if_e	jmp	#LR__4915
30250     02 00 00 FF 
30254     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
30258     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
3025c     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
30260     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
30264     02 00 00 FF 
30268     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
3026c     1C 00 90 FD | 	jmp	#LR__4916
30270                 | LR__4915
30270     02 00 00 FF 
30274     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
30278     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
3027c     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
30280     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
30284     02 00 00 FF 
30288     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
3028c                 | LR__4916
3028c     08 03 02 FD | 	qmul	_var02, _var09
30290                 | ' 		_tzname[1] = stdname;
30290                 | ' 
30290                 | '         return sgn * off;
30290     18 FA 61 FD | 	getqx	result1
30294                 | LR__4917
30294                 | _fatfs_cc___tzoffset_ret
30294     2D 00 64 FD | 	ret
30298                 | 
30298                 | _fatfs_cc___indst
30298     10 12 06 F1 | 	add	arg01, #16
3029c     09 01 02 FB | 	rdlong	_var01, arg01
302a0     10 12 86 F1 | 	sub	arg01, #16
302a4     02 00 0E F2 | 	cmp	_var01, #2 wz
302a8     30 00 90 5D |  if_ne	jmp	#LR__4920
302ac     07 00 06 F6 | 	mov	_var01, #7
302b0     18 12 06 F1 | 	add	arg01, #24
302b4     09 03 02 FB | 	rdlong	_var02, arg01
302b8     01 01 02 F1 | 	add	_var01, _var02
302bc     0C 12 86 F1 | 	sub	arg01, #12
302c0     09 05 02 FB | 	rdlong	_var03, arg01
302c4     02 01 82 F1 | 	sub	_var01, _var03
302c8     00 00 56 F2 | 	cmps	_var01, #0 wc
302cc                 | '                         return 1;
302cc     01 FA 05 C6 |  if_b	mov	result1, #1
302d0     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
302d4                 | '                 return 0;
302d4     00 FA 05 F6 | 	mov	result1, #0
302d8     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
302dc                 | LR__4920
302dc     10 12 06 F1 | 	add	arg01, #16
302e0     09 01 02 FB | 	rdlong	_var01, arg01
302e4     10 12 86 F1 | 	sub	arg01, #16
302e8     0A 00 0E F2 | 	cmp	_var01, #10 wz
302ec     28 00 90 5D |  if_ne	jmp	#LR__4921
302f0     18 12 06 F1 | 	add	arg01, #24
302f4     09 01 02 FB | 	rdlong	_var01, arg01
302f8     0C 12 86 F1 | 	sub	arg01, #12
302fc     09 07 02 FB | 	rdlong	_var04, arg01
30300     03 01 82 F1 | 	sub	_var01, _var04
30304     00 00 56 F2 | 	cmps	_var01, #0 wc
30308                 | '                         return 0;
30308     00 FA 05 C6 |  if_b	mov	result1, #0
3030c     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
30310                 | '                 return 1;
30310     01 FA 05 F6 | 	mov	result1, #1
30314     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
30318                 | LR__4921
30318                 | '         }
30318                 | ' 
30318                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
30318     00 00 06 F6 | 	mov	_var01, #0
3031c     10 12 06 F1 | 	add	arg01, #16
30320     09 03 02 FB | 	rdlong	_var02, arg01
30324     10 12 86 F1 | 	sub	arg01, #16
30328     03 02 56 F2 | 	cmps	_var02, #3 wc
3032c     10 00 90 CD |  if_b	jmp	#LR__4922
30330     10 12 06 F1 | 	add	arg01, #16
30334     09 05 02 FB | 	rdlong	_var03, arg01
30338     0A 04 56 F2 | 	cmps	_var03, #10 wc
3033c     01 00 06 C6 |  if_b	mov	_var01, #1
30340                 | LR__4922
30340     00 FB 01 F6 | 	mov	result1, _var01
30344                 | _fatfs_cc___indst_ret
30344     2D 00 64 FD | 	ret
30348                 | 
30348                 | ' 	
30348                 | ' 	FUNCTION pfunc(c as integer) as integer
30348                 | ___strs_cl_pfunc
30348                 | ' 		if (i < 16) then
30348     04 E4 05 F1 | 	add	objptr, #4
3034c     F2 FA 01 FB | 	rdlong	result1, objptr
30350     04 E4 85 F1 | 	sub	objptr, #4
30354     10 FA 55 F2 | 	cmps	result1, #16 wc
30358     2C 00 90 3D |  if_ae	jmp	#LR__4930
3035c     F2 FA 01 FB | 	rdlong	result1, objptr
30360     04 E4 05 F1 | 	add	objptr, #4
30364     F2 00 02 FB | 	rdlong	_var01, objptr
30368     FD 00 02 F1 | 	add	_var01, result1
3036c     00 13 42 FC | 	wrbyte	arg01, _var01
30370     F2 FA 01 FB | 	rdlong	result1, objptr
30374     01 FA 05 F1 | 	add	result1, #1
30378     F2 FA 61 FC | 	wrlong	result1, objptr
3037c     04 E4 85 F1 | 	sub	objptr, #4
30380                 | ' 			p(i) = c
30380                 | ' 			i = i+1
30380                 | ' 			return 1
30380     01 FA 05 F6 | 	mov	result1, #1
30384     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
30388                 | LR__4930
30388                 | ' 			return -1
30388     01 FA 65 F6 | 	neg	result1, #1
3038c                 | ___strs_cl_pfunc_ret
3038c     2D 00 64 FD | 	ret
30390                 | 
30390                 | __struct__s_vfs_file_t_putchar
30390     04 4A 05 F6 | 	mov	COUNT_, #4
30394     A8 00 A0 FD | 	call	#pushregs_
30398     1C E4 05 F1 | 	add	objptr, #28
3039c     F2 1E 0A FB | 	rdlong	local01, objptr wz
303a0     1C E4 85 F1 | 	sub	objptr, #28
303a4     00 FA 05 A6 |  if_e	mov	result1, #0
303a8     48 00 90 AD |  if_e	jmp	#LR__4940
303ac     1C E4 05 F1 | 	add	objptr, #28
303b0     F2 20 02 FB | 	rdlong	local02, objptr
303b4     10 23 02 F6 | 	mov	local03, local02
303b8     1C E4 85 F1 | 	sub	objptr, #28
303bc     13 22 46 F7 | 	zerox	local03, #19
303c0     14 20 46 F0 | 	shr	local02, #20
303c4     02 20 66 F0 | 	shl	local02, #2
303c8     ED 20 02 F1 | 	add	local02, __methods__
303cc     10 21 02 FB | 	rdlong	local02, local02
303d0     F2 14 02 F6 | 	mov	arg02, objptr
303d4     F2 24 02 F6 | 	mov	local04, objptr
303d8     11 E5 01 F6 | 	mov	objptr, local03
303dc     2D 20 62 FD | 	call	local02
303e0     12 E5 01 F6 | 	mov	objptr, local04
303e4                 | '     return (i < 0) ? 0 : 1;
303e4     00 FA 55 F2 | 	cmps	result1, #0 wc
303e8     00 1E 06 C6 |  if_b	mov	local01, #0
303ec     01 1E 06 36 |  if_ae	mov	local01, #1
303f0     0F FB 01 F6 | 	mov	result1, local01
303f4                 | LR__4940
303f4     A7 F0 03 F6 | 	mov	ptra, fp
303f8     B2 00 A0 FD | 	call	#popregs_
303fc                 | __struct__s_vfs_file_t_putchar_ret
303fc     2D 00 64 FD | 	ret
30400                 | 
30400                 | __struct__s_vfs_file_t_getchar
30400     03 4A 05 F6 | 	mov	COUNT_, #3
30404     A8 00 A0 FD | 	call	#pushregs_
30408     20 E4 05 F1 | 	add	objptr, #32
3040c     F2 12 0A FB | 	rdlong	arg01, objptr wz
30410     20 E4 85 F1 | 	sub	objptr, #32
30414     01 FA 65 A6 |  if_e	neg	result1, #1
30418     38 00 90 AD |  if_e	jmp	#LR__4950
3041c                 | '     return getcf(__this);
3041c     20 E4 05 F1 | 	add	objptr, #32
30420     F2 1E 02 FB | 	rdlong	local01, objptr
30424     0F 21 02 F6 | 	mov	local02, local01
30428     20 E4 85 F1 | 	sub	objptr, #32
3042c     13 20 46 F7 | 	zerox	local02, #19
30430     14 1E 46 F0 | 	shr	local01, #20
30434     02 1E 66 F0 | 	shl	local01, #2
30438     ED 1E 02 F1 | 	add	local01, __methods__
3043c     0F 1F 02 FB | 	rdlong	local01, local01
30440     F2 12 02 F6 | 	mov	arg01, objptr
30444     F2 22 02 F6 | 	mov	local03, objptr
30448     10 E5 01 F6 | 	mov	objptr, local02
3044c     2D 1E 62 FD | 	call	local01
30450     11 E5 01 F6 | 	mov	objptr, local03
30454                 | LR__4950
30454     A7 F0 03 F6 | 	mov	ptra, fp
30458     B2 00 A0 FD | 	call	#popregs_
3045c                 | __struct__s_vfs_file_t_getchar_ret
3045c     2D 00 64 FD | 	ret
30460                 | 
30460                 | __struct___bas_wrap_sender_tx
30460     03 4A 05 F6 | 	mov	COUNT_, #3
30464     A8 00 A0 FD | 	call	#pushregs_
30468     F2 1E 02 FB | 	rdlong	local01, objptr
3046c     0F 21 02 F6 | 	mov	local02, local01
30470     13 1E 46 F7 | 	zerox	local01, #19
30474     14 20 46 F0 | 	shr	local02, #20
30478     02 20 66 F0 | 	shl	local02, #2
3047c     ED 20 02 F1 | 	add	local02, __methods__
30480     10 21 02 FB | 	rdlong	local02, local02
30484     F2 22 02 F6 | 	mov	local03, objptr
30488     0F E5 01 F6 | 	mov	objptr, local01
3048c     2D 20 62 FD | 	call	local02
30490     11 E5 01 F6 | 	mov	objptr, local03
30494     01 FA 05 F6 | 	mov	result1, #1
30498     A7 F0 03 F6 | 	mov	ptra, fp
3049c     B2 00 A0 FD | 	call	#popregs_
304a0                 | __struct___bas_wrap_sender_tx_ret
304a0     2D 00 64 FD | 	ret
304a4                 | 
304a4                 | __struct___bas_wrap_sender_rx
304a4     03 4A 05 F6 | 	mov	COUNT_, #3
304a8     A8 00 A0 FD | 	call	#pushregs_
304ac     04 E4 05 F1 | 	add	objptr, #4
304b0     F2 1E 02 FB | 	rdlong	local01, objptr
304b4     0F 21 02 F6 | 	mov	local02, local01
304b8     04 E4 85 F1 | 	sub	objptr, #4
304bc     13 20 46 F7 | 	zerox	local02, #19
304c0     14 1E 46 F0 | 	shr	local01, #20
304c4     02 1E 66 F0 | 	shl	local01, #2
304c8     ED 1E 02 F1 | 	add	local01, __methods__
304cc     0F 1F 02 FB | 	rdlong	local01, local01
304d0     F2 22 02 F6 | 	mov	local03, objptr
304d4     10 E5 01 F6 | 	mov	objptr, local02
304d8     2D 1E 62 FD | 	call	local01
304dc     11 E5 01 F6 | 	mov	objptr, local03
304e0     A7 F0 03 F6 | 	mov	ptra, fp
304e4     B2 00 A0 FD | 	call	#popregs_
304e8                 | __struct___bas_wrap_sender_rx_ret
304e8     2D 00 64 FD | 	ret
304ec                 | 
304ec                 | __struct___bas_wrap_sender_close
304ec     03 4A 05 F6 | 	mov	COUNT_, #3
304f0     A8 00 A0 FD | 	call	#pushregs_
304f4     08 E4 05 F1 | 	add	objptr, #8
304f8     F2 1E 02 FB | 	rdlong	local01, objptr
304fc     0F 21 02 F6 | 	mov	local02, local01
30500     08 E4 85 F1 | 	sub	objptr, #8
30504     13 20 46 F7 | 	zerox	local02, #19
30508     14 1E 46 F0 | 	shr	local01, #20
3050c     02 1E 66 F0 | 	shl	local01, #2
30510     ED 1E 02 F1 | 	add	local01, __methods__
30514     0F 1F 02 FB | 	rdlong	local01, local01
30518     F2 22 02 F6 | 	mov	local03, objptr
3051c     10 E5 01 F6 | 	mov	objptr, local02
30520     2D 1E 62 FD | 	call	local01
30524     11 E5 01 F6 | 	mov	objptr, local03
30528     A7 F0 03 F6 | 	mov	ptra, fp
3052c     B2 00 A0 FD | 	call	#popregs_
30530                 | __struct___bas_wrap_sender_close_ret
30530     2D 00 64 FD | 	ret
30534                 | 
30534                 | LR__4960
30534     2F          | 	byte	"/"
30535     00          | 	byte	0
30536                 | LR__4961
30536     69 6E 66    | 	byte	"inf"
30539     00          | 	byte	0
3053a                 | LR__4962
3053a     6E 61 6E    | 	byte	"nan"
3053d     00          | 	byte	0
3053e                 | LR__4963
3053e                 | 	byte	
3053e     00          | 	byte	0
3053f                 | LR__4964
3053f                 | 	byte	
3053f     00          | 	byte	0
30540                 | LR__4965
30540                 | 	byte	
30540     00          | 	byte	0
30541                 | LR__4966
30541                 | 	byte	
30541     00          | 	byte	0
30542                 | LR__4967
30542                 | 	byte	
30542     00          | 	byte	0
30543                 | LR__4968
30543                 | 	byte	
30543     00          | 	byte	0
30544                 | LR__4969
30544                 | 	byte	
30544     00          | 	byte	0
30545                 | LR__4970
30545                 | 	byte	
30545     00          | 	byte	0
30546                 | LR__4971
30546     00          | 	byte	0
30547     00          | 	byte	0
30548                 | LR__4972
30548     00          | 	byte	0
30549     00          | 	byte	0
3054a                 | LR__4973
3054a     00          | 	byte	0
3054b     00          | 	byte	0
3054c                 | LR__4974
3054c     20 21 21 21 
30550     20 63 6F 72 
30554     72 75 70 74 
30558     65 64 20 68 
3055c     65 61 70 3F 
30560     3F 3F 20 21 
30564     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
30567     00          | 	byte	0
30568                 | LR__4975
30568     20 21 21 21 
3056c     20 6F 75 74 
30570     20 6F 66 20 
30574     68 65 61 70 
30578     20 6D 65 6D 
3057c     6F 72 79 20 
30580     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
30584     00          | 	byte	0
30585                 | LR__4976
30585     20 21 21 21 
30589     20 63 6F 72 
3058d     72 75 70 74 
30591     65 64 20 68 
30595     65 61 70 20 
30599     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
3059d     00          | 	byte	0
3059e                 | LR__4977
3059e     00          | 	byte	0
3059f     00          | 	byte	0
305a0                 | LR__4978
305a0     2E          | 	byte	"."
305a1     00          | 	byte	0
305a2                 | LR__4979
305a2     00          | 	byte	0
305a3     00          | 	byte	0
305a4                 | LR__4980
305a4     00          | 	byte	0
305a5     00          | 	byte	0
305a6                 | LR__4981
305a6     00          | 	byte	0
305a7     00          | 	byte	0
305a8                 | LR__4982
305a8     2A 3A 3C 3E 
305ac     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
305b0     00          | 	byte	0
305b1                 | LR__4983
305b1     2B 2C 3B 3D 
305b5     5B 5D       | 	byte	"+,;=[]"
305b7     00          | 	byte	0
305b8                 | LR__4984
305b8     46 41 54 33 
305bc     32 20 20 20 | 	byte	"FAT32   "
305c0     00          | 	byte	0
305c1                 | LR__4985
305c1     54 5A       | 	byte	"TZ"
305c3     00          | 	byte	0
305c4                 | LR__4986
305c4     00          | 	byte	0
305c5     00          | 	byte	0
305c6                 | LR__4987
305c6                 | 	byte	
305c6     00          | 	byte	0
305c7                 | LR__4988
305c7                 | 	byte	
305c7     00          | 	byte	0
305c8                 | LR__4989
305c8     22          | 	byte	34
305c9     00          | 	byte	0
305ca                 | LR__4990
305ca     22          | 	byte	34
305cb     00          | 	byte	0
305cc                 | LR__4991
305cc     3A          | 	byte	":"
305cd     00          | 	byte	0
305ce                 | LR__4992
305ce                 | 	byte	
305ce     00          | 	byte	0
305cf                 | LR__4993
305cf                 | 	byte	
305cf     00          | 	byte	0
305d0                 | LR__4994
305d0                 | 	byte	
305d0     00          | 	byte	0
305d1                 | LR__4995
305d1                 | 	byte	
305d1     00          | 	byte	0
305d2                 | LR__4996
305d2                 | 	byte	
305d2     00          | 	byte	0
305d3                 | LR__4997
305d3                 | 	byte	
305d3     00          | 	byte	0
305d4                 | LR__4998
305d4                 | 	byte	
305d4     00          | 	byte	0
305d5                 | LR__4999
305d5     22          | 	byte	34
305d6     00          | 	byte	0
305d7                 | LR__5000
305d7     22          | 	byte	34
305d8     00          | 	byte	0
305d9                 | LR__5001
305d9     22          | 	byte	34
305da     00          | 	byte	0
305db                 | LR__5002
305db     22          | 	byte	34
305dc     00          | 	byte	0
305dd                 | LR__5003
305dd     22          | 	byte	34
305de     00          | 	byte	0
305df                 | LR__5004
305df     3E          | 	byte	">"
305e0     00          | 	byte	0
305e1                 | LR__5005
305e1     3C          | 	byte	"<"
305e2     00          | 	byte	0
305e3                 | LR__5006
305e3     2B          | 	byte	"+"
305e4     00          | 	byte	0
305e5                 | LR__5007
305e5     2D          | 	byte	"-"
305e6     00          | 	byte	0
305e7                 | LR__5008
305e7     2A          | 	byte	"*"
305e8     00          | 	byte	0
305e9                 | LR__5009
305e9     2F          | 	byte	"/"
305ea     00          | 	byte	0
305eb                 | LR__5010
305eb     5E          | 	byte	"^"
305ec     00          | 	byte	0
305ed                 | LR__5011
305ed     3D          | 	byte	"="
305ee     00          | 	byte	0
305ef                 | LR__5012
305ef     2B          | 	byte	"+"
305f0     00          | 	byte	0
305f1                 | LR__5013
305f1     2B          | 	byte	"+"
305f2     00          | 	byte	0
305f3                 | LR__5014
305f3     2D          | 	byte	"-"
305f4     00          | 	byte	0
305f5                 | LR__5015
305f5     2D          | 	byte	"-"
305f6     00          | 	byte	0
305f7                 | LR__5016
305f7     3C          | 	byte	"<"
305f8     00          | 	byte	0
305f9                 | LR__5017
305f9     3E          | 	byte	">"
305fa     00          | 	byte	0
305fb                 | LR__5018
305fb     22          | 	byte	34
305fc     00          | 	byte	0
305fd                 | LR__5019
305fd     22          | 	byte	34
305fe     00          | 	byte	0
305ff                 | LR__5020
305ff     2E          | 	byte	"."
30600     00          | 	byte	0
30601                 | LR__5021
30601     3F          | 	byte	"?"
30602     00          | 	byte	0
30603                 | LR__5022
30603     3F          | 	byte	"?"
30604     00          | 	byte	0
30605                 | LR__5023
30605     6D 6F 75 73 
30609     65          | 	byte	"mouse"
3060a     00          | 	byte	0
3060b                 | LR__5024
3060b     63 75 72 73 
3060f     6F 72       | 	byte	"cursor"
30611     00          | 	byte	0
30612                 | LR__5025
30612     63 6C 69 63 
30616     6B          | 	byte	"click"
30617     00          | 	byte	0
30618                 | LR__5026
30618     6F 6E       | 	byte	"on"
3061a     00          | 	byte	0
3061b                 | LR__5027
3061b     31          | 	byte	"1"
3061c     00          | 	byte	0
3061d                 | LR__5028
3061d     6F 66 66    | 	byte	"off"
30620     00          | 	byte	0
30621                 | LR__5029
30621     30          | 	byte	"0"
30622     00          | 	byte	0
30623                 | LR__5030
30623     6D 6F 64 65 | 	byte	"mode"
30627     00          | 	byte	0
30628                 | LR__5031
30628     6D 2E       | 	byte	"m."
3062a     00          | 	byte	0
3062b                 | LR__5032
3062b     61 74 61 72 
3062f     69          | 	byte	"atari"
30630     00          | 	byte	0
30631                 | LR__5033
30631     30          | 	byte	"0"
30632     00          | 	byte	0
30633                 | LR__5034
30633     70 63 5F 61 
30637     6D 62 65 72 | 	byte	"pc_amber"
3063b     00          | 	byte	0
3063c                 | LR__5035
3063c     31          | 	byte	"1"
3063d     00          | 	byte	0
3063e                 | LR__5036
3063e     70 63 5F 67 
30642     72 65 65 6E | 	byte	"pc_green"
30646     00          | 	byte	0
30647                 | LR__5037
30647     32          | 	byte	"2"
30648     00          | 	byte	0
30649                 | LR__5038
30649     70 63 5F 77 
3064d     68 69 74 65 | 	byte	"pc_white"
30651     00          | 	byte	0
30652                 | LR__5039
30652     33          | 	byte	"3"
30653     00          | 	byte	0
30654                 | LR__5040
30654     73 74       | 	byte	"st"
30656     00          | 	byte	0
30657                 | LR__5041
30657     34          | 	byte	"4"
30658     00          | 	byte	0
30659                 | LR__5042
30659                 | 	byte	
30659     00          | 	byte	0
3065a                 | LR__5043
3065a     6C 6F 61 64 | 	byte	"load"
3065e     00          | 	byte	0
3065f                 | LR__5044
3065f     73 61 76 65 | 	byte	"save"
30663     00          | 	byte	0
30664                 | LR__5045
30664     62 72 75 6E | 	byte	"brun"
30668     00          | 	byte	0
30669                 | LR__5046
30669     72 75 6E    | 	byte	"run"
3066c     00          | 	byte	0
3066d                 | LR__5047
3066d     6C 6F 2E    | 	byte	"lo."
30670     00          | 	byte	0
30671                 | LR__5048
30671     73 2E       | 	byte	"s."
30673     00          | 	byte	0
30674                 | LR__5049
30674     62 72 2E    | 	byte	"br."
30677     00          | 	byte	0
30678                 | LR__5050
30678     65 6E 74 65 
3067c     72          | 	byte	"enter"
3067d     00          | 	byte	0
3067e                 | LR__5051
3067e     65 2E       | 	byte	"e."
30680     00          | 	byte	0
30681                 | LR__5052
30681                 | 	byte	
30681     00          | 	byte	0
30682                 | LR__5053
30682                 | 	byte	
30682     00          | 	byte	0
30683                 | LR__5054
30683                 | 	byte	
30683     00          | 	byte	0
30684                 | LR__5055
30684                 | 	byte	
30684     00          | 	byte	0
30685                 | LR__5056
30685     20 55 73 65 
30689     72 20 66 75 
3068d     6E 63 74 69 
30691     6F 6E 73 20 
30695     61 6E 64 20 
30699     61 72 72 61 
3069d     79 73 20 6E 
306a1     6F 74 20 79 
306a5     65 74 20 69 
306a9     6D 70 6C 65 
306ad     6D 65 6E 74 
306b1     65 64       | 	byte	" User functions and arrays not yet implemented"
306b3     00          | 	byte	0
306b4                 | LR__5057
306b4                 | 	byte	
306b4     00          | 	byte	0
306b5                 | LR__5058
306b5                 | 	byte	
306b5     00          | 	byte	0
306b6                 | LR__5059
306b6     52 65 61 64 
306ba     79          | 	byte	"Ready"
306bb     00          | 	byte	0
306bc                 | LR__5060
306bc     2B          | 	byte	"+"
306bd     00          | 	byte	0
306be                 | LR__5061
306be     2D          | 	byte	"-"
306bf     00          | 	byte	0
306c0                 | LR__5062
306c0     6F 72       | 	byte	"or"
306c2     00          | 	byte	0
306c3                 | LR__5063
306c3     78 6F 72    | 	byte	"xor"
306c6     00          | 	byte	0
306c7                 | LR__5064
306c7     2A          | 	byte	"*"
306c8     00          | 	byte	0
306c9                 | LR__5065
306c9     2F          | 	byte	"/"
306ca     00          | 	byte	0
306cb                 | LR__5066
306cb     61 6E 64    | 	byte	"and"
306ce     00          | 	byte	0
306cf                 | LR__5067
306cf     64 69 76    | 	byte	"div"
306d2     00          | 	byte	0
306d3                 | LR__5068
306d3     6D 6F 64    | 	byte	"mod"
306d6     00          | 	byte	0
306d7                 | LR__5069
306d7     73 68 6C    | 	byte	"shl"
306da     00          | 	byte	0
306db                 | LR__5070
306db     73 68 72    | 	byte	"shr"
306de     00          | 	byte	0
306df                 | LR__5071
306df     5E          | 	byte	"^"
306e0     00          | 	byte	0
306e1                 | LR__5072
306e1     6E 6F 74    | 	byte	"not"
306e4     00          | 	byte	0
306e5                 | LR__5073
306e5     40          | 	byte	"@"
306e6     00          | 	byte	0
306e7                 | LR__5074
306e7     3D          | 	byte	"="
306e8     00          | 	byte	0
306e9                 | LR__5075
306e9     3E 3D       | 	byte	">="
306eb     00          | 	byte	0
306ec                 | LR__5076
306ec     3C 3D       | 	byte	"<="
306ee     00          | 	byte	0
306ef                 | LR__5077
306ef     3C          | 	byte	"<"
306f0     00          | 	byte	0
306f1                 | LR__5078
306f1     3E          | 	byte	">"
306f2     00          | 	byte	0
306f3                 | LR__5079
306f3     3C 3E       | 	byte	"<>"
306f5     00          | 	byte	0
306f6                 | LR__5080
306f6     2B 2B       | 	byte	"++"
306f8     00          | 	byte	0
306f9                 | LR__5081
306f9     2D 2D       | 	byte	"--"
306fb     00          | 	byte	0
306fc                 | LR__5082
306fc     23          | 	byte	"#"
306fd     00          | 	byte	0
306fe                 | LR__5083
306fe     30          | 	byte	"0"
306ff     00          | 	byte	0
30700                 | LR__5084
30700     39          | 	byte	"9"
30701     00          | 	byte	0
30702                 | LR__5085
30702     23          | 	byte	"#"
30703     00          | 	byte	0
30704                 | LR__5086
30704     23          | 	byte	"#"
30705     00          | 	byte	0
30706                 | LR__5087
30706     2D          | 	byte	"-"
30707     00          | 	byte	0
30708                 | LR__5088
30708     30          | 	byte	"0"
30709     00          | 	byte	0
3070a                 | LR__5089
3070a     63          | 	byte	"c"
3070b     00          | 	byte	0
3070c                 | LR__5090
3070c     63 23       | 	byte	"c#"
3070e     00          | 	byte	0
3070f                 | LR__5091
3070f     64          | 	byte	"d"
30710     00          | 	byte	0
30711                 | LR__5092
30711     64 23       | 	byte	"d#"
30713     00          | 	byte	0
30714                 | LR__5093
30714     65          | 	byte	"e"
30715     00          | 	byte	0
30716                 | LR__5094
30716     66          | 	byte	"f"
30717     00          | 	byte	0
30718                 | LR__5095
30718     66 23       | 	byte	"f#"
3071a     00          | 	byte	0
3071b                 | LR__5096
3071b     67          | 	byte	"g"
3071c     00          | 	byte	0
3071d                 | LR__5097
3071d     67 23       | 	byte	"g#"
3071f     00          | 	byte	0
30720                 | LR__5098
30720     61          | 	byte	"a"
30721     00          | 	byte	0
30722                 | LR__5099
30722     61 23       | 	byte	"a#"
30724     00          | 	byte	0
30725                 | LR__5100
30725     68          | 	byte	"h"
30726     00          | 	byte	0
30727                 | LR__5101
30727     62          | 	byte	"b"
30728     00          | 	byte	0
30729                 | LR__5102
30729     2B          | 	byte	"+"
3072a     00          | 	byte	0
3072b                 | LR__5103
3072b     2D          | 	byte	"-"
3072c     00          | 	byte	0
3072d                 | LR__5104
3072d     3D          | 	byte	"="
3072e     00          | 	byte	0
3072f                 | LR__5105
3072f     2C          | 	byte	","
30730     00          | 	byte	0
30731                 | LR__5106
30731     2A          | 	byte	"*"
30732     00          | 	byte	0
30733                 | LR__5107
30733     2F          | 	byte	"/"
30734     00          | 	byte	0
30735                 | LR__5108
30735     3B          | 	byte	";"
30736     00          | 	byte	0
30737                 | LR__5109
30737     22          | 	byte	34
30738     00          | 	byte	0
30739                 | LR__5110
30739     5E          | 	byte	"^"
3073a     00          | 	byte	0
3073b                 | LR__5111
3073b     29          | 	byte	")"
3073c     00          | 	byte	0
3073d                 | LR__5112
3073d     28          | 	byte	"("
3073e     00          | 	byte	0
3073f                 | LR__5113
3073f     3A          | 	byte	":"
30740     00          | 	byte	0
30741                 | LR__5114
30741     20          | 	byte	" "
30742     00          | 	byte	0
30743                 | LR__5115
30743     3E          | 	byte	">"
30744     00          | 	byte	0
30745                 | LR__5116
30745     3C          | 	byte	"<"
30746     00          | 	byte	0
30747                 | LR__5117
30747     3D          | 	byte	"="
30748     00          | 	byte	0
30749                 | LR__5118
30749     62 65 65 70 | 	byte	"beep"
3074d     00          | 	byte	0
3074e                 | LR__5119
3074e     62 2E       | 	byte	"b."
30750     00          | 	byte	0
30751                 | LR__5120
30751     62 6F 78    | 	byte	"box"
30754     00          | 	byte	0
30755                 | LR__5121
30755     62 72 75 6E | 	byte	"brun"
30759     00          | 	byte	0
3075a                 | LR__5122
3075a     62 72 2E    | 	byte	"br."
3075d     00          | 	byte	0
3075e                 | LR__5123
3075e     63 68 61 6E 
30762     67 65 66 72 
30766     65 71       | 	byte	"changefreq"
30768     00          | 	byte	0
30769                 | LR__5124
30769     63 66 2E    | 	byte	"cf."
3076c     00          | 	byte	0
3076d                 | LR__5125
3076d     63 68 61 6E 
30771     67 65 70 61 
30775     6E          | 	byte	"changepan"
30776     00          | 	byte	0
30777                 | LR__5126
30777     63 70 2E    | 	byte	"cp."
3077a     00          | 	byte	0
3077b                 | LR__5127
3077b     63 68 61 6E 
3077f     67 65 76 6F 
30783     6C          | 	byte	"changevol"
30784     00          | 	byte	0
30785                 | LR__5128
30785     63 76 2E    | 	byte	"cv."
30788     00          | 	byte	0
30789                 | LR__5129
30789     63 68 61 6E 
3078d     67 65 77 61 
30791     76 65       | 	byte	"changewave"
30793     00          | 	byte	0
30794                 | LR__5130
30794     63 77 2E    | 	byte	"cw."
30797     00          | 	byte	0
30798                 | LR__5131
30798     63 69 72 63 
3079c     6C 65       | 	byte	"circle"
3079e     00          | 	byte	0
3079f                 | LR__5132
3079f     63 69 2E    | 	byte	"ci."
307a2     00          | 	byte	0
307a3                 | LR__5133
307a3     63 6C 69 63 
307a7     6B          | 	byte	"click"
307a8     00          | 	byte	0
307a9                 | LR__5134
307a9     63 6C 6F 73 
307ad     65          | 	byte	"close"
307ae     00          | 	byte	0
307af                 | LR__5135
307af     63 6C 73    | 	byte	"cls"
307b2     00          | 	byte	0
307b3                 | LR__5136
307b3     63 6F 6C 6F 
307b7     72          | 	byte	"color"
307b8     00          | 	byte	0
307b9                 | LR__5137
307b9     63 2E       | 	byte	"c."
307bb     00          | 	byte	0
307bc                 | LR__5138
307bc     63 73 61 76 
307c0     65          | 	byte	"csave"
307c1     00          | 	byte	0
307c2                 | LR__5139
307c2     63 73 2E    | 	byte	"cs."
307c5     00          | 	byte	0
307c6                 | LR__5140
307c6     63 75 72 73 
307ca     6F 72       | 	byte	"cursor"
307cc     00          | 	byte	0
307cd                 | LR__5141
307cd     64 65 66 73 
307d1     6E 64       | 	byte	"defsnd"
307d3     00          | 	byte	0
307d4                 | LR__5142
307d4     64 65 66 65 
307d8     6E 76       | 	byte	"defenv"
307da     00          | 	byte	0
307db                 | LR__5143
307db     64 65 66 73 
307df     70 72 69 74 
307e3     65          | 	byte	"defsprite"
307e4     00          | 	byte	0
307e5                 | LR__5144
307e5     64 73 2E    | 	byte	"ds."
307e8     00          | 	byte	0
307e9                 | LR__5145
307e9     64 65 67    | 	byte	"deg"
307ec     00          | 	byte	0
307ed                 | LR__5146
307ed     64 69 6D    | 	byte	"dim"
307f0     00          | 	byte	0
307f1                 | LR__5147
307f1     64 69 72    | 	byte	"dir"
307f4     00          | 	byte	0
307f5                 | LR__5148
307f5     64 70 6F 6B 
307f9     65          | 	byte	"dpoke"
307fa     00          | 	byte	0
307fb                 | LR__5149
307fb     64 72 61 77 | 	byte	"draw"
307ff     00          | 	byte	0
30800                 | LR__5150
30800     64 72 2E    | 	byte	"dr."
30803     00          | 	byte	0
30804                 | LR__5151
30804     65 6C 73 65 | 	byte	"else"
30808     00          | 	byte	0
30809                 | LR__5152
30809     65 6E 64    | 	byte	"end"
3080c     00          | 	byte	0
3080d                 | LR__5153
3080d     65 6E 74 65 
30811     72          | 	byte	"enter"
30812     00          | 	byte	0
30813                 | LR__5154
30813     65 2E       | 	byte	"e."
30815     00          | 	byte	0
30816                 | LR__5155
30816     66 63 69 72 
3081a     63 6C 65    | 	byte	"fcircle"
3081d     00          | 	byte	0
3081e                 | LR__5156
3081e     66 63 2E    | 	byte	"fc."
30821     00          | 	byte	0
30822                 | LR__5157
30822     66 69 6C 6C | 	byte	"fill"
30826     00          | 	byte	0
30827                 | LR__5158
30827     66 69 2E    | 	byte	"fi."
3082a     00          | 	byte	0
3082b                 | LR__5159
3082b     66 6F 6E 74 | 	byte	"font"
3082f     00          | 	byte	0
30830                 | LR__5160
30830     66 6F 72    | 	byte	"for"
30833     00          | 	byte	0
30834                 | LR__5161
30834     66 2E       | 	byte	"f."
30836     00          | 	byte	0
30837                 | LR__5162
30837     66 72 61 6D 
3083b     65          | 	byte	"frame"
3083c     00          | 	byte	0
3083d                 | LR__5163
3083d     66 72 2E    | 	byte	"fr."
30840     00          | 	byte	0
30841                 | LR__5164
30841     67 65 74    | 	byte	"get"
30844     00          | 	byte	0
30845                 | LR__5165
30845     67 6F 73 75 
30849     62          | 	byte	"gosub"
3084a     00          | 	byte	0
3084b                 | LR__5166
3084b     67 6F 74 6F | 	byte	"goto"
3084f     00          | 	byte	0
30850                 | LR__5167
30850     67 2E       | 	byte	"g."
30852     00          | 	byte	0
30853                 | LR__5168
30853     69 66       | 	byte	"if"
30855     00          | 	byte	0
30856                 | LR__5169
30856     69 6E 6B    | 	byte	"ink"
30859     00          | 	byte	0
3085a                 | LR__5170
3085a     69 2E       | 	byte	"i."
3085c     00          | 	byte	0
3085d                 | LR__5171
3085d     6C 69 73 74 | 	byte	"list"
30861     00          | 	byte	0
30862                 | LR__5172
30862     6C 2E       | 	byte	"l."
30864     00          | 	byte	0
30865                 | LR__5173
30865     6C 6F 61 64 | 	byte	"load"
30869     00          | 	byte	0
3086a                 | LR__5174
3086a     6C 6F 2E    | 	byte	"lo."
3086d     00          | 	byte	0
3086e                 | LR__5175
3086e     6C 70 6F 6B 
30872     65          | 	byte	"lpoke"
30873     00          | 	byte	0
30874                 | LR__5176
30874     6D 6F 64 65 | 	byte	"mode"
30878     00          | 	byte	0
30879                 | LR__5177
30879     6D 2E       | 	byte	"m."
3087b     00          | 	byte	0
3087c                 | LR__5178
3087c     6D 6F 75 73 
30880     65          | 	byte	"mouse"
30881     00          | 	byte	0
30882                 | LR__5179
30882     6E 65 77    | 	byte	"new"
30885     00          | 	byte	0
30886                 | LR__5180
30886     6E 65 78 74 | 	byte	"next"
3088a     00          | 	byte	0
3088b                 | LR__5181
3088b     6E 2E       | 	byte	"n."
3088d     00          | 	byte	0
3088e                 | LR__5182
3088e     6F 70 65 6E | 	byte	"open"
30892     00          | 	byte	0
30893                 | LR__5183
30893     70 61 70 65 
30897     72          | 	byte	"paper"
30898     00          | 	byte	0
30899                 | LR__5184
30899     70 61 2E    | 	byte	"pa."
3089c     00          | 	byte	0
3089d                 | LR__5185
3089d     70 69 6E 66 
308a1     6C 6F 61 74 | 	byte	"pinfloat"
308a5     00          | 	byte	0
308a6                 | LR__5186
308a6     70 69 6E 68 
308aa     69          | 	byte	"pinhi"
308ab     00          | 	byte	0
308ac                 | LR__5187
308ac     70 69 6E 6C 
308b0     6F          | 	byte	"pinlo"
308b1     00          | 	byte	0
308b2                 | LR__5188
308b2     70 69 6E 73 
308b6     74 61 72 74 | 	byte	"pinstart"
308ba     00          | 	byte	0
308bb                 | LR__5189
308bb     70 69 6E 74 
308bf     6F 67 67 6C 
308c3     65          | 	byte	"pintoggle"
308c4     00          | 	byte	0
308c5                 | LR__5190
308c5     70 69 6E 77 
308c9     72 69 74 65 | 	byte	"pinwrite"
308cd     00          | 	byte	0
308ce                 | LR__5191
308ce     70 6C 61 79 | 	byte	"play"
308d2     00          | 	byte	0
308d3                 | LR__5192
308d3     70 2E       | 	byte	"p."
308d5     00          | 	byte	0
308d6                 | LR__5193
308d6     70 6C 6F 74 | 	byte	"plot"
308da     00          | 	byte	0
308db                 | LR__5194
308db     70 6C 2E    | 	byte	"pl."
308de     00          | 	byte	0
308df                 | LR__5195
308df     70 6F 6B 65 | 	byte	"poke"
308e3     00          | 	byte	0
308e4                 | LR__5196
308e4     70 6F 70    | 	byte	"pop"
308e7     00          | 	byte	0
308e8                 | LR__5197
308e8     70 6F 73 69 
308ec     74 69 6F 6E | 	byte	"position"
308f0     00          | 	byte	0
308f1                 | LR__5198
308f1     70 6F 73 2E | 	byte	"pos."
308f5     00          | 	byte	0
308f6                 | LR__5199
308f6     70 72 69 6E 
308fa     74          | 	byte	"print"
308fb     00          | 	byte	0
308fc                 | LR__5200
308fc     3F          | 	byte	"?"
308fd     00          | 	byte	0
308fe                 | LR__5201
308fe     70 75 74    | 	byte	"put"
30901     00          | 	byte	0
30902                 | LR__5202
30902     72 61 64    | 	byte	"rad"
30905     00          | 	byte	0
30906                 | LR__5203
30906     72 65 6C 65 
3090a     61 73 65    | 	byte	"release"
3090d     00          | 	byte	0
3090e                 | LR__5204
3090e     72 65 6D    | 	byte	"rem"
30911     00          | 	byte	0
30912                 | LR__5205
30912     27          | 	byte	"'"
30913     00          | 	byte	0
30914                 | LR__5206
30914     72 65 74 75 
30918     72 6E       | 	byte	"return"
3091a     00          | 	byte	0
3091b                 | LR__5207
3091b     72 75 6E    | 	byte	"run"
3091e     00          | 	byte	0
3091f                 | LR__5208
3091f     73 61 76 65 | 	byte	"save"
30923     00          | 	byte	0
30924                 | LR__5209
30924     73 2E       | 	byte	"s."
30926     00          | 	byte	0
30927                 | LR__5210
30927     73 65 74 64 
3092b     65 6C 61 79 | 	byte	"setdelay"
3092f     00          | 	byte	0
30930                 | LR__5211
30930     73 64 2E    | 	byte	"sd."
30933     00          | 	byte	0
30934                 | LR__5212
30934     73 65 74 65 
30938     6E 76       | 	byte	"setenv"
3093a     00          | 	byte	0
3093b                 | LR__5213
3093b     73 65 2E    | 	byte	"se."
3093e     00          | 	byte	0
3093f                 | LR__5214
3093f     73 65 74 6C 
30943     65 6E       | 	byte	"setlen"
30945     00          | 	byte	0
30946                 | LR__5215
30946     73 6C 2E    | 	byte	"sl."
30949     00          | 	byte	0
3094a                 | LR__5216
3094a     73 65 74 70 
3094e     61 6E       | 	byte	"setpan"
30950     00          | 	byte	0
30951                 | LR__5217
30951     73 70       | 	byte	"sp"
30953     00          | 	byte	0
30954                 | LR__5218
30954     73 65 74 73 
30958     75 73 74 61 
3095c     69 6E       | 	byte	"setsustain"
3095e     00          | 	byte	0
3095f                 | LR__5219
3095f     73 73 2E    | 	byte	"ss."
30962     00          | 	byte	0
30963                 | LR__5220
30963     73 65 74 76 
30967     6F 6C       | 	byte	"setvol"
30969     00          | 	byte	0
3096a                 | LR__5221
3096a     73 76 2E    | 	byte	"sv."
3096d     00          | 	byte	0
3096e                 | LR__5222
3096e     73 65 74 77 
30972     61 76 65    | 	byte	"setwave"
30975     00          | 	byte	0
30976                 | LR__5223
30976     73 77 2E    | 	byte	"sw."
30979     00          | 	byte	0
3097a                 | LR__5224
3097a     73 65 74 77 
3097e     61 76       | 	byte	"setwav"
30980     00          | 	byte	0
30981                 | LR__5225
30981     73 68 75 74 
30985     75 70       | 	byte	"shutup"
30987     00          | 	byte	0
30988                 | LR__5226
30988     73 68 2E    | 	byte	"sh."
3098b     00          | 	byte	0
3098c                 | LR__5227
3098c     73 6F 75 6E 
30990     64          | 	byte	"sound"
30991     00          | 	byte	0
30992                 | LR__5228
30992     73 6F 2E    | 	byte	"so."
30995     00          | 	byte	0
30996                 | LR__5229
30996     73 70 72 69 
3099a     74 65       | 	byte	"sprite"
3099c     00          | 	byte	0
3099d                 | LR__5230
3099d     73 70 72 2E | 	byte	"spr."
309a1     00          | 	byte	0
309a2                 | LR__5231
309a2     74 68 65 6E | 	byte	"then"
309a6     00          | 	byte	0
309a7                 | LR__5232
309a7     77 61 69 74 
309ab     6D 73       | 	byte	"waitms"
309ad     00          | 	byte	0
309ae                 | LR__5233
309ae     77 61 69 74 
309b2     63 6C 6F 63 
309b6     6B          | 	byte	"waitclock"
309b7     00          | 	byte	0
309b8                 | LR__5234
309b8     77 63 2E    | 	byte	"wc."
309bb     00          | 	byte	0
309bc                 | LR__5235
309bc     77 61 69 74 
309c0     76 62 6C    | 	byte	"waitvbl"
309c3     00          | 	byte	0
309c4                 | LR__5236
309c4     77 76 2E    | 	byte	"wv."
309c7     00          | 	byte	0
309c8                 | LR__5237
309c8     77 78 70 69 
309cc     6E          | 	byte	"wxpin"
309cd     00          | 	byte	0
309ce                 | LR__5238
309ce     77 79 70 69 
309d2     6E          | 	byte	"wypin"
309d3     00          | 	byte	0
309d4                 | LR__5239
309d4     61 62 73    | 	byte	"abs"
309d7     00          | 	byte	0
309d8                 | LR__5240
309d8     61 63 6F 73 | 	byte	"acos"
309dc     00          | 	byte	0
309dd                 | LR__5241
309dd     61 64 72    | 	byte	"adr"
309e0     00          | 	byte	0
309e1                 | LR__5242
309e1     61 64 64 72 | 	byte	"addr"
309e5     00          | 	byte	0
309e6                 | LR__5243
309e6     61 73 63    | 	byte	"asc"
309e9     00          | 	byte	0
309ea                 | LR__5244
309ea     61 73 69 6E | 	byte	"asin"
309ee     00          | 	byte	0
309ef                 | LR__5245
309ef     61 74 6E    | 	byte	"atn"
309f2     00          | 	byte	0
309f3                 | LR__5246
309f3     62 69 6E 24 | 	byte	"bin$"
309f7     00          | 	byte	0
309f8                 | LR__5247
309f8     63 68 72 24 | 	byte	"chr$"
309fc     00          | 	byte	0
309fd                 | LR__5248
309fd     63 6F 73    | 	byte	"cos"
30a00     00          | 	byte	0
30a01                 | LR__5249
30a01     64 70 65 65 
30a05     6B          | 	byte	"dpeek"
30a06     00          | 	byte	0
30a07                 | LR__5250
30a07     66 72 65    | 	byte	"fre"
30a0a     00          | 	byte	0
30a0b                 | LR__5251
30a0b     67 65 74 70 
30a0f     69 78 65 6C | 	byte	"getpixel"
30a13     00          | 	byte	0
30a14                 | LR__5252
30a14     67 65 2E    | 	byte	"ge."
30a17     00          | 	byte	0
30a18                 | LR__5253
30a18     67 65 74 65 
30a1c     6E 76 73 75 
30a20     73 74 61 69 
30a24     6E          | 	byte	"getenvsustain"
30a25     00          | 	byte	0
30a26                 | LR__5254
30a26     67 65 74 6E 
30a2a     6F 74 65 76 
30a2e     61 6C 75 65 | 	byte	"getnotevalue"
30a32     00          | 	byte	0
30a33                 | LR__5255
30a33     67 65 74 74 
30a37     69 6D 65    | 	byte	"gettime"
30a3a     00          | 	byte	0
30a3b                 | LR__5256
30a3b     68 65 78 24 | 	byte	"hex$"
30a3f     00          | 	byte	0
30a40                 | LR__5257
30a40     69 6E 6B 65 
30a44     79 24       | 	byte	"inkey$"
30a46     00          | 	byte	0
30a47                 | LR__5258
30a47     69 6E 74    | 	byte	"int"
30a4a     00          | 	byte	0
30a4b                 | LR__5259
30a4b     6C 65 66 74 
30a4f     24          | 	byte	"left$"
30a50     00          | 	byte	0
30a51                 | LR__5260
30a51     6C 65 6E    | 	byte	"len"
30a54     00          | 	byte	0
30a55                 | LR__5261
30a55     6C 6F 67    | 	byte	"log"
30a58     00          | 	byte	0
30a59                 | LR__5262
30a59     6C 70 65 65 
30a5d     6B          | 	byte	"lpeek"
30a5e     00          | 	byte	0
30a5f                 | LR__5263
30a5f     6D 69 64 24 | 	byte	"mid$"
30a63     00          | 	byte	0
30a64                 | LR__5264
30a64     6D 6F 75 73 
30a68     65 6B       | 	byte	"mousek"
30a6a     00          | 	byte	0
30a6b                 | LR__5265
30a6b     6D 6F 75 73 
30a6f     65 77       | 	byte	"mousew"
30a71     00          | 	byte	0
30a72                 | LR__5266
30a72     6D 6F 75 73 
30a76     65 78       | 	byte	"mousex"
30a78     00          | 	byte	0
30a79                 | LR__5267
30a79     6D 6F 75 73 
30a7d     65 79       | 	byte	"mousey"
30a7f     00          | 	byte	0
30a80                 | LR__5268
30a80     70 65 65 6B | 	byte	"peek"
30a84     00          | 	byte	0
30a85                 | LR__5269
30a85     70 69 6E 72 
30a89     65 61 64    | 	byte	"pinread"
30a8c     00          | 	byte	0
30a8d                 | LR__5270
30a8d     72 64 70 69 
30a91     6E          | 	byte	"rdpin"
30a92     00          | 	byte	0
30a93                 | LR__5271
30a93     72 69 67 68 
30a97     74 24       | 	byte	"right$"
30a99     00          | 	byte	0
30a9a                 | LR__5272
30a9a     72 71 70 69 
30a9e     6E          | 	byte	"rqpin"
30a9f     00          | 	byte	0
30aa0                 | LR__5273
30aa0     72 6F 75 6E 
30aa4     64          | 	byte	"round"
30aa5     00          | 	byte	0
30aa6                 | LR__5274
30aa6     72 6E 64    | 	byte	"rnd"
30aa9     00          | 	byte	0
30aaa                 | LR__5275
30aaa     73 69 6E    | 	byte	"sin"
30aad     00          | 	byte	0
30aae                 | LR__5276
30aae     73 71 72    | 	byte	"sqr"
30ab1     00          | 	byte	0
30ab2                 | LR__5277
30ab2     73 74 69 63 
30ab6     6B          | 	byte	"stick"
30ab7     00          | 	byte	0
30ab8                 | LR__5278
30ab8     73 74 72 69 
30abc     67          | 	byte	"strig"
30abd     00          | 	byte	0
30abe                 | LR__5279
30abe     73 74 72 24 | 	byte	"str$"
30ac2     00          | 	byte	0
30ac3                 | LR__5280
30ac3     74 61 6E    | 	byte	"tan"
30ac6     00          | 	byte	0
30ac7                 | LR__5281
30ac7     76 61 6C    | 	byte	"val"
30aca     00          | 	byte	0
30acb                 | LR__5282
30acb     76 61 72 70 
30acf     74 72       | 	byte	"varptr"
30ad1     00          | 	byte	0
30ad2                 | LR__5283
30ad2     61          | 	byte	"a"
30ad3     00          | 	byte	0
30ad4                 | LR__5284
30ad4     7A          | 	byte	"z"
30ad5     00          | 	byte	0
30ad6                 | LR__5285
30ad6     5F          | 	byte	"_"
30ad7     00          | 	byte	0
30ad8                 | LR__5286
30ad8     61          | 	byte	"a"
30ad9     00          | 	byte	0
30ada                 | LR__5287
30ada     7A          | 	byte	"z"
30adb     00          | 	byte	0
30adc                 | LR__5288
30adc     30          | 	byte	"0"
30add     00          | 	byte	0
30ade                 | LR__5289
30ade     39          | 	byte	"9"
30adf     00          | 	byte	0
30ae0                 | LR__5290
30ae0     5F          | 	byte	"_"
30ae1     00          | 	byte	0
30ae2                 | LR__5291
30ae2     2E          | 	byte	"."
30ae3     00          | 	byte	0
30ae4                 | LR__5292
30ae4     61          | 	byte	"a"
30ae5     00          | 	byte	0
30ae6                 | LR__5293
30ae6     7A          | 	byte	"z"
30ae7     00          | 	byte	0
30ae8                 | LR__5294
30ae8     30          | 	byte	"0"
30ae9     00          | 	byte	0
30aea                 | LR__5295
30aea     39          | 	byte	"9"
30aeb     00          | 	byte	0
30aec                 | LR__5296
30aec     5F          | 	byte	"_"
30aed     00          | 	byte	0
30aee                 | LR__5297
30aee     24          | 	byte	"$"
30aef     00          | 	byte	0
30af0                 | LR__5298
30af0     25          | 	byte	"%"
30af1     00          | 	byte	0
30af2                 | LR__5299
30af2     21          | 	byte	"!"
30af3     00          | 	byte	0
30af4                 | LR__5300
30af4     30          | 	byte	"0"
30af5     00          | 	byte	0
30af6                 | LR__5301
30af6     39          | 	byte	"9"
30af7     00          | 	byte	0
30af8                 | LR__5302
30af8     2E          | 	byte	"."
30af9     00          | 	byte	0
30afa                 | LR__5303
30afa     24          | 	byte	"$"
30afb     00          | 	byte	0
30afc                 | LR__5304
30afc     25          | 	byte	"%"
30afd     00          | 	byte	0
30afe                 | LR__5305
30afe     2D          | 	byte	"-"
30aff     00          | 	byte	0
30b00                 | LR__5306
30b00     2E          | 	byte	"."
30b01     00          | 	byte	0
30b02                 | LR__5307
30b02     30          | 	byte	"0"
30b03     00          | 	byte	0
30b04                 | LR__5308
30b04     39          | 	byte	"9"
30b05     00          | 	byte	0
30b06                 | LR__5309
30b06     5F          | 	byte	"_"
30b07     00          | 	byte	0
30b08                 | LR__5310
30b08     2E          | 	byte	"."
30b09     00          | 	byte	0
30b0a                 | LR__5311
30b0a     45          | 	byte	"E"
30b0b     00          | 	byte	0
30b0c                 | LR__5312
30b0c     65          | 	byte	"e"
30b0d     00          | 	byte	0
30b0e                 | LR__5313
30b0e     2D          | 	byte	"-"
30b0f     00          | 	byte	0
30b10                 | LR__5314
30b10     2D          | 	byte	"-"
30b11     00          | 	byte	0
30b12                 | LR__5315
30b12     65          | 	byte	"e"
30b13     00          | 	byte	0
30b14                 | LR__5316
30b14     2E          | 	byte	"."
30b15     00          | 	byte	0
30b16                 | LR__5317
30b16     45          | 	byte	"E"
30b17     00          | 	byte	0
30b18                 | LR__5318
30b18     65          | 	byte	"e"
30b19     00          | 	byte	0
30b1a                 | LR__5319
30b1a     30          | 	byte	"0"
30b1b     00          | 	byte	0
30b1c                 | LR__5320
30b1c     39          | 	byte	"9"
30b1d     00          | 	byte	0
30b1e                 | LR__5321
30b1e     24          | 	byte	"$"
30b1f     00          | 	byte	0
30b20                 | LR__5322
30b20     25          | 	byte	"%"
30b21     00          | 	byte	0
30b22                 | LR__5323
30b22     2D          | 	byte	"-"
30b23     00          | 	byte	0
30b24                 | LR__5324
30b24     30          | 	byte	"0"
30b25     00          | 	byte	0
30b26                 | LR__5325
30b26     39          | 	byte	"9"
30b27     00          | 	byte	0
30b28                 | LR__5326
30b28     5F          | 	byte	"_"
30b29     00          | 	byte	0
30b2a                 | LR__5327
30b2a     30          | 	byte	"0"
30b2b     00          | 	byte	0
30b2c                 | LR__5328
30b2c     39          | 	byte	"9"
30b2d     00          | 	byte	0
30b2e                 | LR__5329
30b2e     5F          | 	byte	"_"
30b2f     00          | 	byte	0
30b30                 | LR__5330
30b30     22          | 	byte	34
30b31     00          | 	byte	0
30b32                 | LR__5331
30b32     22          | 	byte	34
30b33     00          | 	byte	0
30b34                 | LR__5332
30b34     49 6E 20 63 
30b38     6F 6D 70 69 
30b3c     6C 65 5F 70 
30b40     72 69 6E 74 
30b44     20 74 6F 6B 
30b48     65 6E 3D 20 | 	byte	"In compile_print token= "
30b4c     00          | 	byte	0
30b4d                 | LR__5333
30b4d     20 70 61 72 
30b51     74 24 3D 20 | 	byte	" part$= "
30b55     00          | 	byte	0
30b56                 | LR__5334
30b56     44 69 6D 3A 
30b5a     20 61 74 20 
30b5e     6C 69 6E 65 
30b62     20          | 	byte	"Dim: at line "
30b63     00          | 	byte	0
30b64                 | LR__5335
30b64     3A 20 77 61 
30b68     72 6E 69 6E 
30b6c     67 3A 20 74 
30b70     68 65 20 76 
30b74     61 72 69 61 
30b78     62 6C 65 20 
30b7c     65 78 69 73 
30b80     74 65 64 2E | 	byte	": warning: the variable existed."
30b84     00          | 	byte	0
30b85                 | LR__5336
30b85     28          | 	byte	"("
30b86     00          | 	byte	0
30b87                 | LR__5337
30b87     61 73       | 	byte	"as"
30b89     00          | 	byte	0
30b8a                 | LR__5338
30b8a     61 73       | 	byte	"as"
30b8c     00          | 	byte	0
30b8d                 | LR__5339
30b8d     2C          | 	byte	","
30b8e     00          | 	byte	0
30b8f                 | LR__5340
30b8f     29          | 	byte	")"
30b90     00          | 	byte	0
30b91                 | LR__5341
30b91     29          | 	byte	")"
30b92     00          | 	byte	0
30b93                 | LR__5342
30b93     61 73       | 	byte	"as"
30b95     00          | 	byte	0
30b96                 | LR__5343
30b96     62 79 74 65 | 	byte	"byte"
30b9a     00          | 	byte	0
30b9b                 | LR__5344
30b9b     75 62 79 74 
30b9f     65          | 	byte	"ubyte"
30ba0     00          | 	byte	0
30ba1                 | LR__5345
30ba1     73 68 6F 72 
30ba5     74          | 	byte	"short"
30ba6     00          | 	byte	0
30ba7                 | LR__5346
30ba7     75 73 68 6F 
30bab     72 74       | 	byte	"ushort"
30bad     00          | 	byte	0
30bae                 | LR__5347
30bae     6C 6F 6E 67 | 	byte	"long"
30bb2     00          | 	byte	0
30bb3                 | LR__5348
30bb3     69 6E 74 65 
30bb7     67 65 72    | 	byte	"integer"
30bba     00          | 	byte	0
30bbb                 | LR__5349
30bbb     75 6C 6F 6E 
30bbf     67          | 	byte	"ulong"
30bc0     00          | 	byte	0
30bc1                 | LR__5350
30bc1     69 6E 74 36 
30bc5     34          | 	byte	"int64"
30bc6     00          | 	byte	0
30bc7                 | LR__5351
30bc7     75 69 6E 74 
30bcb     36 34       | 	byte	"uint64"
30bcd     00          | 	byte	0
30bce                 | LR__5352
30bce     73 69 6E 67 
30bd2     6C 65       | 	byte	"single"
30bd4     00          | 	byte	0
30bd5                 | LR__5353
30bd5     64 6F 75 62 
30bd9     6C 65       | 	byte	"double"
30bdb     00          | 	byte	0
30bdc                 | LR__5354
30bdc     73 74 72 69 
30be0     6E 67       | 	byte	"string"
30be2     00          | 	byte	0
30be3                 | LR__5355
30be3     74 6F       | 	byte	"to"
30be5     00          | 	byte	0
30be6                 | LR__5356
30be6     73 74 65 70 | 	byte	"step"
30bea     00          | 	byte	0
30beb                 | LR__5357
30beb     73 2E       | 	byte	"s."
30bed     00          | 	byte	0
30bee                 | LR__5358
30bee     24          | 	byte	"$"
30bef     00          | 	byte	0
30bf0                 | LR__5359
30bf0     26 68       | 	byte	"&h"
30bf2     00          | 	byte	0
30bf3                 | LR__5360
30bf3     25          | 	byte	"%"
30bf4     00          | 	byte	0
30bf5                 | LR__5361
30bf5     26 62       | 	byte	"&b"
30bf7     00          | 	byte	0
30bf8                 | LR__5362
30bf8                 | 	byte	
30bf8     00          | 	byte	0
30bf9                 | LR__5363
30bf9     2F          | 	byte	"/"
30bfa     00          | 	byte	0
30bfb                 | LR__5364
30bfb                 | 	byte	
30bfb     00          | 	byte	0
30bfc                 | LR__5365
30bfc     53 61 76 65 
30c00     64 20 61 73 
30c04     20          | 	byte	"Saved as "
30c05     00          | 	byte	0
30c06                 | LR__5366
30c06     2F          | 	byte	"/"
30c07     00          | 	byte	0
30c08                 | LR__5367
30c08                 | 	byte	
30c08     00          | 	byte	0
30c09                 | LR__5368
30c09     2F          | 	byte	"/"
30c0a     00          | 	byte	0
30c0b                 | LR__5369
30c0b     2F          | 	byte	"/"
30c0c     00          | 	byte	0
30c0d                 | LR__5370
30c0d     2E 62 61 73 | 	byte	".bas"
30c11     00          | 	byte	0
30c12                 | LR__5371
30c12     53 79 73 74 
30c16     65 6D 20 65 
30c1a     72 72 6F 72 
30c1e     20          | 	byte	"System error "
30c1f     00          | 	byte	0
30c20                 | LR__5372
30c20     3A 20       | 	byte	": "
30c22     00          | 	byte	0
30c23                 | LR__5373
30c23     2E 62 61 73 | 	byte	".bas"
30c27     00          | 	byte	0
30c28                 | LR__5374
30c28     2F          | 	byte	"/"
30c29     00          | 	byte	0
30c2a                 | LR__5375
30c2a                 | 	byte	
30c2a     00          | 	byte	0
30c2b                 | LR__5376
30c2b     4C 6F 61 64 
30c2f     65 64 20    | 	byte	"Loaded "
30c32     00          | 	byte	0
30c33                 | LR__5377
30c33     2F          | 	byte	"/"
30c34     00          | 	byte	0
30c35                 | LR__5378
30c35     53 74 6F 70 
30c39     70 65 64 20 
30c3d     61 74 20 6C 
30c41     69 6E 65 20 | 	byte	"Stopped at line "
30c45     00          | 	byte	0
30c46                 | LR__5379
30c46                 | 	byte	
30c46     00          | 	byte	0
30c47                 | LR__5380
30c47                 | 	byte	
30c47     00          | 	byte	0
30c48                 | LR__5381
30c48     2F 73 64 2F 
30c4c     6D 65 64 69 
30c50     61 2F 68 2F | 	byte	"/sd/media/h/"
30c54     00          | 	byte	0
30c55                 | LR__5382
30c55     53 79 73 74 
30c59     65 6D 20 65 
30c5d     72 72 6F 72 
30c61     20          | 	byte	"System error "
30c62     00          | 	byte	0
30c63                 | LR__5383
30c63     3A 20       | 	byte	": "
30c65     00          | 	byte	0
30c66                 | LR__5384
30c66                 | 	byte	
30c66     00          | 	byte	0
30c67                 | LR__5385
30c67                 | 	byte	
30c67     00          | 	byte	0
30c68                 | LR__5386
30c68     2F 73 64 2F 
30c6c     6D 65 64 69 
30c70     61 2F 73 2F | 	byte	"/sd/media/s/"
30c74     00          | 	byte	0
30c75                 | LR__5387
30c75     53 79 73 74 
30c79     65 6D 20 65 
30c7d     72 72 6F 72 
30c81     20          | 	byte	"System error "
30c82     00          | 	byte	0
30c83                 | LR__5388
30c83     3A 20       | 	byte	": "
30c85     00          | 	byte	0
30c86                 | LR__5389
30c86                 | 	byte	
30c86     00          | 	byte	0
30c87                 | LR__5390
30c87     6E 6F 6E 61 
30c8b     6D 65 2E 62 
30c8f     61 73       | 	byte	"noname.bas"
30c91     00          | 	byte	0
30c92                 | LR__5391
30c92     66 69 6C 65 
30c96     6E 61 6D 65 
30c9a     20 65 78 70 
30c9e     65 63 74 65 
30ca2     64          | 	byte	"filename expected"
30ca3     00          | 	byte	0
30ca4                 | LR__5392
30ca4     72 65 61 64 | 	byte	"read"
30ca8     00          | 	byte	0
30ca9                 | LR__5393
30ca9     77 72 69 74 
30cad     65          | 	byte	"write"
30cae     00          | 	byte	0
30caf                 | LR__5394
30caf     61 70 70 65 
30cb3     6E 64       | 	byte	"append"
30cb5     00          | 	byte	0
30cb6                 | LR__5395
30cb6     63 68 61 6E 
30cba     6E 65 6C 23 
30cbe     20 65 78 70 
30cc2     65 63 74 65 
30cc6     64          | 	byte	"channel# expected"
30cc7     00          | 	byte	0
30cc8                 | LR__5396
30cc8     4F 70 65 6E 
30ccc     3A 20 69 6E 
30cd0     76 61 6C 69 
30cd4     64 20 6D 6F 
30cd8     64 65       | 	byte	"Open: invalid mode"
30cda     00          | 	byte	0
30cdb                 | LR__5397
30cdb     63 68 61 6E 
30cdf     6E 65 6C 23 
30ce3     20 65 78 70 
30ce7     65 63 74 65 
30ceb     64          | 	byte	"channel# expected"
30cec     00          | 	byte	0
30ced                 | LR__5398
30ced     45 72 72 6F 
30cf1     72 20       | 	byte	"Error "
30cf3     00          | 	byte	0
30cf4                 | LR__5399
30cf4     3A 20       | 	byte	": "
30cf6     00          | 	byte	0
30cf7                 | LR__5400
30cf7                 | 	byte	
30cf7     00          | 	byte	0
30cf8                 | LR__5401
30cf8                 | 	byte	
30cf8     00          | 	byte	0
30cf9                 | LR__5402
30cf9     72 6E 64 3A 
30cfd     20          | 	byte	"rnd: "
30cfe     00          | 	byte	0
30cff                 | LR__5403
30cff     72 6E 64 3A 
30d03     20          | 	byte	"rnd: "
30d04     00          | 	byte	0
30d05                 | LR__5404
30d05     67 65 74 65 
30d09     6E 76 73 75 
30d0d     73 74 61 69 
30d11     6E 3A 20    | 	byte	"getenvsustain: "
30d14     00          | 	byte	0
30d15                 | LR__5405
30d15     73 69 6E 3A 
30d19     20          | 	byte	"sin: "
30d1a     00          | 	byte	0
30d1b                 | LR__5406
30d1b     6D 69 64 24 
30d1f     3A 20       | 	byte	"mid$: "
30d21     00          | 	byte	0
30d22                 | LR__5407
30d22     6D 69 64 24 
30d26     3A 20       | 	byte	"mid$: "
30d28     00          | 	byte	0
30d29                 | LR__5408
30d29     72 69 67 68 
30d2d     74 24 3A 20 | 	byte	"right$: "
30d31     00          | 	byte	0
30d32                 | LR__5409
30d32     72 69 67 68 
30d36     74 24 3A 20 | 	byte	"right$: "
30d3a     00          | 	byte	0
30d3b                 | LR__5410
30d3b     6C 65 66 74 
30d3f     24 3A 20    | 	byte	"left$: "
30d42     00          | 	byte	0
30d43                 | LR__5411
30d43     6C 65 66 74 
30d47     24 3A 20    | 	byte	"left$: "
30d4a     00          | 	byte	0
30d4b                 | LR__5412
30d4b     61 73 63 3A 
30d4f     20          | 	byte	"asc: "
30d50     00          | 	byte	0
30d51                 | LR__5413
30d51     61 73 63 3A 
30d55     20          | 	byte	"asc: "
30d56     00          | 	byte	0
30d57                 | LR__5414
30d57     6C 65 6E 3A 
30d5b     20          | 	byte	"len: "
30d5c     00          | 	byte	0
30d5d                 | LR__5415
30d5d     6C 65 6E 3A 
30d61     20          | 	byte	"len: "
30d62     00          | 	byte	0
30d63                 | LR__5416
30d63     63 68 72 24 
30d67     3A 20       | 	byte	"chr$: "
30d69     00          | 	byte	0
30d6a                 | LR__5417
30d6a     76 61 6C 3A 
30d6e     20          | 	byte	"val: "
30d6f     00          | 	byte	0
30d70                 | LR__5418
30d70     76 61 6C 3A 
30d74     20          | 	byte	"val: "
30d75     00          | 	byte	0
30d76                 | LR__5419
30d76     24          | 	byte	"$"
30d77     00          | 	byte	0
30d78                 | LR__5420
30d78     26 68       | 	byte	"&h"
30d7a     00          | 	byte	0
30d7b                 | LR__5421
30d7b     25          | 	byte	"%"
30d7c     00          | 	byte	0
30d7d                 | LR__5422
30d7d     26 62       | 	byte	"&b"
30d7f     00          | 	byte	0
30d80                 | LR__5423
30d80     68 65 78 24 
30d84     3A 20       | 	byte	"hex$: "
30d86     00          | 	byte	0
30d87                 | LR__5424
30d87     62 69 6E 24 
30d8b     3A 20       | 	byte	"bin$: "
30d8d     00          | 	byte	0
30d8e                 | LR__5425
30d8e     63 6F 73 3A 
30d92     20          | 	byte	"cos: "
30d93     00          | 	byte	0
30d94                 | LR__5426
30d94     74 61 6E 3A 
30d98     20          | 	byte	"tan: "
30d99     00          | 	byte	0
30d9a                 | LR__5427
30d9a     61 73 69 6E 
30d9e     3A 20       | 	byte	"asin: "
30da0     00          | 	byte	0
30da1                 | LR__5428
30da1     61 63 6F 73 
30da5     3A 20       | 	byte	"acos: "
30da7     00          | 	byte	0
30da8                 | LR__5429
30da8     61 74 6E 3A 
30dac     20          | 	byte	"atn: "
30dad     00          | 	byte	0
30dae                 | LR__5430
30dae     73 71 72 3A 
30db2     20          | 	byte	"sqr: "
30db3     00          | 	byte	0
30db4                 | LR__5431
30db4     73 74 69 63 
30db8     6B 3A 20    | 	byte	"stick: "
30dbb     00          | 	byte	0
30dbc                 | LR__5432
30dbc     73 74 72 69 
30dc0     67 3A 20    | 	byte	"strig: "
30dc3     00          | 	byte	0
30dc4                 | LR__5433
30dc4     67 65 74 70 
30dc8     69 78 65 6C 
30dcc     3A 20       | 	byte	"getpixel: "
30dce     00          | 	byte	0
30dcf                 | LR__5434
30dcf     6C 6F 67 3A 
30dd3     20          | 	byte	"log: "
30dd4     00          | 	byte	0
30dd5                 | LR__5435
30dd5     50 72 69 6E 
30dd9     74 20 74 6F 
30ddd     20 63 68 61 
30de1     6E 6E 65 6C 
30de5     20          | 	byte	"Print to channel "
30de6     00          | 	byte	0
30de7                 | LR__5436
30de7     20 42 41 53 
30deb     49 43 20 62 
30def     79 74 65 73 
30df3     20 66 72 65 
30df7     65          | 	byte	" BASIC bytes free"
30df8     00          | 	byte	0
30df9                 | LR__5437
30df9                 | 	byte	
30df9     00          | 	byte	0
30dfa                 | LR__5438
30dfa     2F 73 64 2F 
30dfe     62 61 73    | 	byte	"/sd/bas"
30e01     00          | 	byte	0
30e02                 | LR__5439
30e02     57 6F 72 6B 
30e06     69 6E 67 20 
30e0a     64 69 72 65 
30e0e     63 74 6F 72 
30e12     79 3A 20    | 	byte	"Working directory: "
30e15     00          | 	byte	0
30e16                 | LR__5440
30e16     2A          | 	byte	"*"
30e17     00          | 	byte	0
30e18                 | LR__5441
30e18                 | 	byte	
30e18     00          | 	byte	0
30e19                 | LR__5442
30e19     5B 64 69 72 
30e1d     5D 20       | 	byte	"[dir] "
30e1f     00          | 	byte	0
30e20                 | LR__5443
30e20     2A          | 	byte	"*"
30e21     00          | 	byte	0
30e22                 | LR__5444
30e22                 | 	byte	
30e22     00          | 	byte	0
30e23                 | LR__5445
30e23     2D 2D 2D 2D 
30e27     2D 6D 6F 72 
30e2b     65 2C 20 70 
30e2f     72 65 73 73 
30e33     20 61 6E 79 
30e37     20 6B 65 79 | 	byte	"-----more, press any key"
30e3b     00          | 	byte	0
30e3c                 | LR__5446
30e3c     20 20 20 20 
      ...             
30e54     20 20 20 20 
30e58     20          | 	byte	"                             "
30e59     00          | 	byte	0
30e5a                 | LR__5447
30e5a     2F          | 	byte	"/"
30e5b     00          | 	byte	0
30e5c                 | LR__5448
30e5c     2F 73 64 2F 
30e60     62 69 6E 2F | 	byte	"/sd/bin/"
30e64     00          | 	byte	0
30e65                 | LR__5449
30e65     53 79 73 74 
30e69     65 6D 20 65 
30e6d     72 72 6F 72 
30e71     20          | 	byte	"System error "
30e72     00          | 	byte	0
30e73                 | LR__5450
30e73     3A 20       | 	byte	": "
30e75     00          | 	byte	0
30e76                 | LR__5451
30e76                 | 	byte	
30e76     00          | 	byte	0
30e77                 | LR__5452
30e77     45 78 70 65 
30e7b     63 74 65 64 
30e7f     20 6E 75 6D 
30e83     62 65 72 2C 
30e87     20 67 6F 74 
30e8b     20 73 6F 6D 
30e8f     65 74 68 69 
30e93     6E 67 20 65 
30e97     6C 73 65 2E | 	byte	"Expected number, got something else."
30e9b     00          | 	byte	0
30e9c                 | LR__5453
30e9c     43 61 6E 6E 
30ea0     6F 74 20 61 
30ea4     64 64 20 61 
30ea8     20 6E 75 6D 
30eac     62 65 72 20 
30eb0     74 6F 20 61 
30eb4     20 73 74 72 
30eb8     69 6E 67 2E | 	byte	"Cannot add a number to a string."
30ebc     00          | 	byte	0
30ebd                 | LR__5454
30ebd     43 61 6E 6E 
30ec1     6F 74 20 73 
30ec5     75 62 73 74 
30ec9     72 61 63 74 
30ecd     20 73 74 72 
30ed1     69 6E 67 73 
30ed5     2E          | 	byte	"Cannot substract strings."
30ed6     00          | 	byte	0
30ed7                 | LR__5455
30ed7     55 6E 6B 6E 
30edb     6F 77 6E 20 
30edf     65 72 72 6F 
30ee3     72 20 77 68 
30ee7     69 6C 65 20 
30eeb     61 64 64 69 
30eef     6E 67 2E    | 	byte	"Unknown error while adding."
30ef2     00          | 	byte	0
30ef3                 | LR__5456
30ef3     55 6E 6B 6E 
30ef7     6F 77 6E 20 
30efb     65 72 72 6F 
30eff     72 20 77 68 
30f03     69 6C 65 20 
30f07     73 75 62 73 
30f0b     74 72 61 63 
30f0f     74 69 6E 67 
30f13     2E          | 	byte	"Unknown error while substracting."
30f14     00          | 	byte	0
30f15                 | LR__5457
30f15     43 61 6E 6E 
30f19     6F 74 20 64 
30f1d     6F 20 6C 6F 
30f21     67 69 63 20 
30f25     6F 70 65 72 
30f29     61 74 69 6F 
30f2d     6E 20 6F 6E 
30f31     20 73 74 72 
30f35     69 6E 67 20 
30f39     6F 72 20 66 
30f3d     6C 6F 61 74 
30f41     2E          | 	byte	"Cannot do logic operation on string or float."
30f42     00          | 	byte	0
30f43                 | LR__5458
30f43     55 6E 6B 6E 
30f47     6F 77 6E 20 
30f4b     65 72 72 6F 
30f4f     72 20 77 68 
30f53     69 6C 65 20 
30f57     64 6F 69 6E 
30f5b     67 20 6C 6F 
30f5f     67 69 63 20 
30f63     6F 70 65 72 
30f67     61 74 69 6F 
30f6b     6E 2E       | 	byte	"Unknown error while doing logic operation."
30f6d     00          | 	byte	0
30f6e                 | LR__5459
30f6e     43 61 6E 6E 
30f72     6F 74 20 6D 
30f76     75 6C 74 69 
30f7a     70 6C 79 20 
30f7e     73 74 72 69 
30f82     6E 67 73 2E | 	byte	"Cannot multiply strings."
30f86     00          | 	byte	0
30f87                 | LR__5460
30f87     55 6E 6B 6E 
30f8b     6F 77 6E 20 
30f8f     65 72 72 6F 
30f93     72 20 77 68 
30f97     69 6C 65 20 
30f9b     6D 75 6C 74 
30f9f     69 70 6C 79 
30fa3     69 6E 67 2E | 	byte	"Unknown error while multiplying."
30fa7     00          | 	byte	0
30fa8                 | LR__5461
30fa8     43 61 6E 6E 
30fac     6F 74 20 64 
30fb0     69 76 69 64 
30fb4     65 20 73 74 
30fb8     72 69 6E 67 
30fbc     73 2E       | 	byte	"Cannot divide strings."
30fbe     00          | 	byte	0
30fbf                 | LR__5462
30fbf     55 6E 6B 6E 
30fc3     6F 77 6E 20 
30fc7     65 72 72 6F 
30fcb     72 20 77 68 
30fcf     69 6C 65 20 
30fd3     64 69 76 69 
30fd7     64 69 6E 67 
30fdb     2E          | 	byte	"Unknown error while dividing."
30fdc     00          | 	byte	0
30fdd                 | LR__5463
30fdd     43 61 6E 6E 
30fe1     6F 74 20 63 
30fe5     6F 6D 70 75 
30fe9     74 65 20 61 
30fed     20 70 6F 77 
30ff1     65 72 20 6F 
30ff5     66 20 61 20 
30ff9     73 74 72 69 
30ffd     6E 67 2E    | 	byte	"Cannot compute a power of a string."
31000     00          | 	byte	0
31001                 | LR__5464
31001     55 6E 6B 6E 
31005     6F 77 6E 20 
31009     65 72 72 6F 
3100d     72 20 77 68 
31011     69 6C 65 20 
31015     63 6F 6D 70 
31019     75 74 69 6E 
3101d     67 20 61 20 
31021     70 6F 77 65 
31025     72 2E       | 	byte	"Unknown error while computing a power."
31027     00          | 	byte	0
31028                 | LR__5465
31028     52 69 67 68 
3102c     74 20 70 61 
31030     72 65 6E 74 
31034     68 65 73 69 
31038     73 20 65 78 
3103c     70 65 63 74 
31040     65 64 2E    | 	byte	"Right parenthesis expected."
31043     00          | 	byte	0
31044                 | LR__5466
31044     45 78 70 65 
31048     63 74 65 64 
3104c     20 73 74 72 
31050     69 6E 67 2E | 	byte	"Expected string."
31054     00          | 	byte	0
31055                 | LR__5467
31055     45 78 70 65 
31059     63 74 65 64 
3105d     20 66 6C 6F 
31061     61 74 2E    | 	byte	"Expected float."
31064     00          | 	byte	0
31065                 | LR__5468
31065     45 78 70 65 
31069     63 74 65 64 
3106d     20 75 6E 73 
31071     69 67 6E 65 
31075     64 20 69 6E 
31079     74 65 67 65 
3107d     72 2E       | 	byte	"Expected unsigned integer."
3107f     00          | 	byte	0
31080                 | LR__5469
31080     45 78 70 65 
31084     63 74 65 64 
31088     20 69 6E 74 
3108c     65 67 65 72 
31090     2E          | 	byte	"Expected integer."
31091     00          | 	byte	0
31092                 | LR__5470
31092     4E 6F 20 6D 
31096     6F 72 65 20 
3109a     76 61 72 69 
3109e     61 62 6C 65 
310a2     20 73 6C 6F 
310a6     74 73 2E    | 	byte	"No more variable slots."
310a9     00          | 	byte	0
310aa                 | LR__5471
310aa     56 61 72 69 
310ae     61 62 6C 65 
310b2     20 6E 6F 74 
310b6     20 66 6F 75 
310ba     6E 64 2E    | 	byte	"Variable not found."
310bd     00          | 	byte	0
310be                 | LR__5472
310be     43 6F 6D 6D 
310c2     61 20 65 78 
310c6     70 65 63 74 
310ca     65 64 2E    | 	byte	"Comma expected."
310cd     00          | 	byte	0
310ce                 | LR__5473
310ce     43 6F 6D 6D 
310d2     61 20 6F 72 
310d6     20 73 65 6D 
310da     69 63 6F 6C 
310de     6F 6E 20 65 
310e2     78 70 65 63 
310e6     74 65 64 2E | 	byte	"Comma or semicolon expected."
310ea     00          | 	byte	0
310eb                 | LR__5474
310eb     55 6E 6B 6E 
310ef     6F 77 6E 20 
310f3     63 6F 6D 6D 
310f7     61 6E 64 2E | 	byte	"Unknown command."
310fb     00          | 	byte	0
310fc                 | LR__5475
310fc     53 74 61 63 
31100     6B 20 75 6E 
31104     64 65 72 66 
31108     6C 6F 77 2E | 	byte	"Stack underflow."
3110c     00          | 	byte	0
3110d                 | LR__5476
3110d     43 61 6E 6E 
31111     6F 74 20 65 
31115     78 65 63 75 
31119     74 65 20 67 
3111d     6F 74 6F 20 
31121     69 6E 20 74 
31125     68 65 20 69 
31129     6D 6D 65 64 
3112d     69 61 74 65 
31131     20 6D 6F 64 
31135     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
31137     00          | 	byte	0
31138                 | LR__5477
31138     43 61 6E 6E 
3113c     6F 74 20 6C 
31140     6F 61 64 20 
31144     66 72 6F 6D 
31148     20 74 68 69 
3114c     73 20 66 69 
31150     6C 65 2E    | 	byte	"Cannot load from this file."
31153     00          | 	byte	0
31154                 | LR__5478
31154     54 68 65 20 
31158     70 72 6F 67 
3115c     72 61 6D 20 
31160     69 73 20 65 
31164     6D 70 74 79 
31168     2E          | 	byte	"The program is empty."
31169     00          | 	byte	0
3116a                 | LR__5479
3116a     49 66 20 61 
3116e     66 74 65 72 
31172     20 69 66 2E | 	byte	"If after if."
31176     00          | 	byte	0
31177                 | LR__5480
31177     45 6D 70 74 
3117b     79 20 65 78 
3117f     70 72 65 73 
31183     73 69 6F 6E 
31187     2E          | 	byte	"Empty expression."
31188     00          | 	byte	0
31189                 | LR__5481
31189     53 74 72 69 
3118d     6E 67 20 65 
31191     78 70 65 63 
31195     74 65 64 2E | 	byte	"String expected."
31199     00          | 	byte	0
3119a                 | LR__5482
3119a     49 6E 74 65 
3119e     72 70 72 65 
311a2     74 65 72 20 
311a6     69 6E 74 65 
311aa     72 6E 61 6C 
311ae     20 65 72 72 
311b2     6F 72 2E    | 	byte	"Interpreter internal error."
311b5     00          | 	byte	0
311b6                 | LR__5483
311b6     45 78 70 65 
311ba     63 74 65 64 
311be     20 61 73 73 
311c2     69 67 6E 2E | 	byte	"Expected assign."
311c6     00          | 	byte	0
311c7                 | LR__5484
311c7     45 78 70 65 
311cb     63 74 65 64 
311cf     20 27 74 6F 
311d3     27 2E       | 	byte	"Expected 'to'."
311d5     00          | 	byte	0
311d6                 | LR__5485
311d6     45 78 70 65 
311da     63 74 65 64 
311de     20 69 6E 74 
311e2     65 67 65 72 
311e6     20 76 61 72 
311ea     69 61 62 6C 
311ee     65 2E       | 	byte	"Expected integer variable."
311f0     00          | 	byte	0
311f1                 | LR__5486
311f1     55 6E 69 6E 
311f5     69 74 69 61 
311f9     6C 69 7A 65 
311fd     64 20 76 61 
31201     72 69 61 62 
31205     6C 65 20 69 
31209     6E 20 27 6E 
3120d     65 78 74 27 
31211     2C 20 75 73 
31215     65 20 27 66 
31219     6F 72 27 20 
3121d     62 65 66 6F 
31221     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
31224     00          | 	byte	0
31225                 | LR__5487
31225     4E 6F 20 6D 
31229     6F 72 65 20 
3122d     73 6C 6F 74 
31231     73 20 66 6F 
31235     72 20 27 66 
31239     6F 72 27 2E | 	byte	"No more slots for 'for'."
3123d     00          | 	byte	0
3123e                 | LR__5488
3123e     27 4E 65 78 
31242     74 27 20 64 
31246     6F 65 73 6E 
3124a     27 74 20 6D 
3124e     61 74 63 68 
31252     20 27 66 6F 
31256     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
31259     00          | 	byte	0
3125a                 | LR__5489
3125a     27 47 6F 74 
3125e     6F 27 20 74 
31262     61 72 67 65 
31266     74 20 6C 69 
3126a     6E 65 20 6E 
3126e     6F 74 20 66 
31272     6F 75 6E 64 
31276     2E          | 	byte	"'Goto' target line not found."
31277     00          | 	byte	0
31278                 | LR__5490
31278     42 61 64 20 
3127c     6E 75 6D 62 
31280     65 72 20 6F 
31284     66 20 70 61 
31288     72 61 6D 65 
3128c     74 65 72 73 | 	byte	"Bad number of parameters"
31290     00          | 	byte	0
31291                 | LR__5491
31291     46 75 6E 63 
31295     74 69 6F 6E 
31299     20 75 6E 64 
3129d     65 66 69 6E 
312a1     65 64 20 66 
312a5     6F 72 20 73 
312a9     74 72 69 6E 
312ad     67 73       | 	byte	"Function undefined for strings"
312af     00          | 	byte	0
312b0                 | LR__5492
312b0     42 61 64 20 
312b4     70 61 72 61 
312b8     6D 65 74 65 
312bc     72 2E       | 	byte	"Bad parameter."
312be     00          | 	byte	0
312bf                 | LR__5493
312bf     43 61 6E 6E 
312c3     6F 74 20 64 
312c7     65 63 6C 61 
312cb     72 65 20 61 
312cf     6E 20 61 72 
312d3     72 61 79 3A 
312d7     20 74 68 65 
312db     20 76 61 72 
312df     69 61 62 6C 
312e3     65 20 65 78 
312e7     69 73 74 73 
312eb     2E          | 	byte	"Cannot declare an array: the variable exists."
312ec     00          | 	byte	0
312ed                 | LR__5494
312ed     45 78 70 65 
312f1     63 74 65 64 
312f5     20 27 28 27 
312f9     2E          | 	byte	"Expected '('."
312fa     00          | 	byte	0
312fb                 | LR__5495
312fb     45 78 70 65 
312ff     63 74 65 64 
31303     20 27 29 27 
31307     20 6F 72 20 
3130b     27 2C 27 2E | 	byte	"Expected ')' or ','."
3130f     00          | 	byte	0
31310                 | LR__5496
31310     4E 6F 20 6D 
31314     6F 72 65 20 
31318     74 68 61 6E 
3131c     20 33 20 64 
31320     69 6D 65 6E 
31324     73 69 6F 6E 
31328     73 20 73 75 
3132c     70 70 6F 72 
31330     74 65 64    | 	byte	"No more than 3 dimensions supported"
31333     00          | 	byte	0
31334                 | LR__5497
31334     56 61 72 69 
31338     61 62 6C 65 
3133c     20 6E 61 6D 
31340     65 20 65 78 
31344     70 65 63 74 
31348     65 64       | 	byte	"Variable name expected"
3134a     00          | 	byte	0
3134b                 | LR__5498
3134b     54 79 70 65 
3134f     20 6E 61 6D 
31353     65 20 65 78 
31357     70 65 63 74 
3135b     65 64       | 	byte	"Type name expected"
3135d     00          | 	byte	0
3135e                 | LR__5499
3135e     54 79 70 65 
31362     20 6E 6F 74 
31366     20 73 75 70 
3136a     70 6F 72 74 
3136e     65 64 20 79 
31372     65 74       | 	byte	"Type not supported yet"
31374     00          | 	byte	0
31375                 | LR__5500
31375     41 72 72 61 
31379     79 20 69 6E 
3137d     64 65 78 20 
31381     6F 75 74 20 
31385     6F 66 20 72 
31389     61 6E 67 65 | 	byte	"Array index out of range"
3138d     00          | 	byte	0
3138e                 | LR__5501
3138e     42 61 64 20 
31392     74 79 70 65 
31396     20 77 68 69 
3139a     6C 65 20 61 
3139e     73 73 69 67 
313a2     6E 69 6E 67 
313a6     20 74 6F 20 
313aa     61 72 72 61 
313ae     79          | 	byte	"Bad type while assigning to array"
313af     00          | 	byte	0
313b0                 | LR__5502
313b0     45 72 72 6F 
313b4     72 20       | 	byte	"Error "
313b6     00          | 	byte	0
313b7                 | LR__5503
313b7     3A 20       | 	byte	": "
313b9     00          | 	byte	0
313ba                 | LR__5504
313ba     2F 73 64    | 	byte	"/sd"
313bd     00          | 	byte	0
313be                 | LR__5505
313be     2F 73 64 2F 
313c2     62 61 73    | 	byte	"/sd/bas"
313c5     00          | 	byte	0
313c6                 | LR__5506
313c6     2F 73 64 2F 
313ca     62 61 73    | 	byte	"/sd/bas"
313cd     00          | 	byte	0
313ce                 | LR__5507
313ce     20 42 41 53 
313d2     49 43 20 62 
313d6     79 74 65 73 
313da     20 66 72 65 
313de     65          | 	byte	" BASIC bytes free"
313df     00          | 	byte	0
313e0                 | LR__5508
313e0     52 65 61 64 
313e4     79          | 	byte	"Ready"
313e5     00          | 	byte	0
313e6                 | LR__5509
313e6     6E 6F 6E 61 
313ea     6D 65 2E 62 
313ee     61 73       | 	byte	"noname.bas"
313f0     00          | 	byte	0
313f1                 | LR__5510
313f1                 | 	byte	
313f1     00          | 	byte	0
313f2                 | LR__5511
313f2                 | 	byte	
313f2     00          | 	byte	0
313f3                 | LR__5512
313f3                 | 	byte	
313f3     00          | 	byte	0
313f4                 | 	alignl
313f4                 | _dat_
313f4     00 00 00 00 
313f8     00 00 00 00 
313fc     00 00 00 00 
31400     00 00 00 00 | 	byte	$00[16]
31404     61 41 17 0E 
31408     62 42 00 00 
3140c     63 43 19 10 
31410     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
31414     65 45 18 0F 
31418     66 46 00 00 
3141c     67 47 00 00 
31420     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
31424     69 49 00 00 
31428     6A 4A 00 00 
3142c     6B 4B 00 00 
31430     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
31434     6D 4D 00 00 
31438     6E 4E 1A 11 
3143c     6F 4F 1E 15 
31440     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
31444     71 51 00 00 
31448     72 52 00 00 
3144c     73 53 1B 12 
31450     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
31454     75 55 00 00 
31458     76 56 00 00 
3145c     77 57 00 00 
31460     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
31464     79 59 00 00 
31468     7A 5A 1D 14 
3146c     31 21 04 00 
31470     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
31474     33 23 06 00 
31478     34 24 07 00 
3147c     35 25 08 00 
31480     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
31484     37 26 0A 00 
31488     38 2A 0B 00 
3148c     39 28 0C 00 
31490     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
31494     8D 8D 00 00 
31498     9B 9B 00 00 
3149c     88 88 00 00 
314a0     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
314a4     20 20 00 00 
314a8     2D 5F 00 00 
314ac     3D 2B 00 00 
314b0     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
314b4     5D 7D 00 00 
314b8     5C 7C 00 00 
314bc     23 7E 00 00 
314c0     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
314c4     27 22 00 00 
314c8     60 7E 03 00 
314cc     2C 3C 00 00 
314d0     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
314d4     2F 3F 00 00 
314d8     B9 B9 00 00 
314dc     BA 00 00 00 
314e0     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
314e4     BC 00 00 00 
314e8     BD 00 00 00 
314ec     BE 00 00 00 
314f0     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
314f4     C0 00 00 00 
314f8     C1 00 00 00 
314fc     C2 00 00 00 
31500     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
31504     C4 00 00 00 
31508     C5 00 00 00 
3150c     C6 00 00 00 
31510     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
31514     C8 00 00 00 
31518     C9 00 00 00 
3151c     CA 00 00 00 
31520     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
31524     7F 7F 00 00 
31528     CC 00 00 00 
3152c     CD 00 00 00 
31530     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
31534     CF 00 00 00 
31538     D0 00 00 00 
3153c     D1 00 00 00 
31540     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
31544     2F 2F 00 00 
31548     2A 2A 00 00 
3154c     2D 2D 00 00 
31550     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
31554     8D 8D 00 00 
31558     31 31 00 00 
3155c     32 32 00 00 
31560     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
31564     34 34 00 00 
31568     35 35 00 00 
3156c     36 36 00 00 
31570     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
31574     38 38 00 00 
31578     39 39 00 00 
3157c     30 30 00 00 
31580     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
31584     5C 7C 00 00 
31588     00 00 00 00 
3158c     00 00 00 00 
31590     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
31594     00 00 00 00 
      ...             
315ec     00 00 00 00 
315f0     00 00 00 00 | 	byte	$00[96]
315f4     2B 00 A6 F2 
315f8     24 A7 09 80 
315fc     5B 88 4D 89 
31600     80 88 A5 88 | atari_spl file "atari.spl"
31604     6D 88 B8 88 
31608     80 88 CB 88 
3160c     92 88 A5 88 
31610     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
31614     A5 88 CA 88 
31618     A6 88 DD 88 
3161c     B8 88 AB 89 
31620     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
31624     C8 AD C6 F1 
31628     91 06 B6 FF 
3162c     13 00 4A 00 
31630     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
31634     5D 00 5E 00 
31638     5D 00 5E 00 
3163c     5E 00 5D 00 
31640     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
31644     38 00 83 00 
31648     25 00 83 00 
3164c     C3 FE D1 04 
31650     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
31654     48 88 38 85 
31658     41 8A CB 88 
3165c     28 89 B8 88 
31660     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
31664     15 89 03 89 
31668     02 89 15 89 
3166c     16 89 15 89 
31670     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
31674     15 89 3A 89 
31678     72 89 E3 89 
3167c     52 83 AD 97 
31680     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
31684     0C 02 B6 FF 
31688     E1 00 A8 00 
3168c     F3 00 A8 00 
31690     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
31694     CE 00 CD 00 
31698     CD 00 BA 00 
3169c     E1 00 BB 00 
316a0     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
316a4     DF 00 C9 FF 
316a8     E6 01 B6 06 
316ac     EE DD 8D 98 
316b0     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
316b4     97 89 73 89 
316b8     3B 89 60 89 
316bc     60 89 60 89 
316c0     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
316c4     73 89 72 89 
316c8     85 89 73 89 
316cc     AA 89 60 89 
316d0     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
316d4     E8 8A 18 86 
316d8     92 88 A5 C2 
316dc     E0 00 C3 05 
316e0     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
316e4     F2 00 64 01 
316e8     06 01 3E 01 
316ec     2B 01 2B 01 
316f0     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
316f4     2B 01 2A 01 
316f8     2B 01 2B 01 
316fc     2B 01 18 01 
31700     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
31704     39 07 61 F3 
31708     C0 AF 37 85 
3170c     0F 88 8B 8A 
31710     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
31714     AB 89 D0 89 
31718     AB 89 D0 89 
3171c     D0 89 CF 89 
31720     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
31724     D0 89 F5 89 
31728     BD 89 08 8A 
3172c     CF 89 E8 8A 
31730     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
31734     53 B3 0D F8 
31738     F4 07 38 00 
3173c     63 01 63 01 
31740     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
31744     88 01 88 01 
31748     76 01 88 01 
3174c     88 01 89 01 
31750     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
31754     75 01 AE 01 
31758     76 01 88 01 
3175c     4A 00 46 06 
31760     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
31764     08 8A 9A 86 
31768     33 8B 08 8A 
3176c     2D 8A F5 89 
31770     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
31774     2D 8A 2D 8A 
31778     2E 8A 1B 8A 
3177c     40 8A 2D 8A 
31780     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
31784     2E 8A 79 8A 
31788     66 8A C8 8B 
3178c     72 82 2B 97 
31790     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
31794     1D 02 05 01 
31798     F8 01 C0 01 
3179c     0B 02 C0 01 
317a0     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
317a4     F9 01 D3 01 
317a8     F8 01 D3 01 
317ac     F8 01 D2 01 
317b0     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
317b4     E6 01 2B 01 
317b8     8E 02 5F 07 
317bc     F7 E2 ED 9C 
317c0     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
317c4     E8 8A 78 8A 
317c8     78 8A 65 8A 
317cc     8B 8A 78 8A 
317d0     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
317d4     8B 8A 9D 8A 
317d8     9D 8A 8B 8A 
317dc     C2 8A 78 8A 
317e0     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
317e4     70 8C 18 86 
317e8     8B 8A 23 C9 
317ec     CB 03 C4 05 
317f0     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
317f4     0B 02 7B 02 
317f8     1E 02 55 02 
317fc     30 02 43 02 
31800     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
31804     43 02 44 02 
31808     43 02 30 02 
3180c     68 02 31 02 
31810     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
31814     07 08 3F F7 
31818     73 B2 13 85 
3181c     15 89 ED 8B 
31820     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
31824     B0 8A FB 8A 
31828     D5 8A FA 8A 
3182c     E8 8A FB 8A 
31830     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
31834     E8 8A 21 8B 
31838     E7 8A 33 8B 
3183c     E8 8A 26 8C 
31840     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
31844     8D B0 27 F6 
31848     9C 08 AD 01 
3184c     7B 02 8D 02 
31850     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
31854     A1 02 A0 02 
31858     A1 02 A0 02 
3185c     A0 02 A0 02 
31860     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
31864     7B 02 D8 02 
31868     7B 02 C6 02 
3186c     3E 01 C3 05 
31870     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
31874     00 8C 2A 86 
31878     E0 8C FA 8A 
3187c     6A 8B FB 8A 
31880     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
31884     45 8B 45 8B 
31888     45 8B 6B 8B 
3188c     46 8B 59 8B 
31890     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
31894     6B 8B 6B 8B 
31898     6B 8B 6B 8B 
3189c     7D 8B 7D 8B 
318a0     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
318a4     90 8B 91 8B 
318a8     90 8B 90 8B 
318ac     A3 8B A3 8B 
318b0     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
318b4     B5 8B B6 8B 
318b8     B5 8B B5 8B 
318bc     B6 8B C8 8B 
318c0     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
318c4     C8 8B DA 8B 
318c8     DB 8B DB 8B 
318cc     DB 8B DC 8B 
318d0     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
318d4     EE 8B EE 8B 
318d8     00 8C 01 8C 
318dc     00 8C 01 8C 
318e0     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
318e4     12 8C 13 8C 
318e8     13 8C 26 8C 
318ec     26 8C 26 8C 
318f0     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
318f4     38 8C 38 8C 
318f8     38 8C 38 8C 
318fc     4B 8C 4B 8C 
31900     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
31904     5E 8C 5E 8C 
31908     5E 8C 5E 8C 
3190c     70 8C 70 8C 
31910     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
31914     70 8C 83 8C 
31918     83 8C 83 8C 
3191c     83 8C 96 8C 
31920     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
31924     95 8C A9 8C 
31928     A9 8C A8 8C 
3192c     A8 8C A8 8C 
31930     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
31934     BB 8C BB 8C 
31938     BB 8C CE 8C 
3193c     CE 8C CE 8C 
31940     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
31944     E0 8C E1 8C 
31948     E1 8C E0 8C 
3194c     F4 8C F2 8C 
31950     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
31954     05 8D 05 8D 
31958     06 8D 06 8D 
3195c     19 8D 19 8D 
31960     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
31964     18 8D 2B 8D 
31968     2B 8D 2B 8D 
3196c     2A 8D 3E 8D 
31970     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
31974     3E 8D 51 8D 
31978     50 8D 50 8D 
3197c     50 8D 51 8D 
31980     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
31984     63 8D 64 8D 
31988     76 8D 75 8D 
3198c     75 8D 76 8D 
31990     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
31994     88 8D 88 8D 
31998     89 8D 9B 8D 
3199c     9A 8D 9B 8D 
319a0     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
319a4     AD 8D AE 8D 
319a8     AD 8D AE 8D 
319ac     C1 8D C1 8D 
319b0     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
319b4     D3 8D D3 8D 
319b8     D3 8D D3 8D 
319bc     D3 8D E6 8D 
319c0     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
319c4     E6 8D E6 8D 
319c8     F9 8D F9 8D 
319cc     F9 8D F8 8D 
319d0     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
319d4     0B 8E 0B 8E 
319d8     1D 8E 1D 8E 
319dc     1E 8E 1E 8E 
319e0     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
319e4     31 8E 31 8E 
319e8     31 8E 42 8E 
319ec     43 8E 43 8E 
319f0     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
319f4     56 8E 56 8E 
319f8     55 8E 56 8E 
319fc     68 8E 69 8E 
31a00     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
31a04     69 8E 7B 8E 
31a08     7C 8E 7B 8E 
31a0c     7B 8E 8D 8E 
31a10     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
31a14     8D 8E A1 8E 
31a18     A0 8E A1 8E 
31a1c     A1 8E A0 8E 
31a20     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
31a24     B3 8E B3 8E 
31a28     C6 8E C5 8E 
31a2c     C6 8E C6 8E 
31a30     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
31a34     D8 8E D9 8E 
31a38     D8 8E EC 8E 
31a3c     EB 8E EC 8E 
31a40     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
31a44     FE 8E FE 8E 
31a48     FE 8E FE 8E 
31a4c     10 8F 10 8F 
31a50     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
31a54     11 8F 23 8F 
31a58     24 8F 23 8F 
31a5c     24 8F 37 8F 
31a60     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
31a64     36 8F 36 8F 
31a68     48 8F 49 8F 
31a6c     49 8F 49 8F 
31a70     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
31a74     5B 8F 5C 8F 
31a78     5B 8F 6E 8F 
31a7c     6E 8F 6E 8F 
31a80     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
31a84     81 8F 81 8F 
31a88     81 8F 81 8F 
31a8c     93 8F 93 8F 
31a90     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
31a94     93 8F A6 8F 
31a98     A6 8F A6 8F 
31a9c     A6 8F B9 8F 
31aa0     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
31aa4     B9 8F B9 8F 
31aa8     CC 8F CB 8F 
31aac     CB 8F CC 8F 
31ab0     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
31ab4     DF 8F DE 8F 
31ab8     DE 8F F1 8F 
31abc     F1 8F F1 8F 
31ac0     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
31ac4     03 90 04 90 
31ac8     04 90 04 90 
31acc     16 90 17 90 
31ad0     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
31ad4     29 90 28 90 
31ad8     29 90 28 90 
31adc     29 90 3C 90 
31ae0     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
31ae4     3C 90 4F 90 
31ae8     4E 90 4E 90 
31aec     4E 90 4E 90 
31af0     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
31af4     61 90 61 90 
31af8     73 90 74 90 
31afc     74 90 74 90 
31b00     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
31b04     87 90 86 90 
31b08     87 90 86 90 
31b0c     99 90 99 90 
31b10     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
31b14     AB 90 AB 90 
31b18     AC 90 AB 90 
31b1c     AB 90 BF 90 
31b20     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
31b24     BE 90 D1 90 
31b28     D0 90 D1 90 
31b2c     D1 90 D1 90 
31b30     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
31b34     E3 90 E4 90 
31b38     F6 90 F6 90 
31b3c     F6 90 F6 90 
31b40     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
31b44     09 91 0A 91 
31b48     0A 91 1C 91 
31b4c     1C 91 1C 91 
31b50     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
31b54     2F 91 2E 91 
31b58     2F 91 2F 91 
31b5c     2E 91 41 91 
31b60     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
31b64     41 91 53 91 
31b68     54 91 54 91 
31b6c     53 91 54 91 
31b70     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
31b74     67 91 67 91 
31b78     79 91 7A 91 
31b7c     79 91 78 91 
31b80     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
31b84     8C 91 8B 91 
31b88     8C 91 8C 91 
31b8c     9E 91 9E 91 
31b90     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
31b94     B1 91 B1 91 
31b98     B2 91 B1 91 
31b9c     B1 91 C4 91 
31ba0     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
31ba4     C4 91 D6 91 
31ba8     D7 91 D7 91 
31bac     D7 91 D6 91 
31bb0     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
31bb4     EA 91 EA 91 
31bb8     EA 91 FC 91 
31bbc     FC 91 FB 91 
31bc0     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
31bc4     0E 92 0F 92 
31bc8     0F 92 0E 92 
31bcc     21 92 21 92 
31bd0     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
31bd4     21 92 34 92 
31bd8     33 92 34 92 
31bdc     34 92 47 92 
31be0     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
31be4     46 92 47 92 
31be8     59 92 59 92 
31bec     59 92 59 92 
31bf0     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
31bf4     6C 92 6C 92 
31bf8     6B 92 7E 92 
31bfc     7E 92 7E 92 
31c00     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
31c04     92 92 91 92 
31c08     91 92 90 92 
31c0c     91 92 A4 92 
31c10     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
31c14     A3 92 B6 92 
31c18     B6 92 B7 92 
31c1c     B7 92 B6 92 
31c20     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
31c24     CA 92 C9 92 
31c28     CA 92 DC 92 
31c2c     DC 92 DC 92 
31c30     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
31c34     EF 92 EF 92 
31c38     EF 92 EF 92 
31c3c     01 93 01 93 
31c40     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
31c44     15 93 14 93 
31c48     14 93 14 93 
31c4c     14 93 27 93 
31c50     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
31c54     27 93 39 93 
31c58     3A 93 39 93 
31c5c     39 93 39 93 
31c60     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
31c64     4B 93 4C 93 
31c68     5F 93 5F 93 
31c6c     5F 93 5E 93 
31c70     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
31c74     5F 93 84 93 
31c78     4C 93 96 93 
31c7c     5F 93 AE 94 
31c80     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
31c84     7B C1 00 00 
31c88     00 00 00 00 
31c8c     00 00 00 00 
31c90     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
31c94     00 00 00 00 | 	byte	$00, $00, $00, $00
31c98     00 00 00 00 | zero long 0
31c9c     7A D7 00 80 
31ca0     87 8A 48 8F 
31ca4     EC 8C 76 8D 
31ca8     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
31cac     3C 8D 82 8D 
31cb0     42 8D 88 8D 
31cb4     8C 8D 8E 8D 
31cb8     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
31cbc     97 8D DE 8D 
31cc0     E1 8D F1 8E 
31cc4     D8 8C A3 83 
31cc8     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
31ccc     65 71 C9 65 
31cd0     FC 64 C4 65 
31cd4     C1 65 BF 65 
31cd8     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
31cdc     B6 65 B4 65 
31ce0     B2 65 AE 65 
31ce4     AC 65 ED 65 
31ce8     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
31cec     5E 65 25 66 
31cf0     FA 62 23 6B 
31cf4     B5 6C 61 0A 
31cf8     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
31cfc     5D 90 BE 8D 
31d00     47 8E C3 8D 
31d04     09 8E C9 8D 
31d08     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
31d0c     15 8E 19 8E 
31d10     1B 8E 62 8E 
31d14     64 8E 68 8E 
31d18     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
31d1c     B5 8E 4C 90 
31d20     FA 84 3C 9D 
31d24     98 13 79 6D 
31d28     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
31d2c     D9 66 50 66 
31d30     D4 66 4B 66 
31d34     8C 66 46 66 
31d38     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
31d3c     81 66 3A 66 
31d40     7C 66 36 66 
31d44     76 66 30 66 
31d48     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
31d4c     6B 66 88 72 
31d50     BF 37 E7 B7 
31d54     75 83 8B 8E 
31d58     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
31d5c     94 8E 96 8E 
31d60     DD 8E 9C 8E 
31d64     E2 8E A2 8E 
31d68     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
31d6c     EE 8E AE 8E 
31d70     38 8F B5 8E 
31d74     3F 8F FD 8E 
31d78     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
31d7c     A5 87 1E E3 
31d80     6D 5D FA 71 
31d84     41 64 25 67 
31d88     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
31d8c     D9 66 1A 67 
31d90     18 67 15 67 
31d94     12 67 0F 67 
31d98     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
31d9c     07 67 C0 66 
31da0     01 67 BC 66 
31da4     B8 66 DE 64 
31da8     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
31dac     43 E5 1F 8B 
31db0     14 8A F1 90 
31db4     1C 8F 63 8F 
31db8     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
31dbc     29 8F 6E 8F 
31dc0     72 8F 75 8F 
31dc4     34 8F BE 8F 
31dc8     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
31dcc     84 8F 87 8F 
31dd0     CC 8F 56 90 
31dd4     67 91 49 80 
31dd8     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
31ddc     46 77 A6 66 
31de0     E8 66 B0 67 
31de4     AD 67 ED 67 
31de8     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
31dec     A2 67 E3 67 
31df0     9D 67 9A 67 
31df4     98 67 94 67 
31df8     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
31dfc     49 67 CD 67 
31e00     28 65 5F 6E 
31e04     82 67 3A 01 
31e08     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
31e0c     C2 91 A9 8F 
31e10     EF 8F AE 8F 
31e14     F4 8F B5 8F 
31e18     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
31e1c     01 90 03 90 
31e20     07 90 09 90 
31e24     0C 90 53 90 
31e28     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
31e2c     18 90 44 93 
31e30     85 84 D6 9D 
31e34     87 1F 2F 75 
31e38     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
31e3c     C4 68 F6 67 
31e40     BE 68 F1 67 
31e44     76 68 2E 68 
31e48     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
31e4c     27 68 24 68 
31e50     64 68 1E 68 
31e54     5F 68 19 68 
31e58     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
31e5c     DC 68 56 72 
31e60     7E 36 C2 B8 
31e64     D7 84 73 90 
31e68     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
31e6c     7B 90 7F 90 
31e70     82 90 84 90 
31e74     CB 90 8B 90 
31e78     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
31e7c     D7 90 96 90 
31e80     20 91 59 90 
31e84     25 91 A2 90 
31e88     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
31e8c     D0 89 40 EE 
31e90     12 64 C4 71 
31e94     29 66 0C 69 
31e98     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
31e9c     C0 68 02 69 
31ea0     FE 68 FB 68 
31ea4     F9 68 F6 68 
31ea8     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
31eac     EE 68 A8 68 
31eb0     2C 69 5F 68 
31eb4     E2 68 81 66 
31eb8     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
31ebc     1E EB A6 8A 
31ec0     73 8B 5E 93 
31ec4     7B 90 48 91 
31ec8     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
31ecc     0D 91 11 91 
31ed0     14 91 16 91 
31ed4     5C 91 1C 91 
31ed8     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
31edc     68 91 AF 91 
31ee0     2A 91 B5 91 
31ee4     75 91 1A 94 
31ee8     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
31eec     70 0E CB 6C 
31ef0     5D 6E C4 67 
31ef4     99 69 54 69 
31ef8     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
31efc     D2 69 49 69 
31f00     89 69 86 69 
31f04     40 69 C4 69 
31f08     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
31f0c     35 69 76 69 
31f10     58 67 EB 6D 
31f14     E9 6D 89 0F 
31f18     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
31f1c     33 94 94 91 
31f20     D9 91 56 91 
31f24     E0 91 9F 91 
31f28     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
31f2c     EC 91 EE 91 
31f30     F1 91 F4 91 
31f34     F7 91 3D 92 
31f38     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
31f3c     46 92 21 94 
31f40     11 89 A4 9D 
31f44     FD 0E 8F 6C 
31f48     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
31f4c     28 6A E1 69 
31f50     65 6A 1F 6A 
31f54     5F 6A 1A 6A 
31f58     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
31f5c     54 6A 0F 6A 
31f60     4F 6A 09 6A 
31f64     06 6A 03 6A 
31f68     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
31f6c     23 68 69 77 
31f70     3A 4D 38 CA 
31f74     38 86 4E 91 
31f78     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
31f7c     64 92 24 92 
31f80     6A 92 2A 92 
31f84     70 92 30 92 
31f88     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
31f8c     7B 92 7E 92 
31f90     C5 92 84 92 
31f94     CB 92 8A 92 
31f98     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
31f9c     4D 8D F9 E2 
31fa0     97 59 FE 74 
31fa4     DB 68 6D 6A 
31fa8     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
31fac     A8 6A A5 6A 
31fb0     A3 6A 9F 6A 
31fb4     9D 6A 9B 6A 
31fb8     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
31fbc     D6 6A 8F 6A 
31fc0     CF 6A 46 6A 
31fc4     CA 6A E1 67 
31fc8     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
31fcc     D3 F7 15 92 
31fd0     90 8C BF 94 
31fd4     A6 92 EB 92 
31fd8     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
31fdc     B1 92 F7 92 
31fe0     FA 92 FD 92 
31fe4     00 93 02 93 
31fe8     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
31fec     4F 93 52 93 
31ff0     54 93 22 94 
31ff4     5A 93 8F 88 
31ff8     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
31ffc     1C 77 07 6C 
32000     E8 69 7A 6B 
32004     34 6B 75 6B 
32008     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
3200c     29 6B 26 6B 
32010     24 6B 21 6B 
32014     1D 6B 5E 6B 
32018     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
3201c     12 6B 52 6B 
32020     34 69 34 6E 
32024     BA 73 A4 24 
32028     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
3202c     7A 94 B3 93 
32030     72 93 31 93 
32034     78 93 7A 93 
32038     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
3203c     83 93 86 93 
32040     89 93 D0 93 
32044     D2 93 D5 93 
32048     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
3204c     DD 93 40 96 
32050     30 8B 99 9C 
32054     52 10 94 71 
32058     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
3205c     46 6C 79 6B 
32060     40 6C B7 6B 
32064     F7 6B B1 6B 
32068     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
3206c     EC 6B A5 6B 
32070     A2 6B 9F 6B 
32074     9D 6B 9A 6B 
32078     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
3207c     C8 6A E4 76 
32080     20 4B F9 CE 
32084     2E 8A 1A 92 
32088     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
3208c     FB 93 BA 93 
32090     01 94 03 94 
32094     4A 94 09 94 
32098     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
3209c     55 94 14 94 
320a0     9E 94 1A 94 
320a4     61 94 20 94 
320a8     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
320ac     3E 87 E5 CD 
320b0     5F 50 6C 78 
320b4     B5 6A 04 6C 
320b8     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
320bc     83 6C 7F 6C 
320c0     7C 6C 36 6C 
320c4     76 6C 74 6C 
320c8     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
320cc     6B 6C 25 6C 
320d0     66 6C 1F 6C 
320d4     1D 6C 41 6A 
320d8     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
320dc     BA FA FC 94 
320e0     5B 8D 97 96 
320e4     3B 94 C5 94 
320e8     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
320ec     89 94 8C 94 
320f0     8F 94 92 94 
320f4     94 94 DB 94 
320f8     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
320fc     E4 94 E7 94 
32100     2D 95 74 95 
32104     C8 96 15 89 
32108     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
3210c     CB 75 31 6F 
32110     7E 6B 10 6D 
32114     C9 6C 0A 6D 
32118     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
3211c     BD 6C FF 6C 
32120     FB 6C F9 6C 
32124     B2 6C F3 6C 
32128     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
3212c     A7 6C E8 6C 
32130     0D 6B 85 6F 
32134     C7 74 10 28 
32138     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
3213c     96 96 47 95 
32140     06 95 0A 95 
32144     0C 95 0F 95 
32148     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
3214c     17 95 5E 95 
32150     61 95 63 95 
32154     22 95 AC 95 
32158     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
3215c     72 95 17 98 
32160     59 8E 01 96 
32164     CF FC 5A 68 
32168     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
3216c     96 6D 50 6D 
32170     D5 6D 4A 6D 
32174     8C 6D 89 6D 
32178     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
3217c     80 6D 3A 6D 
32180     7A 6D 77 6D 
32184     75 6D 71 6D 
32188     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
3218c     18 6C BC 78 
32190     9A 4F 7E CF 
32194     1F 89 F1 93 
32198     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
3219c     D2 95 4E 95 
321a0     D7 95 53 95 
321a4     DD 95 E0 95 
321a8     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
321ac     A5 95 EB 95 
321b0     EE 95 F0 95 
321b4     37 96 B3 95 
321b8     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
321bc     1A 98 D5 8D 
321c0     C5 9F CD 0F 
321c4     0F 71 F3 73 
321c8     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
321cc     D9 6D 5E 6E 
321d0     D3 6D 58 6E 
321d4     12 6E 0F 6E 
321d8     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
321dc     49 6E BF 6D 
321e0     87 6E 76 6D 
321e4     81 6E 11 6B 
321e8     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
321ec     3F 09 44 95 
321f0     E5 8D 3F 99 
321f4     D4 95 A2 96 
321f8     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
321fc     23 96 69 96 
32200     6B 96 6E 96 
32204     71 96 74 96 
32208     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
3220c     BF 96 3C 96 
32210     C6 96 C8 96 
32214     A3 98 51 8D 
32218     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
3221c     CF 75 29 73 
32220     90 6C EC 6E 
32224     62 6E E7 6E 
32228     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
3222c     9A 6E 98 6E 
32230     95 6E 91 6E 
32234     8E 6E CF 6E 
32238     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
3223c     40 6E C3 6E 
32240     E8 6C 45 6F 
32244     A5 7B C9 35 
32248     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
3224c     2D 98 23 97 
32250     E1 96 A0 96 
32254     A4 96 EA 96 
32258     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
3225c     AF 96 F4 96 
32260     F8 96 3E 97 
32264     FD 96 43 97 
32268     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
3226c     08 97 6B 99 
32270     D6 92 88 91 
32274     D8 EE 84 66 
32278     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
3227c     2E 6F E7 6E 
32280     6C 6F 24 6F 
32284     21 6F 1F 6F 
32288     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
3228c     17 6F 13 6F 
32290     54 6F 0E 6F 
32294     0B 6F 4B 6F 
32298     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
3229c     27 6D 1C 7B 
322a0     19 59 9F DB 
322a4     66 8E BC 94 
322a8     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
322ac     67 97 26 97 
322b0     6D 97 2B 97 
322b4     72 97 32 97 
322b8     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
322bc     C1 97 7F 97 
322c0     C6 97 85 97 
322c4     CB 97 CE 97 
322c8     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
322cc     EC 8A C4 C6 
322d0     68 4C F4 7D 
322d4     63 6E E8 6E 
322d8     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
322dc     ED 6F A7 6F 
322e0     E7 6F A0 6F 
322e4     E1 6F 9B 6F 
322e8     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
322ec     D5 6F 8F 6F 
322f0     CE 6F 45 6F 
322f4     86 6F 68 6D 
322f8     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
322fc     C0 13 AD A2 
32300     A7 8E 79 99 
32304     E6 97 E8 97 
32308     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
3230c     F1 97 F3 97 
32310     F6 97 F9 97 
32314     FB 97 FE 97 
32318     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
3231c     4A 98 0A 98 
32320     93 98 0F 98 
32324     7F 9B BF 8C 
32328     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
3232c     91 7B 62 73 
32330     1A 6E B9 70 
32334     EB 6F B3 70 
32338     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
3233c     25 70 20 70 
32340     1E 70 1B 70 
32344     18 70 15 70 
32348     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
3234c     0D 70 09 70 
32350     07 70 03 70 
32354     01 70 FD 6F 
32358     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
3235c     F6 6F F2 6F 
32360     EF 6F EC 6F 
32364     2C 70 E6 6F 
32368     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
3236c     DD 6F 97 6F 
32370     D7 6F 84 6E 
32374     8F 6F 3F 7D 
32378     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
3237a     00 00 00 00 | zero1 long 0
3237e     FF FF FF FF 
32382     FF FF       | atarist_spl file "atarist.spl" '512
32384     00 00 00 00 
32388     00 00 00 00 
3238c     00 00       | 	byte	$00[10]
3238e     17 7F F2 7F 
32392     B2 7F 72 7F 
32396     33 7F F4 7E 
3239a     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
3239e     36 7E F5 7D 
323a2     E9 51 F2 0D 
323a6     8E 00 F3 FD 
323aa     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
323ae     57 FD 58 FD 
323b2     5B FD 5C FD 
323b6     5C FD 60 7D 
323ba     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
323be     D6 7C 98 7C 
323c2     59 7C 1A 7C 
323c6     DC 7B 9E 7B 
323ca     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
323ce     F3 05 00 FD 
323d2     41 FB EA FA 
323d6     D9 FA DB FA 
323da     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
323de     E4 FA 9B 36 
323e2     F8 7A C0 7A 
323e6     84 7A 45 7A 
323ea     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
323ee     8E 79 51 79 
323f2     15 79 D7 78 
323f6     3C 1F EB FF 
323fa     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
323fe     6D F8 65 F8 
32402     68 F8 6D F8 
32406     70 F8 74 F8 
3240a     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
3240e     AB 60 79 60 
32412     4B 60 1A 60 
32416     E9 5F B9 5F 
3241a     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
3241e     FB 59 B2 0B 
32422     92 FA 3A F7 
32426     96 F6 79 F6 
3242a     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
3242e     82 F6 86 F6 
32432     8C F6 DB 5D 
32436     F1 5E C1 5E 
3243a     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
3243e     34 5E 04 5E 
32442     D6 5D A6 5D 
32446     78 5D D4 3E 
3244a     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
3244e     27 F5 BA F4 
32452     AB F4 AD F4 
32456     B2 F4 B8 F4 
3245a     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
3245e     26 5D 2B 5D 
32462     FC 5C CD 5C 
32466     9F 5C 70 5C 
3246a     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
3246e     E5 5B B8 5B 
32472     DB 24 A7 FC 
32476     D1 F4 4D F3 
3247a     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
3247e     04 F3 0B F3 
32482     11 F3 16 F3 
32486     DE 18 98 5B 
3248a     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
3248e     4E 4A 29 48 
32492     A0 47 6A 47 
32496     43 47 20 47 
3249a     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
3249e     E2 F6 98 F2 
324a2     C5 F1 A3 F1 
324a6     A3 F1 A8 F1 
324aa     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
324ae     BF F1 00 3D 
324b2     EF 46 CD 46 
324b6     AA 46 86 46 
324ba     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
324be     1C 46 F9 45 
324c2     D7 45 EE 43 
324c6     DE 02 E8 F3 
324ca     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
324ce     61 F0 65 F0 
324d2     6D F0 74 F0 
324d6     7C F0 84 F0 
324da     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
324de     8E 45 6D 45 
324e2     49 45 27 45 
324e6     05 45 E1 44 
324ea     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
324ee     F1 2F A9 FB 
324f2     8B F1 9B EF 
324f6     40 EF 36 EF 
324fa     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
324fe     4D EF 56 EF 
32502     5E EF 7B 44 
32506     8C 44 69 44 
3250a     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
3250e     03 44 E1 43 
32512     C0 43 F5 37 
32516     69 33 0F 11 
3251a     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
3251e     66 EE 37 EE 
32522     38 EE 40 EE 
32526     48 EE 51 EE 
3252a     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
3252e     7D 32 6A 32 
32532     51 32 37 32 
32536     1F 32 05 32 
3253a     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
3253e     B9 31 A1 31 
32542     F1 04 F4 F1 
32546     50 EE A0 ED 
3254a     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
3254e     93 ED 9A ED 
32552     A4 ED AD ED 
32556     F4 27 C1 31 
3255a     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
3255e     78 31 5F 31 
32562     46 31 2E 31 
32566     15 31 FC 30 
3256a     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
3256e     C4 EF 4A ED 
32572     DC EC CB EC 
32576     D2 EC DA EC 
3257a     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
3257e     F9 EC 64 2F 
32582     0A 31 F1 30 
32586     D9 30 C0 30 
3258a     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
3258e     78 30 5F 30 
32592     46 30 38 23 
32596     A6 F6 19 EE 
3259a     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
3259e     20 EC 28 EC 
325a2     32 EC 3C EC 
325a6     47 EC 51 EC 
325aa     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
325ae     A3 22 93 22 
325b2     7F 22 6E 22 
325b6     5D 22 4C 22 
325ba     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
325be     77 09 76 F1 
325c2     CC EC F0 EB 
325c6     CD EB CE EB 
325ca     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
325ce     ED EB F5 EB 
325d2     3E F6 6B 22 
325d6     5F 22 4E 22 
325da     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
325de     1B 22 0B 22 
325e2     FA 21 E9 21 
325e6     D8 21 4D FF 
325ea     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
325ee     92 EB 7B EB 
325f2     82 EB 8C EB 
325f6     97 EB A1 EB 
325fa     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
325fe     15 22 04 22 
32602     F3 21 E3 21 
32606     D2 21 C0 21 
3260a     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
3260e     8E 21 7D 21 
32612     9A F8 A4 ED 
32616     8E EB 2F EB 
3261a     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
3261e     37 EB 42 EB 
32622     4C EB 57 EB 
32626     B2 17 22 19 
3262a     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
3262e     FD 18 EF 18 
32632     E3 18 D6 18 
32636     CA 18 BD 18 
3263a     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
3263e     60 EC 35 EB 
32642     01 EB 01 EB 
32646     0C EB 16 EB 
3264a     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
3264e     34 EB D0 18 
32652     00 19 F4 18 
32656     E8 18 DA 18 
3265a     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
3265e     B6 18 A9 18 
32662     9D 18 91 05 
32666     F0 EF CA EB 
3266a     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
3266e     E8 EA F2 EA 
32672     FE EA 07 EB 
32676     12 EB C2 EF 
3267a     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
3267e     D9 18 CD 18 
32682     C0 18 B3 18 
32686     A7 18 9B 18 
3268a     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
3268e     B8 FC 30 EE 
32692     61 EB DC EA 
32696     CD EA D2 EA 
3269a     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
3269e     F3 EA FE EA 
326a2     D2 09 D1 18 
326a6     C3 18 17 18 
326aa     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
326ae     66 11 52 11 
326b2     49 11 41 11 
326b6     38 11 E0 F4 
326ba     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
326be     C9 EA C5 EA 
326c2     CF EA DB EA 
326c6     E6 EA EF EA 
326ca     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
326ce     89 11 80 11 
326d2     78 11 6E 11 
326d6     67 11 5D 11 
326da     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
326de     43 11 32 0D 
326e2     9C F1 07 EC 
326e6     F8 EA CD EA 
326ea     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
326ee     E4 EA ED EA 
326f2     F8 EA 02 EB 
326f6     55 11 91 11 
326fa     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
326fe     75 11 6E 11 
32702     64 11 5E 11 
32706     54 11 4A 11 
3270a     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
3270e     A8 EB F1 EA 
32712     D9 EA DC EA 
32716     E8 EA F1 EA 
3271a     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
3271e     A6 EB 9E 11 
32722     A0 11 96 11 
32726     8D 11 85 11 
3272a     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
3272e     6A 11 CA 0D 
32732     36 0B 57 F8 
32736     6C ED 57 EB 
3273a     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
3273e     F4 EA FF EA 
32742     09 EB 15 EB 
32746     1E EB 1A FD 
3274a     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
3274e     ED 0A E8 0A 
32752     E2 0A DC 0A 
32756     D6 0A D1 0A 
3275a     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
3275e     F8 F3 BC EC 
32762     57 EB 1E EB 
32766     18 EB 24 EB 
3276a     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
3276e     42 EB 4D EB 
32772     08 09 20 0B 
32776     1A 0B 14 0B 
3277a     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
3277e     04 0B FE 0A 
32782     F9 0A F2 0A 
32786     84 08 3A F1 
3278a     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
3278e     42 EB 42 EB 
32792     4E EB 57 EB 
32796     62 EB 6B EB 
3279a     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
3279e     48 0B 43 0B 
327a2     3C 0B 36 0B 
327a6     31 0B 2C 0B 
327aa     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
327ae     1B 0B 5C 00 
327b2     6A EF 1B EC 
327b6     81 EB 6A EB 
327ba     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
327be     85 EB 8E EB 
327c2     99 EB A3 EB 
327c6     DD 05 E5 05 
327ca     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
327ce     DB 05 D8 05 
327d2     D5 05 D1 05 
327d6     D0 05 CB 05 
327da     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
327de     0C EC BB EB 
327e2     B3 EB BB EB 
327e6     C5 EB D0 EB 
327ea     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
327ee     E4 F7 2C 06 
327f2     28 06 24 06 
327f6     22 06 1F 06 
327fa     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
327fe     16 06 14 06 
32802     0F 06 D0 F3 
32806     65 ED 2D EC 
3280a     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
3280e     01 EC 0A EC 
32812     14 EC 1E EC 
32816     29 EC FB 03 
3281a     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
3281e     63 06 60 06 
32822     5E 06 59 06 
32826     58 06 54 06 
3282a     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
3282e     69 F1 21 ED 
32832     55 EC 33 EC 
32836     36 EC 40 EC 
3283a     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
3283e     5C EC 68 EC 
32842     92 02 D9 02 
32846     D7 02 D7 02 
3284a     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
3284e     D1 02 D1 02 
32852     CE 02 CD 02 
32856     5D FC 80 EF 
3285a     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
3285e     83 EC 8A EC 
32862     93 EC 9C EC 
32866     A5 EC B1 EC 
3286a     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
3286e     2B 03 2A 03 
32872     29 03 26 03 
32876     25 03 24 03 
3287a     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
3287e     1F 03 70 F7 
32882     D0 EE 27 ED 
32886     DB EC D4 EC 
3288a     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
3288e     F0 EC FA EC 
32892     02 ED F9 F4 
32896     7B 03 7C 03 
3289a     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
3289e     75 03 73 03 
328a2     72 03 70 03 
328a6     6D 03 6C 03 
328aa     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
328ae     54 ED 22 ED 
328b2     22 ED 2C ED 
328b6     35 ED 3F ED 
328ba     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
328be     14 01 C3 03 
328c2     C1 03 C0 03 
328c6     5F 01 A5 00 
328ca     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
328ce     7B 00 7C 00 
328d2     20 00 85 F1 
328d6     2A EE 89 ED 
328da     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
328de     80 ED 87 ED 
328e2     90 ED 9A ED 
328e6     A3 ED 73 00 
328ea     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
328ee     D0 00 D0 00 
328f2     D0 00 D0 00 
328f6     D0 00 CF 00 
328fa     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
328fe     80 F0 3D EE 
32902     D5 ED C7 ED 
32906     CD ED D6 ED 
3290a     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
3290e     F2 ED FA ED 
32912     1D 01 29 01 
32916     27 01 27 01 
3291a     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
3291e     25 01 26 01 
32922     26 01 23 01 
32926     D0 F7 EC EF 
3292a     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
3292e     1C EE 24 EE 
32932     2D EE 37 EE 
32936     40 EE 47 EE 
3293a     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
3293e     7D 01 7B 01 
32942     7A 01 7A 01 
32946     79 01 78 01 
3294a     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
3294e     84 FE DE F3 
32952     6C EF 93 EE 
32956     72 EE 72 EE 
3295a     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
3295e     8B EE 95 EE 
32962     9E EE 15 FC 
32966     67 FE 67 FE 
3296a     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
3296e     6B FE 6B FE 
32972     6D FE 6D FE 
32976     6D FE 6F FE 
3297a     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
3297e     DF EE CC EE 
32982     CF EE D9 EE 
32986     E1 EE EA EE 
3298a     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
3298e     5A FE C4 FE 
32992     C3 FE C5 FE 
32996     C6 FE C6 FE 
3299a     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
3299e     C8 FE C7 FE 
329a2     DA FB 85 F1 
329a6     8D EF 31 EF 
329aa     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
329ae     34 EF 3E EF 
329b2     46 EF 4F EF 
329b6     57 EF 0D FF 
329ba     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
329be     1F FF 1F FF 
329c2     21 FF 21 FF 
329c6     21 FF 21 FF 
329ca     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
329ce     15 F1 BE EF 
329d2     84 EF 7E EF 
329d6     88 EF 8F EF 
329da     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
329de     A9 EF 06 F2 
329e2     A6 FC AB FC 
329e6     AD FC AE FC 
329ea     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
329ee     B2 FC B4 FC 
329f2     B6 FC B7 FC 
329f6     8B F4 BD F0 
329fa     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
329fe     E4 EF EE EF 
32a02     F6 EF FD EF 
32a06     04 F0 0E F0 
32a0a     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
32a0e     0B FD 0D FD 
32a12     0F FD 11 FD 
32a16     11 FD 13 FD 
32a1a     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
32a1e     17 FD 64 F3 
32a22     CD F0 52 F0 
32a26     41 F0 45 F0 
32a2a     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
32a2e     5B F0 64 F0 
32a32     6D F0 FB FC 
32a36     65 FD 68 FD 
32a3a     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
32a3e     6C FD 6D FD 
32a42     6F FD 70 FD 
32a46     72 FD B3 FB 
32a4a     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
32a4e     A4 F0 99 F0 
32a52     A0 F0 A8 F0 
32a56     AE F0 B9 F0 
32a5a     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
32a5e     CB FB DD FB 
32a62     DE FB E0 FB 
32a66     E3 FB E3 FB 
32a6a     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
32a6e     E9 FB EC FB 
32a72     62 F7 27 F2 
32a76     2A F1 FF F0 
32a7a     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
32a7e     0C F1 13 F1 
32a82     1B F1 23 F1 
32a86     33 F2 3C FC 
32a8a     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
32a8e     42 FC 45 FC 
32a92     47 FC 48 FC 
32a96     4A FC 4C FC 
32a9a     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
32a9e     20 F2 77 F1 
32aa2     5C F1 5F F1 
32aa6     64 F1 6C F1 
32aaa     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
32aae     83 F1 DC F8 
32ab2     9A FC 9A FC 
32ab6     9B FC 9E FC 
32aba     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
32abe     A3 FC A4 FC 
32ac2     A6 FC A9 FC 
32ac6     90 F4 33 F2 
32aca     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
32ace     BA F1 BF F1 
32ad2     C7 F1 CE F1 
32ad6     D6 F1 DC F1 
32ada     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
32ade     F3 FC F5 FC 
32ae2     FE FB 79 FB 
32ae6     62 FB 5F FB 
32aea     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
32aee     6F FA AF F3 
32af2     53 F2 12 F2 
32af6     0F F2 15 F2 
32afa     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
32afe     2A F2 32 F2 
32b02     38 F2 9A FB 
32b06     AF FB B1 FB 
32b0a     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
32b0e     B7 FB B8 FB 
32b12     BA FB BC FB 
32b16     C1 FB 3B F8 
32b1a     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
32b1e     6E F2 6C F2 
32b22     74 F2 7A F2 
32b26     81 F2 87 F2 
32b2a     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
32b2e     06 FC 09 FC 
32b32     0C FC 0E FC 
32b36     0F FC 12 FC 
32b3a     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
32b3e     17 FC 1A FC 
32b42     B2 F6 7B F3 
32b46     DD F2 C5 F2 
32b4a     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
32b4e     D4 F2 DB F2 
32b52     E0 F2 E8 F2 
32b56     28 F8 60 FC 
32b5a     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
32b5e     64 FC 66 FC 
32b62     68 FC 6A FC 
32b66     6D FC 52 FC 
32b6a     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
32b6e     78 F3 24 F3 
32b72     1A F3 1E F3 
32b76     24 F3 2A F3 
32b7a     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
32b7e     3D F3 80 FA 
32b82     0C FB 0F FB 
32b86     10 FB 14 FB 
32b8a     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
32b8e     1B FB 1D FB 
32b92     1F FB 92 FA 
32b96     DE F4 AE F3 
32b9a     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
32b9e     79 F3 7E F3 
32ba2     84 F3 8C F3 
32ba6     92 F3 97 F3 
32baa     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
32bae     67 FB 69 FB 
32bb2     6B FB 6F FB 
32bb6     71 FB 72 FB 
32bba     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
32bbe     E3 F8 BA F4 
32bc2     EE F3 CC F3 
32bc6     CA F3 CF F3 
32bca     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
32bce     E2 F3 E8 F3 
32bd2     ED F3 B7 FB 
32bd6     BC FB BE FB 
32bda     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
32bde     C4 FB C6 FB 
32be2     C8 FB C9 FB 
32be6     CC FB 8F F7 
32bea     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
32bee     1E F4 1E F4 
32bf2     24 F4 2A F4 
32bf6     30 F4 38 F4 
32bfa     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
32bfe     AD FA B1 FA 
32c02     B4 FA B6 FA 
32c06     BA FA BB FA 
32c0a     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
32c0e     C2 FA C6 FA 
32c12     55 F6 C6 F4 
32c16     7D F4 72 F4 
32c1a     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
32c1e     83 F4 89 F4 
32c22     8F F4 94 F4 
32c26     66 FA 03 FB 
32c2a     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
32c2e     0A FB 0E FB 
32c32     10 FB 11 FB 
32c36     16 FB 18 FB 
32c3a     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
32c3e     F9 F4 CA F4 
32c42     C5 F4 CB F4 
32c46     D1 F4 D7 F4 
32c4a     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
32c4e     E8 F4 3F FB 
32c52     56 FB 58 FB 
32c56     5A FB 5E FB 
32c5a     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
32c5e     64 FB 64 FB 
32c62     69 FB 99 F9 
32c66     E9 F5 33 F5 
32c6a     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
32c6e     1D F5 22 F5 
32c72     27 F5 2E F5 
32c76     32 F5 37 F5 
32c7a     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
32c7e     BC FA BC FA 
32c82     C1 FA C2 FA 
32c86     C4 FA C8 FA 
32c8a     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
32c8e     F9 F7 DB F5 
32c92     78 F5 69 F5 
32c96     6A F5 70 F5 
32c9a     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
32c9e     7F F5 85 F5 
32ca2     6E F7 06 FB 
32ca6     0A FB 0B FB 
32caa     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
32cae     14 FB 15 FB 
32cb2     18 FB 1B FB 
32cb6     1D FB 70 F7 
32cba     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
32cbe     B6 F5 BB F5 
32cc2     C0 F5 C6 F5 
32cc6     CA F5 CF F5 
32cca     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
32cce     54 FB 56 FB 
32cd2     5A FB 5B FB 
32cd6     5E FB 5F FB 
32cda     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
32cde     67 FB 52 FB 
32ce2     29 F7 33 F6 
32ce6     06 F6 02 F6 
32cea     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
32cee     10 F6 16 F6 
32cf2     1A F6 1F F6 
32cf6     81 FB 9F FB 
32cfa     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
32cfe     51 FB F2 FA 
32d02     E3 FA E3 FA 
32d06     E5 FA E9 FA 
32d0a     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
32d0e     64 F6 4D F6 
32d12     4D F6 53 F6 
32d16     57 F6 5C F6 
32d1a     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
32d1e     6A F6 19 FB 
32d22     1E FB 22 FB 
32d26     23 FB 24 FB 
32d2a     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
32d2e     2C FB 2E FB 
32d32     32 FB F0 F8 
32d36     01 F7 A5 F6 
32d3a     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
32d3e     9F F6 A3 F6 
32d42     A6 F6 AC F6 
32d46     B0 F6 EB F7 
32d4a     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
32d4e     68 FB 6C FB 
32d52     6E FB 71 FB 
32d56     72 FB 74 FB 
32d5a     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
32d5e     71 F8 21 F7 
32d62     E5 F6 DD F6 
32d66     E1 F6 E6 F6 
32d6a     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
32d6e     F5 F6 F7 F6 
32d72     F7 FA AB FB 
32d76     AD FB AF FB 
32d7a     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
32d7e     B6 FB B9 FB 
32d82     BB FB BC FB 
32d86     21 FB 07 F8 
32d8a     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
32d8e     22 F7 26 F7 
32d92     2B F7 2E F7 
32d96     34 F7 38 F7 
32d9a     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
32d9e     13 FB 16 FB 
32da2     17 FB 1B FB 
32da6     1E FB 20 FB 
32daa     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
32dae     26 FB 77 FA 
32db2     F3 F7 7C F7 
32db6     67 F7 6A F7 
32dba     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
32dbe     74 F7 7A F7 
32dc2     7E F7 82 F7 
32dc6     53 FB 5A FB 
32dca     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
32dce     5F FB 63 FB 
32dd2     65 FB 67 FB 
32dd6     69 FB 6A FB 
32dda     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
32dde     B5 F7 A9 F7 
32de2     AD F7 B0 F7 
32de6     B5 F7 B8 F7 
32dea     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
32dee     6E F8 99 FB 
32df2     9C FB 9D FB 
32df6     9F FB A4 FB 
32dfa     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
32dfe     A9 FB AB FB 
32e02     AD FB 46 F9 
32e06     26 F8 F0 F7 
32e0a     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
32e0e     F4 F7 F8 F7 
32e12     FB F7 FF F7 
32e16     03 F8 65 FA 
32e1a     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
32e1e     2B FB 2F FB 
32e22     30 FB 32 FB 
32e26     34 FB 38 FB 
32e2a     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
32e2e     E9 F8 4A F8 
32e32     2E F8 2C F8 
32e36     2F F8 36 F8 
32e3a     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
32e3e     41 F8 44 F8 
32e42     4A FB 67 FB 
32e46     68 FB 6B FB 
32e4a     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
32e4e     73 FB 74 FB 
32e52     78 FB 7A FB 
32e56     14 FB E7 F8 
32e5a     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
32e5e     6D F8 70 F8 
32e62     73 F8 78 F8 
32e66     7C F8 80 F8 
32e6a     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
32e6e     A6 FB A7 FB 
32e72     A9 FB AC FB 
32e76     AF FB B1 FB 
32e7a     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
32e7e     B7 FB 73 FA 
32e82     F8 F8 B4 F8 
32e86     A9 F8 AB F8 
32e8a     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
32e8e     B4 F8 B8 F8 
32e92     BB F8 FA F8 
32e96     64 FB 65 FB 
32e9a     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
32e9e     6D FB 6F FB 
32ea2     70 FB 74 FB 
32ea6     77 FB 77 FB 
32eaa     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
32eae     E9 F8 E4 F8 
32eb2     E8 F8 EB F8 
32eb6     EE F8 F2 F8 
32eba     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
32ebe     B5 FA 9F FB 
32ec2     A1 FB A4 FB 
32ec6     A5 FB A9 FB 
32eca     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
32ece     AE FB B1 FB 
32ed2     B2 FB C7 F9 
32ed6     39 F9 22 F9 
32eda     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
32ede     26 F9 2A F9 
32ee2     2E F9 32 F9 
32ee6     33 F9 BA FB 
32eea     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
32eee     DE FB E1 FB 
32ef2     E2 FB E4 FB 
32ef6     E5 FB E7 FB 
32efa     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
32efe     C5 F9 67 F9 
32f02     57 F9 56 F9 
32f06     5B F9 5F F9 
32f0a     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
32f0e     68 F9 6C F9 
32f12     0B FC 11 FC 
32f16     14 FC 15 FC 
32f1a     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
32f1e     B5 FB B5 FB 
32f22     B6 FB B8 FB 
32f26     E9 FA C8 F9 
32f2a     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
32f2e     90 F9 94 F9 
32f32     95 F9 99 F9 
32f36     9D F9 9F F9 
32f3a     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
32f3e     DE FB DF FB 
32f42     E2 FB E4 FB 
32f46     E6 FB E8 FB 
32f4a     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
32f4e     EF FB AC FA 
32f52     E9 F9 C7 F9 
32f56     C3 F9 C8 F9 
32f5a     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
32f5e     D0 F9 D4 F9 
32f62     D6 F9 0E FB 
32f66     11 FC 13 FC 
32f6a     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
32f6e     19 FC 1B FC 
32f72     1D FC 1E FC 
32f76     21 FC 22 FC 
32f7a     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
32f7e     F7 F9 F7 F9 
32f82     FB F9 FE F9 
32f86     00 FA 03 FA 
32f8a     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
32f8e     1B FC 45 FC 
32f92     46 FC 48 FC 
32f96     4A FC 4B FC 
32f9a     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
32f9e     52 FC 54 FC 
32fa2     F3 FB 82 FA 
32fa6     35 FA 28 FA 
32faa     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
32fae     31 FA 32 FA 
32fb2     37 FA 37 FA 
32fb6     3C FA 00 FC 
32fba     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
32fbe     09 FC 0B FC 
32fc2     0F FC 12 FC 
32fc6     12 FC 15 FC 
32fca     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
32fce     8D FA 60 FA 
32fd2     5B FA 5C FA 
32fd6     60 FA 61 FA 
32fda     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
32fde     6C FA 6D FA 
32fe2     37 FC 3A FC 
32fe6     3B FC 3D FC 
32fea     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
32fee     43 FC 44 FC 
32ff2     45 FC 47 FC 
32ff6     51 FB AB FA 
32ffa     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
32ffe     8E FA 91 FA 
33002     93 FA 95 FA 
33006     98 FA 9B FA 
3300a     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
3300e     68 FC 6A FC 
33012     6C FC 6E FC 
33016     70 FC 72 FC 
3301a     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
3301e     76 FC 3B FB 
33022     D0 FA BB FA 
33026     B9 FA BD FA 
3302a     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
3302e     C4 FA C6 FA 
33032     CA FA 13 FC 
33036     3A FC 3A FC 
3303a     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
3303e     41 FC 43 FC 
33042     44 FC 47 FC 
33046     48 FC 3C FC 
3304a     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
3304e     E6 FA E8 FA 
33052     EB FA EE FA 
33056     F0 FA F2 FA 
3305a     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
3305e     61 FC 66 FC 
33062     68 FC 6B FC 
33066     6C FC 6E FC 
3306a     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
3306e     73 FC 75 FC 
33072     13 FC 3F FB 
33076     17 FB 12 FB 
3307a     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
3307e     1A FB 1D FB 
33082     1F FB 20 FB 
33086     23 FB 92 FC 
3308a     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
3308e     96 FC 97 FC 
33092     9A FC 9C FC 
33096     9E FC 9F FC 
3309a     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
3309e     5A FB 41 FB 
330a2     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
330a6     00 00 00 00 | zero2 long 0
330aa     01 00 00 00 
330ae     00 00 00 00 
330b2     00 00 00 00 
330b6     00 00 00 00 | mouse  file "mouse2.def"
330ba     00 00 00 00 
330be     00 00 00 00 
330c2     00 00 00 00 
330c6     00 00 00 00 | 	byte	$00[16]
330ca     01 01 00 00 
330ce     00 00 00 00 
330d2     00 00 00 00 
330d6     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
330da     00 00 00 00 
330de     00 00 00 00 
330e2     00 00 00 00 
330e6     00 00 00 00 | 	byte	$00[16]
330ea     01 0D 01 00 
330ee     00 00 00 00 
330f2     00 00 00 00 
330f6     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
330fa     00 00 00 00 
330fe     00 00 00 00 
33102     00 00 00 00 
33106     00 00 00 00 | 	byte	$00[16]
3310a     01 0D 0D 01 
3310e     00 00 00 00 
33112     00 00 00 00 
33116     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3311a     00 00 00 00 
3311e     00 00 00 00 
33122     00 00 00 00 
33126     00 00 00 00 | 	byte	$00[16]
3312a     01 0D 0D 0D 
3312e     01 00 00 00 
33132     00 00 00 00 
33136     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3313a     00 00 00 00 
3313e     00 00 00 00 
33142     00 00 00 00 
33146     00 00 00 00 | 	byte	$00[16]
3314a     01 0D 0D 0D 
3314e     0D 01 00 00 
33152     00 00 00 00 
33156     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3315a     00 00 00 00 
3315e     00 00 00 00 
33162     00 00 00 00 
33166     00 00 00 00 | 	byte	$00[16]
3316a     01 0D 0D 0D 
3316e     0D 0D 01 00 
33172     00 00 00 00 
33176     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
3317a     00 00 00 00 
3317e     00 00 00 00 
33182     00 00 00 00 
33186     00 00 00 00 | 	byte	$00[16]
3318a     01 0D 0D 0D 
3318e     0D 0D 0D 01 
33192     00 00 00 00 
33196     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
3319a     00 00 00 00 
3319e     00 00 00 00 
331a2     00 00 00 00 
331a6     00 00 00 00 | 	byte	$00[16]
331aa     01 0D 0D 0D 
331ae     0D 0D 0D 0C 
331b2     01 00 00 00 
331b6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
331ba     00 00 00 00 
331be     00 00 00 00 
331c2     00 00 00 00 
331c6     00 00 00 00 | 	byte	$00[16]
331ca     01 0D 0D 0D 
331ce     0D 0D 0D 0D 
331d2     0C 01 00 00 
331d6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
331da     00 00 00 00 
331de     00 00 00 00 
331e2     00 00 00 00 
331e6     00 00 00 00 | 	byte	$00[16]
331ea     01 0D 0D 0D 
331ee     0D 0D 0D 0D 
331f2     0D 0C 01 00 
331f6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
331fa     00 00 00 00 
331fe     00 00 00 00 
33202     00 00 00 00 
33206     00 00 00 00 | 	byte	$00[16]
3320a     01 0D 0D 0D 
3320e     0D 0D 0D 0D 
33212     0D 0D 0B 01 
33216     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
3321a     00 00 00 00 
3321e     00 00 00 00 
33222     00 00 00 00 
33226     00 00 00 00 | 	byte	$00[16]
3322a     01 0D 0D 0D 
3322e     0C 0D 0D 03 
33232     01 01 01 01 
33236     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
3323a     00 00 00 00 
3323e     00 00 00 00 
33242     00 00 00 00 
33246     00 00 00 00 | 	byte	$00[16]
3324a     01 0D 0D 0C 
3324e     01 09 0D 03 
33252     00 00 00 00 
33256     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
3325a     00 00 00 00 
3325e     00 00 00 00 
33262     00 00 00 00 
33266     00 00 00 00 | 	byte	$00[16]
3326a     01 0D 0C 01 
3326e     00 01 0D 0B 
33272     01 00 00 00 
33276     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
3327a     00 00 00 00 
3327e     00 00 00 00 
33282     00 00 00 00 
33286     00 00 00 00 | 	byte	$00[16]
3328a     01 0C 01 00 
3328e     00 01 0A 0D 
33292     01 00 00 00 
33296     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
3329a     00 00 00 00 
3329e     00 00 00 00 
332a2     00 00 00 00 
332a6     00 00 00 00 | 	byte	$00[16]
332aa     01 01 00 00 
332ae     00 00 01 0D 
332b2     0B 01 00 00 
332b6     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
332ba     00 00 00 00 
332be     00 00 00 00 
332c2     00 00 00 00 
332c6     00 00 00 00 
332ca     00 00 00 00 
332ce     00 00       | 	byte	$00[22]
332d0     01 0B 0D 01 
332d4     00 00 00 00 
332d8     00 00 00 00 
332dc     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
332e0     00 00 00 00 
332e4     00 00 00 00 
332e8     00 00 00 00 
332ec     00 00 00 00 
332f0     00          | 	byte	$00[17]
332f1     01 01 00 00 
332f5     00 00 00 00 
332f9     00 00 00 00 
332fd     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33301     00 00 00 00 
      ...             
334a5     00 00 00 00 
334a9     00          | 	byte	$00[425]
334aa     73 32 00 04 
334ae     00 00 10 00 
334b2     00 00 00 00 
334b6     00 00 00 00 | atari2 file "atari2.s2"
334ba     43 87 43 87 
334be     43 87 44 87 
334c2     43 87 44 87 
334c6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
334ca     43 87 43 87 
334ce     43 87 44 87 
334d2     43 87 43 87 
334d6     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
334da     44 87 43 87 
334de     44 87 43 87 
334e2     43 87 43 87 
334e6     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
334ea     43 87 43 87 
334ee     44 87 43 87 
334f2     44 87 44 87 
334f6     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
334fa     43 87 43 87 
334fe     44 87 43 87 
33502     43 87 42 87 
33506     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
3350a     43 87 43 87 
3350e     43 87 43 87 
33512     44 87 43 87 
33516     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
3351a     44 87 44 87 
3351e     43 87 44 87 
33522     43 87 44 87 
33526     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
3352a     44 87 43 87 
3352e     44 87 44 87 
33532     43 87 43 87 
33536     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3353a     43 87 44 87 
3353e     44 87 43 87 
33542     43 87 44 87 
33546     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3354a     43 87 43 87 
3354e     43 87 43 87 
33552     43 87 43 87 
33556     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
3355a     42 87 43 87 
3355e     44 87 42 87 
33562     43 87 43 87 
33566     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
3356a     43 87 44 87 
3356e     44 87 43 87 
33572     43 87 43 87 
33576     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3357a     43 87 5C 87 
3357e     EE 86 AC 87 
33582     4C 7C A3 78 
33586     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
3358a     BC 78 BB 78 
3358e     BD 78 BC 78 
33592     BB 78 BD 78 
33596     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
3359a     BB 78 BB 78 
3359e     BC 78 BC 78 
335a2     BC 78 BB 78 
335a6     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
335aa     BC 78 BC 78 
335ae     BC 78 BC 78 
335b2     BC 78 BC 78 
335b6     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
335ba     BB 78 BC 78 
335be     A0 78 4C 7C 
335c2     11 7A 29 89 
335c6     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
335ca     44 87 43 87 
335ce     44 87 43 87 
335d2     43 87 42 87 
335d6     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
335da     43 87 43 87 
335de     44 87 ED 85 
335e2     71 85 52 79 
335e6     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
335ea     BC 78 BC 78 
335ee     BC 78 BC 78 
335f2     BC 78 BC 78 
335f6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
335fa     BC 78 BC 78 
335fe     BC 78 A0 78 
33602     CF 7A B9 81 
33606     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
3360a     44 87 43 87 
3360e     43 87 44 87 
33612     43 87 44 87 
33616     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3361a     43 87 43 87 
3361e     43 87 43 87 
33622     44 87 43 87 
33626     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
3362a     43 87 43 87 
3362e     44 87 43 87 
33632     44 87 43 87 
33636     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3363a     44 87 43 87 
3363e     43 87 43 87 
33642     5A 87 39 81 
33646     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
3364a     A5 78 BC 78 
3364e     BB 78 BC 78 
33652     BB 78 BC 78 
33656     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
3365a     BC 78 BC 78 
3365e     BC 78 BC 78 
33662     BC 78 8F 79 
33666     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
3366a     09 85 47 87 
3366e     43 87 43 87 
33672     42 87 42 87 
33676     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
3367a     43 87 43 87 
3367e     43 87 43 87 
33682     43 87 44 87 
33686     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3368a     43 87 43 87 
3368e     44 87 43 87 
33692     42 87 43 87 
33696     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
3369a     44 87 43 87 
3369e     43 87 43 87 
336a2     44 87 44 87 
336a6     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
336aa     94 78 55 7A 
336ae     B9 78 BC 78 
336b2     BC 78 BC 78 
336b6     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
336ba     BC 78 BB 78 
336be     BC 78 BC 78 
336c2     BC 78 BC 78 
336c6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
336ca     BB 78 BC 78 
336ce     BC 78 BC 78 
336d2     BB 78 BC 78 
336d6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
336da     BC 78 BC 78 
336de     BD 78 BC 78 
336e2     BC 78 BB 78 
336e6     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
336ea     94 78 B3 84 
336ee     36 84 4A 87 
336f2     43 87 43 87 
336f6     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
336fa     43 87 44 87 
336fe     43 87 43 87 
33702     43 87 43 87 
33706     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3370a     43 87 44 87 
3370e     43 87 44 87 
33712     43 87 43 87 
33716     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
3371a     43 87 43 87 
3371e     43 87 45 87 
33722     43 87 43 87 
33726     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
3372a     43 87 44 87 
3372e     44 87 44 87 
33732     43 87 43 87 
33736     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
3373a     43 87 42 87 
3373e     43 87 43 87 
33742     44 87 43 87 
33746     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3374a     54 87 3C 82 
3374e     36 83 52 79 
33752     C6 78 BC 78 
33756     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
3375a     BB 78 BB 78 
3375e     BC 78 BC 78 
33762     BC 78 BC 78 
33766     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3376a     BD 78 ED 78 
3376e     1B 79 F4 83 
33772     4D 83 4E 87 
33776     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
3377a     44 87 43 87 
3377e     42 87 44 87 
33782     43 87 42 87 
33786     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
3378a     43 87 54 87 
3378e     26 82 B3 84 
33792     D6 77 BB 78 
33796     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
3379a     BC 78 BB 78 
3379e     BB 78 BB 78 
337a2     BB 78 BB 78 
337a6     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
337aa     BC 78 BC 78 
337ae     26 79 18 75 
337b2     36 83 1F 84 
337b6     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
337ba     43 87 43 87 
337be     43 87 43 87 
337c2     43 87 44 87 
337c6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
337ca     43 87 44 87 
337ce     44 87 43 87 
337d2     43 87 43 87 
337d6     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
337da     43 87 43 87 
337de     43 87 43 87 
337e2     44 87 44 87 
337e6     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
337ea     44 87 43 87 
337ee     43 87 43 87 
337f2     43 87 44 87 
337f6     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
337fa     44 87 44 87 
337fe     44 87 43 87 
33802     44 87 43 87 
33806     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3380a     43 87 43 87 
3380e     43 87 44 87 
33812     44 87 43 87 
33816     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
3381a     43 87 43 87 
3381e     43 87 43 87 
33822     43 87 44 87 
33826     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3382a     43 87 44 87 
3382e     43 87 44 87 
33832     19 87 7D 86 
33836     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
3383a     B1 78 BC 78 
3383e     BC 78 BC 78 
33842     BC 78 BC 78 
33846     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3384a     BC 78 BC 78 
3384e     BD 78 BC 78 
33852     B7 78 3B 7B 
33856     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
3385a     96 86 44 87 
3385e     43 87 43 87 
33862     43 87 43 87 
33866     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
3386a     44 87 44 87 
3386e     43 87 44 87 
33872     43 87 44 87 
33876     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
3387a     43 87 44 87 
3387e     43 87 44 87 
33882     43 87 44 87 
33886     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3388a     43 87 44 87 
3388e     43 87 43 87 
33892     44 87 43 87 
33896     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3389a     44 87 44 87 
3389e     43 87 43 87 
338a2     43 87 44 87 
338a6     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
338aa     43 87 43 87 
338ae     43 87 43 87 
338b2     44 87 44 87 
338b6     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
338ba     36 83 CF 7A 
338be     AB 78 BB 78 
338c2     BC 78 BC 78 
338c6     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
338ca     BB 78 BC 78 
338ce     BC 78 BC 78 
338d2     BC 78 BC 78 
338d6     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
338da     BC 78 BC 78 
338de     BC 78 BB 78 
338e2     BC 78 BC 78 
338e6     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
338ea     BB 78 BC 78 
338ee     BB 78 BC 78 
338f2     BC 78 BD 78 
338f6     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
338fa     BC 78 BC 78 
338fe     BC 78 BC 78 
33902     BC 78 BD 78 
33906     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
3390a     BC 78 BB 78 
3390e     BC 78 BB 78 
33912     BB 78 BC 78 
33916     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
3391a     BC 78 BC 78 
3391e     BC 78 BC 78 
33922     BC 78 BB 78 
33926     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
3392a     BC 78 BC 78 
3392e     BC 78 BD 78 
33932     BB 78 BC 78 
33936     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
3393a     BC 78 BC 78 
3393e     BC 78 BB 78 
33942     BC 78 BB 78 
33946     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
3394a     BB 78 BC 78 
3394e     BC 78 BC 78 
33952     BC 78 BB 78 
33956     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3395a     BC 78 BC 78 
3395e     BC 78 BB 78 
33962     BC 78 BB 78 
33966     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3396a     BC 78 BC 78 
3396e     BC 78 BC 78 
33972     BB 78 BC 78 
33976     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
3397a     BC 78 9F 78 
3397e     52 79 B3 84 
33982     2F 86 60 87 
33986     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
3398a     44 87 43 87 
3398e     43 87 43 87 
33992     43 87 43 87 
33996     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3399a     43 87 43 87 
3399e     43 87 44 87 
339a2     43 87 43 87 
339a6     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
339aa     43 87 43 87 
339ae     43 87 43 87 
339b2     43 87 44 87 
339b6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
339ba     44 87 44 87 
339be     5E 87 BC 80 
339c2     FB 80 94 78 
339c6     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
339ca     BD 78 BC 78 
339ce     BB 78 BC 78 
339d2     BB 78 BB 78 
339d6     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
339da     BC 78 BB 78 
339de     BB 78 6B 79 
339e2     D6 77 AC 87 
339e6     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
339ea     43 87 44 87 
339ee     43 87 43 87 
339f2     44 87 43 87 
339f6     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
339fa     43 87 44 87 
339fe     43 87 5C 87 
33a02     E7 80 00 80 
33a06     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
33a0a     BC 78 BD 78 
33a0e     BC 78 BC 78 
33a12     BC 78 BB 78 
33a16     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33a1a     BC 78 BC 78 
33a1e     BB 78 BC 78 
33a22     BB 78 BC 78 
33a26     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33a2a     BB 78 BC 78 
33a2e     BC 78 BC 78 
33a32     BC 78 BC 78 
33a36     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33a3a     BC 78 BC 78 
33a3e     BC 78 BC 78 
33a42     A0 78 8D 7B 
33a46     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
33a4a     60 87 43 87 
33a4e     44 87 44 87 
33a52     43 87 43 87 
33a56     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
33a5a     44 87 43 87 
33a5e     43 87 43 87 
33a62     44 87 73 86 
33a66     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
33a6a     51 7B B6 78 
33a6e     BC 78 BD 78 
33a72     BC 78 BC 78 
33a76     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33a7a     BB 78 BC 78 
33a7e     BD 78 BB 78 
33a82     BC 78 BB 78 
33a86     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
33a8a     BC 78 BC 78 
33a8e     BC 78 BC 78 
33a92     BB 78 BC 78 
33a96     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33a9a     BC 78 BB 78 
33a9e     BB 78 BC 78 
33aa2     BC 78 BB 78 
33aa6     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
33aaa     22 8C AF 84 
33aae     48 87 43 87 
33ab2     44 87 43 87 
33ab6     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
33aba     43 87 42 87 
33abe     43 87 43 87 
33ac2     44 87 43 87 
33ac6     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
33aca     43 87 43 87 
33ace     44 87 44 87 
33ad2     43 87 43 87 
33ad6     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
33ada     43 87 43 87 
33ade     43 87 43 87 
33ae2     44 87 43 87 
33ae6     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
33aea     9F 8B D6 77 
33aee     16 7C B3 78 
33af2     BC 78 BB 78 
33af6     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
33afa     BB 78 BC 78 
33afe     BB 78 BC 78 
33b02     BC 78 BC 78 
33b06     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33b0a     BC 78 BB 78 
33b0e     BB 78 BC 78 
33b12     BB 78 BC 78 
33b16     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
33b1a     BB 78 BB 78 
33b1e     BC 78 BC 78 
33b22     BC 78 BB 78 
33b26     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
33b2a     BC 78 BC 78 
33b2e     BC 78 BD 78 
33b32     BB 78 BC 78 
33b36     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
33b3a     BC 78 BC 78 
33b3e     BC 78 BB 78 
33b42     BC 78 BC 78 
33b46     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33b4a     A8 78 54 7E 
33b4e     F4 83 17 82 
33b52     50 87 43 87 
33b56     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
33b5a     44 87 43 87 
33b5e     44 87 43 87 
33b62     43 87 44 87 
33b66     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33b6a     43 87 28 87 
33b6e     20 85 CF 7A 
33b72     70 7D AD 78 
33b76     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
33b7a     BB 78 BC 78 
33b7e     BC 78 BC 78 
33b82     BB 78 BB 78 
33b86     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
33b8a     BB 78 B2 78 
33b8e     9A 7C CF 7A 
33b92     4A 87 0D 87 
33b96     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
33b9a     43 87 44 87 
33b9e     43 87 44 87 
33ba2     43 87 43 87 
33ba6     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
33baa     44 87 43 87 
33bae     28 87 51 85 
33bb2     11 7A 1E 7D 
33bb6     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
33bba     BC 78 BB 78 
33bbe     BC 78 BC 78 
33bc2     BC 78 BC 78 
33bc6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33bca     BB 78 BC 78 
33bce     BB 78 BC 78 
33bd2     BC 78 BC 78 
33bd6     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33bda     BB 78 BC 78 
33bde     BC 78 BC 78 
33be2     BD 78 BB 78 
33be6     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
33bea     BC 78 BB 78 
33bee     BC 78 BC 78 
33bf2     BC 78 BB 78 
33bf6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33bfa     BC 78 BC 78 
33bfe     BC 78 BC 78 
33c02     BB 78 BC 78 
33c06     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33c0a     BC 78 BD 78 
33c0e     BC 78 BC 78 
33c12     BC 78 BB 78 
33c16     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33c1a     BC 78 BB 78 
33c1e     BB 78 BC 78 
33c22     BC 78 BB 78 
33c26     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33c2a     BB 78 BB 78 
33c2e     BB 78 BC 78 
33c32     B6 78 48 7D 
33c36     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
33c3a     56 87 43 87 
33c3e     42 87 44 87 
33c42     44 87 43 87 
33c46     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
33c4a     43 87 44 87 
33c4e     43 87 44 87 
33c52     4C 87 7E 83 
33c56     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
33c5a     F7 78 BC 78 
33c5e     BC 78 BB 78 
33c62     BB 78 BC 78 
33c66     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33c6a     BC 78 BB 78 
33c6e     BC 78 BC 78 
33c72     BB 78 BC 78 
33c76     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
33c7a     BB 78 BC 78 
33c7e     BC 78 BC 78 
33c82     BC 78 BB 78 
33c86     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33c8a     BC 78 BC 78 
33c8e     BC 78 BC 78 
33c92     BC 78 BB 78 
33c96     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33c9a     BC 78 BB 78 
33c9e     BB 78 BC 78 
33ca2     BC 78 BB 78 
33ca6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33caa     BC 78 BC 78 
33cae     BB 78 BC 78 
33cb2     BC 78 BC 78 
33cb6     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
33cba     73 32 00 04 
33cbe     00 00 10 00 
33cc2     00 00 00 00 
33cc6     00 00 00 00 | atari12 file "atari12.s2"
33cca     00 6D 00 6D 
33cce     00 6D 00 6D 
33cd2     00 6D 00 6D 
33cd6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33cda     00 6D 00 6D 
33cde     00 6D 00 6D 
33ce2     00 6D 00 6D 
33ce6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33cea     00 6D 00 6D 
33cee     00 6D 00 6D 
33cf2     00 6D 00 6D 
33cf6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33cfa     00 6D 00 6D 
33cfe     00 6D 00 6D 
33d02     00 6D 00 6D 
33d06     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
33d0a     00 6D 00 6D 
33d0e     00 6D 00 6D 
33d12     00 6D 00 6D 
33d16     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
33d1a     00 6C 00 6C 
33d1e     00 6C 00 6C 
33d22     00 6C 00 6C 
33d26     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33d2a     00 6C 00 6C 
33d2e     00 6C 00 6C 
33d32     00 6C 00 6C 
33d36     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33d3a     00 6C 00 6C 
33d3e     00 6C 00 6C 
33d42     00 6C 00 6C 
33d46     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33d4a     00 6C 00 6C 
33d4e     00 6C 00 6C 
33d52     00 6C 00 6C 
33d56     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33d5a     00 6C 00 6C 
33d5e     00 6C 00 6C 
33d62     00 6C 00 6C 
33d66     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33d6a     00 6C 00 6C 
33d6e     00 6C 00 6C 
33d72     00 6C 00 6C 
33d76     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33d7a     00 6C 00 6C 
33d7e     00 6C 00 6C 
33d82     00 6C 00 6C 
33d86     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33d8a     00 6C 00 6C 
33d8e     00 6C 00 6C 
33d92     00 6C 00 6C 
33d96     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33d9a     00 6C 00 6C 
33d9e     00 6C 00 6C 
33da2     00 6C 00 6C 
33da6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33daa     00 6C 00 6C 
33dae     00 6C 00 6C 
33db2     00 6C 00 6C 
33db6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33dba     00 6C 00 6C 
33dbe     00 6C 00 6C 
33dc2     00 6C 00 6C 
33dc6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
33dca     00 6C 00 6B 
33dce     00 6B 00 6B 
33dd2     00 6B 00 6B 
33dd6     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33dda     00 6B 00 6B 
33dde     00 6B 00 6B 
33de2     00 6B 00 6B 
33de6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33dea     00 6B 00 6B 
33dee     00 6B 00 6B 
33df2     00 6B 00 6B 
33df6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33dfa     00 6B 00 6B 
33dfe     00 6B 00 6B 
33e02     00 6B 00 6B 
33e06     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33e0a     00 6B 00 6B 
33e0e     00 6B 00 6B 
33e12     00 6B 00 6B 
33e16     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33e1a     00 6B 00 6B 
33e1e     00 6B 00 6B 
33e22     00 6B 00 6B 
33e26     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33e2a     00 6B 00 6B 
33e2e     00 6B 00 6B 
33e32     00 6B 00 6B 
33e36     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33e3a     00 6B 00 6B 
33e3e     00 6B 00 6B 
33e42     00 6B 00 6B 
33e46     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33e4a     00 6B 00 6B 
33e4e     00 6B 00 6B 
33e52     00 6B 00 6B 
33e56     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
33e5a     00 6B 00 6B 
33e5e     00 6B 00 6B 
33e62     00 6A 00 9D 
33e66     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
33e6a     00 9E 00 9E 
33e6e     00 9E 00 9E 
33e72     00 9E 00 9E 
33e76     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33e7a     00 9E 00 9E 
33e7e     00 9E 00 9E 
33e82     00 9E 00 9E 
33e86     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33e8a     00 9E 00 9E 
33e8e     00 9E 00 9E 
33e92     00 9E 00 9E 
33e96     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33e9a     00 9E 00 9E 
33e9e     00 9E 00 9E 
33ea2     00 9E 00 9E 
33ea6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33eaa     00 9E 00 9E 
33eae     00 9E 00 9E 
33eb2     00 9E 00 9E 
33eb6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33eba     00 9E 00 9E 
33ebe     00 9E 00 9E 
33ec2     00 9E 00 9E 
33ec6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33eca     00 9E 00 9E 
33ece     00 9E 00 9E 
33ed2     00 9E 00 9E 
33ed6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33eda     00 9E 00 9E 
33ede     00 9E 00 9E 
33ee2     00 9E 00 9E 
33ee6     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
33eea     00 9E 00 9E 
33eee     00 9E 00 9E 
33ef2     00 9E 00 9E 
33ef6     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
33efa     00 9F 00 9F 
33efe     00 9F 00 9F 
33f02     00 9F 00 9F 
33f06     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33f0a     00 9F 00 9F 
33f0e     00 9F 00 9F 
33f12     00 9F 00 9F 
33f16     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33f1a     00 9F 00 9F 
33f1e     00 9F 00 9F 
33f22     00 9F 00 9F 
33f26     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33f2a     00 9F 00 9F 
33f2e     00 9F 00 9F 
33f32     00 9F 00 9F 
33f36     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33f3a     00 9F 00 9F 
33f3e     00 9F 00 9F 
33f42     00 9F 00 9F 
33f46     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33f4a     00 9F 00 9F 
33f4e     00 9F 00 9F 
33f52     00 9F 00 9F 
33f56     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33f5a     00 9F 00 9F 
33f5e     00 9F 00 9F 
33f62     00 9F 00 9F 
33f66     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33f6a     00 9F 00 9F 
33f6e     00 9F 00 9F 
33f72     00 9F 00 9F 
33f76     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33f7a     00 9F 00 9F 
33f7e     00 9F 00 9F 
33f82     00 9F 00 9F 
33f86     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33f8a     00 9F 00 9F 
33f8e     00 9F 00 9F 
33f92     00 9F 00 9F 
33f96     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33f9a     00 9F 00 9F 
33f9e     00 9F 00 9F 
33fa2     00 9F 00 9F 
33fa6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33faa     00 9F 00 9F 
33fae     00 9F 00 9F 
33fb2     00 9F 00 9F 
33fb6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
33fba     00 9F 00 9F 
33fbe     00 9F 00 A0 
33fc2     00 A0 00 A0 
33fc6     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33fca     00 A0 00 A0 
33fce     00 A0 00 A0 
33fd2     00 A0 00 A0 
33fd6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33fda     00 A0 00 A0 
33fde     00 A0 00 A0 
33fe2     00 A0 00 A0 
33fe6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33fea     00 A0 00 A0 
33fee     00 A0 00 A0 
33ff2     00 A0 00 A0 
33ff6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
33ffa     00 A0 00 A0 
33ffe     00 A0 00 A0 
34002     00 A0 00 A0 
34006     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3400a     00 A0 00 A0 
3400e     00 A0 00 A0 
34012     00 A0 00 A0 
34016     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3401a     00 A0 00 A0 
3401e     00 A0 00 A0 
34022     00 A0 00 A0 
34026     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3402a     00 A0 00 A0 
3402e     00 A0 00 A0 
34032     00 A0 00 A0 
34036     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3403a     00 A0 00 A0 
3403e     00 A0 00 A0 
34042     00 A0 00 A0 
34046     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3404a     00 A0 00 A0 
3404e     00 A0 00 A0 
34052     00 A0 00 A0 
34056     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3405a     00 A0 00 A0 
3405e     00 A0 00 A0 
34062     00 A0 00 A0 
34066     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3406a     00 A0 00 A0 
3406e     00 A0 00 A0 
34072     00 A0 00 A0 
34076     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3407a     00 A0 00 A0 
3407e     00 A0 00 A0 
34082     00 A0 00 A0 
34086     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
3408a     00 6D 00 6D 
3408e     00 6D 00 6D 
34092     00 6D 00 6D 
34096     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3409a     00 6D 00 6D 
3409e     00 6D 00 6D 
340a2     00 6D 00 6D 
340a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
340aa     00 6D 00 6D 
340ae     00 6D 00 6D 
340b2     00 6D 00 6D 
340b6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
340ba     00 6D 00 6D 
340be     00 6D 00 6D 
340c2     00 6D 00 6D 
340c6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
340ca     00 6D 00 6D 
340ce     00 6D 00 6D 
340d2     00 6D 00 6D 
340d6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
340da     00 6D 00 6D 
340de     00 6D 00 6D 
340e2     00 6D 00 6D 
340e6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
340ea     00 6D 00 6D 
340ee     00 6D 00 6D 
340f2     00 6D 00 6D 
340f6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
340fa     00 6D 00 6D 
340fe     00 6D 00 6D 
34102     00 6D 00 6D 
34106     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3410a     00 6D 00 6D 
3410e     00 A0 00 A0 
34112     00 A0 00 A0 
34116     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3411a     00 A0 00 A0 
3411e     00 A0 00 A0 
34122     00 A0 00 A0 
34126     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3412a     00 A0 00 A0 
3412e     00 A0 00 A0 
34132     00 A0 00 A0 
34136     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3413a     00 A0 00 A0 
3413e     00 A0 00 A0 
34142     00 A0 00 A0 
34146     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3414a     00 A0 00 A0 
3414e     00 A0 00 A0 
34152     00 A0 00 A0 
34156     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3415a     00 A0 00 A0 
3415e     00 A0 00 A0 
34162     00 A0 00 A0 
34166     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3416a     00 A0 00 A0 
3416e     00 A0 00 A0 
34172     00 A0 00 A0 
34176     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3417a     00 A0 00 A0 
3417e     00 A0 00 A0 
34182     00 A0 00 A0 
34186     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3418a     00 A0 00 A0 
3418e     00 A0 00 A0 
34192     00 A0 00 A0 
34196     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
3419a     00 6D 00 6D 
3419e     00 6D 00 6D 
341a2     00 6D 00 6D 
341a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
341aa     00 6D 00 6D 
341ae     00 6D 00 6D 
341b2     00 6D 00 6D 
341b6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
341ba     00 6D 00 6D 
341be     00 6D 00 6D 
341c2     00 6D 00 6D 
341c6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
341ca     00 6D 00 6D 
341ce     00 6D 00 6D 
341d2     00 6D 00 6D 
341d6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
341da     00 6D 00 6D 
341de     00 6D 00 6D 
341e2     00 6D 00 6D 
341e6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
341ea     00 6D 00 6D 
341ee     00 6D 00 6D 
341f2     00 6D 00 6D 
341f6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
341fa     00 6D 00 6D 
341fe     00 6D 00 6D 
34202     00 6D 00 6D 
34206     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3420a     00 6D 00 6D 
3420e     00 6D 00 6D 
34212     00 6D 00 6D 
34216     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3421a     00 6D 00 6D 
3421e     00 6C 00 A0 
34222     00 9F 00 A0 
34226     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
3422a     00 A0 00 A0 
3422e     00 A0 00 A0 
34232     00 A0 00 A0 
34236     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3423a     00 A0 00 A0 
3423e     00 A0 00 A0 
34242     00 A0 00 A0 
34246     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3424a     00 A0 00 A0 
3424e     00 A0 00 A0 
34252     00 A0 00 A0 
34256     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3425a     00 A0 00 A0 
3425e     00 A0 00 A0 
34262     00 A0 00 A0 
34266     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3426a     00 A0 00 A0 
3426e     00 A0 00 A0 
34272     00 A0 00 A0 
34276     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3427a     00 A0 00 A0 
3427e     00 A0 00 A0 
34282     00 A0 00 A0 
34286     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3428a     00 A0 00 A0 
3428e     00 A0 00 A0 
34292     00 A0 00 A0 
34296     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3429a     00 A0 00 A0 
3429e     00 A0 00 A0 
342a2     00 A0 00 A0 
342a6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
342aa     00 A0 00 A0 
342ae     00 A0 00 A0 
342b2     00 A0 00 A0 
342b6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
342ba     00 A0 00 A0 
342be     00 A0 00 A0 
342c2     00 A0 00 A0 
342c6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
342ca     00 A0 00 A0 
342ce     00 A0 00 A0 
342d2     00 A0 00 A0 
342d6     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
342da     00 A1 00 A1 
342de     00 A1 00 A1 
342e2     00 A1 00 A1 
342e6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
342ea     00 A1 00 A1 
342ee     00 A1 00 A1 
342f2     00 A1 00 A1 
342f6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
342fa     00 A1 00 A1 
342fe     00 A1 00 A1 
34302     00 A1 00 A1 
34306     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3430a     00 A1 00 A1 
3430e     00 A1 00 A1 
34312     00 A1 00 A1 
34316     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3431a     00 A1 00 A1 
3431e     00 A1 00 A1 
34322     00 A1 00 A1 
34326     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3432a     00 A1 00 A1 
3432e     00 A1 00 A1 
34332     00 6E 00 6E 
34336     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3433a     00 6E 00 6E 
3433e     00 6E 00 6E 
34342     00 6E 00 6E 
34346     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3434a     00 6E 00 6E 
3434e     00 6E 00 6E 
34352     00 6E 00 6E 
34356     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3435a     00 6E 00 6E 
3435e     00 6E 00 6E 
34362     00 6E 00 6E 
34366     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3436a     00 6E 00 6D 
3436e     00 6D 00 6D 
34372     00 6D 00 6D 
34376     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3437a     00 6D 00 6D 
3437e     00 6D 00 6D 
34382     00 6D 00 6D 
34386     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3438a     00 6D 00 6D 
3438e     00 6D 00 6D 
34392     00 6D 00 6D 
34396     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3439a     00 6D 00 6D 
3439e     00 6D 00 6D 
343a2     00 6D 00 6D 
343a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
343aa     00 6D 00 6D 
343ae     00 6D 00 6D 
343b2     00 6D 00 6D 
343b6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
343ba     00 6D 00 6D 
343be     00 6D 00 6D 
343c2     00 6D 00 6D 
343c6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
343ca     00 6D 00 6D 
343ce     00 6D 00 6D 
343d2     00 6D 00 6D 
343d6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
343da     00 6D 00 6D 
343de     00 6D 00 6D 
343e2     00 6D 00 6D 
343e6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
343ea     00 6D 00 6D 
343ee     00 6D 00 6D 
343f2     00 6D 00 6D 
343f6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
343fa     00 6D 00 6D 
343fe     00 6D 00 6D 
34402     00 6D 00 6D 
34406     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3440a     00 6D 00 6D 
3440e     00 6D 00 6D 
34412     00 6D 00 6D 
34416     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3441a     00 6D 00 6D 
3441e     00 6C 00 6C 
34422     00 6C 00 6C 
34426     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3442a     00 6C 00 6C 
3442e     00 6C 00 6C 
34432     00 6C 00 6C 
34436     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3443a     00 6C 00 6C 
3443e     00 6C 00 6C 
34442     00 9D 00 9F 
34446     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
3444a     00 9F 00 9F 
3444e     00 9F 00 9F 
34452     00 A0 00 A0 
34456     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3445a     00 A0 00 A0 
3445e     00 A0 00 A0 
34462     00 A0 00 A0 
34466     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3446a     00 A0 00 A0 
3446e     00 A0 00 A0 
34472     00 A0 00 A0 
34476     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3447a     00 A0 00 A0 
3447e     00 A0 00 A0 
34482     00 A0 00 A0 
34486     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3448a     00 A0 00 A0 
3448e     00 A0 00 A0 
34492     00 A0 00 A0 
34496     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3449a     00 A0 00 A0 
3449e     00 A0 00 A0 
344a2     00 A0 00 A0 
344a6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
344aa     00 A0 00 A0 
344ae     00 A0 00 A0 
344b2     00 A0 00 A0 
344b6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
344ba     00 A0 00 A0 
344be     00 A0 00 A0 
344c2     00 A0 00 A0 
344c6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
344ca                 | 
344ca     00 00       |              	org
344cc 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
344d0 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
344d4 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
344d8 003             | 
344d8 003 00 30 04 F6 |                 mov     psramaddr,#0
344dc 004             | 
344dc 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
344e0 005 20 00 00 FF 
344e4 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
344e8 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
344ec 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
344f0 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
344f4 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
344f8 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
344fc 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
34500 00d             | 
34500 00d 20 00 00 FF 
34504 00e 00 30 04 F1 |                 add 	psramaddr,##16384
34508 00f E0 03 00 FF 
3450c 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
34510 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
34514 012             | 
34514 012             |                 
34514 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
34518 013             |     
34518 013 01 2C 60 FD |                 cogid 	t11				' get id
3451c 014 00 00 EC FC |                 coginit #0,#0				' start the new program
34520 015 03 2C 60 FD |                 cogstop t11				' stop the loader
34524 016             | 
34524 016 00 00 00 00 | t11 		long 	0
34528 017 00 FF 07 00 | mailbox 	long 	$7FF00
3452c 018 00 00 00 00 | psramaddr 	long 	0
34530 019 00 00 00 00 | pslockval	long 	0
34534 01a 00 00 00 00 | cmd             long    0
34538 01b 00 00 00 00 | buf1            long    0
3453c 01c 00 40 00 00 | buf2            long    16384
34540 01d 44 45 03 00 | 	long	@@@_dat_ + 12624
34544 01e 50 32 20 52 
34548 01f 65 74 72 6F 
3454c 020 6D 61 63 68 
34550 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
34554 022 42 41 53 49 
34558 023 43 20 76 65 
3455c 024 72 73 69 6F 
34560 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
34564 026 32 39 62 00 | 	byte	$32, $39, $62, $00
34568 027             | 	alignl
34568 027             | _hg010b_spin2_dat_
34568 027             | 
34568 027 00 00 00 00 
3456c 028 00 00 00 00 
34570 029 00 00 00 00 
34574 02a 00 00 00 00 
34578 02b 00 00 00    | vga_font       file "vgafont.def"
3457b 02b 7E 81 A5 81 
3457f 02c 81 BD 99 81 
34583 02d 81 7E 00 00 
34587 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
3458b 02f 7E FF DB FF 
3458f 030 FF C3 E7 FF 
34593 031 FF 7E 00 00 
34597 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
3459b 033 00 36 7F 7F 
3459f 034 7F 7F 3E 1C 
345a3 035 08 00 00 00 
345a7 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
345ab 037 00 08 1C 3E 
345af 038 7F 3E 1C 08 
345b3 039 00 00 00 00 
345b7 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
345bb 03b 18 3C 3C E7 
345bf 03c E7 E7 18 18 
345c3 03d 3C 00 00 00 
345c7 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
345cb 03f 18 3C 7E FF 
345cf 040 FF 7E 18 18 
345d3 041 3C 00 00 00 
345d7 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
345db 043 00 00 00 18 
345df 044 3C 3C 18 00 
345e3 045 00 00 00 00 
345e7 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
345eb 047 FF FF FF E7 
345ef 048 C3 C3 E7 FF 
345f3 049 FF FF FF FF 
345f7 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
345fb 04b 00 00 3C 66 
345ff 04c 42 42 66 3C 
34603 04d 00 00 00 00 
34607 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
3460b 04f FF FF C3 99 
3460f 050 BD BD 99 C3 
34613 051 FF FF FF FF 
34617 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3461b 053 78 70 58 4C 
3461f 054 1E 33 33 33 
34623 055 33 1E 00 00 
34627 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
3462b 057 3C 66 66 66 
3462f 058 66 3C 18 7E 
34633 059 18 18 00 00 
34637 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
3463b 05b FC CC FC 0C 
3463f 05c 0C 0C 0C 0E 
34643 05d 0F 07 00 00 
34647 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
3464b 05f FE C6 FE C6 
3464f 060 C6 C6 C6 E6 
34653 061 E7 67 03 00 
34657 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
3465b 063 18 18 DB 3C 
3465f 064 E7 3C DB 18 
34663 065 18 00 00 00 
34667 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
3466b 067 03 07 0F 1F 
3466f 068 7F 1F 0F 07 
34673 069 03 01 00 00 
34677 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
3467b 06b 60 70 78 7C 
3467f 06c 7F 7C 78 70 
34683 06d 60 40 00 00 
34687 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
3468b 06f 18 3C 7E 18 
3468f 070 18 18 7E 3C 
34693 071 18 00 00 00 
34697 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
3469b 073 66 66 66 66 
3469f 074 66 66 66    | 	byte	$66[7]
346a2 075 00 66 66 00 
346a6 076 00 00 00 00 
346aa 077 00 FE DB DB 
346ae 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
346b2 079 D8 D8 D8 00 
346b6 07a 00 00 00 3E 
346ba 07b 63 06 1C 36 
346be 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
346c2 07d 30 63 3E 00 
346c6 07e 00 00 00 00 
346ca 07f 00 00 00 00 
346ce 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
346d2 081 7F 7F 7F 00 
346d6 082 00 00 00 00 
346da 083 00 18 3C 7E 
346de 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
346e2 085 3C 18 7E 00 
346e6 086 00 00 00 00 
346ea 087 00 18 3C 7E 
346ee 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
346f2 089 18 18 18 00 
346f6 08a 00 00 00 00 
346fa 08b 00 18 18 18 
346fe 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
34702 08d 7E 3C 18 00 
34706 08e 00 00 00 00 
3470a 08f 00 00 00 18 
3470e 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
34712 091 00 00 00 00 
34716 092 00 00 00 00 
3471a 093 00 00 00    | 	byte	$00[11]
3471d 094 0C 06 7F 06 
34721 095 0C 00 00 00 
34725 096 00 00 00 00 
34729 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3472d 098 00 03 03 03 
34731 099 7F 00 00 00 
34735 09a 00 00 00 00 
34739 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3473d 09c 14 36 7F 36 
34741 09d 14 00 00 00 
34745 09e 00 00 00 00 
34749 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
3474d 0a0 1C 1C 3E 3E 
34751 0a1 7F 7F 00 00 
34755 0a2 00 00 00 00 
34759 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3475d 0a4 7F 3E 3E 1C 
34761 0a5 1C 08 00 00 
34765 0a6 00 00 00 00 
34769 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3476d 0a8 00 00 00 00 
34771 0a9 00 00 00 00 
34775 0aa 00 00 00 00 
34779 0ab 00 00       | 	byte	$00[14]
3477b 0ab 18 3C 3C 3C 
3477f 0ac 18 18 18 00 
34783 0ad 18 18 00 00 
34787 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
3478b 0af 66 24 00 00 
3478f 0b0 00 00 00 00 
34793 0b1 00 00 00 00 
34797 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3479b 0b3 00 36 36 7F 
3479f 0b4 36 36 36 7F 
347a3 0b5 36 36 00 00 
347a7 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
347ab 0b7 3E 63 43 03 
347af 0b8 3E 60 60 61 
347b3 0b9 63 3E 18 18 
347b7 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
347bb 0bb 00 00 43 63 
347bf 0bc 30 18 0C 06 
347c3 0bd 63 61 00 00 
347c7 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
347cb 0bf 1C 36 36 1C 
347cf 0c0 6E 3B 33 33 
347d3 0c1 33 6E 00 00 
347d7 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
347db 0c3 0C 0C 0C 06 
347df 0c4 00 00 00 00 
347e3 0c5 00 00 00 00 
347e7 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
347eb 0c7 30 18 0C 0C 
347ef 0c8 0C 0C 0C 0C 
347f3 0c9 18 30 00 00 
347f7 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
347fb 0cb 0C 18 30 30 
347ff 0cc 30 30 30 30 
34803 0cd 18 0C 00 00 
34807 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
3480b 0cf 00 00 00 66 
3480f 0d0 3C FF 3C 66 
34813 0d1 00 00 00 00 
34817 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
3481b 0d3 00 00 00 18 
3481f 0d4 18 7E 18 18 
34823 0d5 00 00 00 00 
34827 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3482b 0d7 00 00 00 00 
3482f 0d8 00 00 00 00 | 	byte	$00[8]
34833 0d9 18 18 18 0C 
34837 0da 00 00 00 00 
3483b 0db 00 00 00 00 
3483f 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
34843 0dd 00 00 00 00 
34847 0de 00 00 00 00 
3484b 0df 00 00 00 00 
3484f 0e0 00 00 00 00 | 	byte	$00[16]
34853 0e1 18 18 00 00 
34857 0e2 00 00 00 00 
3485b 0e3 00 00 40 60 
3485f 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
34863 0e5 03 01 00 00 
34867 0e6 00 00 00 00 
3486b 0e7 1C 36 63 63 
3486f 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
34873 0e9 36 1C 00 00 
34877 0ea 00 00 00 00 
3487b 0eb 18 1C 1E 18 
3487f 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
34883 0ed 18 7E 00 00 
34887 0ee 00 00 00 00 
3488b 0ef 3E 63 60 30 
3488f 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
34893 0f1 63 7F 00 00 
34897 0f2 00 00 00 00 
3489b 0f3 3E 63 60 60 
3489f 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
348a3 0f5 63 3E 00 00 
348a7 0f6 00 00 00 00 
348ab 0f7 30 38 3C 36 
348af 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
348b3 0f9 30 78 00 00 
348b7 0fa 00 00 00 00 
348bb 0fb 7F 03 03 03 
348bf 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
348c3 0fd 63 3E 00 00 
348c7 0fe 00 00 00 00 
348cb 0ff 1C 06 03 03 
348cf 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
348d3 101 63 3E 00 00 
348d7 102 00 00 00 00 
348db 103 7F 63 60 60 
348df 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
348e3 105 0C 0C 00 00 
348e7 106 00 00 00 00 
348eb 107 3E 63 63 63 
348ef 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
348f3 109 63 3E 00 00 
348f7 10a 00 00 00 00 
348fb 10b 3E 63 63 63 
348ff 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
34903 10d 30 1E 00 00 
34907 10e 00 00 00 00 
3490b 10f 00 00 00 18 
3490f 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
34913 111 18 18 00 00 
34917 112 00 00 00 00 
3491b 113 00 00 00 18 
3491f 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
34923 115 18 18 0C 00 
34927 116 00 00 00 00 
3492b 117 00 60 30 18 
3492f 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
34933 119 30 60 00 00 
34937 11a 00 00 00 00 
3493b 11b 00 00 00 7E 
3493f 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
34943 11d 00 00 00 00 
34947 11e 00 00 00 00 
3494b 11f 00          | 	byte	$00[9]
3494c 120 06 0C 18 30 
34950 121 60 30 18 0C 
34954 122 06 00 00 00 
34958 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
3495c 124 63 63 30 18 
34960 125 18 18 00 18 
34964 126 18 00 00 00 
34968 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
3496c 128 3E 63 63 7B 
34970 129 7B 7B 3B 03 
34974 12a 3E 00 00 00 
34978 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
3497c 12c 1C 36 63 63 
34980 12d 7F 63 63 63 
34984 12e 63 00 00 00 
34988 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
3498c 130 66 66 66 3E 
34990 131 66 66 66 66 
34994 132 3F 00 00 00 
34998 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
3499c 134 66 43 03 03 
349a0 135 03 03 43 66 
349a4 136 3C 00 00 00 
349a8 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
349ac 138 36 66 66 66 
349b0 139 66 66 66 36 
349b4 13a 1F 00 00 00 
349b8 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
349bc 13c 66 46 16 1E 
349c0 13d 16 06 46 66 
349c4 13e 7F 00 00 00 
349c8 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
349cc 140 66 46 16 1E 
349d0 141 16 06 06 06 
349d4 142 0F 00 00 00 
349d8 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
349dc 144 66 43 03 03 
349e0 145 7B 63 63 66 
349e4 146 5C 00 00 00 
349e8 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
349ec 148 63 63 63 7F 
349f0 149 63 63 63 63 
349f4 14a 63 00 00 00 
349f8 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
349fc 14c 18 18 18 18 
34a00 14d 18 18 18 18 | 	byte	$18[8]
34a04 14e 3C 00 00 00 
34a08 14f 00 00 00 78 
34a0c 150 30 30 30 30 
34a10 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
34a14 152 1E 00 00 00 
34a18 153 00 00 00 67 
34a1c 154 66 66 36 1E 
34a20 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
34a24 156 67 00 00 00 
34a28 157 00 00 00 0F 
34a2c 158 06 06 06 06 
34a30 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
34a34 15a 7F 00 00 00 
34a38 15b 00 00 00 63 
34a3c 15c 77 7F 7F 6B 
34a40 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
34a44 15e 63 00 00 00 
34a48 15f 00 00 00 63 
34a4c 160 67 6F 7F 7B 
34a50 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
34a54 162 63 00 00 00 
34a58 163 00 00 00 3E 
34a5c 164 63 63 63 63 
34a60 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
34a64 166 3E 00 00 00 
34a68 167 00 00 00 3F 
34a6c 168 66 66 66 3E 
34a70 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
34a74 16a 0F 00 00 00 
34a78 16b 00 00 00 3E 
34a7c 16c 63 63 63 63 
34a80 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
34a84 16e 3E 30 70 00 
34a88 16f 00 00 00 3F 
34a8c 170 66 66 66 3E 
34a90 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
34a94 172 67 00 00 00 
34a98 173 00 00 00 3E 
34a9c 174 63 63 06 1C 
34aa0 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
34aa4 176 3E 00 00 00 
34aa8 177 00 00 00 7E 
34aac 178 7E 5A 18 18 
34ab0 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
34ab4 17a 3C 00 00 00 
34ab8 17b 00 00 00 63 
34abc 17c 63 63 63 63 
34ac0 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
34ac4 17e 3E 00 00 00 
34ac8 17f 00 00 00 63 
34acc 180 63 63 63 63 
34ad0 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
34ad4 182 08 00 00 00 
34ad8 183 00 00 00 63 
34adc 184 63 63 63 6B 
34ae0 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
34ae4 186 36 00 00 00 
34ae8 187 00 00 00 63 
34aec 188 63 36 3E 1C 
34af0 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
34af4 18a 63 00 00 00 
34af8 18b 00 00 00 66 
34afc 18c 66 66 66 3C 
34b00 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
34b04 18e 3C 00 00 00 
34b08 18f 00 00 00 7F 
34b0c 190 63 61 30 18 
34b10 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
34b14 192 7F 00 00 00 
34b18 193 00 00 00 3C 
34b1c 194 0C 0C 0C 0C 
34b20 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
34b24 196 3C 00 00 00 
34b28 197 00 00 00 00 
34b2c 198 01 03 07 0E 
34b30 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
34b34 19a 40 00 00 00 
34b38 19b 00 00 00 3C 
34b3c 19c 30 30 30 30 
34b40 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
34b44 19e 3C 00 00 00 
34b48 19f 1C 36 00 00 
34b4c 1a0 00 00 00 00 
34b50 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34b54 1a2 00 00 00 00 
34b58 1a3 00 00 00 00 
34b5c 1a4 00 00 00 00 
34b60 1a5 00 00 00 00 
34b64 1a6 00          | 	byte	$00[17]
34b65 1a6 FF 00 00 0C 
34b69 1a7 18 00 00 00 
34b6d 1a8 00 00 00 00 
34b71 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34b75 1aa 00 00 00 00 
34b79 1ab 00 00 00 00 
34b7d 1ac 00          | 	byte	$00[9]
34b7e 1ac 1E 30 3E 33 
34b82 1ad 33 33 6E 00 
34b86 1ae 00 00 00 00 
34b8a 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
34b8e 1b0 1E 36 66 66 
34b92 1b1 66 66 3E 00 
34b96 1b2 00 00 00 00 
34b9a 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
34b9e 1b4 3E 63 03 03 
34ba2 1b5 03 63 3E 00 
34ba6 1b6 00 00 00 00 
34baa 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
34bae 1b8 3C 36 33 33 
34bb2 1b9 33 33 6E 00 
34bb6 1ba 00 00 00 00 
34bba 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
34bbe 1bc 3E 63 7F 03 
34bc2 1bd 03 63 3E 00 
34bc6 1be 00 00 00 00 
34bca 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
34bce 1c0 0C 1E 0C 0C 
34bd2 1c1 0C 0C 1E 00 
34bd6 1c2 00 00 00 00 
34bda 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
34bde 1c4 6E 33 33 33 
34be2 1c5 33 33 3E 30 
34be6 1c6 33 1E 00 00 
34bea 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
34bee 1c8 36 6E 66 66 
34bf2 1c9 66 66 67 00 
34bf6 1ca 00 00 00 00 
34bfa 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
34bfe 1cc 1C 18 18 18 
34c02 1cd 18 18 3C 00 
34c06 1ce 00 00 00 00 
34c0a 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
34c0e 1d0 70 60 60 60 
34c12 1d1 60 60 60 66 
34c16 1d2 66 3C 00 00 
34c1a 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
34c1e 1d4 66 36 1E 1E 
34c22 1d5 36 66 67 00 
34c26 1d6 00 00 00 00 
34c2a 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
34c2e 1d8 18 18 18 18 
34c32 1d9 18 18       | 	byte	$18[6]
34c34 1da 3C 00 00 00 
34c38 1db 00 00 00 00 
34c3c 1dc 00 00 37 7F 
34c40 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
34c44 1de 63 00 00 00 
34c48 1df 00 00 00 00 
34c4c 1e0 00 00 3B 66 
34c50 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
34c54 1e2 66 00 00 00 
34c58 1e3 00 00 00 00 
34c5c 1e4 00 00 3E 63 
34c60 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
34c64 1e6 3E 00 00 00 
34c68 1e7 00 00 00 00 
34c6c 1e8 00 00 3B 66 
34c70 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
34c74 1ea 3E 06 06 0F 
34c78 1eb 00 00 00 00 
34c7c 1ec 00 00 6E 33 
34c80 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
34c84 1ee 3E 30 30 78 
34c88 1ef 00 00 00 00 
34c8c 1f0 00 00 3B 6E 
34c90 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
34c94 1f2 0F 00 00 00 
34c98 1f3 00 00 00 00 
34c9c 1f4 00 00 3E 63 
34ca0 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
34ca4 1f6 3E 00 00 00 
34ca8 1f7 00 00 00 08 
34cac 1f8 0C 0C 3F 0C 
34cb0 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
34cb4 1fa 38 00 00 00 
34cb8 1fb 00 00 00 00 
34cbc 1fc 00 00 33 33 
34cc0 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
34cc4 1fe 6E 00 00 00 
34cc8 1ff 00 00 00 00 
34ccc 200 00 00 63 63 
34cd0 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
34cd4 202 1C 00 00 00 
34cd8 203 00 00 00 00 
34cdc 204 00 00 63 63 
34ce0 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
34ce4 206 36 00 00 00 
34ce8 207 00 00 00 00 
34cec 208 00 00 63 36 
34cf0 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
34cf4 20a 63 00 00 00 
34cf8 20b 00 00 00 00 
34cfc 20c 00 00 63 63 
34d00 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
34d04 20e 7E 60 30 1F 
34d08 20f 00 00 00 00 
34d0c 210 00 00 7F 33 
34d10 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
34d14 212 7F 00 00 00 
34d18 213 00 00 00 70 
34d1c 214 18 18 18 0E 
34d20 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
34d24 216 70 00 00 00 
34d28 217 00 00 00 18 
34d2c 218 18 18 18 18 
34d30 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
34d34 21a 18 00 00 00 
34d38 21b 00 00 00 0E 
34d3c 21c 18 18 18 70 
34d40 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
34d44 21e 0E 00 00 00 
34d48 21f 6E 3B 00 00 
34d4c 220 00 00 00 00 
34d50 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34d54 222 00 00 00 00 
34d58 223 00 00 00 00 
34d5c 224 00 00       | 	byte	$00[10]
34d5e 224 08 1C 36 63 
34d62 225 63 63 7F 00 
34d66 226 00 00 00 00 
34d6a 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
34d6e 228 03 03 03 03 
34d72 229 43 66 3C 18 
34d76 22a 30 1E 00 00 
34d7a 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
34d7e 22c 33 33 33 33 
34d82 22d 33 33       | 	byte	$33[6]
34d84 22e 6E 00 00 00 
34d88 22f 00 00 60 30 
34d8c 230 18 00 3E 63 
34d90 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
34d94 232 3E 00 00 00 
34d98 233 00 00 08 1C 
34d9c 234 36 00 1E 30 
34da0 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
34da4 236 6E 00 00 00 
34da8 237 00 00 00 00 
34dac 238 33 00 1E 30 
34db0 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
34db4 23a 6E 00 00 00 
34db8 23b 00 00 1C 36 
34dbc 23c 1C 00 33 33 
34dc0 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
34dc4 23e 6E 00 00 00 
34dc8 23f 00 00 60 30 
34dcc 240 18 00 3E 63 
34dd0 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
34dd4 242 3E 00 00 00 
34dd8 243 00 00 00 00 
34ddc 244 00 00 3E 63 
34de0 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
34de4 246 3E 18 30 1E 
34de8 247 00 00 00 1C 
34dec 248 58 78 38 18 
34df0 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
34df4 24a 3C 00 00 00 
34df8 24b 00 00 00 00 
34dfc 24c 63 00 3E 63 
34e00 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
34e04 24e 3E 00 00 00 
34e08 24f 66 33 00 3E 
34e0c 250 63 63 63 63 
34e10 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
34e14 252 3E 00 00 00 
34e18 253 00 00 CC 66 
34e1c 254 33 00 3E 63 
34e20 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
34e24 256 3E 00 00 00 
34e28 257 00 00 18 3C 
34e2c 258 66 00 1C 18 
34e30 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
34e34 25a 3C 00 00 00 
34e38 25b 30 18 00 7F 
34e3c 25c 63 61 30 18 
34e40 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
34e44 25e 7F 00 00 00 
34e48 25f 00 63 00 08 
34e4c 260 1C 36 63 63 
34e50 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
34e54 262 63 00 00 00 
34e58 263 30 18 00 3C 
34e5c 264 66 43 03 03 
34e60 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
34e64 266 3C 00 00 00 
34e68 267 30 18 00 7F 
34e6c 268 66 46 16 1E 
34e70 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
34e74 26a 7F 00 00 00 
34e78 26b 0C 06 00 0F 
34e7c 26c 06 06 06 06 
34e80 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
34e84 26e 7F 00 00 00 
34e88 26f 30 18 00 1C 
34e8c 270 18 18 18 18 
34e90 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
34e94 272 3C 00 00 00 
34e98 273 00 00 08 1C 
34e9c 274 36 00 3E 63 
34ea0 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
34ea4 276 3E 00 00 00 
34ea8 277 00 00 00 00 
34eac 278 63 00 3E 63 
34eb0 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
34eb4 27a 3E 00 00 00 
34eb8 27b 00 00 00 6F 
34ebc 27c 46 26 06 06 
34ec0 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
34ec4 27e 7F 00 00 00 
34ec8 27f 00 00 00 6E 
34ecc 280 4C 2C 0C 0C 
34ed0 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
34ed4 282 1E 00 00 00 
34ed8 283 30 18 00 3E 
34edc 284 63 63 06 1C 
34ee0 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
34ee4 286 3E 00 00 00 
34ee8 287 00 00 60 30 
34eec 288 18 00 3E 63 
34ef0 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
34ef4 28a 3E 00 00 00 
34ef8 28b 00 63 00 3E 
34efc 28c 63 63 63 63 
34f00 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
34f04 28e 3E 00 00 00 
34f08 28f 00 63 00 63 
34f0c 290 63 63 63 63 
34f10 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
34f14 292 3E 00 00 00 
34f18 293 6C 38 00 7E 
34f1c 294 7E 5A 18 18 
34f20 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
34f24 296 3C 00 00 00 
34f28 297 00 00 60 48 
34f2c 298 2C 0C 3F 0C 
34f30 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
34f34 29a 38 00 00 00 
34f38 29b 00 00 00 0F 
34f3c 29c 26 36 1E 0E 
34f40 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
34f44 29e 7F 00 00 00 
34f48 29f 00 00 00 00 
34f4c 2a0 00 63 36 1C 
34f50 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
34f54 2a2 00 00 00 00 
34f58 2a3 00 00       | 	byte	$00[6]
34f5a 2a3 36 1C 08 00 
34f5e 2a4 3E 63 03 03 
34f62 2a5 03 63 3E 00 
34f66 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
34f6a 2a7 30 18 0C 00 
34f6e 2a8 1E 30 3E 33 
34f72 2a9 33 33 6E 00 
34f76 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
34f7a 2ab 60 30 18 00 
34f7e 2ac 1C 18 18 18 
34f82 2ad 18 18 3C 00 
34f86 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
34f8a 2af 60 30 18 00 
34f8e 2b0 3E 63 63 63 
34f92 2b1 63 63 3E 00 
34f96 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
34f9a 2b3 30 18 0C 00 
34f9e 2b4 33 33 33 33 
34fa2 2b5 33 33 6E 00 
34fa6 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
34faa 2b7 00 08 1C 36 
34fae 2b8 63 63 7F 63 
34fb2 2b9 63 63 63 18 
34fb6 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
34fba 2bb 00 00 00 00 
34fbe 2bc 1E 30 3E 33 
34fc2 2bd 33 33 6E 18 
34fc6 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
34fca 2bf 00 7F 63 61 
34fce 2c0 30 18 0C 06 
34fd2 2c1 43 63 7F 00 
34fd6 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
34fda 2c3 36 1C 08 00 
34fde 2c4 7F 33 18 0C 
34fe2 2c5 06 63 7F 00 
34fe6 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
34fea 2c7 00 7F 66 46 
34fee 2c8 16 1E 16 06 
34ff2 2c9 46 66 7F 18 
34ff6 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
34ffa 2cb 00 00 00 00 
34ffe 2cc 3E 63 7F 03 
35002 2cd 03 63 3E 18 
35006 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
3500a 2cf 00 3C 66 03 
3500e 2d0 1F 03 0F 03 
35012 2d1 03 66 3C 00 
35016 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
3501a 2d3 60 30 18 00 
3501e 2d4 7F 33 18 0C 
35022 2d5 06 63 7F 00 
35026 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
3502a 2d7 00 3C 66 43 
3502e 2d8 03 03 03 03 
35032 2d9 43 66 3C 00 
35036 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
3503a 2db 00 00 00 00 
3503e 2dc 3E 63 06 1C 
35042 2dd 30 63 3E 18 
35046 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
3504a 2df 00 00 00 00 
3504e 2e0 00 00       | 	byte	$00[6]
35050 2e1 6C 36 1B 36 
35054 2e2 6C 00 00 00 
35058 2e3 00 00 00 00 
3505c 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35060 2e5 1B 36 6C 36 
35064 2e6 1B 00 00 00 
35068 2e7 88 22 88 22 
3506c 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
35070 2e9 88 22 88 22 
35074 2ea 88 22 88 22 
35078 2eb AA 55 AA 55 
3507c 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
35080 2ed AA 55 AA 55 
35084 2ee AA 55 AA 55 
35088 2ef BB EE BB EE 
3508c 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
35090 2f1 BB EE BB EE 
35094 2f2 BB EE BB EE 
35098 2f3 18 18 18 18 
3509c 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
350a0 2f5 18 18 18 18 
350a4 2f6 18 18 18 18 
350a8 2f7 18 18 18 18 
350ac 2f8 18 18 18    | 	byte	$18[15]
350af 2f8 1F 18 18 18 
350b3 2f9 18 18 18 18 
350b7 2fa 18 30 18 00 
350bb 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
350bf 2fc 63 7F 63 63 
350c3 2fd 63 63 00 00 
350c7 2fe 00 1C 36 00 
350cb 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
350cf 300 63 7F 63 63 
350d3 301 63 63 00 00 
350d7 302 00 36 1C 00 
350db 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
350df 304 1E 16 06 46 
350e3 305 66 7F 00 00 
350e7 306 00 00 00 00 
350eb 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
350ef 308 1C 30 60 63 
350f3 309 63 3E 18 30 
350f7 30a 1E 6C 6C 6C 
350fb 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
350ff 30c 6F 6C 6C 6C 
35103 30d 6C 6C 6C 6C 
35107 30e 6C 6C 6C 6C 
3510b 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3510f 310 6C 6C 6C 6C 
35113 311 6C 6C 6C 6C 
35117 312 6C          | 	byte	$6c[9]
35118 313 00 00 00 00 
3511c 314 00          | 	byte	$00[5]
3511d 314 7F 60 6F 6C 
35121 315 6C 6C 6C 6C 
35125 316 6C 6C 6C 6C 
35129 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3512d 318 6F 60 7F 00 
35131 319 00 00 00 00 
35135 31a 00 00 00 18 
35139 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
3513d 31c 61 30 18 0C 
35141 31d 06 43 63 7F 
35145 31e 00 00 00 00 
35149 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
3514d 320 00 7F 33 18 
35151 321 0C 06 63 7F 
35155 322 00 00 00 00 
35159 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
3515d 324 00 00 1F 18 
35161 325 18 18 18 18 
35165 326 18 18 18 18 
35169 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3516d 328 18 18 F8 00 
35171 329 00 00 00 00 
35175 32a 00 00 00 18 
35179 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3517d 32c 18 18 FF 00 
35181 32d 00 00 00 00 
35185 32e 00 00 00 00 
35189 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3518d 330 00 00 FF 18 
35191 331 18 18 18 18 
35195 332 18 18 18 18 
35199 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3519d 334 18 18 F8 18 
351a1 335 18 18 18 18 
351a5 336 18 18 18 00 
351a9 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
351ad 338 00 00 FF 00 
351b1 339 00 00 00 00 
351b5 33a 00 00 00 18 
351b9 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
351bd 33c 18 18 FF 18 
351c1 33d 18 18 18 18 
351c5 33e 18 18 18 63 
351c9 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
351cd 340 36 63 63 7F 
351d1 341 63 63 63 63 
351d5 342 00 00 00 00 
351d9 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
351dd 344 00 1E 30 3E 
351e1 345 33 33 33 6E 
351e5 346 00 00 00 6C 
351e9 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
351ed 348 EC 0C FC 00 
351f1 349 00 00 00 00 
351f5 34a 00 00 00 00 
351f9 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
351fd 34c FC 0C EC 6C 
35201 34d 6C 6C 6C 6C 
35205 34e 6C 6C 6C 6C 
35209 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3520d 350 EF 00 FF 00 
35211 351 00 00 00 00 
35215 352 00 00 00 00 
35219 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3521d 354 FF 00 EF 6C 
35221 355 6C 6C 6C 6C 
35225 356 6C 6C 6C 6C 
35229 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3522d 358 EC 0C EC 6C 
35231 359 6C 6C 6C 6C 
35235 35a 6C 6C 6C 00 
35239 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3523d 35c FF 00 FF 00 
35241 35d 00 00 00 00 
35245 35e 00 00 00 6C 
35249 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3524d 360 EF 00 EF 6C 
35251 361 6C 6C 6C 6C 
35255 362 6C 6C 6C 00 
35259 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3525d 364 63 3E 63 63 
35261 365 63 63 3E 63 
35265 366 00 00 00 00 
35269 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
3526d 368 30 3C 36 33 
35271 369 33 33 33 6E 
35275 36a 00 00 00 00 
35279 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
3527d 36c 66 66 6F 66 
35281 36d 66 66 36 1F 
35285 36e 00 00 00 36 
35289 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
3528d 370 66 66 66 66 
35291 371 66 66       | 	byte	$66[6]
35293 371 36 1F 00 00 
35297 372 00 00 63 00 
3529b 373 7F 66 46 16 
3529f 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
352a3 375 66 7F 00 00 
352a7 376 00 6C 38 00 
352ab 377 38 30 30 3C 
352af 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
352b3 379 33 6E 00 00 
352b7 37a 00 36 1C 00 
352bb 37b 63 67 6F 7F 
352bf 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
352c3 37d 63 63 00 00 
352c7 37e 00 30 18 00 
352cb 37f 3C 18 18 18 
352cf 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
352d3 381 18 3C 00 00 
352d7 382 00 3C 66 00 
352db 383 3C 18 18 18 
352df 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
352e3 385 18 3C 00 00 
352e7 386 00 00 00 36 
352eb 387 1C 08 00 3E 
352ef 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
352f3 389 63 3E 00 00 
352f7 38a 00 18 18 18 
352fb 38b 18 18 18 18 
352ff 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
35303 38d 00 00 00 00 
35307 38e 00 00 00 00 
3530b 38f 00 00 00 00 | 	byte	$00[12]
3530f 390 F8 18 18 18 
35313 391 18 18 18 18 
35317 392 18 FF FF FF 
3531b 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3531f 394 FF FF FF FF 
35323 395 FF FF FF FF 
35327 396 FF          | 	byte	$ff[9]
35328 397 00 00 00 00 
3532c 398 00 00 00    | 	byte	$00[7]
3532f 398 FF FF FF FF 
35333 399 FF FF FF FF 
35337 39a FF          | 	byte	$ff[9]
35338 39b 00 00 00 7E 
3533c 39c 7E 5A 18 18 
35340 39d 18 18 18 18 
35344 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
35348 39f 1C 36 1C 63 
3534c 3a0 63 63 63 63 
35350 3a1 63 63 63 63 
35354 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35358 3a3 FF FF FF FF 
3535c 3a4 FF FF FF    | 	byte	$ff[7]
3535f 3a4 00 00 00 00 
35363 3a5 00 00 00 00 
35367 3a6 00          | 	byte	$00[9]
35368 3a7 30 18 00 3E 
3536c 3a8 63 63 63 63 
35370 3a9 63 63 63 63 
35374 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35378 3ab 00 00 00 1E 
3537c 3ac 33 33 33 1B 
35380 3ad 33 63 63 63 
35384 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
35388 3af 1C 36 00 3E 
3538c 3b0 63 63 63 63 
35390 3b1 63 63 63 63 
35394 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35398 3b3 30 18 00 63 
3539c 3b4 67 6F 7F 7B 
353a0 3b5 73 63 63 63 
353a4 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
353a8 3b7 00 00 60 30 
353ac 3b8 18 00 3B 66 
353b0 3b9 66 66 66 66 
353b4 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
353b8 3bb 00 00 36 1C 
353bc 3bc 08 00 3B 66 
353c0 3bd 66 66 66 66 
353c4 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
353c8 3bf 36 1C 00 3E 
353cc 3c0 63 63 06 1C 
353d0 3c1 30 60 63 63 
353d4 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
353d8 3c3 00 00 36 1C 
353dc 3c4 08 00 3E 63 
353e0 3c5 06 1C 30 63 
353e4 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
353e8 3c7 30 18 00 3F 
353ec 3c8 66 66 66 3E 
353f0 3c9 36 66 66 66 
353f4 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
353f8 3cb 30 18 00 63 
353fc 3cc 63 63 63 63 
35400 3cd 63 63 63 63 
35404 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35408 3cf 00 00 60 30 
3540c 3d0 18 00 3B 6E 
35410 3d1 66 06 06 06 
35414 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
35418 3d3 66 33 00 63 
3541c 3d4 63 63 63 63 
35420 3d5 63 63 63 63 
35424 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35428 3d7 00 00 60 30 
3542c 3d8 18 00 63 63 
35430 3d9 63 63 63 63 
35434 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
35438 3db 30 18 00 66 
3543c 3dc 66 66 66 3C 
35440 3dd 18 18 18 18 
35444 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
35448 3df 00 00 00 08 
3544c 3e0 0C 0C 3F 0C 
35450 3e1 0C 0C 0C 6C 
35454 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
35458 3e3 30 18 00 00 
3545c 3e4 00 00 00 00 
35460 3e5 00 00 00 00 
35464 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35468 3e7 00 00 00 00 
3546c 3e8 00 00 00 00 | 	byte	$00[8]
35470 3e9 7F 00 00 00 
35474 3ea 00 00 00 00 
35478 3eb 66 33 00 00 
3547c 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
35480 3ed 00 00 00 00 
35484 3ee 00 00 00 00 
35488 3ef 00 00 00 00 
3548c 3f0 00 00 00 00 
35490 3f1 00 00 00 00 
35494 3f2 00          | 	byte	$00[21]
35495 3f2 0C 06 3C 36 
35499 3f3 1C 00 00 00 
3549d 3f4 00 00 00 00 
354a1 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
354a5 3f6 00 00 00 63 
354a9 3f7 3E 00 00 00 
354ad 3f8 00 00 00 00 
354b1 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
354b5 3fa 00 00 00 00 
354b9 3fb 3E 63 06 1C 
354bd 3fc 36 63 63 36 
354c1 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
354c5 3fe 00 00 00 00 
354c9 3ff 00 00 00 00 | 	byte	$00[8]
354cd 400 18 00 7E 00 
354d1 401 18 00 00 00 
354d5 402 00 00 00 00 
354d9 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
354dd 404 00 00 00 00 
354e1 405 00 00 00 00 | 	byte	$00[8]
354e5 406 18 30 1E 00 
354e9 407 00 00 1C 36 
354ed 408 36 1C 00 00 
354f1 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
354f5 40a 00 00 00 00 
354f9 40b 63 00 00 00 
354fd 40c 00 00 00 00 
35501 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35505 40e 00 00 00 18 
35509 40f 18 00 00 00 
3550d 410 00 00 00 00 
35511 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35515 412 00 00 00 00 
35519 413 00          | 	byte	$00[5]
3551a 413 CC 66 33 00 
3551e 414 33 33 33 33 
35522 415 33 33 6E 00 
35526 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
3552a 417 00 3F 66 66 
3552e 418 66 3E 36 66 
35532 419 66 66 6F 00 
35536 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
3553a 41b 36 1C 08 00 
3553e 41c 3B 6E 66 06 
35542 41d 06 06 0F 00 
35546 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
3554a 41f 00 00 00 7E 
3554e 420 7E 7E 7E 7E 
35552 421 7E 7E 00 00 
35556 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
3555a 423 00 00 00 00 
3555e 424 00 00 00 00 
35562 425 00 00 00 00 
35566 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35568 427             | 'vga_font       file "vgafont.def"
35568 427 00 00 00 00 
      ...             
35598 433 00 00 00 00 
3559c 434 00 00 00    | st_font        file "st4font.def"
3559f 434 FF FF 00 00 
355a3 435 00 00 00 00 
355a7 436 00 18 18 18 
355ab 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
355af 438 18 18 18 18 
355b3 439 18 18 18 18 
355b7 43a 18          | 	byte	$18[9]
355b8 43b 00 00 00 00 
355bc 43c 00 00 00    | 	byte	$00[7]
355bf 43c FF FF 18 18 
355c3 43d 18 18 18 18 
355c7 43e 18 18 18 18 
355cb 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
355cf 440 FF FF 00 00 
355d3 441 00 00 00 00 
355d7 442 00 18 18 18 
355db 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
355df 444 1F 1F 18 18 
355e3 445 18 18 18 18 
355e7 446 18 18 18 18 
355eb 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
355ef 448 F8 F8 18 18 
355f3 449 18 18 18 18 
355f7 44a 18 00 00 00 
355fb 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
355ff 44c 1F 1F 18 18 
35603 44d 18 18 18 18 
35607 44e 18 00 00 00 
3560b 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3560f 450 F8 F8 18 18 
35613 451 18 18 18 18 
35617 452 18 18 18 18 
3561b 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3561f 454 1F 1F 00 00 
35623 455 00 00 00 00 
35627 456 00 18 18 18 
3562b 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3562f 458 F8 F8 00 00 
35633 459 00 00 00 00 
35637 45a 00 18 18 18 
3563b 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3563f 45c FF FF 18 18 
35643 45d 18 18 18 18 
35647 45e 18 00 00 18 
3564b 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
3564f 460 66 7E 7E 66 
35653 461 66 66 66 30 
35657 462 18 00 00 7E 
3565b 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
3565f 464 3E 06 06 06 
35663 465 06 7E 7E 18 
35667 466 0C 30 18 3C 
3566b 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3566f 468 06 06 06 66 
35673 469 66 7E 3C 00 
35677 46a 00 30 18 66 
3567b 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3567f 46c 7E 7E 76 76 
35683 46d 66 66 66 00 
35687 46e 00 30 18 7C 
3568b 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3568f 470 1C 38 70 60 
35693 471 60 7E 3E 00 
35697 472 00 30 18 7E 
3569b 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3569f 474 18 0C 0C 06 
356a3 475 06 7E 7E 00 
356a7 476 00 18 18 00 
356ab 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
356af 478 18 18 0C 0C 
356b3 479 06 7E 7E 00 
356b7 47a 00 30 18 3C 
356bb 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
356bf 47c 66 66 66 66 
356c3 47d 66          | 	byte	$66[5]
356c4 47e 7E 3C 00 00 
356c8 47f 00 00 06 06 
356cc 480 06 06 16 1E 
356d0 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
356d4 482 7E 7E 00 00 
356d8 483 00 00 00 00 
356dc 484 00 3C 7C 60 
356e0 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
356e4 486 7E 7C 30 18 
356e8 487 00 00 00 00 
356ec 488 00 3C 7E 66 
356f0 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
356f4 48a 7E 7C 18 0C 
356f8 48b 00 00 30 18 
356fc 48c 00 3C 3E 06 
35700 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
35704 48e 7E 7C 00 00 
35708 48f 00 00 30 18 
3570c 490 00 3E 7E 66 
35710 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
35714 492 66 66 00 00 
35718 493 00 00 30 18 
3571c 494 00 7C 7E 06 
35720 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
35724 496 7E 3E 00 00 
35728 497 00 00 30 18 
3572c 498 00 7E 7E 30 
35730 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
35734 49a 7E 7E 00 00 
35738 49b 00 00 18 18 
3573c 49c 00 7E 7E 30 
35740 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
35744 49e 7E 7E 00 00 
35748 49f 00 00 30 18 
3574c 4a0 00 3C 7E 66 
35750 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
35754 4a2 7E 3C 00 00 
35758 4a3 00 00 1C 1C 
3575c 4a4 18 18 38 3C 
35760 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
35764 4a6 3C 3C 00 00 
35768 4a7 00 00 00 00 
3576c 4a8 00 00 00 00 
35770 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35774 4aa 00 00 00 00 
35778 4ab 00 00       | 	byte	$00[6]
3577a 4ab 18 18 18 18 
3577e 4ac 18 18 18 18 | 	byte	$18[8]
35782 4ad 00 00 18 18 
35786 4ae 00 00 00 00 
3578a 4af 66 66 66 66 
3578e 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
35792 4b1 00 00 00 00 
35796 4b2 00 00 00 00 
3579a 4b3 00          | 	byte	$00[9]
3579b 4b3 66 66 FF FF 
3579f 4b4 66 66 FF FF 
357a3 4b5 66 66 00 00 
357a7 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
357ab 4b7 7C 7E 06 06 
357af 4b8 3E 7C 60 60 
357b3 4b9 7E 3E 18 18 
357b7 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
357bb 4bb 66 30 30 18 
357bf 4bc 18 0C 0C 66 
357c3 4bd 66 00 00 00 
357c7 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
357cb 4bf 66 66 3C 1C 
357cf 4c0 1C FC FE 66 
357d3 4c1 66 FE FC 00 
357d7 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
357db 4c3 18 18 18 18 
357df 4c4 00 00 00 00 
357e3 4c5 00 00 00 00 
357e7 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
357eb 4c7 18 1C 0C 0C 
357ef 4c8 0C 0C 0C 0C 
357f3 4c9 1C 18 30 00 
357f7 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
357fb 4cb 18 38 30 30 
357ff 4cc 30 30 30 30 
35803 4cd 38 18 0C 00 
35807 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
3580b 4cf 66 66 3C 3C 
3580f 4d0 FF FF 3C 3C 
35813 4d1 66 66 00 00 
35817 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
3581b 4d3 00 18 18 18 
3581f 4d4 7E 7E 18 18 
35823 4d5 18 00 00 00 
35827 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3582b 4d7 00 00 00 00 
3582f 4d8 00 00       | 	byte	$00[6]
35831 4d9 18 18 18 18 
35835 4da 18          | 	byte	$18[5]
35836 4da 0C 04 00 00 
3583a 4db 00 00 00 00 
3583e 4dc 7E 7E 00 00 
35842 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
35846 4de 00 00 00 00 
3584a 4df 00 00 00 00 
3584e 4e0 00 00 00 00 
35852 4e1 00          | 	byte	$00[13]
35853 4e1 18 18 18 00 
35857 4e2 00 00 00 60 
3585b 4e3 60 60 30 30 
3585f 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
35863 4e5 06 06 06 00 
35867 4e6 00 00 00 3C 
3586b 4e7 7E 66 66 66 
3586f 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
35873 4e9 66 7E 3C 00 
35877 4ea 00 00 00 18 
3587b 4eb 18 1C 1C 18 
3587f 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
35883 4ed 18 7E 7E 00 
35887 4ee 00 00 00 3C 
3588b 4ef 7E 66 66 30 
3588f 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
35893 4f1 0C 7E 7E 00 
35897 4f2 00 00 00 7E 
3589b 4f3 7E 30 30 18 
3589f 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
358a3 4f5 66 7E 3C 00 
358a7 4f6 00 00 00 30 
358ab 4f7 30 38 38 3C 
358af 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
358b3 4f9 7E 30 30 00 
358b7 4fa 00 00 00 7E 
358bb 4fb 7E 06 06 3E 
358bf 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
358c3 4fd 66 7E 3C 00 
358c7 4fe 00 00 00 38 
358cb 4ff 3C 0E 06 06 
358cf 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
358d3 501 66 7E 3C 00 
358d7 502 00 00 00 7E 
358db 503 7E 60 60 30 
358df 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
358e3 505 0C 0C 0C 00 
358e7 506 00 00 00 3C 
358eb 507 7E 66 66 3C 
358ef 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
358f3 509 66 7E 3C 00 
358f7 50a 00 00 00 3C 
358fb 50b 7E 66 66 7E 
358ff 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
35903 50d 70 3C 1C 00 
35907 50e 00 00 00 00 
3590b 50f 00 00 18 18 
3590f 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
35913 511 18 18 18 00 
35917 512 00 00 00 00 
3591b 513 00 00 18 18 
3591f 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
35923 515 18 18 18 0C 
35927 516 04 00 00 00 
3592b 517 70 38 1C 0E 
3592f 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
35933 519 70 00 00 00 
35937 51a 00 00 00 00 
3593b 51b 00 00 7E 7E 
3593f 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
35943 51d 00 00 00 00 
35947 51e 00 00 00 00 | 	byte	$00[8]
3594b 51f 0E 1C 38 70 
3594f 520 E0 70 38 1C 
35953 521 0E 00 00 00 
35957 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
3595b 523 7E 66 66 30 
3595f 524 30 18 18 18 
35963 525 00 18 18 00 
35967 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
3596b 527 7E 66 66 66 
3596f 528 66 36 06 66 
35973 529 66 7E 3C 00 
35977 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
3597b 52b 3C 7E 66 66 
3597f 52c 66 7E 7E 66 
35983 52d 66 66 66 00 
35987 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
3598b 52f 7E 66 66 7E 
3598f 530 3E 66 66 66 
35993 531 66 7E 3E 00 
35997 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3599b 533 7E 66 66 06 
3599f 534 06 06 06 66 
359a3 535 66 7E 3C 00 
359a7 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
359ab 537 7E 66 66 66 
359af 538 66 66 66 66 
359b3 539 66 7E 3E 00 
359b7 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
359bb 53b 7E 06 06 3E 
359bf 53c 3E 06 06 06 
359c3 53d 06 7E 7E 00 
359c7 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
359cb 53f 7E 06 06 3E 
359cf 540 3E 06 06 06 
359d3 541 06 06 06 00 
359d7 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
359db 543 7E 06 06 76 
359df 544 76 66 66 66 
359e3 545 66 7E 3C 00 
359e7 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
359eb 547 66 66 66 7E 
359ef 548 7E 66 66 66 
359f3 549 66 66 66 00 
359f7 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
359fb 54b 7E 18 18 18 
359ff 54c 18 18 18 18 
35a03 54d 18 7E 7E 00 
35a07 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
35a0b 54f 60 60 60 60 
35a0f 550 60 60 60    | 	byte	$60[7]
35a12 551 66 66 7E 3C 
35a16 552 00 00 00 00 
35a1a 553 66 66 36 36 
35a1e 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
35a22 555 66 66 C6 C6 
35a26 556 00 00 00 00 
35a2a 557 06 06 06 06 
35a2e 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
35a32 559 06 06 7E 7E 
35a36 55a 00 00 00 00 
35a3a 55b C6 C6 EE EE 
35a3e 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
35a42 55d C6 C6 C6 C6 
35a46 55e 00 00 00 00 
35a4a 55f 66 66 66 6E 
35a4e 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
35a52 561 76 66 66 66 
35a56 562 00 00 00 00 
35a5a 563 3C 7E 66 66 
35a5e 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
35a62 565 66 66 7E 3C 
35a66 566 00 00 00 00 
35a6a 567 3E 7E 66 66 
35a6e 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
35a72 569 06 06 06 06 
35a76 56a 00 00 00 00 
35a7a 56b 3C 7E 66 66 
35a7e 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
35a82 56d 66 56 3E 6C 
35a86 56e 00 00 00 00 
35a8a 56f 3E 7E 66 66 
35a8e 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
35a92 571 66 66 C6 C6 
35a96 572 00 00 00 00 
35a9a 573 7C 7E 06 06 
35a9e 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
35aa2 575 60 60 7E 3E 
35aa6 576 00 00 00 00 
35aaa 577 7E 7E 18 18 
35aae 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
35ab2 579 18 18 18 18 
35ab6 57a 00 00 00 00 
35aba 57b 66 66 66 66 
35abe 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
35ac2 57d 66 66 7E 3C 
35ac6 57e 00 00 00 00 
35aca 57f 66 66 66 66 
35ace 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
35ad2 581 3C 3C 18 18 
35ad6 582 00 00 00 00 
35ada 583 C6 C6 C6 C6 
35ade 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
35ae2 585 FE EE C6 82 
35ae6 586 00 00 00 00 
35aea 587 66 66 66 3C 
35aee 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
35af2 589 3C 66 66 66 
35af6 58a 00 00 00 00 
35afa 58b 66 66 66 66 
35afe 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
35b02 58d 18 18 18 18 
35b06 58e 00 00 00 00 
35b0a 58f 7E 7E 30 30 
35b0e 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
35b12 591 06 06 7E 7E 
35b16 592 00 00 00 00 
35b1a 593 3C 3C 0C 0C 
35b1e 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
35b22 595 0C 0C 3C 3C 
35b26 596 00 00 00 00 
35b2a 597 06 06 0C 0C 
35b2e 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
35b32 599 60 60 C0 C0 
35b36 59a 00 00 00 00 
35b3a 59b 3C 3C 30 30 
35b3e 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
35b42 59d 30 30 3C 3C 
35b46 59e 00 00 00 00 
35b4a 59f 18 18 3C 3C 
35b4e 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
35b52 5a1 00 00 00 00 
35b56 5a2 00 00 00 00 
35b5a 5a3 00 00 00 00 
35b5e 5a4 00 00 00 00 
35b62 5a5 00 00       | 	byte	$00[18]
35b64 5a6 FE FE 00 00 
35b68 5a7 00 00 0C 0C 
35b6c 5a8 18 18 00 00 
35b70 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
35b74 5aa 00 00 00 00 
35b78 5ab 00 00 00 00 
35b7c 5ac 00          | 	byte	$00[9]
35b7d 5ac 3C 7C 60 7C 
35b81 5ad 7E 66 66 7E 
35b85 5ae 7C 00 00 00 
35b89 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
35b8d 5b0 3E 7E 66 66 
35b91 5b1 66 66 66 7E 
35b95 5b2 3E 00 00 00 
35b99 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
35b9d 5b4 3C 3E 06 06 
35ba1 5b5 06 06 06 7E 
35ba5 5b6 7C 00 00 00 
35ba9 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
35bad 5b8 7C 7E 66 66 
35bb1 5b9 66 66 66 7E 
35bb5 5ba 7C 00 00 00 
35bb9 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
35bbd 5bc 3C 7E 66 66 
35bc1 5bd 7E 06 06 7E 
35bc5 5be 7C 00 00 00 
35bc9 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
35bcd 5c0 18 7E 7E 18 
35bd1 5c1 18 18 18 18 
35bd5 5c2 18 00 00 00 
35bd9 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
35bdd 5c4 7C 7E 66 66 
35be1 5c5 66 66 7E 7C 
35be5 5c6 60 7E 3E 00 
35be9 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
35bed 5c8 3E 7E 66 66 
35bf1 5c9 66 66 66 66 
35bf5 5ca 66 00 00 00 
35bf9 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
35bfd 5cc 1C 1C 18 18 
35c01 5cd 18 18 18 3C 
35c05 5ce 3C 00 00 00 
35c09 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
35c0d 5d0 30 30 30 30 
35c11 5d1 30 30 30 30 
35c15 5d2 30          | 	byte	$30[9]
35c16 5d2 3E 1E 00 00 
35c1a 5d3 06 06 06 36 
35c1e 5d4 36 1E 1E 1E 
35c22 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
35c26 5d6 00 00 00 00 
35c2a 5d7 1C 1C 18 18 
35c2e 5d8 18 18 18 18 
35c32 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
35c36 5da 00 00 00 00 
35c3a 5db 00 00 00    | 	byte	$00[7]
35c3d 5dc 6C FE FE D6 
35c41 5dd D6 C6 C6 C6 
35c45 5de C6 00 00 00 
35c49 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
35c4d 5e0 3E 7E 66 66 
35c51 5e1 66 66 66 66 
35c55 5e2 66 00 00 00 
35c59 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
35c5d 5e4 3C 7E 66 66 
35c61 5e5 66 66 66 7E 
35c65 5e6 3C 00 00 00 
35c69 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
35c6d 5e8 3E 7E 66 66 
35c71 5e9 66 66 66 7E 
35c75 5ea 3E 06 06 00 
35c79 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
35c7d 5ec 7C 7E 66 66 
35c81 5ed 66 66 66 7E 
35c85 5ee 7C 60 60 00 
35c89 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
35c8d 5f0 3E 7E 66 06 
35c91 5f1 06 06 06 06 
35c95 5f2 06 00 00 00 
35c99 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
35c9d 5f4 7C 7E 06 0E 
35ca1 5f5 3C 70 60 7E 
35ca5 5f6 3E 00 00 00 
35ca9 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
35cad 5f8 7E 7E 18 18 
35cb1 5f9 18 18 18 78 
35cb5 5fa 70 00 00 00 
35cb9 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
35cbd 5fc 66 66 66 66 
35cc1 5fd 66 66 66    | 	byte	$66[7]
35cc4 5fe 7E 7C 00 00 
35cc8 5ff 00 00 00 00 
35ccc 600 00 66 66 66 
35cd0 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
35cd4 602 18 18 00 00 
35cd8 603 00 00 00 00 
35cdc 604 00 C6 C6 D6 
35ce0 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
35ce4 606 C6 82 00 00 
35ce8 607 00 00 00 00 
35cec 608 00 66 66 3C 
35cf0 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
35cf4 60a 66 66 00 00 
35cf8 60b 00 00 00 00 
35cfc 60c 00 66 66 66 
35d00 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
35d04 60e 7C 60 7E 3E 
35d08 60f 00 00 00 00 
35d0c 610 00 7E 7E 30 
35d10 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
35d14 612 7E 7E 00 00 
35d18 613 00 00 30 18 
35d1c 614 18 18 18 0C 
35d20 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
35d24 616 18 30 00 00 
35d28 617 00 00 18 18 
35d2c 618 18 18 18 18 
35d30 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
35d34 61a 18 18 00 00 
35d38 61b 00 00 0C 18 
35d3c 61c 18 18 18 30 
35d40 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
35d44 61e 18 0C 00 00 
35d48 61f 00 00 6C 7E 
35d4c 620 36 00 00 00 
35d50 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
35d54 622 00 00 00 00 
35d58 623 00 00 00 00 
35d5c 624 00          | 	byte	$00[9]
35d5d 624 18 18 18 18 
35d61 625 18 18 00 00 
35d65 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
35d68 627             | 'amiga_font     file "amigafont.def"
35d68 627 00 6C FE FE 
35d6c 628 7C 38 10 00 
35d70 629 18 18 18 F8 
35d74 62a F8 18 18 18 | a8_font        file "atari8.fnt"
35d78 62b C0 C0 C0 C0 
35d7c 62c C0 C0 C0 C0 | 	byte	$c0[8]
35d80 62d 18 18 18 1F 
35d84 62e 1F 00 00 00 
35d88 62f 18 18 18 1F 
35d8c 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
35d90 631 00 00 00 1F 
35d94 632 1F 18 18 18 
35d98 633 C0 E0 70 38 
35d9c 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
35da0 635 03 07 0E 1C 
35da4 636 38 70 E0 C0 
35da8 637 80 C0 E0 F0 
35dac 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
35db0 639 00 00 00 00 
35db4 63a F0 F0 F0 F0 
35db8 63b 01 03 07 0F 
35dbc 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
35dc0 63d F0 F0 F0 F0 
35dc4 63e 00 00 00 00 
35dc8 63f 0F 0F 0F 0F 
35dcc 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
35dd0 641 FF FF 00 00 
35dd4 642 00 00 00 00 
35dd8 643 00 00 00 00 
35ddc 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
35de0 645 00 00 00 00 
35de4 646 0F 0F 0F 0F 
35de8 647 00 38 38 EE 
35dec 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
35df0 649 00 00 00 F8 
35df4 64a F8 18 18 18 
35df8 64b 00 00 00 FF 
35dfc 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
35e00 64d 18 18 18 FF 
35e04 64e FF 18 18 18 
35e08 64f 00 00 3C 7E 
35e0c 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
35e10 651 00 00 00 00 
35e14 652 FF FF FF FF 
35e18 653 03 03 03 03 
35e1c 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
35e20 655 00 00 00 FF 
35e24 656 FF 18 18 18 
35e28 657 18 18 18 FF 
35e2c 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
35e30 659 0F 0F 0F 0F 
35e34 65a 0F 0F 0F 0F | 	byte	$0f[8]
35e38 65b 18 18 18 F8 
35e3c 65c F8 00 00 00 
35e40 65d 1E 06 1E 06 
35e44 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
35e48 65f 00 18 3C 7E 
35e4c 660 18 18 18 00 
35e50 661 00 18 18 18 
35e54 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
35e58 663 00 18 0C 7E 
35e5c 664 0C 18 00 00 
35e60 665 00 18 30 7E 
35e64 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
35e68 667 00 00 00 00 
35e6c 668 00 00 00 00 
35e70 669 00          | 	byte	$00[9]
35e71 669 18 18 18 18 
35e75 66a 00 18 00 00 
35e79 66b 66 66 66 00 
35e7d 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
35e81 66d 66 FF 66 66 
35e85 66e FF 66 00 18 
35e89 66f 7C 06 3C 60 
35e8d 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
35e91 671 66 36 18 0C 
35e95 672 66 62 00 38 
35e99 673 6C 38 1C F6 
35e9d 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
35ea1 675 18 18 18 00 
35ea5 676 00 00 00 00 
35ea9 677 70 38 18 18 
35ead 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
35eb1 679 0E 1C 18 18 
35eb5 67a 1C 0E 00 00 
35eb9 67b 66 3C FF 3C 
35ebd 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
35ec1 67d 18 18 7E 18 
35ec5 67e 18 00 00 00 
35ec9 67f 00 00 00 00 
35ecd 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
35ed1 681 00 00 7E 00 
35ed5 682 00 00 00 00 
35ed9 683 00 00 00 00 
35edd 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
35ee1 685 60 30 18 0C 
35ee5 686 06 02 00 00 
35ee9 687 3C 66 76 6E 
35eed 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
35ef1 689 18 1C 18 18 
35ef5 68a 18 7E 00 00 
35ef9 68b 3C 66 30 18 
35efd 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
35f01 68d 7E 30 18 30 
35f05 68e 66 3C 00 00 
35f09 68f 30 38 3C 36 
35f0d 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
35f11 691 7E 06 3E 60 
35f15 692 66 3C 00 00 
35f19 693 3C 06 3E 66 
35f1d 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
35f21 695 7E 60 30 18 
35f25 696 0C 0C 00 00 
35f29 697 3C 66 3C 66 
35f2d 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
35f31 699 3C 66 7C 60 
35f35 69a 30 1C 00 00 
35f39 69b 00 18 18 00 
35f3d 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
35f41 69d 00 18 18 00 
35f45 69e 18 18 0C 60 
35f49 69f 30 18 0C 18 
35f4d 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
35f51 6a1 00 7E 00 00 
35f55 6a2 7E 00 00 06 
35f59 6a3 0C 18 30 18 
35f5d 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
35f61 6a5 3C 66 30 18 
35f65 6a6 00 18 00 00 
35f69 6a7 3C 66 76 76 
35f6d 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
35f71 6a9 18 3C 66 66 
35f75 6aa 7E 66 00 00 
35f79 6ab 3E 66 3E 66 
35f7d 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
35f81 6ad 3C 66 06 06 
35f85 6ae 66 3C 00 00 
35f89 6af 1E 36 66 66 
35f8d 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
35f91 6b1 7E 06 3E 06 
35f95 6b2 06 7E 00 00 
35f99 6b3 7E 06 3E 06 
35f9d 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
35fa1 6b5 7C 06 06 76 
35fa5 6b6 66 7C 00 00 
35fa9 6b7 66 66 7E 66 
35fad 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
35fb1 6b9 7E 18 18 18 
35fb5 6ba 18 7E 00 00 
35fb9 6bb 60 60 60 60 
35fbd 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
35fc1 6bd 66 36 1E 1E 
35fc5 6be 36 66 00 00 
35fc9 6bf 06 06 06 06 
35fcd 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
35fd1 6c1 C6 EE FE D6 
35fd5 6c2 C6 C6 00 00 
35fd9 6c3 66 6E 7E 7E 
35fdd 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
35fe1 6c5 3C 66 66 66 
35fe5 6c6 66 3C 00 00 
35fe9 6c7 3E 66 66 3E 
35fed 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
35ff1 6c9 3C 66 66 66 
35ff5 6ca 36 6C 00 00 
35ff9 6cb 3E 66 66 3E 
35ffd 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
36001 6cd 3C 06 3C 60 
36005 6ce 60 3C 00 00 
36009 6cf 7E 18 18 18 
3600d 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
36011 6d1 66 66 66 66 
36015 6d2 66          | 	byte	$66[5]
36016 6d2 7E 00 00 66 
3601a 6d3 66 66 66 3C 
3601e 6d4 18 00 00 C6 
36022 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
36026 6d6 C6 00 00 66 
3602a 6d7 66 3C 3C 66 
3602e 6d8 66 00 00 66 
36032 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
36036 6da 18 00 00 7E 
3603a 6db 30 18 0C 06 
3603e 6dc 7E 00 00 78 
36042 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
36046 6de 78 00 00 02 
3604a 6df 06 0C 18 30 
3604e 6e0 60 00 00 1E 
36052 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
36056 6e2 1E 00 00 10 
3605a 6e3 38 6C C6 00 
3605e 6e4 00 00 00 00 
36062 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
36066 6e6 FF 00 00 18 
3606a 6e7 3C 7E 7E 3C 
3606e 6e8 18 00 00 00 
36072 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
36076 6ea 7C 00 00 06 
3607a 6eb 06 3E 66 66 
3607e 6ec 3E 00 00 00 
36082 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
36086 6ee 3C 00 00 60 
3608a 6ef 60 7C 66 66 
3608e 6f0 7C 00 00 00 
36092 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
36096 6f2 3C 00 00 70 
3609a 6f3 18 7C 18 18 
3609e 6f4 18 00 00 00 
360a2 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
360a6 6f6 60 3E 00 06 
360aa 6f7 06 3E 66 66 
360ae 6f8 66 00 00 18 
360b2 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
360b6 6fa 3C 00 00 60 
360ba 6fb 00 60 60 60 
360be 6fc 60 3C 00 06 
360c2 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
360c6 6fe 66 00 00 1C 
360ca 6ff 18 18 18 18 
360ce 700 3C 00 00 00 
360d2 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
360d6 702 C6 00 00 00 
360da 703 3E 66 66 66 
360de 704 66 00 00 00 
360e2 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
360e6 706 3C 00 00 00 
360ea 707 3E 66 66 3E 
360ee 708 06 06 00 00 
360f2 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
360f6 70a 60 60 00 00 
360fa 70b 3E 66 06 06 
360fe 70c 06 00 00 00 
36102 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
36106 70e 3E 00 00 18 
3610a 70f 7E 18 18 18 
3610e 710 70 00 00 00 
36112 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
36116 712 7C 00 00 00 
3611a 713 66 66 66 3C 
3611e 714 18 00 00 00 
36122 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
36126 716 6C 00 00 00 
3612a 717 66 3C 18 3C 
3612e 718 66 00 00 00 
36132 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
36136 71a 30 1E 00 00 
3613a 71b 7E 30 18 0C 
3613e 71c 7E 00 00 18 
36142 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
36146 71e 3C 00 18 18 
3614a 71f 18 18 18 18 
3614e 720 18 18 00 7E 
36152 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
36156 722 60 00 10 18 
3615a 723 1C 1E 1C 18 
3615e 724 10 00 08 18 
36162 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
36166 726 08 00       | 	byte	$08, $00
36168 727 00 00 00 00 
3616c 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
3616d 728 80 00 00 00 
36171 729 00 80 00 00 
36175 72a 80 80 00 00 
36179 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
3617d 72c 80 00 80 00 
36181 72d 00 40 80 00 
36185 72e AA AA AA 00 
36189 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
3618d 730 FF 00 00 00 
36191 731 00 FF 00 00 
36195 732 FF FF 00 00 
36199 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
3619d 734 FF 00 FF 00 
361a1 735 00 FF FF 00 
361a5 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
361a8 737 00 00 00 00 
361ac 738 00          | ataripalette   file "ataripalettep2.def"
361ad 738 11 11 11 00 
361b1 739 22 22 22 00 
361b5 73a 33 33 33 00 
361b9 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
361bd 73c 55 55 55 00 
361c1 73d 66 66 66 00 
361c5 73e 77 77 77 00 
361c9 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
361cd 740 99 99 99 00 
361d1 741 AA AA AA 00 
361d5 742 BB BB BB 00 
361d9 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
361dd 744 DD DD DD 00 
361e1 745 EE EE EE 00 
361e5 746 FF FF FF 00 
361e9 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
361ed 748 00 14 40 00 
361f1 749 00 1E 60 00 
361f5 74a 00 28 80 00 
361f9 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
361fd 74c 00 3C BF 00 
36201 74d 00 46 DF 00 
36205 74e 00 50 FF 00 
36209 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3620d 750 39 77 FF 00 
36211 751 55 8A FF 00 
36215 752 71 9E FF 00 
36219 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3621d 754 AA C5 FF 00 
36221 755 C6 D8 FF 00 
36225 756 E3 EC FF 00 
36229 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3622d 758 00 00 40 00 
36231 759 00 00 60 00 
36235 75a 00 00 80 00 
36239 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3623d 75c 00 00 BF 00 
36241 75d 00 00 DF 00 
36245 75e 00 00 FF 00 
36249 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3624d 760 39 39 FF 00 
36251 761 55 55 FF 00 
36255 762 71 71 FF 00 
36259 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3625d 764 AA AA FF 00 
36261 765 C6 C6 FF 00 
36265 766 E3 E3 FF 00 
36269 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3626d 768 20 00 40 00 
36271 769 30 00 60 00 
36275 76a 40 00 80 00 
36279 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3627d 76c 60 00 BF 00 
36281 76d 70 00 DF 00 
36285 76e 80 00 FF 00 
36289 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3628d 770 9C 39 FF 00 
36291 771 AA 55 FF 00 
36295 772 B8 71 FF 00 
36299 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3629d 774 D5 AA FF 00 
362a1 775 E3 C6 FF 00 
362a5 776 F1 E3 FF 00 
362a9 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
362ad 778 40 00 40 00 
362b1 779 60 00 60 00 
362b5 77a 80 00 80 00 
362b9 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
362bd 77c BF 00 BF 00 
362c1 77d DF 00 DF 00 
362c5 77e FF 00 FF 00 
362c9 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
362cd 780 FF 39 FF 00 
362d1 781 FF 55 FF 00 
362d5 782 FF 71 FF 00 
362d9 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
362dd 784 FF AA FF 00 
362e1 785 FF C6 FF 00 
362e5 786 FF E3 FF 00 
362e9 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
362ed 788 40 00 20 00 
362f1 789 60 00 30 00 
362f5 78a 80 00 40 00 
362f9 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
362fd 78c BF 00 60 00 
36301 78d DF 00 70 00 
36305 78e FF 00 80 00 
36309 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3630d 790 FF 39 9C 00 
36311 791 FF 55 AA 00 
36315 792 FF 71 B8 00 
36319 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3631d 794 FF AA D5 00 
36321 795 FF C6 E3 00 
36325 796 FF E3 F1 00 
36329 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3632d 798 40 00 00 00 
36331 799 60 00 00 00 
36335 79a 80 00 00 00 
36339 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3633d 79c BF 00 00 00 
36341 79d DF 00 00 00 
36345 79e FF 00 00 00 
36349 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3634d 7a0 FF 39 39 00 
36351 7a1 FF 55 55 00 
36355 7a2 FF 71 71 00 
36359 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3635d 7a4 FF AA AA 00 
36361 7a5 FF C6 C6 00 
36365 7a6 FF E3 E3 00 
36369 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3636d 7a8 40 10 00 00 
36371 7a9 60 18 00 00 
36375 7aa 80 20 00 00 
36379 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3637d 7ac BF 30 00 00 
36381 7ad DF 38 00 00 
36385 7ae FF 40 00 00 
36389 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3638d 7b0 FF 6A 39 00 
36391 7b1 FF 80 55 00 
36395 7b2 FF 95 71 00 
36399 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3639d 7b4 FF BF AA 00 
363a1 7b5 FF D5 C6 00 
363a5 7b6 FF EA E3 00 
363a9 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
363ad 7b8 40 20 00 00 
363b1 7b9 60 30 00 00 
363b5 7ba 80 40 00 00 
363b9 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
363bd 7bc BF 60 00 00 
363c1 7bd DF 70 00 00 
363c5 7be FF 80 00 00 
363c9 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
363cd 7c0 FF 9C 39 00 
363d1 7c1 FF AA 55 00 
363d5 7c2 FF B8 71 00 
363d9 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
363dd 7c4 FF D5 AA 00 
363e1 7c5 FF E3 C6 00 
363e5 7c6 FF F1 E3 00 
363e9 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
363ed 7c8 40 30 00 00 
363f1 7c9 60 48 00 00 
363f5 7ca 80 60 00 00 
363f9 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
363fd 7cc BF 90 00 00 
36401 7cd DF A8 00 00 
36405 7ce FF C0 00 00 
36409 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3640d 7d0 FF CE 39 00 
36411 7d1 FF D5 55 00 
36415 7d2 FF DC 71 00 
36419 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3641d 7d4 FF EA AA 00 
36421 7d5 FF F1 C6 00 
36425 7d6 FF F8 E3 00 
36429 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3642d 7d8 30 40 00 00 
36431 7d9 48 60 00 00 
36435 7da 60 80 00 00 
36439 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3643d 7dc 90 BF 00 00 
36441 7dd A8 DF 00 00 
36445 7de C0 FF 00 00 
36449 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3644d 7e0 CE FF 39 00 
36451 7e1 D5 FF 55 00 
36455 7e2 DC FF 71 00 
36459 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3645d 7e4 EA FF AA 00 
36461 7e5 F1 FF C6 00 
36465 7e6 F8 FF E3 00 
36469 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3646d 7e8 00 40 00 00 
36471 7e9 00 60 00 00 
36475 7ea 00 80 00 00 
36479 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3647d 7ec 00 BF 00 00 
36481 7ed 00 DF 00 00 
36485 7ee 00 FF 00 00 
36489 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3648d 7f0 39 FF 39 00 
36491 7f1 55 FF 55 00 
36495 7f2 71 FF 71 00 
36499 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3649d 7f4 AA FF AA 00 
364a1 7f5 C6 FF C6 00 
364a5 7f6 E3 FF E3 00 
364a9 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
364ad 7f8 00 40 14 00 
364b1 7f9 00 60 1E 00 
364b5 7fa 00 80 28 00 
364b9 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
364bd 7fc 00 BF 3C 00 
364c1 7fd 00 DF 46 00 
364c5 7fe 00 FF 50 00 
364c9 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
364cd 800 39 FF 77 00 
364d1 801 55 FF 8A 00 
364d5 802 71 FF 9E 00 
364d9 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
364dd 804 AA FF C5 00 
364e1 805 C6 FF D8 00 
364e5 806 E3 FF EC 00 
364e9 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
364ed 808 00 40 28 00 
364f1 809 00 60 3C 00 
364f5 80a 00 80 50 00 
364f9 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
364fd 80c 00 BF 78 00 
36501 80d 00 DF 8C 00 
36505 80e 00 FF A0 00 
36509 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3650d 810 39 FF B5 00 
36511 811 55 FF C0 00 
36515 812 71 FF CA 00 
36519 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3651d 814 AA FF DF 00 
36521 815 C6 FF EA 00 
36525 816 E3 FF F4 00 
36529 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3652d 818 00 40 40 00 
36531 819 00 60 60 00 
36535 81a 00 80 80 00 
36539 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3653d 81c 00 BF BF 00 
36541 81d 00 DF DF 00 
36545 81e 00 FF FF 00 
36549 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3654d 820 39 FF FF 00 
36551 821 55 FF FF 00 
36555 822 71 FF FF 00 
36559 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3655d 824 AA FF FF 00 
36561 825 C6 FF FF 00 
36565 826 E3 FF FF 00 
36569 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3656d 828 00 28 40 00 
36571 829 00 3C 60 00 
36575 82a 00 50 80 00 
36579 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3657d 82c 00 78 BF 00 
36581 82d 00 8C DF 00 
36585 82e 00 A0 FF 00 
36589 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3658d 830 39 B5 FF 00 
36591 831 55 C0 FF 00 
36595 832 71 CA FF 00 
36599 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3659d 834 AA DF FF 00 
365a1 835 C6 EA FF 00 
365a5 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
365a8 837             | 
365a8 837             | '**********************************************************************************
365a8 837             | '
365a8 837             | '        Timings and colors definitions
365a8 837             | '
365a8 837             | '**********************************************************************************
365a8 837             | 
365a8 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
365a8 837 08 00 00 00 
365ac 838 3C 00 00 00 
365b0 839 08 00 00 00 
365b4 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
365b8 83b 07 00 00 00 
365bc 83c 04 00 00 00 
365c0 83d 01 00 00 00 
365c4 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
365c8 83f 58 02 00 00 
365cc 840 20 9E 4B 14 
365d0 841 FB A8 9E 01 
365d4 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
365d8 843 00 00 00 00 
365dc 844 C0 00 00 00 
365e0 845 00 00 00 00 
365e4 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
365e8 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
365e8 847 00 75 C7 97 
365ec 848 27 47 F6 0A 
365f0 849 05 79 CB 9B 
365f4 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
365f8 84b             | 
365f8 84b             | ''--------  Initialization  ----------------------------------------------------------------
365f8 84b             | 
365f8 84b 28 0C 64 FD | hdmi            setq    #6
365fc 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
36600 84d 28 10 64 FD |                 setq    #8
36604 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
36608 84f             | 
36608 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3660c 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
36610 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
36614 852 D6 C6 01 F1 |                 add     t1,hbase
36618 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3661c 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
36620 855 7B 0B 80 5F 
36624 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
36628 857 66 66 86 FF 
3662c 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
36630 859             | '
36630 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
36634 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
36638 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
3663c 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
36640 85d             | 
36640 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
36644 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
36648 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
3664c 860             | 
3664c 860             | ''--------  frame rendering main loop  ---------------------------------------------------
3664c 860             | 
3664c 860 28 06 64 FD | p101            setq 	#3
36650 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
36654 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
36658 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3665c 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
36660 865 00 A0 05 F6 |                 mov     dlinum, #0
36664 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
36668 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3666c 868             | 
3666c 868             | 
3666c 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
36670 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
36674 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
36678 86b             |                 
36678 86b             | 
36678 86b             | 
36678 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
36678 86b             |   
36678 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3667c 86c 29 FE 65 3D |          if_nc  setq2   #255
36680 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
36684 86e             | 
36684 86e             | '' -----   up porch (before the picture)
36684 86e             | 
36684 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
36688 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
3668c 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
36690 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
36694 872             |  
36694 872             |    
36694 872             |  
36694 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
36698 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
3669c 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
366a0 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
366a4 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
366a8 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
366ac 878             | 
366ac 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
366b0 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
366b4 87a 48 00 B0 FD | 		call    #dli
366b8 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
366bc 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
366c0 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
366c4 87e             |                 	
366c4 87e             |                 
366c4 87e             | 
366c4 87e             |  
366c4 87e             | '' ------- the main screen drawing starts here
366c4 87e             | 
366c4 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
366c8 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
366cc 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
366d0 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
366d4 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
366d8 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
366dc 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
366e0 885             |               
366e0 885             | 
366e0 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
366e4 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
366e8 887             | 
366e8 887             | ' ---------------- All visible lines displayed now, start vblank  
366e8 887             | 
366e8 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
366ec 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
366f0 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
366f4 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
366f8 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
366fc 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
36700 88d             | 
36700 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
36700 88d             | 
36700 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
36700 88d             | 
36700 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
36704 88e             | 
36704 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
36708 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
3670c 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
36710 891             | 
36710 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
36714 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
36718 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3671c 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
36720 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
36724 896             | 
36724 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
36728 897 DD C6 41 F8 |                 getnib  t1,dl,#0
3672c 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
36730 899 70 00 90 AD |     if_z        jmp     #preload
36734 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
36738 89b 94 00 90 AD |     if_z        jmp     #preload2
3673c 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
36740 89d 0C 00 90 AD |     if_z        jmp     #p390
36744 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
36748 89f 28 00 90 AD |     if_z        jmp     #p391  
3674c 8a0             | 
3674c 8a0 2D 00 64 FD | p308            ret
36750 8a1             |    
36750 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
36754 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
36758 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3675c 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
36760 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
36764 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
36768 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3676c 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
36770 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
36774 8aa             |  
36774 8aa             | '' --------  Reload palette. To do 
36774 8aa             | 
36774 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
36778 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3677c 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
36780 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
36784 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
36788 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
3678c 8b0 70 FF 9F FD |         	jmp     #dli                
36790 8b1             |       
36790 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
36790 8b1             | 
36790 8b1             | 
36790 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
36790 8b1             | 
36790 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
36794 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
36798 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3679c 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
367a0 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
367a4 8b6             |         
367a4 8b6             | '' -------------- Preload a line from PSRAM        
367a4 8b6             |         
367a4 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
367a8 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
367ac 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
367b0 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
367b4 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
367b8 8bb             | 
367b8 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
367bc 8bc 32 B7 01 F6 |                 mov     buf2,a1024
367c0 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
367c4 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
367c8 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
367cc 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
367d0 8c1             |  
367d0 8c1             |  
367d0 8c1             | preload2      '  incmod  dlinum,#3
367d0 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
367d4 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
367d8 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
367dc 8c4 28 02 64 FD |                 setq	#1
367e0 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
367e4 8c6             |                 
367e4 8c6             | 
367e4 8c6             | '' -------------- Draw sprites
367e4 8c6             | 
367e4 8c6 CF 5C 02 F6 | sprite          mov t8,frames
367e8 8c7 10 5C 0E F5 | 		and t8,#16 wz
367ec 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
367f0 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
367f4 8ca             | 		
367f4 8ca             | 
367f4 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
367f8 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
367fc 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
36800 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
36804 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
36808 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
3680c 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
36810 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
36814 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
36818 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3681c 8d4 01 52 86 F1 |                 sub     sprite_h,#1
36820 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
36824 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
36828 8d7             | 
36828 8d7             | 
36828 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3682c 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
36830 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
36834 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
36838 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3683c 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
36840 8dd 00 5E 06 F6 |                 mov 	t9,#0
36844 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
36848 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3684c 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
36850 8e1             |      
36850 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
36854 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
36858 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3685c 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
36860 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
36864 8e6             |                 
36864 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
36868 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3686c 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
36870 8e9             |   		
36870 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
36874 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
36878 8eb             | 
36878 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3687c 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
36880 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
36884 8ee             |  
36884 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
36888 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3688c 8f0 10 00 90 CD |      if_c 	jmp     #p899		
36890 8f1             | 	
36890 8f1             | 	
36890 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
36894 8f2 28 CD 01 F1 | 		add	t4,sprite_w
36898 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3689c 8f4             | 
3689c 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
368a0 8f5             | 
368a0 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
368a4 8f6 01 58 86 F1 | 	 	sub     t6,#1
368a8 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
368ac 8f8             | 
368ac 8f8 28 58 62 FD |                 setq   	t6
368b0 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
368b4 8fa 28 5D 02 F6 |                 mov t8,sprite_w
368b8 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
368bc 8fc 24 00 90 AD |         if_z    jmp #p898
368c0 8fd             |          
368c0 8fd             |         
368c0 8fd 70 5F 06 F6 |                 mov  t9,#368
368c4 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
368c8 8ff             | 
368c8 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
368cc 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
368d0 901 FF FF 7F FF 
368d4 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
368d8 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
368dc 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
368e0 905 2D 01 00 F5 |                 and 0-0, t7
368e4 906             |                
368e4 906             | 
368e4 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
368e8 907 E5 E0 7A FA |                 wmlong 368,t3				
368ec 908             |                 
368ec 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
368f0 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
368f4 90a 2D 00 64 FD |                 ret
368f8 90b             | 	
368f8 90b             | 	
368f8 90b             |                
368f8 90b             |  
368f8 90b             | '' -------------- Graphics line ------------------------------------------------------------
368f8 90b             |  
368f8 90b             | 
368f8 90b             | '' consts and vars
368f8 90b             | 
368f8 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
368fc 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
36900 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
36904 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
36908 90f             | 
36908 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3690c 910             | 
3690c 910             | '------ these longs will be set by setmode function
3690c 910             | 
3690c 910 00 00 00 00 | m_bs            long    0        'blanks before sync
36910 911 00 00 00 00 | m_sn            long    0        'sync
36914 912 00 00 00 00 | m_bv            long    0        'blanks before visible
36918 913 00 00 00 00 | m_vi            long    0        'visible pixels #
3691c 914             | 'm_border        long    0        'left/right borders
3691c 914 00 00 00 00 | i_upporch       long    0        'up porch lines
36920 915 00 00 00 00 | i_vsync         long    0        'vsync lines
36924 916 00 00 00 00 | i_downporch     long    0        'down porch lines
36928 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3692c 918 00 00 00 00 | i_totalvis      long    0
36930 919             | 
36930 919             | '-------------------------------------
36930 919             |  
36930 919 00 00 00 00 | linenum         long    0
36934 91a 00 00 00 00 | frames          long    0
36938 91b 00 00 00 00 | dlinum long 0
3693c 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
36940 91d             | 
36940 91d 00 00 00 00 | vblankptr       long    0
36944 91e 00 00 00 00 | modeptr         long    0
36948 91f 00 00 00 00 | paletteptr      long    0
3694c 920 00 00 00 00 | dlptr           long    0
36950 921 01 00 00 00 | hbase           long    1
36954 922 00 00 00 00 | mailbox         long    0
36958 923 00 00 00 00 | spriteptr          long 0
3695c 924             | 
3695c 924 00 00 00 00 | cmd             long    0
36960 925 00 B0 07 00 | buf1            long    $80000-16384-4096
36964 926 00 04 00 00 | buf2            long    1024
36968 927 01 00 00 00 | dlptr2          long    1
3696c 928 01 00 00 00 | dl              long    1
36970 929             | 
36970 929 00 00 00 00 | buf1c long 0
36974 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
36978 92b 01 00 00 00 | framebuf2       long    1
3697c 92c 01 00 00 00 | hsync0          long    1
36980 92d 01 00 00 00 | hsync1          long    1
36984 92e             | 
36984 92e 01 00 00 00 | t1              long    1
36988 92f 00 00 00 00 | t2 long 0
3698c 930 00 00 00 00 | t3 long 0
36990 931 00 00 00 00 | t4 long 0
36994 932             | 
36994 932 00 00 00 00 | rcnt            long    0  'dl repeat count
36998 933 00 00 00 00 | rcnt2           long    0
3699c 934 00 00 00 00 | rcnt2a          long    0
369a0 935 00 00 00 00 | roffset         long    0
369a4 936 00 00 00 00 | rdl             long    0  'dl repeat line
369a8 937 00 00 00 00 | dlc             long    0  'dl command
369ac 938             | 
369ac 938 FF FF FF FF | affffffff       long    $ffffffff
369b0 939 00 00 00 00 | sprite1pointer long 0
369b4 93a 00 00 00 00 | sprite1xy      long 0
369b8 93b 00 00 00 00 | sprite1wh      long 0
369bc 93c 00 00 00 00 | sprite2pointer long 0
369c0 93d 00 00 00 00 | sprite2xy      long 0
369c4 93e 00 00 00 00 | sprite2wh      long 0
369c8 93f 00 00 00 00 | sprite3pointer long 0
369cc 940 00 00 00 00 | sprite3xy      long 0
369d0 941 00 00 00 00 | sprite3wh      long 0
369d4 942 00 00 00 00 | sprite4pointer long 0
369d8 943 00 00 00 00 | sprite4xy      long 0
369dc 944 00 00 00 00 | sprite4wh      long 0
369e0 945 00 00 00 00 | sprite5pointer long 0
369e4 946 00 00 00 00 | sprite5xy      long 0
369e8 947 00 00 00 00 | sprite5wh      long 0
369ec 948 00 00 00 00 | sprite6pointer long 0
369f0 949 00 00 00 00 | sprite6xy      long 0
369f4 94a 00 00 00 00 | sprite6wh      long 0
369f8 94b 00 00 00 00 | sprite7pointer long 0
369fc 94c 00 00 00 00 | sprite7xy      long 0
36a00 94d 00 00 00 00 | sprite7wh      long 0
36a04 94e 00 00 00 00 | sprite8pointer long 0
36a08 94f 00 00 00 00 | sprite8xy      long 0
36a0c 950 00 00 00 00 | sprite8wh      long 0
36a10 951 00 00 00 00 | sprite9pointer long 0
36a14 952 00 00 00 00 | sprite9xy      long 0
36a18 953 00 00 00 00 | sprite9wh      long 0
36a1c 954 00 00 00 00 | sprite10pointer long 0
36a20 955 00 00 00 00 | sprite10xy      long 0
36a24 956 00 00 00 00 | sprite10wh      long 0
36a28 957 00 00 00 00 | sprite11pointer long 0
36a2c 958 00 00 00 00 | sprite11xy      long 0
36a30 959 00 00 00 00 | sprite11wh      long 0
36a34 95a 00 00 00 00 | sprite12pointer long 0
36a38 95b 00 00 00 00 | sprite12xy      long 0
36a3c 95c 00 00 00 00 | sprite12wh      long 0
36a40 95d 00 00 00 00 | sprite13pointer long 0
36a44 95e 00 00 00 00 | sprite13xy      long 0
36a48 95f 00 00 00 00 | sprite13wh      long 0
36a4c 960 00 00 00 00 | sprite14pointer long 0
36a50 961 00 00 00 00 | sprite14xy      long 0
36a54 962 00 00 00 00 | sprite14wh      long 0
36a58 963 00 00 00 00 | sprite15pointer long 0
36a5c 964 00 00 00 00 | sprite15xy      long 0
36a60 965 00 00 00 00 | sprite15wh      long 0
36a64 966 00 00 00 00 | sprite16pointer long 0
36a68 967 00 00 00 00 | sprite16xy      long 0
36a6c 968 00 00 00 00 | sprite16wh      long 0
36a70 969 00 00 00 00 | sprite17pointer long 0
36a74 96a 00 00 00 00 | sprite17xy      long 0
36a78 96b 00 00 00 00 | sprite17wh      long 0
36a7c 96c 00 00 00 00 | sprite18pointer long 0
36a80 96d 00 00 00 00 | sprite18xy      long 0
36a84 96e 00 00 00 00 | sprite18wh      long 0
36a88 96f 00 00 00 00 | spritenum long 0
36a8c 970             | 
36a8c 970 00 00 00 00 | spriteline long 0
36a90 971 84 03 00 00 | sprite_x long 900
36a94 972 00 00 00 00 | sprite_y long 0
36a98 973 10 00 00 00 | sprite_w long 16
36a9c 974 40 00 00 00 | sprite_h long 64
36aa0 975 00 00 00 00 | l2 long 0
36aa4 976 00 00 00 00 | t5 long 0
36aa8 977 00 00 00 00 | t6 long 0
36aac 978 00 00 00 00 | t7 long 0
36ab0 979 00 00 00 00 | t8 long 0
36ab4 97a 00 00 00 00 | t9 long 0
36ab8 97b 00 00 00 00 | preloadaddr long 0
36abc 97c 00 00 00 00 | preloadlineaddr long 0
36ac0 97d 00 04 00 00 | a1024 long 1024
36ac4 97e             | 
36ac4 97e E0 03 00 00 | aa long 992
36ac8 97f FF 03 00 00 | a1023 long 1023
36acc 980 00 10 00 00 | a4096 long 4096
36ad0 981             |  fit 368
36ad0 981             | _psram_spin2_dat_
36ad0 981 00 00 00 00 
      ...             
36bc8 9bf 00 00 00 00 
36bcc 9c0 00 00 00 00 |     listdata long 0[8*8]
36bd0 9c1             |             orgh
36bd0                 | 
36bd0                 | ' driver state
36bd0     FF FF FF FF | drivercog   long    -1  ' COG id of driver
36bd4     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
36bd8                 | 
36bd8                 | ' delay profile
36bd8     07 00 00 00 
36bdc     00 CF 7B 05 
36be0     80 D1 F0 08 
36be4     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
36be8     80 C4 60 0F 
36bec     80 39 7A 12 
36bf0     40 2D D9 13 
36bf4     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
36bf8                 | 
36bf8                 | ' data to be passed to driver when starting it
36bf8                 | startupData
36bf8     00 00 00 00 |     long    0           ' current frequency
36bfc     00 00 00 00 |     long    FLAGS       ' optional flags for driver
36c00     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
36c04     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
36c08     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
36c0c     18 6C 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
36c10     98 6C 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
36c14     B8 6C 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
36c18                 | 
36c18                 | ' data for memory
36c18                 | deviceData
36c18                 |     ' 16 bank parameters follow (16MB per bank)
36c18     00 00 00 00 
      ...             
36c50     00 00 00 00 
36c54     00 00 00 00 |     long    0[16]                               ' banks 0-15
36c58                 |     ' 16 banks of pin parameters follow
36c58     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
36c5c     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
36c60     FF FF FF FF 
      ...             
36c90     FF FF FF FF 
36c94     FF FF FF FF |     long    -1[14]                              ' banks 2-15
36c98                 | 
36c98                 | ' data for COG polling
36c98                 | qosData 
36c98     00 00 FF FF 
36c9c     00 00 FF FF 
36ca0     00 00 FF FF 
36ca4     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
36ca8     00 00 FF FF 
36cac     00 00 FF FF 
36cb0     00 00 FF FF 
36cb4     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
36cb8                 |     
36cb8                 | ' mailbox storage
36cb8                 | 
36cb8                 | mailboxes
36cb8     00 00 00 00 
      ...             
36d10     00 00 00 00 
36d14     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
36d18                 | 	alignl
36d18                 | _psram16drv_spin2_dat_
36d18                 |                             orgh
36d18     00 00 00 00 
      ...             
36d30     00 00 00 00 
36d34     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
36d38                 | 
36d38                 | driver_start
36d38                 |                             org
36d38 000             | '..................................................................................................
36d38 000             | ' Memory layout for COG RAM once operational:
36d38 000             | '
36d38 000             | '  COG RAM address      Usage
36d38 000             | '  ---------------      ----
36d38 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
36d38 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
36d38 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
36d38 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
36d38 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
36d38 000             | '  ~$198-$1F3           State and register variables
36d38 000             | '
36d38 000             | ' Also during driver COG startup:
36d38 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
36d38 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
36d38 000             | '..................................................................................................
36d38 000             |                             
36d38 000             | ' Mailbox storage after vector initialization
36d38 000             | 
36d38 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
36d3c 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
36d40 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
36d44 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
36d48 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
36d4c 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
36d50 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
36d54 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
36d58 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
36d5c 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
36d60 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
36d64 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
36d68 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
36d6c 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
36d70 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
36d74 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
36d78 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
36d7c 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
36d80 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
36d84 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
36d88 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
36d8c 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
36d90 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
36d94 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
36d98 018             | 
36d98 018             | ' Mailbox parameter addresses per COG once patched
36d98 018             |                             
36d98 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
36d9c 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
36da0 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
36da4 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
36da8 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
36dac 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
36db0 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
36db4 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
36db8 020             | 
36db8 020             | '..................................................................................................
36db8 020             | ' Per COG request and state setup and service branching
36db8 020             |         
36db8 020             | cog0                 
36db8 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
36dbc 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
36dc0 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
36dc4 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
36dc8 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36dcc 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36dd0 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
36dd4 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
36dd8 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
36ddc 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36de0 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36de4 02b 33 CA 63 FD |                             execf   request-0               'jump to service
36de8 02c             | cog1                        
36de8 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
36dec 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
36df0 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
36df4 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
36df8 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36dfc 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36e00 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
36e04 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
36e08 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
36e0c 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36e10 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36e14 037 33 CA 63 FD |                             execf   request-0               'jump to service
36e18 038             | cog2                         
36e18 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
36e1c 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
36e20 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
36e24 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
36e28 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36e2c 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36e30 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
36e34 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
36e38 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
36e3c 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36e40 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36e44 043 33 CA 63 FD |                             execf   request-0               'jump to service
36e48 044             | cog3                        
36e48 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
36e4c 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
36e50 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
36e54 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
36e58 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36e5c 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36e60 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
36e64 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
36e68 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
36e6c 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36e70 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36e74 04f 33 CA 63 FD |                             execf   request-0               'jump to service
36e78 050             | cog4                        
36e78 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
36e7c 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
36e80 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
36e84 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
36e88 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36e8c 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36e90 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
36e94 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
36e98 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
36e9c 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36ea0 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36ea4 05b 33 CA 63 FD |                             execf   request-0               'jump to service
36ea8 05c             | cog5                        
36ea8 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
36eac 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
36eb0 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
36eb4 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
36eb8 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36ebc 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36ec0 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
36ec4 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
36ec8 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
36ecc 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36ed0 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36ed4 067 33 CA 63 FD |                             execf   request-0               'jump to service
36ed8 068             | cog6                        
36ed8 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
36edc 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
36ee0 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
36ee4 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
36ee8 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36eec 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36ef0 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
36ef4 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
36ef8 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
36efc 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36f00 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36f04 073 33 CA 63 FD |                             execf   request-0               'jump to service
36f08 074             | cog7                        
36f08 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
36f0c 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
36f10 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
36f14 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
36f18 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
36f1c 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
36f20 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
36f24 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
36f28 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
36f2c 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
36f30 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
36f34 07f 33 CA 63 FD |                             execf   request-0               'jump to service
36f38 080             |                             fit     128
36f38 080             | 
36f38 080             |                             fit     128
36f38 080             | pad                         long    0[128-$]                'align init code to $80
36f38 080             | 
36f38 080             | '..................................................................................................
36f38 080             | 
36f38 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
36f38 080             | 
36f38 080             | init                        
36f38 080             |                             ' get driver scratch long address in hub
36f38 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
36f3c 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
36f40 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
36f44 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
36f48 084             |                     
36f48 084             |                             ' read in the additional LUT RAM code
36f48 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
36f4c 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
36f50 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
36f54 087             | 
36f54 087             |                             ' read the startup parameters
36f54 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
36f58 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
36f5c 089             | 
36f5c 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
36f5c 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
36f60 08a             | 
36f60 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
36f64 08b 01 00 00 5F 
36f68 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
36f6c 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
36f70 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
36f74 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
36f78 090             | 
36f78 090             |                             ' setup data pin modes and data bus pin group in streamer commands
36f78 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
36f7c 091 01 00 00 FF 
36f80 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
36f84 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
36f88 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
36f8c 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
36f90 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
36f94 097 08 DE 47 F5 |                             or      a, #8
36f98 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
36f9c 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
36fa0 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
36fa4 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
36fa8 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
36fac 09d 01 DE 07 F1 |                             add     a, #1
36fb0 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
36fb4 09f             |  
36fb4 09f             |                             ' setup device control pin states
36fb4 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
36fb8 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
36fbc 0a1 01 00 00 FF 
36fc0 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
36fc4 0a3             | 
36fc4 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
36fc8 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
36fcc 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
36fd0 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
36fd4 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
36fd8 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
36fdc 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
36fe0 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
36fe4 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
36fe8 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
36fec 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
36ff0 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
36ff4 0af             | pinloop
36ff4 0af             |                             ' generate minimum CE high time before access
36ff4 0af A1 07 00 FF 
36ff8 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
36ffc 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
37000 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
37004 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
37008 0b4 1F DE 63 FD |                             waitx   a                       'delay
3700c 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
37010 0b6             | 
37010 0b6             |                             ' setup the COG mailboxes and addresses 
37010 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
37014 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
37018 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3701c 0b9             | 
3701c 0b9 28 2E 64 FD |                             setq    #24-1
37020 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
37024 0bb             | 
37024 0bb             |                             ' setup the polling loop for active COGs 
37024 0bb 01 C2 63 FD |                             cogid   id
37028 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
3702c 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
37030 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
37034 0bf 0A F0 07 F6 |                             mov     ptra, #10
37038 0c0 E1 F1 03 FA |                             mul     ptra, id
3703c 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
37040 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
37044 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
37048 0c4 03 C2 07 FA |                             mul     id, #3
3704c 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
37050 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
37054 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
37058 0c8 D8 01 B0 FD |                             call    #reloadcogs
3705c 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
37060 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
37064 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
37064 0cb D8 E5 B7 F9 |                             setd    d, #addr1
37068 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
3706c 0cd 08 04 DC FC |                             rep     #2, #8
37070 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
37074 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
37078 0d0             | 
37078 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
37078 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
37078 0d0 01 C2 63 FD |                             cogid   id
3707c 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
37080 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
37084 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
37088 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
3708c 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
37090 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
37094 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
37098 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
3709c 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
370a0 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
370a4 0db 3F E4 A7 F9 |                             alti    d, #%111_111
370a8 0dc 00 00 00 F6 |                             mov     0-0, 0-0
370ac 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
370b0 0de A5 E5 03 F1 |                             add     d, const512
370b4 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
370b8 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
370bc 0e1 00 00 00 F6 |                             mov     0-0, 0-0
370c0 0e2             |                             
370c0 0e2             |                             ' setup register values for control vector loop setup after we return
370c0 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
370c4 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
370c8 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
370cc 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
370d0 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
370d4 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
370d8 0e8 D0 C3 8F F9 |                             altd    id, #id0
370dc 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
370e0 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
370e4 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
370e8 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
370ec 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
370f0 0ee             |  
370f0 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
370f4 0ef 07 CA 07 F5 |                             and     request, #7
370f8 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
370fc 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
37100 0f2             |                             fit     $100                    'ensure all init code fits this space
37100 0f2             | 
37100 0f2             |                             fit     $100                    'ensure all init code fits this space
37100 0f2             | 
37100 0f2 00 00 00 00 
      ...             
37130 0fe 00 00 00 00 
37134 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
37138 100             | 
37138 100             | '..................................................................................................
37138 100             | ' Error result handling and COG notification of request completion
37138 100             | 
37138 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3713c 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
37140 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
37144 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
37148 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3714c 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
37150 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
37154 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
37158 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3715c 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
37160 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
37164 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
37168 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3716c 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
37170 10e             | ' Poller re-starts here after a COG is serviced
37170 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
37174 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
37178 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3717c 111             | ' Main dynamic polling loop repeats until a request arrives
3717c 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
37180 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
37184 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
37188 114             | 
37188 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3718c 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
37190 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
37194 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
37198 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3719c 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
371a0 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
371a4 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
371a8 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
371ac 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
371b0 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
371b4 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
371b8 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
371bc 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
371c0 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
371c4 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
371c8 124             | 
371c8 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
371cc 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
371d0 126             |  
371d0 126             | '..................................................................................................
371d0 126             | ' List handler                               
371d0 126             | 
371d0 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
371d4 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
371d8 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
371dc 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
371e0 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
371e4 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
371e8 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
371ec 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
371f0 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
371f4 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
371f8 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
371fc 131 33 00 60 FD |                             execf   0-0                     'process the request 
37200 132             | 
37200 132             | '..................................................................................................
37200 132             | ' Restoring per COG state and resuming where we left off
37200 132             | 
37200 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
37204 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
37208 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3720c 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
37210 136 D8 CB FB F8 |                             getbyte request, addr1, #3
37214 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
37218 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3721c 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
37220 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
37224 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
37228 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3722c 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
37230 13e             |                    
37230 13e             | '..................................................................................................
37230 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
37230 13e             | 
37230 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
37234 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
37238 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3723c 141 D0 DF B7 F9 |                             setd    a, #id0
37240 142 D8 DF BF F9 |                             sets    a, #addr1
37244 143 FE FF FF FF 
37248 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3724c 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
37250 146 3F DE A7 F9 |                             alti    a, #%111_111 
37254 147 00 00 F0 F9 |                             muxq    0-0, 0-0
37258 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3725c 149 01 E2 63 FD |                             cogid   c
37260 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
37264 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
37268 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3726c 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
37270 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
37274 14f 00 E0 03 F6 |                             mov     b, 0-0
37278 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
3727c 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
37280 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
37284 153 0C 00 90 AD |             if_z            jmp     #excluded               
37288 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3728c 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
37290 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
37294 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
37298 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
3729c 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
372a0 15a             | 
372a0 15a             | 'determine priority cogs and build instructions for the polling sequence
372a0 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
372a4 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
372a8 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
372ac 15d             | 
372ac 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
372b0 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
372b4 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
372b8 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
372bc 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
372c0 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
372c4 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
372c8 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
372cc 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
372d0 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
372d4 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
372d8 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
372dc 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
372e0 16a             | endprioloop
372e0 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
372e4 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
372e8 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
372ec 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
372f0 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
372f4 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
372f8 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
372fc 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
37300 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
37304 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
37308 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3730c 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
37310 176             | 
37310 176             | ' populate the round robin COG polling instructions
37310 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
37314 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
37318 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3731c 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
37320 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
37324 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
37328 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3732c 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
37330 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
37334 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
37338 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3733c 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
37340 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
37344 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
37348 184             | '..................................................................................................
37348 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
37348 184             | 
37348 184             | set_latency                                                 '            (a) set latency
37348 184             | get_latency                                                 '            (b) get latency
37348 184             | set_burst                                                   '            (c) set burst size of bank
37348 184             | get_burst                                                   '            (d) get burst size of bank
37348 184             |                                                             '            (e) dump state
37348 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3734c 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
37350 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
37354 187             |                                                             ' | | | | e  account for following AUGS
37354 187 04 00 00 FF 
37358 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3735c 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
37360 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
37364 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
37368 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3736c 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
37370 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
37374 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
37378 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3737c 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
37380 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
37384 193             | 
37384 193             | '..................................................................................................
37384 193             | ' Misc EXECF code
37384 193             | 
37384 193 33 72 63 FD | start_read_exec             execf   newburstr
37388 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3738c 195 33 78 63 FD | continue_read_exec          execf   lockedreads
37390 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
37394 197             | 
37394 197             | '..................................................................................................
37394 197             | ' Variables
37394 197             | 
37394 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
37398 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3739c 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
373a0 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
373a4 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
373a8 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
373ac 19d             | 
373ac 19d 00 00 00 80 | xfreq1          long    $80000000
373b0 19e 00 00 00 40 | xfreq2          long    $40000000
373b4 19f 03 00 00 00 | delay           long    3
373b8 1a0             | 
373b8 1a0             | lutcodeaddr                 
373b8 1a0             | startupparams
373b8 1a0             | excludedcogs                                    'careful: shared register use!
373b8 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
373bc 1a1 00 00 00 00 | flags           long    0
373c0 1a2             | mask                                            'careful: shared register use!
373c0 1a2 00 00 00 00 | resetmaskA      long    0
373c4 1a3             | limit                                           'careful: shared register use!
373c4 1a3 00 00 00 00 | resetmaskB      long    0
373c8 1a4 00 00 00 00 | datapins        long    0
373cc 1a5             | const512                                        'careful: shared register use!
373cc 1a5 00 00 00 00 | devicelist      long    0
373d0 1a6 00 00 00 00 | coglist         long    0
373d4 1a7 00 00 00 00 | mbox            long    0 
373d8 1a8             | 
373d8 1a8             | clkpin                                          'shared with code patched during init
373d8 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
373dc 1a9             | cspin                                           'shared with code patched during init
373dc 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
373e0 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
373e4 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
373e8 1ac 01 00 00 00 | clkdelay        long    1
373ec 1ad 00 00 00 00 | regdatabus      long    0
373f0 1ae             | 
373f0 1ae 10 00 00 00 | deviceaddr      long    $10
373f4 1af             | rrcounter
373f4 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
373f8 1b0             | 
373f8 1b0             | ' jump addresses for the per COG handlers
373f8 1b0 20 00 00 00 | cog0_handler    long    cog0
373fc 1b1 2C 00 00 00 | cog1_handler    long    cog1
37400 1b2 38 00 00 00 | cog2_handler    long    cog2
37404 1b3 44 00 00 00 | cog3_handler    long    cog3
37408 1b4 50 00 00 00 | cog4_handler    long    cog4
3740c 1b5 5C 00 00 00 | cog5_handler    long    cog5
37410 1b6 68 00 00 00 | cog6_handler    long    cog6
37414 1b7 74 00 00 00 | cog7_handler    long    cog7
37418 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3741c 1b9             | 
3741c 1b9             | ' EXECF sequences
3741c 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
37420 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
37424 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
37428 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3742c 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
37430 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
37434 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
37438 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
37438 1c0             | 
37438 1c0             | 
37438 1c0             | ' SKIPF sequences
37438 1c0             | skiptable
37438 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3743c 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
37440 1c2 00 00 00 00 |                 long    0                      ' read modify write long
37444 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
37448 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
3744c 1c5 00 00 00 00 | pattern2        long    0
37450 1c6 00 00 00 00 | pattern3        long    0
37454 1c7 77 02 00 00 | singlelong      long    %1001110111  
37458 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3745c 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
37460 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
37464 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
37468 1cc             | 
37468 1cc             | ' LUT RAM address values
37468 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3746c 1cd DD 02 00 00 | continue_read   long    continue_read_lut
37470 1ce DB 02 00 00 | continue_write  long    continue_write_lut
37474 1cf F6 02 00 00 | noread          long    noread_lut
37478 1d0             | 
37478 1d0 00 00 00 00 | id0             long    0
3747c 1d1 01 00 00 00 | id1             long    1
37480 1d2 02 00 00 00 | id2             long    2
37484 1d3 03 00 00 00 | id3             long    3
37488 1d4 04 00 00 00 | id4             long    4
3748c 1d5 05 00 00 00 | id5             long    5
37490 1d6 06 00 00 00 | id6             long    6
37494 1d7 07 00 00 00 | id7             long    7
37498 1d8             | 
37498 1d8             | 'These next 10 request registers below are also temporarily reused during init 
37498 1d8             | 'and COG updates and need to follow immediately after id0-id7
37498 1d8 00 00 00 00 | addr1           long    0
3749c 1d9 00 00 00 00 | hubdata         long    0
374a0 1da 00 00 00 00 | count           long    0
374a4 1db 00 00 00 00 | addr2           long    0
374a8 1dc 00 00 00 00 | total           long    0
374ac 1dd 00 00 00 00 | offset1         long    0
374b0 1de 00 00 00 00 | offset2         long    0
374b4 1df 00 00 00 00 | link            long    0
374b8 1e0             | 
374b8 1e0             | burstwrite                                      'note shared register use during init
374b8 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
374bc 1e1 00 00 00 00 | id              long    0
374c0 1e2             | 
374c0 1e2 00 00 00 00 | header          long    0
374c4 1e3 00 00 00 00 | trailer         long    0
374c8 1e4 00 00 00 00 | cmdaddr         long    0
374cc 1e5 00 00 00 00 | request         long    0
374d0 1e6 00 00 00 00 | rrlimit         long    0
374d4 1e7 00 00 00 00 | pinconfig       long    0
374d8 1e8 00 00 00 00 | clks            long    0
374dc 1e9 00 00 00 00 | resume          long    0
374e0 1ea 00 00 00 00 | orighubsize     long    0
374e4 1eb 00 00 00 00 | wrclks          long    0
374e8 1ec             | 
374e8 1ec 00 00 00 00 | pattern         long    0
374ec 1ed 00 00 00 00 | hubscratch      long    0
374f0 1ee 00 10 00 00 | val4k           long    4096
374f4 1ef             | 
374f4 1ef             | ' temporary general purpose regs
374f4 1ef 00 00 00 00 | a               long    0
374f8 1f0 00 00 00 00 | b               long    0
374fc 1f1 00 00 00 00 | c               long    0
37500 1f2 00 00 00 00 | d               long    0
37504 1f3             |                 fit     502
37504 1f3             | 
37504 1f3             |                 fit     502
37504 1f3             | 
37504 1f3             | '..................................................................................................
37504 1f3             | 
37504 1f3             |             orgh
37504                 | 
37504                 | lut_code
37504                 | 'HW init code up to 80 longs
37504                 | 
37504                 | '..................................................................................................
37504                 | ' Memory layout for LUT RAM once operational:
37504                 | '
37504                 | '  LUT RAM address      Usage
37504                 | '  ---------------      ----
37504                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
37504                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
37504                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
37504                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
37504                 | '
37504                 | ' Also during driver COG startup:
37504                 | ' $230-$24F is used for HW init setup
37504                 | ' $250-$26F is used as temporary vector storage 
37504                 | '..................................................................................................
37504                 | 
37504                 |                 org $230    
37504 230             | 
37504 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
37504 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
37508 231 24 16 60 FD |                             pollxfi
3750c 232 FF AA 2A FF 
37510 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
37514 234 28 00 B0 FD |                             call    #sendqspi
37518 235 07 F8 07 FF 
3751c 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
37520 237 28 00 B0 FD |                             call    #sendspi
37524 238 F8 07 78 FF 
37528 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3752c 23a 1C 00 B0 FD |                             call    #sendspi
37530 23b 7F 78 78 FF 
37534 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
37538 23d 10 00 B0 FD |                             call    #sendspi 
3753c 23e 2D 00 64 FD |                             ret
37540 23f             | 
37540 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
37544 240 32 0C 64 FD |                             skipf   #%110
37548 241 9C EF 03 F6 |                             mov     pb, xsendimm
3754c 242             | 
3754c 242 10 D0 07 F6 | sendspi                     mov     clks, #16
37550 243 97 EF 03 F6 |                             mov     pb, ximm8lut
37554 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
37558 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3755c 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
37560 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
37564 248 24 36 60 FD |                             waitxfi                         'wait for the completion
37568 249 50 48 63 FD |                             fltl    datapins                'float data bus
3756c 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
37570 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
37574 24c             | 
37574 24c 00 00 00 00 
37578 24d 00 00 00 00 
3757c 24e 00 00 00 00 
37580 24f 00 00 00 00 |                 long    0[$270-32-$]
37584 250             |                 fit     $270-32  ' keep room for 32 vector longs
37584 250             |     
37584 250             |                 fit     $270-32  ' keep room for 32 vector longs
37584 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
37584 250             | rw_vect ' PSRAM jump vectors
37584 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37588 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3758c 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
37590 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
37594 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
37598 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3759c 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
375a0 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
375a4 258             | ro_vect ' R/O PSRAM jump vectors
375a4 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
375a8 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
375ac 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
375b0 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
375b4 25c 00 01 00 00 |                 long    unsupported
375b8 25d 00 01 00 00 |                 long    unsupported
375bc 25e 00 01 00 00 |                 long    unsupported
375c0 25f 00 01 00 00 |                 long    unsupported
375c4 260             | ctrl_vect ' Control jump vectors
375c4 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
375c8 261 00 01 00 00 |                 long    unsupported
375cc 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
375d0 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
375d4 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
375d8 265 00 01 00 00 |                 long    unsupported
375dc 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
375e0 267 3E 01 00 00 |                 long    reconfig 
375e4 268             | no_vect ' Invalid bank jump vectors
375e4 268 01 01 00 00 |                 long    invalidbank
375e8 269 01 01 00 00 |                 long    invalidbank
375ec 26a 01 01 00 00 |                 long    invalidbank
375f0 26b 01 01 00 00 |                 long    invalidbank
375f4 26c 01 01 00 00 |                 long    invalidbank
375f8 26d 01 01 00 00 |                 long    invalidbank
375fc 26e 01 01 00 00 |                 long    invalidbank
37600 26f 01 01 00 00 |                 long    invalidbank
37604 270             |                 fit     $270
37604 270             | 
37604 270             |                 fit     $270
37604 270             | '..................................................................................................
37604 270             | ' PSRAM READS
37604 270             |                                                             ' a b c d e f
37604 270             |                                                             ' B W L B R L  (a) byte read
37604 270             |                                                             ' Y O O U E O  (b) word read
37604 270             |                                                             ' T R N R S C  (c) long read
37604 270             |                                                             ' E D G S U K  (d) new burst read
37604 270             |                                                             '       T M E  (e) resumed sub-burst
37604 270             |                                                             '         E D  (f) locked sub-burst
37604 270             | 
37604 270             | 
37604 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
37608 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3760c 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
37610 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
37614 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
37618 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3761c 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
37620 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
37624 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
37628 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3762c 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
37630 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
37634 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
37638 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
3763c 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
37640 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
37644 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
37648 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
3764c 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
37650 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
37654 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
37658 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3765c 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
37660 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
37664 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
37668 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3766c 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
37670 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
37674 28c             | 
37674 28c             |                             ' fall through to read bursts
37674 28c             |                         
37674 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
37674 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
37678 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3767c 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
37680 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
37684 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
37688 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3768c 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
37690 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
37694 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
37698 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3769c 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
376a0 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
376a4 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
376a8 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
376ac 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
376b0 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
376b4 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
376b8 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
376bc 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
376c0 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
376c4 2a0 E8 D1 03 F1 |                             add     clks, clks
376c8 2a1             | readcommon
376c8 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
376cc 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
376d0 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
376d4 2a4             | 
376d4 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
376d8 2a5 69 C8 63 FD |                             rev     cmdaddr
376dc 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
376e0 2a7 61 C8 63 FD |                             mergeb  cmdaddr
376e4 2a8             | 
376e4 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
376e8 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
376ec 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
376ec 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
376f0 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
376f4 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
376f8 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
376fc 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
376fc 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
37700 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
37704 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
37708 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3770c 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
37710 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
37714 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
37714 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
37718 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3771c 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
37720 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
37724 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
37728 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
3772c 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
37730 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
37734 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
37738 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
3773c 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
37740 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
37744 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
37748 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
3774c 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
3774c 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
37750 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
37754 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
37758 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3775c 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
37760 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
37764 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
37768 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3776c 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
37770 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
37774 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
37778 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3777c 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
37780 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
37784 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
37788 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3778c 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
37790 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
37794 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
37798 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3779c 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
377a0 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
377a4 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
377a8 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
377ac 2da 10 03 90 FD |                             jmp     #writecommon
377b0 2db             | 
377b0 2db             | '..................................................................................................
377b0 2db             | ' Burst continuation testing
377b0 2db             | 
377b0 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
377b4 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
377b8 2dd             | continue_read_lut          
377b8 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
377bc 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
377c0 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
377c4 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
377c8 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
377cc 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
377d0 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
377d4 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
377d8 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
377dc 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
377e0 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
377e4 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
377e8 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
377ec 2ea             | 
377ec 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
377f0 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
377f4 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
377f8 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
377fc 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
37800 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
37804 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
37808 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3780c 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
37810 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
37814 2f4 2A 1C 66 0D |             _ret_           push    #poller
37818 2f5             | 
37818 2f5             | 
37818 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3781c 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3781c 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
37820 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
37824 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
37828 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3782c 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
37830 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
37834 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
37838 2fd 2D 00 64 FD |                             ret                             ' | continue processing
3783c 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
37840 2ff             | '..................................................................................................
37840 2ff             | ' Completion of requests
37840 2ff             | 
37840 2ff             | complete_rw_lut             
37840 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
37844 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
37848 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3784c 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
37850 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
37854 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
37858 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3785c 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
37860 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
37864 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
37868 309 32 62 64 AD |             if_z            skipf   #%110001
3786c 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
37870 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
37874 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
37878 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3787c 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
37880 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
37884 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
37888 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3788c 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
37890 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
37894 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
37898 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3789c 316             |                                                             ' skipcase (a) gfx copy to/from hub
3789c 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3789c 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3789c 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
378a0 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
378a4 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
378a8 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
378ac 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
378b0 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
378b4 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
378b8 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
378bc 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
378c0 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
378c4 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
378c8 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
378cc 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
378d0 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
378d4 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
378d8 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
378dc 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
378e0 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
378e4 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
378e8 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
378ec 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
378f0 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
378f4 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
378f8 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
378fc 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
37900 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
37904 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
37908 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3790c 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
37910 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
37914 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
37918 335 DF B7 03 A6 |             if_z            mov     addr2, link
3791c 336 34 FF 9F AD |             if_z            jmp     #checknext
37920 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
37924 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
37928 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3792c 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
37930 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
37934 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
37938 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3793c 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
37940 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
37944 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
37948 341             | 
37948 341             | '..................................................................................................
37948 341             | ' PSRAM WRITES
37948 341             |                                                             '  a b c d e f g h
37948 341             | 
37948 341             |                                                             '  B W L F B R L L (a) byte write(s)
37948 341             |                                                             '  Y O O I U E O O (b) word write(s)
37948 341             |                                                             '  T R N L R S C C (c) long write(s)
37948 341             |                                                             '  E D G L S U K K (d) resumed fill
37948 341             |                                                             '          T M E E (e) new burst write
37948 341             |                                                             '            E D D (f) resumed burst
37948 341             |                                                             '              F B (g) locked fill
37948 341             |                                                             '              I U (h) locked burst write
37948 341             |                                                             '              L R 
37948 341             |                                                             '              L S 
37948 341             |                                                             '                T 
37948 341             | 
37948 341             | w_single                   
37948 341             | w_fill_cont           
37948 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3794c 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
37950 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
37954 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
37958 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3795c 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
37960 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
37964 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
37968 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3796c 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
37970 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
37974 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
37978 34d             |                ' disable call to r_resume_burst for single longs when z=0
37978 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3797c 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
37980 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
37984 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
37988 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3798c 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
37990 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
37994 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
37998 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3799c 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
379a0 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
379a4 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
379a8 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
379ac 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
379b0 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
379b4 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
379b8 35d             |         
379b8 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
379b8 35d             |             '
379b8 35d             |             '  At least one of these 3 optional components will be sent
379b8 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
379b8 35d             |             '     body - N x full longs of data
379b8 35d             |             '     trailer - last partial long of data
379b8 35d             |             '
379b8 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
379b8 35d             |             '
379b8 35d             |             'Case    Type                           Sends
379b8 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
379b8 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
379b8 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
379b8 35d             |             ' 4)     Multiple long fill             body only
379b8 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
379b8 35d             | 
379b8 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
379b8 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
379bc 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
379c0 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
379c4 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
379c8 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
379cc 362 13 8C 07 F6 |                             mov     pattern3, #%10011
379d0 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
379d4 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
379d8 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
379dc 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
379e0 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
379e4 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
379e8 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
379ec 36a             |                             
379ec 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
379f0 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
379f4 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
379f8 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
379fc 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
37a00 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
37a04 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
37a08 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
37a0c 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
37a10 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
37a14 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
37a18 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
37a1c 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
37a20 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
37a24 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
37a28 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
37a2c 37a             | 
37a2c 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
37a30 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
37a34 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
37a38 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
37a3c 37e             |                  
37a3c 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
37a40 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
37a44 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
37a48 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
37a4c 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
37a50 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
37a54 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
37a58 385             | 
37a58 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
37a5c 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
37a60 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
37a64 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
37a68 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
37a6c 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
37a70 38b             | 
37a70 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
37a70 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
37a74 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
37a78 38d 2A B0 63 FD |                             push    addr1                   'save address
37a7c 38e             | 
37a7c 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
37a7c 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
37a80 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
37a84 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
37a88 391             |             
37a88 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
37a8c 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
37a90 393 2B B0 63 FD |                             pop     addr1                   'restore address
37a94 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
37a98 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
37a9c 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
37aa0 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
37aa4 398             | 
37aa4 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
37aa8 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
37aac 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
37ab0 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
37ab4 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
37ab8 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
37abc 39e             | 
37abc 39e             |                             'trailer is done
37abc 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
37ac0 39f             | 
37ac0 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
37ac4 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
37ac8 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
37acc 3a2             | 
37acc 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
37ad0 3a3 69 C8 63 FD |                             rev     cmdaddr                 
37ad4 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
37ad8 3a5 61 C8 63 FD |                             mergeb  cmdaddr
37adc 3a6             |                             
37adc 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
37ae0 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
37ae4 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
37ae8 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
37aec 3aa             |                                                          
37aec 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
37af0 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
37af4 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
37af8 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
37afc 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
37b00 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
37b04 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
37b08 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
37b0c 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
37b10 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
37b14 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
37b18 3b5             |  
37b18 3b5 59 52 63 FD |                             drvh    cspin
37b1c 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
37b20 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
37b24 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
37b28 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
37b2c 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
37b30 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
37b34 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
37b38 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
37b3c 3be EA E5 03 F6 |                             mov     d, orighubsize
37b40 3bf EF E5 63 F0 |                             shl     d, a
37b44 3c0 F2 E3 83 F1 |                             sub     c, d
37b48 3c1 DD E3 03 F1 |                             add     c, offset1
37b4c 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
37b50 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
37b54 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
37b58 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
37b5c 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
37b60 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
37b64 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
37b68 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
37b6c 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
37b70 3cb BB D3 03 F6 |                             mov     resume, restorefill
37b74 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
37b78 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
37b7c 3ce 6C FC BF CD |             if_c            call    #yield
37b80 3cf 2D 00 64 FD |                             ret
37b84 3d0             |                            
37b84 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
37b84 3d0             |                       '     rczl    pa                      'rotate left into address offset
37b84 3d0             |                       '     rczl    c wcz                   'restore count and flags
37b84 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
37b88 3d1 02 EC 67 F0 |                             shl     pa, #2
37b8c 3d2 28 06 64 AD |             if_z            setq    #3
37b90 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
37b94 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
37b98 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
37b9c 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
37ba0 3d7             | 
37ba0 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
37ba4 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
37ba8 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
37bac 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
37bb0 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
37bb4 3dc             |                 fit 1024-32
37bb4 3dc             |         
37bb4 3dc             | 
37bb4 3dc             | '..................................................................................................
37bb4 3dc             | 
37bb4 3dc             |                 fit 1024-32
37bb4 3dc 00 00 00 00 
37bb8 3dd 00 00 00 00 
37bbc 3de 00 00 00 00 
37bc0 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
37bc4 3e0             |                 org 1024-32
37bc4 000             | 
37bc4 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
37bc4 000 00 00 00 00 |                 long $0000
37bc8 001 11 11 00 00 |                 long $1111
37bcc 002 22 22 00 00 |                 long $2222
37bd0 003 33 33 00 00 |                 long $3333
37bd4 004 44 44 00 00 |                 long $4444
37bd8 005 55 55 00 00 |                 long $5555
37bdc 006 66 66 00 00 |                 long $6666
37be0 007 77 77 00 00 |                 long $7777
37be4 008 88 88 00 00 |                 long $8888
37be8 009 99 99 00 00 |                 long $9999
37bec 00a AA AA 00 00 |                 long $aaaa
37bf0 00b BB BB 00 00 |                 long $bbbb
37bf4 00c CC CC 00 00 |                 long $cccc
37bf8 00d DD DD 00 00 |                 long $dddd
37bfc 00e EE EE 00 00 |                 long $eeee
37c00 00f FF FF 00 00 |                 long $ffff
37c04 010             | 
37c04 010             | 'masks
37c04 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
37c08 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
37c0c 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
37c10 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
37c14 014             | 
37c14 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
37c18 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
37c1c 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
37c20 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
37c24 018             | 
37c24 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
37c28 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
37c2c 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
37c30 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
37c34 01c             | 
37c34 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
37c38 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
37c3c 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
37c40 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
37c44 020             |         fit 1024
37c44 020             | 
37c44 020             |         fit 1024
37c44 020             | 
37c44 020             | '--------------------------------------------------------------------------------------------------
37c44 020             |         orgh
37c44                 | 
37c44                 | gfxexpansion
37c44                 |                             'simple line drawing graphics expansion of memory driver
37c44                 |                             'jmp     #donerepeats                'just return for now
37c44                 | 
37c44     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
37c48     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
37c4c     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
37c50     DD E1 03 F6 |                             mov     b, offset1              'get error term
37c54     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
37c58     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
37c5c     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
37c60     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
37c64     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
37c68     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
37c6c     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
37c70     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
37c74     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
37c78     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
37c7c     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
37c80     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
37c84     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
37c88     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
37c8c     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
37c90     DC E5 33 F9 |                             getword d, total, #0            'get line width
37c94     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
37c98     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
37c9c     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
37ca0     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
37ca4     C3 03 80 FD |                             jmp     #readmask               'continue filling
37ca8                 | 	alignl
37ca8                 | _usbnew_spin2_dat_
37ca8                 |                 org     $000
37ca8 000             | 
37ca8 000             | usb_host_start
37ca8 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
37cac 001             | 
37cac 001 03 00 00 FF 
37cb0 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
37cb4 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
37cb8 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
37cbc 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
37cc0 006 29 70 63 FD |                 setq2   htmp
37cc4 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
37cc8 008             | 
37cc8 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
37ccc 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
37cd0 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
37cd4 00b             | 
37cd4 00b             | '------------------------------------------------------------------------------
37cd4 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
37cd4 00b             | ' special because the receiving function must not respond with either STALL or
37cd4 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
37cd4 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
37cd4 00b             | ' corrupt packet, it must ignore the transaction
37cd4 00b             | '------------------------------------------------------------------------------
37cd4 00b             | ' On entry:
37cd4 00b             | '   PTRA - start address of the SETUP data struct.
37cd4 00b             | ' On exit:
37cd4 00b             | '   retval - PID_ACK on success, otherwise error code.
37cd4 00b             | '------------------------------------------------------------------------------
37cd4 00b             | txn_setup
37cd4 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
37cd8 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
37cdc 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
37ce0 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
37ce4 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
37ce8 010             | .setup
37ce8 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
37cec 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37cf0 012 2D 00 64 AD |         if_z    ret
37cf4 013 7C 0B B0 FD |                 call    #retry_wait
37cf8 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
37cfc 015 2D 00 64 AD |         if_z    ret
37d00 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
37d04 017 E0 FF 9F FD |                 jmp     #.setup
37d08 018             | 
37d08 018             | '------------------------------------------------------------------------------
37d08 018             | ' IN/INTERRUPT transaction.
37d08 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
37d08 018             | '------------------------------------------------------------------------------
37d08 018             | ' On entry:
37d08 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
37d08 018             | '     CRC(b19..23).
37d08 018             | ' On exit:
37d08 018             | '------------------------------------------------------------------------------
37d08 018             | txn_in
37d08 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
37d0c 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
37d10 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
37d14 01b             | 
37d14 01b             |                 ' Fall through to urx_packet
37d14 01b             | 
37d14 01b             | '------------------------------------------------------------------------------
37d14 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
37d14 01b             | ' received are handshakes and IN DATAx.
37d14 01b             | '------------------------------------------------------------------------------
37d14 01b             | ' On entry:
37d14 01b             | ' On exit:
37d14 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
37d14 01b             | '     returned.
37d14 01b             | '------------------------------------------------------------------------------
37d14 01b             | urx_packet
37d14 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
37d18 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37d1c 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
37d20 01e 1A 92 63 FD |                 getct   hct2
37d24 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
37d28 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
37d2c 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
37d30 022             | .wait_sop
37d30 022 22 A7 8A FA |                 rdpin   urx, dm
37d34 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37d38 024 08 00 90 CD |         if_c    jmp     #.get_pid
37d3c 025 FC 25 CC FB |                 jnct2   #.wait_sop
37d40 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
37d44 027             | .get_pid
37d44 027 28 02 B0 FD |                 call    #urx_next
37d48 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
37d4c 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
37d50 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
37d54 02b             | .chk_pid
37d54 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37d58 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
37d5c 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
37d60 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
37d64 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
37d68 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
37d6c 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
37d70 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
37d74 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
37d78 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
37d7c 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
37d80 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
37d84 037             | .ack_resend
37d84 037 22 A7 82 FA |                 rqpin   urx, dm
37d88 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
37d8c 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
37d90 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
37d94 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
37d98 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
37d9c 03d             | .chk_eop
37d9c 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
37da0 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
37da4 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
37da8 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
37dac 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
37db0 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
37db4 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
37db8 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
37dbc 045 2D 00 64 FD |                 ret
37dc0 046             | .idle
37dc0 046 22 A7 82 FA |                 rqpin   urx, dm
37dc4 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37dc8 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
37dcc 049 2D 00 64 FD |                 ret
37dd0 04a             | 
37dd0 04a             | '------------------------------------------------------------------------------
37dd0 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
37dd0 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
37dd0 04a             | ' if one is required.
37dd0 04a             | '------------------------------------------------------------------------------
37dd0 04a             | ' On entry:
37dd0 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
37dd0 04a             | ' On exit:
37dd0 04a             | '------------------------------------------------------------------------------
37dd0 04a             | utx_token
37dd0 04a 22 A7 82 FA |                 rqpin   urx, dm
37dd4 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37dd8 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
37ddc 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37de0 04e 34 0D B0 CD |         if_c    call    #utx_pre
37de4 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37de8 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
37dec 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
37df0 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
37df4 053             | .next_byte
37df4 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
37df8 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
37dfc 055             | .wait
37dfc 055 40 46 72 FD |                 testp   dp                      wc
37e00 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
37e04 057 23 03 08 FC |                 akpin   dp
37e08 058 22 A5 22 FC |                 wypin   utx, dm
37e0c 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
37e10 05a             | 
37e10 05a             | '------------------------------------------------------------------------------
37e10 05a             | ' SETUP/OUT/INTERRUPT transaction.
37e10 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
37e10 05a             | '------------------------------------------------------------------------------
37e10 05a             | ' On entry:
37e10 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
37e10 05a             | '     CRC(b19..23).
37e10 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
37e10 05a             | '   pkt_data - count of DATAx payload bytes to send.
37e10 05a             | ' On exit:
37e10 05a             | '------------------------------------------------------------------------------
37e10 05a             | txn_out
37e10 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
37e14 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
37e18 05c 00 00 C0 FF 
37e1c 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
37e20 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
37e24 05f             | 
37e24 05f             |                 ' Fall through to utx_data
37e24 05f             | 
37e24 05f             | '------------------------------------------------------------------------------
37e24 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
37e24 05f             | ' calculated while the data byte is being shifted out. Since data stage
37e24 05f             | ' success/fail is not determined until the status stage of the transaction,
37e24 05f             | ' this routine is only concerned about the current DATAx packet.
37e24 05f             | '------------------------------------------------------------------------------
37e24 05f             | ' On entry:
37e24 05f             | '   PTRA - hub start address of the data to read.
37e24 05f             | '   pkt_cnt - data payload size.
37e24 05f             | ' On exit:
37e24 05f             | '------------------------------------------------------------------------------
37e24 05f             | utx_data
37e24 05f 22 A7 82 FA |                 rqpin   urx, dm
37e28 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37e2c 061 F4 FF 9F CD |         if_c    jmp     #utx_data
37e30 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
37e34 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
37e38 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37e3c 065 D8 0C B0 CD |         if_c    call    #utx_pre
37e40 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37e44 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
37e48 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
37e4c 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
37e50 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
37e54 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
37e58 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
37e5c 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
37e60 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
37e64 06f             | .read_byte
37e64 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
37e68 070 F0 00 B0 FD |                 call    #utx_byte
37e6c 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
37e70 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
37e74 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
37e78 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
37e7c 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
37e80 076             | .send_crc
37e80 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
37e84 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
37e88 078 D0 00 B0 FD |                 call    #utx_byte
37e8c 079 5D A5 EA F8 |                 getbyte utx, crc, #1
37e90 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
37e94 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
37e98 07c             | 
37e98 07c             | '------------------------------------------------------------------------------
37e98 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
37e98 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
37e98 07c             | ' expects that the packet includes at least the CRC word.
37e98 07c             | '
37e98 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
37e98 07c             | ' was requested, which makes it difficult to determine where the data stops
37e98 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
37e98 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
37e98 07c             | ' USB-16 expected residual value of 0xB001.
37e98 07c             | '
37e98 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
37e98 07c             | ' so the caller can verify IN success before writing the data to its final
37e98 07c             | ' destination.
37e98 07c             | '------------------------------------------------------------------------------
37e98 07c             | ' On entry:
37e98 07c             | '   pkt_data - max byte count expected to be in the packet.
37e98 07c             | '   newb_flg - signals new byte ready when toggled.
37e98 07c             | ' On exit:
37e98 07c             | '   pkt_cnt - actual number of bytes read.
37e98 07c             | '------------------------------------------------------------------------------
37e98 07c             | urx_data
37e98 07c F7 75 03 F6 |                 mov     htmp2, pb
37e9c 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
37ea0 07e 00 00 C0 FF 
37ea4 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
37ea8 080 BA EF 03 F6 |                 mov     pb, htmp2
37eac 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
37eb0 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
37eb4 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
37eb8 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
37ebc 085             | .wait_byte
37ebc 085             | ' In-line rx for max speed
37ebc 085 22 A7 82 FA |                 rqpin   urx, dm
37ec0 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
37ec4 087 53 A5 02 F5 |                 and     utx, urx
37ec8 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
37ecc 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
37ed0 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
37ed4 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
37ed8 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
37edc 08d DC FF 9F FD |                 jmp     #.wait_byte
37ee0 08e             | .get_byte
37ee0 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
37ee4 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
37ee8 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
37eec 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
37ef0 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
37ef4 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
37ef8 094             | .end_crc
37ef8 094 01 B8 06 F1 |                 add     pkt_cnt, #1
37efc 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
37f00 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
37f04 097 2D 00 64 1D |         if_a    ret
37f08 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
37f08 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
37f08 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
37f08 098             | ' to miss it, so cheat a bit and look for SOP clear here.
37f08 098 22 A7 82 FA |                 rqpin   urx, dm
37f0c 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
37f10 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
37f14 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
37f14 09b             | .chk_crc
37f14 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
37f18 09c 58 00 00 FF 
37f1c 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
37f20 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
37f24 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
37f28 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
37f2c 0a1 34 09 B0 FD |                 call    #poll_waitx
37f30 0a2             | 
37f30 0a2             |                 ' Fall through to utx_handshake
37f30 0a2             | 
37f30 0a2             | '------------------------------------------------------------------------------
37f30 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
37f30 0a2             | ' the appropriate IP delay has been inserted.
37f30 0a2             | '------------------------------------------------------------------------------
37f30 0a2             | ' On entry:
37f30 0a2             | '   retval - handshake PID to send.
37f30 0a2             | ' On exit:
37f30 0a2             | '   retval unchanged.
37f30 0a2             | '------------------------------------------------------------------------------
37f30 0a2             | utx_handshake
37f30 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
37f34 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
37f38 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
37f3c 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
37f40 0a6 5F A5 02 F6 |                 mov     utx, retval
37f44 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
37f48 0a8             | .idle
37f48 0a8 22 A7 82 FA |                 rqpin   urx, dm
37f4c 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
37f50 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
37f54 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
37f58 0ac 08 09 90 FD |                 jmp     #poll_waitx
37f5c 0ad             | 
37f5c 0ad             | '------------------------------------------------------------------------------
37f5c 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
37f5c 0ad             | '------------------------------------------------------------------------------
37f5c 0ad             | ' On entry:
37f5c 0ad             | '   utx - byte to transmit.
37f5c 0ad             | ' On exit:
37f5c 0ad             | '------------------------------------------------------------------------------
37f5c 0ad             | utx_byte
37f5c 0ad 40 46 72 FD |                 testp   dp                      wc
37f60 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
37f64 0af 23 03 08 FC |                 akpin   dp
37f68 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
37f6c 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
37f70 0b2             | 
37f70 0b2             | '------------------------------------------------------------------------------
37f70 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
37f70 0b2             | '------------------------------------------------------------------------------
37f70 0b2             | ' On entry:
37f70 0b2             | ' On exit:
37f70 0b2             | '   retval - the byte read.
37f70 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
37f70 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
37f70 0b2             | '     received.
37f70 0b2             | '------------------------------------------------------------------------------
37f70 0b2             | urx_next
37f70 0b2 22 A7 8A FA |                 rdpin   urx, dm
37f74 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
37f78 0b4 53 A5 02 F5 |                 and     utx, urx
37f7c 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
37f80 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
37f84 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
37f88 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
37f8c 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
37f90 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
37f94 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
37f98 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
37f9c 0bd 2D 00 64 FD |                 ret
37fa0 0be             | 
37fa0 0be             | '------------------------------------------------------------------------------
37fa0 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
37fa0 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
37fa0 0be             | ' length, and the PID is not included in the CRC calculation:
37fa0 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
37fa0 0be             | '  CRC5  ENDP ADDRESS PID
37fa0 0be             | ' %00000_1111_1111111_xxxxxxxx
37fa0 0be             | '------------------------------------------------------------------------------
37fa0 0be             | ' On entry:
37fa0 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
37fa0 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
37fa0 0be             | ' On exit:
37fa0 0be             | '   ep_addr_pid - CRC value appended to the packet.
37fa0 0be             | '------------------------------------------------------------------------------
37fa0 0be             | calc_crc5
37fa0 0be FF 03 00 FF 
37fa4 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
37fa8 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
37fac 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
37fb0 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
37fb4 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
37fb8 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
37fbc 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
37fc0 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
37fc4 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
37fc8 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
37fcc 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
37fd0 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
37fd4 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
37fd8 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
37fdc 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
37fe0 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
37fe4 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
37fe8 0d0             | 
37fe8 0d0             | '------------------------------------------------------------------------------
37fe8 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
37fe8 0d0             | '------------------------------------------------------------------------------
37fe8 0d0             | isr1_fsframe
37fe8 0d0 1A 92 62 FD |                 getct   iframe_ct_base
37fec 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
37ff0 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
37ff4 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
37ff8 0d4             | .wait
37ff8 0d4 40 46 72 FD |                 testp   dp                      wc
37ffc 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
38000 0d6 23 03 08 FC |                 akpin   dp
38004 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
38008 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
3800c 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
38010 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
38014 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
38018 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
3801c 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
38020 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
38024 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
38028 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
3802c 0e1 2C FF BF FD |                 call    #utx_byte
38030 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
38034 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
38038 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
3803c 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
38040 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
38044 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
38048 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
3804c 0e9 5B A5 42 F5 |                 or      utx, icrc
38050 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
38054 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
38058 0ec 20 00 90 FD |                 jmp     #isr1_wait
3805c 0ed             | isr1_lsframe
3805c 0ed 1A 92 62 FD |                 getct   iframe_ct_base
38060 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
38064 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
38068 0f0             | .wait
38068 0f0 40 46 72 FD |                 testp   dp                      wc
3806c 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
38070 0f2 23 03 08 FC |                 akpin   dp
38074 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
38078 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
3807c 0f5             | isr1_wait
3807c 0f5 22 A5 82 FA |                 rqpin   utx, dm
38080 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
38084 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
38088 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
3808c 0f9 03 00 00 FF 
38090 0fa FF B3 06 F5 |                 and     frame, ##$7ff
38094 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
38098 0fc F5 FF 3B FB |                 reti1
3809c 0fd             | 
3809c 0fd             | '------------------------------------------------------------------------------
3809c 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
3809c 0fd             | ' transaction will complete before the next frame is triggered.
3809c 0fd             | '------------------------------------------------------------------------------
3809c 0fd             | ' On entry:
3809c 0fd             | ' On exit:
3809c 0fd             | '------------------------------------------------------------------------------
3809c 0fd             | wait_txn_ok
3809c 0fd 1A 74 63 FD |                 getct   htmp2
380a0 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
380a4 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
380a8 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
380ac 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
380b0 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
380b4 103 2D 00 64 FD |                 ret
380b8 104             | 
380b8 104             | '------------------------------------------------------------------------------
380b8 104             | ' A device connection was detected, or a bus reset was requested by the USB
380b8 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
380b8 104             | ' and perform a reset sequence prior to device enumeration.
380b8 104             | '------------------------------------------------------------------------------
380b8 104             | dev_reset
380b8 104 22 A7 82 FA |                 rqpin   urx, dm
380bc 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
380c0 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
380c4 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
380c8 108             | reset
380c8 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
380cc 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
380d0 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
380d4 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
380d8 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
380dc 10d 1A 92 62 FD |                 getct   iframe_ct_base
380e0 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
380e4 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
380e8 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
380ec 111 24 70 07 F1 |                 add     htmp, #36
380f0 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
380f4 113             | .framewait
380f4 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
380f8 114 F8 FF 9F CD |         if_b    jmp     #.framewait
380fc 115 2D 00 64 FD |                 ret
38100 116             | 
38100 116             | '------------------------------------------------------------------------------
38100 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
38100 116             | '------------------------------------------------------------------------------
38100 116             | ' On entry:
38100 116             | '   PTRA - source address.
38100 116             | '   PB - destination address.
38100 116             | '   hr0 - length of copy, in bytes.
38100 116             | ' On exit:
38100 116             | '------------------------------------------------------------------------------
38100 116             | hmemcpy
38100 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
38104 117 F7 71 43 FC |                 wrbyte  htmp, pb
38108 118 01 EE 07 F1 |                 add     pb, #1
3810c 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
38110 11a             | 
38110 11a             | '------------------------------------------------------------------------------
38110 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
38110 11a             | ' loop until the errant device is disconnected.
38110 11a             | '------------------------------------------------------------------------------
38110 11a             | ' On entry:
38110 11a             | ' On exit:
38110 11a             | '------------------------------------------------------------------------------
38110 11a             | host_error
38110 11a             |           if ERROR_LED >= 0
38110 11a             |           end
38110 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
38114 11b             | 
38114 11b             | '------------------------------------------------------------------------------
38114 11b             | ' Get HID descriptor buffer for current port
38114 11b             | '------------------------------------------------------------------------------
38114 11b             | ' On entry:
38114 11b             | ' On exit:
38114 11b             | '   PB - HID descriptor buffer pointer
38114 11b             | '------------------------------------------------------------------------------
38114 11b             | get_hid_descr_buffer
38114 11b 2D EF 03 F6 |                 mov     pb, hdev_port
38118 11c 01 EE E7 F2 |                 cmpsub  pb, #1
3811c 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
38120 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
38124 11f             | 
38124 11f             | 
38124 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
38128 120             | 
38128 120             | ' USB commands and error codes
38128 120 00 00 00 00 | cmd_data        long    0
3812c 121 00 00 00 00 | usb_err_code    long    ERR_NONE
38130 122             | 
38130 122             | ' Parameters block assigned at cog startup
38130 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
38134 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
38138 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
3813c 125             | if ACTIVITY_LED >= 0
3813c 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
3813c 125             | end
3813c 125             | if ERROR_LED >= 0
3813c 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
3813c 125             | end
3813c 125 00 00 00 00 | hid_descr_p     long    0
38140 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
38140 126             | 'hkbd_report_p   long    0
38140 126 00 00 00 00 | hub_descr_p     long    0
38144 127 00 00 00 00 | urx_buff_p      long    0
38148 128 00 00 00 00 | dev_desc_buff_p long    0
3814c 129 00 00 00 00 | con_desc_buff_p long    0
38150 12a 00 00 00 00 | cache_start_p   long    0
38154 12b 00 00 00 00 | cache_end_p     long    0
38158 12c             | if EMUPAD_MAX_PLAYER > 0
38158 12c             | emupad_out_ptr  long    0
38158 12c             | end
38158 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
3815c 12d             | 
3815c 12d             | hdev_init_start
3815c 12d             | hdev_port       res     1
3815c 12d             | hdev_port       res     1
3815c 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3815c 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3815c 12d             | kbm_next_datax  res     1
3815c 12d             | kbm_next_datax  res     1
3815c 12d             | hub_intf_num    res     1
3815c 12d             | hub_intf_num    res     1
3815c 12d             | hub_next_datax  res     1
3815c 12d             | hub_next_datax  res     1
3815c 12d             | hub_status_chg  res     1
3815c 12d             | hub_status_chg  res     1
3815c 12d             | hub_port_status res     1
3815c 12d             | hub_port_status res     1
3815c 12d             | if HAVE_MOUSE
3815c 12d             | ms_intf_num     res     1
3815c 12d             | ms_intf_num     res     1
3815c 12d             | ms_in_max_pkt   res     1
3815c 12d             | ms_in_max_pkt   res     1
3815c 12d             | end
3815c 12d             | kb_intf_num     res     1
3815c 12d             | kb_intf_num     res     1
3815c 12d             | kb_interval     res     1
3815c 12d             | kb_interval     res     1
3815c 12d             | kb_in_max_pkt   res     1
3815c 12d             | kb_in_max_pkt   res     1
3815c 12d             | kb_max_index    res     1
3815c 12d             | kb_max_index    res     1
3815c 12d             | kb_led_states   res     1
3815c 12d             | kb_led_states   res     1
3815c 12d             | gp_intf_num     res     1
3815c 12d             | gp_intf_num     res     1
3815c 12d             | gp_interval     res     1
3815c 12d             | gp_interval     res     1
3815c 12d             | gp_max_index    res     1
3815c 12d             | gp_max_index    res     1
3815c 12d             | gp_descr_len    res     1+MAX_DEVICES
3815c 12d             | gp_descr_len    res     1+MAX_DEVICES
3815c 12d             | hdev_init_end
3815c 12d             | 
3815c 12d             | ' Initialized at cog startup:
3815c 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3815c 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3815c 12d             | iframe_ct_new   res     1
3815c 12d             | iframe_ct_new   res     1
3815c 12d             | iframe_ct_base  res     1
3815c 12d             | iframe_ct_base  res     1
3815c 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3815c 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3815c 12d             | 
3815c 12d             | ' This register block is reset to zero when a USB device connects
3815c 12d             | hreg_init_start
3815c 12d             | hstatus         res     1         ' Host status flags
3815c 12d             | hstatus         res     1         ' Host status flags
3815c 12d             | hctwait         res     1         ' Poll-based wait clocks
3815c 12d             | hctwait         res     1         ' Poll-based wait clocks
3815c 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3815c 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3815c 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3815c 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3815c 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3815c 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3815c 12d             | xfer_retry      res     1         ' Control transfer retry count
3815c 12d             | xfer_retry      res     1         ' Control transfer retry count
3815c 12d             | retry           res     1         ' Transaction retry count
3815c 12d             | retry           res     1         ' Transaction retry count
3815c 12d             | utx             res     1         ' Byte to transmit on USB
3815c 12d             | utx             res     1         ' Byte to transmit on USB
3815c 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3815c 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3815c 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3815c 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3815c 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3815c 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3815c 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3815c 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3815c 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3815c 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3815c 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3815c 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3815c 12d             | frame           res     1         ' USB 1ms frame counter value
3815c 12d             | frame           res     1         ' USB 1ms frame counter value
3815c 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3815c 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3815c 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3815c 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3815c 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3815c 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3815c 12d             | crc             res     1         ' Used for CRC16 calculation
3815c 12d             | crc             res     1         ' Used for CRC16 calculation
3815c 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3815c 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3815c 12d             | retval          res     1         ' Global success/fail return parameter
3815c 12d             | retval          res     1         ' Global success/fail return parameter
3815c 12d             | context_retval  res     1         ' Operation contextual return parameter
3815c 12d             | context_retval  res     1         ' Operation contextual return parameter
3815c 12d             | ' Device stuff
3815c 12d             | hdev_id         res     1+MAX_DEVICES
3815c 12d             | hdev_id         res     1+MAX_DEVICES
3815c 12d             | hdev_bcd        res     1
3815c 12d             | hdev_bcd        res     1
3815c 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3815c 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3815c 12d             | ' Keyboard/mouse stuff
3815c 12d             | hctrl_ep_addr   res     1
3815c 12d             | hctrl_ep_addr   res     1
3815c 12d             | hctrl_max_pkt   res     1
3815c 12d             | hctrl_max_pkt   res     1
3815c 12d             | hconfig_base    res     1
3815c 12d             | hconfig_base    res     1
3815c 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3815c 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3815c 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3815c 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3815c 12d             | hdev_class      res     1
3815c 12d             | hdev_class      res     1
3815c 12d             | hdev_subclass   res     1
3815c 12d             | hdev_subclass   res     1
3815c 12d             | hdev_protocol   res     1
3815c 12d             | hdev_protocol   res     1
3815c 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3815c 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3815c 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3815c 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3815c 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3815c 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3815c 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3815c 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3815c 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3815c 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3815c 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3815c 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3815c 12d             | if HAVE_MOUSE
3815c 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3815c 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3815c 12d             | end
3815c 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3815c 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3815c 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3815c 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3815c 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3815c 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3815c 12d             | hdev_out_addr   res     1
3815c 12d             | hdev_out_addr   res     1
3815c 12d             | 
3815c 12d             | if EMUPAD_MAX_PLAYER > 0
3815c 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
3815c 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
3815c 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
3815c 12d             | end
3815c 12d             | 
3815c 12d             | hreg_init_end
3815c 12d             | 
3815c 12d             | hidr_start
3815c 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3815c 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3815c 12d             | hidr_flags      res     1
3815c 12d             | hidr_flags      res     1
3815c 12d             | hidr_axis       res     3
3815c 12d             | hidr_axis       res     3
3815c 12d             | hidr_buttons    res     1
3815c 12d             | hidr_buttons    res     1
3815c 12d             | hidr_hats       res     1
3815c 12d             | hidr_hats       res     1
3815c 12d             | '' Above are actually useful values, 6 longs
3815c 12d             | hidr_id         res     1
3815c 12d             | hidr_id         res     1
3815c 12d             | hidr_state      res     1
3815c 12d             | hidr_state      res     1
3815c 12d             | hidr_size       res     1
3815c 12d             | hidr_size       res     1
3815c 12d             | hidr_count      res     1
3815c 12d             | hidr_count      res     1
3815c 12d             | hidr_offset     res     1
3815c 12d             | hidr_offset     res     1
3815c 12d             | hidr_usage_idx  res     1
3815c 12d             | hidr_usage_idx  res     1
3815c 12d             | hidr_lminmax    res     1
3815c 12d             | hidr_lminmax    res     1
3815c 12d             | hidr_pminmax    res     1
3815c 12d             | hidr_pminmax    res     1
3815c 12d             | hidr_type       res     1
3815c 12d             | hidr_type       res     1
3815c 12d             | hidr_end
3815c 12d             | 
3815c 12d             | ' Variables dependent on the system freqency
3815c 12d             | _var_64_lower_  res     1
3815c 12d             | _var_64_lower_  res     1
3815c 12d             | _var_64_upper_  res     1
3815c 12d             | _var_64_upper_  res     1
3815c 12d             | _12Mbps_        res     1
3815c 12d             | _12Mbps_        res     1
3815c 12d             | _1_5Mbps_       res     1
3815c 12d             | _1_5Mbps_       res     1
3815c 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3815c 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3815c 12d             | _1us_           res     1         ' 1us
3815c 12d             | _1us_           res     1         ' 1us
3815c 12d             | _10us_          res     1         ' 10us
3815c 12d             | _10us_          res     1         ' 10us
3815c 12d             | _33us_          res     1         ' 33us
3815c 12d             | _33us_          res     1         ' 33us
3815c 12d             | _txn_err_       res     1         ' 250us
3815c 12d             | _txn_err_       res     1         ' 250us
3815c 12d             | _500us_         res     1         ' 500us
3815c 12d             | _500us_         res     1         ' 500us
3815c 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3815c 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3815c 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3815c 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3815c 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3815c 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3815c 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3815c 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3815c 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3815c 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3815c 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3815c 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3815c 12d             | _preamble_wait_ res     1
3815c 12d             | _preamble_wait_ res     1
3815c 12d             | _1ms_           res     1         ' 1ms
3815c 12d             | _1ms_           res     1         ' 1ms
3815c 12d             | _2ms_           res     1         ' 2ms
3815c 12d             | _2ms_           res     1         ' 2ms
3815c 12d             | _suspend_wait_  res     1         ' 3ms
3815c 12d             | _suspend_wait_  res     1         ' 3ms
3815c 12d             | _4ms_           res     1         ' 4ms
3815c 12d             | _4ms_           res     1         ' 4ms
3815c 12d             | _xfer_wait_     res     1         ' 5ms
3815c 12d             | _xfer_wait_     res     1         ' 5ms
3815c 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3815c 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3815c 12d             | _reset_hold_    res     1         ' 15ms
3815c 12d             | _reset_hold_    res     1         ' 15ms
3815c 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3815c 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3815c 12d             | _21ms_          res     1         ' 21ms
3815c 12d             | _21ms_          res     1         ' 21ms
3815c 12d             | _100ms_         res     1         ' 100ms
3815c 12d             | _100ms_         res     1         ' 100ms
3815c 12d             | _500ms_         res     1         ' 500ms
3815c 12d             | _500ms_         res     1         ' 500ms
3815c 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3815c 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3815c 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3815c 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3815c 12d             | '------------------------------------------------------------------------------
3815c 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3815c 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3815c 12d             | _usb_d_ls_nco_  res     1
3815c 12d             | _usb_d_ls_nco_  res     1
3815c 12d             | _usb_h_fs_nco_  res     1
3815c 12d             | _usb_h_fs_nco_  res     1
3815c 12d             | _usb_d_fs_nco_  res     1
3815c 12d             | _usb_d_fs_nco_  res     1
3815c 12d             | '------------------------------------------------------------------------------
3815c 12d             | ' Scratch registers
3815c 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3815c 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3815c 12d             | htmp1           res     1
3815c 12d             | htmp1           res     1
3815c 12d             | htmp2           res     1
3815c 12d             | htmp2           res     1
3815c 12d             | htmp3           res     1
3815c 12d             | htmp3           res     1
3815c 12d             | hrep            res     1         ' Repeat count
3815c 12d             | hrep            res     1         ' Repeat count
3815c 12d             | hsave0          res     1         ' Subroutine parameter saves
3815c 12d             | hsave0          res     1         ' Subroutine parameter saves
3815c 12d             | hsave1          res     1
3815c 12d             | hsave1          res     1
3815c 12d             | hsave2          res     1
3815c 12d             | hsave2          res     1
3815c 12d             | isrtmp1         res     1
3815c 12d             | isrtmp1         res     1
3815c 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3815c 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3815c 12d             | hr0             res     1         ' Multi-purpose registers
3815c 12d             | hr0             res     1         ' Multi-purpose registers
3815c 12d             | hr1             res     1
3815c 12d             | hr1             res     1
3815c 12d             | hr2             res     1
3815c 12d             | hr2             res     1
3815c 12d             | hr3             res     1
3815c 12d             | hr3             res     1
3815c 12d             | hpar1           res     1         ' Routine entry/exit parameters
3815c 12d             | hpar1           res     1         ' Routine entry/exit parameters
3815c 12d             | hpar2           res     1
3815c 12d             | hpar2           res     1
3815c 12d             | hpar3           res     1
3815c 12d             | hpar3           res     1
3815c 12d             | hct2            res     1         ' Function response bus turn-around timer
3815c 12d             | hct2            res     1         ' Function response bus turn-around timer
3815c 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3815c 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3815c 12d             | mod_cnt         res     1         ' Used in idle loops
3815c 12d             | mod_cnt         res     1         ' Used in idle loops
3815c 12d             |                 fit     $1F0
3815c 12d             |                 org     $200
3815c 200             | hlut_start
3815c 200             | 
3815c 200             | '------------------------------------------------------------------------------
3815c 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
3815c 200             | ' settings to startup defaults.
3815c 200             | '------------------------------------------------------------------------------
3815c 200             | ' On entry:
3815c 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
3815c 200             | '------------------------------------------------------------------------------
3815c 200             | set_speed_full
3815c 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
38160 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
38164 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
38168 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
3816c 204             | '                ret                             wcz     ' Restore caller flags on exit
3816c 204             | 
3816c 204             | '------------------------------------------------------------------------------
3816c 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
3816c 204             | ' is a downstream hub connected (not yet implemented), the baud generator
3816c 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
3816c 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
3816c 204             | ' putting the smart pins into reset.
3816c 204             | '------------------------------------------------------------------------------
3816c 204             | ' On entry:
3816c 204             | ' On exit: CZ flags restored to caller states
3816c 204             | '------------------------------------------------------------------------------
3816c 204             | set_speed_low
3816c 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
38170 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
38174 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
38178 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3817c 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
38180 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
38184 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
38188 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
3818c 20c             | 
3818c 20c             | '------------------------------------------------------------------------------
3818c 20c             | ' Perform configuration stuff required when a device intitially connects.
3818c 20c             | '------------------------------------------------------------------------------
3818c 20c             | ' On entry:
3818c 20c             | ' On exit:
3818c 20c             | '------------------------------------------------------------------------------
3818c 20c             | on_connect
3818c 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
38190 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
38194 20e             | .retry
38194 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
38198 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
3819c 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
381a0 211 00 08 00 FF 
381a4 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
381a8 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
381ac 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
381b0 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
381b4 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
381b8 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
381bc 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
381c0 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
381c4 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
381c8 21b 4C 03 B0 FD |                 call    #poll_waitx
381cc 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
381d0 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
381d4 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
381d8 21f B8 FF 9F FD |                 jmp     #.retry
381dc 220             | .get_dev_desc
381dc 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
381e0 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
381e4 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
381e8 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
381ec 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
381f0 225 88 FB BF FD |                 call    #reset
381f4 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
381f8 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
381fc 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
38200 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
38204 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38208 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3820c 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
38210 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
38214 22e 04 00 00 FF 
38218 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
3821c 230 34 FA BF FD |                 call    #calc_crc5
38220 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
38224 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
38228 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3822c 234 F7 AD C2 FA |                 rdbyte  total_data, pb
38230 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
38234 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
38238 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3823c 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
38240 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
38244 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
38248 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3824c 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
38250 23d C4 02 B0 FD |                 call    #poll_waitx
38254 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
38258 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3825c 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
38260 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
38264 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
38268 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3826c 244 2D 00 64 5D |         if_nz   ret
38270 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
38274 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
38278 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3827c 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
38280 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
38284 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
38288 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3828c 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
38290 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
38294 24e 2C FB 9F CD |         if_b    jmp     #host_error
38298 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
3829c 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
382a0 251 2D EC 63 FD |                 call    pa
382a4 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
382a8 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
382ac 254 2C EC 63 FD |                 jmp     pa
382b0 255             | 
382b0 255             | '------------------------------------------------------------------------------
382b0 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
382b0 255             | ' Status reporting is always in the function-to-host direction.
382b0 255             | '------------------------------------------------------------------------------
382b0 255             | ' On entry:
382b0 255             | '   PTRA - start address of the SETUP data in hub.
382b0 255             | '   PB - start address of the buffer/struct to be written to during the IN data
382b0 255             | '     stage.
382b0 255             | '   ep_addr_pid - device address, endpoint and CRC5.
382b0 255             | ' On exit:
382b0 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
382b0 255             | '     contains the count of data stage bytes actually received, which must
382b0 255             | '     always be <= the count requested.
382b0 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
382b0 255             | '     more specific USB operation error code.
382b0 255             | '------------------------------------------------------------------------------
382b0 255             | control_read
382b0 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
382b4 256 F8 8F 03 F6 |                 mov     hpar2, ptra
382b8 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
382bc 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
382c0 259             | .xfer_start
382c0 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
382c4 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
382c8 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
382cc 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
382d0 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
382d4 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
382d8 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
382dc 260 61 00 00 FF 
382e0 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
382e4 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
382e8 263             | .data
382e8 263 56 B1 02 F6 |                 mov     pkt_data, total_data
382ec 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
382f0 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
382f4 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
382f8 267             | .nak_retry
382f8 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
382fc 268             | .in_retry
382fc 268 BC F6 BF FD |                 call    #txn_in
38300 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
38304 26a 28 00 90 AD |         if_z    jmp     #.commit
38308 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3830c 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
38310 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
38314 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
38318 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
3831c 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
38320 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
38324 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
38328 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
3832c 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
38330 275             | .commit
38330 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
38334 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
38338 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
3833c 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
38340 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
38344 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
38348 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
3834c 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
38350 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
38354 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
38358 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
3835c 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
38360 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
38364 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
38368 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3836c 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
38370 285             | .pre_status
38370 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
38374 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
38378 287 00 B0 06 F6 |                 mov     pkt_data, #0
3837c 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
38380 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
38384 28a 61 00 00 FF 
38388 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
3838c 28c             | .out_retry
3838c 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
38390 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38394 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
38398 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3839c 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
383a0 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
383a4 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
383a8 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
383ac 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
383b0 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
383b4 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
383b8 297             | ' I've encountered transfer STALL, even though the data looks correct, and
383b8 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
383b8 297             | ' ControlRead() transfer gets things unstuck most of the time...
383b8 297             | .xfer_retry
383b8 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
383bc 298 58 01 B0 FD |                 call    #poll_waitx
383c0 299 8C F9 BF FD |                 call    #wait_txn_ok
383c4 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
383c8 29b C7 F1 03 F6 |                 mov     ptra, hpar2
383cc 29c C8 EF 03 F6 |                 mov     pb, hpar3
383d0 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
383d4 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
383d8 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
383dc 2a0             | 
383dc 2a0             | '------------------------------------------------------------------------------
383dc 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
383dc 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
383dc 2a0             | ' the SETUP data struct is filled with the required values.
383dc 2a0             | '------------------------------------------------------------------------------
383dc 2a0             | ' On entry:
383dc 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
383dc 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
383dc 2a0             | '     stage.
383dc 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
383dc 2a0             | ' On exit:
383dc 2a0             | '   retval - used to convey the success/failure of each stage.
383dc 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
383dc 2a0             | '     more specific USB operation error code.
383dc 2a0             | '------------------------------------------------------------------------------
383dc 2a0             | control_write
383dc 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
383e0 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
383e4 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
383e8 2a3             | 
383e8 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
383ec 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
383f0 2a5 F7 91 03 F6 |                 mov     hpar3, pb
383f4 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
383f8 2a7             | .xfer_start
383f8 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
383fc 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
38400 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
38404 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38408 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3840c 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
38410 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
38414 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
38418 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3841c 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
38420 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
38424 2b2             | .data
38424 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
38428 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
3842c 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
38430 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
38434 2b6             | .out_retry
38434 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
38438 2b7 88 F6 BF FD |                 call    #txn_out
3843c 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38440 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
38444 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
38448 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
3844c 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
38450 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
38454 2be             | .commit
38454 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
38458 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
3845c 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
38460 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
38464 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
38468 2c3             | pre_status_in
38468 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
3846c 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
38470 2c5             | .status_retry
38470 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
38474 2c6 44 F5 BF FD |                 call    #txn_in
38478 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
3847c 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
38480 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
38484 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
38488 2cb 2D 00 64 AD |         if_z    ret
3848c 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
38490 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
38494 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
38498 2cf             | '               ret                                     ' Caller must handle transfer retirement
38498 2cf             | 
38498 2cf             | '------------------------------------------------------------------------------
38498 2cf             | ' Execute an IN interrupt transaction.
38498 2cf             | '------------------------------------------------------------------------------
38498 2cf             | ' On entry:
38498 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
38498 2cf             | '   hpar2 - Address of the IN data buffer
38498 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
38498 2cf             | ' On exit:
38498 2cf             | '   retval - the result of the operation.
38498 2cf             | '   hpar3 - the count of IN data bytes actually received.
38498 2cf             | '------------------------------------------------------------------------------
38498 2cf             | do_int_in
38498 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3849c 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
384a0 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
384a4 2d2             | 
384a4 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
384a8 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
384ac 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
384b0 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
384b4 2d6             | .retry
384b4 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
384b8 2d7 00 F5 BF FD |                 call    #txn_in
384bc 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
384c0 2d9 1C 00 90 AD |         if_z    jmp     #.commit
384c4 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
384c8 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
384cc 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
384d0 2dd 54 00 B0 FD |                 call    #retry_wait
384d4 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
384d8 2df 18 00 90 AD |         if_z    jmp     #.post_ret
384dc 2e0 D4 FF 9F FD |                 jmp     #.retry
384e0 2e1             | .commit
384e0 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
384e4 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
384e8 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
384ec 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
384f0 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
384f4 2e6             | .post_ret
384f4 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
384f8 2e7             | 
384f8 2e7             | 
384f8 2e7             | '------------------------------------------------------------------------------
384f8 2e7             | ' Resets the downstream hub port to FS
384f8 2e7             | '------------------------------------------------------------------------------
384f8 2e7             | dwnstream_reset
384f8 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
384fc 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
38500 2e9             | 
38500 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
38504 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
38508 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3850c 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
38510 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
38514 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
38518 2ef             | 
38518 2ef             | '------------------------------------------------------------------------------
38518 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
38518 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
38518 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
38518 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
38518 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
38518 2ef             | '------------------------------------------------------------------------------
38518 2ef             | ' On entry:
38518 2ef             | '   hctwait - wait interval in sysclocks.
38518 2ef             | ' On exit:
38518 2ef             | '------------------------------------------------------------------------------
38518 2ef             | poll_waitx
38518 2ef 1A 92 63 FD |                 getct   hct2
3851c 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
38520 2f1             | .wait
38520 2f1 FF 25 CC FB |                 jnct2   #.wait
38524 2f2 2D 00 64 FD |                 ret
38528 2f3             | 
38528 2f3             | '------------------------------------------------------------------------------
38528 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
38528 2f3             | '------------------------------------------------------------------------------
38528 2f3             | ' On entry:
38528 2f3             | '   retval - transaction response PID or error code.
38528 2f3             | ' On exit:
38528 2f3             | '------------------------------------------------------------------------------
38528 2f3             | retry_wait
38528 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3852c 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
38530 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
38534 2f6 14 00 90 AD |         if_z    jmp     #.nak
38538 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
3853c 2f8 D8 FF BF FD |                 call    #poll_waitx
38540 2f9             | .dec
38540 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
38544 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
38548 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
3854c 2fc             | .nak
3854c 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
38550 2fd C4 FF BF FD |                 call    #poll_waitx
38554 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
38558 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
3855c 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
38560 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
38564 302 2D 00 64 FD |                 ret
38568 303             | 
38568 303             | host_reset
38568 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
3856c 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
38570 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
38570 305 BD 01 05 FF 
38574 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
38578 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
3857c 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
38580 309             | ' Check to see if the system clock has been changed.
38580 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
38584 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
38588 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3858c 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
38590 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
38594 30e 40 46 62 FD |                 dirl    dp
38598 30f             | 
38598 30f 28 02 64 FD |                 setq    #1
3859c 310 80 00 80 FF 
385a0 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
385a4 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
385a8 313             | .enable
385a8 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
385ac 314 41 46 62 FD |                 dirh    dp
385b0 315 1F 36 63 FD |                 waitx   _1us_
385b4 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
385b8 317             | 
385b8 317             |                 ' Handle Port protection enable and startup delay
385b8 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
385bc 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
385c0 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
385c4 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
385c8 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
385cc 31c             | 
385cc 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
385d0 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
385d4 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
385d8 31f 00 00 04 F6 |                 mov     0-0, #0
385dc 320             | .regloop
385dc 320             | 
385dc 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
385dc 320             | 
385dc 320             | discon_entry
385dc 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
385e0 321             | 
385e0 321             |               
385e0 321             |         if HAVE_HIDPAD
385e0 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
385e4 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
385e8 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
385ec 324 F7 01 68 FC |                 wrlong  #0,pb
385f0 325             |         end
385f0 325             |         if EMUPAD_MAX_PLAYER > 0
385f0 325             |         end
385f0 325             | 
385f0 325             |                 ' Fall through to disconnected loop
385f0 325             | 
385f0 325             | '-----------------------------------------------------------------------------------------------------------------
385f0 325             | ' Device connect handling (Section 7.1.7.3).
385f0 325             | '-----------------------------------------------------------------------------------------------------------------
385f0 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
385f0 325             | ' device to connect (Section 7.1.7.3).
385f0 325             | '-----------------------------------------------------------------------------------------------------------------
385f0 325             | disconnected
385f0 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
385f4 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
385f8 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
385fc 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
38600 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
38604 32a             |         if ACTIVITY_LED >= 0
38604 32a             |         end
38604 32a 22 A7 82 FA |                 rqpin   urx, dm
38608 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
3860c 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
38610 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
38614 32e             | .se1_test
38614 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
38618 32f FC FE BF FD |                 call    #poll_waitx
3861c 330 22 A7 82 FA |                 rqpin   urx, dm
38620 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
38624 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
38628 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
3862c 334             | .se1            'SE1 is a fatal error condition
3862c 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
38630 335 E4 FE BF FD |                 call    #poll_waitx
38634 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
38638 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
3863c 338             | .connect_test                                           ' Test lines until stable J/K state seen
3863c 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
38640 339 22 A7 82 FA |                 rqpin   urx, dm
38644 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
38648 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
3864c 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
38650 33d             | connected
38650 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
38654 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
38658 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
3865c 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
38660 341             | .set_pulse
38660 341 1A 64 63 FD |                 getct   _pulse_time_
38664 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
38668 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
38668 343             | ' of 1ms and make a correction, if necessary.
38668 343             | '                mov     htmp, _1ms_
38668 343             | '                subs    htmp, iframe_delta
38668 343             | '                adds    _frame1ms_clks_, htmp
38668 343             | '                debug(udec(_frame1ms_clks_))
38668 343             | 
38668 343             |                 ' Fall through to idle/processing loop
38668 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3866c 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
38670 345             | 
38670 345             | hidle
38670 345 22 A7 82 FA |                 rqpin   urx, dm
38674 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
38678 347 98 00 90 CD |         if_c    jmp     #.se0_test
3867c 348 24 06 70 FD |                 pollct3                         wc
38680 349 68 00 90 3D |         if_nc   jmp     #.nopoll
38684 34a 1A 94 63 FD |                 getct   hct3
38688 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3868c 34c             | 
3868c 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
38690 34d 00 70 E3 F8 |                 getbyte htmp
38694 34e             | 
38694 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
38698 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3869c 350 40 00 90 AD |         if_z    jmp     #.poll
386a0 351             | 
386a0 351             |         if _HAVE_GAMEPAD
386a0 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
386a4 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
386a8 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
386ac 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
386b0 355 2C 00 90 AD |         if_z    jmp     #.poll
386b4 356             |         end
386b4 356             | 
386b4 356             |         if HAVE_MOUSE
386b4 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
386b8 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
386bc 358 20 00 90 AD |         if_z    jmp     #.poll
386c0 359             |         end
386c0 359             | 
386c0 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
386c4 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
386c8 35b 14 00 90 AD |         if_z    jmp     #.poll
386cc 35c             | 
386cc 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
386d0 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
386d4 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
386d8 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
386dc 360             |         if HAVE_MOUSE
386dc 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
386e0 361             |         else
386e0 361             |         end
386e0 361             | 
386e0 361             | .poll
386e0 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
386e4 362 2D EC 63 FD |                 call    pa
386e8 363             | .skip_poll
386e8 363             | 
386e8 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
386ec 364             | 
386ec 364             | .nopoll
386ec 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
386f0 365 44 00 90 AD |         if_z    jmp     #hsuspend
386f4 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
386f8 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
386fc 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
38700 369 1A 84 63 FD |                 getct   hr0
38704 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
38708 36b             |         if ACTIVITY_LED >= 0
38708 36b             |         end
38708 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
3870c 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
38710 36d 5C FF 9F FD |                 jmp     #hidle
38714 36e             | ' Check for extended SE0 state on the bus
38714 36e             | .se0_test
38714 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
38718 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
3871c 370 22 A7 82 FA |                 rqpin   urx, dm
38720 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
38724 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
38728 373 24 F6 BF FD |                 call    #wait_txn_ok
3872c 374 00 00 80 FF 
38730 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
38734 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
38734 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
38738 377             | 
38738 377             | hsuspend
38738 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
3873c 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
38740 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
38744 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
38748 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
3874c 37c 00 96 07 F6 |                 mov     mod_cnt, #0
38750 37d             | 
38750 37d             |                 ' Fall through to resume wait loop
38750 37d             | 
38750 37d             | hwait_resume
38750 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
38754 37e 02 86 47 F0 |                 shr     hr1, #2
38758 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
3875c 380             |         if ACTIVITY_LED >= 0
3875c 380             |         end
3875c 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
38760 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
38764 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
38768 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3876c 384 18 00 90 AD |         if_z    jmp     #.resume
38770 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
38774 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
38778 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3877c 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
38780 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
38784 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
38788 38b             | .resume
38788 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3878c 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
38790 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
38794 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
38798 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3879c 390 1F 70 63 FD |                 waitx   htmp
387a0 391 22 07 28 FC |                 wypin   #OUT_J, dm
387a4 392 01 70 47 F0 |                 shr     htmp, #1
387a8 393 1F 70 63 FD |                 waitx   htmp
387ac 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
387b0 395 1A 92 62 FD |                 getct   iframe_ct_base
387b4 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
387b8 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
387bc 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
387c0 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
387c4 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
387c8 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
387cc 39c             | 
387cc 39c             | '------------------------------------------------------------------------------
387cc 39c             | ' Send preamble to enable low-speed HUB ports
387cc 39c             | '------------------------------------------------------------------------------
387cc 39c             | ' On entry:
387cc 39c             | ' On exit:
387cc 39c             | '   USB baud rate set to low-speed
387cc 39c             | '------------------------------------------------------------------------------
387cc 39c             | utx_pre
387cc 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
387d0 39d 40 46 62 FD |                 dirl    dp
387d4 39e 28 02 64 FD |                 setq    #1
387d8 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
387dc 3a0 58 44 62 FD |                 drvl    dm
387e0 3a1 59 46 62 FD |                 drvh    dp
387e4 3a2             | 
387e4 3a2 1E 00 00 FF 
387e8 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
387ec 3a4             | 
387ec 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
387f0 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
387f4 3a6 28 02 64 3D |         if_nc   setq    #1
387f8 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
387fc 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
38800 3a9             | .l1
38800 3a9             | 
38800 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
38804 3aa 40 46 62 FD |                 dirl    dp
38808 3ab 28 02 64 FD |                 setq    #1
3880c 3ac 80 00 80 FF 
38810 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
38814 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
38818 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3881c 3b0 41 46 62 FD |                 dirh    dp
38820 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
38824 3b2             | 
38824 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
38828 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3882c 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
38830 3b5             | 
38830 3b5             | hlut_end
38830 3b5             |                 fit     $400
38830 3b5             |                 orgh
38830                 | if OVERLAP_MEMORY
38830                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
38830                 | end
38830                 | '------------------------------------------------------------------------------
38830                 | ' Routines called from cog space.
38830                 | '------------------------------------------------------------------------------
38830                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
38830                 | '------------------------------------------------------------------------------
38830                 | 
38830                 | '------------------------------------------------------------------------------
38830                 | ' USB host cog initialization.
38830                 | '------------------------------------------------------------------------------
38830                 | usb_host_init
38830                 |                 ' Initialize buffer pointers
38830                 |         if OVERLAP_MEMORY
38830                 |         else
38830     40 15 B0 FE |                 loc     pb, #hid_descr
38834                 |         end
38834     F7 4B 02 F6 |                 mov     hid_descr_p, pb
38838                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
38838                 |                 {
38838                 |                 }
38838                 |         
38838                 |                 {
38838                 |                 }
38838                 |                 'loc     pb,#hkbd_report
38838                 |                 'mov     hkbd_report_p,pb
38838                 | 
38838     08 1D B0 FE |                 loc     pb, #hub_descr
3883c     F7 4D 02 F6 |                 mov     hub_descr_p, pb
38840     1D 1D B0 FE |                 loc     pb, #urx_buff
38844     F7 4F 02 F6 |                 mov     urx_buff_p, pb
38848     95 1D B0 FE |                 loc     pb, #dev_desc_buff
3884c     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
38850     9F 1D B0 FE |                 loc     pb, #con_desc_buff
38854     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
38858     18 15 B0 FE |                 loc     pb, #usb_cache_start
3885c     F7 55 02 F6 |                 mov     cache_start_p, pb
38860     E9 1C B0 FE |                 loc     pb, #usb_cache_end
38864     F7 57 02 F6 |                 mov     cache_end_p, pb
38868                 | 
38868                 |         if ERROR_LED >= 0
38868                 |         end
38868                 | 
38868                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
38868                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
38868                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
38868                 | ' Configure and enable the Serial Host USB port.
38868     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3886c                 | 
3886c                 | '------------------------------------------------------------------------------
3886c                 | ' Timing calculations happen before any interrupt(s) are enabled.
3886c                 | '------------------------------------------------------------------------------
3886c                 | ' On entry:
3886c                 | '   htmp - current CLKFREQ value.
3886c                 | '------------------------------------------------------------------------------
3886c                 | hinit_usb_timings
3886c                 | '                getct   htmp2
3886c     B8 59 02 F6 |                 mov     save_sysclk, htmp
38870     8D 5B 80 FF 
38874     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
38878     18 30 63 FD |                 getqx   _12Mbps_
3887c     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
38880     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
38884     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
38888     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
3888c     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
38890     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
38894     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
38898     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3889c     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
388a0     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
388a4     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
388a8     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
388ac     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
388b0     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
388b4     80 00 00 FF 
388b8     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
388bc     18 2C 63 FD |                 getqx   _var_64_lower_
388c0     19 2E 63 FD |                 getqy   _var_64_upper_
388c4     28 2C 63 FD |                 setq    _var_64_lower_
388c8     65 CD 1D FF 
388cc     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
388d0     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
388d4     01 00 00 FF 
388d8     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
388dc     18 2C 63 FD |                 getqx   _var_64_lower_
388e0     19 2E 63 FD |                 getqy   _var_64_upper_
388e4     28 2C 63 FD |                 setq    _var_64_lower_
388e8     A1 07 00 FF 
388ec     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
388f0     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
388f4     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
388f8     09 36 57 F0 |                 shr     _1us_, #9               wc
388fc     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
38900     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
38904     18 38 63 FD |                 getqx   _10us_
38908     09 38 57 F0 |                 shr     _10us_, #9              wc
3890c     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
38910     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
38914     18 3A 63 FD |                 getqx   _33us_
38918     09 3A 57 F0 |                 shr     _33us_, #9              wc
3891c     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
38920     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
38924     18 3C 63 FD |                 getqx   _txn_err_
38928     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
3892c     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
38930     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
38934     18 3E 63 FD |                 getqx   _500us_
38938     09 3E 57 F0 |                 shr     _500us_, #9             wc
3893c     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
38940     01 00 00 FF 
38944     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
38948     18 40 63 FD |                 getqx   _txn_ok_ls_
3894c     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
38950     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
38954     01 00 00 FF 
38958     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
3895c     18 42 63 FD |                 getqx   _txn_ok_fs_
38960     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
38964     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
38968     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
3896c     05 00 00 FF 
38970     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
38974     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
38978     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
3897c     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
38980     1C 00 00 FF 
38984     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
38988     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3898c     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
38990     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
38994     00 00 00 FF 
38998     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3899c     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
389a0     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
389a4     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
389a8     04 00 00 FF 
389ac     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
389b0     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
389b4     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
389b8     8D 5B 00 FF 
389bc     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
389c0     18 4C 63 FD |                 getqx   _preamble_wait_
389c4     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
389c8     01 00 00 FF 
389cc     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
389d0     18 2C 63 FD |                 getqx   _var_64_lower_
389d4     19 2E 63 FD |                 getqy   _var_64_upper_
389d8     28 2C 63 FD |                 setq    _var_64_lower_
389dc     01 00 00 FF 
389e0     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
389e4     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
389e8     09 4E 57 F0 |                 shr     _1ms_, #9               wc
389ec     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
389f0     FF FF 7F FF 
389f4     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
389f8     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
389fc     A7 51 03 F6 |                 mov     _2ms_, _1ms_
38a00     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
38a04     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
38a08     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
38a0c     A7 55 03 F6 |                 mov     _4ms_, _1ms_
38a10     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
38a14     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
38a18     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
38a1c     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
38a20     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
38a24     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
38a28     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
38a2c     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
38a30     A7 59 03 F6 |                 mov     _8ms_, _1ms_
38a34     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
38a38     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
38a3c     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
38a40     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
38a44     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
38a48     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
38a4c     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
38a50     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
38a54     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
38a58     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
38a5c     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
38a60                 | '        _ret_   mov     _1sec_, save_sysclk
38a60                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
38a60                 | '                ret
38a60                 | {
38a60                 | }
38a60                 | 
38a60                 | '------------------------------------------------------------------------------
38a60                 | ' Parse a configuration descriptor chain to see if the device is a recognized
38a60                 | ' one. If it is, start the task progression that will configure the device for
38a60                 | ' use.
38a60                 | '------------------------------------------------------------------------------
38a60                 | ' On entry:
38a60                 | '   hconfig_base - start address of the cached config descriptor chain.
38a60                 | ' On exit:
38a60                 | '------------------------------------------------------------------------------
38a60                 | hparse_con_desc
38a60     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
38a64     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
38a68     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
38a6c     4E 70 FF F9 |                 movbyts htmp,#%%1032
38a70     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
38a74                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
38a74                 | 
38a74     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
38a78     6E ED 03 F1 |                 add     pa, hconfig_base
38a7c     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
38a80                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
38a80                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
38a80                 | ' that defines a keyboard and/or mouse.
38a80     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
38a84                 | .next_intf
38a84     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
38a88     BC 01 90 3D |         if_ae   jmp     #hset_config
38a8c     6E F3 03 F6 |                 mov     ptrb, hconfig_base
38a90     75 F3 03 F1 |                 add     ptrb, hnext_desc
38a94     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
38a98     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
38a9c     0C 00 90 AD |         if_z    jmp     #.intf
38aa0     80 71 C7 FA |                 rdbyte  htmp, ptrb
38aa4     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
38aa8     D8 FF 9F FD |                 jmp     #.next_intf
38aac                 | .intf
38aac     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
38ab0     00 90 07 F6 |                 mov     hpar3, #0
38ab4     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
38ab8     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
38abc     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
38ac0     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
38ac4                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
38ac4                 | 
38ac4                 | .endp
38ac4     80 71 C7 FA |                 rdbyte  htmp, ptrb
38ac8     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
38acc     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
38ad0     78 00 90 3D |         if_ae   jmp     #.get_device
38ad4     6E F3 03 F6 |                 mov     ptrb, hconfig_base
38ad8     75 F3 03 F1 |                 add     ptrb, hnext_desc
38adc     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
38ae0     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
38ae4     64 00 90 AD |         if_z    jmp     #.get_device
38ae8     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
38aec     04 00 90 AD |         if_z    jmp     #.get_ep
38af0     D0 FF 9F FD |                 jmp     #.endp
38af4                 | .get_ep
38af4     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
38af8     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
38afc     0F 86 67 F0 |                 shl     hr1, #8 + 7
38b00     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
38b04     3F 00 00 FF 
38b08     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
38b0c     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
38b10     00 8E 0F F2 |                 cmp     hpar2, #0               wz
38b14     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
38b18     00 90 0F F2 |                 cmp     hpar3, #0               wz
38b1c     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
38b20     A0 FF 9F FD |                 jmp     #.endp
38b24                 | .in_ep
38b24     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
38b28     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
38b2c                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
38b2c     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
38b30     C2 89 DB F8 |                 setbyte hr2, hr0, #3
38b34     8C FF 9F FD |                 jmp     #.endp
38b38                 | .out_ep
38b38     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
38b3c     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
38b40                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
38b40     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
38b44     C2 8B DB F8 |                 setbyte hr3, hr0, #3
38b48     78 FF 9F FD |                 jmp     #.endp
38b4c                 | 
38b4c                 | .get_device
38b4c     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
38b50     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
38b54     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
38b58     68 00 90 AD |         if_z    jmp     #.gamepad
38b5c     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
38b60     AC 00 90 AD |         if_z    jmp     #.hub
38b64     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
38b68     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
38b6c     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
38b70     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
38b74     4C 00 90 AD |         if_z    jmp     #.gamepad
38b78     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
38b7c     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
38b80                 | .keyboard
38b80     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
38b84                 |         if HAVE_MOUSE
38b84     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
38b88                 |         else
38b88                 |         end
38b88     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
38b8c     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
38b90     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
38b94     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
38b98     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
38b9c     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
38ba0                 |                 'debug(udec(kb_intf_num))
38ba0                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
38ba0     E0 FE 9F FD |                 jmp     #.next_intf
38ba4                 | if HAVE_MOUSE
38ba4                 | .mouse
38ba4     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
38ba8     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
38bac     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
38bb0     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
38bb4     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
38bb8                 |                 'getbyte ms_interval, hr2, #3
38bb8     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
38bbc     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
38bc0                 |                 'debug(udec(kb_intf_num))
38bc0                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
38bc0     C0 FE 9F FD |                 jmp     #.next_intf
38bc4                 | end
38bc4                 | .gamepad
38bc4     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
38bc8     C7 71 63 F5 |                 xor     htmp, hpar2
38bcc     3F 00 00 FF 
38bd0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38bd4     AC FE 9F AD |         if_z    jmp     #.next_intf
38bd8                 |         if HAVE_MOUSE
38bd8     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
38bdc     C7 71 63 F5 |                 xor     htmp, hpar2
38be0     3F 00 00 FF 
38be4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38be8     98 FE 9F AD |         if_z    jmp     #.next_intf
38bec                 |         end
38bec     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
38bf0     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
38bf4     8C FE 9F 5D |         if_nz   jmp     #.next_intf
38bf8                 | 
38bf8     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
38bfc     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
38c00     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
38c04     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
38c08     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
38c0c                 |                 'debug(udec(gp_intf_num))
38c0c                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
38c0c     74 FE 9F FD |                 jmp     #.next_intf
38c10                 | .hub
38c10     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
38c14     6C FE 9F 5D |         if_nz   jmp     #.next_intf
38c18     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
38c1c     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
38c20     60 FE 9F 5D |         if_nz   jmp     #.next_intf
38c24     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
38c28     58 FE 9F 5D |         if_nz   jmp     #.next_intf
38c2c     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
38c30     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
38c34     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
38c38     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38c3c     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
38c40     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
38c44                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
38c44     3C FE 9F FD |                 jmp     #.next_intf
38c48                 | 
38c48                 | '------------------------------------------------------------------------------
38c48                 | ' If a newly-connected device is recognized, do whatever is needed to configure
38c48                 | ' it according to its function, or functions. In the case of this boot protocol
38c48                 | ' keyboard/mouse class driver:
38c48                 | ' - SetConfiguration(config_num)
38c48                 | ' - SetProtocol(boot)
38c48                 | ' - SetIdle(indefinite)
38c48                 | ' - Enter the device interrupt IN polling task stage.
38c48                 | '------------------------------------------------------------------------------
38c48                 | ' On entry:
38c48                 | ' On exit:
38c48                 | '------------------------------------------------------------------------------
38c48                 | hset_config
38c48                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
38c48                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
38c48     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
38c4c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
38c50     00 00 0C F2 |                 cmp     0-0, #0                 wz
38c54     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
38c58                 |         if HAVE_MOUSE
38c58     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
38c5c                 |         end
38c5c     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
38c60     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
38c64                 | .set_config
38c64     6C 0E D0 FE |                 loc     ptra, #set_config
38c68     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
38c6c     6E ED 03 F1 |                 add     pa, hconfig_base
38c70     F6 8D C3 FA |                 rdbyte  hpar1, pa
38c74     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
38c78     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
38c7c     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
38c80     A0 02 A0 FD |                 call    #control_write
38c84     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38c88     2D 00 64 5D |         if_nz   ret
38c8c                 | .kbd_config
38c8c     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
38c90     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
38c94                 | 
38c94     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
38c98     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38c9c     3F 00 00 FF 
38ca0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38ca4     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
38ca8                 | 
38ca8     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
38cac     34 0E D0 FE |                 loc     ptra, #set_protocol
38cb0     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
38cb4     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38cb8     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
38cbc     A0 02 A0 FD |                 call    #control_write
38cc0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38cc4     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
38cc8     E4 02 90 5D |         if_nz   jmp     #.notify_client
38ccc     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
38cd0     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
38cd4     30 03 B0 FD |                 call    #hset_idle
38cd8                 |                 'cmp     retval, #PID_ACK        wz
38cd8                 |         'if_nz   mov     hkbd_ep_addr, #0
38cd8                 |         'if_nz   jmp     #.notify_client
38cd8     A8 99 02 F6 |                 mov     hctwait, _2ms_
38cdc     EF 02 A0 FD |                 call    #poll_waitx
38ce0     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
38ce4     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
38ce8     90 17 90 FE |                 loc     pa, #hkbd_led_rep
38cec     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
38cf0     2C 03 B0 FD |                 call    #hset_kbdled_report
38cf4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38cf8     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
38cfc     B0 02 90 5D |         if_nz   jmp     #.notify_client
38d00     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
38d04     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38d08     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38d0c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
38d10     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
38d14     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
38d18     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
38d1c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
38d20     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
38d24     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
38d28     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
38d2c                 |         if !!HAVE_MOUSE
38d2c                 |         end
38d2c                 | 
38d2c                 | .mouse_config
38d2c                 | if HAVE_MOUSE
38d2c     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
38d30     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
38d34     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
38d38     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38d3c     3F 00 00 FF 
38d40     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38d44     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
38d48                 | 
38d48                 |                 debug("mouse passed addr check")
38d48                 | 
38d48     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
38d4c     00 00 80 FF 
38d50     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
38d54     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
38d58     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38d5c     55 02 A0 FD |                 call    #control_read
38d60     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38d64     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
38d68     44 02 90 5D |         if_nz   jmp     #.notify_client
38d6c     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
38d70     56 01 00 F6 |                 mov     0-0, total_data
38d74     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38d78                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
38d78                 | 
38d78     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
38d7c     64 0D D0 FE |                 loc     ptra, #set_protocol
38d80     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
38d84     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38d88     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
38d8c     A0 02 A0 FD |                 call    #control_write
38d90     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38d94     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
38d98     14 02 90 5D |         if_nz   jmp     #.notify_client
38d9c                 |                 debug("mouse passed SetProtocol")
38d9c     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
38da0     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
38da4     60 02 B0 FD |                 call    #hset_idle
38da8                 |                 'cmp     retval, #PID_ACK        wz
38da8                 |         'if_nz   mov     hmouse_ep_addr, #0
38da8                 |         'if_nz   jmp     #.notify_client
38da8                 |                 debug("mouse passed SetIdle")
38da8     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
38dac     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38db0     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38db4     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
38db8     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
38dbc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
38dc0     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
38dc4     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
38dc8     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
38dcc     3F 00 00 FF 
38dd0     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
38dd4     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
38dd8     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
38ddc     D0 01 90 FD |                 jmp     #.notify_client
38de0                 | end
38de0                 | .gamepad_config
38de0                 | if _HAVE_GAMEPAD
38de0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
38de4     00 00 0C F2 |                 cmp     0-0, #0                 wz
38de8     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
38dec     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
38df0     00 70 03 F6 |                 mov     htmp, 0-0
38df4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38df8     3F 00 00 FF 
38dfc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38e00     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
38e04                 | 
38e04     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
38e08     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
38e0c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38e10     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38e14     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
38e18     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
38e1c     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
38e20     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
38e24     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
38e28     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
38e2c     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
38e30     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
38e34     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
38e38     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
38e3c                 | 
38e3c                 |                 if EMUPAD_MAX_PLAYER > 0
38e3c                 |                 
38e3c                 | .rule_loop           
38e3c                 |                 end
38e3c                 | 
38e3c     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
38e40     5C 00 90 AD |         if_e    jmp     #.xinput
38e44     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
38e48     00 70 03 F6 |                 mov     htmp,0-0
38e4c     01 A6 02 FF 
38e50     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
38e54     7C 00 90 AD |         if_e    jmp     #.ps3
38e58                 | 
38e58     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
38e5c     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
38e60     00 00 80 5F 
38e64     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
38e68     03 00 80 AF 
38e6c     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
38e70     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
38e74     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38e78     55 02 A0 FD |                 call    #control_read
38e7c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38e80     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
38e84     00 00 04 56 |         if_nz   mov     0-0, #0
38e88     24 01 90 5D |         if_nz   jmp     #.notify_client
38e8c     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
38e90     56 01 00 F6 |                 mov     0-0, total_data
38e94     1B 01 A0 FD |                 call    #get_hid_descr_buffer
38e98                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
38e98                 | 
38e98     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
38e9c     10 01 90 FD |                 jmp     #.notify_client
38ea0                 | .xinput
38ea0     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
38ea4     2D EF 03 F6 |                 mov     pb,hdev_port
38ea8     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
38eac     03 EE 27 F3 |                 fle     pb,#3
38eb0     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
38eb4     02 EF 47 FC |                 wrbyte  pb, ptra[2]
38eb8                 | 
38eb8     03 B0 06 F6 |                 mov     pkt_data, #3
38ebc     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
38ec0     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
38ec4     5A 00 A0 FD |                 call    #txn_out
38ec8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
38ecc                 | 
38ecc     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
38ed0     DC 00 90 FD |                 jmp     #.notify_client
38ed4                 | .ps3
38ed4     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
38ed8     2D EF 03 F6 |                 mov     pb,hdev_port
38edc     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
38ee0     04 EE 27 F3 |                 fle     pb,#4
38ee4     F7 EF C3 F9 |                 decod   pb
38ee8     09 EF 47 FC |                 wrbyte  pb, ptra[9]
38eec                 | 
38eec     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
38ef0     00 0C D0 FE |                 loc     ptra, #set_report
38ef4     01 00 80 FF 
38ef8     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
38efc     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38f00     03 61 5C FC |                 wrword  #48, ptra[wLength]
38f04     20 0C B0 FE |                 loc     pb, #ps3_command_buff
38f08     A0 02 A0 FD |                 call    #control_write
38f0c                 | 
38f0c     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
38f10     E0 0B D0 FE |                 loc     ptra, #set_report
38f14     01 00 80 FF 
38f18     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
38f1c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
38f20     03 09 5C FC |                 wrword  #4, ptra[wLength]
38f24     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
38f28     A0 02 A0 FD |                 call    #control_write
38f2c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
38f30     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
38f34     00 00 04 56 |         if_nz   mov     0-0, #0
38f38     74 00 90 5D |         if_nz   jmp     #.notify_client
38f3c                 | 
38f3c     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
38f40     6C 00 90 FD |                 jmp     #.notify_client
38f44                 | end
38f44                 | 
38f44                 | .hub_config
38f44     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
38f48     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
38f4c     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
38f50     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
38f54     3F 00 00 FF 
38f58     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
38f5c     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
38f60                 | 
38f60     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
38f64     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
38f68     26 EF 03 F6 |                 mov     pb, hub_descr_p
38f6c     55 02 A0 FD |                 call    #control_read
38f70     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38f74     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
38f78     34 00 90 5D |         if_nz   jmp     #.notify_client
38f7c                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
38f7c                 | 
38f7c     26 F1 03 F6 |                 mov     ptra, hub_descr_p
38f80     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
38f84     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
38f88                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
38f88                 | .pwr_loop
38f88     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
38f8c     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
38f90     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
38f94     A0 02 A0 FD |                 call    #control_write
38f98     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
38f9c                 | 
38f9c     B1 99 02 F6 |                 mov     hctwait, _500ms_
38fa0     B0 99 02 F1 |                 add     hctwait, _100ms_
38fa4     EF 02 A0 FD |                 call    #poll_waitx
38fa8                 | 
38fa8     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
38fac     00 00 90 FD |                 jmp     #.notify_client
38fb0                 | 
38fb0                 | .notify_client
38fb0     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
38fb4     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
38fb8                 |                 debug(uhex_long(hdev_type,hdev_type+1))
38fb8                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
38fb8     2D 00 64 FD |                 ret
38fbc                 | 
38fbc                 | '------------------------------------------------------------------------------
38fbc                 | ' Initialize the keyboard/mouse data area to start-up values.
38fbc                 | '------------------------------------------------------------------------------
38fbc                 | ' On entry:
38fbc                 | ' On exit:
38fbc                 | '------------------------------------------------------------------------------
38fbc                 | init_kbdm_data
38fbc     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
38fc0     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
38fc4                 | 
38fc4     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
38fc8     2B ED 03 F6 |                 mov     pa, cache_end_p
38fcc                 | .loop
38fcc     61 01 4C FC |                 wrbyte  #0, ptra++
38fd0     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
38fd4     F4 FF 9F CD |         if_b    jmp     #.loop
38fd8                 |         
38fd8                 |         if EMUPAD_MAX_PLAYER > 0
38fd8                 |         end
38fd8                 | 
38fd8                 | 
38fd8     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
38fdc                 | .regloop
38fdc     00 EC 8F F9 |                 altd    pa
38fe0     00 00 04 F6 |                 mov     0-0, #0
38fe4     01 EC 07 F1 |                 add     pa, #1
38fe8     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
38fec     EC FF 9F 5D |         if_nz   jmp     #.regloop
38ff0                 | 
38ff0     E1 E1 61 FF 
38ff4     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
38ff8     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
38ffc     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
39000     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
39004                 | 
39004     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
39008                 | 
39008                 | '------------------------------------------------------------------------------
39008                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
39008                 | ' function.
39008                 | '------------------------------------------------------------------------------
39008                 | ' On entry:
39008                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
39008                 | '   hpar2 - index number of the target interface.
39008                 | ' On exit:
39008                 | '------------------------------------------------------------------------------
39008                 | hset_idle
39008     A8 99 02 F6 |                 mov     hctwait, _2ms_
3900c     EF 02 A0 FD |                 call    #poll_waitx
39010     D8 0A D0 FE |                 loc     ptra, #set_idle
39014     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
39018     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
3901c     A0 02 80 FD |                 jmp     #control_write
39020                 | 
39020                 | '------------------------------------------------------------------------------
39020                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
39020                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
39020                 | '------------------------------------------------------------------------------
39020                 | ' On entry:
39020                 | '   ep_addr_pid - device address and enpoint for the request.
39020                 | ' On exit:
39020                 | '   retval - transaction result.
39020                 | '------------------------------------------------------------------------------
39020                 | hset_kbdled_report
39020     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
39024     CC 0A D0 FE |                 loc     ptra, #set_report
39028     01 00 80 FF 
3902c     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
39030     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
39034     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
39038     27 EF 03 F6 |                 mov     pb, urx_buff_p
3903c     F7 77 42 FC |                 wrbyte  kb_led_states, pb
39040     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
39044                 | 
39044                 | '------------------------------------------------------------------------------
39044                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
39044                 | '------------------------------------------------------------------------------
39044                 | ' On entry:
39044                 | ' On exit:
39044                 | '------------------------------------------------------------------------------
39044                 | hget_kbd_in_report
39044     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
39048     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3904c     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
39050     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
39054     CF 02 A0 FD |                 call    #do_int_in
39058     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3905c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
39060                 | 
39060     00 90 0F F2 |                 cmp     hpar3, #0               wz
39064     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
39068                 | 
39068     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
3906c     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
39070     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
39074     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
39078                 | 
39078     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
3907c     18 00 B0 FD |                 call    #hkbd_compare
39080                 |         if EMUPAD_MAX_PLAYER > 0
39080                 |         end
39080                 | 
39080                 | .led_check
39080     3B 71 03 F6 |                 mov     htmp, kb_led_states
39084     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
39088     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
3908c     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
39090     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
39094     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
39098                 | 
39098                 | '------------------------------------------------------------------------------
39098                 | ' Compare current and previous keyboard data buffers for keypress changes.
39098                 | '------------------------------------------------------------------------------
39098                 | hkbd_compare
39098     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3909c     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
390a0     61 73 07 FB |                 rdlong  htmp1, ptra++
390a4     E1 75 07 FB |                 rdlong  htmp2, ptrb++
390a8     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
390ac     61 73 07 FB |                 rdlong  htmp1, ptra++
390b0     E1 75 07 FB |                 rdlong  htmp2, ptrb++
390b4     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
390b8     2D 00 64 AD |         if_z    ret
390bc                 | 
390bc     B4 13 D0 FE |                 loc     ptra, #hkbd_report
390c0                 | 
390c0                 |                 ' Handle modifiers
390c0     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
390c4     00 87 C7 FA |                 rdbyte  hr1, ptra
390c8     C7 87 43 F9 |                 rolword hr1,hpar2,#0
390cc     63 86 63 FD |                 mergew  hr1
390d0     08 EC 07 F6 |                 mov     pa,#8
390d4                 | .modloop
390d4     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
390d8     E8 8C 07 F6 |                 mov     hpar1,#$E8
390dc     F6 8D 83 F1 |                 sub     hpar1,pa
390e0     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
390e4     FB ED 6F FB |                 djnz    pa,#.modloop
390e8                 | 
390e8     6F E0 75 FD | .release        modc    _set    wc
390ec                 |                 'alts    hdev_port, #hid_report_p
390ec                 |                 'mov     ptra, hid_report_p
390ec     02 F0 07 F1 |                 add     ptra, #2
390f0     06 EC 07 F6 |                 mov     pa, #6
390f4     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
390f8     20 00 90 AD |         if_z    jmp     #.rl3
390fc     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
39100     02 F2 07 F1 |                 add     ptrb, #2
39104     06 EE 07 F6 |                 mov     pb, #6
39108     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
3910c     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
39110     08 00 90 AD |         if_z    jmp     #.rl3
39114     FC EF 6F FB |                 djnz    pb, #.rl2
39118     68 00 B0 FD |                 call    #hkbd_translate
3911c     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
39120                 | 
39120     00 90 07 F6 |                 mov     hpar3, #0
39124     1F 90 27 F4 |                 bith    hpar3, #31
39128                 | 
39128     6F 00 74 FD | .press          modc    _clr    wc
3912c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
39130     02 F0 07 F1 |                 add     ptra, #2
39134     06 EC 07 F6 |                 mov     pa, #6
39138     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
3913c     20 00 90 AD |         if_z    jmp     #.pl3
39140     30 13 F0 FE |                 loc     ptrb, #hkbd_report
39144     02 F2 07 F1 |                 add     ptrb, #2
39148     06 EE 07 F6 |                 mov     pb, #6
3914c     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
39150     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
39154     08 00 90 AD |         if_z    jmp     #.pl3
39158     FC EF 6F FB |                 djnz    pb, #.pl2
3915c     24 00 B0 FD |                 call    #hkbd_translate
39160     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
39164                 | 
39164     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
39168     08 13 F0 FE |                 loc     ptrb, #hkbd_report
3916c     28 02 64 FD |                 setq #1
39170     61 73 07 FB |                 rdlong  htmp1, ptra++
39174     28 02 64 FD |                 setq #1
39178     E1 73 67 FC |                 wrlong  htmp1, ptrb++
3917c     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
39180                 | 
39180     2D 00 64 FD |                 ret
39184                 | 
39184                 | '------------------------------------------------------------------------------
39184                 | ' Translate keyboard scancode to ASCII
39184                 | '------------------------------------------------------------------------------
39184                 | ' On entry:
39184                 | '   hpar1 - scancode
39184                 | '   hpar2 - key modifiers state
39184                 | '       c - pressed (0) or released (1) flag
39184                 | ' On exit:
39184                 | '   hpar1 - bit     31 = 0 pressed, 1 released
39184                 | '               30..17 = unused
39184                 | '                   18 = scroll-lock state 
39184                 | '                   17 = caps-lock state
39184                 | '                   16 = num-lock state 
39184                 | '                15..8 = key modifiers state
39184                 | '                 7..0 = scancode
39184                 | '------------------------------------------------------------------------------
39184                 | hkbd_translate
39184     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
39188     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
3918c     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
39190     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
39194     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
39198     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
3919c                 | 
3919c                 |         if EMUPAD_MAX_PLAYER > 0
3919c                 | 
3919c                 |         if EMUPAD_BT0_BIT >= 0
3919c                 |         end
3919c                 |         if EMUPAD_BT1_BIT >= 0
3919c                 |         end
3919c                 |         if EMUPAD_BT2_BIT >= 0
3919c                 |         end
3919c                 |         if EMUPAD_BT3_BIT >= 0
3919c                 |         end
3919c                 |         if EMUPAD_BT4_BIT >= 0
3919c                 |         end
3919c                 |         if EMUPAD_BT5_BIT >= 0
3919c                 |         end
3919c                 |         if EMUPAD_BT6_BIT >= 0
3919c                 |         end
3919c                 |         if EMUPAD_BT7_BIT >= 0
3919c                 |         end
3919c                 |         if EMUPAD_BT8_BIT >= 0
3919c                 |         end
3919c                 |         if EMUPAD_BT9_BIT >= 0
3919c                 |         end
3919c                 | 
3919c                 |         end
3919c     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
391a0     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
391a4     1F 8C 47 F4 |                 bitc    hpar1, #31
391a8                 |         if KEYQUEUE_SIZE > 0
391a8     C4 09 B0 FE |                 loc pb,#keyq_head
391ac     F7 71 E3 FA |                 rdword htmp,pb
391b0     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
391b4     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
391b8     B8 75 03 F6 |                 mov htmp2,htmp
391bc     04 74 07 FA |                 mul htmp2,#4
391c0     F7 75 03 F1 |                 add htmp2,pb
391c4     02 74 07 F1 |                 add htmp2,#2
391c8     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
391cc     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
391d0     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
391d4     F7 71 43 5C |         if_nz   wrbyte htmp,pb
391d8                 |         end
391d8     2D 00 7C FD |                 ret wcz
391dc                 | 
391dc                 | if HAVE_MOUSE
391dc                 | '------------------------------------------------------------------------------
391dc                 | ' Execute an IN interrupt transaction to poll for mouse activity.
391dc                 | '------------------------------------------------------------------------------
391dc                 | ' On entry:
391dc                 | ' On exit:
391dc                 | '------------------------------------------------------------------------------
391dc                 | hget_mouse_in_report
391dc     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
391e0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
391e4     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
391e8     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
391ec     CF 02 A0 FD |                 call    #do_int_in
391f0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
391f4     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
391f8                 | 
391f8     00 90 0F F2 |                 cmp     hpar3, #0               wz
391fc     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
39200                 | 
39200     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
39204     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
39208     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
3920c     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
39210                 | 
39210     27 F1 03 F6 |                 mov     ptra, urx_buff_p
39214     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
39218     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
3921c     01 90 87 31 |         if_ae   sub     hpar3, #1
39220                 | 
39220     40 09 90 FE |                 loc     pa, #mouse_limits
39224     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
39228                 | 
39228                 |                 ' load xacc,yacc,zacc
39228     28 04 64 FD |                 setq    #3-1
3922c     80 87 07 FB |                 rdlong  hr1,ptrb
39230                 |                 ' load limits and outptr
39230     28 04 64 FD |                 setq    #3-1
39234     F6 73 03 FB |                 rdlong  htmp1,pa
39238                 | 
39238     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
3923c     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
39240     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
39244     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
39248     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
3924c     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
39250     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
39254     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
39258                 |               
39258                 | 
39258     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
3925c     07 70 67 F7 |                 signx   htmp, #7
39260     B8 87 03 F1 |                 add     hr1,htmp
39264     00 72 0F F2 |                 cmp     htmp1,#0 wz
39268     B9 87 63 53 |         if_ne   fles    hr1,htmp1
3926c     00 86 47 53 |         if_ne   fges    hr1,#0
39270                 | 
39270     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
39274     07 70 67 F7 |                 signx   htmp, #7
39278     B8 89 03 F1 |                 add     hr2,htmp
3927c     00 74 0F F2 |                 cmp     htmp2,#0 wz
39280     BA 89 63 53 |         if_ne   fles    hr2,htmp2
39284     00 88 47 53 |         if_ne   fges    hr2,#0
39288                 |                 
39288                 | 
39288     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
3928c     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
39290     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
39294     B8 8B 03 A1 |         if_z    add     hr3,htmp
39298                 | 
39298     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
3929c     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
392a0                 | 
392a0                 |                 ' write back accumulators
392a0     28 04 64 FD |                 setq    #3-1
392a4     80 87 67 FC |                 wrlong  hr1,ptrb
392a8                 |                 ' if outptr set, write X/Y words
392a8     00 76 0F F2 |                 cmp htmp3,#0                    wz
392ac     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
392b0     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
392b4     2D 00 64 FD |                 ret
392b8                 | end
392b8                 | 
392b8                 | '------------------------------------------------------------------------------
392b8                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
392b8                 | '------------------------------------------------------------------------------
392b8                 | ' On entry:
392b8                 | ' On exit:
392b8                 | '------------------------------------------------------------------------------
392b8                 | if _HAVE_GAMEPAD
392b8                 | hget_gp_in_report
392b8     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
392bc     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
392c0                 | 
392c0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
392c4     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
392c8     00 90 E3 F8 |                 getbyte hpar3
392cc     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
392d0     CF 02 A0 FD |                 call    #do_int_in
392d4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
392d8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
392dc                 | 
392dc     00 90 0F F2 |                 cmp     hpar3, #0               wz
392e0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
392e4                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
392e4                 | 
392e4     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
392e8     00 70 E3 F8 |                 getbyte htmp                            ' |
392ec     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
392f0     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
392f4     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
392f8     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
392fc     B8 01 C0 F8 |                 setbyte htmp                            ' |
39300                 | 
39300                 | ' Note: the following code compares the current and previous reports
39300                 | ' and process the data if there are changes to ease the debug output.
39300                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
39300                 | ' gpPreReport buffer.
39300                 | 
39300                 |                 ' ----- start of block to remove
39300                 |                 {
39300                 |                 }
39300                 |                 ' ----- end of block to remove
39300     F4 04 90 FE |                 loc pa,#hpad_translate
39304     2A EC 63 FD |                 push pa
39308                 | 
39308                 |                 ' FALL THROUGH !!!!
39308                 | 
39308                 | '------------------------------------------------------------------------------
39308                 | ' Decode controller report
39308                 | '------------------------------------------------------------------------------
39308                 | hid_decode
39308                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
39308     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
3930c     00 04 00 FF 
39310     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
39314                 | 
39314     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
39318                 | 
39318     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3931c     00 2A E3 F8 |                 getbyte hidr_type
39320     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
39324     34 02 90 AD |         if_z    jmp     #hpad_xinput
39328     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3932c     1C 03 90 AD |         if_z    jmp     #hpad_ps3
39330     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
39334     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
39338     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
3933c                 |                 
3933c                 | 
3933c                 | '------------------------------------------------------------------------------
3933c                 | ' Handle HID controller (or mouse now
3933c                 | ' On entry:
3933c                 | '   ptrb - controller report
3933c                 | '------------------------------------------------------------------------------
3933c                 | hpad_hid
3933c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
39340     F7 F1 03 F6 |                 mov     ptra, pb
39344     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
39348     00 EC 03 F6 |                 mov     pa, 0-0
3934c                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3934c     19 2A 3B FF 
39350     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
39354                 | 
39354                 | .next
39354     00 EC 5F F2 |                 cmps    pa, #0      wcz
39358     2D 00 7C ED |         if_be   ret     wcz
3935c                 | 
3935c     61 8D C7 FA |                 rdbyte  hpar1, ptra++
39360     01 EC 87 F1 |                 sub     pa, #1
39364     00 8E 07 F6 |                 mov     hpar2, #0
39368                 | 
39368     C6 71 03 F6 |                 mov     htmp, hpar1
3936c     03 70 07 F5 |                 and     htmp, #$03
39370     01 70 0F F2 |                 cmp     htmp, #1    wz
39374     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
39378     07 8E 67 A7 |         if_z    signx   hpar2,#7
3937c     01 EC 87 A1 |         if_z    sub     pa, #1
39380     02 70 0F F2 |                 cmp     htmp, #2    wz
39384     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
39388     0F 8E 67 A7 |         if_z    signx   hpar2,#15
3938c     02 EC 87 A1 |         if_z    sub     pa, #2
39390     03 70 0F F2 |                 cmp     htmp, #3    wz
39394     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
39398     04 EC 87 A1 |         if_z    sub     pa, #4
3939c                 | 
3939c     FC 8C 07 F5 |                 and     hpar1, #$FC
393a0                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
393a0                 | 
393a0     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
393a4     0C 01 90 AD |         if_z    jmp     #.report_id
393a8     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
393ac     24 01 90 AD |         if_z    jmp     #.usage_page
393b0     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
393b4     2C 01 90 AD |         if_z    jmp     #.usage
393b8     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
393bc     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
393c0     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
393c4     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
393c8     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
393cc     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
393d0     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
393d4     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
393d8     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
393dc     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
393e0     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
393e4     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
393e8     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
393ec     64 FF 9F 5D |         if_nz   jmp     #.next
393f0                 | 
393f0     D8 1D A7 FB |                 tjf     hidr_state,#.next
393f4                 | 
393f4     03 8E 07 F5 |                 and     hpar2, #$03
393f8     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
393fc     18 00 90 5D |         if_nz   jmp     #.skip
39400                 | 
39400     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
39404     20 00 90 AD |         if_z    jmp     #.axes
39408     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
3940c     5C 00 90 AD |         if_z    jmp     #.hats
39410     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
39414     70 00 90 AD |         if_z    jmp     #.buttons
39418                 | .skip
39418     8F 71 03 F6 |                 mov     htmp, hidr_size
3941c     90 71 03 FA |                 mul     htmp, hidr_count
39420     B8 23 03 F1 |                 add     hidr_offset, htmp
39424     2C FF 9F FD |                 jmp     #.next
39428                 | .axes
39428                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
39428     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
3942c     90 87 03 F6 |                 mov     hr1, hidr_count
39430                 | .l1
39430     91 8D 03 F6 |                 mov     hpar1, hidr_offset
39434     8F 8F 03 F6 |                 mov     hpar2, hidr_size
39438     04 03 B0 FD |                 call    #hpad_getbits
3943c     64 03 B0 FD |                 call    #hpad_normalize
39440     06 84 1F F2 |                 cmp     hr0, #6         wcz
39444     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
39448     00 88 43 C8 |         if_b    getnib  hr2
3944c     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
39450     5F 01 20 C9 |         if_b    setword retval
39454     01 84 07 C1 |         if_b    add     hr0, #1
39458     8F 23 03 F1 |                 add     hidr_offset, hidr_size
3945c     F4 87 6F FB |                 djnz    hr1, #.l1
39460                 | 
39460     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
39464     01 1C 07 F6 |                 mov     hidr_state, #1
39468     E8 FE 9F FD |                 jmp     #.next
3946c                 | .hats
3946c                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3946c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
39470     8F 8F 03 F6 |                 mov     hpar2, hidr_size
39474     C8 02 B0 FD |                 call    #hpad_getbits
39478     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
3947c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
39480     01 1C 07 F6 |                 mov     hidr_state, #1
39484     90 FF 9F FD |                 jmp     #.skip
39488                 | .buttons
39488                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
39488     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3948c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
39490     90 8F 03 FA |                 mul     hpar2, hidr_count
39494     A8 02 B0 FD |                 call    #hpad_getbits
39498     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
3949c     B8 BF 62 F0 |                 shl     retval, htmp
394a0     5F 17 43 F5 |                 or      hidr_buttons, retval
394a4     90 71 03 F1 |                 add     htmp, hidr_count
394a8     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
394ac     01 1C 07 F6 |                 mov     hidr_state, #1
394b0     64 FF 9F FD |                 jmp     #.skip
394b4                 | .report_id
394b4     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
394b8     2D 00 7C 5D |         if_nz   ret     wcz
394bc     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
394c0     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
394c4     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
394c8     01 1C 67 56 |         if_nz   neg     hidr_state,#1
394cc     01 F2 87 51 |         if_nz   sub     ptrb,#1
394d0     80 FE 9F FD |                 jmp     #.next
394d4                 | .usage_page
394d4     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
394d8     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
394dc     04 1C 07 A6 |         if_z    mov     hidr_state, #4
394e0     70 FE 9F FD |                 jmp     #.next
394e4                 | .usage
394e4     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
394e8     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
394ec     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
394f0     01 1C 07 A6 |         if_z    mov     hidr_state, #1
394f4     5C FE 9F AD |         if_z    jmp     #.next
394f8     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
394fc     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
39500     01 1C 07 A6 |         if_z    mov     hidr_state, #1
39504     4C FE 9F AD |         if_z    jmp     #.next
39508     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
3950c     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
39510     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
39514     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
39518     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
3951c     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
39520     10 00 90 AD |         if_z    jmp     #.usage_axis
39524     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
39528     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
3952c     03 1C 07 A6 |         if_z    mov     hidr_state, #3
39530     20 FE 9F FD |                 jmp     #.next
39534                 | .usage_axis
39534     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
39538     18 FE 9F CD |         if_b    jmp     #.next
3953c     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
39540     C7 01 00 F8 |                 setnib  hpar2
39544                 | 
39544     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
39548     C7 8F C3 F9 |                 decod   hpar2
3954c     C7 0F 43 F5 |                 or      hidr_flags, hpar2
39550                 | 
39550     01 24 07 F1 |                 add     hidr_usage_idx, #1
39554     02 1C 07 F6 |                 mov     hidr_state, #2
39558     F8 FD 9F FD |                 jmp     #.next
3955c                 | 
3955c                 | '------------------------------------------------------------------------------
3955c                 | ' Handle XInput controller
3955c                 | ' On entry:
3955c                 | '   ptrb - controller report
3955c                 | '------------------------------------------------------------------------------
3955c                 | '   Default implementation translates the report to a pseudo-defacto hid
3955c                 | '   standard and jumps to hpad_translate for actions.
3955c                 | '   Implementors may take specific actions for this kind of controller.
3955c                 | '------------------------------------------------------------------------------
3955c                 | hpad_xinput
3955c     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
39560     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
39564     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
39568     14 70 0F F2 |                 cmp     htmp, #$14      wz
3956c     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
39570                 | 
39570                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
39570                 | 
39570     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
39574     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
39578                 | 
39578     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3957c     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
39580     5F BF 22 F6 |                 not     retval
39584     5F 11 2B F9 |                 setword hidr_axis, retval, #1
39588     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3958c     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
39590     5F BF 22 F6 |                 not     retval
39594     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
39598                 | 
39598     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3959c     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
395a0     C0 BE 1E F2 |                 cmp     retval, #192    wcz
395a4     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
395a8     F8 01 B0 FD |                 call    #hpad_normalize
395ac     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
395b0     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
395b4     C0 BE 1E F2 |                 cmp     retval, #192    wcz
395b8     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
395bc     E4 01 B0 FD |                 call    #hpad_normalize
395c0     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
395c4                 | 
395c4     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
395c8     81 BF E6 FA |                 rdword  retval, ptrb[1]
395cc     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
395d0     00 16 47 F4 |                 bitc    hidr_buttons, #0
395d4     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
395d8     01 16 47 F4 |                 bitc    hidr_buttons, #1
395dc     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
395e0     02 16 47 F4 |                 bitc    hidr_buttons, #2
395e4     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
395e8     03 16 47 F4 |                 bitc    hidr_buttons, #3
395ec     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
395f0     04 16 47 F4 |                 bitc    hidr_buttons, #4
395f4     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
395f8     05 16 47 F4 |                 bitc    hidr_buttons, #5
395fc     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
39600     08 16 47 F4 |                 bitc    hidr_buttons, #8
39604     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
39608     09 16 47 F4 |                 bitc    hidr_buttons, #9
3960c     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
39610     0A 16 47 F4 |                 bitc    hidr_buttons, #10
39614     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
39618     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3961c     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
39620     0C 16 47 F4 |                 bitc    hidr_buttons, #12
39624                 | 
39624     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
39628     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3962c     7A BB 7A FF 
39630     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
39634     F9 FF 7F FF 
39638     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
3963c     B9 71 5F F9 |                 altgn   htmp, #htmp1
39640     00 70 43 F8 |                 getnib  htmp
39644     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
39648                 | 
39648     AC 01 90 FD |                 jmp     #hpad_translate
3964c                 | 
3964c                 | '------------------------------------------------------------------------------
3964c                 | ' Handle PS3 controller
3964c                 | ' On entry:
3964c                 | '   ptrb - controller report
3964c                 | '------------------------------------------------------------------------------
3964c                 | '   Default implementation translates the report to a pseudo-defacto hid
3964c                 | '   standard and jumps to hpad_translate for actions.
3964c                 | '   Implementors may take specific actions for this kind of controller.
3964c                 | '------------------------------------------------------------------------------
3964c                 | hpad_ps3
3964c     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
39650     01 70 0F F2 |                 cmp     htmp, #$01      wz
39654     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
39658                 | 
39658                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
39658                 | 
39658     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3965c     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
39660     40 01 B0 FD |                 call    #hpad_normalize
39664     5F 11 23 F9 |                 setword hidr_axis, retval, #0
39668     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
3966c     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
39670     30 01 B0 FD |                 call    #hpad_normalize
39674     5F 11 2B F9 |                 setword hidr_axis, retval, #1
39678     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
3967c     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
39680     20 01 B0 FD |                 call    #hpad_normalize
39684     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
39688     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
3968c     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
39690     10 01 B0 FD |                 call    #hpad_normalize
39694     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
39698     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
3969c     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
396a0                 | 
396a0     08 8C 07 F6 |                 mov     hpar1, #8
396a4     13 8E 07 F6 |                 mov     hpar2, #19
396a8     94 00 B0 FD |                 call    #hpad_getbits
396ac                 | 
396ac     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
396b0     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
396b4     00 16 47 F4 |                 bitc    hidr_buttons, #0
396b8     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
396bc     01 16 47 F4 |                 bitc    hidr_buttons, #1
396c0     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
396c4     02 16 47 F4 |                 bitc    hidr_buttons, #2
396c8     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
396cc     03 16 47 F4 |                 bitc    hidr_buttons, #3
396d0     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
396d4     04 16 47 F4 |                 bitc    hidr_buttons, #4
396d8     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
396dc     05 16 47 F4 |                 bitc    hidr_buttons, #5
396e0     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
396e4     06 16 47 F4 |                 bitc    hidr_buttons, #6
396e8     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
396ec     07 16 47 F4 |                 bitc    hidr_buttons, #7
396f0     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
396f4     08 16 47 F4 |                 bitc    hidr_buttons, #8
396f8     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
396fc     09 16 47 F4 |                 bitc    hidr_buttons, #9
39700     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
39704     0A 16 47 F4 |                 bitc    hidr_buttons, #10
39708     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3970c     0B 16 47 F4 |                 bitc    hidr_buttons, #11
39710     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
39714     0C 16 47 F4 |                 bitc    hidr_buttons, #12
39718                 | 
39718     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3971c     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
39720     09 FA 79 FF 
39724     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
39728     FF FA 7F FF 
3972c     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
39730     B9 71 5F F9 |                 altgn   htmp, #htmp1
39734     00 70 43 F8 |                 getnib  htmp
39738     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3973c                 | 
3973c     B8 00 90 FD |                 jmp     #hpad_translate
39740                 | 
39740                 | '------------------------------------------------------------------------------
39740                 | ' Read bits from report data buffer
39740                 | '------------------------------------------------------------------------------
39740                 | ' On entry:
39740                 | '   PTRB - report buffer
39740                 | '   hpar1 - start bit
39740                 | '   hpar2 - number of bits
39740                 | ' On exit:
39740                 | '   retval - bits
39740                 | '------------------------------------------------------------------------------
39740                 | hpad_getbits
39740     C6 71 03 F6 |                 mov     htmp, hpar1
39744     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
39748     F9 71 03 F1 |                 add     htmp, ptrb
3974c     B8 BF 02 FB |                 rdlong  retval, htmp
39750                 | 
39750     C6 73 03 F6 |                 mov     htmp1, hpar1
39754     07 72 07 F5 |                 and     htmp1, #$07     ' shift
39758     B9 BF 42 F0 |                 shr     retval, htmp1
3975c                 | 
3975c     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
39760     10 00 90 1D |         if_a    jmp     #.l1
39764                 | 
39764     C7 8F C3 F9 |                 decod   hpar2
39768     01 8E 87 F1 |                 sub     hpar2, #1
3976c     C7 BF 02 F5 |                 and     retval, hpar2
39770     2D 00 64 FD |                 ret
39774                 | .l1
39774     FF 7F 00 FF 
39778     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3977c     03 70 07 F1 |                 add     htmp, #3
39780     B8 75 03 FB |                 rdlong  htmp2, htmp
39784     18 8E 87 F1 |                 sub     hpar2, #24
39788     C7 8F C3 F9 |                 decod   hpar2
3978c     01 8E 87 F1 |                 sub     hpar2, #1
39790     B9 75 43 F0 |                 shr     htmp2, htmp1
39794     C7 75 03 F5 |                 and     htmp2, hpar2
39798     18 74 67 F0 |                 shl     htmp2, #24
3979c     BA BF 42 F5 |                 or      retval, htmp2
397a0     2D 00 64 FD |                 ret
397a4                 | 
397a4                 | '------------------------------------------------------------------------------
397a4                 | ' Normalize value to signed word (-32768 / 32767)
397a4                 | '------------------------------------------------------------------------------
397a4                 | ' On entry:
397a4                 | '   retval - value to normalize
397a4                 | '   hidr_lminmax - min (word 1) max (word 0) value range
397a4                 | '   - or -
397a4                 | '   hidr_pminmax - min (word 1) max (word 0) value range
397a4                 | '   hidr_size - value bits length
397a4                 | ' On exit:
397a4                 | '   retval - normalized value
397a4                 | '------------------------------------------------------------------------------
397a4                 | hpad_normalize
397a4     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
397a8     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
397ac     2D 00 64 AD |         if_z    ret
397b0     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
397b4     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
397b8     0F 72 77 F7 |                 signx   htmp1, #15      wc
397bc     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
397c0     00 BE 66 C7 |         if_c    signx   retval, #0-0
397c4     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
397c8     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
397cc     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
397d0     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
397d4     B8 71 53 F6 |                 abs     htmp            wc
397d8     1F BE 0E F4 |                 testb   retval, #31     wz
397dc     5F BF 42 F6 |                 abs     retval
397e0     B8 BF 12 FD |                 qdiv    retval, htmp
397e4     18 BE 62 FD |                 getqx   retval
397e8     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
397ec     C0 FF 7F FF 
397f0     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
397f4     2D 00 64 FD |                 ret
397f8                 | 
397f8                 | '------------------------------------------------------------------------------
397f8                 | ' Perform controller actions
397f8                 | ' On entry:
397f8                 | '    hidr_id        report id
397f8                 | '    hidr_axis      axis value (signed word, 2 axes per long)
397f8                 | '                      X = hidr_axis+0, #0
397f8                 | '                      Y = hidr_axis+0, #1
397f8                 | '                      Z = hidr_axis+1, #0
397f8                 | '                     RX = hidr_axis+1, #1
397f8                 | '                     RY = hidr_axis+2, #0
397f8                 | '                     RZ = hidr_axis+2, #1
397f8                 | '    hidr_buttons   buttons state (bits 0 to 31)
397f8                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
397f8                 | '
397f8                 | '                     -------3 -------2 -------1 -------0 byte
397f8                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
397f8                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
397f8                 | '                                zyx||| |||||||| ++++++++ n. buttons
397f8                 | '                                |||||| ||||++++--------- n. axes
397f8                 | '                                |||||| ++++------------- n. hats
397f8                 | '                                ++++++------------------ valid axes
397f8                 | '------------------------------------------------------------------------------
397f8                 | hpad_translate
397f8                 | 
397f8                 | 
397f8                 |         if HAVE_HIDPAD
397f8     84 0C F0 FE |                 loc     ptrb,#hidpad_report
397fc     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
39800     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
39804     01 70 E7 F2 |                 cmpsub  htmp,#1
39808     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3980c     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
39810     2D 00 7C 3D |         if_ae   ret     wcz
39814     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
39818     B8 F3 03 F1 |                 add     ptrb,htmp
3981c     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
39820     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
39824     28 0C 64 FD |                 setq    #7-1
39828     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3982c                 |         end
3982c                 | 
3982c                 | 
3982c                 |         if EMUPAD_MAX_PLAYER > 0
3982c                 | .emupad_no_hat
3982c                 |         if EMUPAD_BT0_BIT >= 0
3982c                 |         end
3982c                 |         if EMUPAD_BT1_BIT >= 0
3982c                 |         end
3982c                 |         if EMUPAD_BT2_BIT >= 0
3982c                 |         end
3982c                 |         if EMUPAD_BT3_BIT >= 0
3982c                 |         end
3982c                 |         if EMUPAD_BT4_BIT >= 0
3982c                 |         end
3982c                 |         if EMUPAD_BT5_BIT >= 0
3982c                 |         end
3982c                 |         if EMUPAD_BT6_BIT >= 0
3982c                 |         end
3982c                 |         if EMUPAD_BT7_BIT >= 0
3982c                 |         end
3982c                 |         if EMUPAD_BT8_BIT >= 0
3982c                 |         end
3982c                 |         if EMUPAD_BT9_BIT >= 0
3982c                 |         end
3982c                 | .emupad_slot_over
3982c                 |         end
3982c                 | 
3982c                 |         if 0
3982c                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3982c                 | 
3982c                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3982c                 | 
3982c                 |         end
3982c     2D 00 64 FD |                 ret
39830                 | end
39830                 | 
39830                 | if EMUPAD_MAX_PLAYER > 0
39830                 | '------------------------------------------------------------------------------
39830                 | ' Clear EmuPad state
39830                 | '------------------------------------------------------------------------------
39830                 | emupad_reset
39830                 | 
39830                 | '------------------------------------------------------------------------------
39830                 | ' Get EmuPad Player number for current device (into retval)
39830                 | ' Z flag is also set if current device is valid
39830                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
39830                 | '------------------------------------------------------------------------------
39830                 | emupad_getnum
39830                 | .loop
39830                 | '------------------------------------------------------------------------------
39830                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
39830                 | '------------------------------------------------------------------------------
39830                 | emupad_discon
39830                 | .loop         
39830                 |         
39830                 |         ' FALL THROUGH!!!
39830                 | 
39830                 | '------------------------------------------------------------------------------
39830                 | ' Update EmuPad reports (all of them...)
39830                 | '------------------------------------------------------------------------------
39830                 | emupad_write_reports
39830                 | .devloop
39830                 | 
39830                 | end
39830                 | 
39830                 | 
39830                 | '------------------------------------------------------------------------------
39830                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
39830                 | '------------------------------------------------------------------------------
39830                 | ' On entry:
39830                 | ' On exit:
39830                 | '------------------------------------------------------------------------------
39830                 | hget_hub_status
39830     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
39834     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
39838     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
3983c     01 90 2F F9 |                 setword hpar3, #1, #1
39840     CF 02 A0 FD |                 call    #do_int_in
39844     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39848     0C 00 90 AD |         if_z    jmp     #.data
3984c     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
39850     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
39854     2D 00 64 FD |                 ret
39858                 | .data
39858     00 90 0F F2 |                 cmp     hpar3, #0               wz
3985c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
39860                 | 
39860     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
39864     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
39868     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3986c     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
39870                 |                 debug(ubin_long(hub_status_chg))
39870                 | 
39870     01 5A 06 F6 |                 mov     hdev_port, #1
39874                 | .loop
39874     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
39878     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3987c     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
39880     F0 FF 9F 3D |         if_nc   jmp     #.loop
39884     2D 00 64 FD |                 ret
39888                 | 
39888                 | hub_port_handler
39888     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3988c     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
39890     27 EF 03 F6 |                 mov     pb, urx_buff_p
39894     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39898     55 02 A0 FD |                 call    #control_read
3989c     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
398a0                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
398a0                 | 
398a0     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
398a4     50 01 90 5D |         if_x0   jmp     #.other
398a8     68 02 D0 FE |                 loc     ptra, #clr_port_feat
398ac     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
398b0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
398b4     A0 02 A0 FD |                 call    #control_write
398b8     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
398bc     7C 01 90 5D |         if_x0   jmp     #.disconnect
398c0     B0 99 02 F6 |                 mov     hctwait, _100ms_
398c4     EF 02 A0 FD |                 call    #poll_waitx
398c8                 | 
398c8     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
398cc     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
398d0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
398d4     A0 02 A0 FD |                 call    #control_write
398d8                 | 
398d8     02 76 07 F6 |                 mov     htmp3, #2
398dc                 | .wait_reset
398dc     AC 99 02 F6 |                 mov     hctwait, _8ms_
398e0     EF 02 A0 FD |                 call    #poll_waitx
398e4     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
398e8     27 EF 03 F6 |                 mov     pb, urx_buff_p
398ec     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
398f0     55 02 A0 FD |                 call    #control_read
398f4     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
398f8     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
398fc     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
39900                 | 
39900     10 02 D0 FE |                 loc     ptra, #clr_port_feat
39904     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
39908     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3990c     A0 02 A0 FD |                 call    #control_write
39910                 | 
39910     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
39914                 | .wait_recover
39914     A7 99 02 F6 |                 mov     hctwait, _1ms_
39918     EF 02 A0 FD |                 call    #poll_waitx
3991c     FD 71 6F FB |                 djnz    htmp,#.wait_recover
39920                 | 
39920     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
39924     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
39928     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3992c                 | 
3992c     00 08 00 FF 
39930     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
39934     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
39938     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3993c     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
39940     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
39944     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39948     48 01 90 5D |         if_nz   jmp     #.done
3994c                 | .get_dev_desc
3994c     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
39950     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
39954     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
39958     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3995c     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
39960     01 71 57 FC |                 wrword  htmp, ptra[wValue]
39964     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
39968     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3996c     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
39970     AC 99 02 F6 |                 mov     hctwait, _8ms_
39974     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
39978     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3997c     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
39980     BE 00 A0 FD |                 call    #calc_crc5
39984     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
39988     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3998c     F7 AD C2 FA |                 rdbyte  total_data, pb
39990     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
39994     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
39998     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3999c     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
399a0     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
399a4     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
399a8                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
399a8     9F 99 02 F6 |                 mov     hctwait, _500us_
399ac     EF 02 A0 FD |                 call    #poll_waitx
399b0     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
399b4     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
399b8     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
399bc     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
399c0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
399c4     CC 00 90 5D |         if_nz   jmp     #.done
399c8     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
399cc     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
399d0     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
399d4     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
399d8     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
399dc     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
399e0     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
399e4     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
399e8     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
399ec     A4 00 90 CD |         if_b    jmp     #.done
399f0     6C F0 BF FD |                 call    #hparse_con_desc
399f4     9C 00 90 FD |                 jmp     #.done
399f8                 | 
399f8                 | .other
399f8     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
399fc     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
39a00     28 00 90 AD |         if_x1   jmp     #.reset_feature
39a04     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
39a08     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
39a0c     1C 00 90 AD |         if_x1   jmp     #.reset_feature
39a10     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
39a14     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
39a18     10 00 90 AD |         if_x1   jmp     #.reset_feature
39a1c     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
39a20     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
39a24     04 00 90 AD |         if_x1   jmp     #.reset_feature
39a28     68 00 90 FD |                 jmp     #.done
39a2c                 | .reset_feature
39a2c     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
39a30     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39a34     A0 02 A0 FD |                 call    #control_write
39a38     58 00 90 FD |                 jmp     #.done
39a3c                 | .disconnect
39a3c                 | 
39a3c     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
39a40     00 70 E3 F8 |                 getbyte htmp
39a44     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
39a48     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
39a4c     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
39a50     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
39a54     00 76 06 A6 |         if_z    mov     kb_led_states, #0
39a58     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
39a5c                 |         if EMUPAD_MAX_PLAYER > 0
39a5c                 |         end
39a5c                 |         if HAVE_MOUSE
39a5c     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
39a60     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
39a64     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
39a68                 |         end
39a68                 |         if HAVE_HIDPAD
39a68     14 0A F0 FE |                 loc ptrb,#hidpad_report
39a6c     2D 71 03 F6 |                 mov htmp,hdev_port
39a70     01 70 E7 F2 |                 cmpsub htmp,#1
39a74     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
39a78     B8 F3 03 F1 |                 add ptrb,htmp
39a7c     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
39a80     80 01 6C FC |                 wrlong #0,ptrb
39a84                 |         end
39a84                 | 
39a84     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
39a88     00 00 C4 F8 |                 setbyte #0
39a8c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
39a90     00 00 04 F6 |                 mov     0-0, #0
39a94                 | 
39a94                 | .done
39a94     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
39a98     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
39a9c     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
39aa0     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
39aa4     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
39aa8     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
39aac                 | 
39aac     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
39ab0     27 EF 03 F6 |                 mov     pb, urx_buff_p
39ab4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
39ab8     55 02 A0 FD |                 call    #control_read
39abc     00 69 06 FB |                 rdlong  hub_port_status, ptra
39ac0                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
39ac0     2D 00 64 FD |                 ret
39ac4                 | 
39ac4                 | '------------------------------------------------------------------------------
39ac4                 | ' Partially populated SETUP packets
39ac4                 | '------------------------------------------------------------------------------
39ac4     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
39ac5     06          |                 byte    REQ_GET_DESC
39ac6     00 01       |                 word    TYPE_DEVICE << 8
39ac8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
39aca     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39acc     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
39acd     06          |                 byte    REQ_GET_DESC
39ace     00 02       |                 word    TYPE_CONFIG << 8
39ad0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
39ad2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39ad4     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
39ad5     09          |                 byte    REQ_SET_CONFIG
39ad6     00 00       |                 word    0       ' Configuration value
39ad8     00 00       |                 word    0       ' Zero
39ada     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
39adc     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
39add     05          |                 byte    REQ_SET_ADDR
39ade     00 00       |                 word    0       ' Zero
39ae0     00 00       |                 word    0       ' Zero
39ae2     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
39ae4                 | '------------------------------------------------------------------------------
39ae4                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
39ae4                 | ' wValue field dictates which protocol should be used.
39ae4                 | '
39ae4                 | ' When initialized, all devices default to report protocol. However the host
39ae4                 | ' should not make any assumptions about the device state and should set the
39ae4                 | ' desired protocol whenever initializing a device.
39ae4                 | '------------------------------------------------------------------------------
39ae4     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
39ae5     0B          |                 byte    HID_SET_PROTO
39ae6     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
39ae8                 |                                                 ' (HID 1.11 Section 7.2.6).
39ae8     00 00       |                 word    0               ' Interface index number.
39aea     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
39aec                 | '------------------------------------------------------------------------------
39aec     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
39aed     0A          |                 byte    HID_SET_IDLE
39aee     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
39af0                 |                                         ' reporting until a change is detected in the report data
39af0                 | 
39af0                 |                                         ' (HID 1.11 Section 7.2.4).
39af0     00 00       |                 word    0       ' Interface index number.
39af2     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
39af4     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
39af5     09          |                 byte    HID_SET_REPORT
39af6     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
39af8                 |                                         ' (HID 1.11 Section 7.2.2).
39af8     00 00       |                 word    0       ' Interface index number.
39afa     00 00       |                 word    0       ' Size of the report, in bytes.
39afc     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
39afd     06          |                 byte    REQ_GET_DESC
39afe     00 22       |                 word    TYPE_REPORT << 8
39b00     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
39b02     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39b04                 | '------------------------------------------------------------------------------
39b04     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
39b05     06          |                 byte    REQ_GET_DESC
39b06     00 29       |                 word    TYPE_HUB << 8
39b08     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
39b0a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39b0c     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
39b0d     03          |                 byte    REQ_SET_FEATURE
39b0e     00 00       |                 word    0       ' port power
39b10     01 00       |                 word    1       ' Port index number (1+)
39b12     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39b14     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
39b15     01          |                 byte    REQ_CLEAR_FEATURE
39b16     00 00       |                 word    0       ' port power
39b18     01 00       |                 word    1       ' Port index number (1+)
39b1a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
39b1c     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
39b1d     00          |                 byte    REQ_GET_STATUS
39b1e     00 00       |                 word    0
39b20     01 00       |                 word    1       ' Port index number (1+)
39b22     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
39b24                 | '------------------------------------------------------------------------------
39b24                 | if _HAVE_GAMEPAD
39b24     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
39b28                 | ps3_command_buff
39b28     00 00 00 00 
39b2c     00          |                 byte    $00, $00, $00, $00, $00
39b2d     00 00 00 00 
39b31     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
39b32     FF 27 10 00 
39b36     32          |                 byte    $FF, $27, $10, $00, $32
39b37     FF 27 10 00 
39b3b     32          |                 byte    $FF, $27, $10, $00, $32
39b3c     FF 27 10 00 
39b40     32          |                 byte    $FF, $27, $10, $00, $32
39b41     FF 27 10 00 
39b45     32          |                 byte    $FF, $27, $10, $00, $32
39b46     00 00 00 00 
39b4a     00          |                 byte    $00, $00, $00, $00, $00
39b4b     00 00 00 00 
39b4f     00          |                 byte    $00, $00, $00, $00, $00
39b50     00 00 00 00 
39b54     00          |                 byte    $00, $00, $00, $00, $00
39b55     00 00 00    |                 byte    $00, $00, $00
39b58                 | '------------------------------------------------------------------------------
39b58     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
39b5b                 |                                         ' 0x01 All blinking
39b5b                 |                                         ' 0x02 1 flashes, then on
39b5b                 |                                         ' 0x03 2 flashes, then on
39b5b                 |                                         ' 0x04 3 flashes, then on
39b5b                 |                                         ' 0x05 4 flashes, then on
39b5b                 |                                         ' 0x06 1 on
39b5b                 |                                         ' 0x07 2 on
39b5b                 |                                         ' 0x08 3 on
39b5b                 |                                         ' 0x09 4 on
39b5b                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
39b5b                 |                                         ' 0x0B Blinking*
39b5b                 |                                         ' 0x0C Slow blinking*
39b5b                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
39b5b     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
39b5e     00          |                 byte    $00             ' Left rumble
39b5f     00          |                 byte    $00             ' Right rumble
39b60     00 00 00    |                 byte    $00, $00, $00
39b63     00          | end
39b64                 | alignl
39b64                 | 
39b64                 | if HAVE_MOUSE
39b64     00 00 00 00 
39b68     00 00 00 00 | mouse_limits long 0[2]
39b6c     00 00 00 00 | mouse_outptr long 0
39b70                 | end
39b70                 | 
39b70                 | if KEYQUEUE_SIZE > 0
39b70     00          | keyq_head byte 0
39b71     00          | keyq_tail byte 0
39b72     00 00 00 00 
      ...             
39d6e     00 00 00 00 
39d72     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
39d74                 | alignl
39d74                 | end
39d74                 | 
39d74                 | if EMUPAD_MAX_PLAYER > 0
39d74                 | emupad_rule_buffer
39d74                 | if EMUPAD_BUILTIN_RULES
39d74                 | file "padmap_builtin.dat"
39d74                 | end
39d74                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
39d74                 | '' Default rule directly follows!
39d74                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
39d74                 | end
39d74                 | 
39d74                 | '------------------------------------------------------------------------------
39d74                 | ' The USB data cache area gets zero-filled at every device disconnect
39d74                 | '------------------------------------------------------------------------------
39d74                 | usb_cache_start
39d74                 | 
39d74                 | ' HID descriptor and report buffers
39d74                 | if !!OVERLAP_MEMORY
39d74     00 00 00 00 
      ...             
3a46c     00 00 00 00 
3a470     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3a474                 | end
3a474     00 00 00 00 
3a478     00 00 00 00 | hkbd_report     byte    0[8]
3a47c     00 00 00 00 | hkbd_led_rep    byte    0
3a480                 | alignl
3a480                 | 
3a480                 | if HAVE_HIDPAD
3a480     00 00 00 00 
      ...             
3a53c     00 00 00 00 
3a540     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3a544                 | end
3a544                 | 
3a544                 | ' HUB descriptor
3a544     00          | hub_descr       byte    0   ' bDescLength
3a545     00          |                 byte    0   ' bDescriptorType
3a546     00          |                 byte    0   ' bNbrPorts
3a547     00 00       |                 word    0   ' wHubCharacteristics
3a549     00          |                 byte    0   ' bPwrOn2PwrGood
3a54a     00          |                 byte    0   ' bHubContrCurrent
3a54b     00          |                 byte    0   ' DeviceRemoveable
3a54c     00          |                 byte    0   ' PortPwrCtrlMask
3a54d                 | 
3a54d                 | usb_cache_end
3a54d                 | 
3a54d                 | if HAVE_MOUSE
3a54d     00 00 00 00 | mouse_xacc      long 0
3a551     00 00 00 00 | mouse_yacc      long 0
3a555     00 00 00 00 | mouse_zacc      long 0
3a559     00          | mouse_bstate    byte 0
3a55a     00          | mouse_lpending  byte 0
3a55b     00          | mouse_rpending  byte 0
3a55c     00          | mouse_mpending  byte 0
3a55d     00          | mouse_lock      byte 0
3a55e     00 00 00    |                 byte 0[3] ' padding
3a561                 | end
3a561                 | 
3a561     00 00 00 00 
      ...             
3a5d9     00 00 00 00 
3a5dd     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3a5e1     00 00 00 00 
3a5e5     00 00 00 00 
3a5e9     00 00 00 00 
3a5ed     00 00 00 00 
3a5f1     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3a5f3     00 00 00 00 
      ...             
3a6eb     00 00 00 00 
3a6ef     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3a6f3                 | 
3a6f3     00          | driver_cog      byte    0                       ' Current driver cog + 1
3a6f4                 | 	alignl
3a6f4                 | _audio096_spin2_dat_
3a6f4                 | 
3a6f4                 | audio       org     0
3a6f4                 | 
3a6f4     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3a6f8     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3a6fc     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3a700                 |  
3a700     01 EC 63 FD |             cogid   pa                   ' compute cogid
3a704     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3a708     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3a70c     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3a710                 | 
3a710     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3a714     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3a718     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3a71c     0F 24 06 FC |             wrpin   dac2,#right
3a720     0F 00 1E FC |             wxpin   #256,#right    
3a724     41 9C 64 FD |             dirh    #left addpins 1
3a728     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3a72c     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3a730     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3a734                 |             
3a734                 | '---------------------------------------------------------------------------------        
3a734                 | '----------------- The main loop -------------------------------------------------
3a734                 | '---------------------------------------------------------------------------------
3a734                 | 
3a734     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3a738     10 00 90 CD |       if_c  jmp     #loop1
3a73c                 |   
3a73c     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3a740     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3a744     D5 00 80 F1 |             sub     0-0,a40000000
3a748     FD 01 6E FB |             djnz    cn,#p402
3a74c                 |     
3a74c     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3a750     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
3a754     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3a758     01 00 06 C6 |     if_c    mov     cn,#1
3a75c     DA 02 3A F3 |             fle     ct,time3 wcz
3a760     02 00 06 C6 |     if_c    mov     cn,#2     
3a764     DB 02 3A F3 |             fle     ct,time4 wcz
3a768     03 00 06 C6 |     if_c    mov     cn,#3
3a76c     DC 02 3A F3 |             fle     ct,time5 wcz
3a770     04 00 06 C6 |     if_c    mov     cn,#4
3a774     DD 02 3A F3 |             fle     ct,time6 wcz
3a778     05 00 06 C6 |     if_c    mov     cn,#5
3a77c     DE 02 3A F3 |             fle     ct,time7 wcz
3a780     06 00 06 C6 |     if_c    mov     cn,#6
3a784     DF 02 3A F3 |             fle     ct,time8 wcz
3a788     07 00 06 C6 |     if_c    mov     cn,#7
3a78c                 | 
3a78c                 | 
3a78c                 | '----------------------------------------------------------------------------------
3a78c                 | '------------- Compute channel samples --------------------------------------------
3a78c                 | '----------------------------------------------------------------------------------
3a78c                 | 
3a78c                 | 
3a78c     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3a790     06 C0 65 F0 |             shl     channeladd,#6
3a794     E0 F0 03 F1 |             add     ptra,channeladd
3a798                 | 
3a798     28 16 64 FD |             setq    #11                        	' read parameters
3a79c     00 D7 05 FB |             rdlong  pointer0,ptra
3a7a0                 |     	    
3a7a0     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
3a7a4     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3a7a8     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
3a7ac     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
3a7b0     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
3a7b4     00 C4 0D F2 |             cmp     qq,#0 wz                         
3a7b8     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3a7bc     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3a7c0                 |             
3a7c0     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
3a7c4     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3a7c8     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3a7cc                 | 
3a7cc     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3a7d0     EC 08 3A F9 |             getword oldrs,sample0,#1
3a7d4     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3a7d8     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
3a7dc     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
3a7e0     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
3a7e4                 | 
3a7e4     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3a7e8     00 04 02 F6 |             mov     dt0,0-0    
3a7ec     D7 04 82 F1 |             sub     dt0,time0
3a7f0                 |             
3a7f0     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
3a7f4     FB 00 00 F1 |             add     0-0,afreq0  	
3a7f8                 |             
3a7f8                 | '---- envelopes
3a7f8                 |             
3a7f8     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3a7fc     20 00 00 AF 
3a800     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3a804     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3a808                 | 
3a808     FB 48 02 F6 |             mov     envs1,afreq0
3a80c     F5 48 02 FA |             mul     envs1,envspd0
3a810     24 E7 01 F1 |             add     envph0,envs1 
3a814                 | 
3a814     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3a818     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3a81c     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3a820     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3a824     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3a828     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3a82c     00 46 06 36 |     if_ge   mov     envlo,#0
3a830     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
3a834     16 E6 65 30 |     if_ge   shl     envph0,#22
3a838                 | 
3a838     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
3a83c     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3a840     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
3a844     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3a848     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
3a84c     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3a850     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3a854     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3a858     23 49 02 FA |             mul     envs1,envlo
3a85c     25 49 02 F1 |             add     envs1,envs2
3a860     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
3a864                 |             
3a864     1B DA 0D F4 | p410        testb   sstart0, #27 wz
3a868     1B C6 61 AD |     if_z    getrnd  spl
3a86c     58 00 90 AD |     if_z    jmp     #p406
3a870                 |  
3a870     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
3a874     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
3a878     08 D6 45 F0 |             shr     pointer0,#8
3a87c                 |          
3a87c     1F DA 0D F4 |             testb   sstart0,#31 wz            
3a880     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3a884     1C DA 0D F4 |             testb   sstart0,#28 wz            
3a888     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3a88c                 |         
3a88c     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
3a890     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
3a894     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
3a898                 |             
3a898     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3a89c     ED C4 01 F1 |             add     qq,sstart0            
3a8a0                 | 
3a8a0     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3a8a4     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3a8a8     1C 01 B0 1D |     if_gt   call    #cache_read
3a8ac                 |          
3a8ac     1F DA 0D F4 |             testb   sstart0,#31 wz 
3a8b0     08 C6 65 50 |     if_nz   shl     spl,#8
3a8b4     08 D6 65 50 |     if_nz   shl     pointer0,#8
3a8b8     07 D6 65 A0 |     if_z    shl     pointer0,#7
3a8bc     1C DA 0D F4 |             testb   sstart0,#28 wz            
3a8c0     01 D6 45 A0 |     if_z    shr     pointer0,#1    
3a8c4     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3a8c8                 | 
3a8c8                 | 
3a8c8     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
3a8cc     00 C6 01 F6 |             mov     spl,0-0
3a8d0     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
3a8d4     00 C6 01 F6 |             mov     spl,0-0
3a8d8                 | 
3a8d8     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
3a8dc     00 0A 02 F6 |             mov     ls0,0-0
3a8e0     20 00 00 FF 
3a8e4     00 C4 05 F6 |             mov     qq,##16384
3a8e8     FE C4 81 F1 |             sub     qq,apan0
3a8ec     E2 C6 31 FA |             scas    spl,qq
3a8f0     00 0C 02 F6 |             mov     rs0, 0-0
3a8f4                 | 
3a8f4     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3a8f8     06 11 02 F1 |             add     rs,rs0
3a8fc     03 0F 82 F1 |             sub     ls,oldls
3a900     05 0F 02 F1 |             add     ls,ls0
3a904                 |    
3a904     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3a908     05 D9 21 F9 |             setword sample0,ls0,#0
3a90c                 |             
3a90c     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3a910     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
3a914     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3a918                 |   '  if_z    mov     sample0,#0
3a918     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3a91c     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
3a920     04 00 00 AF 
3a924     00 B0 05 A1 |     if_z    add     time1,##2048
3a928     D8 B2 01 A6 |     if_z    mov     time2,time1
3a92c     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
3a930                 | 
3a930     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
3a934     00 D7 65 FC |             wrlong  pointer0,ptra
3a938     08 E7 65 FC |             wrlong  envph0,ptra[8]
3a93c     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
3a940                 |                       
3a940     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
3a944     FF C3 25 A7 |     if_z    decmod  front, #511          
3a948                 |          
3a948     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3a94c     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
3a950     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
3a954     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
3a958                 | 	    
3a958                 | 		    
3a958     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3a95c     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
3a960     04 15 02 F6 |             mov     newsample, oldrs       
3a964                 | 
3a964     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
3a968     02 AF 01 F1 |             add     time0,dt0    
3a96c                 |                                      
3a96c     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
3a970     D8 FD 9F AD |     if_z    jmp     #loop1
3a974     02 C5 01 F6 |             mov     qq,dt0
3a978                 | 
3a978                 |     
3a978                 |             
3a978     01 4E 36 F0 | p301        rol     dropper,#1 wc
3a97c     40 00 90 3D |     if_nc   jmp     #p399
3a980     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3a984     00 C2 9D F2 |             cmpr    front, #0-0 wcz
3a988     F4 FF 9F AD |     if_e    jmp     #p398   
3a98c                 | 		
3a98c     00 1A 0E F2 | 	    cmp     scbase,#0 wz
3a990     20 00 90 AD |     if_z    jmp     #p302	   
3a994                 |   
3a994     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
3a998     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
3a99c     02 1E 66 C0 |     if_c    shl     scptr2,#2
3a9a0     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
3a9a4     60 1E 66 FC |             wrlong  scptr2,#$60
3a9a8     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
3a9ac     01 00 00 CF 
3a9b0     7F 1C 06 C7 |     if_c    incmod  scptr,##639
3a9b4                 | 			    
3a9b4     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
3a9b8     00 00 00 FF 
3a9bc     FF C3 05 F7 |             incmod  front, ##511
3a9c0     ED C5 6D FB | p399        djnz    qq,#p301
3a9c4                 |             
3a9c4     6C FD 9F FD |             jmp     #loop            'loop
3a9c8                 | 
3a9c8                 | '----------------------------------------------------------------------------------
3a9c8                 | '------------- This is the end of the main loop -----------------------------------
3a9c8                 | '----------------------------------------------------------------------------------
3a9c8                 | 
3a9c8                 | '----------------------------------------------------------------------------------
3a9c8                 | '------------- PSRAM cache ----------- --------------------------------------------
3a9c8                 | '----------------------------------------------------------------------------------
3a9c8                 | 
3a9c8                 | ' There are 8 cache pointers for 8 channels
3a9c8                 | ' if 24 higher bits of address=cache, then get a word from the cache
3a9c8                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3a9c8                 | 
3a9c8                 | 
3a9c8     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
3a9cc                 |             
3a9cc     E2 40 02 F6 | 	    mov     addrhi,qq		
3a9d0     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3a9d4     14 01 96 F9 | 	    alts    cn,#cache1            
3a9d8     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
3a9dc     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3a9e0                 | 	
3a9e0     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
3a9e4     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
3a9e8     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
3a9ec     08 38 66 F0 | 	    shl     cmd,#8
3a9f0     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3a9f4     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
3a9f8     08 3A 66 F0 |             shl     hubaddr,#8                  '
3a9fc     13 3B 02 F1 |             add     hubaddr,hubptr 
3aa00     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
3aa04     28 04 64 FD |             setq    #2                          ' write 3 longs
3aa08     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
3aa0c     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3aa10     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3aa14                 |             
3aa14                 | 	
3aa14     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
3aa18     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
3aa1c     13 C5 01 F1 | 	    add     qq,hubptr
3aa20     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3aa24     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
3aa28                 |           
3aa28                 | 
3aa28                 | '--------------------------------------------------------------------------
3aa28                 | '------ Interrupt service -------------------------------------------------
3aa28                 | '------ Output the sample, get the next one if exists ---------------------
3aa28                 | '--------------------------------------------------------------------------
3aa28                 | 
3aa28     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
3aa2c     0F D0 25 FC |             wypin   rsample,#right       '4
3aa30     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3aa34     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
3aa38     FF F3 07 57 |     if_ne   incmod  ptrb,#511
3aa3c     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3aa40     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3aa44                 |     
3aa44     F5 FF 3B FB |             reti1                        '17/19 
3aa48                 |           
3aa48                 | '---------------------------------------------------------------------------
3aa48                 | '-------- End of interrupt -------------------------------------------------
3aa48                 | '---------------------------------------------------------------------------    
3aa48                 | 
3aa48                 | 
3aa48                 | '---------------------------------------------------------------------------
3aa48                 | '------- Variables ---------------------------------------------------------
3aa48                 | '---------------------------------------------------------------------------
3aa48                 | 
3aa48                 | ' constants
3aa48                 | 
3aa48     00 00 00 40 | a40000000   long $40000000
3aa4c     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3aa50                 | 
3aa50                 | ' Time variables
3aa50                 | 
3aa50     00 00 00 00 | time0       long 0    ' Global sample computing time
3aa54     01 00 00 00 | time1       long 1    ' Local channels time
3aa58     02 00 00 00 | time2       long 2
3aa5c     03 00 00 00 | time3       long 3
3aa60     04 00 00 00 | time4       long 4
3aa64     05 00 00 00 | time5       long 5
3aa68     06 00 00 00 | time6       long 6
3aa6c     07 00 00 00 | time7       long 7
3aa70     08 00 00 00 | time8       long 8
3aa74                 | 
3aa74     00 00 00 00 | channeladd long 0
3aa78                 | 
3aa78     00 00 00 00 | front       long 0
3aa7c                 | 
3aa7c                 | ' temporary variables 
3aa7c     00 00 00 00 | qq          long 0
3aa80     00 00 00 00 | spl         long 0
3aa84     00 00 00 00 | zero        long 0
3aa88     00 00 00 00 | mailbox     long 0
3aa8c     00 00 00 00 | mailbox2 long 0
3aa90                 | 
3aa90                 | ' Interrupt ISR variables
3aa90                 | 
3aa90     00 00 00 00 | lsample     long 0
3aa94     00 00 00 00 | rsample     long 0
3aa98     00 00 00 00 | lsnext      long 0
3aa9c     00 00 00 00 | rsnext      long 0 
3aaa0                 | 
3aaa0                 | ' channel parameter block
3aaa0                 | 
3aaa0     00 00 00 00 | pointer0    long 0     
3aaa4     00 00 00 00 | sample0     long 0
3aaa8     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
3aaac     00 00 00 00 | lstart0     long 0
3aab0     00 00 00 00 | lend0       long 0
3aab4     00 00 00 00 | volpan0     long 0
3aab8     00 00 00 00 | freqskip0   long 0
3aabc     00 00 00 00 | command0    long 0
3aac0     00 00 00 00 | envph0	    long 0
3aac4     00 00 00 00 | envptr0	    long 0
3aac8     00 00 00 00 | envspd0	    long 0
3aacc     00 00 00 00 | envlen0	    long 0
3aad0     00 00 00 00 | res5	    long 0
3aad4     00 00 00 00 | res6	    long 0
3aad8     00 00 00 00 | res7	    long 0
3aadc     00 00 00 00 | res8	    long 0
3aae0                 | 
3aae0     00 00 00 00 | afreq0      long 0
3aae4     00 00 00 00 | askip0      long 0
3aae8     00 00 00 00 | avol0       long 0
3aaec     00 00 00 00 | apan0       long 0
3aaf0                 | 
3aaf0     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3aaf4     00 00 00 00 | cn          long 0
3aaf8     00 00 00 00 | ct          long 0
3aafc     00 00 00 00 | dt0         long 0
3ab00                 | 
3ab00                 | ' Samples
3ab00     00 00 00 00 | oldls       long 0
3ab04     00 00 00 00 | oldrs       long 0
3ab08                 | 
3ab08     00 00 00 00 | ls0         long 0
3ab0c     00 00 00 00 | rs0         long 0
3ab10                 | 
3ab10     00 00 00 00 | ls          long 0    
3ab14     00 00 00 00 | rs          long 0
3ab18                 | 
3ab18     00 00 00 00 | oldsample   long 0
3ab1c     00 00 00 00 | newsample   long 0
3ab20                 | 
3ab20     00 00 00 00 | nrsample    long 0
3ab24     00 00 00 00 | nlsample    long 0
3ab28                 | 
3ab28     00 00 00 00 | scbase long 0
3ab2c     00 00 00 00 | scptr long 0
3ab30     00 00 00 00 | scptr2 long 0
3ab34     00 00 00 00 | scope long 0
3ab38                 | 
3ab38     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3ab3c     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3ab40                 | 
3ab40     00 18 07 00 | hubptr      long $71800
3ab44     00 00 00 00 | cache1      long 0
3ab48     00 00 00 00 | cache2      long 0
3ab4c     00 00 00 00 | cache3      long 0
3ab50     00 00 00 00 | cache4      long 0
3ab54     00 00 00 00 | cache5      long 0
3ab58     00 00 00 00 | cache6      long 0
3ab5c     00 00 00 00 | cache7      long 0
3ab60     00 00 00 00 | cache8      long 0
3ab64                 | 
3ab64                 | 
3ab64     00 00 00 00 | cmd         long 0
3ab68     00 00 00 00 | hubaddr     long 0
3ab6c     00 01 00 00 | count       long 256
3ab70     00 00 00 00 | addrlo long 0
3ab74     00 00 00 00 | addrhi long 0
3ab78     00 00 00 00 | pointer00 long 0
3ab7c     00 00 00 00 | envhi long 0
3ab80     00 00 00 00 | envlo long 0
3ab84     00 00 00 00 | envs1 long 0
3ab88     00 00 00 00 | envs2 long 0
3ab8c     00 00 00 00 | noise0 long 0
3ab90     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
3ab94     00 00 00 00 
3ab98     00 00 00 00 | null  			long 	0,0           ' for channel reset
3ab9c                 | 	alignl
3ab9c                 | __system__dat_
3ab9c     00 00 00 00 
3aba0     00 00 00 00 | 	byte	$00[8]
3aba4     03 00 00 00 
3aba8     00 00 00 00 
3abac     00 00 00 00 
3abb0     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3abb4     00 00 00 00 
      ...             
3ae40     00 00 00 00 
3ae44     00 00 00 00 | 	byte	$00[660]
3ae48     00 00 60 09 | 	long	(150 {__system____root_opendir})<<20
3ae4c     00 00 70 09 | 	long	(151 {__system____root_closedir})<<20
3ae50     00 00 80 09 | 	long	(152 {__system____root_readdir})<<20
3ae54     00 00 90 09 | 	long	(153 {__system____root_stat})<<20
3ae58     00 00 00 00 
3ae5c     00 00 00 00 
3ae60     00 00 00 00 
3ae64     00 00 00 00 
3ae68     00 00 00 00 
3ae6c     00 00 00 00 
3ae70     00 00 00 00 | 	byte	$00[28]
3ae74     DC AE 03 00 | 	long	@@@__system__dat_ + 832
3ae78     DF AE 03 00 | 	long	@@@__system__dat_ + 835
3ae7c     00 AF 03 00 | 	long	@@@__system__dat_ + 868
3ae80     19 AF 03 00 | 	long	@@@__system__dat_ + 893
3ae84     34 AF 03 00 | 	long	@@@__system__dat_ + 920
3ae88     4E AF 03 00 | 	long	@@@__system__dat_ + 946
3ae8c     5E AF 03 00 | 	long	@@@__system__dat_ + 962
3ae90     70 AF 03 00 | 	long	@@@__system__dat_ + 980
3ae94     82 AF 03 00 | 	long	@@@__system__dat_ + 998
3ae98     94 AF 03 00 | 	long	@@@__system__dat_ + 1016
3ae9c     A0 AF 03 00 | 	long	@@@__system__dat_ + 1028
3aea0     B1 AF 03 00 | 	long	@@@__system__dat_ + 1045
3aea4     C5 AF 03 00 | 	long	@@@__system__dat_ + 1065
3aea8     CF AF 03 00 | 	long	@@@__system__dat_ + 1075
3aeac     DF AF 03 00 | 	long	@@@__system__dat_ + 1091
3aeb0     EE AF 03 00 | 	long	@@@__system__dat_ + 1106
3aeb4     04 B0 03 00 | 	long	@@@__system__dat_ + 1128
3aeb8     1D B0 03 00 | 	long	@@@__system__dat_ + 1153
3aebc     31 B0 03 00 | 	long	@@@__system__dat_ + 1173
3aec0     3F B0 03 00 | 	long	@@@__system__dat_ + 1187
3aec4     53 B0 03 00 | 	long	@@@__system__dat_ + 1207
3aec8     5F B0 03 00 | 	long	@@@__system__dat_ + 1219
3aecc     71 B0 03 00 | 	long	@@@__system__dat_ + 1237
3aed0     89 B0 03 00 | 	long	@@@__system__dat_ + 1261
3aed4     9B B0 03 00 | 	long	@@@__system__dat_ + 1279
3aed8     AE B0 03 00 | 	long	@@@__system__dat_ + 1298
3aedc     4F 4B 00 4E 
3aee0     75 6D 65 72 
3aee4     69 63 61 6C 
3aee8     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3aeec     75 6D 65 6E 
3aef0     74 20 6F 75 
3aef4     74 20 6F 66 
3aef8     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3aefc     61 69 6E 00 
3af00     52 65 73 75 
3af04     6C 74 20 6E 
3af08     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3af0c     65 70 72 65 
3af10     73 65 6E 74 
3af14     61 62 6C 65 
3af18     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3af1c     65 67 61 6C 
3af20     20 6D 75 6C 
3af24     74 69 62 79 
3af28     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3af2c     65 71 75 65 
3af30     6E 63 65 00 
3af34     4E 6F 20 73 
3af38     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3af3c     66 69 6C 65 
3af40     20 6F 72 20 
3af44     64 69 72 65 
3af48     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3af4c     79 00 42 61 
3af50     64 20 66 69 
3af54     6C 65 20 6E 
3af58     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3af5c     72 00 50 65 
3af60     72 6D 69 73 
3af64     73 69 6F 6E 
3af68     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3af6c     69 65 64 00 
3af70     4E 6F 74 20 
3af74     65 6E 6F 75 
3af78     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3af7c     65 6D 6F 72 
3af80     79 00 54 65 
3af84     6D 70 6F 72 
3af88     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3af8c     66 61 69 6C 
3af90     75 72 65 00 
3af94     46 69 6C 65 
3af98     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3af9c     73 74 73 00 
3afa0     49 6E 76 61 
3afa4     6C 69 64 20 
3afa8     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3afac     6D 65 6E 74 
3afb0     00 54 6F 6F 
3afb4     20 6D 61 6E 
3afb8     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3afbc     65 6E 20 66 
3afc0     69 6C 65 73 
3afc4     00 49 2F 4F 
3afc8     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3afcc     6F 72 00 4E 
3afd0     6F 74 20 61 
3afd4     20 64 69 72 
3afd8     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3afdc     72 79 00 49 
3afe0     73 20 61 20 
3afe4     64 69 72 65 
3afe8     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3afec     79 00 52 65 
3aff0     61 64 20 6F 
3aff4     6E 6C 79 20 
3aff8     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3affc     20 73 79 73 
3b000     74 65 6D 00 
3b004     46 75 6E 63 
3b008     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3b00c     20 6E 6F 74 
3b010     20 69 6D 70 
3b014     6C 65 6D 65 
3b018     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3b01c     00 44 69 72 
3b020     65 63 74 6F 
3b024     72 79 20 6E 
3b028     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3b02c     6D 70 74 79 
3b030     00 4E 61 6D 
3b034     65 20 74 6F 
3b038     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3b03c     6E 67 00 44 
3b040     65 76 69 63 
3b044     65 20 6E 6F 
3b048     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3b04c     65 6B 61 62 
3b050     6C 65 00 42 
3b054     61 64 20 61 
3b058     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3b05c     73 73 00 42 
3b060     72 6F 6B 65 
3b064     6E 20 63 6F 
3b068     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3b06c     74 69 6F 6E 
3b070     00 44 65 76 
3b074     69 63 65 20 
3b078     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3b07c     65 73 6F 75 
3b080     72 63 65 20 
3b084     62 75 73 79 
3b088     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3b08c     73 73 20 64 
3b090     65 76 69 63 
3b094     65 20 6C 69 
3b098     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3b09c     6F 20 73 70 
3b0a0     61 63 65 20 
3b0a4     6F 6E 20 64 
3b0a8     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3b0ac     65 00 55 6E 
3b0b0     6B 6E 6F 77 
3b0b4     6E 20 65 72 
3b0b8     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3b0bc     00 00 00 00 
3b0c0     00 00 00 00 | 	byte	$00[8]
3b0c4     05 00 00 00 
3b0c8     00 00 00 00 
3b0cc     00 00 00 00 
3b0d0     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b0d4     00 00 00 00 | 	byte	$00, $00, $00, $00
3b0d8     00 00 E0 0A | 	long	(174 {__system___tx})<<20
3b0dc     00 00 F0 0A | 	long	(175 {__system___rx})<<20
3b0e0     00 00 00 00 | 	byte	$00, $00, $00, $00
3b0e4     00 00 00 0B | 	long	(176 {__system___rxtxioctl_0696})<<20
3b0e8     00 00 10 0B | 	long	(177 {__system____dummy_flush_0697})<<20
3b0ec     00 00 00 00 
3b0f0     00 00 00 00 | 	byte	$00[8]
3b0f4     01 00 00 00 
3b0f8     06 00 00 00 
3b0fc     00 00 00 00 
3b100     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b104     00 00 00 00 
3b108     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3b10c     00 00 E0 0A | 	long	(174 {__system___tx})<<20
3b110     00 00 F0 0A | 	long	(175 {__system___rx})<<20
3b114     00 00 00 00 | 	byte	$00, $00, $00, $00
3b118     00 00 00 0B | 	long	(176 {__system___rxtxioctl_0696})<<20
3b11c     00 00 10 0B | 	long	(177 {__system____dummy_flush_0697})<<20
3b120     00 00 00 00 
3b124     00 00 00 00 | 	byte	$00[8]
3b128     01 00 00 00 
3b12c     06 00 00 00 
3b130     00 00 00 00 
3b134     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b138     00 00 00 00 
3b13c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3b140     00 00 E0 0A | 	long	(174 {__system___tx})<<20
3b144     00 00 F0 0A | 	long	(175 {__system___rx})<<20
3b148     00 00 00 00 | 	byte	$00, $00, $00, $00
3b14c     00 00 00 0B | 	long	(176 {__system___rxtxioctl_0696})<<20
3b150     00 00 10 0B | 	long	(177 {__system____dummy_flush_0697})<<20
3b154     00 00 00 00 
      ...             
3b2c4     00 00 00 00 
3b2c8     00 00 00 00 | 	byte	$00[376]
3b2cc     D0 B2 03 00 | 	long	@@@__system__dat_ + 1844
3b2d0     00 00 00 00 
3b2d4     00 00 00 00 
3b2d8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b2dc                 | 	alignl
3b2dc                 | _fatfs_cc_dat_
3b2dc     C7 00 FC 00 
3b2e0     E9 00 E2 00 
3b2e4     E4 00 E0 00 
3b2e8     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3b2ec     EA 00 EB 00 
3b2f0     E8 00 EF 00 
3b2f4     EE 00 EC 00 
3b2f8     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3b2fc     C9 00 E6 00 
3b300     C6 00 F4 00 
3b304     F6 00 F2 00 
3b308     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3b30c     FF 00 D6 00 
3b310     DC 00 F8 00 
3b314     A3 00 D8 00 
3b318     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3b31c     E1 00 ED 00 
3b320     F3 00 FA 00 
3b324     F1 00 D1 00 
3b328     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3b32c     BF 00 AE 00 
3b330     AC 00 BD 00 
3b334     BC 00 A1 00 
3b338     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3b33c     91 25 92 25 
3b340     93 25 02 25 
3b344     24 25 C1 00 
3b348     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3b34c     A9 00 63 25 
3b350     51 25 57 25 
3b354     5D 25 A2 00 
3b358     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3b35c     14 25 34 25 
3b360     2C 25 1C 25 
3b364     00 25 3C 25 
3b368     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3b36c     5A 25 54 25 
3b370     69 25 66 25 
3b374     60 25 50 25 
3b378     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3b37c     F0 00 D0 00 
3b380     CA 00 CB 00 
3b384     C8 00 31 01 
3b388     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3b38c     CF 00 18 25 
3b390     0C 25 88 25 
3b394     84 25 A6 00 
3b398     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3b39c     D3 00 DF 00 
3b3a0     D4 00 D2 00 
3b3a4     F5 00 D5 00 
3b3a8     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3b3ac     DE 00 DA 00 
3b3b0     DB 00 D9 00 
3b3b4     FD 00 DD 00 
3b3b8     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3b3bc     AD 00 B1 00 
3b3c0     17 20 BE 00 
3b3c4     B6 00 A7 00 
3b3c8     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3b3cc     B0 00 A8 00 
3b3d0     B7 00 B9 00 
3b3d4     B3 00 B2 00 
3b3d8     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3b3dc     61 00 1A 03 
3b3e0     E0 00 17 03 
3b3e4     F8 00 07 03 
3b3e8     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3b3ec     78 01 00 01 
3b3f0     30 01 32 01 
3b3f4     06 01 39 01 
3b3f8     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3b3fc     2E 01 79 01 
3b400     06 01 80 01 
3b404     4D 00 43 02 
3b408     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3b40c     82 01 84 01 
3b410     84 01 86 01 
3b414     87 01 87 01 
3b418     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3b41c     8B 01 8B 01 
3b420     8D 01 8E 01 
3b424     8F 01 90 01 
3b428     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3b42c     93 01 94 01 
3b430     F6 01 96 01 
3b434     97 01 98 01 
3b438     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3b43c     9B 01 9C 01 
3b440     9D 01 20 02 
3b444     9F 01 A0 01 
3b448     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3b44c     A2 01 A4 01 
3b450     A4 01 A6 01 
3b454     A7 01 A7 01 
3b458     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3b45c     AB 01 AC 01 
3b460     AC 01 AE 01 
3b464     AF 01 AF 01 
3b468     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3b46c     B3 01 B3 01 
3b470     B5 01 B5 01 
3b474     B7 01 B8 01 
3b478     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3b47c     BB 01 BC 01 
3b480     BC 01 BE 01 
3b484     F7 01 C0 01 
3b488     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3b48c     C3 01 C4 01 
3b490     C5 01 C4 01 
3b494     C7 01 C8 01 
3b498     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3b49c     CB 01 CA 01 
3b4a0     CD 01 10 01 
3b4a4     DD 01 01 00 
3b4a8     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3b4ac     12 01 F3 01 
3b4b0     03 00 F1 01 
3b4b4     F4 01 F4 01 
3b4b8     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3b4bc     22 02 12 01 
3b4c0     3A 02 09 00 
3b4c4     65 2C 3B 02 
3b4c8     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3b4cc     66 2C 3F 02 
3b4d0     40 02 41 02 
3b4d4     41 02 46 02 
3b4d8     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3b4dc     40 00 81 01 
3b4e0     86 01 55 02 
3b4e4     89 01 8A 01 
3b4e8     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3b4ec     5A 02 90 01 
3b4f0     5C 02 5D 02 
3b4f4     5E 02 5F 02 
3b4f8     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3b4fc     62 02 94 01 
3b500     64 02 65 02 
3b504     66 02 67 02 
3b508     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3b50c     6A 02 62 2C 
3b510     6C 02 6D 02 
3b514     6E 02 9C 01 
3b518     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3b51c     9D 01 73 02 
3b520     74 02 9F 01 
3b524     76 02 77 02 
3b528     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3b52c     7A 02 7B 02 
3b530     7C 02 64 2C 
3b534     7E 02 7F 02 
3b538     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3b53c     82 02 A9 01 
3b540     84 02 85 02 
3b544     86 02 87 02 
3b548     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3b54c     B1 01 B2 01 
3b550     45 02 8D 02 
3b554     8E 02 8F 02 
3b558     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3b55c     B7 01 7B 03 
3b560     03 00 FD 03 
3b564     FE 03 FF 03 
3b568     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3b56c     86 03 88 03 
3b570     89 03 8A 03 
3b574     B1 03 11 03 
3b578     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3b57c     A3 03 A3 03 
3b580     C4 03 08 03 
3b584     CC 03 03 00 
3b588     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3b58c     8F 03 D8 03 
3b590     18 01 F2 03 
3b594     0A 00 F9 03 
3b598     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3b59c     F5 03 F6 03 
3b5a0     F7 03 F7 03 
3b5a4     F9 03 FA 03 
3b5a8     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3b5ac     20 03 50 04 
3b5b0     10 07 60 04 
3b5b4     22 01 8A 04 
3b5b8     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3b5bc     0E 01 CF 04 
3b5c0     01 00 C0 04 
3b5c4     D0 04 44 01 
3b5c8     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3b5cc     00 00 7D 1D 
3b5d0     01 00 63 2C 
3b5d4     00 1E 96 01 
3b5d8     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3b5dc     00 1F 08 06 
3b5e0     10 1F 06 06 
3b5e4     20 1F 08 06 
3b5e8     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3b5ec     40 1F 06 06 
3b5f0     51 1F 07 00 
3b5f4     59 1F 52 1F 
3b5f8     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3b5fc     5D 1F 56 1F 
3b600     5F 1F 60 1F 
3b604     08 06 70 1F 
3b608     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3b60c     BB 1F C8 1F 
3b610     C9 1F CA 1F 
3b614     CB 1F DA 1F 
3b618     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3b61c     F9 1F EA 1F 
3b620     EB 1F FA 1F 
3b624     FB 1F 80 1F 
3b628     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3b62c     08 06 A0 1F 
3b630     08 06 B0 1F 
3b634     04 00 B8 1F 
3b638     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3b63c     BC 1F CC 1F 
3b640     01 00 C3 1F 
3b644     D0 1F 02 06 
3b648     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3b64c     E5 1F 01 00 
3b650     EC 1F F3 1F 
3b654     01 00 FC 1F 
3b658     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3b65c     32 21 70 21 
3b660     10 02 84 21 
3b664     01 00 83 21 
3b668     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3b66c     30 2C 2F 04 
3b670     60 2C 02 01 
3b674     67 2C 06 01 
3b678     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3b67c     80 2C 64 01 
3b680     00 2D 26 08 
3b684     41 FF 1A 03 
3b688     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3b68c     05 07 09 0E 
3b690     10 12 14 16 
3b694     18 1C 1E 43 
3b698     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3b69c     41 41 43 45 
3b6a0     45 45 49 49 
3b6a4     49 41 41 45 
3b6a8     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3b6ac     4F 55 55 59 
3b6b0     4F 55 4F 9C 
3b6b4     4F 9E 9F 41 
3b6b8     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3b6bc     A5 A6 A7 A8 
3b6c0     A9 AA AB AC 
3b6c4     AD AE AF B0 
3b6c8     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3b6cc     41 41 41 B8 
3b6d0     B9 BA BB BC 
3b6d4     BD BE BF C0 
3b6d8     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3b6dc     C5 41 41 C8 
3b6e0     C9 CA CB CC 
3b6e4     CD CE CF D1 
3b6e8     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3b6ec     49 49 49 49 
3b6f0     D9 DA DB DC 
3b6f4     DD 49 DF 4F 
3b6f8     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3b6fc     4F E6 E8 E8 
3b700     55 55 55 59 
3b704     59 EE EF F0 
3b708     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3b70c     F5 F6 F7 F8 
3b710     F9 FA FB FC 
3b714     FD FE FF 00 
3b718     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3b71c     00 00 00 00 | 	byte	$00, $00, $00, $00
3b720     00 00 D0 09 | 	long	(157 {_fatfs_cc_v_close})<<20
3b724     00 00 E0 09 | 	long	(158 {_fatfs_cc_v_read})<<20
3b728     00 00 F0 09 | 	long	(159 {_fatfs_cc_v_write})<<20
3b72c     00 00 00 0A | 	long	(160 {_fatfs_cc_v_lseek})<<20
3b730     00 00 10 0A | 	long	(161 {_fatfs_cc_v_ioctl})<<20
3b734     00 00 20 0B | 	long	(178 {_fatfs_cc_v_flush})<<20
3b738     00 00 00 00 
3b73c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3b740     00 00 20 0A | 	long	(162 {_fatfs_cc_v_open})<<20
3b744     00 00 30 0A | 	long	(163 {_fatfs_cc_v_creat})<<20
3b748     00 00 40 0A | 	long	(164 {_fatfs_cc_v_opendir})<<20
3b74c     00 00 50 0A | 	long	(165 {_fatfs_cc_v_closedir})<<20
3b750     00 00 60 0A | 	long	(166 {_fatfs_cc_v_readdir})<<20
3b754     00 00 70 0A | 	long	(167 {_fatfs_cc_v_stat})<<20
3b758     00 00 80 0A | 	long	(168 {_fatfs_cc_v_mkdir})<<20
3b75c     00 00 90 0A | 	long	(169 {_fatfs_cc_v_rmdir})<<20
3b760     00 00 A0 0A | 	long	(170 {_fatfs_cc_v_remove})<<20
3b764     00 00 B0 0A | 	long	(171 {_fatfs_cc_v_rename})<<20
3b768     00 00 C0 0A | 	long	(172 {_fatfs_cc_v_init})<<20
3b76c     00 00 D0 0A | 	long	(173 {_fatfs_cc_v_deinit})<<20
3b770     FF FF FF FF 
3b774     1F 00 00 00 
3b778     1C 00 00 00 
3b77c     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
3b780     1E 00 00 00 
3b784     1F 00 00 00 
3b788     1E 00 00 00 
3b78c     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3b790     1F 00 00 00 
3b794     1E 00 00 00 
3b798     1F 00 00 00 
3b79c     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3b7a0     1F 00 00 00 
3b7a4     00 00 00 00 
3b7a8     1F 00 00 00 
3b7ac     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
3b7b0     5A 00 00 00 
3b7b4     78 00 00 00 
3b7b8     97 00 00 00 
3b7bc     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
3b7c0     D4 00 00 00 
3b7c4     F3 00 00 00 
3b7c8     11 01 00 00 
3b7cc     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
3b7d0     4E 01 00 00 
3b7d4     6D 01 00 00 
3b7d8     FF FF FF FF 
3b7dc     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
3b7e0     00 00 00 00 
      ...             
3b7f8     00 00 00 00 
3b7fc     00 00 00 00 | 	byte	$00[32]
3b800     1E B8 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3b804     22 B8 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
3b808     00 00 00 00 
3b80c     00 00 00 00 
3b810     00 00 00 00 
3b814     00 00 00 00 
3b818     00 00       | 	byte	$00[18]
3b81a     3F 3F 3F 00 
3b81e     55 43 54 00 
3b822     55 43 54 00 
3b826     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3b82a     00 00 00 00 
3b82e     00 00 00    | 	byte	$00[7]
3b831     CA 9A 3B 00 
3b835     00 00 00 01 
3b839     01 01 01 01 
3b83d     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3b841     91 11 11 11 
3b845     11 01 01 01 
3b849     01 01 01 01 
3b84d     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3b851     01 01 01 01 
3b855     01 01 01    | 	byte	$01[7]
3b858     90 20 20 20 
3b85c     20 20 20 20 
3b860     20 20 20 20 
3b864     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3b868     42 42 42 42 
3b86c     42 42 42 42 
3b870     42 42       | 	byte	$42[10]
3b872     20 20 20 20 
3b876     20 20 20    | 	byte	$20[7]
3b879     44 44 44 44 
3b87d     44 44       | 	byte	$44[6]
3b87f     04 04 04 04 
3b883     04 04 04 04 
3b887     04 04 04 04 
3b88b     04 04 04 04 
3b88f     04 04 04 04 | 	byte	$04[20]
3b893     20 20 20 20 
3b897     20 20       | 	byte	$20[6]
3b899     48 48 48 48 
3b89d     48 48       | 	byte	$48[6]
3b89f     08 08 08 08 
3b8a3     08 08 08 08 
3b8a7     08 08 08 08 
3b8ab     08 08 08 08 
3b8af     08 08 08 08 | 	byte	$08[20]
3b8b3     20 20 20 20 
3b8b7     01 00 00 00 
3b8bb     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3b8bc                 | __methodtable__
3b8bc     2C A8 01 00 | 	long	@_do_no_command
3b8c0     5C 1C 01 00 | 	long	@_do_plus
3b8c4     48 21 01 00 | 	long	@_do_minus
3b8c8     10 26 01 00 | 	long	@_do_or
3b8cc     28 27 01 00 | 	long	@_do_mul
3b8d0     B4 2C 01 00 | 	long	@_do_fdiv
3b8d4     F8 24 01 00 | 	long	@_do_and
3b8d8     94 2A 01 00 | 	long	@_do_div
3b8dc     7C 2E 01 00 | 	long	@_do_mod
3b8e0     9C 30 01 00 | 	long	@_do_shl
3b8e4     B4 31 01 00 | 	long	@_do_shr
3b8e8     CC 32 01 00 | 	long	@_do_power
3b8ec     DC 0F 01 00 | 	long	@_do_getvar
3b8f0     3C B2 00 00 | 	long	@_do_push
3b8f4     DC 09 01 00 | 	long	@_do_assign
3b8f8     78 78 01 00 | 	long	@_do_cls
3b8fc     64 F3 00 00 | 	long	@_do_new
3b900     F0 78 01 00 | 	long	@_do_plot
3b904     C0 79 01 00 | 	long	@_do_draw
3b908     34 83 01 00 | 	long	@_do_print
3b90c     2C 7C 01 00 | 	long	@_do_circle
3b910     B4 7A 01 00 | 	long	@_do_fcircle
3b914     A4 7D 01 00 | 	long	@_do_box
3b918     4C 81 01 00 | 	long	@_do_frame
3b91c     B8 78 01 00 | 	long	@_do_color
3b920     00 8D 00 00 | 	long	@_do_for
3b924     58 90 00 00 | 	long	@_do_next
3b928     C8 F0 00 00 | 	long	@_do_list
3b92c     A4 C4 00 00 | 	long	@_do_run
3b930     98 08 01 00 | 	long	@_do_error
3b934     90 F5 00 00 | 	long	@_do_fast_goto
3b938     F8 04 01 00 | 	long	@_do_find_goto
3b93c     08 07 01 00 | 	long	@_do_slow_goto
3b940     48 A4 01 00 | 	long	@_do_nothing
3b944     80 B8 00 00 | 	long	@_test_csave
3b948     E4 BB 00 00 | 	long	@_do_save
3b94c     EC BF 00 00 | 	long	@_do_load
3b950     68 92 01 00 | 	long	@_do_pinwrite
3b954     04 9D 01 00 | 	long	@_do_waitms
3b958     40 9E 01 00 | 	long	@_do_waitvbl
3b95c     E0 A1 01 00 | 	long	@_do_if
3b960     C4 A2 01 00 | 	long	@_do_else
3b964     94 34 01 00 | 	long	@_do_eq
3b968     0C 43 01 00 | 	long	@_do_ge
3b96c     E4 47 01 00 | 	long	@_do_le
3b970     6C 39 01 00 | 	long	@_do_gt
3b974     44 3E 01 00 | 	long	@_do_lt
3b978     BC 4C 01 00 | 	long	@_do_ne
3b97c     F4 52 01 00 | 	long	@_do_rnd
3b980     4C A4 01 00 | 	long	@_do_brun
3b984     18 A7 01 00 | 	long	@_do_beep
3b988     70 9E 01 00 | 	long	@_do_dir
3b98c     84 88 01 00 | 	long	@_do_paper
3b990     0C 89 01 00 | 	long	@_do_ink
3b994     A8 89 01 00 | 	long	@_do_font
3b998     24 8A 01 00 | 	long	@_do_mode
3b99c     84 A6 01 00 | 	long	@_do_mouse
3b9a0     10 78 01 00 | 	long	@_do_gettime
3b9a4     B8 A6 01 00 | 	long	@_do_cursor
3b9a8     EC A6 01 00 | 	long	@_do_click
3b9ac     9C 75 01 00 | 	long	@_do_mousex
3b9b0     E0 75 01 00 | 	long	@_do_mousey
3b9b4     68 76 01 00 | 	long	@_do_mousek
3b9b8     24 76 01 00 | 	long	@_do_mousew
3b9bc     C8 55 01 00 | 	long	@_do_sin
3b9c0     6C 6B 01 00 | 	long	@_do_stick
3b9c4     F0 6C 01 00 | 	long	@_do_strig
3b9c8     B0 74 01 00 | 	long	@_do_sprite
3b9cc     3C 71 01 00 | 	long	@_do_defsprite
3b9d0     74 6E 01 00 | 	long	@_do_getpixel
3b9d4     4C 9E 01 00 | 	long	@_do_waitclock
3b9d8     38 A8 01 00 | 	long	@_do_negative
3b9dc     AC 76 01 00 | 	long	@_do_rdpin
3b9e0     18 77 01 00 | 	long	@_do_rqpin
3b9e4     8C 77 01 00 | 	long	@_do_pinread
3b9e8     00 95 01 00 | 	long	@_do_wrpin
3b9ec     80 95 01 00 | 	long	@_do_wxpin
3b9f0     00 96 01 00 | 	long	@_do_wypin
3b9f4     F0 92 01 00 | 	long	@_do_pinfloat
3b9f8     30 93 01 00 | 	long	@_do_pinlo
3b9fc     70 93 01 00 | 	long	@_do_pinhi
3ba00     F0 93 01 00 | 	long	@_do_pinstart
3ba04     B0 93 01 00 | 	long	@_do_pintoggle
3ba08     80 96 01 00 | 	long	@_do_position
3ba0c     24 65 01 00 | 	long	@_do_cos
3ba10     44 66 01 00 | 	long	@_do_tan
3ba14     68 69 01 00 | 	long	@_do_atn
3ba18     50 67 01 00 | 	long	@_do_asin
3ba1c     5C 68 01 00 | 	long	@_do_acos
3ba20     7C 6A 01 00 | 	long	@_do_sqr
3ba24     8C 7F 01 00 | 	long	@_do_fill
3ba28     DC E7 00 00 | 	long	@_do_defsnd
3ba2c     F4 C7 00 00 | 	long	@_do_defenv
3ba30     E8 A2 01 00 | 	long	@_do_rad
3ba34     10 A3 01 00 | 	long	@_do_deg
3ba38     8C A3 01 00 | 	long	@_do_int
3ba3c     88 D4 00 00 | 	long	@_do_play
3ba40     C8 8F 01 00 | 	long	@_do_setdelay
3ba44     20 8F 01 00 | 	long	@_do_setenv
3ba48     70 90 01 00 | 	long	@_do_setlen
3ba4c     C0 91 01 00 | 	long	@_do_setpan
3ba50     18 91 01 00 | 	long	@_do_setvol
3ba54     D0 8D 01 00 | 	long	@_do_setwave
3ba58     78 8E 01 00 | 	long	@_do_setsustain
3ba5c     44 E7 00 00 | 	long	@_do_release
3ba60     BC 54 01 00 | 	long	@_do_getenvsustain
3ba64     08 97 01 00 | 	long	@_do_poke
3ba68     E0 97 01 00 | 	long	@_do_dpoke
3ba6c     B8 98 01 00 | 	long	@_do_lpoke
3ba70     90 99 01 00 | 	long	@_do_peek
3ba74     40 9A 01 00 | 	long	@_do_dpeek
3ba78     EC 9A 01 00 | 	long	@_do_lpeek
3ba7c     FC 9B 01 00 | 	long	@_do_adr
3ba80     98 9B 01 00 | 	long	@_do_fre
3ba84     00 9C 01 00 | 	long	@_do_getnotevalue
3ba88     94 15 01 00 | 	long	@_do_getaddr
3ba8c     84 19 01 00 | 	long	@_do_inkey
3ba90     E8 A8 01 00 | 	long	@_do_abs
3ba94     64 62 01 00 | 	long	@_do_hex
3ba98     C4 63 01 00 | 	long	@_do_bin
3ba9c     60 5F 01 00 | 	long	@_do_val
3baa0     64 5E 01 00 | 	long	@_do_chr
3baa4     A0 5B 01 00 | 	long	@_do_asc
3baa8     1C 5A 01 00 | 	long	@_do_left
3baac     98 58 01 00 | 	long	@_do_right
3bab0     D4 56 01 00 | 	long	@_do_mid
3bab4     F8 5C 01 00 | 	long	@_do_len
3bab8     E8 8B 00 00 | 	long	@_do_gosub
3babc     74 8F 00 00 | 	long	@_do_return
3bac0     70 C4 00 00 | 	long	@_do_end
3bac4     20 90 00 00 | 	long	@_do_pop
3bac8     C4 6F 01 00 | 	long	@_do_log
3bacc     C0 E0 00 00 | 	long	@_do_changevol
3bad0     08 E5 00 00 | 	long	@_do_changewav
3bad4     A0 E1 00 00 | 	long	@_do_changepan
3bad8     B0 E2 00 00 | 	long	@_do_changefreq
3badc     34 E6 00 00 | 	long	@_do_shutup
3bae0     38 A3 01 00 | 	long	@_do_round
3bae4     E0 BF 00 00 | 	long	@_do_enter
3bae8     80 F6 00 00 | 	long	@_do_open
3baec     98 F9 00 00 | 	long	@_do_close
3baf0     14 FA 00 00 | 	long	@_do_get
3baf4     B8 FF 00 00 | 	long	@_do_put
3baf8     3C F7 01 00 | 	long	@_hg010b_spin2_putchar
3bafc     60 04 03 00 | 	long	@__struct___bas_wrap_sender_tx
3bb00     A4 04 03 00 | 	long	@__struct___bas_wrap_sender_rx
3bb04     EC 04 03 00 | 	long	@__struct___bas_wrap_sender_close
3bb08     90 03 03 00 | 	long	@__struct__s_vfs_file_t_putchar
3bb0c     00 04 03 00 | 	long	@__struct__s_vfs_file_t_getchar
3bb10     48 03 03 00 | 	long	@___strs_cl_pfunc
3bb14     DC 60 02 00 | 	long	@__system____root_opendir
3bb18     78 61 02 00 | 	long	@__system____root_closedir
3bb1c     F4 60 02 00 | 	long	@__system____root_readdir
3bb20     80 61 02 00 | 	long	@__system____root_stat
3bb24     CC 59 02 00 | 	long	@__system____default_putc
3bb28     50 59 02 00 | 	long	@__system____default_getc
3bb2c     74 5A 02 00 | 	long	@__system____default_flush
3bb30     4C EE 02 00 | 	long	@_fatfs_cc_v_close
3bb34     68 F2 02 00 | 	long	@_fatfs_cc_v_read
3bb38     7C F3 02 00 | 	long	@_fatfs_cc_v_write
3bb3c     5C F4 02 00 | 	long	@_fatfs_cc_v_lseek
3bb40     E4 F4 02 00 | 	long	@_fatfs_cc_v_ioctl
3bb44     38 F5 02 00 | 	long	@_fatfs_cc_v_open
3bb48     B0 ED 02 00 | 	long	@_fatfs_cc_v_creat
3bb4c     90 EE 02 00 | 	long	@_fatfs_cc_v_opendir
3bb50     04 EF 02 00 | 	long	@_fatfs_cc_v_closedir
3bb54     44 EF 02 00 | 	long	@_fatfs_cc_v_readdir
3bb58     78 F0 02 00 | 	long	@_fatfs_cc_v_stat
3bb5c     F8 F4 02 00 | 	long	@_fatfs_cc_v_mkdir
3bb60     18 F5 02 00 | 	long	@_fatfs_cc_v_rmdir
3bb64     08 F5 02 00 | 	long	@_fatfs_cc_v_remove
3bb68     28 F5 02 00 | 	long	@_fatfs_cc_v_rename
3bb6c     48 F6 02 00 | 	long	@_fatfs_cc_v_init
3bb70     50 F6 02 00 | 	long	@_fatfs_cc_v_deinit
3bb74     08 0E 02 00 | 	long	@__system___tx
3bb78     48 0E 02 00 | 	long	@__system___rx
3bb7c     EC 6C 02 00 | 	long	@__system___rxtxioctl_0696
3bb80     44 6D 02 00 | 	long	@__system____dummy_flush_0697
3bb84     18 F6 02 00 | 	long	@_fatfs_cc_v_flush
3bb88                 | __heap_base
3bb88     00 00 00 00 
      ...             
6a988     00 00 00 00 
6a98c     00 00 00 00 | 	long	0[48002]
6a990                 | objmem
6a990     00 00 00 00 
      ...             
75e1c     00 00 00 00 
75e20     00 00 00 00 | 	long	0[11557]
75e24                 | stackspace
75e24     00 00 00 00 | 	long	0[1]
75e28 100             | 	org	COG_BSS_START
75e28 100             | _var01
75e28 100             | 	res	1
75e28 101             | _var02
75e28 101             | 	res	1
75e28 102             | _var03
75e28 102             | 	res	1
75e28 103             | _var04
75e28 103             | 	res	1
75e28 104             | _var05
75e28 104             | 	res	1
75e28 105             | _var06
75e28 105             | 	res	1
75e28 106             | _var07
75e28 106             | 	res	1
75e28 107             | _var08
75e28 107             | 	res	1
75e28 108             | _var09
75e28 108             | 	res	1
75e28 109             | arg01
75e28 109             | 	res	1
75e28 10a             | arg02
75e28 10a             | 	res	1
75e28 10b             | arg03
75e28 10b             | 	res	1
75e28 10c             | arg04
75e28 10c             | 	res	1
75e28 10d             | arg05
75e28 10d             | 	res	1
75e28 10e             | arg06
75e28 10e             | 	res	1
75e28 10f             | local01
75e28 10f             | 	res	1
75e28 110             | local02
75e28 110             | 	res	1
75e28 111             | local03
75e28 111             | 	res	1
75e28 112             | local04
75e28 112             | 	res	1
75e28 113             | local05
75e28 113             | 	res	1
75e28 114             | local06
75e28 114             | 	res	1
75e28 115             | local07
75e28 115             | 	res	1
75e28 116             | local08
75e28 116             | 	res	1
75e28 117             | local09
75e28 117             | 	res	1
75e28 118             | local10
75e28 118             | 	res	1
75e28 119             | local11
75e28 119             | 	res	1
75e28 11a             | local12
75e28 11a             | 	res	1
75e28 11b             | local13
75e28 11b             | 	res	1
75e28 11c             | local14
75e28 11c             | 	res	1
75e28 11d             | local15
75e28 11d             | 	res	1
75e28 11e             | local16
75e28 11e             | 	res	1
75e28 11f             | local17
75e28 11f             | 	res	1
75e28 120             | local18
75e28 120             | 	res	1
75e28 121             | local19
75e28 121             | 	res	1
75e28 122             | local20
75e28 122             | 	res	1
75e28 123             | local21
75e28 123             | 	res	1
75e28 124             | local22
75e28 124             | 	res	1
75e28 125             | local23
75e28 125             | 	res	1
75e28 126             | local24
75e28 126             | 	res	1
75e28 127             | local25
75e28 127             | 	res	1
75e28 128             | local26
75e28 128             | 	res	1
75e28 129             | local27
75e28 129             | 	res	1
75e28 12a             | local28
75e28 12a             | 	res	1
75e28 12b             | local29
75e28 12b             | 	res	1
75e28 12c             | local30
75e28 12c             | 	res	1
75e28 12d             | local31
75e28 12d             | 	res	1
75e28 12e             | local32
75e28 12e             | 	res	1
75e28 12f             | local33
75e28 12f             | 	res	1
75e28 130             | local34
75e28 130             | 	res	1
75e28 131             | local35
75e28 131             | 	res	1
75e28 132             | muldiva_
75e28 132             | 	res	1
75e28 133             | muldivb_
75e28 133             | 	res	1
75e28 134             | 	fit	480
75e28 134             | 
