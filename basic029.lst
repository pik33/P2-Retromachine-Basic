00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic029.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 29
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 E0 AA A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 33 67 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 32 65 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 33 65 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 66 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 64 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 32 65 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 33 67 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec EC 95 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 50 93 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 F4 83 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 30 86 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 94 81 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 94 EE 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 70 8D 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 08 20 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 B8 47 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 70 45 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 48 57 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 30 78 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     49 E4 05 F1 | 	add	objptr, #73
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     79 00 00 FF 
00818     3B E5 05 F1 | 	add	objptr, ##62267
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     79 00 00 FF 
0082c     84 E5 85 F1 | 	sub	objptr, ##62340
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     2C E6 B1 FD | 	call	#__system___waitms
0083c     79 00 00 FF 
00840     84 E5 05 F1 | 	add	objptr, ##62340
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     79 00 00 FF 
00854     84 E5 85 F1 | 	sub	objptr, ##62340
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     04 E6 B1 FD | 	call	#__system___waitms
00864     79 00 00 FF 
00868     84 E5 05 F1 | 	add	objptr, ##62340
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     79 00 00 FF 
0087c     84 E5 85 F1 | 	sub	objptr, ##62340
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     DC E5 B1 FD | 	call	#__system___waitms
0088c     79 00 00 FF 
00890     84 E5 05 F1 | 	add	objptr, ##62340
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     79 00 00 FF 
008a4     84 E5 85 F1 | 	sub	objptr, ##62340
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     79 00 00 FF 
008d4     FC E4 05 F1 | 	add	objptr, ##62204
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     79 00 00 FF 
00914     04 E5 85 F1 | 	sub	objptr, ##62212
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     50 DB B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     A0 DB B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     90 DB B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     79 00 00 FF 
00980     0C E5 05 F1 | 	add	objptr, ##62220
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     79 00 00 FF 
009ac     28 E5 85 F1 | 	sub	objptr, ##62248
009b0     F4 DA B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     79 00 00 FF 
009e0     0C E5 05 F1 | 	add	objptr, ##62220
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     79 00 00 FF 
00a08     28 E5 85 F1 | 	sub	objptr, ##62248
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     23 4A 05 F6 | 	mov	COUNT_, #35
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     50 F0 07 F1 | 	add	ptra, ##592
00a2c     57 00 00 FF 
00a30     1C E4 05 F1 | 	add	objptr, ##44572
00a34     F2 12 02 FB | 	rdlong	arg01, objptr
00a38     57 00 00 FF 
00a3c     1C E4 85 F1 | 	sub	objptr, ##44572
00a40     08 06 B2 FD | 	call	#__system__RTrim_S
00a44     FD 12 02 F6 | 	mov	arg01, result1
00a48     40 05 B2 FD | 	call	#__system__LTrim_S
00a4c     57 00 00 FF 
00a50     20 E4 05 F1 | 	add	objptr, ##44576
00a54     F2 FA 61 FC | 	wrlong	result1, objptr
00a58     04 E4 05 F1 | 	add	objptr, #4
00a5c     FF FF FF FF 
00a60     F2 FE 6B FC | 	wrlong	##-1, objptr
00a64     22 00 00 FF 
00a68     7C E5 05 F1 | 	add	objptr, ##17788
00a6c     F2 00 68 FC | 	wrlong	#0, objptr
00a70     0F 00 00 FF 
00a74     24 E5 85 F1 | 	sub	objptr, ##7972
00a78     F2 00 68 FC | 	wrlong	#0, objptr
00a7c     6A 00 00 FF 
00a80     7C E4 85 F1 | 	sub	objptr, ##54396
00a84     00 1E 06 F6 | 	mov	local01, #0
00a88                 | LR__0020
00a88                 | ' 
00a88                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a88                 | ' 
00a88                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
00a88                 | ' 
00a88                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a88     00 20 06 F6 | 	mov	local02, #0
00a8c     20 4E 05 F1 | 	add	fp, #32
00a90     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a94                 | LR__0021
00a94     10 23 02 F6 | 	mov	local03, local02
00a98     02 22 66 F0 | 	shl	local03, #2
00a9c     A7 22 02 F1 | 	add	local03, fp
00aa0     11 01 68 FC | 	wrlong	#0, local03
00aa4     01 20 06 F1 | 	add	local02, #1
00aa8     7E 20 56 F2 | 	cmps	local02, #126 wc
00aac     E4 FF 9F CD |  if_b	jmp	#LR__0021
00ab0                 | LR__0022
00ab0     20 4E 85 F1 | 	sub	fp, #32
00ab4                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00ab4     00 20 06 F6 | 	mov	local02, #0
00ab8     55 00 00 FF 
00abc     0C E4 05 F1 | 	add	objptr, ##43532
00ac0     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00ac4                 | LR__0023
00ac4     10 25 02 F6 | 	mov	local04, local02
00ac8     03 24 66 F0 | 	shl	local04, #3
00acc     F2 24 02 F1 | 	add	local04, objptr
00ad0     70 01 00 FF 
00ad4     BA 17 06 F6 | 	mov	arg03, ##@LR__4777
00ad8     12 17 62 FC | 	wrlong	arg03, local04
00adc     10 25 02 F6 | 	mov	local04, local02
00ae0     03 24 66 F0 | 	shl	local04, #3
00ae4     F2 26 02 F6 | 	mov	local05, objptr
00ae8     F2 24 02 F1 | 	add	local04, objptr
00aec     00 28 06 F6 | 	mov	local06, #0
00af0     04 24 06 F1 | 	add	local04, #4
00af4     12 01 68 FC | 	wrlong	#0, local04
00af8     01 20 06 F1 | 	add	local02, #1
00afc     7E 20 56 F2 | 	cmps	local02, #126 wc
00b00     C0 FF 9F CD |  if_b	jmp	#LR__0023
00b04                 | LR__0024
00b04     02 00 00 FF 
00b08     10 E4 05 F1 | 	add	objptr, ##1040
00b0c     F2 12 02 FB | 	rdlong	arg01, objptr
00b10     57 00 00 FF 
00b14     1C E4 85 F1 | 	sub	objptr, ##44572
00b18     30 05 B2 FD | 	call	#__system__RTrim_S
00b1c     FD 12 02 F6 | 	mov	arg01, result1
00b20     68 04 B2 FD | 	call	#__system__LTrim_S
00b24     57 00 00 FF 
00b28     1C E4 05 F1 | 	add	objptr, ##44572
00b2c     F2 FA 61 FC | 	wrlong	result1, objptr
00b30     70 01 00 FF 
00b34     BB 25 06 F6 | 	mov	local04, ##@LR__4778
00b38     22 00 00 FF 
00b3c     C4 E5 05 F1 | 	add	objptr, ##17860
00b40     F2 24 62 FC | 	wrlong	local04, objptr
00b44     22 00 00 FF 
00b48     C4 E5 85 F1 | 	sub	objptr, ##17860
00b4c     F2 12 02 FB | 	rdlong	arg01, objptr
00b50     57 00 00 FF 
00b54     1C E4 85 F1 | 	sub	objptr, ##44572
00b58     09 2B 02 F6 | 	mov	local07, arg01
00b5c     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b60                 | LR__0025
00b60     15 FB C9 FA | 	rdbyte	result1, local07 wz
00b64     01 2A 06 51 |  if_ne	add	local07, #1
00b68     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b6c                 | LR__0026
00b6c     09 2B 8A F1 | 	sub	local07, arg01 wz
00b70     79 00 00 FF 
00b74     E4 E5 05 F1 | 	add	objptr, ##62436
00b78     F2 2A 62 FC | 	wrlong	local07, objptr
00b7c                 | ' if l=0 then goto 101
00b7c     79 00 00 FF 
00b80     E4 E5 85 F1 | 	sub	objptr, ##62436
00b84     B8 27 90 AD |  if_e	jmp	#LR__0149
00b88     79 00 00 FF 
00b8c     E8 E5 05 F1 | 	add	objptr, ##62440
00b90     F2 00 68 FC | 	wrlong	#0, objptr
00b94                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b94                 | ' for i=1 to len(line$)
00b94     01 20 06 F6 | 	mov	local02, #1
00b98     22 00 00 FF 
00b9c     CC E5 85 F1 | 	sub	objptr, ##17868
00ba0     F2 12 02 FB | 	rdlong	arg01, objptr
00ba4     57 00 00 FF 
00ba8     1C E4 85 F1 | 	sub	objptr, ##44572
00bac     09 2B 02 F6 | 	mov	local07, arg01
00bb0     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00bb4                 | LR__0027
00bb4     15 FB C9 FA | 	rdbyte	result1, local07 wz
00bb8     01 2A 06 51 |  if_ne	add	local07, #1
00bbc     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00bc0                 | LR__0028
00bc0     09 2B 82 F1 | 	sub	local07, arg01
00bc4     15 2D 02 F6 | 	mov	local08, local07
00bc8     01 2C 06 F1 | 	add	local08, #1
00bcc                 | LR__0029
00bcc     16 21 52 F2 | 	cmps	local02, local08 wc
00bd0     00 01 90 3D |  if_ae	jmp	#LR__0032
00bd4                 | ' 
00bd4                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bd4     57 00 00 FF 
00bd8     1C E4 05 F1 | 	add	objptr, ##44572
00bdc     F2 12 02 FB | 	rdlong	arg01, objptr
00be0     57 00 00 FF 
00be4     1C E4 85 F1 | 	sub	objptr, ##44572
00be8     10 15 02 F6 | 	mov	arg02, local02
00bec     01 16 06 F6 | 	mov	arg03, #1
00bf0     E0 00 B2 FD | 	call	#__system__Mid_S
00bf4     FD 12 02 F6 | 	mov	arg01, result1
00bf8     70 01 00 FF 
00bfc     BC 15 06 F6 | 	mov	arg02, ##@LR__4779
00c00     98 DF B1 FD | 	call	#__system___string_cmp
00c04     00 FA 0D F2 | 	cmp	result1, #0 wz
00c08     2C 00 90 5D |  if_ne	jmp	#LR__0030
00c0c     79 00 00 FF 
00c10     E8 E5 05 F1 | 	add	objptr, ##62440
00c14     F2 22 0A FB | 	rdlong	local03, objptr wz
00c18     79 00 00 FF 
00c1c     E8 E5 85 F1 | 	sub	objptr, ##62440
00c20     79 00 00 AF 
00c24     E8 E5 05 A1 |  if_e	add	objptr, ##62440
00c28     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c2c     79 00 00 AF 
00c30     E8 E5 85 A1 |  if_e	sub	objptr, ##62440
00c34     60 00 90 AD |  if_e	jmp	#LR__0031
00c38                 | LR__0030
00c38     57 00 00 FF 
00c3c     1C E4 05 F1 | 	add	objptr, ##44572
00c40     F2 12 02 FB | 	rdlong	arg01, objptr
00c44     57 00 00 FF 
00c48     1C E4 85 F1 | 	sub	objptr, ##44572
00c4c     10 15 02 F6 | 	mov	arg02, local02
00c50     01 16 06 F6 | 	mov	arg03, #1
00c54     7C 00 B2 FD | 	call	#__system__Mid_S
00c58     FD 12 02 F6 | 	mov	arg01, result1
00c5c     70 01 00 FF 
00c60     BE 15 06 F6 | 	mov	arg02, ##@LR__4780
00c64     34 DF B1 FD | 	call	#__system___string_cmp
00c68     00 FA 0D F2 | 	cmp	result1, #0 wz
00c6c     79 00 00 AF 
00c70     E8 E5 05 A1 |  if_e	add	objptr, ##62440
00c74     F2 22 02 AB |  if_e	rdlong	local03, objptr
00c78     79 00 00 AF 
00c7c     E8 E5 85 A1 |  if_e	sub	objptr, ##62440
00c80     01 22 0E A2 |  if_e	cmp	local03, #1 wz
00c84     79 00 00 AF 
00c88     E8 E5 05 A1 |  if_e	add	objptr, ##62440
00c8c     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c90     79 00 00 AF 
00c94     E8 E5 85 A1 |  if_e	sub	objptr, ##62440
00c98                 | LR__0031
00c98     10 25 02 F6 | 	mov	local04, local02
00c9c     03 24 66 F0 | 	shl	local04, #3
00ca0     55 00 00 FF 
00ca4     0C E4 05 F1 | 	add	objptr, ##43532
00ca8     F2 26 02 F6 | 	mov	local05, objptr
00cac     F2 24 02 F1 | 	add	local04, objptr
00cb0     24 00 00 FF 
00cb4     DC E5 05 F1 | 	add	objptr, ##18908
00cb8     F2 28 02 FB | 	rdlong	local06, objptr
00cbc     79 00 00 FF 
00cc0     E8 E5 85 F1 | 	sub	objptr, ##62440
00cc4     04 24 06 F1 | 	add	local04, #4
00cc8     12 29 62 FC | 	wrlong	local06, local04
00ccc     01 20 06 F1 | 	add	local02, #1
00cd0     F8 FE 9F FD | 	jmp	#LR__0029
00cd4                 | LR__0032
00cd4     01 20 06 F6 | 	mov	local02, #1
00cd8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cd8                 | LR__0033
00cd8     57 00 00 FF 
00cdc     1C E4 05 F1 | 	add	objptr, ##44572
00ce0     F2 12 02 FB | 	rdlong	arg01, objptr
00ce4     57 00 00 FF 
00ce8     1C E4 85 F1 | 	sub	objptr, ##44572
00cec     10 15 02 F6 | 	mov	arg02, local02
00cf0     01 16 06 F6 | 	mov	arg03, #1
00cf4     DC FF B1 FD | 	call	#__system__Mid_S
00cf8     FD 12 02 F6 | 	mov	arg01, result1
00cfc     70 01 00 FF 
00d00     C0 2F 06 F6 | 	mov	local09, ##@LR__4781
00d04     17 15 02 F6 | 	mov	arg02, local09
00d08     90 DE B1 FD | 	call	#__system___string_cmp
00d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
00d10     34 00 90 5D |  if_ne	jmp	#LR__0034
00d14     10 27 02 F6 | 	mov	local05, local02
00d18     03 26 66 F0 | 	shl	local05, #3
00d1c     55 00 00 FF 
00d20     0C E4 05 F1 | 	add	objptr, ##43532
00d24     F2 28 02 F6 | 	mov	local06, objptr
00d28     F2 26 02 F1 | 	add	local05, objptr
00d2c     04 26 06 F1 | 	add	local05, #4
00d30     13 31 02 FB | 	rdlong	local10, local05
00d34     04 26 86 F1 | 	sub	local05, #4
00d38     18 33 0A F6 | 	mov	local11, local10 wz
00d3c     55 00 00 FF 
00d40     0C E4 85 F1 | 	sub	objptr, ##43532
00d44     24 00 90 AD |  if_e	jmp	#LR__0035
00d48                 | LR__0034
00d48     79 00 00 FF 
00d4c     E4 E5 05 F1 | 	add	objptr, ##62436
00d50     F2 34 02 FB | 	rdlong	local12, objptr
00d54     79 00 00 FF 
00d58     E4 E5 85 F1 | 	sub	objptr, ##62436
00d5c     1A 37 02 F6 | 	mov	local13, local12
00d60     1B 21 52 F2 | 	cmps	local02, local13 wc
00d64     01 20 06 C1 |  if_b	add	local02, #1
00d68     6C FF 9F CD |  if_b	jmp	#LR__0033
00d6c                 | LR__0035
00d6c                 | ' 
00d6c                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d6c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d6c     79 00 00 FF 
00d70     E4 E5 05 F1 | 	add	objptr, ##62436
00d74     F2 24 02 FB | 	rdlong	local04, objptr
00d78     79 00 00 FF 
00d7c     E4 E5 85 F1 | 	sub	objptr, ##62436
00d80     12 21 52 F2 | 	cmps	local02, local04 wc
00d84     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d88     57 00 00 FF 
00d8c     1C E4 05 F1 | 	add	objptr, ##44572
00d90     F2 28 02 FB | 	rdlong	local06, objptr
00d94     57 00 00 FF 
00d98     1C E4 85 F1 | 	sub	objptr, ##44572
00d9c     14 13 02 F6 | 	mov	arg01, local06
00da0     09 2B 02 F6 | 	mov	local07, arg01
00da4     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00da8                 | LR__0036
00da8     15 FB C9 FA | 	rdbyte	result1, local07 wz
00dac     01 2A 06 51 |  if_ne	add	local07, #1
00db0     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00db4                 | LR__0037
00db4     09 2B 82 F1 | 	sub	local07, arg01
00db8     15 15 02 F6 | 	mov	arg02, local07
00dbc     10 15 82 F1 | 	sub	arg02, local02
00dc0     14 13 02 F6 | 	mov	arg01, local06
00dc4     7C FE B1 FD | 	call	#__system__Right_S
00dc8     FD 12 02 F6 | 	mov	arg01, result1
00dcc     7C 02 B2 FD | 	call	#__system__RTrim_S
00dd0     FD 12 02 F6 | 	mov	arg01, result1
00dd4     B4 01 B2 FD | 	call	#__system__LTrim_S
00dd8     79 00 00 FF 
00ddc     EC E5 05 F1 | 	add	objptr, ##62444
00de0     F2 FA 61 FC | 	wrlong	result1, objptr
00de4     22 00 00 FF 
00de8     D0 E5 85 F1 | 	sub	objptr, ##17872
00dec     F2 12 02 FB | 	rdlong	arg01, objptr
00df0     57 00 00 FF 
00df4     1C E4 85 F1 | 	sub	objptr, ##44572
00df8     01 20 86 F1 | 	sub	local02, #1
00dfc     10 15 02 F6 | 	mov	arg02, local02
00e00     B8 FD B1 FD | 	call	#__system__Left_S
00e04     FD 12 02 F6 | 	mov	arg01, result1
00e08     40 02 B2 FD | 	call	#__system__RTrim_S
00e0c     FD 12 02 F6 | 	mov	arg01, result1
00e10     78 01 B2 FD | 	call	#__system__LTrim_S
00e14     57 00 00 FF 
00e18     1C E4 05 F1 | 	add	objptr, ##44572
00e1c     F2 FA 61 FC | 	wrlong	result1, objptr
00e20     57 00 00 FF 
00e24     1C E4 85 F1 | 	sub	objptr, ##44572
00e28     1C 00 90 FD | 	jmp	#LR__0039
00e2c                 | LR__0038
00e2c     70 01 00 FF 
00e30     C2 25 06 F6 | 	mov	local04, ##@LR__4782
00e34     79 00 00 FF 
00e38     EC E5 05 F1 | 	add	objptr, ##62444
00e3c     F2 24 62 FC | 	wrlong	local04, objptr
00e40     79 00 00 FF 
00e44     EC E5 85 F1 | 	sub	objptr, ##62444
00e48                 | LR__0039
00e48                 | ' 'print "line$=";line$
00e48                 | ' 'print "rest$=";rest$
00e48                 | ' 
00e48                 | ' 
00e48                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e48     57 00 00 FF 
00e4c     24 E4 05 F1 | 	add	objptr, ##44580
00e50     F2 24 02 FB | 	rdlong	local04, objptr
00e54     57 00 00 FF 
00e58     24 E4 85 F1 | 	sub	objptr, ##44580
00e5c     FF FF 7F FF 
00e60     FF 25 0E F2 | 	cmp	local04, ##-1 wz
00e64     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e68     79 00 00 FF 
00e6c     EC E5 05 F1 | 	add	objptr, ##62444
00e70     F2 12 02 FB | 	rdlong	arg01, objptr
00e74     79 00 00 FF 
00e78     EC E5 85 F1 | 	sub	objptr, ##62444
00e7c     70 01 00 FF 
00e80     C3 15 06 F6 | 	mov	arg02, ##@LR__4783
00e84     14 DD B1 FD | 	call	#__system___string_cmp
00e88     00 FA 0D F2 | 	cmp	result1, #0 wz
00e8c     57 00 00 5F 
00e90     24 E4 05 51 |  if_ne	add	objptr, ##44580
00e94     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e98     57 00 00 5F 
00e9c     24 E4 85 51 |  if_ne	sub	objptr, ##44580
00ea0     08 01 90 5D |  if_ne	jmp	#LR__0044
00ea4                 | LR__0040
00ea4                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00ea4     57 00 00 FF 
00ea8     24 E4 05 F1 | 	add	objptr, ##44580
00eac     F2 24 02 FB | 	rdlong	local04, objptr
00eb0     57 00 00 FF 
00eb4     24 E4 85 F1 | 	sub	objptr, ##44580
00eb8     FF FF 7F FF 
00ebc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
00ec0     3C 00 90 5D |  if_ne	jmp	#LR__0041
00ec4     79 00 00 FF 
00ec8     EC E5 05 F1 | 	add	objptr, ##62444
00ecc     F2 12 02 FB | 	rdlong	arg01, objptr
00ed0     79 00 00 FF 
00ed4     EC E5 85 F1 | 	sub	objptr, ##62444
00ed8     70 01 00 FF 
00edc     C4 15 06 F6 | 	mov	arg02, ##@LR__4784
00ee0     B8 DC B1 FD | 	call	#__system___string_cmp
00ee4     00 FA 0D F2 | 	cmp	result1, #0 wz
00ee8     57 00 00 AF 
00eec     24 E4 05 A1 |  if_e	add	objptr, ##44580
00ef0     F2 06 68 AC |  if_e	wrlong	#3, objptr
00ef4     57 00 00 AF 
00ef8     24 E4 85 A1 |  if_e	sub	objptr, ##44580
00efc     AC 00 90 AD |  if_e	jmp	#LR__0044
00f00                 | LR__0041
00f00                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00f00     57 00 00 FF 
00f04     24 E4 05 F1 | 	add	objptr, ##44580
00f08     F2 24 02 FB | 	rdlong	local04, objptr
00f0c     57 00 00 FF 
00f10     24 E4 85 F1 | 	sub	objptr, ##44580
00f14     04 24 0E F2 | 	cmp	local04, #4 wz
00f18     3C 00 90 5D |  if_ne	jmp	#LR__0042
00f1c     79 00 00 FF 
00f20     EC E5 05 F1 | 	add	objptr, ##62444
00f24     F2 12 02 FB | 	rdlong	arg01, objptr
00f28     79 00 00 FF 
00f2c     EC E5 85 F1 | 	sub	objptr, ##62444
00f30     70 01 00 FF 
00f34     C5 15 06 F6 | 	mov	arg02, ##@LR__4785
00f38     60 DC B1 FD | 	call	#__system___string_cmp
00f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f40     57 00 00 5F 
00f44     24 E4 05 51 |  if_ne	add	objptr, ##44580
00f48     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f4c     57 00 00 5F 
00f50     24 E4 85 51 |  if_ne	sub	objptr, ##44580
00f54     54 00 90 5D |  if_ne	jmp	#LR__0044
00f58                 | LR__0042
00f58                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f58     57 00 00 FF 
00f5c     24 E4 05 F1 | 	add	objptr, ##44580
00f60     F2 24 02 FB | 	rdlong	local04, objptr
00f64     57 00 00 FF 
00f68     24 E4 85 F1 | 	sub	objptr, ##44580
00f6c     04 24 0E F2 | 	cmp	local04, #4 wz
00f70     38 00 90 5D |  if_ne	jmp	#LR__0043
00f74     79 00 00 FF 
00f78     EC E5 05 F1 | 	add	objptr, ##62444
00f7c     F2 12 02 FB | 	rdlong	arg01, objptr
00f80     79 00 00 FF 
00f84     EC E5 85 F1 | 	sub	objptr, ##62444
00f88     70 01 00 FF 
00f8c     C6 15 06 F6 | 	mov	arg02, ##@LR__4786
00f90     08 DC B1 FD | 	call	#__system___string_cmp
00f94     00 FA 0D F2 | 	cmp	result1, #0 wz
00f98     57 00 00 AF 
00f9c     24 E4 05 A1 |  if_e	add	objptr, ##44580
00fa0     F2 04 68 AC |  if_e	wrlong	#2, objptr
00fa4     57 00 00 AF 
00fa8     24 E4 85 A1 |  if_e	sub	objptr, ##44580
00fac                 | LR__0043
00fac                 | LR__0044
00fac     20 4E 05 F1 | 	add	fp, #32
00fb0     A7 00 68 FC | 	wrlong	#0, fp
00fb4     20 4E 85 F1 | 	sub	fp, #32
00fb8     00 20 06 F6 | 	mov	local02, #0
00fbc     01 38 06 F6 | 	mov	local14, #1
00fc0                 | ' 
00fc0                 | ' ' 1b: find separators
00fc0                 | ' 
00fc0                 | ' 107
00fc0                 | ' separators(0)=0
00fc0                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fc0                 | LR__0045
00fc0     01 20 06 F1 | 	add	local02, #1
00fc4     57 00 00 FF 
00fc8     1C E4 05 F1 | 	add	objptr, ##44572
00fcc     F2 12 02 FB | 	rdlong	arg01, objptr
00fd0     57 00 00 FF 
00fd4     1C E4 85 F1 | 	sub	objptr, ##44572
00fd8     10 15 02 F6 | 	mov	arg02, local02
00fdc     01 16 06 F6 | 	mov	arg03, #1
00fe0     F0 FC B1 FD | 	call	#__system__Mid_S
00fe4     79 00 00 FF 
00fe8     F0 E5 05 F1 | 	add	objptr, ##62448
00fec     F2 FA 61 FC | 	wrlong	result1, objptr
00ff0                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00ff0     FD 12 02 F6 | 	mov	arg01, result1
00ff4     79 00 00 FF 
00ff8     F0 E5 85 F1 | 	sub	objptr, ##62448
00ffc     B8 29 B0 FD | 	call	#_isseparator
01000     00 FA 0D F2 | 	cmp	result1, #0 wz
01004     1C 00 90 AD |  if_e	jmp	#LR__0046
01008     1C 23 02 F6 | 	mov	local03, local14
0100c     02 22 66 F0 | 	shl	local03, #2
01010     20 4E 05 F1 | 	add	fp, #32
01014     A7 22 02 F1 | 	add	local03, fp
01018     11 21 62 FC | 	wrlong	local02, local03
0101c     01 38 06 F1 | 	add	local14, #1
01020     20 4E 85 F1 | 	sub	fp, #32
01024                 | LR__0046
01024     79 00 00 FF 
01028     E4 E5 05 F1 | 	add	objptr, ##62436
0102c     F2 24 02 FB | 	rdlong	local04, objptr
01030     79 00 00 FF 
01034     E4 E5 85 F1 | 	sub	objptr, ##62436
01038     12 21 5A F2 | 	cmps	local02, local04 wcz
0103c     80 FF 9F ED |  if_be	jmp	#LR__0045
01040     1C 23 02 F6 | 	mov	local03, local14
01044     02 22 66 F0 | 	shl	local03, #2
01048     20 4E 05 F1 | 	add	fp, #32
0104c     A7 22 02 F1 | 	add	local03, fp
01050     11 21 62 FC | 	wrlong	local02, local03
01054     00 3A 06 F6 | 	mov	local15, #0
01058                 | ' for i=0 to j-1 
01058     00 20 06 F6 | 	mov	local02, #0
0105c     1C 3D 02 F6 | 	mov	local16, local14
01060     20 4E 85 F1 | 	sub	fp, #32
01064                 | LR__0047
01064     1E 21 52 F2 | 	cmps	local02, local16 wc
01068     88 01 90 3D |  if_ae	jmp	#LR__0051
0106c     10 23 02 F6 | 	mov	local03, local02
01070     02 22 66 F0 | 	shl	local03, #2
01074     20 4E 05 F1 | 	add	fp, #32
01078     A7 22 02 F1 | 	add	local03, fp
0107c     11 27 02 FB | 	rdlong	local05, local03
01080     79 00 00 FF 
01084     F8 E5 05 F1 | 	add	objptr, ##62456
01088     F2 26 62 FC | 	wrlong	local05, objptr
0108c     10 23 02 F6 | 	mov	local03, local02
01090     01 22 06 F1 | 	add	local03, #1
01094     02 22 66 F0 | 	shl	local03, #2
01098     A7 2E 02 F6 | 	mov	local09, fp
0109c     A7 22 02 F1 | 	add	local03, fp
010a0     11 27 02 FB | 	rdlong	local05, local03
010a4     04 E4 05 F1 | 	add	objptr, #4
010a8     F2 26 62 FC | 	wrlong	local05, objptr
010ac                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
010ac     04 E4 85 F1 | 	sub	objptr, #4
010b0     F2 24 02 FB | 	rdlong	local04, objptr
010b4     79 00 00 FF 
010b8     F8 E5 85 F1 | 	sub	objptr, ##62456
010bc     01 24 56 F2 | 	cmps	local04, #1 wc
010c0     20 4E 85 F1 | 	sub	fp, #32
010c4     84 00 90 CD |  if_b	jmp	#LR__0049
010c8     57 00 00 FF 
010cc     1C E4 05 F1 | 	add	objptr, ##44572
010d0     F2 12 02 FB | 	rdlong	arg01, objptr
010d4     22 00 00 FF 
010d8     DC E5 05 F1 | 	add	objptr, ##17884
010dc     F2 14 02 FB | 	rdlong	arg02, objptr
010e0     79 00 00 FF 
010e4     F8 E5 85 F1 | 	sub	objptr, ##62456
010e8     01 16 06 F6 | 	mov	arg03, #1
010ec     E4 FB B1 FD | 	call	#__system__Mid_S
010f0     7A 00 00 FF 
010f4     00 E4 05 F1 | 	add	objptr, ##62464
010f8     F2 FA 61 FC | 	wrlong	result1, objptr
010fc     7A 00 00 FF 
01100     00 E4 85 F1 | 	sub	objptr, ##62464
01104     FD 12 02 F6 | 	mov	arg01, result1
01108     70 01 00 FF 
0110c     C7 15 06 F6 | 	mov	arg02, ##@LR__4787
01110     88 DA B1 FD | 	call	#__system___string_cmp
01114     00 FA 0D F2 | 	cmp	result1, #0 wz
01118     30 00 90 AD |  if_e	jmp	#LR__0048
0111c     1D 2F 02 F6 | 	mov	local09, local15
01120     03 2E 66 F0 | 	shl	local09, #3
01124     55 00 00 FF 
01128     0C E4 05 F1 | 	add	objptr, ##43532
0112c     F2 2E 02 F1 | 	add	local09, objptr
01130     24 00 00 FF 
01134     F4 E5 05 F1 | 	add	objptr, ##18932
01138     F2 28 02 FB | 	rdlong	local06, objptr
0113c     7A 00 00 FF 
01140     00 E4 85 F1 | 	sub	objptr, ##62464
01144     17 29 62 FC | 	wrlong	local06, local09
01148     01 3A 06 F1 | 	add	local15, #1
0114c                 | LR__0048
0114c                 | LR__0049
0114c     57 00 00 FF 
01150     1C E4 05 F1 | 	add	objptr, ##44572
01154     F2 12 02 FB | 	rdlong	arg01, objptr
01158     22 00 00 FF 
0115c     DC E5 05 F1 | 	add	objptr, ##17884
01160     F2 14 02 FB | 	rdlong	arg02, objptr
01164     01 14 06 F1 | 	add	arg02, #1
01168     04 E4 05 F1 | 	add	objptr, #4
0116c     F2 16 02 FB | 	rdlong	arg03, objptr
01170     04 E4 85 F1 | 	sub	objptr, #4
01174     F2 30 02 FB | 	rdlong	local10, objptr
01178     79 00 00 FF 
0117c     F8 E5 85 F1 | 	sub	objptr, ##62456
01180     18 33 02 F6 | 	mov	local11, local10
01184     19 17 82 F1 | 	sub	arg03, local11
01188     01 16 86 F1 | 	sub	arg03, #1
0118c     44 FB B1 FD | 	call	#__system__Mid_S
01190     7A 00 00 FF 
01194     00 E4 05 F1 | 	add	objptr, ##62464
01198     F2 FA 61 FC | 	wrlong	result1, objptr
0119c     7A 00 00 FF 
011a0     00 E4 85 F1 | 	sub	objptr, ##62464
011a4     FD 12 02 F6 | 	mov	arg01, result1
011a8     70 01 00 FF 
011ac     C8 15 06 F6 | 	mov	arg02, ##@LR__4788
011b0     E8 D9 B1 FD | 	call	#__system___string_cmp
011b4     00 FA 0D F2 | 	cmp	result1, #0 wz
011b8     30 00 90 AD |  if_e	jmp	#LR__0050
011bc     1D 2F 02 F6 | 	mov	local09, local15
011c0     03 2E 66 F0 | 	shl	local09, #3
011c4     55 00 00 FF 
011c8     0C E4 05 F1 | 	add	objptr, ##43532
011cc     F2 2E 02 F1 | 	add	local09, objptr
011d0     24 00 00 FF 
011d4     F4 E5 05 F1 | 	add	objptr, ##18932
011d8     F2 28 02 FB | 	rdlong	local06, objptr
011dc     7A 00 00 FF 
011e0     00 E4 85 F1 | 	sub	objptr, ##62464
011e4     17 29 62 FC | 	wrlong	local06, local09
011e8     01 3A 06 F1 | 	add	local15, #1
011ec                 | LR__0050
011ec     01 20 06 F1 | 	add	local02, #1
011f0     70 FE 9F FD | 	jmp	#LR__0047
011f4                 | LR__0051
011f4     00 20 06 F6 | 	mov	local02, #0
011f8                 | ' 
011f8                 | ' ' 1d : find strings
011f8                 | ' 
011f8                 | ' i=0
011f8                 | ' do
011f8                 | LR__0052
011f8                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011f8     10 27 02 F6 | 	mov	local05, local02
011fc     03 26 66 F0 | 	shl	local05, #3
01200     55 00 00 FF 
01204     0C E4 05 F1 | 	add	objptr, ##43532
01208     F2 26 02 F1 | 	add	local05, objptr
0120c     13 13 02 FB | 	rdlong	arg01, local05
01210     70 01 00 FF 
01214     C9 15 06 F6 | 	mov	arg02, ##@LR__4789
01218     55 00 00 FF 
0121c     0C E4 85 F1 | 	sub	objptr, ##43532
01220     78 D9 B1 FD | 	call	#__system___string_cmp
01224     00 FA 0D F2 | 	cmp	result1, #0 wz
01228     01 20 06 51 |  if_ne	add	local02, #1
0122c     50 01 90 5D |  if_ne	jmp	#LR__0057
01230     10 3F 02 F6 | 	mov	local17, local02
01234                 | LR__0053
01234     10 2F 02 F6 | 	mov	local09, local02
01238     01 2E 06 F1 | 	add	local09, #1
0123c     03 2E 66 F0 | 	shl	local09, #3
01240     55 00 00 FF 
01244     0C E4 05 F1 | 	add	objptr, ##43532
01248     F2 2E 02 F1 | 	add	local09, objptr
0124c     17 31 02 FB | 	rdlong	local10, local09
01250     24 00 00 FF 
01254     F4 E5 05 F1 | 	add	objptr, ##18932
01258     F2 30 62 FC | 	wrlong	local10, objptr
0125c     1F 2F 02 F6 | 	mov	local09, local17
01260     03 2E 66 F0 | 	shl	local09, #3
01264     24 00 00 FF 
01268     F4 E5 85 F1 | 	sub	objptr, ##18932
0126c     F2 2E 02 F1 | 	add	local09, objptr
01270     1F 37 02 F6 | 	mov	local13, local17
01274     03 36 66 F0 | 	shl	local13, #3
01278     F2 36 02 F1 | 	add	local13, objptr
0127c     1B 13 02 FB | 	rdlong	arg01, local13
01280     55 00 00 FF 
01284     0C E4 85 F1 | 	sub	objptr, ##43532
01288     18 33 02 F6 | 	mov	local11, local10
0128c     19 15 02 F6 | 	mov	arg02, local11
01290     3C D9 B1 FD | 	call	#__system___string_concat
01294     17 FB 61 FC | 	wrlong	result1, local09
01298     10 39 02 F6 | 	mov	local14, local02
0129c     01 38 06 F1 | 	add	local14, #1
012a0     1D 41 02 F6 | 	mov	local18, local15
012a4     01 40 06 F1 | 	add	local18, #1
012a8     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
012ac                 | LR__0054
012ac     20 39 52 F2 | 	cmps	local14, local18 wc
012b0     70 00 90 3D |  if_ae	jmp	#LR__0056
012b4     1C 27 02 F6 | 	mov	local05, local14
012b8     01 26 06 F1 | 	add	local05, #1
012bc     03 26 66 F0 | 	shl	local05, #3
012c0     55 00 00 FF 
012c4     0C E4 05 F1 | 	add	objptr, ##43532
012c8     F2 26 02 F1 | 	add	local05, objptr
012cc     13 25 02 FB | 	rdlong	local04, local05
012d0     1C 29 02 F6 | 	mov	local06, local14
012d4     01 28 06 F1 | 	add	local06, #1
012d8     03 28 66 F0 | 	shl	local06, #3
012dc     F2 28 02 F1 | 	add	local06, objptr
012e0     04 28 06 F1 | 	add	local06, #4
012e4     14 23 02 FB | 	rdlong	local03, local06
012e8     1C 29 02 F6 | 	mov	local06, local14
012ec     03 28 66 F0 | 	shl	local06, #3
012f0     F2 32 02 F6 | 	mov	local11, objptr
012f4     F2 28 02 F1 | 	add	local06, objptr
012f8     14 25 62 FC | 	wrlong	local04, local06
012fc     1C 31 02 F6 | 	mov	local10, local14
01300     18 35 02 F6 | 	mov	local12, local10
01304     03 34 66 F0 | 	shl	local12, #3
01308     F2 34 02 F1 | 	add	local12, objptr
0130c     04 34 06 F1 | 	add	local12, #4
01310     1A 23 62 FC | 	wrlong	local03, local12
01314     01 38 06 F1 | 	add	local14, #1
01318     55 00 00 FF 
0131c     0C E4 85 F1 | 	sub	objptr, ##43532
01320     88 FF 9F FD | 	jmp	#LR__0054
01324                 | LR__0055
01324                 | LR__0056
01324     01 3A 86 F1 | 	sub	local15, #1
01328     7A 00 00 FF 
0132c     00 E4 05 F1 | 	add	objptr, ##62464
01330     F2 12 02 FB | 	rdlong	arg01, objptr
01334     7A 00 00 FF 
01338     00 E4 85 F1 | 	sub	objptr, ##62464
0133c     70 01 00 FF 
01340     CB 15 06 F6 | 	mov	arg02, ##@LR__4790
01344     54 D8 B1 FD | 	call	#__system___string_cmp
01348     00 FA 0D F2 | 	cmp	result1, #0 wz
0134c     1D 21 52 52 |  if_ne	cmps	local02, local15 wc
01350     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
01354                 | '   if p$<>"""" then k+=1:i+=1
01354     7A 00 00 FF 
01358     00 E4 05 F1 | 	add	objptr, ##62464
0135c     F2 12 02 FB | 	rdlong	arg01, objptr
01360     7A 00 00 FF 
01364     00 E4 85 F1 | 	sub	objptr, ##62464
01368     70 01 00 FF 
0136c     CD 15 06 F6 | 	mov	arg02, ##@LR__4791
01370     28 D8 B1 FD | 	call	#__system___string_cmp
01374     00 FA 0D F2 | 	cmp	result1, #0 wz
01378     01 3A 06 51 |  if_ne	add	local15, #1
0137c     01 20 06 51 |  if_ne	add	local02, #1
01380                 | LR__0057
01380     1D 21 52 F2 | 	cmps	local02, local15 wc
01384     70 FE 9F CD |  if_b	jmp	#LR__0052
01388     00 20 06 F6 | 	mov	local02, #0
0138c                 | ' 
0138c                 | ' ' 1e : concatenate strings if "" detected between
0138c                 | '  
0138c                 | ' i=0 : do
0138c                 | LR__0058
0138c                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
0138c     10 27 02 F6 | 	mov	local05, local02
01390     03 26 66 F0 | 	shl	local05, #3
01394     55 00 00 FF 
01398     0C E4 05 F1 | 	add	objptr, ##43532
0139c     F2 26 02 F1 | 	add	local05, objptr
013a0     13 13 02 FB | 	rdlong	arg01, local05
013a4     01 14 06 F6 | 	mov	arg02, #1
013a8     55 00 00 FF 
013ac     0C E4 85 F1 | 	sub	objptr, ##43532
013b0     90 F8 B1 FD | 	call	#__system__Right_S
013b4     FD 12 02 F6 | 	mov	arg01, result1
013b8     70 01 00 FF 
013bc     CF 15 06 F6 | 	mov	arg02, ##@LR__4792
013c0     D8 D7 B1 FD | 	call	#__system___string_cmp
013c4     00 FA 0D F2 | 	cmp	result1, #0 wz
013c8     78 01 90 5D |  if_ne	jmp	#LR__0064
013cc     10 29 02 F6 | 	mov	local06, local02
013d0     01 28 06 F1 | 	add	local06, #1
013d4     03 28 66 F0 | 	shl	local06, #3
013d8     55 00 00 FF 
013dc     0C E4 05 F1 | 	add	objptr, ##43532
013e0     F2 32 02 F6 | 	mov	local11, objptr
013e4     F2 28 02 F1 | 	add	local06, objptr
013e8     14 13 02 FB | 	rdlong	arg01, local06
013ec     01 14 06 F6 | 	mov	arg02, #1
013f0     55 00 00 FF 
013f4     0C E4 85 F1 | 	sub	objptr, ##43532
013f8     C0 F7 B1 FD | 	call	#__system__Left_S
013fc     FD 12 02 F6 | 	mov	arg01, result1
01400     70 01 00 FF 
01404     D1 15 06 F6 | 	mov	arg02, ##@LR__4793
01408     90 D7 B1 FD | 	call	#__system___string_cmp
0140c     00 FA 0D F2 | 	cmp	result1, #0 wz
01410     30 01 90 5D |  if_ne	jmp	#LR__0064
01414     10 2F 02 F6 | 	mov	local09, local02
01418     03 2E 66 F0 | 	shl	local09, #3
0141c     55 00 00 FF 
01420     0C E4 05 F1 | 	add	objptr, ##43532
01424     F2 2E 02 F1 | 	add	local09, objptr
01428     10 37 02 F6 | 	mov	local13, local02
0142c     03 36 66 F0 | 	shl	local13, #3
01430     F2 36 02 F1 | 	add	local13, objptr
01434     1B 29 02 FB | 	rdlong	local06, local13
01438     10 35 02 F6 | 	mov	local12, local02
0143c     01 34 06 F1 | 	add	local12, #1
01440     03 34 66 F0 | 	shl	local12, #3
01444     F2 34 02 F1 | 	add	local12, objptr
01448     1A 33 02 FB | 	rdlong	local11, local12
0144c     10 43 02 F6 | 	mov	local19, local02
01450     01 42 06 F1 | 	add	local19, #1
01454     21 45 02 F6 | 	mov	local20, local19
01458     03 44 66 F0 | 	shl	local20, #3
0145c     F2 46 02 F6 | 	mov	local21, objptr
01460     F2 44 02 F1 | 	add	local20, objptr
01464     22 13 02 FB | 	rdlong	arg01, local20
01468     55 00 00 FF 
0146c     0C E4 85 F1 | 	sub	objptr, ##43532
01470     09 2B 02 F6 | 	mov	local07, arg01
01474     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01478                 | LR__0059
01478     15 FB C9 FA | 	rdbyte	result1, local07 wz
0147c     01 2A 06 51 |  if_ne	add	local07, #1
01480     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
01484                 | LR__0060
01484     09 2B 82 F1 | 	sub	local07, arg01
01488     15 31 02 F6 | 	mov	local10, local07
0148c     01 30 86 F1 | 	sub	local10, #1
01490     19 13 02 F6 | 	mov	arg01, local11
01494     18 15 02 F6 | 	mov	arg02, local10
01498     A8 F7 B1 FD | 	call	#__system__Right_S
0149c     FD 32 02 F6 | 	mov	local11, result1
014a0     14 13 02 F6 | 	mov	arg01, local06
014a4     19 15 02 F6 | 	mov	arg02, local11
014a8     24 D7 B1 FD | 	call	#__system___string_concat
014ac     17 FB 61 FC | 	wrlong	result1, local09
014b0                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
014b0     10 39 02 F6 | 	mov	local14, local02
014b4     01 38 06 F1 | 	add	local14, #1
014b8     1D 49 02 F6 | 	mov	local22, local15
014bc     01 48 06 F1 | 	add	local22, #1
014c0     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014c4                 | LR__0061
014c4     24 39 52 F2 | 	cmps	local14, local22 wc
014c8     70 00 90 3D |  if_ae	jmp	#LR__0063
014cc     1C 27 02 F6 | 	mov	local05, local14
014d0     01 26 06 F1 | 	add	local05, #1
014d4     03 26 66 F0 | 	shl	local05, #3
014d8     55 00 00 FF 
014dc     0C E4 05 F1 | 	add	objptr, ##43532
014e0     F2 26 02 F1 | 	add	local05, objptr
014e4     13 25 02 FB | 	rdlong	local04, local05
014e8     1C 29 02 F6 | 	mov	local06, local14
014ec     01 28 06 F1 | 	add	local06, #1
014f0     03 28 66 F0 | 	shl	local06, #3
014f4     F2 28 02 F1 | 	add	local06, objptr
014f8     04 28 06 F1 | 	add	local06, #4
014fc     14 23 02 FB | 	rdlong	local03, local06
01500     1C 29 02 F6 | 	mov	local06, local14
01504     03 28 66 F0 | 	shl	local06, #3
01508     F2 32 02 F6 | 	mov	local11, objptr
0150c     F2 28 02 F1 | 	add	local06, objptr
01510     14 25 62 FC | 	wrlong	local04, local06
01514     1C 31 02 F6 | 	mov	local10, local14
01518     18 35 02 F6 | 	mov	local12, local10
0151c     03 34 66 F0 | 	shl	local12, #3
01520     F2 34 02 F1 | 	add	local12, objptr
01524     04 34 06 F1 | 	add	local12, #4
01528     1A 23 62 FC | 	wrlong	local03, local12
0152c     01 38 06 F1 | 	add	local14, #1
01530     55 00 00 FF 
01534     0C E4 85 F1 | 	sub	objptr, ##43532
01538     88 FF 9F FD | 	jmp	#LR__0061
0153c                 | LR__0062
0153c                 | LR__0063
0153c     01 20 86 F1 | 	sub	local02, #1
01540     01 3A 86 F1 | 	sub	local15, #1
01544                 | LR__0064
01544     01 20 06 F1 | 	add	local02, #1
01548     1D 21 52 F2 | 	cmps	local02, local15 wc
0154c     3C FE 9F CD |  if_b	jmp	#LR__0058
01550     00 20 06 F6 | 	mov	local02, #0
01554                 | '  
01554                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
01554                 | '  
01554                 | ' i=0 : do
01554                 | LR__0065
01554     10 2F 02 F6 | 	mov	local09, local02
01558     03 2E 66 F0 | 	shl	local09, #3
0155c     55 00 00 FF 
01560     0C E4 05 F1 | 	add	objptr, ##43532
01564     F2 2E 02 F1 | 	add	local09, objptr
01568     17 29 02 FB | 	rdlong	local06, local09
0156c     24 00 00 FF 
01570     FC E5 05 F1 | 	add	objptr, ##18940
01574     F2 28 62 FC | 	wrlong	local06, objptr
01578     10 2F 02 F6 | 	mov	local09, local02
0157c     01 2E 06 F1 | 	add	local09, #1
01580     03 2E 66 F0 | 	shl	local09, #3
01584     24 00 00 FF 
01588     FC E5 85 F1 | 	sub	objptr, ##18940
0158c     F2 2E 02 F1 | 	add	local09, objptr
01590     17 29 02 FB | 	rdlong	local06, local09
01594     25 00 00 FF 
01598     00 E4 05 F1 | 	add	objptr, ##18944
0159c     F2 28 62 FC | 	wrlong	local06, objptr
015a0                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
015a0     04 E4 85 F1 | 	sub	objptr, #4
015a4     F2 12 02 FB | 	rdlong	arg01, objptr
015a8     7A 00 00 FF 
015ac     08 E4 85 F1 | 	sub	objptr, ##62472
015b0     70 01 00 FF 
015b4     D3 15 06 F6 | 	mov	arg02, ##@LR__4794
015b8     E0 D5 B1 FD | 	call	#__system___string_cmp
015bc     00 FA 0D F2 | 	cmp	result1, #0 wz
015c0     04 01 90 AD |  if_e	jmp	#LR__0066
015c4     7A 00 00 FF 
015c8     08 E4 05 F1 | 	add	objptr, ##62472
015cc     F2 12 02 FB | 	rdlong	arg01, objptr
015d0     7A 00 00 FF 
015d4     08 E4 85 F1 | 	sub	objptr, ##62472
015d8     70 01 00 FF 
015dc     D5 15 06 F6 | 	mov	arg02, ##@LR__4795
015e0     B8 D5 B1 FD | 	call	#__system___string_cmp
015e4     FD 22 0A F6 | 	mov	local03, result1 wz
015e8     DC 00 90 AD |  if_e	jmp	#LR__0066
015ec     7A 00 00 FF 
015f0     08 E4 05 F1 | 	add	objptr, ##62472
015f4     F2 12 02 FB | 	rdlong	arg01, objptr
015f8     7A 00 00 FF 
015fc     08 E4 85 F1 | 	sub	objptr, ##62472
01600     70 01 00 FF 
01604     D7 15 06 F6 | 	mov	arg02, ##@LR__4796
01608     90 D5 B1 FD | 	call	#__system___string_cmp
0160c     00 FA 0D F2 | 	cmp	result1, #0 wz
01610     B4 00 90 AD |  if_e	jmp	#LR__0066
01614     7A 00 00 FF 
01618     08 E4 05 F1 | 	add	objptr, ##62472
0161c     F2 12 02 FB | 	rdlong	arg01, objptr
01620     7A 00 00 FF 
01624     08 E4 85 F1 | 	sub	objptr, ##62472
01628     70 01 00 FF 
0162c     D9 33 06 F6 | 	mov	local11, ##@LR__4797
01630     19 15 02 F6 | 	mov	arg02, local11
01634     64 D5 B1 FD | 	call	#__system___string_cmp
01638     00 FA 0D F2 | 	cmp	result1, #0 wz
0163c     88 00 90 AD |  if_e	jmp	#LR__0066
01640     7A 00 00 FF 
01644     08 E4 05 F1 | 	add	objptr, ##62472
01648     F2 12 02 FB | 	rdlong	arg01, objptr
0164c     7A 00 00 FF 
01650     08 E4 85 F1 | 	sub	objptr, ##62472
01654     70 01 00 FF 
01658     DB 31 06 F6 | 	mov	local10, ##@LR__4798
0165c     18 33 02 F6 | 	mov	local11, local10
01660     19 15 02 F6 | 	mov	arg02, local11
01664     34 D5 B1 FD | 	call	#__system___string_cmp
01668     00 FA 0D F2 | 	cmp	result1, #0 wz
0166c     58 00 90 AD |  if_e	jmp	#LR__0066
01670     7A 00 00 FF 
01674     08 E4 05 F1 | 	add	objptr, ##62472
01678     F2 12 02 FB | 	rdlong	arg01, objptr
0167c     7A 00 00 FF 
01680     08 E4 85 F1 | 	sub	objptr, ##62472
01684     70 01 00 FF 
01688     DD 31 06 F6 | 	mov	local10, ##@LR__4799
0168c     18 15 02 F6 | 	mov	arg02, local10
01690     08 D5 B1 FD | 	call	#__system___string_cmp
01694     FD 32 0A F6 | 	mov	local11, result1 wz
01698     2C 00 90 AD |  if_e	jmp	#LR__0066
0169c     7A 00 00 FF 
016a0     08 E4 05 F1 | 	add	objptr, ##62472
016a4     F2 12 02 FB | 	rdlong	arg01, objptr
016a8     7A 00 00 FF 
016ac     08 E4 85 F1 | 	sub	objptr, ##62472
016b0     70 01 00 FF 
016b4     DF 37 06 F6 | 	mov	local13, ##@LR__4800
016b8     1B 15 02 F6 | 	mov	arg02, local13
016bc     DC D4 B1 FD | 	call	#__system___string_cmp
016c0     FD 30 0A F6 | 	mov	local10, result1 wz
016c4     30 00 90 5D |  if_ne	jmp	#LR__0067
016c8                 | LR__0066
016c8     7A 00 00 FF 
016cc     0C E4 05 F1 | 	add	objptr, ##62476
016d0     F2 12 02 FB | 	rdlong	arg01, objptr
016d4     7A 00 00 FF 
016d8     0C E4 85 F1 | 	sub	objptr, ##62476
016dc     70 01 00 FF 
016e0     E1 4B 06 F6 | 	mov	local23, ##@LR__4801
016e4     25 35 02 F6 | 	mov	local12, local23
016e8     1A 15 02 F6 | 	mov	arg02, local12
016ec     AC D4 B1 FD | 	call	#__system___string_cmp
016f0     FD 36 0A F6 | 	mov	local13, result1 wz
016f4     18 01 90 AD |  if_e	jmp	#LR__0070
016f8                 | LR__0067
016f8     7A 00 00 FF 
016fc     08 E4 05 F1 | 	add	objptr, ##62472
01700     F2 12 02 FB | 	rdlong	arg01, objptr
01704     7A 00 00 FF 
01708     08 E4 85 F1 | 	sub	objptr, ##62472
0170c     70 01 00 FF 
01710     E3 4B 06 F6 | 	mov	local23, ##@LR__4802
01714     25 15 02 F6 | 	mov	arg02, local23
01718     80 D4 B1 FD | 	call	#__system___string_cmp
0171c     FD 34 0A F6 | 	mov	local12, result1 wz
01720     30 00 90 5D |  if_ne	jmp	#LR__0068
01724     7A 00 00 FF 
01728     0C E4 05 F1 | 	add	objptr, ##62476
0172c     F2 12 02 FB | 	rdlong	arg01, objptr
01730     7A 00 00 FF 
01734     0C E4 85 F1 | 	sub	objptr, ##62476
01738     70 01 00 FF 
0173c     E5 45 06 F6 | 	mov	local20, ##@LR__4803
01740     22 43 02 F6 | 	mov	local19, local20
01744     21 15 02 F6 | 	mov	arg02, local19
01748     50 D4 B1 FD | 	call	#__system___string_cmp
0174c     FD 4A 0A F6 | 	mov	local23, result1 wz
01750     BC 00 90 AD |  if_e	jmp	#LR__0070
01754                 | LR__0068
01754     7A 00 00 FF 
01758     08 E4 05 F1 | 	add	objptr, ##62472
0175c     F2 12 02 FB | 	rdlong	arg01, objptr
01760     7A 00 00 FF 
01764     08 E4 85 F1 | 	sub	objptr, ##62472
01768     70 01 00 FF 
0176c     E7 45 06 F6 | 	mov	local20, ##@LR__4804
01770     22 15 02 F6 | 	mov	arg02, local20
01774     24 D4 B1 FD | 	call	#__system___string_cmp
01778     FD 42 0A F6 | 	mov	local19, result1 wz
0177c     30 00 90 5D |  if_ne	jmp	#LR__0069
01780     7A 00 00 FF 
01784     0C E4 05 F1 | 	add	objptr, ##62476
01788     F2 12 02 FB | 	rdlong	arg01, objptr
0178c     7A 00 00 FF 
01790     0C E4 85 F1 | 	sub	objptr, ##62476
01794     70 01 00 FF 
01798     E9 4D 06 F6 | 	mov	local24, ##@LR__4805
0179c     26 47 02 F6 | 	mov	local21, local24
017a0     23 15 02 F6 | 	mov	arg02, local21
017a4     F4 D3 B1 FD | 	call	#__system___string_cmp
017a8     FD 44 0A F6 | 	mov	local20, result1 wz
017ac     60 00 90 AD |  if_e	jmp	#LR__0070
017b0                 | LR__0069
017b0     7A 00 00 FF 
017b4     08 E4 05 F1 | 	add	objptr, ##62472
017b8     F2 12 02 FB | 	rdlong	arg01, objptr
017bc     7A 00 00 FF 
017c0     08 E4 85 F1 | 	sub	objptr, ##62472
017c4     70 01 00 FF 
017c8     EB 4F 06 F6 | 	mov	local25, ##@LR__4806
017cc     27 4D 02 F6 | 	mov	local24, local25
017d0     26 15 02 F6 | 	mov	arg02, local24
017d4     C4 D3 B1 FD | 	call	#__system___string_cmp
017d8     FD 46 0A F6 | 	mov	local21, result1 wz
017dc     10 01 90 5D |  if_ne	jmp	#LR__0074
017e0     7A 00 00 FF 
017e4     0C E4 05 F1 | 	add	objptr, ##62476
017e8     F2 12 02 FB | 	rdlong	arg01, objptr
017ec     7A 00 00 FF 
017f0     0C E4 85 F1 | 	sub	objptr, ##62476
017f4     70 01 00 FF 
017f8     ED 51 06 F6 | 	mov	local26, ##@LR__4807
017fc     28 4F 02 F6 | 	mov	local25, local26
01800     27 15 02 F6 | 	mov	arg02, local25
01804     94 D3 B1 FD | 	call	#__system___string_cmp
01808     FD 4C 0A F6 | 	mov	local24, result1 wz
0180c     E0 00 90 5D |  if_ne	jmp	#LR__0074
01810                 | LR__0070
01810     10 2F 02 F6 | 	mov	local09, local02
01814     03 2E 66 F0 | 	shl	local09, #3
01818     55 00 00 FF 
0181c     0C E4 05 F1 | 	add	objptr, ##43532
01820     F2 2E 02 F1 | 	add	local09, objptr
01824     24 00 00 FF 
01828     FC E5 05 F1 | 	add	objptr, ##18940
0182c     F2 12 02 FB | 	rdlong	arg01, objptr
01830     04 E4 05 F1 | 	add	objptr, #4
01834     F2 30 02 FB | 	rdlong	local10, objptr
01838     7A 00 00 FF 
0183c     0C E4 85 F1 | 	sub	objptr, ##62476
01840     18 33 02 F6 | 	mov	local11, local10
01844     19 15 02 F6 | 	mov	arg02, local11
01848     84 D3 B1 FD | 	call	#__system___string_concat
0184c     17 FB 61 FC | 	wrlong	result1, local09
01850                 | '     lparts(i).part$=s1$+s2$
01850                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01850     10 39 02 F6 | 	mov	local14, local02
01854     01 38 06 F1 | 	add	local14, #1
01858     1D 53 02 F6 | 	mov	local27, local15
0185c     01 52 06 F1 | 	add	local27, #1
01860     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
01864                 | LR__0071
01864     29 39 52 F2 | 	cmps	local14, local27 wc
01868     7C 00 90 3D |  if_ae	jmp	#LR__0073
0186c     1C 27 02 F6 | 	mov	local05, local14
01870     01 26 06 F1 | 	add	local05, #1
01874     03 26 66 F0 | 	shl	local05, #3
01878     55 00 00 FF 
0187c     0C E4 05 F1 | 	add	objptr, ##43532
01880     F2 26 02 F1 | 	add	local05, objptr
01884     13 25 02 FB | 	rdlong	local04, local05
01888     1C 29 02 F6 | 	mov	local06, local14
0188c     01 28 06 F1 | 	add	local06, #1
01890     03 28 66 F0 | 	shl	local06, #3
01894     F2 28 02 F1 | 	add	local06, objptr
01898     04 28 06 F1 | 	add	local06, #4
0189c     14 23 02 FB | 	rdlong	local03, local06
018a0     1C 29 02 F6 | 	mov	local06, local14
018a4     03 28 66 F0 | 	shl	local06, #3
018a8     F2 32 02 F6 | 	mov	local11, objptr
018ac     F2 28 02 F1 | 	add	local06, objptr
018b0     14 25 62 FC | 	wrlong	local04, local06
018b4     1C 31 02 F6 | 	mov	local10, local14
018b8     18 37 02 F6 | 	mov	local13, local10
018bc     1B 35 02 F6 | 	mov	local12, local13
018c0     03 34 66 F0 | 	shl	local12, #3
018c4     F2 4A 02 F6 | 	mov	local23, objptr
018c8     F2 34 02 F1 | 	add	local12, objptr
018cc     04 34 06 F1 | 	add	local12, #4
018d0     1A 23 62 FC | 	wrlong	local03, local12
018d4     04 34 86 F1 | 	sub	local12, #4
018d8     01 38 06 F1 | 	add	local14, #1
018dc     55 00 00 FF 
018e0     0C E4 85 F1 | 	sub	objptr, ##43532
018e4     7C FF 9F FD | 	jmp	#LR__0071
018e8                 | LR__0072
018e8                 | LR__0073
018e8     01 20 86 F1 | 	sub	local02, #1
018ec     01 3A 86 F1 | 	sub	local15, #1
018f0                 | LR__0074
018f0     01 20 06 F1 | 	add	local02, #1
018f4     1D 21 52 F2 | 	cmps	local02, local15 wc
018f8     58 FC 9F CD |  if_b	jmp	#LR__0065
018fc                 | '  
018fc                 | ' ' 1f : now remove parts that are spaces
018fc                 | ' 
018fc                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018fc     00 20 06 F6 | 	mov	local02, #0
01900     1D 55 02 F6 | 	mov	local28, local15
01904     01 54 06 F1 | 	add	local28, #1
01908                 | LR__0075
01908     2A 21 52 F2 | 	cmps	local02, local28 wc
0190c     50 00 90 3D |  if_ae	jmp	#LR__0076
01910     10 2F 02 F6 | 	mov	local09, local02
01914     03 2E 66 F0 | 	shl	local09, #3
01918     55 00 00 FF 
0191c     0C E4 05 F1 | 	add	objptr, ##43532
01920     F2 2E 02 F1 | 	add	local09, objptr
01924     10 33 02 F6 | 	mov	local11, local02
01928     19 31 02 F6 | 	mov	local10, local11
0192c     18 37 02 F6 | 	mov	local13, local10
01930     03 36 66 F0 | 	shl	local13, #3
01934     F2 34 02 F6 | 	mov	local12, objptr
01938     F2 36 02 F1 | 	add	local13, objptr
0193c     1B 13 02 FB | 	rdlong	arg01, local13
01940     55 00 00 FF 
01944     0C E4 85 F1 | 	sub	objptr, ##43532
01948     00 F7 B1 FD | 	call	#__system__RTrim_S
0194c     FD 12 02 F6 | 	mov	arg01, result1
01950     38 F6 B1 FD | 	call	#__system__LTrim_S
01954     17 FB 61 FC | 	wrlong	result1, local09
01958     01 20 06 F1 | 	add	local02, #1
0195c     A8 FF 9F FD | 	jmp	#LR__0075
01960                 | LR__0076
01960     00 20 06 F6 | 	mov	local02, #0
01964     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01968                 | ' 
01968                 | ' i=0
01968                 | ' do 
01968                 | LR__0077
01968                 | '   if len(lparts(i).part$)=0 then 
01968     10 2F 02 F6 | 	mov	local09, local02
0196c     17 27 02 F6 | 	mov	local05, local09
01970     03 26 66 F0 | 	shl	local05, #3
01974     55 00 00 FF 
01978     0C E4 05 F1 | 	add	objptr, ##43532
0197c     F2 26 02 F1 | 	add	local05, objptr
01980     13 13 02 FB | 	rdlong	arg01, local05
01984     55 00 00 FF 
01988     0C E4 85 F1 | 	sub	objptr, ##43532
0198c     09 2B 02 F6 | 	mov	local07, arg01
01990                 | LR__0078
01990     15 FB C9 FA | 	rdbyte	result1, local07 wz
01994     01 2A 06 51 |  if_ne	add	local07, #1
01998     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
0199c     09 2B 8A F1 | 	sub	local07, arg01 wz
019a0     C4 00 90 5D |  if_ne	jmp	#LR__0082
019a4                 | '     if i=k-1 then k-=1  :  exit
019a4     1D 25 02 F6 | 	mov	local04, local15
019a8     01 24 86 F1 | 	sub	local04, #1
019ac     12 21 0A F2 | 	cmp	local02, local04 wz
019b0     01 3A 86 A1 |  if_e	sub	local15, #1
019b4     C4 00 90 AD |  if_e	jmp	#LR__0084
019b8                 | '     if i<k-1 then 
019b8     1D 25 02 F6 | 	mov	local04, local15
019bc     01 24 86 F1 | 	sub	local04, #1
019c0     12 21 52 F2 | 	cmps	local02, local04 wc
019c4     A0 00 90 3D |  if_ae	jmp	#LR__0081
019c8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019c8     10 39 02 F6 | 	mov	local14, local02
019cc     1D 57 02 F6 | 	mov	local29, local15
019d0     01 56 86 F1 | 	sub	local29, #1
019d4                 | LR__0079
019d4     2B 39 52 F2 | 	cmps	local14, local29 wc
019d8     80 00 90 3D |  if_ae	jmp	#LR__0080
019dc     1C 27 02 F6 | 	mov	local05, local14
019e0     01 26 06 F1 | 	add	local05, #1
019e4     03 26 66 F0 | 	shl	local05, #3
019e8     55 00 00 FF 
019ec     0C E4 05 F1 | 	add	objptr, ##43532
019f0     F2 26 02 F1 | 	add	local05, objptr
019f4     13 25 02 FB | 	rdlong	local04, local05
019f8     1C 29 02 F6 | 	mov	local06, local14
019fc     01 28 06 F1 | 	add	local06, #1
01a00     03 28 66 F0 | 	shl	local06, #3
01a04     F2 28 02 F1 | 	add	local06, objptr
01a08     04 28 06 F1 | 	add	local06, #4
01a0c     14 23 02 FB | 	rdlong	local03, local06
01a10     1C 2F 02 F6 | 	mov	local09, local14
01a14     17 29 02 F6 | 	mov	local06, local09
01a18     03 28 66 F0 | 	shl	local06, #3
01a1c     F2 32 02 F6 | 	mov	local11, objptr
01a20     F2 28 02 F1 | 	add	local06, objptr
01a24     14 25 62 FC | 	wrlong	local04, local06
01a28     1C 31 02 F6 | 	mov	local10, local14
01a2c     18 37 02 F6 | 	mov	local13, local10
01a30     1B 35 02 F6 | 	mov	local12, local13
01a34     03 34 66 F0 | 	shl	local12, #3
01a38     F2 4A 02 F6 | 	mov	local23, objptr
01a3c     F2 34 02 F1 | 	add	local12, objptr
01a40     04 34 06 F1 | 	add	local12, #4
01a44     1A 23 62 FC | 	wrlong	local03, local12
01a48     04 34 86 F1 | 	sub	local12, #4
01a4c     01 38 06 F1 | 	add	local14, #1
01a50     55 00 00 FF 
01a54     0C E4 85 F1 | 	sub	objptr, ##43532
01a58     78 FF 9F FD | 	jmp	#LR__0079
01a5c                 | LR__0080
01a5c     01 3A 86 F1 | 	sub	local15, #1
01a60                 | '       if i>0 then i-=1 
01a60     01 20 56 F2 | 	cmps	local02, #1 wc
01a64     01 20 86 31 |  if_ae	sub	local02, #1
01a68                 | LR__0081
01a68                 | LR__0082
01a68     01 20 06 F1 | 	add	local02, #1
01a6c     1D 25 02 F6 | 	mov	local04, local15
01a70     01 24 86 F1 | 	sub	local04, #1
01a74     12 21 5A F2 | 	cmps	local02, local04 wcz
01a78     EC FE 9F ED |  if_be	jmp	#LR__0077
01a7c                 | LR__0083
01a7c                 | LR__0084
01a7c                 | ' 
01a7c                 | ' ' 1g: lowercase all that is not a string
01a7c                 | ' 
01a7c                 | ' for j=0 to k-1
01a7c     00 38 06 F6 | 	mov	local14, #0
01a80     1D 59 02 F6 | 	mov	local30, local15
01a84                 | LR__0085
01a84     2C 39 52 F2 | 	cmps	local14, local30 wc
01a88     C0 00 90 3D |  if_ae	jmp	#LR__0088
01a8c                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a8c     1C 27 02 F6 | 	mov	local05, local14
01a90     03 26 66 F0 | 	shl	local05, #3
01a94     55 00 00 FF 
01a98     0C E4 05 F1 | 	add	objptr, ##43532
01a9c     F2 26 02 F1 | 	add	local05, objptr
01aa0     13 13 02 FB | 	rdlong	arg01, local05
01aa4     01 14 06 F6 | 	mov	arg02, #1
01aa8     55 00 00 FF 
01aac     0C E4 85 F1 | 	sub	objptr, ##43532
01ab0     08 F1 B1 FD | 	call	#__system__Left_S
01ab4     FD 12 02 F6 | 	mov	arg01, result1
01ab8     70 01 00 FF 
01abc     EF 15 06 F6 | 	mov	arg02, ##@LR__4808
01ac0     D8 D0 B1 FD | 	call	#__system___string_cmp
01ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
01ac8     40 00 90 5D |  if_ne	jmp	#LR__0086
01acc     1C 29 02 F6 | 	mov	local06, local14
01ad0     03 28 66 F0 | 	shl	local06, #3
01ad4     55 00 00 FF 
01ad8     0C E4 05 F1 | 	add	objptr, ##43532
01adc     F2 28 02 F1 | 	add	local06, objptr
01ae0     14 13 02 FB | 	rdlong	arg01, local06
01ae4     01 14 06 F6 | 	mov	arg02, #1
01ae8     55 00 00 FF 
01aec     0C E4 85 F1 | 	sub	objptr, ##43532
01af0     50 F1 B1 FD | 	call	#__system__Right_S
01af4     FD 12 02 F6 | 	mov	arg01, result1
01af8     70 01 00 FF 
01afc     F1 15 06 F6 | 	mov	arg02, ##@LR__4809
01b00     98 D0 B1 FD | 	call	#__system___string_cmp
01b04     00 FA 0D F2 | 	cmp	result1, #0 wz
01b08     38 00 90 AD |  if_e	jmp	#LR__0087
01b0c                 | LR__0086
01b0c     1C 2F 02 F6 | 	mov	local09, local14
01b10     03 2E 66 F0 | 	shl	local09, #3
01b14     55 00 00 FF 
01b18     0C E4 05 F1 | 	add	objptr, ##43532
01b1c     F2 2E 02 F1 | 	add	local09, objptr
01b20     1C 37 02 F6 | 	mov	local13, local14
01b24     03 36 66 F0 | 	shl	local13, #3
01b28     F2 34 02 F6 | 	mov	local12, objptr
01b2c     F2 36 02 F1 | 	add	local13, objptr
01b30     1B 13 02 FB | 	rdlong	arg01, local13
01b34     55 00 00 FF 
01b38     0C E4 85 F1 | 	sub	objptr, ##43532
01b3c     8C F3 B1 FD | 	call	#__system__LCase_S
01b40     17 FB 61 FC | 	wrlong	result1, local09
01b44                 | LR__0087
01b44     01 38 06 F1 | 	add	local14, #1
01b48     38 FF 9F FD | 	jmp	#LR__0085
01b4c                 | LR__0088
01b4c                 | ' 
01b4c                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b4c                 | ' 
01b4c                 | ' for i=0 to k: lparts(i).token=-1: next i
01b4c     00 20 06 F6 | 	mov	local02, #0
01b50     1D 5B 02 F6 | 	mov	local31, local15
01b54     01 5A 06 F1 | 	add	local31, #1
01b58     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b5c                 | LR__0089
01b5c     2D 21 52 F2 | 	cmps	local02, local31 wc
01b60     30 00 90 3D |  if_ae	jmp	#LR__0091
01b64     10 2F 02 F6 | 	mov	local09, local02
01b68     03 2E 66 F0 | 	shl	local09, #3
01b6c     55 00 00 FF 
01b70     0C E4 05 F1 | 	add	objptr, ##43532
01b74     F2 2E 02 F1 | 	add	local09, objptr
01b78     04 2E 06 F1 | 	add	local09, #4
01b7c     FF FF FF FF 
01b80     17 FF 6B FC | 	wrlong	##-1, local09
01b84     01 20 06 F1 | 	add	local02, #1
01b88     55 00 00 FF 
01b8c     0C E4 85 F1 | 	sub	objptr, ##43532
01b90     C8 FF 9F FD | 	jmp	#LR__0089
01b94                 | LR__0090
01b94                 | LR__0091
01b94                 | ' 
01b94                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b94                 | ' 
01b94                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b94     55 00 00 FF 
01b98     0C E4 05 F1 | 	add	objptr, ##43532
01b9c     F2 12 02 FB | 	rdlong	arg01, objptr
01ba0     55 00 00 FF 
01ba4     0C E4 85 F1 | 	sub	objptr, ##43532
01ba8     09 2B 02 F6 | 	mov	local07, arg01
01bac     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01bb0                 | LR__0092
01bb0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01bb4     01 2A 06 51 |  if_ne	add	local07, #1
01bb8     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01bbc                 | LR__0093
01bbc     09 2B 8A F1 | 	sub	local07, arg01 wz
01bc0     7C 17 90 AD |  if_e	jmp	#LR__0149
01bc4                 | ' 
01bc4                 | ' 
01bc4                 | ' if isdec(lparts(0).part$) then let addptr=1 else let addptr=0
01bc4     55 00 00 FF 
01bc8     0C E4 05 F1 | 	add	objptr, ##43532
01bcc     F2 12 02 FB | 	rdlong	arg01, objptr
01bd0     55 00 00 FF 
01bd4     0C E4 85 F1 | 	sub	objptr, ##43532
01bd8     E0 37 B0 FD | 	call	#_isdec
01bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
01be0     7A 00 00 5F 
01be4     10 E4 05 51 |  if_ne	add	objptr, ##62480
01be8     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01bec     7A 00 00 FF 
01bf0     10 E4 E5 F3 | 	sumnz	objptr, ##62480
01bf4     F2 00 68 AC |  if_e	wrlong	#0, objptr
01bf8     7A 00 00 AF 
01bfc     10 E4 85 A1 |  if_e	sub	objptr, ##62480
01c00     7A 00 00 FF 
01c04     10 E4 05 F1 | 	add	objptr, ##62480
01c08     F2 26 02 FB | 	rdlong	local05, objptr
01c0c     03 26 66 F0 | 	shl	local05, #3
01c10     25 00 00 FF 
01c14     04 E4 85 F1 | 	sub	objptr, ##18948
01c18     F2 26 02 F1 | 	add	local05, objptr
01c1c     13 33 02 FB | 	rdlong	local11, local05
01c20     25 00 00 FF 
01c24     08 E4 05 F1 | 	add	objptr, ##18952
01c28     F2 32 62 FC | 	wrlong	local11, objptr
01c2c     04 E4 85 F1 | 	sub	objptr, #4
01c30     F2 32 02 FB | 	rdlong	local11, objptr
01c34     03 32 66 F0 | 	shl	local11, #3
01c38     25 00 00 FF 
01c3c     04 E4 85 F1 | 	sub	objptr, ##18948
01c40     F2 30 02 F6 | 	mov	local10, objptr
01c44     F2 32 02 F1 | 	add	local11, objptr
01c48     19 15 02 FB | 	rdlong	arg02, local11
01c4c     70 01 00 FF 
01c50     F3 17 06 F6 | 	mov	arg03, ##@LR__4810
01c54     01 12 06 F6 | 	mov	arg01, #1
01c58     55 00 00 FF 
01c5c     0C E4 85 F1 | 	sub	objptr, ##43532
01c60     A0 F4 B1 FD | 	call	#__system__Instr
01c64     7A 00 00 FF 
01c68     18 E4 05 F1 | 	add	objptr, ##62488
01c6c     F2 FA 61 FC | 	wrlong	result1, objptr
01c70                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 
01c70     FD 24 02 F6 | 	mov	local04, result1
01c74     7A 00 00 FF 
01c78     18 E4 85 F1 | 	sub	objptr, ##62488
01c7c     01 24 56 F2 | 	cmps	local04, #1 wc
01c80     DC 01 90 CD |  if_b	jmp	#LR__0100
01c84     7A 00 00 FF 
01c88     10 E4 05 F1 | 	add	objptr, ##62480
01c8c     F2 30 02 FB | 	rdlong	local10, objptr
01c90     03 30 66 F0 | 	shl	local10, #3
01c94     25 00 00 FF 
01c98     04 E4 85 F1 | 	sub	objptr, ##18948
01c9c     F2 36 02 F6 | 	mov	local13, objptr
01ca0     F2 30 02 F1 | 	add	local10, objptr
01ca4     18 13 02 FB | 	rdlong	arg01, local10
01ca8     55 00 00 FF 
01cac     0C E4 85 F1 | 	sub	objptr, ##43532
01cb0     09 2B 02 F6 | 	mov	local07, arg01
01cb4     97 06 48 FB | 	callpa	#(@LR__0095-@LR__0094)>>2,fcache_load_ptr_
01cb8                 | LR__0094
01cb8     15 FB C9 FA | 	rdbyte	result1, local07 wz
01cbc     01 2A 06 51 |  if_ne	add	local07, #1
01cc0     F4 FF 9F 5D |  if_ne	jmp	#LR__0094
01cc4                 | LR__0095
01cc4     09 2B 82 F1 | 	sub	local07, arg01
01cc8     15 2F 02 F6 | 	mov	local09, local07
01ccc     7A 00 00 FF 
01cd0     18 E4 05 F1 | 	add	objptr, ##62488
01cd4     F2 26 02 FB | 	rdlong	local05, objptr
01cd8     7A 00 00 FF 
01cdc     18 E4 85 F1 | 	sub	objptr, ##62488
01ce0     17 27 52 F2 | 	cmps	local05, local09 wc
01ce4     78 01 90 3D |  if_ae	jmp	#LR__0100
01ce8     01 3A 06 F1 | 	add	local15, #1
01cec                 | '   k+=1
01cec                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01cec     1D 21 02 F6 | 	mov	local02, local15
01cf0     7A 00 00 FF 
01cf4     10 E4 05 F1 | 	add	objptr, ##62480
01cf8     F2 5C 02 FB | 	rdlong	local32, objptr
01cfc     01 5C 06 F1 | 	add	local32, #1
01d00     25 00 00 FF 
01d04     04 E4 85 F1 | 	sub	objptr, ##18948
01d08     97 2E 48 FB | 	callpa	#(@LR__0097-@LR__0096)>>2,fcache_load_ptr_
01d0c                 | LR__0096
01d0c     10 29 02 F6 | 	mov	local06, local02
01d10     01 28 86 F1 | 	sub	local06, #1
01d14     03 28 66 F0 | 	shl	local06, #3
01d18     F2 28 02 F1 | 	add	local06, objptr
01d1c     14 23 02 FB | 	rdlong	local03, local06
01d20     10 33 02 F6 | 	mov	local11, local02
01d24     01 32 86 F1 | 	sub	local11, #1
01d28     03 32 66 F0 | 	shl	local11, #3
01d2c     F2 32 02 F1 | 	add	local11, objptr
01d30     04 32 06 F1 | 	add	local11, #4
01d34     19 2F 02 FB | 	rdlong	local09, local11
01d38     10 33 02 F6 | 	mov	local11, local02
01d3c     03 32 66 F0 | 	shl	local11, #3
01d40     F2 32 02 F1 | 	add	local11, objptr
01d44     19 23 62 FC | 	wrlong	local03, local11
01d48     10 4B 02 F6 | 	mov	local23, local02
01d4c     03 4A 66 F0 | 	shl	local23, #3
01d50     F2 4A 02 F1 | 	add	local23, objptr
01d54     04 4A 06 F1 | 	add	local23, #4
01d58     25 2F 62 FC | 	wrlong	local09, local23
01d5c     01 20 86 F1 | 	sub	local02, #1
01d60     2E 21 52 F2 | 	cmps	local02, local32 wc
01d64     A4 FF 9F 3D |  if_ae	jmp	#LR__0096
01d68                 | LR__0097
01d68     25 00 00 FF 
01d6c     04 E4 05 F1 | 	add	objptr, ##18948
01d70     F2 4A 02 FB | 	rdlong	local23, objptr
01d74     25 27 02 F6 | 	mov	local05, local23
01d78     01 26 06 F1 | 	add	local05, #1
01d7c     03 26 66 F0 | 	shl	local05, #3
01d80     25 00 00 FF 
01d84     04 E4 85 F1 | 	sub	objptr, ##18948
01d88     F2 26 02 F1 | 	add	local05, objptr
01d8c     03 4A 66 F0 | 	shl	local23, #3
01d90     F2 4A 02 F1 | 	add	local23, objptr
01d94     25 33 02 FB | 	rdlong	local11, local23
01d98     25 00 00 FF 
01d9c     04 E4 05 F1 | 	add	objptr, ##18948
01da0     F2 44 02 FB | 	rdlong	local20, objptr
01da4     22 47 02 F6 | 	mov	local21, local20
01da8     03 46 66 F0 | 	shl	local21, #3
01dac     25 00 00 FF 
01db0     04 E4 85 F1 | 	sub	objptr, ##18948
01db4     F2 4C 02 F6 | 	mov	local24, objptr
01db8     F2 46 02 F1 | 	add	local21, objptr
01dbc     23 13 02 FB | 	rdlong	arg01, local21
01dc0     55 00 00 FF 
01dc4     0C E4 85 F1 | 	sub	objptr, ##43532
01dc8     09 2B 02 F6 | 	mov	local07, arg01
01dcc     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
01dd0                 | LR__0098
01dd0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01dd4     01 2A 06 51 |  if_ne	add	local07, #1
01dd8     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
01ddc                 | LR__0099
01ddc     09 2B 82 F1 | 	sub	local07, arg01
01de0     15 15 02 F6 | 	mov	arg02, local07
01de4     7A 00 00 FF 
01de8     18 E4 05 F1 | 	add	objptr, ##62488
01dec     F2 4A 02 FB | 	rdlong	local23, objptr
01df0     7A 00 00 FF 
01df4     18 E4 85 F1 | 	sub	objptr, ##62488
01df8     25 15 82 F1 | 	sub	arg02, local23
01dfc     19 13 02 F6 | 	mov	arg01, local11
01e00     40 EE B1 FD | 	call	#__system__Right_S
01e04     13 FB 61 FC | 	wrlong	result1, local05
01e08     7A 00 00 FF 
01e0c     10 E4 05 F1 | 	add	objptr, ##62480
01e10     F2 34 02 FB | 	rdlong	local12, objptr
01e14     1A 27 02 F6 | 	mov	local05, local12
01e18     03 26 66 F0 | 	shl	local05, #3
01e1c     25 00 00 FF 
01e20     04 E4 85 F1 | 	sub	objptr, ##18948
01e24     F2 26 02 F1 | 	add	local05, objptr
01e28     1A 4B 02 F6 | 	mov	local23, local12
01e2c     03 4A 66 F0 | 	shl	local23, #3
01e30     F2 42 02 F6 | 	mov	local19, objptr
01e34     F2 4A 02 F1 | 	add	local23, objptr
01e38     25 13 02 FB | 	rdlong	arg01, local23
01e3c     25 00 00 FF 
01e40     0C E4 05 F1 | 	add	objptr, ##18956
01e44     F2 36 02 FB | 	rdlong	local13, objptr
01e48     7A 00 00 FF 
01e4c     18 E4 85 F1 | 	sub	objptr, ##62488
01e50     1B 31 02 F6 | 	mov	local10, local13
01e54     18 15 02 F6 | 	mov	arg02, local10
01e58     60 ED B1 FD | 	call	#__system__Left_S
01e5c     13 FB 61 FC | 	wrlong	result1, local05
01e60                 | LR__0100
01e60                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then
01e60     7A 00 00 FF 
01e64     10 E4 05 F1 | 	add	objptr, ##62480
01e68     F2 28 02 FB | 	rdlong	local06, objptr
01e6c     03 28 66 F0 | 	shl	local06, #3
01e70     25 00 00 FF 
01e74     04 E4 85 F1 | 	sub	objptr, ##18948
01e78     F2 28 02 F1 | 	add	local06, objptr
01e7c     14 13 02 FB | 	rdlong	arg01, local06
01e80     01 14 06 F6 | 	mov	arg02, #1
01e84     55 00 00 FF 
01e88     0C E4 85 F1 | 	sub	objptr, ##43532
01e8c     2C ED B1 FD | 	call	#__system__Left_S
01e90     FD 12 02 F6 | 	mov	arg01, result1
01e94     70 01 00 FF 
01e98     F5 15 06 F6 | 	mov	arg02, ##@LR__4811
01e9c     FC CC B1 FD | 	call	#__system___string_cmp
01ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ea4     9C 01 90 5D |  if_ne	jmp	#LR__0107
01ea8     7A 00 00 FF 
01eac     10 E4 05 F1 | 	add	objptr, ##62480
01eb0     F2 32 02 FB | 	rdlong	local11, objptr
01eb4     03 32 66 F0 | 	shl	local11, #3
01eb8     25 00 00 FF 
01ebc     04 E4 85 F1 | 	sub	objptr, ##18948
01ec0     F2 30 02 F6 | 	mov	local10, objptr
01ec4     F2 32 02 F1 | 	add	local11, objptr
01ec8     19 13 02 FB | 	rdlong	arg01, local11
01ecc     55 00 00 FF 
01ed0     0C E4 85 F1 | 	sub	objptr, ##43532
01ed4     09 2B 02 F6 | 	mov	local07, arg01
01ed8     97 06 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01edc                 | LR__0101
01edc     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ee0     01 2A 06 51 |  if_ne	add	local07, #1
01ee4     F4 FF 9F 5D |  if_ne	jmp	#LR__0101
01ee8                 | LR__0102
01ee8     09 2B 82 F1 | 	sub	local07, arg01
01eec     02 2A 56 F2 | 	cmps	local07, #2 wc
01ef0     50 01 90 CD |  if_b	jmp	#LR__0107
01ef4     01 3A 06 F1 | 	add	local15, #1
01ef8                 | '   k+=1
01ef8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01ef8     1D 21 02 F6 | 	mov	local02, local15
01efc     7A 00 00 FF 
01f00     10 E4 05 F1 | 	add	objptr, ##62480
01f04     F2 5E 02 FB | 	rdlong	local33, objptr
01f08     01 5E 06 F1 | 	add	local33, #1
01f0c     25 00 00 FF 
01f10     04 E4 85 F1 | 	sub	objptr, ##18948
01f14     97 2E 48 FB | 	callpa	#(@LR__0104-@LR__0103)>>2,fcache_load_ptr_
01f18                 | LR__0103
01f18     10 29 02 F6 | 	mov	local06, local02
01f1c     01 28 86 F1 | 	sub	local06, #1
01f20     03 28 66 F0 | 	shl	local06, #3
01f24     F2 28 02 F1 | 	add	local06, objptr
01f28     14 23 02 FB | 	rdlong	local03, local06
01f2c     10 33 02 F6 | 	mov	local11, local02
01f30     01 32 86 F1 | 	sub	local11, #1
01f34     03 32 66 F0 | 	shl	local11, #3
01f38     F2 32 02 F1 | 	add	local11, objptr
01f3c     04 32 06 F1 | 	add	local11, #4
01f40     19 2F 02 FB | 	rdlong	local09, local11
01f44     10 33 02 F6 | 	mov	local11, local02
01f48     03 32 66 F0 | 	shl	local11, #3
01f4c     F2 32 02 F1 | 	add	local11, objptr
01f50     19 23 62 FC | 	wrlong	local03, local11
01f54     10 4B 02 F6 | 	mov	local23, local02
01f58     03 4A 66 F0 | 	shl	local23, #3
01f5c     F2 4A 02 F1 | 	add	local23, objptr
01f60     04 4A 06 F1 | 	add	local23, #4
01f64     25 2F 62 FC | 	wrlong	local09, local23
01f68     01 20 86 F1 | 	sub	local02, #1
01f6c     2F 21 52 F2 | 	cmps	local02, local33 wc
01f70     A4 FF 9F 3D |  if_ae	jmp	#LR__0103
01f74                 | LR__0104
01f74     25 00 00 FF 
01f78     04 E4 05 F1 | 	add	objptr, ##18948
01f7c     F2 4A 02 FB | 	rdlong	local23, objptr
01f80     25 27 02 F6 | 	mov	local05, local23
01f84     01 26 06 F1 | 	add	local05, #1
01f88     03 26 66 F0 | 	shl	local05, #3
01f8c     25 00 00 FF 
01f90     04 E4 85 F1 | 	sub	objptr, ##18948
01f94     F2 26 02 F1 | 	add	local05, objptr
01f98     03 4A 66 F0 | 	shl	local23, #3
01f9c     F2 4A 02 F1 | 	add	local23, objptr
01fa0     25 33 02 FB | 	rdlong	local11, local23
01fa4     25 00 00 FF 
01fa8     04 E4 05 F1 | 	add	objptr, ##18948
01fac     F2 42 02 FB | 	rdlong	local19, objptr
01fb0     21 4B 02 F6 | 	mov	local23, local19
01fb4     25 45 02 F6 | 	mov	local20, local23
01fb8     22 47 02 F6 | 	mov	local21, local20
01fbc     03 46 66 F0 | 	shl	local21, #3
01fc0     25 00 00 FF 
01fc4     04 E4 85 F1 | 	sub	objptr, ##18948
01fc8     F2 4C 02 F6 | 	mov	local24, objptr
01fcc     F2 46 02 F1 | 	add	local21, objptr
01fd0     23 13 02 FB | 	rdlong	arg01, local21
01fd4     55 00 00 FF 
01fd8     0C E4 85 F1 | 	sub	objptr, ##43532
01fdc     09 2B 02 F6 | 	mov	local07, arg01
01fe0     97 06 48 FB | 	callpa	#(@LR__0106-@LR__0105)>>2,fcache_load_ptr_
01fe4                 | LR__0105
01fe4     15 FB C9 FA | 	rdbyte	result1, local07 wz
01fe8     01 2A 06 51 |  if_ne	add	local07, #1
01fec     F4 FF 9F 5D |  if_ne	jmp	#LR__0105
01ff0                 | LR__0106
01ff0     09 2B 82 F1 | 	sub	local07, arg01
01ff4     15 35 02 F6 | 	mov	local12, local07
01ff8     1A 37 02 F6 | 	mov	local13, local12
01ffc     01 36 86 F1 | 	sub	local13, #1
02000     1B 31 02 F6 | 	mov	local10, local13
02004     19 13 02 F6 | 	mov	arg01, local11
02008     18 15 02 F6 | 	mov	arg02, local10
0200c     34 EC B1 FD | 	call	#__system__Right_S
02010     13 FB 61 FC | 	wrlong	result1, local05
02014     7A 00 00 FF 
02018     10 E4 05 F1 | 	add	objptr, ##62480
0201c     F2 26 02 FB | 	rdlong	local05, objptr
02020     03 26 66 F0 | 	shl	local05, #3
02024     25 00 00 FF 
02028     04 E4 85 F1 | 	sub	objptr, ##18948
0202c     F2 26 02 F1 | 	add	local05, objptr
02030     70 01 00 FF 
02034     F7 33 06 F6 | 	mov	local11, ##@LR__4812
02038     13 33 62 FC | 	wrlong	local11, local05
0203c     55 00 00 FF 
02040     0C E4 85 F1 | 	sub	objptr, ##43532
02044                 | LR__0107
02044     7A 00 00 FF 
02048     10 E4 05 F1 | 	add	objptr, ##62480
0204c     F2 26 02 FB | 	rdlong	local05, objptr
02050     03 26 66 F0 | 	shl	local05, #3
02054     25 00 00 FF 
02058     04 E4 85 F1 | 	sub	objptr, ##18948
0205c     F2 26 02 F1 | 	add	local05, objptr
02060     13 33 02 FB | 	rdlong	local11, local05
02064     25 00 00 FF 
02068     08 E4 05 F1 | 	add	objptr, ##18952
0206c     F2 32 62 FC | 	wrlong	local11, objptr
02070                 | ' 
02070                 | ' ' process the case when simple load or save is called without ""
02070                 | ' 
02070                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02070     7A 00 00 FF 
02074     14 E4 85 F1 | 	sub	objptr, ##62484
02078     70 01 00 FF 
0207c     F9 15 06 F6 | 	mov	arg02, ##@LR__4813
02080     19 13 02 F6 | 	mov	arg01, local11
02084     14 CB B1 FD | 	call	#__system___string_cmp
02088     00 FA 0D F2 | 	cmp	result1, #0 wz
0208c     50 00 90 AD |  if_e	jmp	#LR__0108
02090     7A 00 00 FF 
02094     14 E4 05 F1 | 	add	objptr, ##62484
02098     F2 12 02 FB | 	rdlong	arg01, objptr
0209c     7A 00 00 FF 
020a0     14 E4 85 F1 | 	sub	objptr, ##62484
020a4     70 01 00 FF 
020a8     FF 15 06 F6 | 	mov	arg02, ##@LR__4814
020ac     EC CA B1 FD | 	call	#__system___string_cmp
020b0     00 FA 0D F2 | 	cmp	result1, #0 wz
020b4     28 00 90 AD |  if_e	jmp	#LR__0108
020b8     7A 00 00 FF 
020bc     14 E4 05 F1 | 	add	objptr, ##62484
020c0     F2 12 02 FB | 	rdlong	arg01, objptr
020c4     7A 00 00 FF 
020c8     14 E4 85 F1 | 	sub	objptr, ##62484
020cc     71 01 00 FF 
020d0     06 14 06 F6 | 	mov	arg02, ##@LR__4815
020d4     C4 CA B1 FD | 	call	#__system___string_cmp
020d8     00 FA 0D F2 | 	cmp	result1, #0 wz
020dc     48 01 90 5D |  if_ne	jmp	#LR__0111
020e0                 | LR__0108
020e0                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(addptr+1).token=token_decimal
020e0     7A 00 00 FF 
020e4     10 E4 05 F1 | 	add	objptr, ##62480
020e8     F2 28 02 FB | 	rdlong	local06, objptr
020ec     01 28 06 F1 | 	add	local06, #1
020f0     03 28 66 F0 | 	shl	local06, #3
020f4     25 00 00 FF 
020f8     04 E4 85 F1 | 	sub	objptr, ##18948
020fc     F2 28 02 F1 | 	add	local06, objptr
02100     14 13 02 FB | 	rdlong	arg01, local06
02104     71 01 00 FF 
02108     0C 14 06 F6 | 	mov	arg02, ##@LR__4816
0210c     55 00 00 FF 
02110     0C E4 85 F1 | 	sub	objptr, ##43532
02114     84 CA B1 FD | 	call	#__system___string_cmp
02118     00 FA 0D F2 | 	cmp	result1, #0 wz
0211c     60 00 90 5D |  if_ne	jmp	#LR__0109
02120     7A 00 00 FF 
02124     10 E4 05 F1 | 	add	objptr, ##62480
02128     F2 26 02 FB | 	rdlong	local05, objptr
0212c     01 26 06 F1 | 	add	local05, #1
02130     03 26 66 F0 | 	shl	local05, #3
02134     25 00 00 FF 
02138     04 E4 85 F1 | 	sub	objptr, ##18948
0213c     F2 26 02 F1 | 	add	local05, objptr
02140     71 01 00 FF 
02144     0F 32 06 F6 | 	mov	local11, ##@LR__4817
02148     13 33 62 FC | 	wrlong	local11, local05
0214c     25 00 00 FF 
02150     04 E4 05 F1 | 	add	objptr, ##18948
02154     F2 26 02 FB | 	rdlong	local05, objptr
02158     01 26 06 F1 | 	add	local05, #1
0215c     03 26 66 F0 | 	shl	local05, #3
02160     25 00 00 FF 
02164     04 E4 85 F1 | 	sub	objptr, ##18948
02168     F2 26 02 F1 | 	add	local05, objptr
0216c     04 26 06 F1 | 	add	local05, #4
02170     01 00 80 FF 
02174     13 01 68 FC | 	wrlong	##512, local05
02178     55 00 00 FF 
0217c     0C E4 85 F1 | 	sub	objptr, ##43532
02180                 | LR__0109
02180                 | '   if lparts(addptr+1).part$="off" then   lparts(addptr+1).part$="0" :lparts(addptr+1).token=token_decimal
02180     7A 00 00 FF 
02184     10 E4 05 F1 | 	add	objptr, ##62480
02188     F2 28 02 FB | 	rdlong	local06, objptr
0218c     01 28 06 F1 | 	add	local06, #1
02190     03 28 66 F0 | 	shl	local06, #3
02194     25 00 00 FF 
02198     04 E4 85 F1 | 	sub	objptr, ##18948
0219c     F2 32 02 F6 | 	mov	local11, objptr
021a0     F2 28 02 F1 | 	add	local06, objptr
021a4     14 13 02 FB | 	rdlong	arg01, local06
021a8     71 01 00 FF 
021ac     11 14 06 F6 | 	mov	arg02, ##@LR__4818
021b0     55 00 00 FF 
021b4     0C E4 85 F1 | 	sub	objptr, ##43532
021b8     E0 C9 B1 FD | 	call	#__system___string_cmp
021bc     00 FA 0D F2 | 	cmp	result1, #0 wz
021c0     64 00 90 5D |  if_ne	jmp	#LR__0110
021c4     7A 00 00 FF 
021c8     10 E4 05 F1 | 	add	objptr, ##62480
021cc     F2 26 02 FB | 	rdlong	local05, objptr
021d0     01 26 06 F1 | 	add	local05, #1
021d4     03 26 66 F0 | 	shl	local05, #3
021d8     25 00 00 FF 
021dc     04 E4 85 F1 | 	sub	objptr, ##18948
021e0     F2 26 02 F1 | 	add	local05, objptr
021e4     71 01 00 FF 
021e8     15 32 06 F6 | 	mov	local11, ##@LR__4819
021ec     13 33 62 FC | 	wrlong	local11, local05
021f0     25 00 00 FF 
021f4     04 E4 05 F1 | 	add	objptr, ##18948
021f8     F2 26 02 FB | 	rdlong	local05, objptr
021fc     01 26 06 F1 | 	add	local05, #1
02200     03 26 66 F0 | 	shl	local05, #3
02204     25 00 00 FF 
02208     04 E4 85 F1 | 	sub	objptr, ##18948
0220c     F2 26 02 F1 | 	add	local05, objptr
02210     09 32 C6 F9 | 	decod	local11, #9
02214     04 26 06 F1 | 	add	local05, #4
02218     01 00 80 FF 
0221c     13 01 68 FC | 	wrlong	##512, local05
02220     55 00 00 FF 
02224     0C E4 85 F1 | 	sub	objptr, ##43532
02228                 | LR__0110
02228                 | LR__0111
02228                 | ' if (lp$="mode" orelse lp$="m.") then 
02228     7A 00 00 FF 
0222c     14 E4 05 F1 | 	add	objptr, ##62484
02230     F2 12 02 FB | 	rdlong	arg01, objptr
02234     7A 00 00 FF 
02238     14 E4 85 F1 | 	sub	objptr, ##62484
0223c     71 01 00 FF 
02240     17 14 06 F6 | 	mov	arg02, ##@LR__4820
02244     54 C9 B1 FD | 	call	#__system___string_cmp
02248     00 FA 0D F2 | 	cmp	result1, #0 wz
0224c     28 00 90 AD |  if_e	jmp	#LR__0112
02250     7A 00 00 FF 
02254     14 E4 05 F1 | 	add	objptr, ##62484
02258     F2 12 02 FB | 	rdlong	arg01, objptr
0225c     7A 00 00 FF 
02260     14 E4 85 F1 | 	sub	objptr, ##62484
02264     71 01 00 FF 
02268     1C 14 06 F6 | 	mov	arg02, ##@LR__4821
0226c     2C C9 B1 FD | 	call	#__system___string_cmp
02270     00 FA 0D F2 | 	cmp	result1, #0 wz
02274     48 02 90 5D |  if_ne	jmp	#LR__0118
02278                 | LR__0112
02278                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"  
02278     7A 00 00 FF 
0227c     10 E4 05 F1 | 	add	objptr, ##62480
02280     F2 28 02 FB | 	rdlong	local06, objptr
02284     01 28 06 F1 | 	add	local06, #1
02288     03 28 66 F0 | 	shl	local06, #3
0228c     25 00 00 FF 
02290     04 E4 85 F1 | 	sub	objptr, ##18948
02294     F2 28 02 F1 | 	add	local06, objptr
02298     14 13 02 FB | 	rdlong	arg01, local06
0229c     71 01 00 FF 
022a0     1F 14 06 F6 | 	mov	arg02, ##@LR__4822
022a4     55 00 00 FF 
022a8     0C E4 85 F1 | 	sub	objptr, ##43532
022ac     EC C8 B1 FD | 	call	#__system___string_cmp
022b0     00 FA 0D F2 | 	cmp	result1, #0 wz
022b4     34 00 90 5D |  if_ne	jmp	#LR__0113
022b8     7A 00 00 FF 
022bc     10 E4 05 F1 | 	add	objptr, ##62480
022c0     F2 26 02 FB | 	rdlong	local05, objptr
022c4     01 26 06 F1 | 	add	local05, #1
022c8     03 26 66 F0 | 	shl	local05, #3
022cc     25 00 00 FF 
022d0     04 E4 85 F1 | 	sub	objptr, ##18948
022d4     F2 26 02 F1 | 	add	local05, objptr
022d8     71 01 00 FF 
022dc     25 32 06 F6 | 	mov	local11, ##@LR__4823
022e0     13 33 62 FC | 	wrlong	local11, local05
022e4     55 00 00 FF 
022e8     0C E4 85 F1 | 	sub	objptr, ##43532
022ec                 | LR__0113
022ec                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
022ec     7A 00 00 FF 
022f0     10 E4 05 F1 | 	add	objptr, ##62480
022f4     F2 28 02 FB | 	rdlong	local06, objptr
022f8     01 28 06 F1 | 	add	local06, #1
022fc     03 28 66 F0 | 	shl	local06, #3
02300     25 00 00 FF 
02304     04 E4 85 F1 | 	sub	objptr, ##18948
02308     F2 28 02 F1 | 	add	local06, objptr
0230c     14 13 02 FB | 	rdlong	arg01, local06
02310     71 01 00 FF 
02314     27 14 06 F6 | 	mov	arg02, ##@LR__4824
02318     55 00 00 FF 
0231c     0C E4 85 F1 | 	sub	objptr, ##43532
02320     78 C8 B1 FD | 	call	#__system___string_cmp
02324     00 FA 0D F2 | 	cmp	result1, #0 wz
02328     34 00 90 5D |  if_ne	jmp	#LR__0114
0232c     7A 00 00 FF 
02330     10 E4 05 F1 | 	add	objptr, ##62480
02334     F2 26 02 FB | 	rdlong	local05, objptr
02338     01 26 06 F1 | 	add	local05, #1
0233c     03 26 66 F0 | 	shl	local05, #3
02340     25 00 00 FF 
02344     04 E4 85 F1 | 	sub	objptr, ##18948
02348     F2 26 02 F1 | 	add	local05, objptr
0234c     71 01 00 FF 
02350     30 32 06 F6 | 	mov	local11, ##@LR__4825
02354     13 33 62 FC | 	wrlong	local11, local05
02358     55 00 00 FF 
0235c     0C E4 85 F1 | 	sub	objptr, ##43532
02360                 | LR__0114
02360                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02360     7A 00 00 FF 
02364     10 E4 05 F1 | 	add	objptr, ##62480
02368     F2 28 02 FB | 	rdlong	local06, objptr
0236c     01 28 06 F1 | 	add	local06, #1
02370     03 28 66 F0 | 	shl	local06, #3
02374     25 00 00 FF 
02378     04 E4 85 F1 | 	sub	objptr, ##18948
0237c     F2 28 02 F1 | 	add	local06, objptr
02380     14 13 02 FB | 	rdlong	arg01, local06
02384     71 01 00 FF 
02388     32 14 06 F6 | 	mov	arg02, ##@LR__4826
0238c     55 00 00 FF 
02390     0C E4 85 F1 | 	sub	objptr, ##43532
02394     04 C8 B1 FD | 	call	#__system___string_cmp
02398     00 FA 0D F2 | 	cmp	result1, #0 wz
0239c     34 00 90 5D |  if_ne	jmp	#LR__0115
023a0     7A 00 00 FF 
023a4     10 E4 05 F1 | 	add	objptr, ##62480
023a8     F2 26 02 FB | 	rdlong	local05, objptr
023ac     01 26 06 F1 | 	add	local05, #1
023b0     03 26 66 F0 | 	shl	local05, #3
023b4     25 00 00 FF 
023b8     04 E4 85 F1 | 	sub	objptr, ##18948
023bc     F2 26 02 F1 | 	add	local05, objptr
023c0     71 01 00 FF 
023c4     3B 32 06 F6 | 	mov	local11, ##@LR__4827
023c8     13 33 62 FC | 	wrlong	local11, local05
023cc     55 00 00 FF 
023d0     0C E4 85 F1 | 	sub	objptr, ##43532
023d4                 | LR__0115
023d4                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
023d4     7A 00 00 FF 
023d8     10 E4 05 F1 | 	add	objptr, ##62480
023dc     F2 28 02 FB | 	rdlong	local06, objptr
023e0     01 28 06 F1 | 	add	local06, #1
023e4     03 28 66 F0 | 	shl	local06, #3
023e8     25 00 00 FF 
023ec     04 E4 85 F1 | 	sub	objptr, ##18948
023f0     F2 28 02 F1 | 	add	local06, objptr
023f4     14 13 02 FB | 	rdlong	arg01, local06
023f8     71 01 00 FF 
023fc     3D 14 06 F6 | 	mov	arg02, ##@LR__4828
02400     55 00 00 FF 
02404     0C E4 85 F1 | 	sub	objptr, ##43532
02408     90 C7 B1 FD | 	call	#__system___string_cmp
0240c     00 FA 0D F2 | 	cmp	result1, #0 wz
02410     34 00 90 5D |  if_ne	jmp	#LR__0116
02414     7A 00 00 FF 
02418     10 E4 05 F1 | 	add	objptr, ##62480
0241c     F2 26 02 FB | 	rdlong	local05, objptr
02420     01 26 06 F1 | 	add	local05, #1
02424     03 26 66 F0 | 	shl	local05, #3
02428     25 00 00 FF 
0242c     04 E4 85 F1 | 	sub	objptr, ##18948
02430     F2 26 02 F1 | 	add	local05, objptr
02434     71 01 00 FF 
02438     46 32 06 F6 | 	mov	local11, ##@LR__4829
0243c     13 33 62 FC | 	wrlong	local11, local05
02440     55 00 00 FF 
02444     0C E4 85 F1 | 	sub	objptr, ##43532
02448                 | LR__0116
02448                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02448     7A 00 00 FF 
0244c     10 E4 05 F1 | 	add	objptr, ##62480
02450     F2 28 02 FB | 	rdlong	local06, objptr
02454     01 28 06 F1 | 	add	local06, #1
02458     03 28 66 F0 | 	shl	local06, #3
0245c     25 00 00 FF 
02460     04 E4 85 F1 | 	sub	objptr, ##18948
02464     F2 32 02 F6 | 	mov	local11, objptr
02468     F2 28 02 F1 | 	add	local06, objptr
0246c     14 13 02 FB | 	rdlong	arg01, local06
02470     71 01 00 FF 
02474     48 14 06 F6 | 	mov	arg02, ##@LR__4830
02478     55 00 00 FF 
0247c     0C E4 85 F1 | 	sub	objptr, ##43532
02480     18 C7 B1 FD | 	call	#__system___string_cmp
02484     00 FA 0D F2 | 	cmp	result1, #0 wz
02488     34 00 90 5D |  if_ne	jmp	#LR__0117
0248c     7A 00 00 FF 
02490     10 E4 05 F1 | 	add	objptr, ##62480
02494     F2 26 02 FB | 	rdlong	local05, objptr
02498     01 26 06 F1 | 	add	local05, #1
0249c     03 26 66 F0 | 	shl	local05, #3
024a0     25 00 00 FF 
024a4     04 E4 85 F1 | 	sub	objptr, ##18948
024a8     F2 26 02 F1 | 	add	local05, objptr
024ac     71 01 00 FF 
024b0     4B 32 06 F6 | 	mov	local11, ##@LR__4831
024b4     13 33 62 FC | 	wrlong	local11, local05
024b8     55 00 00 FF 
024bc     0C E4 85 F1 | 	sub	objptr, ##43532
024c0                 | LR__0117
024c0                 | LR__0118
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' ' 2a find part types 
024c0                 | ' 
024c0                 | ' for i=0 to k-1
024c0     00 20 06 F6 | 	mov	local02, #0
024c4     1D 61 02 F6 | 	mov	local34, local15
024c8                 | LR__0119
024c8     30 21 52 F2 | 	cmps	local02, local34 wc
024cc     74 06 90 3D |  if_ae	jmp	#LR__0129
024d0     10 2F 02 F6 | 	mov	local09, local02
024d4     03 2E 66 F0 | 	shl	local09, #3
024d8     55 00 00 FF 
024dc     0C E4 05 F1 | 	add	objptr, ##43532
024e0     F2 2E 02 F1 | 	add	local09, objptr
024e4     10 31 02 F6 | 	mov	local10, local02
024e8     18 35 02 F6 | 	mov	local12, local10
024ec     03 34 66 F0 | 	shl	local12, #3
024f0     F2 4A 02 F6 | 	mov	local23, objptr
024f4     F2 34 02 F1 | 	add	local12, objptr
024f8     1A 13 02 FB | 	rdlong	arg01, local12
024fc     55 00 00 FF 
02500     0C E4 85 F1 | 	sub	objptr, ##43532
02504     B0 14 B0 FD | 	call	#_isseparator
02508     FD FA E1 F8 | 	getbyte	result1, result1, #0
0250c     04 2E 06 F1 | 	add	local09, #4
02510     17 FB 61 FC | 	wrlong	result1, local09
02514                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
02514     10 2F 02 F6 | 	mov	local09, local02
02518     03 2E 66 F0 | 	shl	local09, #3
0251c     55 00 00 FF 
02520     0C E4 05 F1 | 	add	objptr, ##43532
02524     F2 2E 02 F1 | 	add	local09, objptr
02528     04 2E 06 F1 | 	add	local09, #4
0252c     17 33 02 FB | 	rdlong	local11, local09
02530     01 32 56 F2 | 	cmps	local11, #1 wc
02534     55 00 00 FF 
02538     0C E4 85 F1 | 	sub	objptr, ##43532
0253c     FC 05 90 3D |  if_ae	jmp	#LR__0128
02540     10 2F 02 F6 | 	mov	local09, local02
02544     03 2E 66 F0 | 	shl	local09, #3
02548     55 00 00 FF 
0254c     0C E4 05 F1 | 	add	objptr, ##43532
02550     F2 2E 02 F1 | 	add	local09, objptr
02554     10 31 02 F6 | 	mov	local10, local02
02558     18 35 02 F6 | 	mov	local12, local10
0255c     03 34 66 F0 | 	shl	local12, #3
02560     F2 4A 02 F6 | 	mov	local23, objptr
02564     F2 34 02 F1 | 	add	local12, objptr
02568     1A 13 02 FB | 	rdlong	arg01, local12
0256c     55 00 00 FF 
02570     0C E4 85 F1 | 	sub	objptr, ##43532
02574     F4 0D B0 FD | 	call	#_isoperator
02578     FD FA E1 F8 | 	getbyte	result1, result1, #0
0257c     04 2E 06 F1 | 	add	local09, #4
02580     17 FB 61 FC | 	wrlong	result1, local09
02584                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
02584     10 2F 02 F6 | 	mov	local09, local02
02588     03 2E 66 F0 | 	shl	local09, #3
0258c     55 00 00 FF 
02590     0C E4 05 F1 | 	add	objptr, ##43532
02594     F2 2E 02 F1 | 	add	local09, objptr
02598     04 2E 06 F1 | 	add	local09, #4
0259c     17 33 02 FB | 	rdlong	local11, local09
025a0     01 32 56 F2 | 	cmps	local11, #1 wc
025a4     55 00 00 FF 
025a8     0C E4 85 F1 | 	sub	objptr, ##43532
025ac     8C 05 90 3D |  if_ae	jmp	#LR__0128
025b0     10 2F 02 F6 | 	mov	local09, local02
025b4     03 2E 66 F0 | 	shl	local09, #3
025b8     55 00 00 FF 
025bc     0C E4 05 F1 | 	add	objptr, ##43532
025c0     F2 2E 02 F1 | 	add	local09, objptr
025c4     10 31 02 F6 | 	mov	local10, local02
025c8     18 35 02 F6 | 	mov	local12, local10
025cc     03 34 66 F0 | 	shl	local12, #3
025d0     F2 4A 02 F6 | 	mov	local23, objptr
025d4     F2 34 02 F1 | 	add	local12, objptr
025d8     1A 13 02 FB | 	rdlong	arg01, local12
025dc     55 00 00 FF 
025e0     0C E4 85 F1 | 	sub	objptr, ##43532
025e4                 | ' 
025e4                 | ' select case s
025e4     71 01 00 FF 
025e8     2C 15 06 F6 | 	mov	arg02, ##@LR__4902
025ec     AC C5 B1 FD | 	call	#__system___string_cmp
025f0     00 FA 0D F2 | 	cmp	result1, #0 wz
025f4     1B FA 05 A6 |  if_e	mov	result1, #27
025f8     00 FA 05 56 |  if_ne	mov	result1, #0
025fc     FD FA E1 F8 | 	getbyte	result1, result1, #0
02600     04 2E 06 F1 | 	add	local09, #4
02604     17 FB 61 FC | 	wrlong	result1, local09
02608                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
02608     10 2F 02 F6 | 	mov	local09, local02
0260c     03 2E 66 F0 | 	shl	local09, #3
02610     55 00 00 FF 
02614     0C E4 05 F1 | 	add	objptr, ##43532
02618     F2 2E 02 F1 | 	add	local09, objptr
0261c     04 2E 06 F1 | 	add	local09, #4
02620     17 33 02 FB | 	rdlong	local11, local09
02624     01 32 56 F2 | 	cmps	local11, #1 wc
02628     55 00 00 FF 
0262c     0C E4 85 F1 | 	sub	objptr, ##43532
02630     08 05 90 3D |  if_ae	jmp	#LR__0128
02634     10 2F 02 F6 | 	mov	local09, local02
02638     03 2E 66 F0 | 	shl	local09, #3
0263c     55 00 00 FF 
02640     0C E4 05 F1 | 	add	objptr, ##43532
02644     F2 2E 02 F1 | 	add	local09, objptr
02648     10 31 02 F6 | 	mov	local10, local02
0264c     18 35 02 F6 | 	mov	local12, local10
02650     03 34 66 F0 | 	shl	local12, #3
02654     F2 4A 02 F6 | 	mov	local23, objptr
02658     F2 34 02 F1 | 	add	local12, objptr
0265c     1A 13 02 FB | 	rdlong	arg01, local12
02660     55 00 00 FF 
02664     0C E4 85 F1 | 	sub	objptr, ##43532
02668     4C 15 B0 FD | 	call	#_iscommand
0266c     FD FA E1 F8 | 	getbyte	result1, result1, #0
02670     04 2E 06 F1 | 	add	local09, #4
02674     17 FB 61 FC | 	wrlong	result1, local09
02678                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
02678     10 2F 02 F6 | 	mov	local09, local02
0267c     03 2E 66 F0 | 	shl	local09, #3
02680     55 00 00 FF 
02684     0C E4 05 F1 | 	add	objptr, ##43532
02688     F2 2E 02 F1 | 	add	local09, objptr
0268c     04 2E 06 F1 | 	add	local09, #4
02690     17 33 02 FB | 	rdlong	local11, local09
02694     01 32 56 F2 | 	cmps	local11, #1 wc
02698     55 00 00 FF 
0269c     0C E4 85 F1 | 	sub	objptr, ##43532
026a0     98 04 90 3D |  if_ae	jmp	#LR__0128
026a4     10 2F 02 F6 | 	mov	local09, local02
026a8     03 2E 66 F0 | 	shl	local09, #3
026ac     55 00 00 FF 
026b0     0C E4 05 F1 | 	add	objptr, ##43532
026b4     F2 2E 02 F1 | 	add	local09, objptr
026b8     10 31 02 F6 | 	mov	local10, local02
026bc     18 35 02 F6 | 	mov	local12, local10
026c0     03 34 66 F0 | 	shl	local12, #3
026c4     F2 4A 02 F6 | 	mov	local23, objptr
026c8     F2 34 02 F1 | 	add	local12, objptr
026cc     1A 13 02 FB | 	rdlong	arg01, local12
026d0     55 00 00 FF 
026d4     0C E4 85 F1 | 	sub	objptr, ##43532
026d8     FC 20 B0 FD | 	call	#_isfunction
026dc     FD FA E1 F8 | 	getbyte	result1, result1, #0
026e0     04 2E 06 F1 | 	add	local09, #4
026e4     17 FB 61 FC | 	wrlong	result1, local09
026e8                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
026e8     10 2F 02 F6 | 	mov	local09, local02
026ec     03 2E 66 F0 | 	shl	local09, #3
026f0     55 00 00 FF 
026f4     0C E4 05 F1 | 	add	objptr, ##43532
026f8     F2 2E 02 F1 | 	add	local09, objptr
026fc     04 2E 06 F1 | 	add	local09, #4
02700     17 33 02 FB | 	rdlong	local11, local09
02704     01 32 56 F2 | 	cmps	local11, #1 wc
02708     55 00 00 FF 
0270c     0C E4 85 F1 | 	sub	objptr, ##43532
02710     28 04 90 3D |  if_ae	jmp	#LR__0128
02714     10 2F 02 F6 | 	mov	local09, local02
02718     03 2E 66 F0 | 	shl	local09, #3
0271c     55 00 00 FF 
02720     0C E4 05 F1 | 	add	objptr, ##43532
02724     F2 2E 02 F1 | 	add	local09, objptr
02728     10 31 02 F6 | 	mov	local10, local02
0272c     18 37 02 F6 | 	mov	local13, local10
02730     03 36 66 F0 | 	shl	local13, #3
02734     F2 34 02 F6 | 	mov	local12, objptr
02738     F2 36 02 F1 | 	add	local13, objptr
0273c     1B 13 02 FB | 	rdlong	arg01, local13
02740     55 00 00 FF 
02744     0C E4 85 F1 | 	sub	objptr, ##43532
02748     00 0F B0 FD | 	call	#_isnotename
0274c     04 2E 06 F1 | 	add	local09, #4
02750     17 FB 61 FC | 	wrlong	result1, local09
02754                 | ' lparts(i).token=isnotename(lparts(i).part$) 
02754                 | ' if lparts(i).token>0 then 
02754     10 2F 02 F6 | 	mov	local09, local02
02758     03 2E 66 F0 | 	shl	local09, #3
0275c     55 00 00 FF 
02760     0C E4 05 F1 | 	add	objptr, ##43532
02764     F2 2E 02 F1 | 	add	local09, objptr
02768     04 2E 06 F1 | 	add	local09, #4
0276c     17 33 02 FB | 	rdlong	local11, local09
02770     01 32 56 F2 | 	cmps	local11, #1 wc
02774     55 00 00 FF 
02778     0C E4 85 F1 | 	sub	objptr, ##43532
0277c     88 00 90 CD |  if_b	jmp	#LR__0120
02780     10 27 02 F6 | 	mov	local05, local02
02784     03 26 66 F0 | 	shl	local05, #3
02788     55 00 00 FF 
0278c     0C E4 05 F1 | 	add	objptr, ##43532
02790     F2 26 02 F1 | 	add	local05, objptr
02794     04 26 06 F1 | 	add	local05, #4
02798     13 33 02 FB | 	rdlong	local11, local05
0279c     19 13 02 F6 | 	mov	arg01, local11
027a0     55 00 00 FF 
027a4     0C E4 85 F1 | 	sub	objptr, ##43532
027a8     94 7B B1 FD | 	call	#_getnoteval
027ac     FD 62 02 F6 | 	mov	local35, result1
027b0     10 2F 02 F6 | 	mov	local09, local02
027b4     03 2E 66 F0 | 	shl	local09, #3
027b8     55 00 00 FF 
027bc     0C E4 05 F1 | 	add	objptr, ##43532
027c0     F2 2E 02 F1 | 	add	local09, objptr
027c4     31 13 02 F6 | 	mov	arg01, local35
027c8     55 00 00 FF 
027cc     0C E4 85 F1 | 	sub	objptr, ##43532
027d0     E0 E5 B1 FD | 	call	#__system__str_S
027d4     17 FB 61 FC | 	wrlong	result1, local09
027d8     10 23 02 F6 | 	mov	local03, local02
027dc     11 2F 02 F6 | 	mov	local09, local03
027e0     03 2E 66 F0 | 	shl	local09, #3
027e4     55 00 00 FF 
027e8     0C E4 05 F1 | 	add	objptr, ##43532
027ec     F2 2E 02 F1 | 	add	local09, objptr
027f0     04 2E 06 F1 | 	add	local09, #4
027f4     01 00 80 FF 
027f8     17 05 68 FC | 	wrlong	##514, local09
027fc     55 00 00 FF 
02800     0C E4 85 F1 | 	sub	objptr, ##43532
02804     34 03 90 FD | 	jmp	#LR__0128
02808                 | LR__0120
02808     10 27 02 F6 | 	mov	local05, local02
0280c     03 26 66 F0 | 	shl	local05, #3
02810     55 00 00 FF 
02814     0C E4 05 F1 | 	add	objptr, ##43532
02818     F2 26 02 F1 | 	add	local05, objptr
0281c     13 13 02 FB | 	rdlong	arg01, local05
02820     55 00 00 FF 
02824     0C E4 85 F1 | 	sub	objptr, ##43532
02828     60 27 B0 FD | 	call	#_isnum
0282c     FD 24 02 F6 | 	mov	local04, result1
02830     7A 00 00 FF 
02834     1C E4 05 F1 | 	add	objptr, ##62492
02838     F2 24 62 FC | 	wrlong	local04, objptr
0283c     10 27 02 F6 | 	mov	local05, local02
02840     03 26 66 F0 | 	shl	local05, #3
02844     25 00 00 FF 
02848     10 E4 85 F1 | 	sub	objptr, ##18960
0284c     F2 26 02 F1 | 	add	local05, objptr
02850     13 13 02 FB | 	rdlong	arg01, local05
02854     55 00 00 FF 
02858     0C E4 85 F1 | 	sub	objptr, ##43532
0285c     04 2A B0 FD | 	call	#_isint
02860     FD 24 02 F6 | 	mov	local04, result1
02864     7A 00 00 FF 
02868     20 E4 05 F1 | 	add	objptr, ##62496
0286c     F2 24 62 FC | 	wrlong	local04, objptr
02870     10 27 02 F6 | 	mov	local05, local02
02874     03 26 66 F0 | 	shl	local05, #3
02878     25 00 00 FF 
0287c     14 E4 85 F1 | 	sub	objptr, ##18964
02880     F2 28 02 F6 | 	mov	local06, objptr
02884     F2 26 02 F1 | 	add	local05, objptr
02888     13 13 02 FB | 	rdlong	arg01, local05
0288c     55 00 00 FF 
02890     0C E4 85 F1 | 	sub	objptr, ##43532
02894     24 2B B0 FD | 	call	#_isdec
02898     7A 00 00 FF 
0289c     24 E4 05 F1 | 	add	objptr, ##62500
028a0     F2 FA 61 FC | 	wrlong	result1, objptr
028a4                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
028a4     08 E4 85 F1 | 	sub	objptr, #8
028a8     F2 24 0A FB | 	rdlong	local04, objptr wz
028ac     7A 00 00 FF 
028b0     1C E4 85 F1 | 	sub	objptr, ##62492
028b4     60 00 90 AD |  if_e	jmp	#LR__0121
028b8     7A 00 00 FF 
028bc     20 E4 05 F1 | 	add	objptr, ##62496
028c0     F2 2E 0A FB | 	rdlong	local09, objptr wz
028c4     7A 00 00 FF 
028c8     20 E4 85 F1 | 	sub	objptr, ##62496
028cc     48 00 90 AD |  if_e	jmp	#LR__0121
028d0     7A 00 00 FF 
028d4     24 E4 05 F1 | 	add	objptr, ##62500
028d8     F2 32 0A FB | 	rdlong	local11, objptr wz
028dc     7A 00 00 FF 
028e0     24 E4 85 F1 | 	sub	objptr, ##62500
028e4     30 00 90 AD |  if_e	jmp	#LR__0121
028e8     10 23 02 F6 | 	mov	local03, local02
028ec     11 2F 02 F6 | 	mov	local09, local03
028f0     03 2E 66 F0 | 	shl	local09, #3
028f4     55 00 00 FF 
028f8     0C E4 05 F1 | 	add	objptr, ##43532
028fc     F2 2E 02 F1 | 	add	local09, objptr
02900     04 2E 06 F1 | 	add	local09, #4
02904     01 00 80 FF 
02908     17 01 68 FC | 	wrlong	##512, local09
0290c     55 00 00 FF 
02910     0C E4 85 F1 | 	sub	objptr, ##43532
02914     24 02 90 FD | 	jmp	#LR__0128
02918                 | LR__0121
02918                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
02918     7A 00 00 FF 
0291c     1C E4 05 F1 | 	add	objptr, ##62492
02920     F2 24 0A FB | 	rdlong	local04, objptr wz
02924     7A 00 00 FF 
02928     1C E4 85 F1 | 	sub	objptr, ##62492
0292c     64 00 90 AD |  if_e	jmp	#LR__0122
02930     7A 00 00 FF 
02934     20 E4 05 F1 | 	add	objptr, ##62496
02938     F2 2E 0A FB | 	rdlong	local09, objptr wz
0293c     7A 00 00 FF 
02940     20 E4 85 F1 | 	sub	objptr, ##62496
02944     7A 00 00 5F 
02948     24 E4 05 51 |  if_ne	add	objptr, ##62500
0294c     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02950     7A 00 00 5F 
02954     24 E4 85 51 |  if_ne	sub	objptr, ##62500
02958     19 29 22 56 |  if_ne	not	local06, local11
0295c     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02960     30 00 90 AD |  if_e	jmp	#LR__0122
02964     10 23 02 F6 | 	mov	local03, local02
02968     11 2F 02 F6 | 	mov	local09, local03
0296c     03 2E 66 F0 | 	shl	local09, #3
02970     55 00 00 FF 
02974     0C E4 05 F1 | 	add	objptr, ##43532
02978     F2 2E 02 F1 | 	add	local09, objptr
0297c     04 2E 06 F1 | 	add	local09, #4
02980     01 00 80 FF 
02984     17 03 68 FC | 	wrlong	##513, local09
02988     55 00 00 FF 
0298c     0C E4 85 F1 | 	sub	objptr, ##43532
02990     A8 01 90 FD | 	jmp	#LR__0128
02994                 | LR__0122
02994                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
02994     7A 00 00 FF 
02998     1C E4 05 F1 | 	add	objptr, ##62492
0299c     F2 24 0A FB | 	rdlong	local04, objptr wz
029a0     7A 00 00 FF 
029a4     1C E4 85 F1 | 	sub	objptr, ##62492
029a8     7A 00 00 5F 
029ac     20 E4 05 51 |  if_ne	add	objptr, ##62496
029b0     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
029b4     7A 00 00 5F 
029b8     20 E4 85 51 |  if_ne	sub	objptr, ##62496
029bc     17 2F 22 56 |  if_ne	not	local09, local09
029c0     00 2E 0E 52 |  if_ne	cmp	local09, #0 wz
029c4     7A 00 00 5F 
029c8     24 E4 05 51 |  if_ne	add	objptr, ##62500
029cc     F2 32 02 5B |  if_ne	rdlong	local11, objptr
029d0     7A 00 00 5F 
029d4     24 E4 85 51 |  if_ne	sub	objptr, ##62500
029d8     19 29 22 56 |  if_ne	not	local06, local11
029dc     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
029e0     30 00 90 AD |  if_e	jmp	#LR__0123
029e4     10 23 02 F6 | 	mov	local03, local02
029e8     11 2F 02 F6 | 	mov	local09, local03
029ec     03 2E 66 F0 | 	shl	local09, #3
029f0     55 00 00 FF 
029f4     0C E4 05 F1 | 	add	objptr, ##43532
029f8     F2 2E 02 F1 | 	add	local09, objptr
029fc     04 2E 06 F1 | 	add	local09, #4
02a00     01 00 80 FF 
02a04     17 05 68 FC | 	wrlong	##514, local09
02a08     55 00 00 FF 
02a0c     0C E4 85 F1 | 	sub	objptr, ##43532
02a10     28 01 90 FD | 	jmp	#LR__0128
02a14                 | LR__0123
02a14                 | ' 
02a14                 | ' if isstring(lparts(i).part$) then 
02a14     10 27 02 F6 | 	mov	local05, local02
02a18     03 26 66 F0 | 	shl	local05, #3
02a1c     55 00 00 FF 
02a20     0C E4 05 F1 | 	add	objptr, ##43532
02a24     F2 26 02 F1 | 	add	local05, objptr
02a28     13 13 02 FB | 	rdlong	arg01, local05
02a2c     55 00 00 FF 
02a30     0C E4 85 F1 | 	sub	objptr, ##43532
02a34     44 2A B0 FD | 	call	#_isstring
02a38     00 FA 0D F2 | 	cmp	result1, #0 wz
02a3c     A0 00 90 AD |  if_e	jmp	#LR__0126
02a40     10 2F 02 F6 | 	mov	local09, local02
02a44     03 2E 66 F0 | 	shl	local09, #3
02a48     55 00 00 FF 
02a4c     0C E4 05 F1 | 	add	objptr, ##43532
02a50     F2 2E 02 F1 | 	add	local09, objptr
02a54     04 2E 06 F1 | 	add	local09, #4
02a58     01 00 80 FF 
02a5c     17 07 68 FC | 	wrlong	##515, local09
02a60     10 23 02 F6 | 	mov	local03, local02
02a64     11 2F 02 F6 | 	mov	local09, local03
02a68     03 2E 66 F0 | 	shl	local09, #3
02a6c     F2 2E 02 F1 | 	add	local09, objptr
02a70     10 37 02 F6 | 	mov	local13, local02
02a74     03 36 66 F0 | 	shl	local13, #3
02a78     F2 36 02 F1 | 	add	local13, objptr
02a7c     1B 29 02 FB | 	rdlong	local06, local13
02a80     02 32 06 F6 | 	mov	local11, #2
02a84     10 4B 02 F6 | 	mov	local23, local02
02a88     25 43 02 F6 | 	mov	local19, local23
02a8c     21 45 02 F6 | 	mov	local20, local19
02a90     03 44 66 F0 | 	shl	local20, #3
02a94     F2 46 02 F6 | 	mov	local21, objptr
02a98     F2 44 02 F1 | 	add	local20, objptr
02a9c     22 13 02 FB | 	rdlong	arg01, local20
02aa0     55 00 00 FF 
02aa4     0C E4 85 F1 | 	sub	objptr, ##43532
02aa8     09 2B 02 F6 | 	mov	local07, arg01
02aac     97 06 48 FB | 	callpa	#(@LR__0125-@LR__0124)>>2,fcache_load_ptr_
02ab0                 | LR__0124
02ab0     15 FB C9 FA | 	rdbyte	result1, local07 wz
02ab4     01 2A 06 51 |  if_ne	add	local07, #1
02ab8     F4 FF 9F 5D |  if_ne	jmp	#LR__0124
02abc                 | LR__0125
02abc     09 2B 82 F1 | 	sub	local07, arg01
02ac0     15 31 02 F6 | 	mov	local10, local07
02ac4     02 30 86 F1 | 	sub	local10, #2
02ac8     14 13 02 F6 | 	mov	arg01, local06
02acc     19 15 02 F6 | 	mov	arg02, local11
02ad0     18 17 02 F6 | 	mov	arg03, local10
02ad4     FC E1 B1 FD | 	call	#__system__Mid_S
02ad8     17 FB 61 FC | 	wrlong	result1, local09
02adc     5C 00 90 FD | 	jmp	#LR__0128
02ae0                 | LR__0126
02ae0                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
02ae0     10 23 02 F6 | 	mov	local03, local02
02ae4     11 27 02 F6 | 	mov	local05, local03
02ae8     03 26 66 F0 | 	shl	local05, #3
02aec     55 00 00 FF 
02af0     0C E4 05 F1 | 	add	objptr, ##43532
02af4     F2 26 02 F1 | 	add	local05, objptr
02af8     13 13 02 FB | 	rdlong	arg01, local05
02afc     55 00 00 FF 
02b00     0C E4 85 F1 | 	sub	objptr, ##43532
02b04     10 22 B0 FD | 	call	#_isname
02b08     00 FA 4D F2 | 	cmps	result1, #0 wz
02b0c     2C 00 90 AD |  if_e	jmp	#LR__0127
02b10     10 23 02 F6 | 	mov	local03, local02
02b14     11 2F 02 F6 | 	mov	local09, local03
02b18     03 2E 66 F0 | 	shl	local09, #3
02b1c     55 00 00 FF 
02b20     0C E4 05 F1 | 	add	objptr, ##43532
02b24     F2 2E 02 F1 | 	add	local09, objptr
02b28     04 2E 06 F1 | 	add	local09, #4
02b2c     01 00 80 FF 
02b30     17 09 68 FC | 	wrlong	##516, local09
02b34     55 00 00 FF 
02b38     0C E4 85 F1 | 	sub	objptr, ##43532
02b3c                 | LR__0127
02b3c                 | LR__0128
02b3c     01 20 06 F1 | 	add	local02, #1
02b40     84 F9 9F FD | 	jmp	#LR__0119
02b44                 | LR__0129
02b44     1D 2F 02 F6 | 	mov	local09, local15
02b48     03 2E 66 F0 | 	shl	local09, #3
02b4c     55 00 00 FF 
02b50     0C E4 05 F1 | 	add	objptr, ##43532
02b54     F2 2E 02 F1 | 	add	local09, objptr
02b58     04 2E 06 F1 | 	add	local09, #4
02b5c     17 FD 6B FC | 	wrlong	#510, local09
02b60     1D 2F 02 F6 | 	mov	local09, local15
02b64     03 2E 66 F0 | 	shl	local09, #3
02b68     F2 26 02 F6 | 	mov	local05, objptr
02b6c     F2 2E 02 F1 | 	add	local09, objptr
02b70     71 01 00 FF 
02b74     4D 28 06 F6 | 	mov	local06, ##@LR__4832
02b78     17 29 62 FC | 	wrlong	local06, local09
02b7c     10 00 00 FF 
02b80     54 E4 05 F1 | 	add	objptr, ##8276
02b84     F2 3A 62 FC | 	wrlong	local15, objptr
02b88                 | ' 
02b88                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02b88                 | ' 
02b88                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02b88                 | '  
02b88                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
02b88     14 00 00 FF 
02b8c     B4 E5 05 F1 | 	add	objptr, ##10676
02b90     F2 12 02 FB | 	rdlong	arg01, objptr
02b94     7A 00 00 FF 
02b98     14 E4 85 F1 | 	sub	objptr, ##62484
02b9c     71 01 00 FF 
02ba0     4E 2E 06 F6 | 	mov	local09, ##@LR__4833
02ba4     17 15 02 F6 | 	mov	arg02, local09
02ba8     F0 BF B1 FD | 	call	#__system___string_cmp
02bac     00 FA 0D F2 | 	cmp	result1, #0 wz
02bb0     1C 01 90 AD |  if_e	jmp	#LR__0130
02bb4     7A 00 00 FF 
02bb8     14 E4 05 F1 | 	add	objptr, ##62484
02bbc     F2 12 02 FB | 	rdlong	arg01, objptr
02bc0     7A 00 00 FF 
02bc4     14 E4 85 F1 | 	sub	objptr, ##62484
02bc8     71 01 00 FF 
02bcc     53 26 06 F6 | 	mov	local05, ##@LR__4834
02bd0     13 2F 02 F6 | 	mov	local09, local05
02bd4     17 15 02 F6 | 	mov	arg02, local09
02bd8     C0 BF B1 FD | 	call	#__system___string_cmp
02bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02be0     EC 00 90 AD |  if_e	jmp	#LR__0130
02be4     7A 00 00 FF 
02be8     14 E4 05 F1 | 	add	objptr, ##62484
02bec     F2 12 02 FB | 	rdlong	arg01, objptr
02bf0     7A 00 00 FF 
02bf4     14 E4 85 F1 | 	sub	objptr, ##62484
02bf8     71 01 00 FF 
02bfc     58 28 06 F6 | 	mov	local06, ##@LR__4835
02c00     14 27 02 F6 | 	mov	local05, local06
02c04     13 15 02 F6 | 	mov	arg02, local05
02c08     90 BF B1 FD | 	call	#__system___string_cmp
02c0c     FD 2E 0A F6 | 	mov	local09, result1 wz
02c10     BC 00 90 AD |  if_e	jmp	#LR__0130
02c14     7A 00 00 FF 
02c18     14 E4 05 F1 | 	add	objptr, ##62484
02c1c     F2 12 02 FB | 	rdlong	arg01, objptr
02c20     7A 00 00 FF 
02c24     14 E4 85 F1 | 	sub	objptr, ##62484
02c28     71 01 00 FF 
02c2c     5D 32 06 F6 | 	mov	local11, ##@LR__4836
02c30     19 29 02 F6 | 	mov	local06, local11
02c34     14 15 02 F6 | 	mov	arg02, local06
02c38     60 BF B1 FD | 	call	#__system___string_cmp
02c3c     FD 26 0A F6 | 	mov	local05, result1 wz
02c40     8C 00 90 AD |  if_e	jmp	#LR__0130
02c44     7A 00 00 FF 
02c48     14 E4 05 F1 | 	add	objptr, ##62484
02c4c     F2 12 02 FB | 	rdlong	arg01, objptr
02c50     7A 00 00 FF 
02c54     14 E4 85 F1 | 	sub	objptr, ##62484
02c58     71 01 00 FF 
02c5c     61 30 06 F6 | 	mov	local10, ##@LR__4837
02c60     18 33 02 F6 | 	mov	local11, local10
02c64     19 15 02 F6 | 	mov	arg02, local11
02c68     30 BF B1 FD | 	call	#__system___string_cmp
02c6c     FD 28 0A F6 | 	mov	local06, result1 wz
02c70     5C 00 90 AD |  if_e	jmp	#LR__0130
02c74     7A 00 00 FF 
02c78     14 E4 05 F1 | 	add	objptr, ##62484
02c7c     F2 12 02 FB | 	rdlong	arg01, objptr
02c80     7A 00 00 FF 
02c84     14 E4 85 F1 | 	sub	objptr, ##62484
02c88     71 01 00 FF 
02c8c     65 30 06 F6 | 	mov	local10, ##@LR__4838
02c90     18 15 02 F6 | 	mov	arg02, local10
02c94     04 BF B1 FD | 	call	#__system___string_cmp
02c98     FD 32 0A F6 | 	mov	local11, result1 wz
02c9c     30 00 90 AD |  if_e	jmp	#LR__0130
02ca0     7A 00 00 FF 
02ca4     14 E4 05 F1 | 	add	objptr, ##62484
02ca8     F2 12 02 FB | 	rdlong	arg01, objptr
02cac     7A 00 00 FF 
02cb0     14 E4 85 F1 | 	sub	objptr, ##62484
02cb4     71 01 00 FF 
02cb8     68 34 06 F6 | 	mov	local12, ##@LR__4839
02cbc     1A 37 02 F6 | 	mov	local13, local12
02cc0     1B 15 02 F6 | 	mov	arg02, local13
02cc4     D4 BE B1 FD | 	call	#__system___string_cmp
02cc8     FD 30 0A F6 | 	mov	local10, result1 wz
02ccc     9C 00 90 5D |  if_ne	jmp	#LR__0131
02cd0                 | LR__0130
02cd0     7A 00 00 FF 
02cd4     10 E4 05 F1 | 	add	objptr, ##62480
02cd8     F2 34 02 FB | 	rdlong	local12, objptr
02cdc     1A 37 02 F6 | 	mov	local13, local12
02ce0     01 36 06 F1 | 	add	local13, #1
02ce4     1B 4B 02 F6 | 	mov	local23, local13
02ce8     25 43 02 F6 | 	mov	local19, local23
02cec     03 42 66 F0 | 	shl	local19, #3
02cf0     25 00 00 FF 
02cf4     04 E4 85 F1 | 	sub	objptr, ##18948
02cf8     F2 44 02 F6 | 	mov	local20, objptr
02cfc     F2 42 02 F1 | 	add	local19, objptr
02d00     04 42 06 F1 | 	add	local19, #4
02d04     21 4D 02 FB | 	rdlong	local24, local19
02d08     04 42 86 F1 | 	sub	local19, #4
02d0c     26 47 02 F6 | 	mov	local21, local24
02d10     01 00 00 FF 
02d14     04 46 0E F2 | 	cmp	local21, ##516 wz
02d18     55 00 00 FF 
02d1c     0C E4 85 F1 | 	sub	objptr, ##43532
02d20     48 00 90 5D |  if_ne	jmp	#LR__0131
02d24     7A 00 00 FF 
02d28     10 E4 05 F1 | 	add	objptr, ##62480
02d2c     F2 2E 02 FB | 	rdlong	local09, objptr
02d30     01 2E 06 F1 | 	add	local09, #1
02d34     17 27 02 F6 | 	mov	local05, local09
02d38     03 26 66 F0 | 	shl	local05, #3
02d3c     25 00 00 FF 
02d40     04 E4 85 F1 | 	sub	objptr, ##18948
02d44     F2 28 02 F6 | 	mov	local06, objptr
02d48     F2 26 02 F1 | 	add	local05, objptr
02d4c     01 00 00 FF 
02d50     03 32 06 F6 | 	mov	local11, ##515
02d54     04 26 06 F1 | 	add	local05, #4
02d58     01 00 80 FF 
02d5c     13 07 68 FC | 	wrlong	##515, local05
02d60     04 26 86 F1 | 	sub	local05, #4
02d64     55 00 00 FF 
02d68     0C E4 85 F1 | 	sub	objptr, ##43532
02d6c                 | LR__0131
02d6c                 | ' 
02d6c                 | ' ' abbreviated command has to be at the position addptr
02d6c                 | ' 
02d6c                 | ' 
02d6c                 | ' 
02d6c                 | ' '2b determine a type of the line
02d6c                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02d6c     55 00 00 FF 
02d70     0C E4 05 F1 | 	add	objptr, ##43532
02d74     F2 12 02 FB | 	rdlong	arg01, objptr
02d78     55 00 00 FF 
02d7c     0C E4 85 F1 | 	sub	objptr, ##43532
02d80     38 26 B0 FD | 	call	#_isdec
02d84     00 FA 0D F2 | 	cmp	result1, #0 wz
02d88     30 00 90 AD |  if_e	jmp	#LR__0132
02d8c     55 00 00 FF 
02d90     0C E4 05 F1 | 	add	objptr, ##43532
02d94     F2 12 02 FB | 	rdlong	arg01, objptr
02d98     55 00 00 FF 
02d9c     0C E4 85 F1 | 	sub	objptr, ##43532
02da0     00 14 06 F6 | 	mov	arg02, #0
02da4     C4 EF B1 FD | 	call	#__system____builtin_atoi
02da8     79 00 00 FF 
02dac     A0 E5 05 F1 | 	add	objptr, ##62368
02db0     F2 FA 61 FC | 	wrlong	result1, objptr
02db4     79 00 00 FF 
02db8     A0 E5 85 F1 | 	sub	objptr, ##62368
02dbc                 | LR__0132
02dbc                 | ' 
02dbc                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
02dbc     79 00 00 FF 
02dc0     A0 E5 05 F1 | 	add	objptr, ##62368
02dc4     F2 24 02 FB | 	rdlong	local04, objptr
02dc8     79 00 00 FF 
02dcc     A0 E5 85 F1 | 	sub	objptr, ##62368
02dd0     01 24 16 F2 | 	cmp	local04, #1 wc
02dd4     3C 00 90 CD |  if_b	jmp	#LR__0133
02dd8     01 3A 0E F2 | 	cmp	local15, #1 wz
02ddc     57 00 00 AF 
02de0     24 E4 05 A1 |  if_e	add	objptr, ##44580
02de4     F2 26 02 AB |  if_e	rdlong	local05, objptr
02de8     57 00 00 AF 
02dec     24 E4 85 A1 |  if_e	sub	objptr, ##44580
02df0     03 26 0E A2 |  if_e	cmp	local05, #3 wz
02df4     1C 00 90 5D |  if_ne	jmp	#LR__0133
02df8     79 00 00 FF 
02dfc     A0 E5 05 F1 | 	add	objptr, ##62368
02e00     F2 12 02 FB | 	rdlong	arg01, objptr
02e04     79 00 00 FF 
02e08     A0 E5 85 F1 | 	sub	objptr, ##62368
02e0c     D0 26 B0 FD | 	call	#_deleteline
02e10     4C 05 90 FD | 	jmp	#LR__0150
02e14                 | LR__0133
02e14                 | ' 
02e14                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
02e14     79 00 00 FF 
02e18     A0 E5 05 F1 | 	add	objptr, ##62368
02e1c     F2 24 02 FB | 	rdlong	local04, objptr
02e20     79 00 00 FF 
02e24     A0 E5 85 F1 | 	sub	objptr, ##62368
02e28     01 24 16 F2 | 	cmp	local04, #1 wc
02e2c     EC 00 90 CD |  if_b	jmp	#LR__0136
02e30     57 00 00 FF 
02e34     24 E4 05 F1 | 	add	objptr, ##44580
02e38     F2 26 02 FB | 	rdlong	local05, objptr
02e3c     57 00 00 FF 
02e40     24 E4 85 F1 | 	sub	objptr, ##44580
02e44     13 2F 0A F6 | 	mov	local09, local05 wz
02e48     20 00 90 AD |  if_e	jmp	#LR__0134
02e4c     57 00 00 FF 
02e50     24 E4 05 F1 | 	add	objptr, ##44580
02e54     F2 32 02 FB | 	rdlong	local11, objptr
02e58     57 00 00 FF 
02e5c     24 E4 85 F1 | 	sub	objptr, ##44580
02e60     19 29 02 F6 | 	mov	local06, local11
02e64     03 28 0E F2 | 	cmp	local06, #3 wz
02e68     B0 00 90 5D |  if_ne	jmp	#LR__0136
02e6c                 | LR__0134
02e6c     55 00 00 FF 
02e70     20 E4 05 F1 | 	add	objptr, ##43552
02e74     F2 36 02 FB | 	rdlong	local13, objptr
02e78     55 00 00 FF 
02e7c     20 E4 85 F1 | 	sub	objptr, ##43552
02e80     1B 31 02 F6 | 	mov	local10, local13
02e84     1B 30 0E F2 | 	cmp	local10, #27 wz
02e88     90 00 90 AD |  if_e	jmp	#LR__0136
02e8c     79 00 00 FF 
02e90     A0 E5 05 F1 | 	add	objptr, ##62368
02e94     F2 12 02 FB | 	rdlong	arg01, objptr
02e98     22 00 00 FF 
02e9c     7C E5 85 F1 | 	sub	objptr, ##17788
02ea0     F2 16 02 FB | 	rdlong	arg03, objptr
02ea4     57 00 00 FF 
02ea8     24 E4 85 F1 | 	sub	objptr, ##44580
02eac     00 14 06 F6 | 	mov	arg02, #0
02eb0     94 3A B0 FD | 	call	#_compile
02eb4     FD 1E 0A F6 | 	mov	local01, result1 wz
02eb8                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02eb8                 | '   if err<>0 then printerror(err): goto 104
02eb8     0C 00 90 AD |  if_e	jmp	#LR__0135
02ebc     0F 13 02 F6 | 	mov	arg01, local01
02ec0     34 78 B1 FD | 	call	#_printerror
02ec4     98 04 90 FD | 	jmp	#LR__0150
02ec8                 | LR__0135
02ec8                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02ec8     79 00 00 FF 
02ecc     EC E5 05 F1 | 	add	objptr, ##62444
02ed0     F2 12 02 FB | 	rdlong	arg01, objptr
02ed4     79 00 00 FF 
02ed8     EC E5 85 F1 | 	sub	objptr, ##62444
02edc     71 01 00 FF 
02ee0     6C 14 06 F6 | 	mov	arg02, ##@LR__4840
02ee4     B4 BC B1 FD | 	call	#__system___string_cmp
02ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
02eec     70 04 90 AD |  if_e	jmp	#LR__0150
02ef0     79 00 00 FF 
02ef4     EC E5 05 F1 | 	add	objptr, ##62444
02ef8     F2 24 02 FB | 	rdlong	local04, objptr
02efc     22 00 00 FF 
02f00     D0 E5 85 F1 | 	sub	objptr, ##17872
02f04     F2 24 62 FC | 	wrlong	local04, objptr
02f08     08 E4 05 F1 | 	add	objptr, #8
02f0c     F2 08 68 FC | 	wrlong	#4, objptr
02f10     57 00 00 FF 
02f14     24 E4 85 F1 | 	sub	objptr, ##44580
02f18     6C DB 9F FD | 	jmp	#LR__0020
02f1c                 | LR__0136
02f1c                 | '       							
02f1c                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
02f1c     79 00 00 FF 
02f20     A0 E5 05 F1 | 	add	objptr, ##62368
02f24     F2 24 02 FB | 	rdlong	local04, objptr
02f28     79 00 00 FF 
02f2c     A0 E5 85 F1 | 	sub	objptr, ##62368
02f30     01 24 16 F2 | 	cmp	local04, #1 wc
02f34     EC 00 90 CD |  if_b	jmp	#LR__0139
02f38     57 00 00 FF 
02f3c     24 E4 05 F1 | 	add	objptr, ##44580
02f40     F2 26 02 FB | 	rdlong	local05, objptr
02f44     57 00 00 FF 
02f48     24 E4 85 F1 | 	sub	objptr, ##44580
02f4c     01 26 0E F2 | 	cmp	local05, #1 wz
02f50     20 00 90 AD |  if_e	jmp	#LR__0137
02f54     57 00 00 FF 
02f58     24 E4 05 F1 | 	add	objptr, ##44580
02f5c     F2 32 02 FB | 	rdlong	local11, objptr
02f60     57 00 00 FF 
02f64     24 E4 85 F1 | 	sub	objptr, ##44580
02f68     19 29 02 F6 | 	mov	local06, local11
02f6c     02 28 0E F2 | 	cmp	local06, #2 wz
02f70     B0 00 90 5D |  if_ne	jmp	#LR__0139
02f74                 | LR__0137
02f74     55 00 00 FF 
02f78     18 E4 05 F1 | 	add	objptr, ##43544
02f7c     F2 36 02 FB | 	rdlong	local13, objptr
02f80     55 00 00 FF 
02f84     18 E4 85 F1 | 	sub	objptr, ##43544
02f88     1B 31 02 F6 | 	mov	local10, local13
02f8c     1B 30 0E F2 | 	cmp	local10, #27 wz
02f90     90 00 90 AD |  if_e	jmp	#LR__0139
02f94     79 00 00 FF 
02f98     A0 E5 05 F1 | 	add	objptr, ##62368
02f9c     F2 12 02 FB | 	rdlong	arg01, objptr
02fa0     22 00 00 FF 
02fa4     7C E5 85 F1 | 	sub	objptr, ##17788
02fa8     F2 16 02 FB | 	rdlong	arg03, objptr
02fac     57 00 00 FF 
02fb0     24 E4 85 F1 | 	sub	objptr, ##44580
02fb4     00 14 06 F6 | 	mov	arg02, #0
02fb8     8C 39 B0 FD | 	call	#_compile
02fbc     FD 1E 0A F6 | 	mov	local01, result1 wz
02fc0                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02fc0                 | '   if err<>0 then printerror(err): goto 104
02fc0     0C 00 90 AD |  if_e	jmp	#LR__0138
02fc4     0F 13 02 F6 | 	mov	arg01, local01
02fc8     2C 77 B1 FD | 	call	#_printerror
02fcc     90 03 90 FD | 	jmp	#LR__0150
02fd0                 | LR__0138
02fd0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
02fd0     79 00 00 FF 
02fd4     EC E5 05 F1 | 	add	objptr, ##62444
02fd8     F2 12 02 FB | 	rdlong	arg01, objptr
02fdc     79 00 00 FF 
02fe0     EC E5 85 F1 | 	sub	objptr, ##62444
02fe4     71 01 00 FF 
02fe8     6D 14 06 F6 | 	mov	arg02, ##@LR__4841
02fec     AC BB B1 FD | 	call	#__system___string_cmp
02ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff4     68 03 90 AD |  if_e	jmp	#LR__0150
02ff8     79 00 00 FF 
02ffc     EC E5 05 F1 | 	add	objptr, ##62444
03000     F2 24 02 FB | 	rdlong	local04, objptr
03004     22 00 00 FF 
03008     D0 E5 85 F1 | 	sub	objptr, ##17872
0300c     F2 24 62 FC | 	wrlong	local04, objptr
03010     08 E4 05 F1 | 	add	objptr, #8
03014     F2 08 68 FC | 	wrlong	#4, objptr
03018     57 00 00 FF 
0301c     24 E4 85 F1 | 	sub	objptr, ##44580
03020     64 DA 9F FD | 	jmp	#LR__0020
03024                 | LR__0139
03024                 | ' 							 
03024                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
03024     79 00 00 FF 
03028     A0 E5 05 F1 | 	add	objptr, ##62368
0302c     F2 24 02 FB | 	rdlong	local04, objptr
03030     79 00 00 FF 
03034     A0 E5 85 F1 | 	sub	objptr, ##62368
03038     01 24 16 F2 | 	cmp	local04, #1 wc
0303c     D4 00 90 CD |  if_b	jmp	#LR__0141
03040     57 00 00 FF 
03044     24 E4 05 F1 | 	add	objptr, ##44580
03048     F2 26 0A FB | 	rdlong	local05, objptr wz
0304c     57 00 00 FF 
03050     24 E4 85 F1 | 	sub	objptr, ##44580
03054     20 00 90 AD |  if_e	jmp	#LR__0140
03058     57 00 00 FF 
0305c     24 E4 05 F1 | 	add	objptr, ##44580
03060     F2 32 02 FB | 	rdlong	local11, objptr
03064     57 00 00 FF 
03068     24 E4 85 F1 | 	sub	objptr, ##44580
0306c     19 29 02 F6 | 	mov	local06, local11
03070     03 28 0E F2 | 	cmp	local06, #3 wz
03074     9C 00 90 5D |  if_ne	jmp	#LR__0141
03078                 | LR__0140
03078     55 00 00 FF 
0307c     20 E4 05 F1 | 	add	objptr, ##43552
03080     F2 36 02 FB | 	rdlong	local13, objptr
03084     55 00 00 FF 
03088     20 E4 85 F1 | 	sub	objptr, ##43552
0308c     1B 31 02 F6 | 	mov	local10, local13
03090     1B 30 0E F2 | 	cmp	local10, #27 wz
03094     7C 00 90 5D |  if_ne	jmp	#LR__0141
03098     79 00 00 FF 
0309c     A0 E5 05 F1 | 	add	objptr, ##62368
030a0     F2 12 02 FB | 	rdlong	arg01, objptr
030a4     22 00 00 FF 
030a8     7C E5 85 F1 | 	sub	objptr, ##17788
030ac     F2 16 02 FB | 	rdlong	arg03, objptr
030b0     57 00 00 FF 
030b4     24 E4 85 F1 | 	sub	objptr, ##44580
030b8     00 14 06 F6 | 	mov	arg02, #0
030bc     58 39 B0 FD | 	call	#_compile_assign
030c0                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
030c0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
030c0     79 00 00 FF 
030c4     EC E5 05 F1 | 	add	objptr, ##62444
030c8     F2 12 02 FB | 	rdlong	arg01, objptr
030cc     79 00 00 FF 
030d0     EC E5 85 F1 | 	sub	objptr, ##62444
030d4     71 01 00 FF 
030d8     6E 14 06 F6 | 	mov	arg02, ##@LR__4842
030dc     BC BA B1 FD | 	call	#__system___string_cmp
030e0     00 FA 0D F2 | 	cmp	result1, #0 wz
030e4     78 02 90 AD |  if_e	jmp	#LR__0150
030e8     79 00 00 FF 
030ec     EC E5 05 F1 | 	add	objptr, ##62444
030f0     F2 24 02 FB | 	rdlong	local04, objptr
030f4     22 00 00 FF 
030f8     D0 E5 85 F1 | 	sub	objptr, ##17872
030fc     F2 24 62 FC | 	wrlong	local04, objptr
03100     08 E4 05 F1 | 	add	objptr, #8
03104     F2 08 68 FC | 	wrlong	#4, objptr
03108     57 00 00 FF 
0310c     24 E4 85 F1 | 	sub	objptr, ##44580
03110     74 D9 9F FD | 	jmp	#LR__0020
03114                 | LR__0141
03114                 | '     							 
03114                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
03114     79 00 00 FF 
03118     A0 E5 05 F1 | 	add	objptr, ##62368
0311c     F2 24 02 FB | 	rdlong	local04, objptr
03120     79 00 00 FF 
03124     A0 E5 85 F1 | 	sub	objptr, ##62368
03128     01 24 16 F2 | 	cmp	local04, #1 wc
0312c     CC 00 90 CD |  if_b	jmp	#LR__0142
03130     57 00 00 FF 
03134     24 E4 05 F1 | 	add	objptr, ##44580
03138     F2 26 02 FB | 	rdlong	local05, objptr
0313c     57 00 00 FF 
03140     24 E4 85 F1 | 	sub	objptr, ##44580
03144     01 26 0E F2 | 	cmp	local05, #1 wz
03148     57 00 00 5F 
0314c     24 E4 05 51 |  if_ne	add	objptr, ##44580
03150     F2 32 02 5B |  if_ne	rdlong	local11, objptr
03154     57 00 00 5F 
03158     24 E4 85 51 |  if_ne	sub	objptr, ##44580
0315c     02 32 0E 52 |  if_ne	cmp	local11, #2 wz
03160     55 00 00 AF 
03164     18 E4 05 A1 |  if_e	add	objptr, ##43544
03168     F2 36 02 AB |  if_e	rdlong	local13, objptr
0316c     55 00 00 AF 
03170     18 E4 85 A1 |  if_e	sub	objptr, ##43544
03174     1B 31 02 A6 |  if_e	mov	local10, local13
03178     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
0317c     7C 00 90 5D |  if_ne	jmp	#LR__0142
03180     79 00 00 FF 
03184     A0 E5 05 F1 | 	add	objptr, ##62368
03188     F2 12 02 FB | 	rdlong	arg01, objptr
0318c     22 00 00 FF 
03190     7C E5 85 F1 | 	sub	objptr, ##17788
03194     F2 16 02 FB | 	rdlong	arg03, objptr
03198     57 00 00 FF 
0319c     24 E4 85 F1 | 	sub	objptr, ##44580
031a0     00 14 06 F6 | 	mov	arg02, #0
031a4     70 38 B0 FD | 	call	#_compile_assign
031a8                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
031a8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
031a8     79 00 00 FF 
031ac     EC E5 05 F1 | 	add	objptr, ##62444
031b0     F2 12 02 FB | 	rdlong	arg01, objptr
031b4     79 00 00 FF 
031b8     EC E5 85 F1 | 	sub	objptr, ##62444
031bc     71 01 00 FF 
031c0     6F 14 06 F6 | 	mov	arg02, ##@LR__4843
031c4     D4 B9 B1 FD | 	call	#__system___string_cmp
031c8     00 FA 0D F2 | 	cmp	result1, #0 wz
031cc     90 01 90 AD |  if_e	jmp	#LR__0150
031d0     79 00 00 FF 
031d4     EC E5 05 F1 | 	add	objptr, ##62444
031d8     F2 24 02 FB | 	rdlong	local04, objptr
031dc     22 00 00 FF 
031e0     D0 E5 85 F1 | 	sub	objptr, ##17872
031e4     F2 24 62 FC | 	wrlong	local04, objptr
031e8     08 E4 05 F1 | 	add	objptr, #8
031ec     F2 08 68 FC | 	wrlong	#4, objptr
031f0     57 00 00 FF 
031f4     24 E4 85 F1 | 	sub	objptr, ##44580
031f8     8C D8 9F FD | 	jmp	#LR__0020
031fc                 | LR__0142
031fc                 | ' 
031fc                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
031fc     55 00 00 FF 
03200     10 E4 05 F1 | 	add	objptr, ##43536
03204     F2 24 02 FB | 	rdlong	local04, objptr
03208     55 00 00 FF 
0320c     10 E4 85 F1 | 	sub	objptr, ##43536
03210     01 00 00 FF 
03214     04 24 0E F2 | 	cmp	local04, ##516 wz
03218     55 00 00 AF 
0321c     18 E4 05 A1 |  if_e	add	objptr, ##43544
03220     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03224     55 00 00 AF 
03228     18 E4 85 A1 |  if_e	sub	objptr, ##43544
0322c     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
03230     14 00 90 5D |  if_ne	jmp	#LR__0143
03234     00 12 06 F6 | 	mov	arg01, #0
03238     00 14 06 F6 | 	mov	arg02, #0
0323c     00 16 06 F6 | 	mov	arg03, #0
03240     D4 37 B0 FD | 	call	#_compile_assign
03244     90 00 90 FD | 	jmp	#LR__0145
03248                 | LR__0143
03248                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
03248     55 00 00 FF 
0324c     10 E4 05 F1 | 	add	objptr, ##43536
03250     F2 24 02 FB | 	rdlong	local04, objptr
03254     55 00 00 FF 
03258     10 E4 85 F1 | 	sub	objptr, ##43536
0325c     01 00 00 FF 
03260     04 24 0E F2 | 	cmp	local04, ##516 wz
03264     55 00 00 AF 
03268     18 E4 05 A1 |  if_e	add	objptr, ##43544
0326c     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03270     55 00 00 AF 
03274     18 E4 85 A1 |  if_e	sub	objptr, ##43544
03278     14 2E 0E A2 |  if_e	cmp	local09, #20 wz
0327c     44 00 90 5D |  if_ne	jmp	#LR__0144
03280     00 12 06 F6 | 	mov	arg01, #0
03284     84 12 B2 FD | 	call	#__system___getiolock_0484
03288     FD 12 02 F6 | 	mov	arg01, result1
0328c     E4 B8 B1 FD | 	call	#__system___lockmem
03290     71 01 00 FF 
03294     70 14 06 F6 | 	mov	arg02, ##@LR__4844
03298     00 12 06 F6 | 	mov	arg01, #0
0329c     00 16 06 F6 | 	mov	arg03, #0
032a0     D8 C5 B1 FD | 	call	#__system___basic_print_string
032a4     00 12 06 F6 | 	mov	arg01, #0
032a8     0A 14 06 F6 | 	mov	arg02, #10
032ac     00 16 06 F6 | 	mov	arg03, #0
032b0     70 C5 B1 FD | 	call	#__system___basic_print_char
032b4     00 12 06 F6 | 	mov	arg01, #0
032b8     50 12 B2 FD | 	call	#__system___getiolock_0484
032bc     FD 00 68 FC | 	wrlong	#0, result1
032c0     7C 00 90 FD | 	jmp	#LR__0149
032c4                 | LR__0144
032c4     00 12 06 F6 | 	mov	arg01, #0
032c8     00 14 06 F6 | 	mov	arg02, #0
032cc     00 16 06 F6 | 	mov	arg03, #0
032d0     74 36 B0 FD | 	call	#_compile
032d4     FD 1E 02 F6 | 	mov	local01, result1
032d8                 | LR__0145
032d8                 | ' 
032d8                 | ' ' if we are here, this is not a program line to add, so try to execute this
032d8                 | ' 
032d8                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
032d8                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
032d8                 | ' if err=0 then execute_line() else printerror(err)
032d8     00 1E 0E F2 | 	cmp	local01, #0 wz
032dc     0C 00 90 5D |  if_ne	jmp	#LR__0146
032e0     00 12 06 F6 | 	mov	arg01, #0
032e4     74 74 B0 FD | 	call	#_execute_line
032e8     08 00 90 FD | 	jmp	#LR__0147
032ec                 | LR__0146
032ec     0F 13 02 F6 | 	mov	arg01, local01
032f0     04 74 B1 FD | 	call	#_printerror
032f4                 | LR__0147
032f4                 | ' if rest$<>"" then line$=rest$:  goto 108 
032f4     79 00 00 FF 
032f8     EC E5 05 F1 | 	add	objptr, ##62444
032fc     F2 12 02 FB | 	rdlong	arg01, objptr
03300     79 00 00 FF 
03304     EC E5 85 F1 | 	sub	objptr, ##62444
03308     71 01 00 FF 
0330c     9F 14 06 F6 | 	mov	arg02, ##@LR__4845
03310     88 B8 B1 FD | 	call	#__system___string_cmp
03314     00 FA 0D F2 | 	cmp	result1, #0 wz
03318     24 00 90 AD |  if_e	jmp	#LR__0148
0331c     79 00 00 FF 
03320     EC E5 05 F1 | 	add	objptr, ##62444
03324     F2 24 02 FB | 	rdlong	local04, objptr
03328     22 00 00 FF 
0332c     D0 E5 85 F1 | 	sub	objptr, ##17872
03330     F2 24 62 FC | 	wrlong	local04, objptr
03334     57 00 00 FF 
03338     1C E4 85 F1 | 	sub	objptr, ##44572
0333c     48 D7 9F FD | 	jmp	#LR__0020
03340                 | LR__0148
03340                 | LR__0149
03340     71 01 00 FF 
03344     A0 12 06 F6 | 	mov	arg01, ##@LR__4846
03348                 | ' 
03348                 | ' write(text)
03348     5C A5 B1 FD | 	call	#_hg010b_spin2_write
0334c                 | ' crlf
0334c     24 A8 B1 FD | 	call	#_hg010b_spin2_crlf
03350     71 01 00 FF 
03354     A1 12 06 F6 | 	mov	arg01, ##@LR__4847
03358                 | ' 
03358                 | ' write(text)
03358     4C A5 B1 FD | 	call	#_hg010b_spin2_write
0335c                 | ' crlf
0335c     14 A8 B1 FD | 	call	#_hg010b_spin2_crlf
03360                 | LR__0150
03360     A7 F0 03 F6 | 	mov	ptra, fp
03364     B2 00 A0 FD | 	call	#popregs_
03368                 | _interpret_ret
03368     2D 00 64 FD | 	ret
0336c                 | 
0336c                 | ' 
0336c                 | ' 
0336c                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
0336c                 | ' 
0336c                 | ' function isoperator(s as string) as ubyte
0336c                 | _isoperator
0336c     01 4A 05 F6 | 	mov	COUNT_, #1
03370     A8 00 A0 FD | 	call	#pushregs_
03374                 | ' 
03374                 | ' select case s
03374     09 1F 02 F6 | 	mov	local01, arg01
03378     71 01 00 FF 
0337c     A7 14 06 F6 | 	mov	arg02, ##@LR__4848
03380     0F 13 02 F6 | 	mov	arg01, local01
03384     14 B8 B1 FD | 	call	#__system___string_cmp
03388     00 FA 0D F2 | 	cmp	result1, #0 wz
0338c     FC 01 90 AD |  if_e	jmp	#LR__0160
03390     71 01 00 FF 
03394     A9 14 06 F6 | 	mov	arg02, ##@LR__4849
03398     0F 13 02 F6 | 	mov	arg01, local01
0339c     FC B7 B1 FD | 	call	#__system___string_cmp
033a0     00 FA 0D F2 | 	cmp	result1, #0 wz
033a4     EC 01 90 AD |  if_e	jmp	#LR__0161
033a8     71 01 00 FF 
033ac     AB 14 06 F6 | 	mov	arg02, ##@LR__4850
033b0     0F 13 02 F6 | 	mov	arg01, local01
033b4     E4 B7 B1 FD | 	call	#__system___string_cmp
033b8     00 FA 0D F2 | 	cmp	result1, #0 wz
033bc     DC 01 90 AD |  if_e	jmp	#LR__0162
033c0     71 01 00 FF 
033c4     AE 14 06 F6 | 	mov	arg02, ##@LR__4851
033c8     0F 13 02 F6 | 	mov	arg01, local01
033cc     CC B7 B1 FD | 	call	#__system___string_cmp
033d0     00 FA 0D F2 | 	cmp	result1, #0 wz
033d4     CC 01 90 AD |  if_e	jmp	#LR__0163
033d8     71 01 00 FF 
033dc     B2 14 06 F6 | 	mov	arg02, ##@LR__4852
033e0     0F 13 02 F6 | 	mov	arg01, local01
033e4     B4 B7 B1 FD | 	call	#__system___string_cmp
033e8     00 FA 0D F2 | 	cmp	result1, #0 wz
033ec     BC 01 90 AD |  if_e	jmp	#LR__0164
033f0     71 01 00 FF 
033f4     B4 14 06 F6 | 	mov	arg02, ##@LR__4853
033f8     0F 13 02 F6 | 	mov	arg01, local01
033fc     9C B7 B1 FD | 	call	#__system___string_cmp
03400     00 FA 0D F2 | 	cmp	result1, #0 wz
03404     AC 01 90 AD |  if_e	jmp	#LR__0165
03408     71 01 00 FF 
0340c     B6 14 06 F6 | 	mov	arg02, ##@LR__4854
03410     0F 13 02 F6 | 	mov	arg01, local01
03414     84 B7 B1 FD | 	call	#__system___string_cmp
03418     00 FA 0D F2 | 	cmp	result1, #0 wz
0341c     9C 01 90 AD |  if_e	jmp	#LR__0166
03420     71 01 00 FF 
03424     BA 14 06 F6 | 	mov	arg02, ##@LR__4855
03428     0F 13 02 F6 | 	mov	arg01, local01
0342c     6C B7 B1 FD | 	call	#__system___string_cmp
03430     00 FA 0D F2 | 	cmp	result1, #0 wz
03434     8C 01 90 AD |  if_e	jmp	#LR__0167
03438     71 01 00 FF 
0343c     BE 14 06 F6 | 	mov	arg02, ##@LR__4856
03440     0F 13 02 F6 | 	mov	arg01, local01
03444     54 B7 B1 FD | 	call	#__system___string_cmp
03448     00 FA 0D F2 | 	cmp	result1, #0 wz
0344c     7C 01 90 AD |  if_e	jmp	#LR__0168
03450     71 01 00 FF 
03454     C2 14 06 F6 | 	mov	arg02, ##@LR__4857
03458     0F 13 02 F6 | 	mov	arg01, local01
0345c     3C B7 B1 FD | 	call	#__system___string_cmp
03460     00 FA 0D F2 | 	cmp	result1, #0 wz
03464     6C 01 90 AD |  if_e	jmp	#LR__0169
03468     71 01 00 FF 
0346c     C6 14 06 F6 | 	mov	arg02, ##@LR__4858
03470     0F 13 02 F6 | 	mov	arg01, local01
03474     24 B7 B1 FD | 	call	#__system___string_cmp
03478     00 FA 0D F2 | 	cmp	result1, #0 wz
0347c     5C 01 90 AD |  if_e	jmp	#LR__0170
03480     71 01 00 FF 
03484     CA 14 06 F6 | 	mov	arg02, ##@LR__4859
03488     0F 13 02 F6 | 	mov	arg01, local01
0348c     0C B7 B1 FD | 	call	#__system___string_cmp
03490     00 FA 0D F2 | 	cmp	result1, #0 wz
03494     4C 01 90 AD |  if_e	jmp	#LR__0171
03498     71 01 00 FF 
0349c     CC 14 06 F6 | 	mov	arg02, ##@LR__4860
034a0     0F 13 02 F6 | 	mov	arg01, local01
034a4     F4 B6 B1 FD | 	call	#__system___string_cmp
034a8     00 FA 0D F2 | 	cmp	result1, #0 wz
034ac     3C 01 90 AD |  if_e	jmp	#LR__0172
034b0     71 01 00 FF 
034b4     D0 14 06 F6 | 	mov	arg02, ##@LR__4861
034b8     0F 13 02 F6 | 	mov	arg01, local01
034bc     DC B6 B1 FD | 	call	#__system___string_cmp
034c0     00 FA 0D F2 | 	cmp	result1, #0 wz
034c4     2C 01 90 AD |  if_e	jmp	#LR__0173
034c8     71 01 00 FF 
034cc     D2 14 06 F6 | 	mov	arg02, ##@LR__4862
034d0     0F 13 02 F6 | 	mov	arg01, local01
034d4     C4 B6 B1 FD | 	call	#__system___string_cmp
034d8     00 FA 0D F2 | 	cmp	result1, #0 wz
034dc     1C 01 90 AD |  if_e	jmp	#LR__0174
034e0     71 01 00 FF 
034e4     D4 14 06 F6 | 	mov	arg02, ##@LR__4863
034e8     0F 13 02 F6 | 	mov	arg01, local01
034ec     AC B6 B1 FD | 	call	#__system___string_cmp
034f0     00 FA 0D F2 | 	cmp	result1, #0 wz
034f4     0C 01 90 AD |  if_e	jmp	#LR__0175
034f8     71 01 00 FF 
034fc     D7 14 06 F6 | 	mov	arg02, ##@LR__4864
03500     0F 13 02 F6 | 	mov	arg01, local01
03504     94 B6 B1 FD | 	call	#__system___string_cmp
03508     00 FA 0D F2 | 	cmp	result1, #0 wz
0350c     FC 00 90 AD |  if_e	jmp	#LR__0176
03510     71 01 00 FF 
03514     DA 14 06 F6 | 	mov	arg02, ##@LR__4865
03518     0F 13 02 F6 | 	mov	arg01, local01
0351c     7C B6 B1 FD | 	call	#__system___string_cmp
03520     00 FA 0D F2 | 	cmp	result1, #0 wz
03524     EC 00 90 AD |  if_e	jmp	#LR__0177
03528     71 01 00 FF 
0352c     DC 14 06 F6 | 	mov	arg02, ##@LR__4866
03530     0F 13 02 F6 | 	mov	arg01, local01
03534     64 B6 B1 FD | 	call	#__system___string_cmp
03538     00 FA 0D F2 | 	cmp	result1, #0 wz
0353c     DC 00 90 AD |  if_e	jmp	#LR__0178
03540     71 01 00 FF 
03544     DE 14 06 F6 | 	mov	arg02, ##@LR__4867
03548     0F 13 02 F6 | 	mov	arg01, local01
0354c     4C B6 B1 FD | 	call	#__system___string_cmp
03550     00 FA 0D F2 | 	cmp	result1, #0 wz
03554     CC 00 90 AD |  if_e	jmp	#LR__0179
03558     71 01 00 FF 
0355c     E1 14 06 F6 | 	mov	arg02, ##@LR__4868
03560     0F 13 02 F6 | 	mov	arg01, local01
03564     34 B6 B1 FD | 	call	#__system___string_cmp
03568     00 FA 0D F2 | 	cmp	result1, #0 wz
0356c     BC 00 90 AD |  if_e	jmp	#LR__0180
03570     71 01 00 FF 
03574     E4 14 06 F6 | 	mov	arg02, ##@LR__4869
03578     0F 13 02 F6 | 	mov	arg01, local01
0357c     1C B6 B1 FD | 	call	#__system___string_cmp
03580     00 FA 0D F2 | 	cmp	result1, #0 wz
03584     AC 00 90 AD |  if_e	jmp	#LR__0181
03588     B0 00 90 FD | 	jmp	#LR__0182
0358c                 | LR__0160
0358c     01 FA 05 F6 | 	mov	result1, #1
03590     AC 00 90 FD | 	jmp	#LR__0183
03594                 | LR__0161
03594     02 FA 05 F6 | 	mov	result1, #2
03598     A4 00 90 FD | 	jmp	#LR__0183
0359c                 | LR__0162
0359c     03 FA 05 F6 | 	mov	result1, #3
035a0     9C 00 90 FD | 	jmp	#LR__0183
035a4                 | LR__0163
035a4     04 FA 05 F6 | 	mov	result1, #4
035a8     94 00 90 FD | 	jmp	#LR__0183
035ac                 | LR__0164
035ac     05 FA 05 F6 | 	mov	result1, #5
035b0     8C 00 90 FD | 	jmp	#LR__0183
035b4                 | LR__0165
035b4     06 FA 05 F6 | 	mov	result1, #6
035b8     84 00 90 FD | 	jmp	#LR__0183
035bc                 | LR__0166
035bc     07 FA 05 F6 | 	mov	result1, #7
035c0     7C 00 90 FD | 	jmp	#LR__0183
035c4                 | LR__0167
035c4     08 FA 05 F6 | 	mov	result1, #8
035c8     74 00 90 FD | 	jmp	#LR__0183
035cc                 | LR__0168
035cc     09 FA 05 F6 | 	mov	result1, #9
035d0     6C 00 90 FD | 	jmp	#LR__0183
035d4                 | LR__0169
035d4     0A FA 05 F6 | 	mov	result1, #10
035d8     64 00 90 FD | 	jmp	#LR__0183
035dc                 | LR__0170
035dc     0B FA 05 F6 | 	mov	result1, #11
035e0     5C 00 90 FD | 	jmp	#LR__0183
035e4                 | LR__0171
035e4     0C FA 05 F6 | 	mov	result1, #12
035e8     54 00 90 FD | 	jmp	#LR__0183
035ec                 | LR__0172
035ec     0D FA 05 F6 | 	mov	result1, #13
035f0     4C 00 90 FD | 	jmp	#LR__0183
035f4                 | LR__0173
035f4     0E FA 05 F6 | 	mov	result1, #14
035f8     44 00 90 FD | 	jmp	#LR__0183
035fc                 | LR__0174
035fc     1B FA 05 F6 | 	mov	result1, #27
03600     3C 00 90 FD | 	jmp	#LR__0183
03604                 | LR__0175
03604     27 FA 05 F6 | 	mov	result1, #39
03608     34 00 90 FD | 	jmp	#LR__0183
0360c                 | LR__0176
0360c     26 FA 05 F6 | 	mov	result1, #38
03610     2C 00 90 FD | 	jmp	#LR__0183
03614                 | LR__0177
03614     10 FA 05 F6 | 	mov	result1, #16
03618     24 00 90 FD | 	jmp	#LR__0183
0361c                 | LR__0178
0361c     0F FA 05 F6 | 	mov	result1, #15
03620     1C 00 90 FD | 	jmp	#LR__0183
03624                 | LR__0179
03624     2A FA 05 F6 | 	mov	result1, #42
03628     14 00 90 FD | 	jmp	#LR__0183
0362c                 | LR__0180
0362c     28 FA 05 F6 | 	mov	result1, #40
03630     0C 00 90 FD | 	jmp	#LR__0183
03634                 | LR__0181
03634     29 FA 05 F6 | 	mov	result1, #41
03638     04 00 90 FD | 	jmp	#LR__0183
0363c                 | LR__0182
0363c     00 FA 05 F6 | 	mov	result1, #0
03640                 | LR__0183
03640     A7 F0 03 F6 | 	mov	ptra, fp
03644     B2 00 A0 FD | 	call	#popregs_
03648                 | _isoperator_ret
03648     2D 00 64 FD | 	ret
0364c                 | 
0364c                 | ' 
0364c                 | ' 
0364c                 | ' function isnotename(s as string) as ulong
0364c                 | _isnotename
0364c     07 4A 05 F6 | 	mov	COUNT_, #7
03650     A8 00 A0 FD | 	call	#pushregs_
03654                 | ' if left$(s,1)<>"#" then return 0
03654     09 1F 02 F6 | 	mov	local01, arg01
03658     01 14 06 F6 | 	mov	arg02, #1
0365c     5C D5 B1 FD | 	call	#__system__Left_S
03660     FD 12 02 F6 | 	mov	arg01, result1
03664     71 01 00 FF 
03668     E7 14 06 F6 | 	mov	arg02, ##@LR__4870
0366c     2C B5 B1 FD | 	call	#__system___string_cmp
03670     00 FA 0D F2 | 	cmp	result1, #0 wz
03674     00 FA 05 56 |  if_ne	mov	result1, #0
03678     30 03 90 5D |  if_ne	jmp	#LR__0213
0367c                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
0367c     0F 13 02 F6 | 	mov	arg01, local01
03680     03 14 06 F6 | 	mov	arg02, #3
03684     01 16 06 F6 | 	mov	arg03, #1
03688     48 D6 B1 FD | 	call	#__system__Mid_S
0368c     FD 12 02 F6 | 	mov	arg01, result1
03690     71 01 00 FF 
03694     E9 14 06 F6 | 	mov	arg02, ##@LR__4871
03698     00 B5 B1 FD | 	call	#__system___string_cmp
0369c     00 FA 0D F2 | 	cmp	result1, #0 wz
036a0     18 00 90 5D |  if_ne	jmp	#LR__0190
036a4     0F 13 02 F6 | 	mov	arg01, local01
036a8     02 14 06 F6 | 	mov	arg02, #2
036ac     02 16 06 F6 | 	mov	arg03, #2
036b0     20 D6 B1 FD | 	call	#__system__Mid_S
036b4     FD 20 02 F6 | 	mov	local02, result1
036b8     14 00 90 FD | 	jmp	#LR__0191
036bc                 | LR__0190
036bc     0F 13 02 F6 | 	mov	arg01, local01
036c0     02 14 06 F6 | 	mov	arg02, #2
036c4     01 16 06 F6 | 	mov	arg03, #1
036c8     08 D6 B1 FD | 	call	#__system__Mid_S
036cc     FD 20 02 F6 | 	mov	local02, result1
036d0                 | LR__0191
036d0                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
036d0     0F 13 02 F6 | 	mov	arg01, local01
036d4     09 23 02 F6 | 	mov	local03, arg01
036d8     97 06 48 FB | 	callpa	#(@LR__0193-@LR__0192)>>2,fcache_load_ptr_
036dc                 | LR__0192
036dc     11 FB C9 FA | 	rdbyte	result1, local03 wz
036e0     01 22 06 51 |  if_ne	add	local03, #1
036e4     F4 FF 9F 5D |  if_ne	jmp	#LR__0192
036e8                 | LR__0193
036e8     09 23 82 F1 | 	sub	local03, arg01
036ec     11 15 02 F6 | 	mov	arg02, local03
036f0     01 14 86 F1 | 	sub	arg02, #1
036f4     0F 13 02 F6 | 	mov	arg01, local01
036f8     01 16 06 F6 | 	mov	arg03, #1
036fc     D4 D5 B1 FD | 	call	#__system__Mid_S
03700     FD 12 02 F6 | 	mov	arg01, result1
03704     71 01 00 FF 
03708     EB 14 06 F6 | 	mov	arg02, ##@LR__4872
0370c     8C B4 B1 FD | 	call	#__system___string_cmp
03710     00 FA 0D F2 | 	cmp	result1, #0 wz
03714     28 00 90 AD |  if_e	jmp	#LR__0194
03718     0F 13 02 F6 | 	mov	arg01, local01
0371c     01 14 06 F6 | 	mov	arg02, #1
03720     20 D5 B1 FD | 	call	#__system__Right_S
03724     FD 12 02 F6 | 	mov	arg01, result1
03728     B0 E7 B1 FD | 	call	#__system____builtin_atof
0372c     FD 12 02 F6 | 	mov	arg01, result1
03730     00 14 06 F6 | 	mov	arg02, #0
03734     84 E4 B1 FD | 	call	#__system___float_tointeger
03738     FD 24 02 F6 | 	mov	local04, result1
0373c     34 00 90 FD | 	jmp	#LR__0195
03740                 | LR__0194
03740     0F 13 02 F6 | 	mov	arg01, local01
03744     01 14 06 F6 | 	mov	arg02, #1
03748     F8 D4 B1 FD | 	call	#__system__Right_S
0374c     FD 12 02 F6 | 	mov	arg01, result1
03750     88 E7 B1 FD | 	call	#__system____builtin_atof
03754     FD 14 02 F6 | 	mov	arg02, result1
03758     00 C0 5F FF 
0375c     00 12 06 F6 | 	mov	arg01, ##-1082130432
03760     90 DF B1 FD | 	call	#__system___float_mul
03764     FD 12 02 F6 | 	mov	arg01, result1
03768     00 14 06 F6 | 	mov	arg02, #0
0376c     4C E4 B1 FD | 	call	#__system___float_tointeger
03770     FD 24 02 F6 | 	mov	local04, result1
03774                 | LR__0195
03774                 | ' 
03774                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
03774     00 24 0E F2 | 	cmp	local04, #0 wz
03778     24 00 90 5D |  if_ne	jmp	#LR__0196
0377c     0F 13 02 F6 | 	mov	arg01, local01
03780     01 14 06 F6 | 	mov	arg02, #1
03784     BC D4 B1 FD | 	call	#__system__Right_S
03788     FD 12 02 F6 | 	mov	arg01, result1
0378c     71 01 00 FF 
03790     ED 14 06 F6 | 	mov	arg02, ##@LR__4873
03794     04 B4 B1 FD | 	call	#__system___string_cmp
03798     00 FA 0D F2 | 	cmp	result1, #0 wz
0379c     04 24 06 56 |  if_ne	mov	local04, #4
037a0                 | LR__0196
037a0                 | ' 
037a0                 | ' select case s1
037a0     10 27 02 F6 | 	mov	local05, local02
037a4     71 01 00 FF 
037a8     EF 14 06 F6 | 	mov	arg02, ##@LR__4874
037ac     13 13 02 F6 | 	mov	arg01, local05
037b0     E8 B3 B1 FD | 	call	#__system___string_cmp
037b4     00 FA 0D F2 | 	cmp	result1, #0 wz
037b8     24 01 90 AD |  if_e	jmp	#LR__0197
037bc     71 01 00 FF 
037c0     F1 14 06 F6 | 	mov	arg02, ##@LR__4875
037c4     13 13 02 F6 | 	mov	arg01, local05
037c8     D0 B3 B1 FD | 	call	#__system___string_cmp
037cc     00 FA 0D F2 | 	cmp	result1, #0 wz
037d0     18 01 90 AD |  if_e	jmp	#LR__0198
037d4     71 01 00 FF 
037d8     F4 14 06 F6 | 	mov	arg02, ##@LR__4876
037dc     13 13 02 F6 | 	mov	arg01, local05
037e0     B8 B3 B1 FD | 	call	#__system___string_cmp
037e4     00 FA 0D F2 | 	cmp	result1, #0 wz
037e8     0C 01 90 AD |  if_e	jmp	#LR__0199
037ec     71 01 00 FF 
037f0     F6 14 06 F6 | 	mov	arg02, ##@LR__4877
037f4     13 13 02 F6 | 	mov	arg01, local05
037f8     A0 B3 B1 FD | 	call	#__system___string_cmp
037fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03800     00 01 90 AD |  if_e	jmp	#LR__0200
03804     71 01 00 FF 
03808     F9 14 06 F6 | 	mov	arg02, ##@LR__4878
0380c     13 13 02 F6 | 	mov	arg01, local05
03810     88 B3 B1 FD | 	call	#__system___string_cmp
03814     00 FA 0D F2 | 	cmp	result1, #0 wz
03818     F4 00 90 AD |  if_e	jmp	#LR__0201
0381c     71 01 00 FF 
03820     FB 14 06 F6 | 	mov	arg02, ##@LR__4879
03824     13 13 02 F6 | 	mov	arg01, local05
03828     70 B3 B1 FD | 	call	#__system___string_cmp
0382c     00 FA 0D F2 | 	cmp	result1, #0 wz
03830     E8 00 90 AD |  if_e	jmp	#LR__0202
03834     71 01 00 FF 
03838     FD 14 06 F6 | 	mov	arg02, ##@LR__4880
0383c     13 13 02 F6 | 	mov	arg01, local05
03840     58 B3 B1 FD | 	call	#__system___string_cmp
03844     00 FA 0D F2 | 	cmp	result1, #0 wz
03848     DC 00 90 AD |  if_e	jmp	#LR__0203
0384c     71 01 00 FF 
03850     00 15 06 F6 | 	mov	arg02, ##@LR__4881
03854     13 13 02 F6 | 	mov	arg01, local05
03858     40 B3 B1 FD | 	call	#__system___string_cmp
0385c     00 FA 0D F2 | 	cmp	result1, #0 wz
03860     D0 00 90 AD |  if_e	jmp	#LR__0204
03864     71 01 00 FF 
03868     02 15 06 F6 | 	mov	arg02, ##@LR__4882
0386c     13 13 02 F6 | 	mov	arg01, local05
03870     28 B3 B1 FD | 	call	#__system___string_cmp
03874     00 FA 0D F2 | 	cmp	result1, #0 wz
03878     C4 00 90 AD |  if_e	jmp	#LR__0205
0387c     71 01 00 FF 
03880     05 15 06 F6 | 	mov	arg02, ##@LR__4883
03884     13 13 02 F6 | 	mov	arg01, local05
03888     10 B3 B1 FD | 	call	#__system___string_cmp
0388c     00 FA 0D F2 | 	cmp	result1, #0 wz
03890     B8 00 90 AD |  if_e	jmp	#LR__0206
03894     71 01 00 FF 
03898     07 15 06 F6 | 	mov	arg02, ##@LR__4884
0389c     13 13 02 F6 | 	mov	arg01, local05
038a0     F8 B2 B1 FD | 	call	#__system___string_cmp
038a4     00 FA 0D F2 | 	cmp	result1, #0 wz
038a8     AC 00 90 AD |  if_e	jmp	#LR__0207
038ac     71 01 00 FF 
038b0     0A 15 06 F6 | 	mov	arg02, ##@LR__4885
038b4     13 13 02 F6 | 	mov	arg01, local05
038b8     E0 B2 B1 FD | 	call	#__system___string_cmp
038bc     00 FA 0D F2 | 	cmp	result1, #0 wz
038c0     A0 00 90 AD |  if_e	jmp	#LR__0208
038c4     71 01 00 FF 
038c8     0C 15 06 F6 | 	mov	arg02, ##@LR__4886
038cc     13 13 02 F6 | 	mov	arg01, local05
038d0     C8 B2 B1 FD | 	call	#__system___string_cmp
038d4     00 FA 0D F2 | 	cmp	result1, #0 wz
038d8     94 00 90 AD |  if_e	jmp	#LR__0209
038dc     9C 00 90 FD | 	jmp	#LR__0210
038e0                 | LR__0197
038e0     01 00 00 FF 
038e4     00 29 06 F6 | 	mov	local06, ##768
038e8     98 00 90 FD | 	jmp	#LR__0211
038ec                 | LR__0198
038ec     01 00 00 FF 
038f0     01 29 06 F6 | 	mov	local06, ##769
038f4     8C 00 90 FD | 	jmp	#LR__0211
038f8                 | LR__0199
038f8     01 00 00 FF 
038fc     02 29 06 F6 | 	mov	local06, ##770
03900     80 00 90 FD | 	jmp	#LR__0211
03904                 | LR__0200
03904     01 00 00 FF 
03908     03 29 06 F6 | 	mov	local06, ##771
0390c     74 00 90 FD | 	jmp	#LR__0211
03910                 | LR__0201
03910     01 00 00 FF 
03914     04 29 06 F6 | 	mov	local06, ##772
03918     68 00 90 FD | 	jmp	#LR__0211
0391c                 | LR__0202
0391c     01 00 00 FF 
03920     05 29 06 F6 | 	mov	local06, ##773
03924     5C 00 90 FD | 	jmp	#LR__0211
03928                 | LR__0203
03928     01 00 00 FF 
0392c     06 29 06 F6 | 	mov	local06, ##774
03930     50 00 90 FD | 	jmp	#LR__0211
03934                 | LR__0204
03934     01 00 00 FF 
03938     07 29 06 F6 | 	mov	local06, ##775
0393c     44 00 90 FD | 	jmp	#LR__0211
03940                 | LR__0205
03940     01 00 00 FF 
03944     08 29 06 F6 | 	mov	local06, ##776
03948     38 00 90 FD | 	jmp	#LR__0211
0394c                 | LR__0206
0394c     01 00 00 FF 
03950     09 29 06 F6 | 	mov	local06, ##777
03954     2C 00 90 FD | 	jmp	#LR__0211
03958                 | LR__0207
03958     01 00 00 FF 
0395c     0A 29 06 F6 | 	mov	local06, ##778
03960     20 00 90 FD | 	jmp	#LR__0211
03964                 | LR__0208
03964     01 00 00 FF 
03968     0B 29 06 F6 | 	mov	local06, ##779
0396c     14 00 90 FD | 	jmp	#LR__0211
03970                 | LR__0209
03970     01 00 00 FF 
03974     0B 29 06 F6 | 	mov	local06, ##779
03978     08 00 90 FD | 	jmp	#LR__0211
0397c                 | LR__0210
0397c     00 FA 05 F6 | 	mov	result1, #0
03980     28 00 90 FD | 	jmp	#LR__0213
03984                 | LR__0211
03984                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
03984     FF FF 7F FF 
03988     FF 25 56 F2 | 	cmps	local04, ##-1 wc
0398c     18 00 90 CD |  if_b	jmp	#LR__0212
03990     0A 24 56 F2 | 	cmps	local04, #10 wc
03994     12 2B 02 C6 |  if_b	mov	local07, local04
03998     01 2A 66 C0 |  if_b	shl	local07, #1
0399c     12 2B 02 C1 |  if_b	add	local07, local04
039a0     02 2A 66 C0 |  if_b	shl	local07, #2
039a4     15 29 02 C1 |  if_b	add	local06, local07
039a8                 | LR__0212
039a8                 | ' return token
039a8     14 FB 01 F6 | 	mov	result1, local06
039ac                 | LR__0213
039ac     A7 F0 03 F6 | 	mov	ptra, fp
039b0     B2 00 A0 FD | 	call	#popregs_
039b4                 | _isnotename_ret
039b4     2D 00 64 FD | 	ret
039b8                 | 
039b8                 | ' 
039b8                 | ' 
039b8                 | ' function isseparator(s as string) as ubyte
039b8                 | _isseparator
039b8     01 4A 05 F6 | 	mov	COUNT_, #1
039bc     A8 00 A0 FD | 	call	#pushregs_
039c0                 | ' 
039c0                 | ' select case s
039c0     09 1F 02 F6 | 	mov	local01, arg01
039c4     71 01 00 FF 
039c8     0E 15 06 F6 | 	mov	arg02, ##@LR__4887
039cc     0F 13 02 F6 | 	mov	arg01, local01
039d0     C8 B1 B1 FD | 	call	#__system___string_cmp
039d4     00 FA 0D F2 | 	cmp	result1, #0 wz
039d8     54 01 90 AD |  if_e	jmp	#LR__0220
039dc     71 01 00 FF 
039e0     10 15 06 F6 | 	mov	arg02, ##@LR__4888
039e4     0F 13 02 F6 | 	mov	arg01, local01
039e8     B0 B1 B1 FD | 	call	#__system___string_cmp
039ec     00 FA 0D F2 | 	cmp	result1, #0 wz
039f0     44 01 90 AD |  if_e	jmp	#LR__0221
039f4     71 01 00 FF 
039f8     12 15 06 F6 | 	mov	arg02, ##@LR__4889
039fc     0F 13 02 F6 | 	mov	arg01, local01
03a00     98 B1 B1 FD | 	call	#__system___string_cmp
03a04     00 FA 0D F2 | 	cmp	result1, #0 wz
03a08     34 01 90 AD |  if_e	jmp	#LR__0222
03a0c     71 01 00 FF 
03a10     14 15 06 F6 | 	mov	arg02, ##@LR__4890
03a14     0F 13 02 F6 | 	mov	arg01, local01
03a18     80 B1 B1 FD | 	call	#__system___string_cmp
03a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a20     24 01 90 AD |  if_e	jmp	#LR__0223
03a24     71 01 00 FF 
03a28     16 15 06 F6 | 	mov	arg02, ##@LR__4891
03a2c     0F 13 02 F6 | 	mov	arg01, local01
03a30     68 B1 B1 FD | 	call	#__system___string_cmp
03a34     00 FA 0D F2 | 	cmp	result1, #0 wz
03a38     14 01 90 AD |  if_e	jmp	#LR__0224
03a3c     71 01 00 FF 
03a40     18 15 06 F6 | 	mov	arg02, ##@LR__4892
03a44     0F 13 02 F6 | 	mov	arg01, local01
03a48     50 B1 B1 FD | 	call	#__system___string_cmp
03a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a50     04 01 90 AD |  if_e	jmp	#LR__0225
03a54     71 01 00 FF 
03a58     1A 15 06 F6 | 	mov	arg02, ##@LR__4893
03a5c     0F 13 02 F6 | 	mov	arg01, local01
03a60     38 B1 B1 FD | 	call	#__system___string_cmp
03a64     00 FA 0D F2 | 	cmp	result1, #0 wz
03a68     F4 00 90 AD |  if_e	jmp	#LR__0226
03a6c     71 01 00 FF 
03a70     1C 15 06 F6 | 	mov	arg02, ##@LR__4894
03a74     0F 13 02 F6 | 	mov	arg01, local01
03a78     20 B1 B1 FD | 	call	#__system___string_cmp
03a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a80     E4 00 90 AD |  if_e	jmp	#LR__0227
03a84     71 01 00 FF 
03a88     1E 15 06 F6 | 	mov	arg02, ##@LR__4895
03a8c     0F 13 02 F6 | 	mov	arg01, local01
03a90     08 B1 B1 FD | 	call	#__system___string_cmp
03a94     00 FA 0D F2 | 	cmp	result1, #0 wz
03a98     D4 00 90 AD |  if_e	jmp	#LR__0228
03a9c     71 01 00 FF 
03aa0     20 15 06 F6 | 	mov	arg02, ##@LR__4896
03aa4     0F 13 02 F6 | 	mov	arg01, local01
03aa8     F0 B0 B1 FD | 	call	#__system___string_cmp
03aac     00 FA 0D F2 | 	cmp	result1, #0 wz
03ab0     C4 00 90 AD |  if_e	jmp	#LR__0229
03ab4     71 01 00 FF 
03ab8     22 15 06 F6 | 	mov	arg02, ##@LR__4897
03abc     0F 13 02 F6 | 	mov	arg01, local01
03ac0     D8 B0 B1 FD | 	call	#__system___string_cmp
03ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ac8     B4 00 90 AD |  if_e	jmp	#LR__0230
03acc     71 01 00 FF 
03ad0     24 15 06 F6 | 	mov	arg02, ##@LR__4898
03ad4     0F 13 02 F6 | 	mov	arg01, local01
03ad8     C0 B0 B1 FD | 	call	#__system___string_cmp
03adc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae0     A4 00 90 AD |  if_e	jmp	#LR__0231
03ae4     71 01 00 FF 
03ae8     26 15 06 F6 | 	mov	arg02, ##@LR__4899
03aec     0F 13 02 F6 | 	mov	arg01, local01
03af0     A8 B0 B1 FD | 	call	#__system___string_cmp
03af4     00 FA 0D F2 | 	cmp	result1, #0 wz
03af8     94 00 90 AD |  if_e	jmp	#LR__0232
03afc     71 01 00 FF 
03b00     28 15 06 F6 | 	mov	arg02, ##@LR__4900
03b04     0F 13 02 F6 | 	mov	arg01, local01
03b08     90 B0 B1 FD | 	call	#__system___string_cmp
03b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b10     84 00 90 AD |  if_e	jmp	#LR__0233
03b14     71 01 00 FF 
03b18     2A 15 06 F6 | 	mov	arg02, ##@LR__4901
03b1c     0F 13 02 F6 | 	mov	arg01, local01
03b20     78 B0 B1 FD | 	call	#__system___string_cmp
03b24     00 FA 0D F2 | 	cmp	result1, #0 wz
03b28     74 00 90 AD |  if_e	jmp	#LR__0234
03b2c     78 00 90 FD | 	jmp	#LR__0235
03b30                 | LR__0220
03b30     01 FA 05 F6 | 	mov	result1, #1
03b34     74 00 90 FD | 	jmp	#LR__0236
03b38                 | LR__0221
03b38     02 FA 05 F6 | 	mov	result1, #2
03b3c     6C 00 90 FD | 	jmp	#LR__0236
03b40                 | LR__0222
03b40     1B FA 05 F6 | 	mov	result1, #27
03b44     64 00 90 FD | 	jmp	#LR__0236
03b48                 | LR__0223
03b48     11 FA 05 F6 | 	mov	result1, #17
03b4c     5C 00 90 FD | 	jmp	#LR__0236
03b50                 | LR__0224
03b50     05 FA 05 F6 | 	mov	result1, #5
03b54     54 00 90 FD | 	jmp	#LR__0236
03b58                 | LR__0225
03b58     06 FA 05 F6 | 	mov	result1, #6
03b5c     4C 00 90 FD | 	jmp	#LR__0236
03b60                 | LR__0226
03b60     12 FA 05 F6 | 	mov	result1, #18
03b64     44 00 90 FD | 	jmp	#LR__0236
03b68                 | LR__0227
03b68     13 FA 05 F6 | 	mov	result1, #19
03b6c     3C 00 90 FD | 	jmp	#LR__0236
03b70                 | LR__0228
03b70     0C FA 05 F6 | 	mov	result1, #12
03b74     34 00 90 FD | 	jmp	#LR__0236
03b78                 | LR__0229
03b78     14 FA 05 F6 | 	mov	result1, #20
03b7c     2C 00 90 FD | 	jmp	#LR__0236
03b80                 | LR__0230
03b80     15 FA 05 F6 | 	mov	result1, #21
03b84     24 00 90 FD | 	jmp	#LR__0236
03b88                 | LR__0231
03b88     16 FA 05 F6 | 	mov	result1, #22
03b8c     1C 00 90 FD | 	jmp	#LR__0236
03b90                 | LR__0232
03b90     FF FB 05 F6 | 	mov	result1, #511
03b94     14 00 90 FD | 	jmp	#LR__0236
03b98                 | LR__0233
03b98     0F FA 05 F6 | 	mov	result1, #15
03b9c     0C 00 90 FD | 	jmp	#LR__0236
03ba0                 | LR__0234
03ba0     10 FA 05 F6 | 	mov	result1, #16
03ba4     04 00 90 FD | 	jmp	#LR__0236
03ba8                 | LR__0235
03ba8     00 FA 05 F6 | 	mov	result1, #0
03bac                 | LR__0236
03bac     A7 F0 03 F6 | 	mov	ptra, fp
03bb0     B2 00 A0 FD | 	call	#popregs_
03bb4                 | _isseparator_ret
03bb4     2D 00 64 FD | 	ret
03bb8                 | 
03bb8                 | ' 
03bb8                 | ' 
03bb8                 | ' function iscommand(s as string) as ubyte
03bb8                 | _iscommand
03bb8     01 4A 05 F6 | 	mov	COUNT_, #1
03bbc     A8 00 A0 FD | 	call	#pushregs_
03bc0                 | ' 
03bc0                 | ' select case s
03bc0     09 1F 02 F6 | 	mov	local01, arg01
03bc4     71 01 00 FF 
03bc8     2E 15 06 F6 | 	mov	arg02, ##@LR__4903
03bcc     0F 13 02 F6 | 	mov	arg01, local01
03bd0     C8 AF B1 FD | 	call	#__system___string_cmp
03bd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bd8     EC 08 90 AD |  if_e	jmp	#LR__0240
03bdc     71 01 00 FF 
03be0     33 15 06 F6 | 	mov	arg02, ##@LR__4904
03be4     0F 13 02 F6 | 	mov	arg01, local01
03be8     B0 AF B1 FD | 	call	#__system___string_cmp
03bec     00 FA 0D F2 | 	cmp	result1, #0 wz
03bf0     DC 08 90 AD |  if_e	jmp	#LR__0241
03bf4     71 01 00 FF 
03bf8     36 15 06 F6 | 	mov	arg02, ##@LR__4905
03bfc     0F 13 02 F6 | 	mov	arg01, local01
03c00     98 AF B1 FD | 	call	#__system___string_cmp
03c04     00 FA 0D F2 | 	cmp	result1, #0 wz
03c08     CC 08 90 AD |  if_e	jmp	#LR__0242
03c0c     71 01 00 FF 
03c10     3A 15 06 F6 | 	mov	arg02, ##@LR__4906
03c14     0F 13 02 F6 | 	mov	arg01, local01
03c18     80 AF B1 FD | 	call	#__system___string_cmp
03c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c20     BC 08 90 AD |  if_e	jmp	#LR__0243
03c24     71 01 00 FF 
03c28     3F 15 06 F6 | 	mov	arg02, ##@LR__4907
03c2c     0F 13 02 F6 | 	mov	arg01, local01
03c30     68 AF B1 FD | 	call	#__system___string_cmp
03c34     00 FA 0D F2 | 	cmp	result1, #0 wz
03c38     AC 08 90 AD |  if_e	jmp	#LR__0244
03c3c     71 01 00 FF 
03c40     43 15 06 F6 | 	mov	arg02, ##@LR__4908
03c44     0F 13 02 F6 | 	mov	arg01, local01
03c48     50 AF B1 FD | 	call	#__system___string_cmp
03c4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c50     9C 08 90 AD |  if_e	jmp	#LR__0245
03c54     71 01 00 FF 
03c58     4A 15 06 F6 | 	mov	arg02, ##@LR__4909
03c5c     0F 13 02 F6 | 	mov	arg01, local01
03c60     38 AF B1 FD | 	call	#__system___string_cmp
03c64     00 FA 0D F2 | 	cmp	result1, #0 wz
03c68     8C 08 90 AD |  if_e	jmp	#LR__0246
03c6c     71 01 00 FF 
03c70     4E 15 06 F6 | 	mov	arg02, ##@LR__4910
03c74     0F 13 02 F6 | 	mov	arg01, local01
03c78     20 AF B1 FD | 	call	#__system___string_cmp
03c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c80     7C 08 90 AD |  if_e	jmp	#LR__0247
03c84     71 01 00 FF 
03c88     54 15 06 F6 | 	mov	arg02, ##@LR__4911
03c8c     0F 13 02 F6 | 	mov	arg01, local01
03c90     08 AF B1 FD | 	call	#__system___string_cmp
03c94     00 FA 0D F2 | 	cmp	result1, #0 wz
03c98     6C 08 90 AD |  if_e	jmp	#LR__0248
03c9c     71 01 00 FF 
03ca0     58 15 06 F6 | 	mov	arg02, ##@LR__4912
03ca4     0F 13 02 F6 | 	mov	arg01, local01
03ca8     F0 AE B1 FD | 	call	#__system___string_cmp
03cac     00 FA 0D F2 | 	cmp	result1, #0 wz
03cb0     5C 08 90 AD |  if_e	jmp	#LR__0249
03cb4     71 01 00 FF 
03cb8     5E 15 06 F6 | 	mov	arg02, ##@LR__4913
03cbc     0F 13 02 F6 | 	mov	arg01, local01
03cc0     D8 AE B1 FD | 	call	#__system___string_cmp
03cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc8     4C 08 90 AD |  if_e	jmp	#LR__0250
03ccc     71 01 00 FF 
03cd0     61 15 06 F6 | 	mov	arg02, ##@LR__4914
03cd4     0F 13 02 F6 | 	mov	arg01, local01
03cd8     C0 AE B1 FD | 	call	#__system___string_cmp
03cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ce0     3C 08 90 AD |  if_e	jmp	#LR__0251
03ce4     71 01 00 FF 
03ce8     67 15 06 F6 | 	mov	arg02, ##@LR__4915
03cec     0F 13 02 F6 | 	mov	arg01, local01
03cf0     A8 AE B1 FD | 	call	#__system___string_cmp
03cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cf8     2C 08 90 AD |  if_e	jmp	#LR__0252
03cfc     71 01 00 FF 
03d00     6B 15 06 F6 | 	mov	arg02, ##@LR__4916
03d04     0F 13 02 F6 | 	mov	arg01, local01
03d08     90 AE B1 FD | 	call	#__system___string_cmp
03d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d10     1C 08 90 AD |  if_e	jmp	#LR__0253
03d14     71 01 00 FF 
03d18     72 15 06 F6 | 	mov	arg02, ##@LR__4917
03d1c     0F 13 02 F6 | 	mov	arg01, local01
03d20     78 AE B1 FD | 	call	#__system___string_cmp
03d24     00 FA 0D F2 | 	cmp	result1, #0 wz
03d28     0C 08 90 AD |  if_e	jmp	#LR__0254
03d2c     71 01 00 FF 
03d30     79 15 06 F6 | 	mov	arg02, ##@LR__4918
03d34     0F 13 02 F6 | 	mov	arg01, local01
03d38     60 AE B1 FD | 	call	#__system___string_cmp
03d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d40     FC 07 90 AD |  if_e	jmp	#LR__0255
03d44     71 01 00 FF 
03d48     80 15 06 F6 | 	mov	arg02, ##@LR__4919
03d4c     0F 13 02 F6 | 	mov	arg01, local01
03d50     48 AE B1 FD | 	call	#__system___string_cmp
03d54     00 FA 0D F2 | 	cmp	result1, #0 wz
03d58     EC 07 90 AD |  if_e	jmp	#LR__0256
03d5c     71 01 00 FF 
03d60     8A 15 06 F6 | 	mov	arg02, ##@LR__4920
03d64     0F 13 02 F6 | 	mov	arg01, local01
03d68     30 AE B1 FD | 	call	#__system___string_cmp
03d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d70     DC 07 90 AD |  if_e	jmp	#LR__0257
03d74     71 01 00 FF 
03d78     8E 15 06 F6 | 	mov	arg02, ##@LR__4921
03d7c     0F 13 02 F6 | 	mov	arg01, local01
03d80     18 AE B1 FD | 	call	#__system___string_cmp
03d84     00 FA 0D F2 | 	cmp	result1, #0 wz
03d88     CC 07 90 AD |  if_e	jmp	#LR__0258
03d8c     71 01 00 FF 
03d90     92 15 06 F6 | 	mov	arg02, ##@LR__4922
03d94     0F 13 02 F6 | 	mov	arg01, local01
03d98     00 AE B1 FD | 	call	#__system___string_cmp
03d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03da0     BC 07 90 AD |  if_e	jmp	#LR__0259
03da4     71 01 00 FF 
03da8     96 15 06 F6 | 	mov	arg02, ##@LR__4923
03dac     0F 13 02 F6 | 	mov	arg01, local01
03db0     E8 AD B1 FD | 	call	#__system___string_cmp
03db4     00 FA 0D F2 | 	cmp	result1, #0 wz
03db8     AC 07 90 AD |  if_e	jmp	#LR__0260
03dbc     71 01 00 FF 
03dc0     9A 15 06 F6 | 	mov	arg02, ##@LR__4924
03dc4     0F 13 02 F6 | 	mov	arg01, local01
03dc8     D0 AD B1 FD | 	call	#__system___string_cmp
03dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd0     9C 07 90 AD |  if_e	jmp	#LR__0261
03dd4     71 01 00 FF 
03dd8     A0 15 06 F6 | 	mov	arg02, ##@LR__4925
03ddc     0F 13 02 F6 | 	mov	arg01, local01
03de0     B8 AD B1 FD | 	call	#__system___string_cmp
03de4     00 FA 0D F2 | 	cmp	result1, #0 wz
03de8     8C 07 90 AD |  if_e	jmp	#LR__0262
03dec     71 01 00 FF 
03df0     A5 15 06 F6 | 	mov	arg02, ##@LR__4926
03df4     0F 13 02 F6 | 	mov	arg01, local01
03df8     A0 AD B1 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     7C 07 90 AD |  if_e	jmp	#LR__0263
03e04     71 01 00 FF 
03e08     A9 15 06 F6 | 	mov	arg02, ##@LR__4927
03e0c     0F 13 02 F6 | 	mov	arg01, local01
03e10     88 AD B1 FD | 	call	#__system___string_cmp
03e14     00 FA 0D F2 | 	cmp	result1, #0 wz
03e18     6C 07 90 AD |  if_e	jmp	#LR__0264
03e1c     71 01 00 FF 
03e20     AE 15 06 F6 | 	mov	arg02, ##@LR__4928
03e24     0F 13 02 F6 | 	mov	arg01, local01
03e28     70 AD B1 FD | 	call	#__system___string_cmp
03e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e30     5C 07 90 AD |  if_e	jmp	#LR__0265
03e34     71 01 00 FF 
03e38     B2 15 06 F6 | 	mov	arg02, ##@LR__4929
03e3c     0F 13 02 F6 | 	mov	arg01, local01
03e40     58 AD B1 FD | 	call	#__system___string_cmp
03e44     00 FA 0D F2 | 	cmp	result1, #0 wz
03e48     4C 07 90 AD |  if_e	jmp	#LR__0266
03e4c     71 01 00 FF 
03e50     BA 15 06 F6 | 	mov	arg02, ##@LR__4930
03e54     0F 13 02 F6 | 	mov	arg01, local01
03e58     40 AD B1 FD | 	call	#__system___string_cmp
03e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e60     3C 07 90 AD |  if_e	jmp	#LR__0267
03e64     71 01 00 FF 
03e68     BE 15 06 F6 | 	mov	arg02, ##@LR__4931
03e6c     0F 13 02 F6 | 	mov	arg01, local01
03e70     28 AD B1 FD | 	call	#__system___string_cmp
03e74     00 FA 0D F2 | 	cmp	result1, #0 wz
03e78     2C 07 90 AD |  if_e	jmp	#LR__0268
03e7c     71 01 00 FF 
03e80     C3 15 06 F6 | 	mov	arg02, ##@LR__4932
03e84     0F 13 02 F6 | 	mov	arg01, local01
03e88     10 AD B1 FD | 	call	#__system___string_cmp
03e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e90     1C 07 90 AD |  if_e	jmp	#LR__0269
03e94     71 01 00 FF 
03e98     C7 15 06 F6 | 	mov	arg02, ##@LR__4933
03e9c     0F 13 02 F6 | 	mov	arg01, local01
03ea0     F8 AC B1 FD | 	call	#__system___string_cmp
03ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ea8     0C 07 90 AD |  if_e	jmp	#LR__0270
03eac     71 01 00 FF 
03eb0     CC 15 06 F6 | 	mov	arg02, ##@LR__4934
03eb4     0F 13 02 F6 | 	mov	arg01, local01
03eb8     E0 AC B1 FD | 	call	#__system___string_cmp
03ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ec0     FC 06 90 AD |  if_e	jmp	#LR__0271
03ec4     71 01 00 FF 
03ec8     D0 15 06 F6 | 	mov	arg02, ##@LR__4935
03ecc     0F 13 02 F6 | 	mov	arg01, local01
03ed0     C8 AC B1 FD | 	call	#__system___string_cmp
03ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ed8     EC 06 90 AD |  if_e	jmp	#LR__0272
03edc     71 01 00 FF 
03ee0     D3 15 06 F6 | 	mov	arg02, ##@LR__4936
03ee4     0F 13 02 F6 | 	mov	arg01, local01
03ee8     B0 AC B1 FD | 	call	#__system___string_cmp
03eec     00 FA 0D F2 | 	cmp	result1, #0 wz
03ef0     DC 06 90 AD |  if_e	jmp	#LR__0273
03ef4     71 01 00 FF 
03ef8     D9 15 06 F6 | 	mov	arg02, ##@LR__4937
03efc     0F 13 02 F6 | 	mov	arg01, local01
03f00     98 AC B1 FD | 	call	#__system___string_cmp
03f04     00 FA 0D F2 | 	cmp	result1, #0 wz
03f08     CC 06 90 AD |  if_e	jmp	#LR__0274
03f0c     71 01 00 FF 
03f10     DD 15 06 F6 | 	mov	arg02, ##@LR__4938
03f14     0F 13 02 F6 | 	mov	arg01, local01
03f18     80 AC B1 FD | 	call	#__system___string_cmp
03f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f20     BC 06 90 AD |  if_e	jmp	#LR__0275
03f24     71 01 00 FF 
03f28     E3 15 06 F6 | 	mov	arg02, ##@LR__4939
03f2c     0F 13 02 F6 | 	mov	arg01, local01
03f30     68 AC B1 FD | 	call	#__system___string_cmp
03f34     00 FA 0D F2 | 	cmp	result1, #0 wz
03f38     AC 06 90 AD |  if_e	jmp	#LR__0276
03f3c     71 01 00 FF 
03f40     E8 15 06 F6 | 	mov	arg02, ##@LR__4940
03f44     0F 13 02 F6 | 	mov	arg01, local01
03f48     50 AC B1 FD | 	call	#__system___string_cmp
03f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f50     9C 06 90 AD |  if_e	jmp	#LR__0277
03f54     71 01 00 FF 
03f58     EB 15 06 F6 | 	mov	arg02, ##@LR__4941
03f5c     0F 13 02 F6 | 	mov	arg01, local01
03f60     38 AC B1 FD | 	call	#__system___string_cmp
03f64     00 FA 0D F2 | 	cmp	result1, #0 wz
03f68     8C 06 90 AD |  if_e	jmp	#LR__0278
03f6c     71 01 00 FF 
03f70     EE 15 06 F6 | 	mov	arg02, ##@LR__4942
03f74     0F 13 02 F6 | 	mov	arg01, local01
03f78     20 AC B1 FD | 	call	#__system___string_cmp
03f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f80     7C 06 90 AD |  if_e	jmp	#LR__0279
03f84     71 01 00 FF 
03f88     F2 15 06 F6 | 	mov	arg02, ##@LR__4943
03f8c     0F 13 02 F6 | 	mov	arg01, local01
03f90     08 AC B1 FD | 	call	#__system___string_cmp
03f94     00 FA 0D F2 | 	cmp	result1, #0 wz
03f98     6C 06 90 AD |  if_e	jmp	#LR__0280
03f9c     71 01 00 FF 
03fa0     F5 15 06 F6 | 	mov	arg02, ##@LR__4944
03fa4     0F 13 02 F6 | 	mov	arg01, local01
03fa8     F0 AB B1 FD | 	call	#__system___string_cmp
03fac     00 FA 0D F2 | 	cmp	result1, #0 wz
03fb0     5C 06 90 AD |  if_e	jmp	#LR__0281
03fb4     71 01 00 FF 
03fb8     F9 15 06 F6 | 	mov	arg02, ##@LR__4945
03fbc     0F 13 02 F6 | 	mov	arg01, local01
03fc0     D8 AB B1 FD | 	call	#__system___string_cmp
03fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03fc8     4C 06 90 AD |  if_e	jmp	#LR__0282
03fcc     71 01 00 FF 
03fd0     FE 15 06 F6 | 	mov	arg02, ##@LR__4946
03fd4     0F 13 02 F6 | 	mov	arg01, local01
03fd8     C0 AB B1 FD | 	call	#__system___string_cmp
03fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03fe0     3C 06 90 AD |  if_e	jmp	#LR__0283
03fe4     72 01 00 FF 
03fe8     01 14 06 F6 | 	mov	arg02, ##@LR__4947
03fec     0F 13 02 F6 | 	mov	arg01, local01
03ff0     A8 AB B1 FD | 	call	#__system___string_cmp
03ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ff8     2C 06 90 AD |  if_e	jmp	#LR__0284
03ffc     72 01 00 FF 
04000     06 14 06 F6 | 	mov	arg02, ##@LR__4948
04004     0F 13 02 F6 | 	mov	arg01, local01
04008     90 AB B1 FD | 	call	#__system___string_cmp
0400c     00 FA 0D F2 | 	cmp	result1, #0 wz
04010     1C 06 90 AD |  if_e	jmp	#LR__0285
04014     72 01 00 FF 
04018     0A 14 06 F6 | 	mov	arg02, ##@LR__4949
0401c     0F 13 02 F6 | 	mov	arg01, local01
04020     78 AB B1 FD | 	call	#__system___string_cmp
04024     00 FA 0D F2 | 	cmp	result1, #0 wz
04028     0C 06 90 AD |  if_e	jmp	#LR__0286
0402c     72 01 00 FF 
04030     10 14 06 F6 | 	mov	arg02, ##@LR__4950
04034     0F 13 02 F6 | 	mov	arg01, local01
04038     60 AB B1 FD | 	call	#__system___string_cmp
0403c     00 FA 0D F2 | 	cmp	result1, #0 wz
04040     FC 05 90 AD |  if_e	jmp	#LR__0287
04044     72 01 00 FF 
04048     15 14 06 F6 | 	mov	arg02, ##@LR__4951
0404c     0F 13 02 F6 | 	mov	arg01, local01
04050     48 AB B1 FD | 	call	#__system___string_cmp
04054     00 FA 0D F2 | 	cmp	result1, #0 wz
04058     EC 05 90 AD |  if_e	jmp	#LR__0288
0405c     72 01 00 FF 
04060     18 14 06 F6 | 	mov	arg02, ##@LR__4952
04064     0F 13 02 F6 | 	mov	arg01, local01
04068     30 AB B1 FD | 	call	#__system___string_cmp
0406c     00 FA 0D F2 | 	cmp	result1, #0 wz
04070     DC 05 90 AD |  if_e	jmp	#LR__0289
04074     72 01 00 FF 
04078     1E 14 06 F6 | 	mov	arg02, ##@LR__4953
0407c     0F 13 02 F6 | 	mov	arg01, local01
04080     18 AB B1 FD | 	call	#__system___string_cmp
04084     00 FA 0D F2 | 	cmp	result1, #0 wz
04088     CC 05 90 AD |  if_e	jmp	#LR__0290
0408c     72 01 00 FF 
04090     22 14 06 F6 | 	mov	arg02, ##@LR__4954
04094     0F 13 02 F6 | 	mov	arg01, local01
04098     00 AB B1 FD | 	call	#__system___string_cmp
0409c     00 FA 0D F2 | 	cmp	result1, #0 wz
040a0     BC 05 90 AD |  if_e	jmp	#LR__0291
040a4     72 01 00 FF 
040a8     27 14 06 F6 | 	mov	arg02, ##@LR__4955
040ac     0F 13 02 F6 | 	mov	arg01, local01
040b0     E8 AA B1 FD | 	call	#__system___string_cmp
040b4     00 FA 0D F2 | 	cmp	result1, #0 wz
040b8     AC 05 90 AD |  if_e	jmp	#LR__0292
040bc     72 01 00 FF 
040c0     2A 14 06 F6 | 	mov	arg02, ##@LR__4956
040c4     0F 13 02 F6 | 	mov	arg01, local01
040c8     D0 AA B1 FD | 	call	#__system___string_cmp
040cc     00 FA 0D F2 | 	cmp	result1, #0 wz
040d0     9C 05 90 AD |  if_e	jmp	#LR__0293
040d4     72 01 00 FF 
040d8     30 14 06 F6 | 	mov	arg02, ##@LR__4957
040dc     0F 13 02 F6 | 	mov	arg01, local01
040e0     B8 AA B1 FD | 	call	#__system___string_cmp
040e4     00 FA 0D F2 | 	cmp	result1, #0 wz
040e8     8C 05 90 AD |  if_e	jmp	#LR__0294
040ec     72 01 00 FF 
040f0     34 14 06 F6 | 	mov	arg02, ##@LR__4958
040f4     0F 13 02 F6 | 	mov	arg01, local01
040f8     A0 AA B1 FD | 	call	#__system___string_cmp
040fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04100     7C 05 90 AD |  if_e	jmp	#LR__0295
04104     72 01 00 FF 
04108     3D 14 06 F6 | 	mov	arg02, ##@LR__4959
0410c     0F 13 02 F6 | 	mov	arg01, local01
04110     88 AA B1 FD | 	call	#__system___string_cmp
04114     00 FA 0D F2 | 	cmp	result1, #0 wz
04118     6C 05 90 AD |  if_e	jmp	#LR__0296
0411c     72 01 00 FF 
04120     43 14 06 F6 | 	mov	arg02, ##@LR__4960
04124     0F 13 02 F6 | 	mov	arg01, local01
04128     70 AA B1 FD | 	call	#__system___string_cmp
0412c     00 FA 0D F2 | 	cmp	result1, #0 wz
04130     5C 05 90 AD |  if_e	jmp	#LR__0297
04134     72 01 00 FF 
04138     49 14 06 F6 | 	mov	arg02, ##@LR__4961
0413c     0F 13 02 F6 | 	mov	arg01, local01
04140     58 AA B1 FD | 	call	#__system___string_cmp
04144     00 FA 0D F2 | 	cmp	result1, #0 wz
04148     4C 05 90 AD |  if_e	jmp	#LR__0298
0414c     72 01 00 FF 
04150     52 14 06 F6 | 	mov	arg02, ##@LR__4962
04154     0F 13 02 F6 | 	mov	arg01, local01
04158     40 AA B1 FD | 	call	#__system___string_cmp
0415c     00 FA 0D F2 | 	cmp	result1, #0 wz
04160     3C 05 90 AD |  if_e	jmp	#LR__0299
04164     72 01 00 FF 
04168     5C 14 06 F6 | 	mov	arg02, ##@LR__4963
0416c     0F 13 02 F6 | 	mov	arg01, local01
04170     28 AA B1 FD | 	call	#__system___string_cmp
04174     00 FA 0D F2 | 	cmp	result1, #0 wz
04178     2C 05 90 AD |  if_e	jmp	#LR__0300
0417c     72 01 00 FF 
04180     65 14 06 F6 | 	mov	arg02, ##@LR__4964
04184     0F 13 02 F6 | 	mov	arg01, local01
04188     10 AA B1 FD | 	call	#__system___string_cmp
0418c     00 FA 0D F2 | 	cmp	result1, #0 wz
04190     1C 05 90 AD |  if_e	jmp	#LR__0301
04194     72 01 00 FF 
04198     6A 14 06 F6 | 	mov	arg02, ##@LR__4965
0419c     0F 13 02 F6 | 	mov	arg01, local01
041a0     F8 A9 B1 FD | 	call	#__system___string_cmp
041a4     00 FA 0D F2 | 	cmp	result1, #0 wz
041a8     0C 05 90 AD |  if_e	jmp	#LR__0302
041ac     72 01 00 FF 
041b0     6D 14 06 F6 | 	mov	arg02, ##@LR__4966
041b4     0F 13 02 F6 | 	mov	arg01, local01
041b8     E0 A9 B1 FD | 	call	#__system___string_cmp
041bc     00 FA 0D F2 | 	cmp	result1, #0 wz
041c0     FC 04 90 AD |  if_e	jmp	#LR__0303
041c4     72 01 00 FF 
041c8     72 14 06 F6 | 	mov	arg02, ##@LR__4967
041cc     0F 13 02 F6 | 	mov	arg01, local01
041d0     C8 A9 B1 FD | 	call	#__system___string_cmp
041d4     00 FA 0D F2 | 	cmp	result1, #0 wz
041d8     EC 04 90 AD |  if_e	jmp	#LR__0304
041dc     72 01 00 FF 
041e0     76 14 06 F6 | 	mov	arg02, ##@LR__4968
041e4     0F 13 02 F6 | 	mov	arg01, local01
041e8     B0 A9 B1 FD | 	call	#__system___string_cmp
041ec     00 FA 0D F2 | 	cmp	result1, #0 wz
041f0     DC 04 90 AD |  if_e	jmp	#LR__0305
041f4     72 01 00 FF 
041f8     7B 14 06 F6 | 	mov	arg02, ##@LR__4969
041fc     0F 13 02 F6 | 	mov	arg01, local01
04200     98 A9 B1 FD | 	call	#__system___string_cmp
04204     00 FA 0D F2 | 	cmp	result1, #0 wz
04208     CC 04 90 AD |  if_e	jmp	#LR__0306
0420c     72 01 00 FF 
04210     7F 14 06 F6 | 	mov	arg02, ##@LR__4970
04214     0F 13 02 F6 | 	mov	arg01, local01
04218     80 A9 B1 FD | 	call	#__system___string_cmp
0421c     00 FA 0D F2 | 	cmp	result1, #0 wz
04220     BC 04 90 AD |  if_e	jmp	#LR__0307
04224     72 01 00 FF 
04228     88 14 06 F6 | 	mov	arg02, ##@LR__4971
0422c     0F 13 02 F6 | 	mov	arg01, local01
04230     68 A9 B1 FD | 	call	#__system___string_cmp
04234     00 FA 0D F2 | 	cmp	result1, #0 wz
04238     AC 04 90 AD |  if_e	jmp	#LR__0308
0423c     72 01 00 FF 
04240     8D 14 06 F6 | 	mov	arg02, ##@LR__4972
04244     0F 13 02 F6 | 	mov	arg01, local01
04248     50 A9 B1 FD | 	call	#__system___string_cmp
0424c     00 FA 0D F2 | 	cmp	result1, #0 wz
04250     9C 04 90 AD |  if_e	jmp	#LR__0309
04254     72 01 00 FF 
04258     93 14 06 F6 | 	mov	arg02, ##@LR__4973
0425c     0F 13 02 F6 | 	mov	arg01, local01
04260     38 A9 B1 FD | 	call	#__system___string_cmp
04264     00 FA 0D F2 | 	cmp	result1, #0 wz
04268     8C 04 90 AD |  if_e	jmp	#LR__0310
0426c     72 01 00 FF 
04270     95 14 06 F6 | 	mov	arg02, ##@LR__4974
04274     0F 13 02 F6 | 	mov	arg01, local01
04278     20 A9 B1 FD | 	call	#__system___string_cmp
0427c     00 FA 0D F2 | 	cmp	result1, #0 wz
04280     7C 04 90 AD |  if_e	jmp	#LR__0311
04284     72 01 00 FF 
04288     99 14 06 F6 | 	mov	arg02, ##@LR__4975
0428c     0F 13 02 F6 | 	mov	arg01, local01
04290     08 A9 B1 FD | 	call	#__system___string_cmp
04294     00 FA 0D F2 | 	cmp	result1, #0 wz
04298     6C 04 90 AD |  if_e	jmp	#LR__0312
0429c     72 01 00 FF 
042a0     A1 14 06 F6 | 	mov	arg02, ##@LR__4976
042a4     0F 13 02 F6 | 	mov	arg01, local01
042a8     F0 A8 B1 FD | 	call	#__system___string_cmp
042ac     00 FA 0D F2 | 	cmp	result1, #0 wz
042b0     5C 04 90 AD |  if_e	jmp	#LR__0313
042b4     72 01 00 FF 
042b8     A8 14 06 F6 | 	mov	arg02, ##@LR__4977
042bc     0F 13 02 F6 | 	mov	arg01, local01
042c0     D8 A8 B1 FD | 	call	#__system___string_cmp
042c4     00 FA 0D F2 | 	cmp	result1, #0 wz
042c8     4C 04 90 AD |  if_e	jmp	#LR__0314
042cc     72 01 00 FF 
042d0     AC 14 06 F6 | 	mov	arg02, ##@LR__4978
042d4     0F 13 02 F6 | 	mov	arg01, local01
042d8     C0 A8 B1 FD | 	call	#__system___string_cmp
042dc     00 FA 0D F2 | 	cmp	result1, #0 wz
042e0     3C 04 90 AD |  if_e	jmp	#LR__0315
042e4     72 01 00 FF 
042e8     B1 14 06 F6 | 	mov	arg02, ##@LR__4979
042ec     0F 13 02 F6 | 	mov	arg01, local01
042f0     A8 A8 B1 FD | 	call	#__system___string_cmp
042f4     00 FA 0D F2 | 	cmp	result1, #0 wz
042f8     2C 04 90 AD |  if_e	jmp	#LR__0316
042fc     72 01 00 FF 
04300     B4 14 06 F6 | 	mov	arg02, ##@LR__4980
04304     0F 13 02 F6 | 	mov	arg01, local01
04308     90 A8 B1 FD | 	call	#__system___string_cmp
0430c     00 FA 0D F2 | 	cmp	result1, #0 wz
04310     1C 04 90 AD |  if_e	jmp	#LR__0317
04314     72 01 00 FF 
04318     BD 14 06 F6 | 	mov	arg02, ##@LR__4981
0431c     0F 13 02 F6 | 	mov	arg01, local01
04320     78 A8 B1 FD | 	call	#__system___string_cmp
04324     00 FA 0D F2 | 	cmp	result1, #0 wz
04328     0C 04 90 AD |  if_e	jmp	#LR__0318
0432c     72 01 00 FF 
04330     C4 14 06 F6 | 	mov	arg02, ##@LR__4982
04334     0F 13 02 F6 | 	mov	arg01, local01
04338     60 A8 B1 FD | 	call	#__system___string_cmp
0433c     00 FA 0D F2 | 	cmp	result1, #0 wz
04340     FC 03 90 AD |  if_e	jmp	#LR__0319
04344     72 01 00 FF 
04348     CB 14 06 F6 | 	mov	arg02, ##@LR__4983
0434c     0F 13 02 F6 | 	mov	arg01, local01
04350     48 A8 B1 FD | 	call	#__system___string_cmp
04354     00 FA 0D F2 | 	cmp	result1, #0 wz
04358     EC 03 90 AD |  if_e	jmp	#LR__0320
0435c     72 01 00 FF 
04360     D2 14 06 F6 | 	mov	arg02, ##@LR__4984
04364     0F 13 02 F6 | 	mov	arg01, local01
04368     30 A8 B1 FD | 	call	#__system___string_cmp
0436c     00 FA 0D F2 | 	cmp	result1, #0 wz
04370     DC 03 90 AD |  if_e	jmp	#LR__0321
04374     72 01 00 FF 
04378     DD 14 06 F6 | 	mov	arg02, ##@LR__4985
0437c     0F 13 02 F6 | 	mov	arg01, local01
04380     18 A8 B1 FD | 	call	#__system___string_cmp
04384     00 FA 0D F2 | 	cmp	result1, #0 wz
04388     CC 03 90 AD |  if_e	jmp	#LR__0322
0438c     72 01 00 FF 
04390     E4 14 06 F6 | 	mov	arg02, ##@LR__4986
04394     0F 13 02 F6 | 	mov	arg01, local01
04398     00 A8 B1 FD | 	call	#__system___string_cmp
0439c     00 FA 0D F2 | 	cmp	result1, #0 wz
043a0     BC 03 90 AD |  if_e	jmp	#LR__0323
043a4     72 01 00 FF 
043a8     EC 14 06 F6 | 	mov	arg02, ##@LR__4987
043ac     0F 13 02 F6 | 	mov	arg01, local01
043b0     E8 A7 B1 FD | 	call	#__system___string_cmp
043b4     00 FA 0D F2 | 	cmp	result1, #0 wz
043b8     AC 03 90 AD |  if_e	jmp	#LR__0324
043bc     72 01 00 FF 
043c0     F2 14 06 F6 | 	mov	arg02, ##@LR__4988
043c4     0F 13 02 F6 | 	mov	arg01, local01
043c8     D0 A7 B1 FD | 	call	#__system___string_cmp
043cc     00 FA 0D F2 | 	cmp	result1, #0 wz
043d0     9C 03 90 AD |  if_e	jmp	#LR__0325
043d4     72 01 00 FF 
043d8     F6 14 06 F6 | 	mov	arg02, ##@LR__4989
043dc     0F 13 02 F6 | 	mov	arg01, local01
043e0     B8 A7 B1 FD | 	call	#__system___string_cmp
043e4     00 FA 0D F2 | 	cmp	result1, #0 wz
043e8     8C 03 90 AD |  if_e	jmp	#LR__0326
043ec     72 01 00 FF 
043f0     FD 14 06 F6 | 	mov	arg02, ##@LR__4990
043f4     0F 13 02 F6 | 	mov	arg01, local01
043f8     A0 A7 B1 FD | 	call	#__system___string_cmp
043fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04400     7C 03 90 AD |  if_e	jmp	#LR__0327
04404     72 01 00 FF 
04408     01 15 06 F6 | 	mov	arg02, ##@LR__4991
0440c     0F 13 02 F6 | 	mov	arg01, local01
04410     88 A7 B1 FD | 	call	#__system___string_cmp
04414     00 FA 0D F2 | 	cmp	result1, #0 wz
04418     6C 03 90 AD |  if_e	jmp	#LR__0328
0441c     72 01 00 FF 
04420     06 15 06 F6 | 	mov	arg02, ##@LR__4992
04424     0F 13 02 F6 | 	mov	arg01, local01
04428     70 A7 B1 FD | 	call	#__system___string_cmp
0442c     00 FA 0D F2 | 	cmp	result1, #0 wz
04430     5C 03 90 AD |  if_e	jmp	#LR__0329
04434     72 01 00 FF 
04438     0D 15 06 F6 | 	mov	arg02, ##@LR__4993
0443c     0F 13 02 F6 | 	mov	arg01, local01
04440     58 A7 B1 FD | 	call	#__system___string_cmp
04444     00 FA 0D F2 | 	cmp	result1, #0 wz
04448     4C 03 90 AD |  if_e	jmp	#LR__0330
0444c     72 01 00 FF 
04450     17 15 06 F6 | 	mov	arg02, ##@LR__4994
04454     0F 13 02 F6 | 	mov	arg01, local01
04458     40 A7 B1 FD | 	call	#__system___string_cmp
0445c     00 FA 0D F2 | 	cmp	result1, #0 wz
04460     3C 03 90 AD |  if_e	jmp	#LR__0331
04464     72 01 00 FF 
04468     1B 15 06 F6 | 	mov	arg02, ##@LR__4995
0446c     0F 13 02 F6 | 	mov	arg01, local01
04470     28 A7 B1 FD | 	call	#__system___string_cmp
04474     00 FA 0D F2 | 	cmp	result1, #0 wz
04478     2C 03 90 AD |  if_e	jmp	#LR__0332
0447c     72 01 00 FF 
04480     23 15 06 F6 | 	mov	arg02, ##@LR__4996
04484     0F 13 02 F6 | 	mov	arg01, local01
04488     10 A7 B1 FD | 	call	#__system___string_cmp
0448c     00 FA 0D F2 | 	cmp	result1, #0 wz
04490     1C 03 90 AD |  if_e	jmp	#LR__0333
04494     72 01 00 FF 
04498     27 15 06 F6 | 	mov	arg02, ##@LR__4997
0449c     0F 13 02 F6 | 	mov	arg01, local01
044a0     F8 A6 B1 FD | 	call	#__system___string_cmp
044a4     00 FA 0D F2 | 	cmp	result1, #0 wz
044a8     0C 03 90 AD |  if_e	jmp	#LR__0334
044ac     72 01 00 FF 
044b0     2D 15 06 F6 | 	mov	arg02, ##@LR__4998
044b4     0F 13 02 F6 | 	mov	arg01, local01
044b8     E0 A6 B1 FD | 	call	#__system___string_cmp
044bc     00 FA 0D F2 | 	cmp	result1, #0 wz
044c0     FC 02 90 AD |  if_e	jmp	#LR__0335
044c4     00 03 90 FD | 	jmp	#LR__0336
044c8                 | LR__0240
044c8     5C FA 05 F6 | 	mov	result1, #92
044cc     FC 02 90 FD | 	jmp	#LR__0337
044d0                 | LR__0241
044d0     5C FA 05 F6 | 	mov	result1, #92
044d4     F4 02 90 FD | 	jmp	#LR__0337
044d8                 | LR__0242
044d8     47 FA 05 F6 | 	mov	result1, #71
044dc     EC 02 90 FD | 	jmp	#LR__0337
044e0                 | LR__0243
044e0     59 FA 05 F6 | 	mov	result1, #89
044e4     E4 02 90 FD | 	jmp	#LR__0337
044e8                 | LR__0244
044e8     59 FA 05 F6 | 	mov	result1, #89
044ec     DC 02 90 FD | 	jmp	#LR__0337
044f0                 | LR__0245
044f0     45 FA 05 F6 | 	mov	result1, #69
044f4     D4 02 90 FD | 	jmp	#LR__0337
044f8                 | LR__0246
044f8     45 FA 05 F6 | 	mov	result1, #69
044fc     CC 02 90 FD | 	jmp	#LR__0337
04500                 | LR__0247
04500     69 FA 05 F6 | 	mov	result1, #105
04504     C4 02 90 FD | 	jmp	#LR__0337
04508                 | LR__0248
04508     40 FA 05 F6 | 	mov	result1, #64
0450c     BC 02 90 FD | 	jmp	#LR__0337
04510                 | LR__0249
04510     49 FA 05 F6 | 	mov	result1, #73
04514     B4 02 90 FD | 	jmp	#LR__0337
04518                 | LR__0250
04518     49 FA 05 F6 | 	mov	result1, #73
0451c     AC 02 90 FD | 	jmp	#LR__0337
04520                 | LR__0251
04520     50 FA 05 F6 | 	mov	result1, #80
04524     A4 02 90 FD | 	jmp	#LR__0337
04528                 | LR__0252
04528     50 FA 05 F6 | 	mov	result1, #80
0452c     9C 02 90 FD | 	jmp	#LR__0337
04530                 | LR__0253
04530     68 FA 05 F6 | 	mov	result1, #104
04534     94 02 90 FD | 	jmp	#LR__0337
04538                 | LR__0254
04538     73 FA 05 F6 | 	mov	result1, #115
0453c     8C 02 90 FD | 	jmp	#LR__0337
04540                 | LR__0255
04540     74 FA 05 F6 | 	mov	result1, #116
04544     84 02 90 FD | 	jmp	#LR__0337
04548                 | LR__0256
04548     6C FA 05 F6 | 	mov	result1, #108
0454c     7C 02 90 FD | 	jmp	#LR__0337
04550                 | LR__0257
04550     6C FA 05 F6 | 	mov	result1, #108
04554     74 02 90 FD | 	jmp	#LR__0337
04558                 | LR__0258
04558     89 FA 05 F6 | 	mov	result1, #137
0455c     6C 02 90 FD | 	jmp	#LR__0337
04560                 | LR__0259
04560     72 FA 05 F6 | 	mov	result1, #114
04564     64 02 90 FD | 	jmp	#LR__0337
04568                 | LR__0260
04568     5D FA 05 F6 | 	mov	result1, #93
0456c     5C 02 90 FD | 	jmp	#LR__0337
04570                 | LR__0261
04570     96 FA 05 F6 | 	mov	result1, #150
04574     54 02 90 FD | 	jmp	#LR__0337
04578                 | LR__0262
04578     43 FA 05 F6 | 	mov	result1, #67
0457c     4C 02 90 FD | 	jmp	#LR__0337
04580                 | LR__0263
04580     43 FA 05 F6 | 	mov	result1, #67
04584     44 02 90 FD | 	jmp	#LR__0337
04588                 | LR__0264
04588     5A FA 05 F6 | 	mov	result1, #90
0458c     3C 02 90 FD | 	jmp	#LR__0337
04590                 | LR__0265
04590     AB FA 05 F6 | 	mov	result1, #171
04594     34 02 90 FD | 	jmp	#LR__0337
04598                 | LR__0266
04598     46 FA 05 F6 | 	mov	result1, #70
0459c     2C 02 90 FD | 	jmp	#LR__0337
045a0                 | LR__0267
045a0     46 FA 05 F6 | 	mov	result1, #70
045a4     24 02 90 FD | 	jmp	#LR__0337
045a8                 | LR__0268
045a8     71 FA 05 F6 | 	mov	result1, #113
045ac     1C 02 90 FD | 	jmp	#LR__0337
045b0                 | LR__0269
045b0     71 FA 05 F6 | 	mov	result1, #113
045b4     14 02 90 FD | 	jmp	#LR__0337
045b8                 | LR__0270
045b8     60 FA 05 F6 | 	mov	result1, #96
045bc     0C 02 90 FD | 	jmp	#LR__0337
045c0                 | LR__0271
045c0     4A FA 05 F6 | 	mov	result1, #74
045c4     04 02 90 FD | 	jmp	#LR__0337
045c8                 | LR__0272
045c8     4A FA 05 F6 | 	mov	result1, #74
045cc     FC 01 90 FD | 	jmp	#LR__0337
045d0                 | LR__0273
045d0     48 FA 05 F6 | 	mov	result1, #72
045d4     F4 01 90 FD | 	jmp	#LR__0337
045d8                 | LR__0274
045d8     48 FA 05 F6 | 	mov	result1, #72
045dc     EC 01 90 FD | 	jmp	#LR__0337
045e0                 | LR__0275
045e0     A9 FA 05 F6 | 	mov	result1, #169
045e4     E4 01 90 FD | 	jmp	#LR__0337
045e8                 | LR__0276
045e8     4E FA 05 F6 | 	mov	result1, #78
045ec     DC 01 90 FD | 	jmp	#LR__0337
045f0                 | LR__0277
045f0     4E FA 05 F6 | 	mov	result1, #78
045f4     D4 01 90 FD | 	jmp	#LR__0337
045f8                 | LR__0278
045f8     58 FA 05 F6 | 	mov	result1, #88
045fc     CC 01 90 FD | 	jmp	#LR__0337
04600                 | LR__0279
04600     5F FA 05 F6 | 	mov	result1, #95
04604     C4 01 90 FD | 	jmp	#LR__0337
04608                 | LR__0280
04608     5F FA 05 F6 | 	mov	result1, #95
0460c     BC 01 90 FD | 	jmp	#LR__0337
04610                 | LR__0281
04610     8A FA 05 F6 | 	mov	result1, #138
04614     B4 01 90 FD | 	jmp	#LR__0337
04618                 | LR__0282
04618     4C FA 05 F6 | 	mov	result1, #76
0461c     AC 01 90 FD | 	jmp	#LR__0337
04620                 | LR__0283
04620     4C FA 05 F6 | 	mov	result1, #76
04624     A4 01 90 FD | 	jmp	#LR__0337
04628                 | LR__0284
04628     52 FA 05 F6 | 	mov	result1, #82
0462c     9C 01 90 FD | 	jmp	#LR__0337
04630                 | LR__0285
04630     52 FA 05 F6 | 	mov	result1, #82
04634     94 01 90 FD | 	jmp	#LR__0337
04638                 | LR__0286
04638     97 FA 05 F6 | 	mov	result1, #151
0463c     8C 01 90 FD | 	jmp	#LR__0337
04640                 | LR__0287
04640     61 FA 05 F6 | 	mov	result1, #97
04644     84 01 90 FD | 	jmp	#LR__0337
04648                 | LR__0288
04648     61 FA 05 F6 | 	mov	result1, #97
0464c     7C 01 90 FD | 	jmp	#LR__0337
04650                 | LR__0289
04650     63 FA 05 F6 | 	mov	result1, #99
04654     74 01 90 FD | 	jmp	#LR__0337
04658                 | LR__0290
04658     41 FA 05 F6 | 	mov	result1, #65
0465c     6C 01 90 FD | 	jmp	#LR__0337
04660                 | LR__0291
04660     4B FA 05 F6 | 	mov	result1, #75
04664     64 01 90 FD | 	jmp	#LR__0337
04668                 | LR__0292
04668     4B FA 05 F6 | 	mov	result1, #75
0466c     5C 01 90 FD | 	jmp	#LR__0337
04670                 | LR__0293
04670     5E FA 05 F6 | 	mov	result1, #94
04674     54 01 90 FD | 	jmp	#LR__0337
04678                 | LR__0294
04678     5E FA 05 F6 | 	mov	result1, #94
0467c     4C 01 90 FD | 	jmp	#LR__0337
04680                 | LR__0295
04680     7C FA 05 F6 | 	mov	result1, #124
04684     44 01 90 FD | 	jmp	#LR__0337
04688                 | LR__0296
04688     7E FA 05 F6 | 	mov	result1, #126
0468c     3C 01 90 FD | 	jmp	#LR__0337
04690                 | LR__0297
04690     7D FA 05 F6 | 	mov	result1, #125
04694     34 01 90 FD | 	jmp	#LR__0337
04698                 | LR__0298
04698     7F FA 05 F6 | 	mov	result1, #127
0469c     2C 01 90 FD | 	jmp	#LR__0337
046a0                 | LR__0299
046a0     80 FA 05 F6 | 	mov	result1, #128
046a4     24 01 90 FD | 	jmp	#LR__0337
046a8                 | LR__0300
046a8     55 FA 05 F6 | 	mov	result1, #85
046ac     1C 01 90 FD | 	jmp	#LR__0337
046b0                 | LR__0301
046b0     75 FA 05 F6 | 	mov	result1, #117
046b4     14 01 90 FD | 	jmp	#LR__0337
046b8                 | LR__0302
046b8     75 FA 05 F6 | 	mov	result1, #117
046bc     0C 01 90 FD | 	jmp	#LR__0337
046c0                 | LR__0303
046c0     42 FA 05 F6 | 	mov	result1, #66
046c4     04 01 90 FD | 	jmp	#LR__0337
046c8                 | LR__0304
046c8     42 FA 05 F6 | 	mov	result1, #66
046cc     FC 00 90 FD | 	jmp	#LR__0337
046d0                 | LR__0305
046d0     95 FA 05 F6 | 	mov	result1, #149
046d4     F4 00 90 FD | 	jmp	#LR__0337
046d8                 | LR__0306
046d8     AC FA 05 F6 | 	mov	result1, #172
046dc     EC 00 90 FD | 	jmp	#LR__0337
046e0                 | LR__0307
046e0     81 FA 05 F6 | 	mov	result1, #129
046e4     E4 00 90 FD | 	jmp	#LR__0337
046e8                 | LR__0308
046e8     81 FA 05 F6 | 	mov	result1, #129
046ec     DC 00 90 FD | 	jmp	#LR__0337
046f0                 | LR__0309
046f0     44 FA 05 F6 | 	mov	result1, #68
046f4     D4 00 90 FD | 	jmp	#LR__0337
046f8                 | LR__0310
046f8     44 FA 05 F6 | 	mov	result1, #68
046fc     CC 00 90 FD | 	jmp	#LR__0337
04700                 | LR__0311
04700     88 FA 05 F6 | 	mov	result1, #136
04704     C4 00 90 FD | 	jmp	#LR__0337
04708                 | LR__0312
04708     92 FA 05 F6 | 	mov	result1, #146
0470c     BC 00 90 FD | 	jmp	#LR__0337
04710                 | LR__0313
04710     AA FA 05 F6 | 	mov	result1, #170
04714     B4 00 90 FD | 	jmp	#LR__0337
04718                 | LR__0314
04718     4D FA 05 F6 | 	mov	result1, #77
0471c     AC 00 90 FD | 	jmp	#LR__0337
04720                 | LR__0315
04720     51 FA 05 F6 | 	mov	result1, #81
04724     A4 00 90 FD | 	jmp	#LR__0337
04728                 | LR__0316
04728     51 FA 05 F6 | 	mov	result1, #81
0472c     9C 00 90 FD | 	jmp	#LR__0337
04730                 | LR__0317
04730     8E FA 05 F6 | 	mov	result1, #142
04734     94 00 90 FD | 	jmp	#LR__0337
04738                 | LR__0318
04738     90 FA 05 F6 | 	mov	result1, #144
0473c     8C 00 90 FD | 	jmp	#LR__0337
04740                 | LR__0319
04740     8D FA 05 F6 | 	mov	result1, #141
04744     84 00 90 FD | 	jmp	#LR__0337
04748                 | LR__0320
04748     8C FA 05 F6 | 	mov	result1, #140
0474c     7C 00 90 FD | 	jmp	#LR__0337
04750                 | LR__0321
04750     91 FA 05 F6 | 	mov	result1, #145
04754     74 00 90 FD | 	jmp	#LR__0337
04758                 | LR__0322
04758     8B FA 05 F6 | 	mov	result1, #139
0475c     6C 00 90 FD | 	jmp	#LR__0337
04760                 | LR__0323
04760     8F FA 05 F6 | 	mov	result1, #143
04764     64 00 90 FD | 	jmp	#LR__0337
04768                 | LR__0324
04768     75 FA 05 F6 | 	mov	result1, #117
0476c     5C 00 90 FD | 	jmp	#LR__0337
04770                 | LR__0325
04770     75 FA 05 F6 | 	mov	result1, #117
04774     54 00 90 FD | 	jmp	#LR__0337
04778                 | LR__0326
04778     6D FA 05 F6 | 	mov	result1, #109
0477c     4C 00 90 FD | 	jmp	#LR__0337
04780                 | LR__0327
04780     6D FA 05 F6 | 	mov	result1, #109
04784     44 00 90 FD | 	jmp	#LR__0337
04788                 | LR__0328
04788     5B FA 05 F6 | 	mov	result1, #91
0478c     3C 00 90 FD | 	jmp	#LR__0337
04790                 | LR__0329
04790     56 FA 05 F6 | 	mov	result1, #86
04794     34 00 90 FD | 	jmp	#LR__0337
04798                 | LR__0330
04798     70 FA 05 F6 | 	mov	result1, #112
0479c     2C 00 90 FD | 	jmp	#LR__0337
047a0                 | LR__0331
047a0     70 FA 05 F6 | 	mov	result1, #112
047a4     24 00 90 FD | 	jmp	#LR__0337
047a8                 | LR__0332
047a8     57 FA 05 F6 | 	mov	result1, #87
047ac     1C 00 90 FD | 	jmp	#LR__0337
047b0                 | LR__0333
047b0     57 FA 05 F6 | 	mov	result1, #87
047b4     14 00 90 FD | 	jmp	#LR__0337
047b8                 | LR__0334
047b8     77 FA 05 F6 | 	mov	result1, #119
047bc     0C 00 90 FD | 	jmp	#LR__0337
047c0                 | LR__0335
047c0     78 FA 05 F6 | 	mov	result1, #120
047c4     04 00 90 FD | 	jmp	#LR__0337
047c8                 | LR__0336
047c8     00 FA 05 F6 | 	mov	result1, #0
047cc                 | LR__0337
047cc     A7 F0 03 F6 | 	mov	ptra, fp
047d0     B2 00 A0 FD | 	call	#popregs_
047d4                 | _iscommand_ret
047d4     2D 00 64 FD | 	ret
047d8                 | 
047d8                 | ' 
047d8                 | ' function isfunction(s as string) as ubyte
047d8                 | _isfunction
047d8     01 4A 05 F6 | 	mov	COUNT_, #1
047dc     A8 00 A0 FD | 	call	#pushregs_
047e0                 | ' 
047e0                 | ' select case s
047e0     09 1F 02 F6 | 	mov	local01, arg01
047e4     72 01 00 FF 
047e8     33 15 06 F6 | 	mov	arg02, ##@LR__4999
047ec     0F 13 02 F6 | 	mov	arg01, local01
047f0     A8 A3 B1 FD | 	call	#__system___string_cmp
047f4     00 FA 0D F2 | 	cmp	result1, #0 wz
047f8     C4 03 90 AD |  if_e	jmp	#LR__0340
047fc     72 01 00 FF 
04800     37 15 06 F6 | 	mov	arg02, ##@LR__5000
04804     0F 13 02 F6 | 	mov	arg01, local01
04808     90 A3 B1 FD | 	call	#__system___string_cmp
0480c     00 FA 0D F2 | 	cmp	result1, #0 wz
04810     B4 03 90 AD |  if_e	jmp	#LR__0341
04814     72 01 00 FF 
04818     3C 15 06 F6 | 	mov	arg02, ##@LR__5001
0481c     0F 13 02 F6 | 	mov	arg01, local01
04820     78 A3 B1 FD | 	call	#__system___string_cmp
04824     00 FA 0D F2 | 	cmp	result1, #0 wz
04828     A4 03 90 AD |  if_e	jmp	#LR__0342
0482c     72 01 00 FF 
04830     40 15 06 F6 | 	mov	arg02, ##@LR__5002
04834     0F 13 02 F6 | 	mov	arg01, local01
04838     60 A3 B1 FD | 	call	#__system___string_cmp
0483c     00 FA 0D F2 | 	cmp	result1, #0 wz
04840     94 03 90 AD |  if_e	jmp	#LR__0343
04844     72 01 00 FF 
04848     45 15 06 F6 | 	mov	arg02, ##@LR__5003
0484c     0F 13 02 F6 | 	mov	arg01, local01
04850     48 A3 B1 FD | 	call	#__system___string_cmp
04854     00 FA 0D F2 | 	cmp	result1, #0 wz
04858     84 03 90 AD |  if_e	jmp	#LR__0344
0485c     72 01 00 FF 
04860     49 15 06 F6 | 	mov	arg02, ##@LR__5004
04864     0F 13 02 F6 | 	mov	arg01, local01
04868     30 A3 B1 FD | 	call	#__system___string_cmp
0486c     00 FA 0D F2 | 	cmp	result1, #0 wz
04870     74 03 90 AD |  if_e	jmp	#LR__0345
04874     72 01 00 FF 
04878     4E 15 06 F6 | 	mov	arg02, ##@LR__5005
0487c     0F 13 02 F6 | 	mov	arg01, local01
04880     18 A3 B1 FD | 	call	#__system___string_cmp
04884     00 FA 0D F2 | 	cmp	result1, #0 wz
04888     64 03 90 AD |  if_e	jmp	#LR__0346
0488c     72 01 00 FF 
04890     52 15 06 F6 | 	mov	arg02, ##@LR__5006
04894     0F 13 02 F6 | 	mov	arg01, local01
04898     00 A3 B1 FD | 	call	#__system___string_cmp
0489c     00 FA 0D F2 | 	cmp	result1, #0 wz
048a0     54 03 90 AD |  if_e	jmp	#LR__0347
048a4     72 01 00 FF 
048a8     57 15 06 F6 | 	mov	arg02, ##@LR__5007
048ac     0F 13 02 F6 | 	mov	arg01, local01
048b0     E8 A2 B1 FD | 	call	#__system___string_cmp
048b4     00 FA 0D F2 | 	cmp	result1, #0 wz
048b8     44 03 90 AD |  if_e	jmp	#LR__0348
048bc     72 01 00 FF 
048c0     5C 15 06 F6 | 	mov	arg02, ##@LR__5008
048c4     0F 13 02 F6 | 	mov	arg01, local01
048c8     D0 A2 B1 FD | 	call	#__system___string_cmp
048cc     00 FA 0D F2 | 	cmp	result1, #0 wz
048d0     34 03 90 AD |  if_e	jmp	#LR__0349
048d4     72 01 00 FF 
048d8     60 15 06 F6 | 	mov	arg02, ##@LR__5009
048dc     0F 13 02 F6 | 	mov	arg01, local01
048e0     B8 A2 B1 FD | 	call	#__system___string_cmp
048e4     00 FA 0D F2 | 	cmp	result1, #0 wz
048e8     24 03 90 AD |  if_e	jmp	#LR__0350
048ec     72 01 00 FF 
048f0     66 15 06 F6 | 	mov	arg02, ##@LR__5010
048f4     0F 13 02 F6 | 	mov	arg01, local01
048f8     A0 A2 B1 FD | 	call	#__system___string_cmp
048fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04900     14 03 90 AD |  if_e	jmp	#LR__0351
04904     72 01 00 FF 
04908     6A 15 06 F6 | 	mov	arg02, ##@LR__5011
0490c     0F 13 02 F6 | 	mov	arg01, local01
04910     88 A2 B1 FD | 	call	#__system___string_cmp
04914     00 FA 0D F2 | 	cmp	result1, #0 wz
04918     04 03 90 AD |  if_e	jmp	#LR__0352
0491c     72 01 00 FF 
04920     73 15 06 F6 | 	mov	arg02, ##@LR__5012
04924     0F 13 02 F6 | 	mov	arg01, local01
04928     70 A2 B1 FD | 	call	#__system___string_cmp
0492c     00 FA 0D F2 | 	cmp	result1, #0 wz
04930     F4 02 90 AD |  if_e	jmp	#LR__0353
04934     72 01 00 FF 
04938     77 15 06 F6 | 	mov	arg02, ##@LR__5013
0493c     0F 13 02 F6 | 	mov	arg01, local01
04940     58 A2 B1 FD | 	call	#__system___string_cmp
04944     00 FA 0D F2 | 	cmp	result1, #0 wz
04948     E4 02 90 AD |  if_e	jmp	#LR__0354
0494c     72 01 00 FF 
04950     85 15 06 F6 | 	mov	arg02, ##@LR__5014
04954     0F 13 02 F6 | 	mov	arg01, local01
04958     40 A2 B1 FD | 	call	#__system___string_cmp
0495c     00 FA 0D F2 | 	cmp	result1, #0 wz
04960     D4 02 90 AD |  if_e	jmp	#LR__0355
04964     72 01 00 FF 
04968     92 15 06 F6 | 	mov	arg02, ##@LR__5015
0496c     0F 13 02 F6 | 	mov	arg01, local01
04970     28 A2 B1 FD | 	call	#__system___string_cmp
04974     00 FA 0D F2 | 	cmp	result1, #0 wz
04978     C4 02 90 AD |  if_e	jmp	#LR__0356
0497c     72 01 00 FF 
04980     9A 15 06 F6 | 	mov	arg02, ##@LR__5016
04984     0F 13 02 F6 | 	mov	arg01, local01
04988     10 A2 B1 FD | 	call	#__system___string_cmp
0498c     00 FA 0D F2 | 	cmp	result1, #0 wz
04990     B4 02 90 AD |  if_e	jmp	#LR__0357
04994     72 01 00 FF 
04998     9F 15 06 F6 | 	mov	arg02, ##@LR__5017
0499c     0F 13 02 F6 | 	mov	arg01, local01
049a0     F8 A1 B1 FD | 	call	#__system___string_cmp
049a4     00 FA 0D F2 | 	cmp	result1, #0 wz
049a8     A4 02 90 AD |  if_e	jmp	#LR__0358
049ac     72 01 00 FF 
049b0     A6 15 06 F6 | 	mov	arg02, ##@LR__5018
049b4     0F 13 02 F6 | 	mov	arg01, local01
049b8     E0 A1 B1 FD | 	call	#__system___string_cmp
049bc     00 FA 0D F2 | 	cmp	result1, #0 wz
049c0     94 02 90 AD |  if_e	jmp	#LR__0359
049c4     72 01 00 FF 
049c8     AC 15 06 F6 | 	mov	arg02, ##@LR__5019
049cc     0F 13 02 F6 | 	mov	arg01, local01
049d0     C8 A1 B1 FD | 	call	#__system___string_cmp
049d4     00 FA 0D F2 | 	cmp	result1, #0 wz
049d8     84 02 90 AD |  if_e	jmp	#LR__0360
049dc     72 01 00 FF 
049e0     B0 15 06 F6 | 	mov	arg02, ##@LR__5020
049e4     0F 13 02 F6 | 	mov	arg01, local01
049e8     B0 A1 B1 FD | 	call	#__system___string_cmp
049ec     00 FA 0D F2 | 	cmp	result1, #0 wz
049f0     74 02 90 AD |  if_e	jmp	#LR__0361
049f4     72 01 00 FF 
049f8     B6 15 06 F6 | 	mov	arg02, ##@LR__5021
049fc     0F 13 02 F6 | 	mov	arg01, local01
04a00     98 A1 B1 FD | 	call	#__system___string_cmp
04a04     00 FA 0D F2 | 	cmp	result1, #0 wz
04a08     64 02 90 AD |  if_e	jmp	#LR__0362
04a0c     72 01 00 FF 
04a10     BB 15 06 F6 | 	mov	arg02, ##@LR__5022
04a14     0F 13 02 F6 | 	mov	arg01, local01
04a18     80 A1 B1 FD | 	call	#__system___string_cmp
04a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a20     54 02 90 AD |  if_e	jmp	#LR__0363
04a24     72 01 00 FF 
04a28     C2 15 06 F6 | 	mov	arg02, ##@LR__5023
04a2c     0F 13 02 F6 | 	mov	arg01, local01
04a30     68 A1 B1 FD | 	call	#__system___string_cmp
04a34     00 FA 0D F2 | 	cmp	result1, #0 wz
04a38     44 02 90 AD |  if_e	jmp	#LR__0364
04a3c     72 01 00 FF 
04a40     C9 15 06 F6 | 	mov	arg02, ##@LR__5024
04a44     0F 13 02 F6 | 	mov	arg01, local01
04a48     50 A1 B1 FD | 	call	#__system___string_cmp
04a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a50     34 02 90 AD |  if_e	jmp	#LR__0365
04a54     72 01 00 FF 
04a58     D0 15 06 F6 | 	mov	arg02, ##@LR__5025
04a5c     0F 13 02 F6 | 	mov	arg01, local01
04a60     38 A1 B1 FD | 	call	#__system___string_cmp
04a64     00 FA 0D F2 | 	cmp	result1, #0 wz
04a68     24 02 90 AD |  if_e	jmp	#LR__0366
04a6c     72 01 00 FF 
04a70     D7 15 06 F6 | 	mov	arg02, ##@LR__5026
04a74     0F 13 02 F6 | 	mov	arg01, local01
04a78     20 A1 B1 FD | 	call	#__system___string_cmp
04a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a80     14 02 90 AD |  if_e	jmp	#LR__0367
04a84     72 01 00 FF 
04a88     DC 15 06 F6 | 	mov	arg02, ##@LR__5027
04a8c     0F 13 02 F6 | 	mov	arg01, local01
04a90     08 A1 B1 FD | 	call	#__system___string_cmp
04a94     00 FA 0D F2 | 	cmp	result1, #0 wz
04a98     04 02 90 AD |  if_e	jmp	#LR__0368
04a9c     72 01 00 FF 
04aa0     E4 15 06 F6 | 	mov	arg02, ##@LR__5028
04aa4     0F 13 02 F6 | 	mov	arg01, local01
04aa8     F0 A0 B1 FD | 	call	#__system___string_cmp
04aac     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab0     F4 01 90 AD |  if_e	jmp	#LR__0369
04ab4     72 01 00 FF 
04ab8     EA 15 06 F6 | 	mov	arg02, ##@LR__5029
04abc     0F 13 02 F6 | 	mov	arg01, local01
04ac0     D8 A0 B1 FD | 	call	#__system___string_cmp
04ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ac8     E4 01 90 AD |  if_e	jmp	#LR__0370
04acc     72 01 00 FF 
04ad0     F1 15 06 F6 | 	mov	arg02, ##@LR__5030
04ad4     0F 13 02 F6 | 	mov	arg01, local01
04ad8     C0 A0 B1 FD | 	call	#__system___string_cmp
04adc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae0     D4 01 90 AD |  if_e	jmp	#LR__0371
04ae4     72 01 00 FF 
04ae8     F7 15 06 F6 | 	mov	arg02, ##@LR__5031
04aec     0F 13 02 F6 | 	mov	arg01, local01
04af0     A8 A0 B1 FD | 	call	#__system___string_cmp
04af4     00 FA 0D F2 | 	cmp	result1, #0 wz
04af8     C4 01 90 AD |  if_e	jmp	#LR__0372
04afc     72 01 00 FF 
04b00     FB 15 06 F6 | 	mov	arg02, ##@LR__5032
04b04     0F 13 02 F6 | 	mov	arg01, local01
04b08     90 A0 B1 FD | 	call	#__system___string_cmp
04b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b10     B4 01 90 AD |  if_e	jmp	#LR__0373
04b14     72 01 00 FF 
04b18     FF 15 06 F6 | 	mov	arg02, ##@LR__5033
04b1c     0F 13 02 F6 | 	mov	arg01, local01
04b20     78 A0 B1 FD | 	call	#__system___string_cmp
04b24     00 FA 0D F2 | 	cmp	result1, #0 wz
04b28     A4 01 90 AD |  if_e	jmp	#LR__0374
04b2c     73 01 00 FF 
04b30     03 14 06 F6 | 	mov	arg02, ##@LR__5034
04b34     0F 13 02 F6 | 	mov	arg01, local01
04b38     60 A0 B1 FD | 	call	#__system___string_cmp
04b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b40     94 01 90 AD |  if_e	jmp	#LR__0375
04b44     73 01 00 FF 
04b48     09 14 06 F6 | 	mov	arg02, ##@LR__5035
04b4c     0F 13 02 F6 | 	mov	arg01, local01
04b50     48 A0 B1 FD | 	call	#__system___string_cmp
04b54     00 FA 0D F2 | 	cmp	result1, #0 wz
04b58     84 01 90 AD |  if_e	jmp	#LR__0376
04b5c     73 01 00 FF 
04b60     0F 14 06 F6 | 	mov	arg02, ##@LR__5036
04b64     0F 13 02 F6 | 	mov	arg01, local01
04b68     30 A0 B1 FD | 	call	#__system___string_cmp
04b6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b70     74 01 90 AD |  if_e	jmp	#LR__0377
04b74     73 01 00 FF 
04b78     14 14 06 F6 | 	mov	arg02, ##@LR__5037
04b7c     0F 13 02 F6 | 	mov	arg01, local01
04b80     18 A0 B1 FD | 	call	#__system___string_cmp
04b84     00 FA 0D F2 | 	cmp	result1, #0 wz
04b88     64 01 90 AD |  if_e	jmp	#LR__0378
04b8c     73 01 00 FF 
04b90     18 14 06 F6 | 	mov	arg02, ##@LR__5038
04b94     0F 13 02 F6 | 	mov	arg01, local01
04b98     00 A0 B1 FD | 	call	#__system___string_cmp
04b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04ba0     54 01 90 AD |  if_e	jmp	#LR__0379
04ba4     73 01 00 FF 
04ba8     1C 14 06 F6 | 	mov	arg02, ##@LR__5039
04bac     0F 13 02 F6 | 	mov	arg01, local01
04bb0     E8 9F B1 FD | 	call	#__system___string_cmp
04bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04bb8     44 01 90 AD |  if_e	jmp	#LR__0380
04bbc     48 01 90 FD | 	jmp	#LR__0381
04bc0                 | LR__0340
04bc0     9E FA 05 F6 | 	mov	result1, #158
04bc4     44 01 90 FD | 	jmp	#LR__0382
04bc8                 | LR__0341
04bc8     85 FA 05 F6 | 	mov	result1, #133
04bcc     3C 01 90 FD | 	jmp	#LR__0382
04bd0                 | LR__0342
04bd0     9B FA 05 F6 | 	mov	result1, #155
04bd4     34 01 90 FD | 	jmp	#LR__0382
04bd8                 | LR__0343
04bd8     9B FA 05 F6 | 	mov	result1, #155
04bdc     2C 01 90 FD | 	jmp	#LR__0382
04be0                 | LR__0344
04be0     A7 FA 05 F6 | 	mov	result1, #167
04be4     24 01 90 FD | 	jmp	#LR__0382
04be8                 | LR__0345
04be8     84 FA 05 F6 | 	mov	result1, #132
04bec     1C 01 90 FD | 	jmp	#LR__0382
04bf0                 | LR__0346
04bf0     86 FA 05 F6 | 	mov	result1, #134
04bf4     14 01 90 FD | 	jmp	#LR__0382
04bf8                 | LR__0347
04bf8     A2 FA 05 F6 | 	mov	result1, #162
04bfc     0C 01 90 FD | 	jmp	#LR__0382
04c00                 | LR__0348
04c00     9F FA 05 F6 | 	mov	result1, #159
04c04     04 01 90 FD | 	jmp	#LR__0382
04c08                 | LR__0349
04c08     82 FA 05 F6 | 	mov	result1, #130
04c0c     FC 00 90 FD | 	jmp	#LR__0382
04c10                 | LR__0350
04c10     99 FA 05 F6 | 	mov	result1, #153
04c14     F4 00 90 FD | 	jmp	#LR__0382
04c18                 | LR__0351
04c18     9C FA 05 F6 | 	mov	result1, #156
04c1c     EC 00 90 FD | 	jmp	#LR__0382
04c20                 | LR__0352
04c20     6F FA 05 F6 | 	mov	result1, #111
04c24     E4 00 90 FD | 	jmp	#LR__0382
04c28                 | LR__0353
04c28     6F FA 05 F6 | 	mov	result1, #111
04c2c     DC 00 90 FD | 	jmp	#LR__0382
04c30                 | LR__0354
04c30     93 FA 05 F6 | 	mov	result1, #147
04c34     D4 00 90 FD | 	jmp	#LR__0382
04c38                 | LR__0355
04c38     94 FA 05 F6 | 	mov	result1, #148
04c3c     CC 00 90 FD | 	jmp	#LR__0382
04c40                 | LR__0356
04c40     62 FA 05 F6 | 	mov	result1, #98
04c44     C4 00 90 FD | 	jmp	#LR__0382
04c48                 | LR__0357
04c48     A3 FA 05 F6 | 	mov	result1, #163
04c4c     BC 00 90 FD | 	jmp	#LR__0382
04c50                 | LR__0358
04c50     9D FA 05 F6 | 	mov	result1, #157
04c54     B4 00 90 FD | 	jmp	#LR__0382
04c58                 | LR__0359
04c58     A4 FA 05 F6 | 	mov	result1, #164
04c5c     AC 00 90 FD | 	jmp	#LR__0382
04c60                 | LR__0360
04c60     A8 FA 05 F6 | 	mov	result1, #168
04c64     A4 00 90 FD | 	jmp	#LR__0382
04c68                 | LR__0361
04c68     9A FA 05 F6 | 	mov	result1, #154
04c6c     9C 00 90 FD | 	jmp	#LR__0382
04c70                 | LR__0362
04c70     A6 FA 05 F6 | 	mov	result1, #166
04c74     94 00 90 FD | 	jmp	#LR__0382
04c78                 | LR__0363
04c78     66 FA 05 F6 | 	mov	result1, #102
04c7c     8C 00 90 FD | 	jmp	#LR__0382
04c80                 | LR__0364
04c80     67 FA 05 F6 | 	mov	result1, #103
04c84     84 00 90 FD | 	jmp	#LR__0382
04c88                 | LR__0365
04c88     64 FA 05 F6 | 	mov	result1, #100
04c8c     7C 00 90 FD | 	jmp	#LR__0382
04c90                 | LR__0366
04c90     65 FA 05 F6 | 	mov	result1, #101
04c94     74 00 90 FD | 	jmp	#LR__0382
04c98                 | LR__0367
04c98     98 FA 05 F6 | 	mov	result1, #152
04c9c     6C 00 90 FD | 	jmp	#LR__0382
04ca0                 | LR__0368
04ca0     7B FA 05 F6 | 	mov	result1, #123
04ca4     64 00 90 FD | 	jmp	#LR__0382
04ca8                 | LR__0369
04ca8     76 FA 05 F6 | 	mov	result1, #118
04cac     5C 00 90 FD | 	jmp	#LR__0382
04cb0                 | LR__0370
04cb0     A5 FA 05 F6 | 	mov	result1, #165
04cb4     54 00 90 FD | 	jmp	#LR__0382
04cb8                 | LR__0371
04cb8     7A FA 05 F6 | 	mov	result1, #122
04cbc     4C 00 90 FD | 	jmp	#LR__0382
04cc0                 | LR__0372
04cc0     54 FA 05 F6 | 	mov	result1, #84
04cc4     44 00 90 FD | 	jmp	#LR__0382
04cc8                 | LR__0373
04cc8     6B FA 05 F6 | 	mov	result1, #107
04ccc     3C 00 90 FD | 	jmp	#LR__0382
04cd0                 | LR__0374
04cd0     87 FA 05 F6 | 	mov	result1, #135
04cd4     34 00 90 FD | 	jmp	#LR__0382
04cd8                 | LR__0375
04cd8     6A FA 05 F6 | 	mov	result1, #106
04cdc     2C 00 90 FD | 	jmp	#LR__0382
04ce0                 | LR__0376
04ce0     6E FA 05 F6 | 	mov	result1, #110
04ce4     24 00 90 FD | 	jmp	#LR__0382
04ce8                 | LR__0377
04ce8     A1 FA 05 F6 | 	mov	result1, #161
04cec     1C 00 90 FD | 	jmp	#LR__0382
04cf0                 | LR__0378
04cf0     83 FA 05 F6 | 	mov	result1, #131
04cf4     14 00 90 FD | 	jmp	#LR__0382
04cf8                 | LR__0379
04cf8     A0 FA 05 F6 | 	mov	result1, #160
04cfc     0C 00 90 FD | 	jmp	#LR__0382
04d00                 | LR__0380
04d00     9B FA 05 F6 | 	mov	result1, #155
04d04     04 00 90 FD | 	jmp	#LR__0382
04d08                 | LR__0381
04d08     00 FA 05 F6 | 	mov	result1, #0
04d0c                 | LR__0382
04d0c     A7 F0 03 F6 | 	mov	ptra, fp
04d10     B2 00 A0 FD | 	call	#popregs_
04d14                 | _isfunction_ret
04d14     2D 00 64 FD | 	ret
04d18                 | 
04d18                 | ' 
04d18                 | ' function isname(s as string) as boolean
04d18                 | _isname
04d18     0D 4A 05 F6 | 	mov	COUNT_, #13
04d1c     A8 00 A0 FD | 	call	#pushregs_
04d20     09 1F 02 F6 | 	mov	local01, arg01
04d24     09 21 02 F6 | 	mov	local02, arg01
04d28     97 06 48 FB | 	callpa	#(@LR__0391-@LR__0390)>>2,fcache_load_ptr_
04d2c                 | LR__0390
04d2c     10 FB C9 FA | 	rdbyte	result1, local02 wz
04d30     01 20 06 51 |  if_ne	add	local02, #1
04d34     F4 FF 9F 5D |  if_ne	jmp	#LR__0390
04d38                 | LR__0391
04d38     09 21 82 F1 | 	sub	local02, arg01
04d3c     10 FB 01 F6 | 	mov	result1, local02
04d40     FD 22 0A F6 | 	mov	local03, result1 wz
04d44     00 FA 05 A6 |  if_e	mov	result1, #0
04d48     34 02 90 AD |  if_e	jmp	#LR__0403
04d4c     0F 13 02 F6 | 	mov	arg01, local01
04d50     01 14 06 F6 | 	mov	arg02, #1
04d54     01 16 06 F6 | 	mov	arg03, #1
04d58     78 BF B1 FD | 	call	#__system__Mid_S
04d5c     FD 24 02 F6 | 	mov	local04, result1
04d60                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
04d60     73 01 00 FF 
04d64     23 14 06 F6 | 	mov	arg02, ##@LR__5040
04d68     12 13 02 F6 | 	mov	arg01, local04
04d6c     2C 9E B1 FD | 	call	#__system___string_cmp
04d70     00 FA 55 F2 | 	cmps	result1, #0 wc
04d74     18 00 90 CD |  if_b	jmp	#LR__0392
04d78     73 01 00 FF 
04d7c     25 14 06 F6 | 	mov	arg02, ##@LR__5041
04d80     12 13 02 F6 | 	mov	arg01, local04
04d84     14 9E B1 FD | 	call	#__system___string_cmp
04d88     01 FA 55 F2 | 	cmps	result1, #1 wc
04d8c     1C 00 90 CD |  if_b	jmp	#LR__0393
04d90                 | LR__0392
04d90     73 01 00 FF 
04d94     27 14 06 F6 | 	mov	arg02, ##@LR__5042
04d98     12 13 02 F6 | 	mov	arg01, local04
04d9c     FC 9D B1 FD | 	call	#__system___string_cmp
04da0     00 FA 0D F2 | 	cmp	result1, #0 wz
04da4     00 FA 05 56 |  if_ne	mov	result1, #0
04da8     D4 01 90 5D |  if_ne	jmp	#LR__0403
04dac                 | LR__0393
04dac                 | ' if l>2 then 
04dac     03 22 56 F2 | 	cmps	local03, #3 wc
04db0     C8 01 90 CD |  if_b	jmp	#LR__0402
04db4                 | '   for i=2 to l
04db4     02 26 06 F6 | 	mov	local05, #2
04db8     11 29 02 F6 | 	mov	local06, local03
04dbc     01 28 06 F1 | 	add	local06, #1
04dc0                 | LR__0394
04dc0     14 27 52 F2 | 	cmps	local05, local06 wc
04dc4     B4 01 90 3D |  if_ae	jmp	#LR__0401
04dc8     0F 13 02 F6 | 	mov	arg01, local01
04dcc     13 15 02 F6 | 	mov	arg02, local05
04dd0     01 16 06 F6 | 	mov	arg03, #1
04dd4     FC BE B1 FD | 	call	#__system__Mid_S
04dd8     FD 24 02 F6 | 	mov	local04, result1
04ddc                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
04ddc     11 27 52 F2 | 	cmps	local05, local03 wc
04de0     9C 00 90 3D |  if_ae	jmp	#LR__0397
04de4     73 01 00 FF 
04de8     29 14 06 F6 | 	mov	arg02, ##@LR__5043
04dec     12 13 02 F6 | 	mov	arg01, local04
04df0     A8 9D B1 FD | 	call	#__system___string_cmp
04df4     00 FA 55 F2 | 	cmps	result1, #0 wc
04df8     18 00 90 CD |  if_b	jmp	#LR__0395
04dfc     73 01 00 FF 
04e00     2B 14 06 F6 | 	mov	arg02, ##@LR__5044
04e04     12 13 02 F6 | 	mov	arg01, local04
04e08     90 9D B1 FD | 	call	#__system___string_cmp
04e0c     01 FA 55 F2 | 	cmps	result1, #1 wc
04e10     6C 00 90 CD |  if_b	jmp	#LR__0397
04e14                 | LR__0395
04e14     73 01 00 FF 
04e18     2D 14 06 F6 | 	mov	arg02, ##@LR__5045
04e1c     12 13 02 F6 | 	mov	arg01, local04
04e20     78 9D B1 FD | 	call	#__system___string_cmp
04e24     00 FA 55 F2 | 	cmps	result1, #0 wc
04e28     18 00 90 CD |  if_b	jmp	#LR__0396
04e2c     73 01 00 FF 
04e30     2F 14 06 F6 | 	mov	arg02, ##@LR__5046
04e34     12 13 02 F6 | 	mov	arg01, local04
04e38     60 9D B1 FD | 	call	#__system___string_cmp
04e3c     01 FA 55 F2 | 	cmps	result1, #1 wc
04e40     3C 00 90 CD |  if_b	jmp	#LR__0397
04e44                 | LR__0396
04e44     73 01 00 FF 
04e48     31 2A 06 F6 | 	mov	local07, ##@LR__5047
04e4c     12 13 02 F6 | 	mov	arg01, local04
04e50     15 15 02 F6 | 	mov	arg02, local07
04e54     44 9D B1 FD | 	call	#__system___string_cmp
04e58     00 FA 0D F2 | 	cmp	result1, #0 wz
04e5c     20 00 90 AD |  if_e	jmp	#LR__0397
04e60     73 01 00 FF 
04e64     33 2C 06 F6 | 	mov	local08, ##@LR__5048
04e68     12 13 02 F6 | 	mov	arg01, local04
04e6c     16 15 02 F6 | 	mov	arg02, local08
04e70     28 9D B1 FD | 	call	#__system___string_cmp
04e74     FD 2E 0A F6 | 	mov	local09, result1 wz
04e78     00 FA 05 56 |  if_ne	mov	result1, #0
04e7c     00 01 90 5D |  if_ne	jmp	#LR__0403
04e80                 | LR__0397
04e80                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
04e80     11 27 0A F2 | 	cmp	local05, local03 wz
04e84     EC 00 90 5D |  if_ne	jmp	#LR__0400
04e88     73 01 00 FF 
04e8c     35 30 06 F6 | 	mov	local10, ##@LR__5049
04e90     12 13 02 F6 | 	mov	arg01, local04
04e94     18 15 02 F6 | 	mov	arg02, local10
04e98     00 9D B1 FD | 	call	#__system___string_cmp
04e9c     FD 32 02 F6 | 	mov	local11, result1
04ea0     00 32 56 F2 | 	cmps	local11, #0 wc
04ea4     1C 00 90 CD |  if_b	jmp	#LR__0398
04ea8     73 01 00 FF 
04eac     37 14 06 F6 | 	mov	arg02, ##@LR__5050
04eb0     12 13 02 F6 | 	mov	arg01, local04
04eb4     E4 9C B1 FD | 	call	#__system___string_cmp
04eb8     FD 30 02 F6 | 	mov	local10, result1
04ebc     01 30 56 F2 | 	cmps	local10, #1 wc
04ec0     B0 00 90 CD |  if_b	jmp	#LR__0400
04ec4                 | LR__0398
04ec4     73 01 00 FF 
04ec8     39 14 06 F6 | 	mov	arg02, ##@LR__5051
04ecc     12 13 02 F6 | 	mov	arg01, local04
04ed0     C8 9C B1 FD | 	call	#__system___string_cmp
04ed4     00 FA 55 F2 | 	cmps	result1, #0 wc
04ed8     1C 00 90 CD |  if_b	jmp	#LR__0399
04edc     73 01 00 FF 
04ee0     3B 2E 06 F6 | 	mov	local09, ##@LR__5052
04ee4     12 13 02 F6 | 	mov	arg01, local04
04ee8     17 15 02 F6 | 	mov	arg02, local09
04eec     AC 9C B1 FD | 	call	#__system___string_cmp
04ef0     01 FA 55 F2 | 	cmps	result1, #1 wc
04ef4     7C 00 90 CD |  if_b	jmp	#LR__0400
04ef8                 | LR__0399
04ef8     73 01 00 FF 
04efc     3D 2E 06 F6 | 	mov	local09, ##@LR__5053
04f00     12 13 02 F6 | 	mov	arg01, local04
04f04     17 15 02 F6 | 	mov	arg02, local09
04f08     90 9C B1 FD | 	call	#__system___string_cmp
04f0c     00 FA 4D F2 | 	cmps	result1, #0 wz
04f10     60 00 90 AD |  if_e	jmp	#LR__0400
04f14     73 01 00 FF 
04f18     3F 2C 06 F6 | 	mov	local08, ##@LR__5054
04f1c     12 13 02 F6 | 	mov	arg01, local04
04f20     16 15 02 F6 | 	mov	arg02, local08
04f24     74 9C B1 FD | 	call	#__system___string_cmp
04f28     FD 2E 0A F6 | 	mov	local09, result1 wz
04f2c     44 00 90 AD |  if_e	jmp	#LR__0400
04f30     73 01 00 FF 
04f34     41 34 06 F6 | 	mov	local12, ##@LR__5055
04f38     1A 2D 02 F6 | 	mov	local08, local12
04f3c     12 13 02 F6 | 	mov	arg01, local04
04f40     16 15 02 F6 | 	mov	arg02, local08
04f44     54 9C B1 FD | 	call	#__system___string_cmp
04f48     FD 2A 0A F6 | 	mov	local07, result1 wz
04f4c     24 00 90 AD |  if_e	jmp	#LR__0400
04f50     73 01 00 FF 
04f54     43 36 06 F6 | 	mov	local13, ##@LR__5056
04f58     1B 35 02 F6 | 	mov	local12, local13
04f5c     12 13 02 F6 | 	mov	arg01, local04
04f60     1A 15 02 F6 | 	mov	arg02, local12
04f64     34 9C B1 FD | 	call	#__system___string_cmp
04f68     FD 2C 0A F6 | 	mov	local08, result1 wz
04f6c     00 FA 05 56 |  if_ne	mov	result1, #0
04f70     0C 00 90 5D |  if_ne	jmp	#LR__0403
04f74                 | LR__0400
04f74     01 26 06 F1 | 	add	local05, #1
04f78     44 FE 9F FD | 	jmp	#LR__0394
04f7c                 | LR__0401
04f7c                 | LR__0402
04f7c                 | ' return true
04f7c     01 FA 65 F6 | 	neg	result1, #1
04f80                 | LR__0403
04f80     A7 F0 03 F6 | 	mov	ptra, fp
04f84     B2 00 A0 FD | 	call	#popregs_
04f88                 | _isname_ret
04f88     2D 00 64 FD | 	ret
04f8c                 | 
04f8c                 | ' 
04f8c                 | ' function isnum(s as string) as boolean
04f8c                 | _isnum
04f8c     0D 4A 05 F6 | 	mov	COUNT_, #13
04f90     A8 00 A0 FD | 	call	#pushregs_
04f94     09 1F 02 F6 | 	mov	local01, arg01
04f98     00 20 06 F6 | 	mov	local02, #0
04f9c     00 22 06 F6 | 	mov	local03, #0
04fa0     0F 13 02 F6 | 	mov	arg01, local01
04fa4     09 25 02 F6 | 	mov	local04, arg01
04fa8     97 06 48 FB | 	callpa	#(@LR__0411-@LR__0410)>>2,fcache_load_ptr_
04fac                 | LR__0410
04fac     12 FB C9 FA | 	rdbyte	result1, local04 wz
04fb0     01 24 06 51 |  if_ne	add	local04, #1
04fb4     F4 FF 9F 5D |  if_ne	jmp	#LR__0410
04fb8                 | LR__0411
04fb8     09 25 82 F1 | 	sub	local04, arg01
04fbc     12 FB 01 F6 | 	mov	result1, local04
04fc0     FD 26 0A F6 | 	mov	local05, result1 wz
04fc4     00 FA 05 A6 |  if_e	mov	result1, #0
04fc8     8C 02 90 AD |  if_e	jmp	#LR__0422
04fcc     0F 13 02 F6 | 	mov	arg01, local01
04fd0     01 14 06 F6 | 	mov	arg02, #1
04fd4     01 16 06 F6 | 	mov	arg03, #1
04fd8     F8 BC B1 FD | 	call	#__system__Mid_S
04fdc     FD 28 02 F6 | 	mov	local06, result1
04fe0                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
04fe0     73 01 00 FF 
04fe4     45 14 06 F6 | 	mov	arg02, ##@LR__5057
04fe8     14 13 02 F6 | 	mov	arg01, local06
04fec     AC 9B B1 FD | 	call	#__system___string_cmp
04ff0     00 FA 55 F2 | 	cmps	result1, #0 wc
04ff4     18 00 90 CD |  if_b	jmp	#LR__0412
04ff8     73 01 00 FF 
04ffc     47 14 06 F6 | 	mov	arg02, ##@LR__5058
05000     14 13 02 F6 | 	mov	arg01, local06
05004     94 9B B1 FD | 	call	#__system___string_cmp
05008     01 FA 55 F2 | 	cmps	result1, #1 wc
0500c     78 00 90 CD |  if_b	jmp	#LR__0413
05010                 | LR__0412
05010     73 01 00 FF 
05014     49 14 06 F6 | 	mov	arg02, ##@LR__5059
05018     14 13 02 F6 | 	mov	arg01, local06
0501c     7C 9B B1 FD | 	call	#__system___string_cmp
05020     00 FA 0D F2 | 	cmp	result1, #0 wz
05024     60 00 90 AD |  if_e	jmp	#LR__0413
05028     73 01 00 FF 
0502c     4B 2A 06 F6 | 	mov	local07, ##@LR__5060
05030     14 13 02 F6 | 	mov	arg01, local06
05034     15 15 02 F6 | 	mov	arg02, local07
05038     60 9B B1 FD | 	call	#__system___string_cmp
0503c     00 FA 0D F2 | 	cmp	result1, #0 wz
05040     44 00 90 AD |  if_e	jmp	#LR__0413
05044     73 01 00 FF 
05048     4D 2C 06 F6 | 	mov	local08, ##@LR__5061
0504c     16 2B 02 F6 | 	mov	local07, local08
05050     14 13 02 F6 | 	mov	arg01, local06
05054     15 15 02 F6 | 	mov	arg02, local07
05058     40 9B B1 FD | 	call	#__system___string_cmp
0505c     00 FA 4D F2 | 	cmps	result1, #0 wz
05060     24 00 90 AD |  if_e	jmp	#LR__0413
05064     73 01 00 FF 
05068     4F 2E 06 F6 | 	mov	local09, ##@LR__5062
0506c     17 2D 02 F6 | 	mov	local08, local09
05070     14 13 02 F6 | 	mov	arg01, local06
05074     16 15 02 F6 | 	mov	arg02, local08
05078     20 9B B1 FD | 	call	#__system___string_cmp
0507c     FD 2A 0A F6 | 	mov	local07, result1 wz
05080     00 FA 05 56 |  if_ne	mov	result1, #0
05084     D0 01 90 5D |  if_ne	jmp	#LR__0422
05088                 | LR__0413
05088                 | ' if m$="." then ds=1
05088     73 01 00 FF 
0508c     51 14 06 F6 | 	mov	arg02, ##@LR__5063
05090     14 13 02 F6 | 	mov	arg01, local06
05094     04 9B B1 FD | 	call	#__system___string_cmp
05098     00 FA 0D F2 | 	cmp	result1, #0 wz
0509c     01 20 06 A6 |  if_e	mov	local02, #1
050a0                 | ' if l>1 then 
050a0     02 26 56 F2 | 	cmps	local05, #2 wc
050a4     AC 01 90 CD |  if_b	jmp	#LR__0421
050a8                 | '   for i=2 to l
050a8     02 30 06 F6 | 	mov	local10, #2
050ac     13 33 02 F6 | 	mov	local11, local05
050b0     01 32 06 F1 | 	add	local11, #1
050b4                 | LR__0414
050b4     19 31 52 F2 | 	cmps	local10, local11 wc
050b8     98 01 90 3D |  if_ae	jmp	#LR__0420
050bc     0F 13 02 F6 | 	mov	arg01, local01
050c0     18 15 02 F6 | 	mov	arg02, local10
050c4     01 16 06 F6 | 	mov	arg03, #1
050c8     08 BC B1 FD | 	call	#__system__Mid_S
050cc     FD 28 02 F6 | 	mov	local06, result1
050d0                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
050d0     73 01 00 FF 
050d4     53 14 06 F6 | 	mov	arg02, ##@LR__5064
050d8     14 13 02 F6 | 	mov	arg01, local06
050dc     BC 9A B1 FD | 	call	#__system___string_cmp
050e0     00 FA 55 F2 | 	cmps	result1, #0 wc
050e4     18 00 90 CD |  if_b	jmp	#LR__0415
050e8     73 01 00 FF 
050ec     55 14 06 F6 | 	mov	arg02, ##@LR__5065
050f0     14 13 02 F6 | 	mov	arg01, local06
050f4     A4 9A B1 FD | 	call	#__system___string_cmp
050f8     01 FA 55 F2 | 	cmps	result1, #1 wc
050fc     98 00 90 CD |  if_b	jmp	#LR__0416
05100                 | LR__0415
05100     73 01 00 FF 
05104     57 14 06 F6 | 	mov	arg02, ##@LR__5066
05108     14 13 02 F6 | 	mov	arg01, local06
0510c     8C 9A B1 FD | 	call	#__system___string_cmp
05110     00 FA 0D F2 | 	cmp	result1, #0 wz
05114     80 00 90 AD |  if_e	jmp	#LR__0416
05118     73 01 00 FF 
0511c     59 2A 06 F6 | 	mov	local07, ##@LR__5067
05120     14 13 02 F6 | 	mov	arg01, local06
05124     15 15 02 F6 | 	mov	arg02, local07
05128     70 9A B1 FD | 	call	#__system___string_cmp
0512c     00 FA 4D F2 | 	cmps	result1, #0 wz
05130     64 00 90 AD |  if_e	jmp	#LR__0416
05134     73 01 00 FF 
05138     5B 2C 06 F6 | 	mov	local08, ##@LR__5068
0513c     16 2B 02 F6 | 	mov	local07, local08
05140     14 13 02 F6 | 	mov	arg01, local06
05144     15 15 02 F6 | 	mov	arg02, local07
05148     50 9A B1 FD | 	call	#__system___string_cmp
0514c     FD 34 0A F6 | 	mov	local12, result1 wz
05150     44 00 90 AD |  if_e	jmp	#LR__0416
05154     73 01 00 FF 
05158     5D 2E 06 F6 | 	mov	local09, ##@LR__5069
0515c     17 2D 02 F6 | 	mov	local08, local09
05160     14 13 02 F6 | 	mov	arg01, local06
05164     16 15 02 F6 | 	mov	arg02, local08
05168     30 9A B1 FD | 	call	#__system___string_cmp
0516c     FD 2A 0A F6 | 	mov	local07, result1 wz
05170     24 00 90 AD |  if_e	jmp	#LR__0416
05174     73 01 00 FF 
05178     5F 36 06 F6 | 	mov	local13, ##@LR__5070
0517c     1B 2F 02 F6 | 	mov	local09, local13
05180     14 13 02 F6 | 	mov	arg01, local06
05184     17 15 02 F6 | 	mov	arg02, local09
05188     10 9A B1 FD | 	call	#__system___string_cmp
0518c     FD 2C 0A F6 | 	mov	local08, result1 wz
05190     00 FA 05 56 |  if_ne	mov	result1, #0
05194     C0 00 90 5D |  if_ne	jmp	#LR__0422
05198                 | LR__0416
05198                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
05198     73 01 00 FF 
0519c     61 14 06 F6 | 	mov	arg02, ##@LR__5071
051a0     14 13 02 F6 | 	mov	arg01, local06
051a4     F4 99 B1 FD | 	call	#__system___string_cmp
051a8     00 FA 0D F2 | 	cmp	result1, #0 wz
051ac     38 00 90 5D |  if_ne	jmp	#LR__0417
051b0     18 15 02 F6 | 	mov	arg02, local10
051b4     01 14 86 F1 | 	sub	arg02, #1
051b8     0F 13 02 F6 | 	mov	arg01, local01
051bc     01 16 06 F6 | 	mov	arg03, #1
051c0     10 BB B1 FD | 	call	#__system__Mid_S
051c4     FD 12 02 F6 | 	mov	arg01, result1
051c8     00 BD B1 FD | 	call	#__system__LCase_S
051cc     FD 12 02 F6 | 	mov	arg01, result1
051d0     73 01 00 FF 
051d4     63 14 06 F6 | 	mov	arg02, ##@LR__5072
051d8     C0 99 B1 FD | 	call	#__system___string_cmp
051dc     00 FA 0D F2 | 	cmp	result1, #0 wz
051e0     00 FA 05 56 |  if_ne	mov	result1, #0
051e4     70 00 90 5D |  if_ne	jmp	#LR__0422
051e8                 | LR__0417
051e8                 | '     if m$="." then ds+=1: if ds>1 then return false
051e8     73 01 00 FF 
051ec     65 14 06 F6 | 	mov	arg02, ##@LR__5073
051f0     14 13 02 F6 | 	mov	arg01, local06
051f4     A4 99 B1 FD | 	call	#__system___string_cmp
051f8     00 FA 0D F2 | 	cmp	result1, #0 wz
051fc     01 20 06 A1 |  if_e	add	local02, #1
05200     02 20 56 A2 |  if_e	cmps	local02, #2 wc
05204     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
05208     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0422
0520c                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
0520c     73 01 00 FF 
05210     67 14 06 F6 | 	mov	arg02, ##@LR__5074
05214     14 13 02 F6 | 	mov	arg01, local06
05218     80 99 B1 FD | 	call	#__system___string_cmp
0521c     00 FA 4D F2 | 	cmps	result1, #0 wz
05220     18 00 90 AD |  if_e	jmp	#LR__0418
05224     73 01 00 FF 
05228     69 14 06 F6 | 	mov	arg02, ##@LR__5075
0522c     14 13 02 F6 | 	mov	arg01, local06
05230     68 99 B1 FD | 	call	#__system___string_cmp
05234     00 FA 4D F2 | 	cmps	result1, #0 wz
05238     10 00 90 5D |  if_ne	jmp	#LR__0419
0523c                 | LR__0418
0523c     01 22 06 F1 | 	add	local03, #1
05240     02 22 56 F2 | 	cmps	local03, #2 wc
05244     00 FA 05 36 |  if_ae	mov	result1, #0
05248     0C 00 90 3D |  if_ae	jmp	#LR__0422
0524c                 | LR__0419
0524c     01 30 06 F1 | 	add	local10, #1
05250     60 FE 9F FD | 	jmp	#LR__0414
05254                 | LR__0420
05254                 | LR__0421
05254                 | ' return true
05254     01 FA 65 F6 | 	neg	result1, #1
05258                 | LR__0422
05258     A7 F0 03 F6 | 	mov	ptra, fp
0525c     B2 00 A0 FD | 	call	#popregs_
05260                 | _isnum_ret
05260     2D 00 64 FD | 	ret
05264                 | 
05264                 | '   
05264                 | ' function isint(s as string) as boolean
05264                 | _isint
05264     05 4A 05 F6 | 	mov	COUNT_, #5
05268     A8 00 A0 FD | 	call	#pushregs_
0526c     09 1F 02 F6 | 	mov	local01, arg01
05270     09 21 02 F6 | 	mov	local02, arg01
05274     97 06 48 FB | 	callpa	#(@LR__0431-@LR__0430)>>2,fcache_load_ptr_
05278                 | LR__0430
05278     10 FB C9 FA | 	rdbyte	result1, local02 wz
0527c     01 20 06 51 |  if_ne	add	local02, #1
05280     F4 FF 9F 5D |  if_ne	jmp	#LR__0430
05284                 | LR__0431
05284     09 21 82 F1 | 	sub	local02, arg01
05288     10 FB 01 F6 | 	mov	result1, local02
0528c     FD 20 0A F6 | 	mov	local02, result1 wz
05290     00 FA 05 A6 |  if_e	mov	result1, #0
05294     18 01 90 AD |  if_e	jmp	#LR__0439
05298     0F 13 02 F6 | 	mov	arg01, local01
0529c     01 14 06 F6 | 	mov	arg02, #1
052a0     01 16 06 F6 | 	mov	arg03, #1
052a4     2C BA B1 FD | 	call	#__system__Mid_S
052a8     FD 22 02 F6 | 	mov	local03, result1
052ac                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
052ac     73 01 00 FF 
052b0     6B 14 06 F6 | 	mov	arg02, ##@LR__5076
052b4     11 13 02 F6 | 	mov	arg01, local03
052b8     E0 98 B1 FD | 	call	#__system___string_cmp
052bc     00 FA 55 F2 | 	cmps	result1, #0 wc
052c0     18 00 90 CD |  if_b	jmp	#LR__0432
052c4     73 01 00 FF 
052c8     6D 14 06 F6 | 	mov	arg02, ##@LR__5077
052cc     11 13 02 F6 | 	mov	arg01, local03
052d0     C8 98 B1 FD | 	call	#__system___string_cmp
052d4     01 FA 55 F2 | 	cmps	result1, #1 wc
052d8     4C 00 90 CD |  if_b	jmp	#LR__0433
052dc                 | LR__0432
052dc     73 01 00 FF 
052e0     6F 14 06 F6 | 	mov	arg02, ##@LR__5078
052e4     11 13 02 F6 | 	mov	arg01, local03
052e8     B0 98 B1 FD | 	call	#__system___string_cmp
052ec     00 FA 0D F2 | 	cmp	result1, #0 wz
052f0     34 00 90 AD |  if_e	jmp	#LR__0433
052f4     73 01 00 FF 
052f8     71 14 06 F6 | 	mov	arg02, ##@LR__5079
052fc     11 13 02 F6 | 	mov	arg01, local03
05300     98 98 B1 FD | 	call	#__system___string_cmp
05304     00 FA 0D F2 | 	cmp	result1, #0 wz
05308     1C 00 90 AD |  if_e	jmp	#LR__0433
0530c     73 01 00 FF 
05310     73 14 06 F6 | 	mov	arg02, ##@LR__5080
05314     11 13 02 F6 | 	mov	arg01, local03
05318     80 98 B1 FD | 	call	#__system___string_cmp
0531c     00 FA 0D F2 | 	cmp	result1, #0 wz
05320     00 FA 05 56 |  if_ne	mov	result1, #0
05324     88 00 90 5D |  if_ne	jmp	#LR__0439
05328                 | LR__0433
05328                 | ' 
05328                 | ' if l>1 then 
05328     02 20 56 F2 | 	cmps	local02, #2 wc
0532c     7C 00 90 CD |  if_b	jmp	#LR__0438
05330                 | '   for i=2 to l
05330     02 24 06 F6 | 	mov	local04, #2
05334     10 27 02 F6 | 	mov	local05, local02
05338     01 26 06 F1 | 	add	local05, #1
0533c                 | LR__0434
0533c     13 25 52 F2 | 	cmps	local04, local05 wc
05340     68 00 90 3D |  if_ae	jmp	#LR__0437
05344     0F 13 02 F6 | 	mov	arg01, local01
05348     12 15 02 F6 | 	mov	arg02, local04
0534c     01 16 06 F6 | 	mov	arg03, #1
05350     80 B9 B1 FD | 	call	#__system__Mid_S
05354     FD 22 02 F6 | 	mov	local03, result1
05358                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
05358     73 01 00 FF 
0535c     75 14 06 F6 | 	mov	arg02, ##@LR__5081
05360     11 13 02 F6 | 	mov	arg01, local03
05364     34 98 B1 FD | 	call	#__system___string_cmp
05368     00 FA 55 F2 | 	cmps	result1, #0 wc
0536c     18 00 90 CD |  if_b	jmp	#LR__0435
05370     73 01 00 FF 
05374     77 14 06 F6 | 	mov	arg02, ##@LR__5082
05378     11 13 02 F6 | 	mov	arg01, local03
0537c     1C 98 B1 FD | 	call	#__system___string_cmp
05380     01 FA 55 F2 | 	cmps	result1, #1 wc
05384     1C 00 90 CD |  if_b	jmp	#LR__0436
05388                 | LR__0435
05388     73 01 00 FF 
0538c     79 14 06 F6 | 	mov	arg02, ##@LR__5083
05390     11 13 02 F6 | 	mov	arg01, local03
05394     04 98 B1 FD | 	call	#__system___string_cmp
05398     00 FA 0D F2 | 	cmp	result1, #0 wz
0539c     00 FA 05 56 |  if_ne	mov	result1, #0
053a0     0C 00 90 5D |  if_ne	jmp	#LR__0439
053a4                 | LR__0436
053a4     01 24 06 F1 | 	add	local04, #1
053a8     90 FF 9F FD | 	jmp	#LR__0434
053ac                 | LR__0437
053ac                 | LR__0438
053ac                 | ' return true
053ac     01 FA 65 F6 | 	neg	result1, #1
053b0                 | LR__0439
053b0     A7 F0 03 F6 | 	mov	ptra, fp
053b4     B2 00 A0 FD | 	call	#popregs_
053b8                 | _isint_ret
053b8     2D 00 64 FD | 	ret
053bc                 | 
053bc                 | ' 
053bc                 | ' function isdec(s as string) as boolean
053bc                 | _isdec
053bc     05 4A 05 F6 | 	mov	COUNT_, #5
053c0     A8 00 A0 FD | 	call	#pushregs_
053c4     09 1F 02 F6 | 	mov	local01, arg01
053c8     09 21 02 F6 | 	mov	local02, arg01
053cc     97 06 48 FB | 	callpa	#(@LR__0441-@LR__0440)>>2,fcache_load_ptr_
053d0                 | LR__0440
053d0     10 FB C9 FA | 	rdbyte	result1, local02 wz
053d4     01 20 06 51 |  if_ne	add	local02, #1
053d8     F4 FF 9F 5D |  if_ne	jmp	#LR__0440
053dc                 | LR__0441
053dc     09 21 82 F1 | 	sub	local02, arg01
053e0     10 FB 01 F6 | 	mov	result1, local02
053e4     FD 20 0A F6 | 	mov	local02, result1 wz
053e8     00 FA 05 A6 |  if_e	mov	result1, #0
053ec     80 00 90 AD |  if_e	jmp	#LR__0446
053f0                 | ' for i=1 to l
053f0     01 22 06 F6 | 	mov	local03, #1
053f4     10 25 02 F6 | 	mov	local04, local02
053f8     01 24 06 F1 | 	add	local04, #1
053fc                 | LR__0442
053fc     12 23 52 F2 | 	cmps	local03, local04 wc
05400     68 00 90 3D |  if_ae	jmp	#LR__0445
05404     0F 13 02 F6 | 	mov	arg01, local01
05408     11 15 02 F6 | 	mov	arg02, local03
0540c     01 16 06 F6 | 	mov	arg03, #1
05410     C0 B8 B1 FD | 	call	#__system__Mid_S
05414     FD 26 02 F6 | 	mov	local05, result1
05418                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
05418     73 01 00 FF 
0541c     7B 14 06 F6 | 	mov	arg02, ##@LR__5084
05420     13 13 02 F6 | 	mov	arg01, local05
05424     74 97 B1 FD | 	call	#__system___string_cmp
05428     00 FA 55 F2 | 	cmps	result1, #0 wc
0542c     18 00 90 CD |  if_b	jmp	#LR__0443
05430     73 01 00 FF 
05434     7D 14 06 F6 | 	mov	arg02, ##@LR__5085
05438     13 13 02 F6 | 	mov	arg01, local05
0543c     5C 97 B1 FD | 	call	#__system___string_cmp
05440     01 FA 55 F2 | 	cmps	result1, #1 wc
05444     1C 00 90 CD |  if_b	jmp	#LR__0444
05448                 | LR__0443
05448     73 01 00 FF 
0544c     7F 14 06 F6 | 	mov	arg02, ##@LR__5086
05450     13 13 02 F6 | 	mov	arg01, local05
05454     44 97 B1 FD | 	call	#__system___string_cmp
05458     00 FA 0D F2 | 	cmp	result1, #0 wz
0545c     00 FA 05 56 |  if_ne	mov	result1, #0
05460     0C 00 90 5D |  if_ne	jmp	#LR__0446
05464                 | LR__0444
05464     01 22 06 F1 | 	add	local03, #1
05468     90 FF 9F FD | 	jmp	#LR__0442
0546c                 | LR__0445
0546c                 | ' return true
0546c     01 FA 65 F6 | 	neg	result1, #1
05470                 | LR__0446
05470     A7 F0 03 F6 | 	mov	ptra, fp
05474     B2 00 A0 FD | 	call	#popregs_
05478                 | _isdec_ret
05478     2D 00 64 FD | 	ret
0547c                 | 
0547c                 | ' 
0547c                 | ' function isstring(s as string) as boolean
0547c                 | _isstring
0547c     01 4A 05 F6 | 	mov	COUNT_, #1
05480     A8 00 A0 FD | 	call	#pushregs_
05484                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
05484     09 1F 02 F6 | 	mov	local01, arg01
05488     01 14 06 F6 | 	mov	arg02, #1
0548c     2C B7 B1 FD | 	call	#__system__Left_S
05490     FD 12 02 F6 | 	mov	arg01, result1
05494     73 01 00 FF 
05498     81 14 06 F6 | 	mov	arg02, ##@LR__5087
0549c     FC 96 B1 FD | 	call	#__system___string_cmp
054a0     00 FA 4D F2 | 	cmps	result1, #0 wz
054a4     28 00 90 5D |  if_ne	jmp	#LR__0450
054a8     0F 13 02 F6 | 	mov	arg01, local01
054ac     01 14 06 F6 | 	mov	arg02, #1
054b0     90 B7 B1 FD | 	call	#__system__Right_S
054b4     FD 12 02 F6 | 	mov	arg01, result1
054b8     73 01 00 FF 
054bc     83 14 06 F6 | 	mov	arg02, ##@LR__5088
054c0     D8 96 B1 FD | 	call	#__system___string_cmp
054c4     00 FA 4D F2 | 	cmps	result1, #0 wz
054c8     01 FA 65 A6 |  if_e	neg	result1, #1
054cc     04 00 90 AD |  if_e	jmp	#LR__0451
054d0                 | LR__0450
054d0     00 FA 05 F6 | 	mov	result1, #0
054d4                 | LR__0451
054d4     A7 F0 03 F6 | 	mov	ptra, fp
054d8     B2 00 A0 FD | 	call	#popregs_
054dc                 | _isstring_ret
054dc     2D 00 64 FD | 	ret
054e0                 | 
054e0                 | ' 
054e0                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
054e0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
054e0                 | ' 
054e0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
054e0                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
054e0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
054e0                 | ' 
054e0                 | ' '----- delete a line from a program
054e0                 | ' 
054e0                 | ' function deleteline(aline as ulong) as integer
054e0                 | _deleteline
054e0     03 4A 05 F6 | 	mov	COUNT_, #3
054e4     A8 00 A0 FD | 	call	#pushregs_
054e8     2C F0 07 F1 | 	add	ptra, #44
054ec     04 4E 05 F1 | 	add	fp, #4
054f0     A7 12 62 FC | 	wrlong	arg01, fp
054f4     6A 00 00 FF 
054f8     84 E4 05 F1 | 	add	objptr, ##54404
054fc     F2 1E 02 FB | 	rdlong	local01, objptr
05500     0C 4E 05 F1 | 	add	fp, #12
05504     A7 1E 62 FC | 	wrlong	local01, fp
05508     10 4E 85 F1 | 	sub	fp, #16
0550c                 | ' 
0550c                 | ' 
0550c                 | ' searchptr=programstart
0550c                 | ' 
0550c                 | ' do
0550c     5E 00 00 FF 
05510     B8 E5 85 F1 | 	sub	objptr, ##48568
05514                 | LR__0460
05514     14 4E 05 F1 | 	add	fp, #20
05518     A7 12 02 F6 | 	mov	arg01, fp
0551c     04 4E 85 F1 | 	sub	fp, #4
05520     A7 14 02 FB | 	rdlong	arg02, fp
05524     10 4E 85 F1 | 	sub	fp, #16
05528     18 16 06 F6 | 	mov	arg03, #24
0552c     20 8A B1 FD | 	call	#_psram_spin2_read1
05530     10 4E 05 F1 | 	add	fp, #16
05534     A7 1E 02 FB | 	rdlong	local01, fp
05538     08 4E 85 F1 | 	sub	fp, #8
0553c     A7 1E 62 FC | 	wrlong	local01, fp
05540     20 4E 05 F1 | 	add	fp, #32
05544     A7 1E 02 FB | 	rdlong	local01, fp
05548     18 4E 85 F1 | 	sub	fp, #24
0554c     A7 1E 62 FC | 	wrlong	local01, fp
05550     04 4E 05 F1 | 	add	fp, #4
05554     A7 1E 02 FB | 	rdlong	local01, fp
05558     10 4E 85 F1 | 	sub	fp, #16
0555c     A7 16 02 FB | 	rdlong	arg03, fp
05560     04 4E 85 F1 | 	sub	fp, #4
05564     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05568     28 4E 05 C1 |  if_b	add	fp, #40
0556c     A7 20 02 CB |  if_b	rdlong	local02, fp
05570     28 4E 85 C1 |  if_b	sub	fp, #40
05574     FF FF 3F CF 
05578     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
0557c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0460
05580     0B 00 00 FF 
05584     CC E4 85 F1 | 	sub	objptr, ##5836
05588                 | ' 
05588                 | ' 
05588                 | ' if header(0)<>aline then return -1
05588     14 4E 05 F1 | 	add	fp, #20
0558c     A7 1E 02 FB | 	rdlong	local01, fp
05590     10 4E 85 F1 | 	sub	fp, #16
05594     A7 22 02 FB | 	rdlong	local03, fp
05598     04 4E 85 F1 | 	sub	fp, #4
0559c     11 1F 0A F2 | 	cmp	local01, local03 wz
055a0     01 FA 65 56 |  if_ne	neg	result1, #1
055a4     C8 02 90 5D |  if_ne	jmp	#LR__0466
055a8     08 4E 05 F1 | 	add	fp, #8
055ac     A7 12 02 FB | 	rdlong	arg01, fp
055b0     08 4E 85 F1 | 	sub	fp, #8
055b4     01 14 66 F6 | 	neg	arg02, #1
055b8     A0 52 B1 FD | 	call	#_pslpoke
055bc                 | ' 
055bc                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
055bc                 | ' 
055bc                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  ' this is one and only line in the program
055bc     28 4E 05 F1 | 	add	fp, #40
055c0     A7 1E 02 FB | 	rdlong	local01, fp
055c4     28 4E 85 F1 | 	sub	fp, #40
055c8     FF FF 3F FF 
055cc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
055d0     24 4E 05 A1 |  if_e	add	fp, #36
055d4     A7 22 02 AB |  if_e	rdlong	local03, fp
055d8     24 4E 85 A1 |  if_e	sub	fp, #36
055dc     FF FF 7F AF 
055e0     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
055e4     78 00 90 5D |  if_ne	jmp	#LR__0461
055e8     6A 00 00 FF 
055ec     84 E4 05 F1 | 	add	objptr, ##54404
055f0     F2 00 68 FC | 	wrlong	#0, objptr
055f4     07 00 00 FF 
055f8     28 E4 85 F1 | 	sub	objptr, ##3624
055fc     F2 00 68 FC | 	wrlong	#0, objptr
05600     07 00 00 FF 
05604     2C E4 05 F1 | 	add	objptr, ##3628
05608     F2 00 68 FC | 	wrlong	#0, objptr
0560c     04 E4 05 F1 | 	add	objptr, #4
05610     FF FF FF FF 
05614     F2 FE 6B FC | 	wrlong	##-1, objptr
05618     6A 00 00 FF 
0561c     8C E4 85 F1 | 	sub	objptr, ##54412
05620     00 12 06 F6 | 	mov	arg01, #0
05624     01 14 66 F6 | 	neg	arg02, #1
05628     30 52 B1 FD | 	call	#_pslpoke
0562c     10 12 06 F6 | 	mov	arg01, #16
05630     01 14 66 F6 | 	neg	arg02, #1
05634     24 52 B1 FD | 	call	#_pslpoke
05638     14 12 06 F6 | 	mov	arg01, #20
0563c     1E 14 CE F9 | 	bmask	arg02, #30
05640     18 52 B1 FD | 	call	#_pslpoke
05644     78 00 00 FF 
05648     BC E4 05 F1 | 	add	objptr, ##61628
0564c     F2 00 68 FC | 	wrlong	#0, objptr
05650     04 E4 05 F1 | 	add	objptr, #4
05654     F2 00 68 FC | 	wrlong	#0, objptr
05658     78 00 00 FF 
0565c     C0 E4 85 F1 | 	sub	objptr, ##61632
05660                 | LR__0461
05660                 | ' 
05660                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
05660     28 4E 05 F1 | 	add	fp, #40
05664     A7 1E 02 FB | 	rdlong	local01, fp
05668     28 4E 85 F1 | 	sub	fp, #40
0566c     FF FF 3F FF 
05670     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05674     74 00 90 5D |  if_ne	jmp	#LR__0462
05678     24 4E 05 F1 | 	add	fp, #36
0567c     A7 22 02 FB | 	rdlong	local03, fp
05680     24 4E 85 F1 | 	sub	fp, #36
05684     FF FF 7F FF 
05688     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0568c     5C 00 90 AD |  if_e	jmp	#LR__0462
05690     24 4E 05 F1 | 	add	fp, #36
05694     A7 12 02 FB | 	rdlong	arg01, fp
05698     24 4E 85 F1 | 	sub	fp, #36
0569c     14 12 06 F1 | 	add	arg01, #20
056a0     1E 14 CE F9 | 	bmask	arg02, #30
056a4     B4 51 B1 FD | 	call	#_pslpoke
056a8     24 4E 05 F1 | 	add	fp, #36
056ac     A7 1E 02 FB | 	rdlong	local01, fp
056b0     6A 00 00 FF 
056b4     8C E4 05 F1 | 	add	objptr, ##54412
056b8     F2 1E 62 FC | 	wrlong	local01, objptr
056bc     6A 00 00 FF 
056c0     8C E4 85 F1 | 	sub	objptr, ##54412
056c4     A7 12 02 FB | 	rdlong	arg01, fp
056c8     24 4E 85 F1 | 	sub	fp, #36
056cc     BC 52 B1 FD | 	call	#_pslpeek
056d0     6A 00 00 FF 
056d4     88 E4 05 F1 | 	add	objptr, ##54408
056d8     F2 FA 61 FC | 	wrlong	result1, objptr
056dc     6A 00 00 FF 
056e0     88 E4 85 F1 | 	sub	objptr, ##54408
056e4                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
056e4                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
056e4                 | '   lastline=pslpeek(header(4))
056e4                 | '   return 0
056e4     00 FA 05 F6 | 	mov	result1, #0
056e8     84 01 90 FD | 	jmp	#LR__0466
056ec                 | LR__0462
056ec                 | ' 
056ec                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
056ec     28 4E 05 F1 | 	add	fp, #40
056f0     A7 1E 02 FB | 	rdlong	local01, fp
056f4     28 4E 85 F1 | 	sub	fp, #40
056f8     FF FF 3F FF 
056fc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05700     58 00 90 AD |  if_e	jmp	#LR__0463
05704     24 4E 05 F1 | 	add	fp, #36
05708     A7 22 02 FB | 	rdlong	local03, fp
0570c     24 4E 85 F1 | 	sub	fp, #36
05710     FF FF 7F FF 
05714     FF 23 0E F2 | 	cmp	local03, ##-1 wz
05718     40 00 90 5D |  if_ne	jmp	#LR__0463
0571c     28 4E 05 F1 | 	add	fp, #40
05720     A7 12 02 FB | 	rdlong	arg01, fp
05724     28 4E 85 F1 | 	sub	fp, #40
05728     10 12 06 F1 | 	add	arg01, #16
0572c     01 14 66 F6 | 	neg	arg02, #1
05730     28 51 B1 FD | 	call	#_pslpoke
05734     28 4E 05 F1 | 	add	fp, #40
05738     A7 1E 02 FB | 	rdlong	local01, fp
0573c     28 4E 85 F1 | 	sub	fp, #40
05740     6A 00 00 FF 
05744     84 E4 05 F1 | 	add	objptr, ##54404
05748     F2 1E 62 FC | 	wrlong	local01, objptr
0574c     6A 00 00 FF 
05750     84 E4 85 F1 | 	sub	objptr, ##54404
05754                 | ' '   print "deleted first line"
05754                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
05754                 | '   programstart=header(5) ' adjust the program start to point on the first new line
05754                 | '   return 0
05754     00 FA 05 F6 | 	mov	result1, #0
05758     14 01 90 FD | 	jmp	#LR__0466
0575c                 | LR__0463
0575c                 | ' 
0575c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
0575c     28 4E 05 F1 | 	add	fp, #40
05760     A7 1E 02 FB | 	rdlong	local01, fp
05764     28 4E 85 F1 | 	sub	fp, #40
05768     FF FF 3F FF 
0576c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05770     24 4E 05 51 |  if_ne	add	fp, #36
05774     A7 22 02 5B |  if_ne	rdlong	local03, fp
05778     24 4E 85 51 |  if_ne	sub	fp, #36
0577c     FF FF 7F 5F 
05780     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
05784     40 00 90 AD |  if_e	jmp	#LR__0464
05788     28 4E 05 F1 | 	add	fp, #40
0578c     A7 12 02 FB | 	rdlong	arg01, fp
05790     10 12 06 F1 | 	add	arg01, #16
05794     04 4E 85 F1 | 	sub	fp, #4
05798     A7 14 02 FB | 	rdlong	arg02, fp
0579c     24 4E 85 F1 | 	sub	fp, #36
057a0     B8 50 B1 FD | 	call	#_pslpoke
057a4     24 4E 05 F1 | 	add	fp, #36
057a8     A7 12 02 FB | 	rdlong	arg01, fp
057ac     14 12 06 F1 | 	add	arg01, #20
057b0     04 4E 05 F1 | 	add	fp, #4
057b4     A7 14 02 FB | 	rdlong	arg02, fp
057b8     28 4E 85 F1 | 	sub	fp, #40
057bc     9C 50 B1 FD | 	call	#_pslpoke
057c0                 | '    pslpoke(header(5)+16,header(4))  
057c0                 | '    pslpoke(header(4)+20, header(5))
057c0                 | '    return 0
057c0     00 FA 05 F6 | 	mov	result1, #0
057c4     A8 00 90 FD | 	jmp	#LR__0466
057c8                 | LR__0464
057c8     10 4E 05 F1 | 	add	fp, #16
057cc     A7 1E 02 FB | 	rdlong	local01, fp
057d0     08 4E 85 F1 | 	sub	fp, #8
057d4     A7 1E 62 FC | 	wrlong	local01, fp
057d8     6A 00 00 FF 
057dc     84 E4 05 F1 | 	add	objptr, ##54404
057e0     F2 1E 02 FB | 	rdlong	local01, objptr
057e4     08 4E 05 F1 | 	add	fp, #8
057e8     A7 1E 62 FC | 	wrlong	local01, fp
057ec     10 4E 85 F1 | 	sub	fp, #16
057f0                 | ' 
057f0                 | ' 
057f0                 | ' 
057f0                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
057f0                 | ' 
057f0                 | ' lineptr2=searchptr
057f0                 | ' searchptr=programstart
057f0                 | ' 
057f0                 | ' do
057f0     5E 00 00 FF 
057f4     B8 E5 85 F1 | 	sub	objptr, ##48568
057f8                 | LR__0465
057f8     14 4E 05 F1 | 	add	fp, #20
057fc     A7 12 02 F6 | 	mov	arg01, fp
05800     04 4E 85 F1 | 	sub	fp, #4
05804     A7 14 02 FB | 	rdlong	arg02, fp
05808     10 4E 85 F1 | 	sub	fp, #16
0580c     18 16 06 F6 | 	mov	arg03, #24
05810     3C 87 B1 FD | 	call	#_psram_spin2_read1
05814     10 4E 05 F1 | 	add	fp, #16
05818     A7 1E 02 FB | 	rdlong	local01, fp
0581c     08 4E 85 F1 | 	sub	fp, #8
05820     A7 1E 62 FC | 	wrlong	local01, fp
05824     20 4E 05 F1 | 	add	fp, #32
05828     A7 1E 02 FB | 	rdlong	local01, fp
0582c     18 4E 85 F1 | 	sub	fp, #24
05830     A7 1E 62 FC | 	wrlong	local01, fp
05834     04 4E 05 F1 | 	add	fp, #4
05838     A7 1E 02 FB | 	rdlong	local01, fp
0583c     10 4E 85 F1 | 	sub	fp, #16
05840     A7 22 02 FB | 	rdlong	local03, fp
05844     04 4E 85 F1 | 	sub	fp, #4
05848     11 1F 12 F2 | 	cmp	local01, local03 wc
0584c     28 4E 05 C1 |  if_b	add	fp, #40
05850     A7 20 02 CB |  if_b	rdlong	local02, fp
05854     28 4E 85 C1 |  if_b	sub	fp, #40
05858     FF FF 3F CF 
0585c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05860     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0465
05864     0B 00 00 FF 
05868     CC E4 85 F1 | 	sub	objptr, ##5836
0586c     00 FA 05 F6 | 	mov	result1, #0
05870                 | LR__0466
05870     A7 F0 03 F6 | 	mov	ptra, fp
05874     B2 00 A0 FD | 	call	#popregs_
05878                 | _deleteline_ret
05878     2D 00 64 FD | 	ret
0587c                 | 
0587c                 | ' 
0587c                 | ' sub save_line
0587c                 | _save_line
0587c     03 4A 05 F6 | 	mov	COUNT_, #3
05880     A8 00 A0 FD | 	call	#pushregs_
05884     6A 00 00 FF 
05888     7C E4 05 F1 | 	add	objptr, ##54396
0588c     F2 16 02 FB | 	rdlong	arg03, objptr
05890     01 16 06 F1 | 	add	arg03, #1
05894     05 00 00 FF 
05898     18 E4 85 F1 | 	sub	objptr, ##2584
0589c     F2 14 02 FB | 	rdlong	arg02, objptr
058a0     0B 15 02 FD | 	qmul	arg02, arg03
058a4     0E 00 00 FF 
058a8     44 E4 85 F1 | 	sub	objptr, ##7236
058ac     F2 12 02 FB | 	rdlong	arg01, objptr
058b0     57 00 00 FF 
058b4     20 E4 85 F1 | 	sub	objptr, ##44576
058b8     09 1F 02 F6 | 	mov	local01, arg01
058bc     18 20 62 FD | 	getqx	local02
058c0     97 06 48 FB | 	callpa	#(@LR__0471-@LR__0470)>>2,fcache_load_ptr_
058c4                 | LR__0470
058c4     0F FB C9 FA | 	rdbyte	result1, local01 wz
058c8     01 1E 06 51 |  if_ne	add	local01, #1
058cc     F4 FF 9F 5D |  if_ne	jmp	#LR__0470
058d0                 | LR__0471
058d0     09 1F 82 F1 | 	sub	local01, arg01
058d4     03 1E CE F7 | 	test	local01, #3 wz
058d8     02 1E 46 50 |  if_ne	shr	local01, #2
058dc     01 1E 06 51 |  if_ne	add	local01, #1
058e0     02 1E 66 50 |  if_ne	shl	local01, #2
058e4     10 23 02 F6 | 	mov	local03, local02
058e8     0F 23 02 F1 | 	add	local03, local01
058ec     63 00 00 FF 
058f0     5C E4 05 F1 | 	add	objptr, ##50780
058f4     F2 16 02 FB | 	rdlong	arg03, objptr
058f8     10 17 02 F1 | 	add	arg03, local02
058fc     04 00 00 FF 
05900     28 E4 05 F1 | 	add	objptr, ##2088
05904     F2 16 62 FC | 	wrlong	arg03, objptr
05908     04 E4 05 F1 | 	add	objptr, #4
0590c     F2 1E 62 FC | 	wrlong	local01, objptr
05910     0C E4 85 F1 | 	sub	objptr, #12
05914     F2 12 02 F6 | 	mov	arg01, objptr
05918     04 00 00 FF 
0591c     20 E4 85 F1 | 	sub	objptr, ##2080
05920     F2 14 02 FB | 	rdlong	arg02, objptr
05924     10 17 02 F6 | 	mov	arg03, local02
05928     57 00 00 FF 
0592c     90 E5 85 F1 | 	sub	objptr, ##44944
05930     B8 86 B1 FD | 	call	#_psram_spin2_write
05934     4B 00 00 FF 
05938     54 E5 05 F1 | 	add	objptr, ##38740
0593c     F2 12 02 FB | 	rdlong	arg01, objptr
05940     0C 00 00 FF 
05944     3C E4 05 F1 | 	add	objptr, ##6204
05948     F2 14 02 FB | 	rdlong	arg02, objptr
0594c     10 15 02 F1 | 	add	arg02, local02
05950     0F 17 02 F6 | 	mov	arg03, local01
05954     57 00 00 FF 
05958     90 E5 85 F1 | 	sub	objptr, ##44944
0595c     8C 86 B1 FD | 	call	#_psram_spin2_write
05960     57 00 00 FF 
05964     90 E5 05 F1 | 	add	objptr, ##44944
05968     F2 1E 02 FB | 	rdlong	local01, objptr
0596c     11 1F 02 F1 | 	add	local01, local03
05970     F2 1E 62 FC | 	wrlong	local01, objptr
05974     63 00 00 FF 
05978     5C E4 85 F1 | 	sub	objptr, ##50780
0597c     A7 F0 03 F6 | 	mov	ptra, fp
05980     B2 00 A0 FD | 	call	#popregs_
05984                 | _save_line_ret
05984     2D 00 64 FD | 	ret
05988                 | 
05988                 | ' 
05988                 | ' 
05988                 | ' function insertline(aline as ulong) as integer
05988                 | _insertline
05988     02 4A 05 F6 | 	mov	COUNT_, #2
0598c     A8 00 A0 FD | 	call	#pushregs_
05990     28 F0 07 F1 | 	add	ptra, #40
05994     04 4E 05 F1 | 	add	fp, #4
05998     A7 12 62 FC | 	wrlong	arg01, fp
0599c     6A 00 00 FF 
059a0     84 E4 05 F1 | 	add	objptr, ##54404
059a4     F2 1E 02 FB | 	rdlong	local01, objptr
059a8     04 4E 05 F1 | 	add	fp, #4
059ac     A7 1E 62 FC | 	wrlong	local01, fp
059b0     08 4E 85 F1 | 	sub	fp, #8
059b4                 | ' 
059b4                 | ' do
059b4     5E 00 00 FF 
059b8     B8 E5 85 F1 | 	sub	objptr, ##48568
059bc                 | LR__0480
059bc     10 4E 05 F1 | 	add	fp, #16
059c0     A7 12 02 F6 | 	mov	arg01, fp
059c4     08 4E 85 F1 | 	sub	fp, #8
059c8     A7 14 02 FB | 	rdlong	arg02, fp
059cc     08 4E 85 F1 | 	sub	fp, #8
059d0     18 16 06 F6 | 	mov	arg03, #24
059d4     78 85 B1 FD | 	call	#_psram_spin2_read1
059d8     08 4E 05 F1 | 	add	fp, #8
059dc     A7 1E 02 FB | 	rdlong	local01, fp
059e0     04 4E 05 F1 | 	add	fp, #4
059e4     A7 1E 62 FC | 	wrlong	local01, fp
059e8     18 4E 05 F1 | 	add	fp, #24
059ec     A7 1E 02 FB | 	rdlong	local01, fp
059f0     1C 4E 85 F1 | 	sub	fp, #28
059f4     A7 1E 62 FC | 	wrlong	local01, fp
059f8     08 4E 05 F1 | 	add	fp, #8
059fc     A7 1E 02 FB | 	rdlong	local01, fp
05a00     0C 4E 85 F1 | 	sub	fp, #12
05a04     A7 16 02 FB | 	rdlong	arg03, fp
05a08     04 4E 85 F1 | 	sub	fp, #4
05a0c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05a10     24 4E 05 C1 |  if_b	add	fp, #36
05a14     A7 20 02 CB |  if_b	rdlong	local02, fp
05a18     24 4E 85 C1 |  if_b	sub	fp, #36
05a1c     FF FF 3F CF 
05a20     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05a24     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0480
05a28     0B 00 00 FF 
05a2c     CC E4 85 F1 | 	sub	objptr, ##5836
05a30                 | ' 
05a30                 | ' if header(0)=aline then return -1 ' delete it first
05a30     10 4E 05 F1 | 	add	fp, #16
05a34     A7 1E 02 FB | 	rdlong	local01, fp
05a38     0C 4E 85 F1 | 	sub	fp, #12
05a3c     A7 20 02 FB | 	rdlong	local02, fp
05a40     04 4E 85 F1 | 	sub	fp, #4
05a44     10 1F 0A F2 | 	cmp	local01, local02 wz
05a48     01 FA 65 A6 |  if_e	neg	result1, #1
05a4c     48 01 90 AD |  if_e	jmp	#LR__0483
05a50                 | ' if header(0)<aline then return -2 ' end of program reached
05a50     10 4E 05 F1 | 	add	fp, #16
05a54     A7 1E 02 FB | 	rdlong	local01, fp
05a58     0C 4E 85 F1 | 	sub	fp, #12
05a5c     A7 16 02 FB | 	rdlong	arg03, fp
05a60     04 4E 85 F1 | 	sub	fp, #4
05a64     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05a68     02 FA 65 C6 |  if_b	neg	result1, #2
05a6c     28 01 90 CD |  if_b	jmp	#LR__0483
05a70                 | ' 
05a70                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
05a70     20 4E 05 F1 | 	add	fp, #32
05a74     A7 1E 02 FB | 	rdlong	local01, fp
05a78     20 4E 85 F1 | 	sub	fp, #32
05a7c     FF FF 7F FF 
05a80     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
05a84     78 00 90 5D |  if_ne	jmp	#LR__0481
05a88     63 00 00 FF 
05a8c     5C E4 05 F1 | 	add	objptr, ##50780
05a90     F2 1E 02 FB | 	rdlong	local01, objptr
05a94     07 00 00 FF 
05a98     28 E4 05 F1 | 	add	objptr, ##3624
05a9c     F2 1E 62 FC | 	wrlong	local01, objptr
05aa0     0C 4E 05 F1 | 	add	fp, #12
05aa4     A7 12 02 FB | 	rdlong	arg01, fp
05aa8     0C 4E 85 F1 | 	sub	fp, #12
05aac     10 12 06 F1 | 	add	arg01, #16
05ab0     07 00 00 FF 
05ab4     28 E4 85 F1 | 	sub	objptr, ##3624
05ab8     F2 14 02 FB | 	rdlong	arg02, objptr
05abc     63 00 00 FF 
05ac0     5C E4 85 F1 | 	sub	objptr, ##50780
05ac4     94 4D B1 FD | 	call	#_pslpoke
05ac8     67 00 00 FF 
05acc     8C E4 05 F1 | 	add	objptr, ##52876
05ad0     FF FF FF FF 
05ad4     F2 FE 6B FC | 	wrlong	##-1, objptr
05ad8     0C 4E 05 F1 | 	add	fp, #12
05adc     A7 1E 02 FB | 	rdlong	local01, fp
05ae0     0C 4E 85 F1 | 	sub	fp, #12
05ae4     04 E4 05 F1 | 	add	objptr, #4
05ae8     F2 1E 62 FC | 	wrlong	local01, objptr
05aec     67 00 00 FF 
05af0     90 E4 85 F1 | 	sub	objptr, ##52880
05af4     84 FD BF FD | 	call	#_save_line
05af8                 | '   programstart=programptr
05af8                 | '   pslpoke(lineptr2+16,programptr)
05af8                 | '   ucompiledline(4)=$FFFF_FFFF
05af8                 | '   ucompiledline(5)=lineptr2
05af8                 | '   save_line
05af8                 | '   return 0
05af8     00 FA 05 F6 | 	mov	result1, #0
05afc     98 00 90 FD | 	jmp	#LR__0483
05b00                 | LR__0481
05b00                 | ' 
05b00                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
05b00     20 4E 05 F1 | 	add	fp, #32
05b04     A7 1E 02 FB | 	rdlong	local01, fp
05b08     20 4E 85 F1 | 	sub	fp, #32
05b0c     FF FF 7F FF 
05b10     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
05b14     7C 00 90 AD |  if_e	jmp	#LR__0482
05b18     20 4E 05 F1 | 	add	fp, #32
05b1c     A7 1E 02 FB | 	rdlong	local01, fp
05b20     67 00 00 FF 
05b24     8C E4 05 F1 | 	add	objptr, ##52876
05b28     F2 1E 62 FC | 	wrlong	local01, objptr
05b2c     14 4E 85 F1 | 	sub	fp, #20
05b30     A7 1E 02 FB | 	rdlong	local01, fp
05b34     04 E4 05 F1 | 	add	objptr, #4
05b38     F2 1E 62 FC | 	wrlong	local01, objptr
05b3c     A7 12 02 FB | 	rdlong	arg01, fp
05b40     0C 4E 85 F1 | 	sub	fp, #12
05b44     10 12 06 F1 | 	add	arg01, #16
05b48     04 00 00 FF 
05b4c     34 E4 85 F1 | 	sub	objptr, ##2100
05b50     F2 14 02 FB | 	rdlong	arg02, objptr
05b54     63 00 00 FF 
05b58     5C E4 85 F1 | 	sub	objptr, ##50780
05b5c     FC 4C B1 FD | 	call	#_pslpoke
05b60     20 4E 05 F1 | 	add	fp, #32
05b64     A7 12 02 FB | 	rdlong	arg01, fp
05b68     20 4E 85 F1 | 	sub	fp, #32
05b6c     14 12 06 F1 | 	add	arg01, #20
05b70     63 00 00 FF 
05b74     5C E4 05 F1 | 	add	objptr, ##50780
05b78     F2 14 02 FB | 	rdlong	arg02, objptr
05b7c     63 00 00 FF 
05b80     5C E4 85 F1 | 	sub	objptr, ##50780
05b84     D4 4C B1 FD | 	call	#_pslpoke
05b88     F0 FC BF FD | 	call	#_save_line
05b8c                 | '   ucompiledline(4)=header(4)
05b8c                 | '   ucompiledline(5)=lineptr2
05b8c                 | '   pslpoke(lineptr2+16,programptr)
05b8c                 | '   pslpoke(header(4)+20,programptr)
05b8c                 | '   save_line
05b8c                 | '   return 0
05b8c     00 FA 05 F6 | 	mov	result1, #0
05b90     04 00 90 FD | 	jmp	#LR__0483
05b94                 | LR__0482
05b94     00 FA 05 F6 | 	mov	result1, #0
05b98                 | LR__0483
05b98     A7 F0 03 F6 | 	mov	ptra, fp
05b9c     B2 00 A0 FD | 	call	#popregs_
05ba0                 | _insertline_ret
05ba0     2D 00 64 FD | 	ret
05ba4                 | 
05ba4                 | ' 
05ba4                 | ' sub add_line_at_end(aline) 
05ba4                 | _add_line_at_end
05ba4     6A 00 00 FF 
05ba8     88 E4 05 F1 | 	add	objptr, ##54408
05bac     F2 12 62 FC | 	wrlong	arg01, objptr
05bb0     04 E4 05 F1 | 	add	objptr, #4
05bb4     F2 14 02 FB | 	rdlong	arg02, objptr
05bb8     03 00 00 FF 
05bbc     00 E4 85 F1 | 	sub	objptr, ##1536
05bc0     F2 14 62 FC | 	wrlong	arg02, objptr
05bc4     03 00 00 FF 
05bc8     00 E4 05 F1 | 	add	objptr, ##1536
05bcc     F2 12 02 FB | 	rdlong	arg01, objptr
05bd0     14 12 06 F1 | 	add	arg01, #20
05bd4     07 00 00 FF 
05bd8     30 E4 85 F1 | 	sub	objptr, ##3632
05bdc     F2 14 02 FB | 	rdlong	arg02, objptr
05be0     63 00 00 FF 
05be4     5C E4 85 F1 | 	sub	objptr, ##50780
05be8     70 4C B1 FD | 	call	#_pslpoke
05bec     63 00 00 FF 
05bf0     5C E4 05 F1 | 	add	objptr, ##50780
05bf4     F2 14 02 FB | 	rdlong	arg02, objptr
05bf8     07 00 00 FF 
05bfc     30 E4 05 F1 | 	add	objptr, ##3632
05c00     F2 14 62 FC | 	wrlong	arg02, objptr
05c04     02 00 00 FF 
05c08     FC E5 85 F1 | 	sub	objptr, ##1532
05c0c     FF FF BF FF 
05c10     F2 FE 6B FC | 	wrlong	##2147483647, objptr
05c14                 | ' 
05c14                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
05c14                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
05c14     04 00 00 FF 
05c18     34 E4 85 F1 | 	sub	objptr, ##2100
05c1c     F2 14 0A FB | 	rdlong	arg02, objptr wz
05c20     63 00 00 FF 
05c24     5C E4 85 F1 | 	sub	objptr, ##50780
05c28     67 00 00 AF 
05c2c     8C E4 05 A1 |  if_e	add	objptr, ##52876
05c30     FF FF FF AF 
05c34     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
05c38     67 00 00 AF 
05c3c     8C E4 85 A1 |  if_e	sub	objptr, ##52876
05c40     38 FC BF FD | 	call	#_save_line
05c44     63 00 00 FF 
05c48     5C E4 05 F1 | 	add	objptr, ##50780
05c4c     F2 12 02 FB | 	rdlong	arg01, objptr
05c50     63 00 00 FF 
05c54     5C E4 85 F1 | 	sub	objptr, ##50780
05c58     01 14 66 F6 | 	neg	arg02, #1
05c5c     FC 4B B1 FD | 	call	#_pslpoke
05c60                 | _add_line_at_end_ret
05c60     2D 00 64 FD | 	ret
05c64                 | 
05c64                 | ' 
05c64                 | ' function compile_immediate(linetype as ulong) as integer
05c64                 | _compile_immediate
05c64     09 4A 05 F6 | 	mov	COUNT_, #9
05c68     A8 00 A0 FD | 	call	#pushregs_
05c6c                 | _compile_immediate_enter
05c6c     09 25 0A F6 | 	mov	local04, arg01 wz
05c70     00 26 06 F6 | 	mov	local05, #0
05c74     00 28 06 F6 | 	mov	local06, #0
05c78                 | ' 
05c78                 | ' ' linetype=cont+1, linetype=0 immediate
05c78                 | ' '  : 1: this is the first part of the line that will continue
05c78                 | ' ' 2 - this is the continuation of the line
05c78                 | ' ' 3 - this is the last continued line
05c78                 | ' ' 4 - this is the one and only part
05c78                 | ' 
05c78                 | ' err=0
05c78                 | ' cmd=0
05c78                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
05c78     30 00 90 5D |  if_ne	jmp	#LR__0490
05c7c     55 00 00 FF 
05c80     10 E4 05 F1 | 	add	objptr, ##43536
05c84     F2 28 02 FB | 	rdlong	local06, objptr
05c88     02 00 00 FF 
05c8c     34 E4 05 F1 | 	add	objptr, ##1076
05c90     F2 02 68 FC | 	wrlong	#1, objptr
05c94     00 2A 06 F6 | 	mov	local07, #0
05c98     13 00 00 FF 
05c9c     38 E4 05 F1 | 	add	objptr, ##9784
05ca0     F2 00 68 FC | 	wrlong	#0, objptr
05ca4     6A 00 00 FF 
05ca8     7C E4 85 F1 | 	sub	objptr, ##54396
05cac                 | LR__0490
05cac                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
05cac     02 24 0E F2 | 	cmp	local04, #2 wz
05cb0     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05cb4     24 00 90 5D |  if_ne	jmp	#LR__0491
05cb8     55 00 00 FF 
05cbc     10 E4 05 F1 | 	add	objptr, ##43536
05cc0     F2 28 02 FB | 	rdlong	local06, objptr
05cc4     01 2A 06 F6 | 	mov	local07, #1
05cc8     02 00 00 FF 
05ccc     34 E4 05 F1 | 	add	objptr, ##1076
05cd0     F2 02 68 FC | 	wrlong	#1, objptr
05cd4     57 00 00 FF 
05cd8     44 E4 85 F1 | 	sub	objptr, ##44612
05cdc                 | LR__0491
05cdc                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
05cdc     04 24 0E F2 | 	cmp	local04, #4 wz
05ce0     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
05ce4     30 00 90 5D |  if_ne	jmp	#LR__0492
05ce8     55 00 00 FF 
05cec     18 E4 05 F1 | 	add	objptr, ##43544
05cf0     F2 28 02 FB | 	rdlong	local06, objptr
05cf4     02 2A 06 F6 | 	mov	local07, #2
05cf8     02 00 00 FF 
05cfc     2C E4 05 F1 | 	add	objptr, ##1068
05d00     F2 04 68 FC | 	wrlong	#2, objptr
05d04     13 00 00 FF 
05d08     38 E4 05 F1 | 	add	objptr, ##9784
05d0c     F2 04 68 FC | 	wrlong	#2, objptr
05d10     6A 00 00 FF 
05d14     7C E4 85 F1 | 	sub	objptr, ##54396
05d18                 | LR__0492
05d18                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
05d18     05 24 0E F2 | 	cmp	local04, #5 wz
05d1c     44 00 90 5D |  if_ne	jmp	#LR__0493
05d20     57 00 00 FF 
05d24     44 E4 05 F1 | 	add	objptr, ##44612
05d28     F2 FA 01 FB | 	rdlong	result1, objptr
05d2c     FD 2A 02 F6 | 	mov	local07, result1
05d30     03 2A 66 F0 | 	shl	local07, #3
05d34     02 00 00 FF 
05d38     38 E4 85 F1 | 	sub	objptr, ##1080
05d3c     F2 2A 02 F1 | 	add	local07, objptr
05d40     04 2A 06 F1 | 	add	local07, #4
05d44     15 29 02 FB | 	rdlong	local06, local07
05d48     FD 2A 02 F6 | 	mov	local07, result1
05d4c     01 2A 06 F1 | 	add	local07, #1
05d50     02 00 00 FF 
05d54     38 E4 05 F1 | 	add	objptr, ##1080
05d58     F2 2A 62 FC | 	wrlong	local07, objptr
05d5c     57 00 00 FF 
05d60     44 E4 85 F1 | 	sub	objptr, ##44612
05d64                 | LR__0493
05d64     00 2C 06 F6 | 	mov	local08, #0
05d68                 | ' vars=0
05d68                 | ' 'print  "In compile_immediate cmd=:", cmd
05d68                 | ' 451 select case cmd
05d68     5C 28 0E F2 | 	cmp	local06, #92 wz
05d6c     28 02 90 AD |  if_e	jmp	#LR__0494
05d70     47 28 0E F2 | 	cmp	local06, #71 wz
05d74     2C 02 90 AD |  if_e	jmp	#LR__0495
05d78     59 28 0E F2 | 	cmp	local06, #89 wz
05d7c     30 02 90 AD |  if_e	jmp	#LR__0496
05d80     45 28 0E F2 | 	cmp	local06, #69 wz
05d84     34 02 90 AD |  if_e	jmp	#LR__0497
05d88     69 28 0E F2 | 	cmp	local06, #105 wz
05d8c     38 02 90 AD |  if_e	jmp	#LR__0498
05d90     40 28 0E F2 | 	cmp	local06, #64 wz
05d94     B8 04 90 AD |  if_e	jmp	#LR__0555
05d98     49 28 0E F2 | 	cmp	local06, #73 wz
05d9c     34 02 90 AD |  if_e	jmp	#LR__0499
05da0     50 28 0E F2 | 	cmp	local06, #80 wz
05da4     38 02 90 AD |  if_e	jmp	#LR__0500
05da8     68 28 0E F2 | 	cmp	local06, #104 wz
05dac     3C 02 90 AD |  if_e	jmp	#LR__0501
05db0     74 28 0E F2 | 	cmp	local06, #116 wz
05db4     40 02 90 AD |  if_e	jmp	#LR__0502
05db8     73 28 0E F2 | 	cmp	local06, #115 wz
05dbc     44 02 90 AD |  if_e	jmp	#LR__0503
05dc0     6C 28 0E F2 | 	cmp	local06, #108 wz
05dc4     48 02 90 AD |  if_e	jmp	#LR__0504
05dc8     89 28 0E F2 | 	cmp	local06, #137 wz
05dcc     80 04 90 AD |  if_e	jmp	#LR__0555
05dd0     72 28 0E F2 | 	cmp	local06, #114 wz
05dd4     44 02 90 AD |  if_e	jmp	#LR__0505
05dd8     5D 28 0E F2 | 	cmp	local06, #93 wz
05ddc     70 04 90 AD |  if_e	jmp	#LR__0555
05de0     96 28 0E F2 | 	cmp	local06, #150 wz
05de4     3C 02 90 AD |  if_e	jmp	#LR__0506
05de8     43 28 0E F2 | 	cmp	local06, #67 wz
05dec     3C 02 90 AD |  if_e	jmp	#LR__0507
05df0     5A 28 0E F2 | 	cmp	local06, #90 wz
05df4     40 02 90 AD |  if_e	jmp	#LR__0508
05df8     AB 28 0E F2 | 	cmp	local06, #171 wz
05dfc     50 04 90 AD |  if_e	jmp	#LR__0555
05e00     4E 28 0E F2 | 	cmp	local06, #78 wz
05e04     38 02 90 AD |  if_e	jmp	#LR__0509
05e08     A9 28 0E F2 | 	cmp	local06, #169 wz
05e0c     4C 02 90 AD |  if_e	jmp	#LR__0511
05e10     46 28 0E F2 | 	cmp	local06, #70 wz
05e14     4C 02 90 AD |  if_e	jmp	#LR__0512
05e18     71 28 0E F2 | 	cmp	local06, #113 wz
05e1c     50 02 90 AD |  if_e	jmp	#LR__0513
05e20     60 28 0E F2 | 	cmp	local06, #96 wz
05e24     54 02 90 AD |  if_e	jmp	#LR__0514
05e28     4A 28 0E F2 | 	cmp	local06, #74 wz
05e2c     58 02 90 AD |  if_e	jmp	#LR__0515
05e30     48 28 0E F2 | 	cmp	local06, #72 wz
05e34     58 02 90 AD |  if_e	jmp	#LR__0516
05e38     58 28 0E F2 | 	cmp	local06, #88 wz
05e3c     5C 02 90 AD |  if_e	jmp	#LR__0517
05e40     5F 28 0E F2 | 	cmp	local06, #95 wz
05e44     5C 02 90 AD |  if_e	jmp	#LR__0518
05e48     8A 28 0E F2 | 	cmp	local06, #138 wz
05e4c     60 02 90 AD |  if_e	jmp	#LR__0519
05e50     4C 28 0E F2 | 	cmp	local06, #76 wz
05e54     64 02 90 AD |  if_e	jmp	#LR__0520
05e58     52 28 0E F2 | 	cmp	local06, #82 wz
05e5c     68 02 90 AD |  if_e	jmp	#LR__0521
05e60     97 28 0E F2 | 	cmp	local06, #151 wz
05e64     6C 02 90 AD |  if_e	jmp	#LR__0522
05e68     61 28 0E F2 | 	cmp	local06, #97 wz
05e6c     70 02 90 AD |  if_e	jmp	#LR__0523
05e70     63 28 0E F2 | 	cmp	local06, #99 wz
05e74     74 02 90 AD |  if_e	jmp	#LR__0524
05e78     41 28 0E F2 | 	cmp	local06, #65 wz
05e7c     D0 03 90 AD |  if_e	jmp	#LR__0555
05e80     4B 28 0E F2 | 	cmp	local06, #75 wz
05e84     70 02 90 AD |  if_e	jmp	#LR__0525
05e88     5E 28 0E F2 | 	cmp	local06, #94 wz
05e8c     70 02 90 AD |  if_e	jmp	#LR__0526
05e90     7C 28 0E F2 | 	cmp	local06, #124 wz
05e94     74 02 90 AD |  if_e	jmp	#LR__0527
05e98     7D 28 0E F2 | 	cmp	local06, #125 wz
05e9c     78 02 90 AD |  if_e	jmp	#LR__0528
05ea0     7E 28 0E F2 | 	cmp	local06, #126 wz
05ea4     7C 02 90 AD |  if_e	jmp	#LR__0529
05ea8     7F 28 0E F2 | 	cmp	local06, #127 wz
05eac     80 02 90 AD |  if_e	jmp	#LR__0530
05eb0     80 28 0E F2 | 	cmp	local06, #128 wz
05eb4     84 02 90 AD |  if_e	jmp	#LR__0531
05eb8     55 28 0E F2 | 	cmp	local06, #85 wz
05ebc     88 02 90 AD |  if_e	jmp	#LR__0532
05ec0     75 28 0E F2 | 	cmp	local06, #117 wz
05ec4     8C 02 90 AD |  if_e	jmp	#LR__0533
05ec8     42 28 0E F2 | 	cmp	local06, #66 wz
05ecc     90 02 90 AD |  if_e	jmp	#LR__0534
05ed0     95 28 0E F2 | 	cmp	local06, #149 wz
05ed4     94 02 90 AD |  if_e	jmp	#LR__0535
05ed8     AC 28 0E F2 | 	cmp	local06, #172 wz
05edc     70 03 90 AD |  if_e	jmp	#LR__0555
05ee0     81 28 0E F2 | 	cmp	local06, #129 wz
05ee4     90 02 90 AD |  if_e	jmp	#LR__0536
05ee8     44 28 0E F2 | 	cmp	local06, #68 wz
05eec     94 02 90 AD |  if_e	jmp	#LR__0537
05ef0     88 28 0E F2 | 	cmp	local06, #136 wz
05ef4     58 03 90 AD |  if_e	jmp	#LR__0555
05ef8     92 28 0E F2 | 	cmp	local06, #146 wz
05efc     90 02 90 AD |  if_e	jmp	#LR__0538
05f00     AA 28 0E F2 | 	cmp	local06, #170 wz
05f04     48 03 90 AD |  if_e	jmp	#LR__0555
05f08     4D 28 0E F2 | 	cmp	local06, #77 wz
05f0c     88 02 90 AD |  if_e	jmp	#LR__0539
05f10     51 28 0E F2 | 	cmp	local06, #81 wz
05f14     8C 02 90 AD |  if_e	jmp	#LR__0540
05f18     8E 28 0E F2 | 	cmp	local06, #142 wz
05f1c     90 02 90 AD |  if_e	jmp	#LR__0541
05f20     90 28 0E F2 | 	cmp	local06, #144 wz
05f24     94 02 90 AD |  if_e	jmp	#LR__0542
05f28     8D 28 0E F2 | 	cmp	local06, #141 wz
05f2c     98 02 90 AD |  if_e	jmp	#LR__0543
05f30     8C 28 0E F2 | 	cmp	local06, #140 wz
05f34     9C 02 90 AD |  if_e	jmp	#LR__0544
05f38     91 28 0E F2 | 	cmp	local06, #145 wz
05f3c     A0 02 90 AD |  if_e	jmp	#LR__0545
05f40     8B 28 0E F2 | 	cmp	local06, #139 wz
05f44     A4 02 90 AD |  if_e	jmp	#LR__0546
05f48     8F 28 0E F2 | 	cmp	local06, #143 wz
05f4c     A8 02 90 AD |  if_e	jmp	#LR__0547
05f50     6D 28 0E F2 | 	cmp	local06, #109 wz
05f54     AC 02 90 AD |  if_e	jmp	#LR__0548
05f58     70 28 0E F2 | 	cmp	local06, #112 wz
05f5c     F0 02 90 AD |  if_e	jmp	#LR__0555
05f60     56 28 0E F2 | 	cmp	local06, #86 wz
05f64     A8 02 90 AD |  if_e	jmp	#LR__0549
05f68     57 28 0E F2 | 	cmp	local06, #87 wz
05f6c     E0 02 90 AD |  if_e	jmp	#LR__0555
05f70     79 28 0E F2 | 	cmp	local06, #121 wz
05f74     A4 02 90 AD |  if_e	jmp	#LR__0550
05f78     77 28 0E F2 | 	cmp	local06, #119 wz
05f7c     A8 02 90 AD |  if_e	jmp	#LR__0551
05f80     78 28 0E F2 | 	cmp	local06, #120 wz
05f84     AC 02 90 AD |  if_e	jmp	#LR__0552
05f88     01 00 00 FF 
05f8c     04 28 0E F2 | 	cmp	local06, ##516 wz
05f90     AC 02 90 AD |  if_e	jmp	#LR__0553
05f94     B0 02 90 FD | 	jmp	#LR__0554
05f98                 | LR__0494
05f98     B4 0C B0 FD | 	call	#_compile_fun_2p
05f9c     FD 26 02 F6 | 	mov	local05, result1
05fa0     AC 02 90 FD | 	jmp	#LR__0555
05fa4                 | LR__0495
05fa4     E8 0D B0 FD | 	call	#_compile_fun_4p
05fa8     FD 26 02 F6 | 	mov	local05, result1
05fac     A0 02 90 FD | 	jmp	#LR__0555
05fb0                 | LR__0496
05fb0     6C 32 B0 FD | 	call	#_expr
05fb4                 | ' expr()
05fb4                 | ' return 0
05fb4     00 26 06 F6 | 	mov	local05, #0
05fb8     94 02 90 FD | 	jmp	#LR__0555
05fbc                 | LR__0497
05fbc     04 0D B0 FD | 	call	#_compile_fun_3p
05fc0     FD 26 02 F6 | 	mov	local05, result1
05fc4     88 02 90 FD | 	jmp	#LR__0555
05fc8                 | LR__0498
05fc8     54 32 B0 FD | 	call	#_expr
05fcc                 | ' expr()
05fcc                 | ' return 0
05fcc     00 26 06 F6 | 	mov	local05, #0
05fd0     7C 02 90 FD | 	jmp	#LR__0555
05fd4                 | LR__0499
05fd4     48 32 B0 FD | 	call	#_expr
05fd8                 | ' expr()
05fd8                 | ' return 0
05fd8     00 26 06 F6 | 	mov	local05, #0
05fdc     70 02 90 FD | 	jmp	#LR__0555
05fe0                 | LR__0500
05fe0     4C 10 B0 FD | 	call	#_compile_fun_varp
05fe4     FD 2C 02 F6 | 	mov	local08, result1
05fe8     64 02 90 FD | 	jmp	#LR__0555
05fec                 | LR__0501
05fec     30 32 B0 FD | 	call	#_expr
05ff0                 | ' expr()
05ff0                 | ' return 0
05ff0     00 26 06 F6 | 	mov	local05, #0
05ff4     58 02 90 FD | 	jmp	#LR__0555
05ff8                 | LR__0502
05ff8     34 10 B0 FD | 	call	#_compile_fun_varp
05ffc     FD 2C 02 F6 | 	mov	local08, result1
06000     4C 02 90 FD | 	jmp	#LR__0555
06004                 | LR__0503
06004     28 10 B0 FD | 	call	#_compile_fun_varp
06008     FD 2C 02 F6 | 	mov	local08, result1
0600c     40 02 90 FD | 	jmp	#LR__0555
06010                 | LR__0504
06010     A0 0E B0 FD | 	call	#_compile_fun_5p
06014     FD 26 02 F6 | 	mov	local05, result1
06018     34 02 90 FD | 	jmp	#LR__0555
0601c                 | LR__0505
0601c     FC 19 B0 FD | 	call	#_compile_dim
06020     E8 02 90 FD | 	jmp	#LR__0556
06024                 | LR__0506
06024     28 0C B0 FD | 	call	#_compile_fun_2p
06028     24 02 90 FD | 	jmp	#LR__0555
0602c                 | LR__0507
0602c     20 0C B0 FD | 	call	#_compile_fun_2p
06030     FD 26 02 F6 | 	mov	local05, result1
06034     18 02 90 FD | 	jmp	#LR__0555
06038                 | LR__0508
06038     B8 18 B0 FD | 	call	#_compile_else
0603c     CC 02 90 FD | 	jmp	#LR__0556
06040                 | LR__0509
06040     01 24 16 F2 | 	cmp	local04, #1 wc
06044     08 00 90 CD |  if_b	jmp	#LR__0510
06048     E4 2D B0 FD | 	call	#_compile_goto
0604c     BC 02 90 FD | 	jmp	#LR__0556
06050                 | LR__0510
06050     19 12 06 F6 | 	mov	arg01, #25
06054     A0 46 B1 FD | 	call	#_printerror
06058     B0 02 90 FD | 	jmp	#LR__0556
0605c                 | LR__0511
0605c     68 2D B0 FD | 	call	#_compile_gosub
06060     A8 02 90 FD | 	jmp	#LR__0556
06064                 | LR__0512
06064     5C 0C B0 FD | 	call	#_compile_fun_3p
06068     FD 26 02 F6 | 	mov	local05, result1
0606c     E0 01 90 FD | 	jmp	#LR__0555
06070                 | LR__0513
06070     1C 0D B0 FD | 	call	#_compile_fun_4p
06074     FD 26 02 F6 | 	mov	local05, result1
06078     D4 01 90 FD | 	jmp	#LR__0555
0607c                 | LR__0514
0607c     A0 31 B0 FD | 	call	#_expr
06080                 | ' expr()
06080                 | ' return 0
06080     00 26 06 F6 | 	mov	local05, #0
06084     C8 01 90 FD | 	jmp	#LR__0555
06088                 | LR__0515
06088     A0 20 B0 FD | 	call	#_compile_for
0608c     7C 02 90 FD | 	jmp	#LR__0556
06090                 | LR__0516
06090     FC 0C B0 FD | 	call	#_compile_fun_4p
06094     FD 26 02 F6 | 	mov	local05, result1
06098     B4 01 90 FD | 	jmp	#LR__0555
0609c                 | LR__0517
0609c     14 17 B0 FD | 	call	#_compile_if
060a0     68 02 90 FD | 	jmp	#LR__0556
060a4                 | LR__0518
060a4     78 31 B0 FD | 	call	#_expr
060a8                 | ' expr()
060a8                 | ' return 0
060a8     00 26 06 F6 | 	mov	local05, #0
060ac     A0 01 90 FD | 	jmp	#LR__0555
060b0                 | LR__0519
060b0     6C 31 B0 FD | 	call	#_expr
060b4                 | ' expr()
060b4                 | ' return 0
060b4     00 26 06 F6 | 	mov	local05, #0
060b8     94 01 90 FD | 	jmp	#LR__0555
060bc                 | LR__0520
060bc     70 0F B0 FD | 	call	#_compile_fun_varp
060c0     FD 2C 02 F6 | 	mov	local08, result1
060c4     88 01 90 FD | 	jmp	#LR__0555
060c8                 | LR__0521
060c8     64 0F B0 FD | 	call	#_compile_fun_varp
060cc     FD 2C 02 F6 | 	mov	local08, result1
060d0     7C 01 90 FD | 	jmp	#LR__0555
060d4                 | LR__0522
060d4     78 0B B0 FD | 	call	#_compile_fun_2p
060d8     FD 26 02 F6 | 	mov	local05, result1
060dc     70 01 90 FD | 	jmp	#LR__0555
060e0                 | LR__0523
060e0     3C 31 B0 FD | 	call	#_expr
060e4                 | ' expr()
060e4                 | ' return 0
060e4     00 26 06 F6 | 	mov	local05, #0
060e8     64 01 90 FD | 	jmp	#LR__0555
060ec                 | LR__0524
060ec     30 31 B0 FD | 	call	#_expr
060f0                 | ' expr()
060f0                 | ' return 0
060f0     00 26 06 F6 | 	mov	local05, #0
060f4     58 01 90 FD | 	jmp	#LR__0555
060f8                 | LR__0525
060f8     1C 2B B0 FD | 	call	#_compile_next
060fc     0C 02 90 FD | 	jmp	#LR__0556
06100                 | LR__0526
06100     1C 31 B0 FD | 	call	#_expr
06104                 | ' expr()
06104                 | ' return 0
06104     00 26 06 F6 | 	mov	local05, #0
06108     44 01 90 FD | 	jmp	#LR__0555
0610c                 | LR__0527
0610c     10 31 B0 FD | 	call	#_expr
06110                 | ' expr()
06110                 | ' return 0
06110     00 26 06 F6 | 	mov	local05, #0
06114     38 01 90 FD | 	jmp	#LR__0555
06118                 | LR__0528
06118     04 31 B0 FD | 	call	#_expr
0611c                 | ' expr()
0611c                 | ' return 0
0611c     00 26 06 F6 | 	mov	local05, #0
06120     2C 01 90 FD | 	jmp	#LR__0555
06124                 | LR__0529
06124     F8 30 B0 FD | 	call	#_expr
06128                 | ' expr()
06128                 | ' return 0
06128     00 26 06 F6 | 	mov	local05, #0
0612c     20 01 90 FD | 	jmp	#LR__0555
06130                 | LR__0530
06130     5C 0C B0 FD | 	call	#_compile_fun_4p
06134     FD 26 02 F6 | 	mov	local05, result1
06138     14 01 90 FD | 	jmp	#LR__0555
0613c                 | LR__0531
0613c     E0 30 B0 FD | 	call	#_expr
06140                 | ' expr()
06140                 | ' return 0
06140     00 26 06 F6 | 	mov	local05, #0
06144     08 01 90 FD | 	jmp	#LR__0555
06148                 | LR__0532
06148     04 0B B0 FD | 	call	#_compile_fun_2p
0614c     FD 26 02 F6 | 	mov	local05, result1
06150     FC 00 90 FD | 	jmp	#LR__0555
06154                 | LR__0533
06154     D8 0E B0 FD | 	call	#_compile_fun_varp
06158     FD 2C 02 F6 | 	mov	local08, result1
0615c     F0 00 90 FD | 	jmp	#LR__0555
06160                 | LR__0534
06160     EC 0A B0 FD | 	call	#_compile_fun_2p
06164     FD 26 02 F6 | 	mov	local05, result1
06168     E4 00 90 FD | 	jmp	#LR__0555
0616c                 | LR__0535
0616c     E0 0A B0 FD | 	call	#_compile_fun_2p
06170     FD 26 02 F6 | 	mov	local05, result1
06174     D8 00 90 FD | 	jmp	#LR__0555
06178                 | LR__0536
06178     D4 0A B0 FD | 	call	#_compile_fun_2p
0617c     FD 26 02 F6 | 	mov	local05, result1
06180     CC 00 90 FD | 	jmp	#LR__0555
06184                 | LR__0537
06184     54 0F B0 FD | 	call	#_compile_print
06188     FD 26 02 F6 | 	mov	local05, result1
0618c     7C 01 90 FD | 	jmp	#LR__0556
06190                 | LR__0538
06190     8C 30 B0 FD | 	call	#_expr
06194                 | ' expr()
06194                 | ' return 0
06194     B8 00 90 FD | 	jmp	#LR__0555
06198                 | LR__0539
06198     94 0E B0 FD | 	call	#_compile_fun_varp
0619c     FD 2C 02 F6 | 	mov	local08, result1
061a0     AC 00 90 FD | 	jmp	#LR__0555
061a4                 | LR__0540
061a4     88 0E B0 FD | 	call	#_compile_fun_varp
061a8     FD 2C 02 F6 | 	mov	local08, result1
061ac     A0 00 90 FD | 	jmp	#LR__0555
061b0                 | LR__0541
061b0     9C 0A B0 FD | 	call	#_compile_fun_2p
061b4     FD 26 02 F6 | 	mov	local05, result1
061b8     94 00 90 FD | 	jmp	#LR__0555
061bc                 | LR__0542
061bc     90 0A B0 FD | 	call	#_compile_fun_2p
061c0     FD 26 02 F6 | 	mov	local05, result1
061c4     88 00 90 FD | 	jmp	#LR__0555
061c8                 | LR__0543
061c8     84 0A B0 FD | 	call	#_compile_fun_2p
061cc     FD 26 02 F6 | 	mov	local05, result1
061d0     7C 00 90 FD | 	jmp	#LR__0555
061d4                 | LR__0544
061d4     78 0A B0 FD | 	call	#_compile_fun_2p
061d8     FD 26 02 F6 | 	mov	local05, result1
061dc     70 00 90 FD | 	jmp	#LR__0555
061e0                 | LR__0545
061e0     6C 0A B0 FD | 	call	#_compile_fun_2p
061e4     FD 26 02 F6 | 	mov	local05, result1
061e8     64 00 90 FD | 	jmp	#LR__0555
061ec                 | LR__0546
061ec     60 0A B0 FD | 	call	#_compile_fun_2p
061f0     FD 26 02 F6 | 	mov	local05, result1
061f4     58 00 90 FD | 	jmp	#LR__0555
061f8                 | LR__0547
061f8     54 0A B0 FD | 	call	#_compile_fun_2p
061fc     FD 26 02 F6 | 	mov	local05, result1
06200     4C 00 90 FD | 	jmp	#LR__0555
06204                 | LR__0548
06204     BC 0A B0 FD | 	call	#_compile_fun_3p
06208     FD 26 02 F6 | 	mov	local05, result1
0620c     40 00 90 FD | 	jmp	#LR__0555
06210                 | LR__0549
06210     0C 30 B0 FD | 	call	#_expr
06214                 | ' expr()
06214                 | ' return 0
06214     00 26 06 F6 | 	mov	local05, #0
06218     34 00 90 FD | 	jmp	#LR__0555
0621c                 | LR__0550
0621c     30 0A B0 FD | 	call	#_compile_fun_2p
06220     FD 26 02 F6 | 	mov	local05, result1
06224     28 00 90 FD | 	jmp	#LR__0555
06228                 | LR__0551
06228     24 0A B0 FD | 	call	#_compile_fun_2p
0622c     FD 26 02 F6 | 	mov	local05, result1
06230     1C 00 90 FD | 	jmp	#LR__0555
06234                 | LR__0552
06234     18 0A B0 FD | 	call	#_compile_fun_2p
06238     FD 26 02 F6 | 	mov	local05, result1
0623c     10 00 90 FD | 	jmp	#LR__0555
06240                 | LR__0553
06240     E8 01 B0 FD | 	call	#_compile_array_assign
06244     C4 00 90 FD | 	jmp	#LR__0556
06248                 | LR__0554
06248     48 09 B0 FD | 	call	#_compile_unknown
0624c     BC 00 90 FD | 	jmp	#LR__0556
06250                 | LR__0555
06250     14 23 02 F6 | 	mov	local03, local06
06254     16 1F 02 F6 | 	mov	local01, local08
06258     0F 2B 02 F6 | 	mov	local07, local01
0625c     10 2F 02 F6 | 	mov	local09, local02
06260     11 29 02 F6 | 	mov	local06, local03
06264     6A 00 00 FF 
06268     7C E4 05 F1 | 	add	objptr, ##54396
0626c     F2 1E 02 FB | 	rdlong	local01, objptr
06270     0F 2D 02 F6 | 	mov	local08, local01
06274     01 2C 66 F0 | 	shl	local08, #1
06278     0F 2D 02 F1 | 	add	local08, local01
0627c     02 2C 66 F0 | 	shl	local08, #2
06280     03 00 00 FF 
06284     00 E4 85 F1 | 	sub	objptr, ##1536
06288     F2 2C 02 F1 | 	add	local08, objptr
0628c     16 2B 62 FC | 	wrlong	local07, local08
06290     03 00 00 FF 
06294     00 E4 05 F1 | 	add	objptr, ##1536
06298     F2 1E 02 FB | 	rdlong	local01, objptr
0629c     0F 2D 02 F6 | 	mov	local08, local01
062a0     01 2C 66 F0 | 	shl	local08, #1
062a4     0F 2D 02 F1 | 	add	local08, local01
062a8     02 2C 66 F0 | 	shl	local08, #2
062ac     03 00 00 FF 
062b0     00 E4 85 F1 | 	sub	objptr, ##1536
062b4     F2 2C 02 F1 | 	add	local08, objptr
062b8     04 2C 06 F1 | 	add	local08, #4
062bc     16 2F 62 FC | 	wrlong	local09, local08
062c0     03 00 00 FF 
062c4     00 E4 05 F1 | 	add	objptr, ##1536
062c8     F2 1E 02 FB | 	rdlong	local01, objptr
062cc     0F 2D 02 F6 | 	mov	local08, local01
062d0     01 2C 66 F0 | 	shl	local08, #1
062d4     0F 2D 02 F1 | 	add	local08, local01
062d8     02 2C 66 F0 | 	shl	local08, #2
062dc     03 00 00 FF 
062e0     00 E4 85 F1 | 	sub	objptr, ##1536
062e4     F2 2C 02 F1 | 	add	local08, objptr
062e8     08 2C 06 F1 | 	add	local08, #8
062ec     16 29 62 FC | 	wrlong	local06, local08
062f0     03 00 00 FF 
062f4     00 E4 05 F1 | 	add	objptr, ##1536
062f8     F2 2A 02 FB | 	rdlong	local07, objptr
062fc     01 2A 06 F1 | 	add	local07, #1
06300     F2 2A 62 FC | 	wrlong	local07, objptr
06304     6A 00 00 FF 
06308     7C E4 85 F1 | 	sub	objptr, ##54396
0630c                 | LR__0556
0630c                 | ' 
0630c                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
0630c                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
0630c     00 24 0E F2 | 	cmp	local04, #0 wz
06310     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06314     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
06318     38 00 90 5D |  if_ne	jmp	#LR__0557
0631c     6A 00 00 FF 
06320     7C E4 05 F1 | 	add	objptr, ##54396
06324     F2 2C 02 FB | 	rdlong	local08, objptr
06328     16 1F 02 F6 | 	mov	local01, local08
0632c     01 1E 66 F0 | 	shl	local01, #1
06330     16 1F 02 F1 | 	add	local01, local08
06334     02 1E 66 F0 | 	shl	local01, #2
06338     03 00 00 FF 
0633c     00 E4 85 F1 | 	sub	objptr, ##1536
06340     F2 1E 02 F1 | 	add	local01, objptr
06344     08 1E 06 F1 | 	add	local01, #8
06348     0F FD 6B FC | 	wrlong	#510, local01
0634c     67 00 00 FF 
06350     7C E4 85 F1 | 	sub	objptr, ##52860
06354                 | LR__0557
06354                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
06354     6A 00 00 FF 
06358     7C E4 05 F1 | 	add	objptr, ##54396
0635c     F2 1E 02 FB | 	rdlong	local01, objptr
06360     6A 00 00 FF 
06364     7C E4 85 F1 | 	sub	objptr, ##54396
06368     97 58 48 FB | 	callpa	#(@LR__0560-@LR__0558)>>2,fcache_load_ptr_
0636c                 | LR__0558
0636c     0F 2D 02 F6 | 	mov	local08, local01
06370     01 2C 66 F0 | 	shl	local08, #1
06374     0F 2D 02 F1 | 	add	local08, local01
06378     02 2C 66 F0 | 	shl	local08, #2
0637c     67 00 00 FF 
06380     7C E4 05 F1 | 	add	objptr, ##52860
06384     F2 2C 02 F1 | 	add	local08, objptr
06388     08 2C 06 F1 | 	add	local08, #8
0638c     16 2D 02 FB | 	rdlong	local08, local08
06390     9B 2C 0E F2 | 	cmp	local08, #155 wz
06394     67 00 00 FF 
06398     7C E4 85 F1 | 	sub	objptr, ##52860
0639c     70 00 90 5D |  if_ne	jmp	#LR__0559
063a0     0F 2D 02 F6 | 	mov	local08, local01
063a4     01 2C 86 F1 | 	sub	local08, #1
063a8     16 2F 02 F6 | 	mov	local09, local08
063ac     01 2E 66 F0 | 	shl	local09, #1
063b0     16 2F 02 F1 | 	add	local09, local08
063b4     02 2E 66 F0 | 	shl	local09, #2
063b8     67 00 00 FF 
063bc     7C E4 05 F1 | 	add	objptr, ##52860
063c0     F2 2E 02 F1 | 	add	local09, objptr
063c4     08 2E 06 F1 | 	add	local09, #8
063c8     17 2D 02 FB | 	rdlong	local08, local09
063cc     11 2C 0E F2 | 	cmp	local08, #17 wz
063d0     67 00 00 FF 
063d4     7C E4 85 F1 | 	sub	objptr, ##52860
063d8     34 00 90 5D |  if_ne	jmp	#LR__0559
063dc     0F 2F 02 F6 | 	mov	local09, local01
063e0     01 2E 86 F1 | 	sub	local09, #1
063e4     17 2D 02 F6 | 	mov	local08, local09
063e8     01 2C 66 F0 | 	shl	local08, #1
063ec     17 2D 02 F1 | 	add	local08, local09
063f0     02 2C 66 F0 | 	shl	local08, #2
063f4     67 00 00 FF 
063f8     7C E4 05 F1 | 	add	objptr, ##52860
063fc     F2 2C 02 F1 | 	add	local08, objptr
06400     08 2C 06 F1 | 	add	local08, #8
06404     16 25 68 FC | 	wrlong	#18, local08
06408     67 00 00 FF 
0640c     7C E4 85 F1 | 	sub	objptr, ##52860
06410                 | LR__0559
06410     01 1E 86 F1 | 	sub	local01, #1
06414     01 1E 56 F2 | 	cmps	local01, #1 wc
06418     50 FF 9F 3D |  if_ae	jmp	#LR__0558
0641c                 | LR__0560
0641c                 | ' '  print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
0641c                 | ' return err
0641c     13 FB 01 F6 | 	mov	result1, local05
06420     A7 F0 03 F6 | 	mov	ptra, fp
06424     B2 00 A0 FD | 	call	#popregs_
06428                 | _compile_immediate_ret
06428     2D 00 64 FD | 	ret
0642c                 | 
0642c                 | ' 
0642c                 | ' sub compile_array_assign
0642c                 | _compile_array_assign
0642c     0A 4A 05 F6 | 	mov	COUNT_, #10
06430     A8 00 A0 FD | 	call	#pushregs_
06434     00 24 06 F6 | 	mov	local04, #0
06438     57 00 00 FF 
0643c     44 E4 05 F1 | 	add	objptr, ##44612
06440     F2 26 02 FB | 	rdlong	local05, objptr
06444     13 FB 01 F6 | 	mov	result1, local05
06448     01 FA 85 F1 | 	sub	result1, #1
0644c     03 FA 65 F0 | 	shl	result1, #3
06450     02 00 00 FF 
06454     38 E4 85 F1 | 	sub	objptr, ##1080
06458     F2 FA 01 F1 | 	add	result1, objptr
0645c     FD 28 02 FB | 	rdlong	local06, result1
06460                 | ' numpar=0
06460                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
06460                 | ' ' todo here: recognize params and t1.result.twowords=numpar
06460                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
06460                 | ' if lparts(ct).token=token_lpar then
06460     03 26 66 F0 | 	shl	local05, #3
06464     F2 26 02 F1 | 	add	local05, objptr
06468     04 26 06 F1 | 	add	local05, #4
0646c     13 27 02 FB | 	rdlong	local05, local05
06470     15 26 0E F2 | 	cmp	local05, #21 wz
06474     55 00 00 FF 
06478     0C E4 85 F1 | 	sub	objptr, ##43532
0647c     D4 01 90 5D |  if_ne	jmp	#LR__0574
06480     57 00 00 FF 
06484     44 E4 05 F1 | 	add	objptr, ##44612
06488     F2 2A 02 FB | 	rdlong	local07, objptr
0648c     01 2A 06 F1 | 	add	local07, #1
06490     F2 2A 62 FC | 	wrlong	local07, objptr
06494     57 00 00 FF 
06498     44 E4 85 F1 | 	sub	objptr, ##44612
0649c                 | '   ct+=1 											' omit this lpar, this is for expr list
0649c                 | '   do
0649c                 | LR__0570
0649c     80 2D B0 FD | 	call	#_expr
064a0     57 00 00 FF 
064a4     44 E4 05 F1 | 	add	objptr, ##44612
064a8     F2 26 02 FB | 	rdlong	local05, objptr
064ac     01 26 06 F1 | 	add	local05, #1
064b0     F2 26 62 FC | 	wrlong	local05, objptr
064b4     01 24 06 F1 | 	add	local04, #1
064b8     01 26 86 F1 | 	sub	local05, #1
064bc     03 26 66 F0 | 	shl	local05, #3
064c0     02 00 00 FF 
064c4     38 E4 85 F1 | 	sub	objptr, ##1080
064c8     F2 26 02 F1 | 	add	local05, objptr
064cc     04 26 06 F1 | 	add	local05, #4
064d0     13 2B 02 FB | 	rdlong	local07, local05
064d4     14 2A 0E F2 | 	cmp	local07, #20 wz
064d8     55 00 00 FF 
064dc     0C E4 85 F1 | 	sub	objptr, ##43532
064e0     34 00 90 AD |  if_e	jmp	#LR__0571
064e4     57 00 00 FF 
064e8     44 E4 05 F1 | 	add	objptr, ##44612
064ec     F2 2A 02 FB | 	rdlong	local07, objptr
064f0     03 2A 66 F0 | 	shl	local07, #3
064f4     02 00 00 FF 
064f8     38 E4 85 F1 | 	sub	objptr, ##1080
064fc     F2 2A 02 F1 | 	add	local07, objptr
06500     04 2A 06 F1 | 	add	local07, #4
06504     15 2B 02 FB | 	rdlong	local07, local07
06508     FE 2B 0E F2 | 	cmp	local07, #510 wz
0650c     55 00 00 FF 
06510     0C E4 85 F1 | 	sub	objptr, ##43532
06514     84 FF 9F 5D |  if_ne	jmp	#LR__0570
06518                 | LR__0571
06518     57 00 00 FF 
0651c     44 E4 05 F1 | 	add	objptr, ##44612
06520     F2 2A 02 FB | 	rdlong	local07, objptr
06524     01 2A 06 F1 | 	add	local07, #1
06528     F2 2A 62 FC | 	wrlong	local07, objptr
0652c     57 00 00 FF 
06530     44 E4 85 F1 | 	sub	objptr, ##44612
06534     E8 2C B0 FD | 	call	#_expr
06538     01 2C 66 F6 | 	neg	local08, #1
0653c     00 2E 06 F6 | 	mov	local09, #0
06540                 | ' '   print "in array_assign, rpar found, numpar=",numpar
06540                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
06540                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
06540                 | ' ct+=1 : expr()
06540                 | ' ' now find the vae
06540                 | ' 
06540                 | ' j=-1 : i=0 : do : 
06540                 | LR__0572
06540                 | '   if variables(i).name=varname$ then j=i: exit loop
06540     17 27 02 F6 | 	mov	local05, local09
06544     04 26 66 F0 | 	shl	local05, #4
06548     34 00 00 FF 
0654c     F8 E5 05 F1 | 	add	objptr, ##27128
06550     F2 26 02 F1 | 	add	local05, objptr
06554     13 13 02 FB | 	rdlong	arg01, local05
06558     14 15 02 F6 | 	mov	arg02, local06
0655c     34 00 00 FF 
06560     F8 E5 85 F1 | 	sub	objptr, ##27128
06564     34 86 B1 FD | 	call	#__system___string_cmp
06568     00 FA 0D F2 | 	cmp	result1, #0 wz
0656c     17 2D 02 A6 |  if_e	mov	local08, local09
06570     20 00 90 AD |  if_e	jmp	#LR__0573
06574     01 2E 06 F1 | 	add	local09, #1
06578     55 00 00 FF 
0657c     08 E4 05 F1 | 	add	objptr, ##43528
06580     F2 2A 02 FB | 	rdlong	local07, objptr
06584     55 00 00 FF 
06588     08 E4 85 F1 | 	sub	objptr, ##43528
0658c     15 2F 5A F2 | 	cmps	local09, local07 wcz
06590     AC FF 9F ED |  if_be	jmp	#LR__0572
06594                 | LR__0573
06594     16 1F 02 F6 | 	mov	local01, local08
06598     12 21 02 F6 | 	mov	local02, local04
0659c     17 22 06 F6 | 	mov	local03, #23
065a0     0F 2B 02 F6 | 	mov	local07, local01
065a4     10 31 02 F6 | 	mov	local10, local02
065a8     11 2D 02 F6 | 	mov	local08, local03
065ac     6A 00 00 FF 
065b0     7C E4 05 F1 | 	add	objptr, ##54396
065b4     F2 1E 02 FB | 	rdlong	local01, objptr
065b8     0F 2F 02 F6 | 	mov	local09, local01
065bc     01 2E 66 F0 | 	shl	local09, #1
065c0     0F 2F 02 F1 | 	add	local09, local01
065c4     02 2E 66 F0 | 	shl	local09, #2
065c8     03 00 00 FF 
065cc     00 E4 85 F1 | 	sub	objptr, ##1536
065d0     F2 2E 02 F1 | 	add	local09, objptr
065d4     17 2B 62 FC | 	wrlong	local07, local09
065d8     03 00 00 FF 
065dc     00 E4 05 F1 | 	add	objptr, ##1536
065e0     F2 1E 02 FB | 	rdlong	local01, objptr
065e4     0F 2F 02 F6 | 	mov	local09, local01
065e8     01 2E 66 F0 | 	shl	local09, #1
065ec     0F 2F 02 F1 | 	add	local09, local01
065f0     02 2E 66 F0 | 	shl	local09, #2
065f4     03 00 00 FF 
065f8     00 E4 85 F1 | 	sub	objptr, ##1536
065fc     F2 2E 02 F1 | 	add	local09, objptr
06600     04 2E 06 F1 | 	add	local09, #4
06604     17 31 62 FC | 	wrlong	local10, local09
06608     03 00 00 FF 
0660c     00 E4 05 F1 | 	add	objptr, ##1536
06610     F2 30 02 FB | 	rdlong	local10, objptr
06614     18 1F 02 F6 | 	mov	local01, local10
06618     01 1E 66 F0 | 	shl	local01, #1
0661c     18 1F 02 F1 | 	add	local01, local10
06620     02 1E 66 F0 | 	shl	local01, #2
06624     03 00 00 FF 
06628     00 E4 85 F1 | 	sub	objptr, ##1536
0662c     F2 1E 02 F1 | 	add	local01, objptr
06630     08 1E 06 F1 | 	add	local01, #8
06634     0F 2D 62 FC | 	wrlong	local08, local01
06638     03 00 00 FF 
0663c     00 E4 05 F1 | 	add	objptr, ##1536
06640     F2 2A 02 FB | 	rdlong	local07, objptr
06644     01 2A 06 F1 | 	add	local07, #1
06648     F2 2A 62 FC | 	wrlong	local07, objptr
0664c     6A 00 00 FF 
06650     7C E4 85 F1 | 	sub	objptr, ##54396
06654                 | LR__0574
06654     A7 F0 03 F6 | 	mov	ptra, fp
06658     B2 00 A0 FD | 	call	#popregs_
0665c                 | _compile_array_assign_ret
0665c     2D 00 64 FD | 	ret
06660                 | 
06660                 | ' 
06660                 | ' 
06660                 | ' sub compile_immediate_assign(linetype as ulong)
06660                 | _compile_immediate_assign
06660     09 4A 05 F6 | 	mov	COUNT_, #9
06664     A8 00 A0 FD | 	call	#pushregs_
06668     09 25 0A F6 | 	mov	local04, arg01 wz
0666c     FF 22 06 F6 | 	mov	local03, #255
06670     01 26 66 F6 | 	neg	local05, #1
06674                 | ' 
06674                 | ' t1.result_type=result_error : t1.result.uresult=0
06674                 | ' i=-1: j=-1
06674                 | ' 
06674                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
06674     2C 00 90 5D |  if_ne	jmp	#LR__0580
06678     55 00 00 FF 
0667c     0C E4 05 F1 | 	add	objptr, ##43532
06680     F2 28 02 FB | 	rdlong	local06, objptr
06684     02 00 00 FF 
06688     38 E4 05 F1 | 	add	objptr, ##1080
0668c     F2 04 68 FC | 	wrlong	#2, objptr
06690     13 00 00 FF 
06694     38 E4 05 F1 | 	add	objptr, ##9784
06698     F2 00 68 FC | 	wrlong	#0, objptr
0669c     6A 00 00 FF 
066a0     7C E4 85 F1 | 	sub	objptr, ##54396
066a4                 | LR__0580
066a4                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
066a4     02 24 0E F2 | 	cmp	local04, #2 wz
066a8     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
066ac     55 00 00 AF 
066b0     0C E4 05 A1 |  if_e	add	objptr, ##43532
066b4     F2 28 02 AB |  if_e	rdlong	local06, objptr
066b8     02 00 00 AF 
066bc     38 E4 05 A1 |  if_e	add	objptr, ##1080
066c0     F2 04 68 AC |  if_e	wrlong	#2, objptr
066c4     57 00 00 AF 
066c8     44 E4 85 A1 |  if_e	sub	objptr, ##44612
066cc                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
066cc     04 24 0E F2 | 	cmp	local04, #4 wz
066d0     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
066d4     2C 00 90 5D |  if_ne	jmp	#LR__0581
066d8     55 00 00 FF 
066dc     14 E4 05 F1 | 	add	objptr, ##43540
066e0     F2 28 02 FB | 	rdlong	local06, objptr
066e4     02 00 00 FF 
066e8     30 E4 05 F1 | 	add	objptr, ##1072
066ec     F2 06 68 FC | 	wrlong	#3, objptr
066f0     13 00 00 FF 
066f4     38 E4 05 F1 | 	add	objptr, ##9784
066f8     F2 04 68 FC | 	wrlong	#2, objptr
066fc     6A 00 00 FF 
06700     7C E4 85 F1 | 	sub	objptr, ##54396
06704                 | LR__0581
06704                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
06704     05 24 0E F2 | 	cmp	local04, #5 wz
06708     3C 00 90 5D |  if_ne	jmp	#LR__0582
0670c     57 00 00 FF 
06710     44 E4 05 F1 | 	add	objptr, ##44612
06714     F2 FA 01 FB | 	rdlong	result1, objptr
06718     FD 28 02 F6 | 	mov	local06, result1
0671c     03 28 66 F0 | 	shl	local06, #3
06720     02 00 00 FF 
06724     38 E4 85 F1 | 	sub	objptr, ##1080
06728     F2 28 02 F1 | 	add	local06, objptr
0672c     14 29 02 FB | 	rdlong	local06, local06
06730     02 FA 05 F1 | 	add	result1, #2
06734     02 00 00 FF 
06738     38 E4 05 F1 | 	add	objptr, ##1080
0673c     F2 FA 61 FC | 	wrlong	result1, objptr
06740     57 00 00 FF 
06744     44 E4 85 F1 | 	sub	objptr, ##44612
06748                 | LR__0582
06748     14 13 02 F6 | 	mov	arg01, local06
0674c     01 14 06 F6 | 	mov	arg02, #1
06750     F0 A4 B1 FD | 	call	#__system__Right_S
06754     C8 2A B0 FD | 	call	#_expr
06758                 | '  
06758                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
06758                 | ' 
06758                 | ' suffix2$=right$(varname2$,1)
06758                 | ' expr()
06758                 | ' 
06758                 | ' 
06758                 | ' if varnum>0 then
06758     55 00 00 FF 
0675c     08 E4 05 F1 | 	add	objptr, ##43528
06760     F2 2A 02 FB | 	rdlong	local07, objptr
06764     55 00 00 FF 
06768     08 E4 85 F1 | 	sub	objptr, ##43528
0676c     01 2A 56 F2 | 	cmps	local07, #1 wc
06770     58 00 90 CD |  if_b	jmp	#LR__0585
06774                 | '   for i=0 to varnum-1
06774     00 2C 06 F6 | 	mov	local08, #0
06778     55 00 00 FF 
0677c     08 E4 05 F1 | 	add	objptr, ##43528
06780     F2 2E 02 FB | 	rdlong	local09, objptr
06784     55 00 00 FF 
06788     08 E4 85 F1 | 	sub	objptr, ##43528
0678c                 | LR__0583
0678c     17 2D 52 F2 | 	cmps	local08, local09 wc
06790     38 00 90 3D |  if_ae	jmp	#LR__0584
06794                 | '     if variables(i).name=varname2$ then j=i : exit
06794     16 2B 02 F6 | 	mov	local07, local08
06798     04 2A 66 F0 | 	shl	local07, #4
0679c     34 00 00 FF 
067a0     F8 E5 05 F1 | 	add	objptr, ##27128
067a4     F2 2A 02 F1 | 	add	local07, objptr
067a8     15 13 02 FB | 	rdlong	arg01, local07
067ac     14 15 02 F6 | 	mov	arg02, local06
067b0     34 00 00 FF 
067b4     F8 E5 85 F1 | 	sub	objptr, ##27128
067b8     E0 83 B1 FD | 	call	#__system___string_cmp
067bc     00 FA 0D F2 | 	cmp	result1, #0 wz
067c0     16 27 02 A6 |  if_e	mov	local05, local08
067c4     01 2C 06 51 |  if_ne	add	local08, #1
067c8     C0 FF 9F 5D |  if_ne	jmp	#LR__0583
067cc                 | LR__0584
067cc                 | LR__0585
067cc                 | ' if  j=-1 andalso varnum<maxvars then   
067cc     FF FF 7F FF 
067d0     FF 27 0E F2 | 	cmp	local05, ##-1 wz
067d4     60 00 90 5D |  if_ne	jmp	#LR__0586
067d8     55 00 00 FF 
067dc     08 E4 05 F1 | 	add	objptr, ##43528
067e0     F2 2A 02 FB | 	rdlong	local07, objptr
067e4     55 00 00 FF 
067e8     08 E4 85 F1 | 	sub	objptr, ##43528
067ec     02 00 00 FF 
067f0     00 2A 56 F2 | 	cmps	local07, ##1024 wc
067f4     40 00 90 3D |  if_ae	jmp	#LR__0586
067f8     55 00 00 FF 
067fc     08 E4 05 F1 | 	add	objptr, ##43528
06800     F2 2E 02 FB | 	rdlong	local09, objptr
06804     04 2E 66 F0 | 	shl	local09, #4
06808     20 00 00 FF 
0680c     10 E4 85 F1 | 	sub	objptr, ##16400
06810     F2 2E 02 F1 | 	add	local09, objptr
06814     17 29 62 FC | 	wrlong	local06, local09
06818     20 00 00 FF 
0681c     10 E4 05 F1 | 	add	objptr, ##16400
06820     F2 2A 02 FB | 	rdlong	local07, objptr
06824     15 27 02 F6 | 	mov	local05, local07
06828     01 2A 06 F1 | 	add	local07, #1
0682c     F2 2A 62 FC | 	wrlong	local07, objptr
06830     55 00 00 FF 
06834     08 E4 85 F1 | 	sub	objptr, ##43528
06838                 | LR__0586
06838     13 1F 02 F6 | 	mov	local01, local05
0683c     17 22 06 F6 | 	mov	local03, #23
06840     0F 2B 02 F6 | 	mov	local07, local01
06844     10 2F 02 F6 | 	mov	local09, local02
06848     11 1F 02 F6 | 	mov	local01, local03
0684c     6A 00 00 FF 
06850     7C E4 05 F1 | 	add	objptr, ##54396
06854     F2 2C 02 FB | 	rdlong	local08, objptr
06858     16 29 02 F6 | 	mov	local06, local08
0685c     01 28 66 F0 | 	shl	local06, #1
06860     16 29 02 F1 | 	add	local06, local08
06864     02 28 66 F0 | 	shl	local06, #2
06868     03 00 00 FF 
0686c     00 E4 85 F1 | 	sub	objptr, ##1536
06870     F2 28 02 F1 | 	add	local06, objptr
06874     14 2B 62 FC | 	wrlong	local07, local06
06878     03 00 00 FF 
0687c     00 E4 05 F1 | 	add	objptr, ##1536
06880     F2 2C 02 FB | 	rdlong	local08, objptr
06884     16 2B 02 F6 | 	mov	local07, local08
06888     01 2A 66 F0 | 	shl	local07, #1
0688c     16 2B 02 F1 | 	add	local07, local08
06890     02 2A 66 F0 | 	shl	local07, #2
06894     03 00 00 FF 
06898     00 E4 85 F1 | 	sub	objptr, ##1536
0689c     F2 2A 02 F1 | 	add	local07, objptr
068a0     04 2A 06 F1 | 	add	local07, #4
068a4     15 2F 62 FC | 	wrlong	local09, local07
068a8     03 00 00 FF 
068ac     00 E4 05 F1 | 	add	objptr, ##1536
068b0     F2 2E 02 FB | 	rdlong	local09, objptr
068b4     17 2D 02 F6 | 	mov	local08, local09
068b8     01 2C 66 F0 | 	shl	local08, #1
068bc     17 2D 02 F1 | 	add	local08, local09
068c0     02 2C 66 F0 | 	shl	local08, #2
068c4     03 00 00 FF 
068c8     00 E4 85 F1 | 	sub	objptr, ##1536
068cc     F2 2C 02 F1 | 	add	local08, objptr
068d0     08 2C 06 F1 | 	add	local08, #8
068d4     16 1F 62 FC | 	wrlong	local01, local08
068d8     03 00 00 FF 
068dc     00 E4 05 F1 | 	add	objptr, ##1536
068e0     F2 2A 02 FB | 	rdlong	local07, objptr
068e4     01 2A 06 F1 | 	add	local07, #1
068e8     F2 2A 62 FC | 	wrlong	local07, objptr
068ec     6A 00 00 FF 
068f0     7C E4 85 F1 | 	sub	objptr, ##54396
068f4                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
068f4                 | ' 
068f4                 | ' 
068f4                 | ' 
068f4                 | ' 
068f4                 | ' 
068f4                 | ' 
068f4                 | ' compiledline(lineptr)=t1:  lineptr+=1 
068f4                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
068f4     00 24 0E F2 | 	cmp	local04, #0 wz
068f8     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
068fc     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
06900     38 00 90 5D |  if_ne	jmp	#LR__0587
06904     6A 00 00 FF 
06908     7C E4 05 F1 | 	add	objptr, ##54396
0690c     F2 1E 02 FB | 	rdlong	local01, objptr
06910     0F 2F 02 F6 | 	mov	local09, local01
06914     01 2E 66 F0 | 	shl	local09, #1
06918     0F 2F 02 F1 | 	add	local09, local01
0691c     02 2E 66 F0 | 	shl	local09, #2
06920     03 00 00 FF 
06924     00 E4 85 F1 | 	sub	objptr, ##1536
06928     F2 2E 02 F1 | 	add	local09, objptr
0692c     08 2E 06 F1 | 	add	local09, #8
06930     17 FD 6B FC | 	wrlong	#510, local09
06934     67 00 00 FF 
06938     7C E4 85 F1 | 	sub	objptr, ##52860
0693c                 | LR__0587
0693c     A7 F0 03 F6 | 	mov	ptra, fp
06940     B2 00 A0 FD | 	call	#popregs_
06944                 | _compile_immediate_assign_ret
06944     2D 00 64 FD | 	ret
06948                 | 
06948                 | ' 
06948                 | ' ' ------------------ compile the line that is calling a command 
06948                 | ' 
06948                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
06948                 | _compile
06948     04 4A 05 F6 | 	mov	COUNT_, #4
0694c     A8 00 A0 FD | 	call	#pushregs_
06950     09 1F 0A F6 | 	mov	local01, arg01 wz
06954     0A 21 02 F6 | 	mov	local02, arg02
06958     0B 23 02 F6 | 	mov	local03, arg03
0695c                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
0695c                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
0695c                 | '  
0695c                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
0695c                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
0695c     0C 00 90 5D |  if_ne	jmp	#LR__0590
06960     00 12 06 F6 | 	mov	arg01, #0
06964     FC F2 BF FD | 	call	#_compile_immediate
06968     A0 00 90 FD | 	jmp	#LR__0597
0696c                 | LR__0590
0696c     67 00 00 FF 
06970     7C E4 05 F1 | 	add	objptr, ##52860
06974     F2 1E 62 FC | 	wrlong	local01, objptr
06978     04 E4 05 F1 | 	add	objptr, #4
0697c     F2 20 62 FC | 	wrlong	local02, objptr
06980     67 00 00 FF 
06984     80 E4 85 F1 | 	sub	objptr, ##52864
06988     11 13 02 F6 | 	mov	arg01, local03
0698c     01 12 06 F1 | 	add	arg01, #1
06990     D0 F2 BF FD | 	call	#_compile_immediate
06994     FD 24 0A F6 | 	mov	local04, result1 wz
06998                 | ' 
06998                 | ' ucompiledline(0)=alinemajor
06998                 | ' ucompiledline(1)=alineminor
06998                 | ' 
06998                 | ' 
06998                 | ' ' cont: 0: this is the first part of the line that will continue
06998                 | ' ' 1 - this is the continuation of the line
06998                 | ' ' 2 - this is the last continued line
06998                 | ' ' 3 - this is the ome and only part
06998                 | ' 
06998                 | ' err=compile_immediate(cont+1) 
06998                 | ' if err=0 then
06998     6C 00 90 5D |  if_ne	jmp	#LR__0596
0699c                 | '   if cont=3 orelse cont=2 then 
0699c     03 22 0E F2 | 	cmp	local03, #3 wz
069a0     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
069a4     60 00 90 5D |  if_ne	jmp	#LR__0595
069a8                 | '     if alinemajor >lastline then 
069a8     6A 00 00 FF 
069ac     88 E4 05 F1 | 	add	objptr, ##54408
069b0     F2 16 02 FB | 	rdlong	arg03, objptr
069b4     6A 00 00 FF 
069b8     88 E4 85 F1 | 	sub	objptr, ##54408
069bc     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
069c0     0C 00 90 ED |  if_be	jmp	#LR__0591
069c4     0F 13 02 F6 | 	mov	arg01, local01
069c8     D8 F1 BF FD | 	call	#_add_line_at_end
069cc     38 00 90 FD | 	jmp	#LR__0594
069d0                 | LR__0591
069d0     0F 13 02 F6 | 	mov	arg01, local01
069d4     08 EB BF FD | 	call	#_deleteline
069d8                 | '       deleteline(alinemajor)  
069d8                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' yes I know that's not optimal    
069d8     6A 00 00 FF 
069dc     88 E4 05 F1 | 	add	objptr, ##54408
069e0     F2 16 02 FB | 	rdlong	arg03, objptr
069e4     6A 00 00 FF 
069e8     88 E4 85 F1 | 	sub	objptr, ##54408
069ec     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
069f0     0C 00 90 ED |  if_be	jmp	#LR__0592
069f4     0F 13 02 F6 | 	mov	arg01, local01
069f8     A8 F1 BF FD | 	call	#_add_line_at_end
069fc     08 00 90 FD | 	jmp	#LR__0593
06a00                 | LR__0592
06a00     0F 13 02 F6 | 	mov	arg01, local01
06a04     80 EF BF FD | 	call	#_insertline
06a08                 | LR__0593
06a08                 | LR__0594
06a08                 | LR__0595
06a08                 | LR__0596
06a08                 | ' return err
06a08     12 FB 01 F6 | 	mov	result1, local04
06a0c                 | LR__0597
06a0c     A7 F0 03 F6 | 	mov	ptra, fp
06a10     B2 00 A0 FD | 	call	#popregs_
06a14                 | _compile_ret
06a14     2D 00 64 FD | 	ret
06a18                 | 
06a18                 | ' 
06a18                 | ' ' ------------------ compile the line that is assigning to a variable
06a18                 | ' 
06a18                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
06a18                 | _compile_assign
06a18     03 4A 05 F6 | 	mov	COUNT_, #3
06a1c     A8 00 A0 FD | 	call	#pushregs_
06a20     09 1F 0A F6 | 	mov	local01, arg01 wz
06a24     0A 21 02 F6 | 	mov	local02, arg02
06a28     0B 23 02 F6 | 	mov	local03, arg03
06a2c                 | ' 
06a2c                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
06a2c                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
06a2c     0C 00 90 5D |  if_ne	jmp	#LR__0600
06a30     00 12 06 F6 | 	mov	arg01, #0
06a34     28 FC BF FD | 	call	#_compile_immediate_assign
06a38     94 00 90 FD | 	jmp	#LR__0606
06a3c                 | LR__0600
06a3c     67 00 00 FF 
06a40     7C E4 05 F1 | 	add	objptr, ##52860
06a44     F2 1E 62 FC | 	wrlong	local01, objptr
06a48     04 E4 05 F1 | 	add	objptr, #4
06a4c     F2 20 62 FC | 	wrlong	local02, objptr
06a50     67 00 00 FF 
06a54     80 E4 85 F1 | 	sub	objptr, ##52864
06a58     11 13 02 F6 | 	mov	arg01, local03
06a5c     01 12 06 F1 | 	add	arg01, #1
06a60     FC FB BF FD | 	call	#_compile_immediate_assign
06a64                 | ' 
06a64                 | ' ucompiledline(0)=alinemajor
06a64                 | ' ucompiledline(1)=alineminor
06a64                 | ' 
06a64                 | ' compile_immediate_assign(cont+1) 
06a64                 | ' 
06a64                 | ' if cont=3 orelse cont=2 then 
06a64     03 22 0E F2 | 	cmp	local03, #3 wz
06a68     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
06a6c     60 00 90 5D |  if_ne	jmp	#LR__0605
06a70                 | '   if alinemajor >lastline then 
06a70     6A 00 00 FF 
06a74     88 E4 05 F1 | 	add	objptr, ##54408
06a78     F2 16 02 FB | 	rdlong	arg03, objptr
06a7c     6A 00 00 FF 
06a80     88 E4 85 F1 | 	sub	objptr, ##54408
06a84     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06a88     0C 00 90 ED |  if_be	jmp	#LR__0601
06a8c     0F 13 02 F6 | 	mov	arg01, local01
06a90     10 F1 BF FD | 	call	#_add_line_at_end
06a94     38 00 90 FD | 	jmp	#LR__0604
06a98                 | LR__0601
06a98     0F 13 02 F6 | 	mov	arg01, local01
06a9c     40 EA BF FD | 	call	#_deleteline
06aa0                 | '     deleteline(alinemajor)  
06aa0                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
06aa0     6A 00 00 FF 
06aa4     88 E4 05 F1 | 	add	objptr, ##54408
06aa8     F2 16 02 FB | 	rdlong	arg03, objptr
06aac     6A 00 00 FF 
06ab0     88 E4 85 F1 | 	sub	objptr, ##54408
06ab4     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06ab8     0C 00 90 ED |  if_be	jmp	#LR__0602
06abc     0F 13 02 F6 | 	mov	arg01, local01
06ac0     E0 F0 BF FD | 	call	#_add_line_at_end
06ac4     08 00 90 FD | 	jmp	#LR__0603
06ac8                 | LR__0602
06ac8     0F 13 02 F6 | 	mov	arg01, local01
06acc     B8 EE BF FD | 	call	#_insertline
06ad0                 | LR__0603
06ad0                 | LR__0604
06ad0                 | LR__0605
06ad0                 | LR__0606
06ad0     A7 F0 03 F6 | 	mov	ptra, fp
06ad4     B2 00 A0 FD | 	call	#popregs_
06ad8                 | _compile_assign_ret
06ad8     2D 00 64 FD | 	ret
06adc                 | 
06adc                 | ' 
06adc                 | ' sub compile_error(errno)
06adc                 | _compile_error
06adc     FF 04 06 F6 | 	mov	_var03, #255
06ae0     01 07 02 F6 | 	mov	_var04, _var02
06ae4     02 09 02 F6 | 	mov	_var05, _var03
06ae8     6A 00 00 FF 
06aec     7C E4 05 F1 | 	add	objptr, ##54396
06af0     F2 0A 02 FB | 	rdlong	_var06, objptr
06af4     05 0D 02 F6 | 	mov	_var07, _var06
06af8     01 0C 66 F0 | 	shl	_var07, #1
06afc     05 0D 02 F1 | 	add	_var07, _var06
06b00     02 0C 66 F0 | 	shl	_var07, #2
06b04     03 00 00 FF 
06b08     00 E4 85 F1 | 	sub	objptr, ##1536
06b0c     F2 0C 02 F1 | 	add	_var07, objptr
06b10     06 13 62 FC | 	wrlong	arg01, _var07
06b14     03 00 00 FF 
06b18     00 E4 05 F1 | 	add	objptr, ##1536
06b1c     F2 0C 02 FB | 	rdlong	_var07, objptr
06b20     06 0B 02 F6 | 	mov	_var06, _var07
06b24     01 0A 66 F0 | 	shl	_var06, #1
06b28     06 0B 02 F1 | 	add	_var06, _var07
06b2c     02 0A 66 F0 | 	shl	_var06, #2
06b30     03 00 00 FF 
06b34     00 E4 85 F1 | 	sub	objptr, ##1536
06b38     F2 0A 02 F1 | 	add	_var06, objptr
06b3c     04 0A 06 F1 | 	add	_var06, #4
06b40     05 07 62 FC | 	wrlong	_var04, _var06
06b44     03 00 00 FF 
06b48     00 E4 05 F1 | 	add	objptr, ##1536
06b4c     F2 0C 02 FB | 	rdlong	_var07, objptr
06b50     06 0B 02 F6 | 	mov	_var06, _var07
06b54     01 0A 66 F0 | 	shl	_var06, #1
06b58     06 0B 02 F1 | 	add	_var06, _var07
06b5c     02 0A 66 F0 | 	shl	_var06, #2
06b60     03 00 00 FF 
06b64     00 E4 85 F1 | 	sub	objptr, ##1536
06b68     F2 0A 02 F1 | 	add	_var06, objptr
06b6c     08 0A 06 F1 | 	add	_var06, #8
06b70     05 09 62 FC | 	wrlong	_var05, _var06
06b74     03 00 00 FF 
06b78     00 E4 05 F1 | 	add	objptr, ##1536
06b7c     F2 12 02 FB | 	rdlong	arg01, objptr
06b80     01 12 06 F1 | 	add	arg01, #1
06b84     F2 12 62 FC | 	wrlong	arg01, objptr
06b88     6A 00 00 FF 
06b8c     7C E4 85 F1 | 	sub	objptr, ##54396
06b90                 | _compile_error_ret
06b90     2D 00 64 FD | 	ret
06b94                 | 
06b94                 | ' 
06b94                 | ' sub compile_unknown() 
06b94                 | _compile_unknown
06b94     FF 04 06 F6 | 	mov	_var03, #255
06b98     17 00 06 F6 | 	mov	_var01, #23
06b9c     01 07 02 F6 | 	mov	_var04, _var02
06ba0     02 01 02 F6 | 	mov	_var01, _var03
06ba4     6A 00 00 FF 
06ba8     7C E4 05 F1 | 	add	objptr, ##54396
06bac     F2 08 02 FB | 	rdlong	_var05, objptr
06bb0     04 0B 02 F6 | 	mov	_var06, _var05
06bb4     01 0A 66 F0 | 	shl	_var06, #1
06bb8     04 0B 02 F1 | 	add	_var06, _var05
06bbc     02 0A 66 F0 | 	shl	_var06, #2
06bc0     03 00 00 FF 
06bc4     00 E4 85 F1 | 	sub	objptr, ##1536
06bc8     F2 0A 02 F1 | 	add	_var06, objptr
06bcc     05 2F 68 FC | 	wrlong	#23, _var06
06bd0     03 00 00 FF 
06bd4     00 E4 05 F1 | 	add	objptr, ##1536
06bd8     F2 0A 02 FB | 	rdlong	_var06, objptr
06bdc     05 09 02 F6 | 	mov	_var05, _var06
06be0     01 08 66 F0 | 	shl	_var05, #1
06be4     05 09 02 F1 | 	add	_var05, _var06
06be8     02 08 66 F0 | 	shl	_var05, #2
06bec     03 00 00 FF 
06bf0     00 E4 85 F1 | 	sub	objptr, ##1536
06bf4     F2 08 02 F1 | 	add	_var05, objptr
06bf8     04 08 06 F1 | 	add	_var05, #4
06bfc     04 07 62 FC | 	wrlong	_var04, _var05
06c00     03 00 00 FF 
06c04     00 E4 05 F1 | 	add	objptr, ##1536
06c08     F2 0A 02 FB | 	rdlong	_var06, objptr
06c0c     05 09 02 F6 | 	mov	_var05, _var06
06c10     01 08 66 F0 | 	shl	_var05, #1
06c14     05 09 02 F1 | 	add	_var05, _var06
06c18     02 08 66 F0 | 	shl	_var05, #2
06c1c     03 00 00 FF 
06c20     00 E4 85 F1 | 	sub	objptr, ##1536
06c24     F2 08 02 F1 | 	add	_var05, objptr
06c28     08 08 06 F1 | 	add	_var05, #8
06c2c     04 01 62 FC | 	wrlong	_var01, _var05
06c30     03 00 00 FF 
06c34     00 E4 05 F1 | 	add	objptr, ##1536
06c38     F2 0A 02 FB | 	rdlong	_var06, objptr
06c3c     01 0A 06 F1 | 	add	_var06, #1
06c40     F2 0A 62 FC | 	wrlong	_var06, objptr
06c44     6A 00 00 FF 
06c48     7C E4 85 F1 | 	sub	objptr, ##54396
06c4c                 | _compile_unknown_ret
06c4c     2D 00 64 FD | 	ret
06c50                 | 
06c50                 | ' 
06c50                 | ' function compile_fun_2p() as ulong
06c50                 | _compile_fun_2p
06c50     01 4A 05 F6 | 	mov	COUNT_, #1
06c54     A8 00 A0 FD | 	call	#pushregs_
06c58     C4 25 B0 FD | 	call	#_expr
06c5c                 | ' 
06c5c                 | ' expr()
06c5c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06c5c     57 00 00 FF 
06c60     44 E4 05 F1 | 	add	objptr, ##44612
06c64     F2 1E 02 FB | 	rdlong	local01, objptr
06c68     03 1E 66 F0 | 	shl	local01, #3
06c6c     02 00 00 FF 
06c70     38 E4 85 F1 | 	sub	objptr, ##1080
06c74     F2 1E 02 F1 | 	add	local01, objptr
06c78     04 1E 06 F1 | 	add	local01, #4
06c7c     0F 1F 02 FB | 	rdlong	local01, local01
06c80     11 1E 0E F2 | 	cmp	local01, #17 wz
06c84     55 00 00 FF 
06c88     0C E4 85 F1 | 	sub	objptr, ##43532
06c8c     15 FA 05 56 |  if_ne	mov	result1, #21
06c90     24 00 90 5D |  if_ne	jmp	#LR__0610
06c94     57 00 00 FF 
06c98     44 E4 05 F1 | 	add	objptr, ##44612
06c9c     F2 1E 02 FB | 	rdlong	local01, objptr
06ca0     01 1E 06 F1 | 	add	local01, #1
06ca4     F2 1E 62 FC | 	wrlong	local01, objptr
06ca8     57 00 00 FF 
06cac     44 E4 85 F1 | 	sub	objptr, ##44612
06cb0     6C 25 B0 FD | 	call	#_expr
06cb4     00 FA 05 F6 | 	mov	result1, #0
06cb8                 | LR__0610
06cb8     A7 F0 03 F6 | 	mov	ptra, fp
06cbc     B2 00 A0 FD | 	call	#popregs_
06cc0                 | _compile_fun_2p_ret
06cc0     2D 00 64 FD | 	ret
06cc4                 | 
06cc4                 | ' 
06cc4                 | ' function compile_fun_3p() as ulong
06cc4                 | _compile_fun_3p
06cc4     01 4A 05 F6 | 	mov	COUNT_, #1
06cc8     A8 00 A0 FD | 	call	#pushregs_
06ccc     50 25 B0 FD | 	call	#_expr
06cd0                 | ' 
06cd0                 | ' expr()
06cd0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06cd0     57 00 00 FF 
06cd4     44 E4 05 F1 | 	add	objptr, ##44612
06cd8     F2 1E 02 FB | 	rdlong	local01, objptr
06cdc     03 1E 66 F0 | 	shl	local01, #3
06ce0     02 00 00 FF 
06ce4     38 E4 85 F1 | 	sub	objptr, ##1080
06ce8     F2 1E 02 F1 | 	add	local01, objptr
06cec     04 1E 06 F1 | 	add	local01, #4
06cf0     0F 1F 02 FB | 	rdlong	local01, local01
06cf4     11 1E 0E F2 | 	cmp	local01, #17 wz
06cf8     55 00 00 FF 
06cfc     0C E4 85 F1 | 	sub	objptr, ##43532
06d00     15 FA 05 56 |  if_ne	mov	result1, #21
06d04     7C 00 90 5D |  if_ne	jmp	#LR__0620
06d08     57 00 00 FF 
06d0c     44 E4 05 F1 | 	add	objptr, ##44612
06d10     F2 1E 02 FB | 	rdlong	local01, objptr
06d14     01 1E 06 F1 | 	add	local01, #1
06d18     F2 1E 62 FC | 	wrlong	local01, objptr
06d1c     57 00 00 FF 
06d20     44 E4 85 F1 | 	sub	objptr, ##44612
06d24     F8 24 B0 FD | 	call	#_expr
06d28                 | ' expr()
06d28                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06d28     57 00 00 FF 
06d2c     44 E4 05 F1 | 	add	objptr, ##44612
06d30     F2 1E 02 FB | 	rdlong	local01, objptr
06d34     03 1E 66 F0 | 	shl	local01, #3
06d38     02 00 00 FF 
06d3c     38 E4 85 F1 | 	sub	objptr, ##1080
06d40     F2 1E 02 F1 | 	add	local01, objptr
06d44     04 1E 06 F1 | 	add	local01, #4
06d48     0F 1F 02 FB | 	rdlong	local01, local01
06d4c     11 1E 0E F2 | 	cmp	local01, #17 wz
06d50     55 00 00 FF 
06d54     0C E4 85 F1 | 	sub	objptr, ##43532
06d58     15 FA 05 56 |  if_ne	mov	result1, #21
06d5c     24 00 90 5D |  if_ne	jmp	#LR__0620
06d60     57 00 00 FF 
06d64     44 E4 05 F1 | 	add	objptr, ##44612
06d68     F2 1E 02 FB | 	rdlong	local01, objptr
06d6c     01 1E 06 F1 | 	add	local01, #1
06d70     F2 1E 62 FC | 	wrlong	local01, objptr
06d74     57 00 00 FF 
06d78     44 E4 85 F1 | 	sub	objptr, ##44612
06d7c     A0 24 B0 FD | 	call	#_expr
06d80     00 FA 05 F6 | 	mov	result1, #0
06d84                 | LR__0620
06d84     A7 F0 03 F6 | 	mov	ptra, fp
06d88     B2 00 A0 FD | 	call	#popregs_
06d8c                 | _compile_fun_3p_ret
06d8c     2D 00 64 FD | 	ret
06d90                 | 
06d90                 | ' 
06d90                 | ' function compile_fun_4p() as ulong
06d90                 | _compile_fun_4p
06d90     01 4A 05 F6 | 	mov	COUNT_, #1
06d94     A8 00 A0 FD | 	call	#pushregs_
06d98     84 24 B0 FD | 	call	#_expr
06d9c                 | ' 
06d9c                 | ' expr()
06d9c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06d9c     57 00 00 FF 
06da0     44 E4 05 F1 | 	add	objptr, ##44612
06da4     F2 1E 02 FB | 	rdlong	local01, objptr
06da8     03 1E 66 F0 | 	shl	local01, #3
06dac     02 00 00 FF 
06db0     38 E4 85 F1 | 	sub	objptr, ##1080
06db4     F2 1E 02 F1 | 	add	local01, objptr
06db8     04 1E 06 F1 | 	add	local01, #4
06dbc     0F 1F 02 FB | 	rdlong	local01, local01
06dc0     11 1E 0E F2 | 	cmp	local01, #17 wz
06dc4     55 00 00 FF 
06dc8     0C E4 85 F1 | 	sub	objptr, ##43532
06dcc     15 FA 05 56 |  if_ne	mov	result1, #21
06dd0     D4 00 90 5D |  if_ne	jmp	#LR__0630
06dd4     57 00 00 FF 
06dd8     44 E4 05 F1 | 	add	objptr, ##44612
06ddc     F2 1E 02 FB | 	rdlong	local01, objptr
06de0     01 1E 06 F1 | 	add	local01, #1
06de4     F2 1E 62 FC | 	wrlong	local01, objptr
06de8     57 00 00 FF 
06dec     44 E4 85 F1 | 	sub	objptr, ##44612
06df0     2C 24 B0 FD | 	call	#_expr
06df4                 | ' expr()
06df4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06df4     57 00 00 FF 
06df8     44 E4 05 F1 | 	add	objptr, ##44612
06dfc     F2 1E 02 FB | 	rdlong	local01, objptr
06e00     03 1E 66 F0 | 	shl	local01, #3
06e04     02 00 00 FF 
06e08     38 E4 85 F1 | 	sub	objptr, ##1080
06e0c     F2 1E 02 F1 | 	add	local01, objptr
06e10     04 1E 06 F1 | 	add	local01, #4
06e14     0F 1F 02 FB | 	rdlong	local01, local01
06e18     11 1E 0E F2 | 	cmp	local01, #17 wz
06e1c     55 00 00 FF 
06e20     0C E4 85 F1 | 	sub	objptr, ##43532
06e24     15 FA 05 56 |  if_ne	mov	result1, #21
06e28     7C 00 90 5D |  if_ne	jmp	#LR__0630
06e2c     57 00 00 FF 
06e30     44 E4 05 F1 | 	add	objptr, ##44612
06e34     F2 1E 02 FB | 	rdlong	local01, objptr
06e38     01 1E 06 F1 | 	add	local01, #1
06e3c     F2 1E 62 FC | 	wrlong	local01, objptr
06e40     57 00 00 FF 
06e44     44 E4 85 F1 | 	sub	objptr, ##44612
06e48     D4 23 B0 FD | 	call	#_expr
06e4c                 | ' expr()
06e4c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06e4c     57 00 00 FF 
06e50     44 E4 05 F1 | 	add	objptr, ##44612
06e54     F2 1E 02 FB | 	rdlong	local01, objptr
06e58     03 1E 66 F0 | 	shl	local01, #3
06e5c     02 00 00 FF 
06e60     38 E4 85 F1 | 	sub	objptr, ##1080
06e64     F2 1E 02 F1 | 	add	local01, objptr
06e68     04 1E 06 F1 | 	add	local01, #4
06e6c     0F 1F 02 FB | 	rdlong	local01, local01
06e70     11 1E 0E F2 | 	cmp	local01, #17 wz
06e74     55 00 00 FF 
06e78     0C E4 85 F1 | 	sub	objptr, ##43532
06e7c     15 FA 05 56 |  if_ne	mov	result1, #21
06e80     24 00 90 5D |  if_ne	jmp	#LR__0630
06e84     57 00 00 FF 
06e88     44 E4 05 F1 | 	add	objptr, ##44612
06e8c     F2 1E 02 FB | 	rdlong	local01, objptr
06e90     01 1E 06 F1 | 	add	local01, #1
06e94     F2 1E 62 FC | 	wrlong	local01, objptr
06e98     57 00 00 FF 
06e9c     44 E4 85 F1 | 	sub	objptr, ##44612
06ea0     7C 23 B0 FD | 	call	#_expr
06ea4     00 FA 05 F6 | 	mov	result1, #0
06ea8                 | LR__0630
06ea8     A7 F0 03 F6 | 	mov	ptra, fp
06eac     B2 00 A0 FD | 	call	#popregs_
06eb0                 | _compile_fun_4p_ret
06eb0     2D 00 64 FD | 	ret
06eb4                 | 
06eb4                 | ' 
06eb4                 | ' 
06eb4                 | ' function compile_fun_5p() as ulong
06eb4                 | _compile_fun_5p
06eb4     01 4A 05 F6 | 	mov	COUNT_, #1
06eb8     A8 00 A0 FD | 	call	#pushregs_
06ebc     60 23 B0 FD | 	call	#_expr
06ec0                 | ' 
06ec0                 | ' expr()
06ec0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06ec0     57 00 00 FF 
06ec4     44 E4 05 F1 | 	add	objptr, ##44612
06ec8     F2 1E 02 FB | 	rdlong	local01, objptr
06ecc     03 1E 66 F0 | 	shl	local01, #3
06ed0     02 00 00 FF 
06ed4     38 E4 85 F1 | 	sub	objptr, ##1080
06ed8     F2 1E 02 F1 | 	add	local01, objptr
06edc     04 1E 06 F1 | 	add	local01, #4
06ee0     0F 1F 02 FB | 	rdlong	local01, local01
06ee4     11 1E 0E F2 | 	cmp	local01, #17 wz
06ee8     55 00 00 FF 
06eec     0C E4 85 F1 | 	sub	objptr, ##43532
06ef0     15 FA 05 56 |  if_ne	mov	result1, #21
06ef4     2C 01 90 5D |  if_ne	jmp	#LR__0640
06ef8     57 00 00 FF 
06efc     44 E4 05 F1 | 	add	objptr, ##44612
06f00     F2 1E 02 FB | 	rdlong	local01, objptr
06f04     01 1E 06 F1 | 	add	local01, #1
06f08     F2 1E 62 FC | 	wrlong	local01, objptr
06f0c     57 00 00 FF 
06f10     44 E4 85 F1 | 	sub	objptr, ##44612
06f14     08 23 B0 FD | 	call	#_expr
06f18                 | ' expr()
06f18                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06f18     57 00 00 FF 
06f1c     44 E4 05 F1 | 	add	objptr, ##44612
06f20     F2 1E 02 FB | 	rdlong	local01, objptr
06f24     03 1E 66 F0 | 	shl	local01, #3
06f28     02 00 00 FF 
06f2c     38 E4 85 F1 | 	sub	objptr, ##1080
06f30     F2 1E 02 F1 | 	add	local01, objptr
06f34     04 1E 06 F1 | 	add	local01, #4
06f38     0F 1F 02 FB | 	rdlong	local01, local01
06f3c     11 1E 0E F2 | 	cmp	local01, #17 wz
06f40     55 00 00 FF 
06f44     0C E4 85 F1 | 	sub	objptr, ##43532
06f48     15 FA 05 56 |  if_ne	mov	result1, #21
06f4c     D4 00 90 5D |  if_ne	jmp	#LR__0640
06f50     57 00 00 FF 
06f54     44 E4 05 F1 | 	add	objptr, ##44612
06f58     F2 1E 02 FB | 	rdlong	local01, objptr
06f5c     01 1E 06 F1 | 	add	local01, #1
06f60     F2 1E 62 FC | 	wrlong	local01, objptr
06f64     57 00 00 FF 
06f68     44 E4 85 F1 | 	sub	objptr, ##44612
06f6c     B0 22 B0 FD | 	call	#_expr
06f70                 | ' expr()
06f70                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06f70     57 00 00 FF 
06f74     44 E4 05 F1 | 	add	objptr, ##44612
06f78     F2 1E 02 FB | 	rdlong	local01, objptr
06f7c     03 1E 66 F0 | 	shl	local01, #3
06f80     02 00 00 FF 
06f84     38 E4 85 F1 | 	sub	objptr, ##1080
06f88     F2 1E 02 F1 | 	add	local01, objptr
06f8c     04 1E 06 F1 | 	add	local01, #4
06f90     0F 1F 02 FB | 	rdlong	local01, local01
06f94     11 1E 0E F2 | 	cmp	local01, #17 wz
06f98     55 00 00 FF 
06f9c     0C E4 85 F1 | 	sub	objptr, ##43532
06fa0     15 FA 05 56 |  if_ne	mov	result1, #21
06fa4     7C 00 90 5D |  if_ne	jmp	#LR__0640
06fa8     57 00 00 FF 
06fac     44 E4 05 F1 | 	add	objptr, ##44612
06fb0     F2 1E 02 FB | 	rdlong	local01, objptr
06fb4     01 1E 06 F1 | 	add	local01, #1
06fb8     F2 1E 62 FC | 	wrlong	local01, objptr
06fbc     57 00 00 FF 
06fc0     44 E4 85 F1 | 	sub	objptr, ##44612
06fc4     58 22 B0 FD | 	call	#_expr
06fc8                 | ' expr()
06fc8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06fc8     57 00 00 FF 
06fcc     44 E4 05 F1 | 	add	objptr, ##44612
06fd0     F2 1E 02 FB | 	rdlong	local01, objptr
06fd4     03 1E 66 F0 | 	shl	local01, #3
06fd8     02 00 00 FF 
06fdc     38 E4 85 F1 | 	sub	objptr, ##1080
06fe0     F2 1E 02 F1 | 	add	local01, objptr
06fe4     04 1E 06 F1 | 	add	local01, #4
06fe8     0F 1F 02 FB | 	rdlong	local01, local01
06fec     11 1E 0E F2 | 	cmp	local01, #17 wz
06ff0     55 00 00 FF 
06ff4     0C E4 85 F1 | 	sub	objptr, ##43532
06ff8     15 FA 05 56 |  if_ne	mov	result1, #21
06ffc     24 00 90 5D |  if_ne	jmp	#LR__0640
07000     57 00 00 FF 
07004     44 E4 05 F1 | 	add	objptr, ##44612
07008     F2 1E 02 FB | 	rdlong	local01, objptr
0700c     01 1E 06 F1 | 	add	local01, #1
07010     F2 1E 62 FC | 	wrlong	local01, objptr
07014     57 00 00 FF 
07018     44 E4 85 F1 | 	sub	objptr, ##44612
0701c     00 22 B0 FD | 	call	#_expr
07020     00 FA 05 F6 | 	mov	result1, #0
07024                 | LR__0640
07024     A7 F0 03 F6 | 	mov	ptra, fp
07028     B2 00 A0 FD | 	call	#popregs_
0702c                 | _compile_fun_5p_ret
0702c     2D 00 64 FD | 	ret
07030                 | 
07030                 | ' 
07030                 | ' function compile_fun_varp() as ulong 
07030                 | _compile_fun_varp
07030     02 4A 05 F6 | 	mov	COUNT_, #2
07034     A8 00 A0 FD | 	call	#pushregs_
07038     00 1E 06 F6 | 	mov	local01, #0
0703c                 | ' i=0
0703c                 | ' if lparts(ct).token<>token_end then
0703c     57 00 00 FF 
07040     44 E4 05 F1 | 	add	objptr, ##44612
07044     F2 20 02 FB | 	rdlong	local02, objptr
07048     03 20 66 F0 | 	shl	local02, #3
0704c     02 00 00 FF 
07050     38 E4 85 F1 | 	sub	objptr, ##1080
07054     F2 20 02 F1 | 	add	local02, objptr
07058     04 20 06 F1 | 	add	local02, #4
0705c     10 21 02 FB | 	rdlong	local02, local02
07060     FE 21 0E F2 | 	cmp	local02, #510 wz
07064     55 00 00 FF 
07068     0C E4 85 F1 | 	sub	objptr, ##43532
0706c     5C 00 90 AD |  if_e	jmp	#LR__0652
07070                 | '   do
07070                 | LR__0650
07070     AC 21 B0 FD | 	call	#_expr
07074     01 1E 06 F1 | 	add	local01, #1
07078                 | '   expr()
07078                 | '    i+=1
07078                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
07078     57 00 00 FF 
0707c     44 E4 05 F1 | 	add	objptr, ##44612
07080     F2 20 02 FB | 	rdlong	local02, objptr
07084     03 20 66 F0 | 	shl	local02, #3
07088     02 00 00 FF 
0708c     38 E4 85 F1 | 	sub	objptr, ##1080
07090     F2 20 02 F1 | 	add	local02, objptr
07094     04 20 06 F1 | 	add	local02, #4
07098     10 21 02 FB | 	rdlong	local02, local02
0709c     11 20 0E F2 | 	cmp	local02, #17 wz
070a0     55 00 00 FF 
070a4     0C E4 85 F1 | 	sub	objptr, ##43532
070a8     20 00 90 5D |  if_ne	jmp	#LR__0651
070ac     57 00 00 FF 
070b0     44 E4 05 F1 | 	add	objptr, ##44612
070b4     F2 20 02 FB | 	rdlong	local02, objptr
070b8     01 20 06 F1 | 	add	local02, #1
070bc     F2 20 62 FC | 	wrlong	local02, objptr
070c0     57 00 00 FF 
070c4     44 E4 85 F1 | 	sub	objptr, ##44612
070c8     A4 FF 9F FD | 	jmp	#LR__0650
070cc                 | LR__0651
070cc                 | LR__0652
070cc                 | ' return i
070cc     0F FB 01 F6 | 	mov	result1, local01
070d0     A7 F0 03 F6 | 	mov	ptra, fp
070d4     B2 00 A0 FD | 	call	#popregs_
070d8                 | _compile_fun_varp_ret
070d8     2D 00 64 FD | 	ret
070dc                 | 
070dc                 | ' 
070dc                 | ' 
070dc                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
070dc                 | _compile_print
070dc     0B 4A 05 F6 | 	mov	COUNT_, #11
070e0     A8 00 A0 FD | 	call	#pushregs_
070e4     00 1E 06 F6 | 	mov	local01, #0
070e8     1D 22 06 F6 | 	mov	local03, #29
070ec                 | ' t1.result.uresult=0 : t1.result_type=result_uint
070ec                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
070ec     57 00 00 FF 
070f0     44 E4 05 F1 | 	add	objptr, ##44612
070f4     F2 24 02 FB | 	rdlong	local04, objptr
070f8     03 24 66 F0 | 	shl	local04, #3
070fc     02 00 00 FF 
07100     38 E4 85 F1 | 	sub	objptr, ##1080
07104     F2 24 02 F1 | 	add	local04, objptr
07108     04 24 06 F1 | 	add	local04, #4
0710c     12 25 02 FB | 	rdlong	local04, local04
07110     FE 25 0E F2 | 	cmp	local04, #510 wz
07114     55 00 00 FF 
07118     0C E4 85 F1 | 	sub	objptr, ##43532
0711c     68 01 90 5D |  if_ne	jmp	#LR__0660
07120     20 22 06 F6 | 	mov	local03, #32
07124     0F 27 02 F6 | 	mov	local05, local01
07128     10 29 02 F6 | 	mov	local06, local02
0712c     11 2B 02 F6 | 	mov	local07, local03
07130     6A 00 00 FF 
07134     7C E4 05 F1 | 	add	objptr, ##54396
07138     F2 2C 02 FB | 	rdlong	local08, objptr
0713c     16 2F 02 F6 | 	mov	local09, local08
07140     01 2E 66 F0 | 	shl	local09, #1
07144     16 2F 02 F1 | 	add	local09, local08
07148     02 2E 66 F0 | 	shl	local09, #2
0714c     03 00 00 FF 
07150     00 E4 85 F1 | 	sub	objptr, ##1536
07154     F2 2E 02 F1 | 	add	local09, objptr
07158     17 27 62 FC | 	wrlong	local05, local09
0715c     03 00 00 FF 
07160     00 E4 05 F1 | 	add	objptr, ##1536
07164     F2 26 02 FB | 	rdlong	local05, objptr
07168     13 31 02 F6 | 	mov	local10, local05
0716c     01 30 66 F0 | 	shl	local10, #1
07170     13 31 02 F1 | 	add	local10, local05
07174     02 30 66 F0 | 	shl	local10, #2
07178     03 00 00 FF 
0717c     00 E4 85 F1 | 	sub	objptr, ##1536
07180     F2 30 02 F1 | 	add	local10, objptr
07184     04 30 06 F1 | 	add	local10, #4
07188     18 29 62 FC | 	wrlong	local06, local10
0718c     03 00 00 FF 
07190     00 E4 05 F1 | 	add	objptr, ##1536
07194     F2 26 02 FB | 	rdlong	local05, objptr
07198     13 33 02 F6 | 	mov	local11, local05
0719c     01 32 66 F0 | 	shl	local11, #1
071a0     13 33 02 F1 | 	add	local11, local05
071a4     02 32 66 F0 | 	shl	local11, #2
071a8     03 00 00 FF 
071ac     00 E4 85 F1 | 	sub	objptr, ##1536
071b0     F2 32 02 F1 | 	add	local11, objptr
071b4     08 32 06 F1 | 	add	local11, #8
071b8     19 2B 62 FC | 	wrlong	local07, local11
071bc     03 00 00 FF 
071c0     00 E4 05 F1 | 	add	objptr, ##1536
071c4     F2 26 02 FB | 	rdlong	local05, objptr
071c8     01 26 06 F1 | 	add	local05, #1
071cc     F2 26 62 FC | 	wrlong	local05, objptr
071d0     44 22 06 F6 | 	mov	local03, #68
071d4     0F 27 02 F6 | 	mov	local05, local01
071d8     10 29 02 F6 | 	mov	local06, local02
071dc     11 2B 02 F6 | 	mov	local07, local03
071e0     F2 2C 02 FB | 	rdlong	local08, objptr
071e4     16 2F 02 F6 | 	mov	local09, local08
071e8     01 2E 66 F0 | 	shl	local09, #1
071ec     16 2F 02 F1 | 	add	local09, local08
071f0     02 2E 66 F0 | 	shl	local09, #2
071f4     03 00 00 FF 
071f8     00 E4 85 F1 | 	sub	objptr, ##1536
071fc     F2 2E 02 F1 | 	add	local09, objptr
07200     17 27 62 FC | 	wrlong	local05, local09
07204     03 00 00 FF 
07208     00 E4 05 F1 | 	add	objptr, ##1536
0720c     F2 32 02 FB | 	rdlong	local11, objptr
07210     19 31 02 F6 | 	mov	local10, local11
07214     01 30 66 F0 | 	shl	local10, #1
07218     19 31 02 F1 | 	add	local10, local11
0721c     02 30 66 F0 | 	shl	local10, #2
07220     03 00 00 FF 
07224     00 E4 85 F1 | 	sub	objptr, ##1536
07228     F2 30 02 F1 | 	add	local10, objptr
0722c     04 30 06 F1 | 	add	local10, #4
07230     18 29 62 FC | 	wrlong	local06, local10
07234     03 00 00 FF 
07238     00 E4 05 F1 | 	add	objptr, ##1536
0723c     F2 30 02 FB | 	rdlong	local10, objptr
07240     18 33 02 F6 | 	mov	local11, local10
07244     01 32 66 F0 | 	shl	local11, #1
07248     18 33 02 F1 | 	add	local11, local10
0724c     02 32 66 F0 | 	shl	local11, #2
07250     03 00 00 FF 
07254     00 E4 85 F1 | 	sub	objptr, ##1536
07258     F2 32 02 F1 | 	add	local11, objptr
0725c     08 32 06 F1 | 	add	local11, #8
07260     19 2B 62 FC | 	wrlong	local07, local11
07264     03 00 00 FF 
07268     00 E4 05 F1 | 	add	objptr, ##1536
0726c     F2 26 02 FB | 	rdlong	local05, objptr
07270     01 26 06 F1 | 	add	local05, #1
07274     F2 26 62 FC | 	wrlong	local05, objptr
07278     6A 00 00 FF 
0727c     7C E4 85 F1 | 	sub	objptr, ##54396
07280     00 FA 05 F6 | 	mov	result1, #0
07284     20 05 90 FD | 	jmp	#LR__0667
07288                 | LR__0660
07288                 | ' do
07288                 | LR__0661
07288     94 1F B0 FD | 	call	#_expr
0728c                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
0728c                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0728c     57 00 00 FF 
07290     44 E4 05 F1 | 	add	objptr, ##44612
07294     F2 24 02 FB | 	rdlong	local04, objptr
07298     03 24 66 F0 | 	shl	local04, #3
0729c     02 00 00 FF 
072a0     38 E4 85 F1 | 	sub	objptr, ##1080
072a4     F2 24 02 F1 | 	add	local04, objptr
072a8     04 24 06 F1 | 	add	local04, #4
072ac     12 2D 02 FB | 	rdlong	local08, local04
072b0     11 2C 0E F2 | 	cmp	local08, #17 wz
072b4     55 00 00 FF 
072b8     0C E4 85 F1 | 	sub	objptr, ##43532
072bc     60 01 90 5D |  if_ne	jmp	#LR__0662
072c0     21 22 06 F6 | 	mov	local03, #33
072c4     0F 27 02 F6 | 	mov	local05, local01
072c8     10 29 02 F6 | 	mov	local06, local02
072cc     11 2B 02 F6 | 	mov	local07, local03
072d0     6A 00 00 FF 
072d4     7C E4 05 F1 | 	add	objptr, ##54396
072d8     F2 2C 02 FB | 	rdlong	local08, objptr
072dc     16 2F 02 F6 | 	mov	local09, local08
072e0     01 2E 66 F0 | 	shl	local09, #1
072e4     16 2F 02 F1 | 	add	local09, local08
072e8     02 2E 66 F0 | 	shl	local09, #2
072ec     03 00 00 FF 
072f0     00 E4 85 F1 | 	sub	objptr, ##1536
072f4     F2 2E 02 F1 | 	add	local09, objptr
072f8     17 27 62 FC | 	wrlong	local05, local09
072fc     03 00 00 FF 
07300     00 E4 05 F1 | 	add	objptr, ##1536
07304     F2 32 02 FB | 	rdlong	local11, objptr
07308     19 31 02 F6 | 	mov	local10, local11
0730c     01 30 66 F0 | 	shl	local10, #1
07310     19 31 02 F1 | 	add	local10, local11
07314     02 30 66 F0 | 	shl	local10, #2
07318     03 00 00 FF 
0731c     00 E4 85 F1 | 	sub	objptr, ##1536
07320     F2 30 02 F1 | 	add	local10, objptr
07324     04 30 06 F1 | 	add	local10, #4
07328     18 29 62 FC | 	wrlong	local06, local10
0732c     03 00 00 FF 
07330     00 E4 05 F1 | 	add	objptr, ##1536
07334     F2 26 02 FB | 	rdlong	local05, objptr
07338     13 33 02 F6 | 	mov	local11, local05
0733c     01 32 66 F0 | 	shl	local11, #1
07340     13 33 02 F1 | 	add	local11, local05
07344     02 32 66 F0 | 	shl	local11, #2
07348     03 00 00 FF 
0734c     00 E4 85 F1 | 	sub	objptr, ##1536
07350     F2 32 02 F1 | 	add	local11, objptr
07354     08 32 06 F1 | 	add	local11, #8
07358     19 2B 62 FC | 	wrlong	local07, local11
0735c     03 00 00 FF 
07360     00 E4 05 F1 | 	add	objptr, ##1536
07364     F2 26 02 FB | 	rdlong	local05, objptr
07368     01 26 06 F1 | 	add	local05, #1
0736c     F2 26 62 FC | 	wrlong	local05, objptr
07370     44 22 06 F6 | 	mov	local03, #68
07374     0F 27 02 F6 | 	mov	local05, local01
07378     10 29 02 F6 | 	mov	local06, local02
0737c     11 2B 02 F6 | 	mov	local07, local03
07380     F2 2C 02 FB | 	rdlong	local08, objptr
07384     16 2F 02 F6 | 	mov	local09, local08
07388     01 2E 66 F0 | 	shl	local09, #1
0738c     16 2F 02 F1 | 	add	local09, local08
07390     02 2E 66 F0 | 	shl	local09, #2
07394     03 00 00 FF 
07398     00 E4 85 F1 | 	sub	objptr, ##1536
0739c     F2 2E 02 F1 | 	add	local09, objptr
073a0     17 27 62 FC | 	wrlong	local05, local09
073a4     03 00 00 FF 
073a8     00 E4 05 F1 | 	add	objptr, ##1536
073ac     F2 32 02 FB | 	rdlong	local11, objptr
073b0     19 31 02 F6 | 	mov	local10, local11
073b4     01 30 66 F0 | 	shl	local10, #1
073b8     19 31 02 F1 | 	add	local10, local11
073bc     02 30 66 F0 | 	shl	local10, #2
073c0     03 00 00 FF 
073c4     00 E4 85 F1 | 	sub	objptr, ##1536
073c8     F2 30 02 F1 | 	add	local10, objptr
073cc     04 30 06 F1 | 	add	local10, #4
073d0     18 29 62 FC | 	wrlong	local06, local10
073d4     03 00 00 FF 
073d8     00 E4 05 F1 | 	add	objptr, ##1536
073dc     F2 30 02 FB | 	rdlong	local10, objptr
073e0     18 33 02 F6 | 	mov	local11, local10
073e4     01 32 66 F0 | 	shl	local11, #1
073e8     18 33 02 F1 | 	add	local11, local10
073ec     02 32 66 F0 | 	shl	local11, #2
073f0     03 00 00 FF 
073f4     00 E4 85 F1 | 	sub	objptr, ##1536
073f8     F2 32 02 F1 | 	add	local11, objptr
073fc     08 32 06 F1 | 	add	local11, #8
07400     19 2B 62 FC | 	wrlong	local07, local11
07404     03 00 00 FF 
07408     00 E4 05 F1 | 	add	objptr, ##1536
0740c     F2 26 02 FB | 	rdlong	local05, objptr
07410     01 26 06 F1 | 	add	local05, #1
07414     F2 26 62 FC | 	wrlong	local05, objptr
07418     6A 00 00 FF 
0741c     7C E4 85 F1 | 	sub	objptr, ##54396
07420                 | LR__0662
07420                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
07420     57 00 00 FF 
07424     44 E4 05 F1 | 	add	objptr, ##44612
07428     F2 24 02 FB | 	rdlong	local04, objptr
0742c     03 24 66 F0 | 	shl	local04, #3
07430     02 00 00 FF 
07434     38 E4 85 F1 | 	sub	objptr, ##1080
07438     F2 24 02 F1 | 	add	local04, objptr
0743c     04 24 06 F1 | 	add	local04, #4
07440     12 2D 02 FB | 	rdlong	local08, local04
07444     12 2C 0E F2 | 	cmp	local08, #18 wz
07448     55 00 00 FF 
0744c     0C E4 85 F1 | 	sub	objptr, ##43532
07450     60 01 90 5D |  if_ne	jmp	#LR__0663
07454     22 22 06 F6 | 	mov	local03, #34
07458     0F 27 02 F6 | 	mov	local05, local01
0745c     10 29 02 F6 | 	mov	local06, local02
07460     11 2B 02 F6 | 	mov	local07, local03
07464     6A 00 00 FF 
07468     7C E4 05 F1 | 	add	objptr, ##54396
0746c     F2 2C 02 FB | 	rdlong	local08, objptr
07470     16 2F 02 F6 | 	mov	local09, local08
07474     01 2E 66 F0 | 	shl	local09, #1
07478     16 2F 02 F1 | 	add	local09, local08
0747c     02 2E 66 F0 | 	shl	local09, #2
07480     03 00 00 FF 
07484     00 E4 85 F1 | 	sub	objptr, ##1536
07488     F2 2E 02 F1 | 	add	local09, objptr
0748c     17 27 62 FC | 	wrlong	local05, local09
07490     03 00 00 FF 
07494     00 E4 05 F1 | 	add	objptr, ##1536
07498     F2 32 02 FB | 	rdlong	local11, objptr
0749c     19 31 02 F6 | 	mov	local10, local11
074a0     01 30 66 F0 | 	shl	local10, #1
074a4     19 31 02 F1 | 	add	local10, local11
074a8     02 30 66 F0 | 	shl	local10, #2
074ac     03 00 00 FF 
074b0     00 E4 85 F1 | 	sub	objptr, ##1536
074b4     F2 30 02 F1 | 	add	local10, objptr
074b8     04 30 06 F1 | 	add	local10, #4
074bc     18 29 62 FC | 	wrlong	local06, local10
074c0     03 00 00 FF 
074c4     00 E4 05 F1 | 	add	objptr, ##1536
074c8     F2 26 02 FB | 	rdlong	local05, objptr
074cc     13 33 02 F6 | 	mov	local11, local05
074d0     01 32 66 F0 | 	shl	local11, #1
074d4     13 33 02 F1 | 	add	local11, local05
074d8     02 32 66 F0 | 	shl	local11, #2
074dc     03 00 00 FF 
074e0     00 E4 85 F1 | 	sub	objptr, ##1536
074e4     F2 32 02 F1 | 	add	local11, objptr
074e8     08 32 06 F1 | 	add	local11, #8
074ec     19 2B 62 FC | 	wrlong	local07, local11
074f0     03 00 00 FF 
074f4     00 E4 05 F1 | 	add	objptr, ##1536
074f8     F2 26 02 FB | 	rdlong	local05, objptr
074fc     01 26 06 F1 | 	add	local05, #1
07500     F2 26 62 FC | 	wrlong	local05, objptr
07504     44 22 06 F6 | 	mov	local03, #68
07508     0F 27 02 F6 | 	mov	local05, local01
0750c     10 29 02 F6 | 	mov	local06, local02
07510     11 2B 02 F6 | 	mov	local07, local03
07514     F2 2C 02 FB | 	rdlong	local08, objptr
07518     16 2F 02 F6 | 	mov	local09, local08
0751c     01 2E 66 F0 | 	shl	local09, #1
07520     16 2F 02 F1 | 	add	local09, local08
07524     02 2E 66 F0 | 	shl	local09, #2
07528     03 00 00 FF 
0752c     00 E4 85 F1 | 	sub	objptr, ##1536
07530     F2 2E 02 F1 | 	add	local09, objptr
07534     17 27 62 FC | 	wrlong	local05, local09
07538     03 00 00 FF 
0753c     00 E4 05 F1 | 	add	objptr, ##1536
07540     F2 32 02 FB | 	rdlong	local11, objptr
07544     19 31 02 F6 | 	mov	local10, local11
07548     01 30 66 F0 | 	shl	local10, #1
0754c     19 31 02 F1 | 	add	local10, local11
07550     02 30 66 F0 | 	shl	local10, #2
07554     03 00 00 FF 
07558     00 E4 85 F1 | 	sub	objptr, ##1536
0755c     F2 30 02 F1 | 	add	local10, objptr
07560     04 30 06 F1 | 	add	local10, #4
07564     18 29 62 FC | 	wrlong	local06, local10
07568     03 00 00 FF 
0756c     00 E4 05 F1 | 	add	objptr, ##1536
07570     F2 30 02 FB | 	rdlong	local10, objptr
07574     18 33 02 F6 | 	mov	local11, local10
07578     01 32 66 F0 | 	shl	local11, #1
0757c     18 33 02 F1 | 	add	local11, local10
07580     02 32 66 F0 | 	shl	local11, #2
07584     03 00 00 FF 
07588     00 E4 85 F1 | 	sub	objptr, ##1536
0758c     F2 32 02 F1 | 	add	local11, objptr
07590     08 32 06 F1 | 	add	local11, #8
07594     19 2B 62 FC | 	wrlong	local07, local11
07598     03 00 00 FF 
0759c     00 E4 05 F1 | 	add	objptr, ##1536
075a0     F2 26 02 FB | 	rdlong	local05, objptr
075a4     01 26 06 F1 | 	add	local05, #1
075a8     F2 26 62 FC | 	wrlong	local05, objptr
075ac     6A 00 00 FF 
075b0     7C E4 85 F1 | 	sub	objptr, ##54396
075b4                 | LR__0663
075b4                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
075b4     57 00 00 FF 
075b8     44 E4 05 F1 | 	add	objptr, ##44612
075bc     F2 24 02 FB | 	rdlong	local04, objptr
075c0     03 24 66 F0 | 	shl	local04, #3
075c4     02 00 00 FF 
075c8     38 E4 85 F1 | 	sub	objptr, ##1080
075cc     F2 24 02 F1 | 	add	local04, objptr
075d0     04 24 06 F1 | 	add	local04, #4
075d4     12 2D 02 FB | 	rdlong	local08, local04
075d8     FE 2D 0E F2 | 	cmp	local08, #510 wz
075dc     55 00 00 FF 
075e0     0C E4 85 F1 | 	sub	objptr, ##43532
075e4     B8 00 90 5D |  if_ne	jmp	#LR__0664
075e8     44 22 06 F6 | 	mov	local03, #68
075ec     0F 27 02 F6 | 	mov	local05, local01
075f0     10 29 02 F6 | 	mov	local06, local02
075f4     11 2B 02 F6 | 	mov	local07, local03
075f8     6A 00 00 FF 
075fc     7C E4 05 F1 | 	add	objptr, ##54396
07600     F2 2C 02 FB | 	rdlong	local08, objptr
07604     16 2F 02 F6 | 	mov	local09, local08
07608     01 2E 66 F0 | 	shl	local09, #1
0760c     16 2F 02 F1 | 	add	local09, local08
07610     02 2E 66 F0 | 	shl	local09, #2
07614     03 00 00 FF 
07618     00 E4 85 F1 | 	sub	objptr, ##1536
0761c     F2 2E 02 F1 | 	add	local09, objptr
07620     17 27 62 FC | 	wrlong	local05, local09
07624     03 00 00 FF 
07628     00 E4 05 F1 | 	add	objptr, ##1536
0762c     F2 32 02 FB | 	rdlong	local11, objptr
07630     19 31 02 F6 | 	mov	local10, local11
07634     01 30 66 F0 | 	shl	local10, #1
07638     19 31 02 F1 | 	add	local10, local11
0763c     02 30 66 F0 | 	shl	local10, #2
07640     03 00 00 FF 
07644     00 E4 85 F1 | 	sub	objptr, ##1536
07648     F2 30 02 F1 | 	add	local10, objptr
0764c     04 30 06 F1 | 	add	local10, #4
07650     18 29 62 FC | 	wrlong	local06, local10
07654     03 00 00 FF 
07658     00 E4 05 F1 | 	add	objptr, ##1536
0765c     F2 30 02 FB | 	rdlong	local10, objptr
07660     18 33 02 F6 | 	mov	local11, local10
07664     01 32 66 F0 | 	shl	local11, #1
07668     18 33 02 F1 | 	add	local11, local10
0766c     02 32 66 F0 | 	shl	local11, #2
07670     03 00 00 FF 
07674     00 E4 85 F1 | 	sub	objptr, ##1536
07678     F2 32 02 F1 | 	add	local11, objptr
0767c     08 32 06 F1 | 	add	local11, #8
07680     19 2B 62 FC | 	wrlong	local07, local11
07684     03 00 00 FF 
07688     00 E4 05 F1 | 	add	objptr, ##1536
0768c     F2 26 02 FB | 	rdlong	local05, objptr
07690     01 26 06 F1 | 	add	local05, #1
07694     F2 26 62 FC | 	wrlong	local05, objptr
07698     6A 00 00 FF 
0769c     7C E4 85 F1 | 	sub	objptr, ##54396
076a0                 | LR__0664
076a0                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
076a0     57 00 00 FF 
076a4     44 E4 05 F1 | 	add	objptr, ##44612
076a8     F2 24 02 FB | 	rdlong	local04, objptr
076ac     03 24 66 F0 | 	shl	local04, #3
076b0     02 00 00 FF 
076b4     38 E4 85 F1 | 	sub	objptr, ##1080
076b8     F2 24 02 F1 | 	add	local04, objptr
076bc     04 24 06 F1 | 	add	local04, #4
076c0     12 2D 02 FB | 	rdlong	local08, local04
076c4     11 2C 0E F2 | 	cmp	local08, #17 wz
076c8     55 00 00 FF 
076cc     0C E4 85 F1 | 	sub	objptr, ##43532
076d0     6C 00 90 AD |  if_e	jmp	#LR__0665
076d4     57 00 00 FF 
076d8     44 E4 05 F1 | 	add	objptr, ##44612
076dc     F2 2C 02 FB | 	rdlong	local08, objptr
076e0     03 2C 66 F0 | 	shl	local08, #3
076e4     02 00 00 FF 
076e8     38 E4 85 F1 | 	sub	objptr, ##1080
076ec     F2 2C 02 F1 | 	add	local08, objptr
076f0     04 2C 06 F1 | 	add	local08, #4
076f4     16 2D 02 FB | 	rdlong	local08, local08
076f8     12 2C 0E F2 | 	cmp	local08, #18 wz
076fc     55 00 00 FF 
07700     0C E4 85 F1 | 	sub	objptr, ##43532
07704     38 00 90 AD |  if_e	jmp	#LR__0665
07708     57 00 00 FF 
0770c     44 E4 05 F1 | 	add	objptr, ##44612
07710     F2 32 02 FB | 	rdlong	local11, objptr
07714     03 32 66 F0 | 	shl	local11, #3
07718     02 00 00 FF 
0771c     38 E4 85 F1 | 	sub	objptr, ##1080
07720     F2 32 02 F1 | 	add	local11, objptr
07724     04 32 06 F1 | 	add	local11, #4
07728     19 33 02 FB | 	rdlong	local11, local11
0772c     FE 33 0E F2 | 	cmp	local11, #510 wz
07730     55 00 00 FF 
07734     0C E4 85 F1 | 	sub	objptr, ##43532
07738     16 FA 05 56 |  if_ne	mov	result1, #22
0773c     68 00 90 5D |  if_ne	jmp	#LR__0667
07740                 | LR__0665
07740     57 00 00 FF 
07744     44 E4 05 F1 | 	add	objptr, ##44612
07748     F2 24 02 FB | 	rdlong	local04, objptr
0774c     01 24 06 F1 | 	add	local04, #1
07750     F2 24 62 FC | 	wrlong	local04, objptr
07754     03 24 66 F0 | 	shl	local04, #3
07758     02 00 00 FF 
0775c     38 E4 85 F1 | 	sub	objptr, ##1080
07760     F2 24 02 F1 | 	add	local04, objptr
07764     04 24 06 F1 | 	add	local04, #4
07768     12 2D 02 FB | 	rdlong	local08, local04
0776c     FE 2D 0E F2 | 	cmp	local08, #510 wz
07770     55 00 00 FF 
07774     0C E4 85 F1 | 	sub	objptr, ##43532
07778     28 00 90 AD |  if_e	jmp	#LR__0666
0777c     57 00 00 FF 
07780     44 E4 05 F1 | 	add	objptr, ##44612
07784     F2 32 02 FB | 	rdlong	local11, objptr
07788     0E 00 00 FF 
0778c     1C E4 05 F1 | 	add	objptr, ##7196
07790     F2 30 02 FB | 	rdlong	local10, objptr
07794     65 00 00 FF 
07798     60 E4 85 F1 | 	sub	objptr, ##51808
0779c     18 33 52 F2 | 	cmps	local11, local10 wc
077a0     E4 FA 9F CD |  if_b	jmp	#LR__0661
077a4                 | LR__0666
077a4                 | ' return 0
077a4     00 FA 05 F6 | 	mov	result1, #0
077a8                 | LR__0667
077a8     A7 F0 03 F6 | 	mov	ptra, fp
077ac     B2 00 A0 FD | 	call	#popregs_
077b0                 | _compile_print_ret
077b0     2D 00 64 FD | 	ret
077b4                 | 
077b4                 | ' 
077b4                 | ' function compile_if() as ulong  
077b4                 | _compile_if
077b4     05 4A 05 F6 | 	mov	COUNT_, #5
077b8     A8 00 A0 FD | 	call	#pushregs_
077bc                 | _compile_if_enter
077bc     60 1A B0 FD | 	call	#_expr
077c0                 | ' expr()
077c0                 | ' return 0
077c0     57 00 00 FF 
077c4     44 E4 05 F1 | 	add	objptr, ##44612
077c8     F2 FA 01 FB | 	rdlong	result1, objptr
077cc     01 FA 05 F1 | 	add	result1, #1
077d0     F2 FA 61 FC | 	wrlong	result1, objptr
077d4     58 22 06 F6 | 	mov	local03, #88
077d8     0F 25 02 F6 | 	mov	local04, local01
077dc     10 27 02 F6 | 	mov	local05, local02
077e0     11 1F 02 F6 | 	mov	local01, local03
077e4     13 00 00 FF 
077e8     38 E4 05 F1 | 	add	objptr, ##9784
077ec     F2 12 02 FB | 	rdlong	arg01, objptr
077f0     09 FB 01 F6 | 	mov	result1, arg01
077f4     01 FA 65 F0 | 	shl	result1, #1
077f8     09 FB 01 F1 | 	add	result1, arg01
077fc     02 FA 65 F0 | 	shl	result1, #2
07800     03 00 00 FF 
07804     00 E4 85 F1 | 	sub	objptr, ##1536
07808     F2 FA 01 F1 | 	add	result1, objptr
0780c     FD 24 62 FC | 	wrlong	local04, result1
07810     03 00 00 FF 
07814     00 E4 05 F1 | 	add	objptr, ##1536
07818     F2 12 02 FB | 	rdlong	arg01, objptr
0781c     09 25 02 F6 | 	mov	local04, arg01
07820     01 24 66 F0 | 	shl	local04, #1
07824     09 25 02 F1 | 	add	local04, arg01
07828     02 24 66 F0 | 	shl	local04, #2
0782c     03 00 00 FF 
07830     00 E4 85 F1 | 	sub	objptr, ##1536
07834     F2 24 02 F1 | 	add	local04, objptr
07838     04 24 06 F1 | 	add	local04, #4
0783c     12 27 62 FC | 	wrlong	local05, local04
07840     03 00 00 FF 
07844     00 E4 05 F1 | 	add	objptr, ##1536
07848     F2 24 02 FB | 	rdlong	local04, objptr
0784c     12 27 02 F6 | 	mov	local05, local04
07850     01 26 66 F0 | 	shl	local05, #1
07854     12 27 02 F1 | 	add	local05, local04
07858     02 26 66 F0 | 	shl	local05, #2
0785c     03 00 00 FF 
07860     00 E4 85 F1 | 	sub	objptr, ##1536
07864     F2 26 02 F1 | 	add	local05, objptr
07868     08 26 06 F1 | 	add	local05, #8
0786c     13 1F 62 FC | 	wrlong	local01, local05
07870     03 00 00 FF 
07874     00 E4 05 F1 | 	add	objptr, ##1536
07878     F2 24 02 FB | 	rdlong	local04, objptr
0787c     01 24 06 F1 | 	add	local04, #1
07880     F2 24 62 FC | 	wrlong	local04, objptr
07884                 | ' 
07884                 | ' 'print "In compile_if"
07884                 | ' compile_fun_1p()
07884                 | ' cmd=lparts(ct).token : ct+=1
07884                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
07884                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
07884                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
07884     13 00 00 FF 
07888     38 E4 85 F1 | 	sub	objptr, ##9784
0788c     F2 26 02 FB | 	rdlong	local05, objptr
07890     01 26 06 F1 | 	add	local05, #1
07894     03 26 66 F0 | 	shl	local05, #3
07898     02 00 00 FF 
0789c     38 E4 85 F1 | 	sub	objptr, ##1080
078a0     F2 26 02 F1 | 	add	local05, objptr
078a4     13 13 02 FB | 	rdlong	arg01, local05
078a8     55 00 00 FF 
078ac     0C E4 85 F1 | 	sub	objptr, ##43532
078b0                 | ' 
078b0                 | ' select case s
078b0     71 01 00 FF 
078b4     2C 15 06 F6 | 	mov	arg02, ##@LR__4902
078b8     E0 72 B1 FD | 	call	#__system___string_cmp
078bc     00 FA 0D F2 | 	cmp	result1, #0 wz
078c0     1B FA 05 A6 |  if_e	mov	result1, #27
078c4     00 FA 05 56 |  if_ne	mov	result1, #0
078c8     00 FA 0D F2 | 	cmp	result1, #0 wz
078cc     0C 00 90 AD |  if_e	jmp	#LR__0670
078d0     05 12 06 F6 | 	mov	arg01, #5
078d4     88 ED BF FD | 	call	#_compile_immediate_assign
078d8     08 00 90 FD | 	jmp	#LR__0671
078dc                 | LR__0670
078dc     05 12 06 F6 | 	mov	arg01, #5
078e0     80 E3 BF FD | 	call	#_compile_immediate
078e4                 | LR__0671
078e4                 | ' 
078e4                 | ' 
078e4                 | ' return 0
078e4     00 FA 05 F6 | 	mov	result1, #0
078e8     A7 F0 03 F6 | 	mov	ptra, fp
078ec     B2 00 A0 FD | 	call	#popregs_
078f0                 | _compile_if_ret
078f0     2D 00 64 FD | 	ret
078f4                 | 
078f4                 | ' 
078f4                 | ' function compile_else() as ulong  
078f4                 | _compile_else
078f4     05 4A 05 F6 | 	mov	COUNT_, #5
078f8     A8 00 A0 FD | 	call	#pushregs_
078fc                 | _compile_else_enter
078fc     5A 22 06 F6 | 	mov	local03, #90
07900     0F 25 02 F6 | 	mov	local04, local01
07904     10 27 02 F6 | 	mov	local05, local02
07908     11 1F 02 F6 | 	mov	local01, local03
0790c     6A 00 00 FF 
07910     7C E4 05 F1 | 	add	objptr, ##54396
07914     F2 12 02 FB | 	rdlong	arg01, objptr
07918     09 FB 01 F6 | 	mov	result1, arg01
0791c     01 FA 65 F0 | 	shl	result1, #1
07920     09 FB 01 F1 | 	add	result1, arg01
07924     02 FA 65 F0 | 	shl	result1, #2
07928     03 00 00 FF 
0792c     00 E4 85 F1 | 	sub	objptr, ##1536
07930     F2 FA 01 F1 | 	add	result1, objptr
07934     FD 24 62 FC | 	wrlong	local04, result1
07938     03 00 00 FF 
0793c     00 E4 05 F1 | 	add	objptr, ##1536
07940     F2 FA 01 FB | 	rdlong	result1, objptr
07944     FD 24 02 F6 | 	mov	local04, result1
07948     01 24 66 F0 | 	shl	local04, #1
0794c     FD 24 02 F1 | 	add	local04, result1
07950     02 24 66 F0 | 	shl	local04, #2
07954     03 00 00 FF 
07958     00 E4 85 F1 | 	sub	objptr, ##1536
0795c     F2 24 02 F1 | 	add	local04, objptr
07960     04 24 06 F1 | 	add	local04, #4
07964     12 27 62 FC | 	wrlong	local05, local04
07968     03 00 00 FF 
0796c     00 E4 05 F1 | 	add	objptr, ##1536
07970     F2 24 02 FB | 	rdlong	local04, objptr
07974     12 27 02 F6 | 	mov	local05, local04
07978     01 26 66 F0 | 	shl	local05, #1
0797c     12 27 02 F1 | 	add	local05, local04
07980     02 26 66 F0 | 	shl	local05, #2
07984     03 00 00 FF 
07988     00 E4 85 F1 | 	sub	objptr, ##1536
0798c     F2 26 02 F1 | 	add	local05, objptr
07990     08 26 06 F1 | 	add	local05, #8
07994     13 1F 62 FC | 	wrlong	local01, local05
07998     03 00 00 FF 
0799c     00 E4 05 F1 | 	add	objptr, ##1536
079a0     F2 24 02 FB | 	rdlong	local04, objptr
079a4     01 24 06 F1 | 	add	local04, #1
079a8     F2 24 62 FC | 	wrlong	local04, objptr
079ac                 | ' 
079ac                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
079ac                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
079ac     13 00 00 FF 
079b0     38 E4 85 F1 | 	sub	objptr, ##9784
079b4     F2 26 02 FB | 	rdlong	local05, objptr
079b8     01 26 06 F1 | 	add	local05, #1
079bc     03 26 66 F0 | 	shl	local05, #3
079c0     02 00 00 FF 
079c4     38 E4 85 F1 | 	sub	objptr, ##1080
079c8     F2 26 02 F1 | 	add	local05, objptr
079cc     13 13 02 FB | 	rdlong	arg01, local05
079d0     55 00 00 FF 
079d4     0C E4 85 F1 | 	sub	objptr, ##43532
079d8                 | ' 
079d8                 | ' select case s
079d8     71 01 00 FF 
079dc     2C 15 06 F6 | 	mov	arg02, ##@LR__4902
079e0     B8 71 B1 FD | 	call	#__system___string_cmp
079e4     00 FA 0D F2 | 	cmp	result1, #0 wz
079e8     1B FA 05 A6 |  if_e	mov	result1, #27
079ec     00 FA 05 56 |  if_ne	mov	result1, #0
079f0     00 FA 0D F2 | 	cmp	result1, #0 wz
079f4     0C 00 90 AD |  if_e	jmp	#LR__0680
079f8     05 12 06 F6 | 	mov	arg01, #5
079fc     60 EC BF FD | 	call	#_compile_immediate_assign
07a00     08 00 90 FD | 	jmp	#LR__0681
07a04                 | LR__0680
07a04     05 12 06 F6 | 	mov	arg01, #5
07a08     58 E2 BF FD | 	call	#_compile_immediate
07a0c                 | LR__0681
07a0c                 | ' 
07a0c                 | ' 
07a0c                 | ' return 0
07a0c     00 FA 05 F6 | 	mov	result1, #0
07a10     A7 F0 03 F6 | 	mov	ptra, fp
07a14     B2 00 A0 FD | 	call	#popregs_
07a18                 | _compile_else_ret
07a18     2D 00 64 FD | 	ret
07a1c                 | 
07a1c                 | ' 
07a1c                 | ' 
07a1c                 | ' function compile_dim() as ulong  
07a1c                 | _compile_dim
07a1c     11 4A 05 F6 | 	mov	COUNT_, #17
07a20     A8 00 A0 FD | 	call	#pushregs_
07a24     01 1E 06 F6 | 	mov	local01, #1
07a28     01 20 06 F6 | 	mov	local02, #1
07a2c     01 22 06 F6 | 	mov	local03, #1
07a30                 | ' 
07a30                 | ' dims(0)=1: dims(1)=1: dims(2)=1
07a30                 | ' 
07a30                 | ' if isname(lparts(ct).part$) then 
07a30     57 00 00 FF 
07a34     44 E4 05 F1 | 	add	objptr, ##44612
07a38     F2 18 02 FB | 	rdlong	arg04, objptr
07a3c     03 18 66 F0 | 	shl	arg04, #3
07a40     02 00 00 FF 
07a44     38 E4 85 F1 | 	sub	objptr, ##1080
07a48     F2 18 02 F1 | 	add	arg04, objptr
07a4c     0C 13 02 FB | 	rdlong	arg01, arg04
07a50     55 00 00 FF 
07a54     0C E4 85 F1 | 	sub	objptr, ##43532
07a58     BC D2 BF FD | 	call	#_isname
07a5c     00 FA 0D F2 | 	cmp	result1, #0 wz
07a60     AC 05 90 AD |  if_e	jmp	#LR__0714
07a64     57 00 00 FF 
07a68     44 E4 05 F1 | 	add	objptr, ##44612
07a6c     F2 24 02 FB | 	rdlong	local04, objptr
07a70     03 24 66 F0 | 	shl	local04, #3
07a74     02 00 00 FF 
07a78     38 E4 85 F1 | 	sub	objptr, ##1080
07a7c     F2 24 02 F1 | 	add	local04, objptr
07a80     12 27 02 FB | 	rdlong	local05, local04
07a84     01 28 66 F6 | 	neg	local06, #1
07a88                 | '   varname2$=lparts(ct).part$ 
07a88                 | '   j=-1
07a88                 | '   if varnum>0 then
07a88     04 E4 85 F1 | 	sub	objptr, #4
07a8c     F2 2A 02 FB | 	rdlong	local07, objptr
07a90     55 00 00 FF 
07a94     08 E4 85 F1 | 	sub	objptr, ##43528
07a98     01 2A 56 F2 | 	cmps	local07, #1 wc
07a9c     58 00 90 CD |  if_b	jmp	#LR__0692
07aa0                 | '  '   print "in dim, varnum=";varnum
07aa0                 | '     for i=0 to varnum-1
07aa0     00 2C 06 F6 | 	mov	local08, #0
07aa4     55 00 00 FF 
07aa8     08 E4 05 F1 | 	add	objptr, ##43528
07aac     F2 2E 02 FB | 	rdlong	local09, objptr
07ab0     55 00 00 FF 
07ab4     08 E4 85 F1 | 	sub	objptr, ##43528
07ab8                 | LR__0690
07ab8     17 2D 52 F2 | 	cmps	local08, local09 wc
07abc     38 00 90 3D |  if_ae	jmp	#LR__0691
07ac0                 | '       if variables(i).name=varname2$ then j=i : exit
07ac0     16 25 02 F6 | 	mov	local04, local08
07ac4     04 24 66 F0 | 	shl	local04, #4
07ac8     34 00 00 FF 
07acc     F8 E5 05 F1 | 	add	objptr, ##27128
07ad0     F2 24 02 F1 | 	add	local04, objptr
07ad4     12 13 02 FB | 	rdlong	arg01, local04
07ad8     13 15 02 F6 | 	mov	arg02, local05
07adc     34 00 00 FF 
07ae0     F8 E5 85 F1 | 	sub	objptr, ##27128
07ae4     B4 70 B1 FD | 	call	#__system___string_cmp
07ae8     00 FA 0D F2 | 	cmp	result1, #0 wz
07aec     16 29 02 A6 |  if_e	mov	local06, local08
07af0     01 2C 06 51 |  if_ne	add	local08, #1
07af4     C0 FF 9F 5D |  if_ne	jmp	#LR__0690
07af8                 | LR__0691
07af8                 | LR__0692
07af8                 | ' '  if j<>-1 then printerror (42) : return 42
07af8                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
07af8     FF FF 7F FF 
07afc     FF 29 0E F2 | 	cmp	local06, ##-1 wz
07b00     55 00 00 AF 
07b04     08 E4 05 A1 |  if_e	add	objptr, ##43528
07b08     F2 28 02 AB |  if_e	rdlong	local06, objptr
07b0c     55 00 00 AF 
07b10     08 E4 85 A1 |  if_e	sub	objptr, ##43528
07b14     78 00 90 AD |  if_e	jmp	#LR__0693
07b18     00 12 06 F6 | 	mov	arg01, #0
07b1c     EC C9 B1 FD | 	call	#__system___getiolock_0484
07b20     FD 12 02 F6 | 	mov	arg01, result1
07b24     4C 70 B1 FD | 	call	#__system___lockmem
07b28     73 01 00 FF 
07b2c     85 14 06 F6 | 	mov	arg02, ##@LR__5089
07b30     00 12 06 F6 | 	mov	arg01, #0
07b34     00 16 06 F6 | 	mov	arg03, #0
07b38     40 7D B1 FD | 	call	#__system___basic_print_string
07b3c     79 00 00 FF 
07b40     A0 E5 05 F1 | 	add	objptr, ##62368
07b44     F2 14 02 FB | 	rdlong	arg02, objptr
07b48     79 00 00 FF 
07b4c     A0 E5 85 F1 | 	sub	objptr, ##62368
07b50     00 12 06 F6 | 	mov	arg01, #0
07b54     00 16 06 F6 | 	mov	arg03, #0
07b58     0A 18 06 F6 | 	mov	arg04, #10
07b5c     A0 7D B1 FD | 	call	#__system___basic_print_unsigned
07b60     73 01 00 FF 
07b64     93 14 06 F6 | 	mov	arg02, ##@LR__5090
07b68     00 12 06 F6 | 	mov	arg01, #0
07b6c     00 16 06 F6 | 	mov	arg03, #0
07b70     08 7D B1 FD | 	call	#__system___basic_print_string
07b74     00 12 06 F6 | 	mov	arg01, #0
07b78     0A 14 06 F6 | 	mov	arg02, #10
07b7c     00 16 06 F6 | 	mov	arg03, #0
07b80     A0 7C B1 FD | 	call	#__system___basic_print_char
07b84     00 12 06 F6 | 	mov	arg01, #0
07b88     80 C9 B1 FD | 	call	#__system___getiolock_0484
07b8c     FD 00 68 FC | 	wrlong	#0, result1
07b90                 | LR__0693
07b90                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
07b90     57 00 00 FF 
07b94     44 E4 05 F1 | 	add	objptr, ##44612
07b98     F2 18 02 FB | 	rdlong	arg04, objptr
07b9c     01 18 06 F1 | 	add	arg04, #1
07ba0     03 18 66 F0 | 	shl	arg04, #3
07ba4     02 00 00 FF 
07ba8     38 E4 85 F1 | 	sub	objptr, ##1080
07bac     F2 18 02 F1 | 	add	arg04, objptr
07bb0     0C 13 02 FB | 	rdlong	arg01, arg04
07bb4     73 01 00 FF 
07bb8     B4 14 06 F6 | 	mov	arg02, ##@LR__5091
07bbc     55 00 00 FF 
07bc0     0C E4 85 F1 | 	sub	objptr, ##43532
07bc4     D4 6F B1 FD | 	call	#__system___string_cmp
07bc8     00 FA 0D F2 | 	cmp	result1, #0 wz
07bcc     50 00 90 AD |  if_e	jmp	#LR__0694
07bd0     57 00 00 FF 
07bd4     44 E4 05 F1 | 	add	objptr, ##44612
07bd8     F2 2E 02 FB | 	rdlong	local09, objptr
07bdc     01 2E 06 F1 | 	add	local09, #1
07be0     03 2E 66 F0 | 	shl	local09, #3
07be4     02 00 00 FF 
07be8     38 E4 85 F1 | 	sub	objptr, ##1080
07bec     F2 2E 02 F1 | 	add	local09, objptr
07bf0     17 13 02 FB | 	rdlong	arg01, local09
07bf4     73 01 00 FF 
07bf8     B6 14 06 F6 | 	mov	arg02, ##@LR__5092
07bfc     55 00 00 FF 
07c00     0C E4 85 F1 | 	sub	objptr, ##43532
07c04     94 6F B1 FD | 	call	#__system___string_cmp
07c08     00 FA 0D F2 | 	cmp	result1, #0 wz
07c0c     10 00 90 AD |  if_e	jmp	#LR__0694
07c10     2B 12 06 F6 | 	mov	arg01, #43
07c14     E0 2A B1 FD | 	call	#_printerror
07c18     2B FA 05 F6 | 	mov	result1, #43
07c1c     00 05 90 FD | 	jmp	#LR__0716
07c20                 | LR__0694
07c20                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
07c20     57 00 00 FF 
07c24     44 E4 05 F1 | 	add	objptr, ##44612
07c28     F2 14 02 FB | 	rdlong	arg02, objptr
07c2c     01 14 06 F1 | 	add	arg02, #1
07c30     03 14 66 F0 | 	shl	arg02, #3
07c34     02 00 00 FF 
07c38     38 E4 85 F1 | 	sub	objptr, ##1080
07c3c     F2 14 02 F1 | 	add	arg02, objptr
07c40     0A 13 02 FB | 	rdlong	arg01, arg02
07c44     73 01 00 FF 
07c48     B9 14 06 F6 | 	mov	arg02, ##@LR__5093
07c4c     55 00 00 FF 
07c50     0C E4 85 F1 | 	sub	objptr, ##43532
07c54     44 6F B1 FD | 	call	#__system___string_cmp
07c58     00 FA 0D F2 | 	cmp	result1, #0 wz
07c5c     57 00 00 AF 
07c60     44 E4 05 A1 |  if_e	add	objptr, ##44612
07c64     F2 30 02 AB |  if_e	rdlong	local10, objptr
07c68     57 00 00 AF 
07c6c     44 E4 85 A1 |  if_e	sub	objptr, ##44612
07c70     01 30 06 A1 |  if_e	add	local10, #1
07c74     7C 01 90 AD |  if_e	jmp	#LR__0700
07c78     57 00 00 FF 
07c7c     44 E4 05 F1 | 	add	objptr, ##44612
07c80     F2 30 02 FB | 	rdlong	local10, objptr
07c84     57 00 00 FF 
07c88     44 E4 85 F1 | 	sub	objptr, ##44612
07c8c     02 30 06 F1 | 	add	local10, #2
07c90     00 32 06 F6 | 	mov	local11, #0
07c94                 | '   l=ct+2 : m=0 : do
07c94                 | LR__0695
07c94                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
07c94                 | '     if isdec(lparts(l).part$) then 
07c94     18 25 02 F6 | 	mov	local04, local10
07c98     03 24 66 F0 | 	shl	local04, #3
07c9c     55 00 00 FF 
07ca0     0C E4 05 F1 | 	add	objptr, ##43532
07ca4     F2 24 02 F1 | 	add	local04, objptr
07ca8     12 13 02 FB | 	rdlong	arg01, local04
07cac     55 00 00 FF 
07cb0     0C E4 85 F1 | 	sub	objptr, ##43532
07cb4     04 D7 BF FD | 	call	#_isdec
07cb8     00 FA 0D F2 | 	cmp	result1, #0 wz
07cbc     44 00 90 AD |  if_e	jmp	#LR__0696
07cc0     19 35 02 F6 | 	mov	local12, local11
07cc4     0F 35 06 F1 | 	add	local12, #local01
07cc8     18 2F 02 F6 | 	mov	local09, local10
07ccc     03 2E 66 F0 | 	shl	local09, #3
07cd0     55 00 00 FF 
07cd4     0C E4 05 F1 | 	add	objptr, ##43532
07cd8     F2 2E 02 F1 | 	add	local09, objptr
07cdc     17 13 02 FB | 	rdlong	arg01, local09
07ce0     00 14 06 F6 | 	mov	arg02, #0
07ce4     55 00 00 FF 
07ce8     0C E4 85 F1 | 	sub	objptr, ##43532
07cec     7C A0 B1 FD | 	call	#__system____builtin_atoi
07cf0     FD 36 02 F6 | 	mov	local13, result1
07cf4                 | 	'.live	local13
07cf4                 | 	'.live	local12
07cf4     00 34 8E F9 | 	altd	local12, #0
07cf8     1B 35 02 F6 | 	mov	local12, local13
07cfc     01 32 06 F1 | 	add	local11, #1
07d00     10 00 90 FD | 	jmp	#LR__0697
07d04                 | LR__0696
07d04     11 12 06 F6 | 	mov	arg01, #17
07d08     EC 29 B1 FD | 	call	#_printerror
07d0c                 | '       printerror (17)  : return(17)
07d0c     11 FA 05 F6 | 	mov	result1, #17
07d10     0C 04 90 FD | 	jmp	#LR__0716
07d14                 | LR__0697
07d14                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
07d14     18 25 02 F6 | 	mov	local04, local10
07d18     01 24 06 F1 | 	add	local04, #1
07d1c     03 24 66 F0 | 	shl	local04, #3
07d20     55 00 00 FF 
07d24     0C E4 05 F1 | 	add	objptr, ##43532
07d28     F2 24 02 F1 | 	add	local04, objptr
07d2c     12 13 02 FB | 	rdlong	arg01, local04
07d30     73 01 00 FF 
07d34     BC 14 06 F6 | 	mov	arg02, ##@LR__5094
07d38     55 00 00 FF 
07d3c     0C E4 85 F1 | 	sub	objptr, ##43532
07d40     58 6E B1 FD | 	call	#__system___string_cmp
07d44     00 FA 0D F2 | 	cmp	result1, #0 wz
07d48     48 00 90 AD |  if_e	jmp	#LR__0698
07d4c     18 37 02 F6 | 	mov	local13, local10
07d50     01 36 06 F1 | 	add	local13, #1
07d54     03 36 66 F0 | 	shl	local13, #3
07d58     55 00 00 FF 
07d5c     0C E4 05 F1 | 	add	objptr, ##43532
07d60     F2 36 02 F1 | 	add	local13, objptr
07d64     1B 13 02 FB | 	rdlong	arg01, local13
07d68     73 01 00 FF 
07d6c     BE 14 06 F6 | 	mov	arg02, ##@LR__5095
07d70     55 00 00 FF 
07d74     0C E4 85 F1 | 	sub	objptr, ##43532
07d78     20 6E B1 FD | 	call	#__system___string_cmp
07d7c     00 FA 0D F2 | 	cmp	result1, #0 wz
07d80     10 00 90 AD |  if_e	jmp	#LR__0698
07d84     2C 12 06 F6 | 	mov	arg01, #44
07d88     6C 29 B1 FD | 	call	#_printerror
07d8c     2C FA 05 F6 | 	mov	result1, #44
07d90     8C 03 90 FD | 	jmp	#LR__0716
07d94                 | LR__0698
07d94     02 30 06 F1 | 	add	local10, #2
07d98     18 25 02 F6 | 	mov	local04, local10
07d9c     01 24 86 F1 | 	sub	local04, #1
07da0     03 24 66 F0 | 	shl	local04, #3
07da4     55 00 00 FF 
07da8     0C E4 05 F1 | 	add	objptr, ##43532
07dac     F2 24 02 F1 | 	add	local04, objptr
07db0     12 13 02 FB | 	rdlong	arg01, local04
07db4     73 01 00 FF 
07db8     C0 14 06 F6 | 	mov	arg02, ##@LR__5096
07dbc     55 00 00 FF 
07dc0     0C E4 85 F1 | 	sub	objptr, ##43532
07dc4     D4 6D B1 FD | 	call	#__system___string_cmp
07dc8     00 FA 0D F2 | 	cmp	result1, #0 wz
07dcc     03 32 56 52 |  if_ne	cmps	local11, #3 wc
07dd0     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0695
07dd4                 | '   if m>3 then printerror(45): return(45)
07dd4     04 32 56 F2 | 	cmps	local11, #4 wc
07dd8     10 00 90 CD |  if_b	jmp	#LR__0699
07ddc     2D 12 06 F6 | 	mov	arg01, #45
07de0     14 29 B1 FD | 	call	#_printerror
07de4     2D FA 05 F6 | 	mov	result1, #45
07de8     34 03 90 FD | 	jmp	#LR__0716
07dec                 | LR__0699
07dec     00 39 06 F6 | 	mov	local14, #256
07df0     0C 3A 06 F6 | 	mov	local15, #12
07df4                 | LR__0700
07df4                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
07df4                 | '   arraytype=array_no_type : esize=12
07df4                 | ' 1350 
07df4                 | '   if lparts(l).part$="as" then
07df4     18 25 02 F6 | 	mov	local04, local10
07df8     03 24 66 F0 | 	shl	local04, #3
07dfc     55 00 00 FF 
07e00     0C E4 05 F1 | 	add	objptr, ##43532
07e04     F2 24 02 F1 | 	add	local04, objptr
07e08     12 13 02 FB | 	rdlong	arg01, local04
07e0c     73 01 00 FF 
07e10     C2 14 06 F6 | 	mov	arg02, ##@LR__5097
07e14     55 00 00 FF 
07e18     0C E4 85 F1 | 	sub	objptr, ##43532
07e1c     7C 6D B1 FD | 	call	#__system___string_cmp
07e20     00 FA 0D F2 | 	cmp	result1, #0 wz
07e24     F8 01 90 5D |  if_ne	jmp	#LR__0715
07e28                 | '     select case lparts(l+1).part$
07e28     18 35 02 F6 | 	mov	local12, local10
07e2c     01 34 06 F1 | 	add	local12, #1
07e30     03 34 66 F0 | 	shl	local12, #3
07e34     55 00 00 FF 
07e38     0C E4 05 F1 | 	add	objptr, ##43532
07e3c     F2 34 02 F1 | 	add	local12, objptr
07e40     1A 3D 02 FB | 	rdlong	local16, local12
07e44     73 01 00 FF 
07e48     C5 14 06 F6 | 	mov	arg02, ##@LR__5098
07e4c     1E 13 02 F6 | 	mov	arg01, local16
07e50     55 00 00 FF 
07e54     0C E4 85 F1 | 	sub	objptr, ##43532
07e58     40 6D B1 FD | 	call	#__system___string_cmp
07e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
07e60     0C 01 90 AD |  if_e	jmp	#LR__0701
07e64     73 01 00 FF 
07e68     CA 14 06 F6 | 	mov	arg02, ##@LR__5099
07e6c     1E 13 02 F6 | 	mov	arg01, local16
07e70     28 6D B1 FD | 	call	#__system___string_cmp
07e74     00 FA 0D F2 | 	cmp	result1, #0 wz
07e78     00 01 90 AD |  if_e	jmp	#LR__0702
07e7c     73 01 00 FF 
07e80     D0 14 06 F6 | 	mov	arg02, ##@LR__5100
07e84     1E 13 02 F6 | 	mov	arg01, local16
07e88     10 6D B1 FD | 	call	#__system___string_cmp
07e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
07e90     F4 00 90 AD |  if_e	jmp	#LR__0703
07e94     73 01 00 FF 
07e98     D6 14 06 F6 | 	mov	arg02, ##@LR__5101
07e9c     1E 13 02 F6 | 	mov	arg01, local16
07ea0     F8 6C B1 FD | 	call	#__system___string_cmp
07ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
07ea8     E8 00 90 AD |  if_e	jmp	#LR__0704
07eac     73 01 00 FF 
07eb0     DD 14 06 F6 | 	mov	arg02, ##@LR__5102
07eb4     1E 13 02 F6 | 	mov	arg01, local16
07eb8     E0 6C B1 FD | 	call	#__system___string_cmp
07ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
07ec0     DC 00 90 AD |  if_e	jmp	#LR__0705
07ec4     73 01 00 FF 
07ec8     E2 14 06 F6 | 	mov	arg02, ##@LR__5103
07ecc     1E 13 02 F6 | 	mov	arg01, local16
07ed0     C8 6C B1 FD | 	call	#__system___string_cmp
07ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
07ed8     D0 00 90 AD |  if_e	jmp	#LR__0706
07edc     73 01 00 FF 
07ee0     EA 14 06 F6 | 	mov	arg02, ##@LR__5104
07ee4     1E 13 02 F6 | 	mov	arg01, local16
07ee8     B0 6C B1 FD | 	call	#__system___string_cmp
07eec     00 FA 0D F2 | 	cmp	result1, #0 wz
07ef0     C4 00 90 AD |  if_e	jmp	#LR__0707
07ef4     73 01 00 FF 
07ef8     F0 14 06 F6 | 	mov	arg02, ##@LR__5105
07efc     1E 13 02 F6 | 	mov	arg01, local16
07f00     98 6C B1 FD | 	call	#__system___string_cmp
07f04     00 FA 0D F2 | 	cmp	result1, #0 wz
07f08     B8 00 90 AD |  if_e	jmp	#LR__0708
07f0c     73 01 00 FF 
07f10     F6 14 06 F6 | 	mov	arg02, ##@LR__5106
07f14     1E 13 02 F6 | 	mov	arg01, local16
07f18     80 6C B1 FD | 	call	#__system___string_cmp
07f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
07f20     AC 00 90 AD |  if_e	jmp	#LR__0709
07f24     73 01 00 FF 
07f28     FD 14 06 F6 | 	mov	arg02, ##@LR__5107
07f2c     1E 13 02 F6 | 	mov	arg01, local16
07f30     68 6C B1 FD | 	call	#__system___string_cmp
07f34     00 FA 0D F2 | 	cmp	result1, #0 wz
07f38     A0 00 90 AD |  if_e	jmp	#LR__0710
07f3c     73 01 00 FF 
07f40     04 15 06 F6 | 	mov	arg02, ##@LR__5108
07f44     1E 13 02 F6 | 	mov	arg01, local16
07f48     50 6C B1 FD | 	call	#__system___string_cmp
07f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
07f50     94 00 90 AD |  if_e	jmp	#LR__0711
07f54     73 01 00 FF 
07f58     0B 15 06 F6 | 	mov	arg02, ##@LR__5109
07f5c     1E 13 02 F6 | 	mov	arg01, local16
07f60     38 6C B1 FD | 	call	#__system___string_cmp
07f64     00 FA 0D F2 | 	cmp	result1, #0 wz
07f68     88 00 90 AD |  if_e	jmp	#LR__0712
07f6c     90 00 90 FD | 	jmp	#LR__0713
07f70                 | LR__0701
07f70     01 39 06 F6 | 	mov	local14, #257
07f74     01 3A 06 F6 | 	mov	local15, #1
07f78     A4 00 90 FD | 	jmp	#LR__0715
07f7c                 | LR__0702
07f7c     02 39 06 F6 | 	mov	local14, #258
07f80     01 3A 06 F6 | 	mov	local15, #1
07f84     98 00 90 FD | 	jmp	#LR__0715
07f88                 | LR__0703
07f88     03 39 06 F6 | 	mov	local14, #259
07f8c     02 3A 06 F6 | 	mov	local15, #2
07f90     8C 00 90 FD | 	jmp	#LR__0715
07f94                 | LR__0704
07f94     04 39 06 F6 | 	mov	local14, #260
07f98     02 3A 06 F6 | 	mov	local15, #2
07f9c     80 00 90 FD | 	jmp	#LR__0715
07fa0                 | LR__0705
07fa0     05 39 06 F6 | 	mov	local14, #261
07fa4     04 3A 06 F6 | 	mov	local15, #4
07fa8     74 00 90 FD | 	jmp	#LR__0715
07fac                 | LR__0706
07fac     05 39 06 F6 | 	mov	local14, #261
07fb0     04 3A 06 F6 | 	mov	local15, #4
07fb4     68 00 90 FD | 	jmp	#LR__0715
07fb8                 | LR__0707
07fb8     06 39 06 F6 | 	mov	local14, #262
07fbc     04 3A 06 F6 | 	mov	local15, #4
07fc0     5C 00 90 FD | 	jmp	#LR__0715
07fc4                 | LR__0708
07fc4     07 39 06 F6 | 	mov	local14, #263
07fc8     08 3A 06 F6 | 	mov	local15, #8
07fcc     50 00 90 FD | 	jmp	#LR__0715
07fd0                 | LR__0709
07fd0     08 39 06 F6 | 	mov	local14, #264
07fd4     08 3A 06 F6 | 	mov	local15, #8
07fd8     44 00 90 FD | 	jmp	#LR__0715
07fdc                 | LR__0710
07fdc     09 39 06 F6 | 	mov	local14, #265
07fe0     04 3A 06 F6 | 	mov	local15, #4
07fe4     38 00 90 FD | 	jmp	#LR__0715
07fe8                 | LR__0711
07fe8     0A 39 06 F6 | 	mov	local14, #266
07fec     08 3A 06 F6 | 	mov	local15, #8
07ff0     2C 00 90 FD | 	jmp	#LR__0715
07ff4                 | LR__0712
07ff4     0B 39 06 F6 | 	mov	local14, #267
07ff8     04 3A 06 F6 | 	mov	local15, #4
07ffc     20 00 90 FD | 	jmp	#LR__0715
08000                 | LR__0713
08000     2F 12 06 F6 | 	mov	arg01, #47
08004     F0 26 B1 FD | 	call	#_printerror
08008     2F FA 05 F6 | 	mov	result1, #47
0800c     10 01 90 FD | 	jmp	#LR__0716
08010                 | LR__0714
08010     2E 12 06 F6 | 	mov	arg01, #46
08014     E0 26 B1 FD | 	call	#_printerror
08018                 | '   printerror(46): return 46
08018     2E FA 05 F6 | 	mov	result1, #46
0801c     00 01 90 FD | 	jmp	#LR__0716
08020                 | LR__0715
08020     0F 3B 02 FD | 	qmul	local15, local01
08024     18 2A 62 FD | 	getqx	local07
08028     10 2B 02 FD | 	qmul	local07, local02
0802c     18 3C 62 FD | 	getqx	local16
08030     11 3D 02 FD | 	qmul	local16, local03
08034     79 00 00 FF 
08038     88 E5 05 F1 | 	add	objptr, ##62344
0803c     F2 3E 02 FB | 	rdlong	local17, objptr
08040     1C 15 02 F6 | 	mov	arg02, local14
08044     18 3C 62 FD | 	getqx	local16
08048     1E 3F 82 F1 | 	sub	local17, local16
0804c     10 3E 86 F1 | 	sub	local17, #16
08050     0F 3E 26 F5 | 	andn	local17, #15
08054     F2 3E 62 FC | 	wrlong	local17, objptr
08058     79 00 00 FF 
0805c     88 E5 85 F1 | 	sub	objptr, ##62344
08060     1F 13 02 F6 | 	mov	arg01, local17
08064     3C 28 B1 FD | 	call	#_psdpoke
08068     1F 13 02 F6 | 	mov	arg01, local17
0806c     02 12 06 F1 | 	add	arg01, #2
08070     1D 15 02 F6 | 	mov	arg02, local15
08074     2C 28 B1 FD | 	call	#_psdpoke
08078     1F 13 02 F6 | 	mov	arg01, local17
0807c     04 12 06 F1 | 	add	arg01, #4
08080     0F 15 02 F6 | 	mov	arg02, local01
08084     D4 27 B1 FD | 	call	#_pslpoke
08088     1F 13 02 F6 | 	mov	arg01, local17
0808c     08 12 06 F1 | 	add	arg01, #8
08090     10 15 02 F6 | 	mov	arg02, local02
08094     C4 27 B1 FD | 	call	#_pslpoke
08098     1F 13 02 F6 | 	mov	arg01, local17
0809c     0C 12 06 F1 | 	add	arg01, #12
080a0     11 15 02 F6 | 	mov	arg02, local03
080a4     B4 27 B1 FD | 	call	#_pslpoke
080a8     14 35 02 F6 | 	mov	local12, local06
080ac     04 34 66 F0 | 	shl	local12, #4
080b0     34 00 00 FF 
080b4     F8 E5 05 F1 | 	add	objptr, ##27128
080b8     F2 34 02 F1 | 	add	local12, objptr
080bc     1A 27 62 FC | 	wrlong	local05, local12
080c0     14 35 02 F6 | 	mov	local12, local06
080c4     04 34 66 F0 | 	shl	local12, #4
080c8     F2 34 02 F1 | 	add	local12, objptr
080cc     04 34 06 F1 | 	add	local12, #4
080d0     1A 3F 62 FC | 	wrlong	local17, local12
080d4     14 35 02 F6 | 	mov	local12, local06
080d8     04 34 66 F0 | 	shl	local12, #4
080dc     F2 34 02 F1 | 	add	local12, objptr
080e0     0C 34 06 F1 | 	add	local12, #12
080e4     1A 39 62 FC | 	wrlong	local14, local12
080e8                 | ' memtop=arrayptr
080e8                 | ' 
080e8                 | ' psdpoke arrayptr,arraytype ': print arraytype, arrayptr
080e8                 | ' psdpoke arrayptr+2,esize ': print esize , psdpeek(arrayptr+2)
080e8                 | ' pslpoke arrayptr+4,dims(0)
080e8                 | ' pslpoke arrayptr+8,dims(1)
080e8                 | ' pslpoke arrayptr+12,dims(2)
080e8                 | ' 'for i=0 to 15: print hex$(pspeek(arrayptr+i),2), : next i
080e8                 | ' 'for i=0 to 3: print hex$(pslpeek(arrayptr+4*i),2), : next i
080e8                 | ' 
080e8                 | ' 
080e8                 | ' variables(j).name=varname2$
080e8                 | ' variables(j).value.uresult=arrayptr
080e8                 | ' variables(j).vartype=arraytype
080e8                 | ' if j=varnum then varnum+=1
080e8     20 00 00 FF 
080ec     10 E4 05 F1 | 	add	objptr, ##16400
080f0     F2 2A 02 FB | 	rdlong	local07, objptr
080f4     55 00 00 FF 
080f8     08 E4 85 F1 | 	sub	objptr, ##43528
080fc     15 29 0A F2 | 	cmp	local06, local07 wz
08100     55 00 00 AF 
08104     08 E4 05 A1 |  if_e	add	objptr, ##43528
08108     F2 2A 02 AB |  if_e	rdlong	local07, objptr
0810c     01 2A 06 A1 |  if_e	add	local07, #1
08110     F2 2A 62 AC |  if_e	wrlong	local07, objptr
08114     55 00 00 AF 
08118     08 E4 85 A1 |  if_e	sub	objptr, ##43528
0811c                 | ' 
0811c                 | ' return 0
0811c     00 FA 05 F6 | 	mov	result1, #0
08120                 | LR__0716
08120     A7 F0 03 F6 | 	mov	ptra, fp
08124     B2 00 A0 FD | 	call	#popregs_
08128                 | _compile_dim_ret
08128     2D 00 64 FD | 	ret
0812c                 | 
0812c                 | ' 
0812c                 | ' 
0812c                 | ' function compile_for() as ulong  
0812c                 | _compile_for
0812c     07 4A 05 F6 | 	mov	COUNT_, #7
08130     A8 00 A0 FD | 	call	#pushregs_
08134                 | ' 
08134                 | ' 
08134                 | ' 
08134                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
08134     57 00 00 FF 
08138     44 E4 05 F1 | 	add	objptr, ##44612
0813c     F2 14 02 FB | 	rdlong	arg02, objptr
08140     01 14 06 F1 | 	add	arg02, #1
08144     03 14 66 F0 | 	shl	arg02, #3
08148     02 00 00 FF 
0814c     38 E4 85 F1 | 	sub	objptr, ##1080
08150     F2 14 02 F1 | 	add	arg02, objptr
08154     0A 13 02 FB | 	rdlong	arg01, arg02
08158     55 00 00 FF 
0815c     0C E4 85 F1 | 	sub	objptr, ##43532
08160                 | ' 
08160                 | ' select case s
08160     71 01 00 FF 
08164     2C 15 06 F6 | 	mov	arg02, ##@LR__4902
08168     30 6A B1 FD | 	call	#__system___string_cmp
0816c     00 FA 0D F2 | 	cmp	result1, #0 wz
08170     1B FA 05 A6 |  if_e	mov	result1, #27
08174     00 FA 05 56 |  if_ne	mov	result1, #0
08178     00 FA 0D F2 | 	cmp	result1, #0 wz
0817c     0C 00 90 AD |  if_e	jmp	#LR__0720
08180     05 12 06 F6 | 	mov	arg01, #5
08184     D8 E4 BF FD | 	call	#_compile_immediate_assign
08188     10 00 90 FD | 	jmp	#LR__0721
0818c                 | LR__0720
0818c     20 12 06 F6 | 	mov	arg01, #32
08190     48 E9 BF FD | 	call	#_compile_error
08194     20 FA 05 F6 | 	mov	result1, #32
08198     E8 02 90 FD | 	jmp	#LR__0727
0819c                 | LR__0721
0819c     6A 00 00 FF 
081a0     7C E4 05 F1 | 	add	objptr, ##54396
081a4     F2 12 02 FB | 	rdlong	arg01, objptr
081a8     09 25 02 F6 | 	mov	local04, arg01
081ac     01 24 86 F1 | 	sub	local04, #1
081b0     12 15 02 F6 | 	mov	arg02, local04
081b4     01 14 66 F0 | 	shl	arg02, #1
081b8     12 15 02 F1 | 	add	arg02, local04
081bc     02 14 66 F0 | 	shl	arg02, #2
081c0     03 00 00 FF 
081c4     00 E4 85 F1 | 	sub	objptr, ##1536
081c8     F2 14 02 F1 | 	add	arg02, objptr
081cc     0A 1F 02 FB | 	rdlong	local01, arg02
081d0     04 14 06 F1 | 	add	arg02, #4
081d4     0A 27 02 FB | 	rdlong	local05, arg02
081d8     01 12 86 F1 | 	sub	arg01, #1
081dc     09 29 02 F6 | 	mov	local06, arg01
081e0     01 28 66 F0 | 	shl	local06, #1
081e4     09 29 02 F1 | 	add	local06, arg01
081e8     02 28 66 F0 | 	shl	local06, #2
081ec     F2 28 02 F1 | 	add	local06, objptr
081f0     08 28 06 F1 | 	add	local06, #8
081f4     14 13 02 FB | 	rdlong	arg01, local06
081f8     13 21 02 F6 | 	mov	local02, local05
081fc     09 23 02 F6 | 	mov	local03, arg01
08200                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
08200                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
08200     17 22 0E F2 | 	cmp	local03, #23 wz
08204     67 00 00 FF 
08208     7C E4 85 F1 | 	sub	objptr, ##52860
0820c     10 00 90 AD |  if_e	jmp	#LR__0722
08210     22 12 06 F6 | 	mov	arg01, #34
08214     C4 E8 BF FD | 	call	#_compile_error
08218     22 FA 05 F6 | 	mov	result1, #34
0821c     64 02 90 FD | 	jmp	#LR__0727
08220                 | LR__0722
08220     0F 2B 02 F6 | 	mov	local07, local01
08224                 | ' varnum=t1.result.uresult
08224                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
08224     57 00 00 FF 
08228     44 E4 05 F1 | 	add	objptr, ##44612
0822c     F2 24 02 FB | 	rdlong	local04, objptr
08230     03 24 66 F0 | 	shl	local04, #3
08234     02 00 00 FF 
08238     38 E4 85 F1 | 	sub	objptr, ##1080
0823c     F2 24 02 F1 | 	add	local04, objptr
08240     12 13 02 FB | 	rdlong	arg01, local04
08244     73 01 00 FF 
08248     12 15 06 F6 | 	mov	arg02, ##@LR__5110
0824c     55 00 00 FF 
08250     0C E4 85 F1 | 	sub	objptr, ##43532
08254     44 69 B1 FD | 	call	#__system___string_cmp
08258     00 FA 0D F2 | 	cmp	result1, #0 wz
0825c     10 00 90 AD |  if_e	jmp	#LR__0723
08260     21 12 06 F6 | 	mov	arg01, #33
08264     74 E8 BF FD | 	call	#_compile_error
08268     21 FA 05 F6 | 	mov	result1, #33
0826c     14 02 90 FD | 	jmp	#LR__0727
08270                 | LR__0723
08270     57 00 00 FF 
08274     44 E4 05 F1 | 	add	objptr, ##44612
08278     F2 24 02 FB | 	rdlong	local04, objptr
0827c     01 24 06 F1 | 	add	local04, #1
08280     F2 24 62 FC | 	wrlong	local04, objptr
08284     57 00 00 FF 
08288     44 E4 85 F1 | 	sub	objptr, ##44612
0828c     90 0F B0 FD | 	call	#_expr
08290                 | ' ct+=1
08290                 | ' expr()  ' there is "to" value pushed on the stack
08290                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
08290     57 00 00 FF 
08294     44 E4 05 F1 | 	add	objptr, ##44612
08298     F2 24 02 FB | 	rdlong	local04, objptr
0829c     03 24 66 F0 | 	shl	local04, #3
082a0     02 00 00 FF 
082a4     38 E4 85 F1 | 	sub	objptr, ##1080
082a8     F2 24 02 F1 | 	add	local04, objptr
082ac     12 13 02 FB | 	rdlong	arg01, local04
082b0     73 01 00 FF 
082b4     15 15 06 F6 | 	mov	arg02, ##@LR__5111
082b8     55 00 00 FF 
082bc     0C E4 85 F1 | 	sub	objptr, ##43532
082c0     D8 68 B1 FD | 	call	#__system___string_cmp
082c4     00 FA 0D F2 | 	cmp	result1, #0 wz
082c8     3C 00 90 AD |  if_e	jmp	#LR__0724
082cc     57 00 00 FF 
082d0     44 E4 05 F1 | 	add	objptr, ##44612
082d4     F2 28 02 FB | 	rdlong	local06, objptr
082d8     03 28 66 F0 | 	shl	local06, #3
082dc     02 00 00 FF 
082e0     38 E4 85 F1 | 	sub	objptr, ##1080
082e4     F2 28 02 F1 | 	add	local06, objptr
082e8     14 13 02 FB | 	rdlong	arg01, local06
082ec     73 01 00 FF 
082f0     1A 15 06 F6 | 	mov	arg02, ##@LR__5112
082f4     55 00 00 FF 
082f8     0C E4 85 F1 | 	sub	objptr, ##43532
082fc     9C 68 B1 FD | 	call	#__system___string_cmp
08300     00 FA 0D F2 | 	cmp	result1, #0 wz
08304     24 00 90 5D |  if_ne	jmp	#LR__0725
08308                 | LR__0724
08308     57 00 00 FF 
0830c     44 E4 05 F1 | 	add	objptr, ##44612
08310     F2 28 02 FB | 	rdlong	local06, objptr
08314     01 28 06 F1 | 	add	local06, #1
08318     F2 28 62 FC | 	wrlong	local06, objptr
0831c     57 00 00 FF 
08320     44 E4 85 F1 | 	sub	objptr, ##44612
08324     F8 0E B0 FD | 	call	#_expr
08328     78 00 90 FD | 	jmp	#LR__0726
0832c                 | LR__0725
0832c     6A 00 00 FF 
08330     7C E4 05 F1 | 	add	objptr, ##54396
08334     F2 28 02 FB | 	rdlong	local06, objptr
08338     14 27 02 F6 | 	mov	local05, local06
0833c     01 26 66 F0 | 	shl	local05, #1
08340     14 27 02 F1 | 	add	local05, local06
08344     02 26 66 F0 | 	shl	local05, #2
08348     03 00 00 FF 
0834c     00 E4 85 F1 | 	sub	objptr, ##1536
08350     F2 26 02 F1 | 	add	local05, objptr
08354     08 26 06 F1 | 	add	local05, #8
08358     13 39 68 FC | 	wrlong	#28, local05
0835c     03 00 00 FF 
08360     00 E4 05 F1 | 	add	objptr, ##1536
08364     F2 28 02 FB | 	rdlong	local06, objptr
08368     14 27 02 F6 | 	mov	local05, local06
0836c     01 26 66 F0 | 	shl	local05, #1
08370     14 27 02 F1 | 	add	local05, local06
08374     02 26 66 F0 | 	shl	local05, #2
08378     03 00 00 FF 
0837c     00 E4 85 F1 | 	sub	objptr, ##1536
08380     F2 26 02 F1 | 	add	local05, objptr
08384     13 03 68 FC | 	wrlong	#1, local05
08388     03 00 00 FF 
0838c     00 E4 05 F1 | 	add	objptr, ##1536
08390     F2 28 02 FB | 	rdlong	local06, objptr
08394     01 28 06 F1 | 	add	local06, #1
08398     F2 28 62 FC | 	wrlong	local06, objptr
0839c     6A 00 00 FF 
083a0     7C E4 85 F1 | 	sub	objptr, ##54396
083a4                 | LR__0726
083a4     6A 00 00 FF 
083a8     7C E4 05 F1 | 	add	objptr, ##54396
083ac     F2 28 02 FB | 	rdlong	local06, objptr
083b0     14 27 02 F6 | 	mov	local05, local06
083b4     01 26 66 F0 | 	shl	local05, #1
083b8     14 27 02 F1 | 	add	local05, local06
083bc     02 26 66 F0 | 	shl	local05, #2
083c0     03 00 00 FF 
083c4     00 E4 85 F1 | 	sub	objptr, ##1536
083c8     F2 26 02 F1 | 	add	local05, objptr
083cc     08 26 06 F1 | 	add	local05, #8
083d0     13 39 68 FC | 	wrlong	#28, local05
083d4     03 00 00 FF 
083d8     00 E4 05 F1 | 	add	objptr, ##1536
083dc     F2 28 02 FB | 	rdlong	local06, objptr
083e0     14 27 02 F6 | 	mov	local05, local06
083e4     01 26 66 F0 | 	shl	local05, #1
083e8     14 27 02 F1 | 	add	local05, local06
083ec     02 26 66 F0 | 	shl	local05, #2
083f0     03 00 00 FF 
083f4     00 E4 85 F1 | 	sub	objptr, ##1536
083f8     F2 26 02 F1 | 	add	local05, objptr
083fc     13 2B 62 FC | 	wrlong	local07, local05
08400     03 00 00 FF 
08404     00 E4 05 F1 | 	add	objptr, ##1536
08408     F2 2A 02 FB | 	rdlong	local07, objptr
0840c     01 2A 06 F1 | 	add	local07, #1
08410     F2 2A 62 FC | 	wrlong	local07, objptr
08414     15 29 02 F6 | 	mov	local06, local07
08418     01 28 66 F0 | 	shl	local06, #1
0841c     15 29 02 F1 | 	add	local06, local07
08420     02 28 66 F0 | 	shl	local06, #2
08424     03 00 00 FF 
08428     00 E4 85 F1 | 	sub	objptr, ##1536
0842c     F2 28 02 F1 | 	add	local06, objptr
08430     08 28 06 F1 | 	add	local06, #8
08434     14 95 68 FC | 	wrlong	#74, local06
08438     03 00 00 FF 
0843c     00 E4 05 F1 | 	add	objptr, ##1536
08440     F2 2A 02 FB | 	rdlong	local07, objptr
08444     15 29 02 F6 | 	mov	local06, local07
08448     01 28 66 F0 | 	shl	local06, #1
0844c     15 29 02 F1 | 	add	local06, local07
08450     02 28 66 F0 | 	shl	local06, #2
08454     03 00 00 FF 
08458     00 E4 85 F1 | 	sub	objptr, ##1536
0845c     F2 28 02 F1 | 	add	local06, objptr
08460     14 01 68 FC | 	wrlong	#0, local06
08464     03 00 00 FF 
08468     00 E4 05 F1 | 	add	objptr, ##1536
0846c     F2 2A 02 FB | 	rdlong	local07, objptr
08470     01 2A 06 F1 | 	add	local07, #1
08474     F2 2A 62 FC | 	wrlong	local07, objptr
08478     6A 00 00 FF 
0847c     7C E4 85 F1 | 	sub	objptr, ##54396
08480                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
08480                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
08480                 | ' 
08480                 | ' 
08480                 | ' return 0
08480     00 FA 05 F6 | 	mov	result1, #0
08484                 | LR__0727
08484     A7 F0 03 F6 | 	mov	ptra, fp
08488     B2 00 A0 FD | 	call	#popregs_
0848c                 | _compile_for_ret
0848c     2D 00 64 FD | 	ret
08490                 | 
08490                 | ' 
08490                 | ' 
08490                 | ' sub do_gosub()
08490                 | _do_gosub
08490     78 00 00 FF 
08494     E8 E4 05 F1 | 	add	objptr, ##61672
08498     F2 00 02 FB | 	rdlong	_var01, objptr
0849c     01 00 06 F1 | 	add	_var01, #1
084a0     F2 00 62 FC | 	wrlong	_var01, objptr
084a4                 | ' gosubtop+=1
084a4                 | ' if compiledline(lineptr_e+1).result_type=token_end then
084a4     0E 00 00 FF 
084a8     68 E4 85 F1 | 	sub	objptr, ##7272
084ac     F2 00 02 FB | 	rdlong	_var01, objptr
084b0     01 00 06 F1 | 	add	_var01, #1
084b4     00 03 02 F6 | 	mov	_var02, _var01
084b8     01 02 66 F0 | 	shl	_var02, #1
084bc     00 03 02 F1 | 	add	_var02, _var01
084c0     02 02 66 F0 | 	shl	_var02, #2
084c4     03 00 00 FF 
084c8     04 E4 85 F1 | 	sub	objptr, ##1540
084cc     F2 02 02 F1 | 	add	_var02, objptr
084d0     08 02 06 F1 | 	add	_var02, #8
084d4     01 03 02 FB | 	rdlong	_var02, _var02
084d8     FE 03 0E F2 | 	cmp	_var02, #510 wz
084dc     67 00 00 FF 
084e0     7C E4 85 F1 | 	sub	objptr, ##52860
084e4     58 00 90 5D |  if_ne	jmp	#LR__0730
084e8     78 00 00 FF 
084ec     E8 E4 05 F1 | 	add	objptr, ##61672
084f0     F2 02 02 FB | 	rdlong	_var02, objptr
084f4     03 02 66 F0 | 	shl	_var02, #3
084f8     03 00 00 FF 
084fc     38 E5 85 F1 | 	sub	objptr, ##1848
08500     F2 02 02 F1 | 	add	_var02, objptr
08504     03 00 00 FF 
08508     0C E5 05 F1 | 	add	objptr, ##1804
0850c     F2 00 02 FB | 	rdlong	_var01, objptr
08510     01 01 62 FC | 	wrlong	_var01, _var02
08514     2C E4 05 F1 | 	add	objptr, #44
08518     F2 02 02 FB | 	rdlong	_var02, objptr
0851c     03 02 66 F0 | 	shl	_var02, #3
08520     03 00 00 FF 
08524     38 E5 85 F1 | 	sub	objptr, ##1848
08528     F2 02 02 F1 | 	add	_var02, objptr
0852c     04 02 06 F1 | 	add	_var02, #4
08530     01 01 68 FC | 	wrlong	#0, _var02
08534     74 00 00 FF 
08538     B0 E5 85 F1 | 	sub	objptr, ##59824
0853c     64 00 90 FD | 	jmp	#LR__0731
08540                 | LR__0730
08540     78 00 00 FF 
08544     E8 E4 05 F1 | 	add	objptr, ##61672
08548     F2 02 02 FB | 	rdlong	_var02, objptr
0854c     03 02 66 F0 | 	shl	_var02, #3
08550     03 00 00 FF 
08554     38 E5 85 F1 | 	sub	objptr, ##1848
08558     F2 02 02 F1 | 	add	_var02, objptr
0855c     03 00 00 FF 
08560     14 E5 05 F1 | 	add	objptr, ##1812
08564     F2 00 02 FB | 	rdlong	_var01, objptr
08568     01 01 62 FC | 	wrlong	_var01, _var02
0856c     24 E4 05 F1 | 	add	objptr, #36
08570     F2 02 02 FB | 	rdlong	_var02, objptr
08574     03 02 66 F0 | 	shl	_var02, #3
08578     03 00 00 FF 
0857c     38 E5 85 F1 | 	sub	objptr, ##1848
08580     F2 02 02 F1 | 	add	_var02, objptr
08584     0A 00 00 FF 
08588     30 E5 85 F1 | 	sub	objptr, ##5424
0858c     F2 00 02 FB | 	rdlong	_var01, objptr
08590     6A 00 00 FF 
08594     80 E4 85 F1 | 	sub	objptr, ##54400
08598     02 00 06 F1 | 	add	_var01, #2
0859c     04 02 06 F1 | 	add	_var02, #4
085a0     01 01 62 FC | 	wrlong	_var01, _var02
085a4                 | LR__0731
085a4                 | _do_gosub_ret
085a4     2D 00 64 FD | 	ret
085a8                 | 
085a8                 | ' 
085a8                 | ' 
085a8                 | ' sub do_for()
085a8                 | _do_for
085a8     01 4A 05 F6 | 	mov	COUNT_, #1
085ac     A8 00 A0 FD | 	call	#pushregs_
085b0     10 F0 07 F1 | 	add	ptra, #16
085b4     78 00 00 FF 
085b8     E4 E4 05 F1 | 	add	objptr, ##61668
085bc     F2 12 02 FB | 	rdlong	arg01, objptr
085c0     01 12 06 F1 | 	add	arg01, #1
085c4     F2 12 62 FC | 	wrlong	arg01, objptr
085c8     78 00 00 FF 
085cc     E4 E4 85 F1 | 	sub	objptr, ##61668
085d0     8C 22 B0 FD | 	call	#_pop
085d4     A7 FA 61 FC | 	wrlong	result1, fp
085d8     04 4E 05 F1 | 	add	fp, #4
085dc     A7 FC 61 FC | 	wrlong	result2, fp
085e0     04 4E 05 F1 | 	add	fp, #4
085e4     A7 FE 61 FC | 	wrlong	result3, fp
085e8     08 4E 85 F1 | 	sub	fp, #8
085ec     78 00 00 FF 
085f0     E4 E4 05 F1 | 	add	objptr, ##61668
085f4     F2 12 02 FB | 	rdlong	arg01, objptr
085f8     09 1F 02 F6 | 	mov	local01, arg01
085fc     02 1E 66 F0 | 	shl	local01, #2
08600     09 1F 02 F1 | 	add	local01, arg01
08604     02 1E 66 F0 | 	shl	local01, #2
08608     06 00 00 FF 
0860c     48 E4 85 F1 | 	sub	objptr, ##3144
08610     F2 1E 02 F1 | 	add	local01, objptr
08614     A7 12 02 FB | 	rdlong	arg01, fp
08618     08 1E 06 F1 | 	add	local01, #8
0861c     0F 13 62 FC | 	wrlong	arg01, local01
08620     72 00 00 FF 
08624     9C E4 85 F1 | 	sub	objptr, ##58524
08628     34 22 B0 FD | 	call	#_pop
0862c     A7 FA 61 FC | 	wrlong	result1, fp
08630     04 4E 05 F1 | 	add	fp, #4
08634     A7 FC 61 FC | 	wrlong	result2, fp
08638     04 4E 05 F1 | 	add	fp, #4
0863c     A7 FE 61 FC | 	wrlong	result3, fp
08640     08 4E 85 F1 | 	sub	fp, #8
08644     78 00 00 FF 
08648     E4 E4 05 F1 | 	add	objptr, ##61668
0864c     F2 12 02 FB | 	rdlong	arg01, objptr
08650     09 1F 02 F6 | 	mov	local01, arg01
08654     02 1E 66 F0 | 	shl	local01, #2
08658     09 1F 02 F1 | 	add	local01, arg01
0865c     02 1E 66 F0 | 	shl	local01, #2
08660     06 00 00 FF 
08664     48 E4 85 F1 | 	sub	objptr, ##3144
08668     F2 1E 02 F1 | 	add	local01, objptr
0866c     A7 12 02 F6 | 	mov	arg01, fp
08670     72 00 00 FF 
08674     9C E4 85 F1 | 	sub	objptr, ##58524
08678     98 AE B0 FD | 	call	#_converttoint
0867c     FD 12 02 F6 | 	mov	arg01, result1
08680     0C 1E 06 F1 | 	add	local01, #12
08684     0F 13 62 FC | 	wrlong	arg01, local01
08688     D4 21 B0 FD | 	call	#_pop
0868c     A7 FA 61 FC | 	wrlong	result1, fp
08690     04 4E 05 F1 | 	add	fp, #4
08694     A7 FC 61 FC | 	wrlong	result2, fp
08698     04 4E 05 F1 | 	add	fp, #4
0869c     A7 FE 61 FC | 	wrlong	result3, fp
086a0     08 4E 85 F1 | 	sub	fp, #8
086a4     78 00 00 FF 
086a8     E4 E4 05 F1 | 	add	objptr, ##61668
086ac     F2 12 02 FB | 	rdlong	arg01, objptr
086b0     09 1F 02 F6 | 	mov	local01, arg01
086b4     02 1E 66 F0 | 	shl	local01, #2
086b8     09 1F 02 F1 | 	add	local01, arg01
086bc     02 1E 66 F0 | 	shl	local01, #2
086c0     06 00 00 FF 
086c4     48 E4 85 F1 | 	sub	objptr, ##3144
086c8     F2 1E 02 F1 | 	add	local01, objptr
086cc     A7 12 02 F6 | 	mov	arg01, fp
086d0     72 00 00 FF 
086d4     9C E4 85 F1 | 	sub	objptr, ##58524
086d8     38 AE B0 FD | 	call	#_converttoint
086dc     10 1E 06 F1 | 	add	local01, #16
086e0     0F FB 61 FC | 	wrlong	result1, local01
086e4                 | ' fortop+=1
086e4                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
086e4                 | ' 'if i> maxfor then printerror(36) : return
086e4                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
086e4                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
086e4                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
086e4                 | ' if compiledline(lineptr_e).result_type=token_end then
086e4     6A 00 00 FF 
086e8     80 E4 05 F1 | 	add	objptr, ##54400
086ec     F2 12 02 FB | 	rdlong	arg01, objptr
086f0     09 1F 02 F6 | 	mov	local01, arg01
086f4     01 1E 66 F0 | 	shl	local01, #1
086f8     09 1F 02 F1 | 	add	local01, arg01
086fc     02 1E 66 F0 | 	shl	local01, #2
08700     03 00 00 FF 
08704     04 E4 85 F1 | 	sub	objptr, ##1540
08708     F2 1E 02 F1 | 	add	local01, objptr
0870c     08 1E 06 F1 | 	add	local01, #8
08710     0F 1F 02 FB | 	rdlong	local01, local01
08714     FE 1F 0E F2 | 	cmp	local01, #510 wz
08718     67 00 00 FF 
0871c     7C E4 85 F1 | 	sub	objptr, ##52860
08720     70 00 90 5D |  if_ne	jmp	#LR__0740
08724     78 00 00 FF 
08728     E4 E4 05 F1 | 	add	objptr, ##61668
0872c     F2 12 02 FB | 	rdlong	arg01, objptr
08730     09 1F 02 F6 | 	mov	local01, arg01
08734     02 1E 66 F0 | 	shl	local01, #2
08738     09 1F 02 F1 | 	add	local01, arg01
0873c     02 1E 66 F0 | 	shl	local01, #2
08740     06 00 00 FF 
08744     48 E4 85 F1 | 	sub	objptr, ##3144
08748     F2 1E 02 F1 | 	add	local01, objptr
0874c     06 00 00 FF 
08750     20 E4 05 F1 | 	add	objptr, ##3104
08754     F2 12 02 FB | 	rdlong	arg01, objptr
08758     0F 13 62 FC | 	wrlong	arg01, local01
0875c     28 E4 05 F1 | 	add	objptr, #40
08760     F2 12 02 FB | 	rdlong	arg01, objptr
08764     09 1F 02 F6 | 	mov	local01, arg01
08768     02 1E 66 F0 | 	shl	local01, #2
0876c     09 1F 02 F1 | 	add	local01, arg01
08770     02 1E 66 F0 | 	shl	local01, #2
08774     06 00 00 FF 
08778     48 E4 85 F1 | 	sub	objptr, ##3144
0877c     F2 1E 02 F1 | 	add	local01, objptr
08780     04 1E 06 F1 | 	add	local01, #4
08784     0F 01 68 FC | 	wrlong	#0, local01
08788     72 00 00 FF 
0878c     9C E4 85 F1 | 	sub	objptr, ##58524
08790     7C 00 90 FD | 	jmp	#LR__0741
08794                 | LR__0740
08794     78 00 00 FF 
08798     E4 E4 05 F1 | 	add	objptr, ##61668
0879c     F2 12 02 FB | 	rdlong	arg01, objptr
087a0     09 1F 02 F6 | 	mov	local01, arg01
087a4     02 1E 66 F0 | 	shl	local01, #2
087a8     09 1F 02 F1 | 	add	local01, arg01
087ac     02 1E 66 F0 | 	shl	local01, #2
087b0     06 00 00 FF 
087b4     48 E4 85 F1 | 	sub	objptr, ##3144
087b8     F2 1E 02 F1 | 	add	local01, objptr
087bc     06 00 00 FF 
087c0     28 E4 05 F1 | 	add	objptr, ##3112
087c4     F2 12 02 FB | 	rdlong	arg01, objptr
087c8     0F 13 62 FC | 	wrlong	arg01, local01
087cc     20 E4 05 F1 | 	add	objptr, #32
087d0     F2 12 02 FB | 	rdlong	arg01, objptr
087d4     09 1F 02 F6 | 	mov	local01, arg01
087d8     02 1E 66 F0 | 	shl	local01, #2
087dc     09 1F 02 F1 | 	add	local01, arg01
087e0     02 1E 66 F0 | 	shl	local01, #2
087e4     06 00 00 FF 
087e8     48 E4 85 F1 | 	sub	objptr, ##3144
087ec     F2 1E 02 F1 | 	add	local01, objptr
087f0     08 00 00 FF 
087f4     1C E4 85 F1 | 	sub	objptr, ##4124
087f8     F2 12 02 FB | 	rdlong	arg01, objptr
087fc     6A 00 00 FF 
08800     80 E4 85 F1 | 	sub	objptr, ##54400
08804     01 12 06 F1 | 	add	arg01, #1
08808     04 1E 06 F1 | 	add	local01, #4
0880c     0F 13 62 FC | 	wrlong	arg01, local01
08810                 | LR__0741
08810     A7 F0 03 F6 | 	mov	ptra, fp
08814     B2 00 A0 FD | 	call	#popregs_
08818                 | _do_for_ret
08818     2D 00 64 FD | 	ret
0881c                 | 
0881c                 | ' 
0881c                 | ' ' now do_next todo
0881c                 | ' 
0881c                 | ' sub do_return()
0881c                 | _do_return
0881c                 | ' if gosubtop>0 then
0881c     78 00 00 FF 
08820     E8 E4 05 F1 | 	add	objptr, ##61672
08824     F2 00 02 FB | 	rdlong	_var01, objptr
08828     78 00 00 FF 
0882c     E8 E4 85 F1 | 	sub	objptr, ##61672
08830     01 00 56 F2 | 	cmps	_var01, #1 wc
08834     8C 00 90 CD |  if_b	jmp	#LR__0750
08838     78 00 00 FF 
0883c     E8 E4 05 F1 | 	add	objptr, ##61672
08840     F2 00 02 FB | 	rdlong	_var01, objptr
08844     03 00 66 F0 | 	shl	_var01, #3
08848     03 00 00 FF 
0884c     38 E5 85 F1 | 	sub	objptr, ##1848
08850     F2 00 02 F1 | 	add	_var01, objptr
08854     00 01 02 FB | 	rdlong	_var01, _var01
08858     03 00 00 FF 
0885c     0C E5 05 F1 | 	add	objptr, ##1804
08860     F2 00 62 FC | 	wrlong	_var01, objptr
08864     2C E4 05 F1 | 	add	objptr, #44
08868     F2 00 02 FB | 	rdlong	_var01, objptr
0886c     03 00 66 F0 | 	shl	_var01, #3
08870     03 00 00 FF 
08874     38 E5 85 F1 | 	sub	objptr, ##1848
08878     F2 00 02 F1 | 	add	_var01, objptr
0887c     04 00 06 F1 | 	add	_var01, #4
08880     00 01 02 FB | 	rdlong	_var01, _var01
08884     03 00 00 FF 
08888     10 E5 05 F1 | 	add	objptr, ##1808
0888c     F2 00 62 FC | 	wrlong	_var01, objptr
08890     0E 00 00 FF 
08894     44 E4 85 F1 | 	sub	objptr, ##7236
08898     F2 00 02 FB | 	rdlong	_var01, objptr
0889c     01 00 86 F1 | 	sub	_var01, #1
088a0     04 E4 05 F1 | 	add	objptr, #4
088a4     F2 00 62 FC | 	wrlong	_var01, objptr
088a8     0E 00 00 FF 
088ac     68 E4 05 F1 | 	add	objptr, ##7272
088b0     F2 00 02 FB | 	rdlong	_var01, objptr
088b4     01 00 86 F1 | 	sub	_var01, #1
088b8     F2 00 62 FC | 	wrlong	_var01, objptr
088bc     78 00 00 FF 
088c0     E8 E4 85 F1 | 	sub	objptr, ##61672
088c4                 | LR__0750
088c4                 | _do_return_ret
088c4     2D 00 64 FD | 	ret
088c8                 | 
088c8                 | ' 
088c8                 | ' sub do_pop()
088c8                 | _do_pop
088c8                 | ' if gosubtop>0 then  gosubtop -=1 
088c8     78 00 00 FF 
088cc     E8 E4 05 F1 | 	add	objptr, ##61672
088d0     F2 00 02 FB | 	rdlong	_var01, objptr
088d4     78 00 00 FF 
088d8     E8 E4 85 F1 | 	sub	objptr, ##61672
088dc     01 00 56 F2 | 	cmps	_var01, #1 wc
088e0     78 00 00 3F 
088e4     E8 E4 05 31 |  if_ae	add	objptr, ##61672
088e8     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
088ec     01 00 86 31 |  if_ae	sub	_var01, #1
088f0     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
088f4     78 00 00 3F 
088f8     E8 E4 85 31 |  if_ae	sub	objptr, ##61672
088fc                 | _do_pop_ret
088fc     2D 00 64 FD | 	ret
08900                 | 
08900                 | ' 
08900                 | ' sub do_next()
08900                 | _do_next
08900     04 4A 05 F6 | 	mov	COUNT_, #4
08904     A8 00 A0 FD | 	call	#pushregs_
08908     54 1F B0 FD | 	call	#_pop
0890c     FD 1E 02 F6 | 	mov	local01, result1
08910     FE 20 02 F6 | 	mov	local02, result2
08914     FF 22 02 F6 | 	mov	local03, result3
08918                 | ' 
08918                 | ' t1=pop() :varnum=t1.result.uresult
08918                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
08918     78 00 00 FF 
0891c     E4 E4 05 F1 | 	add	objptr, ##61668
08920     F2 12 02 FB | 	rdlong	arg01, objptr
08924     09 15 02 F6 | 	mov	arg02, arg01
08928     02 14 66 F0 | 	shl	arg02, #2
0892c     09 15 02 F1 | 	add	arg02, arg01
08930     02 14 66 F0 | 	shl	arg02, #2
08934     06 00 00 FF 
08938     48 E4 85 F1 | 	sub	objptr, ##3144
0893c     F2 14 02 F1 | 	add	arg02, objptr
08940     08 14 06 F1 | 	add	arg02, #8
08944     0A 15 02 FB | 	rdlong	arg02, arg02
08948     0F 15 0A F2 | 	cmp	arg02, local01 wz
0894c     72 00 00 FF 
08950     9C E4 85 F1 | 	sub	objptr, ##58524
08954     0C 00 90 AD |  if_e	jmp	#LR__0760
08958     25 12 06 F6 | 	mov	arg01, #37
0895c     98 1D B1 FD | 	call	#_printerror
08960     A8 02 90 FD | 	jmp	#LR__0765
08964                 | LR__0760
08964                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
08964     0F 15 02 F6 | 	mov	arg02, local01
08968     04 14 66 F0 | 	shl	arg02, #4
0896c     34 00 00 FF 
08970     F8 E5 05 F1 | 	add	objptr, ##27128
08974     F2 14 02 F1 | 	add	arg02, objptr
08978     0C 14 06 F1 | 	add	arg02, #12
0897c     0A 15 02 FB | 	rdlong	arg02, arg02
08980     1E 14 0E F2 | 	cmp	arg02, #30 wz
08984     34 00 00 FF 
08988     F8 E5 85 F1 | 	sub	objptr, ##27128
0898c     54 00 90 5D |  if_ne	jmp	#LR__0761
08990     0F 15 02 F6 | 	mov	arg02, local01
08994     04 14 66 F0 | 	shl	arg02, #4
08998     34 00 00 FF 
0899c     F8 E5 05 F1 | 	add	objptr, ##27128
089a0     F2 14 02 F1 | 	add	arg02, objptr
089a4     0C 14 06 F1 | 	add	arg02, #12
089a8     0A 39 68 FC | 	wrlong	#28, arg02
089ac     0F 25 02 F6 | 	mov	local04, local01
089b0     04 24 66 F0 | 	shl	local04, #4
089b4     F2 24 02 F1 | 	add	local04, objptr
089b8     0F 13 02 F6 | 	mov	arg01, local01
089bc     04 12 66 F0 | 	shl	arg01, #4
089c0     F2 12 02 F1 | 	add	arg01, objptr
089c4     04 12 06 F1 | 	add	arg01, #4
089c8     09 13 02 FB | 	rdlong	arg01, arg01
089cc     34 00 00 FF 
089d0     F8 E5 85 F1 | 	sub	objptr, ##27128
089d4     01 14 06 F6 | 	mov	arg02, #1
089d8     E0 91 B1 FD | 	call	#__system___float_tointeger
089dc     04 24 06 F1 | 	add	local04, #4
089e0     12 FB 61 FC | 	wrlong	result1, local04
089e4                 | LR__0761
089e4     78 00 00 FF 
089e8     E4 E4 05 F1 | 	add	objptr, ##61668
089ec     F2 12 02 FB | 	rdlong	arg01, objptr
089f0     09 25 02 F6 | 	mov	local04, arg01
089f4     02 24 66 F0 | 	shl	local04, #2
089f8     09 25 02 F1 | 	add	local04, arg01
089fc     02 24 66 F0 | 	shl	local04, #2
08a00     06 00 00 FF 
08a04     48 E4 85 F1 | 	sub	objptr, ##3144
08a08     F2 24 02 F1 | 	add	local04, objptr
08a0c     0C 24 06 F1 | 	add	local04, #12
08a10     12 25 02 FB | 	rdlong	local04, local04
08a14     0F 13 02 F6 | 	mov	arg01, local01
08a18     04 12 66 F0 | 	shl	arg01, #4
08a1c     3D 00 00 FF 
08a20     A4 E4 85 F1 | 	sub	objptr, ##31396
08a24     F2 12 02 F1 | 	add	arg01, objptr
08a28     0F FF 01 F6 | 	mov	result3, local01
08a2c     04 FE 65 F0 | 	shl	result3, #4
08a30     F2 FE 01 F1 | 	add	result3, objptr
08a34     04 FE 05 F1 | 	add	result3, #4
08a38     FF FE 01 FB | 	rdlong	result3, result3
08a3c     12 FF 01 F1 | 	add	result3, local04
08a40     04 12 06 F1 | 	add	arg01, #4
08a44     09 FF 61 FC | 	wrlong	result3, arg01
08a48                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
08a48                 | ' if fortable(fortop).stepval>=0 then
08a48     43 00 00 FF 
08a4c     EC E4 05 F1 | 	add	objptr, ##34540
08a50     F2 12 02 FB | 	rdlong	arg01, objptr
08a54     09 25 02 F6 | 	mov	local04, arg01
08a58     02 24 66 F0 | 	shl	local04, #2
08a5c     09 25 02 F1 | 	add	local04, arg01
08a60     02 24 66 F0 | 	shl	local04, #2
08a64     06 00 00 FF 
08a68     48 E4 85 F1 | 	sub	objptr, ##3144
08a6c     F2 24 02 F1 | 	add	local04, objptr
08a70     0C 24 06 F1 | 	add	local04, #12
08a74     12 25 02 FB | 	rdlong	local04, local04
08a78     00 24 56 F2 | 	cmps	local04, #0 wc
08a7c     72 00 00 FF 
08a80     9C E4 85 F1 | 	sub	objptr, ##58524
08a84     78 00 90 CD |  if_b	jmp	#LR__0762
08a88                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
08a88     04 1E 66 F0 | 	shl	local01, #4
08a8c     34 00 00 FF 
08a90     F8 E5 05 F1 | 	add	objptr, ##27128
08a94     F2 1E 02 F1 | 	add	local01, objptr
08a98     43 00 00 FF 
08a9c     EC E4 05 F1 | 	add	objptr, ##34540
08aa0     F2 24 02 FB | 	rdlong	local04, objptr
08aa4     12 13 02 F6 | 	mov	arg01, local04
08aa8     02 12 66 F0 | 	shl	arg01, #2
08aac     12 13 02 F1 | 	add	arg01, local04
08ab0     02 12 66 F0 | 	shl	arg01, #2
08ab4     06 00 00 FF 
08ab8     48 E4 85 F1 | 	sub	objptr, ##3144
08abc     F2 12 02 F1 | 	add	arg01, objptr
08ac0     04 1E 06 F1 | 	add	local01, #4
08ac4     0F 25 02 FB | 	rdlong	local04, local01
08ac8     10 12 06 F1 | 	add	arg01, #16
08acc     09 13 02 FB | 	rdlong	arg01, arg01
08ad0     09 25 5A F2 | 	cmps	local04, arg01 wcz
08ad4     72 00 00 FF 
08ad8     9C E4 85 F1 | 	sub	objptr, ##58524
08adc     9C 00 90 ED |  if_be	jmp	#LR__0764
08ae0     78 00 00 FF 
08ae4     E4 E4 05 F1 | 	add	objptr, ##61668
08ae8     F2 24 02 FB | 	rdlong	local04, objptr
08aec     01 24 86 F1 | 	sub	local04, #1
08af0     F2 24 62 FC | 	wrlong	local04, objptr
08af4     78 00 00 FF 
08af8     E4 E4 85 F1 | 	sub	objptr, ##61668
08afc     0C 01 90 FD | 	jmp	#LR__0765
08b00                 | LR__0762
08b00                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
08b00     0F 13 02 F6 | 	mov	arg01, local01
08b04     04 12 66 F0 | 	shl	arg01, #4
08b08     34 00 00 FF 
08b0c     F8 E5 05 F1 | 	add	objptr, ##27128
08b10     F2 12 02 F1 | 	add	arg01, objptr
08b14     43 00 00 FF 
08b18     EC E4 05 F1 | 	add	objptr, ##34540
08b1c     F2 24 02 FB | 	rdlong	local04, objptr
08b20     12 1F 02 F6 | 	mov	local01, local04
08b24     02 1E 66 F0 | 	shl	local01, #2
08b28     12 1F 02 F1 | 	add	local01, local04
08b2c     02 1E 66 F0 | 	shl	local01, #2
08b30     06 00 00 FF 
08b34     48 E4 85 F1 | 	sub	objptr, ##3144
08b38     F2 1E 02 F1 | 	add	local01, objptr
08b3c     04 12 06 F1 | 	add	arg01, #4
08b40     09 13 02 FB | 	rdlong	arg01, arg01
08b44     10 1E 06 F1 | 	add	local01, #16
08b48     0F 1F 02 FB | 	rdlong	local01, local01
08b4c     0F 13 52 F2 | 	cmps	arg01, local01 wc
08b50     72 00 00 FF 
08b54     9C E4 85 F1 | 	sub	objptr, ##58524
08b58     20 00 90 3D |  if_ae	jmp	#LR__0763
08b5c     78 00 00 FF 
08b60     E4 E4 05 F1 | 	add	objptr, ##61668
08b64     F2 24 02 FB | 	rdlong	local04, objptr
08b68     01 24 86 F1 | 	sub	local04, #1
08b6c     F2 24 62 FC | 	wrlong	local04, objptr
08b70     78 00 00 FF 
08b74     E4 E4 85 F1 | 	sub	objptr, ##61668
08b78     90 00 90 FD | 	jmp	#LR__0765
08b7c                 | LR__0763
08b7c                 | LR__0764
08b7c     78 00 00 FF 
08b80     E4 E4 05 F1 | 	add	objptr, ##61668
08b84     F2 1E 02 FB | 	rdlong	local01, objptr
08b88     0F 25 02 F6 | 	mov	local04, local01
08b8c     02 24 66 F0 | 	shl	local04, #2
08b90     0F 25 02 F1 | 	add	local04, local01
08b94     02 24 66 F0 | 	shl	local04, #2
08b98     06 00 00 FF 
08b9c     48 E4 85 F1 | 	sub	objptr, ##3144
08ba0     F2 24 02 F1 | 	add	local04, objptr
08ba4     12 25 02 FB | 	rdlong	local04, local04
08ba8     06 00 00 FF 
08bac     20 E4 05 F1 | 	add	objptr, ##3104
08bb0     F2 24 62 FC | 	wrlong	local04, objptr
08bb4     28 E4 05 F1 | 	add	objptr, #40
08bb8     F2 1E 02 FB | 	rdlong	local01, objptr
08bbc     0F 25 02 F6 | 	mov	local04, local01
08bc0     02 24 66 F0 | 	shl	local04, #2
08bc4     0F 25 02 F1 | 	add	local04, local01
08bc8     02 24 66 F0 | 	shl	local04, #2
08bcc     06 00 00 FF 
08bd0     48 E4 85 F1 | 	sub	objptr, ##3144
08bd4     F2 24 02 F1 | 	add	local04, objptr
08bd8     04 24 06 F1 | 	add	local04, #4
08bdc     12 25 02 FB | 	rdlong	local04, local04
08be0     06 00 00 FF 
08be4     24 E4 05 F1 | 	add	objptr, ##3108
08be8     F2 24 62 FC | 	wrlong	local04, objptr
08bec     0E 00 00 FF 
08bf0     44 E4 85 F1 | 	sub	objptr, ##7236
08bf4     F2 24 02 FB | 	rdlong	local04, objptr
08bf8     01 24 86 F1 | 	sub	local04, #1
08bfc     04 E4 05 F1 | 	add	objptr, #4
08c00     F2 24 62 FC | 	wrlong	local04, objptr
08c04     6A 00 00 FF 
08c08     80 E4 85 F1 | 	sub	objptr, ##54400
08c0c                 | LR__0765
08c0c     A7 F0 03 F6 | 	mov	ptra, fp
08c10     B2 00 A0 FD | 	call	#popregs_
08c14                 | _do_next_ret
08c14     2D 00 64 FD | 	ret
08c18                 | 
08c18                 | ' 
08c18                 | ' 
08c18                 | ' function compile_next() as ulong
08c18                 | _compile_next
08c18     04 4A 05 F6 | 	mov	COUNT_, #4
08c1c     A8 00 A0 FD | 	call	#pushregs_
08c20     57 00 00 FF 
08c24     44 E4 05 F1 | 	add	objptr, ##44612
08c28     F2 12 02 FB | 	rdlong	arg01, objptr
08c2c     03 12 66 F0 | 	shl	arg01, #3
08c30     02 00 00 FF 
08c34     38 E4 85 F1 | 	sub	objptr, ##1080
08c38     F2 12 02 F1 | 	add	arg01, objptr
08c3c     09 1F 02 FB | 	rdlong	local01, arg01
08c40                 | ' 
08c40                 | ' varname$=lparts(ct).part$ 
08c40                 | ' 'suffix$=right$(varname$,1)
08c40                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
08c40                 | ' if varnum=0 then compile_error(35)  : return 35
08c40     04 E4 85 F1 | 	sub	objptr, #4
08c44     F2 14 0A FB | 	rdlong	arg02, objptr wz
08c48     55 00 00 FF 
08c4c     08 E4 85 F1 | 	sub	objptr, ##43528
08c50     10 00 90 5D |  if_ne	jmp	#LR__0770
08c54     23 12 06 F6 | 	mov	arg01, #35
08c58     80 DE BF FD | 	call	#_compile_error
08c5c     23 FA 05 F6 | 	mov	result1, #35
08c60     58 01 90 FD | 	jmp	#LR__0774
08c64                 | LR__0770
08c64     01 20 66 F6 | 	neg	local02, #1
08c68                 | ' j=-1
08c68                 | ' for i=0 to varnum-1
08c68     00 22 06 F6 | 	mov	local03, #0
08c6c     55 00 00 FF 
08c70     08 E4 05 F1 | 	add	objptr, ##43528
08c74     F2 24 02 FB | 	rdlong	local04, objptr
08c78     55 00 00 FF 
08c7c     08 E4 85 F1 | 	sub	objptr, ##43528
08c80                 | LR__0771
08c80     12 23 12 F2 | 	cmp	local03, local04 wc
08c84     38 00 90 3D |  if_ae	jmp	#LR__0772
08c88                 | '   if variables(i).name=varname$ then j=i : exit
08c88     11 15 02 F6 | 	mov	arg02, local03
08c8c     04 14 66 F0 | 	shl	arg02, #4
08c90     34 00 00 FF 
08c94     F8 E5 05 F1 | 	add	objptr, ##27128
08c98     F2 14 02 F1 | 	add	arg02, objptr
08c9c     0A 13 02 FB | 	rdlong	arg01, arg02
08ca0     0F 15 02 F6 | 	mov	arg02, local01
08ca4     34 00 00 FF 
08ca8     F8 E5 85 F1 | 	sub	objptr, ##27128
08cac     EC 5E B1 FD | 	call	#__system___string_cmp
08cb0     00 FA 0D F2 | 	cmp	result1, #0 wz
08cb4     11 21 02 A6 |  if_e	mov	local02, local03
08cb8     01 22 06 51 |  if_ne	add	local03, #1
08cbc     C0 FF 9F 5D |  if_ne	jmp	#LR__0771
08cc0                 | LR__0772
08cc0                 | ' if j=-1 then compile_error(35) : return 35
08cc0     FF FF 7F FF 
08cc4     FF 21 0E F2 | 	cmp	local02, ##-1 wz
08cc8     10 00 90 5D |  if_ne	jmp	#LR__0773
08ccc     23 12 06 F6 | 	mov	arg01, #35
08cd0     08 DE BF FD | 	call	#_compile_error
08cd4     23 FA 05 F6 | 	mov	result1, #35
08cd8     E0 00 90 FD | 	jmp	#LR__0774
08cdc                 | LR__0773
08cdc     6A 00 00 FF 
08ce0     7C E4 05 F1 | 	add	objptr, ##54396
08ce4     F2 24 02 FB | 	rdlong	local04, objptr
08ce8     12 23 02 F6 | 	mov	local03, local04
08cec     01 22 66 F0 | 	shl	local03, #1
08cf0     12 23 02 F1 | 	add	local03, local04
08cf4     02 22 66 F0 | 	shl	local03, #2
08cf8     03 00 00 FF 
08cfc     00 E4 85 F1 | 	sub	objptr, ##1536
08d00     F2 22 02 F1 | 	add	local03, objptr
08d04     08 22 06 F1 | 	add	local03, #8
08d08     11 39 68 FC | 	wrlong	#28, local03
08d0c     03 00 00 FF 
08d10     00 E4 05 F1 | 	add	objptr, ##1536
08d14     F2 24 02 FB | 	rdlong	local04, objptr
08d18     12 23 02 F6 | 	mov	local03, local04
08d1c     01 22 66 F0 | 	shl	local03, #1
08d20     12 23 02 F1 | 	add	local03, local04
08d24     02 22 66 F0 | 	shl	local03, #2
08d28     03 00 00 FF 
08d2c     00 E4 85 F1 | 	sub	objptr, ##1536
08d30     F2 22 02 F1 | 	add	local03, objptr
08d34     11 21 62 FC | 	wrlong	local02, local03
08d38     03 00 00 FF 
08d3c     00 E4 05 F1 | 	add	objptr, ##1536
08d40     F2 24 02 FB | 	rdlong	local04, objptr
08d44     01 24 06 F1 | 	add	local04, #1
08d48     F2 24 62 FC | 	wrlong	local04, objptr
08d4c     12 23 02 F6 | 	mov	local03, local04
08d50     01 22 66 F0 | 	shl	local03, #1
08d54     12 23 02 F1 | 	add	local03, local04
08d58     02 22 66 F0 | 	shl	local03, #2
08d5c     03 00 00 FF 
08d60     00 E4 85 F1 | 	sub	objptr, ##1536
08d64     F2 22 02 F1 | 	add	local03, objptr
08d68     08 22 06 F1 | 	add	local03, #8
08d6c     11 97 68 FC | 	wrlong	#75, local03
08d70     03 00 00 FF 
08d74     00 E4 05 F1 | 	add	objptr, ##1536
08d78     F2 24 02 FB | 	rdlong	local04, objptr
08d7c     12 23 02 F6 | 	mov	local03, local04
08d80     01 22 66 F0 | 	shl	local03, #1
08d84     12 23 02 F1 | 	add	local03, local04
08d88     02 22 66 F0 | 	shl	local03, #2
08d8c     03 00 00 FF 
08d90     00 E4 85 F1 | 	sub	objptr, ##1536
08d94     F2 22 02 F1 | 	add	local03, objptr
08d98     11 01 68 FC | 	wrlong	#0, local03
08d9c     03 00 00 FF 
08da0     00 E4 05 F1 | 	add	objptr, ##1536
08da4     F2 24 02 FB | 	rdlong	local04, objptr
08da8     01 24 06 F1 | 	add	local04, #1
08dac     F2 24 62 FC | 	wrlong	local04, objptr
08db0     6A 00 00 FF 
08db4     7C E4 85 F1 | 	sub	objptr, ##54396
08db8                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
08db8                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
08db8                 | ' return 0
08db8     00 FA 05 F6 | 	mov	result1, #0
08dbc                 | LR__0774
08dbc     A7 F0 03 F6 | 	mov	ptra, fp
08dc0     B2 00 A0 FD | 	call	#popregs_
08dc4                 | _compile_next_ret
08dc4     2D 00 64 FD | 	ret
08dc8                 | 
08dc8                 | ' 
08dc8                 | ' 
08dc8                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
08dc8                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
08dc8                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
08dc8                 | ' 
08dc8                 | ' function compile_gosub() as ulong
08dc8                 | _compile_gosub
08dc8     01 4A 05 F6 | 	mov	COUNT_, #1
08dcc     A8 00 A0 FD | 	call	#pushregs_
08dd0     6A 00 00 FF 
08dd4     7C E4 05 F1 | 	add	objptr, ##54396
08dd8     F2 1E 02 FB | 	rdlong	local01, objptr
08ddc     0F FB 01 F6 | 	mov	result1, local01
08de0     01 FA 65 F0 | 	shl	result1, #1
08de4     0F FB 01 F1 | 	add	result1, local01
08de8     02 FA 65 F0 | 	shl	result1, #2
08dec     03 00 00 FF 
08df0     00 E4 85 F1 | 	sub	objptr, ##1536
08df4     F2 FA 01 F1 | 	add	result1, objptr
08df8     08 FA 05 F1 | 	add	result1, #8
08dfc     FD 52 69 FC | 	wrlong	#169, result1
08e00     03 00 00 FF 
08e04     00 E4 05 F1 | 	add	objptr, ##1536
08e08     F2 1E 02 FB | 	rdlong	local01, objptr
08e0c     01 1E 06 F1 | 	add	local01, #1
08e10     F2 1E 62 FC | 	wrlong	local01, objptr
08e14     6A 00 00 FF 
08e18     7C E4 85 F1 | 	sub	objptr, ##54396
08e1c     10 00 B0 FD | 	call	#_compile_goto
08e20                 | ' 
08e20                 | ' compiledline(lineptr).result_type=token_gosub
08e20                 | ' lineptr+=1
08e20                 | ' compile_goto()
08e20                 | ' return 0
08e20     00 FA 05 F6 | 	mov	result1, #0
08e24     A7 F0 03 F6 | 	mov	ptra, fp
08e28     B2 00 A0 FD | 	call	#popregs_
08e2c                 | _compile_gosub_ret
08e2c     2D 00 64 FD | 	ret
08e30                 | 
08e30                 | ' 
08e30                 | ' function compile_goto( ) as ulong
08e30                 | _compile_goto
08e30     03 4A 05 F6 | 	mov	COUNT_, #3
08e34     A8 00 A0 FD | 	call	#pushregs_
08e38     34 F0 07 F1 | 	add	ptra, #52
08e3c                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
08e3c     57 00 00 FF 
08e40     44 E4 05 F1 | 	add	objptr, ##44612
08e44     F2 16 02 FB | 	rdlong	arg03, objptr
08e48     03 16 66 F0 | 	shl	arg03, #3
08e4c     02 00 00 FF 
08e50     38 E4 85 F1 | 	sub	objptr, ##1080
08e54     F2 16 02 F1 | 	add	arg03, objptr
08e58     04 16 06 F1 | 	add	arg03, #4
08e5c     0B 17 02 FB | 	rdlong	arg03, arg03
08e60     01 00 00 FF 
08e64     00 16 0E F2 | 	cmp	arg03, ##512 wz
08e68     55 00 00 FF 
08e6c     0C E4 85 F1 | 	sub	objptr, ##43532
08e70     CC 02 90 5D |  if_ne	jmp	#LR__0785
08e74     57 00 00 FF 
08e78     44 E4 05 F1 | 	add	objptr, ##44612
08e7c     F2 16 02 FB | 	rdlong	arg03, objptr
08e80     01 16 06 F1 | 	add	arg03, #1
08e84     03 16 66 F0 | 	shl	arg03, #3
08e88     02 00 00 FF 
08e8c     38 E4 85 F1 | 	sub	objptr, ##1080
08e90     F2 16 02 F1 | 	add	arg03, objptr
08e94     04 16 06 F1 | 	add	arg03, #4
08e98     0B 17 02 FB | 	rdlong	arg03, arg03
08e9c     FE 17 0E F2 | 	cmp	arg03, #510 wz
08ea0     55 00 00 FF 
08ea4     0C E4 85 F1 | 	sub	objptr, ##43532
08ea8     94 02 90 5D |  if_ne	jmp	#LR__0785
08eac     57 00 00 FF 
08eb0     44 E4 05 F1 | 	add	objptr, ##44612
08eb4     F2 16 02 FB | 	rdlong	arg03, objptr
08eb8     03 16 66 F0 | 	shl	arg03, #3
08ebc     02 00 00 FF 
08ec0     38 E4 85 F1 | 	sub	objptr, ##1080
08ec4     F2 16 02 F1 | 	add	arg03, objptr
08ec8     0B 13 02 FB | 	rdlong	arg01, arg03
08ecc     00 14 06 F6 | 	mov	arg02, #0
08ed0     55 00 00 FF 
08ed4     0C E4 85 F1 | 	sub	objptr, ##43532
08ed8     90 8E B1 FD | 	call	#__system____builtin_atoi
08edc     04 4E 05 F1 | 	add	fp, #4
08ee0     A7 FA 61 FC | 	wrlong	result1, fp
08ee4     6A 00 00 FF 
08ee8     7C E4 05 F1 | 	add	objptr, ##54396
08eec     F2 1E 02 FB | 	rdlong	local01, objptr
08ef0     0F 21 02 F6 | 	mov	local02, local01
08ef4     01 20 66 F0 | 	shl	local02, #1
08ef8     0F 21 02 F1 | 	add	local02, local01
08efc     02 20 66 F0 | 	shl	local02, #2
08f00     03 00 00 FF 
08f04     00 E4 85 F1 | 	sub	objptr, ##1536
08f08     F2 20 02 F1 | 	add	local02, objptr
08f0c     08 20 06 F1 | 	add	local02, #8
08f10     10 9D 68 FC | 	wrlong	#78, local02
08f14     03 00 00 FF 
08f18     08 E4 05 F1 | 	add	objptr, ##1544
08f1c     F2 22 02 FB | 	rdlong	local03, objptr
08f20     6A 00 00 FF 
08f24     84 E4 85 F1 | 	sub	objptr, ##54404
08f28     04 4E 05 F1 | 	add	fp, #4
08f2c     A7 22 62 FC | 	wrlong	local03, fp
08f30     08 4E 85 F1 | 	sub	fp, #8
08f34                 | ' 
08f34                 | '   gotoline=val%(lparts(ct).part$) 
08f34                 | '   compiledline(lineptr).result_type=token_fast_goto
08f34                 | ' ' now find a pointer to goto
08f34                 | '   gotoptr=programstart
08f34                 | '   do
08f34                 | LR__0780
08f34     10 4E 05 F1 | 	add	fp, #16
08f38     A7 12 02 F6 | 	mov	arg01, fp
08f3c     08 4E 85 F1 | 	sub	fp, #8
08f40     A7 14 02 FB | 	rdlong	arg02, fp
08f44     08 4E 85 F1 | 	sub	fp, #8
08f48     18 16 06 F6 | 	mov	arg03, #24
08f4c     0B 00 00 FF 
08f50     CC E4 05 F1 | 	add	objptr, ##5836
08f54     F8 4F B1 FD | 	call	#_psram_spin2_read1
08f58     0B 00 00 FF 
08f5c     CC E4 85 F1 | 	sub	objptr, ##5836
08f60                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
08f60                 | '     if gotoheader(0)<>$FFFFFFFF then
08f60     10 4E 05 F1 | 	add	fp, #16
08f64     A7 22 02 FB | 	rdlong	local03, fp
08f68     10 4E 85 F1 | 	sub	fp, #16
08f6c     FF FF 7F FF 
08f70     FF 23 0E F2 | 	cmp	local03, ##-1 wz
08f74     24 00 90 AD |  if_e	jmp	#LR__0781
08f78     08 4E 05 F1 | 	add	fp, #8
08f7c     A7 22 02 FB | 	rdlong	local03, fp
08f80     04 4E 05 F1 | 	add	fp, #4
08f84     A7 22 62 FC | 	wrlong	local03, fp
08f88     18 4E 05 F1 | 	add	fp, #24
08f8c     A7 22 02 FB | 	rdlong	local03, fp
08f90     1C 4E 85 F1 | 	sub	fp, #28
08f94     A7 22 62 FC | 	wrlong	local03, fp
08f98     08 4E 85 F1 | 	sub	fp, #8
08f9c                 | LR__0781
08f9c     24 4E 05 F1 | 	add	fp, #36
08fa0     A7 22 02 FB | 	rdlong	local03, fp
08fa4     24 4E 85 F1 | 	sub	fp, #36
08fa8     FF FF 3F FF 
08fac     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
08fb0     10 4E 05 51 |  if_ne	add	fp, #16
08fb4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
08fb8     10 4E 85 51 |  if_ne	sub	fp, #16
08fbc     FF FF 7F 5F 
08fc0     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
08fc4     1C 00 90 AD |  if_e	jmp	#LR__0782
08fc8     10 4E 05 F1 | 	add	fp, #16
08fcc     A7 22 02 FB | 	rdlong	local03, fp
08fd0     0C 4E 85 F1 | 	sub	fp, #12
08fd4     A7 20 02 FB | 	rdlong	local02, fp
08fd8     04 4E 85 F1 | 	sub	fp, #4
08fdc     10 23 0A F2 | 	cmp	local03, local02 wz
08fe0     50 FF 9F 5D |  if_ne	jmp	#LR__0780
08fe4                 | LR__0782
08fe4                 | '   if gotoheader(0)=gotoline then
08fe4     10 4E 05 F1 | 	add	fp, #16
08fe8     A7 22 02 FB | 	rdlong	local03, fp
08fec     0C 4E 85 F1 | 	sub	fp, #12
08ff0     A7 1E 02 FB | 	rdlong	local01, fp
08ff4     04 4E 85 F1 | 	sub	fp, #4
08ff8     0F 23 0A F2 | 	cmp	local03, local01 wz
08ffc     7C 00 90 5D |  if_ne	jmp	#LR__0783
09000     6A 00 00 FF 
09004     7C E4 05 F1 | 	add	objptr, ##54396
09008     F2 1E 02 FB | 	rdlong	local01, objptr
0900c     0F 21 02 F6 | 	mov	local02, local01
09010     01 20 66 F0 | 	shl	local02, #1
09014     0F 21 02 F1 | 	add	local02, local01
09018     02 20 66 F0 | 	shl	local02, #2
0901c     03 00 00 FF 
09020     00 E4 85 F1 | 	sub	objptr, ##1536
09024     F2 20 02 F1 | 	add	local02, objptr
09028     0C 4E 05 F1 | 	add	fp, #12
0902c     A7 22 02 FB | 	rdlong	local03, fp
09030     10 23 62 FC | 	wrlong	local03, local02
09034     03 00 00 FF 
09038     00 E4 05 F1 | 	add	objptr, ##1536
0903c     F2 1E 02 FB | 	rdlong	local01, objptr
09040     0F 21 02 F6 | 	mov	local02, local01
09044     01 20 66 F0 | 	shl	local02, #1
09048     0F 21 02 F1 | 	add	local02, local01
0904c     02 20 66 F0 | 	shl	local02, #2
09050     03 00 00 FF 
09054     00 E4 85 F1 | 	sub	objptr, ##1536
09058     F2 20 02 F1 | 	add	local02, objptr
0905c     08 4E 85 F1 | 	sub	fp, #8
09060     A7 22 02 FB | 	rdlong	local03, fp
09064     04 4E 85 F1 | 	sub	fp, #4
09068     04 20 06 F1 | 	add	local02, #4
0906c     10 23 62 FC | 	wrlong	local03, local02
09070     67 00 00 FF 
09074     7C E4 85 F1 | 	sub	objptr, ##52860
09078     A4 00 90 FD | 	jmp	#LR__0784
0907c                 | LR__0783
0907c     6A 00 00 FF 
09080     7C E4 05 F1 | 	add	objptr, ##54396
09084     F2 1E 02 FB | 	rdlong	local01, objptr
09088     0F 21 02 F6 | 	mov	local02, local01
0908c     01 20 66 F0 | 	shl	local02, #1
09090     0F 21 02 F1 | 	add	local02, local01
09094     02 20 66 F0 | 	shl	local02, #2
09098     03 00 00 FF 
0909c     00 E4 85 F1 | 	sub	objptr, ##1536
090a0     F2 20 02 F1 | 	add	local02, objptr
090a4     00 00 C0 FF 
090a8     10 01 68 FC | 	wrlong	##-2147483648, local02
090ac     03 00 00 FF 
090b0     00 E4 05 F1 | 	add	objptr, ##1536
090b4     F2 1E 02 FB | 	rdlong	local01, objptr
090b8     0F 21 02 F6 | 	mov	local02, local01
090bc     01 20 66 F0 | 	shl	local02, #1
090c0     0F 21 02 F1 | 	add	local02, local01
090c4     02 20 66 F0 | 	shl	local02, #2
090c8     03 00 00 FF 
090cc     00 E4 85 F1 | 	sub	objptr, ##1536
090d0     F2 20 02 F1 | 	add	local02, objptr
090d4     04 4E 05 F1 | 	add	fp, #4
090d8     A7 22 02 FB | 	rdlong	local03, fp
090dc     04 4E 85 F1 | 	sub	fp, #4
090e0     04 20 06 F1 | 	add	local02, #4
090e4     10 23 62 FC | 	wrlong	local03, local02
090e8     03 00 00 FF 
090ec     00 E4 05 F1 | 	add	objptr, ##1536
090f0     F2 1E 02 FB | 	rdlong	local01, objptr
090f4     0F 21 02 F6 | 	mov	local02, local01
090f8     01 20 66 F0 | 	shl	local02, #1
090fc     0F 21 02 F1 | 	add	local02, local01
09100     02 20 66 F0 | 	shl	local02, #2
09104     03 00 00 FF 
09108     00 E4 85 F1 | 	sub	objptr, ##1536
0910c     F2 20 02 F1 | 	add	local02, objptr
09110     08 20 06 F1 | 	add	local02, #8
09114     10 A7 68 FC | 	wrlong	#83, local02
09118     67 00 00 FF 
0911c     7C E4 85 F1 | 	sub	objptr, ##52860
09120                 | LR__0784
09120     6A 00 00 FF 
09124     7C E4 05 F1 | 	add	objptr, ##54396
09128     F2 22 02 FB | 	rdlong	local03, objptr
0912c     01 22 06 F1 | 	add	local03, #1
09130     F2 22 62 FC | 	wrlong	local03, objptr
09134     6A 00 00 FF 
09138     7C E4 85 F1 | 	sub	objptr, ##54396
0913c     D0 00 90 FD | 	jmp	#LR__0786
09140                 | LR__0785
09140     DC 00 B0 FD | 	call	#_expr
09144     30 4E 05 F1 | 	add	fp, #48
09148     A7 9E 68 FC | 	wrlong	#79, fp
0914c     08 4E 85 F1 | 	sub	fp, #8
09150     A7 00 68 FC | 	wrlong	#0, fp
09154     04 4E 05 F1 | 	add	fp, #4
09158     A7 22 02 FB | 	rdlong	local03, fp
0915c     04 4E 05 F1 | 	add	fp, #4
09160     A7 1E 02 FB | 	rdlong	local01, fp
09164     30 4E 85 F1 | 	sub	fp, #48
09168     6A 00 00 FF 
0916c     7C E4 05 F1 | 	add	objptr, ##54396
09170     F2 20 02 FB | 	rdlong	local02, objptr
09174     10 17 02 F6 | 	mov	arg03, local02
09178     01 16 66 F0 | 	shl	arg03, #1
0917c     10 17 02 F1 | 	add	arg03, local02
09180     02 16 66 F0 | 	shl	arg03, #2
09184     03 00 00 FF 
09188     00 E4 85 F1 | 	sub	objptr, ##1536
0918c     F2 16 02 F1 | 	add	arg03, objptr
09190     0B 01 68 FC | 	wrlong	#0, arg03
09194     03 00 00 FF 
09198     00 E4 05 F1 | 	add	objptr, ##1536
0919c     F2 20 02 FB | 	rdlong	local02, objptr
091a0     10 17 02 F6 | 	mov	arg03, local02
091a4     01 16 66 F0 | 	shl	arg03, #1
091a8     10 17 02 F1 | 	add	arg03, local02
091ac     02 16 66 F0 | 	shl	arg03, #2
091b0     03 00 00 FF 
091b4     00 E4 85 F1 | 	sub	objptr, ##1536
091b8     F2 16 02 F1 | 	add	arg03, objptr
091bc     04 16 06 F1 | 	add	arg03, #4
091c0     0B 23 62 FC | 	wrlong	local03, arg03
091c4     03 00 00 FF 
091c8     00 E4 05 F1 | 	add	objptr, ##1536
091cc     F2 22 02 FB | 	rdlong	local03, objptr
091d0     11 21 02 F6 | 	mov	local02, local03
091d4     01 20 66 F0 | 	shl	local02, #1
091d8     11 21 02 F1 | 	add	local02, local03
091dc     02 20 66 F0 | 	shl	local02, #2
091e0     03 00 00 FF 
091e4     00 E4 85 F1 | 	sub	objptr, ##1536
091e8     F2 20 02 F1 | 	add	local02, objptr
091ec     08 20 06 F1 | 	add	local02, #8
091f0     10 1F 62 FC | 	wrlong	local01, local02
091f4     03 00 00 FF 
091f8     00 E4 05 F1 | 	add	objptr, ##1536
091fc     F2 22 02 FB | 	rdlong	local03, objptr
09200     01 22 06 F1 | 	add	local03, #1
09204     F2 22 62 FC | 	wrlong	local03, objptr
09208     6A 00 00 FF 
0920c     7C E4 85 F1 | 	sub	objptr, ##54396
09210                 | LR__0786
09210                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
09210                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
09210                 | ' return 0
09210     00 FA 05 F6 | 	mov	result1, #0
09214     A7 F0 03 F6 | 	mov	ptra, fp
09218     B2 00 A0 FD | 	call	#popregs_
0921c                 | _compile_goto_ret
0921c     2D 00 64 FD | 	ret
09220                 | 
09220                 | ' 
09220                 | ' 
09220                 | ' 
09220                 | ' 
09220                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09220                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
09220                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09220                 | ' 
09220                 | ' 
09220                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09220                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
09220                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09220                 | ' 
09220                 | ' 
09220                 | ' function expr() as integer 
09220                 | _expr
09220     07 4A 05 F6 | 	mov	COUNT_, #7
09224     A8 00 A0 FD | 	call	#pushregs_
09228                 | _expr_enter
09228     57 00 00 FF 
0922c     44 E4 05 F1 | 	add	objptr, ##44612
09230     F2 24 02 FB | 	rdlong	local04, objptr
09234     03 24 66 F0 | 	shl	local04, #3
09238     02 00 00 FF 
0923c     38 E4 85 F1 | 	sub	objptr, ##1080
09240     F2 24 02 F1 | 	add	local04, objptr
09244     04 24 06 F1 | 	add	local04, #4
09248     12 27 02 FB | 	rdlong	local05, local04
0924c                 | ' 
0924c                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0924c     FE 27 0E F2 | 	cmp	local05, #510 wz
09250     55 00 00 FF 
09254     0C E4 85 F1 | 	sub	objptr, ##43532
09258     C4 00 90 5D |  if_ne	jmp	#LR__0790
0925c     1D 1E 06 F6 | 	mov	local01, #29
09260     FF 22 06 F6 | 	mov	local03, #255
09264     0F 29 02 F6 | 	mov	local06, local01
09268     10 2B 02 F6 | 	mov	local07, local02
0926c     11 1F 02 F6 | 	mov	local01, local03
09270     6A 00 00 FF 
09274     7C E4 05 F1 | 	add	objptr, ##54396
09278     F2 26 02 FB | 	rdlong	local05, objptr
0927c     13 25 02 F6 | 	mov	local04, local05
09280     01 24 66 F0 | 	shl	local04, #1
09284     13 25 02 F1 | 	add	local04, local05
09288     02 24 66 F0 | 	shl	local04, #2
0928c     03 00 00 FF 
09290     00 E4 85 F1 | 	sub	objptr, ##1536
09294     F2 24 02 F1 | 	add	local04, objptr
09298     12 29 62 FC | 	wrlong	local06, local04
0929c     03 00 00 FF 
092a0     00 E4 05 F1 | 	add	objptr, ##1536
092a4     F2 28 02 FB | 	rdlong	local06, objptr
092a8     14 27 02 F6 | 	mov	local05, local06
092ac     01 26 66 F0 | 	shl	local05, #1
092b0     14 27 02 F1 | 	add	local05, local06
092b4     02 26 66 F0 | 	shl	local05, #2
092b8     03 00 00 FF 
092bc     00 E4 85 F1 | 	sub	objptr, ##1536
092c0     F2 26 02 F1 | 	add	local05, objptr
092c4     04 26 06 F1 | 	add	local05, #4
092c8     13 2B 62 FC | 	wrlong	local07, local05
092cc     03 00 00 FF 
092d0     00 E4 05 F1 | 	add	objptr, ##1536
092d4     F2 2A 02 FB | 	rdlong	local07, objptr
092d8     15 29 02 F6 | 	mov	local06, local07
092dc     01 28 66 F0 | 	shl	local06, #1
092e0     15 29 02 F1 | 	add	local06, local07
092e4     02 28 66 F0 | 	shl	local06, #2
092e8     03 00 00 FF 
092ec     00 E4 85 F1 | 	sub	objptr, ##1536
092f0     F2 28 02 F1 | 	add	local06, objptr
092f4     08 28 06 F1 | 	add	local06, #8
092f8     14 1F 62 FC | 	wrlong	local01, local06
092fc     03 00 00 FF 
09300     00 E4 05 F1 | 	add	objptr, ##1536
09304     F2 28 02 FB | 	rdlong	local06, objptr
09308     01 28 06 F1 | 	add	local06, #1
0930c     F2 28 62 FC | 	wrlong	local06, objptr
09310     6A 00 00 FF 
09314     7C E4 85 F1 | 	sub	objptr, ##54396
09318     1D FA 05 F6 | 	mov	result1, #29
0931c     54 01 90 FD | 	jmp	#LR__0793
09320                 | LR__0790
09320     00 1E 06 F6 | 	mov	local01, #0
09324     58 01 B0 FD | 	call	#_addsub
09328     57 00 00 FF 
0932c     44 E4 05 F1 | 	add	objptr, ##44612
09330     F2 24 02 FB | 	rdlong	local04, objptr
09334     03 24 66 F0 | 	shl	local04, #3
09338     02 00 00 FF 
0933c     38 E4 85 F1 | 	sub	objptr, ##1080
09340     F2 24 02 F1 | 	add	local04, objptr
09344     04 24 06 F1 | 	add	local04, #4
09348     12 27 02 FB | 	rdlong	local05, local04
0934c                 | ' t3.result.uresult=0
0934c                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
0934c                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
0934c                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0934c     55 00 00 FF 
09350     0C E4 85 F1 | 	sub	objptr, ##43532
09354                 | LR__0791
09354     1B 26 0E F2 | 	cmp	local05, #27 wz
09358     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
0935c     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
09360     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
09364     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
09368     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
0936c     00 01 90 5D |  if_ne	jmp	#LR__0792
09370     57 00 00 FF 
09374     44 E4 05 F1 | 	add	objptr, ##44612
09378     F2 28 02 FB | 	rdlong	local06, objptr
0937c     01 28 06 F1 | 	add	local06, #1
09380     F2 28 62 FC | 	wrlong	local06, objptr
09384     57 00 00 FF 
09388     44 E4 85 F1 | 	sub	objptr, ##44612
0938c     F0 00 B0 FD | 	call	#_addsub
09390     13 23 02 F6 | 	mov	local03, local05
09394     0F 29 02 F6 | 	mov	local06, local01
09398     10 2B 02 F6 | 	mov	local07, local02
0939c     11 27 02 F6 | 	mov	local05, local03
093a0     6A 00 00 FF 
093a4     7C E4 05 F1 | 	add	objptr, ##54396
093a8     F2 24 02 FB | 	rdlong	local04, objptr
093ac     12 FB 01 F6 | 	mov	result1, local04
093b0     01 FA 65 F0 | 	shl	result1, #1
093b4     12 FB 01 F1 | 	add	result1, local04
093b8     02 FA 65 F0 | 	shl	result1, #2
093bc     03 00 00 FF 
093c0     00 E4 85 F1 | 	sub	objptr, ##1536
093c4     F2 FA 01 F1 | 	add	result1, objptr
093c8     FD 28 62 FC | 	wrlong	local06, result1
093cc     03 00 00 FF 
093d0     00 E4 05 F1 | 	add	objptr, ##1536
093d4     F2 28 02 FB | 	rdlong	local06, objptr
093d8     14 25 02 F6 | 	mov	local04, local06
093dc     01 24 66 F0 | 	shl	local04, #1
093e0     14 25 02 F1 | 	add	local04, local06
093e4     02 24 66 F0 | 	shl	local04, #2
093e8     03 00 00 FF 
093ec     00 E4 85 F1 | 	sub	objptr, ##1536
093f0     F2 24 02 F1 | 	add	local04, objptr
093f4     04 24 06 F1 | 	add	local04, #4
093f8     12 2B 62 FC | 	wrlong	local07, local04
093fc     03 00 00 FF 
09400     00 E4 05 F1 | 	add	objptr, ##1536
09404     F2 2A 02 FB | 	rdlong	local07, objptr
09408     15 29 02 F6 | 	mov	local06, local07
0940c     01 28 66 F0 | 	shl	local06, #1
09410     15 29 02 F1 | 	add	local06, local07
09414     02 28 66 F0 | 	shl	local06, #2
09418     03 00 00 FF 
0941c     00 E4 85 F1 | 	sub	objptr, ##1536
09420     F2 28 02 F1 | 	add	local06, objptr
09424     08 28 06 F1 | 	add	local06, #8
09428     14 27 62 FC | 	wrlong	local05, local06
0942c     03 00 00 FF 
09430     00 E4 05 F1 | 	add	objptr, ##1536
09434     F2 28 02 FB | 	rdlong	local06, objptr
09438     01 28 06 F1 | 	add	local06, #1
0943c     F2 28 62 FC | 	wrlong	local06, objptr
09440     13 00 00 FF 
09444     38 E4 85 F1 | 	sub	objptr, ##9784
09448     F2 24 02 FB | 	rdlong	local04, objptr
0944c     03 24 66 F0 | 	shl	local04, #3
09450     02 00 00 FF 
09454     38 E4 85 F1 | 	sub	objptr, ##1080
09458     F2 24 02 F1 | 	add	local04, objptr
0945c     04 24 06 F1 | 	add	local04, #4
09460     12 27 02 FB | 	rdlong	local05, local04
09464     55 00 00 FF 
09468     0C E4 85 F1 | 	sub	objptr, ##43532
0946c     E4 FE 9F FD | 	jmp	#LR__0791
09470                 | LR__0792
09470                 | ' return 0  
09470     00 FA 05 F6 | 	mov	result1, #0
09474                 | LR__0793
09474     A7 F0 03 F6 | 	mov	ptra, fp
09478     B2 00 A0 FD | 	call	#popregs_
0947c                 | _expr_ret
0947c     2D 00 64 FD | 	ret
09480                 | 
09480                 | ' 
09480                 | ' 
09480                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
09480                 | ' 
09480                 | ' function addsub() as integer 
09480                 | _addsub
09480     07 4A 05 F6 | 	mov	COUNT_, #7
09484     A8 00 A0 FD | 	call	#pushregs_
09488                 | _addsub_enter
09488     00 1E 06 F6 | 	mov	local01, #0
0948c     50 01 B0 FD | 	call	#_muldiv
09490     57 00 00 FF 
09494     44 E4 05 F1 | 	add	objptr, ##44612
09498     F2 24 02 FB | 	rdlong	local04, objptr
0949c     03 24 66 F0 | 	shl	local04, #3
094a0     02 00 00 FF 
094a4     38 E4 85 F1 | 	sub	objptr, ##1080
094a8     F2 24 02 F1 | 	add	local04, objptr
094ac     04 24 06 F1 | 	add	local04, #4
094b0     12 27 02 FB | 	rdlong	local05, local04
094b4                 | ' t3.result.uresult=0
094b4                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
094b4                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
094b4                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
094b4     55 00 00 FF 
094b8     0C E4 85 F1 | 	sub	objptr, ##43532
094bc                 | LR__0800
094bc     01 26 0E F2 | 	cmp	local05, #1 wz
094c0     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
094c4     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
094c8     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
094cc     00 01 90 5D |  if_ne	jmp	#LR__0801
094d0     57 00 00 FF 
094d4     44 E4 05 F1 | 	add	objptr, ##44612
094d8     F2 24 02 FB | 	rdlong	local04, objptr
094dc     01 24 06 F1 | 	add	local04, #1
094e0     F2 24 62 FC | 	wrlong	local04, objptr
094e4     57 00 00 FF 
094e8     44 E4 85 F1 | 	sub	objptr, ##44612
094ec     F0 00 B0 FD | 	call	#_muldiv
094f0     13 23 02 F6 | 	mov	local03, local05
094f4     0F 29 02 F6 | 	mov	local06, local01
094f8     10 2B 02 F6 | 	mov	local07, local02
094fc     11 27 02 F6 | 	mov	local05, local03
09500     6A 00 00 FF 
09504     7C E4 05 F1 | 	add	objptr, ##54396
09508     F2 24 02 FB | 	rdlong	local04, objptr
0950c     12 FB 01 F6 | 	mov	result1, local04
09510     01 FA 65 F0 | 	shl	result1, #1
09514     12 FB 01 F1 | 	add	result1, local04
09518     02 FA 65 F0 | 	shl	result1, #2
0951c     03 00 00 FF 
09520     00 E4 85 F1 | 	sub	objptr, ##1536
09524     F2 FA 01 F1 | 	add	result1, objptr
09528     FD 28 62 FC | 	wrlong	local06, result1
0952c     03 00 00 FF 
09530     00 E4 05 F1 | 	add	objptr, ##1536
09534     F2 28 02 FB | 	rdlong	local06, objptr
09538     14 25 02 F6 | 	mov	local04, local06
0953c     01 24 66 F0 | 	shl	local04, #1
09540     14 25 02 F1 | 	add	local04, local06
09544     02 24 66 F0 | 	shl	local04, #2
09548     03 00 00 FF 
0954c     00 E4 85 F1 | 	sub	objptr, ##1536
09550     F2 24 02 F1 | 	add	local04, objptr
09554     04 24 06 F1 | 	add	local04, #4
09558     12 2B 62 FC | 	wrlong	local07, local04
0955c     03 00 00 FF 
09560     00 E4 05 F1 | 	add	objptr, ##1536
09564     F2 2A 02 FB | 	rdlong	local07, objptr
09568     15 29 02 F6 | 	mov	local06, local07
0956c     01 28 66 F0 | 	shl	local06, #1
09570     15 29 02 F1 | 	add	local06, local07
09574     02 28 66 F0 | 	shl	local06, #2
09578     03 00 00 FF 
0957c     00 E4 85 F1 | 	sub	objptr, ##1536
09580     F2 28 02 F1 | 	add	local06, objptr
09584     08 28 06 F1 | 	add	local06, #8
09588     14 27 62 FC | 	wrlong	local05, local06
0958c     03 00 00 FF 
09590     00 E4 05 F1 | 	add	objptr, ##1536
09594     F2 28 02 FB | 	rdlong	local06, objptr
09598     01 28 06 F1 | 	add	local06, #1
0959c     F2 28 62 FC | 	wrlong	local06, objptr
095a0     13 00 00 FF 
095a4     38 E4 85 F1 | 	sub	objptr, ##9784
095a8     F2 24 02 FB | 	rdlong	local04, objptr
095ac     03 24 66 F0 | 	shl	local04, #3
095b0     02 00 00 FF 
095b4     38 E4 85 F1 | 	sub	objptr, ##1080
095b8     F2 24 02 F1 | 	add	local04, objptr
095bc     04 24 06 F1 | 	add	local04, #4
095c0     12 27 02 FB | 	rdlong	local05, local04
095c4     55 00 00 FF 
095c8     0C E4 85 F1 | 	sub	objptr, ##43532
095cc     EC FE 9F FD | 	jmp	#LR__0800
095d0                 | LR__0801
095d0                 | '   return 0
095d0     00 FA 05 F6 | 	mov	result1, #0
095d4     A7 F0 03 F6 | 	mov	ptra, fp
095d8     B2 00 A0 FD | 	call	#popregs_
095dc                 | _addsub_ret
095dc     2D 00 64 FD | 	ret
095e0                 | 
095e0                 | ' 
095e0                 | ' sub muldiv()
095e0                 | _muldiv
095e0     08 4A 05 F6 | 	mov	COUNT_, #8
095e4     A8 00 A0 FD | 	call	#pushregs_
095e8                 | _muldiv_enter
095e8     00 1E 06 F6 | 	mov	local01, #0
095ec     58 01 B0 FD | 	call	#_getvalue
095f0     57 00 00 FF 
095f4     44 E4 05 F1 | 	add	objptr, ##44612
095f8     F2 24 02 FB | 	rdlong	local04, objptr
095fc     03 24 66 F0 | 	shl	local04, #3
09600     02 00 00 FF 
09604     38 E4 85 F1 | 	sub	objptr, ##1080
09608     F2 24 02 F1 | 	add	local04, objptr
0960c     04 24 06 F1 | 	add	local04, #4
09610     12 27 02 FB | 	rdlong	local05, local04
09614                 | ' t3.result.uresult=0
09614                 | ' getvalue()    
09614                 | ' op = lparts(ct).token
09614                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
09614     55 00 00 FF 
09618     0C E4 85 F1 | 	sub	objptr, ##43532
0961c                 | LR__0810
0961c     05 26 0E F2 | 	cmp	local05, #5 wz
09620     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
09624     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
09628     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
0962c     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
09630     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
09634     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
09638     00 01 90 5D |  if_ne	jmp	#LR__0811
0963c     57 00 00 FF 
09640     44 E4 05 F1 | 	add	objptr, ##44612
09644     F2 24 02 FB | 	rdlong	local04, objptr
09648     01 24 06 F1 | 	add	local04, #1
0964c     F2 24 62 FC | 	wrlong	local04, objptr
09650     57 00 00 FF 
09654     44 E4 85 F1 | 	sub	objptr, ##44612
09658     EC 00 B0 FD | 	call	#_getvalue
0965c     13 23 02 F6 | 	mov	local03, local05
09660     0F 29 02 F6 | 	mov	local06, local01
09664     10 2B 02 F6 | 	mov	local07, local02
09668     11 27 02 F6 | 	mov	local05, local03
0966c     6A 00 00 FF 
09670     7C E4 05 F1 | 	add	objptr, ##54396
09674     F2 24 02 FB | 	rdlong	local04, objptr
09678     12 2D 02 F6 | 	mov	local08, local04
0967c     01 2C 66 F0 | 	shl	local08, #1
09680     12 2D 02 F1 | 	add	local08, local04
09684     02 2C 66 F0 | 	shl	local08, #2
09688     03 00 00 FF 
0968c     00 E4 85 F1 | 	sub	objptr, ##1536
09690     F2 2C 02 F1 | 	add	local08, objptr
09694     16 29 62 FC | 	wrlong	local06, local08
09698     03 00 00 FF 
0969c     00 E4 05 F1 | 	add	objptr, ##1536
096a0     F2 2C 02 FB | 	rdlong	local08, objptr
096a4     16 29 02 F6 | 	mov	local06, local08
096a8     01 28 66 F0 | 	shl	local06, #1
096ac     16 29 02 F1 | 	add	local06, local08
096b0     02 28 66 F0 | 	shl	local06, #2
096b4     03 00 00 FF 
096b8     00 E4 85 F1 | 	sub	objptr, ##1536
096bc     F2 28 02 F1 | 	add	local06, objptr
096c0     04 28 06 F1 | 	add	local06, #4
096c4     14 2B 62 FC | 	wrlong	local07, local06
096c8     03 00 00 FF 
096cc     00 E4 05 F1 | 	add	objptr, ##1536
096d0     F2 2C 02 FB | 	rdlong	local08, objptr
096d4     16 2B 02 F6 | 	mov	local07, local08
096d8     01 2A 66 F0 | 	shl	local07, #1
096dc     16 2B 02 F1 | 	add	local07, local08
096e0     02 2A 66 F0 | 	shl	local07, #2
096e4     03 00 00 FF 
096e8     00 E4 85 F1 | 	sub	objptr, ##1536
096ec     F2 2A 02 F1 | 	add	local07, objptr
096f0     08 2A 06 F1 | 	add	local07, #8
096f4     15 27 62 FC | 	wrlong	local05, local07
096f8     03 00 00 FF 
096fc     00 E4 05 F1 | 	add	objptr, ##1536
09700     F2 28 02 FB | 	rdlong	local06, objptr
09704     01 28 06 F1 | 	add	local06, #1
09708     F2 28 62 FC | 	wrlong	local06, objptr
0970c     13 00 00 FF 
09710     38 E4 85 F1 | 	sub	objptr, ##9784
09714     F2 24 02 FB | 	rdlong	local04, objptr
09718     03 24 66 F0 | 	shl	local04, #3
0971c     02 00 00 FF 
09720     38 E4 85 F1 | 	sub	objptr, ##1080
09724     F2 24 02 F1 | 	add	local04, objptr
09728     04 24 06 F1 | 	add	local04, #4
0972c     12 27 02 FB | 	rdlong	local05, local04
09730     55 00 00 FF 
09734     0C E4 85 F1 | 	sub	objptr, ##43532
09738     E0 FE 9F FD | 	jmp	#LR__0810
0973c                 | LR__0811
0973c     A7 F0 03 F6 | 	mov	ptra, fp
09740     B2 00 A0 FD | 	call	#popregs_
09744                 | _muldiv_ret
09744     2D 00 64 FD | 	ret
09748                 | 
09748                 | ' 
09748                 | ' sub getvalue() 
09748                 | _getvalue
09748     0B 4A 05 F6 | 	mov	COUNT_, #11
0974c     A8 00 A0 FD | 	call	#pushregs_
09750                 | _getvalue_enter
09750     01 24 06 F6 | 	mov	local04, #1
09754     00 1E 06 F6 | 	mov	local01, #0
09758     1D 22 06 F6 | 	mov	local03, #29
0975c     57 00 00 FF 
09760     44 E4 05 F1 | 	add	objptr, ##44612
09764     F2 16 02 FB | 	rdlong	arg03, objptr
09768     03 16 66 F0 | 	shl	arg03, #3
0976c     02 00 00 FF 
09770     38 E4 85 F1 | 	sub	objptr, ##1080
09774     F2 16 02 F1 | 	add	arg03, objptr
09778     04 16 06 F1 | 	add	arg03, #4
0977c     0B 27 02 FB | 	rdlong	local05, arg03
09780                 | ' m=1
09780                 | ' t1.result.uresult=0: t1.result_type=result_uint
09780                 | ' op=lparts(ct).token
09780                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
09780     02 26 0E F2 | 	cmp	local05, #2 wz
09784     55 00 00 FF 
09788     0C E4 85 F1 | 	sub	objptr, ##43532
0978c     38 00 90 5D |  if_ne	jmp	#LR__0820
09790     01 24 66 F6 | 	neg	local04, #1
09794     57 00 00 FF 
09798     44 E4 05 F1 | 	add	objptr, ##44612
0979c     F2 26 02 FB | 	rdlong	local05, objptr
097a0     01 26 06 F1 | 	add	local05, #1
097a4     F2 26 62 FC | 	wrlong	local05, objptr
097a8     03 26 66 F0 | 	shl	local05, #3
097ac     02 00 00 FF 
097b0     38 E4 85 F1 | 	sub	objptr, ##1080
097b4     F2 26 02 F1 | 	add	local05, objptr
097b8     04 26 06 F1 | 	add	local05, #4
097bc     13 27 02 FB | 	rdlong	local05, local05
097c0     55 00 00 FF 
097c4     0C E4 85 F1 | 	sub	objptr, ##43532
097c8                 | LR__0820
097c8                 | ' select case op
097c8     01 00 00 FF 
097cc     00 26 0E F2 | 	cmp	local05, ##512 wz
097d0     3C 00 90 AD |  if_e	jmp	#LR__0821
097d4     01 00 00 FF 
097d8     01 26 0E F2 | 	cmp	local05, ##513 wz
097dc     88 01 90 AD |  if_e	jmp	#LR__0824
097e0     01 00 00 FF 
097e4     02 26 0E F2 | 	cmp	local05, ##514 wz
097e8     3C 04 90 AD |  if_e	jmp	#LR__0831
097ec     01 00 00 FF 
097f0     03 26 0E F2 | 	cmp	local05, ##515 wz
097f4     A0 05 90 AD |  if_e	jmp	#LR__0834
097f8     01 00 00 FF 
097fc     04 26 0E F2 | 	cmp	local05, ##516 wz
09800     70 07 90 AD |  if_e	jmp	#LR__0839
09804     15 26 0E F2 | 	cmp	local05, #21 wz
09808     90 07 90 AD |  if_e	jmp	#LR__0840
0980c     00 08 90 FD | 	jmp	#LR__0841
09810                 | LR__0821
09810                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
09810     01 24 0E F2 | 	cmp	local04, #1 wz
09814     3C 00 90 5D |  if_ne	jmp	#LR__0822
09818     57 00 00 FF 
0981c     44 E4 05 F1 | 	add	objptr, ##44612
09820     F2 26 02 FB | 	rdlong	local05, objptr
09824     03 26 66 F0 | 	shl	local05, #3
09828     02 00 00 FF 
0982c     38 E4 85 F1 | 	sub	objptr, ##1080
09830     F2 26 02 F1 | 	add	local05, objptr
09834     13 13 02 FB | 	rdlong	arg01, local05
09838     00 14 06 F6 | 	mov	arg02, #0
0983c     55 00 00 FF 
09840     0C E4 85 F1 | 	sub	objptr, ##43532
09844     24 85 B1 FD | 	call	#__system____builtin_atoi
09848     FD 24 02 FD | 	qmul	local04, result1
0984c     18 1E 62 FD | 	getqx	local01
09850     1C 22 06 F6 | 	mov	local03, #28
09854                 | LR__0822
09854                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
09854     FF FF 7F FF 
09858     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0985c     3C 00 90 5D |  if_ne	jmp	#LR__0823
09860     57 00 00 FF 
09864     44 E4 05 F1 | 	add	objptr, ##44612
09868     F2 26 02 FB | 	rdlong	local05, objptr
0986c     03 26 66 F0 | 	shl	local05, #3
09870     02 00 00 FF 
09874     38 E4 85 F1 | 	sub	objptr, ##1080
09878     F2 26 02 F1 | 	add	local05, objptr
0987c     13 13 02 FB | 	rdlong	arg01, local05
09880     00 14 06 F6 | 	mov	arg02, #0
09884     55 00 00 FF 
09888     0C E4 85 F1 | 	sub	objptr, ##43532
0988c     DC 84 B1 FD | 	call	#__system____builtin_atoi
09890     FD 24 02 FD | 	qmul	local04, result1
09894     18 1E 62 FD | 	getqx	local01
09898     1C 22 06 F6 | 	mov	local03, #28
0989c                 | LR__0823
0989c     0F 29 02 F6 | 	mov	local06, local01
098a0     10 2B 02 F6 | 	mov	local07, local02
098a4     11 27 02 F6 | 	mov	local05, local03
098a8     6A 00 00 FF 
098ac     7C E4 05 F1 | 	add	objptr, ##54396
098b0     F2 1E 02 FB | 	rdlong	local01, objptr
098b4     0F 25 02 F6 | 	mov	local04, local01
098b8     01 24 66 F0 | 	shl	local04, #1
098bc     0F 25 02 F1 | 	add	local04, local01
098c0     02 24 66 F0 | 	shl	local04, #2
098c4     03 00 00 FF 
098c8     00 E4 85 F1 | 	sub	objptr, ##1536
098cc     F2 24 02 F1 | 	add	local04, objptr
098d0     12 29 62 FC | 	wrlong	local06, local04
098d4     03 00 00 FF 
098d8     00 E4 05 F1 | 	add	objptr, ##1536
098dc     F2 28 02 FB | 	rdlong	local06, objptr
098e0     14 1F 02 F6 | 	mov	local01, local06
098e4     01 1E 66 F0 | 	shl	local01, #1
098e8     14 1F 02 F1 | 	add	local01, local06
098ec     02 1E 66 F0 | 	shl	local01, #2
098f0     03 00 00 FF 
098f4     00 E4 85 F1 | 	sub	objptr, ##1536
098f8     F2 1E 02 F1 | 	add	local01, objptr
098fc     04 1E 06 F1 | 	add	local01, #4
09900     0F 2B 62 FC | 	wrlong	local07, local01
09904     03 00 00 FF 
09908     00 E4 05 F1 | 	add	objptr, ##1536
0990c     F2 2A 02 FB | 	rdlong	local07, objptr
09910     15 29 02 F6 | 	mov	local06, local07
09914     01 28 66 F0 | 	shl	local06, #1
09918     15 29 02 F1 | 	add	local06, local07
0991c     02 28 66 F0 | 	shl	local06, #2
09920     03 00 00 FF 
09924     00 E4 85 F1 | 	sub	objptr, ##1536
09928     F2 28 02 F1 | 	add	local06, objptr
0992c     08 28 06 F1 | 	add	local06, #8
09930     14 27 62 FC | 	wrlong	local05, local06
09934     03 00 00 FF 
09938     00 E4 05 F1 | 	add	objptr, ##1536
0993c     F2 28 02 FB | 	rdlong	local06, objptr
09940     01 28 06 F1 | 	add	local06, #1
09944     F2 28 62 FC | 	wrlong	local06, objptr
09948     13 00 00 FF 
0994c     38 E4 85 F1 | 	sub	objptr, ##9784
09950     F2 28 02 FB | 	rdlong	local06, objptr
09954     01 28 06 F1 | 	add	local06, #1
09958     F2 28 62 FC | 	wrlong	local06, objptr
0995c     57 00 00 FF 
09960     44 E4 85 F1 | 	sub	objptr, ##44612
09964     CC 06 90 FD | 	jmp	#LR__0842
09968                 | LR__0824
09968                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
09968     57 00 00 FF 
0996c     44 E4 05 F1 | 	add	objptr, ##44612
09970     F2 16 02 FB | 	rdlong	arg03, objptr
09974     03 16 66 F0 | 	shl	arg03, #3
09978     02 00 00 FF 
0997c     38 E4 85 F1 | 	sub	objptr, ##1080
09980     F2 16 02 F1 | 	add	arg03, objptr
09984     0B 13 02 FB | 	rdlong	arg01, arg03
09988     01 14 06 F6 | 	mov	arg02, #1
0998c     55 00 00 FF 
09990     0C E4 85 F1 | 	sub	objptr, ##43532
09994     24 72 B1 FD | 	call	#__system__Left_S
09998     FD 12 02 F6 | 	mov	arg01, result1
0999c     73 01 00 FF 
099a0     1D 15 06 F6 | 	mov	arg02, ##@LR__5113
099a4     F4 51 B1 FD | 	call	#__system___string_cmp
099a8     00 FA 0D F2 | 	cmp	result1, #0 wz
099ac     94 00 90 5D |  if_ne	jmp	#LR__0827
099b0     57 00 00 FF 
099b4     44 E4 05 F1 | 	add	objptr, ##44612
099b8     F2 2A 02 FB | 	rdlong	local07, objptr
099bc     15 29 02 F6 | 	mov	local06, local07
099c0     03 28 66 F0 | 	shl	local06, #3
099c4     02 00 00 FF 
099c8     38 E4 85 F1 | 	sub	objptr, ##1080
099cc     F2 28 02 F1 | 	add	local06, objptr
099d0     73 01 00 FF 
099d4     1F 27 06 F6 | 	mov	local05, ##@LR__5114
099d8     03 2A 66 F0 | 	shl	local07, #3
099dc     F2 2A 02 F1 | 	add	local07, objptr
099e0     15 2B 02 FB | 	rdlong	local07, local07
099e4     02 00 00 FF 
099e8     38 E4 05 F1 | 	add	objptr, ##1080
099ec     F2 1E 02 FB | 	rdlong	local01, objptr
099f0     03 1E 66 F0 | 	shl	local01, #3
099f4     02 00 00 FF 
099f8     38 E4 85 F1 | 	sub	objptr, ##1080
099fc     F2 1E 02 F1 | 	add	local01, objptr
09a00     0F 13 02 FB | 	rdlong	arg01, local01
09a04     55 00 00 FF 
09a08     0C E4 85 F1 | 	sub	objptr, ##43532
09a0c     09 2D 02 F6 | 	mov	local08, arg01
09a10     97 06 48 FB | 	callpa	#(@LR__0826-@LR__0825)>>2,fcache_load_ptr_
09a14                 | LR__0825
09a14     16 FB C9 FA | 	rdbyte	result1, local08 wz
09a18     01 2C 06 51 |  if_ne	add	local08, #1
09a1c     F4 FF 9F 5D |  if_ne	jmp	#LR__0825
09a20                 | LR__0826
09a20     09 2D 82 F1 | 	sub	local08, arg01
09a24     16 15 02 F6 | 	mov	arg02, local08
09a28     01 14 86 F1 | 	sub	arg02, #1
09a2c     15 13 02 F6 | 	mov	arg01, local07
09a30     10 72 B1 FD | 	call	#__system__Right_S
09a34     FD 14 02 F6 | 	mov	arg02, result1
09a38     13 13 02 F6 | 	mov	arg01, local05
09a3c     90 51 B1 FD | 	call	#__system___string_concat
09a40     14 FB 61 FC | 	wrlong	result1, local06
09a44                 | LR__0827
09a44                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
09a44     57 00 00 FF 
09a48     44 E4 05 F1 | 	add	objptr, ##44612
09a4c     F2 16 02 FB | 	rdlong	arg03, objptr
09a50     03 16 66 F0 | 	shl	arg03, #3
09a54     02 00 00 FF 
09a58     38 E4 85 F1 | 	sub	objptr, ##1080
09a5c     F2 16 02 F1 | 	add	arg03, objptr
09a60     0B 13 02 FB | 	rdlong	arg01, arg03
09a64     01 14 06 F6 | 	mov	arg02, #1
09a68     55 00 00 FF 
09a6c     0C E4 85 F1 | 	sub	objptr, ##43532
09a70     48 71 B1 FD | 	call	#__system__Left_S
09a74     FD 12 02 F6 | 	mov	arg01, result1
09a78     73 01 00 FF 
09a7c     22 15 06 F6 | 	mov	arg02, ##@LR__5115
09a80     18 51 B1 FD | 	call	#__system___string_cmp
09a84     00 FA 0D F2 | 	cmp	result1, #0 wz
09a88     94 00 90 5D |  if_ne	jmp	#LR__0830
09a8c     57 00 00 FF 
09a90     44 E4 05 F1 | 	add	objptr, ##44612
09a94     F2 2A 02 FB | 	rdlong	local07, objptr
09a98     15 29 02 F6 | 	mov	local06, local07
09a9c     03 28 66 F0 | 	shl	local06, #3
09aa0     02 00 00 FF 
09aa4     38 E4 85 F1 | 	sub	objptr, ##1080
09aa8     F2 28 02 F1 | 	add	local06, objptr
09aac     73 01 00 FF 
09ab0     24 27 06 F6 | 	mov	local05, ##@LR__5116
09ab4     03 2A 66 F0 | 	shl	local07, #3
09ab8     F2 2A 02 F1 | 	add	local07, objptr
09abc     15 2B 02 FB | 	rdlong	local07, local07
09ac0     02 00 00 FF 
09ac4     38 E4 05 F1 | 	add	objptr, ##1080
09ac8     F2 1E 02 FB | 	rdlong	local01, objptr
09acc     03 1E 66 F0 | 	shl	local01, #3
09ad0     02 00 00 FF 
09ad4     38 E4 85 F1 | 	sub	objptr, ##1080
09ad8     F2 1E 02 F1 | 	add	local01, objptr
09adc     0F 13 02 FB | 	rdlong	arg01, local01
09ae0     55 00 00 FF 
09ae4     0C E4 85 F1 | 	sub	objptr, ##43532
09ae8     09 2D 02 F6 | 	mov	local08, arg01
09aec     97 06 48 FB | 	callpa	#(@LR__0829-@LR__0828)>>2,fcache_load_ptr_
09af0                 | LR__0828
09af0     16 FB C9 FA | 	rdbyte	result1, local08 wz
09af4     01 2C 06 51 |  if_ne	add	local08, #1
09af8     F4 FF 9F 5D |  if_ne	jmp	#LR__0828
09afc                 | LR__0829
09afc     09 2D 82 F1 | 	sub	local08, arg01
09b00     16 15 02 F6 | 	mov	arg02, local08
09b04     01 14 86 F1 | 	sub	arg02, #1
09b08     15 13 02 F6 | 	mov	arg01, local07
09b0c     34 71 B1 FD | 	call	#__system__Right_S
09b10     FD 14 02 F6 | 	mov	arg02, result1
09b14     13 13 02 F6 | 	mov	arg01, local05
09b18     B4 50 B1 FD | 	call	#__system___string_concat
09b1c     14 FB 61 FC | 	wrlong	result1, local06
09b20                 | LR__0830
09b20     57 00 00 FF 
09b24     44 E4 05 F1 | 	add	objptr, ##44612
09b28     F2 28 02 FB | 	rdlong	local06, objptr
09b2c     03 28 66 F0 | 	shl	local06, #3
09b30     02 00 00 FF 
09b34     38 E4 85 F1 | 	sub	objptr, ##1080
09b38     F2 28 02 F1 | 	add	local06, objptr
09b3c     14 13 02 FB | 	rdlong	arg01, local06
09b40     00 14 06 F6 | 	mov	arg02, #0
09b44     55 00 00 FF 
09b48     0C E4 85 F1 | 	sub	objptr, ##43532
09b4c     1C 82 B1 FD | 	call	#__system____builtin_atoi
09b50     FD 24 02 FD | 	qmul	local04, result1
09b54     6A 00 00 FF 
09b58     7C E4 05 F1 | 	add	objptr, ##54396
09b5c     F2 28 02 FB | 	rdlong	local06, objptr
09b60     14 2F 02 F6 | 	mov	local09, local06
09b64     01 2E 66 F0 | 	shl	local09, #1
09b68     14 2F 02 F1 | 	add	local09, local06
09b6c     02 2E 66 F0 | 	shl	local09, #2
09b70     03 00 00 FF 
09b74     00 E4 85 F1 | 	sub	objptr, ##1536
09b78     F2 2E 02 F1 | 	add	local09, objptr
09b7c     03 00 00 FF 
09b80     00 E4 05 F1 | 	add	objptr, ##1536
09b84     18 1E 62 FD | 	getqx	local01
09b88     1C 22 06 F6 | 	mov	local03, #28
09b8c     0F 29 02 F6 | 	mov	local06, local01
09b90     10 2B 02 F6 | 	mov	local07, local02
09b94     17 29 62 FC | 	wrlong	local06, local09
09b98     11 2F 02 F6 | 	mov	local09, local03
09b9c     F2 28 02 FB | 	rdlong	local06, objptr
09ba0     14 27 02 F6 | 	mov	local05, local06
09ba4     01 26 66 F0 | 	shl	local05, #1
09ba8     14 27 02 F1 | 	add	local05, local06
09bac     02 26 66 F0 | 	shl	local05, #2
09bb0     03 00 00 FF 
09bb4     00 E4 85 F1 | 	sub	objptr, ##1536
09bb8     F2 26 02 F1 | 	add	local05, objptr
09bbc     04 26 06 F1 | 	add	local05, #4
09bc0     13 2B 62 FC | 	wrlong	local07, local05
09bc4     03 00 00 FF 
09bc8     00 E4 05 F1 | 	add	objptr, ##1536
09bcc     F2 2A 02 FB | 	rdlong	local07, objptr
09bd0     15 29 02 F6 | 	mov	local06, local07
09bd4     01 28 66 F0 | 	shl	local06, #1
09bd8     15 29 02 F1 | 	add	local06, local07
09bdc     02 28 66 F0 | 	shl	local06, #2
09be0     03 00 00 FF 
09be4     00 E4 85 F1 | 	sub	objptr, ##1536
09be8     F2 28 02 F1 | 	add	local06, objptr
09bec     08 28 06 F1 | 	add	local06, #8
09bf0     14 2F 62 FC | 	wrlong	local09, local06
09bf4     03 00 00 FF 
09bf8     00 E4 05 F1 | 	add	objptr, ##1536
09bfc     F2 28 02 FB | 	rdlong	local06, objptr
09c00     01 28 06 F1 | 	add	local06, #1
09c04     F2 28 62 FC | 	wrlong	local06, objptr
09c08     13 00 00 FF 
09c0c     38 E4 85 F1 | 	sub	objptr, ##9784
09c10     F2 28 02 FB | 	rdlong	local06, objptr
09c14     01 28 06 F1 | 	add	local06, #1
09c18     F2 28 62 FC | 	wrlong	local06, objptr
09c1c     57 00 00 FF 
09c20     44 E4 85 F1 | 	sub	objptr, ##44612
09c24     0C 04 90 FD | 	jmp	#LR__0842
09c28                 | LR__0831
09c28                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
09c28     01 24 0E F2 | 	cmp	local04, #1 wz
09c2c     48 00 90 5D |  if_ne	jmp	#LR__0832
09c30     00 C0 1F FF 
09c34     00 28 06 F6 | 	mov	local06, ##1065353216
09c38     57 00 00 FF 
09c3c     44 E4 05 F1 | 	add	objptr, ##44612
09c40     F2 2E 02 FB | 	rdlong	local09, objptr
09c44     03 2E 66 F0 | 	shl	local09, #3
09c48     02 00 00 FF 
09c4c     38 E4 85 F1 | 	sub	objptr, ##1080
09c50     F2 2E 02 F1 | 	add	local09, objptr
09c54     17 13 02 FB | 	rdlong	arg01, local09
09c58     55 00 00 FF 
09c5c     0C E4 85 F1 | 	sub	objptr, ##43532
09c60     78 82 B1 FD | 	call	#__system____builtin_atof
09c64     FD 14 02 F6 | 	mov	arg02, result1
09c68     14 13 02 F6 | 	mov	arg01, local06
09c6c     84 7A B1 FD | 	call	#__system___float_mul
09c70     FD 1E 02 F6 | 	mov	local01, result1
09c74     1E 22 06 F6 | 	mov	local03, #30
09c78                 | LR__0832
09c78                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
09c78     FF FF 7F FF 
09c7c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09c80     48 00 90 5D |  if_ne	jmp	#LR__0833
09c84     00 C0 5F FF 
09c88     00 28 06 F6 | 	mov	local06, ##-1082130432
09c8c     57 00 00 FF 
09c90     44 E4 05 F1 | 	add	objptr, ##44612
09c94     F2 2E 02 FB | 	rdlong	local09, objptr
09c98     03 2E 66 F0 | 	shl	local09, #3
09c9c     02 00 00 FF 
09ca0     38 E4 85 F1 | 	sub	objptr, ##1080
09ca4     F2 2E 02 F1 | 	add	local09, objptr
09ca8     17 13 02 FB | 	rdlong	arg01, local09
09cac     55 00 00 FF 
09cb0     0C E4 85 F1 | 	sub	objptr, ##43532
09cb4     24 82 B1 FD | 	call	#__system____builtin_atof
09cb8     FD 14 02 F6 | 	mov	arg02, result1
09cbc     14 13 02 F6 | 	mov	arg01, local06
09cc0     30 7A B1 FD | 	call	#__system___float_mul
09cc4     FD 1E 02 F6 | 	mov	local01, result1
09cc8     1E 22 06 F6 | 	mov	local03, #30
09ccc                 | LR__0833
09ccc     0F 29 02 F6 | 	mov	local06, local01
09cd0     10 2B 02 F6 | 	mov	local07, local02
09cd4     11 27 02 F6 | 	mov	local05, local03
09cd8     6A 00 00 FF 
09cdc     7C E4 05 F1 | 	add	objptr, ##54396
09ce0     F2 1E 02 FB | 	rdlong	local01, objptr
09ce4     0F 2F 02 F6 | 	mov	local09, local01
09ce8     01 2E 66 F0 | 	shl	local09, #1
09cec     0F 2F 02 F1 | 	add	local09, local01
09cf0     02 2E 66 F0 | 	shl	local09, #2
09cf4     03 00 00 FF 
09cf8     00 E4 85 F1 | 	sub	objptr, ##1536
09cfc     F2 2E 02 F1 | 	add	local09, objptr
09d00     17 29 62 FC | 	wrlong	local06, local09
09d04     03 00 00 FF 
09d08     00 E4 05 F1 | 	add	objptr, ##1536
09d0c     F2 2E 02 FB | 	rdlong	local09, objptr
09d10     17 29 02 F6 | 	mov	local06, local09
09d14     01 28 66 F0 | 	shl	local06, #1
09d18     17 29 02 F1 | 	add	local06, local09
09d1c     02 28 66 F0 | 	shl	local06, #2
09d20     03 00 00 FF 
09d24     00 E4 85 F1 | 	sub	objptr, ##1536
09d28     F2 28 02 F1 | 	add	local06, objptr
09d2c     04 28 06 F1 | 	add	local06, #4
09d30     14 2B 62 FC | 	wrlong	local07, local06
09d34     03 00 00 FF 
09d38     00 E4 05 F1 | 	add	objptr, ##1536
09d3c     F2 2E 02 FB | 	rdlong	local09, objptr
09d40     17 2B 02 F6 | 	mov	local07, local09
09d44     01 2A 66 F0 | 	shl	local07, #1
09d48     17 2B 02 F1 | 	add	local07, local09
09d4c     02 2A 66 F0 | 	shl	local07, #2
09d50     03 00 00 FF 
09d54     00 E4 85 F1 | 	sub	objptr, ##1536
09d58     F2 2A 02 F1 | 	add	local07, objptr
09d5c     08 2A 06 F1 | 	add	local07, #8
09d60     15 27 62 FC | 	wrlong	local05, local07
09d64     03 00 00 FF 
09d68     00 E4 05 F1 | 	add	objptr, ##1536
09d6c     F2 28 02 FB | 	rdlong	local06, objptr
09d70     01 28 06 F1 | 	add	local06, #1
09d74     F2 28 62 FC | 	wrlong	local06, objptr
09d78     13 00 00 FF 
09d7c     38 E4 85 F1 | 	sub	objptr, ##9784
09d80     F2 28 02 FB | 	rdlong	local06, objptr
09d84     01 28 06 F1 | 	add	local06, #1
09d88     F2 28 62 FC | 	wrlong	local06, objptr
09d8c     57 00 00 FF 
09d90     44 E4 85 F1 | 	sub	objptr, ##44612
09d94     9C 02 90 FD | 	jmp	#LR__0842
09d98                 | LR__0834
09d98     1F 22 06 F6 | 	mov	local03, #31
09d9c     57 00 00 FF 
09da0     44 E4 05 F1 | 	add	objptr, ##44612
09da4     F2 16 02 FB | 	rdlong	arg03, objptr
09da8     03 16 66 F0 | 	shl	arg03, #3
09dac     02 00 00 FF 
09db0     38 E4 85 F1 | 	sub	objptr, ##1080
09db4     F2 16 02 F1 | 	add	arg03, objptr
09db8     0B 13 02 FB | 	rdlong	arg01, arg03
09dbc     55 00 00 FF 
09dc0     0C E4 85 F1 | 	sub	objptr, ##43532
09dc4     09 2D 02 F6 | 	mov	local08, arg01
09dc8     97 06 48 FB | 	callpa	#(@LR__0836-@LR__0835)>>2,fcache_load_ptr_
09dcc                 | LR__0835
09dcc     16 FB C9 FA | 	rdbyte	result1, local08 wz
09dd0     01 2C 06 51 |  if_ne	add	local08, #1
09dd4     F4 FF 9F 5D |  if_ne	jmp	#LR__0835
09dd8                 | LR__0836
09dd8     09 2D 82 F1 | 	sub	local08, arg01
09ddc     16 FB 01 F6 | 	mov	result1, local08
09de0     79 00 00 FF 
09de4     E4 E5 05 F1 | 	add	objptr, ##62436
09de8     F2 FA 61 FC | 	wrlong	result1, objptr
09dec     5C E4 85 F1 | 	sub	objptr, #92
09df0     F2 12 02 FB | 	rdlong	arg01, objptr
09df4     FD 12 82 F1 | 	sub	arg01, result1
09df8     04 12 86 F1 | 	sub	arg01, #4
09dfc     03 12 26 F5 | 	andn	arg01, #3
09e00     F2 12 62 FC | 	wrlong	arg01, objptr
09e04     5C E4 05 F1 | 	add	objptr, #92
09e08     F2 14 02 FB | 	rdlong	arg02, objptr
09e0c     79 00 00 FF 
09e10     E4 E5 85 F1 | 	sub	objptr, ##62436
09e14     44 0A B1 FD | 	call	#_pslpoke
09e18                 | '     pslpoke memtop,l
09e18                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
09e18     01 30 06 F6 | 	mov	local10, #1
09e1c     79 00 00 FF 
09e20     E4 E5 05 F1 | 	add	objptr, ##62436
09e24     F2 32 02 FB | 	rdlong	local11, objptr
09e28     79 00 00 FF 
09e2c     E4 E5 85 F1 | 	sub	objptr, ##62436
09e30     01 32 06 F1 | 	add	local11, #1
09e34                 | LR__0837
09e34     19 31 52 F2 | 	cmps	local10, local11 wc
09e38     5C 00 90 3D |  if_ae	jmp	#LR__0838
09e3c     79 00 00 FF 
09e40     88 E5 05 F1 | 	add	objptr, ##62344
09e44     F2 2A 02 FB | 	rdlong	local07, objptr
09e48     03 2A 06 F1 | 	add	local07, #3
09e4c     18 2B 02 F1 | 	add	local07, local10
09e50     22 00 00 FF 
09e54     44 E5 85 F1 | 	sub	objptr, ##17732
09e58     F2 2E 02 FB | 	rdlong	local09, objptr
09e5c     03 2E 66 F0 | 	shl	local09, #3
09e60     02 00 00 FF 
09e64     38 E4 85 F1 | 	sub	objptr, ##1080
09e68     F2 2E 02 F1 | 	add	local09, objptr
09e6c     17 13 02 FB | 	rdlong	arg01, local09
09e70     18 15 02 F6 | 	mov	arg02, local10
09e74     01 16 06 F6 | 	mov	arg03, #1
09e78     55 00 00 FF 
09e7c     0C E4 85 F1 | 	sub	objptr, ##43532
09e80     50 6E B1 FD | 	call	#__system__Mid_S
09e84     FD 14 C2 FA | 	rdbyte	arg02, result1
09e88     15 13 02 F6 | 	mov	arg01, local07
09e8c     5C 0A B1 FD | 	call	#_pspoke
09e90     01 30 06 F1 | 	add	local10, #1
09e94     9C FF 9F FD | 	jmp	#LR__0837
09e98                 | LR__0838
09e98     79 00 00 FF 
09e9c     88 E5 05 F1 | 	add	objptr, ##62344
09ea0     F2 1E 02 FB | 	rdlong	local01, objptr
09ea4     2B 22 06 F6 | 	mov	local03, #43
09ea8     0F 29 02 F6 | 	mov	local06, local01
09eac     10 2B 02 F6 | 	mov	local07, local02
09eb0     11 33 02 F6 | 	mov	local11, local03
09eb4     0F 00 00 FF 
09eb8     0C E5 85 F1 | 	sub	objptr, ##7948
09ebc     F2 30 02 FB | 	rdlong	local10, objptr
09ec0     18 2F 02 F6 | 	mov	local09, local10
09ec4     01 2E 66 F0 | 	shl	local09, #1
09ec8     18 2F 02 F1 | 	add	local09, local10
09ecc     02 2E 66 F0 | 	shl	local09, #2
09ed0     03 00 00 FF 
09ed4     00 E4 85 F1 | 	sub	objptr, ##1536
09ed8     F2 2E 02 F1 | 	add	local09, objptr
09edc     17 29 62 FC | 	wrlong	local06, local09
09ee0     03 00 00 FF 
09ee4     00 E4 05 F1 | 	add	objptr, ##1536
09ee8     F2 30 02 FB | 	rdlong	local10, objptr
09eec     18 2F 02 F6 | 	mov	local09, local10
09ef0     01 2E 66 F0 | 	shl	local09, #1
09ef4     18 2F 02 F1 | 	add	local09, local10
09ef8     02 2E 66 F0 | 	shl	local09, #2
09efc     03 00 00 FF 
09f00     00 E4 85 F1 | 	sub	objptr, ##1536
09f04     F2 2E 02 F1 | 	add	local09, objptr
09f08     04 2E 06 F1 | 	add	local09, #4
09f0c     17 2B 62 FC | 	wrlong	local07, local09
09f10     03 00 00 FF 
09f14     00 E4 05 F1 | 	add	objptr, ##1536
09f18     F2 30 02 FB | 	rdlong	local10, objptr
09f1c     18 2F 02 F6 | 	mov	local09, local10
09f20     01 2E 66 F0 | 	shl	local09, #1
09f24     18 2F 02 F1 | 	add	local09, local10
09f28     02 2E 66 F0 | 	shl	local09, #2
09f2c     03 00 00 FF 
09f30     00 E4 85 F1 | 	sub	objptr, ##1536
09f34     F2 2E 02 F1 | 	add	local09, objptr
09f38     08 2E 06 F1 | 	add	local09, #8
09f3c     17 33 62 FC | 	wrlong	local11, local09
09f40     03 00 00 FF 
09f44     00 E4 05 F1 | 	add	objptr, ##1536
09f48     F2 28 02 FB | 	rdlong	local06, objptr
09f4c     01 28 06 F1 | 	add	local06, #1
09f50     F2 28 62 FC | 	wrlong	local06, objptr
09f54     13 00 00 FF 
09f58     38 E4 85 F1 | 	sub	objptr, ##9784
09f5c     F2 28 02 FB | 	rdlong	local06, objptr
09f60     01 28 06 F1 | 	add	local06, #1
09f64     F2 28 62 FC | 	wrlong	local06, objptr
09f68     57 00 00 FF 
09f6c     44 E4 85 F1 | 	sub	objptr, ##44612
09f70     C0 00 90 FD | 	jmp	#LR__0842
09f74                 | LR__0839
09f74     12 13 02 F6 | 	mov	arg01, local04
09f78     B8 03 B0 FD | 	call	#_getvar
09f7c     57 00 00 FF 
09f80     44 E4 05 F1 | 	add	objptr, ##44612
09f84     F2 28 02 FB | 	rdlong	local06, objptr
09f88     01 28 06 F1 | 	add	local06, #1
09f8c     F2 28 62 FC | 	wrlong	local06, objptr
09f90     57 00 00 FF 
09f94     44 E4 85 F1 | 	sub	objptr, ##44612
09f98     98 00 90 FD | 	jmp	#LR__0842
09f9c                 | LR__0840
09f9c     57 00 00 FF 
09fa0     44 E4 05 F1 | 	add	objptr, ##44612
09fa4     F2 28 02 FB | 	rdlong	local06, objptr
09fa8     01 28 06 F1 | 	add	local06, #1
09fac     F2 28 62 FC | 	wrlong	local06, objptr
09fb0     57 00 00 FF 
09fb4     44 E4 85 F1 | 	sub	objptr, ##44612
09fb8     64 F2 BF FD | 	call	#_expr
09fbc                 | '     ct+=1
09fbc                 | '     expr() 
09fbc                 | '     if lparts(ct).token=token_rpar then ct+=1
09fbc     57 00 00 FF 
09fc0     44 E4 05 F1 | 	add	objptr, ##44612
09fc4     F2 32 02 FB | 	rdlong	local11, objptr
09fc8     03 32 66 F0 | 	shl	local11, #3
09fcc     02 00 00 FF 
09fd0     38 E4 85 F1 | 	sub	objptr, ##1080
09fd4     F2 32 02 F1 | 	add	local11, objptr
09fd8     04 32 06 F1 | 	add	local11, #4
09fdc     19 33 02 FB | 	rdlong	local11, local11
09fe0     14 32 0E F2 | 	cmp	local11, #20 wz
09fe4     55 00 00 FF 
09fe8     0C E4 85 F1 | 	sub	objptr, ##43532
09fec     44 00 90 5D |  if_ne	jmp	#LR__0842
09ff0     57 00 00 FF 
09ff4     44 E4 05 F1 | 	add	objptr, ##44612
09ff8     F2 28 02 FB | 	rdlong	local06, objptr
09ffc     01 28 06 F1 | 	add	local06, #1
0a000     F2 28 62 FC | 	wrlong	local06, objptr
0a004     57 00 00 FF 
0a008     44 E4 85 F1 | 	sub	objptr, ##44612
0a00c     24 00 90 FD | 	jmp	#LR__0842
0a010                 | LR__0841
0a010     12 13 02 F6 | 	mov	arg01, local04
0a014     28 00 B0 FD | 	call	#_getfun
0a018     57 00 00 FF 
0a01c     44 E4 05 F1 | 	add	objptr, ##44612
0a020     F2 28 02 FB | 	rdlong	local06, objptr
0a024     01 28 06 F1 | 	add	local06, #1
0a028     F2 28 62 FC | 	wrlong	local06, objptr
0a02c     57 00 00 FF 
0a030     44 E4 85 F1 | 	sub	objptr, ##44612
0a034                 | LR__0842
0a034     A7 F0 03 F6 | 	mov	ptra, fp
0a038     B2 00 A0 FD | 	call	#popregs_
0a03c                 | _getvalue_ret
0a03c     2D 00 64 FD | 	ret
0a040                 | 
0a040                 | ' 
0a040                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
0a040                 | _getfun
0a040     0A 4A 05 F6 | 	mov	COUNT_, #10
0a044     A8 00 A0 FD | 	call	#pushregs_
0a048                 | _getfun_enter
0a048     09 25 02 F6 | 	mov	local04, arg01
0a04c     57 00 00 FF 
0a050     44 E4 05 F1 | 	add	objptr, ##44612
0a054     F2 26 02 FB | 	rdlong	local05, objptr
0a058     13 29 02 F6 | 	mov	local06, local05
0a05c     00 2A 06 F6 | 	mov	local07, #0
0a060                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
0a060                 | ' oldct=ct
0a060                 | ' numpar=0
0a060                 | '   
0a060                 | ' if lparts(ct+1).token=token_lpar then
0a060     01 26 06 F1 | 	add	local05, #1
0a064     03 26 66 F0 | 	shl	local05, #3
0a068     02 00 00 FF 
0a06c     38 E4 85 F1 | 	sub	objptr, ##1080
0a070     F2 26 02 F1 | 	add	local05, objptr
0a074     04 26 06 F1 | 	add	local05, #4
0a078     13 27 02 FB | 	rdlong	local05, local05
0a07c     15 26 0E F2 | 	cmp	local05, #21 wz
0a080     55 00 00 FF 
0a084     0C E4 85 F1 | 	sub	objptr, ##43532
0a088     08 01 90 5D |  if_ne	jmp	#LR__0854
0a08c     57 00 00 FF 
0a090     44 E4 05 F1 | 	add	objptr, ##44612
0a094     F2 2C 02 FB | 	rdlong	local08, objptr
0a098     01 2C 06 F1 | 	add	local08, #1
0a09c     F2 2C 62 FC | 	wrlong	local08, objptr
0a0a0     57 00 00 FF 
0a0a4     44 E4 85 F1 | 	sub	objptr, ##44612
0a0a8                 | '   ct+=1 											' omit this lpar, this is for expr list
0a0a8                 | '   do
0a0a8                 | LR__0850
0a0a8     57 00 00 FF 
0a0ac     44 E4 05 F1 | 	add	objptr, ##44612
0a0b0     F2 26 02 FB | 	rdlong	local05, objptr
0a0b4     01 26 06 F1 | 	add	local05, #1
0a0b8     F2 26 62 FC | 	wrlong	local05, objptr
0a0bc                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0a0bc                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0a0bc     03 26 66 F0 | 	shl	local05, #3
0a0c0     02 00 00 FF 
0a0c4     38 E4 85 F1 | 	sub	objptr, ##1080
0a0c8     F2 26 02 F1 | 	add	local05, objptr
0a0cc     04 26 06 F1 | 	add	local05, #4
0a0d0     13 2D 02 FB | 	rdlong	local08, local05
0a0d4     15 2C 0E F2 | 	cmp	local08, #21 wz
0a0d8     55 00 00 FF 
0a0dc     0C E4 85 F1 | 	sub	objptr, ##43532
0a0e0     40 00 90 5D |  if_ne	jmp	#LR__0851
0a0e4     57 00 00 FF 
0a0e8     44 E4 05 F1 | 	add	objptr, ##44612
0a0ec     F2 2C 02 FB | 	rdlong	local08, objptr
0a0f0     01 2C 06 F1 | 	add	local08, #1
0a0f4     F2 2C 62 FC | 	wrlong	local08, objptr
0a0f8     57 00 00 FF 
0a0fc     44 E4 85 F1 | 	sub	objptr, ##44612
0a100     1C F1 BF FD | 	call	#_expr
0a104     57 00 00 FF 
0a108     44 E4 05 F1 | 	add	objptr, ##44612
0a10c     F2 2C 02 FB | 	rdlong	local08, objptr
0a110     01 2C 06 F1 | 	add	local08, #1
0a114     F2 2C 62 FC | 	wrlong	local08, objptr
0a118     57 00 00 FF 
0a11c     44 E4 85 F1 | 	sub	objptr, ##44612
0a120     04 00 90 FD | 	jmp	#LR__0852
0a124                 | LR__0851
0a124     F8 F0 BF FD | 	call	#_expr
0a128                 | LR__0852
0a128     01 2A 06 F1 | 	add	local07, #1
0a12c     57 00 00 FF 
0a130     44 E4 05 F1 | 	add	objptr, ##44612
0a134     F2 26 02 FB | 	rdlong	local05, objptr
0a138     03 26 66 F0 | 	shl	local05, #3
0a13c     02 00 00 FF 
0a140     38 E4 85 F1 | 	sub	objptr, ##1080
0a144     F2 26 02 F1 | 	add	local05, objptr
0a148     04 26 06 F1 | 	add	local05, #4
0a14c     13 2D 02 FB | 	rdlong	local08, local05
0a150     14 2C 0E F2 | 	cmp	local08, #20 wz
0a154     55 00 00 FF 
0a158     0C E4 85 F1 | 	sub	objptr, ##43532
0a15c     34 00 90 AD |  if_e	jmp	#LR__0853
0a160     57 00 00 FF 
0a164     44 E4 05 F1 | 	add	objptr, ##44612
0a168     F2 2C 02 FB | 	rdlong	local08, objptr
0a16c     03 2C 66 F0 | 	shl	local08, #3
0a170     02 00 00 FF 
0a174     38 E4 85 F1 | 	sub	objptr, ##1080
0a178     F2 2C 02 F1 | 	add	local08, objptr
0a17c     04 2C 06 F1 | 	add	local08, #4
0a180     16 2D 02 FB | 	rdlong	local08, local08
0a184     FE 2D 0E F2 | 	cmp	local08, #510 wz
0a188     55 00 00 FF 
0a18c     0C E4 85 F1 | 	sub	objptr, ##43532
0a190     14 FF 9F 5D |  if_ne	jmp	#LR__0850
0a194                 | LR__0853
0a194                 | LR__0854
0a194     15 1F 02 F6 | 	mov	local01, local07
0a198     03 28 66 F0 | 	shl	local06, #3
0a19c     55 00 00 FF 
0a1a0     0C E4 05 F1 | 	add	objptr, ##43532
0a1a4     F2 28 02 F1 | 	add	local06, objptr
0a1a8     04 28 06 F1 | 	add	local06, #4
0a1ac     14 23 02 FB | 	rdlong	local03, local06
0a1b0     0F 2D 02 F6 | 	mov	local08, local01
0a1b4     10 2B 02 F6 | 	mov	local07, local02
0a1b8     11 29 02 F6 | 	mov	local06, local03
0a1bc     15 00 00 FF 
0a1c0     70 E4 05 F1 | 	add	objptr, ##10864
0a1c4     F2 26 02 FB | 	rdlong	local05, objptr
0a1c8     13 13 02 F6 | 	mov	arg01, local05
0a1cc     01 12 66 F0 | 	shl	arg01, #1
0a1d0     13 13 02 F1 | 	add	arg01, local05
0a1d4     02 12 66 F0 | 	shl	arg01, #2
0a1d8     03 00 00 FF 
0a1dc     00 E4 85 F1 | 	sub	objptr, ##1536
0a1e0     F2 12 02 F1 | 	add	arg01, objptr
0a1e4     09 2D 62 FC | 	wrlong	local08, arg01
0a1e8     03 00 00 FF 
0a1ec     00 E4 05 F1 | 	add	objptr, ##1536
0a1f0     F2 2C 02 FB | 	rdlong	local08, objptr
0a1f4     16 2F 02 F6 | 	mov	local09, local08
0a1f8     01 2E 66 F0 | 	shl	local09, #1
0a1fc     16 2F 02 F1 | 	add	local09, local08
0a200     02 2E 66 F0 | 	shl	local09, #2
0a204     03 00 00 FF 
0a208     00 E4 85 F1 | 	sub	objptr, ##1536
0a20c     F2 2E 02 F1 | 	add	local09, objptr
0a210     04 2E 06 F1 | 	add	local09, #4
0a214     17 2B 62 FC | 	wrlong	local07, local09
0a218     03 00 00 FF 
0a21c     00 E4 05 F1 | 	add	objptr, ##1536
0a220     F2 2C 02 FB | 	rdlong	local08, objptr
0a224     16 31 02 F6 | 	mov	local10, local08
0a228     01 30 66 F0 | 	shl	local10, #1
0a22c     16 31 02 F1 | 	add	local10, local08
0a230     02 30 66 F0 | 	shl	local10, #2
0a234     03 00 00 FF 
0a238     00 E4 85 F1 | 	sub	objptr, ##1536
0a23c     F2 30 02 F1 | 	add	local10, objptr
0a240     08 30 06 F1 | 	add	local10, #8
0a244     18 29 62 FC | 	wrlong	local06, local10
0a248     03 00 00 FF 
0a24c     00 E4 05 F1 | 	add	objptr, ##1536
0a250     F2 2C 02 FB | 	rdlong	local08, objptr
0a254     01 2C 06 F1 | 	add	local08, #1
0a258     F2 2C 62 FC | 	wrlong	local08, objptr
0a25c     6A 00 00 FF 
0a260     7C E4 85 F1 | 	sub	objptr, ##54396
0a264                 | ' 
0a264                 | ' t2.result.uresult=numpar
0a264                 | ' 
0a264                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0a264                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0a264                 | ' 
0a264                 | '   
0a264                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0a264     FF FF 7F FF 
0a268     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a26c     B8 00 90 5D |  if_ne	jmp	#LR__0855
0a270     15 22 06 F6 | 	mov	local03, #21
0a274     0F 2D 02 F6 | 	mov	local08, local01
0a278     10 2B 02 F6 | 	mov	local07, local02
0a27c     11 29 02 F6 | 	mov	local06, local03
0a280     6A 00 00 FF 
0a284     7C E4 05 F1 | 	add	objptr, ##54396
0a288     F2 26 02 FB | 	rdlong	local05, objptr
0a28c     13 13 02 F6 | 	mov	arg01, local05
0a290     01 12 66 F0 | 	shl	arg01, #1
0a294     13 13 02 F1 | 	add	arg01, local05
0a298     02 12 66 F0 | 	shl	arg01, #2
0a29c     03 00 00 FF 
0a2a0     00 E4 85 F1 | 	sub	objptr, ##1536
0a2a4     F2 12 02 F1 | 	add	arg01, objptr
0a2a8     09 2D 62 FC | 	wrlong	local08, arg01
0a2ac     03 00 00 FF 
0a2b0     00 E4 05 F1 | 	add	objptr, ##1536
0a2b4     F2 30 02 FB | 	rdlong	local10, objptr
0a2b8     18 2F 02 F6 | 	mov	local09, local10
0a2bc     01 2E 66 F0 | 	shl	local09, #1
0a2c0     18 2F 02 F1 | 	add	local09, local10
0a2c4     02 2E 66 F0 | 	shl	local09, #2
0a2c8     03 00 00 FF 
0a2cc     00 E4 85 F1 | 	sub	objptr, ##1536
0a2d0     F2 2E 02 F1 | 	add	local09, objptr
0a2d4     04 2E 06 F1 | 	add	local09, #4
0a2d8     17 2B 62 FC | 	wrlong	local07, local09
0a2dc     03 00 00 FF 
0a2e0     00 E4 05 F1 | 	add	objptr, ##1536
0a2e4     F2 2E 02 FB | 	rdlong	local09, objptr
0a2e8     17 31 02 F6 | 	mov	local10, local09
0a2ec     01 30 66 F0 | 	shl	local10, #1
0a2f0     17 31 02 F1 | 	add	local10, local09
0a2f4     02 30 66 F0 | 	shl	local10, #2
0a2f8     03 00 00 FF 
0a2fc     00 E4 85 F1 | 	sub	objptr, ##1536
0a300     F2 30 02 F1 | 	add	local10, objptr
0a304     08 30 06 F1 | 	add	local10, #8
0a308     18 29 62 FC | 	wrlong	local06, local10
0a30c     03 00 00 FF 
0a310     00 E4 05 F1 | 	add	objptr, ##1536
0a314     F2 2C 02 FB | 	rdlong	local08, objptr
0a318     01 2C 06 F1 | 	add	local08, #1
0a31c     F2 2C 62 FC | 	wrlong	local08, objptr
0a320     6A 00 00 FF 
0a324     7C E4 85 F1 | 	sub	objptr, ##54396
0a328                 | LR__0855
0a328     A7 F0 03 F6 | 	mov	ptra, fp
0a32c     B2 00 A0 FD | 	call	#popregs_
0a330                 | _getfun_ret
0a330     2D 00 64 FD | 	ret
0a334                 | 
0a334                 | '   
0a334                 | '   
0a334                 | ' sub getvar(m as integer) 
0a334                 | _getvar
0a334     0A 4A 05 F6 | 	mov	COUNT_, #10
0a338     A8 00 A0 FD | 	call	#pushregs_
0a33c                 | _getvar_enter
0a33c     09 25 02 F6 | 	mov	local04, arg01
0a340     57 00 00 FF 
0a344     44 E4 05 F1 | 	add	objptr, ##44612
0a348     F2 14 02 FB | 	rdlong	arg02, objptr
0a34c     03 14 66 F0 | 	shl	arg02, #3
0a350     02 00 00 FF 
0a354     38 E4 85 F1 | 	sub	objptr, ##1080
0a358     F2 14 02 F1 | 	add	arg02, objptr
0a35c     0A 27 02 FB | 	rdlong	local05, arg02
0a360     13 13 02 F6 | 	mov	arg01, local05
0a364     01 14 06 F6 | 	mov	arg02, #1
0a368     55 00 00 FF 
0a36c     0C E4 85 F1 | 	sub	objptr, ##43532
0a370     D0 68 B1 FD | 	call	#__system__Right_S
0a374     FD 28 02 F6 | 	mov	local06, result1
0a378     01 2A 66 F6 | 	neg	local07, #1
0a37c                 | ' 
0a37c                 | ' varname$=lparts(ct).part$
0a37c                 | ' suffix$=right$(varname$,1)
0a37c                 | ' j=-1
0a37c                 | ' 
0a37c                 | ' for i=0 to varnum-1
0a37c     00 2C 06 F6 | 	mov	local08, #0
0a380     55 00 00 FF 
0a384     08 E4 05 F1 | 	add	objptr, ##43528
0a388     F2 2E 02 FB | 	rdlong	local09, objptr
0a38c     55 00 00 FF 
0a390     08 E4 85 F1 | 	sub	objptr, ##43528
0a394                 | LR__0860
0a394     17 2D 52 F2 | 	cmps	local08, local09 wc
0a398     38 00 90 3D |  if_ae	jmp	#LR__0861
0a39c                 | '   if variables(i).name=varname$ then j=i : exit
0a39c     16 15 02 F6 | 	mov	arg02, local08
0a3a0     04 14 66 F0 | 	shl	arg02, #4
0a3a4     34 00 00 FF 
0a3a8     F8 E5 05 F1 | 	add	objptr, ##27128
0a3ac     F2 14 02 F1 | 	add	arg02, objptr
0a3b0     0A 13 02 FB | 	rdlong	arg01, arg02
0a3b4     13 15 02 F6 | 	mov	arg02, local05
0a3b8     34 00 00 FF 
0a3bc     F8 E5 85 F1 | 	sub	objptr, ##27128
0a3c0     D8 47 B1 FD | 	call	#__system___string_cmp
0a3c4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a3c8     16 2B 02 A6 |  if_e	mov	local07, local08
0a3cc     01 2C 06 51 |  if_ne	add	local08, #1
0a3d0     C0 FF 9F 5D |  if_ne	jmp	#LR__0860
0a3d4                 | LR__0861
0a3d4                 | ' if  j=-1 andalso varnum<maxvars then   
0a3d4     FF FF 7F FF 
0a3d8     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
0a3dc     A8 00 90 5D |  if_ne	jmp	#LR__0862
0a3e0     55 00 00 FF 
0a3e4     08 E4 05 F1 | 	add	objptr, ##43528
0a3e8     F2 2E 02 FB | 	rdlong	local09, objptr
0a3ec     55 00 00 FF 
0a3f0     08 E4 85 F1 | 	sub	objptr, ##43528
0a3f4     02 00 00 FF 
0a3f8     00 2E 56 F2 | 	cmps	local09, ##1024 wc
0a3fc     88 00 90 3D |  if_ae	jmp	#LR__0862
0a400     55 00 00 FF 
0a404     08 E4 05 F1 | 	add	objptr, ##43528
0a408     F2 2E 02 FB | 	rdlong	local09, objptr
0a40c     04 2E 66 F0 | 	shl	local09, #4
0a410     20 00 00 FF 
0a414     10 E4 85 F1 | 	sub	objptr, ##16400
0a418     F2 2E 02 F1 | 	add	local09, objptr
0a41c     17 27 62 FC | 	wrlong	local05, local09
0a420     20 00 00 FF 
0a424     10 E4 05 F1 | 	add	objptr, ##16400
0a428     F2 2E 02 FB | 	rdlong	local09, objptr
0a42c     04 2E 66 F0 | 	shl	local09, #4
0a430     20 00 00 FF 
0a434     10 E4 85 F1 | 	sub	objptr, ##16400
0a438     F2 2E 02 F1 | 	add	local09, objptr
0a43c     04 2E 06 F1 | 	add	local09, #4
0a440     17 01 68 FC | 	wrlong	#0, local09
0a444     20 00 00 FF 
0a448     10 E4 05 F1 | 	add	objptr, ##16400
0a44c     F2 2E 02 FB | 	rdlong	local09, objptr
0a450     04 2E 66 F0 | 	shl	local09, #4
0a454     20 00 00 FF 
0a458     10 E4 85 F1 | 	sub	objptr, ##16400
0a45c     F2 2E 02 F1 | 	add	local09, objptr
0a460     0C 2E 06 F1 | 	add	local09, #12
0a464     17 39 68 FC | 	wrlong	#28, local09
0a468     20 00 00 FF 
0a46c     10 E4 05 F1 | 	add	objptr, ##16400
0a470     F2 2E 02 FB | 	rdlong	local09, objptr
0a474     17 2B 02 F6 | 	mov	local07, local09
0a478     01 2E 06 F1 | 	add	local09, #1
0a47c     F2 2E 62 FC | 	wrlong	local09, objptr
0a480     55 00 00 FF 
0a484     08 E4 85 F1 | 	sub	objptr, ##43528
0a488                 | LR__0862
0a488     00 2E 06 F6 | 	mov	local09, #0
0a48c                 | ' numpar=0
0a48c                 | ' ' check if it is an array
0a48c                 | ' 
0a48c                 | ' if lparts(ct+1).token=token_lpar then
0a48c     57 00 00 FF 
0a490     44 E4 05 F1 | 	add	objptr, ##44612
0a494     F2 2C 02 FB | 	rdlong	local08, objptr
0a498     01 2C 06 F1 | 	add	local08, #1
0a49c     03 2C 66 F0 | 	shl	local08, #3
0a4a0     02 00 00 FF 
0a4a4     38 E4 85 F1 | 	sub	objptr, ##1080
0a4a8     F2 2C 02 F1 | 	add	local08, objptr
0a4ac     04 2C 06 F1 | 	add	local08, #4
0a4b0     16 2D 02 FB | 	rdlong	local08, local08
0a4b4     15 2C 0E F2 | 	cmp	local08, #21 wz
0a4b8     55 00 00 FF 
0a4bc     0C E4 85 F1 | 	sub	objptr, ##43532
0a4c0     08 01 90 5D |  if_ne	jmp	#LR__0867
0a4c4     57 00 00 FF 
0a4c8     44 E4 05 F1 | 	add	objptr, ##44612
0a4cc     F2 30 02 FB | 	rdlong	local10, objptr
0a4d0     01 30 06 F1 | 	add	local10, #1
0a4d4     F2 30 62 FC | 	wrlong	local10, objptr
0a4d8     57 00 00 FF 
0a4dc     44 E4 85 F1 | 	sub	objptr, ##44612
0a4e0                 | '   ct+=1 											' omit this lpar, this is for expr list
0a4e0                 | '   do
0a4e0                 | LR__0863
0a4e0     57 00 00 FF 
0a4e4     44 E4 05 F1 | 	add	objptr, ##44612
0a4e8     F2 2C 02 FB | 	rdlong	local08, objptr
0a4ec     01 2C 06 F1 | 	add	local08, #1
0a4f0     F2 2C 62 FC | 	wrlong	local08, objptr
0a4f4                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0a4f4                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0a4f4     03 2C 66 F0 | 	shl	local08, #3
0a4f8     02 00 00 FF 
0a4fc     38 E4 85 F1 | 	sub	objptr, ##1080
0a500     F2 2C 02 F1 | 	add	local08, objptr
0a504     04 2C 06 F1 | 	add	local08, #4
0a508     16 31 02 FB | 	rdlong	local10, local08
0a50c     15 30 0E F2 | 	cmp	local10, #21 wz
0a510     55 00 00 FF 
0a514     0C E4 85 F1 | 	sub	objptr, ##43532
0a518     40 00 90 5D |  if_ne	jmp	#LR__0864
0a51c     57 00 00 FF 
0a520     44 E4 05 F1 | 	add	objptr, ##44612
0a524     F2 30 02 FB | 	rdlong	local10, objptr
0a528     01 30 06 F1 | 	add	local10, #1
0a52c     F2 30 62 FC | 	wrlong	local10, objptr
0a530     57 00 00 FF 
0a534     44 E4 85 F1 | 	sub	objptr, ##44612
0a538     E4 EC BF FD | 	call	#_expr
0a53c     57 00 00 FF 
0a540     44 E4 05 F1 | 	add	objptr, ##44612
0a544     F2 30 02 FB | 	rdlong	local10, objptr
0a548     01 30 06 F1 | 	add	local10, #1
0a54c     F2 30 62 FC | 	wrlong	local10, objptr
0a550     57 00 00 FF 
0a554     44 E4 85 F1 | 	sub	objptr, ##44612
0a558     04 00 90 FD | 	jmp	#LR__0865
0a55c                 | LR__0864
0a55c     C0 EC BF FD | 	call	#_expr
0a560                 | LR__0865
0a560     01 2E 06 F1 | 	add	local09, #1
0a564     57 00 00 FF 
0a568     44 E4 05 F1 | 	add	objptr, ##44612
0a56c     F2 2C 02 FB | 	rdlong	local08, objptr
0a570     03 2C 66 F0 | 	shl	local08, #3
0a574     02 00 00 FF 
0a578     38 E4 85 F1 | 	sub	objptr, ##1080
0a57c     F2 2C 02 F1 | 	add	local08, objptr
0a580     04 2C 06 F1 | 	add	local08, #4
0a584     16 31 02 FB | 	rdlong	local10, local08
0a588     14 30 0E F2 | 	cmp	local10, #20 wz
0a58c     55 00 00 FF 
0a590     0C E4 85 F1 | 	sub	objptr, ##43532
0a594     34 00 90 AD |  if_e	jmp	#LR__0866
0a598     57 00 00 FF 
0a59c     44 E4 05 F1 | 	add	objptr, ##44612
0a5a0     F2 30 02 FB | 	rdlong	local10, objptr
0a5a4     03 30 66 F0 | 	shl	local10, #3
0a5a8     02 00 00 FF 
0a5ac     38 E4 85 F1 | 	sub	objptr, ##1080
0a5b0     F2 30 02 F1 | 	add	local10, objptr
0a5b4     04 30 06 F1 | 	add	local10, #4
0a5b8     18 31 02 FB | 	rdlong	local10, local10
0a5bc     FE 31 0E F2 | 	cmp	local10, #510 wz
0a5c0     55 00 00 FF 
0a5c4     0C E4 85 F1 | 	sub	objptr, ##43532
0a5c8     14 FF 9F 5D |  if_ne	jmp	#LR__0863
0a5cc                 | LR__0866
0a5cc                 | LR__0867
0a5cc     17 21 02 F6 | 	mov	local02, local09
0a5d0     11 22 06 F6 | 	mov	local03, #17
0a5d4     15 1F 02 F6 | 	mov	local01, local07
0a5d8     0F 31 02 F6 | 	mov	local10, local01
0a5dc     10 2F 02 F6 | 	mov	local09, local02
0a5e0     11 2D 02 F6 | 	mov	local08, local03
0a5e4     6A 00 00 FF 
0a5e8     7C E4 05 F1 | 	add	objptr, ##54396
0a5ec     F2 2A 02 FB | 	rdlong	local07, objptr
0a5f0     15 29 02 F6 | 	mov	local06, local07
0a5f4     01 28 66 F0 | 	shl	local06, #1
0a5f8     15 29 02 F1 | 	add	local06, local07
0a5fc     02 28 66 F0 | 	shl	local06, #2
0a600     03 00 00 FF 
0a604     00 E4 85 F1 | 	sub	objptr, ##1536
0a608     F2 28 02 F1 | 	add	local06, objptr
0a60c     14 31 62 FC | 	wrlong	local10, local06
0a610     03 00 00 FF 
0a614     00 E4 05 F1 | 	add	objptr, ##1536
0a618     F2 30 02 FB | 	rdlong	local10, objptr
0a61c     18 27 02 F6 | 	mov	local05, local10
0a620     01 26 66 F0 | 	shl	local05, #1
0a624     18 27 02 F1 | 	add	local05, local10
0a628     02 26 66 F0 | 	shl	local05, #2
0a62c     03 00 00 FF 
0a630     00 E4 85 F1 | 	sub	objptr, ##1536
0a634     F2 26 02 F1 | 	add	local05, objptr
0a638     04 26 06 F1 | 	add	local05, #4
0a63c     13 2F 62 FC | 	wrlong	local09, local05
0a640     03 00 00 FF 
0a644     00 E4 05 F1 | 	add	objptr, ##1536
0a648     F2 30 02 FB | 	rdlong	local10, objptr
0a64c     18 FB 01 F6 | 	mov	result1, local10
0a650     01 FA 65 F0 | 	shl	result1, #1
0a654     18 FB 01 F1 | 	add	result1, local10
0a658     02 FA 65 F0 | 	shl	result1, #2
0a65c     03 00 00 FF 
0a660     00 E4 85 F1 | 	sub	objptr, ##1536
0a664     F2 FA 01 F1 | 	add	result1, objptr
0a668     08 FA 05 F1 | 	add	result1, #8
0a66c     FD 2C 62 FC | 	wrlong	local08, result1
0a670     03 00 00 FF 
0a674     00 E4 05 F1 | 	add	objptr, ##1536
0a678     F2 30 02 FB | 	rdlong	local10, objptr
0a67c     01 30 06 F1 | 	add	local10, #1
0a680     F2 30 62 FC | 	wrlong	local10, objptr
0a684     6A 00 00 FF 
0a688     7C E4 85 F1 | 	sub	objptr, ##54396
0a68c                 | ' 
0a68c                 | ' t2.result.twowords(1)=numpar
0a68c                 | ' 
0a68c                 | ' 
0a68c                 | ' 
0a68c                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0a68c                 | ' 
0a68c                 | ' 
0a68c                 | '  
0a68c                 | ' 
0a68c                 | ' 701 
0a68c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0a68c                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0a68c     FF FF 7F FF 
0a690     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a694     B8 00 90 5D |  if_ne	jmp	#LR__0868
0a698     15 22 06 F6 | 	mov	local03, #21
0a69c     0F 31 02 F6 | 	mov	local10, local01
0a6a0     10 2F 02 F6 | 	mov	local09, local02
0a6a4     11 2D 02 F6 | 	mov	local08, local03
0a6a8     6A 00 00 FF 
0a6ac     7C E4 05 F1 | 	add	objptr, ##54396
0a6b0     F2 2A 02 FB | 	rdlong	local07, objptr
0a6b4     15 29 02 F6 | 	mov	local06, local07
0a6b8     01 28 66 F0 | 	shl	local06, #1
0a6bc     15 29 02 F1 | 	add	local06, local07
0a6c0     02 28 66 F0 | 	shl	local06, #2
0a6c4     03 00 00 FF 
0a6c8     00 E4 85 F1 | 	sub	objptr, ##1536
0a6cc     F2 28 02 F1 | 	add	local06, objptr
0a6d0     14 31 62 FC | 	wrlong	local10, local06
0a6d4     03 00 00 FF 
0a6d8     00 E4 05 F1 | 	add	objptr, ##1536
0a6dc     F2 1E 02 FB | 	rdlong	local01, objptr
0a6e0     0F 27 02 F6 | 	mov	local05, local01
0a6e4     01 26 66 F0 | 	shl	local05, #1
0a6e8     0F 27 02 F1 | 	add	local05, local01
0a6ec     02 26 66 F0 | 	shl	local05, #2
0a6f0     03 00 00 FF 
0a6f4     00 E4 85 F1 | 	sub	objptr, ##1536
0a6f8     F2 26 02 F1 | 	add	local05, objptr
0a6fc     04 26 06 F1 | 	add	local05, #4
0a700     13 2F 62 FC | 	wrlong	local09, local05
0a704     03 00 00 FF 
0a708     00 E4 05 F1 | 	add	objptr, ##1536
0a70c     F2 1E 02 FB | 	rdlong	local01, objptr
0a710     0F FB 01 F6 | 	mov	result1, local01
0a714     01 FA 65 F0 | 	shl	result1, #1
0a718     0F FB 01 F1 | 	add	result1, local01
0a71c     02 FA 65 F0 | 	shl	result1, #2
0a720     03 00 00 FF 
0a724     00 E4 85 F1 | 	sub	objptr, ##1536
0a728     F2 FA 01 F1 | 	add	result1, objptr
0a72c     08 FA 05 F1 | 	add	result1, #8
0a730     FD 2C 62 FC | 	wrlong	local08, result1
0a734     03 00 00 FF 
0a738     00 E4 05 F1 | 	add	objptr, ##1536
0a73c     F2 30 02 FB | 	rdlong	local10, objptr
0a740     01 30 06 F1 | 	add	local10, #1
0a744     F2 30 62 FC | 	wrlong	local10, objptr
0a748     6A 00 00 FF 
0a74c     7C E4 85 F1 | 	sub	objptr, ##54396
0a750                 | LR__0868
0a750     A7 F0 03 F6 | 	mov	ptra, fp
0a754     B2 00 A0 FD | 	call	#popregs_
0a758                 | _getvar_ret
0a758     2D 00 64 FD | 	ret
0a75c                 | 
0a75c                 | ' 
0a75c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a75c                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0a75c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a75c                 | ' 
0a75c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a75c                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
0a75c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a75c                 | ' 
0a75c                 | ' function execute_line (astart=0 as integer) as integer
0a75c                 | _execute_line
0a75c     04 4A 05 F6 | 	mov	COUNT_, #4
0a760     A8 00 A0 FD | 	call	#pushregs_
0a764     78 00 00 FF 
0a768     C0 E4 05 F1 | 	add	objptr, ##61632
0a76c     F2 00 68 FC | 	wrlong	#0, objptr
0a770                 | ' runptr2=0
0a770                 | ' for lineptr_e=astart to lineptr-1
0a770     0E 00 00 FF 
0a774     40 E4 85 F1 | 	sub	objptr, ##7232
0a778     F2 12 62 FC | 	wrlong	arg01, objptr
0a77c     04 E4 85 F1 | 	sub	objptr, #4
0a780     F2 1E 02 FB | 	rdlong	local01, objptr
0a784     6A 00 00 FF 
0a788     7C E4 85 F1 | 	sub	objptr, ##54396
0a78c                 | LR__0870
0a78c     6A 00 00 FF 
0a790     80 E4 05 F1 | 	add	objptr, ##54400
0a794     F2 FA 01 FB | 	rdlong	result1, objptr
0a798     6A 00 00 FF 
0a79c     80 E4 85 F1 | 	sub	objptr, ##54400
0a7a0     0F FB 51 F2 | 	cmps	result1, local01 wc
0a7a4     98 00 90 3D |  if_ae	jmp	#LR__0871
0a7a8     6A 00 00 FF 
0a7ac     80 E4 05 F1 | 	add	objptr, ##54400
0a7b0     F2 FA 01 FB | 	rdlong	result1, objptr
0a7b4     FD 20 02 F6 | 	mov	local02, result1
0a7b8     01 20 66 F0 | 	shl	local02, #1
0a7bc     FD 20 02 F1 | 	add	local02, result1
0a7c0     02 20 66 F0 | 	shl	local02, #2
0a7c4     03 00 00 FF 
0a7c8     04 E4 85 F1 | 	sub	objptr, ##1540
0a7cc     F2 20 02 F1 | 	add	local02, objptr
0a7d0     08 20 06 F1 | 	add	local02, #8
0a7d4     10 21 02 FB | 	rdlong	local02, local02
0a7d8     10 21 E2 F8 | 	getbyte	local02, local02, #0
0a7dc     02 20 66 F0 | 	shl	local02, #2
0a7e0     04 00 00 FF 
0a7e4     1C E4 85 F1 | 	sub	objptr, ##2076
0a7e8     F2 20 02 F1 | 	add	local02, objptr
0a7ec     10 21 02 FB | 	rdlong	local02, local02
0a7f0     10 23 02 F6 | 	mov	local03, local02
0a7f4     13 20 46 F7 | 	zerox	local02, #19
0a7f8     14 22 46 F0 | 	shr	local03, #20
0a7fc     02 22 66 F0 | 	shl	local03, #2
0a800     ED 22 02 F1 | 	add	local03, __methods__
0a804     11 23 02 FB | 	rdlong	local03, local03
0a808     63 00 00 FF 
0a80c     60 E4 85 F1 | 	sub	objptr, ##50784
0a810     F2 24 02 F6 | 	mov	local04, objptr
0a814     10 E5 01 F6 | 	mov	objptr, local02
0a818     2D 22 62 FD | 	call	local03
0a81c     12 E5 01 F6 | 	mov	objptr, local04
0a820     6A 00 00 FF 
0a824     80 E4 05 F1 | 	add	objptr, ##54400
0a828     F2 24 02 FB | 	rdlong	local04, objptr
0a82c     01 24 06 F1 | 	add	local04, #1
0a830     F2 24 62 FC | 	wrlong	local04, objptr
0a834     6A 00 00 FF 
0a838     80 E4 85 F1 | 	sub	objptr, ##54400
0a83c     4C FF 9F FD | 	jmp	#LR__0870
0a840                 | LR__0871
0a840                 | ' return runptr2
0a840     78 00 00 FF 
0a844     C0 E4 05 F1 | 	add	objptr, ##61632
0a848     F2 FA 01 FB | 	rdlong	result1, objptr
0a84c     78 00 00 FF 
0a850     C0 E4 85 F1 | 	sub	objptr, ##61632
0a854     A7 F0 03 F6 | 	mov	ptra, fp
0a858     B2 00 A0 FD | 	call	#popregs_
0a85c                 | _execute_line_ret
0a85c     2D 00 64 FD | 	ret
0a860                 | 
0a860                 | ' 
0a860                 | ' 
0a860                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0a860                 | ' 
0a860                 | ' function pop() as expr_result
0a860                 | _pop
0a860                 | ' 
0a860                 | ' if stackpointer=0 then
0a860     63 00 00 FF 
0a864     58 E4 05 F1 | 	add	objptr, ##50776
0a868     F2 FA 09 FB | 	rdlong	result1, objptr wz
0a86c     63 00 00 FF 
0a870     58 E4 85 F1 | 	sub	objptr, ##50776
0a874     FF 04 06 A6 |  if_e	mov	_var03, #255
0a878     18 00 06 A6 |  if_e	mov	_var01, #24
0a87c     68 00 90 AD |  if_e	jmp	#LR__0880
0a880     63 00 00 FF 
0a884     58 E4 05 F1 | 	add	objptr, ##50776
0a888     F2 FA 01 FB | 	rdlong	result1, objptr
0a88c     01 FA 85 F1 | 	sub	result1, #1
0a890     F2 FA 61 FC | 	wrlong	result1, objptr
0a894     FD FE 01 F6 | 	mov	result3, result1
0a898     01 FE 65 F0 | 	shl	result3, #1
0a89c     FD FE 01 F1 | 	add	result3, result1
0a8a0     02 FE 65 F0 | 	shl	result3, #2
0a8a4     0C 00 00 FF 
0a8a8     0C E4 85 F1 | 	sub	objptr, ##6156
0a8ac     F2 FE 01 F1 | 	add	result3, objptr
0a8b0     FF 00 02 FB | 	rdlong	_var01, result3
0a8b4     04 FE 05 F1 | 	add	result3, #4
0a8b8     FF FE 01 FB | 	rdlong	result3, result3
0a8bc     FD FC 01 F6 | 	mov	result2, result1
0a8c0     01 FC 65 F0 | 	shl	result2, #1
0a8c4     FD FC 01 F1 | 	add	result2, result1
0a8c8     02 FC 65 F0 | 	shl	result2, #2
0a8cc     F2 FC 01 F1 | 	add	result2, objptr
0a8d0     08 FC 05 F1 | 	add	result2, #8
0a8d4     FE FA 01 FB | 	rdlong	result1, result2
0a8d8     FF 02 02 F6 | 	mov	_var02, result3
0a8dc     FD 04 02 F6 | 	mov	_var03, result1
0a8e0     57 00 00 FF 
0a8e4     4C E4 85 F1 | 	sub	objptr, ##44620
0a8e8                 | LR__0880
0a8e8                 | ' return t1
0a8e8     01 FD 01 F6 | 	mov	result2, _var02
0a8ec     02 FF 01 F6 | 	mov	result3, _var03
0a8f0     00 FB 01 F6 | 	mov	result1, _var01
0a8f4                 | _pop_ret
0a8f4     2D 00 64 FD | 	ret
0a8f8                 | 
0a8f8                 | ' 
0a8f8                 | ' sub push(t1 as expr_result )
0a8f8                 | _push
0a8f8                 | ' 
0a8f8                 | ' 'print "In push: "; t1.result_type
0a8f8                 | ' 'print "In push: "; t1.result.uresult
0a8f8                 | ' 
0a8f8                 | ' if stackpointer<maxstack then 
0a8f8     63 00 00 FF 
0a8fc     58 E4 05 F1 | 	add	objptr, ##50776
0a900     F2 00 02 FB | 	rdlong	_var01, objptr
0a904     63 00 00 FF 
0a908     58 E4 85 F1 | 	sub	objptr, ##50776
0a90c     01 00 00 FF 
0a910     00 00 56 F2 | 	cmps	_var01, ##512 wc
0a914     BC 00 90 3D |  if_ae	jmp	#LR__0890
0a918     09 01 02 FB | 	rdlong	_var01, arg01
0a91c     04 12 06 F1 | 	add	arg01, #4
0a920     09 03 02 FB | 	rdlong	_var02, arg01
0a924     04 12 06 F1 | 	add	arg01, #4
0a928     09 13 02 FB | 	rdlong	arg01, arg01
0a92c     63 00 00 FF 
0a930     58 E4 05 F1 | 	add	objptr, ##50776
0a934     F2 04 02 FB | 	rdlong	_var03, objptr
0a938     02 07 02 F6 | 	mov	_var04, _var03
0a93c     01 06 66 F0 | 	shl	_var04, #1
0a940     02 07 02 F1 | 	add	_var04, _var03
0a944     02 06 66 F0 | 	shl	_var04, #2
0a948     0C 00 00 FF 
0a94c     0C E4 85 F1 | 	sub	objptr, ##6156
0a950     F2 06 02 F1 | 	add	_var04, objptr
0a954     03 01 62 FC | 	wrlong	_var01, _var04
0a958     0C 00 00 FF 
0a95c     0C E4 05 F1 | 	add	objptr, ##6156
0a960     F2 06 02 FB | 	rdlong	_var04, objptr
0a964     03 05 02 F6 | 	mov	_var03, _var04
0a968     01 04 66 F0 | 	shl	_var03, #1
0a96c     03 05 02 F1 | 	add	_var03, _var04
0a970     02 04 66 F0 | 	shl	_var03, #2
0a974     0C 00 00 FF 
0a978     0C E4 85 F1 | 	sub	objptr, ##6156
0a97c     F2 04 02 F1 | 	add	_var03, objptr
0a980     04 04 06 F1 | 	add	_var03, #4
0a984     02 03 62 FC | 	wrlong	_var02, _var03
0a988     0C 00 00 FF 
0a98c     0C E4 05 F1 | 	add	objptr, ##6156
0a990     F2 06 02 FB | 	rdlong	_var04, objptr
0a994     03 05 02 F6 | 	mov	_var03, _var04
0a998     01 04 66 F0 | 	shl	_var03, #1
0a99c     03 05 02 F1 | 	add	_var03, _var04
0a9a0     02 04 66 F0 | 	shl	_var03, #2
0a9a4     0C 00 00 FF 
0a9a8     0C E4 85 F1 | 	sub	objptr, ##6156
0a9ac     F2 04 02 F1 | 	add	_var03, objptr
0a9b0     08 04 06 F1 | 	add	_var03, #8
0a9b4     02 13 62 FC | 	wrlong	arg01, _var03
0a9b8     0C 00 00 FF 
0a9bc     0C E4 05 F1 | 	add	objptr, ##6156
0a9c0     F2 00 02 FB | 	rdlong	_var01, objptr
0a9c4     01 00 06 F1 | 	add	_var01, #1
0a9c8     F2 00 62 FC | 	wrlong	_var01, objptr
0a9cc     63 00 00 FF 
0a9d0     58 E4 85 F1 | 	sub	objptr, ##50776
0a9d4                 | LR__0890
0a9d4                 | _push_ret
0a9d4     2D 00 64 FD | 	ret
0a9d8                 | 
0a9d8                 | ' 
0a9d8                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
0a9d8                 | ' 
0a9d8                 | ' sub do_push
0a9d8                 | _do_push
0a9d8                 | ' if stackpointer<maxstack then 
0a9d8     63 00 00 FF 
0a9dc     58 E4 05 F1 | 	add	objptr, ##50776
0a9e0     F2 00 02 FB | 	rdlong	_var01, objptr
0a9e4     63 00 00 FF 
0a9e8     58 E4 85 F1 | 	sub	objptr, ##50776
0a9ec     01 00 00 FF 
0a9f0     00 00 56 F2 | 	cmps	_var01, ##512 wc
0a9f4     F8 00 90 3D |  if_ae	jmp	#LR__0900
0a9f8     6A 00 00 FF 
0a9fc     80 E4 05 F1 | 	add	objptr, ##54400
0aa00     F2 02 02 FB | 	rdlong	_var02, objptr
0aa04     01 05 02 F6 | 	mov	_var03, _var02
0aa08     01 04 66 F0 | 	shl	_var03, #1
0aa0c     01 05 02 F1 | 	add	_var03, _var02
0aa10     02 04 66 F0 | 	shl	_var03, #2
0aa14     03 00 00 FF 
0aa18     04 E4 85 F1 | 	sub	objptr, ##1540
0aa1c     F2 04 02 F1 | 	add	_var03, objptr
0aa20     02 01 02 FB | 	rdlong	_var01, _var03
0aa24     04 04 06 F1 | 	add	_var03, #4
0aa28     02 07 02 FB | 	rdlong	_var04, _var03
0aa2c     01 05 02 F6 | 	mov	_var03, _var02
0aa30     01 04 66 F0 | 	shl	_var03, #1
0aa34     01 05 02 F1 | 	add	_var03, _var02
0aa38     02 04 66 F0 | 	shl	_var03, #2
0aa3c     F2 04 02 F1 | 	add	_var03, objptr
0aa40     08 04 06 F1 | 	add	_var03, #8
0aa44     02 03 02 FB | 	rdlong	_var02, _var03
0aa48     04 00 00 FF 
0aa4c     24 E4 85 F1 | 	sub	objptr, ##2084
0aa50     F2 04 02 FB | 	rdlong	_var03, objptr
0aa54     02 09 02 F6 | 	mov	_var05, _var03
0aa58     01 08 66 F0 | 	shl	_var05, #1
0aa5c     02 09 02 F1 | 	add	_var05, _var03
0aa60     02 08 66 F0 | 	shl	_var05, #2
0aa64     0C 00 00 FF 
0aa68     0C E4 85 F1 | 	sub	objptr, ##6156
0aa6c     F2 08 02 F1 | 	add	_var05, objptr
0aa70     04 01 62 FC | 	wrlong	_var01, _var05
0aa74     0C 00 00 FF 
0aa78     0C E4 05 F1 | 	add	objptr, ##6156
0aa7c     F2 08 02 FB | 	rdlong	_var05, objptr
0aa80     04 05 02 F6 | 	mov	_var03, _var05
0aa84     01 04 66 F0 | 	shl	_var03, #1
0aa88     04 05 02 F1 | 	add	_var03, _var05
0aa8c     02 04 66 F0 | 	shl	_var03, #2
0aa90     0C 00 00 FF 
0aa94     0C E4 85 F1 | 	sub	objptr, ##6156
0aa98     F2 04 02 F1 | 	add	_var03, objptr
0aa9c     04 04 06 F1 | 	add	_var03, #4
0aaa0     02 07 62 FC | 	wrlong	_var04, _var03
0aaa4     0C 00 00 FF 
0aaa8     0C E4 05 F1 | 	add	objptr, ##6156
0aaac     F2 08 02 FB | 	rdlong	_var05, objptr
0aab0     04 07 02 F6 | 	mov	_var04, _var05
0aab4     01 06 66 F0 | 	shl	_var04, #1
0aab8     04 07 02 F1 | 	add	_var04, _var05
0aabc     02 06 66 F0 | 	shl	_var04, #2
0aac0     0C 00 00 FF 
0aac4     0C E4 85 F1 | 	sub	objptr, ##6156
0aac8     F2 06 02 F1 | 	add	_var04, objptr
0aacc     08 06 06 F1 | 	add	_var04, #8
0aad0     03 03 62 FC | 	wrlong	_var02, _var04
0aad4     0C 00 00 FF 
0aad8     0C E4 05 F1 | 	add	objptr, ##6156
0aadc     F2 00 02 FB | 	rdlong	_var01, objptr
0aae0     01 00 06 F1 | 	add	_var01, #1
0aae4     F2 00 62 FC | 	wrlong	_var01, objptr
0aae8     63 00 00 FF 
0aaec     58 E4 85 F1 | 	sub	objptr, ##50776
0aaf0                 | LR__0900
0aaf0                 | _do_push_ret
0aaf0     2D 00 64 FD | 	ret
0aaf4                 | 
0aaf4                 | ' 
0aaf4                 | '   
0aaf4                 | ' sub csave_block(address as ulong)
0aaf4                 | _csave_block
0aaf4     09 01 02 F6 | 	mov	_var01, arg01
0aaf8                 | ' 
0aaf8                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
0aaf8                 | ' ' we enter it at the state of playing 1 kHz header tone
0aaf8                 | ' 
0aaf8                 | ' for i=0 to 63 step 2
0aaf8     00 02 06 F6 | 	mov	_var02, #0
0aafc                 | LR__0910
0aafc                 | '   do: loop until lpeek(base+32*7)>32768
0aafc     57 00 00 FF 
0ab00     10 E4 05 F1 | 	add	objptr, ##44560
0ab04     97 0C 48 FB | 	callpa	#(@LR__0912-@LR__0911)>>2,fcache_load_ptr_
0ab08                 | LR__0911
0ab08     F2 12 02 FB | 	rdlong	arg01, objptr
0ab0c     E0 12 06 F1 | 	add	arg01, #224
0ab10     09 FB 01 FB | 	rdlong	result1, arg01
0ab14     40 00 00 FF 
0ab18     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ab1c     E8 FF 9F CD |  if_b	jmp	#LR__0911
0ab20                 | LR__0912
0ab20     00 13 02 F6 | 	mov	arg01, _var01
0ab24     01 05 02 F6 | 	mov	_var03, _var02
0ab28     02 04 66 F0 | 	shl	_var03, #2
0ab2c     02 13 02 F1 | 	add	arg01, _var03
0ab30     09 07 02 FB | 	rdlong	_var04, arg01
0ab34     22 00 00 FF 
0ab38     F4 E5 05 F1 | 	add	objptr, ##17908
0ab3c     F2 06 62 FC | 	wrlong	_var04, objptr
0ab40     7A 00 00 FF 
0ab44     04 E4 85 F1 | 	sub	objptr, ##62468
0ab48                 | '   q=lpeek(address+4*i)
0ab48                 | '      for bit=0 to 31
0ab48     00 08 06 F6 | 	mov	_var05, #0
0ab4c     97 84 48 FB | 	callpa	#(@LR__0917-@LR__0913)>>2,fcache_load_ptr_
0ab50                 | LR__0913
0ab50                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0ab50     7A 00 00 FF 
0ab54     04 E4 05 F1 | 	add	objptr, ##62468
0ab58     F2 06 02 FB | 	rdlong	_var04, objptr
0ab5c     7A 00 00 FF 
0ab60     04 E4 85 F1 | 	sub	objptr, ##62468
0ab64     04 05 C2 F9 | 	decod	_var03, _var05
0ab68     02 07 CA F7 | 	test	_var04, _var03 wz
0ab6c     60 00 90 AD |  if_e	jmp	#LR__0914
0ab70     04 05 02 F6 | 	mov	_var03, _var05
0ab74     02 04 66 F0 | 	shl	_var03, #2
0ab78     75 00 00 FF 
0ab7c     B8 E5 05 F1 | 	add	objptr, ##60344
0ab80     F2 04 02 F1 | 	add	_var03, objptr
0ab84     02 FF 48 FC | 	wrbyte	#127, _var03
0ab88     04 05 02 F6 | 	mov	_var03, _var05
0ab8c     02 04 66 F0 | 	shl	_var03, #2
0ab90     01 04 06 F1 | 	add	_var03, #1
0ab94     F2 04 02 F1 | 	add	_var03, objptr
0ab98     02 01 49 FC | 	wrbyte	#128, _var03
0ab9c     04 05 02 F6 | 	mov	_var03, _var05
0aba0     02 04 66 F0 | 	shl	_var03, #2
0aba4     02 04 06 F1 | 	add	_var03, #2
0aba8     F2 04 02 F1 | 	add	_var03, objptr
0abac     02 FF 48 FC | 	wrbyte	#127, _var03
0abb0     04 05 02 F6 | 	mov	_var03, _var05
0abb4     02 04 66 F0 | 	shl	_var03, #2
0abb8     03 04 06 F1 | 	add	_var03, #3
0abbc     F2 04 02 F1 | 	add	_var03, objptr
0abc0     02 01 49 FC | 	wrbyte	#128, _var03
0abc4     75 00 00 FF 
0abc8     B8 E5 85 F1 | 	sub	objptr, ##60344
0abcc     5C 00 90 FD | 	jmp	#LR__0915
0abd0                 | LR__0914
0abd0     04 05 02 F6 | 	mov	_var03, _var05
0abd4     02 04 66 F0 | 	shl	_var03, #2
0abd8     75 00 00 FF 
0abdc     B8 E5 05 F1 | 	add	objptr, ##60344
0abe0     F2 04 02 F1 | 	add	_var03, objptr
0abe4     02 01 49 FC | 	wrbyte	#128, _var03
0abe8     04 05 02 F6 | 	mov	_var03, _var05
0abec     02 04 66 F0 | 	shl	_var03, #2
0abf0     01 04 06 F1 | 	add	_var03, #1
0abf4     F2 04 02 F1 | 	add	_var03, objptr
0abf8     02 01 49 FC | 	wrbyte	#128, _var03
0abfc     04 05 02 F6 | 	mov	_var03, _var05
0ac00     02 04 66 F0 | 	shl	_var03, #2
0ac04     02 04 06 F1 | 	add	_var03, #2
0ac08     F2 04 02 F1 | 	add	_var03, objptr
0ac0c     02 FF 48 FC | 	wrbyte	#127, _var03
0ac10     04 05 02 F6 | 	mov	_var03, _var05
0ac14     02 04 66 F0 | 	shl	_var03, #2
0ac18     03 04 06 F1 | 	add	_var03, #3
0ac1c     F2 04 02 F1 | 	add	_var03, objptr
0ac20     02 FF 48 FC | 	wrbyte	#127, _var03
0ac24     75 00 00 FF 
0ac28     B8 E5 85 F1 | 	sub	objptr, ##60344
0ac2c                 | LR__0915
0ac2c     01 08 06 F1 | 	add	_var05, #1
0ac30     20 08 56 F2 | 	cmps	_var05, #32 wc
0ac34     18 FF 9F CD |  if_b	jmp	#LR__0913
0ac38                 | '   do: loop until lpeek(base+32*7)<32768
0ac38     57 00 00 FF 
0ac3c     10 E4 05 F1 | 	add	objptr, ##44560
0ac40                 | LR__0916
0ac40     F2 12 02 FB | 	rdlong	arg01, objptr
0ac44     E0 12 06 F1 | 	add	arg01, #224
0ac48     09 FB 01 FB | 	rdlong	result1, arg01
0ac4c     40 00 00 FF 
0ac50     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0ac54     E8 FF 9F 3D |  if_ae	jmp	#LR__0916
0ac58                 | LR__0917
0ac58     00 13 02 F6 | 	mov	arg01, _var01
0ac5c     04 12 06 F1 | 	add	arg01, #4
0ac60     01 05 02 F6 | 	mov	_var03, _var02
0ac64     02 04 66 F0 | 	shl	_var03, #2
0ac68     02 13 02 F1 | 	add	arg01, _var03
0ac6c     09 07 02 FB | 	rdlong	_var04, arg01
0ac70     22 00 00 FF 
0ac74     F4 E5 05 F1 | 	add	objptr, ##17908
0ac78     F2 06 62 FC | 	wrlong	_var04, objptr
0ac7c     7A 00 00 FF 
0ac80     04 E4 85 F1 | 	sub	objptr, ##62468
0ac84                 | '   q=lpeek(address+4+4*i)
0ac84                 | '      for bit=0 to 31
0ac84     00 08 06 F6 | 	mov	_var05, #0
0ac88     97 94 48 FB | 	callpa	#(@LR__0921-@LR__0918)>>2,fcache_load_ptr_
0ac8c                 | LR__0918
0ac8c                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0ac8c     7A 00 00 FF 
0ac90     04 E4 05 F1 | 	add	objptr, ##62468
0ac94     F2 06 02 FB | 	rdlong	_var04, objptr
0ac98     7A 00 00 FF 
0ac9c     04 E4 85 F1 | 	sub	objptr, ##62468
0aca0     04 05 C2 F9 | 	decod	_var03, _var05
0aca4     02 07 CA F7 | 	test	_var04, _var03 wz
0aca8     80 00 90 AD |  if_e	jmp	#LR__0919
0acac     04 0B 02 F6 | 	mov	_var06, _var05
0acb0     02 0A 66 F0 | 	shl	_var06, #2
0acb4     80 04 06 F6 | 	mov	_var03, #128
0acb8     05 05 02 F1 | 	add	_var03, _var06
0acbc     75 00 00 FF 
0acc0     B8 E5 05 F1 | 	add	objptr, ##60344
0acc4     F2 04 02 F1 | 	add	_var03, objptr
0acc8     02 FF 48 FC | 	wrbyte	#127, _var03
0accc     04 0B 02 F6 | 	mov	_var06, _var05
0acd0     02 0A 66 F0 | 	shl	_var06, #2
0acd4     80 04 06 F6 | 	mov	_var03, #128
0acd8     05 05 02 F1 | 	add	_var03, _var06
0acdc     01 04 06 F1 | 	add	_var03, #1
0ace0     F2 04 02 F1 | 	add	_var03, objptr
0ace4     02 01 49 FC | 	wrbyte	#128, _var03
0ace8     04 0B 02 F6 | 	mov	_var06, _var05
0acec     02 0A 66 F0 | 	shl	_var06, #2
0acf0     80 04 06 F6 | 	mov	_var03, #128
0acf4     05 05 02 F1 | 	add	_var03, _var06
0acf8     02 04 06 F1 | 	add	_var03, #2
0acfc     F2 04 02 F1 | 	add	_var03, objptr
0ad00     02 FF 48 FC | 	wrbyte	#127, _var03
0ad04     04 0B 02 F6 | 	mov	_var06, _var05
0ad08     02 0A 66 F0 | 	shl	_var06, #2
0ad0c     80 04 06 F6 | 	mov	_var03, #128
0ad10     05 05 02 F1 | 	add	_var03, _var06
0ad14     03 04 06 F1 | 	add	_var03, #3
0ad18     F2 04 02 F1 | 	add	_var03, objptr
0ad1c     02 01 49 FC | 	wrbyte	#128, _var03
0ad20     75 00 00 FF 
0ad24     B8 E5 85 F1 | 	sub	objptr, ##60344
0ad28     7C 00 90 FD | 	jmp	#LR__0920
0ad2c                 | LR__0919
0ad2c     04 0B 02 F6 | 	mov	_var06, _var05
0ad30     02 0A 66 F0 | 	shl	_var06, #2
0ad34     80 04 06 F6 | 	mov	_var03, #128
0ad38     05 05 02 F1 | 	add	_var03, _var06
0ad3c     75 00 00 FF 
0ad40     B8 E5 05 F1 | 	add	objptr, ##60344
0ad44     F2 04 02 F1 | 	add	_var03, objptr
0ad48     02 01 49 FC | 	wrbyte	#128, _var03
0ad4c     04 0B 02 F6 | 	mov	_var06, _var05
0ad50     02 0A 66 F0 | 	shl	_var06, #2
0ad54     80 04 06 F6 | 	mov	_var03, #128
0ad58     05 05 02 F1 | 	add	_var03, _var06
0ad5c     01 04 06 F1 | 	add	_var03, #1
0ad60     F2 04 02 F1 | 	add	_var03, objptr
0ad64     02 01 49 FC | 	wrbyte	#128, _var03
0ad68     04 0B 02 F6 | 	mov	_var06, _var05
0ad6c     02 0A 66 F0 | 	shl	_var06, #2
0ad70     80 04 06 F6 | 	mov	_var03, #128
0ad74     05 05 02 F1 | 	add	_var03, _var06
0ad78     02 04 06 F1 | 	add	_var03, #2
0ad7c     F2 04 02 F1 | 	add	_var03, objptr
0ad80     02 FF 48 FC | 	wrbyte	#127, _var03
0ad84     04 0B 02 F6 | 	mov	_var06, _var05
0ad88     02 0A 66 F0 | 	shl	_var06, #2
0ad8c     80 04 06 F6 | 	mov	_var03, #128
0ad90     05 05 02 F1 | 	add	_var03, _var06
0ad94     03 04 06 F1 | 	add	_var03, #3
0ad98     F2 04 02 F1 | 	add	_var03, objptr
0ad9c     02 FF 48 FC | 	wrbyte	#127, _var03
0ada0     75 00 00 FF 
0ada4     B8 E5 85 F1 | 	sub	objptr, ##60344
0ada8                 | LR__0920
0ada8     01 08 06 F1 | 	add	_var05, #1
0adac     20 08 56 F2 | 	cmps	_var05, #32 wc
0adb0     D8 FE 9F CD |  if_b	jmp	#LR__0918
0adb4                 | LR__0921
0adb4     02 02 06 F1 | 	add	_var02, #2
0adb8     40 02 56 F2 | 	cmps	_var02, #64 wc
0adbc     3C FD 9F CD |  if_b	jmp	#LR__0910
0adc0                 | ' do: loop until lpeek(base+32*7)>32768
0adc0     57 00 00 FF 
0adc4     10 E4 05 F1 | 	add	objptr, ##44560
0adc8     97 84 48 FB | 	callpa	#(@LR__0930-@LR__0922)>>2,fcache_load_ptr_
0adcc                 | LR__0922
0adcc     F2 12 02 FB | 	rdlong	arg01, objptr
0add0     E0 12 06 F1 | 	add	arg01, #224
0add4     09 FB 01 FB | 	rdlong	result1, arg01
0add8     40 00 00 FF 
0addc     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ade0     E8 FF 9F CD |  if_b	jmp	#LR__0922
0ade4     57 00 00 FF 
0ade8     10 E4 85 F1 | 	sub	objptr, ##44560
0adec                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0adec     00 02 06 F6 | 	mov	_var02, #0
0adf0                 | LR__0923
0adf0     01 07 52 F6 | 	abs	_var04, _var02 wc
0adf4     07 06 06 F5 | 	and	_var04, #7
0adf8     03 07 82 F6 | 	negc	_var04, _var04
0adfc     04 06 56 F2 | 	cmps	_var04, #4 wc
0ae00     20 00 90 3D |  if_ae	jmp	#LR__0924
0ae04     01 0B 02 F6 | 	mov	_var06, _var02
0ae08     75 00 00 FF 
0ae0c     B8 E5 05 F1 | 	add	objptr, ##60344
0ae10     F2 0A 02 F1 | 	add	_var06, objptr
0ae14     05 FF 48 FC | 	wrbyte	#127, _var06
0ae18     75 00 00 FF 
0ae1c     B8 E5 85 F1 | 	sub	objptr, ##60344
0ae20     1C 00 90 FD | 	jmp	#LR__0925
0ae24                 | LR__0924
0ae24     01 0B 02 F6 | 	mov	_var06, _var02
0ae28     75 00 00 FF 
0ae2c     B8 E5 05 F1 | 	add	objptr, ##60344
0ae30     F2 0A 02 F1 | 	add	_var06, objptr
0ae34     05 01 49 FC | 	wrbyte	#128, _var06
0ae38     75 00 00 FF 
0ae3c     B8 E5 85 F1 | 	sub	objptr, ##60344
0ae40                 | LR__0925
0ae40     01 02 06 F1 | 	add	_var02, #1
0ae44     80 02 56 F2 | 	cmps	_var02, #128 wc
0ae48     A4 FF 9F CD |  if_b	jmp	#LR__0923
0ae4c                 | ' 
0ae4c                 | ' do: loop until lpeek(base+32*7)<32768
0ae4c     57 00 00 FF 
0ae50     10 E4 05 F1 | 	add	objptr, ##44560
0ae54                 | LR__0926
0ae54     F2 12 02 FB | 	rdlong	arg01, objptr
0ae58     E0 12 06 F1 | 	add	arg01, #224
0ae5c     09 FB 01 FB | 	rdlong	result1, arg01
0ae60     40 00 00 FF 
0ae64     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0ae68     E8 FF 9F 3D |  if_ae	jmp	#LR__0926
0ae6c     57 00 00 FF 
0ae70     10 E4 85 F1 | 	sub	objptr, ##44560
0ae74                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0ae74     80 02 06 F6 | 	mov	_var02, #128
0ae78                 | LR__0927
0ae78     01 07 52 F6 | 	abs	_var04, _var02 wc
0ae7c     07 06 06 F5 | 	and	_var04, #7
0ae80     03 07 82 F6 | 	negc	_var04, _var04
0ae84     04 06 56 F2 | 	cmps	_var04, #4 wc
0ae88     20 00 90 3D |  if_ae	jmp	#LR__0928
0ae8c     01 0B 02 F6 | 	mov	_var06, _var02
0ae90     75 00 00 FF 
0ae94     B8 E5 05 F1 | 	add	objptr, ##60344
0ae98     F2 0A 02 F1 | 	add	_var06, objptr
0ae9c     05 FF 48 FC | 	wrbyte	#127, _var06
0aea0     75 00 00 FF 
0aea4     B8 E5 85 F1 | 	sub	objptr, ##60344
0aea8     1C 00 90 FD | 	jmp	#LR__0929
0aeac                 | LR__0928
0aeac     01 0B 02 F6 | 	mov	_var06, _var02
0aeb0     75 00 00 FF 
0aeb4     B8 E5 05 F1 | 	add	objptr, ##60344
0aeb8     F2 0A 02 F1 | 	add	_var06, objptr
0aebc     05 01 49 FC | 	wrbyte	#128, _var06
0aec0     75 00 00 FF 
0aec4     B8 E5 85 F1 | 	sub	objptr, ##60344
0aec8                 | LR__0929
0aec8     01 02 06 F1 | 	add	_var02, #1
0aecc     00 03 16 F2 | 	cmp	_var02, #256 wc
0aed0     A4 FF 9F CD |  if_b	jmp	#LR__0927
0aed4                 | LR__0930
0aed4                 | _csave_block_ret
0aed4     2D 00 64 FD | 	ret
0aed8                 | 
0aed8                 | ' 
0aed8                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0aed8                 | _csave_addtoblock
0aed8     04 4A 05 F6 | 	mov	COUNT_, #4
0aedc     A8 00 A0 FD | 	call	#pushregs_
0aee0     09 1F 02 F6 | 	mov	local01, arg01
0aee4                 | ' 
0aee4                 | ' 
0aee4                 | ' if force=0 then
0aee4     07 14 4E F7 | 	zerox	arg02, #7 wz
0aee8     78 00 90 5D |  if_ne	jmp	#LR__0940
0aeec     78 00 00 FF 
0aef0     B8 E4 05 F1 | 	add	objptr, ##61624
0aef4     F2 14 02 FB | 	rdlong	arg02, objptr
0aef8     02 00 00 FF 
0aefc     00 E4 85 F1 | 	sub	objptr, ##1024
0af00     F2 14 02 F1 | 	add	arg02, objptr
0af04     0A 1F 42 FC | 	wrbyte	local01, arg02
0af08     02 00 00 FF 
0af0c     00 E4 05 F1 | 	add	objptr, ##1024
0af10     F2 1E 02 FB | 	rdlong	local01, objptr
0af14     01 1E 06 F1 | 	add	local01, #1
0af18     F2 1E 62 FC | 	wrlong	local01, objptr
0af1c                 | '   block(blockptr)=d
0af1c                 | '   blockptr+=1
0af1c                 | '   if blockptr>=255 then
0af1c     78 00 00 FF 
0af20     B8 E4 85 F1 | 	sub	objptr, ##61624
0af24     FF 1E 16 F2 | 	cmp	local01, #255 wc
0af28     E4 00 90 CD |  if_b	jmp	#LR__0944
0af2c     76 00 00 FF 
0af30     B8 E4 05 F1 | 	add	objptr, ##60600
0af34     F2 12 02 F6 | 	mov	arg01, objptr
0af38     76 00 00 FF 
0af3c     B8 E4 85 F1 | 	sub	objptr, ##60600
0af40     B0 FB BF FD | 	call	#_csave_block
0af44     78 00 00 FF 
0af48     B8 E4 05 F1 | 	add	objptr, ##61624
0af4c     F2 00 68 FC | 	wrlong	#0, objptr
0af50     78 00 00 FF 
0af54     B8 E4 85 F1 | 	sub	objptr, ##61624
0af58     2C 13 06 F6 | 	mov	arg01, #300
0af5c     08 3F B1 FD | 	call	#__system___waitms
0af60     AC 00 90 FD | 	jmp	#LR__0944
0af64                 | LR__0940
0af64     78 00 00 FF 
0af68     B8 E4 05 F1 | 	add	objptr, ##61624
0af6c     F2 20 02 FB | 	rdlong	local02, objptr
0af70     02 00 00 FF 
0af74     00 E4 85 F1 | 	sub	objptr, ##1024
0af78     F2 20 02 F1 | 	add	local02, objptr
0af7c     10 1F 42 FC | 	wrbyte	local01, local02
0af80                 | '   block(blockptr)=d
0af80                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0af80     02 00 00 FF 
0af84     00 E4 05 F1 | 	add	objptr, ##1024
0af88     F2 22 02 FB | 	rdlong	local03, objptr
0af8c     78 00 00 FF 
0af90     B8 E4 85 F1 | 	sub	objptr, ##61624
0af94     FF 22 16 F2 | 	cmp	local03, #255 wc
0af98     40 00 90 3D |  if_ae	jmp	#LR__0943
0af9c     78 00 00 FF 
0afa0     B8 E4 05 F1 | 	add	objptr, ##61624
0afa4     F2 24 02 FB | 	rdlong	local04, objptr
0afa8     78 00 00 FF 
0afac     B8 E4 85 F1 | 	sub	objptr, ##61624
0afb0                 | LR__0941
0afb0     00 25 56 F2 | 	cmps	local04, #256 wc
0afb4     24 00 90 3D |  if_ae	jmp	#LR__0942
0afb8     12 21 02 F6 | 	mov	local02, local04
0afbc     76 00 00 FF 
0afc0     B8 E4 05 F1 | 	add	objptr, ##60600
0afc4     F2 20 02 F1 | 	add	local02, objptr
0afc8     10 01 48 FC | 	wrbyte	#0, local02
0afcc     01 24 06 F1 | 	add	local04, #1
0afd0     76 00 00 FF 
0afd4     B8 E4 85 F1 | 	sub	objptr, ##60600
0afd8     D4 FF 9F FD | 	jmp	#LR__0941
0afdc                 | LR__0942
0afdc                 | LR__0943
0afdc     76 00 00 FF 
0afe0     B8 E4 05 F1 | 	add	objptr, ##60600
0afe4     F2 12 02 F6 | 	mov	arg01, objptr
0afe8     76 00 00 FF 
0afec     B8 E4 85 F1 | 	sub	objptr, ##60600
0aff0     00 FB BF FD | 	call	#_csave_block
0aff4     78 00 00 FF 
0aff8     B8 E4 05 F1 | 	add	objptr, ##61624
0affc     F2 00 68 FC | 	wrlong	#0, objptr
0b000     78 00 00 FF 
0b004     B8 E4 85 F1 | 	sub	objptr, ##61624
0b008     2C 13 06 F6 | 	mov	arg01, #300
0b00c     58 3E B1 FD | 	call	#__system___waitms
0b010                 | LR__0944
0b010     A7 F0 03 F6 | 	mov	ptra, fp
0b014     B2 00 A0 FD | 	call	#popregs_
0b018                 | _csave_addtoblock_ret
0b018     2D 00 64 FD | 	ret
0b01c                 | 
0b01c                 | ' 
0b01c                 | ' sub test_csave
0b01c                 | _test_csave
0b01c     04 4A 05 F6 | 	mov	COUNT_, #4
0b020     A8 00 A0 FD | 	call	#pushregs_
0b024     C0 F0 07 F1 | 	add	ptra, #192
0b028                 | ' 'dim fileheader,savestart, saveptr as ulong
0b028                 | ' 
0b028                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0b028     6A 00 00 FF 
0b02c     84 E4 05 F1 | 	add	objptr, ##54404
0b030     F2 12 02 FB | 	rdlong	arg01, objptr
0b034     6A 00 00 FF 
0b038     84 E4 85 F1 | 	sub	objptr, ##54404
0b03c     4C F9 B0 FD | 	call	#_pslpeek
0b040     FF FF 7F FF 
0b044     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0b048     0C 00 90 5D |  if_ne	jmp	#LR__0950
0b04c     1B 12 06 F6 | 	mov	arg01, #27
0b050     A4 F6 B0 FD | 	call	#_printerror
0b054     1C 03 90 FD | 	jmp	#LR__0964
0b058                 | LR__0950
0b058     04 F8 BF FD | 	call	#_pop
0b05c     90 4E 05 F1 | 	add	fp, #144
0b060     A7 FA 61 FC | 	wrlong	result1, fp
0b064     04 4E 05 F1 | 	add	fp, #4
0b068     A7 FC 61 FC | 	wrlong	result2, fp
0b06c     04 4E 05 F1 | 	add	fp, #4
0b070     A7 FE 61 FC | 	wrlong	result3, fp
0b074                 | ' t1=pop()
0b074                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0b074     98 4E 85 F1 | 	sub	fp, #152
0b078     1F FE 0D F2 | 	cmp	result3, #31 wz
0b07c     24 00 90 AD |  if_e	jmp	#LR__0951
0b080     79 00 00 FF 
0b084     B4 E5 05 F1 | 	add	objptr, ##62388
0b088     F2 1C 02 FB | 	rdlong	arg06, objptr
0b08c     79 00 00 FF 
0b090     B4 E5 85 F1 | 	sub	objptr, ##62388
0b094     8C 4E 05 F1 | 	add	fp, #140
0b098     A7 1C 62 FC | 	wrlong	arg06, fp
0b09c     8C 4E 85 F1 | 	sub	fp, #140
0b0a0     14 00 90 FD | 	jmp	#LR__0952
0b0a4                 | LR__0951
0b0a4     90 4E 05 F1 | 	add	fp, #144
0b0a8     A7 1C 02 FB | 	rdlong	arg06, fp
0b0ac     04 4E 85 F1 | 	sub	fp, #4
0b0b0     A7 1C 62 FC | 	wrlong	arg06, fp
0b0b4     8C 4E 85 F1 | 	sub	fp, #140
0b0b8                 | LR__0952
0b0b8                 | ' 
0b0b8                 | ' ' prepare 1 kHz header wave
0b0b8                 | ' 
0b0b8                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0b0b8     A7 00 68 FC | 	wrlong	#0, fp
0b0bc     97 34 48 FB | 	callpa	#(@LR__0956-@LR__0953)>>2,fcache_load_ptr_
0b0c0                 | LR__0953
0b0c0     A7 1C 02 FB | 	rdlong	arg06, fp
0b0c4     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0b0c8     07 1A 06 F5 | 	and	arg05, #7
0b0cc     0D 1B 82 F6 | 	negc	arg05, arg05
0b0d0     04 1A 56 F2 | 	cmps	arg05, #4 wc
0b0d4     20 00 90 3D |  if_ae	jmp	#LR__0954
0b0d8     A7 1A 02 FB | 	rdlong	arg05, fp
0b0dc     75 00 00 FF 
0b0e0     B8 E5 05 F1 | 	add	objptr, ##60344
0b0e4     F2 1A 02 F1 | 	add	arg05, objptr
0b0e8     0D FF 48 FC | 	wrbyte	#127, arg05
0b0ec     75 00 00 FF 
0b0f0     B8 E5 85 F1 | 	sub	objptr, ##60344
0b0f4     1C 00 90 FD | 	jmp	#LR__0955
0b0f8                 | LR__0954
0b0f8     A7 1A 02 FB | 	rdlong	arg05, fp
0b0fc     75 00 00 FF 
0b100     B8 E5 05 F1 | 	add	objptr, ##60344
0b104     F2 1A 02 F1 | 	add	arg05, objptr
0b108     0D 01 49 FC | 	wrbyte	#128, arg05
0b10c     75 00 00 FF 
0b110     B8 E5 85 F1 | 	sub	objptr, ##60344
0b114                 | LR__0955
0b114     A7 1A 02 FB | 	rdlong	arg05, fp
0b118     01 1A 06 F1 | 	add	arg05, #1
0b11c     A7 1A 62 FC | 	wrlong	arg05, fp
0b120     00 1B 56 F2 | 	cmps	arg05, #256 wc
0b124     98 FF 9F CD |  if_b	jmp	#LR__0953
0b128                 | LR__0956
0b128     75 00 00 FF 
0b12c     B8 E5 05 F1 | 	add	objptr, ##60344
0b130     F2 14 02 F6 | 	mov	arg02, objptr
0b134     07 12 06 F6 | 	mov	arg01, #7
0b138     0F 00 00 FF 
0b13c     40 17 06 F6 | 	mov	arg03, ##8000
0b140     0E 18 C6 F9 | 	decod	arg04, #14
0b144     00 1B 06 F6 | 	mov	arg05, #256
0b148     00 1C 06 F6 | 	mov	arg06, #0
0b14c     6A 00 00 FF 
0b150     EC E4 85 F1 | 	sub	objptr, ##54508
0b154     68 36 B1 FD | 	call	#_audio096_spin2_play8
0b158     0B 00 00 FF 
0b15c     CC E4 85 F1 | 	sub	objptr, ##5836
0b160     05 00 00 FF 
0b164     B8 13 06 F6 | 	mov	arg01, ##3000
0b168     FC 3C B1 FD | 	call	#__system___waitms
0b16c     78 00 00 FF 
0b170     B8 E4 05 F1 | 	add	objptr, ##61624
0b174     F2 00 68 FC | 	wrlong	#0, objptr
0b178     78 00 00 FF 
0b17c     B8 E4 85 F1 | 	sub	objptr, ##61624
0b180     72 12 06 F6 | 	mov	arg01, #114
0b184     00 14 06 F6 | 	mov	arg02, #0
0b188     4C FD BF FD | 	call	#_csave_addtoblock
0b18c     62 12 06 F6 | 	mov	arg01, #98
0b190     00 14 06 F6 | 	mov	arg02, #0
0b194     40 FD BF FD | 	call	#_csave_addtoblock
0b198     61 12 06 F6 | 	mov	arg01, #97
0b19c     00 14 06 F6 | 	mov	arg02, #0
0b1a0     34 FD BF FD | 	call	#_csave_addtoblock
0b1a4     0D 12 06 F6 | 	mov	arg01, #13
0b1a8     00 14 06 F6 | 	mov	arg02, #0
0b1ac     28 FD BF FD | 	call	#_csave_addtoblock
0b1b0                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0b1b0                 | ' waitms 3000 
0b1b0                 | ' 
0b1b0                 | ' blockptr=0
0b1b0                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0b1b0                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0b1b0     A7 02 68 FC | 	wrlong	#1, fp
0b1b4     8C 4E 05 F1 | 	add	fp, #140
0b1b8     A7 12 02 FB | 	rdlong	arg01, fp
0b1bc     8C 4E 85 F1 | 	sub	fp, #140
0b1c0     09 1F 02 F6 | 	mov	local01, arg01
0b1c4     97 06 48 FB | 	callpa	#(@LR__0958-@LR__0957)>>2,fcache_load_ptr_
0b1c8                 | LR__0957
0b1c8     0F FB C9 FA | 	rdbyte	result1, local01 wz
0b1cc     01 1E 06 51 |  if_ne	add	local01, #1
0b1d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0957
0b1d4                 | LR__0958
0b1d4     09 1F 82 F1 | 	sub	local01, arg01
0b1d8     0F 21 02 F6 | 	mov	local02, local01
0b1dc     01 20 06 F1 | 	add	local02, #1
0b1e0                 | LR__0959
0b1e0     A7 1A 02 FB | 	rdlong	arg05, fp
0b1e4     10 1B 52 F2 | 	cmps	arg05, local02 wc
0b1e8     34 00 90 3D |  if_ae	jmp	#LR__0960
0b1ec     8C 4E 05 F1 | 	add	fp, #140
0b1f0     A7 12 02 FB | 	rdlong	arg01, fp
0b1f4     8C 4E 85 F1 | 	sub	fp, #140
0b1f8     A7 14 02 FB | 	rdlong	arg02, fp
0b1fc     01 16 06 F6 | 	mov	arg03, #1
0b200     D0 5A B1 FD | 	call	#__system__Mid_S
0b204     FD 12 C2 FA | 	rdbyte	arg01, result1
0b208     00 14 06 F6 | 	mov	arg02, #0
0b20c     C8 FC BF FD | 	call	#_csave_addtoblock
0b210     A7 1A 02 FB | 	rdlong	arg05, fp
0b214     01 1A 06 F1 | 	add	arg05, #1
0b218     A7 1A 62 FC | 	wrlong	arg05, fp
0b21c     C0 FF 9F FD | 	jmp	#LR__0959
0b220                 | LR__0960
0b220     00 12 06 F6 | 	mov	arg01, #0
0b224     00 14 06 F6 | 	mov	arg02, #0
0b228     AC FC BF FD | 	call	#_csave_addtoblock
0b22c     72 12 06 F6 | 	mov	arg01, #114
0b230     00 14 06 F6 | 	mov	arg02, #0
0b234     A0 FC BF FD | 	call	#_csave_addtoblock
0b238     62 12 06 F6 | 	mov	arg01, #98
0b23c     00 14 06 F6 | 	mov	arg02, #0
0b240     94 FC BF FD | 	call	#_csave_addtoblock
0b244     73 12 06 F6 | 	mov	arg01, #115
0b248     00 14 06 F6 | 	mov	arg02, #0
0b24c     88 FC BF FD | 	call	#_csave_addtoblock
0b250     0D 12 06 F6 | 	mov	arg01, #13
0b254     00 14 06 F6 | 	mov	arg02, #0
0b258     7C FC BF FD | 	call	#_csave_addtoblock
0b25c     6A 00 00 FF 
0b260     84 E4 05 F1 | 	add	objptr, ##54404
0b264     F2 22 02 FB | 	rdlong	local03, objptr
0b268     6A 00 00 FF 
0b26c     84 E4 85 F1 | 	sub	objptr, ##54404
0b270     9C 4E 05 F1 | 	add	fp, #156
0b274     A7 22 62 FC | 	wrlong	local03, fp
0b278     9C 4E 85 F1 | 	sub	fp, #156
0b27c                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0b27c                 | ' 
0b27c                 | ' saveptr=programstart
0b27c                 | ' do
0b27c                 | LR__0961
0b27c     A0 4E 05 F1 | 	add	fp, #160
0b280     A7 12 02 F6 | 	mov	arg01, fp
0b284     04 4E 85 F1 | 	sub	fp, #4
0b288     A7 14 02 FB | 	rdlong	arg02, fp
0b28c     9C 4E 85 F1 | 	sub	fp, #156
0b290     18 16 06 F6 | 	mov	arg03, #24
0b294     0B 00 00 FF 
0b298     CC E4 05 F1 | 	add	objptr, ##5836
0b29c     B0 2C B1 FD | 	call	#_psram_spin2_read1
0b2a0     0C 4E 05 F1 | 	add	fp, #12
0b2a4     A7 12 02 F6 | 	mov	arg01, fp
0b2a8     9C 4E 05 F1 | 	add	fp, #156
0b2ac     A7 14 02 FB | 	rdlong	arg02, fp
0b2b0     04 4E 05 F1 | 	add	fp, #4
0b2b4     A7 16 02 FB | 	rdlong	arg03, fp
0b2b8     AC 4E 85 F1 | 	sub	fp, #172
0b2bc     90 2C B1 FD | 	call	#_psram_spin2_read1
0b2c0     0B 00 00 FF 
0b2c4     CC E4 85 F1 | 	sub	objptr, ##5836
0b2c8     AC 4E 05 F1 | 	add	fp, #172
0b2cc     A7 12 02 FB | 	rdlong	arg01, fp
0b2d0     AC 4E 85 F1 | 	sub	fp, #172
0b2d4     00 14 06 F6 | 	mov	arg02, #0
0b2d8     FC FB BF FD | 	call	#_csave_addtoblock
0b2dc                 | '   psram.read1(varptr(header(0)),saveptr,24)
0b2dc                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0b2dc                 | '   csave_addtoblock(header(3),0) ' that's always <255
0b2dc                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
0b2dc     A7 00 68 FC | 	wrlong	#0, fp
0b2e0     AC 4E 05 F1 | 	add	fp, #172
0b2e4     A7 24 02 FB | 	rdlong	local04, fp
0b2e8     AC 4E 85 F1 | 	sub	fp, #172
0b2ec                 | LR__0962
0b2ec     A7 22 02 FB | 	rdlong	local03, fp
0b2f0     12 23 52 F2 | 	cmps	local03, local04 wc
0b2f4     2C 00 90 3D |  if_ae	jmp	#LR__0963
0b2f8     A7 22 02 FB | 	rdlong	local03, fp
0b2fc     0C 4E 05 F1 | 	add	fp, #12
0b300     A7 22 02 F1 | 	add	local03, fp
0b304     11 13 C2 FA | 	rdbyte	arg01, local03
0b308     00 14 06 F6 | 	mov	arg02, #0
0b30c     0C 4E 85 F1 | 	sub	fp, #12
0b310     C4 FB BF FD | 	call	#_csave_addtoblock
0b314     A7 22 02 FB | 	rdlong	local03, fp
0b318     01 22 06 F1 | 	add	local03, #1
0b31c     A7 22 62 FC | 	wrlong	local03, fp
0b320     C8 FF 9F FD | 	jmp	#LR__0962
0b324                 | LR__0963
0b324     B4 4E 05 F1 | 	add	fp, #180
0b328     A7 22 02 FB | 	rdlong	local03, fp
0b32c     18 4E 85 F1 | 	sub	fp, #24
0b330     A7 22 62 FC | 	wrlong	local03, fp
0b334     18 4E 05 F1 | 	add	fp, #24
0b338     A7 22 02 FB | 	rdlong	local03, fp
0b33c     B4 4E 85 F1 | 	sub	fp, #180
0b340     FF FF 3F FF 
0b344     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0b348     30 FF 9F 5D |  if_ne	jmp	#LR__0961
0b34c     00 12 06 F6 | 	mov	arg01, #0
0b350     01 14 06 F6 | 	mov	arg02, #1
0b354     80 FB BF FD | 	call	#_csave_addtoblock
0b358     57 00 00 FF 
0b35c     10 E4 05 F1 | 	add	objptr, ##44560
0b360     F2 12 02 FB | 	rdlong	arg01, objptr
0b364     57 00 00 FF 
0b368     10 E4 85 F1 | 	sub	objptr, ##44560
0b36c     F4 12 06 F1 | 	add	arg01, #244
0b370     09 01 58 FC | 	wrword	#0, arg01
0b374                 | LR__0964
0b374     A7 F0 03 F6 | 	mov	ptra, fp
0b378     B2 00 A0 FD | 	call	#popregs_
0b37c                 | _test_csave_ret
0b37c     2D 00 64 FD | 	ret
0b380                 | 
0b380                 | ' 
0b380                 | ' ' ----------------- Save the program
0b380                 | ' 
0b380                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0b380                 | _do_save
0b380     04 4A 05 F6 | 	mov	COUNT_, #4
0b384     A8 00 A0 FD | 	call	#pushregs_
0b388     01 00 00 FF 
0b38c     C0 F0 07 F1 | 	add	ptra, ##704
0b390     6A 00 00 FF 
0b394     80 E4 05 F1 | 	add	objptr, ##54400
0b398     F2 1E 02 FB | 	rdlong	local01, objptr
0b39c     0F 21 02 F6 | 	mov	local02, local01
0b3a0     01 20 66 F0 | 	shl	local02, #1
0b3a4     0F 21 02 F1 | 	add	local02, local01
0b3a8     02 20 66 F0 | 	shl	local02, #2
0b3ac     03 00 00 FF 
0b3b0     04 E4 85 F1 | 	sub	objptr, ##1540
0b3b4     F2 20 02 F1 | 	add	local02, objptr
0b3b8     10 23 02 FB | 	rdlong	local03, local02
0b3bc     01 00 00 FF 
0b3c0     10 4E 05 F1 | 	add	fp, ##528
0b3c4     A7 22 62 FC | 	wrlong	local03, fp
0b3c8                 | ' 
0b3c8                 | ' numpar=compiledline(lineptr_e).result.uresult
0b3c8                 | ' 
0b3c8                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0b3c8     01 00 00 FF 
0b3cc     10 4E 85 F1 | 	sub	fp, ##528
0b3d0     01 22 56 F2 | 	cmps	local03, #1 wc
0b3d4     67 00 00 FF 
0b3d8     7C E4 85 F1 | 	sub	objptr, ##52860
0b3dc     20 00 90 CD |  if_b	jmp	#LR__0970
0b3e0     7C F4 BF FD | 	call	#_pop
0b3e4     A7 FA 61 FC | 	wrlong	result1, fp
0b3e8     04 4E 05 F1 | 	add	fp, #4
0b3ec     A7 FC 61 FC | 	wrlong	result2, fp
0b3f0     04 4E 05 F1 | 	add	fp, #4
0b3f4     A7 FE 61 FC | 	wrlong	result3, fp
0b3f8     08 4E 85 F1 | 	sub	fp, #8
0b3fc     24 00 90 FD | 	jmp	#LR__0971
0b400                 | LR__0970
0b400     79 00 00 FF 
0b404     B4 E5 05 F1 | 	add	objptr, ##62388
0b408     F2 22 02 FB | 	rdlong	local03, objptr
0b40c     79 00 00 FF 
0b410     B4 E5 85 F1 | 	sub	objptr, ##62388
0b414     A7 22 62 FC | 	wrlong	local03, fp
0b418     08 4E 05 F1 | 	add	fp, #8
0b41c     A7 3E 68 FC | 	wrlong	#31, fp
0b420     08 4E 85 F1 | 	sub	fp, #8
0b424                 | LR__0971
0b424                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0b424     6A 00 00 FF 
0b428     84 E4 05 F1 | 	add	objptr, ##54404
0b42c     F2 12 02 FB | 	rdlong	arg01, objptr
0b430     6A 00 00 FF 
0b434     84 E4 85 F1 | 	sub	objptr, ##54404
0b438     50 F5 B0 FD | 	call	#_pslpeek
0b43c     FF FF 7F FF 
0b440     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0b444     0C 00 90 5D |  if_ne	jmp	#LR__0972
0b448     1B 12 06 F6 | 	mov	arg01, #27
0b44c     A8 F2 B0 FD | 	call	#_printerror
0b450     1C 03 90 FD | 	jmp	#LR__0978
0b454                 | LR__0972
0b454                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0b454     08 4E 05 F1 | 	add	fp, #8
0b458     A7 22 02 FB | 	rdlong	local03, fp
0b45c     08 4E 85 F1 | 	sub	fp, #8
0b460     2B 22 0E F2 | 	cmp	local03, #43 wz
0b464     18 00 90 5D |  if_ne	jmp	#LR__0973
0b468     A7 12 02 FB | 	rdlong	arg01, fp
0b46c     80 38 B0 FD | 	call	#_convertstring
0b470     A7 FA 61 FC | 	wrlong	result1, fp
0b474     08 4E 05 F1 | 	add	fp, #8
0b478     A7 3E 68 FC | 	wrlong	#31, fp
0b47c     08 4E 85 F1 | 	sub	fp, #8
0b480                 | LR__0973
0b480                 | ' if t1.result_type=result_string then
0b480     08 4E 05 F1 | 	add	fp, #8
0b484     A7 22 02 FB | 	rdlong	local03, fp
0b488     08 4E 85 F1 | 	sub	fp, #8
0b48c     1F 22 0E F2 | 	cmp	local03, #31 wz
0b490     DC 02 90 5D |  if_ne	jmp	#LR__0977
0b494                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0b494     A7 12 02 FB | 	rdlong	arg01, fp
0b498     73 01 00 FF 
0b49c     27 15 06 F6 | 	mov	arg02, ##@LR__5117
0b4a0     F8 36 B1 FD | 	call	#__system___string_cmp
0b4a4     00 FA 0D F2 | 	cmp	result1, #0 wz
0b4a8     79 00 00 AF 
0b4ac     B4 E5 05 A1 |  if_e	add	objptr, ##62388
0b4b0     F2 22 02 AB |  if_e	rdlong	local03, objptr
0b4b4     A7 22 62 AC |  if_e	wrlong	local03, fp
0b4b8     79 00 00 AF 
0b4bc     B4 E5 85 A1 |  if_e	sub	objptr, ##62388
0b4c0     A7 22 02 5B |  if_ne	rdlong	local03, fp
0b4c4     79 00 00 5F 
0b4c8     B4 E5 05 51 |  if_ne	add	objptr, ##62388
0b4cc     F2 22 62 5C |  if_ne	wrlong	local03, objptr
0b4d0     79 00 00 5F 
0b4d4     B4 E5 85 51 |  if_ne	sub	objptr, ##62388
0b4d8                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0b4d8     09 12 06 F6 | 	mov	arg01, #9
0b4dc     5C 86 B1 FD | 	call	#__system__close
0b4e0     09 22 06 F6 | 	mov	local03, #9
0b4e4     72 00 00 FF 
0b4e8     98 E4 05 F1 | 	add	objptr, ##58520
0b4ec     F2 12 02 FB | 	rdlong	arg01, objptr
0b4f0     72 00 00 FF 
0b4f4     98 E4 85 F1 | 	sub	objptr, ##58520
0b4f8     73 01 00 FF 
0b4fc     28 15 06 F6 | 	mov	arg02, ##@LR__5118
0b500     CC 36 B1 FD | 	call	#__system___string_concat
0b504     FD 12 02 F6 | 	mov	arg01, result1
0b508     A7 14 02 FB | 	rdlong	arg02, fp
0b50c     C0 36 B1 FD | 	call	#__system___string_concat
0b510     FD 14 02 F6 | 	mov	arg02, result1
0b514     11 13 02 F6 | 	mov	arg01, local03
0b518     0D 16 06 F6 | 	mov	arg03, #13
0b51c     58 42 B1 FD | 	call	#__system___basic_open_string
0b520     01 00 00 FF 
0b524     0C 4E 05 F1 | 	add	fp, ##524
0b528     A7 0A 68 FC | 	wrlong	#5, fp
0b52c     6A 00 00 FF 
0b530     84 E4 05 F1 | 	add	objptr, ##54404
0b534     F2 22 02 FB | 	rdlong	local03, objptr
0b538     6A 00 00 FF 
0b53c     84 E4 85 F1 | 	sub	objptr, ##54404
0b540     10 4E 05 F1 | 	add	fp, #16
0b544     A7 22 62 FC | 	wrlong	local03, fp
0b548     01 00 00 FF 
0b54c     1C 4E 85 F1 | 	sub	fp, ##540
0b550                 | ' '  put #9,1,fileheader,1
0b550                 | '   i=5
0b550                 | '   saveptr=programstart
0b550                 | '   do
0b550                 | LR__0974
0b550     01 00 00 FF 
0b554     20 4E 05 F1 | 	add	fp, ##544
0b558     A7 12 02 F6 | 	mov	arg01, fp
0b55c     04 4E 85 F1 | 	sub	fp, #4
0b560     A7 14 02 FB | 	rdlong	arg02, fp
0b564     01 00 00 FF 
0b568     1C 4E 85 F1 | 	sub	fp, ##540
0b56c     18 16 06 F6 | 	mov	arg03, #24
0b570     0B 00 00 FF 
0b574     CC E4 05 F1 | 	add	objptr, ##5836
0b578     D4 29 B1 FD | 	call	#_psram_spin2_read1
0b57c     01 00 00 FF 
0b580     38 4E 05 F1 | 	add	fp, ##568
0b584     A7 12 02 F6 | 	mov	arg01, fp
0b588     10 4E 85 F1 | 	sub	fp, #16
0b58c     A7 14 02 FB | 	rdlong	arg02, fp
0b590     04 4E 05 F1 | 	add	fp, #4
0b594     A7 16 02 FB | 	rdlong	arg03, fp
0b598     01 00 00 FF 
0b59c     2C 4E 85 F1 | 	sub	fp, ##556
0b5a0     AC 29 B1 FD | 	call	#_psram_spin2_read1
0b5a4     0B 00 00 FF 
0b5a8     CC E4 85 F1 | 	sub	objptr, ##5836
0b5ac     73 01 00 FF 
0b5b0     2A 23 06 F6 | 	mov	local03, ##@LR__5119
0b5b4     01 00 00 FF 
0b5b8     B8 4E 05 F1 | 	add	fp, ##696
0b5bc     A7 22 62 FC | 	wrlong	local03, fp
0b5c0                 | '     psram.read1(varptr(header(0)),saveptr,24)
0b5c0                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0b5c0                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0b5c0     AC 4E 85 F1 | 	sub	fp, #172
0b5c4     A7 02 68 FC | 	wrlong	#1, fp
0b5c8     20 4E 05 F1 | 	add	fp, #32
0b5cc     A7 24 02 FB | 	rdlong	local04, fp
0b5d0     01 00 00 FF 
0b5d4     2C 4E 85 F1 | 	sub	fp, ##556
0b5d8     01 24 06 F1 | 	add	local04, #1
0b5dc                 | LR__0975
0b5dc     01 00 00 FF 
0b5e0     0C 4E 05 F1 | 	add	fp, ##524
0b5e4     A7 22 02 FB | 	rdlong	local03, fp
0b5e8     01 00 00 FF 
0b5ec     0C 4E 85 F1 | 	sub	fp, ##524
0b5f0     12 23 52 F2 | 	cmps	local03, local04 wc
0b5f4     64 00 90 3D |  if_ae	jmp	#LR__0976
0b5f8     01 00 00 FF 
0b5fc     B8 4E 05 F1 | 	add	fp, ##696
0b600     A7 1E 02 FB | 	rdlong	local01, fp
0b604     AC 4E 85 F1 | 	sub	fp, #172
0b608     A7 22 02 FB | 	rdlong	local03, fp
0b60c     01 22 86 F1 | 	sub	local03, #1
0b610     2C 4E 05 F1 | 	add	fp, #44
0b614     A7 22 02 F1 | 	add	local03, fp
0b618     11 13 C2 FA | 	rdbyte	arg01, local03
0b61c     01 00 00 FF 
0b620     38 4E 85 F1 | 	sub	fp, ##568
0b624     58 57 B1 FD | 	call	#__system__Chr_S
0b628     FD 14 02 F6 | 	mov	arg02, result1
0b62c     0F 13 02 F6 | 	mov	arg01, local01
0b630     9C 35 B1 FD | 	call	#__system___string_concat
0b634     01 00 00 FF 
0b638     B8 4E 05 F1 | 	add	fp, ##696
0b63c     A7 FA 61 FC | 	wrlong	result1, fp
0b640     AC 4E 85 F1 | 	sub	fp, #172
0b644     A7 22 02 FB | 	rdlong	local03, fp
0b648     01 22 06 F1 | 	add	local03, #1
0b64c     A7 22 62 FC | 	wrlong	local03, fp
0b650     01 00 00 FF 
0b654     0C 4E 85 F1 | 	sub	fp, ##524
0b658     80 FF 9F FD | 	jmp	#LR__0975
0b65c                 | LR__0976
0b65c                 | '  '   put #9,i,header(3),1 : i+=4
0b65c                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0b65c                 | '      print #9, saveline$
0b65c     09 12 06 F6 | 	mov	arg01, #9
0b660     A8 8E B1 FD | 	call	#__system___getiolock_0484
0b664     FD 12 02 F6 | 	mov	arg01, result1
0b668     08 35 B1 FD | 	call	#__system___lockmem
0b66c     01 00 00 FF 
0b670     B8 4E 05 F1 | 	add	fp, ##696
0b674     A7 14 02 FB | 	rdlong	arg02, fp
0b678     01 00 00 FF 
0b67c     B8 4E 85 F1 | 	sub	fp, ##696
0b680     09 12 06 F6 | 	mov	arg01, #9
0b684     00 16 06 F6 | 	mov	arg03, #0
0b688     F0 41 B1 FD | 	call	#__system___basic_print_string
0b68c     09 12 06 F6 | 	mov	arg01, #9
0b690     0A 14 06 F6 | 	mov	arg02, #10
0b694     00 16 06 F6 | 	mov	arg03, #0
0b698     88 41 B1 FD | 	call	#__system___basic_print_char
0b69c     09 12 06 F6 | 	mov	arg01, #9
0b6a0     68 8E B1 FD | 	call	#__system___getiolock_0484
0b6a4     FD 00 68 FC | 	wrlong	#0, result1
0b6a8     01 00 00 FF 
0b6ac     34 4E 05 F1 | 	add	fp, ##564
0b6b0     A7 22 02 FB | 	rdlong	local03, fp
0b6b4     18 4E 85 F1 | 	sub	fp, #24
0b6b8     A7 22 62 FC | 	wrlong	local03, fp
0b6bc     18 4E 05 F1 | 	add	fp, #24
0b6c0     A7 22 02 FB | 	rdlong	local03, fp
0b6c4     01 00 00 FF 
0b6c8     34 4E 85 F1 | 	sub	fp, ##564
0b6cc     FF FF 3F FF 
0b6d0     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0b6d4     78 FE 9F 5D |  if_ne	jmp	#LR__0974
0b6d8                 | '   close #9  
0b6d8     09 12 06 F6 | 	mov	arg01, #9
0b6dc     5C 84 B1 FD | 	call	#__system__close
0b6e0                 | '   print "Saved as ";currentdir$+"/"+loadname
0b6e0     00 12 06 F6 | 	mov	arg01, #0
0b6e4     24 8E B1 FD | 	call	#__system___getiolock_0484
0b6e8     FD 12 02 F6 | 	mov	arg01, result1
0b6ec     84 34 B1 FD | 	call	#__system___lockmem
0b6f0     73 01 00 FF 
0b6f4     2B 15 06 F6 | 	mov	arg02, ##@LR__5120
0b6f8     00 12 06 F6 | 	mov	arg01, #0
0b6fc     00 16 06 F6 | 	mov	arg03, #0
0b700     78 41 B1 FD | 	call	#__system___basic_print_string
0b704     00 20 06 F6 | 	mov	local02, #0
0b708     72 00 00 FF 
0b70c     98 E4 05 F1 | 	add	objptr, ##58520
0b710     F2 12 02 FB | 	rdlong	arg01, objptr
0b714     72 00 00 FF 
0b718     98 E4 85 F1 | 	sub	objptr, ##58520
0b71c     73 01 00 FF 
0b720     35 15 06 F6 | 	mov	arg02, ##@LR__5121
0b724     A8 34 B1 FD | 	call	#__system___string_concat
0b728     FD 12 02 F6 | 	mov	arg01, result1
0b72c     79 00 00 FF 
0b730     B4 E5 05 F1 | 	add	objptr, ##62388
0b734     F2 14 02 FB | 	rdlong	arg02, objptr
0b738     79 00 00 FF 
0b73c     B4 E5 85 F1 | 	sub	objptr, ##62388
0b740     8C 34 B1 FD | 	call	#__system___string_concat
0b744     FD 14 02 F6 | 	mov	arg02, result1
0b748     10 13 02 F6 | 	mov	arg01, local02
0b74c     00 16 06 F6 | 	mov	arg03, #0
0b750     28 41 B1 FD | 	call	#__system___basic_print_string
0b754     00 12 06 F6 | 	mov	arg01, #0
0b758     0A 14 06 F6 | 	mov	arg02, #10
0b75c     00 16 06 F6 | 	mov	arg03, #0
0b760     C0 40 B1 FD | 	call	#__system___basic_print_char
0b764     00 12 06 F6 | 	mov	arg01, #0
0b768     A0 8D B1 FD | 	call	#__system___getiolock_0484
0b76c     FD 00 68 FC | 	wrlong	#0, result1
0b770                 | LR__0977
0b770                 | LR__0978
0b770     A7 F0 03 F6 | 	mov	ptra, fp
0b774     B2 00 A0 FD | 	call	#popregs_
0b778                 | _do_save_ret
0b778     2D 00 64 FD | 	ret
0b77c                 | 
0b77c                 | ' 
0b77c                 | ' '----------------- Load the program
0b77c                 | ' 'lo todo: errors while loading
0b77c                 | ' sub do_load
0b77c                 | _do_load
0b77c     01 4A 05 F6 | 	mov	COUNT_, #1
0b780     A8 00 A0 FD | 	call	#pushregs_
0b784     A8 F0 07 F1 | 	add	ptra, #168
0b788     6A 00 00 FF 
0b78c     80 E4 05 F1 | 	add	objptr, ##54400
0b790     F2 14 02 FB | 	rdlong	arg02, objptr
0b794     0A 13 02 F6 | 	mov	arg01, arg02
0b798     01 12 66 F0 | 	shl	arg01, #1
0b79c     0A 13 02 F1 | 	add	arg01, arg02
0b7a0     02 12 66 F0 | 	shl	arg01, #2
0b7a4     03 00 00 FF 
0b7a8     04 E4 85 F1 | 	sub	objptr, ##1540
0b7ac     F2 12 02 F1 | 	add	arg01, objptr
0b7b0     09 15 02 FB | 	rdlong	arg02, arg01
0b7b4     18 4E 05 F1 | 	add	fp, #24
0b7b8     A7 14 62 FC | 	wrlong	arg02, fp
0b7bc     8C 4E 05 F1 | 	add	fp, #140
0b7c0     A7 12 02 F6 | 	mov	arg01, fp
0b7c4     67 00 00 FF 
0b7c8     7C E4 85 F1 | 	sub	objptr, ##52860
0b7cc     80 4E 85 F1 | 	sub	fp, #128
0b7d0     09 4F 61 FC | 	wrlong	fp, arg01
0b7d4                 | ' numpar=compiledline(lineptr_e).result.uresult
0b7d4                 | ' lpoke varptr(line2$),varptr(line2)
0b7d4                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0b7d4     0C 4E 85 F1 | 	sub	fp, #12
0b7d8     A7 1E 02 FB | 	rdlong	local01, fp
0b7dc     18 4E 85 F1 | 	sub	fp, #24
0b7e0     01 1E 56 F2 | 	cmps	local01, #1 wc
0b7e4     20 00 90 CD |  if_b	jmp	#LR__0980
0b7e8     74 F0 BF FD | 	call	#_pop
0b7ec     A7 FA 61 FC | 	wrlong	result1, fp
0b7f0     04 4E 05 F1 | 	add	fp, #4
0b7f4     A7 FC 61 FC | 	wrlong	result2, fp
0b7f8     04 4E 05 F1 | 	add	fp, #4
0b7fc     A7 FE 61 FC | 	wrlong	result3, fp
0b800     08 4E 85 F1 | 	sub	fp, #8
0b804     24 00 90 FD | 	jmp	#LR__0981
0b808                 | LR__0980
0b808     79 00 00 FF 
0b80c     B4 E5 05 F1 | 	add	objptr, ##62388
0b810     F2 1E 02 FB | 	rdlong	local01, objptr
0b814     79 00 00 FF 
0b818     B4 E5 85 F1 | 	sub	objptr, ##62388
0b81c     A7 1E 62 FC | 	wrlong	local01, fp
0b820     08 4E 05 F1 | 	add	fp, #8
0b824     A7 3E 68 FC | 	wrlong	#31, fp
0b828     08 4E 85 F1 | 	sub	fp, #8
0b82c                 | LR__0981
0b82c                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0b82c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0b82c     08 4E 05 F1 | 	add	fp, #8
0b830     A7 1E 02 FB | 	rdlong	local01, fp
0b834     08 4E 85 F1 | 	sub	fp, #8
0b838     2B 1E 0E F2 | 	cmp	local01, #43 wz
0b83c     18 00 90 5D |  if_ne	jmp	#LR__0982
0b840     A7 12 02 FB | 	rdlong	arg01, fp
0b844     A8 34 B0 FD | 	call	#_convertstring
0b848     A7 FA 61 FC | 	wrlong	result1, fp
0b84c     08 4E 05 F1 | 	add	fp, #8
0b850     A7 3E 68 FC | 	wrlong	#31, fp
0b854     08 4E 85 F1 | 	sub	fp, #8
0b858                 | LR__0982
0b858                 | ' if t1.result_type=result_string then
0b858     08 4E 05 F1 | 	add	fp, #8
0b85c     A7 1E 02 FB | 	rdlong	local01, fp
0b860     08 4E 85 F1 | 	sub	fp, #8
0b864     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b868     20 04 90 5D |  if_ne	jmp	#LR__0990
0b86c     48 2D B0 FD | 	call	#_do_new
0b870                 | '   do_new
0b870                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0b870     A7 12 02 FB | 	rdlong	arg01, fp
0b874     73 01 00 FF 
0b878     37 15 06 F6 | 	mov	arg02, ##@LR__5122
0b87c     1C 33 B1 FD | 	call	#__system___string_cmp
0b880     00 FA 0D F2 | 	cmp	result1, #0 wz
0b884     79 00 00 AF 
0b888     B4 E5 05 A1 |  if_e	add	objptr, ##62388
0b88c     F2 1E 02 AB |  if_e	rdlong	local01, objptr
0b890     A7 1E 62 AC |  if_e	wrlong	local01, fp
0b894     79 00 00 AF 
0b898     B4 E5 85 A1 |  if_e	sub	objptr, ##62388
0b89c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0b8a0     79 00 00 5F 
0b8a4     B4 E5 05 51 |  if_ne	add	objptr, ##62388
0b8a8     F2 1E 62 5C |  if_ne	wrlong	local01, objptr
0b8ac     79 00 00 5F 
0b8b0     B4 E5 85 51 |  if_ne	sub	objptr, ##62388
0b8b4                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0b8b4     09 12 06 F6 | 	mov	arg01, #9
0b8b8     80 82 B1 FD | 	call	#__system__close
0b8bc     09 1E 06 F6 | 	mov	local01, #9
0b8c0     72 00 00 FF 
0b8c4     98 E4 05 F1 | 	add	objptr, ##58520
0b8c8     F2 12 02 FB | 	rdlong	arg01, objptr
0b8cc     72 00 00 FF 
0b8d0     98 E4 85 F1 | 	sub	objptr, ##58520
0b8d4     73 01 00 FF 
0b8d8     38 15 06 F6 | 	mov	arg02, ##@LR__5123
0b8dc     F0 32 B1 FD | 	call	#__system___string_concat
0b8e0     FD 12 02 F6 | 	mov	arg01, result1
0b8e4     A7 14 02 FB | 	rdlong	arg02, fp
0b8e8     E4 32 B1 FD | 	call	#__system___string_concat
0b8ec     FD 14 02 F6 | 	mov	arg02, result1
0b8f0     0F 13 02 F6 | 	mov	arg01, local01
0b8f4     00 16 06 F6 | 	mov	arg03, #0
0b8f8     7C 3E B1 FD | 	call	#__system___basic_open_string
0b8fc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0b900     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b904     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0b908     10 4E 05 F1 | 	add	fp, #16
0b90c     A7 FA 61 FC | 	wrlong	result1, fp
0b910                 | '   r=geterr() 
0b910                 | '   if r then 
0b910     10 4E 85 F1 | 	sub	fp, #16
0b914     48 01 90 AD |  if_e	jmp	#LR__0984
0b918                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
0b918     09 12 06 F6 | 	mov	arg01, #9
0b91c     1C 82 B1 FD | 	call	#__system__close
0b920     09 1E 06 F6 | 	mov	local01, #9
0b924     72 00 00 FF 
0b928     98 E4 05 F1 | 	add	objptr, ##58520
0b92c     F2 12 02 FB | 	rdlong	arg01, objptr
0b930     72 00 00 FF 
0b934     98 E4 85 F1 | 	sub	objptr, ##58520
0b938     73 01 00 FF 
0b93c     3A 15 06 F6 | 	mov	arg02, ##@LR__5124
0b940     8C 32 B1 FD | 	call	#__system___string_concat
0b944     FD 12 02 F6 | 	mov	arg01, result1
0b948     A7 14 02 FB | 	rdlong	arg02, fp
0b94c     80 32 B1 FD | 	call	#__system___string_concat
0b950     FD 12 02 F6 | 	mov	arg01, result1
0b954     73 01 00 FF 
0b958     3C 15 06 F6 | 	mov	arg02, ##@LR__5125
0b95c     70 32 B1 FD | 	call	#__system___string_concat
0b960     FD 14 02 F6 | 	mov	arg02, result1
0b964     0F 13 02 F6 | 	mov	arg01, local01
0b968     00 16 06 F6 | 	mov	arg03, #0
0b96c     08 3E B1 FD | 	call	#__system___basic_open_string
0b970     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0b974     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b978     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0b97c     10 4E 05 F1 | 	add	fp, #16
0b980     A7 FA 61 FC | 	wrlong	result1, fp
0b984                 | '     r=geterr() 
0b984                 | '     if r then 
0b984     10 4E 85 F1 | 	sub	fp, #16
0b988     A0 00 90 AD |  if_e	jmp	#LR__0983
0b98c                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
0b98c     00 12 06 F6 | 	mov	arg01, #0
0b990     78 8B B1 FD | 	call	#__system___getiolock_0484
0b994     FD 12 02 F6 | 	mov	arg01, result1
0b998     D8 31 B1 FD | 	call	#__system___lockmem
0b99c     73 01 00 FF 
0b9a0     41 15 06 F6 | 	mov	arg02, ##@LR__5126
0b9a4     00 12 06 F6 | 	mov	arg01, #0
0b9a8     00 16 06 F6 | 	mov	arg03, #0
0b9ac     CC 3E B1 FD | 	call	#__system___basic_print_string
0b9b0     10 4E 05 F1 | 	add	fp, #16
0b9b4     A7 14 02 FB | 	rdlong	arg02, fp
0b9b8     10 4E 85 F1 | 	sub	fp, #16
0b9bc     00 12 06 F6 | 	mov	arg01, #0
0b9c0     00 16 06 F6 | 	mov	arg03, #0
0b9c4     0A 18 06 F6 | 	mov	arg04, #10
0b9c8     F4 3E B1 FD | 	call	#__system___basic_print_integer
0b9cc     73 01 00 FF 
0b9d0     4F 15 06 F6 | 	mov	arg02, ##@LR__5127
0b9d4     00 12 06 F6 | 	mov	arg01, #0
0b9d8     00 16 06 F6 | 	mov	arg03, #0
0b9dc     9C 3E B1 FD | 	call	#__system___basic_print_string
0b9e0     00 1E 06 F6 | 	mov	local01, #0
0b9e4     10 4E 05 F1 | 	add	fp, #16
0b9e8     A7 12 02 FB | 	rdlong	arg01, fp
0b9ec     10 4E 85 F1 | 	sub	fp, #16
0b9f0     14 58 B1 FD | 	call	#__system___strerror
0b9f4     FD 14 02 F6 | 	mov	arg02, result1
0b9f8     0F 13 02 F6 | 	mov	arg01, local01
0b9fc     00 16 06 F6 | 	mov	arg03, #0
0ba00     78 3E B1 FD | 	call	#__system___basic_print_string
0ba04     00 12 06 F6 | 	mov	arg01, #0
0ba08     0A 14 06 F6 | 	mov	arg02, #10
0ba0c     00 16 06 F6 | 	mov	arg03, #0
0ba10     10 3E B1 FD | 	call	#__system___basic_print_char
0ba14     00 12 06 F6 | 	mov	arg01, #0
0ba18     F0 8A B1 FD | 	call	#__system___getiolock_0484
0ba1c     FD 00 68 FC | 	wrlong	#0, result1
0ba20     09 12 06 F6 | 	mov	arg01, #9
0ba24     14 81 B1 FD | 	call	#__system__close
0ba28     F8 02 90 FD | 	jmp	#LR__0992
0ba2c                 | LR__0983
0ba2c     79 00 00 FF 
0ba30     B4 E5 05 F1 | 	add	objptr, ##62388
0ba34     F2 12 02 FB | 	rdlong	arg01, objptr
0ba38     79 00 00 FF 
0ba3c     B4 E5 85 F1 | 	sub	objptr, ##62388
0ba40     73 01 00 FF 
0ba44     52 15 06 F6 | 	mov	arg02, ##@LR__5128
0ba48     84 31 B1 FD | 	call	#__system___string_concat
0ba4c     79 00 00 FF 
0ba50     B4 E5 05 F1 | 	add	objptr, ##62388
0ba54     F2 FA 61 FC | 	wrlong	result1, objptr
0ba58     79 00 00 FF 
0ba5c     B4 E5 85 F1 | 	sub	objptr, ##62388
0ba60                 | LR__0984
0ba60     0C 4E 05 F1 | 	add	fp, #12
0ba64     A7 0A 68 FC | 	wrlong	#5, fp
0ba68                 | '   i=5
0ba68                 | '   get #9,1,header,1   
0ba68     10 4E 05 F1 | 	add	fp, #16
0ba6c     A7 16 02 F6 | 	mov	arg03, fp
0ba70     1C 4E 85 F1 | 	sub	fp, #28
0ba74     09 12 06 F6 | 	mov	arg01, #9
0ba78     01 14 06 F6 | 	mov	arg02, #1
0ba7c     01 18 06 F6 | 	mov	arg04, #1
0ba80     04 1A 06 F6 | 	mov	arg05, #4
0ba84     04 3F B1 FD | 	call	#__system___basic_get
0ba88                 | '   
0ba88                 | '   if header<>$0D616272 then 
0ba88     1C 4E 05 F1 | 	add	fp, #28
0ba8c     A7 1E 02 FB | 	rdlong	local01, fp
0ba90     1C 4E 85 F1 | 	sub	fp, #28
0ba94     B1 B0 06 FF 
0ba98     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
0ba9c     00 01 90 AD |  if_e	jmp	#LR__0987
0baa0                 | '     close #9: open currentdir$+"/"+loadname for input as #9
0baa0     09 12 06 F6 | 	mov	arg01, #9
0baa4     94 80 B1 FD | 	call	#__system__close
0baa8     09 1E 06 F6 | 	mov	local01, #9
0baac     72 00 00 FF 
0bab0     98 E4 05 F1 | 	add	objptr, ##58520
0bab4     F2 12 02 FB | 	rdlong	arg01, objptr
0bab8     72 00 00 FF 
0babc     98 E4 85 F1 | 	sub	objptr, ##58520
0bac0     73 01 00 FF 
0bac4     57 15 06 F6 | 	mov	arg02, ##@LR__5129
0bac8     04 31 B1 FD | 	call	#__system___string_concat
0bacc     FD 12 02 F6 | 	mov	arg01, result1
0bad0     79 00 00 FF 
0bad4     B4 E5 05 F1 | 	add	objptr, ##62388
0bad8     F2 14 02 FB | 	rdlong	arg02, objptr
0badc     79 00 00 FF 
0bae0     B4 E5 85 F1 | 	sub	objptr, ##62388
0bae4     E8 30 B1 FD | 	call	#__system___string_concat
0bae8     FD 14 02 F6 | 	mov	arg02, result1
0baec     0F 13 02 F6 | 	mov	arg01, local01
0baf0     00 16 06 F6 | 	mov	arg03, #0
0baf4     80 3C B1 FD | 	call	#__system___basic_open_string
0baf8                 | '     do
0baf8                 | LR__0985
0baf8     09 12 06 F6 | 	mov	arg01, #9
0bafc     80 32 B1 FD | 	call	#__system___basic_read_line
0bb00     57 00 00 FF 
0bb04     1C E4 05 F1 | 	add	objptr, ##44572
0bb08     F2 FA 61 FC | 	wrlong	result1, objptr
0bb0c                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
0bb0c     57 00 00 FF 
0bb10     1C E4 85 F1 | 	sub	objptr, ##44572
0bb14     FD 12 02 F6 | 	mov	arg01, result1
0bb18     01 14 06 F6 | 	mov	arg02, #1
0bb1c     9C 50 B1 FD | 	call	#__system__Left_S
0bb20     FD 12 02 F6 | 	mov	arg01, result1
0bb24     73 01 00 FF 
0bb28     59 15 06 F6 | 	mov	arg02, ##@LR__5130
0bb2c     6C 30 B1 FD | 	call	#__system___string_cmp
0bb30     00 FA 55 F2 | 	cmps	result1, #0 wc
0bb34     34 00 90 CD |  if_b	jmp	#LR__0986
0bb38     57 00 00 FF 
0bb3c     1C E4 05 F1 | 	add	objptr, ##44572
0bb40     F2 12 02 FB | 	rdlong	arg01, objptr
0bb44     57 00 00 FF 
0bb48     1C E4 85 F1 | 	sub	objptr, ##44572
0bb4c     01 14 06 F6 | 	mov	arg02, #1
0bb50     68 50 B1 FD | 	call	#__system__Left_S
0bb54     FD 12 02 F6 | 	mov	arg01, result1
0bb58     73 01 00 FF 
0bb5c     5B 15 06 F6 | 	mov	arg02, ##@LR__5131
0bb60     38 30 B1 FD | 	call	#__system___string_cmp
0bb64     01 FA 55 F2 | 	cmps	result1, #1 wc
0bb68     B0 4E BF CD |  if_b	call	#_interpret
0bb6c                 | LR__0986
0bb6c     57 00 00 FF 
0bb70     1C E4 05 F1 | 	add	objptr, ##44572
0bb74     F2 12 02 FB | 	rdlong	arg01, objptr
0bb78     57 00 00 FF 
0bb7c     1C E4 85 F1 | 	sub	objptr, ##44572
0bb80     73 01 00 FF 
0bb84     5D 15 06 F6 | 	mov	arg02, ##@LR__5132
0bb88     10 30 B1 FD | 	call	#__system___string_cmp
0bb8c     00 FA 0D F2 | 	cmp	result1, #0 wz
0bb90     64 FF 9F 5D |  if_ne	jmp	#LR__0985
0bb94                 | '     close #9
0bb94     09 12 06 F6 | 	mov	arg01, #9
0bb98     A0 7F B1 FD | 	call	#__system__close
0bb9c     F4 00 90 FD | 	jmp	#LR__0991
0bba0                 | LR__0987
0bba0                 | '   'printerror(26) : close #9 : return
0bba0                 | '     do
0bba0                 | LR__0988
0bba0                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
0bba0     0C 4E 05 F1 | 	add	fp, #12
0bba4     A7 14 02 FB | 	rdlong	arg02, fp
0bba8     14 4E 05 F1 | 	add	fp, #20
0bbac     A7 16 02 F6 | 	mov	arg03, fp
0bbb0     20 4E 85 F1 | 	sub	fp, #32
0bbb4     09 12 06 F6 | 	mov	arg01, #9
0bbb8     01 18 06 F6 | 	mov	arg04, #1
0bbbc     04 1A 06 F6 | 	mov	arg05, #4
0bbc0     C8 3D B1 FD | 	call	#__system___basic_get
0bbc4     14 4E 05 F1 | 	add	fp, #20
0bbc8     A7 FA 61 FC | 	wrlong	result1, fp
0bbcc     08 4E 85 F1 | 	sub	fp, #8
0bbd0     A7 1E 02 FB | 	rdlong	local01, fp
0bbd4     04 1E 06 F1 | 	add	local01, #4
0bbd8     A7 1E 62 FC | 	wrlong	local01, fp
0bbdc     14 4E 05 F1 | 	add	fp, #20
0bbe0     A7 1E 02 FB | 	rdlong	local01, fp
0bbe4     04 4E 05 F1 | 	add	fp, #4
0bbe8     A7 1E 02 F1 | 	add	local01, fp
0bbec     0F 01 48 FC | 	wrbyte	#0, local01
0bbf0                 | '       if amount=1 then  
0bbf0     10 4E 85 F1 | 	sub	fp, #16
0bbf4     A7 1E 02 FB | 	rdlong	local01, fp
0bbf8     14 4E 85 F1 | 	sub	fp, #20
0bbfc     01 1E 0E F2 | 	cmp	local01, #1 wz
0bc00     68 00 90 5D |  if_ne	jmp	#LR__0989
0bc04                 | '         get #9,i,line2(0),linelength : i+=linelength
0bc04     0C 4E 05 F1 | 	add	fp, #12
0bc08     A7 14 02 FB | 	rdlong	arg02, fp
0bc0c     18 4E 05 F1 | 	add	fp, #24
0bc10     A7 16 02 F6 | 	mov	arg03, fp
0bc14     04 4E 85 F1 | 	sub	fp, #4
0bc18     A7 18 02 FB | 	rdlong	arg04, fp
0bc1c     20 4E 85 F1 | 	sub	fp, #32
0bc20     09 12 06 F6 | 	mov	arg01, #9
0bc24     01 1A 06 F6 | 	mov	arg05, #1
0bc28     60 3D B1 FD | 	call	#__system___basic_get
0bc2c     0C 4E 05 F1 | 	add	fp, #12
0bc30     A7 1E 02 FB | 	rdlong	local01, fp
0bc34     14 4E 05 F1 | 	add	fp, #20
0bc38     A7 1A 02 FB | 	rdlong	arg05, fp
0bc3c     0D 1F 02 F1 | 	add	local01, arg05
0bc40     14 4E 85 F1 | 	sub	fp, #20
0bc44     A7 1E 62 FC | 	wrlong	local01, fp
0bc48     98 4E 05 F1 | 	add	fp, #152
0bc4c     A7 1E 02 FB | 	rdlong	local01, fp
0bc50     A4 4E 85 F1 | 	sub	fp, #164
0bc54     57 00 00 FF 
0bc58     1C E4 05 F1 | 	add	objptr, ##44572
0bc5c     F2 1E 62 FC | 	wrlong	local01, objptr
0bc60     57 00 00 FF 
0bc64     1C E4 85 F1 | 	sub	objptr, ##44572
0bc68     B0 4D BF FD | 	call	#_interpret
0bc6c                 | LR__0989
0bc6c     14 4E 05 F1 | 	add	fp, #20
0bc70     A7 1E 02 FB | 	rdlong	local01, fp
0bc74     14 4E 85 F1 | 	sub	fp, #20
0bc78     01 1E 56 F2 | 	cmps	local01, #1 wc
0bc7c     20 FF 9F 3D |  if_ae	jmp	#LR__0988
0bc80                 | '     close #9 
0bc80     09 12 06 F6 | 	mov	arg01, #9
0bc84     B4 7E B1 FD | 	call	#__system__close
0bc88     08 00 90 FD | 	jmp	#LR__0991
0bc8c                 | LR__0990
0bc8c     1E 12 06 F6 | 	mov	arg01, #30
0bc90     64 EA B0 FD | 	call	#_printerror
0bc94                 | LR__0991
0bc94                 | '   print "Loaded ";currentdir$+"/"+loadname
0bc94     00 12 06 F6 | 	mov	arg01, #0
0bc98     70 88 B1 FD | 	call	#__system___getiolock_0484
0bc9c     FD 12 02 F6 | 	mov	arg01, result1
0bca0     D0 2E B1 FD | 	call	#__system___lockmem
0bca4     73 01 00 FF 
0bca8     5E 15 06 F6 | 	mov	arg02, ##@LR__5133
0bcac     00 12 06 F6 | 	mov	arg01, #0
0bcb0     00 16 06 F6 | 	mov	arg03, #0
0bcb4     C4 3B B1 FD | 	call	#__system___basic_print_string
0bcb8     00 1E 06 F6 | 	mov	local01, #0
0bcbc     72 00 00 FF 
0bcc0     98 E4 05 F1 | 	add	objptr, ##58520
0bcc4     F2 12 02 FB | 	rdlong	arg01, objptr
0bcc8     72 00 00 FF 
0bccc     98 E4 85 F1 | 	sub	objptr, ##58520
0bcd0     73 01 00 FF 
0bcd4     66 15 06 F6 | 	mov	arg02, ##@LR__5134
0bcd8     F4 2E B1 FD | 	call	#__system___string_concat
0bcdc     FD 12 02 F6 | 	mov	arg01, result1
0bce0     79 00 00 FF 
0bce4     B4 E5 05 F1 | 	add	objptr, ##62388
0bce8     F2 14 02 FB | 	rdlong	arg02, objptr
0bcec     79 00 00 FF 
0bcf0     B4 E5 85 F1 | 	sub	objptr, ##62388
0bcf4     D8 2E B1 FD | 	call	#__system___string_concat
0bcf8     FD 14 02 F6 | 	mov	arg02, result1
0bcfc     0F 13 02 F6 | 	mov	arg01, local01
0bd00     00 16 06 F6 | 	mov	arg03, #0
0bd04     74 3B B1 FD | 	call	#__system___basic_print_string
0bd08     00 12 06 F6 | 	mov	arg01, #0
0bd0c     0A 14 06 F6 | 	mov	arg02, #10
0bd10     00 16 06 F6 | 	mov	arg03, #0
0bd14     0C 3B B1 FD | 	call	#__system___basic_print_char
0bd18     00 12 06 F6 | 	mov	arg01, #0
0bd1c     EC 87 B1 FD | 	call	#__system___getiolock_0484
0bd20     FD 00 68 FC | 	wrlong	#0, result1
0bd24                 | LR__0992
0bd24     A7 F0 03 F6 | 	mov	ptra, fp
0bd28     B2 00 A0 FD | 	call	#popregs_
0bd2c                 | _do_load_ret
0bd2c     2D 00 64 FD | 	ret
0bd30                 | 
0bd30                 | ' 
0bd30                 | ' sub do_end
0bd30                 | _do_end
0bd30     6A 00 00 FF 
0bd34     7C E4 05 F1 | 	add	objptr, ##54396
0bd38     F2 00 02 FB | 	rdlong	_var01, objptr
0bd3c     01 00 86 F1 | 	sub	_var01, #1
0bd40     04 E4 05 F1 | 	add	objptr, #4
0bd44     F2 00 62 FC | 	wrlong	_var01, objptr
0bd48     0E 00 00 FF 
0bd4c     3C E4 05 F1 | 	add	objptr, ##7228
0bd50     FF FF BF FF 
0bd54     F2 FE 6B FC | 	wrlong	##2147483647, objptr
0bd58     78 00 00 FF 
0bd5c     BC E4 85 F1 | 	sub	objptr, ##61628
0bd60                 | _do_end_ret
0bd60     2D 00 64 FD | 	ret
0bd64                 | 
0bd64                 | ' 
0bd64                 | ' '----------------- Run the program 
0bd64                 | ' 
0bd64                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0bd64                 | ' 
0bd64                 | ' sub do_run
0bd64                 | _do_run
0bd64     01 4A 05 F6 | 	mov	COUNT_, #1
0bd68     A8 00 A0 FD | 	call	#pushregs_
0bd6c     6A 00 00 FF 
0bd70     80 E4 05 F1 | 	add	objptr, ##54400
0bd74     F2 1C 02 FB | 	rdlong	arg06, objptr
0bd78     0E 19 02 F6 | 	mov	arg04, arg06
0bd7c     01 18 66 F0 | 	shl	arg04, #1
0bd80     0E 19 02 F1 | 	add	arg04, arg06
0bd84     02 18 66 F0 | 	shl	arg04, #2
0bd88     03 00 00 FF 
0bd8c     04 E4 85 F1 | 	sub	objptr, ##1540
0bd90     F2 18 02 F1 | 	add	arg04, objptr
0bd94     0C 1B 02 FB | 	rdlong	arg05, arg04
0bd98                 | ' numpar=compiledline(lineptr_e).result.uresult
0bd98                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
0bd98     01 1A 0E F2 | 	cmp	arg05, #1 wz
0bd9c     67 00 00 FF 
0bda0     7C E4 85 F1 | 	sub	objptr, ##52860
0bda4     D4 F9 BF AD |  if_e	call	#_do_load
0bda8     6A 00 00 FF 
0bdac     84 E4 05 F1 | 	add	objptr, ##54404
0bdb0     F2 1C 02 FB | 	rdlong	arg06, objptr
0bdb4     0E 00 00 FF 
0bdb8     38 E4 05 F1 | 	add	objptr, ##7224
0bdbc     F2 1C 62 FC | 	wrlong	arg06, objptr
0bdc0     04 E4 05 F1 | 	add	objptr, #4
0bdc4     F2 00 68 FC | 	wrlong	#0, objptr
0bdc8     04 E4 05 F1 | 	add	objptr, #4
0bdcc     FF FF FF FF 
0bdd0     F2 FE 6B FC | 	wrlong	##-1, objptr
0bdd4                 | ' if inrun>0 then 
0bdd4     04 E4 05 F1 | 	add	objptr, #4
0bdd8     F2 1C 02 FB | 	rdlong	arg06, objptr
0bddc     78 00 00 FF 
0bde0     C8 E4 85 F1 | 	sub	objptr, ##61640
0bde4     01 1C 16 F2 | 	cmp	arg06, #1 wc
0bde8     30 00 90 CD |  if_b	jmp	#LR__1000
0bdec     78 00 00 FF 
0bdf0     CC E4 05 F1 | 	add	objptr, ##61644
0bdf4     F2 12 02 F6 | 	mov	arg01, objptr
0bdf8     10 E4 85 F1 | 	sub	objptr, #16
0bdfc     F2 14 02 FB | 	rdlong	arg02, objptr
0be00     18 16 06 F6 | 	mov	arg03, #24
0be04     6C 00 00 FF 
0be08     F0 E5 85 F1 | 	sub	objptr, ##55792
0be0c     40 21 B1 FD | 	call	#_psram_spin2_read1
0be10     0B 00 00 FF 
0be14     CC E4 85 F1 | 	sub	objptr, ##5836
0be18                 | '   psram.read1(varptr(runheader),runptr,24)  
0be18                 | '   return
0be18     E4 02 90 FD | 	jmp	#LR__1007
0be1c                 | LR__1000
0be1c     78 00 00 FF 
0be20     C8 E4 05 F1 | 	add	objptr, ##61640
0be24     F2 02 68 FC | 	wrlong	#1, objptr
0be28     04 E4 05 F1 | 	add	objptr, #4
0be2c     F2 12 02 F6 | 	mov	arg01, objptr
0be30     10 E4 85 F1 | 	sub	objptr, #16
0be34     F2 14 02 FB | 	rdlong	arg02, objptr
0be38     18 16 06 F6 | 	mov	arg03, #24
0be3c     6C 00 00 FF 
0be40     F0 E5 85 F1 | 	sub	objptr, ##55792
0be44     08 21 B1 FD | 	call	#_psram_spin2_read1
0be48                 | ' inrun=1
0be48                 | ' psram.read1(varptr(runheader),runptr,24) 
0be48                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0be48     6D 00 00 FF 
0be4c     00 E4 05 F1 | 	add	objptr, ##55808
0be50     F2 1E 02 FB | 	rdlong	local01, objptr
0be54     78 00 00 FF 
0be58     CC E4 85 F1 | 	sub	objptr, ##61644
0be5c     FF FF 7F FF 
0be60     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0be64     78 00 00 AF 
0be68     C8 E4 05 A1 |  if_e	add	objptr, ##61640
0be6c     F2 00 68 AC |  if_e	wrlong	#0, objptr
0be70     78 00 00 AF 
0be74     C8 E4 85 A1 |  if_e	sub	objptr, ##61640
0be78     84 02 90 AD |  if_e	jmp	#LR__1007
0be7c                 | ' do 
0be7c                 | LR__1001
0be7c                 | '   if runptr<>oldrunptr then
0be7c     78 00 00 FF 
0be80     BC E4 05 F1 | 	add	objptr, ##61628
0be84     F2 1E 02 FB | 	rdlong	local01, objptr
0be88     08 E4 05 F1 | 	add	objptr, #8
0be8c     F2 1C 02 FB | 	rdlong	arg06, objptr
0be90     78 00 00 FF 
0be94     C4 E4 85 F1 | 	sub	objptr, ##61636
0be98     0E 1F 0A F2 | 	cmp	local01, arg06 wz
0be9c     CC 00 90 AD |  if_e	jmp	#LR__1002
0bea0     78 00 00 FF 
0bea4     CC E4 05 F1 | 	add	objptr, ##61644
0bea8     F2 12 02 F6 | 	mov	arg01, objptr
0beac     10 E4 85 F1 | 	sub	objptr, #16
0beb0     F2 14 02 FB | 	rdlong	arg02, objptr
0beb4     18 16 06 F6 | 	mov	arg03, #24
0beb8     6C 00 00 FF 
0bebc     F0 E5 85 F1 | 	sub	objptr, ##55792
0bec0     8C 20 B1 FD | 	call	#_psram_spin2_read1
0bec4     5B 00 00 FF 
0bec8     B0 E5 05 F1 | 	add	objptr, ##47024
0becc     F2 12 02 F6 | 	mov	arg01, objptr
0bed0     11 00 00 FF 
0bed4     40 E4 05 F1 | 	add	objptr, ##8768
0bed8     F2 14 02 FB | 	rdlong	arg02, objptr
0bedc     13 00 00 FF 
0bee0     58 E4 85 F1 | 	sub	objptr, ##9816
0bee4     F2 1E 02 FB | 	rdlong	local01, objptr
0bee8     01 1E 66 F0 | 	shl	local01, #1
0beec     0F 15 02 F1 | 	add	arg02, local01
0bef0     13 00 00 FF 
0bef4     70 E4 05 F1 | 	add	objptr, ##9840
0bef8     F2 16 02 FB | 	rdlong	arg03, objptr
0befc     18 E4 85 F1 | 	sub	objptr, #24
0bf00     F2 1E 02 FB | 	rdlong	local01, objptr
0bf04     0F 17 82 F1 | 	sub	arg03, local01
0bf08     6C 00 00 FF 
0bf0c     F0 E5 85 F1 | 	sub	objptr, ##55792
0bf10     3C 20 B1 FD | 	call	#_psram_spin2_read1
0bf14     6D 00 00 FF 
0bf18     08 E4 05 F1 | 	add	objptr, ##55816
0bf1c     F2 1E 02 FB | 	rdlong	local01, objptr
0bf20     18 E4 85 F1 | 	sub	objptr, #24
0bf24     F2 16 02 FB | 	rdlong	arg03, objptr
0bf28     0B 1F 82 F1 | 	sub	local01, arg03
0bf2c     13 00 00 FF 
0bf30     58 E4 85 F1 | 	sub	objptr, ##9816
0bf34     F2 16 02 FB | 	rdlong	arg03, objptr
0bf38     0B 1F 12 FD | 	qdiv	local01, arg03
0bf3c     05 00 00 FF 
0bf40     18 E4 05 F1 | 	add	objptr, ##2584
0bf44     18 1E 62 FD | 	getqx	local01
0bf48     03 1E 86 F1 | 	sub	local01, #3
0bf4c     F2 1E 62 FC | 	wrlong	local01, objptr
0bf50     0E 00 00 FF 
0bf54     40 E4 05 F1 | 	add	objptr, ##7232
0bf58     F2 1E 02 FB | 	rdlong	local01, objptr
0bf5c     08 E4 05 F1 | 	add	objptr, #8
0bf60     F2 1E 62 FC | 	wrlong	local01, objptr
0bf64     78 00 00 FF 
0bf68     C4 E4 85 F1 | 	sub	objptr, ##61636
0bf6c                 | LR__1002
0bf6c     78 00 00 FF 
0bf70     E0 E4 05 F1 | 	add	objptr, ##61664
0bf74     F2 1E 02 FB | 	rdlong	local01, objptr
0bf78     24 E4 85 F1 | 	sub	objptr, #36
0bf7c     F2 1E 62 FC | 	wrlong	local01, objptr
0bf80     04 E4 05 F1 | 	add	objptr, #4
0bf84     F2 12 02 FB | 	rdlong	arg01, objptr
0bf88     78 00 00 FF 
0bf8c     C0 E4 85 F1 | 	sub	objptr, ##61632
0bf90     C8 E7 BF FD | 	call	#_execute_line
0bf94     78 00 00 FF 
0bf98     C0 E4 05 F1 | 	add	objptr, ##61632
0bf9c     F2 FA 61 FC | 	wrlong	result1, objptr
0bfa0     04 E4 85 F1 | 	sub	objptr, #4
0bfa4     F2 1E 02 FB | 	rdlong	local01, objptr
0bfa8     78 00 00 FF 
0bfac     BC E4 85 F1 | 	sub	objptr, ##61628
0bfb0     FF FF 3F FF 
0bfb4     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0bfb8     30 00 90 AD |  if_e	jmp	#LR__1004
0bfbc     E0 12 06 F6 | 	mov	arg01, #224
0bfc0     1C 23 B1 FD | 	call	#_usbnew_spin2_keystate
0bfc4     00 FA 0D F2 | 	cmp	result1, #0 wz
0bfc8     10 00 90 5D |  if_ne	jmp	#LR__1003
0bfcc     E4 12 06 F6 | 	mov	arg01, #228
0bfd0     0C 23 B1 FD | 	call	#_usbnew_spin2_keystate
0bfd4     00 FA 0D F2 | 	cmp	result1, #0 wz
0bfd8     A0 FE 9F AD |  if_e	jmp	#LR__1001
0bfdc                 | LR__1003
0bfdc     06 12 06 F6 | 	mov	arg01, #6
0bfe0     FC 22 B1 FD | 	call	#_usbnew_spin2_keystate
0bfe4     00 FA 0D F2 | 	cmp	result1, #0 wz
0bfe8     90 FE 9F AD |  if_e	jmp	#LR__1001
0bfec                 | LR__1004
0bfec                 | '   ''do whatever kbm.peek_latest_key()=$106 
0bfec                 | ' if runptr<>$7FFF_FFFF then 
0bfec     78 00 00 FF 
0bff0     BC E4 05 F1 | 	add	objptr, ##61628
0bff4     F2 1E 02 FB | 	rdlong	local01, objptr
0bff8     78 00 00 FF 
0bffc     BC E4 85 F1 | 	sub	objptr, ##61628
0c000     FF FF 3F FF 
0c004     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0c008     C0 00 90 AD |  if_e	jmp	#LR__1006
0c00c                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)  : kbm.get_key ' eat ctrl-c
0c00c     78 00 00 FF 
0c010     F0 E4 05 F1 | 	add	objptr, ##61680
0c014     F2 1E 02 FB | 	rdlong	local01, objptr
0c018     78 00 00 FF 
0c01c     F0 E4 85 F1 | 	sub	objptr, ##61680
0c020     01 1E 0E F2 | 	cmp	local01, #1 wz
0c024     40 00 90 5D |  if_ne	jmp	#LR__1005
0c028     79 00 00 FF 
0c02c     94 E5 05 F1 | 	add	objptr, ##62356
0c030     F2 14 02 FB | 	rdlong	arg02, objptr
0c034     04 E4 85 F1 | 	sub	objptr, #4
0c038     F2 1A 02 FB | 	rdlong	arg05, objptr
0c03c     07 12 06 F6 | 	mov	arg01, #7
0c040     56 00 00 FF 
0c044     44 16 06 F6 | 	mov	arg03, ##44100
0c048     0C 18 C6 F9 | 	decod	arg04, #12
0c04c     01 1C 66 F6 | 	neg	arg06, #1
0c050     6E 00 00 FF 
0c054     C4 E4 85 F1 | 	sub	objptr, ##56516
0c058     A8 26 B1 FD | 	call	#_audio096_spin2_play
0c05c     0B 00 00 FF 
0c060     CC E4 85 F1 | 	sub	objptr, ##5836
0c064     14 23 B1 FD | 	call	#_usbnew_spin2_get_key
0c068                 | LR__1005
0c068                 | '   print "Stopped at line ";runheader(0)
0c068     00 12 06 F6 | 	mov	arg01, #0
0c06c     9C 84 B1 FD | 	call	#__system___getiolock_0484
0c070     FD 12 02 F6 | 	mov	arg01, result1
0c074     FC 2A B1 FD | 	call	#__system___lockmem
0c078     73 01 00 FF 
0c07c     68 15 06 F6 | 	mov	arg02, ##@LR__5135
0c080     00 12 06 F6 | 	mov	arg01, #0
0c084     00 16 06 F6 | 	mov	arg03, #0
0c088     F0 37 B1 FD | 	call	#__system___basic_print_string
0c08c     78 00 00 FF 
0c090     CC E4 05 F1 | 	add	objptr, ##61644
0c094     F2 14 02 FB | 	rdlong	arg02, objptr
0c098     78 00 00 FF 
0c09c     CC E4 85 F1 | 	sub	objptr, ##61644
0c0a0     00 12 06 F6 | 	mov	arg01, #0
0c0a4     00 16 06 F6 | 	mov	arg03, #0
0c0a8     0A 18 06 F6 | 	mov	arg04, #10
0c0ac     50 38 B1 FD | 	call	#__system___basic_print_unsigned
0c0b0     00 12 06 F6 | 	mov	arg01, #0
0c0b4     0A 14 06 F6 | 	mov	arg02, #10
0c0b8     00 16 06 F6 | 	mov	arg03, #0
0c0bc     64 37 B1 FD | 	call	#__system___basic_print_char
0c0c0     00 12 06 F6 | 	mov	arg01, #0
0c0c4     44 84 B1 FD | 	call	#__system___getiolock_0484
0c0c8     FD 00 68 FC | 	wrlong	#0, result1
0c0cc                 | LR__1006
0c0cc     78 00 00 FF 
0c0d0     C8 E4 05 F1 | 	add	objptr, ##61640
0c0d4     F2 00 68 FC | 	wrlong	#0, objptr
0c0d8     78 00 00 FF 
0c0dc     C8 E4 85 F1 | 	sub	objptr, ##61640
0c0e0     11 12 06 F6 | 	mov	arg01, #17
0c0e4     08 14 06 F6 | 	mov	arg02, #8
0c0e8     10 16 06 F6 | 	mov	arg03, #16
0c0ec     D8 06 B1 FD | 	call	#_hg010b_spin2_setspritesize
0c0f0     10 12 06 F6 | 	mov	arg01, #16
0c0f4     20 14 06 F6 | 	mov	arg02, #32
0c0f8     20 16 06 F6 | 	mov	arg03, #32
0c0fc     C8 06 B1 FD | 	call	#_hg010b_spin2_setspritesize
0c100                 | LR__1007
0c100     A7 F0 03 F6 | 	mov	ptra, fp
0c104     B2 00 A0 FD | 	call	#popregs_
0c108                 | _do_run_ret
0c108     2D 00 64 FD | 	ret
0c10c                 | 
0c10c                 | ' 
0c10c                 | ' 
0c10c                 | ' 
0c10c                 | ' 
0c10c                 | ' 
0c10c                 | ' 
0c10c                 | ' 
0c10c                 | ' sub do_defenv
0c10c                 | _do_defenv
0c10c     09 4A 05 F6 | 	mov	COUNT_, #9
0c110     A8 00 A0 FD | 	call	#pushregs_
0c114     B4 F0 07 F1 | 	add	ptra, #180
0c118     6A 00 00 FF 
0c11c     80 E4 05 F1 | 	add	objptr, ##54400
0c120     F2 1E 02 FB | 	rdlong	local01, objptr
0c124     0F 1B 02 F6 | 	mov	arg05, local01
0c128     01 1A 66 F0 | 	shl	arg05, #1
0c12c     0F 1B 02 F1 | 	add	arg05, local01
0c130     02 1A 66 F0 | 	shl	arg05, #2
0c134     03 00 00 FF 
0c138     04 E4 85 F1 | 	sub	objptr, ##1540
0c13c     F2 20 02 F6 | 	mov	local02, objptr
0c140     F2 1A 02 F1 | 	add	arg05, objptr
0c144     0D 1B 02 FB | 	rdlong	arg05, arg05
0c148     10 4E 05 F1 | 	add	fp, #16
0c14c     A7 1A 62 FC | 	wrlong	arg05, fp
0c150                 | ' 
0c150                 | ' numpar=compiledline(lineptr_e).result.uresult
0c150                 | ' 
0c150                 | ' 
0c150                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0c150                 | ' 'TODO for 2.0: ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0c150                 | ' ' defsnd channel, a,d,s,r - defines ADSR attack time, decay time, sus level, release time. Sus point has to be returned - how?
0c150                 | ' 
0c150                 | ' 
0c150                 | ' if numpar<>2 andalso numpar<>5 andalso numpar<>9 then return ' and print error
0c150     10 4E 85 F1 | 	sub	fp, #16
0c154     02 1A 0E F2 | 	cmp	arg05, #2 wz
0c158     67 00 00 FF 
0c15c     7C E4 85 F1 | 	sub	objptr, ##52860
0c160     10 4E 05 51 |  if_ne	add	fp, #16
0c164     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c168     10 4E 85 51 |  if_ne	sub	fp, #16
0c16c     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0c170     10 4E 05 51 |  if_ne	add	fp, #16
0c174     0F 21 02 56 |  if_ne	mov	local02, local01
0c178     10 4E 85 51 |  if_ne	sub	fp, #16
0c17c     09 20 0E 52 |  if_ne	cmp	local02, #9 wz
0c180     24 0C 90 5D |  if_ne	jmp	#LR__1031
0c184                 | ' 
0c184                 | '  
0c184                 | ' if numpar=2 then
0c184     10 4E 05 F1 | 	add	fp, #16
0c188     A7 20 02 FB | 	rdlong	local02, fp
0c18c     10 4E 85 F1 | 	sub	fp, #16
0c190     02 20 0E F2 | 	cmp	local02, #2 wz
0c194     CC 03 90 5D |  if_ne	jmp	#LR__1022
0c198     C4 E6 BF FD | 	call	#_pop
0c19c     FF 1A 02 F6 | 	mov	arg05, result3
0c1a0     5C 4E 05 F1 | 	add	fp, #92
0c1a4     A7 FA 61 FC | 	wrlong	result1, fp
0c1a8     04 4E 05 F1 | 	add	fp, #4
0c1ac     A7 FC 61 FC | 	wrlong	result2, fp
0c1b0     04 4E 05 F1 | 	add	fp, #4
0c1b4     A7 1A 62 FC | 	wrlong	arg05, fp
0c1b8                 | '   t1=pop()
0c1b8                 | '   if t1.result_type=result_string2 then 
0c1b8     64 4E 85 F1 | 	sub	fp, #100
0c1bc     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0c1c0     20 00 90 5D |  if_ne	jmp	#LR__1010
0c1c4     5C 4E 05 F1 | 	add	fp, #92
0c1c8     A7 12 02 FB | 	rdlong	arg01, fp
0c1cc     5C 4E 85 F1 | 	sub	fp, #92
0c1d0     1C 2B B0 FD | 	call	#_convertstring
0c1d4     68 4E 05 F1 | 	add	fp, #104
0c1d8     A7 FA 61 FC | 	wrlong	result1, fp
0c1dc     68 4E 85 F1 | 	sub	fp, #104
0c1e0     58 00 90 FD | 	jmp	#LR__1013
0c1e4                 | LR__1010
0c1e4     64 4E 05 F1 | 	add	fp, #100
0c1e8     A7 20 02 FB | 	rdlong	local02, fp
0c1ec     64 4E 85 F1 | 	sub	fp, #100
0c1f0     1F 20 0E F2 | 	cmp	local02, #31 wz
0c1f4     18 00 90 5D |  if_ne	jmp	#LR__1011
0c1f8     5C 4E 05 F1 | 	add	fp, #92
0c1fc     A7 20 02 FB | 	rdlong	local02, fp
0c200     0C 4E 05 F1 | 	add	fp, #12
0c204     A7 20 62 FC | 	wrlong	local02, fp
0c208     68 4E 85 F1 | 	sub	fp, #104
0c20c     2C 00 90 FD | 	jmp	#LR__1012
0c210                 | LR__1011
0c210     73 01 00 FF 
0c214     79 21 06 F6 | 	mov	local02, ##@LR__5136
0c218     68 4E 05 F1 | 	add	fp, #104
0c21c     A7 20 62 FC | 	wrlong	local02, fp
0c220     0C 4E 85 F1 | 	sub	fp, #12
0c224     A7 12 02 F6 | 	mov	arg01, fp
0c228     5C 4E 85 F1 | 	sub	fp, #92
0c22c     E4 72 B0 FD | 	call	#_converttoint
0c230     24 4E 05 F1 | 	add	fp, #36
0c234     A7 FA 61 FC | 	wrlong	result1, fp
0c238     24 4E 85 F1 | 	sub	fp, #36
0c23c                 | LR__1012
0c23c                 | LR__1013
0c23c                 | ' 
0c23c                 | '     
0c23c                 | '   if s1<>"" then 
0c23c     68 4E 05 F1 | 	add	fp, #104
0c240     A7 12 02 FB | 	rdlong	arg01, fp
0c244     68 4E 85 F1 | 	sub	fp, #104
0c248     73 01 00 FF 
0c24c     7A 15 06 F6 | 	mov	arg02, ##@LR__5137
0c250     48 29 B1 FD | 	call	#__system___string_cmp
0c254     00 FA 0D F2 | 	cmp	result1, #0 wz
0c258     F8 01 90 AD |  if_e	jmp	#LR__1017
0c25c     00 E6 BF FD | 	call	#_pop
0c260     FF 1E 02 F6 | 	mov	local01, result3
0c264     5C 4E 05 F1 | 	add	fp, #92
0c268     A7 FA 61 FC | 	wrlong	result1, fp
0c26c     04 4E 05 F1 | 	add	fp, #4
0c270     A7 FC 61 FC | 	wrlong	result2, fp
0c274     04 4E 05 F1 | 	add	fp, #4
0c278     A7 1E 62 FC | 	wrlong	local01, fp
0c27c     08 4E 85 F1 | 	sub	fp, #8
0c280     A7 12 02 F6 | 	mov	arg01, fp
0c284     5C 4E 85 F1 | 	sub	fp, #92
0c288     88 72 B0 FD | 	call	#_converttoint
0c28c     20 4E 05 F1 | 	add	fp, #32
0c290     A7 FA 61 FC | 	wrlong	result1, fp
0c294     20 4E 85 F1 | 	sub	fp, #32
0c298                 | '     t1=pop()
0c298                 | '     channel=converttoint(t1) 
0c298                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0c298     09 12 06 F6 | 	mov	arg01, #9
0c29c     9C 78 B1 FD | 	call	#__system__close
0c2a0     09 20 06 F6 | 	mov	local02, #9
0c2a4     73 01 00 FF 
0c2a8     7B 13 06 F6 | 	mov	arg01, ##@LR__5138
0c2ac     68 4E 05 F1 | 	add	fp, #104
0c2b0     A7 14 02 FB | 	rdlong	arg02, fp
0c2b4     68 4E 85 F1 | 	sub	fp, #104
0c2b8     14 29 B1 FD | 	call	#__system___string_concat
0c2bc     FD 14 02 F6 | 	mov	arg02, result1
0c2c0     10 13 02 F6 | 	mov	arg01, local02
0c2c4     00 16 06 F6 | 	mov	arg03, #0
0c2c8     AC 34 B1 FD | 	call	#__system___basic_open_string
0c2cc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0c2d0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0c2d4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0c2d8     0C 4E 05 F1 | 	add	fp, #12
0c2dc     A7 FA 61 FC | 	wrlong	result1, fp
0c2e0                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0c2e0     0C 4E 85 F1 | 	sub	fp, #12
0c2e4     A0 00 90 AD |  if_e	jmp	#LR__1014
0c2e8     00 12 06 F6 | 	mov	arg01, #0
0c2ec     1C 82 B1 FD | 	call	#__system___getiolock_0484
0c2f0     FD 12 02 F6 | 	mov	arg01, result1
0c2f4     7C 28 B1 FD | 	call	#__system___lockmem
0c2f8     73 01 00 FF 
0c2fc     88 15 06 F6 | 	mov	arg02, ##@LR__5139
0c300     00 12 06 F6 | 	mov	arg01, #0
0c304     00 16 06 F6 | 	mov	arg03, #0
0c308     70 35 B1 FD | 	call	#__system___basic_print_string
0c30c     0C 4E 05 F1 | 	add	fp, #12
0c310     A7 14 02 FB | 	rdlong	arg02, fp
0c314     0C 4E 85 F1 | 	sub	fp, #12
0c318     00 12 06 F6 | 	mov	arg01, #0
0c31c     00 16 06 F6 | 	mov	arg03, #0
0c320     0A 18 06 F6 | 	mov	arg04, #10
0c324     98 35 B1 FD | 	call	#__system___basic_print_integer
0c328     73 01 00 FF 
0c32c     96 15 06 F6 | 	mov	arg02, ##@LR__5140
0c330     00 12 06 F6 | 	mov	arg01, #0
0c334     00 16 06 F6 | 	mov	arg03, #0
0c338     40 35 B1 FD | 	call	#__system___basic_print_string
0c33c     00 20 06 F6 | 	mov	local02, #0
0c340     0C 4E 05 F1 | 	add	fp, #12
0c344     A7 12 02 FB | 	rdlong	arg01, fp
0c348     0C 4E 85 F1 | 	sub	fp, #12
0c34c     B8 4E B1 FD | 	call	#__system___strerror
0c350     FD 14 02 F6 | 	mov	arg02, result1
0c354     10 13 02 F6 | 	mov	arg01, local02
0c358     00 16 06 F6 | 	mov	arg03, #0
0c35c     1C 35 B1 FD | 	call	#__system___basic_print_string
0c360     00 12 06 F6 | 	mov	arg01, #0
0c364     0A 14 06 F6 | 	mov	arg02, #10
0c368     00 16 06 F6 | 	mov	arg03, #0
0c36c     B4 34 B1 FD | 	call	#__system___basic_print_char
0c370     00 12 06 F6 | 	mov	arg01, #0
0c374     94 81 B1 FD | 	call	#__system___getiolock_0484
0c378     FD 00 68 FC | 	wrlong	#0, result1
0c37c     09 12 06 F6 | 	mov	arg01, #9
0c380     B8 77 B1 FD | 	call	#__system__close
0c384     20 0A 90 FD | 	jmp	#LR__1031
0c388                 | LR__1014
0c388                 | '     get #9,17,envbuf8(channel,0),256
0c388     20 4E 05 F1 | 	add	fp, #32
0c38c     A7 1A 02 FB | 	rdlong	arg05, fp
0c390     20 4E 85 F1 | 	sub	fp, #32
0c394     0D 17 02 F6 | 	mov	arg03, arg05
0c398     09 16 66 F0 | 	shl	arg03, #9
0c39c     0D 17 02 F1 | 	add	arg03, arg05
0c3a0     2C 00 00 FF 
0c3a4     D8 E4 05 F1 | 	add	objptr, ##22744
0c3a8     F2 16 02 F1 | 	add	arg03, objptr
0c3ac     09 12 06 F6 | 	mov	arg01, #9
0c3b0     11 14 06 F6 | 	mov	arg02, #17
0c3b4     00 19 06 F6 | 	mov	arg04, #256
0c3b8     01 1A 06 F6 | 	mov	arg05, #1
0c3bc     2C 00 00 FF 
0c3c0     D8 E4 85 F1 | 	sub	objptr, ##22744
0c3c4     C4 35 B1 FD | 	call	#__system___basic_get
0c3c8                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0c3c8     14 4E 05 F1 | 	add	fp, #20
0c3cc     A7 FE 69 FC | 	wrlong	#255, fp
0c3d0     14 4E 85 F1 | 	sub	fp, #20
0c3d4     2C 00 00 FF 
0c3d8     D8 E4 05 F1 | 	add	objptr, ##22744
0c3dc     97 30 48 FB | 	callpa	#(@LR__1016-@LR__1015)>>2,fcache_load_ptr_
0c3e0                 | LR__1015
0c3e0     20 4E 05 F1 | 	add	fp, #32
0c3e4     A7 18 02 FB | 	rdlong	arg04, fp
0c3e8     0C 21 02 F6 | 	mov	local02, arg04
0c3ec     09 20 66 F0 | 	shl	local02, #9
0c3f0     F2 20 02 F1 | 	add	local02, objptr
0c3f4     0C 4E 85 F1 | 	sub	fp, #12
0c3f8     A7 1E 02 FB | 	rdlong	local01, fp
0c3fc     0F 1B 02 F6 | 	mov	arg05, local01
0c400     01 1A 66 F0 | 	shl	arg05, #1
0c404     10 1B 02 F1 | 	add	arg05, local02
0c408     0C 21 02 F6 | 	mov	local02, arg04
0c40c     09 20 66 F0 | 	shl	local02, #9
0c410     0C 21 02 F1 | 	add	local02, arg04
0c414     F2 20 02 F1 | 	add	local02, objptr
0c418     10 1F 02 F1 | 	add	local01, local02
0c41c     0F 21 C2 FA | 	rdbyte	local02, local01
0c420     00 21 06 FA | 	mul	local02, #256
0c424     0D 21 52 FC | 	wrword	local02, arg05
0c428     A7 20 02 FB | 	rdlong	local02, fp
0c42c     01 20 86 F1 | 	sub	local02, #1
0c430     A7 20 62 FC | 	wrlong	local02, fp
0c434     14 4E 85 F1 | 	sub	fp, #20
0c438     00 20 56 F2 | 	cmps	local02, #0 wc
0c43c     A0 FF 9F 3D |  if_ae	jmp	#LR__1015
0c440                 | LR__1016
0c440     2C 00 00 FF 
0c444     D8 E4 85 F1 | 	sub	objptr, ##22744
0c448                 | '     close #9
0c448     09 12 06 F6 | 	mov	arg01, #9
0c44c     EC 76 B1 FD | 	call	#__system__close
0c450                 | '                                                                     '  for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0c450                 | '     return
0c450     54 09 90 FD | 	jmp	#LR__1031
0c454                 | LR__1017
0c454                 | '     if wptr < ($80000 - 2048) then 
0c454     24 4E 05 F1 | 	add	fp, #36
0c458     A7 22 02 FB | 	rdlong	local03, fp
0c45c     24 4E 85 F1 | 	sub	fp, #36
0c460     FC 03 00 FF 
0c464     00 22 56 F2 | 	cmps	local03, ##522240 wc
0c468     7C 00 90 3D |  if_ae	jmp	#LR__1020
0c46c                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0c46c     14 4E 05 F1 | 	add	fp, #20
0c470     A7 00 68 FC | 	wrlong	#0, fp
0c474     14 4E 85 F1 | 	sub	fp, #20
0c478     2C 00 00 FF 
0c47c     D8 E4 05 F1 | 	add	objptr, ##22744
0c480     97 2C 48 FB | 	callpa	#(@LR__1019-@LR__1018)>>2,fcache_load_ptr_
0c484                 | LR__1018
0c484     20 4E 05 F1 | 	add	fp, #32
0c488     A7 22 02 FB | 	rdlong	local03, fp
0c48c     09 22 66 F0 | 	shl	local03, #9
0c490     F2 22 02 F1 | 	add	local03, objptr
0c494     0C 4E 85 F1 | 	sub	fp, #12
0c498     A7 20 02 FB | 	rdlong	local02, fp
0c49c     10 1F 02 F6 | 	mov	local01, local02
0c4a0     01 1E 66 F0 | 	shl	local01, #1
0c4a4     11 1F 02 F1 | 	add	local01, local03
0c4a8     10 4E 05 F1 | 	add	fp, #16
0c4ac     A7 12 02 FB | 	rdlong	arg01, fp
0c4b0     01 20 66 F0 | 	shl	local02, #1
0c4b4     10 13 02 F1 | 	add	arg01, local02
0c4b8     09 FB E1 FA | 	rdword	result1, arg01
0c4bc     0F FB 51 FC | 	wrword	result1, local01
0c4c0     10 4E 85 F1 | 	sub	fp, #16
0c4c4     A7 22 02 FB | 	rdlong	local03, fp
0c4c8     01 22 06 F1 | 	add	local03, #1
0c4cc     A7 22 62 FC | 	wrlong	local03, fp
0c4d0     14 4E 85 F1 | 	sub	fp, #20
0c4d4     00 23 56 F2 | 	cmps	local03, #256 wc
0c4d8     A8 FF 9F CD |  if_b	jmp	#LR__1018
0c4dc                 | LR__1019
0c4dc     2C 00 00 FF 
0c4e0     D8 E4 85 F1 | 	sub	objptr, ##22744
0c4e4     C0 08 90 FD | 	jmp	#LR__1031
0c4e8                 | LR__1020
0c4e8                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0c4e8     14 4E 05 F1 | 	add	fp, #20
0c4ec     A7 00 68 FC | 	wrlong	#0, fp
0c4f0     14 4E 85 F1 | 	sub	fp, #20
0c4f4                 | LR__1021
0c4f4     20 4E 05 F1 | 	add	fp, #32
0c4f8     A7 22 02 FB | 	rdlong	local03, fp
0c4fc     09 22 66 F0 | 	shl	local03, #9
0c500     2C 00 00 FF 
0c504     D8 E4 05 F1 | 	add	objptr, ##22744
0c508     F2 22 02 F1 | 	add	local03, objptr
0c50c     0C 4E 85 F1 | 	sub	fp, #12
0c510     A7 20 02 FB | 	rdlong	local02, fp
0c514     10 1F 02 F6 | 	mov	local01, local02
0c518     01 1E 66 F0 | 	shl	local01, #1
0c51c     11 1F 02 F1 | 	add	local01, local03
0c520     10 4E 05 F1 | 	add	fp, #16
0c524     A7 12 02 FB | 	rdlong	arg01, fp
0c528     24 4E 85 F1 | 	sub	fp, #36
0c52c     01 20 66 F0 | 	shl	local02, #1
0c530     10 13 02 F1 | 	add	arg01, local02
0c534     2C 00 00 FF 
0c538     D8 E4 85 F1 | 	sub	objptr, ##22744
0c53c     A4 E4 B0 FD | 	call	#_psdpeek
0c540     0F FB 51 FC | 	wrword	result1, local01
0c544     14 4E 05 F1 | 	add	fp, #20
0c548     A7 24 02 FB | 	rdlong	local04, fp
0c54c     01 24 06 F1 | 	add	local04, #1
0c550     A7 24 62 FC | 	wrlong	local04, fp
0c554     14 4E 85 F1 | 	sub	fp, #20
0c558     00 25 56 F2 | 	cmps	local04, #256 wc
0c55c     94 FF 9F CD |  if_b	jmp	#LR__1021
0c560                 | '     return   
0c560     44 08 90 FD | 	jmp	#LR__1031
0c564                 | LR__1022
0c564                 | ' 
0c564                 | ' if numpar=5 then    'simple adsr
0c564     10 4E 05 F1 | 	add	fp, #16
0c568     A7 22 02 FB | 	rdlong	local03, fp
0c56c     10 4E 85 F1 | 	sub	fp, #16
0c570     05 22 0E F2 | 	cmp	local03, #5 wz
0c574     30 08 90 5D |  if_ne	jmp	#LR__1030
0c578     E4 E2 BF FD | 	call	#_pop
0c57c     FF 1E 02 F6 | 	mov	local01, result3
0c580     5C 4E 05 F1 | 	add	fp, #92
0c584     A7 FA 61 FC | 	wrlong	result1, fp
0c588     04 4E 05 F1 | 	add	fp, #4
0c58c     A7 FC 61 FC | 	wrlong	result2, fp
0c590     04 4E 05 F1 | 	add	fp, #4
0c594     A7 1E 62 FC | 	wrlong	local01, fp
0c598     08 4E 85 F1 | 	sub	fp, #8
0c59c     A7 12 02 F6 | 	mov	arg01, fp
0c5a0     5C 4E 85 F1 | 	sub	fp, #92
0c5a4     18 70 B0 FD | 	call	#_converttofloat
0c5a8     FD 22 02 F6 | 	mov	local03, result1
0c5ac     34 4E 05 F1 | 	add	fp, #52
0c5b0     A7 22 62 FC | 	wrlong	local03, fp
0c5b4     34 4E 85 F1 | 	sub	fp, #52
0c5b8     A4 E2 BF FD | 	call	#_pop
0c5bc     FF 1E 02 F6 | 	mov	local01, result3
0c5c0     5C 4E 05 F1 | 	add	fp, #92
0c5c4     A7 FA 61 FC | 	wrlong	result1, fp
0c5c8     04 4E 05 F1 | 	add	fp, #4
0c5cc     A7 FC 61 FC | 	wrlong	result2, fp
0c5d0     04 4E 05 F1 | 	add	fp, #4
0c5d4     A7 1E 62 FC | 	wrlong	local01, fp
0c5d8     08 4E 85 F1 | 	sub	fp, #8
0c5dc     A7 12 02 F6 | 	mov	arg01, fp
0c5e0     5C 4E 85 F1 | 	sub	fp, #92
0c5e4     D8 6F B0 FD | 	call	#_converttofloat
0c5e8     FD 22 02 F6 | 	mov	local03, result1
0c5ec     30 4E 05 F1 | 	add	fp, #48
0c5f0     A7 22 62 FC | 	wrlong	local03, fp
0c5f4     30 4E 85 F1 | 	sub	fp, #48
0c5f8     64 E2 BF FD | 	call	#_pop
0c5fc     FF 1E 02 F6 | 	mov	local01, result3
0c600     5C 4E 05 F1 | 	add	fp, #92
0c604     A7 FA 61 FC | 	wrlong	result1, fp
0c608     04 4E 05 F1 | 	add	fp, #4
0c60c     A7 FC 61 FC | 	wrlong	result2, fp
0c610     04 4E 05 F1 | 	add	fp, #4
0c614     A7 1E 62 FC | 	wrlong	local01, fp
0c618     08 4E 85 F1 | 	sub	fp, #8
0c61c     A7 12 02 F6 | 	mov	arg01, fp
0c620     5C 4E 85 F1 | 	sub	fp, #92
0c624     98 6F B0 FD | 	call	#_converttofloat
0c628     FD 22 02 F6 | 	mov	local03, result1
0c62c     2C 4E 05 F1 | 	add	fp, #44
0c630     A7 22 62 FC | 	wrlong	local03, fp
0c634     2C 4E 85 F1 | 	sub	fp, #44
0c638     24 E2 BF FD | 	call	#_pop
0c63c     FF 1E 02 F6 | 	mov	local01, result3
0c640     5C 4E 05 F1 | 	add	fp, #92
0c644     A7 FA 61 FC | 	wrlong	result1, fp
0c648     04 4E 05 F1 | 	add	fp, #4
0c64c     A7 FC 61 FC | 	wrlong	result2, fp
0c650     04 4E 05 F1 | 	add	fp, #4
0c654     A7 1E 62 FC | 	wrlong	local01, fp
0c658     08 4E 85 F1 | 	sub	fp, #8
0c65c     A7 12 02 F6 | 	mov	arg01, fp
0c660     5C 4E 85 F1 | 	sub	fp, #92
0c664     58 6F B0 FD | 	call	#_converttofloat
0c668     FD 22 02 F6 | 	mov	local03, result1
0c66c     28 4E 05 F1 | 	add	fp, #40
0c670     A7 22 62 FC | 	wrlong	local03, fp
0c674     28 4E 85 F1 | 	sub	fp, #40
0c678     E4 E1 BF FD | 	call	#_pop
0c67c     FF 1E 02 F6 | 	mov	local01, result3
0c680     5C 4E 05 F1 | 	add	fp, #92
0c684     A7 FA 61 FC | 	wrlong	result1, fp
0c688     04 4E 05 F1 | 	add	fp, #4
0c68c     A7 FC 61 FC | 	wrlong	result2, fp
0c690     04 4E 05 F1 | 	add	fp, #4
0c694     A7 1E 62 FC | 	wrlong	local01, fp
0c698     08 4E 85 F1 | 	sub	fp, #8
0c69c     A7 12 02 F6 | 	mov	arg01, fp
0c6a0     5C 4E 85 F1 | 	sub	fp, #92
0c6a4     6C 6E B0 FD | 	call	#_converttoint
0c6a8     20 4E 05 F1 | 	add	fp, #32
0c6ac     A7 FA 61 FC | 	wrlong	result1, fp
0c6b0                 | ' 
0c6b0                 | '   t1=pop() : rr=converttofloat(t1)
0c6b0                 | '   t1=pop() : ss=converttofloat(t1) 
0c6b0                 | '   t1=pop() : dd=converttofloat(t1)
0c6b0                 | '   t1=pop() : aa=converttofloat(t1)
0c6b0                 | '   t1=pop() : channel=converttoint(t1)
0c6b0                 | '   if ss<0.0 then ss=0.0 
0c6b0     10 4E 05 F1 | 	add	fp, #16
0c6b4     A7 12 02 FB | 	rdlong	arg01, fp
0c6b8     30 4E 85 F1 | 	sub	fp, #48
0c6bc     00 14 06 F6 | 	mov	arg02, #0
0c6c0     01 16 06 F6 | 	mov	arg03, #1
0c6c4     60 54 B1 FD | 	call	#__system___float_cmp
0c6c8     00 FA 55 F2 | 	cmps	result1, #0 wc
0c6cc     30 4E 05 C1 |  if_b	add	fp, #48
0c6d0     A7 00 68 CC |  if_b	wrlong	#0, fp
0c6d4     30 4E 85 C1 |  if_b	sub	fp, #48
0c6d8                 | '   if ss>1.0 then ss=1.0
0c6d8     30 4E 05 F1 | 	add	fp, #48
0c6dc     A7 12 02 FB | 	rdlong	arg01, fp
0c6e0     30 4E 85 F1 | 	sub	fp, #48
0c6e4     00 C0 1F FF 
0c6e8     00 14 06 F6 | 	mov	arg02, ##1065353216
0c6ec     01 16 66 F6 | 	neg	arg03, #1
0c6f0     34 54 B1 FD | 	call	#__system___float_cmp
0c6f4     01 FA 55 F2 | 	cmps	result1, #1 wc
0c6f8     30 4E 05 31 |  if_ae	add	fp, #48
0c6fc     00 C0 9F 3F 
0c700     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0c704     30 4E 85 31 |  if_ae	sub	fp, #48
0c708     28 4E 05 F1 | 	add	fp, #40
0c70c     A7 12 02 FB | 	rdlong	arg01, fp
0c710     04 4E 05 F1 | 	add	fp, #4
0c714     A7 14 02 FB | 	rdlong	arg02, fp
0c718     2C 4E 85 F1 | 	sub	fp, #44
0c71c     04 4C B1 FD | 	call	#__system___float_add
0c720     FD 12 02 F6 | 	mov	arg01, result1
0c724     34 4E 05 F1 | 	add	fp, #52
0c728     A7 14 02 FB | 	rdlong	arg02, fp
0c72c     34 4E 85 F1 | 	sub	fp, #52
0c730     F0 4B B1 FD | 	call	#__system___float_add
0c734     4C 4E 05 F1 | 	add	fp, #76
0c738     A7 FA 61 FC | 	wrlong	result1, fp
0c73c     FD 14 02 F6 | 	mov	arg02, result1
0c740     4C 4E 85 F1 | 	sub	fp, #76
0c744     00 C0 21 FF 
0c748     00 12 06 F6 | 	mov	arg01, ##1132462080
0c74c     A8 51 B1 FD | 	call	#__system___float_div
0c750     50 4E 05 F1 | 	add	fp, #80
0c754     A7 FA 61 FC | 	wrlong	result1, fp
0c758     28 4E 85 F1 | 	sub	fp, #40
0c75c     A7 12 02 FB | 	rdlong	arg01, fp
0c760     FD 14 02 F6 | 	mov	arg02, result1
0c764     28 4E 85 F1 | 	sub	fp, #40
0c768     88 4F B1 FD | 	call	#__system___float_mul
0c76c     FD 12 02 F6 | 	mov	arg01, result1
0c770     01 14 06 F6 | 	mov	arg02, #1
0c774     44 54 B1 FD | 	call	#__system___float_tointeger
0c778     A7 FA 61 FC | 	wrlong	result1, fp
0c77c     2C 4E 05 F1 | 	add	fp, #44
0c780     A7 12 02 FB | 	rdlong	arg01, fp
0c784     24 4E 05 F1 | 	add	fp, #36
0c788     A7 14 02 FB | 	rdlong	arg02, fp
0c78c     50 4E 85 F1 | 	sub	fp, #80
0c790     60 4F B1 FD | 	call	#__system___float_mul
0c794     FD 12 02 F6 | 	mov	arg01, result1
0c798     01 14 06 F6 | 	mov	arg02, #1
0c79c     1C 54 B1 FD | 	call	#__system___float_tointeger
0c7a0     04 4E 05 F1 | 	add	fp, #4
0c7a4     A7 FA 61 FC | 	wrlong	result1, fp
0c7a8     30 4E 05 F1 | 	add	fp, #48
0c7ac     A7 12 02 FB | 	rdlong	arg01, fp
0c7b0     1C 4E 05 F1 | 	add	fp, #28
0c7b4     A7 14 02 FB | 	rdlong	arg02, fp
0c7b8     50 4E 85 F1 | 	sub	fp, #80
0c7bc     34 4F B1 FD | 	call	#__system___float_mul
0c7c0     FD 12 02 F6 | 	mov	arg01, result1
0c7c4     01 14 06 F6 | 	mov	arg02, #1
0c7c8     F0 53 B1 FD | 	call	#__system___float_tointeger
0c7cc     FD 22 02 F6 | 	mov	local03, result1
0c7d0     0C 4E 05 F1 | 	add	fp, #12
0c7d4     A7 22 62 FC | 	wrlong	local03, fp
0c7d8     0C 4E 85 F1 | 	sub	fp, #12
0c7dc                 | '   fulltime=aa+dd+rr
0c7dc                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit) :print a,d,r,a+d+r
0c7dc     00 12 06 F6 | 	mov	arg01, #0
0c7e0     28 7D B1 FD | 	call	#__system___getiolock_0484
0c7e4     FD 12 02 F6 | 	mov	arg01, result1
0c7e8     88 23 B1 FD | 	call	#__system___lockmem
0c7ec     A7 14 02 FB | 	rdlong	arg02, fp
0c7f0     00 12 06 F6 | 	mov	arg01, #0
0c7f4     00 16 06 F6 | 	mov	arg03, #0
0c7f8     0A 18 06 F6 | 	mov	arg04, #10
0c7fc     C0 30 B1 FD | 	call	#__system___basic_print_integer
0c800     00 12 06 F6 | 	mov	arg01, #0
0c804     09 14 06 F6 | 	mov	arg02, #9
0c808     00 16 06 F6 | 	mov	arg03, #0
0c80c     14 30 B1 FD | 	call	#__system___basic_print_char
0c810     04 4E 05 F1 | 	add	fp, #4
0c814     A7 14 02 FB | 	rdlong	arg02, fp
0c818     04 4E 85 F1 | 	sub	fp, #4
0c81c     00 12 06 F6 | 	mov	arg01, #0
0c820     00 16 06 F6 | 	mov	arg03, #0
0c824     0A 18 06 F6 | 	mov	arg04, #10
0c828     94 30 B1 FD | 	call	#__system___basic_print_integer
0c82c     00 12 06 F6 | 	mov	arg01, #0
0c830     09 14 06 F6 | 	mov	arg02, #9
0c834     00 16 06 F6 | 	mov	arg03, #0
0c838     E8 2F B1 FD | 	call	#__system___basic_print_char
0c83c     0C 4E 05 F1 | 	add	fp, #12
0c840     A7 14 02 FB | 	rdlong	arg02, fp
0c844     0C 4E 85 F1 | 	sub	fp, #12
0c848     00 12 06 F6 | 	mov	arg01, #0
0c84c     00 16 06 F6 | 	mov	arg03, #0
0c850     0A 18 06 F6 | 	mov	arg04, #10
0c854     68 30 B1 FD | 	call	#__system___basic_print_integer
0c858     00 12 06 F6 | 	mov	arg01, #0
0c85c     09 14 06 F6 | 	mov	arg02, #9
0c860     00 16 06 F6 | 	mov	arg03, #0
0c864     BC 2F B1 FD | 	call	#__system___basic_print_char
0c868     A7 14 02 FB | 	rdlong	arg02, fp
0c86c     04 4E 05 F1 | 	add	fp, #4
0c870     A7 22 02 FB | 	rdlong	local03, fp
0c874     11 15 02 F1 | 	add	arg02, local03
0c878     08 4E 05 F1 | 	add	fp, #8
0c87c     A7 22 02 FB | 	rdlong	local03, fp
0c880     0C 4E 85 F1 | 	sub	fp, #12
0c884     11 15 02 F1 | 	add	arg02, local03
0c888     00 12 06 F6 | 	mov	arg01, #0
0c88c     00 16 06 F6 | 	mov	arg03, #0
0c890     0A 18 06 F6 | 	mov	arg04, #10
0c894     28 30 B1 FD | 	call	#__system___basic_print_integer
0c898     00 12 06 F6 | 	mov	arg01, #0
0c89c     0A 14 06 F6 | 	mov	arg02, #10
0c8a0     00 16 06 F6 | 	mov	arg03, #0
0c8a4     7C 2F B1 FD | 	call	#__system___basic_print_char
0c8a8     00 12 06 F6 | 	mov	arg01, #0
0c8ac     5C 7C B1 FD | 	call	#__system___getiolock_0484
0c8b0     FD 00 68 FC | 	wrlong	#0, result1
0c8b4     F8 BF 23 FF 
0c8b8     00 22 06 F6 | 	mov	local03, ##1199566848
0c8bc     A7 12 02 FB | 	rdlong	arg01, fp
0c8c0     09 13 52 F6 | 	abs	arg01, arg01 wc
0c8c4     1F 26 C6 C9 |  if_b	decod	local05, #31
0c8c8     00 26 06 36 |  if_ae	mov	local05, #0
0c8cc     20 4A B1 FD | 	call	#__system___float_fromuns
0c8d0     13 FB 61 F5 | 	xor	result1, local05
0c8d4     FD 14 02 F6 | 	mov	arg02, result1
0c8d8     11 13 02 F6 | 	mov	arg01, local03
0c8dc     18 50 B1 FD | 	call	#__system___float_div
0c8e0     54 4E 05 F1 | 	add	fp, #84
0c8e4     A7 FA 61 FC | 	wrlong	result1, fp
0c8e8     F8 BF 23 FF 
0c8ec     00 22 06 F6 | 	mov	local03, ##1199566848
0c8f0     24 4E 85 F1 | 	sub	fp, #36
0c8f4     A7 14 02 FB | 	rdlong	arg02, fp
0c8f8     30 4E 85 F1 | 	sub	fp, #48
0c8fc     F8 BF 23 FF 
0c900     00 12 06 F6 | 	mov	arg01, ##1199566848
0c904     EC 4D B1 FD | 	call	#__system___float_mul
0c908     FD 14 02 F6 | 	mov	arg02, result1
0c90c     11 13 02 F6 | 	mov	arg01, local03
0c910     1F 14 E6 F4 | 	bitnot	arg02, #31
0c914     0C 4A B1 FD | 	call	#__system___float_add
0c918     FD 22 02 F6 | 	mov	local03, result1
0c91c     04 4E 05 F1 | 	add	fp, #4
0c920     A7 12 02 FB | 	rdlong	arg01, fp
0c924     04 4E 85 F1 | 	sub	fp, #4
0c928     09 13 52 F6 | 	abs	arg01, arg01 wc
0c92c     1F 26 C6 C9 |  if_b	decod	local05, #31
0c930     00 26 06 36 |  if_ae	mov	local05, #0
0c934     B8 49 B1 FD | 	call	#__system___float_fromuns
0c938     13 FB 61 F5 | 	xor	result1, local05
0c93c     FD 14 02 F6 | 	mov	arg02, result1
0c940     11 13 02 F6 | 	mov	arg01, local03
0c944     B0 4F B1 FD | 	call	#__system___float_div
0c948     2C 4E 05 F1 | 	add	fp, #44
0c94c     A7 FA 61 FC | 	wrlong	result1, fp
0c950     04 4E 05 F1 | 	add	fp, #4
0c954     A7 14 02 FB | 	rdlong	arg02, fp
0c958     30 4E 85 F1 | 	sub	fp, #48
0c95c     F8 BF 23 FF 
0c960     00 12 06 F6 | 	mov	arg01, ##1199566848
0c964     8C 4D B1 FD | 	call	#__system___float_mul
0c968     FD 22 02 F6 | 	mov	local03, result1
0c96c     0C 4E 05 F1 | 	add	fp, #12
0c970     A7 12 02 FB | 	rdlong	arg01, fp
0c974     0C 4E 85 F1 | 	sub	fp, #12
0c978     09 13 52 F6 | 	abs	arg01, arg01 wc
0c97c     1F 26 C6 C9 |  if_b	decod	local05, #31
0c980     00 26 06 36 |  if_ae	mov	local05, #0
0c984     68 49 B1 FD | 	call	#__system___float_fromuns
0c988     13 FB 61 F5 | 	xor	result1, local05
0c98c     FD 14 02 F6 | 	mov	arg02, result1
0c990     11 13 02 F6 | 	mov	arg01, local03
0c994     60 4F B1 FD | 	call	#__system___float_div
0c998     FD 22 02 F6 | 	mov	local03, result1
0c99c     58 4E 05 F1 | 	add	fp, #88
0c9a0     A7 22 62 FC | 	wrlong	local03, fp
0c9a4     58 4E 85 F1 | 	sub	fp, #88
0c9a8                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r : print da,dd,dr
0c9a8     00 12 06 F6 | 	mov	arg01, #0
0c9ac     5C 7B B1 FD | 	call	#__system___getiolock_0484
0c9b0     FD 12 02 F6 | 	mov	arg01, result1
0c9b4     BC 21 B1 FD | 	call	#__system___lockmem
0c9b8     54 4E 05 F1 | 	add	fp, #84
0c9bc     A7 14 02 FB | 	rdlong	arg02, fp
0c9c0     54 4E 85 F1 | 	sub	fp, #84
0c9c4     00 12 06 F6 | 	mov	arg01, #0
0c9c8     00 16 06 F6 | 	mov	arg03, #0
0c9cc     23 18 06 F6 | 	mov	arg04, #35
0c9d0     38 53 B1 FD | 	call	#__system___basic_print_float
0c9d4     00 12 06 F6 | 	mov	arg01, #0
0c9d8     09 14 06 F6 | 	mov	arg02, #9
0c9dc     00 16 06 F6 | 	mov	arg03, #0
0c9e0     40 2E B1 FD | 	call	#__system___basic_print_char
0c9e4     2C 4E 05 F1 | 	add	fp, #44
0c9e8     A7 14 02 FB | 	rdlong	arg02, fp
0c9ec     2C 4E 85 F1 | 	sub	fp, #44
0c9f0     00 12 06 F6 | 	mov	arg01, #0
0c9f4     00 16 06 F6 | 	mov	arg03, #0
0c9f8     23 18 06 F6 | 	mov	arg04, #35
0c9fc     0C 53 B1 FD | 	call	#__system___basic_print_float
0ca00     00 12 06 F6 | 	mov	arg01, #0
0ca04     09 14 06 F6 | 	mov	arg02, #9
0ca08     00 16 06 F6 | 	mov	arg03, #0
0ca0c     14 2E B1 FD | 	call	#__system___basic_print_char
0ca10     58 4E 05 F1 | 	add	fp, #88
0ca14     A7 14 02 FB | 	rdlong	arg02, fp
0ca18     58 4E 85 F1 | 	sub	fp, #88
0ca1c     00 12 06 F6 | 	mov	arg01, #0
0ca20     00 16 06 F6 | 	mov	arg03, #0
0ca24     23 18 06 F6 | 	mov	arg04, #35
0ca28     E0 52 B1 FD | 	call	#__system___basic_print_float
0ca2c     00 12 06 F6 | 	mov	arg01, #0
0ca30     0A 14 06 F6 | 	mov	arg02, #10
0ca34     00 16 06 F6 | 	mov	arg03, #0
0ca38     E8 2D B1 FD | 	call	#__system___basic_print_char
0ca3c     00 12 06 F6 | 	mov	arg01, #0
0ca40     C8 7A B1 FD | 	call	#__system___getiolock_0484
0ca44     FD 00 68 FC | 	wrlong	#0, result1
0ca48     20 4E 05 F1 | 	add	fp, #32
0ca4c     A7 28 02 FB | 	rdlong	local06, fp
0ca50     20 4E 85 F1 | 	sub	fp, #32
0ca54     01 28 66 F0 | 	shl	local06, #1
0ca58     79 00 00 FF 
0ca5c     A4 E5 05 F1 | 	add	objptr, ##62372
0ca60     F2 28 02 F1 | 	add	local06, objptr
0ca64     A7 2A 02 FB | 	rdlong	local07, fp
0ca68     04 4E 05 F1 | 	add	fp, #4
0ca6c     A7 22 02 FB | 	rdlong	local03, fp
0ca70     11 2B 02 F1 | 	add	local07, local03
0ca74     14 2B 52 FC | 	wrword	local07, local06
0ca78     24 4E 05 F1 | 	add	fp, #36
0ca7c     A7 00 68 FC | 	wrlong	#0, fp
0ca80                 | '   suspoints(channel)=a+d
0ca80                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0ca80     14 4E 85 F1 | 	sub	fp, #20
0ca84     A7 00 68 FC | 	wrlong	#0, fp
0ca88     14 4E 85 F1 | 	sub	fp, #20
0ca8c     A7 2C 02 FB | 	rdlong	local08, fp
0ca90     79 00 00 FF 
0ca94     A4 E5 85 F1 | 	sub	objptr, ##62372
0ca98                 | LR__1023
0ca98     14 4E 05 F1 | 	add	fp, #20
0ca9c     A7 22 02 FB | 	rdlong	local03, fp
0caa0     14 4E 85 F1 | 	sub	fp, #20
0caa4     16 23 52 F2 | 	cmps	local03, local08 wc
0caa8     80 00 90 3D |  if_ae	jmp	#LR__1024
0caac     20 4E 05 F1 | 	add	fp, #32
0cab0     A7 28 02 FB | 	rdlong	local06, fp
0cab4     09 28 66 F0 | 	shl	local06, #9
0cab8     2C 00 00 FF 
0cabc     D8 E4 05 F1 | 	add	objptr, ##22744
0cac0     F2 28 02 F1 | 	add	local06, objptr
0cac4     0C 4E 85 F1 | 	sub	fp, #12
0cac8     A7 22 02 FB | 	rdlong	local03, fp
0cacc     01 22 66 F0 | 	shl	local03, #1
0cad0     14 23 02 F1 | 	add	local03, local06
0cad4     14 4E 05 F1 | 	add	fp, #20
0cad8     A7 12 02 FB | 	rdlong	arg01, fp
0cadc     28 4E 85 F1 | 	sub	fp, #40
0cae0     2C 00 00 FF 
0cae4     D8 E4 85 F1 | 	sub	objptr, ##22744
0cae8     01 14 06 F6 | 	mov	arg02, #1
0caec     CC 50 B1 FD | 	call	#__system___float_tointeger
0caf0     11 FB 51 FC | 	wrword	result1, local03
0caf4     28 4E 05 F1 | 	add	fp, #40
0caf8     A7 12 02 FB | 	rdlong	arg01, fp
0cafc     2C 4E 05 F1 | 	add	fp, #44
0cb00     A7 14 02 FB | 	rdlong	arg02, fp
0cb04     54 4E 85 F1 | 	sub	fp, #84
0cb08     18 48 B1 FD | 	call	#__system___float_add
0cb0c     28 4E 05 F1 | 	add	fp, #40
0cb10     A7 FA 61 FC | 	wrlong	result1, fp
0cb14     14 4E 85 F1 | 	sub	fp, #20
0cb18     A7 20 02 FB | 	rdlong	local02, fp
0cb1c     01 20 06 F1 | 	add	local02, #1
0cb20     A7 20 62 FC | 	wrlong	local02, fp
0cb24     14 4E 85 F1 | 	sub	fp, #20
0cb28     6C FF 9F FD | 	jmp	#LR__1023
0cb2c                 | LR__1024
0cb2c                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0cb2c     A7 22 02 FB | 	rdlong	local03, fp
0cb30     14 4E 05 F1 | 	add	fp, #20
0cb34     A7 22 62 FC | 	wrlong	local03, fp
0cb38     14 4E 85 F1 | 	sub	fp, #20
0cb3c     A7 2E 02 FB | 	rdlong	local09, fp
0cb40     04 4E 05 F1 | 	add	fp, #4
0cb44     A7 22 02 FB | 	rdlong	local03, fp
0cb48     04 4E 85 F1 | 	sub	fp, #4
0cb4c     11 2F 02 F1 | 	add	local09, local03
0cb50                 | LR__1025
0cb50     14 4E 05 F1 | 	add	fp, #20
0cb54     A7 22 02 FB | 	rdlong	local03, fp
0cb58     14 4E 85 F1 | 	sub	fp, #20
0cb5c     17 23 52 F2 | 	cmps	local03, local09 wc
0cb60     A8 00 90 3D |  if_ae	jmp	#LR__1026
0cb64     20 4E 05 F1 | 	add	fp, #32
0cb68     A7 2C 02 FB | 	rdlong	local08, fp
0cb6c     09 2C 66 F0 | 	shl	local08, #9
0cb70     2C 00 00 FF 
0cb74     D8 E4 05 F1 | 	add	objptr, ##22744
0cb78     F2 2C 02 F1 | 	add	local08, objptr
0cb7c     0C 4E 85 F1 | 	sub	fp, #12
0cb80     A7 2A 02 FB | 	rdlong	local07, fp
0cb84     01 2A 66 F0 | 	shl	local07, #1
0cb88     16 2B 02 F1 | 	add	local07, local08
0cb8c     14 4E 05 F1 | 	add	fp, #20
0cb90     A7 12 02 FB | 	rdlong	arg01, fp
0cb94     28 4E 85 F1 | 	sub	fp, #40
0cb98     2C 00 00 FF 
0cb9c     D8 E4 85 F1 | 	sub	objptr, ##22744
0cba0     01 14 06 F6 | 	mov	arg02, #1
0cba4     14 50 B1 FD | 	call	#__system___float_tointeger
0cba8     15 FB 51 FC | 	wrword	result1, local07
0cbac     28 4E 05 F1 | 	add	fp, #40
0cbb0     A7 12 02 FB | 	rdlong	arg01, fp
0cbb4     04 4E 05 F1 | 	add	fp, #4
0cbb8     A7 14 02 FB | 	rdlong	arg02, fp
0cbbc     2C 4E 85 F1 | 	sub	fp, #44
0cbc0     1F 14 E6 F4 | 	bitnot	arg02, #31
0cbc4     5C 47 B1 FD | 	call	#__system___float_add
0cbc8     28 4E 05 F1 | 	add	fp, #40
0cbcc     A7 FA 61 FC | 	wrlong	result1, fp
0cbd0     28 4E 85 F1 | 	sub	fp, #40
0cbd4     FD 12 02 F6 | 	mov	arg01, result1
0cbd8     00 14 06 F6 | 	mov	arg02, #0
0cbdc     01 16 06 F6 | 	mov	arg03, #1
0cbe0     44 4F B1 FD | 	call	#__system___float_cmp
0cbe4     00 FA 55 F2 | 	cmps	result1, #0 wc
0cbe8     28 4E 05 C1 |  if_b	add	fp, #40
0cbec     A7 00 68 CC |  if_b	wrlong	#0, fp
0cbf0     28 4E 85 C1 |  if_b	sub	fp, #40
0cbf4     14 4E 05 F1 | 	add	fp, #20
0cbf8     A7 20 02 FB | 	rdlong	local02, fp
0cbfc     01 20 06 F1 | 	add	local02, #1
0cc00     A7 20 62 FC | 	wrlong	local02, fp
0cc04     14 4E 85 F1 | 	sub	fp, #20
0cc08     44 FF 9F FD | 	jmp	#LR__1025
0cc0c                 | LR__1026
0cc0c                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0cc0c     A7 22 02 FB | 	rdlong	local03, fp
0cc10     04 4E 05 F1 | 	add	fp, #4
0cc14     A7 2E 02 FB | 	rdlong	local09, fp
0cc18     17 23 02 F1 | 	add	local03, local09
0cc1c     10 4E 05 F1 | 	add	fp, #16
0cc20     A7 22 62 FC | 	wrlong	local03, fp
0cc24     14 4E 85 F1 | 	sub	fp, #20
0cc28                 | LR__1027
0cc28     14 4E 05 F1 | 	add	fp, #20
0cc2c     A7 28 02 FB | 	rdlong	local06, fp
0cc30     14 4E 85 F1 | 	sub	fp, #20
0cc34     00 29 56 F2 | 	cmps	local06, #256 wc
0cc38     A8 00 90 3D |  if_ae	jmp	#LR__1028
0cc3c     20 4E 05 F1 | 	add	fp, #32
0cc40     A7 2E 02 FB | 	rdlong	local09, fp
0cc44     09 2E 66 F0 | 	shl	local09, #9
0cc48     2C 00 00 FF 
0cc4c     D8 E4 05 F1 | 	add	objptr, ##22744
0cc50     F2 2E 02 F1 | 	add	local09, objptr
0cc54     0C 4E 85 F1 | 	sub	fp, #12
0cc58     A7 2C 02 FB | 	rdlong	local08, fp
0cc5c     01 2C 66 F0 | 	shl	local08, #1
0cc60     17 2D 02 F1 | 	add	local08, local09
0cc64     14 4E 05 F1 | 	add	fp, #20
0cc68     A7 12 02 FB | 	rdlong	arg01, fp
0cc6c     28 4E 85 F1 | 	sub	fp, #40
0cc70     2C 00 00 FF 
0cc74     D8 E4 85 F1 | 	sub	objptr, ##22744
0cc78     01 14 06 F6 | 	mov	arg02, #1
0cc7c     3C 4F B1 FD | 	call	#__system___float_tointeger
0cc80     16 FB 51 FC | 	wrword	result1, local08
0cc84     28 4E 05 F1 | 	add	fp, #40
0cc88     A7 12 02 FB | 	rdlong	arg01, fp
0cc8c     30 4E 05 F1 | 	add	fp, #48
0cc90     A7 14 02 FB | 	rdlong	arg02, fp
0cc94     58 4E 85 F1 | 	sub	fp, #88
0cc98     1F 14 E6 F4 | 	bitnot	arg02, #31
0cc9c     84 46 B1 FD | 	call	#__system___float_add
0cca0     28 4E 05 F1 | 	add	fp, #40
0cca4     A7 FA 61 FC | 	wrlong	result1, fp
0cca8     28 4E 85 F1 | 	sub	fp, #40
0ccac     FD 12 02 F6 | 	mov	arg01, result1
0ccb0     00 14 06 F6 | 	mov	arg02, #0
0ccb4     01 16 06 F6 | 	mov	arg03, #1
0ccb8     6C 4E B1 FD | 	call	#__system___float_cmp
0ccbc     00 FA 55 F2 | 	cmps	result1, #0 wc
0ccc0     28 4E 05 C1 |  if_b	add	fp, #40
0ccc4     A7 00 68 CC |  if_b	wrlong	#0, fp
0ccc8     28 4E 85 C1 |  if_b	sub	fp, #40
0cccc     14 4E 05 F1 | 	add	fp, #20
0ccd0     A7 2E 02 FB | 	rdlong	local09, fp
0ccd4     01 2E 06 F1 | 	add	local09, #1
0ccd8     A7 2E 62 FC | 	wrlong	local09, fp
0ccdc     14 4E 85 F1 | 	sub	fp, #20
0cce0     44 FF 9F FD | 	jmp	#LR__1027
0cce4                 | LR__1028
0cce4     20 4E 05 F1 | 	add	fp, #32
0cce8     A7 28 02 FB | 	rdlong	local06, fp
0ccec     09 28 66 F0 | 	shl	local06, #9
0ccf0     2C 00 00 FF 
0ccf4     D8 E4 05 F1 | 	add	objptr, ##22744
0ccf8     F2 28 02 F1 | 	add	local06, objptr
0ccfc     FE 29 06 F1 | 	add	local06, #510
0cd00     14 01 58 FC | 	wrword	#0, local06
0cd04                 | '   envbuf(channel,255)=0
0cd04                 | '   for i=0 to 255 : print envbuf(channel,i), : next i
0cd04     0C 4E 85 F1 | 	sub	fp, #12
0cd08     A7 00 68 FC | 	wrlong	#0, fp
0cd0c     14 4E 85 F1 | 	sub	fp, #20
0cd10     2C 00 00 FF 
0cd14     D8 E4 85 F1 | 	sub	objptr, ##22744
0cd18                 | LR__1029
0cd18     00 12 06 F6 | 	mov	arg01, #0
0cd1c     EC 77 B1 FD | 	call	#__system___getiolock_0484
0cd20     FD 12 02 F6 | 	mov	arg01, result1
0cd24     4C 1E B1 FD | 	call	#__system___lockmem
0cd28     20 4E 05 F1 | 	add	fp, #32
0cd2c     A7 2E 02 FB | 	rdlong	local09, fp
0cd30     09 2E 66 F0 | 	shl	local09, #9
0cd34     2C 00 00 FF 
0cd38     D8 E4 05 F1 | 	add	objptr, ##22744
0cd3c     F2 2E 02 F1 | 	add	local09, objptr
0cd40     0C 4E 85 F1 | 	sub	fp, #12
0cd44     A7 2C 02 FB | 	rdlong	local08, fp
0cd48     14 4E 85 F1 | 	sub	fp, #20
0cd4c     01 2C 66 F0 | 	shl	local08, #1
0cd50     17 2D 02 F1 | 	add	local08, local09
0cd54     16 15 E2 FA | 	rdword	arg02, local08
0cd58     00 12 06 F6 | 	mov	arg01, #0
0cd5c     00 16 06 F6 | 	mov	arg03, #0
0cd60     0A 18 06 F6 | 	mov	arg04, #10
0cd64     2C 00 00 FF 
0cd68     D8 E4 85 F1 | 	sub	objptr, ##22744
0cd6c     90 2B B1 FD | 	call	#__system___basic_print_unsigned
0cd70     00 12 06 F6 | 	mov	arg01, #0
0cd74     09 14 06 F6 | 	mov	arg02, #9
0cd78     00 16 06 F6 | 	mov	arg03, #0
0cd7c     A4 2A B1 FD | 	call	#__system___basic_print_char
0cd80     00 12 06 F6 | 	mov	arg01, #0
0cd84     84 77 B1 FD | 	call	#__system___getiolock_0484
0cd88     FD 00 68 FC | 	wrlong	#0, result1
0cd8c     14 4E 05 F1 | 	add	fp, #20
0cd90     A7 2E 02 FB | 	rdlong	local09, fp
0cd94     01 2E 06 F1 | 	add	local09, #1
0cd98     A7 2E 62 FC | 	wrlong	local09, fp
0cd9c     14 4E 85 F1 | 	sub	fp, #20
0cda0     00 2F 56 F2 | 	cmps	local09, #256 wc
0cda4     70 FF 9F CD |  if_b	jmp	#LR__1029
0cda8                 | LR__1030
0cda8                 | LR__1031
0cda8     A7 F0 03 F6 | 	mov	ptra, fp
0cdac     B2 00 A0 FD | 	call	#popregs_
0cdb0                 | _do_defenv_ret
0cdb0     2D 00 64 FD | 	ret
0cdb4                 | 
0cdb4                 | ' 
0cdb4                 | ' 
0cdb4                 | ' sub do_play
0cdb4                 | _do_play
0cdb4     05 4A 05 F6 | 	mov	COUNT_, #5
0cdb8     A8 00 A0 FD | 	call	#pushregs_
0cdbc     74 F0 07 F1 | 	add	ptra, #116
0cdc0     60 4E 05 F1 | 	add	fp, #96
0cdc4     F5 25 A2 FF 
0cdc8     A7 AA 68 FC | 	wrlong	##1145825877, fp
0cdcc                 | ' speed_coeff=815.6614449376854599406528189911
0cdcc                 | ' 
0cdcc                 | ' for i=0 to 8 : params(i)=-2.0 : next i
0cdcc     5C 4E 85 F1 | 	sub	fp, #92
0cdd0     A7 00 68 FC | 	wrlong	#0, fp
0cdd4     97 18 48 FB | 	callpa	#(@LR__1041-@LR__1040)>>2,fcache_load_ptr_
0cdd8                 | LR__1040
0cdd8     A7 16 02 FB | 	rdlong	arg03, fp
0cddc     02 16 66 F0 | 	shl	arg03, #2
0cde0     2C 4E 05 F1 | 	add	fp, #44
0cde4     A7 16 02 F1 | 	add	arg03, fp
0cde8     00 00 E0 FF 
0cdec     0B 01 68 FC | 	wrlong	##-1073741824, arg03
0cdf0     2C 4E 85 F1 | 	sub	fp, #44
0cdf4     A7 1E 02 FB | 	rdlong	local01, fp
0cdf8     01 1E 06 F1 | 	add	local01, #1
0cdfc     A7 1E 62 FC | 	wrlong	local01, fp
0ce00     09 1E 56 F2 | 	cmps	local01, #9 wc
0ce04     D0 FF 9F CD |  if_b	jmp	#LR__1040
0ce08                 | LR__1041
0ce08     04 4E 85 F1 | 	sub	fp, #4
0ce0c     6A 00 00 FF 
0ce10     80 E4 05 F1 | 	add	objptr, ##54400
0ce14     F2 20 02 FB | 	rdlong	local02, objptr
0ce18     10 23 02 F6 | 	mov	local03, local02
0ce1c     01 22 66 F0 | 	shl	local03, #1
0ce20     10 23 02 F1 | 	add	local03, local02
0ce24     02 22 66 F0 | 	shl	local03, #2
0ce28     03 00 00 FF 
0ce2c     04 E4 85 F1 | 	sub	objptr, ##1540
0ce30     F2 22 02 F1 | 	add	local03, objptr
0ce34     11 25 02 FB | 	rdlong	local04, local03
0ce38     A7 24 62 FC | 	wrlong	local04, fp
0ce3c                 | ' 'params(0)=0: params(1)=440.0 : params(2)=16.0 : params(3)=0.0 : params(4)=0.0 : params(5)=1.0 : params(6)=0.0 : params(7)=0.0 : 
0ce3c                 | ' 'chn		freq		   vol		   wave#	   env#		   len		   delay	   pan		: sus 
0ce3c                 | ' numpar=compiledline(lineptr_e).result.uresult
0ce3c                 | ' for i=numpar to 1 step -1 
0ce3c     04 4E 05 F1 | 	add	fp, #4
0ce40     A7 24 62 FC | 	wrlong	local04, fp
0ce44     04 4E 85 F1 | 	sub	fp, #4
0ce48     67 00 00 FF 
0ce4c     7C E4 85 F1 | 	sub	objptr, ##52860
0ce50                 | LR__1042
0ce50     0C DA BF FD | 	call	#_pop
0ce54     54 4E 05 F1 | 	add	fp, #84
0ce58     A7 FA 61 FC | 	wrlong	result1, fp
0ce5c     04 4E 05 F1 | 	add	fp, #4
0ce60     A7 FC 61 FC | 	wrlong	result2, fp
0ce64     04 4E 05 F1 | 	add	fp, #4
0ce68     A7 FE 61 FC | 	wrlong	result3, fp
0ce6c     58 4E 85 F1 | 	sub	fp, #88
0ce70     A7 22 02 FB | 	rdlong	local03, fp
0ce74     01 22 86 F1 | 	sub	local03, #1
0ce78     02 22 66 F0 | 	shl	local03, #2
0ce7c     2C 4E 05 F1 | 	add	fp, #44
0ce80     A7 22 02 F1 | 	add	local03, fp
0ce84     24 4E 05 F1 | 	add	fp, #36
0ce88     A7 26 02 F6 | 	mov	local05, fp
0ce8c     13 13 02 F6 | 	mov	arg01, local05
0ce90     54 4E 85 F1 | 	sub	fp, #84
0ce94     28 67 B0 FD | 	call	#_converttofloat
0ce98     11 FB 61 FC | 	wrlong	result1, local03
0ce9c     04 4E 05 F1 | 	add	fp, #4
0cea0     A7 1E 02 FB | 	rdlong	local01, fp
0cea4     01 1E 86 F1 | 	sub	local01, #1
0cea8     A7 1E 62 FC | 	wrlong	local01, fp
0ceac     04 4E 85 F1 | 	sub	fp, #4
0ceb0     01 1E 56 F2 | 	cmps	local01, #1 wc
0ceb4     98 FF 9F 3D |  if_ae	jmp	#LR__1042
0ceb8                 | ' if params(0)<0 then channel=0 else channel=round(params(0))
0ceb8     30 4E 05 F1 | 	add	fp, #48
0cebc     A7 12 02 FB | 	rdlong	arg01, fp
0cec0     30 4E 85 F1 | 	sub	fp, #48
0cec4     00 14 06 F6 | 	mov	arg02, #0
0cec8     01 16 06 F6 | 	mov	arg03, #1
0cecc     58 4C B1 FD | 	call	#__system___float_cmp
0ced0     00 FA 55 F2 | 	cmps	result1, #0 wc
0ced4     0C 4E 05 C1 |  if_b	add	fp, #12
0ced8     A7 00 68 CC |  if_b	wrlong	#0, fp
0cedc     0C 4E 85 C1 |  if_b	sub	fp, #12
0cee0     20 00 90 CD |  if_b	jmp	#LR__1043
0cee4     30 4E 05 F1 | 	add	fp, #48
0cee8     A7 12 02 FB | 	rdlong	arg01, fp
0ceec     30 4E 85 F1 | 	sub	fp, #48
0cef0     01 14 06 F6 | 	mov	arg02, #1
0cef4     C4 4C B1 FD | 	call	#__system___float_tointeger
0cef8     0C 4E 05 F1 | 	add	fp, #12
0cefc     A7 FA 61 FC | 	wrlong	result1, fp
0cf00     0C 4E 85 F1 | 	sub	fp, #12
0cf04                 | LR__1043
0cf04                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
0cf04     34 4E 05 F1 | 	add	fp, #52
0cf08     A7 12 02 FB | 	rdlong	arg01, fp
0cf0c     34 4E 85 F1 | 	sub	fp, #52
0cf10     00 14 06 F6 | 	mov	arg02, #0
0cf14     01 16 06 F6 | 	mov	arg03, #1
0cf18     0C 4C B1 FD | 	call	#__system___float_cmp
0cf1c     00 FA 55 F2 | 	cmps	result1, #0 wc
0cf20     40 00 90 3D |  if_ae	jmp	#LR__1044
0cf24     0C 4E 05 F1 | 	add	fp, #12
0cf28     A7 20 02 FB | 	rdlong	local02, fp
0cf2c     10 23 02 F6 | 	mov	local03, local02
0cf30     01 22 66 F0 | 	shl	local03, #1
0cf34     10 23 02 F1 | 	add	local03, local02
0cf38     03 22 66 F0 | 	shl	local03, #3
0cf3c     34 00 00 FF 
0cf40     38 E5 05 F1 | 	add	objptr, ##26936
0cf44     F2 22 02 F1 | 	add	local03, objptr
0cf48     11 23 02 FB | 	rdlong	local03, local03
0cf4c     58 4E 05 F1 | 	add	fp, #88
0cf50     A7 22 62 FC | 	wrlong	local03, fp
0cf54     64 4E 85 F1 | 	sub	fp, #100
0cf58     34 00 00 FF 
0cf5c     38 E5 85 F1 | 	sub	objptr, ##26936
0cf60     44 00 90 FD | 	jmp	#LR__1045
0cf64                 | LR__1044
0cf64     34 4E 05 F1 | 	add	fp, #52
0cf68     A7 24 02 FB | 	rdlong	local04, fp
0cf6c     30 4E 05 F1 | 	add	fp, #48
0cf70     A7 24 62 FC | 	wrlong	local04, fp
0cf74     58 4E 85 F1 | 	sub	fp, #88
0cf78     A7 20 02 FB | 	rdlong	local02, fp
0cf7c     10 23 02 F6 | 	mov	local03, local02
0cf80     01 22 66 F0 | 	shl	local03, #1
0cf84     10 23 02 F1 | 	add	local03, local02
0cf88     03 22 66 F0 | 	shl	local03, #3
0cf8c     34 00 00 FF 
0cf90     38 E5 05 F1 | 	add	objptr, ##26936
0cf94     F2 22 02 F1 | 	add	local03, objptr
0cf98     0C 4E 85 F1 | 	sub	fp, #12
0cf9c     11 25 62 FC | 	wrlong	local04, local03
0cfa0     34 00 00 FF 
0cfa4     38 E5 85 F1 | 	sub	objptr, ##26936
0cfa8                 | LR__1045
0cfa8                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
0cfa8     3C 4E 05 F1 | 	add	fp, #60
0cfac     A7 12 02 FB | 	rdlong	arg01, fp
0cfb0     3C 4E 85 F1 | 	sub	fp, #60
0cfb4     00 14 06 F6 | 	mov	arg02, #0
0cfb8     01 16 06 F6 | 	mov	arg03, #1
0cfbc     68 4B B1 FD | 	call	#__system___float_cmp
0cfc0     00 FA 55 F2 | 	cmps	result1, #0 wc
0cfc4     24 00 90 CD |  if_b	jmp	#LR__1046
0cfc8     3C 4E 05 F1 | 	add	fp, #60
0cfcc     A7 12 02 FB | 	rdlong	arg01, fp
0cfd0     3C 4E 85 F1 | 	sub	fp, #60
0cfd4     89 C1 20 FF 
0cfd8     6F 14 06 F6 | 	mov	arg02, ##1099108975
0cfdc     01 16 66 F6 | 	neg	arg03, #1
0cfe0     44 4B B1 FD | 	call	#__system___float_cmp
0cfe4     01 FA 55 F2 | 	cmps	result1, #1 wc
0cfe8     44 00 90 CD |  if_b	jmp	#LR__1047
0cfec                 | LR__1046
0cfec     0C 4E 05 F1 | 	add	fp, #12
0cff0     A7 20 02 FB | 	rdlong	local02, fp
0cff4     10 23 02 F6 | 	mov	local03, local02
0cff8     01 22 66 F0 | 	shl	local03, #1
0cffc     10 23 02 F1 | 	add	local03, local02
0d000     03 22 66 F0 | 	shl	local03, #3
0d004     34 00 00 FF 
0d008     38 E5 05 F1 | 	add	objptr, ##26936
0d00c     F2 22 02 F1 | 	add	local03, objptr
0d010     0C 22 06 F1 | 	add	local03, #12
0d014     11 23 02 FB | 	rdlong	local03, local03
0d018     60 4E 05 F1 | 	add	fp, #96
0d01c     A7 22 62 FC | 	wrlong	local03, fp
0d020     6C 4E 85 F1 | 	sub	fp, #108
0d024     34 00 00 FF 
0d028     38 E5 85 F1 | 	sub	objptr, ##26936
0d02c     48 00 90 FD | 	jmp	#LR__1048
0d030                 | LR__1047
0d030     3C 4E 05 F1 | 	add	fp, #60
0d034     A7 24 02 FB | 	rdlong	local04, fp
0d038     30 4E 05 F1 | 	add	fp, #48
0d03c     A7 24 62 FC | 	wrlong	local04, fp
0d040     60 4E 85 F1 | 	sub	fp, #96
0d044     A7 20 02 FB | 	rdlong	local02, fp
0d048     10 23 02 F6 | 	mov	local03, local02
0d04c     01 22 66 F0 | 	shl	local03, #1
0d050     10 23 02 F1 | 	add	local03, local02
0d054     03 22 66 F0 | 	shl	local03, #3
0d058     34 00 00 FF 
0d05c     38 E5 05 F1 | 	add	objptr, ##26936
0d060     F2 22 02 F1 | 	add	local03, objptr
0d064     0C 4E 85 F1 | 	sub	fp, #12
0d068     0C 22 06 F1 | 	add	local03, #12
0d06c     11 25 62 FC | 	wrlong	local04, local03
0d070     34 00 00 FF 
0d074     38 E5 85 F1 | 	sub	objptr, ##26936
0d078                 | LR__1048
0d078                 | ' if params(4)<0 orelse params(4)>8.0 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
0d078     40 4E 05 F1 | 	add	fp, #64
0d07c     A7 12 02 FB | 	rdlong	arg01, fp
0d080     40 4E 85 F1 | 	sub	fp, #64
0d084     00 14 06 F6 | 	mov	arg02, #0
0d088     01 16 06 F6 | 	mov	arg03, #1
0d08c     98 4A B1 FD | 	call	#__system___float_cmp
0d090     00 FA 55 F2 | 	cmps	result1, #0 wc
0d094     24 00 90 CD |  if_b	jmp	#LR__1049
0d098     40 4E 05 F1 | 	add	fp, #64
0d09c     A7 12 02 FB | 	rdlong	arg01, fp
0d0a0     40 4E 85 F1 | 	sub	fp, #64
0d0a4     00 80 20 FF 
0d0a8     00 14 06 F6 | 	mov	arg02, ##1090519040
0d0ac     01 16 66 F6 | 	neg	arg03, #1
0d0b0     74 4A B1 FD | 	call	#__system___float_cmp
0d0b4     01 FA 55 F2 | 	cmps	result1, #1 wc
0d0b8     48 00 90 CD |  if_b	jmp	#LR__1050
0d0bc                 | LR__1049
0d0bc     0C 4E 05 F1 | 	add	fp, #12
0d0c0     A7 22 02 FB | 	rdlong	local03, fp
0d0c4     11 27 02 F6 | 	mov	local05, local03
0d0c8     01 26 66 F0 | 	shl	local05, #1
0d0cc     11 27 02 F1 | 	add	local05, local03
0d0d0     03 26 66 F0 | 	shl	local05, #3
0d0d4     34 00 00 FF 
0d0d8     38 E5 05 F1 | 	add	objptr, ##26936
0d0dc     F2 26 02 F1 | 	add	local05, objptr
0d0e0     04 26 06 F1 | 	add	local05, #4
0d0e4     13 27 C2 FA | 	rdbyte	local05, local05
0d0e8     13 25 E2 F8 | 	getbyte	local04, local05, #0
0d0ec     14 4E 05 F1 | 	add	fp, #20
0d0f0     A7 24 62 FC | 	wrlong	local04, fp
0d0f4     20 4E 85 F1 | 	sub	fp, #32
0d0f8     34 00 00 FF 
0d0fc     38 E5 85 F1 | 	sub	objptr, ##26936
0d100     54 00 90 FD | 	jmp	#LR__1051
0d104                 | LR__1050
0d104     40 4E 05 F1 | 	add	fp, #64
0d108     A7 12 02 FB | 	rdlong	arg01, fp
0d10c     40 4E 85 F1 | 	sub	fp, #64
0d110     01 14 06 F6 | 	mov	arg02, #1
0d114     A4 4A B1 FD | 	call	#__system___float_tointeger
0d118     20 4E 05 F1 | 	add	fp, #32
0d11c     A7 FA 61 FC | 	wrlong	result1, fp
0d120     14 4E 85 F1 | 	sub	fp, #20
0d124     A7 20 02 FB | 	rdlong	local02, fp
0d128     10 23 02 F6 | 	mov	local03, local02
0d12c     01 22 66 F0 | 	shl	local03, #1
0d130     10 23 02 F1 | 	add	local03, local02
0d134     03 22 66 F0 | 	shl	local03, #3
0d138     34 00 00 FF 
0d13c     38 E5 05 F1 | 	add	objptr, ##26936
0d140     F2 22 02 F1 | 	add	local03, objptr
0d144     0C 4E 85 F1 | 	sub	fp, #12
0d148     04 22 06 F1 | 	add	local03, #4
0d14c     11 FB 41 FC | 	wrbyte	result1, local03
0d150     34 00 00 FF 
0d154     38 E5 85 F1 | 	sub	objptr, ##26936
0d158                 | LR__1051
0d158                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
0d158     44 4E 05 F1 | 	add	fp, #68
0d15c     A7 12 02 FB | 	rdlong	arg01, fp
0d160     44 4E 85 F1 | 	sub	fp, #68
0d164     00 14 06 F6 | 	mov	arg02, #0
0d168     01 16 06 F6 | 	mov	arg03, #1
0d16c     B8 49 B1 FD | 	call	#__system___float_cmp
0d170     00 FA 55 F2 | 	cmps	result1, #0 wc
0d174     24 00 90 CD |  if_b	jmp	#LR__1052
0d178     44 4E 05 F1 | 	add	fp, #68
0d17c     A7 12 02 FB | 	rdlong	arg01, fp
0d180     44 4E 85 F1 | 	sub	fp, #68
0d184     00 80 20 FF 
0d188     00 14 06 F6 | 	mov	arg02, ##1090519040
0d18c     01 16 66 F6 | 	neg	arg03, #1
0d190     94 49 B1 FD | 	call	#__system___float_cmp
0d194     01 FA 55 F2 | 	cmps	result1, #1 wc
0d198     48 00 90 CD |  if_b	jmp	#LR__1053
0d19c                 | LR__1052
0d19c     0C 4E 05 F1 | 	add	fp, #12
0d1a0     A7 22 02 FB | 	rdlong	local03, fp
0d1a4     11 27 02 F6 | 	mov	local05, local03
0d1a8     01 26 66 F0 | 	shl	local05, #1
0d1ac     11 27 02 F1 | 	add	local05, local03
0d1b0     03 26 66 F0 | 	shl	local05, #3
0d1b4     34 00 00 FF 
0d1b8     38 E5 05 F1 | 	add	objptr, ##26936
0d1bc     F2 26 02 F1 | 	add	local05, objptr
0d1c0     05 26 06 F1 | 	add	local05, #5
0d1c4     13 27 C2 FA | 	rdbyte	local05, local05
0d1c8     13 25 E2 F8 | 	getbyte	local04, local05, #0
0d1cc     18 4E 05 F1 | 	add	fp, #24
0d1d0     A7 24 62 FC | 	wrlong	local04, fp
0d1d4     24 4E 85 F1 | 	sub	fp, #36
0d1d8     34 00 00 FF 
0d1dc     38 E5 85 F1 | 	sub	objptr, ##26936
0d1e0     54 00 90 FD | 	jmp	#LR__1054
0d1e4                 | LR__1053
0d1e4     44 4E 05 F1 | 	add	fp, #68
0d1e8     A7 12 02 FB | 	rdlong	arg01, fp
0d1ec     44 4E 85 F1 | 	sub	fp, #68
0d1f0     01 14 06 F6 | 	mov	arg02, #1
0d1f4     C4 49 B1 FD | 	call	#__system___float_tointeger
0d1f8     24 4E 05 F1 | 	add	fp, #36
0d1fc     A7 FA 61 FC | 	wrlong	result1, fp
0d200     18 4E 85 F1 | 	sub	fp, #24
0d204     A7 20 02 FB | 	rdlong	local02, fp
0d208     10 23 02 F6 | 	mov	local03, local02
0d20c     01 22 66 F0 | 	shl	local03, #1
0d210     10 23 02 F1 | 	add	local03, local02
0d214     03 22 66 F0 | 	shl	local03, #3
0d218     34 00 00 FF 
0d21c     38 E5 05 F1 | 	add	objptr, ##26936
0d220     F2 22 02 F1 | 	add	local03, objptr
0d224     0C 4E 85 F1 | 	sub	fp, #12
0d228     05 22 06 F1 | 	add	local03, #5
0d22c     11 FB 41 FC | 	wrbyte	result1, local03
0d230     34 00 00 FF 
0d234     38 E5 85 F1 | 	sub	objptr, ##26936
0d238                 | LR__1054
0d238                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
0d238     48 4E 05 F1 | 	add	fp, #72
0d23c     A7 12 02 FB | 	rdlong	arg01, fp
0d240     48 4E 85 F1 | 	sub	fp, #72
0d244     00 14 06 F6 | 	mov	arg02, #0
0d248     01 16 06 F6 | 	mov	arg03, #1
0d24c     D8 48 B1 FD | 	call	#__system___float_cmp
0d250     00 FA 55 F2 | 	cmps	result1, #0 wc
0d254     24 00 90 CD |  if_b	jmp	#LR__1055
0d258     48 4E 05 F1 | 	add	fp, #72
0d25c     A7 12 02 FB | 	rdlong	arg01, fp
0d260     48 4E 85 F1 | 	sub	fp, #72
0d264     00 3D 22 FF 
0d268     00 14 06 F6 | 	mov	arg02, ##1148846080
0d26c     01 16 66 F6 | 	neg	arg03, #1
0d270     B4 48 B1 FD | 	call	#__system___float_cmp
0d274     01 FA 55 F2 | 	cmps	result1, #1 wc
0d278     44 00 90 CD |  if_b	jmp	#LR__1056
0d27c                 | LR__1055
0d27c     0C 4E 05 F1 | 	add	fp, #12
0d280     A7 20 02 FB | 	rdlong	local02, fp
0d284     10 23 02 F6 | 	mov	local03, local02
0d288     01 22 66 F0 | 	shl	local03, #1
0d28c     10 23 02 F1 | 	add	local03, local02
0d290     03 22 66 F0 | 	shl	local03, #3
0d294     34 00 00 FF 
0d298     38 E5 05 F1 | 	add	objptr, ##26936
0d29c     F2 22 02 F1 | 	add	local03, objptr
0d2a0     08 22 06 F1 | 	add	local03, #8
0d2a4     11 25 02 FB | 	rdlong	local04, local03
0d2a8     64 4E 05 F1 | 	add	fp, #100
0d2ac     A7 24 62 FC | 	wrlong	local04, fp
0d2b0     70 4E 85 F1 | 	sub	fp, #112
0d2b4     34 00 00 FF 
0d2b8     38 E5 85 F1 | 	sub	objptr, ##26936
0d2bc     48 00 90 FD | 	jmp	#LR__1057
0d2c0                 | LR__1056
0d2c0     48 4E 05 F1 | 	add	fp, #72
0d2c4     A7 24 02 FB | 	rdlong	local04, fp
0d2c8     28 4E 05 F1 | 	add	fp, #40
0d2cc     A7 24 62 FC | 	wrlong	local04, fp
0d2d0     64 4E 85 F1 | 	sub	fp, #100
0d2d4     A7 20 02 FB | 	rdlong	local02, fp
0d2d8     10 23 02 F6 | 	mov	local03, local02
0d2dc     01 22 66 F0 | 	shl	local03, #1
0d2e0     10 23 02 F1 | 	add	local03, local02
0d2e4     03 22 66 F0 | 	shl	local03, #3
0d2e8     34 00 00 FF 
0d2ec     38 E5 05 F1 | 	add	objptr, ##26936
0d2f0     F2 22 02 F1 | 	add	local03, objptr
0d2f4     0C 4E 85 F1 | 	sub	fp, #12
0d2f8     08 22 06 F1 | 	add	local03, #8
0d2fc     11 25 62 FC | 	wrlong	local04, local03
0d300     34 00 00 FF 
0d304     38 E5 85 F1 | 	sub	objptr, ##26936
0d308                 | LR__1057
0d308                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
0d308     38 4E 05 F1 | 	add	fp, #56
0d30c     A7 12 02 FB | 	rdlong	arg01, fp
0d310     38 4E 85 F1 | 	sub	fp, #56
0d314     00 14 06 F6 | 	mov	arg02, #0
0d318     01 16 06 F6 | 	mov	arg03, #1
0d31c     08 48 B1 FD | 	call	#__system___float_cmp
0d320     00 FA 55 F2 | 	cmps	result1, #0 wc
0d324     24 00 90 CD |  if_b	jmp	#LR__1058
0d328     38 4E 05 F1 | 	add	fp, #56
0d32c     A7 12 02 FB | 	rdlong	arg01, fp
0d330     38 4E 85 F1 | 	sub	fp, #56
0d334     20 0E 23 FF 
0d338     00 14 06 F6 | 	mov	arg02, ##1176256512
0d33c     01 16 66 F6 | 	neg	arg03, #1
0d340     E4 47 B1 FD | 	call	#__system___float_cmp
0d344     01 FA 55 F2 | 	cmps	result1, #1 wc
0d348     48 00 90 CD |  if_b	jmp	#LR__1059
0d34c                 | LR__1058
0d34c     0C 4E 05 F1 | 	add	fp, #12
0d350     A7 22 02 FB | 	rdlong	local03, fp
0d354     11 27 02 F6 | 	mov	local05, local03
0d358     01 26 66 F0 | 	shl	local05, #1
0d35c     11 27 02 F1 | 	add	local05, local03
0d360     03 26 66 F0 | 	shl	local05, #3
0d364     34 00 00 FF 
0d368     38 E5 05 F1 | 	add	objptr, ##26936
0d36c     F2 26 02 F1 | 	add	local05, objptr
0d370     06 26 06 F1 | 	add	local05, #6
0d374     13 27 E2 FA | 	rdword	local05, local05
0d378     13 25 32 F9 | 	getword	local04, local05, #0
0d37c     1C 4E 05 F1 | 	add	fp, #28
0d380     A7 24 62 FC | 	wrlong	local04, fp
0d384     28 4E 85 F1 | 	sub	fp, #40
0d388     34 00 00 FF 
0d38c     38 E5 85 F1 | 	sub	objptr, ##26936
0d390     54 00 90 FD | 	jmp	#LR__1060
0d394                 | LR__1059
0d394     38 4E 05 F1 | 	add	fp, #56
0d398     A7 12 02 FB | 	rdlong	arg01, fp
0d39c     38 4E 85 F1 | 	sub	fp, #56
0d3a0     01 14 06 F6 | 	mov	arg02, #1
0d3a4     14 48 B1 FD | 	call	#__system___float_tointeger
0d3a8     28 4E 05 F1 | 	add	fp, #40
0d3ac     A7 FA 61 FC | 	wrlong	result1, fp
0d3b0     1C 4E 85 F1 | 	sub	fp, #28
0d3b4     A7 20 02 FB | 	rdlong	local02, fp
0d3b8     10 23 02 F6 | 	mov	local03, local02
0d3bc     01 22 66 F0 | 	shl	local03, #1
0d3c0     10 23 02 F1 | 	add	local03, local02
0d3c4     03 22 66 F0 | 	shl	local03, #3
0d3c8     34 00 00 FF 
0d3cc     38 E5 05 F1 | 	add	objptr, ##26936
0d3d0     F2 22 02 F1 | 	add	local03, objptr
0d3d4     0C 4E 85 F1 | 	sub	fp, #12
0d3d8     06 22 06 F1 | 	add	local03, #6
0d3dc     11 FB 51 FC | 	wrword	result1, local03
0d3e0     34 00 00 FF 
0d3e4     38 E5 85 F1 | 	sub	objptr, ##26936
0d3e8                 | LR__1060
0d3e8                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
0d3e8     4C 4E 05 F1 | 	add	fp, #76
0d3ec     A7 12 02 FB | 	rdlong	arg01, fp
0d3f0     4C 4E 85 F1 | 	sub	fp, #76
0d3f4     00 C0 5F FF 
0d3f8     00 14 06 F6 | 	mov	arg02, ##-1082130432
0d3fc     01 16 06 F6 | 	mov	arg03, #1
0d400     24 47 B1 FD | 	call	#__system___float_cmp
0d404     00 FA 55 F2 | 	cmps	result1, #0 wc
0d408     24 00 90 CD |  if_b	jmp	#LR__1061
0d40c     4C 4E 05 F1 | 	add	fp, #76
0d410     A7 12 02 FB | 	rdlong	arg01, fp
0d414     4C 4E 85 F1 | 	sub	fp, #76
0d418     00 C0 1F FF 
0d41c     00 14 06 F6 | 	mov	arg02, ##1065353216
0d420     01 16 66 F6 | 	neg	arg03, #1
0d424     00 47 B1 FD | 	call	#__system___float_cmp
0d428     01 FA 55 F2 | 	cmps	result1, #1 wc
0d42c     44 00 90 CD |  if_b	jmp	#LR__1062
0d430                 | LR__1061
0d430     0C 4E 05 F1 | 	add	fp, #12
0d434     A7 20 02 FB | 	rdlong	local02, fp
0d438     10 23 02 F6 | 	mov	local03, local02
0d43c     01 22 66 F0 | 	shl	local03, #1
0d440     10 23 02 F1 | 	add	local03, local02
0d444     03 22 66 F0 | 	shl	local03, #3
0d448     34 00 00 FF 
0d44c     38 E5 05 F1 | 	add	objptr, ##26936
0d450     F2 22 02 F1 | 	add	local03, objptr
0d454     10 22 06 F1 | 	add	local03, #16
0d458     11 27 02 FB | 	rdlong	local05, local03
0d45c     5C 4E 05 F1 | 	add	fp, #92
0d460     A7 26 62 FC | 	wrlong	local05, fp
0d464     68 4E 85 F1 | 	sub	fp, #104
0d468     34 00 00 FF 
0d46c     38 E5 85 F1 | 	sub	objptr, ##26936
0d470     48 00 90 FD | 	jmp	#LR__1063
0d474                 | LR__1062
0d474     4C 4E 05 F1 | 	add	fp, #76
0d478     A7 26 02 FB | 	rdlong	local05, fp
0d47c     1C 4E 05 F1 | 	add	fp, #28
0d480     A7 26 62 FC | 	wrlong	local05, fp
0d484     5C 4E 85 F1 | 	sub	fp, #92
0d488     A7 20 02 FB | 	rdlong	local02, fp
0d48c     10 23 02 F6 | 	mov	local03, local02
0d490     01 22 66 F0 | 	shl	local03, #1
0d494     10 23 02 F1 | 	add	local03, local02
0d498     03 22 66 F0 | 	shl	local03, #3
0d49c     34 00 00 FF 
0d4a0     38 E5 05 F1 | 	add	objptr, ##26936
0d4a4     F2 22 02 F1 | 	add	local03, objptr
0d4a8     0C 4E 85 F1 | 	sub	fp, #12
0d4ac     10 22 06 F1 | 	add	local03, #16
0d4b0     11 27 62 FC | 	wrlong	local05, local03
0d4b4     34 00 00 FF 
0d4b8     38 E5 85 F1 | 	sub	objptr, ##26936
0d4bc                 | LR__1063
0d4bc                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
0d4bc     50 4E 05 F1 | 	add	fp, #80
0d4c0     A7 12 02 FB | 	rdlong	arg01, fp
0d4c4     50 4E 85 F1 | 	sub	fp, #80
0d4c8     00 14 06 F6 | 	mov	arg02, #0
0d4cc     01 16 06 F6 | 	mov	arg03, #1
0d4d0     54 46 B1 FD | 	call	#__system___float_cmp
0d4d4     00 FA 55 F2 | 	cmps	result1, #0 wc
0d4d8     24 00 90 CD |  if_b	jmp	#LR__1064
0d4dc     50 4E 05 F1 | 	add	fp, #80
0d4e0     A7 12 02 FB | 	rdlong	arg01, fp
0d4e4     50 4E 85 F1 | 	sub	fp, #80
0d4e8     80 BF 21 FF 
0d4ec     00 14 06 F6 | 	mov	arg02, ##1132396544
0d4f0     01 16 66 F6 | 	neg	arg03, #1
0d4f4     30 46 B1 FD | 	call	#__system___float_cmp
0d4f8     01 FA 55 F2 | 	cmps	result1, #1 wc
0d4fc     44 00 90 CD |  if_b	jmp	#LR__1065
0d500                 | LR__1064
0d500     0C 4E 05 F1 | 	add	fp, #12
0d504     A7 22 02 FB | 	rdlong	local03, fp
0d508     11 27 02 F6 | 	mov	local05, local03
0d50c     01 26 66 F0 | 	shl	local05, #1
0d510     11 27 02 F1 | 	add	local05, local03
0d514     03 26 66 F0 | 	shl	local05, #3
0d518     34 00 00 FF 
0d51c     38 E5 05 F1 | 	add	objptr, ##26936
0d520     F2 26 02 F1 | 	add	local05, objptr
0d524     14 26 06 F1 | 	add	local05, #20
0d528     13 25 E2 FA | 	rdword	local04, local05
0d52c     20 4E 05 F1 | 	add	fp, #32
0d530     A7 24 62 FC | 	wrlong	local04, fp
0d534     2C 4E 85 F1 | 	sub	fp, #44
0d538     34 00 00 FF 
0d53c     38 E5 85 F1 | 	sub	objptr, ##26936
0d540     54 00 90 FD | 	jmp	#LR__1066
0d544                 | LR__1065
0d544     50 4E 05 F1 | 	add	fp, #80
0d548     A7 12 02 FB | 	rdlong	arg01, fp
0d54c     50 4E 85 F1 | 	sub	fp, #80
0d550     01 14 06 F6 | 	mov	arg02, #1
0d554     64 46 B1 FD | 	call	#__system___float_tointeger
0d558     2C 4E 05 F1 | 	add	fp, #44
0d55c     A7 FA 61 FC | 	wrlong	result1, fp
0d560     20 4E 85 F1 | 	sub	fp, #32
0d564     A7 20 02 FB | 	rdlong	local02, fp
0d568     10 23 02 F6 | 	mov	local03, local02
0d56c     01 22 66 F0 | 	shl	local03, #1
0d570     10 23 02 F1 | 	add	local03, local02
0d574     03 22 66 F0 | 	shl	local03, #3
0d578     34 00 00 FF 
0d57c     38 E5 05 F1 | 	add	objptr, ##26936
0d580     F2 22 02 F1 | 	add	local03, objptr
0d584     0C 4E 85 F1 | 	sub	fp, #12
0d588     14 22 06 F1 | 	add	local03, #20
0d58c     11 FB 51 FC | 	wrword	result1, local03
0d590     34 00 00 FF 
0d594     38 E5 85 F1 | 	sub	objptr, ##26936
0d598                 | LR__1066
0d598     60 4E 05 F1 | 	add	fp, #96
0d59c     A7 12 02 FB | 	rdlong	arg01, fp
0d5a0     10 4E 05 F1 | 	add	fp, #16
0d5a4     A7 14 02 FB | 	rdlong	arg02, fp
0d5a8     70 4E 85 F1 | 	sub	fp, #112
0d5ac     48 43 B1 FD | 	call	#__system___float_div
0d5b0     FD 12 02 F6 | 	mov	arg01, result1
0d5b4     01 14 06 F6 | 	mov	arg02, #1
0d5b8     00 46 B1 FD | 	call	#__system___float_tointeger
0d5bc     FD 24 02 F6 | 	mov	local04, result1
0d5c0     14 4E 05 F1 | 	add	fp, #20
0d5c4     A7 24 62 FC | 	wrlong	local04, fp
0d5c8     54 4E 05 F1 | 	add	fp, #84
0d5cc     A7 14 02 FB | 	rdlong	arg02, fp
0d5d0     68 4E 85 F1 | 	sub	fp, #104
0d5d4     00 00 23 FF 
0d5d8     00 12 06 F6 | 	mov	arg01, ##1174405120
0d5dc     14 41 B1 FD | 	call	#__system___float_mul
0d5e0     FD 12 02 F6 | 	mov	arg01, result1
0d5e4     01 14 06 F6 | 	mov	arg02, #1
0d5e8     D0 45 B1 FD | 	call	#__system___float_tointeger
0d5ec     0D 24 C6 F9 | 	decod	local04, #13
0d5f0     FD 24 02 F1 | 	add	local04, result1
0d5f4     18 4E 05 F1 | 	add	fp, #24
0d5f8     A7 24 62 FC | 	wrlong	local04, fp
0d5fc     54 4E 05 F1 | 	add	fp, #84
0d600     A7 14 02 FB | 	rdlong	arg02, fp
0d604     6C 4E 85 F1 | 	sub	fp, #108
0d608     00 3D 22 FF 
0d60c     00 12 06 F6 | 	mov	arg01, ##1148846080
0d610     E0 40 B1 FD | 	call	#__system___float_mul
0d614     FD 12 02 F6 | 	mov	arg01, result1
0d618     01 14 06 F6 | 	mov	arg02, #1
0d61c     9C 45 B1 FD | 	call	#__system___float_tointeger
0d620     1C 4E 05 F1 | 	add	fp, #28
0d624     A7 FA 61 FC | 	wrlong	result1, fp
0d628     57 00 00 FF 
0d62c     10 E4 05 F1 | 	add	objptr, ##44560
0d630     F2 24 02 FB | 	rdlong	local04, objptr
0d634     57 00 00 FF 
0d638     10 E4 85 F1 | 	sub	objptr, ##44560
0d63c     10 4E 85 F1 | 	sub	fp, #16
0d640     A7 20 02 FB | 	rdlong	local02, fp
0d644     06 20 66 F0 | 	shl	local02, #6
0d648     10 25 02 F1 | 	add	local04, local02
0d64c     04 4E 85 F1 | 	sub	fp, #4
0d650     A7 24 62 FC | 	wrlong	local04, fp
0d654     5C 4E 05 F1 | 	add	fp, #92
0d658     A7 12 02 FB | 	rdlong	arg01, fp
0d65c     64 4E 85 F1 | 	sub	fp, #100
0d660     72 3F 20 FF 
0d664     EA 14 06 F6 | 	mov	arg02, ##1082057962
0d668     88 40 B1 FD | 	call	#__system___float_mul
0d66c     FD 12 02 F6 | 	mov	arg01, result1
0d670     01 14 06 F6 | 	mov	arg02, #1
0d674     44 45 B1 FD | 	call	#__system___float_tointeger
0d678     10 4E 05 F1 | 	add	fp, #16
0d67c     A7 FA 61 FC | 	wrlong	result1, fp
0d680                 | ' 
0d680                 | ' speed=round(speed_coeff/slen)
0d680                 | ' ipan=8192+round(8192*pan)
0d680                 | ' ivol=round(1000.0*vol)
0d680                 | ' base2=base+64*channel
0d680                 | ' skip=round(freq*3.9827219) 
0d680                 | ' if wave <8 then 
0d680     10 4E 05 F1 | 	add	fp, #16
0d684     A7 24 02 FB | 	rdlong	local04, fp
0d688     20 4E 85 F1 | 	sub	fp, #32
0d68c     08 24 56 F2 | 	cmps	local04, #8 wc
0d690     40 00 90 3D |  if_ae	jmp	#LR__1067
0d694     08 4E 05 F1 | 	add	fp, #8
0d698     A7 12 02 FB | 	rdlong	arg01, fp
0d69c     08 12 06 F1 | 	add	arg01, #8
0d6a0     18 4E 05 F1 | 	add	fp, #24
0d6a4     A7 14 02 FB | 	rdlong	arg02, fp
0d6a8     20 4E 85 F1 | 	sub	fp, #32
0d6ac     0B 14 66 F0 | 	shl	arg02, #11
0d6b0     0C 00 00 FF 
0d6b4     D8 E4 05 F1 | 	add	objptr, ##6360
0d6b8     F2 14 02 F1 | 	add	arg02, objptr
0d6bc     0C 00 00 FF 
0d6c0     D8 E4 85 F1 | 	sub	objptr, ##6360
0d6c4     00 00 60 FF 
0d6c8     00 14 06 F1 | 	add	arg02, ##-1073741824
0d6cc     09 15 62 FC | 	wrlong	arg02, arg01
0d6d0     18 00 90 FD | 	jmp	#LR__1068
0d6d4                 | LR__1067
0d6d4     08 4E 05 F1 | 	add	fp, #8
0d6d8     A7 12 02 FB | 	rdlong	arg01, fp
0d6dc     08 4E 85 F1 | 	sub	fp, #8
0d6e0     08 12 06 F1 | 	add	arg01, #8
0d6e4     00 00 E4 FF 
0d6e8     09 01 68 FC | 	wrlong	##-939524096, arg01
0d6ec                 | LR__1068
0d6ec     08 4E 05 F1 | 	add	fp, #8
0d6f0     A7 12 02 FB | 	rdlong	arg01, fp
0d6f4     10 12 06 F1 | 	add	arg01, #16
0d6f8     04 00 80 FF 
0d6fc     09 01 68 FC | 	wrlong	##2048, arg01
0d700     A7 12 02 FB | 	rdlong	arg01, fp
0d704     0C 12 06 F1 | 	add	arg01, #12
0d708     09 01 68 FC | 	wrlong	#0, arg01
0d70c     A7 12 02 FB | 	rdlong	arg01, fp
0d710     14 12 06 F1 | 	add	arg01, #20
0d714     14 4E 05 F1 | 	add	fp, #20
0d718     A7 14 02 FB | 	rdlong	arg02, fp
0d71c     09 15 52 FC | 	wrword	arg02, arg01
0d720     14 4E 85 F1 | 	sub	fp, #20
0d724     A7 12 02 FB | 	rdlong	arg01, fp
0d728     16 12 06 F1 | 	add	arg01, #22
0d72c     10 4E 05 F1 | 	add	fp, #16
0d730     A7 14 02 FB | 	rdlong	arg02, fp
0d734     09 15 52 FC | 	wrword	arg02, arg01
0d738                 | '   
0d738                 | ' lpoke base2+16,2048
0d738                 | ' lpoke base2+12,0
0d738                 | ' dpoke base2+20,ivol 
0d738                 | ' dpoke base2+22,ipan 
0d738                 | ' if wave<8 then
0d738     08 4E 05 F1 | 	add	fp, #8
0d73c     A7 24 02 FB | 	rdlong	local04, fp
0d740     20 4E 85 F1 | 	sub	fp, #32
0d744     08 24 56 F2 | 	cmps	local04, #8 wc
0d748     2C 00 90 3D |  if_ae	jmp	#LR__1069
0d74c     08 4E 05 F1 | 	add	fp, #8
0d750     A7 12 02 FB | 	rdlong	arg01, fp
0d754     18 12 06 F1 | 	add	arg01, #24
0d758     09 29 58 FC | 	wrword	#20, arg01
0d75c     A7 12 02 FB | 	rdlong	arg01, fp
0d760     1A 12 06 F1 | 	add	arg01, #26
0d764     08 4E 05 F1 | 	add	fp, #8
0d768     A7 14 02 FB | 	rdlong	arg02, fp
0d76c     10 4E 85 F1 | 	sub	fp, #16
0d770     09 15 52 FC | 	wrword	arg02, arg01
0d774     48 00 90 FD | 	jmp	#LR__1070
0d778                 | LR__1069
0d778     08 4E 05 F1 | 	add	fp, #8
0d77c     A7 24 02 FB | 	rdlong	local04, fp
0d780     18 24 06 F1 | 	add	local04, #24
0d784     5C 4E 05 F1 | 	add	fp, #92
0d788     A7 14 02 FB | 	rdlong	arg02, fp
0d78c     64 4E 85 F1 | 	sub	fp, #100
0d790     58 D0 24 FF 
0d794     B0 13 06 F6 | 	mov	arg01, ##1235268016
0d798     5C 41 B1 FD | 	call	#__system___float_div
0d79c     FD 12 02 F6 | 	mov	arg01, result1
0d7a0     01 14 06 F6 | 	mov	arg02, #1
0d7a4     14 44 B1 FD | 	call	#__system___float_tointeger
0d7a8     12 FB 51 FC | 	wrword	result1, local04
0d7ac     08 4E 05 F1 | 	add	fp, #8
0d7b0     A7 12 02 FB | 	rdlong	arg01, fp
0d7b4     08 4E 85 F1 | 	sub	fp, #8
0d7b8     1A 12 06 F1 | 	add	arg01, #26
0d7bc     09 01 5A FC | 	wrword	#256, arg01
0d7c0                 | LR__1070
0d7c0     08 4E 05 F1 | 	add	fp, #8
0d7c4     A7 12 02 FB | 	rdlong	arg01, fp
0d7c8     20 12 06 F1 | 	add	arg01, #32
0d7cc     09 01 68 FC | 	wrlong	#0, arg01
0d7d0                 | ' 'dpoke base2+28,$4000_0000
0d7d0                 | ' lpoke base2+32,0 
0d7d0                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
0d7d0     1C 4E 05 F1 | 	add	fp, #28
0d7d4     A7 24 02 FB | 	rdlong	local04, fp
0d7d8     24 4E 85 F1 | 	sub	fp, #36
0d7dc     08 24 0E F2 | 	cmp	local04, #8 wz
0d7e0     18 00 90 5D |  if_ne	jmp	#LR__1071
0d7e4     08 4E 05 F1 | 	add	fp, #8
0d7e8     A7 12 02 FB | 	rdlong	arg01, fp
0d7ec     08 4E 85 F1 | 	sub	fp, #8
0d7f0     24 12 06 F1 | 	add	arg01, #36
0d7f4     09 01 68 FC | 	wrlong	#0, arg01
0d7f8     34 00 90 FD | 	jmp	#LR__1072
0d7fc                 | LR__1071
0d7fc     08 4E 05 F1 | 	add	fp, #8
0d800     A7 12 02 FB | 	rdlong	arg01, fp
0d804     24 12 06 F1 | 	add	arg01, #36
0d808     1C 4E 05 F1 | 	add	fp, #28
0d80c     A7 14 02 FB | 	rdlong	arg02, fp
0d810     24 4E 85 F1 | 	sub	fp, #36
0d814     09 14 66 F0 | 	shl	arg02, #9
0d818     2C 00 00 FF 
0d81c     D8 E4 05 F1 | 	add	objptr, ##22744
0d820     F2 14 02 F1 | 	add	arg02, objptr
0d824     2C 00 00 FF 
0d828     D8 E4 85 F1 | 	sub	objptr, ##22744
0d82c     09 15 62 FC | 	wrlong	arg02, arg01
0d830                 | LR__1072
0d830     08 4E 05 F1 | 	add	fp, #8
0d834     A7 12 02 FB | 	rdlong	arg01, fp
0d838     28 12 06 F1 | 	add	arg01, #40
0d83c     0C 4E 05 F1 | 	add	fp, #12
0d840     A7 14 02 FB | 	rdlong	arg02, fp
0d844     09 15 62 FC | 	wrlong	arg02, arg01
0d848     0C 4E 85 F1 | 	sub	fp, #12
0d84c     A7 12 02 FB | 	rdlong	arg01, fp
0d850     2C 12 06 F1 | 	add	arg01, #44
0d854     24 4E 05 F1 | 	add	fp, #36
0d858     A7 14 02 FB | 	rdlong	arg02, fp
0d85c     09 15 62 FC | 	wrlong	arg02, arg01
0d860                 | ' lpoke base2+40,speed' speed
0d860                 | ' lpoke base2+44,sus 'len
0d860                 | ' 
0d860                 | ' if delay>0 then waitms(delay) ' : print "wait "; round(params(6)) : l
0d860     04 4E 85 F1 | 	sub	fp, #4
0d864     A7 24 02 FB | 	rdlong	local04, fp
0d868     28 4E 85 F1 | 	sub	fp, #40
0d86c     01 24 56 F2 | 	cmps	local04, #1 wc
0d870     28 4E 05 31 |  if_ae	add	fp, #40
0d874     A7 12 02 3B |  if_ae	rdlong	arg01, fp
0d878     28 4E 85 31 |  if_ae	sub	fp, #40
0d87c     E8 15 B1 3D |  if_ae	call	#__system___waitms
0d880     A7 F0 03 F6 | 	mov	ptra, fp
0d884     B2 00 A0 FD | 	call	#popregs_
0d888                 | _do_play_ret
0d888     2D 00 64 FD | 	ret
0d88c                 | 
0d88c                 | ' 
0d88c                 | ' sub do_release
0d88c                 | _do_release
0d88c     00 4A 05 F6 | 	mov	COUNT_, #0
0d890     A8 00 A0 FD | 	call	#pushregs_
0d894     10 F0 07 F1 | 	add	ptra, #16
0d898     C4 CF BF FD | 	call	#_pop
0d89c     FF 14 02 F6 | 	mov	arg02, result3
0d8a0     A7 FA 61 FC | 	wrlong	result1, fp
0d8a4     04 4E 05 F1 | 	add	fp, #4
0d8a8     A7 FC 61 FC | 	wrlong	result2, fp
0d8ac     04 4E 05 F1 | 	add	fp, #4
0d8b0     A7 14 62 FC | 	wrlong	arg02, fp
0d8b4     08 4E 85 F1 | 	sub	fp, #8
0d8b8     A7 12 02 F6 | 	mov	arg01, fp
0d8bc     54 5C B0 FD | 	call	#_converttoint
0d8c0     0C 4E 05 F1 | 	add	fp, #12
0d8c4     A7 FA 61 FC | 	wrlong	result1, fp
0d8c8                 | ' t1=pop()
0d8c8                 | ' channel=converttoint(t1)
0d8c8                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255 ' else printerror
0d8c8     0C 4E 85 F1 | 	sub	fp, #12
0d8cc     00 FA 55 F2 | 	cmps	result1, #0 wc
0d8d0     44 00 90 CD |  if_b	jmp	#LR__1080
0d8d4     0C 4E 05 F1 | 	add	fp, #12
0d8d8     A7 14 02 FB | 	rdlong	arg02, fp
0d8dc     0C 4E 85 F1 | 	sub	fp, #12
0d8e0     08 14 56 F2 | 	cmps	arg02, #8 wc
0d8e4     30 00 90 3D |  if_ae	jmp	#LR__1080
0d8e8     57 00 00 FF 
0d8ec     10 E4 05 F1 | 	add	objptr, ##44560
0d8f0     F2 12 02 FB | 	rdlong	arg01, objptr
0d8f4     57 00 00 FF 
0d8f8     10 E4 85 F1 | 	sub	objptr, ##44560
0d8fc     0C 4E 05 F1 | 	add	fp, #12
0d900     A7 14 02 FB | 	rdlong	arg02, fp
0d904     0C 4E 85 F1 | 	sub	fp, #12
0d908     06 14 66 F0 | 	shl	arg02, #6
0d90c     0A 13 02 F1 | 	add	arg01, arg02
0d910     2C 12 06 F1 | 	add	arg01, #44
0d914     09 FF 69 FC | 	wrlong	#255, arg01
0d918                 | LR__1080
0d918     A7 F0 03 F6 | 	mov	ptra, fp
0d91c     B2 00 A0 FD | 	call	#popregs_
0d920                 | _do_release_ret
0d920     2D 00 64 FD | 	ret
0d924                 | 
0d924                 | ' 
0d924                 | ' 
0d924                 | ' sub do_defsnd
0d924                 | _do_defsnd
0d924     05 4A 05 F6 | 	mov	COUNT_, #5
0d928     A8 00 A0 FD | 	call	#pushregs_
0d92c     88 F0 07 F1 | 	add	ptra, #136
0d930     6A 00 00 FF 
0d934     80 E4 05 F1 | 	add	objptr, ##54400
0d938     F2 1A 02 FB | 	rdlong	arg05, objptr
0d93c     0D 19 02 F6 | 	mov	arg04, arg05
0d940     01 18 66 F0 | 	shl	arg04, #1
0d944     0D 19 02 F1 | 	add	arg04, arg05
0d948     02 18 66 F0 | 	shl	arg04, #2
0d94c     03 00 00 FF 
0d950     04 E4 85 F1 | 	sub	objptr, ##1540
0d954     F2 18 02 F1 | 	add	arg04, objptr
0d958     0C 1B 02 FB | 	rdlong	arg05, arg04
0d95c     A7 1A 62 FC | 	wrlong	arg05, fp
0d960                 | ' 
0d960                 | ' numpar=compiledline(lineptr_e).result.uresult
0d960                 | ' 
0d960                 | ' 
0d960                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0d960                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0d960                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0d960                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0d960                 | ' 
0d960                 | ' if numpar<2 then return
0d960     02 1A 56 F2 | 	cmps	arg05, #2 wc
0d964     67 00 00 FF 
0d968     7C E4 85 F1 | 	sub	objptr, ##52860
0d96c     A0 09 90 CD |  if_b	jmp	#LR__1118
0d970                 | ' 
0d970                 | '   
0d970                 | ' if numpar=2 then
0d970     A7 1A 02 FB | 	rdlong	arg05, fp
0d974     02 1A 0E F2 | 	cmp	arg05, #2 wz
0d978     0C 04 90 5D |  if_ne	jmp	#LR__1101
0d97c     E0 CE BF FD | 	call	#_pop
0d980     FF 1A 02 F6 | 	mov	arg05, result3
0d984     2C 4E 05 F1 | 	add	fp, #44
0d988     A7 FA 61 FC | 	wrlong	result1, fp
0d98c     04 4E 05 F1 | 	add	fp, #4
0d990     A7 FC 61 FC | 	wrlong	result2, fp
0d994     04 4E 05 F1 | 	add	fp, #4
0d998     A7 1A 62 FC | 	wrlong	arg05, fp
0d99c                 | '   t1=pop()
0d99c                 | '   if t1.result_type=result_string2 then 
0d99c     34 4E 85 F1 | 	sub	fp, #52
0d9a0     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0d9a4     20 00 90 5D |  if_ne	jmp	#LR__1090
0d9a8     2C 4E 05 F1 | 	add	fp, #44
0d9ac     A7 12 02 FB | 	rdlong	arg01, fp
0d9b0     2C 4E 85 F1 | 	sub	fp, #44
0d9b4     38 13 B0 FD | 	call	#_convertstring
0d9b8     38 4E 05 F1 | 	add	fp, #56
0d9bc     A7 FA 61 FC | 	wrlong	result1, fp
0d9c0     38 4E 85 F1 | 	sub	fp, #56
0d9c4     58 00 90 FD | 	jmp	#LR__1093
0d9c8                 | LR__1090
0d9c8     34 4E 05 F1 | 	add	fp, #52
0d9cc     A7 1A 02 FB | 	rdlong	arg05, fp
0d9d0     34 4E 85 F1 | 	sub	fp, #52
0d9d4     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0d9d8     18 00 90 5D |  if_ne	jmp	#LR__1091
0d9dc     2C 4E 05 F1 | 	add	fp, #44
0d9e0     A7 1A 02 FB | 	rdlong	arg05, fp
0d9e4     0C 4E 05 F1 | 	add	fp, #12
0d9e8     A7 1A 62 FC | 	wrlong	arg05, fp
0d9ec     38 4E 85 F1 | 	sub	fp, #56
0d9f0     2C 00 90 FD | 	jmp	#LR__1092
0d9f4                 | LR__1091
0d9f4     73 01 00 FF 
0d9f8     99 1B 06 F6 | 	mov	arg05, ##@LR__5141
0d9fc     38 4E 05 F1 | 	add	fp, #56
0da00     A7 1A 62 FC | 	wrlong	arg05, fp
0da04     0C 4E 85 F1 | 	sub	fp, #12
0da08     A7 12 02 F6 | 	mov	arg01, fp
0da0c     2C 4E 85 F1 | 	sub	fp, #44
0da10     00 5B B0 FD | 	call	#_converttoint
0da14     14 4E 05 F1 | 	add	fp, #20
0da18     A7 FA 61 FC | 	wrlong	result1, fp
0da1c     14 4E 85 F1 | 	sub	fp, #20
0da20                 | LR__1092
0da20                 | LR__1093
0da20                 | ' 
0da20                 | '     
0da20                 | '   if s<>"" then 
0da20     38 4E 05 F1 | 	add	fp, #56
0da24     A7 12 02 FB | 	rdlong	arg01, fp
0da28     38 4E 85 F1 | 	sub	fp, #56
0da2c     73 01 00 FF 
0da30     9A 15 06 F6 | 	mov	arg02, ##@LR__5142
0da34     64 11 B1 FD | 	call	#__system___string_cmp
0da38     00 FA 0D F2 | 	cmp	result1, #0 wz
0da3c     88 01 90 AD |  if_e	jmp	#LR__1095
0da40     1C CE BF FD | 	call	#_pop
0da44     FF 1A 02 F6 | 	mov	arg05, result3
0da48     2C 4E 05 F1 | 	add	fp, #44
0da4c     A7 FA 61 FC | 	wrlong	result1, fp
0da50     04 4E 05 F1 | 	add	fp, #4
0da54     A7 FC 61 FC | 	wrlong	result2, fp
0da58     04 4E 05 F1 | 	add	fp, #4
0da5c     A7 1A 62 FC | 	wrlong	arg05, fp
0da60     08 4E 85 F1 | 	sub	fp, #8
0da64     A7 12 02 F6 | 	mov	arg01, fp
0da68     2C 4E 85 F1 | 	sub	fp, #44
0da6c     A4 5A B0 FD | 	call	#_converttoint
0da70     10 4E 05 F1 | 	add	fp, #16
0da74     A7 FA 61 FC | 	wrlong	result1, fp
0da78     10 4E 85 F1 | 	sub	fp, #16
0da7c                 | '     t1=pop()
0da7c                 | '     channel=converttoint(t1) 
0da7c                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0da7c     09 12 06 F6 | 	mov	arg01, #9
0da80     B8 60 B1 FD | 	call	#__system__close
0da84     09 1E 06 F6 | 	mov	local01, #9
0da88     73 01 00 FF 
0da8c     9B 13 06 F6 | 	mov	arg01, ##@LR__5143
0da90     38 4E 05 F1 | 	add	fp, #56
0da94     A7 14 02 FB | 	rdlong	arg02, fp
0da98     38 4E 85 F1 | 	sub	fp, #56
0da9c     30 11 B1 FD | 	call	#__system___string_concat
0daa0     FD 14 02 F6 | 	mov	arg02, result1
0daa4     0F 13 02 F6 | 	mov	arg01, local01
0daa8     00 16 06 F6 | 	mov	arg03, #0
0daac     C8 1C B1 FD | 	call	#__system___basic_open_string
0dab0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0dab4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0dab8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0dabc     7A 00 00 FF 
0dac0     30 E4 05 F1 | 	add	objptr, ##62512
0dac4     F2 FA 61 FC | 	wrlong	result1, objptr
0dac8                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0dac8     7A 00 00 FF 
0dacc     30 E4 85 F1 | 	sub	objptr, ##62512
0dad0     B0 00 90 AD |  if_e	jmp	#LR__1094
0dad4     00 12 06 F6 | 	mov	arg01, #0
0dad8     30 6A B1 FD | 	call	#__system___getiolock_0484
0dadc     FD 12 02 F6 | 	mov	arg01, result1
0dae0     90 10 B1 FD | 	call	#__system___lockmem
0dae4     73 01 00 FF 
0dae8     A8 15 06 F6 | 	mov	arg02, ##@LR__5144
0daec     00 12 06 F6 | 	mov	arg01, #0
0daf0     00 16 06 F6 | 	mov	arg03, #0
0daf4     84 1D B1 FD | 	call	#__system___basic_print_string
0daf8     7A 00 00 FF 
0dafc     30 E4 05 F1 | 	add	objptr, ##62512
0db00     F2 14 02 FB | 	rdlong	arg02, objptr
0db04     7A 00 00 FF 
0db08     30 E4 85 F1 | 	sub	objptr, ##62512
0db0c     00 12 06 F6 | 	mov	arg01, #0
0db10     00 16 06 F6 | 	mov	arg03, #0
0db14     0A 18 06 F6 | 	mov	arg04, #10
0db18     A4 1D B1 FD | 	call	#__system___basic_print_integer
0db1c     73 01 00 FF 
0db20     B6 15 06 F6 | 	mov	arg02, ##@LR__5145
0db24     00 12 06 F6 | 	mov	arg01, #0
0db28     00 16 06 F6 | 	mov	arg03, #0
0db2c     4C 1D B1 FD | 	call	#__system___basic_print_string
0db30     00 1E 06 F6 | 	mov	local01, #0
0db34     7A 00 00 FF 
0db38     30 E4 05 F1 | 	add	objptr, ##62512
0db3c     F2 12 02 FB | 	rdlong	arg01, objptr
0db40     7A 00 00 FF 
0db44     30 E4 85 F1 | 	sub	objptr, ##62512
0db48     BC 36 B1 FD | 	call	#__system___strerror
0db4c     FD 14 02 F6 | 	mov	arg02, result1
0db50     0F 13 02 F6 | 	mov	arg01, local01
0db54     00 16 06 F6 | 	mov	arg03, #0
0db58     20 1D B1 FD | 	call	#__system___basic_print_string
0db5c     00 12 06 F6 | 	mov	arg01, #0
0db60     0A 14 06 F6 | 	mov	arg02, #10
0db64     00 16 06 F6 | 	mov	arg03, #0
0db68     B8 1C B1 FD | 	call	#__system___basic_print_char
0db6c     00 12 06 F6 | 	mov	arg01, #0
0db70     98 69 B1 FD | 	call	#__system___getiolock_0484
0db74     FD 00 68 FC | 	wrlong	#0, result1
0db78     09 12 06 F6 | 	mov	arg01, #9
0db7c     BC 5F B1 FD | 	call	#__system__close
0db80     8C 07 90 FD | 	jmp	#LR__1118
0db84                 | LR__1094
0db84                 | '     get #9,17,samplebuf(channel,0),1024
0db84     10 4E 05 F1 | 	add	fp, #16
0db88     A7 16 02 FB | 	rdlong	arg03, fp
0db8c     10 4E 85 F1 | 	sub	fp, #16
0db90     0B 16 66 F0 | 	shl	arg03, #11
0db94     0C 00 00 FF 
0db98     D8 E4 05 F1 | 	add	objptr, ##6360
0db9c     F2 16 02 F1 | 	add	arg03, objptr
0dba0     09 12 06 F6 | 	mov	arg01, #9
0dba4     11 14 06 F6 | 	mov	arg02, #17
0dba8     0A 18 C6 F9 | 	decod	arg04, #10
0dbac     02 1A 06 F6 | 	mov	arg05, #2
0dbb0     0C 00 00 FF 
0dbb4     D8 E4 85 F1 | 	sub	objptr, ##6360
0dbb8     D0 1D B1 FD | 	call	#__system___basic_get
0dbbc                 | '     close #9
0dbbc     09 12 06 F6 | 	mov	arg01, #9
0dbc0     78 5F B1 FD | 	call	#__system__close
0dbc4                 | '                                                                        'for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0dbc4                 | '     return
0dbc4     48 07 90 FD | 	jmp	#LR__1118
0dbc8                 | LR__1095
0dbc8                 | '     if wptr < ($80000 - 2048) then 
0dbc8     14 4E 05 F1 | 	add	fp, #20
0dbcc     A7 1E 02 FB | 	rdlong	local01, fp
0dbd0     14 4E 85 F1 | 	sub	fp, #20
0dbd4     FC 03 00 FF 
0dbd8     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0dbdc     80 00 90 3D |  if_ae	jmp	#LR__1098
0dbe0                 | '       for i=0 to 1023: samplebuf(channel,i)=dpeek(wptr+2*i): next i
0dbe0     04 4E 05 F1 | 	add	fp, #4
0dbe4     A7 00 68 FC | 	wrlong	#0, fp
0dbe8     04 4E 85 F1 | 	sub	fp, #4
0dbec     0C 00 00 FF 
0dbf0     D8 E4 05 F1 | 	add	objptr, ##6360
0dbf4     97 2E 48 FB | 	callpa	#(@LR__1097-@LR__1096)>>2,fcache_load_ptr_
0dbf8                 | LR__1096
0dbf8     10 4E 05 F1 | 	add	fp, #16
0dbfc     A7 1E 02 FB | 	rdlong	local01, fp
0dc00     0B 1E 66 F0 | 	shl	local01, #11
0dc04     F2 1E 02 F1 | 	add	local01, objptr
0dc08     0C 4E 85 F1 | 	sub	fp, #12
0dc0c     A7 1A 02 FB | 	rdlong	arg05, fp
0dc10     0D 19 02 F6 | 	mov	arg04, arg05
0dc14     01 18 66 F0 | 	shl	arg04, #1
0dc18     0F 19 02 F1 | 	add	arg04, local01
0dc1c     10 4E 05 F1 | 	add	fp, #16
0dc20     A7 12 02 FB | 	rdlong	arg01, fp
0dc24     01 1A 66 F0 | 	shl	arg05, #1
0dc28     0D 13 02 F1 | 	add	arg01, arg05
0dc2c     09 FB E1 FA | 	rdword	result1, arg01
0dc30     0C FB 51 FC | 	wrword	result1, arg04
0dc34     10 4E 85 F1 | 	sub	fp, #16
0dc38     A7 1E 02 FB | 	rdlong	local01, fp
0dc3c     01 1E 06 F1 | 	add	local01, #1
0dc40     A7 1E 62 FC | 	wrlong	local01, fp
0dc44     04 4E 85 F1 | 	sub	fp, #4
0dc48     02 00 00 FF 
0dc4c     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0dc50     A4 FF 9F CD |  if_b	jmp	#LR__1096
0dc54                 | LR__1097
0dc54     0C 00 00 FF 
0dc58     D8 E4 85 F1 | 	sub	objptr, ##6360
0dc5c     B0 06 90 FD | 	jmp	#LR__1118
0dc60                 | LR__1098
0dc60                 | '       for i=0 to 1023 : samplebuf(channel,i)=psdpeek(wptr+2*i) : next i
0dc60     04 4E 05 F1 | 	add	fp, #4
0dc64     A7 00 68 FC | 	wrlong	#0, fp
0dc68     04 4E 85 F1 | 	sub	fp, #4
0dc6c                 | LR__1099
0dc6c     10 4E 05 F1 | 	add	fp, #16
0dc70     A7 1A 02 FB | 	rdlong	arg05, fp
0dc74     0B 1A 66 F0 | 	shl	arg05, #11
0dc78     0C 00 00 FF 
0dc7c     D8 E4 05 F1 | 	add	objptr, ##6360
0dc80     F2 1A 02 F1 | 	add	arg05, objptr
0dc84     0C 4E 85 F1 | 	sub	fp, #12
0dc88     A7 18 02 FB | 	rdlong	arg04, fp
0dc8c     0C 21 02 F6 | 	mov	local02, arg04
0dc90     01 20 66 F0 | 	shl	local02, #1
0dc94     0D 21 02 F1 | 	add	local02, arg05
0dc98     10 4E 05 F1 | 	add	fp, #16
0dc9c     A7 12 02 FB | 	rdlong	arg01, fp
0dca0     14 4E 85 F1 | 	sub	fp, #20
0dca4     01 18 66 F0 | 	shl	arg04, #1
0dca8     0C 13 02 F1 | 	add	arg01, arg04
0dcac     0C 00 00 FF 
0dcb0     D8 E4 85 F1 | 	sub	objptr, ##6360
0dcb4     2C CD B0 FD | 	call	#_psdpeek
0dcb8     10 FB 51 FC | 	wrword	result1, local02
0dcbc     04 4E 05 F1 | 	add	fp, #4
0dcc0     A7 22 02 FB | 	rdlong	local03, fp
0dcc4     01 22 06 F1 | 	add	local03, #1
0dcc8     A7 22 62 FC | 	wrlong	local03, fp
0dccc     04 4E 85 F1 | 	sub	fp, #4
0dcd0     02 00 00 FF 
0dcd4     00 22 56 F2 | 	cmps	local03, ##1024 wc
0dcd8     90 FF 9F CD |  if_b	jmp	#LR__1099
0dcdc                 | '     return 
0dcdc     30 06 90 FD | 	jmp	#LR__1118
0dce0                 | '   
0dce0                 | '   par=converttoint(t1)  : print par
0dce0                 | '   t1=pop()
0dce0                 | '   channel=converttoint(t1)  
0dce0                 | '   if par=0 then for i=0 to 1023: samplebuf(channel,i)=round(32600*sin(1.0/512*3.14159265359*i)) : next i
0dce0                 | LR__1100
0dce0     10 4E 05 F1 | 	add	fp, #16
0dce4     A7 22 02 FB | 	rdlong	local03, fp
0dce8     0B 22 66 F0 | 	shl	local03, #11
0dcec     0C 00 00 FF 
0dcf0     D8 E4 05 F1 | 	add	objptr, ##6360
0dcf4     F2 22 02 F1 | 	add	local03, objptr
0dcf8     0C 4E 85 F1 | 	sub	fp, #12
0dcfc     A7 12 02 FB | 	rdlong	arg01, fp
0dd00     09 21 02 F6 | 	mov	local02, arg01
0dd04     01 20 66 F0 | 	shl	local02, #1
0dd08     11 21 02 F1 | 	add	local02, local03
0dd0c     04 4E 85 F1 | 	sub	fp, #4
0dd10     0C 00 00 FF 
0dd14     D8 E4 85 F1 | 	sub	objptr, ##6360
0dd18     09 13 52 F6 | 	abs	arg01, arg01 wc
0dd1c     1F 24 C6 C9 |  if_b	decod	local04, #31
0dd20     00 24 06 36 |  if_ae	mov	local04, #0
0dd24     C8 35 B1 FD | 	call	#__system___float_fromuns
0dd28     12 FB 61 F5 | 	xor	result1, local04
0dd2c     FD 14 02 F6 | 	mov	arg02, result1
0dd30     87 E4 1D FF 
0dd34     DB 13 06 F6 | 	mov	arg01, ##1003032539
0dd38     B8 39 B1 FD | 	call	#__system___float_mul
0dd3c     FD 12 02 F6 | 	mov	arg01, result1
0dd40     EC 42 B1 FD | 	call	#__system____builtin_sinf
0dd44     FD 14 02 F6 | 	mov	arg02, result1
0dd48     58 7F 23 FF 
0dd4c     00 12 06 F6 | 	mov	arg01, ##1191096320
0dd50     A0 39 B1 FD | 	call	#__system___float_mul
0dd54     FD 12 02 F6 | 	mov	arg01, result1
0dd58     01 14 06 F6 | 	mov	arg02, #1
0dd5c     5C 3E B1 FD | 	call	#__system___float_tointeger
0dd60     10 FB 51 FC | 	wrword	result1, local02
0dd64     04 4E 05 F1 | 	add	fp, #4
0dd68     A7 22 02 FB | 	rdlong	local03, fp
0dd6c     01 22 06 F1 | 	add	local03, #1
0dd70     A7 22 62 FC | 	wrlong	local03, fp
0dd74     04 4E 85 F1 | 	sub	fp, #4
0dd78     02 00 00 FF 
0dd7c     00 22 56 F2 | 	cmps	local03, ##1024 wc
0dd80     5C FF 9F CD |  if_b	jmp	#LR__1100
0dd84                 | '                                                                            '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0dd84                 | '   return
0dd84     88 05 90 FD | 	jmp	#LR__1118
0dd88                 | LR__1101
0dd88                 | ' for i=0 to 15 : harm(i)=0: next i  
0dd88     04 4E 05 F1 | 	add	fp, #4
0dd8c     A7 00 68 FC | 	wrlong	#0, fp
0dd90     97 16 48 FB | 	callpa	#(@LR__1103-@LR__1102)>>2,fcache_load_ptr_
0dd94                 | LR__1102
0dd94     A7 22 02 FB | 	rdlong	local03, fp
0dd98     02 22 66 F0 | 	shl	local03, #2
0dd9c     38 4E 05 F1 | 	add	fp, #56
0dda0     A7 22 02 F1 | 	add	local03, fp
0dda4     11 01 68 FC | 	wrlong	#0, local03
0dda8     38 4E 85 F1 | 	sub	fp, #56
0ddac     A7 22 02 FB | 	rdlong	local03, fp
0ddb0     01 22 06 F1 | 	add	local03, #1
0ddb4     A7 22 62 FC | 	wrlong	local03, fp
0ddb8     10 22 56 F2 | 	cmps	local03, #16 wc
0ddbc     D4 FF 9F CD |  if_b	jmp	#LR__1102
0ddc0                 | LR__1103
0ddc0     04 4E 85 F1 | 	sub	fp, #4
0ddc4                 | ' for i=numpar to 2 step -1 
0ddc4     A7 1E 02 FB | 	rdlong	local01, fp
0ddc8     04 4E 05 F1 | 	add	fp, #4
0ddcc     A7 1E 62 FC | 	wrlong	local01, fp
0ddd0     04 4E 85 F1 | 	sub	fp, #4
0ddd4                 | LR__1104
0ddd4     88 CA BF FD | 	call	#_pop
0ddd8     2C 4E 05 F1 | 	add	fp, #44
0dddc     A7 FA 61 FC | 	wrlong	result1, fp
0dde0     04 4E 05 F1 | 	add	fp, #4
0dde4     A7 FC 61 FC | 	wrlong	result2, fp
0dde8     04 4E 05 F1 | 	add	fp, #4
0ddec     A7 FE 61 FC | 	wrlong	result3, fp
0ddf0     30 4E 85 F1 | 	sub	fp, #48
0ddf4     A7 22 02 FB | 	rdlong	local03, fp
0ddf8     02 22 86 F1 | 	sub	local03, #2
0ddfc     02 22 66 F0 | 	shl	local03, #2
0de00     38 4E 05 F1 | 	add	fp, #56
0de04     A7 22 02 F1 | 	add	local03, fp
0de08     10 4E 85 F1 | 	sub	fp, #16
0de0c     A7 12 02 F6 | 	mov	arg01, fp
0de10     2C 4E 85 F1 | 	sub	fp, #44
0de14     A8 57 B0 FD | 	call	#_converttofloat
0de18     11 FB 61 FC | 	wrlong	result1, local03
0de1c     04 4E 05 F1 | 	add	fp, #4
0de20     A7 22 02 FB | 	rdlong	local03, fp
0de24     01 22 86 F1 | 	sub	local03, #1
0de28     A7 22 62 FC | 	wrlong	local03, fp
0de2c     04 4E 85 F1 | 	sub	fp, #4
0de30     02 22 56 F2 | 	cmps	local03, #2 wc
0de34     9C FF 9F 3D |  if_ae	jmp	#LR__1104
0de38     24 CA BF FD | 	call	#_pop
0de3c     FF 1E 02 F6 | 	mov	local01, result3
0de40     2C 4E 05 F1 | 	add	fp, #44
0de44     A7 FA 61 FC | 	wrlong	result1, fp
0de48     04 4E 05 F1 | 	add	fp, #4
0de4c     A7 FC 61 FC | 	wrlong	result2, fp
0de50     04 4E 05 F1 | 	add	fp, #4
0de54     A7 1E 62 FC | 	wrlong	local01, fp
0de58     08 4E 85 F1 | 	sub	fp, #8
0de5c     A7 12 02 F6 | 	mov	arg01, fp
0de60     2C 4E 85 F1 | 	sub	fp, #44
0de64     AC 56 B0 FD | 	call	#_converttoint
0de68     FD 1E 02 F6 | 	mov	local01, result1
0de6c     10 4E 05 F1 | 	add	fp, #16
0de70     A7 1E 62 FC | 	wrlong	local01, fp
0de74     10 4E 85 F1 | 	sub	fp, #16
0de78                 | ' t1=pop()
0de78                 | ' channel=converttoint(t1) : print channel
0de78     00 12 06 F6 | 	mov	arg01, #0
0de7c     8C 66 B1 FD | 	call	#__system___getiolock_0484
0de80     FD 12 02 F6 | 	mov	arg01, result1
0de84     EC 0C B1 FD | 	call	#__system___lockmem
0de88     10 4E 05 F1 | 	add	fp, #16
0de8c     A7 14 02 FB | 	rdlong	arg02, fp
0de90     10 4E 85 F1 | 	sub	fp, #16
0de94     00 12 06 F6 | 	mov	arg01, #0
0de98     00 16 06 F6 | 	mov	arg03, #0
0de9c     0A 18 06 F6 | 	mov	arg04, #10
0dea0     1C 1A B1 FD | 	call	#__system___basic_print_integer
0dea4     00 12 06 F6 | 	mov	arg01, #0
0dea8     0A 14 06 F6 | 	mov	arg02, #10
0deac     00 16 06 F6 | 	mov	arg03, #0
0deb0     70 19 B1 FD | 	call	#__system___basic_print_char
0deb4     00 12 06 F6 | 	mov	arg01, #0
0deb8     50 66 B1 FD | 	call	#__system___getiolock_0484
0debc     FD 00 68 FC | 	wrlong	#0, result1
0dec0                 | ' for j=0 to 1023: samplebuf(channel, i) =0 : next j
0dec0     08 4E 05 F1 | 	add	fp, #8
0dec4     02 00 80 FF 
0dec8     A7 00 68 FC | 	wrlong	##1024, fp
0decc     08 4E 85 F1 | 	sub	fp, #8
0ded0     0C 00 00 FF 
0ded4     D8 E4 05 F1 | 	add	objptr, ##6360
0ded8     97 18 48 FB | 	callpa	#(@LR__1107-@LR__1105)>>2,fcache_load_ptr_
0dedc                 | LR__1105
0dedc     02 00 00 FF 
0dee0     00 14 DC FC | 	rep	@LR__1108, ##1024
0dee4                 | LR__1106
0dee4     10 4E 05 F1 | 	add	fp, #16
0dee8     A7 20 02 FB | 	rdlong	local02, fp
0deec     0B 20 66 F0 | 	shl	local02, #11
0def0     F2 20 02 F1 | 	add	local02, objptr
0def4     0C 4E 85 F1 | 	sub	fp, #12
0def8     A7 22 02 FB | 	rdlong	local03, fp
0defc     04 4E 85 F1 | 	sub	fp, #4
0df00     01 22 66 F0 | 	shl	local03, #1
0df04     10 23 02 F1 | 	add	local03, local02
0df08     11 01 58 FC | 	wrword	#0, local03
0df0c                 | LR__1107
0df0c                 | LR__1108
0df0c     0C 00 00 FF 
0df10     D8 E4 85 F1 | 	sub	objptr, ##6360
0df14     20 4E 05 F1 | 	add	fp, #32
0df18     A7 00 68 FC | 	wrlong	#0, fp
0df1c                 | ' max=0
0df1c                 | ' if harm(0)<0 then
0df1c     1C 4E 05 F1 | 	add	fp, #28
0df20     A7 12 02 FB | 	rdlong	arg01, fp
0df24     3C 4E 85 F1 | 	sub	fp, #60
0df28     00 14 06 F6 | 	mov	arg02, #0
0df2c     01 16 06 F6 | 	mov	arg03, #1
0df30     F4 3B B1 FD | 	call	#__system___float_cmp
0df34     00 FA 55 F2 | 	cmps	result1, #0 wc
0df38     04 01 90 3D |  if_ae	jmp	#LR__1111
0df3c     3C 4E 05 F1 | 	add	fp, #60
0df40     A7 FA 01 FB | 	rdlong	result1, fp
0df44     1F FA 05 F4 | 	bitl	result1, #31
0df48     24 4E 85 F1 | 	sub	fp, #36
0df4c     A7 FA 61 FC | 	wrlong	result1, fp
0df50     28 4E 05 F1 | 	add	fp, #40
0df54     A7 FA 01 FB | 	rdlong	result1, fp
0df58     1F FA 05 F4 | 	bitl	result1, #31
0df5c     24 4E 85 F1 | 	sub	fp, #36
0df60     A7 FA 61 FC | 	wrlong	result1, fp
0df64     20 4E 05 F1 | 	add	fp, #32
0df68     00 C0 9F FF 
0df6c     A7 00 68 FC | 	wrlong	##1065353216, fp
0df70     24 4E 85 F1 | 	sub	fp, #36
0df74     A7 1E 02 FB | 	rdlong	local01, fp
0df78     28 4E 05 F1 | 	add	fp, #40
0df7c     A7 1E 62 FC | 	wrlong	local01, fp
0df80     24 4E 85 F1 | 	sub	fp, #36
0df84     A7 1E 02 FB | 	rdlong	local01, fp
0df88     28 4E 05 F1 | 	add	fp, #40
0df8c     A7 1E 62 FC | 	wrlong	local01, fp
0df90                 | '   harm(0)=1
0df90                 | '   harm(1)=even
0df90                 | '   harm(2)=odd
0df90                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0df90     40 4E 85 F1 | 	sub	fp, #64
0df94     A7 06 68 FC | 	wrlong	#3, fp
0df98                 | LR__1109
0df98     A7 22 02 FB | 	rdlong	local03, fp
0df9c     11 27 02 F6 | 	mov	local05, local03
0dfa0     02 26 66 F0 | 	shl	local05, #2
0dfa4     38 4E 05 F1 | 	add	fp, #56
0dfa8     A7 26 02 F1 | 	add	local05, fp
0dfac     02 22 86 F1 | 	sub	local03, #2
0dfb0     02 22 66 F0 | 	shl	local03, #2
0dfb4     A7 22 02 F1 | 	add	local03, fp
0dfb8     11 13 02 FB | 	rdlong	arg01, local03
0dfbc     24 4E 85 F1 | 	sub	fp, #36
0dfc0     A7 14 02 FB | 	rdlong	arg02, fp
0dfc4     18 4E 85 F1 | 	sub	fp, #24
0dfc8     28 37 B1 FD | 	call	#__system___float_mul
0dfcc     13 FB 61 FC | 	wrlong	result1, local05
0dfd0     04 4E 05 F1 | 	add	fp, #4
0dfd4     A7 22 02 FB | 	rdlong	local03, fp
0dfd8     02 22 06 F1 | 	add	local03, #2
0dfdc     A7 22 62 FC | 	wrlong	local03, fp
0dfe0     10 22 56 F2 | 	cmps	local03, #16 wc
0dfe4     B0 FF 9F CD |  if_b	jmp	#LR__1109
0dfe8                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0dfe8     A7 08 68 FC | 	wrlong	#4, fp
0dfec                 | LR__1110
0dfec     A7 22 02 FB | 	rdlong	local03, fp
0dff0     11 27 02 F6 | 	mov	local05, local03
0dff4     02 26 66 F0 | 	shl	local05, #2
0dff8     38 4E 05 F1 | 	add	fp, #56
0dffc     A7 26 02 F1 | 	add	local05, fp
0e000     02 22 86 F1 | 	sub	local03, #2
0e004     02 22 66 F0 | 	shl	local03, #2
0e008     A7 22 02 F1 | 	add	local03, fp
0e00c     11 13 02 FB | 	rdlong	arg01, local03
0e010     20 4E 85 F1 | 	sub	fp, #32
0e014     A7 14 02 FB | 	rdlong	arg02, fp
0e018     1C 4E 85 F1 | 	sub	fp, #28
0e01c     D4 36 B1 FD | 	call	#__system___float_mul
0e020     13 FB 61 FC | 	wrlong	result1, local05
0e024     04 4E 05 F1 | 	add	fp, #4
0e028     A7 22 02 FB | 	rdlong	local03, fp
0e02c     02 22 06 F1 | 	add	local03, #2
0e030     A7 22 62 FC | 	wrlong	local03, fp
0e034     0F 22 56 F2 | 	cmps	local03, #15 wc
0e038     B0 FF 9F CD |  if_b	jmp	#LR__1110
0e03c     04 4E 85 F1 | 	sub	fp, #4
0e040                 | LR__1111
0e040                 | ' if harm(0)>=0 then ' synthesize with harmonics
0e040     3C 4E 05 F1 | 	add	fp, #60
0e044     A7 12 02 FB | 	rdlong	arg01, fp
0e048     3C 4E 85 F1 | 	sub	fp, #60
0e04c     00 14 06 F6 | 	mov	arg02, #0
0e050     01 16 66 F6 | 	neg	arg03, #1
0e054     D0 3A B1 FD | 	call	#__system___float_cmp
0e058     00 FA 55 F2 | 	cmps	result1, #0 wc
0e05c     B0 02 90 CD |  if_b	jmp	#LR__1117
0e060                 | '   for i=0 to 1023
0e060     04 4E 05 F1 | 	add	fp, #4
0e064     A7 00 68 FC | 	wrlong	#0, fp
0e068     04 4E 85 F1 | 	sub	fp, #4
0e06c                 | LR__1112
0e06c     24 4E 05 F1 | 	add	fp, #36
0e070     A7 00 68 FC | 	wrlong	#0, fp
0e074                 | '     spl=0
0e074                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0e074     1C 4E 85 F1 | 	sub	fp, #28
0e078     A7 00 68 FC | 	wrlong	#0, fp
0e07c                 | LR__1113
0e07c     A7 26 02 FB | 	rdlong	local05, fp
0e080     02 26 66 F0 | 	shl	local05, #2
0e084     34 4E 05 F1 | 	add	fp, #52
0e088     A7 26 02 F1 | 	add	local05, fp
0e08c     13 23 02 FB | 	rdlong	local03, local05
0e090     87 E4 1D FF 
0e094     DB 27 06 F6 | 	mov	local05, ##1003032539
0e098     38 4E 85 F1 | 	sub	fp, #56
0e09c     A7 12 02 FB | 	rdlong	arg01, fp
0e0a0     04 4E 85 F1 | 	sub	fp, #4
0e0a4     09 13 52 F6 | 	abs	arg01, arg01 wc
0e0a8     1F 24 C6 C9 |  if_b	decod	local04, #31
0e0ac     00 24 06 36 |  if_ae	mov	local04, #0
0e0b0     3C 32 B1 FD | 	call	#__system___float_fromuns
0e0b4     12 FB 61 F5 | 	xor	result1, local04
0e0b8     FD 14 02 F6 | 	mov	arg02, result1
0e0bc     13 13 02 F6 | 	mov	arg01, local05
0e0c0     30 36 B1 FD | 	call	#__system___float_mul
0e0c4     FD 26 02 F6 | 	mov	local05, result1
0e0c8     08 4E 05 F1 | 	add	fp, #8
0e0cc     A7 12 02 FB | 	rdlong	arg01, fp
0e0d0     08 4E 85 F1 | 	sub	fp, #8
0e0d4     01 12 06 F1 | 	add	arg01, #1
0e0d8     09 13 52 F6 | 	abs	arg01, arg01 wc
0e0dc     1F 24 C6 C9 |  if_b	decod	local04, #31
0e0e0     00 24 06 36 |  if_ae	mov	local04, #0
0e0e4     08 32 B1 FD | 	call	#__system___float_fromuns
0e0e8     12 FB 61 F5 | 	xor	result1, local04
0e0ec     FD 14 02 F6 | 	mov	arg02, result1
0e0f0     13 13 02 F6 | 	mov	arg01, local05
0e0f4     FC 35 B1 FD | 	call	#__system___float_mul
0e0f8     FD 12 02 F6 | 	mov	arg01, result1
0e0fc     30 3F B1 FD | 	call	#__system____builtin_sinf
0e100     FD 14 02 F6 | 	mov	arg02, result1
0e104     11 13 02 F6 | 	mov	arg01, local03
0e108     E8 35 B1 FD | 	call	#__system___float_mul
0e10c     FD 14 02 F6 | 	mov	arg02, result1
0e110     24 4E 05 F1 | 	add	fp, #36
0e114     A7 12 02 FB | 	rdlong	arg01, fp
0e118     24 4E 85 F1 | 	sub	fp, #36
0e11c     04 32 B1 FD | 	call	#__system___float_add
0e120     24 4E 05 F1 | 	add	fp, #36
0e124     A7 FA 61 FC | 	wrlong	result1, fp
0e128     1C 4E 85 F1 | 	sub	fp, #28
0e12c     A7 16 02 FB | 	rdlong	arg03, fp
0e130     01 16 06 F1 | 	add	arg03, #1
0e134     A7 16 62 FC | 	wrlong	arg03, fp
0e138     10 16 56 F2 | 	cmps	arg03, #16 wc
0e13c     3C FF 9F CD |  if_b	jmp	#LR__1113
0e140                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0e140     1C 4E 05 F1 | 	add	fp, #28
0e144     A7 12 02 FB | 	rdlong	arg01, fp
0e148     1F 12 06 F4 | 	bitl	arg01, #31
0e14c     04 4E 85 F1 | 	sub	fp, #4
0e150     A7 14 02 FB | 	rdlong	arg02, fp
0e154     20 4E 85 F1 | 	sub	fp, #32
0e158     01 16 66 F6 | 	neg	arg03, #1
0e15c     C8 39 B1 FD | 	call	#__system___float_cmp
0e160     01 FA 55 F2 | 	cmps	result1, #1 wc
0e164     18 00 90 CD |  if_b	jmp	#LR__1114
0e168     24 4E 05 F1 | 	add	fp, #36
0e16c     A7 FA 01 FB | 	rdlong	result1, fp
0e170     1F FA 05 F4 | 	bitl	result1, #31
0e174     04 4E 85 F1 | 	sub	fp, #4
0e178     A7 FA 61 FC | 	wrlong	result1, fp
0e17c     20 4E 85 F1 | 	sub	fp, #32
0e180                 | LR__1114
0e180     04 4E 05 F1 | 	add	fp, #4
0e184     A7 22 02 FB | 	rdlong	local03, fp
0e188     01 22 06 F1 | 	add	local03, #1
0e18c     A7 22 62 FC | 	wrlong	local03, fp
0e190     04 4E 85 F1 | 	sub	fp, #4
0e194     02 00 00 FF 
0e198     00 22 56 F2 | 	cmps	local03, ##1024 wc
0e19c     CC FE 9F CD |  if_b	jmp	#LR__1112
0e1a0                 | '   for i=0 to 1023
0e1a0     04 4E 05 F1 | 	add	fp, #4
0e1a4     A7 00 68 FC | 	wrlong	#0, fp
0e1a8     04 4E 85 F1 | 	sub	fp, #4
0e1ac                 | LR__1115
0e1ac     24 4E 05 F1 | 	add	fp, #36
0e1b0     A7 00 68 FC | 	wrlong	#0, fp
0e1b4                 | '     spl=0
0e1b4                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0e1b4     1C 4E 85 F1 | 	sub	fp, #28
0e1b8     A7 00 68 FC | 	wrlong	#0, fp
0e1bc                 | LR__1116
0e1bc     A7 26 02 FB | 	rdlong	local05, fp
0e1c0     02 26 66 F0 | 	shl	local05, #2
0e1c4     34 4E 05 F1 | 	add	fp, #52
0e1c8     A7 26 02 F1 | 	add	local05, fp
0e1cc     13 27 02 FB | 	rdlong	local05, local05
0e1d0     1C 4E 85 F1 | 	sub	fp, #28
0e1d4     A7 14 02 FB | 	rdlong	arg02, fp
0e1d8     20 4E 85 F1 | 	sub	fp, #32
0e1dc     58 7F 23 FF 
0e1e0     00 12 06 F6 | 	mov	arg01, ##1191096320
0e1e4     10 37 B1 FD | 	call	#__system___float_div
0e1e8     FD 14 02 F6 | 	mov	arg02, result1
0e1ec     13 13 02 F6 | 	mov	arg01, local05
0e1f0     00 35 B1 FD | 	call	#__system___float_mul
0e1f4     FD 22 02 F6 | 	mov	local03, result1
0e1f8     87 E4 1D FF 
0e1fc     DB 27 06 F6 | 	mov	local05, ##1003032539
0e200     04 4E 05 F1 | 	add	fp, #4
0e204     A7 12 02 FB | 	rdlong	arg01, fp
0e208     04 4E 85 F1 | 	sub	fp, #4
0e20c     09 13 52 F6 | 	abs	arg01, arg01 wc
0e210     1F 24 C6 C9 |  if_b	decod	local04, #31
0e214     00 24 06 36 |  if_ae	mov	local04, #0
0e218     D4 30 B1 FD | 	call	#__system___float_fromuns
0e21c     12 FB 61 F5 | 	xor	result1, local04
0e220     FD 14 02 F6 | 	mov	arg02, result1
0e224     13 13 02 F6 | 	mov	arg01, local05
0e228     C8 34 B1 FD | 	call	#__system___float_mul
0e22c     FD 26 02 F6 | 	mov	local05, result1
0e230     08 4E 05 F1 | 	add	fp, #8
0e234     A7 12 02 FB | 	rdlong	arg01, fp
0e238     08 4E 85 F1 | 	sub	fp, #8
0e23c     01 12 06 F1 | 	add	arg01, #1
0e240     09 13 52 F6 | 	abs	arg01, arg01 wc
0e244     1F 24 C6 C9 |  if_b	decod	local04, #31
0e248     00 24 06 36 |  if_ae	mov	local04, #0
0e24c     A0 30 B1 FD | 	call	#__system___float_fromuns
0e250     12 FB 61 F5 | 	xor	result1, local04
0e254     FD 14 02 F6 | 	mov	arg02, result1
0e258     13 13 02 F6 | 	mov	arg01, local05
0e25c     94 34 B1 FD | 	call	#__system___float_mul
0e260     FD 12 02 F6 | 	mov	arg01, result1
0e264     C8 3D B1 FD | 	call	#__system____builtin_sinf
0e268     FD 14 02 F6 | 	mov	arg02, result1
0e26c     11 13 02 F6 | 	mov	arg01, local03
0e270     80 34 B1 FD | 	call	#__system___float_mul
0e274     FD 14 02 F6 | 	mov	arg02, result1
0e278     24 4E 05 F1 | 	add	fp, #36
0e27c     A7 12 02 FB | 	rdlong	arg01, fp
0e280     24 4E 85 F1 | 	sub	fp, #36
0e284     9C 30 B1 FD | 	call	#__system___float_add
0e288     24 4E 05 F1 | 	add	fp, #36
0e28c     A7 FA 61 FC | 	wrlong	result1, fp
0e290     1C 4E 85 F1 | 	sub	fp, #28
0e294     A7 26 02 FB | 	rdlong	local05, fp
0e298     01 26 06 F1 | 	add	local05, #1
0e29c     A7 26 62 FC | 	wrlong	local05, fp
0e2a0     10 26 56 F2 | 	cmps	local05, #16 wc
0e2a4     14 FF 9F CD |  if_b	jmp	#LR__1116
0e2a8     08 4E 05 F1 | 	add	fp, #8
0e2ac     A7 26 02 FB | 	rdlong	local05, fp
0e2b0     0B 26 66 F0 | 	shl	local05, #11
0e2b4     0C 00 00 FF 
0e2b8     D8 E4 05 F1 | 	add	objptr, ##6360
0e2bc     F2 26 02 F1 | 	add	local05, objptr
0e2c0     0C 4E 85 F1 | 	sub	fp, #12
0e2c4     A7 20 02 FB | 	rdlong	local02, fp
0e2c8     01 20 66 F0 | 	shl	local02, #1
0e2cc     13 21 02 F1 | 	add	local02, local05
0e2d0     20 4E 05 F1 | 	add	fp, #32
0e2d4     A7 12 02 FB | 	rdlong	arg01, fp
0e2d8     24 4E 85 F1 | 	sub	fp, #36
0e2dc     0C 00 00 FF 
0e2e0     D8 E4 85 F1 | 	sub	objptr, ##6360
0e2e4     01 14 06 F6 | 	mov	arg02, #1
0e2e8     D0 38 B1 FD | 	call	#__system___float_tointeger
0e2ec     10 FB 51 FC | 	wrword	result1, local02
0e2f0     04 4E 05 F1 | 	add	fp, #4
0e2f4     A7 22 02 FB | 	rdlong	local03, fp
0e2f8     01 22 06 F1 | 	add	local03, #1
0e2fc     A7 22 62 FC | 	wrlong	local03, fp
0e300     04 4E 85 F1 | 	sub	fp, #4
0e304     02 00 00 FF 
0e308     00 22 56 F2 | 	cmps	local03, ##1024 wc
0e30c     9C FE 9F CD |  if_b	jmp	#LR__1115
0e310                 | LR__1117
0e310                 | LR__1118
0e310     A7 F0 03 F6 | 	mov	ptra, fp
0e314     B2 00 A0 FD | 	call	#popregs_
0e318                 | _do_defsnd_ret
0e318     2D 00 64 FD | 	ret
0e31c                 | 
0e31c                 | ' 
0e31c                 | ' ' ---------------  List the program. 
0e31c                 | ' 
0e31c                 | ' sub do_list
0e31c                 | _do_list
0e31c     02 4A 05 F6 | 	mov	COUNT_, #2
0e320     A8 00 A0 FD | 	call	#pushregs_
0e324     B8 F0 07 F1 | 	add	ptra, #184
0e328     04 4E 05 F1 | 	add	fp, #4
0e32c     A7 00 68 FC | 	wrlong	#0, fp
0e330     04 4E 05 F1 | 	add	fp, #4
0e334     FF FF BF FF 
0e338     A7 FE 6B FC | 	wrlong	##2147483647, fp
0e33c     08 4E 85 F1 | 	sub	fp, #8
0e340     6A 00 00 FF 
0e344     80 E4 05 F1 | 	add	objptr, ##54400
0e348     F2 1E 02 FB | 	rdlong	local01, objptr
0e34c     0F 17 02 F6 | 	mov	arg03, local01
0e350     01 16 66 F0 | 	shl	arg03, #1
0e354     0F 17 02 F1 | 	add	arg03, local01
0e358     02 16 66 F0 | 	shl	arg03, #2
0e35c     03 00 00 FF 
0e360     04 E4 85 F1 | 	sub	objptr, ##1540
0e364     F2 16 02 F1 | 	add	arg03, objptr
0e368     0B 17 02 FB | 	rdlong	arg03, arg03
0e36c     A7 16 62 FC | 	wrlong	arg03, fp
0e370                 | ' 
0e370                 | ' startline=0 : endline=$7FFFFFFF
0e370                 | ' numpar=compiledline(lineptr_e).result.uresult
0e370                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0e370     01 16 0E F2 | 	cmp	arg03, #1 wz
0e374     67 00 00 FF 
0e378     7C E4 85 F1 | 	sub	objptr, ##52860
0e37c     3C 00 90 5D |  if_ne	jmp	#LR__1120
0e380     DC C4 BF FD | 	call	#_pop
0e384     FF 1E 02 F6 | 	mov	local01, result3
0e388     0C 4E 05 F1 | 	add	fp, #12
0e38c     A7 FA 61 FC | 	wrlong	result1, fp
0e390     04 4E 05 F1 | 	add	fp, #4
0e394     A7 FC 61 FC | 	wrlong	result2, fp
0e398     04 4E 05 F1 | 	add	fp, #4
0e39c     A7 1E 62 FC | 	wrlong	local01, fp
0e3a0     08 4E 85 F1 | 	sub	fp, #8
0e3a4     A7 12 02 F6 | 	mov	arg01, fp
0e3a8     0C 4E 85 F1 | 	sub	fp, #12
0e3ac     64 51 B0 FD | 	call	#_converttoint
0e3b0     04 4E 05 F1 | 	add	fp, #4
0e3b4     A7 FA 61 FC | 	wrlong	result1, fp
0e3b8     04 4E 85 F1 | 	sub	fp, #4
0e3bc                 | LR__1120
0e3bc                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0e3bc     A7 16 02 FB | 	rdlong	arg03, fp
0e3c0     02 16 0E F2 | 	cmp	arg03, #2 wz
0e3c4     7C 00 90 5D |  if_ne	jmp	#LR__1121
0e3c8     94 C4 BF FD | 	call	#_pop
0e3cc     FF 1E 02 F6 | 	mov	local01, result3
0e3d0     0C 4E 05 F1 | 	add	fp, #12
0e3d4     A7 FA 61 FC | 	wrlong	result1, fp
0e3d8     04 4E 05 F1 | 	add	fp, #4
0e3dc     A7 FC 61 FC | 	wrlong	result2, fp
0e3e0     04 4E 05 F1 | 	add	fp, #4
0e3e4     A7 1E 62 FC | 	wrlong	local01, fp
0e3e8     08 4E 85 F1 | 	sub	fp, #8
0e3ec     A7 12 02 F6 | 	mov	arg01, fp
0e3f0     0C 4E 85 F1 | 	sub	fp, #12
0e3f4     1C 51 B0 FD | 	call	#_converttoint
0e3f8     FD 1E 02 F6 | 	mov	local01, result1
0e3fc     08 4E 05 F1 | 	add	fp, #8
0e400     A7 1E 62 FC | 	wrlong	local01, fp
0e404     08 4E 85 F1 | 	sub	fp, #8
0e408     54 C4 BF FD | 	call	#_pop
0e40c     FF 1E 02 F6 | 	mov	local01, result3
0e410     0C 4E 05 F1 | 	add	fp, #12
0e414     A7 FA 61 FC | 	wrlong	result1, fp
0e418     04 4E 05 F1 | 	add	fp, #4
0e41c     A7 FC 61 FC | 	wrlong	result2, fp
0e420     04 4E 05 F1 | 	add	fp, #4
0e424     A7 1E 62 FC | 	wrlong	local01, fp
0e428     08 4E 85 F1 | 	sub	fp, #8
0e42c     A7 12 02 F6 | 	mov	arg01, fp
0e430     0C 4E 85 F1 | 	sub	fp, #12
0e434     DC 50 B0 FD | 	call	#_converttoint
0e438     04 4E 05 F1 | 	add	fp, #4
0e43c     A7 FA 61 FC | 	wrlong	result1, fp
0e440     04 4E 85 F1 | 	sub	fp, #4
0e444                 | LR__1121
0e444                 | ' 
0e444                 | ' 
0e444                 | ' print
0e444     00 12 06 F6 | 	mov	arg01, #0
0e448     C0 60 B1 FD | 	call	#__system___getiolock_0484
0e44c     FD 12 02 F6 | 	mov	arg01, result1
0e450     20 07 B1 FD | 	call	#__system___lockmem
0e454     00 12 06 F6 | 	mov	arg01, #0
0e458     0A 14 06 F6 | 	mov	arg02, #10
0e45c     00 16 06 F6 | 	mov	arg03, #0
0e460     C0 13 B1 FD | 	call	#__system___basic_print_char
0e464     00 12 06 F6 | 	mov	arg01, #0
0e468     A0 60 B1 FD | 	call	#__system___getiolock_0484
0e46c     FD 00 68 FC | 	wrlong	#0, result1
0e470     6A 00 00 FF 
0e474     84 E4 05 F1 | 	add	objptr, ##54404
0e478     F2 20 02 FB | 	rdlong	local02, objptr
0e47c     0F 00 00 FF 
0e480     A4 E5 05 F1 | 	add	objptr, ##8100
0e484     F2 20 62 FC | 	wrlong	local02, objptr
0e488     7A 00 00 FF 
0e48c     28 E4 85 F1 | 	sub	objptr, ##62504
0e490                 | ' do 
0e490                 | LR__1122
0e490     20 4E 05 F1 | 	add	fp, #32
0e494     A7 12 02 F6 | 	mov	arg01, fp
0e498     20 4E 85 F1 | 	sub	fp, #32
0e49c     7A 00 00 FF 
0e4a0     28 E4 05 F1 | 	add	objptr, ##62504
0e4a4     F2 14 02 FB | 	rdlong	arg02, objptr
0e4a8     18 16 06 F6 | 	mov	arg03, #24
0e4ac     6E 00 00 FF 
0e4b0     5C E5 85 F1 | 	sub	objptr, ##56668
0e4b4     98 FA B0 FD | 	call	#_psram_spin2_read1
0e4b8     0B 00 00 FF 
0e4bc     CC E4 85 F1 | 	sub	objptr, ##5836
0e4c0                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
0e4c0                 | '   
0e4c0                 | '   if header(0)<> $FFFFFFFF then
0e4c0     20 4E 05 F1 | 	add	fp, #32
0e4c4     A7 20 02 FB | 	rdlong	local02, fp
0e4c8     20 4E 85 F1 | 	sub	fp, #32
0e4cc     FF FF 7F FF 
0e4d0     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0e4d4     A8 00 90 AD |  if_e	jmp	#LR__1124
0e4d8     38 4E 05 F1 | 	add	fp, #56
0e4dc     3F 16 06 F6 | 	mov	arg03, #63
0e4e0     28 16 62 FD | 	setq	arg03
0e4e4     A7 00 68 FC | 	wrlong	#0, fp
0e4e8     A7 12 02 F6 | 	mov	arg01, fp
0e4ec     10 4E 85 F1 | 	sub	fp, #16
0e4f0     A7 14 02 FB | 	rdlong	arg02, fp
0e4f4     04 4E 05 F1 | 	add	fp, #4
0e4f8     A7 16 02 FB | 	rdlong	arg03, fp
0e4fc     2C 4E 85 F1 | 	sub	fp, #44
0e500     0B 00 00 FF 
0e504     CC E4 05 F1 | 	add	objptr, ##5836
0e508     44 FA B0 FD | 	call	#_psram_spin2_read1
0e50c     0B 00 00 FF 
0e510     CC E4 85 F1 | 	sub	objptr, ##5836
0e514                 | '     longfill(linebuf,0,64)
0e514                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0e514                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0e514     20 4E 05 F1 | 	add	fp, #32
0e518     A7 20 02 FB | 	rdlong	local02, fp
0e51c     1C 4E 85 F1 | 	sub	fp, #28
0e520     A7 1E 02 FB | 	rdlong	local01, fp
0e524     04 4E 85 F1 | 	sub	fp, #4
0e528     0F 21 52 F2 | 	cmps	local02, local01 wc
0e52c     30 00 90 CD |  if_b	jmp	#LR__1123
0e530     20 4E 05 F1 | 	add	fp, #32
0e534     A7 20 02 FB | 	rdlong	local02, fp
0e538     18 4E 85 F1 | 	sub	fp, #24
0e53c     A7 16 02 FB | 	rdlong	arg03, fp
0e540     08 4E 85 F1 | 	sub	fp, #8
0e544     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0e548     14 00 90 1D |  if_a	jmp	#LR__1123
0e54c     38 4E 05 F1 | 	add	fp, #56
0e550     A7 12 02 F6 | 	mov	arg01, fp
0e554     38 4E 85 F1 | 	sub	fp, #56
0e558                 | ' 
0e558                 | ' write(text)
0e558     4C F3 B0 FD | 	call	#_hg010b_spin2_write
0e55c                 | ' crlf
0e55c     14 F6 B0 FD | 	call	#_hg010b_spin2_crlf
0e560                 | LR__1123
0e560     34 4E 05 F1 | 	add	fp, #52
0e564     A7 20 02 FB | 	rdlong	local02, fp
0e568     34 4E 85 F1 | 	sub	fp, #52
0e56c     7A 00 00 FF 
0e570     28 E4 05 F1 | 	add	objptr, ##62504
0e574     F2 20 62 FC | 	wrlong	local02, objptr
0e578     7A 00 00 FF 
0e57c     28 E4 85 F1 | 	sub	objptr, ##62504
0e580                 | LR__1124
0e580     34 4E 05 F1 | 	add	fp, #52
0e584     A7 20 02 FB | 	rdlong	local02, fp
0e588     34 4E 85 F1 | 	sub	fp, #52
0e58c     FF FF 3F FF 
0e590     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0e594     20 4E 05 51 |  if_ne	add	fp, #32
0e598     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e59c     20 4E 85 51 |  if_ne	sub	fp, #32
0e5a0     FF FF 7F 5F 
0e5a4     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0e5a8     E4 FE 9F 5D |  if_ne	jmp	#LR__1122
0e5ac     A7 F0 03 F6 | 	mov	ptra, fp
0e5b0     B2 00 A0 FD | 	call	#popregs_
0e5b4                 | _do_list_ret
0e5b4     2D 00 64 FD | 	ret
0e5b8                 | 
0e5b8                 | ' 
0e5b8                 | ' '---------------- Clear the program
0e5b8                 | ' 
0e5b8                 | ' sub do_new
0e5b8                 | _do_new
0e5b8     03 4A 05 F6 | 	mov	COUNT_, #3
0e5bc     A8 00 A0 FD | 	call	#pushregs_
0e5c0     00 12 06 F6 | 	mov	arg01, #0
0e5c4     01 14 66 F6 | 	neg	arg02, #1
0e5c8     90 C2 B0 FD | 	call	#_pslpoke
0e5cc     55 00 00 FF 
0e5d0     08 E4 05 F1 | 	add	objptr, ##43528
0e5d4     F2 00 68 FC | 	wrlong	#0, objptr
0e5d8     15 00 00 FF 
0e5dc     7C E4 05 F1 | 	add	objptr, ##10876
0e5e0     F2 00 68 FC | 	wrlong	#0, objptr
0e5e4     0E 00 00 FF 
0e5e8     38 E4 05 F1 | 	add	objptr, ##7224
0e5ec     F2 00 68 FC | 	wrlong	#0, objptr
0e5f0     04 E4 05 F1 | 	add	objptr, #4
0e5f4     F2 00 68 FC | 	wrlong	#0, objptr
0e5f8     15 00 00 FF 
0e5fc     68 E4 85 F1 | 	sub	objptr, ##10856
0e600     F2 00 68 FC | 	wrlong	#0, objptr
0e604     07 00 00 FF 
0e608     24 E4 05 F1 | 	add	objptr, ##3620
0e60c     F2 00 68 FC | 	wrlong	#0, objptr
0e610     07 00 00 FF 
0e614     20 E4 85 F1 | 	sub	objptr, ##3616
0e618     F2 00 68 FC | 	wrlong	#0, objptr
0e61c     0F 00 00 FF 
0e620     38 E4 05 F1 | 	add	objptr, ##7736
0e624     F2 00 68 FC | 	wrlong	#0, objptr
0e628     08 00 00 FF 
0e62c     0C E4 85 F1 | 	sub	objptr, ##4108
0e630     F2 00 68 FC | 	wrlong	#0, objptr
0e634     04 E4 05 F1 | 	add	objptr, #4
0e638     FF FF FF FF 
0e63c     F2 FE 6B FC | 	wrlong	##-1, objptr
0e640     0E 00 00 FF 
0e644     58 E4 05 F1 | 	add	objptr, ##7256
0e648     F2 00 68 FC | 	wrlong	#0, objptr
0e64c     04 E4 05 F1 | 	add	objptr, #4
0e650     F2 00 68 FC | 	wrlong	#0, objptr
0e654                 | ' 
0e654                 | ' pslpoke(0,$FFFFFFFF)
0e654                 | ' varnum=0
0e654                 | ' programstart=0 :runptr=0 : runptr2=0
0e654                 | ' stackpointer=0
0e654                 | ' lineptr=0 
0e654                 | ' programptr=0 : stringptr=0
0e654                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
0e654                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0e654     00 1E 06 F6 | 	mov	local01, #0
0e658     06 00 00 FF 
0e65c     4C E4 85 F1 | 	sub	objptr, ##3148
0e660     97 16 48 FB | 	callpa	#(@LR__1131-@LR__1130)>>2,fcache_load_ptr_
0e664                 | LR__1130
0e664     0F 21 02 F6 | 	mov	local02, local01
0e668     02 20 66 F0 | 	shl	local02, #2
0e66c     0F 21 02 F1 | 	add	local02, local01
0e670     02 20 66 F0 | 	shl	local02, #2
0e674     F2 20 02 F1 | 	add	local02, objptr
0e678     08 20 06 F1 | 	add	local02, #8
0e67c     FF FF FF FF 
0e680     10 FF 6B FC | 	wrlong	##-1, local02
0e684     01 1E 06 F1 | 	add	local01, #1
0e688     41 1E 56 F2 | 	cmps	local01, #65 wc
0e68c     D4 FF 9F CD |  if_b	jmp	#LR__1130
0e690                 | LR__1131
0e690     72 00 00 FF 
0e694     9C E4 85 F1 | 	sub	objptr, ##58524
0e698                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
0e698     00 1E 06 F6 | 	mov	local01, #0
0e69c                 | LR__1132
0e69c     0F 21 02 F6 | 	mov	local02, local01
0e6a0     02 20 66 F0 | 	shl	local02, #2
0e6a4     79 00 00 FF 
0e6a8     44 E5 05 F1 | 	add	objptr, ##62276
0e6ac     F2 20 02 F1 | 	add	local02, objptr
0e6b0     10 21 0A FB | 	rdlong	local02, local02 wz
0e6b4     79 00 00 FF 
0e6b8     44 E5 85 F1 | 	sub	objptr, ##62276
0e6bc     34 00 90 AD |  if_e	jmp	#LR__1133
0e6c0     0F 13 02 F6 | 	mov	arg01, local01
0e6c4     00 14 06 F6 | 	mov	arg02, #0
0e6c8     00 16 06 F6 | 	mov	arg03, #0
0e6cc     F8 E0 B0 FD | 	call	#_hg010b_spin2_setspritesize
0e6d0     0F 21 02 F6 | 	mov	local02, local01
0e6d4     02 20 66 F0 | 	shl	local02, #2
0e6d8     79 00 00 FF 
0e6dc     44 E5 05 F1 | 	add	objptr, ##62276
0e6e0     F2 20 02 F1 | 	add	local02, objptr
0e6e4     10 13 02 FB | 	rdlong	arg01, local02
0e6e8     79 00 00 FF 
0e6ec     44 E5 85 F1 | 	sub	objptr, ##62276
0e6f0     08 44 B1 FD | 	call	#__system___gc_free
0e6f4                 | LR__1133
0e6f4     01 1E 06 F1 | 	add	local01, #1
0e6f8     10 1E 56 F2 | 	cmps	local01, #16 wc
0e6fc     9C FF 9F CD |  if_b	jmp	#LR__1132
0e700     79 00 00 FF 
0e704     98 E5 05 F1 | 	add	objptr, ##62360
0e708     00 C0 9F FF 
0e70c     F2 00 68 FC | 	wrlong	##1065353216, objptr
0e710     04 E4 05 F1 | 	add	objptr, #4
0e714     00 C0 9F FF 
0e718     F2 00 68 FC | 	wrlong	##1065353216, objptr
0e71c     79 00 00 FF 
0e720     98 E5 85 F1 | 	sub	objptr, ##62360
0e724     F2 22 02 FB | 	rdlong	local03, objptr
0e728     79 00 00 FF 
0e72c     84 E5 05 F1 | 	add	objptr, ##62340
0e730     F2 22 62 FC | 	wrlong	local03, objptr
0e734     79 00 00 FF 
0e738     88 E5 85 F1 | 	sub	objptr, ##62344
0e73c     11 12 06 F6 | 	mov	arg01, #17
0e740     08 14 06 F6 | 	mov	arg02, #8
0e744     10 16 06 F6 | 	mov	arg03, #16
0e748     7C E0 B0 FD | 	call	#_hg010b_spin2_setspritesize
0e74c     10 12 06 F6 | 	mov	arg01, #16
0e750     20 14 06 F6 | 	mov	arg02, #32
0e754     20 16 06 F6 | 	mov	arg03, #32
0e758     6C E0 B0 FD | 	call	#_hg010b_spin2_setspritesize
0e75c     73 01 00 FF 
0e760     B9 23 06 F6 | 	mov	local03, ##@LR__5146
0e764     79 00 00 FF 
0e768     B4 E5 05 F1 | 	add	objptr, ##62388
0e76c     F2 22 62 FC | 	wrlong	local03, objptr
0e770     79 00 00 FF 
0e774     B4 E5 85 F1 | 	sub	objptr, ##62388
0e778     EC B3 B0 FD | 	call	#_init_audio
0e77c     A7 F0 03 F6 | 	mov	ptra, fp
0e780     B2 00 A0 FD | 	call	#popregs_
0e784                 | _do_new_ret
0e784     2D 00 64 FD | 	ret
0e788                 | 
0e788                 | ' 
0e788                 | ' '----------------------- goto
0e788                 | ' sub do_fast_goto
0e788                 | _do_fast_goto
0e788     02 4A 05 F6 | 	mov	COUNT_, #2
0e78c     A8 00 A0 FD | 	call	#pushregs_
0e790                 | _do_fast_goto_enter
0e790     6A 00 00 FF 
0e794     80 E4 05 F1 | 	add	objptr, ##54400
0e798     F2 12 02 FB | 	rdlong	arg01, objptr
0e79c     09 1F 02 F6 | 	mov	local01, arg01
0e7a0     01 1E 66 F0 | 	shl	local01, #1
0e7a4     09 1F 02 F1 | 	add	local01, arg01
0e7a8     02 1E 66 F0 | 	shl	local01, #2
0e7ac     03 00 00 FF 
0e7b0     04 E4 85 F1 | 	sub	objptr, ##1540
0e7b4     F2 1E 02 F1 | 	add	local01, objptr
0e7b8     0F 21 02 FB | 	rdlong	local02, local01
0e7bc     10 13 02 F6 | 	mov	arg01, local02
0e7c0     67 00 00 FF 
0e7c4     7C E4 85 F1 | 	sub	objptr, ##52860
0e7c8     C0 C1 B0 FD | 	call	#_pslpeek
0e7cc     FD 12 02 F6 | 	mov	arg01, result1
0e7d0                 | ' 
0e7d0                 | ' testptr=compiledline(lineptr_e).result.uresult
0e7d0                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0e7d0                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0e7d0     6A 00 00 FF 
0e7d4     80 E4 05 F1 | 	add	objptr, ##54400
0e7d8     F2 FA 01 FB | 	rdlong	result1, objptr
0e7dc     FD 1E 02 F6 | 	mov	local01, result1
0e7e0     01 1E 66 F0 | 	shl	local01, #1
0e7e4     FD 1E 02 F1 | 	add	local01, result1
0e7e8     02 1E 66 F0 | 	shl	local01, #2
0e7ec     03 00 00 FF 
0e7f0     04 E4 85 F1 | 	sub	objptr, ##1540
0e7f4     F2 1E 02 F1 | 	add	local01, objptr
0e7f8     04 1E 06 F1 | 	add	local01, #4
0e7fc     0F 1F 02 FB | 	rdlong	local01, local01
0e800     0F 13 0A F2 | 	cmp	arg01, local01 wz
0e804     67 00 00 FF 
0e808     7C E4 85 F1 | 	sub	objptr, ##52860
0e80c     58 00 90 5D |  if_ne	jmp	#LR__1140
0e810     78 00 00 FF 
0e814     BC E4 05 F1 | 	add	objptr, ##61628
0e818     F2 20 62 FC | 	wrlong	local02, objptr
0e81c     0E 00 00 FF 
0e820     40 E4 85 F1 | 	sub	objptr, ##7232
0e824     F2 20 02 FB | 	rdlong	local02, objptr
0e828     01 20 86 F1 | 	sub	local02, #1
0e82c     04 E4 05 F1 | 	add	objptr, #4
0e830     F2 20 62 FC | 	wrlong	local02, objptr
0e834                 | '   runptr=testptr
0e834                 | '   lineptr_e=lineptr-1
0e834                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0e834     0E 00 00 FF 
0e838     60 E4 05 F1 | 	add	objptr, ##7264
0e83c     F2 20 02 FB | 	rdlong	local02, objptr
0e840     78 00 00 FF 
0e844     E0 E4 85 F1 | 	sub	objptr, ##61664
0e848     FF FF 3F FF 
0e84c     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0e850     78 00 00 AF 
0e854     E0 E4 05 A1 |  if_e	add	objptr, ##61664
0e858     F2 00 68 AC |  if_e	wrlong	#0, objptr
0e85c     78 00 00 AF 
0e860     E0 E4 85 A1 |  if_e	sub	objptr, ##61664
0e864     04 00 90 FD | 	jmp	#LR__1141
0e868                 | LR__1140
0e868     0C 00 B0 FD | 	call	#_do_find_goto
0e86c                 | LR__1141
0e86c     A7 F0 03 F6 | 	mov	ptra, fp
0e870     B2 00 A0 FD | 	call	#popregs_
0e874                 | _do_fast_goto_ret
0e874     2D 00 64 FD | 	ret
0e878                 | 
0e878                 | ' 
0e878                 | ' 
0e878                 | ' 
0e878                 | ' 
0e878                 | ' sub do_find_goto
0e878                 | _do_find_goto
0e878     03 4A 05 F6 | 	mov	COUNT_, #3
0e87c     A8 00 A0 FD | 	call	#pushregs_
0e880     24 F0 07 F1 | 	add	ptra, #36
0e884                 | _do_find_goto_enter
0e884     6A 00 00 FF 
0e888     80 E4 05 F1 | 	add	objptr, ##54400
0e88c     F2 1E 02 FB | 	rdlong	local01, objptr
0e890     0F 21 02 F6 | 	mov	local02, local01
0e894     01 20 66 F0 | 	shl	local02, #1
0e898     0F 21 02 F1 | 	add	local02, local01
0e89c     02 20 66 F0 | 	shl	local02, #2
0e8a0     03 00 00 FF 
0e8a4     04 E4 85 F1 | 	sub	objptr, ##1540
0e8a8     F2 20 02 F1 | 	add	local02, objptr
0e8ac     04 20 06 F1 | 	add	local02, #4
0e8b0     10 21 02 FB | 	rdlong	local02, local02
0e8b4     A7 20 62 FC | 	wrlong	local02, fp
0e8b8     03 00 00 FF 
0e8bc     08 E4 05 F1 | 	add	objptr, ##1544
0e8c0     F2 22 02 FB | 	rdlong	local03, objptr
0e8c4     6A 00 00 FF 
0e8c8     84 E4 85 F1 | 	sub	objptr, ##54404
0e8cc     04 4E 05 F1 | 	add	fp, #4
0e8d0     A7 22 62 FC | 	wrlong	local03, fp
0e8d4     04 4E 85 F1 | 	sub	fp, #4
0e8d8                 | ' 
0e8d8                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0e8d8                 | '  ' print "find goto"                                                                     'print gotoline 
0e8d8                 | ' gotoptr=programstart
0e8d8                 | ' do
0e8d8                 | LR__1150
0e8d8     0C 4E 05 F1 | 	add	fp, #12
0e8dc     A7 12 02 F6 | 	mov	arg01, fp
0e8e0     08 4E 85 F1 | 	sub	fp, #8
0e8e4     A7 14 02 FB | 	rdlong	arg02, fp
0e8e8     04 4E 85 F1 | 	sub	fp, #4
0e8ec     18 16 06 F6 | 	mov	arg03, #24
0e8f0     0B 00 00 FF 
0e8f4     CC E4 05 F1 | 	add	objptr, ##5836
0e8f8     54 F6 B0 FD | 	call	#_psram_spin2_read1
0e8fc     0B 00 00 FF 
0e900     CC E4 85 F1 | 	sub	objptr, ##5836
0e904                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0e904                 | '   if gotoheader(0)<>$FFFFFFFF then
0e904     0C 4E 05 F1 | 	add	fp, #12
0e908     A7 22 02 FB | 	rdlong	local03, fp
0e90c     0C 4E 85 F1 | 	sub	fp, #12
0e910     FF FF 7F FF 
0e914     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0e918     24 00 90 AD |  if_e	jmp	#LR__1151
0e91c     04 4E 05 F1 | 	add	fp, #4
0e920     A7 22 02 FB | 	rdlong	local03, fp
0e924     04 4E 05 F1 | 	add	fp, #4
0e928     A7 22 62 FC | 	wrlong	local03, fp
0e92c     18 4E 05 F1 | 	add	fp, #24
0e930     A7 22 02 FB | 	rdlong	local03, fp
0e934     1C 4E 85 F1 | 	sub	fp, #28
0e938     A7 22 62 FC | 	wrlong	local03, fp
0e93c     04 4E 85 F1 | 	sub	fp, #4
0e940                 | LR__1151
0e940     20 4E 05 F1 | 	add	fp, #32
0e944     A7 22 02 FB | 	rdlong	local03, fp
0e948     20 4E 85 F1 | 	sub	fp, #32
0e94c     FF FF 3F FF 
0e950     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0e954     0C 4E 05 51 |  if_ne	add	fp, #12
0e958     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e95c     0C 4E 85 51 |  if_ne	sub	fp, #12
0e960     FF FF 7F 5F 
0e964     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0e968     18 00 90 AD |  if_e	jmp	#LR__1152
0e96c     0C 4E 05 F1 | 	add	fp, #12
0e970     A7 22 02 FB | 	rdlong	local03, fp
0e974     0C 4E 85 F1 | 	sub	fp, #12
0e978     A7 20 02 FB | 	rdlong	local02, fp
0e97c     10 23 0A F2 | 	cmp	local03, local02 wz
0e980     54 FF 9F 5D |  if_ne	jmp	#LR__1150
0e984                 | LR__1152
0e984                 | ' 
0e984                 | ' if gotoheader(0)=gotoline then
0e984     0C 4E 05 F1 | 	add	fp, #12
0e988     A7 22 02 FB | 	rdlong	local03, fp
0e98c     0C 4E 85 F1 | 	sub	fp, #12
0e990     A7 1E 02 FB | 	rdlong	local01, fp
0e994     0F 23 0A F2 | 	cmp	local03, local01 wz
0e998     D8 00 90 5D |  if_ne	jmp	#LR__1153
0e99c     6A 00 00 FF 
0e9a0     80 E4 05 F1 | 	add	objptr, ##54400
0e9a4     F2 1E 02 FB | 	rdlong	local01, objptr
0e9a8     0F 21 02 F6 | 	mov	local02, local01
0e9ac     01 20 66 F0 | 	shl	local02, #1
0e9b0     0F 21 02 F1 | 	add	local02, local01
0e9b4     02 20 66 F0 | 	shl	local02, #2
0e9b8     03 00 00 FF 
0e9bc     04 E4 85 F1 | 	sub	objptr, ##1540
0e9c0     F2 20 02 F1 | 	add	local02, objptr
0e9c4     08 4E 05 F1 | 	add	fp, #8
0e9c8     A7 22 02 FB | 	rdlong	local03, fp
0e9cc     10 23 62 FC | 	wrlong	local03, local02
0e9d0     03 00 00 FF 
0e9d4     04 E4 05 F1 | 	add	objptr, ##1540
0e9d8     F2 1E 02 FB | 	rdlong	local01, objptr
0e9dc     0F 21 02 F6 | 	mov	local02, local01
0e9e0     01 20 66 F0 | 	shl	local02, #1
0e9e4     0F 21 02 F1 | 	add	local02, local01
0e9e8     02 20 66 F0 | 	shl	local02, #2
0e9ec     03 00 00 FF 
0e9f0     04 E4 85 F1 | 	sub	objptr, ##1540
0e9f4     F2 20 02 F1 | 	add	local02, objptr
0e9f8     08 20 06 F1 | 	add	local02, #8
0e9fc     10 9D 68 FC | 	wrlong	#78, local02
0ea00     03 00 00 FF 
0ea04     04 E4 05 F1 | 	add	objptr, ##1540
0ea08     F2 20 02 FB | 	rdlong	local02, objptr
0ea0c     10 13 02 F6 | 	mov	arg01, local02
0ea10     01 12 66 F0 | 	shl	arg01, #1
0ea14     10 13 02 F1 | 	add	arg01, local02
0ea18     02 12 66 F0 | 	shl	arg01, #2
0ea1c     03 00 00 FF 
0ea20     04 E4 85 F1 | 	sub	objptr, ##1540
0ea24     F2 12 02 F1 | 	add	arg01, objptr
0ea28     11 00 00 FF 
0ea2c     48 E4 05 F1 | 	add	objptr, ##8776
0ea30     F2 14 02 FB | 	rdlong	arg02, objptr
0ea34     02 22 06 F6 | 	mov	local03, #2
0ea38     10 23 02 F1 | 	add	local03, local02
0ea3c     13 00 00 FF 
0ea40     60 E4 85 F1 | 	sub	objptr, ##9824
0ea44     F2 16 02 FB | 	rdlong	arg03, objptr
0ea48     0B 23 02 FD | 	qmul	local03, arg03
0ea4c     08 4E 85 F1 | 	sub	fp, #8
0ea50     59 00 00 FF 
0ea54     98 E5 85 F1 | 	sub	objptr, ##45976
0ea58     18 22 62 FD | 	getqx	local03
0ea5c     11 15 02 F1 | 	add	arg02, local03
0ea60     88 F5 B0 FD | 	call	#_psram_spin2_write
0ea64     0B 00 00 FF 
0ea68     CC E4 85 F1 | 	sub	objptr, ##5836
0ea6c     18 FD BF FD | 	call	#_do_fast_goto
0ea70     08 00 90 FD | 	jmp	#LR__1154
0ea74                 | LR__1153
0ea74     26 12 06 F6 | 	mov	arg01, #38
0ea78     7C BC B0 FD | 	call	#_printerror
0ea7c                 | LR__1154
0ea7c     A7 F0 03 F6 | 	mov	ptra, fp
0ea80     B2 00 A0 FD | 	call	#popregs_
0ea84                 | _do_find_goto_ret
0ea84     2D 00 64 FD | 	ret
0ea88                 | 
0ea88                 | ' 
0ea88                 | ' sub do_slow_goto
0ea88                 | _do_slow_goto
0ea88     02 4A 05 F6 | 	mov	COUNT_, #2
0ea8c     A8 00 A0 FD | 	call	#pushregs_
0ea90     30 F0 07 F1 | 	add	ptra, #48
0ea94     C8 BD BF FD | 	call	#_pop
0ea98     FF 1E 02 F6 | 	mov	local01, result3
0ea9c     24 4E 05 F1 | 	add	fp, #36
0eaa0     A7 FA 61 FC | 	wrlong	result1, fp
0eaa4     04 4E 05 F1 | 	add	fp, #4
0eaa8     A7 FC 61 FC | 	wrlong	result2, fp
0eaac     04 4E 05 F1 | 	add	fp, #4
0eab0     A7 1E 62 FC | 	wrlong	local01, fp
0eab4     08 4E 85 F1 | 	sub	fp, #8
0eab8     A7 12 02 F6 | 	mov	arg01, fp
0eabc     24 4E 85 F1 | 	sub	fp, #36
0eac0     50 4A B0 FD | 	call	#_converttoint
0eac4     A7 FA 61 FC | 	wrlong	result1, fp
0eac8     6A 00 00 FF 
0eacc     84 E4 05 F1 | 	add	objptr, ##54404
0ead0     F2 20 02 FB | 	rdlong	local02, objptr
0ead4     6A 00 00 FF 
0ead8     84 E4 85 F1 | 	sub	objptr, ##54404
0eadc     04 4E 05 F1 | 	add	fp, #4
0eae0     A7 20 62 FC | 	wrlong	local02, fp
0eae4     04 4E 85 F1 | 	sub	fp, #4
0eae8                 | ' 
0eae8                 | ' t1=pop() : gotoline=converttoint(t1)
0eae8                 | ' gotoptr=programstart
0eae8                 | ' do
0eae8                 | LR__1160
0eae8     0C 4E 05 F1 | 	add	fp, #12
0eaec     A7 12 02 F6 | 	mov	arg01, fp
0eaf0     08 4E 85 F1 | 	sub	fp, #8
0eaf4     A7 14 02 FB | 	rdlong	arg02, fp
0eaf8     04 4E 85 F1 | 	sub	fp, #4
0eafc     18 16 06 F6 | 	mov	arg03, #24
0eb00     0B 00 00 FF 
0eb04     CC E4 05 F1 | 	add	objptr, ##5836
0eb08     44 F4 B0 FD | 	call	#_psram_spin2_read1
0eb0c     0B 00 00 FF 
0eb10     CC E4 85 F1 | 	sub	objptr, ##5836
0eb14                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0eb14                 | '   if gotoheader(0)<>$FFFFFFFF then
0eb14     0C 4E 05 F1 | 	add	fp, #12
0eb18     A7 20 02 FB | 	rdlong	local02, fp
0eb1c     0C 4E 85 F1 | 	sub	fp, #12
0eb20     FF FF 7F FF 
0eb24     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0eb28     24 00 90 AD |  if_e	jmp	#LR__1161
0eb2c     04 4E 05 F1 | 	add	fp, #4
0eb30     A7 20 02 FB | 	rdlong	local02, fp
0eb34     04 4E 05 F1 | 	add	fp, #4
0eb38     A7 20 62 FC | 	wrlong	local02, fp
0eb3c     18 4E 05 F1 | 	add	fp, #24
0eb40     A7 20 02 FB | 	rdlong	local02, fp
0eb44     1C 4E 85 F1 | 	sub	fp, #28
0eb48     A7 20 62 FC | 	wrlong	local02, fp
0eb4c     04 4E 85 F1 | 	sub	fp, #4
0eb50                 | LR__1161
0eb50     20 4E 05 F1 | 	add	fp, #32
0eb54     A7 20 02 FB | 	rdlong	local02, fp
0eb58     20 4E 85 F1 | 	sub	fp, #32
0eb5c     FF FF 3F FF 
0eb60     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0eb64     0C 4E 05 51 |  if_ne	add	fp, #12
0eb68     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0eb6c     0C 4E 85 51 |  if_ne	sub	fp, #12
0eb70     FF FF 7F 5F 
0eb74     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0eb78     18 00 90 AD |  if_e	jmp	#LR__1162
0eb7c     0C 4E 05 F1 | 	add	fp, #12
0eb80     A7 20 02 FB | 	rdlong	local02, fp
0eb84     0C 4E 85 F1 | 	sub	fp, #12
0eb88     A7 16 02 FB | 	rdlong	arg03, fp
0eb8c     0B 21 0A F2 | 	cmp	local02, arg03 wz
0eb90     54 FF 9F 5D |  if_ne	jmp	#LR__1160
0eb94                 | LR__1162
0eb94                 | ' if gotoheader(0)=gotoline then  
0eb94     0C 4E 05 F1 | 	add	fp, #12
0eb98     A7 20 02 FB | 	rdlong	local02, fp
0eb9c     0C 4E 85 F1 | 	sub	fp, #12
0eba0     A7 1E 02 FB | 	rdlong	local01, fp
0eba4     0F 21 0A F2 | 	cmp	local02, local01 wz
0eba8     60 00 90 5D |  if_ne	jmp	#LR__1163
0ebac     08 4E 05 F1 | 	add	fp, #8
0ebb0     A7 20 02 FB | 	rdlong	local02, fp
0ebb4     08 4E 85 F1 | 	sub	fp, #8
0ebb8     78 00 00 FF 
0ebbc     BC E4 05 F1 | 	add	objptr, ##61628
0ebc0     F2 20 62 FC | 	wrlong	local02, objptr
0ebc4     0E 00 00 FF 
0ebc8     40 E4 85 F1 | 	sub	objptr, ##7232
0ebcc     F2 20 02 FB | 	rdlong	local02, objptr
0ebd0     01 20 86 F1 | 	sub	local02, #1
0ebd4     04 E4 05 F1 | 	add	objptr, #4
0ebd8     F2 20 62 FC | 	wrlong	local02, objptr
0ebdc                 | '    runptr=oldgotoptr
0ebdc                 | '    lineptr_e=lineptr-1
0ebdc                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
0ebdc     0E 00 00 FF 
0ebe0     60 E4 05 F1 | 	add	objptr, ##7264
0ebe4     F2 20 02 FB | 	rdlong	local02, objptr
0ebe8     78 00 00 FF 
0ebec     E0 E4 85 F1 | 	sub	objptr, ##61664
0ebf0     FF FF 3F FF 
0ebf4     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0ebf8     78 00 00 AF 
0ebfc     E0 E4 05 A1 |  if_e	add	objptr, ##61664
0ec00     F2 00 68 AC |  if_e	wrlong	#0, objptr
0ec04     78 00 00 AF 
0ec08     E0 E4 85 A1 |  if_e	sub	objptr, ##61664
0ec0c                 | LR__1163
0ec0c     A7 F0 03 F6 | 	mov	ptra, fp
0ec10     B2 00 A0 FD | 	call	#popregs_
0ec14                 | _do_slow_goto_ret
0ec14     2D 00 64 FD | 	ret
0ec18                 | 
0ec18                 | ' 
0ec18                 | ' '----------------------- Error processing
0ec18                 | ' 
0ec18                 | ' sub do_error
0ec18                 | _do_error
0ec18     01 4A 05 F6 | 	mov	COUNT_, #1
0ec1c     A8 00 A0 FD | 	call	#pushregs_
0ec20     6A 00 00 FF 
0ec24     80 E4 05 F1 | 	add	objptr, ##54400
0ec28     F2 18 02 FB | 	rdlong	arg04, objptr
0ec2c     0C 17 02 F6 | 	mov	arg03, arg04
0ec30     01 16 66 F0 | 	shl	arg03, #1
0ec34     0C 17 02 F1 | 	add	arg03, arg04
0ec38     02 16 66 F0 | 	shl	arg03, #2
0ec3c     03 00 00 FF 
0ec40     04 E4 85 F1 | 	sub	objptr, ##1540
0ec44     F2 16 02 F1 | 	add	arg03, objptr
0ec48     0B 1F 02 FB | 	rdlong	local01, arg03
0ec4c                 | ' r=compiledline(lineptr_e).result.uresult
0ec4c                 | ' print "Error ";r;": ";errors$(r)
0ec4c     00 12 06 F6 | 	mov	arg01, #0
0ec50     67 00 00 FF 
0ec54     7C E4 85 F1 | 	sub	objptr, ##52860
0ec58     B0 58 B1 FD | 	call	#__system___getiolock_0484
0ec5c     FD 12 02 F6 | 	mov	arg01, result1
0ec60     10 FF B0 FD | 	call	#__system___lockmem
0ec64     73 01 00 FF 
0ec68     C4 15 06 F6 | 	mov	arg02, ##@LR__5147
0ec6c     00 12 06 F6 | 	mov	arg01, #0
0ec70     00 16 06 F6 | 	mov	arg03, #0
0ec74     04 0C B1 FD | 	call	#__system___basic_print_string
0ec78     00 12 06 F6 | 	mov	arg01, #0
0ec7c     0F 15 02 F6 | 	mov	arg02, local01
0ec80     00 16 06 F6 | 	mov	arg03, #0
0ec84     0A 18 06 F6 | 	mov	arg04, #10
0ec88     74 0C B1 FD | 	call	#__system___basic_print_unsigned
0ec8c     73 01 00 FF 
0ec90     CB 15 06 F6 | 	mov	arg02, ##@LR__5148
0ec94     00 12 06 F6 | 	mov	arg01, #0
0ec98     00 16 06 F6 | 	mov	arg03, #0
0ec9c     DC 0B B1 FD | 	call	#__system___basic_print_string
0eca0     02 1E 66 F0 | 	shl	local01, #2
0eca4     65 00 00 FF 
0eca8     7C E4 05 F1 | 	add	objptr, ##51836
0ecac     F2 1E 02 F1 | 	add	local01, objptr
0ecb0     0F 15 02 FB | 	rdlong	arg02, local01
0ecb4     00 12 06 F6 | 	mov	arg01, #0
0ecb8     00 16 06 F6 | 	mov	arg03, #0
0ecbc     65 00 00 FF 
0ecc0     7C E4 85 F1 | 	sub	objptr, ##51836
0ecc4     B4 0B B1 FD | 	call	#__system___basic_print_string
0ecc8     00 12 06 F6 | 	mov	arg01, #0
0eccc     0A 14 06 F6 | 	mov	arg02, #10
0ecd0     00 16 06 F6 | 	mov	arg03, #0
0ecd4     4C 0B B1 FD | 	call	#__system___basic_print_char
0ecd8     00 12 06 F6 | 	mov	arg01, #0
0ecdc     2C 58 B1 FD | 	call	#__system___getiolock_0484
0ece0     FD 00 68 FC | 	wrlong	#0, result1
0ece4     A7 F0 03 F6 | 	mov	ptra, fp
0ece8     B2 00 A0 FD | 	call	#popregs_
0ecec                 | _do_error_ret
0ecec     2D 00 64 FD | 	ret
0ecf0                 | 
0ecf0                 | ' 
0ecf0                 | ' 
0ecf0                 | ' '------------------ Assigning to a variable  
0ecf0                 | ' 
0ecf0                 | ' function  convertstring(psaddr as ulong) as string
0ecf0                 | _convertstring
0ecf0     04 4A 05 F6 | 	mov	COUNT_, #4
0ecf4     A8 00 A0 FD | 	call	#pushregs_
0ecf8     09 1F 02 F6 | 	mov	local01, arg01
0ecfc     8C BC B0 FD | 	call	#_pslpeek
0ed00     FD 20 02 F6 | 	mov	local02, result1
0ed04     73 01 00 FF 
0ed08     CE 23 06 F6 | 	mov	local03, ##@LR__5149
0ed0c                 | ' 'print "in convertstring: psaddr=";psaddr
0ed0c                 | ' l=pslpeek(psaddr)
0ed0c                 | ' 'print "in convertstring: len=";l
0ed0c                 | ' s="" 
0ed0c                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0ed0c     01 24 06 F6 | 	mov	local04, #1
0ed10     01 20 06 F1 | 	add	local02, #1
0ed14                 | LR__1170
0ed14     10 25 52 F2 | 	cmps	local04, local02 wc
0ed18     30 00 90 3D |  if_ae	jmp	#LR__1171
0ed1c     0F 13 02 F6 | 	mov	arg01, local01
0ed20     03 12 06 F1 | 	add	arg01, #3
0ed24     12 13 02 F1 | 	add	arg01, local04
0ed28     08 BC B0 FD | 	call	#_pspeek
0ed2c     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0ed30     4C 20 B1 FD | 	call	#__system__Chr_S
0ed34     FD 14 02 F6 | 	mov	arg02, result1
0ed38     11 13 02 F6 | 	mov	arg01, local03
0ed3c     90 FE B0 FD | 	call	#__system___string_concat
0ed40     FD 22 02 F6 | 	mov	local03, result1
0ed44     01 24 06 F1 | 	add	local04, #1
0ed48     C8 FF 9F FD | 	jmp	#LR__1170
0ed4c                 | LR__1171
0ed4c                 | ' 'print "in convertstring: str=";s
0ed4c                 | ' return s
0ed4c     11 FB 01 F6 | 	mov	result1, local03
0ed50     A7 F0 03 F6 | 	mov	ptra, fp
0ed54     B2 00 A0 FD | 	call	#popregs_
0ed58                 | _convertstring_ret
0ed58     2D 00 64 FD | 	ret
0ed5c                 | 
0ed5c                 | ' 
0ed5c                 | ' sub do_assign
0ed5c                 | _do_assign
0ed5c     05 4A 05 F6 | 	mov	COUNT_, #5
0ed60     A8 00 A0 FD | 	call	#pushregs_
0ed64     44 F0 07 F1 | 	add	ptra, #68
0ed68     6A 00 00 FF 
0ed6c     80 E4 05 F1 | 	add	objptr, ##54400
0ed70     F2 16 02 FB | 	rdlong	arg03, objptr
0ed74     0B 15 02 F6 | 	mov	arg02, arg03
0ed78     01 14 66 F0 | 	shl	arg02, #1
0ed7c     0B 15 02 F1 | 	add	arg02, arg03
0ed80     02 14 66 F0 | 	shl	arg02, #2
0ed84     03 00 00 FF 
0ed88     04 E4 85 F1 | 	sub	objptr, ##1540
0ed8c     F2 14 02 F1 | 	add	arg02, objptr
0ed90     0A 15 02 FB | 	rdlong	arg02, arg02
0ed94     18 4E 05 F1 | 	add	fp, #24
0ed98     A7 14 62 FC | 	wrlong	arg02, fp
0ed9c                 | ' 
0ed9c                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0ed9c                 | ' 
0ed9c                 | ' if variables(varnum).vartype<array_no_type then 
0ed9c     18 4E 85 F1 | 	sub	fp, #24
0eda0     04 14 66 F0 | 	shl	arg02, #4
0eda4     32 00 00 FF 
0eda8     84 E4 85 F1 | 	sub	objptr, ##25732
0edac     F2 14 02 F1 | 	add	arg02, objptr
0edb0     0C 14 06 F1 | 	add	arg02, #12
0edb4     0A 17 02 FB | 	rdlong	arg03, arg02
0edb8     00 17 16 F2 | 	cmp	arg03, #256 wc
0edbc     34 00 00 FF 
0edc0     F8 E5 85 F1 | 	sub	objptr, ##27128
0edc4     18 01 90 3D |  if_ae	jmp	#LR__1180
0edc8     94 BA BF FD | 	call	#_pop
0edcc     A7 FA 61 FC | 	wrlong	result1, fp
0edd0     04 4E 05 F1 | 	add	fp, #4
0edd4     A7 FC 61 FC | 	wrlong	result2, fp
0edd8     04 4E 05 F1 | 	add	fp, #4
0eddc     A7 FE 61 FC | 	wrlong	result3, fp
0ede0     08 4E 85 F1 | 	sub	fp, #8
0ede4     A7 16 02 FB | 	rdlong	arg03, fp
0ede8     04 4E 05 F1 | 	add	fp, #4
0edec     A7 14 02 FB | 	rdlong	arg02, fp
0edf0     14 4E 05 F1 | 	add	fp, #20
0edf4     A7 12 02 FB | 	rdlong	arg01, fp
0edf8     04 12 66 F0 | 	shl	arg01, #4
0edfc     34 00 00 FF 
0ee00     F8 E5 05 F1 | 	add	objptr, ##27128
0ee04     F2 12 02 F1 | 	add	arg01, objptr
0ee08     04 12 06 F1 | 	add	arg01, #4
0ee0c     09 17 62 FC | 	wrlong	arg03, arg01
0ee10     A7 16 02 FB | 	rdlong	arg03, fp
0ee14     04 16 66 F0 | 	shl	arg03, #4
0ee18     F2 16 02 F1 | 	add	arg03, objptr
0ee1c     08 16 06 F1 | 	add	arg03, #8
0ee20     0B 15 62 FC | 	wrlong	arg02, arg03
0ee24     A7 16 02 FB | 	rdlong	arg03, fp
0ee28     04 16 66 F0 | 	shl	arg03, #4
0ee2c     F2 16 02 F1 | 	add	arg03, objptr
0ee30     10 4E 85 F1 | 	sub	fp, #16
0ee34     A7 14 02 FB | 	rdlong	arg02, fp
0ee38     0C 16 06 F1 | 	add	arg03, #12
0ee3c     0B 15 62 FC | 	wrlong	arg02, arg03
0ee40                 | '   t1=pop() 
0ee40                 | ' 'print "In do_assign value to assign=";t1.result.uresult, "type to assign=";t1.result_type  
0ee40                 | '    variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0ee40                 | '   if variables(varnum).vartype<>result_string2 then return
0ee40     10 4E 05 F1 | 	add	fp, #16
0ee44     A7 16 02 FB | 	rdlong	arg03, fp
0ee48     18 4E 85 F1 | 	sub	fp, #24
0ee4c     04 16 66 F0 | 	shl	arg03, #4
0ee50     F2 16 02 F1 | 	add	arg03, objptr
0ee54     0C 16 06 F1 | 	add	arg03, #12
0ee58     0B 17 02 FB | 	rdlong	arg03, arg03
0ee5c     2B 16 0E F2 | 	cmp	arg03, #43 wz
0ee60     34 00 00 FF 
0ee64     F8 E5 85 F1 | 	sub	objptr, ##27128
0ee68     E4 04 90 5D |  if_ne	jmp	#LR__1203
0ee6c     18 4E 05 F1 | 	add	fp, #24
0ee70     A7 16 02 FB | 	rdlong	arg03, fp
0ee74     0B 1F 02 F6 | 	mov	local01, arg03
0ee78     04 1E 66 F0 | 	shl	local01, #4
0ee7c     34 00 00 FF 
0ee80     F8 E5 05 F1 | 	add	objptr, ##27128
0ee84     F2 1E 02 F1 | 	add	local01, objptr
0ee88     18 4E 85 F1 | 	sub	fp, #24
0ee8c     04 16 66 F0 | 	shl	arg03, #4
0ee90     F2 16 02 F1 | 	add	arg03, objptr
0ee94     04 16 06 F1 | 	add	arg03, #4
0ee98     0B 13 02 FB | 	rdlong	arg01, arg03
0ee9c     34 00 00 FF 
0eea0     F8 E5 85 F1 | 	sub	objptr, ##27128
0eea4     48 FE BF FD | 	call	#_convertstring
0eea8     04 1E 06 F1 | 	add	local01, #4
0eeac     0F FB 61 FC | 	wrlong	result1, local01
0eeb0     18 4E 05 F1 | 	add	fp, #24
0eeb4     A7 1E 02 FB | 	rdlong	local01, fp
0eeb8     18 4E 85 F1 | 	sub	fp, #24
0eebc     04 1E 66 F0 | 	shl	local01, #4
0eec0     34 00 00 FF 
0eec4     F8 E5 05 F1 | 	add	objptr, ##27128
0eec8     F2 1E 02 F1 | 	add	local01, objptr
0eecc     0C 1E 06 F1 | 	add	local01, #12
0eed0     0F 3F 68 FC | 	wrlong	#31, local01
0eed4                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0eed4                 | '   variables(varnum).vartype=result_string
0eed4                 | '   return
0eed4     34 00 00 FF 
0eed8     F8 E5 85 F1 | 	sub	objptr, ##27128
0eedc     70 04 90 FD | 	jmp	#LR__1203
0eee0                 | LR__1180
0eee0                 | ' for i=0 to 2 : arrid(i)=0 : next i
0eee0     1C 4E 05 F1 | 	add	fp, #28
0eee4     A7 00 68 FC | 	wrlong	#0, fp
0eee8     97 16 48 FB | 	callpa	#(@LR__1182-@LR__1181)>>2,fcache_load_ptr_
0eeec                 | LR__1181
0eeec     A7 1E 02 FB | 	rdlong	local01, fp
0eef0     02 1E 66 F0 | 	shl	local01, #2
0eef4     18 4E 05 F1 | 	add	fp, #24
0eef8     A7 1E 02 F1 | 	add	local01, fp
0eefc     0F 01 68 FC | 	wrlong	#0, local01
0ef00     18 4E 85 F1 | 	sub	fp, #24
0ef04     A7 1E 02 FB | 	rdlong	local01, fp
0ef08     01 1E 06 F1 | 	add	local01, #1
0ef0c     A7 1E 62 FC | 	wrlong	local01, fp
0ef10     03 1E 16 F2 | 	cmp	local01, #3 wc
0ef14     D4 FF 9F CD |  if_b	jmp	#LR__1181
0ef18                 | LR__1182
0ef18     6A 00 00 FF 
0ef1c     80 E4 05 F1 | 	add	objptr, ##54400
0ef20     F2 16 02 FB | 	rdlong	arg03, objptr
0ef24     0B 1F 02 F6 | 	mov	local01, arg03
0ef28     01 1E 66 F0 | 	shl	local01, #1
0ef2c     0B 1F 02 F1 | 	add	local01, arg03
0ef30     02 1E 66 F0 | 	shl	local01, #2
0ef34     03 00 00 FF 
0ef38     04 E4 85 F1 | 	sub	objptr, ##1540
0ef3c     F2 1E 02 F1 | 	add	local01, objptr
0ef40     04 1E 06 F1 | 	add	local01, #4
0ef44     0F 21 02 FB | 	rdlong	local02, local01
0ef48     04 4E 05 F1 | 	add	fp, #4
0ef4c     A7 20 62 FC | 	wrlong	local02, fp
0ef50     20 4E 85 F1 | 	sub	fp, #32
0ef54     67 00 00 FF 
0ef58     7C E4 85 F1 | 	sub	objptr, ##52860
0ef5c     00 B9 BF FD | 	call	#_pop
0ef60     A7 FA 61 FC | 	wrlong	result1, fp
0ef64     04 4E 05 F1 | 	add	fp, #4
0ef68     A7 FC 61 FC | 	wrlong	result2, fp
0ef6c     04 4E 05 F1 | 	add	fp, #4
0ef70     A7 FE 61 FC | 	wrlong	result3, fp
0ef74                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0ef74                 | ' t1=pop() ' var value
0ef74                 | ' if numpar>0 then
0ef74     18 4E 05 F1 | 	add	fp, #24
0ef78     A7 22 02 FB | 	rdlong	local03, fp
0ef7c     20 4E 85 F1 | 	sub	fp, #32
0ef80     01 22 16 F2 | 	cmp	local03, #1 wc
0ef84     78 00 90 CD |  if_b	jmp	#LR__1185
0ef88                 | '   for i=numpar to 1 step -1
0ef88     20 4E 05 F1 | 	add	fp, #32
0ef8c     A7 24 0A FB | 	rdlong	local04, fp wz
0ef90     04 4E 85 F1 | 	sub	fp, #4
0ef94     A7 24 62 FC | 	wrlong	local04, fp
0ef98     1C 4E 85 F1 | 	sub	fp, #28
0ef9c     60 00 90 AD |  if_e	jmp	#LR__1184
0efa0                 | LR__1183
0efa0     BC B8 BF FD | 	call	#_pop
0efa4     0C 4E 05 F1 | 	add	fp, #12
0efa8     A7 FA 61 FC | 	wrlong	result1, fp
0efac     04 4E 05 F1 | 	add	fp, #4
0efb0     A7 FC 61 FC | 	wrlong	result2, fp
0efb4     04 4E 05 F1 | 	add	fp, #4
0efb8     A7 FE 61 FC | 	wrlong	result3, fp
0efbc     08 4E 05 F1 | 	add	fp, #8
0efc0     A7 22 02 FB | 	rdlong	local03, fp
0efc4     01 22 86 F1 | 	sub	local03, #1
0efc8     02 22 66 F0 | 	shl	local03, #2
0efcc     18 4E 05 F1 | 	add	fp, #24
0efd0     A7 22 02 F1 | 	add	local03, fp
0efd4     28 4E 85 F1 | 	sub	fp, #40
0efd8     A7 12 02 F6 | 	mov	arg01, fp
0efdc     0C 4E 85 F1 | 	sub	fp, #12
0efe0     30 45 B0 FD | 	call	#_converttoint
0efe4     11 FB 61 FC | 	wrlong	result1, local03
0efe8     1C 4E 05 F1 | 	add	fp, #28
0efec     A7 24 02 FB | 	rdlong	local04, fp
0eff0     01 24 8E F1 | 	sub	local04, #1 wz
0eff4     A7 24 62 FC | 	wrlong	local04, fp
0eff8     1C 4E 85 F1 | 	sub	fp, #28
0effc     A0 FF 9F 5D |  if_ne	jmp	#LR__1183
0f000                 | LR__1184
0f000                 | LR__1185
0f000     18 4E 05 F1 | 	add	fp, #24
0f004     A7 1E 02 FB | 	rdlong	local01, fp
0f008     04 1E 66 F0 | 	shl	local01, #4
0f00c     34 00 00 FF 
0f010     F8 E5 05 F1 | 	add	objptr, ##27128
0f014     F2 1E 02 F1 | 	add	local01, objptr
0f018     04 1E 06 F1 | 	add	local01, #4
0f01c     0F 13 02 FB | 	rdlong	arg01, local01
0f020     0C 4E 05 F1 | 	add	fp, #12
0f024     A7 12 62 FC | 	wrlong	arg01, fp
0f028     24 4E 85 F1 | 	sub	fp, #36
0f02c     34 00 00 FF 
0f030     F8 E5 85 F1 | 	sub	objptr, ##27128
0f034     54 B9 B0 FD | 	call	#_pslpeek
0f038     FD 24 32 F9 | 	getword	local04, result1, #0
0f03c     28 4E 05 F1 | 	add	fp, #40
0f040     A7 24 62 FC | 	wrlong	local04, fp
0f044     04 4E 85 F1 | 	sub	fp, #4
0f048     A7 12 02 FB | 	rdlong	arg01, fp
0f04c     24 4E 85 F1 | 	sub	fp, #36
0f050     02 12 06 F1 | 	add	arg01, #2
0f054     DC B8 B0 FD | 	call	#_pspeek
0f058     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f05c     2C 4E 05 F1 | 	add	fp, #44
0f060     A7 FA 61 FC | 	wrlong	result1, fp
0f064                 | ' esize=pspeek(arrptr+2)
0f064                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
0f064     08 4E 85 F1 | 	sub	fp, #8
0f068     A7 12 02 FB | 	rdlong	arg01, fp
0f06c     24 4E 85 F1 | 	sub	fp, #36
0f070     04 12 06 F1 | 	add	arg01, #4
0f074     14 B9 B0 FD | 	call	#_pslpeek
0f078     FD 24 02 F6 | 	mov	local04, result1
0f07c     34 4E 05 F1 | 	add	fp, #52
0f080     A7 1E 02 FB | 	rdlong	local01, fp
0f084     34 4E 85 F1 | 	sub	fp, #52
0f088     12 1F 12 F2 | 	cmp	local01, local04 wc
0f08c     54 00 90 3D |  if_ae	jmp	#LR__1186
0f090     24 4E 05 F1 | 	add	fp, #36
0f094     A7 12 02 FB | 	rdlong	arg01, fp
0f098     24 4E 85 F1 | 	sub	fp, #36
0f09c     08 12 06 F1 | 	add	arg01, #8
0f0a0     E8 B8 B0 FD | 	call	#_pslpeek
0f0a4     FD 1E 02 F6 | 	mov	local01, result1
0f0a8     38 4E 05 F1 | 	add	fp, #56
0f0ac     A7 24 02 FB | 	rdlong	local04, fp
0f0b0     38 4E 85 F1 | 	sub	fp, #56
0f0b4     0F 25 12 F2 | 	cmp	local04, local01 wc
0f0b8     28 00 90 3D |  if_ae	jmp	#LR__1186
0f0bc     24 4E 05 F1 | 	add	fp, #36
0f0c0     A7 12 02 FB | 	rdlong	arg01, fp
0f0c4     24 4E 85 F1 | 	sub	fp, #36
0f0c8     0C 12 06 F1 | 	add	arg01, #12
0f0cc     BC B8 B0 FD | 	call	#_pslpeek
0f0d0     3C 4E 05 F1 | 	add	fp, #60
0f0d4     A7 24 02 FB | 	rdlong	local04, fp
0f0d8     3C 4E 85 F1 | 	sub	fp, #60
0f0dc     FD 24 12 F2 | 	cmp	local04, result1 wc
0f0e0     0C 00 90 CD |  if_b	jmp	#LR__1187
0f0e4                 | LR__1186
0f0e4     31 12 06 F6 | 	mov	arg01, #49
0f0e8     0C B6 B0 FD | 	call	#_printerror
0f0ec     60 02 90 FD | 	jmp	#LR__1203
0f0f0                 | LR__1187
0f0f0     24 4E 05 F1 | 	add	fp, #36
0f0f4     A7 12 02 FB | 	rdlong	arg01, fp
0f0f8     09 25 02 F6 | 	mov	local04, arg01
0f0fc     10 24 06 F1 | 	add	local04, #16
0f100     24 4E 85 F1 | 	sub	fp, #36
0f104     04 12 06 F1 | 	add	arg01, #4
0f108     80 B8 B0 FD | 	call	#_pslpeek
0f10c     FD 1E 02 F6 | 	mov	local01, result1
0f110     38 4E 05 F1 | 	add	fp, #56
0f114     A7 20 02 FB | 	rdlong	local02, fp
0f118     10 1F 02 FD | 	qmul	local01, local02
0f11c     04 4E 85 F1 | 	sub	fp, #4
0f120     A7 22 02 FB | 	rdlong	local03, fp
0f124     10 4E 85 F1 | 	sub	fp, #16
0f128     A7 12 02 FB | 	rdlong	arg01, fp
0f12c     24 4E 85 F1 | 	sub	fp, #36
0f130     08 12 06 F1 | 	add	arg01, #8
0f134     18 20 62 FD | 	getqx	local02
0f138     10 23 02 F1 | 	add	local03, local02
0f13c     4C B8 B0 FD | 	call	#_pslpeek
0f140     FD 20 02 F6 | 	mov	local02, result1
0f144     24 4E 05 F1 | 	add	fp, #36
0f148     A7 12 02 FB | 	rdlong	arg01, fp
0f14c     24 4E 85 F1 | 	sub	fp, #36
0f150     04 12 06 F1 | 	add	arg01, #4
0f154     34 B8 B0 FD | 	call	#_pslpeek
0f158     FD 20 02 FD | 	qmul	local02, result1
0f15c     3C 4E 05 F1 | 	add	fp, #60
0f160     A7 20 02 FB | 	rdlong	local02, fp
0f164     18 1E 62 FD | 	getqx	local01
0f168     10 1F 02 FD | 	qmul	local01, local02
0f16c     10 4E 85 F1 | 	sub	fp, #16
0f170     A7 20 02 FB | 	rdlong	local02, fp
0f174     18 1E 62 FD | 	getqx	local01
0f178     0F 23 02 F1 | 	add	local03, local01
0f17c     11 21 02 FD | 	qmul	local02, local03
0f180     04 4E 05 F1 | 	add	fp, #4
0f184                 | ' 
0f184                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0f184                 | ' select case arrtype
0f184     18 22 62 FD | 	getqx	local03
0f188     11 25 02 F1 | 	add	local04, local03
0f18c     A7 24 62 FC | 	wrlong	local04, fp
0f190     08 4E 85 F1 | 	sub	fp, #8
0f194     A7 26 02 FB | 	rdlong	local05, fp
0f198     28 4E 85 F1 | 	sub	fp, #40
0f19c     00 27 86 F1 | 	sub	local05, #256
0f1a0     0C 26 26 F3 | 	fle	local05, #12
0f1a4     30 26 62 FD | 	jmprel	local05
0f1a8                 | LR__1188
0f1a8     30 00 90 FD | 	jmp	#LR__1189
0f1ac     58 00 90 FD | 	jmp	#LR__1190
0f1b0     6C 00 90 FD | 	jmp	#LR__1191
0f1b4     80 00 90 FD | 	jmp	#LR__1192
0f1b8     B0 00 90 FD | 	jmp	#LR__1193
0f1bc     E0 00 90 FD | 	jmp	#LR__1194
0f1c0     F4 00 90 FD | 	jmp	#LR__1195
0f1c4     08 01 90 FD | 	jmp	#LR__1196
0f1c8     1C 01 90 FD | 	jmp	#LR__1197
0f1cc     30 01 90 FD | 	jmp	#LR__1198
0f1d0     44 01 90 FD | 	jmp	#LR__1199
0f1d4     58 01 90 FD | 	jmp	#LR__1200
0f1d8     6C 01 90 FD | 	jmp	#LR__1201
0f1dc                 | LR__1189
0f1dc     A7 12 02 F6 | 	mov	arg01, fp
0f1e0     30 4E 05 F1 | 	add	fp, #48
0f1e4     A7 14 02 FB | 	rdlong	arg02, fp
0f1e8     30 4E 85 F1 | 	sub	fp, #48
0f1ec     0C 16 06 F6 | 	mov	arg03, #12
0f1f0     0B 00 00 FF 
0f1f4     CC E4 05 F1 | 	add	objptr, ##5836
0f1f8     F0 ED B0 FD | 	call	#_psram_spin2_write
0f1fc     0B 00 00 FF 
0f200     CC E4 85 F1 | 	sub	objptr, ##5836
0f204     48 01 90 FD | 	jmp	#LR__1202
0f208                 | LR__1190
0f208     30 4E 05 F1 | 	add	fp, #48
0f20c     A7 12 02 FB | 	rdlong	arg01, fp
0f210     30 4E 85 F1 | 	sub	fp, #48
0f214     A7 14 02 FB | 	rdlong	arg02, fp
0f218     D0 B6 B0 FD | 	call	#_pspoke
0f21c     30 01 90 FD | 	jmp	#LR__1202
0f220                 | LR__1191
0f220     30 4E 05 F1 | 	add	fp, #48
0f224     A7 12 02 FB | 	rdlong	arg01, fp
0f228     30 4E 85 F1 | 	sub	fp, #48
0f22c     A7 14 02 FB | 	rdlong	arg02, fp
0f230     B8 B6 B0 FD | 	call	#_pspoke
0f234     18 01 90 FD | 	jmp	#LR__1202
0f238                 | LR__1192
0f238     30 4E 05 F1 | 	add	fp, #48
0f23c     A7 12 02 FB | 	rdlong	arg01, fp
0f240     30 4E 85 F1 | 	sub	fp, #48
0f244     A7 14 02 FB | 	rdlong	arg02, fp
0f248     A0 B6 B0 FD | 	call	#_pspoke
0f24c     30 4E 05 F1 | 	add	fp, #48
0f250     A7 12 02 FB | 	rdlong	arg01, fp
0f254     30 4E 85 F1 | 	sub	fp, #48
0f258     01 12 06 F1 | 	add	arg01, #1
0f25c     A7 14 02 FB | 	rdlong	arg02, fp
0f260     08 14 46 F0 | 	shr	arg02, #8
0f264     84 B6 B0 FD | 	call	#_pspoke
0f268     E4 00 90 FD | 	jmp	#LR__1202
0f26c                 | LR__1193
0f26c     30 4E 05 F1 | 	add	fp, #48
0f270     A7 12 02 FB | 	rdlong	arg01, fp
0f274     30 4E 85 F1 | 	sub	fp, #48
0f278     A7 14 02 FB | 	rdlong	arg02, fp
0f27c     6C B6 B0 FD | 	call	#_pspoke
0f280     30 4E 05 F1 | 	add	fp, #48
0f284     A7 12 02 FB | 	rdlong	arg01, fp
0f288     30 4E 85 F1 | 	sub	fp, #48
0f28c     01 12 06 F1 | 	add	arg01, #1
0f290     A7 14 02 FB | 	rdlong	arg02, fp
0f294     08 14 46 F0 | 	shr	arg02, #8
0f298     50 B6 B0 FD | 	call	#_pspoke
0f29c     B0 00 90 FD | 	jmp	#LR__1202
0f2a0                 | LR__1194
0f2a0     30 4E 05 F1 | 	add	fp, #48
0f2a4     A7 12 02 FB | 	rdlong	arg01, fp
0f2a8     30 4E 85 F1 | 	sub	fp, #48
0f2ac     A7 14 02 FB | 	rdlong	arg02, fp
0f2b0     A8 B5 B0 FD | 	call	#_pslpoke
0f2b4     98 00 90 FD | 	jmp	#LR__1202
0f2b8                 | LR__1195
0f2b8     30 4E 05 F1 | 	add	fp, #48
0f2bc     A7 12 02 FB | 	rdlong	arg01, fp
0f2c0     30 4E 85 F1 | 	sub	fp, #48
0f2c4     A7 14 02 FB | 	rdlong	arg02, fp
0f2c8     90 B5 B0 FD | 	call	#_pslpoke
0f2cc     80 00 90 FD | 	jmp	#LR__1202
0f2d0                 | LR__1196
0f2d0     30 4E 05 F1 | 	add	fp, #48
0f2d4     A7 12 02 FB | 	rdlong	arg01, fp
0f2d8     30 4E 85 F1 | 	sub	fp, #48
0f2dc     A7 14 02 FB | 	rdlong	arg02, fp
0f2e0     78 B5 B0 FD | 	call	#_pslpoke
0f2e4     68 00 90 FD | 	jmp	#LR__1202
0f2e8                 | LR__1197
0f2e8     30 4E 05 F1 | 	add	fp, #48
0f2ec     A7 12 02 FB | 	rdlong	arg01, fp
0f2f0     30 4E 85 F1 | 	sub	fp, #48
0f2f4     A7 14 02 FB | 	rdlong	arg02, fp
0f2f8     60 B5 B0 FD | 	call	#_pslpoke
0f2fc     50 00 90 FD | 	jmp	#LR__1202
0f300                 | LR__1198
0f300     30 4E 05 F1 | 	add	fp, #48
0f304     A7 12 02 FB | 	rdlong	arg01, fp
0f308     30 4E 85 F1 | 	sub	fp, #48
0f30c     A7 14 02 FB | 	rdlong	arg02, fp
0f310     48 B5 B0 FD | 	call	#_pslpoke
0f314     38 00 90 FD | 	jmp	#LR__1202
0f318                 | LR__1199
0f318     30 4E 05 F1 | 	add	fp, #48
0f31c     A7 12 02 FB | 	rdlong	arg01, fp
0f320     30 4E 85 F1 | 	sub	fp, #48
0f324     A7 14 02 FB | 	rdlong	arg02, fp
0f328     30 B5 B0 FD | 	call	#_pslpoke
0f32c     20 00 90 FD | 	jmp	#LR__1202
0f330                 | LR__1200
0f330     30 4E 05 F1 | 	add	fp, #48
0f334     A7 12 02 FB | 	rdlong	arg01, fp
0f338     30 4E 85 F1 | 	sub	fp, #48
0f33c     A7 14 02 FB | 	rdlong	arg02, fp
0f340     18 B5 B0 FD | 	call	#_pslpoke
0f344     08 00 90 FD | 	jmp	#LR__1202
0f348                 | LR__1201
0f348     2F 12 06 F6 | 	mov	arg01, #47
0f34c     A8 B3 B0 FD | 	call	#_printerror
0f350                 | LR__1202
0f350                 | LR__1203
0f350     A7 F0 03 F6 | 	mov	ptra, fp
0f354     B2 00 A0 FD | 	call	#popregs_
0f358                 | _do_assign_ret
0f358     2D 00 64 FD | 	ret
0f35c                 | 
0f35c                 | ' 
0f35c                 | ' 
0f35c                 | ' ' --------------------- Read a variable and push to the stack
0f35c                 | ' 
0f35c                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0f35c                 | ' 
0f35c                 | ' sub do_getvar
0f35c                 | _do_getvar
0f35c     04 4A 05 F6 | 	mov	COUNT_, #4
0f360     A8 00 A0 FD | 	call	#pushregs_
0f364     3C F0 07 F1 | 	add	ptra, #60
0f368                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0f368                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0f368     6A 00 00 FF 
0f36c     80 E4 05 F1 | 	add	objptr, ##54400
0f370     F2 1E 02 FB | 	rdlong	local01, objptr
0f374     0F 17 02 F6 | 	mov	arg03, local01
0f378     01 16 66 F0 | 	shl	arg03, #1
0f37c     0F 17 02 F1 | 	add	arg03, local01
0f380     02 16 66 F0 | 	shl	arg03, #2
0f384     03 00 00 FF 
0f388     04 E4 85 F1 | 	sub	objptr, ##1540
0f38c     F2 16 02 F1 | 	add	arg03, objptr
0f390     04 16 06 F1 | 	add	arg03, #4
0f394     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0f398     67 00 00 FF 
0f39c     7C E4 85 F1 | 	sub	objptr, ##52860
0f3a0     C4 00 90 5D |  if_ne	jmp	#LR__1211
0f3a4     6A 00 00 FF 
0f3a8     80 E4 05 F1 | 	add	objptr, ##54400
0f3ac     F2 1E 02 FB | 	rdlong	local01, objptr
0f3b0     0F 13 02 F6 | 	mov	arg01, local01
0f3b4     01 12 66 F0 | 	shl	arg01, #1
0f3b8     0F 13 02 F1 | 	add	arg01, local01
0f3bc     02 12 66 F0 | 	shl	arg01, #2
0f3c0     03 00 00 FF 
0f3c4     04 E4 85 F1 | 	sub	objptr, ##1540
0f3c8     F2 12 02 F1 | 	add	arg01, objptr
0f3cc     09 1F 02 FB | 	rdlong	local01, arg01
0f3d0     04 1E 66 F0 | 	shl	local01, #4
0f3d4     32 00 00 FF 
0f3d8     84 E4 85 F1 | 	sub	objptr, ##25732
0f3dc     F2 1E 02 F1 | 	add	local01, objptr
0f3e0     04 1E 06 F1 | 	add	local01, #4
0f3e4     0F 13 02 FB | 	rdlong	arg01, local01
0f3e8     04 1E 06 F1 | 	add	local01, #4
0f3ec     0F 1F 02 FB | 	rdlong	local01, local01
0f3f0     A7 12 62 FC | 	wrlong	arg01, fp
0f3f4     04 4E 05 F1 | 	add	fp, #4
0f3f8     A7 1E 62 FC | 	wrlong	local01, fp
0f3fc     35 00 00 FF 
0f400     88 E4 05 F1 | 	add	objptr, ##27272
0f404     F2 1E 02 FB | 	rdlong	local01, objptr
0f408     0F 13 02 F6 | 	mov	arg01, local01
0f40c     01 12 66 F0 | 	shl	arg01, #1
0f410     0F 13 02 F1 | 	add	arg01, local01
0f414     02 12 66 F0 | 	shl	arg01, #2
0f418     03 00 00 FF 
0f41c     04 E4 85 F1 | 	sub	objptr, ##1540
0f420     F2 12 02 F1 | 	add	arg01, objptr
0f424     09 1F 02 FB | 	rdlong	local01, arg01
0f428     04 1E 66 F0 | 	shl	local01, #4
0f42c     32 00 00 FF 
0f430     84 E4 85 F1 | 	sub	objptr, ##25732
0f434     F2 1E 02 F1 | 	add	local01, objptr
0f438     0C 1E 06 F1 | 	add	local01, #12
0f43c     0F 1F 02 FB | 	rdlong	local01, local01
0f440     04 4E 05 F1 | 	add	fp, #4
0f444     A7 1E 62 FC | 	wrlong	local01, fp
0f448                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0f448                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0f448                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0f448     08 4E 85 F1 | 	sub	fp, #8
0f44c     00 1F 16 F2 | 	cmp	local01, #256 wc
0f450     34 00 00 FF 
0f454     F8 E5 85 F1 | 	sub	objptr, ##27128
0f458     0C 00 90 3D |  if_ae	jmp	#LR__1210
0f45c     A7 12 02 F6 | 	mov	arg01, fp
0f460     94 B4 BF FD | 	call	#_push
0f464     A0 04 90 FD | 	jmp	#LR__1232
0f468                 | LR__1210
0f468                 | LR__1211
0f468     6A 00 00 FF 
0f46c     80 E4 05 F1 | 	add	objptr, ##54400
0f470     F2 16 02 FB | 	rdlong	arg03, objptr
0f474     0B 15 02 F6 | 	mov	arg02, arg03
0f478     01 14 66 F0 | 	shl	arg02, #1
0f47c     0B 15 02 F1 | 	add	arg02, arg03
0f480     02 14 66 F0 | 	shl	arg02, #2
0f484     03 00 00 FF 
0f488     04 E4 85 F1 | 	sub	objptr, ##1540
0f48c     F2 14 02 F1 | 	add	arg02, objptr
0f490     0A 17 02 FB | 	rdlong	arg03, arg02
0f494     04 16 66 F0 | 	shl	arg03, #4
0f498     32 00 00 FF 
0f49c     84 E4 85 F1 | 	sub	objptr, ##25732
0f4a0     F2 16 02 F1 | 	add	arg03, objptr
0f4a4     04 16 06 F1 | 	add	arg03, #4
0f4a8     0B 13 02 FB | 	rdlong	arg01, arg03
0f4ac     0C 4E 05 F1 | 	add	fp, #12
0f4b0     A7 12 62 FC | 	wrlong	arg01, fp
0f4b4     0C 4E 85 F1 | 	sub	fp, #12
0f4b8     34 00 00 FF 
0f4bc     F8 E5 85 F1 | 	sub	objptr, ##27128
0f4c0     C8 B4 B0 FD | 	call	#_pslpeek
0f4c4     FD FA 31 F9 | 	getword	result1, result1, #0
0f4c8     10 4E 05 F1 | 	add	fp, #16
0f4cc     A7 FA 61 FC | 	wrlong	result1, fp
0f4d0     6A 00 00 FF 
0f4d4     80 E4 05 F1 | 	add	objptr, ##54400
0f4d8     F2 16 02 FB | 	rdlong	arg03, objptr
0f4dc     0B 15 02 F6 | 	mov	arg02, arg03
0f4e0     01 14 66 F0 | 	shl	arg02, #1
0f4e4     0B 15 02 F1 | 	add	arg02, arg03
0f4e8     02 14 66 F0 | 	shl	arg02, #2
0f4ec     03 00 00 FF 
0f4f0     04 E4 85 F1 | 	sub	objptr, ##1540
0f4f4     F2 14 02 F1 | 	add	arg02, objptr
0f4f8     04 14 06 F1 | 	add	arg02, #4
0f4fc     0A 17 02 FB | 	rdlong	arg03, arg02
0f500     04 4E 05 F1 | 	add	fp, #4
0f504     A7 16 62 FC | 	wrlong	arg03, fp
0f508     08 4E 85 F1 | 	sub	fp, #8
0f50c     A7 12 02 FB | 	rdlong	arg01, fp
0f510     0C 4E 85 F1 | 	sub	fp, #12
0f514     02 12 06 F1 | 	add	arg01, #2
0f518     67 00 00 FF 
0f51c     7C E4 85 F1 | 	sub	objptr, ##52860
0f520     10 B4 B0 FD | 	call	#_pspeek
0f524     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f528     18 4E 05 F1 | 	add	fp, #24
0f52c     A7 FA 61 FC | 	wrlong	result1, fp
0f530     0C 4E 85 F1 | 	sub	fp, #12
0f534     A7 12 02 FB | 	rdlong	arg01, fp
0f538     0C 4E 85 F1 | 	sub	fp, #12
0f53c     04 12 06 F1 | 	add	arg01, #4
0f540     48 B4 B0 FD | 	call	#_pslpeek
0f544     1C 4E 05 F1 | 	add	fp, #28
0f548     A7 FA 61 FC | 	wrlong	result1, fp
0f54c     10 4E 85 F1 | 	sub	fp, #16
0f550     A7 12 02 FB | 	rdlong	arg01, fp
0f554     0C 4E 85 F1 | 	sub	fp, #12
0f558     08 12 06 F1 | 	add	arg01, #8
0f55c     2C B4 B0 FD | 	call	#_pslpeek
0f560     20 4E 05 F1 | 	add	fp, #32
0f564     A7 FA 61 FC | 	wrlong	result1, fp
0f568     14 4E 85 F1 | 	sub	fp, #20
0f56c     A7 12 02 FB | 	rdlong	arg01, fp
0f570     0C 4E 85 F1 | 	sub	fp, #12
0f574     0C 12 06 F1 | 	add	arg01, #12
0f578     10 B4 B0 FD | 	call	#_pslpeek
0f57c     24 4E 05 F1 | 	add	fp, #36
0f580     A7 FA 61 FC | 	wrlong	result1, fp
0f584                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0f584                 | ' esize=pspeek(arrptr+2)
0f584                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0f584                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0f584                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0f584                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0f584     10 4E 85 F1 | 	sub	fp, #16
0f588     A7 16 02 FB | 	rdlong	arg03, fp
0f58c     14 4E 85 F1 | 	sub	fp, #20
0f590     03 16 16 F2 | 	cmp	arg03, #3 wc
0f594     38 00 90 CD |  if_b	jmp	#LR__1212
0f598     C4 B2 BF FD | 	call	#_pop
0f59c     FF 16 02 F6 | 	mov	arg03, result3
0f5a0     A7 FA 61 FC | 	wrlong	result1, fp
0f5a4     04 4E 05 F1 | 	add	fp, #4
0f5a8     A7 FC 61 FC | 	wrlong	result2, fp
0f5ac     04 4E 05 F1 | 	add	fp, #4
0f5b0     A7 16 62 FC | 	wrlong	arg03, fp
0f5b4     08 4E 85 F1 | 	sub	fp, #8
0f5b8     A7 12 02 F6 | 	mov	arg01, fp
0f5bc     54 3F B0 FD | 	call	#_converttoint
0f5c0     30 4E 05 F1 | 	add	fp, #48
0f5c4     A7 FA 61 FC | 	wrlong	result1, fp
0f5c8     30 4E 85 F1 | 	sub	fp, #48
0f5cc     0C 00 90 FD | 	jmp	#LR__1213
0f5d0                 | LR__1212
0f5d0     30 4E 05 F1 | 	add	fp, #48
0f5d4     A7 00 68 FC | 	wrlong	#0, fp
0f5d8     30 4E 85 F1 | 	sub	fp, #48
0f5dc                 | LR__1213
0f5dc                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0f5dc     14 4E 05 F1 | 	add	fp, #20
0f5e0     A7 16 02 FB | 	rdlong	arg03, fp
0f5e4     14 4E 85 F1 | 	sub	fp, #20
0f5e8     02 16 16 F2 | 	cmp	arg03, #2 wc
0f5ec     38 00 90 CD |  if_b	jmp	#LR__1214
0f5f0     6C B2 BF FD | 	call	#_pop
0f5f4     FF 16 02 F6 | 	mov	arg03, result3
0f5f8     A7 FA 61 FC | 	wrlong	result1, fp
0f5fc     04 4E 05 F1 | 	add	fp, #4
0f600     A7 FC 61 FC | 	wrlong	result2, fp
0f604     04 4E 05 F1 | 	add	fp, #4
0f608     A7 16 62 FC | 	wrlong	arg03, fp
0f60c     08 4E 85 F1 | 	sub	fp, #8
0f610     A7 12 02 F6 | 	mov	arg01, fp
0f614     FC 3E B0 FD | 	call	#_converttoint
0f618     2C 4E 05 F1 | 	add	fp, #44
0f61c     A7 FA 61 FC | 	wrlong	result1, fp
0f620     2C 4E 85 F1 | 	sub	fp, #44
0f624     0C 00 90 FD | 	jmp	#LR__1215
0f628                 | LR__1214
0f628     2C 4E 05 F1 | 	add	fp, #44
0f62c     A7 00 68 FC | 	wrlong	#0, fp
0f630     2C 4E 85 F1 | 	sub	fp, #44
0f634                 | LR__1215
0f634                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0f634     14 4E 05 F1 | 	add	fp, #20
0f638     A7 16 02 FB | 	rdlong	arg03, fp
0f63c     14 4E 85 F1 | 	sub	fp, #20
0f640     01 16 16 F2 | 	cmp	arg03, #1 wc
0f644     38 00 90 CD |  if_b	jmp	#LR__1216
0f648     14 B2 BF FD | 	call	#_pop
0f64c     FF 16 02 F6 | 	mov	arg03, result3
0f650     A7 FA 61 FC | 	wrlong	result1, fp
0f654     04 4E 05 F1 | 	add	fp, #4
0f658     A7 FC 61 FC | 	wrlong	result2, fp
0f65c     04 4E 05 F1 | 	add	fp, #4
0f660     A7 16 62 FC | 	wrlong	arg03, fp
0f664     08 4E 85 F1 | 	sub	fp, #8
0f668     A7 12 02 F6 | 	mov	arg01, fp
0f66c     A4 3E B0 FD | 	call	#_converttoint
0f670     28 4E 05 F1 | 	add	fp, #40
0f674     A7 FA 61 FC | 	wrlong	result1, fp
0f678     28 4E 85 F1 | 	sub	fp, #40
0f67c     0C 00 90 FD | 	jmp	#LR__1217
0f680                 | LR__1216
0f680     28 4E 05 F1 | 	add	fp, #40
0f684     A7 00 68 FC | 	wrlong	#0, fp
0f688     28 4E 85 F1 | 	sub	fp, #40
0f68c                 | LR__1217
0f68c     0C 4E 05 F1 | 	add	fp, #12
0f690     A7 20 02 FB | 	rdlong	local02, fp
0f694     1C 4E 05 F1 | 	add	fp, #28
0f698     A7 22 02 FB | 	rdlong	local03, fp
0f69c     04 4E 05 F1 | 	add	fp, #4
0f6a0     A7 FC 01 FB | 	rdlong	result2, fp
0f6a4     10 4E 85 F1 | 	sub	fp, #16
0f6a8     A7 FE 01 FB | 	rdlong	result3, fp
0f6ac     FF FC 01 FD | 	qmul	result2, result3
0f6b0     10 20 06 F1 | 	add	local02, #16
0f6b4     14 4E 05 F1 | 	add	fp, #20
0f6b8     A7 FC 01 FB | 	rdlong	result2, fp
0f6bc     18 FA 61 FD | 	getqx	result1
0f6c0     FF FC 01 FD | 	qmul	result2, result3
0f6c4     FD 22 02 F1 | 	add	local03, result1
0f6c8     10 4E 85 F1 | 	sub	fp, #16
0f6cc     A7 FE 01 FB | 	rdlong	result3, fp
0f6d0     18 FC 61 FD | 	getqx	result2
0f6d4     FF FC 01 FD | 	qmul	result2, result3
0f6d8     08 4E 85 F1 | 	sub	fp, #8
0f6dc     A7 FE 01 FB | 	rdlong	result3, fp
0f6e0     18 FC 61 FD | 	getqx	result2
0f6e4     FE 22 02 F1 | 	add	local03, result2
0f6e8     FF 22 02 FD | 	qmul	local03, result3
0f6ec     1C 4E 05 F1 | 	add	fp, #28
0f6f0                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0f6f0                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0f6f0                 | ' 
0f6f0                 | ' select case vartype
0f6f0     18 FC 61 FD | 	getqx	result2
0f6f4     FE 20 02 F1 | 	add	local02, result2
0f6f8     A7 20 62 FC | 	wrlong	local02, fp
0f6fc     24 4E 85 F1 | 	sub	fp, #36
0f700     A7 24 02 FB | 	rdlong	local04, fp
0f704     10 4E 85 F1 | 	sub	fp, #16
0f708     00 25 86 F1 | 	sub	local04, #256
0f70c     0C 24 26 F3 | 	fle	local04, #12
0f710     30 24 62 FD | 	jmprel	local04
0f714                 | LR__1218
0f714     30 00 90 FD | 	jmp	#LR__1219
0f718     58 00 90 FD | 	jmp	#LR__1220
0f71c     8C 00 90 FD | 	jmp	#LR__1221
0f720     AC 00 90 FD | 	jmp	#LR__1222
0f724     E8 00 90 FD | 	jmp	#LR__1223
0f728     08 01 90 FD | 	jmp	#LR__1224
0f72c     24 01 90 FD | 	jmp	#LR__1225
0f730     40 01 90 FD | 	jmp	#LR__1226
0f734     50 01 90 FD | 	jmp	#LR__1227
0f738     60 01 90 FD | 	jmp	#LR__1228
0f73c     7C 01 90 FD | 	jmp	#LR__1229
0f740     8C 01 90 FD | 	jmp	#LR__1230
0f744     B8 01 90 FD | 	jmp	#LR__1231
0f748                 | LR__1219
0f748     A7 12 02 F6 | 	mov	arg01, fp
0f74c     34 4E 05 F1 | 	add	fp, #52
0f750     A7 14 02 FB | 	rdlong	arg02, fp
0f754     34 4E 85 F1 | 	sub	fp, #52
0f758     0C 16 06 F6 | 	mov	arg03, #12
0f75c     0B 00 00 FF 
0f760     CC E4 05 F1 | 	add	objptr, ##5836
0f764     E8 E7 B0 FD | 	call	#_psram_spin2_read1
0f768     0B 00 00 FF 
0f76c     CC E4 85 F1 | 	sub	objptr, ##5836
0f770     8C 01 90 FD | 	jmp	#LR__1231
0f774                 | LR__1220
0f774     08 4E 05 F1 | 	add	fp, #8
0f778     A7 38 68 FC | 	wrlong	#28, fp
0f77c     2C 4E 05 F1 | 	add	fp, #44
0f780     A7 12 02 FB | 	rdlong	arg01, fp
0f784     34 4E 85 F1 | 	sub	fp, #52
0f788     A8 B1 B0 FD | 	call	#_pspeek
0f78c     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f790     A7 FA 61 FC | 	wrlong	result1, fp
0f794     80 FA 15 F2 | 	cmp	result1, #128 wc
0f798     00 1F 66 36 |  if_ae	neg	local01, #256
0f79c     A7 22 02 3B |  if_ae	rdlong	local03, fp
0f7a0     11 1F 42 35 |  if_ae	or	local01, local03
0f7a4     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0f7a8     54 01 90 FD | 	jmp	#LR__1231
0f7ac                 | LR__1221
0f7ac     08 4E 05 F1 | 	add	fp, #8
0f7b0     A7 3A 68 FC | 	wrlong	#29, fp
0f7b4     2C 4E 05 F1 | 	add	fp, #44
0f7b8     A7 12 02 FB | 	rdlong	arg01, fp
0f7bc     34 4E 85 F1 | 	sub	fp, #52
0f7c0     70 B1 B0 FD | 	call	#_pspeek
0f7c4     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f7c8     A7 FA 61 FC | 	wrlong	result1, fp
0f7cc     30 01 90 FD | 	jmp	#LR__1231
0f7d0                 | LR__1222
0f7d0     08 4E 05 F1 | 	add	fp, #8
0f7d4     A7 38 68 FC | 	wrlong	#28, fp
0f7d8     2C 4E 05 F1 | 	add	fp, #44
0f7dc     A7 12 02 FB | 	rdlong	arg01, fp
0f7e0     34 4E 85 F1 | 	sub	fp, #52
0f7e4     A4 B1 B0 FD | 	call	#_pslpeek
0f7e8     FD FA 31 F9 | 	getword	result1, result1, #0
0f7ec     A7 FA 61 FC | 	wrlong	result1, fp
0f7f0     40 00 00 FF 
0f7f4     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0f7f8     FF 7F 00 3F 
0f7fc     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0f800     A7 22 02 3B |  if_ae	rdlong	local03, fp
0f804     11 1F 42 35 |  if_ae	or	local01, local03
0f808     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0f80c     F0 00 90 FD | 	jmp	#LR__1231
0f810                 | LR__1223
0f810     08 4E 05 F1 | 	add	fp, #8
0f814     A7 3A 68 FC | 	wrlong	#29, fp
0f818     2C 4E 05 F1 | 	add	fp, #44
0f81c     A7 12 02 FB | 	rdlong	arg01, fp
0f820     34 4E 85 F1 | 	sub	fp, #52
0f824     64 B1 B0 FD | 	call	#_pslpeek
0f828     FD FA 31 F9 | 	getword	result1, result1, #0
0f82c     A7 FA 61 FC | 	wrlong	result1, fp
0f830     CC 00 90 FD | 	jmp	#LR__1231
0f834                 | LR__1224
0f834     08 4E 05 F1 | 	add	fp, #8
0f838     A7 38 68 FC | 	wrlong	#28, fp
0f83c     2C 4E 05 F1 | 	add	fp, #44
0f840     A7 12 02 FB | 	rdlong	arg01, fp
0f844     34 4E 85 F1 | 	sub	fp, #52
0f848     40 B1 B0 FD | 	call	#_pslpeek
0f84c     A7 FA 61 FC | 	wrlong	result1, fp
0f850     AC 00 90 FD | 	jmp	#LR__1231
0f854                 | LR__1225
0f854     08 4E 05 F1 | 	add	fp, #8
0f858     A7 3A 68 FC | 	wrlong	#29, fp
0f85c     2C 4E 05 F1 | 	add	fp, #44
0f860     A7 12 02 FB | 	rdlong	arg01, fp
0f864     34 4E 85 F1 | 	sub	fp, #52
0f868     20 B1 B0 FD | 	call	#_pslpeek
0f86c     A7 FA 61 FC | 	wrlong	result1, fp
0f870     8C 00 90 FD | 	jmp	#LR__1231
0f874                 | LR__1226
0f874     08 4E 05 F1 | 	add	fp, #8
0f878     A7 FE 69 FC | 	wrlong	#255, fp
0f87c     08 4E 85 F1 | 	sub	fp, #8
0f880     A7 60 68 FC | 	wrlong	#48, fp
0f884     78 00 90 FD | 	jmp	#LR__1231
0f888                 | LR__1227
0f888     08 4E 05 F1 | 	add	fp, #8
0f88c     A7 FE 69 FC | 	wrlong	#255, fp
0f890     08 4E 85 F1 | 	sub	fp, #8
0f894     A7 60 68 FC | 	wrlong	#48, fp
0f898     64 00 90 FD | 	jmp	#LR__1231
0f89c                 | LR__1228
0f89c     08 4E 05 F1 | 	add	fp, #8
0f8a0     A7 3C 68 FC | 	wrlong	#30, fp
0f8a4     2C 4E 05 F1 | 	add	fp, #44
0f8a8     A7 12 02 FB | 	rdlong	arg01, fp
0f8ac     34 4E 85 F1 | 	sub	fp, #52
0f8b0     D8 B0 B0 FD | 	call	#_pslpeek
0f8b4     A7 FA 61 FC | 	wrlong	result1, fp
0f8b8     44 00 90 FD | 	jmp	#LR__1231
0f8bc                 | LR__1229
0f8bc     08 4E 05 F1 | 	add	fp, #8
0f8c0     A7 FE 69 FC | 	wrlong	#255, fp
0f8c4     08 4E 85 F1 | 	sub	fp, #8
0f8c8     A7 60 68 FC | 	wrlong	#48, fp
0f8cc     30 00 90 FD | 	jmp	#LR__1231
0f8d0                 | LR__1230
0f8d0     08 4E 05 F1 | 	add	fp, #8
0f8d4     A7 3E 68 FC | 	wrlong	#31, fp
0f8d8     2C 4E 05 F1 | 	add	fp, #44
0f8dc     A7 12 02 FB | 	rdlong	arg01, fp
0f8e0     34 4E 85 F1 | 	sub	fp, #52
0f8e4     A4 B0 B0 FD | 	call	#_pslpeek
0f8e8     A7 FA 61 FC | 	wrlong	result1, fp
0f8ec     00 04 00 FF 
0f8f0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0f8f4     08 4E 05 31 |  if_ae	add	fp, #8
0f8f8     A7 56 68 3C |  if_ae	wrlong	#43, fp
0f8fc     08 4E 85 31 |  if_ae	sub	fp, #8
0f900                 | LR__1231
0f900     A7 12 02 F6 | 	mov	arg01, fp
0f904     F0 AF BF FD | 	call	#_push
0f908                 | LR__1232
0f908     A7 F0 03 F6 | 	mov	ptra, fp
0f90c     B2 00 A0 FD | 	call	#popregs_
0f910                 | _do_getvar_ret
0f910     2D 00 64 FD | 	ret
0f914                 | 
0f914                 | ' 
0f914                 | ' 
0f914                 | ' sub do_getaddr
0f914                 | _do_getaddr
0f914     01 4A 05 F6 | 	mov	COUNT_, #1
0f918     A8 00 A0 FD | 	call	#pushregs_
0f91c     38 F0 07 F1 | 	add	ptra, #56
0f920                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0f920                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0f920     6A 00 00 FF 
0f924     80 E4 05 F1 | 	add	objptr, ##54400
0f928     F2 12 02 FB | 	rdlong	arg01, objptr
0f92c     09 FD 01 F6 | 	mov	result2, arg01
0f930     01 FC 65 F0 | 	shl	result2, #1
0f934     09 FD 01 F1 | 	add	result2, arg01
0f938     02 FC 65 F0 | 	shl	result2, #2
0f93c     03 00 00 FF 
0f940     04 E4 85 F1 | 	sub	objptr, ##1540
0f944     F2 FC 01 F1 | 	add	result2, objptr
0f948     04 FC 05 F1 | 	add	result2, #4
0f94c     FE FC 09 FB | 	rdlong	result2, result2 wz
0f950     67 00 00 FF 
0f954     7C E4 85 F1 | 	sub	objptr, ##52860
0f958     C4 00 90 5D |  if_ne	jmp	#LR__1240
0f95c     6A 00 00 FF 
0f960     80 E4 05 F1 | 	add	objptr, ##54400
0f964     F2 12 02 FB | 	rdlong	arg01, objptr
0f968     09 FD 01 F6 | 	mov	result2, arg01
0f96c     01 FC 65 F0 | 	shl	result2, #1
0f970     09 FD 01 F1 | 	add	result2, arg01
0f974     02 FC 65 F0 | 	shl	result2, #2
0f978     03 00 00 FF 
0f97c     04 E4 85 F1 | 	sub	objptr, ##1540
0f980     F2 FC 01 F1 | 	add	result2, objptr
0f984     FE 12 02 FB | 	rdlong	arg01, result2
0f988     04 12 66 F0 | 	shl	arg01, #4
0f98c     32 00 00 FF 
0f990     84 E4 85 F1 | 	sub	objptr, ##25732
0f994     F2 12 02 F1 | 	add	arg01, objptr
0f998     0C 12 06 F1 | 	add	arg01, #12
0f99c     09 13 02 FB | 	rdlong	arg01, arg01
0f9a0     08 4E 05 F1 | 	add	fp, #8
0f9a4     A7 12 62 FC | 	wrlong	arg01, fp
0f9a8                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0f9a8                 | '    if t1.result_type>=array_no_type then goto 2200
0f9a8     08 4E 85 F1 | 	sub	fp, #8
0f9ac     00 13 16 F2 | 	cmp	arg01, #256 wc
0f9b0     34 00 00 FF 
0f9b4     F8 E5 85 F1 | 	sub	objptr, ##27128
0f9b8     64 00 90 3D |  if_ae	jmp	#LR__1241
0f9bc     6A 00 00 FF 
0f9c0     80 E4 05 F1 | 	add	objptr, ##54400
0f9c4     F2 12 02 FB | 	rdlong	arg01, objptr
0f9c8     09 FB 01 F6 | 	mov	result1, arg01
0f9cc     01 FA 65 F0 | 	shl	result1, #1
0f9d0     09 FB 01 F1 | 	add	result1, arg01
0f9d4     02 FA 65 F0 | 	shl	result1, #2
0f9d8     03 00 00 FF 
0f9dc     04 E4 85 F1 | 	sub	objptr, ##1540
0f9e0     F2 FA 01 F1 | 	add	result1, objptr
0f9e4     FD FA 01 FB | 	rdlong	result1, result1
0f9e8     04 FA 65 F0 | 	shl	result1, #4
0f9ec     32 00 00 FF 
0f9f0     84 E4 85 F1 | 	sub	objptr, ##25732
0f9f4     F2 FA 01 F1 | 	add	result1, objptr
0f9f8     04 FA 05 F1 | 	add	result1, #4
0f9fc     34 00 00 FF 
0fa00     F8 E5 85 F1 | 	sub	objptr, ##27128
0fa04     A7 FA 61 FC | 	wrlong	result1, fp
0fa08     08 4E 05 F1 | 	add	fp, #8
0fa0c     A7 3A 68 FC | 	wrlong	#29, fp
0fa10     08 4E 85 F1 | 	sub	fp, #8
0fa14     A7 12 02 F6 | 	mov	arg01, fp
0fa18     DC AE BF FD | 	call	#_push
0fa1c                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
0fa1c                 | '   t1.result_type=result_uint
0fa1c                 | '   push t1 : return
0fa1c     D8 02 90 FD | 	jmp	#LR__1250
0fa20                 | LR__1240
0fa20                 | LR__1241
0fa20     6A 00 00 FF 
0fa24     80 E4 05 F1 | 	add	objptr, ##54400
0fa28     F2 FE 01 FB | 	rdlong	result3, objptr
0fa2c     FF 12 02 F6 | 	mov	arg01, result3
0fa30     01 12 66 F0 | 	shl	arg01, #1
0fa34     FF 12 02 F1 | 	add	arg01, result3
0fa38     02 12 66 F0 | 	shl	arg01, #2
0fa3c     03 00 00 FF 
0fa40     04 E4 85 F1 | 	sub	objptr, ##1540
0fa44     F2 12 02 F1 | 	add	arg01, objptr
0fa48     09 13 02 FB | 	rdlong	arg01, arg01
0fa4c     04 12 66 F0 | 	shl	arg01, #4
0fa50     32 00 00 FF 
0fa54     84 E4 85 F1 | 	sub	objptr, ##25732
0fa58     F2 12 02 F1 | 	add	arg01, objptr
0fa5c     04 12 06 F1 | 	add	arg01, #4
0fa60     09 13 02 FB | 	rdlong	arg01, arg01
0fa64     0C 4E 05 F1 | 	add	fp, #12
0fa68     A7 12 62 FC | 	wrlong	arg01, fp
0fa6c     0C 4E 85 F1 | 	sub	fp, #12
0fa70     34 00 00 FF 
0fa74     F8 E5 85 F1 | 	sub	objptr, ##27128
0fa78     10 AF B0 FD | 	call	#_pslpeek
0fa7c     FD FA 31 F9 | 	getword	result1, result1, #0
0fa80     10 4E 05 F1 | 	add	fp, #16
0fa84     A7 FA 61 FC | 	wrlong	result1, fp
0fa88     6A 00 00 FF 
0fa8c     80 E4 05 F1 | 	add	objptr, ##54400
0fa90     F2 FE 01 FB | 	rdlong	result3, objptr
0fa94     FF 12 02 F6 | 	mov	arg01, result3
0fa98     01 12 66 F0 | 	shl	arg01, #1
0fa9c     FF 12 02 F1 | 	add	arg01, result3
0faa0     02 12 66 F0 | 	shl	arg01, #2
0faa4     03 00 00 FF 
0faa8     04 E4 85 F1 | 	sub	objptr, ##1540
0faac     F2 12 02 F1 | 	add	arg01, objptr
0fab0     04 12 06 F1 | 	add	arg01, #4
0fab4     09 13 02 FB | 	rdlong	arg01, arg01
0fab8     04 4E 05 F1 | 	add	fp, #4
0fabc     A7 12 62 FC | 	wrlong	arg01, fp
0fac0     08 4E 85 F1 | 	sub	fp, #8
0fac4     A7 12 02 FB | 	rdlong	arg01, fp
0fac8     0C 4E 85 F1 | 	sub	fp, #12
0facc     02 12 06 F1 | 	add	arg01, #2
0fad0     67 00 00 FF 
0fad4     7C E4 85 F1 | 	sub	objptr, ##52860
0fad8     58 AE B0 FD | 	call	#_pspeek
0fadc     FD FA E1 F8 | 	getbyte	result1, result1, #0
0fae0     18 4E 05 F1 | 	add	fp, #24
0fae4     A7 FA 61 FC | 	wrlong	result1, fp
0fae8     0C 4E 85 F1 | 	sub	fp, #12
0faec     A7 12 02 FB | 	rdlong	arg01, fp
0faf0     0C 4E 85 F1 | 	sub	fp, #12
0faf4     04 12 06 F1 | 	add	arg01, #4
0faf8     90 AE B0 FD | 	call	#_pslpeek
0fafc     1C 4E 05 F1 | 	add	fp, #28
0fb00     A7 FA 61 FC | 	wrlong	result1, fp
0fb04     10 4E 85 F1 | 	sub	fp, #16
0fb08     A7 12 02 FB | 	rdlong	arg01, fp
0fb0c     0C 4E 85 F1 | 	sub	fp, #12
0fb10     08 12 06 F1 | 	add	arg01, #8
0fb14     74 AE B0 FD | 	call	#_pslpeek
0fb18     20 4E 05 F1 | 	add	fp, #32
0fb1c     A7 FA 61 FC | 	wrlong	result1, fp
0fb20     14 4E 85 F1 | 	sub	fp, #20
0fb24     A7 12 02 FB | 	rdlong	arg01, fp
0fb28     0C 4E 85 F1 | 	sub	fp, #12
0fb2c     0C 12 06 F1 | 	add	arg01, #12
0fb30     58 AE B0 FD | 	call	#_pslpeek
0fb34     24 4E 05 F1 | 	add	fp, #36
0fb38     A7 FA 61 FC | 	wrlong	result1, fp
0fb3c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0fb3c                 | ' esize=pspeek(arrptr+2)
0fb3c                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0fb3c                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0fb3c                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0fb3c                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0fb3c     10 4E 85 F1 | 	sub	fp, #16
0fb40     A7 12 02 FB | 	rdlong	arg01, fp
0fb44     14 4E 85 F1 | 	sub	fp, #20
0fb48     03 12 16 F2 | 	cmp	arg01, #3 wc
0fb4c     34 00 90 CD |  if_b	jmp	#LR__1242
0fb50     0C AD BF FD | 	call	#_pop
0fb54     A7 FA 61 FC | 	wrlong	result1, fp
0fb58     04 4E 05 F1 | 	add	fp, #4
0fb5c     A7 FC 61 FC | 	wrlong	result2, fp
0fb60     04 4E 05 F1 | 	add	fp, #4
0fb64     A7 FE 61 FC | 	wrlong	result3, fp
0fb68     08 4E 85 F1 | 	sub	fp, #8
0fb6c     A7 12 02 F6 | 	mov	arg01, fp
0fb70     A0 39 B0 FD | 	call	#_converttoint
0fb74     30 4E 05 F1 | 	add	fp, #48
0fb78     A7 FA 61 FC | 	wrlong	result1, fp
0fb7c     30 4E 85 F1 | 	sub	fp, #48
0fb80     0C 00 90 FD | 	jmp	#LR__1243
0fb84                 | LR__1242
0fb84     30 4E 05 F1 | 	add	fp, #48
0fb88     A7 00 68 FC | 	wrlong	#0, fp
0fb8c     30 4E 85 F1 | 	sub	fp, #48
0fb90                 | LR__1243
0fb90                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0fb90     14 4E 05 F1 | 	add	fp, #20
0fb94     A7 12 02 FB | 	rdlong	arg01, fp
0fb98     14 4E 85 F1 | 	sub	fp, #20
0fb9c     02 12 16 F2 | 	cmp	arg01, #2 wc
0fba0     34 00 90 CD |  if_b	jmp	#LR__1244
0fba4     B8 AC BF FD | 	call	#_pop
0fba8     A7 FA 61 FC | 	wrlong	result1, fp
0fbac     04 4E 05 F1 | 	add	fp, #4
0fbb0     A7 FC 61 FC | 	wrlong	result2, fp
0fbb4     04 4E 05 F1 | 	add	fp, #4
0fbb8     A7 FE 61 FC | 	wrlong	result3, fp
0fbbc     08 4E 85 F1 | 	sub	fp, #8
0fbc0     A7 12 02 F6 | 	mov	arg01, fp
0fbc4     4C 39 B0 FD | 	call	#_converttoint
0fbc8     2C 4E 05 F1 | 	add	fp, #44
0fbcc     A7 FA 61 FC | 	wrlong	result1, fp
0fbd0     2C 4E 85 F1 | 	sub	fp, #44
0fbd4     0C 00 90 FD | 	jmp	#LR__1245
0fbd8                 | LR__1244
0fbd8     2C 4E 05 F1 | 	add	fp, #44
0fbdc     A7 00 68 FC | 	wrlong	#0, fp
0fbe0     2C 4E 85 F1 | 	sub	fp, #44
0fbe4                 | LR__1245
0fbe4                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0fbe4     14 4E 05 F1 | 	add	fp, #20
0fbe8     A7 12 02 FB | 	rdlong	arg01, fp
0fbec     14 4E 85 F1 | 	sub	fp, #20
0fbf0     01 12 16 F2 | 	cmp	arg01, #1 wc
0fbf4     34 00 90 CD |  if_b	jmp	#LR__1246
0fbf8     64 AC BF FD | 	call	#_pop
0fbfc     A7 FA 61 FC | 	wrlong	result1, fp
0fc00     04 4E 05 F1 | 	add	fp, #4
0fc04     A7 FC 61 FC | 	wrlong	result2, fp
0fc08     04 4E 05 F1 | 	add	fp, #4
0fc0c     A7 FE 61 FC | 	wrlong	result3, fp
0fc10     08 4E 85 F1 | 	sub	fp, #8
0fc14     A7 12 02 F6 | 	mov	arg01, fp
0fc18     F8 38 B0 FD | 	call	#_converttoint
0fc1c     28 4E 05 F1 | 	add	fp, #40
0fc20     A7 FA 61 FC | 	wrlong	result1, fp
0fc24     28 4E 85 F1 | 	sub	fp, #40
0fc28     0C 00 90 FD | 	jmp	#LR__1247
0fc2c                 | LR__1246
0fc2c     28 4E 05 F1 | 	add	fp, #40
0fc30     A7 00 68 FC | 	wrlong	#0, fp
0fc34     28 4E 85 F1 | 	sub	fp, #40
0fc38                 | LR__1247
0fc38                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0fc38                 | ' if numpar>0 then
0fc38     14 4E 05 F1 | 	add	fp, #20
0fc3c     A7 FE 01 FB | 	rdlong	result3, fp
0fc40     14 4E 85 F1 | 	sub	fp, #20
0fc44     01 FE 15 F2 | 	cmp	result3, #1 wc
0fc48     8C 00 90 CD |  if_b	jmp	#LR__1248
0fc4c     0C 4E 05 F1 | 	add	fp, #12
0fc50     A7 FC 01 FB | 	rdlong	result2, fp
0fc54     1C 4E 05 F1 | 	add	fp, #28
0fc58     A7 FE 01 FB | 	rdlong	result3, fp
0fc5c     04 4E 05 F1 | 	add	fp, #4
0fc60     A7 12 02 FB | 	rdlong	arg01, fp
0fc64     10 4E 85 F1 | 	sub	fp, #16
0fc68     A7 FA 01 FB | 	rdlong	result1, fp
0fc6c     FD 12 02 FD | 	qmul	arg01, result1
0fc70     10 FC 05 F1 | 	add	result2, #16
0fc74     14 4E 05 F1 | 	add	fp, #20
0fc78     A7 1E 02 FB | 	rdlong	local01, fp
0fc7c     18 12 62 FD | 	getqx	arg01
0fc80     FD 1E 02 FD | 	qmul	local01, result1
0fc84     09 FF 01 F1 | 	add	result3, arg01
0fc88     10 4E 85 F1 | 	sub	fp, #16
0fc8c     A7 1E 02 FB | 	rdlong	local01, fp
0fc90     18 FA 61 FD | 	getqx	result1
0fc94     0F FB 01 FD | 	qmul	result1, local01
0fc98     08 4E 85 F1 | 	sub	fp, #8
0fc9c     A7 1E 02 FB | 	rdlong	local01, fp
0fca0     18 FA 61 FD | 	getqx	result1
0fca4     FD FE 01 F1 | 	add	result3, result1
0fca8     0F FF 01 FD | 	qmul	result3, local01
0fcac     1C 4E 05 F1 | 	add	fp, #28
0fcb0     18 1E 62 FD | 	getqx	local01
0fcb4     0F FD 01 F1 | 	add	result2, local01
0fcb8     A7 FC 61 FC | 	wrlong	result2, fp
0fcbc     2C 4E 85 F1 | 	sub	fp, #44
0fcc0     A7 3A 68 FC | 	wrlong	#29, fp
0fcc4     2C 4E 05 F1 | 	add	fp, #44
0fcc8     A7 1E 02 FB | 	rdlong	local01, fp
0fccc     34 4E 85 F1 | 	sub	fp, #52
0fcd0     A7 1E 62 FC | 	wrlong	local01, fp
0fcd4     18 00 90 FD | 	jmp	#LR__1249
0fcd8                 | LR__1248
0fcd8     08 4E 05 F1 | 	add	fp, #8
0fcdc     A7 3A 68 FC | 	wrlong	#29, fp
0fce0     04 4E 05 F1 | 	add	fp, #4
0fce4     A7 1E 02 FB | 	rdlong	local01, fp
0fce8     0C 4E 85 F1 | 	sub	fp, #12
0fcec     A7 1E 62 FC | 	wrlong	local01, fp
0fcf0                 | LR__1249
0fcf0     A7 12 02 F6 | 	mov	arg01, fp
0fcf4     00 AC BF FD | 	call	#_push
0fcf8                 | LR__1250
0fcf8     A7 F0 03 F6 | 	mov	ptra, fp
0fcfc     B2 00 A0 FD | 	call	#popregs_
0fd00                 | _do_getaddr_ret
0fd00     2D 00 64 FD | 	ret
0fd04                 | 
0fd04                 | ' 
0fd04                 | ' 
0fd04                 | ' sub do_inkey
0fd04                 | _do_inkey
0fd04     02 4A 05 F6 | 	mov	COUNT_, #2
0fd08     A8 00 A0 FD | 	call	#pushregs_
0fd0c     0C F0 07 F1 | 	add	ptra, #12
0fd10     68 E6 B0 FD | 	call	#_usbnew_spin2_get_key
0fd14     65 00 00 FF 
0fd18     74 E4 05 F1 | 	add	objptr, ##51828
0fd1c     F2 FA 61 FC | 	wrlong	result1, objptr
0fd20                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
0fd20     65 00 00 FF 
0fd24     74 E4 85 F1 | 	sub	objptr, ##51828
0fd28     00 FA 0D F2 | 	cmp	result1, #0 wz
0fd2c     94 00 90 AD |  if_e	jmp	#LR__1261
0fd30     65 00 00 FF 
0fd34     74 E4 05 F1 | 	add	objptr, ##51828
0fd38     F2 1C 02 FB | 	rdlong	arg06, objptr
0fd3c     65 00 00 FF 
0fd40     74 E4 85 F1 | 	sub	objptr, ##51828
0fd44     00 00 40 FF 
0fd48     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
0fd4c     65 00 00 CF 
0fd50     74 E4 05 C1 |  if_b	add	objptr, ##51828
0fd54     F2 1E 02 CB |  if_b	rdlong	local01, objptr
0fd58     65 00 00 CF 
0fd5c     74 E4 85 C1 |  if_b	sub	objptr, ##51828
0fd60     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
0fd64     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
0fd68     58 00 90 3D |  if_ae	jmp	#LR__1261
0fd6c                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
0fd6c     78 00 00 FF 
0fd70     F0 E4 05 F1 | 	add	objptr, ##61680
0fd74     F2 1C 02 FB | 	rdlong	arg06, objptr
0fd78     78 00 00 FF 
0fd7c     F0 E4 85 F1 | 	sub	objptr, ##61680
0fd80     01 1C 0E F2 | 	cmp	arg06, #1 wz
0fd84     3C 00 90 5D |  if_ne	jmp	#LR__1260
0fd88     79 00 00 FF 
0fd8c     94 E5 05 F1 | 	add	objptr, ##62356
0fd90     F2 14 02 FB | 	rdlong	arg02, objptr
0fd94     04 E4 85 F1 | 	sub	objptr, #4
0fd98     F2 1A 02 FB | 	rdlong	arg05, objptr
0fd9c     07 12 06 F6 | 	mov	arg01, #7
0fda0     56 00 00 FF 
0fda4     44 16 06 F6 | 	mov	arg03, ##44100
0fda8     0C 18 C6 F9 | 	decod	arg04, #12
0fdac     01 1C 66 F6 | 	neg	arg06, #1
0fdb0     6E 00 00 FF 
0fdb4     C4 E4 85 F1 | 	sub	objptr, ##56516
0fdb8     48 E9 B0 FD | 	call	#_audio096_spin2_play
0fdbc     0B 00 00 FF 
0fdc0     CC E4 85 F1 | 	sub	objptr, ##5836
0fdc4                 | LR__1260
0fdc4                 | LR__1261
0fdc4                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
0fdc4     65 00 00 FF 
0fdc8     74 E4 05 F1 | 	add	objptr, ##51828
0fdcc     F2 1C 0A FB | 	rdlong	arg06, objptr wz
0fdd0     65 00 00 FF 
0fdd4     74 E4 85 F1 | 	sub	objptr, ##51828
0fdd8     D4 01 90 AD |  if_e	jmp	#LR__1270
0fddc     65 00 00 FF 
0fde0     74 E4 05 F1 | 	add	objptr, ##51828
0fde4     F2 1C 02 FB | 	rdlong	arg06, objptr
0fde8     65 00 00 FF 
0fdec     74 E4 85 F1 | 	sub	objptr, ##51828
0fdf0     00 00 40 FF 
0fdf4     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
0fdf8     65 00 00 CF 
0fdfc     74 E4 05 C1 |  if_b	add	objptr, ##51828
0fe00     F2 1E 02 CB |  if_b	rdlong	local01, objptr
0fe04     65 00 00 CF 
0fe08     74 E4 85 C1 |  if_b	sub	objptr, ##51828
0fe0c     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
0fe10     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
0fe14     98 01 90 3D |  if_ae	jmp	#LR__1270
0fe18                 | '   if leds and 2 = 2 then 
0fe18     79 00 00 FF 
0fe1c     BC E5 05 F1 | 	add	objptr, ##62396
0fe20     F2 1E 0A FB | 	rdlong	local01, objptr wz
0fe24     79 00 00 FF 
0fe28     BC E5 85 F1 | 	sub	objptr, ##62396
0fe2c     58 01 90 AD |  if_e	jmp	#LR__1269
0fe30                 | '     if key>96 andalso key<123 then
0fe30     65 00 00 FF 
0fe34     74 E4 05 F1 | 	add	objptr, ##51828
0fe38     F2 1E 02 FB | 	rdlong	local01, objptr
0fe3c     65 00 00 FF 
0fe40     74 E4 85 F1 | 	sub	objptr, ##51828
0fe44     61 1E 16 F2 | 	cmp	local01, #97 wc
0fe48     3C 00 90 CD |  if_b	jmp	#LR__1262
0fe4c     65 00 00 FF 
0fe50     74 E4 05 F1 | 	add	objptr, ##51828
0fe54     F2 1E 02 FB | 	rdlong	local01, objptr
0fe58     65 00 00 FF 
0fe5c     74 E4 85 F1 | 	sub	objptr, ##51828
0fe60     7B 1E 16 F2 | 	cmp	local01, #123 wc
0fe64     20 00 90 3D |  if_ae	jmp	#LR__1262
0fe68     65 00 00 FF 
0fe6c     74 E4 05 F1 | 	add	objptr, ##51828
0fe70     F2 1E 02 FB | 	rdlong	local01, objptr
0fe74     20 1E 86 F1 | 	sub	local01, #32
0fe78     F2 1E 62 FC | 	wrlong	local01, objptr
0fe7c     65 00 00 FF 
0fe80     74 E4 85 F1 | 	sub	objptr, ##51828
0fe84     00 01 90 FD | 	jmp	#LR__1268
0fe88                 | LR__1262
0fe88     65 00 00 FF 
0fe8c     74 E4 05 F1 | 	add	objptr, ##51828
0fe90     F2 1E 02 FB | 	rdlong	local01, objptr
0fe94     65 00 00 FF 
0fe98     74 E4 85 F1 | 	sub	objptr, ##51828
0fe9c     41 1E 16 F2 | 	cmp	local01, #65 wc
0fea0     3C 00 90 CD |  if_b	jmp	#LR__1263
0fea4     65 00 00 FF 
0fea8     74 E4 05 F1 | 	add	objptr, ##51828
0feac     F2 1E 02 FB | 	rdlong	local01, objptr
0feb0     65 00 00 FF 
0feb4     74 E4 85 F1 | 	sub	objptr, ##51828
0feb8     5B 1E 16 F2 | 	cmp	local01, #91 wc
0febc     20 00 90 3D |  if_ae	jmp	#LR__1263
0fec0     65 00 00 FF 
0fec4     74 E4 05 F1 | 	add	objptr, ##51828
0fec8     F2 1E 02 FB | 	rdlong	local01, objptr
0fecc     20 1E 06 F1 | 	add	local01, #32
0fed0     F2 1E 62 FC | 	wrlong	local01, objptr
0fed4     65 00 00 FF 
0fed8     74 E4 85 F1 | 	sub	objptr, ##51828
0fedc     A8 00 90 FD | 	jmp	#LR__1267
0fee0                 | LR__1263
0fee0     65 00 00 FF 
0fee4     74 E4 05 F1 | 	add	objptr, ##51828
0fee8     F2 1E 02 FB | 	rdlong	local01, objptr
0feec     65 00 00 FF 
0fef0     74 E4 85 F1 | 	sub	objptr, ##51828
0fef4     17 1E 16 F2 | 	cmp	local01, #23 wc
0fef8     3C 00 90 CD |  if_b	jmp	#LR__1264
0fefc     65 00 00 FF 
0ff00     74 E4 05 F1 | 	add	objptr, ##51828
0ff04     F2 1E 02 FB | 	rdlong	local01, objptr
0ff08     65 00 00 FF 
0ff0c     74 E4 85 F1 | 	sub	objptr, ##51828
0ff10     20 1E 16 F2 | 	cmp	local01, #32 wc
0ff14     20 00 90 3D |  if_ae	jmp	#LR__1264
0ff18     65 00 00 FF 
0ff1c     74 E4 05 F1 | 	add	objptr, ##51828
0ff20     F2 1E 02 FB | 	rdlong	local01, objptr
0ff24     09 1E 86 F1 | 	sub	local01, #9
0ff28     F2 1E 62 FC | 	wrlong	local01, objptr
0ff2c     65 00 00 FF 
0ff30     74 E4 85 F1 | 	sub	objptr, ##51828
0ff34     50 00 90 FD | 	jmp	#LR__1266
0ff38                 | LR__1264
0ff38     65 00 00 FF 
0ff3c     74 E4 05 F1 | 	add	objptr, ##51828
0ff40     F2 20 02 FB | 	rdlong	local02, objptr
0ff44     65 00 00 FF 
0ff48     74 E4 85 F1 | 	sub	objptr, ##51828
0ff4c     0E 20 16 F2 | 	cmp	local02, #14 wc
0ff50     34 00 90 CD |  if_b	jmp	#LR__1265
0ff54     65 00 00 FF 
0ff58     74 E4 05 F1 | 	add	objptr, ##51828
0ff5c     F2 1E 02 FB | 	rdlong	local01, objptr
0ff60     65 00 00 FF 
0ff64     74 E4 85 F1 | 	sub	objptr, ##51828
0ff68     17 1E 16 F2 | 	cmp	local01, #23 wc
0ff6c     79 00 00 CF 
0ff70     CC E5 05 C1 |  if_b	add	objptr, ##62412
0ff74     F2 20 02 CB |  if_b	rdlong	local02, objptr
0ff78     27 20 06 C1 |  if_b	add	local02, #39
0ff7c     F2 20 62 CC |  if_b	wrlong	local02, objptr
0ff80     79 00 00 CF 
0ff84     CC E5 85 C1 |  if_b	sub	objptr, ##62412
0ff88                 | LR__1265
0ff88                 | LR__1266
0ff88                 | LR__1267
0ff88                 | LR__1268
0ff88                 | LR__1269
0ff88     65 00 00 FF 
0ff8c     74 E4 05 F1 | 	add	objptr, ##51828
0ff90     F2 12 02 FB | 	rdlong	arg01, objptr
0ff94     65 00 00 FF 
0ff98     74 E4 85 F1 | 	sub	objptr, ##51828
0ff9c     9C AA B0 FD | 	call	#_scantochar
0ffa0     FD 12 02 F6 | 	mov	arg01, result1
0ffa4     D8 0D B1 FD | 	call	#__system__Chr_S
0ffa8     A7 FA 61 FC | 	wrlong	result1, fp
0ffac     0C 00 90 FD | 	jmp	#LR__1271
0ffb0                 | LR__1270
0ffb0     73 01 00 FF 
0ffb4     CF 21 06 F6 | 	mov	local02, ##@LR__5150
0ffb8     A7 20 62 FC | 	wrlong	local02, fp
0ffbc                 | LR__1271
0ffbc     08 4E 05 F1 | 	add	fp, #8
0ffc0     A7 3E 68 FC | 	wrlong	#31, fp
0ffc4     08 4E 85 F1 | 	sub	fp, #8
0ffc8     A7 12 02 F6 | 	mov	arg01, fp
0ffcc     28 A9 BF FD | 	call	#_push
0ffd0     A7 F0 03 F6 | 	mov	ptra, fp
0ffd4     B2 00 A0 FD | 	call	#popregs_
0ffd8                 | _do_inkey_ret
0ffd8     2D 00 64 FD | 	ret
0ffdc                 | 
0ffdc                 | '  
0ffdc                 | ' '------------------------ Operators 
0ffdc                 | ' 
0ffdc                 | ' sub do_plus 
0ffdc                 | _do_plus
0ffdc     05 4A 05 F6 | 	mov	COUNT_, #5
0ffe0     A8 00 A0 FD | 	call	#pushregs_
0ffe4     18 F0 07 F1 | 	add	ptra, #24
0ffe8     74 A8 BF FD | 	call	#_pop
0ffec     FD 1E 02 F6 | 	mov	local01, result1
0fff0     FE 20 02 F6 | 	mov	local02, result2
0fff4     FF 22 02 F6 | 	mov	local03, result3
0fff8     0C 4E 05 F1 | 	add	fp, #12
0fffc     A7 1E 62 FC | 	wrlong	local01, fp
10000     04 4E 05 F1 | 	add	fp, #4
10004     A7 20 62 FC | 	wrlong	local02, fp
10008     04 4E 05 F1 | 	add	fp, #4
1000c     A7 22 62 FC | 	wrlong	local03, fp
10010     14 4E 85 F1 | 	sub	fp, #20
10014     48 A8 BF FD | 	call	#_pop
10018     FF 22 02 F6 | 	mov	local03, result3
1001c     A7 FA 61 FC | 	wrlong	result1, fp
10020     04 4E 05 F1 | 	add	fp, #4
10024     A7 FC 61 FC | 	wrlong	result2, fp
10028     04 4E 05 F1 | 	add	fp, #4
1002c     A7 22 62 FC | 	wrlong	local03, fp
10030                 | ' 
10030                 | ' t2=pop()
10030                 | ' t1=pop()
10030                 | ' 
10030                 | ' 
10030                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
10030     08 4E 85 F1 | 	sub	fp, #8
10034     1D 22 0E F2 | 	cmp	local03, #29 wz
10038     14 4E 05 A1 |  if_e	add	fp, #20
1003c     A7 24 02 AB |  if_e	rdlong	local04, fp
10040     14 4E 85 A1 |  if_e	sub	fp, #20
10044     12 23 02 A6 |  if_e	mov	local03, local04
10048     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1004c     1C 00 90 5D |  if_ne	jmp	#LR__1280
10050     A7 1E 02 FB | 	rdlong	local01, fp
10054     0C 4E 05 F1 | 	add	fp, #12
10058     A7 20 02 FB | 	rdlong	local02, fp
1005c     0C 4E 85 F1 | 	sub	fp, #12
10060     10 1F 02 F1 | 	add	local01, local02
10064     A7 1E 62 FC | 	wrlong	local01, fp
10068     48 04 90 FD | 	jmp	#LR__1295
1006c                 | LR__1280
1006c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1006c     08 4E 05 F1 | 	add	fp, #8
10070     A7 1E 02 FB | 	rdlong	local01, fp
10074     08 4E 85 F1 | 	sub	fp, #8
10078     1D 1E 0E F2 | 	cmp	local01, #29 wz
1007c     14 4E 05 A1 |  if_e	add	fp, #20
10080     A7 24 02 AB |  if_e	rdlong	local04, fp
10084     14 4E 85 A1 |  if_e	sub	fp, #20
10088     12 23 02 A6 |  if_e	mov	local03, local04
1008c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10090     28 00 90 5D |  if_ne	jmp	#LR__1281
10094     A7 1E 02 FB | 	rdlong	local01, fp
10098     0C 4E 05 F1 | 	add	fp, #12
1009c     A7 20 02 FB | 	rdlong	local02, fp
100a0     0C 4E 85 F1 | 	sub	fp, #12
100a4     10 1F 02 F1 | 	add	local01, local02
100a8     A7 1E 62 FC | 	wrlong	local01, fp
100ac     08 4E 05 F1 | 	add	fp, #8
100b0     A7 38 68 FC | 	wrlong	#28, fp
100b4     08 4E 85 F1 | 	sub	fp, #8
100b8     F8 03 90 FD | 	jmp	#LR__1295
100bc                 | LR__1281
100bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
100bc     08 4E 05 F1 | 	add	fp, #8
100c0     A7 1E 02 FB | 	rdlong	local01, fp
100c4     08 4E 85 F1 | 	sub	fp, #8
100c8     1D 1E 0E F2 | 	cmp	local01, #29 wz
100cc     14 4E 05 A1 |  if_e	add	fp, #20
100d0     A7 24 02 AB |  if_e	rdlong	local04, fp
100d4     14 4E 85 A1 |  if_e	sub	fp, #20
100d8     12 23 02 A6 |  if_e	mov	local03, local04
100dc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
100e0     30 00 90 5D |  if_ne	jmp	#LR__1282
100e4     A7 12 02 FB | 	rdlong	arg01, fp
100e8     04 12 B1 FD | 	call	#__system___float_fromuns
100ec     FD 12 02 F6 | 	mov	arg01, result1
100f0     0C 4E 05 F1 | 	add	fp, #12
100f4     A7 14 02 FB | 	rdlong	arg02, fp
100f8     0C 4E 85 F1 | 	sub	fp, #12
100fc     24 12 B1 FD | 	call	#__system___float_add
10100     A7 FA 61 FC | 	wrlong	result1, fp
10104     08 4E 05 F1 | 	add	fp, #8
10108     A7 3C 68 FC | 	wrlong	#30, fp
1010c     08 4E 85 F1 | 	sub	fp, #8
10110     A0 03 90 FD | 	jmp	#LR__1295
10114                 | LR__1282
10114                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
10114     08 4E 05 F1 | 	add	fp, #8
10118     A7 1E 02 FB | 	rdlong	local01, fp
1011c     08 4E 85 F1 | 	sub	fp, #8
10120     1C 1E 0E F2 | 	cmp	local01, #28 wz
10124     14 4E 05 A1 |  if_e	add	fp, #20
10128     A7 24 02 AB |  if_e	rdlong	local04, fp
1012c     14 4E 85 A1 |  if_e	sub	fp, #20
10130     12 23 02 A6 |  if_e	mov	local03, local04
10134     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10138     1C 00 90 5D |  if_ne	jmp	#LR__1283
1013c     A7 1E 02 FB | 	rdlong	local01, fp
10140     0C 4E 05 F1 | 	add	fp, #12
10144     A7 20 02 FB | 	rdlong	local02, fp
10148     0C 4E 85 F1 | 	sub	fp, #12
1014c     10 1F 02 F1 | 	add	local01, local02
10150     A7 1E 62 FC | 	wrlong	local01, fp
10154     5C 03 90 FD | 	jmp	#LR__1295
10158                 | LR__1283
10158                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
10158     08 4E 05 F1 | 	add	fp, #8
1015c     A7 1E 02 FB | 	rdlong	local01, fp
10160     08 4E 85 F1 | 	sub	fp, #8
10164     1C 1E 0E F2 | 	cmp	local01, #28 wz
10168     14 4E 05 A1 |  if_e	add	fp, #20
1016c     A7 24 02 AB |  if_e	rdlong	local04, fp
10170     14 4E 85 A1 |  if_e	sub	fp, #20
10174     12 23 02 A6 |  if_e	mov	local03, local04
10178     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1017c     1C 00 90 5D |  if_ne	jmp	#LR__1284
10180     A7 1E 02 FB | 	rdlong	local01, fp
10184     0C 4E 05 F1 | 	add	fp, #12
10188     A7 20 02 FB | 	rdlong	local02, fp
1018c     0C 4E 85 F1 | 	sub	fp, #12
10190     10 1F 02 F1 | 	add	local01, local02
10194     A7 1E 62 FC | 	wrlong	local01, fp
10198     18 03 90 FD | 	jmp	#LR__1295
1019c                 | LR__1284
1019c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1019c     08 4E 05 F1 | 	add	fp, #8
101a0     A7 1E 02 FB | 	rdlong	local01, fp
101a4     08 4E 85 F1 | 	sub	fp, #8
101a8     1C 1E 0E F2 | 	cmp	local01, #28 wz
101ac     14 4E 05 A1 |  if_e	add	fp, #20
101b0     A7 24 02 AB |  if_e	rdlong	local04, fp
101b4     14 4E 85 A1 |  if_e	sub	fp, #20
101b8     12 23 02 A6 |  if_e	mov	local03, local04
101bc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
101c0     40 00 90 5D |  if_ne	jmp	#LR__1285
101c4     A7 12 02 FB | 	rdlong	arg01, fp
101c8     09 13 52 F6 | 	abs	arg01, arg01 wc
101cc     1F 26 C6 C9 |  if_b	decod	local05, #31
101d0     00 26 06 36 |  if_ae	mov	local05, #0
101d4     18 11 B1 FD | 	call	#__system___float_fromuns
101d8     13 FB 61 F5 | 	xor	result1, local05
101dc     FD 12 02 F6 | 	mov	arg01, result1
101e0     0C 4E 05 F1 | 	add	fp, #12
101e4     A7 14 02 FB | 	rdlong	arg02, fp
101e8     0C 4E 85 F1 | 	sub	fp, #12
101ec     34 11 B1 FD | 	call	#__system___float_add
101f0     A7 FA 61 FC | 	wrlong	result1, fp
101f4     08 4E 05 F1 | 	add	fp, #8
101f8     A7 3C 68 FC | 	wrlong	#30, fp
101fc     08 4E 85 F1 | 	sub	fp, #8
10200     B0 02 90 FD | 	jmp	#LR__1295
10204                 | LR__1285
10204                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
10204     08 4E 05 F1 | 	add	fp, #8
10208     A7 1E 02 FB | 	rdlong	local01, fp
1020c     08 4E 85 F1 | 	sub	fp, #8
10210     1E 1E 0E F2 | 	cmp	local01, #30 wz
10214     14 4E 05 A1 |  if_e	add	fp, #20
10218     A7 24 02 AB |  if_e	rdlong	local04, fp
1021c     14 4E 85 A1 |  if_e	sub	fp, #20
10220     12 23 02 A6 |  if_e	mov	local03, local04
10224     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10228     28 00 90 5D |  if_ne	jmp	#LR__1286
1022c     A7 1E 02 FB | 	rdlong	local01, fp
10230     0C 4E 05 F1 | 	add	fp, #12
10234     A7 12 02 FB | 	rdlong	arg01, fp
10238     0C 4E 85 F1 | 	sub	fp, #12
1023c     B0 10 B1 FD | 	call	#__system___float_fromuns
10240     FD 14 02 F6 | 	mov	arg02, result1
10244     0F 13 02 F6 | 	mov	arg01, local01
10248     D8 10 B1 FD | 	call	#__system___float_add
1024c     A7 FA 61 FC | 	wrlong	result1, fp
10250     60 02 90 FD | 	jmp	#LR__1295
10254                 | LR__1286
10254                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
10254     08 4E 05 F1 | 	add	fp, #8
10258     A7 1E 02 FB | 	rdlong	local01, fp
1025c     08 4E 85 F1 | 	sub	fp, #8
10260     1E 1E 0E F2 | 	cmp	local01, #30 wz
10264     14 4E 05 A1 |  if_e	add	fp, #20
10268     A7 24 02 AB |  if_e	rdlong	local04, fp
1026c     14 4E 85 A1 |  if_e	sub	fp, #20
10270     12 23 02 A6 |  if_e	mov	local03, local04
10274     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10278     38 00 90 5D |  if_ne	jmp	#LR__1287
1027c     A7 1E 02 FB | 	rdlong	local01, fp
10280     0C 4E 05 F1 | 	add	fp, #12
10284     A7 12 02 FB | 	rdlong	arg01, fp
10288     0C 4E 85 F1 | 	sub	fp, #12
1028c     09 13 52 F6 | 	abs	arg01, arg01 wc
10290     1F 26 C6 C9 |  if_b	decod	local05, #31
10294     00 26 06 36 |  if_ae	mov	local05, #0
10298     54 10 B1 FD | 	call	#__system___float_fromuns
1029c     13 FB 61 F5 | 	xor	result1, local05
102a0     FD 14 02 F6 | 	mov	arg02, result1
102a4     0F 13 02 F6 | 	mov	arg01, local01
102a8     78 10 B1 FD | 	call	#__system___float_add
102ac     A7 FA 61 FC | 	wrlong	result1, fp
102b0     00 02 90 FD | 	jmp	#LR__1295
102b4                 | LR__1287
102b4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
102b4     08 4E 05 F1 | 	add	fp, #8
102b8     A7 1E 02 FB | 	rdlong	local01, fp
102bc     08 4E 85 F1 | 	sub	fp, #8
102c0     1E 1E 0E F2 | 	cmp	local01, #30 wz
102c4     14 4E 05 A1 |  if_e	add	fp, #20
102c8     A7 24 02 AB |  if_e	rdlong	local04, fp
102cc     14 4E 85 A1 |  if_e	sub	fp, #20
102d0     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
102d4     1C 00 90 5D |  if_ne	jmp	#LR__1288
102d8     A7 12 02 FB | 	rdlong	arg01, fp
102dc     0C 4E 05 F1 | 	add	fp, #12
102e0     A7 14 02 FB | 	rdlong	arg02, fp
102e4     0C 4E 85 F1 | 	sub	fp, #12
102e8     38 10 B1 FD | 	call	#__system___float_add
102ec     A7 FA 61 FC | 	wrlong	result1, fp
102f0     C0 01 90 FD | 	jmp	#LR__1295
102f4                 | LR__1288
102f4                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
102f4     08 4E 05 F1 | 	add	fp, #8
102f8     A7 1E 02 FB | 	rdlong	local01, fp
102fc     08 4E 85 F1 | 	sub	fp, #8
10300     1F 1E 0E F2 | 	cmp	local01, #31 wz
10304     24 00 90 5D |  if_ne	jmp	#LR__1289
10308     14 4E 05 F1 | 	add	fp, #20
1030c     A7 22 02 FB | 	rdlong	local03, fp
10310     14 4E 85 F1 | 	sub	fp, #20
10314     1F 22 0E F2 | 	cmp	local03, #31 wz
10318     A7 04 68 5C |  if_ne	wrlong	#2, fp
1031c     08 4E 05 51 |  if_ne	add	fp, #8
10320     A7 FE 69 5C |  if_ne	wrlong	#255, fp
10324     08 4E 85 51 |  if_ne	sub	fp, #8
10328     88 01 90 5D |  if_ne	jmp	#LR__1295
1032c                 | LR__1289
1032c                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1032c     14 4E 05 F1 | 	add	fp, #20
10330     A7 1E 02 FB | 	rdlong	local01, fp
10334     14 4E 85 F1 | 	sub	fp, #20
10338     1F 1E 0E F2 | 	cmp	local01, #31 wz
1033c     24 00 90 5D |  if_ne	jmp	#LR__1290
10340     08 4E 05 F1 | 	add	fp, #8
10344     A7 22 02 FB | 	rdlong	local03, fp
10348     08 4E 85 F1 | 	sub	fp, #8
1034c     1F 22 0E F2 | 	cmp	local03, #31 wz
10350     A7 04 68 5C |  if_ne	wrlong	#2, fp
10354     08 4E 05 51 |  if_ne	add	fp, #8
10358     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1035c     08 4E 85 51 |  if_ne	sub	fp, #8
10360     50 01 90 5D |  if_ne	jmp	#LR__1295
10364                 | LR__1290
10364                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
10364     08 4E 05 F1 | 	add	fp, #8
10368     A7 1E 02 FB | 	rdlong	local01, fp
1036c     08 4E 85 F1 | 	sub	fp, #8
10370     1F 1E 0E F2 | 	cmp	local01, #31 wz
10374     14 4E 05 A1 |  if_e	add	fp, #20
10378     A7 22 02 AB |  if_e	rdlong	local03, fp
1037c     14 4E 85 A1 |  if_e	sub	fp, #20
10380     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10384     1C 00 90 5D |  if_ne	jmp	#LR__1291
10388     A7 12 02 FB | 	rdlong	arg01, fp
1038c     0C 4E 05 F1 | 	add	fp, #12
10390     A7 14 02 FB | 	rdlong	arg02, fp
10394     0C 4E 85 F1 | 	sub	fp, #12
10398     34 E8 B0 FD | 	call	#__system___string_concat
1039c     A7 FA 61 FC | 	wrlong	result1, fp
103a0     10 01 90 FD | 	jmp	#LR__1295
103a4                 | LR__1291
103a4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
103a4     08 4E 05 F1 | 	add	fp, #8
103a8     A7 1E 02 FB | 	rdlong	local01, fp
103ac     08 4E 85 F1 | 	sub	fp, #8
103b0     2B 1E 0E F2 | 	cmp	local01, #43 wz
103b4     14 4E 05 A1 |  if_e	add	fp, #20
103b8     A7 22 02 AB |  if_e	rdlong	local03, fp
103bc     14 4E 85 A1 |  if_e	sub	fp, #20
103c0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
103c4     30 00 90 5D |  if_ne	jmp	#LR__1292
103c8     A7 12 02 FB | 	rdlong	arg01, fp
103cc     20 E9 BF FD | 	call	#_convertstring
103d0     FD 12 02 F6 | 	mov	arg01, result1
103d4     0C 4E 05 F1 | 	add	fp, #12
103d8     A7 14 02 FB | 	rdlong	arg02, fp
103dc     0C 4E 85 F1 | 	sub	fp, #12
103e0     EC E7 B0 FD | 	call	#__system___string_concat
103e4     A7 FA 61 FC | 	wrlong	result1, fp
103e8     08 4E 05 F1 | 	add	fp, #8
103ec     A7 3E 68 FC | 	wrlong	#31, fp
103f0     08 4E 85 F1 | 	sub	fp, #8
103f4     BC 00 90 FD | 	jmp	#LR__1295
103f8                 | LR__1292
103f8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
103f8     08 4E 05 F1 | 	add	fp, #8
103fc     A7 1E 02 FB | 	rdlong	local01, fp
10400     08 4E 85 F1 | 	sub	fp, #8
10404     1F 1E 0E F2 | 	cmp	local01, #31 wz
10408     14 4E 05 A1 |  if_e	add	fp, #20
1040c     A7 22 02 AB |  if_e	rdlong	local03, fp
10410     14 4E 85 A1 |  if_e	sub	fp, #20
10414     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10418     28 00 90 5D |  if_ne	jmp	#LR__1293
1041c     A7 1E 02 FB | 	rdlong	local01, fp
10420     0C 4E 05 F1 | 	add	fp, #12
10424     A7 12 02 FB | 	rdlong	arg01, fp
10428     0C 4E 85 F1 | 	sub	fp, #12
1042c     C0 E8 BF FD | 	call	#_convertstring
10430     FD 14 02 F6 | 	mov	arg02, result1
10434     0F 13 02 F6 | 	mov	arg01, local01
10438     94 E7 B0 FD | 	call	#__system___string_concat
1043c     A7 FA 61 FC | 	wrlong	result1, fp
10440     70 00 90 FD | 	jmp	#LR__1295
10444                 | LR__1293
10444                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
10444     08 4E 05 F1 | 	add	fp, #8
10448     A7 1E 02 FB | 	rdlong	local01, fp
1044c     08 4E 85 F1 | 	sub	fp, #8
10450     2B 1E 0E F2 | 	cmp	local01, #43 wz
10454     14 4E 05 A1 |  if_e	add	fp, #20
10458     A7 22 02 AB |  if_e	rdlong	local03, fp
1045c     14 4E 85 A1 |  if_e	sub	fp, #20
10460     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10464     3C 00 90 5D |  if_ne	jmp	#LR__1294
10468     A7 12 02 FB | 	rdlong	arg01, fp
1046c     80 E8 BF FD | 	call	#_convertstring
10470     FD 1E 02 F6 | 	mov	local01, result1
10474     0C 4E 05 F1 | 	add	fp, #12
10478     A7 12 02 FB | 	rdlong	arg01, fp
1047c     0C 4E 85 F1 | 	sub	fp, #12
10480     6C E8 BF FD | 	call	#_convertstring
10484     FD 14 02 F6 | 	mov	arg02, result1
10488     0F 13 02 F6 | 	mov	arg01, local01
1048c     40 E7 B0 FD | 	call	#__system___string_concat
10490     A7 FA 61 FC | 	wrlong	result1, fp
10494     08 4E 05 F1 | 	add	fp, #8
10498     A7 3E 68 FC | 	wrlong	#31, fp
1049c     08 4E 85 F1 | 	sub	fp, #8
104a0     10 00 90 FD | 	jmp	#LR__1295
104a4                 | LR__1294
104a4     A7 08 68 FC | 	wrlong	#4, fp
104a8     08 4E 05 F1 | 	add	fp, #8
104ac     A7 FE 69 FC | 	wrlong	#255, fp
104b0     08 4E 85 F1 | 	sub	fp, #8
104b4                 | LR__1295
104b4     A7 12 02 F6 | 	mov	arg01, fp
104b8     3C A4 BF FD | 	call	#_push
104bc     A7 F0 03 F6 | 	mov	ptra, fp
104c0     B2 00 A0 FD | 	call	#popregs_
104c4                 | _do_plus_ret
104c4     2D 00 64 FD | 	ret
104c8                 | 
104c8                 | ' 
104c8                 | ' sub do_minus
104c8                 | _do_minus
104c8     05 4A 05 F6 | 	mov	COUNT_, #5
104cc     A8 00 A0 FD | 	call	#pushregs_
104d0     18 F0 07 F1 | 	add	ptra, #24
104d4     88 A3 BF FD | 	call	#_pop
104d8     FD 1E 02 F6 | 	mov	local01, result1
104dc     FE 20 02 F6 | 	mov	local02, result2
104e0     FF 22 02 F6 | 	mov	local03, result3
104e4     0C 4E 05 F1 | 	add	fp, #12
104e8     A7 1E 62 FC | 	wrlong	local01, fp
104ec     04 4E 05 F1 | 	add	fp, #4
104f0     A7 20 62 FC | 	wrlong	local02, fp
104f4     04 4E 05 F1 | 	add	fp, #4
104f8     A7 22 62 FC | 	wrlong	local03, fp
104fc     14 4E 85 F1 | 	sub	fp, #20
10500     5C A3 BF FD | 	call	#_pop
10504     FF 22 02 F6 | 	mov	local03, result3
10508     A7 FA 61 FC | 	wrlong	result1, fp
1050c     04 4E 05 F1 | 	add	fp, #4
10510     A7 FC 61 FC | 	wrlong	result2, fp
10514     04 4E 05 F1 | 	add	fp, #4
10518     A7 22 62 FC | 	wrlong	local03, fp
1051c                 | ' 
1051c                 | ' t2=pop()
1051c                 | ' t1=pop()
1051c                 | ' 
1051c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1051c     08 4E 85 F1 | 	sub	fp, #8
10520     1D 22 0E F2 | 	cmp	local03, #29 wz
10524     14 4E 05 A1 |  if_e	add	fp, #20
10528     A7 24 02 AB |  if_e	rdlong	local04, fp
1052c     14 4E 85 A1 |  if_e	sub	fp, #20
10530     12 23 02 A6 |  if_e	mov	local03, local04
10534     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10538     5C 00 90 5D |  if_ne	jmp	#LR__1301
1053c                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1053c     0C 4E 05 F1 | 	add	fp, #12
10540     A7 1E 02 FB | 	rdlong	local01, fp
10544     0C 4E 85 F1 | 	sub	fp, #12
10548     A7 22 02 FB | 	rdlong	local03, fp
1054c     11 1F 12 F2 | 	cmp	local01, local03 wc
10550     1C 00 90 3D |  if_ae	jmp	#LR__1300
10554     A7 1E 02 FB | 	rdlong	local01, fp
10558     0C 4E 05 F1 | 	add	fp, #12
1055c     A7 20 02 FB | 	rdlong	local02, fp
10560     0C 4E 85 F1 | 	sub	fp, #12
10564     10 1F 82 F1 | 	sub	local01, local02
10568     A7 1E 62 FC | 	wrlong	local01, fp
1056c     F4 02 90 FD | 	jmp	#LR__1310
10570                 | LR__1300
10570     A7 1E 02 FB | 	rdlong	local01, fp
10574     0C 4E 05 F1 | 	add	fp, #12
10578     A7 20 02 FB | 	rdlong	local02, fp
1057c     0C 4E 85 F1 | 	sub	fp, #12
10580     10 1F 82 F1 | 	sub	local01, local02
10584     A7 1E 62 FC | 	wrlong	local01, fp
10588     08 4E 05 F1 | 	add	fp, #8
1058c     A7 38 68 FC | 	wrlong	#28, fp
10590     08 4E 85 F1 | 	sub	fp, #8
10594     CC 02 90 FD | 	jmp	#LR__1310
10598                 | LR__1301
10598                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
10598     08 4E 05 F1 | 	add	fp, #8
1059c     A7 1E 02 FB | 	rdlong	local01, fp
105a0     08 4E 85 F1 | 	sub	fp, #8
105a4     1D 1E 0E F2 | 	cmp	local01, #29 wz
105a8     14 4E 05 A1 |  if_e	add	fp, #20
105ac     A7 24 02 AB |  if_e	rdlong	local04, fp
105b0     14 4E 85 A1 |  if_e	sub	fp, #20
105b4     12 23 02 A6 |  if_e	mov	local03, local04
105b8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
105bc     28 00 90 5D |  if_ne	jmp	#LR__1302
105c0     A7 1E 02 FB | 	rdlong	local01, fp
105c4     0C 4E 05 F1 | 	add	fp, #12
105c8     A7 20 02 FB | 	rdlong	local02, fp
105cc     0C 4E 85 F1 | 	sub	fp, #12
105d0     10 1F 82 F1 | 	sub	local01, local02
105d4     A7 1E 62 FC | 	wrlong	local01, fp
105d8     08 4E 05 F1 | 	add	fp, #8
105dc     A7 38 68 FC | 	wrlong	#28, fp
105e0     08 4E 85 F1 | 	sub	fp, #8
105e4     7C 02 90 FD | 	jmp	#LR__1310
105e8                 | LR__1302
105e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
105e8     08 4E 05 F1 | 	add	fp, #8
105ec     A7 1E 02 FB | 	rdlong	local01, fp
105f0     08 4E 85 F1 | 	sub	fp, #8
105f4     1D 1E 0E F2 | 	cmp	local01, #29 wz
105f8     14 4E 05 A1 |  if_e	add	fp, #20
105fc     A7 24 02 AB |  if_e	rdlong	local04, fp
10600     14 4E 85 A1 |  if_e	sub	fp, #20
10604     12 23 02 A6 |  if_e	mov	local03, local04
10608     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1060c     34 00 90 5D |  if_ne	jmp	#LR__1303
10610     A7 12 02 FB | 	rdlong	arg01, fp
10614     D8 0C B1 FD | 	call	#__system___float_fromuns
10618     FD 12 02 F6 | 	mov	arg01, result1
1061c     0C 4E 05 F1 | 	add	fp, #12
10620     A7 14 02 FB | 	rdlong	arg02, fp
10624     0C 4E 85 F1 | 	sub	fp, #12
10628     1F 14 E6 F4 | 	bitnot	arg02, #31
1062c     F4 0C B1 FD | 	call	#__system___float_add
10630     A7 FA 61 FC | 	wrlong	result1, fp
10634     08 4E 05 F1 | 	add	fp, #8
10638     A7 3C 68 FC | 	wrlong	#30, fp
1063c     08 4E 85 F1 | 	sub	fp, #8
10640     20 02 90 FD | 	jmp	#LR__1310
10644                 | LR__1303
10644                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
10644     08 4E 05 F1 | 	add	fp, #8
10648     A7 1E 02 FB | 	rdlong	local01, fp
1064c     08 4E 85 F1 | 	sub	fp, #8
10650     1C 1E 0E F2 | 	cmp	local01, #28 wz
10654     14 4E 05 A1 |  if_e	add	fp, #20
10658     A7 24 02 AB |  if_e	rdlong	local04, fp
1065c     14 4E 85 A1 |  if_e	sub	fp, #20
10660     12 23 02 A6 |  if_e	mov	local03, local04
10664     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10668     1C 00 90 5D |  if_ne	jmp	#LR__1304
1066c     A7 1E 02 FB | 	rdlong	local01, fp
10670     0C 4E 05 F1 | 	add	fp, #12
10674     A7 20 02 FB | 	rdlong	local02, fp
10678     0C 4E 85 F1 | 	sub	fp, #12
1067c     10 1F 82 F1 | 	sub	local01, local02
10680     A7 1E 62 FC | 	wrlong	local01, fp
10684     DC 01 90 FD | 	jmp	#LR__1310
10688                 | LR__1304
10688                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
10688     08 4E 05 F1 | 	add	fp, #8
1068c     A7 1E 02 FB | 	rdlong	local01, fp
10690     08 4E 85 F1 | 	sub	fp, #8
10694     1C 1E 0E F2 | 	cmp	local01, #28 wz
10698     14 4E 05 A1 |  if_e	add	fp, #20
1069c     A7 24 02 AB |  if_e	rdlong	local04, fp
106a0     14 4E 85 A1 |  if_e	sub	fp, #20
106a4     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
106a8     1C 00 90 5D |  if_ne	jmp	#LR__1305
106ac     A7 1E 02 FB | 	rdlong	local01, fp
106b0     0C 4E 05 F1 | 	add	fp, #12
106b4     A7 20 02 FB | 	rdlong	local02, fp
106b8     0C 4E 85 F1 | 	sub	fp, #12
106bc     10 1F 82 F1 | 	sub	local01, local02
106c0     A7 1E 62 FC | 	wrlong	local01, fp
106c4     9C 01 90 FD | 	jmp	#LR__1310
106c8                 | LR__1305
106c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
106c8     08 4E 05 F1 | 	add	fp, #8
106cc     A7 1E 02 FB | 	rdlong	local01, fp
106d0     08 4E 85 F1 | 	sub	fp, #8
106d4     1C 1E 0E F2 | 	cmp	local01, #28 wz
106d8     14 4E 05 A1 |  if_e	add	fp, #20
106dc     A7 22 02 AB |  if_e	rdlong	local03, fp
106e0     14 4E 85 A1 |  if_e	sub	fp, #20
106e4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
106e8     44 00 90 5D |  if_ne	jmp	#LR__1306
106ec     A7 12 02 FB | 	rdlong	arg01, fp
106f0     09 13 52 F6 | 	abs	arg01, arg01 wc
106f4     1F 26 C6 C9 |  if_b	decod	local05, #31
106f8     00 26 06 36 |  if_ae	mov	local05, #0
106fc     F0 0B B1 FD | 	call	#__system___float_fromuns
10700     13 FB 61 F5 | 	xor	result1, local05
10704     FD 12 02 F6 | 	mov	arg01, result1
10708     0C 4E 05 F1 | 	add	fp, #12
1070c     A7 14 02 FB | 	rdlong	arg02, fp
10710     0C 4E 85 F1 | 	sub	fp, #12
10714     1F 14 E6 F4 | 	bitnot	arg02, #31
10718     08 0C B1 FD | 	call	#__system___float_add
1071c     A7 FA 61 FC | 	wrlong	result1, fp
10720     08 4E 05 F1 | 	add	fp, #8
10724     A7 3C 68 FC | 	wrlong	#30, fp
10728     08 4E 85 F1 | 	sub	fp, #8
1072c     34 01 90 FD | 	jmp	#LR__1310
10730                 | LR__1306
10730                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
10730     08 4E 05 F1 | 	add	fp, #8
10734     A7 1E 02 FB | 	rdlong	local01, fp
10738     08 4E 85 F1 | 	sub	fp, #8
1073c     1E 1E 0E F2 | 	cmp	local01, #30 wz
10740     14 4E 05 A1 |  if_e	add	fp, #20
10744     A7 22 02 AB |  if_e	rdlong	local03, fp
10748     14 4E 85 A1 |  if_e	sub	fp, #20
1074c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10750     2C 00 90 5D |  if_ne	jmp	#LR__1307
10754     A7 1E 02 FB | 	rdlong	local01, fp
10758     0C 4E 05 F1 | 	add	fp, #12
1075c     A7 12 02 FB | 	rdlong	arg01, fp
10760     0C 4E 85 F1 | 	sub	fp, #12
10764     88 0B B1 FD | 	call	#__system___float_fromuns
10768     FD 14 02 F6 | 	mov	arg02, result1
1076c     0F 13 02 F6 | 	mov	arg01, local01
10770     1F 14 E6 F4 | 	bitnot	arg02, #31
10774     AC 0B B1 FD | 	call	#__system___float_add
10778     A7 FA 61 FC | 	wrlong	result1, fp
1077c     E4 00 90 FD | 	jmp	#LR__1310
10780                 | LR__1307
10780                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
10780     08 4E 05 F1 | 	add	fp, #8
10784     A7 1E 02 FB | 	rdlong	local01, fp
10788     08 4E 85 F1 | 	sub	fp, #8
1078c     1E 1E 0E F2 | 	cmp	local01, #30 wz
10790     14 4E 05 A1 |  if_e	add	fp, #20
10794     A7 22 02 AB |  if_e	rdlong	local03, fp
10798     14 4E 85 A1 |  if_e	sub	fp, #20
1079c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
107a0     3C 00 90 5D |  if_ne	jmp	#LR__1308
107a4     A7 1E 02 FB | 	rdlong	local01, fp
107a8     0C 4E 05 F1 | 	add	fp, #12
107ac     A7 12 02 FB | 	rdlong	arg01, fp
107b0     0C 4E 85 F1 | 	sub	fp, #12
107b4     09 13 52 F6 | 	abs	arg01, arg01 wc
107b8     1F 26 C6 C9 |  if_b	decod	local05, #31
107bc     00 26 06 36 |  if_ae	mov	local05, #0
107c0     2C 0B B1 FD | 	call	#__system___float_fromuns
107c4     13 FB 61 F5 | 	xor	result1, local05
107c8     FD 14 02 F6 | 	mov	arg02, result1
107cc     0F 13 02 F6 | 	mov	arg01, local01
107d0     1F 14 E6 F4 | 	bitnot	arg02, #31
107d4     4C 0B B1 FD | 	call	#__system___float_add
107d8     A7 FA 61 FC | 	wrlong	result1, fp
107dc     84 00 90 FD | 	jmp	#LR__1310
107e0                 | LR__1308
107e0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
107e0     08 4E 05 F1 | 	add	fp, #8
107e4     A7 1E 02 FB | 	rdlong	local01, fp
107e8     08 4E 85 F1 | 	sub	fp, #8
107ec     1E 1E 0E F2 | 	cmp	local01, #30 wz
107f0     14 4E 05 A1 |  if_e	add	fp, #20
107f4     A7 22 02 AB |  if_e	rdlong	local03, fp
107f8     14 4E 85 A1 |  if_e	sub	fp, #20
107fc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10800     20 00 90 5D |  if_ne	jmp	#LR__1309
10804     A7 12 02 FB | 	rdlong	arg01, fp
10808     0C 4E 05 F1 | 	add	fp, #12
1080c     A7 14 02 FB | 	rdlong	arg02, fp
10810     0C 4E 85 F1 | 	sub	fp, #12
10814     1F 14 E6 F4 | 	bitnot	arg02, #31
10818     08 0B B1 FD | 	call	#__system___float_add
1081c     A7 FA 61 FC | 	wrlong	result1, fp
10820     40 00 90 FD | 	jmp	#LR__1310
10824                 | LR__1309
10824                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
10824     08 4E 05 F1 | 	add	fp, #8
10828     A7 1E 02 FB | 	rdlong	local01, fp
1082c     08 4E 85 F1 | 	sub	fp, #8
10830     1F 1E 0E F2 | 	cmp	local01, #31 wz
10834     14 4E 05 51 |  if_ne	add	fp, #20
10838     A7 22 02 5B |  if_ne	rdlong	local03, fp
1083c     14 4E 85 51 |  if_ne	sub	fp, #20
10840     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
10844     A7 06 68 AC |  if_e	wrlong	#3, fp
10848     08 4E 05 A1 |  if_e	add	fp, #8
1084c     A7 FE 69 AC |  if_e	wrlong	#255, fp
10850     08 4E 85 A1 |  if_e	sub	fp, #8
10854     A7 0A 68 5C |  if_ne	wrlong	#5, fp
10858     08 4E 05 51 |  if_ne	add	fp, #8
1085c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
10860     08 4E 85 51 |  if_ne	sub	fp, #8
10864                 | LR__1310
10864     A7 12 02 F6 | 	mov	arg01, fp
10868     8C A0 BF FD | 	call	#_push
1086c     A7 F0 03 F6 | 	mov	ptra, fp
10870     B2 00 A0 FD | 	call	#popregs_
10874                 | _do_minus_ret
10874     2D 00 64 FD | 	ret
10878                 | 
10878                 | ' 
10878                 | ' sub do_and 
10878                 | _do_and
10878     03 4A 05 F6 | 	mov	COUNT_, #3
1087c     A8 00 A0 FD | 	call	#pushregs_
10880     18 F0 07 F1 | 	add	ptra, #24
10884     D8 9F BF FD | 	call	#_pop
10888     FD 12 02 F6 | 	mov	arg01, result1
1088c     FE 1E 02 F6 | 	mov	local01, result2
10890     FF 20 02 F6 | 	mov	local02, result3
10894     0C 4E 05 F1 | 	add	fp, #12
10898     A7 12 62 FC | 	wrlong	arg01, fp
1089c     04 4E 05 F1 | 	add	fp, #4
108a0     A7 1E 62 FC | 	wrlong	local01, fp
108a4     04 4E 05 F1 | 	add	fp, #4
108a8     A7 20 62 FC | 	wrlong	local02, fp
108ac     14 4E 85 F1 | 	sub	fp, #20
108b0     AC 9F BF FD | 	call	#_pop
108b4     FF 22 02 F6 | 	mov	local03, result3
108b8     A7 FA 61 FC | 	wrlong	result1, fp
108bc     04 4E 05 F1 | 	add	fp, #4
108c0     A7 FC 61 FC | 	wrlong	result2, fp
108c4     04 4E 05 F1 | 	add	fp, #4
108c8     A7 22 62 FC | 	wrlong	local03, fp
108cc                 | ' 
108cc                 | ' t2=pop()
108cc                 | ' t1=pop()
108cc                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
108cc     08 4E 85 F1 | 	sub	fp, #8
108d0     1C 22 0E F2 | 	cmp	local03, #28 wz
108d4     A7 22 02 AB |  if_e	rdlong	local03, fp
108d8     A7 22 62 AC |  if_e	wrlong	local03, fp
108dc     08 4E 05 A1 |  if_e	add	fp, #8
108e0     A7 3A 68 AC |  if_e	wrlong	#29, fp
108e4     08 4E 85 A1 |  if_e	sub	fp, #8
108e8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
108e8     14 4E 05 F1 | 	add	fp, #20
108ec     A7 22 02 FB | 	rdlong	local03, fp
108f0     14 4E 85 F1 | 	sub	fp, #20
108f4     1C 22 0E F2 | 	cmp	local03, #28 wz
108f8     18 00 90 5D |  if_ne	jmp	#LR__1320
108fc     0C 4E 05 F1 | 	add	fp, #12
10900     A7 22 02 FB | 	rdlong	local03, fp
10904     A7 22 62 FC | 	wrlong	local03, fp
10908     08 4E 05 F1 | 	add	fp, #8
1090c     A7 3A 68 FC | 	wrlong	#29, fp
10910     14 4E 85 F1 | 	sub	fp, #20
10914                 | LR__1320
10914                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
10914     08 4E 05 F1 | 	add	fp, #8
10918     A7 22 02 FB | 	rdlong	local03, fp
1091c     08 4E 85 F1 | 	sub	fp, #8
10920     1F 22 0E F2 | 	cmp	local03, #31 wz
10924     14 4E 05 51 |  if_ne	add	fp, #20
10928     A7 20 02 5B |  if_ne	rdlong	local02, fp
1092c     14 4E 85 51 |  if_ne	sub	fp, #20
10930     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
10934     08 4E 05 51 |  if_ne	add	fp, #8
10938     A7 22 02 5B |  if_ne	rdlong	local03, fp
1093c     08 4E 85 51 |  if_ne	sub	fp, #8
10940     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
10944     14 4E 05 51 |  if_ne	add	fp, #20
10948     14 4E 85 51 |  if_ne	sub	fp, #20
1094c     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
10950     A7 0C 68 AC |  if_e	wrlong	#6, fp
10954     08 4E 05 A1 |  if_e	add	fp, #8
10958     A7 FE 69 AC |  if_e	wrlong	#255, fp
1095c     08 4E 85 A1 |  if_e	sub	fp, #8
10960     18 00 90 AD |  if_e	jmp	#LR__1321
10964     A7 22 02 FB | 	rdlong	local03, fp
10968     0C 4E 05 F1 | 	add	fp, #12
1096c     A7 1E 02 FB | 	rdlong	local01, fp
10970     0C 4E 85 F1 | 	sub	fp, #12
10974     0F 23 02 F5 | 	and	local03, local01
10978     A7 22 62 FC | 	wrlong	local03, fp
1097c                 | LR__1321
1097c     A7 12 02 F6 | 	mov	arg01, fp
10980     74 9F BF FD | 	call	#_push
10984     A7 F0 03 F6 | 	mov	ptra, fp
10988     B2 00 A0 FD | 	call	#popregs_
1098c                 | _do_and_ret
1098c     2D 00 64 FD | 	ret
10990                 | 
10990                 | ' 
10990                 | ' sub do_or 
10990                 | _do_or
10990     03 4A 05 F6 | 	mov	COUNT_, #3
10994     A8 00 A0 FD | 	call	#pushregs_
10998     18 F0 07 F1 | 	add	ptra, #24
1099c     C0 9E BF FD | 	call	#_pop
109a0     FD 12 02 F6 | 	mov	arg01, result1
109a4     FE 1E 02 F6 | 	mov	local01, result2
109a8     FF 20 02 F6 | 	mov	local02, result3
109ac     0C 4E 05 F1 | 	add	fp, #12
109b0     A7 12 62 FC | 	wrlong	arg01, fp
109b4     04 4E 05 F1 | 	add	fp, #4
109b8     A7 1E 62 FC | 	wrlong	local01, fp
109bc     04 4E 05 F1 | 	add	fp, #4
109c0     A7 20 62 FC | 	wrlong	local02, fp
109c4     14 4E 85 F1 | 	sub	fp, #20
109c8     94 9E BF FD | 	call	#_pop
109cc     FF 22 02 F6 | 	mov	local03, result3
109d0     A7 FA 61 FC | 	wrlong	result1, fp
109d4     04 4E 05 F1 | 	add	fp, #4
109d8     A7 FC 61 FC | 	wrlong	result2, fp
109dc     04 4E 05 F1 | 	add	fp, #4
109e0     A7 22 62 FC | 	wrlong	local03, fp
109e4                 | ' 
109e4                 | ' t2=pop()
109e4                 | ' t1=pop()
109e4                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
109e4     08 4E 85 F1 | 	sub	fp, #8
109e8     1C 22 0E F2 | 	cmp	local03, #28 wz
109ec     A7 22 02 AB |  if_e	rdlong	local03, fp
109f0     A7 22 62 AC |  if_e	wrlong	local03, fp
109f4     08 4E 05 A1 |  if_e	add	fp, #8
109f8     A7 3A 68 AC |  if_e	wrlong	#29, fp
109fc     08 4E 85 A1 |  if_e	sub	fp, #8
10a00                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
10a00     14 4E 05 F1 | 	add	fp, #20
10a04     A7 22 02 FB | 	rdlong	local03, fp
10a08     14 4E 85 F1 | 	sub	fp, #20
10a0c     1C 22 0E F2 | 	cmp	local03, #28 wz
10a10     18 00 90 5D |  if_ne	jmp	#LR__1330
10a14     0C 4E 05 F1 | 	add	fp, #12
10a18     A7 22 02 FB | 	rdlong	local03, fp
10a1c     A7 22 62 FC | 	wrlong	local03, fp
10a20     08 4E 05 F1 | 	add	fp, #8
10a24     A7 3A 68 FC | 	wrlong	#29, fp
10a28     14 4E 85 F1 | 	sub	fp, #20
10a2c                 | LR__1330
10a2c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
10a2c     08 4E 05 F1 | 	add	fp, #8
10a30     A7 22 02 FB | 	rdlong	local03, fp
10a34     08 4E 85 F1 | 	sub	fp, #8
10a38     1F 22 0E F2 | 	cmp	local03, #31 wz
10a3c     14 4E 05 51 |  if_ne	add	fp, #20
10a40     A7 20 02 5B |  if_ne	rdlong	local02, fp
10a44     14 4E 85 51 |  if_ne	sub	fp, #20
10a48     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
10a4c     08 4E 05 51 |  if_ne	add	fp, #8
10a50     A7 22 02 5B |  if_ne	rdlong	local03, fp
10a54     08 4E 85 51 |  if_ne	sub	fp, #8
10a58     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
10a5c     14 4E 05 51 |  if_ne	add	fp, #20
10a60     14 4E 85 51 |  if_ne	sub	fp, #20
10a64     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
10a68     A7 0C 68 AC |  if_e	wrlong	#6, fp
10a6c     08 4E 05 A1 |  if_e	add	fp, #8
10a70     A7 FE 69 AC |  if_e	wrlong	#255, fp
10a74     08 4E 85 A1 |  if_e	sub	fp, #8
10a78     18 00 90 AD |  if_e	jmp	#LR__1331
10a7c     A7 22 02 FB | 	rdlong	local03, fp
10a80     0C 4E 05 F1 | 	add	fp, #12
10a84     A7 1E 02 FB | 	rdlong	local01, fp
10a88     0C 4E 85 F1 | 	sub	fp, #12
10a8c     0F 23 42 F5 | 	or	local03, local01
10a90     A7 22 62 FC | 	wrlong	local03, fp
10a94                 | LR__1331
10a94     A7 12 02 F6 | 	mov	arg01, fp
10a98     5C 9E BF FD | 	call	#_push
10a9c     A7 F0 03 F6 | 	mov	ptra, fp
10aa0     B2 00 A0 FD | 	call	#popregs_
10aa4                 | _do_or_ret
10aa4     2D 00 64 FD | 	ret
10aa8                 | 
10aa8                 | ' 
10aa8                 | ' sub do_mul
10aa8                 | _do_mul
10aa8     05 4A 05 F6 | 	mov	COUNT_, #5
10aac     A8 00 A0 FD | 	call	#pushregs_
10ab0     18 F0 07 F1 | 	add	ptra, #24
10ab4     A8 9D BF FD | 	call	#_pop
10ab8     FD 1E 02 F6 | 	mov	local01, result1
10abc     FE 20 02 F6 | 	mov	local02, result2
10ac0     FF 22 02 F6 | 	mov	local03, result3
10ac4     0C 4E 05 F1 | 	add	fp, #12
10ac8     A7 1E 62 FC | 	wrlong	local01, fp
10acc     04 4E 05 F1 | 	add	fp, #4
10ad0     A7 20 62 FC | 	wrlong	local02, fp
10ad4     04 4E 05 F1 | 	add	fp, #4
10ad8     A7 22 62 FC | 	wrlong	local03, fp
10adc     14 4E 85 F1 | 	sub	fp, #20
10ae0     7C 9D BF FD | 	call	#_pop
10ae4     FF 22 02 F6 | 	mov	local03, result3
10ae8     A7 FA 61 FC | 	wrlong	result1, fp
10aec     04 4E 05 F1 | 	add	fp, #4
10af0     A7 FC 61 FC | 	wrlong	result2, fp
10af4     04 4E 05 F1 | 	add	fp, #4
10af8     A7 22 62 FC | 	wrlong	local03, fp
10afc                 | ' 
10afc                 | ' t2=pop()
10afc                 | ' t1=pop()
10afc                 | ' 
10afc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
10afc     08 4E 85 F1 | 	sub	fp, #8
10b00     1D 22 0E F2 | 	cmp	local03, #29 wz
10b04     14 4E 05 A1 |  if_e	add	fp, #20
10b08     A7 24 02 AB |  if_e	rdlong	local04, fp
10b0c     14 4E 85 A1 |  if_e	sub	fp, #20
10b10     12 23 02 A6 |  if_e	mov	local03, local04
10b14     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10b18     20 00 90 5D |  if_ne	jmp	#LR__1340
10b1c     A7 20 02 FB | 	rdlong	local02, fp
10b20     0C 4E 05 F1 | 	add	fp, #12
10b24     A7 22 02 FB | 	rdlong	local03, fp
10b28     11 21 02 FD | 	qmul	local02, local03
10b2c     0C 4E 85 F1 | 	sub	fp, #12
10b30     18 1E 62 FD | 	getqx	local01
10b34     A7 1E 62 FC | 	wrlong	local01, fp
10b38     C4 02 90 FD | 	jmp	#LR__1349
10b3c                 | LR__1340
10b3c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
10b3c     08 4E 05 F1 | 	add	fp, #8
10b40     A7 1E 02 FB | 	rdlong	local01, fp
10b44     08 4E 85 F1 | 	sub	fp, #8
10b48     1D 1E 0E F2 | 	cmp	local01, #29 wz
10b4c     14 4E 05 A1 |  if_e	add	fp, #20
10b50     A7 24 02 AB |  if_e	rdlong	local04, fp
10b54     14 4E 85 A1 |  if_e	sub	fp, #20
10b58     12 23 02 A6 |  if_e	mov	local03, local04
10b5c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10b60     2C 00 90 5D |  if_ne	jmp	#LR__1341
10b64     A7 20 02 FB | 	rdlong	local02, fp
10b68     0C 4E 05 F1 | 	add	fp, #12
10b6c     A7 22 02 FB | 	rdlong	local03, fp
10b70     11 21 02 FD | 	qmul	local02, local03
10b74     0C 4E 85 F1 | 	sub	fp, #12
10b78     18 1E 62 FD | 	getqx	local01
10b7c     A7 1E 62 FC | 	wrlong	local01, fp
10b80     08 4E 05 F1 | 	add	fp, #8
10b84     A7 38 68 FC | 	wrlong	#28, fp
10b88     08 4E 85 F1 | 	sub	fp, #8
10b8c     70 02 90 FD | 	jmp	#LR__1349
10b90                 | LR__1341
10b90                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
10b90     08 4E 05 F1 | 	add	fp, #8
10b94     A7 1E 02 FB | 	rdlong	local01, fp
10b98     08 4E 85 F1 | 	sub	fp, #8
10b9c     1D 1E 0E F2 | 	cmp	local01, #29 wz
10ba0     14 4E 05 A1 |  if_e	add	fp, #20
10ba4     A7 24 02 AB |  if_e	rdlong	local04, fp
10ba8     14 4E 85 A1 |  if_e	sub	fp, #20
10bac     12 23 02 A6 |  if_e	mov	local03, local04
10bb0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10bb4     30 00 90 5D |  if_ne	jmp	#LR__1342
10bb8     A7 12 02 FB | 	rdlong	arg01, fp
10bbc     30 07 B1 FD | 	call	#__system___float_fromuns
10bc0     FD 12 02 F6 | 	mov	arg01, result1
10bc4     0C 4E 05 F1 | 	add	fp, #12
10bc8     A7 14 02 FB | 	rdlong	arg02, fp
10bcc     0C 4E 85 F1 | 	sub	fp, #12
10bd0     20 0B B1 FD | 	call	#__system___float_mul
10bd4     A7 FA 61 FC | 	wrlong	result1, fp
10bd8     08 4E 05 F1 | 	add	fp, #8
10bdc     A7 3C 68 FC | 	wrlong	#30, fp
10be0     08 4E 85 F1 | 	sub	fp, #8
10be4     18 02 90 FD | 	jmp	#LR__1349
10be8                 | LR__1342
10be8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
10be8     08 4E 05 F1 | 	add	fp, #8
10bec     A7 1E 02 FB | 	rdlong	local01, fp
10bf0     08 4E 85 F1 | 	sub	fp, #8
10bf4     1C 1E 0E F2 | 	cmp	local01, #28 wz
10bf8     14 4E 05 A1 |  if_e	add	fp, #20
10bfc     A7 24 02 AB |  if_e	rdlong	local04, fp
10c00     14 4E 85 A1 |  if_e	sub	fp, #20
10c04     12 23 02 A6 |  if_e	mov	local03, local04
10c08     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10c0c     20 00 90 5D |  if_ne	jmp	#LR__1343
10c10     A7 20 02 FB | 	rdlong	local02, fp
10c14     0C 4E 05 F1 | 	add	fp, #12
10c18     A7 22 02 FB | 	rdlong	local03, fp
10c1c     11 21 02 FD | 	qmul	local02, local03
10c20     0C 4E 85 F1 | 	sub	fp, #12
10c24     18 1E 62 FD | 	getqx	local01
10c28     A7 1E 62 FC | 	wrlong	local01, fp
10c2c     D0 01 90 FD | 	jmp	#LR__1349
10c30                 | LR__1343
10c30                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
10c30     08 4E 05 F1 | 	add	fp, #8
10c34     A7 1E 02 FB | 	rdlong	local01, fp
10c38     08 4E 85 F1 | 	sub	fp, #8
10c3c     1C 1E 0E F2 | 	cmp	local01, #28 wz
10c40     14 4E 05 A1 |  if_e	add	fp, #20
10c44     A7 24 02 AB |  if_e	rdlong	local04, fp
10c48     14 4E 85 A1 |  if_e	sub	fp, #20
10c4c     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
10c50     20 00 90 5D |  if_ne	jmp	#LR__1344
10c54     A7 20 02 FB | 	rdlong	local02, fp
10c58     0C 4E 05 F1 | 	add	fp, #12
10c5c     A7 22 02 FB | 	rdlong	local03, fp
10c60     11 21 02 FD | 	qmul	local02, local03
10c64     0C 4E 85 F1 | 	sub	fp, #12
10c68     18 1E 62 FD | 	getqx	local01
10c6c     A7 1E 62 FC | 	wrlong	local01, fp
10c70     8C 01 90 FD | 	jmp	#LR__1349
10c74                 | LR__1344
10c74                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
10c74     08 4E 05 F1 | 	add	fp, #8
10c78     A7 1E 02 FB | 	rdlong	local01, fp
10c7c     08 4E 85 F1 | 	sub	fp, #8
10c80     1C 1E 0E F2 | 	cmp	local01, #28 wz
10c84     14 4E 05 A1 |  if_e	add	fp, #20
10c88     A7 22 02 AB |  if_e	rdlong	local03, fp
10c8c     14 4E 85 A1 |  if_e	sub	fp, #20
10c90     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10c94     40 00 90 5D |  if_ne	jmp	#LR__1345
10c98     A7 12 02 FB | 	rdlong	arg01, fp
10c9c     09 13 52 F6 | 	abs	arg01, arg01 wc
10ca0     1F 26 C6 C9 |  if_b	decod	local05, #31
10ca4     00 26 06 36 |  if_ae	mov	local05, #0
10ca8     44 06 B1 FD | 	call	#__system___float_fromuns
10cac     13 FB 61 F5 | 	xor	result1, local05
10cb0     FD 12 02 F6 | 	mov	arg01, result1
10cb4     0C 4E 05 F1 | 	add	fp, #12
10cb8     A7 14 02 FB | 	rdlong	arg02, fp
10cbc     0C 4E 85 F1 | 	sub	fp, #12
10cc0     30 0A B1 FD | 	call	#__system___float_mul
10cc4     A7 FA 61 FC | 	wrlong	result1, fp
10cc8     08 4E 05 F1 | 	add	fp, #8
10ccc     A7 3C 68 FC | 	wrlong	#30, fp
10cd0     08 4E 85 F1 | 	sub	fp, #8
10cd4     28 01 90 FD | 	jmp	#LR__1349
10cd8                 | LR__1345
10cd8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
10cd8     08 4E 05 F1 | 	add	fp, #8
10cdc     A7 1E 02 FB | 	rdlong	local01, fp
10ce0     08 4E 85 F1 | 	sub	fp, #8
10ce4     1E 1E 0E F2 | 	cmp	local01, #30 wz
10ce8     14 4E 05 A1 |  if_e	add	fp, #20
10cec     A7 22 02 AB |  if_e	rdlong	local03, fp
10cf0     14 4E 85 A1 |  if_e	sub	fp, #20
10cf4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10cf8     28 00 90 5D |  if_ne	jmp	#LR__1346
10cfc     A7 1E 02 FB | 	rdlong	local01, fp
10d00     0C 4E 05 F1 | 	add	fp, #12
10d04     A7 12 02 FB | 	rdlong	arg01, fp
10d08     0C 4E 85 F1 | 	sub	fp, #12
10d0c     E0 05 B1 FD | 	call	#__system___float_fromuns
10d10     FD 14 02 F6 | 	mov	arg02, result1
10d14     0F 13 02 F6 | 	mov	arg01, local01
10d18     D8 09 B1 FD | 	call	#__system___float_mul
10d1c     A7 FA 61 FC | 	wrlong	result1, fp
10d20     DC 00 90 FD | 	jmp	#LR__1349
10d24                 | LR__1346
10d24                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
10d24     08 4E 05 F1 | 	add	fp, #8
10d28     A7 1E 02 FB | 	rdlong	local01, fp
10d2c     08 4E 85 F1 | 	sub	fp, #8
10d30     1E 1E 0E F2 | 	cmp	local01, #30 wz
10d34     14 4E 05 A1 |  if_e	add	fp, #20
10d38     A7 22 02 AB |  if_e	rdlong	local03, fp
10d3c     14 4E 85 A1 |  if_e	sub	fp, #20
10d40     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10d44     38 00 90 5D |  if_ne	jmp	#LR__1347
10d48     A7 1E 02 FB | 	rdlong	local01, fp
10d4c     0C 4E 05 F1 | 	add	fp, #12
10d50     A7 12 02 FB | 	rdlong	arg01, fp
10d54     0C 4E 85 F1 | 	sub	fp, #12
10d58     09 13 52 F6 | 	abs	arg01, arg01 wc
10d5c     1F 26 C6 C9 |  if_b	decod	local05, #31
10d60     00 26 06 36 |  if_ae	mov	local05, #0
10d64     88 05 B1 FD | 	call	#__system___float_fromuns
10d68     13 FB 61 F5 | 	xor	result1, local05
10d6c     FD 14 02 F6 | 	mov	arg02, result1
10d70     0F 13 02 F6 | 	mov	arg01, local01
10d74     7C 09 B1 FD | 	call	#__system___float_mul
10d78     A7 FA 61 FC | 	wrlong	result1, fp
10d7c     80 00 90 FD | 	jmp	#LR__1349
10d80                 | LR__1347
10d80                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
10d80     08 4E 05 F1 | 	add	fp, #8
10d84     A7 1E 02 FB | 	rdlong	local01, fp
10d88     08 4E 85 F1 | 	sub	fp, #8
10d8c     1E 1E 0E F2 | 	cmp	local01, #30 wz
10d90     14 4E 05 A1 |  if_e	add	fp, #20
10d94     A7 22 02 AB |  if_e	rdlong	local03, fp
10d98     14 4E 85 A1 |  if_e	sub	fp, #20
10d9c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10da0     1C 00 90 5D |  if_ne	jmp	#LR__1348
10da4     A7 12 02 FB | 	rdlong	arg01, fp
10da8     0C 4E 05 F1 | 	add	fp, #12
10dac     A7 14 02 FB | 	rdlong	arg02, fp
10db0     0C 4E 85 F1 | 	sub	fp, #12
10db4     3C 09 B1 FD | 	call	#__system___float_mul
10db8     A7 FA 61 FC | 	wrlong	result1, fp
10dbc     40 00 90 FD | 	jmp	#LR__1349
10dc0                 | LR__1348
10dc0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
10dc0     08 4E 05 F1 | 	add	fp, #8
10dc4     A7 1E 02 FB | 	rdlong	local01, fp
10dc8     08 4E 85 F1 | 	sub	fp, #8
10dcc     1F 1E 0E F2 | 	cmp	local01, #31 wz
10dd0     14 4E 05 51 |  if_ne	add	fp, #20
10dd4     A7 22 02 5B |  if_ne	rdlong	local03, fp
10dd8     14 4E 85 51 |  if_ne	sub	fp, #20
10ddc     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
10de0     A7 10 68 AC |  if_e	wrlong	#8, fp
10de4     08 4E 05 A1 |  if_e	add	fp, #8
10de8     A7 FE 69 AC |  if_e	wrlong	#255, fp
10dec     08 4E 85 A1 |  if_e	sub	fp, #8
10df0     A7 12 68 5C |  if_ne	wrlong	#9, fp
10df4     08 4E 05 51 |  if_ne	add	fp, #8
10df8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
10dfc     08 4E 85 51 |  if_ne	sub	fp, #8
10e00                 | LR__1349
10e00     A7 12 02 F6 | 	mov	arg01, fp
10e04     F0 9A BF FD | 	call	#_push
10e08     A7 F0 03 F6 | 	mov	ptra, fp
10e0c     B2 00 A0 FD | 	call	#popregs_
10e10                 | _do_mul_ret
10e10     2D 00 64 FD | 	ret
10e14                 | 
10e14                 | ' 
10e14                 | ' sub do_div 
10e14                 | _do_div
10e14     01 4A 05 F6 | 	mov	COUNT_, #1
10e18     A8 00 A0 FD | 	call	#pushregs_
10e1c     18 F0 07 F1 | 	add	ptra, #24
10e20     3C 9A BF FD | 	call	#_pop
10e24     FD 66 02 F6 | 	mov	muldivb_, result1
10e28     FE 64 02 F6 | 	mov	muldiva_, result2
10e2c     FF 1E 02 F6 | 	mov	local01, result3
10e30     0C 4E 05 F1 | 	add	fp, #12
10e34     A7 66 62 FC | 	wrlong	muldivb_, fp
10e38     04 4E 05 F1 | 	add	fp, #4
10e3c     A7 64 62 FC | 	wrlong	muldiva_, fp
10e40     04 4E 05 F1 | 	add	fp, #4
10e44     A7 1E 62 FC | 	wrlong	local01, fp
10e48     14 4E 85 F1 | 	sub	fp, #20
10e4c     10 9A BF FD | 	call	#_pop
10e50     A7 FA 61 FC | 	wrlong	result1, fp
10e54     04 4E 05 F1 | 	add	fp, #4
10e58     A7 FC 61 FC | 	wrlong	result2, fp
10e5c     04 4E 05 F1 | 	add	fp, #4
10e60     A7 FE 61 FC | 	wrlong	result3, fp
10e64                 | ' 
10e64                 | ' t2=pop()
10e64                 | ' t1=pop()
10e64                 | ' 
10e64                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
10e64     08 4E 85 F1 | 	sub	fp, #8
10e68     1F FE 0D F2 | 	cmp	result3, #31 wz
10e6c     14 4E 05 51 |  if_ne	add	fp, #20
10e70     A7 12 02 5B |  if_ne	rdlong	arg01, fp
10e74     14 4E 85 51 |  if_ne	sub	fp, #20
10e78     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
10e7c     A7 14 68 AC |  if_e	wrlong	#10, fp
10e80     08 4E 05 A1 |  if_e	add	fp, #8
10e84     A7 FE 69 AC |  if_e	wrlong	#255, fp
10e88     08 4E 85 A1 |  if_e	sub	fp, #8
10e8c     90 01 90 AD |  if_e	jmp	#LR__1356
10e90                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
10e90     08 4E 05 F1 | 	add	fp, #8
10e94     A7 66 02 FB | 	rdlong	muldivb_, fp
10e98     08 4E 85 F1 | 	sub	fp, #8
10e9c     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
10ea0     1C 00 90 5D |  if_ne	jmp	#LR__1350
10ea4     08 4E 05 F1 | 	add	fp, #8
10ea8     A7 38 68 FC | 	wrlong	#28, fp
10eac     08 4E 85 F1 | 	sub	fp, #8
10eb0     A7 12 02 FB | 	rdlong	arg01, fp
10eb4     00 14 06 F6 | 	mov	arg02, #0
10eb8     00 0D B1 FD | 	call	#__system___float_tointeger
10ebc     A7 FA 61 FC | 	wrlong	result1, fp
10ec0                 | LR__1350
10ec0                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
10ec0     14 4E 05 F1 | 	add	fp, #20
10ec4     A7 66 02 FB | 	rdlong	muldivb_, fp
10ec8     14 4E 85 F1 | 	sub	fp, #20
10ecc     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
10ed0     28 00 90 5D |  if_ne	jmp	#LR__1351
10ed4     14 4E 05 F1 | 	add	fp, #20
10ed8     A7 38 68 FC | 	wrlong	#28, fp
10edc     08 4E 85 F1 | 	sub	fp, #8
10ee0     A7 12 02 FB | 	rdlong	arg01, fp
10ee4     0C 4E 85 F1 | 	sub	fp, #12
10ee8     00 14 06 F6 | 	mov	arg02, #0
10eec     CC 0C B1 FD | 	call	#__system___float_tointeger
10ef0     0C 4E 05 F1 | 	add	fp, #12
10ef4     A7 FA 61 FC | 	wrlong	result1, fp
10ef8     0C 4E 85 F1 | 	sub	fp, #12
10efc                 | LR__1351
10efc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
10efc     08 4E 05 F1 | 	add	fp, #8
10f00     A7 66 02 FB | 	rdlong	muldivb_, fp
10f04     08 4E 85 F1 | 	sub	fp, #8
10f08     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10f0c     14 4E 05 A1 |  if_e	add	fp, #20
10f10     A7 1E 02 AB |  if_e	rdlong	local01, fp
10f14     14 4E 85 A1 |  if_e	sub	fp, #20
10f18     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10f1c     20 00 90 5D |  if_ne	jmp	#LR__1352
10f20     0C 4E 05 F1 | 	add	fp, #12
10f24     A7 1E 02 FB | 	rdlong	local01, fp
10f28     0C 4E 85 F1 | 	sub	fp, #12
10f2c     A7 66 02 FB | 	rdlong	muldivb_, fp
10f30     0F 67 12 FD | 	qdiv	muldivb_, local01
10f34     18 1E 62 FD | 	getqx	local01
10f38     A7 1E 62 FC | 	wrlong	local01, fp
10f3c     E0 00 90 FD | 	jmp	#LR__1356
10f40                 | LR__1352
10f40                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
10f40     08 4E 05 F1 | 	add	fp, #8
10f44     A7 66 02 FB | 	rdlong	muldivb_, fp
10f48     08 4E 85 F1 | 	sub	fp, #8
10f4c     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10f50     14 4E 05 A1 |  if_e	add	fp, #20
10f54     A7 1E 02 AB |  if_e	rdlong	local01, fp
10f58     14 4E 85 A1 |  if_e	sub	fp, #20
10f5c     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
10f60     2C 00 90 5D |  if_ne	jmp	#LR__1353
10f64     0C 4E 05 F1 | 	add	fp, #12
10f68     A7 1E 02 FB | 	rdlong	local01, fp
10f6c     0C 4E 85 F1 | 	sub	fp, #12
10f70     A7 66 02 FB | 	rdlong	muldivb_, fp
10f74     0F 67 12 FD | 	qdiv	muldivb_, local01
10f78     18 1E 62 FD | 	getqx	local01
10f7c     A7 1E 62 FC | 	wrlong	local01, fp
10f80     08 4E 05 F1 | 	add	fp, #8
10f84     A7 38 68 FC | 	wrlong	#28, fp
10f88     08 4E 85 F1 | 	sub	fp, #8
10f8c     90 00 90 FD | 	jmp	#LR__1356
10f90                 | LR__1353
10f90                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
10f90     08 4E 05 F1 | 	add	fp, #8
10f94     A7 66 02 FB | 	rdlong	muldivb_, fp
10f98     08 4E 85 F1 | 	sub	fp, #8
10f9c     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10fa0     14 4E 05 A1 |  if_e	add	fp, #20
10fa4     A7 1E 02 AB |  if_e	rdlong	local01, fp
10fa8     14 4E 85 A1 |  if_e	sub	fp, #20
10fac     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10fb0     1C 00 90 5D |  if_ne	jmp	#LR__1354
10fb4     A7 64 02 FB | 	rdlong	muldiva_, fp
10fb8     0C 4E 05 F1 | 	add	fp, #12
10fbc     A7 66 02 FB | 	rdlong	muldivb_, fp
10fc0     0C 4E 85 F1 | 	sub	fp, #12
10fc4     BA 00 A0 FD | 	call	#divide_
10fc8     A7 66 62 FC | 	wrlong	muldivb_, fp
10fcc     50 00 90 FD | 	jmp	#LR__1356
10fd0                 | LR__1354
10fd0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
10fd0     08 4E 05 F1 | 	add	fp, #8
10fd4     A7 66 02 FB | 	rdlong	muldivb_, fp
10fd8     08 4E 85 F1 | 	sub	fp, #8
10fdc     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10fe0     14 4E 05 A1 |  if_e	add	fp, #20
10fe4     A7 1E 02 AB |  if_e	rdlong	local01, fp
10fe8     14 4E 85 A1 |  if_e	sub	fp, #20
10fec     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
10ff0     1C 00 90 5D |  if_ne	jmp	#LR__1355
10ff4     A7 64 02 FB | 	rdlong	muldiva_, fp
10ff8     0C 4E 05 F1 | 	add	fp, #12
10ffc     A7 66 02 FB | 	rdlong	muldivb_, fp
11000     0C 4E 85 F1 | 	sub	fp, #12
11004     BA 00 A0 FD | 	call	#divide_
11008     A7 66 62 FC | 	wrlong	muldivb_, fp
1100c     10 00 90 FD | 	jmp	#LR__1356
11010                 | LR__1355
11010     A7 16 68 FC | 	wrlong	#11, fp
11014     08 4E 05 F1 | 	add	fp, #8
11018     A7 FE 69 FC | 	wrlong	#255, fp
1101c     08 4E 85 F1 | 	sub	fp, #8
11020                 | LR__1356
11020     A7 12 02 F6 | 	mov	arg01, fp
11024     D0 98 BF FD | 	call	#_push
11028     A7 F0 03 F6 | 	mov	ptra, fp
1102c     B2 00 A0 FD | 	call	#popregs_
11030                 | _do_div_ret
11030     2D 00 64 FD | 	ret
11034                 | 
11034                 | ' 
11034                 | ' sub do_fdiv 
11034                 | _do_fdiv
11034     02 4A 05 F6 | 	mov	COUNT_, #2
11038     A8 00 A0 FD | 	call	#pushregs_
1103c     18 F0 07 F1 | 	add	ptra, #24
11040     1C 98 BF FD | 	call	#_pop
11044     FD 14 02 F6 | 	mov	arg02, result1
11048     FE 12 02 F6 | 	mov	arg01, result2
1104c     FF 1E 02 F6 | 	mov	local01, result3
11050     0C 4E 05 F1 | 	add	fp, #12
11054     A7 14 62 FC | 	wrlong	arg02, fp
11058     04 4E 05 F1 | 	add	fp, #4
1105c     A7 12 62 FC | 	wrlong	arg01, fp
11060     04 4E 05 F1 | 	add	fp, #4
11064     A7 1E 62 FC | 	wrlong	local01, fp
11068     14 4E 85 F1 | 	sub	fp, #20
1106c     F0 97 BF FD | 	call	#_pop
11070     A7 FA 61 FC | 	wrlong	result1, fp
11074     04 4E 05 F1 | 	add	fp, #4
11078     A7 FC 61 FC | 	wrlong	result2, fp
1107c     04 4E 05 F1 | 	add	fp, #4
11080     A7 FE 61 FC | 	wrlong	result3, fp
11084                 | ' 
11084                 | ' t2=pop()
11084                 | ' t1=pop()
11084                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
11084     08 4E 85 F1 | 	sub	fp, #8
11088     1F FE 0D F2 | 	cmp	result3, #31 wz
1108c     14 4E 05 51 |  if_ne	add	fp, #20
11090     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11094     14 4E 85 51 |  if_ne	sub	fp, #20
11098     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
1109c     A7 14 68 AC |  if_e	wrlong	#10, fp
110a0     08 4E 05 A1 |  if_e	add	fp, #8
110a4     A7 FE 69 AC |  if_e	wrlong	#255, fp
110a8     08 4E 85 A1 |  if_e	sub	fp, #8
110ac     38 01 90 AD |  if_e	jmp	#LR__1365
110b0                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
110b0     08 4E 05 F1 | 	add	fp, #8
110b4     A7 14 02 FB | 	rdlong	arg02, fp
110b8     08 4E 85 F1 | 	sub	fp, #8
110bc     1C 14 0E F2 | 	cmp	arg02, #28 wz
110c0     28 00 90 5D |  if_ne	jmp	#LR__1360
110c4     08 4E 05 F1 | 	add	fp, #8
110c8     A7 3C 68 FC | 	wrlong	#30, fp
110cc     08 4E 85 F1 | 	sub	fp, #8
110d0     A7 12 02 FB | 	rdlong	arg01, fp
110d4     09 13 52 F6 | 	abs	arg01, arg01 wc
110d8     1F 20 C6 C9 |  if_b	decod	local02, #31
110dc     00 20 06 36 |  if_ae	mov	local02, #0
110e0     0C 02 B1 FD | 	call	#__system___float_fromuns
110e4     10 FB 61 F5 | 	xor	result1, local02
110e8     A7 FA 61 FC | 	wrlong	result1, fp
110ec                 | LR__1360
110ec                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
110ec     08 4E 05 F1 | 	add	fp, #8
110f0     A7 14 02 FB | 	rdlong	arg02, fp
110f4     08 4E 85 F1 | 	sub	fp, #8
110f8     1D 14 0E F2 | 	cmp	arg02, #29 wz
110fc     18 00 90 5D |  if_ne	jmp	#LR__1361
11100     08 4E 05 F1 | 	add	fp, #8
11104     A7 3C 68 FC | 	wrlong	#30, fp
11108     08 4E 85 F1 | 	sub	fp, #8
1110c     A7 12 02 FB | 	rdlong	arg01, fp
11110     DC 01 B1 FD | 	call	#__system___float_fromuns
11114     A7 FA 61 FC | 	wrlong	result1, fp
11118                 | LR__1361
11118                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
11118     14 4E 05 F1 | 	add	fp, #20
1111c     A7 14 02 FB | 	rdlong	arg02, fp
11120     14 4E 85 F1 | 	sub	fp, #20
11124     1C 14 0E F2 | 	cmp	arg02, #28 wz
11128     34 00 90 5D |  if_ne	jmp	#LR__1362
1112c     14 4E 05 F1 | 	add	fp, #20
11130     A7 3C 68 FC | 	wrlong	#30, fp
11134     08 4E 85 F1 | 	sub	fp, #8
11138     A7 12 02 FB | 	rdlong	arg01, fp
1113c     0C 4E 85 F1 | 	sub	fp, #12
11140     09 13 52 F6 | 	abs	arg01, arg01 wc
11144     1F 20 C6 C9 |  if_b	decod	local02, #31
11148     00 20 06 36 |  if_ae	mov	local02, #0
1114c     A0 01 B1 FD | 	call	#__system___float_fromuns
11150     10 FB 61 F5 | 	xor	result1, local02
11154     0C 4E 05 F1 | 	add	fp, #12
11158     A7 FA 61 FC | 	wrlong	result1, fp
1115c     0C 4E 85 F1 | 	sub	fp, #12
11160                 | LR__1362
11160                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
11160     14 4E 05 F1 | 	add	fp, #20
11164     A7 14 02 FB | 	rdlong	arg02, fp
11168     14 4E 85 F1 | 	sub	fp, #20
1116c     1D 14 0E F2 | 	cmp	arg02, #29 wz
11170     24 00 90 5D |  if_ne	jmp	#LR__1363
11174     14 4E 05 F1 | 	add	fp, #20
11178     A7 3C 68 FC | 	wrlong	#30, fp
1117c     08 4E 85 F1 | 	sub	fp, #8
11180     A7 12 02 FB | 	rdlong	arg01, fp
11184     0C 4E 85 F1 | 	sub	fp, #12
11188     64 01 B1 FD | 	call	#__system___float_fromuns
1118c     0C 4E 05 F1 | 	add	fp, #12
11190     A7 FA 61 FC | 	wrlong	result1, fp
11194     0C 4E 85 F1 | 	sub	fp, #12
11198                 | LR__1363
11198                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
11198     08 4E 05 F1 | 	add	fp, #8
1119c     A7 14 02 FB | 	rdlong	arg02, fp
111a0     08 4E 85 F1 | 	sub	fp, #8
111a4     1E 14 0E F2 | 	cmp	arg02, #30 wz
111a8     14 4E 05 A1 |  if_e	add	fp, #20
111ac     A7 1E 02 AB |  if_e	rdlong	local01, fp
111b0     14 4E 85 A1 |  if_e	sub	fp, #20
111b4     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
111b8     1C 00 90 5D |  if_ne	jmp	#LR__1364
111bc     A7 12 02 FB | 	rdlong	arg01, fp
111c0     0C 4E 05 F1 | 	add	fp, #12
111c4     A7 14 02 FB | 	rdlong	arg02, fp
111c8     0C 4E 85 F1 | 	sub	fp, #12
111cc     28 07 B1 FD | 	call	#__system___float_div
111d0     A7 FA 61 FC | 	wrlong	result1, fp
111d4     10 00 90 FD | 	jmp	#LR__1365
111d8                 | LR__1364
111d8     A7 16 68 FC | 	wrlong	#11, fp
111dc     08 4E 05 F1 | 	add	fp, #8
111e0     A7 FE 69 FC | 	wrlong	#255, fp
111e4     08 4E 85 F1 | 	sub	fp, #8
111e8                 | LR__1365
111e8     A7 12 02 F6 | 	mov	arg01, fp
111ec     08 97 BF FD | 	call	#_push
111f0     A7 F0 03 F6 | 	mov	ptra, fp
111f4     B2 00 A0 FD | 	call	#popregs_
111f8                 | _do_fdiv_ret
111f8     2D 00 64 FD | 	ret
111fc                 | 
111fc                 | ' 
111fc                 | ' 
111fc                 | ' sub do_mod 
111fc                 | _do_mod
111fc     01 4A 05 F6 | 	mov	COUNT_, #1
11200     A8 00 A0 FD | 	call	#pushregs_
11204     18 F0 07 F1 | 	add	ptra, #24
11208     54 96 BF FD | 	call	#_pop
1120c     FD 66 02 F6 | 	mov	muldivb_, result1
11210     FE 64 02 F6 | 	mov	muldiva_, result2
11214     FF 1E 02 F6 | 	mov	local01, result3
11218     0C 4E 05 F1 | 	add	fp, #12
1121c     A7 66 62 FC | 	wrlong	muldivb_, fp
11220     04 4E 05 F1 | 	add	fp, #4
11224     A7 64 62 FC | 	wrlong	muldiva_, fp
11228     04 4E 05 F1 | 	add	fp, #4
1122c     A7 1E 62 FC | 	wrlong	local01, fp
11230     14 4E 85 F1 | 	sub	fp, #20
11234     28 96 BF FD | 	call	#_pop
11238     A7 FA 61 FC | 	wrlong	result1, fp
1123c     04 4E 05 F1 | 	add	fp, #4
11240     A7 FC 61 FC | 	wrlong	result2, fp
11244     04 4E 05 F1 | 	add	fp, #4
11248     A7 FE 61 FC | 	wrlong	result3, fp
1124c                 | ' 
1124c                 | ' t2=pop()
1124c                 | ' t1=pop()
1124c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1124c     08 4E 85 F1 | 	sub	fp, #8
11250     1F FE 0D F2 | 	cmp	result3, #31 wz
11254     14 4E 05 51 |  if_ne	add	fp, #20
11258     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1125c     14 4E 85 51 |  if_ne	sub	fp, #20
11260     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
11264     A7 14 68 AC |  if_e	wrlong	#10, fp
11268     08 4E 05 A1 |  if_e	add	fp, #8
1126c     A7 FE 69 AC |  if_e	wrlong	#255, fp
11270     08 4E 85 A1 |  if_e	sub	fp, #8
11274     90 01 90 AD |  if_e	jmp	#LR__1376
11278                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
11278     08 4E 05 F1 | 	add	fp, #8
1127c     A7 66 02 FB | 	rdlong	muldivb_, fp
11280     08 4E 85 F1 | 	sub	fp, #8
11284     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
11288     1C 00 90 5D |  if_ne	jmp	#LR__1370
1128c     08 4E 05 F1 | 	add	fp, #8
11290     A7 38 68 FC | 	wrlong	#28, fp
11294     08 4E 85 F1 | 	sub	fp, #8
11298     A7 12 02 FB | 	rdlong	arg01, fp
1129c     00 14 06 F6 | 	mov	arg02, #0
112a0     18 09 B1 FD | 	call	#__system___float_tointeger
112a4     A7 FA 61 FC | 	wrlong	result1, fp
112a8                 | LR__1370
112a8                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
112a8     14 4E 05 F1 | 	add	fp, #20
112ac     A7 66 02 FB | 	rdlong	muldivb_, fp
112b0     14 4E 85 F1 | 	sub	fp, #20
112b4     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
112b8     28 00 90 5D |  if_ne	jmp	#LR__1371
112bc     14 4E 05 F1 | 	add	fp, #20
112c0     A7 38 68 FC | 	wrlong	#28, fp
112c4     08 4E 85 F1 | 	sub	fp, #8
112c8     A7 12 02 FB | 	rdlong	arg01, fp
112cc     0C 4E 85 F1 | 	sub	fp, #12
112d0     00 14 06 F6 | 	mov	arg02, #0
112d4     E4 08 B1 FD | 	call	#__system___float_tointeger
112d8     0C 4E 05 F1 | 	add	fp, #12
112dc     A7 FA 61 FC | 	wrlong	result1, fp
112e0     0C 4E 85 F1 | 	sub	fp, #12
112e4                 | LR__1371
112e4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
112e4     08 4E 05 F1 | 	add	fp, #8
112e8     A7 66 02 FB | 	rdlong	muldivb_, fp
112ec     08 4E 85 F1 | 	sub	fp, #8
112f0     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
112f4     14 4E 05 A1 |  if_e	add	fp, #20
112f8     A7 1E 02 AB |  if_e	rdlong	local01, fp
112fc     14 4E 85 A1 |  if_e	sub	fp, #20
11300     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
11304     20 00 90 5D |  if_ne	jmp	#LR__1372
11308     0C 4E 05 F1 | 	add	fp, #12
1130c     A7 1E 02 FB | 	rdlong	local01, fp
11310     0C 4E 85 F1 | 	sub	fp, #12
11314     A7 66 02 FB | 	rdlong	muldivb_, fp
11318     0F 67 12 FD | 	qdiv	muldivb_, local01
1131c     19 1E 62 FD | 	getqy	local01
11320     A7 1E 62 FC | 	wrlong	local01, fp
11324     E0 00 90 FD | 	jmp	#LR__1376
11328                 | LR__1372
11328                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
11328     08 4E 05 F1 | 	add	fp, #8
1132c     A7 66 02 FB | 	rdlong	muldivb_, fp
11330     08 4E 85 F1 | 	sub	fp, #8
11334     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
11338     14 4E 05 A1 |  if_e	add	fp, #20
1133c     A7 1E 02 AB |  if_e	rdlong	local01, fp
11340     14 4E 85 A1 |  if_e	sub	fp, #20
11344     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
11348     2C 00 90 5D |  if_ne	jmp	#LR__1373
1134c     0C 4E 05 F1 | 	add	fp, #12
11350     A7 1E 02 FB | 	rdlong	local01, fp
11354     0C 4E 85 F1 | 	sub	fp, #12
11358     A7 66 02 FB | 	rdlong	muldivb_, fp
1135c     0F 67 12 FD | 	qdiv	muldivb_, local01
11360     19 1E 62 FD | 	getqy	local01
11364     A7 1E 62 FC | 	wrlong	local01, fp
11368     08 4E 05 F1 | 	add	fp, #8
1136c     A7 38 68 FC | 	wrlong	#28, fp
11370     08 4E 85 F1 | 	sub	fp, #8
11374     90 00 90 FD | 	jmp	#LR__1376
11378                 | LR__1373
11378                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
11378     08 4E 05 F1 | 	add	fp, #8
1137c     A7 66 02 FB | 	rdlong	muldivb_, fp
11380     08 4E 85 F1 | 	sub	fp, #8
11384     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
11388     14 4E 05 A1 |  if_e	add	fp, #20
1138c     A7 1E 02 AB |  if_e	rdlong	local01, fp
11390     14 4E 85 A1 |  if_e	sub	fp, #20
11394     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
11398     1C 00 90 5D |  if_ne	jmp	#LR__1374
1139c     A7 64 02 FB | 	rdlong	muldiva_, fp
113a0     0C 4E 05 F1 | 	add	fp, #12
113a4     A7 66 02 FB | 	rdlong	muldivb_, fp
113a8     0C 4E 85 F1 | 	sub	fp, #12
113ac     BA 00 A0 FD | 	call	#divide_
113b0     A7 64 62 FC | 	wrlong	muldiva_, fp
113b4     50 00 90 FD | 	jmp	#LR__1376
113b8                 | LR__1374
113b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
113b8     08 4E 05 F1 | 	add	fp, #8
113bc     A7 66 02 FB | 	rdlong	muldivb_, fp
113c0     08 4E 85 F1 | 	sub	fp, #8
113c4     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
113c8     14 4E 05 A1 |  if_e	add	fp, #20
113cc     A7 1E 02 AB |  if_e	rdlong	local01, fp
113d0     14 4E 85 A1 |  if_e	sub	fp, #20
113d4     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
113d8     1C 00 90 5D |  if_ne	jmp	#LR__1375
113dc     A7 64 02 FB | 	rdlong	muldiva_, fp
113e0     0C 4E 05 F1 | 	add	fp, #12
113e4     A7 66 02 FB | 	rdlong	muldivb_, fp
113e8     0C 4E 85 F1 | 	sub	fp, #12
113ec     BA 00 A0 FD | 	call	#divide_
113f0     A7 64 62 FC | 	wrlong	muldiva_, fp
113f4     10 00 90 FD | 	jmp	#LR__1376
113f8                 | LR__1375
113f8     A7 16 68 FC | 	wrlong	#11, fp
113fc     08 4E 05 F1 | 	add	fp, #8
11400     A7 FE 69 FC | 	wrlong	#255, fp
11404     08 4E 85 F1 | 	sub	fp, #8
11408                 | LR__1376
11408     A7 12 02 F6 | 	mov	arg01, fp
1140c     E8 94 BF FD | 	call	#_push
11410     A7 F0 03 F6 | 	mov	ptra, fp
11414     B2 00 A0 FD | 	call	#popregs_
11418                 | _do_mod_ret
11418     2D 00 64 FD | 	ret
1141c                 | 
1141c                 | ' 
1141c                 | ' sub do_shl 
1141c                 | _do_shl
1141c     03 4A 05 F6 | 	mov	COUNT_, #3
11420     A8 00 A0 FD | 	call	#pushregs_
11424     18 F0 07 F1 | 	add	ptra, #24
11428     34 94 BF FD | 	call	#_pop
1142c     FD 12 02 F6 | 	mov	arg01, result1
11430     FE 1E 02 F6 | 	mov	local01, result2
11434     FF 20 02 F6 | 	mov	local02, result3
11438     0C 4E 05 F1 | 	add	fp, #12
1143c     A7 12 62 FC | 	wrlong	arg01, fp
11440     04 4E 05 F1 | 	add	fp, #4
11444     A7 1E 62 FC | 	wrlong	local01, fp
11448     04 4E 05 F1 | 	add	fp, #4
1144c     A7 20 62 FC | 	wrlong	local02, fp
11450     14 4E 85 F1 | 	sub	fp, #20
11454     08 94 BF FD | 	call	#_pop
11458     FF 22 02 F6 | 	mov	local03, result3
1145c     A7 FA 61 FC | 	wrlong	result1, fp
11460     04 4E 05 F1 | 	add	fp, #4
11464     A7 FC 61 FC | 	wrlong	result2, fp
11468     04 4E 05 F1 | 	add	fp, #4
1146c     A7 22 62 FC | 	wrlong	local03, fp
11470                 | ' 
11470                 | ' t2=pop()
11470                 | ' t1=pop()
11470                 | ' 
11470                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
11470     08 4E 85 F1 | 	sub	fp, #8
11474     1C 22 0E F2 | 	cmp	local03, #28 wz
11478     A7 22 02 AB |  if_e	rdlong	local03, fp
1147c     A7 22 62 AC |  if_e	wrlong	local03, fp
11480     08 4E 05 A1 |  if_e	add	fp, #8
11484     A7 3A 68 AC |  if_e	wrlong	#29, fp
11488     08 4E 85 A1 |  if_e	sub	fp, #8
1148c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1148c     14 4E 05 F1 | 	add	fp, #20
11490     A7 22 02 FB | 	rdlong	local03, fp
11494     14 4E 85 F1 | 	sub	fp, #20
11498     1C 22 0E F2 | 	cmp	local03, #28 wz
1149c     18 00 90 5D |  if_ne	jmp	#LR__1380
114a0     0C 4E 05 F1 | 	add	fp, #12
114a4     A7 22 02 FB | 	rdlong	local03, fp
114a8     A7 22 62 FC | 	wrlong	local03, fp
114ac     08 4E 05 F1 | 	add	fp, #8
114b0     A7 3A 68 FC | 	wrlong	#29, fp
114b4     14 4E 85 F1 | 	sub	fp, #20
114b8                 | LR__1380
114b8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
114b8     08 4E 05 F1 | 	add	fp, #8
114bc     A7 22 02 FB | 	rdlong	local03, fp
114c0     08 4E 85 F1 | 	sub	fp, #8
114c4     1F 22 0E F2 | 	cmp	local03, #31 wz
114c8     14 4E 05 51 |  if_ne	add	fp, #20
114cc     A7 20 02 5B |  if_ne	rdlong	local02, fp
114d0     14 4E 85 51 |  if_ne	sub	fp, #20
114d4     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
114d8     08 4E 05 51 |  if_ne	add	fp, #8
114dc     A7 22 02 5B |  if_ne	rdlong	local03, fp
114e0     08 4E 85 51 |  if_ne	sub	fp, #8
114e4     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
114e8     14 4E 05 51 |  if_ne	add	fp, #20
114ec     14 4E 85 51 |  if_ne	sub	fp, #20
114f0     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
114f4     A7 0C 68 AC |  if_e	wrlong	#6, fp
114f8     08 4E 05 A1 |  if_e	add	fp, #8
114fc     A7 FE 69 AC |  if_e	wrlong	#255, fp
11500     08 4E 85 A1 |  if_e	sub	fp, #8
11504     18 00 90 AD |  if_e	jmp	#LR__1381
11508     A7 22 02 FB | 	rdlong	local03, fp
1150c     0C 4E 05 F1 | 	add	fp, #12
11510     A7 1E 02 FB | 	rdlong	local01, fp
11514     0C 4E 85 F1 | 	sub	fp, #12
11518     0F 23 62 F0 | 	shl	local03, local01
1151c     A7 22 62 FC | 	wrlong	local03, fp
11520                 | LR__1381
11520     A7 12 02 F6 | 	mov	arg01, fp
11524     D0 93 BF FD | 	call	#_push
11528     A7 F0 03 F6 | 	mov	ptra, fp
1152c     B2 00 A0 FD | 	call	#popregs_
11530                 | _do_shl_ret
11530     2D 00 64 FD | 	ret
11534                 | 
11534                 | ' 
11534                 | ' sub do_shr 
11534                 | _do_shr
11534     03 4A 05 F6 | 	mov	COUNT_, #3
11538     A8 00 A0 FD | 	call	#pushregs_
1153c     18 F0 07 F1 | 	add	ptra, #24
11540     1C 93 BF FD | 	call	#_pop
11544     FD 12 02 F6 | 	mov	arg01, result1
11548     FE 1E 02 F6 | 	mov	local01, result2
1154c     FF 20 02 F6 | 	mov	local02, result3
11550     0C 4E 05 F1 | 	add	fp, #12
11554     A7 12 62 FC | 	wrlong	arg01, fp
11558     04 4E 05 F1 | 	add	fp, #4
1155c     A7 1E 62 FC | 	wrlong	local01, fp
11560     04 4E 05 F1 | 	add	fp, #4
11564     A7 20 62 FC | 	wrlong	local02, fp
11568     14 4E 85 F1 | 	sub	fp, #20
1156c     F0 92 BF FD | 	call	#_pop
11570     FF 22 02 F6 | 	mov	local03, result3
11574     A7 FA 61 FC | 	wrlong	result1, fp
11578     04 4E 05 F1 | 	add	fp, #4
1157c     A7 FC 61 FC | 	wrlong	result2, fp
11580     04 4E 05 F1 | 	add	fp, #4
11584     A7 22 62 FC | 	wrlong	local03, fp
11588                 | ' t2=pop()
11588                 | ' t1=pop()
11588                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
11588     08 4E 85 F1 | 	sub	fp, #8
1158c     1C 22 0E F2 | 	cmp	local03, #28 wz
11590     A7 22 02 AB |  if_e	rdlong	local03, fp
11594     A7 22 62 AC |  if_e	wrlong	local03, fp
11598     08 4E 05 A1 |  if_e	add	fp, #8
1159c     A7 3A 68 AC |  if_e	wrlong	#29, fp
115a0     08 4E 85 A1 |  if_e	sub	fp, #8
115a4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
115a4     14 4E 05 F1 | 	add	fp, #20
115a8     A7 22 02 FB | 	rdlong	local03, fp
115ac     14 4E 85 F1 | 	sub	fp, #20
115b0     1C 22 0E F2 | 	cmp	local03, #28 wz
115b4     18 00 90 5D |  if_ne	jmp	#LR__1390
115b8     0C 4E 05 F1 | 	add	fp, #12
115bc     A7 22 02 FB | 	rdlong	local03, fp
115c0     A7 22 62 FC | 	wrlong	local03, fp
115c4     08 4E 05 F1 | 	add	fp, #8
115c8     A7 3A 68 FC | 	wrlong	#29, fp
115cc     14 4E 85 F1 | 	sub	fp, #20
115d0                 | LR__1390
115d0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
115d0     08 4E 05 F1 | 	add	fp, #8
115d4     A7 22 02 FB | 	rdlong	local03, fp
115d8     08 4E 85 F1 | 	sub	fp, #8
115dc     1F 22 0E F2 | 	cmp	local03, #31 wz
115e0     14 4E 05 51 |  if_ne	add	fp, #20
115e4     A7 20 02 5B |  if_ne	rdlong	local02, fp
115e8     14 4E 85 51 |  if_ne	sub	fp, #20
115ec     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
115f0     08 4E 05 51 |  if_ne	add	fp, #8
115f4     A7 22 02 5B |  if_ne	rdlong	local03, fp
115f8     08 4E 85 51 |  if_ne	sub	fp, #8
115fc     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
11600     14 4E 05 51 |  if_ne	add	fp, #20
11604     14 4E 85 51 |  if_ne	sub	fp, #20
11608     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
1160c     A7 0C 68 AC |  if_e	wrlong	#6, fp
11610     08 4E 05 A1 |  if_e	add	fp, #8
11614     A7 FE 69 AC |  if_e	wrlong	#255, fp
11618     08 4E 85 A1 |  if_e	sub	fp, #8
1161c     18 00 90 AD |  if_e	jmp	#LR__1391
11620     A7 22 02 FB | 	rdlong	local03, fp
11624     0C 4E 05 F1 | 	add	fp, #12
11628     A7 1E 02 FB | 	rdlong	local01, fp
1162c     0C 4E 85 F1 | 	sub	fp, #12
11630     0F 23 42 F0 | 	shr	local03, local01
11634     A7 22 62 FC | 	wrlong	local03, fp
11638                 | LR__1391
11638     A7 12 02 F6 | 	mov	arg01, fp
1163c     B8 92 BF FD | 	call	#_push
11640     A7 F0 03 F6 | 	mov	ptra, fp
11644     B2 00 A0 FD | 	call	#popregs_
11648                 | _do_shr_ret
11648     2D 00 64 FD | 	ret
1164c                 | 
1164c                 | ' 
1164c                 | ' sub do_power 
1164c                 | _do_power
1164c     02 4A 05 F6 | 	mov	COUNT_, #2
11650     A8 00 A0 FD | 	call	#pushregs_
11654     18 F0 07 F1 | 	add	ptra, #24
11658     04 92 BF FD | 	call	#_pop
1165c     FD 14 02 F6 | 	mov	arg02, result1
11660     FE 12 02 F6 | 	mov	arg01, result2
11664     FF 1E 02 F6 | 	mov	local01, result3
11668     0C 4E 05 F1 | 	add	fp, #12
1166c     A7 14 62 FC | 	wrlong	arg02, fp
11670     04 4E 05 F1 | 	add	fp, #4
11674     A7 12 62 FC | 	wrlong	arg01, fp
11678     04 4E 05 F1 | 	add	fp, #4
1167c     A7 1E 62 FC | 	wrlong	local01, fp
11680     14 4E 85 F1 | 	sub	fp, #20
11684     D8 91 BF FD | 	call	#_pop
11688     A7 FA 61 FC | 	wrlong	result1, fp
1168c     04 4E 05 F1 | 	add	fp, #4
11690     A7 FC 61 FC | 	wrlong	result2, fp
11694     04 4E 05 F1 | 	add	fp, #4
11698     A7 FE 61 FC | 	wrlong	result3, fp
1169c                 | ' t2=pop()
1169c                 | ' t1=pop()
1169c                 | ' 
1169c                 | ' 
1169c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
1169c     08 4E 85 F1 | 	sub	fp, #8
116a0     1F FE 0D F2 | 	cmp	result3, #31 wz
116a4     14 4E 05 51 |  if_ne	add	fp, #20
116a8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
116ac     14 4E 85 51 |  if_ne	sub	fp, #20
116b0     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
116b4     A7 18 68 AC |  if_e	wrlong	#12, fp
116b8     08 4E 05 A1 |  if_e	add	fp, #8
116bc     A7 FE 69 AC |  if_e	wrlong	#255, fp
116c0     08 4E 85 A1 |  if_e	sub	fp, #8
116c4     38 01 90 AD |  if_e	jmp	#LR__1405
116c8                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
116c8     08 4E 05 F1 | 	add	fp, #8
116cc     A7 14 02 FB | 	rdlong	arg02, fp
116d0     08 4E 85 F1 | 	sub	fp, #8
116d4     1C 14 0E F2 | 	cmp	arg02, #28 wz
116d8     28 00 90 5D |  if_ne	jmp	#LR__1400
116dc     08 4E 05 F1 | 	add	fp, #8
116e0     A7 3C 68 FC | 	wrlong	#30, fp
116e4     08 4E 85 F1 | 	sub	fp, #8
116e8     A7 12 02 FB | 	rdlong	arg01, fp
116ec     09 13 52 F6 | 	abs	arg01, arg01 wc
116f0     1F 20 C6 C9 |  if_b	decod	local02, #31
116f4     00 20 06 36 |  if_ae	mov	local02, #0
116f8     F4 FB B0 FD | 	call	#__system___float_fromuns
116fc     10 FB 61 F5 | 	xor	result1, local02
11700     A7 FA 61 FC | 	wrlong	result1, fp
11704                 | LR__1400
11704                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
11704     08 4E 05 F1 | 	add	fp, #8
11708     A7 14 02 FB | 	rdlong	arg02, fp
1170c     08 4E 85 F1 | 	sub	fp, #8
11710     1D 14 0E F2 | 	cmp	arg02, #29 wz
11714     18 00 90 5D |  if_ne	jmp	#LR__1401
11718     08 4E 05 F1 | 	add	fp, #8
1171c     A7 3C 68 FC | 	wrlong	#30, fp
11720     08 4E 85 F1 | 	sub	fp, #8
11724     A7 12 02 FB | 	rdlong	arg01, fp
11728     C4 FB B0 FD | 	call	#__system___float_fromuns
1172c     A7 FA 61 FC | 	wrlong	result1, fp
11730                 | LR__1401
11730                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
11730     14 4E 05 F1 | 	add	fp, #20
11734     A7 14 02 FB | 	rdlong	arg02, fp
11738     14 4E 85 F1 | 	sub	fp, #20
1173c     1C 14 0E F2 | 	cmp	arg02, #28 wz
11740     34 00 90 5D |  if_ne	jmp	#LR__1402
11744     14 4E 05 F1 | 	add	fp, #20
11748     A7 3C 68 FC | 	wrlong	#30, fp
1174c     08 4E 85 F1 | 	sub	fp, #8
11750     A7 12 02 FB | 	rdlong	arg01, fp
11754     0C 4E 85 F1 | 	sub	fp, #12
11758     09 13 52 F6 | 	abs	arg01, arg01 wc
1175c     1F 20 C6 C9 |  if_b	decod	local02, #31
11760     00 20 06 36 |  if_ae	mov	local02, #0
11764     88 FB B0 FD | 	call	#__system___float_fromuns
11768     10 FB 61 F5 | 	xor	result1, local02
1176c     0C 4E 05 F1 | 	add	fp, #12
11770     A7 FA 61 FC | 	wrlong	result1, fp
11774     0C 4E 85 F1 | 	sub	fp, #12
11778                 | LR__1402
11778                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
11778     14 4E 05 F1 | 	add	fp, #20
1177c     A7 14 02 FB | 	rdlong	arg02, fp
11780     14 4E 85 F1 | 	sub	fp, #20
11784     1D 14 0E F2 | 	cmp	arg02, #29 wz
11788     24 00 90 5D |  if_ne	jmp	#LR__1403
1178c     14 4E 05 F1 | 	add	fp, #20
11790     A7 3C 68 FC | 	wrlong	#30, fp
11794     08 4E 85 F1 | 	sub	fp, #8
11798     A7 12 02 FB | 	rdlong	arg01, fp
1179c     0C 4E 85 F1 | 	sub	fp, #12
117a0     4C FB B0 FD | 	call	#__system___float_fromuns
117a4     0C 4E 05 F1 | 	add	fp, #12
117a8     A7 FA 61 FC | 	wrlong	result1, fp
117ac     0C 4E 85 F1 | 	sub	fp, #12
117b0                 | LR__1403
117b0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
117b0     08 4E 05 F1 | 	add	fp, #8
117b4     A7 14 02 FB | 	rdlong	arg02, fp
117b8     08 4E 85 F1 | 	sub	fp, #8
117bc     1E 14 0E F2 | 	cmp	arg02, #30 wz
117c0     14 4E 05 A1 |  if_e	add	fp, #20
117c4     A7 1E 02 AB |  if_e	rdlong	local01, fp
117c8     14 4E 85 A1 |  if_e	sub	fp, #20
117cc     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
117d0     1C 00 90 5D |  if_ne	jmp	#LR__1404
117d4     A7 12 02 FB | 	rdlong	arg01, fp
117d8     0C 4E 05 F1 | 	add	fp, #12
117dc     A7 14 02 FB | 	rdlong	arg02, fp
117e0     0C 4E 85 F1 | 	sub	fp, #12
117e4     F0 0D B1 FD | 	call	#__system____builtin_powf
117e8     A7 FA 61 FC | 	wrlong	result1, fp
117ec     10 00 90 FD | 	jmp	#LR__1405
117f0                 | LR__1404
117f0     A7 1A 68 FC | 	wrlong	#13, fp
117f4     08 4E 05 F1 | 	add	fp, #8
117f8     A7 FE 69 FC | 	wrlong	#255, fp
117fc     08 4E 85 F1 | 	sub	fp, #8
11800                 | LR__1405
11800     A7 12 02 F6 | 	mov	arg01, fp
11804     F0 90 BF FD | 	call	#_push
11808     A7 F0 03 F6 | 	mov	ptra, fp
1180c     B2 00 A0 FD | 	call	#popregs_
11810                 | _do_power_ret
11810     2D 00 64 FD | 	ret
11814                 | 
11814                 | ' 
11814                 | ' 
11814                 | ' sub do_eq
11814                 | _do_eq
11814     05 4A 05 F6 | 	mov	COUNT_, #5
11818     A8 00 A0 FD | 	call	#pushregs_
1181c     18 F0 07 F1 | 	add	ptra, #24
11820     3C 90 BF FD | 	call	#_pop
11824     FD 1E 02 F6 | 	mov	local01, result1
11828     FE 20 02 F6 | 	mov	local02, result2
1182c     FF 22 02 F6 | 	mov	local03, result3
11830     0C 4E 05 F1 | 	add	fp, #12
11834     A7 1E 62 FC | 	wrlong	local01, fp
11838     04 4E 05 F1 | 	add	fp, #4
1183c     A7 20 62 FC | 	wrlong	local02, fp
11840     04 4E 05 F1 | 	add	fp, #4
11844     A7 22 62 FC | 	wrlong	local03, fp
11848     14 4E 85 F1 | 	sub	fp, #20
1184c     10 90 BF FD | 	call	#_pop
11850     FF 22 02 F6 | 	mov	local03, result3
11854     A7 FA 61 FC | 	wrlong	result1, fp
11858     04 4E 05 F1 | 	add	fp, #4
1185c     A7 FC 61 FC | 	wrlong	result2, fp
11860     04 4E 05 F1 | 	add	fp, #4
11864     A7 22 62 FC | 	wrlong	local03, fp
11868                 | ' t2=pop()
11868                 | ' t1=pop()
11868                 | ' 
11868                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
11868     08 4E 85 F1 | 	sub	fp, #8
1186c     1F 22 0E F2 | 	cmp	local03, #31 wz
11870     14 4E 05 A1 |  if_e	add	fp, #20
11874     A7 24 02 AB |  if_e	rdlong	local04, fp
11878     14 4E 85 A1 |  if_e	sub	fp, #20
1187c     12 23 02 A6 |  if_e	mov	local03, local04
11880     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11884     28 00 90 5D |  if_ne	jmp	#LR__1410
11888     00 1E 06 F6 | 	mov	local01, #0
1188c     A7 12 02 FB | 	rdlong	arg01, fp
11890     0C 4E 05 F1 | 	add	fp, #12
11894     A7 14 02 FB | 	rdlong	arg02, fp
11898     0C 4E 85 F1 | 	sub	fp, #12
1189c     FC D2 B0 FD | 	call	#__system___string_cmp
118a0     00 FA 0D F2 | 	cmp	result1, #0 wz
118a4     00 1E 26 A6 |  if_e	not	local01, #0
118a8     A7 1E 62 FC | 	wrlong	local01, fp
118ac     1C 04 90 FD | 	jmp	#LR__1423
118b0                 | LR__1410
118b0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
118b0     08 4E 05 F1 | 	add	fp, #8
118b4     A7 1E 02 FB | 	rdlong	local01, fp
118b8     08 4E 85 F1 | 	sub	fp, #8
118bc     1E 1E 0E F2 | 	cmp	local01, #30 wz
118c0     14 4E 05 A1 |  if_e	add	fp, #20
118c4     A7 24 02 AB |  if_e	rdlong	local04, fp
118c8     14 4E 85 A1 |  if_e	sub	fp, #20
118cc     12 23 02 A6 |  if_e	mov	local03, local04
118d0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
118d4     2C 00 90 5D |  if_ne	jmp	#LR__1411
118d8     00 1E 06 F6 | 	mov	local01, #0
118dc     A7 12 02 FB | 	rdlong	arg01, fp
118e0     0C 4E 05 F1 | 	add	fp, #12
118e4     A7 14 02 FB | 	rdlong	arg02, fp
118e8     0C 4E 85 F1 | 	sub	fp, #12
118ec     01 16 06 F6 | 	mov	arg03, #1
118f0     34 02 B1 FD | 	call	#__system___float_cmp
118f4     00 FA 0D F2 | 	cmp	result1, #0 wz
118f8     00 1E 26 A6 |  if_e	not	local01, #0
118fc     A7 1E 62 FC | 	wrlong	local01, fp
11900     C8 03 90 FD | 	jmp	#LR__1423
11904                 | LR__1411
11904                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
11904     08 4E 05 F1 | 	add	fp, #8
11908     A7 1E 02 FB | 	rdlong	local01, fp
1190c     08 4E 85 F1 | 	sub	fp, #8
11910     1E 1E 0E F2 | 	cmp	local01, #30 wz
11914     14 4E 05 A1 |  if_e	add	fp, #20
11918     A7 24 02 AB |  if_e	rdlong	local04, fp
1191c     14 4E 85 A1 |  if_e	sub	fp, #20
11920     12 23 02 A6 |  if_e	mov	local03, local04
11924     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11928     48 00 90 5D |  if_ne	jmp	#LR__1412
1192c     00 1E 06 F6 | 	mov	local01, #0
11930     A7 20 02 FB | 	rdlong	local02, fp
11934     0C 4E 05 F1 | 	add	fp, #12
11938     A7 12 02 FB | 	rdlong	arg01, fp
1193c     0C 4E 85 F1 | 	sub	fp, #12
11940     09 13 52 F6 | 	abs	arg01, arg01 wc
11944     1F 26 C6 C9 |  if_b	decod	local05, #31
11948     00 26 06 36 |  if_ae	mov	local05, #0
1194c     A0 F9 B0 FD | 	call	#__system___float_fromuns
11950     13 FB 61 F5 | 	xor	result1, local05
11954     FD 14 02 F6 | 	mov	arg02, result1
11958     10 13 02 F6 | 	mov	arg01, local02
1195c     01 16 06 F6 | 	mov	arg03, #1
11960     C4 01 B1 FD | 	call	#__system___float_cmp
11964     00 FA 0D F2 | 	cmp	result1, #0 wz
11968     00 1E 26 A6 |  if_e	not	local01, #0
1196c     A7 1E 62 FC | 	wrlong	local01, fp
11970     58 03 90 FD | 	jmp	#LR__1423
11974                 | LR__1412
11974                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
11974     08 4E 05 F1 | 	add	fp, #8
11978     A7 1E 02 FB | 	rdlong	local01, fp
1197c     08 4E 85 F1 | 	sub	fp, #8
11980     1E 1E 0E F2 | 	cmp	local01, #30 wz
11984     14 4E 05 A1 |  if_e	add	fp, #20
11988     A7 24 02 AB |  if_e	rdlong	local04, fp
1198c     14 4E 85 A1 |  if_e	sub	fp, #20
11990     12 23 02 A6 |  if_e	mov	local03, local04
11994     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11998     38 00 90 5D |  if_ne	jmp	#LR__1413
1199c     00 1E 06 F6 | 	mov	local01, #0
119a0     A7 20 02 FB | 	rdlong	local02, fp
119a4     0C 4E 05 F1 | 	add	fp, #12
119a8     A7 12 02 FB | 	rdlong	arg01, fp
119ac     0C 4E 85 F1 | 	sub	fp, #12
119b0     3C F9 B0 FD | 	call	#__system___float_fromuns
119b4     FD 14 02 F6 | 	mov	arg02, result1
119b8     10 13 02 F6 | 	mov	arg01, local02
119bc     01 16 06 F6 | 	mov	arg03, #1
119c0     64 01 B1 FD | 	call	#__system___float_cmp
119c4     00 FA 0D F2 | 	cmp	result1, #0 wz
119c8     00 1E 26 A6 |  if_e	not	local01, #0
119cc     A7 1E 62 FC | 	wrlong	local01, fp
119d0     F8 02 90 FD | 	jmp	#LR__1423
119d4                 | LR__1413
119d4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
119d4     08 4E 05 F1 | 	add	fp, #8
119d8     A7 1E 02 FB | 	rdlong	local01, fp
119dc     08 4E 85 F1 | 	sub	fp, #8
119e0     1C 1E 0E F2 | 	cmp	local01, #28 wz
119e4     14 4E 05 A1 |  if_e	add	fp, #20
119e8     A7 24 02 AB |  if_e	rdlong	local04, fp
119ec     14 4E 85 A1 |  if_e	sub	fp, #20
119f0     12 23 02 A6 |  if_e	mov	local03, local04
119f4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
119f8     44 00 90 5D |  if_ne	jmp	#LR__1414
119fc     00 1E 06 F6 | 	mov	local01, #0
11a00     A7 12 02 FB | 	rdlong	arg01, fp
11a04     09 13 52 F6 | 	abs	arg01, arg01 wc
11a08     1F 26 C6 C9 |  if_b	decod	local05, #31
11a0c     00 26 06 36 |  if_ae	mov	local05, #0
11a10     DC F8 B0 FD | 	call	#__system___float_fromuns
11a14     13 FB 61 F5 | 	xor	result1, local05
11a18     FD 12 02 F6 | 	mov	arg01, result1
11a1c     0C 4E 05 F1 | 	add	fp, #12
11a20     A7 14 02 FB | 	rdlong	arg02, fp
11a24     0C 4E 85 F1 | 	sub	fp, #12
11a28     01 16 06 F6 | 	mov	arg03, #1
11a2c     F8 00 B1 FD | 	call	#__system___float_cmp
11a30     00 FA 0D F2 | 	cmp	result1, #0 wz
11a34     00 1E 26 A6 |  if_e	not	local01, #0
11a38     A7 1E 62 FC | 	wrlong	local01, fp
11a3c     8C 02 90 FD | 	jmp	#LR__1423
11a40                 | LR__1414
11a40                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
11a40     08 4E 05 F1 | 	add	fp, #8
11a44     A7 1E 02 FB | 	rdlong	local01, fp
11a48     08 4E 85 F1 | 	sub	fp, #8
11a4c     1C 1E 0E F2 | 	cmp	local01, #28 wz
11a50     14 4E 05 A1 |  if_e	add	fp, #20
11a54     A7 24 02 AB |  if_e	rdlong	local04, fp
11a58     14 4E 85 A1 |  if_e	sub	fp, #20
11a5c     12 23 02 A6 |  if_e	mov	local03, local04
11a60     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11a64     24 00 90 5D |  if_ne	jmp	#LR__1415
11a68     00 1E 06 F6 | 	mov	local01, #0
11a6c     A7 20 02 FB | 	rdlong	local02, fp
11a70     0C 4E 05 F1 | 	add	fp, #12
11a74     A7 22 02 FB | 	rdlong	local03, fp
11a78     0C 4E 85 F1 | 	sub	fp, #12
11a7c     11 21 0A F2 | 	cmp	local02, local03 wz
11a80     01 1E 66 A6 |  if_e	neg	local01, #1
11a84     A7 1E 62 FC | 	wrlong	local01, fp
11a88     40 02 90 FD | 	jmp	#LR__1423
11a8c                 | LR__1415
11a8c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
11a8c     08 4E 05 F1 | 	add	fp, #8
11a90     A7 1E 02 FB | 	rdlong	local01, fp
11a94     08 4E 85 F1 | 	sub	fp, #8
11a98     1C 1E 0E F2 | 	cmp	local01, #28 wz
11a9c     14 4E 05 A1 |  if_e	add	fp, #20
11aa0     A7 24 02 AB |  if_e	rdlong	local04, fp
11aa4     14 4E 85 A1 |  if_e	sub	fp, #20
11aa8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11aac     24 00 90 5D |  if_ne	jmp	#LR__1416
11ab0     00 1E 06 F6 | 	mov	local01, #0
11ab4     A7 20 02 FB | 	rdlong	local02, fp
11ab8     0C 4E 05 F1 | 	add	fp, #12
11abc     A7 22 02 FB | 	rdlong	local03, fp
11ac0     0C 4E 85 F1 | 	sub	fp, #12
11ac4     11 21 0A F2 | 	cmp	local02, local03 wz
11ac8     01 1E 66 A6 |  if_e	neg	local01, #1
11acc     A7 1E 62 FC | 	wrlong	local01, fp
11ad0     F8 01 90 FD | 	jmp	#LR__1423
11ad4                 | LR__1416
11ad4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
11ad4     08 4E 05 F1 | 	add	fp, #8
11ad8     A7 1E 02 FB | 	rdlong	local01, fp
11adc     08 4E 85 F1 | 	sub	fp, #8
11ae0     1D 1E 0E F2 | 	cmp	local01, #29 wz
11ae4     14 4E 05 A1 |  if_e	add	fp, #20
11ae8     A7 22 02 AB |  if_e	rdlong	local03, fp
11aec     14 4E 85 A1 |  if_e	sub	fp, #20
11af0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11af4     34 00 90 5D |  if_ne	jmp	#LR__1417
11af8     00 1E 06 F6 | 	mov	local01, #0
11afc     A7 12 02 FB | 	rdlong	arg01, fp
11b00     EC F7 B0 FD | 	call	#__system___float_fromuns
11b04     FD 12 02 F6 | 	mov	arg01, result1
11b08     0C 4E 05 F1 | 	add	fp, #12
11b0c     A7 14 02 FB | 	rdlong	arg02, fp
11b10     0C 4E 85 F1 | 	sub	fp, #12
11b14     01 16 06 F6 | 	mov	arg03, #1
11b18     0C 00 B1 FD | 	call	#__system___float_cmp
11b1c     00 FA 0D F2 | 	cmp	result1, #0 wz
11b20     00 1E 26 A6 |  if_e	not	local01, #0
11b24     A7 1E 62 FC | 	wrlong	local01, fp
11b28     A0 01 90 FD | 	jmp	#LR__1423
11b2c                 | LR__1417
11b2c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
11b2c     08 4E 05 F1 | 	add	fp, #8
11b30     A7 1E 02 FB | 	rdlong	local01, fp
11b34     08 4E 85 F1 | 	sub	fp, #8
11b38     1D 1E 0E F2 | 	cmp	local01, #29 wz
11b3c     14 4E 05 A1 |  if_e	add	fp, #20
11b40     A7 22 02 AB |  if_e	rdlong	local03, fp
11b44     14 4E 85 A1 |  if_e	sub	fp, #20
11b48     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11b4c     24 00 90 5D |  if_ne	jmp	#LR__1418
11b50     00 1E 06 F6 | 	mov	local01, #0
11b54     A7 20 02 FB | 	rdlong	local02, fp
11b58     0C 4E 05 F1 | 	add	fp, #12
11b5c     A7 22 02 FB | 	rdlong	local03, fp
11b60     0C 4E 85 F1 | 	sub	fp, #12
11b64     11 21 0A F2 | 	cmp	local02, local03 wz
11b68     01 1E 66 A6 |  if_e	neg	local01, #1
11b6c     A7 1E 62 FC | 	wrlong	local01, fp
11b70     58 01 90 FD | 	jmp	#LR__1423
11b74                 | LR__1418
11b74                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
11b74     08 4E 05 F1 | 	add	fp, #8
11b78     A7 1E 02 FB | 	rdlong	local01, fp
11b7c     08 4E 85 F1 | 	sub	fp, #8
11b80     1D 1E 0E F2 | 	cmp	local01, #29 wz
11b84     14 4E 05 A1 |  if_e	add	fp, #20
11b88     A7 22 02 AB |  if_e	rdlong	local03, fp
11b8c     14 4E 85 A1 |  if_e	sub	fp, #20
11b90     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11b94     24 00 90 5D |  if_ne	jmp	#LR__1419
11b98     00 1E 06 F6 | 	mov	local01, #0
11b9c     A7 20 02 FB | 	rdlong	local02, fp
11ba0     0C 4E 05 F1 | 	add	fp, #12
11ba4     A7 22 02 FB | 	rdlong	local03, fp
11ba8     0C 4E 85 F1 | 	sub	fp, #12
11bac     11 21 0A F2 | 	cmp	local02, local03 wz
11bb0     01 1E 66 A6 |  if_e	neg	local01, #1
11bb4     A7 1E 62 FC | 	wrlong	local01, fp
11bb8     10 01 90 FD | 	jmp	#LR__1423
11bbc                 | LR__1419
11bbc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
11bbc     08 4E 05 F1 | 	add	fp, #8
11bc0     A7 1E 02 FB | 	rdlong	local01, fp
11bc4     08 4E 85 F1 | 	sub	fp, #8
11bc8     2B 1E 0E F2 | 	cmp	local01, #43 wz
11bcc     14 4E 05 A1 |  if_e	add	fp, #20
11bd0     A7 22 02 AB |  if_e	rdlong	local03, fp
11bd4     14 4E 85 A1 |  if_e	sub	fp, #20
11bd8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11bdc     30 00 90 5D |  if_ne	jmp	#LR__1420
11be0     00 1E 06 F6 | 	mov	local01, #0
11be4     A7 12 02 FB | 	rdlong	arg01, fp
11be8     04 D1 BF FD | 	call	#_convertstring
11bec     FD 12 02 F6 | 	mov	arg01, result1
11bf0     0C 4E 05 F1 | 	add	fp, #12
11bf4     A7 14 02 FB | 	rdlong	arg02, fp
11bf8     0C 4E 85 F1 | 	sub	fp, #12
11bfc     9C CF B0 FD | 	call	#__system___string_cmp
11c00     00 FA 0D F2 | 	cmp	result1, #0 wz
11c04     00 1E 26 A6 |  if_e	not	local01, #0
11c08     A7 1E 62 FC | 	wrlong	local01, fp
11c0c     BC 00 90 FD | 	jmp	#LR__1423
11c10                 | LR__1420
11c10                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
11c10     08 4E 05 F1 | 	add	fp, #8
11c14     A7 1E 02 FB | 	rdlong	local01, fp
11c18     08 4E 85 F1 | 	sub	fp, #8
11c1c     1F 1E 0E F2 | 	cmp	local01, #31 wz
11c20     14 4E 05 A1 |  if_e	add	fp, #20
11c24     A7 22 02 AB |  if_e	rdlong	local03, fp
11c28     14 4E 85 A1 |  if_e	sub	fp, #20
11c2c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11c30     34 00 90 5D |  if_ne	jmp	#LR__1421
11c34     00 1E 06 F6 | 	mov	local01, #0
11c38     A7 20 02 FB | 	rdlong	local02, fp
11c3c     0C 4E 05 F1 | 	add	fp, #12
11c40     A7 12 02 FB | 	rdlong	arg01, fp
11c44     0C 4E 85 F1 | 	sub	fp, #12
11c48     A4 D0 BF FD | 	call	#_convertstring
11c4c     FD 14 02 F6 | 	mov	arg02, result1
11c50     10 13 02 F6 | 	mov	arg01, local02
11c54     44 CF B0 FD | 	call	#__system___string_cmp
11c58     00 FA 0D F2 | 	cmp	result1, #0 wz
11c5c     00 1E 26 A6 |  if_e	not	local01, #0
11c60     A7 1E 62 FC | 	wrlong	local01, fp
11c64     64 00 90 FD | 	jmp	#LR__1423
11c68                 | LR__1421
11c68                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
11c68     08 4E 05 F1 | 	add	fp, #8
11c6c     A7 1E 02 FB | 	rdlong	local01, fp
11c70     08 4E 85 F1 | 	sub	fp, #8
11c74     2B 1E 0E F2 | 	cmp	local01, #43 wz
11c78     14 4E 05 A1 |  if_e	add	fp, #20
11c7c     A7 22 02 AB |  if_e	rdlong	local03, fp
11c80     14 4E 85 A1 |  if_e	sub	fp, #20
11c84     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11c88     3C 00 90 5D |  if_ne	jmp	#LR__1422
11c8c     00 1E 06 F6 | 	mov	local01, #0
11c90     A7 12 02 FB | 	rdlong	arg01, fp
11c94     58 D0 BF FD | 	call	#_convertstring
11c98     FD 20 02 F6 | 	mov	local02, result1
11c9c     0C 4E 05 F1 | 	add	fp, #12
11ca0     A7 12 02 FB | 	rdlong	arg01, fp
11ca4     0C 4E 85 F1 | 	sub	fp, #12
11ca8     44 D0 BF FD | 	call	#_convertstring
11cac     FD 14 02 F6 | 	mov	arg02, result1
11cb0     10 13 02 F6 | 	mov	arg01, local02
11cb4     E4 CE B0 FD | 	call	#__system___string_cmp
11cb8     00 FA 0D F2 | 	cmp	result1, #0 wz
11cbc     00 1E 26 A6 |  if_e	not	local01, #0
11cc0     A7 1E 62 FC | 	wrlong	local01, fp
11cc4     04 00 90 FD | 	jmp	#LR__1423
11cc8                 | LR__1422
11cc8     A7 00 68 FC | 	wrlong	#0, fp
11ccc                 | LR__1423
11ccc     08 4E 05 F1 | 	add	fp, #8
11cd0     A7 38 68 FC | 	wrlong	#28, fp
11cd4     08 4E 85 F1 | 	sub	fp, #8
11cd8     A7 12 02 F6 | 	mov	arg01, fp
11cdc     18 8C BF FD | 	call	#_push
11ce0     A7 F0 03 F6 | 	mov	ptra, fp
11ce4     B2 00 A0 FD | 	call	#popregs_
11ce8                 | _do_eq_ret
11ce8     2D 00 64 FD | 	ret
11cec                 | 
11cec                 | ' 
11cec                 | ' sub do_gt
11cec                 | _do_gt
11cec     05 4A 05 F6 | 	mov	COUNT_, #5
11cf0     A8 00 A0 FD | 	call	#pushregs_
11cf4     18 F0 07 F1 | 	add	ptra, #24
11cf8     64 8B BF FD | 	call	#_pop
11cfc     FD 1E 02 F6 | 	mov	local01, result1
11d00     FE 20 02 F6 | 	mov	local02, result2
11d04     FF 22 02 F6 | 	mov	local03, result3
11d08     0C 4E 05 F1 | 	add	fp, #12
11d0c     A7 1E 62 FC | 	wrlong	local01, fp
11d10     04 4E 05 F1 | 	add	fp, #4
11d14     A7 20 62 FC | 	wrlong	local02, fp
11d18     04 4E 05 F1 | 	add	fp, #4
11d1c     A7 22 62 FC | 	wrlong	local03, fp
11d20     14 4E 85 F1 | 	sub	fp, #20
11d24     38 8B BF FD | 	call	#_pop
11d28     FF 22 02 F6 | 	mov	local03, result3
11d2c     A7 FA 61 FC | 	wrlong	result1, fp
11d30     04 4E 05 F1 | 	add	fp, #4
11d34     A7 FC 61 FC | 	wrlong	result2, fp
11d38     04 4E 05 F1 | 	add	fp, #4
11d3c     A7 22 62 FC | 	wrlong	local03, fp
11d40                 | ' t2=pop()
11d40                 | ' t1=pop()
11d40                 | ' 
11d40                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
11d40     08 4E 85 F1 | 	sub	fp, #8
11d44     1F 22 0E F2 | 	cmp	local03, #31 wz
11d48     14 4E 05 A1 |  if_e	add	fp, #20
11d4c     A7 24 02 AB |  if_e	rdlong	local04, fp
11d50     14 4E 85 A1 |  if_e	sub	fp, #20
11d54     12 23 02 A6 |  if_e	mov	local03, local04
11d58     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11d5c     28 00 90 5D |  if_ne	jmp	#LR__1430
11d60     00 1E 06 F6 | 	mov	local01, #0
11d64     A7 12 02 FB | 	rdlong	arg01, fp
11d68     0C 4E 05 F1 | 	add	fp, #12
11d6c     A7 14 02 FB | 	rdlong	arg02, fp
11d70     0C 4E 85 F1 | 	sub	fp, #12
11d74     24 CE B0 FD | 	call	#__system___string_cmp
11d78     01 FA 55 F2 | 	cmps	result1, #1 wc
11d7c     00 1E 26 36 |  if_ae	not	local01, #0
11d80     A7 1E 62 FC | 	wrlong	local01, fp
11d84     1C 04 90 FD | 	jmp	#LR__1443
11d88                 | LR__1430
11d88                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
11d88     08 4E 05 F1 | 	add	fp, #8
11d8c     A7 1E 02 FB | 	rdlong	local01, fp
11d90     08 4E 85 F1 | 	sub	fp, #8
11d94     1E 1E 0E F2 | 	cmp	local01, #30 wz
11d98     14 4E 05 A1 |  if_e	add	fp, #20
11d9c     A7 24 02 AB |  if_e	rdlong	local04, fp
11da0     14 4E 85 A1 |  if_e	sub	fp, #20
11da4     12 23 02 A6 |  if_e	mov	local03, local04
11da8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11dac     2C 00 90 5D |  if_ne	jmp	#LR__1431
11db0     00 1E 06 F6 | 	mov	local01, #0
11db4     A7 12 02 FB | 	rdlong	arg01, fp
11db8     0C 4E 05 F1 | 	add	fp, #12
11dbc     A7 14 02 FB | 	rdlong	arg02, fp
11dc0     0C 4E 85 F1 | 	sub	fp, #12
11dc4     01 16 66 F6 | 	neg	arg03, #1
11dc8     5C FD B0 FD | 	call	#__system___float_cmp
11dcc     01 FA 55 F2 | 	cmps	result1, #1 wc
11dd0     00 1E 26 36 |  if_ae	not	local01, #0
11dd4     A7 1E 62 FC | 	wrlong	local01, fp
11dd8     C8 03 90 FD | 	jmp	#LR__1443
11ddc                 | LR__1431
11ddc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
11ddc     08 4E 05 F1 | 	add	fp, #8
11de0     A7 1E 02 FB | 	rdlong	local01, fp
11de4     08 4E 85 F1 | 	sub	fp, #8
11de8     1E 1E 0E F2 | 	cmp	local01, #30 wz
11dec     14 4E 05 A1 |  if_e	add	fp, #20
11df0     A7 24 02 AB |  if_e	rdlong	local04, fp
11df4     14 4E 85 A1 |  if_e	sub	fp, #20
11df8     12 23 02 A6 |  if_e	mov	local03, local04
11dfc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11e00     48 00 90 5D |  if_ne	jmp	#LR__1432
11e04     00 1E 06 F6 | 	mov	local01, #0
11e08     A7 20 02 FB | 	rdlong	local02, fp
11e0c     0C 4E 05 F1 | 	add	fp, #12
11e10     A7 12 02 FB | 	rdlong	arg01, fp
11e14     0C 4E 85 F1 | 	sub	fp, #12
11e18     09 13 52 F6 | 	abs	arg01, arg01 wc
11e1c     1F 26 C6 C9 |  if_b	decod	local05, #31
11e20     00 26 06 36 |  if_ae	mov	local05, #0
11e24     C8 F4 B0 FD | 	call	#__system___float_fromuns
11e28     13 FB 61 F5 | 	xor	result1, local05
11e2c     FD 14 02 F6 | 	mov	arg02, result1
11e30     10 13 02 F6 | 	mov	arg01, local02
11e34     01 16 66 F6 | 	neg	arg03, #1
11e38     EC FC B0 FD | 	call	#__system___float_cmp
11e3c     01 FA 55 F2 | 	cmps	result1, #1 wc
11e40     00 1E 26 36 |  if_ae	not	local01, #0
11e44     A7 1E 62 FC | 	wrlong	local01, fp
11e48     58 03 90 FD | 	jmp	#LR__1443
11e4c                 | LR__1432
11e4c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
11e4c     08 4E 05 F1 | 	add	fp, #8
11e50     A7 1E 02 FB | 	rdlong	local01, fp
11e54     08 4E 85 F1 | 	sub	fp, #8
11e58     1E 1E 0E F2 | 	cmp	local01, #30 wz
11e5c     14 4E 05 A1 |  if_e	add	fp, #20
11e60     A7 24 02 AB |  if_e	rdlong	local04, fp
11e64     14 4E 85 A1 |  if_e	sub	fp, #20
11e68     12 23 02 A6 |  if_e	mov	local03, local04
11e6c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11e70     38 00 90 5D |  if_ne	jmp	#LR__1433
11e74     00 1E 06 F6 | 	mov	local01, #0
11e78     A7 20 02 FB | 	rdlong	local02, fp
11e7c     0C 4E 05 F1 | 	add	fp, #12
11e80     A7 12 02 FB | 	rdlong	arg01, fp
11e84     0C 4E 85 F1 | 	sub	fp, #12
11e88     64 F4 B0 FD | 	call	#__system___float_fromuns
11e8c     FD 14 02 F6 | 	mov	arg02, result1
11e90     10 13 02 F6 | 	mov	arg01, local02
11e94     01 16 66 F6 | 	neg	arg03, #1
11e98     8C FC B0 FD | 	call	#__system___float_cmp
11e9c     01 FA 55 F2 | 	cmps	result1, #1 wc
11ea0     00 1E 26 36 |  if_ae	not	local01, #0
11ea4     A7 1E 62 FC | 	wrlong	local01, fp
11ea8     F8 02 90 FD | 	jmp	#LR__1443
11eac                 | LR__1433
11eac                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
11eac     08 4E 05 F1 | 	add	fp, #8
11eb0     A7 1E 02 FB | 	rdlong	local01, fp
11eb4     08 4E 85 F1 | 	sub	fp, #8
11eb8     1C 1E 0E F2 | 	cmp	local01, #28 wz
11ebc     14 4E 05 A1 |  if_e	add	fp, #20
11ec0     A7 24 02 AB |  if_e	rdlong	local04, fp
11ec4     14 4E 85 A1 |  if_e	sub	fp, #20
11ec8     12 23 02 A6 |  if_e	mov	local03, local04
11ecc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11ed0     44 00 90 5D |  if_ne	jmp	#LR__1434
11ed4     00 1E 06 F6 | 	mov	local01, #0
11ed8     A7 12 02 FB | 	rdlong	arg01, fp
11edc     09 13 52 F6 | 	abs	arg01, arg01 wc
11ee0     1F 26 C6 C9 |  if_b	decod	local05, #31
11ee4     00 26 06 36 |  if_ae	mov	local05, #0
11ee8     04 F4 B0 FD | 	call	#__system___float_fromuns
11eec     13 FB 61 F5 | 	xor	result1, local05
11ef0     FD 12 02 F6 | 	mov	arg01, result1
11ef4     0C 4E 05 F1 | 	add	fp, #12
11ef8     A7 14 02 FB | 	rdlong	arg02, fp
11efc     0C 4E 85 F1 | 	sub	fp, #12
11f00     01 16 66 F6 | 	neg	arg03, #1
11f04     20 FC B0 FD | 	call	#__system___float_cmp
11f08     01 FA 55 F2 | 	cmps	result1, #1 wc
11f0c     00 1E 26 36 |  if_ae	not	local01, #0
11f10     A7 1E 62 FC | 	wrlong	local01, fp
11f14     8C 02 90 FD | 	jmp	#LR__1443
11f18                 | LR__1434
11f18                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
11f18     08 4E 05 F1 | 	add	fp, #8
11f1c     A7 1E 02 FB | 	rdlong	local01, fp
11f20     08 4E 85 F1 | 	sub	fp, #8
11f24     1C 1E 0E F2 | 	cmp	local01, #28 wz
11f28     14 4E 05 A1 |  if_e	add	fp, #20
11f2c     A7 24 02 AB |  if_e	rdlong	local04, fp
11f30     14 4E 85 A1 |  if_e	sub	fp, #20
11f34     12 23 02 A6 |  if_e	mov	local03, local04
11f38     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11f3c     24 00 90 5D |  if_ne	jmp	#LR__1435
11f40     00 1E 06 F6 | 	mov	local01, #0
11f44     A7 20 02 FB | 	rdlong	local02, fp
11f48     0C 4E 05 F1 | 	add	fp, #12
11f4c     A7 22 02 FB | 	rdlong	local03, fp
11f50     0C 4E 85 F1 | 	sub	fp, #12
11f54     11 21 5A F2 | 	cmps	local02, local03 wcz
11f58     01 1E 66 16 |  if_a	neg	local01, #1
11f5c     A7 1E 62 FC | 	wrlong	local01, fp
11f60     40 02 90 FD | 	jmp	#LR__1443
11f64                 | LR__1435
11f64                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
11f64     08 4E 05 F1 | 	add	fp, #8
11f68     A7 1E 02 FB | 	rdlong	local01, fp
11f6c     08 4E 85 F1 | 	sub	fp, #8
11f70     1C 1E 0E F2 | 	cmp	local01, #28 wz
11f74     14 4E 05 A1 |  if_e	add	fp, #20
11f78     A7 24 02 AB |  if_e	rdlong	local04, fp
11f7c     14 4E 85 A1 |  if_e	sub	fp, #20
11f80     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11f84     24 00 90 5D |  if_ne	jmp	#LR__1436
11f88     00 1E 06 F6 | 	mov	local01, #0
11f8c     A7 20 02 FB | 	rdlong	local02, fp
11f90     0C 4E 05 F1 | 	add	fp, #12
11f94     A7 22 02 FB | 	rdlong	local03, fp
11f98     0C 4E 85 F1 | 	sub	fp, #12
11f9c     11 21 5A F2 | 	cmps	local02, local03 wcz
11fa0     01 1E 66 16 |  if_a	neg	local01, #1
11fa4     A7 1E 62 FC | 	wrlong	local01, fp
11fa8     F8 01 90 FD | 	jmp	#LR__1443
11fac                 | LR__1436
11fac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
11fac     08 4E 05 F1 | 	add	fp, #8
11fb0     A7 1E 02 FB | 	rdlong	local01, fp
11fb4     08 4E 85 F1 | 	sub	fp, #8
11fb8     1D 1E 0E F2 | 	cmp	local01, #29 wz
11fbc     14 4E 05 A1 |  if_e	add	fp, #20
11fc0     A7 22 02 AB |  if_e	rdlong	local03, fp
11fc4     14 4E 85 A1 |  if_e	sub	fp, #20
11fc8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11fcc     34 00 90 5D |  if_ne	jmp	#LR__1437
11fd0     00 1E 06 F6 | 	mov	local01, #0
11fd4     A7 12 02 FB | 	rdlong	arg01, fp
11fd8     14 F3 B0 FD | 	call	#__system___float_fromuns
11fdc     FD 12 02 F6 | 	mov	arg01, result1
11fe0     0C 4E 05 F1 | 	add	fp, #12
11fe4     A7 14 02 FB | 	rdlong	arg02, fp
11fe8     0C 4E 85 F1 | 	sub	fp, #12
11fec     01 16 66 F6 | 	neg	arg03, #1
11ff0     34 FB B0 FD | 	call	#__system___float_cmp
11ff4     01 FA 55 F2 | 	cmps	result1, #1 wc
11ff8     00 1E 26 36 |  if_ae	not	local01, #0
11ffc     A7 1E 62 FC | 	wrlong	local01, fp
12000     A0 01 90 FD | 	jmp	#LR__1443
12004                 | LR__1437
12004                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
12004     08 4E 05 F1 | 	add	fp, #8
12008     A7 1E 02 FB | 	rdlong	local01, fp
1200c     08 4E 85 F1 | 	sub	fp, #8
12010     1D 1E 0E F2 | 	cmp	local01, #29 wz
12014     14 4E 05 A1 |  if_e	add	fp, #20
12018     A7 22 02 AB |  if_e	rdlong	local03, fp
1201c     14 4E 85 A1 |  if_e	sub	fp, #20
12020     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12024     24 00 90 5D |  if_ne	jmp	#LR__1438
12028     00 1E 06 F6 | 	mov	local01, #0
1202c     A7 20 02 FB | 	rdlong	local02, fp
12030     0C 4E 05 F1 | 	add	fp, #12
12034     A7 22 02 FB | 	rdlong	local03, fp
12038     0C 4E 85 F1 | 	sub	fp, #12
1203c     11 21 5A F2 | 	cmps	local02, local03 wcz
12040     01 1E 66 16 |  if_a	neg	local01, #1
12044     A7 1E 62 FC | 	wrlong	local01, fp
12048     58 01 90 FD | 	jmp	#LR__1443
1204c                 | LR__1438
1204c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1204c     08 4E 05 F1 | 	add	fp, #8
12050     A7 1E 02 FB | 	rdlong	local01, fp
12054     08 4E 85 F1 | 	sub	fp, #8
12058     1D 1E 0E F2 | 	cmp	local01, #29 wz
1205c     14 4E 05 A1 |  if_e	add	fp, #20
12060     A7 22 02 AB |  if_e	rdlong	local03, fp
12064     14 4E 85 A1 |  if_e	sub	fp, #20
12068     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1206c     24 00 90 5D |  if_ne	jmp	#LR__1439
12070     00 1E 06 F6 | 	mov	local01, #0
12074     A7 20 02 FB | 	rdlong	local02, fp
12078     0C 4E 05 F1 | 	add	fp, #12
1207c     A7 22 02 FB | 	rdlong	local03, fp
12080     0C 4E 85 F1 | 	sub	fp, #12
12084     11 21 1A F2 | 	cmp	local02, local03 wcz
12088     01 1E 66 16 |  if_a	neg	local01, #1
1208c     A7 1E 62 FC | 	wrlong	local01, fp
12090     10 01 90 FD | 	jmp	#LR__1443
12094                 | LR__1439
12094                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
12094     08 4E 05 F1 | 	add	fp, #8
12098     A7 1E 02 FB | 	rdlong	local01, fp
1209c     08 4E 85 F1 | 	sub	fp, #8
120a0     2B 1E 0E F2 | 	cmp	local01, #43 wz
120a4     14 4E 05 A1 |  if_e	add	fp, #20
120a8     A7 22 02 AB |  if_e	rdlong	local03, fp
120ac     14 4E 85 A1 |  if_e	sub	fp, #20
120b0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
120b4     30 00 90 5D |  if_ne	jmp	#LR__1440
120b8     00 1E 06 F6 | 	mov	local01, #0
120bc     A7 12 02 FB | 	rdlong	arg01, fp
120c0     2C CC BF FD | 	call	#_convertstring
120c4     FD 12 02 F6 | 	mov	arg01, result1
120c8     0C 4E 05 F1 | 	add	fp, #12
120cc     A7 14 02 FB | 	rdlong	arg02, fp
120d0     0C 4E 85 F1 | 	sub	fp, #12
120d4     C4 CA B0 FD | 	call	#__system___string_cmp
120d8     01 FA 55 F2 | 	cmps	result1, #1 wc
120dc     00 1E 26 36 |  if_ae	not	local01, #0
120e0     A7 1E 62 FC | 	wrlong	local01, fp
120e4     BC 00 90 FD | 	jmp	#LR__1443
120e8                 | LR__1440
120e8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
120e8     08 4E 05 F1 | 	add	fp, #8
120ec     A7 1E 02 FB | 	rdlong	local01, fp
120f0     08 4E 85 F1 | 	sub	fp, #8
120f4     1F 1E 0E F2 | 	cmp	local01, #31 wz
120f8     14 4E 05 A1 |  if_e	add	fp, #20
120fc     A7 22 02 AB |  if_e	rdlong	local03, fp
12100     14 4E 85 A1 |  if_e	sub	fp, #20
12104     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12108     34 00 90 5D |  if_ne	jmp	#LR__1441
1210c     00 1E 06 F6 | 	mov	local01, #0
12110     A7 20 02 FB | 	rdlong	local02, fp
12114     0C 4E 05 F1 | 	add	fp, #12
12118     A7 12 02 FB | 	rdlong	arg01, fp
1211c     0C 4E 85 F1 | 	sub	fp, #12
12120     CC CB BF FD | 	call	#_convertstring
12124     FD 14 02 F6 | 	mov	arg02, result1
12128     10 13 02 F6 | 	mov	arg01, local02
1212c     6C CA B0 FD | 	call	#__system___string_cmp
12130     01 FA 55 F2 | 	cmps	result1, #1 wc
12134     00 1E 26 36 |  if_ae	not	local01, #0
12138     A7 1E 62 FC | 	wrlong	local01, fp
1213c     64 00 90 FD | 	jmp	#LR__1443
12140                 | LR__1441
12140                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
12140     08 4E 05 F1 | 	add	fp, #8
12144     A7 1E 02 FB | 	rdlong	local01, fp
12148     08 4E 85 F1 | 	sub	fp, #8
1214c     2B 1E 0E F2 | 	cmp	local01, #43 wz
12150     14 4E 05 A1 |  if_e	add	fp, #20
12154     A7 22 02 AB |  if_e	rdlong	local03, fp
12158     14 4E 85 A1 |  if_e	sub	fp, #20
1215c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12160     3C 00 90 5D |  if_ne	jmp	#LR__1442
12164     00 1E 06 F6 | 	mov	local01, #0
12168     A7 12 02 FB | 	rdlong	arg01, fp
1216c     80 CB BF FD | 	call	#_convertstring
12170     FD 20 02 F6 | 	mov	local02, result1
12174     0C 4E 05 F1 | 	add	fp, #12
12178     A7 12 02 FB | 	rdlong	arg01, fp
1217c     0C 4E 85 F1 | 	sub	fp, #12
12180     6C CB BF FD | 	call	#_convertstring
12184     FD 14 02 F6 | 	mov	arg02, result1
12188     10 13 02 F6 | 	mov	arg01, local02
1218c     0C CA B0 FD | 	call	#__system___string_cmp
12190     01 FA 55 F2 | 	cmps	result1, #1 wc
12194     00 1E 26 36 |  if_ae	not	local01, #0
12198     A7 1E 62 FC | 	wrlong	local01, fp
1219c     04 00 90 FD | 	jmp	#LR__1443
121a0                 | LR__1442
121a0     A7 00 68 FC | 	wrlong	#0, fp
121a4                 | LR__1443
121a4     08 4E 05 F1 | 	add	fp, #8
121a8     A7 38 68 FC | 	wrlong	#28, fp
121ac     08 4E 85 F1 | 	sub	fp, #8
121b0     A7 12 02 F6 | 	mov	arg01, fp
121b4     40 87 BF FD | 	call	#_push
121b8     A7 F0 03 F6 | 	mov	ptra, fp
121bc     B2 00 A0 FD | 	call	#popregs_
121c0                 | _do_gt_ret
121c0     2D 00 64 FD | 	ret
121c4                 | 
121c4                 | ' 
121c4                 | ' sub do_lt
121c4                 | _do_lt
121c4     05 4A 05 F6 | 	mov	COUNT_, #5
121c8     A8 00 A0 FD | 	call	#pushregs_
121cc     18 F0 07 F1 | 	add	ptra, #24
121d0     8C 86 BF FD | 	call	#_pop
121d4     FD 1E 02 F6 | 	mov	local01, result1
121d8     FE 20 02 F6 | 	mov	local02, result2
121dc     FF 22 02 F6 | 	mov	local03, result3
121e0     0C 4E 05 F1 | 	add	fp, #12
121e4     A7 1E 62 FC | 	wrlong	local01, fp
121e8     04 4E 05 F1 | 	add	fp, #4
121ec     A7 20 62 FC | 	wrlong	local02, fp
121f0     04 4E 05 F1 | 	add	fp, #4
121f4     A7 22 62 FC | 	wrlong	local03, fp
121f8     14 4E 85 F1 | 	sub	fp, #20
121fc     60 86 BF FD | 	call	#_pop
12200     FF 22 02 F6 | 	mov	local03, result3
12204     A7 FA 61 FC | 	wrlong	result1, fp
12208     04 4E 05 F1 | 	add	fp, #4
1220c     A7 FC 61 FC | 	wrlong	result2, fp
12210     04 4E 05 F1 | 	add	fp, #4
12214     A7 22 62 FC | 	wrlong	local03, fp
12218                 | ' t2=pop()
12218                 | ' t1=pop()
12218                 | ' 
12218                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
12218     08 4E 85 F1 | 	sub	fp, #8
1221c     1F 22 0E F2 | 	cmp	local03, #31 wz
12220     14 4E 05 A1 |  if_e	add	fp, #20
12224     A7 24 02 AB |  if_e	rdlong	local04, fp
12228     14 4E 85 A1 |  if_e	sub	fp, #20
1222c     12 23 02 A6 |  if_e	mov	local03, local04
12230     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12234     28 00 90 5D |  if_ne	jmp	#LR__1450
12238     00 1E 06 F6 | 	mov	local01, #0
1223c     A7 12 02 FB | 	rdlong	arg01, fp
12240     0C 4E 05 F1 | 	add	fp, #12
12244     A7 14 02 FB | 	rdlong	arg02, fp
12248     0C 4E 85 F1 | 	sub	fp, #12
1224c     4C C9 B0 FD | 	call	#__system___string_cmp
12250     00 FA 55 F2 | 	cmps	result1, #0 wc
12254     00 1E 26 C6 |  if_b	not	local01, #0
12258     A7 1E 62 FC | 	wrlong	local01, fp
1225c     0C 04 90 FD | 	jmp	#LR__1463
12260                 | LR__1450
12260                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
12260     08 4E 05 F1 | 	add	fp, #8
12264     A7 1E 02 FB | 	rdlong	local01, fp
12268     08 4E 85 F1 | 	sub	fp, #8
1226c     1E 1E 0E F2 | 	cmp	local01, #30 wz
12270     14 4E 05 A1 |  if_e	add	fp, #20
12274     A7 24 02 AB |  if_e	rdlong	local04, fp
12278     14 4E 85 A1 |  if_e	sub	fp, #20
1227c     12 23 02 A6 |  if_e	mov	local03, local04
12280     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12284     2C 00 90 5D |  if_ne	jmp	#LR__1451
12288     00 1E 06 F6 | 	mov	local01, #0
1228c     A7 12 02 FB | 	rdlong	arg01, fp
12290     0C 4E 05 F1 | 	add	fp, #12
12294     A7 14 02 FB | 	rdlong	arg02, fp
12298     0C 4E 85 F1 | 	sub	fp, #12
1229c     01 16 06 F6 | 	mov	arg03, #1
122a0     84 F8 B0 FD | 	call	#__system___float_cmp
122a4     00 FA 55 F2 | 	cmps	result1, #0 wc
122a8     00 1E 26 C6 |  if_b	not	local01, #0
122ac     A7 1E 62 FC | 	wrlong	local01, fp
122b0     B8 03 90 FD | 	jmp	#LR__1463
122b4                 | LR__1451
122b4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
122b4     08 4E 05 F1 | 	add	fp, #8
122b8     A7 1E 02 FB | 	rdlong	local01, fp
122bc     08 4E 85 F1 | 	sub	fp, #8
122c0     1E 1E 0E F2 | 	cmp	local01, #30 wz
122c4     14 4E 05 A1 |  if_e	add	fp, #20
122c8     A7 24 02 AB |  if_e	rdlong	local04, fp
122cc     14 4E 85 A1 |  if_e	sub	fp, #20
122d0     12 23 02 A6 |  if_e	mov	local03, local04
122d4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
122d8     48 00 90 5D |  if_ne	jmp	#LR__1452
122dc     00 1E 06 F6 | 	mov	local01, #0
122e0     A7 20 02 FB | 	rdlong	local02, fp
122e4     0C 4E 05 F1 | 	add	fp, #12
122e8     A7 12 02 FB | 	rdlong	arg01, fp
122ec     0C 4E 85 F1 | 	sub	fp, #12
122f0     09 13 52 F6 | 	abs	arg01, arg01 wc
122f4     1F 26 C6 C9 |  if_b	decod	local05, #31
122f8     00 26 06 36 |  if_ae	mov	local05, #0
122fc     F0 EF B0 FD | 	call	#__system___float_fromuns
12300     13 FB 61 F5 | 	xor	result1, local05
12304     FD 14 02 F6 | 	mov	arg02, result1
12308     10 13 02 F6 | 	mov	arg01, local02
1230c     01 16 06 F6 | 	mov	arg03, #1
12310     14 F8 B0 FD | 	call	#__system___float_cmp
12314     00 FA 55 F2 | 	cmps	result1, #0 wc
12318     00 1E 26 C6 |  if_b	not	local01, #0
1231c     A7 1E 62 FC | 	wrlong	local01, fp
12320     48 03 90 FD | 	jmp	#LR__1463
12324                 | LR__1452
12324                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
12324     08 4E 05 F1 | 	add	fp, #8
12328     A7 1E 02 FB | 	rdlong	local01, fp
1232c     08 4E 85 F1 | 	sub	fp, #8
12330     1E 1E 0E F2 | 	cmp	local01, #30 wz
12334     14 4E 05 A1 |  if_e	add	fp, #20
12338     A7 24 02 AB |  if_e	rdlong	local04, fp
1233c     14 4E 85 A1 |  if_e	sub	fp, #20
12340     12 23 02 A6 |  if_e	mov	local03, local04
12344     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12348     38 00 90 5D |  if_ne	jmp	#LR__1453
1234c     00 1E 06 F6 | 	mov	local01, #0
12350     A7 20 02 FB | 	rdlong	local02, fp
12354     0C 4E 05 F1 | 	add	fp, #12
12358     A7 12 02 FB | 	rdlong	arg01, fp
1235c     0C 4E 85 F1 | 	sub	fp, #12
12360     8C EF B0 FD | 	call	#__system___float_fromuns
12364     FD 14 02 F6 | 	mov	arg02, result1
12368     10 13 02 F6 | 	mov	arg01, local02
1236c     01 16 06 F6 | 	mov	arg03, #1
12370     B4 F7 B0 FD | 	call	#__system___float_cmp
12374     00 FA 55 F2 | 	cmps	result1, #0 wc
12378     00 1E 26 C6 |  if_b	not	local01, #0
1237c     A7 1E 62 FC | 	wrlong	local01, fp
12380     E8 02 90 FD | 	jmp	#LR__1463
12384                 | LR__1453
12384                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
12384     08 4E 05 F1 | 	add	fp, #8
12388     A7 1E 02 FB | 	rdlong	local01, fp
1238c     08 4E 85 F1 | 	sub	fp, #8
12390     1C 1E 0E F2 | 	cmp	local01, #28 wz
12394     14 4E 05 A1 |  if_e	add	fp, #20
12398     A7 24 02 AB |  if_e	rdlong	local04, fp
1239c     14 4E 85 A1 |  if_e	sub	fp, #20
123a0     12 23 02 A6 |  if_e	mov	local03, local04
123a4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
123a8     44 00 90 5D |  if_ne	jmp	#LR__1454
123ac     00 1E 06 F6 | 	mov	local01, #0
123b0     A7 12 02 FB | 	rdlong	arg01, fp
123b4     09 13 52 F6 | 	abs	arg01, arg01 wc
123b8     1F 26 C6 C9 |  if_b	decod	local05, #31
123bc     00 26 06 36 |  if_ae	mov	local05, #0
123c0     2C EF B0 FD | 	call	#__system___float_fromuns
123c4     13 FB 61 F5 | 	xor	result1, local05
123c8     FD 12 02 F6 | 	mov	arg01, result1
123cc     0C 4E 05 F1 | 	add	fp, #12
123d0     A7 14 02 FB | 	rdlong	arg02, fp
123d4     0C 4E 85 F1 | 	sub	fp, #12
123d8     01 16 06 F6 | 	mov	arg03, #1
123dc     48 F7 B0 FD | 	call	#__system___float_cmp
123e0     00 FA 55 F2 | 	cmps	result1, #0 wc
123e4     00 1E 26 C6 |  if_b	not	local01, #0
123e8     A7 1E 62 FC | 	wrlong	local01, fp
123ec     7C 02 90 FD | 	jmp	#LR__1463
123f0                 | LR__1454
123f0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
123f0     08 4E 05 F1 | 	add	fp, #8
123f4     A7 1E 02 FB | 	rdlong	local01, fp
123f8     08 4E 85 F1 | 	sub	fp, #8
123fc     1C 1E 0E F2 | 	cmp	local01, #28 wz
12400     14 4E 05 A1 |  if_e	add	fp, #20
12404     A7 24 02 AB |  if_e	rdlong	local04, fp
12408     14 4E 85 A1 |  if_e	sub	fp, #20
1240c     12 23 02 A6 |  if_e	mov	local03, local04
12410     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12414     20 00 90 5D |  if_ne	jmp	#LR__1455
12418     A7 20 02 FB | 	rdlong	local02, fp
1241c     0C 4E 05 F1 | 	add	fp, #12
12420     A7 22 02 FB | 	rdlong	local03, fp
12424     0C 4E 85 F1 | 	sub	fp, #12
12428     11 21 52 F2 | 	cmps	local02, local03 wc
1242c     0F 1F A2 F1 | 	subx	local01, local01
12430     A7 1E 62 FC | 	wrlong	local01, fp
12434     34 02 90 FD | 	jmp	#LR__1463
12438                 | LR__1455
12438                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
12438     08 4E 05 F1 | 	add	fp, #8
1243c     A7 1E 02 FB | 	rdlong	local01, fp
12440     08 4E 85 F1 | 	sub	fp, #8
12444     1C 1E 0E F2 | 	cmp	local01, #28 wz
12448     14 4E 05 A1 |  if_e	add	fp, #20
1244c     A7 24 02 AB |  if_e	rdlong	local04, fp
12450     14 4E 85 A1 |  if_e	sub	fp, #20
12454     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12458     20 00 90 5D |  if_ne	jmp	#LR__1456
1245c     A7 20 02 FB | 	rdlong	local02, fp
12460     0C 4E 05 F1 | 	add	fp, #12
12464     A7 22 02 FB | 	rdlong	local03, fp
12468     0C 4E 85 F1 | 	sub	fp, #12
1246c     11 21 52 F2 | 	cmps	local02, local03 wc
12470     0F 1F A2 F1 | 	subx	local01, local01
12474     A7 1E 62 FC | 	wrlong	local01, fp
12478     F0 01 90 FD | 	jmp	#LR__1463
1247c                 | LR__1456
1247c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1247c     08 4E 05 F1 | 	add	fp, #8
12480     A7 1E 02 FB | 	rdlong	local01, fp
12484     08 4E 85 F1 | 	sub	fp, #8
12488     1D 1E 0E F2 | 	cmp	local01, #29 wz
1248c     14 4E 05 A1 |  if_e	add	fp, #20
12490     A7 22 02 AB |  if_e	rdlong	local03, fp
12494     14 4E 85 A1 |  if_e	sub	fp, #20
12498     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1249c     34 00 90 5D |  if_ne	jmp	#LR__1457
124a0     00 1E 06 F6 | 	mov	local01, #0
124a4     A7 12 02 FB | 	rdlong	arg01, fp
124a8     44 EE B0 FD | 	call	#__system___float_fromuns
124ac     FD 12 02 F6 | 	mov	arg01, result1
124b0     0C 4E 05 F1 | 	add	fp, #12
124b4     A7 14 02 FB | 	rdlong	arg02, fp
124b8     0C 4E 85 F1 | 	sub	fp, #12
124bc     01 16 06 F6 | 	mov	arg03, #1
124c0     64 F6 B0 FD | 	call	#__system___float_cmp
124c4     00 FA 55 F2 | 	cmps	result1, #0 wc
124c8     00 1E 26 C6 |  if_b	not	local01, #0
124cc     A7 1E 62 FC | 	wrlong	local01, fp
124d0     98 01 90 FD | 	jmp	#LR__1463
124d4                 | LR__1457
124d4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
124d4     08 4E 05 F1 | 	add	fp, #8
124d8     A7 1E 02 FB | 	rdlong	local01, fp
124dc     08 4E 85 F1 | 	sub	fp, #8
124e0     1D 1E 0E F2 | 	cmp	local01, #29 wz
124e4     14 4E 05 A1 |  if_e	add	fp, #20
124e8     A7 22 02 AB |  if_e	rdlong	local03, fp
124ec     14 4E 85 A1 |  if_e	sub	fp, #20
124f0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
124f4     20 00 90 5D |  if_ne	jmp	#LR__1458
124f8     A7 20 02 FB | 	rdlong	local02, fp
124fc     0C 4E 05 F1 | 	add	fp, #12
12500     A7 22 02 FB | 	rdlong	local03, fp
12504     0C 4E 85 F1 | 	sub	fp, #12
12508     11 21 52 F2 | 	cmps	local02, local03 wc
1250c     0F 1F A2 F1 | 	subx	local01, local01
12510     A7 1E 62 FC | 	wrlong	local01, fp
12514     54 01 90 FD | 	jmp	#LR__1463
12518                 | LR__1458
12518                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
12518     08 4E 05 F1 | 	add	fp, #8
1251c     A7 1E 02 FB | 	rdlong	local01, fp
12520     08 4E 85 F1 | 	sub	fp, #8
12524     1D 1E 0E F2 | 	cmp	local01, #29 wz
12528     14 4E 05 A1 |  if_e	add	fp, #20
1252c     A7 22 02 AB |  if_e	rdlong	local03, fp
12530     14 4E 85 A1 |  if_e	sub	fp, #20
12534     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12538     20 00 90 5D |  if_ne	jmp	#LR__1459
1253c     A7 20 02 FB | 	rdlong	local02, fp
12540     0C 4E 05 F1 | 	add	fp, #12
12544     A7 22 02 FB | 	rdlong	local03, fp
12548     0C 4E 85 F1 | 	sub	fp, #12
1254c     11 21 12 F2 | 	cmp	local02, local03 wc
12550     0F 1F A2 F1 | 	subx	local01, local01
12554     A7 1E 62 FC | 	wrlong	local01, fp
12558     10 01 90 FD | 	jmp	#LR__1463
1255c                 | LR__1459
1255c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1255c     08 4E 05 F1 | 	add	fp, #8
12560     A7 1E 02 FB | 	rdlong	local01, fp
12564     08 4E 85 F1 | 	sub	fp, #8
12568     2B 1E 0E F2 | 	cmp	local01, #43 wz
1256c     14 4E 05 A1 |  if_e	add	fp, #20
12570     A7 22 02 AB |  if_e	rdlong	local03, fp
12574     14 4E 85 A1 |  if_e	sub	fp, #20
12578     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1257c     30 00 90 5D |  if_ne	jmp	#LR__1460
12580     00 1E 06 F6 | 	mov	local01, #0
12584     A7 12 02 FB | 	rdlong	arg01, fp
12588     64 C7 BF FD | 	call	#_convertstring
1258c     FD 12 02 F6 | 	mov	arg01, result1
12590     0C 4E 05 F1 | 	add	fp, #12
12594     A7 14 02 FB | 	rdlong	arg02, fp
12598     0C 4E 85 F1 | 	sub	fp, #12
1259c     FC C5 B0 FD | 	call	#__system___string_cmp
125a0     00 FA 55 F2 | 	cmps	result1, #0 wc
125a4     00 1E 26 C6 |  if_b	not	local01, #0
125a8     A7 1E 62 FC | 	wrlong	local01, fp
125ac     BC 00 90 FD | 	jmp	#LR__1463
125b0                 | LR__1460
125b0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
125b0     08 4E 05 F1 | 	add	fp, #8
125b4     A7 1E 02 FB | 	rdlong	local01, fp
125b8     08 4E 85 F1 | 	sub	fp, #8
125bc     1F 1E 0E F2 | 	cmp	local01, #31 wz
125c0     14 4E 05 A1 |  if_e	add	fp, #20
125c4     A7 22 02 AB |  if_e	rdlong	local03, fp
125c8     14 4E 85 A1 |  if_e	sub	fp, #20
125cc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
125d0     34 00 90 5D |  if_ne	jmp	#LR__1461
125d4     00 1E 06 F6 | 	mov	local01, #0
125d8     A7 20 02 FB | 	rdlong	local02, fp
125dc     0C 4E 05 F1 | 	add	fp, #12
125e0     A7 12 02 FB | 	rdlong	arg01, fp
125e4     0C 4E 85 F1 | 	sub	fp, #12
125e8     04 C7 BF FD | 	call	#_convertstring
125ec     FD 14 02 F6 | 	mov	arg02, result1
125f0     10 13 02 F6 | 	mov	arg01, local02
125f4     A4 C5 B0 FD | 	call	#__system___string_cmp
125f8     00 FA 55 F2 | 	cmps	result1, #0 wc
125fc     00 1E 26 C6 |  if_b	not	local01, #0
12600     A7 1E 62 FC | 	wrlong	local01, fp
12604     64 00 90 FD | 	jmp	#LR__1463
12608                 | LR__1461
12608                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
12608     08 4E 05 F1 | 	add	fp, #8
1260c     A7 1E 02 FB | 	rdlong	local01, fp
12610     08 4E 85 F1 | 	sub	fp, #8
12614     2B 1E 0E F2 | 	cmp	local01, #43 wz
12618     14 4E 05 A1 |  if_e	add	fp, #20
1261c     A7 22 02 AB |  if_e	rdlong	local03, fp
12620     14 4E 85 A1 |  if_e	sub	fp, #20
12624     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12628     3C 00 90 5D |  if_ne	jmp	#LR__1462
1262c     00 1E 06 F6 | 	mov	local01, #0
12630     A7 12 02 FB | 	rdlong	arg01, fp
12634     B8 C6 BF FD | 	call	#_convertstring
12638     FD 20 02 F6 | 	mov	local02, result1
1263c     0C 4E 05 F1 | 	add	fp, #12
12640     A7 12 02 FB | 	rdlong	arg01, fp
12644     0C 4E 85 F1 | 	sub	fp, #12
12648     A4 C6 BF FD | 	call	#_convertstring
1264c     FD 14 02 F6 | 	mov	arg02, result1
12650     10 13 02 F6 | 	mov	arg01, local02
12654     44 C5 B0 FD | 	call	#__system___string_cmp
12658     00 FA 55 F2 | 	cmps	result1, #0 wc
1265c     00 1E 26 C6 |  if_b	not	local01, #0
12660     A7 1E 62 FC | 	wrlong	local01, fp
12664     04 00 90 FD | 	jmp	#LR__1463
12668                 | LR__1462
12668     A7 00 68 FC | 	wrlong	#0, fp
1266c                 | LR__1463
1266c     08 4E 05 F1 | 	add	fp, #8
12670     A7 38 68 FC | 	wrlong	#28, fp
12674     08 4E 85 F1 | 	sub	fp, #8
12678     A7 12 02 F6 | 	mov	arg01, fp
1267c     78 82 BF FD | 	call	#_push
12680     A7 F0 03 F6 | 	mov	ptra, fp
12684     B2 00 A0 FD | 	call	#popregs_
12688                 | _do_lt_ret
12688     2D 00 64 FD | 	ret
1268c                 | 
1268c                 | ' 
1268c                 | ' sub do_ge
1268c                 | _do_ge
1268c     05 4A 05 F6 | 	mov	COUNT_, #5
12690     A8 00 A0 FD | 	call	#pushregs_
12694     18 F0 07 F1 | 	add	ptra, #24
12698     C4 81 BF FD | 	call	#_pop
1269c     FD 1E 02 F6 | 	mov	local01, result1
126a0     FE 20 02 F6 | 	mov	local02, result2
126a4     FF 22 02 F6 | 	mov	local03, result3
126a8     0C 4E 05 F1 | 	add	fp, #12
126ac     A7 1E 62 FC | 	wrlong	local01, fp
126b0     04 4E 05 F1 | 	add	fp, #4
126b4     A7 20 62 FC | 	wrlong	local02, fp
126b8     04 4E 05 F1 | 	add	fp, #4
126bc     A7 22 62 FC | 	wrlong	local03, fp
126c0     14 4E 85 F1 | 	sub	fp, #20
126c4     98 81 BF FD | 	call	#_pop
126c8     FF 22 02 F6 | 	mov	local03, result3
126cc     A7 FA 61 FC | 	wrlong	result1, fp
126d0     04 4E 05 F1 | 	add	fp, #4
126d4     A7 FC 61 FC | 	wrlong	result2, fp
126d8     04 4E 05 F1 | 	add	fp, #4
126dc     A7 22 62 FC | 	wrlong	local03, fp
126e0                 | ' t2=pop()
126e0                 | ' t1=pop()
126e0                 | ' 
126e0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
126e0     08 4E 85 F1 | 	sub	fp, #8
126e4     1F 22 0E F2 | 	cmp	local03, #31 wz
126e8     14 4E 05 A1 |  if_e	add	fp, #20
126ec     A7 24 02 AB |  if_e	rdlong	local04, fp
126f0     14 4E 85 A1 |  if_e	sub	fp, #20
126f4     12 23 02 A6 |  if_e	mov	local03, local04
126f8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
126fc     28 00 90 5D |  if_ne	jmp	#LR__1470
12700     00 1E 06 F6 | 	mov	local01, #0
12704     A7 12 02 FB | 	rdlong	arg01, fp
12708     0C 4E 05 F1 | 	add	fp, #12
1270c     A7 14 02 FB | 	rdlong	arg02, fp
12710     0C 4E 85 F1 | 	sub	fp, #12
12714     84 C4 B0 FD | 	call	#__system___string_cmp
12718     00 FA 55 F2 | 	cmps	result1, #0 wc
1271c     00 1E 26 36 |  if_ae	not	local01, #0
12720     A7 1E 62 FC | 	wrlong	local01, fp
12724     1C 04 90 FD | 	jmp	#LR__1483
12728                 | LR__1470
12728                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
12728     08 4E 05 F1 | 	add	fp, #8
1272c     A7 1E 02 FB | 	rdlong	local01, fp
12730     08 4E 85 F1 | 	sub	fp, #8
12734     1E 1E 0E F2 | 	cmp	local01, #30 wz
12738     14 4E 05 A1 |  if_e	add	fp, #20
1273c     A7 24 02 AB |  if_e	rdlong	local04, fp
12740     14 4E 85 A1 |  if_e	sub	fp, #20
12744     12 23 02 A6 |  if_e	mov	local03, local04
12748     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1274c     2C 00 90 5D |  if_ne	jmp	#LR__1471
12750     00 1E 06 F6 | 	mov	local01, #0
12754     A7 12 02 FB | 	rdlong	arg01, fp
12758     0C 4E 05 F1 | 	add	fp, #12
1275c     A7 14 02 FB | 	rdlong	arg02, fp
12760     0C 4E 85 F1 | 	sub	fp, #12
12764     01 16 66 F6 | 	neg	arg03, #1
12768     BC F3 B0 FD | 	call	#__system___float_cmp
1276c     00 FA 55 F2 | 	cmps	result1, #0 wc
12770     00 1E 26 36 |  if_ae	not	local01, #0
12774     A7 1E 62 FC | 	wrlong	local01, fp
12778     C8 03 90 FD | 	jmp	#LR__1483
1277c                 | LR__1471
1277c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1277c     08 4E 05 F1 | 	add	fp, #8
12780     A7 1E 02 FB | 	rdlong	local01, fp
12784     08 4E 85 F1 | 	sub	fp, #8
12788     1E 1E 0E F2 | 	cmp	local01, #30 wz
1278c     14 4E 05 A1 |  if_e	add	fp, #20
12790     A7 24 02 AB |  if_e	rdlong	local04, fp
12794     14 4E 85 A1 |  if_e	sub	fp, #20
12798     12 23 02 A6 |  if_e	mov	local03, local04
1279c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
127a0     48 00 90 5D |  if_ne	jmp	#LR__1472
127a4     00 1E 06 F6 | 	mov	local01, #0
127a8     A7 20 02 FB | 	rdlong	local02, fp
127ac     0C 4E 05 F1 | 	add	fp, #12
127b0     A7 12 02 FB | 	rdlong	arg01, fp
127b4     0C 4E 85 F1 | 	sub	fp, #12
127b8     09 13 52 F6 | 	abs	arg01, arg01 wc
127bc     1F 26 C6 C9 |  if_b	decod	local05, #31
127c0     00 26 06 36 |  if_ae	mov	local05, #0
127c4     28 EB B0 FD | 	call	#__system___float_fromuns
127c8     13 FB 61 F5 | 	xor	result1, local05
127cc     FD 14 02 F6 | 	mov	arg02, result1
127d0     10 13 02 F6 | 	mov	arg01, local02
127d4     01 16 66 F6 | 	neg	arg03, #1
127d8     4C F3 B0 FD | 	call	#__system___float_cmp
127dc     00 FA 55 F2 | 	cmps	result1, #0 wc
127e0     00 1E 26 36 |  if_ae	not	local01, #0
127e4     A7 1E 62 FC | 	wrlong	local01, fp
127e8     58 03 90 FD | 	jmp	#LR__1483
127ec                 | LR__1472
127ec                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
127ec     08 4E 05 F1 | 	add	fp, #8
127f0     A7 1E 02 FB | 	rdlong	local01, fp
127f4     08 4E 85 F1 | 	sub	fp, #8
127f8     1E 1E 0E F2 | 	cmp	local01, #30 wz
127fc     14 4E 05 A1 |  if_e	add	fp, #20
12800     A7 24 02 AB |  if_e	rdlong	local04, fp
12804     14 4E 85 A1 |  if_e	sub	fp, #20
12808     12 23 02 A6 |  if_e	mov	local03, local04
1280c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12810     38 00 90 5D |  if_ne	jmp	#LR__1473
12814     00 1E 06 F6 | 	mov	local01, #0
12818     A7 20 02 FB | 	rdlong	local02, fp
1281c     0C 4E 05 F1 | 	add	fp, #12
12820     A7 12 02 FB | 	rdlong	arg01, fp
12824     0C 4E 85 F1 | 	sub	fp, #12
12828     C4 EA B0 FD | 	call	#__system___float_fromuns
1282c     FD 14 02 F6 | 	mov	arg02, result1
12830     10 13 02 F6 | 	mov	arg01, local02
12834     01 16 66 F6 | 	neg	arg03, #1
12838     EC F2 B0 FD | 	call	#__system___float_cmp
1283c     00 FA 55 F2 | 	cmps	result1, #0 wc
12840     00 1E 26 36 |  if_ae	not	local01, #0
12844     A7 1E 62 FC | 	wrlong	local01, fp
12848     F8 02 90 FD | 	jmp	#LR__1483
1284c                 | LR__1473
1284c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1284c     08 4E 05 F1 | 	add	fp, #8
12850     A7 1E 02 FB | 	rdlong	local01, fp
12854     08 4E 85 F1 | 	sub	fp, #8
12858     1C 1E 0E F2 | 	cmp	local01, #28 wz
1285c     14 4E 05 A1 |  if_e	add	fp, #20
12860     A7 24 02 AB |  if_e	rdlong	local04, fp
12864     14 4E 85 A1 |  if_e	sub	fp, #20
12868     12 23 02 A6 |  if_e	mov	local03, local04
1286c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12870     44 00 90 5D |  if_ne	jmp	#LR__1474
12874     00 1E 06 F6 | 	mov	local01, #0
12878     A7 12 02 FB | 	rdlong	arg01, fp
1287c     09 13 52 F6 | 	abs	arg01, arg01 wc
12880     1F 26 C6 C9 |  if_b	decod	local05, #31
12884     00 26 06 36 |  if_ae	mov	local05, #0
12888     64 EA B0 FD | 	call	#__system___float_fromuns
1288c     13 FB 61 F5 | 	xor	result1, local05
12890     FD 12 02 F6 | 	mov	arg01, result1
12894     0C 4E 05 F1 | 	add	fp, #12
12898     A7 14 02 FB | 	rdlong	arg02, fp
1289c     0C 4E 85 F1 | 	sub	fp, #12
128a0     01 16 66 F6 | 	neg	arg03, #1
128a4     80 F2 B0 FD | 	call	#__system___float_cmp
128a8     00 FA 55 F2 | 	cmps	result1, #0 wc
128ac     00 1E 26 36 |  if_ae	not	local01, #0
128b0     A7 1E 62 FC | 	wrlong	local01, fp
128b4     8C 02 90 FD | 	jmp	#LR__1483
128b8                 | LR__1474
128b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
128b8     08 4E 05 F1 | 	add	fp, #8
128bc     A7 1E 02 FB | 	rdlong	local01, fp
128c0     08 4E 85 F1 | 	sub	fp, #8
128c4     1C 1E 0E F2 | 	cmp	local01, #28 wz
128c8     14 4E 05 A1 |  if_e	add	fp, #20
128cc     A7 24 02 AB |  if_e	rdlong	local04, fp
128d0     14 4E 85 A1 |  if_e	sub	fp, #20
128d4     12 23 02 A6 |  if_e	mov	local03, local04
128d8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
128dc     24 00 90 5D |  if_ne	jmp	#LR__1475
128e0     00 1E 06 F6 | 	mov	local01, #0
128e4     A7 20 02 FB | 	rdlong	local02, fp
128e8     0C 4E 05 F1 | 	add	fp, #12
128ec     A7 22 02 FB | 	rdlong	local03, fp
128f0     0C 4E 85 F1 | 	sub	fp, #12
128f4     11 21 52 F2 | 	cmps	local02, local03 wc
128f8     01 1E 66 36 |  if_ae	neg	local01, #1
128fc     A7 1E 62 FC | 	wrlong	local01, fp
12900     40 02 90 FD | 	jmp	#LR__1483
12904                 | LR__1475
12904                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
12904     08 4E 05 F1 | 	add	fp, #8
12908     A7 1E 02 FB | 	rdlong	local01, fp
1290c     08 4E 85 F1 | 	sub	fp, #8
12910     1C 1E 0E F2 | 	cmp	local01, #28 wz
12914     14 4E 05 A1 |  if_e	add	fp, #20
12918     A7 24 02 AB |  if_e	rdlong	local04, fp
1291c     14 4E 85 A1 |  if_e	sub	fp, #20
12920     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12924     24 00 90 5D |  if_ne	jmp	#LR__1476
12928     00 1E 06 F6 | 	mov	local01, #0
1292c     A7 20 02 FB | 	rdlong	local02, fp
12930     0C 4E 05 F1 | 	add	fp, #12
12934     A7 22 02 FB | 	rdlong	local03, fp
12938     0C 4E 85 F1 | 	sub	fp, #12
1293c     11 21 52 F2 | 	cmps	local02, local03 wc
12940     01 1E 66 36 |  if_ae	neg	local01, #1
12944     A7 1E 62 FC | 	wrlong	local01, fp
12948     F8 01 90 FD | 	jmp	#LR__1483
1294c                 | LR__1476
1294c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1294c     08 4E 05 F1 | 	add	fp, #8
12950     A7 1E 02 FB | 	rdlong	local01, fp
12954     08 4E 85 F1 | 	sub	fp, #8
12958     1D 1E 0E F2 | 	cmp	local01, #29 wz
1295c     14 4E 05 A1 |  if_e	add	fp, #20
12960     A7 22 02 AB |  if_e	rdlong	local03, fp
12964     14 4E 85 A1 |  if_e	sub	fp, #20
12968     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1296c     34 00 90 5D |  if_ne	jmp	#LR__1477
12970     00 1E 06 F6 | 	mov	local01, #0
12974     A7 12 02 FB | 	rdlong	arg01, fp
12978     74 E9 B0 FD | 	call	#__system___float_fromuns
1297c     FD 12 02 F6 | 	mov	arg01, result1
12980     0C 4E 05 F1 | 	add	fp, #12
12984     A7 14 02 FB | 	rdlong	arg02, fp
12988     0C 4E 85 F1 | 	sub	fp, #12
1298c     01 16 66 F6 | 	neg	arg03, #1
12990     94 F1 B0 FD | 	call	#__system___float_cmp
12994     00 FA 55 F2 | 	cmps	result1, #0 wc
12998     00 1E 26 36 |  if_ae	not	local01, #0
1299c     A7 1E 62 FC | 	wrlong	local01, fp
129a0     A0 01 90 FD | 	jmp	#LR__1483
129a4                 | LR__1477
129a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
129a4     08 4E 05 F1 | 	add	fp, #8
129a8     A7 1E 02 FB | 	rdlong	local01, fp
129ac     08 4E 85 F1 | 	sub	fp, #8
129b0     1D 1E 0E F2 | 	cmp	local01, #29 wz
129b4     14 4E 05 A1 |  if_e	add	fp, #20
129b8     A7 22 02 AB |  if_e	rdlong	local03, fp
129bc     14 4E 85 A1 |  if_e	sub	fp, #20
129c0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
129c4     24 00 90 5D |  if_ne	jmp	#LR__1478
129c8     00 1E 06 F6 | 	mov	local01, #0
129cc     A7 20 02 FB | 	rdlong	local02, fp
129d0     0C 4E 05 F1 | 	add	fp, #12
129d4     A7 22 02 FB | 	rdlong	local03, fp
129d8     0C 4E 85 F1 | 	sub	fp, #12
129dc     11 21 52 F2 | 	cmps	local02, local03 wc
129e0     01 1E 66 36 |  if_ae	neg	local01, #1
129e4     A7 1E 62 FC | 	wrlong	local01, fp
129e8     58 01 90 FD | 	jmp	#LR__1483
129ec                 | LR__1478
129ec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
129ec     08 4E 05 F1 | 	add	fp, #8
129f0     A7 1E 02 FB | 	rdlong	local01, fp
129f4     08 4E 85 F1 | 	sub	fp, #8
129f8     1D 1E 0E F2 | 	cmp	local01, #29 wz
129fc     14 4E 05 A1 |  if_e	add	fp, #20
12a00     A7 22 02 AB |  if_e	rdlong	local03, fp
12a04     14 4E 85 A1 |  if_e	sub	fp, #20
12a08     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12a0c     24 00 90 5D |  if_ne	jmp	#LR__1479
12a10     00 1E 06 F6 | 	mov	local01, #0
12a14     A7 20 02 FB | 	rdlong	local02, fp
12a18     0C 4E 05 F1 | 	add	fp, #12
12a1c     A7 22 02 FB | 	rdlong	local03, fp
12a20     0C 4E 85 F1 | 	sub	fp, #12
12a24     11 21 12 F2 | 	cmp	local02, local03 wc
12a28     01 1E 66 36 |  if_ae	neg	local01, #1
12a2c     A7 1E 62 FC | 	wrlong	local01, fp
12a30     10 01 90 FD | 	jmp	#LR__1483
12a34                 | LR__1479
12a34                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
12a34     08 4E 05 F1 | 	add	fp, #8
12a38     A7 1E 02 FB | 	rdlong	local01, fp
12a3c     08 4E 85 F1 | 	sub	fp, #8
12a40     2B 1E 0E F2 | 	cmp	local01, #43 wz
12a44     14 4E 05 A1 |  if_e	add	fp, #20
12a48     A7 22 02 AB |  if_e	rdlong	local03, fp
12a4c     14 4E 85 A1 |  if_e	sub	fp, #20
12a50     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12a54     30 00 90 5D |  if_ne	jmp	#LR__1480
12a58     00 1E 06 F6 | 	mov	local01, #0
12a5c     A7 12 02 FB | 	rdlong	arg01, fp
12a60     8C C2 BF FD | 	call	#_convertstring
12a64     FD 12 02 F6 | 	mov	arg01, result1
12a68     0C 4E 05 F1 | 	add	fp, #12
12a6c     A7 14 02 FB | 	rdlong	arg02, fp
12a70     0C 4E 85 F1 | 	sub	fp, #12
12a74     24 C1 B0 FD | 	call	#__system___string_cmp
12a78     00 FA 55 F2 | 	cmps	result1, #0 wc
12a7c     00 1E 26 36 |  if_ae	not	local01, #0
12a80     A7 1E 62 FC | 	wrlong	local01, fp
12a84     BC 00 90 FD | 	jmp	#LR__1483
12a88                 | LR__1480
12a88                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
12a88     08 4E 05 F1 | 	add	fp, #8
12a8c     A7 1E 02 FB | 	rdlong	local01, fp
12a90     08 4E 85 F1 | 	sub	fp, #8
12a94     1F 1E 0E F2 | 	cmp	local01, #31 wz
12a98     14 4E 05 A1 |  if_e	add	fp, #20
12a9c     A7 22 02 AB |  if_e	rdlong	local03, fp
12aa0     14 4E 85 A1 |  if_e	sub	fp, #20
12aa4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12aa8     34 00 90 5D |  if_ne	jmp	#LR__1481
12aac     00 1E 06 F6 | 	mov	local01, #0
12ab0     A7 20 02 FB | 	rdlong	local02, fp
12ab4     0C 4E 05 F1 | 	add	fp, #12
12ab8     A7 12 02 FB | 	rdlong	arg01, fp
12abc     0C 4E 85 F1 | 	sub	fp, #12
12ac0     2C C2 BF FD | 	call	#_convertstring
12ac4     FD 14 02 F6 | 	mov	arg02, result1
12ac8     10 13 02 F6 | 	mov	arg01, local02
12acc     CC C0 B0 FD | 	call	#__system___string_cmp
12ad0     00 FA 55 F2 | 	cmps	result1, #0 wc
12ad4     00 1E 26 36 |  if_ae	not	local01, #0
12ad8     A7 1E 62 FC | 	wrlong	local01, fp
12adc     64 00 90 FD | 	jmp	#LR__1483
12ae0                 | LR__1481
12ae0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
12ae0     08 4E 05 F1 | 	add	fp, #8
12ae4     A7 1E 02 FB | 	rdlong	local01, fp
12ae8     08 4E 85 F1 | 	sub	fp, #8
12aec     2B 1E 0E F2 | 	cmp	local01, #43 wz
12af0     14 4E 05 A1 |  if_e	add	fp, #20
12af4     A7 22 02 AB |  if_e	rdlong	local03, fp
12af8     14 4E 85 A1 |  if_e	sub	fp, #20
12afc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12b00     3C 00 90 5D |  if_ne	jmp	#LR__1482
12b04     00 1E 06 F6 | 	mov	local01, #0
12b08     A7 12 02 FB | 	rdlong	arg01, fp
12b0c     E0 C1 BF FD | 	call	#_convertstring
12b10     FD 20 02 F6 | 	mov	local02, result1
12b14     0C 4E 05 F1 | 	add	fp, #12
12b18     A7 12 02 FB | 	rdlong	arg01, fp
12b1c     0C 4E 85 F1 | 	sub	fp, #12
12b20     CC C1 BF FD | 	call	#_convertstring
12b24     FD 14 02 F6 | 	mov	arg02, result1
12b28     10 13 02 F6 | 	mov	arg01, local02
12b2c     6C C0 B0 FD | 	call	#__system___string_cmp
12b30     00 FA 55 F2 | 	cmps	result1, #0 wc
12b34     00 1E 26 36 |  if_ae	not	local01, #0
12b38     A7 1E 62 FC | 	wrlong	local01, fp
12b3c     04 00 90 FD | 	jmp	#LR__1483
12b40                 | LR__1482
12b40     A7 00 68 FC | 	wrlong	#0, fp
12b44                 | LR__1483
12b44     08 4E 05 F1 | 	add	fp, #8
12b48     A7 38 68 FC | 	wrlong	#28, fp
12b4c     08 4E 85 F1 | 	sub	fp, #8
12b50     A7 12 02 F6 | 	mov	arg01, fp
12b54     A0 7D BF FD | 	call	#_push
12b58     A7 F0 03 F6 | 	mov	ptra, fp
12b5c     B2 00 A0 FD | 	call	#popregs_
12b60                 | _do_ge_ret
12b60     2D 00 64 FD | 	ret
12b64                 | 
12b64                 | ' 
12b64                 | ' sub do_le
12b64                 | _do_le
12b64     05 4A 05 F6 | 	mov	COUNT_, #5
12b68     A8 00 A0 FD | 	call	#pushregs_
12b6c     18 F0 07 F1 | 	add	ptra, #24
12b70     EC 7C BF FD | 	call	#_pop
12b74     FD 1E 02 F6 | 	mov	local01, result1
12b78     FE 20 02 F6 | 	mov	local02, result2
12b7c     FF 22 02 F6 | 	mov	local03, result3
12b80     0C 4E 05 F1 | 	add	fp, #12
12b84     A7 1E 62 FC | 	wrlong	local01, fp
12b88     04 4E 05 F1 | 	add	fp, #4
12b8c     A7 20 62 FC | 	wrlong	local02, fp
12b90     04 4E 05 F1 | 	add	fp, #4
12b94     A7 22 62 FC | 	wrlong	local03, fp
12b98     14 4E 85 F1 | 	sub	fp, #20
12b9c     C0 7C BF FD | 	call	#_pop
12ba0     FF 22 02 F6 | 	mov	local03, result3
12ba4     A7 FA 61 FC | 	wrlong	result1, fp
12ba8     04 4E 05 F1 | 	add	fp, #4
12bac     A7 FC 61 FC | 	wrlong	result2, fp
12bb0     04 4E 05 F1 | 	add	fp, #4
12bb4     A7 22 62 FC | 	wrlong	local03, fp
12bb8                 | ' t2=pop()
12bb8                 | ' t1=pop()
12bb8                 | ' 
12bb8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
12bb8     08 4E 85 F1 | 	sub	fp, #8
12bbc     1F 22 0E F2 | 	cmp	local03, #31 wz
12bc0     14 4E 05 A1 |  if_e	add	fp, #20
12bc4     A7 24 02 AB |  if_e	rdlong	local04, fp
12bc8     14 4E 85 A1 |  if_e	sub	fp, #20
12bcc     12 23 02 A6 |  if_e	mov	local03, local04
12bd0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12bd4     28 00 90 5D |  if_ne	jmp	#LR__1490
12bd8     00 1E 06 F6 | 	mov	local01, #0
12bdc     A7 12 02 FB | 	rdlong	arg01, fp
12be0     0C 4E 05 F1 | 	add	fp, #12
12be4     A7 14 02 FB | 	rdlong	arg02, fp
12be8     0C 4E 85 F1 | 	sub	fp, #12
12bec     AC BF B0 FD | 	call	#__system___string_cmp
12bf0     01 FA 55 F2 | 	cmps	result1, #1 wc
12bf4     00 1E 26 C6 |  if_b	not	local01, #0
12bf8     A7 1E 62 FC | 	wrlong	local01, fp
12bfc     1C 04 90 FD | 	jmp	#LR__1503
12c00                 | LR__1490
12c00                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
12c00     08 4E 05 F1 | 	add	fp, #8
12c04     A7 1E 02 FB | 	rdlong	local01, fp
12c08     08 4E 85 F1 | 	sub	fp, #8
12c0c     1E 1E 0E F2 | 	cmp	local01, #30 wz
12c10     14 4E 05 A1 |  if_e	add	fp, #20
12c14     A7 24 02 AB |  if_e	rdlong	local04, fp
12c18     14 4E 85 A1 |  if_e	sub	fp, #20
12c1c     12 23 02 A6 |  if_e	mov	local03, local04
12c20     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12c24     2C 00 90 5D |  if_ne	jmp	#LR__1491
12c28     00 1E 06 F6 | 	mov	local01, #0
12c2c     A7 12 02 FB | 	rdlong	arg01, fp
12c30     0C 4E 05 F1 | 	add	fp, #12
12c34     A7 14 02 FB | 	rdlong	arg02, fp
12c38     0C 4E 85 F1 | 	sub	fp, #12
12c3c     01 16 06 F6 | 	mov	arg03, #1
12c40     E4 EE B0 FD | 	call	#__system___float_cmp
12c44     01 FA 55 F2 | 	cmps	result1, #1 wc
12c48     00 1E 26 C6 |  if_b	not	local01, #0
12c4c     A7 1E 62 FC | 	wrlong	local01, fp
12c50     C8 03 90 FD | 	jmp	#LR__1503
12c54                 | LR__1491
12c54                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
12c54     08 4E 05 F1 | 	add	fp, #8
12c58     A7 1E 02 FB | 	rdlong	local01, fp
12c5c     08 4E 85 F1 | 	sub	fp, #8
12c60     1E 1E 0E F2 | 	cmp	local01, #30 wz
12c64     14 4E 05 A1 |  if_e	add	fp, #20
12c68     A7 24 02 AB |  if_e	rdlong	local04, fp
12c6c     14 4E 85 A1 |  if_e	sub	fp, #20
12c70     12 23 02 A6 |  if_e	mov	local03, local04
12c74     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12c78     48 00 90 5D |  if_ne	jmp	#LR__1492
12c7c     00 1E 06 F6 | 	mov	local01, #0
12c80     A7 20 02 FB | 	rdlong	local02, fp
12c84     0C 4E 05 F1 | 	add	fp, #12
12c88     A7 12 02 FB | 	rdlong	arg01, fp
12c8c     0C 4E 85 F1 | 	sub	fp, #12
12c90     09 13 52 F6 | 	abs	arg01, arg01 wc
12c94     1F 26 C6 C9 |  if_b	decod	local05, #31
12c98     00 26 06 36 |  if_ae	mov	local05, #0
12c9c     50 E6 B0 FD | 	call	#__system___float_fromuns
12ca0     13 FB 61 F5 | 	xor	result1, local05
12ca4     FD 14 02 F6 | 	mov	arg02, result1
12ca8     10 13 02 F6 | 	mov	arg01, local02
12cac     01 16 06 F6 | 	mov	arg03, #1
12cb0     74 EE B0 FD | 	call	#__system___float_cmp
12cb4     01 FA 55 F2 | 	cmps	result1, #1 wc
12cb8     00 1E 26 C6 |  if_b	not	local01, #0
12cbc     A7 1E 62 FC | 	wrlong	local01, fp
12cc0     58 03 90 FD | 	jmp	#LR__1503
12cc4                 | LR__1492
12cc4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
12cc4     08 4E 05 F1 | 	add	fp, #8
12cc8     A7 1E 02 FB | 	rdlong	local01, fp
12ccc     08 4E 85 F1 | 	sub	fp, #8
12cd0     1E 1E 0E F2 | 	cmp	local01, #30 wz
12cd4     14 4E 05 A1 |  if_e	add	fp, #20
12cd8     A7 24 02 AB |  if_e	rdlong	local04, fp
12cdc     14 4E 85 A1 |  if_e	sub	fp, #20
12ce0     12 23 02 A6 |  if_e	mov	local03, local04
12ce4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12ce8     38 00 90 5D |  if_ne	jmp	#LR__1493
12cec     00 1E 06 F6 | 	mov	local01, #0
12cf0     A7 20 02 FB | 	rdlong	local02, fp
12cf4     0C 4E 05 F1 | 	add	fp, #12
12cf8     A7 12 02 FB | 	rdlong	arg01, fp
12cfc     0C 4E 85 F1 | 	sub	fp, #12
12d00     EC E5 B0 FD | 	call	#__system___float_fromuns
12d04     FD 14 02 F6 | 	mov	arg02, result1
12d08     10 13 02 F6 | 	mov	arg01, local02
12d0c     01 16 06 F6 | 	mov	arg03, #1
12d10     14 EE B0 FD | 	call	#__system___float_cmp
12d14     01 FA 55 F2 | 	cmps	result1, #1 wc
12d18     00 1E 26 C6 |  if_b	not	local01, #0
12d1c     A7 1E 62 FC | 	wrlong	local01, fp
12d20     F8 02 90 FD | 	jmp	#LR__1503
12d24                 | LR__1493
12d24                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
12d24     08 4E 05 F1 | 	add	fp, #8
12d28     A7 1E 02 FB | 	rdlong	local01, fp
12d2c     08 4E 85 F1 | 	sub	fp, #8
12d30     1C 1E 0E F2 | 	cmp	local01, #28 wz
12d34     14 4E 05 A1 |  if_e	add	fp, #20
12d38     A7 24 02 AB |  if_e	rdlong	local04, fp
12d3c     14 4E 85 A1 |  if_e	sub	fp, #20
12d40     12 23 02 A6 |  if_e	mov	local03, local04
12d44     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12d48     44 00 90 5D |  if_ne	jmp	#LR__1494
12d4c     00 1E 06 F6 | 	mov	local01, #0
12d50     A7 12 02 FB | 	rdlong	arg01, fp
12d54     09 13 52 F6 | 	abs	arg01, arg01 wc
12d58     1F 26 C6 C9 |  if_b	decod	local05, #31
12d5c     00 26 06 36 |  if_ae	mov	local05, #0
12d60     8C E5 B0 FD | 	call	#__system___float_fromuns
12d64     13 FB 61 F5 | 	xor	result1, local05
12d68     FD 12 02 F6 | 	mov	arg01, result1
12d6c     0C 4E 05 F1 | 	add	fp, #12
12d70     A7 14 02 FB | 	rdlong	arg02, fp
12d74     0C 4E 85 F1 | 	sub	fp, #12
12d78     01 16 06 F6 | 	mov	arg03, #1
12d7c     A8 ED B0 FD | 	call	#__system___float_cmp
12d80     01 FA 55 F2 | 	cmps	result1, #1 wc
12d84     00 1E 26 C6 |  if_b	not	local01, #0
12d88     A7 1E 62 FC | 	wrlong	local01, fp
12d8c     8C 02 90 FD | 	jmp	#LR__1503
12d90                 | LR__1494
12d90                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
12d90     08 4E 05 F1 | 	add	fp, #8
12d94     A7 1E 02 FB | 	rdlong	local01, fp
12d98     08 4E 85 F1 | 	sub	fp, #8
12d9c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12da0     14 4E 05 A1 |  if_e	add	fp, #20
12da4     A7 24 02 AB |  if_e	rdlong	local04, fp
12da8     14 4E 85 A1 |  if_e	sub	fp, #20
12dac     12 23 02 A6 |  if_e	mov	local03, local04
12db0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12db4     24 00 90 5D |  if_ne	jmp	#LR__1495
12db8     00 1E 06 F6 | 	mov	local01, #0
12dbc     A7 20 02 FB | 	rdlong	local02, fp
12dc0     0C 4E 05 F1 | 	add	fp, #12
12dc4     A7 22 02 FB | 	rdlong	local03, fp
12dc8     0C 4E 85 F1 | 	sub	fp, #12
12dcc     11 21 5A F2 | 	cmps	local02, local03 wcz
12dd0     01 1E 66 E6 |  if_be	neg	local01, #1
12dd4     A7 1E 62 FC | 	wrlong	local01, fp
12dd8     40 02 90 FD | 	jmp	#LR__1503
12ddc                 | LR__1495
12ddc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
12ddc     08 4E 05 F1 | 	add	fp, #8
12de0     A7 1E 02 FB | 	rdlong	local01, fp
12de4     08 4E 85 F1 | 	sub	fp, #8
12de8     1C 1E 0E F2 | 	cmp	local01, #28 wz
12dec     14 4E 05 A1 |  if_e	add	fp, #20
12df0     A7 24 02 AB |  if_e	rdlong	local04, fp
12df4     14 4E 85 A1 |  if_e	sub	fp, #20
12df8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12dfc     24 00 90 5D |  if_ne	jmp	#LR__1496
12e00     00 1E 06 F6 | 	mov	local01, #0
12e04     A7 20 02 FB | 	rdlong	local02, fp
12e08     0C 4E 05 F1 | 	add	fp, #12
12e0c     A7 22 02 FB | 	rdlong	local03, fp
12e10     0C 4E 85 F1 | 	sub	fp, #12
12e14     11 21 5A F2 | 	cmps	local02, local03 wcz
12e18     01 1E 66 E6 |  if_be	neg	local01, #1
12e1c     A7 1E 62 FC | 	wrlong	local01, fp
12e20     F8 01 90 FD | 	jmp	#LR__1503
12e24                 | LR__1496
12e24                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
12e24     08 4E 05 F1 | 	add	fp, #8
12e28     A7 1E 02 FB | 	rdlong	local01, fp
12e2c     08 4E 85 F1 | 	sub	fp, #8
12e30     1D 1E 0E F2 | 	cmp	local01, #29 wz
12e34     14 4E 05 A1 |  if_e	add	fp, #20
12e38     A7 22 02 AB |  if_e	rdlong	local03, fp
12e3c     14 4E 85 A1 |  if_e	sub	fp, #20
12e40     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12e44     34 00 90 5D |  if_ne	jmp	#LR__1497
12e48     00 1E 06 F6 | 	mov	local01, #0
12e4c     A7 12 02 FB | 	rdlong	arg01, fp
12e50     9C E4 B0 FD | 	call	#__system___float_fromuns
12e54     FD 12 02 F6 | 	mov	arg01, result1
12e58     0C 4E 05 F1 | 	add	fp, #12
12e5c     A7 14 02 FB | 	rdlong	arg02, fp
12e60     0C 4E 85 F1 | 	sub	fp, #12
12e64     01 16 06 F6 | 	mov	arg03, #1
12e68     BC EC B0 FD | 	call	#__system___float_cmp
12e6c     01 FA 55 F2 | 	cmps	result1, #1 wc
12e70     00 1E 26 C6 |  if_b	not	local01, #0
12e74     A7 1E 62 FC | 	wrlong	local01, fp
12e78     A0 01 90 FD | 	jmp	#LR__1503
12e7c                 | LR__1497
12e7c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
12e7c     08 4E 05 F1 | 	add	fp, #8
12e80     A7 1E 02 FB | 	rdlong	local01, fp
12e84     08 4E 85 F1 | 	sub	fp, #8
12e88     1D 1E 0E F2 | 	cmp	local01, #29 wz
12e8c     14 4E 05 A1 |  if_e	add	fp, #20
12e90     A7 22 02 AB |  if_e	rdlong	local03, fp
12e94     14 4E 85 A1 |  if_e	sub	fp, #20
12e98     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12e9c     24 00 90 5D |  if_ne	jmp	#LR__1498
12ea0     00 1E 06 F6 | 	mov	local01, #0
12ea4     A7 20 02 FB | 	rdlong	local02, fp
12ea8     0C 4E 05 F1 | 	add	fp, #12
12eac     A7 22 02 FB | 	rdlong	local03, fp
12eb0     0C 4E 85 F1 | 	sub	fp, #12
12eb4     11 21 5A F2 | 	cmps	local02, local03 wcz
12eb8     01 1E 66 E6 |  if_be	neg	local01, #1
12ebc     A7 1E 62 FC | 	wrlong	local01, fp
12ec0     58 01 90 FD | 	jmp	#LR__1503
12ec4                 | LR__1498
12ec4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
12ec4     08 4E 05 F1 | 	add	fp, #8
12ec8     A7 1E 02 FB | 	rdlong	local01, fp
12ecc     08 4E 85 F1 | 	sub	fp, #8
12ed0     1D 1E 0E F2 | 	cmp	local01, #29 wz
12ed4     14 4E 05 A1 |  if_e	add	fp, #20
12ed8     A7 22 02 AB |  if_e	rdlong	local03, fp
12edc     14 4E 85 A1 |  if_e	sub	fp, #20
12ee0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12ee4     24 00 90 5D |  if_ne	jmp	#LR__1499
12ee8     00 1E 06 F6 | 	mov	local01, #0
12eec     A7 20 02 FB | 	rdlong	local02, fp
12ef0     0C 4E 05 F1 | 	add	fp, #12
12ef4     A7 22 02 FB | 	rdlong	local03, fp
12ef8     0C 4E 85 F1 | 	sub	fp, #12
12efc     11 21 1A F2 | 	cmp	local02, local03 wcz
12f00     01 1E 66 E6 |  if_be	neg	local01, #1
12f04     A7 1E 62 FC | 	wrlong	local01, fp
12f08     10 01 90 FD | 	jmp	#LR__1503
12f0c                 | LR__1499
12f0c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
12f0c     08 4E 05 F1 | 	add	fp, #8
12f10     A7 1E 02 FB | 	rdlong	local01, fp
12f14     08 4E 85 F1 | 	sub	fp, #8
12f18     2B 1E 0E F2 | 	cmp	local01, #43 wz
12f1c     14 4E 05 A1 |  if_e	add	fp, #20
12f20     A7 22 02 AB |  if_e	rdlong	local03, fp
12f24     14 4E 85 A1 |  if_e	sub	fp, #20
12f28     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12f2c     30 00 90 5D |  if_ne	jmp	#LR__1500
12f30     00 1E 06 F6 | 	mov	local01, #0
12f34     A7 12 02 FB | 	rdlong	arg01, fp
12f38     B4 BD BF FD | 	call	#_convertstring
12f3c     FD 12 02 F6 | 	mov	arg01, result1
12f40     0C 4E 05 F1 | 	add	fp, #12
12f44     A7 14 02 FB | 	rdlong	arg02, fp
12f48     0C 4E 85 F1 | 	sub	fp, #12
12f4c     4C BC B0 FD | 	call	#__system___string_cmp
12f50     01 FA 55 F2 | 	cmps	result1, #1 wc
12f54     00 1E 26 C6 |  if_b	not	local01, #0
12f58     A7 1E 62 FC | 	wrlong	local01, fp
12f5c     BC 00 90 FD | 	jmp	#LR__1503
12f60                 | LR__1500
12f60                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
12f60     08 4E 05 F1 | 	add	fp, #8
12f64     A7 1E 02 FB | 	rdlong	local01, fp
12f68     08 4E 85 F1 | 	sub	fp, #8
12f6c     1F 1E 0E F2 | 	cmp	local01, #31 wz
12f70     14 4E 05 A1 |  if_e	add	fp, #20
12f74     A7 22 02 AB |  if_e	rdlong	local03, fp
12f78     14 4E 85 A1 |  if_e	sub	fp, #20
12f7c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12f80     34 00 90 5D |  if_ne	jmp	#LR__1501
12f84     00 1E 06 F6 | 	mov	local01, #0
12f88     A7 20 02 FB | 	rdlong	local02, fp
12f8c     0C 4E 05 F1 | 	add	fp, #12
12f90     A7 12 02 FB | 	rdlong	arg01, fp
12f94     0C 4E 85 F1 | 	sub	fp, #12
12f98     54 BD BF FD | 	call	#_convertstring
12f9c     FD 14 02 F6 | 	mov	arg02, result1
12fa0     10 13 02 F6 | 	mov	arg01, local02
12fa4     F4 BB B0 FD | 	call	#__system___string_cmp
12fa8     01 FA 55 F2 | 	cmps	result1, #1 wc
12fac     00 1E 26 C6 |  if_b	not	local01, #0
12fb0     A7 1E 62 FC | 	wrlong	local01, fp
12fb4     64 00 90 FD | 	jmp	#LR__1503
12fb8                 | LR__1501
12fb8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
12fb8     08 4E 05 F1 | 	add	fp, #8
12fbc     A7 1E 02 FB | 	rdlong	local01, fp
12fc0     08 4E 85 F1 | 	sub	fp, #8
12fc4     2B 1E 0E F2 | 	cmp	local01, #43 wz
12fc8     14 4E 05 A1 |  if_e	add	fp, #20
12fcc     A7 22 02 AB |  if_e	rdlong	local03, fp
12fd0     14 4E 85 A1 |  if_e	sub	fp, #20
12fd4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12fd8     3C 00 90 5D |  if_ne	jmp	#LR__1502
12fdc     00 1E 06 F6 | 	mov	local01, #0
12fe0     A7 12 02 FB | 	rdlong	arg01, fp
12fe4     08 BD BF FD | 	call	#_convertstring
12fe8     FD 20 02 F6 | 	mov	local02, result1
12fec     0C 4E 05 F1 | 	add	fp, #12
12ff0     A7 12 02 FB | 	rdlong	arg01, fp
12ff4     0C 4E 85 F1 | 	sub	fp, #12
12ff8     F4 BC BF FD | 	call	#_convertstring
12ffc     FD 14 02 F6 | 	mov	arg02, result1
13000     10 13 02 F6 | 	mov	arg01, local02
13004     94 BB B0 FD | 	call	#__system___string_cmp
13008     01 FA 55 F2 | 	cmps	result1, #1 wc
1300c     00 1E 26 C6 |  if_b	not	local01, #0
13010     A7 1E 62 FC | 	wrlong	local01, fp
13014     04 00 90 FD | 	jmp	#LR__1503
13018                 | LR__1502
13018     A7 00 68 FC | 	wrlong	#0, fp
1301c                 | LR__1503
1301c     08 4E 05 F1 | 	add	fp, #8
13020     A7 38 68 FC | 	wrlong	#28, fp
13024     08 4E 85 F1 | 	sub	fp, #8
13028     A7 12 02 F6 | 	mov	arg01, fp
1302c     C8 78 BF FD | 	call	#_push
13030     A7 F0 03 F6 | 	mov	ptra, fp
13034     B2 00 A0 FD | 	call	#popregs_
13038                 | _do_le_ret
13038     2D 00 64 FD | 	ret
1303c                 | 
1303c                 | ' 
1303c                 | ' 
1303c                 | ' sub do_ne
1303c                 | _do_ne
1303c     05 4A 05 F6 | 	mov	COUNT_, #5
13040     A8 00 A0 FD | 	call	#pushregs_
13044     18 F0 07 F1 | 	add	ptra, #24
13048     14 78 BF FD | 	call	#_pop
1304c     FD 1E 02 F6 | 	mov	local01, result1
13050     FE 20 02 F6 | 	mov	local02, result2
13054     FF 22 02 F6 | 	mov	local03, result3
13058     0C 4E 05 F1 | 	add	fp, #12
1305c     A7 1E 62 FC | 	wrlong	local01, fp
13060     04 4E 05 F1 | 	add	fp, #4
13064     A7 20 62 FC | 	wrlong	local02, fp
13068     04 4E 05 F1 | 	add	fp, #4
1306c     A7 22 62 FC | 	wrlong	local03, fp
13070     14 4E 85 F1 | 	sub	fp, #20
13074     E8 77 BF FD | 	call	#_pop
13078     FF 22 02 F6 | 	mov	local03, result3
1307c     A7 FA 61 FC | 	wrlong	result1, fp
13080     04 4E 05 F1 | 	add	fp, #4
13084     A7 FC 61 FC | 	wrlong	result2, fp
13088     04 4E 05 F1 | 	add	fp, #4
1308c     A7 22 62 FC | 	wrlong	local03, fp
13090                 | ' t2=pop()
13090                 | ' t1=pop()
13090                 | ' 
13090                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
13090     08 4E 85 F1 | 	sub	fp, #8
13094     1F 22 0E F2 | 	cmp	local03, #31 wz
13098     14 4E 05 A1 |  if_e	add	fp, #20
1309c     A7 24 02 AB |  if_e	rdlong	local04, fp
130a0     14 4E 85 A1 |  if_e	sub	fp, #20
130a4     12 23 02 A6 |  if_e	mov	local03, local04
130a8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
130ac     28 00 90 5D |  if_ne	jmp	#LR__1510
130b0     00 1E 06 F6 | 	mov	local01, #0
130b4     A7 12 02 FB | 	rdlong	arg01, fp
130b8     0C 4E 05 F1 | 	add	fp, #12
130bc     A7 14 02 FB | 	rdlong	arg02, fp
130c0     0C 4E 85 F1 | 	sub	fp, #12
130c4     D4 BA B0 FD | 	call	#__system___string_cmp
130c8     00 FA 0D F2 | 	cmp	result1, #0 wz
130cc     00 1E 26 56 |  if_ne	not	local01, #0
130d0     A7 1E 62 FC | 	wrlong	local01, fp
130d4     1C 04 90 FD | 	jmp	#LR__1523
130d8                 | LR__1510
130d8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
130d8     08 4E 05 F1 | 	add	fp, #8
130dc     A7 1E 02 FB | 	rdlong	local01, fp
130e0     08 4E 85 F1 | 	sub	fp, #8
130e4     1E 1E 0E F2 | 	cmp	local01, #30 wz
130e8     14 4E 05 A1 |  if_e	add	fp, #20
130ec     A7 24 02 AB |  if_e	rdlong	local04, fp
130f0     14 4E 85 A1 |  if_e	sub	fp, #20
130f4     12 23 02 A6 |  if_e	mov	local03, local04
130f8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
130fc     2C 00 90 5D |  if_ne	jmp	#LR__1511
13100     00 1E 06 F6 | 	mov	local01, #0
13104     A7 12 02 FB | 	rdlong	arg01, fp
13108     0C 4E 05 F1 | 	add	fp, #12
1310c     A7 14 02 FB | 	rdlong	arg02, fp
13110     0C 4E 85 F1 | 	sub	fp, #12
13114     01 16 06 F6 | 	mov	arg03, #1
13118     0C EA B0 FD | 	call	#__system___float_cmp
1311c     00 FA 0D F2 | 	cmp	result1, #0 wz
13120     00 1E 26 56 |  if_ne	not	local01, #0
13124     A7 1E 62 FC | 	wrlong	local01, fp
13128     C8 03 90 FD | 	jmp	#LR__1523
1312c                 | LR__1511
1312c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1312c     08 4E 05 F1 | 	add	fp, #8
13130     A7 1E 02 FB | 	rdlong	local01, fp
13134     08 4E 85 F1 | 	sub	fp, #8
13138     1E 1E 0E F2 | 	cmp	local01, #30 wz
1313c     14 4E 05 A1 |  if_e	add	fp, #20
13140     A7 24 02 AB |  if_e	rdlong	local04, fp
13144     14 4E 85 A1 |  if_e	sub	fp, #20
13148     12 23 02 A6 |  if_e	mov	local03, local04
1314c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13150     48 00 90 5D |  if_ne	jmp	#LR__1512
13154     00 1E 06 F6 | 	mov	local01, #0
13158     A7 20 02 FB | 	rdlong	local02, fp
1315c     0C 4E 05 F1 | 	add	fp, #12
13160     A7 12 02 FB | 	rdlong	arg01, fp
13164     0C 4E 85 F1 | 	sub	fp, #12
13168     09 13 52 F6 | 	abs	arg01, arg01 wc
1316c     1F 26 C6 C9 |  if_b	decod	local05, #31
13170     00 26 06 36 |  if_ae	mov	local05, #0
13174     78 E1 B0 FD | 	call	#__system___float_fromuns
13178     13 FB 61 F5 | 	xor	result1, local05
1317c     FD 14 02 F6 | 	mov	arg02, result1
13180     10 13 02 F6 | 	mov	arg01, local02
13184     01 16 06 F6 | 	mov	arg03, #1
13188     9C E9 B0 FD | 	call	#__system___float_cmp
1318c     00 FA 0D F2 | 	cmp	result1, #0 wz
13190     00 1E 26 56 |  if_ne	not	local01, #0
13194     A7 1E 62 FC | 	wrlong	local01, fp
13198     58 03 90 FD | 	jmp	#LR__1523
1319c                 | LR__1512
1319c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1319c     08 4E 05 F1 | 	add	fp, #8
131a0     A7 1E 02 FB | 	rdlong	local01, fp
131a4     08 4E 85 F1 | 	sub	fp, #8
131a8     1E 1E 0E F2 | 	cmp	local01, #30 wz
131ac     14 4E 05 A1 |  if_e	add	fp, #20
131b0     A7 24 02 AB |  if_e	rdlong	local04, fp
131b4     14 4E 85 A1 |  if_e	sub	fp, #20
131b8     12 23 02 A6 |  if_e	mov	local03, local04
131bc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
131c0     38 00 90 5D |  if_ne	jmp	#LR__1513
131c4     00 1E 06 F6 | 	mov	local01, #0
131c8     A7 20 02 FB | 	rdlong	local02, fp
131cc     0C 4E 05 F1 | 	add	fp, #12
131d0     A7 12 02 FB | 	rdlong	arg01, fp
131d4     0C 4E 85 F1 | 	sub	fp, #12
131d8     14 E1 B0 FD | 	call	#__system___float_fromuns
131dc     FD 14 02 F6 | 	mov	arg02, result1
131e0     10 13 02 F6 | 	mov	arg01, local02
131e4     01 16 06 F6 | 	mov	arg03, #1
131e8     3C E9 B0 FD | 	call	#__system___float_cmp
131ec     00 FA 0D F2 | 	cmp	result1, #0 wz
131f0     00 1E 26 56 |  if_ne	not	local01, #0
131f4     A7 1E 62 FC | 	wrlong	local01, fp
131f8     F8 02 90 FD | 	jmp	#LR__1523
131fc                 | LR__1513
131fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
131fc     08 4E 05 F1 | 	add	fp, #8
13200     A7 1E 02 FB | 	rdlong	local01, fp
13204     08 4E 85 F1 | 	sub	fp, #8
13208     1C 1E 0E F2 | 	cmp	local01, #28 wz
1320c     14 4E 05 A1 |  if_e	add	fp, #20
13210     A7 24 02 AB |  if_e	rdlong	local04, fp
13214     14 4E 85 A1 |  if_e	sub	fp, #20
13218     12 23 02 A6 |  if_e	mov	local03, local04
1321c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
13220     44 00 90 5D |  if_ne	jmp	#LR__1514
13224     00 1E 06 F6 | 	mov	local01, #0
13228     A7 12 02 FB | 	rdlong	arg01, fp
1322c     09 13 52 F6 | 	abs	arg01, arg01 wc
13230     1F 26 C6 C9 |  if_b	decod	local05, #31
13234     00 26 06 36 |  if_ae	mov	local05, #0
13238     B4 E0 B0 FD | 	call	#__system___float_fromuns
1323c     13 FB 61 F5 | 	xor	result1, local05
13240     FD 12 02 F6 | 	mov	arg01, result1
13244     0C 4E 05 F1 | 	add	fp, #12
13248     A7 14 02 FB | 	rdlong	arg02, fp
1324c     0C 4E 85 F1 | 	sub	fp, #12
13250     01 16 06 F6 | 	mov	arg03, #1
13254     D0 E8 B0 FD | 	call	#__system___float_cmp
13258     00 FA 0D F2 | 	cmp	result1, #0 wz
1325c     00 1E 26 56 |  if_ne	not	local01, #0
13260     A7 1E 62 FC | 	wrlong	local01, fp
13264     8C 02 90 FD | 	jmp	#LR__1523
13268                 | LR__1514
13268                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
13268     08 4E 05 F1 | 	add	fp, #8
1326c     A7 1E 02 FB | 	rdlong	local01, fp
13270     08 4E 85 F1 | 	sub	fp, #8
13274     1C 1E 0E F2 | 	cmp	local01, #28 wz
13278     14 4E 05 A1 |  if_e	add	fp, #20
1327c     A7 24 02 AB |  if_e	rdlong	local04, fp
13280     14 4E 85 A1 |  if_e	sub	fp, #20
13284     12 23 02 A6 |  if_e	mov	local03, local04
13288     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1328c     24 00 90 5D |  if_ne	jmp	#LR__1515
13290     00 1E 06 F6 | 	mov	local01, #0
13294     A7 20 02 FB | 	rdlong	local02, fp
13298     0C 4E 05 F1 | 	add	fp, #12
1329c     A7 22 02 FB | 	rdlong	local03, fp
132a0     0C 4E 85 F1 | 	sub	fp, #12
132a4     11 21 0A F2 | 	cmp	local02, local03 wz
132a8     01 1E 66 56 |  if_ne	neg	local01, #1
132ac     A7 1E 62 FC | 	wrlong	local01, fp
132b0     40 02 90 FD | 	jmp	#LR__1523
132b4                 | LR__1515
132b4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
132b4     08 4E 05 F1 | 	add	fp, #8
132b8     A7 1E 02 FB | 	rdlong	local01, fp
132bc     08 4E 85 F1 | 	sub	fp, #8
132c0     1C 1E 0E F2 | 	cmp	local01, #28 wz
132c4     14 4E 05 A1 |  if_e	add	fp, #20
132c8     A7 24 02 AB |  if_e	rdlong	local04, fp
132cc     14 4E 85 A1 |  if_e	sub	fp, #20
132d0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
132d4     24 00 90 5D |  if_ne	jmp	#LR__1516
132d8     00 1E 06 F6 | 	mov	local01, #0
132dc     A7 20 02 FB | 	rdlong	local02, fp
132e0     0C 4E 05 F1 | 	add	fp, #12
132e4     A7 22 02 FB | 	rdlong	local03, fp
132e8     0C 4E 85 F1 | 	sub	fp, #12
132ec     11 21 0A F2 | 	cmp	local02, local03 wz
132f0     01 1E 66 56 |  if_ne	neg	local01, #1
132f4     A7 1E 62 FC | 	wrlong	local01, fp
132f8     F8 01 90 FD | 	jmp	#LR__1523
132fc                 | LR__1516
132fc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
132fc     08 4E 05 F1 | 	add	fp, #8
13300     A7 1E 02 FB | 	rdlong	local01, fp
13304     08 4E 85 F1 | 	sub	fp, #8
13308     1D 1E 0E F2 | 	cmp	local01, #29 wz
1330c     14 4E 05 A1 |  if_e	add	fp, #20
13310     A7 22 02 AB |  if_e	rdlong	local03, fp
13314     14 4E 85 A1 |  if_e	sub	fp, #20
13318     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1331c     34 00 90 5D |  if_ne	jmp	#LR__1517
13320     00 1E 06 F6 | 	mov	local01, #0
13324     A7 12 02 FB | 	rdlong	arg01, fp
13328     C4 DF B0 FD | 	call	#__system___float_fromuns
1332c     FD 12 02 F6 | 	mov	arg01, result1
13330     0C 4E 05 F1 | 	add	fp, #12
13334     A7 14 02 FB | 	rdlong	arg02, fp
13338     0C 4E 85 F1 | 	sub	fp, #12
1333c     01 16 06 F6 | 	mov	arg03, #1
13340     E4 E7 B0 FD | 	call	#__system___float_cmp
13344     00 FA 0D F2 | 	cmp	result1, #0 wz
13348     00 1E 26 56 |  if_ne	not	local01, #0
1334c     A7 1E 62 FC | 	wrlong	local01, fp
13350     A0 01 90 FD | 	jmp	#LR__1523
13354                 | LR__1517
13354                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
13354     08 4E 05 F1 | 	add	fp, #8
13358     A7 1E 02 FB | 	rdlong	local01, fp
1335c     08 4E 85 F1 | 	sub	fp, #8
13360     1D 1E 0E F2 | 	cmp	local01, #29 wz
13364     14 4E 05 A1 |  if_e	add	fp, #20
13368     A7 22 02 AB |  if_e	rdlong	local03, fp
1336c     14 4E 85 A1 |  if_e	sub	fp, #20
13370     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13374     24 00 90 5D |  if_ne	jmp	#LR__1518
13378     00 1E 06 F6 | 	mov	local01, #0
1337c     A7 20 02 FB | 	rdlong	local02, fp
13380     0C 4E 05 F1 | 	add	fp, #12
13384     A7 22 02 FB | 	rdlong	local03, fp
13388     0C 4E 85 F1 | 	sub	fp, #12
1338c     11 21 0A F2 | 	cmp	local02, local03 wz
13390     01 1E 66 56 |  if_ne	neg	local01, #1
13394     A7 1E 62 FC | 	wrlong	local01, fp
13398     58 01 90 FD | 	jmp	#LR__1523
1339c                 | LR__1518
1339c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1339c     08 4E 05 F1 | 	add	fp, #8
133a0     A7 1E 02 FB | 	rdlong	local01, fp
133a4     08 4E 85 F1 | 	sub	fp, #8
133a8     1D 1E 0E F2 | 	cmp	local01, #29 wz
133ac     14 4E 05 A1 |  if_e	add	fp, #20
133b0     A7 22 02 AB |  if_e	rdlong	local03, fp
133b4     14 4E 85 A1 |  if_e	sub	fp, #20
133b8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
133bc     24 00 90 5D |  if_ne	jmp	#LR__1519
133c0     00 1E 06 F6 | 	mov	local01, #0
133c4     A7 20 02 FB | 	rdlong	local02, fp
133c8     0C 4E 05 F1 | 	add	fp, #12
133cc     A7 22 02 FB | 	rdlong	local03, fp
133d0     0C 4E 85 F1 | 	sub	fp, #12
133d4     11 21 0A F2 | 	cmp	local02, local03 wz
133d8     01 1E 66 56 |  if_ne	neg	local01, #1
133dc     A7 1E 62 FC | 	wrlong	local01, fp
133e0     10 01 90 FD | 	jmp	#LR__1523
133e4                 | LR__1519
133e4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
133e4     08 4E 05 F1 | 	add	fp, #8
133e8     A7 1E 02 FB | 	rdlong	local01, fp
133ec     08 4E 85 F1 | 	sub	fp, #8
133f0     2B 1E 0E F2 | 	cmp	local01, #43 wz
133f4     14 4E 05 A1 |  if_e	add	fp, #20
133f8     A7 22 02 AB |  if_e	rdlong	local03, fp
133fc     14 4E 85 A1 |  if_e	sub	fp, #20
13400     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
13404     30 00 90 5D |  if_ne	jmp	#LR__1520
13408     00 1E 06 F6 | 	mov	local01, #0
1340c     A7 12 02 FB | 	rdlong	arg01, fp
13410     DC B8 BF FD | 	call	#_convertstring
13414     FD 12 02 F6 | 	mov	arg01, result1
13418     0C 4E 05 F1 | 	add	fp, #12
1341c     A7 14 02 FB | 	rdlong	arg02, fp
13420     0C 4E 85 F1 | 	sub	fp, #12
13424     74 B7 B0 FD | 	call	#__system___string_cmp
13428     00 FA 0D F2 | 	cmp	result1, #0 wz
1342c     00 1E 26 56 |  if_ne	not	local01, #0
13430     A7 1E 62 FC | 	wrlong	local01, fp
13434     BC 00 90 FD | 	jmp	#LR__1523
13438                 | LR__1520
13438                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
13438     08 4E 05 F1 | 	add	fp, #8
1343c     A7 1E 02 FB | 	rdlong	local01, fp
13440     08 4E 85 F1 | 	sub	fp, #8
13444     1F 1E 0E F2 | 	cmp	local01, #31 wz
13448     14 4E 05 A1 |  if_e	add	fp, #20
1344c     A7 22 02 AB |  if_e	rdlong	local03, fp
13450     14 4E 85 A1 |  if_e	sub	fp, #20
13454     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
13458     34 00 90 5D |  if_ne	jmp	#LR__1521
1345c     00 1E 06 F6 | 	mov	local01, #0
13460     A7 20 02 FB | 	rdlong	local02, fp
13464     0C 4E 05 F1 | 	add	fp, #12
13468     A7 12 02 FB | 	rdlong	arg01, fp
1346c     0C 4E 85 F1 | 	sub	fp, #12
13470     7C B8 BF FD | 	call	#_convertstring
13474     FD 14 02 F6 | 	mov	arg02, result1
13478     10 13 02 F6 | 	mov	arg01, local02
1347c     1C B7 B0 FD | 	call	#__system___string_cmp
13480     00 FA 0D F2 | 	cmp	result1, #0 wz
13484     00 1E 26 56 |  if_ne	not	local01, #0
13488     A7 1E 62 FC | 	wrlong	local01, fp
1348c     64 00 90 FD | 	jmp	#LR__1523
13490                 | LR__1521
13490                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
13490     08 4E 05 F1 | 	add	fp, #8
13494     A7 1E 02 FB | 	rdlong	local01, fp
13498     08 4E 85 F1 | 	sub	fp, #8
1349c     2B 1E 0E F2 | 	cmp	local01, #43 wz
134a0     14 4E 05 A1 |  if_e	add	fp, #20
134a4     A7 22 02 AB |  if_e	rdlong	local03, fp
134a8     14 4E 85 A1 |  if_e	sub	fp, #20
134ac     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
134b0     3C 00 90 5D |  if_ne	jmp	#LR__1522
134b4     00 1E 06 F6 | 	mov	local01, #0
134b8     A7 12 02 FB | 	rdlong	arg01, fp
134bc     30 B8 BF FD | 	call	#_convertstring
134c0     FD 20 02 F6 | 	mov	local02, result1
134c4     0C 4E 05 F1 | 	add	fp, #12
134c8     A7 12 02 FB | 	rdlong	arg01, fp
134cc     0C 4E 85 F1 | 	sub	fp, #12
134d0     1C B8 BF FD | 	call	#_convertstring
134d4     FD 14 02 F6 | 	mov	arg02, result1
134d8     10 13 02 F6 | 	mov	arg01, local02
134dc     BC B6 B0 FD | 	call	#__system___string_cmp
134e0     00 FA 0D F2 | 	cmp	result1, #0 wz
134e4     00 1E 26 56 |  if_ne	not	local01, #0
134e8     A7 1E 62 FC | 	wrlong	local01, fp
134ec     04 00 90 FD | 	jmp	#LR__1523
134f0                 | LR__1522
134f0     A7 00 68 FC | 	wrlong	#0, fp
134f4                 | LR__1523
134f4     08 4E 05 F1 | 	add	fp, #8
134f8     A7 38 68 FC | 	wrlong	#28, fp
134fc     08 4E 85 F1 | 	sub	fp, #8
13500     A7 12 02 F6 | 	mov	arg01, fp
13504     F0 73 BF FD | 	call	#_push
13508     A7 F0 03 F6 | 	mov	ptra, fp
1350c     B2 00 A0 FD | 	call	#popregs_
13510                 | _do_ne_ret
13510     2D 00 64 FD | 	ret
13514                 | 
13514                 | ' 
13514                 | ' 
13514                 | ' 
13514                 | ' ' -------------------   convert a variable on the top of stack to integer
13514                 | ' 
13514                 | ' 'sub do_converttoint'
13514                 | ' 
13514                 | ' 'dim t1 as expr_result 
13514                 | ' 'dim a1,r as integer
13514                 | ' 't1=pop() 
13514                 | ' 'select case t1.result_type
13514                 | ' '  case result_int: a1=t1.result.iresult : r=result_int
13514                 | ' '  case result_uint: a1=t1.result.uresult : r=result_int
13514                 | ' '  case result_float: a1=round(t1.result.fresult) : r=result_int
13514                 | ' '  case result_string: a1=val(t1.result.sresult) :r=result_int
13514                 | ' '  case result_string2: a1=val(convertstring(t1.result.uresult)) :r=result_int
13514                 | ' '  case result_error: a1=0: r=t1.result.uresult
13514                 | ' '  case else : a1=0 : r=1
13514                 | ' 
13514                 | ' 'end select
13514                 | ' 't1.result.iresult=a1 : t1.result_type=r : push t1 
13514                 | ' 
13514                 | ' 'end sub
13514                 | ' 
13514                 | ' function converttoint (t1 as expr_result) as integer
13514                 | _converttoint
13514     02 4A 05 F6 | 	mov	COUNT_, #2
13518     A8 00 A0 FD | 	call	#pushregs_
1351c     09 1F 02 F6 | 	mov	local01, arg01
13520                 | ' 
13520                 | ' select case t1.result_type
13520     08 1E 06 F1 | 	add	local01, #8
13524     0F 21 02 FB | 	rdlong	local02, local01
13528     08 1E 86 F1 | 	sub	local01, #8
1352c     1C 20 0E F2 | 	cmp	local02, #28 wz
13530     24 00 90 AD |  if_e	jmp	#LR__1530
13534     1D 20 0E F2 | 	cmp	local02, #29 wz
13538     24 00 90 AD |  if_e	jmp	#LR__1531
1353c     1E 20 0E F2 | 	cmp	local02, #30 wz
13540     24 00 90 AD |  if_e	jmp	#LR__1532
13544     1F 20 0E F2 | 	cmp	local02, #31 wz
13548     2C 00 90 AD |  if_e	jmp	#LR__1533
1354c     2B 20 0E F2 | 	cmp	local02, #43 wz
13550     3C 00 90 AD |  if_e	jmp	#LR__1534
13554     58 00 90 FD | 	jmp	#LR__1535
13558                 | LR__1530
13558     0F FB 01 FB | 	rdlong	result1, local01
1355c     54 00 90 FD | 	jmp	#LR__1536
13560                 | LR__1531
13560     0F FB 01 FB | 	rdlong	result1, local01
13564     4C 00 90 FD | 	jmp	#LR__1536
13568                 | LR__1532
13568     0F 13 02 FB | 	rdlong	arg01, local01
1356c     01 14 06 F6 | 	mov	arg02, #1
13570     48 E6 B0 FD | 	call	#__system___float_tointeger
13574     3C 00 90 FD | 	jmp	#LR__1536
13578                 | LR__1533
13578     0F 13 02 FB | 	rdlong	arg01, local01
1357c     5C E9 B0 FD | 	call	#__system____builtin_atof
13580     FD 12 02 F6 | 	mov	arg01, result1
13584     00 14 06 F6 | 	mov	arg02, #0
13588     30 E6 B0 FD | 	call	#__system___float_tointeger
1358c     24 00 90 FD | 	jmp	#LR__1536
13590                 | LR__1534
13590     0F 13 02 FB | 	rdlong	arg01, local01
13594     58 B7 BF FD | 	call	#_convertstring
13598     FD 12 02 F6 | 	mov	arg01, result1
1359c     3C E9 B0 FD | 	call	#__system____builtin_atof
135a0     FD 12 02 F6 | 	mov	arg01, result1
135a4     00 14 06 F6 | 	mov	arg02, #0
135a8     10 E6 B0 FD | 	call	#__system___float_tointeger
135ac     04 00 90 FD | 	jmp	#LR__1536
135b0                 | LR__1535
135b0     00 FA 05 F6 | 	mov	result1, #0
135b4                 | LR__1536
135b4     A7 F0 03 F6 | 	mov	ptra, fp
135b8     B2 00 A0 FD | 	call	#popregs_
135bc                 | _converttoint_ret
135bc     2D 00 64 FD | 	ret
135c0                 | 
135c0                 | ' 
135c0                 | ' function converttofloat (t1 as expr_result) as single
135c0                 | _converttofloat
135c0     03 4A 05 F6 | 	mov	COUNT_, #3
135c4     A8 00 A0 FD | 	call	#pushregs_
135c8     09 1F 02 F6 | 	mov	local01, arg01
135cc                 | ' 
135cc                 | ' select case t1.result_type
135cc     08 1E 06 F1 | 	add	local01, #8
135d0     0F 21 02 FB | 	rdlong	local02, local01
135d4     08 1E 86 F1 | 	sub	local01, #8
135d8     1C 20 0E F2 | 	cmp	local02, #28 wz
135dc     24 00 90 AD |  if_e	jmp	#LR__1540
135e0     1D 20 0E F2 | 	cmp	local02, #29 wz
135e4     38 00 90 AD |  if_e	jmp	#LR__1541
135e8     1E 20 0E F2 | 	cmp	local02, #30 wz
135ec     3C 00 90 AD |  if_e	jmp	#LR__1542
135f0     1F 20 0E F2 | 	cmp	local02, #31 wz
135f4     3C 00 90 AD |  if_e	jmp	#LR__1543
135f8     2B 20 0E F2 | 	cmp	local02, #43 wz
135fc     40 00 90 AD |  if_e	jmp	#LR__1544
13600     50 00 90 FD | 	jmp	#LR__1545
13604                 | LR__1540
13604     0F 13 02 FB | 	rdlong	arg01, local01
13608     09 13 52 F6 | 	abs	arg01, arg01 wc
1360c     1F 22 C6 C9 |  if_b	decod	local03, #31
13610     00 22 06 36 |  if_ae	mov	local03, #0
13614     D8 DC B0 FD | 	call	#__system___float_fromuns
13618     11 FB 61 F5 | 	xor	result1, local03
1361c     38 00 90 FD | 	jmp	#LR__1546
13620                 | LR__1541
13620     0F 13 02 FB | 	rdlong	arg01, local01
13624     C8 DC B0 FD | 	call	#__system___float_fromuns
13628     2C 00 90 FD | 	jmp	#LR__1546
1362c                 | LR__1542
1362c     0F FB 01 FB | 	rdlong	result1, local01
13630     24 00 90 FD | 	jmp	#LR__1546
13634                 | LR__1543
13634     0F 13 02 FB | 	rdlong	arg01, local01
13638     A0 E8 B0 FD | 	call	#__system____builtin_atof
1363c     18 00 90 FD | 	jmp	#LR__1546
13640                 | LR__1544
13640     0F 13 02 FB | 	rdlong	arg01, local01
13644     A8 B6 BF FD | 	call	#_convertstring
13648     FD 12 02 F6 | 	mov	arg01, result1
1364c     8C E8 B0 FD | 	call	#__system____builtin_atof
13650     04 00 90 FD | 	jmp	#LR__1546
13654                 | LR__1545
13654     00 FA 05 F6 | 	mov	result1, #0
13658                 | LR__1546
13658     A7 F0 03 F6 | 	mov	ptra, fp
1365c     B2 00 A0 FD | 	call	#popregs_
13660                 | _converttofloat_ret
13660     2D 00 64 FD | 	ret
13664                 | 
13664                 | ' 
13664                 | ' sub do_rnd
13664                 | _do_rnd
13664     01 4A 05 F6 | 	mov	COUNT_, #1
13668     A8 00 A0 FD | 	call	#pushregs_
1366c     10 F0 07 F1 | 	add	ptra, #16
13670     6A 00 00 FF 
13674     80 E4 05 F1 | 	add	objptr, ##54400
13678     F2 1E 02 FB | 	rdlong	local01, objptr
1367c     0F 17 02 F6 | 	mov	arg03, local01
13680     01 16 66 F0 | 	shl	arg03, #1
13684     0F 17 02 F1 | 	add	arg03, local01
13688     02 16 66 F0 | 	shl	arg03, #2
1368c     03 00 00 FF 
13690     04 E4 85 F1 | 	sub	objptr, ##1540
13694     F2 16 02 F1 | 	add	arg03, objptr
13698     0B 17 02 FB | 	rdlong	arg03, arg03
1369c     0C 4E 05 F1 | 	add	fp, #12
136a0     A7 16 62 FC | 	wrlong	arg03, fp
136a4                 | ' 
136a4                 | ' numpar=compiledline(lineptr_e).result.uresult
136a4                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
136a4     0C 4E 85 F1 | 	sub	fp, #12
136a8     02 16 16 F2 | 	cmp	arg03, #2 wc
136ac     67 00 00 FF 
136b0     7C E4 85 F1 | 	sub	objptr, ##52860
136b4     3C 00 90 CD |  if_b	jmp	#LR__1550
136b8     00 12 06 F6 | 	mov	arg01, #0
136bc     4C 0E B1 FD | 	call	#__system___getiolock_0484
136c0     FD 12 02 F6 | 	mov	arg01, result1
136c4     AC B4 B0 FD | 	call	#__system___lockmem
136c8     73 01 00 FF 
136cc     D0 15 06 F6 | 	mov	arg02, ##@LR__5151
136d0     00 12 06 F6 | 	mov	arg01, #0
136d4     00 16 06 F6 | 	mov	arg03, #0
136d8     A0 C1 B0 FD | 	call	#__system___basic_print_string
136dc     00 12 06 F6 | 	mov	arg01, #0
136e0     28 0E B1 FD | 	call	#__system___getiolock_0484
136e4     FD 00 68 FC | 	wrlong	#0, result1
136e8     27 12 06 F6 | 	mov	arg01, #39
136ec     08 70 B0 FD | 	call	#_printerror
136f0     2C 01 90 FD | 	jmp	#LR__1557
136f4                 | LR__1550
136f4                 | ' if numpar=0 then
136f4     0C 4E 05 F1 | 	add	fp, #12
136f8     A7 FE 09 FB | 	rdlong	result3, fp wz
136fc     0C 4E 85 F1 | 	sub	fp, #12
13700     20 00 90 5D |  if_ne	jmp	#LR__1551
13704     08 4E 05 F1 | 	add	fp, #8
13708     A7 3A 68 FC | 	wrlong	#29, fp
1370c     08 4E 85 F1 | 	sub	fp, #8
13710     1B FA 61 FD | 	getrnd	result1
13714     A7 FA 61 FC | 	wrlong	result1, fp
13718     A7 12 02 F6 | 	mov	arg01, fp
1371c     D8 71 BF FD | 	call	#_push
13720     FC 00 90 FD | 	jmp	#LR__1556
13724                 | LR__1551
13724     38 71 BF FD | 	call	#_pop
13728     A7 FA 61 FC | 	wrlong	result1, fp
1372c     04 4E 05 F1 | 	add	fp, #4
13730     A7 FC 61 FC | 	wrlong	result2, fp
13734     04 4E 05 F1 | 	add	fp, #4
13738     A7 FE 61 FC | 	wrlong	result3, fp
1373c                 | '   t1=pop()
1373c                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
1373c     08 4E 85 F1 | 	sub	fp, #8
13740     1C FE 0D F2 | 	cmp	result3, #28 wz
13744     08 4E 05 51 |  if_ne	add	fp, #8
13748     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1374c     08 4E 85 51 |  if_ne	sub	fp, #8
13750     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
13754     2C 00 90 5D |  if_ne	jmp	#LR__1552
13758     1B FA 61 FD | 	getrnd	result1
1375c     A7 1E 02 FB | 	rdlong	local01, fp
13760     0F FB 11 FD | 	qdiv	result1, local01
13764     A7 12 02 F6 | 	mov	arg01, fp
13768     19 1E 62 FD | 	getqy	local01
1376c     A7 1E 62 FC | 	wrlong	local01, fp
13770     08 4E 05 F1 | 	add	fp, #8
13774     A7 3A 68 FC | 	wrlong	#29, fp
13778     08 4E 85 F1 | 	sub	fp, #8
1377c     78 71 BF FD | 	call	#_push
13780     9C 00 90 FD | 	jmp	#LR__1555
13784                 | LR__1552
13784     08 4E 05 F1 | 	add	fp, #8
13788     A7 1E 02 FB | 	rdlong	local01, fp
1378c     08 4E 85 F1 | 	sub	fp, #8
13790     1E 1E 0E F2 | 	cmp	local01, #30 wz
13794     48 00 90 5D |  if_ne	jmp	#LR__1553
13798     A7 12 02 FB | 	rdlong	arg01, fp
1379c     00 C0 24 FF 
137a0     00 14 06 F6 | 	mov	arg02, ##1233125376
137a4     50 E1 B0 FD | 	call	#__system___float_div
137a8     FD 1E 02 F6 | 	mov	local01, result1
137ac     1B 12 62 FD | 	getrnd	arg01
137b0     74 13 06 F4 | 	bitl	arg01, #372
137b4     38 DB B0 FD | 	call	#__system___float_fromuns
137b8     FD 14 02 F6 | 	mov	arg02, result1
137bc     0F 13 02 F6 | 	mov	arg01, local01
137c0     30 DF B0 FD | 	call	#__system___float_mul
137c4     A7 FA 61 FC | 	wrlong	result1, fp
137c8     08 4E 05 F1 | 	add	fp, #8
137cc     A7 3C 68 FC | 	wrlong	#30, fp
137d0     08 4E 85 F1 | 	sub	fp, #8
137d4     A7 12 02 F6 | 	mov	arg01, fp
137d8     1C 71 BF FD | 	call	#_push
137dc     40 00 90 FD | 	jmp	#LR__1554
137e0                 | LR__1553
137e0                 | '     print "rnd: "; : printerror(40) 
137e0     00 12 06 F6 | 	mov	arg01, #0
137e4     24 0D B1 FD | 	call	#__system___getiolock_0484
137e8     FD 12 02 F6 | 	mov	arg01, result1
137ec     84 B3 B0 FD | 	call	#__system___lockmem
137f0     73 01 00 FF 
137f4     D6 15 06 F6 | 	mov	arg02, ##@LR__5152
137f8     00 12 06 F6 | 	mov	arg01, #0
137fc     00 16 06 F6 | 	mov	arg03, #0
13800     78 C0 B0 FD | 	call	#__system___basic_print_string
13804     00 12 06 F6 | 	mov	arg01, #0
13808     00 0D B1 FD | 	call	#__system___getiolock_0484
1380c     FD 00 68 FC | 	wrlong	#0, result1
13810     28 12 06 F6 | 	mov	arg01, #40
13814     E0 6E B0 FD | 	call	#_printerror
13818     A7 12 02 F6 | 	mov	arg01, fp
1381c     D8 70 BF FD | 	call	#_push
13820                 | LR__1554
13820                 | LR__1555
13820                 | LR__1556
13820                 | LR__1557
13820     A7 F0 03 F6 | 	mov	ptra, fp
13824     B2 00 A0 FD | 	call	#popregs_
13828                 | _do_rnd_ret
13828     2D 00 64 FD | 	ret
1382c                 | 
1382c                 | ' 
1382c                 | ' sub do_getenvsustain
1382c                 | _do_getenvsustain
1382c     01 4A 05 F6 | 	mov	COUNT_, #1
13830     A8 00 A0 FD | 	call	#pushregs_
13834     10 F0 07 F1 | 	add	ptra, #16
13838     6A 00 00 FF 
1383c     80 E4 05 F1 | 	add	objptr, ##54400
13840     F2 1E 02 FB | 	rdlong	local01, objptr
13844     0F 17 02 F6 | 	mov	arg03, local01
13848     01 16 66 F0 | 	shl	arg03, #1
1384c     0F 17 02 F1 | 	add	arg03, local01
13850     02 16 66 F0 | 	shl	arg03, #2
13854     03 00 00 FF 
13858     04 E4 85 F1 | 	sub	objptr, ##1540
1385c     F2 16 02 F1 | 	add	arg03, objptr
13860     0B 17 02 FB | 	rdlong	arg03, arg03
13864     0C 4E 05 F1 | 	add	fp, #12
13868     A7 16 62 FC | 	wrlong	arg03, fp
1386c                 | ' 
1386c                 | ' numpar=compiledline(lineptr_e).result.uresult
1386c                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
1386c     0C 4E 85 F1 | 	sub	fp, #12
13870     02 16 16 F2 | 	cmp	arg03, #2 wc
13874     67 00 00 FF 
13878     7C E4 85 F1 | 	sub	objptr, ##52860
1387c     0C 4E 05 C1 |  if_b	add	fp, #12
13880     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
13884     0C 4E 85 C1 |  if_b	sub	fp, #12
13888     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1560
1388c     00 12 06 F6 | 	mov	arg01, #0
13890     78 0C B1 FD | 	call	#__system___getiolock_0484
13894     FD 12 02 F6 | 	mov	arg01, result1
13898     D8 B2 B0 FD | 	call	#__system___lockmem
1389c     73 01 00 FF 
138a0     DC 15 06 F6 | 	mov	arg02, ##@LR__5153
138a4     00 12 06 F6 | 	mov	arg01, #0
138a8     00 16 06 F6 | 	mov	arg03, #0
138ac     CC BF B0 FD | 	call	#__system___basic_print_string
138b0     00 12 06 F6 | 	mov	arg01, #0
138b4     54 0C B1 FD | 	call	#__system___getiolock_0484
138b8     FD 00 68 FC | 	wrlong	#0, result1
138bc     27 12 06 F6 | 	mov	arg01, #39
138c0     34 6E B0 FD | 	call	#_printerror
138c4     64 00 90 FD | 	jmp	#LR__1561
138c8                 | LR__1560
138c8     94 6F BF FD | 	call	#_pop
138cc     FD 1E 02 F6 | 	mov	local01, result1
138d0     FE 16 02 F6 | 	mov	arg03, result2
138d4     A7 1E 62 FC | 	wrlong	local01, fp
138d8     04 4E 05 F1 | 	add	fp, #4
138dc     A7 16 62 FC | 	wrlong	arg03, fp
138e0     04 4E 05 F1 | 	add	fp, #4
138e4     A7 FE 61 FC | 	wrlong	result3, fp
138e8     08 4E 85 F1 | 	sub	fp, #8
138ec     A7 12 02 F6 | 	mov	arg01, fp
138f0     20 FC BF FD | 	call	#_converttoint
138f4     FD 1E 02 F6 | 	mov	local01, result1
138f8     01 1E 66 F0 | 	shl	local01, #1
138fc     79 00 00 FF 
13900     A4 E5 05 F1 | 	add	objptr, ##62372
13904     F2 1E 02 F1 | 	add	local01, objptr
13908     0F 1F E2 FA | 	rdword	local01, local01
1390c     A7 1E 62 FC | 	wrlong	local01, fp
13910     08 4E 05 F1 | 	add	fp, #8
13914     A7 38 68 FC | 	wrlong	#28, fp
13918     08 4E 85 F1 | 	sub	fp, #8
1391c     A7 12 02 F6 | 	mov	arg01, fp
13920     79 00 00 FF 
13924     A4 E5 85 F1 | 	sub	objptr, ##62372
13928     CC 6F BF FD | 	call	#_push
1392c                 | LR__1561
1392c     A7 F0 03 F6 | 	mov	ptra, fp
13930     B2 00 A0 FD | 	call	#popregs_
13934                 | _do_getenvsustain_ret
13934     2D 00 64 FD | 	ret
13938                 | 
13938                 | ' 
13938                 | ' sub do_sin
13938                 | _do_sin
13938     01 4A 05 F6 | 	mov	COUNT_, #1
1393c     A8 00 A0 FD | 	call	#pushregs_
13940     10 F0 07 F1 | 	add	ptra, #16
13944     6A 00 00 FF 
13948     80 E4 05 F1 | 	add	objptr, ##54400
1394c     F2 1E 02 FB | 	rdlong	local01, objptr
13950     0F 17 02 F6 | 	mov	arg03, local01
13954     01 16 66 F0 | 	shl	arg03, #1
13958     0F 17 02 F1 | 	add	arg03, local01
1395c     02 16 66 F0 | 	shl	arg03, #2
13960     03 00 00 FF 
13964     04 E4 85 F1 | 	sub	objptr, ##1540
13968     F2 16 02 F1 | 	add	arg03, objptr
1396c     0B 17 02 FB | 	rdlong	arg03, arg03
13970     0C 4E 05 F1 | 	add	fp, #12
13974     A7 16 62 FC | 	wrlong	arg03, fp
13978                 | ' 
13978                 | ' numpar=compiledline(lineptr_e).result.uresult
13978                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
13978     0C 4E 85 F1 | 	sub	fp, #12
1397c     02 16 16 F2 | 	cmp	arg03, #2 wc
13980     67 00 00 FF 
13984     7C E4 85 F1 | 	sub	objptr, ##52860
13988     0C 4E 05 C1 |  if_b	add	fp, #12
1398c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
13990     0C 4E 85 C1 |  if_b	sub	fp, #12
13994     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1570
13998     00 12 06 F6 | 	mov	arg01, #0
1399c     6C 0B B1 FD | 	call	#__system___getiolock_0484
139a0     FD 12 02 F6 | 	mov	arg01, result1
139a4     CC B1 B0 FD | 	call	#__system___lockmem
139a8     73 01 00 FF 
139ac     EC 15 06 F6 | 	mov	arg02, ##@LR__5154
139b0     00 12 06 F6 | 	mov	arg01, #0
139b4     00 16 06 F6 | 	mov	arg03, #0
139b8     C0 BE B0 FD | 	call	#__system___basic_print_string
139bc     00 12 06 F6 | 	mov	arg01, #0
139c0     48 0B B1 FD | 	call	#__system___getiolock_0484
139c4     FD 00 68 FC | 	wrlong	#0, result1
139c8     27 12 06 F6 | 	mov	arg01, #39
139cc     28 6D B0 FD | 	call	#_printerror
139d0     64 00 90 FD | 	jmp	#LR__1571
139d4                 | LR__1570
139d4     88 6E BF FD | 	call	#_pop
139d8     A7 FA 61 FC | 	wrlong	result1, fp
139dc     04 4E 05 F1 | 	add	fp, #4
139e0     A7 FC 61 FC | 	wrlong	result2, fp
139e4     04 4E 05 F1 | 	add	fp, #4
139e8     A7 FE 61 FC | 	wrlong	result3, fp
139ec     08 4E 85 F1 | 	sub	fp, #8
139f0     79 00 00 FF 
139f4     98 E5 05 F1 | 	add	objptr, ##62360
139f8     F2 1E 02 FB | 	rdlong	local01, objptr
139fc     79 00 00 FF 
13a00     98 E5 85 F1 | 	sub	objptr, ##62360
13a04     A7 12 02 F6 | 	mov	arg01, fp
13a08     B4 FB BF FD | 	call	#_converttofloat
13a0c     FD 14 02 F6 | 	mov	arg02, result1
13a10     0F 13 02 F6 | 	mov	arg01, local01
13a14     DC DC B0 FD | 	call	#__system___float_mul
13a18     FD 12 02 F6 | 	mov	arg01, result1
13a1c     10 E6 B0 FD | 	call	#__system____builtin_sinf
13a20     A7 FA 61 FC | 	wrlong	result1, fp
13a24     08 4E 05 F1 | 	add	fp, #8
13a28     A7 3C 68 FC | 	wrlong	#30, fp
13a2c     08 4E 85 F1 | 	sub	fp, #8
13a30     A7 12 02 F6 | 	mov	arg01, fp
13a34     C0 6E BF FD | 	call	#_push
13a38                 | LR__1571
13a38     A7 F0 03 F6 | 	mov	ptra, fp
13a3c     B2 00 A0 FD | 	call	#popregs_
13a40                 | _do_sin_ret
13a40     2D 00 64 FD | 	ret
13a44                 | 
13a44                 | ' 
13a44                 | ' 
13a44                 | ' sub do_mid
13a44                 | _do_mid
13a44     00 4A 05 F6 | 	mov	COUNT_, #0
13a48     A8 00 A0 FD | 	call	#pushregs_
13a4c     18 F0 07 F1 | 	add	ptra, #24
13a50     6A 00 00 FF 
13a54     80 E4 05 F1 | 	add	objptr, ##54400
13a58     F2 16 02 FB | 	rdlong	arg03, objptr
13a5c     0B 15 02 F6 | 	mov	arg02, arg03
13a60     01 14 66 F0 | 	shl	arg02, #1
13a64     0B 15 02 F1 | 	add	arg02, arg03
13a68     02 14 66 F0 | 	shl	arg02, #2
13a6c     03 00 00 FF 
13a70     04 E4 85 F1 | 	sub	objptr, ##1540
13a74     F2 14 02 F1 | 	add	arg02, objptr
13a78     0A 17 02 FB | 	rdlong	arg03, arg02
13a7c     0C 4E 05 F1 | 	add	fp, #12
13a80     A7 16 62 FC | 	wrlong	arg03, fp
13a84                 | ' 
13a84                 | ' numpar=compiledline(lineptr_e).result.uresult
13a84                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
13a84     0C 4E 85 F1 | 	sub	fp, #12
13a88     03 16 0E F2 | 	cmp	arg03, #3 wz
13a8c     67 00 00 FF 
13a90     7C E4 85 F1 | 	sub	objptr, ##52860
13a94     3C 00 90 AD |  if_e	jmp	#LR__1580
13a98     00 12 06 F6 | 	mov	arg01, #0
13a9c     6C 0A B1 FD | 	call	#__system___getiolock_0484
13aa0     FD 12 02 F6 | 	mov	arg01, result1
13aa4     CC B0 B0 FD | 	call	#__system___lockmem
13aa8     73 01 00 FF 
13aac     F2 15 06 F6 | 	mov	arg02, ##@LR__5155
13ab0     00 12 06 F6 | 	mov	arg01, #0
13ab4     00 16 06 F6 | 	mov	arg03, #0
13ab8     C0 BD B0 FD | 	call	#__system___basic_print_string
13abc     00 12 06 F6 | 	mov	arg01, #0
13ac0     48 0A B1 FD | 	call	#__system___getiolock_0484
13ac4     FD 00 68 FC | 	wrlong	#0, result1
13ac8     27 12 06 F6 | 	mov	arg01, #39
13acc     28 6C B0 FD | 	call	#_printerror
13ad0     28 01 90 FD | 	jmp	#LR__1583
13ad4                 | LR__1580
13ad4     88 6D BF FD | 	call	#_pop
13ad8     FF 16 02 F6 | 	mov	arg03, result3
13adc     A7 FA 61 FC | 	wrlong	result1, fp
13ae0     04 4E 05 F1 | 	add	fp, #4
13ae4     A7 FC 61 FC | 	wrlong	result2, fp
13ae8     04 4E 05 F1 | 	add	fp, #4
13aec     A7 16 62 FC | 	wrlong	arg03, fp
13af0     08 4E 85 F1 | 	sub	fp, #8
13af4     A7 12 02 F6 | 	mov	arg01, fp
13af8     18 FA BF FD | 	call	#_converttoint
13afc     FD 16 02 F6 | 	mov	arg03, result1
13b00     14 4E 05 F1 | 	add	fp, #20
13b04     A7 16 62 FC | 	wrlong	arg03, fp
13b08     14 4E 85 F1 | 	sub	fp, #20
13b0c     50 6D BF FD | 	call	#_pop
13b10     FF 16 02 F6 | 	mov	arg03, result3
13b14     A7 FA 61 FC | 	wrlong	result1, fp
13b18     04 4E 05 F1 | 	add	fp, #4
13b1c     A7 FC 61 FC | 	wrlong	result2, fp
13b20     04 4E 05 F1 | 	add	fp, #4
13b24     A7 16 62 FC | 	wrlong	arg03, fp
13b28     08 4E 85 F1 | 	sub	fp, #8
13b2c     A7 12 02 F6 | 	mov	arg01, fp
13b30     E0 F9 BF FD | 	call	#_converttoint
13b34     FD 16 02 F6 | 	mov	arg03, result1
13b38     10 4E 05 F1 | 	add	fp, #16
13b3c     A7 16 62 FC | 	wrlong	arg03, fp
13b40     10 4E 85 F1 | 	sub	fp, #16
13b44     18 6D BF FD | 	call	#_pop
13b48     FF 16 02 F6 | 	mov	arg03, result3
13b4c     A7 FA 61 FC | 	wrlong	result1, fp
13b50     04 4E 05 F1 | 	add	fp, #4
13b54     A7 FC 61 FC | 	wrlong	result2, fp
13b58     04 4E 05 F1 | 	add	fp, #4
13b5c     A7 16 62 FC | 	wrlong	arg03, fp
13b60                 | ' t1=pop() : arg2=converttoint(t1)
13b60                 | ' t1=pop() : arg1=converttoint(t1)
13b60                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13b60     08 4E 85 F1 | 	sub	fp, #8
13b64     2B 16 0E F2 | 	cmp	arg03, #43 wz
13b68     18 00 90 5D |  if_ne	jmp	#LR__1581
13b6c     A7 12 02 FB | 	rdlong	arg01, fp
13b70     7C B1 BF FD | 	call	#_convertstring
13b74     A7 FA 61 FC | 	wrlong	result1, fp
13b78     08 4E 05 F1 | 	add	fp, #8
13b7c     A7 3E 68 FC | 	wrlong	#31, fp
13b80     08 4E 85 F1 | 	sub	fp, #8
13b84                 | LR__1581
13b84                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
13b84     08 4E 05 F1 | 	add	fp, #8
13b88     A7 16 02 FB | 	rdlong	arg03, fp
13b8c     08 4E 85 F1 | 	sub	fp, #8
13b90     1F 16 0E F2 | 	cmp	arg03, #31 wz
13b94     3C 00 90 AD |  if_e	jmp	#LR__1582
13b98     00 12 06 F6 | 	mov	arg01, #0
13b9c     6C 09 B1 FD | 	call	#__system___getiolock_0484
13ba0     FD 12 02 F6 | 	mov	arg01, result1
13ba4     CC AF B0 FD | 	call	#__system___lockmem
13ba8     73 01 00 FF 
13bac     F9 15 06 F6 | 	mov	arg02, ##@LR__5156
13bb0     00 12 06 F6 | 	mov	arg01, #0
13bb4     00 16 06 F6 | 	mov	arg03, #0
13bb8     C0 BC B0 FD | 	call	#__system___basic_print_string
13bbc     00 12 06 F6 | 	mov	arg01, #0
13bc0     48 09 B1 FD | 	call	#__system___getiolock_0484
13bc4     FD 00 68 FC | 	wrlong	#0, result1
13bc8     0F 12 06 F6 | 	mov	arg01, #15
13bcc     28 6B B0 FD | 	call	#_printerror
13bd0     28 00 90 FD | 	jmp	#LR__1583
13bd4                 | LR__1582
13bd4     A7 12 02 FB | 	rdlong	arg01, fp
13bd8     10 4E 05 F1 | 	add	fp, #16
13bdc     A7 14 02 FB | 	rdlong	arg02, fp
13be0     04 4E 05 F1 | 	add	fp, #4
13be4     A7 16 02 FB | 	rdlong	arg03, fp
13be8     14 4E 85 F1 | 	sub	fp, #20
13bec     E4 D0 B0 FD | 	call	#__system__Mid_S
13bf0     A7 FA 61 FC | 	wrlong	result1, fp
13bf4     A7 12 02 F6 | 	mov	arg01, fp
13bf8     FC 6C BF FD | 	call	#_push
13bfc                 | LR__1583
13bfc     A7 F0 03 F6 | 	mov	ptra, fp
13c00     B2 00 A0 FD | 	call	#popregs_
13c04                 | _do_mid_ret
13c04     2D 00 64 FD | 	ret
13c08                 | 
13c08                 | ' 
13c08                 | ' sub do_right
13c08                 | _do_right
13c08     00 4A 05 F6 | 	mov	COUNT_, #0
13c0c     A8 00 A0 FD | 	call	#pushregs_
13c10     14 F0 07 F1 | 	add	ptra, #20
13c14     6A 00 00 FF 
13c18     80 E4 05 F1 | 	add	objptr, ##54400
13c1c     F2 16 02 FB | 	rdlong	arg03, objptr
13c20     0B 15 02 F6 | 	mov	arg02, arg03
13c24     01 14 66 F0 | 	shl	arg02, #1
13c28     0B 15 02 F1 | 	add	arg02, arg03
13c2c     02 14 66 F0 | 	shl	arg02, #2
13c30     03 00 00 FF 
13c34     04 E4 85 F1 | 	sub	objptr, ##1540
13c38     F2 14 02 F1 | 	add	arg02, objptr
13c3c     0A 17 02 FB | 	rdlong	arg03, arg02
13c40     0C 4E 05 F1 | 	add	fp, #12
13c44     A7 16 62 FC | 	wrlong	arg03, fp
13c48                 | ' 
13c48                 | ' numpar=compiledline(lineptr_e).result.uresult
13c48                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
13c48     0C 4E 85 F1 | 	sub	fp, #12
13c4c     02 16 0E F2 | 	cmp	arg03, #2 wz
13c50     67 00 00 FF 
13c54     7C E4 85 F1 | 	sub	objptr, ##52860
13c58     3C 00 90 AD |  if_e	jmp	#LR__1590
13c5c     00 12 06 F6 | 	mov	arg01, #0
13c60     A8 08 B1 FD | 	call	#__system___getiolock_0484
13c64     FD 12 02 F6 | 	mov	arg01, result1
13c68     08 AF B0 FD | 	call	#__system___lockmem
13c6c     74 01 00 FF 
13c70     00 14 06 F6 | 	mov	arg02, ##@LR__5157
13c74     00 12 06 F6 | 	mov	arg01, #0
13c78     00 16 06 F6 | 	mov	arg03, #0
13c7c     FC BB B0 FD | 	call	#__system___basic_print_string
13c80     00 12 06 F6 | 	mov	arg01, #0
13c84     84 08 B1 FD | 	call	#__system___getiolock_0484
13c88     FD 00 68 FC | 	wrlong	#0, result1
13c8c     27 12 06 F6 | 	mov	arg01, #39
13c90     64 6A B0 FD | 	call	#_printerror
13c94     E8 00 90 FD | 	jmp	#LR__1593
13c98                 | LR__1590
13c98     C4 6B BF FD | 	call	#_pop
13c9c     FF 16 02 F6 | 	mov	arg03, result3
13ca0     A7 FA 61 FC | 	wrlong	result1, fp
13ca4     04 4E 05 F1 | 	add	fp, #4
13ca8     A7 FC 61 FC | 	wrlong	result2, fp
13cac     04 4E 05 F1 | 	add	fp, #4
13cb0     A7 16 62 FC | 	wrlong	arg03, fp
13cb4     08 4E 85 F1 | 	sub	fp, #8
13cb8     A7 12 02 F6 | 	mov	arg01, fp
13cbc     54 F8 BF FD | 	call	#_converttoint
13cc0     FD 16 02 F6 | 	mov	arg03, result1
13cc4     10 4E 05 F1 | 	add	fp, #16
13cc8     A7 16 62 FC | 	wrlong	arg03, fp
13ccc     10 4E 85 F1 | 	sub	fp, #16
13cd0     8C 6B BF FD | 	call	#_pop
13cd4     FF 16 02 F6 | 	mov	arg03, result3
13cd8     A7 FA 61 FC | 	wrlong	result1, fp
13cdc     04 4E 05 F1 | 	add	fp, #4
13ce0     A7 FC 61 FC | 	wrlong	result2, fp
13ce4     04 4E 05 F1 | 	add	fp, #4
13ce8     A7 16 62 FC | 	wrlong	arg03, fp
13cec                 | ' t1=pop() : arg=converttoint(t1)
13cec                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13cec     08 4E 85 F1 | 	sub	fp, #8
13cf0     2B 16 0E F2 | 	cmp	arg03, #43 wz
13cf4     18 00 90 5D |  if_ne	jmp	#LR__1591
13cf8     A7 12 02 FB | 	rdlong	arg01, fp
13cfc     F0 AF BF FD | 	call	#_convertstring
13d00     A7 FA 61 FC | 	wrlong	result1, fp
13d04     08 4E 05 F1 | 	add	fp, #8
13d08     A7 3E 68 FC | 	wrlong	#31, fp
13d0c     08 4E 85 F1 | 	sub	fp, #8
13d10                 | LR__1591
13d10                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
13d10     08 4E 05 F1 | 	add	fp, #8
13d14     A7 16 02 FB | 	rdlong	arg03, fp
13d18     08 4E 85 F1 | 	sub	fp, #8
13d1c     1F 16 0E F2 | 	cmp	arg03, #31 wz
13d20     3C 00 90 AD |  if_e	jmp	#LR__1592
13d24     00 12 06 F6 | 	mov	arg01, #0
13d28     E0 07 B1 FD | 	call	#__system___getiolock_0484
13d2c     FD 12 02 F6 | 	mov	arg01, result1
13d30     40 AE B0 FD | 	call	#__system___lockmem
13d34     74 01 00 FF 
13d38     09 14 06 F6 | 	mov	arg02, ##@LR__5158
13d3c     00 12 06 F6 | 	mov	arg01, #0
13d40     00 16 06 F6 | 	mov	arg03, #0
13d44     34 BB B0 FD | 	call	#__system___basic_print_string
13d48     00 12 06 F6 | 	mov	arg01, #0
13d4c     BC 07 B1 FD | 	call	#__system___getiolock_0484
13d50     FD 00 68 FC | 	wrlong	#0, result1
13d54     0F 12 06 F6 | 	mov	arg01, #15
13d58     9C 69 B0 FD | 	call	#_printerror
13d5c     20 00 90 FD | 	jmp	#LR__1593
13d60                 | LR__1592
13d60     A7 12 02 FB | 	rdlong	arg01, fp
13d64     10 4E 05 F1 | 	add	fp, #16
13d68     A7 14 02 FB | 	rdlong	arg02, fp
13d6c     10 4E 85 F1 | 	sub	fp, #16
13d70     D0 CE B0 FD | 	call	#__system__Right_S
13d74     A7 FA 61 FC | 	wrlong	result1, fp
13d78     A7 12 02 F6 | 	mov	arg01, fp
13d7c     78 6B BF FD | 	call	#_push
13d80                 | LR__1593
13d80     A7 F0 03 F6 | 	mov	ptra, fp
13d84     B2 00 A0 FD | 	call	#popregs_
13d88                 | _do_right_ret
13d88     2D 00 64 FD | 	ret
13d8c                 | 
13d8c                 | ' 
13d8c                 | ' sub do_left
13d8c                 | _do_left
13d8c     00 4A 05 F6 | 	mov	COUNT_, #0
13d90     A8 00 A0 FD | 	call	#pushregs_
13d94     14 F0 07 F1 | 	add	ptra, #20
13d98     6A 00 00 FF 
13d9c     80 E4 05 F1 | 	add	objptr, ##54400
13da0     F2 16 02 FB | 	rdlong	arg03, objptr
13da4     0B 15 02 F6 | 	mov	arg02, arg03
13da8     01 14 66 F0 | 	shl	arg02, #1
13dac     0B 15 02 F1 | 	add	arg02, arg03
13db0     02 14 66 F0 | 	shl	arg02, #2
13db4     03 00 00 FF 
13db8     04 E4 85 F1 | 	sub	objptr, ##1540
13dbc     F2 14 02 F1 | 	add	arg02, objptr
13dc0     0A 17 02 FB | 	rdlong	arg03, arg02
13dc4     0C 4E 05 F1 | 	add	fp, #12
13dc8     A7 16 62 FC | 	wrlong	arg03, fp
13dcc                 | ' 
13dcc                 | ' numpar=compiledline(lineptr_e).result.uresult
13dcc                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
13dcc     0C 4E 85 F1 | 	sub	fp, #12
13dd0     02 16 0E F2 | 	cmp	arg03, #2 wz
13dd4     67 00 00 FF 
13dd8     7C E4 85 F1 | 	sub	objptr, ##52860
13ddc     3C 00 90 AD |  if_e	jmp	#LR__1600
13de0     00 12 06 F6 | 	mov	arg01, #0
13de4     24 07 B1 FD | 	call	#__system___getiolock_0484
13de8     FD 12 02 F6 | 	mov	arg01, result1
13dec     84 AD B0 FD | 	call	#__system___lockmem
13df0     74 01 00 FF 
13df4     12 14 06 F6 | 	mov	arg02, ##@LR__5159
13df8     00 12 06 F6 | 	mov	arg01, #0
13dfc     00 16 06 F6 | 	mov	arg03, #0
13e00     78 BA B0 FD | 	call	#__system___basic_print_string
13e04     00 12 06 F6 | 	mov	arg01, #0
13e08     00 07 B1 FD | 	call	#__system___getiolock_0484
13e0c     FD 00 68 FC | 	wrlong	#0, result1
13e10     27 12 06 F6 | 	mov	arg01, #39
13e14     E0 68 B0 FD | 	call	#_printerror
13e18     E8 00 90 FD | 	jmp	#LR__1603
13e1c                 | LR__1600
13e1c     40 6A BF FD | 	call	#_pop
13e20     FF 16 02 F6 | 	mov	arg03, result3
13e24     A7 FA 61 FC | 	wrlong	result1, fp
13e28     04 4E 05 F1 | 	add	fp, #4
13e2c     A7 FC 61 FC | 	wrlong	result2, fp
13e30     04 4E 05 F1 | 	add	fp, #4
13e34     A7 16 62 FC | 	wrlong	arg03, fp
13e38     08 4E 85 F1 | 	sub	fp, #8
13e3c     A7 12 02 F6 | 	mov	arg01, fp
13e40     D0 F6 BF FD | 	call	#_converttoint
13e44     FD 16 02 F6 | 	mov	arg03, result1
13e48     10 4E 05 F1 | 	add	fp, #16
13e4c     A7 16 62 FC | 	wrlong	arg03, fp
13e50     10 4E 85 F1 | 	sub	fp, #16
13e54     08 6A BF FD | 	call	#_pop
13e58     FF 16 02 F6 | 	mov	arg03, result3
13e5c     A7 FA 61 FC | 	wrlong	result1, fp
13e60     04 4E 05 F1 | 	add	fp, #4
13e64     A7 FC 61 FC | 	wrlong	result2, fp
13e68     04 4E 05 F1 | 	add	fp, #4
13e6c     A7 16 62 FC | 	wrlong	arg03, fp
13e70                 | ' t1=pop() : arg=converttoint(t1)
13e70                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13e70     08 4E 85 F1 | 	sub	fp, #8
13e74     2B 16 0E F2 | 	cmp	arg03, #43 wz
13e78     18 00 90 5D |  if_ne	jmp	#LR__1601
13e7c     A7 12 02 FB | 	rdlong	arg01, fp
13e80     6C AE BF FD | 	call	#_convertstring
13e84     A7 FA 61 FC | 	wrlong	result1, fp
13e88     08 4E 05 F1 | 	add	fp, #8
13e8c     A7 3E 68 FC | 	wrlong	#31, fp
13e90     08 4E 85 F1 | 	sub	fp, #8
13e94                 | LR__1601
13e94                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
13e94     08 4E 05 F1 | 	add	fp, #8
13e98     A7 16 02 FB | 	rdlong	arg03, fp
13e9c     08 4E 85 F1 | 	sub	fp, #8
13ea0     1F 16 0E F2 | 	cmp	arg03, #31 wz
13ea4     3C 00 90 AD |  if_e	jmp	#LR__1602
13ea8     00 12 06 F6 | 	mov	arg01, #0
13eac     5C 06 B1 FD | 	call	#__system___getiolock_0484
13eb0     FD 12 02 F6 | 	mov	arg01, result1
13eb4     BC AC B0 FD | 	call	#__system___lockmem
13eb8     74 01 00 FF 
13ebc     1A 14 06 F6 | 	mov	arg02, ##@LR__5160
13ec0     00 12 06 F6 | 	mov	arg01, #0
13ec4     00 16 06 F6 | 	mov	arg03, #0
13ec8     B0 B9 B0 FD | 	call	#__system___basic_print_string
13ecc     00 12 06 F6 | 	mov	arg01, #0
13ed0     38 06 B1 FD | 	call	#__system___getiolock_0484
13ed4     FD 00 68 FC | 	wrlong	#0, result1
13ed8     0F 12 06 F6 | 	mov	arg01, #15
13edc     18 68 B0 FD | 	call	#_printerror
13ee0     20 00 90 FD | 	jmp	#LR__1603
13ee4                 | LR__1602
13ee4     A7 12 02 FB | 	rdlong	arg01, fp
13ee8     10 4E 05 F1 | 	add	fp, #16
13eec     A7 14 02 FB | 	rdlong	arg02, fp
13ef0     10 4E 85 F1 | 	sub	fp, #16
13ef4     C4 CC B0 FD | 	call	#__system__Left_S
13ef8     A7 FA 61 FC | 	wrlong	result1, fp
13efc     A7 12 02 F6 | 	mov	arg01, fp
13f00     F4 69 BF FD | 	call	#_push
13f04                 | LR__1603
13f04     A7 F0 03 F6 | 	mov	ptra, fp
13f08     B2 00 A0 FD | 	call	#popregs_
13f0c                 | _do_left_ret
13f0c     2D 00 64 FD | 	ret
13f10                 | 
13f10                 | ' 
13f10                 | ' sub do_asc
13f10                 | _do_asc
13f10     01 4A 05 F6 | 	mov	COUNT_, #1
13f14     A8 00 A0 FD | 	call	#pushregs_
13f18     14 F0 07 F1 | 	add	ptra, #20
13f1c     6A 00 00 FF 
13f20     80 E4 05 F1 | 	add	objptr, ##54400
13f24     F2 1E 02 FB | 	rdlong	local01, objptr
13f28     0F 17 02 F6 | 	mov	arg03, local01
13f2c     01 16 66 F0 | 	shl	arg03, #1
13f30     0F 17 02 F1 | 	add	arg03, local01
13f34     02 16 66 F0 | 	shl	arg03, #2
13f38     03 00 00 FF 
13f3c     04 E4 85 F1 | 	sub	objptr, ##1540
13f40     F2 16 02 F1 | 	add	arg03, objptr
13f44     0B 17 02 FB | 	rdlong	arg03, arg03
13f48     0C 4E 05 F1 | 	add	fp, #12
13f4c     A7 16 62 FC | 	wrlong	arg03, fp
13f50                 | ' 
13f50                 | ' numpar=compiledline(lineptr_e).result.uresult
13f50                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
13f50     0C 4E 85 F1 | 	sub	fp, #12
13f54     02 16 16 F2 | 	cmp	arg03, #2 wc
13f58     67 00 00 FF 
13f5c     7C E4 85 F1 | 	sub	objptr, ##52860
13f60     0C 4E 05 C1 |  if_b	add	fp, #12
13f64     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
13f68     0C 4E 85 C1 |  if_b	sub	fp, #12
13f6c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1610
13f70     00 12 06 F6 | 	mov	arg01, #0
13f74     94 05 B1 FD | 	call	#__system___getiolock_0484
13f78     FD 12 02 F6 | 	mov	arg01, result1
13f7c     F4 AB B0 FD | 	call	#__system___lockmem
13f80     74 01 00 FF 
13f84     22 14 06 F6 | 	mov	arg02, ##@LR__5161
13f88     00 12 06 F6 | 	mov	arg01, #0
13f8c     00 16 06 F6 | 	mov	arg03, #0
13f90     E8 B8 B0 FD | 	call	#__system___basic_print_string
13f94     00 12 06 F6 | 	mov	arg01, #0
13f98     70 05 B1 FD | 	call	#__system___getiolock_0484
13f9c     FD 00 68 FC | 	wrlong	#0, result1
13fa0     27 12 06 F6 | 	mov	arg01, #39
13fa4     50 67 B0 FD | 	call	#_printerror
13fa8     B0 00 90 FD | 	jmp	#LR__1613
13fac                 | LR__1610
13fac     B0 68 BF FD | 	call	#_pop
13fb0     FF 16 02 F6 | 	mov	arg03, result3
13fb4     A7 FA 61 FC | 	wrlong	result1, fp
13fb8     04 4E 05 F1 | 	add	fp, #4
13fbc     A7 FC 61 FC | 	wrlong	result2, fp
13fc0     04 4E 05 F1 | 	add	fp, #4
13fc4     A7 16 62 FC | 	wrlong	arg03, fp
13fc8                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13fc8     08 4E 85 F1 | 	sub	fp, #8
13fcc     2B 16 0E F2 | 	cmp	arg03, #43 wz
13fd0     18 00 90 5D |  if_ne	jmp	#LR__1611
13fd4     A7 12 02 FB | 	rdlong	arg01, fp
13fd8     14 AD BF FD | 	call	#_convertstring
13fdc     A7 FA 61 FC | 	wrlong	result1, fp
13fe0     08 4E 05 F1 | 	add	fp, #8
13fe4     A7 3E 68 FC | 	wrlong	#31, fp
13fe8     08 4E 85 F1 | 	sub	fp, #8
13fec                 | LR__1611
13fec                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
13fec     08 4E 05 F1 | 	add	fp, #8
13ff0     A7 16 02 FB | 	rdlong	arg03, fp
13ff4     08 4E 85 F1 | 	sub	fp, #8
13ff8     1F 16 0E F2 | 	cmp	arg03, #31 wz
13ffc     3C 00 90 AD |  if_e	jmp	#LR__1612
14000     00 12 06 F6 | 	mov	arg01, #0
14004     04 05 B1 FD | 	call	#__system___getiolock_0484
14008     FD 12 02 F6 | 	mov	arg01, result1
1400c     64 AB B0 FD | 	call	#__system___lockmem
14010     74 01 00 FF 
14014     28 14 06 F6 | 	mov	arg02, ##@LR__5162
14018     00 12 06 F6 | 	mov	arg01, #0
1401c     00 16 06 F6 | 	mov	arg03, #0
14020     58 B8 B0 FD | 	call	#__system___basic_print_string
14024     00 12 06 F6 | 	mov	arg01, #0
14028     E0 04 B1 FD | 	call	#__system___getiolock_0484
1402c     FD 00 68 FC | 	wrlong	#0, result1
14030     0F 12 06 F6 | 	mov	arg01, #15
14034     C0 66 B0 FD | 	call	#_printerror
14038     20 00 90 FD | 	jmp	#LR__1613
1403c                 | LR__1612
1403c     A7 1E 02 FB | 	rdlong	local01, fp
14040     0F 1F C2 FA | 	rdbyte	local01, local01
14044     A7 1E 62 FC | 	wrlong	local01, fp
14048     08 4E 05 F1 | 	add	fp, #8
1404c     A7 38 68 FC | 	wrlong	#28, fp
14050     08 4E 85 F1 | 	sub	fp, #8
14054     A7 12 02 F6 | 	mov	arg01, fp
14058     9C 68 BF FD | 	call	#_push
1405c                 | LR__1613
1405c     A7 F0 03 F6 | 	mov	ptra, fp
14060     B2 00 A0 FD | 	call	#popregs_
14064                 | _do_asc_ret
14064     2D 00 64 FD | 	ret
14068                 | 
14068                 | ' 
14068                 | ' sub do_len
14068                 | _do_len
14068     02 4A 05 F6 | 	mov	COUNT_, #2
1406c     A8 00 A0 FD | 	call	#pushregs_
14070     14 F0 07 F1 | 	add	ptra, #20
14074     6A 00 00 FF 
14078     80 E4 05 F1 | 	add	objptr, ##54400
1407c     F2 1E 02 FB | 	rdlong	local01, objptr
14080     0F 17 02 F6 | 	mov	arg03, local01
14084     01 16 66 F0 | 	shl	arg03, #1
14088     0F 17 02 F1 | 	add	arg03, local01
1408c     02 16 66 F0 | 	shl	arg03, #2
14090     03 00 00 FF 
14094     04 E4 85 F1 | 	sub	objptr, ##1540
14098     F2 16 02 F1 | 	add	arg03, objptr
1409c     0B 17 02 FB | 	rdlong	arg03, arg03
140a0     0C 4E 05 F1 | 	add	fp, #12
140a4     A7 16 62 FC | 	wrlong	arg03, fp
140a8                 | ' 
140a8                 | ' numpar=compiledline(lineptr_e).result.uresult
140a8                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
140a8     0C 4E 85 F1 | 	sub	fp, #12
140ac     02 16 16 F2 | 	cmp	arg03, #2 wc
140b0     67 00 00 FF 
140b4     7C E4 85 F1 | 	sub	objptr, ##52860
140b8     0C 4E 05 C1 |  if_b	add	fp, #12
140bc     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
140c0     0C 4E 85 C1 |  if_b	sub	fp, #12
140c4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1620
140c8     00 12 06 F6 | 	mov	arg01, #0
140cc     3C 04 B1 FD | 	call	#__system___getiolock_0484
140d0     FD 12 02 F6 | 	mov	arg01, result1
140d4     9C AA B0 FD | 	call	#__system___lockmem
140d8     74 01 00 FF 
140dc     2E 14 06 F6 | 	mov	arg02, ##@LR__5163
140e0     00 12 06 F6 | 	mov	arg01, #0
140e4     00 16 06 F6 | 	mov	arg03, #0
140e8     90 B7 B0 FD | 	call	#__system___basic_print_string
140ec     00 12 06 F6 | 	mov	arg01, #0
140f0     18 04 B1 FD | 	call	#__system___getiolock_0484
140f4     FD 00 68 FC | 	wrlong	#0, result1
140f8     27 12 06 F6 | 	mov	arg01, #39
140fc     F8 65 B0 FD | 	call	#_printerror
14100     C4 00 90 FD | 	jmp	#LR__1625
14104                 | LR__1620
14104     58 67 BF FD | 	call	#_pop
14108     FF 16 02 F6 | 	mov	arg03, result3
1410c     A7 FA 61 FC | 	wrlong	result1, fp
14110     04 4E 05 F1 | 	add	fp, #4
14114     A7 FC 61 FC | 	wrlong	result2, fp
14118     04 4E 05 F1 | 	add	fp, #4
1411c     A7 16 62 FC | 	wrlong	arg03, fp
14120                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14120     08 4E 85 F1 | 	sub	fp, #8
14124     2B 16 0E F2 | 	cmp	arg03, #43 wz
14128     18 00 90 5D |  if_ne	jmp	#LR__1621
1412c     A7 12 02 FB | 	rdlong	arg01, fp
14130     BC AB BF FD | 	call	#_convertstring
14134     A7 FA 61 FC | 	wrlong	result1, fp
14138     08 4E 05 F1 | 	add	fp, #8
1413c     A7 3E 68 FC | 	wrlong	#31, fp
14140     08 4E 85 F1 | 	sub	fp, #8
14144                 | LR__1621
14144                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
14144     08 4E 05 F1 | 	add	fp, #8
14148     A7 16 02 FB | 	rdlong	arg03, fp
1414c     08 4E 85 F1 | 	sub	fp, #8
14150     1F 16 0E F2 | 	cmp	arg03, #31 wz
14154     3C 00 90 AD |  if_e	jmp	#LR__1622
14158     00 12 06 F6 | 	mov	arg01, #0
1415c     AC 03 B1 FD | 	call	#__system___getiolock_0484
14160     FD 12 02 F6 | 	mov	arg01, result1
14164     0C AA B0 FD | 	call	#__system___lockmem
14168     74 01 00 FF 
1416c     34 14 06 F6 | 	mov	arg02, ##@LR__5164
14170     00 12 06 F6 | 	mov	arg01, #0
14174     00 16 06 F6 | 	mov	arg03, #0
14178     00 B7 B0 FD | 	call	#__system___basic_print_string
1417c     00 12 06 F6 | 	mov	arg01, #0
14180     88 03 B1 FD | 	call	#__system___getiolock_0484
14184     FD 00 68 FC | 	wrlong	#0, result1
14188     0F 12 06 F6 | 	mov	arg01, #15
1418c     68 65 B0 FD | 	call	#_printerror
14190     34 00 90 FD | 	jmp	#LR__1625
14194                 | LR__1622
14194     A7 12 02 FB | 	rdlong	arg01, fp
14198     09 21 02 F6 | 	mov	local02, arg01
1419c     97 06 48 FB | 	callpa	#(@LR__1624-@LR__1623)>>2,fcache_load_ptr_
141a0                 | LR__1623
141a0     10 FB C9 FA | 	rdbyte	result1, local02 wz
141a4     01 20 06 51 |  if_ne	add	local02, #1
141a8     F4 FF 9F 5D |  if_ne	jmp	#LR__1623
141ac                 | LR__1624
141ac     09 21 82 F1 | 	sub	local02, arg01
141b0     A7 20 62 FC | 	wrlong	local02, fp
141b4     08 4E 05 F1 | 	add	fp, #8
141b8     A7 38 68 FC | 	wrlong	#28, fp
141bc     08 4E 85 F1 | 	sub	fp, #8
141c0     A7 12 02 F6 | 	mov	arg01, fp
141c4     30 67 BF FD | 	call	#_push
141c8                 | LR__1625
141c8     A7 F0 03 F6 | 	mov	ptra, fp
141cc     B2 00 A0 FD | 	call	#popregs_
141d0                 | _do_len_ret
141d0     2D 00 64 FD | 	ret
141d4                 | 
141d4                 | ' 
141d4                 | ' sub do_chr
141d4                 | _do_chr
141d4     01 4A 05 F6 | 	mov	COUNT_, #1
141d8     A8 00 A0 FD | 	call	#pushregs_
141dc     14 F0 07 F1 | 	add	ptra, #20
141e0     6A 00 00 FF 
141e4     80 E4 05 F1 | 	add	objptr, ##54400
141e8     F2 1E 02 FB | 	rdlong	local01, objptr
141ec     0F 17 02 F6 | 	mov	arg03, local01
141f0     01 16 66 F0 | 	shl	arg03, #1
141f4     0F 17 02 F1 | 	add	arg03, local01
141f8     02 16 66 F0 | 	shl	arg03, #2
141fc     03 00 00 FF 
14200     04 E4 85 F1 | 	sub	objptr, ##1540
14204     F2 16 02 F1 | 	add	arg03, objptr
14208     0B 17 02 FB | 	rdlong	arg03, arg03
1420c     0C 4E 05 F1 | 	add	fp, #12
14210     A7 16 62 FC | 	wrlong	arg03, fp
14214                 | ' 
14214                 | ' numpar=compiledline(lineptr_e).result.uresult
14214                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
14214     0C 4E 85 F1 | 	sub	fp, #12
14218     02 16 16 F2 | 	cmp	arg03, #2 wc
1421c     67 00 00 FF 
14220     7C E4 85 F1 | 	sub	objptr, ##52860
14224     0C 4E 05 C1 |  if_b	add	fp, #12
14228     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1422c     0C 4E 85 C1 |  if_b	sub	fp, #12
14230     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1630
14234     00 12 06 F6 | 	mov	arg01, #0
14238     D0 02 B1 FD | 	call	#__system___getiolock_0484
1423c     FD 12 02 F6 | 	mov	arg01, result1
14240     30 A9 B0 FD | 	call	#__system___lockmem
14244     74 01 00 FF 
14248     3A 14 06 F6 | 	mov	arg02, ##@LR__5165
1424c     00 12 06 F6 | 	mov	arg01, #0
14250     00 16 06 F6 | 	mov	arg03, #0
14254     24 B6 B0 FD | 	call	#__system___basic_print_string
14258     00 12 06 F6 | 	mov	arg01, #0
1425c     AC 02 B1 FD | 	call	#__system___getiolock_0484
14260     FD 00 68 FC | 	wrlong	#0, result1
14264     27 12 06 F6 | 	mov	arg01, #39
14268     8C 64 B0 FD | 	call	#_printerror
1426c     54 00 90 FD | 	jmp	#LR__1631
14270                 | LR__1630
14270     EC 65 BF FD | 	call	#_pop
14274     FF 1E 02 F6 | 	mov	local01, result3
14278     A7 FA 61 FC | 	wrlong	result1, fp
1427c     04 4E 05 F1 | 	add	fp, #4
14280     A7 FC 61 FC | 	wrlong	result2, fp
14284     04 4E 05 F1 | 	add	fp, #4
14288     A7 1E 62 FC | 	wrlong	local01, fp
1428c     08 4E 85 F1 | 	sub	fp, #8
14290     A7 12 02 F6 | 	mov	arg01, fp
14294     7C F2 BF FD | 	call	#_converttoint
14298     10 4E 05 F1 | 	add	fp, #16
1429c     A7 FA 61 FC | 	wrlong	result1, fp
142a0     FD 12 02 F6 | 	mov	arg01, result1
142a4     10 4E 85 F1 | 	sub	fp, #16
142a8     D4 CA B0 FD | 	call	#__system__Chr_S
142ac     A7 FA 61 FC | 	wrlong	result1, fp
142b0     08 4E 05 F1 | 	add	fp, #8
142b4     A7 3E 68 FC | 	wrlong	#31, fp
142b8     08 4E 85 F1 | 	sub	fp, #8
142bc     A7 12 02 F6 | 	mov	arg01, fp
142c0     34 66 BF FD | 	call	#_push
142c4                 | LR__1631
142c4     A7 F0 03 F6 | 	mov	ptra, fp
142c8     B2 00 A0 FD | 	call	#popregs_
142cc                 | _do_chr_ret
142cc     2D 00 64 FD | 	ret
142d0                 | 
142d0                 | ' 
142d0                 | ' sub do_val
142d0                 | _do_val
142d0     03 4A 05 F6 | 	mov	COUNT_, #3
142d4     A8 00 A0 FD | 	call	#pushregs_
142d8     20 F0 07 F1 | 	add	ptra, #32
142dc     6A 00 00 FF 
142e0     80 E4 05 F1 | 	add	objptr, ##54400
142e4     F2 16 02 FB | 	rdlong	arg03, objptr
142e8     0B 1F 02 F6 | 	mov	local01, arg03
142ec     01 1E 66 F0 | 	shl	local01, #1
142f0     0B 1F 02 F1 | 	add	local01, arg03
142f4     02 1E 66 F0 | 	shl	local01, #2
142f8     03 00 00 FF 
142fc     04 E4 85 F1 | 	sub	objptr, ##1540
14300     F2 1E 02 F1 | 	add	local01, objptr
14304     0F 17 02 FB | 	rdlong	arg03, local01
14308     0C 4E 05 F1 | 	add	fp, #12
1430c     A7 16 62 FC | 	wrlong	arg03, fp
14310                 | ' 
14310                 | ' numpar=compiledline(lineptr_e).result.uresult
14310                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
14310     0C 4E 85 F1 | 	sub	fp, #12
14314     02 16 16 F2 | 	cmp	arg03, #2 wc
14318     67 00 00 FF 
1431c     7C E4 85 F1 | 	sub	objptr, ##52860
14320     0C 4E 05 C1 |  if_b	add	fp, #12
14324     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14328     0C 4E 85 C1 |  if_b	sub	fp, #12
1432c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1640
14330     00 12 06 F6 | 	mov	arg01, #0
14334     D4 01 B1 FD | 	call	#__system___getiolock_0484
14338     FD 12 02 F6 | 	mov	arg01, result1
1433c     34 A8 B0 FD | 	call	#__system___lockmem
14340     74 01 00 FF 
14344     41 14 06 F6 | 	mov	arg02, ##@LR__5166
14348     00 12 06 F6 | 	mov	arg01, #0
1434c     00 16 06 F6 | 	mov	arg03, #0
14350     28 B5 B0 FD | 	call	#__system___basic_print_string
14354     00 12 06 F6 | 	mov	arg01, #0
14358     B0 01 B1 FD | 	call	#__system___getiolock_0484
1435c     FD 00 68 FC | 	wrlong	#0, result1
14360     27 12 06 F6 | 	mov	arg01, #39
14364     90 63 B0 FD | 	call	#_printerror
14368     5C 02 90 FD | 	jmp	#LR__1653
1436c                 | LR__1640
1436c     F0 64 BF FD | 	call	#_pop
14370     FF 16 02 F6 | 	mov	arg03, result3
14374     A7 FA 61 FC | 	wrlong	result1, fp
14378     04 4E 05 F1 | 	add	fp, #4
1437c     A7 FC 61 FC | 	wrlong	result2, fp
14380     04 4E 05 F1 | 	add	fp, #4
14384     A7 16 62 FC | 	wrlong	arg03, fp
14388                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14388     08 4E 85 F1 | 	sub	fp, #8
1438c     2B 16 0E F2 | 	cmp	arg03, #43 wz
14390     18 00 90 5D |  if_ne	jmp	#LR__1641
14394     A7 12 02 FB | 	rdlong	arg01, fp
14398     54 A9 BF FD | 	call	#_convertstring
1439c     A7 FA 61 FC | 	wrlong	result1, fp
143a0     08 4E 05 F1 | 	add	fp, #8
143a4     A7 3E 68 FC | 	wrlong	#31, fp
143a8     08 4E 85 F1 | 	sub	fp, #8
143ac                 | LR__1641
143ac                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
143ac     08 4E 05 F1 | 	add	fp, #8
143b0     A7 16 02 FB | 	rdlong	arg03, fp
143b4     08 4E 85 F1 | 	sub	fp, #8
143b8     1F 16 0E F2 | 	cmp	arg03, #31 wz
143bc     3C 00 90 AD |  if_e	jmp	#LR__1642
143c0     00 12 06 F6 | 	mov	arg01, #0
143c4     44 01 B1 FD | 	call	#__system___getiolock_0484
143c8     FD 12 02 F6 | 	mov	arg01, result1
143cc     A4 A7 B0 FD | 	call	#__system___lockmem
143d0     74 01 00 FF 
143d4     47 14 06 F6 | 	mov	arg02, ##@LR__5167
143d8     00 12 06 F6 | 	mov	arg01, #0
143dc     00 16 06 F6 | 	mov	arg03, #0
143e0     98 B4 B0 FD | 	call	#__system___basic_print_string
143e4     00 12 06 F6 | 	mov	arg01, #0
143e8     20 01 B1 FD | 	call	#__system___getiolock_0484
143ec     FD 00 68 FC | 	wrlong	#0, result1
143f0     0F 12 06 F6 | 	mov	arg01, #15
143f4     00 63 B0 FD | 	call	#_printerror
143f8     CC 01 90 FD | 	jmp	#LR__1653
143fc                 | LR__1642
143fc                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
143fc     A7 12 02 FB | 	rdlong	arg01, fp
14400     01 14 06 F6 | 	mov	arg02, #1
14404     B4 C7 B0 FD | 	call	#__system__Left_S
14408     FD 12 02 F6 | 	mov	arg01, result1
1440c     74 01 00 FF 
14410     4D 14 06 F6 | 	mov	arg02, ##@LR__5168
14414     84 A7 B0 FD | 	call	#__system___string_cmp
14418     00 FA 0D F2 | 	cmp	result1, #0 wz
1441c     48 00 90 5D |  if_ne	jmp	#LR__1645
14420     74 01 00 FF 
14424     4F 1E 06 F6 | 	mov	local01, ##@LR__5169
14428     A7 16 02 FB | 	rdlong	arg03, fp
1442c     0B 13 02 F6 | 	mov	arg01, arg03
14430     09 21 02 F6 | 	mov	local02, arg01
14434     97 06 48 FB | 	callpa	#(@LR__1644-@LR__1643)>>2,fcache_load_ptr_
14438                 | LR__1643
14438     10 FB C9 FA | 	rdbyte	result1, local02 wz
1443c     01 20 06 51 |  if_ne	add	local02, #1
14440     F4 FF 9F 5D |  if_ne	jmp	#LR__1643
14444                 | LR__1644
14444     09 21 82 F1 | 	sub	local02, arg01
14448     10 15 02 F6 | 	mov	arg02, local02
1444c     01 14 86 F1 | 	sub	arg02, #1
14450     0B 13 02 F6 | 	mov	arg01, arg03
14454     EC C7 B0 FD | 	call	#__system__Right_S
14458     FD 14 02 F6 | 	mov	arg02, result1
1445c     0F 13 02 F6 | 	mov	arg01, local01
14460     6C A7 B0 FD | 	call	#__system___string_concat
14464     A7 FA 61 FC | 	wrlong	result1, fp
14468                 | LR__1645
14468                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
14468     A7 12 02 FB | 	rdlong	arg01, fp
1446c     01 14 06 F6 | 	mov	arg02, #1
14470     48 C7 B0 FD | 	call	#__system__Left_S
14474     FD 12 02 F6 | 	mov	arg01, result1
14478     74 01 00 FF 
1447c     52 14 06 F6 | 	mov	arg02, ##@LR__5170
14480     18 A7 B0 FD | 	call	#__system___string_cmp
14484     00 FA 0D F2 | 	cmp	result1, #0 wz
14488     48 00 90 5D |  if_ne	jmp	#LR__1648
1448c     74 01 00 FF 
14490     54 1E 06 F6 | 	mov	local01, ##@LR__5171
14494     A7 16 02 FB | 	rdlong	arg03, fp
14498     0B 13 02 F6 | 	mov	arg01, arg03
1449c     09 21 02 F6 | 	mov	local02, arg01
144a0     97 06 48 FB | 	callpa	#(@LR__1647-@LR__1646)>>2,fcache_load_ptr_
144a4                 | LR__1646
144a4     10 FB C9 FA | 	rdbyte	result1, local02 wz
144a8     01 20 06 51 |  if_ne	add	local02, #1
144ac     F4 FF 9F 5D |  if_ne	jmp	#LR__1646
144b0                 | LR__1647
144b0     09 21 82 F1 | 	sub	local02, arg01
144b4     10 15 02 F6 | 	mov	arg02, local02
144b8     01 14 86 F1 | 	sub	arg02, #1
144bc     0B 13 02 F6 | 	mov	arg01, arg03
144c0     80 C7 B0 FD | 	call	#__system__Right_S
144c4     FD 14 02 F6 | 	mov	arg02, result1
144c8     0F 13 02 F6 | 	mov	arg01, local01
144cc     00 A7 B0 FD | 	call	#__system___string_concat
144d0     A7 FA 61 FC | 	wrlong	result1, fp
144d4                 | LR__1648
144d4     A7 12 02 FB | 	rdlong	arg01, fp
144d8     00 DA B0 FD | 	call	#__system____builtin_atof
144dc     1C 4E 05 F1 | 	add	fp, #28
144e0     A7 FA 61 FC | 	wrlong	result1, fp
144e4     1C 4E 85 F1 | 	sub	fp, #28
144e8     A7 12 02 FB | 	rdlong	arg01, fp
144ec     00 14 06 F6 | 	mov	arg02, #0
144f0     78 D8 B0 FD | 	call	#__system____builtin_atoi
144f4     18 4E 05 F1 | 	add	fp, #24
144f8     A7 FA 61 FC | 	wrlong	result1, fp
144fc                 | ' fval=val(t1.result.sresult)
144fc                 | ' ival=val%(t1.result.sresult)
144fc                 | ' if fval=ival then
144fc     04 4E 05 F1 | 	add	fp, #4
14500     A7 1E 02 FB | 	rdlong	local01, fp
14504     1C 4E 85 F1 | 	sub	fp, #28
14508     FD 12 52 F6 | 	abs	arg01, result1 wc
1450c     1F 22 C6 C9 |  if_b	decod	local03, #31
14510     00 22 06 36 |  if_ae	mov	local03, #0
14514     D8 CD B0 FD | 	call	#__system___float_fromuns
14518     11 FB 61 F5 | 	xor	result1, local03
1451c     FD 14 02 F6 | 	mov	arg02, result1
14520     0F 13 02 F6 | 	mov	arg01, local01
14524     01 16 06 F6 | 	mov	arg03, #1
14528     FC D5 B0 FD | 	call	#__system___float_cmp
1452c     00 FA 0D F2 | 	cmp	result1, #0 wz
14530     20 00 90 5D |  if_ne	jmp	#LR__1649
14534     18 4E 05 F1 | 	add	fp, #24
14538     A7 1E 02 FB | 	rdlong	local01, fp
1453c     18 4E 85 F1 | 	sub	fp, #24
14540     A7 1E 62 FC | 	wrlong	local01, fp
14544     08 4E 05 F1 | 	add	fp, #8
14548     A7 38 68 FC | 	wrlong	#28, fp
1454c     08 4E 85 F1 | 	sub	fp, #8
14550     6C 00 90 FD | 	jmp	#LR__1652
14554                 | LR__1649
14554                 | '   if fval=0 andalso ival<>0 then
14554     1C 4E 05 F1 | 	add	fp, #28
14558     A7 12 02 FB | 	rdlong	arg01, fp
1455c     1C 4E 85 F1 | 	sub	fp, #28
14560     00 14 06 F6 | 	mov	arg02, #0
14564     01 16 06 F6 | 	mov	arg03, #1
14568     BC D5 B0 FD | 	call	#__system___float_cmp
1456c     00 FA 0D F2 | 	cmp	result1, #0 wz
14570     30 00 90 5D |  if_ne	jmp	#LR__1650
14574     18 4E 05 F1 | 	add	fp, #24
14578     A7 1E 0A FB | 	rdlong	local01, fp wz
1457c     18 4E 85 F1 | 	sub	fp, #24
14580     20 00 90 AD |  if_e	jmp	#LR__1650
14584     18 4E 05 F1 | 	add	fp, #24
14588     A7 1E 02 FB | 	rdlong	local01, fp
1458c     18 4E 85 F1 | 	sub	fp, #24
14590     A7 1E 62 FC | 	wrlong	local01, fp
14594     08 4E 05 F1 | 	add	fp, #8
14598     A7 38 68 FC | 	wrlong	#28, fp
1459c     08 4E 85 F1 | 	sub	fp, #8
145a0     1C 00 90 FD | 	jmp	#LR__1651
145a4                 | LR__1650
145a4     1C 4E 05 F1 | 	add	fp, #28
145a8     A7 1E 02 FB | 	rdlong	local01, fp
145ac     1C 4E 85 F1 | 	sub	fp, #28
145b0     A7 1E 62 FC | 	wrlong	local01, fp
145b4     08 4E 05 F1 | 	add	fp, #8
145b8     A7 3C 68 FC | 	wrlong	#30, fp
145bc     08 4E 85 F1 | 	sub	fp, #8
145c0                 | LR__1651
145c0                 | LR__1652
145c0     A7 12 02 F6 | 	mov	arg01, fp
145c4     30 63 BF FD | 	call	#_push
145c8                 | LR__1653
145c8     A7 F0 03 F6 | 	mov	ptra, fp
145cc     B2 00 A0 FD | 	call	#popregs_
145d0                 | _do_val_ret
145d0     2D 00 64 FD | 	ret
145d4                 | 
145d4                 | ' 
145d4                 | ' 
145d4                 | ' sub do_hex
145d4                 | _do_hex
145d4     01 4A 05 F6 | 	mov	COUNT_, #1
145d8     A8 00 A0 FD | 	call	#pushregs_
145dc     18 F0 07 F1 | 	add	ptra, #24
145e0     6A 00 00 FF 
145e4     80 E4 05 F1 | 	add	objptr, ##54400
145e8     F2 1E 02 FB | 	rdlong	local01, objptr
145ec     0F 17 02 F6 | 	mov	arg03, local01
145f0     01 16 66 F0 | 	shl	arg03, #1
145f4     0F 17 02 F1 | 	add	arg03, local01
145f8     02 16 66 F0 | 	shl	arg03, #2
145fc     03 00 00 FF 
14600     04 E4 85 F1 | 	sub	objptr, ##1540
14604     F2 16 02 F1 | 	add	arg03, objptr
14608     0B 17 02 FB | 	rdlong	arg03, arg03
1460c     0C 4E 05 F1 | 	add	fp, #12
14610     A7 16 62 FC | 	wrlong	arg03, fp
14614                 | ' 
14614                 | ' numpar=compiledline(lineptr_e).result.uresult
14614                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
14614     0C 4E 85 F1 | 	sub	fp, #12
14618     03 16 16 F2 | 	cmp	arg03, #3 wc
1461c     67 00 00 FF 
14620     7C E4 85 F1 | 	sub	objptr, ##52860
14624     0C 4E 05 C1 |  if_b	add	fp, #12
14628     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1462c     0C 4E 85 C1 |  if_b	sub	fp, #12
14630     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1660
14634     00 12 06 F6 | 	mov	arg01, #0
14638     D0 FE B0 FD | 	call	#__system___getiolock_0484
1463c     FD 12 02 F6 | 	mov	arg01, result1
14640     30 A5 B0 FD | 	call	#__system___lockmem
14644     74 01 00 FF 
14648     57 14 06 F6 | 	mov	arg02, ##@LR__5172
1464c     00 12 06 F6 | 	mov	arg01, #0
14650     00 16 06 F6 | 	mov	arg03, #0
14654     24 B2 B0 FD | 	call	#__system___basic_print_string
14658     00 12 06 F6 | 	mov	arg01, #0
1465c     AC FE B0 FD | 	call	#__system___getiolock_0484
14660     FD 00 68 FC | 	wrlong	#0, result1
14664     27 12 06 F6 | 	mov	arg01, #39
14668     8C 60 B0 FD | 	call	#_printerror
1466c     B8 00 90 FD | 	jmp	#LR__1663
14670                 | LR__1660
14670                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
14670     0C 4E 05 F1 | 	add	fp, #12
14674     A7 1E 02 FB | 	rdlong	local01, fp
14678     0C 4E 85 F1 | 	sub	fp, #12
1467c     02 1E 0E F2 | 	cmp	local01, #2 wz
14680     38 00 90 5D |  if_ne	jmp	#LR__1661
14684     D8 61 BF FD | 	call	#_pop
14688     FF 1E 02 F6 | 	mov	local01, result3
1468c     A7 FA 61 FC | 	wrlong	result1, fp
14690     04 4E 05 F1 | 	add	fp, #4
14694     A7 FC 61 FC | 	wrlong	result2, fp
14698     04 4E 05 F1 | 	add	fp, #4
1469c     A7 1E 62 FC | 	wrlong	local01, fp
146a0     08 4E 85 F1 | 	sub	fp, #8
146a4     A7 12 02 F6 | 	mov	arg01, fp
146a8     68 EE BF FD | 	call	#_converttoint
146ac     14 4E 05 F1 | 	add	fp, #20
146b0     A7 FA 61 FC | 	wrlong	result1, fp
146b4     14 4E 85 F1 | 	sub	fp, #20
146b8     0C 00 90 FD | 	jmp	#LR__1662
146bc                 | LR__1661
146bc     14 4E 05 F1 | 	add	fp, #20
146c0     A7 10 68 FC | 	wrlong	#8, fp
146c4     14 4E 85 F1 | 	sub	fp, #20
146c8                 | LR__1662
146c8     94 61 BF FD | 	call	#_pop
146cc     FF 1E 02 F6 | 	mov	local01, result3
146d0     A7 FA 61 FC | 	wrlong	result1, fp
146d4     04 4E 05 F1 | 	add	fp, #4
146d8     A7 FC 61 FC | 	wrlong	result2, fp
146dc     04 4E 05 F1 | 	add	fp, #4
146e0     A7 1E 62 FC | 	wrlong	local01, fp
146e4     08 4E 85 F1 | 	sub	fp, #8
146e8     A7 12 02 F6 | 	mov	arg01, fp
146ec     24 EE BF FD | 	call	#_converttoint
146f0     10 4E 05 F1 | 	add	fp, #16
146f4     A7 FA 61 FC | 	wrlong	result1, fp
146f8     FD 12 02 F6 | 	mov	arg01, result1
146fc     04 4E 05 F1 | 	add	fp, #4
14700     A7 14 02 FB | 	rdlong	arg02, fp
14704     14 4E 85 F1 | 	sub	fp, #20
14708     10 16 06 F6 | 	mov	arg03, #16
1470c     00 C7 B0 FD | 	call	#__system__Number_S
14710     A7 FA 61 FC | 	wrlong	result1, fp
14714     08 4E 05 F1 | 	add	fp, #8
14718     A7 3E 68 FC | 	wrlong	#31, fp
1471c     08 4E 85 F1 | 	sub	fp, #8
14720     A7 12 02 F6 | 	mov	arg01, fp
14724     D0 61 BF FD | 	call	#_push
14728                 | LR__1663
14728     A7 F0 03 F6 | 	mov	ptra, fp
1472c     B2 00 A0 FD | 	call	#popregs_
14730                 | _do_hex_ret
14730     2D 00 64 FD | 	ret
14734                 | 
14734                 | ' 
14734                 | ' sub do_bin
14734                 | _do_bin
14734     01 4A 05 F6 | 	mov	COUNT_, #1
14738     A8 00 A0 FD | 	call	#pushregs_
1473c     18 F0 07 F1 | 	add	ptra, #24
14740     6A 00 00 FF 
14744     80 E4 05 F1 | 	add	objptr, ##54400
14748     F2 1E 02 FB | 	rdlong	local01, objptr
1474c     0F 17 02 F6 | 	mov	arg03, local01
14750     01 16 66 F0 | 	shl	arg03, #1
14754     0F 17 02 F1 | 	add	arg03, local01
14758     02 16 66 F0 | 	shl	arg03, #2
1475c     03 00 00 FF 
14760     04 E4 85 F1 | 	sub	objptr, ##1540
14764     F2 16 02 F1 | 	add	arg03, objptr
14768     0B 17 02 FB | 	rdlong	arg03, arg03
1476c     0C 4E 05 F1 | 	add	fp, #12
14770     A7 16 62 FC | 	wrlong	arg03, fp
14774                 | ' 
14774                 | ' numpar=compiledline(lineptr_e).result.uresult
14774                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
14774     0C 4E 85 F1 | 	sub	fp, #12
14778     03 16 16 F2 | 	cmp	arg03, #3 wc
1477c     67 00 00 FF 
14780     7C E4 85 F1 | 	sub	objptr, ##52860
14784     0C 4E 05 C1 |  if_b	add	fp, #12
14788     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
1478c     0C 4E 85 C1 |  if_b	sub	fp, #12
14790     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1670
14794     00 12 06 F6 | 	mov	arg01, #0
14798     70 FD B0 FD | 	call	#__system___getiolock_0484
1479c     FD 12 02 F6 | 	mov	arg01, result1
147a0     D0 A3 B0 FD | 	call	#__system___lockmem
147a4     74 01 00 FF 
147a8     5E 14 06 F6 | 	mov	arg02, ##@LR__5173
147ac     00 12 06 F6 | 	mov	arg01, #0
147b0     00 16 06 F6 | 	mov	arg03, #0
147b4     C4 B0 B0 FD | 	call	#__system___basic_print_string
147b8     00 12 06 F6 | 	mov	arg01, #0
147bc     4C FD B0 FD | 	call	#__system___getiolock_0484
147c0     FD 00 68 FC | 	wrlong	#0, result1
147c4     27 12 06 F6 | 	mov	arg01, #39
147c8     2C 5F B0 FD | 	call	#_printerror
147cc     B8 00 90 FD | 	jmp	#LR__1673
147d0                 | LR__1670
147d0                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
147d0     0C 4E 05 F1 | 	add	fp, #12
147d4     A7 1E 02 FB | 	rdlong	local01, fp
147d8     0C 4E 85 F1 | 	sub	fp, #12
147dc     02 1E 0E F2 | 	cmp	local01, #2 wz
147e0     38 00 90 5D |  if_ne	jmp	#LR__1671
147e4     78 60 BF FD | 	call	#_pop
147e8     FF 1E 02 F6 | 	mov	local01, result3
147ec     A7 FA 61 FC | 	wrlong	result1, fp
147f0     04 4E 05 F1 | 	add	fp, #4
147f4     A7 FC 61 FC | 	wrlong	result2, fp
147f8     04 4E 05 F1 | 	add	fp, #4
147fc     A7 1E 62 FC | 	wrlong	local01, fp
14800     08 4E 85 F1 | 	sub	fp, #8
14804     A7 12 02 F6 | 	mov	arg01, fp
14808     08 ED BF FD | 	call	#_converttoint
1480c     14 4E 05 F1 | 	add	fp, #20
14810     A7 FA 61 FC | 	wrlong	result1, fp
14814     14 4E 85 F1 | 	sub	fp, #20
14818     0C 00 90 FD | 	jmp	#LR__1672
1481c                 | LR__1671
1481c     14 4E 05 F1 | 	add	fp, #20
14820     A7 00 68 FC | 	wrlong	#0, fp
14824     14 4E 85 F1 | 	sub	fp, #20
14828                 | LR__1672
14828     34 60 BF FD | 	call	#_pop
1482c     FF 1E 02 F6 | 	mov	local01, result3
14830     A7 FA 61 FC | 	wrlong	result1, fp
14834     04 4E 05 F1 | 	add	fp, #4
14838     A7 FC 61 FC | 	wrlong	result2, fp
1483c     04 4E 05 F1 | 	add	fp, #4
14840     A7 1E 62 FC | 	wrlong	local01, fp
14844     08 4E 85 F1 | 	sub	fp, #8
14848     A7 12 02 F6 | 	mov	arg01, fp
1484c     C4 EC BF FD | 	call	#_converttoint
14850     10 4E 05 F1 | 	add	fp, #16
14854     A7 FA 61 FC | 	wrlong	result1, fp
14858     FD 12 02 F6 | 	mov	arg01, result1
1485c     04 4E 05 F1 | 	add	fp, #4
14860     A7 14 02 FB | 	rdlong	arg02, fp
14864     14 4E 85 F1 | 	sub	fp, #20
14868     02 16 06 F6 | 	mov	arg03, #2
1486c     A0 C5 B0 FD | 	call	#__system__Number_S
14870     A7 FA 61 FC | 	wrlong	result1, fp
14874     08 4E 05 F1 | 	add	fp, #8
14878     A7 3E 68 FC | 	wrlong	#31, fp
1487c     08 4E 85 F1 | 	sub	fp, #8
14880     A7 12 02 F6 | 	mov	arg01, fp
14884     70 60 BF FD | 	call	#_push
14888                 | LR__1673
14888     A7 F0 03 F6 | 	mov	ptra, fp
1488c     B2 00 A0 FD | 	call	#popregs_
14890                 | _do_bin_ret
14890     2D 00 64 FD | 	ret
14894                 | 
14894                 | ' 
14894                 | ' sub do_cos
14894                 | _do_cos
14894     01 4A 05 F6 | 	mov	COUNT_, #1
14898     A8 00 A0 FD | 	call	#pushregs_
1489c     10 F0 07 F1 | 	add	ptra, #16
148a0     6A 00 00 FF 
148a4     80 E4 05 F1 | 	add	objptr, ##54400
148a8     F2 1E 02 FB | 	rdlong	local01, objptr
148ac     0F 17 02 F6 | 	mov	arg03, local01
148b0     01 16 66 F0 | 	shl	arg03, #1
148b4     0F 17 02 F1 | 	add	arg03, local01
148b8     02 16 66 F0 | 	shl	arg03, #2
148bc     03 00 00 FF 
148c0     04 E4 85 F1 | 	sub	objptr, ##1540
148c4     F2 16 02 F1 | 	add	arg03, objptr
148c8     0B 17 02 FB | 	rdlong	arg03, arg03
148cc     0C 4E 05 F1 | 	add	fp, #12
148d0     A7 16 62 FC | 	wrlong	arg03, fp
148d4                 | ' 
148d4                 | ' numpar=compiledline(lineptr_e).result.uresult
148d4                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
148d4     0C 4E 85 F1 | 	sub	fp, #12
148d8     02 16 16 F2 | 	cmp	arg03, #2 wc
148dc     67 00 00 FF 
148e0     7C E4 85 F1 | 	sub	objptr, ##52860
148e4     0C 4E 05 C1 |  if_b	add	fp, #12
148e8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
148ec     0C 4E 85 C1 |  if_b	sub	fp, #12
148f0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1680
148f4     00 12 06 F6 | 	mov	arg01, #0
148f8     10 FC B0 FD | 	call	#__system___getiolock_0484
148fc     FD 12 02 F6 | 	mov	arg01, result1
14900     70 A2 B0 FD | 	call	#__system___lockmem
14904     74 01 00 FF 
14908     65 14 06 F6 | 	mov	arg02, ##@LR__5174
1490c     00 12 06 F6 | 	mov	arg01, #0
14910     00 16 06 F6 | 	mov	arg03, #0
14914     64 AF B0 FD | 	call	#__system___basic_print_string
14918     00 12 06 F6 | 	mov	arg01, #0
1491c     EC FB B0 FD | 	call	#__system___getiolock_0484
14920     FD 00 68 FC | 	wrlong	#0, result1
14924     27 12 06 F6 | 	mov	arg01, #39
14928     CC 5D B0 FD | 	call	#_printerror
1492c     78 00 90 FD | 	jmp	#LR__1681
14930                 | LR__1680
14930     2C 5F BF FD | 	call	#_pop
14934     A7 FA 61 FC | 	wrlong	result1, fp
14938     04 4E 05 F1 | 	add	fp, #4
1493c     A7 FC 61 FC | 	wrlong	result2, fp
14940     04 4E 05 F1 | 	add	fp, #4
14944     A7 FE 61 FC | 	wrlong	result3, fp
14948     08 4E 85 F1 | 	sub	fp, #8
1494c     79 00 00 FF 
14950     98 E5 05 F1 | 	add	objptr, ##62360
14954     F2 1E 02 FB | 	rdlong	local01, objptr
14958     79 00 00 FF 
1495c     98 E5 85 F1 | 	sub	objptr, ##62360
14960     A7 12 02 F6 | 	mov	arg01, fp
14964     58 EC BF FD | 	call	#_converttofloat
14968     FD 14 02 F6 | 	mov	arg02, result1
1496c     0F 13 02 F6 | 	mov	arg01, local01
14970     80 CD B0 FD | 	call	#__system___float_mul
14974     FD 14 02 F6 | 	mov	arg02, result1
14978     87 E4 1F FF 
1497c     DB 13 06 F6 | 	mov	arg01, ##1070141403
14980     1F 14 E6 F4 | 	bitnot	arg02, #31
14984     9C C9 B0 FD | 	call	#__system___float_add
14988     FD 12 02 F6 | 	mov	arg01, result1
1498c     A0 D6 B0 FD | 	call	#__system____builtin_sinf
14990     A7 FA 61 FC | 	wrlong	result1, fp
14994     08 4E 05 F1 | 	add	fp, #8
14998     A7 3C 68 FC | 	wrlong	#30, fp
1499c     08 4E 85 F1 | 	sub	fp, #8
149a0     A7 12 02 F6 | 	mov	arg01, fp
149a4     50 5F BF FD | 	call	#_push
149a8                 | LR__1681
149a8     A7 F0 03 F6 | 	mov	ptra, fp
149ac     B2 00 A0 FD | 	call	#popregs_
149b0                 | _do_cos_ret
149b0     2D 00 64 FD | 	ret
149b4                 | 
149b4                 | ' 
149b4                 | ' sub do_tan
149b4                 | _do_tan
149b4     01 4A 05 F6 | 	mov	COUNT_, #1
149b8     A8 00 A0 FD | 	call	#pushregs_
149bc     10 F0 07 F1 | 	add	ptra, #16
149c0     6A 00 00 FF 
149c4     80 E4 05 F1 | 	add	objptr, ##54400
149c8     F2 1E 02 FB | 	rdlong	local01, objptr
149cc     0F 17 02 F6 | 	mov	arg03, local01
149d0     01 16 66 F0 | 	shl	arg03, #1
149d4     0F 17 02 F1 | 	add	arg03, local01
149d8     02 16 66 F0 | 	shl	arg03, #2
149dc     03 00 00 FF 
149e0     04 E4 85 F1 | 	sub	objptr, ##1540
149e4     F2 16 02 F1 | 	add	arg03, objptr
149e8     0B 17 02 FB | 	rdlong	arg03, arg03
149ec     0C 4E 05 F1 | 	add	fp, #12
149f0     A7 16 62 FC | 	wrlong	arg03, fp
149f4                 | ' 
149f4                 | ' numpar=compiledline(lineptr_e).result.uresult
149f4                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
149f4     0C 4E 85 F1 | 	sub	fp, #12
149f8     02 16 16 F2 | 	cmp	arg03, #2 wc
149fc     67 00 00 FF 
14a00     7C E4 85 F1 | 	sub	objptr, ##52860
14a04     0C 4E 05 C1 |  if_b	add	fp, #12
14a08     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14a0c     0C 4E 85 C1 |  if_b	sub	fp, #12
14a10     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1690
14a14     00 12 06 F6 | 	mov	arg01, #0
14a18     F0 FA B0 FD | 	call	#__system___getiolock_0484
14a1c     FD 12 02 F6 | 	mov	arg01, result1
14a20     50 A1 B0 FD | 	call	#__system___lockmem
14a24     74 01 00 FF 
14a28     6B 14 06 F6 | 	mov	arg02, ##@LR__5175
14a2c     00 12 06 F6 | 	mov	arg01, #0
14a30     00 16 06 F6 | 	mov	arg03, #0
14a34     44 AE B0 FD | 	call	#__system___basic_print_string
14a38     00 12 06 F6 | 	mov	arg01, #0
14a3c     CC FA B0 FD | 	call	#__system___getiolock_0484
14a40     FD 00 68 FC | 	wrlong	#0, result1
14a44     27 12 06 F6 | 	mov	arg01, #39
14a48     AC 5C B0 FD | 	call	#_printerror
14a4c     64 00 90 FD | 	jmp	#LR__1691
14a50                 | LR__1690
14a50     0C 5E BF FD | 	call	#_pop
14a54     A7 FA 61 FC | 	wrlong	result1, fp
14a58     04 4E 05 F1 | 	add	fp, #4
14a5c     A7 FC 61 FC | 	wrlong	result2, fp
14a60     04 4E 05 F1 | 	add	fp, #4
14a64     A7 FE 61 FC | 	wrlong	result3, fp
14a68     08 4E 85 F1 | 	sub	fp, #8
14a6c     79 00 00 FF 
14a70     98 E5 05 F1 | 	add	objptr, ##62360
14a74     F2 1E 02 FB | 	rdlong	local01, objptr
14a78     79 00 00 FF 
14a7c     98 E5 85 F1 | 	sub	objptr, ##62360
14a80     A7 12 02 F6 | 	mov	arg01, fp
14a84     38 EB BF FD | 	call	#_converttofloat
14a88     FD 14 02 F6 | 	mov	arg02, result1
14a8c     0F 13 02 F6 | 	mov	arg01, local01
14a90     60 CC B0 FD | 	call	#__system___float_mul
14a94     FD 12 02 F6 | 	mov	arg01, result1
14a98     E0 D6 B0 FD | 	call	#__system____builtin_tanf
14a9c     A7 FA 61 FC | 	wrlong	result1, fp
14aa0     08 4E 05 F1 | 	add	fp, #8
14aa4     A7 3C 68 FC | 	wrlong	#30, fp
14aa8     08 4E 85 F1 | 	sub	fp, #8
14aac     A7 12 02 F6 | 	mov	arg01, fp
14ab0     44 5E BF FD | 	call	#_push
14ab4                 | LR__1691
14ab4     A7 F0 03 F6 | 	mov	ptra, fp
14ab8     B2 00 A0 FD | 	call	#popregs_
14abc                 | _do_tan_ret
14abc     2D 00 64 FD | 	ret
14ac0                 | 
14ac0                 | ' 
14ac0                 | ' sub do_asin
14ac0                 | _do_asin
14ac0     01 4A 05 F6 | 	mov	COUNT_, #1
14ac4     A8 00 A0 FD | 	call	#pushregs_
14ac8     10 F0 07 F1 | 	add	ptra, #16
14acc     6A 00 00 FF 
14ad0     80 E4 05 F1 | 	add	objptr, ##54400
14ad4     F2 1E 02 FB | 	rdlong	local01, objptr
14ad8     0F 17 02 F6 | 	mov	arg03, local01
14adc     01 16 66 F0 | 	shl	arg03, #1
14ae0     0F 17 02 F1 | 	add	arg03, local01
14ae4     02 16 66 F0 | 	shl	arg03, #2
14ae8     03 00 00 FF 
14aec     04 E4 85 F1 | 	sub	objptr, ##1540
14af0     F2 16 02 F1 | 	add	arg03, objptr
14af4     0B 17 02 FB | 	rdlong	arg03, arg03
14af8     0C 4E 05 F1 | 	add	fp, #12
14afc     A7 16 62 FC | 	wrlong	arg03, fp
14b00                 | ' 
14b00                 | ' numpar=compiledline(lineptr_e).result.uresult
14b00                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
14b00     0C 4E 85 F1 | 	sub	fp, #12
14b04     02 16 16 F2 | 	cmp	arg03, #2 wc
14b08     67 00 00 FF 
14b0c     7C E4 85 F1 | 	sub	objptr, ##52860
14b10     0C 4E 05 C1 |  if_b	add	fp, #12
14b14     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14b18     0C 4E 85 C1 |  if_b	sub	fp, #12
14b1c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1700
14b20     00 12 06 F6 | 	mov	arg01, #0
14b24     E4 F9 B0 FD | 	call	#__system___getiolock_0484
14b28     FD 12 02 F6 | 	mov	arg01, result1
14b2c     44 A0 B0 FD | 	call	#__system___lockmem
14b30     74 01 00 FF 
14b34     71 14 06 F6 | 	mov	arg02, ##@LR__5176
14b38     00 12 06 F6 | 	mov	arg01, #0
14b3c     00 16 06 F6 | 	mov	arg03, #0
14b40     38 AD B0 FD | 	call	#__system___basic_print_string
14b44     00 12 06 F6 | 	mov	arg01, #0
14b48     C0 F9 B0 FD | 	call	#__system___getiolock_0484
14b4c     FD 00 68 FC | 	wrlong	#0, result1
14b50     27 12 06 F6 | 	mov	arg01, #39
14b54     A0 5B B0 FD | 	call	#_printerror
14b58     64 00 90 FD | 	jmp	#LR__1701
14b5c                 | LR__1700
14b5c     00 5D BF FD | 	call	#_pop
14b60     FF 1E 02 F6 | 	mov	local01, result3
14b64     A7 FA 61 FC | 	wrlong	result1, fp
14b68     04 4E 05 F1 | 	add	fp, #4
14b6c     A7 FC 61 FC | 	wrlong	result2, fp
14b70     04 4E 05 F1 | 	add	fp, #4
14b74     A7 1E 62 FC | 	wrlong	local01, fp
14b78     08 4E 85 F1 | 	sub	fp, #8
14b7c     A7 12 02 F6 | 	mov	arg01, fp
14b80     3C EA BF FD | 	call	#_converttofloat
14b84     FD 12 02 F6 | 	mov	arg01, result1
14b88     38 D6 B0 FD | 	call	#__system____builtin_asinf
14b8c     FD 12 02 F6 | 	mov	arg01, result1
14b90     79 00 00 FF 
14b94     9C E5 05 F1 | 	add	objptr, ##62364
14b98     F2 14 02 FB | 	rdlong	arg02, objptr
14b9c     79 00 00 FF 
14ba0     9C E5 85 F1 | 	sub	objptr, ##62364
14ba4     4C CB B0 FD | 	call	#__system___float_mul
14ba8     A7 FA 61 FC | 	wrlong	result1, fp
14bac     08 4E 05 F1 | 	add	fp, #8
14bb0     A7 3C 68 FC | 	wrlong	#30, fp
14bb4     08 4E 85 F1 | 	sub	fp, #8
14bb8     A7 12 02 F6 | 	mov	arg01, fp
14bbc     38 5D BF FD | 	call	#_push
14bc0                 | LR__1701
14bc0     A7 F0 03 F6 | 	mov	ptra, fp
14bc4     B2 00 A0 FD | 	call	#popregs_
14bc8                 | _do_asin_ret
14bc8     2D 00 64 FD | 	ret
14bcc                 | 
14bcc                 | ' 
14bcc                 | ' sub do_acos
14bcc                 | _do_acos
14bcc     01 4A 05 F6 | 	mov	COUNT_, #1
14bd0     A8 00 A0 FD | 	call	#pushregs_
14bd4     10 F0 07 F1 | 	add	ptra, #16
14bd8     6A 00 00 FF 
14bdc     80 E4 05 F1 | 	add	objptr, ##54400
14be0     F2 1E 02 FB | 	rdlong	local01, objptr
14be4     0F 17 02 F6 | 	mov	arg03, local01
14be8     01 16 66 F0 | 	shl	arg03, #1
14bec     0F 17 02 F1 | 	add	arg03, local01
14bf0     02 16 66 F0 | 	shl	arg03, #2
14bf4     03 00 00 FF 
14bf8     04 E4 85 F1 | 	sub	objptr, ##1540
14bfc     F2 16 02 F1 | 	add	arg03, objptr
14c00     0B 17 02 FB | 	rdlong	arg03, arg03
14c04     0C 4E 05 F1 | 	add	fp, #12
14c08     A7 16 62 FC | 	wrlong	arg03, fp
14c0c                 | ' 
14c0c                 | ' numpar=compiledline(lineptr_e).result.uresult
14c0c                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
14c0c     0C 4E 85 F1 | 	sub	fp, #12
14c10     02 16 16 F2 | 	cmp	arg03, #2 wc
14c14     67 00 00 FF 
14c18     7C E4 85 F1 | 	sub	objptr, ##52860
14c1c     0C 4E 05 C1 |  if_b	add	fp, #12
14c20     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14c24     0C 4E 85 C1 |  if_b	sub	fp, #12
14c28     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1710
14c2c     00 12 06 F6 | 	mov	arg01, #0
14c30     D8 F8 B0 FD | 	call	#__system___getiolock_0484
14c34     FD 12 02 F6 | 	mov	arg01, result1
14c38     38 9F B0 FD | 	call	#__system___lockmem
14c3c     74 01 00 FF 
14c40     78 14 06 F6 | 	mov	arg02, ##@LR__5177
14c44     00 12 06 F6 | 	mov	arg01, #0
14c48     00 16 06 F6 | 	mov	arg03, #0
14c4c     2C AC B0 FD | 	call	#__system___basic_print_string
14c50     00 12 06 F6 | 	mov	arg01, #0
14c54     B4 F8 B0 FD | 	call	#__system___getiolock_0484
14c58     FD 00 68 FC | 	wrlong	#0, result1
14c5c     27 12 06 F6 | 	mov	arg01, #39
14c60     94 5A B0 FD | 	call	#_printerror
14c64     64 00 90 FD | 	jmp	#LR__1711
14c68                 | LR__1710
14c68     F4 5B BF FD | 	call	#_pop
14c6c     FF 1E 02 F6 | 	mov	local01, result3
14c70     A7 FA 61 FC | 	wrlong	result1, fp
14c74     04 4E 05 F1 | 	add	fp, #4
14c78     A7 FC 61 FC | 	wrlong	result2, fp
14c7c     04 4E 05 F1 | 	add	fp, #4
14c80     A7 1E 62 FC | 	wrlong	local01, fp
14c84     08 4E 85 F1 | 	sub	fp, #8
14c88     A7 12 02 F6 | 	mov	arg01, fp
14c8c     30 E9 BF FD | 	call	#_converttofloat
14c90     FD 12 02 F6 | 	mov	arg01, result1
14c94     78 D5 B0 FD | 	call	#__system____builtin_acosf
14c98     FD 12 02 F6 | 	mov	arg01, result1
14c9c     79 00 00 FF 
14ca0     9C E5 05 F1 | 	add	objptr, ##62364
14ca4     F2 14 02 FB | 	rdlong	arg02, objptr
14ca8     79 00 00 FF 
14cac     9C E5 85 F1 | 	sub	objptr, ##62364
14cb0     40 CA B0 FD | 	call	#__system___float_mul
14cb4     A7 FA 61 FC | 	wrlong	result1, fp
14cb8     08 4E 05 F1 | 	add	fp, #8
14cbc     A7 3C 68 FC | 	wrlong	#30, fp
14cc0     08 4E 85 F1 | 	sub	fp, #8
14cc4     A7 12 02 F6 | 	mov	arg01, fp
14cc8     2C 5C BF FD | 	call	#_push
14ccc                 | LR__1711
14ccc     A7 F0 03 F6 | 	mov	ptra, fp
14cd0     B2 00 A0 FD | 	call	#popregs_
14cd4                 | _do_acos_ret
14cd4     2D 00 64 FD | 	ret
14cd8                 | 
14cd8                 | ' 
14cd8                 | ' sub do_atn
14cd8                 | _do_atn
14cd8     01 4A 05 F6 | 	mov	COUNT_, #1
14cdc     A8 00 A0 FD | 	call	#pushregs_
14ce0     10 F0 07 F1 | 	add	ptra, #16
14ce4     6A 00 00 FF 
14ce8     80 E4 05 F1 | 	add	objptr, ##54400
14cec     F2 1E 02 FB | 	rdlong	local01, objptr
14cf0     0F 17 02 F6 | 	mov	arg03, local01
14cf4     01 16 66 F0 | 	shl	arg03, #1
14cf8     0F 17 02 F1 | 	add	arg03, local01
14cfc     02 16 66 F0 | 	shl	arg03, #2
14d00     03 00 00 FF 
14d04     04 E4 85 F1 | 	sub	objptr, ##1540
14d08     F2 16 02 F1 | 	add	arg03, objptr
14d0c     0B 17 02 FB | 	rdlong	arg03, arg03
14d10     0C 4E 05 F1 | 	add	fp, #12
14d14     A7 16 62 FC | 	wrlong	arg03, fp
14d18                 | ' 
14d18                 | ' numpar=compiledline(lineptr_e).result.uresult
14d18                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
14d18     0C 4E 85 F1 | 	sub	fp, #12
14d1c     02 16 16 F2 | 	cmp	arg03, #2 wc
14d20     67 00 00 FF 
14d24     7C E4 85 F1 | 	sub	objptr, ##52860
14d28     0C 4E 05 C1 |  if_b	add	fp, #12
14d2c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14d30     0C 4E 85 C1 |  if_b	sub	fp, #12
14d34     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1720
14d38     00 12 06 F6 | 	mov	arg01, #0
14d3c     CC F7 B0 FD | 	call	#__system___getiolock_0484
14d40     FD 12 02 F6 | 	mov	arg01, result1
14d44     2C 9E B0 FD | 	call	#__system___lockmem
14d48     74 01 00 FF 
14d4c     7F 14 06 F6 | 	mov	arg02, ##@LR__5178
14d50     00 12 06 F6 | 	mov	arg01, #0
14d54     00 16 06 F6 | 	mov	arg03, #0
14d58     20 AB B0 FD | 	call	#__system___basic_print_string
14d5c     00 12 06 F6 | 	mov	arg01, #0
14d60     A8 F7 B0 FD | 	call	#__system___getiolock_0484
14d64     FD 00 68 FC | 	wrlong	#0, result1
14d68     27 12 06 F6 | 	mov	arg01, #39
14d6c     88 59 B0 FD | 	call	#_printerror
14d70     6C 00 90 FD | 	jmp	#LR__1721
14d74                 | LR__1720
14d74     E8 5A BF FD | 	call	#_pop
14d78     FF 1E 02 F6 | 	mov	local01, result3
14d7c     A7 FA 61 FC | 	wrlong	result1, fp
14d80     04 4E 05 F1 | 	add	fp, #4
14d84     A7 FC 61 FC | 	wrlong	result2, fp
14d88     04 4E 05 F1 | 	add	fp, #4
14d8c     A7 1E 62 FC | 	wrlong	local01, fp
14d90     08 4E 85 F1 | 	sub	fp, #8
14d94     A7 12 02 F6 | 	mov	arg01, fp
14d98     24 E8 BF FD | 	call	#_converttofloat
14d9c     FD 12 02 F6 | 	mov	arg01, result1
14da0     00 C0 1F FF 
14da4     00 14 06 F6 | 	mov	arg02, ##1065353216
14da8     B0 D4 B0 FD | 	call	#__system____builtin_atan2f
14dac     FD 12 02 F6 | 	mov	arg01, result1
14db0     79 00 00 FF 
14db4     9C E5 05 F1 | 	add	objptr, ##62364
14db8     F2 14 02 FB | 	rdlong	arg02, objptr
14dbc     79 00 00 FF 
14dc0     9C E5 85 F1 | 	sub	objptr, ##62364
14dc4     2C C9 B0 FD | 	call	#__system___float_mul
14dc8     A7 FA 61 FC | 	wrlong	result1, fp
14dcc     08 4E 05 F1 | 	add	fp, #8
14dd0     A7 3C 68 FC | 	wrlong	#30, fp
14dd4     08 4E 85 F1 | 	sub	fp, #8
14dd8     A7 12 02 F6 | 	mov	arg01, fp
14ddc     18 5B BF FD | 	call	#_push
14de0                 | LR__1721
14de0     A7 F0 03 F6 | 	mov	ptra, fp
14de4     B2 00 A0 FD | 	call	#popregs_
14de8                 | _do_atn_ret
14de8     2D 00 64 FD | 	ret
14dec                 | 
14dec                 | ' 
14dec                 | ' sub do_sqr
14dec                 | _do_sqr
14dec     01 4A 05 F6 | 	mov	COUNT_, #1
14df0     A8 00 A0 FD | 	call	#pushregs_
14df4     10 F0 07 F1 | 	add	ptra, #16
14df8     6A 00 00 FF 
14dfc     80 E4 05 F1 | 	add	objptr, ##54400
14e00     F2 1E 02 FB | 	rdlong	local01, objptr
14e04     0F 17 02 F6 | 	mov	arg03, local01
14e08     01 16 66 F0 | 	shl	arg03, #1
14e0c     0F 17 02 F1 | 	add	arg03, local01
14e10     02 16 66 F0 | 	shl	arg03, #2
14e14     03 00 00 FF 
14e18     04 E4 85 F1 | 	sub	objptr, ##1540
14e1c     F2 16 02 F1 | 	add	arg03, objptr
14e20     0B 17 02 FB | 	rdlong	arg03, arg03
14e24     0C 4E 05 F1 | 	add	fp, #12
14e28     A7 16 62 FC | 	wrlong	arg03, fp
14e2c                 | ' 
14e2c                 | ' numpar=compiledline(lineptr_e).result.uresult
14e2c                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
14e2c     0C 4E 85 F1 | 	sub	fp, #12
14e30     02 16 16 F2 | 	cmp	arg03, #2 wc
14e34     67 00 00 FF 
14e38     7C E4 85 F1 | 	sub	objptr, ##52860
14e3c     0C 4E 05 C1 |  if_b	add	fp, #12
14e40     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14e44     0C 4E 85 C1 |  if_b	sub	fp, #12
14e48     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1730
14e4c     00 12 06 F6 | 	mov	arg01, #0
14e50     B8 F6 B0 FD | 	call	#__system___getiolock_0484
14e54     FD 12 02 F6 | 	mov	arg01, result1
14e58     18 9D B0 FD | 	call	#__system___lockmem
14e5c     74 01 00 FF 
14e60     85 14 06 F6 | 	mov	arg02, ##@LR__5179
14e64     00 12 06 F6 | 	mov	arg01, #0
14e68     00 16 06 F6 | 	mov	arg03, #0
14e6c     0C AA B0 FD | 	call	#__system___basic_print_string
14e70     00 12 06 F6 | 	mov	arg01, #0
14e74     94 F6 B0 FD | 	call	#__system___getiolock_0484
14e78     FD 00 68 FC | 	wrlong	#0, result1
14e7c     27 12 06 F6 | 	mov	arg01, #39
14e80     74 58 B0 FD | 	call	#_printerror
14e84     48 00 90 FD | 	jmp	#LR__1731
14e88                 | LR__1730
14e88     D4 59 BF FD | 	call	#_pop
14e8c     FF 1E 02 F6 | 	mov	local01, result3
14e90     A7 FA 61 FC | 	wrlong	result1, fp
14e94     04 4E 05 F1 | 	add	fp, #4
14e98     A7 FC 61 FC | 	wrlong	result2, fp
14e9c     04 4E 05 F1 | 	add	fp, #4
14ea0     A7 1E 62 FC | 	wrlong	local01, fp
14ea4     08 4E 85 F1 | 	sub	fp, #8
14ea8     A7 12 02 F6 | 	mov	arg01, fp
14eac     10 E7 BF FD | 	call	#_converttofloat
14eb0     FD 12 02 F6 | 	mov	arg01, result1
14eb4     64 C7 B0 FD | 	call	#__system___float_sqrt
14eb8     A7 FA 61 FC | 	wrlong	result1, fp
14ebc     08 4E 05 F1 | 	add	fp, #8
14ec0     A7 3C 68 FC | 	wrlong	#30, fp
14ec4     08 4E 85 F1 | 	sub	fp, #8
14ec8     A7 12 02 F6 | 	mov	arg01, fp
14ecc     28 5A BF FD | 	call	#_push
14ed0                 | LR__1731
14ed0     A7 F0 03 F6 | 	mov	ptra, fp
14ed4     B2 00 A0 FD | 	call	#popregs_
14ed8                 | _do_sqr_ret
14ed8     2D 00 64 FD | 	ret
14edc                 | 
14edc                 | ' 
14edc                 | ' sub do_stick
14edc                 | _do_stick
14edc     01 4A 05 F6 | 	mov	COUNT_, #1
14ee0     A8 00 A0 FD | 	call	#pushregs_
14ee4     10 F0 07 F1 | 	add	ptra, #16
14ee8     6A 00 00 FF 
14eec     80 E4 05 F1 | 	add	objptr, ##54400
14ef0     F2 1E 02 FB | 	rdlong	local01, objptr
14ef4     0F 17 02 F6 | 	mov	arg03, local01
14ef8     01 16 66 F0 | 	shl	arg03, #1
14efc     0F 17 02 F1 | 	add	arg03, local01
14f00     02 16 66 F0 | 	shl	arg03, #2
14f04     03 00 00 FF 
14f08     04 E4 85 F1 | 	sub	objptr, ##1540
14f0c     F2 16 02 F1 | 	add	arg03, objptr
14f10     0B 17 02 FB | 	rdlong	arg03, arg03
14f14     0C 4E 05 F1 | 	add	fp, #12
14f18     A7 16 62 FC | 	wrlong	arg03, fp
14f1c                 | ' 
14f1c                 | ' numpar=compiledline(lineptr_e).result.uresult
14f1c                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
14f1c     0C 4E 85 F1 | 	sub	fp, #12
14f20     02 16 16 F2 | 	cmp	arg03, #2 wc
14f24     67 00 00 FF 
14f28     7C E4 85 F1 | 	sub	objptr, ##52860
14f2c     3C 00 90 CD |  if_b	jmp	#LR__1740
14f30     00 12 06 F6 | 	mov	arg01, #0
14f34     D4 F5 B0 FD | 	call	#__system___getiolock_0484
14f38     FD 12 02 F6 | 	mov	arg01, result1
14f3c     34 9C B0 FD | 	call	#__system___lockmem
14f40     74 01 00 FF 
14f44     8B 14 06 F6 | 	mov	arg02, ##@LR__5180
14f48     00 12 06 F6 | 	mov	arg01, #0
14f4c     00 16 06 F6 | 	mov	arg03, #0
14f50     28 A9 B0 FD | 	call	#__system___basic_print_string
14f54     00 12 06 F6 | 	mov	arg01, #0
14f58     B0 F5 B0 FD | 	call	#__system___getiolock_0484
14f5c     FD 00 68 FC | 	wrlong	#0, result1
14f60     27 12 06 F6 | 	mov	arg01, #39
14f64     90 57 B0 FD | 	call	#_printerror
14f68     E8 00 90 FD | 	jmp	#LR__1744
14f6c                 | LR__1740
14f6c                 | ' 
14f6c                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
14f6c     0C 4E 05 F1 | 	add	fp, #12
14f70     A7 FE 09 FB | 	rdlong	result3, fp wz
14f74     0C 4E 85 F1 | 	sub	fp, #12
14f78     30 00 90 5D |  if_ne	jmp	#LR__1741
14f7c     79 00 00 FF 
14f80     0C E5 05 F1 | 	add	objptr, ##62220
14f84     F2 1E 02 FB | 	rdlong	local01, objptr
14f88     79 00 00 FF 
14f8c     0C E5 85 F1 | 	sub	objptr, ##62220
14f90     A7 1E 62 FC | 	wrlong	local01, fp
14f94     08 4E 05 F1 | 	add	fp, #8
14f98     A7 3A 68 FC | 	wrlong	#29, fp
14f9c     08 4E 85 F1 | 	sub	fp, #8
14fa0     A7 12 02 F6 | 	mov	arg01, fp
14fa4     50 59 BF FD | 	call	#_push
14fa8     A8 00 90 FD | 	jmp	#LR__1744
14fac                 | LR__1741
14fac     B0 58 BF FD | 	call	#_pop
14fb0     A7 FA 61 FC | 	wrlong	result1, fp
14fb4     04 4E 05 F1 | 	add	fp, #4
14fb8     A7 FC 61 FC | 	wrlong	result2, fp
14fbc     04 4E 05 F1 | 	add	fp, #4
14fc0     A7 FE 61 FC | 	wrlong	result3, fp
14fc4                 | ' 
14fc4                 | ' t1=pop()
14fc4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
14fc4     08 4E 85 F1 | 	sub	fp, #8
14fc8     1C FE 0D F2 | 	cmp	result3, #28 wz
14fcc     08 4E 05 51 |  if_ne	add	fp, #8
14fd0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14fd4     08 4E 85 51 |  if_ne	sub	fp, #8
14fd8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14fdc     6C 00 90 5D |  if_ne	jmp	#LR__1743
14fe0     A7 1E 02 FB | 	rdlong	local01, fp
14fe4     7A 00 00 FF 
14fe8     04 E4 05 F1 | 	add	objptr, ##62468
14fec     F2 1E 62 FC | 	wrlong	local01, objptr
14ff0                 | '   q=t1.result.uresult
14ff0                 | '   if q<7 then 
14ff0     7A 00 00 FF 
14ff4     04 E4 85 F1 | 	sub	objptr, ##62468
14ff8     07 1E 56 F2 | 	cmps	local01, #7 wc
14ffc     40 00 90 3D |  if_ae	jmp	#LR__1742
15000     7A 00 00 FF 
15004     04 E4 05 F1 | 	add	objptr, ##62468
15008     F2 1E 02 FB | 	rdlong	local01, objptr
1500c     02 1E 66 F0 | 	shl	local01, #2
15010     F8 E4 85 F1 | 	sub	objptr, #248
15014     F2 1E 02 F1 | 	add	local01, objptr
15018     0F 1F 02 FB | 	rdlong	local01, local01
1501c     A7 1E 62 FC | 	wrlong	local01, fp
15020     08 4E 05 F1 | 	add	fp, #8
15024     A7 3A 68 FC | 	wrlong	#29, fp
15028     08 4E 85 F1 | 	sub	fp, #8
1502c     A7 12 02 F6 | 	mov	arg01, fp
15030     79 00 00 FF 
15034     0C E5 85 F1 | 	sub	objptr, ##62220
15038     BC 58 BF FD | 	call	#_push
1503c                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1503c     14 00 90 FD | 	jmp	#LR__1744
15040                 | LR__1742
15040     29 12 06 F6 | 	mov	arg01, #41
15044     B0 56 B0 FD | 	call	#_printerror
15048                 | '      printerror(41) : return
15048     08 00 90 FD | 	jmp	#LR__1744
1504c                 | LR__1743
1504c     29 12 06 F6 | 	mov	arg01, #41
15050     A4 56 B0 FD | 	call	#_printerror
15054                 | LR__1744
15054     A7 F0 03 F6 | 	mov	ptra, fp
15058     B2 00 A0 FD | 	call	#popregs_
1505c                 | _do_stick_ret
1505c     2D 00 64 FD | 	ret
15060                 | 
15060                 | ' 
15060                 | ' sub do_strig
15060                 | _do_strig
15060     01 4A 05 F6 | 	mov	COUNT_, #1
15064     A8 00 A0 FD | 	call	#pushregs_
15068     10 F0 07 F1 | 	add	ptra, #16
1506c     6A 00 00 FF 
15070     80 E4 05 F1 | 	add	objptr, ##54400
15074     F2 1E 02 FB | 	rdlong	local01, objptr
15078     0F 17 02 F6 | 	mov	arg03, local01
1507c     01 16 66 F0 | 	shl	arg03, #1
15080     0F 17 02 F1 | 	add	arg03, local01
15084     02 16 66 F0 | 	shl	arg03, #2
15088     03 00 00 FF 
1508c     04 E4 85 F1 | 	sub	objptr, ##1540
15090     F2 16 02 F1 | 	add	arg03, objptr
15094     0B 17 02 FB | 	rdlong	arg03, arg03
15098     0C 4E 05 F1 | 	add	fp, #12
1509c     A7 16 62 FC | 	wrlong	arg03, fp
150a0                 | ' 
150a0                 | ' numpar=compiledline(lineptr_e).result.uresult
150a0                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
150a0     0C 4E 85 F1 | 	sub	fp, #12
150a4     02 16 16 F2 | 	cmp	arg03, #2 wc
150a8     67 00 00 FF 
150ac     7C E4 85 F1 | 	sub	objptr, ##52860
150b0     3C 00 90 CD |  if_b	jmp	#LR__1750
150b4     00 12 06 F6 | 	mov	arg01, #0
150b8     50 F4 B0 FD | 	call	#__system___getiolock_0484
150bc     FD 12 02 F6 | 	mov	arg01, result1
150c0     B0 9A B0 FD | 	call	#__system___lockmem
150c4     74 01 00 FF 
150c8     93 14 06 F6 | 	mov	arg02, ##@LR__5181
150cc     00 12 06 F6 | 	mov	arg01, #0
150d0     00 16 06 F6 | 	mov	arg03, #0
150d4     A4 A7 B0 FD | 	call	#__system___basic_print_string
150d8     00 12 06 F6 | 	mov	arg01, #0
150dc     2C F4 B0 FD | 	call	#__system___getiolock_0484
150e0     FD 00 68 FC | 	wrlong	#0, result1
150e4     27 12 06 F6 | 	mov	arg01, #39
150e8     0C 56 B0 FD | 	call	#_printerror
150ec     E8 00 90 FD | 	jmp	#LR__1754
150f0                 | LR__1750
150f0                 | ' 
150f0                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
150f0     0C 4E 05 F1 | 	add	fp, #12
150f4     A7 FE 09 FB | 	rdlong	result3, fp wz
150f8     0C 4E 85 F1 | 	sub	fp, #12
150fc     30 00 90 5D |  if_ne	jmp	#LR__1751
15100     79 00 00 FF 
15104     28 E5 05 F1 | 	add	objptr, ##62248
15108     F2 1E 02 FB | 	rdlong	local01, objptr
1510c     79 00 00 FF 
15110     28 E5 85 F1 | 	sub	objptr, ##62248
15114     A7 1E 62 FC | 	wrlong	local01, fp
15118     08 4E 05 F1 | 	add	fp, #8
1511c     A7 3A 68 FC | 	wrlong	#29, fp
15120     08 4E 85 F1 | 	sub	fp, #8
15124     A7 12 02 F6 | 	mov	arg01, fp
15128     CC 57 BF FD | 	call	#_push
1512c     A8 00 90 FD | 	jmp	#LR__1754
15130                 | LR__1751
15130     2C 57 BF FD | 	call	#_pop
15134     A7 FA 61 FC | 	wrlong	result1, fp
15138     04 4E 05 F1 | 	add	fp, #4
1513c     A7 FC 61 FC | 	wrlong	result2, fp
15140     04 4E 05 F1 | 	add	fp, #4
15144     A7 FE 61 FC | 	wrlong	result3, fp
15148                 | ' 
15148                 | ' t1=pop()
15148                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
15148     08 4E 85 F1 | 	sub	fp, #8
1514c     1C FE 0D F2 | 	cmp	result3, #28 wz
15150     08 4E 05 51 |  if_ne	add	fp, #8
15154     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15158     08 4E 85 51 |  if_ne	sub	fp, #8
1515c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15160     6C 00 90 5D |  if_ne	jmp	#LR__1753
15164     A7 1E 02 FB | 	rdlong	local01, fp
15168     7A 00 00 FF 
1516c     04 E4 05 F1 | 	add	objptr, ##62468
15170     F2 1E 62 FC | 	wrlong	local01, objptr
15174                 | '   q=t1.result.uresult
15174                 | '   if q<7 then 
15174     7A 00 00 FF 
15178     04 E4 85 F1 | 	sub	objptr, ##62468
1517c     07 1E 56 F2 | 	cmps	local01, #7 wc
15180     40 00 90 3D |  if_ae	jmp	#LR__1752
15184     7A 00 00 FF 
15188     04 E4 05 F1 | 	add	objptr, ##62468
1518c     F2 1E 02 FB | 	rdlong	local01, objptr
15190     02 1E 66 F0 | 	shl	local01, #2
15194     DC E4 85 F1 | 	sub	objptr, #220
15198     F2 1E 02 F1 | 	add	local01, objptr
1519c     0F 1F 02 FB | 	rdlong	local01, local01
151a0     A7 1E 62 FC | 	wrlong	local01, fp
151a4     08 4E 05 F1 | 	add	fp, #8
151a8     A7 3A 68 FC | 	wrlong	#29, fp
151ac     08 4E 85 F1 | 	sub	fp, #8
151b0     A7 12 02 F6 | 	mov	arg01, fp
151b4     79 00 00 FF 
151b8     28 E5 85 F1 | 	sub	objptr, ##62248
151bc     38 57 BF FD | 	call	#_push
151c0                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
151c0     14 00 90 FD | 	jmp	#LR__1754
151c4                 | LR__1752
151c4     29 12 06 F6 | 	mov	arg01, #41
151c8     2C 55 B0 FD | 	call	#_printerror
151cc                 | '      printerror(41) : return
151cc     08 00 90 FD | 	jmp	#LR__1754
151d0                 | LR__1753
151d0     29 12 06 F6 | 	mov	arg01, #41
151d4     20 55 B0 FD | 	call	#_printerror
151d8                 | LR__1754
151d8     A7 F0 03 F6 | 	mov	ptra, fp
151dc     B2 00 A0 FD | 	call	#popregs_
151e0                 | _do_strig_ret
151e0     2D 00 64 FD | 	ret
151e4                 | 
151e4                 | ' 
151e4                 | ' sub do_getpixel
151e4                 | _do_getpixel
151e4     00 4A 05 F6 | 	mov	COUNT_, #0
151e8     A8 00 A0 FD | 	call	#pushregs_
151ec     24 F0 07 F1 | 	add	ptra, #36
151f0     6A 00 00 FF 
151f4     80 E4 05 F1 | 	add	objptr, ##54400
151f8     F2 16 02 FB | 	rdlong	arg03, objptr
151fc     0B 15 02 F6 | 	mov	arg02, arg03
15200     01 14 66 F0 | 	shl	arg02, #1
15204     0B 15 02 F1 | 	add	arg02, arg03
15208     02 14 66 F0 | 	shl	arg02, #2
1520c     03 00 00 FF 
15210     04 E4 85 F1 | 	sub	objptr, ##1540
15214     F2 14 02 F1 | 	add	arg02, objptr
15218     0A 17 02 FB | 	rdlong	arg03, arg02
1521c     18 4E 05 F1 | 	add	fp, #24
15220     A7 16 62 FC | 	wrlong	arg03, fp
15224                 | ' 
15224                 | ' numpar=compiledline(lineptr_e).result.uresult
15224                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
15224     18 4E 85 F1 | 	sub	fp, #24
15228     02 16 0E F2 | 	cmp	arg03, #2 wz
1522c     67 00 00 FF 
15230     7C E4 85 F1 | 	sub	objptr, ##52860
15234     3C 00 90 AD |  if_e	jmp	#LR__1760
15238     00 12 06 F6 | 	mov	arg01, #0
1523c     CC F2 B0 FD | 	call	#__system___getiolock_0484
15240     FD 12 02 F6 | 	mov	arg01, result1
15244     2C 99 B0 FD | 	call	#__system___lockmem
15248     74 01 00 FF 
1524c     9B 14 06 F6 | 	mov	arg02, ##@LR__5182
15250     00 12 06 F6 | 	mov	arg01, #0
15254     00 16 06 F6 | 	mov	arg03, #0
15258     20 A6 B0 FD | 	call	#__system___basic_print_string
1525c     00 12 06 F6 | 	mov	arg01, #0
15260     A8 F2 B0 FD | 	call	#__system___getiolock_0484
15264     FD 00 68 FC | 	wrlong	#0, result1
15268     27 12 06 F6 | 	mov	arg01, #39
1526c     88 54 B0 FD | 	call	#_printerror
15270     B4 00 90 FD | 	jmp	#LR__1761
15274                 | LR__1760
15274     E8 55 BF FD | 	call	#_pop
15278     FD 16 02 F6 | 	mov	arg03, result1
1527c     FE 14 02 F6 | 	mov	arg02, result2
15280     FF 12 02 F6 | 	mov	arg01, result3
15284     0C 4E 05 F1 | 	add	fp, #12
15288     A7 16 62 FC | 	wrlong	arg03, fp
1528c     04 4E 05 F1 | 	add	fp, #4
15290     A7 14 62 FC | 	wrlong	arg02, fp
15294     04 4E 05 F1 | 	add	fp, #4
15298     A7 12 62 FC | 	wrlong	arg01, fp
1529c     14 4E 85 F1 | 	sub	fp, #20
152a0     BC 55 BF FD | 	call	#_pop
152a4     FF 16 02 F6 | 	mov	arg03, result3
152a8     A7 FA 61 FC | 	wrlong	result1, fp
152ac     04 4E 05 F1 | 	add	fp, #4
152b0     A7 FC 61 FC | 	wrlong	result2, fp
152b4     04 4E 05 F1 | 	add	fp, #4
152b8     A7 16 62 FC | 	wrlong	arg03, fp
152bc     08 4E 85 F1 | 	sub	fp, #8
152c0     A7 12 02 F6 | 	mov	arg01, fp
152c4     4C E2 BF FD | 	call	#_converttoint
152c8     1C 4E 05 F1 | 	add	fp, #28
152cc     A7 FA 61 FC | 	wrlong	result1, fp
152d0     10 4E 85 F1 | 	sub	fp, #16
152d4     A7 12 02 F6 | 	mov	arg01, fp
152d8     0C 4E 85 F1 | 	sub	fp, #12
152dc     34 E2 BF FD | 	call	#_converttoint
152e0     FD 16 02 F6 | 	mov	arg03, result1
152e4     20 4E 05 F1 | 	add	fp, #32
152e8     A7 16 62 FC | 	wrlong	arg03, fp
152ec     F2 12 02 FB | 	rdlong	arg01, objptr
152f0     04 4E 85 F1 | 	sub	fp, #4
152f4     A7 FE 01 FB | 	rdlong	result3, fp
152f8     FF 12 02 F1 | 	add	arg01, result3
152fc     1C 4E 85 F1 | 	sub	fp, #28
15300     0A 16 66 F0 | 	shl	arg03, #10
15304     0B 13 02 F1 | 	add	arg01, arg03
15308     28 56 B0 FD | 	call	#_pspeek
1530c     FD FA E1 F8 | 	getbyte	result1, result1, #0
15310     A7 FA 61 FC | 	wrlong	result1, fp
15314     08 4E 05 F1 | 	add	fp, #8
15318     A7 3A 68 FC | 	wrlong	#29, fp
1531c     08 4E 85 F1 | 	sub	fp, #8
15320     A7 12 02 F6 | 	mov	arg01, fp
15324     D0 55 BF FD | 	call	#_push
15328                 | LR__1761
15328     A7 F0 03 F6 | 	mov	ptra, fp
1532c     B2 00 A0 FD | 	call	#popregs_
15330                 | _do_getpixel_ret
15330     2D 00 64 FD | 	ret
15334                 | 
15334                 | ' 
15334                 | ' 
15334                 | ' 
15334                 | ' sub do_defsprite
15334                 | _do_defsprite
15334     07 4A 05 F6 | 	mov	COUNT_, #7
15338     A8 00 A0 FD | 	call	#pushregs_
1533c     60 F0 07 F1 | 	add	ptra, #96
15340     1C 55 BF FD | 	call	#_pop
15344     FD 16 02 F6 | 	mov	arg03, result1
15348     FE 14 02 F6 | 	mov	arg02, result2
1534c     FF 12 02 F6 | 	mov	arg01, result3
15350     30 4E 05 F1 | 	add	fp, #48
15354     A7 16 62 FC | 	wrlong	arg03, fp
15358     04 4E 05 F1 | 	add	fp, #4
1535c     A7 14 62 FC | 	wrlong	arg02, fp
15360     04 4E 05 F1 | 	add	fp, #4
15364     A7 12 62 FC | 	wrlong	arg01, fp
15368     38 4E 85 F1 | 	sub	fp, #56
1536c     F0 54 BF FD | 	call	#_pop
15370     FD 16 02 F6 | 	mov	arg03, result1
15374     FE 14 02 F6 | 	mov	arg02, result2
15378     FF 12 02 F6 | 	mov	arg01, result3
1537c     24 4E 05 F1 | 	add	fp, #36
15380     A7 16 62 FC | 	wrlong	arg03, fp
15384     04 4E 05 F1 | 	add	fp, #4
15388     A7 14 62 FC | 	wrlong	arg02, fp
1538c     04 4E 05 F1 | 	add	fp, #4
15390     A7 12 62 FC | 	wrlong	arg01, fp
15394     2C 4E 85 F1 | 	sub	fp, #44
15398     C4 54 BF FD | 	call	#_pop
1539c     FD 16 02 F6 | 	mov	arg03, result1
153a0     FE 14 02 F6 | 	mov	arg02, result2
153a4     FF 12 02 F6 | 	mov	arg01, result3
153a8     18 4E 05 F1 | 	add	fp, #24
153ac     A7 16 62 FC | 	wrlong	arg03, fp
153b0     04 4E 05 F1 | 	add	fp, #4
153b4     A7 14 62 FC | 	wrlong	arg02, fp
153b8     04 4E 05 F1 | 	add	fp, #4
153bc     A7 12 62 FC | 	wrlong	arg01, fp
153c0     20 4E 85 F1 | 	sub	fp, #32
153c4     98 54 BF FD | 	call	#_pop
153c8     FD 16 02 F6 | 	mov	arg03, result1
153cc     FE 14 02 F6 | 	mov	arg02, result2
153d0     FF 12 02 F6 | 	mov	arg01, result3
153d4     0C 4E 05 F1 | 	add	fp, #12
153d8     A7 16 62 FC | 	wrlong	arg03, fp
153dc     04 4E 05 F1 | 	add	fp, #4
153e0     A7 14 62 FC | 	wrlong	arg02, fp
153e4     04 4E 05 F1 | 	add	fp, #4
153e8     A7 12 62 FC | 	wrlong	arg01, fp
153ec     14 4E 85 F1 | 	sub	fp, #20
153f0     6C 54 BF FD | 	call	#_pop
153f4     FF 16 02 F6 | 	mov	arg03, result3
153f8     A7 FA 61 FC | 	wrlong	result1, fp
153fc     04 4E 05 F1 | 	add	fp, #4
15400     A7 FC 61 FC | 	wrlong	result2, fp
15404     04 4E 05 F1 | 	add	fp, #4
15408     A7 16 62 FC | 	wrlong	arg03, fp
1540c     08 4E 85 F1 | 	sub	fp, #8
15410     A7 12 02 F6 | 	mov	arg01, fp
15414     FC E0 BF FD | 	call	#_converttoint
15418     3C 4E 05 F1 | 	add	fp, #60
1541c     A7 FA 61 FC | 	wrlong	result1, fp
15420     30 4E 85 F1 | 	sub	fp, #48
15424     A7 12 02 F6 | 	mov	arg01, fp
15428     0C 4E 85 F1 | 	sub	fp, #12
1542c     E4 E0 BF FD | 	call	#_converttoint
15430     40 4E 05 F1 | 	add	fp, #64
15434     A7 FA 61 FC | 	wrlong	result1, fp
15438     28 4E 85 F1 | 	sub	fp, #40
1543c     A7 12 02 F6 | 	mov	arg01, fp
15440     18 4E 85 F1 | 	sub	fp, #24
15444     CC E0 BF FD | 	call	#_converttoint
15448     44 4E 05 F1 | 	add	fp, #68
1544c     A7 FA 61 FC | 	wrlong	result1, fp
15450     20 4E 85 F1 | 	sub	fp, #32
15454     A7 12 02 F6 | 	mov	arg01, fp
15458     24 4E 85 F1 | 	sub	fp, #36
1545c     B4 E0 BF FD | 	call	#_converttoint
15460     48 4E 05 F1 | 	add	fp, #72
15464     A7 FA 61 FC | 	wrlong	result1, fp
15468     18 4E 85 F1 | 	sub	fp, #24
1546c     A7 12 02 F6 | 	mov	arg01, fp
15470     30 4E 85 F1 | 	sub	fp, #48
15474     9C E0 BF FD | 	call	#_converttoint
15478     4C 4E 05 F1 | 	add	fp, #76
1547c     A7 FA 61 FC | 	wrlong	result1, fp
15480                 | ' 
15480                 | ' t5=pop()
15480                 | ' t4=pop()
15480                 | ' t3=pop()
15480                 | ' t2=pop()
15480                 | ' t1=pop()
15480                 | ' 
15480                 | ' ' do convert, defsprite is not a racing command
15480                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
15480                 | '  
15480                 | ' ' todo: check parameters for linits
15480                 | ' if sprite(a1)<> nil then delete(sprite(a1))
15480     10 4E 85 F1 | 	sub	fp, #16
15484     A7 16 02 FB | 	rdlong	arg03, fp
15488     3C 4E 85 F1 | 	sub	fp, #60
1548c     02 16 66 F0 | 	shl	arg03, #2
15490     79 00 00 FF 
15494     44 E5 05 F1 | 	add	objptr, ##62276
15498     F2 16 02 F1 | 	add	arg03, objptr
1549c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
154a0     79 00 00 FF 
154a4     44 E5 85 F1 | 	sub	objptr, ##62276
154a8     2C 00 90 AD |  if_e	jmp	#LR__1770
154ac     3C 4E 05 F1 | 	add	fp, #60
154b0     A7 16 02 FB | 	rdlong	arg03, fp
154b4     3C 4E 85 F1 | 	sub	fp, #60
154b8     02 16 66 F0 | 	shl	arg03, #2
154bc     79 00 00 FF 
154c0     44 E5 05 F1 | 	add	objptr, ##62276
154c4     F2 16 02 F1 | 	add	arg03, objptr
154c8     0B 13 02 FB | 	rdlong	arg01, arg03
154cc     79 00 00 FF 
154d0     44 E5 85 F1 | 	sub	objptr, ##62276
154d4     24 D6 B0 FD | 	call	#__system___gc_free
154d8                 | LR__1770
154d8     3C 4E 05 F1 | 	add	fp, #60
154dc     A7 1E 02 FB | 	rdlong	local01, fp
154e0     0C 4E 05 F1 | 	add	fp, #12
154e4     A7 16 02 FB | 	rdlong	arg03, fp
154e8     04 4E 05 F1 | 	add	fp, #4
154ec     A7 14 02 FB | 	rdlong	arg02, fp
154f0     0A 17 02 FD | 	qmul	arg03, arg02
154f4     02 1E 66 F0 | 	shl	local01, #2
154f8     79 00 00 FF 
154fc     44 E5 05 F1 | 	add	objptr, ##62276
15500     F2 1E 02 F1 | 	add	local01, objptr
15504     4C 4E 85 F1 | 	sub	fp, #76
15508     79 00 00 FF 
1550c     44 E5 85 F1 | 	sub	objptr, ##62276
15510     18 12 62 FD | 	getqx	arg01
15514     A8 D4 B0 FD | 	call	#__system___gc_alloc_managed
15518     0F FB 61 FC | 	wrlong	result1, local01
1551c                 | ' for y=a3 to a3+a5-1
1551c     44 4E 05 F1 | 	add	fp, #68
15520     A7 20 02 FB | 	rdlong	local02, fp
15524     0C 4E 05 F1 | 	add	fp, #12
15528     A7 20 62 FC | 	wrlong	local02, fp
1552c     0C 4E 85 F1 | 	sub	fp, #12
15530     A7 22 02 FB | 	rdlong	local03, fp
15534     08 4E 05 F1 | 	add	fp, #8
15538     A7 24 02 FB | 	rdlong	local04, fp
1553c     4C 4E 85 F1 | 	sub	fp, #76
15540     12 23 02 F1 | 	add	local03, local04
15544                 | LR__1771
15544     50 4E 05 F1 | 	add	fp, #80
15548     A7 20 02 FB | 	rdlong	local02, fp
1554c     50 4E 85 F1 | 	sub	fp, #80
15550     11 21 52 F2 | 	cmps	local02, local03 wc
15554     F4 00 90 3D |  if_ae	jmp	#LR__1774
15558                 | '   for x=a2 to a4+a2-1
15558     40 4E 05 F1 | 	add	fp, #64
1555c     A7 1E 02 FB | 	rdlong	local01, fp
15560     14 4E 05 F1 | 	add	fp, #20
15564     A7 1E 62 FC | 	wrlong	local01, fp
15568     0C 4E 85 F1 | 	sub	fp, #12
1556c     A7 26 02 FB | 	rdlong	local05, fp
15570     08 4E 85 F1 | 	sub	fp, #8
15574     A7 28 02 FB | 	rdlong	local06, fp
15578     40 4E 85 F1 | 	sub	fp, #64
1557c     14 27 02 F1 | 	add	local05, local06
15580                 | LR__1772
15580     54 4E 05 F1 | 	add	fp, #84
15584     A7 1E 02 FB | 	rdlong	local01, fp
15588     54 4E 85 F1 | 	sub	fp, #84
1558c     13 1F 52 F2 | 	cmps	local01, local05 wc
15590     A0 00 90 3D |  if_ae	jmp	#LR__1773
15594     3C 4E 05 F1 | 	add	fp, #60
15598     A7 28 02 FB | 	rdlong	local06, fp
1559c     18 4E 05 F1 | 	add	fp, #24
155a0     A7 24 02 FB | 	rdlong	local04, fp
155a4     14 4E 85 F1 | 	sub	fp, #20
155a8     A7 20 02 FB | 	rdlong	local02, fp
155ac     10 4E 05 F1 | 	add	fp, #16
155b0     A7 1E 02 FB | 	rdlong	local01, fp
155b4     0F 17 02 F6 | 	mov	arg03, local01
155b8     0C 4E 85 F1 | 	sub	fp, #12
155bc     A7 14 02 FB | 	rdlong	arg02, fp
155c0     0A 17 82 F1 | 	sub	arg03, arg02
155c4     04 4E 05 F1 | 	add	fp, #4
155c8     A7 14 02 FB | 	rdlong	arg02, fp
155cc     0A 17 02 FD | 	qmul	arg03, arg02
155d0     02 28 66 F0 | 	shl	local06, #2
155d4     79 00 00 FF 
155d8     44 E5 05 F1 | 	add	objptr, ##62276
155dc     F2 28 02 F1 | 	add	local06, objptr
155e0     14 29 02 FB | 	rdlong	local06, local06
155e4     12 2B 02 F6 | 	mov	local07, local04
155e8     10 2B 82 F1 | 	sub	local07, local02
155ec     79 00 00 FF 
155f0     44 E5 85 F1 | 	sub	objptr, ##62276
155f4     F2 12 02 FB | 	rdlong	arg01, objptr
155f8     12 13 02 F1 | 	add	arg01, local04
155fc     48 4E 85 F1 | 	sub	fp, #72
15600     0A 1E 66 F0 | 	shl	local01, #10
15604     0F 13 02 F1 | 	add	arg01, local01
15608     18 24 62 FD | 	getqx	local04
1560c     12 2B 02 F1 | 	add	local07, local04
15610     14 2B 02 F1 | 	add	local07, local06
15614     1C 53 B0 FD | 	call	#_pspeek
15618     15 FB 41 FC | 	wrbyte	result1, local07
1561c     54 4E 05 F1 | 	add	fp, #84
15620     A7 2A 02 FB | 	rdlong	local07, fp
15624     01 2A 06 F1 | 	add	local07, #1
15628     A7 2A 62 FC | 	wrlong	local07, fp
1562c     54 4E 85 F1 | 	sub	fp, #84
15630     4C FF 9F FD | 	jmp	#LR__1772
15634                 | LR__1773
15634     50 4E 05 F1 | 	add	fp, #80
15638     A7 2A 02 FB | 	rdlong	local07, fp
1563c     01 2A 06 F1 | 	add	local07, #1
15640     A7 2A 62 FC | 	wrlong	local07, fp
15644     50 4E 85 F1 | 	sub	fp, #80
15648     F8 FE 9F FD | 	jmp	#LR__1771
1564c                 | LR__1774
1564c     3C 4E 05 F1 | 	add	fp, #60
15650     A7 2A 02 FB | 	rdlong	local07, fp
15654     15 13 02 F6 | 	mov	arg01, local07
15658     3C 4E 85 F1 | 	sub	fp, #60
1565c     02 2A 66 F0 | 	shl	local07, #2
15660     79 00 00 FF 
15664     44 E5 05 F1 | 	add	objptr, ##62276
15668     F2 2A 02 F1 | 	add	local07, objptr
1566c     15 15 02 FB | 	rdlong	arg02, local07
15670     79 00 00 FF 
15674     44 E5 85 F1 | 	sub	objptr, ##62276
15678     BC 70 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1567c     3C 4E 05 F1 | 	add	fp, #60
15680     A7 12 02 FB | 	rdlong	arg01, fp
15684     0C 4E 05 F1 | 	add	fp, #12
15688     A7 14 02 FB | 	rdlong	arg02, fp
1568c     04 4E 05 F1 | 	add	fp, #4
15690     A7 16 02 FB | 	rdlong	arg03, fp
15694     4C 4E 85 F1 | 	sub	fp, #76
15698     2C 71 B0 FD | 	call	#_hg010b_spin2_setspritesize
1569c     A7 F0 03 F6 | 	mov	ptra, fp
156a0     B2 00 A0 FD | 	call	#popregs_
156a4                 | _do_defsprite_ret
156a4     2D 00 64 FD | 	ret
156a8                 | 
156a8                 | ' 
156a8                 | ' sub do_sprite
156a8                 | _do_sprite
156a8     00 4A 05 F6 | 	mov	COUNT_, #0
156ac     A8 00 A0 FD | 	call	#pushregs_
156b0     30 F0 07 F1 | 	add	ptra, #48
156b4     A8 51 BF FD | 	call	#_pop
156b8     FD 16 02 F6 | 	mov	arg03, result1
156bc     FE 14 02 F6 | 	mov	arg02, result2
156c0     FF 12 02 F6 | 	mov	arg01, result3
156c4     18 4E 05 F1 | 	add	fp, #24
156c8     A7 16 62 FC | 	wrlong	arg03, fp
156cc     04 4E 05 F1 | 	add	fp, #4
156d0     A7 14 62 FC | 	wrlong	arg02, fp
156d4     04 4E 05 F1 | 	add	fp, #4
156d8     A7 12 62 FC | 	wrlong	arg01, fp
156dc     20 4E 85 F1 | 	sub	fp, #32
156e0     7C 51 BF FD | 	call	#_pop
156e4     FD 16 02 F6 | 	mov	arg03, result1
156e8     FE 14 02 F6 | 	mov	arg02, result2
156ec     FF 12 02 F6 | 	mov	arg01, result3
156f0     0C 4E 05 F1 | 	add	fp, #12
156f4     A7 16 62 FC | 	wrlong	arg03, fp
156f8     04 4E 05 F1 | 	add	fp, #4
156fc     A7 14 62 FC | 	wrlong	arg02, fp
15700     04 4E 05 F1 | 	add	fp, #4
15704     A7 12 62 FC | 	wrlong	arg01, fp
15708     14 4E 85 F1 | 	sub	fp, #20
1570c     50 51 BF FD | 	call	#_pop
15710     FF 16 02 F6 | 	mov	arg03, result3
15714     A7 FA 61 FC | 	wrlong	result1, fp
15718     04 4E 05 F1 | 	add	fp, #4
1571c     A7 FC 61 FC | 	wrlong	result2, fp
15720     04 4E 05 F1 | 	add	fp, #4
15724     A7 16 62 FC | 	wrlong	arg03, fp
15728     08 4E 85 F1 | 	sub	fp, #8
1572c     A7 12 02 F6 | 	mov	arg01, fp
15730     E0 DD BF FD | 	call	#_converttoint
15734     24 4E 05 F1 | 	add	fp, #36
15738     A7 FA 61 FC | 	wrlong	result1, fp
1573c     18 4E 85 F1 | 	sub	fp, #24
15740     A7 12 02 F6 | 	mov	arg01, fp
15744     0C 4E 85 F1 | 	sub	fp, #12
15748     C8 DD BF FD | 	call	#_converttoint
1574c     28 4E 05 F1 | 	add	fp, #40
15750     A7 FA 61 FC | 	wrlong	result1, fp
15754     10 4E 85 F1 | 	sub	fp, #16
15758     A7 12 02 F6 | 	mov	arg01, fp
1575c     18 4E 85 F1 | 	sub	fp, #24
15760     B0 DD BF FD | 	call	#_converttoint
15764     2C 4E 05 F1 | 	add	fp, #44
15768     A7 FA 61 FC | 	wrlong	result1, fp
1576c     08 4E 85 F1 | 	sub	fp, #8
15770     A7 12 02 FB | 	rdlong	arg01, fp
15774     04 4E 05 F1 | 	add	fp, #4
15778     A7 14 02 FB | 	rdlong	arg02, fp
1577c     FD 16 02 F6 | 	mov	arg03, result1
15780     28 4E 85 F1 | 	sub	fp, #40
15784     D8 6F B0 FD | 	call	#_hg010b_spin2_setspritepos
15788     A7 F0 03 F6 | 	mov	ptra, fp
1578c     B2 00 A0 FD | 	call	#popregs_
15790                 | _do_sprite_ret
15790     2D 00 64 FD | 	ret
15794                 | 
15794                 | ' 
15794                 | ' sub do_mousex
15794                 | _do_mousex
15794     00 4A 05 F6 | 	mov	COUNT_, #0
15798     A8 00 A0 FD | 	call	#pushregs_
1579c     0C F0 07 F1 | 	add	ptra, #12
157a0     08 4E 05 F1 | 	add	fp, #8
157a4     A7 3A 68 FC | 	wrlong	#29, fp
157a8     08 4E 85 F1 | 	sub	fp, #8
157ac     79 00 00 FF 
157b0     FC E4 05 F1 | 	add	objptr, ##62204
157b4     F2 12 02 FB | 	rdlong	arg01, objptr
157b8     79 00 00 FF 
157bc     FC E4 85 F1 | 	sub	objptr, ##62204
157c0     A7 12 62 FC | 	wrlong	arg01, fp
157c4     A7 12 02 F6 | 	mov	arg01, fp
157c8     2C 51 BF FD | 	call	#_push
157cc     A7 F0 03 F6 | 	mov	ptra, fp
157d0     B2 00 A0 FD | 	call	#popregs_
157d4                 | _do_mousex_ret
157d4     2D 00 64 FD | 	ret
157d8                 | 
157d8                 | ' 
157d8                 | ' sub do_mousey
157d8                 | _do_mousey
157d8     00 4A 05 F6 | 	mov	COUNT_, #0
157dc     A8 00 A0 FD | 	call	#pushregs_
157e0     0C F0 07 F1 | 	add	ptra, #12
157e4     08 4E 05 F1 | 	add	fp, #8
157e8     A7 3A 68 FC | 	wrlong	#29, fp
157ec     08 4E 85 F1 | 	sub	fp, #8
157f0     79 00 00 FF 
157f4     00 E5 05 F1 | 	add	objptr, ##62208
157f8     F2 12 02 FB | 	rdlong	arg01, objptr
157fc     79 00 00 FF 
15800     00 E5 85 F1 | 	sub	objptr, ##62208
15804     A7 12 62 FC | 	wrlong	arg01, fp
15808     A7 12 02 F6 | 	mov	arg01, fp
1580c     E8 50 BF FD | 	call	#_push
15810     A7 F0 03 F6 | 	mov	ptra, fp
15814     B2 00 A0 FD | 	call	#popregs_
15818                 | _do_mousey_ret
15818     2D 00 64 FD | 	ret
1581c                 | 
1581c                 | ' 
1581c                 | ' sub do_mousew
1581c                 | _do_mousew
1581c     00 4A 05 F6 | 	mov	COUNT_, #0
15820     A8 00 A0 FD | 	call	#pushregs_
15824     0C F0 07 F1 | 	add	ptra, #12
15828     08 4E 05 F1 | 	add	fp, #8
1582c     A7 38 68 FC | 	wrlong	#28, fp
15830     08 4E 85 F1 | 	sub	fp, #8
15834     79 00 00 FF 
15838     08 E5 05 F1 | 	add	objptr, ##62216
1583c     F2 12 02 FB | 	rdlong	arg01, objptr
15840     79 00 00 FF 
15844     08 E5 85 F1 | 	sub	objptr, ##62216
15848     A7 12 62 FC | 	wrlong	arg01, fp
1584c     A7 12 02 F6 | 	mov	arg01, fp
15850     A4 50 BF FD | 	call	#_push
15854     A7 F0 03 F6 | 	mov	ptra, fp
15858     B2 00 A0 FD | 	call	#popregs_
1585c                 | _do_mousew_ret
1585c     2D 00 64 FD | 	ret
15860                 | 
15860                 | ' 
15860                 | ' sub do_mousek
15860                 | _do_mousek
15860     00 4A 05 F6 | 	mov	COUNT_, #0
15864     A8 00 A0 FD | 	call	#pushregs_
15868     0C F0 07 F1 | 	add	ptra, #12
1586c     08 4E 05 F1 | 	add	fp, #8
15870     A7 3A 68 FC | 	wrlong	#29, fp
15874     08 4E 85 F1 | 	sub	fp, #8
15878     79 00 00 FF 
1587c     04 E5 05 F1 | 	add	objptr, ##62212
15880     F2 12 02 FB | 	rdlong	arg01, objptr
15884     79 00 00 FF 
15888     04 E5 85 F1 | 	sub	objptr, ##62212
1588c     A7 12 62 FC | 	wrlong	arg01, fp
15890     A7 12 02 F6 | 	mov	arg01, fp
15894     60 50 BF FD | 	call	#_push
15898     A7 F0 03 F6 | 	mov	ptra, fp
1589c     B2 00 A0 FD | 	call	#popregs_
158a0                 | _do_mousek_ret
158a0     2D 00 64 FD | 	ret
158a4                 | 
158a4                 | ' 
158a4                 | ' 
158a4                 | ' sub do_rdpin
158a4                 | _do_rdpin
158a4     00 4A 05 F6 | 	mov	COUNT_, #0
158a8     A8 00 A0 FD | 	call	#pushregs_
158ac     0C F0 07 F1 | 	add	ptra, #12
158b0     AC 4F BF FD | 	call	#_pop
158b4     A7 FA 61 FC | 	wrlong	result1, fp
158b8     04 4E 05 F1 | 	add	fp, #4
158bc     A7 FC 61 FC | 	wrlong	result2, fp
158c0     04 4E 05 F1 | 	add	fp, #4
158c4     A7 FE 61 FC | 	wrlong	result3, fp
158c8     08 4E 85 F1 | 	sub	fp, #8
158cc     A7 12 02 F6 | 	mov	arg01, fp
158d0     40 DC BF FD | 	call	#_converttoint
158d4     FD FA 89 FA | 	rdpin	result1, result1
158d8     7A 00 00 FF 
158dc     30 E4 05 F1 | 	add	objptr, ##62512
158e0     F2 FA 61 FC | 	wrlong	result1, objptr
158e4     7A 00 00 FF 
158e8     30 E4 85 F1 | 	sub	objptr, ##62512
158ec     08 4E 05 F1 | 	add	fp, #8
158f0     A7 3A 68 FC | 	wrlong	#29, fp
158f4     08 4E 85 F1 | 	sub	fp, #8
158f8     A7 08 68 FC | 	wrlong	#4, fp
158fc     A7 12 02 F6 | 	mov	arg01, fp
15900     F4 4F BF FD | 	call	#_push
15904     A7 F0 03 F6 | 	mov	ptra, fp
15908     B2 00 A0 FD | 	call	#popregs_
1590c                 | _do_rdpin_ret
1590c     2D 00 64 FD | 	ret
15910                 | 
15910                 | ' 
15910                 | ' sub do_rqpin
15910                 | _do_rqpin
15910     00 4A 05 F6 | 	mov	COUNT_, #0
15914     A8 00 A0 FD | 	call	#pushregs_
15918     0C F0 07 F1 | 	add	ptra, #12
1591c     40 4F BF FD | 	call	#_pop
15920     A7 FA 61 FC | 	wrlong	result1, fp
15924     04 4E 05 F1 | 	add	fp, #4
15928     A7 FC 61 FC | 	wrlong	result2, fp
1592c     04 4E 05 F1 | 	add	fp, #4
15930     A7 FE 61 FC | 	wrlong	result3, fp
15934     08 4E 85 F1 | 	sub	fp, #8
15938     A7 12 02 F6 | 	mov	arg01, fp
1593c     D4 DB BF FD | 	call	#_converttoint
15940     FD 12 02 F6 | 	mov	arg01, result1
15944     00 FA 05 F6 | 	mov	result1, #0
15948     09 FB 81 FA | 	rqpin	result1, arg01
1594c     7A 00 00 FF 
15950     30 E4 05 F1 | 	add	objptr, ##62512
15954     F2 FA 61 FC | 	wrlong	result1, objptr
15958     7A 00 00 FF 
1595c     30 E4 85 F1 | 	sub	objptr, ##62512
15960     08 4E 05 F1 | 	add	fp, #8
15964     A7 3A 68 FC | 	wrlong	#29, fp
15968     08 4E 85 F1 | 	sub	fp, #8
1596c     A7 08 68 FC | 	wrlong	#4, fp
15970     A7 12 02 F6 | 	mov	arg01, fp
15974     80 4F BF FD | 	call	#_push
15978     A7 F0 03 F6 | 	mov	ptra, fp
1597c     B2 00 A0 FD | 	call	#popregs_
15980                 | _do_rqpin_ret
15980     2D 00 64 FD | 	ret
15984                 | 
15984                 | ' 
15984                 | ' sub do_pinread
15984                 | _do_pinread
15984     00 4A 05 F6 | 	mov	COUNT_, #0
15988     A8 00 A0 FD | 	call	#pushregs_
1598c     0C F0 07 F1 | 	add	ptra, #12
15990     CC 4E BF FD | 	call	#_pop
15994     A7 FA 61 FC | 	wrlong	result1, fp
15998     04 4E 05 F1 | 	add	fp, #4
1599c     A7 FC 61 FC | 	wrlong	result2, fp
159a0     04 4E 05 F1 | 	add	fp, #4
159a4     A7 FE 61 FC | 	wrlong	result3, fp
159a8     08 4E 85 F1 | 	sub	fp, #8
159ac     A7 12 02 F6 | 	mov	arg01, fp
159b0     60 DB BF FD | 	call	#_converttoint
159b4     FD 12 02 F6 | 	mov	arg01, result1
159b8     20 12 CE F7 | 	test	arg01, #32 wz
159bc     FF FB 01 56 |  if_ne	mov	result1, inb
159c0     FE FB 01 A6 |  if_e	mov	result1, ina
159c4     09 FB 41 F0 | 	shr	result1, arg01
159c8     06 12 46 F0 | 	shr	arg01, #6
159cc     09 FB 41 F7 | 	zerox	result1, arg01
159d0     7A 00 00 FF 
159d4     30 E4 05 F1 | 	add	objptr, ##62512
159d8     F2 FA 61 FC | 	wrlong	result1, objptr
159dc     7A 00 00 FF 
159e0     30 E4 85 F1 | 	sub	objptr, ##62512
159e4     08 4E 05 F1 | 	add	fp, #8
159e8     A7 3A 68 FC | 	wrlong	#29, fp
159ec     08 4E 85 F1 | 	sub	fp, #8
159f0     A7 08 68 FC | 	wrlong	#4, fp
159f4     A7 12 02 F6 | 	mov	arg01, fp
159f8     FC 4E BF FD | 	call	#_push
159fc     A7 F0 03 F6 | 	mov	ptra, fp
15a00     B2 00 A0 FD | 	call	#popregs_
15a04                 | _do_pinread_ret
15a04     2D 00 64 FD | 	ret
15a08                 | 
15a08                 | ' 
15a08                 | ' sub do_gettime
15a08                 | _do_gettime
15a08     02 4A 05 F6 | 	mov	COUNT_, #2
15a0c     A8 00 A0 FD | 	call	#pushregs_
15a10     14 F0 07 F1 | 	add	ptra, #20
15a14                 | ' 
15a14                 | ' const asm 
15a14     1A 1E 72 FD | 	getct	local01 wc
15a18     1A 20 62 FD | 	getct	local02
15a1c                 | ' 
15a1c                 | ' return hi1, lo1
15a1c     10 FD 01 F6 | 	mov	result2, local02
15a20     A7 1E 62 FC | 	wrlong	local01, fp
15a24     04 4E 05 F1 | 	add	fp, #4
15a28     A7 FC 61 FC | 	wrlong	result2, fp
15a2c     0C 4E 05 F1 | 	add	fp, #12
15a30     A7 3A 68 FC | 	wrlong	#29, fp
15a34     0C 4E 85 F1 | 	sub	fp, #12
15a38     A7 12 02 FB | 	rdlong	arg01, fp
15a3c     04 4E 05 F1 | 	add	fp, #4
15a40     A7 12 62 FC | 	wrlong	arg01, fp
15a44     08 4E 85 F1 | 	sub	fp, #8
15a48     A7 12 02 FB | 	rdlong	arg01, fp
15a4c     0C 4E 05 F1 | 	add	fp, #12
15a50     A7 12 62 FC | 	wrlong	arg01, fp
15a54     04 4E 85 F1 | 	sub	fp, #4
15a58     A7 12 02 F6 | 	mov	arg01, fp
15a5c     08 4E 85 F1 | 	sub	fp, #8
15a60     94 4E BF FD | 	call	#_push
15a64     A7 F0 03 F6 | 	mov	ptra, fp
15a68     B2 00 A0 FD | 	call	#popregs_
15a6c                 | _do_gettime_ret
15a6c     2D 00 64 FD | 	ret
15a70                 | 
15a70                 | '    
15a70                 | ' 
15a70                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
15a70                 | ' 
15a70                 | ' '' ----------------------------- Clear the screen
15a70                 | ' 
15a70                 | ' sub do_cls
15a70                 | _do_cls
15a70     57 00 00 FF 
15a74     3C E4 05 F1 | 	add	objptr, ##44604
15a78     F2 12 02 FB | 	rdlong	arg01, objptr
15a7c     04 E4 85 F1 | 	sub	objptr, #4
15a80     F2 14 02 FB | 	rdlong	arg02, objptr
15a84     57 00 00 FF 
15a88     38 E4 85 F1 | 	sub	objptr, ##44600
15a8c     58 7A B0 FD | 	call	#_hg010b_spin2_cls
15a90     57 00 00 FF 
15a94     3C E4 05 F1 | 	add	objptr, ##44604
15a98     F2 14 02 FB | 	rdlong	arg02, objptr
15a9c     14 E4 85 F1 | 	sub	objptr, #20
15aa0     F2 14 62 FC | 	wrlong	arg02, objptr
15aa4     57 00 00 FF 
15aa8     28 E4 85 F1 | 	sub	objptr, ##44584
15aac                 | ' cls(ink,paper): plot_color=ink: print
15aac     00 12 06 F6 | 	mov	arg01, #0
15ab0     58 EA B0 FD | 	call	#__system___getiolock_0484
15ab4     FD 12 02 F6 | 	mov	arg01, result1
15ab8     B8 90 B0 FD | 	call	#__system___lockmem
15abc     00 12 06 F6 | 	mov	arg01, #0
15ac0     0A 14 06 F6 | 	mov	arg02, #10
15ac4     00 16 06 F6 | 	mov	arg03, #0
15ac8     58 9D B0 FD | 	call	#__system___basic_print_char
15acc     00 12 06 F6 | 	mov	arg01, #0
15ad0     38 EA B0 FD | 	call	#__system___getiolock_0484
15ad4     FD 00 68 FC | 	wrlong	#0, result1
15ad8                 | _do_cls_ret
15ad8     2D 00 64 FD | 	ret
15adc                 | 
15adc                 | ' 
15adc                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
15adc                 | ' 
15adc                 | ' sub do_color
15adc                 | _do_color
15adc     03 4A 05 F6 | 	mov	COUNT_, #3
15ae0     A8 00 A0 FD | 	call	#pushregs_
15ae4     78 4D BF FD | 	call	#_pop
15ae8     FD 1E 02 F6 | 	mov	local01, result1
15aec     FE 20 02 F6 | 	mov	local02, result2
15af0     FF 22 02 F6 | 	mov	local03, result3
15af4     57 00 00 FF 
15af8     28 E4 05 F1 | 	add	objptr, ##44584
15afc     F2 1E 62 FC | 	wrlong	local01, objptr
15b00     57 00 00 FF 
15b04     28 E4 85 F1 | 	sub	objptr, ##44584
15b08     A7 F0 03 F6 | 	mov	ptra, fp
15b0c     B2 00 A0 FD | 	call	#popregs_
15b10                 | _do_color_ret
15b10     2D 00 64 FD | 	ret
15b14                 | 
15b14                 | ' 
15b14                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
15b14                 | ' 
15b14                 | ' sub do_plot
15b14                 | _do_plot
15b14     00 4A 05 F6 | 	mov	COUNT_, #0
15b18     A8 00 A0 FD | 	call	#pushregs_
15b1c     20 F0 07 F1 | 	add	ptra, #32
15b20     3C 4D BF FD | 	call	#_pop
15b24     FD 16 02 F6 | 	mov	arg03, result1
15b28     FE 14 02 F6 | 	mov	arg02, result2
15b2c     FF 12 02 F6 | 	mov	arg01, result3
15b30     0C 4E 05 F1 | 	add	fp, #12
15b34     A7 16 62 FC | 	wrlong	arg03, fp
15b38     04 4E 05 F1 | 	add	fp, #4
15b3c     A7 14 62 FC | 	wrlong	arg02, fp
15b40     04 4E 05 F1 | 	add	fp, #4
15b44     A7 12 62 FC | 	wrlong	arg01, fp
15b48     14 4E 85 F1 | 	sub	fp, #20
15b4c     10 4D BF FD | 	call	#_pop
15b50     FF 16 02 F6 | 	mov	arg03, result3
15b54     A7 FA 61 FC | 	wrlong	result1, fp
15b58     04 4E 05 F1 | 	add	fp, #4
15b5c     A7 FC 61 FC | 	wrlong	result2, fp
15b60     04 4E 05 F1 | 	add	fp, #4
15b64     A7 16 62 FC | 	wrlong	arg03, fp
15b68     08 4E 85 F1 | 	sub	fp, #8
15b6c     A7 12 02 F6 | 	mov	arg01, fp
15b70     A0 D9 BF FD | 	call	#_converttoint
15b74     18 4E 05 F1 | 	add	fp, #24
15b78     A7 FA 61 FC | 	wrlong	result1, fp
15b7c     0C 4E 85 F1 | 	sub	fp, #12
15b80     A7 12 02 F6 | 	mov	arg01, fp
15b84     0C 4E 85 F1 | 	sub	fp, #12
15b88     88 D9 BF FD | 	call	#_converttoint
15b8c     1C 4E 05 F1 | 	add	fp, #28
15b90     A7 FA 61 FC | 	wrlong	result1, fp
15b94     04 4E 85 F1 | 	sub	fp, #4
15b98     A7 16 02 FB | 	rdlong	arg03, fp
15b9c     57 00 00 FF 
15ba0     2C E4 05 F1 | 	add	objptr, ##44588
15ba4     F2 16 62 FC | 	wrlong	arg03, objptr
15ba8     04 4E 05 F1 | 	add	fp, #4
15bac     A7 14 02 FB | 	rdlong	arg02, fp
15bb0     1C 4E 85 F1 | 	sub	fp, #28
15bb4     04 E4 05 F1 | 	add	objptr, #4
15bb8     F2 14 62 FC | 	wrlong	arg02, objptr
15bbc     04 E4 85 F1 | 	sub	objptr, #4
15bc0     F2 12 02 FB | 	rdlong	arg01, objptr
15bc4     04 E4 85 F1 | 	sub	objptr, #4
15bc8     F2 16 02 FB | 	rdlong	arg03, objptr
15bcc     57 00 00 FF 
15bd0     28 E4 85 F1 | 	sub	objptr, ##44584
15bd4     3C 6C B0 FD | 	call	#_hg010b_spin2_putpixel
15bd8     A7 F0 03 F6 | 	mov	ptra, fp
15bdc     B2 00 A0 FD | 	call	#popregs_
15be0                 | _do_plot_ret
15be0     2D 00 64 FD | 	ret
15be4                 | 
15be4                 | ' 
15be4                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
15be4                 | ' 
15be4                 | ' sub do_draw
15be4                 | _do_draw
15be4     00 4A 05 F6 | 	mov	COUNT_, #0
15be8     A8 00 A0 FD | 	call	#pushregs_
15bec     20 F0 07 F1 | 	add	ptra, #32
15bf0     6C 4C BF FD | 	call	#_pop
15bf4     FD 1A 02 F6 | 	mov	arg05, result1
15bf8     FE 18 02 F6 | 	mov	arg04, result2
15bfc     FF 16 02 F6 | 	mov	arg03, result3
15c00     0C 4E 05 F1 | 	add	fp, #12
15c04     A7 1A 62 FC | 	wrlong	arg05, fp
15c08     04 4E 05 F1 | 	add	fp, #4
15c0c     A7 18 62 FC | 	wrlong	arg04, fp
15c10     04 4E 05 F1 | 	add	fp, #4
15c14     A7 16 62 FC | 	wrlong	arg03, fp
15c18     14 4E 85 F1 | 	sub	fp, #20
15c1c     40 4C BF FD | 	call	#_pop
15c20     FF 1A 02 F6 | 	mov	arg05, result3
15c24     A7 FA 61 FC | 	wrlong	result1, fp
15c28     04 4E 05 F1 | 	add	fp, #4
15c2c     A7 FC 61 FC | 	wrlong	result2, fp
15c30     04 4E 05 F1 | 	add	fp, #4
15c34     A7 1A 62 FC | 	wrlong	arg05, fp
15c38     08 4E 85 F1 | 	sub	fp, #8
15c3c     A7 12 02 F6 | 	mov	arg01, fp
15c40     D0 D8 BF FD | 	call	#_converttoint
15c44     18 4E 05 F1 | 	add	fp, #24
15c48     A7 FA 61 FC | 	wrlong	result1, fp
15c4c     0C 4E 85 F1 | 	sub	fp, #12
15c50     A7 12 02 F6 | 	mov	arg01, fp
15c54     0C 4E 85 F1 | 	sub	fp, #12
15c58     B8 D8 BF FD | 	call	#_converttoint
15c5c     1C 4E 05 F1 | 	add	fp, #28
15c60     A7 FA 61 FC | 	wrlong	result1, fp
15c64     57 00 00 FF 
15c68     2C E4 05 F1 | 	add	objptr, ##44588
15c6c     F2 12 02 FB | 	rdlong	arg01, objptr
15c70     04 E4 05 F1 | 	add	objptr, #4
15c74     F2 14 02 FB | 	rdlong	arg02, objptr
15c78     04 4E 85 F1 | 	sub	fp, #4
15c7c     A7 16 02 FB | 	rdlong	arg03, fp
15c80     FD 18 02 F6 | 	mov	arg04, result1
15c84     18 4E 85 F1 | 	sub	fp, #24
15c88     08 E4 85 F1 | 	sub	objptr, #8
15c8c     F2 1A 02 FB | 	rdlong	arg05, objptr
15c90     57 00 00 FF 
15c94     28 E4 85 F1 | 	sub	objptr, ##44584
15c98     28 6E B0 FD | 	call	#_hg010b_spin2_draw
15c9c     18 4E 05 F1 | 	add	fp, #24
15ca0     A7 1A 02 FB | 	rdlong	arg05, fp
15ca4     57 00 00 FF 
15ca8     2C E4 05 F1 | 	add	objptr, ##44588
15cac     F2 1A 62 FC | 	wrlong	arg05, objptr
15cb0     04 4E 05 F1 | 	add	fp, #4
15cb4     A7 1A 02 FB | 	rdlong	arg05, fp
15cb8     1C 4E 85 F1 | 	sub	fp, #28
15cbc     04 E4 05 F1 | 	add	objptr, #4
15cc0     F2 1A 62 FC | 	wrlong	arg05, objptr
15cc4     57 00 00 FF 
15cc8     30 E4 85 F1 | 	sub	objptr, ##44592
15ccc     A7 F0 03 F6 | 	mov	ptra, fp
15cd0     B2 00 A0 FD | 	call	#popregs_
15cd4                 | _do_draw_ret
15cd4     2D 00 64 FD | 	ret
15cd8                 | 
15cd8                 | ' 
15cd8                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
15cd8                 | ' 
15cd8                 | ' sub do_fcircle
15cd8                 | _do_fcircle
15cd8     02 4A 05 F6 | 	mov	COUNT_, #2
15cdc     A8 00 A0 FD | 	call	#pushregs_
15ce0     24 F0 07 F1 | 	add	ptra, #36
15ce4     78 4B BF FD | 	call	#_pop
15ce8     FD 18 02 F6 | 	mov	arg04, result1
15cec     FE 16 02 F6 | 	mov	arg03, result2
15cf0     FF 14 02 F6 | 	mov	arg02, result3
15cf4     18 4E 05 F1 | 	add	fp, #24
15cf8     A7 18 62 FC | 	wrlong	arg04, fp
15cfc     04 4E 05 F1 | 	add	fp, #4
15d00     A7 16 62 FC | 	wrlong	arg03, fp
15d04     04 4E 05 F1 | 	add	fp, #4
15d08     A7 14 62 FC | 	wrlong	arg02, fp
15d0c     20 4E 85 F1 | 	sub	fp, #32
15d10     4C 4B BF FD | 	call	#_pop
15d14     FD 18 02 F6 | 	mov	arg04, result1
15d18     FE 16 02 F6 | 	mov	arg03, result2
15d1c     FF 1E 02 F6 | 	mov	local01, result3
15d20     0C 4E 05 F1 | 	add	fp, #12
15d24     A7 18 62 FC | 	wrlong	arg04, fp
15d28     04 4E 05 F1 | 	add	fp, #4
15d2c     A7 16 62 FC | 	wrlong	arg03, fp
15d30     04 4E 05 F1 | 	add	fp, #4
15d34     A7 1E 62 FC | 	wrlong	local01, fp
15d38     14 4E 85 F1 | 	sub	fp, #20
15d3c     20 4B BF FD | 	call	#_pop
15d40     A7 FA 61 FC | 	wrlong	result1, fp
15d44     04 4E 05 F1 | 	add	fp, #4
15d48     A7 FC 61 FC | 	wrlong	result2, fp
15d4c     04 4E 05 F1 | 	add	fp, #4
15d50     A7 FE 61 FC | 	wrlong	result3, fp
15d54                 | ' 
15d54                 | ' t3=pop()
15d54                 | ' t2=pop()
15d54                 | ' t1=pop()
15d54                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
15d54     FF 18 02 F6 | 	mov	arg04, result3
15d58     08 4E 85 F1 | 	sub	fp, #8
15d5c     1C 18 0E F2 | 	cmp	arg04, #28 wz
15d60     08 4E 05 51 |  if_ne	add	fp, #8
15d64     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15d68     08 4E 85 51 |  if_ne	sub	fp, #8
15d6c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15d70     7C 00 90 5D |  if_ne	jmp	#LR__1780
15d74     14 4E 05 F1 | 	add	fp, #20
15d78     A7 1E 02 FB | 	rdlong	local01, fp
15d7c     14 4E 85 F1 | 	sub	fp, #20
15d80     1C 1E 0E F2 | 	cmp	local01, #28 wz
15d84     14 4E 05 51 |  if_ne	add	fp, #20
15d88     A7 18 02 5B |  if_ne	rdlong	arg04, fp
15d8c     14 4E 85 51 |  if_ne	sub	fp, #20
15d90     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
15d94     58 00 90 5D |  if_ne	jmp	#LR__1780
15d98     20 4E 05 F1 | 	add	fp, #32
15d9c     A7 1E 02 FB | 	rdlong	local01, fp
15da0     20 4E 85 F1 | 	sub	fp, #32
15da4     1C 1E 0E F2 | 	cmp	local01, #28 wz
15da8     20 4E 05 51 |  if_ne	add	fp, #32
15dac     A7 18 02 5B |  if_ne	rdlong	arg04, fp
15db0     20 4E 85 51 |  if_ne	sub	fp, #32
15db4     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
15db8     34 00 90 5D |  if_ne	jmp	#LR__1780
15dbc     A7 12 02 FB | 	rdlong	arg01, fp
15dc0     0C 4E 05 F1 | 	add	fp, #12
15dc4     A7 14 02 FB | 	rdlong	arg02, fp
15dc8     0C 4E 05 F1 | 	add	fp, #12
15dcc     A7 16 02 FB | 	rdlong	arg03, fp
15dd0     18 4E 85 F1 | 	sub	fp, #24
15dd4     57 00 00 FF 
15dd8     28 E4 05 F1 | 	add	objptr, ##44584
15ddc     F2 18 02 FB | 	rdlong	arg04, objptr
15de0     57 00 00 FF 
15de4     28 E4 85 F1 | 	sub	objptr, ##44584
15de8     5C 71 B0 FD | 	call	#_hg010b_spin2_fcircle
15dec                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
15dec     54 00 90 FD | 	jmp	#LR__1781
15df0                 | LR__1780
15df0     A7 12 02 F6 | 	mov	arg01, fp
15df4     1C D7 BF FD | 	call	#_converttoint
15df8     FD 1E 02 F6 | 	mov	local01, result1
15dfc     0C 4E 05 F1 | 	add	fp, #12
15e00     A7 12 02 F6 | 	mov	arg01, fp
15e04     0C 4E 85 F1 | 	sub	fp, #12
15e08     08 D7 BF FD | 	call	#_converttoint
15e0c     FD 20 02 F6 | 	mov	local02, result1
15e10     18 4E 05 F1 | 	add	fp, #24
15e14     A7 12 02 F6 | 	mov	arg01, fp
15e18     18 4E 85 F1 | 	sub	fp, #24
15e1c     F4 D6 BF FD | 	call	#_converttoint
15e20     FD 16 02 F6 | 	mov	arg03, result1
15e24     57 00 00 FF 
15e28     28 E4 05 F1 | 	add	objptr, ##44584
15e2c     F2 18 02 FB | 	rdlong	arg04, objptr
15e30     57 00 00 FF 
15e34     28 E4 85 F1 | 	sub	objptr, ##44584
15e38     0F 13 02 F6 | 	mov	arg01, local01
15e3c     10 15 02 F6 | 	mov	arg02, local02
15e40     04 71 B0 FD | 	call	#_hg010b_spin2_fcircle
15e44                 | LR__1781
15e44     A7 F0 03 F6 | 	mov	ptra, fp
15e48     B2 00 A0 FD | 	call	#popregs_
15e4c                 | _do_fcircle_ret
15e4c     2D 00 64 FD | 	ret
15e50                 | 
15e50                 | ' 
15e50                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
15e50                 | ' 
15e50                 | ' sub do_circle
15e50                 | _do_circle
15e50     02 4A 05 F6 | 	mov	COUNT_, #2
15e54     A8 00 A0 FD | 	call	#pushregs_
15e58     24 F0 07 F1 | 	add	ptra, #36
15e5c     00 4A BF FD | 	call	#_pop
15e60     FD 18 02 F6 | 	mov	arg04, result1
15e64     FE 16 02 F6 | 	mov	arg03, result2
15e68     FF 14 02 F6 | 	mov	arg02, result3
15e6c     18 4E 05 F1 | 	add	fp, #24
15e70     A7 18 62 FC | 	wrlong	arg04, fp
15e74     04 4E 05 F1 | 	add	fp, #4
15e78     A7 16 62 FC | 	wrlong	arg03, fp
15e7c     04 4E 05 F1 | 	add	fp, #4
15e80     A7 14 62 FC | 	wrlong	arg02, fp
15e84     20 4E 85 F1 | 	sub	fp, #32
15e88     D4 49 BF FD | 	call	#_pop
15e8c     FD 18 02 F6 | 	mov	arg04, result1
15e90     FE 16 02 F6 | 	mov	arg03, result2
15e94     FF 1E 02 F6 | 	mov	local01, result3
15e98     0C 4E 05 F1 | 	add	fp, #12
15e9c     A7 18 62 FC | 	wrlong	arg04, fp
15ea0     04 4E 05 F1 | 	add	fp, #4
15ea4     A7 16 62 FC | 	wrlong	arg03, fp
15ea8     04 4E 05 F1 | 	add	fp, #4
15eac     A7 1E 62 FC | 	wrlong	local01, fp
15eb0     14 4E 85 F1 | 	sub	fp, #20
15eb4     A8 49 BF FD | 	call	#_pop
15eb8     A7 FA 61 FC | 	wrlong	result1, fp
15ebc     04 4E 05 F1 | 	add	fp, #4
15ec0     A7 FC 61 FC | 	wrlong	result2, fp
15ec4     04 4E 05 F1 | 	add	fp, #4
15ec8     A7 FE 61 FC | 	wrlong	result3, fp
15ecc                 | ' 
15ecc                 | ' t3=pop()
15ecc                 | ' t2=pop()
15ecc                 | ' t1=pop()
15ecc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
15ecc     FF 18 02 F6 | 	mov	arg04, result3
15ed0     08 4E 85 F1 | 	sub	fp, #8
15ed4     1C 18 0E F2 | 	cmp	arg04, #28 wz
15ed8     08 4E 05 51 |  if_ne	add	fp, #8
15edc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15ee0     08 4E 85 51 |  if_ne	sub	fp, #8
15ee4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15ee8     7C 00 90 5D |  if_ne	jmp	#LR__1790
15eec     14 4E 05 F1 | 	add	fp, #20
15ef0     A7 1E 02 FB | 	rdlong	local01, fp
15ef4     14 4E 85 F1 | 	sub	fp, #20
15ef8     1C 1E 0E F2 | 	cmp	local01, #28 wz
15efc     14 4E 05 51 |  if_ne	add	fp, #20
15f00     A7 18 02 5B |  if_ne	rdlong	arg04, fp
15f04     14 4E 85 51 |  if_ne	sub	fp, #20
15f08     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
15f0c     58 00 90 5D |  if_ne	jmp	#LR__1790
15f10     20 4E 05 F1 | 	add	fp, #32
15f14     A7 1E 02 FB | 	rdlong	local01, fp
15f18     20 4E 85 F1 | 	sub	fp, #32
15f1c     1C 1E 0E F2 | 	cmp	local01, #28 wz
15f20     20 4E 05 51 |  if_ne	add	fp, #32
15f24     A7 18 02 5B |  if_ne	rdlong	arg04, fp
15f28     20 4E 85 51 |  if_ne	sub	fp, #32
15f2c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
15f30     34 00 90 5D |  if_ne	jmp	#LR__1790
15f34     A7 12 02 FB | 	rdlong	arg01, fp
15f38     0C 4E 05 F1 | 	add	fp, #12
15f3c     A7 14 02 FB | 	rdlong	arg02, fp
15f40     0C 4E 05 F1 | 	add	fp, #12
15f44     A7 16 02 FB | 	rdlong	arg03, fp
15f48     18 4E 85 F1 | 	sub	fp, #24
15f4c     57 00 00 FF 
15f50     28 E4 05 F1 | 	add	objptr, ##44584
15f54     F2 18 02 FB | 	rdlong	arg04, objptr
15f58     57 00 00 FF 
15f5c     28 E4 85 F1 | 	sub	objptr, ##44584
15f60     F0 70 B0 FD | 	call	#_hg010b_spin2_circle
15f64                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
15f64     54 00 90 FD | 	jmp	#LR__1791
15f68                 | LR__1790
15f68     A7 12 02 F6 | 	mov	arg01, fp
15f6c     A4 D5 BF FD | 	call	#_converttoint
15f70     FD 1E 02 F6 | 	mov	local01, result1
15f74     0C 4E 05 F1 | 	add	fp, #12
15f78     A7 12 02 F6 | 	mov	arg01, fp
15f7c     0C 4E 85 F1 | 	sub	fp, #12
15f80     90 D5 BF FD | 	call	#_converttoint
15f84     FD 20 02 F6 | 	mov	local02, result1
15f88     18 4E 05 F1 | 	add	fp, #24
15f8c     A7 12 02 F6 | 	mov	arg01, fp
15f90     18 4E 85 F1 | 	sub	fp, #24
15f94     7C D5 BF FD | 	call	#_converttoint
15f98     FD 16 02 F6 | 	mov	arg03, result1
15f9c     57 00 00 FF 
15fa0     28 E4 05 F1 | 	add	objptr, ##44584
15fa4     F2 18 02 FB | 	rdlong	arg04, objptr
15fa8     57 00 00 FF 
15fac     28 E4 85 F1 | 	sub	objptr, ##44584
15fb0     0F 13 02 F6 | 	mov	arg01, local01
15fb4     10 15 02 F6 | 	mov	arg02, local02
15fb8     98 70 B0 FD | 	call	#_hg010b_spin2_circle
15fbc                 | LR__1791
15fbc     A7 F0 03 F6 | 	mov	ptra, fp
15fc0     B2 00 A0 FD | 	call	#popregs_
15fc4                 | _do_circle_ret
15fc4     2D 00 64 FD | 	ret
15fc8                 | 
15fc8                 | ' 
15fc8                 | ' ' -------------------------- Draw a rectangle
15fc8                 | ' 
15fc8                 | ' sub do_box
15fc8                 | _do_box
15fc8     03 4A 05 F6 | 	mov	COUNT_, #3
15fcc     A8 00 A0 FD | 	call	#pushregs_
15fd0     30 F0 07 F1 | 	add	ptra, #48
15fd4     88 48 BF FD | 	call	#_pop
15fd8     FD 1A 02 F6 | 	mov	arg05, result1
15fdc     FE 18 02 F6 | 	mov	arg04, result2
15fe0     FF 16 02 F6 | 	mov	arg03, result3
15fe4     24 4E 05 F1 | 	add	fp, #36
15fe8     A7 1A 62 FC | 	wrlong	arg05, fp
15fec     04 4E 05 F1 | 	add	fp, #4
15ff0     A7 18 62 FC | 	wrlong	arg04, fp
15ff4     04 4E 05 F1 | 	add	fp, #4
15ff8     A7 16 62 FC | 	wrlong	arg03, fp
15ffc     2C 4E 85 F1 | 	sub	fp, #44
16000     5C 48 BF FD | 	call	#_pop
16004     FD 1A 02 F6 | 	mov	arg05, result1
16008     FE 18 02 F6 | 	mov	arg04, result2
1600c     FF 16 02 F6 | 	mov	arg03, result3
16010     18 4E 05 F1 | 	add	fp, #24
16014     A7 1A 62 FC | 	wrlong	arg05, fp
16018     04 4E 05 F1 | 	add	fp, #4
1601c     A7 18 62 FC | 	wrlong	arg04, fp
16020     04 4E 05 F1 | 	add	fp, #4
16024     A7 16 62 FC | 	wrlong	arg03, fp
16028     20 4E 85 F1 | 	sub	fp, #32
1602c     30 48 BF FD | 	call	#_pop
16030     FD 1A 02 F6 | 	mov	arg05, result1
16034     FE 18 02 F6 | 	mov	arg04, result2
16038     FF 1E 02 F6 | 	mov	local01, result3
1603c     0C 4E 05 F1 | 	add	fp, #12
16040     A7 1A 62 FC | 	wrlong	arg05, fp
16044     04 4E 05 F1 | 	add	fp, #4
16048     A7 18 62 FC | 	wrlong	arg04, fp
1604c     04 4E 05 F1 | 	add	fp, #4
16050     A7 1E 62 FC | 	wrlong	local01, fp
16054     14 4E 85 F1 | 	sub	fp, #20
16058     04 48 BF FD | 	call	#_pop
1605c     A7 FA 61 FC | 	wrlong	result1, fp
16060     04 4E 05 F1 | 	add	fp, #4
16064     A7 FC 61 FC | 	wrlong	result2, fp
16068     04 4E 05 F1 | 	add	fp, #4
1606c     A7 FE 61 FC | 	wrlong	result3, fp
16070                 | ' 
16070                 | ' t4=pop()
16070                 | ' t3=pop()
16070                 | ' t2=pop()
16070                 | ' t1=pop()
16070                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
16070     FF 1A 02 F6 | 	mov	arg05, result3
16074     08 4E 85 F1 | 	sub	fp, #8
16078     1C 1A 0E F2 | 	cmp	arg05, #28 wz
1607c     08 4E 05 51 |  if_ne	add	fp, #8
16080     A7 1E 02 5B |  if_ne	rdlong	local01, fp
16084     08 4E 85 51 |  if_ne	sub	fp, #8
16088     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
1608c     A8 00 90 5D |  if_ne	jmp	#LR__1800
16090     14 4E 05 F1 | 	add	fp, #20
16094     A7 1E 02 FB | 	rdlong	local01, fp
16098     14 4E 85 F1 | 	sub	fp, #20
1609c     1C 1E 0E F2 | 	cmp	local01, #28 wz
160a0     14 4E 05 51 |  if_ne	add	fp, #20
160a4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
160a8     14 4E 85 51 |  if_ne	sub	fp, #20
160ac     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
160b0     84 00 90 5D |  if_ne	jmp	#LR__1800
160b4     20 4E 05 F1 | 	add	fp, #32
160b8     A7 1E 02 FB | 	rdlong	local01, fp
160bc     20 4E 85 F1 | 	sub	fp, #32
160c0     1C 1E 0E F2 | 	cmp	local01, #28 wz
160c4     20 4E 05 51 |  if_ne	add	fp, #32
160c8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
160cc     20 4E 85 51 |  if_ne	sub	fp, #32
160d0     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
160d4     60 00 90 5D |  if_ne	jmp	#LR__1800
160d8     2C 4E 05 F1 | 	add	fp, #44
160dc     A7 1E 02 FB | 	rdlong	local01, fp
160e0     2C 4E 85 F1 | 	sub	fp, #44
160e4     1C 1E 0E F2 | 	cmp	local01, #28 wz
160e8     2C 4E 05 51 |  if_ne	add	fp, #44
160ec     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
160f0     2C 4E 85 51 |  if_ne	sub	fp, #44
160f4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
160f8     3C 00 90 5D |  if_ne	jmp	#LR__1800
160fc     A7 12 02 FB | 	rdlong	arg01, fp
16100     0C 4E 05 F1 | 	add	fp, #12
16104     A7 14 02 FB | 	rdlong	arg02, fp
16108     0C 4E 05 F1 | 	add	fp, #12
1610c     A7 16 02 FB | 	rdlong	arg03, fp
16110     0C 4E 05 F1 | 	add	fp, #12
16114     A7 18 02 FB | 	rdlong	arg04, fp
16118     24 4E 85 F1 | 	sub	fp, #36
1611c     57 00 00 FF 
16120     28 E4 05 F1 | 	add	objptr, ##44584
16124     F2 1A 02 FB | 	rdlong	arg05, objptr
16128     57 00 00 FF 
1612c     28 E4 85 F1 | 	sub	objptr, ##44584
16130     EC 70 B0 FD | 	call	#_hg010b_spin2_box
16134                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
16134     6C 00 90 FD | 	jmp	#LR__1801
16138                 | LR__1800
16138     A7 12 02 F6 | 	mov	arg01, fp
1613c     D4 D3 BF FD | 	call	#_converttoint
16140     FD 20 02 F6 | 	mov	local02, result1
16144     0C 4E 05 F1 | 	add	fp, #12
16148     A7 12 02 F6 | 	mov	arg01, fp
1614c     0C 4E 85 F1 | 	sub	fp, #12
16150     C0 D3 BF FD | 	call	#_converttoint
16154     FD 22 02 F6 | 	mov	local03, result1
16158     18 4E 05 F1 | 	add	fp, #24
1615c     A7 12 02 F6 | 	mov	arg01, fp
16160     18 4E 85 F1 | 	sub	fp, #24
16164     AC D3 BF FD | 	call	#_converttoint
16168     FD 1E 02 F6 | 	mov	local01, result1
1616c     24 4E 05 F1 | 	add	fp, #36
16170     A7 12 02 F6 | 	mov	arg01, fp
16174     24 4E 85 F1 | 	sub	fp, #36
16178     98 D3 BF FD | 	call	#_converttoint
1617c     FD 18 02 F6 | 	mov	arg04, result1
16180     57 00 00 FF 
16184     28 E4 05 F1 | 	add	objptr, ##44584
16188     F2 1A 02 FB | 	rdlong	arg05, objptr
1618c     57 00 00 FF 
16190     28 E4 85 F1 | 	sub	objptr, ##44584
16194     10 13 02 F6 | 	mov	arg01, local02
16198     11 15 02 F6 | 	mov	arg02, local03
1619c     0F 17 02 F6 | 	mov	arg03, local01
161a0     7C 70 B0 FD | 	call	#_hg010b_spin2_box
161a4                 | LR__1801
161a4     A7 F0 03 F6 | 	mov	ptra, fp
161a8     B2 00 A0 FD | 	call	#popregs_
161ac                 | _do_box_ret
161ac     2D 00 64 FD | 	ret
161b0                 | 
161b0                 | ' 
161b0                 | ' sub do_fill
161b0                 | _do_fill
161b0     03 4A 05 F6 | 	mov	COUNT_, #3
161b4     A8 00 A0 FD | 	call	#pushregs_
161b8     30 F0 07 F1 | 	add	ptra, #48
161bc     A0 46 BF FD | 	call	#_pop
161c0     FD 18 02 F6 | 	mov	arg04, result1
161c4     FE 16 02 F6 | 	mov	arg03, result2
161c8     FF 14 02 F6 | 	mov	arg02, result3
161cc     24 4E 05 F1 | 	add	fp, #36
161d0     A7 18 62 FC | 	wrlong	arg04, fp
161d4     04 4E 05 F1 | 	add	fp, #4
161d8     A7 16 62 FC | 	wrlong	arg03, fp
161dc     04 4E 05 F1 | 	add	fp, #4
161e0     A7 14 62 FC | 	wrlong	arg02, fp
161e4     2C 4E 85 F1 | 	sub	fp, #44
161e8     74 46 BF FD | 	call	#_pop
161ec     FD 18 02 F6 | 	mov	arg04, result1
161f0     FE 16 02 F6 | 	mov	arg03, result2
161f4     FF 14 02 F6 | 	mov	arg02, result3
161f8     18 4E 05 F1 | 	add	fp, #24
161fc     A7 18 62 FC | 	wrlong	arg04, fp
16200     04 4E 05 F1 | 	add	fp, #4
16204     A7 16 62 FC | 	wrlong	arg03, fp
16208     04 4E 05 F1 | 	add	fp, #4
1620c     A7 14 62 FC | 	wrlong	arg02, fp
16210     20 4E 85 F1 | 	sub	fp, #32
16214     48 46 BF FD | 	call	#_pop
16218     FD 18 02 F6 | 	mov	arg04, result1
1621c     FE 16 02 F6 | 	mov	arg03, result2
16220     FF 1E 02 F6 | 	mov	local01, result3
16224     0C 4E 05 F1 | 	add	fp, #12
16228     A7 18 62 FC | 	wrlong	arg04, fp
1622c     04 4E 05 F1 | 	add	fp, #4
16230     A7 16 62 FC | 	wrlong	arg03, fp
16234     04 4E 05 F1 | 	add	fp, #4
16238     A7 1E 62 FC | 	wrlong	local01, fp
1623c     14 4E 85 F1 | 	sub	fp, #20
16240     1C 46 BF FD | 	call	#_pop
16244     A7 FA 61 FC | 	wrlong	result1, fp
16248     04 4E 05 F1 | 	add	fp, #4
1624c     A7 FC 61 FC | 	wrlong	result2, fp
16250     04 4E 05 F1 | 	add	fp, #4
16254     A7 FE 61 FC | 	wrlong	result3, fp
16258                 | ' 
16258                 | ' t4=pop()
16258                 | ' t3=pop()
16258                 | ' t2=pop()
16258                 | ' t1=pop()
16258                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
16258     FF 18 02 F6 | 	mov	arg04, result3
1625c     08 4E 85 F1 | 	sub	fp, #8
16260     1C 18 0E F2 | 	cmp	arg04, #28 wz
16264     08 4E 05 51 |  if_ne	add	fp, #8
16268     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1626c     08 4E 85 51 |  if_ne	sub	fp, #8
16270     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
16274     94 00 90 5D |  if_ne	jmp	#LR__1810
16278     14 4E 05 F1 | 	add	fp, #20
1627c     A7 1E 02 FB | 	rdlong	local01, fp
16280     14 4E 85 F1 | 	sub	fp, #20
16284     1C 1E 0E F2 | 	cmp	local01, #28 wz
16288     14 4E 05 51 |  if_ne	add	fp, #20
1628c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
16290     14 4E 85 51 |  if_ne	sub	fp, #20
16294     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
16298     70 00 90 5D |  if_ne	jmp	#LR__1810
1629c     20 4E 05 F1 | 	add	fp, #32
162a0     A7 1E 02 FB | 	rdlong	local01, fp
162a4     20 4E 85 F1 | 	sub	fp, #32
162a8     1C 1E 0E F2 | 	cmp	local01, #28 wz
162ac     20 4E 05 51 |  if_ne	add	fp, #32
162b0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
162b4     20 4E 85 51 |  if_ne	sub	fp, #32
162b8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
162bc     4C 00 90 5D |  if_ne	jmp	#LR__1810
162c0     2C 4E 05 F1 | 	add	fp, #44
162c4     A7 1E 02 FB | 	rdlong	local01, fp
162c8     2C 4E 85 F1 | 	sub	fp, #44
162cc     1C 1E 0E F2 | 	cmp	local01, #28 wz
162d0     2C 4E 05 51 |  if_ne	add	fp, #44
162d4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
162d8     2C 4E 85 51 |  if_ne	sub	fp, #44
162dc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
162e0     28 00 90 5D |  if_ne	jmp	#LR__1810
162e4     A7 12 02 FB | 	rdlong	arg01, fp
162e8     0C 4E 05 F1 | 	add	fp, #12
162ec     A7 14 02 FB | 	rdlong	arg02, fp
162f0     0C 4E 05 F1 | 	add	fp, #12
162f4     A7 16 02 FB | 	rdlong	arg03, fp
162f8     0C 4E 05 F1 | 	add	fp, #12
162fc     A7 18 02 FB | 	rdlong	arg04, fp
16300     24 4E 85 F1 | 	sub	fp, #36
16304     AC 69 B0 FD | 	call	#_hg010b_spin2_fill
16308                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
16308     58 00 90 FD | 	jmp	#LR__1811
1630c                 | LR__1810
1630c     A7 12 02 F6 | 	mov	arg01, fp
16310     00 D2 BF FD | 	call	#_converttoint
16314     FD 20 02 F6 | 	mov	local02, result1
16318     0C 4E 05 F1 | 	add	fp, #12
1631c     A7 12 02 F6 | 	mov	arg01, fp
16320     0C 4E 85 F1 | 	sub	fp, #12
16324     EC D1 BF FD | 	call	#_converttoint
16328     FD 22 02 F6 | 	mov	local03, result1
1632c     18 4E 05 F1 | 	add	fp, #24
16330     A7 12 02 F6 | 	mov	arg01, fp
16334     18 4E 85 F1 | 	sub	fp, #24
16338     D8 D1 BF FD | 	call	#_converttoint
1633c     FD 1E 02 F6 | 	mov	local01, result1
16340     24 4E 05 F1 | 	add	fp, #36
16344     A7 12 02 F6 | 	mov	arg01, fp
16348     24 4E 85 F1 | 	sub	fp, #36
1634c     C4 D1 BF FD | 	call	#_converttoint
16350     FD 18 02 F6 | 	mov	arg04, result1
16354     10 13 02 F6 | 	mov	arg01, local02
16358     11 15 02 F6 | 	mov	arg02, local03
1635c     0F 17 02 F6 | 	mov	arg03, local01
16360     50 69 B0 FD | 	call	#_hg010b_spin2_fill
16364                 | LR__1811
16364     A7 F0 03 F6 | 	mov	ptra, fp
16368     B2 00 A0 FD | 	call	#popregs_
1636c                 | _do_fill_ret
1636c     2D 00 64 FD | 	ret
16370                 | 
16370                 | ' 
16370                 | ' ' -------------------------- Draw a frane
16370                 | ' 
16370                 | ' sub do_frame
16370                 | _do_frame
16370     03 4A 05 F6 | 	mov	COUNT_, #3
16374     A8 00 A0 FD | 	call	#pushregs_
16378     30 F0 07 F1 | 	add	ptra, #48
1637c     E0 44 BF FD | 	call	#_pop
16380     FD 1A 02 F6 | 	mov	arg05, result1
16384     FE 18 02 F6 | 	mov	arg04, result2
16388     FF 16 02 F6 | 	mov	arg03, result3
1638c     24 4E 05 F1 | 	add	fp, #36
16390     A7 1A 62 FC | 	wrlong	arg05, fp
16394     04 4E 05 F1 | 	add	fp, #4
16398     A7 18 62 FC | 	wrlong	arg04, fp
1639c     04 4E 05 F1 | 	add	fp, #4
163a0     A7 16 62 FC | 	wrlong	arg03, fp
163a4     2C 4E 85 F1 | 	sub	fp, #44
163a8     B4 44 BF FD | 	call	#_pop
163ac     FD 1A 02 F6 | 	mov	arg05, result1
163b0     FE 18 02 F6 | 	mov	arg04, result2
163b4     FF 16 02 F6 | 	mov	arg03, result3
163b8     18 4E 05 F1 | 	add	fp, #24
163bc     A7 1A 62 FC | 	wrlong	arg05, fp
163c0     04 4E 05 F1 | 	add	fp, #4
163c4     A7 18 62 FC | 	wrlong	arg04, fp
163c8     04 4E 05 F1 | 	add	fp, #4
163cc     A7 16 62 FC | 	wrlong	arg03, fp
163d0     20 4E 85 F1 | 	sub	fp, #32
163d4     88 44 BF FD | 	call	#_pop
163d8     FD 1A 02 F6 | 	mov	arg05, result1
163dc     FE 18 02 F6 | 	mov	arg04, result2
163e0     FF 1E 02 F6 | 	mov	local01, result3
163e4     0C 4E 05 F1 | 	add	fp, #12
163e8     A7 1A 62 FC | 	wrlong	arg05, fp
163ec     04 4E 05 F1 | 	add	fp, #4
163f0     A7 18 62 FC | 	wrlong	arg04, fp
163f4     04 4E 05 F1 | 	add	fp, #4
163f8     A7 1E 62 FC | 	wrlong	local01, fp
163fc     14 4E 85 F1 | 	sub	fp, #20
16400     5C 44 BF FD | 	call	#_pop
16404     A7 FA 61 FC | 	wrlong	result1, fp
16408     04 4E 05 F1 | 	add	fp, #4
1640c     A7 FC 61 FC | 	wrlong	result2, fp
16410     04 4E 05 F1 | 	add	fp, #4
16414     A7 FE 61 FC | 	wrlong	result3, fp
16418                 | ' 
16418                 | ' t4=pop()
16418                 | ' t3=pop()
16418                 | ' t2=pop()
16418                 | ' t1=pop()
16418                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
16418     FF 1A 02 F6 | 	mov	arg05, result3
1641c     08 4E 85 F1 | 	sub	fp, #8
16420     1C 1A 0E F2 | 	cmp	arg05, #28 wz
16424     08 4E 05 51 |  if_ne	add	fp, #8
16428     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1642c     08 4E 85 51 |  if_ne	sub	fp, #8
16430     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
16434     A8 00 90 5D |  if_ne	jmp	#LR__1820
16438     14 4E 05 F1 | 	add	fp, #20
1643c     A7 1E 02 FB | 	rdlong	local01, fp
16440     14 4E 85 F1 | 	sub	fp, #20
16444     1C 1E 0E F2 | 	cmp	local01, #28 wz
16448     14 4E 05 51 |  if_ne	add	fp, #20
1644c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
16450     14 4E 85 51 |  if_ne	sub	fp, #20
16454     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
16458     84 00 90 5D |  if_ne	jmp	#LR__1820
1645c     20 4E 05 F1 | 	add	fp, #32
16460     A7 1E 02 FB | 	rdlong	local01, fp
16464     20 4E 85 F1 | 	sub	fp, #32
16468     1C 1E 0E F2 | 	cmp	local01, #28 wz
1646c     20 4E 05 51 |  if_ne	add	fp, #32
16470     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
16474     20 4E 85 51 |  if_ne	sub	fp, #32
16478     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
1647c     60 00 90 5D |  if_ne	jmp	#LR__1820
16480     2C 4E 05 F1 | 	add	fp, #44
16484     A7 1E 02 FB | 	rdlong	local01, fp
16488     2C 4E 85 F1 | 	sub	fp, #44
1648c     1C 1E 0E F2 | 	cmp	local01, #28 wz
16490     2C 4E 05 51 |  if_ne	add	fp, #44
16494     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
16498     2C 4E 85 51 |  if_ne	sub	fp, #44
1649c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
164a0     3C 00 90 5D |  if_ne	jmp	#LR__1820
164a4     A7 12 02 FB | 	rdlong	arg01, fp
164a8     0C 4E 05 F1 | 	add	fp, #12
164ac     A7 14 02 FB | 	rdlong	arg02, fp
164b0     0C 4E 05 F1 | 	add	fp, #12
164b4     A7 16 02 FB | 	rdlong	arg03, fp
164b8     0C 4E 05 F1 | 	add	fp, #12
164bc     A7 18 02 FB | 	rdlong	arg04, fp
164c0     24 4E 85 F1 | 	sub	fp, #36
164c4     57 00 00 FF 
164c8     28 E4 05 F1 | 	add	objptr, ##44584
164cc     F2 1A 02 FB | 	rdlong	arg05, objptr
164d0     57 00 00 FF 
164d4     28 E4 85 F1 | 	sub	objptr, ##44584
164d8     C4 6C B0 FD | 	call	#_hg010b_spin2_frame
164dc                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
164dc     6C 00 90 FD | 	jmp	#LR__1821
164e0                 | LR__1820
164e0     A7 12 02 F6 | 	mov	arg01, fp
164e4     2C D0 BF FD | 	call	#_converttoint
164e8     FD 20 02 F6 | 	mov	local02, result1
164ec     0C 4E 05 F1 | 	add	fp, #12
164f0     A7 12 02 F6 | 	mov	arg01, fp
164f4     0C 4E 85 F1 | 	sub	fp, #12
164f8     18 D0 BF FD | 	call	#_converttoint
164fc     FD 22 02 F6 | 	mov	local03, result1
16500     18 4E 05 F1 | 	add	fp, #24
16504     A7 12 02 F6 | 	mov	arg01, fp
16508     18 4E 85 F1 | 	sub	fp, #24
1650c     04 D0 BF FD | 	call	#_converttoint
16510     FD 1E 02 F6 | 	mov	local01, result1
16514     24 4E 05 F1 | 	add	fp, #36
16518     A7 12 02 F6 | 	mov	arg01, fp
1651c     24 4E 85 F1 | 	sub	fp, #36
16520     F0 CF BF FD | 	call	#_converttoint
16524     FD 18 02 F6 | 	mov	arg04, result1
16528     57 00 00 FF 
1652c     28 E4 05 F1 | 	add	objptr, ##44584
16530     F2 1A 02 FB | 	rdlong	arg05, objptr
16534     57 00 00 FF 
16538     28 E4 85 F1 | 	sub	objptr, ##44584
1653c     10 13 02 F6 | 	mov	arg01, local02
16540     11 15 02 F6 | 	mov	arg02, local03
16544     0F 17 02 F6 | 	mov	arg03, local01
16548     54 6C B0 FD | 	call	#_hg010b_spin2_frame
1654c                 | LR__1821
1654c     A7 F0 03 F6 | 	mov	ptra, fp
16550     B2 00 A0 FD | 	call	#popregs_
16554                 | _do_frame_ret
16554     2D 00 64 FD | 	ret
16558                 | 
16558                 | ' 
16558                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
16558                 | ' 
16558                 | ' ' ------------------------- Print to the screem
16558                 | ' 
16558                 | ' sub do_print  
16558                 | _do_print
16558     0A 4A 05 F6 | 	mov	COUNT_, #10
1655c     A8 00 A0 FD | 	call	#pushregs_
16560     00 24 06 F6 | 	mov	local04, #0
16564     F8 42 BF FD | 	call	#_pop
16568     FD 26 02 F6 | 	mov	local05, result1
1656c     FE 28 02 F6 | 	mov	local06, result2
16570     FF 2A 02 F6 | 	mov	local07, result3
16574     13 1F 02 F6 | 	mov	local01, local05
16578     14 21 02 F6 | 	mov	local02, local06
1657c     15 23 02 F6 | 	mov	local03, local07
16580                 | '  
16580                 | ' r=0
16580                 | ' t1=pop() 
16580                 | ' 'print t1.result_type,t1.result.uresult
16580                 | ' 
16580                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
16580     21 22 0E F2 | 	cmp	local03, #33 wz
16584     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
16588     20 00 90 5D |  if_ne	jmp	#LR__1830
1658c     11 25 02 F6 | 	mov	local04, local03
16590     CC 42 BF FD | 	call	#_pop
16594     FD 26 02 F6 | 	mov	local05, result1
16598     FE 28 02 F6 | 	mov	local06, result2
1659c     FF 2A 02 F6 | 	mov	local07, result3
165a0     13 1F 02 F6 | 	mov	local01, local05
165a4     14 21 02 F6 | 	mov	local02, local06
165a8     15 23 02 F6 | 	mov	local03, local07
165ac                 | LR__1830
165ac                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
165ac     20 22 0E F2 | 	cmp	local03, #32 wz
165b0     11 25 02 A6 |  if_e	mov	local04, local03
165b4                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
165b4     FF 22 0E F2 | 	cmp	local03, #255 wz
165b8     0C 00 90 5D |  if_ne	jmp	#LR__1831
165bc     0F 13 02 F6 | 	mov	arg01, local01
165c0     34 41 B0 FD | 	call	#_printerror
165c4     4C 04 90 FD | 	jmp	#LR__1849
165c8                 | LR__1831
165c8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
165c8     2B 22 0E F2 | 	cmp	local03, #43 wz
165cc     14 00 90 5D |  if_ne	jmp	#LR__1832
165d0     0F 13 02 F6 | 	mov	arg01, local01
165d4     18 87 BF FD | 	call	#_convertstring
165d8     FD 26 02 F6 | 	mov	local05, result1
165dc     13 1F 02 F6 | 	mov	local01, local05
165e0     1F 22 06 F6 | 	mov	local03, #31
165e4                 | LR__1832
165e4                 | ' 
165e4                 | ' if r=print_mod_comma  then
165e4     21 24 0E F2 | 	cmp	local04, #33 wz
165e8     AC 01 90 5D |  if_ne	jmp	#LR__1837
165ec                 | '   if t1.result_type=result_int then print t1.result.iresult,
165ec     1C 22 0E F2 | 	cmp	local03, #28 wz
165f0     64 00 90 5D |  if_ne	jmp	#LR__1833
165f4     00 12 06 F6 | 	mov	arg01, #0
165f8     10 DF B0 FD | 	call	#__system___getiolock_0484
165fc     FD 12 02 F6 | 	mov	arg01, result1
16600     70 85 B0 FD | 	call	#__system___lockmem
16604     00 28 06 F6 | 	mov	local06, #0
16608     00 12 06 F6 | 	mov	arg01, #0
1660c     0F 15 02 F6 | 	mov	arg02, local01
16610     00 16 06 F6 | 	mov	arg03, #0
16614     0A 18 06 F6 | 	mov	arg04, #10
16618     A4 92 B0 FD | 	call	#__system___basic_print_integer
1661c     FD 2A 02 F6 | 	mov	local07, result1
16620     14 27 02 F6 | 	mov	local05, local06
16624     15 27 02 F1 | 	add	local05, local07
16628     00 2C 06 F6 | 	mov	local08, #0
1662c     00 12 06 F6 | 	mov	arg01, #0
16630     09 14 06 F6 | 	mov	arg02, #9
16634     00 16 06 F6 | 	mov	arg03, #0
16638     E8 91 B0 FD | 	call	#__system___basic_print_char
1663c     FD 2E 02 F6 | 	mov	local09, result1
16640     FD 26 02 F1 | 	add	local05, result1
16644     00 12 06 F6 | 	mov	arg01, #0
16648     C0 DE B0 FD | 	call	#__system___getiolock_0484
1664c     FD 00 68 FC | 	wrlong	#0, result1
16650     00 FA 05 F6 | 	mov	result1, #0
16654     00 30 06 F6 | 	mov	local10, #0
16658                 | LR__1833
16658                 | '   if t1.result_type=result_uint then print t1.result.uresult,
16658     1D 22 0E F2 | 	cmp	local03, #29 wz
1665c     64 00 90 5D |  if_ne	jmp	#LR__1834
16660     00 12 06 F6 | 	mov	arg01, #0
16664     A4 DE B0 FD | 	call	#__system___getiolock_0484
16668     FD 12 02 F6 | 	mov	arg01, result1
1666c     04 85 B0 FD | 	call	#__system___lockmem
16670     00 28 06 F6 | 	mov	local06, #0
16674     00 12 06 F6 | 	mov	arg01, #0
16678     0F 15 02 F6 | 	mov	arg02, local01
1667c     00 16 06 F6 | 	mov	arg03, #0
16680     0A 18 06 F6 | 	mov	arg04, #10
16684     78 92 B0 FD | 	call	#__system___basic_print_unsigned
16688     FD 2A 02 F6 | 	mov	local07, result1
1668c     14 27 02 F6 | 	mov	local05, local06
16690     15 27 02 F1 | 	add	local05, local07
16694     00 2C 06 F6 | 	mov	local08, #0
16698     00 12 06 F6 | 	mov	arg01, #0
1669c     09 14 06 F6 | 	mov	arg02, #9
166a0     00 16 06 F6 | 	mov	arg03, #0
166a4     7C 91 B0 FD | 	call	#__system___basic_print_char
166a8     FD 2E 02 F6 | 	mov	local09, result1
166ac     FD 26 02 F1 | 	add	local05, result1
166b0     00 12 06 F6 | 	mov	arg01, #0
166b4     54 DE B0 FD | 	call	#__system___getiolock_0484
166b8     FD 00 68 FC | 	wrlong	#0, result1
166bc     00 FA 05 F6 | 	mov	result1, #0
166c0     00 30 06 F6 | 	mov	local10, #0
166c4                 | LR__1834
166c4                 | '   if t1.result_type=result_float then print t1.result.fresult,
166c4     1E 22 0E F2 | 	cmp	local03, #30 wz
166c8     64 00 90 5D |  if_ne	jmp	#LR__1835
166cc     00 12 06 F6 | 	mov	arg01, #0
166d0     38 DE B0 FD | 	call	#__system___getiolock_0484
166d4     FD 12 02 F6 | 	mov	arg01, result1
166d8     98 84 B0 FD | 	call	#__system___lockmem
166dc     00 28 06 F6 | 	mov	local06, #0
166e0     00 12 06 F6 | 	mov	arg01, #0
166e4     0F 15 02 F6 | 	mov	arg02, local01
166e8     00 16 06 F6 | 	mov	arg03, #0
166ec     23 18 06 F6 | 	mov	arg04, #35
166f0     18 B6 B0 FD | 	call	#__system___basic_print_float
166f4     FD 2A 02 F6 | 	mov	local07, result1
166f8     14 27 02 F6 | 	mov	local05, local06
166fc     15 27 02 F1 | 	add	local05, local07
16700     00 2C 06 F6 | 	mov	local08, #0
16704     00 12 06 F6 | 	mov	arg01, #0
16708     09 14 06 F6 | 	mov	arg02, #9
1670c     00 16 06 F6 | 	mov	arg03, #0
16710     10 91 B0 FD | 	call	#__system___basic_print_char
16714     FD 2E 02 F6 | 	mov	local09, result1
16718     FD 26 02 F1 | 	add	local05, result1
1671c     00 12 06 F6 | 	mov	arg01, #0
16720     E8 DD B0 FD | 	call	#__system___getiolock_0484
16724     FD 00 68 FC | 	wrlong	#0, result1
16728     00 FA 05 F6 | 	mov	result1, #0
1672c     00 30 06 F6 | 	mov	local10, #0
16730                 | LR__1835
16730                 | '   if t1.result_type=result_string then print t1.result.sresult,
16730     1F 22 0E F2 | 	cmp	local03, #31 wz
16734     60 00 90 5D |  if_ne	jmp	#LR__1836
16738     00 12 06 F6 | 	mov	arg01, #0
1673c     CC DD B0 FD | 	call	#__system___getiolock_0484
16740     FD 12 02 F6 | 	mov	arg01, result1
16744     2C 84 B0 FD | 	call	#__system___lockmem
16748     00 28 06 F6 | 	mov	local06, #0
1674c     00 12 06 F6 | 	mov	arg01, #0
16750     0F 15 02 F6 | 	mov	arg02, local01
16754     00 16 06 F6 | 	mov	arg03, #0
16758     20 91 B0 FD | 	call	#__system___basic_print_string
1675c     FD 2A 02 F6 | 	mov	local07, result1
16760     14 27 02 F6 | 	mov	local05, local06
16764     15 27 02 F1 | 	add	local05, local07
16768     00 2C 06 F6 | 	mov	local08, #0
1676c     00 12 06 F6 | 	mov	arg01, #0
16770     09 14 06 F6 | 	mov	arg02, #9
16774     00 16 06 F6 | 	mov	arg03, #0
16778     A8 90 B0 FD | 	call	#__system___basic_print_char
1677c     FD 2E 02 F6 | 	mov	local09, result1
16780     FD 26 02 F1 | 	add	local05, result1
16784     00 12 06 F6 | 	mov	arg01, #0
16788     80 DD B0 FD | 	call	#__system___getiolock_0484
1678c     FD 00 68 FC | 	wrlong	#0, result1
16790     00 FA 05 F6 | 	mov	result1, #0
16794     00 30 06 F6 | 	mov	local10, #0
16798                 | LR__1836
16798                 | LR__1837
16798                 | ' if r=print_mod_semicolon then 
16798     22 24 0E F2 | 	cmp	local04, #34 wz
1679c     1C 01 90 5D |  if_ne	jmp	#LR__1842
167a0                 | '   if t1.result_type=result_int then print t1.result.iresult;
167a0     1C 22 0E F2 | 	cmp	local03, #28 wz
167a4     50 00 90 5D |  if_ne	jmp	#LR__1838
167a8     00 12 06 F6 | 	mov	arg01, #0
167ac     5C DD B0 FD | 	call	#__system___getiolock_0484
167b0     FD 12 02 F6 | 	mov	arg01, result1
167b4     BC 83 B0 FD | 	call	#__system___lockmem
167b8     00 28 06 F6 | 	mov	local06, #0
167bc     00 30 06 F6 | 	mov	local10, #0
167c0     0A 2C 06 F6 | 	mov	local08, #10
167c4     00 12 06 F6 | 	mov	arg01, #0
167c8     0F 15 02 F6 | 	mov	arg02, local01
167cc     00 16 06 F6 | 	mov	arg03, #0
167d0     0A 18 06 F6 | 	mov	arg04, #10
167d4     E8 90 B0 FD | 	call	#__system___basic_print_integer
167d8     FD 2A 02 F6 | 	mov	local07, result1
167dc     14 27 02 F6 | 	mov	local05, local06
167e0     15 27 02 F1 | 	add	local05, local07
167e4     00 12 06 F6 | 	mov	arg01, #0
167e8     20 DD B0 FD | 	call	#__system___getiolock_0484
167ec     FD 00 68 FC | 	wrlong	#0, result1
167f0     00 FA 05 F6 | 	mov	result1, #0
167f4     00 2E 06 F6 | 	mov	local09, #0
167f8                 | LR__1838
167f8                 | '   if t1.result_type=result_uint then print t1.result.uresult;
167f8     1D 22 0E F2 | 	cmp	local03, #29 wz
167fc     50 00 90 5D |  if_ne	jmp	#LR__1839
16800     00 12 06 F6 | 	mov	arg01, #0
16804     04 DD B0 FD | 	call	#__system___getiolock_0484
16808     FD 12 02 F6 | 	mov	arg01, result1
1680c     64 83 B0 FD | 	call	#__system___lockmem
16810     00 28 06 F6 | 	mov	local06, #0
16814     00 30 06 F6 | 	mov	local10, #0
16818     0A 2C 06 F6 | 	mov	local08, #10
1681c     00 12 06 F6 | 	mov	arg01, #0
16820     0F 15 02 F6 | 	mov	arg02, local01
16824     00 16 06 F6 | 	mov	arg03, #0
16828     0A 18 06 F6 | 	mov	arg04, #10
1682c     D0 90 B0 FD | 	call	#__system___basic_print_unsigned
16830     FD 2A 02 F6 | 	mov	local07, result1
16834     14 27 02 F6 | 	mov	local05, local06
16838     15 27 02 F1 | 	add	local05, local07
1683c     00 12 06 F6 | 	mov	arg01, #0
16840     C8 DC B0 FD | 	call	#__system___getiolock_0484
16844     FD 00 68 FC | 	wrlong	#0, result1
16848     00 FA 05 F6 | 	mov	result1, #0
1684c     00 2E 06 F6 | 	mov	local09, #0
16850                 | LR__1839
16850                 | '   if t1.result_type=result_float then print t1.result.fresult;
16850     1E 22 0E F2 | 	cmp	local03, #30 wz
16854     30 00 90 5D |  if_ne	jmp	#LR__1840
16858     00 12 06 F6 | 	mov	arg01, #0
1685c     AC DC B0 FD | 	call	#__system___getiolock_0484
16860     FD 12 02 F6 | 	mov	arg01, result1
16864     0C 83 B0 FD | 	call	#__system___lockmem
16868     00 12 06 F6 | 	mov	arg01, #0
1686c     0F 15 02 F6 | 	mov	arg02, local01
16870     00 16 06 F6 | 	mov	arg03, #0
16874     23 18 06 F6 | 	mov	arg04, #35
16878     90 B4 B0 FD | 	call	#__system___basic_print_float
1687c     00 12 06 F6 | 	mov	arg01, #0
16880     88 DC B0 FD | 	call	#__system___getiolock_0484
16884     FD 00 68 FC | 	wrlong	#0, result1
16888                 | LR__1840
16888                 | '   if t1.result_type=result_string then print t1.result.sresult;
16888     1F 22 0E F2 | 	cmp	local03, #31 wz
1688c     2C 00 90 5D |  if_ne	jmp	#LR__1841
16890     00 12 06 F6 | 	mov	arg01, #0
16894     74 DC B0 FD | 	call	#__system___getiolock_0484
16898     FD 12 02 F6 | 	mov	arg01, result1
1689c     D4 82 B0 FD | 	call	#__system___lockmem
168a0     00 12 06 F6 | 	mov	arg01, #0
168a4     0F 15 02 F6 | 	mov	arg02, local01
168a8     00 16 06 F6 | 	mov	arg03, #0
168ac     CC 8F B0 FD | 	call	#__system___basic_print_string
168b0     00 12 06 F6 | 	mov	arg01, #0
168b4     54 DC B0 FD | 	call	#__system___getiolock_0484
168b8     FD 00 68 FC | 	wrlong	#0, result1
168bc                 | LR__1841
168bc                 | LR__1842
168bc                 | ' if r=0 then 
168bc     00 24 0E F2 | 	cmp	local04, #0 wz
168c0     1C 01 90 5D |  if_ne	jmp	#LR__1847
168c4                 | '   if t1.result_type=result_int then print t1.result.iresult
168c4     1C 22 0E F2 | 	cmp	local03, #28 wz
168c8     40 00 90 5D |  if_ne	jmp	#LR__1843
168cc     00 12 06 F6 | 	mov	arg01, #0
168d0     38 DC B0 FD | 	call	#__system___getiolock_0484
168d4     FD 12 02 F6 | 	mov	arg01, result1
168d8     98 82 B0 FD | 	call	#__system___lockmem
168dc     00 12 06 F6 | 	mov	arg01, #0
168e0     0F 15 02 F6 | 	mov	arg02, local01
168e4     00 16 06 F6 | 	mov	arg03, #0
168e8     0A 18 06 F6 | 	mov	arg04, #10
168ec     D0 8F B0 FD | 	call	#__system___basic_print_integer
168f0     00 12 06 F6 | 	mov	arg01, #0
168f4     0A 14 06 F6 | 	mov	arg02, #10
168f8     00 16 06 F6 | 	mov	arg03, #0
168fc     24 8F B0 FD | 	call	#__system___basic_print_char
16900     00 12 06 F6 | 	mov	arg01, #0
16904     04 DC B0 FD | 	call	#__system___getiolock_0484
16908     FD 00 68 FC | 	wrlong	#0, result1
1690c                 | LR__1843
1690c                 | '   if t1.result_type=result_uint then print t1.result.uresult
1690c     1D 22 0E F2 | 	cmp	local03, #29 wz
16910     40 00 90 5D |  if_ne	jmp	#LR__1844
16914     00 12 06 F6 | 	mov	arg01, #0
16918     F0 DB B0 FD | 	call	#__system___getiolock_0484
1691c     FD 12 02 F6 | 	mov	arg01, result1
16920     50 82 B0 FD | 	call	#__system___lockmem
16924     00 12 06 F6 | 	mov	arg01, #0
16928     0F 15 02 F6 | 	mov	arg02, local01
1692c     00 16 06 F6 | 	mov	arg03, #0
16930     0A 18 06 F6 | 	mov	arg04, #10
16934     C8 8F B0 FD | 	call	#__system___basic_print_unsigned
16938     00 12 06 F6 | 	mov	arg01, #0
1693c     0A 14 06 F6 | 	mov	arg02, #10
16940     00 16 06 F6 | 	mov	arg03, #0
16944     DC 8E B0 FD | 	call	#__system___basic_print_char
16948     00 12 06 F6 | 	mov	arg01, #0
1694c     BC DB B0 FD | 	call	#__system___getiolock_0484
16950     FD 00 68 FC | 	wrlong	#0, result1
16954                 | LR__1844
16954                 | '   if t1.result_type=result_float then print t1.result.fresult
16954     1E 22 0E F2 | 	cmp	local03, #30 wz
16958     40 00 90 5D |  if_ne	jmp	#LR__1845
1695c     00 12 06 F6 | 	mov	arg01, #0
16960     A8 DB B0 FD | 	call	#__system___getiolock_0484
16964     FD 12 02 F6 | 	mov	arg01, result1
16968     08 82 B0 FD | 	call	#__system___lockmem
1696c     00 12 06 F6 | 	mov	arg01, #0
16970     0F 15 02 F6 | 	mov	arg02, local01
16974     00 16 06 F6 | 	mov	arg03, #0
16978     23 18 06 F6 | 	mov	arg04, #35
1697c     8C B3 B0 FD | 	call	#__system___basic_print_float
16980     00 12 06 F6 | 	mov	arg01, #0
16984     0A 14 06 F6 | 	mov	arg02, #10
16988     00 16 06 F6 | 	mov	arg03, #0
1698c     94 8E B0 FD | 	call	#__system___basic_print_char
16990     00 12 06 F6 | 	mov	arg01, #0
16994     74 DB B0 FD | 	call	#__system___getiolock_0484
16998     FD 00 68 FC | 	wrlong	#0, result1
1699c                 | LR__1845
1699c                 | '   if t1.result_type=result_string then print t1.result.sresult
1699c     1F 22 0E F2 | 	cmp	local03, #31 wz
169a0     3C 00 90 5D |  if_ne	jmp	#LR__1846
169a4     00 12 06 F6 | 	mov	arg01, #0
169a8     60 DB B0 FD | 	call	#__system___getiolock_0484
169ac     FD 12 02 F6 | 	mov	arg01, result1
169b0     C0 81 B0 FD | 	call	#__system___lockmem
169b4     00 12 06 F6 | 	mov	arg01, #0
169b8     0F 15 02 F6 | 	mov	arg02, local01
169bc     00 16 06 F6 | 	mov	arg03, #0
169c0     B8 8E B0 FD | 	call	#__system___basic_print_string
169c4     00 12 06 F6 | 	mov	arg01, #0
169c8     0A 14 06 F6 | 	mov	arg02, #10
169cc     00 16 06 F6 | 	mov	arg03, #0
169d0     50 8E B0 FD | 	call	#__system___basic_print_char
169d4     00 12 06 F6 | 	mov	arg01, #0
169d8     30 DB B0 FD | 	call	#__system___getiolock_0484
169dc     FD 00 68 FC | 	wrlong	#0, result1
169e0                 | LR__1846
169e0                 | LR__1847
169e0                 | ' if r=print_mod_empty then print
169e0     20 24 0E F2 | 	cmp	local04, #32 wz
169e4     2C 00 90 5D |  if_ne	jmp	#LR__1848
169e8     00 12 06 F6 | 	mov	arg01, #0
169ec     1C DB B0 FD | 	call	#__system___getiolock_0484
169f0     FD 12 02 F6 | 	mov	arg01, result1
169f4     7C 81 B0 FD | 	call	#__system___lockmem
169f8     00 12 06 F6 | 	mov	arg01, #0
169fc     0A 14 06 F6 | 	mov	arg02, #10
16a00     00 16 06 F6 | 	mov	arg03, #0
16a04     1C 8E B0 FD | 	call	#__system___basic_print_char
16a08     00 12 06 F6 | 	mov	arg01, #0
16a0c     FC DA B0 FD | 	call	#__system___getiolock_0484
16a10     FD 00 68 FC | 	wrlong	#0, result1
16a14                 | LR__1848
16a14                 | LR__1849
16a14     A7 F0 03 F6 | 	mov	ptra, fp
16a18     B2 00 A0 FD | 	call	#popregs_
16a1c                 | _do_print_ret
16a1c     2D 00 64 FD | 	ret
16a20                 | 
16a20                 | ' 
16a20                 | ' 
16a20                 | ' sub do_paper
16a20                 | _do_paper
16a20     03 4A 05 F6 | 	mov	COUNT_, #3
16a24     A8 00 A0 FD | 	call	#pushregs_
16a28     34 3E BF FD | 	call	#_pop
16a2c     FD 1E 02 F6 | 	mov	local01, result1
16a30     FE 20 02 F6 | 	mov	local02, result2
16a34     FF 22 02 F6 | 	mov	local03, result3
16a38                 | ' t1=pop() 
16a38                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16a38     1E 22 0E F2 | 	cmp	local03, #30 wz
16a3c     10 00 90 5D |  if_ne	jmp	#LR__1850
16a40     0F 13 02 F6 | 	mov	arg01, local01
16a44     00 14 06 F6 | 	mov	arg02, #0
16a48     70 B1 B0 FD | 	call	#__system___float_tointeger
16a4c     FD 1E 02 F6 | 	mov	local01, result1
16a50                 | LR__1850
16a50                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16a50     1F 22 0E F2 | 	cmp	local03, #31 wz
16a54     18 00 90 5D |  if_ne	jmp	#LR__1851
16a58     0F 13 02 F6 | 	mov	arg01, local01
16a5c     7C B4 B0 FD | 	call	#__system____builtin_atof
16a60     FD 12 02 F6 | 	mov	arg01, result1
16a64     00 14 06 F6 | 	mov	arg02, #0
16a68     50 B1 B0 FD | 	call	#__system___float_tointeger
16a6c     FD 1E 02 F6 | 	mov	local01, result1
16a70                 | LR__1851
16a70     57 00 00 FF 
16a74     38 E4 05 F1 | 	add	objptr, ##44600
16a78     F2 1E 62 FC | 	wrlong	local01, objptr
16a7c     04 E4 05 F1 | 	add	objptr, #4
16a80     F2 12 02 FB | 	rdlong	arg01, objptr
16a84                 | ' 
16a84                 | ' write_color:=ff
16a84     56 00 00 FF 
16a88     FB E5 85 F1 | 	sub	objptr, ##44539
16a8c     F2 12 62 FC | 	wrlong	arg01, objptr
16a90                 | ' write_background:=bb
16a90     04 E4 05 F1 | 	add	objptr, #4
16a94     F2 1E 62 FC | 	wrlong	local01, objptr
16a98     45 E4 85 F1 | 	sub	objptr, #69
16a9c     A7 F0 03 F6 | 	mov	ptra, fp
16aa0     B2 00 A0 FD | 	call	#popregs_
16aa4                 | _do_paper_ret
16aa4     2D 00 64 FD | 	ret
16aa8                 | 
16aa8                 | ' 
16aa8                 | ' sub do_ink
16aa8                 | _do_ink
16aa8     03 4A 05 F6 | 	mov	COUNT_, #3
16aac     A8 00 A0 FD | 	call	#pushregs_
16ab0     AC 3D BF FD | 	call	#_pop
16ab4     FD 1E 02 F6 | 	mov	local01, result1
16ab8     FE 20 02 F6 | 	mov	local02, result2
16abc     FF 22 02 F6 | 	mov	local03, result3
16ac0                 | ' t1=pop() 
16ac0                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16ac0     1E 22 0E F2 | 	cmp	local03, #30 wz
16ac4     10 00 90 5D |  if_ne	jmp	#LR__1860
16ac8     0F 13 02 F6 | 	mov	arg01, local01
16acc     00 14 06 F6 | 	mov	arg02, #0
16ad0     E8 B0 B0 FD | 	call	#__system___float_tointeger
16ad4     FD 1E 02 F6 | 	mov	local01, result1
16ad8                 | LR__1860
16ad8                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16ad8     1F 22 0E F2 | 	cmp	local03, #31 wz
16adc     18 00 90 5D |  if_ne	jmp	#LR__1861
16ae0     0F 13 02 F6 | 	mov	arg01, local01
16ae4     F4 B3 B0 FD | 	call	#__system____builtin_atof
16ae8     FD 12 02 F6 | 	mov	arg01, result1
16aec     00 14 06 F6 | 	mov	arg02, #0
16af0     C8 B0 B0 FD | 	call	#__system___float_tointeger
16af4     FD 1E 02 F6 | 	mov	local01, result1
16af8                 | LR__1861
16af8     57 00 00 FF 
16afc     3C E4 05 F1 | 	add	objptr, ##44604
16b00     F2 1E 62 FC | 	wrlong	local01, objptr
16b04     04 E4 85 F1 | 	sub	objptr, #4
16b08     F2 14 02 FB | 	rdlong	arg02, objptr
16b0c                 | ' 
16b0c                 | ' write_color:=ff
16b0c     56 00 00 FF 
16b10     F7 E5 85 F1 | 	sub	objptr, ##44535
16b14     F2 1E 62 FC | 	wrlong	local01, objptr
16b18                 | ' write_background:=bb
16b18     04 E4 05 F1 | 	add	objptr, #4
16b1c     F2 14 62 FC | 	wrlong	arg02, objptr
16b20     56 00 00 FF 
16b24     F7 E5 05 F1 | 	add	objptr, ##44535
16b28     F2 12 02 FB | 	rdlong	arg01, objptr
16b2c     57 00 00 FF 
16b30     3C E4 85 F1 | 	sub	objptr, ##44604
16b34     1C 58 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
16b38     A7 F0 03 F6 | 	mov	ptra, fp
16b3c     B2 00 A0 FD | 	call	#popregs_
16b40                 | _do_ink_ret
16b40     2D 00 64 FD | 	ret
16b44                 | 
16b44                 | ' 
16b44                 | ' 
16b44                 | ' sub do_font
16b44                 | _do_font
16b44     03 4A 05 F6 | 	mov	COUNT_, #3
16b48     A8 00 A0 FD | 	call	#pushregs_
16b4c     10 3D BF FD | 	call	#_pop
16b50     FD 1E 02 F6 | 	mov	local01, result1
16b54     FE 20 02 F6 | 	mov	local02, result2
16b58     FF 22 02 F6 | 	mov	local03, result3
16b5c                 | ' t1=pop() 
16b5c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16b5c     1E 22 0E F2 | 	cmp	local03, #30 wz
16b60     10 00 90 5D |  if_ne	jmp	#LR__1870
16b64     0F 13 02 F6 | 	mov	arg01, local01
16b68     00 14 06 F6 | 	mov	arg02, #0
16b6c     4C B0 B0 FD | 	call	#__system___float_tointeger
16b70     FD 1E 02 F6 | 	mov	local01, result1
16b74                 | LR__1870
16b74                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16b74     1F 22 0E F2 | 	cmp	local03, #31 wz
16b78     18 00 90 5D |  if_ne	jmp	#LR__1871
16b7c     0F 13 02 F6 | 	mov	arg01, local01
16b80     58 B3 B0 FD | 	call	#__system____builtin_atof
16b84     FD 12 02 F6 | 	mov	arg01, result1
16b88     00 14 06 F6 | 	mov	arg02, #0
16b8c     2C B0 B0 FD | 	call	#__system___float_tointeger
16b90     FD 1E 02 F6 | 	mov	local01, result1
16b94                 | LR__1871
16b94     57 00 00 FF 
16b98     40 E4 05 F1 | 	add	objptr, ##44608
16b9c     F2 1E 62 FC | 	wrlong	local01, objptr
16ba0     57 00 00 FF 
16ba4     40 E4 85 F1 | 	sub	objptr, ##44608
16ba8     02 1E 66 F0 | 	shl	local01, #2
16bac     0F 13 02 F6 | 	mov	arg01, local01
16bb0     E4 67 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16bb4     A7 F0 03 F6 | 	mov	ptra, fp
16bb8     B2 00 A0 FD | 	call	#popregs_
16bbc                 | _do_font_ret
16bbc     2D 00 64 FD | 	ret
16bc0                 | 
16bc0                 | ' 
16bc0                 | ' sub do_mode
16bc0                 | _do_mode
16bc0     05 4A 05 F6 | 	mov	COUNT_, #5
16bc4     A8 00 A0 FD | 	call	#pushregs_
16bc8     94 3C BF FD | 	call	#_pop
16bcc     FD 1E 02 F6 | 	mov	local01, result1
16bd0     FE 20 02 F6 | 	mov	local02, result2
16bd4     FF 22 02 F6 | 	mov	local03, result3
16bd8                 | ' t1=pop() 
16bd8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16bd8     1E 22 0E F2 | 	cmp	local03, #30 wz
16bdc     10 00 90 5D |  if_ne	jmp	#LR__1880
16be0     0F 13 02 F6 | 	mov	arg01, local01
16be4     00 14 06 F6 | 	mov	arg02, #0
16be8     D0 AF B0 FD | 	call	#__system___float_tointeger
16bec     FD 1E 02 F6 | 	mov	local01, result1
16bf0                 | LR__1880
16bf0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16bf0     1F 22 0E F2 | 	cmp	local03, #31 wz
16bf4     18 00 90 5D |  if_ne	jmp	#LR__1881
16bf8     0F 13 02 F6 | 	mov	arg01, local01
16bfc     DC B2 B0 FD | 	call	#__system____builtin_atof
16c00     FD 12 02 F6 | 	mov	arg01, result1
16c04     00 14 06 F6 | 	mov	arg02, #0
16c08     B0 AF B0 FD | 	call	#__system___float_tointeger
16c0c     FD 1E 02 F6 | 	mov	local01, result1
16c10                 | LR__1881
16c10                 | ' select case t1.result.iresult
16c10     0F 25 02 F6 | 	mov	local04, local01
16c14     05 24 26 F3 | 	fle	local04, #5
16c18     30 24 62 FD | 	jmprel	local04
16c1c                 | LR__1882
16c1c     14 00 90 FD | 	jmp	#LR__1883
16c20     A8 00 90 FD | 	jmp	#LR__1884
16c24     10 01 90 FD | 	jmp	#LR__1885
16c28     78 01 90 FD | 	jmp	#LR__1886
16c2c     E0 01 90 FD | 	jmp	#LR__1887
16c30     70 02 90 FD | 	jmp	#LR__1888
16c34                 | LR__1883
16c34     57 00 00 FF 
16c38     40 E4 05 F1 | 	add	objptr, ##44608
16c3c     F2 02 68 FC | 	wrlong	#1, objptr
16c40     04 E4 85 F1 | 	sub	objptr, #4
16c44     F2 34 69 FC | 	wrlong	#154, objptr
16c48     21 00 00 FF 
16c4c     B4 E4 05 F1 | 	add	objptr, ##17076
16c50     F2 02 68 FC | 	wrlong	#1, objptr
16c54     21 00 00 FF 
16c58     B8 E4 85 F1 | 	sub	objptr, ##17080
16c5c     F2 26 69 FC | 	wrlong	#147, objptr
16c60     57 00 00 FF 
16c64     38 E4 85 F1 | 	sub	objptr, ##44600
16c68     04 12 06 F6 | 	mov	arg01, #4
16c6c     28 67 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16c70     57 00 00 FF 
16c74     3C E4 05 F1 | 	add	objptr, ##44604
16c78     F2 12 02 FB | 	rdlong	arg01, objptr
16c7c     04 E4 85 F1 | 	sub	objptr, #4
16c80     F2 14 02 FB | 	rdlong	arg02, objptr
16c84                 | ' 
16c84                 | ' write_color:=ff
16c84     56 00 00 FF 
16c88     F7 E5 85 F1 | 	sub	objptr, ##44535
16c8c     F2 12 62 FC | 	wrlong	arg01, objptr
16c90                 | ' write_background:=bb
16c90     04 E4 05 F1 | 	add	objptr, #4
16c94     F2 14 62 FC | 	wrlong	arg02, objptr
16c98     01 00 00 FF 
16c9c     00 EA 05 F1 | 	add	ptr__dat__, ##512
16ca0     79 00 00 FF 
16ca4     4F E5 05 F1 | 	add	objptr, ##62287
16ca8     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
16cac     04 E4 85 F1 | 	sub	objptr, #4
16cb0     03 00 80 FF 
16cb4     F2 30 69 FC | 	wrlong	##1688, objptr
16cb8     79 00 00 FF 
16cbc     90 E5 85 F1 | 	sub	objptr, ##62352
16cc0     01 00 00 FF 
16cc4     00 EA 85 F1 | 	sub	ptr__dat__, ##512
16cc8     D8 01 90 FD | 	jmp	#LR__1888
16ccc                 | LR__1884
16ccc     57 00 00 FF 
16cd0     40 E4 05 F1 | 	add	objptr, ##44608
16cd4     F2 00 68 FC | 	wrlong	#0, objptr
16cd8     04 E4 85 F1 | 	sub	objptr, #4
16cdc     F2 2E 68 FC | 	wrlong	#23, objptr
16ce0     21 00 00 FF 
16ce4     B4 E4 05 F1 | 	add	objptr, ##17076
16ce8     F2 00 68 FC | 	wrlong	#0, objptr
16cec     21 00 00 FF 
16cf0     B8 E4 85 F1 | 	sub	objptr, ##17080
16cf4     F2 00 68 FC | 	wrlong	#0, objptr
16cf8     57 00 00 FF 
16cfc     38 E4 85 F1 | 	sub	objptr, ##44600
16d00     00 12 06 F6 | 	mov	arg01, #0
16d04     90 66 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16d08     57 00 00 FF 
16d0c     3C E4 05 F1 | 	add	objptr, ##44604
16d10     F2 12 02 FB | 	rdlong	arg01, objptr
16d14     04 E4 85 F1 | 	sub	objptr, #4
16d18     F2 14 02 FB | 	rdlong	arg02, objptr
16d1c                 | ' 
16d1c                 | ' write_color:=ff
16d1c     56 00 00 FF 
16d20     F7 E5 85 F1 | 	sub	objptr, ##44535
16d24     F2 12 62 FC | 	wrlong	arg01, objptr
16d28                 | ' write_background:=bb
16d28     04 E4 05 F1 | 	add	objptr, #4
16d2c     F2 14 62 FC | 	wrlong	arg02, objptr
16d30     45 E4 85 F1 | 	sub	objptr, #69
16d34     6C 01 90 FD | 	jmp	#LR__1888
16d38                 | LR__1885
16d38     57 00 00 FF 
16d3c     40 E4 05 F1 | 	add	objptr, ##44608
16d40     F2 00 68 FC | 	wrlong	#0, objptr
16d44     04 E4 85 F1 | 	sub	objptr, #4
16d48     F2 6A 69 FC | 	wrlong	#181, objptr
16d4c     21 00 00 FF 
16d50     B4 E4 05 F1 | 	add	objptr, ##17076
16d54     F2 00 68 FC | 	wrlong	#0, objptr
16d58     21 00 00 FF 
16d5c     B8 E4 85 F1 | 	sub	objptr, ##17080
16d60     F2 00 68 FC | 	wrlong	#0, objptr
16d64     57 00 00 FF 
16d68     38 E4 85 F1 | 	sub	objptr, ##44600
16d6c     00 12 06 F6 | 	mov	arg01, #0
16d70     24 66 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16d74     57 00 00 FF 
16d78     3C E4 05 F1 | 	add	objptr, ##44604
16d7c     F2 12 02 FB | 	rdlong	arg01, objptr
16d80     04 E4 85 F1 | 	sub	objptr, #4
16d84     F2 14 02 FB | 	rdlong	arg02, objptr
16d88                 | ' 
16d88                 | ' write_color:=ff
16d88     56 00 00 FF 
16d8c     F7 E5 85 F1 | 	sub	objptr, ##44535
16d90     F2 12 62 FC | 	wrlong	arg01, objptr
16d94                 | ' write_background:=bb
16d94     04 E4 05 F1 | 	add	objptr, #4
16d98     F2 14 62 FC | 	wrlong	arg02, objptr
16d9c     45 E4 85 F1 | 	sub	objptr, #69
16da0     00 01 90 FD | 	jmp	#LR__1888
16da4                 | LR__1886
16da4     57 00 00 FF 
16da8     40 E4 05 F1 | 	add	objptr, ##44608
16dac     F2 00 68 FC | 	wrlong	#0, objptr
16db0     04 E4 85 F1 | 	sub	objptr, #4
16db4     F2 1E 68 FC | 	wrlong	#15, objptr
16db8     21 00 00 FF 
16dbc     B4 E4 05 F1 | 	add	objptr, ##17076
16dc0     F2 00 68 FC | 	wrlong	#0, objptr
16dc4     21 00 00 FF 
16dc8     B8 E4 85 F1 | 	sub	objptr, ##17080
16dcc     F2 00 68 FC | 	wrlong	#0, objptr
16dd0     57 00 00 FF 
16dd4     38 E4 85 F1 | 	sub	objptr, ##44600
16dd8     00 12 06 F6 | 	mov	arg01, #0
16ddc     B8 65 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16de0     57 00 00 FF 
16de4     3C E4 05 F1 | 	add	objptr, ##44604
16de8     F2 12 02 FB | 	rdlong	arg01, objptr
16dec     04 E4 85 F1 | 	sub	objptr, #4
16df0     F2 14 02 FB | 	rdlong	arg02, objptr
16df4                 | ' 
16df4                 | ' write_color:=ff
16df4     56 00 00 FF 
16df8     F7 E5 85 F1 | 	sub	objptr, ##44535
16dfc     F2 12 62 FC | 	wrlong	arg01, objptr
16e00                 | ' write_background:=bb
16e00     04 E4 05 F1 | 	add	objptr, #4
16e04     F2 14 62 FC | 	wrlong	arg02, objptr
16e08     45 E4 85 F1 | 	sub	objptr, #69
16e0c     94 00 90 FD | 	jmp	#LR__1888
16e10                 | LR__1887
16e10     57 00 00 FF 
16e14     40 E4 05 F1 | 	add	objptr, ##44608
16e18     F2 02 68 FC | 	wrlong	#1, objptr
16e1c     04 E4 85 F1 | 	sub	objptr, #4
16e20     F2 02 68 FC | 	wrlong	#1, objptr
16e24     21 00 00 FF 
16e28     B4 E4 05 F1 | 	add	objptr, ##17076
16e2c     F2 02 68 FC | 	wrlong	#1, objptr
16e30     21 00 00 FF 
16e34     B8 E4 85 F1 | 	sub	objptr, ##17080
16e38     F2 1C 68 FC | 	wrlong	#14, objptr
16e3c     57 00 00 FF 
16e40     38 E4 85 F1 | 	sub	objptr, ##44600
16e44     04 12 06 F6 | 	mov	arg01, #4
16e48     4C 65 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16e4c     57 00 00 FF 
16e50     3C E4 05 F1 | 	add	objptr, ##44604
16e54     F2 12 02 FB | 	rdlong	arg01, objptr
16e58     04 E4 85 F1 | 	sub	objptr, #4
16e5c     F2 14 02 FB | 	rdlong	arg02, objptr
16e60                 | ' 
16e60                 | ' write_color:=ff
16e60     56 00 00 FF 
16e64     F7 E5 85 F1 | 	sub	objptr, ##44535
16e68     F2 12 62 FC | 	wrlong	arg01, objptr
16e6c                 | ' write_background:=bb
16e6c     04 E4 05 F1 | 	add	objptr, #4
16e70     F2 14 62 FC | 	wrlong	arg02, objptr
16e74     07 00 00 FF 
16e78     8A EB 05 F1 | 	add	ptr__dat__, ##3978
16e7c     79 00 00 FF 
16e80     4F E5 05 F1 | 	add	objptr, ##62287
16e84     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
16e88     04 E4 85 F1 | 	sub	objptr, #4
16e8c     03 00 80 FF 
16e90     F2 30 69 FC | 	wrlong	##1688, objptr
16e94     79 00 00 FF 
16e98     90 E5 85 F1 | 	sub	objptr, ##62352
16e9c     07 00 00 FF 
16ea0     8A EB 85 F1 | 	sub	ptr__dat__, ##3978
16ea4                 | LR__1888
16ea4     79 00 00 FF 
16ea8     8C E5 05 F1 | 	add	objptr, ##62348
16eac     F2 1E 62 FC | 	wrlong	local01, objptr
16eb0     04 E4 85 F1 | 	sub	objptr, #4
16eb4     F2 12 02 FB | 	rdlong	arg01, objptr
16eb8     16 00 00 FF 
16ebc     2C E5 85 F1 | 	sub	objptr, ##11564
16ec0     F2 26 02 FB | 	rdlong	local05, objptr
16ec4     63 00 00 FF 
16ec8     5C E4 85 F1 | 	sub	objptr, ##50780
16ecc     13 13 82 F1 | 	sub	arg01, local05
16ed0     00 14 06 F6 | 	mov	arg02, #0
16ed4     0A 16 06 F6 | 	mov	arg03, #10
16ed8     34 9F B0 FD | 	call	#__system__Number_S
16edc     FD 12 02 F6 | 	mov	arg01, result1
16ee0     74 01 00 FF 
16ee4     A6 14 06 F6 | 	mov	arg02, ##@LR__5183
16ee8     E4 7C B0 FD | 	call	#__system___string_concat
16eec     78 00 00 FF 
16ef0     EC E4 05 F1 | 	add	objptr, ##61676
16ef4     F2 FA 61 FC | 	wrlong	result1, objptr
16ef8     21 00 00 FF 
16efc     B0 E4 85 F1 | 	sub	objptr, ##17072
16f00     F2 12 02 FB | 	rdlong	arg01, objptr
16f04     04 E4 85 F1 | 	sub	objptr, #4
16f08     F2 14 02 FB | 	rdlong	arg02, objptr
16f0c     57 00 00 FF 
16f10     38 E4 85 F1 | 	sub	objptr, ##44600
16f14     D0 65 B0 FD | 	call	#_hg010b_spin2_cls
16f18     74 01 00 FF 
16f1c     B8 12 06 F6 | 	mov	arg01, ##@LR__5184
16f20                 | ' 
16f20                 | ' write(text)
16f20     84 69 B0 FD | 	call	#_hg010b_spin2_write
16f24                 | ' crlf
16f24     4C 6C B0 FD | 	call	#_hg010b_spin2_crlf
16f28     18 00 00 FF 
16f2c     4C EB 05 F1 | 	add	ptr__dat__, ##12620
16f30     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
16f34     18 00 00 FF 
16f38     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
16f3c                 | ' 
16f3c                 | ' write(text)
16f3c     68 69 B0 FD | 	call	#_hg010b_spin2_write
16f40                 | ' crlf
16f40     30 6C B0 FD | 	call	#_hg010b_spin2_crlf
16f44     78 00 00 FF 
16f48     EC E4 05 F1 | 	add	objptr, ##61676
16f4c     F2 12 02 FB | 	rdlong	arg01, objptr
16f50     78 00 00 FF 
16f54     EC E4 85 F1 | 	sub	objptr, ##61676
16f58                 | ' 
16f58                 | ' write(text)
16f58     4C 69 B0 FD | 	call	#_hg010b_spin2_write
16f5c                 | ' crlf
16f5c     14 6C B0 FD | 	call	#_hg010b_spin2_crlf
16f60     A7 F0 03 F6 | 	mov	ptra, fp
16f64     B2 00 A0 FD | 	call	#popregs_
16f68                 | _do_mode_ret
16f68     2D 00 64 FD | 	ret
16f6c                 | 
16f6c                 | ' 
16f6c                 | ' sub do_setwave
16f6c                 | _do_setwave
16f6c     02 4A 05 F6 | 	mov	COUNT_, #2
16f70     A8 00 A0 FD | 	call	#pushregs_
16f74     18 F0 07 F1 | 	add	ptra, #24
16f78     E4 38 BF FD | 	call	#_pop
16f7c     FD 12 02 F6 | 	mov	arg01, result1
16f80     FE 1E 02 F6 | 	mov	local01, result2
16f84     FF 20 02 F6 | 	mov	local02, result3
16f88     A7 12 62 FC | 	wrlong	arg01, fp
16f8c     04 4E 05 F1 | 	add	fp, #4
16f90     A7 1E 62 FC | 	wrlong	local01, fp
16f94     04 4E 05 F1 | 	add	fp, #4
16f98     A7 20 62 FC | 	wrlong	local02, fp
16f9c     08 4E 85 F1 | 	sub	fp, #8
16fa0     BC 38 BF FD | 	call	#_pop
16fa4     FD 20 02 F6 | 	mov	local02, result1
16fa8     0C 4E 05 F1 | 	add	fp, #12
16fac     A7 20 62 FC | 	wrlong	local02, fp
16fb0     04 4E 05 F1 | 	add	fp, #4
16fb4     A7 FC 61 FC | 	wrlong	result2, fp
16fb8     04 4E 05 F1 | 	add	fp, #4
16fbc     A7 FE 61 FC | 	wrlong	result3, fp
16fc0     08 4E 85 F1 | 	sub	fp, #8
16fc4     A7 12 02 F6 | 	mov	arg01, fp
16fc8     0C 4E 85 F1 | 	sub	fp, #12
16fcc     44 C5 BF FD | 	call	#_converttoint
16fd0     FD 20 02 F6 | 	mov	local02, result1
16fd4     10 1F 02 F6 | 	mov	local01, local02
16fd8     01 1E 66 F0 | 	shl	local01, #1
16fdc     10 1F 02 F1 | 	add	local01, local02
16fe0     03 1E 66 F0 | 	shl	local01, #3
16fe4     34 00 00 FF 
16fe8     38 E5 05 F1 | 	add	objptr, ##26936
16fec     F2 1E 02 F1 | 	add	local01, objptr
16ff0     A7 12 02 F6 | 	mov	arg01, fp
16ff4     34 00 00 FF 
16ff8     38 E5 85 F1 | 	sub	objptr, ##26936
16ffc     14 C5 BF FD | 	call	#_converttoint
17000     04 1E 06 F1 | 	add	local01, #4
17004     0F FB 41 FC | 	wrbyte	result1, local01
17008     A7 F0 03 F6 | 	mov	ptra, fp
1700c     B2 00 A0 FD | 	call	#popregs_
17010                 | _do_setwave_ret
17010     2D 00 64 FD | 	ret
17014                 | 
17014                 | ' 
17014                 | ' sub do_setsustain
17014                 | _do_setsustain
17014     02 4A 05 F6 | 	mov	COUNT_, #2
17018     A8 00 A0 FD | 	call	#pushregs_
1701c     18 F0 07 F1 | 	add	ptra, #24
17020     3C 38 BF FD | 	call	#_pop
17024     FD 12 02 F6 | 	mov	arg01, result1
17028     FE 1E 02 F6 | 	mov	local01, result2
1702c     FF 20 02 F6 | 	mov	local02, result3
17030     A7 12 62 FC | 	wrlong	arg01, fp
17034     04 4E 05 F1 | 	add	fp, #4
17038     A7 1E 62 FC | 	wrlong	local01, fp
1703c     04 4E 05 F1 | 	add	fp, #4
17040     A7 20 62 FC | 	wrlong	local02, fp
17044     08 4E 85 F1 | 	sub	fp, #8
17048     14 38 BF FD | 	call	#_pop
1704c     FD 20 02 F6 | 	mov	local02, result1
17050     0C 4E 05 F1 | 	add	fp, #12
17054     A7 20 62 FC | 	wrlong	local02, fp
17058     04 4E 05 F1 | 	add	fp, #4
1705c     A7 FC 61 FC | 	wrlong	result2, fp
17060     04 4E 05 F1 | 	add	fp, #4
17064     A7 FE 61 FC | 	wrlong	result3, fp
17068     08 4E 85 F1 | 	sub	fp, #8
1706c     A7 12 02 F6 | 	mov	arg01, fp
17070     0C 4E 85 F1 | 	sub	fp, #12
17074     9C C4 BF FD | 	call	#_converttoint
17078     FD 20 02 F6 | 	mov	local02, result1
1707c     10 1F 02 F6 | 	mov	local01, local02
17080     01 1E 66 F0 | 	shl	local01, #1
17084     10 1F 02 F1 | 	add	local01, local02
17088     03 1E 66 F0 | 	shl	local01, #3
1708c     34 00 00 FF 
17090     38 E5 05 F1 | 	add	objptr, ##26936
17094     F2 1E 02 F1 | 	add	local01, objptr
17098     A7 12 02 F6 | 	mov	arg01, fp
1709c     34 00 00 FF 
170a0     38 E5 85 F1 | 	sub	objptr, ##26936
170a4     6C C4 BF FD | 	call	#_converttoint
170a8     14 1E 06 F1 | 	add	local01, #20
170ac     0F FB 51 FC | 	wrword	result1, local01
170b0     A7 F0 03 F6 | 	mov	ptra, fp
170b4     B2 00 A0 FD | 	call	#popregs_
170b8                 | _do_setsustain_ret
170b8     2D 00 64 FD | 	ret
170bc                 | 
170bc                 | ' 
170bc                 | ' sub do_setenv
170bc                 | _do_setenv
170bc     02 4A 05 F6 | 	mov	COUNT_, #2
170c0     A8 00 A0 FD | 	call	#pushregs_
170c4     18 F0 07 F1 | 	add	ptra, #24
170c8     94 37 BF FD | 	call	#_pop
170cc     FD 12 02 F6 | 	mov	arg01, result1
170d0     FE 1E 02 F6 | 	mov	local01, result2
170d4     FF 20 02 F6 | 	mov	local02, result3
170d8     A7 12 62 FC | 	wrlong	arg01, fp
170dc     04 4E 05 F1 | 	add	fp, #4
170e0     A7 1E 62 FC | 	wrlong	local01, fp
170e4     04 4E 05 F1 | 	add	fp, #4
170e8     A7 20 62 FC | 	wrlong	local02, fp
170ec     08 4E 85 F1 | 	sub	fp, #8
170f0     6C 37 BF FD | 	call	#_pop
170f4     FD 20 02 F6 | 	mov	local02, result1
170f8     0C 4E 05 F1 | 	add	fp, #12
170fc     A7 20 62 FC | 	wrlong	local02, fp
17100     04 4E 05 F1 | 	add	fp, #4
17104     A7 FC 61 FC | 	wrlong	result2, fp
17108     04 4E 05 F1 | 	add	fp, #4
1710c     A7 FE 61 FC | 	wrlong	result3, fp
17110     08 4E 85 F1 | 	sub	fp, #8
17114     A7 12 02 F6 | 	mov	arg01, fp
17118     0C 4E 85 F1 | 	sub	fp, #12
1711c     F4 C3 BF FD | 	call	#_converttoint
17120     FD 20 02 F6 | 	mov	local02, result1
17124     10 1F 02 F6 | 	mov	local01, local02
17128     01 1E 66 F0 | 	shl	local01, #1
1712c     10 1F 02 F1 | 	add	local01, local02
17130     03 1E 66 F0 | 	shl	local01, #3
17134     34 00 00 FF 
17138     38 E5 05 F1 | 	add	objptr, ##26936
1713c     F2 1E 02 F1 | 	add	local01, objptr
17140     A7 12 02 F6 | 	mov	arg01, fp
17144     34 00 00 FF 
17148     38 E5 85 F1 | 	sub	objptr, ##26936
1714c     C4 C3 BF FD | 	call	#_converttoint
17150     05 1E 06 F1 | 	add	local01, #5
17154     0F FB 41 FC | 	wrbyte	result1, local01
17158     A7 F0 03 F6 | 	mov	ptra, fp
1715c     B2 00 A0 FD | 	call	#popregs_
17160                 | _do_setenv_ret
17160     2D 00 64 FD | 	ret
17164                 | 
17164                 | ' 
17164                 | ' sub do_setdelay
17164                 | _do_setdelay
17164     02 4A 05 F6 | 	mov	COUNT_, #2
17168     A8 00 A0 FD | 	call	#pushregs_
1716c     18 F0 07 F1 | 	add	ptra, #24
17170     EC 36 BF FD | 	call	#_pop
17174     FD 12 02 F6 | 	mov	arg01, result1
17178     FE 1E 02 F6 | 	mov	local01, result2
1717c     FF 20 02 F6 | 	mov	local02, result3
17180     A7 12 62 FC | 	wrlong	arg01, fp
17184     04 4E 05 F1 | 	add	fp, #4
17188     A7 1E 62 FC | 	wrlong	local01, fp
1718c     04 4E 05 F1 | 	add	fp, #4
17190     A7 20 62 FC | 	wrlong	local02, fp
17194     08 4E 85 F1 | 	sub	fp, #8
17198     C4 36 BF FD | 	call	#_pop
1719c     FD 20 02 F6 | 	mov	local02, result1
171a0     0C 4E 05 F1 | 	add	fp, #12
171a4     A7 20 62 FC | 	wrlong	local02, fp
171a8     04 4E 05 F1 | 	add	fp, #4
171ac     A7 FC 61 FC | 	wrlong	result2, fp
171b0     04 4E 05 F1 | 	add	fp, #4
171b4     A7 FE 61 FC | 	wrlong	result3, fp
171b8     08 4E 85 F1 | 	sub	fp, #8
171bc     A7 12 02 F6 | 	mov	arg01, fp
171c0     0C 4E 85 F1 | 	sub	fp, #12
171c4     4C C3 BF FD | 	call	#_converttoint
171c8     FD 20 02 F6 | 	mov	local02, result1
171cc     10 1F 02 F6 | 	mov	local01, local02
171d0     01 1E 66 F0 | 	shl	local01, #1
171d4     10 1F 02 F1 | 	add	local01, local02
171d8     03 1E 66 F0 | 	shl	local01, #3
171dc     34 00 00 FF 
171e0     38 E5 05 F1 | 	add	objptr, ##26936
171e4     F2 1E 02 F1 | 	add	local01, objptr
171e8     A7 12 02 F6 | 	mov	arg01, fp
171ec     34 00 00 FF 
171f0     38 E5 85 F1 | 	sub	objptr, ##26936
171f4     1C C3 BF FD | 	call	#_converttoint
171f8     06 1E 06 F1 | 	add	local01, #6
171fc     0F FB 51 FC | 	wrword	result1, local01
17200     A7 F0 03 F6 | 	mov	ptra, fp
17204     B2 00 A0 FD | 	call	#popregs_
17208                 | _do_setdelay_ret
17208     2D 00 64 FD | 	ret
1720c                 | 
1720c                 | ' 
1720c                 | ' sub do_setlen
1720c                 | _do_setlen
1720c     02 4A 05 F6 | 	mov	COUNT_, #2
17210     A8 00 A0 FD | 	call	#pushregs_
17214     18 F0 07 F1 | 	add	ptra, #24
17218     44 36 BF FD | 	call	#_pop
1721c     FD 12 02 F6 | 	mov	arg01, result1
17220     FE 1E 02 F6 | 	mov	local01, result2
17224     FF 20 02 F6 | 	mov	local02, result3
17228     A7 12 62 FC | 	wrlong	arg01, fp
1722c     04 4E 05 F1 | 	add	fp, #4
17230     A7 1E 62 FC | 	wrlong	local01, fp
17234     04 4E 05 F1 | 	add	fp, #4
17238     A7 20 62 FC | 	wrlong	local02, fp
1723c     08 4E 85 F1 | 	sub	fp, #8
17240     1C 36 BF FD | 	call	#_pop
17244     FD 20 02 F6 | 	mov	local02, result1
17248     0C 4E 05 F1 | 	add	fp, #12
1724c     A7 20 62 FC | 	wrlong	local02, fp
17250     04 4E 05 F1 | 	add	fp, #4
17254     A7 FC 61 FC | 	wrlong	result2, fp
17258     04 4E 05 F1 | 	add	fp, #4
1725c     A7 FE 61 FC | 	wrlong	result3, fp
17260     08 4E 85 F1 | 	sub	fp, #8
17264     A7 12 02 F6 | 	mov	arg01, fp
17268     0C 4E 85 F1 | 	sub	fp, #12
1726c     A4 C2 BF FD | 	call	#_converttoint
17270     FD 20 02 F6 | 	mov	local02, result1
17274     10 1F 02 F6 | 	mov	local01, local02
17278     01 1E 66 F0 | 	shl	local01, #1
1727c     10 1F 02 F1 | 	add	local01, local02
17280     03 1E 66 F0 | 	shl	local01, #3
17284     34 00 00 FF 
17288     38 E5 05 F1 | 	add	objptr, ##26936
1728c     F2 1E 02 F1 | 	add	local01, objptr
17290     A7 12 02 F6 | 	mov	arg01, fp
17294     34 00 00 FF 
17298     38 E5 85 F1 | 	sub	objptr, ##26936
1729c     20 C3 BF FD | 	call	#_converttofloat
172a0     08 1E 06 F1 | 	add	local01, #8
172a4     0F FB 61 FC | 	wrlong	result1, local01
172a8     A7 F0 03 F6 | 	mov	ptra, fp
172ac     B2 00 A0 FD | 	call	#popregs_
172b0                 | _do_setlen_ret
172b0     2D 00 64 FD | 	ret
172b4                 | 
172b4                 | ' 
172b4                 | ' sub do_setvol
172b4                 | _do_setvol
172b4     02 4A 05 F6 | 	mov	COUNT_, #2
172b8     A8 00 A0 FD | 	call	#pushregs_
172bc     18 F0 07 F1 | 	add	ptra, #24
172c0     9C 35 BF FD | 	call	#_pop
172c4     FD 12 02 F6 | 	mov	arg01, result1
172c8     FE 1E 02 F6 | 	mov	local01, result2
172cc     FF 20 02 F6 | 	mov	local02, result3
172d0     A7 12 62 FC | 	wrlong	arg01, fp
172d4     04 4E 05 F1 | 	add	fp, #4
172d8     A7 1E 62 FC | 	wrlong	local01, fp
172dc     04 4E 05 F1 | 	add	fp, #4
172e0     A7 20 62 FC | 	wrlong	local02, fp
172e4     08 4E 85 F1 | 	sub	fp, #8
172e8     74 35 BF FD | 	call	#_pop
172ec     FD 20 02 F6 | 	mov	local02, result1
172f0     0C 4E 05 F1 | 	add	fp, #12
172f4     A7 20 62 FC | 	wrlong	local02, fp
172f8     04 4E 05 F1 | 	add	fp, #4
172fc     A7 FC 61 FC | 	wrlong	result2, fp
17300     04 4E 05 F1 | 	add	fp, #4
17304     A7 FE 61 FC | 	wrlong	result3, fp
17308     08 4E 85 F1 | 	sub	fp, #8
1730c     A7 12 02 F6 | 	mov	arg01, fp
17310     0C 4E 85 F1 | 	sub	fp, #12
17314     FC C1 BF FD | 	call	#_converttoint
17318     FD 20 02 F6 | 	mov	local02, result1
1731c     10 1F 02 F6 | 	mov	local01, local02
17320     01 1E 66 F0 | 	shl	local01, #1
17324     10 1F 02 F1 | 	add	local01, local02
17328     03 1E 66 F0 | 	shl	local01, #3
1732c     34 00 00 FF 
17330     38 E5 05 F1 | 	add	objptr, ##26936
17334     F2 1E 02 F1 | 	add	local01, objptr
17338     A7 12 02 F6 | 	mov	arg01, fp
1733c     34 00 00 FF 
17340     38 E5 85 F1 | 	sub	objptr, ##26936
17344     78 C2 BF FD | 	call	#_converttofloat
17348     0C 1E 06 F1 | 	add	local01, #12
1734c     0F FB 61 FC | 	wrlong	result1, local01
17350     A7 F0 03 F6 | 	mov	ptra, fp
17354     B2 00 A0 FD | 	call	#popregs_
17358                 | _do_setvol_ret
17358     2D 00 64 FD | 	ret
1735c                 | 
1735c                 | ' 
1735c                 | ' sub do_setpan
1735c                 | _do_setpan
1735c     02 4A 05 F6 | 	mov	COUNT_, #2
17360     A8 00 A0 FD | 	call	#pushregs_
17364     18 F0 07 F1 | 	add	ptra, #24
17368     F4 34 BF FD | 	call	#_pop
1736c     FD 12 02 F6 | 	mov	arg01, result1
17370     FE 1E 02 F6 | 	mov	local01, result2
17374     FF 20 02 F6 | 	mov	local02, result3
17378     A7 12 62 FC | 	wrlong	arg01, fp
1737c     04 4E 05 F1 | 	add	fp, #4
17380     A7 1E 62 FC | 	wrlong	local01, fp
17384     04 4E 05 F1 | 	add	fp, #4
17388     A7 20 62 FC | 	wrlong	local02, fp
1738c     08 4E 85 F1 | 	sub	fp, #8
17390     CC 34 BF FD | 	call	#_pop
17394     FD 20 02 F6 | 	mov	local02, result1
17398     0C 4E 05 F1 | 	add	fp, #12
1739c     A7 20 62 FC | 	wrlong	local02, fp
173a0     04 4E 05 F1 | 	add	fp, #4
173a4     A7 FC 61 FC | 	wrlong	result2, fp
173a8     04 4E 05 F1 | 	add	fp, #4
173ac     A7 FE 61 FC | 	wrlong	result3, fp
173b0     08 4E 85 F1 | 	sub	fp, #8
173b4     A7 12 02 F6 | 	mov	arg01, fp
173b8     0C 4E 85 F1 | 	sub	fp, #12
173bc     54 C1 BF FD | 	call	#_converttoint
173c0     FD 20 02 F6 | 	mov	local02, result1
173c4     10 1F 02 F6 | 	mov	local01, local02
173c8     01 1E 66 F0 | 	shl	local01, #1
173cc     10 1F 02 F1 | 	add	local01, local02
173d0     03 1E 66 F0 | 	shl	local01, #3
173d4     34 00 00 FF 
173d8     38 E5 05 F1 | 	add	objptr, ##26936
173dc     F2 1E 02 F1 | 	add	local01, objptr
173e0     A7 12 02 F6 | 	mov	arg01, fp
173e4     34 00 00 FF 
173e8     38 E5 85 F1 | 	sub	objptr, ##26936
173ec     D0 C1 BF FD | 	call	#_converttofloat
173f0     10 1E 06 F1 | 	add	local01, #16
173f4     0F FB 61 FC | 	wrlong	result1, local01
173f8     A7 F0 03 F6 | 	mov	ptra, fp
173fc     B2 00 A0 FD | 	call	#popregs_
17400                 | _do_setpan_ret
17400     2D 00 64 FD | 	ret
17404                 | 
17404                 | ' 
17404                 | ' 
17404                 | ' sub do_pinwrite
17404                 | _do_pinwrite
17404     01 4A 05 F6 | 	mov	COUNT_, #1
17408     A8 00 A0 FD | 	call	#pushregs_
1740c     18 F0 07 F1 | 	add	ptra, #24
17410     4C 34 BF FD | 	call	#_pop
17414     FD 14 02 F6 | 	mov	arg02, result1
17418     FE 12 02 F6 | 	mov	arg01, result2
1741c     FF 1E 02 F6 | 	mov	local01, result3
17420     A7 14 62 FC | 	wrlong	arg02, fp
17424     04 4E 05 F1 | 	add	fp, #4
17428     A7 12 62 FC | 	wrlong	arg01, fp
1742c     04 4E 05 F1 | 	add	fp, #4
17430     A7 1E 62 FC | 	wrlong	local01, fp
17434     08 4E 85 F1 | 	sub	fp, #8
17438     24 34 BF FD | 	call	#_pop
1743c     FF 1E 02 F6 | 	mov	local01, result3
17440     0C 4E 05 F1 | 	add	fp, #12
17444     A7 FA 61 FC | 	wrlong	result1, fp
17448     04 4E 05 F1 | 	add	fp, #4
1744c     A7 FC 61 FC | 	wrlong	result2, fp
17450     04 4E 05 F1 | 	add	fp, #4
17454     A7 1E 62 FC | 	wrlong	local01, fp
17458     08 4E 85 F1 | 	sub	fp, #8
1745c     A7 12 02 F6 | 	mov	arg01, fp
17460     0C 4E 85 F1 | 	sub	fp, #12
17464     AC C0 BF FD | 	call	#_converttoint
17468     FD 1E 02 F6 | 	mov	local01, result1
1746c     A7 12 02 F6 | 	mov	arg01, fp
17470     A0 C0 BF FD | 	call	#_converttoint
17474     FD 14 02 F6 | 	mov	arg02, result1
17478     0F 13 02 F6 | 	mov	arg01, local01
1747c     A8 78 B0 FD | 	call	#__system___pinwrite
17480     A7 F0 03 F6 | 	mov	ptra, fp
17484     B2 00 A0 FD | 	call	#popregs_
17488                 | _do_pinwrite_ret
17488     2D 00 64 FD | 	ret
1748c                 | 
1748c                 | ' 
1748c                 | ' sub do_pinfloat
1748c                 | _do_pinfloat
1748c     00 4A 05 F6 | 	mov	COUNT_, #0
17490     A8 00 A0 FD | 	call	#pushregs_
17494     0C F0 07 F1 | 	add	ptra, #12
17498     C4 33 BF FD | 	call	#_pop
1749c     A7 FA 61 FC | 	wrlong	result1, fp
174a0     04 4E 05 F1 | 	add	fp, #4
174a4     A7 FC 61 FC | 	wrlong	result2, fp
174a8     04 4E 05 F1 | 	add	fp, #4
174ac     A7 FE 61 FC | 	wrlong	result3, fp
174b0     08 4E 85 F1 | 	sub	fp, #8
174b4     A7 12 02 F6 | 	mov	arg01, fp
174b8     58 C0 BF FD | 	call	#_converttoint
174bc     50 FA 61 FD | 	fltl	result1
174c0     A7 F0 03 F6 | 	mov	ptra, fp
174c4     B2 00 A0 FD | 	call	#popregs_
174c8                 | _do_pinfloat_ret
174c8     2D 00 64 FD | 	ret
174cc                 | 
174cc                 | ' 
174cc                 | ' sub do_pinlo
174cc                 | _do_pinlo
174cc     00 4A 05 F6 | 	mov	COUNT_, #0
174d0     A8 00 A0 FD | 	call	#pushregs_
174d4     0C F0 07 F1 | 	add	ptra, #12
174d8     84 33 BF FD | 	call	#_pop
174dc     A7 FA 61 FC | 	wrlong	result1, fp
174e0     04 4E 05 F1 | 	add	fp, #4
174e4     A7 FC 61 FC | 	wrlong	result2, fp
174e8     04 4E 05 F1 | 	add	fp, #4
174ec     A7 FE 61 FC | 	wrlong	result3, fp
174f0     08 4E 85 F1 | 	sub	fp, #8
174f4     A7 12 02 F6 | 	mov	arg01, fp
174f8     18 C0 BF FD | 	call	#_converttoint
174fc     58 FA 61 FD | 	drvl	result1
17500     A7 F0 03 F6 | 	mov	ptra, fp
17504     B2 00 A0 FD | 	call	#popregs_
17508                 | _do_pinlo_ret
17508     2D 00 64 FD | 	ret
1750c                 | 
1750c                 | ' 
1750c                 | ' sub do_pinhi
1750c                 | _do_pinhi
1750c     00 4A 05 F6 | 	mov	COUNT_, #0
17510     A8 00 A0 FD | 	call	#pushregs_
17514     0C F0 07 F1 | 	add	ptra, #12
17518     44 33 BF FD | 	call	#_pop
1751c     A7 FA 61 FC | 	wrlong	result1, fp
17520     04 4E 05 F1 | 	add	fp, #4
17524     A7 FC 61 FC | 	wrlong	result2, fp
17528     04 4E 05 F1 | 	add	fp, #4
1752c     A7 FE 61 FC | 	wrlong	result3, fp
17530     08 4E 85 F1 | 	sub	fp, #8
17534     A7 12 02 F6 | 	mov	arg01, fp
17538     D8 BF BF FD | 	call	#_converttoint
1753c     59 FA 61 FD | 	drvh	result1
17540     A7 F0 03 F6 | 	mov	ptra, fp
17544     B2 00 A0 FD | 	call	#popregs_
17548                 | _do_pinhi_ret
17548     2D 00 64 FD | 	ret
1754c                 | 
1754c                 | ' 
1754c                 | ' sub do_pintoggle
1754c                 | _do_pintoggle
1754c     00 4A 05 F6 | 	mov	COUNT_, #0
17550     A8 00 A0 FD | 	call	#pushregs_
17554     0C F0 07 F1 | 	add	ptra, #12
17558     04 33 BF FD | 	call	#_pop
1755c     A7 FA 61 FC | 	wrlong	result1, fp
17560     04 4E 05 F1 | 	add	fp, #4
17564     A7 FC 61 FC | 	wrlong	result2, fp
17568     04 4E 05 F1 | 	add	fp, #4
1756c     A7 FE 61 FC | 	wrlong	result3, fp
17570     08 4E 85 F1 | 	sub	fp, #8
17574     A7 12 02 F6 | 	mov	arg01, fp
17578     98 BF BF FD | 	call	#_converttoint
1757c     5F FA 61 FD | 	drvnot	result1
17580     A7 F0 03 F6 | 	mov	ptra, fp
17584     B2 00 A0 FD | 	call	#popregs_
17588                 | _do_pintoggle_ret
17588     2D 00 64 FD | 	ret
1758c                 | 
1758c                 | ' 
1758c                 | ' 
1758c                 | ' sub do_pinstart
1758c                 | _do_pinstart
1758c     03 4A 05 F6 | 	mov	COUNT_, #3
17590     A8 00 A0 FD | 	call	#pushregs_
17594     30 F0 07 F1 | 	add	ptra, #48
17598     C4 32 BF FD | 	call	#_pop
1759c     FD 16 02 F6 | 	mov	arg03, result1
175a0     FE 14 02 F6 | 	mov	arg02, result2
175a4     FF 18 02 F6 | 	mov	arg04, result3
175a8     A7 16 62 FC | 	wrlong	arg03, fp
175ac     04 4E 05 F1 | 	add	fp, #4
175b0     A7 14 62 FC | 	wrlong	arg02, fp
175b4     04 4E 05 F1 | 	add	fp, #4
175b8     A7 18 62 FC | 	wrlong	arg04, fp
175bc     08 4E 85 F1 | 	sub	fp, #8
175c0     9C 32 BF FD | 	call	#_pop
175c4     FD 16 02 F6 | 	mov	arg03, result1
175c8     FE 14 02 F6 | 	mov	arg02, result2
175cc     FF 18 02 F6 | 	mov	arg04, result3
175d0     0C 4E 05 F1 | 	add	fp, #12
175d4     A7 16 62 FC | 	wrlong	arg03, fp
175d8     04 4E 05 F1 | 	add	fp, #4
175dc     A7 14 62 FC | 	wrlong	arg02, fp
175e0     04 4E 05 F1 | 	add	fp, #4
175e4     A7 18 62 FC | 	wrlong	arg04, fp
175e8     14 4E 85 F1 | 	sub	fp, #20
175ec     70 32 BF FD | 	call	#_pop
175f0     FD 16 02 F6 | 	mov	arg03, result1
175f4     FE 14 02 F6 | 	mov	arg02, result2
175f8     FF 18 02 F6 | 	mov	arg04, result3
175fc     18 4E 05 F1 | 	add	fp, #24
17600     A7 16 62 FC | 	wrlong	arg03, fp
17604     04 4E 05 F1 | 	add	fp, #4
17608     A7 14 62 FC | 	wrlong	arg02, fp
1760c     04 4E 05 F1 | 	add	fp, #4
17610     A7 18 62 FC | 	wrlong	arg04, fp
17614     20 4E 85 F1 | 	sub	fp, #32
17618     44 32 BF FD | 	call	#_pop
1761c     FF 16 02 F6 | 	mov	arg03, result3
17620     24 4E 05 F1 | 	add	fp, #36
17624     A7 FA 61 FC | 	wrlong	result1, fp
17628     04 4E 05 F1 | 	add	fp, #4
1762c     A7 FC 61 FC | 	wrlong	result2, fp
17630     04 4E 05 F1 | 	add	fp, #4
17634     A7 16 62 FC | 	wrlong	arg03, fp
17638     08 4E 85 F1 | 	sub	fp, #8
1763c     A7 12 02 F6 | 	mov	arg01, fp
17640     24 4E 85 F1 | 	sub	fp, #36
17644     CC BE BF FD | 	call	#_converttoint
17648     FD 1E 02 F6 | 	mov	local01, result1
1764c     18 4E 05 F1 | 	add	fp, #24
17650     A7 12 02 F6 | 	mov	arg01, fp
17654     18 4E 85 F1 | 	sub	fp, #24
17658     B8 BE BF FD | 	call	#_converttoint
1765c     FD 20 02 F6 | 	mov	local02, result1
17660     0C 4E 05 F1 | 	add	fp, #12
17664     A7 12 02 F6 | 	mov	arg01, fp
17668     0C 4E 85 F1 | 	sub	fp, #12
1766c     A4 BE BF FD | 	call	#_converttoint
17670     FD 22 02 F6 | 	mov	local03, result1
17674     A7 12 02 F6 | 	mov	arg01, fp
17678     98 BE BF FD | 	call	#_converttoint
1767c     40 1E 62 FD | 	dirl	local01
17680     0F 21 02 FC | 	wrpin	local02, local01
17684     0F 23 12 FC | 	wxpin	local03, local01
17688     0F FB 21 FC | 	wypin	result1, local01
1768c     41 1E 62 FD | 	dirh	local01
17690     A7 F0 03 F6 | 	mov	ptra, fp
17694     B2 00 A0 FD | 	call	#popregs_
17698                 | _do_pinstart_ret
17698     2D 00 64 FD | 	ret
1769c                 | 
1769c                 | ' 
1769c                 | ' 
1769c                 | ' sub do_wrpin
1769c                 | _do_wrpin
1769c     01 4A 05 F6 | 	mov	COUNT_, #1
176a0     A8 00 A0 FD | 	call	#pushregs_
176a4     18 F0 07 F1 | 	add	ptra, #24
176a8     B4 31 BF FD | 	call	#_pop
176ac     FD 14 02 F6 | 	mov	arg02, result1
176b0     FE 12 02 F6 | 	mov	arg01, result2
176b4     FF 1E 02 F6 | 	mov	local01, result3
176b8     A7 14 62 FC | 	wrlong	arg02, fp
176bc     04 4E 05 F1 | 	add	fp, #4
176c0     A7 12 62 FC | 	wrlong	arg01, fp
176c4     04 4E 05 F1 | 	add	fp, #4
176c8     A7 1E 62 FC | 	wrlong	local01, fp
176cc     08 4E 85 F1 | 	sub	fp, #8
176d0     8C 31 BF FD | 	call	#_pop
176d4     FF 1E 02 F6 | 	mov	local01, result3
176d8     0C 4E 05 F1 | 	add	fp, #12
176dc     A7 FA 61 FC | 	wrlong	result1, fp
176e0     04 4E 05 F1 | 	add	fp, #4
176e4     A7 FC 61 FC | 	wrlong	result2, fp
176e8     04 4E 05 F1 | 	add	fp, #4
176ec     A7 1E 62 FC | 	wrlong	local01, fp
176f0     08 4E 85 F1 | 	sub	fp, #8
176f4     A7 12 02 F6 | 	mov	arg01, fp
176f8     0C 4E 85 F1 | 	sub	fp, #12
176fc     14 BE BF FD | 	call	#_converttoint
17700     FD 1E 02 F6 | 	mov	local01, result1
17704     A7 12 02 F6 | 	mov	arg01, fp
17708     08 BE BF FD | 	call	#_converttoint
1770c     0F FB 01 FC | 	wrpin	result1, local01
17710     A7 F0 03 F6 | 	mov	ptra, fp
17714     B2 00 A0 FD | 	call	#popregs_
17718                 | _do_wrpin_ret
17718     2D 00 64 FD | 	ret
1771c                 | 
1771c                 | ' 
1771c                 | ' sub do_wxpin
1771c                 | _do_wxpin
1771c     01 4A 05 F6 | 	mov	COUNT_, #1
17720     A8 00 A0 FD | 	call	#pushregs_
17724     18 F0 07 F1 | 	add	ptra, #24
17728     34 31 BF FD | 	call	#_pop
1772c     FD 14 02 F6 | 	mov	arg02, result1
17730     FE 12 02 F6 | 	mov	arg01, result2
17734     FF 1E 02 F6 | 	mov	local01, result3
17738     A7 14 62 FC | 	wrlong	arg02, fp
1773c     04 4E 05 F1 | 	add	fp, #4
17740     A7 12 62 FC | 	wrlong	arg01, fp
17744     04 4E 05 F1 | 	add	fp, #4
17748     A7 1E 62 FC | 	wrlong	local01, fp
1774c     08 4E 85 F1 | 	sub	fp, #8
17750     0C 31 BF FD | 	call	#_pop
17754     FF 1E 02 F6 | 	mov	local01, result3
17758     0C 4E 05 F1 | 	add	fp, #12
1775c     A7 FA 61 FC | 	wrlong	result1, fp
17760     04 4E 05 F1 | 	add	fp, #4
17764     A7 FC 61 FC | 	wrlong	result2, fp
17768     04 4E 05 F1 | 	add	fp, #4
1776c     A7 1E 62 FC | 	wrlong	local01, fp
17770     08 4E 85 F1 | 	sub	fp, #8
17774     A7 12 02 F6 | 	mov	arg01, fp
17778     0C 4E 85 F1 | 	sub	fp, #12
1777c     94 BD BF FD | 	call	#_converttoint
17780     FD 1E 02 F6 | 	mov	local01, result1
17784     A7 12 02 F6 | 	mov	arg01, fp
17788     88 BD BF FD | 	call	#_converttoint
1778c     0F FB 11 FC | 	wxpin	result1, local01
17790     A7 F0 03 F6 | 	mov	ptra, fp
17794     B2 00 A0 FD | 	call	#popregs_
17798                 | _do_wxpin_ret
17798     2D 00 64 FD | 	ret
1779c                 | 
1779c                 | ' 
1779c                 | ' sub do_wypin
1779c                 | _do_wypin
1779c     01 4A 05 F6 | 	mov	COUNT_, #1
177a0     A8 00 A0 FD | 	call	#pushregs_
177a4     18 F0 07 F1 | 	add	ptra, #24
177a8     B4 30 BF FD | 	call	#_pop
177ac     FD 14 02 F6 | 	mov	arg02, result1
177b0     FE 12 02 F6 | 	mov	arg01, result2
177b4     FF 1E 02 F6 | 	mov	local01, result3
177b8     A7 14 62 FC | 	wrlong	arg02, fp
177bc     04 4E 05 F1 | 	add	fp, #4
177c0     A7 12 62 FC | 	wrlong	arg01, fp
177c4     04 4E 05 F1 | 	add	fp, #4
177c8     A7 1E 62 FC | 	wrlong	local01, fp
177cc     08 4E 85 F1 | 	sub	fp, #8
177d0     8C 30 BF FD | 	call	#_pop
177d4     FF 1E 02 F6 | 	mov	local01, result3
177d8     0C 4E 05 F1 | 	add	fp, #12
177dc     A7 FA 61 FC | 	wrlong	result1, fp
177e0     04 4E 05 F1 | 	add	fp, #4
177e4     A7 FC 61 FC | 	wrlong	result2, fp
177e8     04 4E 05 F1 | 	add	fp, #4
177ec     A7 1E 62 FC | 	wrlong	local01, fp
177f0     08 4E 85 F1 | 	sub	fp, #8
177f4     A7 12 02 F6 | 	mov	arg01, fp
177f8     0C 4E 85 F1 | 	sub	fp, #12
177fc     14 BD BF FD | 	call	#_converttoint
17800     FD 1E 02 F6 | 	mov	local01, result1
17804     A7 12 02 F6 | 	mov	arg01, fp
17808     08 BD BF FD | 	call	#_converttoint
1780c     0F FB 21 FC | 	wypin	result1, local01
17810     A7 F0 03 F6 | 	mov	ptra, fp
17814     B2 00 A0 FD | 	call	#popregs_
17818                 | _do_wypin_ret
17818     2D 00 64 FD | 	ret
1781c                 | 
1781c                 | ' 
1781c                 | ' sub do_position
1781c                 | _do_position
1781c     01 4A 05 F6 | 	mov	COUNT_, #1
17820     A8 00 A0 FD | 	call	#pushregs_
17824     18 F0 07 F1 | 	add	ptra, #24
17828     34 30 BF FD | 	call	#_pop
1782c     FD 14 02 F6 | 	mov	arg02, result1
17830     FE 12 02 F6 | 	mov	arg01, result2
17834     FF 1E 02 F6 | 	mov	local01, result3
17838     A7 14 62 FC | 	wrlong	arg02, fp
1783c     04 4E 05 F1 | 	add	fp, #4
17840     A7 12 62 FC | 	wrlong	arg01, fp
17844     04 4E 05 F1 | 	add	fp, #4
17848     A7 1E 62 FC | 	wrlong	local01, fp
1784c     08 4E 85 F1 | 	sub	fp, #8
17850     0C 30 BF FD | 	call	#_pop
17854     FF 1E 02 F6 | 	mov	local01, result3
17858     0C 4E 05 F1 | 	add	fp, #12
1785c     A7 FA 61 FC | 	wrlong	result1, fp
17860     04 4E 05 F1 | 	add	fp, #4
17864     A7 FC 61 FC | 	wrlong	result2, fp
17868     04 4E 05 F1 | 	add	fp, #4
1786c     A7 1E 62 FC | 	wrlong	local01, fp
17870     08 4E 85 F1 | 	sub	fp, #8
17874     A7 12 02 F6 | 	mov	arg01, fp
17878     0C 4E 85 F1 | 	sub	fp, #12
1787c     94 BC BF FD | 	call	#_converttoint
17880     FD 1E 02 F6 | 	mov	local01, result1
17884     A7 12 02 F6 | 	mov	arg01, fp
17888     88 BC BF FD | 	call	#_converttoint
1788c     FD 14 02 F6 | 	mov	arg02, result1
17890     0F 13 02 F6 | 	mov	arg01, local01
17894     40 5B B0 FD | 	call	#_hg010b_spin2_setcursorpos
17898     A7 F0 03 F6 | 	mov	ptra, fp
1789c     B2 00 A0 FD | 	call	#popregs_
178a0                 | _do_position_ret
178a0     2D 00 64 FD | 	ret
178a4                 | 
178a4                 | ' 
178a4                 | ' sub do_poke
178a4                 | _do_poke
178a4     01 4A 05 F6 | 	mov	COUNT_, #1
178a8     A8 00 A0 FD | 	call	#pushregs_
178ac     20 F0 07 F1 | 	add	ptra, #32
178b0     AC 2F BF FD | 	call	#_pop
178b4     FD 14 02 F6 | 	mov	arg02, result1
178b8     FE 12 02 F6 | 	mov	arg01, result2
178bc     FF 1E 02 F6 | 	mov	local01, result3
178c0     A7 14 62 FC | 	wrlong	arg02, fp
178c4     04 4E 05 F1 | 	add	fp, #4
178c8     A7 12 62 FC | 	wrlong	arg01, fp
178cc     04 4E 05 F1 | 	add	fp, #4
178d0     A7 1E 62 FC | 	wrlong	local01, fp
178d4     08 4E 85 F1 | 	sub	fp, #8
178d8     84 2F BF FD | 	call	#_pop
178dc     FF 1E 02 F6 | 	mov	local01, result3
178e0     0C 4E 05 F1 | 	add	fp, #12
178e4     A7 FA 61 FC | 	wrlong	result1, fp
178e8     04 4E 05 F1 | 	add	fp, #4
178ec     A7 FC 61 FC | 	wrlong	result2, fp
178f0     04 4E 05 F1 | 	add	fp, #4
178f4     A7 1E 62 FC | 	wrlong	local01, fp
178f8     08 4E 85 F1 | 	sub	fp, #8
178fc     A7 12 02 F6 | 	mov	arg01, fp
17900     0C 4E 85 F1 | 	sub	fp, #12
17904     0C BC BF FD | 	call	#_converttoint
17908     18 4E 05 F1 | 	add	fp, #24
1790c     A7 FA 61 FC | 	wrlong	result1, fp
17910     18 4E 85 F1 | 	sub	fp, #24
17914     A7 12 02 F6 | 	mov	arg01, fp
17918     F8 BB BF FD | 	call	#_converttoint
1791c     1C 4E 05 F1 | 	add	fp, #28
17920     A7 FA 61 FC | 	wrlong	result1, fp
17924                 | ' t1=pop() 'value
17924                 | ' t2=pop() 
17924                 | ' a=converttoint(t2) : v=converttoint(t1)
17924                 | ' if a<$80000 then poke a,v else pspoke a,v
17924     04 4E 85 F1 | 	sub	fp, #4
17928     A7 1E 02 FB | 	rdlong	local01, fp
1792c     18 4E 85 F1 | 	sub	fp, #24
17930     00 04 00 FF 
17934     00 1E 16 F2 | 	cmp	local01, ##524288 wc
17938     1C 00 90 3D |  if_ae	jmp	#LR__1890
1793c     18 4E 05 F1 | 	add	fp, #24
17940     A7 12 02 FB | 	rdlong	arg01, fp
17944     04 4E 05 F1 | 	add	fp, #4
17948     A7 14 02 FB | 	rdlong	arg02, fp
1794c     1C 4E 85 F1 | 	sub	fp, #28
17950     09 15 42 FC | 	wrbyte	arg02, arg01
17954     18 00 90 FD | 	jmp	#LR__1891
17958                 | LR__1890
17958     18 4E 05 F1 | 	add	fp, #24
1795c     A7 12 02 FB | 	rdlong	arg01, fp
17960     04 4E 05 F1 | 	add	fp, #4
17964     A7 14 02 FB | 	rdlong	arg02, fp
17968     1C 4E 85 F1 | 	sub	fp, #28
1796c     7C 2F B0 FD | 	call	#_pspoke
17970                 | LR__1891
17970     A7 F0 03 F6 | 	mov	ptra, fp
17974     B2 00 A0 FD | 	call	#popregs_
17978                 | _do_poke_ret
17978     2D 00 64 FD | 	ret
1797c                 | 
1797c                 | ' 
1797c                 | ' sub do_dpoke
1797c                 | _do_dpoke
1797c     01 4A 05 F6 | 	mov	COUNT_, #1
17980     A8 00 A0 FD | 	call	#pushregs_
17984     20 F0 07 F1 | 	add	ptra, #32
17988     D4 2E BF FD | 	call	#_pop
1798c     FD 14 02 F6 | 	mov	arg02, result1
17990     FE 12 02 F6 | 	mov	arg01, result2
17994     FF 1E 02 F6 | 	mov	local01, result3
17998     A7 14 62 FC | 	wrlong	arg02, fp
1799c     04 4E 05 F1 | 	add	fp, #4
179a0     A7 12 62 FC | 	wrlong	arg01, fp
179a4     04 4E 05 F1 | 	add	fp, #4
179a8     A7 1E 62 FC | 	wrlong	local01, fp
179ac     08 4E 85 F1 | 	sub	fp, #8
179b0     AC 2E BF FD | 	call	#_pop
179b4     FF 1E 02 F6 | 	mov	local01, result3
179b8     0C 4E 05 F1 | 	add	fp, #12
179bc     A7 FA 61 FC | 	wrlong	result1, fp
179c0     04 4E 05 F1 | 	add	fp, #4
179c4     A7 FC 61 FC | 	wrlong	result2, fp
179c8     04 4E 05 F1 | 	add	fp, #4
179cc     A7 1E 62 FC | 	wrlong	local01, fp
179d0     08 4E 85 F1 | 	sub	fp, #8
179d4     A7 12 02 F6 | 	mov	arg01, fp
179d8     0C 4E 85 F1 | 	sub	fp, #12
179dc     34 BB BF FD | 	call	#_converttoint
179e0     18 4E 05 F1 | 	add	fp, #24
179e4     A7 FA 61 FC | 	wrlong	result1, fp
179e8     18 4E 85 F1 | 	sub	fp, #24
179ec     A7 12 02 F6 | 	mov	arg01, fp
179f0     20 BB BF FD | 	call	#_converttoint
179f4     1C 4E 05 F1 | 	add	fp, #28
179f8     A7 FA 61 FC | 	wrlong	result1, fp
179fc                 | ' t1=pop() 'value
179fc                 | ' t2=pop() 
179fc                 | ' a=converttoint(t2) : v=converttoint(t1)
179fc                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
179fc     04 4E 85 F1 | 	sub	fp, #4
17a00     A7 1E 02 FB | 	rdlong	local01, fp
17a04     18 4E 85 F1 | 	sub	fp, #24
17a08     00 04 00 FF 
17a0c     00 1E 16 F2 | 	cmp	local01, ##524288 wc
17a10     1C 00 90 3D |  if_ae	jmp	#LR__1900
17a14     18 4E 05 F1 | 	add	fp, #24
17a18     A7 12 02 FB | 	rdlong	arg01, fp
17a1c     04 4E 05 F1 | 	add	fp, #4
17a20     A7 14 02 FB | 	rdlong	arg02, fp
17a24     1C 4E 85 F1 | 	sub	fp, #28
17a28     09 15 52 FC | 	wrword	arg02, arg01
17a2c     18 00 90 FD | 	jmp	#LR__1901
17a30                 | LR__1900
17a30     18 4E 05 F1 | 	add	fp, #24
17a34     A7 12 02 FB | 	rdlong	arg01, fp
17a38     04 4E 05 F1 | 	add	fp, #4
17a3c     A7 14 02 FB | 	rdlong	arg02, fp
17a40     1C 4E 85 F1 | 	sub	fp, #28
17a44     5C 2E B0 FD | 	call	#_psdpoke
17a48                 | LR__1901
17a48     A7 F0 03 F6 | 	mov	ptra, fp
17a4c     B2 00 A0 FD | 	call	#popregs_
17a50                 | _do_dpoke_ret
17a50     2D 00 64 FD | 	ret
17a54                 | 
17a54                 | ' 
17a54                 | ' sub do_lpoke
17a54                 | _do_lpoke
17a54     01 4A 05 F6 | 	mov	COUNT_, #1
17a58     A8 00 A0 FD | 	call	#pushregs_
17a5c     20 F0 07 F1 | 	add	ptra, #32
17a60     FC 2D BF FD | 	call	#_pop
17a64     FD 14 02 F6 | 	mov	arg02, result1
17a68     FE 12 02 F6 | 	mov	arg01, result2
17a6c     FF 1E 02 F6 | 	mov	local01, result3
17a70     A7 14 62 FC | 	wrlong	arg02, fp
17a74     04 4E 05 F1 | 	add	fp, #4
17a78     A7 12 62 FC | 	wrlong	arg01, fp
17a7c     04 4E 05 F1 | 	add	fp, #4
17a80     A7 1E 62 FC | 	wrlong	local01, fp
17a84     08 4E 85 F1 | 	sub	fp, #8
17a88     D4 2D BF FD | 	call	#_pop
17a8c     FF 1E 02 F6 | 	mov	local01, result3
17a90     0C 4E 05 F1 | 	add	fp, #12
17a94     A7 FA 61 FC | 	wrlong	result1, fp
17a98     04 4E 05 F1 | 	add	fp, #4
17a9c     A7 FC 61 FC | 	wrlong	result2, fp
17aa0     04 4E 05 F1 | 	add	fp, #4
17aa4     A7 1E 62 FC | 	wrlong	local01, fp
17aa8     08 4E 85 F1 | 	sub	fp, #8
17aac     A7 12 02 F6 | 	mov	arg01, fp
17ab0     0C 4E 85 F1 | 	sub	fp, #12
17ab4     5C BA BF FD | 	call	#_converttoint
17ab8     18 4E 05 F1 | 	add	fp, #24
17abc     A7 FA 61 FC | 	wrlong	result1, fp
17ac0     18 4E 85 F1 | 	sub	fp, #24
17ac4     A7 12 02 F6 | 	mov	arg01, fp
17ac8     48 BA BF FD | 	call	#_converttoint
17acc     1C 4E 05 F1 | 	add	fp, #28
17ad0     A7 FA 61 FC | 	wrlong	result1, fp
17ad4                 | ' t1=pop() 'value
17ad4                 | ' t2=pop() 
17ad4                 | ' a=converttoint(t2) : v=converttoint(t1)
17ad4                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
17ad4     04 4E 85 F1 | 	sub	fp, #4
17ad8     A7 1E 02 FB | 	rdlong	local01, fp
17adc     18 4E 85 F1 | 	sub	fp, #24
17ae0     00 04 00 FF 
17ae4     00 1E 16 F2 | 	cmp	local01, ##524288 wc
17ae8     1C 00 90 3D |  if_ae	jmp	#LR__1910
17aec     18 4E 05 F1 | 	add	fp, #24
17af0     A7 12 02 FB | 	rdlong	arg01, fp
17af4     04 4E 05 F1 | 	add	fp, #4
17af8     A7 14 02 FB | 	rdlong	arg02, fp
17afc     1C 4E 85 F1 | 	sub	fp, #28
17b00     09 15 62 FC | 	wrlong	arg02, arg01
17b04     18 00 90 FD | 	jmp	#LR__1911
17b08                 | LR__1910
17b08     18 4E 05 F1 | 	add	fp, #24
17b0c     A7 12 02 FB | 	rdlong	arg01, fp
17b10     04 4E 05 F1 | 	add	fp, #4
17b14     A7 14 02 FB | 	rdlong	arg02, fp
17b18     1C 4E 85 F1 | 	sub	fp, #28
17b1c     3C 2D B0 FD | 	call	#_pslpoke
17b20                 | LR__1911
17b20     A7 F0 03 F6 | 	mov	ptra, fp
17b24     B2 00 A0 FD | 	call	#popregs_
17b28                 | _do_lpoke_ret
17b28     2D 00 64 FD | 	ret
17b2c                 | 
17b2c                 | ' 
17b2c                 | ' sub do_peek
17b2c                 | _do_peek
17b2c     00 4A 05 F6 | 	mov	COUNT_, #0
17b30     A8 00 A0 FD | 	call	#pushregs_
17b34     14 F0 07 F1 | 	add	ptra, #20
17b38     24 2D BF FD | 	call	#_pop
17b3c     A7 FA 61 FC | 	wrlong	result1, fp
17b40     04 4E 05 F1 | 	add	fp, #4
17b44     A7 FC 61 FC | 	wrlong	result2, fp
17b48     04 4E 05 F1 | 	add	fp, #4
17b4c     A7 FE 61 FC | 	wrlong	result3, fp
17b50     08 4E 85 F1 | 	sub	fp, #8
17b54     A7 12 02 F6 | 	mov	arg01, fp
17b58     B8 B9 BF FD | 	call	#_converttoint
17b5c     0C 4E 05 F1 | 	add	fp, #12
17b60     A7 FA 61 FC | 	wrlong	result1, fp
17b64                 | ' t1=pop()
17b64                 | ' a=converttoint(t1)
17b64                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
17b64     0C 4E 85 F1 | 	sub	fp, #12
17b68     00 04 00 FF 
17b6c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
17b70     1C 00 90 3D |  if_ae	jmp	#LR__1920
17b74     0C 4E 05 F1 | 	add	fp, #12
17b78     A7 12 02 FB | 	rdlong	arg01, fp
17b7c     09 FB C1 FA | 	rdbyte	result1, arg01
17b80     04 4E 05 F1 | 	add	fp, #4
17b84     A7 FA 61 FC | 	wrlong	result1, fp
17b88     10 4E 85 F1 | 	sub	fp, #16
17b8c     20 00 90 FD | 	jmp	#LR__1921
17b90                 | LR__1920
17b90     0C 4E 05 F1 | 	add	fp, #12
17b94     A7 12 02 FB | 	rdlong	arg01, fp
17b98     0C 4E 85 F1 | 	sub	fp, #12
17b9c     94 2D B0 FD | 	call	#_pspeek
17ba0     FD FA E1 F8 | 	getbyte	result1, result1, #0
17ba4     10 4E 05 F1 | 	add	fp, #16
17ba8     A7 FA 61 FC | 	wrlong	result1, fp
17bac     10 4E 85 F1 | 	sub	fp, #16
17bb0                 | LR__1921
17bb0     08 4E 05 F1 | 	add	fp, #8
17bb4     A7 3A 68 FC | 	wrlong	#29, fp
17bb8     08 4E 05 F1 | 	add	fp, #8
17bbc     A7 12 02 FB | 	rdlong	arg01, fp
17bc0     10 4E 85 F1 | 	sub	fp, #16
17bc4     A7 12 62 FC | 	wrlong	arg01, fp
17bc8     A7 12 02 F6 | 	mov	arg01, fp
17bcc     28 2D BF FD | 	call	#_push
17bd0     A7 F0 03 F6 | 	mov	ptra, fp
17bd4     B2 00 A0 FD | 	call	#popregs_
17bd8                 | _do_peek_ret
17bd8     2D 00 64 FD | 	ret
17bdc                 | 
17bdc                 | ' 
17bdc                 | ' sub do_dpeek
17bdc                 | _do_dpeek
17bdc     00 4A 05 F6 | 	mov	COUNT_, #0
17be0     A8 00 A0 FD | 	call	#pushregs_
17be4     14 F0 07 F1 | 	add	ptra, #20
17be8     74 2C BF FD | 	call	#_pop
17bec     A7 FA 61 FC | 	wrlong	result1, fp
17bf0     04 4E 05 F1 | 	add	fp, #4
17bf4     A7 FC 61 FC | 	wrlong	result2, fp
17bf8     04 4E 05 F1 | 	add	fp, #4
17bfc     A7 FE 61 FC | 	wrlong	result3, fp
17c00     08 4E 85 F1 | 	sub	fp, #8
17c04     A7 12 02 F6 | 	mov	arg01, fp
17c08     08 B9 BF FD | 	call	#_converttoint
17c0c     0C 4E 05 F1 | 	add	fp, #12
17c10     A7 FA 61 FC | 	wrlong	result1, fp
17c14                 | ' t1=pop()
17c14                 | ' a=converttoint(t1)
17c14                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
17c14     0C 4E 85 F1 | 	sub	fp, #12
17c18     00 04 00 FF 
17c1c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
17c20     1C 00 90 3D |  if_ae	jmp	#LR__1930
17c24     0C 4E 05 F1 | 	add	fp, #12
17c28     A7 12 02 FB | 	rdlong	arg01, fp
17c2c     09 FB E1 FA | 	rdword	result1, arg01
17c30     04 4E 05 F1 | 	add	fp, #4
17c34     A7 FA 61 FC | 	wrlong	result1, fp
17c38     10 4E 85 F1 | 	sub	fp, #16
17c3c     1C 00 90 FD | 	jmp	#LR__1931
17c40                 | LR__1930
17c40     0C 4E 05 F1 | 	add	fp, #12
17c44     A7 12 02 FB | 	rdlong	arg01, fp
17c48     0C 4E 85 F1 | 	sub	fp, #12
17c4c     94 2D B0 FD | 	call	#_psdpeek
17c50     10 4E 05 F1 | 	add	fp, #16
17c54     A7 FA 61 FC | 	wrlong	result1, fp
17c58     10 4E 85 F1 | 	sub	fp, #16
17c5c                 | LR__1931
17c5c     08 4E 05 F1 | 	add	fp, #8
17c60     A7 3A 68 FC | 	wrlong	#29, fp
17c64     08 4E 05 F1 | 	add	fp, #8
17c68     A7 12 02 FB | 	rdlong	arg01, fp
17c6c     10 4E 85 F1 | 	sub	fp, #16
17c70     A7 12 62 FC | 	wrlong	arg01, fp
17c74     A7 12 02 F6 | 	mov	arg01, fp
17c78     7C 2C BF FD | 	call	#_push
17c7c     A7 F0 03 F6 | 	mov	ptra, fp
17c80     B2 00 A0 FD | 	call	#popregs_
17c84                 | _do_dpeek_ret
17c84     2D 00 64 FD | 	ret
17c88                 | 
17c88                 | ' 
17c88                 | ' 
17c88                 | ' sub do_lpeek
17c88                 | _do_lpeek
17c88     00 4A 05 F6 | 	mov	COUNT_, #0
17c8c     A8 00 A0 FD | 	call	#pushregs_
17c90     14 F0 07 F1 | 	add	ptra, #20
17c94     C8 2B BF FD | 	call	#_pop
17c98     A7 FA 61 FC | 	wrlong	result1, fp
17c9c     04 4E 05 F1 | 	add	fp, #4
17ca0     A7 FC 61 FC | 	wrlong	result2, fp
17ca4     04 4E 05 F1 | 	add	fp, #4
17ca8     A7 FE 61 FC | 	wrlong	result3, fp
17cac     08 4E 85 F1 | 	sub	fp, #8
17cb0     A7 12 02 F6 | 	mov	arg01, fp
17cb4     5C B8 BF FD | 	call	#_converttoint
17cb8     0C 4E 05 F1 | 	add	fp, #12
17cbc     A7 FA 61 FC | 	wrlong	result1, fp
17cc0                 | ' t1=pop()
17cc0                 | ' a=converttoint(t1)
17cc0                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
17cc0     0C 4E 85 F1 | 	sub	fp, #12
17cc4     00 04 00 FF 
17cc8     00 FA 15 F2 | 	cmp	result1, ##524288 wc
17ccc     1C 00 90 3D |  if_ae	jmp	#LR__1940
17cd0     0C 4E 05 F1 | 	add	fp, #12
17cd4     A7 12 02 FB | 	rdlong	arg01, fp
17cd8     09 FB 01 FB | 	rdlong	result1, arg01
17cdc     04 4E 05 F1 | 	add	fp, #4
17ce0     A7 FA 61 FC | 	wrlong	result1, fp
17ce4     10 4E 85 F1 | 	sub	fp, #16
17ce8     1C 00 90 FD | 	jmp	#LR__1941
17cec                 | LR__1940
17cec     0C 4E 05 F1 | 	add	fp, #12
17cf0     A7 12 02 FB | 	rdlong	arg01, fp
17cf4     0C 4E 85 F1 | 	sub	fp, #12
17cf8     90 2C B0 FD | 	call	#_pslpeek
17cfc     10 4E 05 F1 | 	add	fp, #16
17d00     A7 FA 61 FC | 	wrlong	result1, fp
17d04     10 4E 85 F1 | 	sub	fp, #16
17d08                 | LR__1941
17d08     08 4E 05 F1 | 	add	fp, #8
17d0c     A7 3A 68 FC | 	wrlong	#29, fp
17d10     08 4E 05 F1 | 	add	fp, #8
17d14     A7 12 02 FB | 	rdlong	arg01, fp
17d18     10 4E 85 F1 | 	sub	fp, #16
17d1c     A7 12 62 FC | 	wrlong	arg01, fp
17d20     A7 12 02 F6 | 	mov	arg01, fp
17d24     D0 2B BF FD | 	call	#_push
17d28     A7 F0 03 F6 | 	mov	ptra, fp
17d2c     B2 00 A0 FD | 	call	#popregs_
17d30                 | _do_lpeek_ret
17d30     2D 00 64 FD | 	ret
17d34                 | 
17d34                 | ' 
17d34                 | ' sub do_fre
17d34                 | _do_fre
17d34     01 4A 05 F6 | 	mov	COUNT_, #1
17d38     A8 00 A0 FD | 	call	#pushregs_
17d3c     0C F0 07 F1 | 	add	ptra, #12
17d40     79 00 00 FF 
17d44     88 E5 05 F1 | 	add	objptr, ##62344
17d48     F2 12 02 FB | 	rdlong	arg01, objptr
17d4c     16 00 00 FF 
17d50     2C E5 85 F1 | 	sub	objptr, ##11564
17d54     F2 1E 02 FB | 	rdlong	local01, objptr
17d58     0F 13 82 F1 | 	sub	arg01, local01
17d5c     16 00 00 FF 
17d60     D4 E5 05 F1 | 	add	objptr, ##11732
17d64     F2 12 62 FC | 	wrlong	arg01, objptr
17d68     08 4E 05 F1 | 	add	fp, #8
17d6c     A7 3A 68 FC | 	wrlong	#29, fp
17d70     08 4E 85 F1 | 	sub	fp, #8
17d74     F2 1E 02 FB | 	rdlong	local01, objptr
17d78     7A 00 00 FF 
17d7c     30 E4 85 F1 | 	sub	objptr, ##62512
17d80     A7 1E 62 FC | 	wrlong	local01, fp
17d84     A7 12 02 F6 | 	mov	arg01, fp
17d88     6C 2B BF FD | 	call	#_push
17d8c     A7 F0 03 F6 | 	mov	ptra, fp
17d90     B2 00 A0 FD | 	call	#popregs_
17d94                 | _do_fre_ret
17d94     2D 00 64 FD | 	ret
17d98                 | 
17d98                 | ' 
17d98                 | ' sub do_adr
17d98                 | _do_adr
17d98                 | _do_adr_ret
17d98     2D 00 64 FD | 	ret
17d9c                 | 
17d9c                 | ' 
17d9c                 | ' sub do_getnotevalue
17d9c                 | _do_getnotevalue
17d9c     01 4A 05 F6 | 	mov	COUNT_, #1
17da0     A8 00 A0 FD | 	call	#pushregs_
17da4     1C F0 07 F1 | 	add	ptra, #28
17da8     B4 2A BF FD | 	call	#_pop
17dac     FF 14 02 F6 | 	mov	arg02, result3
17db0     10 4E 05 F1 | 	add	fp, #16
17db4     A7 FA 61 FC | 	wrlong	result1, fp
17db8     04 4E 05 F1 | 	add	fp, #4
17dbc     A7 FC 61 FC | 	wrlong	result2, fp
17dc0     04 4E 05 F1 | 	add	fp, #4
17dc4     A7 14 62 FC | 	wrlong	arg02, fp
17dc8     08 4E 85 F1 | 	sub	fp, #8
17dcc     A7 12 02 F6 | 	mov	arg01, fp
17dd0     10 4E 85 F1 | 	sub	fp, #16
17dd4     3C B7 BF FD | 	call	#_converttoint
17dd8     FD 14 52 F6 | 	abs	arg02, result1 wc
17ddc     0C 14 16 FD | 	qdiv	arg02, #12
17de0     0C 4E 05 F1 | 	add	fp, #12
17de4     A7 FA 61 FC | 	wrlong	result1, fp
17de8     34 00 00 FF 
17dec     D8 E4 05 F1 | 	add	objptr, ##26840
17df0     08 4E 85 F1 | 	sub	fp, #8
17df4     19 14 62 FD | 	getqy	arg02
17df8     0A 15 82 F6 | 	negc	arg02, arg02
17dfc     02 14 66 F0 | 	shl	arg02, #2
17e00     F2 14 02 F1 | 	add	arg02, objptr
17e04     0A 15 02 FB | 	rdlong	arg02, arg02
17e08     A7 14 62 FC | 	wrlong	arg02, fp
17e0c     08 4E 05 F1 | 	add	fp, #8
17e10     A7 14 02 FB | 	rdlong	arg02, fp
17e14     0A 15 52 F6 | 	abs	arg02, arg02 wc
17e18     0C 14 16 FD | 	qdiv	arg02, #12
17e1c     0C 4E 85 F1 | 	sub	fp, #12
17e20     34 00 00 FF 
17e24     D8 E4 85 F1 | 	sub	objptr, ##26840
17e28     18 14 62 FD | 	getqx	arg02
17e2c     0A 13 82 F6 | 	negc	arg01, arg02
17e30     09 13 52 F6 | 	abs	arg01, arg01 wc
17e34     1F 1E C6 C9 |  if_b	decod	local01, #31
17e38     00 1E 06 36 |  if_ae	mov	local01, #0
17e3c     B0 94 B0 FD | 	call	#__system___float_fromuns
17e40     0F FB 61 F5 | 	xor	result1, local01
17e44     08 4E 05 F1 | 	add	fp, #8
17e48     A7 FA 61 FC | 	wrlong	result1, fp
17e4c     FD 14 02 F6 | 	mov	arg02, result1
17e50     08 4E 85 F1 | 	sub	fp, #8
17e54     1E 12 C6 F9 | 	decod	arg01, #30
17e58     7C A7 B0 FD | 	call	#__system____builtin_powf
17e5c     FD 12 02 F6 | 	mov	arg01, result1
17e60     04 4E 05 F1 | 	add	fp, #4
17e64     A7 14 02 FB | 	rdlong	arg02, fp
17e68     04 4E 85 F1 | 	sub	fp, #4
17e6c     84 98 B0 FD | 	call	#__system___float_mul
17e70     A7 FA 61 FC | 	wrlong	result1, fp
17e74     10 4E 05 F1 | 	add	fp, #16
17e78     A7 FA 61 FC | 	wrlong	result1, fp
17e7c     08 4E 05 F1 | 	add	fp, #8
17e80     A7 3C 68 FC | 	wrlong	#30, fp
17e84     08 4E 85 F1 | 	sub	fp, #8
17e88     A7 12 02 F6 | 	mov	arg01, fp
17e8c     10 4E 85 F1 | 	sub	fp, #16
17e90     64 2A BF FD | 	call	#_push
17e94     A7 F0 03 F6 | 	mov	ptra, fp
17e98     B2 00 A0 FD | 	call	#popregs_
17e9c                 | _do_getnotevalue_ret
17e9c     2D 00 64 FD | 	ret
17ea0                 | 
17ea0                 | ' 
17ea0                 | ' 
17ea0                 | ' sub do_waitms
17ea0                 | _do_waitms
17ea0     01 4A 05 F6 | 	mov	COUNT_, #1
17ea4     A8 00 A0 FD | 	call	#pushregs_
17ea8     18 F0 07 F1 | 	add	ptra, #24
17eac     B0 29 BF FD | 	call	#_pop
17eb0     A7 FA 61 FC | 	wrlong	result1, fp
17eb4     04 4E 05 F1 | 	add	fp, #4
17eb8     A7 FC 61 FC | 	wrlong	result2, fp
17ebc     04 4E 05 F1 | 	add	fp, #4
17ec0     A7 FE 61 FC | 	wrlong	result3, fp
17ec4                 | ' 
17ec4                 | ' t1=pop() 'value
17ec4                 | ' 
17ec4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
17ec4     08 4E 85 F1 | 	sub	fp, #8
17ec8     1C FE 0D F2 | 	cmp	result3, #28 wz
17ecc     08 4E 05 51 |  if_ne	add	fp, #8
17ed0     A7 12 02 5B |  if_ne	rdlong	arg01, fp
17ed4     08 4E 85 51 |  if_ne	sub	fp, #8
17ed8     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
17edc     A7 12 02 AB |  if_e	rdlong	arg01, fp
17ee0     0C 4E 05 A1 |  if_e	add	fp, #12
17ee4     A7 12 62 AC |  if_e	wrlong	arg01, fp
17ee8     0C 4E 85 A1 |  if_e	sub	fp, #12
17eec     14 00 90 AD |  if_e	jmp	#LR__1950
17ef0     A7 12 02 F6 | 	mov	arg01, fp
17ef4     1C B6 BF FD | 	call	#_converttoint
17ef8     0C 4E 05 F1 | 	add	fp, #12
17efc     A7 FA 61 FC | 	wrlong	result1, fp
17f00     0C 4E 85 F1 | 	sub	fp, #12
17f04                 | LR__1950
17f04                 | ' if t<0 then return
17f04     0C 4E 05 F1 | 	add	fp, #12
17f08     A7 12 02 FB | 	rdlong	arg01, fp
17f0c     0C 4E 85 F1 | 	sub	fp, #12
17f10     00 12 56 F2 | 	cmps	arg01, #0 wc
17f14     B8 00 90 CD |  if_b	jmp	#LR__1955
17f18                 | ' if t < 5000 then 
17f18     0C 4E 05 F1 | 	add	fp, #12
17f1c     A7 12 02 FB | 	rdlong	arg01, fp
17f20     0C 4E 85 F1 | 	sub	fp, #12
17f24     09 00 00 FF 
17f28     88 13 56 F2 | 	cmps	arg01, ##5000 wc
17f2c     14 00 90 3D |  if_ae	jmp	#LR__1951
17f30     0C 4E 05 F1 | 	add	fp, #12
17f34     A7 12 02 FB | 	rdlong	arg01, fp
17f38     0C 4E 85 F1 | 	sub	fp, #12
17f3c     28 6F B0 FD | 	call	#__system___waitms
17f40     8C 00 90 FD | 	jmp	#LR__1954
17f44                 | LR__1951
17f44     10 4E 05 F1 | 	add	fp, #16
17f48     A7 02 68 FC | 	wrlong	#1, fp
17f4c     04 4E 85 F1 | 	sub	fp, #4
17f50     A7 12 02 FB | 	rdlong	arg01, fp
17f54     09 13 52 F6 | 	abs	arg01, arg01 wc
17f58     09 00 00 FF 
17f5c     88 13 16 FD | 	qdiv	arg01, ##5000
17f60                 | '   for i=1 to t/5000
17f60     0C 4E 85 F1 | 	sub	fp, #12
17f64     18 1E 62 FD | 	getqx	local01
17f68     0F 1F 82 F6 | 	negc	local01, local01
17f6c     01 1E 06 F1 | 	add	local01, #1
17f70                 | LR__1952
17f70     10 4E 05 F1 | 	add	fp, #16
17f74     A7 12 02 FB | 	rdlong	arg01, fp
17f78     10 4E 85 F1 | 	sub	fp, #16
17f7c     0F 13 52 F2 | 	cmps	arg01, local01 wc
17f80     28 00 90 3D |  if_ae	jmp	#LR__1953
17f84     0C 4E 05 F1 | 	add	fp, #12
17f88     A7 12 02 FB | 	rdlong	arg01, fp
17f8c     0C 4E 85 F1 | 	sub	fp, #12
17f90     D4 6E B0 FD | 	call	#__system___waitms
17f94     10 4E 05 F1 | 	add	fp, #16
17f98     A7 12 02 FB | 	rdlong	arg01, fp
17f9c     01 12 06 F1 | 	add	arg01, #1
17fa0     A7 12 62 FC | 	wrlong	arg01, fp
17fa4     10 4E 85 F1 | 	sub	fp, #16
17fa8     C4 FF 9F FD | 	jmp	#LR__1952
17fac                 | LR__1953
17fac     0C 4E 05 F1 | 	add	fp, #12
17fb0     A7 1E 02 FB | 	rdlong	local01, fp
17fb4     0F 1F 52 F6 | 	abs	local01, local01 wc
17fb8     09 00 00 FF 
17fbc     88 1F 16 FD | 	qdiv	local01, ##5000
17fc0     0C 4E 85 F1 | 	sub	fp, #12
17fc4     19 1E 62 FD | 	getqy	local01
17fc8     0F 13 82 F6 | 	negc	arg01, local01
17fcc     98 6E B0 FD | 	call	#__system___waitms
17fd0                 | LR__1954
17fd0                 | LR__1955
17fd0     A7 F0 03 F6 | 	mov	ptra, fp
17fd4     B2 00 A0 FD | 	call	#popregs_
17fd8                 | _do_waitms_ret
17fd8     2D 00 64 FD | 	ret
17fdc                 | 
17fdc                 | ' 
17fdc                 | ' sub do_waitvbl
17fdc                 | _do_waitvbl
17fdc     01 12 06 F6 | 	mov	arg01, #1
17fe0     94 54 B0 FD | 	call	#_hg010b_spin2_waitvbl
17fe4                 | _do_waitvbl_ret
17fe4     2D 00 64 FD | 	ret
17fe8                 | 
17fe8                 | ' 
17fe8                 | ' sub do_waitclock
17fe8                 | _do_waitclock
17fe8     79 00 00 FF 
17fec     84 E5 05 F1 | 	add	objptr, ##62340
17ff0     F2 00 02 FB | 	rdlong	_var01, objptr
17ff4                 | ' c=hkcnt
17ff4                 | ' do: loop until hkcnt<>c
17ff4                 | LR__1960
17ff4     F2 02 02 FB | 	rdlong	_var02, objptr
17ff8     00 03 0A F2 | 	cmp	_var02, _var01 wz
17ffc     F4 FF 9F AD |  if_e	jmp	#LR__1960
18000     79 00 00 FF 
18004     84 E5 85 F1 | 	sub	objptr, ##62340
18008                 | _do_waitclock_ret
18008     2D 00 64 FD | 	ret
1800c                 | 
1800c                 | ' 
1800c                 | ' sub do_dir
1800c                 | _do_dir
1800c     05 4A 05 F6 | 	mov	COUNT_, #5
18010     A8 00 A0 FD | 	call	#pushregs_
18014     74 01 00 FF 
18018     B9 12 06 F6 | 	mov	arg01, ##@LR__5185
1801c     E0 71 B0 FD | 	call	#__system___chdir
18020                 | ' chdir("/sd/bas")       ' set working directory
18020                 | ' print "Working directory: "; currentdir$ 
18020     00 12 06 F6 | 	mov	arg01, #0
18024     E4 C4 B0 FD | 	call	#__system___getiolock_0484
18028     FD 12 02 F6 | 	mov	arg01, result1
1802c     44 6B B0 FD | 	call	#__system___lockmem
18030     74 01 00 FF 
18034     C1 14 06 F6 | 	mov	arg02, ##@LR__5186
18038     00 12 06 F6 | 	mov	arg01, #0
1803c     00 16 06 F6 | 	mov	arg03, #0
18040     38 78 B0 FD | 	call	#__system___basic_print_string
18044     72 00 00 FF 
18048     98 E4 05 F1 | 	add	objptr, ##58520
1804c     F2 14 02 FB | 	rdlong	arg02, objptr
18050     72 00 00 FF 
18054     98 E4 85 F1 | 	sub	objptr, ##58520
18058     00 12 06 F6 | 	mov	arg01, #0
1805c     00 16 06 F6 | 	mov	arg03, #0
18060     18 78 B0 FD | 	call	#__system___basic_print_string
18064     00 12 06 F6 | 	mov	arg01, #0
18068     0A 14 06 F6 | 	mov	arg02, #10
1806c     00 16 06 F6 | 	mov	arg03, #0
18070     B0 77 B0 FD | 	call	#__system___basic_print_char
18074     00 12 06 F6 | 	mov	arg01, #0
18078     90 C4 B0 FD | 	call	#__system___getiolock_0484
1807c     FD 00 68 FC | 	wrlong	#0, result1
18080     00 1E 06 F6 | 	mov	local01, #0
18084     74 01 00 FF 
18088     D5 12 06 F6 | 	mov	arg01, ##@LR__5187
1808c     10 14 06 F6 | 	mov	arg02, #16
18090     B0 C5 B0 FD | 	call	#__system___basic_dir
18094     FD 20 02 F6 | 	mov	local02, result1
18098                 | ' px=0:
18098                 | ' filename=dir$("*", fbDirectory)
18098                 | ' while filename <> "" and filename <> nil
18098                 | LR__1970
18098     00 22 06 F6 | 	mov	local03, #0
1809c     74 01 00 FF 
180a0     D7 14 06 F6 | 	mov	arg02, ##@LR__5188
180a4     10 13 02 F6 | 	mov	arg01, local02
180a8     F0 6A B0 FD | 	call	#__system___string_cmp
180ac     00 FA 0D F2 | 	cmp	result1, #0 wz
180b0     00 22 26 56 |  if_ne	not	local03, #0
180b4     00 24 06 F6 | 	mov	local04, #0
180b8     10 13 02 F6 | 	mov	arg01, local02
180bc     00 14 06 F6 | 	mov	arg02, #0
180c0     D8 6A B0 FD | 	call	#__system___string_cmp
180c4     00 FA 0D F2 | 	cmp	result1, #0 wz
180c8     00 24 26 56 |  if_ne	not	local04, #0
180cc     12 23 CA F7 | 	test	local03, local04 wz
180d0     9C 00 90 AD |  if_e	jmp	#LR__1972
180d4                 | '   print "[dir] ";filename; : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
180d4     00 12 06 F6 | 	mov	arg01, #0
180d8     30 C4 B0 FD | 	call	#__system___getiolock_0484
180dc     FD 12 02 F6 | 	mov	arg01, result1
180e0     90 6A B0 FD | 	call	#__system___lockmem
180e4     74 01 00 FF 
180e8     D8 14 06 F6 | 	mov	arg02, ##@LR__5189
180ec     00 12 06 F6 | 	mov	arg01, #0
180f0     00 16 06 F6 | 	mov	arg03, #0
180f4     84 77 B0 FD | 	call	#__system___basic_print_string
180f8     00 26 06 F6 | 	mov	local05, #0
180fc     00 12 06 F6 | 	mov	arg01, #0
18100     10 15 02 F6 | 	mov	arg02, local02
18104     00 16 06 F6 | 	mov	arg03, #0
18108     70 77 B0 FD | 	call	#__system___basic_print_string
1810c     00 12 06 F6 | 	mov	arg01, #0
18110     F8 C3 B0 FD | 	call	#__system___getiolock_0484
18114     FD 00 68 FC | 	wrlong	#0, result1
18118     40 1E 06 F1 | 	add	local01, #64
1811c     0F 13 02 F6 | 	mov	arg01, local01
18120     F0 52 B0 FD | 	call	#_hg010b_spin2_setcursorx
18124     00 1F 56 F2 | 	cmps	local01, #256 wc
18128     30 00 90 CD |  if_b	jmp	#LR__1971
1812c     00 1E 06 F6 | 	mov	local01, #0
18130     00 12 06 F6 | 	mov	arg01, #0
18134     D4 C3 B0 FD | 	call	#__system___getiolock_0484
18138     FD 12 02 F6 | 	mov	arg01, result1
1813c     34 6A B0 FD | 	call	#__system___lockmem
18140     00 12 06 F6 | 	mov	arg01, #0
18144     0A 14 06 F6 | 	mov	arg02, #10
18148     00 16 06 F6 | 	mov	arg03, #0
1814c     D4 76 B0 FD | 	call	#__system___basic_print_char
18150     00 12 06 F6 | 	mov	arg01, #0
18154     B4 C3 B0 FD | 	call	#__system___getiolock_0484
18158     FD 00 68 FC | 	wrlong	#0, result1
1815c                 | LR__1971
1815c     00 12 06 F6 | 	mov	arg01, #0
18160     00 14 06 F6 | 	mov	arg02, #0
18164     DC C4 B0 FD | 	call	#__system___basic_dir
18168     FD 20 02 F6 | 	mov	local02, result1
1816c     28 FF 9F FD | 	jmp	#LR__1970
18170                 | LR__1972
18170                 | ' print
18170     00 12 06 F6 | 	mov	arg01, #0
18174     94 C3 B0 FD | 	call	#__system___getiolock_0484
18178     FD 12 02 F6 | 	mov	arg01, result1
1817c     F4 69 B0 FD | 	call	#__system___lockmem
18180     00 12 06 F6 | 	mov	arg01, #0
18184     0A 14 06 F6 | 	mov	arg02, #10
18188     00 16 06 F6 | 	mov	arg03, #0
1818c     94 76 B0 FD | 	call	#__system___basic_print_char
18190     00 12 06 F6 | 	mov	arg01, #0
18194     74 C3 B0 FD | 	call	#__system___getiolock_0484
18198     FD 00 68 FC | 	wrlong	#0, result1
1819c     00 1E 06 F6 | 	mov	local01, #0
181a0                 | ' return cursor_y
181a0     74 01 00 FF 
181a4     DF 12 06 F6 | 	mov	arg01, ##@LR__5190
181a8     21 14 06 F6 | 	mov	arg02, #33
181ac     94 C4 B0 FD | 	call	#__system___basic_dir
181b0     FD 20 02 F6 | 	mov	local02, result1
181b4                 | ' px=0: py=v.getcursory()
181b4                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
181b4                 | ' do while filename <> "" and filename <> nil
181b4                 | LR__1973
181b4     00 22 06 F6 | 	mov	local03, #0
181b8     74 01 00 FF 
181bc     E1 14 06 F6 | 	mov	arg02, ##@LR__5191
181c0     10 13 02 F6 | 	mov	arg01, local02
181c4     D4 69 B0 FD | 	call	#__system___string_cmp
181c8     00 FA 0D F2 | 	cmp	result1, #0 wz
181cc     00 22 26 56 |  if_ne	not	local03, #0
181d0     00 24 06 F6 | 	mov	local04, #0
181d4     10 13 02 F6 | 	mov	arg01, local02
181d8     00 14 06 F6 | 	mov	arg02, #0
181dc     BC 69 B0 FD | 	call	#__system___string_cmp
181e0     00 FA 0D F2 | 	cmp	result1, #0 wz
181e4     00 24 26 56 |  if_ne	not	local04, #0
181e8     12 23 CA F7 | 	test	local03, local04 wz
181ec     80 01 90 AD |  if_e	jmp	#LR__1978
181f0                 | '   print filename; : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
181f0     00 12 06 F6 | 	mov	arg01, #0
181f4     14 C3 B0 FD | 	call	#__system___getiolock_0484
181f8     FD 12 02 F6 | 	mov	arg01, result1
181fc     74 69 B0 FD | 	call	#__system___lockmem
18200     00 12 06 F6 | 	mov	arg01, #0
18204     10 15 02 F6 | 	mov	arg02, local02
18208     00 16 06 F6 | 	mov	arg03, #0
1820c     6C 76 B0 FD | 	call	#__system___basic_print_string
18210     00 12 06 F6 | 	mov	arg01, #0
18214     F4 C2 B0 FD | 	call	#__system___getiolock_0484
18218     FD 00 68 FC | 	wrlong	#0, result1
1821c     40 1E 06 F1 | 	add	local01, #64
18220     0F 13 02 F6 | 	mov	arg01, local01
18224     EC 51 B0 FD | 	call	#_hg010b_spin2_setcursorx
18228     00 1F 56 F2 | 	cmps	local01, #256 wc
1822c     30 00 90 CD |  if_b	jmp	#LR__1974
18230     00 1E 06 F6 | 	mov	local01, #0
18234     00 12 06 F6 | 	mov	arg01, #0
18238     D0 C2 B0 FD | 	call	#__system___getiolock_0484
1823c     FD 12 02 F6 | 	mov	arg01, result1
18240     30 69 B0 FD | 	call	#__system___lockmem
18244     00 12 06 F6 | 	mov	arg01, #0
18248     0A 14 06 F6 | 	mov	arg02, #10
1824c     00 16 06 F6 | 	mov	arg03, #0
18250     D0 75 B0 FD | 	call	#__system___basic_print_char
18254     00 12 06 F6 | 	mov	arg01, #0
18258     B0 C2 B0 FD | 	call	#__system___getiolock_0484
1825c     FD 00 68 FC | 	wrlong	#0, result1
18260                 | LR__1974
18260     00 12 06 F6 | 	mov	arg01, #0
18264     00 14 06 F6 | 	mov	arg02, #0
18268     D8 C3 B0 FD | 	call	#__system___basic_dir
1826c     FD 20 02 F6 | 	mov	local02, result1
18270                 | '   filename = dir$()      ' continue scan
18270                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
18270                 | ' return cursor_y
18270     3E E4 05 F1 | 	add	objptr, #62
18274     F2 FA C1 FA | 	rdbyte	result1, objptr
18278     3E E4 85 F1 | 	sub	objptr, #62
1827c     22 FA 0D F2 | 	cmp	result1, #34 wz
18280     30 FF 9F 5D |  if_ne	jmp	#LR__1973
18284                 | '     print "-----more, press any key";
18284     00 12 06 F6 | 	mov	arg01, #0
18288     80 C2 B0 FD | 	call	#__system___getiolock_0484
1828c     FD 12 02 F6 | 	mov	arg01, result1
18290     E0 68 B0 FD | 	call	#__system___lockmem
18294     74 01 00 FF 
18298     E2 14 06 F6 | 	mov	arg02, ##@LR__5192
1829c     00 12 06 F6 | 	mov	arg01, #0
182a0     00 16 06 F6 | 	mov	arg03, #0
182a4     D4 75 B0 FD | 	call	#__system___basic_print_string
182a8     00 12 06 F6 | 	mov	arg01, #0
182ac     5C C2 B0 FD | 	call	#__system___getiolock_0484
182b0     FD 00 68 FC | 	wrlong	#0, result1
182b4                 | '     do 
182b4                 | LR__1975
182b4     C4 60 B0 FD | 	call	#_usbnew_spin2_get_key
182b8     00 FA 0D F2 | 	cmp	result1, #0 wz
182bc     F4 FF 9F 5D |  if_ne	jmp	#LR__1975
182c0                 | '     do
182c0                 | LR__1976
182c0     B8 60 B0 FD | 	call	#_usbnew_spin2_get_key
182c4     00 FA 0D F2 | 	cmp	result1, #0 wz
182c8     F4 FF 9F AD |  if_e	jmp	#LR__1976
182cc                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
182cc     78 00 00 FF 
182d0     F0 E4 05 F1 | 	add	objptr, ##61680
182d4     F2 22 02 FB | 	rdlong	local03, objptr
182d8     78 00 00 FF 
182dc     F0 E4 85 F1 | 	sub	objptr, ##61680
182e0     01 22 0E F2 | 	cmp	local03, #1 wz
182e4     3C 00 90 5D |  if_ne	jmp	#LR__1977
182e8     79 00 00 FF 
182ec     94 E5 05 F1 | 	add	objptr, ##62356
182f0     F2 14 02 FB | 	rdlong	arg02, objptr
182f4     04 E4 85 F1 | 	sub	objptr, #4
182f8     F2 1A 02 FB | 	rdlong	arg05, objptr
182fc     07 12 06 F6 | 	mov	arg01, #7
18300     56 00 00 FF 
18304     44 16 06 F6 | 	mov	arg03, ##44100
18308     0C 18 C6 F9 | 	decod	arg04, #12
1830c     01 1C 66 F6 | 	neg	arg06, #1
18310     6E 00 00 FF 
18314     C4 E4 85 F1 | 	sub	objptr, ##56516
18318     E8 63 B0 FD | 	call	#_audio096_spin2_play
1831c     0B 00 00 FF 
18320     CC E4 85 F1 | 	sub	objptr, ##5836
18324                 | LR__1977
18324     00 12 06 F6 | 	mov	arg01, #0
18328     23 14 06 F6 | 	mov	arg02, #35
1832c     A8 50 B0 FD | 	call	#_hg010b_spin2_setcursorpos
18330                 | '     position 0,35: print "                             ";: position 4,35  
18330     00 12 06 F6 | 	mov	arg01, #0
18334     D4 C1 B0 FD | 	call	#__system___getiolock_0484
18338     FD 12 02 F6 | 	mov	arg01, result1
1833c     34 68 B0 FD | 	call	#__system___lockmem
18340     74 01 00 FF 
18344     FB 14 06 F6 | 	mov	arg02, ##@LR__5193
18348     00 12 06 F6 | 	mov	arg01, #0
1834c     00 16 06 F6 | 	mov	arg03, #0
18350     28 75 B0 FD | 	call	#__system___basic_print_string
18354     00 12 06 F6 | 	mov	arg01, #0
18358     B0 C1 B0 FD | 	call	#__system___getiolock_0484
1835c     FD 00 68 FC | 	wrlong	#0, result1
18360     04 12 06 F6 | 	mov	arg01, #4
18364     23 14 06 F6 | 	mov	arg02, #35
18368     6C 50 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1836c     44 FE 9F FD | 	jmp	#LR__1973
18370                 | LR__1978
18370     A7 F0 03 F6 | 	mov	ptra, fp
18374     B2 00 A0 FD | 	call	#popregs_
18378                 | _do_dir_ret
18378     2D 00 64 FD | 	ret
1837c                 | 
1837c                 | ' 
1837c                 | ' sub do_if
1837c                 | _do_if
1837c     05 4A 05 F6 | 	mov	COUNT_, #5
18380     A8 00 A0 FD | 	call	#pushregs_
18384     D8 24 BF FD | 	call	#_pop
18388     FD 1E 0A F6 | 	mov	local01, result1 wz
1838c     FE 20 02 F6 | 	mov	local02, result2
18390     FF 22 02 F6 | 	mov	local03, result3
18394                 | ' t1=pop()
18394                 | ' ' if uresult=0, jump over else
18394                 | ' if t1.result.uresult = 0 then 
18394     BC 00 90 5D |  if_ne	jmp	#LR__1982
18398                 | '   for i=lineptr_e to lineptr-1
18398     6A 00 00 FF 
1839c     80 E4 05 F1 | 	add	objptr, ##54400
183a0     F2 24 02 FB | 	rdlong	local04, objptr
183a4     04 E4 85 F1 | 	sub	objptr, #4
183a8     F2 26 02 FB | 	rdlong	local05, objptr
183ac     6A 00 00 FF 
183b0     7C E4 85 F1 | 	sub	objptr, ##54396
183b4                 | LR__1980
183b4     13 25 52 F2 | 	cmps	local04, local05 wc
183b8     78 00 90 3D |  if_ae	jmp	#LR__1981
183bc     12 FF 01 F6 | 	mov	result3, local04
183c0     01 FE 65 F0 | 	shl	result3, #1
183c4     12 FF 01 F1 | 	add	result3, local04
183c8     02 FE 65 F0 | 	shl	result3, #2
183cc     67 00 00 FF 
183d0     7C E4 05 F1 | 	add	objptr, ##52860
183d4     F2 FE 01 F1 | 	add	result3, objptr
183d8     FF 1E 02 FB | 	rdlong	local01, result3
183dc     04 FE 05 F1 | 	add	result3, #4
183e0     FF FC 01 FB | 	rdlong	result2, result3
183e4     12 FF 01 F6 | 	mov	result3, local04
183e8     01 FE 65 F0 | 	shl	result3, #1
183ec     12 FF 01 F1 | 	add	result3, local04
183f0     02 FE 65 F0 | 	shl	result3, #2
183f4     F2 FE 01 F1 | 	add	result3, objptr
183f8     08 FE 05 F1 | 	add	result3, #8
183fc     FF FE 01 FB | 	rdlong	result3, result3
18400     FE 20 02 F6 | 	mov	local02, result2
18404     FF 22 02 F6 | 	mov	local03, result3
18408                 | '     t1=compiledline(i)
18408                 | '     if t1.result_type=token_else then lineptr_e=i : return
18408     5A 22 0E F2 | 	cmp	local03, #90 wz
1840c     67 00 00 FF 
18410     7C E4 85 F1 | 	sub	objptr, ##52860
18414     6A 00 00 AF 
18418     80 E4 05 A1 |  if_e	add	objptr, ##54400
1841c     F2 24 62 AC |  if_e	wrlong	local04, objptr
18420     6A 00 00 AF 
18424     80 E4 85 A1 |  if_e	sub	objptr, ##54400
18428     28 00 90 AD |  if_e	jmp	#LR__1983
1842c     01 24 06 F1 | 	add	local04, #1
18430     80 FF 9F FD | 	jmp	#LR__1980
18434                 | LR__1981
18434     6A 00 00 FF 
18438     7C E4 05 F1 | 	add	objptr, ##54396
1843c     F2 26 02 FB | 	rdlong	local05, objptr
18440     01 26 86 F1 | 	sub	local05, #1
18444     04 E4 05 F1 | 	add	objptr, #4
18448     F2 26 62 FC | 	wrlong	local05, objptr
1844c     6A 00 00 FF 
18450     80 E4 85 F1 | 	sub	objptr, ##54400
18454                 | LR__1982
18454                 | LR__1983
18454     A7 F0 03 F6 | 	mov	ptra, fp
18458     B2 00 A0 FD | 	call	#popregs_
1845c                 | _do_if_ret
1845c     2D 00 64 FD | 	ret
18460                 | 
18460                 | ' 
18460                 | ' sub do_else
18460                 | _do_else
18460     6A 00 00 FF 
18464     7C E4 05 F1 | 	add	objptr, ##54396
18468     F2 00 02 FB | 	rdlong	_var01, objptr
1846c     01 00 86 F1 | 	sub	_var01, #1
18470     04 E4 05 F1 | 	add	objptr, #4
18474     F2 00 62 FC | 	wrlong	_var01, objptr
18478     6A 00 00 FF 
1847c     80 E4 85 F1 | 	sub	objptr, ##54400
18480                 | _do_else_ret
18480     2D 00 64 FD | 	ret
18484                 | 
18484                 | ' 
18484                 | ' sub do_rad
18484                 | _do_rad
18484     79 00 00 FF 
18488     98 E5 05 F1 | 	add	objptr, ##62360
1848c     00 C0 9F FF 
18490     F2 00 68 FC | 	wrlong	##1065353216, objptr
18494     04 E4 05 F1 | 	add	objptr, #4
18498     00 C0 9F FF 
1849c     F2 00 68 FC | 	wrlong	##1065353216, objptr
184a0     79 00 00 FF 
184a4     9C E5 85 F1 | 	sub	objptr, ##62364
184a8                 | _do_rad_ret
184a8     2D 00 64 FD | 	ret
184ac                 | 
184ac                 | ' 
184ac                 | ' sub do_deg
184ac                 | _do_deg
184ac     79 00 00 FF 
184b0     98 E5 05 F1 | 	add	objptr, ##62360
184b4     7D 47 9E FF 
184b8     F2 6A 68 FC | 	wrlong	##1016003125, objptr
184bc     04 E4 05 F1 | 	add	objptr, #4
184c0     97 32 A1 FF 
184c4     F2 C2 69 FC | 	wrlong	##1113927393, objptr
184c8     79 00 00 FF 
184cc     9C E5 85 F1 | 	sub	objptr, ##62364
184d0                 | _do_deg_ret
184d0     2D 00 64 FD | 	ret
184d4                 | 
184d4                 | ' 
184d4                 | ' sub do_int
184d4                 | _do_int
184d4     00 4A 05 F6 | 	mov	COUNT_, #0
184d8     A8 00 A0 FD | 	call	#pushregs_
184dc     0C F0 07 F1 | 	add	ptra, #12
184e0     7C 23 BF FD | 	call	#_pop
184e4     A7 FA 61 FC | 	wrlong	result1, fp
184e8     04 4E 05 F1 | 	add	fp, #4
184ec     A7 FC 61 FC | 	wrlong	result2, fp
184f0     04 4E 05 F1 | 	add	fp, #4
184f4     A7 FE 61 FC | 	wrlong	result3, fp
184f8     08 4E 85 F1 | 	sub	fp, #8
184fc     A7 12 02 F6 | 	mov	arg01, fp
18500     10 B0 BF FD | 	call	#_converttoint
18504     A7 FA 61 FC | 	wrlong	result1, fp
18508     08 4E 05 F1 | 	add	fp, #8
1850c     A7 38 68 FC | 	wrlong	#28, fp
18510     08 4E 85 F1 | 	sub	fp, #8
18514     A7 12 02 F6 | 	mov	arg01, fp
18518     DC 23 BF FD | 	call	#_push
1851c     A7 F0 03 F6 | 	mov	ptra, fp
18520     B2 00 A0 FD | 	call	#popregs_
18524                 | _do_int_ret
18524     2D 00 64 FD | 	ret
18528                 | 
18528                 | ' 
18528                 | ' sub do_nothing
18528                 | _do_nothing
18528                 | _do_nothing_ret
18528     2D 00 64 FD | 	ret
1852c                 | 
1852c                 | ' 
1852c                 | ' sub do_brun
1852c                 | _do_brun
1852c     08 4A 05 F6 | 	mov	COUNT_, #8
18530     A8 00 A0 FD | 	call	#pushregs_
18534     28 23 BF FD | 	call	#_pop
18538     FE 1A 02 F6 | 	mov	arg05, result2
1853c     FF 18 02 F6 | 	mov	arg04, result3
18540     FD 1E 02 F6 | 	mov	local01, result1
18544     0D 21 02 F6 | 	mov	local02, arg05
18548     0C 23 02 F6 | 	mov	local03, arg04
1854c                 | ' 
1854c                 | ' t1=pop() 
1854c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1854c     2B 22 0E F2 | 	cmp	local03, #43 wz
18550     10 00 90 5D |  if_ne	jmp	#LR__1990
18554     0F 13 02 F6 | 	mov	arg01, local01
18558     94 67 BF FD | 	call	#_convertstring
1855c     FD 1E 02 F6 | 	mov	local01, result1
18560     1F 22 06 F6 | 	mov	local03, #31
18564                 | LR__1990
18564                 | ' if t1.result_type=result_string then
18564     1F 22 0E F2 | 	cmp	local03, #31 wz
18568     EC 01 90 5D |  if_ne	jmp	#LR__1994
1856c     0F 25 02 F6 | 	mov	local04, local01
18570                 | '   filename=t1.result.sresult
18570                 | '   if left$(filename,1)="/" then 
18570     12 13 02 F6 | 	mov	arg01, local04
18574     01 14 06 F6 | 	mov	arg02, #1
18578     40 86 B0 FD | 	call	#__system__Left_S
1857c     FD 12 02 F6 | 	mov	arg01, result1
18580     74 01 00 FF 
18584     19 15 06 F6 | 	mov	arg02, ##@LR__5194
18588     10 66 B0 FD | 	call	#__system___string_cmp
1858c     00 FA 0D F2 | 	cmp	result1, #0 wz
18590     12 27 02 A6 |  if_e	mov	local05, local04
18594     14 00 90 AD |  if_e	jmp	#LR__1991
18598     74 01 00 FF 
1859c     1B 13 06 F6 | 	mov	arg01, ##@LR__5195
185a0     12 15 02 F6 | 	mov	arg02, local04
185a4     28 66 B0 FD | 	call	#__system___string_concat
185a8     FD 26 02 F6 | 	mov	local05, result1
185ac                 | LR__1991
185ac                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
185ac                 | '   open fullfilename for input as #9
185ac     09 12 06 F6 | 	mov	arg01, #9
185b0     13 15 02 F6 | 	mov	arg02, local05
185b4     00 16 06 F6 | 	mov	arg03, #0
185b8     BC 71 B0 FD | 	call	#__system___basic_open_string
185bc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
185c0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
185c4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
185c8     FD 28 0A F6 | 	mov	local06, result1 wz
185cc                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
185cc     8C 00 90 AD |  if_e	jmp	#LR__1992
185d0     00 12 06 F6 | 	mov	arg01, #0
185d4     34 BF B0 FD | 	call	#__system___getiolock_0484
185d8     FD 12 02 F6 | 	mov	arg01, result1
185dc     94 65 B0 FD | 	call	#__system___lockmem
185e0     74 01 00 FF 
185e4     24 15 06 F6 | 	mov	arg02, ##@LR__5196
185e8     00 12 06 F6 | 	mov	arg01, #0
185ec     00 16 06 F6 | 	mov	arg03, #0
185f0     88 72 B0 FD | 	call	#__system___basic_print_string
185f4     00 12 06 F6 | 	mov	arg01, #0
185f8     14 15 02 F6 | 	mov	arg02, local06
185fc     00 16 06 F6 | 	mov	arg03, #0
18600     0A 18 06 F6 | 	mov	arg04, #10
18604     B8 72 B0 FD | 	call	#__system___basic_print_integer
18608     74 01 00 FF 
1860c     32 15 06 F6 | 	mov	arg02, ##@LR__5197
18610     00 12 06 F6 | 	mov	arg01, #0
18614     00 16 06 F6 | 	mov	arg03, #0
18618     60 72 B0 FD | 	call	#__system___basic_print_string
1861c     14 13 02 F6 | 	mov	arg01, local06
18620     E4 8B B0 FD | 	call	#__system___strerror
18624     FD 14 02 F6 | 	mov	arg02, result1
18628     00 12 06 F6 | 	mov	arg01, #0
1862c     00 16 06 F6 | 	mov	arg03, #0
18630     48 72 B0 FD | 	call	#__system___basic_print_string
18634     00 12 06 F6 | 	mov	arg01, #0
18638     0A 14 06 F6 | 	mov	arg02, #10
1863c     00 16 06 F6 | 	mov	arg03, #0
18640     E0 71 B0 FD | 	call	#__system___basic_print_char
18644     00 12 06 F6 | 	mov	arg01, #0
18648     C0 BE B0 FD | 	call	#__system___getiolock_0484
1864c     FD 00 68 FC | 	wrlong	#0, result1
18650     09 12 06 F6 | 	mov	arg01, #9
18654     E4 B4 B0 FD | 	call	#__system__close
18658     FC 00 90 FD | 	jmp	#LR__1995
1865c                 | LR__1992
1865c     01 2A 06 F6 | 	mov	local07, #1
18660     00 2C 06 F6 | 	mov	local08, #0
18664                 | '   do
18664                 | LR__1993
18664                 | '     get #9,pos,block(0),1024,r : pos+=r	
18664     76 00 00 FF 
18668     B8 E4 05 F1 | 	add	objptr, ##60600
1866c     F2 16 02 F6 | 	mov	arg03, objptr
18670     76 00 00 FF 
18674     B8 E4 85 F1 | 	sub	objptr, ##60600
18678     09 12 06 F6 | 	mov	arg01, #9
1867c     15 15 02 F6 | 	mov	arg02, local07
18680     0A 18 C6 F9 | 	decod	arg04, #10
18684     01 1A 06 F6 | 	mov	arg05, #1
18688     00 73 B0 FD | 	call	#__system___basic_get
1868c     FD 28 02 F6 | 	mov	local06, result1
18690     FD 2A 02 F1 | 	add	local07, result1
18694     76 00 00 FF 
18698     B8 E4 05 F1 | 	add	objptr, ##60600
1869c     F2 12 02 F6 | 	mov	arg01, objptr
186a0     16 15 02 F6 | 	mov	arg02, local08
186a4     0A 16 C6 F9 | 	decod	arg03, #10
186a8     6A 00 00 FF 
186ac     EC E5 85 F1 | 	sub	objptr, ##54764
186b0     38 59 B0 FD | 	call	#_psram_spin2_write
186b4     0B 00 00 FF 
186b8     CC E4 85 F1 | 	sub	objptr, ##5836
186bc     14 2D 02 F1 | 	add	local08, local06
186c0     02 00 00 FF 
186c4     00 28 0E F2 | 	cmp	local06, ##1024 wz
186c8     E0 03 00 AF 
186cc     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
186d0     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1993
186d4     56 00 00 FF 
186d8     FC E5 05 F1 | 	add	objptr, ##44540
186dc     F2 12 02 FB | 	rdlong	arg01, objptr
186e0     03 12 62 FD | 	cogstop	arg01
186e4     04 E4 05 F1 | 	add	objptr, #4
186e8     F2 12 02 FB | 	rdlong	arg01, objptr
186ec     03 12 62 FD | 	cogstop	arg01
186f0     04 E4 05 F1 | 	add	objptr, #4
186f4     F2 12 02 FB | 	rdlong	arg01, objptr
186f8     03 12 62 FD | 	cogstop	arg01
186fc     21 00 00 FF 
18700     F0 E4 05 F1 | 	add	objptr, ##17136
18704     F2 12 02 FB | 	rdlong	arg01, objptr
18708     03 12 62 FD | 	cogstop	arg01
1870c     18 00 00 FF 
18710     D8 EA 05 F1 | 	add	ptr__dat__, ##12504
18714     F5 14 02 F6 | 	mov	arg02, ptr__dat__
18718     18 00 00 FF 
1871c     D8 EA 85 F1 | 	sub	ptr__dat__, ##12504
18720     21 00 00 FF 
18724     E8 E4 85 F1 | 	sub	objptr, ##17128
18728     1E 2C 06 F6 | 	mov	local08, #30
1872c     28 E4 61 FD | 	setq	objptr
18730     0A 2D F2 FC | 	coginit	local08, arg02 wc
18734     01 2C 66 C6 |  if_b	neg	local08, #1
18738     23 00 00 FF 
1873c     2C E4 05 F1 | 	add	objptr, ##17964
18740     F2 2C 62 FC | 	wrlong	local08, objptr
18744     7A 00 00 FF 
18748     38 E4 85 F1 | 	sub	objptr, ##62520
1874c     00 12 06 F6 | 	mov	arg01, #0
18750     01 12 62 FD | 	cogid	arg01
18754     03 12 62 FD | 	cogstop	arg01
18758                 | LR__1994
18758                 | LR__1995
18758     A7 F0 03 F6 | 	mov	ptra, fp
1875c     B2 00 A0 FD | 	call	#popregs_
18760                 | _do_brun_ret
18760     2D 00 64 FD | 	ret
18764                 | 
18764                 | ' 
18764                 | ' 
18764                 | ' sub do_mouse
18764                 | _do_mouse
18764     F8 20 BF FD | 	call	#_pop
18768     00 FA 4D F2 | 	cmps	result1, #0 wz
1876c                 | ' t1=pop()
1876c                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
1876c     14 00 90 5D |  if_ne	jmp	#LR__2000
18770     10 12 06 F6 | 	mov	arg01, #16
18774     00 14 06 F6 | 	mov	arg02, #0
18778     00 16 06 F6 | 	mov	arg03, #0
1877c     48 40 B0 FD | 	call	#_hg010b_spin2_setspritesize
18780     10 00 90 FD | 	jmp	#LR__2001
18784                 | LR__2000
18784     10 12 06 F6 | 	mov	arg01, #16
18788     20 14 06 F6 | 	mov	arg02, #32
1878c     20 16 06 F6 | 	mov	arg03, #32
18790     34 40 B0 FD | 	call	#_hg010b_spin2_setspritesize
18794                 | LR__2001
18794                 | _do_mouse_ret
18794     2D 00 64 FD | 	ret
18798                 | 
18798                 | ' 
18798                 | ' sub do_cursor
18798                 | _do_cursor
18798     C4 20 BF FD | 	call	#_pop
1879c     00 FA 4D F2 | 	cmps	result1, #0 wz
187a0                 | ' t1=pop()
187a0                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
187a0     14 00 90 5D |  if_ne	jmp	#LR__2010
187a4     11 12 06 F6 | 	mov	arg01, #17
187a8     00 14 06 F6 | 	mov	arg02, #0
187ac     00 16 06 F6 | 	mov	arg03, #0
187b0     14 40 B0 FD | 	call	#_hg010b_spin2_setspritesize
187b4     10 00 90 FD | 	jmp	#LR__2011
187b8                 | LR__2010
187b8     11 12 06 F6 | 	mov	arg01, #17
187bc     08 14 06 F6 | 	mov	arg02, #8
187c0     10 16 06 F6 | 	mov	arg03, #16
187c4     00 40 B0 FD | 	call	#_hg010b_spin2_setspritesize
187c8                 | LR__2011
187c8                 | _do_cursor_ret
187c8     2D 00 64 FD | 	ret
187cc                 | 
187cc                 | ' 
187cc                 | ' 
187cc                 | ' sub do_click
187cc                 | _do_click
187cc     90 20 BF FD | 	call	#_pop
187d0     00 FA 4D F2 | 	cmps	result1, #0 wz
187d4                 | ' t1=pop()
187d4                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
187d4     78 00 00 AF 
187d8     F0 E4 05 A1 |  if_e	add	objptr, ##61680
187dc     F2 00 68 AC |  if_e	wrlong	#0, objptr
187e0     78 00 00 FF 
187e4     F0 E4 C5 F3 | 	sumz	objptr, ##61680
187e8     F2 02 68 5C |  if_ne	wrlong	#1, objptr
187ec     78 00 00 5F 
187f0     F0 E4 85 51 |  if_ne	sub	objptr, ##61680
187f4                 | _do_click_ret
187f4     2D 00 64 FD | 	ret
187f8                 | 
187f8                 | ' 
187f8                 | ' 
187f8                 | ' sub do_beep
187f8                 | _do_beep
187f8     02 4A 05 F6 | 	mov	COUNT_, #2
187fc     A8 00 A0 FD | 	call	#pushregs_
18800     20 F0 07 F1 | 	add	ptra, #32
18804     58 20 BF FD | 	call	#_pop
18808     FD 1E 02 F6 | 	mov	local01, result1
1880c     FE 1C 02 F6 | 	mov	arg06, result2
18810     FF 20 02 F6 | 	mov	local02, result3
18814     0C 4E 05 F1 | 	add	fp, #12
18818     A7 1E 62 FC | 	wrlong	local01, fp
1881c     04 4E 05 F1 | 	add	fp, #4
18820     A7 1C 62 FC | 	wrlong	arg06, fp
18824     04 4E 05 F1 | 	add	fp, #4
18828     A7 20 62 FC | 	wrlong	local02, fp
1882c     14 4E 85 F1 | 	sub	fp, #20
18830     2C 20 BF FD | 	call	#_pop
18834     A7 FA 61 FC | 	wrlong	result1, fp
18838     04 4E 05 F1 | 	add	fp, #4
1883c     A7 FC 61 FC | 	wrlong	result2, fp
18840     04 4E 05 F1 | 	add	fp, #4
18844     A7 FE 61 FC | 	wrlong	result3, fp
18848                 | ' 
18848                 | ' t2=pop()
18848                 | ' t1=pop()
18848                 | ' 
18848                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
18848     08 4E 85 F1 | 	sub	fp, #8
1884c     1C FE 0D F2 | 	cmp	result3, #28 wz
18850     08 4E 05 51 |  if_ne	add	fp, #8
18854     A7 20 02 5B |  if_ne	rdlong	local02, fp
18858     08 4E 85 51 |  if_ne	sub	fp, #8
1885c     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
18860     A7 1E 02 AB |  if_e	rdlong	local01, fp
18864     18 4E 05 A1 |  if_e	add	fp, #24
18868     A7 1E 62 AC |  if_e	wrlong	local01, fp
1886c     18 4E 85 A1 |  if_e	sub	fp, #24
18870     14 00 90 AD |  if_e	jmp	#LR__2020
18874     A7 12 02 F6 | 	mov	arg01, fp
18878     98 AC BF FD | 	call	#_converttoint
1887c     18 4E 05 F1 | 	add	fp, #24
18880     A7 FA 61 FC | 	wrlong	result1, fp
18884     18 4E 85 F1 | 	sub	fp, #24
18888                 | LR__2020
18888     1C 4E 05 F1 | 	add	fp, #28
1888c     A7 FE 48 FC | 	wrbyte	#127, fp
18890     01 4E 05 F1 | 	add	fp, #1
18894     A7 00 49 FC | 	wrbyte	#128, fp
18898     01 4E 85 F1 | 	sub	fp, #1
1889c     A7 14 02 F6 | 	mov	arg02, fp
188a0     04 4E 85 F1 | 	sub	fp, #4
188a4     A7 16 02 FB | 	rdlong	arg03, fp
188a8     18 4E 85 F1 | 	sub	fp, #24
188ac     01 16 66 F0 | 	shl	arg03, #1
188b0     07 12 06 F6 | 	mov	arg01, #7
188b4     0E 18 C6 F9 | 	decod	arg04, #14
188b8     02 1A 06 F6 | 	mov	arg05, #2
188bc     00 1C 06 F6 | 	mov	arg06, #0
188c0     0B 00 00 FF 
188c4     CC E4 05 F1 | 	add	objptr, ##5836
188c8     F4 5E B0 FD | 	call	#_audio096_spin2_play8
188cc     0B 00 00 FF 
188d0     CC E4 85 F1 | 	sub	objptr, ##5836
188d4     0C 4E 05 F1 | 	add	fp, #12
188d8     A7 12 02 F6 | 	mov	arg01, fp
188dc     0C 4E 85 F1 | 	sub	fp, #12
188e0     14 20 BF FD | 	call	#_push
188e4     B8 F5 BF FD | 	call	#_do_waitms
188e8     07 12 06 F6 | 	mov	arg01, #7
188ec     0B 00 00 FF 
188f0     CC E4 05 F1 | 	add	objptr, ##5836
188f4     7C 5F B0 FD | 	call	#_audio096_spin2_stop
188f8     0B 00 00 FF 
188fc     CC E4 85 F1 | 	sub	objptr, ##5836
18900     A7 F0 03 F6 | 	mov	ptra, fp
18904     B2 00 A0 FD | 	call	#popregs_
18908                 | _do_beep_ret
18908     2D 00 64 FD | 	ret
1890c                 | 
1890c                 | ' 
1890c                 | ' sub do_no_command
1890c                 | _do_no_command
1890c     17 12 06 F6 | 	mov	arg01, #23
18910     E4 1D B0 FD | 	call	#_printerror
18914                 | _do_no_command_ret
18914     2D 00 64 FD | 	ret
18918                 | 
18918                 | ' 
18918                 | ' sub do_negative
18918                 | _do_negative
18918     02 4A 05 F6 | 	mov	COUNT_, #2
1891c     A8 00 A0 FD | 	call	#pushregs_
18920     0C F0 07 F1 | 	add	ptra, #12
18924     38 1F BF FD | 	call	#_pop
18928     FF 1E 02 F6 | 	mov	local01, result3
1892c     A7 FA 61 FC | 	wrlong	result1, fp
18930     04 4E 05 F1 | 	add	fp, #4
18934     A7 FC 61 FC | 	wrlong	result2, fp
18938     04 4E 05 F1 | 	add	fp, #4
1893c     A7 1E 62 FC | 	wrlong	local01, fp
18940                 | ' t1=pop()
18940                 | ' if t1.result_type=result_int then 
18940     08 4E 85 F1 | 	sub	fp, #8
18944     1C 1E 0E F2 | 	cmp	local01, #28 wz
18948     A7 20 02 AB |  if_e	rdlong	local02, fp
1894c     10 1F 62 A6 |  if_e	neg	local01, local02
18950     A7 1E 62 AC |  if_e	wrlong	local01, fp
18954     5C 00 90 AD |  if_e	jmp	#LR__2032
18958     08 4E 05 F1 | 	add	fp, #8
1895c     A7 1E 02 FB | 	rdlong	local01, fp
18960     08 4E 85 F1 | 	sub	fp, #8
18964     1D 1E 0E F2 | 	cmp	local01, #29 wz
18968     1C 00 90 5D |  if_ne	jmp	#LR__2030
1896c     A7 20 02 FB | 	rdlong	local02, fp
18970     10 1F 62 F6 | 	neg	local01, local02
18974     A7 1E 62 FC | 	wrlong	local01, fp
18978     08 4E 05 F1 | 	add	fp, #8
1897c     A7 38 68 FC | 	wrlong	#28, fp
18980     08 4E 85 F1 | 	sub	fp, #8
18984     2C 00 90 FD | 	jmp	#LR__2031
18988                 | LR__2030
18988     08 4E 05 F1 | 	add	fp, #8
1898c     A7 1E 02 FB | 	rdlong	local01, fp
18990     08 4E 85 F1 | 	sub	fp, #8
18994     1E 1E 0E F2 | 	cmp	local01, #30 wz
18998     A7 FA 01 AB |  if_e	rdlong	result1, fp
1899c     1F FA E5 A4 |  if_e	bitnot	result1, #31
189a0     A7 FA 61 AC |  if_e	wrlong	result1, fp
189a4     08 4E 05 51 |  if_ne	add	fp, #8
189a8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
189ac     08 4E 85 51 |  if_ne	sub	fp, #8
189b0     A7 50 68 5C |  if_ne	wrlong	#40, fp
189b4                 | LR__2031
189b4                 | LR__2032
189b4     A7 12 02 F6 | 	mov	arg01, fp
189b8     3C 1F BF FD | 	call	#_push
189bc     A7 F0 03 F6 | 	mov	ptra, fp
189c0     B2 00 A0 FD | 	call	#popregs_
189c4                 | _do_negative_ret
189c4     2D 00 64 FD | 	ret
189c8                 | 
189c8                 | ' 
189c8                 | ' sub do_abs
189c8                 | _do_abs
189c8     01 4A 05 F6 | 	mov	COUNT_, #1
189cc     A8 00 A0 FD | 	call	#pushregs_
189d0     0C F0 07 F1 | 	add	ptra, #12
189d4     88 1E BF FD | 	call	#_pop
189d8     FF 1E 02 F6 | 	mov	local01, result3
189dc     A7 FA 61 FC | 	wrlong	result1, fp
189e0     04 4E 05 F1 | 	add	fp, #4
189e4     A7 FC 61 FC | 	wrlong	result2, fp
189e8     04 4E 05 F1 | 	add	fp, #4
189ec     A7 1E 62 FC | 	wrlong	local01, fp
189f0                 | ' t1=pop()
189f0                 | ' if t1.result_type=result_int then 
189f0     08 4E 85 F1 | 	sub	fp, #8
189f4     1C 1E 0E F2 | 	cmp	local01, #28 wz
189f8     A7 12 02 AB |  if_e	rdlong	arg01, fp
189fc     09 1F 42 A6 |  if_e	abs	local01, arg01
18a00     A7 1E 62 AC |  if_e	wrlong	local01, fp
18a04     2C 00 90 AD |  if_e	jmp	#LR__2040
18a08     08 4E 05 F1 | 	add	fp, #8
18a0c     A7 1E 02 FB | 	rdlong	local01, fp
18a10     08 4E 85 F1 | 	sub	fp, #8
18a14     1E 1E 0E F2 | 	cmp	local01, #30 wz
18a18     A7 FA 01 AB |  if_e	rdlong	result1, fp
18a1c     1F FA 05 A4 |  if_e	bitl	result1, #31
18a20     A7 FA 61 AC |  if_e	wrlong	result1, fp
18a24     08 4E 05 51 |  if_ne	add	fp, #8
18a28     A7 FE 69 5C |  if_ne	wrlong	#255, fp
18a2c     08 4E 85 51 |  if_ne	sub	fp, #8
18a30     A7 50 68 5C |  if_ne	wrlong	#40, fp
18a34                 | LR__2040
18a34     A7 12 02 F6 | 	mov	arg01, fp
18a38     BC 1E BF FD | 	call	#_push
18a3c     A7 F0 03 F6 | 	mov	ptra, fp
18a40     B2 00 A0 FD | 	call	#popregs_
18a44                 | _do_abs_ret
18a44     2D 00 64 FD | 	ret
18a48                 | 
18a48                 | ' 
18a48                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
18a48                 | ' 
18a48                 | ' ''----------------------------------------------------------------------------------------------------
18a48                 | ' ''------------------ Initialization procedures -------------------------------------------------------
18a48                 | ' ''----------------------------------------------------------------------------------------------------
18a48                 | ' 
18a48                 | ' ''--------------------------- Command function pointers
18a48                 | ' 
18a48                 | ' sub init_commands
18a48                 | _init_commands
18a48                 | ' 
18a48                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
18a48     00 00 06 F6 | 	mov	_var01, #0
18a4c     97 16 48 FB | 	callpa	#(@LR__2051-@LR__2050)>>2,fcache_load_ptr_
18a50                 | LR__2050
18a50     00 FB 01 F6 | 	mov	result1, _var01
18a54     02 FA 65 F0 | 	shl	result1, #2
18a58     63 00 00 FF 
18a5c     60 E4 05 F1 | 	add	objptr, ##50784
18a60     F2 FA 01 F1 | 	add	result1, objptr
18a64     63 00 00 FF 
18a68     60 E4 85 F1 | 	sub	objptr, ##50784
18a6c     FD E4 61 FC | 	wrlong	objptr, result1
18a70     01 00 06 F1 | 	add	_var01, #1
18a74     00 01 56 F2 | 	cmps	_var01, #256 wc
18a78     D4 FF 9F CD |  if_b	jmp	#LR__2050
18a7c                 | LR__2051
18a7c     F2 FA 01 F6 | 	mov	result1, objptr
18a80     14 FA 25 F4 | 	bith	result1, #20
18a84     63 00 00 FF 
18a88     64 E4 05 F1 | 	add	objptr, ##50788
18a8c     F2 FA 61 FC | 	wrlong	result1, objptr
18a90     63 00 00 FF 
18a94     64 E4 85 F1 | 	sub	objptr, ##50788
18a98     F2 FA 01 F6 | 	mov	result1, objptr
18a9c     15 FA 25 F4 | 	bith	result1, #21
18aa0     63 00 00 FF 
18aa4     68 E4 05 F1 | 	add	objptr, ##50792
18aa8     F2 FA 61 FC | 	wrlong	result1, objptr
18aac     63 00 00 FF 
18ab0     68 E4 85 F1 | 	sub	objptr, ##50792
18ab4     F2 FA 01 F6 | 	mov	result1, objptr
18ab8     34 FA 25 F4 | 	bith	result1, #52
18abc     63 00 00 FF 
18ac0     6C E4 05 F1 | 	add	objptr, ##50796
18ac4     F2 FA 61 FC | 	wrlong	result1, objptr
18ac8     63 00 00 FF 
18acc     6C E4 85 F1 | 	sub	objptr, ##50796
18ad0     F2 FA 01 F6 | 	mov	result1, objptr
18ad4     16 FA 25 F4 | 	bith	result1, #22
18ad8     63 00 00 FF 
18adc     74 E4 05 F1 | 	add	objptr, ##50804
18ae0     F2 FA 61 FC | 	wrlong	result1, objptr
18ae4     63 00 00 FF 
18ae8     74 E4 85 F1 | 	sub	objptr, ##50804
18aec     F2 FA 01 F6 | 	mov	result1, objptr
18af0     00 28 00 FF 
18af4     00 FA 45 F5 | 	or	result1, ##5242880
18af8     63 00 00 FF 
18afc     78 E4 05 F1 | 	add	objptr, ##50808
18b00     F2 FA 61 FC | 	wrlong	result1, objptr
18b04     63 00 00 FF 
18b08     78 E4 85 F1 | 	sub	objptr, ##50808
18b0c     F2 FA 01 F6 | 	mov	result1, objptr
18b10     35 FA 25 F4 | 	bith	result1, #53
18b14     63 00 00 FF 
18b18     7C E4 05 F1 | 	add	objptr, ##50812
18b1c     F2 FA 61 FC | 	wrlong	result1, objptr
18b20     63 00 00 FF 
18b24     7C E4 85 F1 | 	sub	objptr, ##50812
18b28     F2 FA 01 F6 | 	mov	result1, objptr
18b2c     54 FA 25 F4 | 	bith	result1, #84
18b30     63 00 00 FF 
18b34     80 E4 05 F1 | 	add	objptr, ##50816
18b38     F2 FA 61 FC | 	wrlong	result1, objptr
18b3c     63 00 00 FF 
18b40     80 E4 85 F1 | 	sub	objptr, ##50816
18b44     F2 FA 01 F6 | 	mov	result1, objptr
18b48     17 FA 25 F4 | 	bith	result1, #23
18b4c     63 00 00 FF 
18b50     84 E4 05 F1 | 	add	objptr, ##50820
18b54     F2 FA 61 FC | 	wrlong	result1, objptr
18b58     63 00 00 FF 
18b5c     84 E4 85 F1 | 	sub	objptr, ##50820
18b60     F2 FA 01 F6 | 	mov	result1, objptr
18b64     00 48 00 FF 
18b68     00 FA 45 F5 | 	or	result1, ##9437184
18b6c     63 00 00 FF 
18b70     88 E4 05 F1 | 	add	objptr, ##50824
18b74     F2 FA 61 FC | 	wrlong	result1, objptr
18b78     63 00 00 FF 
18b7c     88 E4 85 F1 | 	sub	objptr, ##50824
18b80     F2 FA 01 F6 | 	mov	result1, objptr
18b84     00 50 00 FF 
18b88     00 FA 45 F5 | 	or	result1, ##10485760
18b8c     63 00 00 FF 
18b90     8C E4 05 F1 | 	add	objptr, ##50828
18b94     F2 FA 61 FC | 	wrlong	result1, objptr
18b98     63 00 00 FF 
18b9c     8C E4 85 F1 | 	sub	objptr, ##50828
18ba0     F2 FA 01 F6 | 	mov	result1, objptr
18ba4     00 58 00 FF 
18ba8     00 FA 45 F5 | 	or	result1, ##11534336
18bac     63 00 00 FF 
18bb0     90 E4 05 F1 | 	add	objptr, ##50832
18bb4     F2 FA 61 FC | 	wrlong	result1, objptr
18bb8     63 00 00 FF 
18bbc     90 E4 85 F1 | 	sub	objptr, ##50832
18bc0     F2 FA 01 F6 | 	mov	result1, objptr
18bc4     36 FA 25 F4 | 	bith	result1, #54
18bc8     63 00 00 FF 
18bcc     A4 E4 05 F1 | 	add	objptr, ##50852
18bd0     F2 FA 61 FC | 	wrlong	result1, objptr
18bd4     63 00 00 FF 
18bd8     A4 E4 85 F1 | 	sub	objptr, ##50852
18bdc     F2 FA 01 F6 | 	mov	result1, objptr
18be0     00 68 00 FF 
18be4     00 FA 45 F5 | 	or	result1, ##13631488
18be8     63 00 00 FF 
18bec     D4 E4 05 F1 | 	add	objptr, ##50900
18bf0     F2 FA 61 FC | 	wrlong	result1, objptr
18bf4     63 00 00 FF 
18bf8     D4 E4 85 F1 | 	sub	objptr, ##50900
18bfc     F2 FA 01 F6 | 	mov	result1, objptr
18c00     00 68 00 FF 
18c04     00 FA 45 F5 | 	or	result1, ##13631488
18c08     63 00 00 FF 
18c0c     D0 E4 05 F1 | 	add	objptr, ##50896
18c10     F2 FA 61 FC | 	wrlong	result1, objptr
18c14     63 00 00 FF 
18c18     D0 E4 85 F1 | 	sub	objptr, ##50896
18c1c     F2 FA 01 F6 | 	mov	result1, objptr
18c20     00 68 00 FF 
18c24     00 FA 45 F5 | 	or	result1, ##13631488
18c28     63 00 00 FF 
18c2c     D8 E4 05 F1 | 	add	objptr, ##50904
18c30     F2 FA 61 FC | 	wrlong	result1, objptr
18c34     63 00 00 FF 
18c38     D8 E4 85 F1 | 	sub	objptr, ##50904
18c3c     F2 FA 01 F6 | 	mov	result1, objptr
18c40     00 68 00 FF 
18c44     00 FA 45 F5 | 	or	result1, ##13631488
18c48     63 00 00 FF 
18c4c     DC E4 05 F1 | 	add	objptr, ##50908
18c50     F2 FA 61 FC | 	wrlong	result1, objptr
18c54     63 00 00 FF 
18c58     DC E4 85 F1 | 	sub	objptr, ##50908
18c5c     F2 FA 01 F6 | 	mov	result1, objptr
18c60     00 68 00 FF 
18c64     00 FA 45 F5 | 	or	result1, ##13631488
18c68     63 00 00 FF 
18c6c     0C E5 05 F1 | 	add	objptr, ##50956
18c70     F2 FA 61 FC | 	wrlong	result1, objptr
18c74     63 00 00 FF 
18c78     0C E5 85 F1 | 	sub	objptr, ##50956
18c7c     F2 FA 01 F6 | 	mov	result1, objptr
18c80     55 FA 25 F4 | 	bith	result1, #85
18c84     63 00 00 FF 
18c88     BC E4 05 F1 | 	add	objptr, ##50876
18c8c     F2 FA 61 FC | 	wrlong	result1, objptr
18c90     63 00 00 FF 
18c94     BC E4 85 F1 | 	sub	objptr, ##50876
18c98     F2 FA 01 F6 | 	mov	result1, objptr
18c9c     00 68 00 FF 
18ca0     00 FA 45 F5 | 	or	result1, ##13631488
18ca4     63 00 00 FF 
18ca8     E0 E4 05 F1 | 	add	objptr, ##50912
18cac     F2 FA 61 FC | 	wrlong	result1, objptr
18cb0     63 00 00 FF 
18cb4     E0 E4 85 F1 | 	sub	objptr, ##50912
18cb8     F2 FA 01 F6 | 	mov	result1, objptr
18cbc     00 68 00 FF 
18cc0     00 FA 45 F5 | 	or	result1, ##13631488
18cc4     63 00 00 FF 
18cc8     E4 E4 05 F1 | 	add	objptr, ##50916
18ccc     F2 FA 61 FC | 	wrlong	result1, objptr
18cd0     63 00 00 FF 
18cd4     E4 E4 85 F1 | 	sub	objptr, ##50916
18cd8     F2 FA 01 F6 | 	mov	result1, objptr
18cdc     00 68 00 FF 
18ce0     00 FA 45 F5 | 	or	result1, ##13631488
18ce4     63 00 00 FF 
18ce8     E8 E4 05 F1 | 	add	objptr, ##50920
18cec     F2 FA 61 FC | 	wrlong	result1, objptr
18cf0     63 00 00 FF 
18cf4     E8 E4 85 F1 | 	sub	objptr, ##50920
18cf8     F2 FA 01 F6 | 	mov	result1, objptr
18cfc     74 FA 25 F4 | 	bith	result1, #116
18d00     63 00 00 FF 
18d04     60 E5 05 F1 | 	add	objptr, ##51040
18d08     F2 FA 61 FC | 	wrlong	result1, objptr
18d0c     63 00 00 FF 
18d10     60 E5 85 F1 | 	sub	objptr, ##51040
18d14     F2 FA 01 F6 | 	mov	result1, objptr
18d18     18 FA 25 F4 | 	bith	result1, #24
18d1c     63 00 00 FF 
18d20     64 E5 05 F1 | 	add	objptr, ##51044
18d24     F2 FA 61 FC | 	wrlong	result1, objptr
18d28     63 00 00 FF 
18d2c     64 E5 85 F1 | 	sub	objptr, ##51044
18d30     F2 FA 01 F6 | 	mov	result1, objptr
18d34     00 88 00 FF 
18d38     00 FA 45 F5 | 	or	result1, ##17825792
18d3c     63 00 00 FF 
18d40     68 E5 05 F1 | 	add	objptr, ##51048
18d44     F2 FA 61 FC | 	wrlong	result1, objptr
18d48     63 00 00 FF 
18d4c     68 E5 85 F1 | 	sub	objptr, ##51048
18d50     F2 FA 01 F6 | 	mov	result1, objptr
18d54     00 90 00 FF 
18d58     00 FA 45 F5 | 	or	result1, ##18874368
18d5c     63 00 00 FF 
18d60     6C E5 05 F1 | 	add	objptr, ##51052
18d64     F2 FA 61 FC | 	wrlong	result1, objptr
18d68     63 00 00 FF 
18d6c     6C E5 85 F1 | 	sub	objptr, ##51052
18d70     F2 FA 01 F6 | 	mov	result1, objptr
18d74     00 98 00 FF 
18d78     00 FA 45 F5 | 	or	result1, ##19922944
18d7c     63 00 00 FF 
18d80     70 E5 05 F1 | 	add	objptr, ##51056
18d84     F2 FA 61 FC | 	wrlong	result1, objptr
18d88     63 00 00 FF 
18d8c     70 E5 85 F1 | 	sub	objptr, ##51056
18d90     F2 FA 01 F6 | 	mov	result1, objptr
18d94     00 A0 00 FF 
18d98     00 FA 45 F5 | 	or	result1, ##20971520
18d9c     63 00 00 FF 
18da0     74 E5 05 F1 | 	add	objptr, ##51060
18da4     F2 FA 61 FC | 	wrlong	result1, objptr
18da8     63 00 00 FF 
18dac     74 E5 85 F1 | 	sub	objptr, ##51060
18db0     F2 FA 01 F6 | 	mov	result1, objptr
18db4     00 A8 00 FF 
18db8     00 FA 45 F5 | 	or	result1, ##22020096
18dbc     63 00 00 FF 
18dc0     78 E5 05 F1 | 	add	objptr, ##51064
18dc4     F2 FA 61 FC | 	wrlong	result1, objptr
18dc8     63 00 00 FF 
18dcc     78 E5 85 F1 | 	sub	objptr, ##51064
18dd0     F2 FA 01 F6 | 	mov	result1, objptr
18dd4     00 B0 00 FF 
18dd8     00 FA 45 F5 | 	or	result1, ##23068672
18ddc     63 00 00 FF 
18de0     7C E5 05 F1 | 	add	objptr, ##51068
18de4     F2 FA 61 FC | 	wrlong	result1, objptr
18de8     63 00 00 FF 
18dec     7C E5 85 F1 | 	sub	objptr, ##51068
18df0     F2 FA 01 F6 | 	mov	result1, objptr
18df4     00 B8 00 FF 
18df8     00 FA 45 F5 | 	or	result1, ##24117248
18dfc     63 00 00 FF 
18e00     80 E5 05 F1 | 	add	objptr, ##51072
18e04     F2 FA 61 FC | 	wrlong	result1, objptr
18e08     63 00 00 FF 
18e0c     80 E5 85 F1 | 	sub	objptr, ##51072
18e10     F2 FA 01 F6 | 	mov	result1, objptr
18e14     37 FA 25 F4 | 	bith	result1, #55
18e18     63 00 00 FF 
18e1c     84 E5 05 F1 | 	add	objptr, ##51076
18e20     F2 FA 61 FC | 	wrlong	result1, objptr
18e24     63 00 00 FF 
18e28     84 E5 85 F1 | 	sub	objptr, ##51076
18e2c     F2 FA 01 F6 | 	mov	result1, objptr
18e30     00 C8 00 FF 
18e34     00 FA 45 F5 | 	or	result1, ##26214400
18e38     63 00 00 FF 
18e3c     88 E5 05 F1 | 	add	objptr, ##51080
18e40     F2 FA 61 FC | 	wrlong	result1, objptr
18e44     63 00 00 FF 
18e48     88 E5 85 F1 | 	sub	objptr, ##51080
18e4c     F2 FA 01 F6 | 	mov	result1, objptr
18e50     00 D0 00 FF 
18e54     00 FA 45 F5 | 	or	result1, ##27262976
18e58     63 00 00 FF 
18e5c     8C E5 05 F1 | 	add	objptr, ##51084
18e60     F2 FA 61 FC | 	wrlong	result1, objptr
18e64     63 00 00 FF 
18e68     8C E5 85 F1 | 	sub	objptr, ##51084
18e6c     F2 FA 01 F6 | 	mov	result1, objptr
18e70     00 D8 00 FF 
18e74     00 FA 45 F5 | 	or	result1, ##28311552
18e78     63 00 00 FF 
18e7c     90 E5 05 F1 | 	add	objptr, ##51088
18e80     F2 FA 61 FC | 	wrlong	result1, objptr
18e84     63 00 00 FF 
18e88     90 E5 85 F1 | 	sub	objptr, ##51088
18e8c     F2 FA 01 F6 | 	mov	result1, objptr
18e90     56 FA 25 F4 | 	bith	result1, #86
18e94     63 00 00 FF 
18e98     94 E5 05 F1 | 	add	objptr, ##51092
18e9c     F2 FA 61 FC | 	wrlong	result1, objptr
18ea0     63 00 00 FF 
18ea4     94 E5 85 F1 | 	sub	objptr, ##51092
18ea8     F2 FA 01 F6 | 	mov	result1, objptr
18eac     00 E8 00 FF 
18eb0     00 FA 45 F5 | 	or	result1, ##30408704
18eb4     65 00 00 FF 
18eb8     5C E4 05 F1 | 	add	objptr, ##51804
18ebc     F2 FA 61 FC | 	wrlong	result1, objptr
18ec0     65 00 00 FF 
18ec4     5C E4 85 F1 | 	sub	objptr, ##51804
18ec8     F2 FA 01 F6 | 	mov	result1, objptr
18ecc     75 FA 25 F4 | 	bith	result1, #117
18ed0     63 00 00 FF 
18ed4     98 E5 05 F1 | 	add	objptr, ##51096
18ed8     F2 FA 61 FC | 	wrlong	result1, objptr
18edc     63 00 00 FF 
18ee0     98 E5 85 F1 | 	sub	objptr, ##51096
18ee4     F2 FA 01 F6 | 	mov	result1, objptr
18ee8     94 FA 25 F4 | 	bith	result1, #148
18eec     63 00 00 FF 
18ef0     AC E5 05 F1 | 	add	objptr, ##51116
18ef4     F2 FA 61 FC | 	wrlong	result1, objptr
18ef8     63 00 00 FF 
18efc     AC E5 85 F1 | 	sub	objptr, ##51116
18f00     F2 FA 01 F6 | 	mov	result1, objptr
18f04     19 FA 25 F4 | 	bith	result1, #25
18f08     63 00 00 FF 
18f0c     9C E5 05 F1 | 	add	objptr, ##51100
18f10     F2 FA 61 FC | 	wrlong	result1, objptr
18f14     63 00 00 FF 
18f18     9C E5 85 F1 | 	sub	objptr, ##51100
18f1c     F2 FA 01 F6 | 	mov	result1, objptr
18f20     00 08 01 FF 
18f24     00 FA 45 F5 | 	or	result1, ##34603008
18f28     63 00 00 FF 
18f2c     B8 E4 05 F1 | 	add	objptr, ##50872
18f30     F2 FA 61 FC | 	wrlong	result1, objptr
18f34     63 00 00 FF 
18f38     B8 E4 85 F1 | 	sub	objptr, ##50872
18f3c     F2 FA 01 F6 | 	mov	result1, objptr
18f40     00 10 01 FF 
18f44     00 FA 45 F5 | 	or	result1, ##35651584
18f48     63 00 00 FF 
18f4c     A0 E5 05 F1 | 	add	objptr, ##51104
18f50     F2 FA 61 FC | 	wrlong	result1, objptr
18f54     63 00 00 FF 
18f58     A0 E5 85 F1 | 	sub	objptr, ##51104
18f5c     F2 FA 01 F6 | 	mov	result1, objptr
18f60     00 18 01 FF 
18f64     00 FA 45 F5 | 	or	result1, ##36700160
18f68     63 00 00 FF 
18f6c     A4 E5 05 F1 | 	add	objptr, ##51108
18f70     F2 FA 61 FC | 	wrlong	result1, objptr
18f74     63 00 00 FF 
18f78     A4 E5 85 F1 | 	sub	objptr, ##51108
18f7c     F2 FA 01 F6 | 	mov	result1, objptr
18f80     00 20 01 FF 
18f84     00 FA 45 F5 | 	or	result1, ##37748736
18f88     63 00 00 FF 
18f8c     A8 E5 05 F1 | 	add	objptr, ##51112
18f90     F2 FA 61 FC | 	wrlong	result1, objptr
18f94     63 00 00 FF 
18f98     A8 E5 85 F1 | 	sub	objptr, ##51112
18f9c     F2 FA 01 F6 | 	mov	result1, objptr
18fa0     00 28 01 FF 
18fa4     00 FA 45 F5 | 	or	result1, ##38797312
18fa8     63 00 00 FF 
18fac     B4 E5 05 F1 | 	add	objptr, ##51124
18fb0     F2 FA 61 FC | 	wrlong	result1, objptr
18fb4     63 00 00 FF 
18fb8     B4 E5 85 F1 | 	sub	objptr, ##51124
18fbc     F2 FA 01 F6 | 	mov	result1, objptr
18fc0     00 30 01 FF 
18fc4     00 FA 45 F5 | 	or	result1, ##39845888
18fc8     63 00 00 FF 
18fcc     B8 E5 05 F1 | 	add	objptr, ##51128
18fd0     F2 FA 61 FC | 	wrlong	result1, objptr
18fd4     63 00 00 FF 
18fd8     B8 E5 85 F1 | 	sub	objptr, ##51128
18fdc     F2 FA 01 F6 | 	mov	result1, objptr
18fe0     00 38 01 FF 
18fe4     00 FA 45 F5 | 	or	result1, ##40894464
18fe8     63 00 00 FF 
18fec     BC E5 05 F1 | 	add	objptr, ##51132
18ff0     F2 FA 61 FC | 	wrlong	result1, objptr
18ff4     63 00 00 FF 
18ff8     BC E5 85 F1 | 	sub	objptr, ##51132
18ffc     F2 FA 01 F6 | 	mov	result1, objptr
19000     00 40 01 FF 
19004     00 FA 45 F5 | 	or	result1, ##41943040
19008     63 00 00 FF 
1900c     C0 E5 05 F1 | 	add	objptr, ##51136
19010     F2 FA 61 FC | 	wrlong	result1, objptr
19014     63 00 00 FF 
19018     C0 E5 85 F1 | 	sub	objptr, ##51136
1901c     F2 FA 01 F6 | 	mov	result1, objptr
19020     00 48 01 FF 
19024     00 FA 45 F5 | 	or	result1, ##42991616
19028     63 00 00 FF 
1902c     C8 E5 05 F1 | 	add	objptr, ##51144
19030     F2 FA 61 FC | 	wrlong	result1, objptr
19034     63 00 00 FF 
19038     C8 E5 85 F1 | 	sub	objptr, ##51144
1903c     F2 FA 01 F6 | 	mov	result1, objptr
19040     00 08 01 FF 
19044     00 FA 45 F5 | 	or	result1, ##34603008
19048     63 00 00 FF 
1904c     CC E5 05 F1 | 	add	objptr, ##51148
19050     F2 FA 61 FC | 	wrlong	result1, objptr
19054     63 00 00 FF 
19058     CC E5 85 F1 | 	sub	objptr, ##51148
1905c     F2 FA 01 F6 | 	mov	result1, objptr
19060     00 50 01 FF 
19064     00 FA 45 F5 | 	or	result1, ##44040192
19068     63 00 00 FF 
1906c     CC E4 05 F1 | 	add	objptr, ##50892
19070     F2 FA 61 FC | 	wrlong	result1, objptr
19074     63 00 00 FF 
19078     CC E4 85 F1 | 	sub	objptr, ##50892
1907c     F2 FA 01 F6 | 	mov	result1, objptr
19080     00 58 01 FF 
19084     00 FA 45 F5 | 	or	result1, ##45088768
19088     63 00 00 FF 
1908c     FC E4 05 F1 | 	add	objptr, ##50940
19090     F2 FA 61 FC | 	wrlong	result1, objptr
19094     63 00 00 FF 
19098     FC E4 85 F1 | 	sub	objptr, ##50940
1909c     F2 FA 01 F6 | 	mov	result1, objptr
190a0     00 60 01 FF 
190a4     00 FA 45 F5 | 	or	result1, ##46137344
190a8     63 00 00 FF 
190ac     F8 E4 05 F1 | 	add	objptr, ##50936
190b0     F2 FA 61 FC | 	wrlong	result1, objptr
190b4     63 00 00 FF 
190b8     F8 E4 85 F1 | 	sub	objptr, ##50936
190bc     F2 FA 01 F6 | 	mov	result1, objptr
190c0     00 68 01 FF 
190c4     00 FA 45 F5 | 	or	result1, ##47185920
190c8     63 00 00 FF 
190cc     9C E4 05 F1 | 	add	objptr, ##50844
190d0     F2 FA 61 FC | 	wrlong	result1, objptr
190d4     63 00 00 FF 
190d8     9C E4 85 F1 | 	sub	objptr, ##50844
190dc     F2 FA 01 F6 | 	mov	result1, objptr
190e0     00 70 01 FF 
190e4     00 FA 45 F5 | 	or	result1, ##48234496
190e8     63 00 00 FF 
190ec     A0 E4 05 F1 | 	add	objptr, ##50848
190f0     F2 FA 61 FC | 	wrlong	result1, objptr
190f4     63 00 00 FF 
190f8     A0 E4 85 F1 | 	sub	objptr, ##50848
190fc     F2 FA 01 F6 | 	mov	result1, objptr
19100     00 78 01 FF 
19104     00 FA 45 F5 | 	or	result1, ##49283072
19108     63 00 00 FF 
1910c     08 E5 05 F1 | 	add	objptr, ##50952
19110     F2 FA 61 FC | 	wrlong	result1, objptr
19114     63 00 00 FF 
19118     08 E5 85 F1 | 	sub	objptr, ##50952
1911c     F2 FA 01 F6 | 	mov	result1, objptr
19120     38 FA 25 F4 | 	bith	result1, #56
19124     63 00 00 FF 
19128     B0 E5 05 F1 | 	add	objptr, ##51120
1912c     F2 FA 61 FC | 	wrlong	result1, objptr
19130     63 00 00 FF 
19134     B0 E5 85 F1 | 	sub	objptr, ##51120
19138     F2 FA 01 F6 | 	mov	result1, objptr
1913c     00 88 01 FF 
19140     00 FA 45 F5 | 	or	result1, ##51380224
19144     63 00 00 FF 
19148     C4 E5 05 F1 | 	add	objptr, ##51140
1914c     F2 FA 61 FC | 	wrlong	result1, objptr
19150     63 00 00 FF 
19154     C4 E5 85 F1 | 	sub	objptr, ##51140
19158     F2 FA 01 F6 | 	mov	result1, objptr
1915c     00 90 01 FF 
19160     00 FA 45 F5 | 	or	result1, ##52428800
19164     63 00 00 FF 
19168     D0 E5 05 F1 | 	add	objptr, ##51152
1916c     F2 FA 61 FC | 	wrlong	result1, objptr
19170     63 00 00 FF 
19174     D0 E5 85 F1 | 	sub	objptr, ##51152
19178     F2 FA 01 F6 | 	mov	result1, objptr
1917c     00 98 01 FF 
19180     00 FA 45 F5 | 	or	result1, ##53477376
19184     63 00 00 FF 
19188     D4 E5 05 F1 | 	add	objptr, ##51156
1918c     F2 FA 61 FC | 	wrlong	result1, objptr
19190     63 00 00 FF 
19194     D4 E5 85 F1 | 	sub	objptr, ##51156
19198     F2 FA 01 F6 | 	mov	result1, objptr
1919c     00 A0 01 FF 
191a0     00 FA 45 F5 | 	or	result1, ##54525952
191a4     63 00 00 FF 
191a8     D8 E5 05 F1 | 	add	objptr, ##51160
191ac     F2 FA 61 FC | 	wrlong	result1, objptr
191b0     63 00 00 FF 
191b4     D8 E5 85 F1 | 	sub	objptr, ##51160
191b8     F2 FA 01 F6 | 	mov	result1, objptr
191bc     00 A8 01 FF 
191c0     00 FA 45 F5 | 	or	result1, ##55574528
191c4     63 00 00 FF 
191c8     DC E5 05 F1 | 	add	objptr, ##51164
191cc     F2 FA 61 FC | 	wrlong	result1, objptr
191d0     63 00 00 FF 
191d4     DC E5 85 F1 | 	sub	objptr, ##51164
191d8     F2 FA 01 F6 | 	mov	result1, objptr
191dc     00 B0 01 FF 
191e0     00 FA 45 F5 | 	or	result1, ##56623104
191e4     63 00 00 FF 
191e8     E0 E5 05 F1 | 	add	objptr, ##51168
191ec     F2 FA 61 FC | 	wrlong	result1, objptr
191f0     63 00 00 FF 
191f4     E0 E5 85 F1 | 	sub	objptr, ##51168
191f8     F2 FA 01 F6 | 	mov	result1, objptr
191fc     00 B8 01 FF 
19200     00 FA 45 F5 | 	or	result1, ##57671680
19204     63 00 00 FF 
19208     E4 E5 05 F1 | 	add	objptr, ##51172
1920c     F2 FA 61 FC | 	wrlong	result1, objptr
19210     63 00 00 FF 
19214     E4 E5 85 F1 | 	sub	objptr, ##51172
19218     F2 FA 01 F6 | 	mov	result1, objptr
1921c     94 FA 25 F4 | 	bith	result1, #148
19220     63 00 00 FF 
19224     AC E5 05 F1 | 	add	objptr, ##51116
19228     F2 FA 61 FC | 	wrlong	result1, objptr
1922c     63 00 00 FF 
19230     AC E5 85 F1 | 	sub	objptr, ##51116
19234     F2 FA 01 F6 | 	mov	result1, objptr
19238     57 FA 25 F4 | 	bith	result1, #87
1923c     63 00 00 FF 
19240     EC E5 05 F1 | 	add	objptr, ##51180
19244     F2 FA 61 FC | 	wrlong	result1, objptr
19248     63 00 00 FF 
1924c     EC E5 85 F1 | 	sub	objptr, ##51180
19250     F2 FA 01 F6 | 	mov	result1, objptr
19254     00 C8 01 FF 
19258     00 FA 45 F5 | 	or	result1, ##59768832
1925c     63 00 00 FF 
19260     E8 E5 05 F1 | 	add	objptr, ##51176
19264     F2 FA 61 FC | 	wrlong	result1, objptr
19268     63 00 00 FF 
1926c     E8 E5 85 F1 | 	sub	objptr, ##51176
19270     F2 FA 01 F6 | 	mov	result1, objptr
19274     00 D0 01 FF 
19278     00 FA 45 F5 | 	or	result1, ##60817408
1927c     64 00 00 FF 
19280     00 E4 05 F1 | 	add	objptr, ##51200
19284     F2 FA 61 FC | 	wrlong	result1, objptr
19288     64 00 00 FF 
1928c     00 E4 85 F1 | 	sub	objptr, ##51200
19290     F2 FA 01 F6 | 	mov	result1, objptr
19294     00 D8 01 FF 
19298     00 FA 45 F5 | 	or	result1, ##61865984
1929c     64 00 00 FF 
192a0     04 E4 05 F1 | 	add	objptr, ##51204
192a4     F2 FA 61 FC | 	wrlong	result1, objptr
192a8     64 00 00 FF 
192ac     04 E4 85 F1 | 	sub	objptr, ##51204
192b0     F2 FA 01 F6 | 	mov	result1, objptr
192b4     76 FA 25 F4 | 	bith	result1, #118
192b8     63 00 00 FF 
192bc     F0 E5 05 F1 | 	add	objptr, ##51184
192c0     F2 FA 61 FC | 	wrlong	result1, objptr
192c4     63 00 00 FF 
192c8     F0 E5 85 F1 | 	sub	objptr, ##51184
192cc     F2 FA 01 F6 | 	mov	result1, objptr
192d0     00 E8 01 FF 
192d4     00 FA 45 F5 | 	or	result1, ##63963136
192d8     63 00 00 FF 
192dc     F4 E5 05 F1 | 	add	objptr, ##51188
192e0     F2 FA 61 FC | 	wrlong	result1, objptr
192e4     63 00 00 FF 
192e8     F4 E5 85 F1 | 	sub	objptr, ##51188
192ec     F2 FA 01 F6 | 	mov	result1, objptr
192f0     95 FA 25 F4 | 	bith	result1, #149
192f4     63 00 00 FF 
192f8     F8 E5 05 F1 | 	add	objptr, ##51192
192fc     F2 FA 61 FC | 	wrlong	result1, objptr
19300     63 00 00 FF 
19304     F8 E5 85 F1 | 	sub	objptr, ##51192
19308     F2 FA 01 F6 | 	mov	result1, objptr
1930c     B4 FA 25 F4 | 	bith	result1, #180
19310     63 00 00 FF 
19314     FC E5 05 F1 | 	add	objptr, ##51196
19318     F2 FA 61 FC | 	wrlong	result1, objptr
1931c     63 00 00 FF 
19320     FC E5 85 F1 | 	sub	objptr, ##51196
19324     F2 FA 01 F6 | 	mov	result1, objptr
19328     1A FA 25 F4 | 	bith	result1, #26
1932c     64 00 00 FF 
19330     0C E4 05 F1 | 	add	objptr, ##51212
19334     F2 FA 61 FC | 	wrlong	result1, objptr
19338     64 00 00 FF 
1933c     0C E4 85 F1 | 	sub	objptr, ##51212
19340     F2 FA 01 F6 | 	mov	result1, objptr
19344     00 08 02 FF 
19348     00 FA 45 F5 | 	or	result1, ##68157440
1934c     64 00 00 FF 
19350     08 E4 05 F1 | 	add	objptr, ##51208
19354     F2 FA 61 FC | 	wrlong	result1, objptr
19358     64 00 00 FF 
1935c     08 E4 85 F1 | 	sub	objptr, ##51208
19360     F2 FA 01 F6 | 	mov	result1, objptr
19364     00 10 02 FF 
19368     00 FA 45 F5 | 	or	result1, ##69206016
1936c     64 00 00 FF 
19370     18 E4 05 F1 | 	add	objptr, ##51224
19374     F2 FA 61 FC | 	wrlong	result1, objptr
19378     64 00 00 FF 
1937c     18 E4 85 F1 | 	sub	objptr, ##51224
19380     F2 FA 01 F6 | 	mov	result1, objptr
19384     00 18 02 FF 
19388     00 FA 45 F5 | 	or	result1, ##70254592
1938c     64 00 00 FF 
19390     14 E4 05 F1 | 	add	objptr, ##51220
19394     F2 FA 61 FC | 	wrlong	result1, objptr
19398     64 00 00 FF 
1939c     14 E4 85 F1 | 	sub	objptr, ##51220
193a0     F2 FA 01 F6 | 	mov	result1, objptr
193a4     00 20 02 FF 
193a8     00 FA 45 F5 | 	or	result1, ##71303168
193ac     64 00 00 FF 
193b0     10 E4 05 F1 | 	add	objptr, ##51216
193b4     F2 FA 61 FC | 	wrlong	result1, objptr
193b8     64 00 00 FF 
193bc     10 E4 85 F1 | 	sub	objptr, ##51216
193c0     F2 FA 01 F6 | 	mov	result1, objptr
193c4     00 28 02 FF 
193c8     00 FA 45 F5 | 	or	result1, ##72351744
193cc     64 00 00 FF 
193d0     1C E4 05 F1 | 	add	objptr, ##51228
193d4     F2 FA 61 FC | 	wrlong	result1, objptr
193d8     64 00 00 FF 
193dc     1C E4 85 F1 | 	sub	objptr, ##51228
193e0     F2 FA 01 F6 | 	mov	result1, objptr
193e4     00 30 02 FF 
193e8     00 FA 45 F5 | 	or	result1, ##73400320
193ec     64 00 00 FF 
193f0     20 E4 05 F1 | 	add	objptr, ##51232
193f4     F2 FA 61 FC | 	wrlong	result1, objptr
193f8     64 00 00 FF 
193fc     20 E4 85 F1 | 	sub	objptr, ##51232
19400     F2 FA 01 F6 | 	mov	result1, objptr
19404     00 38 02 FF 
19408     00 FA 45 F5 | 	or	result1, ##74448896
1940c     63 00 00 FF 
19410     B4 E4 05 F1 | 	add	objptr, ##50868
19414     F2 FA 61 FC | 	wrlong	result1, objptr
19418     63 00 00 FF 
1941c     B4 E4 85 F1 | 	sub	objptr, ##50868
19420     F2 FA 01 F6 | 	mov	result1, objptr
19424     00 40 02 FF 
19428     00 FA 45 F5 | 	or	result1, ##75497472
1942c     64 00 00 FF 
19430     38 E4 05 F1 | 	add	objptr, ##51256
19434     F2 FA 61 FC | 	wrlong	result1, objptr
19438     64 00 00 FF 
1943c     38 E4 85 F1 | 	sub	objptr, ##51256
19440     F2 FA 01 F6 | 	mov	result1, objptr
19444     00 48 02 FF 
19448     00 FA 45 F5 | 	or	result1, ##76546048
1944c     64 00 00 FF 
19450     48 E4 05 F1 | 	add	objptr, ##51272
19454     F2 FA 61 FC | 	wrlong	result1, objptr
19458     64 00 00 FF 
1945c     48 E4 85 F1 | 	sub	objptr, ##51272
19460     F2 FA 01 F6 | 	mov	result1, objptr
19464     00 50 02 FF 
19468     00 FA 45 F5 | 	or	result1, ##77594624
1946c     64 00 00 FF 
19470     4C E4 05 F1 | 	add	objptr, ##51276
19474     F2 FA 61 FC | 	wrlong	result1, objptr
19478     64 00 00 FF 
1947c     4C E4 85 F1 | 	sub	objptr, ##51276
19480     F2 FA 01 F6 | 	mov	result1, objptr
19484     00 58 02 FF 
19488     00 FA 45 F5 | 	or	result1, ##78643200
1948c     64 00 00 FF 
19490     44 E4 05 F1 | 	add	objptr, ##51268
19494     F2 FA 61 FC | 	wrlong	result1, objptr
19498     64 00 00 FF 
1949c     44 E4 85 F1 | 	sub	objptr, ##51268
194a0     F2 FA 01 F6 | 	mov	result1, objptr
194a4     00 60 02 FF 
194a8     00 FA 45 F5 | 	or	result1, ##79691776
194ac     64 00 00 FF 
194b0     3C E4 05 F1 | 	add	objptr, ##51260
194b4     F2 FA 61 FC | 	wrlong	result1, objptr
194b8     64 00 00 FF 
194bc     3C E4 85 F1 | 	sub	objptr, ##51260
194c0     F2 FA 01 F6 | 	mov	result1, objptr
194c4     00 68 02 FF 
194c8     00 FA 45 F5 | 	or	result1, ##80740352
194cc     64 00 00 FF 
194d0     40 E4 05 F1 | 	add	objptr, ##51264
194d4     F2 FA 61 FC | 	wrlong	result1, objptr
194d8     64 00 00 FF 
194dc     40 E4 85 F1 | 	sub	objptr, ##51264
194e0     F2 FA 01 F6 | 	mov	result1, objptr
194e4     00 70 02 FF 
194e8     00 FA 45 F5 | 	or	result1, ##81788928
194ec     64 00 00 FF 
194f0     50 E4 05 F1 | 	add	objptr, ##51280
194f4     F2 FA 61 FC | 	wrlong	result1, objptr
194f8     64 00 00 FF 
194fc     50 E4 85 F1 | 	sub	objptr, ##51280
19500     F2 FA 01 F6 | 	mov	result1, objptr
19504     00 78 02 FF 
19508     00 FA 45 F5 | 	or	result1, ##82837504
1950c     64 00 00 FF 
19510     54 E4 05 F1 | 	add	objptr, ##51284
19514     F2 FA 61 FC | 	wrlong	result1, objptr
19518     64 00 00 FF 
1951c     54 E4 85 F1 | 	sub	objptr, ##51284
19520     F2 FA 01 F6 | 	mov	result1, objptr
19524     00 80 02 FF 
19528     00 FA 45 F5 | 	or	result1, ##83886080
1952c     64 00 00 FF 
19530     58 E4 05 F1 | 	add	objptr, ##51288
19534     F2 FA 61 FC | 	wrlong	result1, objptr
19538     64 00 00 FF 
1953c     58 E4 85 F1 | 	sub	objptr, ##51288
19540     F2 FA 01 F6 | 	mov	result1, objptr
19544     00 88 02 FF 
19548     00 FA 45 F5 | 	or	result1, ##84934656
1954c     64 00 00 FF 
19550     5C E4 05 F1 | 	add	objptr, ##51292
19554     F2 FA 61 FC | 	wrlong	result1, objptr
19558     64 00 00 FF 
1955c     5C E4 85 F1 | 	sub	objptr, ##51292
19560     F2 FA 01 F6 | 	mov	result1, objptr
19564     00 90 02 FF 
19568     00 FA 45 F5 | 	or	result1, ##85983232
1956c     64 00 00 FF 
19570     60 E4 05 F1 | 	add	objptr, ##51296
19574     F2 FA 61 FC | 	wrlong	result1, objptr
19578     64 00 00 FF 
1957c     60 E4 85 F1 | 	sub	objptr, ##51296
19580     F2 FA 01 F6 | 	mov	result1, objptr
19584     00 98 02 FF 
19588     00 FA 45 F5 | 	or	result1, ##87031808
1958c     64 00 00 FF 
19590     64 E4 05 F1 | 	add	objptr, ##51300
19594     F2 FA 61 FC | 	wrlong	result1, objptr
19598     64 00 00 FF 
1959c     64 E4 85 F1 | 	sub	objptr, ##51300
195a0     F2 FA 01 F6 | 	mov	result1, objptr
195a4     00 A0 02 FF 
195a8     00 FA 45 F5 | 	or	result1, ##88080384
195ac     64 00 00 FF 
195b0     68 E4 05 F1 | 	add	objptr, ##51304
195b4     F2 FA 61 FC | 	wrlong	result1, objptr
195b8     64 00 00 FF 
195bc     68 E4 85 F1 | 	sub	objptr, ##51304
195c0     F2 FA 01 F6 | 	mov	result1, objptr
195c4     00 A8 02 FF 
195c8     00 FA 45 F5 | 	or	result1, ##89128960
195cc     64 00 00 FF 
195d0     6C E4 05 F1 | 	add	objptr, ##51308
195d4     F2 FA 61 FC | 	wrlong	result1, objptr
195d8     64 00 00 FF 
195dc     6C E4 85 F1 | 	sub	objptr, ##51308
195e0     F2 FA 01 F6 | 	mov	result1, objptr
195e4     00 B0 02 FF 
195e8     00 FA 45 F5 | 	or	result1, ##90177536
195ec     64 00 00 FF 
195f0     78 E4 05 F1 | 	add	objptr, ##51320
195f4     F2 FA 61 FC | 	wrlong	result1, objptr
195f8     64 00 00 FF 
195fc     78 E4 85 F1 | 	sub	objptr, ##51320
19600     F2 FA 01 F6 | 	mov	result1, objptr
19604     00 B8 02 FF 
19608     00 FA 45 F5 | 	or	result1, ##91226112
1960c     64 00 00 FF 
19610     70 E4 05 F1 | 	add	objptr, ##51312
19614     F2 FA 61 FC | 	wrlong	result1, objptr
19618     64 00 00 FF 
1961c     70 E4 85 F1 | 	sub	objptr, ##51312
19620     F2 FA 01 F6 | 	mov	result1, objptr
19624     00 C0 02 FF 
19628     00 FA 45 F5 | 	or	result1, ##92274688
1962c     64 00 00 FF 
19630     74 E4 05 F1 | 	add	objptr, ##51316
19634     F2 FA 61 FC | 	wrlong	result1, objptr
19638     64 00 00 FF 
1963c     74 E4 85 F1 | 	sub	objptr, ##51316
19640     F2 FA 01 F6 | 	mov	result1, objptr
19644     00 C8 02 FF 
19648     00 FA 45 F5 | 	or	result1, ##93323264
1964c     64 00 00 FF 
19650     7C E4 05 F1 | 	add	objptr, ##51324
19654     F2 FA 61 FC | 	wrlong	result1, objptr
19658     64 00 00 FF 
1965c     7C E4 85 F1 | 	sub	objptr, ##51324
19660     F2 FA 01 F6 | 	mov	result1, objptr
19664     00 D0 02 FF 
19668     00 FA 45 F5 | 	or	result1, ##94371840
1966c     64 00 00 FF 
19670     24 E4 05 F1 | 	add	objptr, ##51236
19674     F2 FA 61 FC | 	wrlong	result1, objptr
19678     64 00 00 FF 
1967c     24 E4 85 F1 | 	sub	objptr, ##51236
19680     F2 FA 01 F6 | 	mov	result1, objptr
19684     00 D8 02 FF 
19688     00 FA 45 F5 | 	or	result1, ##95420416
1968c     64 00 00 FF 
19690     2C E4 05 F1 | 	add	objptr, ##51244
19694     F2 FA 61 FC | 	wrlong	result1, objptr
19698     64 00 00 FF 
1969c     2C E4 85 F1 | 	sub	objptr, ##51244
196a0     F2 FA 01 F6 | 	mov	result1, objptr
196a4     00 E0 02 FF 
196a8     00 FA 45 F5 | 	or	result1, ##96468992
196ac     64 00 00 FF 
196b0     30 E4 05 F1 | 	add	objptr, ##51248
196b4     F2 FA 61 FC | 	wrlong	result1, objptr
196b8     64 00 00 FF 
196bc     30 E4 85 F1 | 	sub	objptr, ##51248
196c0     F2 FA 01 F6 | 	mov	result1, objptr
196c4     00 E8 02 FF 
196c8     00 FA 45 F5 | 	or	result1, ##97517568
196cc     64 00 00 FF 
196d0     80 E4 05 F1 | 	add	objptr, ##51328
196d4     F2 FA 61 FC | 	wrlong	result1, objptr
196d8     64 00 00 FF 
196dc     80 E4 85 F1 | 	sub	objptr, ##51328
196e0     F2 FA 01 F6 | 	mov	result1, objptr
196e4     00 F0 02 FF 
196e8     00 FA 45 F5 | 	or	result1, ##98566144
196ec     64 00 00 FF 
196f0     84 E4 05 F1 | 	add	objptr, ##51332
196f4     F2 FA 61 FC | 	wrlong	result1, objptr
196f8     64 00 00 FF 
196fc     84 E4 85 F1 | 	sub	objptr, ##51332
19700     F2 FA 01 F6 | 	mov	result1, objptr
19704     00 F8 02 FF 
19708     00 FA 45 F5 | 	or	result1, ##99614720
1970c     64 00 00 FF 
19710     88 E4 05 F1 | 	add	objptr, ##51336
19714     F2 FA 61 FC | 	wrlong	result1, objptr
19718     64 00 00 FF 
1971c     88 E4 85 F1 | 	sub	objptr, ##51336
19720     F2 FA 01 F6 | 	mov	result1, objptr
19724     39 FA 25 F4 | 	bith	result1, #57
19728     64 00 00 FF 
1972c     34 E4 05 F1 | 	add	objptr, ##51252
19730     F2 FA 61 FC | 	wrlong	result1, objptr
19734     64 00 00 FF 
19738     34 E4 85 F1 | 	sub	objptr, ##51252
1973c     F2 FA 01 F6 | 	mov	result1, objptr
19740     00 08 03 FF 
19744     00 FA 45 F5 | 	or	result1, ##101711872
19748     64 00 00 FF 
1974c     98 E4 05 F1 | 	add	objptr, ##51352
19750     F2 FA 61 FC | 	wrlong	result1, objptr
19754     64 00 00 FF 
19758     98 E4 85 F1 | 	sub	objptr, ##51352
1975c     F2 FA 01 F6 | 	mov	result1, objptr
19760     00 10 03 FF 
19764     00 FA 45 F5 | 	or	result1, ##102760448
19768     64 00 00 FF 
1976c     A0 E4 05 F1 | 	add	objptr, ##51360
19770     F2 FA 61 FC | 	wrlong	result1, objptr
19774     64 00 00 FF 
19778     A0 E4 85 F1 | 	sub	objptr, ##51360
1977c     F2 FA 01 F6 | 	mov	result1, objptr
19780     00 18 03 FF 
19784     00 FA 45 F5 | 	or	result1, ##103809024
19788     64 00 00 FF 
1978c     94 E4 05 F1 | 	add	objptr, ##51348
19790     F2 FA 61 FC | 	wrlong	result1, objptr
19794     64 00 00 FF 
19798     94 E4 85 F1 | 	sub	objptr, ##51348
1979c     F2 FA 01 F6 | 	mov	result1, objptr
197a0     00 20 03 FF 
197a4     00 FA 45 F5 | 	or	result1, ##104857600
197a8     64 00 00 FF 
197ac     90 E4 05 F1 | 	add	objptr, ##51344
197b0     F2 FA 61 FC | 	wrlong	result1, objptr
197b4     64 00 00 FF 
197b8     90 E4 85 F1 | 	sub	objptr, ##51344
197bc     F2 FA 01 F6 | 	mov	result1, objptr
197c0     00 28 03 FF 
197c4     00 FA 45 F5 | 	or	result1, ##105906176
197c8     64 00 00 FF 
197cc     8C E4 05 F1 | 	add	objptr, ##51340
197d0     F2 FA 61 FC | 	wrlong	result1, objptr
197d4     64 00 00 FF 
197d8     8C E4 85 F1 | 	sub	objptr, ##51340
197dc     F2 FA 01 F6 | 	mov	result1, objptr
197e0     00 30 03 FF 
197e4     00 FA 45 F5 | 	or	result1, ##106954752
197e8     64 00 00 FF 
197ec     9C E4 05 F1 | 	add	objptr, ##51356
197f0     F2 FA 61 FC | 	wrlong	result1, objptr
197f4     64 00 00 FF 
197f8     9C E4 85 F1 | 	sub	objptr, ##51356
197fc     F2 FA 01 F6 | 	mov	result1, objptr
19800     00 38 03 FF 
19804     00 FA 45 F5 | 	or	result1, ##108003328
19808     64 00 00 FF 
1980c     A4 E4 05 F1 | 	add	objptr, ##51364
19810     F2 FA 61 FC | 	wrlong	result1, objptr
19814     64 00 00 FF 
19818     A4 E4 85 F1 | 	sub	objptr, ##51364
1981c     F2 FA 01 F6 | 	mov	result1, objptr
19820     00 40 03 FF 
19824     00 FA 45 F5 | 	or	result1, ##109051904
19828     64 00 00 FF 
1982c     A8 E4 05 F1 | 	add	objptr, ##51368
19830     F2 FA 61 FC | 	wrlong	result1, objptr
19834     64 00 00 FF 
19838     A8 E4 85 F1 | 	sub	objptr, ##51368
1983c     F2 FA 01 F6 | 	mov	result1, objptr
19840     00 48 03 FF 
19844     00 FA 45 F5 | 	or	result1, ##110100480
19848     64 00 00 FF 
1984c     AC E4 05 F1 | 	add	objptr, ##51372
19850     F2 FA 61 FC | 	wrlong	result1, objptr
19854     64 00 00 FF 
19858     AC E4 85 F1 | 	sub	objptr, ##51372
1985c     F2 FA 01 F6 | 	mov	result1, objptr
19860     00 50 03 FF 
19864     00 FA 45 F5 | 	or	result1, ##111149056
19868     64 00 00 FF 
1986c     B4 E4 05 F1 | 	add	objptr, ##51380
19870     F2 FA 61 FC | 	wrlong	result1, objptr
19874     64 00 00 FF 
19878     B4 E4 85 F1 | 	sub	objptr, ##51380
1987c     F2 FA 01 F6 | 	mov	result1, objptr
19880     00 58 03 FF 
19884     00 FA 45 F5 | 	or	result1, ##112197632
19888     64 00 00 FF 
1988c     B8 E4 05 F1 | 	add	objptr, ##51384
19890     F2 FA 61 FC | 	wrlong	result1, objptr
19894     64 00 00 FF 
19898     B8 E4 85 F1 | 	sub	objptr, ##51384
1989c     F2 FA 01 F6 | 	mov	result1, objptr
198a0     00 60 03 FF 
198a4     00 FA 45 F5 | 	or	result1, ##113246208
198a8     64 00 00 FF 
198ac     BC E4 05 F1 | 	add	objptr, ##51388
198b0     F2 FA 61 FC | 	wrlong	result1, objptr
198b4     64 00 00 FF 
198b8     BC E4 85 F1 | 	sub	objptr, ##51388
198bc     F2 FA 01 F6 | 	mov	result1, objptr
198c0     00 68 03 FF 
198c4     00 FA 45 F5 | 	or	result1, ##114294784
198c8     64 00 00 FF 
198cc     C0 E4 05 F1 | 	add	objptr, ##51392
198d0     F2 FA 61 FC | 	wrlong	result1, objptr
198d4     64 00 00 FF 
198d8     C0 E4 85 F1 | 	sub	objptr, ##51392
198dc     F2 FA 01 F6 | 	mov	result1, objptr
198e0     00 70 03 FF 
198e4     00 FA 45 F5 | 	or	result1, ##115343360
198e8     64 00 00 FF 
198ec     C4 E4 05 F1 | 	add	objptr, ##51396
198f0     F2 FA 61 FC | 	wrlong	result1, objptr
198f4     64 00 00 FF 
198f8     C4 E4 85 F1 | 	sub	objptr, ##51396
198fc     F2 FA 01 F6 | 	mov	result1, objptr
19900     00 78 03 FF 
19904     00 FA 45 F5 | 	or	result1, ##116391936
19908     64 00 00 FF 
1990c     C8 E4 05 F1 | 	add	objptr, ##51400
19910     F2 FA 61 FC | 	wrlong	result1, objptr
19914     64 00 00 FF 
19918     C8 E4 85 F1 | 	sub	objptr, ##51400
1991c     F2 FA 01 F6 | 	mov	result1, objptr
19920     58 FA 25 F4 | 	bith	result1, #88
19924     64 00 00 FF 
19928     CC E4 05 F1 | 	add	objptr, ##51404
1992c     F2 FA 61 FC | 	wrlong	result1, objptr
19930     64 00 00 FF 
19934     CC E4 85 F1 | 	sub	objptr, ##51404
19938     F2 FA 01 F6 | 	mov	result1, objptr
1993c     00 88 03 FF 
19940     00 FA 45 F5 | 	or	result1, ##118489088
19944     64 00 00 FF 
19948     D0 E4 05 F1 | 	add	objptr, ##51408
1994c     F2 FA 61 FC | 	wrlong	result1, objptr
19950     64 00 00 FF 
19954     D0 E4 85 F1 | 	sub	objptr, ##51408
19958     F2 FA 01 F6 | 	mov	result1, objptr
1995c     00 90 03 FF 
19960     00 FA 45 F5 | 	or	result1, ##119537664
19964     64 00 00 FF 
19968     B0 E4 05 F1 | 	add	objptr, ##51376
1996c     F2 FA 61 FC | 	wrlong	result1, objptr
19970     64 00 00 FF 
19974     B0 E4 85 F1 | 	sub	objptr, ##51376
19978     F2 FA 01 F6 | 	mov	result1, objptr
1997c     00 98 03 FF 
19980     00 FA 45 F5 | 	or	result1, ##120586240
19984     63 00 00 FF 
19988     A8 E4 05 F1 | 	add	objptr, ##50856
1998c     F2 FA 61 FC | 	wrlong	result1, objptr
19990     63 00 00 FF 
19994     A8 E4 85 F1 | 	sub	objptr, ##50856
19998     F2 FA 01 F6 | 	mov	result1, objptr
1999c     00 A0 03 FF 
199a0     00 FA 45 F5 | 	or	result1, ##121634816
199a4     64 00 00 FF 
199a8     D4 E4 05 F1 | 	add	objptr, ##51412
199ac     F2 FA 61 FC | 	wrlong	result1, objptr
199b0     64 00 00 FF 
199b4     D4 E4 85 F1 | 	sub	objptr, ##51412
199b8     F2 FA 01 F6 | 	mov	result1, objptr
199bc     00 A8 03 FF 
199c0     00 FA 45 F5 | 	or	result1, ##122683392
199c4     64 00 00 FF 
199c8     D8 E4 05 F1 | 	add	objptr, ##51416
199cc     F2 FA 61 FC | 	wrlong	result1, objptr
199d0     64 00 00 FF 
199d4     D8 E4 85 F1 | 	sub	objptr, ##51416
199d8     F2 FA 01 F6 | 	mov	result1, objptr
199dc     00 B0 03 FF 
199e0     00 FA 45 F5 | 	or	result1, ##123731968
199e4     64 00 00 FF 
199e8     EC E4 05 F1 | 	add	objptr, ##51436
199ec     F2 FA 61 FC | 	wrlong	result1, objptr
199f0     64 00 00 FF 
199f4     EC E4 85 F1 | 	sub	objptr, ##51436
199f8     F2 FA 01 F6 | 	mov	result1, objptr
199fc     00 B8 03 FF 
19a00     00 FA 45 F5 | 	or	result1, ##124780544
19a04     64 00 00 FF 
19a08     E8 E4 05 F1 | 	add	objptr, ##51432
19a0c     F2 FA 61 FC | 	wrlong	result1, objptr
19a10     64 00 00 FF 
19a14     E8 E4 85 F1 | 	sub	objptr, ##51432
19a18     F2 FA 01 F6 | 	mov	result1, objptr
19a1c     77 FA 25 F4 | 	bith	result1, #119
19a20     64 00 00 FF 
19a24     E0 E4 05 F1 | 	add	objptr, ##51424
19a28     F2 FA 61 FC | 	wrlong	result1, objptr
19a2c     64 00 00 FF 
19a30     E0 E4 85 F1 | 	sub	objptr, ##51424
19a34     F2 FA 01 F6 | 	mov	result1, objptr
19a38     00 C8 03 FF 
19a3c     00 FA 45 F5 | 	or	result1, ##126877696
19a40     64 00 00 FF 
19a44     DC E4 05 F1 | 	add	objptr, ##51420
19a48     F2 FA 61 FC | 	wrlong	result1, objptr
19a4c     64 00 00 FF 
19a50     DC E4 85 F1 | 	sub	objptr, ##51420
19a54     F2 FA 01 F6 | 	mov	result1, objptr
19a58     00 D0 03 FF 
19a5c     00 FA 45 F5 | 	or	result1, ##127926272
19a60     64 00 00 FF 
19a64     FC E4 05 F1 | 	add	objptr, ##51452
19a68     F2 FA 61 FC | 	wrlong	result1, objptr
19a6c     64 00 00 FF 
19a70     FC E4 85 F1 | 	sub	objptr, ##51452
19a74     F2 FA 01 F6 | 	mov	result1, objptr
19a78     00 D8 03 FF 
19a7c     00 FA 45 F5 | 	or	result1, ##128974848
19a80     64 00 00 FF 
19a84     F0 E4 05 F1 | 	add	objptr, ##51440
19a88     F2 FA 61 FC | 	wrlong	result1, objptr
19a8c     64 00 00 FF 
19a90     F0 E4 85 F1 | 	sub	objptr, ##51440
19a94     F2 FA 01 F6 | 	mov	result1, objptr
19a98     96 FA 25 F4 | 	bith	result1, #150
19a9c     64 00 00 FF 
19aa0     F4 E4 05 F1 | 	add	objptr, ##51444
19aa4     F2 FA 61 FC | 	wrlong	result1, objptr
19aa8     64 00 00 FF 
19aac     F4 E4 85 F1 | 	sub	objptr, ##51444
19ab0     F2 FA 01 F6 | 	mov	result1, objptr
19ab4     00 E8 03 FF 
19ab8     00 FA 45 F5 | 	or	result1, ##131072000
19abc     64 00 00 FF 
19ac0     F8 E4 05 F1 | 	add	objptr, ##51448
19ac4     F2 FA 61 FC | 	wrlong	result1, objptr
19ac8     64 00 00 FF 
19acc     F8 E4 85 F1 | 	sub	objptr, ##51448
19ad0     F2 FA 01 F6 | 	mov	result1, objptr
19ad4     B5 FA 25 F4 | 	bith	result1, #181
19ad8     64 00 00 FF 
19adc     00 E5 05 F1 | 	add	objptr, ##51456
19ae0     F2 FA 61 FC | 	wrlong	result1, objptr
19ae4     64 00 00 FF 
19ae8     00 E5 85 F1 | 	sub	objptr, ##51456
19aec     F2 FA 01 F6 | 	mov	result1, objptr
19af0     D4 FA 25 F4 | 	bith	result1, #212
19af4     64 00 00 FF 
19af8     04 E5 05 F1 | 	add	objptr, ##51460
19afc     F2 FA 61 FC | 	wrlong	result1, objptr
19b00     64 00 00 FF 
19b04     04 E5 85 F1 | 	sub	objptr, ##51460
19b08     F2 FA 01 F6 | 	mov	result1, objptr
19b0c     1B FA 25 F4 | 	bith	result1, #27
19b10     64 00 00 FF 
19b14     08 E5 05 F1 | 	add	objptr, ##51464
19b18     F2 FA 61 FC | 	wrlong	result1, objptr
19b1c     64 00 00 FF 
19b20     08 E5 85 F1 | 	sub	objptr, ##51464
19b24     F2 FA 01 F6 | 	mov	result1, objptr
19b28     00 08 04 FF 
19b2c     00 FA 45 F5 | 	or	result1, ##135266304
19b30     64 00 00 FF 
19b34     0C E5 05 F1 | 	add	objptr, ##51468
19b38     F2 FA 61 FC | 	wrlong	result1, objptr
19b3c     64 00 00 FF 
19b40     0C E5 85 F1 | 	sub	objptr, ##51468
19b44     F2 FA 01 F6 | 	mov	result1, objptr
19b48     00 10 04 FF 
19b4c     00 FA 45 F5 | 	or	result1, ##136314880
19b50     64 00 00 FF 
19b54     10 E5 05 F1 | 	add	objptr, ##51472
19b58     F2 FA 61 FC | 	wrlong	result1, objptr
19b5c     64 00 00 FF 
19b60     10 E5 85 F1 | 	sub	objptr, ##51472
19b64                 | _init_commands_ret
19b64     2D 00 64 FD | 	ret
19b68                 | 
19b68                 | ' 
19b68                 | ' ''--------------------------------Error strings -------------------------------------
19b68                 | ' sub init_audio
19b68                 | _init_audio
19b68     05 4A 05 F6 | 	mov	COUNT_, #5
19b6c     A8 00 A0 FD | 	call	#pushregs_
19b70     00 C0 1F FF 
19b74     00 1E 06 F6 | 	mov	local01, ##1065353216
19b78                 | ' for i=0 to 1023 : samplebuf(0,i)=round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
19b78     00 20 06 F6 | 	mov	local02, #0
19b7c                 | LR__2060
19b7c     10 23 02 F6 | 	mov	local03, local02
19b80     01 22 66 F0 | 	shl	local03, #1
19b84     0C 00 00 FF 
19b88     D8 E4 05 F1 | 	add	objptr, ##6360
19b8c     F2 22 02 F1 | 	add	local03, objptr
19b90     58 7F 23 FF 
19b94     00 24 06 F6 | 	mov	local04, ##1191096320
19b98     0C 00 00 FF 
19b9c     D8 E4 85 F1 | 	sub	objptr, ##6360
19ba0     10 13 52 F6 | 	abs	arg01, local02 wc
19ba4     1F 26 C6 C9 |  if_b	decod	local05, #31
19ba8     00 26 06 36 |  if_ae	mov	local05, #0
19bac     40 77 B0 FD | 	call	#__system___float_fromuns
19bb0     13 FB 61 F5 | 	xor	result1, local05
19bb4     FD 12 02 F6 | 	mov	arg01, result1
19bb8     87 24 20 FF 
19bbc     DB 15 06 F6 | 	mov	arg02, ##1078530011
19bc0     30 7B B0 FD | 	call	#__system___float_mul
19bc4     FD 12 02 F6 | 	mov	arg01, result1
19bc8     00 00 22 FF 
19bcc     00 14 06 F6 | 	mov	arg02, ##1140850688
19bd0     24 7D B0 FD | 	call	#__system___float_div
19bd4     FD 12 02 F6 | 	mov	arg01, result1
19bd8     54 84 B0 FD | 	call	#__system____builtin_sinf
19bdc     FD 14 02 F6 | 	mov	arg02, result1
19be0     12 13 02 F6 | 	mov	arg01, local04
19be4     0C 7B B0 FD | 	call	#__system___float_mul
19be8     FD 12 02 F6 | 	mov	arg01, result1
19bec     01 14 06 F6 | 	mov	arg02, #1
19bf0     C8 7F B0 FD | 	call	#__system___float_tointeger
19bf4     11 FB 51 FC | 	wrword	result1, local03
19bf8     01 20 06 F1 | 	add	local02, #1
19bfc     02 00 00 FF 
19c00     00 20 56 F2 | 	cmps	local02, ##1024 wc
19c04     74 FF 9F CD |  if_b	jmp	#LR__2060
19c08                 | ' for i=0 to 511  : samplebuf(1,i)= -32512+127*i: samplebuf(1,512+i)=-samplebuf(1,i) : next i   		' 1 : triangle 
19c08     00 20 06 F6 | 	mov	local02, #0
19c0c     10 00 00 FF 
19c10     D8 E4 05 F1 | 	add	objptr, ##8408
19c14     97 6A 48 FB | 	callpa	#(@LR__2064-@LR__2061)>>2,fcache_load_ptr_
19c18                 | LR__2061
19c18     10 23 02 F6 | 	mov	local03, local02
19c1c     01 22 66 F0 | 	shl	local03, #1
19c20     F2 22 02 F1 | 	add	local03, objptr
19c24     10 27 02 F6 | 	mov	local05, local02
19c28     07 26 66 F0 | 	shl	local05, #7
19c2c     10 27 82 F1 | 	sub	local05, local02
19c30     C0 FF 7F FF 
19c34     00 25 06 F6 | 	mov	local04, ##-32512
19c38     13 25 02 F1 | 	add	local04, local05
19c3c     11 25 52 FC | 	wrword	local04, local03
19c40     09 22 C6 F9 | 	decod	local03, #9
19c44     10 23 02 F1 | 	add	local03, local02
19c48     01 22 66 F0 | 	shl	local03, #1
19c4c     F2 22 02 F1 | 	add	local03, objptr
19c50     10 25 02 F6 | 	mov	local04, local02
19c54     01 24 66 F0 | 	shl	local04, #1
19c58     F2 24 02 F1 | 	add	local04, objptr
19c5c     12 25 E2 FA | 	rdword	local04, local04
19c60     0F 24 66 F7 | 	signx	local04, #15
19c64     12 25 62 F6 | 	neg	local04, local04
19c68     11 25 52 FC | 	wrword	local04, local03
19c6c     01 20 06 F1 | 	add	local02, #1
19c70     01 00 00 FF 
19c74     00 20 56 F2 | 	cmps	local02, ##512 wc
19c78     9C FF 9F CD |  if_b	jmp	#LR__2061
19c7c                 | ' for i=0 to 1023 : samplebuf(2,i)= -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
19c7c     00 20 06 F6 | 	mov	local02, #0
19c80     04 00 00 FF 
19c84     00 E4 05 F1 | 	add	objptr, ##2048
19c88                 | LR__2062
19c88     10 23 02 F6 | 	mov	local03, local02
19c8c     01 22 66 F0 | 	shl	local03, #1
19c90     F2 22 02 F1 | 	add	local03, objptr
19c94     10 27 02 F6 | 	mov	local05, local02
19c98     06 26 66 F0 | 	shl	local05, #6
19c9c     10 27 82 F1 | 	sub	local05, local02
19ca0     C1 FF 7F FF 
19ca4     00 24 06 F6 | 	mov	local04, ##-32256
19ca8     13 25 02 F1 | 	add	local04, local05
19cac     11 25 52 FC | 	wrword	local04, local03
19cb0     01 20 06 F1 | 	add	local02, #1
19cb4     02 00 00 FF 
19cb8     00 20 56 F2 | 	cmps	local02, ##1024 wc
19cbc     C8 FF 9F CD |  if_b	jmp	#LR__2062
19cc0                 | ' for i=0 to 127  : samplebuf(3,i)= -32600 : next i : for i=128 to 1023 : samplebuf(3,i) =32600 : next i 	' 3 pulse 12.5%
19cc0     00 20 06 F6 | 	mov	local02, #0
19cc4     04 00 00 FF 
19cc8     00 E4 05 F1 | 	add	objptr, ##2048
19ccc                 | LR__2063
19ccc     10 23 02 F6 | 	mov	local03, local02
19cd0     01 22 66 F0 | 	shl	local03, #1
19cd4     F2 22 02 F1 | 	add	local03, objptr
19cd8     40 00 80 FF 
19cdc     11 51 59 FC | 	wrword	##32936, local03
19ce0     01 20 06 F1 | 	add	local02, #1
19ce4     80 20 56 F2 | 	cmps	local02, #128 wc
19ce8     E0 FF 9F CD |  if_b	jmp	#LR__2063
19cec                 | LR__2064
19cec     80 20 06 F6 | 	mov	local02, #128
19cf0     97 68 48 FB | 	callpa	#(@LR__2070-@LR__2065)>>2,fcache_load_ptr_
19cf4                 | LR__2065
19cf4     10 23 02 F6 | 	mov	local03, local02
19cf8     01 22 66 F0 | 	shl	local03, #1
19cfc     F2 22 02 F1 | 	add	local03, objptr
19d00     3F 00 80 FF 
19d04     11 B1 5A FC | 	wrword	##32600, local03
19d08     01 20 06 F1 | 	add	local02, #1
19d0c     02 00 00 FF 
19d10     00 20 16 F2 | 	cmp	local02, ##1024 wc
19d14     DC FF 9F CD |  if_b	jmp	#LR__2065
19d18                 | ' for i=0 to 511  : samplebuf(4,i)= -32600 : next i : for i=512 to 1023 : samplebuf(4,i) =32600 : next i 	' 4 square
19d18     00 20 06 F6 | 	mov	local02, #0
19d1c     04 00 00 FF 
19d20     00 E4 05 F1 | 	add	objptr, ##2048
19d24                 | LR__2066
19d24     10 23 02 F6 | 	mov	local03, local02
19d28     01 22 66 F0 | 	shl	local03, #1
19d2c     F2 22 02 F1 | 	add	local03, objptr
19d30     40 00 80 FF 
19d34     11 51 59 FC | 	wrword	##32936, local03
19d38     01 20 06 F1 | 	add	local02, #1
19d3c     01 00 00 FF 
19d40     00 20 56 F2 | 	cmps	local02, ##512 wc
19d44     DC FF 9F CD |  if_b	jmp	#LR__2066
19d48     09 20 C6 F9 | 	decod	local02, #9
19d4c                 | LR__2067
19d4c     10 23 02 F6 | 	mov	local03, local02
19d50     01 22 66 F0 | 	shl	local03, #1
19d54     F2 22 02 F1 | 	add	local03, objptr
19d58     3F 00 80 FF 
19d5c     11 B1 5A FC | 	wrword	##32600, local03
19d60     01 20 06 F1 | 	add	local02, #1
19d64     02 00 00 FF 
19d68     00 20 16 F2 | 	cmp	local02, ##1024 wc
19d6c     DC FF 9F CD |  if_b	jmp	#LR__2067
19d70                 | ' for i=0 to 255  : samplebuf(5,i)= -32600 : next i : for i=256 to 1023 : samplebuf(5,i) =32600 : next i 	' 5 pulse 25%
19d70     00 20 06 F6 | 	mov	local02, #0
19d74     04 00 00 FF 
19d78     00 E4 05 F1 | 	add	objptr, ##2048
19d7c                 | LR__2068
19d7c     10 23 02 F6 | 	mov	local03, local02
19d80     01 22 66 F0 | 	shl	local03, #1
19d84     F2 22 02 F1 | 	add	local03, objptr
19d88     40 00 80 FF 
19d8c     11 51 59 FC | 	wrword	##32936, local03
19d90     01 20 06 F1 | 	add	local02, #1
19d94     00 21 56 F2 | 	cmps	local02, #256 wc
19d98     E0 FF 9F CD |  if_b	jmp	#LR__2068
19d9c     00 21 06 F6 | 	mov	local02, #256
19da0                 | LR__2069
19da0     10 23 02 F6 | 	mov	local03, local02
19da4     01 22 66 F0 | 	shl	local03, #1
19da8     F2 22 02 F1 | 	add	local03, objptr
19dac     3F 00 80 FF 
19db0     11 B1 5A FC | 	wrword	##32600, local03
19db4     01 20 06 F1 | 	add	local02, #1
19db8     02 00 00 FF 
19dbc     00 20 16 F2 | 	cmp	local02, ##1024 wc
19dc0     DC FF 9F CD |  if_b	jmp	#LR__2069
19dc4                 | LR__2070
19dc4                 | ' for i=0 to 1023 : samplebuf(6,i)= dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
19dc4     00 20 06 F6 | 	mov	local02, #0
19dc8     04 00 00 FF 
19dcc     00 E4 05 F1 | 	add	objptr, ##2048
19dd0     14 00 00 FF 
19dd4     C6 EA 05 F1 | 	add	ptr__dat__, ##10438
19dd8     97 1C 48 FB | 	callpa	#(@LR__2072-@LR__2071)>>2,fcache_load_ptr_
19ddc                 | LR__2071
19ddc     10 23 02 F6 | 	mov	local03, local02
19de0     01 22 66 F0 | 	shl	local03, #1
19de4     F2 22 02 F1 | 	add	local03, objptr
19de8     F5 12 02 F6 | 	mov	arg01, ptr__dat__
19dec     10 12 06 F1 | 	add	arg01, #16
19df0     10 FB 01 F6 | 	mov	result1, local02
19df4     01 FA 65 F0 | 	shl	result1, #1
19df8     FD 12 02 F1 | 	add	arg01, result1
19dfc     09 FB E1 FA | 	rdword	result1, arg01
19e00     11 FB 51 FC | 	wrword	result1, local03
19e04     01 20 06 F1 | 	add	local02, #1
19e08     02 00 00 FF 
19e0c     00 20 56 F2 | 	cmps	local02, ##1024 wc
19e10     C8 FF 9F CD |  if_b	jmp	#LR__2071
19e14                 | LR__2072
19e14                 | ' for i=0 to 1023 : samplebuf(7,i)= dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
19e14     00 20 06 F6 | 	mov	local02, #0
19e18     04 00 00 FF 
19e1c     00 E4 05 F1 | 	add	objptr, ##2048
19e20     04 00 00 FF 
19e24     10 EA 85 F1 | 	sub	ptr__dat__, ##2064
19e28     97 1C 48 FB | 	callpa	#(@LR__2074-@LR__2073)>>2,fcache_load_ptr_
19e2c                 | LR__2073
19e2c     10 23 02 F6 | 	mov	local03, local02
19e30     01 22 66 F0 | 	shl	local03, #1
19e34     F2 22 02 F1 | 	add	local03, objptr
19e38     F5 12 02 F6 | 	mov	arg01, ptr__dat__
19e3c     10 12 06 F1 | 	add	arg01, #16
19e40     10 FB 01 F6 | 	mov	result1, local02
19e44     01 FA 65 F0 | 	shl	result1, #1
19e48     FD 12 02 F1 | 	add	arg01, result1
19e4c     09 FB E1 FA | 	rdword	result1, arg01
19e50     11 FB 51 FC | 	wrword	result1, local03
19e54     01 20 06 F1 | 	add	local02, #1
19e58     02 00 00 FF 
19e5c     00 20 56 F2 | 	cmps	local02, ##1024 wc
19e60     C8 FF 9F CD |  if_b	jmp	#LR__2073
19e64                 | LR__2074
19e64     10 00 00 FF 
19e68     B6 EA 85 F1 | 	sub	ptr__dat__, ##8374
19e6c                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
19e6c     00 20 06 F6 | 	mov	local02, #0
19e70     04 00 00 FF 
19e74     00 E4 05 F1 | 	add	objptr, ##2048
19e78     97 18 48 FB | 	callpa	#(@LR__2076-@LR__2075)>>2,fcache_load_ptr_
19e7c                 | LR__2075
19e7c     10 23 02 F6 | 	mov	local03, local02
19e80     01 22 66 F0 | 	shl	local03, #1
19e84     F2 22 02 F1 | 	add	local03, objptr
19e88     10 27 02 F6 | 	mov	local05, local02
19e8c     08 26 66 F0 | 	shl	local05, #8
19e90     7F 00 00 FF 
19e94     00 25 06 F6 | 	mov	local04, ##65280
19e98     13 25 82 F1 | 	sub	local04, local05
19e9c     11 25 52 FC | 	wrword	local04, local03
19ea0     01 20 06 F1 | 	add	local02, #1
19ea4     00 21 56 F2 | 	cmps	local02, #256 wc
19ea8     D0 FF 9F CD |  if_b	jmp	#LR__2075
19eac                 | LR__2076
19eac     2C 00 00 FF 
19eb0     D8 E4 85 F1 | 	sub	objptr, ##22744
19eb4                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
19eb4     00 20 06 F6 | 	mov	local02, #0
19eb8                 | LR__2077
19eb8     10 23 02 F6 | 	mov	local03, local02
19ebc     01 22 66 F0 | 	shl	local03, #1
19ec0     2D 00 00 FF 
19ec4     D8 E4 05 F1 | 	add	objptr, ##23256
19ec8     F2 22 02 F1 | 	add	local03, objptr
19ecc     80 BF 23 FF 
19ed0     00 12 06 F6 | 	mov	arg01, ##1199505408
19ed4     0F 15 02 F6 | 	mov	arg02, local01
19ed8     2D 00 00 FF 
19edc     D8 E4 85 F1 | 	sub	objptr, ##23256
19ee0     10 78 B0 FD | 	call	#__system___float_mul
19ee4     FD 12 02 F6 | 	mov	arg01, result1
19ee8     01 14 06 F6 | 	mov	arg02, #1
19eec     CC 7C B0 FD | 	call	#__system___float_tointeger
19ef0     11 FB 51 FC | 	wrword	result1, local03
19ef4     0F 13 02 F6 | 	mov	arg01, local01
19ef8     CC BC 1F FF 
19efc     9A 15 06 F6 | 	mov	arg02, ##1064933786
19f00     F0 77 B0 FD | 	call	#__system___float_mul
19f04     FD 1E 02 F6 | 	mov	local01, result1
19f08     01 20 06 F1 | 	add	local02, #1
19f0c     00 21 56 F2 | 	cmps	local02, #256 wc
19f10     A4 FF 9F CD |  if_b	jmp	#LR__2077
19f14     2E 00 00 FF 
19f18     D6 E4 05 F1 | 	add	objptr, ##23766
19f1c     F2 00 58 FC | 	wrword	#0, objptr
19f20                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
19f20     00 20 06 F6 | 	mov	local02, #0
19f24     02 E4 05 F1 | 	add	objptr, #2
19f28     97 10 48 FB | 	callpa	#(@LR__2079-@LR__2078)>>2,fcache_load_ptr_
19f2c                 | LR__2078
19f2c     10 23 02 F6 | 	mov	local03, local02
19f30     01 22 66 F0 | 	shl	local03, #1
19f34     F2 22 02 F1 | 	add	local03, objptr
19f38     7F 00 80 FF 
19f3c     11 01 5A FC | 	wrword	##65280, local03
19f40     01 20 06 F1 | 	add	local02, #1
19f44     FF 20 56 F2 | 	cmps	local02, #255 wc
19f48     E0 FF 9F CD |  if_b	jmp	#LR__2078
19f4c                 | LR__2079
19f4c     FE E5 05 F1 | 	add	objptr, #510
19f50     F2 00 58 FC | 	wrword	#0, objptr
19f54                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
19f54     00 20 06 F6 | 	mov	local02, #0
19f58     02 E4 05 F1 | 	add	objptr, #2
19f5c     97 52 48 FB | 	callpa	#(@LR__2084-@LR__2080)>>2,fcache_load_ptr_
19f60                 | LR__2080
19f60     10 23 02 F6 | 	mov	local03, local02
19f64     01 22 66 F0 | 	shl	local03, #1
19f68     F2 22 02 F1 | 	add	local03, objptr
19f6c     10 25 02 F6 | 	mov	local04, local02
19f70     0C 24 66 F0 | 	shl	local04, #12
19f74     11 25 52 FC | 	wrword	local04, local03
19f78     01 20 06 F1 | 	add	local02, #1
19f7c     10 20 56 F2 | 	cmps	local02, #16 wc
19f80     DC FF 9F CD |  if_b	jmp	#LR__2080
19f84                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
19f84     10 20 06 F6 | 	mov	local02, #16
19f88                 | LR__2081
19f88     10 23 02 F6 | 	mov	local03, local02
19f8c     01 22 66 F0 | 	shl	local03, #1
19f90     F2 22 02 F1 | 	add	local03, objptr
19f94     7F 00 80 FF 
19f98     11 01 5A FC | 	wrword	##65280, local03
19f9c     01 20 06 F1 | 	add	local02, #1
19fa0     F0 20 16 F2 | 	cmp	local02, #240 wc
19fa4     E0 FF 9F CD |  if_b	jmp	#LR__2081
19fa8                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
19fa8     F0 20 06 F6 | 	mov	local02, #240
19fac                 | LR__2082
19fac     10 23 02 F6 | 	mov	local03, local02
19fb0     01 22 66 F0 | 	shl	local03, #1
19fb4     F2 22 02 F1 | 	add	local03, objptr
19fb8     FF 26 06 F6 | 	mov	local05, #255
19fbc     10 27 82 F1 | 	sub	local05, local02
19fc0     0C 26 66 F0 | 	shl	local05, #12
19fc4     11 27 52 FC | 	wrword	local05, local03
19fc8     01 20 06 F1 | 	add	local02, #1
19fcc     00 21 16 F2 | 	cmp	local02, #256 wc
19fd0     D8 FF 9F CD |  if_b	jmp	#LR__2082
19fd4                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
19fd4     00 20 06 F6 | 	mov	local02, #0
19fd8     01 00 00 FF 
19fdc     00 E4 05 F1 | 	add	objptr, ##512
19fe0                 | LR__2083
19fe0     10 23 02 F6 | 	mov	local03, local02
19fe4     01 22 66 F0 | 	shl	local03, #1
19fe8     F2 22 02 F1 | 	add	local03, objptr
19fec     10 25 02 F6 | 	mov	local04, local02
19ff0     08 24 66 F0 | 	shl	local04, #8
19ff4     11 25 52 FC | 	wrword	local04, local03
19ff8     01 20 06 F1 | 	add	local02, #1
19ffc     00 21 56 F2 | 	cmps	local02, #256 wc
1a000     DC FF 9F CD |  if_b	jmp	#LR__2083
1a004                 | LR__2084
1a004     FE E5 05 F1 | 	add	objptr, #510
1a008     F2 00 58 FC | 	wrword	#0, objptr
1a00c                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1a00c     00 20 06 F6 | 	mov	local02, #0
1a010     02 E4 05 F1 | 	add	objptr, #2
1a014     97 6A 48 FB | 	callpa	#(@LR__2089-@LR__2085)>>2,fcache_load_ptr_
1a018                 | LR__2085
1a018     10 23 02 F6 | 	mov	local03, local02
1a01c     01 22 66 F0 | 	shl	local03, #1
1a020     F2 22 02 F1 | 	add	local03, objptr
1a024     10 25 02 F6 | 	mov	local04, local02
1a028     04 24 66 F0 | 	shl	local04, #4
1a02c     10 25 02 F1 | 	add	local04, local02
1a030     04 24 66 F0 | 	shl	local04, #4
1a034     11 25 52 FC | 	wrword	local04, local03
1a038     01 20 06 F1 | 	add	local02, #1
1a03c     F0 20 56 F2 | 	cmps	local02, #240 wc
1a040     D4 FF 9F CD |  if_b	jmp	#LR__2085
1a044     F0 20 06 F6 | 	mov	local02, #240
1a048                 | LR__2086
1a048     10 23 02 F6 | 	mov	local03, local02
1a04c     01 22 66 F0 | 	shl	local03, #1
1a050     F2 22 02 F1 | 	add	local03, objptr
1a054     FF 26 06 F6 | 	mov	local05, #255
1a058     10 27 82 F1 | 	sub	local05, local02
1a05c     0C 26 66 F0 | 	shl	local05, #12
1a060     11 27 52 FC | 	wrword	local05, local03
1a064     01 20 06 F1 | 	add	local02, #1
1a068     00 21 16 F2 | 	cmp	local02, #256 wc
1a06c     D8 FF 9F CD |  if_b	jmp	#LR__2086
1a070                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
1a070     00 20 06 F6 | 	mov	local02, #0
1a074     01 00 00 FF 
1a078     00 E4 05 F1 | 	add	objptr, ##512
1a07c                 | LR__2087
1a07c     10 23 02 F6 | 	mov	local03, local02
1a080     01 22 66 F0 | 	shl	local03, #1
1a084     F2 22 02 F1 | 	add	local03, objptr
1a088     10 25 02 F6 | 	mov	local04, local02
1a08c     09 24 66 F0 | 	shl	local04, #9
1a090     11 25 52 FC | 	wrword	local04, local03
1a094     FF 22 06 F6 | 	mov	local03, #255
1a098     10 23 82 F1 | 	sub	local03, local02
1a09c     01 22 66 F0 | 	shl	local03, #1
1a0a0     F2 22 02 F1 | 	add	local03, objptr
1a0a4     10 25 02 F6 | 	mov	local04, local02
1a0a8     09 24 66 F0 | 	shl	local04, #9
1a0ac     11 25 52 FC | 	wrword	local04, local03
1a0b0     01 20 06 F1 | 	add	local02, #1
1a0b4     80 20 56 F2 | 	cmps	local02, #128 wc
1a0b8     C0 FF 9F CD |  if_b	jmp	#LR__2087
1a0bc                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1a0bc     00 20 06 F6 | 	mov	local02, #0
1a0c0     01 00 00 FF 
1a0c4     00 E4 05 F1 | 	add	objptr, ##512
1a0c8                 | LR__2088
1a0c8     10 23 02 F6 | 	mov	local03, local02
1a0cc     01 22 66 F0 | 	shl	local03, #1
1a0d0     F2 22 02 F1 | 	add	local03, objptr
1a0d4     10 25 02 F6 | 	mov	local04, local02
1a0d8     0D 24 66 F0 | 	shl	local04, #13
1a0dc     11 25 52 FC | 	wrword	local04, local03
1a0e0     01 20 06 F1 | 	add	local02, #1
1a0e4     08 20 56 F2 | 	cmps	local02, #8 wc
1a0e8     DC FF 9F CD |  if_b	jmp	#LR__2088
1a0ec                 | LR__2089
1a0ec                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1a0ec     08 20 06 F6 | 	mov	local02, #8
1a0f0     97 42 48 FB | 	callpa	#(@LR__2093-@LR__2090)>>2,fcache_load_ptr_
1a0f4                 | LR__2090
1a0f4     10 23 02 F6 | 	mov	local03, local02
1a0f8     01 22 66 F0 | 	shl	local03, #1
1a0fc     F2 22 02 F1 | 	add	local03, objptr
1a100     10 1F 02 F6 | 	mov	local01, local02
1a104     08 1E 86 F1 | 	sub	local01, #8
1a108     0B 1E 66 F0 | 	shl	local01, #11
1a10c     7F 00 00 FF 
1a110     00 25 06 F6 | 	mov	local04, ##65280
1a114     0F 25 82 F1 | 	sub	local04, local01
1a118     11 25 52 FC | 	wrword	local04, local03
1a11c     01 20 06 F1 | 	add	local02, #1
1a120     18 20 16 F2 | 	cmp	local02, #24 wc
1a124     CC FF 9F CD |  if_b	jmp	#LR__2090
1a128                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
1a128     18 20 06 F6 | 	mov	local02, #24
1a12c                 | LR__2091
1a12c     10 23 02 F6 | 	mov	local03, local02
1a130     01 22 66 F0 | 	shl	local03, #1
1a134     F2 22 02 F1 | 	add	local03, objptr
1a138     40 00 80 FF 
1a13c     11 01 58 FC | 	wrword	##32768, local03
1a140     01 20 06 F1 | 	add	local02, #1
1a144     81 20 16 F2 | 	cmp	local02, #129 wc
1a148     E0 FF 9F CD |  if_b	jmp	#LR__2091
1a14c                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
1a14c     81 20 06 F6 | 	mov	local02, #129
1a150                 | LR__2092
1a150     10 23 02 F6 | 	mov	local03, local02
1a154     01 22 66 F0 | 	shl	local03, #1
1a158     F2 22 02 F1 | 	add	local03, objptr
1a15c     FF 26 06 F6 | 	mov	local05, #255
1a160     10 27 82 F1 | 	sub	local05, local02
1a164     08 26 66 F0 | 	shl	local05, #8
1a168     11 27 52 FC | 	wrword	local05, local03
1a16c     01 20 06 F1 | 	add	local02, #1
1a170     00 21 16 F2 | 	cmp	local02, #256 wc
1a174     D8 FF 9F CD |  if_b	jmp	#LR__2092
1a178                 | LR__2093
1a178     46 00 00 FF 
1a17c     DA E4 05 F1 | 	add	objptr, ##36058
1a180     F2 00 59 FC | 	wrword	#128, objptr
1a184     79 00 00 FF 
1a188     B2 E5 85 F1 | 	sub	objptr, ##62386
1a18c                 | ' for i=0 to 7
1a18c     00 20 06 F6 | 	mov	local02, #0
1a190     97 8E 48 FB | 	callpa	#(@LR__2095-@LR__2094)>>2,fcache_load_ptr_
1a194                 | LR__2094
1a194     10 23 02 F6 | 	mov	local03, local02
1a198     01 22 66 F0 | 	shl	local03, #1
1a19c     10 23 02 F1 | 	add	local03, local02
1a1a0     03 22 66 F0 | 	shl	local03, #3
1a1a4     34 00 00 FF 
1a1a8     38 E5 05 F1 | 	add	objptr, ##26936
1a1ac     F2 22 02 F1 | 	add	local03, objptr
1a1b0     00 EE A1 FF 
1a1b4     11 01 68 FC | 	wrlong	##1138491392, local03
1a1b8     10 23 02 F6 | 	mov	local03, local02
1a1bc     01 22 66 F0 | 	shl	local03, #1
1a1c0     10 23 02 F1 | 	add	local03, local02
1a1c4     03 22 66 F0 | 	shl	local03, #3
1a1c8     F2 22 02 F1 | 	add	local03, objptr
1a1cc     04 22 06 F1 | 	add	local03, #4
1a1d0     11 21 42 FC | 	wrbyte	local02, local03
1a1d4     10 23 02 F6 | 	mov	local03, local02
1a1d8     01 22 66 F0 | 	shl	local03, #1
1a1dc     10 23 02 F1 | 	add	local03, local02
1a1e0     03 22 66 F0 | 	shl	local03, #3
1a1e4     F2 22 02 F1 | 	add	local03, objptr
1a1e8     05 22 06 F1 | 	add	local03, #5
1a1ec     11 21 42 FC | 	wrbyte	local02, local03
1a1f0     10 23 02 F6 | 	mov	local03, local02
1a1f4     01 22 66 F0 | 	shl	local03, #1
1a1f8     10 23 02 F1 | 	add	local03, local02
1a1fc     03 22 66 F0 | 	shl	local03, #3
1a200     F2 22 02 F1 | 	add	local03, objptr
1a204     06 22 06 F1 | 	add	local03, #6
1a208     11 01 58 FC | 	wrword	#0, local03
1a20c     10 23 02 F6 | 	mov	local03, local02
1a210     01 22 66 F0 | 	shl	local03, #1
1a214     10 23 02 F1 | 	add	local03, local02
1a218     03 22 66 F0 | 	shl	local03, #3
1a21c     F2 22 02 F1 | 	add	local03, objptr
1a220     08 22 06 F1 | 	add	local03, #8
1a224     00 C0 9F FF 
1a228     11 01 68 FC | 	wrlong	##1065353216, local03
1a22c     10 23 02 F6 | 	mov	local03, local02
1a230     01 22 66 F0 | 	shl	local03, #1
1a234     10 23 02 F1 | 	add	local03, local02
1a238     03 22 66 F0 | 	shl	local03, #3
1a23c     F2 22 02 F1 | 	add	local03, objptr
1a240     0C 22 06 F1 | 	add	local03, #12
1a244     00 40 A0 FF 
1a248     11 01 68 FC | 	wrlong	##1082130432, local03
1a24c     10 23 02 F6 | 	mov	local03, local02
1a250     01 22 66 F0 | 	shl	local03, #1
1a254     10 23 02 F1 | 	add	local03, local02
1a258     03 22 66 F0 | 	shl	local03, #3
1a25c     F2 22 02 F1 | 	add	local03, objptr
1a260     10 22 06 F1 | 	add	local03, #16
1a264     11 01 68 FC | 	wrlong	#0, local03
1a268     10 23 02 F6 | 	mov	local03, local02
1a26c     01 22 66 F0 | 	shl	local03, #1
1a270     10 23 02 F1 | 	add	local03, local02
1a274     03 22 66 F0 | 	shl	local03, #3
1a278     F2 22 02 F1 | 	add	local03, objptr
1a27c     14 22 06 F1 | 	add	local03, #20
1a280     11 FF 59 FC | 	wrword	#255, local03
1a284     10 23 02 F6 | 	mov	local03, local02
1a288     01 22 66 F0 | 	shl	local03, #1
1a28c     45 00 00 FF 
1a290     6C E4 05 F1 | 	add	objptr, ##35436
1a294     F2 22 02 F1 | 	add	local03, objptr
1a298     11 FF 59 FC | 	wrword	#255, local03
1a29c     01 20 06 F1 | 	add	local02, #1
1a2a0     08 20 56 F2 | 	cmps	local02, #8 wc
1a2a4     79 00 00 FF 
1a2a8     A4 E5 85 F1 | 	sub	objptr, ##62372
1a2ac     E4 FE 9F CD |  if_b	jmp	#LR__2094
1a2b0                 | LR__2095
1a2b0     00 6E 20 FF 
1a2b4     00 1E 06 F6 | 	mov	local01, ##1088159744
1a2b8                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
1a2b8     03 26 06 F6 | 	mov	local05, #3
1a2bc                 | LR__2096
1a2bc     0F 13 02 F6 | 	mov	arg01, local01
1a2c0     CE C3 1F FF 
1a2c4     7D 14 06 F6 | 	mov	arg02, ##1065852029
1a2c8     28 74 B0 FD | 	call	#__system___float_mul
1a2cc     FD 1E 02 F6 | 	mov	local01, result1
1a2d0     FA 27 6E FB | 	djnz	local05, #LR__2096
1a2d4     00 20 06 F6 | 	mov	local02, #0
1a2d8                 | LR__2097
1a2d8     10 27 02 F6 | 	mov	local05, local02
1a2dc     02 26 66 F0 | 	shl	local05, #2
1a2e0     34 00 00 FF 
1a2e4     D8 E4 05 F1 | 	add	objptr, ##26840
1a2e8     F2 26 02 F1 | 	add	local05, objptr
1a2ec     13 1F 62 FC | 	wrlong	local01, local05
1a2f0     0F 13 02 F6 | 	mov	arg01, local01
1a2f4     CE C3 1F FF 
1a2f8     7D 14 06 F6 | 	mov	arg02, ##1065852029
1a2fc     34 00 00 FF 
1a300     D8 E4 85 F1 | 	sub	objptr, ##26840
1a304     EC 73 B0 FD | 	call	#__system___float_mul
1a308     FD 1E 02 F6 | 	mov	local01, result1
1a30c     01 20 06 F1 | 	add	local02, #1
1a310     0C 20 56 F2 | 	cmps	local02, #12 wc
1a314     C0 FF 9F CD |  if_b	jmp	#LR__2097
1a318     79 00 00 FF 
1a31c     B2 E5 05 F1 | 	add	objptr, ##62386
1a320     F2 00 59 FC | 	wrword	#128, objptr
1a324     02 E4 85 F1 | 	sub	objptr, #2
1a328     F2 00 59 FC | 	wrword	#128, objptr
1a32c     79 00 00 FF 
1a330     B0 E5 85 F1 | 	sub	objptr, ##62384
1a334     A7 F0 03 F6 | 	mov	ptra, fp
1a338     B2 00 A0 FD | 	call	#popregs_
1a33c                 | _init_audio_ret
1a33c     2D 00 64 FD | 	ret
1a340                 | 
1a340                 | ' 
1a340                 | ' 
1a340                 | ' function getnoteval(token) as single
1a340                 | _getnoteval
1a340     02 4A 05 F6 | 	mov	COUNT_, #2
1a344     A8 00 A0 FD | 	call	#pushregs_
1a348     01 00 00 FF 
1a34c     00 13 86 F1 | 	sub	arg01, ##768
1a350     09 15 52 F6 | 	abs	arg02, arg01 wc
1a354     0C 14 16 FD | 	qdiv	arg02, #12
1a358     34 00 00 FF 
1a35c     D8 E4 05 F1 | 	add	objptr, ##26840
1a360     19 14 62 FD | 	getqy	arg02
1a364     0A 15 82 F6 | 	negc	arg02, arg02
1a368     02 14 66 F0 | 	shl	arg02, #2
1a36c     F2 14 02 F1 | 	add	arg02, objptr
1a370     0A 1F 02 FB | 	rdlong	local01, arg02
1a374     09 15 52 F6 | 	abs	arg02, arg01 wc
1a378     0C 14 16 FD | 	qdiv	arg02, #12
1a37c     34 00 00 FF 
1a380     D8 E4 85 F1 | 	sub	objptr, ##26840
1a384     01 12 06 F6 | 	mov	arg01, #1
1a388                 | ' noteexp=1+(note/12) 
1a388                 | ' return (2.0^noteexp)*notebase
1a388     18 14 62 FD | 	getqx	arg02
1a38c     0A 13 82 F3 | 	sumc	arg01, arg02
1a390     09 13 52 F6 | 	abs	arg01, arg01 wc
1a394     1F 20 C6 C9 |  if_b	decod	local02, #31
1a398     00 20 06 36 |  if_ae	mov	local02, #0
1a39c     50 6F B0 FD | 	call	#__system___float_fromuns
1a3a0     10 FB 61 F5 | 	xor	result1, local02
1a3a4     FD 14 02 F6 | 	mov	arg02, result1
1a3a8     1E 12 C6 F9 | 	decod	arg01, #30
1a3ac     28 82 B0 FD | 	call	#__system____builtin_powf
1a3b0     FD 12 02 F6 | 	mov	arg01, result1
1a3b4     0F 15 02 F6 | 	mov	arg02, local01
1a3b8     38 73 B0 FD | 	call	#__system___float_mul
1a3bc     A7 F0 03 F6 | 	mov	ptra, fp
1a3c0     B2 00 A0 FD | 	call	#popregs_
1a3c4                 | _getnoteval_ret
1a3c4     2D 00 64 FD | 	ret
1a3c8                 | 
1a3c8                 | ' 
1a3c8                 | ' 
1a3c8                 | ' 
1a3c8                 | ' sub init_error_strings
1a3c8                 | _init_error_strings
1a3c8     74 01 00 FF 
1a3cc     35 01 06 F6 | 	mov	_var01, ##@LR__5198
1a3d0     65 00 00 FF 
1a3d4     7C E4 05 F1 | 	add	objptr, ##51836
1a3d8     F2 00 62 FC | 	wrlong	_var01, objptr
1a3dc     74 01 00 FF 
1a3e0     36 01 06 F6 | 	mov	_var01, ##@LR__5199
1a3e4     04 E4 05 F1 | 	add	objptr, #4
1a3e8     F2 00 62 FC | 	wrlong	_var01, objptr
1a3ec     74 01 00 FF 
1a3f0     5B 01 06 F6 | 	mov	_var01, ##@LR__5200
1a3f4     04 E4 05 F1 | 	add	objptr, #4
1a3f8     F2 00 62 FC | 	wrlong	_var01, objptr
1a3fc     74 01 00 FF 
1a400     7C 01 06 F6 | 	mov	_var01, ##@LR__5201
1a404     04 E4 05 F1 | 	add	objptr, #4
1a408     F2 00 62 FC | 	wrlong	_var01, objptr
1a40c     74 01 00 FF 
1a410     96 01 06 F6 | 	mov	_var01, ##@LR__5202
1a414     04 E4 05 F1 | 	add	objptr, #4
1a418     F2 00 62 FC | 	wrlong	_var01, objptr
1a41c     74 01 00 FF 
1a420     B2 01 06 F6 | 	mov	_var01, ##@LR__5203
1a424     04 E4 05 F1 | 	add	objptr, #4
1a428     F2 00 62 FC | 	wrlong	_var01, objptr
1a42c     74 01 00 FF 
1a430     D4 01 06 F6 | 	mov	_var01, ##@LR__5204
1a434     04 E4 05 F1 | 	add	objptr, #4
1a438     F2 00 62 FC | 	wrlong	_var01, objptr
1a43c     75 01 00 FF 
1a440     02 00 06 F6 | 	mov	_var01, ##@LR__5205
1a444     04 E4 05 F1 | 	add	objptr, #4
1a448     F2 00 62 FC | 	wrlong	_var01, objptr
1a44c     75 01 00 FF 
1a450     2D 00 06 F6 | 	mov	_var01, ##@LR__5206
1a454     04 E4 05 F1 | 	add	objptr, #4
1a458     F2 00 62 FC | 	wrlong	_var01, objptr
1a45c     75 01 00 FF 
1a460     46 00 06 F6 | 	mov	_var01, ##@LR__5207
1a464     04 E4 05 F1 | 	add	objptr, #4
1a468     F2 00 62 FC | 	wrlong	_var01, objptr
1a46c     75 01 00 FF 
1a470     67 00 06 F6 | 	mov	_var01, ##@LR__5208
1a474     04 E4 05 F1 | 	add	objptr, #4
1a478     F2 00 62 FC | 	wrlong	_var01, objptr
1a47c     75 01 00 FF 
1a480     7E 00 06 F6 | 	mov	_var01, ##@LR__5209
1a484     04 E4 05 F1 | 	add	objptr, #4
1a488     F2 00 62 FC | 	wrlong	_var01, objptr
1a48c     75 01 00 FF 
1a490     9C 00 06 F6 | 	mov	_var01, ##@LR__5210
1a494     04 E4 05 F1 | 	add	objptr, #4
1a498     F2 00 62 FC | 	wrlong	_var01, objptr
1a49c     75 01 00 FF 
1a4a0     C0 00 06 F6 | 	mov	_var01, ##@LR__5211
1a4a4     04 E4 05 F1 | 	add	objptr, #4
1a4a8     F2 00 62 FC | 	wrlong	_var01, objptr
1a4ac     75 01 00 FF 
1a4b0     E7 00 06 F6 | 	mov	_var01, ##@LR__5212
1a4b4     04 E4 05 F1 | 	add	objptr, #4
1a4b8     F2 00 62 FC | 	wrlong	_var01, objptr
1a4bc     75 01 00 FF 
1a4c0     03 01 06 F6 | 	mov	_var01, ##@LR__5213
1a4c4     04 E4 05 F1 | 	add	objptr, #4
1a4c8     F2 00 62 FC | 	wrlong	_var01, objptr
1a4cc     75 01 00 FF 
1a4d0     14 01 06 F6 | 	mov	_var01, ##@LR__5214
1a4d4     04 E4 05 F1 | 	add	objptr, #4
1a4d8     F2 00 62 FC | 	wrlong	_var01, objptr
1a4dc     75 01 00 FF 
1a4e0     24 01 06 F6 | 	mov	_var01, ##@LR__5215
1a4e4     04 E4 05 F1 | 	add	objptr, #4
1a4e8     F2 00 62 FC | 	wrlong	_var01, objptr
1a4ec     75 01 00 FF 
1a4f0     3F 01 06 F6 | 	mov	_var01, ##@LR__5216
1a4f4     04 E4 05 F1 | 	add	objptr, #4
1a4f8     F2 00 62 FC | 	wrlong	_var01, objptr
1a4fc     75 01 00 FF 
1a500     51 01 06 F6 | 	mov	_var01, ##@LR__5217
1a504     04 E4 05 F1 | 	add	objptr, #4
1a508     F2 00 62 FC | 	wrlong	_var01, objptr
1a50c     75 01 00 FF 
1a510     69 01 06 F6 | 	mov	_var01, ##@LR__5218
1a514     04 E4 05 F1 | 	add	objptr, #4
1a518     F2 00 62 FC | 	wrlong	_var01, objptr
1a51c     75 01 00 FF 
1a520     7D 01 06 F6 | 	mov	_var01, ##@LR__5219
1a524     04 E4 05 F1 | 	add	objptr, #4
1a528     F2 00 62 FC | 	wrlong	_var01, objptr
1a52c     75 01 00 FF 
1a530     8D 01 06 F6 | 	mov	_var01, ##@LR__5220
1a534     04 E4 05 F1 | 	add	objptr, #4
1a538     F2 00 62 FC | 	wrlong	_var01, objptr
1a53c     75 01 00 FF 
1a540     AA 01 06 F6 | 	mov	_var01, ##@LR__5221
1a544     04 E4 05 F1 | 	add	objptr, #4
1a548     F2 00 62 FC | 	wrlong	_var01, objptr
1a54c     75 01 00 FF 
1a550     BB 01 06 F6 | 	mov	_var01, ##@LR__5222
1a554     04 E4 05 F1 | 	add	objptr, #4
1a558     F2 00 62 FC | 	wrlong	_var01, objptr
1a55c     75 01 00 FF 
1a560     CC 01 06 F6 | 	mov	_var01, ##@LR__5223
1a564     04 E4 05 F1 | 	add	objptr, #4
1a568     F2 00 62 FC | 	wrlong	_var01, objptr
1a56c     75 01 00 FF 
1a570     F7 01 06 F6 | 	mov	_var01, ##@LR__5224
1a574     04 E4 05 F1 | 	add	objptr, #4
1a578     F2 00 62 FC | 	wrlong	_var01, objptr
1a57c     76 01 00 FF 
1a580     13 00 06 F6 | 	mov	_var01, ##@LR__5225
1a584     04 E4 05 F1 | 	add	objptr, #4
1a588     F2 00 62 FC | 	wrlong	_var01, objptr
1a58c     76 01 00 FF 
1a590     29 00 06 F6 | 	mov	_var01, ##@LR__5226
1a594     04 E4 05 F1 | 	add	objptr, #4
1a598     F2 00 62 FC | 	wrlong	_var01, objptr
1a59c     76 01 00 FF 
1a5a0     36 00 06 F6 | 	mov	_var01, ##@LR__5227
1a5a4     04 E4 05 F1 | 	add	objptr, #4
1a5a8     F2 00 62 FC | 	wrlong	_var01, objptr
1a5ac     76 01 00 FF 
1a5b0     48 00 06 F6 | 	mov	_var01, ##@LR__5228
1a5b4     04 E4 05 F1 | 	add	objptr, #4
1a5b8     F2 00 62 FC | 	wrlong	_var01, objptr
1a5bc     76 01 00 FF 
1a5c0     59 00 06 F6 | 	mov	_var01, ##@LR__5229
1a5c4     04 E4 05 F1 | 	add	objptr, #4
1a5c8     F2 00 62 FC | 	wrlong	_var01, objptr
1a5cc     76 01 00 FF 
1a5d0     75 00 06 F6 | 	mov	_var01, ##@LR__5230
1a5d4     04 E4 05 F1 | 	add	objptr, #4
1a5d8     F2 00 62 FC | 	wrlong	_var01, objptr
1a5dc     76 01 00 FF 
1a5e0     86 00 06 F6 | 	mov	_var01, ##@LR__5231
1a5e4     04 E4 05 F1 | 	add	objptr, #4
1a5e8     F2 00 62 FC | 	wrlong	_var01, objptr
1a5ec     76 01 00 FF 
1a5f0     95 00 06 F6 | 	mov	_var01, ##@LR__5232
1a5f4     04 E4 05 F1 | 	add	objptr, #4
1a5f8     F2 00 62 FC | 	wrlong	_var01, objptr
1a5fc     76 01 00 FF 
1a600     B0 00 06 F6 | 	mov	_var01, ##@LR__5233
1a604     04 E4 05 F1 | 	add	objptr, #4
1a608     F2 00 62 FC | 	wrlong	_var01, objptr
1a60c     76 01 00 FF 
1a610     E4 00 06 F6 | 	mov	_var01, ##@LR__5234
1a614     04 E4 05 F1 | 	add	objptr, #4
1a618     F2 00 62 FC | 	wrlong	_var01, objptr
1a61c     76 01 00 FF 
1a620     FD 00 06 F6 | 	mov	_var01, ##@LR__5235
1a624     04 E4 05 F1 | 	add	objptr, #4
1a628     F2 00 62 FC | 	wrlong	_var01, objptr
1a62c     76 01 00 FF 
1a630     19 01 06 F6 | 	mov	_var01, ##@LR__5236
1a634     04 E4 05 F1 | 	add	objptr, #4
1a638     F2 00 62 FC | 	wrlong	_var01, objptr
1a63c     76 01 00 FF 
1a640     37 01 06 F6 | 	mov	_var01, ##@LR__5237
1a644     04 E4 05 F1 | 	add	objptr, #4
1a648     F2 00 62 FC | 	wrlong	_var01, objptr
1a64c     76 01 00 FF 
1a650     50 01 06 F6 | 	mov	_var01, ##@LR__5238
1a654     04 E4 05 F1 | 	add	objptr, #4
1a658     F2 00 62 FC | 	wrlong	_var01, objptr
1a65c     76 01 00 FF 
1a660     6F 01 06 F6 | 	mov	_var01, ##@LR__5239
1a664     04 E4 05 F1 | 	add	objptr, #4
1a668     F2 00 62 FC | 	wrlong	_var01, objptr
1a66c     76 01 00 FF 
1a670     7E 01 06 F6 | 	mov	_var01, ##@LR__5240
1a674     04 E4 05 F1 | 	add	objptr, #4
1a678     F2 00 62 FC | 	wrlong	_var01, objptr
1a67c     76 01 00 FF 
1a680     AC 01 06 F6 | 	mov	_var01, ##@LR__5241
1a684     04 E4 05 F1 | 	add	objptr, #4
1a688     F2 00 62 FC | 	wrlong	_var01, objptr
1a68c     76 01 00 FF 
1a690     BA 01 06 F6 | 	mov	_var01, ##@LR__5242
1a694     04 E4 05 F1 | 	add	objptr, #4
1a698     F2 00 62 FC | 	wrlong	_var01, objptr
1a69c     76 01 00 FF 
1a6a0     CF 01 06 F6 | 	mov	_var01, ##@LR__5243
1a6a4     04 E4 05 F1 | 	add	objptr, #4
1a6a8     F2 00 62 FC | 	wrlong	_var01, objptr
1a6ac     76 01 00 FF 
1a6b0     F3 01 06 F6 | 	mov	_var01, ##@LR__5244
1a6b4     04 E4 05 F1 | 	add	objptr, #4
1a6b8     F2 00 62 FC | 	wrlong	_var01, objptr
1a6bc     77 01 00 FF 
1a6c0     0A 00 06 F6 | 	mov	_var01, ##@LR__5245
1a6c4     04 E4 05 F1 | 	add	objptr, #4
1a6c8     F2 00 62 FC | 	wrlong	_var01, objptr
1a6cc     77 01 00 FF 
1a6d0     1D 00 06 F6 | 	mov	_var01, ##@LR__5246
1a6d4     04 E4 05 F1 | 	add	objptr, #4
1a6d8     F2 00 62 FC | 	wrlong	_var01, objptr
1a6dc     77 01 00 FF 
1a6e0     34 00 06 F6 | 	mov	_var01, ##@LR__5247
1a6e4     04 E4 05 F1 | 	add	objptr, #4
1a6e8     F2 00 62 FC | 	wrlong	_var01, objptr
1a6ec     65 00 00 FF 
1a6f0     40 E5 85 F1 | 	sub	objptr, ##52032
1a6f4                 | _init_error_strings_ret
1a6f4     2D 00 64 FD | 	ret
1a6f8                 | 
1a6f8                 | '         
1a6f8                 | ' sub printerror(err as integer)
1a6f8                 | _printerror
1a6f8     01 4A 05 F6 | 	mov	COUNT_, #1
1a6fc     A8 00 A0 FD | 	call	#pushregs_
1a700     09 1F 02 F6 | 	mov	local01, arg01
1a704     77 01 00 FF 
1a708     4D 12 06 F6 | 	mov	arg01, ##@LR__5248
1a70c     98 31 B0 FD | 	call	#_hg010b_spin2_write
1a710     0F 13 02 F6 | 	mov	arg01, local01
1a714     00 35 B0 FD | 	call	#_hg010b_spin2_inttostr
1a718     FD 12 02 F6 | 	mov	arg01, result1
1a71c     88 31 B0 FD | 	call	#_hg010b_spin2_write
1a720     77 01 00 FF 
1a724     54 12 06 F6 | 	mov	arg01, ##@LR__5249
1a728     7C 31 B0 FD | 	call	#_hg010b_spin2_write
1a72c     02 1E 66 F0 | 	shl	local01, #2
1a730     65 00 00 FF 
1a734     7C E4 05 F1 | 	add	objptr, ##51836
1a738     F2 1E 02 F1 | 	add	local01, objptr
1a73c     0F 13 02 FB | 	rdlong	arg01, local01
1a740     65 00 00 FF 
1a744     7C E4 85 F1 | 	sub	objptr, ##51836
1a748                 | ' 
1a748                 | ' write(text)
1a748     5C 31 B0 FD | 	call	#_hg010b_spin2_write
1a74c                 | ' crlf
1a74c     24 34 B0 FD | 	call	#_hg010b_spin2_crlf
1a750     A7 F0 03 F6 | 	mov	ptra, fp
1a754     B2 00 A0 FD | 	call	#popregs_
1a758                 | _printerror_ret
1a758     2D 00 64 FD | 	ret
1a75c                 | 
1a75c                 | ' 
1a75c                 | ' '' ------------------------------- Hardware start/stop/initialization 
1a75c                 | ' 
1a75c                 | ' sub startpsram
1a75c                 | _startpsram
1a75c     00 12 06 F6 | 	mov	arg01, #0
1a760     0A 14 C6 F9 | 	decod	arg02, #10
1a764     0B 16 06 F6 | 	mov	arg03, #11
1a768     07 18 06 F6 | 	mov	arg04, #7
1a76c     0B 00 00 FF 
1a770     CC E4 05 F1 | 	add	objptr, ##5836
1a774     AC 35 B0 FD | 	call	#_psram_spin2_startx
1a778     4B 00 00 FF 
1a77c     3C E5 05 F1 | 	add	objptr, ##38716
1a780     F2 FA 61 FC | 	wrlong	result1, objptr
1a784                 | '     return $7FF00 + cog*12
1a784     0C E4 05 F1 | 	add	objptr, #12
1a788     FF 03 80 FF 
1a78c     F2 00 6A FC | 	wrlong	##524032, objptr
1a790     57 00 00 FF 
1a794     14 E4 85 F1 | 	sub	objptr, ##44564
1a798                 | _startpsram_ret
1a798     2D 00 64 FD | 	ret
1a79c                 | 
1a79c                 | ' 
1a79c                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
1a79c                 | _startvideo
1a79c     01 4A 05 F6 | 	mov	COUNT_, #1
1a7a0     A8 00 A0 FD | 	call	#pushregs_
1a7a4     57 00 00 FF 
1a7a8     14 E4 05 F1 | 	add	objptr, ##44564
1a7ac     F2 18 02 FB | 	rdlong	arg04, objptr
1a7b0     57 00 00 FF 
1a7b4     14 E4 85 F1 | 	sub	objptr, ##44564
1a7b8     0A 13 02 F6 | 	mov	arg01, arg02
1a7bc     0C 15 02 F6 | 	mov	arg02, arg04
1a7c0     DC 18 B0 FD | 	call	#_hg010b_spin2_start
1a7c4     57 00 00 FF 
1a7c8     00 E4 05 F1 | 	add	objptr, ##44544
1a7cc     F2 FA 61 FC | 	wrlong	result1, objptr
1a7d0                 | ' 
1a7d0                 | ' videocog=v.start(pin,mbox)
1a7d0                 | ' 
1a7d0                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1a7d0     00 1E 06 F6 | 	mov	local01, #0
1a7d4     4B 00 00 FF 
1a7d8     34 E5 85 F1 | 	sub	objptr, ##38708
1a7dc                 | LR__2100
1a7dc     0F 13 02 F6 | 	mov	arg01, local01
1a7e0     00 28 00 FF 
1a7e4     00 14 06 F6 | 	mov	arg02, ##5242880
1a7e8     90 39 B0 FD | 	call	#_psram_spin2_setQos
1a7ec     01 1E 06 F1 | 	add	local01, #1
1a7f0     08 1E 56 F2 | 	cmps	local01, #8 wc
1a7f4     E4 FF 9F CD |  if_b	jmp	#LR__2100
1a7f8     4B 00 00 FF 
1a7fc     34 E5 05 F1 | 	add	objptr, ##38708
1a800     F2 12 02 FB | 	rdlong	arg01, objptr
1a804     7A 00 02 FF 
1a808     00 14 06 F6 | 	mov	arg02, ##67171328
1a80c     4B 00 00 FF 
1a810     34 E5 85 F1 | 	sub	objptr, ##38708
1a814     64 39 B0 FD | 	call	#_psram_spin2_setQos
1a818     0B 00 00 FF 
1a81c     CC E4 85 F1 | 	sub	objptr, ##5836
1a820                 | ' psram.setQoS(videocog, $0400f400) 
1a820                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1a820     F2 14 02 F6 | 	mov	arg02, objptr
1a824     00 18 04 FF 
1a828     00 14 46 F5 | 	or	arg02, ##137363456
1a82c     00 16 06 F6 | 	mov	arg03, #0
1a830     00 18 06 F6 | 	mov	arg04, #0
1a834     00 12 06 F6 | 	mov	arg01, #0
1a838     E0 4D B0 FD | 	call	#__system___basic_open
1a83c                 | ' return videocog
1a83c     57 00 00 FF 
1a840     00 E4 05 F1 | 	add	objptr, ##44544
1a844     F2 FA 01 FB | 	rdlong	result1, objptr
1a848     57 00 00 FF 
1a84c     00 E4 85 F1 | 	sub	objptr, ##44544
1a850     A7 F0 03 F6 | 	mov	ptra, fp
1a854     B2 00 A0 FD | 	call	#popregs_
1a858                 | _startvideo_ret
1a858     2D 00 64 FD | 	ret
1a85c                 | 
1a85c                 | ' 
1a85c                 | ' 
1a85c                 | ' 
1a85c                 | ' 
1a85c                 | ' '' ------------------------------- Convenient psram peek/poke
1a85c                 | ' 
1a85c                 | ' sub pslpoke(addr as ulong,value as ulong)
1a85c                 | _pslpoke
1a85c     00 4A 05 F6 | 	mov	COUNT_, #0
1a860     A8 00 A0 FD | 	call	#pushregs_
1a864     08 F0 07 F1 | 	add	ptra, #8
1a868     A7 12 62 FC | 	wrlong	arg01, fp
1a86c     04 4E 05 F1 | 	add	fp, #4
1a870     A7 14 62 FC | 	wrlong	arg02, fp
1a874     A7 12 02 F6 | 	mov	arg01, fp
1a878     04 4E 85 F1 | 	sub	fp, #4
1a87c     A7 14 02 FB | 	rdlong	arg02, fp
1a880     04 16 06 F6 | 	mov	arg03, #4
1a884     0B 00 00 FF 
1a888     CC E4 05 F1 | 	add	objptr, ##5836
1a88c     5C 37 B0 FD | 	call	#_psram_spin2_write
1a890     0B 00 00 FF 
1a894     CC E4 85 F1 | 	sub	objptr, ##5836
1a898     A7 F0 03 F6 | 	mov	ptra, fp
1a89c     B2 00 A0 FD | 	call	#popregs_
1a8a0                 | _pslpoke_ret
1a8a0     2D 00 64 FD | 	ret
1a8a4                 | 
1a8a4                 | ' 
1a8a4                 | ' sub psdpoke(addr as ulong,value as ulong)
1a8a4                 | _psdpoke
1a8a4     00 4A 05 F6 | 	mov	COUNT_, #0
1a8a8     A8 00 A0 FD | 	call	#pushregs_
1a8ac     08 F0 07 F1 | 	add	ptra, #8
1a8b0     A7 12 62 FC | 	wrlong	arg01, fp
1a8b4     04 4E 05 F1 | 	add	fp, #4
1a8b8     A7 14 62 FC | 	wrlong	arg02, fp
1a8bc     A7 12 02 F6 | 	mov	arg01, fp
1a8c0     04 4E 85 F1 | 	sub	fp, #4
1a8c4     A7 14 02 FB | 	rdlong	arg02, fp
1a8c8     02 16 06 F6 | 	mov	arg03, #2
1a8cc     0B 00 00 FF 
1a8d0     CC E4 05 F1 | 	add	objptr, ##5836
1a8d4     14 37 B0 FD | 	call	#_psram_spin2_write
1a8d8     0B 00 00 FF 
1a8dc     CC E4 85 F1 | 	sub	objptr, ##5836
1a8e0     A7 F0 03 F6 | 	mov	ptra, fp
1a8e4     B2 00 A0 FD | 	call	#popregs_
1a8e8                 | _psdpoke_ret
1a8e8     2D 00 64 FD | 	ret
1a8ec                 | 
1a8ec                 | ' 
1a8ec                 | ' sub pspoke(addr as ulong,value as ulong)
1a8ec                 | _pspoke
1a8ec     00 4A 05 F6 | 	mov	COUNT_, #0
1a8f0     A8 00 A0 FD | 	call	#pushregs_
1a8f4     08 F0 07 F1 | 	add	ptra, #8
1a8f8     A7 12 62 FC | 	wrlong	arg01, fp
1a8fc     04 4E 05 F1 | 	add	fp, #4
1a900     A7 14 62 FC | 	wrlong	arg02, fp
1a904     A7 12 02 F6 | 	mov	arg01, fp
1a908     04 4E 85 F1 | 	sub	fp, #4
1a90c     A7 14 02 FB | 	rdlong	arg02, fp
1a910     01 16 06 F6 | 	mov	arg03, #1
1a914     0B 00 00 FF 
1a918     CC E4 05 F1 | 	add	objptr, ##5836
1a91c     CC 36 B0 FD | 	call	#_psram_spin2_write
1a920     0B 00 00 FF 
1a924     CC E4 85 F1 | 	sub	objptr, ##5836
1a928     A7 F0 03 F6 | 	mov	ptra, fp
1a92c     B2 00 A0 FD | 	call	#popregs_
1a930                 | _pspoke_ret
1a930     2D 00 64 FD | 	ret
1a934                 | 
1a934                 | ' 
1a934                 | ' function pspeek(adr as ulong) as ubyte
1a934                 | _pspeek
1a934     00 4A 05 F6 | 	mov	COUNT_, #0
1a938     A8 00 A0 FD | 	call	#pushregs_
1a93c     0C F0 07 F1 | 	add	ptra, #12
1a940     04 4E 05 F1 | 	add	fp, #4
1a944     A7 12 62 FC | 	wrlong	arg01, fp
1a948     04 4E 05 F1 | 	add	fp, #4
1a94c     A7 12 02 F6 | 	mov	arg01, fp
1a950     04 4E 85 F1 | 	sub	fp, #4
1a954     A7 14 02 FB | 	rdlong	arg02, fp
1a958     04 4E 85 F1 | 	sub	fp, #4
1a95c     01 16 06 F6 | 	mov	arg03, #1
1a960     0B 00 00 FF 
1a964     CC E4 05 F1 | 	add	objptr, ##5836
1a968     E4 35 B0 FD | 	call	#_psram_spin2_read1
1a96c     0B 00 00 FF 
1a970     CC E4 85 F1 | 	sub	objptr, ##5836
1a974                 | ' psram.read1(varptr(res),adr,1)
1a974                 | ' return res
1a974     08 4E 05 F1 | 	add	fp, #8
1a978     A7 FA C1 FA | 	rdbyte	result1, fp
1a97c     08 4E 85 F1 | 	sub	fp, #8
1a980     A7 F0 03 F6 | 	mov	ptra, fp
1a984     B2 00 A0 FD | 	call	#popregs_
1a988                 | _pspeek_ret
1a988     2D 00 64 FD | 	ret
1a98c                 | 
1a98c                 | ' 
1a98c                 | ' function pslpeek(adr as ulong) as ulong
1a98c                 | _pslpeek
1a98c     00 4A 05 F6 | 	mov	COUNT_, #0
1a990     A8 00 A0 FD | 	call	#pushregs_
1a994     0C F0 07 F1 | 	add	ptra, #12
1a998     04 4E 05 F1 | 	add	fp, #4
1a99c     A7 12 62 FC | 	wrlong	arg01, fp
1a9a0     04 4E 05 F1 | 	add	fp, #4
1a9a4     A7 12 02 F6 | 	mov	arg01, fp
1a9a8     04 4E 85 F1 | 	sub	fp, #4
1a9ac     A7 14 02 FB | 	rdlong	arg02, fp
1a9b0     04 4E 85 F1 | 	sub	fp, #4
1a9b4     04 16 06 F6 | 	mov	arg03, #4
1a9b8     0B 00 00 FF 
1a9bc     CC E4 05 F1 | 	add	objptr, ##5836
1a9c0     8C 35 B0 FD | 	call	#_psram_spin2_read1
1a9c4     0B 00 00 FF 
1a9c8     CC E4 85 F1 | 	sub	objptr, ##5836
1a9cc                 | ' psram.read1(varptr(res),adr,4)
1a9cc                 | ' return res
1a9cc     08 4E 05 F1 | 	add	fp, #8
1a9d0     A7 FA 01 FB | 	rdlong	result1, fp
1a9d4     08 4E 85 F1 | 	sub	fp, #8
1a9d8     A7 F0 03 F6 | 	mov	ptra, fp
1a9dc     B2 00 A0 FD | 	call	#popregs_
1a9e0                 | _pslpeek_ret
1a9e0     2D 00 64 FD | 	ret
1a9e4                 | 
1a9e4                 | ' 
1a9e4                 | ' function psdpeek(adr as ulong) as ulong
1a9e4                 | _psdpeek
1a9e4     00 4A 05 F6 | 	mov	COUNT_, #0
1a9e8     A8 00 A0 FD | 	call	#pushregs_
1a9ec     0C F0 07 F1 | 	add	ptra, #12
1a9f0     04 4E 05 F1 | 	add	fp, #4
1a9f4     A7 12 62 FC | 	wrlong	arg01, fp
1a9f8     04 4E 05 F1 | 	add	fp, #4
1a9fc     A7 12 02 F6 | 	mov	arg01, fp
1aa00     04 4E 85 F1 | 	sub	fp, #4
1aa04     A7 14 02 FB | 	rdlong	arg02, fp
1aa08     04 4E 85 F1 | 	sub	fp, #4
1aa0c     02 16 06 F6 | 	mov	arg03, #2
1aa10     0B 00 00 FF 
1aa14     CC E4 05 F1 | 	add	objptr, ##5836
1aa18     34 35 B0 FD | 	call	#_psram_spin2_read1
1aa1c     0B 00 00 FF 
1aa20     CC E4 85 F1 | 	sub	objptr, ##5836
1aa24                 | ' psram.read1(varptr(res),adr,2)
1aa24                 | ' return res
1aa24     08 4E 05 F1 | 	add	fp, #8
1aa28     A7 FA E1 FA | 	rdword	result1, fp
1aa2c     08 4E 85 F1 | 	sub	fp, #8
1aa30     A7 F0 03 F6 | 	mov	ptra, fp
1aa34     B2 00 A0 FD | 	call	#popregs_
1aa38                 | _psdpeek_ret
1aa38     2D 00 64 FD | 	ret
1aa3c                 | 
1aa3c                 | ' 
1aa3c                 | ' '' ------------------------------- USB keyboard scan to char translator
1aa3c                 | ' 
1aa3c                 | ' function scantochar(key)
1aa3c                 | _scantochar
1aa3c                 | ' 
1aa3c                 | ' select case (key shr 8) and 255
1aa3c     09 01 02 F6 | 	mov	_var01, arg01
1aa40     08 00 C6 F0 | 	sar	_var01, #8
1aa44     FF 00 0E F5 | 	and	_var01, #255 wz
1aa48     24 00 90 AD |  if_e	jmp	#LR__2110
1aa4c     02 00 0E F2 | 	cmp	_var01, #2 wz
1aa50     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1aa54     30 00 90 AD |  if_e	jmp	#LR__2111
1aa58     40 00 0E F2 | 	cmp	_var01, #64 wz
1aa5c     44 00 90 AD |  if_e	jmp	#LR__2112
1aa60     42 00 0E F2 | 	cmp	_var01, #66 wz
1aa64     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1aa68     70 00 90 5D |  if_ne	jmp	#LR__2114
1aa6c     50 00 90 FD | 	jmp	#LR__2113
1aa70                 | LR__2110
1aa70     09 FB 01 F6 | 	mov	result1, arg01
1aa74     7F FA 05 F5 | 	and	result1, #127
1aa78     02 FA 65 F0 | 	shl	result1, #2
1aa7c     F5 FA 01 F1 | 	add	result1, ptr__dat__
1aa80     FD FA C1 FA | 	rdbyte	result1, result1
1aa84     54 00 90 FD | 	jmp	#_scantochar_ret
1aa88                 | LR__2111
1aa88     09 FB 01 F6 | 	mov	result1, arg01
1aa8c     7F FA 05 F5 | 	and	result1, #127
1aa90     02 FA 65 F0 | 	shl	result1, #2
1aa94     01 FA 05 F1 | 	add	result1, #1
1aa98     F5 FA 01 F1 | 	add	result1, ptr__dat__
1aa9c     FD FA C1 FA | 	rdbyte	result1, result1
1aaa0     38 00 90 FD | 	jmp	#_scantochar_ret
1aaa4                 | LR__2112
1aaa4     09 FB 01 F6 | 	mov	result1, arg01
1aaa8     7F FA 05 F5 | 	and	result1, #127
1aaac     02 FA 65 F0 | 	shl	result1, #2
1aab0     02 FA 05 F1 | 	add	result1, #2
1aab4     F5 FA 01 F1 | 	add	result1, ptr__dat__
1aab8     FD FA C1 FA | 	rdbyte	result1, result1
1aabc     1C 00 90 FD | 	jmp	#_scantochar_ret
1aac0                 | LR__2113
1aac0     09 FB 01 F6 | 	mov	result1, arg01
1aac4     7F FA 05 F5 | 	and	result1, #127
1aac8     02 FA 65 F0 | 	shl	result1, #2
1aacc     03 FA 05 F1 | 	add	result1, #3
1aad0     F5 FA 01 F1 | 	add	result1, ptr__dat__
1aad4     FD FA C1 FA | 	rdbyte	result1, result1
1aad8     00 00 90 FD | 	jmp	#_scantochar_ret
1aadc                 | LR__2114
1aadc                 | _scantochar_ret
1aadc     2D 00 64 FD | 	ret
1aae0                 | 
1aae0                 | _program
1aae0     13 4A 05 F6 | 	mov	COUNT_, #19
1aae4     A8 00 A0 FD | 	call	#pushregs_
1aae8     70 FC BF FD | 	call	#_startpsram
1aaec     40 12 06 F6 | 	mov	arg01, #64
1aaf0     00 14 06 F6 | 	mov	arg02, #0
1aaf4     00 16 06 F6 | 	mov	arg03, #0
1aaf8     A0 FC BF FD | 	call	#_startvideo
1aafc     00 12 06 F6 | 	mov	arg01, #0
1ab00     00 14 06 F6 | 	mov	arg02, #0
1ab04     00 16 06 F6 | 	mov	arg03, #0
1ab08     0B 00 00 FF 
1ab0c     CC E4 05 F1 | 	add	objptr, ##5836
1ab10     18 3A B0 FD | 	call	#_audio096_spin2_start
1ab14     FE 1C 02 F6 | 	mov	arg06, result2
1ab18     4B 00 00 FF 
1ab1c     30 E5 05 F1 | 	add	objptr, ##38704
1ab20     F2 FA 61 FC | 	wrlong	result1, objptr
1ab24     14 E4 05 F1 | 	add	objptr, #20
1ab28     F2 1C 62 FC | 	wrlong	arg06, objptr
1ab2c     57 00 00 FF 
1ab30     10 E4 85 F1 | 	sub	objptr, ##44560
1ab34     32 12 06 F6 | 	mov	arg01, #50
1ab38     2C 43 B0 FD | 	call	#__system___waitms
1ab3c     57 00 00 FF 
1ab40     10 E4 05 F1 | 	add	objptr, ##44560
1ab44     F2 12 02 FB | 	rdlong	arg01, objptr
1ab48     57 00 00 FF 
1ab4c     10 E4 85 F1 | 	sub	objptr, ##44560
1ab50     14 12 06 F1 | 	add	arg01, #20
1ab54     20 00 80 FF 
1ab58     09 01 58 FC | 	wrword	##16384, arg01
1ab5c     24 37 B0 FD | 	call	#_usbnew_spin2_start
1ab60     57 00 00 FF 
1ab64     04 E4 05 F1 | 	add	objptr, ##44548
1ab68     F2 FA 61 FC | 	wrlong	result1, objptr
1ab6c                 | '   mouse_limits[0] := xlim
1ab6c     0F 00 00 FF 
1ab70     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
1ab74     01 00 80 FF 
1ab78     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1ab7c                 | '   mouse_limits[1] := ylim
1ab7c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1ab80     01 00 80 FF 
1ab84     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
1ab88     56 00 00 FF 
1ab8c     F3 E4 85 F1 | 	sub	objptr, ##44275
1ab90     F2 12 02 F6 | 	mov	arg01, objptr
1ab94     11 E5 85 F1 | 	sub	objptr, #273
1ab98     C4 12 06 F1 | 	add	arg01, #196
1ab9c                 | '   mouse_outptr := ptr
1ab9c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1aba0     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
1aba4     0F 00 00 FF 
1aba8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1abac     0E 00 00 FF 
1abb0     B6 EA 05 F1 | 	add	ptr__dat__, ##7350
1abb4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1abb8     0E 00 00 FF 
1abbc     B6 EA 85 F1 | 	sub	ptr__dat__, ##7350
1abc0     10 12 06 F6 | 	mov	arg01, #16
1abc4     70 1B B0 FD | 	call	#_hg010b_spin2_setspriteptr
1abc8     10 12 06 F6 | 	mov	arg01, #16
1abcc     20 14 06 F6 | 	mov	arg02, #32
1abd0     20 16 06 F6 | 	mov	arg03, #32
1abd4     F0 1B B0 FD | 	call	#_hg010b_spin2_setspritesize
1abd8     09 12 C6 F9 | 	decod	arg01, #9
1abdc     2C 15 06 F6 | 	mov	arg02, #300
1abe0     F8 37 B0 FD | 	call	#_usbnew_spin2_mouse_move
1abe4     F2 1C 02 F6 | 	mov	arg06, objptr
1abe8     78 00 00 FF 
1abec     F8 E4 05 F1 | 	add	objptr, ##61688
1abf0     F2 1A 02 F6 | 	mov	arg05, objptr
1abf4     0D 1D 62 FC | 	wrlong	arg06, arg05
1abf8     04 1A 06 F1 | 	add	arg05, #4
1abfc     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
1ac00     EF 14 02 F6 | 	mov	arg02, entryptr__
1ac04     F2 1E 02 F6 | 	mov	local01, objptr
1ac08     1E FA 05 F6 | 	mov	result1, #30
1ac0c     28 1E 62 FD | 	setq	local01
1ac10     0A FB F1 FC | 	coginit	result1, arg02 wc
1ac14     01 FA 65 C6 |  if_b	neg	result1, #1
1ac18     04 E4 85 F1 | 	sub	objptr, #4
1ac1c     F2 FA 61 FC | 	wrlong	result1, objptr
1ac20     01 00 00 FF 
1ac24     90 E4 05 F1 | 	add	objptr, ##656
1ac28     F2 00 68 FC | 	wrlong	#0, objptr
1ac2c     22 00 00 FF 
1ac30     50 E5 85 F1 | 	sub	objptr, ##17744
1ac34     F2 04 68 FC | 	wrlong	#2, objptr
1ac38     04 E4 05 F1 | 	add	objptr, #4
1ac3c     F2 26 69 FC | 	wrlong	#147, objptr
1ac40     04 E4 05 F1 | 	add	objptr, #4
1ac44     F2 34 69 FC | 	wrlong	#154, objptr
1ac48     04 E4 05 F1 | 	add	objptr, #4
1ac4c     F2 08 68 FC | 	wrlong	#4, objptr
1ac50     04 E4 85 F1 | 	sub	objptr, #4
1ac54     F2 1C 02 FB | 	rdlong	arg06, objptr
1ac58     14 E4 85 F1 | 	sub	objptr, #20
1ac5c     F2 1C 62 FC | 	wrlong	arg06, objptr
1ac60     04 E4 05 F1 | 	add	objptr, #4
1ac64     F2 00 68 FC | 	wrlong	#0, objptr
1ac68     04 E4 05 F1 | 	add	objptr, #4
1ac6c     F2 00 68 FC | 	wrlong	#0, objptr
1ac70     21 00 00 FF 
1ac74     C0 E4 05 F1 | 	add	objptr, ##17088
1ac78     F2 02 68 FC | 	wrlong	#1, objptr
1ac7c     01 00 00 FF 
1ac80     9C E4 05 F1 | 	add	objptr, ##668
1ac84     F2 00 68 FC | 	wrlong	#0, objptr
1ac88     01 00 00 FF 
1ac8c     00 EA 05 F1 | 	add	ptr__dat__, ##512
1ac90     08 E4 05 F1 | 	add	objptr, #8
1ac94     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1ac98     04 E4 85 F1 | 	sub	objptr, #4
1ac9c     03 00 80 FF 
1aca0     F2 3C 69 FC | 	wrlong	##1694, objptr
1aca4     14 00 00 FF 
1aca8     2C E5 85 F1 | 	sub	objptr, ##10540
1acac     F2 18 68 FC | 	wrlong	#12, objptr
1acb0     65 00 00 FF 
1acb4     64 E4 85 F1 | 	sub	objptr, ##51812
1acb8     01 00 00 FF 
1acbc     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1acc0     84 DD BF FD | 	call	#_init_commands
1acc4     00 F7 BF FD | 	call	#_init_error_strings
1acc8     9C EE BF FD | 	call	#_init_audio
1accc     E8 38 BF FD | 	call	#_do_new
1acd0     57 00 00 FF 
1acd4     3C E4 05 F1 | 	add	objptr, ##44604
1acd8     F2 12 02 FB | 	rdlong	arg01, objptr
1acdc     04 E4 85 F1 | 	sub	objptr, #4
1ace0     F2 14 02 FB | 	rdlong	arg02, objptr
1ace4     57 00 00 FF 
1ace8     38 E4 85 F1 | 	sub	objptr, ##44600
1acec     F8 27 B0 FD | 	call	#_hg010b_spin2_cls
1acf0     57 00 00 FF 
1acf4     40 E4 05 F1 | 	add	objptr, ##44608
1acf8     F2 12 02 FB | 	rdlong	arg01, objptr
1acfc     57 00 00 FF 
1ad00     40 E4 85 F1 | 	sub	objptr, ##44608
1ad04     90 26 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1ad08                 | ' 
1ad08                 | ' leading_spaces:=amount
1ad08     01 00 00 FF 
1ad0c     B6 E4 05 F1 | 	add	objptr, ##694
1ad10     F2 04 68 FC | 	wrlong	#2, objptr
1ad14     01 00 00 FF 
1ad18     B6 E4 85 F1 | 	sub	objptr, ##694
1ad1c     77 01 00 FF 
1ad20     57 20 06 F6 | 	mov	local02, ##@LR__5250
1ad24     3D 12 06 F6 | 	mov	arg01, #61
1ad28     3C 14 06 F6 | 	mov	arg02, #60
1ad2c     3B 16 06 F6 | 	mov	arg03, #59
1ad30     3A 18 06 F6 | 	mov	arg04, #58
1ad34     6C 88 B0 FD | 	call	#__system___vfs_open_sdcardx
1ad38     FD 14 02 F6 | 	mov	arg02, result1
1ad3c     10 13 02 F6 | 	mov	arg01, local02
1ad40     FC 41 B0 FD | 	call	#__system___mount
1ad44     77 01 00 FF 
1ad48     5B 12 06 F6 | 	mov	arg01, ##@LR__5251
1ad4c     B0 44 B0 FD | 	call	#__system___chdir
1ad50     77 01 00 FF 
1ad54     63 20 06 F6 | 	mov	local02, ##@LR__5252
1ad58     72 00 00 FF 
1ad5c     98 E4 05 F1 | 	add	objptr, ##58520
1ad60     F2 20 62 FC | 	wrlong	local02, objptr
1ad64     1B 00 00 FF 
1ad68     64 E4 85 F1 | 	sub	objptr, ##13924
1ad6c     F2 12 02 FB | 	rdlong	arg01, objptr
1ad70     57 00 00 FF 
1ad74     34 E4 85 F1 | 	sub	objptr, ##44596
1ad78     01 12 66 F0 | 	shl	arg01, #1
1ad7c     01 14 06 F6 | 	mov	arg02, #1
1ad80     54 26 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1ad84                 | ' 
1ad84                 | ' init_commands
1ad84                 | ' init_error_strings
1ad84                 | ' init_audio
1ad84                 | ' do_new
1ad84                 | ' 
1ad84                 | ' 
1ad84                 | ' cls(ink, paper)
1ad84                 | ' v.setfontfamily(font) 				' use ST Mono font
1ad84                 | ' v.setleadingspaces(2)
1ad84                 | ' mount "/sd", _vfs_open_sdcard()
1ad84                 | ' chdir "/sd/bas"
1ad84                 | ' 
1ad84                 | ' currentdir$="/sd/bas"
1ad84                 | ' 
1ad84                 | ' position 2*editor_spaces,1 : print ver$
1ad84     00 12 06 F6 | 	mov	arg01, #0
1ad88     80 97 B0 FD | 	call	#__system___getiolock_0484
1ad8c     FD 12 02 F6 | 	mov	arg01, result1
1ad90     E0 3D B0 FD | 	call	#__system___lockmem
1ad94     18 00 00 FF 
1ad98     4C EB 05 F1 | 	add	ptr__dat__, ##12620
1ad9c     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1ada0     18 00 00 FF 
1ada4     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
1ada8     00 12 06 F6 | 	mov	arg01, #0
1adac     00 16 06 F6 | 	mov	arg03, #0
1adb0     C8 4A B0 FD | 	call	#__system___basic_print_string
1adb4     00 12 06 F6 | 	mov	arg01, #0
1adb8     0A 14 06 F6 | 	mov	arg02, #10
1adbc     00 16 06 F6 | 	mov	arg03, #0
1adc0     60 4A B0 FD | 	call	#__system___basic_print_char
1adc4     00 12 06 F6 | 	mov	arg01, #0
1adc8     40 97 B0 FD | 	call	#__system___getiolock_0484
1adcc     FD 00 68 FC | 	wrlong	#0, result1
1add0     79 00 00 FF 
1add4     88 E5 05 F1 | 	add	objptr, ##62344
1add8     F2 12 02 FB | 	rdlong	arg01, objptr
1addc     16 00 00 FF 
1ade0     2C E5 85 F1 | 	sub	objptr, ##11564
1ade4     F2 20 02 FB | 	rdlong	local02, objptr
1ade8     63 00 00 FF 
1adec     5C E4 85 F1 | 	sub	objptr, ##50780
1adf0     10 13 82 F1 | 	sub	arg01, local02
1adf4     00 14 06 F6 | 	mov	arg02, #0
1adf8     0A 16 06 F6 | 	mov	arg03, #10
1adfc     10 60 B0 FD | 	call	#__system__Number_S
1ae00     FD 12 02 F6 | 	mov	arg01, result1
1ae04     77 01 00 FF 
1ae08     6B 14 06 F6 | 	mov	arg02, ##@LR__5253
1ae0c     C0 3D B0 FD | 	call	#__system___string_concat
1ae10     FD 20 02 F6 | 	mov	local02, result1
1ae14     78 00 00 FF 
1ae18     EC E4 05 F1 | 	add	objptr, ##61676
1ae1c     F2 20 62 FC | 	wrlong	local02, objptr
1ae20     78 00 00 FF 
1ae24     EC E4 85 F1 | 	sub	objptr, ##61676
1ae28                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
1ae28     00 12 06 F6 | 	mov	arg01, #0
1ae2c     DC 96 B0 FD | 	call	#__system___getiolock_0484
1ae30     FD 12 02 F6 | 	mov	arg01, result1
1ae34     3C 3D B0 FD | 	call	#__system___lockmem
1ae38     78 00 00 FF 
1ae3c     EC E4 05 F1 | 	add	objptr, ##61676
1ae40     F2 14 02 FB | 	rdlong	arg02, objptr
1ae44     78 00 00 FF 
1ae48     EC E4 85 F1 | 	sub	objptr, ##61676
1ae4c     00 12 06 F6 | 	mov	arg01, #0
1ae50     00 16 06 F6 | 	mov	arg03, #0
1ae54     24 4A B0 FD | 	call	#__system___basic_print_string
1ae58     00 12 06 F6 | 	mov	arg01, #0
1ae5c     0A 14 06 F6 | 	mov	arg02, #10
1ae60     00 16 06 F6 | 	mov	arg03, #0
1ae64     BC 49 B0 FD | 	call	#__system___basic_print_char
1ae68     00 12 06 F6 | 	mov	arg01, #0
1ae6c     9C 96 B0 FD | 	call	#__system___getiolock_0484
1ae70     FD 00 68 FC | 	wrlong	#0, result1
1ae74     57 00 00 FF 
1ae78     34 E4 05 F1 | 	add	objptr, ##44596
1ae7c     F2 12 02 FB | 	rdlong	arg01, objptr
1ae80     57 00 00 FF 
1ae84     34 E4 85 F1 | 	sub	objptr, ##44596
1ae88     01 12 66 F0 | 	shl	arg01, #1
1ae8c     04 14 06 F6 | 	mov	arg02, #4
1ae90     44 25 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1ae94                 | ' position 2*editor_spaces,4 : print "Ready"
1ae94     00 12 06 F6 | 	mov	arg01, #0
1ae98     70 96 B0 FD | 	call	#__system___getiolock_0484
1ae9c     FD 12 02 F6 | 	mov	arg01, result1
1aea0     D0 3C B0 FD | 	call	#__system___lockmem
1aea4     77 01 00 FF 
1aea8     7D 14 06 F6 | 	mov	arg02, ##@LR__5254
1aeac     00 12 06 F6 | 	mov	arg01, #0
1aeb0     00 16 06 F6 | 	mov	arg03, #0
1aeb4     C4 49 B0 FD | 	call	#__system___basic_print_string
1aeb8     FD 22 02 F6 | 	mov	local03, result1
1aebc     00 12 06 F6 | 	mov	arg01, #0
1aec0     0A 14 06 F6 | 	mov	arg02, #10
1aec4     00 16 06 F6 | 	mov	arg03, #0
1aec8     58 49 B0 FD | 	call	#__system___basic_print_char
1aecc     01 24 06 F6 | 	mov	local04, #1
1aed0     00 12 06 F6 | 	mov	arg01, #0
1aed4     34 96 B0 FD | 	call	#__system___getiolock_0484
1aed8     FD 00 68 FC | 	wrlong	#0, result1
1aedc     00 26 06 F6 | 	mov	local05, #0
1aee0     00 14 06 F6 | 	mov	arg02, #0
1aee4     01 14 D6 F7 | 	test	arg02, #1 wc
1aee8     5A 4C 64 FD | 	drvc	#38
1aeec     01 14 D6 F7 | 	test	arg02, #1 wc
1aef0     5A 4E 64 FD | 	drvc	#39
1aef4     77 01 00 FF 
1aef8     83 20 06 F6 | 	mov	local02, ##@LR__5255
1aefc     79 00 00 FF 
1af00     B4 E5 05 F1 | 	add	objptr, ##62388
1af04     F2 20 62 FC | 	wrlong	local02, objptr
1af08     04 E4 05 F1 | 	add	objptr, #4
1af0c     FF FF FF FF 
1af10     F2 FE 6B FC | 	wrlong	##-1, objptr
1af14     79 00 00 FF 
1af18     B8 E5 85 F1 | 	sub	objptr, ##62392
1af1c                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
1af1c                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1af1c                 | ' 
1af1c                 | ' loadname="noname.bas"
1af1c                 | ' do_insert=-1
1af1c                 | ' 
1af1c                 | ' 
1af1c                 | ' '-------------------------------------------------------------------------------------------------------- 
1af1c                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1af1c                 | ' '--------------------------------------------------------------------------------------------------------
1af1c                 | ' 
1af1c                 | ' do
1af1c                 | LR__2120
1af1c     01 12 06 F6 | 	mov	arg01, #1
1af20     54 25 B0 FD | 	call	#_hg010b_spin2_waitvbl
1af24     07 12 06 F6 | 	mov	arg01, #7
1af28     0B 00 00 FF 
1af2c     CC E4 05 F1 | 	add	objptr, ##5836
1af30     40 39 B0 FD | 	call	#_audio096_spin2_stop
1af34     0B 00 00 FF 
1af38     CC E4 85 F1 | 	sub	objptr, ##5836
1af3c     3C 34 B0 FD | 	call	#_usbnew_spin2_get_key
1af40     65 00 00 FF 
1af44     74 E4 05 F1 | 	add	objptr, ##51828
1af48     F2 FA 61 FC | 	wrlong	result1, objptr
1af4c                 | '   return hkbd_led_rep
1af4c     13 00 00 FF 
1af50     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
1af54     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
1af58     13 00 00 FF 
1af5c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
1af60     14 00 00 FF 
1af64     48 E5 05 F1 | 	add	objptr, ##10568
1af68     F2 FA 61 FC | 	wrlong	result1, objptr
1af6c                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
1af6c     14 00 00 FF 
1af70     48 E5 85 F1 | 	sub	objptr, ##10568
1af74     F2 20 02 FB | 	rdlong	local02, objptr
1af78     65 00 00 FF 
1af7c     74 E4 85 F1 | 	sub	objptr, ##51828
1af80     01 20 16 F2 | 	cmp	local02, #1 wc
1af84     BC 00 90 CD |  if_b	jmp	#LR__2121
1af88     65 00 00 FF 
1af8c     74 E4 05 F1 | 	add	objptr, ##51828
1af90     F2 24 02 FB | 	rdlong	local04, objptr
1af94     65 00 00 FF 
1af98     74 E4 85 F1 | 	sub	objptr, ##51828
1af9c     12 23 02 F6 | 	mov	local03, local04
1afa0     04 22 16 F2 | 	cmp	local03, #4 wc
1afa4     9C 00 90 3D |  if_ae	jmp	#LR__2121
1afa8     78 00 00 FF 
1afac     F0 E4 05 F1 | 	add	objptr, ##61680
1afb0     F2 1E 02 FB | 	rdlong	local01, objptr
1afb4     78 00 00 FF 
1afb8     F0 E4 85 F1 | 	sub	objptr, ##61680
1afbc     0F 27 02 F6 | 	mov	local05, local01
1afc0     01 26 0E F2 | 	cmp	local05, #1 wz
1afc4     7C 00 90 5D |  if_ne	jmp	#LR__2121
1afc8     04 00 00 FF 
1afcc     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
1afd0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1afd4     04 00 00 FF 
1afd8     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1afdc     56 00 00 FF 
1afe0     44 22 06 F6 | 	mov	local03, ##44100
1afe4     0C 24 C6 F9 | 	decod	local04, #12
1afe8     00 26 06 F6 | 	mov	local05, #0
1afec     03 00 00 FF 
1aff0     DE 1E 06 F6 | 	mov	local01, ##1758
1aff4     07 12 06 F6 | 	mov	arg01, #7
1aff8     56 00 00 FF 
1affc     44 16 06 F6 | 	mov	arg03, ##44100
1b000     0C 18 C6 F9 | 	decod	arg04, #12
1b004     00 1A 06 F6 | 	mov	arg05, #0
1b008     03 00 00 FF 
1b00c     DE 1C 06 F6 | 	mov	arg06, ##1758
1b010     0B 00 00 FF 
1b014     CC E4 05 F1 | 	add	objptr, ##5836
1b018     E8 36 B0 FD | 	call	#_audio096_spin2_play
1b01c     0B 00 00 FF 
1b020     CC E4 85 F1 | 	sub	objptr, ##5836
1b024     0A 12 06 F6 | 	mov	arg01, #10
1b028     3C 3E B0 FD | 	call	#__system___waitms
1b02c     07 12 06 F6 | 	mov	arg01, #7
1b030     0B 00 00 FF 
1b034     CC E4 05 F1 | 	add	objptr, ##5836
1b038     38 38 B0 FD | 	call	#_audio096_spin2_stop
1b03c     0B 00 00 FF 
1b040     CC E4 85 F1 | 	sub	objptr, ##5836
1b044                 | LR__2121
1b044                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
1b044     65 00 00 FF 
1b048     74 E4 05 F1 | 	add	objptr, ##51828
1b04c     F2 20 02 FB | 	rdlong	local02, objptr
1b050     65 00 00 FF 
1b054     74 E4 85 F1 | 	sub	objptr, ##51828
1b058     04 20 16 F2 | 	cmp	local02, #4 wc
1b05c     80 00 90 CD |  if_b	jmp	#LR__2122
1b060     65 00 00 FF 
1b064     74 E4 05 F1 | 	add	objptr, ##51828
1b068     F2 24 02 FB | 	rdlong	local04, objptr
1b06c     65 00 00 FF 
1b070     74 E4 85 F1 | 	sub	objptr, ##51828
1b074     12 23 02 F6 | 	mov	local03, local04
1b078     00 00 40 FF 
1b07c     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
1b080     65 00 00 CF 
1b084     74 E4 05 C1 |  if_b	add	objptr, ##51828
1b088     F2 1E 02 CB |  if_b	rdlong	local01, objptr
1b08c     65 00 00 CF 
1b090     74 E4 85 C1 |  if_b	sub	objptr, ##51828
1b094     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
1b098     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
1b09c     40 00 90 3D |  if_ae	jmp	#LR__2122
1b0a0     65 00 00 FF 
1b0a4     74 E4 05 F1 | 	add	objptr, ##51828
1b0a8     F2 20 02 FB | 	rdlong	local02, objptr
1b0ac     04 E4 05 F1 | 	add	objptr, #4
1b0b0     F2 20 62 FC | 	wrlong	local02, objptr
1b0b4     14 00 00 FF 
1b0b8     48 E5 05 F1 | 	add	objptr, ##10568
1b0bc     F2 02 68 FC | 	wrlong	#1, objptr
1b0c0     14 00 00 FF 
1b0c4     48 E5 85 F1 | 	sub	objptr, ##10568
1b0c8     F2 20 02 FB | 	rdlong	local02, objptr
1b0cc     14 00 00 FF 
1b0d0     4C E5 05 F1 | 	add	objptr, ##10572
1b0d4     F2 20 62 FC | 	wrlong	local02, objptr
1b0d8     79 00 00 FF 
1b0dc     C4 E5 85 F1 | 	sub	objptr, ##62404
1b0e0                 | LR__2122
1b0e0                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
1b0e0     65 00 00 FF 
1b0e4     74 E4 05 F1 | 	add	objptr, ##51828
1b0e8     F2 20 02 FB | 	rdlong	local02, objptr
1b0ec     65 00 00 FF 
1b0f0     74 E4 85 F1 | 	sub	objptr, ##51828
1b0f4     00 00 40 FF 
1b0f8     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
1b0fc     79 00 00 3F 
1b100     C8 E5 05 31 |  if_ae	add	objptr, ##62408
1b104     F2 00 68 3C |  if_ae	wrlong	#0, objptr
1b108     08 E4 85 31 |  if_ae	sub	objptr, #8
1b10c     F2 00 68 3C |  if_ae	wrlong	#0, objptr
1b110     79 00 00 3F 
1b114     C0 E5 85 31 |  if_ae	sub	objptr, ##62400
1b118                 | ' if key=0 andalso rpt=1 then rptcnt+=1
1b118     65 00 00 FF 
1b11c     74 E4 05 F1 | 	add	objptr, ##51828
1b120     F2 20 0A FB | 	rdlong	local02, objptr wz
1b124     65 00 00 FF 
1b128     74 E4 85 F1 | 	sub	objptr, ##51828
1b12c     79 00 00 AF 
1b130     C0 E5 05 A1 |  if_e	add	objptr, ##62400
1b134     F2 24 02 AB |  if_e	rdlong	local04, objptr
1b138     79 00 00 AF 
1b13c     C0 E5 85 A1 |  if_e	sub	objptr, ##62400
1b140     12 23 02 A6 |  if_e	mov	local03, local04
1b144     01 22 0E A2 |  if_e	cmp	local03, #1 wz
1b148     79 00 00 AF 
1b14c     C8 E5 05 A1 |  if_e	add	objptr, ##62408
1b150     F2 20 02 AB |  if_e	rdlong	local02, objptr
1b154     01 20 06 A1 |  if_e	add	local02, #1
1b158     F2 20 62 AC |  if_e	wrlong	local02, objptr
1b15c     79 00 00 AF 
1b160     C8 E5 85 A1 |  if_e	sub	objptr, ##62408
1b164                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
1b164     65 00 00 FF 
1b168     74 E4 05 F1 | 	add	objptr, ##51828
1b16c     F2 20 02 FB | 	rdlong	local02, objptr
1b170     65 00 00 FF 
1b174     74 E4 85 F1 | 	sub	objptr, ##51828
1b178     00 00 40 FF 
1b17c     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
1b180     44 00 90 3D |  if_ae	jmp	#LR__2124
1b184     79 00 00 FF 
1b188     C8 E5 05 F1 | 	add	objptr, ##62408
1b18c     F2 20 02 FB | 	rdlong	local02, objptr
1b190     79 00 00 FF 
1b194     C8 E5 85 F1 | 	sub	objptr, ##62408
1b198     19 20 0E F2 | 	cmp	local02, #25 wz
1b19c     28 00 90 5D |  if_ne	jmp	#LR__2123
1b1a0     65 00 00 FF 
1b1a4     78 E4 05 F1 | 	add	objptr, ##51832
1b1a8     F2 20 02 FB | 	rdlong	local02, objptr
1b1ac     14 00 00 FF 
1b1b0     4C E5 05 F1 | 	add	objptr, ##10572
1b1b4     F2 20 62 FC | 	wrlong	local02, objptr
1b1b8     04 E4 05 F1 | 	add	objptr, #4
1b1bc     F2 2A 68 FC | 	wrlong	#21, objptr
1b1c0     79 00 00 FF 
1b1c4     C8 E5 85 F1 | 	sub	objptr, ##62408
1b1c8                 | LR__2123
1b1c8                 | LR__2124
1b1c8                 | ' 
1b1c8                 | ' 
1b1c8                 | ' if key3<>0 then
1b1c8     79 00 00 FF 
1b1cc     C4 E5 05 F1 | 	add	objptr, ##62404
1b1d0     F2 28 0A FB | 	rdlong	local06, objptr wz
1b1d4     79 00 00 FF 
1b1d8     C4 E5 85 F1 | 	sub	objptr, ##62404
1b1dc     3C FD 9F AD |  if_e	jmp	#LR__2120
1b1e0                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
1b1e0     78 00 00 FF 
1b1e4     F0 E4 05 F1 | 	add	objptr, ##61680
1b1e8     F2 20 02 FB | 	rdlong	local02, objptr
1b1ec     78 00 00 FF 
1b1f0     F0 E4 85 F1 | 	sub	objptr, ##61680
1b1f4     01 20 0E F2 | 	cmp	local02, #1 wz
1b1f8     50 00 90 5D |  if_ne	jmp	#LR__2125
1b1fc     79 00 00 FF 
1b200     94 E5 05 F1 | 	add	objptr, ##62356
1b204     F2 14 02 FB | 	rdlong	arg02, objptr
1b208     56 00 00 FF 
1b20c     44 22 06 F6 | 	mov	local03, ##44100
1b210     0C 24 C6 F9 | 	decod	local04, #12
1b214     04 E4 85 F1 | 	sub	objptr, #4
1b218     F2 26 02 FB | 	rdlong	local05, objptr
1b21c     01 1E 66 F6 | 	neg	local01, #1
1b220     07 12 06 F6 | 	mov	arg01, #7
1b224     56 00 00 FF 
1b228     44 16 06 F6 | 	mov	arg03, ##44100
1b22c     0C 18 C6 F9 | 	decod	arg04, #12
1b230     13 1B 02 F6 | 	mov	arg05, local05
1b234     01 1C 66 F6 | 	neg	arg06, #1
1b238     6E 00 00 FF 
1b23c     C4 E4 85 F1 | 	sub	objptr, ##56516
1b240     C0 34 B0 FD | 	call	#_audio096_spin2_play
1b244     0B 00 00 FF 
1b248     CC E4 85 F1 | 	sub	objptr, ##5836
1b24c                 | LR__2125
1b24c     79 00 00 FF 
1b250     C4 E5 05 F1 | 	add	objptr, ##62404
1b254     F2 12 02 FB | 	rdlong	arg01, objptr
1b258     79 00 00 FF 
1b25c     C4 E5 85 F1 | 	sub	objptr, ##62404
1b260     D8 F7 BF FD | 	call	#_scantochar
1b264     79 00 00 FF 
1b268     CC E5 05 F1 | 	add	objptr, ##62412
1b26c     F2 FA 61 FC | 	wrlong	result1, objptr
1b270                 | '   if leds and 2 = 2 then 
1b270     10 E4 85 F1 | 	sub	objptr, #16
1b274     F2 20 0A FB | 	rdlong	local02, objptr wz
1b278     79 00 00 FF 
1b27c     BC E5 85 F1 | 	sub	objptr, ##62396
1b280     68 01 90 AD |  if_e	jmp	#LR__2133
1b284                 | '     if key4>96 andalso key4<123 then
1b284     79 00 00 FF 
1b288     CC E5 05 F1 | 	add	objptr, ##62412
1b28c     F2 20 02 FB | 	rdlong	local02, objptr
1b290     79 00 00 FF 
1b294     CC E5 85 F1 | 	sub	objptr, ##62412
1b298     61 20 56 F2 | 	cmps	local02, #97 wc
1b29c     40 00 90 CD |  if_b	jmp	#LR__2126
1b2a0     79 00 00 FF 
1b2a4     CC E5 05 F1 | 	add	objptr, ##62412
1b2a8     F2 24 02 FB | 	rdlong	local04, objptr
1b2ac     79 00 00 FF 
1b2b0     CC E5 85 F1 | 	sub	objptr, ##62412
1b2b4     12 23 02 F6 | 	mov	local03, local04
1b2b8     7B 22 56 F2 | 	cmps	local03, #123 wc
1b2bc     20 00 90 3D |  if_ae	jmp	#LR__2126
1b2c0     79 00 00 FF 
1b2c4     CC E5 05 F1 | 	add	objptr, ##62412
1b2c8     F2 20 02 FB | 	rdlong	local02, objptr
1b2cc     20 20 86 F1 | 	sub	local02, #32
1b2d0     F2 20 62 FC | 	wrlong	local02, objptr
1b2d4     79 00 00 FF 
1b2d8     CC E5 85 F1 | 	sub	objptr, ##62412
1b2dc     0C 01 90 FD | 	jmp	#LR__2132
1b2e0                 | LR__2126
1b2e0     79 00 00 FF 
1b2e4     CC E5 05 F1 | 	add	objptr, ##62412
1b2e8     F2 20 02 FB | 	rdlong	local02, objptr
1b2ec     79 00 00 FF 
1b2f0     CC E5 85 F1 | 	sub	objptr, ##62412
1b2f4     41 20 56 F2 | 	cmps	local02, #65 wc
1b2f8     40 00 90 CD |  if_b	jmp	#LR__2127
1b2fc     79 00 00 FF 
1b300     CC E5 05 F1 | 	add	objptr, ##62412
1b304     F2 24 02 FB | 	rdlong	local04, objptr
1b308     79 00 00 FF 
1b30c     CC E5 85 F1 | 	sub	objptr, ##62412
1b310     12 23 02 F6 | 	mov	local03, local04
1b314     5B 22 56 F2 | 	cmps	local03, #91 wc
1b318     20 00 90 3D |  if_ae	jmp	#LR__2127
1b31c     79 00 00 FF 
1b320     CC E5 05 F1 | 	add	objptr, ##62412
1b324     F2 20 02 FB | 	rdlong	local02, objptr
1b328     20 20 06 F1 | 	add	local02, #32
1b32c     F2 20 62 FC | 	wrlong	local02, objptr
1b330     79 00 00 FF 
1b334     CC E5 85 F1 | 	sub	objptr, ##62412
1b338     B0 00 90 FD | 	jmp	#LR__2131
1b33c                 | LR__2127
1b33c     79 00 00 FF 
1b340     CC E5 05 F1 | 	add	objptr, ##62412
1b344     F2 20 02 FB | 	rdlong	local02, objptr
1b348     79 00 00 FF 
1b34c     CC E5 85 F1 | 	sub	objptr, ##62412
1b350     17 20 56 F2 | 	cmps	local02, #23 wc
1b354     40 00 90 CD |  if_b	jmp	#LR__2128
1b358     79 00 00 FF 
1b35c     CC E5 05 F1 | 	add	objptr, ##62412
1b360     F2 24 02 FB | 	rdlong	local04, objptr
1b364     79 00 00 FF 
1b368     CC E5 85 F1 | 	sub	objptr, ##62412
1b36c     12 23 02 F6 | 	mov	local03, local04
1b370     20 22 56 F2 | 	cmps	local03, #32 wc
1b374     20 00 90 3D |  if_ae	jmp	#LR__2128
1b378     79 00 00 FF 
1b37c     CC E5 05 F1 | 	add	objptr, ##62412
1b380     F2 20 02 FB | 	rdlong	local02, objptr
1b384     09 20 86 F1 | 	sub	local02, #9
1b388     F2 20 62 FC | 	wrlong	local02, objptr
1b38c     79 00 00 FF 
1b390     CC E5 85 F1 | 	sub	objptr, ##62412
1b394     54 00 90 FD | 	jmp	#LR__2130
1b398                 | LR__2128
1b398     79 00 00 FF 
1b39c     CC E5 05 F1 | 	add	objptr, ##62412
1b3a0     F2 20 02 FB | 	rdlong	local02, objptr
1b3a4     79 00 00 FF 
1b3a8     CC E5 85 F1 | 	sub	objptr, ##62412
1b3ac     0E 20 56 F2 | 	cmps	local02, #14 wc
1b3b0     38 00 90 CD |  if_b	jmp	#LR__2129
1b3b4     79 00 00 FF 
1b3b8     CC E5 05 F1 | 	add	objptr, ##62412
1b3bc     F2 24 02 FB | 	rdlong	local04, objptr
1b3c0     79 00 00 FF 
1b3c4     CC E5 85 F1 | 	sub	objptr, ##62412
1b3c8     12 23 02 F6 | 	mov	local03, local04
1b3cc     17 22 56 F2 | 	cmps	local03, #23 wc
1b3d0     79 00 00 CF 
1b3d4     CC E5 05 C1 |  if_b	add	objptr, ##62412
1b3d8     F2 20 02 CB |  if_b	rdlong	local02, objptr
1b3dc     27 20 06 C1 |  if_b	add	local02, #39
1b3e0     F2 20 62 CC |  if_b	wrlong	local02, objptr
1b3e4     79 00 00 CF 
1b3e8     CC E5 85 C1 |  if_b	sub	objptr, ##62412
1b3ec                 | LR__2129
1b3ec                 | LR__2130
1b3ec                 | LR__2131
1b3ec                 | LR__2132
1b3ec                 | LR__2133
1b3ec                 | '  
1b3ec                 | '  
1b3ec                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then 
1b3ec     79 00 00 FF 
1b3f0     CC E5 05 F1 | 	add	objptr, ##62412
1b3f4     F2 20 02 FB | 	rdlong	local02, objptr
1b3f8     79 00 00 FF 
1b3fc     CC E5 85 F1 | 	sub	objptr, ##62412
1b400     01 20 56 F2 | 	cmps	local02, #1 wc
1b404     E4 01 90 CD |  if_b	jmp	#LR__2138
1b408     79 00 00 FF 
1b40c     CC E5 05 F1 | 	add	objptr, ##62412
1b410     F2 24 02 FB | 	rdlong	local04, objptr
1b414     79 00 00 FF 
1b418     CC E5 85 F1 | 	sub	objptr, ##62412
1b41c     12 23 02 F6 | 	mov	local03, local04
1b420     7F 22 56 F2 | 	cmps	local03, #127 wc
1b424     3C E4 05 C1 |  if_b	add	objptr, #60
1b428     F2 1E E2 CA |  if_b	rdword	local01, objptr
1b42c     3C E4 85 C1 |  if_b	sub	objptr, #60
1b430     0F 27 32 C9 |  if_b	getword	local05, local01, #0
1b434     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
1b438     B0 01 90 3D |  if_ae	jmp	#LR__2138
1b43c                 | '     if do_insert then
1b43c     79 00 00 FF 
1b440     B8 E5 05 F1 | 	add	objptr, ##62392
1b444     F2 20 0A FB | 	rdlong	local02, objptr wz
1b448     79 00 00 FF 
1b44c     B8 E5 85 F1 | 	sub	objptr, ##62392
1b450     80 01 90 AD |  if_e	jmp	#LR__2137
1b454                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) step -1 : pspoke i,pspeek(i-1) : next i 
1b454     3E E4 05 F1 | 	add	objptr, #62
1b458     F2 22 C2 FA | 	rdbyte	local03, objptr
1b45c     11 25 E2 F8 | 	getbyte	local04, local03, #0
1b460     80 24 06 FA | 	mul	local04, #128
1b464     3A E4 85 F1 | 	sub	objptr, #58
1b468     F2 2A 02 FB | 	rdlong	local07, objptr
1b46c     15 2D 02 F6 | 	mov	local08, local07
1b470     12 2D 02 F1 | 	add	local08, local04
1b474     7F 2C 06 F1 | 	add	local08, #127
1b478     11 23 E2 F8 | 	getbyte	local03, local03, #0
1b47c     80 22 06 FA | 	mul	local03, #128
1b480     11 2B 02 F1 | 	add	local07, local03
1b484     38 E4 05 F1 | 	add	objptr, #56
1b488     F2 26 E2 FA | 	rdword	local05, objptr
1b48c     3C E4 85 F1 | 	sub	objptr, #60
1b490     13 2F 52 F6 | 	abs	local09, local05 wc
1b494     01 2E 46 F0 | 	shr	local09, #1
1b498     17 2B 82 F3 | 	sumc	local07, local09
1b49c                 | LR__2134
1b49c     16 31 02 F6 | 	mov	local10, local08
1b4a0     01 30 86 F1 | 	sub	local10, #1
1b4a4     18 13 02 F6 | 	mov	arg01, local10
1b4a8     88 F4 BF FD | 	call	#_pspeek
1b4ac     FD 32 02 F6 | 	mov	local11, result1
1b4b0     19 35 E2 F8 | 	getbyte	local12, local11, #0
1b4b4     1A 37 02 F6 | 	mov	local13, local12
1b4b8     16 13 02 F6 | 	mov	arg01, local08
1b4bc     1B 15 02 F6 | 	mov	arg02, local13
1b4c0     28 F4 BF FD | 	call	#_pspoke
1b4c4     01 2C 86 F1 | 	sub	local08, #1
1b4c8     15 2D 52 F2 | 	cmps	local08, local07 wc
1b4cc     CC FF 9F 3D |  if_ae	jmp	#LR__2134
1b4d0     79 00 00 FF 
1b4d4     D0 E5 05 F1 | 	add	objptr, ##62416
1b4d8     F2 00 68 FC | 	wrlong	#0, objptr
1b4dc     79 00 00 FF 
1b4e0     92 E5 85 F1 | 	sub	objptr, ##62354
1b4e4     F2 22 C2 FA | 	rdbyte	local03, objptr
1b4e8     11 25 E2 F8 | 	getbyte	local04, local03, #0
1b4ec     80 24 06 FA | 	mul	local04, #128
1b4f0     3A E4 85 F1 | 	sub	objptr, #58
1b4f4     F2 26 02 FB | 	rdlong	local05, objptr
1b4f8     13 2D 02 F6 | 	mov	local08, local05
1b4fc     12 2D 02 F1 | 	add	local08, local04
1b500     38 E4 05 F1 | 	add	objptr, #56
1b504     F2 2E E2 FA | 	rdword	local09, objptr
1b508     17 1F 32 F9 | 	getword	local01, local09, #0
1b50c     0F 39 52 F6 | 	abs	local14, local01 wc
1b510     01 38 46 F0 | 	shr	local14, #1
1b514     1C 39 82 F6 | 	negc	local14, local14
1b518     1C 2D 02 F1 | 	add	local08, local14
1b51c     11 23 E2 F8 | 	getbyte	local03, local03, #0
1b520     80 22 06 FA | 	mul	local03, #128
1b524     13 25 02 F6 | 	mov	local04, local05
1b528     3C E4 85 F1 | 	sub	objptr, #60
1b52c     12 3B 02 F6 | 	mov	local15, local04
1b530     11 3B 02 F1 | 	add	local15, local03
1b534     80 3A 06 F1 | 	add	local15, #128
1b538                 | LR__2135
1b538     1D 2D 52 F2 | 	cmps	local08, local15 wc
1b53c     94 00 90 3D |  if_ae	jmp	#LR__2136
1b540     3C E4 05 F1 | 	add	objptr, #60
1b544     F2 20 E2 FA | 	rdword	local02, objptr
1b548     79 00 00 FF 
1b54c     94 E5 05 F1 | 	add	objptr, ##62356
1b550     F2 24 02 FB | 	rdlong	local04, objptr
1b554     01 24 66 F0 | 	shl	local04, #1
1b558     12 21 02 F1 | 	add	local02, local04
1b55c     79 00 00 FF 
1b560     92 E5 85 F1 | 	sub	objptr, ##62354
1b564     F2 28 C2 FA | 	rdbyte	local06, objptr
1b568     3E E4 85 F1 | 	sub	objptr, #62
1b56c     10 28 06 FA | 	mul	local06, #16
1b570     04 28 06 F1 | 	add	local06, #4
1b574     16 13 02 F6 | 	mov	arg01, local08
1b578     B8 F3 BF FD | 	call	#_pspeek
1b57c     FD 22 E2 F8 | 	getbyte	local03, result1, #0
1b580     41 E4 05 F1 | 	add	objptr, #65
1b584     F2 24 02 FB | 	rdlong	local04, objptr
1b588     04 E4 05 F1 | 	add	objptr, #4
1b58c     F2 1E 02 FB | 	rdlong	local01, objptr
1b590     45 E4 85 F1 | 	sub	objptr, #69
1b594     0F 27 02 F6 | 	mov	local05, local01
1b598     10 13 02 F6 | 	mov	arg01, local02
1b59c     14 15 02 F6 | 	mov	arg02, local06
1b5a0     11 17 02 F6 | 	mov	arg03, local03
1b5a4     12 19 02 F6 | 	mov	arg04, local04
1b5a8     13 1B 02 F6 | 	mov	arg05, local05
1b5ac     C4 1C B0 FD | 	call	#_hg010b_spin2_putcharxycgf
1b5b0     79 00 00 FF 
1b5b4     D0 E5 05 F1 | 	add	objptr, ##62416
1b5b8     F2 20 02 FB | 	rdlong	local02, objptr
1b5bc     01 20 06 F1 | 	add	local02, #1
1b5c0     F2 20 62 FC | 	wrlong	local02, objptr
1b5c4     79 00 00 FF 
1b5c8     D0 E5 85 F1 | 	sub	objptr, ##62416
1b5cc     01 2C 06 F1 | 	add	local08, #1
1b5d0     64 FF 9F FD | 	jmp	#LR__2135
1b5d4                 | LR__2136
1b5d4                 | LR__2137
1b5d4     79 00 00 FF 
1b5d8     CC E5 05 F1 | 	add	objptr, ##62412
1b5dc     F2 12 02 FB | 	rdlong	arg01, objptr
1b5e0     79 00 00 FF 
1b5e4     CC E5 85 F1 | 	sub	objptr, ##62412
1b5e8     D0 1F B0 FD | 	call	#_hg010b_spin2_putchar
1b5ec                 | LR__2138
1b5ec                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
1b5ec     79 00 00 FF 
1b5f0     CC E5 05 F1 | 	add	objptr, ##62412
1b5f4     F2 20 02 FB | 	rdlong	local02, objptr
1b5f8     79 00 00 FF 
1b5fc     CC E5 85 F1 | 	sub	objptr, ##62412
1b600     01 20 56 F2 | 	cmps	local02, #1 wc
1b604     D0 00 90 CD |  if_b	jmp	#LR__2139
1b608     79 00 00 FF 
1b60c     CC E5 05 F1 | 	add	objptr, ##62412
1b610     F2 24 02 FB | 	rdlong	local04, objptr
1b614     79 00 00 FF 
1b618     CC E5 85 F1 | 	sub	objptr, ##62412
1b61c     12 23 02 F6 | 	mov	local03, local04
1b620     7F 22 56 F2 | 	cmps	local03, #127 wc
1b624     B0 00 90 3D |  if_ae	jmp	#LR__2139
1b628     3C E4 05 F1 | 	add	objptr, #60
1b62c     F2 1E E2 FA | 	rdword	local01, objptr
1b630     3C E4 85 F1 | 	sub	objptr, #60
1b634     0F 27 32 F9 | 	getword	local05, local01, #0
1b638     FE 26 0E F2 | 	cmp	local05, #254 wz
1b63c     78 00 00 AF 
1b640     F0 E4 05 A1 |  if_e	add	objptr, ##61680
1b644     F2 38 02 AB |  if_e	rdlong	local14, objptr
1b648     78 00 00 AF 
1b64c     F0 E4 85 A1 |  if_e	sub	objptr, ##61680
1b650     1C 2F 02 A6 |  if_e	mov	local09, local14
1b654     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
1b658     7C 00 90 5D |  if_ne	jmp	#LR__2139
1b65c     04 00 00 FF 
1b660     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
1b664     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1b668     04 00 00 FF 
1b66c     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1b670     56 00 00 FF 
1b674     44 22 06 F6 | 	mov	local03, ##44100
1b678     0C 24 C6 F9 | 	decod	local04, #12
1b67c     00 26 06 F6 | 	mov	local05, #0
1b680     03 00 00 FF 
1b684     DE 1E 06 F6 | 	mov	local01, ##1758
1b688     07 12 06 F6 | 	mov	arg01, #7
1b68c     56 00 00 FF 
1b690     44 16 06 F6 | 	mov	arg03, ##44100
1b694     0C 18 C6 F9 | 	decod	arg04, #12
1b698     00 1A 06 F6 | 	mov	arg05, #0
1b69c     03 00 00 FF 
1b6a0     DE 1C 06 F6 | 	mov	arg06, ##1758
1b6a4     0B 00 00 FF 
1b6a8     CC E4 05 F1 | 	add	objptr, ##5836
1b6ac     54 30 B0 FD | 	call	#_audio096_spin2_play
1b6b0     0B 00 00 FF 
1b6b4     CC E4 85 F1 | 	sub	objptr, ##5836
1b6b8     2C 13 06 F6 | 	mov	arg01, #300
1b6bc     A8 37 B0 FD | 	call	#__system___waitms
1b6c0     07 12 06 F6 | 	mov	arg01, #7
1b6c4     0B 00 00 FF 
1b6c8     CC E4 05 F1 | 	add	objptr, ##5836
1b6cc     A4 31 B0 FD | 	call	#_audio096_spin2_stop
1b6d0     0B 00 00 FF 
1b6d4     CC E4 85 F1 | 	sub	objptr, ##5836
1b6d8                 | LR__2139
1b6d8                 | '  
1b6d8                 | '   if key4=key_enter then 
1b6d8     79 00 00 FF 
1b6dc     CC E5 05 F1 | 	add	objptr, ##62412
1b6e0     F2 20 02 FB | 	rdlong	local02, objptr
1b6e4     79 00 00 FF 
1b6e8     CC E5 85 F1 | 	sub	objptr, ##62412
1b6ec     8D 20 0E F2 | 	cmp	local02, #141 wz
1b6f0     F0 00 90 5D |  if_ne	jmp	#LR__2142
1b6f4     77 01 00 FF 
1b6f8     8E 20 06 F6 | 	mov	local02, ##@LR__5256
1b6fc     57 00 00 FF 
1b700     1C E4 05 F1 | 	add	objptr, ##44572
1b704     F2 20 62 FC | 	wrlong	local02, objptr
1b708                 | ' 
1b708                 | ' ''      interpret: line$="" :let t1=getct()-t1 :rpt=0: rptcnt=0
1b708                 | '     line$="" : for i=editor_spaces to 127
1b708     18 E4 05 F1 | 	add	objptr, #24
1b70c     F2 2C 02 FB | 	rdlong	local08, objptr
1b710     57 00 00 FF 
1b714     34 E4 85 F1 | 	sub	objptr, ##44596
1b718                 | LR__2140
1b718     80 2C 56 F2 | 	cmps	local08, #128 wc
1b71c     8C 00 90 3D |  if_ae	jmp	#LR__2141
1b720     3E E4 05 F1 | 	add	objptr, #62
1b724     F2 1E C2 FA | 	rdbyte	local01, objptr
1b728     0F 27 E2 F8 | 	getbyte	local05, local01, #0
1b72c     13 2F 02 F6 | 	mov	local09, local05
1b730     80 2E 06 FA | 	mul	local09, #128
1b734     3A E4 85 F1 | 	sub	objptr, #58
1b738     F2 38 02 FB | 	rdlong	local14, objptr
1b73c     04 E4 85 F1 | 	sub	objptr, #4
1b740     1C 13 02 F6 | 	mov	arg01, local14
1b744     17 13 02 F1 | 	add	arg01, local09
1b748     16 13 02 F1 | 	add	arg01, local08
1b74c     E4 F1 BF FD | 	call	#_pspeek
1b750     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1b754     79 00 00 FF 
1b758     D4 E5 05 F1 | 	add	objptr, ##62420
1b75c     F2 24 62 FC | 	wrlong	local04, objptr
1b760     22 00 00 FF 
1b764     B8 E5 85 F1 | 	sub	objptr, ##17848
1b768     F2 28 02 FB | 	rdlong	local06, objptr
1b76c     57 00 00 FF 
1b770     1C E4 85 F1 | 	sub	objptr, ##44572
1b774     12 13 02 F6 | 	mov	arg01, local04
1b778     04 56 B0 FD | 	call	#__system__Chr_S
1b77c     FD 14 02 F6 | 	mov	arg02, result1
1b780     14 13 02 F6 | 	mov	arg01, local06
1b784     48 34 B0 FD | 	call	#__system___string_concat
1b788     57 00 00 FF 
1b78c     1C E4 05 F1 | 	add	objptr, ##44572
1b790     F2 FA 61 FC | 	wrlong	result1, objptr
1b794     57 00 00 FF 
1b798     1C E4 85 F1 | 	sub	objptr, ##44572
1b79c     16 23 02 F6 | 	mov	local03, local08
1b7a0     01 22 06 F1 | 	add	local03, #1
1b7a4     11 2D 02 F6 | 	mov	local08, local03
1b7a8     6C FF 9F FD | 	jmp	#LR__2140
1b7ac                 | LR__2141
1b7ac     C4 23 B0 FD | 	call	#_hg010b_spin2_crlf
1b7b0     68 52 BE FD | 	call	#_interpret
1b7b4     77 01 00 FF 
1b7b8     8F 20 06 F6 | 	mov	local02, ##@LR__5257
1b7bc     57 00 00 FF 
1b7c0     1C E4 05 F1 | 	add	objptr, ##44572
1b7c4     F2 20 62 FC | 	wrlong	local02, objptr
1b7c8     22 00 00 FF 
1b7cc     A4 E5 05 F1 | 	add	objptr, ##17828
1b7d0     F2 00 68 FC | 	wrlong	#0, objptr
1b7d4     08 E4 05 F1 | 	add	objptr, #8
1b7d8     F2 00 68 FC | 	wrlong	#0, objptr
1b7dc     79 00 00 FF 
1b7e0     C8 E5 85 F1 | 	sub	objptr, ##62408
1b7e4                 | LR__2142
1b7e4     79 00 00 FF 
1b7e8     C4 E5 05 F1 | 	add	objptr, ##62404
1b7ec     F2 20 02 FB | 	rdlong	local02, objptr
1b7f0     10 21 E2 F8 | 	getbyte	local02, local02, #0
1b7f4     08 E4 05 F1 | 	add	objptr, #8
1b7f8     F2 20 62 FC | 	wrlong	local02, objptr
1b7fc                 | '   'tab
1b7fc                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
1b7fc     79 00 00 FF 
1b800     CC E5 85 F1 | 	sub	objptr, ##62412
1b804     2B 20 0E F2 | 	cmp	local02, #43 wz
1b808     B4 00 90 5D |  if_ne	jmp	#LR__2143
1b80c     3C E4 05 F1 | 	add	objptr, #60
1b810     F2 24 E2 FA | 	rdword	local04, objptr
1b814     3C E4 85 F1 | 	sub	objptr, #60
1b818     12 23 32 F9 | 	getword	local03, local04, #0
1b81c     F0 22 16 F2 | 	cmp	local03, #240 wc
1b820     9C 00 90 CD |  if_b	jmp	#LR__2143
1b824     78 00 00 FF 
1b828     F0 E4 05 F1 | 	add	objptr, ##61680
1b82c     F2 1E 02 FB | 	rdlong	local01, objptr
1b830     78 00 00 FF 
1b834     F0 E4 85 F1 | 	sub	objptr, ##61680
1b838     0F 27 02 F6 | 	mov	local05, local01
1b83c     01 26 0E F2 | 	cmp	local05, #1 wz
1b840     7C 00 90 5D |  if_ne	jmp	#LR__2143
1b844     04 00 00 FF 
1b848     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
1b84c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1b850     04 00 00 FF 
1b854     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1b858     56 00 00 FF 
1b85c     44 22 06 F6 | 	mov	local03, ##44100
1b860     0E 24 C6 F9 | 	decod	local04, #14
1b864     00 26 06 F6 | 	mov	local05, #0
1b868     03 00 00 FF 
1b86c     DE 1E 06 F6 | 	mov	local01, ##1758
1b870     00 12 06 F6 | 	mov	arg01, #0
1b874     56 00 00 FF 
1b878     44 16 06 F6 | 	mov	arg03, ##44100
1b87c     0E 18 C6 F9 | 	decod	arg04, #14
1b880     00 1A 06 F6 | 	mov	arg05, #0
1b884     03 00 00 FF 
1b888     DE 1C 06 F6 | 	mov	arg06, ##1758
1b88c     0B 00 00 FF 
1b890     CC E4 05 F1 | 	add	objptr, ##5836
1b894     6C 2E B0 FD | 	call	#_audio096_spin2_play
1b898     0B 00 00 FF 
1b89c     CC E4 85 F1 | 	sub	objptr, ##5836
1b8a0     2C 13 06 F6 | 	mov	arg01, #300
1b8a4     C0 35 B0 FD | 	call	#__system___waitms
1b8a8     00 12 06 F6 | 	mov	arg01, #0
1b8ac     0B 00 00 FF 
1b8b0     CC E4 05 F1 | 	add	objptr, ##5836
1b8b4     BC 2F B0 FD | 	call	#_audio096_spin2_stop
1b8b8     0B 00 00 FF 
1b8bc     CC E4 85 F1 | 	sub	objptr, ##5836
1b8c0                 | LR__2143
1b8c0                 | '   if key4 = 43 andalso v.cursor_x<240 then v.setcursorx((v.cursor_x+8) and $F8)  
1b8c0     79 00 00 FF 
1b8c4     CC E5 05 F1 | 	add	objptr, ##62412
1b8c8     F2 20 02 FB | 	rdlong	local02, objptr
1b8cc     79 00 00 FF 
1b8d0     CC E5 85 F1 | 	sub	objptr, ##62412
1b8d4     2B 20 0E F2 | 	cmp	local02, #43 wz
1b8d8     34 00 90 5D |  if_ne	jmp	#LR__2144
1b8dc     3C E4 05 F1 | 	add	objptr, #60
1b8e0     F2 24 E2 FA | 	rdword	local04, objptr
1b8e4     3C E4 85 F1 | 	sub	objptr, #60
1b8e8     12 23 32 F9 | 	getword	local03, local04, #0
1b8ec     F0 22 16 F2 | 	cmp	local03, #240 wc
1b8f0     1C 00 90 3D |  if_ae	jmp	#LR__2144
1b8f4     3C E4 05 F1 | 	add	objptr, #60
1b8f8     F2 22 E2 FA | 	rdword	local03, objptr
1b8fc     3C E4 85 F1 | 	sub	objptr, #60
1b900     11 13 32 F9 | 	getword	arg01, local03, #0
1b904     08 12 06 F1 | 	add	arg01, #8
1b908     F8 12 06 F5 | 	and	arg01, #248
1b90c     04 1B B0 FD | 	call	#_hg010b_spin2_setcursorx
1b910                 | LR__2144
1b910                 | '  ' tab43 del 76 home74 end 77 pgup=75 pgdn 78
1b910                 | '   if key4=77 then i=127 : do: 
1b910     79 00 00 FF 
1b914     CC E5 05 F1 | 	add	objptr, ##62412
1b918     F2 20 02 FB | 	rdlong	local02, objptr
1b91c     79 00 00 FF 
1b920     CC E5 85 F1 | 	sub	objptr, ##62412
1b924     4D 20 0E F2 | 	cmp	local02, #77 wz
1b928     90 00 90 5D |  if_ne	jmp	#LR__2149
1b92c     7F 2C 06 F6 | 	mov	local08, #127
1b930                 | LR__2145
1b930                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
1b930     3E E4 05 F1 | 	add	objptr, #62
1b934     F2 26 C2 FA | 	rdbyte	local05, objptr
1b938     13 25 E2 F8 | 	getbyte	local04, local05, #0
1b93c     12 1F 02 F6 | 	mov	local01, local04
1b940     80 1E 06 FA | 	mul	local01, #128
1b944     3A E4 85 F1 | 	sub	objptr, #58
1b948     F2 2E 02 FB | 	rdlong	local09, objptr
1b94c     04 E4 85 F1 | 	sub	objptr, #4
1b950     17 23 02 F6 | 	mov	local03, local09
1b954     0F 23 02 F1 | 	add	local03, local01
1b958     16 23 02 F1 | 	add	local03, local08
1b95c     11 13 02 F6 | 	mov	arg01, local03
1b960     D0 EF BF FD | 	call	#_pspeek
1b964     FD 20 E2 F8 | 	getbyte	local02, result1, #0
1b968     20 20 0E F2 | 	cmp	local02, #32 wz
1b96c     2C 00 90 AD |  if_e	jmp	#LR__2147
1b970                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
1b970     7F 2C 56 F2 | 	cmps	local08, #127 wc
1b974     18 00 90 3D |  if_ae	jmp	#LR__2146
1b978     16 23 02 F6 | 	mov	local03, local08
1b97c     01 22 66 F0 | 	shl	local03, #1
1b980     11 13 02 F6 | 	mov	arg01, local03
1b984     02 12 06 F1 | 	add	arg01, #2
1b988     88 1A B0 FD | 	call	#_hg010b_spin2_setcursorx
1b98c     2C 00 90 FD | 	jmp	#LR__2148
1b990                 | LR__2146
1b990     FE 12 06 F6 | 	mov	arg01, #254
1b994     7C 1A B0 FD | 	call	#_hg010b_spin2_setcursorx
1b998     20 00 90 FD | 	jmp	#LR__2148
1b99c                 | LR__2147
1b99c     01 2C 86 F1 | 	sub	local08, #1
1b9a0     57 00 00 FF 
1b9a4     34 E4 05 F1 | 	add	objptr, ##44596
1b9a8     F2 20 02 FB | 	rdlong	local02, objptr
1b9ac     57 00 00 FF 
1b9b0     34 E4 85 F1 | 	sub	objptr, ##44596
1b9b4     10 2D 0A F2 | 	cmp	local08, local02 wz
1b9b8     74 FF 9F 5D |  if_ne	jmp	#LR__2145
1b9bc                 | LR__2148
1b9bc                 | LR__2149
1b9bc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
1b9bc     57 00 00 FF 
1b9c0     34 E4 05 F1 | 	add	objptr, ##44596
1b9c4     F2 20 02 FB | 	rdlong	local02, objptr
1b9c8     57 00 00 FF 
1b9cc     34 E4 85 F1 | 	sub	objptr, ##44596
1b9d0     10 2D 0A F2 | 	cmp	local08, local02 wz
1b9d4     24 00 90 5D |  if_ne	jmp	#LR__2150
1b9d8     57 00 00 FF 
1b9dc     34 E4 05 F1 | 	add	objptr, ##44596
1b9e0     F2 24 02 FB | 	rdlong	local04, objptr
1b9e4     57 00 00 FF 
1b9e8     34 E4 85 F1 | 	sub	objptr, ##44596
1b9ec     12 23 02 F6 | 	mov	local03, local04
1b9f0     11 13 02 F6 | 	mov	arg01, local03
1b9f4     01 12 66 F0 | 	shl	arg01, #1
1b9f8     18 1A B0 FD | 	call	#_hg010b_spin2_setcursorx
1b9fc                 | LR__2150
1b9fc                 | '   
1b9fc                 | '   
1b9fc                 | '   if key4=74 then v.setcursorx(editor_spaces*2)
1b9fc     79 00 00 FF 
1ba00     CC E5 05 F1 | 	add	objptr, ##62412
1ba04     F2 20 02 FB | 	rdlong	local02, objptr
1ba08     79 00 00 FF 
1ba0c     CC E5 85 F1 | 	sub	objptr, ##62412
1ba10     4A 20 0E F2 | 	cmp	local02, #74 wz
1ba14     24 00 90 5D |  if_ne	jmp	#LR__2151
1ba18     57 00 00 FF 
1ba1c     34 E4 05 F1 | 	add	objptr, ##44596
1ba20     F2 24 02 FB | 	rdlong	local04, objptr
1ba24     57 00 00 FF 
1ba28     34 E4 85 F1 | 	sub	objptr, ##44596
1ba2c     12 23 02 F6 | 	mov	local03, local04
1ba30     11 13 02 F6 | 	mov	arg01, local03
1ba34     01 12 66 F0 | 	shl	arg01, #1
1ba38     D8 19 B0 FD | 	call	#_hg010b_spin2_setcursorx
1ba3c                 | LR__2151
1ba3c                 | '   if key4=75 then v.setcursory(0)
1ba3c     79 00 00 FF 
1ba40     CC E5 05 F1 | 	add	objptr, ##62412
1ba44     F2 20 02 FB | 	rdlong	local02, objptr
1ba48     79 00 00 FF 
1ba4c     CC E5 85 F1 | 	sub	objptr, ##62412
1ba50     4B 20 0E F2 | 	cmp	local02, #75 wz
1ba54     00 12 06 A6 |  if_e	mov	arg01, #0
1ba58     E8 19 B0 AD |  if_e	call	#_hg010b_spin2_setcursory
1ba5c                 | '   if key4=78 then v.setcursory(36) ' todo: parameter instead 36
1ba5c     79 00 00 FF 
1ba60     CC E5 05 F1 | 	add	objptr, ##62412
1ba64     F2 20 02 FB | 	rdlong	local02, objptr
1ba68     79 00 00 FF 
1ba6c     CC E5 85 F1 | 	sub	objptr, ##62412
1ba70     4E 20 0E F2 | 	cmp	local02, #78 wz
1ba74     24 12 06 A6 |  if_e	mov	arg01, #36
1ba78     C8 19 B0 AD |  if_e	call	#_hg010b_spin2_setcursory
1ba7c                 | '   
1ba7c                 | '   if key4=76 then 'del
1ba7c     79 00 00 FF 
1ba80     CC E5 05 F1 | 	add	objptr, ##62412
1ba84     F2 20 02 FB | 	rdlong	local02, objptr
1ba88     79 00 00 FF 
1ba8c     CC E5 85 F1 | 	sub	objptr, ##62412
1ba90     4C 20 0E F2 | 	cmp	local02, #76 wz
1ba94     9C 01 90 5D |  if_ne	jmp	#LR__2156
1ba98                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
1ba98     3E E4 05 F1 | 	add	objptr, #62
1ba9c     F2 22 C2 FA | 	rdbyte	local03, objptr
1baa0     11 25 E2 F8 | 	getbyte	local04, local03, #0
1baa4     80 24 06 FA | 	mul	local04, #128
1baa8     3A E4 85 F1 | 	sub	objptr, #58
1baac     F2 3C 02 FB | 	rdlong	local16, objptr
1bab0     1E 2D 02 F6 | 	mov	local08, local16
1bab4     12 2D 02 F1 | 	add	local08, local04
1bab8     38 E4 05 F1 | 	add	objptr, #56
1babc     F2 1E E2 FA | 	rdword	local01, objptr
1bac0     0F 39 52 F6 | 	abs	local14, local01 wc
1bac4     01 38 46 F0 | 	shr	local14, #1
1bac8     1C 2D 82 F3 | 	sumc	local08, local14
1bacc     11 23 E2 F8 | 	getbyte	local03, local03, #0
1bad0     80 22 06 FA | 	mul	local03, #128
1bad4     3C E4 85 F1 | 	sub	objptr, #60
1bad8     11 3D 02 F1 | 	add	local16, local03
1badc     80 3C 06 F1 | 	add	local16, #128
1bae0                 | LR__2152
1bae0     1E 2D 52 F2 | 	cmps	local08, local16 wc
1bae4     20 00 90 3D |  if_ae	jmp	#LR__2153
1bae8     16 13 02 F6 | 	mov	arg01, local08
1baec     01 12 06 F1 | 	add	arg01, #1
1baf0     40 EE BF FD | 	call	#_pspeek
1baf4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
1baf8     16 13 02 F6 | 	mov	arg01, local08
1bafc     EC ED BF FD | 	call	#_pspoke
1bb00     01 2C 06 F1 | 	add	local08, #1
1bb04     D8 FF 9F FD | 	jmp	#LR__2152
1bb08                 | LR__2153
1bb08     3E E4 05 F1 | 	add	objptr, #62
1bb0c     F2 26 C2 FA | 	rdbyte	local05, objptr
1bb10     80 26 06 FA | 	mul	local05, #128
1bb14     3A E4 85 F1 | 	sub	objptr, #58
1bb18     F2 12 02 FB | 	rdlong	arg01, objptr
1bb1c     04 E4 85 F1 | 	sub	objptr, #4
1bb20     13 13 02 F1 | 	add	arg01, local05
1bb24     7F 12 06 F1 | 	add	arg01, #127
1bb28     20 14 06 F6 | 	mov	arg02, #32
1bb2c     BC ED BF FD | 	call	#_pspoke
1bb30     79 00 00 FF 
1bb34     D0 E5 05 F1 | 	add	objptr, ##62416
1bb38     F2 00 68 FC | 	wrlong	#0, objptr
1bb3c     79 00 00 FF 
1bb40     92 E5 85 F1 | 	sub	objptr, ##62354
1bb44     F2 22 C2 FA | 	rdbyte	local03, objptr
1bb48     11 25 E2 F8 | 	getbyte	local04, local03, #0
1bb4c     80 24 06 FA | 	mul	local04, #128
1bb50     3A E4 85 F1 | 	sub	objptr, #58
1bb54     F2 26 02 FB | 	rdlong	local05, objptr
1bb58     13 2D 02 F6 | 	mov	local08, local05
1bb5c     12 2D 02 F1 | 	add	local08, local04
1bb60     38 E4 05 F1 | 	add	objptr, #56
1bb64     F2 2E E2 FA | 	rdword	local09, objptr
1bb68     17 1F 32 F9 | 	getword	local01, local09, #0
1bb6c     0F 39 52 F6 | 	abs	local14, local01 wc
1bb70     01 38 46 F0 | 	shr	local14, #1
1bb74     1C 39 82 F6 | 	negc	local14, local14
1bb78     1C 2D 02 F1 | 	add	local08, local14
1bb7c     11 23 E2 F8 | 	getbyte	local03, local03, #0
1bb80     80 22 06 FA | 	mul	local03, #128
1bb84     13 25 02 F6 | 	mov	local04, local05
1bb88     3C E4 85 F1 | 	sub	objptr, #60
1bb8c     12 3F 02 F6 | 	mov	local17, local04
1bb90     11 3F 02 F1 | 	add	local17, local03
1bb94     80 3E 06 F1 | 	add	local17, #128
1bb98                 | LR__2154
1bb98     1F 2D 52 F2 | 	cmps	local08, local17 wc
1bb9c     94 00 90 3D |  if_ae	jmp	#LR__2155
1bba0     3C E4 05 F1 | 	add	objptr, #60
1bba4     F2 20 E2 FA | 	rdword	local02, objptr
1bba8     79 00 00 FF 
1bbac     94 E5 05 F1 | 	add	objptr, ##62356
1bbb0     F2 24 02 FB | 	rdlong	local04, objptr
1bbb4     01 24 66 F0 | 	shl	local04, #1
1bbb8     12 21 02 F1 | 	add	local02, local04
1bbbc     79 00 00 FF 
1bbc0     92 E5 85 F1 | 	sub	objptr, ##62354
1bbc4     F2 28 C2 FA | 	rdbyte	local06, objptr
1bbc8     3E E4 85 F1 | 	sub	objptr, #62
1bbcc     10 28 06 FA | 	mul	local06, #16
1bbd0     04 28 06 F1 | 	add	local06, #4
1bbd4     16 13 02 F6 | 	mov	arg01, local08
1bbd8     58 ED BF FD | 	call	#_pspeek
1bbdc     FD 22 E2 F8 | 	getbyte	local03, result1, #0
1bbe0     41 E4 05 F1 | 	add	objptr, #65
1bbe4     F2 24 02 FB | 	rdlong	local04, objptr
1bbe8     04 E4 05 F1 | 	add	objptr, #4
1bbec     F2 1E 02 FB | 	rdlong	local01, objptr
1bbf0     45 E4 85 F1 | 	sub	objptr, #69
1bbf4     0F 27 02 F6 | 	mov	local05, local01
1bbf8     10 13 02 F6 | 	mov	arg01, local02
1bbfc     14 15 02 F6 | 	mov	arg02, local06
1bc00     11 17 02 F6 | 	mov	arg03, local03
1bc04     12 19 02 F6 | 	mov	arg04, local04
1bc08     13 1B 02 F6 | 	mov	arg05, local05
1bc0c     64 16 B0 FD | 	call	#_hg010b_spin2_putcharxycgf
1bc10     79 00 00 FF 
1bc14     D0 E5 05 F1 | 	add	objptr, ##62416
1bc18     F2 20 02 FB | 	rdlong	local02, objptr
1bc1c     01 20 06 F1 | 	add	local02, #1
1bc20     F2 20 62 FC | 	wrlong	local02, objptr
1bc24     79 00 00 FF 
1bc28     D0 E5 85 F1 | 	sub	objptr, ##62416
1bc2c     01 2C 06 F1 | 	add	local08, #1
1bc30     64 FF 9F FD | 	jmp	#LR__2154
1bc34                 | LR__2155
1bc34                 | LR__2156
1bc34                 | '    
1bc34                 | '   'backspace
1bc34                 | '   if key4 = 42 then 
1bc34     79 00 00 FF 
1bc38     CC E5 05 F1 | 	add	objptr, ##62412
1bc3c     F2 20 02 FB | 	rdlong	local02, objptr
1bc40     79 00 00 FF 
1bc44     CC E5 85 F1 | 	sub	objptr, ##62412
1bc48     2A 20 0E F2 | 	cmp	local02, #42 wz
1bc4c     0C 02 90 5D |  if_ne	jmp	#LR__2162
1bc50                 | '       if v.cursor_x>editor_spaces*2 then 
1bc50     3C E4 05 F1 | 	add	objptr, #60
1bc54     F2 20 E2 FA | 	rdword	local02, objptr
1bc58     56 00 00 FF 
1bc5c     F8 E5 05 F1 | 	add	objptr, ##44536
1bc60     F2 26 02 FB | 	rdlong	local05, objptr
1bc64     57 00 00 FF 
1bc68     34 E4 85 F1 | 	sub	objptr, ##44596
1bc6c     13 25 02 F6 | 	mov	local04, local05
1bc70     12 23 02 F6 | 	mov	local03, local04
1bc74     01 22 66 F0 | 	shl	local03, #1
1bc78     11 21 5A F2 | 	cmps	local02, local03 wcz
1bc7c     B8 01 90 ED |  if_be	jmp	#LR__2160
1bc80     3C E4 05 F1 | 	add	objptr, #60
1bc84     F2 12 E2 FA | 	rdword	arg01, objptr
1bc88     02 12 86 F1 | 	sub	arg01, #2
1bc8c     02 E4 05 F1 | 	add	objptr, #2
1bc90     F2 14 C2 FA | 	rdbyte	arg02, objptr
1bc94     3E E4 85 F1 | 	sub	objptr, #62
1bc98     3C 17 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1bc9c                 | '          position v.cursor_x-2,v.cursor_y
1bc9c                 | '          for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
1bc9c     3E E4 05 F1 | 	add	objptr, #62
1bca0     F2 22 C2 FA | 	rdbyte	local03, objptr
1bca4     11 25 E2 F8 | 	getbyte	local04, local03, #0
1bca8     80 24 06 FA | 	mul	local04, #128
1bcac     3A E4 85 F1 | 	sub	objptr, #58
1bcb0     F2 40 02 FB | 	rdlong	local18, objptr
1bcb4     20 2D 02 F6 | 	mov	local08, local18
1bcb8     12 2D 02 F1 | 	add	local08, local04
1bcbc     38 E4 05 F1 | 	add	objptr, #56
1bcc0     F2 1E E2 FA | 	rdword	local01, objptr
1bcc4     0F 39 52 F6 | 	abs	local14, local01 wc
1bcc8     01 38 46 F0 | 	shr	local14, #1
1bccc     1C 2D 82 F3 | 	sumc	local08, local14
1bcd0     11 23 E2 F8 | 	getbyte	local03, local03, #0
1bcd4     80 22 06 FA | 	mul	local03, #128
1bcd8     3C E4 85 F1 | 	sub	objptr, #60
1bcdc     11 41 02 F1 | 	add	local18, local03
1bce0     80 40 06 F1 | 	add	local18, #128
1bce4                 | LR__2157
1bce4     20 2D 52 F2 | 	cmps	local08, local18 wc
1bce8     20 00 90 3D |  if_ae	jmp	#LR__2158
1bcec     16 13 02 F6 | 	mov	arg01, local08
1bcf0     01 12 06 F1 | 	add	arg01, #1
1bcf4     3C EC BF FD | 	call	#_pspeek
1bcf8     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
1bcfc     16 13 02 F6 | 	mov	arg01, local08
1bd00     E8 EB BF FD | 	call	#_pspoke
1bd04     01 2C 06 F1 | 	add	local08, #1
1bd08     D8 FF 9F FD | 	jmp	#LR__2157
1bd0c                 | LR__2158
1bd0c     3E E4 05 F1 | 	add	objptr, #62
1bd10     F2 26 C2 FA | 	rdbyte	local05, objptr
1bd14     80 26 06 FA | 	mul	local05, #128
1bd18     3A E4 85 F1 | 	sub	objptr, #58
1bd1c     F2 12 02 FB | 	rdlong	arg01, objptr
1bd20     04 E4 85 F1 | 	sub	objptr, #4
1bd24     13 13 02 F1 | 	add	arg01, local05
1bd28     7F 12 06 F1 | 	add	arg01, #127
1bd2c     20 14 06 F6 | 	mov	arg02, #32
1bd30     B8 EB BF FD | 	call	#_pspoke
1bd34     79 00 00 FF 
1bd38     D0 E5 05 F1 | 	add	objptr, ##62416
1bd3c     F2 00 68 FC | 	wrlong	#0, objptr
1bd40     79 00 00 FF 
1bd44     92 E5 85 F1 | 	sub	objptr, ##62354
1bd48     F2 22 C2 FA | 	rdbyte	local03, objptr
1bd4c     11 25 E2 F8 | 	getbyte	local04, local03, #0
1bd50     80 24 06 FA | 	mul	local04, #128
1bd54     3A E4 85 F1 | 	sub	objptr, #58
1bd58     F2 26 02 FB | 	rdlong	local05, objptr
1bd5c     13 2D 02 F6 | 	mov	local08, local05
1bd60     12 2D 02 F1 | 	add	local08, local04
1bd64     38 E4 05 F1 | 	add	objptr, #56
1bd68     F2 2E E2 FA | 	rdword	local09, objptr
1bd6c     17 1F 32 F9 | 	getword	local01, local09, #0
1bd70     0F 39 52 F6 | 	abs	local14, local01 wc
1bd74     01 38 46 F0 | 	shr	local14, #1
1bd78     1C 39 82 F6 | 	negc	local14, local14
1bd7c     1C 2D 02 F1 | 	add	local08, local14
1bd80     11 23 E2 F8 | 	getbyte	local03, local03, #0
1bd84     80 22 06 FA | 	mul	local03, #128
1bd88     13 25 02 F6 | 	mov	local04, local05
1bd8c     3C E4 85 F1 | 	sub	objptr, #60
1bd90     12 43 02 F6 | 	mov	local19, local04
1bd94     11 43 02 F1 | 	add	local19, local03
1bd98     80 42 06 F1 | 	add	local19, #128
1bd9c                 | LR__2159
1bd9c     21 2D 52 F2 | 	cmps	local08, local19 wc
1bda0     B8 00 90 3D |  if_ae	jmp	#LR__2161
1bda4     3C E4 05 F1 | 	add	objptr, #60
1bda8     F2 20 E2 FA | 	rdword	local02, objptr
1bdac     79 00 00 FF 
1bdb0     94 E5 05 F1 | 	add	objptr, ##62356
1bdb4     F2 24 02 FB | 	rdlong	local04, objptr
1bdb8     01 24 66 F0 | 	shl	local04, #1
1bdbc     12 21 02 F1 | 	add	local02, local04
1bdc0     79 00 00 FF 
1bdc4     92 E5 85 F1 | 	sub	objptr, ##62354
1bdc8     F2 28 C2 FA | 	rdbyte	local06, objptr
1bdcc     3E E4 85 F1 | 	sub	objptr, #62
1bdd0     10 28 06 FA | 	mul	local06, #16
1bdd4     04 28 06 F1 | 	add	local06, #4
1bdd8     16 13 02 F6 | 	mov	arg01, local08
1bddc     54 EB BF FD | 	call	#_pspeek
1bde0     FD 22 E2 F8 | 	getbyte	local03, result1, #0
1bde4     41 E4 05 F1 | 	add	objptr, #65
1bde8     F2 24 02 FB | 	rdlong	local04, objptr
1bdec     04 E4 05 F1 | 	add	objptr, #4
1bdf0     F2 1E 02 FB | 	rdlong	local01, objptr
1bdf4     45 E4 85 F1 | 	sub	objptr, #69
1bdf8     0F 27 02 F6 | 	mov	local05, local01
1bdfc     10 13 02 F6 | 	mov	arg01, local02
1be00     14 15 02 F6 | 	mov	arg02, local06
1be04     11 17 02 F6 | 	mov	arg03, local03
1be08     12 19 02 F6 | 	mov	arg04, local04
1be0c     13 1B 02 F6 | 	mov	arg05, local05
1be10     60 14 B0 FD | 	call	#_hg010b_spin2_putcharxycgf
1be14     79 00 00 FF 
1be18     D0 E5 05 F1 | 	add	objptr, ##62416
1be1c     F2 20 02 FB | 	rdlong	local02, objptr
1be20     01 20 06 F1 | 	add	local02, #1
1be24     F2 20 62 FC | 	wrlong	local02, objptr
1be28     79 00 00 FF 
1be2c     D0 E5 85 F1 | 	sub	objptr, ##62416
1be30     01 2C 06 F1 | 	add	local08, #1
1be34     64 FF 9F FD | 	jmp	#LR__2159
1be38                 | LR__2160
1be38     77 01 00 FF 
1be3c     90 20 06 F6 | 	mov	local02, ##@LR__5258
1be40     57 00 00 FF 
1be44     1C E4 05 F1 | 	add	objptr, ##44572
1be48     F2 20 62 FC | 	wrlong	local02, objptr
1be4c     56 00 00 FF 
1be50     E0 E5 85 F1 | 	sub	objptr, ##44512
1be54     F2 08 58 FC | 	wrword	#4, objptr
1be58     3C E4 85 F1 | 	sub	objptr, #60
1be5c                 | LR__2161
1be5c                 | LR__2162
1be5c                 | '      if key4= 82 then 
1be5c     79 00 00 FF 
1be60     CC E5 05 F1 | 	add	objptr, ##62412
1be64     F2 20 02 FB | 	rdlong	local02, objptr
1be68     79 00 00 FF 
1be6c     CC E5 85 F1 | 	sub	objptr, ##62412
1be70     52 20 0E F2 | 	cmp	local02, #82 wz
1be74     50 00 90 5D |  if_ne	jmp	#LR__2163
1be78                 | ' return cursor_y
1be78     3E E4 05 F1 | 	add	objptr, #62
1be7c     F2 20 C2 FA | 	rdbyte	local02, objptr
1be80     01 20 86 F1 | 	sub	local02, #1
1be84     79 00 00 FF 
1be88     9A E5 05 F1 | 	add	objptr, ##62362
1be8c     F2 20 62 FC | 	wrlong	local02, objptr
1be90     79 00 00 FF 
1be94     D8 E5 85 F1 | 	sub	objptr, ##62424
1be98     00 20 56 F2 | 	cmps	local02, #0 wc
1be9c     79 00 00 CF 
1bea0     D8 E5 05 C1 |  if_b	add	objptr, ##62424
1bea4     F2 00 68 CC |  if_b	wrlong	#0, objptr
1bea8     79 00 00 CF 
1beac     D8 E5 85 C1 |  if_b	sub	objptr, ##62424
1beb0     79 00 00 FF 
1beb4     D8 E5 05 F1 | 	add	objptr, ##62424
1beb8     F2 12 02 FB | 	rdlong	arg01, objptr
1bebc     79 00 00 FF 
1bec0     D8 E5 85 F1 | 	sub	objptr, ##62424
1bec4     7C 15 B0 FD | 	call	#_hg010b_spin2_setcursory
1bec8                 | LR__2163
1bec8                 | '    if key4= 81 then
1bec8     79 00 00 FF 
1becc     CC E5 05 F1 | 	add	objptr, ##62412
1bed0     F2 20 02 FB | 	rdlong	local02, objptr
1bed4     79 00 00 FF 
1bed8     CC E5 85 F1 | 	sub	objptr, ##62412
1bedc     51 20 0E F2 | 	cmp	local02, #81 wz
1bee0     50 00 90 5D |  if_ne	jmp	#LR__2164
1bee4                 | ' return cursor_y
1bee4     3E E4 05 F1 | 	add	objptr, #62
1bee8     F2 20 C2 FA | 	rdbyte	local02, objptr
1beec     01 20 06 F1 | 	add	local02, #1
1bef0     79 00 00 FF 
1bef4     9A E5 05 F1 | 	add	objptr, ##62362
1bef8     F2 20 62 FC | 	wrlong	local02, objptr
1befc     79 00 00 FF 
1bf00     D8 E5 85 F1 | 	sub	objptr, ##62424
1bf04     25 20 56 F2 | 	cmps	local02, #37 wc
1bf08     79 00 00 3F 
1bf0c     D8 E5 05 31 |  if_ae	add	objptr, ##62424
1bf10     F2 48 68 3C |  if_ae	wrlong	#36, objptr
1bf14     79 00 00 3F 
1bf18     D8 E5 85 31 |  if_ae	sub	objptr, ##62424
1bf1c     79 00 00 FF 
1bf20     D8 E5 05 F1 | 	add	objptr, ##62424
1bf24     F2 12 02 FB | 	rdlong	arg01, objptr
1bf28     79 00 00 FF 
1bf2c     D8 E5 85 F1 | 	sub	objptr, ##62424
1bf30     10 15 B0 FD | 	call	#_hg010b_spin2_setcursory
1bf34                 | LR__2164
1bf34                 | '    if key4= 80 then
1bf34     79 00 00 FF 
1bf38     CC E5 05 F1 | 	add	objptr, ##62412
1bf3c     F2 20 02 FB | 	rdlong	local02, objptr
1bf40     79 00 00 FF 
1bf44     CC E5 85 F1 | 	sub	objptr, ##62412
1bf48     50 20 0E F2 | 	cmp	local02, #80 wz
1bf4c     6C 00 90 5D |  if_ne	jmp	#LR__2165
1bf50                 | ' return cursor_x
1bf50     3C E4 05 F1 | 	add	objptr, #60
1bf54     F2 20 E2 FA | 	rdword	local02, objptr
1bf58     02 20 86 F1 | 	sub	local02, #2
1bf5c     79 00 00 FF 
1bf60     A0 E5 05 F1 | 	add	objptr, ##62368
1bf64     F2 20 62 FC | 	wrlong	local02, objptr
1bf68                 | '      if cx<editor_spaces then cx=editor_spaces
1bf68     22 00 00 FF 
1bf6c     A8 E5 85 F1 | 	sub	objptr, ##17832
1bf70     F2 24 02 FB | 	rdlong	local04, objptr
1bf74     57 00 00 FF 
1bf78     34 E4 85 F1 | 	sub	objptr, ##44596
1bf7c     12 23 02 F6 | 	mov	local03, local04
1bf80     11 21 52 F2 | 	cmps	local02, local03 wc
1bf84     57 00 00 CF 
1bf88     34 E4 05 C1 |  if_b	add	objptr, ##44596
1bf8c     F2 20 02 CB |  if_b	rdlong	local02, objptr
1bf90     22 00 00 CF 
1bf94     A8 E5 05 C1 |  if_b	add	objptr, ##17832
1bf98     F2 20 62 CC |  if_b	wrlong	local02, objptr
1bf9c     79 00 00 CF 
1bfa0     DC E5 85 C1 |  if_b	sub	objptr, ##62428
1bfa4     79 00 00 FF 
1bfa8     DC E5 05 F1 | 	add	objptr, ##62428
1bfac     F2 12 02 FB | 	rdlong	arg01, objptr
1bfb0     79 00 00 FF 
1bfb4     DC E5 85 F1 | 	sub	objptr, ##62428
1bfb8     58 14 B0 FD | 	call	#_hg010b_spin2_setcursorx
1bfbc                 | LR__2165
1bfbc                 | '    if key4= 79 then
1bfbc     79 00 00 FF 
1bfc0     CC E5 05 F1 | 	add	objptr, ##62412
1bfc4     F2 20 02 FB | 	rdlong	local02, objptr
1bfc8     79 00 00 FF 
1bfcc     CC E5 85 F1 | 	sub	objptr, ##62412
1bfd0     4F 20 0E F2 | 	cmp	local02, #79 wz
1bfd4     50 00 90 5D |  if_ne	jmp	#LR__2166
1bfd8                 | ' return cursor_x
1bfd8     3C E4 05 F1 | 	add	objptr, #60
1bfdc     F2 20 E2 FA | 	rdword	local02, objptr
1bfe0     02 20 06 F1 | 	add	local02, #2
1bfe4     79 00 00 FF 
1bfe8     A0 E5 05 F1 | 	add	objptr, ##62368
1bfec     F2 20 62 FC | 	wrlong	local02, objptr
1bff0                 | '      if cx>254  then cx=254 
1bff0     79 00 00 FF 
1bff4     DC E5 85 F1 | 	sub	objptr, ##62428
1bff8     FF 20 56 F2 | 	cmps	local02, #255 wc
1bffc     79 00 00 3F 
1c000     DC E5 05 31 |  if_ae	add	objptr, ##62428
1c004     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
1c008     79 00 00 3F 
1c00c     DC E5 85 31 |  if_ae	sub	objptr, ##62428
1c010     79 00 00 FF 
1c014     DC E5 05 F1 | 	add	objptr, ##62428
1c018     F2 12 02 FB | 	rdlong	arg01, objptr
1c01c     79 00 00 FF 
1c020     DC E5 85 F1 | 	sub	objptr, ##62428
1c024     EC 13 B0 FD | 	call	#_hg010b_spin2_setcursorx
1c028                 | LR__2166
1c028                 | '   ' print key3 and 255
1c028                 | '    
1c028                 | '    if key4=73 then ' ins
1c028     79 00 00 FF 
1c02c     CC E5 05 F1 | 	add	objptr, ##62412
1c030     F2 28 02 FB | 	rdlong	local06, objptr
1c034     79 00 00 FF 
1c038     CC E5 85 F1 | 	sub	objptr, ##62412
1c03c     49 28 0E F2 | 	cmp	local06, #73 wz
1c040     38 00 90 5D |  if_ne	jmp	#LR__2169
1c044     79 00 00 FF 
1c048     B8 E5 05 F1 | 	add	objptr, ##62392
1c04c     F2 20 02 FB | 	rdlong	local02, objptr
1c050     10 29 22 F6 | 	not	local06, local02
1c054     F2 28 62 FC | 	wrlong	local06, objptr
1c058                 | '      if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
1c058     79 00 00 FF 
1c05c     B8 E5 85 F1 | 	sub	objptr, ##62392
1c060     00 28 0E F2 | 	cmp	local06, #0 wz
1c064     0C 00 90 AD |  if_e	jmp	#LR__2167
1c068     0E 12 06 F6 | 	mov	arg01, #14
1c06c     28 02 B0 FD | 	call	#_hg010b_spin2_setcursorshape
1c070     08 00 90 FD | 	jmp	#LR__2168
1c074                 | LR__2167
1c074     00 12 06 F6 | 	mov	arg01, #0
1c078     1C 02 B0 FD | 	call	#_hg010b_spin2_setcursorshape
1c07c                 | LR__2168
1c07c                 | LR__2169
1c07c     79 00 00 FF 
1c080     C4 E5 05 F1 | 	add	objptr, ##62404
1c084     F2 00 68 FC | 	wrlong	#0, objptr
1c088     79 00 00 FF 
1c08c     C4 E5 85 F1 | 	sub	objptr, ##62404
1c090     88 EE 9F FD | 	jmp	#LR__2120
1c094     A7 F0 03 F6 | 	mov	ptra, fp
1c098     B2 00 A0 FD | 	call	#popregs_
1c09c                 | _program_ret
1c09c     2D 00 64 FD | 	ret
1c0a0                 | 
1c0a0                 | ' '' this is not a main program.
1c0a0                 | ' 
1c0a0                 | ' '****************************************************************************************************************
1c0a0                 | ' '                                                                                                             	*
1c0a0                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
1c0a0                 | ' '                                                                                                            	*
1c0a0                 | ' ' base - HDMI base pin												*
1c0a0                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1c0a0                 | ' '														*
1c0a0                 | ' '														*
1c0a0                 | ' '****************************************************************************************************************
1c0a0                 | ' 
1c0a0                 | ' pub start(base,mb):result |i
1c0a0                 | _hg010b_spin2_start
1c0a0                 | ' 
1c0a0                 | ' '--------------------------- initialize pointers and variables
1c0a0                 | ' 
1c0a0                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1c0a0     34 E4 05 F1 | 	add	objptr, #52
1c0a4     F2 FA 01 F6 | 	mov	result1, objptr
1c0a8     28 E4 85 F1 | 	sub	objptr, #40
1c0ac     F2 FA 61 FC | 	wrlong	result1, objptr
1c0b0                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1c0b0                 | ' hdmibase:=base							' HDMI base pin, 8*n
1c0b0     18 E4 05 F1 | 	add	objptr, #24
1c0b4     F2 12 62 FC | 	wrlong	arg01, objptr
1c0b8                 | ' mailbox_ptr:=mb		
1c0b8     04 E4 05 F1 | 	add	objptr, #4
1c0bc     F2 14 62 FC | 	wrlong	arg02, objptr
1c0c0                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1c0c0     C1 E5 05 F1 | 	add	objptr, #449
1c0c4     F2 14 62 FC | 	wrlong	arg02, objptr
1c0c8                 | ' sprite_ptr:=@spr1ptr
1c0c8     D8 E4 85 F1 | 	sub	objptr, #216
1c0cc     F2 FA 01 F6 | 	mov	result1, objptr
1c0d0     E5 E4 85 F1 | 	sub	objptr, #229
1c0d4     F2 FA 61 FC | 	wrlong	result1, objptr
1c0d8                 | ' 
1c0d8                 | ' 		'
1c0d8                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1c0d8     E5 E4 05 F1 | 	add	objptr, #229
1c0dc     F2 FA 01 FB | 	rdlong	result1, objptr
1c0e0     D0 FA 05 F1 | 	add	result1, #208
1c0e4     FD 10 58 FC | 	wrword	#8, result1
1c0e8                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1c0e8     F2 16 02 FB | 	rdlong	arg03, objptr
1c0ec     D2 16 06 F1 | 	add	arg03, #210
1c0f0     0B 21 58 FC | 	wrword	#16, arg03
1c0f4                 | ' leading_spaces:=0				'
1c0f4     A5 E5 05 F1 | 	add	objptr, #421
1c0f8     F2 00 68 FC | 	wrlong	#0, objptr
1c0fc                 | ' 
1c0fc                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1c0fc     99 E4 85 F1 | 	sub	objptr, #153
1c100     00 00 A0 FF 
1c104     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1c108                 | ' emptydl[1]:=0
1c108     04 E4 05 F1 | 	add	objptr, #4
1c10c     F2 00 68 FC | 	wrlong	#0, objptr
1c110                 | ' 
1c110                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1c110                 | ' 
1c110                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1c110     28 E5 85 F1 | 	sub	objptr, #296
1c114     F2 02 68 FC | 	wrlong	#1, objptr
1c118                 | ' if s_debug<>0
1c118                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1c118     20 00 80 FF 
1c11c     F2 00 68 FC | 	wrlong	##16384, objptr
1c120     F9 E4 85 F1 | 	sub	objptr, #249
1c124                 | ' setmode()							' set the mode, see below
1c124     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
1c128                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1c128     49 E4 05 F1 | 	add	objptr, #73
1c12c     F2 FA 01 F6 | 	mov	result1, objptr
1c130     35 E4 85 F1 | 	sub	objptr, #53
1c134     F2 FA 61 FC | 	wrlong	result1, objptr
1c138                 | ' cursor_ptr:=@cursor_x						
1c138     28 E4 05 F1 | 	add	objptr, #40
1c13c     F2 16 02 F6 | 	mov	arg03, objptr
1c140     2C E4 85 F1 | 	sub	objptr, #44
1c144     F2 16 62 FC | 	wrlong	arg03, objptr
1c148                 | ' fontnum:=0  							' start with a PC type font 
1c148     55 E4 05 F1 | 	add	objptr, #85
1c14c     F2 00 68 FC | 	wrlong	#0, objptr
1c150                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1c150     1C E4 05 F1 | 	add	objptr, #28
1c154     F2 12 02 F6 | 	mov	arg01, objptr
1c158     81 E4 85 F1 | 	sub	objptr, #129
1c15c     10 00 00 FF 
1c160     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1c164     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1c168     10 00 00 FF 
1c16c     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1c170     10 16 06 F6 | 	mov	arg03, #16
1c174     1C 29 B0 FD | 	call	#__system____builtin_memmove
1c178                 | ' leading_spaces:=0
1c178     01 00 00 FF 
1c17c     B6 E4 05 F1 | 	add	objptr, ##694
1c180     F2 00 68 FC | 	wrlong	#0, objptr
1c184     01 00 00 FF 
1c188     B6 E4 85 F1 | 	sub	objptr, ##694
1c18c                 | ' '---------------------------- initialize a cursor (MSDOS type)
1c18c                 | ' 
1c18c                 | ' initcursor(154)
1c18c     9A 12 06 F6 | 	mov	arg01, #154
1c190     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1c194                 | ' 
1c194                 | ' '---------------------------- start the cog
1c194                 | ' 
1c194                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1c194     10 00 00 FF 
1c198     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1c19c     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1c1a0     10 00 00 FF 
1c1a4     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1c1a8     14 E4 05 F1 | 	add	objptr, #20
1c1ac     10 FA 05 F6 | 	mov	result1, #16
1c1b0     28 E4 61 FD | 	setq	objptr
1c1b4     0A FB F1 FC | 	coginit	result1, arg02 wc
1c1b8     01 FA 65 C6 |  if_b	neg	result1, #1
1c1bc     1C E4 05 F1 | 	add	objptr, #28
1c1c0     F2 FA 61 FC | 	wrlong	result1, objptr
1c1c4     30 E4 85 F1 | 	sub	objptr, #48
1c1c8                 | ' waitms(40)							' wait for stabilize
1c1c8     28 12 06 F6 | 	mov	arg01, #40
1c1cc     98 2C B0 FD | 	call	#__system___waitms
1c1d0                 | ' return cog							' return the driver's cog #
1c1d0     30 E4 05 F1 | 	add	objptr, #48
1c1d4     F2 FA 01 FB | 	rdlong	result1, objptr
1c1d8     30 E4 85 F1 | 	sub	objptr, #48
1c1dc                 | _hg010b_spin2_start_ret
1c1dc     2D 00 64 FD | 	ret
1c1e0                 | 
1c1e0                 | ' 
1c1e0                 | ' 
1c1e0                 | ' '**************************************************************************************************************** 
1c1e0                 | ' '                                                                                                             	*
1c1e0                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1c1e0                 | ' '  Mode number - see start() above or bits below								*
1c1e0                 | ' '                                                                                                             	*
1c1e0                 | ' '****************************************************************************************************************
1c1e0                 | ' 
1c1e0                 | ' '---------------------------- initialize a cursor (MSDOS type)
1c1e0                 | ' pub initcursor(color) |i
1c1e0                 | _hg010b_spin2_initcursor
1c1e0     03 4A 05 F6 | 	mov	COUNT_, #3
1c1e4     A8 00 A0 FD | 	call	#pushregs_
1c1e8     09 1F 02 F6 | 	mov	local01, arg01
1c1ec                 | ' 
1c1ec                 | ' cursor_x:=0							' place the cursor at 0:0
1c1ec     3C E4 05 F1 | 	add	objptr, #60
1c1f0     F2 00 58 FC | 	wrword	#0, objptr
1c1f4                 | ' cursor_y:=0
1c1f4     02 E4 05 F1 | 	add	objptr, #2
1c1f8     F2 00 48 FC | 	wrbyte	#0, objptr
1c1fc                 | ' repeat i from 0 to 111
1c1fc     00 20 06 F6 | 	mov	local02, #0
1c200     F8 E5 05 F1 | 	add	objptr, #504
1c204     97 1A 48 FB | 	callpa	#(@LR__2172-@LR__2170)>>2,fcache_load_ptr_
1c208                 | LR__2170
1c208                 | '   cursor[i]:=0
1c208     10 23 02 F6 | 	mov	local03, local02
1c20c     F2 22 02 F1 | 	add	local03, objptr
1c210     11 01 48 FC | 	wrbyte	#0, local03
1c214     01 20 06 F1 | 	add	local02, #1
1c218     70 20 56 F2 | 	cmps	local02, #112 wc
1c21c     E8 FF 9F CD |  if_b	jmp	#LR__2170
1c220                 | ' repeat i from 112 to 127
1c220     70 20 06 F6 | 	mov	local02, #112
1c224                 | LR__2171
1c224                 | '   cursor[i]:=color  
1c224     10 23 02 F6 | 	mov	local03, local02
1c228     F2 22 02 F1 | 	add	local03, objptr
1c22c     11 1F 42 FC | 	wrbyte	local01, local03
1c230     01 20 06 F1 | 	add	local02, #1
1c234     80 20 16 F2 | 	cmp	local02, #128 wc
1c238     E8 FF 9F CD |  if_b	jmp	#LR__2171
1c23c                 | LR__2172
1c23c                 | ' 'repeat i from 0 to 127
1c23c                 | ' '  if ((i/8)//2)
1c23c                 | ' '    cursor[i]:=15
1c23c                 | ' '  else
1c23c                 | ' '    cursor[i]:=0
1c23c                 | ' '  if i>=120    
1c23c                 | ' '    cursor[i]:=40
1c23c                 | ' setspriteptr(17,@cursor)
1c23c     F2 14 02 F6 | 	mov	arg02, objptr
1c240     01 00 00 FF 
1c244     36 E4 85 F1 | 	sub	objptr, ##566
1c248     11 12 06 F6 | 	mov	arg01, #17
1c24c     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1c250                 | ' setspritesize(17,8,16)
1c250     11 12 06 F6 | 	mov	arg01, #17
1c254     08 14 06 F6 | 	mov	arg02, #8
1c258     10 16 06 F6 | 	mov	arg03, #16
1c25c     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
1c260                 | ' setspritepos(17,0,0)
1c260     11 12 06 F6 | 	mov	arg01, #17
1c264     00 14 06 F6 | 	mov	arg02, #0
1c268     00 16 06 F6 | 	mov	arg03, #0
1c26c     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
1c270                 | ' cursorshape:=14
1c270     0B 00 00 FF 
1c274     C6 E4 05 F1 | 	add	objptr, ##5830
1c278     F2 1C 68 FC | 	wrlong	#14, objptr
1c27c                 | ' cursorcolor:=color
1c27c     04 E4 85 F1 | 	sub	objptr, #4
1c280     F2 1E 62 FC | 	wrlong	local01, objptr
1c284     0B 00 00 FF 
1c288     C2 E4 85 F1 | 	sub	objptr, ##5826
1c28c     A7 F0 03 F6 | 	mov	ptra, fp
1c290     B2 00 A0 FD | 	call	#popregs_
1c294                 | _hg010b_spin2_initcursor_ret
1c294     2D 00 64 FD | 	ret
1c298                 | 
1c298                 | ' 
1c298                 | ' pub setcursorshape(shape) | i
1c298                 | _hg010b_spin2_setcursorshape
1c298                 | ' 
1c298                 | ' cursorshape:=shape
1c298     0B 00 00 FF 
1c29c     C6 E4 05 F1 | 	add	objptr, ##5830
1c2a0     F2 12 62 FC | 	wrlong	arg01, objptr
1c2a4                 | ' repeat i from 0 to (8*cursorshape)-1
1c2a4     00 00 06 F6 | 	mov	_var01, #0
1c2a8     09 03 02 F6 | 	mov	_var02, arg01
1c2ac     03 02 66 F0 | 	shl	_var02, #3
1c2b0     01 02 86 F1 | 	sub	_var02, #1
1c2b4     00 02 56 F2 | 	cmps	_var02, #0 wc
1c2b8     01 04 86 F6 | 	negc	_var03, #1
1c2bc     02 07 02 F6 | 	mov	_var04, _var03
1c2c0     02 03 02 F1 | 	add	_var02, _var03
1c2c4     0A 00 00 FF 
1c2c8     90 E4 85 F1 | 	sub	objptr, ##5264
1c2cc     97 0C 48 FB | 	callpa	#(@LR__2181-@LR__2180)>>2,fcache_load_ptr_
1c2d0                 | LR__2180
1c2d0                 | '   cursor[i]:=0
1c2d0     00 05 02 F6 | 	mov	_var03, _var01
1c2d4     F2 04 02 F1 | 	add	_var03, objptr
1c2d8     02 01 48 FC | 	wrbyte	#0, _var03
1c2dc     03 01 02 F1 | 	add	_var01, _var04
1c2e0     01 01 0A F2 | 	cmp	_var01, _var02 wz
1c2e4     E8 FF 9F 5D |  if_ne	jmp	#LR__2180
1c2e8                 | LR__2181
1c2e8                 | ' repeat i from 8*cursorshape to 127
1c2e8     0A 00 00 FF 
1c2ec     90 E4 05 F1 | 	add	objptr, ##5264
1c2f0     F2 06 02 FB | 	rdlong	_var04, objptr
1c2f4     03 01 02 F6 | 	mov	_var01, _var04
1c2f8     03 00 66 F0 | 	shl	_var01, #3
1c2fc     0B 00 00 FF 
1c300     C6 E4 85 F1 | 	sub	objptr, ##5830
1c304     03 06 66 F0 | 	shl	_var04, #3
1c308     80 06 56 F2 | 	cmps	_var04, #128 wc
1c30c     01 04 A6 F6 | 	negnc	_var03, #1
1c310     7F 02 06 F6 | 	mov	_var02, #127
1c314     02 03 02 F1 | 	add	_var02, _var03
1c318     97 1A 48 FB | 	callpa	#(@LR__2183-@LR__2182)>>2,fcache_load_ptr_
1c31c                 | LR__2182
1c31c                 | '   cursor[i]:=cursorcolor
1c31c     00 07 02 F6 | 	mov	_var04, _var01
1c320     01 00 00 FF 
1c324     36 E4 05 F1 | 	add	objptr, ##566
1c328     F2 06 02 F1 | 	add	_var04, objptr
1c32c     0A 00 00 FF 
1c330     8C E4 05 F1 | 	add	objptr, ##5260
1c334     F2 12 02 FB | 	rdlong	arg01, objptr
1c338     0B 00 00 FF 
1c33c     C2 E4 85 F1 | 	sub	objptr, ##5826
1c340     03 13 42 FC | 	wrbyte	arg01, _var04
1c344     02 01 02 F1 | 	add	_var01, _var03
1c348     01 01 0A F2 | 	cmp	_var01, _var02 wz
1c34c     CC FF 9F 5D |  if_ne	jmp	#LR__2182
1c350                 | LR__2183
1c350                 | _hg010b_spin2_setcursorshape_ret
1c350     2D 00 64 FD | 	ret
1c354                 | 
1c354                 | ' 
1c354                 | ' pub setcursorcolor(color) | i
1c354                 | _hg010b_spin2_setcursorcolor
1c354                 | ' 
1c354                 | ' cursorcolor:=color
1c354     0B 00 00 FF 
1c358     C2 E4 05 F1 | 	add	objptr, ##5826
1c35c     F2 12 62 FC | 	wrlong	arg01, objptr
1c360                 | ' repeat i from 0 to (8*cursorshape)-1
1c360     00 12 06 F6 | 	mov	arg01, #0
1c364     04 E4 05 F1 | 	add	objptr, #4
1c368     F2 00 02 FB | 	rdlong	_var01, objptr
1c36c     03 00 66 F0 | 	shl	_var01, #3
1c370     01 00 86 F1 | 	sub	_var01, #1
1c374     00 00 56 F2 | 	cmps	_var01, #0 wc
1c378     01 02 86 F6 | 	negc	_var02, #1
1c37c     01 05 02 F6 | 	mov	_var03, _var02
1c380     01 01 02 F1 | 	add	_var01, _var02
1c384     0A 00 00 FF 
1c388     90 E4 85 F1 | 	sub	objptr, ##5264
1c38c     97 0C 48 FB | 	callpa	#(@LR__2191-@LR__2190)>>2,fcache_load_ptr_
1c390                 | LR__2190
1c390                 | '   cursor[i]:=0
1c390     09 03 02 F6 | 	mov	_var02, arg01
1c394     F2 02 02 F1 | 	add	_var02, objptr
1c398     01 01 48 FC | 	wrbyte	#0, _var02
1c39c     02 13 02 F1 | 	add	arg01, _var03
1c3a0     00 13 0A F2 | 	cmp	arg01, _var01 wz
1c3a4     E8 FF 9F 5D |  if_ne	jmp	#LR__2190
1c3a8                 | LR__2191
1c3a8                 | ' repeat i from 8*cursorshape to 127
1c3a8     0A 00 00 FF 
1c3ac     90 E4 05 F1 | 	add	objptr, ##5264
1c3b0     F2 04 02 FB | 	rdlong	_var03, objptr
1c3b4     02 13 02 F6 | 	mov	arg01, _var03
1c3b8     03 12 66 F0 | 	shl	arg01, #3
1c3bc     0B 00 00 FF 
1c3c0     C6 E4 85 F1 | 	sub	objptr, ##5830
1c3c4     03 04 66 F0 | 	shl	_var03, #3
1c3c8     80 04 56 F2 | 	cmps	_var03, #128 wc
1c3cc     01 02 A6 F6 | 	negnc	_var02, #1
1c3d0     7F 00 06 F6 | 	mov	_var01, #127
1c3d4     01 01 02 F1 | 	add	_var01, _var02
1c3d8     97 1A 48 FB | 	callpa	#(@LR__2193-@LR__2192)>>2,fcache_load_ptr_
1c3dc                 | LR__2192
1c3dc                 | '   cursor[i]:=cursorcolor
1c3dc     09 05 02 F6 | 	mov	_var03, arg01
1c3e0     01 00 00 FF 
1c3e4     36 E4 05 F1 | 	add	objptr, ##566
1c3e8     F2 04 02 F1 | 	add	_var03, objptr
1c3ec     0A 00 00 FF 
1c3f0     8C E4 05 F1 | 	add	objptr, ##5260
1c3f4     F2 06 02 FB | 	rdlong	_var04, objptr
1c3f8     0B 00 00 FF 
1c3fc     C2 E4 85 F1 | 	sub	objptr, ##5826
1c400     02 07 42 FC | 	wrbyte	_var04, _var03
1c404     01 13 02 F1 | 	add	arg01, _var02
1c408     00 13 0A F2 | 	cmp	arg01, _var01 wz
1c40c     CC FF 9F 5D |  if_ne	jmp	#LR__2192
1c410                 | LR__2193
1c410                 | _hg010b_spin2_setcursorcolor_ret
1c410     2D 00 64 FD | 	ret
1c414                 | 
1c414                 | '   
1c414                 | '   
1c414                 | '   
1c414                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1c414                 | _hg010b_spin2_setmode
1c414     02 4A 05 F6 | 	mov	COUNT_, #2
1c418     A8 00 A0 FD | 	call	#pushregs_
1c41c                 | ' 
1c41c                 | ' 
1c41c                 | ' dl_ptr:=@emptydl[0]
1c41c     01 00 00 FF 
1c420     1D E4 05 F1 | 	add	objptr, ##541
1c424     F2 1A 02 F6 | 	mov	arg05, objptr
1c428     FD E5 85 F1 | 	sub	objptr, #509
1c42c     F2 1A 62 FC | 	wrlong	arg05, objptr
1c430                 | ' 
1c430                 | ' if cog>0 
1c430     10 E4 05 F1 | 	add	objptr, #16
1c434     F2 1A 02 FB | 	rdlong	arg05, objptr
1c438     30 E4 85 F1 | 	sub	objptr, #48
1c43c     01 1A 56 F2 | 	cmps	arg05, #1 wc
1c440                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1c440     01 12 06 36 |  if_ae	mov	arg01, #1
1c444     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1c448                 | ' xres:=1024
1c448     01 00 00 FF 
1c44c     26 E4 05 F1 | 	add	objptr, ##550
1c450     02 00 80 FF 
1c454     F2 00 68 FC | 	wrlong	##1024, objptr
1c458                 | ' yres:=600
1c458     04 E4 05 F1 | 	add	objptr, #4
1c45c     01 00 80 FF 
1c460     F2 B0 68 FC | 	wrlong	##600, objptr
1c464                 | ' ppl:=(timings[3])
1c464     10 00 00 FF 
1c468     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1c46c     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1c470     51 E5 85 F1 | 	sub	objptr, #337
1c474     F2 1A 62 FC | 	wrlong	arg05, objptr
1c478                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1c478     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1c47c     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1c480     01 1E 66 F0 | 	shl	local01, #1
1c484     80 E4 85 F1 | 	sub	objptr, #128
1c488     F2 1E 62 FC | 	wrlong	local01, objptr
1c48c                 | ' cpl1:=cpl '' todo remove
1c48c     04 E4 05 F1 | 	add	objptr, #4
1c490     F2 1E 62 FC | 	wrlong	local01, objptr
1c494                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1c494     02 00 00 FF 
1c498     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1c49c     41 E4 85 F1 | 	sub	objptr, #65
1c4a0     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1c4a4                 | ' repeat i from 0 to 3
1c4a4     00 20 06 F6 | 	mov	local02, #0
1c4a8     02 00 00 FF 
1c4ac     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1c4b0     08 E4 05 F1 | 	add	objptr, #8
1c4b4     97 20 48 FB | 	callpa	#(@LR__2201-@LR__2200)>>2,fcache_load_ptr_
1c4b8                 | LR__2200
1c4b8                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1c4b8     10 1F 02 F6 | 	mov	local01, local02
1c4bc     02 1E 66 F0 | 	shl	local01, #2
1c4c0     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1c4c4     F2 1A 02 FB | 	rdlong	arg05, objptr
1c4c8     11 1A 66 F0 | 	shl	arg05, #17
1c4cc     0F 1F 02 FB | 	rdlong	local01, local01
1c4d0     0D 1F 02 F1 | 	add	local01, arg05
1c4d4     80 40 38 FF 
1c4d8     00 1E 06 F1 | 	add	local01, ##1887502336
1c4dc     10 1B 02 F6 | 	mov	arg05, local02
1c4e0     02 1A 66 F0 | 	shl	arg05, #2
1c4e4     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
1c4e8     0D 1F 62 FC | 	wrlong	local01, arg05
1c4ec     01 20 06 F1 | 	add	local02, #1
1c4f0     04 20 56 F2 | 	cmps	local02, #4 wc
1c4f4     C0 FF 9F CD |  if_b	jmp	#LR__2200
1c4f8                 | LR__2201
1c4f8     24 E4 85 F1 | 	sub	objptr, #36
1c4fc                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1c4fc     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1c500     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1c504     14 1E 66 FC | 	wrlong	local01, #20
1c508                 | ' hubset(timings[10])
1c508     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1c50c     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1c510     10 00 00 FF 
1c514     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1c518     00 12 62 FD | 	hubset	arg01
1c51c                 | ' waitms(1)                                                   	' wait for stabilization
1c51c     01 12 06 F6 | 	mov	arg01, #1
1c520     44 29 B0 FD | 	call	#__system___waitms
1c524     10 00 00 FF 
1c528     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1c52c     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1c530     61 E4 05 F1 | 	add	objptr, #97
1c534     F2 20 62 FC | 	wrlong	local02, objptr
1c538     10 1F 52 F6 | 	abs	local01, local02 wc
1c53c     04 1E 46 F0 | 	shr	local01, #4
1c540     0F 1F 82 F6 | 	negc	local01, local01
1c544     9C E4 05 F1 | 	add	objptr, #156
1c548     F2 1E 62 FC | 	wrlong	local01, objptr
1c54c     A4 E4 85 F1 | 	sub	objptr, #164
1c550     F2 20 02 FB | 	rdlong	local02, objptr
1c554     08 E4 05 F1 | 	add	objptr, #8
1c558     F2 1E 02 FB | 	rdlong	local01, objptr
1c55c     0F 21 02 FD | 	qmul	local02, local01
1c560                 | ' lines:=timings[11]
1c560                 | ' t_lines:=lines/16
1c560                 | ' buflen:=cpl*lines						' framebuffer length in longs
1c560     29 E4 85 F1 | 	sub	objptr, #41
1c564     19 1E C6 F9 | 	decod	local01, #25
1c568     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
1c56c     18 20 62 FD | 	getqx	local02
1c570     F2 20 62 FC | 	wrlong	local02, objptr
1c574     38 E4 85 F1 | 	sub	objptr, #56
1c578     02 20 66 F0 | 	shl	local02, #2
1c57c     10 1F 82 F1 | 	sub	local01, local02
1c580     F2 1E 62 FC | 	wrlong	local01, objptr
1c584     FD E4 05 F1 | 	add	objptr, #253
1c588     F2 20 02 FB | 	rdlong	local02, objptr
1c58c     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1c590     0D 21 02 FD | 	qmul	local02, arg05
1c594                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1c594                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
1c594     F9 E4 85 F1 | 	sub	objptr, #249
1c598                 | ' mode_ptr:=@timings						' set pointers to timings
1c598     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
1c59c                 | ' graphmode:=1024+512+192+48							' det global variable
1c59c                 | ' makedl(graphmode)							' make a DL for the mode
1c59c     03 00 00 FF 
1c5a0     F0 12 06 F6 | 	mov	arg01, ##1776
1c5a4     18 20 62 FD | 	getqx	local02
1c5a8     10 1F 82 F1 | 	sub	local01, local02
1c5ac     F2 1E 62 FC | 	wrlong	local01, objptr
1c5b0     14 E4 05 F1 | 	add	objptr, #20
1c5b4     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1c5b8     79 E4 05 F1 | 	add	objptr, #121
1c5bc     03 00 80 FF 
1c5c0     F2 E0 69 FC | 	wrlong	##1776, objptr
1c5c4     91 E4 85 F1 | 	sub	objptr, #145
1c5c8     10 00 00 FF 
1c5cc     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1c5d0     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
1c5d4                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1c5d4     F2 1E 02 FB | 	rdlong	local01, objptr
1c5d8     DD E4 05 F1 | 	add	objptr, #221
1c5dc     F2 1E 62 FC | 	wrlong	local01, objptr
1c5e0                 | ' s_font_ptr:=font_ptr
1c5e0     D5 E4 85 F1 | 	sub	objptr, #213
1c5e4     F2 1E 02 FB | 	rdlong	local01, objptr
1c5e8     D9 E4 05 F1 | 	add	objptr, #217
1c5ec     F2 1E 62 FC | 	wrlong	local01, objptr
1c5f0                 | ' s_lines:=lines
1c5f0     80 E4 85 F1 | 	sub	objptr, #128
1c5f4     F2 1E 02 FB | 	rdlong	local01, objptr
1c5f8     84 E4 05 F1 | 	add	objptr, #132
1c5fc     F2 1E 62 FC | 	wrlong	local01, objptr
1c600                 | ' s_buflen:=buflen
1c600     AD E4 85 F1 | 	sub	objptr, #173
1c604     F2 1E 02 FB | 	rdlong	local01, objptr
1c608     B5 E4 05 F1 | 	add	objptr, #181
1c60c     F2 1E 62 FC | 	wrlong	local01, objptr
1c610                 | ' s_cpl:=cpl
1c610     94 E4 85 F1 | 	sub	objptr, #148
1c614     F2 1E 02 FB | 	rdlong	local01, objptr
1c618     90 E4 05 F1 | 	add	objptr, #144
1c61c     F2 1E 62 FC | 	wrlong	local01, objptr
1c620                 | ' s_cpl1:=cpl
1c620     90 E4 85 F1 | 	sub	objptr, #144
1c624     F2 1E 02 FB | 	rdlong	local01, objptr
1c628     98 E4 05 F1 | 	add	objptr, #152
1c62c     F2 1E 62 FC | 	wrlong	local01, objptr
1c630                 | ' st_lines:=t_lines
1c630     0C E4 05 F1 | 	add	objptr, #12
1c634     F2 1E 02 FB | 	rdlong	local01, objptr
1c638     04 E4 05 F1 | 	add	objptr, #4
1c63c     F2 1E 62 FC | 	wrlong	local01, objptr
1c640                 | ' ppl:=ppl/xzoom  
1c640     28 E4 85 F1 | 	sub	objptr, #40
1c644     F2 64 02 FB | 	rdlong	muldiva_, objptr
1c648     2C E4 05 F1 | 	add	objptr, #44
1c64c     F2 66 02 FB | 	rdlong	muldivb_, objptr
1c650     05 E5 85 F1 | 	sub	objptr, #261
1c654     BA 00 A0 FD | 	call	#divide_
1c658     D9 E4 05 F1 | 	add	objptr, #217
1c65c     F2 66 62 FC | 	wrlong	muldivb_, objptr
1c660                 | ' s_ppl:=ppl
1c660     1C E4 05 F1 | 	add	objptr, #28
1c664     F2 66 62 FC | 	wrlong	muldivb_, objptr
1c668     F5 E4 85 F1 | 	sub	objptr, #245
1c66c                 | ' waitms(20)							' wait 
1c66c     14 12 06 F6 | 	mov	arg01, #20
1c670     F4 27 B0 FD | 	call	#__system___waitms
1c674                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1c674     04 E4 05 F1 | 	add	objptr, #4
1c678     F2 12 02 FB | 	rdlong	arg01, objptr
1c67c     04 E4 85 F1 | 	sub	objptr, #4
1c680     F2 16 02 FB | 	rdlong	arg03, objptr
1c684     09 17 82 F1 | 	sub	arg03, arg01
1c688     20 14 06 F6 | 	mov	arg02, #32
1c68c     00 18 06 F6 | 	mov	arg04, #0
1c690     01 1A 06 F6 | 	mov	arg05, #1
1c694     0B 00 00 FF 
1c698     CC E4 05 F1 | 	add	objptr, ##5836
1c69c     E8 19 B0 FD | 	call	#_psram_spin2_fill
1c6a0     0B 00 00 FF 
1c6a4     CC E4 85 F1 | 	sub	objptr, ##5836
1c6a8     A7 F0 03 F6 | 	mov	ptra, fp
1c6ac     B2 00 A0 FD | 	call	#popregs_
1c6b0                 | _hg010b_spin2_setmode_ret
1c6b0     2D 00 64 FD | 	ret
1c6b4                 | 
1c6b4                 | ' 
1c6b4                 | ' '****************************************************************************************************************
1c6b4                 | ' '                                                                                                             	*
1c6b4                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1c6b4                 | ' '                                                                                                             	*
1c6b4                 | ' '****************************************************************************************************************
1c6b4                 | ' 
1c6b4                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1c6b4                 | _hg010b_spin2_makedl
1c6b4                 | ' 
1c6b4                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1c6b4                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1c6b4                 | ' repeat i from 0 to 11                                                           ' clear DL
1c6b4     00 00 06 F6 | 	mov	_var01, #0
1c6b8     ED E5 05 F1 | 	add	objptr, #493
1c6bc     97 0E 48 FB | 	callpa	#(@LR__2211-@LR__2210)>>2,fcache_load_ptr_
1c6c0                 | LR__2210
1c6c0                 | '   displaylist[i]:=0 
1c6c0     00 03 02 F6 | 	mov	_var02, _var01
1c6c4     02 02 66 F0 | 	shl	_var02, #2
1c6c8     F2 02 02 F1 | 	add	_var02, objptr
1c6cc     01 01 68 FC | 	wrlong	#0, _var02
1c6d0     01 00 06 F1 | 	add	_var01, #1
1c6d4     0C 00 56 F2 | 	cmps	_var01, #12 wc
1c6d8     E4 FF 9F CD |  if_b	jmp	#LR__2210
1c6dc                 | LR__2211
1c6dc                 | '                         ' 
1c6dc                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1c6dc     8C E5 85 F1 | 	sub	objptr, #396
1c6e0     F2 02 02 FB | 	rdlong	_var02, objptr
1c6e4     14 02 66 F0 | 	shl	_var02, #20
1c6e8     01 02 06 F1 | 	add	_var02, #1
1c6ec     04 E4 85 F1 | 	sub	objptr, #4
1c6f0     F2 00 02 FB | 	rdlong	_var01, objptr
1c6f4     02 00 66 F0 | 	shl	_var01, #2
1c6f8     04 00 66 F0 | 	shl	_var01, #4
1c6fc     00 03 02 F1 | 	add	_var02, _var01
1c700     90 E5 05 F1 | 	add	objptr, #400
1c704     F2 02 62 FC | 	wrlong	_var02, objptr
1c708     ED E5 85 F1 | 	sub	objptr, #493
1c70c                 | ' displaylist[1]:=buf_ptr<<4+%10  
1c70c     F2 02 02 FB | 	rdlong	_var02, objptr
1c710     04 02 66 F0 | 	shl	_var02, #4
1c714     02 02 06 F1 | 	add	_var02, #2
1c718     F1 E5 05 F1 | 	add	objptr, #497
1c71c     F2 02 62 FC | 	wrlong	_var02, objptr
1c720                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1c720     04 E4 85 F1 | 	sub	objptr, #4
1c724     F2 02 02 F6 | 	mov	_var02, objptr
1c728     CD E5 85 F1 | 	sub	objptr, #461
1c72c     F2 02 62 FC | 	wrlong	_var02, objptr
1c730     20 E4 85 F1 | 	sub	objptr, #32
1c734                 | _hg010b_spin2_makedl_ret
1c734     2D 00 64 FD | 	ret
1c738                 | 
1c738                 | ' 
1c738                 | ' 
1c738                 | ' '****************************************************************************************************************
1c738                 | ' '                                                                        					*
1c738                 | ' '  Graphic primitives                                                    					*
1c738                 | ' '                                                                        					*
1c738                 | ' '****************************************************************************************************************
1c738                 | ' 
1c738                 | ' pub setspriteptr(num,ptr)
1c738                 | _hg010b_spin2_setspriteptr
1c738                 | ' long[@spr1ptr+12*num]:=ptr
1c738     11 E5 05 F1 | 	add	objptr, #273
1c73c     F2 00 02 F6 | 	mov	_var01, objptr
1c740     09 03 02 F6 | 	mov	_var02, arg01
1c744     01 02 66 F0 | 	shl	_var02, #1
1c748     09 03 02 F1 | 	add	_var02, arg01
1c74c     02 02 66 F0 | 	shl	_var02, #2
1c750     01 01 02 F1 | 	add	_var01, _var02
1c754     00 15 62 FC | 	wrlong	arg02, _var01
1c758     11 E5 85 F1 | 	sub	objptr, #273
1c75c                 | _hg010b_spin2_setspriteptr_ret
1c75c     2D 00 64 FD | 	ret
1c760                 | 
1c760                 | ' 
1c760                 | ' pub setspritepos(num,x,y)
1c760                 | _hg010b_spin2_setspritepos
1c760                 | ' if y>601
1c760     01 00 00 FF 
1c764     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1c768                 | '   y:=601
1c768     01 00 00 3F 
1c76c     59 16 06 36 |  if_ae	mov	arg03, ##601
1c770                 | ' if x>1024
1c770     02 00 00 FF 
1c774     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1c778                 | '   x:=1024
1c778     0A 14 C6 39 |  if_ae	decod	arg02, #10
1c77c                 | ' word[@spr1ptr+12*num+4]:=x
1c77c     11 E5 05 F1 | 	add	objptr, #273
1c780     F2 00 02 F6 | 	mov	_var01, objptr
1c784     09 03 02 F6 | 	mov	_var02, arg01
1c788     01 02 66 F0 | 	shl	_var02, #1
1c78c     09 03 02 F1 | 	add	_var02, arg01
1c790     02 02 66 F0 | 	shl	_var02, #2
1c794     01 01 02 F1 | 	add	_var01, _var02
1c798     04 00 06 F1 | 	add	_var01, #4
1c79c     00 15 52 FC | 	wrword	arg02, _var01
1c7a0                 | ' word[@spr1ptr+12*num+6]:=y
1c7a0     F2 00 02 F6 | 	mov	_var01, objptr
1c7a4     09 03 02 F6 | 	mov	_var02, arg01
1c7a8     01 02 66 F0 | 	shl	_var02, #1
1c7ac     09 03 02 F1 | 	add	_var02, arg01
1c7b0     02 02 66 F0 | 	shl	_var02, #2
1c7b4     01 01 02 F1 | 	add	_var01, _var02
1c7b8     06 00 06 F1 | 	add	_var01, #6
1c7bc     00 17 52 FC | 	wrword	arg03, _var01
1c7c0     11 E5 85 F1 | 	sub	objptr, #273
1c7c4                 | _hg010b_spin2_setspritepos_ret
1c7c4     2D 00 64 FD | 	ret
1c7c8                 | 
1c7c8                 | ' 
1c7c8                 | ' pub setspritesize(num,w,h)
1c7c8                 | _hg010b_spin2_setspritesize
1c7c8                 | ' word[@spr1ptr+12*num+8]:=w
1c7c8     11 E5 05 F1 | 	add	objptr, #273
1c7cc     F2 00 02 F6 | 	mov	_var01, objptr
1c7d0     09 03 02 F6 | 	mov	_var02, arg01
1c7d4     01 02 66 F0 | 	shl	_var02, #1
1c7d8     09 03 02 F1 | 	add	_var02, arg01
1c7dc     02 02 66 F0 | 	shl	_var02, #2
1c7e0     01 01 02 F1 | 	add	_var01, _var02
1c7e4     08 00 06 F1 | 	add	_var01, #8
1c7e8     00 15 52 FC | 	wrword	arg02, _var01
1c7ec                 | ' word[@spr1ptr+12*num+10]:=h
1c7ec     F2 00 02 F6 | 	mov	_var01, objptr
1c7f0     09 03 02 F6 | 	mov	_var02, arg01
1c7f4     01 02 66 F0 | 	shl	_var02, #1
1c7f8     09 03 02 F1 | 	add	_var02, arg01
1c7fc     02 02 66 F0 | 	shl	_var02, #2
1c800     01 01 02 F1 | 	add	_var01, _var02
1c804     0A 00 06 F1 | 	add	_var01, #10
1c808     00 17 52 FC | 	wrword	arg03, _var01
1c80c     11 E5 85 F1 | 	sub	objptr, #273
1c810                 | _hg010b_spin2_setspritesize_ret
1c810     2D 00 64 FD | 	ret
1c814                 | 
1c814                 | ' 
1c814                 | ' 
1c814                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1c814                 | ' 
1c814                 | ' 
1c814                 | ' pub putpixel(x,y,c)
1c814                 | _hg010b_spin2_putpixel
1c814     04 4A 05 F6 | 	mov	COUNT_, #4
1c818     A8 00 A0 FD | 	call	#pushregs_
1c81c     09 1F 02 F6 | 	mov	local01, arg01
1c820                 | ' 
1c820                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1c820     00 20 06 F6 | 	mov	local02, #0
1c824     00 1E 56 F2 | 	cmps	local01, #0 wc
1c828     01 20 66 36 |  if_ae	neg	local02, #1
1c82c     E9 E4 05 F1 | 	add	objptr, #233
1c830     F2 1A 02 FB | 	rdlong	arg05, objptr
1c834     02 1A 66 F0 | 	shl	arg05, #2
1c838     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1c83c     11 23 A2 F1 | 	subx	local03, local03
1c840     11 21 02 F5 | 	and	local02, local03
1c844     00 22 06 F6 | 	mov	local03, #0
1c848     00 14 56 F2 | 	cmps	arg02, #0 wc
1c84c     01 22 66 36 |  if_ae	neg	local03, #1
1c850     11 21 02 F5 | 	and	local02, local03
1c854     04 E4 85 F1 | 	sub	objptr, #4
1c858     F2 22 02 FB | 	rdlong	local03, objptr
1c85c     E5 E4 85 F1 | 	sub	objptr, #229
1c860     11 15 52 F2 | 	cmps	arg02, local03 wc
1c864     12 25 A2 F1 | 	subx	local04, local04
1c868     12 21 CA F7 | 	test	local02, local04 wz
1c86c     48 00 90 AD |  if_e	jmp	#LR__2220
1c870     DD E4 05 F1 | 	add	objptr, #221
1c874     F2 12 02 FB | 	rdlong	arg01, objptr
1c878     14 E4 05 F1 | 	add	objptr, #20
1c87c     F2 24 02 FB | 	rdlong	local04, objptr
1c880     02 24 66 F0 | 	shl	local04, #2
1c884     0A 25 02 FD | 	qmul	local04, arg02
1c888                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1c888     0B 15 02 F6 | 	mov	arg02, arg03
1c88c     01 16 06 F6 | 	mov	arg03, #1
1c890     00 18 06 F6 | 	mov	arg04, #0
1c894     01 1A 06 F6 | 	mov	arg05, #1
1c898     0A 00 00 FF 
1c89c     DB E5 05 F1 | 	add	objptr, ##5595
1c8a0     18 24 62 FD | 	getqx	local04
1c8a4     0F 25 02 F1 | 	add	local04, local01
1c8a8     12 13 02 F1 | 	add	arg01, local04
1c8ac     D8 17 B0 FD | 	call	#_psram_spin2_fill
1c8b0     0B 00 00 FF 
1c8b4     CC E4 85 F1 | 	sub	objptr, ##5836
1c8b8                 | LR__2220
1c8b8     A7 F0 03 F6 | 	mov	ptra, fp
1c8bc     B2 00 A0 FD | 	call	#popregs_
1c8c0                 | _hg010b_spin2_putpixel_ret
1c8c0     2D 00 64 FD | 	ret
1c8c4                 | 
1c8c4                 | ' 
1c8c4                 | ' pub putpixel2(x,y,c)
1c8c4                 | _hg010b_spin2_putpixel2
1c8c4     02 4A 05 F6 | 	mov	COUNT_, #2
1c8c8     A8 00 A0 FD | 	call	#pushregs_
1c8cc     DD E4 05 F1 | 	add	objptr, #221
1c8d0     F2 1E 02 FB | 	rdlong	local01, objptr
1c8d4     14 E4 05 F1 | 	add	objptr, #20
1c8d8     F2 1A 02 FB | 	rdlong	arg05, objptr
1c8dc     02 1A 66 F0 | 	shl	arg05, #2
1c8e0     0A 1B 02 FD | 	qmul	arg05, arg02
1c8e4                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1c8e4     0B 15 02 F6 | 	mov	arg02, arg03
1c8e8     01 16 06 F6 | 	mov	arg03, #1
1c8ec     00 18 06 F6 | 	mov	arg04, #0
1c8f0     01 1A 06 F6 | 	mov	arg05, #1
1c8f4     0A 00 00 FF 
1c8f8     DB E5 05 F1 | 	add	objptr, ##5595
1c8fc     18 20 62 FD | 	getqx	local02
1c900     09 21 02 F1 | 	add	local02, arg01
1c904     10 1F 02 F1 | 	add	local01, local02
1c908     0F 13 02 F6 | 	mov	arg01, local01
1c90c     78 17 B0 FD | 	call	#_psram_spin2_fill
1c910     0B 00 00 FF 
1c914     CC E4 85 F1 | 	sub	objptr, ##5836
1c918     A7 F0 03 F6 | 	mov	ptra, fp
1c91c     B2 00 A0 FD | 	call	#popregs_
1c920                 | _hg010b_spin2_putpixel2_ret
1c920     2D 00 64 FD | 	ret
1c924                 | 
1c924                 | ' 
1c924                 | ' pub getpixel2(x,y): c 
1c924                 | _hg010b_spin2_getpixel2
1c924     02 4A 05 F6 | 	mov	COUNT_, #2
1c928     A8 00 A0 FD | 	call	#pushregs_
1c92c     0C F0 07 F1 | 	add	ptra, #12
1c930     04 4E 05 F1 | 	add	fp, #4
1c934     A7 12 62 FC | 	wrlong	arg01, fp
1c938     04 4E 05 F1 | 	add	fp, #4
1c93c     A7 14 62 FC | 	wrlong	arg02, fp
1c940     08 4E 85 F1 | 	sub	fp, #8
1c944     A7 00 68 FC | 	wrlong	#0, fp
1c948     A7 12 02 F6 | 	mov	arg01, fp
1c94c     DD E4 05 F1 | 	add	objptr, #221
1c950     F2 14 02 FB | 	rdlong	arg02, objptr
1c954     14 E4 05 F1 | 	add	objptr, #20
1c958     F2 16 02 FB | 	rdlong	arg03, objptr
1c95c     02 16 66 F0 | 	shl	arg03, #2
1c960     08 4E 05 F1 | 	add	fp, #8
1c964     A7 FA 01 FB | 	rdlong	result1, fp
1c968     FD 16 02 FD | 	qmul	arg03, result1
1c96c                 | ' 
1c96c                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1c96c     04 4E 85 F1 | 	sub	fp, #4
1c970     A7 1E 02 FB | 	rdlong	local01, fp
1c974     04 4E 85 F1 | 	sub	fp, #4
1c978     01 16 06 F6 | 	mov	arg03, #1
1c97c     0A 00 00 FF 
1c980     DB E5 05 F1 | 	add	objptr, ##5595
1c984     18 20 62 FD | 	getqx	local02
1c988     0F 21 02 F1 | 	add	local02, local01
1c98c     10 15 02 F1 | 	add	arg02, local02
1c990     BC 15 B0 FD | 	call	#_psram_spin2_read1
1c994     0B 00 00 FF 
1c998     CC E4 85 F1 | 	sub	objptr, ##5836
1c99c                 | ' return c
1c99c     A7 FA 01 FB | 	rdlong	result1, fp
1c9a0     A7 F0 03 F6 | 	mov	ptra, fp
1c9a4     B2 00 A0 FD | 	call	#popregs_
1c9a8                 | _hg010b_spin2_getpixel2_ret
1c9a8     2D 00 64 FD | 	ret
1c9ac                 | 
1c9ac                 | '   
1c9ac                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1c9ac                 | ' 
1c9ac                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1c9ac                 | _hg010b_spin2_fastline
1c9ac     02 4A 05 F6 | 	mov	COUNT_, #2
1c9b0     A8 00 A0 FD | 	call	#pushregs_
1c9b4     09 1F 02 F6 | 	mov	local01, arg01
1c9b8     0A 21 02 F6 | 	mov	local02, arg02
1c9bc                 | ' 
1c9bc                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1c9bc     00 16 56 F2 | 	cmps	arg03, #0 wc
1c9c0     F4 00 90 CD |  if_b	jmp	#LR__2230
1c9c4     01 00 00 FF 
1c9c8     2A E4 05 F1 | 	add	objptr, ##554
1c9cc     F2 1A 02 FB | 	rdlong	arg05, objptr
1c9d0     01 00 00 FF 
1c9d4     2A E4 85 F1 | 	sub	objptr, ##554
1c9d8     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1c9dc     D8 00 90 3D |  if_ae	jmp	#LR__2230
1c9e0     00 1E 56 F2 | 	cmps	local01, #0 wc
1c9e4     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1c9e8     CC 00 90 CD |  if_b	jmp	#LR__2230
1c9ec     01 00 00 FF 
1c9f0     26 E4 05 F1 | 	add	objptr, ##550
1c9f4     F2 1A 02 FB | 	rdlong	arg05, objptr
1c9f8     01 00 00 FF 
1c9fc     26 E4 85 F1 | 	sub	objptr, ##550
1ca00     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1ca04     01 00 00 1F 
1ca08     26 E4 05 11 |  if_a	add	objptr, ##550
1ca0c     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1ca10     01 00 00 1F 
1ca14     26 E4 85 11 |  if_a	sub	objptr, ##550
1ca18     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1ca1c                 | '   return
1ca1c     98 00 90 1D |  if_a	jmp	#LR__2230
1ca20     10 1F 5A F2 | 	cmps	local01, local02 wcz
1ca24     0F 1B 02 16 |  if_a	mov	arg05, local01
1ca28     10 1F 02 16 |  if_a	mov	local01, local02
1ca2c     0D 21 02 16 |  if_a	mov	local02, arg05
1ca30     00 1E 56 F2 | 	cmps	local01, #0 wc
1ca34     00 1E 06 C6 |  if_b	mov	local01, #0
1ca38     01 00 00 FF 
1ca3c     26 E4 05 F1 | 	add	objptr, ##550
1ca40     F2 1A 02 FB | 	rdlong	arg05, objptr
1ca44     01 00 00 FF 
1ca48     26 E4 85 F1 | 	sub	objptr, ##550
1ca4c     0D 21 52 F2 | 	cmps	local02, arg05 wc
1ca50     01 00 00 3F 
1ca54     26 E4 05 31 |  if_ae	add	objptr, ##550
1ca58     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1ca5c     01 00 00 3F 
1ca60     26 E4 85 31 |  if_ae	sub	objptr, ##550
1ca64     DD E4 05 F1 | 	add	objptr, #221
1ca68     F2 12 02 FB | 	rdlong	arg01, objptr
1ca6c     14 E4 05 F1 | 	add	objptr, #20
1ca70     F2 1A 02 FB | 	rdlong	arg05, objptr
1ca74     02 1A 66 F0 | 	shl	arg05, #2
1ca78     0B 1B 02 FD | 	qmul	arg05, arg03
1ca7c                 | ' if x1>x2
1ca7c                 | '   x1,x2:=x2,x1
1ca7c                 | ' if x1<0 
1ca7c                 | '   x1:=0
1ca7c                 | ' if x2>=xres
1ca7c                 | '   x2:=xres-1  
1ca7c     01 20 86 31 |  if_ae	sub	local02, #1
1ca80                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1ca80     01 16 06 F6 | 	mov	arg03, #1
1ca84     10 17 02 F1 | 	add	arg03, local02
1ca88     0F 17 82 F1 | 	sub	arg03, local01
1ca8c     0C 15 02 F6 | 	mov	arg02, arg04
1ca90     00 18 06 F6 | 	mov	arg04, #0
1ca94     01 1A 06 F6 | 	mov	arg05, #1
1ca98     0A 00 00 FF 
1ca9c     DB E5 05 F1 | 	add	objptr, ##5595
1caa0     18 20 62 FD | 	getqx	local02
1caa4     0F 21 02 F1 | 	add	local02, local01
1caa8     10 13 02 F1 | 	add	arg01, local02
1caac     D8 15 B0 FD | 	call	#_psram_spin2_fill
1cab0     0B 00 00 FF 
1cab4     CC E4 85 F1 | 	sub	objptr, ##5836
1cab8                 | LR__2230
1cab8     A7 F0 03 F6 | 	mov	ptra, fp
1cabc     B2 00 A0 FD | 	call	#popregs_
1cac0                 | _hg010b_spin2_fastline_ret
1cac0     2D 00 64 FD | 	ret
1cac4                 | 
1cac4                 | ' 
1cac4                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1cac4                 | _hg010b_spin2_draw
1cac4     0E 4A 05 F6 | 	mov	COUNT_, #14
1cac8     A8 00 A0 FD | 	call	#pushregs_
1cacc     09 1F 02 F6 | 	mov	local01, arg01
1cad0     0A 21 02 F6 | 	mov	local02, arg02
1cad4     0B 23 02 F6 | 	mov	local03, arg03
1cad8     0C 25 02 F6 | 	mov	local04, arg04
1cadc     0D 27 02 F6 | 	mov	local05, arg05
1cae0                 | ' 
1cae0                 | ' if (y1==y2)
1cae0     12 21 0A F2 | 	cmp	local02, local04 wz
1cae4     18 00 90 5D |  if_ne	jmp	#LR__2240
1cae8                 | '   fastline(x1,x2,y1,c)
1cae8     0F 13 02 F6 | 	mov	arg01, local01
1caec     11 15 02 F6 | 	mov	arg02, local03
1caf0     10 17 02 F6 | 	mov	arg03, local02
1caf4     13 19 02 F6 | 	mov	arg04, local05
1caf8     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1cafc     F8 00 90 FD | 	jmp	#LR__2246
1cb00                 | LR__2240
1cb00                 | ' else  
1cb00                 | '   x:=x1
1cb00     0F 29 02 F6 | 	mov	local06, local01
1cb04                 | '   y:=y1
1cb04     10 2B 02 F6 | 	mov	local07, local02
1cb08                 | ' 
1cb08                 | '   if (x1<x2) 
1cb08     11 1F 52 F2 | 	cmps	local01, local03 wc
1cb0c                 | '     xi:=1
1cb0c     01 2C 06 C6 |  if_b	mov	local08, #1
1cb10                 | '     dx:=x2-x1
1cb10     11 2F 02 C6 |  if_b	mov	local09, local03
1cb14     0F 2F 82 C1 |  if_b	sub	local09, local01
1cb18                 | '   else
1cb18                 | '     xi:=-1
1cb18     01 2C 66 36 |  if_ae	neg	local08, #1
1cb1c                 | '     dx:=x1-x2
1cb1c     11 1F 82 31 |  if_ae	sub	local01, local03
1cb20     0F 2F 02 36 |  if_ae	mov	local09, local01
1cb24                 | '   
1cb24                 | '   if (y1<y2) 
1cb24     12 21 52 F2 | 	cmps	local02, local04 wc
1cb28                 | '     yi:=1
1cb28     01 30 06 C6 |  if_b	mov	local10, #1
1cb2c                 | '     dy:=y2-y1
1cb2c     12 33 02 C6 |  if_b	mov	local11, local04
1cb30     10 33 82 C1 |  if_b	sub	local11, local02
1cb34                 | '   else
1cb34                 | '     yi:=-1
1cb34     01 30 66 36 |  if_ae	neg	local10, #1
1cb38                 | '     dy:=y1-y2
1cb38     12 21 82 31 |  if_ae	sub	local02, local04
1cb3c     10 33 02 36 |  if_ae	mov	local11, local02
1cb40                 | ' 
1cb40                 | '   putpixel(x,y,c)
1cb40     13 17 02 F6 | 	mov	arg03, local05
1cb44     14 13 02 F6 | 	mov	arg01, local06
1cb48     15 15 02 F6 | 	mov	arg02, local07
1cb4c     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1cb50                 | ' 
1cb50                 | '   if (dx>dy)
1cb50     19 2F 5A F2 | 	cmps	local09, local11 wcz
1cb54     50 00 90 ED |  if_be	jmp	#LR__2242
1cb58                 | '     ai:=(dy-dx)*2
1cb58     19 35 02 F6 | 	mov	local12, local11
1cb5c     17 35 82 F1 | 	sub	local12, local09
1cb60     01 34 66 F0 | 	shl	local12, #1
1cb64                 | '     bi:=dy*2
1cb64     01 32 66 F0 | 	shl	local11, #1
1cb68     19 37 02 F6 | 	mov	local13, local11
1cb6c                 | '     d:= bi-dx
1cb6c     1B 39 02 F6 | 	mov	local14, local13
1cb70     17 39 82 F1 | 	sub	local14, local09
1cb74                 | '     repeat while (x<>x2) 
1cb74                 | LR__2241
1cb74     11 29 0A F2 | 	cmp	local06, local03 wz
1cb78     7C 00 90 AD |  if_e	jmp	#LR__2245
1cb7c                 | '       if (d>=0) 
1cb7c     00 38 56 F2 | 	cmps	local14, #0 wc
1cb80                 | '         x+=xi
1cb80     16 29 02 31 |  if_ae	add	local06, local08
1cb84                 | '         y+=yi
1cb84     18 2B 02 31 |  if_ae	add	local07, local10
1cb88                 | '         d+=ai
1cb88     1A 39 02 31 |  if_ae	add	local14, local12
1cb8c                 | '       else
1cb8c                 | '         d+=bi
1cb8c     1B 39 02 C1 |  if_b	add	local14, local13
1cb90                 | '         x+=xi
1cb90     16 29 02 C1 |  if_b	add	local06, local08
1cb94                 | '       putpixel(x,y,c)
1cb94     14 13 02 F6 | 	mov	arg01, local06
1cb98     15 15 02 F6 | 	mov	arg02, local07
1cb9c     13 17 02 F6 | 	mov	arg03, local05
1cba0     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1cba4     CC FF 9F FD | 	jmp	#LR__2241
1cba8                 | LR__2242
1cba8                 | '   else
1cba8                 | '     ai:=(dx-dy)*2
1cba8     17 35 02 F6 | 	mov	local12, local09
1cbac     19 35 82 F1 | 	sub	local12, local11
1cbb0     01 34 66 F0 | 	shl	local12, #1
1cbb4                 | '     bi:=dx*2
1cbb4     01 2E 66 F0 | 	shl	local09, #1
1cbb8     17 37 02 F6 | 	mov	local13, local09
1cbbc                 | '     d:=bi-dy
1cbbc     1B 39 02 F6 | 	mov	local14, local13
1cbc0     19 39 82 F1 | 	sub	local14, local11
1cbc4                 | '     repeat while (y<>y2)
1cbc4                 | LR__2243
1cbc4     12 2B 0A F2 | 	cmp	local07, local04 wz
1cbc8     2C 00 90 AD |  if_e	jmp	#LR__2244
1cbcc                 | '       if (d>=0)
1cbcc     00 38 56 F2 | 	cmps	local14, #0 wc
1cbd0                 | '         x+=xi
1cbd0     16 29 02 31 |  if_ae	add	local06, local08
1cbd4                 | '         y+=yi
1cbd4     18 2B 02 31 |  if_ae	add	local07, local10
1cbd8                 | '         d+=ai
1cbd8     1A 39 02 31 |  if_ae	add	local14, local12
1cbdc                 | '       else
1cbdc                 | '         d+=bi
1cbdc     1B 39 02 C1 |  if_b	add	local14, local13
1cbe0                 | '         y+=yi
1cbe0     18 2B 02 C1 |  if_b	add	local07, local10
1cbe4                 | '       putpixel(x, y,c)
1cbe4     14 13 02 F6 | 	mov	arg01, local06
1cbe8     15 15 02 F6 | 	mov	arg02, local07
1cbec     13 17 02 F6 | 	mov	arg03, local05
1cbf0     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1cbf4     CC FF 9F FD | 	jmp	#LR__2243
1cbf8                 | LR__2244
1cbf8                 | LR__2245
1cbf8                 | LR__2246
1cbf8     A7 F0 03 F6 | 	mov	ptra, fp
1cbfc     B2 00 A0 FD | 	call	#popregs_
1cc00                 | _hg010b_spin2_draw_ret
1cc00     2D 00 64 FD | 	ret
1cc04                 | 
1cc04                 | '  
1cc04                 | ' pub fillpush(val) 
1cc04                 | _hg010b_spin2_fillpush
1cc04                 | ' fillstack[fillptr]:=val
1cc04     0B 00 00 FF 
1cc08     BA E4 05 F1 | 	add	objptr, ##5818
1cc0c     F2 00 02 FB | 	rdlong	_var01, objptr
1cc10     02 00 66 F0 | 	shl	_var01, #2
1cc14     0A 00 00 FF 
1cc18     00 E4 85 F1 | 	sub	objptr, ##5120
1cc1c     F2 00 02 F1 | 	add	_var01, objptr
1cc20     00 13 62 FC | 	wrlong	arg01, _var01
1cc24                 | ' fillptr+=1   
1cc24     0A 00 00 FF 
1cc28     00 E4 05 F1 | 	add	objptr, ##5120
1cc2c     F2 00 02 FB | 	rdlong	_var01, objptr
1cc30     01 00 06 F1 | 	add	_var01, #1
1cc34     F2 00 62 FC | 	wrlong	_var01, objptr
1cc38     0B 00 00 FF 
1cc3c     BA E4 85 F1 | 	sub	objptr, ##5818
1cc40                 | _hg010b_spin2_fillpush_ret
1cc40     2D 00 64 FD | 	ret
1cc44                 | 
1cc44                 | ' 
1cc44                 | '     
1cc44                 | ' pub fillpop() : val
1cc44                 | _hg010b_spin2_fillpop
1cc44                 | ' 
1cc44                 | ' fillptr-=1
1cc44     0B 00 00 FF 
1cc48     BA E4 05 F1 | 	add	objptr, ##5818
1cc4c     F2 FA 01 FB | 	rdlong	result1, objptr
1cc50     01 FA 85 F1 | 	sub	result1, #1
1cc54     F2 FA 61 FC | 	wrlong	result1, objptr
1cc58                 | ' if fillptr<0
1cc58     0B 00 00 FF 
1cc5c     BA E4 85 F1 | 	sub	objptr, ##5818
1cc60     00 FA 55 F2 | 	cmps	result1, #0 wc
1cc64                 | '   fillptr:=0
1cc64     0B 00 00 CF 
1cc68     BA E4 05 C1 |  if_b	add	objptr, ##5818
1cc6c     F2 00 68 CC |  if_b	wrlong	#0, objptr
1cc70     0B 00 00 CF 
1cc74     BA E4 85 C1 |  if_b	sub	objptr, ##5818
1cc78                 | '   val:=-12345
1cc78     E7 FF 7F CF 
1cc7c     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1cc80     28 00 90 CD |  if_b	jmp	#LR__2250
1cc84                 | ' else 
1cc84                 | '   val:=fillstack[fillptr]
1cc84     0B 00 00 FF 
1cc88     BA E4 05 F1 | 	add	objptr, ##5818
1cc8c     F2 00 02 FB | 	rdlong	_var01, objptr
1cc90     02 00 66 F0 | 	shl	_var01, #2
1cc94     0A 00 00 FF 
1cc98     00 E4 85 F1 | 	sub	objptr, ##5120
1cc9c     F2 00 02 F1 | 	add	_var01, objptr
1cca0     00 01 02 FB | 	rdlong	_var01, _var01
1cca4     01 00 00 FF 
1cca8     BA E4 85 F1 | 	sub	objptr, ##698
1ccac                 | LR__2250
1ccac                 | ' return val
1ccac     00 FB 01 F6 | 	mov	result1, _var01
1ccb0                 | _hg010b_spin2_fillpop_ret
1ccb0     2D 00 64 FD | 	ret
1ccb4                 | 
1ccb4                 | ' 
1ccb4                 | '       
1ccb4                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1ccb4                 | _hg010b_spin2_fill
1ccb4     0B 4A 05 F6 | 	mov	COUNT_, #11
1ccb8     A8 00 A0 FD | 	call	#pushregs_
1ccbc                 | ' 
1ccbc                 | ' newcolor:=newcolor & 255
1ccbc     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1ccc0                 | ' oldcolor:=oldcolor & 255
1ccc0     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1ccc4                 | ' 
1ccc4                 | ' if (oldcolor == newcolor) 
1ccc4     0F 21 0A F2 | 	cmp	local02, local01 wz
1ccc8                 | '   return
1ccc8     70 02 90 AD |  if_e	jmp	#LR__2269
1cccc                 | ' 
1cccc                 | ' fillptr:=0
1cccc     0B 00 00 FF 
1ccd0     BA E4 05 F1 | 	add	objptr, ##5818
1ccd4     F2 00 68 FC | 	wrlong	#0, objptr
1ccd8                 | ' fillmax:=0
1ccd8     04 E4 05 F1 | 	add	objptr, #4
1ccdc     F2 00 68 FC | 	wrlong	#0, objptr
1cce0     0B 00 00 FF 
1cce4     BE E4 85 F1 | 	sub	objptr, ##5822
1cce8                 | ' fillpush(x)
1cce8     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1ccec                 | ' fillpush(y)
1ccec     0A 13 02 F6 | 	mov	arg01, arg02
1ccf0     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1ccf4                 | ' y:=fillpop()
1ccf4     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1ccf8     FD 22 02 F6 | 	mov	local03, result1
1ccfc                 | ' x:=fillpop()
1ccfc     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1cd00     FD 24 02 F6 | 	mov	local04, result1
1cd04                 | ' 'pinhigh(38)
1cd04                 | ' repeat while (x>-1)       
1cd04                 | LR__2260
1cd04     00 24 56 F2 | 	cmps	local04, #0 wc
1cd08     30 02 90 CD |  if_b	jmp	#LR__2268
1cd0c                 | '  ' pintoggle(39)
1cd0c                 | '   x1 := x
1cd0c     12 27 02 F6 | 	mov	local05, local04
1cd10                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1cd10                 | LR__2261
1cd10     00 28 06 F6 | 	mov	local06, #0
1cd14     00 2A 06 F6 | 	mov	local07, #0
1cd18     00 26 56 F2 | 	cmps	local05, #0 wc
1cd1c     01 2A 66 36 |  if_ae	neg	local07, #1
1cd20     00 2A 0E F2 | 	cmp	local07, #0 wz
1cd24     00 28 26 56 |  if_ne	not	local06, #0
1cd28     00 2C 06 F6 | 	mov	local08, #0
1cd2c     00 2E 06 F6 | 	mov	local09, #0
1cd30     11 15 02 F6 | 	mov	arg02, local03
1cd34     13 13 02 F6 | 	mov	arg01, local05
1cd38     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1cd3c     10 FB 09 F2 | 	cmp	result1, local02 wz
1cd40     00 2E 26 A6 |  if_e	not	local09, #0
1cd44     00 2E 0E F2 | 	cmp	local09, #0 wz
1cd48     00 2C 26 56 |  if_ne	not	local08, #0
1cd4c     16 29 CA F7 | 	test	local06, local08 wz
1cd50                 | '     x1--
1cd50     01 26 86 51 |  if_ne	sub	local05, #1
1cd54     B8 FF 9F 5D |  if_ne	jmp	#LR__2261
1cd58                 | '   x1++
1cd58     01 26 06 F1 | 	add	local05, #1
1cd5c                 | '   spanabove := 0
1cd5c     00 30 06 F6 | 	mov	local10, #0
1cd60                 | '   spanbelow := 0
1cd60     00 32 06 F6 | 	mov	local11, #0
1cd64                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1cd64                 | LR__2262
1cd64     00 28 06 F6 | 	mov	local06, #0
1cd68     02 00 00 FF 
1cd6c     00 26 56 F2 | 	cmps	local05, ##1024 wc
1cd70     00 28 26 C6 |  if_b	not	local06, #0
1cd74     00 2C 06 F6 | 	mov	local08, #0
1cd78     00 2E 06 F6 | 	mov	local09, #0
1cd7c     11 15 02 F6 | 	mov	arg02, local03
1cd80     13 13 02 F6 | 	mov	arg01, local05
1cd84     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1cd88     10 FB 09 F2 | 	cmp	result1, local02 wz
1cd8c     00 2E 26 A6 |  if_e	not	local09, #0
1cd90     00 2E 0E F2 | 	cmp	local09, #0 wz
1cd94     00 2C 26 56 |  if_ne	not	local08, #0
1cd98     16 29 CA F7 | 	test	local06, local08 wz
1cd9c     88 01 90 AD |  if_e	jmp	#LR__2267
1cda0                 | '     putpixel2 (x1,y, newcolor & 255)
1cda0     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1cda4     13 13 02 F6 | 	mov	arg01, local05
1cda8     11 15 02 F6 | 	mov	arg02, local03
1cdac     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1cdb0                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1cdb0     00 28 06 F6 | 	mov	local06, #0
1cdb4     00 2A 06 F6 | 	mov	local07, #0
1cdb8     00 30 0E F2 | 	cmp	local10, #0 wz
1cdbc     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1cdc0     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1cdc4     00 2A 0E F2 | 	cmp	local07, #0 wz
1cdc8     00 28 26 56 |  if_ne	not	local06, #0
1cdcc     00 2C 06 F6 | 	mov	local08, #0
1cdd0     00 2E 06 F6 | 	mov	local09, #0
1cdd4     11 15 02 F6 | 	mov	arg02, local03
1cdd8     01 14 86 F1 | 	sub	arg02, #1
1cddc     13 13 02 F6 | 	mov	arg01, local05
1cde0     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1cde4     10 FB 09 F2 | 	cmp	result1, local02 wz
1cde8     00 2E 26 A6 |  if_e	not	local09, #0
1cdec     00 2E 0E F2 | 	cmp	local09, #0 wz
1cdf0     00 2C 26 56 |  if_ne	not	local08, #0
1cdf4     16 29 CA F7 | 	test	local06, local08 wz
1cdf8     1C 00 90 AD |  if_e	jmp	#LR__2263
1cdfc                 | '       fillpush(x1)
1cdfc     13 13 02 F6 | 	mov	arg01, local05
1ce00     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1ce04                 | '       fillpush(y-1)
1ce04     11 13 02 F6 | 	mov	arg01, local03
1ce08     01 12 86 F1 | 	sub	arg01, #1
1ce0c     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1ce10                 | '       spanabove := 1 
1ce10     01 30 06 F6 | 	mov	local10, #1
1ce14     4C 00 90 FD | 	jmp	#LR__2264
1ce18                 | LR__2263
1ce18                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1ce18     00 28 06 F6 | 	mov	local06, #0
1ce1c     00 2A 06 F6 | 	mov	local07, #0
1ce20     00 30 0E F2 | 	cmp	local10, #0 wz
1ce24     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1ce28     01 2A 66 16 |  if_a	neg	local07, #1
1ce2c     00 2A 0E F2 | 	cmp	local07, #0 wz
1ce30     00 28 26 56 |  if_ne	not	local06, #0
1ce34     00 2C 06 F6 | 	mov	local08, #0
1ce38     00 2E 06 F6 | 	mov	local09, #0
1ce3c     11 15 02 F6 | 	mov	arg02, local03
1ce40     01 14 86 F1 | 	sub	arg02, #1
1ce44     13 13 02 F6 | 	mov	arg01, local05
1ce48     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1ce4c     10 FB 09 F2 | 	cmp	result1, local02 wz
1ce50     00 2E 26 56 |  if_ne	not	local09, #0
1ce54     00 2E 0E F2 | 	cmp	local09, #0 wz
1ce58     00 2C 26 56 |  if_ne	not	local08, #0
1ce5c     16 29 CA F7 | 	test	local06, local08 wz
1ce60                 | '       spanabove := 0 
1ce60     00 30 06 56 |  if_ne	mov	local10, #0
1ce64                 | LR__2264
1ce64                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1ce64     00 28 06 F6 | 	mov	local06, #0
1ce68     00 2A 06 F6 | 	mov	local07, #0
1ce6c     00 32 0E F2 | 	cmp	local11, #0 wz
1ce70     01 00 00 AF 
1ce74     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1ce78     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1ce7c     00 2A 0E F2 | 	cmp	local07, #0 wz
1ce80     00 28 26 56 |  if_ne	not	local06, #0
1ce84     00 2C 06 F6 | 	mov	local08, #0
1ce88     00 2E 06 F6 | 	mov	local09, #0
1ce8c     11 15 02 F6 | 	mov	arg02, local03
1ce90     01 14 06 F1 | 	add	arg02, #1
1ce94     13 13 02 F6 | 	mov	arg01, local05
1ce98     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1ce9c     10 FB 09 F2 | 	cmp	result1, local02 wz
1cea0     00 2E 26 A6 |  if_e	not	local09, #0
1cea4     00 2E 0E F2 | 	cmp	local09, #0 wz
1cea8     00 2C 26 56 |  if_ne	not	local08, #0
1ceac     16 29 CA F7 | 	test	local06, local08 wz
1ceb0     1C 00 90 AD |  if_e	jmp	#LR__2265
1ceb4                 | '       fillpush(x1)
1ceb4     13 13 02 F6 | 	mov	arg01, local05
1ceb8     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1cebc                 | '       fillpush(y + 1)
1cebc     11 13 02 F6 | 	mov	arg01, local03
1cec0     01 12 06 F1 | 	add	arg01, #1
1cec4     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1cec8                 | '       spanBelow := 1
1cec8     01 32 06 F6 | 	mov	local11, #1
1cecc     50 00 90 FD | 	jmp	#LR__2266
1ced0                 | LR__2265
1ced0                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1ced0     00 28 06 F6 | 	mov	local06, #0
1ced4     00 2A 06 F6 | 	mov	local07, #0
1ced8     00 32 0E F2 | 	cmp	local11, #0 wz
1cedc     01 00 00 5F 
1cee0     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1cee4     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1cee8     00 2A 0E F2 | 	cmp	local07, #0 wz
1ceec     00 28 26 56 |  if_ne	not	local06, #0
1cef0     00 2C 06 F6 | 	mov	local08, #0
1cef4     00 2E 06 F6 | 	mov	local09, #0
1cef8     11 15 02 F6 | 	mov	arg02, local03
1cefc     01 14 06 F1 | 	add	arg02, #1
1cf00     13 13 02 F6 | 	mov	arg01, local05
1cf04     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1cf08     10 FB 09 F2 | 	cmp	result1, local02 wz
1cf0c     00 2E 26 56 |  if_ne	not	local09, #0
1cf10     00 2E 0E F2 | 	cmp	local09, #0 wz
1cf14     00 2C 26 56 |  if_ne	not	local08, #0
1cf18     16 29 CA F7 | 	test	local06, local08 wz
1cf1c                 | '       spanbelow := 0
1cf1c     00 32 06 56 |  if_ne	mov	local11, #0
1cf20                 | LR__2266
1cf20                 | '     x1++
1cf20     01 26 06 F1 | 	add	local05, #1
1cf24     3C FE 9F FD | 	jmp	#LR__2262
1cf28                 | LR__2267
1cf28                 | '   y:=fillpop()
1cf28     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1cf2c     FD 22 02 F6 | 	mov	local03, result1
1cf30                 | '   x:=fillpop()
1cf30     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1cf34     FD 24 02 F6 | 	mov	local04, result1
1cf38     C8 FD 9F FD | 	jmp	#LR__2260
1cf3c                 | LR__2268
1cf3c                 | LR__2269
1cf3c     A7 F0 03 F6 | 	mov	ptra, fp
1cf40     B2 00 A0 FD | 	call	#popregs_
1cf44                 | _hg010b_spin2_fill_ret
1cf44     2D 00 64 FD | 	ret
1cf48                 | 
1cf48                 | ' 'pinlow(38)    
1cf48                 | ' 
1cf48                 | ' '-- A filled circle -----------------------------------------------------
1cf48                 | ' 
1cf48                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1cf48                 | _hg010b_spin2_fcircle
1cf48     08 4A 05 F6 | 	mov	COUNT_, #8
1cf4c     A8 00 A0 FD | 	call	#pushregs_
1cf50     0B 1F 02 F6 | 	mov	local01, arg03
1cf54     FF FF 7F FF 
1cf58     FE 1F 06 FD | 	qmul	local01, ##-2
1cf5c     09 21 02 F6 | 	mov	local02, arg01
1cf60     0A 23 02 F6 | 	mov	local03, arg02
1cf64     0C 25 02 F6 | 	mov	local04, arg04
1cf68                 | ' 
1cf68                 | ' d:=5-4*r
1cf68     0F 19 02 F6 | 	mov	arg04, local01
1cf6c     02 18 66 F0 | 	shl	arg04, #2
1cf70     05 26 06 F6 | 	mov	local05, #5
1cf74     0C 27 82 F1 | 	sub	local05, arg04
1cf78                 | ' x:=0
1cf78     00 28 06 F6 | 	mov	local06, #0
1cf7c                 | ' y:=r
1cf7c                 | ' da:=(-2*r+5)*4
1cf7c                 | ' db:=3*4
1cf7c     0C 2A 06 F6 | 	mov	local07, #12
1cf80                 | ' repeat while (x<=y) 
1cf80     18 2C 62 FD | 	getqx	local08
1cf84     05 2C 06 F1 | 	add	local08, #5
1cf88     02 2C 66 F0 | 	shl	local08, #2
1cf8c                 | LR__2270
1cf8c     0F 29 5A F2 | 	cmps	local06, local01 wcz
1cf90     B4 00 90 1D |  if_a	jmp	#LR__2272
1cf94                 | '   fastline(x0-x,x0+x,y0-y,c)
1cf94     10 13 02 F6 | 	mov	arg01, local02
1cf98     14 13 82 F1 | 	sub	arg01, local06
1cf9c     10 15 02 F6 | 	mov	arg02, local02
1cfa0     14 15 02 F1 | 	add	arg02, local06
1cfa4     11 17 02 F6 | 	mov	arg03, local03
1cfa8     0F 17 82 F1 | 	sub	arg03, local01
1cfac     12 19 02 F6 | 	mov	arg04, local04
1cfb0     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1cfb4                 | '   fastline(x0-x,x0+x,y0+y,c)
1cfb4     10 13 02 F6 | 	mov	arg01, local02
1cfb8     14 13 82 F1 | 	sub	arg01, local06
1cfbc     10 15 02 F6 | 	mov	arg02, local02
1cfc0     14 15 02 F1 | 	add	arg02, local06
1cfc4     11 17 02 F6 | 	mov	arg03, local03
1cfc8     0F 17 02 F1 | 	add	arg03, local01
1cfcc     12 19 02 F6 | 	mov	arg04, local04
1cfd0     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1cfd4                 | '   fastline(x0-y,x0+y,y0-x,c)
1cfd4     10 13 02 F6 | 	mov	arg01, local02
1cfd8     0F 13 82 F1 | 	sub	arg01, local01
1cfdc     10 15 02 F6 | 	mov	arg02, local02
1cfe0     0F 15 02 F1 | 	add	arg02, local01
1cfe4     11 17 02 F6 | 	mov	arg03, local03
1cfe8     14 17 82 F1 | 	sub	arg03, local06
1cfec     12 19 02 F6 | 	mov	arg04, local04
1cff0     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1cff4                 | '   fastline(x0-y,x0+y,y0+x,c)
1cff4     10 13 02 F6 | 	mov	arg01, local02
1cff8     0F 13 82 F1 | 	sub	arg01, local01
1cffc     10 15 02 F6 | 	mov	arg02, local02
1d000     0F 15 02 F1 | 	add	arg02, local01
1d004     11 17 02 F6 | 	mov	arg03, local03
1d008     14 17 02 F1 | 	add	arg03, local06
1d00c     12 19 02 F6 | 	mov	arg04, local04
1d010     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1d014                 | '   if d>0 
1d014     01 26 56 F2 | 	cmps	local05, #1 wc
1d018     18 00 90 CD |  if_b	jmp	#LR__2271
1d01c                 | '     d+=da
1d01c     16 27 02 F1 | 	add	local05, local08
1d020                 | '     y-=1
1d020     01 1E 86 F1 | 	sub	local01, #1
1d024                 | '     x+=1
1d024     01 28 06 F1 | 	add	local06, #1
1d028                 | '     da+=4*4
1d028     10 2C 06 F1 | 	add	local08, #16
1d02c                 | '     db+=2*4
1d02c     08 2A 06 F1 | 	add	local07, #8
1d030     58 FF 9F FD | 	jmp	#LR__2270
1d034                 | LR__2271
1d034                 | '   else
1d034                 | '     d+=db
1d034     15 27 02 F1 | 	add	local05, local07
1d038                 | '     x+=1
1d038     01 28 06 F1 | 	add	local06, #1
1d03c                 | '     da+=2*4
1d03c     08 2C 06 F1 | 	add	local08, #8
1d040                 | '     db+=2*4
1d040     08 2A 06 F1 | 	add	local07, #8
1d044     44 FF 9F FD | 	jmp	#LR__2270
1d048                 | LR__2272
1d048     A7 F0 03 F6 | 	mov	ptra, fp
1d04c     B2 00 A0 FD | 	call	#popregs_
1d050                 | _hg010b_spin2_fcircle_ret
1d050     2D 00 64 FD | 	ret
1d054                 | 
1d054                 | '  
1d054                 | ' '-- A circle ------------------------------------------------------------ 
1d054                 | '  
1d054                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1d054                 | _hg010b_spin2_circle
1d054     08 4A 05 F6 | 	mov	COUNT_, #8
1d058     A8 00 A0 FD | 	call	#pushregs_
1d05c     0B 1F 02 F6 | 	mov	local01, arg03
1d060     FF FF 7F FF 
1d064     FE 1F 06 FD | 	qmul	local01, ##-2
1d068     09 21 02 F6 | 	mov	local02, arg01
1d06c     0A 23 02 F6 | 	mov	local03, arg02
1d070     0C 25 02 F6 | 	mov	local04, arg04
1d074                 | ' 
1d074                 | '  
1d074                 | ' d:=5-4*r
1d074     0F 19 02 F6 | 	mov	arg04, local01
1d078     02 18 66 F0 | 	shl	arg04, #2
1d07c     05 26 06 F6 | 	mov	local05, #5
1d080     0C 27 82 F1 | 	sub	local05, arg04
1d084                 | ' x:=0
1d084     00 28 06 F6 | 	mov	local06, #0
1d088                 | ' y:=r
1d088                 | ' da:=(-2*r+5)*4
1d088                 | ' db:=3*4
1d088     0C 2A 06 F6 | 	mov	local07, #12
1d08c                 | ' repeat while (x<=y) 
1d08c     18 2C 62 FD | 	getqx	local08
1d090     05 2C 06 F1 | 	add	local08, #5
1d094     02 2C 66 F0 | 	shl	local08, #2
1d098                 | LR__2280
1d098     0F 29 5A F2 | 	cmps	local06, local01 wcz
1d09c     F4 00 90 1D |  if_a	jmp	#LR__2282
1d0a0                 | '   putpixel(x0-x,y0-y,c)
1d0a0     10 13 02 F6 | 	mov	arg01, local02
1d0a4     14 13 82 F1 | 	sub	arg01, local06
1d0a8     11 15 02 F6 | 	mov	arg02, local03
1d0ac     0F 15 82 F1 | 	sub	arg02, local01
1d0b0     12 17 02 F6 | 	mov	arg03, local04
1d0b4     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1d0b8                 | '   putpixel(x0-x,y0+y,c)
1d0b8     10 13 02 F6 | 	mov	arg01, local02
1d0bc     14 13 82 F1 | 	sub	arg01, local06
1d0c0     11 15 02 F6 | 	mov	arg02, local03
1d0c4     0F 15 02 F1 | 	add	arg02, local01
1d0c8     12 17 02 F6 | 	mov	arg03, local04
1d0cc     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1d0d0                 | '   putpixel(x0+x,y0-y,c)
1d0d0     10 13 02 F6 | 	mov	arg01, local02
1d0d4     14 13 02 F1 | 	add	arg01, local06
1d0d8     11 15 02 F6 | 	mov	arg02, local03
1d0dc     0F 15 82 F1 | 	sub	arg02, local01
1d0e0     12 17 02 F6 | 	mov	arg03, local04
1d0e4     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1d0e8                 | '   putpixel(x0+x,y0+y,c)
1d0e8     10 13 02 F6 | 	mov	arg01, local02
1d0ec     14 13 02 F1 | 	add	arg01, local06
1d0f0     11 15 02 F6 | 	mov	arg02, local03
1d0f4     0F 15 02 F1 | 	add	arg02, local01
1d0f8     12 17 02 F6 | 	mov	arg03, local04
1d0fc     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1d100                 | '   putpixel(x0-y,y0-x,c)
1d100     10 13 02 F6 | 	mov	arg01, local02
1d104     0F 13 82 F1 | 	sub	arg01, local01
1d108     11 15 02 F6 | 	mov	arg02, local03
1d10c     14 15 82 F1 | 	sub	arg02, local06
1d110     12 17 02 F6 | 	mov	arg03, local04
1d114     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1d118                 | '   putpixel(x0-y,y0+x,c)
1d118     10 13 02 F6 | 	mov	arg01, local02
1d11c     0F 13 82 F1 | 	sub	arg01, local01
1d120     11 15 02 F6 | 	mov	arg02, local03
1d124     14 15 02 F1 | 	add	arg02, local06
1d128     12 17 02 F6 | 	mov	arg03, local04
1d12c     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1d130                 | '   putpixel(x0+y,y0-x,c)
1d130     10 13 02 F6 | 	mov	arg01, local02
1d134     0F 13 02 F1 | 	add	arg01, local01
1d138     11 15 02 F6 | 	mov	arg02, local03
1d13c     14 15 82 F1 | 	sub	arg02, local06
1d140     12 17 02 F6 | 	mov	arg03, local04
1d144     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1d148                 | '   putpixel(x0+y,y0+x,c)
1d148     10 13 02 F6 | 	mov	arg01, local02
1d14c     0F 13 02 F1 | 	add	arg01, local01
1d150     11 15 02 F6 | 	mov	arg02, local03
1d154     14 15 02 F1 | 	add	arg02, local06
1d158     12 17 02 F6 | 	mov	arg03, local04
1d15c     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1d160                 | '   if d>0 
1d160     01 26 56 F2 | 	cmps	local05, #1 wc
1d164     18 00 90 CD |  if_b	jmp	#LR__2281
1d168                 | '     d+=da
1d168     16 27 02 F1 | 	add	local05, local08
1d16c                 | '     y-=1
1d16c     01 1E 86 F1 | 	sub	local01, #1
1d170                 | '     x+=1
1d170     01 28 06 F1 | 	add	local06, #1
1d174                 | '     da+=4*4
1d174     10 2C 06 F1 | 	add	local08, #16
1d178                 | '     db+=2*4
1d178     08 2A 06 F1 | 	add	local07, #8
1d17c     18 FF 9F FD | 	jmp	#LR__2280
1d180                 | LR__2281
1d180                 | '   else
1d180                 | '     d+=db
1d180     15 27 02 F1 | 	add	local05, local07
1d184                 | '     x+=1
1d184     01 28 06 F1 | 	add	local06, #1
1d188                 | '     da+=2*4
1d188     08 2C 06 F1 | 	add	local08, #8
1d18c                 | '     db+=2*4
1d18c     08 2A 06 F1 | 	add	local07, #8
1d190     04 FF 9F FD | 	jmp	#LR__2280
1d194                 | LR__2282
1d194     A7 F0 03 F6 | 	mov	ptra, fp
1d198     B2 00 A0 FD | 	call	#popregs_
1d19c                 | _hg010b_spin2_circle_ret
1d19c     2D 00 64 FD | 	ret
1d1a0                 | 
1d1a0                 | '     
1d1a0                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1d1a0                 | ' 
1d1a0                 | ' pub frame(x1,y1,x2,y2,c)
1d1a0                 | _hg010b_spin2_frame
1d1a0     05 4A 05 F6 | 	mov	COUNT_, #5
1d1a4     A8 00 A0 FD | 	call	#pushregs_
1d1a8     09 1F 02 F6 | 	mov	local01, arg01
1d1ac     0A 21 02 F6 | 	mov	local02, arg02
1d1b0     0B 23 02 F6 | 	mov	local03, arg03
1d1b4     0C 25 02 F6 | 	mov	local04, arg04
1d1b8     0D 27 02 F6 | 	mov	local05, arg05
1d1bc                 | ' 
1d1bc                 | ' fastline(x1,x2,y1,c)
1d1bc     0F 13 02 F6 | 	mov	arg01, local01
1d1c0     11 15 02 F6 | 	mov	arg02, local03
1d1c4     10 17 02 F6 | 	mov	arg03, local02
1d1c8     13 19 02 F6 | 	mov	arg04, local05
1d1cc     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1d1d0                 | ' fastline(x1,x2,y2,c)
1d1d0     0F 13 02 F6 | 	mov	arg01, local01
1d1d4     11 15 02 F6 | 	mov	arg02, local03
1d1d8     12 17 02 F6 | 	mov	arg03, local04
1d1dc     13 19 02 F6 | 	mov	arg04, local05
1d1e0     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1d1e4                 | ' line(x1,y1,x1,y2,c)
1d1e4     0F 13 02 F6 | 	mov	arg01, local01
1d1e8     10 15 02 F6 | 	mov	arg02, local02
1d1ec     0F 17 02 F6 | 	mov	arg03, local01
1d1f0     12 19 02 F6 | 	mov	arg04, local04
1d1f4     13 1B 02 F6 | 	mov	arg05, local05
1d1f8                 | ' draw(x1,y1,x2,y2,c)
1d1f8     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1d1fc                 | ' line(x2,y1,x2,y2,c)
1d1fc     11 13 02 F6 | 	mov	arg01, local03
1d200     10 15 02 F6 | 	mov	arg02, local02
1d204     11 17 02 F6 | 	mov	arg03, local03
1d208     12 19 02 F6 | 	mov	arg04, local04
1d20c     13 1B 02 F6 | 	mov	arg05, local05
1d210                 | ' draw(x1,y1,x2,y2,c)
1d210     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1d214     A7 F0 03 F6 | 	mov	ptra, fp
1d218     B2 00 A0 FD | 	call	#popregs_
1d21c                 | _hg010b_spin2_frame_ret
1d21c     2D 00 64 FD | 	ret
1d220                 | 
1d220                 | ' 
1d220                 | ' '-- A box (a filled rectangle) ----------------------------------------
1d220                 | ' 
1d220                 | ' pub box(x1,y1,x2,y2,c) |yy
1d220                 | _hg010b_spin2_box
1d220     06 4A 05 F6 | 	mov	COUNT_, #6
1d224     A8 00 A0 FD | 	call	#pushregs_
1d228     09 1F 02 F6 | 	mov	local01, arg01
1d22c     0A 21 02 F6 | 	mov	local02, arg02
1d230     0B 23 02 F6 | 	mov	local03, arg03
1d234     0C 25 02 F6 | 	mov	local04, arg04
1d238     0D 27 02 F6 | 	mov	local05, arg05
1d23c                 | ' 
1d23c                 | ' repeat yy from y1 to y2
1d23c     10 25 52 F2 | 	cmps	local04, local02 wc
1d240     01 28 86 F6 | 	negc	local06, #1
1d244     14 25 02 F1 | 	add	local04, local06
1d248                 | LR__2290
1d248                 | '   fastline(x1,x2,yy,c)
1d248     0F 13 02 F6 | 	mov	arg01, local01
1d24c     11 15 02 F6 | 	mov	arg02, local03
1d250     13 19 02 F6 | 	mov	arg04, local05
1d254     10 17 02 F6 | 	mov	arg03, local02
1d258     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1d25c     14 21 02 F1 | 	add	local02, local06
1d260     12 21 0A F2 | 	cmp	local02, local04 wz
1d264     E0 FF 9F 5D |  if_ne	jmp	#LR__2290
1d268     A7 F0 03 F6 | 	mov	ptra, fp
1d26c     B2 00 A0 FD | 	call	#popregs_
1d270                 | _hg010b_spin2_box_ret
1d270     2D 00 64 FD | 	ret
1d274                 | 
1d274                 | '       
1d274                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1d274                 | _hg010b_spin2_putcharxycgf
1d274                 | ' 
1d274                 | '  
1d274                 | ' repeat yy from 0 to 15
1d274     00 00 06 F6 | 	mov	_var01, #0
1d278     97 8C 48 FB | 	callpa	#(@LR__2302-@LR__2300)>>2,fcache_load_ptr_
1d27c                 | LR__2300
1d27c                 | ' 
1d27c                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1d27c     95 E4 05 F1 | 	add	objptr, #149
1d280     F2 02 02 FB | 	rdlong	_var02, objptr
1d284     0A 02 66 F0 | 	shl	_var02, #10
1d288     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1d28c     01 05 02 F1 | 	add	_var03, _var02
1d290     0B 03 02 F6 | 	mov	_var02, arg03
1d294     04 02 66 F0 | 	shl	_var02, #4
1d298     01 05 02 F1 | 	add	_var03, _var02
1d29c     00 05 02 F1 | 	add	_var03, _var01
1d2a0     02 05 C2 FA | 	rdbyte	_var03, _var03
1d2a4                 | '   asm
1d2a4     00 04 0E F4 | 	testb	_var03, #0 wz
1d2a8     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1d2ac     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1d2b0     01 04 0E F4 | 	testb	_var03, #1 wz
1d2b4     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1d2b8     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1d2bc     02 04 0E F4 | 	testb	_var03, #2 wz
1d2c0     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1d2c4     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1d2c8     03 04 0E F4 | 	testb	_var03, #3 wz
1d2cc     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1d2d0     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1d2d4     04 04 0E F4 | 	testb	_var03, #4 wz
1d2d8     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1d2dc     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1d2e0     05 04 0E F4 | 	testb	_var03, #5 wz
1d2e4     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1d2e8     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1d2ec     06 04 0E F4 | 	testb	_var03, #6 wz
1d2f0     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1d2f4     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1d2f8     07 04 0E F4 | 	testb	_var03, #7 wz
1d2fc     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1d300     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1d304                 | '   
1d304                 | '   ccc[0]:=c1
1d304     99 E5 05 F1 | 	add	objptr, #409
1d308     F2 06 62 FC | 	wrlong	_var04, objptr
1d30c                 | '   ccc[1]:=c2 
1d30c     04 E4 05 F1 | 	add	objptr, #4
1d310     F2 08 62 FC | 	wrlong	_var05, objptr
1d314                 | '   long[mailbox0][2]:=8
1d314     49 E4 85 F1 | 	sub	objptr, #73
1d318     F2 04 02 FB | 	rdlong	_var03, objptr
1d31c     08 04 06 F1 | 	add	_var03, #8
1d320     02 11 68 FC | 	wrlong	#8, _var03
1d324                 | '   long[mailbox0][1]:=@ccc
1d324     45 E4 05 F1 | 	add	objptr, #69
1d328     F2 04 02 F6 | 	mov	_var03, objptr
1d32c     45 E4 85 F1 | 	sub	objptr, #69
1d330     F2 02 02 FB | 	rdlong	_var02, objptr
1d334     04 02 06 F1 | 	add	_var02, #4
1d338     01 05 62 FC | 	wrlong	_var03, _var02
1d33c                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1d33c     0C E5 85 F1 | 	sub	objptr, #268
1d340     F2 04 02 FB | 	rdlong	_var03, objptr
1d344     0A 03 02 F6 | 	mov	_var02, arg02
1d348     00 03 02 F1 | 	add	_var02, _var01
1d34c     0A 02 66 F0 | 	shl	_var02, #10
1d350     09 0B 02 F6 | 	mov	_var06, arg01
1d354     02 0A 66 F0 | 	shl	_var06, #2
1d358     05 03 02 F1 | 	add	_var02, _var06
1d35c     01 05 02 F1 | 	add	_var03, _var02
1d360     00 00 78 FF 
1d364     00 04 06 F1 | 	add	_var03, ##-268435456
1d368     0C E5 05 F1 | 	add	objptr, #268
1d36c     F2 0A 02 FB | 	rdlong	_var06, objptr
1d370     05 05 62 FC | 	wrlong	_var03, _var06
1d374                 | '   repeat
1d374                 | LR__2301
1d374     F2 04 02 FB | 	rdlong	_var03, objptr
1d378     02 03 02 FB | 	rdlong	_var02, _var03
1d37c     00 02 56 F2 | 	cmps	_var02, #0 wc
1d380     F0 FF 9F CD |  if_b	jmp	#LR__2301
1d384     E9 E5 85 F1 | 	sub	objptr, #489
1d388     01 00 06 F1 | 	add	_var01, #1
1d38c     10 00 56 F2 | 	cmps	_var01, #16 wc
1d390     E8 FE 9F CD |  if_b	jmp	#LR__2300
1d394                 | LR__2302
1d394                 | _hg010b_spin2_putcharxycgf_ret
1d394     2D 00 64 FD | 	ret
1d398                 | 
1d398                 | ' 
1d398                 | ' 
1d398                 | ' '**********************************************************************r***
1d398                 | ' '                                                                        *
1d398                 | ' ' Font related functions                                                 *
1d398                 | ' '                                                                        *
1d398                 | ' '*************************************************************************
1d398                 | ' 
1d398                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1d398                 | ' 
1d398                 | ' pub setfontfamily(afontnum)
1d398                 | _hg010b_spin2_setfontfamily
1d398                 | ' 
1d398                 | ' font_family:=afontnum
1d398     95 E4 05 F1 | 	add	objptr, #149
1d39c     F2 12 62 FC | 	wrlong	arg01, objptr
1d3a0     95 E4 85 F1 | 	sub	objptr, #149
1d3a4                 | ' 'if afontnum==8
1d3a4                 | ' '  font_ptr:=@amiga_font
1d3a4                 | ' 
1d3a4                 | ' if afontnum==4
1d3a4     04 12 0E F2 | 	cmp	arg01, #4 wz
1d3a8                 | '   font_ptr:=@st_font
1d3a8     08 00 00 AF 
1d3ac     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1d3b0     08 E4 05 A1 |  if_e	add	objptr, #8
1d3b4     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1d3b8     08 E4 85 A1 |  if_e	sub	objptr, #8
1d3bc     08 00 00 AF 
1d3c0     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1d3c4                 | ' if afontnum==0
1d3c4     00 12 0E F2 | 	cmp	arg01, #0 wz
1d3c8                 | '   font_ptr:=@vga_font
1d3c8     08 E4 05 A1 |  if_e	add	objptr, #8
1d3cc     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1d3d0     08 E4 85 A1 |  if_e	sub	objptr, #8
1d3d4                 | _hg010b_spin2_setfontfamily_ret
1d3d4     2D 00 64 FD | 	ret
1d3d8                 | 
1d3d8                 | ' 
1d3d8                 | ' '*************************************************************************
1d3d8                 | ' '                                                                        *
1d3d8                 | ' '  Cursor functions                                                      *
1d3d8                 | ' '                                                                        *
1d3d8                 | ' '*************************************************************************
1d3d8                 | ' 
1d3d8                 | ' 
1d3d8                 | ' pub setcursorpos(x,y)
1d3d8                 | _hg010b_spin2_setcursorpos
1d3d8                 | ' 
1d3d8                 | ' ''---------- Set the (x,y) position of cursor
1d3d8                 | ' 
1d3d8                 | ' cursor_x:=x
1d3d8     3C E4 05 F1 | 	add	objptr, #60
1d3dc     F2 12 52 FC | 	wrword	arg01, objptr
1d3e0                 | ' cursor_y:=y
1d3e0     02 E4 05 F1 | 	add	objptr, #2
1d3e4     F2 14 42 FC | 	wrbyte	arg02, objptr
1d3e8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1d3e8     02 E4 85 F1 | 	sub	objptr, #2
1d3ec     F2 14 E2 FA | 	rdword	arg02, objptr
1d3f0     02 14 66 F0 | 	shl	arg02, #2
1d3f4     02 E4 05 F1 | 	add	objptr, #2
1d3f8     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d3fc     3E E4 85 F1 | 	sub	objptr, #62
1d400     04 16 66 F0 | 	shl	arg03, #4
1d404     04 16 06 F1 | 	add	arg03, #4
1d408     11 12 06 F6 | 	mov	arg01, #17
1d40c     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1d410                 | _hg010b_spin2_setcursorpos_ret
1d410     2D 00 64 FD | 	ret
1d414                 | 
1d414                 | ' 
1d414                 | ' pub setcursorx(x)
1d414                 | _hg010b_spin2_setcursorx
1d414                 | ' cursor_x:=x
1d414     3C E4 05 F1 | 	add	objptr, #60
1d418     F2 12 52 FC | 	wrword	arg01, objptr
1d41c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1d41c     F2 14 E2 FA | 	rdword	arg02, objptr
1d420     02 14 66 F0 | 	shl	arg02, #2
1d424     02 E4 05 F1 | 	add	objptr, #2
1d428     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d42c     3E E4 85 F1 | 	sub	objptr, #62
1d430     04 16 66 F0 | 	shl	arg03, #4
1d434     04 16 06 F1 | 	add	arg03, #4
1d438     11 12 06 F6 | 	mov	arg01, #17
1d43c     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1d440                 | _hg010b_spin2_setcursorx_ret
1d440     2D 00 64 FD | 	ret
1d444                 | 
1d444                 | ' 
1d444                 | ' pub setcursory(y) 
1d444                 | _hg010b_spin2_setcursory
1d444                 | ' cursor_y:=y
1d444     3E E4 05 F1 | 	add	objptr, #62
1d448     F2 12 42 FC | 	wrbyte	arg01, objptr
1d44c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
1d44c     02 E4 85 F1 | 	sub	objptr, #2
1d450     F2 14 E2 FA | 	rdword	arg02, objptr
1d454     02 14 66 F0 | 	shl	arg02, #2
1d458     02 E4 05 F1 | 	add	objptr, #2
1d45c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d460     3E E4 85 F1 | 	sub	objptr, #62
1d464     04 16 66 F0 | 	shl	arg03, #4
1d468     04 16 06 F1 | 	add	arg03, #4
1d46c     11 12 06 F6 | 	mov	arg01, #17
1d470     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1d474                 | _hg010b_spin2_setcursory_ret
1d474     2D 00 64 FD | 	ret
1d478                 | 
1d478                 | ' 
1d478                 | ' '*************************************************************************
1d478                 | ' '                                                                        *
1d478                 | ' '  VBlank functions                                                      *
1d478                 | ' '                                                                        *
1d478                 | ' '*************************************************************************
1d478                 | ' 
1d478                 | ' pub waitvbl(amount) | i
1d478                 | _hg010b_spin2_waitvbl
1d478     03 4A 05 F6 | 	mov	COUNT_, #3
1d47c     A8 00 A0 FD | 	call	#pushregs_
1d480     09 1F 02 F6 | 	mov	local01, arg01
1d484                 | ' 
1d484                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1d484                 | ' 
1d484                 | ' repeat i from 1 to amount
1d484     01 20 06 F6 | 	mov	local02, #1
1d488     01 1E 56 F2 | 	cmps	local01, #1 wc
1d48c     01 22 86 F6 | 	negc	local03, #1
1d490     11 1F 02 F1 | 	add	local01, local03
1d494                 | LR__2310
1d494                 | '   repeat until vblank==0
1d494                 | LR__2311
1d494     49 E4 05 F1 | 	add	objptr, #73
1d498     F2 12 0A FB | 	rdlong	arg01, objptr wz
1d49c     49 E4 85 F1 | 	sub	objptr, #73
1d4a0     0C 00 90 AD |  if_e	jmp	#LR__2312
1d4a4                 | '     waitus(100)
1d4a4     64 12 06 F6 | 	mov	arg01, #100
1d4a8     28 1A B0 FD | 	call	#__system___waitus
1d4ac     E4 FF 9F FD | 	jmp	#LR__2311
1d4b0                 | LR__2312
1d4b0                 | '   repeat until vblank==1
1d4b0                 | LR__2313
1d4b0     49 E4 05 F1 | 	add	objptr, #73
1d4b4     F2 12 02 FB | 	rdlong	arg01, objptr
1d4b8     49 E4 85 F1 | 	sub	objptr, #73
1d4bc     01 12 0E F2 | 	cmp	arg01, #1 wz
1d4c0     0C 00 90 AD |  if_e	jmp	#LR__2314
1d4c4                 | '     waitus(100)
1d4c4     64 12 06 F6 | 	mov	arg01, #100
1d4c8     08 1A B0 FD | 	call	#__system___waitus
1d4cc     E0 FF 9F FD | 	jmp	#LR__2313
1d4d0                 | LR__2314
1d4d0     11 21 02 F1 | 	add	local02, local03
1d4d4     0F 21 0A F2 | 	cmp	local02, local01 wz
1d4d8     B8 FF 9F 5D |  if_ne	jmp	#LR__2310
1d4dc     A7 F0 03 F6 | 	mov	ptra, fp
1d4e0     B2 00 A0 FD | 	call	#popregs_
1d4e4                 | _hg010b_spin2_waitvbl_ret
1d4e4     2D 00 64 FD | 	ret
1d4e8                 | 
1d4e8                 | ' 
1d4e8                 | ' 
1d4e8                 | ' pub cls(fc,bc)   :c,i
1d4e8                 | _hg010b_spin2_cls
1d4e8     02 4A 05 F6 | 	mov	COUNT_, #2
1d4ec     A8 00 A0 FD | 	call	#pushregs_
1d4f0     09 1F 02 F6 | 	mov	local01, arg01
1d4f4     0A 21 02 F6 | 	mov	local02, arg02
1d4f8                 | ' 
1d4f8                 | ' c:=bc
1d4f8                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1d4f8     DD E4 05 F1 | 	add	objptr, #221
1d4fc     F2 12 02 FB | 	rdlong	arg01, objptr
1d500     A5 E4 85 F1 | 	sub	objptr, #165
1d504     F2 16 02 FB | 	rdlong	arg03, objptr
1d508     02 16 66 F0 | 	shl	arg03, #2
1d50c     10 15 02 F6 | 	mov	arg02, local02
1d510     00 18 06 F6 | 	mov	arg04, #0
1d514     01 1A 06 F6 | 	mov	arg05, #1
1d518     0B 00 00 FF 
1d51c     94 E4 05 F1 | 	add	objptr, ##5780
1d520     64 0B B0 FD | 	call	#_psram_spin2_fill
1d524                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1d524     0B 00 00 FF 
1d528     C8 E4 85 F1 | 	sub	objptr, ##5832
1d52c     F2 12 02 FB | 	rdlong	arg01, objptr
1d530     04 E4 85 F1 | 	sub	objptr, #4
1d534     F2 16 02 FB | 	rdlong	arg03, objptr
1d538     09 17 82 F1 | 	sub	arg03, arg01
1d53c     20 14 06 F6 | 	mov	arg02, #32
1d540     00 18 06 F6 | 	mov	arg04, #0
1d544     01 1A 06 F6 | 	mov	arg05, #1
1d548     0B 00 00 FF 
1d54c     CC E4 05 F1 | 	add	objptr, ##5836
1d550     34 0B B0 FD | 	call	#_psram_spin2_fill
1d554                 | ' setwritecolors(fc,bc)
1d554                 | ' 
1d554                 | ' write_color:=ff
1d554     0B 00 00 FF 
1d558     8B E4 85 F1 | 	sub	objptr, ##5771
1d55c     F2 1E 62 FC | 	wrlong	local01, objptr
1d560                 | ' write_background:=bb
1d560     04 E4 05 F1 | 	add	objptr, #4
1d564     F2 20 62 FC | 	wrlong	local02, objptr
1d568                 | ' cursor_x:=0
1d568     09 E4 85 F1 | 	sub	objptr, #9
1d56c     F2 00 58 FC | 	wrword	#0, objptr
1d570                 | ' cursor_y:=0
1d570     02 E4 05 F1 | 	add	objptr, #2
1d574     F2 00 48 FC | 	wrbyte	#0, objptr
1d578                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1d578     02 E4 85 F1 | 	sub	objptr, #2
1d57c     F2 14 E2 FA | 	rdword	arg02, objptr
1d580     02 14 66 F0 | 	shl	arg02, #2
1d584     02 E4 05 F1 | 	add	objptr, #2
1d588     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d58c     3E E4 85 F1 | 	sub	objptr, #62
1d590     04 16 66 F0 | 	shl	arg03, #4
1d594     04 16 06 F1 | 	add	arg03, #4
1d598     11 12 06 F6 | 	mov	arg01, #17
1d59c     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
1d5a0                 | ' setcursorcolor(fc)
1d5a0     0F 13 02 F6 | 	mov	arg01, local01
1d5a4     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
1d5a8     10 FB 01 F6 | 	mov	result1, local02
1d5ac     00 FC 05 F6 | 	mov	result2, #0
1d5b0     A7 F0 03 F6 | 	mov	ptra, fp
1d5b4     B2 00 A0 FD | 	call	#popregs_
1d5b8                 | _hg010b_spin2_cls_ret
1d5b8     2D 00 64 FD | 	ret
1d5bc                 | 
1d5bc                 | ' 
1d5bc                 | ' ''---------- Output a char at the cursor position, move the cursor 
1d5bc                 | ' 
1d5bc                 | ' pub putchar(achar) | c,x,y,l,newcpl
1d5bc                 | _hg010b_spin2_putchar
1d5bc     02 4A 05 F6 | 	mov	COUNT_, #2
1d5c0     A8 00 A0 FD | 	call	#pushregs_
1d5c4     09 1F 02 F6 | 	mov	local01, arg01
1d5c8                 | ' 
1d5c8                 | ' if achar==10
1d5c8     0A 1E 0E F2 | 	cmp	local01, #10 wz
1d5cc                 | '   crlf()
1d5cc     A4 05 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1d5d0                 | ' if achar==9
1d5d0     09 1E 0E F2 | 	cmp	local01, #9 wz
1d5d4     18 00 90 5D |  if_ne	jmp	#LR__2320
1d5d8                 | '   cursor_x:=(cursor_x& %11110000)+16
1d5d8     3C E4 05 F1 | 	add	objptr, #60
1d5dc     F2 16 E2 FA | 	rdword	arg03, objptr
1d5e0     F0 16 06 F5 | 	and	arg03, #240
1d5e4     10 16 06 F1 | 	add	arg03, #16
1d5e8     F2 16 52 FC | 	wrword	arg03, objptr
1d5ec     3C E4 85 F1 | 	sub	objptr, #60
1d5f0                 | LR__2320
1d5f0                 | '   
1d5f0                 | ' if (achar<>9) && (achar<>10) 
1d5f0     09 1E 0E F2 | 	cmp	local01, #9 wz
1d5f4     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1d5f8     A8 00 90 AD |  if_e	jmp	#LR__2321
1d5fc                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1d5fc     3C E4 05 F1 | 	add	objptr, #60
1d600     F2 12 E2 FA | 	rdword	arg01, objptr
1d604     02 E4 05 F1 | 	add	objptr, #2
1d608     F2 14 C2 FA | 	rdbyte	arg02, objptr
1d60c     04 14 66 F0 | 	shl	arg02, #4
1d610     04 14 06 F1 | 	add	arg02, #4
1d614     03 E4 05 F1 | 	add	objptr, #3
1d618     F2 18 02 FB | 	rdlong	arg04, objptr
1d61c     04 E4 05 F1 | 	add	objptr, #4
1d620     F2 1A 02 FB | 	rdlong	arg05, objptr
1d624     45 E4 85 F1 | 	sub	objptr, #69
1d628     0F 17 02 F6 | 	mov	arg03, local01
1d62c     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1d630     04 E4 05 F1 | 	add	objptr, #4
1d634     F2 12 02 FB | 	rdlong	arg01, objptr
1d638     10 00 00 FF 
1d63c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1d640     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1d644     3A E4 05 F1 | 	add	objptr, #58
1d648     F2 1A C2 FA | 	rdbyte	arg05, objptr
1d64c     0D 17 02 FD | 	qmul	arg03, arg05
1d650                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1d650     10 00 00 FF 
1d654     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1d658     02 E4 85 F1 | 	sub	objptr, #2
1d65c     F2 20 E2 FA | 	rdword	local02, objptr
1d660     01 20 46 F0 | 	shr	local02, #1
1d664     0F 15 02 F6 | 	mov	arg02, local01
1d668     01 16 06 F6 | 	mov	arg03, #1
1d66c     00 18 06 F6 | 	mov	arg04, #0
1d670     01 1A 06 F6 | 	mov	arg05, #1
1d674     0B 00 00 FF 
1d678     90 E4 05 F1 | 	add	objptr, ##5776
1d67c     18 1E 62 FD | 	getqx	local01
1d680     10 1F 02 F1 | 	add	local01, local02
1d684     0F 13 02 F1 | 	add	arg01, local01
1d688     FC 09 B0 FD | 	call	#_psram_spin2_fill
1d68c                 | '   cursor_x+=2
1d68c     0B 00 00 FF 
1d690     90 E4 85 F1 | 	sub	objptr, ##5776
1d694     F2 20 E2 FA | 	rdword	local02, objptr
1d698     02 20 06 F1 | 	add	local02, #2
1d69c     F2 20 52 FC | 	wrword	local02, objptr
1d6a0     3C E4 85 F1 | 	sub	objptr, #60
1d6a4                 | LR__2321
1d6a4                 | ' 
1d6a4                 | ' if cursor_x>=256
1d6a4     3C E4 05 F1 | 	add	objptr, #60
1d6a8     F2 20 E2 FA | 	rdword	local02, objptr
1d6ac     3C E4 85 F1 | 	sub	objptr, #60
1d6b0     00 21 56 F2 | 	cmps	local02, #256 wc
1d6b4     64 00 90 CD |  if_b	jmp	#LR__2323
1d6b8                 | '   cursor_x:=0
1d6b8     3C E4 05 F1 | 	add	objptr, #60
1d6bc     F2 00 58 FC | 	wrword	#0, objptr
1d6c0                 | '   cursor_y+=1
1d6c0     02 E4 05 F1 | 	add	objptr, #2
1d6c4     F2 20 C2 FA | 	rdbyte	local02, objptr
1d6c8     01 20 06 F1 | 	add	local02, #1
1d6cc     F2 20 42 FC | 	wrbyte	local02, objptr
1d6d0                 | '   if cursor_y>st_lines-1
1d6d0     C3 E4 05 F1 | 	add	objptr, #195
1d6d4     F2 20 02 FB | 	rdlong	local02, objptr
1d6d8     01 20 86 F1 | 	sub	local02, #1
1d6dc     C3 E4 85 F1 | 	sub	objptr, #195
1d6e0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d6e4     3E E4 85 F1 | 	sub	objptr, #62
1d6e8     10 17 5A F2 | 	cmps	arg03, local02 wcz
1d6ec     2C 00 90 ED |  if_be	jmp	#LR__2322
1d6f0                 | '     scrollup2()
1d6f0     00 12 06 F6 | 	mov	arg01, #0
1d6f4     01 00 00 FF 
1d6f8     58 14 06 F6 | 	mov	arg02, ##600
1d6fc     10 16 06 F6 | 	mov	arg03, #16
1d700     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
1d704                 | '     cursor_y:=st_lines-1
1d704     01 E5 05 F1 | 	add	objptr, #257
1d708     F2 20 02 FB | 	rdlong	local02, objptr
1d70c     01 20 86 F1 | 	sub	local02, #1
1d710     C3 E4 85 F1 | 	sub	objptr, #195
1d714     F2 20 42 FC | 	wrbyte	local02, objptr
1d718     3E E4 85 F1 | 	sub	objptr, #62
1d71c                 | LR__2322
1d71c                 | LR__2323
1d71c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1d71c     3C E4 05 F1 | 	add	objptr, #60
1d720     F2 14 E2 FA | 	rdword	arg02, objptr
1d724     02 14 66 F0 | 	shl	arg02, #2
1d728     02 E4 05 F1 | 	add	objptr, #2
1d72c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d730     3E E4 85 F1 | 	sub	objptr, #62
1d734     04 16 66 F0 | 	shl	arg03, #4
1d738     04 16 06 F1 | 	add	arg03, #4
1d73c     11 12 06 F6 | 	mov	arg01, #17
1d740     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1d744     A7 F0 03 F6 | 	mov	ptra, fp
1d748     B2 00 A0 FD | 	call	#popregs_
1d74c                 | _hg010b_spin2_putchar_ret
1d74c     2D 00 64 FD | 	ret
1d750                 | 
1d750                 | '     
1d750                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1d750                 | ' 
1d750                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1d750                 | _hg010b_spin2_putchar2
1d750     02 4A 05 F6 | 	mov	COUNT_, #2
1d754     A8 00 A0 FD | 	call	#pushregs_
1d758     09 1F 02 F6 | 	mov	local01, arg01
1d75c                 | ' 
1d75c                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1d75c     3C E4 05 F1 | 	add	objptr, #60
1d760     F2 12 E2 FA | 	rdword	arg01, objptr
1d764     02 E4 05 F1 | 	add	objptr, #2
1d768     F2 14 C2 FA | 	rdbyte	arg02, objptr
1d76c     04 14 66 F0 | 	shl	arg02, #4
1d770     04 14 06 F1 | 	add	arg02, #4
1d774     03 E4 05 F1 | 	add	objptr, #3
1d778     F2 18 02 FB | 	rdlong	arg04, objptr
1d77c     04 E4 05 F1 | 	add	objptr, #4
1d780     F2 1A 02 FB | 	rdlong	arg05, objptr
1d784     45 E4 85 F1 | 	sub	objptr, #69
1d788     0F 17 02 F6 | 	mov	arg03, local01
1d78c     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
1d790     04 E4 05 F1 | 	add	objptr, #4
1d794     F2 12 02 FB | 	rdlong	arg01, objptr
1d798     10 00 00 FF 
1d79c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1d7a0     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1d7a4     3A E4 05 F1 | 	add	objptr, #58
1d7a8     F2 1A C2 FA | 	rdbyte	arg05, objptr
1d7ac     0D 17 02 FD | 	qmul	arg03, arg05
1d7b0                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1d7b0     10 00 00 FF 
1d7b4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1d7b8     02 E4 85 F1 | 	sub	objptr, #2
1d7bc     F2 20 E2 FA | 	rdword	local02, objptr
1d7c0     01 20 46 F0 | 	shr	local02, #1
1d7c4     0F 15 02 F6 | 	mov	arg02, local01
1d7c8     01 16 06 F6 | 	mov	arg03, #1
1d7cc     00 18 06 F6 | 	mov	arg04, #0
1d7d0     01 1A 06 F6 | 	mov	arg05, #1
1d7d4     0B 00 00 FF 
1d7d8     90 E4 05 F1 | 	add	objptr, ##5776
1d7dc     18 1E 62 FD | 	getqx	local01
1d7e0     10 1F 02 F1 | 	add	local01, local02
1d7e4     0F 13 02 F1 | 	add	arg01, local01
1d7e8     9C 08 B0 FD | 	call	#_psram_spin2_fill
1d7ec                 | ' 
1d7ec                 | ' cursor_x+=2
1d7ec     0B 00 00 FF 
1d7f0     90 E4 85 F1 | 	sub	objptr, ##5776
1d7f4     F2 20 E2 FA | 	rdword	local02, objptr
1d7f8     02 20 06 F1 | 	add	local02, #2
1d7fc     F2 20 52 FC | 	wrword	local02, objptr
1d800                 | ' if cursor_x>=256
1d800     F2 20 E2 FA | 	rdword	local02, objptr
1d804     3C E4 85 F1 | 	sub	objptr, #60
1d808     00 21 56 F2 | 	cmps	local02, #256 wc
1d80c     64 00 90 CD |  if_b	jmp	#LR__2331
1d810                 | '   cursor_x:=0
1d810     3C E4 05 F1 | 	add	objptr, #60
1d814     F2 00 58 FC | 	wrword	#0, objptr
1d818                 | '   cursor_y+=1
1d818     02 E4 05 F1 | 	add	objptr, #2
1d81c     F2 20 C2 FA | 	rdbyte	local02, objptr
1d820     01 20 06 F1 | 	add	local02, #1
1d824     F2 20 42 FC | 	wrbyte	local02, objptr
1d828                 | '   if cursor_y>st_lines-1
1d828     C3 E4 05 F1 | 	add	objptr, #195
1d82c     F2 20 02 FB | 	rdlong	local02, objptr
1d830     01 20 86 F1 | 	sub	local02, #1
1d834     C3 E4 85 F1 | 	sub	objptr, #195
1d838     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d83c     3E E4 85 F1 | 	sub	objptr, #62
1d840     10 17 5A F2 | 	cmps	arg03, local02 wcz
1d844     2C 00 90 ED |  if_be	jmp	#LR__2330
1d848                 | '     scrollup2()
1d848     00 12 06 F6 | 	mov	arg01, #0
1d84c     01 00 00 FF 
1d850     58 14 06 F6 | 	mov	arg02, ##600
1d854     10 16 06 F6 | 	mov	arg03, #16
1d858     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
1d85c                 | '     cursor_y:=st_lines-1
1d85c     01 E5 05 F1 | 	add	objptr, #257
1d860     F2 20 02 FB | 	rdlong	local02, objptr
1d864     01 20 86 F1 | 	sub	local02, #1
1d868     C3 E4 85 F1 | 	sub	objptr, #195
1d86c     F2 20 42 FC | 	wrbyte	local02, objptr
1d870     3E E4 85 F1 | 	sub	objptr, #62
1d874                 | LR__2330
1d874                 | LR__2331
1d874                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
1d874     3C E4 05 F1 | 	add	objptr, #60
1d878     F2 14 E2 FA | 	rdword	arg02, objptr
1d87c     02 14 66 F0 | 	shl	arg02, #2
1d880     02 E4 05 F1 | 	add	objptr, #2
1d884     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d888     3E E4 85 F1 | 	sub	objptr, #62
1d88c     04 16 66 F0 | 	shl	arg03, #4
1d890     04 16 06 F1 | 	add	arg03, #4
1d894     11 12 06 F6 | 	mov	arg01, #17
1d898     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
1d89c     A7 F0 03 F6 | 	mov	ptra, fp
1d8a0     B2 00 A0 FD | 	call	#popregs_
1d8a4                 | _hg010b_spin2_putchar2_ret
1d8a4     2D 00 64 FD | 	ret
1d8a8                 | 
1d8a8                 | ' ''--------- Output a string at the cursor position, move the cursor  
1d8a8                 | ' 
1d8a8                 | ' pub write(text) | iii,c,ncx,ncy
1d8a8                 | _hg010b_spin2_write
1d8a8     04 4A 05 F6 | 	mov	COUNT_, #4
1d8ac     A8 00 A0 FD | 	call	#pushregs_
1d8b0     09 1F 02 F6 | 	mov	local01, arg01
1d8b4                 | ' 
1d8b4                 | ' repeat iii from 0 to strsize(text)-1
1d8b4     00 20 06 F6 | 	mov	local02, #0
1d8b8     0F 13 02 F6 | 	mov	arg01, local01
1d8bc     09 23 02 F6 | 	mov	local03, arg01
1d8c0     97 06 48 FB | 	callpa	#(@LR__2341-@LR__2340)>>2,fcache_load_ptr_
1d8c4                 | LR__2340
1d8c4     11 FB C9 FA | 	rdbyte	result1, local03 wz
1d8c8     01 22 06 51 |  if_ne	add	local03, #1
1d8cc     F4 FF 9F 5D |  if_ne	jmp	#LR__2340
1d8d0                 | LR__2341
1d8d0     09 23 82 F1 | 	sub	local03, arg01
1d8d4     01 22 86 F1 | 	sub	local03, #1
1d8d8     00 22 56 F2 | 	cmps	local03, #0 wc
1d8dc     01 24 86 F6 | 	negc	local04, #1
1d8e0     12 23 02 F1 | 	add	local03, local04
1d8e4                 | LR__2342
1d8e4                 | '   putchar2(byte[text+iii])
1d8e4     0F 13 02 F6 | 	mov	arg01, local01
1d8e8     10 13 02 F1 | 	add	arg01, local02
1d8ec     09 13 C2 FA | 	rdbyte	arg01, arg01
1d8f0     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
1d8f4     12 21 02 F1 | 	add	local02, local04
1d8f8     11 21 0A F2 | 	cmp	local02, local03 wz
1d8fc     E4 FF 9F 5D |  if_ne	jmp	#LR__2342
1d900     A7 F0 03 F6 | 	mov	ptra, fp
1d904     B2 00 A0 FD | 	call	#popregs_
1d908                 | _hg010b_spin2_write_ret
1d908     2D 00 64 FD | 	ret
1d90c                 | 
1d90c                 | '    
1d90c                 | ' ' a version for text scrolling in Basic shifted 4 lines down
1d90c                 | ' 
1d90c                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
1d90c                 | _hg010b_spin2_scrollup2
1d90c     03 4A 05 F6 | 	mov	COUNT_, #3
1d910     A8 00 A0 FD | 	call	#pushregs_
1d914                 | ' 	
1d914                 | ' repeat i from 4 to 579 
1d914     04 1E 06 F6 | 	mov	local01, #4
1d918                 | LR__2350
1d918     F9 E4 05 F1 | 	add	objptr, #249
1d91c     F2 1A 02 FB | 	rdlong	arg05, objptr
1d920     1C E4 85 F1 | 	sub	objptr, #28
1d924     F2 14 02 FB | 	rdlong	arg02, objptr
1d928     0F 19 02 F6 | 	mov	arg04, local01
1d92c     10 18 06 F1 | 	add	arg04, #16
1d930     02 18 66 F0 | 	shl	arg04, #2
1d934     14 E4 05 F1 | 	add	objptr, #20
1d938     F2 16 02 FB | 	rdlong	arg03, objptr
1d93c     0B 19 02 FD | 	qmul	arg04, arg03
1d940                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1d940     F6 03 00 FF 
1d944     00 12 06 F6 | 	mov	arg01, ##519168
1d948     0D 13 82 F1 | 	sub	arg01, arg05
1d94c     02 16 66 F0 | 	shl	arg03, #2
1d950     0A 00 00 FF 
1d954     DB E5 05 F1 | 	add	objptr, ##5595
1d958     18 1A 62 FD | 	getqx	arg05
1d95c     0D 15 02 F1 | 	add	arg02, arg05
1d960     EC 05 B0 FD | 	call	#_psram_spin2_read1
1d964     0A 00 00 FF 
1d968     D3 E5 85 F1 | 	sub	objptr, ##5587
1d96c     F2 1A 02 FB | 	rdlong	arg05, objptr
1d970     1C E4 85 F1 | 	sub	objptr, #28
1d974     F2 14 02 FB | 	rdlong	arg02, objptr
1d978     0F 19 02 F6 | 	mov	arg04, local01
1d97c     02 18 66 F0 | 	shl	arg04, #2
1d980     14 E4 05 F1 | 	add	objptr, #20
1d984     F2 16 02 FB | 	rdlong	arg03, objptr
1d988     0B 19 02 FD | 	qmul	arg04, arg03
1d98c                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1d98c     F6 03 00 FF 
1d990     00 12 06 F6 | 	mov	arg01, ##519168
1d994     0D 13 82 F1 | 	sub	arg01, arg05
1d998     02 16 66 F0 | 	shl	arg03, #2
1d99c     0A 00 00 FF 
1d9a0     DB E5 05 F1 | 	add	objptr, ##5595
1d9a4     18 1A 62 FD | 	getqx	arg05
1d9a8     0D 15 02 F1 | 	add	arg02, arg05
1d9ac     3C 06 B0 FD | 	call	#_psram_spin2_write
1d9b0     0B 00 00 FF 
1d9b4     CC E4 85 F1 | 	sub	objptr, ##5836
1d9b8     01 1E 06 F1 | 	add	local01, #1
1d9bc     01 00 00 FF 
1d9c0     44 1E 16 F2 | 	cmp	local01, ##580 wc
1d9c4     50 FF 9F CD |  if_b	jmp	#LR__2350
1d9c8                 | ' 
1d9c8                 | ' repeat i from 580 to 599
1d9c8     01 00 00 FF 
1d9cc     44 1E 06 F6 | 	mov	local01, ##580
1d9d0                 | LR__2351
1d9d0                 | '    fastline(0,1023,i,write_background)   
1d9d0     45 E4 05 F1 | 	add	objptr, #69
1d9d4     F2 18 02 FB | 	rdlong	arg04, objptr
1d9d8     45 E4 85 F1 | 	sub	objptr, #69
1d9dc     00 12 06 F6 | 	mov	arg01, #0
1d9e0     09 14 CE F9 | 	bmask	arg02, #9
1d9e4     0F 17 02 F6 | 	mov	arg03, local01
1d9e8     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
1d9ec     01 1E 06 F1 | 	add	local01, #1
1d9f0     01 00 00 FF 
1d9f4     58 1E 16 F2 | 	cmp	local01, ##600 wc
1d9f8     D4 FF 9F CD |  if_b	jmp	#LR__2351
1d9fc                 | ' repeat i from 0 to 3
1d9fc     00 1E 06 F6 | 	mov	local01, #0
1da00                 | LR__2352
1da00                 | '    fastline(0,1023,i,write_background)      
1da00     45 E4 05 F1 | 	add	objptr, #69
1da04     F2 18 02 FB | 	rdlong	arg04, objptr
1da08     45 E4 85 F1 | 	sub	objptr, #69
1da0c     00 12 06 F6 | 	mov	arg01, #0
1da10     09 14 CE F9 | 	bmask	arg02, #9
1da14     0F 17 02 F6 | 	mov	arg03, local01
1da18     90 EF BF FD | 	call	#_hg010b_spin2_fastline
1da1c     01 1E 06 F1 | 	add	local01, #1
1da20     04 1E 56 F2 | 	cmps	local01, #4 wc
1da24     D8 FF 9F CD |  if_b	jmp	#LR__2352
1da28                 | ' 
1da28                 | ' repeat i from 0 to 35
1da28     00 1E 06 F6 | 	mov	local01, #0
1da2c                 | LR__2353
1da2c     0F 1B 02 F6 | 	mov	arg05, local01
1da30     01 1A 06 F1 | 	add	arg05, #1
1da34     10 00 00 FF 
1da38     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1da3c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1da40     0B 1B 02 FD | 	qmul	arg05, arg03
1da44                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
1da44     F6 03 00 FF 
1da48     00 12 06 F6 | 	mov	arg01, ##519168
1da4c     F9 E4 05 F1 | 	add	objptr, #249
1da50     F2 1A 02 FB | 	rdlong	arg05, objptr
1da54     0D 13 82 F1 | 	sub	arg01, arg05
1da58     F5 E4 85 F1 | 	sub	objptr, #245
1da5c     F2 14 02 FB | 	rdlong	arg02, objptr
1da60     10 00 00 FF 
1da64     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1da68     0B 00 00 FF 
1da6c     C8 E4 05 F1 | 	add	objptr, ##5832
1da70     18 1A 62 FD | 	getqx	arg05
1da74     0D 15 02 F1 | 	add	arg02, arg05
1da78     D4 04 B0 FD | 	call	#_psram_spin2_read1
1da7c     10 00 00 FF 
1da80     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1da84     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1da88     0B 1F 02 FD | 	qmul	local01, arg03
1da8c                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
1da8c     F6 03 00 FF 
1da90     00 12 06 F6 | 	mov	arg01, ##519168
1da94     0A 00 00 FF 
1da98     D3 E5 85 F1 | 	sub	objptr, ##5587
1da9c     F2 1A 02 FB | 	rdlong	arg05, objptr
1daa0     0D 13 82 F1 | 	sub	arg01, arg05
1daa4     F5 E4 85 F1 | 	sub	objptr, #245
1daa8     F2 14 02 FB | 	rdlong	arg02, objptr
1daac     10 00 00 FF 
1dab0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1dab4     0B 00 00 FF 
1dab8     C8 E4 05 F1 | 	add	objptr, ##5832
1dabc     18 1A 62 FD | 	getqx	arg05
1dac0     0D 15 02 F1 | 	add	arg02, arg05
1dac4     24 05 B0 FD | 	call	#_psram_spin2_write
1dac8     0B 00 00 FF 
1dacc     CC E4 85 F1 | 	sub	objptr, ##5836
1dad0     01 1E 06 F1 | 	add	local01, #1
1dad4     24 1E 56 F2 | 	cmps	local01, #36 wc
1dad8     50 FF 9F CD |  if_b	jmp	#LR__2353
1dadc                 | ' repeat i from 0 to timings[7]-1
1dadc     00 1E 06 F6 | 	mov	local01, #0
1dae0     10 00 00 FF 
1dae4     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1dae8     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1daec     10 00 00 FF 
1daf0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1daf4     01 20 86 F1 | 	sub	local02, #1
1daf8     00 20 56 F2 | 	cmps	local02, #0 wc
1dafc     01 22 86 F6 | 	negc	local03, #1
1db00     11 21 02 F1 | 	add	local02, local03
1db04                 | LR__2354
1db04                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
1db04     04 E4 05 F1 | 	add	objptr, #4
1db08     F2 12 02 FB | 	rdlong	arg01, objptr
1db0c     10 00 00 FF 
1db10     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1db14     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1db18     10 00 00 FF 
1db1c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1db20     0D 19 02 F6 | 	mov	arg04, arg05
1db24     03 18 66 F0 | 	shl	arg04, #3
1db28     0D 19 02 F1 | 	add	arg04, arg05
1db2c     02 18 66 F0 | 	shl	arg04, #2
1db30     0F 19 02 F1 | 	add	arg04, local01
1db34     0C 13 02 F1 | 	add	arg01, arg04
1db38     20 14 06 F6 | 	mov	arg02, #32
1db3c     01 16 06 F6 | 	mov	arg03, #1
1db40     00 18 06 F6 | 	mov	arg04, #0
1db44     01 1A 06 F6 | 	mov	arg05, #1
1db48     0B 00 00 FF 
1db4c     C8 E4 05 F1 | 	add	objptr, ##5832
1db50     34 05 B0 FD | 	call	#_psram_spin2_fill
1db54     0B 00 00 FF 
1db58     CC E4 85 F1 | 	sub	objptr, ##5836
1db5c     11 1F 02 F1 | 	add	local01, local03
1db60     10 1F 0A F2 | 	cmp	local01, local02 wz
1db64     9C FF 9F 5D |  if_ne	jmp	#LR__2354
1db68     A7 F0 03 F6 | 	mov	ptra, fp
1db6c     B2 00 A0 FD | 	call	#popregs_
1db70                 | _hg010b_spin2_scrollup2_ret
1db70     2D 00 64 FD | 	ret
1db74                 | 
1db74                 | ' 
1db74                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
1db74                 | ' 
1db74                 | ' pub crlf()
1db74                 | _hg010b_spin2_crlf
1db74                 | ' 
1db74                 | ' cursor_x:=leading_spaces*2
1db74     01 00 00 FF 
1db78     B6 E4 05 F1 | 	add	objptr, ##694
1db7c     F2 16 02 FB | 	rdlong	arg03, objptr
1db80     01 16 66 F0 | 	shl	arg03, #1
1db84     01 00 00 FF 
1db88     7A E4 85 F1 | 	sub	objptr, ##634
1db8c     F2 16 52 FC | 	wrword	arg03, objptr
1db90                 | ' cursor_y+=1
1db90     02 E4 05 F1 | 	add	objptr, #2
1db94     F2 16 C2 FA | 	rdbyte	arg03, objptr
1db98     01 16 06 F1 | 	add	arg03, #1
1db9c     F2 16 42 FC | 	wrbyte	arg03, objptr
1dba0                 | ' if cursor_y>st_lines-1
1dba0     C3 E4 05 F1 | 	add	objptr, #195
1dba4     F2 16 02 FB | 	rdlong	arg03, objptr
1dba8     01 16 86 F1 | 	sub	arg03, #1
1dbac     C3 E4 85 F1 | 	sub	objptr, #195
1dbb0     F2 14 C2 FA | 	rdbyte	arg02, objptr
1dbb4     3E E4 85 F1 | 	sub	objptr, #62
1dbb8     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
1dbbc     2C 00 90 ED |  if_be	jmp	#LR__2360
1dbc0                 | '   scrollup2()
1dbc0     00 12 06 F6 | 	mov	arg01, #0
1dbc4     01 00 00 FF 
1dbc8     58 14 06 F6 | 	mov	arg02, ##600
1dbcc     10 16 06 F6 | 	mov	arg03, #16
1dbd0     38 FD BF FD | 	call	#_hg010b_spin2_scrollup2
1dbd4                 | '   cursor_y:=st_lines-1
1dbd4     01 E5 05 F1 | 	add	objptr, #257
1dbd8     F2 16 02 FB | 	rdlong	arg03, objptr
1dbdc     01 16 86 F1 | 	sub	arg03, #1
1dbe0     C3 E4 85 F1 | 	sub	objptr, #195
1dbe4     F2 16 42 FC | 	wrbyte	arg03, objptr
1dbe8     3E E4 85 F1 | 	sub	objptr, #62
1dbec                 | LR__2360
1dbec                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
1dbec     3C E4 05 F1 | 	add	objptr, #60
1dbf0     F2 14 E2 FA | 	rdword	arg02, objptr
1dbf4     02 14 66 F0 | 	shl	arg02, #2
1dbf8     02 E4 05 F1 | 	add	objptr, #2
1dbfc     F2 16 C2 FA | 	rdbyte	arg03, objptr
1dc00     3E E4 85 F1 | 	sub	objptr, #62
1dc04     04 16 66 F0 | 	shl	arg03, #4
1dc08     04 16 06 F1 | 	add	arg03, #4
1dc0c     11 12 06 F6 | 	mov	arg01, #17
1dc10     4C EB BF FD | 	call	#_hg010b_spin2_setspritepos
1dc14                 | _hg010b_spin2_crlf_ret
1dc14     2D 00 64 FD | 	ret
1dc18                 | 
1dc18                 | ' 
1dc18                 | ' 
1dc18                 | ' '*************************************************************************
1dc18                 | ' '                                                                        *
1dc18                 | ' '  Conversions                                                           *
1dc18                 | ' '                                                                        *
1dc18                 | ' '*************************************************************************
1dc18                 | ' 
1dc18                 | ' ''---------- Convert a integer to dec string, return a pointer
1dc18                 | ' 
1dc18                 | ' pub inttostr(i):result |q,pos,k,j
1dc18                 | _hg010b_spin2_inttostr
1dc18     03 4A 05 F6 | 	mov	COUNT_, #3
1dc1c     A8 00 A0 FD | 	call	#pushregs_
1dc20     09 1F 0A F6 | 	mov	local01, arg01 wz
1dc24                 | ' 
1dc24                 | ' j:=i
1dc24                 | ' pos:=10
1dc24     0A 20 06 F6 | 	mov	local02, #10
1dc28                 | ' k:=0
1dc28     00 22 06 F6 | 	mov	local03, #0
1dc2c                 | ' 
1dc2c                 | ' if (j==0)
1dc2c     18 00 90 5D |  if_ne	jmp	#LR__2370
1dc30                 | '   n_string[0]:=48
1dc30     4D E4 05 F1 | 	add	objptr, #77
1dc34     F2 60 48 FC | 	wrbyte	#48, objptr
1dc38                 | '   n_string[1]:=0
1dc38     01 E4 05 F1 | 	add	objptr, #1
1dc3c     F2 00 48 FC | 	wrbyte	#0, objptr
1dc40     4E E4 85 F1 | 	sub	objptr, #78
1dc44     C4 00 90 FD | 	jmp	#LR__2377
1dc48                 | LR__2370
1dc48                 | ' 
1dc48                 | ' else
1dc48                 | '   if (j<0)
1dc48     0F 1F 52 F6 | 	abs	local01, local01 wc
1dc4c                 | '     j:=0-j
1dc4c                 | '     k:=45
1dc4c     2D 22 06 C6 |  if_b	mov	local03, #45
1dc50                 | ' 
1dc50                 | '   n_string[11]:=0
1dc50     58 E4 05 F1 | 	add	objptr, #88
1dc54     F2 00 48 FC | 	wrbyte	#0, objptr
1dc58     58 E4 85 F1 | 	sub	objptr, #88
1dc5c     97 24 48 FB | 	callpa	#(@LR__2372-@LR__2371)>>2,fcache_load_ptr_
1dc60                 | '   repeat while (pos>-1)
1dc60                 | LR__2371
1dc60     00 20 56 F2 | 	cmps	local02, #0 wc
1dc64     40 00 90 CD |  if_b	jmp	#LR__2373
1dc68     0F FB 51 F6 | 	abs	result1, local01 wc
1dc6c     0A FA 15 FD | 	qdiv	result1, #10
1dc70                 | '     q:=j//10
1dc70     19 FA 61 FD | 	getqy	result1
1dc74     FD FA 81 F6 | 	negc	result1, result1
1dc78     0F 1F 52 F6 | 	abs	local01, local01 wc
1dc7c     0A 1E 16 FD | 	qdiv	local01, #10
1dc80                 | '     q:=48+q
1dc80     30 FA 05 F1 | 	add	result1, #48
1dc84                 | '     n_string[pos]:=q
1dc84     10 1F 02 F6 | 	mov	local01, local02
1dc88     4D E4 05 F1 | 	add	objptr, #77
1dc8c     F2 1E 02 F1 | 	add	local01, objptr
1dc90     0F FB 41 FC | 	wrbyte	result1, local01
1dc94                 | '     j:=j/10
1dc94     4D E4 85 F1 | 	sub	objptr, #77
1dc98                 | '     pos-=1
1dc98     01 20 86 F1 | 	sub	local02, #1
1dc9c     18 1E 62 FD | 	getqx	local01
1dca0     0F 1F 82 F6 | 	negc	local01, local01
1dca4     B8 FF 9F FD | 	jmp	#LR__2371
1dca8                 | LR__2372
1dca8                 | LR__2373
1dca8                 | '   repeat while n_string[0]==48
1dca8                 | LR__2374
1dca8     4D E4 05 F1 | 	add	objptr, #77
1dcac     F2 16 C2 FA | 	rdbyte	arg03, objptr
1dcb0     4D E4 85 F1 | 	sub	objptr, #77
1dcb4     30 16 0E F2 | 	cmp	arg03, #48 wz
1dcb8     20 00 90 5D |  if_ne	jmp	#LR__2375
1dcbc                 | '     bytemove(@n_string,@n_string+1,12)
1dcbc     4D E4 05 F1 | 	add	objptr, #77
1dcc0     F2 12 02 F6 | 	mov	arg01, objptr
1dcc4     F2 14 02 F6 | 	mov	arg02, objptr
1dcc8     4D E4 85 F1 | 	sub	objptr, #77
1dccc     01 14 06 F1 | 	add	arg02, #1
1dcd0     0C 16 06 F6 | 	mov	arg03, #12
1dcd4     BC 0D B0 FD | 	call	#__system____builtin_memmove
1dcd8     CC FF 9F FD | 	jmp	#LR__2374
1dcdc                 | LR__2375
1dcdc                 | ' 
1dcdc                 | '   if k==45
1dcdc     2D 22 0E F2 | 	cmp	local03, #45 wz
1dce0     28 00 90 5D |  if_ne	jmp	#LR__2376
1dce4                 | '      bytemove(@n_string+1,@n_string,12)
1dce4     4D E4 05 F1 | 	add	objptr, #77
1dce8     F2 12 02 F6 | 	mov	arg01, objptr
1dcec     01 12 06 F1 | 	add	arg01, #1
1dcf0     F2 14 02 F6 | 	mov	arg02, objptr
1dcf4     4D E4 85 F1 | 	sub	objptr, #77
1dcf8     0C 16 06 F6 | 	mov	arg03, #12
1dcfc     94 0D B0 FD | 	call	#__system____builtin_memmove
1dd00                 | '      n_string[0]:=k
1dd00     4D E4 05 F1 | 	add	objptr, #77
1dd04     F2 22 42 FC | 	wrbyte	local03, objptr
1dd08     4D E4 85 F1 | 	sub	objptr, #77
1dd0c                 | LR__2376
1dd0c                 | LR__2377
1dd0c                 | ' 
1dd0c                 | ' q:=@n_string
1dd0c     4D E4 05 F1 | 	add	objptr, #77
1dd10     F2 FA 01 F6 | 	mov	result1, objptr
1dd14     4D E4 85 F1 | 	sub	objptr, #77
1dd18                 | ' return q
1dd18     A7 F0 03 F6 | 	mov	ptra, fp
1dd1c     B2 00 A0 FD | 	call	#popregs_
1dd20                 | _hg010b_spin2_inttostr_ret
1dd20     2D 00 64 FD | 	ret
1dd24                 | 
1dd24                 | ' 
1dd24                 | ' '..............................................................................
1dd24                 | ' 
1dd24                 | ' {{
1dd24                 | ' }}
1dd24                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1dd24                 | _psram_spin2_startx
1dd24     04 4A 05 F6 | 	mov	COUNT_, #4
1dd28     A8 00 A0 FD | 	call	#pushregs_
1dd2c     09 1F 02 F6 | 	mov	local01, arg01
1dd30     0B 21 02 F6 | 	mov	local02, arg03
1dd34     0C 23 02 F6 | 	mov	local03, arg04
1dd38                 | '     stop() ' restart driver if required
1dd38     54 01 B0 FD | 	call	#_psram_spin2_stop
1dd3c     00 1E 0E F2 | 	cmp	local01, #0 wz
1dd40     14 1E 06 AB |  if_e	rdlong	local01, #20
1dd44     0F 15 52 F6 | 	abs	arg02, local01 wc
1dd48     A1 07 00 FF 
1dd4c     40 14 16 FD | 	qdiv	arg02, ##1000000
1dd50                 | ' 
1dd50                 | '     ' use current frequency if none specified
1dd50                 | ' 
1dd50                 | '     if freq == 0 
1dd50                 | '         freq := clkfreq 
1dd50                 | ' 
1dd50                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1dd50                 | ' 
1dd50                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1dd50                 | '     if burst < 0
1dd50                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1dd50     18 14 62 FD | 	getqx	arg02
1dd54     0A 19 82 F6 | 	negc	arg04, arg02
1dd58     03 18 66 F0 | 	shl	arg04, #3
1dd5c     84 18 86 F1 | 	sub	arg04, #132
1dd60     04 18 46 F0 | 	shr	arg04, #4
1dd64     04 18 66 F0 | 	shl	arg04, #4
1dd68     00 18 56 F2 | 	cmps	arg04, #0 wc
1dd6c     0E FA 65 C6 |  if_b	neg	result1, #14
1dd70     10 01 90 CD |  if_b	jmp	#LR__2383
1dd74                 | ' 
1dd74                 | '     ' compute the input delay
1dd74                 | ' 
1dd74                 | '     if delay <= 0
1dd74     01 20 56 F2 | 	cmps	local02, #1 wc
1dd78     10 00 90 3D |  if_ae	jmp	#LR__2380
1dd7c                 | '         delay := lookupDelay(freq)
1dd7c     0F 13 02 F6 | 	mov	arg01, local01
1dd80     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
1dd84     FD 20 02 F6 | 	mov	local02, result1
1dd88     04 00 90 FD | 	jmp	#LR__2381
1dd8c                 | LR__2380
1dd8c                 | '     else
1dd8c                 | '         delay <#= $f ' limit to 15
1dd8c     0F 20 66 F3 | 	fles	local02, #15
1dd90                 | LR__2381
1dd90                 | ' 
1dd90                 | '     ' create our lock
1dd90                 | ' 
1dd90                 | '     driverlock := LOCKNEW()  
1dd90     00 FA 05 F6 | 	mov	result1, #0
1dd94     04 FA 61 FD | 	locknew	result1
1dd98     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1dd9c     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1dda0                 | '     if driverlock == -1
1dda0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1dda4     FF FF 7F FF 
1dda8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1ddac                 | '         return ERR_NO_LOCK
1ddac     1A FA 65 A6 |  if_e	neg	result1, #26
1ddb0     D0 00 90 AD |  if_e	jmp	#LR__2383
1ddb4                 | ' 
1ddb4                 | '     ' patch in the proper data and HUB addresses to the startup structure
1ddb4                 | ' 
1ddb4                 | '     long[@startupData][0]:=clkfreq
1ddb4     14 1E 06 FB | 	rdlong	local01, #20
1ddb8     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
1ddbc     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1ddc0                 | ' '    long[@startupData][1]:=$1000_0000
1ddc0                 | '     long[@startupData][5]:=@deviceData
1ddc0     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1ddc4     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1ddc8     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
1ddcc     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1ddd0     14 14 06 F1 | 	add	arg02, #20
1ddd4     0A 1F 62 FC | 	wrlong	local01, arg02
1ddd8                 | '     long[@startupData][6]:=@qosData
1ddd8     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
1dddc     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1dde0     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1dde4     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1dde8     18 14 06 F1 | 	add	arg02, #24
1ddec     0A 1F 62 FC | 	wrlong	local01, arg02
1ddf0                 | '     long[@startupData][7]:=$7FF00
1ddf0     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1ddf4     1C 1E 06 F1 | 	add	local01, #28
1ddf8     FF 03 80 FF 
1ddfc     0F 01 6A FC | 	wrlong	##524032, local01
1de00                 | ' 
1de00                 | '     ' setup some default bank and QoS parameter values
1de00                 | ' 
1de00                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1de00     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1de04     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1de08     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
1de0c     10 18 66 F0 | 	shl	arg04, #16
1de10     0C 20 66 F0 | 	shl	local02, #12
1de14     10 19 42 F5 | 	or	arg04, local02
1de18     18 18 46 F5 | 	or	arg04, #24
1de1c     0C 15 02 F6 | 	mov	arg02, arg04
1de20     02 16 06 F6 | 	mov	arg03, #2
1de24     A0 00 A0 FD | 	call	#\builtin_longfill_
1de28                 | '     longfill(@qosData, $FFFF0000, 8)
1de28     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1de2c     07 16 06 F6 | 	mov	arg03, #7
1de30     28 16 62 FD | 	setq	arg03
1de34     80 FF FF FF 
1de38     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
1de3c                 | ' 
1de3c                 | '     ' get the address of the PSRAM memory driver so we can start it
1de3c                 | ' 
1de3c                 | '     driverAddr:= driver.getDriverAddr()
1de3c                 | '     return @driver_start
1de3c     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1de40     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1de44     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1de48                 | ' 
1de48                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1de48                 | ' 
1de48                 | '     if desiredcog < 0
1de48     00 22 56 F2 | 	cmps	local03, #0 wc
1de4c                 | '         desiredcog := NEWCOG
1de4c     10 22 06 C6 |  if_b	mov	local03, #16
1de50                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1de50     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1de54     11 25 02 F6 | 	mov	local04, local03
1de58     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
1de5c     0A 25 F2 FC | 	coginit	local04, arg02 wc
1de60     01 24 66 C6 |  if_b	neg	local04, #1
1de64     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1de68     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
1de6c                 | '     repeat until long[@startupData] == 0 
1de6c     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1de70                 | LR__2382
1de70     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1de74     F8 FF 9F 5D |  if_ne	jmp	#LR__2382
1de78                 | ' 
1de78                 | '     return drivercog
1de78     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1de7c     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1de80     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1de84                 | LR__2383
1de84     A7 F0 03 F6 | 	mov	ptra, fp
1de88     B2 00 A0 FD | 	call	#popregs_
1de8c                 | _psram_spin2_startx_ret
1de8c     2D 00 64 FD | 	ret
1de90                 | 
1de90                 | ' 
1de90                 | ' '..............................................................................
1de90                 | ' 
1de90                 | ' {{
1de90                 | ' }}
1de90                 | ' PUB stop() : i
1de90                 | _psram_spin2_stop
1de90     00 00 06 F6 | 	mov	_var01, #0
1de94                 | '     if drivercog <> -1
1de94     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1de98     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1de9c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1dea0     FF FF 7F FF 
1dea4     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1dea8     70 00 90 AD |  if_e	jmp	#LR__2393
1deac                 | '         cogstop(drivercog) ' a rather brutal stop
1deac     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1deb0     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1deb4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1deb8     03 12 62 FD | 	cogstop	arg01
1debc     97 26 48 FB | 	callpa	#(@LR__2392-@LR__2390)>>2,fcache_load_ptr_
1dec0                 | '         repeat i from 0 to 7
1dec0                 | LR__2390
1dec0                 | '             if long[$7FF00][i*3] < 0
1dec0     00 FB 01 F6 | 	mov	result1, _var01
1dec4     01 FA 65 F0 | 	shl	result1, #1
1dec8     00 FB 01 F1 | 	add	result1, _var01
1decc     02 FA 65 F0 | 	shl	result1, #2
1ded0     FF 03 00 FF 
1ded4     00 FB 05 F1 | 	add	result1, ##524032
1ded8     FD FA 01 FB | 	rdlong	result1, result1
1dedc     00 FA 55 F2 | 	cmps	result1, #0 wc
1dee0     1C 00 90 3D |  if_ae	jmp	#LR__2391
1dee4                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1dee4     00 FB 01 F6 | 	mov	result1, _var01
1dee8     01 FA 65 F0 | 	shl	result1, #1
1deec     00 FB 01 F1 | 	add	result1, _var01
1def0     02 FA 65 F0 | 	shl	result1, #2
1def4     FF 03 00 FF 
1def8     00 FB 05 F1 | 	add	result1, ##524032
1defc     FD 20 68 FC | 	wrlong	#16, result1
1df00                 | LR__2391
1df00     01 00 06 F1 | 	add	_var01, #1
1df04     08 00 56 F2 | 	cmps	_var01, #8 wc
1df08     B4 FF 9F CD |  if_b	jmp	#LR__2390
1df0c                 | LR__2392
1df0c                 | '         drivercog := -1
1df0c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1df10     FF FF FF FF 
1df14     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1df18     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1df1c                 | LR__2393
1df1c                 | '     if driverlock <> -1
1df1c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1df20     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1df24     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1df28     FF FF 7F FF 
1df2c     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1df30                 | '         LOCKRET(driverlock)
1df30     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1df34     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1df38     05 12 62 5D |  if_ne	lockret	arg01
1df3c                 | '         driverlock := -1
1df3c     FF FF FF 5F 
1df40     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1df44     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1df48     00 FB 01 F6 | 	mov	result1, _var01
1df4c                 | _psram_spin2_stop_ret
1df4c     2D 00 64 FD | 	ret
1df50                 | 
1df50                 | ' 
1df50                 | ' '..............................................................................
1df50                 | ' 
1df50                 | ' {{
1df50                 | ' }}
1df50                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1df50                 | _psram_spin2_read1
1df50                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1df50                 | '     if drivercog == -1 ' driver must be running
1df50     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1df54     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1df58     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1df5c     FF FF 7F FF 
1df60     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1df64                 | '         return ERR_INACTIVE
1df64     0F FA 65 A6 |  if_e	neg	result1, #15
1df68     7C 00 90 AD |  if_e	jmp	#LR__2401
1df6c                 | '     if count == 0 ' don't even bother reading
1df6c     00 16 0E F2 | 	cmp	arg03, #0 wz
1df70                 | '         return 0
1df70     00 FA 05 A6 |  if_e	mov	result1, #0
1df74     70 00 90 AD |  if_e	jmp	#LR__2401
1df78                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1df78     00 FA 05 F6 | 	mov	result1, #0
1df7c     01 FA 61 FD | 	cogid	result1
1df80     FD 00 02 F6 | 	mov	_var01, result1
1df84     01 00 66 F0 | 	shl	_var01, #1
1df88     FD 00 02 F1 | 	add	_var01, result1
1df8c     02 00 66 F0 | 	shl	_var01, #2
1df90     FF 03 00 FF 
1df94     00 03 06 F6 | 	mov	_var02, ##524032
1df98     00 03 02 F1 | 	add	_var02, _var01
1df9c                 | '     if long[mailbox] < 0
1df9c     01 01 02 FB | 	rdlong	_var01, _var02
1dfa0     00 00 56 F2 | 	cmps	_var01, #0 wc
1dfa4                 | '         return ERR_MAILBOX_BUSY
1dfa4     1C FA 65 C6 |  if_b	neg	result1, #28
1dfa8     3C 00 90 CD |  if_b	jmp	#LR__2401
1dfac                 | '     long[mailbox][2] := count
1dfac     08 02 06 F1 | 	add	_var02, #8
1dfb0     01 17 62 FC | 	wrlong	arg03, _var02
1dfb4                 | '     long[mailbox][1] := dstHubAddr
1dfb4     04 02 86 F1 | 	sub	_var02, #4
1dfb8     01 13 62 FC | 	wrlong	arg01, _var02
1dfbc     04 02 86 F1 | 	sub	_var02, #4
1dfc0                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1dfc0     0A 05 02 F6 | 	mov	_var03, arg02
1dfc4     D9 04 06 F4 | 	bitl	_var03, #217
1dfc8     00 00 58 FF 
1dfcc     00 00 06 F6 | 	mov	_var01, ##-1342177280
1dfd0     02 01 02 F1 | 	add	_var01, _var03
1dfd4     01 01 62 FC | 	wrlong	_var01, _var02
1dfd8                 | '     repeat
1dfd8                 | LR__2400
1dfd8                 | '         result := long[mailbox]    
1dfd8     01 05 02 FB | 	rdlong	_var03, _var02
1dfdc     00 04 56 F2 | 	cmps	_var03, #0 wc
1dfe0     F4 FF 9F CD |  if_b	jmp	#LR__2400
1dfe4                 | '     while result < 0   
1dfe4                 | '     return -result                       'return success or error
1dfe4     02 FB 61 F6 | 	neg	result1, _var03
1dfe8                 | LR__2401
1dfe8                 | _psram_spin2_read1_ret
1dfe8     2D 00 64 FD | 	ret
1dfec                 | 
1dfec                 | ' 
1dfec                 | ' '..............................................................................
1dfec                 | ' 
1dfec                 | ' {{
1dfec                 | ' }}
1dfec                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
1dfec                 | _psram_spin2_write
1dfec                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1dfec                 | '     if drivercog == -1 ' driver must be running
1dfec     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1dff0     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1dff4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1dff8     FF FF 7F FF 
1dffc     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1e000                 | '         return ERR_INACTIVE
1e000     0F FA 65 A6 |  if_e	neg	result1, #15
1e004     7C 00 90 AD |  if_e	jmp	#LR__2411
1e008                 | '     if count == 0 ' don't even bother writing
1e008     00 16 0E F2 | 	cmp	arg03, #0 wz
1e00c                 | '         return 0
1e00c     00 FA 05 A6 |  if_e	mov	result1, #0
1e010     70 00 90 AD |  if_e	jmp	#LR__2411
1e014                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1e014     00 FA 05 F6 | 	mov	result1, #0
1e018     01 FA 61 FD | 	cogid	result1
1e01c     FD 00 02 F6 | 	mov	_var01, result1
1e020     01 00 66 F0 | 	shl	_var01, #1
1e024     FD 00 02 F1 | 	add	_var01, result1
1e028     02 00 66 F0 | 	shl	_var01, #2
1e02c     FF 03 00 FF 
1e030     00 03 06 F6 | 	mov	_var02, ##524032
1e034     00 03 02 F1 | 	add	_var02, _var01
1e038                 | '     if long[mailbox] < 0
1e038     01 01 02 FB | 	rdlong	_var01, _var02
1e03c     00 00 56 F2 | 	cmps	_var01, #0 wc
1e040                 | '         return ERR_MAILBOX_BUSY
1e040     1C FA 65 C6 |  if_b	neg	result1, #28
1e044     3C 00 90 CD |  if_b	jmp	#LR__2411
1e048                 | '     long[mailbox][2] := count
1e048     08 02 06 F1 | 	add	_var02, #8
1e04c     01 17 62 FC | 	wrlong	arg03, _var02
1e050                 | '     long[mailbox][1] := srcHubAddr
1e050     04 02 86 F1 | 	sub	_var02, #4
1e054     01 13 62 FC | 	wrlong	arg01, _var02
1e058     04 02 86 F1 | 	sub	_var02, #4
1e05c                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
1e05c     0A 05 02 F6 | 	mov	_var03, arg02
1e060     D9 04 06 F4 | 	bitl	_var03, #217
1e064     00 00 78 FF 
1e068     00 00 06 F6 | 	mov	_var01, ##-268435456
1e06c     02 01 02 F1 | 	add	_var01, _var03
1e070     01 01 62 FC | 	wrlong	_var01, _var02
1e074                 | '     repeat
1e074                 | LR__2410
1e074                 | '         result := long[mailbox]    
1e074     01 05 02 FB | 	rdlong	_var03, _var02
1e078     00 04 56 F2 | 	cmps	_var03, #0 wc
1e07c     F4 FF 9F CD |  if_b	jmp	#LR__2410
1e080                 | '     while result < 0   
1e080                 | '     return -result                       'return success or error
1e080     02 FB 61 F6 | 	neg	result1, _var03
1e084                 | LR__2411
1e084                 | _psram_spin2_write_ret
1e084     2D 00 64 FD | 	ret
1e088                 | 
1e088                 | ' 
1e088                 | ' ' generalized fill
1e088                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1e088                 | _psram_spin2_fill
1e088     09 01 02 F6 | 	mov	_var01, arg01
1e08c     0A 03 02 F6 | 	mov	_var02, arg02
1e090     0B 05 02 F6 | 	mov	_var03, arg03
1e094     0D 07 02 F6 | 	mov	_var04, arg05
1e098                 | '     case datasize 
1e098     01 06 86 F1 | 	sub	_var04, #1
1e09c     04 06 26 F3 | 	fle	_var04, #4
1e0a0     30 06 62 FD | 	jmprel	_var04
1e0a4                 | LR__2420
1e0a4     10 00 90 FD | 	jmp	#LR__2421
1e0a8     18 00 90 FD | 	jmp	#LR__2422
1e0ac     2C 00 90 FD | 	jmp	#LR__2424
1e0b0     1C 00 90 FD | 	jmp	#LR__2423
1e0b4     24 00 90 FD | 	jmp	#LR__2424
1e0b8                 | LR__2421
1e0b8                 | '         1: req := driver.R_WRITEBYTE
1e0b8     00 00 60 FF 
1e0bc     00 08 06 F6 | 	mov	_var05, ##-1073741824
1e0c0     20 00 90 FD | 	jmp	#LR__2425
1e0c4                 | LR__2422
1e0c4                 | '         2: req := driver.R_WRITEWORD
1e0c4     00 00 68 FF 
1e0c8     00 08 06 F6 | 	mov	_var05, ##-805306368
1e0cc     14 00 90 FD | 	jmp	#LR__2425
1e0d0                 | LR__2423
1e0d0                 | '         4: req := driver.R_WRITELONG
1e0d0     00 00 70 FF 
1e0d4     00 08 06 F6 | 	mov	_var05, ##-536870912
1e0d8     08 00 90 FD | 	jmp	#LR__2425
1e0dc                 | LR__2424
1e0dc                 | '         other : return ERR_INVALID
1e0dc     06 FA 65 F6 | 	neg	result1, #6
1e0e0     94 00 90 FD | 	jmp	#LR__2427
1e0e4                 | LR__2425
1e0e4                 | '     if count == 0   ' nothing to do
1e0e4     00 04 0E F2 | 	cmp	_var03, #0 wz
1e0e8                 | '         return 0
1e0e8     00 FA 05 A6 |  if_e	mov	result1, #0
1e0ec     88 00 90 AD |  if_e	jmp	#LR__2427
1e0f0                 | '     if drivercog == -1
1e0f0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1e0f4     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
1e0f8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1e0fc     FF FF 7F FF 
1e100     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
1e104                 | '         return ERR_INACTIVE
1e104     0F FA 65 A6 |  if_e	neg	result1, #15
1e108     6C 00 90 AD |  if_e	jmp	#LR__2427
1e10c                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
1e10c     00 FA 05 F6 | 	mov	result1, #0
1e110     01 FA 61 FD | 	cogid	result1
1e114     FD 06 02 F6 | 	mov	_var04, result1
1e118     01 06 66 F0 | 	shl	_var04, #1
1e11c     FD 06 02 F1 | 	add	_var04, result1
1e120     02 06 66 F0 | 	shl	_var04, #2
1e124     FF 03 00 FF 
1e128     00 0B 06 F6 | 	mov	_var06, ##524032
1e12c     03 0B 02 F1 | 	add	_var06, _var04
1e130                 | '     if long[mailbox] < 0
1e130     05 07 02 FB | 	rdlong	_var04, _var06
1e134     00 06 56 F2 | 	cmps	_var04, #0 wc
1e138                 | '         return ERR_MAILBOX_BUSY
1e138     1C FA 65 C6 |  if_b	neg	result1, #28
1e13c     38 00 90 CD |  if_b	jmp	#LR__2427
1e140                 | '     long[mailbox][2] := count
1e140     08 0A 06 F1 | 	add	_var06, #8
1e144     05 05 62 FC | 	wrlong	_var03, _var06
1e148                 | '     long[mailbox][1] := pattern
1e148     04 0A 86 F1 | 	sub	_var06, #4
1e14c     05 03 62 FC | 	wrlong	_var02, _var06
1e150     04 0A 86 F1 | 	sub	_var06, #4
1e154                 | '     long[mailbox] := req + (addr & $1ffffff)
1e154     04 0D 02 F6 | 	mov	_var07, _var05
1e158     00 0F 02 F6 | 	mov	_var08, _var01
1e15c     D9 0E 06 F4 | 	bitl	_var08, #217
1e160     07 0D 02 F1 | 	add	_var07, _var08
1e164     05 0D 62 FC | 	wrlong	_var07, _var06
1e168                 | '     repeat
1e168                 | LR__2426
1e168                 | '         r := long[mailbox]
1e168     05 0F 02 FB | 	rdlong	_var08, _var06
1e16c     00 0E 56 F2 | 	cmps	_var08, #0 wc
1e170     F4 FF 9F CD |  if_b	jmp	#LR__2426
1e174                 | '     while r < 0
1e174                 | '     return -r                  ' return 0 for success or negated error code
1e174     07 FB 61 F6 | 	neg	result1, _var08
1e178                 | LR__2427
1e178                 | _psram_spin2_fill_ret
1e178     2D 00 64 FD | 	ret
1e17c                 | 
1e17c                 | ' 
1e17c                 | ' '..............................................................................
1e17c                 | ' 
1e17c                 | ' {{
1e17c                 | ' }}
1e17c                 | ' PUB setQos(cog, qos) : result | mailbox
1e17c                 | _psram_spin2_setQos
1e17c     09 01 02 F6 | 	mov	_var01, arg01
1e180                 | '     if drivercog == -1 ' driver must be running
1e180     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1e184     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1e188     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1e18c     FF FF 7F FF 
1e190     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1e194                 | '         return ERR_INACTIVE
1e194     0F FA 65 A6 |  if_e	neg	result1, #15
1e198     9C 00 90 AD |  if_e	jmp	#LR__2434
1e19c                 | '     if cog < 0 or cog > 7 ' enforce cog id range
1e19c     00 00 56 F2 | 	cmps	_var01, #0 wc
1e1a0     08 00 90 CD |  if_b	jmp	#LR__2430
1e1a4     08 00 56 F2 | 	cmps	_var01, #8 wc
1e1a8     08 00 90 CD |  if_b	jmp	#LR__2431
1e1ac                 | LR__2430
1e1ac                 | '         return ERR_INVALID
1e1ac     06 FA 65 F6 | 	neg	result1, #6
1e1b0     84 00 90 FD | 	jmp	#LR__2434
1e1b4                 | LR__2431
1e1b4                 | '     long[@qosData][cog] := qos & !$1ff
1e1b4     FF 15 26 F5 | 	andn	arg02, #511
1e1b8     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1e1bc     02 00 66 F0 | 	shl	_var01, #2
1e1c0     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
1e1c4     00 15 62 FC | 	wrlong	arg02, _var01
1e1c8                 | '     mailbox := $7FF00 + drivercog*12
1e1c8     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
1e1cc     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
1e1d0     02 07 02 F6 | 	mov	_var04, _var03
1e1d4     01 06 66 F0 | 	shl	_var04, #1
1e1d8     02 07 02 F1 | 	add	_var04, _var03
1e1dc     02 06 66 F0 | 	shl	_var04, #2
1e1e0     FF 03 00 FF 
1e1e4     00 09 06 F6 | 	mov	_var05, ##524032
1e1e8     03 09 02 F1 | 	add	_var05, _var04
1e1ec                 | '     repeat until LOCKTRY(driverlock)
1e1ec     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
1e1f0                 | LR__2432
1e1f0     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1e1f4     06 12 72 FD | 	locktry	arg01 wc
1e1f8     F4 FF 9F 3D |  if_ae	jmp	#LR__2432
1e1fc     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1e200                 | '     long[mailbox] := driver.R_CONFIG + cogid()
1e200     00 06 06 F6 | 	mov	_var04, #0
1e204     01 06 62 FD | 	cogid	_var04
1e208     00 00 78 FF 
1e20c     00 02 06 F6 | 	mov	_var02, ##-268435456
1e210     03 03 02 F1 | 	add	_var02, _var04
1e214     04 03 62 FC | 	wrlong	_var02, _var05
1e218                 | '     repeat while long[mailbox] < 0
1e218                 | LR__2433
1e218     04 03 02 FB | 	rdlong	_var02, _var05
1e21c     00 02 56 F2 | 	cmps	_var02, #0 wc
1e220     F4 FF 9F CD |  if_b	jmp	#LR__2433
1e224                 | '     LOCKREL(driverlock)
1e224     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1e228     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1e22c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1e230     07 12 72 FD | 	lockrel	arg01 wc
1e234     00 FA 05 F6 | 	mov	result1, #0
1e238                 | LR__2434
1e238                 | _psram_spin2_setQos_ret
1e238     2D 00 64 FD | 	ret
1e23c                 | 
1e23c                 | ' 
1e23c                 | ' '..............................................................................
1e23c                 | ' 
1e23c                 | ' {{
1e23c                 | ' }}
1e23c                 | ' PRI lookupDelay(freq) : delay | profile
1e23c                 | _psram_spin2_lookupDelay
1e23c                 | '     profile := @delayTable
1e23c     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
1e240     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
1e244                 | '     delay := long[profile][0]
1e244     00 03 02 FB | 	rdlong	_var02, _var01
1e248                 | '     repeat while long[profile][1] 
1e248     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
1e24c     97 16 48 FB | 	callpa	#(@LR__2441-@LR__2440)>>2,fcache_load_ptr_
1e250                 | LR__2440
1e250     04 00 06 F1 | 	add	_var01, #4
1e254     00 FB 09 FB | 	rdlong	result1, _var01 wz
1e258     04 00 86 F1 | 	sub	_var01, #4
1e25c     1C 00 90 AD |  if_e	jmp	#LR__2442
1e260                 | '         if freq +< long[profile][1] 
1e260     04 00 06 F1 | 	add	_var01, #4
1e264     00 FB 01 FB | 	rdlong	result1, _var01
1e268     04 00 86 F1 | 	sub	_var01, #4
1e26c     FD 12 12 F2 | 	cmp	arg01, result1 wc
1e270                 | '             quit
1e270                 | '         profile += 4
1e270     04 00 06 31 |  if_ae	add	_var01, #4
1e274                 | '         delay++
1e274     01 02 06 31 |  if_ae	add	_var02, #1
1e278     D4 FF 9F 3D |  if_ae	jmp	#LR__2440
1e27c                 | LR__2441
1e27c                 | LR__2442
1e27c     01 FB 01 F6 | 	mov	result1, _var02
1e280                 | _psram_spin2_lookupDelay_ret
1e280     2D 00 64 FD | 	ret
1e284                 | 
1e284                 | ' 
1e284                 | ' PUB start() : r
1e284                 | _usbnew_spin2_start
1e284     00 00 06 F6 | 	mov	_var01, #0
1e288                 | '   ifnot driver_cog
1e288     15 00 00 FF 
1e28c     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
1e290     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
1e294     15 00 00 FF 
1e298     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
1e29c     38 00 90 5D |  if_ne	jmp	#LR__2450
1e2a0                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
1e2a0     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
1e2a4     10 00 06 F6 | 	mov	_var01, #16
1e2a8     00 16 06 F6 | 	mov	arg03, #0
1e2ac     28 16 62 FD | 	setq	arg03
1e2b0     0A 01 F2 FC | 	coginit	_var01, arg02 wc
1e2b4     01 00 66 C6 |  if_b	neg	_var01, #1
1e2b8                 | '     if r >= 0
1e2b8     00 00 56 F2 | 	cmps	_var01, #0 wc
1e2bc                 | '       driver_cog := r+1
1e2bc     00 03 02 36 |  if_ae	mov	_var02, _var01
1e2c0     01 02 06 31 |  if_ae	add	_var02, #1
1e2c4     15 00 00 3F 
1e2c8     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
1e2cc     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
1e2d0     15 00 00 3F 
1e2d4     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
1e2d8                 | LR__2450
1e2d8     00 FB 01 F6 | 	mov	result1, _var01
1e2dc                 | _usbnew_spin2_start_ret
1e2dc     2D 00 64 FD | 	ret
1e2e0                 | 
1e2e0                 | '     '' (Always enabled)
1e2e0                 | ' 
1e2e0                 | ' '' Get current pressed state of a keyboard key
1e2e0                 | ' PUB keystate(key) : r | buf[2],tmp
1e2e0                 | _usbnew_spin2_keystate
1e2e0     00 04 06 F6 | 	mov	_var03, #0
1e2e4                 | '   if key >= $E0 && key < $E8
1e2e4     E0 12 56 F2 | 	cmps	arg01, #224 wc
1e2e8     34 00 90 CD |  if_b	jmp	#LR__2460
1e2ec     E8 12 56 F2 | 	cmps	arg01, #232 wc
1e2f0     2C 00 90 3D |  if_ae	jmp	#LR__2460
1e2f4                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
1e2f4     00 FA 05 F6 | 	mov	result1, #0
1e2f8     13 00 00 FF 
1e2fc     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1e300     09 07 02 F6 | 	mov	_var04, arg01
1e304     E0 06 86 F1 | 	sub	_var04, #224
1e308     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
1e30c     03 09 4A F0 | 	shr	_var05, _var04 wz
1e310     13 00 00 FF 
1e314     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1e318     01 FA 65 56 |  if_ne	neg	result1, #1
1e31c     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
1e320                 | LR__2460
1e320                 | '   else
1e320                 | '     '' Do this in inline ASM to ensure atomicity
1e320                 | '     tmp := @hkbd_report
1e320     13 00 00 FF 
1e324     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1e328     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
1e32c                 | '     org
1e32c     13 00 00 FF 
1e330     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1e334     97 1E 48 FB | 	callpa	#(@LR__2462-@LR__2461)>>2,fcache_load_ptr_
1e338                 | LR__2461
1e338 000             | 	org	0
1e338 000 28 02 64 FD | 	setq	#1
1e33c 001 04 01 02 FB | 	rdlong	_var01, _var05
1e340 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
1e344 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
1e348 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
1e34c 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1e350 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
1e354 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1e358 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
1e35c 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1e360 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
1e364 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1e368 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
1e36c 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1e370 00e 01 04 66 A6 |  if_e	neg	_var03, #1
1e374 00f             | LR__2462
1e374                 | 	orgh
1e374     02 FB 01 F6 | 	mov	result1, _var03
1e378                 | _usbnew_spin2_keystate_ret
1e378     2D 00 64 FD | 	ret
1e37c                 | 
1e37c                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
1e37c                 | ' 
1e37c                 | ' '' Return key event from buffer if there is one
1e37c                 | ' PUB get_key() : r | tail
1e37c                 | _usbnew_spin2_get_key
1e37c                 | '   tail := keyq_tail
1e37c     0F 00 00 FF 
1e380     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
1e384     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
1e388                 | '   if keyq_head == tail
1e388     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1e38c     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
1e390     0F 00 00 FF 
1e394     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
1e398     00 03 0A F2 | 	cmp	_var02, _var01 wz
1e39c                 | '     return 0 ' No event
1e39c     00 FA 05 A6 |  if_e	mov	result1, #0
1e3a0     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
1e3a4                 | '   r := keyq_data[tail]
1e3a4     00 03 02 F6 | 	mov	_var02, _var01
1e3a8     02 02 66 F0 | 	shl	_var02, #2
1e3ac     0F 00 00 FF 
1e3b0     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
1e3b4     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
1e3b8     01 FB 01 FB | 	rdlong	result1, _var02
1e3bc                 | '   if ++tail == KEYQUEUE_SIZE
1e3bc     01 00 06 F1 | 	add	_var01, #1
1e3c0     80 00 0E F2 | 	cmp	_var01, #128 wz
1e3c4                 | '     tail := 0
1e3c4     00 00 06 A6 |  if_e	mov	_var01, #0
1e3c8                 | '   keyq_tail := tail
1e3c8     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1e3cc     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
1e3d0     0F 00 00 FF 
1e3d4     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
1e3d8                 | _usbnew_spin2_get_key_ret
1e3d8     2D 00 64 FD | 	ret
1e3dc                 | 
1e3dc                 | ' 
1e3dc                 | ' '' Emulate mouse movement
1e3dc                 | ' PUB mouse_move(x,y)
1e3dc                 | _usbnew_spin2_mouse_move
1e3dc     02 4A 05 F6 | 	mov	COUNT_, #2
1e3e0     A8 00 A0 FD | 	call	#pushregs_
1e3e4     09 1F 02 F6 | 	mov	local01, arg01
1e3e8     0A 21 02 F6 | 	mov	local02, arg02
1e3ec                 | '   mouse_lock := 1
1e3ec     14 00 00 FF 
1e3f0     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1e3f4     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
1e3f8     14 00 00 FF 
1e3fc     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1e400                 | '   waitus(2) ' hope driver is now done
1e400     02 12 06 F6 | 	mov	arg01, #2
1e404     CC 0A B0 FD | 	call	#__system___waitus
1e408                 | '   mouse_xacc := x
1e408     14 00 00 FF 
1e40c     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
1e410     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
1e414                 | '   mouse_yacc := y
1e414     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1e418     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
1e41c                 | '   if mouse_outptr
1e41c     04 00 00 FF 
1e420     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
1e424     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
1e428     0F 00 00 FF 
1e42c     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1e430     24 00 90 AD |  if_e	jmp	#LR__2470
1e434                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
1e434     10 20 66 F0 | 	shl	local02, #16
1e438     0F 1F 32 F9 | 	getword	local01, local01, #0
1e43c     0F 21 42 F5 | 	or	local02, local01
1e440     0F 00 00 FF 
1e444     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
1e448     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
1e44c     0F 00 00 FF 
1e450     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1e454     0F 21 62 FC | 	wrlong	local02, local01
1e458                 | LR__2470
1e458                 | '   mouse_lock := 0
1e458     14 00 00 FF 
1e45c     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1e460     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
1e464     14 00 00 FF 
1e468     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1e46c     A7 F0 03 F6 | 	mov	ptra, fp
1e470     B2 00 A0 FD | 	call	#popregs_
1e474                 | _usbnew_spin2_mouse_move_ret
1e474     2D 00 64 FD | 	ret
1e478                 | 
1e478                 | '     '' Set HAVE_HIDPAD to enable.
1e478                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
1e478                 | ' 
1e478                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
1e478                 | ' PUB hidpad_id(dev) : r
1e478                 | _usbnew_spin2_hidpad_id
1e478                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
1e478     13 00 00 FF 
1e47c     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1e480     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1e484     09 01 02 F6 | 	mov	_var01, arg01
1e488     03 00 66 F0 | 	shl	_var01, #3
1e48c     09 01 82 F1 | 	sub	_var01, arg01
1e490     02 00 66 F0 | 	shl	_var01, #2
1e494     00 FB 01 F1 | 	add	result1, _var01
1e498     FD FA 01 FB | 	rdlong	result1, result1
1e49c     13 00 00 FF 
1e4a0     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1e4a4                 | _usbnew_spin2_hidpad_id_ret
1e4a4     2D 00 64 FD | 	ret
1e4a8                 | 
1e4a8                 | ' 
1e4a8                 | ' '' Get all button states for a device
1e4a8                 | ' PUB hidpad_buttons(dev) : r 
1e4a8                 | _usbnew_spin2_hidpad_buttons
1e4a8                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
1e4a8     13 00 00 FF 
1e4ac     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1e4b0     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1e4b4     09 01 02 F6 | 	mov	_var01, arg01
1e4b8     03 00 66 F0 | 	shl	_var01, #3
1e4bc     09 01 82 F1 | 	sub	_var01, arg01
1e4c0     02 00 66 F0 | 	shl	_var01, #2
1e4c4     00 FB 01 F1 | 	add	result1, _var01
1e4c8     14 FA 05 F1 | 	add	result1, #20
1e4cc     FD FA 01 FB | 	rdlong	result1, result1
1e4d0     13 00 00 FF 
1e4d4     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1e4d8                 | _usbnew_spin2_hidpad_buttons_ret
1e4d8     2D 00 64 FD | 	ret
1e4dc                 | 
1e4dc                 | ' 
1e4dc                 | ' '' Get state of an axis (normalized between -32768 and 32767)
1e4dc                 | ' PUB hidpad_axis(dev,axnum) : r
1e4dc                 | _usbnew_spin2_hidpad_axis
1e4dc                 | '   if axnum +>= 6
1e4dc     06 14 16 F2 | 	cmp	arg02, #6 wc
1e4e0                 | '     return 0
1e4e0     00 FA 05 36 |  if_ae	mov	result1, #0
1e4e4     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
1e4e8                 | '   else 
1e4e8                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
1e4e8     13 00 00 FF 
1e4ec     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1e4f0     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1e4f4     09 01 02 F6 | 	mov	_var01, arg01
1e4f8     03 00 66 F0 | 	shl	_var01, #3
1e4fc     09 01 82 F1 | 	sub	_var01, arg01
1e500     02 00 66 F0 | 	shl	_var01, #2
1e504     00 FB 01 F1 | 	add	result1, _var01
1e508     04 00 06 F6 | 	mov	_var01, #4
1e50c     0A 01 02 F1 | 	add	_var01, arg02
1e510     01 00 66 F0 | 	shl	_var01, #1
1e514     FD 00 02 F1 | 	add	_var01, result1
1e518     00 FB E1 FA | 	rdword	result1, _var01
1e51c     0F FA 65 F7 | 	signx	result1, #15
1e520     13 00 00 FF 
1e524     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1e528                 | _usbnew_spin2_hidpad_axis_ret
1e528     2D 00 64 FD | 	ret
1e52c                 | 
1e52c                 | ' 
1e52c                 | ' 
1e52c                 | ' '--------------------------------------------------------------
1e52c                 | ' '---------- Init the variables, start the cog. ----------------
1e52c                 | ' '--------------------------------------------------------------
1e52c                 | ' 
1e52c                 | ' pub start(mbox,scope,cache) :cog,base | iii
1e52c                 | _audio096_spin2_start
1e52c     04 4A 05 F6 | 	mov	COUNT_, #4
1e530     A8 00 A0 FD | 	call	#pushregs_
1e534     09 1F 02 F6 | 	mov	local01, arg01
1e538                 | ' 
1e538                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
1e538                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
1e538                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
1e538                 | ' 
1e538                 | ' mailboxaddr:=mbox 
1e538     F2 1E 62 FC | 	wrlong	local01, objptr
1e53c                 | ' scope_ptr:=scope
1e53c     04 E4 05 F1 | 	add	objptr, #4
1e540     F2 14 62 FC | 	wrlong	arg02, objptr
1e544                 | ' cache_ptr:=cache
1e544     04 E4 05 F1 | 	add	objptr, #4
1e548     F2 16 62 FC | 	wrlong	arg03, objptr
1e54c                 | ' base:=@channel1[0]
1e54c     04 E4 05 F1 | 	add	objptr, #4
1e550     F2 20 02 F6 | 	mov	local02, objptr
1e554                 | ' 
1e554                 | ' repeat iii from 0 to 7
1e554     00 22 06 F6 | 	mov	local03, #0
1e558     02 00 00 FF 
1e55c     94 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1172
1e560     0C E4 85 F1 | 	sub	objptr, #12
1e564     97 B0 48 FB | 	callpa	#(@LR__2481-@LR__2480)>>2,fcache_load_ptr_
1e568                 | LR__2480
1e568                 | '   long[base+64*iii]:=0
1e568     10 1F 02 F6 | 	mov	local01, local02
1e56c     11 FD 01 F6 | 	mov	result2, local03
1e570     06 FC 65 F0 | 	shl	result2, #6
1e574     FE 1E 02 F1 | 	add	local01, result2
1e578     0F 01 68 FC | 	wrlong	#0, local01
1e57c                 | '   long[base+64*iii+4]:=0
1e57c     10 1F 02 F6 | 	mov	local01, local02
1e580     11 FD 01 F6 | 	mov	result2, local03
1e584     06 FC 65 F0 | 	shl	result2, #6
1e588     FE 1E 02 F1 | 	add	local01, result2
1e58c     04 1E 06 F1 | 	add	local01, #4
1e590     0F 01 68 FC | 	wrlong	#0, local01
1e594                 | '   long[base+64*iii+12]:=0
1e594     10 25 02 F6 | 	mov	local04, local02
1e598     11 1F 02 F6 | 	mov	local01, local03
1e59c     06 1E 66 F0 | 	shl	local01, #6
1e5a0     0F 25 02 F1 | 	add	local04, local01
1e5a4     0C 24 06 F1 | 	add	local04, #12
1e5a8     12 01 68 FC | 	wrlong	#0, local04
1e5ac                 | '   long[base+64*iii+16]:=2 
1e5ac     10 25 02 F6 | 	mov	local04, local02
1e5b0     11 1F 02 F6 | 	mov	local01, local03
1e5b4     06 1E 66 F0 | 	shl	local01, #6
1e5b8     0F 25 02 F1 | 	add	local04, local01
1e5bc     10 24 06 F1 | 	add	local04, #16
1e5c0     12 05 68 FC | 	wrlong	#2, local04
1e5c4                 | '   word[base+64*iii+20]:=0
1e5c4     10 25 02 F6 | 	mov	local04, local02
1e5c8     11 1F 02 F6 | 	mov	local01, local03
1e5cc     06 1E 66 F0 | 	shl	local01, #6
1e5d0     0F 25 02 F1 | 	add	local04, local01
1e5d4     14 24 06 F1 | 	add	local04, #20
1e5d8     12 01 58 FC | 	wrword	#0, local04
1e5dc                 | '   word[base+64*iii+22]:=8192
1e5dc     10 25 02 F6 | 	mov	local04, local02
1e5e0     11 1F 02 F6 | 	mov	local01, local03
1e5e4     06 1E 66 F0 | 	shl	local01, #6
1e5e8     0F 25 02 F1 | 	add	local04, local01
1e5ec     16 24 06 F1 | 	add	local04, #22
1e5f0     10 00 80 FF 
1e5f4     12 01 58 FC | 	wrword	##8192, local04
1e5f8                 | '   word[base+64*iii+24]:=4000+2*iii
1e5f8     11 25 02 F6 | 	mov	local04, local03
1e5fc     01 24 66 F0 | 	shl	local04, #1
1e600     07 00 00 FF 
1e604     A0 1F 06 F6 | 	mov	local01, ##4000
1e608     12 1F 02 F1 | 	add	local01, local04
1e60c     10 25 02 F6 | 	mov	local04, local02
1e610     11 FD 01 F6 | 	mov	result2, local03
1e614     06 FC 65 F0 | 	shl	result2, #6
1e618     FE 24 02 F1 | 	add	local04, result2
1e61c     18 24 06 F1 | 	add	local04, #24
1e620     12 1F 52 FC | 	wrword	local01, local04
1e624                 | '   word[base+64*iii+26]:=2
1e624     10 25 02 F6 | 	mov	local04, local02
1e628     11 1F 02 F6 | 	mov	local01, local03
1e62c     06 1E 66 F0 | 	shl	local01, #6
1e630     0F 25 02 F1 | 	add	local04, local01
1e634     1A 24 06 F1 | 	add	local04, #26
1e638     12 05 58 FC | 	wrword	#2, local04
1e63c                 | '   long [base+64*iii+8]:=@null | $C0000000
1e63c     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
1e640     3E 1E 26 F4 | 	bith	local01, #62
1e644     10 25 02 F6 | 	mov	local04, local02
1e648     11 17 02 F6 | 	mov	arg03, local03
1e64c     06 16 66 F0 | 	shl	arg03, #6
1e650     0B 25 02 F1 | 	add	local04, arg03
1e654     08 24 06 F1 | 	add	local04, #8
1e658     12 1F 62 FC | 	wrlong	local01, local04
1e65c                 | '   long[base+64*iii+32]:=0
1e65c     10 25 02 F6 | 	mov	local04, local02
1e660     11 1F 02 F6 | 	mov	local01, local03
1e664     06 1E 66 F0 | 	shl	local01, #6
1e668     0F 25 02 F1 | 	add	local04, local01
1e66c     20 24 06 F1 | 	add	local04, #32
1e670     12 01 68 FC | 	wrlong	#0, local04
1e674                 | '   long[base+64*iii+36]:=0
1e674     10 25 02 F6 | 	mov	local04, local02
1e678     11 1F 02 F6 | 	mov	local01, local03
1e67c     06 1E 66 F0 | 	shl	local01, #6
1e680     0F 25 02 F1 | 	add	local04, local01
1e684     24 24 06 F1 | 	add	local04, #36
1e688     12 01 68 FC | 	wrlong	#0, local04
1e68c                 | '   long[base+64*iii+40]:=0
1e68c     10 25 02 F6 | 	mov	local04, local02
1e690     11 1F 02 F6 | 	mov	local01, local03
1e694     06 1E 66 F0 | 	shl	local01, #6
1e698     0F 25 02 F1 | 	add	local04, local01
1e69c     28 24 06 F1 | 	add	local04, #40
1e6a0     12 01 68 FC | 	wrlong	#0, local04
1e6a4                 | '   long[base+64*iii+44]:=0
1e6a4     10 25 02 F6 | 	mov	local04, local02
1e6a8     11 1F 02 F6 | 	mov	local01, local03
1e6ac     06 1E 66 F0 | 	shl	local01, #6
1e6b0     0F 25 02 F1 | 	add	local04, local01
1e6b4     2C 24 06 F1 | 	add	local04, #44
1e6b8     12 01 68 FC | 	wrlong	#0, local04
1e6bc     01 22 06 F1 | 	add	local03, #1
1e6c0     08 22 56 F2 | 	cmps	local03, #8 wc
1e6c4     A0 FE 9F CD |  if_b	jmp	#LR__2480
1e6c8                 | LR__2481
1e6c8     02 00 00 FF 
1e6cc     94 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1172
1e6d0                 | '   
1e6d0                 | ' cog:=coginit(16,@audio,@mailboxaddr)
1e6d0     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
1e6d4     F2 16 02 F6 | 	mov	arg03, objptr
1e6d8     10 24 06 F6 | 	mov	local04, #16
1e6dc     28 16 62 FD | 	setq	arg03
1e6e0     0A 25 F2 FC | 	coginit	local04, arg02 wc
1e6e4     01 24 66 C6 |  if_b	neg	local04, #1
1e6e8                 | ' waitms(100)
1e6e8     64 12 06 F6 | 	mov	arg01, #100
1e6ec     78 07 B0 FD | 	call	#__system___waitms
1e6f0                 | ' return cog,base
1e6f0     10 FD 01 F6 | 	mov	result2, local02
1e6f4     12 FB 01 F6 | 	mov	result1, local04
1e6f8     A7 F0 03 F6 | 	mov	ptra, fp
1e6fc     B2 00 A0 FD | 	call	#popregs_
1e700                 | _audio096_spin2_start_ret
1e700     2D 00 64 FD | 	ret
1e704                 | 
1e704                 | ' 
1e704                 | ' ' a simple play procedure to not poke everything. 
1e704                 | ' 
1e704                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
1e704                 | _audio096_spin2_play
1e704     0C E4 05 F1 | 	add	objptr, #12
1e708     F2 00 02 F6 | 	mov	_var01, objptr
1e70c     06 12 66 F0 | 	shl	arg01, #6
1e710     09 01 02 F1 | 	add	_var01, arg01
1e714     00 13 02 F6 | 	mov	arg01, _var01
1e718     0C 12 06 F1 | 	add	arg01, #12
1e71c     09 1B 62 FC | 	wrlong	arg05, arg01
1e720     00 1C 56 F2 | 	cmps	arg06, #0 wc
1e724     00 13 02 36 |  if_ae	mov	arg01, _var01
1e728     10 12 06 31 |  if_ae	add	arg01, #16
1e72c     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
1e730     02 1A 06 C1 |  if_b	add	arg05, #2
1e734     00 13 02 C6 |  if_b	mov	arg01, _var01
1e738     10 12 06 C1 |  if_b	add	arg01, #16
1e73c     09 1B 62 CC |  if_b	wrlong	arg05, arg01
1e740     0B 13 52 F6 | 	abs	arg01, arg03 wc
1e744     0B 0A 80 FF 
1e748     09 6D 18 FD | 	qdiv	##1316406, arg01
1e74c                 | ' 
1e74c                 | ' base2:=@channel1[0]+64*channel
1e74c                 | ' 
1e74c                 | ' 
1e74c                 | ' long[base2+12]:= len
1e74c                 | ' if loop >=0 
1e74c                 | '   long[base2+16]:= loop
1e74c     0C E4 85 F1 | 	sub	objptr, #12
1e750                 | ' else
1e750                 | '   long[base2+16]:= len+2
1e750                 | ' word[base2+20]:=vol
1e750     00 13 02 F6 | 	mov	arg01, _var01
1e754     14 12 06 F1 | 	add	arg01, #20
1e758     09 19 52 FC | 	wrword	arg04, arg01
1e75c                 | ' word[base2+24]:= 1316406/splfreq 
1e75c     00 19 02 F6 | 	mov	arg04, _var01
1e760     18 18 06 F1 | 	add	arg04, #24
1e764                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1e764                 | ' long[base2+32]:=0    
1e764                 | ' long[base2+36]:=0    
1e764                 | ' long[base2+40]:=0    
1e764                 | ' long[base2+44]:=0    
1e764                 | ' long[base2+8]:=sample+$C0000000     
1e764     00 00 60 FF 
1e768     00 14 06 F1 | 	add	arg02, ##-1073741824
1e76c     18 12 62 FD | 	getqx	arg01
1e770     09 13 82 F6 | 	negc	arg01, arg01
1e774     0C 13 52 FC | 	wrword	arg01, arg04
1e778     00 13 02 F6 | 	mov	arg01, _var01
1e77c     1A 12 06 F1 | 	add	arg01, #26
1e780     09 01 5A FC | 	wrword	#256, arg01
1e784     00 13 02 F6 | 	mov	arg01, _var01
1e788     20 12 06 F1 | 	add	arg01, #32
1e78c     09 01 68 FC | 	wrlong	#0, arg01
1e790     00 13 02 F6 | 	mov	arg01, _var01
1e794     24 12 06 F1 | 	add	arg01, #36
1e798     09 01 68 FC | 	wrlong	#0, arg01
1e79c     00 13 02 F6 | 	mov	arg01, _var01
1e7a0     28 12 06 F1 | 	add	arg01, #40
1e7a4     09 01 68 FC | 	wrlong	#0, arg01
1e7a8     00 13 02 F6 | 	mov	arg01, _var01
1e7ac     2C 12 06 F1 | 	add	arg01, #44
1e7b0     09 01 68 FC | 	wrlong	#0, arg01
1e7b4     08 00 06 F1 | 	add	_var01, #8
1e7b8     00 15 62 FC | 	wrlong	arg02, _var01
1e7bc                 | _audio096_spin2_play_ret
1e7bc     2D 00 64 FD | 	ret
1e7c0                 | 
1e7c0                 | ' 
1e7c0                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
1e7c0                 | _audio096_spin2_play8
1e7c0                 | ' 
1e7c0                 | ' base2:=@channel1[0]+64*channel
1e7c0     0C E4 05 F1 | 	add	objptr, #12
1e7c4     F2 00 02 F6 | 	mov	_var01, objptr
1e7c8     06 12 66 F0 | 	shl	arg01, #6
1e7cc     09 01 02 F1 | 	add	_var01, arg01
1e7d0                 | ' long[base2]:=0
1e7d0     00 01 68 FC | 	wrlong	#0, _var01
1e7d4                 | ' long[base2+8]:=sample+$40000000 
1e7d4     00 00 20 FF 
1e7d8     00 14 06 F1 | 	add	arg02, ##1073741824
1e7dc     00 13 02 F6 | 	mov	arg01, _var01
1e7e0     08 12 06 F1 | 	add	arg01, #8
1e7e4     09 15 62 FC | 	wrlong	arg02, arg01
1e7e8                 | ' if loop>=0
1e7e8     00 1C 56 F2 | 	cmps	arg06, #0 wc
1e7ec     0C E4 85 F1 | 	sub	objptr, #12
1e7f0     1C 00 90 CD |  if_b	jmp	#LR__2490
1e7f4                 | '   long[base2+12]:=loop
1e7f4     00 15 02 F6 | 	mov	arg02, _var01
1e7f8     0C 14 06 F1 | 	add	arg02, #12
1e7fc     0A 1D 62 FC | 	wrlong	arg06, arg02
1e800                 | '   long[base2+16]:= len
1e800     00 1D 02 F6 | 	mov	arg06, _var01
1e804     10 1C 06 F1 | 	add	arg06, #16
1e808     0E 1B 62 FC | 	wrlong	arg05, arg06
1e80c     1C 00 90 FD | 	jmp	#LR__2491
1e810                 | LR__2490
1e810                 | ' else
1e810                 | '   long[base2+12]:= len
1e810     00 1D 02 F6 | 	mov	arg06, _var01
1e814     0C 1C 06 F1 | 	add	arg06, #12
1e818     0E 1B 62 FC | 	wrlong	arg05, arg06
1e81c                 | '   long[base2+16]:= len+1
1e81c     01 1A 06 F1 | 	add	arg05, #1
1e820     00 13 02 F6 | 	mov	arg01, _var01
1e824     10 12 06 F1 | 	add	arg01, #16
1e828     09 1B 62 FC | 	wrlong	arg05, arg01
1e82c                 | LR__2491
1e82c     0B 17 52 F6 | 	abs	arg03, arg03 wc
1e830     0B 0A 80 FF 
1e834     0B 6D 18 FD | 	qdiv	##1316406, arg03
1e838                 | ' word[base2+20]:=vol
1e838     00 17 02 F6 | 	mov	arg03, _var01
1e83c     14 16 06 F1 | 	add	arg03, #20
1e840     0B 19 52 FC | 	wrword	arg04, arg03
1e844                 | ' word[base2+24]:= 1316406 /splfreq 
1e844     00 13 02 F6 | 	mov	arg01, _var01
1e848     18 12 06 F1 | 	add	arg01, #24
1e84c                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1e84c                 | ' long[base2+28]:=$40000000
1e84c     18 18 62 FD | 	getqx	arg04
1e850     0C 19 82 F6 | 	negc	arg04, arg04
1e854     09 19 52 FC | 	wrword	arg04, arg01
1e858     00 19 02 F6 | 	mov	arg04, _var01
1e85c     1A 18 06 F1 | 	add	arg04, #26
1e860     0C 01 5A FC | 	wrword	#256, arg04
1e864     1C 00 06 F1 | 	add	_var01, #28
1e868     00 00 A0 FF 
1e86c     00 01 68 FC | 	wrlong	##1073741824, _var01
1e870                 | _audio096_spin2_play8_ret
1e870     2D 00 64 FD | 	ret
1e874                 | 
1e874                 | ' 
1e874                 | '     
1e874                 | ' pub stop(channel) 'silence it
1e874                 | _audio096_spin2_stop
1e874                 | ' 
1e874                 | ' word[@channel1[0]+64*channel+20]:=0
1e874     0C E4 05 F1 | 	add	objptr, #12
1e878     F2 00 02 F6 | 	mov	_var01, objptr
1e87c     09 03 02 F6 | 	mov	_var02, arg01
1e880     06 02 66 F0 | 	shl	_var02, #6
1e884     01 01 02 F1 | 	add	_var01, _var02
1e888     14 00 06 F1 | 	add	_var01, #20
1e88c     00 01 58 FC | 	wrword	#0, _var01
1e890                 | ' word[@channel1[0]+64*channel+20]:=0
1e890     F2 00 02 F6 | 	mov	_var01, objptr
1e894     06 12 66 F0 | 	shl	arg01, #6
1e898     09 01 02 F1 | 	add	_var01, arg01
1e89c     14 00 06 F1 | 	add	_var01, #20
1e8a0     00 01 58 FC | 	wrword	#0, _var01
1e8a4     0C E4 85 F1 | 	sub	objptr, #12
1e8a8                 | _audio096_spin2_stop_ret
1e8a8     2D 00 64 FD | 	ret
1e8ac                 | hubexit
1e8ac     81 00 80 FD | 	jmp	#cogexit
1e8b0                 | 
1e8b0                 | __system___setbaud
1e8b0     14 64 06 FB | 	rdlong	muldiva_, #20
1e8b4     09 67 02 F6 | 	mov	muldivb_, arg01
1e8b8     BA 00 A0 FD | 	call	#divide_
1e8bc     97 06 48 FB | 	callpa	#(@LR__2501-@LR__2500)>>2,fcache_load_ptr_
1e8c0                 | LR__2500
1e8c0     3E FA 9D FA | 	rdpin	result1, #62 wc
1e8c4     FE FC A1 F1 | 	subx	result2, result2
1e8c8     F4 FF 9F CD |  if_b	jmp	#LR__2500
1e8cc                 | LR__2501
1e8cc     40 7C 64 FD | 	dirl	#62
1e8d0     40 7E 64 FD | 	dirl	#63
1e8d4     F3 66 62 FC | 	wrlong	muldivb_, ptr___system__dat__
1e8d8     10 66 66 F0 | 	shl	muldivb_, #16
1e8dc     07 14 06 F6 | 	mov	arg02, #7
1e8e0     33 15 02 F1 | 	add	arg02, muldivb_
1e8e4     3E F8 0C FC | 	wrpin	#124, #62
1e8e8     3E 14 16 FC | 	wxpin	arg02, #62
1e8ec     3F 7C 0C FC | 	wrpin	#62, #63
1e8f0     14 14 06 F1 | 	add	arg02, #20
1e8f4     3F 14 16 FC | 	wxpin	arg02, #63
1e8f8     41 7C 64 FD | 	dirh	#62
1e8fc     41 7E 64 FD | 	dirh	#63
1e900                 | __system___setbaud_ret
1e900     2D 00 64 FD | 	ret
1e904                 | 
1e904                 | __system___txraw
1e904     01 4A 05 F6 | 	mov	COUNT_, #1
1e908     A8 00 A0 FD | 	call	#pushregs_
1e90c     09 1F 02 F6 | 	mov	local01, arg01
1e910     97 06 48 FB | 	callpa	#(@LR__2511-@LR__2510)>>2,fcache_load_ptr_
1e914                 | LR__2510
1e914     3E FA 9D FA | 	rdpin	result1, #62 wc
1e918     FE FC A1 F1 | 	subx	result2, result2
1e91c     F4 FF 9F CD |  if_b	jmp	#LR__2510
1e920                 | LR__2511
1e920     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
1e924     C2 01 00 AF 
1e928     00 12 06 A6 |  if_e	mov	arg01, ##230400
1e92c     80 FF BF AD |  if_e	call	#__system___setbaud
1e930     58 7C 64 FD | 	drvl	#62
1e934     3E 1E 26 FC | 	wypin	local01, #62
1e938     01 FA 05 F6 | 	mov	result1, #1
1e93c     A7 F0 03 F6 | 	mov	ptra, fp
1e940     B2 00 A0 FD | 	call	#popregs_
1e944                 | __system___txraw_ret
1e944     2D 00 64 FD | 	ret
1e948                 | 
1e948                 | __system___rxraw
1e948     0D 4A 05 F6 | 	mov	COUNT_, #13
1e94c     A8 00 A0 FD | 	call	#pushregs_
1e950     09 1F 02 F6 | 	mov	local01, arg01
1e954     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1e958     C2 01 00 AF 
1e95c     00 12 06 A6 |  if_e	mov	arg01, ##230400
1e960     4C FF BF AD |  if_e	call	#__system___setbaud
1e964     00 1E 0E F2 | 	cmp	local01, #0 wz
1e968     20 00 90 AD |  if_e	jmp	#LR__2520
1e96c     14 22 06 FB | 	rdlong	local03, #20
1e970     0A 22 46 F0 | 	shr	local03, #10
1e974     11 1F 02 FD | 	qmul	local01, local03
1e978     1A FA 61 FD | 	getct	result1
1e97c     18 24 62 FD | 	getqx	local04
1e980     12 FB 01 F1 | 	add	result1, local04
1e984     FD 26 02 F6 | 	mov	local05, result1
1e988     04 00 90 FD | 	jmp	#LR__2521
1e98c                 | LR__2520
1e98c     00 26 06 F6 | 	mov	local05, #0
1e990                 | LR__2521
1e990     01 28 66 F6 | 	neg	local06, #1
1e994     3F 2A 06 F6 | 	mov	local07, #63
1e998     00 2C 06 F6 | 	mov	local08, #0
1e99c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1e9a0     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
1e9a4     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1e9a8                 | LR__2522
1e9a8     08 2E 16 F4 | 	testb	local09, #8 wc
1e9ac     09 2E 76 F4 | 	testbn	local09, #9 andc
1e9b0     0A 2E 46 F0 | 	shr	local09, #10
1e9b4     01 2C 06 C6 |  if_b	mov	local08, #1
1e9b8     40 7E 6C 3D |  if_ae	testp	#63 wz
1e9bc     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
1e9c0     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
1e9c4     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
1e9c8                 | LR__2523
1e9c8     00 20 06 F6 | 	mov	local02, #0
1e9cc     00 2C 0E F2 | 	cmp	local08, #0 wz
1e9d0     01 20 66 56 |  if_ne	neg	local02, #1
1e9d4     00 30 06 F6 | 	mov	local10, #0
1e9d8     00 22 06 F6 | 	mov	local03, #0
1e9dc     00 1E 0E F2 | 	cmp	local01, #0 wz
1e9e0     01 22 66 56 |  if_ne	neg	local03, #1
1e9e4     00 24 06 F6 | 	mov	local04, #0
1e9e8     00 32 06 F6 | 	mov	local11, #0
1e9ec     1A FA 61 FD | 	getct	result1
1e9f0     FD 34 02 F6 | 	mov	local12, result1
1e9f4     1A 37 02 F6 | 	mov	local13, local12
1e9f8     13 37 82 F1 | 	sub	local13, local05
1e9fc     00 36 56 F2 | 	cmps	local13, #0 wc
1ea00     00 32 26 C6 |  if_b	not	local11, #0
1ea04     00 32 0E F2 | 	cmp	local11, #0 wz
1ea08     00 24 26 56 |  if_ne	not	local04, #0
1ea0c     12 23 CA F7 | 	test	local03, local04 wz
1ea10     00 30 26 56 |  if_ne	not	local10, #0
1ea14     18 21 4A F5 | 	or	local02, local10 wz
1ea18     8C FF 9F AD |  if_e	jmp	#LR__2522
1ea1c     00 2C 0E F2 | 	cmp	local08, #0 wz
1ea20     17 29 02 56 |  if_ne	mov	local06, local09
1ea24     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
1ea28     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1ea2c     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
1ea30     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1ea34     14 FB 01 F6 | 	mov	result1, local06
1ea38     A7 F0 03 F6 | 	mov	ptra, fp
1ea3c     B2 00 A0 FD | 	call	#popregs_
1ea40                 | __system___rxraw_ret
1ea40     2D 00 64 FD | 	ret
1ea44                 | 
1ea44                 | __system___getus
1ea44     1A FC 71 FD | 	getct	result2 wc
1ea48     1A 00 62 FD | 	getct	_var01
1ea4c     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1ea50     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
1ea54     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1ea58     20 00 90 5D |  if_ne	jmp	#LR__2530
1ea5c     14 02 06 FB | 	rdlong	_var02, #20
1ea60     A1 07 00 FF 
1ea64     40 02 16 FD | 	qdiv	_var02, ##1000000
1ea68     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1ea6c     18 FA 61 FD | 	getqx	result1
1ea70     FD 02 02 F6 | 	mov	_var02, result1
1ea74     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1ea78     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1ea7c                 | LR__2530
1ea7c     01 FD 11 FD | 	qdiv	result2, _var02
1ea80     19 FC 61 FD | 	getqy	result2
1ea84     28 FC 61 FD | 	setq	result2
1ea88     01 01 12 FD | 	qdiv	_var01, _var02
1ea8c     18 FA 61 FD | 	getqx	result1
1ea90                 | __system___getus_ret
1ea90     2D 00 64 FD | 	ret
1ea94                 | 
1ea94                 | __system____builtin_memmove
1ea94     09 01 02 F6 | 	mov	_var01, arg01
1ea98     0A 13 52 F2 | 	cmps	arg01, arg02 wc
1ea9c     10 00 90 CD |  if_b	jmp	#LR__2540
1eaa0     0A 03 02 F6 | 	mov	_var02, arg02
1eaa4     0B 03 02 F1 | 	add	_var02, arg03
1eaa8     01 13 52 F2 | 	cmps	arg01, _var02 wc
1eaac     48 00 90 CD |  if_b	jmp	#LR__2546
1eab0                 | LR__2540
1eab0     0B 05 02 F6 | 	mov	_var03, arg03
1eab4     02 04 4E F0 | 	shr	_var03, #2 wz
1eab8     18 00 90 AD |  if_e	jmp	#LR__2545
1eabc     97 0A 48 FB | 	callpa	#(@LR__2543-@LR__2541)>>2,fcache_load_ptr_
1eac0                 | LR__2541
1eac0     02 09 D8 FC | 	rep	@LR__2544, _var03
1eac4                 | LR__2542
1eac4     0A 05 02 FB | 	rdlong	_var03, arg02
1eac8     09 05 62 FC | 	wrlong	_var03, arg01
1eacc     04 12 06 F1 | 	add	arg01, #4
1ead0     04 14 06 F1 | 	add	arg02, #4
1ead4                 | LR__2543
1ead4                 | LR__2544
1ead4                 | LR__2545
1ead4     02 16 CE F7 | 	test	arg03, #2 wz
1ead8     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
1eadc     09 03 52 5C |  if_ne	wrword	_var02, arg01
1eae0     02 12 06 51 |  if_ne	add	arg01, #2
1eae4     02 14 06 51 |  if_ne	add	arg02, #2
1eae8     01 16 CE F7 | 	test	arg03, #1 wz
1eaec     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1eaf0     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
1eaf4     28 00 90 FD | 	jmp	#LR__2552
1eaf8                 | LR__2546
1eaf8     0B 13 02 F1 | 	add	arg01, arg03
1eafc     0B 15 02 F1 | 	add	arg02, arg03
1eb00     0B 07 0A F6 | 	mov	_var04, arg03 wz
1eb04     18 00 90 AD |  if_e	jmp	#LR__2551
1eb08     97 0A 48 FB | 	callpa	#(@LR__2549-@LR__2547)>>2,fcache_load_ptr_
1eb0c                 | LR__2547
1eb0c     03 09 D8 FC | 	rep	@LR__2550, _var04
1eb10                 | LR__2548
1eb10     01 12 86 F1 | 	sub	arg01, #1
1eb14     01 14 86 F1 | 	sub	arg02, #1
1eb18     0A 03 C2 FA | 	rdbyte	_var02, arg02
1eb1c     09 03 42 FC | 	wrbyte	_var02, arg01
1eb20                 | LR__2549
1eb20                 | LR__2550
1eb20                 | LR__2551
1eb20                 | LR__2552
1eb20     00 FB 01 F6 | 	mov	result1, _var01
1eb24                 | __system____builtin_memmove_ret
1eb24     2D 00 64 FD | 	ret
1eb28                 | 
1eb28                 | __system____builtin_strcpy
1eb28     09 01 02 F6 | 	mov	_var01, arg01
1eb2c     97 0A 48 FB | 	callpa	#(@LR__2561-@LR__2560)>>2,fcache_load_ptr_
1eb30                 | LR__2560
1eb30     0A FB C9 FA | 	rdbyte	result1, arg02 wz
1eb34     09 FB 41 FC | 	wrbyte	result1, arg01
1eb38     01 14 06 F1 | 	add	arg02, #1
1eb3c     01 12 06 F1 | 	add	arg01, #1
1eb40     EC FF 9F 5D |  if_ne	jmp	#LR__2560
1eb44                 | LR__2561
1eb44     00 FB 01 F6 | 	mov	result1, _var01
1eb48                 | __system____builtin_strcpy_ret
1eb48     2D 00 64 FD | 	ret
1eb4c                 | 
1eb4c                 | __system____topofstack
1eb4c     00 4A 05 F6 | 	mov	COUNT_, #0
1eb50     A8 00 A0 FD | 	call	#pushregs_
1eb54     08 F0 07 F1 | 	add	ptra, #8
1eb58     04 4E 05 F1 | 	add	fp, #4
1eb5c     A7 12 62 FC | 	wrlong	arg01, fp
1eb60     A7 FA 01 F6 | 	mov	result1, fp
1eb64     04 4E 85 F1 | 	sub	fp, #4
1eb68     A7 F0 03 F6 | 	mov	ptra, fp
1eb6c     B2 00 A0 FD | 	call	#popregs_
1eb70                 | __system____topofstack_ret
1eb70     2D 00 64 FD | 	ret
1eb74                 | 
1eb74                 | __system___lockmem
1eb74     00 FA 05 F6 | 	mov	result1, #0
1eb78     01 FA 61 FD | 	cogid	result1
1eb7c     00 FB 05 F1 | 	add	result1, #256
1eb80                 | LR__2570
1eb80     09 01 0A FB | 	rdlong	_var01, arg01 wz
1eb84     09 FB 61 AC |  if_e	wrlong	result1, arg01
1eb88     09 01 02 AB |  if_e	rdlong	_var01, arg01
1eb8c     09 01 02 AB |  if_e	rdlong	_var01, arg01
1eb90     FD 00 0A F2 | 	cmp	_var01, result1 wz
1eb94     E8 FF 9F 5D |  if_ne	jmp	#LR__2570
1eb98                 | __system___lockmem_ret
1eb98     2D 00 64 FD | 	ret
1eb9c                 | 
1eb9c                 | __system___string_cmp
1eb9c     97 14 48 FB | 	callpa	#(@LR__2581-@LR__2580)>>2,fcache_load_ptr_
1eba0                 | LR__2580
1eba0     09 01 C2 FA | 	rdbyte	_var01, arg01
1eba4     0A 03 C2 FA | 	rdbyte	_var02, arg02
1eba8     00 05 02 F6 | 	mov	_var03, _var01
1ebac     01 05 8A F1 | 	sub	_var03, _var02 wz
1ebb0     01 12 06 F1 | 	add	arg01, #1
1ebb4     01 14 06 F1 | 	add	arg02, #1
1ebb8     0C 00 90 5D |  if_ne	jmp	#LR__2582
1ebbc     00 00 0E F2 | 	cmp	_var01, #0 wz
1ebc0     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
1ebc4     D8 FF 9F 5D |  if_ne	jmp	#LR__2580
1ebc8                 | LR__2581
1ebc8                 | LR__2582
1ebc8     02 FB 01 F6 | 	mov	result1, _var03
1ebcc                 | __system___string_cmp_ret
1ebcc     2D 00 64 FD | 	ret
1ebd0                 | 
1ebd0                 | __system___string_concat
1ebd0     05 4A 05 F6 | 	mov	COUNT_, #5
1ebd4     A8 00 A0 FD | 	call	#pushregs_
1ebd8     09 1F 02 F6 | 	mov	local01, arg01
1ebdc     0A 21 02 F6 | 	mov	local02, arg02
1ebe0     0F 13 02 F6 | 	mov	arg01, local01
1ebe4     09 23 02 F6 | 	mov	local03, arg01
1ebe8     97 06 48 FB | 	callpa	#(@LR__2591-@LR__2590)>>2,fcache_load_ptr_
1ebec                 | LR__2590
1ebec     11 FB C9 FA | 	rdbyte	result1, local03 wz
1ebf0     01 22 06 51 |  if_ne	add	local03, #1
1ebf4     F4 FF 9F 5D |  if_ne	jmp	#LR__2590
1ebf8                 | LR__2591
1ebf8     09 23 82 F1 | 	sub	local03, arg01
1ebfc     11 25 02 F6 | 	mov	local04, local03
1ec00     10 13 02 F6 | 	mov	arg01, local02
1ec04     09 23 02 F6 | 	mov	local03, arg01
1ec08     97 06 48 FB | 	callpa	#(@LR__2593-@LR__2592)>>2,fcache_load_ptr_
1ec0c                 | LR__2592
1ec0c     11 FB C9 FA | 	rdbyte	result1, local03 wz
1ec10     01 22 06 51 |  if_ne	add	local03, #1
1ec14     F4 FF 9F 5D |  if_ne	jmp	#LR__2592
1ec18                 | LR__2593
1ec18     09 23 82 F1 | 	sub	local03, arg01
1ec1c     12 13 02 F6 | 	mov	arg01, local04
1ec20     11 13 02 F1 | 	add	arg01, local03
1ec24     01 12 06 F1 | 	add	arg01, #1
1ec28     94 3D B0 FD | 	call	#__system___gc_alloc_managed
1ec2c     FD 26 0A F6 | 	mov	local05, result1 wz
1ec30     28 00 90 AD |  if_e	jmp	#LR__2594
1ec34     13 13 02 F6 | 	mov	arg01, local05
1ec38     0F 15 02 F6 | 	mov	arg02, local01
1ec3c     12 17 02 F6 | 	mov	arg03, local04
1ec40     50 FE BF FD | 	call	#__system____builtin_memmove
1ec44     13 13 02 F6 | 	mov	arg01, local05
1ec48     12 13 02 F1 | 	add	arg01, local04
1ec4c     01 22 06 F1 | 	add	local03, #1
1ec50     10 15 02 F6 | 	mov	arg02, local02
1ec54     11 17 02 F6 | 	mov	arg03, local03
1ec58     38 FE BF FD | 	call	#__system____builtin_memmove
1ec5c                 | LR__2594
1ec5c     13 FB 01 F6 | 	mov	result1, local05
1ec60     A7 F0 03 F6 | 	mov	ptra, fp
1ec64     B2 00 A0 FD | 	call	#popregs_
1ec68                 | __system___string_concat_ret
1ec68     2D 00 64 FD | 	ret
1ec6c                 | 
1ec6c                 | __system___tx
1ec6c     02 4A 05 F6 | 	mov	COUNT_, #2
1ec70     A8 00 A0 FD | 	call	#pushregs_
1ec74     09 1F 02 F6 | 	mov	local01, arg01
1ec78     0A 1E 0E F2 | 	cmp	local01, #10 wz
1ec7c     18 00 90 5D |  if_ne	jmp	#LR__2600
1ec80     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1ec84     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
1ec88     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1ec8c     02 20 CE F7 | 	test	local02, #2 wz
1ec90     0D 12 06 56 |  if_ne	mov	arg01, #13
1ec94     6C FC BF 5D |  if_ne	call	#__system___txraw
1ec98                 | LR__2600
1ec98     0F 13 02 F6 | 	mov	arg01, local01
1ec9c     64 FC BF FD | 	call	#__system___txraw
1eca0     A7 F0 03 F6 | 	mov	ptra, fp
1eca4     B2 00 A0 FD | 	call	#popregs_
1eca8                 | __system___tx_ret
1eca8     2D 00 64 FD | 	ret
1ecac                 | 
1ecac                 | __system___rx
1ecac     01 4A 05 F6 | 	mov	COUNT_, #1
1ecb0     A8 00 A0 FD | 	call	#pushregs_
1ecb4                 | LR__2610
1ecb4     00 12 06 F6 | 	mov	arg01, #0
1ecb8     8C FC BF FD | 	call	#__system___rxraw
1ecbc     FD 1E 02 F6 | 	mov	local01, result1
1ecc0     FF FF 7F FF 
1ecc4     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
1ecc8     E8 FF 9F AD |  if_e	jmp	#LR__2610
1eccc     0D 1E 0E F2 | 	cmp	local01, #13 wz
1ecd0     14 00 90 5D |  if_ne	jmp	#LR__2611
1ecd4     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1ecd8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1ecdc     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1ece0     02 FA CD F7 | 	test	result1, #2 wz
1ece4     0A 1E 06 56 |  if_ne	mov	local01, #10
1ece8                 | LR__2611
1ece8     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1ecec     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1ecf0     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1ecf4     01 12 CE F7 | 	test	arg01, #1 wz
1ecf8     1C 00 90 AD |  if_e	jmp	#LR__2614
1ecfc     7F 1E 0E F2 | 	cmp	local01, #127 wz
1ed00     0C 00 90 5D |  if_ne	jmp	#LR__2612
1ed04     08 12 06 F6 | 	mov	arg01, #8
1ed08     60 FF BF FD | 	call	#__system___tx
1ed0c     08 00 90 FD | 	jmp	#LR__2613
1ed10                 | LR__2612
1ed10     0F 13 02 F6 | 	mov	arg01, local01
1ed14     54 FF BF FD | 	call	#__system___tx
1ed18                 | LR__2613
1ed18                 | LR__2614
1ed18     0F FB 01 F6 | 	mov	result1, local01
1ed1c     A7 F0 03 F6 | 	mov	ptra, fp
1ed20     B2 00 A0 FD | 	call	#popregs_
1ed24                 | __system___rx_ret
1ed24     2D 00 64 FD | 	ret
1ed28                 | 
1ed28                 | __system___pinwrite
1ed28     09 01 02 F6 | 	mov	_var01, arg01
1ed2c     1F 00 06 F5 | 	and	_var01, #31
1ed30     20 12 CE F7 | 	test	arg01, #32 wz
1ed34     06 12 46 F0 | 	shr	arg01, #6
1ed38     09 13 CA F9 | 	bmask	arg01, arg01
1ed3c     00 13 62 F0 | 	shl	arg01, _var01
1ed40     00 15 62 F0 | 	shl	arg02, _var01
1ed44     1C 00 90 AD |  if_e	jmp	#LR__2620
1ed48     09 F7 43 F5 | 	or	dirb, arg01
1ed4c     FD 01 02 F6 | 	mov	_var01, outb
1ed50     09 01 22 F5 | 	andn	_var01, arg01
1ed54     09 15 02 F5 | 	and	arg02, arg01
1ed58     0A 01 42 F5 | 	or	_var01, arg02
1ed5c     00 FB 03 F6 | 	mov	outb, _var01
1ed60     18 00 90 FD | 	jmp	#LR__2621
1ed64                 | LR__2620
1ed64     09 F5 43 F5 | 	or	dira, arg01
1ed68     FC 01 02 F6 | 	mov	_var01, outa
1ed6c     09 01 22 F5 | 	andn	_var01, arg01
1ed70     09 15 02 F5 | 	and	arg02, arg01
1ed74     0A 01 42 F5 | 	or	_var01, arg02
1ed78     00 F9 03 F6 | 	mov	outa, _var01
1ed7c                 | LR__2621
1ed7c                 | __system___pinwrite_ret
1ed7c     2D 00 64 FD | 	ret
1ed80                 | 
1ed80                 | __system___basic_read_line
1ed80     06 4A 05 F6 | 	mov	COUNT_, #6
1ed84     A8 00 A0 FD | 	call	#pushregs_
1ed88     09 1F 02 F6 | 	mov	local01, arg01
1ed8c     00 20 06 F6 | 	mov	local02, #0
1ed90     18 22 06 F6 | 	mov	local03, #24
1ed94     00 24 06 F6 | 	mov	local04, #0
1ed98     18 12 06 F6 | 	mov	arg01, #24
1ed9c     20 3C B0 FD | 	call	#__system___gc_alloc_managed
1eda0     FD 26 0A F6 | 	mov	local05, result1 wz
1eda4     13 FB 01 A6 |  if_e	mov	result1, local05
1eda8     B0 00 90 AD |  if_e	jmp	#LR__2633
1edac                 | LR__2630
1edac     0F 13 02 F6 | 	mov	arg01, local01
1edb0     8C 0B B0 FD | 	call	#__system___basic_get_char
1edb4     FD 28 02 F6 | 	mov	local06, result1
1edb8     01 28 56 F2 | 	cmps	local06, #1 wc
1edbc     8C 00 90 CD |  if_b	jmp	#LR__2632
1edc0     0A 28 0E F2 | 	cmp	local06, #10 wz
1edc4     10 00 90 5D |  if_ne	jmp	#LR__2631
1edc8     00 24 0E F2 | 	cmp	local04, #0 wz
1edcc     01 20 56 52 |  if_ne	cmps	local02, #1 wc
1edd0     01 20 86 11 |  if_a	sub	local02, #1
1edd4     74 00 90 FD | 	jmp	#LR__2632
1edd8                 | LR__2631
1edd8     0D 28 0E F2 | 	cmp	local06, #13 wz
1eddc     01 24 06 A6 |  if_e	mov	local04, #1
1ede0     00 24 06 56 |  if_ne	mov	local04, #0
1ede4     08 28 0E F2 | 	cmp	local06, #8 wz
1ede8     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
1edec     01 20 56 A2 |  if_e	cmps	local02, #1 wc
1edf0     01 20 86 21 |  if_nc_and_z	sub	local02, #1
1edf4     B4 FF 9F AD |  if_e	jmp	#LR__2630
1edf8     13 17 02 F6 | 	mov	arg03, local05
1edfc     10 17 02 F1 | 	add	arg03, local02
1ee00     0B 29 42 FC | 	wrbyte	local06, arg03
1ee04     01 20 06 F1 | 	add	local02, #1
1ee08     11 21 0A F2 | 	cmp	local02, local03 wz
1ee0c     9C FF 9F 5D |  if_ne	jmp	#LR__2630
1ee10     11 13 02 F6 | 	mov	arg01, local03
1ee14     20 12 06 F1 | 	add	arg01, #32
1ee18     A4 3B B0 FD | 	call	#__system___gc_alloc_managed
1ee1c     FD 28 0A F6 | 	mov	local06, result1 wz
1ee20     14 FB 01 A6 |  if_e	mov	result1, local06
1ee24     34 00 90 AD |  if_e	jmp	#LR__2633
1ee28     14 13 02 F6 | 	mov	arg01, local06
1ee2c     13 15 02 F6 | 	mov	arg02, local05
1ee30     11 17 02 F6 | 	mov	arg03, local03
1ee34     5C FC BF FD | 	call	#__system____builtin_memmove
1ee38     20 22 06 F1 | 	add	local03, #32
1ee3c     13 13 02 F6 | 	mov	arg01, local05
1ee40     B8 3C B0 FD | 	call	#__system___gc_free
1ee44     14 27 02 F6 | 	mov	local05, local06
1ee48     60 FF 9F FD | 	jmp	#LR__2630
1ee4c                 | LR__2632
1ee4c     13 29 02 F6 | 	mov	local06, local05
1ee50     10 29 02 F1 | 	add	local06, local02
1ee54     14 01 48 FC | 	wrbyte	#0, local06
1ee58     13 FB 01 F6 | 	mov	result1, local05
1ee5c                 | LR__2633
1ee5c     A7 F0 03 F6 | 	mov	ptra, fp
1ee60     B2 00 A0 FD | 	call	#popregs_
1ee64                 | __system___basic_read_line_ret
1ee64     2D 00 64 FD | 	ret
1ee68                 | 
1ee68                 | __system___waitms
1ee68     09 01 02 F6 | 	mov	_var01, arg01
1ee6c     1A 02 62 FD | 	getct	_var02
1ee70     14 04 06 FB | 	rdlong	_var03, #20
1ee74     97 14 48 FB | 	callpa	#(@LR__2641-@LR__2640)>>2,fcache_load_ptr_
1ee78                 | LR__2640
1ee78     01 00 00 FF 
1ee7c     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
1ee80     1C 00 90 CD |  if_b	jmp	#LR__2642
1ee84     02 03 02 F1 | 	add	_var02, _var03
1ee88     01 13 02 F6 | 	mov	arg01, _var02
1ee8c     00 12 66 FA | 	addct1	arg01, #0
1ee90     24 22 60 FD | 	waitct1
1ee94     01 00 00 FF 
1ee98     E8 01 86 F1 | 	sub	_var01, ##1000
1ee9c     D8 FF 9F FD | 	jmp	#LR__2640
1eea0                 | LR__2641
1eea0                 | LR__2642
1eea0     01 00 56 F2 | 	cmps	_var01, #1 wc
1eea4     28 00 90 CD |  if_b	jmp	#LR__2643
1eea8     02 01 02 FD | 	qmul	_var01, _var03
1eeac     01 00 00 FF 
1eeb0     E8 17 06 F6 | 	mov	arg03, ##1000
1eeb4     19 FA 61 FD | 	getqy	result1
1eeb8     18 12 62 FD | 	getqx	arg01
1eebc     28 FA 61 FD | 	setq	result1
1eec0     0B 13 12 FD | 	qdiv	arg01, arg03
1eec4     18 12 62 FD | 	getqx	arg01
1eec8     01 13 62 FA | 	addct1	arg01, _var02
1eecc     24 22 60 FD | 	waitct1
1eed0                 | LR__2643
1eed0                 | __system___waitms_ret
1eed0     2D 00 64 FD | 	ret
1eed4                 | 
1eed4                 | __system___waitus
1eed4     09 01 02 F6 | 	mov	_var01, arg01
1eed8     1A 02 62 FD | 	getct	_var02
1eedc     14 04 06 FB | 	rdlong	_var03, #20
1eee0     97 14 48 FB | 	callpa	#(@LR__2651-@LR__2650)>>2,fcache_load_ptr_
1eee4                 | LR__2650
1eee4     A1 07 00 FF 
1eee8     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
1eeec     1C 00 90 CD |  if_b	jmp	#LR__2652
1eef0     02 03 02 F1 | 	add	_var02, _var03
1eef4     01 13 02 F6 | 	mov	arg01, _var02
1eef8     00 12 66 FA | 	addct1	arg01, #0
1eefc     24 22 60 FD | 	waitct1
1ef00     A1 07 00 FF 
1ef04     40 00 86 F1 | 	sub	_var01, ##1000000
1ef08     D8 FF 9F FD | 	jmp	#LR__2650
1ef0c                 | LR__2651
1ef0c                 | LR__2652
1ef0c     01 00 56 F2 | 	cmps	_var01, #1 wc
1ef10     28 00 90 CD |  if_b	jmp	#LR__2653
1ef14     02 01 02 FD | 	qmul	_var01, _var03
1ef18     A1 07 00 FF 
1ef1c     40 16 06 F6 | 	mov	arg03, ##1000000
1ef20     19 FA 61 FD | 	getqy	result1
1ef24     18 12 62 FD | 	getqx	arg01
1ef28     28 FA 61 FD | 	setq	result1
1ef2c     0B 13 12 FD | 	qdiv	arg01, arg03
1ef30     18 FA 61 FD | 	getqx	result1
1ef34     FD 02 62 FA | 	addct1	_var02, result1
1ef38     24 22 60 FD | 	waitct1
1ef3c                 | LR__2653
1ef3c                 | __system___waitus_ret
1ef3c     2D 00 64 FD | 	ret
1ef40                 | 
1ef40                 | __system___mount
1ef40     0B 4A 05 F6 | 	mov	COUNT_, #11
1ef44     A8 00 A0 FD | 	call	#pushregs_
1ef48     09 1F 02 F6 | 	mov	local01, arg01
1ef4c     0A 21 0A F6 | 	mov	local02, arg02 wz
1ef50     01 22 66 F6 | 	neg	local03, #1
1ef54     01 FA 65 A6 |  if_e	neg	result1, #1
1ef58     98 02 90 AD |  if_e	jmp	#LR__2675
1ef5c     0F FB C1 FA | 	rdbyte	result1, local01
1ef60     2F FA 0D F2 | 	cmp	result1, #47 wz
1ef64     28 00 90 5D |  if_ne	jmp	#LR__2662
1ef68     0F 13 02 F6 | 	mov	arg01, local01
1ef6c     09 25 02 F6 | 	mov	local04, arg01
1ef70     97 06 48 FB | 	callpa	#(@LR__2661-@LR__2660)>>2,fcache_load_ptr_
1ef74                 | LR__2660
1ef74     12 FB C9 FA | 	rdbyte	result1, local04 wz
1ef78     01 24 06 51 |  if_ne	add	local04, #1
1ef7c     F4 FF 9F 5D |  if_ne	jmp	#LR__2660
1ef80                 | LR__2661
1ef80     09 25 82 F1 | 	sub	local04, arg01
1ef84     12 FB 01 F6 | 	mov	result1, local04
1ef88     10 FA 55 F2 | 	cmps	result1, #16 wc
1ef8c     14 00 90 CD |  if_b	jmp	#LR__2663
1ef90                 | LR__2662
1ef90     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1ef94     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
1ef98     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1ef9c     01 FA 65 F6 | 	neg	result1, #1
1efa0     50 02 90 FD | 	jmp	#LR__2675
1efa4                 | LR__2663
1efa4     00 26 06 F6 | 	mov	local05, #0
1efa8                 | LR__2664
1efa8     04 26 56 F2 | 	cmps	local05, #4 wc
1efac     B0 00 90 3D |  if_ae	jmp	#LR__2669
1efb0     13 13 02 F6 | 	mov	arg01, local05
1efb4     02 12 66 F0 | 	shl	arg01, #2
1efb8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1efbc     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1efc0     09 FB 09 FB | 	rdlong	result1, arg01 wz
1efc4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1efc8     00 22 56 A2 |  if_e	cmps	local03, #0 wc
1efcc     13 23 02 86 |  if_c_and_z	mov	local03, local05
1efd0     84 00 90 8D |  if_c_and_z	jmp	#LR__2668
1efd4     13 13 02 F6 | 	mov	arg01, local05
1efd8     02 12 66 F0 | 	shl	arg01, #2
1efdc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1efe0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1efe4     09 13 02 FB | 	rdlong	arg01, arg01
1efe8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1efec     09 25 02 F6 | 	mov	local04, arg01
1eff0     97 06 48 FB | 	callpa	#(@LR__2666-@LR__2665)>>2,fcache_load_ptr_
1eff4                 | LR__2665
1eff4     12 FB C9 FA | 	rdbyte	result1, local04 wz
1eff8     01 24 06 51 |  if_ne	add	local04, #1
1effc     F4 FF 9F 5D |  if_ne	jmp	#LR__2665
1f000                 | LR__2666
1f000     09 25 82 F1 | 	sub	local04, arg01
1f004     12 29 02 F6 | 	mov	local06, local04
1f008     14 13 02 F6 | 	mov	arg01, local06
1f00c     0F 13 02 F1 | 	add	arg01, local01
1f010     09 FB C1 FA | 	rdbyte	result1, arg01
1f014     2F FA 0D F2 | 	cmp	result1, #47 wz
1f018     14 2B 02 56 |  if_ne	mov	local07, local06
1f01c     0F 2B 02 51 |  if_ne	add	local07, local01
1f020     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
1f024     30 00 90 5D |  if_ne	jmp	#LR__2667
1f028     13 17 02 F6 | 	mov	arg03, local05
1f02c     02 16 66 F0 | 	shl	arg03, #2
1f030     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f034     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1f038     0B 15 02 FB | 	rdlong	arg02, arg03
1f03c     0F 13 02 F6 | 	mov	arg01, local01
1f040     14 17 02 F6 | 	mov	arg03, local06
1f044     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f048     B8 4D B0 FD | 	call	#__system__strncmp
1f04c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f050     13 23 02 A6 |  if_e	mov	local03, local05
1f054     08 00 90 AD |  if_e	jmp	#LR__2669
1f058                 | LR__2667
1f058                 | LR__2668
1f058     01 26 06 F1 | 	add	local05, #1
1f05c     48 FF 9F FD | 	jmp	#LR__2664
1f060                 | LR__2669
1f060     FF FF 7F FF 
1f064     FF 23 0E F2 | 	cmp	local03, ##-1 wz
1f068     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
1f06c     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
1f070     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
1f074     01 FA 65 A6 |  if_e	neg	result1, #1
1f078     78 01 90 AD |  if_e	jmp	#LR__2675
1f07c     11 27 02 F6 | 	mov	local05, local03
1f080     13 2B 02 F6 | 	mov	local07, local05
1f084     02 2A 66 F0 | 	shl	local07, #2
1f088     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1f08c     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
1f090     15 29 0A FB | 	rdlong	local06, local07 wz
1f094     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1f098     58 00 90 AD |  if_e	jmp	#LR__2670
1f09c     4C 28 06 F1 | 	add	local06, #76
1f0a0     14 2B 0A FB | 	rdlong	local07, local06 wz
1f0a4     4C 28 86 F1 | 	sub	local06, #76
1f0a8     48 00 90 AD |  if_e	jmp	#LR__2670
1f0ac     4C 28 06 F1 | 	add	local06, #76
1f0b0     14 2B 02 FB | 	rdlong	local07, local06
1f0b4     15 23 02 F6 | 	mov	local03, local07
1f0b8     13 2A 46 F7 | 	zerox	local07, #19
1f0bc     14 22 46 F0 | 	shr	local03, #20
1f0c0     02 22 66 F0 | 	shl	local03, #2
1f0c4     ED 22 02 F1 | 	add	local03, __methods__
1f0c8     11 23 02 FB | 	rdlong	local03, local03
1f0cc     13 29 02 F6 | 	mov	local06, local05
1f0d0     02 28 66 F0 | 	shl	local06, #2
1f0d4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f0d8     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1f0dc     14 13 02 FB | 	rdlong	arg01, local06
1f0e0     F2 28 02 F6 | 	mov	local06, objptr
1f0e4     15 E5 01 F6 | 	mov	objptr, local07
1f0e8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f0ec     2D 22 62 FD | 	call	local03
1f0f0     14 E5 01 F6 | 	mov	objptr, local06
1f0f4                 | LR__2670
1f0f4     13 2D 02 F6 | 	mov	local08, local05
1f0f8     02 2C 66 F0 | 	shl	local08, #2
1f0fc     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1f100     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1f104     16 21 62 FC | 	wrlong	local02, local08
1f108     00 20 0E F2 | 	cmp	local02, #0 wz
1f10c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1f110     18 00 90 5D |  if_ne	jmp	#LR__2671
1f114     02 26 66 F0 | 	shl	local05, #2
1f118     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f11c     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1f120     13 01 68 FC | 	wrlong	#0, local05
1f124     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f128     C4 00 90 FD | 	jmp	#LR__2674
1f12c                 | LR__2671
1f12c     13 2F 02 F6 | 	mov	local09, local05
1f130     04 2E 66 F0 | 	shl	local09, #4
1f134     24 E6 05 F1 | 	add	ptr___system__dat__, #36
1f138     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
1f13c     17 13 02 F6 | 	mov	arg01, local09
1f140     0F 15 02 F6 | 	mov	arg02, local01
1f144     10 16 06 F6 | 	mov	arg03, #16
1f148     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
1f14c     08 4C B0 FD | 	call	#__system__strncpy
1f150     48 20 06 F1 | 	add	local02, #72
1f154     10 2D 0A FB | 	rdlong	local08, local02 wz
1f158     48 20 86 F1 | 	sub	local02, #72
1f15c     7C 00 90 AD |  if_e	jmp	#LR__2673
1f160     48 20 06 F1 | 	add	local02, #72
1f164     10 2D 02 FB | 	rdlong	local08, local02
1f168     16 31 02 F6 | 	mov	local10, local08
1f16c     13 2C 46 F7 | 	zerox	local08, #19
1f170     14 30 46 F0 | 	shr	local10, #20
1f174     02 30 66 F0 | 	shl	local10, #2
1f178     ED 30 02 F1 | 	add	local10, __methods__
1f17c     18 31 02 FB | 	rdlong	local10, local10
1f180     17 13 02 F6 | 	mov	arg01, local09
1f184     F2 32 02 F6 | 	mov	local11, objptr
1f188     16 E5 01 F6 | 	mov	objptr, local08
1f18c     2D 30 62 FD | 	call	local10
1f190     19 E5 01 F6 | 	mov	objptr, local11
1f194     FD 12 0A F6 | 	mov	arg01, result1 wz
1f198     40 00 90 AD |  if_e	jmp	#LR__2672
1f19c     13 2D 02 F6 | 	mov	local08, local05
1f1a0     02 2C 66 F0 | 	shl	local08, #2
1f1a4     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1f1a8     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1f1ac     16 01 68 FC | 	wrlong	#0, local08
1f1b0     02 26 66 F0 | 	shl	local05, #2
1f1b4     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1f1b8     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1f1bc     13 01 68 FC | 	wrlong	#0, local05
1f1c0     09 13 6A F6 | 	neg	arg01, arg01 wz
1f1c4     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
1f1c8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1f1cc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1f1d0     01 FA 65 56 |  if_ne	neg	result1, #1
1f1d4     00 FA 05 A6 |  if_e	mov	result1, #0
1f1d8     18 00 90 FD | 	jmp	#LR__2675
1f1dc                 | LR__2672
1f1dc                 | LR__2673
1f1dc     02 26 66 F0 | 	shl	local05, #2
1f1e0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f1e4     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1f1e8     13 2F 62 FC | 	wrlong	local09, local05
1f1ec     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f1f0                 | LR__2674
1f1f0     00 FA 05 F6 | 	mov	result1, #0
1f1f4                 | LR__2675
1f1f4     A7 F0 03 F6 | 	mov	ptra, fp
1f1f8     B2 00 A0 FD | 	call	#popregs_
1f1fc                 | __system___mount_ret
1f1fc     2D 00 64 FD | 	ret
1f200                 | 
1f200                 | __system___chdir
1f200     00 4A 05 F6 | 	mov	COUNT_, #0
1f204     A8 00 A0 FD | 	call	#pushregs_
1f208     40 F0 07 F1 | 	add	ptra, #64
1f20c     04 4E 05 F1 | 	add	fp, #4
1f210     A7 12 62 FC | 	wrlong	arg01, fp
1f214     04 4E 05 F1 | 	add	fp, #4
1f218     A7 14 02 F6 | 	mov	arg02, fp
1f21c     08 4E 85 F1 | 	sub	fp, #8
1f220     14 48 B0 FD | 	call	#__system__stat
1f224     3C 4E 05 F1 | 	add	fp, #60
1f228     A7 FA 61 FC | 	wrlong	result1, fp
1f22c     3C 4E 85 F1 | 	sub	fp, #60
1f230     00 FA 0D F2 | 	cmp	result1, #0 wz
1f234     3C 4E 05 51 |  if_ne	add	fp, #60
1f238     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1f23c     3C 4E 85 51 |  if_ne	sub	fp, #60
1f240     BC 00 90 5D |  if_ne	jmp	#LR__2682
1f244     10 4E 05 F1 | 	add	fp, #16
1f248     A7 12 02 FB | 	rdlong	arg01, fp
1f24c     10 4E 85 F1 | 	sub	fp, #16
1f250     78 00 00 FF 
1f254     00 12 06 F5 | 	and	arg01, ##61440
1f258     08 00 00 FF 
1f25c     00 12 0E F2 | 	cmp	arg01, ##4096 wz
1f260     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
1f264     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
1f268     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
1f26c     01 FA 65 56 |  if_ne	neg	result1, #1
1f270     8C 00 90 5D |  if_ne	jmp	#LR__2682
1f274     04 4E 05 F1 | 	add	fp, #4
1f278     A7 16 02 FB | 	rdlong	arg03, fp
1f27c     04 4E 85 F1 | 	sub	fp, #4
1f280     0B 17 C2 FA | 	rdbyte	arg03, arg03
1f284     2F 16 0E F2 | 	cmp	arg03, #47 wz
1f288     24 00 90 5D |  if_ne	jmp	#LR__2680
1f28c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1f290     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1f294     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1f298     04 4E 05 F1 | 	add	fp, #4
1f29c     A7 14 02 FB | 	rdlong	arg02, fp
1f2a0     04 4E 85 F1 | 	sub	fp, #4
1f2a4     00 17 06 F6 | 	mov	arg03, #256
1f2a8     AC 4A B0 FD | 	call	#__system__strncpy
1f2ac     4C 00 90 FD | 	jmp	#LR__2681
1f2b0                 | LR__2680
1f2b0     84 E7 05 F1 | 	add	ptr___system__dat__, #388
1f2b4     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1f2b8     38 4E 05 F1 | 	add	fp, #56
1f2bc     A7 12 62 FC | 	wrlong	arg01, fp
1f2c0     38 4E 85 F1 | 	sub	fp, #56
1f2c4     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
1f2c8     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1f2cc     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1f2d0     00 17 06 F6 | 	mov	arg03, #256
1f2d4     80 4A B0 FD | 	call	#__system__strncpy
1f2d8     38 4E 05 F1 | 	add	fp, #56
1f2dc     A7 12 02 FB | 	rdlong	arg01, fp
1f2e0     34 4E 85 F1 | 	sub	fp, #52
1f2e4     A7 14 02 FB | 	rdlong	arg02, fp
1f2e8     04 4E 85 F1 | 	sub	fp, #4
1f2ec     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1f2f0     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
1f2f4     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1f2f8     10 00 B0 FD | 	call	#__system____getvfsforfile
1f2fc                 | LR__2681
1f2fc     00 FA 05 F6 | 	mov	result1, #0
1f300                 | LR__2682
1f300     A7 F0 03 F6 | 	mov	ptra, fp
1f304     B2 00 A0 FD | 	call	#popregs_
1f308                 | __system___chdir_ret
1f308     2D 00 64 FD | 	ret
1f30c                 | 
1f30c                 | __system____getvfsforfile
1f30c     0E 4A 05 F6 | 	mov	COUNT_, #14
1f310     A8 00 A0 FD | 	call	#pushregs_
1f314     09 1F 02 F6 | 	mov	local01, arg01
1f318     0A 21 02 F6 | 	mov	local02, arg02
1f31c     0B 23 02 F6 | 	mov	local03, arg03
1f320     97 10 48 FB | 	callpa	#(@LR__2691-@LR__2690)>>2,fcache_load_ptr_
1f324                 | LR__2690
1f324     10 FB C1 FA | 	rdbyte	result1, local02
1f328     2F FA 0D F2 | 	cmp	result1, #47 wz
1f32c     01 20 06 A1 |  if_e	add	local02, #1
1f330     10 25 C2 AA |  if_e	rdbyte	local04, local02
1f334     01 20 86 A1 |  if_e	sub	local02, #1
1f338     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
1f33c     01 20 06 A1 |  if_e	add	local02, #1
1f340     E0 FF 9F AD |  if_e	jmp	#LR__2690
1f344                 | LR__2691
1f344     10 25 C2 FA | 	rdbyte	local04, local02
1f348     2F 24 0E F2 | 	cmp	local04, #47 wz
1f34c     14 00 90 5D |  if_ne	jmp	#LR__2692
1f350     0F 13 02 F6 | 	mov	arg01, local01
1f354     10 15 02 F6 | 	mov	arg02, local02
1f358     00 17 06 F6 | 	mov	arg03, #256
1f35c     F8 49 B0 FD | 	call	#__system__strncpy
1f360     7C 00 90 FD | 	jmp	#LR__2694
1f364                 | LR__2692
1f364     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1f368     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1f36c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1f370     0F 13 02 F6 | 	mov	arg01, local01
1f374     00 17 06 F6 | 	mov	arg03, #256
1f378     DC 49 B0 FD | 	call	#__system__strncpy
1f37c     10 25 CA FA | 	rdbyte	local04, local02 wz
1f380     5C 00 90 AD |  if_e	jmp	#LR__2693
1f384     10 25 C2 FA | 	rdbyte	local04, local02
1f388     2E 24 0E F2 | 	cmp	local04, #46 wz
1f38c     01 20 06 A1 |  if_e	add	local02, #1
1f390     10 27 C2 AA |  if_e	rdbyte	local05, local02
1f394     01 20 86 A1 |  if_e	sub	local02, #1
1f398     13 29 02 A6 |  if_e	mov	local06, local05
1f39c     07 28 4E A7 |  if_e	zerox	local06, #7 wz
1f3a0     3C 00 90 AD |  if_e	jmp	#LR__2693
1f3a4     0F 27 C2 FA | 	rdbyte	local05, local01
1f3a8     2F 26 0E F2 | 	cmp	local05, #47 wz
1f3ac     01 1E 06 A1 |  if_e	add	local01, #1
1f3b0     0F 25 C2 AA |  if_e	rdbyte	local04, local01
1f3b4     01 1E 86 A1 |  if_e	sub	local01, #1
1f3b8     00 24 4E A2 |  if_e	cmps	local04, #0 wz
1f3bc     70 01 00 5F 
1f3c0     28 15 06 56 |  if_ne	mov	arg02, ##@LR__4750
1f3c4     0F 13 02 56 |  if_ne	mov	arg01, local01
1f3c8     00 17 06 56 |  if_ne	mov	arg03, #256
1f3cc     D4 49 B0 5D |  if_ne	call	#__system__strncat
1f3d0     0F 13 02 F6 | 	mov	arg01, local01
1f3d4     10 15 02 F6 | 	mov	arg02, local02
1f3d8     00 17 06 F6 | 	mov	arg03, #256
1f3dc     C4 49 B0 FD | 	call	#__system__strncat
1f3e0                 | LR__2693
1f3e0                 | LR__2694
1f3e0     0F 13 02 F6 | 	mov	arg01, local01
1f3e4     7C 4B B0 FD | 	call	#__system___normalizeName
1f3e8     0F 25 CA FA | 	rdbyte	local04, local01 wz
1f3ec     1C 00 90 AD |  if_e	jmp	#LR__2695
1f3f0     0F 25 C2 FA | 	rdbyte	local04, local01
1f3f4     2F 24 0E F2 | 	cmp	local04, #47 wz
1f3f8     01 1E 06 A1 |  if_e	add	local01, #1
1f3fc     0F 29 C2 AA |  if_e	rdbyte	local06, local01
1f400     01 1E 86 A1 |  if_e	sub	local01, #1
1f404     00 28 4E A2 |  if_e	cmps	local06, #0 wz
1f408     18 00 90 5D |  if_ne	jmp	#LR__2696
1f40c                 | LR__2695
1f40c     01 00 00 FF 
1f410     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
1f414     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
1f418     01 00 00 FF 
1f41c     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
1f420     EC 01 90 FD | 	jmp	#LR__2710
1f424                 | LR__2696
1f424     00 2A 06 F6 | 	mov	local07, #0
1f428                 | LR__2697
1f428     04 2A 56 F2 | 	cmps	local07, #4 wc
1f42c     CC 01 90 3D |  if_ae	jmp	#LR__2709
1f430     15 29 02 F6 | 	mov	local06, local07
1f434     02 28 66 F0 | 	shl	local06, #2
1f438     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f43c     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1f440     14 29 0A FB | 	rdlong	local06, local06 wz
1f444     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f448     A8 01 90 AD |  if_e	jmp	#LR__2708
1f44c     15 25 02 F6 | 	mov	local04, local07
1f450     02 24 66 F0 | 	shl	local04, #2
1f454     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f458     F3 24 02 F1 | 	add	local04, ptr___system__dat__
1f45c     12 13 02 FB | 	rdlong	arg01, local04
1f460     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f464     09 2D 02 F6 | 	mov	local08, arg01
1f468     97 06 48 FB | 	callpa	#(@LR__2699-@LR__2698)>>2,fcache_load_ptr_
1f46c                 | LR__2698
1f46c     16 FB C9 FA | 	rdbyte	result1, local08 wz
1f470     01 2C 06 51 |  if_ne	add	local08, #1
1f474     F4 FF 9F 5D |  if_ne	jmp	#LR__2698
1f478                 | LR__2699
1f478     09 2D 82 F1 | 	sub	local08, arg01
1f47c     16 2F 02 F6 | 	mov	local09, local08
1f480     17 25 02 F6 | 	mov	local04, local09
1f484     0F 25 02 F1 | 	add	local04, local01
1f488     12 29 C2 FA | 	rdbyte	local06, local04
1f48c     2F 28 0E F2 | 	cmp	local06, #47 wz
1f490     17 31 02 56 |  if_ne	mov	local10, local09
1f494     0F 31 02 51 |  if_ne	add	local10, local01
1f498     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
1f49c     54 01 90 5D |  if_ne	jmp	#LR__2707
1f4a0     15 17 02 F6 | 	mov	arg03, local07
1f4a4     02 16 66 F0 | 	shl	arg03, #2
1f4a8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f4ac     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1f4b0     0B 15 02 FB | 	rdlong	arg02, arg03
1f4b4     17 17 02 F6 | 	mov	arg03, local09
1f4b8     0F 13 02 F6 | 	mov	arg01, local01
1f4bc     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f4c0     40 49 B0 FD | 	call	#__system__strncmp
1f4c4     00 FA 4D F2 | 	cmps	result1, #0 wz
1f4c8     28 01 90 5D |  if_ne	jmp	#LR__2707
1f4cc     15 33 02 F6 | 	mov	local11, local07
1f4d0     02 32 66 F0 | 	shl	local11, #2
1f4d4     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1f4d8     F3 32 02 F1 | 	add	local11, ptr___system__dat__
1f4dc     19 35 02 FB | 	rdlong	local12, local11
1f4e0     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1f4e4     97 22 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
1f4e8                 | LR__2700
1f4e8     17 29 02 F6 | 	mov	local06, local09
1f4ec     01 28 06 F1 | 	add	local06, #1
1f4f0     0F 29 02 F1 | 	add	local06, local01
1f4f4     14 33 C2 FA | 	rdbyte	local11, local06
1f4f8     2E 32 0E F2 | 	cmp	local11, #46 wz
1f4fc     2C 00 90 5D |  if_ne	jmp	#LR__2702
1f500     17 33 02 F6 | 	mov	local11, local09
1f504     02 32 06 F1 | 	add	local11, #2
1f508     0F 33 02 F1 | 	add	local11, local01
1f50c     19 31 C2 FA | 	rdbyte	local10, local11
1f510     2F 30 0E F2 | 	cmp	local10, #47 wz
1f514     17 37 02 56 |  if_ne	mov	local13, local09
1f518     02 36 06 51 |  if_ne	add	local13, #2
1f51c     0F 37 02 51 |  if_ne	add	local13, local01
1f520     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
1f524     01 2E 06 A1 |  if_e	add	local09, #1
1f528     BC FF 9F AD |  if_e	jmp	#LR__2700
1f52c                 | LR__2701
1f52c                 | LR__2702
1f52c     00 22 0E F2 | 	cmp	local03, #0 wz
1f530     11 13 02 56 |  if_ne	mov	arg01, local03
1f534     0F 15 02 56 |  if_ne	mov	arg02, local01
1f538     00 17 06 56 |  if_ne	mov	arg03, #256
1f53c     18 48 B0 5D |  if_ne	call	#__system__strncpy
1f540     0F 15 02 F6 | 	mov	arg02, local01
1f544     17 15 02 F1 | 	add	arg02, local09
1f548     01 14 06 F1 | 	add	arg02, #1
1f54c     0F 13 02 F6 | 	mov	arg01, local01
1f550     D4 F5 BF FD | 	call	#__system____builtin_strcpy
1f554     0F 13 02 F6 | 	mov	arg01, local01
1f558     09 2D 02 F6 | 	mov	local08, arg01
1f55c     97 06 48 FB | 	callpa	#(@LR__2704-@LR__2703)>>2,fcache_load_ptr_
1f560                 | LR__2703
1f560     16 FB C9 FA | 	rdbyte	result1, local08 wz
1f564     01 2C 06 51 |  if_ne	add	local08, #1
1f568     F4 FF 9F 5D |  if_ne	jmp	#LR__2703
1f56c                 | LR__2704
1f56c     09 2D 82 F1 | 	sub	local08, arg01
1f570     16 2F 02 F6 | 	mov	local09, local08
1f574                 | LR__2705
1f574     01 2E 56 F2 | 	cmps	local09, #1 wc
1f578     70 00 90 CD |  if_b	jmp	#LR__2706
1f57c     17 25 02 F6 | 	mov	local04, local09
1f580     0F 25 02 F1 | 	add	local04, local01
1f584     12 33 C2 FA | 	rdbyte	local11, local04
1f588     2F 32 0E F2 | 	cmp	local11, #47 wz
1f58c     17 33 02 A6 |  if_e	mov	local11, local09
1f590     0F 33 02 A1 |  if_e	add	local11, local01
1f594     19 01 48 AC |  if_e	wrbyte	#0, local11
1f598     01 2E 86 A1 |  if_e	sub	local09, #1
1f59c     D4 FF 9F AD |  if_e	jmp	#LR__2705
1f5a0     17 25 02 F6 | 	mov	local04, local09
1f5a4     0F 25 02 F1 | 	add	local04, local01
1f5a8     12 33 C2 FA | 	rdbyte	local11, local04
1f5ac     2E 32 0E F2 | 	cmp	local11, #46 wz
1f5b0     38 00 90 5D |  if_ne	jmp	#LR__2706
1f5b4     02 2E 56 F2 | 	cmps	local09, #2 wc
1f5b8     30 00 90 CD |  if_b	jmp	#LR__2706
1f5bc     17 39 02 F6 | 	mov	local14, local09
1f5c0     01 38 86 F1 | 	sub	local14, #1
1f5c4     0F 39 02 F1 | 	add	local14, local01
1f5c8     1C 27 C2 FA | 	rdbyte	local05, local14
1f5cc     2F 26 0E F2 | 	cmp	local05, #47 wz
1f5d0     18 00 90 5D |  if_ne	jmp	#LR__2706
1f5d4     17 25 02 F6 | 	mov	local04, local09
1f5d8     01 24 86 F1 | 	sub	local04, #1
1f5dc     0F 25 02 F1 | 	add	local04, local01
1f5e0     12 01 48 FC | 	wrbyte	#0, local04
1f5e4     02 2E 86 F1 | 	sub	local09, #2
1f5e8     88 FF 9F FD | 	jmp	#LR__2705
1f5ec                 | LR__2706
1f5ec     1A FB 01 F6 | 	mov	result1, local12
1f5f0     1C 00 90 FD | 	jmp	#LR__2710
1f5f4                 | LR__2707
1f5f4                 | LR__2708
1f5f4     01 2A 06 F1 | 	add	local07, #1
1f5f8     2C FE 9F FD | 	jmp	#LR__2697
1f5fc                 | LR__2709
1f5fc     03 00 00 FF 
1f600     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
1f604     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1f608     03 00 00 FF 
1f60c     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
1f610                 | LR__2710
1f610     A7 F0 03 F6 | 	mov	ptra, fp
1f614     B2 00 A0 FD | 	call	#popregs_
1f618                 | __system____getvfsforfile_ret
1f618     2D 00 64 FD | 	ret
1f61c                 | 
1f61c                 | __system___basic_open
1f61c     05 4A 05 F6 | 	mov	COUNT_, #5
1f620     A8 00 A0 FD | 	call	#pushregs_
1f624     0A 1F 02 F6 | 	mov	local01, arg02
1f628     0B 21 02 F6 | 	mov	local02, arg03
1f62c     0C 23 02 F6 | 	mov	local03, arg04
1f630     00 24 06 F6 | 	mov	local04, #0
1f634     F8 46 B0 FD | 	call	#__system____getftab
1f638     FD 26 0A F6 | 	mov	local05, result1 wz
1f63c     18 00 90 5D |  if_ne	jmp	#LR__2720
1f640     EE 12 02 F6 | 	mov	arg01, abortchain
1f644     0C 14 06 F6 | 	mov	arg02, #12
1f648     01 16 06 F6 | 	mov	arg03, #1
1f64c     DA 00 A0 FD | 	call	#__longjmp
1f650     01 FA 65 F6 | 	neg	result1, #1
1f654     14 01 90 FD | 	jmp	#LR__2729
1f658                 | LR__2720
1f658     08 26 06 F1 | 	add	local05, #8
1f65c     13 FB 09 FB | 	rdlong	result1, local05 wz
1f660     08 26 86 F1 | 	sub	local05, #8
1f664     13 13 02 56 |  if_ne	mov	arg01, local05
1f668     54 3E B0 5D |  if_ne	call	#__system___closeraw
1f66c     00 1E 0E F2 | 	cmp	local01, #0 wz
1f670     00 20 0E A2 |  if_e	cmp	local02, #0 wz
1f674     00 22 0E A2 |  if_e	cmp	local03, #0 wz
1f678     3C 00 90 AD |  if_e	jmp	#LR__2722
1f67c     0C 12 06 F6 | 	mov	arg01, #12
1f680     3C 33 B0 FD | 	call	#__system___gc_alloc_managed
1f684     FD 24 0A F6 | 	mov	local04, result1 wz
1f688     18 00 90 5D |  if_ne	jmp	#LR__2721
1f68c     EE 12 02 F6 | 	mov	arg01, abortchain
1f690     07 14 06 F6 | 	mov	arg02, #7
1f694     01 16 06 F6 | 	mov	arg03, #1
1f698     DA 00 A0 FD | 	call	#__longjmp
1f69c     01 FA 65 F6 | 	neg	result1, #1
1f6a0     C8 00 90 FD | 	jmp	#LR__2729
1f6a4                 | LR__2721
1f6a4     12 01 68 FC | 	wrlong	#0, local04
1f6a8     04 24 06 F1 | 	add	local04, #4
1f6ac     12 01 68 FC | 	wrlong	#0, local04
1f6b0     04 24 86 F1 | 	sub	local04, #4
1f6b4     13 25 62 FC | 	wrlong	local04, local05
1f6b8                 | LR__2722
1f6b8     00 1E 0E F2 | 	cmp	local01, #0 wz
1f6bc     20 00 90 AD |  if_e	jmp	#LR__2723
1f6c0     12 1F 62 FC | 	wrlong	local01, local04
1f6c4     12 FB 01 F6 | 	mov	result1, local04
1f6c8     00 20 04 FF 
1f6cc     00 FA 45 F5 | 	or	result1, ##138412032
1f6d0     1C 26 06 F1 | 	add	local05, #28
1f6d4     13 FB 61 FC | 	wrlong	result1, local05
1f6d8     1C 26 86 F1 | 	sub	local05, #28
1f6dc     0C 00 90 FD | 	jmp	#LR__2724
1f6e0                 | LR__2723
1f6e0     1C 26 06 F1 | 	add	local05, #28
1f6e4     13 01 68 FC | 	wrlong	#0, local05
1f6e8     1C 26 86 F1 | 	sub	local05, #28
1f6ec                 | LR__2724
1f6ec     00 20 0E F2 | 	cmp	local02, #0 wz
1f6f0     28 00 90 AD |  if_e	jmp	#LR__2725
1f6f4     04 24 06 F1 | 	add	local04, #4
1f6f8     12 21 62 FC | 	wrlong	local02, local04
1f6fc     04 24 86 F1 | 	sub	local04, #4
1f700     12 FB 01 F6 | 	mov	result1, local04
1f704     00 28 04 FF 
1f708     00 FA 45 F5 | 	or	result1, ##139460608
1f70c     20 26 06 F1 | 	add	local05, #32
1f710     13 FB 61 FC | 	wrlong	result1, local05
1f714     20 26 86 F1 | 	sub	local05, #32
1f718     0C 00 90 FD | 	jmp	#LR__2726
1f71c                 | LR__2725
1f71c     20 26 06 F1 | 	add	local05, #32
1f720     13 01 68 FC | 	wrlong	#0, local05
1f724     20 26 86 F1 | 	sub	local05, #32
1f728                 | LR__2726
1f728     00 22 0E F2 | 	cmp	local03, #0 wz
1f72c     24 00 90 AD |  if_e	jmp	#LR__2727
1f730     08 24 06 F1 | 	add	local04, #8
1f734     12 23 62 FC | 	wrlong	local03, local04
1f738     08 24 86 F1 | 	sub	local04, #8
1f73c     00 30 04 FF 
1f740     00 24 46 F5 | 	or	local04, ##140509184
1f744     24 26 06 F1 | 	add	local05, #36
1f748     13 25 62 FC | 	wrlong	local04, local05
1f74c     24 26 86 F1 | 	sub	local05, #36
1f750     0C 00 90 FD | 	jmp	#LR__2728
1f754                 | LR__2727
1f754     24 26 06 F1 | 	add	local05, #36
1f758     13 01 68 FC | 	wrlong	#0, local05
1f75c     24 26 86 F1 | 	sub	local05, #36
1f760                 | LR__2728
1f760     08 26 06 F1 | 	add	local05, #8
1f764     13 0F 68 FC | 	wrlong	#7, local05
1f768     00 FA 05 F6 | 	mov	result1, #0
1f76c                 | LR__2729
1f76c     A7 F0 03 F6 | 	mov	ptra, fp
1f770     B2 00 A0 FD | 	call	#popregs_
1f774                 | __system___basic_open_ret
1f774     2D 00 64 FD | 	ret
1f778                 | 
1f778                 | __system___basic_open_string
1f778     04 4A 05 F6 | 	mov	COUNT_, #4
1f77c     A8 00 A0 FD | 	call	#pushregs_
1f780     0A 1F 02 F6 | 	mov	local01, arg02
1f784     0B 21 02 F6 | 	mov	local02, arg03
1f788     A4 45 B0 FD | 	call	#__system____getftab
1f78c     FD 22 0A F6 | 	mov	local03, result1 wz
1f790     18 00 90 5D |  if_ne	jmp	#LR__2730
1f794     EE 12 02 F6 | 	mov	arg01, abortchain
1f798     0C 14 06 F6 | 	mov	arg02, #12
1f79c     01 16 06 F6 | 	mov	arg03, #1
1f7a0     DA 00 A0 FD | 	call	#__longjmp
1f7a4     01 FA 65 F6 | 	neg	result1, #1
1f7a8     58 00 90 FD | 	jmp	#LR__2732
1f7ac                 | LR__2730
1f7ac     08 22 06 F1 | 	add	local03, #8
1f7b0     11 19 0A FB | 	rdlong	arg04, local03 wz
1f7b4     08 22 86 F1 | 	sub	local03, #8
1f7b8     11 13 02 56 |  if_ne	mov	arg01, local03
1f7bc     00 3D B0 5D |  if_ne	call	#__system___closeraw
1f7c0     0F 15 02 F6 | 	mov	arg02, local01
1f7c4     10 17 02 F6 | 	mov	arg03, local02
1f7c8     11 13 02 F6 | 	mov	arg01, local03
1f7cc     B6 19 06 F6 | 	mov	arg04, #438
1f7d0     E8 39 B0 FD | 	call	#__system___openraw
1f7d4     FD 24 02 F6 | 	mov	local04, result1
1f7d8     00 24 56 F2 | 	cmps	local04, #0 wc
1f7dc     20 00 90 3D |  if_ae	jmp	#LR__2731
1f7e0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1f7e4     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1f7e8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1f7ec     EE 12 02 F6 | 	mov	arg01, abortchain
1f7f0     01 16 06 F6 | 	mov	arg03, #1
1f7f4     DA 00 A0 FD | 	call	#__longjmp
1f7f8     01 FA 65 F6 | 	neg	result1, #1
1f7fc     04 00 90 FD | 	jmp	#LR__2732
1f800                 | LR__2731
1f800     12 FB 01 F6 | 	mov	result1, local04
1f804                 | LR__2732
1f804     A7 F0 03 F6 | 	mov	ptra, fp
1f808     B2 00 A0 FD | 	call	#popregs_
1f80c                 | __system___basic_open_string_ret
1f80c     2D 00 64 FD | 	ret
1f810                 | 
1f810                 | __system___basic_print_nl
1f810     0A 14 06 F6 | 	mov	arg02, #10
1f814     00 16 06 F6 | 	mov	arg03, #0
1f818     08 00 B0 FD | 	call	#__system___basic_print_char
1f81c     01 FA 05 F6 | 	mov	result1, #1
1f820                 | __system___basic_print_nl_ret
1f820     2D 00 64 FD | 	ret
1f824                 | 
1f824                 | __system___basic_print_char
1f824     03 4A 05 F6 | 	mov	COUNT_, #3
1f828     A8 00 A0 FD | 	call	#pushregs_
1f82c     0A 1F 02 F6 | 	mov	local01, arg02
1f830     50 4C B0 FD | 	call	#__system___gettxfunc
1f834     FD 20 0A F6 | 	mov	local02, result1 wz
1f838     00 FA 05 A6 |  if_e	mov	result1, #0
1f83c     30 00 90 AD |  if_e	jmp	#LR__2740
1f840     10 23 02 F6 | 	mov	local03, local02
1f844     13 20 46 F7 | 	zerox	local02, #19
1f848     14 22 46 F0 | 	shr	local03, #20
1f84c     02 22 66 F0 | 	shl	local03, #2
1f850     ED 22 02 F1 | 	add	local03, __methods__
1f854     11 23 02 FB | 	rdlong	local03, local03
1f858     0F 13 02 F6 | 	mov	arg01, local01
1f85c     F2 1E 02 F6 | 	mov	local01, objptr
1f860     10 E5 01 F6 | 	mov	objptr, local02
1f864     2D 22 62 FD | 	call	local03
1f868     0F E5 01 F6 | 	mov	objptr, local01
1f86c     01 FA 05 F6 | 	mov	result1, #1
1f870                 | LR__2740
1f870     A7 F0 03 F6 | 	mov	ptra, fp
1f874     B2 00 A0 FD | 	call	#popregs_
1f878                 | __system___basic_print_char_ret
1f878     2D 00 64 FD | 	ret
1f87c                 | 
1f87c                 | __system___basic_print_string
1f87c     03 4A 05 F6 | 	mov	COUNT_, #3
1f880     A8 00 A0 FD | 	call	#pushregs_
1f884     0A 1F 02 F6 | 	mov	local01, arg02
1f888     0B 21 02 F6 | 	mov	local02, arg03
1f88c     F4 4B B0 FD | 	call	#__system___gettxfunc
1f890     FD 22 0A F6 | 	mov	local03, result1 wz
1f894     00 FA 05 A6 |  if_e	mov	result1, #0
1f898     18 00 90 AD |  if_e	jmp	#LR__2750
1f89c     00 1E 0E F2 | 	cmp	local01, #0 wz
1f8a0     00 FA 05 A6 |  if_e	mov	result1, #0
1f8a4     11 13 02 56 |  if_ne	mov	arg01, local03
1f8a8     10 15 02 56 |  if_ne	mov	arg02, local02
1f8ac     0F 17 02 56 |  if_ne	mov	arg03, local01
1f8b0     C0 01 B0 5D |  if_ne	call	#__system___fmtstr
1f8b4                 | LR__2750
1f8b4     A7 F0 03 F6 | 	mov	ptra, fp
1f8b8     B2 00 A0 FD | 	call	#popregs_
1f8bc                 | __system___basic_print_string_ret
1f8bc     2D 00 64 FD | 	ret
1f8c0                 | 
1f8c0                 | __system___basic_print_integer
1f8c0     04 4A 05 F6 | 	mov	COUNT_, #4
1f8c4     A8 00 A0 FD | 	call	#pushregs_
1f8c8     0A 1F 02 F6 | 	mov	local01, arg02
1f8cc     0B 21 02 F6 | 	mov	local02, arg03
1f8d0     0C 23 02 F6 | 	mov	local03, arg04
1f8d4     AC 4B B0 FD | 	call	#__system___gettxfunc
1f8d8     FD 24 0A F6 | 	mov	local04, result1 wz
1f8dc     00 FA 05 A6 |  if_e	mov	result1, #0
1f8e0     12 13 02 56 |  if_ne	mov	arg01, local04
1f8e4     10 15 02 56 |  if_ne	mov	arg02, local02
1f8e8     0F 17 02 56 |  if_ne	mov	arg03, local01
1f8ec     11 19 02 56 |  if_ne	mov	arg04, local03
1f8f0     6C 02 B0 5D |  if_ne	call	#__system___fmtnum
1f8f4     A7 F0 03 F6 | 	mov	ptra, fp
1f8f8     B2 00 A0 FD | 	call	#popregs_
1f8fc                 | __system___basic_print_integer_ret
1f8fc     2D 00 64 FD | 	ret
1f900                 | 
1f900                 | __system___basic_print_unsigned
1f900     03 4A 05 F6 | 	mov	COUNT_, #3
1f904     A8 00 A0 FD | 	call	#pushregs_
1f908     0A 1F 02 F6 | 	mov	local01, arg02
1f90c     0B 21 02 F6 | 	mov	local02, arg03
1f910     0C 23 02 F6 | 	mov	local03, arg04
1f914     6C 4B B0 FD | 	call	#__system___gettxfunc
1f918     FD 12 0A F6 | 	mov	arg01, result1 wz
1f91c     00 FA 05 A6 |  if_e	mov	result1, #0
1f920     3A 20 26 54 |  if_ne	bith	local02, #58
1f924     10 15 02 56 |  if_ne	mov	arg02, local02
1f928     0F 17 02 56 |  if_ne	mov	arg03, local01
1f92c     11 19 02 56 |  if_ne	mov	arg04, local03
1f930     2C 02 B0 5D |  if_ne	call	#__system___fmtnum
1f934     A7 F0 03 F6 | 	mov	ptra, fp
1f938     B2 00 A0 FD | 	call	#popregs_
1f93c                 | __system___basic_print_unsigned_ret
1f93c     2D 00 64 FD | 	ret
1f940                 | 
1f940                 | __system___basic_get_char
1f940     03 4A 05 F6 | 	mov	COUNT_, #3
1f944     A8 00 A0 FD | 	call	#pushregs_
1f948     7C 4B B0 FD | 	call	#__system___getrxfunc
1f94c     FD 1E 0A F6 | 	mov	local01, result1 wz
1f950     01 FA 65 A6 |  if_e	neg	result1, #1
1f954     28 00 90 AD |  if_e	jmp	#LR__2760
1f958     0F 21 02 F6 | 	mov	local02, local01
1f95c     13 1E 46 F7 | 	zerox	local01, #19
1f960     14 20 46 F0 | 	shr	local02, #20
1f964     02 20 66 F0 | 	shl	local02, #2
1f968     ED 20 02 F1 | 	add	local02, __methods__
1f96c     10 21 02 FB | 	rdlong	local02, local02
1f970     F2 22 02 F6 | 	mov	local03, objptr
1f974     0F E5 01 F6 | 	mov	objptr, local01
1f978     2D 20 62 FD | 	call	local02
1f97c     11 E5 01 F6 | 	mov	objptr, local03
1f980                 | LR__2760
1f980     A7 F0 03 F6 | 	mov	ptra, fp
1f984     B2 00 A0 FD | 	call	#popregs_
1f988                 | __system___basic_get_char_ret
1f988     2D 00 64 FD | 	ret
1f98c                 | 
1f98c                 | __system___basic_get
1f98c     04 4A 05 F6 | 	mov	COUNT_, #4
1f990     A8 00 A0 FD | 	call	#pushregs_
1f994     0D 1F 02 F6 | 	mov	local01, arg05
1f998     0F 19 02 FD | 	qmul	arg04, local01
1f99c     09 21 02 F6 | 	mov	local02, arg01
1f9a0     0B 23 02 F6 | 	mov	local03, arg03
1f9a4     00 14 0E F2 | 	cmp	arg02, #0 wz
1f9a8     01 14 86 51 |  if_ne	sub	arg02, #1
1f9ac     10 13 02 56 |  if_ne	mov	arg01, local02
1f9b0     00 16 06 56 |  if_ne	mov	arg03, #0
1f9b4     18 24 62 FD | 	getqx	local04
1f9b8     BC 41 B0 5D |  if_ne	call	#__system__lseek
1f9bc     11 15 02 F6 | 	mov	arg02, local03
1f9c0     12 17 02 F6 | 	mov	arg03, local04
1f9c4     10 13 02 F6 | 	mov	arg01, local02
1f9c8     34 41 B0 FD | 	call	#__system__read
1f9cc     FD 24 02 F6 | 	mov	local04, result1
1f9d0     01 24 56 F2 | 	cmps	local04, #1 wc
1f9d4     10 00 90 CD |  if_b	jmp	#LR__2770
1f9d8     12 65 02 F6 | 	mov	muldiva_, local04
1f9dc     0F 67 02 F6 | 	mov	muldivb_, local01
1f9e0     BA 00 A0 FD | 	call	#divide_
1f9e4     33 25 02 F6 | 	mov	local04, muldivb_
1f9e8                 | LR__2770
1f9e8     12 FB 01 F6 | 	mov	result1, local04
1f9ec     A7 F0 03 F6 | 	mov	ptra, fp
1f9f0     B2 00 A0 FD | 	call	#popregs_
1f9f4                 | __system___basic_get_ret
1f9f4     2D 00 64 FD | 	ret
1f9f8                 | 
1f9f8                 | __system____lockio
1f9f8     10 4B B0 FD | 	call	#__system___getiolock_0484
1f9fc     FD 12 02 F6 | 	mov	arg01, result1
1fa00     70 F1 BF FD | 	call	#__system___lockmem
1fa04     00 FA 05 F6 | 	mov	result1, #0
1fa08                 | __system____lockio_ret
1fa08     2D 00 64 FD | 	ret
1fa0c                 | 
1fa0c                 | __system____unlockio
1fa0c     FC 4A B0 FD | 	call	#__system___getiolock_0484
1fa10     FD 00 68 FC | 	wrlong	#0, result1
1fa14     00 FA 05 F6 | 	mov	result1, #0
1fa18                 | __system____unlockio_ret
1fa18     2D 00 64 FD | 	ret
1fa1c                 | 
1fa1c                 | __system___fmtchar
1fa1c     00 4A 05 F6 | 	mov	COUNT_, #0
1fa20     A8 00 A0 FD | 	call	#pushregs_
1fa24     10 F0 07 F1 | 	add	ptra, #16
1fa28     04 4E 05 F1 | 	add	fp, #4
1fa2c     A7 12 62 FC | 	wrlong	arg01, fp
1fa30     04 4E 05 F1 | 	add	fp, #4
1fa34     A7 14 62 FC | 	wrlong	arg02, fp
1fa38     04 4E 05 F1 | 	add	fp, #4
1fa3c     A7 16 62 FC | 	wrlong	arg03, fp
1fa40     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
1fa44     A7 16 62 FC | 	wrlong	arg03, fp
1fa48     08 4E 85 F1 | 	sub	fp, #8
1fa4c     A7 12 02 FB | 	rdlong	arg01, fp
1fa50     04 4E 05 F1 | 	add	fp, #4
1fa54     A7 14 02 FB | 	rdlong	arg02, fp
1fa58     04 4E 05 F1 | 	add	fp, #4
1fa5c     A7 16 02 F6 | 	mov	arg03, fp
1fa60     0C 4E 85 F1 | 	sub	fp, #12
1fa64     0C 00 B0 FD | 	call	#__system___fmtstr
1fa68     A7 F0 03 F6 | 	mov	ptra, fp
1fa6c     B2 00 A0 FD | 	call	#popregs_
1fa70                 | __system___fmtchar_ret
1fa70     2D 00 64 FD | 	ret
1fa74                 | 
1fa74                 | __system___fmtstr
1fa74     09 4A 05 F6 | 	mov	COUNT_, #9
1fa78     A8 00 A0 FD | 	call	#pushregs_
1fa7c     09 1F 02 F6 | 	mov	local01, arg01
1fa80     0A 21 02 F6 | 	mov	local02, arg02
1fa84     0B 23 02 F6 | 	mov	local03, arg03
1fa88     10 19 E2 F8 | 	getbyte	arg04, local02, #0
1fa8c     11 13 02 F6 | 	mov	arg01, local03
1fa90     09 25 02 F6 | 	mov	local04, arg01
1fa94     97 06 48 FB | 	callpa	#(@LR__2781-@LR__2780)>>2,fcache_load_ptr_
1fa98                 | LR__2780
1fa98     12 FB C9 FA | 	rdbyte	result1, local04 wz
1fa9c     01 24 06 51 |  if_ne	add	local04, #1
1faa0     F4 FF 9F 5D |  if_ne	jmp	#LR__2780
1faa4                 | LR__2781
1faa4     09 25 82 F1 | 	sub	local04, arg01
1faa8     00 18 0E F2 | 	cmp	arg04, #0 wz
1faac     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
1fab0     10 15 02 F6 | 	mov	arg02, local02
1fab4     12 17 02 F6 | 	mov	arg03, local04
1fab8     0F 13 02 F6 | 	mov	arg01, local01
1fabc     02 18 06 F6 | 	mov	arg04, #2
1fac0     60 46 B0 FD | 	call	#__system___fmtpad
1fac4     FD 26 02 F6 | 	mov	local05, result1
1fac8     00 26 56 F2 | 	cmps	local05, #0 wc
1facc     13 FB 01 C6 |  if_b	mov	result1, local05
1fad0     80 00 90 CD |  if_b	jmp	#LR__2784
1fad4     01 24 56 F2 | 	cmps	local04, #1 wc
1fad8     50 00 90 CD |  if_b	jmp	#LR__2783
1fadc     12 29 02 F6 | 	mov	local06, local04
1fae0                 | LR__2782
1fae0     0F 2B 02 F6 | 	mov	local07, local01
1fae4     0F 2D 02 F6 | 	mov	local08, local01
1fae8     13 2A 46 F7 | 	zerox	local07, #19
1faec     14 2C 46 F0 | 	shr	local08, #20
1faf0     02 2C 66 F0 | 	shl	local08, #2
1faf4     ED 2C 02 F1 | 	add	local08, __methods__
1faf8     16 2D 02 FB | 	rdlong	local08, local08
1fafc     11 13 C2 FA | 	rdbyte	arg01, local03
1fb00     F2 2E 02 F6 | 	mov	local09, objptr
1fb04     15 E5 01 F6 | 	mov	objptr, local07
1fb08     01 22 06 F1 | 	add	local03, #1
1fb0c     2D 2C 62 FD | 	call	local08
1fb10     17 E5 01 F6 | 	mov	objptr, local09
1fb14     FD 2E 02 F6 | 	mov	local09, result1
1fb18     00 2E 56 F2 | 	cmps	local09, #0 wc
1fb1c     17 FB 01 C6 |  if_b	mov	result1, local09
1fb20     30 00 90 CD |  if_b	jmp	#LR__2784
1fb24     17 27 02 F1 | 	add	local05, local09
1fb28     ED 29 6E FB | 	djnz	local06, #LR__2782
1fb2c                 | LR__2783
1fb2c     10 15 02 F6 | 	mov	arg02, local02
1fb30     12 17 02 F6 | 	mov	arg03, local04
1fb34     0F 13 02 F6 | 	mov	arg01, local01
1fb38     01 18 06 F6 | 	mov	arg04, #1
1fb3c     E4 45 B0 FD | 	call	#__system___fmtpad
1fb40     FD 2E 02 F6 | 	mov	local09, result1
1fb44     00 2E 56 F2 | 	cmps	local09, #0 wc
1fb48     17 FB 01 C6 |  if_b	mov	result1, local09
1fb4c     17 27 02 31 |  if_ae	add	local05, local09
1fb50     13 FB 01 36 |  if_ae	mov	result1, local05
1fb54                 | LR__2784
1fb54     A7 F0 03 F6 | 	mov	ptra, fp
1fb58     B2 00 A0 FD | 	call	#popregs_
1fb5c                 | __system___fmtstr_ret
1fb5c     2D 00 64 FD | 	ret
1fb60                 | 
1fb60                 | __system___fmtnum
1fb60     0B 4A 05 F6 | 	mov	COUNT_, #11
1fb64     A8 00 A0 FD | 	call	#pushregs_
1fb68     09 1F 02 F6 | 	mov	local01, arg01
1fb6c     0A 21 02 F6 | 	mov	local02, arg02
1fb70     0B 23 02 F6 | 	mov	local03, arg03
1fb74     0C 25 02 F6 | 	mov	local04, arg04
1fb78     F8 27 02 F6 | 	mov	local05, ptra
1fb7c     13 29 02 F6 | 	mov	local06, local05
1fb80     00 2A 06 F6 | 	mov	local07, #0
1fb84     10 2D 02 F6 | 	mov	local08, local02
1fb88     10 2C 46 F0 | 	shr	local08, #16
1fb8c     3F 2C 06 F5 | 	and	local08, #63
1fb90     10 2F E2 F8 | 	getbyte	local09, local02, #0
1fb94     10 31 02 F6 | 	mov	local10, local02
1fb98     1A 30 46 F0 | 	shr	local10, #26
1fb9c     03 30 06 F5 | 	and	local10, #3
1fba0     18 33 02 F6 | 	mov	local11, local10
1fba4     01 2C 56 F2 | 	cmps	local08, #1 wc
1fba8     44 F0 07 F1 | 	add	ptra, #68
1fbac     01 2C 86 31 |  if_ae	sub	local08, #1
1fbb0     41 2E 56 F2 | 	cmps	local09, #65 wc
1fbb4     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
1fbb8     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
1fbbc     03 32 0E F2 | 	cmp	local11, #3 wz
1fbc0     00 32 06 A6 |  if_e	mov	local11, #0
1fbc4     00 22 56 52 |  if_ne	cmps	local03, #0 wc
1fbc8     04 32 06 46 |  if_c_and_nz	mov	local11, #4
1fbcc     11 23 62 46 |  if_c_and_nz	neg	local03, local03
1fbd0     00 32 0E F2 | 	cmp	local11, #0 wz
1fbd4     4C 00 90 AD |  if_e	jmp	#LR__2793
1fbd8     01 2A 06 F6 | 	mov	local07, #1
1fbdc     17 2D 0A F2 | 	cmp	local08, local09 wz
1fbe0     18 00 90 5D |  if_ne	jmp	#LR__2791
1fbe4     05 2C 6E FB | 	djnz	local08, #LR__2790
1fbe8     0F 13 02 F6 | 	mov	arg01, local01
1fbec     10 15 02 F6 | 	mov	arg02, local02
1fbf0     23 16 06 F6 | 	mov	arg03, #35
1fbf4     24 FE BF FD | 	call	#__system___fmtchar
1fbf8     88 00 90 FD | 	jmp	#LR__2797
1fbfc                 | LR__2790
1fbfc                 | LR__2791
1fbfc     02 32 0E F2 | 	cmp	local11, #2 wz
1fc00     14 31 02 A6 |  if_e	mov	local10, local06
1fc04     01 28 06 A1 |  if_e	add	local06, #1
1fc08     18 41 48 AC |  if_e	wrbyte	#32, local10
1fc0c     14 00 90 AD |  if_e	jmp	#LR__2792
1fc10     04 32 0E F2 | 	cmp	local11, #4 wz
1fc14     14 5B 48 AC |  if_e	wrbyte	#45, local06
1fc18     01 28 06 A1 |  if_e	add	local06, #1
1fc1c     14 57 48 5C |  if_ne	wrbyte	#43, local06
1fc20     01 28 06 51 |  if_ne	add	local06, #1
1fc24                 | LR__2792
1fc24                 | LR__2793
1fc24     14 13 02 F6 | 	mov	arg01, local06
1fc28     11 15 02 F6 | 	mov	arg02, local03
1fc2c     12 17 02 F6 | 	mov	arg03, local04
1fc30     16 19 02 F6 | 	mov	arg04, local08
1fc34     00 1A 06 F6 | 	mov	arg05, #0
1fc38     1D 20 2E F4 | 	testbn	local02, #29 wz
1fc3c     01 1A 06 56 |  if_ne	mov	arg05, #1
1fc40     A8 45 B0 FD | 	call	#__system___uitoa
1fc44     FD 2A 02 F1 | 	add	local07, result1
1fc48     17 2B 5A F2 | 	cmps	local07, local09 wcz
1fc4c     24 00 90 ED |  if_be	jmp	#LR__2796
1fc50     97 0E 48 FB | 	callpa	#(@LR__2795-@LR__2794)>>2,fcache_load_ptr_
1fc54                 | LR__2794
1fc54     17 31 02 F6 | 	mov	local10, local09
1fc58     01 30 56 F2 | 	cmps	local10, #1 wc
1fc5c     01 2E 86 F1 | 	sub	local09, #1
1fc60     14 31 02 36 |  if_ae	mov	local10, local06
1fc64     01 28 06 31 |  if_ae	add	local06, #1
1fc68     18 47 48 3C |  if_ae	wrbyte	#35, local10
1fc6c     E4 FF 9F 3D |  if_ae	jmp	#LR__2794
1fc70                 | LR__2795
1fc70     14 01 48 FC | 	wrbyte	#0, local06
1fc74                 | LR__2796
1fc74     0F 13 02 F6 | 	mov	arg01, local01
1fc78     10 15 02 F6 | 	mov	arg02, local02
1fc7c     13 17 02 F6 | 	mov	arg03, local05
1fc80     F0 FD BF FD | 	call	#__system___fmtstr
1fc84                 | LR__2797
1fc84     A7 F0 03 F6 | 	mov	ptra, fp
1fc88     B2 00 A0 FD | 	call	#popregs_
1fc8c                 | __system___fmtnum_ret
1fc8c     2D 00 64 FD | 	ret
1fc90                 | 
1fc90                 | __system___fmtfloat
1fc90     10 4A 05 F6 | 	mov	COUNT_, #16
1fc94     A8 00 A0 FD | 	call	#pushregs_
1fc98     24 F1 07 F1 | 	add	ptra, #292
1fc9c     04 4E 05 F1 | 	add	fp, #4
1fca0     A7 12 62 FC | 	wrlong	arg01, fp
1fca4     04 4E 05 F1 | 	add	fp, #4
1fca8     A7 14 62 FC | 	wrlong	arg02, fp
1fcac     04 4E 05 F1 | 	add	fp, #4
1fcb0     A7 16 62 FC | 	wrlong	arg03, fp
1fcb4     04 4E 05 F1 | 	add	fp, #4
1fcb8     A7 18 62 FC | 	wrlong	arg04, fp
1fcbc     0C 4E 05 F1 | 	add	fp, #12
1fcc0     A7 14 68 FC | 	wrlong	#10, fp
1fcc4     08 4E 05 F1 | 	add	fp, #8
1fcc8     A7 00 68 FC | 	wrlong	#0, fp
1fccc     08 4E 05 F1 | 	add	fp, #8
1fcd0     A7 00 68 FC | 	wrlong	#0, fp
1fcd4     08 4E 05 F1 | 	add	fp, #8
1fcd8     A7 00 68 FC | 	wrlong	#0, fp
1fcdc     04 4E 05 F1 | 	add	fp, #4
1fce0     A7 04 68 FC | 	wrlong	#2, fp
1fce4     04 4E 05 F1 | 	add	fp, #4
1fce8     A7 00 68 FC | 	wrlong	#0, fp
1fcec     04 4E 05 F1 | 	add	fp, #4
1fcf0     A7 00 68 FC | 	wrlong	#0, fp
1fcf4     04 4E 05 F1 | 	add	fp, #4
1fcf8     A7 00 68 FC | 	wrlong	#0, fp
1fcfc     04 4E 05 F1 | 	add	fp, #4
1fd00     A7 00 68 FC | 	wrlong	#0, fp
1fd04     18 4E 05 F1 | 	add	fp, #24
1fd08     A7 00 68 FC | 	wrlong	#0, fp
1fd0c     68 4E 05 F1 | 	add	fp, #104
1fd10     A7 1E 02 F6 | 	mov	local01, fp
1fd14     08 4E 85 F1 | 	sub	fp, #8
1fd18     A7 1E 62 FC | 	wrlong	local01, fp
1fd1c     04 4E 05 F1 | 	add	fp, #4
1fd20     A7 1E 62 FC | 	wrlong	local01, fp
1fd24     BC 4E 85 F1 | 	sub	fp, #188
1fd28     A7 1E 02 FB | 	rdlong	local01, fp
1fd2c     10 1E 46 F0 | 	shr	local01, #16
1fd30     3F 1E 06 F5 | 	and	local01, #63
1fd34     B0 4E 05 F1 | 	add	fp, #176
1fd38     A7 1E 62 FC | 	wrlong	local01, fp
1fd3c     B0 4E 85 F1 | 	sub	fp, #176
1fd40     A7 1E 02 FB | 	rdlong	local01, fp
1fd44     1C 1E 46 F0 | 	shr	local01, #28
1fd48     01 1E 06 F5 | 	and	local01, #1
1fd4c     08 4F 05 F1 | 	add	fp, #264
1fd50     A7 1E 62 FC | 	wrlong	local01, fp
1fd54     58 4E 85 F1 | 	sub	fp, #88
1fd58     A7 1E 0A FB | 	rdlong	local01, fp wz
1fd5c     B8 4E 85 F1 | 	sub	fp, #184
1fd60     3C 00 90 5D |  if_ne	jmp	#LR__2801
1fd64     10 4E 05 F1 | 	add	fp, #16
1fd68     A7 1E 02 FB | 	rdlong	local01, fp
1fd6c     10 4E 85 F1 | 	sub	fp, #16
1fd70     61 1E 0E F2 | 	cmp	local01, #97 wz
1fd74     18 00 90 5D |  if_ne	jmp	#LR__2800
1fd78     B8 4E 05 F1 | 	add	fp, #184
1fd7c     A7 1A 68 FC | 	wrlong	#13, fp
1fd80     84 4E 85 F1 | 	sub	fp, #132
1fd84     A7 02 68 FC | 	wrlong	#1, fp
1fd88     34 4E 85 F1 | 	sub	fp, #52
1fd8c     24 00 90 FD | 	jmp	#LR__2802
1fd90                 | LR__2800
1fd90     B8 4E 05 F1 | 	add	fp, #184
1fd94     A7 0C 68 FC | 	wrlong	#6, fp
1fd98     B8 4E 85 F1 | 	sub	fp, #184
1fd9c     14 00 90 FD | 	jmp	#LR__2802
1fda0                 | LR__2801
1fda0     B8 4E 05 F1 | 	add	fp, #184
1fda4     A7 1E 02 FB | 	rdlong	local01, fp
1fda8     01 1E 86 F1 | 	sub	local01, #1
1fdac     A7 1E 62 FC | 	wrlong	local01, fp
1fdb0     B8 4E 85 F1 | 	sub	fp, #184
1fdb4                 | LR__2802
1fdb4     08 4E 05 F1 | 	add	fp, #8
1fdb8     A7 1E 02 FB | 	rdlong	local01, fp
1fdbc     16 1E 46 F0 | 	shr	local01, #22
1fdc0     03 1E 06 F5 | 	and	local01, #3
1fdc4     04 4F 05 F1 | 	add	fp, #260
1fdc8     A7 1E 62 FC | 	wrlong	local01, fp
1fdcc     04 4F 85 F1 | 	sub	fp, #260
1fdd0     A7 1E 02 FB | 	rdlong	local01, fp
1fdd4     1D 1E 46 F0 | 	shr	local01, #29
1fdd8     01 1E 06 F5 | 	and	local01, #1
1fddc     B4 4E 05 F1 | 	add	fp, #180
1fde0     A7 1E 62 FC | 	wrlong	local01, fp
1fde4     B4 4E 85 F1 | 	sub	fp, #180
1fde8     A7 1E 02 FB | 	rdlong	local01, fp
1fdec     0F 1F EA F8 | 	getbyte	local01, local01, #1
1fdf0     60 4E 05 F1 | 	add	fp, #96
1fdf4     A7 1E 62 FC | 	wrlong	local01, fp
1fdf8     60 4E 85 F1 | 	sub	fp, #96
1fdfc     A7 1E 02 FB | 	rdlong	local01, fp
1fe00     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1fe04     64 4E 05 F1 | 	add	fp, #100
1fe08     A7 1E 62 FC | 	wrlong	local01, fp
1fe0c     00 1E 06 F6 | 	mov	local01, #0
1fe10     5C 4E 85 F1 | 	sub	fp, #92
1fe14     A7 1A 02 FB | 	rdlong	arg05, fp
1fe18     65 1A 0E F2 | 	cmp	arg05, #101 wz
1fe1c     01 1E 06 A6 |  if_e	mov	local01, #1
1fe20     14 4E 05 F1 | 	add	fp, #20
1fe24     A7 1E 62 FC | 	wrlong	local01, fp
1fe28     98 4E 05 F1 | 	add	fp, #152
1fe2c     A7 20 0A FB | 	rdlong	local02, fp wz
1fe30     45 1E 06 56 |  if_ne	mov	local01, #69
1fe34     65 1E 06 A6 |  if_e	mov	local01, #101
1fe38     8C 4E 85 F1 | 	sub	fp, #140
1fe3c     A7 1E 62 FC | 	wrlong	local01, fp
1fe40     20 4E 85 F1 | 	sub	fp, #32
1fe44     A7 1E 02 FB | 	rdlong	local01, fp
1fe48     10 4E 85 F1 | 	sub	fp, #16
1fe4c     61 1E 0E F2 | 	cmp	local01, #97 wz
1fe50     4C 00 90 5D |  if_ne	jmp	#LR__2803
1fe54     24 4E 05 F1 | 	add	fp, #36
1fe58     A7 02 68 FC | 	wrlong	#1, fp
1fe5c     98 4E 05 F1 | 	add	fp, #152
1fe60     A7 20 0A FB | 	rdlong	local02, fp wz
1fe64     50 1E 06 56 |  if_ne	mov	local01, #80
1fe68     70 1E 06 A6 |  if_e	mov	local01, #112
1fe6c     8C 4E 85 F1 | 	sub	fp, #140
1fe70     A7 1E 62 FC | 	wrlong	local01, fp
1fe74     14 4E 85 F1 | 	sub	fp, #20
1fe78     A7 04 68 FC | 	wrlong	#2, fp
1fe7c     1C 4E 05 F1 | 	add	fp, #28
1fe80     A7 02 68 FC | 	wrlong	#1, fp
1fe84     84 4E 05 F1 | 	add	fp, #132
1fe88     A7 20 0A FB | 	rdlong	local02, fp wz
1fe8c     58 1E 06 56 |  if_ne	mov	local01, #88
1fe90     78 1E 06 A6 |  if_e	mov	local01, #120
1fe94     7C 4E 85 F1 | 	sub	fp, #124
1fe98     A7 1E 62 FC | 	wrlong	local01, fp
1fe9c     40 4E 85 F1 | 	sub	fp, #64
1fea0                 | LR__2803
1fea0     10 4E 05 F1 | 	add	fp, #16
1fea4     A7 1E 02 FB | 	rdlong	local01, fp
1fea8     10 4E 85 F1 | 	sub	fp, #16
1feac     23 1E 0E F2 | 	cmp	local01, #35 wz
1feb0     3C 00 90 5D |  if_ne	jmp	#LR__2806
1feb4     48 4E 05 F1 | 	add	fp, #72
1feb8     A7 02 68 FC | 	wrlong	#1, fp
1febc     C8 4E 05 F1 | 	add	fp, #200
1fec0     A7 1E 0A FB | 	rdlong	local01, fp wz
1fec4     10 4F 85 F1 | 	sub	fp, #272
1fec8     18 00 90 AD |  if_e	jmp	#LR__2804
1fecc     10 4E 05 F1 | 	add	fp, #16
1fed0     A7 CC 68 FC | 	wrlong	#102, fp
1fed4     00 4F 05 F1 | 	add	fp, #256
1fed8     A7 00 68 FC | 	wrlong	#0, fp
1fedc     10 4F 85 F1 | 	sub	fp, #272
1fee0     0C 00 90 FD | 	jmp	#LR__2805
1fee4                 | LR__2804
1fee4     10 4F 05 F1 | 	add	fp, #272
1fee8     A7 02 68 FC | 	wrlong	#1, fp
1feec     10 4F 85 F1 | 	sub	fp, #272
1fef0                 | LR__2805
1fef0                 | LR__2806
1fef0     08 4E 05 F1 | 	add	fp, #8
1fef4     A7 1E 02 FB | 	rdlong	local01, fp
1fef8     1A 1E 46 F0 | 	shr	local01, #26
1fefc     03 1E 06 F5 | 	and	local01, #3
1ff00     5C 4E 05 F1 | 	add	fp, #92
1ff04     A7 1E 62 FC | 	wrlong	local01, fp
1ff08     58 4E 85 F1 | 	sub	fp, #88
1ff0c     A7 FA 01 FB | 	rdlong	result1, fp
1ff10     0C 4E 85 F1 | 	sub	fp, #12
1ff14     1F FA 4D F0 | 	shr	result1, #31 wz
1ff18     20 00 90 AD |  if_e	jmp	#LR__2807
1ff1c     2C 4E 05 F1 | 	add	fp, #44
1ff20     A7 5A 68 FC | 	wrlong	#45, fp
1ff24     20 4E 85 F1 | 	sub	fp, #32
1ff28     A7 FA 01 FB | 	rdlong	result1, fp
1ff2c     1F FA E5 F4 | 	bitnot	result1, #31
1ff30     A7 FA 61 FC | 	wrlong	result1, fp
1ff34     0C 4E 85 F1 | 	sub	fp, #12
1ff38     3C 00 90 FD | 	jmp	#LR__2809
1ff3c                 | LR__2807
1ff3c     64 4E 05 F1 | 	add	fp, #100
1ff40     A7 1E 02 FB | 	rdlong	local01, fp
1ff44     64 4E 85 F1 | 	sub	fp, #100
1ff48     01 1E 0E F2 | 	cmp	local01, #1 wz
1ff4c     2C 4E 05 A1 |  if_e	add	fp, #44
1ff50     A7 56 68 AC |  if_e	wrlong	#43, fp
1ff54     2C 4E 85 A1 |  if_e	sub	fp, #44
1ff58     1C 00 90 AD |  if_e	jmp	#LR__2808
1ff5c     64 4E 05 F1 | 	add	fp, #100
1ff60     A7 1E 02 FB | 	rdlong	local01, fp
1ff64     64 4E 85 F1 | 	sub	fp, #100
1ff68     02 1E 0E F2 | 	cmp	local01, #2 wz
1ff6c     2C 4E 05 A1 |  if_e	add	fp, #44
1ff70     A7 40 68 AC |  if_e	wrlong	#32, fp
1ff74     2C 4E 85 A1 |  if_e	sub	fp, #44
1ff78                 | LR__2808
1ff78                 | LR__2809
1ff78     08 4E 05 F1 | 	add	fp, #8
1ff7c     A7 1E 02 FB | 	rdlong	local01, fp
1ff80     18 1E 46 F0 | 	shr	local01, #24
1ff84     03 1E 06 F5 | 	and	local01, #3
1ff88     3C 4E 05 F1 | 	add	fp, #60
1ff8c     A7 1E 62 FC | 	wrlong	local01, fp
1ff90     00 1E 06 F6 | 	mov	local01, #0
1ff94     18 4E 85 F1 | 	sub	fp, #24
1ff98     A7 22 0A FB | 	rdlong	local03, fp wz
1ff9c     2C 4E 85 F1 | 	sub	fp, #44
1ffa0     18 00 90 5D |  if_ne	jmp	#LR__2810
1ffa4     1C 4E 05 F1 | 	add	fp, #28
1ffa8     A7 24 02 FB | 	rdlong	local04, fp
1ffac     1C 4E 85 F1 | 	sub	fp, #28
1ffb0     12 27 02 F6 | 	mov	local05, local04
1ffb4     0A 26 0E F2 | 	cmp	local05, #10 wz
1ffb8     04 00 90 AD |  if_e	jmp	#LR__2811
1ffbc                 | LR__2810
1ffbc     01 1E 66 F5 | 	xor	local01, #1
1ffc0                 | LR__2811
1ffc0     3C 4E 05 F1 | 	add	fp, #60
1ffc4     A7 1E 62 FC | 	wrlong	local01, fp
1ffc8     3C 4E 85 F1 | 	sub	fp, #60
1ffcc     00 1E 0E F2 | 	cmp	local01, #0 wz
1ffd0     0C 01 90 AD |  if_e	jmp	#LR__2813
1ffd4     44 4E 05 F1 | 	add	fp, #68
1ffd8     A7 26 02 FB | 	rdlong	local05, fp
1ffdc     44 4E 85 F1 | 	sub	fp, #68
1ffe0     13 23 02 F6 | 	mov	local03, local05
1ffe4     02 22 0E F2 | 	cmp	local03, #2 wz
1ffe8     F4 00 90 5D |  if_ne	jmp	#LR__2813
1ffec     0C 4F 05 F1 | 	add	fp, #268
1fff0     A7 28 02 FB | 	rdlong	local06, fp
1fff4     0C 4F 85 F1 | 	sub	fp, #268
1fff8     14 25 02 F6 | 	mov	local04, local06
1fffc     02 24 0E F2 | 	cmp	local04, #2 wz
20000     DC 00 90 AD |  if_e	jmp	#LR__2813
20004     C0 4E 05 F1 | 	add	fp, #192
20008     A7 12 02 FB | 	rdlong	arg01, fp
2000c     94 4E 85 F1 | 	sub	fp, #148
20010     A7 14 02 FB | 	rdlong	arg02, fp
20014     14 4E 05 F1 | 	add	fp, #20
20018     A7 16 02 FB | 	rdlong	arg03, fp
2001c     40 4E 85 F1 | 	sub	fp, #64
20020     30 44 B0 FD | 	call	#__system__emitsign_0444
20024     14 4F 05 F1 | 	add	fp, #276
20028     A7 FA 61 FC | 	wrlong	result1, fp
2002c     14 4F 85 F1 | 	sub	fp, #276
20030     00 FA 55 F2 | 	cmps	result1, #0 wc
20034     14 4F 05 C1 |  if_b	add	fp, #276
20038     A7 FA 01 CB |  if_b	rdlong	result1, fp
2003c     14 4F 85 C1 |  if_b	sub	fp, #276
20040     6C 0B 90 CD |  if_b	jmp	#LR__2863
20044     C0 4E 05 F1 | 	add	fp, #192
20048     A7 1E 02 FB | 	rdlong	local01, fp
2004c     54 4E 05 F1 | 	add	fp, #84
20050     A7 26 02 FB | 	rdlong	local05, fp
20054     13 23 02 F6 | 	mov	local03, local05
20058     13 1F 02 F1 | 	add	local01, local05
2005c     54 4E 85 F1 | 	sub	fp, #84
20060     A7 1E 62 FC | 	wrlong	local01, fp
20064     58 4E 85 F1 | 	sub	fp, #88
20068     A7 1E 0A FB | 	rdlong	local01, fp wz
2006c     68 4E 85 F1 | 	sub	fp, #104
20070     60 00 90 AD |  if_e	jmp	#LR__2812
20074     68 4E 05 F1 | 	add	fp, #104
20078     A7 1E 02 FB | 	rdlong	local01, fp
2007c     AC 4E 05 F1 | 	add	fp, #172
20080     A7 22 02 FB | 	rdlong	local03, fp
20084     11 1F 82 F1 | 	sub	local01, local03
20088     AC 4E 85 F1 | 	sub	fp, #172
2008c     A7 1E 62 FC | 	wrlong	local01, fp
20090     68 4E 85 F1 | 	sub	fp, #104
20094     00 1E 56 F2 | 	cmps	local01, #0 wc
20098     68 4E 05 C1 |  if_b	add	fp, #104
2009c     A7 00 68 CC |  if_b	wrlong	#0, fp
200a0     68 4E 85 C1 |  if_b	sub	fp, #104
200a4     08 4E 05 F1 | 	add	fp, #8
200a8     A7 1E 02 FB | 	rdlong	local01, fp
200ac     E8 1E 06 F4 | 	bitl	local01, #232
200b0     A7 1E 62 FC | 	wrlong	local01, fp
200b4     60 4E 05 F1 | 	add	fp, #96
200b8     A7 26 02 FB | 	rdlong	local05, fp
200bc     13 23 02 F6 | 	mov	local03, local05
200c0     08 22 66 F0 | 	shl	local03, #8
200c4     11 1F 42 F5 | 	or	local01, local03
200c8     60 4E 85 F1 | 	sub	fp, #96
200cc     A7 1E 62 FC | 	wrlong	local01, fp
200d0     08 4E 85 F1 | 	sub	fp, #8
200d4                 | LR__2812
200d4     3C 4E 05 F1 | 	add	fp, #60
200d8     A7 00 68 FC | 	wrlong	#0, fp
200dc     3C 4E 85 F1 | 	sub	fp, #60
200e0                 | LR__2813
200e0     0C 4E 05 F1 | 	add	fp, #12
200e4     A7 12 02 FB | 	rdlong	arg01, fp
200e8     0C 4E 85 F1 | 	sub	fp, #12
200ec     04 1F B0 FD | 	call	#__system____builtin_ilogb
200f0     FF FF 3F FF 
200f4     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
200f8     50 00 90 5D |  if_ne	jmp	#LR__2815
200fc     2C 4E 05 F1 | 	add	fp, #44
20100     A7 1E 0A FB | 	rdlong	local01, fp wz
20104     2C 4E 85 F1 | 	sub	fp, #44
20108     24 00 90 AD |  if_e	jmp	#LR__2814
2010c     C0 4E 05 F1 | 	add	fp, #192
20110     A7 20 02 FB | 	rdlong	local02, fp
20114     10 23 02 F6 | 	mov	local03, local02
20118     01 22 06 F1 | 	add	local03, #1
2011c     A7 22 62 FC | 	wrlong	local03, fp
20120     94 4E 85 F1 | 	sub	fp, #148
20124     A7 24 02 FB | 	rdlong	local04, fp
20128     2C 4E 85 F1 | 	sub	fp, #44
2012c     10 25 42 FC | 	wrbyte	local04, local02
20130                 | LR__2814
20130     C0 4E 05 F1 | 	add	fp, #192
20134     A7 12 02 FB | 	rdlong	arg01, fp
20138     C0 4E 85 F1 | 	sub	fp, #192
2013c     70 01 00 FF 
20140     2A 15 06 F6 | 	mov	arg02, ##@LR__4751
20144     E0 E9 BF FD | 	call	#__system____builtin_strcpy
20148     A4 08 90 FD | 	jmp	#LR__2851
2014c                 | LR__2815
2014c     0C 4E 05 F1 | 	add	fp, #12
20150     A7 20 02 FB | 	rdlong	local02, fp
20154     0C 4E 85 F1 | 	sub	fp, #12
20158     10 13 02 F6 | 	mov	arg01, local02
2015c     94 1E B0 FD | 	call	#__system____builtin_ilogb
20160     00 00 40 FF 
20164     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
20168     50 00 90 5D |  if_ne	jmp	#LR__2817
2016c     2C 4E 05 F1 | 	add	fp, #44
20170     A7 1E 0A FB | 	rdlong	local01, fp wz
20174     2C 4E 85 F1 | 	sub	fp, #44
20178     24 00 90 AD |  if_e	jmp	#LR__2816
2017c     C0 4E 05 F1 | 	add	fp, #192
20180     A7 20 02 FB | 	rdlong	local02, fp
20184     10 23 02 F6 | 	mov	local03, local02
20188     01 22 06 F1 | 	add	local03, #1
2018c     A7 22 62 FC | 	wrlong	local03, fp
20190     94 4E 85 F1 | 	sub	fp, #148
20194     A7 24 02 FB | 	rdlong	local04, fp
20198     2C 4E 85 F1 | 	sub	fp, #44
2019c     10 25 42 FC | 	wrbyte	local04, local02
201a0                 | LR__2816
201a0     C0 4E 05 F1 | 	add	fp, #192
201a4     A7 12 02 FB | 	rdlong	arg01, fp
201a8     C0 4E 85 F1 | 	sub	fp, #192
201ac     70 01 00 FF 
201b0     2E 15 06 F6 | 	mov	arg02, ##@LR__4752
201b4     70 E9 BF FD | 	call	#__system____builtin_strcpy
201b8     34 08 90 FD | 	jmp	#LR__2851
201bc                 | LR__2817
201bc     10 4E 05 F1 | 	add	fp, #16
201c0     A7 1E 02 FB | 	rdlong	local01, fp
201c4     10 4E 85 F1 | 	sub	fp, #16
201c8     67 1E 0E F2 | 	cmp	local01, #103 wz
201cc     10 4E 05 51 |  if_ne	add	fp, #16
201d0     A7 22 02 5B |  if_ne	rdlong	local03, fp
201d4     10 4E 85 51 |  if_ne	sub	fp, #16
201d8     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
201dc     94 01 90 5D |  if_ne	jmp	#LR__2822
201e0     0C 4E 05 F1 | 	add	fp, #12
201e4     A7 12 02 FB | 	rdlong	arg01, fp
201e8     08 4E 05 F1 | 	add	fp, #8
201ec     A7 14 02 F6 | 	mov	arg02, fp
201f0     0C 4E 05 F1 | 	add	fp, #12
201f4     A7 16 02 F6 | 	mov	arg03, fp
201f8     98 4E 05 F1 | 	add	fp, #152
201fc     A7 18 02 FB | 	rdlong	arg04, fp
20200     9C 4E 85 F1 | 	sub	fp, #156
20204     A7 1A 02 FB | 	rdlong	arg05, fp
20208     1C 4E 85 F1 | 	sub	fp, #28
2020c     50 40 B0 FD | 	call	#__system__disassemble_0442
20210     10 4E 05 F1 | 	add	fp, #16
20214     A7 1E 02 FB | 	rdlong	local01, fp
20218     10 4E 85 F1 | 	sub	fp, #16
2021c     23 1E 0E F2 | 	cmp	local01, #35 wz
20220     A0 00 90 5D |  if_ne	jmp	#LR__2819
20224     20 4E 05 F1 | 	add	fp, #32
20228     A7 1E 02 FB | 	rdlong	local01, fp
2022c     98 4E 05 F1 | 	add	fp, #152
20230     A7 22 02 FB | 	rdlong	local03, fp
20234     B8 4E 85 F1 | 	sub	fp, #184
20238     11 1F 5A F2 | 	cmps	local01, local03 wcz
2023c     24 4E 05 11 |  if_a	add	fp, #36
20240     A7 02 68 1C |  if_a	wrlong	#1, fp
20244     24 4E 85 11 |  if_a	sub	fp, #36
20248     A4 01 90 1D |  if_a	jmp	#LR__2825
2024c     20 4E 05 F1 | 	add	fp, #32
20250     A7 1E 02 FB | 	rdlong	local01, fp
20254     20 4E 85 F1 | 	sub	fp, #32
20258     00 1E 56 F2 | 	cmps	local01, #0 wc
2025c     2C 00 90 3D |  if_ae	jmp	#LR__2818
20260     B8 4E 05 F1 | 	add	fp, #184
20264     A7 1E 02 FB | 	rdlong	local01, fp
20268     0F 1F 62 F6 | 	neg	local01, local01
2026c     98 4E 85 F1 | 	sub	fp, #152
20270     A7 22 02 FB | 	rdlong	local03, fp
20274     20 4E 85 F1 | 	sub	fp, #32
20278     0F 23 5A F2 | 	cmps	local03, local01 wcz
2027c     24 4E 05 E1 |  if_be	add	fp, #36
20280     A7 02 68 EC |  if_be	wrlong	#1, fp
20284     24 4E 85 E1 |  if_be	sub	fp, #36
20288     64 01 90 FD | 	jmp	#LR__2825
2028c                 | LR__2818
2028c     20 4E 05 F1 | 	add	fp, #32
20290     A7 1E 02 FB | 	rdlong	local01, fp
20294     20 4E 85 F1 | 	sub	fp, #32
20298     01 1E 56 F2 | 	cmps	local01, #1 wc
2029c     50 01 90 CD |  if_b	jmp	#LR__2825
202a0     B8 4E 05 F1 | 	add	fp, #184
202a4     A7 1E 02 FB | 	rdlong	local01, fp
202a8     98 4E 85 F1 | 	sub	fp, #152
202ac     A7 22 02 FB | 	rdlong	local03, fp
202b0     11 1F 82 F1 | 	sub	local01, local03
202b4     98 4E 05 F1 | 	add	fp, #152
202b8     A7 1E 62 FC | 	wrlong	local01, fp
202bc     B8 4E 85 F1 | 	sub	fp, #184
202c0     2C 01 90 FD | 	jmp	#LR__2825
202c4                 | LR__2819
202c4     00 1E 06 F6 | 	mov	local01, #0
202c8     08 4E 05 F1 | 	add	fp, #8
202cc     A7 20 02 FB | 	rdlong	local02, fp
202d0     1C 20 46 F0 | 	shr	local02, #28
202d4     01 20 0E F5 | 	and	local02, #1 wz
202d8     01 1E 06 A6 |  if_e	mov	local01, #1
202dc     2C 4E 05 F1 | 	add	fp, #44
202e0     A7 1E 62 FC | 	wrlong	local01, fp
202e4     14 4E 85 F1 | 	sub	fp, #20
202e8     A7 1E 02 FB | 	rdlong	local01, fp
202ec     98 4E 05 F1 | 	add	fp, #152
202f0     A7 22 02 FB | 	rdlong	local03, fp
202f4     B8 4E 85 F1 | 	sub	fp, #184
202f8     11 1F 52 F2 | 	cmps	local01, local03 wc
202fc     18 00 90 3D |  if_ae	jmp	#LR__2820
20300     20 4E 05 F1 | 	add	fp, #32
20304     A7 24 02 FB | 	rdlong	local04, fp
20308     20 4E 85 F1 | 	sub	fp, #32
2030c     FF FF 7F FF 
20310     FC 25 56 F2 | 	cmps	local04, ##-4 wc
20314     10 00 90 3D |  if_ae	jmp	#LR__2821
20318                 | LR__2820
20318     24 4E 05 F1 | 	add	fp, #36
2031c     A7 02 68 FC | 	wrlong	#1, fp
20320     24 4E 85 F1 | 	sub	fp, #36
20324     C8 00 90 FD | 	jmp	#LR__2825
20328                 | LR__2821
20328     B8 4E 05 F1 | 	add	fp, #184
2032c     A7 24 02 FB | 	rdlong	local04, fp
20330     98 4E 85 F1 | 	sub	fp, #152
20334     A7 22 02 FB | 	rdlong	local03, fp
20338     11 25 82 F1 | 	sub	local04, local03
2033c     98 4E 05 F1 | 	add	fp, #152
20340     A7 24 62 FC | 	wrlong	local04, fp
20344     AC 4E 85 F1 | 	sub	fp, #172
20348     A7 12 02 FB | 	rdlong	arg01, fp
2034c     08 4E 05 F1 | 	add	fp, #8
20350     A7 14 02 F6 | 	mov	arg02, fp
20354     0C 4E 05 F1 | 	add	fp, #12
20358     A7 16 02 F6 | 	mov	arg03, fp
2035c     12 19 62 F6 | 	neg	arg04, local04
20360     04 4E 85 F1 | 	sub	fp, #4
20364     A7 1A 02 FB | 	rdlong	arg05, fp
20368     1C 4E 85 F1 | 	sub	fp, #28
2036c     F0 3E B0 FD | 	call	#__system__disassemble_0442
20370     7C 00 90 FD | 	jmp	#LR__2825
20374                 | LR__2822
20374     24 4E 05 F1 | 	add	fp, #36
20378     A7 1E 0A FB | 	rdlong	local01, fp wz
2037c     24 4E 85 F1 | 	sub	fp, #36
20380     34 00 90 AD |  if_e	jmp	#LR__2823
20384     0C 4E 05 F1 | 	add	fp, #12
20388     A7 12 02 FB | 	rdlong	arg01, fp
2038c     08 4E 05 F1 | 	add	fp, #8
20390     A7 14 02 F6 | 	mov	arg02, fp
20394     0C 4E 05 F1 | 	add	fp, #12
20398     A7 16 02 F6 | 	mov	arg03, fp
2039c     98 4E 05 F1 | 	add	fp, #152
203a0     A7 18 02 FB | 	rdlong	arg04, fp
203a4     9C 4E 85 F1 | 	sub	fp, #156
203a8     A7 1A 02 FB | 	rdlong	arg05, fp
203ac     1C 4E 85 F1 | 	sub	fp, #28
203b0     AC 3E B0 FD | 	call	#__system__disassemble_0442
203b4     38 00 90 FD | 	jmp	#LR__2824
203b8                 | LR__2823
203b8     0C 4E 05 F1 | 	add	fp, #12
203bc     A7 12 02 FB | 	rdlong	arg01, fp
203c0     08 4E 05 F1 | 	add	fp, #8
203c4     A7 14 02 F6 | 	mov	arg02, fp
203c8     0C 4E 05 F1 | 	add	fp, #12
203cc     A7 16 02 F6 | 	mov	arg03, fp
203d0     98 4E 05 F1 | 	add	fp, #152
203d4     A7 24 02 FB | 	rdlong	local04, fp
203d8     01 24 06 F1 | 	add	local04, #1
203dc     12 19 62 F6 | 	neg	arg04, local04
203e0     9C 4E 85 F1 | 	sub	fp, #156
203e4     A7 1A 02 FB | 	rdlong	arg05, fp
203e8     1C 4E 85 F1 | 	sub	fp, #28
203ec     70 3E B0 FD | 	call	#__system__disassemble_0442
203f0                 | LR__2824
203f0                 | LR__2825
203f0     1C 4E 05 F1 | 	add	fp, #28
203f4     A7 1E 02 FB | 	rdlong	local01, fp
203f8     1C 4E 85 F1 | 	sub	fp, #28
203fc     02 1E 0E F2 | 	cmp	local01, #2 wz
20400     4C 00 90 5D |  if_ne	jmp	#LR__2828
20404     1C 4E 05 F1 | 	add	fp, #28
20408     A7 20 68 FC | 	wrlong	#16, fp
2040c     1C 4E 85 F1 | 	sub	fp, #28
20410                 | LR__2826
20410     14 4E 05 F1 | 	add	fp, #20
20414     A7 1E 0A FB | 	rdlong	local01, fp wz
20418     14 4E 85 F1 | 	sub	fp, #20
2041c     30 00 90 AD |  if_e	jmp	#LR__2827
20420     14 4E 05 F1 | 	add	fp, #20
20424     A7 22 02 FB | 	rdlong	local03, fp
20428     14 4E 85 F1 | 	sub	fp, #20
2042c     00 80 00 FF 
20430     00 22 16 F2 | 	cmp	local03, ##16777216 wc
20434     18 00 90 3D |  if_ae	jmp	#LR__2827
20438     14 4E 05 F1 | 	add	fp, #20
2043c     A7 1E 02 FB | 	rdlong	local01, fp
20440     01 1E 66 F0 | 	shl	local01, #1
20444     A7 1E 62 FC | 	wrlong	local01, fp
20448     14 4E 85 F1 | 	sub	fp, #20
2044c     C0 FF 9F FD | 	jmp	#LR__2826
20450                 | LR__2827
20450                 | LR__2828
20450     70 4E 05 F1 | 	add	fp, #112
20454     A7 12 02 F6 | 	mov	arg01, fp
20458     5C 4E 85 F1 | 	sub	fp, #92
2045c     A7 14 02 FB | 	rdlong	arg02, fp
20460     08 4E 05 F1 | 	add	fp, #8
20464     A7 16 02 FB | 	rdlong	arg03, fp
20468     A0 4E 05 F1 | 	add	fp, #160
2046c     A7 1A 02 FB | 	rdlong	arg05, fp
20470     BC 4E 85 F1 | 	sub	fp, #188
20474     01 18 06 F6 | 	mov	arg04, #1
20478     70 3D B0 FD | 	call	#__system___uitoa
2047c     58 4E 05 F1 | 	add	fp, #88
20480     A7 FA 61 FC | 	wrlong	result1, fp
20484     38 4E 85 F1 | 	sub	fp, #56
20488     A7 1E 02 FB | 	rdlong	local01, fp
2048c     20 4E 85 F1 | 	sub	fp, #32
20490     00 1E 56 F2 | 	cmps	local01, #0 wc
20494     50 00 90 3D |  if_ae	jmp	#LR__2829
20498     60 4E 05 F1 | 	add	fp, #96
2049c     A7 5A 68 FC | 	wrlong	#45, fp
204a0     50 4E 05 F1 | 	add	fp, #80
204a4     A7 12 02 F6 | 	mov	arg01, fp
204a8     90 4E 85 F1 | 	sub	fp, #144
204ac     A7 22 02 FB | 	rdlong	local03, fp
204b0     11 15 62 F6 | 	neg	arg02, local03
204b4     18 4E 05 F1 | 	add	fp, #24
204b8     A7 18 02 FB | 	rdlong	arg04, fp
204bc     84 4E 05 F1 | 	add	fp, #132
204c0     A7 28 02 FB | 	rdlong	local06, fp
204c4     BC 4E 85 F1 | 	sub	fp, #188
204c8     14 25 02 F6 | 	mov	local04, local06
204cc     0A 16 06 F6 | 	mov	arg03, #10
204d0     12 1B 02 F6 | 	mov	arg05, local04
204d4     14 3D B0 FD | 	call	#__system___uitoa
204d8     5C 4E 05 F1 | 	add	fp, #92
204dc     A7 FA 61 FC | 	wrlong	result1, fp
204e0     5C 4E 85 F1 | 	sub	fp, #92
204e4     48 00 90 FD | 	jmp	#LR__2830
204e8                 | LR__2829
204e8     60 4E 05 F1 | 	add	fp, #96
204ec     A7 56 68 FC | 	wrlong	#43, fp
204f0     50 4E 05 F1 | 	add	fp, #80
204f4     A7 12 02 F6 | 	mov	arg01, fp
204f8     90 4E 85 F1 | 	sub	fp, #144
204fc     A7 14 02 FB | 	rdlong	arg02, fp
20500     18 4E 05 F1 | 	add	fp, #24
20504     A7 18 02 FB | 	rdlong	arg04, fp
20508     84 4E 05 F1 | 	add	fp, #132
2050c     A7 28 02 FB | 	rdlong	local06, fp
20510     BC 4E 85 F1 | 	sub	fp, #188
20514     14 25 02 F6 | 	mov	local04, local06
20518     0A 16 06 F6 | 	mov	arg03, #10
2051c     12 1B 02 F6 | 	mov	arg05, local04
20520     C8 3C B0 FD | 	call	#__system___uitoa
20524     5C 4E 05 F1 | 	add	fp, #92
20528     A7 FA 61 FC | 	wrlong	result1, fp
2052c     5C 4E 85 F1 | 	sub	fp, #92
20530                 | LR__2830
20530     24 4E 05 F1 | 	add	fp, #36
20534     A7 1E 0A FB | 	rdlong	local01, fp wz
20538     24 4E 85 F1 | 	sub	fp, #36
2053c     2C 00 90 AD |  if_e	jmp	#LR__2831
20540     50 4E 05 F1 | 	add	fp, #80
20544     A7 00 68 FC | 	wrlong	#0, fp
20548     04 4E 85 F1 | 	sub	fp, #4
2054c     A7 00 68 FC | 	wrlong	#0, fp
20550     6C 4E 05 F1 | 	add	fp, #108
20554     A7 1E 02 FB | 	rdlong	local01, fp
20558     01 1E 06 F1 | 	add	local01, #1
2055c     64 4E 85 F1 | 	sub	fp, #100
20560     A7 1E 62 FC | 	wrlong	local01, fp
20564     54 4E 85 F1 | 	sub	fp, #84
20568     88 00 90 FD | 	jmp	#LR__2834
2056c                 | LR__2831
2056c     20 4E 05 F1 | 	add	fp, #32
20570     A7 1E 02 FB | 	rdlong	local01, fp
20574     20 4E 85 F1 | 	sub	fp, #32
20578     00 1E 56 F2 | 	cmps	local01, #0 wc
2057c     40 00 90 3D |  if_ae	jmp	#LR__2832
20580     20 4E 05 F1 | 	add	fp, #32
20584     A7 20 02 FB | 	rdlong	local02, fp
20588     30 4E 05 F1 | 	add	fp, #48
2058c     A7 20 62 FC | 	wrlong	local02, fp
20590     04 4E 85 F1 | 	sub	fp, #4
20594     A7 20 62 FC | 	wrlong	local02, fp
20598     2C 4E 85 F1 | 	sub	fp, #44
2059c     A7 1E 02 FB | 	rdlong	local01, fp
205a0     98 4E 05 F1 | 	add	fp, #152
205a4     A7 22 02 FB | 	rdlong	local03, fp
205a8     11 1F 02 F1 | 	add	local01, local03
205ac     01 1E 06 F1 | 	add	local01, #1
205b0     64 4E 85 F1 | 	sub	fp, #100
205b4     A7 1E 62 FC | 	wrlong	local01, fp
205b8     54 4E 85 F1 | 	sub	fp, #84
205bc     34 00 90 FD | 	jmp	#LR__2833
205c0                 | LR__2832
205c0     4C 4E 05 F1 | 	add	fp, #76
205c4     A7 00 68 FC | 	wrlong	#0, fp
205c8     2C 4E 85 F1 | 	sub	fp, #44
205cc     A7 1E 02 FB | 	rdlong	local01, fp
205d0     30 4E 05 F1 | 	add	fp, #48
205d4     A7 1E 62 FC | 	wrlong	local01, fp
205d8     68 4E 05 F1 | 	add	fp, #104
205dc     A7 22 02 FB | 	rdlong	local03, fp
205e0     11 1F 02 F1 | 	add	local01, local03
205e4     01 1E 06 F1 | 	add	local01, #1
205e8     64 4E 85 F1 | 	sub	fp, #100
205ec     A7 1E 62 FC | 	wrlong	local01, fp
205f0     54 4E 85 F1 | 	sub	fp, #84
205f4                 | LR__2833
205f4                 | LR__2834
205f4     54 4E 05 F1 | 	add	fp, #84
205f8     A7 1E 02 FB | 	rdlong	local01, fp
205fc     08 4E 85 F1 | 	sub	fp, #8
20600     A7 22 02 FB | 	rdlong	local03, fp
20604     11 1F 82 F1 | 	sub	local01, local03
20608     01 1E 06 F1 | 	add	local01, #1
2060c     24 4E 85 F1 | 	sub	fp, #36
20610     A7 1E 62 FC | 	wrlong	local01, fp
20614     04 4E 05 F1 | 	add	fp, #4
20618     A7 1E 0A FB | 	rdlong	local01, fp wz
2061c     2C 4E 85 F1 | 	sub	fp, #44
20620     28 4E 05 51 |  if_ne	add	fp, #40
20624     A7 22 02 5B |  if_ne	rdlong	local03, fp
20628     01 22 06 51 |  if_ne	add	local03, #1
2062c     A7 22 62 5C |  if_ne	wrlong	local03, fp
20630     28 4E 85 51 |  if_ne	sub	fp, #40
20634     1C 4E 05 F1 | 	add	fp, #28
20638     A7 1E 02 FB | 	rdlong	local01, fp
2063c     1C 4E 85 F1 | 	sub	fp, #28
20640     10 1E 0E F2 | 	cmp	local01, #16 wz
20644     28 4E 05 A1 |  if_e	add	fp, #40
20648     A7 1E 02 AB |  if_e	rdlong	local01, fp
2064c     02 1E 06 A1 |  if_e	add	local01, #2
20650     A7 1E 62 AC |  if_e	wrlong	local01, fp
20654     28 4E 85 A1 |  if_e	sub	fp, #40
20658     24 4E 05 F1 | 	add	fp, #36
2065c     A7 1E 0A FB | 	rdlong	local01, fp wz
20660     24 4E 85 F1 | 	sub	fp, #36
20664     28 00 90 AD |  if_e	jmp	#LR__2835
20668     28 4E 05 F1 | 	add	fp, #40
2066c     A7 1E 02 FB | 	rdlong	local01, fp
20670     02 22 06 F6 | 	mov	local03, #2
20674     34 4E 05 F1 | 	add	fp, #52
20678     A7 26 02 FB | 	rdlong	local05, fp
2067c     13 23 02 F1 | 	add	local03, local05
20680     11 1F 02 F1 | 	add	local01, local03
20684     34 4E 85 F1 | 	sub	fp, #52
20688     A7 1E 62 FC | 	wrlong	local01, fp
2068c     28 4E 85 F1 | 	sub	fp, #40
20690                 | LR__2835
20690     28 4E 05 F1 | 	add	fp, #40
20694     A7 1E 02 FB | 	rdlong	local01, fp
20698     28 4E 85 F1 | 	sub	fp, #40
2069c     41 1E 56 F2 | 	cmps	local01, #65 wc
206a0     01 FA 65 36 |  if_ae	neg	result1, #1
206a4     08 05 90 3D |  if_ae	jmp	#LR__2863
206a8     3C 4E 05 F1 | 	add	fp, #60
206ac     A7 1E 0A FB | 	rdlong	local01, fp wz
206b0     3C 4E 85 F1 | 	sub	fp, #60
206b4     60 00 90 AD |  if_e	jmp	#LR__2836
206b8     C0 4E 05 F1 | 	add	fp, #192
206bc     A7 12 02 FB | 	rdlong	arg01, fp
206c0     94 4E 85 F1 | 	sub	fp, #148
206c4     A7 14 02 FB | 	rdlong	arg02, fp
206c8     14 4E 05 F1 | 	add	fp, #20
206cc     A7 16 02 FB | 	rdlong	arg03, fp
206d0     40 4E 85 F1 | 	sub	fp, #64
206d4     7C 3D B0 FD | 	call	#__system__emitsign_0444
206d8     18 4F 05 F1 | 	add	fp, #280
206dc     A7 FA 61 FC | 	wrlong	result1, fp
206e0     18 4F 85 F1 | 	sub	fp, #280
206e4     00 FA 55 F2 | 	cmps	result1, #0 wc
206e8     18 4F 05 C1 |  if_b	add	fp, #280
206ec     A7 FA 01 CB |  if_b	rdlong	result1, fp
206f0     18 4F 85 C1 |  if_b	sub	fp, #280
206f4     B8 04 90 CD |  if_b	jmp	#LR__2863
206f8     C0 4E 05 F1 | 	add	fp, #192
206fc     A7 1E 02 FB | 	rdlong	local01, fp
20700     58 4E 05 F1 | 	add	fp, #88
20704     A7 22 02 FB | 	rdlong	local03, fp
20708     11 1F 02 F1 | 	add	local01, local03
2070c     58 4E 85 F1 | 	sub	fp, #88
20710     A7 1E 62 FC | 	wrlong	local01, fp
20714     C0 4E 85 F1 | 	sub	fp, #192
20718                 | LR__2836
20718     4C 4E 05 F1 | 	add	fp, #76
2071c     A7 1E 02 FB | 	rdlong	local01, fp
20720     34 4E 85 F1 | 	sub	fp, #52
20724     A7 1E 62 FC | 	wrlong	local01, fp
20728     18 4E 85 F1 | 	sub	fp, #24
2072c     97 9E 48 FB | 	callpa	#(@LR__2842-@LR__2837)>>2,fcache_load_ptr_
20730                 | LR__2837
20730     18 4E 05 F1 | 	add	fp, #24
20734     A7 20 02 FB | 	rdlong	local02, fp
20738     3C 4E 05 F1 | 	add	fp, #60
2073c     A7 26 02 FB | 	rdlong	local05, fp
20740     54 4E 85 F1 | 	sub	fp, #84
20744     13 21 52 F2 | 	cmps	local02, local05 wc
20748     20 01 90 3D |  if_ae	jmp	#LR__2843
2074c     18 4E 05 F1 | 	add	fp, #24
20750     A7 28 02 FB | 	rdlong	local06, fp
20754     18 4E 85 F1 | 	sub	fp, #24
20758     00 28 56 F2 | 	cmps	local06, #0 wc
2075c     58 00 90 CD |  if_b	jmp	#LR__2838
20760     18 4E 05 F1 | 	add	fp, #24
20764     A7 28 02 FB | 	rdlong	local06, fp
20768     40 4E 05 F1 | 	add	fp, #64
2076c     A7 2A 02 FB | 	rdlong	local07, fp
20770     58 4E 85 F1 | 	sub	fp, #88
20774     15 29 52 F2 | 	cmps	local06, local07 wc
20778     3C 00 90 3D |  if_ae	jmp	#LR__2838
2077c     C0 4E 05 F1 | 	add	fp, #192
20780     A7 2C 02 FB | 	rdlong	local08, fp
20784     16 2B 02 F6 | 	mov	local07, local08
20788     01 2A 06 F1 | 	add	local07, #1
2078c     A7 2A 62 FC | 	wrlong	local07, fp
20790     A8 4E 85 F1 | 	sub	fp, #168
20794     A7 2A 02 FB | 	rdlong	local07, fp
20798     15 2F 02 F6 | 	mov	local09, local07
2079c     58 4E 05 F1 | 	add	fp, #88
207a0     A7 30 02 F6 | 	mov	local10, fp
207a4     A7 2E 02 F1 | 	add	local09, fp
207a8     17 33 C2 FA | 	rdbyte	local11, local09
207ac     16 33 42 FC | 	wrbyte	local11, local08
207b0     70 4E 85 F1 | 	sub	fp, #112
207b4     20 00 90 FD | 	jmp	#LR__2839
207b8                 | LR__2838
207b8     C0 4E 05 F1 | 	add	fp, #192
207bc     A7 2C 02 FB | 	rdlong	local08, fp
207c0     16 2F 02 F6 | 	mov	local09, local08
207c4     01 2E 06 F1 | 	add	local09, #1
207c8     A7 2E 62 FC | 	wrlong	local09, fp
207cc     C0 4E 85 F1 | 	sub	fp, #192
207d0     30 2E 06 F6 | 	mov	local09, #48
207d4     16 61 48 FC | 	wrbyte	#48, local08
207d8                 | LR__2839
207d8     18 4E 05 F1 | 	add	fp, #24
207dc     A7 28 02 FB | 	rdlong	local06, fp
207e0     38 4E 05 F1 | 	add	fp, #56
207e4     A7 34 02 FB | 	rdlong	local12, fp
207e8     50 4E 85 F1 | 	sub	fp, #80
207ec     1A 29 0A F2 | 	cmp	local06, local12 wz
207f0     5C 00 90 5D |  if_ne	jmp	#LR__2841
207f4     10 4F 05 F1 | 	add	fp, #272
207f8     A7 2A 02 FB | 	rdlong	local07, fp
207fc     10 4F 85 F1 | 	sub	fp, #272
20800     15 2F 0A F6 | 	mov	local09, local07 wz
20804     28 00 90 5D |  if_ne	jmp	#LR__2840
20808     54 4E 05 F1 | 	add	fp, #84
2080c     A7 32 02 FB | 	rdlong	local11, fp
20810     19 31 02 F6 | 	mov	local10, local11
20814     01 30 86 F1 | 	sub	local10, #1
20818     3C 4E 85 F1 | 	sub	fp, #60
2081c     A7 36 02 FB | 	rdlong	local13, fp
20820     18 4E 85 F1 | 	sub	fp, #24
20824     1B 39 02 F6 | 	mov	local14, local13
20828     18 39 52 F2 | 	cmps	local14, local10 wc
2082c     20 00 90 3D |  if_ae	jmp	#LR__2841
20830                 | LR__2840
20830     C0 4E 05 F1 | 	add	fp, #192
20834     A7 2C 02 FB | 	rdlong	local08, fp
20838     16 35 02 F6 | 	mov	local12, local08
2083c     01 34 06 F1 | 	add	local12, #1
20840     A7 34 62 FC | 	wrlong	local12, fp
20844     C0 4E 85 F1 | 	sub	fp, #192
20848     2E 2E 06 F6 | 	mov	local09, #46
2084c     16 5D 48 FC | 	wrbyte	#46, local08
20850                 | LR__2841
20850     18 4E 05 F1 | 	add	fp, #24
20854     A7 3A 02 FB | 	rdlong	local15, fp
20858     1D 35 02 F6 | 	mov	local12, local15
2085c     01 34 06 F1 | 	add	local12, #1
20860     A7 34 62 FC | 	wrlong	local12, fp
20864     18 4E 85 F1 | 	sub	fp, #24
20868     C4 FE 9F FD | 	jmp	#LR__2837
2086c                 | LR__2842
2086c                 | LR__2843
2086c     34 4E 05 F1 | 	add	fp, #52
20870     A7 1E 0A FB | 	rdlong	local01, fp wz
20874     34 4E 85 F1 | 	sub	fp, #52
20878     A0 00 90 AD |  if_e	jmp	#LR__2847
2087c     C0 4E 05 F1 | 	add	fp, #192
20880     A7 1E 02 FB | 	rdlong	local01, fp
20884     01 1E 86 F1 | 	sub	local01, #1
20888     A7 1E 62 FC | 	wrlong	local01, fp
2088c     C0 4E 85 F1 | 	sub	fp, #192
20890     97 26 48 FB | 	callpa	#(@LR__2845-@LR__2844)>>2,fcache_load_ptr_
20894                 | LR__2844
20894     C0 4E 05 F1 | 	add	fp, #192
20898     A7 1E 02 FB | 	rdlong	local01, fp
2089c     04 4E 05 F1 | 	add	fp, #4
208a0     A7 22 02 FB | 	rdlong	local03, fp
208a4     C4 4E 85 F1 | 	sub	fp, #196
208a8     11 1F 5A F2 | 	cmps	local01, local03 wcz
208ac     30 00 90 ED |  if_be	jmp	#LR__2846
208b0     C0 4E 05 F1 | 	add	fp, #192
208b4     A7 28 02 FB | 	rdlong	local06, fp
208b8     C0 4E 85 F1 | 	sub	fp, #192
208bc     14 25 C2 FA | 	rdbyte	local04, local06
208c0     30 24 0E F2 | 	cmp	local04, #48 wz
208c4     18 00 90 5D |  if_ne	jmp	#LR__2846
208c8     C0 4E 05 F1 | 	add	fp, #192
208cc     A7 1E 02 FB | 	rdlong	local01, fp
208d0     01 1E 86 F1 | 	sub	local01, #1
208d4     A7 1E 62 FC | 	wrlong	local01, fp
208d8     C0 4E 85 F1 | 	sub	fp, #192
208dc     B4 FF 9F FD | 	jmp	#LR__2844
208e0                 | LR__2845
208e0                 | LR__2846
208e0     C0 4E 05 F1 | 	add	fp, #192
208e4     A7 20 02 FB | 	rdlong	local02, fp
208e8     C0 4E 85 F1 | 	sub	fp, #192
208ec     10 1F C2 FA | 	rdbyte	local01, local02
208f0     2E 1E 0E F2 | 	cmp	local01, #46 wz
208f4     C0 4E 05 A1 |  if_e	add	fp, #192
208f8     A7 1E 02 AB |  if_e	rdlong	local01, fp
208fc     01 1E 86 A1 |  if_e	sub	local01, #1
20900     A7 1E 62 AC |  if_e	wrlong	local01, fp
20904     C0 4E 85 A1 |  if_e	sub	fp, #192
20908     C0 4E 05 F1 | 	add	fp, #192
2090c     A7 22 02 FB | 	rdlong	local03, fp
20910     01 22 06 F1 | 	add	local03, #1
20914     A7 22 62 FC | 	wrlong	local03, fp
20918     C0 4E 85 F1 | 	sub	fp, #192
2091c                 | LR__2847
2091c     24 4E 05 F1 | 	add	fp, #36
20920     A7 1E 0A FB | 	rdlong	local01, fp wz
20924     24 4E 85 F1 | 	sub	fp, #36
20928     B4 00 90 AD |  if_e	jmp	#LR__2850
2092c     C0 4E 05 F1 | 	add	fp, #192
20930     A7 20 02 FB | 	rdlong	local02, fp
20934     10 23 02 F6 | 	mov	local03, local02
20938     01 22 06 F1 | 	add	local03, #1
2093c     A7 22 62 FC | 	wrlong	local03, fp
20940     90 4E 85 F1 | 	sub	fp, #144
20944     A7 24 02 FB | 	rdlong	local04, fp
20948     10 25 42 FC | 	wrbyte	local04, local02
2094c     90 4E 05 F1 | 	add	fp, #144
20950     A7 20 02 FB | 	rdlong	local02, fp
20954     10 23 02 F6 | 	mov	local03, local02
20958     01 22 06 F1 | 	add	local03, #1
2095c     A7 22 62 FC | 	wrlong	local03, fp
20960     60 4E 85 F1 | 	sub	fp, #96
20964     A7 24 02 FB | 	rdlong	local04, fp
20968     10 25 42 FC | 	wrbyte	local04, local02
2096c     48 4E 85 F1 | 	sub	fp, #72
20970     A7 00 68 FC | 	wrlong	#0, fp
20974     18 4E 85 F1 | 	sub	fp, #24
20978                 | LR__2848
20978     18 4E 05 F1 | 	add	fp, #24
2097c     A7 20 02 FB | 	rdlong	local02, fp
20980     44 4E 05 F1 | 	add	fp, #68
20984     A7 26 02 FB | 	rdlong	local05, fp
20988     5C 4E 85 F1 | 	sub	fp, #92
2098c     13 21 52 F2 | 	cmps	local02, local05 wc
20990     4C 00 90 3D |  if_ae	jmp	#LR__2849
20994     C0 4E 05 F1 | 	add	fp, #192
20998     A7 2C 02 FB | 	rdlong	local08, fp
2099c     16 35 02 F6 | 	mov	local12, local08
209a0     01 34 06 F1 | 	add	local12, #1
209a4     A7 34 62 FC | 	wrlong	local12, fp
209a8     A8 4E 85 F1 | 	sub	fp, #168
209ac     A7 2A 02 FB | 	rdlong	local07, fp
209b0     15 2F 02 F6 | 	mov	local09, local07
209b4     98 4E 05 F1 | 	add	fp, #152
209b8     A7 30 02 F6 | 	mov	local10, fp
209bc     A7 2E 02 F1 | 	add	local09, fp
209c0     17 33 C2 FA | 	rdbyte	local11, local09
209c4     16 33 42 FC | 	wrbyte	local11, local08
209c8     98 4E 85 F1 | 	sub	fp, #152
209cc     A7 34 02 FB | 	rdlong	local12, fp
209d0     01 34 06 F1 | 	add	local12, #1
209d4     A7 34 62 FC | 	wrlong	local12, fp
209d8     18 4E 85 F1 | 	sub	fp, #24
209dc     98 FF 9F FD | 	jmp	#LR__2848
209e0                 | LR__2849
209e0                 | LR__2850
209e0     C0 4E 05 F1 | 	add	fp, #192
209e4     A7 1E 02 FB | 	rdlong	local01, fp
209e8     C0 4E 85 F1 | 	sub	fp, #192
209ec     0F 01 48 FC | 	wrbyte	#0, local01
209f0                 | LR__2851
209f0     6C 4E 05 F1 | 	add	fp, #108
209f4     A7 1E 0A FB | 	rdlong	local01, fp wz
209f8     6C 4E 85 F1 | 	sub	fp, #108
209fc     90 01 90 AD |  if_e	jmp	#LR__2862
20a00     48 4E 05 F1 | 	add	fp, #72
20a04     A7 22 0A FB | 	rdlong	local03, fp wz
20a08     48 4E 85 F1 | 	sub	fp, #72
20a0c     80 01 90 AD |  if_e	jmp	#LR__2862
20a10     C4 4E 05 F1 | 	add	fp, #196
20a14     A7 12 02 FB | 	rdlong	arg01, fp
20a18     C4 4E 85 F1 | 	sub	fp, #196
20a1c     09 3D 02 F6 | 	mov	local16, arg01
20a20     97 06 48 FB | 	callpa	#(@LR__2853-@LR__2852)>>2,fcache_load_ptr_
20a24                 | LR__2852
20a24     1E FB C9 FA | 	rdbyte	result1, local16 wz
20a28     01 3C 06 51 |  if_ne	add	local16, #1
20a2c     F4 FF 9F 5D |  if_ne	jmp	#LR__2852
20a30                 | LR__2853
20a30     09 3D 82 F1 | 	sub	local16, arg01
20a34     1E 25 02 F6 | 	mov	local04, local16
20a38     6C 4E 05 F1 | 	add	fp, #108
20a3c     A7 28 02 FB | 	rdlong	local06, fp
20a40     6C 4E 85 F1 | 	sub	fp, #108
20a44     14 25 5A F2 | 	cmps	local04, local06 wcz
20a48     44 01 90 ED |  if_be	jmp	#LR__2862
20a4c     C4 4E 05 F1 | 	add	fp, #196
20a50     A7 1E 02 FB | 	rdlong	local01, fp
20a54     5C 4E 05 F1 | 	add	fp, #92
20a58     A7 1E 62 FC | 	wrlong	local01, fp
20a5c     FC 4E 85 F1 | 	sub	fp, #252
20a60     A7 1E 0A FB | 	rdlong	local01, fp wz
20a64     24 4E 85 F1 | 	sub	fp, #36
20a68     20 00 90 AD |  if_e	jmp	#LR__2854
20a6c     B8 4E 05 F1 | 	add	fp, #184
20a70     A7 00 68 FC | 	wrlong	#0, fp
20a74     4C 4E 85 F1 | 	sub	fp, #76
20a78     A7 1E 02 FB | 	rdlong	local01, fp
20a7c     B0 4E 05 F1 | 	add	fp, #176
20a80     A7 1E 62 FC | 	wrlong	local01, fp
20a84     1C 4F 85 F1 | 	sub	fp, #284
20a88     24 00 90 FD | 	jmp	#LR__2855
20a8c                 | LR__2854
20a8c     6C 4E 05 F1 | 	add	fp, #108
20a90     A7 1E 02 FB | 	rdlong	local01, fp
20a94     01 1E 86 F1 | 	sub	local01, #1
20a98     4C 4E 05 F1 | 	add	fp, #76
20a9c     A7 22 02 FB | 	rdlong	local03, fp
20aa0     11 1F 82 F1 | 	sub	local01, local03
20aa4     64 4E 05 F1 | 	add	fp, #100
20aa8     A7 1E 62 FC | 	wrlong	local01, fp
20aac     1C 4F 85 F1 | 	sub	fp, #284
20ab0                 | LR__2855
20ab0     97 20 48 FB | 	callpa	#(@LR__2857-@LR__2856)>>2,fcache_load_ptr_
20ab4                 | LR__2856
20ab4     1C 4F 05 F1 | 	add	fp, #284
20ab8     A7 1E 0A FB | 	rdlong	local01, fp wz
20abc     1C 4F 85 F1 | 	sub	fp, #284
20ac0     30 00 90 AD |  if_e	jmp	#LR__2858
20ac4     20 4F 05 F1 | 	add	fp, #288
20ac8     A7 20 02 FB | 	rdlong	local02, fp
20acc     10 23 02 F6 | 	mov	local03, local02
20ad0     01 22 06 F1 | 	add	local03, #1
20ad4     A7 22 62 FC | 	wrlong	local03, fp
20ad8     10 55 48 FC | 	wrbyte	#42, local02
20adc     04 4E 85 F1 | 	sub	fp, #4
20ae0     A7 1E 02 FB | 	rdlong	local01, fp
20ae4     01 1E 86 F1 | 	sub	local01, #1
20ae8     A7 1E 62 FC | 	wrlong	local01, fp
20aec     1C 4F 85 F1 | 	sub	fp, #284
20af0     C0 FF 9F FD | 	jmp	#LR__2856
20af4                 | LR__2857
20af4                 | LR__2858
20af4     B8 4E 05 F1 | 	add	fp, #184
20af8     A7 1E 0A FB | 	rdlong	local01, fp wz
20afc     B8 4E 85 F1 | 	sub	fp, #184
20b00     70 00 90 AD |  if_e	jmp	#LR__2861
20b04     20 4F 05 F1 | 	add	fp, #288
20b08     A7 20 02 FB | 	rdlong	local02, fp
20b0c     10 23 02 F6 | 	mov	local03, local02
20b10     01 22 06 F1 | 	add	local03, #1
20b14     A7 22 62 FC | 	wrlong	local03, fp
20b18     10 5D 48 FC | 	wrbyte	#46, local02
20b1c     04 4E 85 F1 | 	sub	fp, #4
20b20     A7 00 68 FC | 	wrlong	#0, fp
20b24     1C 4F 85 F1 | 	sub	fp, #284
20b28                 | LR__2859
20b28     1C 4F 05 F1 | 	add	fp, #284
20b2c     A7 20 02 FB | 	rdlong	local02, fp
20b30     64 4E 85 F1 | 	sub	fp, #100
20b34     A7 26 02 FB | 	rdlong	local05, fp
20b38     B8 4E 85 F1 | 	sub	fp, #184
20b3c     13 21 52 F2 | 	cmps	local02, local05 wc
20b40     30 00 90 3D |  if_ae	jmp	#LR__2860
20b44     20 4F 05 F1 | 	add	fp, #288
20b48     A7 2C 02 FB | 	rdlong	local08, fp
20b4c     16 35 02 F6 | 	mov	local12, local08
20b50     01 34 06 F1 | 	add	local12, #1
20b54     A7 34 62 FC | 	wrlong	local12, fp
20b58     16 55 48 FC | 	wrbyte	#42, local08
20b5c     04 4E 85 F1 | 	sub	fp, #4
20b60     A7 34 02 FB | 	rdlong	local12, fp
20b64     01 34 06 F1 | 	add	local12, #1
20b68     A7 34 62 FC | 	wrlong	local12, fp
20b6c     1C 4F 85 F1 | 	sub	fp, #284
20b70     B4 FF 9F FD | 	jmp	#LR__2859
20b74                 | LR__2860
20b74                 | LR__2861
20b74     20 4F 05 F1 | 	add	fp, #288
20b78     A7 20 02 FB | 	rdlong	local02, fp
20b7c     10 23 02 F6 | 	mov	local03, local02
20b80     01 22 06 F1 | 	add	local03, #1
20b84     A7 22 62 FC | 	wrlong	local03, fp
20b88     20 4F 85 F1 | 	sub	fp, #288
20b8c     10 01 48 FC | 	wrbyte	#0, local02
20b90                 | LR__2862
20b90     04 4E 05 F1 | 	add	fp, #4
20b94     A7 12 02 FB | 	rdlong	arg01, fp
20b98     04 4E 05 F1 | 	add	fp, #4
20b9c     A7 14 02 FB | 	rdlong	arg02, fp
20ba0     BC 4E 05 F1 | 	add	fp, #188
20ba4     A7 16 02 FB | 	rdlong	arg03, fp
20ba8     C4 4E 85 F1 | 	sub	fp, #196
20bac     C4 EE BF FD | 	call	#__system___fmtstr
20bb0                 | LR__2863
20bb0     A7 F0 03 F6 | 	mov	ptra, fp
20bb4     B2 00 A0 FD | 	call	#popregs_
20bb8                 | __system___fmtfloat_ret
20bb8     2D 00 64 FD | 	ret
20bbc                 | 
20bbc                 | __system__Left_S
20bbc     04 4A 05 F6 | 	mov	COUNT_, #4
20bc0     A8 00 A0 FD | 	call	#pushregs_
20bc4     09 1F 02 F6 | 	mov	local01, arg01
20bc8     0A 21 02 F6 | 	mov	local02, arg02
20bcc     01 20 56 F2 | 	cmps	local02, #1 wc
20bd0     70 01 00 CF 
20bd4     32 FB 05 C6 |  if_b	mov	result1, ##@LR__4753
20bd8     5C 00 90 CD |  if_b	jmp	#LR__2873
20bdc     0F 13 02 F6 | 	mov	arg01, local01
20be0     09 23 02 F6 | 	mov	local03, arg01
20be4     97 06 48 FB | 	callpa	#(@LR__2871-@LR__2870)>>2,fcache_load_ptr_
20be8                 | LR__2870
20be8     11 FB C9 FA | 	rdbyte	result1, local03 wz
20bec     01 22 06 51 |  if_ne	add	local03, #1
20bf0     F4 FF 9F 5D |  if_ne	jmp	#LR__2870
20bf4                 | LR__2871
20bf4     09 23 82 F1 | 	sub	local03, arg01
20bf8     11 FB 01 F6 | 	mov	result1, local03
20bfc     10 FB 59 F2 | 	cmps	result1, local02 wcz
20c00     0F FB 01 E6 |  if_be	mov	result1, local01
20c04     30 00 90 ED |  if_be	jmp	#LR__2873
20c08     10 13 02 F6 | 	mov	arg01, local02
20c0c     02 12 06 F1 | 	add	arg01, #2
20c10     AC 1D B0 FD | 	call	#__system___gc_alloc_managed
20c14     FD 24 0A F6 | 	mov	local04, result1 wz
20c18     18 00 90 AD |  if_e	jmp	#LR__2872
20c1c     12 13 02 F6 | 	mov	arg01, local04
20c20     0F 15 02 F6 | 	mov	arg02, local01
20c24     10 17 02 F6 | 	mov	arg03, local02
20c28     68 DE BF FD | 	call	#__system____builtin_memmove
20c2c     12 21 02 F1 | 	add	local02, local04
20c30     10 01 48 FC | 	wrbyte	#0, local02
20c34                 | LR__2872
20c34     12 FB 01 F6 | 	mov	result1, local04
20c38                 | LR__2873
20c38     A7 F0 03 F6 | 	mov	ptra, fp
20c3c     B2 00 A0 FD | 	call	#popregs_
20c40                 | __system__Left_S_ret
20c40     2D 00 64 FD | 	ret
20c44                 | 
20c44                 | __system__Right_S
20c44     05 4A 05 F6 | 	mov	COUNT_, #5
20c48     A8 00 A0 FD | 	call	#pushregs_
20c4c     09 1F 02 F6 | 	mov	local01, arg01
20c50     0A 21 02 F6 | 	mov	local02, arg02
20c54     01 20 56 F2 | 	cmps	local02, #1 wc
20c58     70 01 00 CF 
20c5c     33 FB 05 C6 |  if_b	mov	result1, ##@LR__4754
20c60     64 00 90 CD |  if_b	jmp	#LR__2883
20c64     0F 13 02 F6 | 	mov	arg01, local01
20c68     09 23 02 F6 | 	mov	local03, arg01
20c6c     97 06 48 FB | 	callpa	#(@LR__2881-@LR__2880)>>2,fcache_load_ptr_
20c70                 | LR__2880
20c70     11 FB C9 FA | 	rdbyte	result1, local03 wz
20c74     01 22 06 51 |  if_ne	add	local03, #1
20c78     F4 FF 9F 5D |  if_ne	jmp	#LR__2880
20c7c                 | LR__2881
20c7c     09 23 82 F1 | 	sub	local03, arg01
20c80     11 FB 01 F6 | 	mov	result1, local03
20c84     FD 24 02 F6 | 	mov	local04, result1
20c88     10 25 5A F2 | 	cmps	local04, local02 wcz
20c8c     0F FB 01 E6 |  if_be	mov	result1, local01
20c90     34 00 90 ED |  if_be	jmp	#LR__2883
20c94     10 13 02 F6 | 	mov	arg01, local02
20c98     02 12 06 F1 | 	add	arg01, #2
20c9c     20 1D B0 FD | 	call	#__system___gc_alloc_managed
20ca0     FD 26 0A F6 | 	mov	local05, result1 wz
20ca4     1C 00 90 AD |  if_e	jmp	#LR__2882
20ca8     10 25 82 F1 | 	sub	local04, local02
20cac     0F 25 02 F1 | 	add	local04, local01
20cb0     01 20 06 F1 | 	add	local02, #1
20cb4     13 13 02 F6 | 	mov	arg01, local05
20cb8     12 15 02 F6 | 	mov	arg02, local04
20cbc     10 17 02 F6 | 	mov	arg03, local02
20cc0     D0 DD BF FD | 	call	#__system____builtin_memmove
20cc4                 | LR__2882
20cc4     13 FB 01 F6 | 	mov	result1, local05
20cc8                 | LR__2883
20cc8     A7 F0 03 F6 | 	mov	ptra, fp
20ccc     B2 00 A0 FD | 	call	#popregs_
20cd0                 | __system__Right_S_ret
20cd0     2D 00 64 FD | 	ret
20cd4                 | 
20cd4                 | __system__Mid_S
20cd4     05 4A 05 F6 | 	mov	COUNT_, #5
20cd8     A8 00 A0 FD | 	call	#pushregs_
20cdc     09 1F 02 F6 | 	mov	local01, arg01
20ce0     0A 21 02 F6 | 	mov	local02, arg02
20ce4     01 16 56 F2 | 	cmps	arg03, #1 wc
20ce8     70 01 00 CF 
20cec     34 FB 05 C6 |  if_b	mov	result1, ##@LR__4755
20cf0     80 00 90 CD |  if_b	jmp	#LR__2893
20cf4     01 20 86 F1 | 	sub	local02, #1
20cf8     00 20 56 F3 | 	fges	local02, #0 wc
20cfc     0F 13 02 F6 | 	mov	arg01, local01
20d00     09 23 02 F6 | 	mov	local03, arg01
20d04     97 06 48 FB | 	callpa	#(@LR__2891-@LR__2890)>>2,fcache_load_ptr_
20d08                 | LR__2890
20d08     11 FB C9 FA | 	rdbyte	result1, local03 wz
20d0c     01 22 06 51 |  if_ne	add	local03, #1
20d10     F4 FF 9F 5D |  if_ne	jmp	#LR__2890
20d14                 | LR__2891
20d14     09 23 82 F1 | 	sub	local03, arg01
20d18     11 FB 01 F6 | 	mov	result1, local03
20d1c     FD 14 02 F6 | 	mov	arg02, result1
20d20     10 15 52 F2 | 	cmps	arg02, local02 wc
20d24     70 01 00 CF 
20d28     35 FB 05 C6 |  if_b	mov	result1, ##@LR__4756
20d2c     44 00 90 CD |  if_b	jmp	#LR__2893
20d30     0A 25 02 F6 | 	mov	local04, arg02
20d34     10 25 82 F1 | 	sub	local04, local02
20d38     0B 25 5A F2 | 	cmps	local04, arg03 wcz
20d3c     0B 25 02 16 |  if_a	mov	local04, arg03
20d40     12 13 02 F6 | 	mov	arg01, local04
20d44     02 12 06 F1 | 	add	arg01, #2
20d48     74 1C B0 FD | 	call	#__system___gc_alloc_managed
20d4c     FD 26 0A F6 | 	mov	local05, result1 wz
20d50     1C 00 90 AD |  if_e	jmp	#LR__2892
20d54     0F 21 02 F1 | 	add	local02, local01
20d58     13 13 02 F6 | 	mov	arg01, local05
20d5c     10 15 02 F6 | 	mov	arg02, local02
20d60     12 17 02 F6 | 	mov	arg03, local04
20d64     2C DD BF FD | 	call	#__system____builtin_memmove
20d68     13 25 02 F1 | 	add	local04, local05
20d6c     12 01 48 FC | 	wrbyte	#0, local04
20d70                 | LR__2892
20d70     13 FB 01 F6 | 	mov	result1, local05
20d74                 | LR__2893
20d74     A7 F0 03 F6 | 	mov	ptra, fp
20d78     B2 00 A0 FD | 	call	#popregs_
20d7c                 | __system__Mid_S_ret
20d7c     2D 00 64 FD | 	ret
20d80                 | 
20d80                 | __system__Chr_S
20d80     01 4A 05 F6 | 	mov	COUNT_, #1
20d84     A8 00 A0 FD | 	call	#pushregs_
20d88     09 1F 02 F6 | 	mov	local01, arg01
20d8c     03 12 06 F6 | 	mov	arg01, #3
20d90     2C 1C B0 FD | 	call	#__system___gc_alloc_managed
20d94     00 FA 4D F2 | 	cmps	result1, #0 wz
20d98     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
20d9c     01 FA 05 51 |  if_ne	add	result1, #1
20da0     FD 00 48 5C |  if_ne	wrbyte	#0, result1
20da4     01 FA 85 51 |  if_ne	sub	result1, #1
20da8     A7 F0 03 F6 | 	mov	ptra, fp
20dac     B2 00 A0 FD | 	call	#popregs_
20db0                 | __system__Chr_S_ret
20db0     2D 00 64 FD | 	ret
20db4                 | 
20db4                 | __system__str_S
20db4     02 4A 05 F6 | 	mov	COUNT_, #2
20db8     A8 00 A0 FD | 	call	#pushregs_
20dbc     09 1F 02 F6 | 	mov	local01, arg01
20dc0     10 12 06 F6 | 	mov	arg01, #16
20dc4     F8 1B B0 FD | 	call	#__system___gc_alloc_managed
20dc8     FD 20 0A F6 | 	mov	local02, result1 wz
20dcc     30 00 90 AD |  if_e	jmp	#LR__2900
20dd0     F8 13 02 F6 | 	mov	arg01, ptra
20dd4     08 F0 07 F1 | 	add	ptra, #8
20dd8     09 21 62 FC | 	wrlong	local02, arg01
20ddc     04 12 06 F1 | 	add	arg01, #4
20de0     09 01 68 FC | 	wrlong	#0, arg01
20de4     04 12 86 F1 | 	sub	arg01, #4
20de8     00 48 04 FF 
20dec     00 12 46 F5 | 	or	arg01, ##143654912
20df0     00 14 06 F6 | 	mov	arg02, #0
20df4     0F 17 02 F6 | 	mov	arg03, local01
20df8     67 18 06 F6 | 	mov	arg04, #103
20dfc     90 EE BF FD | 	call	#__system___fmtfloat
20e00                 | LR__2900
20e00     10 FB 01 F6 | 	mov	result1, local02
20e04     A7 F0 03 F6 | 	mov	ptra, fp
20e08     B2 00 A0 FD | 	call	#popregs_
20e0c                 | __system__str_S_ret
20e0c     2D 00 64 FD | 	ret
20e10                 | 
20e10                 | __system__Number_S
20e10     08 4A 05 F6 | 	mov	COUNT_, #8
20e14     A8 00 A0 FD | 	call	#pushregs_
20e18     09 1F 02 F6 | 	mov	local01, arg01
20e1c     0A 21 0A F6 | 	mov	local02, arg02 wz
20e20     0B 23 02 F6 | 	mov	local03, arg03
20e24     3C 00 90 5D |  if_ne	jmp	#LR__2912
20e28     01 20 06 F6 | 	mov	local02, #1
20e2c     11 25 02 F6 | 	mov	local04, local03
20e30     01 26 06 F6 | 	mov	local05, #1
20e34     97 16 48 FB | 	callpa	#(@LR__2911-@LR__2910)>>2,fcache_load_ptr_
20e38                 | LR__2910
20e38     00 28 06 F6 | 	mov	local06, #0
20e3c     0F 25 1A F2 | 	cmp	local04, local01 wcz
20e40     01 28 66 E6 |  if_be	neg	local06, #1
20e44     12 27 12 F2 | 	cmp	local05, local04 wc
20e48     15 2B A2 F1 | 	subx	local07, local07
20e4c     15 29 CA F7 | 	test	local06, local07 wz
20e50     11 25 02 5D |  if_ne	qmul	local04, local03
20e54     12 27 02 56 |  if_ne	mov	local05, local04
20e58     01 20 06 51 |  if_ne	add	local02, #1
20e5c     18 24 62 5D |  if_ne	getqx	local04
20e60     D4 FF 9F 5D |  if_ne	jmp	#LR__2910
20e64                 | LR__2911
20e64                 | LR__2912
20e64     20 20 36 F3 | 	fle	local02, #32 wc
20e68     10 13 02 F6 | 	mov	arg01, local02
20e6c     02 12 06 F1 | 	add	arg01, #2
20e70     4C 1B B0 FD | 	call	#__system___gc_alloc_managed
20e74     FD 28 02 F6 | 	mov	local06, result1
20e78     10 2B 02 F6 | 	mov	local07, local02
20e7c     14 2B 02 F1 | 	add	local07, local06
20e80     15 01 48 FC | 	wrbyte	#0, local07
20e84     97 1A 48 FB | 	callpa	#(@LR__2914-@LR__2913)>>2,fcache_load_ptr_
20e88                 | LR__2913
20e88     01 20 16 F2 | 	cmp	local02, #1 wc
20e8c     2C 00 90 CD |  if_b	jmp	#LR__2915
20e90     11 1F 12 FD | 	qdiv	local01, local03
20e94     01 20 86 F1 | 	sub	local02, #1
20e98     10 2B 02 F6 | 	mov	local07, local02
20e9c     14 2B 02 F1 | 	add	local07, local06
20ea0     19 2C 62 FD | 	getqy	local08
20ea4     0A 2C 16 F2 | 	cmp	local08, #10 wc
20ea8     30 2C 06 C1 |  if_b	add	local08, #48
20eac     37 2C 06 31 |  if_ae	add	local08, #55
20eb0     15 2D 42 FC | 	wrbyte	local08, local07
20eb4     18 1E 62 FD | 	getqx	local01
20eb8     CC FF 9F FD | 	jmp	#LR__2913
20ebc                 | LR__2914
20ebc                 | LR__2915
20ebc     14 FB 01 F6 | 	mov	result1, local06
20ec0     A7 F0 03 F6 | 	mov	ptra, fp
20ec4     B2 00 A0 FD | 	call	#popregs_
20ec8                 | __system__Number_S_ret
20ec8     2D 00 64 FD | 	ret
20ecc                 | 
20ecc                 | __system__LCase_S
20ecc     07 4A 05 F6 | 	mov	COUNT_, #7
20ed0     A8 00 A0 FD | 	call	#pushregs_
20ed4     09 1F 02 F6 | 	mov	local01, arg01
20ed8     09 21 02 F6 | 	mov	local02, arg01
20edc     97 06 48 FB | 	callpa	#(@LR__2921-@LR__2920)>>2,fcache_load_ptr_
20ee0                 | LR__2920
20ee0     10 FB C9 FA | 	rdbyte	result1, local02 wz
20ee4     01 20 06 51 |  if_ne	add	local02, #1
20ee8     F4 FF 9F 5D |  if_ne	jmp	#LR__2920
20eec                 | LR__2921
20eec     09 21 82 F1 | 	sub	local02, arg01
20ef0     10 FB 01 F6 | 	mov	result1, local02
20ef4     FD 20 0A F6 | 	mov	local02, result1 wz
20ef8     70 01 00 AF 
20efc     36 FB 05 A6 |  if_e	mov	result1, ##@LR__4757
20f00     7C 00 90 AD |  if_e	jmp	#LR__2927
20f04     10 13 02 F6 | 	mov	arg01, local02
20f08     02 12 06 F1 | 	add	arg01, #2
20f0c     B0 1A B0 FD | 	call	#__system___gc_alloc_managed
20f10     FD 22 0A F6 | 	mov	local03, result1 wz
20f14     64 00 90 AD |  if_e	jmp	#LR__2926
20f18     01 24 66 F6 | 	neg	local04, #1
20f1c     97 26 48 FB | 	callpa	#(@LR__2925-@LR__2922)>>2,fcache_load_ptr_
20f20                 | LR__2922
20f20     01 24 06 F1 | 	add	local04, #1
20f24     12 27 02 F6 | 	mov	local05, local04
20f28     0F 27 02 F1 | 	add	local05, local01
20f2c     13 29 C2 FA | 	rdbyte	local06, local05
20f30     41 28 56 F2 | 	cmps	local06, #65 wc
20f34     18 00 90 CD |  if_b	jmp	#LR__2923
20f38     5B 28 56 F2 | 	cmps	local06, #91 wc
20f3c     12 2B 02 C6 |  if_b	mov	local07, local04
20f40     11 2B 02 C1 |  if_b	add	local07, local03
20f44     20 28 06 C1 |  if_b	add	local06, #32
20f48     15 29 42 CC |  if_b	wrbyte	local06, local07
20f4c     0C 00 90 CD |  if_b	jmp	#LR__2924
20f50                 | LR__2923
20f50     12 2B 02 F6 | 	mov	local07, local04
20f54     11 2B 02 F1 | 	add	local07, local03
20f58     15 29 42 FC | 	wrbyte	local06, local07
20f5c                 | LR__2924
20f5c     10 29 02 F6 | 	mov	local06, local02
20f60     01 28 86 F1 | 	sub	local06, #1
20f64     14 25 0A F2 | 	cmp	local04, local06 wz
20f68     B4 FF 9F 5D |  if_ne	jmp	#LR__2922
20f6c                 | LR__2925
20f6c     11 21 02 F1 | 	add	local02, local03
20f70     10 01 48 FC | 	wrbyte	#0, local02
20f74     11 FB 01 F6 | 	mov	result1, local03
20f78     04 00 90 FD | 	jmp	#LR__2927
20f7c                 | LR__2926
20f7c     11 FB 01 F6 | 	mov	result1, local03
20f80                 | LR__2927
20f80     A7 F0 03 F6 | 	mov	ptra, fp
20f84     B2 00 A0 FD | 	call	#popregs_
20f88                 | __system__LCase_S_ret
20f88     2D 00 64 FD | 	ret
20f8c                 | 
20f8c                 | __system__LTrim_S
20f8c     05 4A 05 F6 | 	mov	COUNT_, #5
20f90     A8 00 A0 FD | 	call	#pushregs_
20f94     09 1F 02 F6 | 	mov	local01, arg01
20f98     09 21 02 F6 | 	mov	local02, arg01
20f9c     97 06 48 FB | 	callpa	#(@LR__2931-@LR__2930)>>2,fcache_load_ptr_
20fa0                 | LR__2930
20fa0     10 FB C9 FA | 	rdbyte	result1, local02 wz
20fa4     01 20 06 51 |  if_ne	add	local02, #1
20fa8     F4 FF 9F 5D |  if_ne	jmp	#LR__2930
20fac                 | LR__2931
20fac     09 21 82 F1 | 	sub	local02, arg01
20fb0     10 FB 01 F6 | 	mov	result1, local02
20fb4     FD 20 0A F6 | 	mov	local02, result1 wz
20fb8     70 01 00 AF 
20fbc     37 FB 05 A6 |  if_e	mov	result1, ##@LR__4758
20fc0     7C 00 90 AD |  if_e	jmp	#LR__2936
20fc4     00 22 06 F6 | 	mov	local03, #0
20fc8     10 25 02 F6 | 	mov	local04, local02
20fcc                 | LR__2932
20fcc     12 23 52 F2 | 	cmps	local03, local04 wc
20fd0     68 00 90 3D |  if_ae	jmp	#LR__2935
20fd4     11 17 02 F6 | 	mov	arg03, local03
20fd8     0F 17 02 F1 | 	add	arg03, local01
20fdc     0B 17 C2 FA | 	rdbyte	arg03, arg03
20fe0     20 16 0E F2 | 	cmp	arg03, #32 wz
20fe4     4C 00 90 AD |  if_e	jmp	#LR__2934
20fe8     10 13 02 F6 | 	mov	arg01, local02
20fec     11 13 82 F1 | 	sub	arg01, local03
20ff0     02 12 06 F1 | 	add	arg01, #2
20ff4     C8 19 B0 FD | 	call	#__system___gc_alloc_managed
20ff8     FD 26 0A F6 | 	mov	local05, result1 wz
20ffc     2C 00 90 AD |  if_e	jmp	#LR__2933
21000     11 15 02 F6 | 	mov	arg02, local03
21004     0F 15 02 F1 | 	add	arg02, local01
21008     10 17 02 F6 | 	mov	arg03, local02
2100c     11 17 82 F1 | 	sub	arg03, local03
21010     13 13 02 F6 | 	mov	arg01, local05
21014     7C DA BF FD | 	call	#__system____builtin_memmove
21018     11 21 82 F1 | 	sub	local02, local03
2101c     13 21 02 F1 | 	add	local02, local05
21020     10 01 48 FC | 	wrbyte	#0, local02
21024     13 FB 01 F6 | 	mov	result1, local05
21028     14 00 90 FD | 	jmp	#LR__2936
2102c                 | LR__2933
2102c     13 FB 01 F6 | 	mov	result1, local05
21030     0C 00 90 FD | 	jmp	#LR__2936
21034                 | LR__2934
21034     01 22 06 F1 | 	add	local03, #1
21038     90 FF 9F FD | 	jmp	#LR__2932
2103c                 | LR__2935
2103c     0F FB 01 F6 | 	mov	result1, local01
21040                 | LR__2936
21040     A7 F0 03 F6 | 	mov	ptra, fp
21044     B2 00 A0 FD | 	call	#popregs_
21048                 | __system__LTrim_S_ret
21048     2D 00 64 FD | 	ret
2104c                 | 
2104c                 | __system__RTrim_S
2104c     04 4A 05 F6 | 	mov	COUNT_, #4
21050     A8 00 A0 FD | 	call	#pushregs_
21054     09 1F 02 F6 | 	mov	local01, arg01
21058     09 21 02 F6 | 	mov	local02, arg01
2105c     97 06 48 FB | 	callpa	#(@LR__2941-@LR__2940)>>2,fcache_load_ptr_
21060                 | LR__2940
21060     10 FB C9 FA | 	rdbyte	result1, local02 wz
21064     01 20 06 51 |  if_ne	add	local02, #1
21068     F4 FF 9F 5D |  if_ne	jmp	#LR__2940
2106c                 | LR__2941
2106c     09 21 82 F1 | 	sub	local02, arg01
21070     10 FB 01 F6 | 	mov	result1, local02
21074     FD 20 0A F6 | 	mov	local02, result1 wz
21078     70 01 00 AF 
2107c     38 FB 05 A6 |  if_e	mov	result1, ##@LR__4759
21080     74 00 90 AD |  if_e	jmp	#LR__2945
21084     10 23 02 F6 | 	mov	local03, local02
21088     01 22 86 F1 | 	sub	local03, #1
2108c                 | LR__2942
2108c     11 15 02 F6 | 	mov	arg02, local03
21090     0F 15 02 F1 | 	add	arg02, local01
21094     0A 21 C2 FA | 	rdbyte	local02, arg02
21098     20 20 0E F2 | 	cmp	local02, #32 wz
2109c     44 00 90 AD |  if_e	jmp	#LR__2944
210a0     11 13 02 F6 | 	mov	arg01, local03
210a4     02 12 06 F1 | 	add	arg01, #2
210a8     14 19 B0 FD | 	call	#__system___gc_alloc_managed
210ac     FD 24 0A F6 | 	mov	local04, result1 wz
210b0     28 00 90 AD |  if_e	jmp	#LR__2943
210b4     11 17 02 F6 | 	mov	arg03, local03
210b8     01 16 06 F1 | 	add	arg03, #1
210bc     12 13 02 F6 | 	mov	arg01, local04
210c0     0F 15 02 F6 | 	mov	arg02, local01
210c4     CC D9 BF FD | 	call	#__system____builtin_memmove
210c8     01 22 06 F1 | 	add	local03, #1
210cc     12 23 02 F1 | 	add	local03, local04
210d0     11 01 48 FC | 	wrbyte	#0, local03
210d4     12 FB 01 F6 | 	mov	result1, local04
210d8     1C 00 90 FD | 	jmp	#LR__2945
210dc                 | LR__2943
210dc     12 FB 01 F6 | 	mov	result1, local04
210e0     14 00 90 FD | 	jmp	#LR__2945
210e4                 | LR__2944
210e4     01 22 86 F1 | 	sub	local03, #1
210e8     00 22 56 F2 | 	cmps	local03, #0 wc
210ec     9C FF 9F 3D |  if_ae	jmp	#LR__2942
210f0     70 01 00 FF 
210f4     39 FB 05 F6 | 	mov	result1, ##@LR__4760
210f8                 | LR__2945
210f8     A7 F0 03 F6 | 	mov	ptra, fp
210fc     B2 00 A0 FD | 	call	#popregs_
21100                 | __system__RTrim_S_ret
21100     2D 00 64 FD | 	ret
21104                 | 
21104                 | __system__Instr
21104     07 4A 05 F6 | 	mov	COUNT_, #7
21108     A8 00 A0 FD | 	call	#pushregs_
2110c     09 1F 02 F6 | 	mov	local01, arg01
21110     0A 21 02 F6 | 	mov	local02, arg02
21114     0B 23 02 F6 | 	mov	local03, arg03
21118     11 13 02 F6 | 	mov	arg01, local03
2111c     09 25 02 F6 | 	mov	local04, arg01
21120     97 06 48 FB | 	callpa	#(@LR__2951-@LR__2950)>>2,fcache_load_ptr_
21124                 | LR__2950
21124     12 FB C9 FA | 	rdbyte	result1, local04 wz
21128     01 24 06 51 |  if_ne	add	local04, #1
2112c     F4 FF 9F 5D |  if_ne	jmp	#LR__2950
21130                 | LR__2951
21130     09 25 82 F1 | 	sub	local04, arg01
21134     12 27 02 F6 | 	mov	local05, local04
21138     10 13 02 F6 | 	mov	arg01, local02
2113c     09 25 02 F6 | 	mov	local04, arg01
21140     97 06 48 FB | 	callpa	#(@LR__2953-@LR__2952)>>2,fcache_load_ptr_
21144                 | LR__2952
21144     12 FB C9 FA | 	rdbyte	result1, local04 wz
21148     01 24 06 51 |  if_ne	add	local04, #1
2114c     F4 FF 9F 5D |  if_ne	jmp	#LR__2952
21150                 | LR__2953
21150     09 25 82 F1 | 	sub	local04, arg01
21154     12 FB 01 F6 | 	mov	result1, local04
21158     FD 18 0A F6 | 	mov	arg04, result1 wz
2115c     00 FA 05 A6 |  if_e	mov	result1, #0
21160     98 00 90 AD |  if_e	jmp	#LR__2957
21164     00 26 0E F2 | 	cmp	local05, #0 wz
21168     00 FA 05 A6 |  if_e	mov	result1, #0
2116c     8C 00 90 AD |  if_e	jmp	#LR__2957
21170     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
21174     00 FA 05 16 |  if_a	mov	result1, #0
21178     80 00 90 1D |  if_a	jmp	#LR__2957
2117c     01 1E 56 F2 | 	cmps	local01, #1 wc
21180     01 1E 06 C6 |  if_b	mov	local01, #1
21184     11 29 C2 FA | 	rdbyte	local06, local03
21188     01 26 0E F2 | 	cmp	local05, #1 wz
2118c     18 00 90 5D |  if_ne	jmp	#LR__2954
21190     10 13 02 F6 | 	mov	arg01, local02
21194     14 15 02 F6 | 	mov	arg02, local06
21198     0F 17 02 F6 | 	mov	arg03, local01
2119c     00 18 06 F6 | 	mov	arg04, #0
211a0     B8 33 B0 FD | 	call	#__system____ScanForChar
211a4     54 00 90 FD | 	jmp	#LR__2957
211a8                 | LR__2954
211a8     0F 2B 02 F6 | 	mov	local07, local01
211ac                 | LR__2955
211ac     10 13 02 F6 | 	mov	arg01, local02
211b0     14 15 02 F6 | 	mov	arg02, local06
211b4     15 17 02 F6 | 	mov	arg03, local07
211b8     00 18 06 F6 | 	mov	arg04, #0
211bc     9C 33 B0 FD | 	call	#__system____ScanForChar
211c0     FD 2A 0A F6 | 	mov	local07, result1 wz
211c4     30 00 90 AD |  if_e	jmp	#LR__2956
211c8     13 17 02 F6 | 	mov	arg03, local05
211cc     10 13 02 F6 | 	mov	arg01, local02
211d0     15 15 02 F6 | 	mov	arg02, local07
211d4     FC FA BF FD | 	call	#__system__Mid_S
211d8     FD 12 02 F6 | 	mov	arg01, result1
211dc     11 15 02 F6 | 	mov	arg02, local03
211e0     B8 D9 BF FD | 	call	#__system___string_cmp
211e4     00 FA 0D F2 | 	cmp	result1, #0 wz
211e8     15 FB 01 A6 |  if_e	mov	result1, local07
211ec     0C 00 90 AD |  if_e	jmp	#LR__2957
211f0     13 2B 02 F1 | 	add	local07, local05
211f4     B4 FF 9F FD | 	jmp	#LR__2955
211f8                 | LR__2956
211f8     00 FA 05 F6 | 	mov	result1, #0
211fc                 | LR__2957
211fc     A7 F0 03 F6 | 	mov	ptra, fp
21200     B2 00 A0 FD | 	call	#popregs_
21204                 | __system__Instr_ret
21204     2D 00 64 FD | 	ret
21208                 | 
21208                 | __system___strerror
21208     00 12 56 F2 | 	cmps	arg01, #0 wc
2120c     08 00 90 CD |  if_b	jmp	#LR__2960
21210     1A 12 56 F2 | 	cmps	arg01, #26 wc
21214     04 00 90 CD |  if_b	jmp	#LR__2961
21218                 | LR__2960
21218     19 12 06 F6 | 	mov	arg01, #25
2121c                 | LR__2961
2121c     02 12 66 F0 | 	shl	arg01, #2
21220     01 00 00 FF 
21224     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
21228     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2122c     09 FB 01 FB | 	rdlong	result1, arg01
21230     01 00 00 FF 
21234     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
21238                 | __system___strerror_ret
21238     2D 00 64 FD | 	ret
2123c                 | 
2123c                 | __system___int64_shl
2123c     20 16 CE F7 | 	test	arg03, #32 wz
21240     09 15 02 56 |  if_ne	mov	arg02, arg01
21244     00 12 06 56 |  if_ne	mov	arg01, #0
21248     1F 16 CE F7 | 	test	arg03, #31 wz
2124c     18 00 90 AD |  if_e	jmp	#LR__2970
21250     0B 15 62 F0 | 	shl	arg02, arg03
21254     09 FB 01 F6 | 	mov	result1, arg01
21258     0B FD 61 F6 | 	neg	result2, arg03
2125c     FE FA 41 F0 | 	shr	result1, result2
21260     FD 14 42 F5 | 	or	arg02, result1
21264     0B 13 62 F0 | 	shl	arg01, arg03
21268                 | LR__2970
21268     0A FD 01 F6 | 	mov	result2, arg02
2126c     09 FB 01 F6 | 	mov	result1, arg01
21270                 | __system___int64_shl_ret
21270     2D 00 64 FD | 	ret
21274                 | 
21274                 | __system___usepins
21274     14 E6 05 F1 | 	add	ptr___system__dat__, #20
21278     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
2127c     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
21280     00 13 CA F7 | 	test	arg01, _var01 wz
21284     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
21288     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
2128c     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
21290     01 15 CA A7 |  if_e	test	arg02, _var02 wz
21294     00 FA 05 56 |  if_ne	mov	result1, #0
21298     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
2129c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
212a0     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
212a4     09 03 42 F5 | 	or	_var02, arg01
212a8     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
212ac     04 E6 05 F1 | 	add	ptr___system__dat__, #4
212b0     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
212b4     0A 03 42 F5 | 	or	_var02, arg02
212b8     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
212bc     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
212c0     01 FA 65 F6 | 	neg	result1, #1
212c4                 | __system___usepins_ret
212c4     2D 00 64 FD | 	ret
212c8                 | 
212c8                 | __system___freepins
212c8     14 E6 05 F1 | 	add	ptr___system__dat__, #20
212cc     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
212d0     09 01 22 F5 | 	andn	_var01, arg01
212d4     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
212d8     04 E6 05 F1 | 	add	ptr___system__dat__, #4
212dc     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
212e0     0A 01 22 F5 | 	andn	_var01, arg02
212e4     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
212e8     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
212ec                 | __system___freepins_ret
212ec     2D 00 64 FD | 	ret
212f0                 | 
212f0                 | __system___float_fromuns
212f0     09 17 0A F6 | 	mov	arg03, arg01 wz
212f4     0B FB 01 A6 |  if_e	mov	result1, arg03
212f8     24 00 90 AD |  if_e	jmp	#LR__2980
212fc     0B 15 92 F7 | 	encod	arg02, arg03 wc
21300     01 14 06 C1 |  if_b	add	arg02, #1
21304     01 14 86 F1 | 	sub	arg02, #1
21308     1F 12 06 F6 | 	mov	arg01, #31
2130c     0A 13 82 F1 | 	sub	arg01, arg02
21310     09 17 62 F0 | 	shl	arg03, arg01
21314     02 16 46 F0 | 	shr	arg03, #2
21318     00 12 06 F6 | 	mov	arg01, #0
2131c     4C 09 B0 FD | 	call	#__system___float_Pack
21320                 | LR__2980
21320                 | __system___float_fromuns_ret
21320     2D 00 64 FD | 	ret
21324                 | 
21324                 | __system___float_add
21324     0F 4A 05 F6 | 	mov	COUNT_, #15
21328     A8 00 A0 FD | 	call	#pushregs_
2132c     09 1F 02 F6 | 	mov	local01, arg01
21330     0A 21 02 F6 | 	mov	local02, arg02
21334     00 22 06 F6 | 	mov	local03, #0
21338     0F 25 02 F6 | 	mov	local04, local01
2133c     12 27 02 F6 | 	mov	local05, local04
21340     16 26 46 F7 | 	zerox	local05, #22
21344     12 29 02 F6 | 	mov	local06, local04
21348     01 28 66 F0 | 	shl	local06, #1
2134c     18 28 46 F0 | 	shr	local06, #24
21350     1F 24 46 F0 | 	shr	local04, #31
21354     10 13 02 F6 | 	mov	arg01, local02
21358     09 FB 01 F6 | 	mov	result1, arg01
2135c     FD 2A 02 F6 | 	mov	local07, result1
21360     15 2D 02 F6 | 	mov	local08, local07
21364     16 2C 46 F7 | 	zerox	local08, #22
21368     15 2F 02 F6 | 	mov	local09, local07
2136c     01 2E 66 F0 | 	shl	local09, #1
21370     18 2E 46 F0 | 	shr	local09, #24
21374     17 31 02 F6 | 	mov	local10, local09
21378     1F 2A 46 F0 | 	shr	local07, #31
2137c     00 32 06 F6 | 	mov	local11, #0
21380     00 34 06 F6 | 	mov	local12, #0
21384     18 29 12 F2 | 	cmp	local06, local10 wc
21388     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
2138c     2C 00 90 1D |  if_a	jmp	#LR__2990
21390     16 27 12 32 |  if_ae	cmp	local05, local08 wc
21394     24 00 90 3D |  if_ae	jmp	#LR__2990
21398     13 37 02 F6 | 	mov	local13, local05
2139c     16 27 02 F6 | 	mov	local05, local08
213a0     1B 2D 02 F6 | 	mov	local08, local13
213a4     14 37 02 F6 | 	mov	local13, local06
213a8     18 29 02 F6 | 	mov	local06, local10
213ac     1B 31 02 F6 | 	mov	local10, local13
213b0     12 37 02 F6 | 	mov	local13, local04
213b4     15 25 02 F6 | 	mov	local04, local07
213b8     1B 2B 02 F6 | 	mov	local07, local13
213bc                 | LR__2990
213bc     FF 28 0E F2 | 	cmp	local06, #255 wz
213c0     70 01 90 AD |  if_e	jmp	#LR__3005
213c4     00 28 0E F2 | 	cmp	local06, #0 wz
213c8     AC 01 90 AD |  if_e	jmp	#LR__3007
213cc     17 26 26 F4 | 	bith	local05, #23
213d0                 | LR__2991
213d0     00 30 0E F2 | 	cmp	local10, #0 wz
213d4     F0 01 90 AD |  if_e	jmp	#LR__3011
213d8     17 2C 26 F4 | 	bith	local08, #23
213dc                 | LR__2992
213dc     7F 28 86 F1 | 	sub	local06, #127
213e0     7F 30 86 F1 | 	sub	local10, #127
213e4     14 39 02 F6 | 	mov	local14, local06
213e8     18 39 82 F1 | 	sub	local14, local10
213ec     97 14 48 FB | 	callpa	#(@LR__2994-@LR__2993)>>2,fcache_load_ptr_
213f0                 | LR__2993
213f0     20 38 56 F2 | 	cmps	local14, #32 wc
213f4     20 00 90 CD |  if_b	jmp	#LR__2995
213f8     16 2F 02 F6 | 	mov	local09, local08
213fc     00 32 0E F2 | 	cmp	local11, #0 wz
21400     6F 32 62 FD | 	wrnz	local11
21404     19 2F 42 F5 | 	or	local09, local11
21408     17 33 02 F6 | 	mov	local11, local09
2140c     00 2C 06 F6 | 	mov	local08, #0
21410     20 38 86 F1 | 	sub	local14, #32
21414     D8 FF 9F FD | 	jmp	#LR__2993
21418                 | LR__2994
21418                 | LR__2995
21418     00 38 0E F2 | 	cmp	local14, #0 wz
2141c     38 00 90 AD |  if_e	jmp	#LR__2996
21420     16 37 02 F6 | 	mov	local13, local08
21424     20 30 06 F6 | 	mov	local10, #32
21428     1C 31 82 F1 | 	sub	local10, local14
2142c     18 37 62 F0 | 	shl	local13, local10
21430     19 31 02 F6 | 	mov	local10, local11
21434     20 2E 06 F6 | 	mov	local09, #32
21438     1C 2F 82 F1 | 	sub	local09, local14
2143c     17 31 6A F0 | 	shl	local10, local09 wz
21440     1C 33 42 F0 | 	shr	local11, local14
21444     1C 2D 42 F0 | 	shr	local08, local14
21448     1B 33 42 F5 | 	or	local11, local13
2144c     00 3A 06 F6 | 	mov	local15, #0
21450     01 3A 06 56 |  if_ne	mov	local15, #1
21454     1D 33 42 F5 | 	or	local11, local15
21458                 | LR__2996
21458     12 3B 02 F6 | 	mov	local15, local04
2145c     15 3B 62 F5 | 	xor	local15, local07
21460     01 3A CE F7 | 	test	local15, #1 wz
21464     18 00 90 AD |  if_e	jmp	#LR__2997
21468     16 2D 22 F6 | 	not	local08, local08
2146c     19 33 22 F6 | 	not	local11, local11
21470     01 32 0E F1 | 	add	local11, #1 wz
21474     00 3A 06 F6 | 	mov	local15, #0
21478     01 3A 06 A6 |  if_e	mov	local15, #1
2147c     1D 2D 02 F1 | 	add	local08, local15
21480                 | LR__2997
21480     19 35 12 F1 | 	add	local12, local11 wc
21484     16 27 22 F1 | 	addx	local05, local08
21488     00 26 56 F2 | 	cmps	local05, #0 wc
2148c     1C 00 90 3D |  if_ae	jmp	#LR__2998
21490     01 24 66 F5 | 	xor	local04, #1
21494     13 27 22 F6 | 	not	local05, local05
21498     1A 35 22 F6 | 	not	local12, local12
2149c     01 34 0E F1 | 	add	local12, #1 wz
214a0     00 3A 06 F6 | 	mov	local15, #0
214a4     01 3A 06 A6 |  if_e	mov	local15, #1
214a8     1D 27 02 F1 | 	add	local05, local15
214ac                 | LR__2998
214ac     00 80 00 FF 
214b0     00 26 16 F2 | 	cmp	local05, ##16777216 wc
214b4     28 00 90 CD |  if_b	jmp	#LR__2999
214b8     01 28 06 F1 | 	add	local06, #1
214bc     1A 39 02 F6 | 	mov	local14, local12
214c0     01 38 06 F5 | 	and	local14, #1
214c4     01 34 46 F0 | 	shr	local12, #1
214c8     13 3B 02 F6 | 	mov	local15, local05
214cc     1F 3A 66 F0 | 	shl	local15, #31
214d0     1D 35 42 F5 | 	or	local12, local15
214d4     1C 35 42 F5 | 	or	local12, local14
214d8     01 26 46 F0 | 	shr	local05, #1
214dc     3C 00 90 FD | 	jmp	#LR__3004
214e0                 | LR__2999
214e0     00 40 00 FF 
214e4     00 26 16 F2 | 	cmp	local05, ##8388608 wc
214e8     30 00 90 3D |  if_ae	jmp	#LR__3003
214ec     00 26 0E F2 | 	cmp	local05, #0 wz
214f0     00 34 0E A2 |  if_e	cmp	local12, #0 wz
214f4     08 24 46 A5 |  if_e	or	local04, #8
214f8     01 24 26 A5 |  if_e	andn	local04, #1
214fc     1C 00 90 AD |  if_e	jmp	#LR__3002
21500                 | LR__3000
21500     00 40 00 FF 
21504     00 26 16 F2 | 	cmp	local05, ##8388608 wc
21508     10 00 90 3D |  if_ae	jmp	#LR__3001
2150c     1A 35 12 F1 | 	add	local12, local12 wc
21510     13 27 22 F1 | 	addx	local05, local05
21514     01 28 86 F1 | 	sub	local06, #1
21518     E4 FF 9F FD | 	jmp	#LR__3000
2151c                 | LR__3001
2151c                 | LR__3002
2151c                 | LR__3003
2151c                 | LR__3004
2151c     13 13 02 F6 | 	mov	arg01, local05
21520     1A 15 02 F6 | 	mov	arg02, local12
21524     14 17 02 F6 | 	mov	arg03, local06
21528     12 19 02 F6 | 	mov	arg04, local04
2152c     70 34 B0 FD | 	call	#__system__pack_0550
21530     DC 00 90 FD | 	jmp	#LR__3015
21534                 | LR__3005
21534     FF 30 0E F2 | 	cmp	local10, #255 wz
21538     10 00 90 5D |  if_ne	jmp	#LR__3006
2153c     12 2B 0A F2 | 	cmp	local07, local04 wz
21540     00 F8 3F 5F 
21544     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
21548     C4 00 90 5D |  if_ne	jmp	#LR__3015
2154c                 | LR__3006
2154c     00 26 0E F2 | 	cmp	local05, #0 wz
21550     00 F8 3F 5F 
21554     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
21558     B4 00 90 5D |  if_ne	jmp	#LR__3015
2155c     1A 15 02 F6 | 	mov	arg02, local12
21560     14 17 02 F6 | 	mov	arg03, local06
21564     12 19 02 F6 | 	mov	arg04, local04
21568     02 18 46 F5 | 	or	arg04, #2
2156c     13 13 02 F6 | 	mov	arg01, local05
21570     2C 34 B0 FD | 	call	#__system__pack_0550
21574     98 00 90 FD | 	jmp	#LR__3015
21578                 | LR__3007
21578     00 26 0E F2 | 	cmp	local05, #0 wz
2157c     28 00 90 AD |  if_e	jmp	#LR__3010
21580     01 26 66 F0 | 	shl	local05, #1
21584     97 0E 48 FB | 	callpa	#(@LR__3009-@LR__3008)>>2,fcache_load_ptr_
21588                 | LR__3008
21588     00 40 00 FF 
2158c     00 26 16 F2 | 	cmp	local05, ##8388608 wc
21590     14 3B 02 C6 |  if_b	mov	local15, local06
21594     01 3A 86 C1 |  if_b	sub	local15, #1
21598     1D 29 02 C6 |  if_b	mov	local06, local15
2159c     01 26 66 C0 |  if_b	shl	local05, #1
215a0     E4 FF 9F CD |  if_b	jmp	#LR__3008
215a4                 | LR__3009
215a4     28 FE 9F FD | 	jmp	#LR__2991
215a8                 | LR__3010
215a8     15 25 02 F5 | 	and	local04, local07
215ac     12 19 02 F6 | 	mov	arg04, local04
215b0     08 18 46 F5 | 	or	arg04, #8
215b4     00 12 06 F6 | 	mov	arg01, #0
215b8     00 14 06 F6 | 	mov	arg02, #0
215bc     00 16 06 F6 | 	mov	arg03, #0
215c0     DC 33 B0 FD | 	call	#__system__pack_0550
215c4     48 00 90 FD | 	jmp	#LR__3015
215c8                 | LR__3011
215c8     00 2C 0E F2 | 	cmp	local08, #0 wz
215cc     28 00 90 AD |  if_e	jmp	#LR__3014
215d0     01 2C 66 F0 | 	shl	local08, #1
215d4     97 0E 48 FB | 	callpa	#(@LR__3013-@LR__3012)>>2,fcache_load_ptr_
215d8                 | LR__3012
215d8     00 40 00 FF 
215dc     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
215e0     18 3B 02 C6 |  if_b	mov	local15, local10
215e4     01 3A 86 C1 |  if_b	sub	local15, #1
215e8     1D 31 02 C6 |  if_b	mov	local10, local15
215ec     01 2C 66 C0 |  if_b	shl	local08, #1
215f0     E4 FF 9F CD |  if_b	jmp	#LR__3012
215f4                 | LR__3013
215f4     E4 FD 9F FD | 	jmp	#LR__2992
215f8                 | LR__3014
215f8     7F 28 86 F1 | 	sub	local06, #127
215fc     13 13 02 F6 | 	mov	arg01, local05
21600     1A 15 02 F6 | 	mov	arg02, local12
21604     14 17 02 F6 | 	mov	arg03, local06
21608     12 19 02 F6 | 	mov	arg04, local04
2160c     90 33 B0 FD | 	call	#__system__pack_0550
21610                 | LR__3015
21610     A7 F0 03 F6 | 	mov	ptra, fp
21614     B2 00 A0 FD | 	call	#popregs_
21618                 | __system___float_add_ret
21618     2D 00 64 FD | 	ret
2161c                 | 
2161c                 | __system___float_sqrt
2161c     04 4A 05 F6 | 	mov	COUNT_, #4
21620     A8 00 A0 FD | 	call	#pushregs_
21624     09 1F 02 F6 | 	mov	local01, arg01
21628     09 FB 01 F6 | 	mov	result1, arg01
2162c     FD 20 02 F6 | 	mov	local02, result1
21630     10 23 02 F6 | 	mov	local03, local02
21634     16 22 46 F7 | 	zerox	local03, #22
21638     10 25 02 F6 | 	mov	local04, local02
2163c     01 24 66 F0 | 	shl	local04, #1
21640     18 24 4E F0 | 	shr	local04, #24 wz
21644     1F 20 46 F0 | 	shr	local02, #31
21648     70 00 90 AD |  if_e	jmp	#LR__3021
2164c     17 22 26 F4 | 	bith	local03, #23
21650                 | LR__3020
21650     00 20 0E F2 | 	cmp	local02, #0 wz
21654     00 F8 3F 5F 
21658     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2165c     88 00 90 5D |  if_ne	jmp	#LR__3024
21660     FF 24 0E F2 | 	cmp	local04, #255 wz
21664     0F FB 01 A6 |  if_e	mov	result1, local01
21668     7C 00 90 AD |  if_e	jmp	#LR__3024
2166c     7F 24 86 F1 | 	sub	local04, #127
21670     01 24 CE F7 | 	test	local04, #1 wz
21674     01 22 66 50 |  if_ne	shl	local03, #1
21678     05 22 66 F0 | 	shl	local03, #5
2167c     11 01 38 FD | 	qsqrt	#0, local03
21680     01 24 86 51 |  if_ne	sub	local04, #1
21684     12 25 52 F6 | 	abs	local04, local04 wc
21688     01 24 46 F0 | 	shr	local04, #1
2168c     12 17 82 F6 | 	negc	arg03, local04
21690     10 19 02 F6 | 	mov	arg04, local02
21694     18 12 62 FD | 	getqx	arg01
21698     09 15 02 F6 | 	mov	arg02, arg01
2169c     19 14 66 F0 | 	shl	arg02, #25
216a0     07 12 46 F0 | 	shr	arg01, #7
216a4     00 80 00 FF 
216a8     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
216ac     01 16 06 31 |  if_ae	add	arg03, #1
216b0     01 12 46 30 |  if_ae	shr	arg01, #1
216b4     E8 32 B0 FD | 	call	#__system__pack_0550
216b8     2C 00 90 FD | 	jmp	#LR__3024
216bc                 | LR__3021
216bc     00 22 0E F2 | 	cmp	local03, #0 wz
216c0     0F FB 01 A6 |  if_e	mov	result1, local01
216c4     20 00 90 AD |  if_e	jmp	#LR__3024
216c8     01 22 66 F0 | 	shl	local03, #1
216cc     97 0A 48 FB | 	callpa	#(@LR__3023-@LR__3022)>>2,fcache_load_ptr_
216d0                 | LR__3022
216d0     00 40 00 FF 
216d4     00 22 16 F2 | 	cmp	local03, ##8388608 wc
216d8     01 24 86 C1 |  if_b	sub	local04, #1
216dc     01 22 66 C0 |  if_b	shl	local03, #1
216e0     EC FF 9F CD |  if_b	jmp	#LR__3022
216e4                 | LR__3023
216e4     68 FF 9F FD | 	jmp	#LR__3020
216e8                 | LR__3024
216e8     A7 F0 03 F6 | 	mov	ptra, fp
216ec     B2 00 A0 FD | 	call	#popregs_
216f0                 | __system___float_sqrt_ret
216f0     2D 00 64 FD | 	ret
216f4                 | 
216f4                 | __system___float_mul
216f4     0B 4A 05 F6 | 	mov	COUNT_, #11
216f8     A8 00 A0 FD | 	call	#pushregs_
216fc     09 1F 02 F6 | 	mov	local01, arg01
21700     0A 21 02 F6 | 	mov	local02, arg02
21704     0F 23 02 F6 | 	mov	local03, local01
21708     11 25 02 F6 | 	mov	local04, local03
2170c     16 24 46 F7 | 	zerox	local04, #22
21710     11 27 02 F6 | 	mov	local05, local03
21714     01 26 66 F0 | 	shl	local05, #1
21718     18 26 46 F0 | 	shr	local05, #24
2171c     1F 22 46 F0 | 	shr	local03, #31
21720     10 FB 01 F6 | 	mov	result1, local02
21724     FD 28 02 F6 | 	mov	local06, result1
21728     14 2B 02 F6 | 	mov	local07, local06
2172c     16 2A 46 F7 | 	zerox	local07, #22
21730     14 2D 02 F6 | 	mov	local08, local06
21734     01 2C 66 F0 | 	shl	local08, #1
21738     18 2C 46 F0 | 	shr	local08, #24
2173c     1F 28 46 F0 | 	shr	local06, #31
21740     14 23 62 F5 | 	xor	local03, local06
21744     FF 26 0E F2 | 	cmp	local05, #255 wz
21748     90 00 90 AD |  if_e	jmp	#LR__3033
2174c     FF 2C 0E F2 | 	cmp	local08, #255 wz
21750     D8 00 90 AD |  if_e	jmp	#LR__3035
21754     00 26 0E F2 | 	cmp	local05, #0 wz
21758     0C 01 90 AD |  if_e	jmp	#LR__3036
2175c     17 24 26 F4 | 	bith	local04, #23
21760                 | LR__3030
21760     00 2C 0E F2 | 	cmp	local08, #0 wz
21764     44 01 90 AD |  if_e	jmp	#LR__3040
21768     17 2A 26 F4 | 	bith	local07, #23
2176c                 | LR__3031
2176c     12 21 02 F6 | 	mov	local02, local04
21770     04 20 66 F0 | 	shl	local02, #4
21774     15 29 02 F6 | 	mov	local06, local07
21778     05 28 66 F0 | 	shl	local06, #5
2177c     14 21 02 FD | 	qmul	local02, local06
21780     16 27 02 F1 | 	add	local05, local08
21784     FE 26 86 F1 | 	sub	local05, #254
21788     13 2F 02 F6 | 	mov	local09, local05
2178c     04 24 66 F0 | 	shl	local04, #4
21790     05 2A 66 F0 | 	shl	local07, #5
21794     18 30 62 FD | 	getqx	local10
21798     15 25 02 FD | 	qmul	local04, local07
2179c     19 32 62 FD | 	getqy	local11
217a0     00 80 00 FF 
217a4     00 32 16 F2 | 	cmp	local11, ##16777216 wc
217a8     18 00 90 CD |  if_b	jmp	#LR__3032
217ac     01 2E 06 F1 | 	add	local09, #1
217b0     01 30 46 F0 | 	shr	local10, #1
217b4     19 2D 02 F6 | 	mov	local08, local11
217b8     1F 2C 66 F0 | 	shl	local08, #31
217bc     16 31 42 F5 | 	or	local10, local08
217c0     01 32 46 F0 | 	shr	local11, #1
217c4                 | LR__3032
217c4     19 13 02 F6 | 	mov	arg01, local11
217c8     18 15 02 F6 | 	mov	arg02, local10
217cc     17 17 02 F6 | 	mov	arg03, local09
217d0     11 19 02 F6 | 	mov	arg04, local03
217d4     C8 31 B0 FD | 	call	#__system__pack_0550
217d8     10 01 90 FD | 	jmp	#LR__3044
217dc                 | LR__3033
217dc     00 24 0E F2 | 	cmp	local04, #0 wz
217e0     0F FB 01 56 |  if_ne	mov	result1, local01
217e4     04 01 90 5D |  if_ne	jmp	#LR__3044
217e8     FF 2C 56 F2 | 	cmps	local08, #255 wc
217ec     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
217f0     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
217f4     18 00 90 4D |  if_c_and_nz	jmp	#LR__3034
217f8     00 F8 3F CF 
217fc     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
21800     E8 00 90 CD |  if_b	jmp	#LR__3044
21804     00 2A 0E F2 | 	cmp	local07, #0 wz
21808     10 FB 01 56 |  if_ne	mov	result1, local02
2180c     DC 00 90 5D |  if_ne	jmp	#LR__3044
21810                 | LR__3034
21810     02 22 46 F5 | 	or	local03, #2
21814     00 12 06 F6 | 	mov	arg01, #0
21818     00 14 06 F6 | 	mov	arg02, #0
2181c     13 17 02 F6 | 	mov	arg03, local05
21820     11 19 02 F6 | 	mov	arg04, local03
21824     78 31 B0 FD | 	call	#__system__pack_0550
21828     C0 00 90 FD | 	jmp	#LR__3044
2182c                 | LR__3035
2182c     00 26 0E F2 | 	cmp	local05, #0 wz
21830     00 24 0E A2 |  if_e	cmp	local04, #0 wz
21834     00 F8 3F AF 
21838     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2183c     AC 00 90 AD |  if_e	jmp	#LR__3044
21840     00 2A 0E F2 | 	cmp	local07, #0 wz
21844     10 FB 01 56 |  if_ne	mov	result1, local02
21848     A0 00 90 5D |  if_ne	jmp	#LR__3044
2184c     16 17 02 F6 | 	mov	arg03, local08
21850     11 19 02 F6 | 	mov	arg04, local03
21854     02 18 46 F5 | 	or	arg04, #2
21858     00 12 06 F6 | 	mov	arg01, #0
2185c     00 14 06 F6 | 	mov	arg02, #0
21860     3C 31 B0 FD | 	call	#__system__pack_0550
21864     84 00 90 FD | 	jmp	#LR__3044
21868                 | LR__3036
21868     00 24 0E F2 | 	cmp	local04, #0 wz
2186c     20 00 90 AD |  if_e	jmp	#LR__3039
21870     01 24 66 F0 | 	shl	local04, #1
21874     97 0A 48 FB | 	callpa	#(@LR__3038-@LR__3037)>>2,fcache_load_ptr_
21878                 | LR__3037
21878     00 40 00 FF 
2187c     00 24 16 F2 | 	cmp	local04, ##8388608 wc
21880     01 26 86 C1 |  if_b	sub	local05, #1
21884     01 24 66 C0 |  if_b	shl	local04, #1
21888     EC FF 9F CD |  if_b	jmp	#LR__3037
2188c                 | LR__3038
2188c     D0 FE 9F FD | 	jmp	#LR__3030
21890                 | LR__3039
21890     08 22 46 F5 | 	or	local03, #8
21894     00 12 06 F6 | 	mov	arg01, #0
21898     00 14 06 F6 | 	mov	arg02, #0
2189c     00 16 06 F6 | 	mov	arg03, #0
218a0     11 19 02 F6 | 	mov	arg04, local03
218a4     F8 30 B0 FD | 	call	#__system__pack_0550
218a8     40 00 90 FD | 	jmp	#LR__3044
218ac                 | LR__3040
218ac     00 2A 0E F2 | 	cmp	local07, #0 wz
218b0     20 00 90 AD |  if_e	jmp	#LR__3043
218b4     01 2A 66 F0 | 	shl	local07, #1
218b8     97 0A 48 FB | 	callpa	#(@LR__3042-@LR__3041)>>2,fcache_load_ptr_
218bc                 | LR__3041
218bc     00 40 00 FF 
218c0     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
218c4     01 2C 86 C1 |  if_b	sub	local08, #1
218c8     01 2A 66 C0 |  if_b	shl	local07, #1
218cc     EC FF 9F CD |  if_b	jmp	#LR__3041
218d0                 | LR__3042
218d0     98 FE 9F FD | 	jmp	#LR__3031
218d4                 | LR__3043
218d4     08 22 46 F5 | 	or	local03, #8
218d8     00 12 06 F6 | 	mov	arg01, #0
218dc     00 14 06 F6 | 	mov	arg02, #0
218e0     00 16 06 F6 | 	mov	arg03, #0
218e4     11 19 02 F6 | 	mov	arg04, local03
218e8     B4 30 B0 FD | 	call	#__system__pack_0550
218ec                 | LR__3044
218ec     A7 F0 03 F6 | 	mov	ptra, fp
218f0     B2 00 A0 FD | 	call	#popregs_
218f4                 | __system___float_mul_ret
218f4     2D 00 64 FD | 	ret
218f8                 | 
218f8                 | __system___float_div
218f8     0E 4A 05 F6 | 	mov	COUNT_, #14
218fc     A8 00 A0 FD | 	call	#pushregs_
21900     09 23 02 F6 | 	mov	local03, arg01
21904     0A 25 02 F6 | 	mov	local04, arg02
21908     11 27 02 F6 | 	mov	local05, local03
2190c     13 29 02 F6 | 	mov	local06, local05
21910     16 28 46 F7 | 	zerox	local06, #22
21914     13 2B 02 F6 | 	mov	local07, local05
21918     01 2A 66 F0 | 	shl	local07, #1
2191c     18 2A 46 F0 | 	shr	local07, #24
21920     1F 26 46 F0 | 	shr	local05, #31
21924     12 FB 01 F6 | 	mov	result1, local04
21928     FD 2C 02 F6 | 	mov	local08, result1
2192c     16 2F 02 F6 | 	mov	local09, local08
21930     16 2E 46 F7 | 	zerox	local09, #22
21934     16 31 02 F6 | 	mov	local10, local08
21938     01 30 66 F0 | 	shl	local10, #1
2193c     18 30 46 F0 | 	shr	local10, #24
21940     1F 2C 46 F0 | 	shr	local08, #31
21944     16 27 62 F5 | 	xor	local05, local08
21948     FF 2A 0E F2 | 	cmp	local07, #255 wz
2194c     D4 00 90 AD |  if_e	jmp	#LR__3055
21950     FF 30 0E F2 | 	cmp	local10, #255 wz
21954     04 01 90 AD |  if_e	jmp	#LR__3056
21958     00 2A 0E F2 | 	cmp	local07, #0 wz
2195c     24 01 90 AD |  if_e	jmp	#LR__3057
21960     17 28 26 F4 | 	bith	local06, #23
21964                 | LR__3050
21964     00 30 0E F2 | 	cmp	local10, #0 wz
21968     70 01 90 AD |  if_e	jmp	#LR__3061
2196c     17 2E 26 F4 | 	bith	local09, #23
21970                 | LR__3051
21970     18 2B 82 F1 | 	sub	local07, local10
21974     15 33 02 F6 | 	mov	local11, local07
21978     14 13 02 F6 | 	mov	arg01, local06
2197c     02 12 46 F0 | 	shr	arg01, #2
21980     1E 28 66 F0 | 	shl	local06, #30
21984     14 15 02 F6 | 	mov	arg02, local06
21988     17 17 02 F6 | 	mov	arg03, local09
2198c     28 12 62 FD | 	setq	arg01
21990     0B 15 12 FD | 	qdiv	arg02, arg03
21994     00 34 06 F6 | 	mov	local12, #0
21998     18 1E 62 FD | 	getqx	local01
2199c     19 FC 61 FD | 	getqy	result2
219a0     FE 20 02 F6 | 	mov	local02, result2
219a4     0F 37 02 F6 | 	mov	local13, local01
219a8     00 20 4E F2 | 	cmps	local02, #0 wz
219ac     1B 39 02 F6 | 	mov	local14, local13
219b0     19 38 66 F0 | 	shl	local14, #25
219b4     01 34 06 56 |  if_ne	mov	local12, #1
219b8     1A 39 42 F5 | 	or	local14, local12
219bc     07 36 46 F0 | 	shr	local13, #7
219c0     00 80 00 FF 
219c4     00 36 16 F2 | 	cmp	local13, ##16777216 wc
219c8     1C 00 90 CD |  if_b	jmp	#LR__3052
219cc     01 32 06 F1 | 	add	local11, #1
219d0     01 38 46 F0 | 	shr	local14, #1
219d4     1B 35 02 F6 | 	mov	local12, local13
219d8     1F 34 66 F0 | 	shl	local12, #31
219dc     1A 39 42 F5 | 	or	local14, local12
219e0     01 36 46 F0 | 	shr	local13, #1
219e4     24 00 90 FD | 	jmp	#LR__3054
219e8                 | LR__3052
219e8     00 40 00 FF 
219ec     00 36 16 F2 | 	cmp	local13, ##8388608 wc
219f0     18 00 90 3D |  if_ae	jmp	#LR__3053
219f4     01 32 86 F1 | 	sub	local11, #1
219f8     01 36 66 F0 | 	shl	local13, #1
219fc     1C 35 02 F6 | 	mov	local12, local14
21a00     1F 34 46 F0 | 	shr	local12, #31
21a04     1A 37 42 F5 | 	or	local13, local12
21a08     01 38 66 F0 | 	shl	local14, #1
21a0c                 | LR__3053
21a0c                 | LR__3054
21a0c     1B 13 02 F6 | 	mov	arg01, local13
21a10     1C 15 02 F6 | 	mov	arg02, local14
21a14     19 17 02 F6 | 	mov	arg03, local11
21a18     13 19 02 F6 | 	mov	arg04, local05
21a1c     80 2F B0 FD | 	call	#__system__pack_0550
21a20     F8 00 90 FD | 	jmp	#LR__3065
21a24                 | LR__3055
21a24     00 28 0E F2 | 	cmp	local06, #0 wz
21a28     11 FB 01 56 |  if_ne	mov	result1, local03
21a2c     EC 00 90 5D |  if_ne	jmp	#LR__3065
21a30     FF 30 0E F2 | 	cmp	local10, #255 wz
21a34     00 F8 3F AF 
21a38     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
21a3c     DC 00 90 AD |  if_e	jmp	#LR__3065
21a40     02 26 46 F5 | 	or	local05, #2
21a44     00 12 06 F6 | 	mov	arg01, #0
21a48     00 14 06 F6 | 	mov	arg02, #0
21a4c     15 17 02 F6 | 	mov	arg03, local07
21a50     13 19 02 F6 | 	mov	arg04, local05
21a54     48 2F B0 FD | 	call	#__system__pack_0550
21a58     C0 00 90 FD | 	jmp	#LR__3065
21a5c                 | LR__3056
21a5c     00 2E 0E F2 | 	cmp	local09, #0 wz
21a60     12 FB 01 56 |  if_ne	mov	result1, local04
21a64     B4 00 90 5D |  if_ne	jmp	#LR__3065
21a68     13 19 02 F6 | 	mov	arg04, local05
21a6c     08 18 46 F5 | 	or	arg04, #8
21a70     00 12 06 F6 | 	mov	arg01, #0
21a74     00 14 06 F6 | 	mov	arg02, #0
21a78     00 16 06 F6 | 	mov	arg03, #0
21a7c     20 2F B0 FD | 	call	#__system__pack_0550
21a80     98 00 90 FD | 	jmp	#LR__3065
21a84                 | LR__3057
21a84     00 28 0E F2 | 	cmp	local06, #0 wz
21a88     20 00 90 AD |  if_e	jmp	#LR__3060
21a8c     01 28 66 F0 | 	shl	local06, #1
21a90     97 0A 48 FB | 	callpa	#(@LR__3059-@LR__3058)>>2,fcache_load_ptr_
21a94                 | LR__3058
21a94     00 40 00 FF 
21a98     00 28 16 F2 | 	cmp	local06, ##8388608 wc
21a9c     01 2A 86 C1 |  if_b	sub	local07, #1
21aa0     01 28 66 C0 |  if_b	shl	local06, #1
21aa4     EC FF 9F CD |  if_b	jmp	#LR__3058
21aa8                 | LR__3059
21aa8     B8 FE 9F FD | 	jmp	#LR__3050
21aac                 | LR__3060
21aac     00 30 0E F2 | 	cmp	local10, #0 wz
21ab0     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
21ab4     00 F8 3F AF 
21ab8     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
21abc     5C 00 90 AD |  if_e	jmp	#LR__3065
21ac0     13 19 02 F6 | 	mov	arg04, local05
21ac4     08 18 46 F5 | 	or	arg04, #8
21ac8     00 12 06 F6 | 	mov	arg01, #0
21acc     00 14 06 F6 | 	mov	arg02, #0
21ad0     00 16 06 F6 | 	mov	arg03, #0
21ad4     C8 2E B0 FD | 	call	#__system__pack_0550
21ad8     40 00 90 FD | 	jmp	#LR__3065
21adc                 | LR__3061
21adc     00 2E 0E F2 | 	cmp	local09, #0 wz
21ae0     20 00 90 AD |  if_e	jmp	#LR__3064
21ae4     01 2E 66 F0 | 	shl	local09, #1
21ae8     97 0A 48 FB | 	callpa	#(@LR__3063-@LR__3062)>>2,fcache_load_ptr_
21aec                 | LR__3062
21aec     00 40 00 FF 
21af0     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
21af4     01 30 86 C1 |  if_b	sub	local10, #1
21af8     01 2E 66 C0 |  if_b	shl	local09, #1
21afc     EC FF 9F CD |  if_b	jmp	#LR__3062
21b00                 | LR__3063
21b00     6C FE 9F FD | 	jmp	#LR__3051
21b04                 | LR__3064
21b04     02 26 46 F5 | 	or	local05, #2
21b08     00 12 06 F6 | 	mov	arg01, #0
21b0c     00 14 06 F6 | 	mov	arg02, #0
21b10     00 16 06 F6 | 	mov	arg03, #0
21b14     13 19 02 F6 | 	mov	arg04, local05
21b18     84 2E B0 FD | 	call	#__system__pack_0550
21b1c                 | LR__3065
21b1c     A7 F0 03 F6 | 	mov	ptra, fp
21b20     B2 00 A0 FD | 	call	#popregs_
21b24                 | __system___float_div_ret
21b24     2D 00 64 FD | 	ret
21b28                 | 
21b28                 | __system___float_cmp
21b28     00 C0 3F FF 
21b2c     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
21b30     00 C0 3F CF 
21b34     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
21b38     0B FB 01 36 |  if_ae	mov	result1, arg03
21b3c     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
21b40     00 C0 7F FF 
21b44     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
21b48     00 C0 7F CF 
21b4c     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
21b50     0B FB 01 36 |  if_ae	mov	result1, arg03
21b54     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
21b58     00 12 56 F2 | 	cmps	arg01, #0 wc
21b5c     2C 00 90 3D |  if_ae	jmp	#LR__3070
21b60     00 14 56 F2 | 	cmps	arg02, #0 wc
21b64     0A FB 01 C6 |  if_b	mov	result1, arg02
21b68     09 FB 81 C1 |  if_b	sub	result1, arg01
21b6c     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
21b70     00 14 0E F2 | 	cmp	arg02, #0 wz
21b74     00 00 40 AF 
21b78     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
21b7c     00 FA 05 A6 |  if_e	mov	result1, #0
21b80     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
21b84     01 FA 65 F6 | 	neg	result1, #1
21b88     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
21b8c                 | LR__3070
21b8c     00 14 56 F2 | 	cmps	arg02, #0 wc
21b90     1C 00 90 3D |  if_ae	jmp	#LR__3071
21b94     00 12 0E F2 | 	cmp	arg01, #0 wz
21b98     00 00 40 AF 
21b9c     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
21ba0     00 FA 05 A6 |  if_e	mov	result1, #0
21ba4     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
21ba8     01 FA 05 F6 | 	mov	result1, #1
21bac     08 00 90 FD | 	jmp	#__system___float_cmp_ret
21bb0                 | LR__3071
21bb0     0A 13 82 F1 | 	sub	arg01, arg02
21bb4     09 FB 01 F6 | 	mov	result1, arg01
21bb8                 | __system___float_cmp_ret
21bb8     2D 00 64 FD | 	ret
21bbc                 | 
21bbc                 | __system___float_tointeger
21bbc     02 4A 05 F6 | 	mov	COUNT_, #2
21bc0     A8 00 A0 FD | 	call	#pushregs_
21bc4     50 00 B0 FD | 	call	#__system___float_Unpack
21bc8     FF FF 7F FF 
21bcc     FF FD 55 F2 | 	cmps	result2, ##-1 wc
21bd0     34 00 90 CD |  if_b	jmp	#LR__3080
21bd4     1F FC 55 F2 | 	cmps	result2, #31 wc
21bd8     2C 00 90 3D |  if_ae	jmp	#LR__3080
21bdc     02 FE 65 F0 | 	shl	result3, #2
21be0     1E 1E 06 F6 | 	mov	local01, #30
21be4     FE 1E 82 F1 | 	sub	local01, result2
21be8     0F FF 41 F0 | 	shr	result3, local01
21bec     FF 20 02 F6 | 	mov	local02, result3
21bf0     0A 21 02 F1 | 	add	local02, arg02
21bf4     01 20 46 F0 | 	shr	local02, #1
21bf8     00 FA 0D F2 | 	cmp	result1, #0 wz
21bfc     10 21 62 56 |  if_ne	neg	local02, local02
21c00     10 FB 01 F6 | 	mov	result1, local02
21c04     04 00 90 FD | 	jmp	#LR__3081
21c08                 | LR__3080
21c08     00 FA 05 F6 | 	mov	result1, #0
21c0c                 | LR__3081
21c0c     A7 F0 03 F6 | 	mov	ptra, fp
21c10     B2 00 A0 FD | 	call	#popregs_
21c14                 | __system___float_tointeger_ret
21c14     2D 00 64 FD | 	ret
21c18                 | 
21c18                 | __system___float_Unpack
21c18     09 01 02 F6 | 	mov	_var01, arg01
21c1c     1F 00 46 F0 | 	shr	_var01, #31
21c20     09 03 02 F6 | 	mov	_var02, arg01
21c24     01 02 66 F0 | 	shl	_var02, #1
21c28     18 02 4E F0 | 	shr	_var02, #24 wz
21c2c     17 13 06 F4 | 	bitl	arg01, #279
21c30     06 12 66 50 |  if_ne	shl	arg01, #6
21c34     1D 12 26 54 |  if_ne	bith	arg01, #29
21c38     1C 00 90 5D |  if_ne	jmp	#LR__3090
21c3c     09 05 92 F7 | 	encod	_var03, arg01 wc
21c40     01 04 06 C1 |  if_b	add	_var03, #1
21c44     17 04 86 F1 | 	sub	_var03, #23
21c48     02 03 02 F6 | 	mov	_var02, _var03
21c4c     07 FC 05 F6 | 	mov	result2, #7
21c50     02 FD 81 F1 | 	sub	result2, _var03
21c54     FE 12 62 F0 | 	shl	arg01, result2
21c58                 | LR__3090
21c58     7F 02 86 F1 | 	sub	_var02, #127
21c5c     09 FF 01 F6 | 	mov	result3, arg01
21c60     00 FB 01 F6 | 	mov	result1, _var01
21c64     01 FD 01 F6 | 	mov	result2, _var02
21c68                 | __system___float_Unpack_ret
21c68     2D 00 64 FD | 	ret
21c6c                 | 
21c6c                 | __system___float_Pack
21c6c     00 00 06 F6 | 	mov	_var01, #0
21c70     00 16 0E F2 | 	cmp	arg03, #0 wz
21c74     8C 00 90 AD |  if_e	jmp	#LR__3101
21c78     0B 03 92 F7 | 	encod	_var02, arg03 wc
21c7c     01 02 06 C1 |  if_b	add	_var02, #1
21c80     21 00 06 F6 | 	mov	_var01, #33
21c84     01 01 82 F1 | 	sub	_var01, _var02
21c88     00 17 62 F0 | 	shl	arg03, _var01
21c8c     03 02 06 F6 | 	mov	_var02, #3
21c90     00 03 82 F1 | 	sub	_var02, _var01
21c94     01 15 02 F1 | 	add	arg02, _var02
21c98     0A 05 02 F6 | 	mov	_var03, arg02
21c9c     00 17 06 F1 | 	add	arg03, #256
21ca0     0B 03 02 F6 | 	mov	_var02, arg03
21ca4     FF 02 2E F5 | 	andn	_var02, #255 wz
21ca8     01 04 06 A1 |  if_e	add	_var03, #1
21cac     7F 04 06 F1 | 	add	_var03, #127
21cb0     FF FF 7F FF 
21cb4     E9 05 46 F3 | 	fges	_var03, ##-23
21cb8     FF 04 66 F3 | 	fles	_var03, #255
21cbc     01 04 56 F2 | 	cmps	_var03, #1 wc
21cc0     1C 00 90 3D |  if_ae	jmp	#LR__3100
21cc4     01 16 46 F0 | 	shr	arg03, #1
21cc8     1F 02 C6 F9 | 	decod	_var02, #31
21ccc     0B 03 02 F1 | 	add	_var02, arg03
21cd0     02 05 62 F6 | 	neg	_var03, _var03
21cd4     02 03 42 F0 | 	shr	_var02, _var03
21cd8     01 17 02 F6 | 	mov	arg03, _var02
21cdc     00 04 06 F6 | 	mov	_var03, #0
21ce0                 | LR__3100
21ce0     09 FB 01 F6 | 	mov	result1, arg01
21ce4     1F FA 65 F0 | 	shl	result1, #31
21ce8     02 03 02 F6 | 	mov	_var02, _var03
21cec     17 02 66 F0 | 	shl	_var02, #23
21cf0     01 FB 41 F5 | 	or	result1, _var02
21cf4     0B 07 02 F6 | 	mov	_var04, arg03
21cf8     09 06 46 F0 | 	shr	_var04, #9
21cfc     03 FB 41 F5 | 	or	result1, _var04
21d00     04 00 90 FD | 	jmp	#__system___float_Pack_ret
21d04                 | LR__3101
21d04     00 FB 01 F6 | 	mov	result1, _var01
21d08                 | __system___float_Pack_ret
21d08     2D 00 64 FD | 	ret
21d0c                 | 
21d0c                 | __system___basic_print_float
21d0c     05 4A 05 F6 | 	mov	COUNT_, #5
21d10     A8 00 A0 FD | 	call	#pushregs_
21d14     09 1F 02 F6 | 	mov	local01, arg01
21d18     0A 21 02 F6 | 	mov	local02, arg02
21d1c     0B 23 0A F6 | 	mov	local03, arg03 wz
21d20     0C 25 02 F6 | 	mov	local04, arg04
21d24     14 00 90 5D |  if_ne	jmp	#LR__3110
21d28     23 24 0E F2 | 	cmp	local04, #35 wz
21d2c     80 02 10 AF 
21d30     00 26 06 A6 |  if_e	mov	local05, ##537198592
21d34     1D 26 C6 59 |  if_ne	decod	local05, #29
21d38     13 23 02 F6 | 	mov	local03, local05
21d3c                 | LR__3110
21d3c     0F 13 02 F6 | 	mov	arg01, local01
21d40     40 27 B0 FD | 	call	#__system___gettxfunc
21d44     FD 26 0A F6 | 	mov	local05, result1 wz
21d48     00 FA 05 A6 |  if_e	mov	result1, #0
21d4c     13 13 02 56 |  if_ne	mov	arg01, local05
21d50     11 15 02 56 |  if_ne	mov	arg02, local03
21d54     10 17 02 56 |  if_ne	mov	arg03, local02
21d58     12 19 02 56 |  if_ne	mov	arg04, local04
21d5c     30 DF BF 5D |  if_ne	call	#__system___fmtfloat
21d60     A7 F0 03 F6 | 	mov	ptra, fp
21d64     B2 00 A0 FD | 	call	#popregs_
21d68                 | __system___basic_print_float_ret
21d68     2D 00 64 FD | 	ret
21d6c                 | 
21d6c                 | __system____builtin_atoi
21d6c     07 4A 05 F6 | 	mov	COUNT_, #7
21d70     A8 00 A0 FD | 	call	#pushregs_
21d74                 | __system____builtin_atoi_enter
21d74     09 1F 02 F6 | 	mov	local01, arg01
21d78     0A 21 02 F6 | 	mov	local02, arg02
21d7c     00 22 06 F6 | 	mov	local03, #0
21d80     00 24 06 F6 | 	mov	local04, #0
21d84     00 26 06 F6 | 	mov	local05, #0
21d88     97 08 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
21d8c                 | LR__3120
21d8c     0F 29 C2 FA | 	rdbyte	local06, local01
21d90     20 28 0E F2 | 	cmp	local06, #32 wz
21d94     01 1E 06 A1 |  if_e	add	local01, #1
21d98     F0 FF 9F AD |  if_e	jmp	#LR__3120
21d9c                 | LR__3121
21d9c     0F 2B C2 FA | 	rdbyte	local07, local01
21da0                 | LR__3122
21da0     2D 2A 0E F2 | 	cmp	local07, #45 wz
21da4     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
21da8     18 00 90 5D |  if_ne	jmp	#LR__3123
21dac     01 1E 06 F1 | 	add	local01, #1
21db0     2D 2A 0E F2 | 	cmp	local07, #45 wz
21db4     01 28 06 A6 |  if_e	mov	local06, #1
21db8     14 27 C2 A2 |  if_e	subr	local05, local06
21dbc     0F 2B C2 FA | 	rdbyte	local07, local01
21dc0     DC FF 9F FD | 	jmp	#LR__3122
21dc4                 | LR__3123
21dc4     97 48 48 FB | 	callpa	#(@LR__3131-@LR__3124)>>2,fcache_load_ptr_
21dc8                 | LR__3124
21dc8                 | LR__3125
21dc8     0F 2B C2 FA | 	rdbyte	local07, local01
21dcc     5F 2A 0E F2 | 	cmp	local07, #95 wz
21dd0     01 1E 06 F1 | 	add	local01, #1
21dd4     F0 FF 9F AD |  if_e	jmp	#LR__3125
21dd8     30 2A 0E F2 | 	cmp	local07, #48 wz
21ddc     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
21de0     00 24 06 A6 |  if_e	mov	local04, #0
21de4     60 00 90 AD |  if_e	jmp	#LR__3130
21de8     31 2A 56 F2 | 	cmps	local07, #49 wc
21dec     18 00 90 CD |  if_b	jmp	#LR__3126
21df0     3A 2A 56 F2 | 	cmps	local07, #58 wc
21df4     15 25 02 C6 |  if_b	mov	local04, local07
21df8     30 24 86 C1 |  if_b	sub	local04, #48
21dfc     00 20 0E C2 |  if_b	cmp	local02, #0 wz
21e00     0A 20 06 86 |  if_c_and_z	mov	local02, #10
21e04     40 00 90 CD |  if_b	jmp	#LR__3129
21e08                 | LR__3126
21e08     0B 20 56 F2 | 	cmps	local02, #11 wc
21e0c     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
21e10     14 00 90 CD |  if_b	jmp	#LR__3127
21e14     67 2A 56 F2 | 	cmps	local07, #103 wc
21e18     61 2A 86 C1 |  if_b	sub	local07, #97
21e1c     0A 24 06 C6 |  if_b	mov	local04, #10
21e20     15 25 02 C1 |  if_b	add	local04, local07
21e24     20 00 90 CD |  if_b	jmp	#LR__3128
21e28                 | LR__3127
21e28     0B 20 56 F2 | 	cmps	local02, #11 wc
21e2c     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
21e30     24 00 90 CD |  if_b	jmp	#LR__3132
21e34     47 2A 56 F2 | 	cmps	local07, #71 wc
21e38     41 2A 86 C1 |  if_b	sub	local07, #65
21e3c     0A 24 06 C6 |  if_b	mov	local04, #10
21e40     15 25 02 C1 |  if_b	add	local04, local07
21e44     10 00 90 3D |  if_ae	jmp	#LR__3132
21e48                 | LR__3128
21e48                 | LR__3129
21e48                 | LR__3130
21e48     11 21 02 FD | 	qmul	local02, local03
21e4c     18 22 62 FD | 	getqx	local03
21e50     12 23 02 F1 | 	add	local03, local04
21e54     70 FF 9F FD | 	jmp	#LR__3124
21e58                 | LR__3131
21e58                 | LR__3132
21e58     00 20 0E F2 | 	cmp	local02, #0 wz
21e5c     64 00 90 5D |  if_ne	jmp	#LR__3138
21e60     78 2A 0E F2 | 	cmp	local07, #120 wz
21e64     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
21e68     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
21e6c     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
21e70     14 00 90 5D |  if_ne	jmp	#LR__3133
21e74     0F 13 02 F6 | 	mov	arg01, local01
21e78     10 14 06 F6 | 	mov	arg02, #16
21e7c     EC FE BF FD | 	call	#__system____builtin_atoi
21e80     FD 22 02 F6 | 	mov	local03, result1
21e84     3C 00 90 FD | 	jmp	#LR__3137
21e88                 | LR__3133
21e88     62 2A 0E F2 | 	cmp	local07, #98 wz
21e8c     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
21e90     14 00 90 5D |  if_ne	jmp	#LR__3134
21e94     0F 13 02 F6 | 	mov	arg01, local01
21e98     02 14 06 F6 | 	mov	arg02, #2
21e9c     CC FE BF FD | 	call	#__system____builtin_atoi
21ea0     FD 22 02 F6 | 	mov	local03, result1
21ea4     1C 00 90 FD | 	jmp	#LR__3136
21ea8                 | LR__3134
21ea8     6F 2A 0E F2 | 	cmp	local07, #111 wz
21eac     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
21eb0     10 00 90 5D |  if_ne	jmp	#LR__3135
21eb4     0F 13 02 F6 | 	mov	arg01, local01
21eb8     08 14 06 F6 | 	mov	arg02, #8
21ebc     AC FE BF FD | 	call	#__system____builtin_atoi
21ec0     FD 22 02 F6 | 	mov	local03, result1
21ec4                 | LR__3135
21ec4                 | LR__3136
21ec4                 | LR__3137
21ec4                 | LR__3138
21ec4     00 26 0E F2 | 	cmp	local05, #0 wz
21ec8     11 23 62 56 |  if_ne	neg	local03, local03
21ecc     11 FB 01 F6 | 	mov	result1, local03
21ed0     A7 F0 03 F6 | 	mov	ptra, fp
21ed4     B2 00 A0 FD | 	call	#popregs_
21ed8                 | __system____builtin_atoi_ret
21ed8     2D 00 64 FD | 	ret
21edc                 | 
21edc                 | __system____builtin_atof
21edc     07 4A 05 F6 | 	mov	COUNT_, #7
21ee0     A8 00 A0 FD | 	call	#pushregs_
21ee4     09 1F 02 F6 | 	mov	local01, arg01
21ee8     00 20 06 F6 | 	mov	local02, #0
21eec     00 22 06 F6 | 	mov	local03, #0
21ef0     00 24 06 F6 | 	mov	local04, #0
21ef4     00 26 06 F6 | 	mov	local05, #0
21ef8     97 08 48 FB | 	callpa	#(@LR__3141-@LR__3140)>>2,fcache_load_ptr_
21efc                 | LR__3140
21efc     0F 17 C2 FA | 	rdbyte	arg03, local01
21f00     20 16 0E F2 | 	cmp	arg03, #32 wz
21f04     01 1E 06 A1 |  if_e	add	local01, #1
21f08     F0 FF 9F AD |  if_e	jmp	#LR__3140
21f0c                 | LR__3141
21f0c     0F 29 C2 FA | 	rdbyte	local06, local01
21f10                 | LR__3142
21f10     2B 28 0E F2 | 	cmp	local06, #43 wz
21f14     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
21f18     14 00 90 5D |  if_ne	jmp	#LR__3143
21f1c     2D 28 0E F2 | 	cmp	local06, #45 wz
21f20     1F 24 E6 A4 |  if_e	bitnot	local04, #31
21f24     01 1E 06 F1 | 	add	local01, #1
21f28     0F 29 C2 FA | 	rdbyte	local06, local01
21f2c     E0 FF 9F FD | 	jmp	#LR__3142
21f30                 | LR__3143
21f30                 | LR__3144
21f30     97 08 48 FB | 	callpa	#(@LR__3146-@LR__3145)>>2,fcache_load_ptr_
21f34                 | LR__3145
21f34     0F 29 C2 FA | 	rdbyte	local06, local01
21f38     5F 28 0E F2 | 	cmp	local06, #95 wz
21f3c     01 1E 06 F1 | 	add	local01, #1
21f40     F0 FF 9F AD |  if_e	jmp	#LR__3145
21f44                 | LR__3146
21f44     00 28 0E F2 | 	cmp	local06, #0 wz
21f48     5C 00 90 AD |  if_e	jmp	#LR__3148
21f4c     30 28 56 F2 | 	cmps	local06, #48 wc
21f50     44 00 90 CD |  if_b	jmp	#LR__3147
21f54     3A 28 56 F2 | 	cmps	local06, #58 wc
21f58     3C 00 90 3D |  if_ae	jmp	#LR__3147
21f5c     10 13 02 F6 | 	mov	arg01, local02
21f60     00 90 20 FF 
21f64     00 14 06 F6 | 	mov	arg02, ##1092616192
21f68     88 F7 BF FD | 	call	#__system___float_mul
21f6c     FD 20 02 F6 | 	mov	local02, result1
21f70     30 28 86 F1 | 	sub	local06, #48
21f74     14 13 02 F6 | 	mov	arg01, local06
21f78     74 F3 BF FD | 	call	#__system___float_fromuns
21f7c     FD 14 02 F6 | 	mov	arg02, result1
21f80     10 13 02 F6 | 	mov	arg01, local02
21f84     9C F3 BF FD | 	call	#__system___float_add
21f88     FD 20 02 F6 | 	mov	local02, result1
21f8c     00 26 0E F2 | 	cmp	local05, #0 wz
21f90     01 22 86 51 |  if_ne	sub	local03, #1
21f94     98 FF 9F FD | 	jmp	#LR__3144
21f98                 | LR__3147
21f98     2E 28 0E F2 | 	cmp	local06, #46 wz
21f9c     00 26 0E A2 |  if_e	cmp	local05, #0 wz
21fa0     01 26 06 A6 |  if_e	mov	local05, #1
21fa4     88 FF 9F AD |  if_e	jmp	#LR__3144
21fa8                 | LR__3148
21fa8     45 28 0E F2 | 	cmp	local06, #69 wz
21fac     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
21fb0     18 00 90 5D |  if_ne	jmp	#LR__3149
21fb4     0F 13 02 F6 | 	mov	arg01, local01
21fb8     00 14 06 F6 | 	mov	arg02, #0
21fbc     AC FD BF FD | 	call	#__system____builtin_atoi
21fc0     11 FB 01 F1 | 	add	result1, local03
21fc4     FD 2A 02 F6 | 	mov	local07, result1
21fc8     04 00 90 FD | 	jmp	#LR__3150
21fcc                 | LR__3149
21fcc     11 2B 02 F6 | 	mov	local07, local03
21fd0                 | LR__3150
21fd0     15 17 02 F6 | 	mov	arg03, local07
21fd4     10 13 02 F6 | 	mov	arg01, local02
21fd8     00 90 20 FF 
21fdc     00 14 06 F6 | 	mov	arg02, ##1092616192
21fe0     BC 06 B0 FD | 	call	#__system___float_pow_n
21fe4     12 FB 61 F5 | 	xor	result1, local04
21fe8     A7 F0 03 F6 | 	mov	ptra, fp
21fec     B2 00 A0 FD | 	call	#popregs_
21ff0                 | __system____builtin_atof_ret
21ff0     2D 00 64 FD | 	ret
21ff4                 | 
21ff4                 | __system____builtin_ilogb
21ff4     20 FC BF FD | 	call	#__system___float_Unpack
21ff8     00 FE 0D F2 | 	cmp	result3, #0 wz
21ffc     00 00 40 AF 
22000     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
22004     24 00 90 AD |  if_e	jmp	#LR__3161
22008     80 FC 0D F2 | 	cmp	result2, #128 wz
2200c     18 00 90 5D |  if_ne	jmp	#LR__3160
22010     00 00 10 FF 
22014     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
22018     1E FA CD A9 |  if_e	bmask	result1, #30
2201c     0C 00 90 AD |  if_e	jmp	#LR__3161
22020     1F FA C5 F9 | 	decod	result1, #31
22024     04 00 90 FD | 	jmp	#LR__3161
22028                 | LR__3160
22028     FE FA 01 F6 | 	mov	result1, result2
2202c                 | LR__3161
2202c                 | __system____builtin_ilogb_ret
2202c     2D 00 64 FD | 	ret
22030                 | 
22030                 | __system____builtin_sinf
22030     03 4A 05 F6 | 	mov	COUNT_, #3
22034     A8 00 A0 FD | 	call	#pushregs_
22038     09 1F 02 F6 | 	mov	local01, arg01
2203c     87 64 20 FF 
22040     DB 15 06 F6 | 	mov	arg02, ##1086918619
22044     B0 F8 BF FD | 	call	#__system___float_div
22048     FD 12 02 F6 | 	mov	arg01, result1
2204c     00 14 06 F6 | 	mov	arg02, #0
22050     68 FB BF FD | 	call	#__system___float_tointeger
22054     FD 16 0A F6 | 	mov	arg03, result1 wz
22058     44 00 90 AD |  if_e	jmp	#LR__3170
2205c     0B 13 52 F6 | 	abs	arg01, arg03 wc
22060     1F 20 C6 C9 |  if_b	decod	local02, #31
22064     00 20 06 36 |  if_ae	mov	local02, #0
22068     84 F2 BF FD | 	call	#__system___float_fromuns
2206c     10 FB 61 F5 | 	xor	result1, local02
22070     FD 12 02 F6 | 	mov	arg01, result1
22074     1E 14 C6 F9 | 	decod	arg02, #30
22078     78 F6 BF FD | 	call	#__system___float_mul
2207c     FD 12 02 F6 | 	mov	arg01, result1
22080     87 24 20 FF 
22084     DB 15 06 F6 | 	mov	arg02, ##1078530011
22088     68 F6 BF FD | 	call	#__system___float_mul
2208c     FD 14 02 F6 | 	mov	arg02, result1
22090     0F 13 02 F6 | 	mov	arg01, local01
22094     1F 14 E6 F4 | 	bitnot	arg02, #31
22098     88 F2 BF FD | 	call	#__system___float_add
2209c     FD 1E 02 F6 | 	mov	local01, result1
220a0                 | LR__3170
220a0     0F 13 02 F6 | 	mov	arg01, local01
220a4     66 E6 1E FF 
220a8     CD 14 06 F6 | 	mov	arg02, ##1036831949
220ac     01 16 06 F6 | 	mov	arg03, #1
220b0     74 FA BF FD | 	call	#__system___float_cmp
220b4     00 FA 55 F2 | 	cmps	result1, #0 wc
220b8     5C 00 90 3D |  if_ae	jmp	#LR__3171
220bc     0F 13 02 F6 | 	mov	arg01, local01
220c0     66 E6 5E FF 
220c4     CD 14 06 F6 | 	mov	arg02, ##-1110651699
220c8     01 16 66 F6 | 	neg	arg03, #1
220cc     58 FA BF FD | 	call	#__system___float_cmp
220d0     01 FA 55 F2 | 	cmps	result1, #1 wc
220d4     40 00 90 CD |  if_b	jmp	#LR__3171
220d8     0F 13 02 F6 | 	mov	arg01, local01
220dc     0F 15 02 F6 | 	mov	arg02, local01
220e0     10 F6 BF FD | 	call	#__system___float_mul
220e4     FD 12 02 F6 | 	mov	arg01, result1
220e8     0F 15 02 F6 | 	mov	arg02, local01
220ec     04 F6 BF FD | 	call	#__system___float_mul
220f0     FD 12 02 F6 | 	mov	arg01, result1
220f4     00 60 20 FF 
220f8     00 14 06 F6 | 	mov	arg02, ##1086324736
220fc     F8 F7 BF FD | 	call	#__system___float_div
22100     FD 14 02 F6 | 	mov	arg02, result1
22104     0F 13 02 F6 | 	mov	arg01, local01
22108     1F 14 E6 F4 | 	bitnot	arg02, #31
2210c     14 F2 BF FD | 	call	#__system___float_add
22110     FD 22 02 F6 | 	mov	local03, result1
22114     54 00 90 FD | 	jmp	#LR__3172
22118                 | LR__3171
22118     0F 13 02 F6 | 	mov	arg01, local01
2211c     7C 91 26 FF 
22120     83 15 06 F6 | 	mov	arg02, ##1294137731
22124     CC F5 BF FD | 	call	#__system___float_mul
22128     FD 12 02 F6 | 	mov	arg01, result1
2212c     00 14 06 F6 | 	mov	arg02, #0
22130     88 FA BF FD | 	call	#__system___float_tointeger
22134     02 FA 65 F0 | 	shl	result1, #2
22138     00 00 A0 FF 
2213c     FD 00 48 FD | 	qrotate	##1073741824, result1
22140     19 12 62 FD | 	getqy	arg01
22144     09 13 52 F6 | 	abs	arg01, arg01 wc
22148     1F 20 C6 C9 |  if_b	decod	local02, #31
2214c     00 20 06 36 |  if_ae	mov	local02, #0
22150     9C F1 BF FD | 	call	#__system___float_fromuns
22154     10 FB 61 F5 | 	xor	result1, local02
22158     FD 12 02 F6 | 	mov	arg01, result1
2215c     00 40 27 FF 
22160     00 14 06 F6 | 	mov	arg02, ##1317011456
22164     90 F7 BF FD | 	call	#__system___float_div
22168     FD 22 02 F6 | 	mov	local03, result1
2216c                 | LR__3172
2216c     11 FB 01 F6 | 	mov	result1, local03
22170     A7 F0 03 F6 | 	mov	ptra, fp
22174     B2 00 A0 FD | 	call	#popregs_
22178                 | __system____builtin_sinf_ret
22178     2D 00 64 FD | 	ret
2217c                 | 
2217c                 | __system____builtin_tanf
2217c     02 4A 05 F6 | 	mov	COUNT_, #2
22180     A8 00 A0 FD | 	call	#pushregs_
22184     09 1F 02 F6 | 	mov	local01, arg01
22188     A4 FE BF FD | 	call	#__system____builtin_sinf
2218c     FD 20 02 F6 | 	mov	local02, result1
22190     0F 15 02 F6 | 	mov	arg02, local01
22194     87 E4 1F FF 
22198     DB 13 06 F6 | 	mov	arg01, ##1070141403
2219c     1F 14 E6 F4 | 	bitnot	arg02, #31
221a0     80 F1 BF FD | 	call	#__system___float_add
221a4     FD 12 02 F6 | 	mov	arg01, result1
221a8     84 FE BF FD | 	call	#__system____builtin_sinf
221ac     FD 14 02 F6 | 	mov	arg02, result1
221b0     10 13 02 F6 | 	mov	arg01, local02
221b4     40 F7 BF FD | 	call	#__system___float_div
221b8     A7 F0 03 F6 | 	mov	ptra, fp
221bc     B2 00 A0 FD | 	call	#popregs_
221c0                 | __system____builtin_tanf_ret
221c0     2D 00 64 FD | 	ret
221c4                 | 
221c4                 | __system____builtin_asinf
221c4     01 4A 05 F6 | 	mov	COUNT_, #1
221c8     A8 00 A0 FD | 	call	#pushregs_
221cc     09 1F 02 F6 | 	mov	local01, arg01
221d0     0F 15 02 F6 | 	mov	arg02, local01
221d4     0F 13 02 F6 | 	mov	arg01, local01
221d8     18 F5 BF FD | 	call	#__system___float_mul
221dc     FD 14 02 F6 | 	mov	arg02, result1
221e0     00 C0 1F FF 
221e4     00 12 06 F6 | 	mov	arg01, ##1065353216
221e8     1F 14 E6 F4 | 	bitnot	arg02, #31
221ec     34 F1 BF FD | 	call	#__system___float_add
221f0     FD 12 02 F6 | 	mov	arg01, result1
221f4     24 F4 BF FD | 	call	#__system___float_sqrt
221f8     FD 14 02 F6 | 	mov	arg02, result1
221fc     0F 13 02 F6 | 	mov	arg01, local01
22200     58 00 B0 FD | 	call	#__system____builtin_atan2f
22204     A7 F0 03 F6 | 	mov	ptra, fp
22208     B2 00 A0 FD | 	call	#popregs_
2220c                 | __system____builtin_asinf_ret
2220c     2D 00 64 FD | 	ret
22210                 | 
22210                 | __system____builtin_acosf
22210     01 4A 05 F6 | 	mov	COUNT_, #1
22214     A8 00 A0 FD | 	call	#pushregs_
22218     09 1F 02 F6 | 	mov	local01, arg01
2221c     0F 15 02 F6 | 	mov	arg02, local01
22220     0F 13 02 F6 | 	mov	arg01, local01
22224     CC F4 BF FD | 	call	#__system___float_mul
22228     FD 14 02 F6 | 	mov	arg02, result1
2222c     00 C0 1F FF 
22230     00 12 06 F6 | 	mov	arg01, ##1065353216
22234     1F 14 E6 F4 | 	bitnot	arg02, #31
22238     E8 F0 BF FD | 	call	#__system___float_add
2223c     FD 12 02 F6 | 	mov	arg01, result1
22240     D8 F3 BF FD | 	call	#__system___float_sqrt
22244     FD 12 02 F6 | 	mov	arg01, result1
22248     0F 15 02 F6 | 	mov	arg02, local01
2224c     0C 00 B0 FD | 	call	#__system____builtin_atan2f
22250     A7 F0 03 F6 | 	mov	ptra, fp
22254     B2 00 A0 FD | 	call	#popregs_
22258                 | __system____builtin_acosf_ret
22258     2D 00 64 FD | 	ret
2225c                 | 
2225c                 | __system____builtin_atan2f
2225c     04 4A 05 F6 | 	mov	COUNT_, #4
22260     A8 00 A0 FD | 	call	#pushregs_
22264     09 1F 02 F6 | 	mov	local01, arg01
22268     0A 21 02 F6 | 	mov	local02, arg02
2226c     0F 13 02 F6 | 	mov	arg01, local01
22270     00 14 06 F6 | 	mov	arg02, #0
22274     01 16 06 F6 | 	mov	arg03, #1
22278     AC F8 BF FD | 	call	#__system___float_cmp
2227c     00 FA 0D F2 | 	cmp	result1, #0 wz
22280     28 00 90 5D |  if_ne	jmp	#LR__3180
22284     10 13 02 F6 | 	mov	arg01, local02
22288     00 14 06 F6 | 	mov	arg02, #0
2228c     01 16 06 F6 | 	mov	arg03, #1
22290     94 F8 BF FD | 	call	#__system___float_cmp
22294     00 FA 55 F2 | 	cmps	result1, #0 wc
22298     87 24 60 CF 
2229c     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
222a0     DC 00 90 CD |  if_b	jmp	#LR__3181
222a4     00 FA 05 F6 | 	mov	result1, #0
222a8     D4 00 90 FD | 	jmp	#LR__3181
222ac                 | LR__3180
222ac     10 13 02 F6 | 	mov	arg01, local02
222b0     10 15 02 F6 | 	mov	arg02, local02
222b4     3C F4 BF FD | 	call	#__system___float_mul
222b8     FD 22 02 F6 | 	mov	local03, result1
222bc     0F 13 02 F6 | 	mov	arg01, local01
222c0     0F 15 02 F6 | 	mov	arg02, local01
222c4     2C F4 BF FD | 	call	#__system___float_mul
222c8     FD 14 02 F6 | 	mov	arg02, result1
222cc     11 13 02 F6 | 	mov	arg01, local03
222d0     50 F0 BF FD | 	call	#__system___float_add
222d4     FD 12 02 F6 | 	mov	arg01, result1
222d8     40 F3 BF FD | 	call	#__system___float_sqrt
222dc     FD 22 02 F6 | 	mov	local03, result1
222e0     10 13 02 F6 | 	mov	arg01, local02
222e4     11 15 02 F6 | 	mov	arg02, local03
222e8     0C F6 BF FD | 	call	#__system___float_div
222ec     FD 20 02 F6 | 	mov	local02, result1
222f0     0F 13 02 F6 | 	mov	arg01, local01
222f4     11 15 02 F6 | 	mov	arg02, local03
222f8     FC F5 BF FD | 	call	#__system___float_div
222fc     FD 1E 02 F6 | 	mov	local01, result1
22300     00 40 27 FF 
22304     00 12 06 F6 | 	mov	arg01, ##1317011456
22308     10 15 02 F6 | 	mov	arg02, local02
2230c     E4 F3 BF FD | 	call	#__system___float_mul
22310     FD 12 02 F6 | 	mov	arg01, result1
22314     00 14 06 F6 | 	mov	arg02, #0
22318     A0 F8 BF FD | 	call	#__system___float_tointeger
2231c     FD 22 02 F6 | 	mov	local03, result1
22320     00 40 27 FF 
22324     00 12 06 F6 | 	mov	arg01, ##1317011456
22328     0F 15 02 F6 | 	mov	arg02, local01
2232c     C4 F3 BF FD | 	call	#__system___float_mul
22330     FD 12 02 F6 | 	mov	arg01, result1
22334     00 14 06 F6 | 	mov	arg02, #0
22338     80 F8 BF FD | 	call	#__system___float_tointeger
2233c     FD 22 52 FD | 	qvector	local03, result1
22340     87 24 20 FF 
22344     DB 23 06 F6 | 	mov	local03, ##1078530011
22348     19 12 62 FD | 	getqy	arg01
2234c     01 12 C6 F0 | 	sar	arg01, #1
22350     09 13 52 F6 | 	abs	arg01, arg01 wc
22354     1F 24 C6 C9 |  if_b	decod	local04, #31
22358     00 24 06 36 |  if_ae	mov	local04, #0
2235c     90 EF BF FD | 	call	#__system___float_fromuns
22360     12 FB 61 F5 | 	xor	result1, local04
22364     FD 12 02 F6 | 	mov	arg01, result1
22368     00 40 27 FF 
2236c     00 14 06 F6 | 	mov	arg02, ##1317011456
22370     84 F5 BF FD | 	call	#__system___float_div
22374     FD 14 02 F6 | 	mov	arg02, result1
22378     11 13 02 F6 | 	mov	arg01, local03
2237c     74 F3 BF FD | 	call	#__system___float_mul
22380                 | LR__3181
22380     A7 F0 03 F6 | 	mov	ptra, fp
22384     B2 00 A0 FD | 	call	#popregs_
22388                 | __system____builtin_atan2f_ret
22388     2D 00 64 FD | 	ret
2238c                 | 
2238c                 | __system____builtin_exp2f
2238c     04 4A 05 F6 | 	mov	COUNT_, #4
22390     A8 00 A0 FD | 	call	#pushregs_
22394     09 1F 02 F6 | 	mov	local01, arg01
22398     00 7F 21 FF 
2239c     00 14 06 F6 | 	mov	arg02, ##1123942400
223a0     01 16 66 F6 | 	neg	arg03, #1
223a4     80 F7 BF FD | 	call	#__system___float_cmp
223a8     00 FA 55 F2 | 	cmps	result1, #0 wc
223ac     00 C0 3F 3F 
223b0     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
223b4     DC 00 90 3D |  if_ae	jmp	#LR__3191
223b8     0F 13 02 F6 | 	mov	arg01, local01
223bc     00 7F 61 FF 
223c0     00 14 06 F6 | 	mov	arg02, ##-1023541248
223c4     01 16 06 F6 | 	mov	arg03, #1
223c8     5C F7 BF FD | 	call	#__system___float_cmp
223cc     00 FA 55 F2 | 	cmps	result1, #0 wc
223d0     00 FA 05 C6 |  if_b	mov	result1, #0
223d4     BC 00 90 CD |  if_b	jmp	#LR__3191
223d8     0F 13 02 F6 | 	mov	arg01, local01
223dc     00 14 06 F6 | 	mov	arg02, #0
223e0     D8 F7 BF FD | 	call	#__system___float_tointeger
223e4     FD 20 02 F6 | 	mov	local02, result1
223e8     10 13 52 F6 | 	abs	arg01, local02 wc
223ec     1F 22 C6 C9 |  if_b	decod	local03, #31
223f0     00 22 06 36 |  if_ae	mov	local03, #0
223f4     F8 EE BF FD | 	call	#__system___float_fromuns
223f8     11 FB 61 F5 | 	xor	result1, local03
223fc     FD 14 02 F6 | 	mov	arg02, result1
22400     0F 13 02 F6 | 	mov	arg01, local01
22404     1F 14 E6 F4 | 	bitnot	arg02, #31
22408     18 EF BF FD | 	call	#__system___float_add
2240c     FD 24 02 F6 | 	mov	local04, result1
22410     12 13 02 F6 | 	mov	arg01, local04
22414     00 14 06 F6 | 	mov	arg02, #0
22418     01 16 06 F6 | 	mov	arg03, #1
2241c     08 F7 BF FD | 	call	#__system___float_cmp
22420     00 FA 55 F2 | 	cmps	result1, #0 wc
22424     18 00 90 3D |  if_ae	jmp	#LR__3190
22428     12 13 02 F6 | 	mov	arg01, local04
2242c     00 C0 1F FF 
22430     00 14 06 F6 | 	mov	arg02, ##1065353216
22434     EC EE BF FD | 	call	#__system___float_add
22438     FD 24 02 F6 | 	mov	local04, result1
2243c     01 20 86 F1 | 	sub	local02, #1
22440                 | LR__3190
22440     7F 20 06 F1 | 	add	local02, #127
22444     17 20 66 F0 | 	shl	local02, #23
22448     12 13 02 F6 | 	mov	arg01, local04
2244c     00 80 26 FF 
22450     00 14 06 F6 | 	mov	arg02, ##1291845632
22454     9C F2 BF FD | 	call	#__system___float_mul
22458     FD 12 02 F6 | 	mov	arg01, result1
2245c     00 14 06 F6 | 	mov	arg02, #0
22460     58 F7 BF FD | 	call	#__system___float_tointeger
22464     FD 24 0A F6 | 	mov	local04, result1 wz
22468     10 FB 01 A6 |  if_e	mov	result1, local02
2246c     24 00 90 AD |  if_e	jmp	#LR__3191
22470     3E 24 26 F4 | 	bith	local04, #62
22474     0F 24 62 FD | 	qexp	local04
22478     10 13 02 F6 | 	mov	arg01, local02
2247c     18 14 62 FD | 	getqx	arg02
22480     01 14 06 F1 | 	add	arg02, #1
22484     01 14 46 F0 | 	shr	arg02, #1
22488     00 80 1F FF 
2248c     00 14 06 F1 | 	add	arg02, ##1056964608
22490     60 F2 BF FD | 	call	#__system___float_mul
22494                 | LR__3191
22494     A7 F0 03 F6 | 	mov	ptra, fp
22498     B2 00 A0 FD | 	call	#popregs_
2249c                 | __system____builtin_exp2f_ret
2249c     2D 00 64 FD | 	ret
224a0                 | 
224a0                 | __system____builtin_log2f
224a0     06 4A 05 F6 | 	mov	COUNT_, #6
224a4     A8 00 A0 FD | 	call	#pushregs_
224a8     09 1F 02 F6 | 	mov	local01, arg01
224ac     09 21 0A F6 | 	mov	local02, arg01 wz
224b0     00 00 40 5F 
224b4     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
224b8     00 40 00 AF 
224bc     00 FA 65 A6 |  if_e	neg	result1, ##8388608
224c0     08 01 90 AD |  if_e	jmp	#LR__3204
224c4     00 20 56 F2 | 	cmps	local02, #0 wc
224c8     00 E0 3F CF 
224cc     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
224d0     F8 00 90 CD |  if_b	jmp	#LR__3204
224d4     0F 13 02 F6 | 	mov	arg01, local01
224d8     00 90 20 FF 
224dc     00 14 06 F6 | 	mov	arg02, ##1092616192
224e0     01 16 06 F6 | 	mov	arg03, #1
224e4     40 F6 BF FD | 	call	#__system___float_cmp
224e8     00 FA 0D F2 | 	cmp	result1, #0 wz
224ec     4D 2A 20 AF 
224f0     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
224f4     D4 00 90 AD |  if_e	jmp	#LR__3204
224f8     0F 13 02 F6 | 	mov	arg01, local01
224fc     FC 16 20 FF 
22500     54 14 06 F6 | 	mov	arg02, ##1076754516
22504     01 16 06 F6 | 	mov	arg03, #1
22508     1C F6 BF FD | 	call	#__system___float_cmp
2250c     00 FA 0D F2 | 	cmp	result1, #0 wz
22510     55 DC 1F AF 
22514     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
22518     B0 00 90 AD |  if_e	jmp	#LR__3204
2251c     10 23 02 F6 | 	mov	local03, local02
22520     17 22 46 F0 | 	shr	local03, #23
22524     11 23 E2 F8 | 	getbyte	local03, local03, #0
22528     17 21 06 F4 | 	bitl	local02, #279
2252c     10 25 02 F6 | 	mov	local04, local02
22530     FF 22 0E F2 | 	cmp	local03, #255 wz
22534     1C 00 90 5D |  if_ne	jmp	#LR__3200
22538     00 24 0E F2 | 	cmp	local04, #0 wz
2253c     00 C0 3F 5F 
22540     00 26 06 56 |  if_ne	mov	local05, ##2139095040
22544     00 E0 3F AF 
22548     00 26 06 A6 |  if_e	mov	local05, ##2143289344
2254c     13 FB 01 F6 | 	mov	result1, local05
22550     78 00 90 FD | 	jmp	#LR__3204
22554                 | LR__3200
22554     00 22 0E F2 | 	cmp	local03, #0 wz
22558     17 24 26 54 |  if_ne	bith	local04, #23
2255c     7F 22 86 51 |  if_ne	sub	local03, #127
22560     28 00 90 5D |  if_ne	jmp	#LR__3203
22564     00 24 0E F2 | 	cmp	local04, #0 wz
22568     00 40 00 AF 
2256c     00 FA 65 A6 |  if_e	neg	result1, ##8388608
22570     58 00 90 AD |  if_e	jmp	#LR__3204
22574     7E 22 66 F6 | 	neg	local03, #126
22578     97 08 48 FB | 	callpa	#(@LR__3202-@LR__3201)>>2,fcache_load_ptr_
2257c                 | LR__3201
2257c     17 24 2E F4 | 	testbn	local04, #23 wz
22580     01 24 66 A0 |  if_e	shl	local04, #1
22584     01 22 06 A1 |  if_e	add	local03, #1
22588     F0 FF 9F AD |  if_e	jmp	#LR__3201
2258c                 | LR__3202
2258c                 | LR__3203
2258c     0E 24 62 FD | 	qlog	local04
22590     01 22 86 F1 | 	sub	local03, #1
22594     11 13 52 F6 | 	abs	arg01, local03 wc
22598     1F 28 C6 C9 |  if_b	decod	local06, #31
2259c     00 28 06 36 |  if_ae	mov	local06, #0
225a0     18 26 62 FD | 	getqx	local05
225a4     9B 26 06 F4 | 	bitl	local05, #155
225a8     08 26 06 F1 | 	add	local05, #8
225ac     04 26 46 F0 | 	shr	local05, #4
225b0     00 C0 1F FF 
225b4     00 26 06 F1 | 	add	local05, ##1065353216
225b8     34 ED BF FD | 	call	#__system___float_fromuns
225bc     14 FB 61 F5 | 	xor	result1, local06
225c0     FD 14 02 F6 | 	mov	arg02, result1
225c4     13 13 02 F6 | 	mov	arg01, local05
225c8     58 ED BF FD | 	call	#__system___float_add
225cc                 | LR__3204
225cc     A7 F0 03 F6 | 	mov	ptra, fp
225d0     B2 00 A0 FD | 	call	#popregs_
225d4                 | __system____builtin_log2f_ret
225d4     2D 00 64 FD | 	ret
225d8                 | 
225d8                 | __system____builtin_powf
225d8     04 4A 05 F6 | 	mov	COUNT_, #4
225dc     A8 00 A0 FD | 	call	#pushregs_
225e0     09 1F 02 F6 | 	mov	local01, arg01
225e4     0A 21 02 F6 | 	mov	local02, arg02
225e8     10 13 02 F6 | 	mov	arg01, local02
225ec     00 14 06 F6 | 	mov	arg02, #0
225f0     C8 F5 BF FD | 	call	#__system___float_tointeger
225f4     FD 22 02 F6 | 	mov	local03, result1
225f8     11 13 52 F6 | 	abs	arg01, local03 wc
225fc     1F 24 C6 C9 |  if_b	decod	local04, #31
22600     00 24 06 36 |  if_ae	mov	local04, #0
22604     E8 EC BF FD | 	call	#__system___float_fromuns
22608     12 FB 61 F5 | 	xor	result1, local04
2260c     FD 12 02 F6 | 	mov	arg01, result1
22610     10 15 02 F6 | 	mov	arg02, local02
22614     01 16 06 F6 | 	mov	arg03, #1
22618     0C F5 BF FD | 	call	#__system___float_cmp
2261c     00 FA 0D F2 | 	cmp	result1, #0 wz
22620     18 00 90 5D |  if_ne	jmp	#LR__3210
22624     00 C0 1F FF 
22628     00 12 06 F6 | 	mov	arg01, ##1065353216
2262c     0F 15 02 F6 | 	mov	arg02, local01
22630     11 17 02 F6 | 	mov	arg03, local03
22634     68 00 B0 FD | 	call	#__system___float_pow_n
22638     58 00 90 FD | 	jmp	#LR__3211
2263c                 | LR__3210
2263c     0F 13 02 F6 | 	mov	arg01, local01
22640     00 14 06 F6 | 	mov	arg02, #0
22644     01 16 06 F6 | 	mov	arg03, #1
22648     DC F4 BF FD | 	call	#__system___float_cmp
2264c     00 FA 55 F2 | 	cmps	result1, #0 wc
22650     00 E0 3F CF 
22654     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
22658     38 00 90 CD |  if_b	jmp	#LR__3211
2265c     0F 13 02 F6 | 	mov	arg01, local01
22660     00 14 06 F6 | 	mov	arg02, #0
22664     01 16 06 F6 | 	mov	arg03, #1
22668     BC F4 BF FD | 	call	#__system___float_cmp
2266c     00 FA 0D F2 | 	cmp	result1, #0 wz
22670     00 FA 05 A6 |  if_e	mov	result1, #0
22674     1C 00 90 AD |  if_e	jmp	#LR__3211
22678     0F 13 02 F6 | 	mov	arg01, local01
2267c     20 FE BF FD | 	call	#__system____builtin_log2f
22680     FD 12 02 F6 | 	mov	arg01, result1
22684     10 15 02 F6 | 	mov	arg02, local02
22688     68 F0 BF FD | 	call	#__system___float_mul
2268c     FD 12 02 F6 | 	mov	arg01, result1
22690     F8 FC BF FD | 	call	#__system____builtin_exp2f
22694                 | LR__3211
22694     A7 F0 03 F6 | 	mov	ptra, fp
22698     B2 00 A0 FD | 	call	#popregs_
2269c                 | __system____builtin_powf_ret
2269c     2D 00 64 FD | 	ret
226a0                 | 
226a0                 | __system___float_pow_n
226a0     05 4A 05 F6 | 	mov	COUNT_, #5
226a4     A8 00 A0 FD | 	call	#pushregs_
226a8     09 1F 02 F6 | 	mov	local01, arg01
226ac     0A 21 02 F6 | 	mov	local02, arg02
226b0     0B 23 02 F6 | 	mov	local03, arg03
226b4     00 22 56 F2 | 	cmps	local03, #0 wc
226b8     18 00 90 3D |  if_ae	jmp	#LR__3220
226bc     01 24 06 F6 | 	mov	local04, #1
226c0     11 23 62 F6 | 	neg	local03, local03
226c4     00 22 56 F2 | 	cmps	local03, #0 wc
226c8     00 FA 05 C6 |  if_b	mov	result1, #0
226cc     94 00 90 CD |  if_b	jmp	#LR__3228
226d0     04 00 90 FD | 	jmp	#LR__3221
226d4                 | LR__3220
226d4     00 24 06 F6 | 	mov	local04, #0
226d8                 | LR__3221
226d8     00 C0 1F FF 
226dc     00 26 06 F6 | 	mov	local05, ##1065353216
226e0                 | LR__3222
226e0     01 22 56 F2 | 	cmps	local03, #1 wc
226e4     30 00 90 CD |  if_b	jmp	#LR__3224
226e8     01 22 CE F7 | 	test	local03, #1 wz
226ec     10 00 90 AD |  if_e	jmp	#LR__3223
226f0     13 13 02 F6 | 	mov	arg01, local05
226f4     10 15 02 F6 | 	mov	arg02, local02
226f8     F8 EF BF FD | 	call	#__system___float_mul
226fc     FD 26 02 F6 | 	mov	local05, result1
22700                 | LR__3223
22700     01 22 C6 F0 | 	sar	local03, #1
22704     10 13 02 F6 | 	mov	arg01, local02
22708     10 15 02 F6 | 	mov	arg02, local02
2270c     E4 EF BF FD | 	call	#__system___float_mul
22710     FD 20 02 F6 | 	mov	local02, result1
22714     C8 FF 9F FD | 	jmp	#LR__3222
22718                 | LR__3224
22718     00 24 0E F2 | 	cmp	local04, #0 wz
2271c     14 00 90 AD |  if_e	jmp	#LR__3225
22720     0F 13 02 F6 | 	mov	arg01, local01
22724     13 15 02 F6 | 	mov	arg02, local05
22728     CC F1 BF FD | 	call	#__system___float_div
2272c     FD 26 02 F6 | 	mov	local05, result1
22730     2C 00 90 FD | 	jmp	#LR__3227
22734                 | LR__3225
22734     0F 13 02 F6 | 	mov	arg01, local01
22738     00 C0 1F FF 
2273c     00 14 06 F6 | 	mov	arg02, ##1065353216
22740     01 16 06 F6 | 	mov	arg03, #1
22744     E0 F3 BF FD | 	call	#__system___float_cmp
22748     00 FA 0D F2 | 	cmp	result1, #0 wz
2274c     10 00 90 AD |  if_e	jmp	#LR__3226
22750     0F 13 02 F6 | 	mov	arg01, local01
22754     13 15 02 F6 | 	mov	arg02, local05
22758     98 EF BF FD | 	call	#__system___float_mul
2275c     FD 26 02 F6 | 	mov	local05, result1
22760                 | LR__3226
22760                 | LR__3227
22760     13 FB 01 F6 | 	mov	result1, local05
22764                 | LR__3228
22764     A7 F0 03 F6 | 	mov	ptra, fp
22768     B2 00 A0 FD | 	call	#popregs_
2276c                 | __system___float_pow_n_ret
2276c     2D 00 64 FD | 	ret
22770                 | 
22770                 | __system___gc_ptrs
22770     EC 00 02 F6 | 	mov	_var01, __heap_ptr
22774     00 03 02 F6 | 	mov	_var02, _var01
22778     76 01 00 FF 
2277c     F8 03 06 F1 | 	add	_var02, ##191992
22780     00 FD 09 FB | 	rdlong	result2, _var01 wz
22784     74 00 90 5D |  if_ne	jmp	#LR__3230
22788     01 FD 01 F6 | 	mov	result2, _var02
2278c     00 FD 81 F1 | 	sub	result2, _var01
22790     00 03 58 FC | 	wrword	#1, _var01
22794     00 FB 01 F6 | 	mov	result1, _var01
22798     02 FA 05 F1 | 	add	result1, #2
2279c     36 00 80 FF 
227a0     FD 20 59 FC | 	wrword	##27792, result1
227a4     00 FB 01 F6 | 	mov	result1, _var01
227a8     04 FA 05 F1 | 	add	result1, #4
227ac     FD 00 58 FC | 	wrword	#0, result1
227b0     00 FB 01 F6 | 	mov	result1, _var01
227b4     06 FA 05 F1 | 	add	result1, #6
227b8     FD 02 58 FC | 	wrword	#1, result1
227bc     10 00 06 F1 | 	add	_var01, #16
227c0     FE FC 51 F6 | 	abs	result2, result2 wc
227c4     04 FC 45 F0 | 	shr	result2, #4
227c8     FE FC 81 F6 | 	negc	result2, result2
227cc     00 FD 51 FC | 	wrword	result2, _var01
227d0     00 FD 01 F6 | 	mov	result2, _var01
227d4     02 FC 05 F1 | 	add	result2, #2
227d8     36 00 80 FF 
227dc     FE 1E 59 FC | 	wrword	##27791, result2
227e0     00 FD 01 F6 | 	mov	result2, _var01
227e4     04 FC 05 F1 | 	add	result2, #4
227e8     FE 00 58 FC | 	wrword	#0, result2
227ec     00 FD 01 F6 | 	mov	result2, _var01
227f0     06 FC 05 F1 | 	add	result2, #6
227f4     FE 00 58 FC | 	wrword	#0, result2
227f8     10 00 86 F1 | 	sub	_var01, #16
227fc                 | LR__3230
227fc     00 FB 01 F6 | 	mov	result1, _var01
22800     01 FD 01 F6 | 	mov	result2, _var02
22804                 | __system___gc_ptrs_ret
22804     2D 00 64 FD | 	ret
22808                 | 
22808                 | __system___gc_tryalloc
22808     0B 4A 05 F6 | 	mov	COUNT_, #11
2280c     A8 00 A0 FD | 	call	#pushregs_
22810     09 1F 02 F6 | 	mov	local01, arg01
22814     0A 21 02 F6 | 	mov	local02, arg02
22818     54 FF BF FD | 	call	#__system___gc_ptrs
2281c     FD 22 02 F6 | 	mov	local03, result1
22820     FE 24 02 F6 | 	mov	local04, result2
22824     11 27 02 F6 | 	mov	local05, local03
22828     00 28 06 F6 | 	mov	local06, #0
2282c     97 1E 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
22830                 | LR__3240
22830     13 2B 02 F6 | 	mov	local07, local05
22834     06 26 06 F1 | 	add	local05, #6
22838     13 15 EA FA | 	rdword	arg02, local05 wz
2283c     11 13 02 F6 | 	mov	arg01, local03
22840     00 FA 05 A6 |  if_e	mov	result1, #0
22844     04 14 66 50 |  if_ne	shl	arg02, #4
22848     0A 13 02 51 |  if_ne	add	arg01, arg02
2284c     09 FB 01 56 |  if_ne	mov	result1, arg01
22850     FD 26 0A F6 | 	mov	local05, result1 wz
22854     13 29 E2 5A |  if_ne	rdword	local06, local05
22858     00 26 0E F2 | 	cmp	local05, #0 wz
2285c     12 27 52 52 |  if_ne	cmps	local05, local04 wc
22860     08 00 90 1D |  if_a	jmp	#LR__3242
22864     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
22868     C4 FF 9F 1D |  if_a	jmp	#LR__3240
2286c                 | LR__3241
2286c                 | LR__3242
2286c     00 26 0E F2 | 	cmp	local05, #0 wz
22870     13 FB 01 A6 |  if_e	mov	result1, local05
22874     3C 01 90 AD |  if_e	jmp	#LR__3245
22878     13 FD 01 F6 | 	mov	result2, local05
2287c     06 FC 05 F1 | 	add	result2, #6
22880     FE 2C E2 FA | 	rdword	local08, result2
22884     14 1F 52 F2 | 	cmps	local01, local06 wc
22888     C0 00 90 3D |  if_ae	jmp	#LR__3244
2288c     13 1F 52 FC | 	wrword	local01, local05
22890     13 13 02 F6 | 	mov	arg01, local05
22894     0F 2D 02 F6 | 	mov	local08, local01
22898     04 2C 66 F0 | 	shl	local08, #4
2289c     16 13 02 F1 | 	add	arg01, local08
228a0     0F 29 82 F1 | 	sub	local06, local01
228a4     09 29 52 FC | 	wrword	local06, arg01
228a8     09 2D 02 F6 | 	mov	local08, arg01
228ac     02 2C 06 F1 | 	add	local08, #2
228b0     36 00 80 FF 
228b4     16 1F 59 FC | 	wrword	##27791, local08
228b8     13 15 0A F6 | 	mov	arg02, local05 wz
228bc     00 FA 05 A6 |  if_e	mov	result1, #0
228c0     11 15 82 51 |  if_ne	sub	arg02, local03
228c4     04 14 46 50 |  if_ne	shr	arg02, #4
228c8     0A FB 01 56 |  if_ne	mov	result1, arg02
228cc     09 2D 02 F6 | 	mov	local08, arg01
228d0     04 2C 06 F1 | 	add	local08, #4
228d4     16 FB 51 FC | 	wrword	result1, local08
228d8     13 2D 02 F6 | 	mov	local08, local05
228dc     06 2C 06 F1 | 	add	local08, #6
228e0     09 15 02 F6 | 	mov	arg02, arg01
228e4     16 2D E2 FA | 	rdword	local08, local08
228e8     06 14 06 F1 | 	add	arg02, #6
228ec     0A 2D 52 FC | 	wrword	local08, arg02
228f0     09 2F 02 F6 | 	mov	local09, arg01
228f4     17 15 0A F6 | 	mov	arg02, local09 wz
228f8     00 FA 05 A6 |  if_e	mov	result1, #0
228fc     11 15 82 51 |  if_ne	sub	arg02, local03
22900     04 14 46 50 |  if_ne	shr	arg02, #4
22904     0A FB 01 56 |  if_ne	mov	result1, arg02
22908     FD 2C 02 F6 | 	mov	local08, result1
2290c     09 31 EA FA | 	rdword	local10, arg01 wz
22910     00 FA 05 A6 |  if_e	mov	result1, #0
22914     04 30 66 50 |  if_ne	shl	local10, #4
22918     18 13 02 51 |  if_ne	add	arg01, local10
2291c     09 FB 01 56 |  if_ne	mov	result1, arg01
22920     FD 32 0A F6 | 	mov	local11, result1 wz
22924     24 00 90 AD |  if_e	jmp	#LR__3243
22928     12 33 52 F2 | 	cmps	local11, local04 wc
2292c     1C 00 90 3D |  if_ae	jmp	#LR__3243
22930     17 15 0A F6 | 	mov	arg02, local09 wz
22934     00 FA 05 A6 |  if_e	mov	result1, #0
22938     11 15 82 51 |  if_ne	sub	arg02, local03
2293c     04 14 46 50 |  if_ne	shr	arg02, #4
22940     0A FB 01 56 |  if_ne	mov	result1, arg02
22944     04 32 06 F1 | 	add	local11, #4
22948     19 FB 51 FC | 	wrword	result1, local11
2294c                 | LR__3243
2294c                 | LR__3244
2294c     06 2A 06 F1 | 	add	local07, #6
22950     15 2D 52 FC | 	wrword	local08, local07
22954     36 00 00 FF 
22958     80 2E 06 F6 | 	mov	local09, ##27776
2295c     10 2F 42 F5 | 	or	local09, local02
22960     00 FA 05 F6 | 	mov	result1, #0
22964     01 FA 61 FD | 	cogid	result1
22968     FD 2E 42 F5 | 	or	local09, result1
2296c     13 33 02 F6 | 	mov	local11, local05
22970     02 32 06 F1 | 	add	local11, #2
22974     19 2F 52 FC | 	wrword	local09, local11
22978     11 2F 02 F6 | 	mov	local09, local03
2297c     08 2E 06 F1 | 	add	local09, #8
22980     13 33 02 F6 | 	mov	local11, local05
22984     17 2F E2 FA | 	rdword	local09, local09
22988     06 32 06 F1 | 	add	local11, #6
2298c     19 2F 52 FC | 	wrword	local09, local11
22990     13 15 0A F6 | 	mov	arg02, local05 wz
22994     00 FA 05 A6 |  if_e	mov	result1, #0
22998     11 15 82 51 |  if_ne	sub	arg02, local03
2299c     04 14 46 50 |  if_ne	shr	arg02, #4
229a0     0A FB 01 56 |  if_ne	mov	result1, arg02
229a4     08 22 06 F1 | 	add	local03, #8
229a8     11 FB 51 FC | 	wrword	result1, local03
229ac     08 26 06 F1 | 	add	local05, #8
229b0     13 FB 01 F6 | 	mov	result1, local05
229b4                 | LR__3245
229b4     A7 F0 03 F6 | 	mov	ptra, fp
229b8     B2 00 A0 FD | 	call	#popregs_
229bc                 | __system___gc_tryalloc_ret
229bc     2D 00 64 FD | 	ret
229c0                 | 
229c0                 | __system___gc_alloc_managed
229c0     01 4A 05 F6 | 	mov	COUNT_, #1
229c4     A8 00 A0 FD | 	call	#pushregs_
229c8     09 1F 02 F6 | 	mov	local01, arg01
229cc     00 14 06 F6 | 	mov	arg02, #0
229d0     1C 00 B0 FD | 	call	#__system___gc_doalloc
229d4     FD 14 0A F6 | 	mov	arg02, result1 wz
229d8     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
229dc     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
229e0     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
229e4     A7 F0 03 F6 | 	mov	ptra, fp
229e8     B2 00 A0 FD | 	call	#popregs_
229ec                 | __system___gc_alloc_managed_ret
229ec     2D 00 64 FD | 	ret
229f0                 | 
229f0                 | __system___gc_doalloc
229f0     06 4A 05 F6 | 	mov	COUNT_, #6
229f4     A8 00 A0 FD | 	call	#pushregs_
229f8     09 1F 0A F6 | 	mov	local01, arg01 wz
229fc     0A 21 02 F6 | 	mov	local02, arg02
22a00     00 FA 05 A6 |  if_e	mov	result1, #0
22a04     8C 00 90 AD |  if_e	jmp	#LR__3257
22a08     17 1E 06 F1 | 	add	local01, #23
22a0c     0F 1E 26 F5 | 	andn	local01, #15
22a10     04 1E 46 F0 | 	shr	local01, #4
22a14     1C E6 05 F1 | 	add	ptr___system__dat__, #28
22a18     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
22a1c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
22a20     50 C1 BF FD | 	call	#__system___lockmem
22a24     0F 13 02 F6 | 	mov	arg01, local01
22a28     10 15 02 F6 | 	mov	arg02, local02
22a2c     D8 FD BF FD | 	call	#__system___gc_tryalloc
22a30     FD 22 0A F6 | 	mov	local03, result1 wz
22a34     14 00 90 5D |  if_ne	jmp	#LR__3250
22a38     70 03 B0 FD | 	call	#__system___gc_docollect
22a3c     0F 13 02 F6 | 	mov	arg01, local01
22a40     10 15 02 F6 | 	mov	arg02, local02
22a44     C0 FD BF FD | 	call	#__system___gc_tryalloc
22a48     FD 22 02 F6 | 	mov	local03, result1
22a4c                 | LR__3250
22a4c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
22a50     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
22a54     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
22a58     09 01 68 FC | 	wrlong	#0, arg01
22a5c     00 22 0E F2 | 	cmp	local03, #0 wz
22a60     2C 00 90 AD |  if_e	jmp	#LR__3256
22a64     04 1E 66 F0 | 	shl	local01, #4
22a68     08 1E 86 F1 | 	sub	local01, #8
22a6c     0F 25 52 F6 | 	abs	local04, local01 wc
22a70     02 24 46 F0 | 	shr	local04, #2
22a74     12 27 8A F6 | 	negc	local05, local04 wz
22a78     11 29 02 F6 | 	mov	local06, local03
22a7c     10 00 90 AD |  if_e	jmp	#LR__3255
22a80     97 06 48 FB | 	callpa	#(@LR__3253-@LR__3251)>>2,fcache_load_ptr_
22a84                 | LR__3251
22a84     13 05 D8 FC | 	rep	@LR__3254, local05
22a88                 | LR__3252
22a88     14 01 68 FC | 	wrlong	#0, local06
22a8c     04 28 06 F1 | 	add	local06, #4
22a90                 | LR__3253
22a90                 | LR__3254
22a90                 | LR__3255
22a90                 | LR__3256
22a90     11 FB 01 F6 | 	mov	result1, local03
22a94                 | LR__3257
22a94     A7 F0 03 F6 | 	mov	ptra, fp
22a98     B2 00 A0 FD | 	call	#popregs_
22a9c                 | __system___gc_doalloc_ret
22a9c     2D 00 64 FD | 	ret
22aa0                 | 
22aa0                 | __system___gc_isvalidptr
22aa0     F8 16 06 F4 | 	bitl	arg03, #248
22aa4     08 16 86 F1 | 	sub	arg03, #8
22aa8     09 17 52 F2 | 	cmps	arg03, arg01 wc
22aac     08 00 90 CD |  if_b	jmp	#LR__3260
22ab0     0A 17 52 F2 | 	cmps	arg03, arg02 wc
22ab4     08 00 90 CD |  if_b	jmp	#LR__3261
22ab8                 | LR__3260
22ab8     00 FA 05 F6 | 	mov	result1, #0
22abc     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
22ac0                 | LR__3261
22ac0     0B 01 02 F6 | 	mov	_var01, arg03
22ac4     09 01 62 F5 | 	xor	_var01, arg01
22ac8     0F 00 CE F7 | 	test	_var01, #15 wz
22acc     00 FA 05 56 |  if_ne	mov	result1, #0
22ad0     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
22ad4     0B 01 02 F6 | 	mov	_var01, arg03
22ad8     02 00 06 F1 | 	add	_var01, #2
22adc     00 01 E2 FA | 	rdword	_var01, _var01
22ae0     7F 00 00 FF 
22ae4     C0 01 06 F5 | 	and	_var01, ##65472
22ae8     36 00 00 FF 
22aec     80 00 0E F2 | 	cmp	_var01, ##27776 wz
22af0     00 FA 05 56 |  if_ne	mov	result1, #0
22af4     0B FB 01 A6 |  if_e	mov	result1, arg03
22af8                 | __system___gc_isvalidptr_ret
22af8     2D 00 64 FD | 	ret
22afc                 | 
22afc                 | __system___gc_free
22afc     09 17 02 F6 | 	mov	arg03, arg01
22b00     6C FC BF FD | 	call	#__system___gc_ptrs
22b04     FD 12 02 F6 | 	mov	arg01, result1
22b08     FE 14 02 F6 | 	mov	arg02, result2
22b0c     90 FF BF FD | 	call	#__system___gc_isvalidptr
22b10     FD 14 0A F6 | 	mov	arg02, result1 wz
22b14     28 00 90 AD |  if_e	jmp	#LR__3270
22b18     1C E6 05 F1 | 	add	ptr___system__dat__, #28
22b1c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
22b20     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
22b24     4C C0 BF FD | 	call	#__system___lockmem
22b28     0A 13 02 F6 | 	mov	arg01, arg02
22b2c     14 00 B0 FD | 	call	#__system___gc_dofree
22b30     1C E6 05 F1 | 	add	ptr___system__dat__, #28
22b34     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
22b38     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
22b3c     09 01 68 FC | 	wrlong	#0, arg01
22b40                 | LR__3270
22b40                 | __system___gc_free_ret
22b40     2D 00 64 FD | 	ret
22b44                 | 
22b44                 | __system___gc_dofree
22b44     06 4A 05 F6 | 	mov	COUNT_, #6
22b48     A8 00 A0 FD | 	call	#pushregs_
22b4c     09 1F 02 F6 | 	mov	local01, arg01
22b50     1C FC BF FD | 	call	#__system___gc_ptrs
22b54     FD 20 02 F6 | 	mov	local02, result1
22b58     FE 22 02 F6 | 	mov	local03, result2
22b5c     0F 15 02 F6 | 	mov	arg02, local01
22b60     02 14 06 F1 | 	add	arg02, #2
22b64     36 00 80 FF 
22b68     0A 1F 59 FC | 	wrword	##27791, arg02
22b6c     0F 25 02 F6 | 	mov	local04, local01
22b70     0F 13 02 F6 | 	mov	arg01, local01
22b74     09 27 EA FA | 	rdword	local05, arg01 wz
22b78     00 FA 05 A6 |  if_e	mov	result1, #0
22b7c     04 26 66 50 |  if_ne	shl	local05, #4
22b80     13 13 02 51 |  if_ne	add	arg01, local05
22b84     09 FB 01 56 |  if_ne	mov	result1, arg01
22b88     FD 28 02 F6 | 	mov	local06, result1
22b8c     97 24 48 FB | 	callpa	#(@LR__3281-@LR__3280)>>2,fcache_load_ptr_
22b90                 | LR__3280
22b90     04 24 06 F1 | 	add	local04, #4
22b94     12 15 EA FA | 	rdword	arg02, local04 wz
22b98     10 13 02 F6 | 	mov	arg01, local02
22b9c     00 FA 05 A6 |  if_e	mov	result1, #0
22ba0     04 14 66 50 |  if_ne	shl	arg02, #4
22ba4     0A 13 02 51 |  if_ne	add	arg01, arg02
22ba8     09 FB 01 56 |  if_ne	mov	result1, arg01
22bac     FD 24 0A F6 | 	mov	local04, result1 wz
22bb0     24 00 90 AD |  if_e	jmp	#LR__3282
22bb4     12 13 02 F6 | 	mov	arg01, local04
22bb8     00 FA 05 F6 | 	mov	result1, #0
22bbc     02 12 06 F1 | 	add	arg01, #2
22bc0     09 13 E2 FA | 	rdword	arg01, arg01
22bc4     36 00 00 FF 
22bc8     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
22bcc     01 FA 65 A6 |  if_e	neg	result1, #1
22bd0     00 FA 0D F2 | 	cmp	result1, #0 wz
22bd4     B8 FF 9F AD |  if_e	jmp	#LR__3280
22bd8                 | LR__3281
22bd8                 | LR__3282
22bd8     00 24 0E F2 | 	cmp	local04, #0 wz
22bdc     10 25 02 A6 |  if_e	mov	local04, local02
22be0     12 15 02 F6 | 	mov	arg02, local04
22be4     06 14 06 F1 | 	add	arg02, #6
22be8     0F 13 02 F6 | 	mov	arg01, local01
22bec     0A 15 E2 FA | 	rdword	arg02, arg02
22bf0     06 12 06 F1 | 	add	arg01, #6
22bf4     09 15 52 FC | 	wrword	arg02, arg01
22bf8     0F 15 0A F6 | 	mov	arg02, local01 wz
22bfc     00 FA 05 A6 |  if_e	mov	result1, #0
22c00     10 15 82 51 |  if_ne	sub	arg02, local02
22c04     04 14 46 50 |  if_ne	shr	arg02, #4
22c08     0A FB 01 56 |  if_ne	mov	result1, arg02
22c0c     12 15 02 F6 | 	mov	arg02, local04
22c10     06 14 06 F1 | 	add	arg02, #6
22c14     0A FB 51 FC | 	wrword	result1, arg02
22c18     10 25 0A F2 | 	cmp	local04, local02 wz
22c1c     A4 00 90 AD |  if_e	jmp	#LR__3285
22c20     12 13 02 F6 | 	mov	arg01, local04
22c24     09 27 EA FA | 	rdword	local05, arg01 wz
22c28     00 FA 05 A6 |  if_e	mov	result1, #0
22c2c     04 26 66 50 |  if_ne	shl	local05, #4
22c30     13 13 02 51 |  if_ne	add	arg01, local05
22c34     09 FB 01 56 |  if_ne	mov	result1, arg01
22c38     0F FB 09 F2 | 	cmp	result1, local01 wz
22c3c     84 00 90 5D |  if_ne	jmp	#LR__3284
22c40     12 29 E2 FA | 	rdword	local06, local04
22c44     0F 15 E2 FA | 	rdword	arg02, local01
22c48     0A 29 02 F1 | 	add	local06, arg02
22c4c     12 29 52 FC | 	wrword	local06, local04
22c50     0F 29 02 F6 | 	mov	local06, local01
22c54     02 28 06 F1 | 	add	local06, #2
22c58     14 01 58 FC | 	wrword	#0, local06
22c5c     0F 13 02 F6 | 	mov	arg01, local01
22c60     09 27 EA FA | 	rdword	local05, arg01 wz
22c64     00 FA 05 A6 |  if_e	mov	result1, #0
22c68     04 26 66 50 |  if_ne	shl	local05, #4
22c6c     13 13 02 51 |  if_ne	add	arg01, local05
22c70     09 FB 01 56 |  if_ne	mov	result1, arg01
22c74     FD 28 02 F6 | 	mov	local06, result1
22c78     11 29 52 F2 | 	cmps	local06, local03 wc
22c7c     20 00 90 3D |  if_ae	jmp	#LR__3283
22c80     12 15 0A F6 | 	mov	arg02, local04 wz
22c84     00 FA 05 A6 |  if_e	mov	result1, #0
22c88     10 15 82 51 |  if_ne	sub	arg02, local02
22c8c     04 14 46 50 |  if_ne	shr	arg02, #4
22c90     0A FB 01 56 |  if_ne	mov	result1, arg02
22c94     14 15 02 F6 | 	mov	arg02, local06
22c98     04 14 06 F1 | 	add	arg02, #4
22c9c     0A FB 51 FC | 	wrword	result1, arg02
22ca0                 | LR__3283
22ca0     0F 15 02 F6 | 	mov	arg02, local01
22ca4     06 14 06 F1 | 	add	arg02, #6
22ca8     12 FD 01 F6 | 	mov	result2, local04
22cac     0A 15 E2 FA | 	rdword	arg02, arg02
22cb0     06 FC 05 F1 | 	add	result2, #6
22cb4     FE 14 52 FC | 	wrword	arg02, result2
22cb8     06 1E 06 F1 | 	add	local01, #6
22cbc     0F 01 58 FC | 	wrword	#0, local01
22cc0     12 1F 02 F6 | 	mov	local01, local04
22cc4                 | LR__3284
22cc4                 | LR__3285
22cc4     0F 13 02 F6 | 	mov	arg01, local01
22cc8     09 27 EA FA | 	rdword	local05, arg01 wz
22ccc     00 FA 05 A6 |  if_e	mov	result1, #0
22cd0     04 26 66 50 |  if_ne	shl	local05, #4
22cd4     13 13 02 51 |  if_ne	add	arg01, local05
22cd8     09 FB 01 56 |  if_ne	mov	result1, arg01
22cdc     FD 14 0A F6 | 	mov	arg02, result1 wz
22ce0     B8 00 90 AD |  if_e	jmp	#LR__3287
22ce4     11 15 52 F2 | 	cmps	arg02, local03 wc
22ce8     B0 00 90 3D |  if_ae	jmp	#LR__3287
22cec     0A 13 02 F6 | 	mov	arg01, arg02
22cf0     00 FA 05 F6 | 	mov	result1, #0
22cf4     02 12 06 F1 | 	add	arg01, #2
22cf8     09 13 E2 FA | 	rdword	arg01, arg01
22cfc     36 00 00 FF 
22d00     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
22d04     01 FA 65 A6 |  if_e	neg	result1, #1
22d08     00 FA 0D F2 | 	cmp	result1, #0 wz
22d0c     8C 00 90 AD |  if_e	jmp	#LR__3287
22d10     0F 25 02 F6 | 	mov	local04, local01
22d14     12 29 E2 FA | 	rdword	local06, local04
22d18     0A 13 02 F6 | 	mov	arg01, arg02
22d1c     09 1F E2 FA | 	rdword	local01, arg01
22d20     0F 29 02 F1 | 	add	local06, local01
22d24     12 29 52 FC | 	wrword	local06, local04
22d28     09 29 02 F6 | 	mov	local06, arg01
22d2c     06 28 06 F1 | 	add	local06, #6
22d30     12 1F 02 F6 | 	mov	local01, local04
22d34     14 29 E2 FA | 	rdword	local06, local06
22d38     06 1E 06 F1 | 	add	local01, #6
22d3c     0F 29 52 FC | 	wrword	local06, local01
22d40     09 29 02 F6 | 	mov	local06, arg01
22d44     02 28 06 F1 | 	add	local06, #2
22d48     14 55 59 FC | 	wrword	#170, local06
22d4c     09 29 02 F6 | 	mov	local06, arg01
22d50     06 28 06 F1 | 	add	local06, #6
22d54     14 01 58 FC | 	wrword	#0, local06
22d58     09 27 EA FA | 	rdword	local05, arg01 wz
22d5c     00 FA 05 A6 |  if_e	mov	result1, #0
22d60     04 26 66 50 |  if_ne	shl	local05, #4
22d64     13 13 02 51 |  if_ne	add	arg01, local05
22d68     09 FB 01 56 |  if_ne	mov	result1, arg01
22d6c     FD 28 0A F6 | 	mov	local06, result1 wz
22d70     28 00 90 AD |  if_e	jmp	#LR__3286
22d74     11 29 52 F2 | 	cmps	local06, local03 wc
22d78     20 00 90 3D |  if_ae	jmp	#LR__3286
22d7c     12 15 0A F6 | 	mov	arg02, local04 wz
22d80     00 FA 05 A6 |  if_e	mov	result1, #0
22d84     10 15 82 51 |  if_ne	sub	arg02, local02
22d88     04 14 46 50 |  if_ne	shr	arg02, #4
22d8c     0A FB 01 56 |  if_ne	mov	result1, arg02
22d90     14 25 02 F6 | 	mov	local04, local06
22d94     04 24 06 F1 | 	add	local04, #4
22d98     12 FB 51 FC | 	wrword	result1, local04
22d9c                 | LR__3286
22d9c                 | LR__3287
22d9c     14 FB 01 F6 | 	mov	result1, local06
22da0     A7 F0 03 F6 | 	mov	ptra, fp
22da4     B2 00 A0 FD | 	call	#popregs_
22da8                 | __system___gc_dofree_ret
22da8     2D 00 64 FD | 	ret
22dac                 | 
22dac                 | __system___gc_docollect
22dac     05 4A 05 F6 | 	mov	COUNT_, #5
22db0     A8 00 A0 FD | 	call	#pushregs_
22db4     B8 F9 BF FD | 	call	#__system___gc_ptrs
22db8     FE 1E 02 F6 | 	mov	local01, result2
22dbc     FD 20 02 F6 | 	mov	local02, result1
22dc0     10 13 02 F6 | 	mov	arg01, local02
22dc4     09 23 EA FA | 	rdword	local03, arg01 wz
22dc8     00 FA 05 A6 |  if_e	mov	result1, #0
22dcc     04 22 66 50 |  if_ne	shl	local03, #4
22dd0     11 13 02 51 |  if_ne	add	arg01, local03
22dd4     09 FB 01 56 |  if_ne	mov	result1, arg01
22dd8     FD 24 0A F6 | 	mov	local04, result1 wz
22ddc     00 FA 05 F6 | 	mov	result1, #0
22de0     01 FA 61 FD | 	cogid	result1
22de4     FD 26 02 F6 | 	mov	local05, result1
22de8     48 00 90 AD |  if_e	jmp	#LR__3292
22dec     97 22 48 FB | 	callpa	#(@LR__3291-@LR__3290)>>2,fcache_load_ptr_
22df0                 | LR__3290
22df0     0F 25 52 F2 | 	cmps	local04, local01 wc
22df4     3C 00 90 3D |  if_ae	jmp	#LR__3292
22df8     12 15 02 F6 | 	mov	arg02, local04
22dfc     02 14 06 F1 | 	add	arg02, #2
22e00     0A 15 E2 FA | 	rdword	arg02, arg02
22e04     20 14 26 F5 | 	andn	arg02, #32
22e08     12 13 02 F6 | 	mov	arg01, local04
22e0c     02 12 06 F1 | 	add	arg01, #2
22e10     09 15 52 FC | 	wrword	arg02, arg01
22e14     12 13 02 F6 | 	mov	arg01, local04
22e18     09 23 EA FA | 	rdword	local03, arg01 wz
22e1c     00 FA 05 A6 |  if_e	mov	result1, #0
22e20     04 22 66 50 |  if_ne	shl	local03, #4
22e24     11 13 02 51 |  if_ne	add	arg01, local03
22e28     09 FB 01 56 |  if_ne	mov	result1, arg01
22e2c     FD 24 0A F6 | 	mov	local04, result1 wz
22e30     BC FF 9F 5D |  if_ne	jmp	#LR__3290
22e34                 | LR__3291
22e34                 | LR__3292
22e34     00 22 06 F6 | 	mov	local03, #0
22e38     00 12 06 F6 | 	mov	arg01, #0
22e3c     0C BD BF FD | 	call	#__system____topofstack
22e40     FD 14 02 F6 | 	mov	arg02, result1
22e44     11 13 02 F6 | 	mov	arg01, local03
22e48     90 00 B0 FD | 	call	#__system___gc_markhub
22e4c     1C 01 B0 FD | 	call	#__system___gc_markcog
22e50     10 13 02 F6 | 	mov	arg01, local02
22e54     09 23 EA FA | 	rdword	local03, arg01 wz
22e58     00 FA 05 A6 |  if_e	mov	result1, #0
22e5c     04 22 66 50 |  if_ne	shl	local03, #4
22e60     11 13 02 51 |  if_ne	add	arg01, local03
22e64     09 FB 01 56 |  if_ne	mov	result1, arg01
22e68     FD 20 0A F6 | 	mov	local02, result1 wz
22e6c     60 00 90 AD |  if_e	jmp	#LR__3296
22e70                 | LR__3293
22e70     10 25 02 F6 | 	mov	local04, local02
22e74     12 13 02 F6 | 	mov	arg01, local04
22e78     09 23 EA FA | 	rdword	local03, arg01 wz
22e7c     00 FA 05 A6 |  if_e	mov	result1, #0
22e80     04 22 66 50 |  if_ne	shl	local03, #4
22e84     11 13 02 51 |  if_ne	add	arg01, local03
22e88     09 FB 01 56 |  if_ne	mov	result1, arg01
22e8c     FD 20 02 F6 | 	mov	local02, result1
22e90     12 15 02 F6 | 	mov	arg02, local04
22e94     02 14 06 F1 | 	add	arg02, #2
22e98     0A 15 E2 FA | 	rdword	arg02, arg02
22e9c     20 14 CE F7 | 	test	arg02, #32 wz
22ea0     10 14 CE A7 |  if_e	test	arg02, #16 wz
22ea4     1C 00 90 5D |  if_ne	jmp	#LR__3295
22ea8     0A 15 42 F8 | 	getnib	arg02, arg02, #0
22eac     13 15 0A F2 | 	cmp	arg02, local05 wz
22eb0     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
22eb4     0C 00 90 5D |  if_ne	jmp	#LR__3294
22eb8     12 13 02 F6 | 	mov	arg01, local04
22ebc     84 FC BF FD | 	call	#__system___gc_dofree
22ec0     FD 20 02 F6 | 	mov	local02, result1
22ec4                 | LR__3294
22ec4                 | LR__3295
22ec4     00 20 0E F2 | 	cmp	local02, #0 wz
22ec8     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
22ecc     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3293
22ed0                 | LR__3296
22ed0     A7 F0 03 F6 | 	mov	ptra, fp
22ed4     B2 00 A0 FD | 	call	#popregs_
22ed8                 | __system___gc_docollect_ret
22ed8     2D 00 64 FD | 	ret
22edc                 | 
22edc                 | __system___gc_markhub
22edc     04 4A 05 F6 | 	mov	COUNT_, #4
22ee0     A8 00 A0 FD | 	call	#pushregs_
22ee4     09 1F 02 F6 | 	mov	local01, arg01
22ee8     0A 21 02 F6 | 	mov	local02, arg02
22eec     80 F8 BF FD | 	call	#__system___gc_ptrs
22ef0     FD 22 02 F6 | 	mov	local03, result1
22ef4     FE 24 02 F6 | 	mov	local04, result2
22ef8                 | LR__3300
22ef8     10 1F 52 F2 | 	cmps	local01, local02 wc
22efc     60 00 90 3D |  if_ae	jmp	#LR__3301
22f00     0F 17 02 FB | 	rdlong	arg03, local01
22f04     04 1E 06 F1 | 	add	local01, #4
22f08     12 15 02 F6 | 	mov	arg02, local04
22f0c     11 13 02 F6 | 	mov	arg01, local03
22f10     8C FB BF FD | 	call	#__system___gc_isvalidptr
22f14     FD 16 0A F6 | 	mov	arg03, result1 wz
22f18     DC FF 9F AD |  if_e	jmp	#LR__3300
22f1c     0B 13 02 F6 | 	mov	arg01, arg03
22f20     00 FA 05 F6 | 	mov	result1, #0
22f24     02 12 06 F1 | 	add	arg01, #2
22f28     09 13 E2 FA | 	rdword	arg01, arg01
22f2c     36 00 00 FF 
22f30     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
22f34     01 FA 65 A6 |  if_e	neg	result1, #1
22f38     00 FA 0D F2 | 	cmp	result1, #0 wz
22f3c     B8 FF 9F 5D |  if_ne	jmp	#LR__3300
22f40     0B FD 01 F6 | 	mov	result2, arg03
22f44     02 FC 05 F1 | 	add	result2, #2
22f48     FE FC E1 FA | 	rdword	result2, result2
22f4c     0F FC 25 F5 | 	andn	result2, #15
22f50     2E FC 45 F5 | 	or	result2, #46
22f54     02 16 06 F1 | 	add	arg03, #2
22f58     0B FD 51 FC | 	wrword	result2, arg03
22f5c     98 FF 9F FD | 	jmp	#LR__3300
22f60                 | LR__3301
22f60     A7 F0 03 F6 | 	mov	ptra, fp
22f64     B2 00 A0 FD | 	call	#popregs_
22f68                 | __system___gc_markhub_ret
22f68     2D 00 64 FD | 	ret
22f6c                 | 
22f6c                 | __system___gc_markcog
22f6c     04 4A 05 F6 | 	mov	COUNT_, #4
22f70     A8 00 A0 FD | 	call	#pushregs_
22f74     F8 F7 BF FD | 	call	#__system___gc_ptrs
22f78     FD 1E 02 F6 | 	mov	local01, result1
22f7c     FE 20 02 F6 | 	mov	local02, result2
22f80     EF 23 06 F6 | 	mov	local03, #495
22f84                 | LR__3310
22f84                 | 	'.live	local03
22f84     00 22 96 F9 | 	alts	local03, #0
22f88     11 25 02 F6 | 	mov	local04, local03
22f8c     0F 13 02 F6 | 	mov	arg01, local01
22f90     10 15 02 F6 | 	mov	arg02, local02
22f94     12 17 02 F6 | 	mov	arg03, local04
22f98     04 FB BF FD | 	call	#__system___gc_isvalidptr
22f9c     00 FA 0D F2 | 	cmp	result1, #0 wz
22fa0     18 00 90 AD |  if_e	jmp	#LR__3311
22fa4     FD 24 02 F6 | 	mov	local04, result1
22fa8     02 24 06 F1 | 	add	local04, #2
22fac     12 25 E2 FA | 	rdword	local04, local04
22fb0     20 24 46 F5 | 	or	local04, #32
22fb4     02 FA 05 F1 | 	add	result1, #2
22fb8     FD 24 52 FC | 	wrword	local04, result1
22fbc                 | LR__3311
22fbc     01 22 86 F1 | 	sub	local03, #1
22fc0     00 22 56 F2 | 	cmps	local03, #0 wc
22fc4     BC FF 9F 3D |  if_ae	jmp	#LR__3310
22fc8     A7 F0 03 F6 | 	mov	ptra, fp
22fcc     B2 00 A0 FD | 	call	#popregs_
22fd0                 | __system___gc_markcog_ret
22fd0     2D 00 64 FD | 	ret
22fd4                 | 
22fd4                 | __system__opendir
22fd4     06 4A 05 F6 | 	mov	COUNT_, #6
22fd8     A8 00 A0 FD | 	call	#pushregs_
22fdc     84 E7 05 F1 | 	add	ptr___system__dat__, #388
22fe0     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
22fe4     09 15 02 F6 | 	mov	arg02, arg01
22fe8     0F 13 02 F6 | 	mov	arg01, local01
22fec     00 16 06 F6 | 	mov	arg03, #0
22ff0     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
22ff4     14 C3 BF FD | 	call	#__system____getvfsforfile
22ff8     FD 20 0A F6 | 	mov	local02, result1 wz
22ffc     10 00 90 AD |  if_e	jmp	#LR__3320
23000     28 20 06 F1 | 	add	local02, #40
23004     10 17 0A FB | 	rdlong	arg03, local02 wz
23008     28 20 86 F1 | 	sub	local02, #40
2300c     14 00 90 5D |  if_ne	jmp	#LR__3321
23010                 | LR__3320
23010     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23014     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
23018     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2301c     00 FA 05 F6 | 	mov	result1, #0
23020     90 00 90 FD | 	jmp	#LR__3323
23024                 | LR__3321
23024     5C 12 06 F6 | 	mov	arg01, #92
23028     10 14 06 F6 | 	mov	arg02, #16
2302c     C0 F9 BF FD | 	call	#__system___gc_doalloc
23030     FD 22 0A F6 | 	mov	local03, result1 wz
23034     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
23038     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2303c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
23040     00 FA 05 A6 |  if_e	mov	result1, #0
23044     6C 00 90 AD |  if_e	jmp	#LR__3323
23048     28 20 06 F1 | 	add	local02, #40
2304c     10 25 02 FB | 	rdlong	local04, local02
23050     12 27 02 F6 | 	mov	local05, local04
23054     28 20 86 F1 | 	sub	local02, #40
23058     13 26 46 F7 | 	zerox	local05, #19
2305c     14 24 46 F0 | 	shr	local04, #20
23060     02 24 66 F0 | 	shl	local04, #2
23064     ED 24 02 F1 | 	add	local04, __methods__
23068     12 25 02 FB | 	rdlong	local04, local04
2306c     11 13 02 F6 | 	mov	arg01, local03
23070     0F 15 02 F6 | 	mov	arg02, local01
23074     F2 28 02 F6 | 	mov	local06, objptr
23078     13 E5 01 F6 | 	mov	objptr, local05
2307c     2D 24 62 FD | 	call	local04
23080     14 E5 01 F6 | 	mov	objptr, local06
23084     FD 16 0A F6 | 	mov	arg03, result1 wz
23088     20 00 90 AD |  if_e	jmp	#LR__3322
2308c     00 16 4E F2 | 	cmps	arg03, #0 wz
23090     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23094     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
23098     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2309c     11 13 02 F6 | 	mov	arg01, local03
230a0     58 FA BF FD | 	call	#__system___gc_free
230a4     00 FA 05 F6 | 	mov	result1, #0
230a8     08 00 90 FD | 	jmp	#LR__3323
230ac                 | LR__3322
230ac     11 21 62 FC | 	wrlong	local02, local03
230b0     11 FB 01 F6 | 	mov	result1, local03
230b4                 | LR__3323
230b4     A7 F0 03 F6 | 	mov	ptra, fp
230b8     B2 00 A0 FD | 	call	#popregs_
230bc                 | __system__opendir_ret
230bc     2D 00 64 FD | 	ret
230c0                 | 
230c0                 | __system__closedir
230c0     04 4A 05 F6 | 	mov	COUNT_, #4
230c4     A8 00 A0 FD | 	call	#pushregs_
230c8     09 1F 02 F6 | 	mov	local01, arg01
230cc     0F 13 02 FB | 	rdlong	arg01, local01
230d0     2C 12 06 F1 | 	add	arg01, #44
230d4     09 21 02 FB | 	rdlong	local02, arg01
230d8     10 23 02 F6 | 	mov	local03, local02
230dc     13 22 46 F7 | 	zerox	local03, #19
230e0     14 20 46 F0 | 	shr	local02, #20
230e4     02 20 66 F0 | 	shl	local02, #2
230e8     ED 20 02 F1 | 	add	local02, __methods__
230ec     10 21 02 FB | 	rdlong	local02, local02
230f0     0F 13 02 F6 | 	mov	arg01, local01
230f4     F2 24 02 F6 | 	mov	local04, objptr
230f8     11 E5 01 F6 | 	mov	objptr, local03
230fc     2D 20 62 FD | 	call	local02
23100     12 E5 01 F6 | 	mov	objptr, local04
23104     FD 24 02 F6 | 	mov	local04, result1
23108     0F 13 02 F6 | 	mov	arg01, local01
2310c     EC F9 BF FD | 	call	#__system___gc_free
23110     00 24 4E F2 | 	cmps	local04, #0 wz
23114     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23118     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
2311c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23120     01 FA 65 56 |  if_ne	neg	result1, #1
23124     00 FA 05 A6 |  if_e	mov	result1, #0
23128     A7 F0 03 F6 | 	mov	ptra, fp
2312c     B2 00 A0 FD | 	call	#popregs_
23130                 | __system__closedir_ret
23130     2D 00 64 FD | 	ret
23134                 | 
23134                 | __system__readdir
23134     04 4A 05 F6 | 	mov	COUNT_, #4
23138     A8 00 A0 FD | 	call	#pushregs_
2313c     09 15 0A FB | 	rdlong	arg02, arg01 wz
23140     08 12 06 F1 | 	add	arg01, #8
23144     09 1F 02 F6 | 	mov	local01, arg01
23148     08 12 86 F1 | 	sub	arg01, #8
2314c     00 FA 05 A6 |  if_e	mov	result1, #0
23150     5C 00 90 AD |  if_e	jmp	#LR__3331
23154     30 14 06 F1 | 	add	arg02, #48
23158     0A 21 02 FB | 	rdlong	local02, arg02
2315c     10 23 02 F6 | 	mov	local03, local02
23160     13 22 46 F7 | 	zerox	local03, #19
23164     14 20 46 F0 | 	shr	local02, #20
23168     02 20 66 F0 | 	shl	local02, #2
2316c     ED 20 02 F1 | 	add	local02, __methods__
23170     10 21 02 FB | 	rdlong	local02, local02
23174     0F 15 02 F6 | 	mov	arg02, local01
23178     F2 24 02 F6 | 	mov	local04, objptr
2317c     11 E5 01 F6 | 	mov	objptr, local03
23180     2D 20 62 FD | 	call	local02
23184     12 E5 01 F6 | 	mov	objptr, local04
23188     00 FA 4D F2 | 	cmps	result1, #0 wz
2318c     1C 00 90 AD |  if_e	jmp	#LR__3330
23190     01 FA 55 F2 | 	cmps	result1, #1 wc
23194     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
23198     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2319c     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
231a0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
231a4     00 FA 05 F6 | 	mov	result1, #0
231a8     04 00 90 FD | 	jmp	#LR__3331
231ac                 | LR__3330
231ac     0F FB 01 F6 | 	mov	result1, local01
231b0                 | LR__3331
231b0     A7 F0 03 F6 | 	mov	ptra, fp
231b4     B2 00 A0 FD | 	call	#popregs_
231b8                 | __system__readdir_ret
231b8     2D 00 64 FD | 	ret
231bc                 | 
231bc                 | __system___openraw
231bc     15 4A 05 F6 | 	mov	COUNT_, #21
231c0     A8 00 A0 FD | 	call	#pushregs_
231c4     09 1F 02 F6 | 	mov	local01, arg01
231c8     0A 21 02 F6 | 	mov	local02, arg02
231cc     0B 23 02 F6 | 	mov	local03, arg03
231d0     0C 25 02 F6 | 	mov	local04, arg04
231d4     04 26 06 F6 | 	mov	local05, #4
231d8     0F 29 02 F6 | 	mov	local06, local01
231dc     00 2A 06 F6 | 	mov	local07, #0
231e0     84 E7 05 F1 | 	add	ptr___system__dat__, #388
231e4     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
231e8     16 13 02 F6 | 	mov	arg01, local08
231ec     10 15 02 F6 | 	mov	arg02, local02
231f0     00 16 06 F6 | 	mov	arg03, #0
231f4     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
231f8     10 C1 BF FD | 	call	#__system____getvfsforfile
231fc     FD 2E 0A F6 | 	mov	local09, result1 wz
23200     10 00 90 AD |  if_e	jmp	#LR__3340
23204     20 2E 06 F1 | 	add	local09, #32
23208     17 FB 09 FB | 	rdlong	result1, local09 wz
2320c     20 2E 86 F1 | 	sub	local09, #32
23210     14 00 90 5D |  if_ne	jmp	#LR__3341
23214                 | LR__3340
23214     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23218     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2321c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23220     01 FA 65 F6 | 	neg	result1, #1
23224     8C 02 90 FD | 	jmp	#LR__3354
23228                 | LR__3341
23228     14 13 02 F6 | 	mov	arg01, local06
2322c     00 14 06 F6 | 	mov	arg02, #0
23230     34 16 06 F6 | 	mov	arg03, #52
23234     09 31 02 F6 | 	mov	local10, arg01
23238     98 00 A0 FD | 	call	#\builtin_bytefill_
2323c     20 2E 06 F1 | 	add	local09, #32
23240     17 33 02 FB | 	rdlong	local11, local09
23244     19 35 02 F6 | 	mov	local12, local11
23248     19 37 02 F6 | 	mov	local13, local11
2324c     20 2E 86 F1 | 	sub	local09, #32
23250     1B 39 02 F6 | 	mov	local14, local13
23254     13 34 46 F7 | 	zerox	local12, #19
23258     14 38 46 F0 | 	shr	local14, #20
2325c     02 38 66 F0 | 	shl	local14, #2
23260     ED 38 02 F1 | 	add	local14, __methods__
23264     1C 39 02 FB | 	rdlong	local14, local14
23268     14 3B 02 F6 | 	mov	local15, local06
2326c     16 3D 02 F6 | 	mov	local16, local08
23270     11 3F 02 F6 | 	mov	local17, local03
23274     1D 13 02 F6 | 	mov	arg01, local15
23278     1E 15 02 F6 | 	mov	arg02, local16
2327c     1F 17 02 F6 | 	mov	arg03, local17
23280     F2 40 02 F6 | 	mov	local18, objptr
23284     1A E5 01 F6 | 	mov	objptr, local12
23288     2D 38 62 FD | 	call	local14
2328c     20 E5 01 F6 | 	mov	objptr, local18
23290     FD 42 0A F6 | 	mov	local19, result1 wz
23294     04 22 CE 57 |  if_ne	test	local03, #4 wz
23298     58 00 90 AD |  if_e	jmp	#LR__3342
2329c     24 2E 06 F1 | 	add	local09, #36
232a0     17 33 02 FB | 	rdlong	local11, local09
232a4     19 35 02 F6 | 	mov	local12, local11
232a8     19 37 02 F6 | 	mov	local13, local11
232ac     24 2E 86 F1 | 	sub	local09, #36
232b0     1B 39 02 F6 | 	mov	local14, local13
232b4     13 34 46 F7 | 	zerox	local12, #19
232b8     14 38 46 F0 | 	shr	local14, #20
232bc     02 38 66 F0 | 	shl	local14, #2
232c0     ED 38 02 F1 | 	add	local14, __methods__
232c4     1C 39 02 FB | 	rdlong	local14, local14
232c8     14 3B 02 F6 | 	mov	local15, local06
232cc     16 3D 02 F6 | 	mov	local16, local08
232d0     12 3F 02 F6 | 	mov	local17, local04
232d4     1D 13 02 F6 | 	mov	arg01, local15
232d8     1E 15 02 F6 | 	mov	arg02, local16
232dc     1F 17 02 F6 | 	mov	arg03, local17
232e0     F2 40 02 F6 | 	mov	local18, objptr
232e4     1A E5 01 F6 | 	mov	objptr, local12
232e8     2D 38 62 FD | 	call	local14
232ec     20 E5 01 F6 | 	mov	objptr, local18
232f0     FD 42 02 F6 | 	mov	local19, result1
232f4                 | LR__3342
232f4     00 42 0E F2 | 	cmp	local19, #0 wz
232f8     8C 01 90 5D |  if_ne	jmp	#LR__3352
232fc     11 45 02 F6 | 	mov	local20, local03
23300     03 44 0E F5 | 	and	local20, #3 wz
23304     02 26 46 55 |  if_ne	or	local05, #2
23308     01 44 0E F2 | 	cmp	local20, #1 wz
2330c     01 26 46 55 |  if_ne	or	local05, #1
23310     20 22 CE F7 | 	test	local03, #32 wz
23314     C0 26 46 55 |  if_ne	or	local05, #192
23318     08 28 06 F1 | 	add	local06, #8
2331c     14 27 62 FC | 	wrlong	local05, local06
23320     0C 28 06 F1 | 	add	local06, #12
23324     14 47 0A FB | 	rdlong	local21, local06 wz
23328     14 28 86 F1 | 	sub	local06, #20
2332c     18 00 90 5D |  if_ne	jmp	#LR__3343
23330     04 2E 06 F1 | 	add	local09, #4
23334     17 47 02 FB | 	rdlong	local21, local09
23338     04 2E 86 F1 | 	sub	local09, #4
2333c     14 28 06 F1 | 	add	local06, #20
23340     14 47 62 FC | 	wrlong	local21, local06
23344     14 28 86 F1 | 	sub	local06, #20
23348                 | LR__3343
23348     18 28 06 F1 | 	add	local06, #24
2334c     14 47 0A FB | 	rdlong	local21, local06 wz
23350     18 28 86 F1 | 	sub	local06, #24
23354     18 00 90 5D |  if_ne	jmp	#LR__3344
23358     08 2E 06 F1 | 	add	local09, #8
2335c     17 47 02 FB | 	rdlong	local21, local09
23360     08 2E 86 F1 | 	sub	local09, #8
23364     18 28 06 F1 | 	add	local06, #24
23368     14 47 62 FC | 	wrlong	local21, local06
2336c     18 28 86 F1 | 	sub	local06, #24
23370                 | LR__3344
23370     24 28 06 F1 | 	add	local06, #36
23374     14 47 0A FB | 	rdlong	local21, local06 wz
23378     24 28 86 F1 | 	sub	local06, #36
2337c     17 47 02 AB |  if_e	rdlong	local21, local09
23380     24 28 06 A1 |  if_e	add	local06, #36
23384     14 47 62 AC |  if_e	wrlong	local21, local06
23388     24 28 86 A1 |  if_e	sub	local06, #36
2338c     28 28 06 F1 | 	add	local06, #40
23390     14 47 0A FB | 	rdlong	local21, local06 wz
23394     28 28 86 F1 | 	sub	local06, #40
23398     18 00 90 5D |  if_ne	jmp	#LR__3345
2339c     10 2E 06 F1 | 	add	local09, #16
233a0     17 47 02 FB | 	rdlong	local21, local09
233a4     10 2E 86 F1 | 	sub	local09, #16
233a8     28 28 06 F1 | 	add	local06, #40
233ac     14 47 62 FC | 	wrlong	local21, local06
233b0     28 28 86 F1 | 	sub	local06, #40
233b4                 | LR__3345
233b4     30 28 06 F1 | 	add	local06, #48
233b8     14 47 0A FB | 	rdlong	local21, local06 wz
233bc     30 28 86 F1 | 	sub	local06, #48
233c0     18 00 90 5D |  if_ne	jmp	#LR__3346
233c4     0C 2E 06 F1 | 	add	local09, #12
233c8     17 47 02 FB | 	rdlong	local21, local09
233cc     0C 2E 86 F1 | 	sub	local09, #12
233d0     30 28 06 F1 | 	add	local06, #48
233d4     14 47 62 FC | 	wrlong	local21, local06
233d8     30 28 86 F1 | 	sub	local06, #48
233dc                 | LR__3346
233dc     1C 28 06 F1 | 	add	local06, #28
233e0     14 47 0A FB | 	rdlong	local21, local06 wz
233e4     1C 28 86 F1 | 	sub	local06, #28
233e8     1C 00 90 5D |  if_ne	jmp	#LR__3347
233ec     01 2A 06 F6 | 	mov	local07, #1
233f0     F2 12 02 F6 | 	mov	arg01, objptr
233f4     00 70 04 FF 
233f8     00 12 46 F5 | 	or	arg01, ##148897792
233fc     1C 28 06 F1 | 	add	local06, #28
23400     14 13 62 FC | 	wrlong	arg01, local06
23404     1C 28 86 F1 | 	sub	local06, #28
23408                 | LR__3347
23408     20 28 06 F1 | 	add	local06, #32
2340c     14 47 0A FB | 	rdlong	local21, local06 wz
23410     20 28 86 F1 | 	sub	local06, #32
23414     1C 00 90 5D |  if_ne	jmp	#LR__3348
23418     01 2A 06 F6 | 	mov	local07, #1
2341c     F2 12 02 F6 | 	mov	arg01, objptr
23420     00 78 04 FF 
23424     00 12 46 F5 | 	or	arg01, ##149946368
23428     20 28 06 F1 | 	add	local06, #32
2342c     14 13 62 FC | 	wrlong	arg01, local06
23430     20 28 86 F1 | 	sub	local06, #32
23434                 | LR__3348
23434     2C 28 06 F1 | 	add	local06, #44
23438     14 47 0A FB | 	rdlong	local21, local06 wz
2343c     2C 28 86 F1 | 	sub	local06, #44
23440     44 00 90 5D |  if_ne	jmp	#LR__3351
23444     14 2E 06 F1 | 	add	local09, #20
23448     17 47 0A FB | 	rdlong	local21, local09 wz
2344c     14 2E 86 F1 | 	sub	local09, #20
23450     18 00 90 AD |  if_e	jmp	#LR__3349
23454     14 2E 06 F1 | 	add	local09, #20
23458     17 47 02 FB | 	rdlong	local21, local09
2345c     2C 28 06 F1 | 	add	local06, #44
23460     14 47 62 FC | 	wrlong	local21, local06
23464     2C 28 86 F1 | 	sub	local06, #44
23468     1C 00 90 FD | 	jmp	#LR__3350
2346c                 | LR__3349
2346c     01 2A 06 F6 | 	mov	local07, #1
23470     F2 12 02 F6 | 	mov	arg01, objptr
23474     00 80 04 FF 
23478     00 12 46 F5 | 	or	arg01, ##150994944
2347c     2C 28 06 F1 | 	add	local06, #44
23480     14 13 62 FC | 	wrlong	arg01, local06
23484     2C 28 86 F1 | 	sub	local06, #44
23488                 | LR__3350
23488                 | LR__3351
23488                 | LR__3352
23488     00 2A 0E F2 | 	cmp	local07, #0 wz
2348c     14 13 02 56 |  if_ne	mov	arg01, local06
23490     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
23494     00 42 0E F2 | 	cmp	local19, #0 wz
23498     00 12 06 A6 |  if_e	mov	arg01, #0
2349c     10 00 90 5D |  if_ne	jmp	#LR__3353
234a0     00 12 4E F2 | 	cmps	arg01, #0 wz
234a4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
234a8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
234ac     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
234b0                 | LR__3353
234b0     21 FB 01 F6 | 	mov	result1, local19
234b4                 | LR__3354
234b4     A7 F0 03 F6 | 	mov	ptra, fp
234b8     B2 00 A0 FD | 	call	#popregs_
234bc                 | __system___openraw_ret
234bc     2D 00 64 FD | 	ret
234c0                 | 
234c0                 | __system___closeraw
234c0     05 4A 05 F6 | 	mov	COUNT_, #5
234c4     A8 00 A0 FD | 	call	#pushregs_
234c8     09 1F 02 F6 | 	mov	local01, arg01
234cc     00 20 06 F6 | 	mov	local02, #0
234d0     08 1E 06 F1 | 	add	local01, #8
234d4     0F FB 09 FB | 	rdlong	result1, local01 wz
234d8     08 1E 86 F1 | 	sub	local01, #8
234dc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
234e0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
234e4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
234e8     01 FA 65 A6 |  if_e	neg	result1, #1
234ec     A8 00 90 AD |  if_e	jmp	#LR__3362
234f0     2C 1E 06 F1 | 	add	local01, #44
234f4     0F FB 09 FB | 	rdlong	result1, local01 wz
234f8     2C 1E 86 F1 | 	sub	local01, #44
234fc     38 00 90 AD |  if_e	jmp	#LR__3360
23500     2C 1E 06 F1 | 	add	local01, #44
23504     0F 23 02 FB | 	rdlong	local03, local01
23508     11 25 02 F6 | 	mov	local04, local03
2350c     2C 1E 86 F1 | 	sub	local01, #44
23510     13 24 46 F7 | 	zerox	local04, #19
23514     14 22 46 F0 | 	shr	local03, #20
23518     02 22 66 F0 | 	shl	local03, #2
2351c     ED 22 02 F1 | 	add	local03, __methods__
23520     11 23 02 FB | 	rdlong	local03, local03
23524     0F 13 02 F6 | 	mov	arg01, local01
23528     F2 26 02 F6 | 	mov	local05, objptr
2352c     12 E5 01 F6 | 	mov	objptr, local04
23530     2D 22 62 FD | 	call	local03
23534     13 E5 01 F6 | 	mov	objptr, local05
23538                 | LR__3360
23538     24 1E 06 F1 | 	add	local01, #36
2353c     0F 27 0A FB | 	rdlong	local05, local01 wz
23540     24 1E 86 F1 | 	sub	local01, #36
23544     3C 00 90 AD |  if_e	jmp	#LR__3361
23548     24 1E 06 F1 | 	add	local01, #36
2354c     0F 23 02 FB | 	rdlong	local03, local01
23550     11 25 02 F6 | 	mov	local04, local03
23554     24 1E 86 F1 | 	sub	local01, #36
23558     13 24 46 F7 | 	zerox	local04, #19
2355c     14 22 46 F0 | 	shr	local03, #20
23560     02 22 66 F0 | 	shl	local03, #2
23564     ED 22 02 F1 | 	add	local03, __methods__
23568     11 23 02 FB | 	rdlong	local03, local03
2356c     0F 13 02 F6 | 	mov	arg01, local01
23570     F2 26 02 F6 | 	mov	local05, objptr
23574     12 E5 01 F6 | 	mov	objptr, local04
23578     2D 22 62 FD | 	call	local03
2357c     13 E5 01 F6 | 	mov	objptr, local05
23580     FD 20 02 F6 | 	mov	local02, result1
23584                 | LR__3361
23584     0F 13 02 F6 | 	mov	arg01, local01
23588     00 14 06 F6 | 	mov	arg02, #0
2358c     34 16 06 F6 | 	mov	arg03, #52
23590     98 00 A0 FD | 	call	#\builtin_bytefill_
23594     10 FB 01 F6 | 	mov	result1, local02
23598                 | LR__3362
23598     A7 F0 03 F6 | 	mov	ptra, fp
2359c     B2 00 A0 FD | 	call	#popregs_
235a0                 | __system___closeraw_ret
235a0     2D 00 64 FD | 	ret
235a4                 | 
235a4                 | __system___vfs_open_sdcardx
235a4     0B 4A 05 F6 | 	mov	COUNT_, #11
235a8     A8 00 A0 FD | 	call	#pushregs_
235ac     09 23 02 F6 | 	mov	local03, arg01
235b0     0A 25 02 F6 | 	mov	local04, arg02
235b4     0B 27 02 F6 | 	mov	local05, arg03
235b8     0C 29 02 F6 | 	mov	local06, arg04
235bc     01 00 00 FF 
235c0     24 12 06 F6 | 	mov	arg01, ##548
235c4     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
235c8     FD 2A 02 F6 | 	mov	local07, result1
235cc     01 00 00 FF 
235d0     34 12 06 F6 | 	mov	arg01, ##564
235d4     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
235d8     FD 2C 02 F6 | 	mov	local08, result1
235dc     11 19 02 F6 | 	mov	arg04, local03
235e0     1F 18 C6 F0 | 	sar	arg04, #31
235e4     11 17 02 F6 | 	mov	arg03, local03
235e8     01 12 06 F6 | 	mov	arg01, #1
235ec     00 14 06 F6 | 	mov	arg02, #0
235f0     48 DC BF FD | 	call	#__system___int64_shl
235f4     FD 1E 02 F6 | 	mov	local01, result1
235f8     FE 2E 02 F6 | 	mov	local09, result2
235fc     12 19 02 F6 | 	mov	arg04, local04
23600     1F 18 C6 F0 | 	sar	arg04, #31
23604     12 17 02 F6 | 	mov	arg03, local04
23608     01 12 06 F6 | 	mov	arg01, #1
2360c     00 14 06 F6 | 	mov	arg02, #0
23610     28 DC BF FD | 	call	#__system___int64_shl
23614     FD 1E 42 F5 | 	or	local01, result1
23618     FE 2E 42 F5 | 	or	local09, result2
2361c     13 19 02 F6 | 	mov	arg04, local05
23620     1F 18 C6 F0 | 	sar	arg04, #31
23624     13 17 02 F6 | 	mov	arg03, local05
23628     01 12 06 F6 | 	mov	arg01, #1
2362c     00 14 06 F6 | 	mov	arg02, #0
23630     08 DC BF FD | 	call	#__system___int64_shl
23634     FD 1E 42 F5 | 	or	local01, result1
23638     FE 2E 42 F5 | 	or	local09, result2
2363c     14 19 02 F6 | 	mov	arg04, local06
23640     1F 18 C6 F0 | 	sar	arg04, #31
23644     14 17 02 F6 | 	mov	arg03, local06
23648     01 12 06 F6 | 	mov	arg01, #1
2364c     00 14 06 F6 | 	mov	arg02, #0
23650     E8 DB BF FD | 	call	#__system___int64_shl
23654     17 15 02 F6 | 	mov	arg02, local09
23658     FD 1E 42 F5 | 	or	local01, result1
2365c     0A FD 41 F5 | 	or	result2, arg02
23660     FE 20 02 F6 | 	mov	local02, result2
23664     0F 13 02 F6 | 	mov	arg01, local01
23668     10 15 02 F6 | 	mov	arg02, local02
2366c     04 DC BF FD | 	call	#__system___usepins
23670     00 FA 0D F2 | 	cmp	result1, #0 wz
23674     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
23678     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
2367c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
23680     00 FA 05 A6 |  if_e	mov	result1, #0
23684     B4 00 90 AD |  if_e	jmp	#LR__3372
23688     0F 31 02 F6 | 	mov	local10, local01
2368c     10 2F 02 F6 | 	mov	local09, local02
23690     01 00 00 FF 
23694     08 2A 06 F1 | 	add	local07, ##520
23698     15 31 62 FC | 	wrlong	local10, local07
2369c     04 2A 06 F1 | 	add	local07, #4
236a0     15 2F 62 FC | 	wrlong	local09, local07
236a4     01 00 00 FF 
236a8     0C 2A 86 F1 | 	sub	local07, ##524
236ac     14 1B 02 F6 | 	mov	arg05, local06
236b0     00 12 06 F6 | 	mov	arg01, #0
236b4     11 15 02 F6 | 	mov	arg02, local03
236b8     12 17 02 F6 | 	mov	arg03, local04
236bc     13 19 02 F6 | 	mov	arg04, local05
236c0     F2 30 02 F6 | 	mov	local10, objptr
236c4     15 E5 01 F6 | 	mov	objptr, local07
236c8     7C 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
236cc     18 E5 01 F6 | 	mov	objptr, local10
236d0     FD 32 0A F6 | 	mov	local11, result1 wz
236d4     24 00 90 5D |  if_ne	jmp	#LR__3370
236d8     70 01 00 FF 
236dc     92 15 06 F6 | 	mov	arg02, ##@LR__4767
236e0     16 13 02 F6 | 	mov	arg01, local08
236e4     00 16 06 F6 | 	mov	arg03, #0
236e8     F2 32 02 F6 | 	mov	local11, objptr
236ec     15 E5 01 F6 | 	mov	objptr, local07
236f0     AC 5E B0 FD | 	call	#_fatfs_cc_f_mount
236f4     19 E5 01 F6 | 	mov	objptr, local11
236f8     FD 32 02 F6 | 	mov	local11, result1
236fc                 | LR__3370
236fc     00 32 0E F2 | 	cmp	local11, #0 wz
23700     24 00 90 AD |  if_e	jmp	#LR__3371
23704     0F 13 02 F6 | 	mov	arg01, local01
23708     10 15 02 F6 | 	mov	arg02, local02
2370c     B8 DB BF FD | 	call	#__system___freepins
23710     19 13 6A F6 | 	neg	arg01, local11 wz
23714     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23718     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2371c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23720     00 FA 05 F6 | 	mov	result1, #0
23724     14 00 90 FD | 	jmp	#LR__3372
23728                 | LR__3371
23728     15 13 02 F6 | 	mov	arg01, local07
2372c     F2 32 02 F6 | 	mov	local11, objptr
23730     15 E5 01 F6 | 	mov	objptr, local07
23734     48 9B B0 FD | 	call	#_fatfs_cc_get_vfs
23738     19 E5 01 F6 | 	mov	objptr, local11
2373c                 | LR__3372
2373c     A7 F0 03 F6 | 	mov	ptra, fp
23740     B2 00 A0 FD | 	call	#popregs_
23744                 | __system___vfs_open_sdcardx_ret
23744     2D 00 64 FD | 	ret
23748                 | 
23748                 | __system____default_getc
23748     03 4A 05 F6 | 	mov	COUNT_, #3
2374c     A8 00 A0 FD | 	call	#pushregs_
23750     09 1F 02 F6 | 	mov	local01, arg01
23754     0F 21 02 FB | 	rdlong	local02, local01
23758     08 20 06 F1 | 	add	local02, #8
2375c     10 23 02 FB | 	rdlong	local03, local02
23760     02 22 CE F7 | 	test	local03, #2 wz
23764     0F 13 02 56 |  if_ne	mov	arg01, local01
23768     00 01 B0 5D |  if_ne	call	#__system____default_flush
2376c     10 23 02 FB | 	rdlong	local03, local02
23770     01 22 46 F5 | 	or	local03, #1
23774     10 23 62 FC | 	wrlong	local03, local02
23778     08 20 86 F1 | 	sub	local02, #8
2377c     10 23 0A FB | 	rdlong	local03, local02 wz
23780     0C 00 90 5D |  if_ne	jmp	#LR__3380
23784     0F 13 02 F6 | 	mov	arg01, local01
23788     64 16 B0 FD | 	call	#__system____default_filbuf
2378c     FD 22 02 F6 | 	mov	local03, result1
23790                 | LR__3380
23790     01 22 56 F2 | 	cmps	local03, #1 wc
23794     01 FA 65 C6 |  if_b	neg	result1, #1
23798     1C 00 90 CD |  if_b	jmp	#LR__3381
2379c     01 22 86 F1 | 	sub	local03, #1
237a0     10 23 62 FC | 	wrlong	local03, local02
237a4     04 20 06 F1 | 	add	local02, #4
237a8     10 23 02 FB | 	rdlong	local03, local02
237ac     11 FB C1 FA | 	rdbyte	result1, local03
237b0     01 22 06 F1 | 	add	local03, #1
237b4     10 23 62 FC | 	wrlong	local03, local02
237b8                 | LR__3381
237b8     A7 F0 03 F6 | 	mov	ptra, fp
237bc     B2 00 A0 FD | 	call	#popregs_
237c0                 | __system____default_getc_ret
237c0     2D 00 64 FD | 	ret
237c4                 | 
237c4                 | __system____default_putc
237c4     06 4A 05 F6 | 	mov	COUNT_, #6
237c8     A8 00 A0 FD | 	call	#pushregs_
237cc     09 1F 02 F6 | 	mov	local01, arg01
237d0     0A 21 02 F6 | 	mov	local02, arg02
237d4     10 23 02 FB | 	rdlong	local03, local02
237d8     08 22 06 F1 | 	add	local03, #8
237dc     11 FB 01 FB | 	rdlong	result1, local03
237e0     01 FA CD F7 | 	test	result1, #1 wz
237e4     10 13 02 56 |  if_ne	mov	arg01, local02
237e8     80 00 B0 5D |  if_ne	call	#__system____default_flush
237ec     11 25 02 FB | 	rdlong	local04, local03
237f0     02 24 46 F5 | 	or	local04, #2
237f4     11 25 62 FC | 	wrlong	local04, local03
237f8     08 22 86 F1 | 	sub	local03, #8
237fc     11 27 02 FB | 	rdlong	local05, local03
23800     10 22 06 F1 | 	add	local03, #16
23804     11 15 02 FB | 	rdlong	arg02, local03
23808     10 22 86 F1 | 	sub	local03, #16
2380c     13 FB 01 F6 | 	mov	result1, local05
23810     0A FB 01 F1 | 	add	result1, arg02
23814     FD 1E 42 FC | 	wrbyte	local01, result1
23818     0F 1F E2 F8 | 	getbyte	local01, local01, #0
2381c     01 26 06 F1 | 	add	local05, #1
23820     11 27 62 FC | 	wrlong	local05, local03
23824     06 20 06 F1 | 	add	local02, #6
23828     10 29 EA FA | 	rdword	local06, local02 wz
2382c     06 20 86 F1 | 	sub	local02, #6
23830     0C 22 06 51 |  if_ne	add	local03, #12
23834     11 25 02 5B |  if_ne	rdlong	local04, local03
23838     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
2383c     0C 00 90 AD |  if_e	jmp	#LR__3390
23840     0A 1E 0E F2 | 	cmp	local01, #10 wz
23844     01 28 0E A2 |  if_e	cmp	local06, #1 wz
23848     10 00 90 5D |  if_ne	jmp	#LR__3391
2384c                 | LR__3390
2384c     10 13 02 F6 | 	mov	arg01, local02
23850     18 00 B0 FD | 	call	#__system____default_flush
23854     00 FA 0D F2 | 	cmp	result1, #0 wz
23858     01 1E 66 56 |  if_ne	neg	local01, #1
2385c                 | LR__3391
2385c     0F FB 01 F6 | 	mov	result1, local01
23860     A7 F0 03 F6 | 	mov	ptra, fp
23864     B2 00 A0 FD | 	call	#popregs_
23868                 | __system____default_putc_ret
23868     2D 00 64 FD | 	ret
2386c                 | 
2386c                 | __system____default_flush
2386c     06 4A 05 F6 | 	mov	COUNT_, #6
23870     A8 00 A0 FD | 	call	#pushregs_
23874     09 1F 02 F6 | 	mov	local01, arg01
23878     0F 21 02 FB | 	rdlong	local02, local01
2387c     10 23 02 FB | 	rdlong	local03, local02
23880     08 20 06 F1 | 	add	local02, #8
23884     10 FB 01 FB | 	rdlong	result1, local02
23888     08 20 86 F1 | 	sub	local02, #8
2388c     02 FA CD F7 | 	test	result1, #2 wz
23890     D0 00 90 AD |  if_e	jmp	#LR__3402
23894     01 22 56 F2 | 	cmps	local03, #1 wc
23898     20 01 90 CD |  if_b	jmp	#LR__3404
2389c     08 1E 06 F1 | 	add	local01, #8
238a0     0F FB 01 FB | 	rdlong	result1, local01
238a4     08 1E 86 F1 | 	sub	local01, #8
238a8     40 FA CD F7 | 	test	result1, #64 wz
238ac     68 00 90 AD |  if_e	jmp	#LR__3401
238b0     08 1E 06 F1 | 	add	local01, #8
238b4     0F 17 02 FB | 	rdlong	arg03, local01
238b8     08 1E 86 F1 | 	sub	local01, #8
238bc     80 16 CE F7 | 	test	arg03, #128 wz
238c0     54 00 90 AD |  if_e	jmp	#LR__3400
238c4     30 1E 06 F1 | 	add	local01, #48
238c8     0F 25 02 FB | 	rdlong	local04, local01
238cc     12 27 02 F6 | 	mov	local05, local04
238d0     30 1E 86 F1 | 	sub	local01, #48
238d4     13 26 46 F7 | 	zerox	local05, #19
238d8     14 24 46 F0 | 	shr	local04, #20
238dc     02 24 66 F0 | 	shl	local04, #2
238e0     ED 24 02 F1 | 	add	local04, __methods__
238e4     12 25 02 FB | 	rdlong	local04, local04
238e8     0F 13 02 F6 | 	mov	arg01, local01
238ec     00 14 06 F6 | 	mov	arg02, #0
238f0     02 16 06 F6 | 	mov	arg03, #2
238f4     F2 28 02 F6 | 	mov	local06, objptr
238f8     13 E5 01 F6 | 	mov	objptr, local05
238fc     2D 24 62 FD | 	call	local04
23900     14 E5 01 F6 | 	mov	objptr, local06
23904     08 1E 06 F1 | 	add	local01, #8
23908     0F 29 02 FB | 	rdlong	local06, local01
2390c     80 28 26 F5 | 	andn	local06, #128
23910     0F 29 62 FC | 	wrlong	local06, local01
23914     08 1E 86 F1 | 	sub	local01, #8
23918                 | LR__3400
23918                 | LR__3401
23918     18 1E 06 F1 | 	add	local01, #24
2391c     0F 25 02 FB | 	rdlong	local04, local01
23920     12 27 02 F6 | 	mov	local05, local04
23924     18 1E 86 F1 | 	sub	local01, #24
23928     13 26 46 F7 | 	zerox	local05, #19
2392c     14 24 46 F0 | 	shr	local04, #20
23930     02 24 66 F0 | 	shl	local04, #2
23934     ED 24 02 F1 | 	add	local04, __methods__
23938     12 25 02 FB | 	rdlong	local04, local04
2393c     10 20 06 F1 | 	add	local02, #16
23940     10 15 02 FB | 	rdlong	arg02, local02
23944     10 20 86 F1 | 	sub	local02, #16
23948     0F 13 02 F6 | 	mov	arg01, local01
2394c     11 17 02 F6 | 	mov	arg03, local03
23950     F2 28 02 F6 | 	mov	local06, objptr
23954     13 E5 01 F6 | 	mov	objptr, local05
23958     2D 24 62 FD | 	call	local04
2395c     14 E5 01 F6 | 	mov	objptr, local06
23960     58 00 90 FD | 	jmp	#LR__3404
23964                 | LR__3402
23964     08 20 06 F1 | 	add	local02, #8
23968     10 29 02 FB | 	rdlong	local06, local02
2396c     08 20 86 F1 | 	sub	local02, #8
23970     01 28 CE F7 | 	test	local06, #1 wz
23974     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
23978     40 00 90 AD |  if_e	jmp	#LR__3403
2397c     30 1E 06 F1 | 	add	local01, #48
23980     0F 25 02 FB | 	rdlong	local04, local01
23984     12 27 02 F6 | 	mov	local05, local04
23988     30 1E 86 F1 | 	sub	local01, #48
2398c     13 26 46 F7 | 	zerox	local05, #19
23990     14 24 46 F0 | 	shr	local04, #20
23994     02 24 66 F0 | 	shl	local04, #2
23998     ED 24 02 F1 | 	add	local04, __methods__
2399c     12 25 02 FB | 	rdlong	local04, local04
239a0     0F 13 02 F6 | 	mov	arg01, local01
239a4     11 15 62 F6 | 	neg	arg02, local03
239a8     01 16 06 F6 | 	mov	arg03, #1
239ac     F2 28 02 F6 | 	mov	local06, objptr
239b0     13 E5 01 F6 | 	mov	objptr, local05
239b4     2D 24 62 FD | 	call	local04
239b8     14 E5 01 F6 | 	mov	objptr, local06
239bc                 | LR__3403
239bc                 | LR__3404
239bc     10 01 68 FC | 	wrlong	#0, local02
239c0     04 20 06 F1 | 	add	local02, #4
239c4     10 01 68 FC | 	wrlong	#0, local02
239c8     04 20 06 F1 | 	add	local02, #4
239cc     10 01 68 FC | 	wrlong	#0, local02
239d0     00 FA 05 F6 | 	mov	result1, #0
239d4     A7 F0 03 F6 | 	mov	ptra, fp
239d8     B2 00 A0 FD | 	call	#popregs_
239dc                 | __system____default_flush_ret
239dc     2D 00 64 FD | 	ret
239e0                 | 
239e0                 | __system____default_buffer_init
239e0     02 4A 05 F6 | 	mov	COUNT_, #2
239e4     A8 00 A0 FD | 	call	#pushregs_
239e8     09 1F 02 F6 | 	mov	local01, arg01
239ec     0F 21 02 FB | 	rdlong	local02, local01
239f0     0F 13 02 F6 | 	mov	arg01, local01
239f4     F8 02 B0 FD | 	call	#__system___isatty
239f8     00 FA 0D F2 | 	cmp	result1, #0 wz
239fc     06 1E 06 51 |  if_ne	add	local01, #6
23a00     0F 0B 58 5C |  if_ne	wrword	#5, local01
23a04     06 1E 06 A1 |  if_e	add	local01, #6
23a08     0F 0D 58 AC |  if_e	wrword	#6, local01
23a0c     14 20 06 F1 | 	add	local02, #20
23a10     10 1F 02 F6 | 	mov	local01, local02
23a14     04 20 86 F1 | 	sub	local02, #4
23a18     10 1F 62 FC | 	wrlong	local01, local02
23a1c     04 20 86 F1 | 	sub	local02, #4
23a20     02 00 80 FF 
23a24     10 01 68 FC | 	wrlong	##1024, local02
23a28     00 FA 05 F6 | 	mov	result1, #0
23a2c     A7 F0 03 F6 | 	mov	ptra, fp
23a30     B2 00 A0 FD | 	call	#popregs_
23a34                 | __system____default_buffer_init_ret
23a34     2D 00 64 FD | 	ret
23a38                 | 
23a38                 | __system__stat
23a38     04 4A 05 F6 | 	mov	COUNT_, #4
23a3c     A8 00 A0 FD | 	call	#pushregs_
23a40     0A 1F 02 F6 | 	mov	local01, arg02
23a44     84 E7 05 F1 | 	add	ptr___system__dat__, #388
23a48     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
23a4c     09 15 02 F6 | 	mov	arg02, arg01
23a50     10 13 02 F6 | 	mov	arg01, local02
23a54     00 16 06 F6 | 	mov	arg03, #0
23a58     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
23a5c     AC B8 BF FD | 	call	#__system____getvfsforfile
23a60     FD 22 0A F6 | 	mov	local03, result1 wz
23a64     10 00 90 AD |  if_e	jmp	#LR__3410
23a68     34 22 06 F1 | 	add	local03, #52
23a6c     11 17 0A FB | 	rdlong	arg03, local03 wz
23a70     34 22 86 F1 | 	sub	local03, #52
23a74     14 00 90 5D |  if_ne	jmp	#LR__3411
23a78                 | LR__3410
23a78     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23a7c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
23a80     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23a84     01 FA 65 F6 | 	neg	result1, #1
23a88     68 00 90 FD | 	jmp	#LR__3412
23a8c                 | LR__3411
23a8c     0F 13 02 F6 | 	mov	arg01, local01
23a90     00 14 06 F6 | 	mov	arg02, #0
23a94     30 16 06 F6 | 	mov	arg03, #48
23a98     09 25 02 F6 | 	mov	local04, arg01
23a9c     98 00 A0 FD | 	call	#\builtin_bytefill_
23aa0     12 FB 01 F6 | 	mov	result1, local04
23aa4     10 13 CA FA | 	rdbyte	arg01, local02 wz
23aa8     08 1E 06 A1 |  if_e	add	local01, #8
23aac     08 00 80 AF 
23ab0     0F FF 6B AC |  if_e	wrlong	##4607, local01
23ab4     00 FA 05 A6 |  if_e	mov	result1, #0
23ab8     38 00 90 AD |  if_e	jmp	#LR__3412
23abc     34 22 06 F1 | 	add	local03, #52
23ac0     11 23 02 FB | 	rdlong	local03, local03
23ac4     11 25 02 F6 | 	mov	local04, local03
23ac8     13 22 46 F7 | 	zerox	local03, #19
23acc     14 24 46 F0 | 	shr	local04, #20
23ad0     02 24 66 F0 | 	shl	local04, #2
23ad4     ED 24 02 F1 | 	add	local04, __methods__
23ad8     12 25 02 FB | 	rdlong	local04, local04
23adc     10 13 02 F6 | 	mov	arg01, local02
23ae0     0F 15 02 F6 | 	mov	arg02, local01
23ae4     F2 20 02 F6 | 	mov	local02, objptr
23ae8     11 E5 01 F6 | 	mov	objptr, local03
23aec     2D 24 62 FD | 	call	local04
23af0     10 E5 01 F6 | 	mov	objptr, local02
23af4                 | LR__3412
23af4     A7 F0 03 F6 | 	mov	ptra, fp
23af8     B2 00 A0 FD | 	call	#popregs_
23afc                 | __system__stat_ret
23afc     2D 00 64 FD | 	ret
23b00                 | 
23b00                 | __system__read
23b00     0A 12 16 F2 | 	cmp	arg01, #10 wc
23b04     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
23b08     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
23b0c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
23b10     01 FA 65 36 |  if_ae	neg	result1, #1
23b14     20 00 90 3D |  if_ae	jmp	#LR__3420
23b18     34 12 06 FD | 	qmul	arg01, #52
23b1c     02 00 00 FF 
23b20     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
23b24     18 12 62 FD | 	getqx	arg01
23b28     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
23b2c     02 00 00 FF 
23b30     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
23b34     D0 0F B0 FD | 	call	#__system___vfsread
23b38                 | LR__3420
23b38                 | __system__read_ret
23b38     2D 00 64 FD | 	ret
23b3c                 | 
23b3c                 | __system__close
23b3c     0A 12 16 F2 | 	cmp	arg01, #10 wc
23b40     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
23b44     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
23b48     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
23b4c     01 FA 65 36 |  if_ae	neg	result1, #1
23b50     20 00 90 3D |  if_ae	jmp	#LR__3430
23b54     34 12 06 FD | 	qmul	arg01, #52
23b58     02 00 00 FF 
23b5c     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
23b60     18 12 62 FD | 	getqx	arg01
23b64     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
23b68     02 00 00 FF 
23b6c     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
23b70     4C F9 BF FD | 	call	#__system___closeraw
23b74                 | LR__3430
23b74                 | __system__close_ret
23b74     2D 00 64 FD | 	ret
23b78                 | 
23b78                 | __system__lseek
23b78     06 4A 05 F6 | 	mov	COUNT_, #6
23b7c     A8 00 A0 FD | 	call	#pushregs_
23b80     0A 12 16 F2 | 	cmp	arg01, #10 wc
23b84     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
23b88     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
23b8c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
23b90     01 FA 65 36 |  if_ae	neg	result1, #1
23b94     C4 00 90 3D |  if_ae	jmp	#LR__3441
23b98     34 12 06 FD | 	qmul	arg01, #52
23b9c     02 00 00 FF 
23ba0     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
23ba4     18 1E 62 FD | 	getqx	local01
23ba8     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
23bac     30 1E 06 F1 | 	add	local01, #48
23bb0     0F 13 0A FB | 	rdlong	arg01, local01 wz
23bb4     30 1E 86 F1 | 	sub	local01, #48
23bb8     02 00 00 FF 
23bbc     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
23bc0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
23bc4     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
23bc8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
23bcc     01 FA 65 A6 |  if_e	neg	result1, #1
23bd0     88 00 90 AD |  if_e	jmp	#LR__3441
23bd4     08 1E 06 F1 | 	add	local01, #8
23bd8     0F 21 02 FB | 	rdlong	local02, local01
23bdc     08 1E 86 F1 | 	sub	local01, #8
23be0     40 20 CE F7 | 	test	local02, #64 wz
23be4     08 1E 06 51 |  if_ne	add	local01, #8
23be8     0F 21 02 5B |  if_ne	rdlong	local02, local01
23bec     80 20 46 55 |  if_ne	or	local02, #128
23bf0     0F 21 62 5C |  if_ne	wrlong	local02, local01
23bf4     08 1E 86 51 |  if_ne	sub	local01, #8
23bf8     30 1E 06 F1 | 	add	local01, #48
23bfc     0F 23 02 FB | 	rdlong	local03, local01
23c00     11 25 02 F6 | 	mov	local04, local03
23c04     30 1E 86 F1 | 	sub	local01, #48
23c08     13 24 46 F7 | 	zerox	local04, #19
23c0c     14 22 46 F0 | 	shr	local03, #20
23c10     02 22 66 F0 | 	shl	local03, #2
23c14     ED 22 02 F1 | 	add	local03, __methods__
23c18     11 23 02 FB | 	rdlong	local03, local03
23c1c     0F 13 02 F6 | 	mov	arg01, local01
23c20     F2 26 02 F6 | 	mov	local05, objptr
23c24     12 E5 01 F6 | 	mov	objptr, local04
23c28     2D 22 62 FD | 	call	local03
23c2c     13 E5 01 F6 | 	mov	objptr, local05
23c30     FD 28 02 F6 | 	mov	local06, result1
23c34     00 28 56 F2 | 	cmps	local06, #0 wc
23c38     1C 00 90 3D |  if_ae	jmp	#LR__3440
23c3c     14 13 6A F6 | 	neg	arg01, local06 wz
23c40     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23c44     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
23c48     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23c4c     01 FA 65 56 |  if_ne	neg	result1, #1
23c50     00 FA 05 A6 |  if_e	mov	result1, #0
23c54     04 00 90 FD | 	jmp	#LR__3441
23c58                 | LR__3440
23c58     14 FB 01 F6 | 	mov	result1, local06
23c5c                 | LR__3441
23c5c     A7 F0 03 F6 | 	mov	ptra, fp
23c60     B2 00 A0 FD | 	call	#popregs_
23c64                 | __system__lseek_ret
23c64     2D 00 64 FD | 	ret
23c68                 | 
23c68                 | __system___ioctl
23c68     03 4A 05 F6 | 	mov	COUNT_, #3
23c6c     A8 00 A0 FD | 	call	#pushregs_
23c70     00 12 4E F2 | 	cmps	arg01, #0 wz
23c74     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
23c78     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
23c7c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
23c80     01 FA 65 A6 |  if_e	neg	result1, #1
23c84     5C 00 90 AD |  if_e	jmp	#LR__3451
23c88     28 12 06 F1 | 	add	arg01, #40
23c8c     09 1F 02 FB | 	rdlong	local01, arg01
23c90     0F 21 02 F6 | 	mov	local02, local01
23c94     28 12 86 F1 | 	sub	arg01, #40
23c98     13 20 46 F7 | 	zerox	local02, #19
23c9c     14 1E 46 F0 | 	shr	local01, #20
23ca0     02 1E 66 F0 | 	shl	local01, #2
23ca4     ED 1E 02 F1 | 	add	local01, __methods__
23ca8     0F 1F 02 FB | 	rdlong	local01, local01
23cac     F2 22 02 F6 | 	mov	local03, objptr
23cb0     10 E5 01 F6 | 	mov	objptr, local02
23cb4     2D 1E 62 FD | 	call	local01
23cb8     11 E5 01 F6 | 	mov	objptr, local03
23cbc     FD 12 0A F6 | 	mov	arg01, result1 wz
23cc0     1C 00 90 AD |  if_e	jmp	#LR__3450
23cc4     00 12 4E F2 | 	cmps	arg01, #0 wz
23cc8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23ccc     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
23cd0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23cd4     01 FA 65 56 |  if_ne	neg	result1, #1
23cd8     00 FA 05 A6 |  if_e	mov	result1, #0
23cdc     04 00 90 FD | 	jmp	#LR__3451
23ce0                 | LR__3450
23ce0     00 FA 05 F6 | 	mov	result1, #0
23ce4                 | LR__3451
23ce4     A7 F0 03 F6 | 	mov	ptra, fp
23ce8     B2 00 A0 FD | 	call	#popregs_
23cec                 | __system___ioctl_ret
23cec     2D 00 64 FD | 	ret
23cf0                 | 
23cf0                 | __system___isatty
23cf0     00 4A 05 F6 | 	mov	COUNT_, #0
23cf4     A8 00 A0 FD | 	call	#pushregs_
23cf8     0C F0 07 F1 | 	add	ptra, #12
23cfc     04 4E 05 F1 | 	add	fp, #4
23d00     A7 12 62 FC | 	wrlong	arg01, fp
23d04     04 4E 05 F1 | 	add	fp, #4
23d08     A7 16 02 F6 | 	mov	arg03, fp
23d0c     08 4E 85 F1 | 	sub	fp, #8
23d10     00 15 06 F6 | 	mov	arg02, #256
23d14     50 FF BF FD | 	call	#__system___ioctl
23d18     00 FA 0D F2 | 	cmp	result1, #0 wz
23d1c     01 FA 05 A6 |  if_e	mov	result1, #1
23d20     00 FA 05 56 |  if_ne	mov	result1, #0
23d24     A7 F0 03 F6 | 	mov	ptra, fp
23d28     B2 00 A0 FD | 	call	#popregs_
23d2c                 | __system___isatty_ret
23d2c     2D 00 64 FD | 	ret
23d30                 | 
23d30                 | __system____getftab
23d30     0A 12 16 F2 | 	cmp	arg01, #10 wc
23d34     34 12 06 CD |  if_b	qmul	arg01, #52
23d38     00 FA 05 36 |  if_ae	mov	result1, #0
23d3c     02 00 00 CF 
23d40     20 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1312
23d44     18 FA 61 CD |  if_b	getqx	result1
23d48     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
23d4c     02 00 00 CF 
23d50     20 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
23d54                 | __system____getftab_ret
23d54     2D 00 64 FD | 	ret
23d58                 | 
23d58                 | __system__strncpy
23d58     09 01 02 F6 | 	mov	_var01, arg01
23d5c                 | LR__3460
23d5c     01 16 86 F1 | 	sub	arg03, #1
23d60     00 16 56 F2 | 	cmps	arg03, #0 wc
23d64     18 00 90 CD |  if_b	jmp	#LR__3461
23d68     0A FB C1 FA | 	rdbyte	result1, arg02
23d6c     00 FB 41 FC | 	wrbyte	result1, _var01
23d70     01 14 06 F1 | 	add	arg02, #1
23d74     00 FB C9 FA | 	rdbyte	result1, _var01 wz
23d78     01 00 06 F1 | 	add	_var01, #1
23d7c     DC FF 9F 5D |  if_ne	jmp	#LR__3460
23d80                 | LR__3461
23d80     97 0C 48 FB | 	callpa	#(@LR__3463-@LR__3462)>>2,fcache_load_ptr_
23d84                 | LR__3462
23d84     01 16 86 F1 | 	sub	arg03, #1
23d88     00 16 56 F2 | 	cmps	arg03, #0 wc
23d8c     00 03 02 36 |  if_ae	mov	_var02, _var01
23d90     01 00 06 31 |  if_ae	add	_var01, #1
23d94     01 01 48 3C |  if_ae	wrbyte	#0, _var02
23d98     E8 FF 9F 3D |  if_ae	jmp	#LR__3462
23d9c                 | LR__3463
23d9c     09 FB 01 F6 | 	mov	result1, arg01
23da0                 | __system__strncpy_ret
23da0     2D 00 64 FD | 	ret
23da4                 | 
23da4                 | __system__strncat
23da4     00 14 4E F2 | 	cmps	arg02, #0 wz
23da8     50 00 90 AD |  if_e	jmp	#LR__3474
23dac     01 16 16 F2 | 	cmp	arg03, #1 wc
23db0     48 00 90 CD |  if_b	jmp	#LR__3474
23db4     09 01 02 F6 | 	mov	_var01, arg01
23db8     97 1E 48 FB | 	callpa	#(@LR__3472-@LR__3470)>>2,fcache_load_ptr_
23dbc                 | LR__3470
23dbc     00 FB C9 FA | 	rdbyte	result1, _var01 wz
23dc0     01 00 06 51 |  if_ne	add	_var01, #1
23dc4     F4 FF 9F 5D |  if_ne	jmp	#LR__3470
23dc8     0B 03 02 F6 | 	mov	_var02, arg03
23dcc                 | LR__3471
23dcc     0A 05 C2 FA | 	rdbyte	_var03, arg02
23dd0     02 07 02 F6 | 	mov	_var04, _var03
23dd4     07 06 4E F7 | 	zerox	_var04, #7 wz
23dd8     01 14 06 F1 | 	add	arg02, #1
23ddc     18 00 90 AD |  if_e	jmp	#LR__3473
23de0     01 02 86 F1 | 	sub	_var02, #1
23de4     00 02 56 F2 | 	cmps	_var02, #0 wc
23de8     00 07 02 36 |  if_ae	mov	_var04, _var01
23dec     01 00 06 31 |  if_ae	add	_var01, #1
23df0     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
23df4     D4 FF 9F 3D |  if_ae	jmp	#LR__3471
23df8                 | LR__3472
23df8                 | LR__3473
23df8     00 01 48 FC | 	wrbyte	#0, _var01
23dfc                 | LR__3474
23dfc     09 FB 01 F6 | 	mov	result1, arg01
23e00                 | __system__strncat_ret
23e00     2D 00 64 FD | 	ret
23e04                 | 
23e04                 | __system__strncmp
23e04     09 01 0A F6 | 	mov	_var01, arg01 wz
23e08     14 00 90 5D |  if_ne	jmp	#LR__3480
23e0c     00 14 0E F2 | 	cmp	arg02, #0 wz
23e10     01 02 66 56 |  if_ne	neg	_var02, #1
23e14     00 02 06 A6 |  if_e	mov	_var02, #0
23e18     01 FB 01 F6 | 	mov	result1, _var02
23e1c     74 00 90 FD | 	jmp	#__system__strncmp_ret
23e20                 | LR__3480
23e20     00 14 0E F2 | 	cmp	arg02, #0 wz
23e24     01 FA 05 A6 |  if_e	mov	result1, #1
23e28     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
23e2c     0B 05 02 F6 | 	mov	_var03, arg03
23e30     97 16 48 FB | 	callpa	#(@LR__3482-@LR__3481)>>2,fcache_load_ptr_
23e34                 | LR__3481
23e34     00 07 C2 FA | 	rdbyte	_var04, _var01
23e38     0A 09 02 F6 | 	mov	_var05, arg02
23e3c     04 0B C2 FA | 	rdbyte	_var06, _var05
23e40     01 04 86 F1 | 	sub	_var03, #1
23e44     00 04 56 F2 | 	cmps	_var03, #0 wc
23e48     01 00 06 F1 | 	add	_var01, #1
23e4c     01 14 06 F1 | 	add	arg02, #1
23e50     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
23e54     08 00 90 2D |  if_nc_and_z	jmp	#LR__3483
23e58     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
23e5c     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3481
23e60                 | LR__3482
23e60                 | LR__3483
23e60     00 04 56 F2 | 	cmps	_var03, #0 wc
23e64     00 FA 05 C6 |  if_b	mov	result1, #0
23e68     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
23e6c     05 07 0A F2 | 	cmp	_var04, _var06 wz
23e70     00 FA 05 A6 |  if_e	mov	result1, #0
23e74     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
23e78     00 06 0E F2 | 	cmp	_var04, #0 wz
23e7c     01 FA 65 A6 |  if_e	neg	result1, #1
23e80     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
23e84     00 0A 0E F2 | 	cmp	_var06, #0 wz
23e88     01 FA 05 A6 |  if_e	mov	result1, #1
23e8c     03 FB 01 56 |  if_ne	mov	result1, _var04
23e90     05 FB 81 51 |  if_ne	sub	result1, _var06
23e94                 | __system__strncmp_ret
23e94     2D 00 64 FD | 	ret
23e98                 | 
23e98                 | __system____root_opendir
23e98     64 E6 05 F1 | 	add	ptr___system__dat__, #100
23e9c     04 12 06 F1 | 	add	arg01, #4
23ea0     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
23ea4     00 FA 05 F6 | 	mov	result1, #0
23ea8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
23eac                 | __system____root_opendir_ret
23eac     2D 00 64 FD | 	ret
23eb0                 | 
23eb0                 | __system____root_readdir
23eb0     03 4A 05 F6 | 	mov	COUNT_, #3
23eb4     A8 00 A0 FD | 	call	#pushregs_
23eb8     09 1F 02 F6 | 	mov	local01, arg01
23ebc     0A 21 02 F6 | 	mov	local02, arg02
23ec0     04 1E 06 F1 | 	add	local01, #4
23ec4     0F 23 02 FB | 	rdlong	local03, local01
23ec8     04 1E 86 F1 | 	sub	local01, #4
23ecc                 | LR__3490
23ecc     74 E6 05 F1 | 	add	ptr___system__dat__, #116
23ed0     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
23ed4     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
23ed8     01 FA 65 A6 |  if_e	neg	result1, #1
23edc     48 00 90 AD |  if_e	jmp	#LR__3491
23ee0     11 17 0A FB | 	rdlong	arg03, local03 wz
23ee4     04 22 06 A1 |  if_e	add	local03, #4
23ee8     E0 FF 9F AD |  if_e	jmp	#LR__3490
23eec     11 15 02 FB | 	rdlong	arg02, local03
23ef0     01 14 06 F1 | 	add	arg02, #1
23ef4     10 13 02 F6 | 	mov	arg01, local02
23ef8     40 16 06 F6 | 	mov	arg03, #64
23efc     58 FE BF FD | 	call	#__system__strncpy
23f00     50 20 06 F1 | 	add	local02, #80
23f04     10 03 48 FC | 	wrbyte	#1, local02
23f08     08 20 86 F1 | 	sub	local02, #8
23f0c     10 01 68 FC | 	wrlong	#0, local02
23f10     04 20 06 F1 | 	add	local02, #4
23f14     10 01 68 FC | 	wrlong	#0, local02
23f18     04 22 06 F1 | 	add	local03, #4
23f1c     04 1E 06 F1 | 	add	local01, #4
23f20     0F 23 62 FC | 	wrlong	local03, local01
23f24     00 FA 05 F6 | 	mov	result1, #0
23f28                 | LR__3491
23f28     A7 F0 03 F6 | 	mov	ptra, fp
23f2c     B2 00 A0 FD | 	call	#popregs_
23f30                 | __system____root_readdir_ret
23f30     2D 00 64 FD | 	ret
23f34                 | 
23f34                 | __system____root_closedir
23f34     00 FA 05 F6 | 	mov	result1, #0
23f38                 | __system____root_closedir_ret
23f38     2D 00 64 FD | 	ret
23f3c                 | 
23f3c                 | __system____root_stat
23f3c     0A 01 02 F6 | 	mov	_var01, arg02
23f40     00 13 02 F6 | 	mov	arg01, _var01
23f44     00 14 06 F6 | 	mov	arg02, #0
23f48     30 16 06 F6 | 	mov	arg03, #48
23f4c     98 00 A0 FD | 	call	#\builtin_bytefill_
23f50     08 00 06 F1 | 	add	_var01, #8
23f54     08 00 80 FF 
23f58     00 FF 6B FC | 	wrlong	##4607, _var01
23f5c     00 FA 05 F6 | 	mov	result1, #0
23f60                 | __system____root_stat_ret
23f60     2D 00 64 FD | 	ret
23f64                 | 
23f64                 | __system___normalizeName
23f64     00 00 06 F6 | 	mov	_var01, #0
23f68     09 03 02 F6 | 	mov	_var02, arg01
23f6c     01 05 02 F6 | 	mov	_var03, _var02
23f70                 | LR__3500
23f70     01 07 CA FA | 	rdbyte	_var04, _var02 wz
23f74     5C 01 90 AD |  if_e	jmp	#LR__3519
23f78     00 00 0E F2 | 	cmp	_var01, #0 wz
23f7c     02 07 02 56 |  if_ne	mov	_var04, _var03
23f80     01 04 06 51 |  if_ne	add	_var03, #1
23f84     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
23f88     00 00 06 56 |  if_ne	mov	_var01, #0
23f8c     01 07 C2 FA | 	rdbyte	_var04, _var02
23f90     2E 06 0E F2 | 	cmp	_var04, #46 wz
23f94     D8 00 90 5D |  if_ne	jmp	#LR__3512
23f98     01 02 06 F1 | 	add	_var02, #1
23f9c     01 07 C2 FA | 	rdbyte	_var04, _var02
23fa0     01 02 86 F1 | 	sub	_var02, #1
23fa4     2F 06 0E F2 | 	cmp	_var04, #47 wz
23fa8     18 00 90 AD |  if_e	jmp	#LR__3501
23fac     01 02 06 F1 | 	add	_var02, #1
23fb0     01 09 C2 FA | 	rdbyte	_var05, _var02
23fb4     01 02 86 F1 | 	sub	_var02, #1
23fb8     04 0B 02 F6 | 	mov	_var06, _var05
23fbc     07 0A 4E F7 | 	zerox	_var06, #7 wz
23fc0     10 00 90 5D |  if_ne	jmp	#LR__3502
23fc4                 | LR__3501
23fc4     01 0D 02 F6 | 	mov	_var07, _var02
23fc8     01 0C 06 F1 | 	add	_var07, #1
23fcc     06 03 02 F6 | 	mov	_var02, _var07
23fd0     E0 00 90 FD | 	jmp	#LR__3516
23fd4                 | LR__3502
23fd4     01 02 06 F1 | 	add	_var02, #1
23fd8     01 0D C2 FA | 	rdbyte	_var07, _var02
23fdc     01 02 86 F1 | 	sub	_var02, #1
23fe0     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
23fe4     2E 06 0E F2 | 	cmp	_var04, #46 wz
23fe8     84 00 90 5D |  if_ne	jmp	#LR__3511
23fec     02 02 06 F1 | 	add	_var02, #2
23ff0     01 0D C2 FA | 	rdbyte	_var07, _var02
23ff4     02 02 86 F1 | 	sub	_var02, #2
23ff8     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
23ffc     2F 06 0E F2 | 	cmp	_var04, #47 wz
24000     18 00 90 AD |  if_e	jmp	#LR__3503
24004     02 02 06 F1 | 	add	_var02, #2
24008     01 09 C2 FA | 	rdbyte	_var05, _var02
2400c     02 02 86 F1 | 	sub	_var02, #2
24010     04 0B 02 F6 | 	mov	_var06, _var05
24014     07 0A 4E F7 | 	zerox	_var06, #7 wz
24018     54 00 90 5D |  if_ne	jmp	#LR__3510
2401c                 | LR__3503
2401c     02 02 06 F1 | 	add	_var02, #2
24020     09 05 5A F2 | 	cmps	_var03, arg01 wcz
24024     40 00 90 ED |  if_be	jmp	#LR__3509
24028     02 0F 02 F6 | 	mov	_var08, _var03
2402c     01 0E 86 F1 | 	sub	_var08, #1
24030                 | LR__3504
24030     07 07 C2 FA | 	rdbyte	_var04, _var08
24034     2F 06 0E F2 | 	cmp	_var04, #47 wz
24038     0C 00 90 5D |  if_ne	jmp	#LR__3505
2403c     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
24040     01 0E 86 11 |  if_a	sub	_var08, #1
24044     E8 FF 9F 1D |  if_a	jmp	#LR__3504
24048                 | LR__3505
24048     97 0C 48 FB | 	callpa	#(@LR__3507-@LR__3506)>>2,fcache_load_ptr_
2404c                 | LR__3506
2404c     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
24050     10 00 90 ED |  if_be	jmp	#LR__3508
24054     07 07 C2 FA | 	rdbyte	_var04, _var08
24058     2F 06 0E F2 | 	cmp	_var04, #47 wz
2405c     01 0E 86 51 |  if_ne	sub	_var08, #1
24060     E8 FF 9F 5D |  if_ne	jmp	#LR__3506
24064                 | LR__3507
24064                 | LR__3508
24064     07 05 02 F6 | 	mov	_var03, _var08
24068                 | LR__3509
24068     01 00 06 F6 | 	mov	_var01, #1
2406c     44 00 90 FD | 	jmp	#LR__3516
24070                 | LR__3510
24070                 | LR__3511
24070                 | LR__3512
24070     97 18 48 FB | 	callpa	#(@LR__3514-@LR__3513)>>2,fcache_load_ptr_
24074                 | LR__3513
24074     01 07 CA FA | 	rdbyte	_var04, _var02 wz
24078     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
2407c     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
24080     20 00 90 AD |  if_e	jmp	#LR__3515
24084     01 0B 02 F6 | 	mov	_var06, _var02
24088     01 09 02 F6 | 	mov	_var05, _var02
2408c     01 08 06 F1 | 	add	_var05, #1
24090     05 11 C2 FA | 	rdbyte	_var09, _var06
24094     04 03 02 F6 | 	mov	_var02, _var05
24098     02 11 42 FC | 	wrbyte	_var09, _var03
2409c     01 04 06 F1 | 	add	_var03, #1
240a0     D0 FF 9F FD | 	jmp	#LR__3513
240a4                 | LR__3514
240a4                 | LR__3515
240a4     01 07 C2 FA | 	rdbyte	_var04, _var02
240a8     2F 06 0E F2 | 	cmp	_var04, #47 wz
240ac     C0 FE 9F 5D |  if_ne	jmp	#LR__3500
240b0     01 00 06 F6 | 	mov	_var01, #1
240b4                 | LR__3516
240b4     97 0C 48 FB | 	callpa	#(@LR__3518-@LR__3517)>>2,fcache_load_ptr_
240b8                 | LR__3517
240b8     01 07 C2 FA | 	rdbyte	_var04, _var02
240bc     2F 06 0E F2 | 	cmp	_var04, #47 wz
240c0     01 0D 02 A6 |  if_e	mov	_var07, _var02
240c4     01 0C 06 A1 |  if_e	add	_var07, #1
240c8     06 03 02 A6 |  if_e	mov	_var02, _var07
240cc     E8 FF 9F AD |  if_e	jmp	#LR__3517
240d0                 | LR__3518
240d0     9C FE 9F FD | 	jmp	#LR__3500
240d4                 | LR__3519
240d4     02 01 48 FC | 	wrbyte	#0, _var03
240d8                 | __system___normalizeName_ret
240d8     2D 00 64 FD | 	ret
240dc                 | 
240dc                 | __system___strrev
240dc     09 01 CA FA | 	rdbyte	_var01, arg01 wz
240e0     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
240e4     09 03 02 F6 | 	mov	_var02, arg01
240e8     97 1A 48 FB | 	callpa	#(@LR__3522-@LR__3520)>>2,fcache_load_ptr_
240ec                 | LR__3520
240ec     01 01 CA FA | 	rdbyte	_var01, _var02 wz
240f0     01 02 06 51 |  if_ne	add	_var02, #1
240f4     F4 FF 9F 5D |  if_ne	jmp	#LR__3520
240f8     01 02 86 F1 | 	sub	_var02, #1
240fc                 | LR__3521
240fc     09 03 5A F2 | 	cmps	_var02, arg01 wcz
24100     1C 00 90 ED |  if_be	jmp	#LR__3523
24104     09 01 C2 FA | 	rdbyte	_var01, arg01
24108     01 05 C2 FA | 	rdbyte	_var03, _var02
2410c     09 05 42 FC | 	wrbyte	_var03, arg01
24110     01 01 42 FC | 	wrbyte	_var01, _var02
24114     01 12 06 F1 | 	add	arg01, #1
24118     01 02 86 F1 | 	sub	_var02, #1
2411c     DC FF 9F FD | 	jmp	#LR__3521
24120                 | LR__3522
24120                 | LR__3523
24120                 | __system___strrev_ret
24120     2D 00 64 FD | 	ret
24124                 | 
24124                 | __system___fmtpad
24124     06 4A 05 F6 | 	mov	COUNT_, #6
24128     A8 00 A0 FD | 	call	#pushregs_
2412c     09 1F 02 F6 | 	mov	local01, arg01
24130     0A 21 02 F6 | 	mov	local02, arg02
24134     0B 23 02 F6 | 	mov	local03, arg03
24138     10 13 EA F8 | 	getbyte	arg01, local02, #1
2413c     16 20 46 F0 | 	shr	local02, #22
24140     03 20 0E F5 | 	and	local02, #3 wz
24144     00 24 06 F6 | 	mov	local04, #0
24148     01 20 06 A6 |  if_e	mov	local02, #1
2414c     0C 21 CA F7 | 	test	local02, arg04 wz
24150     00 FA 05 A6 |  if_e	mov	result1, #0
24154     88 00 90 AD |  if_e	jmp	#LR__3533
24158     09 23 C2 F2 | 	subr	local03, arg01
2415c     01 22 56 F2 | 	cmps	local03, #1 wc
24160     00 FA 05 C6 |  if_b	mov	result1, #0
24164     78 00 90 CD |  if_b	jmp	#LR__3533
24168     03 20 0E F2 | 	cmp	local02, #3 wz
2416c     18 00 90 5D |  if_ne	jmp	#LR__3530
24170     01 18 0E F2 | 	cmp	arg04, #1 wz
24174     6E 20 62 FD | 	wrz	local02
24178     10 23 02 F1 | 	add	local03, local02
2417c     11 23 52 F6 | 	abs	local03, local03 wc
24180     01 22 46 F0 | 	shr	local03, #1
24184     11 23 82 F6 | 	negc	local03, local03
24188                 | LR__3530
24188     01 22 56 F2 | 	cmps	local03, #1 wc
2418c     4C 00 90 CD |  if_b	jmp	#LR__3532
24190     11 27 02 F6 | 	mov	local05, local03
24194                 | LR__3531
24194     0F 21 02 F6 | 	mov	local02, local01
24198     0F 29 02 F6 | 	mov	local06, local01
2419c     13 20 46 F7 | 	zerox	local02, #19
241a0     14 28 46 F0 | 	shr	local06, #20
241a4     02 28 66 F0 | 	shl	local06, #2
241a8     ED 28 02 F1 | 	add	local06, __methods__
241ac     14 29 02 FB | 	rdlong	local06, local06
241b0     20 12 06 F6 | 	mov	arg01, #32
241b4     F2 22 02 F6 | 	mov	local03, objptr
241b8     10 E5 01 F6 | 	mov	objptr, local02
241bc     2D 28 62 FD | 	call	local06
241c0     11 E5 01 F6 | 	mov	objptr, local03
241c4     FD 28 02 F6 | 	mov	local06, result1
241c8     00 28 56 F2 | 	cmps	local06, #0 wc
241cc     14 FB 01 C6 |  if_b	mov	result1, local06
241d0     0C 00 90 CD |  if_b	jmp	#LR__3533
241d4     14 25 02 F1 | 	add	local04, local06
241d8     EE 27 6E FB | 	djnz	local05, #LR__3531
241dc                 | LR__3532
241dc     12 FB 01 F6 | 	mov	result1, local04
241e0                 | LR__3533
241e0     A7 F0 03 F6 | 	mov	ptra, fp
241e4     B2 00 A0 FD | 	call	#popregs_
241e8                 | __system___fmtpad_ret
241e8     2D 00 64 FD | 	ret
241ec                 | 
241ec                 | __system___uitoa
241ec     04 4A 05 F6 | 	mov	COUNT_, #4
241f0     A8 00 A0 FD | 	call	#pushregs_
241f4     09 1F 02 F6 | 	mov	local01, arg01
241f8     00 1A 4E F2 | 	cmps	arg05, #0 wz
241fc     0F 1B 02 F6 | 	mov	arg05, local01
24200     00 20 06 F6 | 	mov	local02, #0
24204     37 22 06 56 |  if_ne	mov	local03, #55
24208     57 22 06 A6 |  if_e	mov	local03, #87
2420c                 | LR__3540
2420c     0B 15 12 FD | 	qdiv	arg02, arg03
24210     19 24 62 FD | 	getqy	local04
24214     0B 15 12 FD | 	qdiv	arg02, arg03
24218     0A 24 16 F2 | 	cmp	local04, #10 wc
2421c     30 24 06 C1 |  if_b	add	local04, #48
24220     11 25 02 31 |  if_ae	add	local04, local03
24224     0D 25 42 FC | 	wrbyte	local04, arg05
24228     01 1A 06 F1 | 	add	arg05, #1
2422c     01 20 06 F1 | 	add	local02, #1
24230     18 14 62 FD | 	getqx	arg02
24234     00 14 0E F2 | 	cmp	arg02, #0 wz
24238     D0 FF 9F 5D |  if_ne	jmp	#LR__3540
2423c     0C 21 12 F2 | 	cmp	local02, arg04 wc
24240     C8 FF 9F CD |  if_b	jmp	#LR__3540
24244     0D 01 48 FC | 	wrbyte	#0, arg05
24248     0F 13 02 F6 | 	mov	arg01, local01
2424c     8C FE BF FD | 	call	#__system___strrev
24250     10 FB 01 F6 | 	mov	result1, local02
24254     A7 F0 03 F6 | 	mov	ptra, fp
24258     B2 00 A0 FD | 	call	#popregs_
2425c                 | __system___uitoa_ret
2425c     2D 00 64 FD | 	ret
24260                 | 
24260                 | __system__disassemble_0442
24260     10 4A 05 F6 | 	mov	COUNT_, #16
24264     A8 00 A0 FD | 	call	#pushregs_
24268     09 1F 02 F6 | 	mov	local01, arg01
2426c     0A 21 02 F6 | 	mov	local02, arg02
24270     0B 23 02 F6 | 	mov	local03, arg03
24274     0C 25 02 F6 | 	mov	local04, arg04
24278     0D 27 02 F6 | 	mov	local05, arg05
2427c     13 13 52 F6 | 	abs	arg01, local05 wc
24280     1F 28 C6 C9 |  if_b	decod	local06, #31
24284     00 28 06 36 |  if_ae	mov	local06, #0
24288     64 D0 BF FD | 	call	#__system___float_fromuns
2428c     14 FB 61 F5 | 	xor	result1, local06
24290     FD 2A 02 F6 | 	mov	local07, result1
24294     00 2C 06 F6 | 	mov	local08, #0
24298     0F 13 02 F6 | 	mov	arg01, local01
2429c     00 14 06 F6 | 	mov	arg02, #0
242a0     01 16 06 F6 | 	mov	arg03, #1
242a4     80 D8 BF FD | 	call	#__system___float_cmp
242a8     00 FA 0D F2 | 	cmp	result1, #0 wz
242ac     00 2E 06 A6 |  if_e	mov	local09, #0
242b0     10 01 68 AC |  if_e	wrlong	#0, local02
242b4     11 2F 62 AC |  if_e	wrlong	local09, local03
242b8     8C 01 90 AD |  if_e	jmp	#LR__3562
242bc     0F 13 02 F6 | 	mov	arg01, local01
242c0     30 DD BF FD | 	call	#__system____builtin_ilogb
242c4     FD 30 02 F6 | 	mov	local10, result1
242c8     0A 26 0E F2 | 	cmp	local05, #10 wz
242cc     24 00 90 5D |  if_ne	jmp	#LR__3550
242d0     18 2F 02 F6 | 	mov	local09, local10
242d4     01 2E 66 F0 | 	shl	local09, #1
242d8     18 2F 02 F1 | 	add	local09, local10
242dc     17 31 52 F6 | 	abs	local10, local09 wc
242e0     0A 30 16 FD | 	qdiv	local10, #10
242e4     09 32 06 F6 | 	mov	local11, #9
242e8     18 30 62 FD | 	getqx	local10
242ec     18 31 82 F6 | 	negc	local10, local10
242f0     04 00 90 FD | 	jmp	#LR__3551
242f4                 | LR__3550
242f4     18 32 06 F6 | 	mov	local11, #24
242f8                 | LR__3551
242f8                 | LR__3552
242f8     08 2C 56 F2 | 	cmps	local08, #8 wc
242fc     01 2C 06 F1 | 	add	local08, #1
24300     60 00 90 3D |  if_ae	jmp	#LR__3553
24304     00 C0 1F FF 
24308     00 12 06 F6 | 	mov	arg01, ##1065353216
2430c     15 15 02 F6 | 	mov	arg02, local07
24310     18 17 02 F6 | 	mov	arg03, local10
24314     88 E3 BF FD | 	call	#__system___float_pow_n
24318     FD 14 02 F6 | 	mov	arg02, result1
2431c     0F 13 02 F6 | 	mov	arg01, local01
24320     D4 D5 BF FD | 	call	#__system___float_div
24324     FD 34 02 F6 | 	mov	local12, result1
24328     1A 13 02 F6 | 	mov	arg01, local12
2432c     00 C0 1F FF 
24330     00 14 06 F6 | 	mov	arg02, ##1065353216
24334     01 16 06 F6 | 	mov	arg03, #1
24338     EC D7 BF FD | 	call	#__system___float_cmp
2433c     00 FA 55 F2 | 	cmps	result1, #0 wc
24340     01 30 86 C1 |  if_b	sub	local10, #1
24344     B0 FF 9F CD |  if_b	jmp	#LR__3552
24348     15 15 02 F6 | 	mov	arg02, local07
2434c     1A 13 02 F6 | 	mov	arg01, local12
24350     01 16 66 F6 | 	neg	arg03, #1
24354     D0 D7 BF FD | 	call	#__system___float_cmp
24358     00 FA 55 F2 | 	cmps	result1, #0 wc
2435c     01 30 06 31 |  if_ae	add	local10, #1
24360     94 FF 9F 3D |  if_ae	jmp	#LR__3552
24364                 | LR__3553
24364     1A 13 02 F6 | 	mov	arg01, local12
24368     88 DC BF FD | 	call	#__system____builtin_ilogb
2436c     FD 36 02 F6 | 	mov	local13, result1
24370     1A 39 02 F6 | 	mov	local14, local12
24374     17 39 06 F4 | 	bitl	local14, #279
24378     17 38 26 F4 | 	bith	local14, #23
2437c     1B 39 62 F0 | 	shl	local14, local13
24380     02 26 0E F2 | 	cmp	local05, #2 wz
24384     02 24 66 A0 |  if_e	shl	local04, #2
24388     00 3A 06 F6 | 	mov	local15, #0
2438c     00 24 56 F2 | 	cmps	local04, #0 wc
24390     10 00 90 3D |  if_ae	jmp	#LR__3554
24394     18 25 C2 F2 | 	subr	local04, local10
24398     00 24 56 F2 | 	cmps	local04, #0 wc
2439c     A0 00 90 CD |  if_b	jmp	#LR__3561
243a0     04 00 90 FD | 	jmp	#LR__3555
243a4                 | LR__3554
243a4     01 24 06 F1 | 	add	local04, #1
243a8                 | LR__3555
243a8     19 25 7A F3 | 	fles	local04, local11 wcz
243ac     01 3C 06 F6 | 	mov	local16, #1
243b0     97 22 48 FB | 	callpa	#(@LR__3557-@LR__3556)>>2,fcache_load_ptr_
243b4                 | LR__3556
243b4     00 40 00 FF 
243b8     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
243bc     38 00 90 3D |  if_ae	jmp	#LR__3558
243c0     01 24 56 F2 | 	cmps	local04, #1 wc
243c4     01 24 86 F1 | 	sub	local04, #1
243c8     2C 00 90 CD |  if_b	jmp	#LR__3558
243cc     13 3B 02 FD | 	qmul	local15, local05
243d0     1C 37 02 F6 | 	mov	local13, local14
243d4     17 36 46 F0 | 	shr	local13, #23
243d8     17 39 06 F4 | 	bitl	local14, #279
243dc     18 3A 62 FD | 	getqx	local15
243e0     13 3D 02 FD | 	qmul	local16, local05
243e4     18 3C 62 FD | 	getqx	local16
243e8     13 39 02 FD | 	qmul	local14, local05
243ec     1B 3B 02 F1 | 	add	local15, local13
243f0     18 38 62 FD | 	getqx	local14
243f4     BC FF 9F FD | 	jmp	#LR__3556
243f8                 | LR__3557
243f8                 | LR__3558
243f8     13 2F 02 F6 | 	mov	local09, local05
243fc     17 2E 66 F0 | 	shl	local09, #23
24400     17 37 52 F6 | 	abs	local13, local09 wc
24404     01 36 46 F0 | 	shr	local13, #1
24408     1B 37 82 F6 | 	negc	local13, local13
2440c     1B 39 1A F2 | 	cmp	local14, local13 wcz
24410     20 00 90 1D |  if_a	jmp	#LR__3559
24414     17 26 66 F0 | 	shl	local05, #23
24418     13 37 52 F6 | 	abs	local13, local05 wc
2441c     01 36 46 F0 | 	shr	local13, #1
24420     1B 37 82 F6 | 	negc	local13, local13
24424     1B 39 0A F2 | 	cmp	local14, local13 wz
24428     14 00 90 5D |  if_ne	jmp	#LR__3560
2442c     01 3A CE F7 | 	test	local15, #1 wz
24430     0C 00 90 AD |  if_e	jmp	#LR__3560
24434                 | LR__3559
24434     01 3A 06 F1 | 	add	local15, #1
24438     1E 3B 0A F2 | 	cmp	local15, local16 wz
2443c     01 30 06 A1 |  if_e	add	local10, #1
24440                 | LR__3560
24440                 | LR__3561
24440     10 3B 62 FC | 	wrlong	local15, local02
24444     11 31 62 FC | 	wrlong	local10, local03
24448                 | LR__3562
24448     A7 F0 03 F6 | 	mov	ptra, fp
2444c     B2 00 A0 FD | 	call	#popregs_
24450                 | __system__disassemble_0442_ret
24450     2D 00 64 FD | 	ret
24454                 | 
24454                 | __system__emitsign_0444
24454     00 FA 05 F6 | 	mov	result1, #0
24458     00 14 0E F2 | 	cmp	arg02, #0 wz
2445c     09 01 02 56 |  if_ne	mov	_var01, arg01
24460     01 12 06 51 |  if_ne	add	arg01, #1
24464     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
24468     01 FA 05 56 |  if_ne	mov	result1, #1
2446c     00 16 0E F2 | 	cmp	arg03, #0 wz
24470     09 61 48 5C |  if_ne	wrbyte	#48, arg01
24474     01 12 06 51 |  if_ne	add	arg01, #1
24478     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
2447c     02 FA 05 51 |  if_ne	add	result1, #2
24480                 | __system__emitsign_0444_ret
24480     2D 00 64 FD | 	ret
24484                 | 
24484                 | __system___gettxfunc
24484     01 4A 05 F6 | 	mov	COUNT_, #1
24488     A8 00 A0 FD | 	call	#pushregs_
2448c     A0 F8 BF FD | 	call	#__system____getftab
24490     FD 1E 0A F6 | 	mov	local01, result1 wz
24494     10 00 90 AD |  if_e	jmp	#LR__3570
24498     08 1E 06 F1 | 	add	local01, #8
2449c     0F 15 0A FB | 	rdlong	arg02, local01 wz
244a0     08 1E 86 F1 | 	sub	local01, #8
244a4     08 00 90 5D |  if_ne	jmp	#LR__3571
244a8                 | LR__3570
244a8     00 FA 05 F6 | 	mov	result1, #0
244ac     0C 00 90 FD | 	jmp	#LR__3572
244b0                 | LR__3571
244b0     00 38 04 FF 
244b4     00 1E 46 F5 | 	or	local01, ##141557760
244b8     0F FB 01 F6 | 	mov	result1, local01
244bc                 | LR__3572
244bc     A7 F0 03 F6 | 	mov	ptra, fp
244c0     B2 00 A0 FD | 	call	#popregs_
244c4                 | __system___gettxfunc_ret
244c4     2D 00 64 FD | 	ret
244c8                 | 
244c8                 | __system___getrxfunc
244c8     01 4A 05 F6 | 	mov	COUNT_, #1
244cc     A8 00 A0 FD | 	call	#pushregs_
244d0     5C F8 BF FD | 	call	#__system____getftab
244d4     FD 1E 0A F6 | 	mov	local01, result1 wz
244d8     10 00 90 AD |  if_e	jmp	#LR__3580
244dc     08 1E 06 F1 | 	add	local01, #8
244e0     0F 15 0A FB | 	rdlong	arg02, local01 wz
244e4     08 1E 86 F1 | 	sub	local01, #8
244e8     08 00 90 5D |  if_ne	jmp	#LR__3581
244ec                 | LR__3580
244ec     00 FA 05 F6 | 	mov	result1, #0
244f0     0C 00 90 FD | 	jmp	#LR__3582
244f4                 | LR__3581
244f4     00 40 04 FF 
244f8     00 1E 46 F5 | 	or	local01, ##142606336
244fc     0F FB 01 F6 | 	mov	result1, local01
24500                 | LR__3582
24500     A7 F0 03 F6 | 	mov	ptra, fp
24504     B2 00 A0 FD | 	call	#popregs_
24508                 | __system___getrxfunc_ret
24508     2D 00 64 FD | 	ret
2450c                 | 
2450c                 | __system___getiolock_0484
2450c     01 4A 05 F6 | 	mov	COUNT_, #1
24510     A8 00 A0 FD | 	call	#pushregs_
24514     18 F8 BF FD | 	call	#__system____getftab
24518     FD 1E 0A F6 | 	mov	local01, result1 wz
2451c     10 00 90 AD |  if_e	jmp	#LR__3590
24520     08 1E 06 F1 | 	add	local01, #8
24524     0F FB 09 FB | 	rdlong	result1, local01 wz
24528     08 1E 86 F1 | 	sub	local01, #8
2452c     18 00 90 5D |  if_ne	jmp	#LR__3591
24530                 | LR__3590
24530     01 00 00 FF 
24534     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
24538     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2453c     01 00 00 FF 
24540     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
24544     08 00 90 FD | 	jmp	#LR__3592
24548                 | LR__3591
24548     0C 1E 06 F1 | 	add	local01, #12
2454c     0F FB 01 F6 | 	mov	result1, local01
24550                 | LR__3592
24550     A7 F0 03 F6 | 	mov	ptra, fp
24554     B2 00 A0 FD | 	call	#popregs_
24558                 | __system___getiolock_0484_ret
24558     2D 00 64 FD | 	ret
2455c                 | 
2455c                 | __system____ScanForChar
2455c     09 01 02 F6 | 	mov	_var01, arg01
24560     09 03 02 F6 | 	mov	_var02, arg01
24564     97 06 48 FB | 	callpa	#(@LR__3601-@LR__3600)>>2,fcache_load_ptr_
24568                 | LR__3600
24568     01 FB C9 FA | 	rdbyte	result1, _var02 wz
2456c     01 02 06 51 |  if_ne	add	_var02, #1
24570     F4 FF 9F 5D |  if_ne	jmp	#LR__3600
24574                 | LR__3601
24574     09 03 82 F1 | 	sub	_var02, arg01
24578     01 FB 01 F6 | 	mov	result1, _var02
2457c     FD 12 0A F6 | 	mov	arg01, result1 wz
24580     00 FA 05 A6 |  if_e	mov	result1, #0
24584     B8 00 90 AD |  if_e	jmp	#LR__3608
24588     0A 05 02 F6 | 	mov	_var03, arg02
2458c     07 04 4E F7 | 	zerox	_var03, #7 wz
24590     00 FA 05 A6 |  if_e	mov	result1, #0
24594     A8 00 90 AD |  if_e	jmp	#LR__3608
24598     01 16 16 F2 | 	cmp	arg03, #1 wc
2459c     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
245a0     01 16 06 86 |  if_c_and_z	mov	arg03, #1
245a4     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
245a8     94 00 90 4D |  if_c_and_nz	jmp	#LR__3608
245ac     09 17 1A F2 | 	cmp	arg03, arg01 wcz
245b0     10 00 90 ED |  if_be	jmp	#LR__3602
245b4     00 18 0E F2 | 	cmp	arg04, #0 wz
245b8     00 FA 05 A6 |  if_e	mov	result1, #0
245bc     80 00 90 AD |  if_e	jmp	#LR__3608
245c0     09 17 02 F6 | 	mov	arg03, arg01
245c4                 | LR__3602
245c4     01 16 86 F1 | 	sub	arg03, #1
245c8     00 18 0E F2 | 	cmp	arg04, #0 wz
245cc     38 00 90 5D |  if_ne	jmp	#LR__3604
245d0     0B 07 02 F6 | 	mov	_var04, arg03
245d4     09 09 02 F6 | 	mov	_var05, arg01
245d8                 | LR__3603
245d8     04 07 12 F2 | 	cmp	_var04, _var05 wc
245dc     5C 00 90 3D |  if_ae	jmp	#LR__3607
245e0     03 05 02 F6 | 	mov	_var03, _var04
245e4     00 05 02 F1 | 	add	_var03, _var01
245e8     02 05 C2 FA | 	rdbyte	_var03, _var03
245ec     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
245f0     0C 05 0A F2 | 	cmp	_var03, arg04 wz
245f4     01 06 06 A1 |  if_e	add	_var04, #1
245f8     03 FB 01 A6 |  if_e	mov	result1, _var04
245fc     40 00 90 AD |  if_e	jmp	#LR__3608
24600     01 06 06 F1 | 	add	_var04, #1
24604     D0 FF 9F FD | 	jmp	#LR__3603
24608                 | LR__3604
24608     0B 07 02 F6 | 	mov	_var04, arg03
2460c                 | LR__3605
2460c     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
24610     28 00 90 1D |  if_a	jmp	#LR__3606
24614     03 09 02 F6 | 	mov	_var05, _var04
24618     00 09 02 F1 | 	add	_var05, _var01
2461c     04 05 C2 FA | 	rdbyte	_var03, _var05
24620     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
24624     04 05 0A F2 | 	cmp	_var03, _var05 wz
24628     01 06 06 A1 |  if_e	add	_var04, #1
2462c     03 FB 01 A6 |  if_e	mov	result1, _var04
24630     0C 00 90 AD |  if_e	jmp	#LR__3608
24634     01 06 86 F1 | 	sub	_var04, #1
24638     D0 FF 9F FD | 	jmp	#LR__3605
2463c                 | LR__3606
2463c                 | LR__3607
2463c     00 FA 05 F6 | 	mov	result1, #0
24640                 | LR__3608
24640                 | __system____ScanForChar_ret
24640     2D 00 64 FD | 	ret
24644                 | 
24644                 | __system___basic_dir
24644     05 4A 05 F6 | 	mov	COUNT_, #5
24648     A8 00 A0 FD | 	call	#pushregs_
2464c     4C F0 07 F1 | 	add	ptra, #76
24650     04 4E 05 F1 | 	add	fp, #4
24654     A7 12 62 FC | 	wrlong	arg01, fp
24658     04 4E 05 F1 | 	add	fp, #4
2465c     A7 14 62 FC | 	wrlong	arg02, fp
24660     04 4E 85 F1 | 	sub	fp, #4
24664     A7 14 0A FB | 	rdlong	arg02, fp wz
24668     04 4E 85 F1 | 	sub	fp, #4
2466c     04 4E 05 51 |  if_ne	add	fp, #4
24670     A7 1E 02 5B |  if_ne	rdlong	local01, fp
24674     04 4E 85 51 |  if_ne	sub	fp, #4
24678     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
2467c     70 00 90 AD |  if_e	jmp	#LR__3610
24680     03 00 00 FF 
24684     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
24688     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2468c     03 00 00 FF 
24690     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
24694     03 00 00 5F 
24698     28 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1832
2469c     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
246a0     03 00 00 5F 
246a4     28 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
246a8     14 EA BF 5D |  if_ne	call	#__system__closedir
246ac     70 01 00 FF 
246b0     94 13 06 F6 | 	mov	arg01, ##@LR__4768
246b4     1C E9 BF FD | 	call	#__system__opendir
246b8     03 00 00 FF 
246bc     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
246c0     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
246c4     08 4E 05 F1 | 	add	fp, #8
246c8     A7 20 02 FB | 	rdlong	local02, fp
246cc     04 E6 05 F1 | 	add	ptr___system__dat__, #4
246d0     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
246d4     04 4E 85 F1 | 	sub	fp, #4
246d8     A7 20 02 FB | 	rdlong	local02, fp
246dc     04 4E 85 F1 | 	sub	fp, #4
246e0     04 E6 05 F1 | 	add	ptr___system__dat__, #4
246e4     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
246e8     03 00 00 FF 
246ec     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
246f0                 | LR__3610
246f0     03 00 00 FF 
246f4     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
246f8     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
246fc     03 00 00 FF 
24700     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
24704     70 01 00 AF 
24708     96 FB 05 A6 |  if_e	mov	result1, ##@LR__4769
2470c     84 02 90 AD |  if_e	jmp	#LR__3623
24710                 | LR__3611
24710     03 00 00 FF 
24714     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
24718     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2471c     03 00 00 FF 
24720     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
24724     0C EA BF FD | 	call	#__system__readdir
24728     0C 4E 05 F1 | 	add	fp, #12
2472c     A7 FA 61 FC | 	wrlong	result1, fp
24730     0C 4E 85 F1 | 	sub	fp, #12
24734     00 FA 0D F2 | 	cmp	result1, #0 wz
24738     38 00 90 5D |  if_ne	jmp	#LR__3612
2473c     03 00 00 FF 
24740     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
24744     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
24748     03 00 00 FF 
2474c     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
24750     6C E9 BF FD | 	call	#__system__closedir
24754     03 00 00 FF 
24758     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
2475c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
24760     03 00 00 FF 
24764     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
24768     70 01 00 FF 
2476c     98 FB 05 F6 | 	mov	result1, ##@LR__4770
24770     20 02 90 FD | 	jmp	#LR__3623
24774                 | LR__3612
24774     0C 4E 05 F1 | 	add	fp, #12
24778     A7 12 02 FB | 	rdlong	arg01, fp
2477c     0C 4E 85 F1 | 	sub	fp, #12
24780     03 00 00 FF 
24784     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
24788     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2478c     03 00 00 FF 
24790     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
24794     48 07 B0 FD | 	call	#__system___pat_match
24798     00 FA 0D F2 | 	cmp	result1, #0 wz
2479c     70 FF 9F AD |  if_e	jmp	#LR__3611
247a0     03 00 00 FF 
247a4     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
247a8     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
247ac     03 00 00 FF 
247b0     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
247b4     78 01 90 AD |  if_e	jmp	#LR__3619
247b8     0C 4E 05 F1 | 	add	fp, #12
247bc     A7 12 02 FB | 	rdlong	arg01, fp
247c0     04 4E 05 F1 | 	add	fp, #4
247c4     A7 14 02 F6 | 	mov	arg02, fp
247c8     10 4E 85 F1 | 	sub	fp, #16
247cc     68 F2 BF FD | 	call	#__system__stat
247d0     40 4E 05 F1 | 	add	fp, #64
247d4     A7 FA 61 FC | 	wrlong	result1, fp
247d8     40 4E 85 F1 | 	sub	fp, #64
247dc     00 FA 0D F2 | 	cmp	result1, #0 wz
247e0     70 01 00 5F 
247e4     9A FB 05 56 |  if_ne	mov	result1, ##@LR__4771
247e8     A8 01 90 5D |  if_ne	jmp	#LR__3623
247ec     18 4E 05 F1 | 	add	fp, #24
247f0     A7 20 02 FB | 	rdlong	local02, fp
247f4     78 00 00 FF 
247f8     00 20 06 F5 | 	and	local02, ##61440
247fc     2C 4E 05 F1 | 	add	fp, #44
24800     A7 20 62 FC | 	wrlong	local02, fp
24804     38 4E 85 F1 | 	sub	fp, #56
24808     A7 20 02 FB | 	rdlong	local02, fp
2480c     0C 4E 85 F1 | 	sub	fp, #12
24810     10 21 C2 FA | 	rdbyte	local02, local02
24814     2E 20 0E F2 | 	cmp	local02, #46 wz
24818     08 4E 05 A1 |  if_e	add	fp, #8
2481c     A7 04 68 AC |  if_e	wrlong	#2, fp
24820     08 4E C5 F3 | 	sumz	fp, #8
24824     A7 00 68 5C |  if_ne	wrlong	#0, fp
24828     08 4E 85 51 |  if_ne	sub	fp, #8
2482c     44 4E 05 F1 | 	add	fp, #68
24830     A7 20 02 FB | 	rdlong	local02, fp
24834     44 4E 85 F1 | 	sub	fp, #68
24838     08 00 00 FF 
2483c     00 20 0E F2 | 	cmp	local02, ##4096 wz
24840     18 00 90 5D |  if_ne	jmp	#LR__3613
24844     08 4E 05 F1 | 	add	fp, #8
24848     A7 20 02 FB | 	rdlong	local02, fp
2484c     10 20 46 F5 | 	or	local02, #16
24850     A7 20 62 FC | 	wrlong	local02, fp
24854     08 4E 85 F1 | 	sub	fp, #8
24858     AC 00 90 FD | 	jmp	#LR__3618
2485c                 | LR__3613
2485c     44 4E 05 F1 | 	add	fp, #68
24860     A7 20 02 FB | 	rdlong	local02, fp
24864     44 4E 85 F1 | 	sub	fp, #68
24868     10 00 00 FF 
2486c     00 20 0E F2 | 	cmp	local02, ##8192 wz
24870     44 4E 05 51 |  if_ne	add	fp, #68
24874     A7 1E 02 5B |  if_ne	rdlong	local01, fp
24878     44 4E 85 51 |  if_ne	sub	fp, #68
2487c     18 00 00 5F 
24880     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
24884     44 4E 05 51 |  if_ne	add	fp, #68
24888     0F 23 02 56 |  if_ne	mov	local03, local01
2488c     44 4E 85 51 |  if_ne	sub	fp, #68
24890     20 00 00 5F 
24894     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
24898     18 00 90 5D |  if_ne	jmp	#LR__3614
2489c     08 4E 05 F1 | 	add	fp, #8
248a0     A7 20 02 FB | 	rdlong	local02, fp
248a4     04 20 46 F5 | 	or	local02, #4
248a8     A7 20 62 FC | 	wrlong	local02, fp
248ac     08 4E 85 F1 | 	sub	fp, #8
248b0     54 00 90 FD | 	jmp	#LR__3617
248b4                 | LR__3614
248b4     18 4E 05 F1 | 	add	fp, #24
248b8     A7 20 02 FB | 	rdlong	local02, fp
248bc     18 4E 85 F1 | 	sub	fp, #24
248c0     92 20 CE F7 | 	test	local02, #146 wz
248c4     18 00 90 5D |  if_ne	jmp	#LR__3615
248c8     08 4E 05 F1 | 	add	fp, #8
248cc     A7 20 02 FB | 	rdlong	local02, fp
248d0     01 20 46 F5 | 	or	local02, #1
248d4     A7 20 62 FC | 	wrlong	local02, fp
248d8     08 4E 85 F1 | 	sub	fp, #8
248dc     28 00 90 FD | 	jmp	#LR__3616
248e0                 | LR__3615
248e0     44 4E 05 F1 | 	add	fp, #68
248e4     A7 24 02 FB | 	rdlong	local04, fp
248e8     44 4E 85 F1 | 	sub	fp, #68
248ec     08 00 00 FF 
248f0     00 24 0E F2 | 	cmp	local04, ##4096 wz
248f4     08 4E 05 51 |  if_ne	add	fp, #8
248f8     A7 24 02 5B |  if_ne	rdlong	local04, fp
248fc     20 24 46 55 |  if_ne	or	local04, #32
24900     A7 24 62 5C |  if_ne	wrlong	local04, fp
24904     08 4E 85 51 |  if_ne	sub	fp, #8
24908                 | LR__3616
24908                 | LR__3617
24908                 | LR__3618
24908     08 4E 05 F1 | 	add	fp, #8
2490c     A7 24 02 FB | 	rdlong	local04, fp
24910     08 4E 85 F1 | 	sub	fp, #8
24914     03 00 00 FF 
24918     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2491c     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
24920     03 00 00 FF 
24924     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
24928     0F 25 CA F7 | 	test	local04, local01 wz
2492c     E0 FD 9F AD |  if_e	jmp	#LR__3611
24930                 | LR__3619
24930     0C 4E 05 F1 | 	add	fp, #12
24934     A7 12 02 FB | 	rdlong	arg01, fp
24938     0C 4E 85 F1 | 	sub	fp, #12
2493c     09 27 02 F6 | 	mov	local05, arg01
24940     97 06 48 FB | 	callpa	#(@LR__3621-@LR__3620)>>2,fcache_load_ptr_
24944                 | LR__3620
24944     13 FB C9 FA | 	rdbyte	result1, local05 wz
24948     01 26 06 51 |  if_ne	add	local05, #1
2494c     F4 FF 9F 5D |  if_ne	jmp	#LR__3620
24950                 | LR__3621
24950     13 13 C2 F2 | 	subr	arg01, local05
24954     01 12 06 F1 | 	add	arg01, #1
24958     64 E0 BF FD | 	call	#__system___gc_alloc_managed
2495c     48 4E 05 F1 | 	add	fp, #72
24960     A7 FA 61 FC | 	wrlong	result1, fp
24964     48 4E 85 F1 | 	sub	fp, #72
24968     00 FA 0D F2 | 	cmp	result1, #0 wz
2496c     18 00 90 AD |  if_e	jmp	#LR__3622
24970     48 4E 05 F1 | 	add	fp, #72
24974     A7 12 02 FB | 	rdlong	arg01, fp
24978     3C 4E 85 F1 | 	sub	fp, #60
2497c     A7 14 02 FB | 	rdlong	arg02, fp
24980     0C 4E 85 F1 | 	sub	fp, #12
24984     A0 A1 BF FD | 	call	#__system____builtin_strcpy
24988                 | LR__3622
24988     48 4E 05 F1 | 	add	fp, #72
2498c     A7 FA 01 FB | 	rdlong	result1, fp
24990     48 4E 85 F1 | 	sub	fp, #72
24994                 | LR__3623
24994     A7 F0 03 F6 | 	mov	ptra, fp
24998     B2 00 A0 FD | 	call	#popregs_
2499c                 | __system___basic_dir_ret
2499c     2D 00 64 FD | 	ret
249a0                 | 
249a0                 | __system__pack_0550
249a0     09 01 02 F6 | 	mov	_var01, arg01
249a4     7F 16 06 F1 | 	add	arg03, #127
249a8     04 18 CE F7 | 	test	arg04, #4 wz
249ac     10 00 90 AD |  if_e	jmp	#LR__3630
249b0     00 00 0E F2 | 	cmp	_var01, #0 wz
249b4     16 00 C6 A9 |  if_e	decod	_var01, #22
249b8     F7 00 26 F4 | 	bith	_var01, #247
249bc     B4 00 90 FD | 	jmp	#LR__3639
249c0                 | LR__3630
249c0     02 18 CE F7 | 	test	arg04, #2 wz
249c4     00 C0 3F 5F 
249c8     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
249cc     00 14 06 56 |  if_ne	mov	arg02, #0
249d0     A0 00 90 5D |  if_ne	jmp	#LR__3638
249d4     08 18 CE F7 | 	test	arg04, #8 wz
249d8     00 00 06 56 |  if_ne	mov	_var01, #0
249dc     94 00 90 5D |  if_ne	jmp	#LR__3637
249e0     FF 16 56 F2 | 	cmps	arg03, #255 wc
249e4     00 C0 3F 3F 
249e8     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
249ec     00 14 06 36 |  if_ae	mov	arg02, #0
249f0     80 00 90 3D |  if_ae	jmp	#LR__3636
249f4     01 16 56 F2 | 	cmps	arg03, #1 wc
249f8     6C 00 90 3D |  if_ae	jmp	#LR__3634
249fc     01 14 46 F0 | 	shr	arg02, #1
24a00     00 03 02 F6 | 	mov	_var02, _var01
24a04     01 02 06 F5 | 	and	_var02, #1
24a08     1F 02 66 F0 | 	shl	_var02, #31
24a0c     01 15 42 F5 | 	or	arg02, _var02
24a10     01 00 46 F0 | 	shr	_var01, #1
24a14     97 1E 48 FB | 	callpa	#(@LR__3632-@LR__3631)>>2,fcache_load_ptr_
24a18                 | LR__3631
24a18     00 16 56 F2 | 	cmps	arg03, #0 wc
24a1c     34 00 90 3D |  if_ae	jmp	#LR__3633
24a20     00 00 0E F2 | 	cmp	_var01, #0 wz
24a24     2C 00 90 AD |  if_e	jmp	#LR__3633
24a28     0A 13 02 F6 | 	mov	arg01, arg02
24a2c     01 12 06 F5 | 	and	arg01, #1
24a30     01 16 06 F1 | 	add	arg03, #1
24a34     01 14 46 F0 | 	shr	arg02, #1
24a38     00 03 02 F6 | 	mov	_var02, _var01
24a3c     01 02 06 F5 | 	and	_var02, #1
24a40     1F 02 66 F0 | 	shl	_var02, #31
24a44     01 15 42 F5 | 	or	arg02, _var02
24a48     09 15 42 F5 | 	or	arg02, arg01
24a4c     01 00 46 F0 | 	shr	_var01, #1
24a50     C4 FF 9F FD | 	jmp	#LR__3631
24a54                 | LR__3632
24a54                 | LR__3633
24a54     00 16 56 F2 | 	cmps	arg03, #0 wc
24a58     18 00 90 3D |  if_ae	jmp	#LR__3635
24a5c     00 14 0E F2 | 	cmp	arg02, #0 wz
24a60     6F 14 62 FD | 	wrnz	arg02
24a64     0C 00 90 FD | 	jmp	#LR__3635
24a68                 | LR__3634
24a68     17 01 06 F4 | 	bitl	_var01, #279
24a6c     17 16 66 F0 | 	shl	arg03, #23
24a70     0B 01 42 F5 | 	or	_var01, arg03
24a74                 | LR__3635
24a74                 | LR__3636
24a74                 | LR__3637
24a74                 | LR__3638
24a74                 | LR__3639
24a74     01 00 CE F7 | 	test	_var01, #1 wz
24a78     01 14 46 55 |  if_ne	or	arg02, #1
24a7c     0A 17 02 F6 | 	mov	arg03, arg02
24a80     00 02 06 F6 | 	mov	_var02, #0
24a84     FF FF 3F FF 
24a88     FF 15 06 F1 | 	add	arg02, ##2147483647
24a8c     0B 15 12 F2 | 	cmp	arg02, arg03 wc
24a90     01 02 06 C6 |  if_b	mov	_var02, #1
24a94     01 01 02 F1 | 	add	_var01, _var02
24a98     01 18 CE F7 | 	test	arg04, #1 wz
24a9c     1F 00 26 54 |  if_ne	bith	_var01, #31
24aa0     00 FB 01 F6 | 	mov	result1, _var01
24aa4                 | __system__pack_0550_ret
24aa4     2D 00 64 FD | 	ret
24aa8                 | 
24aa8                 | __system___rxtxioctl_0640
24aa8     00 15 0E F2 | 	cmp	arg02, #256 wz
24aac     0C 00 90 AD |  if_e	jmp	#LR__3640
24ab0     01 15 0E F2 | 	cmp	arg02, #257 wz
24ab4     1C 00 90 AD |  if_e	jmp	#LR__3641
24ab8     30 00 90 FD | 	jmp	#LR__3642
24abc                 | LR__3640
24abc     08 E6 05 F1 | 	add	ptr___system__dat__, #8
24ac0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
24ac4     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
24ac8     0B FB 61 FC | 	wrlong	result1, arg03
24acc     00 FA 05 F6 | 	mov	result1, #0
24ad0     28 00 90 FD | 	jmp	#LR__3643
24ad4                 | LR__3641
24ad4     0B 13 02 FB | 	rdlong	arg01, arg03
24ad8     08 E6 05 F1 | 	add	ptr___system__dat__, #8
24adc     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
24ae0     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
24ae4     00 FA 05 F6 | 	mov	result1, #0
24ae8     10 00 90 FD | 	jmp	#LR__3643
24aec                 | LR__3642
24aec     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24af0     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
24af4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24af8     01 FA 65 F6 | 	neg	result1, #1
24afc                 | LR__3643
24afc                 | __system___rxtxioctl_0640_ret
24afc     2D 00 64 FD | 	ret
24b00                 | 
24b00                 | __system____dummy_flush_0641
24b00     00 FA 05 F6 | 	mov	result1, #0
24b04                 | __system____dummy_flush_0641_ret
24b04     2D 00 64 FD | 	ret
24b08                 | 
24b08                 | __system___vfsread
24b08     03 4A 05 F6 | 	mov	COUNT_, #3
24b0c     A8 00 A0 FD | 	call	#pushregs_
24b10     28 F0 07 F1 | 	add	ptra, #40
24b14     04 4E 05 F1 | 	add	fp, #4
24b18     A7 12 62 FC | 	wrlong	arg01, fp
24b1c     04 4E 05 F1 | 	add	fp, #4
24b20     A7 14 62 FC | 	wrlong	arg02, fp
24b24     04 4E 05 F1 | 	add	fp, #4
24b28     A7 16 62 FC | 	wrlong	arg03, fp
24b2c     04 4E 85 F1 | 	sub	fp, #4
24b30     A7 FA 01 FB | 	rdlong	result1, fp
24b34     14 4E 05 F1 | 	add	fp, #20
24b38     A7 FA 61 FC | 	wrlong	result1, fp
24b3c     04 4E 05 F1 | 	add	fp, #4
24b40     A7 00 68 FC | 	wrlong	#0, fp
24b44     1C 4E 85 F1 | 	sub	fp, #28
24b48     A7 12 02 FB | 	rdlong	arg01, fp
24b4c     04 4E 85 F1 | 	sub	fp, #4
24b50     08 12 06 F1 | 	add	arg01, #8
24b54     09 FB 01 FB | 	rdlong	result1, arg01
24b58     01 FA CD F7 | 	test	result1, #1 wz
24b5c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
24b60     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
24b64     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
24b68     01 FA 65 A6 |  if_e	neg	result1, #1
24b6c     74 02 90 AD |  if_e	jmp	#LR__3656
24b70     04 4E 05 F1 | 	add	fp, #4
24b74     A7 12 02 FB | 	rdlong	arg01, fp
24b78     04 4E 85 F1 | 	sub	fp, #4
24b7c     14 12 06 F1 | 	add	arg01, #20
24b80     09 FB 09 FB | 	rdlong	result1, arg01 wz
24b84     B8 00 90 AD |  if_e	jmp	#LR__3651
24b88     04 4E 05 F1 | 	add	fp, #4
24b8c     A7 12 02 FB | 	rdlong	arg01, fp
24b90     09 17 02 F6 | 	mov	arg03, arg01
24b94     14 16 06 F1 | 	add	arg03, #20
24b98     0B 1F 02 FB | 	rdlong	local01, arg03
24b9c     0F 21 02 F6 | 	mov	local02, local01
24ba0     13 1E 46 F7 | 	zerox	local01, #19
24ba4     14 20 46 F0 | 	shr	local02, #20
24ba8     02 20 66 F0 | 	shl	local02, #2
24bac     ED 20 02 F1 | 	add	local02, __methods__
24bb0     10 21 02 FB | 	rdlong	local02, local02
24bb4     04 4E 05 F1 | 	add	fp, #4
24bb8     A7 14 02 FB | 	rdlong	arg02, fp
24bbc     04 4E 05 F1 | 	add	fp, #4
24bc0     A7 16 02 FB | 	rdlong	arg03, fp
24bc4     0C 4E 85 F1 | 	sub	fp, #12
24bc8     F2 22 02 F6 | 	mov	local03, objptr
24bcc     0F E5 01 F6 | 	mov	objptr, local01
24bd0     2D 20 62 FD | 	call	local02
24bd4     11 E5 01 F6 | 	mov	objptr, local03
24bd8     10 4E 05 F1 | 	add	fp, #16
24bdc     A7 FA 61 FC | 	wrlong	result1, fp
24be0     10 4E 85 F1 | 	sub	fp, #16
24be4     00 FA 55 F2 | 	cmps	result1, #0 wc
24be8     44 00 90 3D |  if_ae	jmp	#LR__3650
24bec     04 4E 05 F1 | 	add	fp, #4
24bf0     A7 22 02 FB | 	rdlong	local03, fp
24bf4     11 1F 02 F6 | 	mov	local01, local03
24bf8     08 22 06 F1 | 	add	local03, #8
24bfc     11 21 02 FB | 	rdlong	local02, local03
24c00     20 20 46 F5 | 	or	local02, #32
24c04     08 1E 06 F1 | 	add	local01, #8
24c08     0F 21 62 FC | 	wrlong	local02, local01
24c0c     0C 4E 05 F1 | 	add	fp, #12
24c10     A7 12 0A FB | 	rdlong	arg01, fp wz
24c14     10 4E 85 F1 | 	sub	fp, #16
24c18     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24c1c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
24c20     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24c24     01 FA 65 56 |  if_ne	neg	result1, #1
24c28     00 FA 05 A6 |  if_e	mov	result1, #0
24c2c     B4 01 90 FD | 	jmp	#LR__3656
24c30                 | LR__3650
24c30     10 4E 05 F1 | 	add	fp, #16
24c34     A7 FA 01 FB | 	rdlong	result1, fp
24c38     10 4E 85 F1 | 	sub	fp, #16
24c3c     A4 01 90 FD | 	jmp	#LR__3656
24c40                 | LR__3651
24c40     04 4E 05 F1 | 	add	fp, #4
24c44     A7 12 02 FB | 	rdlong	arg01, fp
24c48     20 12 06 F1 | 	add	arg01, #32
24c4c     09 13 0A FB | 	rdlong	arg01, arg01 wz
24c50     14 4E 05 F1 | 	add	fp, #20
24c54     A7 12 62 FC | 	wrlong	arg01, fp
24c58     18 4E 85 F1 | 	sub	fp, #24
24c5c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
24c60     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
24c64     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
24c68     01 FA 65 A6 |  if_e	neg	result1, #1
24c6c     74 01 90 AD |  if_e	jmp	#LR__3656
24c70     04 4E 05 F1 | 	add	fp, #4
24c74     A7 22 02 FB | 	rdlong	local03, fp
24c78     04 4E 85 F1 | 	sub	fp, #4
24c7c     28 22 06 F1 | 	add	local03, #40
24c80     11 21 0A FB | 	rdlong	local02, local03 wz
24c84     7C 00 90 AD |  if_e	jmp	#LR__3653
24c88     04 4E 05 F1 | 	add	fp, #4
24c8c     A7 12 02 FB | 	rdlong	arg01, fp
24c90     09 23 02 F6 | 	mov	local03, arg01
24c94     28 22 06 F1 | 	add	local03, #40
24c98     11 1F 02 FB | 	rdlong	local01, local03
24c9c     0F 21 02 F6 | 	mov	local02, local01
24ca0     13 1E 46 F7 | 	zerox	local01, #19
24ca4     14 20 46 F0 | 	shr	local02, #20
24ca8     02 20 66 F0 | 	shl	local02, #2
24cac     ED 20 02 F1 | 	add	local02, __methods__
24cb0     10 21 02 FB | 	rdlong	local02, local02
24cb4     20 4E 05 F1 | 	add	fp, #32
24cb8     A7 16 02 F6 | 	mov	arg03, fp
24cbc     24 4E 85 F1 | 	sub	fp, #36
24cc0     00 15 06 F6 | 	mov	arg02, #256
24cc4     F2 22 02 F6 | 	mov	local03, objptr
24cc8     0F E5 01 F6 | 	mov	objptr, local01
24ccc     2D 20 62 FD | 	call	local02
24cd0     11 E5 01 F6 | 	mov	objptr, local03
24cd4     10 4E 05 F1 | 	add	fp, #16
24cd8     A7 FA 61 FC | 	wrlong	result1, fp
24cdc     00 FA 4D F2 | 	cmps	result1, #0 wz
24ce0     10 4E 85 F1 | 	sub	fp, #16
24ce4     1C 00 90 5D |  if_ne	jmp	#LR__3652
24ce8     24 4E 05 F1 | 	add	fp, #36
24cec     A7 20 02 FB | 	rdlong	local02, fp
24cf0     24 4E 85 F1 | 	sub	fp, #36
24cf4     02 20 CE F7 | 	test	local02, #2 wz
24cf8     20 4E 05 51 |  if_ne	add	fp, #32
24cfc     A7 02 68 5C |  if_ne	wrlong	#1, fp
24d00     20 4E 85 51 |  if_ne	sub	fp, #32
24d04                 | LR__3652
24d04                 | LR__3653
24d04     10 4E 05 F1 | 	add	fp, #16
24d08     A7 00 68 FC | 	wrlong	#0, fp
24d0c     10 4E 85 F1 | 	sub	fp, #16
24d10                 | LR__3654
24d10     0C 4E 05 F1 | 	add	fp, #12
24d14     A7 22 02 FB | 	rdlong	local03, fp
24d18     0C 4E 85 F1 | 	sub	fp, #12
24d1c     01 22 16 F2 | 	cmp	local03, #1 wc
24d20     B4 00 90 CD |  if_b	jmp	#LR__3655
24d24     18 4E 05 F1 | 	add	fp, #24
24d28     A7 20 02 FB | 	rdlong	local02, fp
24d2c     10 23 02 F6 | 	mov	local03, local02
24d30     13 22 46 F7 | 	zerox	local03, #19
24d34     14 20 46 F0 | 	shr	local02, #20
24d38     02 20 66 F0 | 	shl	local02, #2
24d3c     ED 20 02 F1 | 	add	local02, __methods__
24d40     10 21 02 FB | 	rdlong	local02, local02
24d44     14 4E 85 F1 | 	sub	fp, #20
24d48     A7 12 02 FB | 	rdlong	arg01, fp
24d4c     04 4E 85 F1 | 	sub	fp, #4
24d50     F2 1E 02 F6 | 	mov	local01, objptr
24d54     11 E5 01 F6 | 	mov	objptr, local03
24d58     2D 20 62 FD | 	call	local02
24d5c     0F E5 01 F6 | 	mov	objptr, local01
24d60     14 4E 05 F1 | 	add	fp, #20
24d64     A7 FA 61 FC | 	wrlong	result1, fp
24d68     14 4E 85 F1 | 	sub	fp, #20
24d6c     00 FA 55 F2 | 	cmps	result1, #0 wc
24d70     64 00 90 CD |  if_b	jmp	#LR__3655
24d74     1C 4E 05 F1 | 	add	fp, #28
24d78     A7 22 02 FB | 	rdlong	local03, fp
24d7c     11 21 02 F6 | 	mov	local02, local03
24d80     01 20 06 F1 | 	add	local02, #1
24d84     A7 20 62 FC | 	wrlong	local02, fp
24d88     08 4E 85 F1 | 	sub	fp, #8
24d8c     A7 20 02 FB | 	rdlong	local02, fp
24d90     11 21 42 FC | 	wrbyte	local02, local03
24d94     04 4E 85 F1 | 	sub	fp, #4
24d98     A7 22 02 FB | 	rdlong	local03, fp
24d9c     01 22 06 F1 | 	add	local03, #1
24da0     A7 22 62 FC | 	wrlong	local03, fp
24da4     04 4E 85 F1 | 	sub	fp, #4
24da8     A7 22 02 FB | 	rdlong	local03, fp
24dac     01 22 86 F1 | 	sub	local03, #1
24db0     A7 22 62 FC | 	wrlong	local03, fp
24db4     14 4E 05 F1 | 	add	fp, #20
24db8     A7 22 0A FB | 	rdlong	local03, fp wz
24dbc     20 4E 85 F1 | 	sub	fp, #32
24dc0     4C FF 9F AD |  if_e	jmp	#LR__3654
24dc4     14 4E 05 F1 | 	add	fp, #20
24dc8     A7 20 02 FB | 	rdlong	local02, fp
24dcc     14 4E 85 F1 | 	sub	fp, #20
24dd0     0A 20 0E F2 | 	cmp	local02, #10 wz
24dd4     38 FF 9F 5D |  if_ne	jmp	#LR__3654
24dd8                 | LR__3655
24dd8     10 4E 05 F1 | 	add	fp, #16
24ddc     A7 FA 01 FB | 	rdlong	result1, fp
24de0     10 4E 85 F1 | 	sub	fp, #16
24de4                 | LR__3656
24de4     A7 F0 03 F6 | 	mov	ptra, fp
24de8     B2 00 A0 FD | 	call	#popregs_
24dec                 | __system___vfsread_ret
24dec     2D 00 64 FD | 	ret
24df0                 | 
24df0                 | __system____default_filbuf
24df0     04 4A 05 F6 | 	mov	COUNT_, #4
24df4     A8 00 A0 FD | 	call	#pushregs_
24df8     09 1F 02 F6 | 	mov	local01, arg01
24dfc     0F 21 02 FB | 	rdlong	local02, local01
24e00     0C 20 06 F1 | 	add	local02, #12
24e04     10 FB 09 FB | 	rdlong	result1, local02 wz
24e08     0C 20 86 F1 | 	sub	local02, #12
24e0c     20 00 90 5D |  if_ne	jmp	#LR__3660
24e10     14 20 06 F1 | 	add	local02, #20
24e14     10 FB 01 F6 | 	mov	result1, local02
24e18     04 20 86 F1 | 	sub	local02, #4
24e1c     10 FB 61 FC | 	wrlong	result1, local02
24e20     04 20 86 F1 | 	sub	local02, #4
24e24     02 00 80 FF 
24e28     10 01 68 FC | 	wrlong	##1024, local02
24e2c     0C 20 86 F1 | 	sub	local02, #12
24e30                 | LR__3660
24e30     14 1E 06 F1 | 	add	local01, #20
24e34     0F 23 02 FB | 	rdlong	local03, local01
24e38     11 25 02 F6 | 	mov	local04, local03
24e3c     14 1E 86 F1 | 	sub	local01, #20
24e40     13 24 46 F7 | 	zerox	local04, #19
24e44     14 22 46 F0 | 	shr	local03, #20
24e48     02 22 66 F0 | 	shl	local03, #2
24e4c     ED 22 02 F1 | 	add	local03, __methods__
24e50     11 23 02 FB | 	rdlong	local03, local03
24e54     10 20 06 F1 | 	add	local02, #16
24e58     10 15 02 FB | 	rdlong	arg02, local02
24e5c     04 20 86 F1 | 	sub	local02, #4
24e60     10 17 02 FB | 	rdlong	arg03, local02
24e64     0C 20 86 F1 | 	sub	local02, #12
24e68     0F 13 02 F6 | 	mov	arg01, local01
24e6c     F2 1E 02 F6 | 	mov	local01, objptr
24e70     12 E5 01 F6 | 	mov	objptr, local04
24e74     2D 22 62 FD | 	call	local03
24e78     0F E5 01 F6 | 	mov	objptr, local01
24e7c     FD 24 02 F6 | 	mov	local04, result1
24e80     00 24 56 F2 | 	cmps	local04, #0 wc
24e84     01 FA 65 C6 |  if_b	neg	result1, #1
24e88     28 00 90 CD |  if_b	jmp	#LR__3661
24e8c     10 25 62 FC | 	wrlong	local04, local02
24e90     10 20 06 F1 | 	add	local02, #16
24e94     10 23 02 FB | 	rdlong	local03, local02
24e98     0C 20 86 F1 | 	sub	local02, #12
24e9c     10 23 62 FC | 	wrlong	local03, local02
24ea0     04 20 06 F1 | 	add	local02, #4
24ea4     10 23 02 FB | 	rdlong	local03, local02
24ea8     01 22 46 F5 | 	or	local03, #1
24eac     10 23 62 FC | 	wrlong	local03, local02
24eb0     12 FB 01 F6 | 	mov	result1, local04
24eb4                 | LR__3661
24eb4     A7 F0 03 F6 | 	mov	ptra, fp
24eb8     B2 00 A0 FD | 	call	#popregs_
24ebc                 | __system____default_filbuf_ret
24ebc     2D 00 64 FD | 	ret
24ec0                 | 
24ec0                 | __system__getlower_1026
24ec0     41 12 56 F2 | 	cmps	arg01, #65 wc
24ec4     10 00 90 CD |  if_b	jmp	#LR__3670
24ec8     5B 12 56 F2 | 	cmps	arg01, #91 wc
24ecc     09 FB 01 C6 |  if_b	mov	result1, arg01
24ed0     20 FA 05 C1 |  if_b	add	result1, #32
24ed4     04 00 90 CD |  if_b	jmp	#__system__getlower_1026_ret
24ed8                 | LR__3670
24ed8     09 FB 01 F6 | 	mov	result1, arg01
24edc                 | __system__getlower_1026_ret
24edc     2D 00 64 FD | 	ret
24ee0                 | 
24ee0                 | __system___pat_match
24ee0     08 4A 05 F6 | 	mov	COUNT_, #8
24ee4     A8 00 A0 FD | 	call	#pushregs_
24ee8     09 1F 02 F6 | 	mov	local01, arg01
24eec                 | LR__3680
24eec     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
24ef0     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
24ef4     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
24ef8     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
24efc     2C 00 90 AD |  if_e	jmp	#LR__3681
24f00     0A 13 C2 FA | 	rdbyte	arg01, arg02
24f04     B8 FF BF FD | 	call	#__system__getlower_1026
24f08     FD 22 02 F6 | 	mov	local03, result1
24f0c     0F 13 C2 FA | 	rdbyte	arg01, local01
24f10     AC FF BF FD | 	call	#__system__getlower_1026
24f14     11 FB 09 F2 | 	cmp	result1, local03 wz
24f18     00 FA 05 56 |  if_ne	mov	result1, #0
24f1c     FC 00 90 5D |  if_ne	jmp	#LR__3689
24f20     01 1E 06 F1 | 	add	local01, #1
24f24     01 14 06 F1 | 	add	arg02, #1
24f28     C0 FF 9F FD | 	jmp	#LR__3680
24f2c                 | LR__3681
24f2c     0A 23 C2 FA | 	rdbyte	local03, arg02
24f30     2A 22 0E F2 | 	cmp	local03, #42 wz
24f34     D4 00 90 5D |  if_ne	jmp	#LR__3688
24f38     01 14 06 F1 | 	add	arg02, #1
24f3c     0A 21 C2 FA | 	rdbyte	local02, arg02
24f40     01 14 86 F1 | 	sub	arg02, #1
24f44     2E 20 0E F2 | 	cmp	local02, #46 wz
24f48     28 00 90 5D |  if_ne	jmp	#LR__3682
24f4c     02 14 06 F1 | 	add	arg02, #2
24f50     0A 21 C2 FA | 	rdbyte	local02, arg02
24f54     02 14 86 F1 | 	sub	arg02, #2
24f58     2A 20 0E F2 | 	cmp	local02, #42 wz
24f5c     03 14 06 A1 |  if_e	add	arg02, #3
24f60     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
24f64     03 14 86 A1 |  if_e	sub	arg02, #3
24f68     12 27 0A A6 |  if_e	mov	local05, local04 wz
24f6c     01 FA 05 A6 |  if_e	mov	result1, #1
24f70     A8 00 90 AD |  if_e	jmp	#LR__3689
24f74                 | LR__3682
24f74     01 14 06 F1 | 	add	arg02, #1
24f78     00 28 06 F6 | 	mov	local06, #0
24f7c     97 1E 48 FB | 	callpa	#(@LR__3685-@LR__3683)>>2,fcache_load_ptr_
24f80                 | LR__3683
24f80     14 2B 02 F6 | 	mov	local07, local06
24f84     0A 2B 02 F1 | 	add	local07, arg02
24f88     15 2B CA FA | 	rdbyte	local07, local07 wz
24f8c     14 27 02 56 |  if_ne	mov	local05, local06
24f90     01 26 06 51 |  if_ne	add	local05, #1
24f94     13 29 02 56 |  if_ne	mov	local06, local05
24f98     E4 FF 9F 5D |  if_ne	jmp	#LR__3683
24f9c     00 2C 06 F6 | 	mov	local08, #0
24fa0                 | LR__3684
24fa0     16 2B 02 F6 | 	mov	local07, local08
24fa4     0F 2B 02 F1 | 	add	local07, local01
24fa8     15 2B CA FA | 	rdbyte	local07, local07 wz
24fac     16 27 02 56 |  if_ne	mov	local05, local08
24fb0     01 26 06 51 |  if_ne	add	local05, #1
24fb4     13 2D 02 56 |  if_ne	mov	local08, local05
24fb8     E4 FF 9F 5D |  if_ne	jmp	#LR__3684
24fbc                 | LR__3685
24fbc     14 2D 52 F2 | 	cmps	local08, local06 wc
24fc0     00 FA 05 C6 |  if_b	mov	result1, #0
24fc4     54 00 90 CD |  if_b	jmp	#LR__3689
24fc8     16 21 02 F6 | 	mov	local02, local08
24fcc     14 21 82 F1 | 	sub	local02, local06
24fd0     10 1F 02 F1 | 	add	local01, local02
24fd4                 | LR__3686
24fd4     01 28 56 F2 | 	cmps	local06, #1 wc
24fd8     30 00 90 CD |  if_b	jmp	#LR__3687
24fdc     0F 13 C2 FA | 	rdbyte	arg01, local01
24fe0     DC FE BF FD | 	call	#__system__getlower_1026
24fe4     FD 2C 02 F6 | 	mov	local08, result1
24fe8     0A 13 C2 FA | 	rdbyte	arg01, arg02
24fec     D0 FE BF FD | 	call	#__system__getlower_1026
24ff0     FD 2C 0A F2 | 	cmp	local08, result1 wz
24ff4     00 FA 05 56 |  if_ne	mov	result1, #0
24ff8     20 00 90 5D |  if_ne	jmp	#LR__3689
24ffc     01 1E 06 F1 | 	add	local01, #1
25000     01 14 06 F1 | 	add	arg02, #1
25004     01 28 86 F1 | 	sub	local06, #1
25008     C8 FF 9F FD | 	jmp	#LR__3686
2500c                 | LR__3687
2500c                 | LR__3688
2500c     0A 2D CA FA | 	rdbyte	local08, arg02 wz
25010     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
25014     01 FA 05 A6 |  if_e	mov	result1, #1
25018     00 FA 05 56 |  if_ne	mov	result1, #0
2501c                 | LR__3689
2501c     A7 F0 03 F6 | 	mov	ptra, fp
25020     B2 00 A0 FD | 	call	#popregs_
25024                 | __system___pat_match_ret
25024     2D 00 64 FD | 	ret
25028                 | 
25028                 | _fatfs_cc_ff_uni2oem
25028     00 00 06 F6 | 	mov	_var01, #0
2502c     80 12 16 F2 | 	cmp	arg01, #128 wc
25030     09 01 02 C6 |  if_b	mov	_var01, arg01
25034     58 00 90 CD |  if_b	jmp	#LR__3694
25038     80 00 00 FF 
2503c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
25040     4C 00 90 3D |  if_ae	jmp	#LR__3693
25044     0A FB 31 F9 | 	getword	result1, arg02, #0
25048     01 00 00 FF 
2504c     52 FB 0D F2 | 	cmp	result1, ##850 wz
25050     3C 00 90 5D |  if_ne	jmp	#LR__3693
25054                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
25054     00 00 06 F6 | 	mov	_var01, #0
25058     97 14 48 FB | 	callpa	#(@LR__3691-@LR__3690)>>2,fcache_load_ptr_
2505c                 | LR__3690
2505c     00 FB 31 F9 | 	getword	result1, _var01, #0
25060     80 FA 15 F2 | 	cmp	result1, #128 wc
25064     1C 00 90 3D |  if_ae	jmp	#LR__3692
25068     00 FB 31 F9 | 	getword	result1, _var01, #0
2506c     01 FA 65 F0 | 	shl	result1, #1
25070     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
25074     FD FA E1 FA | 	rdword	result1, result1
25078     FD 12 0A F2 | 	cmp	arg01, result1 wz
2507c     01 00 06 51 |  if_ne	add	_var01, #1
25080     D8 FF 9F 5D |  if_ne	jmp	#LR__3690
25084                 | LR__3691
25084                 | LR__3692
25084     00 01 32 F9 | 	getword	_var01, _var01, #0
25088     80 00 06 F1 | 	add	_var01, #128
2508c     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
25090                 | LR__3693
25090                 | LR__3694
25090                 | ' 			c = (c + 0x80) & 0xFF;
25090                 | ' 		}
25090                 | ' 	}
25090                 | ' 
25090                 | ' 	return c;
25090     00 FB 01 F6 | 	mov	result1, _var01
25094                 | _fatfs_cc_ff_uni2oem_ret
25094     2D 00 64 FD | 	ret
25098                 | 
25098                 | _fatfs_cc_ff_oem2uni
25098     00 00 06 F6 | 	mov	_var01, #0
2509c     09 FB 31 F9 | 	getword	result1, arg01, #0
250a0     80 FA 15 F2 | 	cmp	result1, #128 wc
250a4     09 01 02 C6 |  if_b	mov	_var01, arg01
250a8     2C 00 90 CD |  if_b	jmp	#LR__3701
250ac     0A 15 32 F9 | 	getword	arg02, arg02, #0
250b0     01 00 00 FF 
250b4     52 15 0E F2 | 	cmp	arg02, ##850 wz
250b8     1C 00 90 5D |  if_ne	jmp	#LR__3700
250bc     09 FB 31 F9 | 	getword	result1, arg01, #0
250c0     00 FB 15 F2 | 	cmp	result1, #256 wc
250c4     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
250c8     80 12 86 C1 |  if_b	sub	arg01, #128
250cc     01 12 66 C0 |  if_b	shl	arg01, #1
250d0     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
250d4     09 01 E2 CA |  if_b	rdword	_var01, arg01
250d8                 | LR__3700
250d8                 | LR__3701
250d8                 | ' 		}
250d8                 | ' 	}
250d8                 | ' 
250d8                 | ' 	return c;
250d8     00 FB 01 F6 | 	mov	result1, _var01
250dc                 | _fatfs_cc_ff_oem2uni_ret
250dc     2D 00 64 FD | 	ret
250e0                 | 
250e0                 | _fatfs_cc_ff_wtoupper
250e0     09 01 02 F6 | 	mov	_var01, arg01
250e4     80 00 00 FF 
250e8     00 00 16 F2 | 	cmp	_var01, ##65536 wc
250ec     60 01 90 3D |  if_ae	jmp	#LR__3723
250f0     00 03 02 F6 | 	mov	_var02, _var01
250f4     01 01 32 F9 | 	getword	_var01, _var02, #0
250f8     08 00 00 FF 
250fc     00 00 16 F2 | 	cmp	_var01, ##4096 wc
25100     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
25104     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
25108     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
2510c     01 00 00 3F 
25110     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
25114     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
25118     01 00 00 3F 
2511c     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
25120     02 07 02 F6 | 	mov	_var04, _var03
25124                 | ' 		uc = (WORD)uni;
25124                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
25124                 | ' 		for (;;) {
25124                 | LR__3710
25124     03 09 E2 FA | 	rdword	_var05, _var04
25128     04 05 02 F6 | 	mov	_var03, _var05
2512c     0F 04 4E F7 | 	zerox	_var03, #15 wz
25130     02 06 06 F1 | 	add	_var04, #2
25134     14 01 90 AD |  if_e	jmp	#LR__3722
25138     01 05 32 F9 | 	getword	_var03, _var02, #0
2513c     04 01 32 F9 | 	getword	_var01, _var05, #0
25140     00 05 12 F2 | 	cmp	_var03, _var01 wc
25144     04 01 90 CD |  if_b	jmp	#LR__3722
25148     03 0B E2 FA | 	rdword	_var06, _var04
2514c     05 0D 32 F9 | 	getword	_var07, _var06, #0
25150     08 0C 46 F0 | 	shr	_var07, #8
25154     05 0B 32 F9 | 	getword	_var06, _var06, #0
25158     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
2515c     01 05 32 F9 | 	getword	_var03, _var02, #0
25160     04 0F 32 F9 | 	getword	_var08, _var05, #0
25164     05 01 32 F9 | 	getword	_var01, _var06, #0
25168     00 0F 02 F1 | 	add	_var08, _var01
2516c     07 05 52 F2 | 	cmps	_var03, _var08 wc
25170     02 06 06 F1 | 	add	_var04, #2
25174     C4 00 90 3D |  if_ae	jmp	#LR__3721
25178                 | ' 				switch (cmd) {
25178     06 11 32 F9 | 	getword	_var09, _var07, #0
2517c     09 10 26 F3 | 	fle	_var09, #9
25180     30 10 62 FD | 	jmprel	_var09
25184                 | LR__3711
25184     24 00 90 FD | 	jmp	#LR__3712
25188     3C 00 90 FD | 	jmp	#LR__3713
2518c     54 00 90 FD | 	jmp	#LR__3714
25190     5C 00 90 FD | 	jmp	#LR__3715
25194     64 00 90 FD | 	jmp	#LR__3716
25198     6C 00 90 FD | 	jmp	#LR__3717
2519c     74 00 90 FD | 	jmp	#LR__3718
251a0     7C 00 90 FD | 	jmp	#LR__3719
251a4     84 00 90 FD | 	jmp	#LR__3720
251a8     A0 00 90 FD | 	jmp	#LR__3722
251ac                 | LR__3712
251ac     01 03 32 F9 | 	getword	_var02, _var02, #0
251b0     04 09 32 F9 | 	getword	_var05, _var05, #0
251b4     04 03 82 F1 | 	sub	_var02, _var05
251b8     01 02 66 F0 | 	shl	_var02, #1
251bc     03 03 02 F1 | 	add	_var02, _var04
251c0     01 03 E2 FA | 	rdword	_var02, _var02
251c4     84 00 90 FD | 	jmp	#LR__3722
251c8                 | LR__3713
251c8     01 05 32 F9 | 	getword	_var03, _var02, #0
251cc     01 03 32 F9 | 	getword	_var02, _var02, #0
251d0     04 09 32 F9 | 	getword	_var05, _var05, #0
251d4     04 03 82 F1 | 	sub	_var02, _var05
251d8     01 02 06 F5 | 	and	_var02, #1
251dc     02 03 C2 F2 | 	subr	_var02, _var03
251e0     68 00 90 FD | 	jmp	#LR__3722
251e4                 | LR__3714
251e4     01 03 32 F9 | 	getword	_var02, _var02, #0
251e8     10 02 86 F1 | 	sub	_var02, #16
251ec     5C 00 90 FD | 	jmp	#LR__3722
251f0                 | LR__3715
251f0     01 03 32 F9 | 	getword	_var02, _var02, #0
251f4     20 02 86 F1 | 	sub	_var02, #32
251f8     50 00 90 FD | 	jmp	#LR__3722
251fc                 | LR__3716
251fc     01 03 32 F9 | 	getword	_var02, _var02, #0
25200     30 02 86 F1 | 	sub	_var02, #48
25204     44 00 90 FD | 	jmp	#LR__3722
25208                 | LR__3717
25208     01 03 32 F9 | 	getword	_var02, _var02, #0
2520c     1A 02 86 F1 | 	sub	_var02, #26
25210     38 00 90 FD | 	jmp	#LR__3722
25214                 | LR__3718
25214     01 03 32 F9 | 	getword	_var02, _var02, #0
25218     08 02 06 F1 | 	add	_var02, #8
2521c     2C 00 90 FD | 	jmp	#LR__3722
25220                 | LR__3719
25220     01 03 32 F9 | 	getword	_var02, _var02, #0
25224     50 02 86 F1 | 	sub	_var02, #80
25228     20 00 90 FD | 	jmp	#LR__3722
2522c                 | LR__3720
2522c     01 03 32 F9 | 	getword	_var02, _var02, #0
25230     0E 00 00 FF 
25234     60 02 86 F1 | 	sub	_var02, ##7264
25238                 | ' 				}
25238                 | ' 				break;
25238     10 00 90 FD | 	jmp	#LR__3722
2523c                 | LR__3721
2523c     0F 0C 4E F7 | 	zerox	_var07, #15 wz
25240     02 0A 06 AA |  if_e	mul	_var06, #2
25244     05 07 02 A1 |  if_e	add	_var04, _var06
25248     D8 FE 9F FD | 	jmp	#LR__3710
2524c                 | LR__3722
2524c     01 01 32 F9 | 	getword	_var01, _var02, #0
25250                 | LR__3723
25250                 | ' 		}
25250                 | ' 		uni = uc;
25250                 | ' 	}
25250                 | ' 
25250                 | ' 	return uni;
25250     00 FB 01 F6 | 	mov	result1, _var01
25254                 | _fatfs_cc_ff_wtoupper_ret
25254     2D 00 64 FD | 	ret
25258                 | 
25258                 | _fatfs_cc_strncpy
25258     09 01 02 F6 | 	mov	_var01, arg01
2525c     97 12 48 FB | 	callpa	#(@LR__3731-@LR__3730)>>2,fcache_load_ptr_
25260                 | ' 
25260                 | ' 	dscan = dst;
25260                 | ' 	sscan = src;
25260                 | ' 	count = n;
25260                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
25260                 | LR__3730
25260     01 16 86 F1 | 	sub	arg03, #1
25264     00 16 56 F2 | 	cmps	arg03, #0 wc
25268     18 00 90 CD |  if_b	jmp	#LR__3732
2526c     0A FB C1 FA | 	rdbyte	result1, arg02
25270     00 FB 41 FC | 	wrbyte	result1, _var01
25274     01 14 06 F1 | 	add	arg02, #1
25278     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2527c                 | ' 		continue;
2527c     01 00 06 F1 | 	add	_var01, #1
25280     DC FF 9F 5D |  if_ne	jmp	#LR__3730
25284                 | LR__3731
25284                 | LR__3732
25284     97 0C 48 FB | 	callpa	#(@LR__3734-@LR__3733)>>2,fcache_load_ptr_
25288                 | ' 	while (--count >= 0)
25288                 | LR__3733
25288     01 16 86 F1 | 	sub	arg03, #1
2528c     00 16 56 F2 | 	cmps	arg03, #0 wc
25290     00 03 02 36 |  if_ae	mov	_var02, _var01
25294     01 00 06 31 |  if_ae	add	_var01, #1
25298     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2529c     E8 FF 9F 3D |  if_ae	jmp	#LR__3733
252a0                 | LR__3734
252a0                 | ' 		*dscan++ = '\0';
252a0                 | ' 	return(dst);
252a0     09 FB 01 F6 | 	mov	result1, arg01
252a4                 | _fatfs_cc_strncpy_ret
252a4     2D 00 64 FD | 	ret
252a8                 | 
252a8                 | _fatfs_cc_memcmp
252a8                 | ' 	for (n = size; n > 0; n--)
252a8     00 16 0E F2 | 	cmp	arg03, #0 wz
252ac     28 00 90 AD |  if_e	jmp	#LR__3741
252b0                 | LR__3740
252b0     09 01 C2 FA | 	rdbyte	_var01, arg01
252b4     0A 03 C2 FA | 	rdbyte	_var02, arg02
252b8     01 01 0A F2 | 	cmp	_var01, _var02 wz
252bc     01 12 06 A1 |  if_e	add	arg01, #1
252c0     01 14 06 A1 |  if_e	add	arg02, #1
252c4                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
252c4     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
252c8     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
252cc     01 FB 81 51 |  if_ne	sub	result1, _var02
252d0     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
252d4     F6 17 6E FB | 	djnz	arg03, #LR__3740
252d8                 | LR__3741
252d8                 | ' 
252d8                 | ' 	return(0);
252d8     00 FA 05 F6 | 	mov	result1, #0
252dc                 | _fatfs_cc_memcmp_ret
252dc     2D 00 64 FD | 	ret
252e0                 | 
252e0                 | _fatfs_cc_strncmp
252e0     09 01 0A F6 | 	mov	_var01, arg01 wz
252e4     14 00 90 5D |  if_ne	jmp	#LR__3750
252e8                 | ' 		return scan2 ? -1 : 0;
252e8     00 14 0E F2 | 	cmp	arg02, #0 wz
252ec     01 02 66 56 |  if_ne	neg	_var02, #1
252f0     00 02 06 A6 |  if_e	mov	_var02, #0
252f4     01 FB 01 F6 | 	mov	result1, _var02
252f8     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
252fc                 | LR__3750
252fc     00 14 0E F2 | 	cmp	arg02, #0 wz
25300     01 FA 05 A6 |  if_e	mov	result1, #1
25304     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
25308     0B 05 02 F6 | 	mov	_var03, arg03
2530c     97 16 48 FB | 	callpa	#(@LR__3752-@LR__3751)>>2,fcache_load_ptr_
25310                 | ' 	count = n;
25310                 | ' 	do {
25310                 | LR__3751
25310     00 07 C2 FA | 	rdbyte	_var04, _var01
25314     0A 09 02 F6 | 	mov	_var05, arg02
25318     04 0B C2 FA | 	rdbyte	_var06, _var05
2531c     01 04 86 F1 | 	sub	_var03, #1
25320     00 04 56 F2 | 	cmps	_var03, #0 wc
25324     01 00 06 F1 | 	add	_var01, #1
25328     01 14 06 F1 | 	add	arg02, #1
2532c     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
25330     08 00 90 2D |  if_nc_and_z	jmp	#LR__3753
25334     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
25338     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3751
2533c                 | LR__3752
2533c                 | LR__3753
2533c     00 04 56 F2 | 	cmps	_var03, #0 wc
25340                 | ' 		return(0);
25340     00 FA 05 C6 |  if_b	mov	result1, #0
25344     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
25348     05 07 0A F2 | 	cmp	_var04, _var06 wz
2534c                 | ' 		return(0);
2534c     00 FA 05 A6 |  if_e	mov	result1, #0
25350     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
25354     00 06 0E F2 | 	cmp	_var04, #0 wz
25358                 | ' 		return(-1);
25358     01 FA 65 A6 |  if_e	neg	result1, #1
2535c     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
25360     00 0A 0E F2 | 	cmp	_var06, #0 wz
25364                 | ' 		return(1);
25364     01 FA 05 A6 |  if_e	mov	result1, #1
25368                 | ' 		return(c1 - c2);
25368     03 FB 01 56 |  if_ne	mov	result1, _var04
2536c     05 FB 81 51 |  if_ne	sub	result1, _var06
25370                 | _fatfs_cc_strncmp_ret
25370     2D 00 64 FD | 	ret
25374                 | 
25374                 | _fatfs_cc_strchr
25374                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
25374                 | ' 	while ((c = *s++) != (char) charwanted)
25374                 | LR__3760
25374     09 01 02 F6 | 	mov	_var01, arg01
25378     00 03 C2 FA | 	rdbyte	_var02, _var01
2537c     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
25380     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
25384     03 05 0A F2 | 	cmp	_var03, _var04 wz
25388     01 12 06 F1 | 	add	arg01, #1
2538c     14 00 90 AD |  if_e	jmp	#LR__3761
25390     01 05 02 F6 | 	mov	_var03, _var02
25394     07 04 4E F7 | 	zerox	_var03, #7 wz
25398     00 FA 05 A6 |  if_e	mov	result1, #0
2539c     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
253a0     D0 FF 9F FD | 	jmp	#LR__3760
253a4                 | LR__3761
253a4                 | ' 	return((char *)--s);
253a4     01 12 86 F1 | 	sub	arg01, #1
253a8     09 FB 01 F6 | 	mov	result1, arg01
253ac                 | _fatfs_cc_strchr_ret
253ac     2D 00 64 FD | 	ret
253b0                 | 
253b0                 | _fatfs_cc_disk_initialize
253b0     04 4A 05 F6 | 	mov	COUNT_, #4
253b4     A8 00 A0 FD | 	call	#pushregs_
253b8     40 F0 07 F1 | 	add	ptra, #64
253bc     04 4E 05 F1 | 	add	fp, #4
253c0     A7 12 42 FC | 	wrbyte	arg01, fp
253c4     01 00 00 FF 
253c8     14 E4 05 F1 | 	add	objptr, ##532
253cc     F2 18 02 FB | 	rdlong	arg04, objptr
253d0     2C 4E 05 F1 | 	add	fp, #44
253d4     A7 18 62 FC | 	wrlong	arg04, fp
253d8     04 E4 85 F1 | 	sub	objptr, #4
253dc     F2 18 02 FB | 	rdlong	arg04, objptr
253e0     04 4E 05 F1 | 	add	fp, #4
253e4     A7 18 62 FC | 	wrlong	arg04, fp
253e8     08 E4 05 F1 | 	add	objptr, #8
253ec     F2 18 02 FB | 	rdlong	arg04, objptr
253f0     04 4E 05 F1 | 	add	fp, #4
253f4     A7 18 62 FC | 	wrlong	arg04, fp
253f8     04 E4 05 F1 | 	add	objptr, #4
253fc     F2 18 02 FB | 	rdlong	arg04, objptr
25400     04 4E 05 F1 | 	add	fp, #4
25404     A7 18 62 FC | 	wrlong	arg04, fp
25408     04 E4 05 F1 | 	add	objptr, #4
2540c     F2 02 48 FC | 	wrbyte	#1, objptr
25410     01 00 00 FF 
25414     20 E4 85 F1 | 	sub	objptr, ##544
25418     38 4E 85 F1 | 	sub	fp, #56
2541c     A7 18 CA FA | 	rdbyte	arg04, fp wz
25420     04 4E 85 F1 | 	sub	fp, #4
25424                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
25424                 | '             return RES_NOTRDY;
25424     03 FA 05 56 |  if_ne	mov	result1, #3
25428     D8 05 90 5D |  if_ne	jmp	#LR__3788
2542c     13 00 00 FF 
25430     10 13 06 F6 | 	mov	arg01, ##10000
25434     9C 9A BF FD | 	call	#__system___waitus
25438     30 4E 05 F1 | 	add	fp, #48
2543c     A7 12 02 FB | 	rdlong	arg01, fp
25440     09 01 08 FC | 	wrpin	#0, arg01
25444     04 4E 05 F1 | 	add	fp, #4
25448     A7 12 02 FB | 	rdlong	arg01, fp
2544c     09 01 08 FC | 	wrpin	#0, arg01
25450     04 4E 05 F1 | 	add	fp, #4
25454     A7 12 02 FB | 	rdlong	arg01, fp
25458     09 01 08 FC | 	wrpin	#0, arg01
2545c     04 4E 05 F1 | 	add	fp, #4
25460     A7 12 02 FB | 	rdlong	arg01, fp
25464     09 00 80 FF 
25468     09 01 08 FC | 	wrpin	##4608, arg01
2546c     0C 4E 85 F1 | 	sub	fp, #12
25470     A7 12 02 FB | 	rdlong	arg01, fp
25474     59 12 62 FD | 	drvh	arg01
25478     04 4E 05 F1 | 	add	fp, #4
2547c     A7 12 02 FB | 	rdlong	arg01, fp
25480     59 12 62 FD | 	drvh	arg01
25484     04 4E 05 F1 | 	add	fp, #4
25488     A7 12 02 FB | 	rdlong	arg01, fp
2548c     59 12 62 FD | 	drvh	arg01
25490     04 4E 05 F1 | 	add	fp, #4
25494     A7 12 02 FB | 	rdlong	arg01, fp
25498     59 12 62 FD | 	drvh	arg01
2549c     20 4E 85 F1 | 	sub	fp, #32
254a0     00 04 80 FF 
254a4     A7 20 68 FC | 	wrlong	##524304, fp
254a8     04 4E 05 F1 | 	add	fp, #4
254ac     20 03 80 FF 
254b0     A7 90 68 FC | 	wrlong	##409672, fp
254b4     14 4E 05 F1 | 	add	fp, #20
254b8     A7 1E 02 FB | 	rdlong	local01, fp
254bc     18 4E 85 F1 | 	sub	fp, #24
254c0     A7 16 02 FB | 	rdlong	arg03, fp
254c4     40 1E 62 FD | 	dirl	local01
254c8     A0 03 80 FF 
254cc     0F 91 08 FC | 	wrpin	##475208, local01
254d0     0F 17 12 FC | 	wxpin	arg03, local01
254d4     0F 01 28 FC | 	wypin	#0, local01
254d8     41 1E 62 FD | 	dirh	local01
254dc     1C 4E 05 F1 | 	add	fp, #28
254e0     A7 20 02 FB | 	rdlong	local02, fp
254e4     10 1F 82 F1 | 	sub	local01, local02
254e8     07 1E 06 F5 | 	and	local01, #7
254ec     18 1E 66 F0 | 	shl	local01, #24
254f0     78 14 06 F6 | 	mov	arg02, #120
254f4     0F 15 42 F5 | 	or	arg02, local01
254f8     14 4E 85 F1 | 	sub	fp, #20
254fc     A7 14 62 FC | 	wrlong	arg02, fp
25500     14 4E 05 F1 | 	add	fp, #20
25504     A7 12 02 FB | 	rdlong	arg01, fp
25508     10 14 26 F4 | 	bith	arg02, #16
2550c     40 12 62 FD | 	dirl	arg01
25510     09 15 02 FC | 	wrpin	arg02, arg01
25514     09 3F 18 FC | 	wxpin	#31, arg01
25518     FF FF FF FF 
2551c     09 FF 2B FC | 	wypin	##-1, arg01
25520     41 12 62 FD | 	dirh	arg01
25524     04 4E 85 F1 | 	sub	fp, #4
25528     A7 14 02 FB | 	rdlong	arg02, fp
2552c     08 4E 05 F1 | 	add	fp, #8
25530     A7 22 02 FB | 	rdlong	local03, fp
25534     11 15 82 F1 | 	sub	arg02, local03
25538     07 14 06 F5 | 	and	arg02, #7
2553c     18 14 66 F0 | 	shl	arg02, #24
25540     14 4E 85 F1 | 	sub	fp, #20
25544     A7 14 62 FC | 	wrlong	arg02, fp
25548     29 00 00 FF 
2554c     7A 14 46 F5 | 	or	arg02, ##21114
25550     A7 14 62 FC | 	wrlong	arg02, fp
25554     14 4E 05 F1 | 	add	fp, #20
25558     A7 12 02 FB | 	rdlong	arg01, fp
2555c     40 12 62 FD | 	dirl	arg01
25560     09 15 02 FC | 	wrpin	arg02, arg01
25564     09 4F 18 FC | 	wxpin	#39, arg01
25568     09 01 28 FC | 	wypin	#0, arg01
2556c     41 12 62 FD | 	dirh	arg01
25570     28 4E 85 F1 | 	sub	fp, #40
25574     A7 12 02 F6 | 	mov	arg01, fp
25578     14 4E 85 F1 | 	sub	fp, #20
2557c     0A 14 06 F6 | 	mov	arg02, #10
25580     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1060
25584     00 12 06 F6 | 	mov	arg01, #0
25588     00 14 06 F6 | 	mov	arg02, #0
2558c     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25590     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1070
25594     64 12 06 F6 | 	mov	arg01, #100
25598     38 99 BF FD | 	call	#__system___waitus
2559c     14 4E 05 F1 | 	add	fp, #20
255a0     A7 12 02 F6 | 	mov	arg01, fp
255a4     14 4E 85 F1 | 	sub	fp, #20
255a8     0A 14 06 F6 | 	mov	arg02, #10
255ac     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1060
255b0     0C 4E 05 F1 | 	add	fp, #12
255b4     A7 00 48 FC | 	wrbyte	#0, fp
255b8     0C 4E 85 F1 | 	sub	fp, #12
255bc     00 12 06 F6 | 	mov	arg01, #0
255c0     00 14 06 F6 | 	mov	arg02, #0
255c4     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
255c8     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
255cc     01 18 0E F2 | 	cmp	arg04, #1 wz
255d0     B8 03 90 5D |  if_ne	jmp	#LR__3787
255d4     08 12 06 F6 | 	mov	arg01, #8
255d8     AA 15 06 F6 | 	mov	arg02, #426
255dc     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
255e0     FD FA E1 F8 | 	getbyte	result1, result1, #0
255e4     01 FA 0D F2 | 	cmp	result1, #1 wz
255e8     98 01 90 5D |  if_ne	jmp	#LR__3773
255ec     14 4E 05 F1 | 	add	fp, #20
255f0     A7 12 02 F6 | 	mov	arg01, fp
255f4     14 4E 85 F1 | 	sub	fp, #20
255f8     04 14 06 F6 | 	mov	arg02, #4
255fc     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1060
25600     16 4E 05 F1 | 	add	fp, #22
25604     A7 24 C2 FA | 	rdbyte	local04, fp
25608     16 4E 85 F1 | 	sub	fp, #22
2560c     01 24 0E F2 | 	cmp	local04, #1 wz
25610     17 4E 05 A1 |  if_e	add	fp, #23
25614     A7 22 C2 AA |  if_e	rdbyte	local03, fp
25618     17 4E 85 A1 |  if_e	sub	fp, #23
2561c     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
25620     68 03 90 5D |  if_ne	jmp	#LR__3786
25624                 | ' 				for (tmr = 1000; tmr; tmr--) {
25624     18 4E 05 F1 | 	add	fp, #24
25628     01 00 80 FF 
2562c     A7 D0 6B FC | 	wrlong	##1000, fp
25630     18 4E 85 F1 | 	sub	fp, #24
25634                 | LR__3770
25634     18 4E 05 F1 | 	add	fp, #24
25638     A7 1E 0A FB | 	rdlong	local01, fp wz
2563c     18 4E 85 F1 | 	sub	fp, #24
25640     3C 00 90 AD |  if_e	jmp	#LR__3771
25644     A9 12 06 F6 | 	mov	arg01, #169
25648     1E 14 C6 F9 | 	decod	arg02, #30
2564c     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25650     FD 24 02 F6 | 	mov	local04, result1
25654     07 24 4E F7 | 	zerox	local04, #7 wz
25658     24 00 90 AD |  if_e	jmp	#LR__3771
2565c     01 00 00 FF 
25660     E8 13 06 F6 | 	mov	arg01, ##1000
25664     6C 98 BF FD | 	call	#__system___waitus
25668     18 4E 05 F1 | 	add	fp, #24
2566c     A7 24 02 FB | 	rdlong	local04, fp
25670     01 24 86 F1 | 	sub	local04, #1
25674     A7 24 62 FC | 	wrlong	local04, fp
25678     18 4E 85 F1 | 	sub	fp, #24
2567c     B4 FF 9F FD | 	jmp	#LR__3770
25680                 | LR__3771
25680     18 4E 05 F1 | 	add	fp, #24
25684     A7 24 0A FB | 	rdlong	local04, fp wz
25688     18 4E 85 F1 | 	sub	fp, #24
2568c     4C 00 90 AD |  if_e	jmp	#LR__3772
25690     3A 12 06 F6 | 	mov	arg01, #58
25694     00 14 06 F6 | 	mov	arg02, #0
25698     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
2569c     FD 22 02 F6 | 	mov	local03, result1
256a0     07 22 4E F7 | 	zerox	local03, #7 wz
256a4     34 00 90 5D |  if_ne	jmp	#LR__3772
256a8     14 4E 05 F1 | 	add	fp, #20
256ac     A7 12 02 F6 | 	mov	arg01, fp
256b0     14 4E 85 F1 | 	sub	fp, #20
256b4     04 14 06 F6 | 	mov	arg02, #4
256b8     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1060
256bc     14 4E 05 F1 | 	add	fp, #20
256c0     A7 1E C2 FA | 	rdbyte	local01, fp
256c4     40 1E CE F7 | 	test	local01, #64 wz
256c8     0C 24 06 56 |  if_ne	mov	local04, #12
256cc     04 24 06 A6 |  if_e	mov	local04, #4
256d0     08 4E 85 F1 | 	sub	fp, #8
256d4     A7 24 42 FC | 	wrbyte	local04, fp
256d8     0C 4E 85 F1 | 	sub	fp, #12
256dc                 | LR__3772
256dc     14 24 06 FB | 	rdlong	local04, #20
256e0     18 4E 05 F1 | 	add	fp, #24
256e4     A7 24 62 FC | 	wrlong	local04, fp
256e8     0C 4E 05 F1 | 	add	fp, #12
256ec     A7 24 02 FB | 	rdlong	local04, fp
256f0     1B 24 26 F4 | 	bith	local04, #27
256f4     A7 24 62 FC | 	wrlong	local04, fp
256f8     0C 4E 85 F1 | 	sub	fp, #12
256fc     A7 24 02 FB | 	rdlong	local04, fp
25700     18 4E 85 F1 | 	sub	fp, #24
25704     68 78 04 FF 
25708     81 25 16 F2 | 	cmp	local04, ##150000001 wc
2570c     1C 4E 05 C1 |  if_b	add	fp, #28
25710     00 01 80 CF 
25714     A7 08 68 CC |  if_b	wrlong	##131076, fp
25718     1C 4E 85 C1 |  if_b	sub	fp, #28
2571c     6C 02 90 CD |  if_b	jmp	#LR__3786
25720     18 4E 05 F1 | 	add	fp, #24
25724     A7 24 02 FB | 	rdlong	local04, fp
25728     18 4E 85 F1 | 	sub	fp, #24
2572c     E1 F5 05 FF 
25730     01 24 16 F2 | 	cmp	local04, ##200000001 wc
25734     1C 4E 05 C1 |  if_b	add	fp, #28
25738     00 01 80 CF 
2573c     A7 0A 68 CC |  if_b	wrlong	##131077, fp
25740     1C 4E 85 C1 |  if_b	sub	fp, #28
25744     44 02 90 CD |  if_b	jmp	#LR__3786
25748     18 4E 05 F1 | 	add	fp, #24
2574c     A7 24 02 FB | 	rdlong	local04, fp
25750     18 4E 85 F1 | 	sub	fp, #24
25754     3B 58 08 FF 
25758     01 24 16 F2 | 	cmp	local04, ##280000001 wc
2575c     1C 4E 05 C1 |  if_b	add	fp, #28
25760     00 01 80 CF 
25764     A7 0C 68 CC |  if_b	wrlong	##131078, fp
25768     1C 4E 85 C1 |  if_b	sub	fp, #28
2576c     1C 02 90 CD |  if_b	jmp	#LR__3786
25770     1C 4E 05 F1 | 	add	fp, #28
25774     80 01 80 FF 
25778     A7 10 68 FC | 	wrlong	##196616, fp
2577c     1C 4E 85 F1 | 	sub	fp, #28
25780     08 02 90 FD | 	jmp	#LR__3786
25784                 | LR__3773
25784     A9 12 06 F6 | 	mov	arg01, #169
25788     00 14 06 F6 | 	mov	arg02, #0
2578c     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25790     FD 24 E2 F8 | 	getbyte	local04, result1, #0
25794     02 24 16 F2 | 	cmp	local04, #2 wc
25798     18 00 90 3D |  if_ae	jmp	#LR__3774
2579c     0C 4E 05 F1 | 	add	fp, #12
257a0     A7 04 48 FC | 	wrbyte	#2, fp
257a4     04 4E 05 F1 | 	add	fp, #4
257a8     A7 52 49 FC | 	wrbyte	#169, fp
257ac     10 4E 85 F1 | 	sub	fp, #16
257b0     14 00 90 FD | 	jmp	#LR__3775
257b4                 | LR__3774
257b4     0C 4E 05 F1 | 	add	fp, #12
257b8     A7 02 48 FC | 	wrbyte	#1, fp
257bc     04 4E 05 F1 | 	add	fp, #4
257c0     A7 02 48 FC | 	wrbyte	#1, fp
257c4     10 4E 85 F1 | 	sub	fp, #16
257c8                 | LR__3775
257c8                 | ' 				ty =  0x01 ; cmd =  (1) ;
257c8                 | ' 			}
257c8                 | ' 			for (tmr = 1000; tmr; tmr--) {
257c8     18 4E 05 F1 | 	add	fp, #24
257cc     01 00 80 FF 
257d0     A7 D0 6B FC | 	wrlong	##1000, fp
257d4     18 4E 85 F1 | 	sub	fp, #24
257d8                 | LR__3776
257d8     18 4E 05 F1 | 	add	fp, #24
257dc     A7 22 0A FB | 	rdlong	local03, fp wz
257e0     18 4E 85 F1 | 	sub	fp, #24
257e4     44 00 90 AD |  if_e	jmp	#LR__3777
257e8     10 4E 05 F1 | 	add	fp, #16
257ec     A7 12 C2 FA | 	rdbyte	arg01, fp
257f0     10 4E 85 F1 | 	sub	fp, #16
257f4     00 14 06 F6 | 	mov	arg02, #0
257f8     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
257fc     FD 24 02 F6 | 	mov	local04, result1
25800     07 24 4E F7 | 	zerox	local04, #7 wz
25804     24 00 90 AD |  if_e	jmp	#LR__3777
25808     01 00 00 FF 
2580c     E8 13 06 F6 | 	mov	arg01, ##1000
25810     C0 96 BF FD | 	call	#__system___waitus
25814     18 4E 05 F1 | 	add	fp, #24
25818     A7 24 02 FB | 	rdlong	local04, fp
2581c     01 24 86 F1 | 	sub	local04, #1
25820     A7 24 62 FC | 	wrlong	local04, fp
25824     18 4E 85 F1 | 	sub	fp, #24
25828     AC FF 9F FD | 	jmp	#LR__3776
2582c                 | LR__3777
2582c     18 4E 05 F1 | 	add	fp, #24
25830     A7 24 0A FB | 	rdlong	local04, fp wz
25834     18 4E 85 F1 | 	sub	fp, #24
25838     14 00 90 AD |  if_e	jmp	#LR__3778
2583c     10 12 06 F6 | 	mov	arg01, #16
25840     09 14 C6 F9 | 	decod	arg02, #9
25844     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25848     07 FA 4D F7 | 	zerox	result1, #7 wz
2584c     0C 00 90 AD |  if_e	jmp	#LR__3779
25850                 | LR__3778
25850     0C 4E 05 F1 | 	add	fp, #12
25854     A7 00 48 FC | 	wrbyte	#0, fp
25858     0C 4E 85 F1 | 	sub	fp, #12
2585c                 | LR__3779
2585c     14 24 06 FB | 	rdlong	local04, #20
25860     18 4E 05 F1 | 	add	fp, #24
25864     A7 24 62 FC | 	wrlong	local04, fp
25868     18 4E 85 F1 | 	sub	fp, #24
2586c     F0 FA 02 FF 
25870     01 25 16 F2 | 	cmp	local04, ##100000001 wc
25874     18 00 90 3D |  if_ae	jmp	#LR__3780
25878     24 4E 05 F1 | 	add	fp, #36
2587c     A7 24 02 FB | 	rdlong	local04, fp
25880     1B 24 26 F4 | 	bith	local04, #27
25884     A7 24 62 FC | 	wrlong	local04, fp
25888     24 4E 85 F1 | 	sub	fp, #36
2588c     2C 00 90 FD | 	jmp	#LR__3781
25890                 | LR__3780
25890     18 4E 05 F1 | 	add	fp, #24
25894     A7 24 02 FB | 	rdlong	local04, fp
25898     18 4E 85 F1 | 	sub	fp, #24
2589c     E1 F5 05 FF 
258a0     01 24 16 F2 | 	cmp	local04, ##200000001 wc
258a4     24 4E 05 C1 |  if_b	add	fp, #36
258a8     A7 24 02 CB |  if_b	rdlong	local04, fp
258ac     80 00 04 CF 
258b0     00 24 46 C5 |  if_b	or	local04, ##134283264
258b4     A7 24 62 CC |  if_b	wrlong	local04, fp
258b8     24 4E 85 C1 |  if_b	sub	fp, #36
258bc                 | LR__3781
258bc     18 4E 05 F1 | 	add	fp, #24
258c0     A7 24 02 FB | 	rdlong	local04, fp
258c4     18 4E 85 F1 | 	sub	fp, #24
258c8     F0 FA 02 FF 
258cc     01 25 16 F2 | 	cmp	local04, ##100000001 wc
258d0     1C 4E 05 C1 |  if_b	add	fp, #28
258d4     00 01 80 CF 
258d8     A7 08 68 CC |  if_b	wrlong	##131076, fp
258dc     1C 4E 85 C1 |  if_b	sub	fp, #28
258e0     A8 00 90 CD |  if_b	jmp	#LR__3785
258e4     18 4E 05 F1 | 	add	fp, #24
258e8     A7 24 02 FB | 	rdlong	local04, fp
258ec     18 4E 85 F1 | 	sub	fp, #24
258f0     68 78 04 FF 
258f4     81 25 16 F2 | 	cmp	local04, ##150000001 wc
258f8     1C 4E 05 C1 |  if_b	add	fp, #28
258fc     80 01 80 CF 
25900     A7 0C 68 CC |  if_b	wrlong	##196614, fp
25904     1C 4E 85 C1 |  if_b	sub	fp, #28
25908     80 00 90 CD |  if_b	jmp	#LR__3784
2590c     18 4E 05 F1 | 	add	fp, #24
25910     A7 24 02 FB | 	rdlong	local04, fp
25914     18 4E 85 F1 | 	sub	fp, #24
25918     E1 F5 05 FF 
2591c     01 24 16 F2 | 	cmp	local04, ##200000001 wc
25920     1C 4E 05 C1 |  if_b	add	fp, #28
25924     00 02 80 CF 
25928     A7 10 68 CC |  if_b	wrlong	##262152, fp
2592c     1C 4E 85 C1 |  if_b	sub	fp, #28
25930     58 00 90 CD |  if_b	jmp	#LR__3783
25934     18 4E 05 F1 | 	add	fp, #24
25938     A7 24 02 FB | 	rdlong	local04, fp
2593c     18 4E 85 F1 | 	sub	fp, #24
25940     59 73 07 FF 
25944     81 24 16 F2 | 	cmp	local04, ##250000001 wc
25948     1C 4E 05 C1 |  if_b	add	fp, #28
2594c     80 02 80 CF 
25950     A7 14 68 CC |  if_b	wrlong	##327690, fp
25954     1C 4E 85 C1 |  if_b	sub	fp, #28
25958     30 00 90 CD |  if_b	jmp	#LR__3782
2595c     18 4E 05 F1 | 	add	fp, #24
25960     A7 24 02 FB | 	rdlong	local04, fp
25964     18 4E 85 F1 | 	sub	fp, #24
25968     D1 F0 08 FF 
2596c     01 25 16 F2 | 	cmp	local04, ##300000001 wc
25970     1C 4E 05 C1 |  if_b	add	fp, #28
25974     00 03 80 CF 
25978     A7 18 68 CC |  if_b	wrlong	##393228, fp
2597c     1C 4E 85 F3 | 	sumc	fp, #28
25980     80 03 80 3F 
25984     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
25988     1C 4E 85 31 |  if_ae	sub	fp, #28
2598c                 | LR__3782
2598c                 | LR__3783
2598c                 | LR__3784
2598c                 | LR__3785
2598c                 | LR__3786
2598c                 | LR__3787
2598c     0C 4E 05 F1 | 	add	fp, #12
25990     A7 24 C2 FA | 	rdbyte	local04, fp
25994     01 00 00 FF 
25998     21 E4 05 F1 | 	add	objptr, ##545
2599c     F2 24 42 FC | 	wrbyte	local04, objptr
259a0     A7 1E CA FA | 	rdbyte	local01, fp wz
259a4     00 24 06 56 |  if_ne	mov	local04, #0
259a8     01 24 06 A6 |  if_e	mov	local04, #1
259ac     20 4E 05 F1 | 	add	fp, #32
259b0     A7 24 42 FC | 	wrbyte	local04, fp
259b4     A7 24 C2 FA | 	rdbyte	local04, fp
259b8     2C 4E 85 F1 | 	sub	fp, #44
259bc     01 E4 85 F1 | 	sub	objptr, #1
259c0     F2 24 42 FC | 	wrbyte	local04, objptr
259c4     01 00 00 FF 
259c8     20 E4 85 F1 | 	sub	objptr, ##544
259cc     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1070
259d0     34 4E 05 F1 | 	add	fp, #52
259d4     A7 12 02 FB | 	rdlong	arg01, fp
259d8     18 4E 85 F1 | 	sub	fp, #24
259dc     A7 14 02 FB | 	rdlong	arg02, fp
259e0     09 15 12 FC | 	wxpin	arg02, arg01
259e4     1C 4E 05 F1 | 	add	fp, #28
259e8     A7 12 02 FB | 	rdlong	arg01, fp
259ec     14 4E 85 F1 | 	sub	fp, #20
259f0     A7 14 02 FB | 	rdlong	arg02, fp
259f4     09 15 02 FC | 	wrpin	arg02, arg01
259f8                 | ' 
259f8                 | ' 		}
259f8                 | ' 	}
259f8                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
259f8                 | ' 	CardType = ty;
259f8                 | ' 	s = ty ? 0 :  0x01 ;
259f8                 | ' 	Stat = s;
259f8                 | ' 
259f8                 | ' 	deselect();
259f8                 | ' 
259f8                 | ' 
259f8                 | ' 	_wxpin( PIN_CLK, ck_div );
259f8                 | ' 	_wrpin( PIN_DI, spm_tx );
259f8                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
259f8                 | ' 	return s;
259f8     08 4E 05 F1 | 	add	fp, #8
259fc     A7 FA C1 FA | 	rdbyte	result1, fp
25a00     2C 4E 85 F1 | 	sub	fp, #44
25a04                 | LR__3788
25a04     A7 F0 03 F6 | 	mov	ptra, fp
25a08     B2 00 A0 FD | 	call	#popregs_
25a0c                 | _fatfs_cc_disk_initialize_ret
25a0c     2D 00 64 FD | 	ret
25a10                 | 
25a10                 | _fatfs_cc_disk_read
25a10     05 4A 05 F6 | 	mov	COUNT_, #5
25a14     A8 00 A0 FD | 	call	#pushregs_
25a18     0A 1F 02 F6 | 	mov	local01, arg02
25a1c     0B 21 02 F6 | 	mov	local02, arg03
25a20     0C 23 02 F6 | 	mov	local03, arg04
25a24     00 12 0E F2 | 	cmp	arg01, #0 wz
25a28     01 FA 05 56 |  if_ne	mov	result1, #1
25a2c                 | ' 
25a2c                 | ' 	return Stat;
25a2c     01 00 00 AF 
25a30     20 E4 05 A1 |  if_e	add	objptr, ##544
25a34     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
25a38     01 00 00 AF 
25a3c     20 E4 85 A1 |  if_e	sub	objptr, ##544
25a40     FD FA E1 F8 | 	getbyte	result1, result1, #0
25a44     01 FA CD F7 | 	test	result1, #1 wz
25a48     03 FA 05 56 |  if_ne	mov	result1, #3
25a4c     84 00 90 5D |  if_ne	jmp	#LR__3792
25a50     01 00 00 FF 
25a54     21 E4 05 F1 | 	add	objptr, ##545
25a58     F2 24 C2 FA | 	rdbyte	local04, objptr
25a5c     01 00 00 FF 
25a60     21 E4 85 F1 | 	sub	objptr, ##545
25a64     08 24 CE F7 | 	test	local04, #8 wz
25a68     09 20 66 A0 |  if_e	shl	local02, #9
25a6c     02 22 16 F2 | 	cmp	local03, #2 wc
25a70     12 24 06 36 |  if_ae	mov	local04, #18
25a74     11 24 06 C6 |  if_b	mov	local04, #17
25a78     10 15 02 F6 | 	mov	arg02, local02
25a7c     12 13 02 F6 | 	mov	arg01, local04
25a80     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25a84     FD 26 02 F6 | 	mov	local05, result1
25a88     07 26 4E F7 | 	zerox	local05, #7 wz
25a8c     30 00 90 5D |  if_ne	jmp	#LR__3791
25a90                 | ' 		do {
25a90                 | LR__3790
25a90     0F 13 02 F6 | 	mov	arg01, local01
25a94     09 14 C6 F9 | 	decod	arg02, #9
25a98     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1078
25a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
25aa0     01 00 00 5F 
25aa4     00 1E 06 51 |  if_ne	add	local01, ##512
25aa8     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3790
25aac     12 25 E2 F8 | 	getbyte	local04, local04, #0
25ab0     12 24 0E F2 | 	cmp	local04, #18 wz
25ab4     0C 12 06 A6 |  if_e	mov	arg01, #12
25ab8     00 14 06 A6 |  if_e	mov	arg02, #0
25abc     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1084
25ac0                 | LR__3791
25ac0     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1070
25ac4                 | ' 	}
25ac4                 | ' 	deselect();
25ac4                 | ' 
25ac4                 | ' 	return count ? RES_ERROR : RES_OK;
25ac4     00 22 0E F2 | 	cmp	local03, #0 wz
25ac8     01 26 06 56 |  if_ne	mov	local05, #1
25acc     00 26 06 A6 |  if_e	mov	local05, #0
25ad0     13 FB 01 F6 | 	mov	result1, local05
25ad4                 | LR__3792
25ad4     A7 F0 03 F6 | 	mov	ptra, fp
25ad8     B2 00 A0 FD | 	call	#popregs_
25adc                 | _fatfs_cc_disk_read_ret
25adc     2D 00 64 FD | 	ret
25ae0                 | 
25ae0                 | _fatfs_cc_disk_write
25ae0     04 4A 05 F6 | 	mov	COUNT_, #4
25ae4     A8 00 A0 FD | 	call	#pushregs_
25ae8     0A 1F 02 F6 | 	mov	local01, arg02
25aec     0C 21 02 F6 | 	mov	local02, arg04
25af0     0B 23 02 F6 | 	mov	local03, arg03
25af4     00 12 0E F2 | 	cmp	arg01, #0 wz
25af8     01 FA 05 56 |  if_ne	mov	result1, #1
25afc                 | ' 
25afc                 | ' 	return Stat;
25afc     01 00 00 AF 
25b00     20 E4 05 A1 |  if_e	add	objptr, ##544
25b04     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
25b08     01 00 00 AF 
25b0c     20 E4 85 A1 |  if_e	sub	objptr, ##544
25b10     FD FA E1 F8 | 	getbyte	result1, result1, #0
25b14     01 FA CD F7 | 	test	result1, #1 wz
25b18     03 FA 05 56 |  if_ne	mov	result1, #3
25b1c     D4 00 90 5D |  if_ne	jmp	#LR__3804
25b20     01 00 00 FF 
25b24     21 E4 05 F1 | 	add	objptr, ##545
25b28     F2 16 C2 FA | 	rdbyte	arg03, objptr
25b2c     01 00 00 FF 
25b30     21 E4 85 F1 | 	sub	objptr, ##545
25b34     08 16 CE F7 | 	test	arg03, #8 wz
25b38     09 22 66 A0 |  if_e	shl	local03, #9
25b3c     01 20 0E F2 | 	cmp	local02, #1 wz
25b40     30 00 90 5D |  if_ne	jmp	#LR__3800
25b44     18 12 06 F6 | 	mov	arg01, #24
25b48     11 15 02 F6 | 	mov	arg02, local03
25b4c     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25b50     FD 24 02 F6 | 	mov	local04, result1
25b54     07 24 4E F7 | 	zerox	local04, #7 wz
25b58     84 00 90 5D |  if_ne	jmp	#LR__3803
25b5c     0F 13 02 F6 | 	mov	arg01, local01
25b60     FE 14 06 F6 | 	mov	arg02, #254
25b64     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1080
25b68     00 FA 0D F2 | 	cmp	result1, #0 wz
25b6c     00 20 06 56 |  if_ne	mov	local02, #0
25b70     6C 00 90 FD | 	jmp	#LR__3803
25b74                 | LR__3800
25b74     01 00 00 FF 
25b78     21 E4 05 F1 | 	add	objptr, ##545
25b7c     F2 24 C2 FA | 	rdbyte	local04, objptr
25b80     01 00 00 FF 
25b84     21 E4 85 F1 | 	sub	objptr, ##545
25b88     06 24 CE F7 | 	test	local04, #6 wz
25b8c     97 12 06 56 |  if_ne	mov	arg01, #151
25b90     10 15 02 56 |  if_ne	mov	arg02, local02
25b94     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1084
25b98     11 15 02 F6 | 	mov	arg02, local03
25b9c     19 12 06 F6 | 	mov	arg01, #25
25ba0     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25ba4     FD 24 02 F6 | 	mov	local04, result1
25ba8     07 24 4E F7 | 	zerox	local04, #7 wz
25bac     30 00 90 5D |  if_ne	jmp	#LR__3802
25bb0                 | ' 			do {
25bb0                 | LR__3801
25bb0     0F 13 02 F6 | 	mov	arg01, local01
25bb4     FC 14 06 F6 | 	mov	arg02, #252
25bb8     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1080
25bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
25bc0     01 00 00 5F 
25bc4     00 1E 06 51 |  if_ne	add	local01, ##512
25bc8     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3801
25bcc     00 12 06 F6 | 	mov	arg01, #0
25bd0     FD 14 06 F6 | 	mov	arg02, #253
25bd4     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1080
25bd8     00 FA 0D F2 | 	cmp	result1, #0 wz
25bdc     01 20 06 A6 |  if_e	mov	local02, #1
25be0                 | LR__3802
25be0                 | LR__3803
25be0     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1070
25be4                 | ' 				count = 1;
25be4                 | ' 		}
25be4                 | ' 	}
25be4                 | ' 	deselect();
25be4                 | ' 
25be4                 | ' 	return count ? RES_ERROR : RES_OK;
25be4     00 20 0E F2 | 	cmp	local02, #0 wz
25be8     01 24 06 56 |  if_ne	mov	local04, #1
25bec     00 24 06 A6 |  if_e	mov	local04, #0
25bf0     12 FB 01 F6 | 	mov	result1, local04
25bf4                 | LR__3804
25bf4     A7 F0 03 F6 | 	mov	ptra, fp
25bf8     B2 00 A0 FD | 	call	#popregs_
25bfc                 | _fatfs_cc_disk_write_ret
25bfc     2D 00 64 FD | 	ret
25c00                 | 
25c00                 | _fatfs_cc_disk_ioctl
25c00     01 4A 05 F6 | 	mov	COUNT_, #1
25c04     A8 00 A0 FD | 	call	#pushregs_
25c08     30 F0 07 F1 | 	add	ptra, #48
25c0c     04 4E 05 F1 | 	add	fp, #4
25c10     A7 12 42 FC | 	wrbyte	arg01, fp
25c14     04 4E 05 F1 | 	add	fp, #4
25c18     A7 14 42 FC | 	wrbyte	arg02, fp
25c1c     04 4E 05 F1 | 	add	fp, #4
25c20     A7 16 62 FC | 	wrlong	arg03, fp
25c24     08 4E 85 F1 | 	sub	fp, #8
25c28     A7 12 CA FA | 	rdbyte	arg01, fp wz
25c2c     04 4E 85 F1 | 	sub	fp, #4
25c30     01 FA 05 56 |  if_ne	mov	result1, #1
25c34                 | ' 
25c34                 | ' 	return Stat;
25c34     01 00 00 AF 
25c38     20 E4 05 A1 |  if_e	add	objptr, ##544
25c3c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
25c40     01 00 00 AF 
25c44     20 E4 85 A1 |  if_e	sub	objptr, ##544
25c48     FD FA E1 F8 | 	getbyte	result1, result1, #0
25c4c     01 FA CD F7 | 	test	result1, #1 wz
25c50     03 FA 05 56 |  if_ne	mov	result1, #3
25c54     E4 01 90 5D |  if_ne	jmp	#LR__3818
25c58     10 4E 05 F1 | 	add	fp, #16
25c5c     A7 02 68 FC | 	wrlong	#1, fp
25c60                 | ' 
25c60                 | ' 	res = RES_ERROR;
25c60                 | ' 	switch (ctrl) {
25c60     08 4E 85 F1 | 	sub	fp, #8
25c64     A7 1E C2 FA | 	rdbyte	local01, fp
25c68     08 4E 85 F1 | 	sub	fp, #8
25c6c     04 1E 26 F3 | 	fle	local01, #4
25c70     30 1E 62 FD | 	jmprel	local01
25c74                 | LR__3810
25c74     10 00 90 FD | 	jmp	#LR__3811
25c78     24 00 90 FD | 	jmp	#LR__3812
25c7c     A0 01 90 FD | 	jmp	#LR__3816
25c80     80 01 90 FD | 	jmp	#LR__3815
25c84     98 01 90 FD | 	jmp	#LR__3816
25c88                 | LR__3811
25c88     B4 79 B0 FD | 	call	#_fatfs_cc_select_1074
25c8c     00 FA 0D F2 | 	cmp	result1, #0 wz
25c90     10 4E 05 51 |  if_ne	add	fp, #16
25c94     A7 00 68 5C |  if_ne	wrlong	#0, fp
25c98     10 4E 85 51 |  if_ne	sub	fp, #16
25c9c                 | ' 			break;
25c9c     8C 01 90 FD | 	jmp	#LR__3817
25ca0                 | LR__3812
25ca0     09 12 06 F6 | 	mov	arg01, #9
25ca4     00 14 06 F6 | 	mov	arg02, #0
25ca8     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25cac     FD 1E 02 F6 | 	mov	local01, result1
25cb0     07 1E 4E F7 | 	zerox	local01, #7 wz
25cb4     74 01 90 5D |  if_ne	jmp	#LR__3817
25cb8     18 4E 05 F1 | 	add	fp, #24
25cbc     A7 12 02 F6 | 	mov	arg01, fp
25cc0     18 4E 85 F1 | 	sub	fp, #24
25cc4     10 14 06 F6 | 	mov	arg02, #16
25cc8     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1078
25ccc     00 FA 0D F2 | 	cmp	result1, #0 wz
25cd0     58 01 90 AD |  if_e	jmp	#LR__3817
25cd4     18 4E 05 F1 | 	add	fp, #24
25cd8     A7 1E C2 FA | 	rdbyte	local01, fp
25cdc     18 4E 85 F1 | 	sub	fp, #24
25ce0     06 1E 46 F0 | 	shr	local01, #6
25ce4     01 1E 0E F2 | 	cmp	local01, #1 wz
25ce8     5C 00 90 5D |  if_ne	jmp	#LR__3813
25cec     21 4E 05 F1 | 	add	fp, #33
25cf0     A7 1E C2 FA | 	rdbyte	local01, fp
25cf4     01 4E 85 F1 | 	sub	fp, #1
25cf8     A7 FA C1 FA | 	rdbyte	result1, fp
25cfc     FD FA 31 F9 | 	getword	result1, result1, #0
25d00     08 FA 65 F0 | 	shl	result1, #8
25d04     FD 1E 02 F1 | 	add	local01, result1
25d08     01 4E 85 F1 | 	sub	fp, #1
25d0c     A7 FA C1 FA | 	rdbyte	result1, fp
25d10     3F FA 05 F5 | 	and	result1, #63
25d14     10 FA 65 F0 | 	shl	result1, #16
25d18     FD 1E 02 F1 | 	add	local01, result1
25d1c     01 1E 06 F1 | 	add	local01, #1
25d20     09 4E 05 F1 | 	add	fp, #9
25d24     A7 1E 62 FC | 	wrlong	local01, fp
25d28     1C 4E 85 F1 | 	sub	fp, #28
25d2c     A7 1E 02 FB | 	rdlong	local01, fp
25d30     1C 4E 05 F1 | 	add	fp, #28
25d34     A7 FA 01 FB | 	rdlong	result1, fp
25d38     28 4E 85 F1 | 	sub	fp, #40
25d3c     0A FA 65 F0 | 	shl	result1, #10
25d40     0F FB 61 FC | 	wrlong	result1, local01
25d44     AC 00 90 FD | 	jmp	#LR__3814
25d48                 | LR__3813
25d48     1D 4E 05 F1 | 	add	fp, #29
25d4c     A7 1E C2 FA | 	rdbyte	local01, fp
25d50     0F 1F 42 F8 | 	getnib	local01, local01, #0
25d54     05 4E 05 F1 | 	add	fp, #5
25d58     A7 FA C1 FA | 	rdbyte	result1, fp
25d5c     80 FA 05 F5 | 	and	result1, #128
25d60     07 FA C5 F0 | 	sar	result1, #7
25d64     FD 1E 02 F1 | 	add	local01, result1
25d68     01 4E 85 F1 | 	sub	fp, #1
25d6c     A7 FA C1 FA | 	rdbyte	result1, fp
25d70     03 FA 05 F5 | 	and	result1, #3
25d74     01 FA 65 F0 | 	shl	result1, #1
25d78     FD 1E 02 F1 | 	add	local01, result1
25d7c     02 1E 06 F1 | 	add	local01, #2
25d80     0D 4E 85 F1 | 	sub	fp, #13
25d84     A7 1E 42 FC | 	wrbyte	local01, fp
25d88     0C 4E 05 F1 | 	add	fp, #12
25d8c     A7 1E C2 FA | 	rdbyte	local01, fp
25d90     06 1E 46 F0 | 	shr	local01, #6
25d94     01 4E 85 F1 | 	sub	fp, #1
25d98     A7 FA C1 FA | 	rdbyte	result1, fp
25d9c     FD FA 31 F9 | 	getword	result1, result1, #0
25da0     02 FA 65 F0 | 	shl	result1, #2
25da4     FD 1E 02 F1 | 	add	local01, result1
25da8     01 4E 85 F1 | 	sub	fp, #1
25dac     A7 FA C1 FA | 	rdbyte	result1, fp
25db0     03 FA 05 F5 | 	and	result1, #3
25db4     FD FA 31 F9 | 	getword	result1, result1, #0
25db8     0A FA 65 F0 | 	shl	result1, #10
25dbc     FD 1E 02 F1 | 	add	local01, result1
25dc0     01 1E 06 F1 | 	add	local01, #1
25dc4     0A 4E 05 F1 | 	add	fp, #10
25dc8     A7 1E 62 FC | 	wrlong	local01, fp
25dcc     1C 4E 85 F1 | 	sub	fp, #28
25dd0     A7 1E 02 FB | 	rdlong	local01, fp
25dd4     1C 4E 05 F1 | 	add	fp, #28
25dd8     A7 FA 01 FB | 	rdlong	result1, fp
25ddc     14 4E 85 F1 | 	sub	fp, #20
25de0     A7 16 C2 FA | 	rdbyte	arg03, fp
25de4     14 4E 85 F1 | 	sub	fp, #20
25de8     09 16 86 F1 | 	sub	arg03, #9
25dec     0B FB 61 F0 | 	shl	result1, arg03
25df0     0F FB 61 FC | 	wrlong	result1, local01
25df4                 | LR__3814
25df4     10 4E 05 F1 | 	add	fp, #16
25df8     A7 00 68 FC | 	wrlong	#0, fp
25dfc     10 4E 85 F1 | 	sub	fp, #16
25e00                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
25e00                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
25e00                 | ' 					*(LBA_t*)buff = cs << (n - 9);
25e00                 | ' 				}
25e00                 | ' 				res = RES_OK;
25e00                 | ' 			}
25e00                 | ' 			break;
25e00     28 00 90 FD | 	jmp	#LR__3817
25e04                 | LR__3815
25e04     0C 4E 05 F1 | 	add	fp, #12
25e08     A7 1E 02 FB | 	rdlong	local01, fp
25e0c     0F 01 69 FC | 	wrlong	#128, local01
25e10     04 4E 05 F1 | 	add	fp, #4
25e14     A7 00 68 FC | 	wrlong	#0, fp
25e18     10 4E 85 F1 | 	sub	fp, #16
25e1c                 | ' 			*(DWORD*)buff = 128;
25e1c                 | ' 			res = RES_OK;
25e1c                 | ' 			break;
25e1c     0C 00 90 FD | 	jmp	#LR__3817
25e20                 | LR__3816
25e20     10 4E 05 F1 | 	add	fp, #16
25e24     A7 08 68 FC | 	wrlong	#4, fp
25e28     10 4E 85 F1 | 	sub	fp, #16
25e2c                 | LR__3817
25e2c     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1070
25e30                 | ' 			res = RES_PARERR;
25e30                 | ' 	}
25e30                 | ' 
25e30                 | ' 	deselect();
25e30                 | ' 
25e30                 | ' 	return res;
25e30     10 4E 05 F1 | 	add	fp, #16
25e34     A7 FA 01 FB | 	rdlong	result1, fp
25e38     10 4E 85 F1 | 	sub	fp, #16
25e3c                 | LR__3818
25e3c     A7 F0 03 F6 | 	mov	ptra, fp
25e40     B2 00 A0 FD | 	call	#popregs_
25e44                 | _fatfs_cc_disk_ioctl_ret
25e44     2D 00 64 FD | 	ret
25e48                 | 
25e48                 | _fatfs_cc_disk_setpins
25e48     00 12 0E F2 | 	cmp	arg01, #0 wz
25e4c     01 FA 65 56 |  if_ne	neg	result1, #1
25e50     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
25e54     01 00 00 FF 
25e58     10 E4 05 F1 | 	add	objptr, ##528
25e5c     F2 14 62 FC | 	wrlong	arg02, objptr
25e60     04 E4 05 F1 | 	add	objptr, #4
25e64     F2 16 62 FC | 	wrlong	arg03, objptr
25e68     04 E4 05 F1 | 	add	objptr, #4
25e6c     F2 18 62 FC | 	wrlong	arg04, objptr
25e70     04 E4 05 F1 | 	add	objptr, #4
25e74     F2 1A 62 FC | 	wrlong	arg05, objptr
25e78     01 00 00 FF 
25e7c     1C E4 85 F1 | 	sub	objptr, ##540
25e80     00 FA 05 F6 | 	mov	result1, #0
25e84                 | _fatfs_cc_disk_setpins_ret
25e84     2D 00 64 FD | 	ret
25e88                 | 
25e88                 | _fatfs_cc_tchar2uni
25e88     09 01 02 FB | 	rdlong	_var01, arg01
25e8c     00 03 02 F6 | 	mov	_var02, _var01
25e90     01 00 06 F1 | 	add	_var01, #1
25e94     00 05 02 F6 | 	mov	_var03, _var01
25e98     01 07 C2 FA | 	rdbyte	_var04, _var02
25e9c     80 06 CE F7 | 	test	_var04, #128 wz
25ea0     E8 00 90 AD |  if_e	jmp	#LR__3827
25ea4     03 09 02 F6 | 	mov	_var05, _var04
25ea8     E0 08 06 F5 | 	and	_var05, #224
25eac     C0 08 0E F2 | 	cmp	_var05, #192 wz
25eb0     1F 06 06 A5 |  if_e	and	_var04, #31
25eb4     01 0A 06 A6 |  if_e	mov	_var06, #1
25eb8     34 00 90 AD |  if_e	jmp	#LR__3821
25ebc     03 09 02 F6 | 	mov	_var05, _var04
25ec0     F0 08 06 F5 | 	and	_var05, #240
25ec4     E0 08 0E F2 | 	cmp	_var05, #224 wz
25ec8     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
25ecc     02 0A 06 A6 |  if_e	mov	_var06, #2
25ed0     1C 00 90 AD |  if_e	jmp	#LR__3820
25ed4     03 09 02 F6 | 	mov	_var05, _var04
25ed8     F8 08 06 F5 | 	and	_var05, #248
25edc     F0 08 0E F2 | 	cmp	_var05, #240 wz
25ee0     07 06 06 A5 |  if_e	and	_var04, #7
25ee4     03 0A 06 A6 |  if_e	mov	_var06, #3
25ee8                 | ' 			return 0xFFFFFFFF;
25ee8     01 FA 65 56 |  if_ne	neg	result1, #1
25eec     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
25ef0                 | LR__3820
25ef0                 | LR__3821
25ef0                 | ' 		}
25ef0                 | ' 		do {
25ef0                 | LR__3822
25ef0     02 0D C2 FA | 	rdbyte	_var07, _var03
25ef4     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
25ef8     C0 08 06 F5 | 	and	_var05, #192
25efc     80 08 0E F2 | 	cmp	_var05, #128 wz
25f00     01 04 06 F1 | 	add	_var03, #1
25f04     01 FA 65 56 |  if_ne	neg	result1, #1
25f08     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
25f0c     06 06 66 F0 | 	shl	_var04, #6
25f10     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
25f14     3F 02 06 F5 | 	and	_var02, #63
25f18     01 07 42 F5 | 	or	_var04, _var02
25f1c     F4 0B 6E FB | 	djnz	_var06, #LR__3822
25f20     80 06 16 F2 | 	cmp	_var04, #128 wc
25f24     24 00 90 CD |  if_b	jmp	#LR__3824
25f28     6C 00 00 FF 
25f2c     00 06 16 F2 | 	cmp	_var04, ##55296 wc
25f30     0C 00 90 CD |  if_b	jmp	#LR__3823
25f34     70 00 00 FF 
25f38     00 06 16 F2 | 	cmp	_var04, ##57344 wc
25f3c     0C 00 90 CD |  if_b	jmp	#LR__3824
25f40                 | LR__3823
25f40     80 08 00 FF 
25f44     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
25f48     08 00 90 CD |  if_b	jmp	#LR__3825
25f4c                 | LR__3824
25f4c     01 FA 65 F6 | 	neg	result1, #1
25f50     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
25f54                 | LR__3825
25f54     80 00 00 FF 
25f58     00 06 16 F2 | 	cmp	_var04, ##65536 wc
25f5c     2C 00 90 CD |  if_b	jmp	#LR__3826
25f60     03 03 02 F6 | 	mov	_var02, _var04
25f64     80 00 00 FF 
25f68     00 02 86 F1 | 	sub	_var02, ##65536
25f6c     06 02 66 F0 | 	shl	_var02, #6
25f70     80 FF 01 FF 
25f74     00 02 06 F5 | 	and	_var02, ##67043328
25f78     6E 00 6C FF 
25f7c     00 08 06 F6 | 	mov	_var05, ##-671032320
25f80     01 09 42 F5 | 	or	_var05, _var02
25f84     09 06 46 F7 | 	zerox	_var04, #9
25f88     04 07 42 F5 | 	or	_var04, _var05
25f8c                 | LR__3826
25f8c                 | LR__3827
25f8c     09 05 62 FC | 	wrlong	_var03, arg01
25f90                 | ' 	}
25f90                 | ' #line 811 "ff.c"
25f90                 | ' 	*str = p;
25f90                 | ' 	return uc;
25f90     03 FB 01 F6 | 	mov	result1, _var04
25f94                 | _fatfs_cc_tchar2uni_ret
25f94     2D 00 64 FD | 	ret
25f98                 | 
25f98                 | _fatfs_cc_put_utf
25f98     80 12 16 F2 | 	cmp	arg01, #128 wc
25f9c     18 00 90 3D |  if_ae	jmp	#LR__3830
25fa0     01 16 16 F2 | 	cmp	arg03, #1 wc
25fa4     00 FA 05 C6 |  if_b	mov	result1, #0
25fa8     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
25fac     0A 13 42 FC | 	wrbyte	arg01, arg02
25fb0                 | ' 		*buf = (TCHAR)chr;
25fb0                 | ' 		return 1;
25fb0     01 FA 05 F6 | 	mov	result1, #1
25fb4     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
25fb8                 | LR__3830
25fb8     04 00 00 FF 
25fbc     00 12 16 F2 | 	cmp	arg01, ##2048 wc
25fc0     40 00 90 3D |  if_ae	jmp	#LR__3831
25fc4     02 16 16 F2 | 	cmp	arg03, #2 wc
25fc8     00 FA 05 C6 |  if_b	mov	result1, #0
25fcc     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
25fd0     09 FB 01 F6 | 	mov	result1, arg01
25fd4     06 FA 45 F0 | 	shr	result1, #6
25fd8     1F FA 05 F5 | 	and	result1, #31
25fdc     C0 16 06 F6 | 	mov	arg03, #192
25fe0     FD 16 42 F5 | 	or	arg03, result1
25fe4     0A 17 42 FC | 	wrbyte	arg03, arg02
25fe8     01 14 06 F1 | 	add	arg02, #1
25fec     3F 12 06 F5 | 	and	arg01, #63
25ff0     80 FA 05 F6 | 	mov	result1, #128
25ff4     09 FB 41 F5 | 	or	result1, arg01
25ff8     0A FB 41 FC | 	wrbyte	result1, arg02
25ffc                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
25ffc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
25ffc                 | ' 		return 2;
25ffc     02 FA 05 F6 | 	mov	result1, #2
26000     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
26004                 | LR__3831
26004     80 00 00 FF 
26008     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2600c     70 00 90 3D |  if_ae	jmp	#LR__3834
26010     03 16 16 F2 | 	cmp	arg03, #3 wc
26014     18 00 90 CD |  if_b	jmp	#LR__3832
26018     6C 00 00 FF 
2601c     00 12 16 F2 | 	cmp	arg01, ##55296 wc
26020     14 00 90 CD |  if_b	jmp	#LR__3833
26024     70 00 00 FF 
26028     00 12 16 F2 | 	cmp	arg01, ##57344 wc
2602c     08 00 90 3D |  if_ae	jmp	#LR__3833
26030                 | LR__3832
26030     00 FA 05 F6 | 	mov	result1, #0
26034     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
26038                 | LR__3833
26038     09 FB 59 F8 | 	getnib	result1, arg01, #3
2603c     E0 16 06 F6 | 	mov	arg03, #224
26040     FD 16 42 F5 | 	or	arg03, result1
26044     0A 17 42 FC | 	wrbyte	arg03, arg02
26048     01 14 06 F1 | 	add	arg02, #1
2604c     09 FB 01 F6 | 	mov	result1, arg01
26050     06 FA 45 F0 | 	shr	result1, #6
26054     3F FA 05 F5 | 	and	result1, #63
26058     80 16 06 F6 | 	mov	arg03, #128
2605c     FD 16 42 F5 | 	or	arg03, result1
26060     0A 17 42 FC | 	wrbyte	arg03, arg02
26064     01 14 06 F1 | 	add	arg02, #1
26068     3F 12 06 F5 | 	and	arg01, #63
2606c     80 FA 05 F6 | 	mov	result1, #128
26070     09 FB 41 F5 | 	or	result1, arg01
26074     0A FB 41 FC | 	wrbyte	result1, arg02
26078                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
26078                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
26078                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
26078                 | ' 		return 3;
26078     03 FA 05 F6 | 	mov	result1, #3
2607c     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
26080                 | LR__3834
26080     04 16 16 F2 | 	cmp	arg03, #4 wc
26084     00 FA 05 C6 |  if_b	mov	result1, #0
26088     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2608c     09 01 02 F6 | 	mov	_var01, arg01
26090     E0 01 06 F4 | 	bitl	_var01, #480
26094     00 00 6C FF 
26098     00 00 86 F1 | 	sub	_var01, ##-671088640
2609c     06 00 46 F0 | 	shr	_var01, #6
260a0     09 13 32 F9 | 	getword	arg01, arg01, #0
260a4     6E 00 00 FF 
260a8     00 12 86 F1 | 	sub	arg01, ##56320
260ac     00 08 00 FF 
260b0     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
260b4     02 00 00 CF 
260b8     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
260bc     00 FA 05 36 |  if_ae	mov	result1, #0
260c0     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
260c4     09 01 42 F5 | 	or	_var01, arg01
260c8     80 00 00 FF 
260cc     00 00 06 F1 | 	add	_var01, ##65536
260d0     00 FB 01 F6 | 	mov	result1, _var01
260d4     12 FA 45 F0 | 	shr	result1, #18
260d8     07 FA 05 F5 | 	and	result1, #7
260dc     F0 16 06 F6 | 	mov	arg03, #240
260e0     FD 16 42 F5 | 	or	arg03, result1
260e4     0A 17 42 FC | 	wrbyte	arg03, arg02
260e8     01 14 06 F1 | 	add	arg02, #1
260ec     00 FB 01 F6 | 	mov	result1, _var01
260f0     0C FA 45 F0 | 	shr	result1, #12
260f4     3F FA 05 F5 | 	and	result1, #63
260f8     80 16 06 F6 | 	mov	arg03, #128
260fc     FD 16 42 F5 | 	or	arg03, result1
26100     0A 17 42 FC | 	wrbyte	arg03, arg02
26104     01 14 06 F1 | 	add	arg02, #1
26108     00 FB 01 F6 | 	mov	result1, _var01
2610c     06 FA 45 F0 | 	shr	result1, #6
26110     3F FA 05 F5 | 	and	result1, #63
26114     80 16 06 F6 | 	mov	arg03, #128
26118     FD 16 42 F5 | 	or	arg03, result1
2611c     0A 17 42 FC | 	wrbyte	arg03, arg02
26120     01 14 06 F1 | 	add	arg02, #1
26124     3F 00 06 F5 | 	and	_var01, #63
26128     80 FA 05 F6 | 	mov	result1, #128
2612c     00 FB 41 F5 | 	or	result1, _var01
26130     0A FB 41 FC | 	wrbyte	result1, arg02
26134                 | ' 	chr = (hc | chr) + 0x10000;
26134                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
26134                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
26134                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
26134                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
26134                 | ' 	return 4;
26134     04 FA 05 F6 | 	mov	result1, #4
26138                 | _fatfs_cc_put_utf_ret
26138     2D 00 64 FD | 	ret
2613c                 | 
2613c                 | _fatfs_cc_sync_window
2613c     02 4A 05 F6 | 	mov	COUNT_, #2
26140     A8 00 A0 FD | 	call	#pushregs_
26144     09 1F 02 F6 | 	mov	local01, arg01
26148     00 20 06 F6 | 	mov	local02, #0
2614c     03 1E 06 F1 | 	add	local01, #3
26150     0F FB C9 FA | 	rdbyte	result1, local01 wz
26154     03 1E 86 F1 | 	sub	local01, #3
26158     A4 00 90 AD |  if_e	jmp	#LR__3842
2615c     01 1E 06 F1 | 	add	local01, #1
26160     0F 13 C2 FA | 	rdbyte	arg01, local01
26164     33 1E 06 F1 | 	add	local01, #51
26168     0F 15 02 F6 | 	mov	arg02, local01
2616c     04 1E 86 F1 | 	sub	local01, #4
26170     0F 17 02 FB | 	rdlong	arg03, local01
26174     30 1E 86 F1 | 	sub	local01, #48
26178     01 18 06 F6 | 	mov	arg04, #1
2617c     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
26180     00 FA 0D F2 | 	cmp	result1, #0 wz
26184     74 00 90 5D |  if_ne	jmp	#LR__3840
26188     03 1E 06 F1 | 	add	local01, #3
2618c     0F 01 48 FC | 	wrbyte	#0, local01
26190     2D 1E 06 F1 | 	add	local01, #45
26194     0F FB 01 FB | 	rdlong	result1, local01
26198     0C 1E 86 F1 | 	sub	local01, #12
2619c     0F 19 02 FB | 	rdlong	arg04, local01
261a0     0C FB 81 F1 | 	sub	result1, arg04
261a4     08 1E 86 F1 | 	sub	local01, #8
261a8     0F 19 02 FB | 	rdlong	arg04, local01
261ac     1C 1E 86 F1 | 	sub	local01, #28
261b0     0C FB 11 F2 | 	cmp	result1, arg04 wc
261b4     48 00 90 3D |  if_ae	jmp	#LR__3841
261b8     02 1E 06 F1 | 	add	local01, #2
261bc     0F 19 C2 FA | 	rdbyte	arg04, local01
261c0     02 1E 86 F1 | 	sub	local01, #2
261c4     02 18 0E F2 | 	cmp	arg04, #2 wz
261c8     34 00 90 5D |  if_ne	jmp	#LR__3841
261cc     01 1E 06 F1 | 	add	local01, #1
261d0     0F 13 C2 FA | 	rdbyte	arg01, local01
261d4     33 1E 06 F1 | 	add	local01, #51
261d8     0F 15 02 F6 | 	mov	arg02, local01
261dc     04 1E 86 F1 | 	sub	local01, #4
261e0     0F 17 02 FB | 	rdlong	arg03, local01
261e4     14 1E 86 F1 | 	sub	local01, #20
261e8     0F 1F 02 FB | 	rdlong	local01, local01
261ec     0F 17 02 F1 | 	add	arg03, local01
261f0     01 18 06 F6 | 	mov	arg04, #1
261f4     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
261f8     04 00 90 FD | 	jmp	#LR__3841
261fc                 | LR__3840
261fc     01 20 06 F6 | 	mov	local02, #1
26200                 | LR__3841
26200                 | LR__3842
26200                 | ' 			res = FR_DISK_ERR;
26200                 | ' 		}
26200                 | ' 	}
26200                 | ' 	return res;
26200     10 FB 01 F6 | 	mov	result1, local02
26204     A7 F0 03 F6 | 	mov	ptra, fp
26208     B2 00 A0 FD | 	call	#popregs_
2620c                 | _fatfs_cc_sync_window_ret
2620c     2D 00 64 FD | 	ret
26210                 | 
26210                 | _fatfs_cc_move_window
26210     03 4A 05 F6 | 	mov	COUNT_, #3
26214     A8 00 A0 FD | 	call	#pushregs_
26218     09 1F 02 F6 | 	mov	local01, arg01
2621c     0A 21 02 F6 | 	mov	local02, arg02
26220     00 22 06 F6 | 	mov	local03, #0
26224     30 1E 06 F1 | 	add	local01, #48
26228     0F 19 02 FB | 	rdlong	arg04, local01
2622c     30 1E 86 F1 | 	sub	local01, #48
26230     0C 21 0A F2 | 	cmp	local02, arg04 wz
26234     40 00 90 AD |  if_e	jmp	#LR__3851
26238     0F 13 02 F6 | 	mov	arg01, local01
2623c     FC FE BF FD | 	call	#_fatfs_cc_sync_window
26240     FD 22 0A F6 | 	mov	local03, result1 wz
26244     30 00 90 5D |  if_ne	jmp	#LR__3850
26248     01 1E 06 F1 | 	add	local01, #1
2624c     0F 13 C2 FA | 	rdbyte	arg01, local01
26250     33 1E 06 F1 | 	add	local01, #51
26254     0F 15 02 F6 | 	mov	arg02, local01
26258     10 17 02 F6 | 	mov	arg03, local02
2625c     01 18 06 F6 | 	mov	arg04, #1
26260     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
26264     00 FA 0D F2 | 	cmp	result1, #0 wz
26268     01 20 66 56 |  if_ne	neg	local02, #1
2626c     01 22 06 56 |  if_ne	mov	local03, #1
26270     04 1E 86 F1 | 	sub	local01, #4
26274     0F 21 62 FC | 	wrlong	local02, local01
26278                 | LR__3850
26278                 | LR__3851
26278                 | ' 				sect = (LBA_t)0 - 1;
26278                 | ' 				res = FR_DISK_ERR;
26278                 | ' 			}
26278                 | ' 			fs->winsect = sect;
26278                 | ' 		}
26278                 | ' 	}
26278                 | ' 	return res;
26278     11 FB 01 F6 | 	mov	result1, local03
2627c     A7 F0 03 F6 | 	mov	ptra, fp
26280     B2 00 A0 FD | 	call	#popregs_
26284                 | _fatfs_cc_move_window_ret
26284     2D 00 64 FD | 	ret
26288                 | 
26288                 | _fatfs_cc_sync_fs
26288     02 4A 05 F6 | 	mov	COUNT_, #2
2628c     A8 00 A0 FD | 	call	#pushregs_
26290     09 1F 02 F6 | 	mov	local01, arg01
26294     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
26298     FD 20 0A F6 | 	mov	local02, result1 wz
2629c     D8 00 90 5D |  if_ne	jmp	#LR__3861
262a0     0F 19 C2 FA | 	rdbyte	arg04, local01
262a4     03 18 0E F2 | 	cmp	arg04, #3 wz
262a8     04 1E 06 A1 |  if_e	add	local01, #4
262ac     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
262b0     04 1E 86 A1 |  if_e	sub	local01, #4
262b4     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
262b8     A0 00 90 5D |  if_ne	jmp	#LR__3860
262bc     34 1E 06 F1 | 	add	local01, #52
262c0     0F 13 02 F6 | 	mov	arg01, local01
262c4     00 14 06 F6 | 	mov	arg02, #0
262c8     09 16 C6 F9 | 	decod	arg03, #9
262cc     98 00 A0 FD | 	call	#\builtin_bytefill_
262d0     0F 13 02 F6 | 	mov	arg01, local01
262d4     FE 13 06 F1 | 	add	arg01, #510
262d8     55 00 80 FF 
262dc     09 AB 58 FC | 	wrword	##43605, arg01
262e0     A9 B0 A0 FF 
262e4     0F A5 68 FC | 	wrlong	##1096897106, local01
262e8     0F 13 02 F6 | 	mov	arg01, local01
262ec     E4 13 06 F1 | 	add	arg01, #484
262f0     B9 A0 B0 FF 
262f4     09 E5 68 FC | 	wrlong	##1631679090, arg01
262f8     0F 13 02 F6 | 	mov	arg01, local01
262fc     E8 13 06 F1 | 	add	arg01, #488
26300     20 1E 86 F1 | 	sub	local01, #32
26304     0F 15 02 FB | 	rdlong	arg02, local01
26308     09 15 62 FC | 	wrlong	arg02, arg01
2630c     20 1E 06 F1 | 	add	local01, #32
26310     0F 13 02 F6 | 	mov	arg01, local01
26314     EC 13 06 F1 | 	add	arg01, #492
26318     24 1E 86 F1 | 	sub	local01, #36
2631c     0F 15 02 FB | 	rdlong	arg02, local01
26320     09 15 62 FC | 	wrlong	arg02, arg01
26324     10 1E 06 F1 | 	add	local01, #16
26328     0F 17 02 FB | 	rdlong	arg03, local01
2632c     01 16 06 F1 | 	add	arg03, #1
26330     10 1E 06 F1 | 	add	local01, #16
26334     0F 17 62 FC | 	wrlong	arg03, local01
26338     2F 1E 86 F1 | 	sub	local01, #47
2633c     0F 13 C2 FA | 	rdbyte	arg01, local01
26340     33 1E 06 F1 | 	add	local01, #51
26344     0F 15 02 F6 | 	mov	arg02, local01
26348     01 18 06 F6 | 	mov	arg04, #1
2634c     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
26350     30 1E 86 F1 | 	sub	local01, #48
26354     0F 01 48 FC | 	wrbyte	#0, local01
26358     04 1E 86 F1 | 	sub	local01, #4
2635c                 | LR__3860
2635c     01 1E 06 F1 | 	add	local01, #1
26360     0F 13 C2 FA | 	rdbyte	arg01, local01
26364     00 14 06 F6 | 	mov	arg02, #0
26368     00 16 06 F6 | 	mov	arg03, #0
2636c     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
26370     00 FA 0D F2 | 	cmp	result1, #0 wz
26374     01 20 06 56 |  if_ne	mov	local02, #1
26378                 | LR__3861
26378                 | ' 	}
26378                 | ' 
26378                 | ' 	return res;
26378     10 FB 01 F6 | 	mov	result1, local02
2637c     A7 F0 03 F6 | 	mov	ptra, fp
26380     B2 00 A0 FD | 	call	#popregs_
26384                 | _fatfs_cc_sync_fs_ret
26384     2D 00 64 FD | 	ret
26388                 | 
26388                 | _fatfs_cc_clst2sect
26388     02 14 86 F1 | 	sub	arg02, #2
2638c     18 12 06 F1 | 	add	arg01, #24
26390     09 01 02 FB | 	rdlong	_var01, arg01
26394     18 12 86 F1 | 	sub	arg01, #24
26398     02 00 86 F1 | 	sub	_var01, #2
2639c     00 15 12 F2 | 	cmp	arg02, _var01 wc
263a0     00 FA 05 36 |  if_ae	mov	result1, #0
263a4     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
263a8     0A 12 06 F1 | 	add	arg01, #10
263ac     09 01 E2 FA | 	rdword	_var01, arg01
263b0     0A 01 02 FD | 	qmul	_var01, arg02
263b4                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
263b4     22 12 06 F1 | 	add	arg01, #34
263b8     09 FB 01 FB | 	rdlong	result1, arg01
263bc     18 00 62 FD | 	getqx	_var01
263c0     00 FB 01 F1 | 	add	result1, _var01
263c4                 | _fatfs_cc_clst2sect_ret
263c4     2D 00 64 FD | 	ret
263c8                 | 
263c8                 | _fatfs_cc_get_fat
263c8     07 4A 05 F6 | 	mov	COUNT_, #7
263cc     A8 00 A0 FD | 	call	#pushregs_
263d0     0A 1F 02 F6 | 	mov	local01, arg02
263d4     09 21 02 FB | 	rdlong	local02, arg01
263d8     02 1E 16 F2 | 	cmp	local01, #2 wc
263dc     14 00 90 CD |  if_b	jmp	#LR__3870
263e0     18 20 06 F1 | 	add	local02, #24
263e4     10 23 02 FB | 	rdlong	local03, local02
263e8     18 20 86 F1 | 	sub	local02, #24
263ec     11 1F 12 F2 | 	cmp	local01, local03 wc
263f0     08 00 90 CD |  if_b	jmp	#LR__3871
263f4                 | LR__3870
263f4     01 24 06 F6 | 	mov	local04, #1
263f8     60 01 90 FD | 	jmp	#LR__3878
263fc                 | LR__3871
263fc     01 24 66 F6 | 	neg	local04, #1
26400                 | ' 		val = 0xFFFFFFFF;
26400                 | ' 
26400                 | ' 		switch (fs->fs_type) {
26400     10 27 C2 FA | 	rdbyte	local05, local02
26404     01 26 86 F1 | 	sub	local05, #1
26408     03 26 26 F3 | 	fle	local05, #3
2640c     30 26 62 FD | 	jmprel	local05
26410                 | LR__3872
26410     0C 00 90 FD | 	jmp	#LR__3873
26414     B8 00 90 FD | 	jmp	#LR__3874
26418     F8 00 90 FD | 	jmp	#LR__3875
2641c     38 01 90 FD | 	jmp	#LR__3876
26420                 | LR__3873
26420     0F 27 02 F6 | 	mov	local05, local01
26424     0F 13 02 F6 | 	mov	arg01, local01
26428     01 12 46 F0 | 	shr	arg01, #1
2642c     09 27 02 F1 | 	add	local05, arg01
26430     10 13 02 F6 | 	mov	arg01, local02
26434     13 29 02 F6 | 	mov	local06, local05
26438     09 28 46 F0 | 	shr	local06, #9
2643c     24 20 06 F1 | 	add	local02, #36
26440     10 15 02 FB | 	rdlong	arg02, local02
26444     24 20 86 F1 | 	sub	local02, #36
26448     14 15 02 F1 | 	add	arg02, local06
2644c     C0 FD BF FD | 	call	#_fatfs_cc_move_window
26450     00 FA 0D F2 | 	cmp	result1, #0 wz
26454     04 01 90 5D |  if_ne	jmp	#LR__3877
26458     13 29 02 F6 | 	mov	local06, local05
2645c     FF 29 06 F5 | 	and	local06, #511
26460     34 20 06 F1 | 	add	local02, #52
26464     10 29 02 F1 | 	add	local06, local02
26468     14 2B C2 FA | 	rdbyte	local07, local06
2646c     34 20 86 F1 | 	sub	local02, #52
26470     10 13 02 F6 | 	mov	arg01, local02
26474     01 26 06 F1 | 	add	local05, #1
26478     13 29 02 F6 | 	mov	local06, local05
2647c     09 28 46 F0 | 	shr	local06, #9
26480     24 20 06 F1 | 	add	local02, #36
26484     10 15 02 FB | 	rdlong	arg02, local02
26488     24 20 86 F1 | 	sub	local02, #36
2648c     14 15 02 F1 | 	add	arg02, local06
26490     7C FD BF FD | 	call	#_fatfs_cc_move_window
26494     00 FA 0D F2 | 	cmp	result1, #0 wz
26498     C0 00 90 5D |  if_ne	jmp	#LR__3877
2649c     FF 27 06 F5 | 	and	local05, #511
264a0     34 20 06 F1 | 	add	local02, #52
264a4     10 27 02 F1 | 	add	local05, local02
264a8     13 29 C2 FA | 	rdbyte	local06, local05
264ac     08 28 66 F0 | 	shl	local06, #8
264b0     14 2B 42 F5 | 	or	local07, local06
264b4     01 1E CE F7 | 	test	local01, #1 wz
264b8     04 2A 46 50 |  if_ne	shr	local07, #4
264bc     15 23 02 56 |  if_ne	mov	local03, local07
264c0     0B 2A 46 A7 |  if_e	zerox	local07, #11
264c4     15 23 02 A6 |  if_e	mov	local03, local07
264c8     11 25 02 F6 | 	mov	local04, local03
264cc                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
264cc                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
264cc                 | ' 			break;
264cc     8C 00 90 FD | 	jmp	#LR__3877
264d0                 | LR__3874
264d0     10 13 02 F6 | 	mov	arg01, local02
264d4     0F 29 02 F6 | 	mov	local06, local01
264d8     08 28 46 F0 | 	shr	local06, #8
264dc     24 20 06 F1 | 	add	local02, #36
264e0     10 15 02 FB | 	rdlong	arg02, local02
264e4     24 20 86 F1 | 	sub	local02, #36
264e8     14 15 02 F1 | 	add	arg02, local06
264ec     20 FD BF FD | 	call	#_fatfs_cc_move_window
264f0     00 FA 0D F2 | 	cmp	result1, #0 wz
264f4     64 00 90 5D |  if_ne	jmp	#LR__3877
264f8     34 20 06 F1 | 	add	local02, #52
264fc     01 1E 66 F0 | 	shl	local01, #1
26500     FF 1F 06 F5 | 	and	local01, #511
26504     0F 21 02 F1 | 	add	local02, local01
26508                 | ' {
26508                 | ' 
26508                 | ' 	return *((WORD*)ptr);
26508     10 FB E1 FA | 	rdword	result1, local02
2650c     FD 24 32 F9 | 	getword	local04, result1, #0
26510                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
26510                 | ' 			break;
26510     48 00 90 FD | 	jmp	#LR__3877
26514                 | LR__3875
26514     10 13 02 F6 | 	mov	arg01, local02
26518     0F 29 02 F6 | 	mov	local06, local01
2651c     07 28 46 F0 | 	shr	local06, #7
26520     24 20 06 F1 | 	add	local02, #36
26524     10 15 02 FB | 	rdlong	arg02, local02
26528     24 20 86 F1 | 	sub	local02, #36
2652c     14 15 02 F1 | 	add	arg02, local06
26530     DC FC BF FD | 	call	#_fatfs_cc_move_window
26534     00 FA 0D F2 | 	cmp	result1, #0 wz
26538     20 00 90 5D |  if_ne	jmp	#LR__3877
2653c     34 20 06 F1 | 	add	local02, #52
26540     02 1E 66 F0 | 	shl	local01, #2
26544     FF 1F 06 F5 | 	and	local01, #511
26548     0F 21 02 F1 | 	add	local02, local01
2654c                 | ' {
2654c                 | ' 
2654c                 | ' 	return *((DWORD*)ptr);
2654c     10 25 02 FB | 	rdlong	local04, local02
26550     7C 24 06 F4 | 	bitl	local04, #124
26554                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
26554                 | ' 			break;
26554     04 00 90 FD | 	jmp	#LR__3877
26558                 | LR__3876
26558     01 24 06 F6 | 	mov	local04, #1
2655c                 | LR__3877
2655c                 | LR__3878
2655c                 | ' 			val = 1;
2655c                 | ' 		}
2655c                 | ' 	}
2655c                 | ' 
2655c                 | ' 	return val;
2655c     12 FB 01 F6 | 	mov	result1, local04
26560     A7 F0 03 F6 | 	mov	ptra, fp
26564     B2 00 A0 FD | 	call	#popregs_
26568                 | _fatfs_cc_get_fat_ret
26568     2D 00 64 FD | 	ret
2656c                 | 
2656c                 | _fatfs_cc_put_fat
2656c     08 4A 05 F6 | 	mov	COUNT_, #8
26570     A8 00 A0 FD | 	call	#pushregs_
26574     09 1F 02 F6 | 	mov	local01, arg01
26578     0A 21 02 F6 | 	mov	local02, arg02
2657c     0B 23 02 F6 | 	mov	local03, arg03
26580     02 24 06 F6 | 	mov	local04, #2
26584     02 20 16 F2 | 	cmp	local02, #2 wc
26588     E0 01 90 CD |  if_b	jmp	#LR__3887
2658c     18 1E 06 F1 | 	add	local01, #24
26590     0F 27 02 FB | 	rdlong	local05, local01
26594     18 1E 86 F1 | 	sub	local01, #24
26598     13 21 12 F2 | 	cmp	local02, local05 wc
2659c     CC 01 90 3D |  if_ae	jmp	#LR__3887
265a0                 | ' 		switch (fs->fs_type) {
265a0     0F 29 C2 FA | 	rdbyte	local06, local01
265a4     01 28 86 F1 | 	sub	local06, #1
265a8     03 28 26 F3 | 	fle	local06, #3
265ac     30 28 62 FD | 	jmprel	local06
265b0                 | LR__3880
265b0     0C 00 90 FD | 	jmp	#LR__3881
265b4     F8 00 90 FD | 	jmp	#LR__3884
265b8     40 01 90 FD | 	jmp	#LR__3885
265bc     AC 01 90 FD | 	jmp	#LR__3886
265c0                 | LR__3881
265c0     10 2B 02 F6 | 	mov	local07, local02
265c4     10 27 02 F6 | 	mov	local05, local02
265c8     01 26 46 F0 | 	shr	local05, #1
265cc     13 2B 02 F1 | 	add	local07, local05
265d0     0F 13 02 F6 | 	mov	arg01, local01
265d4     15 29 02 F6 | 	mov	local06, local07
265d8     09 28 46 F0 | 	shr	local06, #9
265dc     24 1E 06 F1 | 	add	local01, #36
265e0     0F 15 02 FB | 	rdlong	arg02, local01
265e4     24 1E 86 F1 | 	sub	local01, #36
265e8     14 15 02 F1 | 	add	arg02, local06
265ec     20 FC BF FD | 	call	#_fatfs_cc_move_window
265f0     FD 24 0A F6 | 	mov	local04, result1 wz
265f4     74 01 90 5D |  if_ne	jmp	#LR__3886
265f8     34 1E 06 F1 | 	add	local01, #52
265fc     0F 2D 02 F6 | 	mov	local08, local01
26600     15 27 02 F6 | 	mov	local05, local07
26604     FF 27 06 F5 | 	and	local05, #511
26608     13 2D 02 F1 | 	add	local08, local05
2660c     01 20 CE F7 | 	test	local02, #1 wz
26610     34 1E 86 F1 | 	sub	local01, #52
26614     01 2A 06 F1 | 	add	local07, #1
26618     18 00 90 AD |  if_e	jmp	#LR__3882
2661c     16 27 C2 FA | 	rdbyte	local05, local08
26620     13 27 42 F8 | 	getnib	local05, local05, #0
26624     11 29 E2 F8 | 	getbyte	local06, local03, #0
26628     04 28 66 F0 | 	shl	local06, #4
2662c     14 27 42 F5 | 	or	local05, local06
26630     04 00 90 FD | 	jmp	#LR__3883
26634                 | LR__3882
26634     11 27 02 F6 | 	mov	local05, local03
26638                 | LR__3883
26638     16 27 42 FC | 	wrbyte	local05, local08
2663c     03 1E 06 F1 | 	add	local01, #3
26640     0F 03 48 FC | 	wrbyte	#1, local01
26644     03 1E 86 F1 | 	sub	local01, #3
26648     0F 13 02 F6 | 	mov	arg01, local01
2664c     15 2D 02 F6 | 	mov	local08, local07
26650     09 2C 46 F0 | 	shr	local08, #9
26654     24 1E 06 F1 | 	add	local01, #36
26658     0F 15 02 FB | 	rdlong	arg02, local01
2665c     24 1E 86 F1 | 	sub	local01, #36
26660     16 15 02 F1 | 	add	arg02, local08
26664     A8 FB BF FD | 	call	#_fatfs_cc_move_window
26668     FD 24 0A F6 | 	mov	local04, result1 wz
2666c     FC 00 90 5D |  if_ne	jmp	#LR__3886
26670     34 1E 06 F1 | 	add	local01, #52
26674     0F 2D 02 F6 | 	mov	local08, local01
26678     FF 2B 06 F5 | 	and	local07, #511
2667c     15 2D 02 F1 | 	add	local08, local07
26680     01 20 CE F7 | 	test	local02, #1 wz
26684     04 22 46 50 |  if_ne	shr	local03, #4
26688     11 27 02 56 |  if_ne	mov	local05, local03
2668c     16 27 C2 AA |  if_e	rdbyte	local05, local08
26690     F0 26 06 A5 |  if_e	and	local05, #240
26694     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
26698     11 23 42 A8 |  if_e	getnib	local03, local03, #0
2669c     11 27 42 A5 |  if_e	or	local05, local03
266a0     16 27 42 FC | 	wrbyte	local05, local08
266a4     31 1E 86 F1 | 	sub	local01, #49
266a8     0F 03 48 FC | 	wrbyte	#1, local01
266ac                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
266ac                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
266ac                 | ' 			fs->wflag = 1;
266ac                 | ' 			break;
266ac     BC 00 90 FD | 	jmp	#LR__3886
266b0                 | LR__3884
266b0     0F 13 02 F6 | 	mov	arg01, local01
266b4     10 2D 02 F6 | 	mov	local08, local02
266b8     08 2C 46 F0 | 	shr	local08, #8
266bc     24 1E 06 F1 | 	add	local01, #36
266c0     0F 15 02 FB | 	rdlong	arg02, local01
266c4     24 1E 86 F1 | 	sub	local01, #36
266c8     16 15 02 F1 | 	add	arg02, local08
266cc     40 FB BF FD | 	call	#_fatfs_cc_move_window
266d0     FD 24 0A F6 | 	mov	local04, result1 wz
266d4     94 00 90 5D |  if_ne	jmp	#LR__3886
266d8     34 1E 06 F1 | 	add	local01, #52
266dc     0F 13 02 F6 | 	mov	arg01, local01
266e0     01 20 66 F0 | 	shl	local02, #1
266e4     FF 21 06 F5 | 	and	local02, #511
266e8     10 13 02 F1 | 	add	arg01, local02
266ec     09 23 52 FC | 	wrword	local03, arg01
266f0     31 1E 86 F1 | 	sub	local01, #49
266f4     0F 03 48 FC | 	wrbyte	#1, local01
266f8                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
266f8                 | ' 			fs->wflag = 1;
266f8                 | ' 			break;
266f8     70 00 90 FD | 	jmp	#LR__3886
266fc                 | LR__3885
266fc     0F 13 02 F6 | 	mov	arg01, local01
26700     10 2D 02 F6 | 	mov	local08, local02
26704     07 2C 46 F0 | 	shr	local08, #7
26708     24 1E 06 F1 | 	add	local01, #36
2670c     0F 15 02 FB | 	rdlong	arg02, local01
26710     24 1E 86 F1 | 	sub	local01, #36
26714     16 15 02 F1 | 	add	arg02, local08
26718     F4 FA BF FD | 	call	#_fatfs_cc_move_window
2671c     FD 24 0A F6 | 	mov	local04, result1 wz
26720     48 00 90 5D |  if_ne	jmp	#LR__3886
26724     7C 22 06 F4 | 	bitl	local03, #124
26728     34 1E 06 F1 | 	add	local01, #52
2672c     10 2D 02 F6 | 	mov	local08, local02
26730     02 2C 66 F0 | 	shl	local08, #2
26734     FF 2D 06 F5 | 	and	local08, #511
26738     0F 13 02 F6 | 	mov	arg01, local01
2673c     16 13 02 F1 | 	add	arg01, local08
26740                 | ' {
26740                 | ' 
26740                 | ' 	return *((DWORD*)ptr);
26740     09 2D 02 FB | 	rdlong	local08, arg01
26744     00 00 78 FF 
26748     00 2C 06 F5 | 	and	local08, ##-268435456
2674c     16 23 42 F5 | 	or	local03, local08
26750     0F 13 02 F6 | 	mov	arg01, local01
26754     02 20 66 F0 | 	shl	local02, #2
26758     FF 21 06 F5 | 	and	local02, #511
2675c     10 13 02 F1 | 	add	arg01, local02
26760     09 23 62 FC | 	wrlong	local03, arg01
26764     31 1E 86 F1 | 	sub	local01, #49
26768     0F 03 48 FC | 	wrbyte	#1, local01
2676c                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2676c                 | ' 			}
2676c                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2676c                 | ' 			fs->wflag = 1;
2676c                 | ' 			break;
2676c                 | LR__3886
2676c                 | LR__3887
2676c                 | ' 		}
2676c                 | ' 	}
2676c                 | ' 	return res;
2676c     12 FB 01 F6 | 	mov	result1, local04
26770     A7 F0 03 F6 | 	mov	ptra, fp
26774     B2 00 A0 FD | 	call	#popregs_
26778                 | _fatfs_cc_put_fat_ret
26778     2D 00 64 FD | 	ret
2677c                 | 
2677c                 | _fatfs_cc_remove_chain
2677c     05 4A 05 F6 | 	mov	COUNT_, #5
26780     A8 00 A0 FD | 	call	#pushregs_
26784     09 1F 02 F6 | 	mov	local01, arg01
26788     0A 21 02 F6 | 	mov	local02, arg02
2678c     0B 23 02 F6 | 	mov	local03, arg03
26790     0F 25 02 FB | 	rdlong	local04, local01
26794     02 20 16 F2 | 	cmp	local02, #2 wc
26798     14 00 90 CD |  if_b	jmp	#LR__3890
2679c     18 24 06 F1 | 	add	local04, #24
267a0     12 FB 01 FB | 	rdlong	result1, local04
267a4     18 24 86 F1 | 	sub	local04, #24
267a8     FD 20 12 F2 | 	cmp	local02, result1 wc
267ac     08 00 90 CD |  if_b	jmp	#LR__3891
267b0                 | LR__3890
267b0     02 FA 05 F6 | 	mov	result1, #2
267b4     CC 00 90 FD | 	jmp	#LR__3896
267b8                 | LR__3891
267b8     00 22 0E F2 | 	cmp	local03, #0 wz
267bc     18 00 90 AD |  if_e	jmp	#LR__3892
267c0     11 15 02 F6 | 	mov	arg02, local03
267c4     12 13 02 F6 | 	mov	arg01, local04
267c8     01 16 66 F6 | 	neg	arg03, #1
267cc     9C FD BF FD | 	call	#_fatfs_cc_put_fat
267d0     00 FA 0D F2 | 	cmp	result1, #0 wz
267d4     AC 00 90 5D |  if_ne	jmp	#LR__3896
267d8                 | LR__3892
267d8                 | ' 	}
267d8                 | ' 
267d8                 | ' 
267d8                 | ' 	do {
267d8                 | LR__3893
267d8     10 15 02 F6 | 	mov	arg02, local02
267dc     0F 13 02 F6 | 	mov	arg01, local01
267e0     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
267e4     FD 26 0A F6 | 	mov	local05, result1 wz
267e8     94 00 90 AD |  if_e	jmp	#LR__3895
267ec     01 26 0E F2 | 	cmp	local05, #1 wz
267f0     02 FA 05 A6 |  if_e	mov	result1, #2
267f4     8C 00 90 AD |  if_e	jmp	#LR__3896
267f8     FF FF 7F FF 
267fc     FF 27 0E F2 | 	cmp	local05, ##-1 wz
26800     01 FA 05 A6 |  if_e	mov	result1, #1
26804     7C 00 90 AD |  if_e	jmp	#LR__3896
26808     10 15 02 F6 | 	mov	arg02, local02
2680c     12 13 02 F6 | 	mov	arg01, local04
26810     00 16 06 F6 | 	mov	arg03, #0
26814     54 FD BF FD | 	call	#_fatfs_cc_put_fat
26818     FD 22 0A F6 | 	mov	local03, result1 wz
2681c     11 FB 01 56 |  if_ne	mov	result1, local03
26820     60 00 90 5D |  if_ne	jmp	#LR__3896
26824     18 24 06 F1 | 	add	local04, #24
26828     12 23 02 FB | 	rdlong	local03, local04
2682c     02 22 86 F1 | 	sub	local03, #2
26830     04 24 86 F1 | 	sub	local04, #4
26834     12 21 02 FB | 	rdlong	local02, local04
26838     14 24 86 F1 | 	sub	local04, #20
2683c     11 21 12 F2 | 	cmp	local02, local03 wc
26840     24 00 90 3D |  if_ae	jmp	#LR__3894
26844     14 24 06 F1 | 	add	local04, #20
26848     12 23 02 FB | 	rdlong	local03, local04
2684c     01 22 06 F1 | 	add	local03, #1
26850     12 23 62 FC | 	wrlong	local03, local04
26854     10 24 86 F1 | 	sub	local04, #16
26858     12 23 C2 FA | 	rdbyte	local03, local04
2685c     01 22 46 F5 | 	or	local03, #1
26860     12 23 42 FC | 	wrbyte	local03, local04
26864     04 24 86 F1 | 	sub	local04, #4
26868                 | LR__3894
26868     13 21 02 F6 | 	mov	local02, local05
2686c     18 24 06 F1 | 	add	local04, #24
26870     12 27 02 FB | 	rdlong	local05, local04
26874     18 24 86 F1 | 	sub	local04, #24
26878     13 21 12 F2 | 	cmp	local02, local05 wc
2687c     58 FF 9F CD |  if_b	jmp	#LR__3893
26880                 | LR__3895
26880                 | ' #line 1500 "ff.c"
26880                 | ' 	return FR_OK;
26880     00 FA 05 F6 | 	mov	result1, #0
26884                 | LR__3896
26884     A7 F0 03 F6 | 	mov	ptra, fp
26888     B2 00 A0 FD | 	call	#popregs_
2688c                 | _fatfs_cc_remove_chain_ret
2688c     2D 00 64 FD | 	ret
26890                 | 
26890                 | _fatfs_cc_create_chain
26890     09 4A 05 F6 | 	mov	COUNT_, #9
26894     A8 00 A0 FD | 	call	#pushregs_
26898     09 1F 02 F6 | 	mov	local01, arg01
2689c     0A 21 0A F6 | 	mov	local02, arg02 wz
268a0     0F 23 02 FB | 	rdlong	local03, local01
268a4     28 00 90 5D |  if_ne	jmp	#LR__3900
268a8     10 22 06 F1 | 	add	local03, #16
268ac     11 25 0A FB | 	rdlong	local04, local03 wz
268b0     10 22 86 F1 | 	sub	local03, #16
268b4     18 22 06 51 |  if_ne	add	local03, #24
268b8     11 27 02 5B |  if_ne	rdlong	local05, local03
268bc     18 22 86 51 |  if_ne	sub	local03, #24
268c0     13 25 12 52 |  if_ne	cmp	local04, local05 wc
268c4     50 00 90 4D |  if_c_and_nz	jmp	#LR__3901
268c8     01 24 06 F6 | 	mov	local04, #1
268cc     48 00 90 FD | 	jmp	#LR__3901
268d0                 | LR__3900
268d0     10 15 02 F6 | 	mov	arg02, local02
268d4     0F 13 02 F6 | 	mov	arg01, local01
268d8     EC FA BF FD | 	call	#_fatfs_cc_get_fat
268dc     FD 24 02 F6 | 	mov	local04, result1
268e0     02 24 16 F2 | 	cmp	local04, #2 wc
268e4     01 FA 05 C6 |  if_b	mov	result1, #1
268e8     BC 01 90 CD |  if_b	jmp	#LR__3911
268ec     FF FF 7F FF 
268f0     FF 25 0E F2 | 	cmp	local04, ##-1 wz
268f4     12 FB 01 A6 |  if_e	mov	result1, local04
268f8     AC 01 90 AD |  if_e	jmp	#LR__3911
268fc     18 22 06 F1 | 	add	local03, #24
26900     11 27 02 FB | 	rdlong	local05, local03
26904     18 22 86 F1 | 	sub	local03, #24
26908     13 25 12 F2 | 	cmp	local04, local05 wc
2690c     12 FB 01 C6 |  if_b	mov	result1, local04
26910     94 01 90 CD |  if_b	jmp	#LR__3911
26914     10 25 02 F6 | 	mov	local04, local02
26918                 | LR__3901
26918     14 22 06 F1 | 	add	local03, #20
2691c     11 27 0A FB | 	rdlong	local05, local03 wz
26920     14 22 86 F1 | 	sub	local03, #20
26924     00 FA 05 A6 |  if_e	mov	result1, #0
26928     7C 01 90 AD |  if_e	jmp	#LR__3911
2692c     00 28 06 F6 | 	mov	local06, #0
26930     10 25 0A F2 | 	cmp	local04, local02 wz
26934     74 00 90 5D |  if_ne	jmp	#LR__3904
26938     12 29 02 F6 | 	mov	local06, local04
2693c     01 28 06 F1 | 	add	local06, #1
26940     18 22 06 F1 | 	add	local03, #24
26944     11 27 02 FB | 	rdlong	local05, local03
26948     18 22 86 F1 | 	sub	local03, #24
2694c     13 29 12 F2 | 	cmp	local06, local05 wc
26950     02 28 06 36 |  if_ae	mov	local06, #2
26954     14 15 02 F6 | 	mov	arg02, local06
26958     0F 13 02 F6 | 	mov	arg01, local01
2695c     68 FA BF FD | 	call	#_fatfs_cc_get_fat
26960     FD 26 02 F6 | 	mov	local05, result1
26964     01 26 0E F2 | 	cmp	local05, #1 wz
26968     FF FF 7F 5F 
2696c     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
26970     13 FB 01 A6 |  if_e	mov	result1, local05
26974     30 01 90 AD |  if_e	jmp	#LR__3911
26978     00 26 0E F2 | 	cmp	local05, #0 wz
2697c     2C 00 90 AD |  if_e	jmp	#LR__3903
26980     10 22 06 F1 | 	add	local03, #16
26984     11 2B 02 FB | 	rdlong	local07, local03
26988     10 22 86 F1 | 	sub	local03, #16
2698c     02 2A 16 F2 | 	cmp	local07, #2 wc
26990     14 00 90 CD |  if_b	jmp	#LR__3902
26994     18 22 06 F1 | 	add	local03, #24
26998     11 27 02 FB | 	rdlong	local05, local03
2699c     18 22 86 F1 | 	sub	local03, #24
269a0     13 2B 12 F2 | 	cmp	local07, local05 wc
269a4     15 25 02 C6 |  if_b	mov	local04, local07
269a8                 | LR__3902
269a8     00 28 06 F6 | 	mov	local06, #0
269ac                 | LR__3903
269ac                 | LR__3904
269ac     00 28 0E F2 | 	cmp	local06, #0 wz
269b0     60 00 90 5D |  if_ne	jmp	#LR__3907
269b4     12 29 02 F6 | 	mov	local06, local04
269b8                 | ' 			ncl = scl;
269b8                 | ' 			for (;;) {
269b8                 | LR__3905
269b8     01 28 06 F1 | 	add	local06, #1
269bc     18 22 06 F1 | 	add	local03, #24
269c0     11 27 02 FB | 	rdlong	local05, local03
269c4     18 22 86 F1 | 	sub	local03, #24
269c8     13 29 12 F2 | 	cmp	local06, local05 wc
269cc     02 28 06 36 |  if_ae	mov	local06, #2
269d0     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
269d4     00 FA 05 16 |  if_a	mov	result1, #0
269d8     CC 00 90 1D |  if_a	jmp	#LR__3911
269dc     14 15 02 F6 | 	mov	arg02, local06
269e0     0F 13 02 F6 | 	mov	arg01, local01
269e4     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
269e8     FD 2A 0A F6 | 	mov	local07, result1 wz
269ec     24 00 90 AD |  if_e	jmp	#LR__3906
269f0     01 2A 0E F2 | 	cmp	local07, #1 wz
269f4     FF FF 7F 5F 
269f8     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
269fc     15 FB 01 A6 |  if_e	mov	result1, local07
26a00     A4 00 90 AD |  if_e	jmp	#LR__3911
26a04     12 29 0A F2 | 	cmp	local06, local04 wz
26a08     00 FA 05 A6 |  if_e	mov	result1, #0
26a0c     98 00 90 AD |  if_e	jmp	#LR__3911
26a10     A4 FF 9F FD | 	jmp	#LR__3905
26a14                 | LR__3906
26a14                 | LR__3907
26a14     11 13 02 F6 | 	mov	arg01, local03
26a18     14 15 02 F6 | 	mov	arg02, local06
26a1c     01 16 66 F6 | 	neg	arg03, #1
26a20     48 FB BF FD | 	call	#_fatfs_cc_put_fat
26a24     FD 2C 0A F6 | 	mov	local08, result1 wz
26a28     1C 00 90 5D |  if_ne	jmp	#LR__3908
26a2c     00 20 0E F2 | 	cmp	local02, #0 wz
26a30     14 00 90 AD |  if_e	jmp	#LR__3908
26a34     11 13 02 F6 | 	mov	arg01, local03
26a38     10 15 02 F6 | 	mov	arg02, local02
26a3c     14 17 02 F6 | 	mov	arg03, local06
26a40     28 FB BF FD | 	call	#_fatfs_cc_put_fat
26a44     FD 2C 02 F6 | 	mov	local08, result1
26a48                 | LR__3908
26a48     00 2C 0E F2 | 	cmp	local08, #0 wz
26a4c     4C 00 90 5D |  if_ne	jmp	#LR__3909
26a50     10 22 06 F1 | 	add	local03, #16
26a54     11 29 62 FC | 	wrlong	local06, local03
26a58     08 22 06 F1 | 	add	local03, #8
26a5c     11 27 02 FB | 	rdlong	local05, local03
26a60     02 26 86 F1 | 	sub	local05, #2
26a64     04 22 86 F1 | 	sub	local03, #4
26a68     11 2F 02 FB | 	rdlong	local09, local03
26a6c     14 22 86 F1 | 	sub	local03, #20
26a70     13 2F 1A F2 | 	cmp	local09, local05 wcz
26a74     14 22 06 E1 |  if_be	add	local03, #20
26a78     11 2F 02 EB |  if_be	rdlong	local09, local03
26a7c     01 2E 86 E1 |  if_be	sub	local09, #1
26a80     11 2F 62 EC |  if_be	wrlong	local09, local03
26a84     14 22 86 E1 |  if_be	sub	local03, #20
26a88     04 22 06 F1 | 	add	local03, #4
26a8c     11 27 C2 FA | 	rdbyte	local05, local03
26a90     01 26 46 F5 | 	or	local05, #1
26a94     11 27 42 FC | 	wrbyte	local05, local03
26a98     08 00 90 FD | 	jmp	#LR__3910
26a9c                 | LR__3909
26a9c     01 2C 0E F2 | 	cmp	local08, #1 wz
26aa0     01 28 C6 F6 | 	negz	local06, #1
26aa4                 | LR__3910
26aa4                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
26aa4                 | ' 	}
26aa4                 | ' 
26aa4                 | ' 	return ncl;
26aa4     14 FB 01 F6 | 	mov	result1, local06
26aa8                 | LR__3911
26aa8     A7 F0 03 F6 | 	mov	ptra, fp
26aac     B2 00 A0 FD | 	call	#popregs_
26ab0                 | _fatfs_cc_create_chain_ret
26ab0     2D 00 64 FD | 	ret
26ab4                 | 
26ab4                 | _fatfs_cc_dir_clear
26ab4     06 4A 05 F6 | 	mov	COUNT_, #6
26ab8     A8 00 A0 FD | 	call	#pushregs_
26abc     09 1F 02 F6 | 	mov	local01, arg01
26ac0     0A 21 02 F6 | 	mov	local02, arg02
26ac4     0F 13 02 F6 | 	mov	arg01, local01
26ac8     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
26acc     00 FA 0D F2 | 	cmp	result1, #0 wz
26ad0     01 FA 05 56 |  if_ne	mov	result1, #1
26ad4     90 00 90 5D |  if_ne	jmp	#LR__3922
26ad8     0F 13 02 F6 | 	mov	arg01, local01
26adc     10 15 02 F6 | 	mov	arg02, local02
26ae0     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
26ae4     FD 22 02 F6 | 	mov	local03, result1
26ae8     30 1E 06 F1 | 	add	local01, #48
26aec     0F 23 62 FC | 	wrlong	local03, local01
26af0     04 1E 06 F1 | 	add	local01, #4
26af4     0F 13 02 F6 | 	mov	arg01, local01
26af8     00 14 06 F6 | 	mov	arg02, #0
26afc     09 16 C6 F9 | 	decod	arg03, #9
26b00     98 00 A0 FD | 	call	#\builtin_bytefill_
26b04     0F 25 02 F6 | 	mov	local04, local01
26b08                 | ' #line 1667 "ff.c"
26b08                 | ' 	{
26b08                 | ' 		ibuf = fs->win; szb = 1;
26b08                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
26b08     00 26 06 F6 | 	mov	local05, #0
26b0c     34 1E 86 F1 | 	sub	local01, #52
26b10                 | LR__3920
26b10     0A 1E 06 F1 | 	add	local01, #10
26b14     0F 29 E2 FA | 	rdword	local06, local01
26b18     0A 1E 86 F1 | 	sub	local01, #10
26b1c     14 27 12 F2 | 	cmp	local05, local06 wc
26b20     2C 00 90 3D |  if_ae	jmp	#LR__3921
26b24     01 1E 06 F1 | 	add	local01, #1
26b28     0F 13 C2 FA | 	rdbyte	arg01, local01
26b2c     01 1E 86 F1 | 	sub	local01, #1
26b30     12 15 02 F6 | 	mov	arg02, local04
26b34     11 17 02 F6 | 	mov	arg03, local03
26b38     13 17 02 F1 | 	add	arg03, local05
26b3c     01 18 06 F6 | 	mov	arg04, #1
26b40     9C EF BF FD | 	call	#_fatfs_cc_disk_write
26b44     00 FA 0D F2 | 	cmp	result1, #0 wz
26b48     01 26 06 A1 |  if_e	add	local05, #1
26b4c     C0 FF 9F AD |  if_e	jmp	#LR__3920
26b50                 | LR__3921
26b50                 | ' 	}
26b50                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
26b50     0A 1E 06 F1 | 	add	local01, #10
26b54     0F 25 E2 FA | 	rdword	local04, local01
26b58     12 27 0A F2 | 	cmp	local05, local04 wz
26b5c     00 28 06 A6 |  if_e	mov	local06, #0
26b60     01 28 06 56 |  if_ne	mov	local06, #1
26b64     14 FB 01 F6 | 	mov	result1, local06
26b68                 | LR__3922
26b68     A7 F0 03 F6 | 	mov	ptra, fp
26b6c     B2 00 A0 FD | 	call	#popregs_
26b70                 | _fatfs_cc_dir_clear_ret
26b70     2D 00 64 FD | 	ret
26b74                 | 
26b74                 | _fatfs_cc_dir_sdi
26b74     06 4A 05 F6 | 	mov	COUNT_, #6
26b78     A8 00 A0 FD | 	call	#pushregs_
26b7c     09 1F 02 F6 | 	mov	local01, arg01
26b80     0A 21 02 F6 | 	mov	local02, arg02
26b84     0F 23 02 FB | 	rdlong	local03, local01
26b88     00 10 00 FF 
26b8c     00 20 16 F2 | 	cmp	local02, ##2097152 wc
26b90     1F 20 CE C7 |  if_b	test	local02, #31 wz
26b94                 | ' 		return FR_INT_ERR;
26b94     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
26b98     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3936
26b9c     10 1E 06 F1 | 	add	local01, #16
26ba0     0F 21 62 FC | 	wrlong	local02, local01
26ba4     08 1E 86 F1 | 	sub	local01, #8
26ba8     0F 25 0A FB | 	rdlong	local04, local01 wz
26bac     08 1E 86 F1 | 	sub	local01, #8
26bb0     11 27 C2 AA |  if_e	rdbyte	local05, local03
26bb4     03 26 16 A2 |  if_e	cmp	local05, #3 wc
26bb8     28 22 06 21 |  if_nc_and_z	add	local03, #40
26bbc     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
26bc0     28 22 86 21 |  if_nc_and_z	sub	local03, #40
26bc4     00 24 0E F2 | 	cmp	local04, #0 wz
26bc8     3C 00 90 5D |  if_ne	jmp	#LR__3930
26bcc     10 27 02 F6 | 	mov	local05, local02
26bd0     05 26 46 F0 | 	shr	local05, #5
26bd4     08 22 06 F1 | 	add	local03, #8
26bd8     11 15 E2 FA | 	rdword	arg02, local03
26bdc     08 22 86 F1 | 	sub	local03, #8
26be0     0A 27 12 F2 | 	cmp	local05, arg02 wc
26be4     02 FA 05 36 |  if_ae	mov	result1, #2
26be8     E4 00 90 3D |  if_ae	jmp	#LR__3936
26bec     28 22 06 F1 | 	add	local03, #40
26bf0     11 27 02 FB | 	rdlong	local05, local03
26bf4     28 22 86 F1 | 	sub	local03, #40
26bf8     18 1E 06 F1 | 	add	local01, #24
26bfc     0F 27 62 FC | 	wrlong	local05, local01
26c00     18 1E 86 F1 | 	sub	local01, #24
26c04     7C 00 90 FD | 	jmp	#LR__3935
26c08                 | LR__3930
26c08     0A 22 06 F1 | 	add	local03, #10
26c0c     11 29 E2 FA | 	rdword	local06, local03
26c10     0A 22 86 F1 | 	sub	local03, #10
26c14     09 28 66 F0 | 	shl	local06, #9
26c18                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
26c18                 | ' 		while (ofs >= csz) {
26c18                 | LR__3931
26c18     14 21 12 F2 | 	cmp	local02, local06 wc
26c1c     4C 00 90 CD |  if_b	jmp	#LR__3934
26c20     0F 13 02 F6 | 	mov	arg01, local01
26c24     12 15 02 F6 | 	mov	arg02, local04
26c28     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
26c2c     FD 24 02 F6 | 	mov	local04, result1
26c30     FF FF 7F FF 
26c34     FF 25 0E F2 | 	cmp	local04, ##-1 wz
26c38     01 FA 05 A6 |  if_e	mov	result1, #1
26c3c     90 00 90 AD |  if_e	jmp	#LR__3936
26c40     02 24 16 F2 | 	cmp	local04, #2 wc
26c44     14 00 90 CD |  if_b	jmp	#LR__3932
26c48     18 22 06 F1 | 	add	local03, #24
26c4c     11 27 02 FB | 	rdlong	local05, local03
26c50     18 22 86 F1 | 	sub	local03, #24
26c54     13 25 12 F2 | 	cmp	local04, local05 wc
26c58     08 00 90 CD |  if_b	jmp	#LR__3933
26c5c                 | LR__3932
26c5c     02 FA 05 F6 | 	mov	result1, #2
26c60     6C 00 90 FD | 	jmp	#LR__3936
26c64                 | LR__3933
26c64     14 21 82 F1 | 	sub	local02, local06
26c68     AC FF 9F FD | 	jmp	#LR__3931
26c6c                 | LR__3934
26c6c     11 13 02 F6 | 	mov	arg01, local03
26c70     12 15 02 F6 | 	mov	arg02, local04
26c74     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
26c78     18 1E 06 F1 | 	add	local01, #24
26c7c     0F FB 61 FC | 	wrlong	result1, local01
26c80     18 1E 86 F1 | 	sub	local01, #24
26c84                 | LR__3935
26c84     14 1E 06 F1 | 	add	local01, #20
26c88     0F 25 62 FC | 	wrlong	local04, local01
26c8c     04 1E 06 F1 | 	add	local01, #4
26c90     0F 27 0A FB | 	rdlong	local05, local01 wz
26c94     18 1E 86 F1 | 	sub	local01, #24
26c98     02 FA 05 A6 |  if_e	mov	result1, #2
26c9c     30 00 90 AD |  if_e	jmp	#LR__3936
26ca0     10 29 02 F6 | 	mov	local06, local02
26ca4     09 28 46 F0 | 	shr	local06, #9
26ca8     18 1E 06 F1 | 	add	local01, #24
26cac     0F 27 02 FB | 	rdlong	local05, local01
26cb0     14 27 02 F1 | 	add	local05, local06
26cb4     0F 27 62 FC | 	wrlong	local05, local01
26cb8     34 22 06 F1 | 	add	local03, #52
26cbc     FF 21 06 F5 | 	and	local02, #511
26cc0     10 23 02 F1 | 	add	local03, local02
26cc4     04 1E 06 F1 | 	add	local01, #4
26cc8     0F 23 62 FC | 	wrlong	local03, local01
26ccc                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
26ccc                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
26ccc                 | ' 
26ccc                 | ' 	return FR_OK;
26ccc     00 FA 05 F6 | 	mov	result1, #0
26cd0                 | LR__3936
26cd0     A7 F0 03 F6 | 	mov	ptra, fp
26cd4     B2 00 A0 FD | 	call	#popregs_
26cd8                 | _fatfs_cc_dir_sdi_ret
26cd8     2D 00 64 FD | 	ret
26cdc                 | 
26cdc                 | _fatfs_cc_dir_next
26cdc     05 4A 05 F6 | 	mov	COUNT_, #5
26ce0     A8 00 A0 FD | 	call	#pushregs_
26ce4     09 1F 02 F6 | 	mov	local01, arg01
26ce8     0A 21 02 F6 | 	mov	local02, arg02
26cec     0F 23 02 FB | 	rdlong	local03, local01
26cf0     10 1E 06 F1 | 	add	local01, #16
26cf4     0F 25 02 FB | 	rdlong	local04, local01
26cf8     10 1E 86 F1 | 	sub	local01, #16
26cfc     20 24 06 F1 | 	add	local04, #32
26d00     00 10 00 FF 
26d04     00 24 16 F2 | 	cmp	local04, ##2097152 wc
26d08     18 1E 06 31 |  if_ae	add	local01, #24
26d0c     0F 01 68 3C |  if_ae	wrlong	#0, local01
26d10     18 1E 86 31 |  if_ae	sub	local01, #24
26d14     18 1E 06 F1 | 	add	local01, #24
26d18     0F 15 0A FB | 	rdlong	arg02, local01 wz
26d1c     18 1E 86 F1 | 	sub	local01, #24
26d20     04 FA 05 A6 |  if_e	mov	result1, #4
26d24     64 01 90 AD |  if_e	jmp	#LR__3945
26d28     FF 25 CE F7 | 	test	local04, #511 wz
26d2c     3C 01 90 5D |  if_ne	jmp	#LR__3944
26d30     18 1E 06 F1 | 	add	local01, #24
26d34     0F 15 02 FB | 	rdlong	arg02, local01
26d38     01 14 06 F1 | 	add	arg02, #1
26d3c     0F 15 62 FC | 	wrlong	arg02, local01
26d40     04 1E 86 F1 | 	sub	local01, #4
26d44     0F 15 0A FB | 	rdlong	arg02, local01 wz
26d48     14 1E 86 F1 | 	sub	local01, #20
26d4c     2C 00 90 5D |  if_ne	jmp	#LR__3940
26d50     12 15 02 F6 | 	mov	arg02, local04
26d54     05 14 46 F0 | 	shr	arg02, #5
26d58     08 22 06 F1 | 	add	local03, #8
26d5c     11 21 E2 FA | 	rdword	local02, local03
26d60     08 22 86 F1 | 	sub	local03, #8
26d64     10 15 12 F2 | 	cmp	arg02, local02 wc
26d68     18 1E 06 31 |  if_ae	add	local01, #24
26d6c     0F 01 68 3C |  if_ae	wrlong	#0, local01
26d70                 | ' 				dp->sect = 0; return FR_NO_FILE;
26d70     04 FA 05 36 |  if_ae	mov	result1, #4
26d74     14 01 90 3D |  if_ae	jmp	#LR__3945
26d78     F0 00 90 FD | 	jmp	#LR__3943
26d7c                 | LR__3940
26d7c     12 13 02 F6 | 	mov	arg01, local04
26d80     09 12 46 F0 | 	shr	arg01, #9
26d84     0A 22 06 F1 | 	add	local03, #10
26d88     11 15 E2 FA | 	rdword	arg02, local03
26d8c     0A 22 86 F1 | 	sub	local03, #10
26d90     01 14 86 F1 | 	sub	arg02, #1
26d94     0A 13 CA F7 | 	test	arg01, arg02 wz
26d98     D0 00 90 5D |  if_ne	jmp	#LR__3942
26d9c     0F 13 02 F6 | 	mov	arg01, local01
26da0     14 1E 06 F1 | 	add	local01, #20
26da4     0F 15 02 FB | 	rdlong	arg02, local01
26da8     14 1E 86 F1 | 	sub	local01, #20
26dac     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
26db0     FD 26 02 F6 | 	mov	local05, result1
26db4     02 26 16 F2 | 	cmp	local05, #2 wc
26db8     02 FA 05 C6 |  if_b	mov	result1, #2
26dbc     CC 00 90 CD |  if_b	jmp	#LR__3945
26dc0     FF FF 7F FF 
26dc4     FF 27 0E F2 | 	cmp	local05, ##-1 wz
26dc8     01 FA 05 A6 |  if_e	mov	result1, #1
26dcc     BC 00 90 AD |  if_e	jmp	#LR__3945
26dd0     18 22 06 F1 | 	add	local03, #24
26dd4     11 15 02 FB | 	rdlong	arg02, local03
26dd8     18 22 86 F1 | 	sub	local03, #24
26ddc     0A 27 12 F2 | 	cmp	local05, arg02 wc
26de0     68 00 90 CD |  if_b	jmp	#LR__3941
26de4     00 20 0E F2 | 	cmp	local02, #0 wz
26de8     18 1E 06 A1 |  if_e	add	local01, #24
26dec     0F 01 68 AC |  if_e	wrlong	#0, local01
26df0                 | ' 						dp->sect = 0; return FR_NO_FILE;
26df0     04 FA 05 A6 |  if_e	mov	result1, #4
26df4     94 00 90 AD |  if_e	jmp	#LR__3945
26df8     0F 13 02 F6 | 	mov	arg01, local01
26dfc     14 1E 06 F1 | 	add	local01, #20
26e00     0F 15 02 FB | 	rdlong	arg02, local01
26e04     14 1E 86 F1 | 	sub	local01, #20
26e08     84 FA BF FD | 	call	#_fatfs_cc_create_chain
26e0c     FD 26 0A F6 | 	mov	local05, result1 wz
26e10     07 FA 05 A6 |  if_e	mov	result1, #7
26e14     74 00 90 AD |  if_e	jmp	#LR__3945
26e18     01 26 0E F2 | 	cmp	local05, #1 wz
26e1c     02 FA 05 A6 |  if_e	mov	result1, #2
26e20     68 00 90 AD |  if_e	jmp	#LR__3945
26e24     FF FF 7F FF 
26e28     FF 27 0E F2 | 	cmp	local05, ##-1 wz
26e2c     01 FA 05 A6 |  if_e	mov	result1, #1
26e30     58 00 90 AD |  if_e	jmp	#LR__3945
26e34     13 15 02 F6 | 	mov	arg02, local05
26e38     11 13 02 F6 | 	mov	arg01, local03
26e3c     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
26e40     00 FA 0D F2 | 	cmp	result1, #0 wz
26e44     01 FA 05 56 |  if_ne	mov	result1, #1
26e48     40 00 90 5D |  if_ne	jmp	#LR__3945
26e4c                 | LR__3941
26e4c     14 1E 06 F1 | 	add	local01, #20
26e50     0F 27 62 FC | 	wrlong	local05, local01
26e54     11 13 02 F6 | 	mov	arg01, local03
26e58     13 15 02 F6 | 	mov	arg02, local05
26e5c     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
26e60     04 1E 06 F1 | 	add	local01, #4
26e64     0F FB 61 FC | 	wrlong	result1, local01
26e68     18 1E 86 F1 | 	sub	local01, #24
26e6c                 | LR__3942
26e6c                 | LR__3943
26e6c                 | LR__3944
26e6c     10 1E 06 F1 | 	add	local01, #16
26e70     0F 25 62 FC | 	wrlong	local04, local01
26e74     34 22 06 F1 | 	add	local03, #52
26e78     FF 25 06 F5 | 	and	local04, #511
26e7c     12 23 02 F1 | 	add	local03, local04
26e80     0C 1E 06 F1 | 	add	local01, #12
26e84     0F 23 62 FC | 	wrlong	local03, local01
26e88                 | ' #line 1771 "ff.c"
26e88                 | ' 				}
26e88                 | ' 				dp->clust = clst;
26e88                 | ' 				dp->sect = clst2sect(fs, clst);
26e88                 | ' 			}
26e88                 | ' 		}
26e88                 | ' 	}
26e88                 | ' 	dp->dptr = ofs;
26e88                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
26e88                 | ' 
26e88                 | ' 	return FR_OK;
26e88     00 FA 05 F6 | 	mov	result1, #0
26e8c                 | LR__3945
26e8c     A7 F0 03 F6 | 	mov	ptra, fp
26e90     B2 00 A0 FD | 	call	#popregs_
26e94                 | _fatfs_cc_dir_next_ret
26e94     2D 00 64 FD | 	ret
26e98                 | 
26e98                 | _fatfs_cc_dir_alloc
26e98     08 4A 05 F6 | 	mov	COUNT_, #8
26e9c     A8 00 A0 FD | 	call	#pushregs_
26ea0     09 1F 02 F6 | 	mov	local01, arg01
26ea4     0A 21 02 F6 | 	mov	local02, arg02
26ea8     0F 23 02 FB | 	rdlong	local03, local01
26eac     0F 13 02 F6 | 	mov	arg01, local01
26eb0     00 14 06 F6 | 	mov	arg02, #0
26eb4     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
26eb8     FD 24 0A F6 | 	mov	local04, result1 wz
26ebc     70 00 90 5D |  if_ne	jmp	#LR__3954
26ec0     00 26 06 F6 | 	mov	local05, #0
26ec4                 | ' 		n = 0;
26ec4                 | ' 		do {
26ec4                 | LR__3950
26ec4     18 1E 06 F1 | 	add	local01, #24
26ec8     0F 15 02 FB | 	rdlong	arg02, local01
26ecc     18 1E 86 F1 | 	sub	local01, #24
26ed0     11 13 02 F6 | 	mov	arg01, local03
26ed4     38 F3 BF FD | 	call	#_fatfs_cc_move_window
26ed8     FD 24 0A F6 | 	mov	local04, result1 wz
26edc     50 00 90 5D |  if_ne	jmp	#LR__3953
26ee0     1C 1E 06 F1 | 	add	local01, #28
26ee4     0F 29 02 FB | 	rdlong	local06, local01
26ee8     1C 1E 86 F1 | 	sub	local01, #28
26eec     14 29 C2 FA | 	rdbyte	local06, local06
26ef0     E5 28 0E F2 | 	cmp	local06, #229 wz
26ef4     1C 1E 06 51 |  if_ne	add	local01, #28
26ef8     0F 2B 02 5B |  if_ne	rdlong	local07, local01
26efc     1C 1E 86 51 |  if_ne	sub	local01, #28
26f00     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
26f04     10 00 90 5D |  if_ne	jmp	#LR__3951
26f08     01 26 06 F1 | 	add	local05, #1
26f0c     10 27 0A F2 | 	cmp	local05, local02 wz
26f10     1C 00 90 AD |  if_e	jmp	#LR__3953
26f14     04 00 90 FD | 	jmp	#LR__3952
26f18                 | LR__3951
26f18     00 26 06 F6 | 	mov	local05, #0
26f1c                 | LR__3952
26f1c     0F 13 02 F6 | 	mov	arg01, local01
26f20     01 14 06 F6 | 	mov	arg02, #1
26f24     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
26f28     FD 24 0A F6 | 	mov	local04, result1 wz
26f2c     94 FF 9F AD |  if_e	jmp	#LR__3950
26f30                 | LR__3953
26f30                 | LR__3954
26f30     04 24 0E F2 | 	cmp	local04, #4 wz
26f34     07 24 06 A6 |  if_e	mov	local04, #7
26f38                 | ' 	return res;
26f38     12 FB 01 F6 | 	mov	result1, local04
26f3c     A7 F0 03 F6 | 	mov	ptra, fp
26f40     B2 00 A0 FD | 	call	#popregs_
26f44                 | _fatfs_cc_dir_alloc_ret
26f44     2D 00 64 FD | 	ret
26f48                 | 
26f48                 | _fatfs_cc_ld_clust
26f48     09 01 02 F6 | 	mov	_var01, arg01
26f4c     0A 13 02 F6 | 	mov	arg01, arg02
26f50     1A 12 06 F1 | 	add	arg01, #26
26f54                 | ' {
26f54                 | ' 
26f54                 | ' 	return *((WORD*)ptr);
26f54     09 FB E1 FA | 	rdword	result1, arg01
26f58     FD 12 32 F9 | 	getword	arg01, result1, #0
26f5c     00 01 C2 FA | 	rdbyte	_var01, _var01
26f60     03 00 0E F2 | 	cmp	_var01, #3 wz
26f64     14 14 06 A1 |  if_e	add	arg02, #20
26f68                 | ' {
26f68                 | ' 
26f68                 | ' 	return *((WORD*)ptr);
26f68     0A FB E1 AA |  if_e	rdword	result1, arg02
26f6c     10 FA 65 A0 |  if_e	shl	result1, #16
26f70     FD 12 42 A5 |  if_e	or	arg01, result1
26f74                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
26f74                 | ' 	}
26f74                 | ' 
26f74                 | ' 	return cl;
26f74     09 FB 01 F6 | 	mov	result1, arg01
26f78                 | _fatfs_cc_ld_clust_ret
26f78     2D 00 64 FD | 	ret
26f7c                 | 
26f7c                 | _fatfs_cc_st_clust
26f7c     09 01 02 F6 | 	mov	_var01, arg01
26f80     0A 13 02 F6 | 	mov	arg01, arg02
26f84     1A 12 06 F1 | 	add	arg01, #26
26f88     09 17 52 FC | 	wrword	arg03, arg01
26f8c     00 01 C2 FA | 	rdbyte	_var01, _var01
26f90     03 00 0E F2 | 	cmp	_var01, #3 wz
26f94     14 14 06 A1 |  if_e	add	arg02, #20
26f98     10 16 46 A0 |  if_e	shr	arg03, #16
26f9c     0A 17 52 AC |  if_e	wrword	arg03, arg02
26fa0                 | _fatfs_cc_st_clust_ret
26fa0     2D 00 64 FD | 	ret
26fa4                 | 
26fa4                 | _fatfs_cc_cmp_lfn
26fa4     07 4A 05 F6 | 	mov	COUNT_, #7
26fa8     A8 00 A0 FD | 	call	#pushregs_
26fac     09 1F 02 F6 | 	mov	local01, arg01
26fb0     0A 13 02 F6 | 	mov	arg01, arg02
26fb4     1A 12 06 F1 | 	add	arg01, #26
26fb8                 | ' {
26fb8                 | ' 
26fb8                 | ' 	return *((WORD*)ptr);
26fb8     09 FB E9 FA | 	rdword	result1, arg01 wz
26fbc     00 FA 05 56 |  if_ne	mov	result1, #0
26fc0     E0 00 90 5D |  if_ne	jmp	#LR__3966
26fc4     0A 21 C2 FA | 	rdbyte	local02, arg02
26fc8     3F 20 06 F5 | 	and	local02, #63
26fcc     01 20 86 F1 | 	sub	local02, #1
26fd0     0D 20 06 FD | 	qmul	local02, #13
26fd4                 | ' 
26fd4                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
26fd4                 | ' 
26fd4                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
26fd4     01 22 06 F6 | 	mov	local03, #1
26fd8     00 24 06 F6 | 	mov	local04, #0
26fdc     18 26 62 FD | 	getqx	local05
26fe0                 | LR__3960
26fe0     0D 24 16 F2 | 	cmp	local04, #13 wc
26fe4     9C 00 90 3D |  if_ae	jmp	#LR__3965
26fe8     0A 13 02 F6 | 	mov	arg01, arg02
26fec     12 21 02 F6 | 	mov	local02, local04
26ff0     01 00 00 FF 
26ff4     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
26ff8     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
26ffc     10 21 C2 FA | 	rdbyte	local02, local02
27000     01 20 06 FA | 	mul	local02, #1
27004     10 13 02 F1 | 	add	arg01, local02
27008     01 00 00 FF 
2700c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
27010                 | ' {
27010                 | ' 
27010                 | ' 	return *((WORD*)ptr);
27010     09 FB E1 FA | 	rdword	result1, arg01
27014     FD 28 02 F6 | 	mov	local06, result1
27018     11 21 02 F6 | 	mov	local02, local03
2701c     0F 20 4E F7 | 	zerox	local02, #15 wz
27020     44 00 90 AD |  if_e	jmp	#LR__3963
27024     00 27 16 F2 | 	cmp	local05, #256 wc
27028     2C 00 90 3D |  if_ae	jmp	#LR__3961
2702c     14 13 32 F9 | 	getword	arg01, local06, #0
27030     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
27034     FD 20 02 F6 | 	mov	local02, result1
27038     13 23 02 F6 | 	mov	local03, local05
2703c     01 22 66 F0 | 	shl	local03, #1
27040     0F 23 02 F1 | 	add	local03, local01
27044     11 13 E2 FA | 	rdword	arg01, local03
27048     01 26 06 F1 | 	add	local05, #1
2704c     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
27050     FD 20 0A F2 | 	cmp	local02, result1 wz
27054     08 00 90 AD |  if_e	jmp	#LR__3962
27058                 | LR__3961
27058                 | ' 				return 0;
27058     00 FA 05 F6 | 	mov	result1, #0
2705c     44 00 90 FD | 	jmp	#LR__3966
27060                 | LR__3962
27060     14 23 02 F6 | 	mov	local03, local06
27064     14 00 90 FD | 	jmp	#LR__3964
27068                 | LR__3963
27068     14 29 32 F9 | 	getword	local06, local06, #0
2706c     7F 00 00 FF 
27070     FF 29 0E F2 | 	cmp	local06, ##65535 wz
27074     00 FA 05 56 |  if_ne	mov	result1, #0
27078     28 00 90 5D |  if_ne	jmp	#LR__3966
2707c                 | LR__3964
2707c     01 24 06 F1 | 	add	local04, #1
27080     5C FF 9F FD | 	jmp	#LR__3960
27084                 | LR__3965
27084     0A 21 C2 FA | 	rdbyte	local02, arg02
27088     40 20 CE F7 | 	test	local02, #64 wz
2708c     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
27090     01 26 66 50 |  if_ne	shl	local05, #1
27094     0F 27 02 51 |  if_ne	add	local05, local01
27098     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
2709c     00 FA 05 56 |  if_ne	mov	result1, #0
270a0                 | ' 
270a0                 | ' 	return 1;
270a0     01 FA 05 A6 |  if_e	mov	result1, #1
270a4                 | LR__3966
270a4     A7 F0 03 F6 | 	mov	ptra, fp
270a8     B2 00 A0 FD | 	call	#popregs_
270ac                 | _fatfs_cc_cmp_lfn_ret
270ac     2D 00 64 FD | 	ret
270b0                 | 
270b0                 | _fatfs_cc_pick_lfn
270b0     09 01 02 F6 | 	mov	_var01, arg01
270b4     0A 13 02 F6 | 	mov	arg01, arg02
270b8     1A 12 06 F1 | 	add	arg01, #26
270bc                 | ' {
270bc                 | ' 
270bc                 | ' 	return *((WORD*)ptr);
270bc     09 FB E9 FA | 	rdword	result1, arg01 wz
270c0     00 FA 05 56 |  if_ne	mov	result1, #0
270c4     D4 00 90 5D |  if_ne	jmp	#LR__3975
270c8     0A 03 C2 FA | 	rdbyte	_var02, arg02
270cc     40 02 26 F5 | 	andn	_var02, #64
270d0     01 02 86 F1 | 	sub	_var02, #1
270d4     0D 02 06 FD | 	qmul	_var02, #13
270d8                 | ' 
270d8                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
270d8                 | ' 
270d8                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
270d8     01 04 06 F6 | 	mov	_var03, #1
270dc     00 06 06 F6 | 	mov	_var04, #0
270e0     18 08 62 FD | 	getqx	_var05
270e4                 | LR__3970
270e4     0D 06 16 F2 | 	cmp	_var04, #13 wc
270e8     80 00 90 3D |  if_ae	jmp	#LR__3973
270ec     0A 13 02 F6 | 	mov	arg01, arg02
270f0     03 03 02 F6 | 	mov	_var02, _var04
270f4     01 00 00 FF 
270f8     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
270fc     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
27100     01 03 C2 FA | 	rdbyte	_var02, _var02
27104     01 02 06 FA | 	mul	_var02, #1
27108     01 13 02 F1 | 	add	arg01, _var02
2710c     01 00 00 FF 
27110     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
27114                 | ' {
27114                 | ' 
27114                 | ' 	return *((WORD*)ptr);
27114     09 FB E1 FA | 	rdword	result1, arg01
27118     FD 0A 02 F6 | 	mov	_var06, result1
2711c     02 03 02 F6 | 	mov	_var02, _var03
27120     0F 02 4E F7 | 	zerox	_var02, #15 wz
27124     28 00 90 AD |  if_e	jmp	#LR__3971
27128     00 09 16 F2 | 	cmp	_var05, #256 wc
2712c     00 FA 05 36 |  if_ae	mov	result1, #0
27130     68 00 90 3D |  if_ae	jmp	#LR__3975
27134     04 03 02 F6 | 	mov	_var02, _var05
27138     01 02 66 F0 | 	shl	_var02, #1
2713c     00 03 02 F1 | 	add	_var02, _var01
27140     05 05 02 F6 | 	mov	_var03, _var06
27144     01 05 52 FC | 	wrword	_var03, _var02
27148     01 08 06 F1 | 	add	_var05, #1
2714c     14 00 90 FD | 	jmp	#LR__3972
27150                 | LR__3971
27150     05 0B 32 F9 | 	getword	_var06, _var06, #0
27154     7F 00 00 FF 
27158     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
2715c     00 FA 05 56 |  if_ne	mov	result1, #0
27160     38 00 90 5D |  if_ne	jmp	#LR__3975
27164                 | LR__3972
27164     01 06 06 F1 | 	add	_var04, #1
27168     78 FF 9F FD | 	jmp	#LR__3970
2716c                 | LR__3973
2716c     0A 03 C2 FA | 	rdbyte	_var02, arg02
27170     40 02 CE F7 | 	test	_var02, #64 wz
27174     02 0D 02 56 |  if_ne	mov	_var07, _var03
27178     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
2717c     18 00 90 AD |  if_e	jmp	#LR__3974
27180     00 09 16 F2 | 	cmp	_var05, #256 wc
27184     00 FA 05 36 |  if_ae	mov	result1, #0
27188     10 00 90 3D |  if_ae	jmp	#LR__3975
2718c     01 08 66 F0 | 	shl	_var05, #1
27190     00 09 02 F1 | 	add	_var05, _var01
27194     04 01 58 FC | 	wrword	#0, _var05
27198                 | LR__3974
27198                 | ' 		lfnbuf[i] = 0;
27198                 | ' 	}
27198                 | ' 
27198                 | ' 	return 1;
27198     01 FA 05 F6 | 	mov	result1, #1
2719c                 | LR__3975
2719c                 | _fatfs_cc_pick_lfn_ret
2719c     2D 00 64 FD | 	ret
271a0                 | 
271a0                 | _fatfs_cc_put_lfn
271a0     0D 14 06 F1 | 	add	arg02, #13
271a4     0A 19 42 FC | 	wrbyte	arg04, arg02
271a8     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
271ac     01 18 86 F1 | 	sub	arg04, #1
271b0     0D 18 06 FD | 	qmul	arg04, #13
271b4     09 01 02 F6 | 	mov	_var01, arg01
271b8     02 14 86 F1 | 	sub	arg02, #2
271bc     0A 1F 48 FC | 	wrbyte	#15, arg02
271c0     01 14 06 F1 | 	add	arg02, #1
271c4     0A 01 48 FC | 	wrbyte	#0, arg02
271c8     0C 14 86 F1 | 	sub	arg02, #12
271cc     0A 13 02 F6 | 	mov	arg01, arg02
271d0     1A 12 06 F1 | 	add	arg01, #26
271d4     09 01 58 FC | 	wrword	#0, arg01
271d8     00 02 06 F6 | 	mov	_var02, #0
271dc     00 04 06 F6 | 	mov	_var03, #0
271e0                 | ' 	BYTE* dir,
271e0                 | ' 	BYTE ord,
271e0                 | ' 	BYTE sum
271e0                 | ' )
271e0                 | ' {
271e0                 | ' 	UINT i, s;
271e0                 | ' 	WCHAR wc;
271e0                 | ' 
271e0                 | ' 
271e0                 | ' 	dir[ 13 ] = sum;
271e0                 | ' 	dir[ 11 ] =  0x0F ;
271e0                 | ' 	dir[ 12 ] = 0;
271e0                 | ' 	st_word(dir +  26 , 0);
271e0                 | ' 
271e0                 | ' 	i = (ord - 1) * 13;
271e0                 | ' 	s = wc = 0;
271e0                 | ' 	do {
271e0     01 00 00 FF 
271e4     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
271e8     18 06 62 FD | 	getqx	_var04
271ec     97 2A 48 FB | 	callpa	#(@LR__3981-@LR__3980)>>2,fcache_load_ptr_
271f0                 | LR__3980
271f0     01 19 32 F9 | 	getword	arg04, _var02, #0
271f4     7F 00 00 FF 
271f8     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
271fc     03 13 02 56 |  if_ne	mov	arg01, _var04
27200     01 06 06 51 |  if_ne	add	_var04, #1
27204     01 12 66 50 |  if_ne	shl	arg01, #1
27208     00 13 02 51 |  if_ne	add	arg01, _var01
2720c     09 03 E2 5A |  if_ne	rdword	_var02, arg01
27210     0A 13 02 F6 | 	mov	arg01, arg02
27214     02 19 02 F6 | 	mov	arg04, _var03
27218     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
2721c     0C 19 C2 FA | 	rdbyte	arg04, arg04
27220     01 18 06 FA | 	mul	arg04, #1
27224     0C 13 02 F1 | 	add	arg01, arg04
27228     09 03 52 FC | 	wrword	_var02, arg01
2722c     01 19 02 F6 | 	mov	arg04, _var02
27230     0F 18 4E F7 | 	zerox	arg04, #15 wz
27234     0F 02 CE A9 |  if_e	bmask	_var02, #15
27238     01 04 06 F1 | 	add	_var03, #1
2723c     0D 04 16 F2 | 	cmp	_var03, #13 wc
27240     AC FF 9F CD |  if_b	jmp	#LR__3980
27244                 | LR__3981
27244     01 00 00 FF 
27248     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2724c     01 03 32 F9 | 	getword	_var02, _var02, #0
27250     7F 00 00 FF 
27254     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
27258     01 06 66 50 |  if_ne	shl	_var04, #1
2725c     00 07 02 51 |  if_ne	add	_var04, _var01
27260     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
27264     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
27268     40 16 46 A5 |  if_e	or	arg03, #64
2726c     0A 17 42 FC | 	wrbyte	arg03, arg02
27270                 | _fatfs_cc_put_lfn_ret
27270     2D 00 64 FD | 	ret
27274                 | 
27274                 | _fatfs_cc_gen_numname
27274     08 4A 05 F6 | 	mov	COUNT_, #8
27278     A8 00 A0 FD | 	call	#pushregs_
2727c     2C F0 07 F1 | 	add	ptra, #44
27280     09 1F 02 F6 | 	mov	local01, arg01
27284     0A 21 02 F6 | 	mov	local02, arg02
27288     0B 23 02 F6 | 	mov	local03, arg03
2728c     0C 25 02 F6 | 	mov	local04, arg04
27290     0F 13 02 F6 | 	mov	arg01, local01
27294     10 15 02 F6 | 	mov	arg02, local02
27298     0B 16 06 F6 | 	mov	arg03, #11
2729c     F4 77 BF FD | 	call	#__system____builtin_memmove
272a0     06 24 16 F2 | 	cmp	local04, #6 wc
272a4     48 00 90 CD |  if_b	jmp	#LR__3995
272a8     12 27 02 F6 | 	mov	local05, local04
272ac     97 1E 48 FB | 	callpa	#(@LR__3993-@LR__3990)>>2,fcache_load_ptr_
272b0                 | ' 		sreg = seq;
272b0                 | ' 		while (*lfn) {
272b0                 | LR__3990
272b0     11 29 EA FA | 	rdword	local06, local03 wz
272b4     34 00 90 AD |  if_e	jmp	#LR__3994
272b8     11 2B E2 FA | 	rdword	local07, local03
272bc                 | ' 			wc = *lfn++;
272bc                 | ' 			for (i = 0; i < 16; i++) {
272bc     02 22 06 F1 | 	add	local03, #2
272c0     10 12 DC FC | 	rep	@LR__3992, #16
272c4                 | LR__3991
272c4     01 26 66 F0 | 	shl	local05, #1
272c8     15 29 32 F9 | 	getword	local06, local07, #0
272cc     01 28 06 F5 | 	and	local06, #1
272d0     14 27 02 F1 | 	add	local05, local06
272d4     15 2B 32 F9 | 	getword	local07, local07, #0
272d8     01 2A 46 F0 | 	shr	local07, #1
272dc     10 26 2E F4 | 	testbn	local05, #16 wz
272e0     88 00 00 5F 
272e4     21 26 66 55 |  if_ne	xor	local05, ##69665
272e8                 | LR__3992
272e8     C4 FF 9F FD | 	jmp	#LR__3990
272ec                 | LR__3993
272ec                 | LR__3994
272ec     13 25 02 F6 | 	mov	local04, local05
272f0                 | LR__3995
272f0     07 2A 06 F6 | 	mov	local07, #7
272f4                 | ' 			}
272f4                 | ' 		}
272f4                 | ' 		seq = (UINT)sreg;
272f4                 | ' 	}
272f4                 | ' 
272f4                 | ' 
272f4                 | ' 	i = 7;
272f4                 | ' 	do {
272f4     10 4E 05 F1 | 	add	fp, #16
272f8     97 1A 48 FB | 	callpa	#(@LR__3997-@LR__3996)>>2,fcache_load_ptr_
272fc                 | LR__3996
272fc     12 27 42 F8 | 	getnib	local05, local04, #0
27300     30 26 06 F1 | 	add	local05, #48
27304     04 24 46 F0 | 	shr	local04, #4
27308     13 29 E2 F8 | 	getbyte	local06, local05, #0
2730c     3A 28 16 F2 | 	cmp	local06, #58 wc
27310     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
27314     07 26 06 31 |  if_ae	add	local05, #7
27318     15 29 02 F6 | 	mov	local06, local07
2731c     01 2A 8E F1 | 	sub	local07, #1 wz
27320     A7 28 02 F1 | 	add	local06, fp
27324     14 27 42 FC | 	wrbyte	local05, local06
27328     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
2732c     CC FF 9F 5D |  if_ne	jmp	#LR__3996
27330                 | LR__3997
27330     15 29 02 F6 | 	mov	local06, local07
27334     A7 28 02 F1 | 	add	local06, fp
27338     14 FD 48 FC | 	wrbyte	#126, local06
2733c                 | ' 	ns[i] = '~';
2733c                 | ' 
2733c                 | ' 
2733c                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2733c     00 26 06 F6 | 	mov	local05, #0
27340     10 4E 85 F1 | 	sub	fp, #16
27344     97 2A 48 FB | 	callpa	#(@LR__4000-@LR__3998)>>2,fcache_load_ptr_
27348                 | LR__3998
27348     15 27 12 F2 | 	cmp	local05, local07 wc
2734c     4C 00 90 3D |  if_ae	jmp	#LR__4001
27350     13 29 02 F6 | 	mov	local06, local05
27354     0F 29 02 F1 | 	add	local06, local01
27358     14 29 C2 FA | 	rdbyte	local06, local06
2735c     20 28 0E F2 | 	cmp	local06, #32 wz
27360     38 00 90 AD |  if_e	jmp	#LR__4001
27364     13 13 02 F6 | 	mov	arg01, local05
27368     0F 13 02 F1 | 	add	arg01, local01
2736c     09 13 CA FA | 	rdbyte	arg01, arg01 wz
27370     00 FA 05 56 |  if_ne	mov	result1, #0
27374                 | ' 
27374                 | ' 	return 0;
27374     00 FA 05 A6 |  if_e	mov	result1, #0
27378     00 FA 0D F2 | 	cmp	result1, #0 wz
2737c     14 00 90 AD |  if_e	jmp	#LR__3999
27380     15 29 02 F6 | 	mov	local06, local07
27384     01 28 86 F1 | 	sub	local06, #1
27388     14 27 0A F2 | 	cmp	local05, local06 wz
2738c     0C 00 90 AD |  if_e	jmp	#LR__4001
27390     01 26 06 F1 | 	add	local05, #1
27394                 | LR__3999
27394     01 26 06 F1 | 	add	local05, #1
27398     AC FF 9F FD | 	jmp	#LR__3998
2739c                 | LR__4000
2739c                 | LR__4001
2739c     97 20 48 FB | 	callpa	#(@LR__4005-@LR__4002)>>2,fcache_load_ptr_
273a0                 | ' 			j++;
273a0                 | ' 		}
273a0                 | ' 	}
273a0                 | ' 	do {
273a0                 | LR__4002
273a0     13 29 02 F6 | 	mov	local06, local05
273a4     0F 29 02 F1 | 	add	local06, local01
273a8     08 2A 16 F2 | 	cmp	local07, #8 wc
273ac     01 26 06 F1 | 	add	local05, #1
273b0     1C 00 90 3D |  if_ae	jmp	#LR__4003
273b4     15 25 02 F6 | 	mov	local04, local07
273b8     10 4E 05 F1 | 	add	fp, #16
273bc     A7 24 02 F1 | 	add	local04, fp
273c0     12 2D C2 FA | 	rdbyte	local08, local04
273c4     01 2A 06 F1 | 	add	local07, #1
273c8     10 4E 85 F1 | 	sub	fp, #16
273cc     04 00 90 FD | 	jmp	#LR__4004
273d0                 | LR__4003
273d0     20 2C 06 F6 | 	mov	local08, #32
273d4                 | LR__4004
273d4     14 2D 42 FC | 	wrbyte	local08, local06
273d8     08 26 16 F2 | 	cmp	local05, #8 wc
273dc     C0 FF 9F CD |  if_b	jmp	#LR__4002
273e0                 | LR__4005
273e0     A7 F0 03 F6 | 	mov	ptra, fp
273e4     B2 00 A0 FD | 	call	#popregs_
273e8                 | _fatfs_cc_gen_numname_ret
273e8     2D 00 64 FD | 	ret
273ec                 | 
273ec                 | _fatfs_cc_sum_sfn
273ec     00 00 06 F6 | 	mov	_var01, #0
273f0                 | ' )
273f0                 | ' {
273f0                 | ' 	BYTE sum = 0;
273f0                 | ' 	UINT n = 11;
273f0                 | ' 
273f0                 | ' 	do {
273f0     97 12 48 FB | 	callpa	#(@LR__4012-@LR__4010)>>2,fcache_load_ptr_
273f4                 | LR__4010
273f4     0B 10 DC FC | 	rep	@LR__4013, #11
273f8                 | LR__4011
273f8     00 FB E1 F8 | 	getbyte	result1, _var01, #0
273fc     01 FA 45 F0 | 	shr	result1, #1
27400     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
27404     07 00 66 F0 | 	shl	_var01, #7
27408     00 FB 01 F1 | 	add	result1, _var01
2740c     09 01 C2 FA | 	rdbyte	_var01, arg01
27410     FD 00 02 F1 | 	add	_var01, result1
27414     01 12 06 F1 | 	add	arg01, #1
27418                 | LR__4012
27418                 | LR__4013
27418                 | ' 	return sum;
27418     00 FB 01 F6 | 	mov	result1, _var01
2741c                 | _fatfs_cc_sum_sfn_ret
2741c     2D 00 64 FD | 	ret
27420                 | 
27420                 | _fatfs_cc_dir_read
27420     0C 4A 05 F6 | 	mov	COUNT_, #12
27424     A8 00 A0 FD | 	call	#pushregs_
27428     09 1F 02 F6 | 	mov	local01, arg01
2742c     0A 21 02 F6 | 	mov	local02, arg02
27430     04 22 06 F6 | 	mov	local03, #4
27434     0F 25 02 FB | 	rdlong	local04, local01
27438     FF 26 06 F6 | 	mov	local05, #255
2743c     FF 28 06 F6 | 	mov	local06, #255
27440                 | ' )
27440                 | ' {
27440                 | ' 	FRESULT res = FR_NO_FILE;
27440                 | ' 	FATFS *fs = dp->obj.fs;
27440                 | ' 	BYTE attr, b;
27440                 | ' 
27440                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
27440                 | ' 
27440                 | ' 
27440                 | ' 	while (dp->sect) {
27440                 | LR__4020
27440     18 1E 06 F1 | 	add	local01, #24
27444     0F FB 09 FB | 	rdlong	result1, local01 wz
27448     18 1E 86 F1 | 	sub	local01, #24
2744c     AC 01 90 AD |  if_e	jmp	#LR__4030
27450     18 1E 06 F1 | 	add	local01, #24
27454     0F 15 02 FB | 	rdlong	arg02, local01
27458     18 1E 86 F1 | 	sub	local01, #24
2745c     12 13 02 F6 | 	mov	arg01, local04
27460     AC ED BF FD | 	call	#_fatfs_cc_move_window
27464     FD 22 0A F6 | 	mov	local03, result1 wz
27468     90 01 90 5D |  if_ne	jmp	#LR__4030
2746c     1C 1E 06 F1 | 	add	local01, #28
27470     0F FB 01 FB | 	rdlong	result1, local01
27474     1C 1E 86 F1 | 	sub	local01, #28
27478     FD 2A C2 FA | 	rdbyte	local07, result1
2747c     15 FB 01 F6 | 	mov	result1, local07
27480     07 FA 4D F7 | 	zerox	result1, #7 wz
27484     04 22 06 A6 |  if_e	mov	local03, #4
27488                 | ' 			res = FR_NO_FILE; break;
27488     70 01 90 AD |  if_e	jmp	#LR__4030
2748c     1C 1E 06 F1 | 	add	local01, #28
27490     0F 2D 02 FB | 	rdlong	local08, local01
27494     0B 2C 06 F1 | 	add	local08, #11
27498     16 2F C2 FA | 	rdbyte	local09, local08
2749c     3F 2E 06 F5 | 	and	local09, #63
274a0     16 1E 86 F1 | 	sub	local01, #22
274a4     0F 2F 42 FC | 	wrbyte	local09, local01
274a8     06 1E 86 F1 | 	sub	local01, #6
274ac     15 FB E1 F8 | 	getbyte	result1, local07, #0
274b0     E5 FA 0D F2 | 	cmp	result1, #229 wz
274b4     15 2D 02 56 |  if_ne	mov	local08, local07
274b8     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
274bc     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
274c0     1C 00 90 AD |  if_e	jmp	#LR__4021
274c4     00 30 06 F6 | 	mov	local10, #0
274c8     17 2D E2 F8 | 	getbyte	local08, local09, #0
274cc     20 2C 26 F5 | 	andn	local08, #32
274d0     08 2C 0E F2 | 	cmp	local08, #8 wz
274d4     01 30 06 A6 |  if_e	mov	local10, #1
274d8     10 31 0A F2 | 	cmp	local10, local02 wz
274dc     08 00 90 AD |  if_e	jmp	#LR__4022
274e0                 | LR__4021
274e0     FF 26 06 F6 | 	mov	local05, #255
274e4     00 01 90 FD | 	jmp	#LR__4029
274e8                 | LR__4022
274e8     17 2F E2 F8 | 	getbyte	local09, local09, #0
274ec     0F 2E 0E F2 | 	cmp	local09, #15 wz
274f0     B4 00 90 5D |  if_ne	jmp	#LR__4026
274f4     15 33 E2 F8 | 	getbyte	local11, local07, #0
274f8     40 32 CE F7 | 	test	local11, #64 wz
274fc     30 00 90 AD |  if_e	jmp	#LR__4023
27500     1C 1E 06 F1 | 	add	local01, #28
27504     0F 33 02 FB | 	rdlong	local11, local01
27508     0D 32 06 F1 | 	add	local11, #13
2750c     19 29 C2 FA | 	rdbyte	local06, local11
27510     15 2B E2 F8 | 	getbyte	local07, local07, #0
27514     BF 2A 06 F5 | 	and	local07, #191
27518     15 27 02 F6 | 	mov	local05, local07
2751c     0C 1E 86 F1 | 	sub	local01, #12
27520     0F 33 02 FB | 	rdlong	local11, local01
27524     1C 1E 06 F1 | 	add	local01, #28
27528     0F 33 62 FC | 	wrlong	local11, local01
2752c     2C 1E 86 F1 | 	sub	local01, #44
27530                 | LR__4023
27530     15 2D E2 F8 | 	getbyte	local08, local07, #0
27534     13 31 E2 F8 | 	getbyte	local10, local05, #0
27538     18 2D 0A F2 | 	cmp	local08, local10 wz
2753c     5C 00 90 5D |  if_ne	jmp	#LR__4024
27540     14 31 E2 F8 | 	getbyte	local10, local06, #0
27544     1C 1E 06 F1 | 	add	local01, #28
27548     0F 2F 02 FB | 	rdlong	local09, local01
2754c     1C 1E 86 F1 | 	sub	local01, #28
27550     0D 2E 06 F1 | 	add	local09, #13
27554     17 2D C2 FA | 	rdbyte	local08, local09
27558     16 2F E2 F8 | 	getbyte	local09, local08, #0
2755c     17 31 0A F2 | 	cmp	local10, local09 wz
27560     38 00 90 5D |  if_ne	jmp	#LR__4024
27564     0C 24 06 F1 | 	add	local04, #12
27568     12 13 02 FB | 	rdlong	arg01, local04
2756c     0C 24 86 F1 | 	sub	local04, #12
27570     1C 1E 06 F1 | 	add	local01, #28
27574     0F 35 02 FB | 	rdlong	local12, local01
27578     1C 1E 86 F1 | 	sub	local01, #28
2757c     1A 15 02 F6 | 	mov	arg02, local12
27580     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
27584     00 FA 4D F2 | 	cmps	result1, #0 wz
27588     13 35 02 56 |  if_ne	mov	local12, local05
2758c     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
27590     01 34 86 51 |  if_ne	sub	local12, #1
27594     1A 33 02 56 |  if_ne	mov	local11, local12
27598     04 00 90 5D |  if_ne	jmp	#LR__4025
2759c                 | LR__4024
2759c     FF 32 06 F6 | 	mov	local11, #255
275a0                 | LR__4025
275a0     19 27 02 F6 | 	mov	local05, local11
275a4     40 00 90 FD | 	jmp	#LR__4028
275a8                 | LR__4026
275a8     13 33 02 F6 | 	mov	local11, local05
275ac     07 32 4E F7 | 	zerox	local11, #7 wz
275b0     20 00 90 5D |  if_ne	jmp	#LR__4027
275b4     14 29 E2 F8 | 	getbyte	local06, local06, #0
275b8     1C 1E 06 F1 | 	add	local01, #28
275bc     0F 13 02 FB | 	rdlong	arg01, local01
275c0     1C 1E 86 F1 | 	sub	local01, #28
275c4     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
275c8     FD FA E1 F8 | 	getbyte	result1, result1, #0
275cc     FD 28 0A F2 | 	cmp	local06, result1 wz
275d0     28 00 90 AD |  if_e	jmp	#LR__4030
275d4                 | LR__4027
275d4     2C 1E 06 F1 | 	add	local01, #44
275d8     FF FF FF FF 
275dc     0F FF 6B FC | 	wrlong	##-1, local01
275e0     2C 1E 86 F1 | 	sub	local01, #44
275e4                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
275e4                 | ' 					}
275e4                 | ' 					break;
275e4     14 00 90 FD | 	jmp	#LR__4030
275e8                 | LR__4028
275e8                 | LR__4029
275e8     0F 13 02 F6 | 	mov	arg01, local01
275ec     00 14 06 F6 | 	mov	arg02, #0
275f0     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
275f4     FD 22 0A F6 | 	mov	local03, result1 wz
275f8     44 FE 9F AD |  if_e	jmp	#LR__4020
275fc                 | LR__4030
275fc     00 22 0E F2 | 	cmp	local03, #0 wz
27600     18 1E 06 51 |  if_ne	add	local01, #24
27604     0F 01 68 5C |  if_ne	wrlong	#0, local01
27608                 | ' 	return res;
27608     11 FB 01 F6 | 	mov	result1, local03
2760c     A7 F0 03 F6 | 	mov	ptra, fp
27610     B2 00 A0 FD | 	call	#popregs_
27614                 | _fatfs_cc_dir_read_ret
27614     2D 00 64 FD | 	ret
27618                 | 
27618                 | _fatfs_cc_dir_find
27618     0B 4A 05 F6 | 	mov	COUNT_, #11
2761c     A8 00 A0 FD | 	call	#pushregs_
27620     09 1F 02 F6 | 	mov	local01, arg01
27624     0F 21 02 FB | 	rdlong	local02, local01
27628     0F 13 02 F6 | 	mov	arg01, local01
2762c     00 14 06 F6 | 	mov	arg02, #0
27630     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
27634     00 FA 0D F2 | 	cmp	result1, #0 wz
27638     18 02 90 5D |  if_ne	jmp	#LR__4052
2763c     FF 22 06 F6 | 	mov	local03, #255
27640     FF 24 06 F6 | 	mov	local04, #255
27644     2C 1E 06 F1 | 	add	local01, #44
27648     FF FF FF FF 
2764c     0F FF 6B FC | 	wrlong	##-1, local01
27650     2C 1E 86 F1 | 	sub	local01, #44
27654                 | ' #line 2404 "ff.c"
27654                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
27654                 | ' 
27654                 | ' 	do {
27654                 | LR__4040
27654     18 1E 06 F1 | 	add	local01, #24
27658     0F 15 02 FB | 	rdlong	arg02, local01
2765c     18 1E 86 F1 | 	sub	local01, #24
27660     10 13 02 F6 | 	mov	arg01, local02
27664     A8 EB BF FD | 	call	#_fatfs_cc_move_window
27668     FD 26 0A F6 | 	mov	local05, result1 wz
2766c     E0 01 90 5D |  if_ne	jmp	#LR__4051
27670     1C 1E 06 F1 | 	add	local01, #28
27674     0F 17 02 FB | 	rdlong	arg03, local01
27678     1C 1E 86 F1 | 	sub	local01, #28
2767c     0B 29 C2 FA | 	rdbyte	local06, arg03
27680     14 17 02 F6 | 	mov	arg03, local06
27684     07 16 4E F7 | 	zerox	arg03, #7 wz
27688     04 26 06 A6 |  if_e	mov	local05, #4
2768c     C0 01 90 AD |  if_e	jmp	#LR__4051
27690     1C 1E 06 F1 | 	add	local01, #28
27694     0F 2B 02 FB | 	rdlong	local07, local01
27698     15 17 02 F6 | 	mov	arg03, local07
2769c     0B 16 06 F1 | 	add	arg03, #11
276a0     0B 2D C2 FA | 	rdbyte	local08, arg03
276a4     3F 2C 06 F5 | 	and	local08, #63
276a8     16 1E 86 F1 | 	sub	local01, #22
276ac     0F 2D 42 FC | 	wrbyte	local08, local01
276b0     06 1E 86 F1 | 	sub	local01, #6
276b4     14 17 E2 F8 | 	getbyte	arg03, local06, #0
276b8     E5 16 0E F2 | 	cmp	arg03, #229 wz
276bc     18 00 90 AD |  if_e	jmp	#LR__4041
276c0     16 17 E2 F8 | 	getbyte	arg03, local08, #0
276c4     08 16 CE F7 | 	test	arg03, #8 wz
276c8     16 2B 02 56 |  if_ne	mov	local07, local08
276cc     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
276d0     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
276d4     18 00 90 AD |  if_e	jmp	#LR__4042
276d8                 | LR__4041
276d8     FF 24 06 F6 | 	mov	local04, #255
276dc     2C 1E 06 F1 | 	add	local01, #44
276e0     FF FF FF FF 
276e4     0F FF 6B FC | 	wrlong	##-1, local01
276e8     2C 1E 86 F1 | 	sub	local01, #44
276ec     4C 01 90 FD | 	jmp	#LR__4050
276f0                 | LR__4042
276f0     16 2D E2 F8 | 	getbyte	local08, local08, #0
276f4     0F 2C 0E F2 | 	cmp	local08, #15 wz
276f8     C8 00 90 5D |  if_ne	jmp	#LR__4046
276fc     2B 1E 06 F1 | 	add	local01, #43
27700     0F 2D C2 FA | 	rdbyte	local08, local01
27704     2B 1E 86 F1 | 	sub	local01, #43
27708     40 2C CE F7 | 	test	local08, #64 wz
2770c     2C 01 90 5D |  if_ne	jmp	#LR__4049
27710     14 2F E2 F8 | 	getbyte	local09, local06, #0
27714     40 2E CE F7 | 	test	local09, #64 wz
27718     30 00 90 AD |  if_e	jmp	#LR__4043
2771c     1C 1E 06 F1 | 	add	local01, #28
27720     0F 2F 02 FB | 	rdlong	local09, local01
27724     0D 2E 06 F1 | 	add	local09, #13
27728     17 23 C2 FA | 	rdbyte	local03, local09
2772c     14 29 E2 F8 | 	getbyte	local06, local06, #0
27730     BF 28 06 F5 | 	and	local06, #191
27734     14 25 02 F6 | 	mov	local04, local06
27738     0C 1E 86 F1 | 	sub	local01, #12
2773c     0F 2F 02 FB | 	rdlong	local09, local01
27740     1C 1E 06 F1 | 	add	local01, #28
27744     0F 2F 62 FC | 	wrlong	local09, local01
27748     2C 1E 86 F1 | 	sub	local01, #44
2774c                 | LR__4043
2774c     14 31 E2 F8 | 	getbyte	local10, local06, #0
27750     12 2B E2 F8 | 	getbyte	local07, local04, #0
27754     15 31 0A F2 | 	cmp	local10, local07 wz
27758     5C 00 90 5D |  if_ne	jmp	#LR__4044
2775c     11 2D E2 F8 | 	getbyte	local08, local03, #0
27760     1C 1E 06 F1 | 	add	local01, #28
27764     0F 2B 02 FB | 	rdlong	local07, local01
27768     1C 1E 86 F1 | 	sub	local01, #28
2776c     0D 2A 06 F1 | 	add	local07, #13
27770     15 29 C2 FA | 	rdbyte	local06, local07
27774     14 2B E2 F8 | 	getbyte	local07, local06, #0
27778     15 2D 0A F2 | 	cmp	local08, local07 wz
2777c     38 00 90 5D |  if_ne	jmp	#LR__4044
27780     0C 20 06 F1 | 	add	local02, #12
27784     10 13 02 FB | 	rdlong	arg01, local02
27788     0C 20 86 F1 | 	sub	local02, #12
2778c     1C 1E 06 F1 | 	add	local01, #28
27790     0F 33 02 FB | 	rdlong	local11, local01
27794     1C 1E 86 F1 | 	sub	local01, #28
27798     19 15 02 F6 | 	mov	arg02, local11
2779c     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
277a0     00 FA 4D F2 | 	cmps	result1, #0 wz
277a4     12 33 02 56 |  if_ne	mov	local11, local04
277a8     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
277ac     01 32 86 51 |  if_ne	sub	local11, #1
277b0     19 2F 02 56 |  if_ne	mov	local09, local11
277b4     04 00 90 5D |  if_ne	jmp	#LR__4045
277b8                 | LR__4044
277b8     FF 2E 06 F6 | 	mov	local09, #255
277bc                 | LR__4045
277bc     17 25 02 F6 | 	mov	local04, local09
277c0     78 00 90 FD | 	jmp	#LR__4049
277c4                 | LR__4046
277c4     12 2F 02 F6 | 	mov	local09, local04
277c8     07 2E 4E F7 | 	zerox	local09, #7 wz
277cc     20 00 90 5D |  if_ne	jmp	#LR__4047
277d0     11 31 E2 F8 | 	getbyte	local10, local03, #0
277d4     1C 1E 06 F1 | 	add	local01, #28
277d8     0F 13 02 FB | 	rdlong	arg01, local01
277dc     1C 1E 86 F1 | 	sub	local01, #28
277e0     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
277e4     FD FA E1 F8 | 	getbyte	result1, result1, #0
277e8     FD 30 0A F2 | 	cmp	local10, result1 wz
277ec     60 00 90 AD |  if_e	jmp	#LR__4051
277f0                 | LR__4047
277f0     2B 1E 06 F1 | 	add	local01, #43
277f4     0F 2F C2 FA | 	rdbyte	local09, local01
277f8     2B 1E 86 F1 | 	sub	local01, #43
277fc     01 2E CE F7 | 	test	local09, #1 wz
27800     24 00 90 5D |  if_ne	jmp	#LR__4048
27804     1C 1E 06 F1 | 	add	local01, #28
27808     0F 13 02 FB | 	rdlong	arg01, local01
2780c     04 1E 06 F1 | 	add	local01, #4
27810     0F 15 02 F6 | 	mov	arg02, local01
27814     20 1E 86 F1 | 	sub	local01, #32
27818     0B 16 06 F6 | 	mov	arg03, #11
2781c     88 DA BF FD | 	call	#_fatfs_cc_memcmp
27820     00 FA 0D F2 | 	cmp	result1, #0 wz
27824     28 00 90 AD |  if_e	jmp	#LR__4051
27828                 | LR__4048
27828     FF 24 06 F6 | 	mov	local04, #255
2782c     2C 1E 06 F1 | 	add	local01, #44
27830     FF FF FF FF 
27834     0F FF 6B FC | 	wrlong	##-1, local01
27838     2C 1E 86 F1 | 	sub	local01, #44
2783c                 | LR__4049
2783c                 | LR__4050
2783c     0F 13 02 F6 | 	mov	arg01, local01
27840     00 14 06 F6 | 	mov	arg02, #0
27844     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
27848     FD 26 0A F6 | 	mov	local05, result1 wz
2784c     04 FE 9F AD |  if_e	jmp	#LR__4040
27850                 | LR__4051
27850                 | ' 
27850                 | ' 	return res;
27850     13 FB 01 F6 | 	mov	result1, local05
27854                 | LR__4052
27854     A7 F0 03 F6 | 	mov	ptra, fp
27858     B2 00 A0 FD | 	call	#popregs_
2785c                 | _fatfs_cc_dir_find_ret
2785c     2D 00 64 FD | 	ret
27860                 | 
27860                 | _fatfs_cc_dir_register
27860     0A 4A 05 F6 | 	mov	COUNT_, #10
27864     A8 00 A0 FD | 	call	#pushregs_
27868     2C F0 07 F1 | 	add	ptra, #44
2786c     04 4E 05 F1 | 	add	fp, #4
27870     A7 12 62 FC | 	wrlong	arg01, fp
27874     09 1F 02 FB | 	rdlong	local01, arg01
27878     08 4E 05 F1 | 	add	fp, #8
2787c     A7 1E 62 FC | 	wrlong	local01, fp
27880     08 4E 85 F1 | 	sub	fp, #8
27884     A7 20 02 FB | 	rdlong	local02, fp
27888     04 4E 85 F1 | 	sub	fp, #4
2788c     2B 20 06 F1 | 	add	local02, #43
27890     10 21 C2 FA | 	rdbyte	local02, local02
27894     A0 20 CE F7 | 	test	local02, #160 wz
27898     06 FA 05 56 |  if_ne	mov	result1, #6
2789c     F8 03 90 5D |  if_ne	jmp	#LR__4075
278a0                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
278a0     14 4E 05 F1 | 	add	fp, #20
278a4     A7 00 68 FC | 	wrlong	#0, fp
278a8     14 4E 85 F1 | 	sub	fp, #20
278ac     97 28 48 FB | 	callpa	#(@LR__4061-@LR__4060)>>2,fcache_load_ptr_
278b0                 | LR__4060
278b0     0C 4E 05 F1 | 	add	fp, #12
278b4     A7 20 02 FB | 	rdlong	local02, fp
278b8     0C 20 06 F1 | 	add	local02, #12
278bc     10 23 02 FB | 	rdlong	local03, local02
278c0     08 4E 05 F1 | 	add	fp, #8
278c4     A7 24 02 FB | 	rdlong	local04, fp
278c8     14 4E 85 F1 | 	sub	fp, #20
278cc     01 24 66 F0 | 	shl	local04, #1
278d0     11 25 02 F1 | 	add	local04, local03
278d4     12 21 EA FA | 	rdword	local02, local04 wz
278d8     24 00 90 AD |  if_e	jmp	#LR__4062
278dc     14 4E 05 F1 | 	add	fp, #20
278e0     A7 26 02 FB | 	rdlong	local05, fp
278e4     13 29 02 F6 | 	mov	local06, local05
278e8     13 2B 02 F6 | 	mov	local07, local05
278ec     15 2D 02 F6 | 	mov	local08, local07
278f0     01 2C 06 F1 | 	add	local08, #1
278f4     A7 2C 62 FC | 	wrlong	local08, fp
278f8     14 4E 85 F1 | 	sub	fp, #20
278fc     B0 FF 9F FD | 	jmp	#LR__4060
27900                 | LR__4061
27900                 | LR__4062
27900     1C 4E 05 F1 | 	add	fp, #28
27904     A7 12 02 F6 | 	mov	arg01, fp
27908     18 4E 85 F1 | 	sub	fp, #24
2790c     A7 14 02 FB | 	rdlong	arg02, fp
27910     04 4E 85 F1 | 	sub	fp, #4
27914     20 14 06 F1 | 	add	arg02, #32
27918     0C 16 06 F6 | 	mov	arg03, #12
2791c     74 71 BF FD | 	call	#__system____builtin_memmove
27920     27 4E 05 F1 | 	add	fp, #39
27924     A7 2E C2 FA | 	rdbyte	local09, fp
27928     27 4E 85 F1 | 	sub	fp, #39
2792c     01 2E CE F7 | 	test	local09, #1 wz
27930     F4 00 90 AD |  if_e	jmp	#LR__4065
27934     04 4E 05 F1 | 	add	fp, #4
27938     A7 30 02 FB | 	rdlong	local10, fp
2793c     2B 30 06 F1 | 	add	local10, #43
27940     18 81 48 FC | 	wrbyte	#64, local10
27944                 | ' 		dp->fn[ 11 ] =  0x40 ;
27944                 | ' 		for (n = 1; n < 100; n++) {
27944     0C 4E 05 F1 | 	add	fp, #12
27948     A7 02 68 FC | 	wrlong	#1, fp
2794c     10 4E 85 F1 | 	sub	fp, #16
27950                 | LR__4063
27950     10 4E 05 F1 | 	add	fp, #16
27954     A7 20 02 FB | 	rdlong	local02, fp
27958     10 4E 85 F1 | 	sub	fp, #16
2795c     64 20 16 F2 | 	cmp	local02, #100 wc
27960     70 00 90 3D |  if_ae	jmp	#LR__4064
27964     04 4E 05 F1 | 	add	fp, #4
27968     A7 12 02 FB | 	rdlong	arg01, fp
2796c     20 12 06 F1 | 	add	arg01, #32
27970     18 4E 05 F1 | 	add	fp, #24
27974     A7 14 02 F6 | 	mov	arg02, fp
27978     10 4E 85 F1 | 	sub	fp, #16
2797c     A7 30 02 FB | 	rdlong	local10, fp
27980     0C 30 06 F1 | 	add	local10, #12
27984     18 17 02 FB | 	rdlong	arg03, local10
27988     04 4E 05 F1 | 	add	fp, #4
2798c     A7 18 02 FB | 	rdlong	arg04, fp
27990     10 4E 85 F1 | 	sub	fp, #16
27994     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
27998     04 4E 05 F1 | 	add	fp, #4
2799c     A7 12 02 FB | 	rdlong	arg01, fp
279a0     04 4E 85 F1 | 	sub	fp, #4
279a4     70 FC BF FD | 	call	#_fatfs_cc_dir_find
279a8     08 4E 05 F1 | 	add	fp, #8
279ac     A7 FA 61 FC | 	wrlong	result1, fp
279b0     00 FA 4D F2 | 	cmps	result1, #0 wz
279b4     08 4E 85 F1 | 	sub	fp, #8
279b8     18 00 90 5D |  if_ne	jmp	#LR__4064
279bc     10 4E 05 F1 | 	add	fp, #16
279c0     A7 30 02 FB | 	rdlong	local10, fp
279c4     01 30 06 F1 | 	add	local10, #1
279c8     A7 30 62 FC | 	wrlong	local10, fp
279cc     10 4E 85 F1 | 	sub	fp, #16
279d0     7C FF 9F FD | 	jmp	#LR__4063
279d4                 | LR__4064
279d4     10 4E 05 F1 | 	add	fp, #16
279d8     A7 30 02 FB | 	rdlong	local10, fp
279dc     10 4E 85 F1 | 	sub	fp, #16
279e0     64 30 0E F2 | 	cmp	local10, #100 wz
279e4     07 FA 05 A6 |  if_e	mov	result1, #7
279e8     AC 02 90 AD |  if_e	jmp	#LR__4075
279ec     08 4E 05 F1 | 	add	fp, #8
279f0     A7 30 02 FB | 	rdlong	local10, fp
279f4     08 4E 85 F1 | 	sub	fp, #8
279f8     04 30 0E F2 | 	cmp	local10, #4 wz
279fc     08 4E 05 51 |  if_ne	add	fp, #8
27a00     A7 FA 01 5B |  if_ne	rdlong	result1, fp
27a04     08 4E 85 51 |  if_ne	sub	fp, #8
27a08     8C 02 90 5D |  if_ne	jmp	#LR__4075
27a0c     04 4E 05 F1 | 	add	fp, #4
27a10     A7 30 02 FB | 	rdlong	local10, fp
27a14     23 4E 05 F1 | 	add	fp, #35
27a18     A7 1E C2 FA | 	rdbyte	local01, fp
27a1c     27 4E 85 F1 | 	sub	fp, #39
27a20     2B 30 06 F1 | 	add	local10, #43
27a24     18 1F 42 FC | 	wrbyte	local01, local10
27a28                 | LR__4065
27a28     27 4E 05 F1 | 	add	fp, #39
27a2c     A7 20 C2 FA | 	rdbyte	local02, fp
27a30     27 4E 85 F1 | 	sub	fp, #39
27a34     02 20 CE F7 | 	test	local02, #2 wz
27a38     20 00 90 AD |  if_e	jmp	#LR__4066
27a3c     14 4E 05 F1 | 	add	fp, #20
27a40     A7 30 02 FB | 	rdlong	local10, fp
27a44     0C 30 06 F1 | 	add	local10, #12
27a48     0D 30 16 FD | 	qdiv	local10, #13
27a4c     14 4E 85 F1 | 	sub	fp, #20
27a50     18 30 62 FD | 	getqx	local10
27a54     01 30 06 F1 | 	add	local10, #1
27a58     04 00 90 FD | 	jmp	#LR__4067
27a5c                 | LR__4066
27a5c     01 30 06 F6 | 	mov	local10, #1
27a60                 | LR__4067
27a60     18 4E 05 F1 | 	add	fp, #24
27a64     A7 30 62 FC | 	wrlong	local10, fp
27a68     14 4E 85 F1 | 	sub	fp, #20
27a6c     A7 12 02 FB | 	rdlong	arg01, fp
27a70     18 15 02 F6 | 	mov	arg02, local10
27a74     04 4E 85 F1 | 	sub	fp, #4
27a78     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
27a7c     08 4E 05 F1 | 	add	fp, #8
27a80     A7 FA 61 FC | 	wrlong	result1, fp
27a84     08 4E 85 F1 | 	sub	fp, #8
27a88     00 FA 0D F2 | 	cmp	result1, #0 wz
27a8c     38 01 90 5D |  if_ne	jmp	#LR__4072
27a90     18 4E 05 F1 | 	add	fp, #24
27a94     A7 30 02 FB | 	rdlong	local10, fp
27a98     01 30 8E F1 | 	sub	local10, #1 wz
27a9c     A7 30 62 FC | 	wrlong	local10, fp
27aa0     18 4E 85 F1 | 	sub	fp, #24
27aa4     20 01 90 AD |  if_e	jmp	#LR__4072
27aa8     04 4E 05 F1 | 	add	fp, #4
27aac     A7 30 02 FB | 	rdlong	local10, fp
27ab0     18 13 02 F6 | 	mov	arg01, local10
27ab4     14 4E 05 F1 | 	add	fp, #20
27ab8     A7 18 02 FB | 	rdlong	arg04, fp
27abc     18 4E 85 F1 | 	sub	fp, #24
27ac0     05 18 66 F0 | 	shl	arg04, #5
27ac4     10 30 06 F1 | 	add	local10, #16
27ac8     18 15 02 FB | 	rdlong	arg02, local10
27acc     0C 15 82 F1 | 	sub	arg02, arg04
27ad0     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
27ad4     08 4E 05 F1 | 	add	fp, #8
27ad8     A7 FA 61 FC | 	wrlong	result1, fp
27adc     08 4E 85 F1 | 	sub	fp, #8
27ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
27ae4     E0 00 90 5D |  if_ne	jmp	#LR__4071
27ae8     04 4E 05 F1 | 	add	fp, #4
27aec     A7 12 02 FB | 	rdlong	arg01, fp
27af0     04 4E 85 F1 | 	sub	fp, #4
27af4     20 12 06 F1 | 	add	arg01, #32
27af8     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
27afc     FD 30 02 F6 | 	mov	local10, result1
27b00     28 4E 05 F1 | 	add	fp, #40
27b04     A7 30 42 FC | 	wrbyte	local10, fp
27b08     28 4E 85 F1 | 	sub	fp, #40
27b0c                 | ' 			sum = sum_sfn(dp->fn);
27b0c                 | ' 			do {
27b0c                 | LR__4068
27b0c     0C 4E 05 F1 | 	add	fp, #12
27b10     A7 12 02 FB | 	rdlong	arg01, fp
27b14     08 4E 85 F1 | 	sub	fp, #8
27b18     A7 1E 02 FB | 	rdlong	local01, fp
27b1c     04 4E 85 F1 | 	sub	fp, #4
27b20     18 1E 06 F1 | 	add	local01, #24
27b24     0F 15 02 FB | 	rdlong	arg02, local01
27b28     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
27b2c     08 4E 05 F1 | 	add	fp, #8
27b30     A7 FA 61 FC | 	wrlong	result1, fp
27b34     00 FA 4D F2 | 	cmps	result1, #0 wz
27b38     08 4E 85 F1 | 	sub	fp, #8
27b3c     88 00 90 5D |  if_ne	jmp	#LR__4070
27b40     0C 4E 05 F1 | 	add	fp, #12
27b44     A7 20 02 FB | 	rdlong	local02, fp
27b48     0C 20 06 F1 | 	add	local02, #12
27b4c     10 13 02 FB | 	rdlong	arg01, local02
27b50     08 4E 85 F1 | 	sub	fp, #8
27b54     A7 1E 02 FB | 	rdlong	local01, fp
27b58     1C 1E 06 F1 | 	add	local01, #28
27b5c     0F 15 02 FB | 	rdlong	arg02, local01
27b60     14 4E 05 F1 | 	add	fp, #20
27b64     A7 16 02 FB | 	rdlong	arg03, fp
27b68     10 4E 05 F1 | 	add	fp, #16
27b6c     A7 18 C2 FA | 	rdbyte	arg04, fp
27b70     28 4E 85 F1 | 	sub	fp, #40
27b74     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
27b78     0C 4E 05 F1 | 	add	fp, #12
27b7c     A7 30 02 FB | 	rdlong	local10, fp
27b80     03 30 06 F1 | 	add	local10, #3
27b84     18 03 48 FC | 	wrbyte	#1, local10
27b88     08 4E 85 F1 | 	sub	fp, #8
27b8c     A7 12 02 FB | 	rdlong	arg01, fp
27b90     04 4E 85 F1 | 	sub	fp, #4
27b94     00 14 06 F6 | 	mov	arg02, #0
27b98     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
27b9c     08 4E 05 F1 | 	add	fp, #8
27ba0     A7 FA 61 FC | 	wrlong	result1, fp
27ba4     00 FA 4D F2 | 	cmps	result1, #0 wz
27ba8     08 4E 85 F1 | 	sub	fp, #8
27bac     18 00 90 5D |  if_ne	jmp	#LR__4069
27bb0     18 4E 05 F1 | 	add	fp, #24
27bb4     A7 30 02 FB | 	rdlong	local10, fp
27bb8     01 30 8E F1 | 	sub	local10, #1 wz
27bbc     A7 30 62 FC | 	wrlong	local10, fp
27bc0     18 4E 85 F1 | 	sub	fp, #24
27bc4     44 FF 9F 5D |  if_ne	jmp	#LR__4068
27bc8                 | LR__4069
27bc8                 | LR__4070
27bc8                 | LR__4071
27bc8                 | LR__4072
27bc8     08 4E 05 F1 | 	add	fp, #8
27bcc     A7 30 0A FB | 	rdlong	local10, fp wz
27bd0     08 4E 85 F1 | 	sub	fp, #8
27bd4     B4 00 90 5D |  if_ne	jmp	#LR__4074
27bd8     0C 4E 05 F1 | 	add	fp, #12
27bdc     A7 12 02 FB | 	rdlong	arg01, fp
27be0     08 4E 85 F1 | 	sub	fp, #8
27be4     A7 1E 02 FB | 	rdlong	local01, fp
27be8     04 4E 85 F1 | 	sub	fp, #4
27bec     18 1E 06 F1 | 	add	local01, #24
27bf0     0F 15 02 FB | 	rdlong	arg02, local01
27bf4     18 E6 BF FD | 	call	#_fatfs_cc_move_window
27bf8     08 4E 05 F1 | 	add	fp, #8
27bfc     A7 FA 61 FC | 	wrlong	result1, fp
27c00     08 4E 85 F1 | 	sub	fp, #8
27c04     00 FA 0D F2 | 	cmp	result1, #0 wz
27c08     80 00 90 5D |  if_ne	jmp	#LR__4073
27c0c     04 4E 05 F1 | 	add	fp, #4
27c10     A7 20 02 FB | 	rdlong	local02, fp
27c14     04 4E 85 F1 | 	sub	fp, #4
27c18     1C 20 06 F1 | 	add	local02, #28
27c1c     10 13 02 FB | 	rdlong	arg01, local02
27c20     00 14 06 F6 | 	mov	arg02, #0
27c24     20 16 06 F6 | 	mov	arg03, #32
27c28     98 00 A0 FD | 	call	#\builtin_bytefill_
27c2c     04 4E 05 F1 | 	add	fp, #4
27c30     A7 14 02 FB | 	rdlong	arg02, fp
27c34     0A 1F 02 F6 | 	mov	local01, arg02
27c38     1C 1E 06 F1 | 	add	local01, #28
27c3c     0F 13 02 FB | 	rdlong	arg01, local01
27c40     04 4E 85 F1 | 	sub	fp, #4
27c44     20 14 06 F1 | 	add	arg02, #32
27c48     0B 16 06 F6 | 	mov	arg03, #11
27c4c     44 6E BF FD | 	call	#__system____builtin_memmove
27c50     04 4E 05 F1 | 	add	fp, #4
27c54     A7 2E 02 FB | 	rdlong	local09, fp
27c58     17 31 02 F6 | 	mov	local10, local09
27c5c     1C 30 06 F1 | 	add	local10, #28
27c60     18 1F 02 FB | 	rdlong	local01, local10
27c64     2B 2E 06 F1 | 	add	local09, #43
27c68     17 31 C2 FA | 	rdbyte	local10, local09
27c6c     18 30 06 F5 | 	and	local10, #24
27c70     0C 1E 06 F1 | 	add	local01, #12
27c74     0F 31 42 FC | 	wrbyte	local10, local01
27c78     08 4E 05 F1 | 	add	fp, #8
27c7c     A7 30 02 FB | 	rdlong	local10, fp
27c80     0C 4E 85 F1 | 	sub	fp, #12
27c84     03 30 06 F1 | 	add	local10, #3
27c88     18 03 48 FC | 	wrbyte	#1, local10
27c8c                 | LR__4073
27c8c                 | LR__4074
27c8c                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
27c8c                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
27c8c                 | ' 
27c8c                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
27c8c                 | ' 
27c8c                 | ' 			fs->wflag = 1;
27c8c                 | ' 		}
27c8c                 | ' 	}
27c8c                 | ' 
27c8c                 | ' 	return res;
27c8c     08 4E 05 F1 | 	add	fp, #8
27c90     A7 FA 01 FB | 	rdlong	result1, fp
27c94     08 4E 85 F1 | 	sub	fp, #8
27c98                 | LR__4075
27c98     A7 F0 03 F6 | 	mov	ptra, fp
27c9c     B2 00 A0 FD | 	call	#popregs_
27ca0                 | _fatfs_cc_dir_register_ret
27ca0     2D 00 64 FD | 	ret
27ca4                 | 
27ca4                 | _fatfs_cc_dir_remove
27ca4     05 4A 05 F6 | 	mov	COUNT_, #5
27ca8     A8 00 A0 FD | 	call	#pushregs_
27cac     09 1F 02 F6 | 	mov	local01, arg01
27cb0     0F 21 02 FB | 	rdlong	local02, local01
27cb4     10 1E 06 F1 | 	add	local01, #16
27cb8     0F 23 02 FB | 	rdlong	local03, local01
27cbc     1C 1E 06 F1 | 	add	local01, #28
27cc0     0F 15 02 FB | 	rdlong	arg02, local01
27cc4     2C 1E 86 F1 | 	sub	local01, #44
27cc8     FF FF 7F FF 
27ccc     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
27cd0     00 24 06 A6 |  if_e	mov	local04, #0
27cd4     18 00 90 AD |  if_e	jmp	#LR__4080
27cd8     0F 13 02 F6 | 	mov	arg01, local01
27cdc     2C 1E 06 F1 | 	add	local01, #44
27ce0     0F 15 02 FB | 	rdlong	arg02, local01
27ce4     2C 1E 86 F1 | 	sub	local01, #44
27ce8     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
27cec     FD 24 02 F6 | 	mov	local04, result1
27cf0                 | LR__4080
27cf0     12 27 0A F6 | 	mov	local05, local04 wz
27cf4     64 00 90 5D |  if_ne	jmp	#LR__4083
27cf8                 | ' 		do {
27cf8                 | LR__4081
27cf8     18 1E 06 F1 | 	add	local01, #24
27cfc     0F 15 02 FB | 	rdlong	arg02, local01
27d00     18 1E 86 F1 | 	sub	local01, #24
27d04     10 13 02 F6 | 	mov	arg01, local02
27d08     04 E5 BF FD | 	call	#_fatfs_cc_move_window
27d0c     FD 26 0A F6 | 	mov	local05, result1 wz
27d10     40 00 90 5D |  if_ne	jmp	#LR__4082
27d14     1C 1E 06 F1 | 	add	local01, #28
27d18     0F 25 02 FB | 	rdlong	local04, local01
27d1c     12 CB 49 FC | 	wrbyte	#229, local04
27d20     03 20 06 F1 | 	add	local02, #3
27d24     10 03 48 FC | 	wrbyte	#1, local02
27d28     03 20 86 F1 | 	sub	local02, #3
27d2c     0C 1E 86 F1 | 	sub	local01, #12
27d30     0F 25 02 FB | 	rdlong	local04, local01
27d34     10 1E 86 F1 | 	sub	local01, #16
27d38     11 25 12 F2 | 	cmp	local04, local03 wc
27d3c     14 00 90 3D |  if_ae	jmp	#LR__4082
27d40     0F 13 02 F6 | 	mov	arg01, local01
27d44     00 14 06 F6 | 	mov	arg02, #0
27d48     90 EF BF FD | 	call	#_fatfs_cc_dir_next
27d4c     FD 26 0A F6 | 	mov	local05, result1 wz
27d50     A4 FF 9F AD |  if_e	jmp	#LR__4081
27d54                 | LR__4082
27d54     04 26 0E F2 | 	cmp	local05, #4 wz
27d58     02 26 06 A6 |  if_e	mov	local05, #2
27d5c                 | LR__4083
27d5c                 | ' 	}
27d5c                 | ' #line 2590 "ff.c"
27d5c                 | ' 	return res;
27d5c     13 FB 01 F6 | 	mov	result1, local05
27d60     A7 F0 03 F6 | 	mov	ptra, fp
27d64     B2 00 A0 FD | 	call	#popregs_
27d68                 | _fatfs_cc_dir_remove_ret
27d68     2D 00 64 FD | 	ret
27d6c                 | 
27d6c                 | _fatfs_cc_get_fileinfo
27d6c     0F 4A 05 F6 | 	mov	COUNT_, #15
27d70     A8 00 A0 FD | 	call	#pushregs_
27d74     09 1F 02 F6 | 	mov	local01, arg01
27d78     0A 21 02 F6 | 	mov	local02, arg02
27d7c     0F 23 02 FB | 	rdlong	local03, local01
27d80     1C 20 06 F1 | 	add	local02, #28
27d84     10 01 48 FC | 	wrbyte	#0, local02
27d88     1C 20 86 F1 | 	sub	local02, #28
27d8c     18 1E 06 F1 | 	add	local01, #24
27d90     0F 25 0A FB | 	rdlong	local04, local01 wz
27d94     18 1E 86 F1 | 	sub	local01, #24
27d98     90 03 90 AD |  if_e	jmp	#LR__4104
27d9c     2C 1E 06 F1 | 	add	local01, #44
27da0     0F 25 02 FB | 	rdlong	local04, local01
27da4     2C 1E 86 F1 | 	sub	local01, #44
27da8     FF FF 7F FF 
27dac     FF 25 0E F2 | 	cmp	local04, ##-1 wz
27db0     D8 00 90 AD |  if_e	jmp	#LR__4093
27db4     00 26 06 F6 | 	mov	local05, #0
27db8     00 28 06 F6 | 	mov	local06, #0
27dbc     00 2A 06 F6 | 	mov	local07, #0
27dc0                 | ' 			si = di = 0;
27dc0                 | ' 			hs = 0;
27dc0                 | ' 			while (fs->lfnbuf[si] != 0) {
27dc0                 | LR__4090
27dc0     0C 22 06 F1 | 	add	local03, #12
27dc4     11 25 02 FB | 	rdlong	local04, local03
27dc8     0C 22 86 F1 | 	sub	local03, #12
27dcc     14 2D 02 F6 | 	mov	local08, local06
27dd0     01 2C 66 F0 | 	shl	local08, #1
27dd4     12 2D 02 F1 | 	add	local08, local04
27dd8     16 25 EA FA | 	rdword	local04, local08 wz
27ddc     90 00 90 AD |  if_e	jmp	#LR__4092
27de0     0C 22 06 F1 | 	add	local03, #12
27de4     11 2F 02 FB | 	rdlong	local09, local03
27de8     0C 22 86 F1 | 	sub	local03, #12
27dec     14 31 02 F6 | 	mov	local10, local06
27df0     01 30 66 F0 | 	shl	local10, #1
27df4     17 31 02 F1 | 	add	local10, local09
27df8     18 33 E2 FA | 	rdword	local11, local10
27dfc     15 25 02 F6 | 	mov	local04, local07
27e00     0F 24 4E F7 | 	zerox	local04, #15 wz
27e04     01 28 06 F1 | 	add	local06, #1
27e08     24 00 90 5D |  if_ne	jmp	#LR__4091
27e0c     19 35 32 F9 | 	getword	local12, local11, #0
27e10     6C 00 00 FF 
27e14     00 34 16 F2 | 	cmp	local12, ##55296 wc
27e18     14 00 90 CD |  if_b	jmp	#LR__4091
27e1c     19 37 32 F9 | 	getword	local13, local11, #0
27e20     70 00 00 FF 
27e24     00 36 16 F2 | 	cmp	local13, ##57344 wc
27e28     19 2B 02 C6 |  if_b	mov	local07, local11
27e2c                 | ' 					hs = wc; continue;
27e2c     90 FF 9F CD |  if_b	jmp	#LR__4090
27e30                 | LR__4091
27e30     15 13 32 F9 | 	getword	arg01, local07, #0
27e34     10 12 66 F0 | 	shl	arg01, #16
27e38     19 33 32 F9 | 	getword	local11, local11, #0
27e3c     19 13 42 F5 | 	or	arg01, local11
27e40     13 15 02 F6 | 	mov	arg02, local05
27e44     1C 20 06 F1 | 	add	local02, #28
27e48     10 15 02 F1 | 	add	arg02, local02
27e4c     FF 16 06 F6 | 	mov	arg03, #255
27e50     13 17 82 F1 | 	sub	arg03, local05
27e54     1C 20 86 F1 | 	sub	local02, #28
27e58     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
27e5c     FD 38 0A F6 | 	mov	local14, result1 wz
27e60     00 26 06 A6 |  if_e	mov	local05, #0
27e64     1C 27 02 51 |  if_ne	add	local05, local14
27e68     00 2A 06 56 |  if_ne	mov	local07, #0
27e6c     50 FF 9F 5D |  if_ne	jmp	#LR__4090
27e70                 | LR__4092
27e70     15 25 02 F6 | 	mov	local04, local07
27e74     0F 24 4E F7 | 	zerox	local04, #15 wz
27e78     00 26 06 56 |  if_ne	mov	local05, #0
27e7c     1C 20 06 F1 | 	add	local02, #28
27e80     10 27 02 F1 | 	add	local05, local02
27e84     13 01 48 FC | 	wrbyte	#0, local05
27e88     1C 20 86 F1 | 	sub	local02, #28
27e8c                 | LR__4093
27e8c     00 26 06 F6 | 	mov	local05, #0
27e90     00 28 06 F6 | 	mov	local06, #0
27e94                 | ' 			fno->fname[di] = 0;
27e94                 | ' 		}
27e94                 | ' 	}
27e94                 | ' 
27e94                 | ' 	si = di = 0;
27e94                 | ' 	while (si < 11) {
27e94                 | LR__4094
27e94     0B 28 16 F2 | 	cmp	local06, #11 wc
27e98     20 01 90 3D |  if_ae	jmp	#LR__4097
27e9c     1C 1E 06 F1 | 	add	local01, #28
27ea0     0F 2F 02 FB | 	rdlong	local09, local01
27ea4     1C 1E 86 F1 | 	sub	local01, #28
27ea8     14 31 02 F6 | 	mov	local10, local06
27eac     17 31 02 F1 | 	add	local10, local09
27eb0     18 33 C2 FA | 	rdbyte	local11, local10
27eb4     19 25 32 F9 | 	getword	local04, local11, #0
27eb8     20 24 0E F2 | 	cmp	local04, #32 wz
27ebc     01 28 06 F1 | 	add	local06, #1
27ec0     D0 FF 9F AD |  if_e	jmp	#LR__4094
27ec4     19 25 32 F9 | 	getword	local04, local11, #0
27ec8     05 24 0E F2 | 	cmp	local04, #5 wz
27ecc     E5 32 06 A6 |  if_e	mov	local11, #229
27ed0     09 28 0E F2 | 	cmp	local06, #9 wz
27ed4     20 00 90 5D |  if_ne	jmp	#LR__4095
27ed8     0C 26 16 F2 | 	cmp	local05, #12 wc
27edc     18 00 90 3D |  if_ae	jmp	#LR__4095
27ee0     13 37 02 F6 | 	mov	local13, local05
27ee4     0C 20 06 F1 | 	add	local02, #12
27ee8     10 37 02 F1 | 	add	local13, local02
27eec     1B 5D 48 FC | 	wrbyte	#46, local13
27ef0     01 26 06 F1 | 	add	local05, #1
27ef4     0C 20 86 F1 | 	sub	local02, #12
27ef8                 | LR__4095
27ef8     19 13 32 F9 | 	getword	arg01, local11, #0
27efc     07 12 4E F7 | 	zerox	arg01, #7 wz
27f00     00 FA 05 56 |  if_ne	mov	result1, #0
27f04                 | ' 
27f04                 | ' 	return 0;
27f04     00 FA 05 A6 |  if_e	mov	result1, #0
27f08     00 FA 0D F2 | 	cmp	result1, #0 wz
27f0c     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
27f10     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
27f14     50 00 90 AD |  if_e	jmp	#LR__4096
27f18     1C 1E 06 F1 | 	add	local01, #28
27f1c     0F 31 02 FB | 	rdlong	local10, local01
27f20     1C 1E 86 F1 | 	sub	local01, #28
27f24     14 2D 02 F6 | 	mov	local08, local06
27f28     18 2D 02 F1 | 	add	local08, local10
27f2c     16 13 CA FA | 	rdbyte	arg01, local08 wz
27f30     00 FA 05 56 |  if_ne	mov	result1, #0
27f34                 | ' 
27f34                 | ' 	return 0;
27f34     00 FA 05 A6 |  if_e	mov	result1, #0
27f38     00 FA 0D F2 | 	cmp	result1, #0 wz
27f3c     28 00 90 AD |  if_e	jmp	#LR__4096
27f40     19 33 32 F9 | 	getword	local11, local11, #0
27f44     08 32 66 F0 | 	shl	local11, #8
27f48     1C 1E 06 F1 | 	add	local01, #28
27f4c     0F 39 02 FB | 	rdlong	local14, local01
27f50     1C 1E 86 F1 | 	sub	local01, #28
27f54     14 2F 02 F6 | 	mov	local09, local06
27f58     1C 2F 02 F1 | 	add	local09, local14
27f5c     17 35 C2 FA | 	rdbyte	local12, local09
27f60     1A 33 42 F5 | 	or	local11, local12
27f64     01 28 06 F1 | 	add	local06, #1
27f68                 | LR__4096
27f68     19 13 02 F6 | 	mov	arg01, local11
27f6c     01 00 00 FF 
27f70     52 15 06 F6 | 	mov	arg02, ##850
27f74     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
27f78     FD 32 02 F6 | 	mov	local11, result1
27f7c     19 25 02 F6 | 	mov	local04, local11
27f80     0F 24 4E F7 | 	zerox	local04, #15 wz
27f84     00 26 06 A6 |  if_e	mov	local05, #0
27f88     30 00 90 AD |  if_e	jmp	#LR__4097
27f8c     19 13 32 F9 | 	getword	arg01, local11, #0
27f90     13 15 02 F6 | 	mov	arg02, local05
27f94     0C 20 06 F1 | 	add	local02, #12
27f98     10 15 02 F1 | 	add	arg02, local02
27f9c     0C 16 06 F6 | 	mov	arg03, #12
27fa0     13 17 82 F1 | 	sub	arg03, local05
27fa4     0C 20 86 F1 | 	sub	local02, #12
27fa8     EC DF BF FD | 	call	#_fatfs_cc_put_utf
27fac     FD 38 0A F6 | 	mov	local14, result1 wz
27fb0     00 26 06 A6 |  if_e	mov	local05, #0
27fb4     1C 27 02 51 |  if_ne	add	local05, local14
27fb8     D8 FE 9F 5D |  if_ne	jmp	#LR__4094
27fbc                 | LR__4097
27fbc     13 25 02 F6 | 	mov	local04, local05
27fc0     0C 20 06 F1 | 	add	local02, #12
27fc4     10 25 02 F1 | 	add	local04, local02
27fc8     12 01 48 FC | 	wrbyte	#0, local04
27fcc     10 20 06 F1 | 	add	local02, #16
27fd0     10 25 CA FA | 	rdbyte	local04, local02 wz
27fd4     1C 20 86 F1 | 	sub	local02, #28
27fd8     F8 00 90 5D |  if_ne	jmp	#LR__4103
27fdc     00 26 0E F2 | 	cmp	local05, #0 wz
27fe0     1C 00 90 5D |  if_ne	jmp	#LR__4098
27fe4     13 37 02 F6 | 	mov	local13, local05
27fe8     1C 20 06 F1 | 	add	local02, #28
27fec     10 37 02 F1 | 	add	local13, local02
27ff0     1B 7F 48 FC | 	wrbyte	#63, local13
27ff4     01 26 06 F1 | 	add	local05, #1
27ff8     1C 20 86 F1 | 	sub	local02, #28
27ffc     A4 00 90 FD | 	jmp	#LR__4102
28000                 | LR__4098
28000                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
28000     00 26 06 F6 | 	mov	local05, #0
28004     00 28 06 F6 | 	mov	local06, #0
28008     08 3A 06 F6 | 	mov	local15, #8
2800c                 | LR__4099
2800c     14 25 02 F6 | 	mov	local04, local06
28010     0C 20 06 F1 | 	add	local02, #12
28014     10 25 02 F1 | 	add	local04, local02
28018     12 37 CA FA | 	rdbyte	local13, local04 wz
2801c     0C 20 86 F1 | 	sub	local02, #12
28020     80 00 90 AD |  if_e	jmp	#LR__4101
28024     14 2D 02 F6 | 	mov	local08, local06
28028     0C 20 06 F1 | 	add	local02, #12
2802c     10 2D 02 F1 | 	add	local08, local02
28030     16 33 C2 FA | 	rdbyte	local11, local08
28034     19 39 32 F9 | 	getword	local14, local11, #0
28038     2E 38 0E F2 | 	cmp	local14, #46 wz
2803c     0C 20 86 F1 | 	sub	local02, #12
28040     10 3A 06 A6 |  if_e	mov	local15, #16
28044     19 39 32 F9 | 	getword	local14, local11, #0
28048     41 38 16 F2 | 	cmp	local14, #65 wc
2804c     30 00 90 CD |  if_b	jmp	#LR__4100
28050     19 2D 32 F9 | 	getword	local08, local11, #0
28054     5B 2C 16 F2 | 	cmp	local08, #91 wc
28058     24 00 90 3D |  if_ae	jmp	#LR__4100
2805c     1C 1E 06 F1 | 	add	local01, #28
28060     0F 2F 02 FB | 	rdlong	local09, local01
28064     1C 1E 86 F1 | 	sub	local01, #28
28068     0C 2E 06 F1 | 	add	local09, #12
2806c     17 31 C2 FA | 	rdbyte	local10, local09
28070     1D 39 E2 F8 | 	getbyte	local14, local15, #0
28074     1C 31 CA F7 | 	test	local10, local14 wz
28078     19 33 32 59 |  if_ne	getword	local11, local11, #0
2807c     20 32 06 51 |  if_ne	add	local11, #32
28080                 | LR__4100
28080     13 39 02 F6 | 	mov	local14, local05
28084     1C 20 06 F1 | 	add	local02, #28
28088     10 39 02 F1 | 	add	local14, local02
2808c     19 33 32 F9 | 	getword	local11, local11, #0
28090     1C 33 42 FC | 	wrbyte	local11, local14
28094     01 28 06 F1 | 	add	local06, #1
28098     01 26 06 F1 | 	add	local05, #1
2809c     1C 20 86 F1 | 	sub	local02, #28
280a0     68 FF 9F FD | 	jmp	#LR__4099
280a4                 | LR__4101
280a4                 | LR__4102
280a4     1C 20 06 F1 | 	add	local02, #28
280a8     10 27 02 F1 | 	add	local05, local02
280ac     13 01 48 FC | 	wrbyte	#0, local05
280b0     1C 1E 06 F1 | 	add	local01, #28
280b4     0F 25 02 FB | 	rdlong	local04, local01
280b8     1C 1E 86 F1 | 	sub	local01, #28
280bc     0C 24 06 F1 | 	add	local04, #12
280c0     12 37 CA FA | 	rdbyte	local13, local04 wz
280c4     1C 20 86 F1 | 	sub	local02, #28
280c8     0C 20 06 A1 |  if_e	add	local02, #12
280cc     10 01 48 AC |  if_e	wrbyte	#0, local02
280d0     0C 20 86 A1 |  if_e	sub	local02, #12
280d4                 | LR__4103
280d4     1C 1E 06 F1 | 	add	local01, #28
280d8     0F 35 02 FB | 	rdlong	local12, local01
280dc     0B 34 06 F1 | 	add	local12, #11
280e0     1A 25 C2 FA | 	rdbyte	local04, local12
280e4     3F 24 06 F5 | 	and	local04, #63
280e8     08 20 06 F1 | 	add	local02, #8
280ec     10 25 42 FC | 	wrbyte	local04, local02
280f0     08 20 86 F1 | 	sub	local02, #8
280f4     0F 13 02 FB | 	rdlong	arg01, local01
280f8     1C 12 06 F1 | 	add	arg01, #28
280fc                 | ' {
280fc                 | ' 
280fc                 | ' 	return *((DWORD*)ptr);
280fc     09 FB 01 FB | 	rdlong	result1, arg01
28100     10 FB 61 FC | 	wrlong	result1, local02
28104     0F 13 02 FB | 	rdlong	arg01, local01
28108     16 12 06 F1 | 	add	arg01, #22
2810c                 | ' {
2810c                 | ' 
2810c                 | ' 	return *((WORD*)ptr);
2810c     09 FB E1 FA | 	rdword	result1, arg01
28110     06 20 06 F1 | 	add	local02, #6
28114     10 FB 51 FC | 	wrword	result1, local02
28118     0F 13 02 FB | 	rdlong	arg01, local01
2811c     18 12 06 F1 | 	add	arg01, #24
28120                 | ' {
28120                 | ' 
28120                 | ' 	return *((WORD*)ptr);
28120     09 FB E1 FA | 	rdword	result1, arg01
28124     02 20 86 F1 | 	sub	local02, #2
28128     10 FB 51 FC | 	wrword	result1, local02
2812c                 | LR__4104
2812c     A7 F0 03 F6 | 	mov	ptra, fp
28130     B2 00 A0 FD | 	call	#popregs_
28134                 | _fatfs_cc_get_fileinfo_ret
28134     2D 00 64 FD | 	ret
28138                 | 
28138                 | _fatfs_cc_create_name
28138     0D 4A 05 F6 | 	mov	COUNT_, #13
2813c     A8 00 A0 FD | 	call	#pushregs_
28140     34 F0 07 F1 | 	add	ptra, #52
28144     04 4E 05 F1 | 	add	fp, #4
28148     A7 12 62 FC | 	wrlong	arg01, fp
2814c     04 4E 05 F1 | 	add	fp, #4
28150     A7 14 62 FC | 	wrlong	arg02, fp
28154     0A FB 01 FB | 	rdlong	result1, arg02
28158     28 4E 05 F1 | 	add	fp, #40
2815c     A7 FA 61 FC | 	wrlong	result1, fp
28160     2C 4E 85 F1 | 	sub	fp, #44
28164     A7 FA 01 FB | 	rdlong	result1, fp
28168     FD 1E 02 FB | 	rdlong	local01, result1
2816c     0C 1E 06 F1 | 	add	local01, #12
28170     0F 21 02 FB | 	rdlong	local02, local01
28174     14 4E 05 F1 | 	add	fp, #20
28178     A7 20 62 FC | 	wrlong	local02, fp
2817c     14 4E 05 F1 | 	add	fp, #20
28180     A7 00 68 FC | 	wrlong	#0, fp
28184     2C 4E 85 F1 | 	sub	fp, #44
28188                 | ' 
28188                 | ' 
28188                 | ' 
28188                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
28188                 | ' 	for (;;) {
28188                 | LR__4110
28188     30 4E 05 F1 | 	add	fp, #48
2818c     A7 12 02 F6 | 	mov	arg01, fp
28190     30 4E 85 F1 | 	sub	fp, #48
28194     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
28198     1C 4E 05 F1 | 	add	fp, #28
2819c     A7 FA 61 FC | 	wrlong	result1, fp
281a0     1C 4E 85 F1 | 	sub	fp, #28
281a4     FF FF 7F FF 
281a8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
281ac     06 FA 05 A6 |  if_e	mov	result1, #6
281b0     74 08 90 AD |  if_e	jmp	#LR__4150
281b4     1C 4E 05 F1 | 	add	fp, #28
281b8     A7 1E 02 FB | 	rdlong	local01, fp
281bc     1C 4E 85 F1 | 	sub	fp, #28
281c0     80 00 00 FF 
281c4     00 1E 16 F2 | 	cmp	local01, ##65536 wc
281c8     3C 00 90 CD |  if_b	jmp	#LR__4111
281cc     18 4E 05 F1 | 	add	fp, #24
281d0     A7 22 02 FB | 	rdlong	local03, fp
281d4     14 4E 05 F1 | 	add	fp, #20
281d8     A7 1E 02 FB | 	rdlong	local01, fp
281dc     0F 25 02 F6 | 	mov	local04, local01
281e0     01 24 06 F1 | 	add	local04, #1
281e4     A7 24 62 FC | 	wrlong	local04, fp
281e8     01 1E 66 F0 | 	shl	local01, #1
281ec     11 1F 02 F1 | 	add	local01, local03
281f0     10 4E 85 F1 | 	sub	fp, #16
281f4     A7 26 02 FB | 	rdlong	local05, fp
281f8     1C 4E 85 F1 | 	sub	fp, #28
281fc     13 29 02 F6 | 	mov	local06, local05
28200     10 28 46 F0 | 	shr	local06, #16
28204     0F 29 52 FC | 	wrword	local06, local01
28208                 | LR__4111
28208     1C 4E 05 F1 | 	add	fp, #28
2820c     A7 1E 02 FB | 	rdlong	local01, fp
28210     08 4E 85 F1 | 	sub	fp, #8
28214     A7 1E 52 FC | 	wrword	local01, fp
28218     A7 1E E2 FA | 	rdword	local01, fp
2821c     14 4E 85 F1 | 	sub	fp, #20
28220     20 1E 16 F2 | 	cmp	local01, #32 wc
28224     B0 00 90 CD |  if_b	jmp	#LR__4113
28228     14 4E 05 F1 | 	add	fp, #20
2822c     A7 1E E2 FA | 	rdword	local01, fp
28230     14 4E 85 F1 | 	sub	fp, #20
28234     2F 1E 0E F2 | 	cmp	local01, #47 wz
28238     14 4E 05 51 |  if_ne	add	fp, #20
2823c     A7 24 E2 5A |  if_ne	rdword	local04, fp
28240     14 4E 85 51 |  if_ne	sub	fp, #20
28244     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
28248     8C 00 90 AD |  if_e	jmp	#LR__4113
2824c     14 4E 05 F1 | 	add	fp, #20
28250     A7 12 E2 FA | 	rdword	arg01, fp
28254     14 4E 85 F1 | 	sub	fp, #20
28258     80 12 16 F2 | 	cmp	arg01, #128 wc
2825c     24 00 90 3D |  if_ae	jmp	#LR__4112
28260     70 01 00 FF 
28264     9C 13 06 F6 | 	mov	arg01, ##@LR__4772
28268     14 4E 05 F1 | 	add	fp, #20
2826c     A7 14 E2 FA | 	rdword	arg02, fp
28270     14 4E 85 F1 | 	sub	fp, #20
28274     FC D0 BF FD | 	call	#_fatfs_cc_strchr
28278     00 FA 0D F2 | 	cmp	result1, #0 wz
2827c     06 FA 05 56 |  if_ne	mov	result1, #6
28280     A4 07 90 5D |  if_ne	jmp	#LR__4150
28284                 | LR__4112
28284     2C 4E 05 F1 | 	add	fp, #44
28288     A7 28 02 FB | 	rdlong	local06, fp
2828c     2C 4E 85 F1 | 	sub	fp, #44
28290     FF 28 16 F2 | 	cmp	local06, #255 wc
28294     06 FA 05 36 |  if_ae	mov	result1, #6
28298     8C 07 90 3D |  if_ae	jmp	#LR__4150
2829c     18 4E 05 F1 | 	add	fp, #24
282a0     A7 22 02 FB | 	rdlong	local03, fp
282a4     14 4E 05 F1 | 	add	fp, #20
282a8     A7 20 02 FB | 	rdlong	local02, fp
282ac     10 25 02 F6 | 	mov	local04, local02
282b0     01 24 06 F1 | 	add	local04, #1
282b4     A7 24 62 FC | 	wrlong	local04, fp
282b8     10 1F 02 F6 | 	mov	local01, local02
282bc     01 1E 66 F0 | 	shl	local01, #1
282c0     11 1F 02 F1 | 	add	local01, local03
282c4     18 4E 85 F1 | 	sub	fp, #24
282c8     A7 28 E2 FA | 	rdword	local06, fp
282cc     14 4E 85 F1 | 	sub	fp, #20
282d0     0F 29 52 FC | 	wrword	local06, local01
282d4     B0 FE 9F FD | 	jmp	#LR__4110
282d8                 | LR__4113
282d8     14 4E 05 F1 | 	add	fp, #20
282dc     A7 2A E2 FA | 	rdword	local07, fp
282e0     14 4E 85 F1 | 	sub	fp, #20
282e4     20 2A 16 F2 | 	cmp	local07, #32 wc
282e8     10 4E 05 C1 |  if_b	add	fp, #16
282ec     A7 08 48 CC |  if_b	wrbyte	#4, fp
282f0     10 4E 85 C1 |  if_b	sub	fp, #16
282f4     74 00 90 CD |  if_b	jmp	#LR__4118
282f8     97 24 48 FB | 	callpa	#(@LR__4116-@LR__4114)>>2,fcache_load_ptr_
282fc                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
282fc                 | LR__4114
282fc     30 4E 05 F1 | 	add	fp, #48
28300     A7 24 02 FB | 	rdlong	local04, fp
28304     30 4E 85 F1 | 	sub	fp, #48
28308     12 2B C2 FA | 	rdbyte	local07, local04
2830c     2F 2A 0E F2 | 	cmp	local07, #47 wz
28310     18 00 90 AD |  if_e	jmp	#LR__4115
28314     30 4E 05 F1 | 	add	fp, #48
28318     A7 24 02 FB | 	rdlong	local04, fp
2831c     30 4E 85 F1 | 	sub	fp, #48
28320     12 21 C2 FA | 	rdbyte	local02, local04
28324     5C 20 0E F2 | 	cmp	local02, #92 wz
28328     18 00 90 5D |  if_ne	jmp	#LR__4117
2832c                 | LR__4115
2832c     30 4E 05 F1 | 	add	fp, #48
28330     A7 1E 02 FB | 	rdlong	local01, fp
28334     01 1E 06 F1 | 	add	local01, #1
28338     A7 1E 62 FC | 	wrlong	local01, fp
2833c     30 4E 85 F1 | 	sub	fp, #48
28340     B8 FF 9F FD | 	jmp	#LR__4114
28344                 | LR__4116
28344                 | LR__4117
28344     10 4E 05 F1 | 	add	fp, #16
28348     A7 00 48 FC | 	wrbyte	#0, fp
2834c     20 4E 05 F1 | 	add	fp, #32
28350     A7 28 02 FB | 	rdlong	local06, fp
28354     30 4E 85 F1 | 	sub	fp, #48
28358     14 2B C2 FA | 	rdbyte	local07, local06
2835c     20 2A 16 F2 | 	cmp	local07, #32 wc
28360     10 4E 05 C1 |  if_b	add	fp, #16
28364     A7 08 48 CC |  if_b	wrbyte	#4, fp
28368     10 4E 85 C1 |  if_b	sub	fp, #16
2836c                 | LR__4118
2836c     08 4E 05 F1 | 	add	fp, #8
28370     A7 2A 02 FB | 	rdlong	local07, fp
28374     28 4E 05 F1 | 	add	fp, #40
28378     A7 1E 02 FB | 	rdlong	local01, fp
2837c     30 4E 85 F1 | 	sub	fp, #48
28380     15 1F 62 FC | 	wrlong	local01, local07
28384     97 38 48 FB | 	callpa	#(@LR__4120-@LR__4119)>>2,fcache_load_ptr_
28388                 | ' 	}
28388                 | ' 	*path = p;
28388                 | ' #line 2862 "ff.c"
28388                 | ' 	while (di) {
28388                 | LR__4119
28388     2C 4E 05 F1 | 	add	fp, #44
2838c     A7 2A 0A FB | 	rdlong	local07, fp wz
28390     2C 4E 85 F1 | 	sub	fp, #44
28394     60 00 90 AD |  if_e	jmp	#LR__4121
28398     18 4E 05 F1 | 	add	fp, #24
2839c     A7 28 02 FB | 	rdlong	local06, fp
283a0     14 4E 05 F1 | 	add	fp, #20
283a4     A7 24 02 FB | 	rdlong	local04, fp
283a8     01 24 86 F1 | 	sub	local04, #1
283ac     01 24 66 F0 | 	shl	local04, #1
283b0     14 25 02 F1 | 	add	local04, local06
283b4     12 29 E2 FA | 	rdword	local06, local04
283b8     18 4E 85 F1 | 	sub	fp, #24
283bc     A7 28 52 FC | 	wrword	local06, fp
283c0     A7 2A E2 FA | 	rdword	local07, fp
283c4     14 4E 85 F1 | 	sub	fp, #20
283c8     20 2A 0E F2 | 	cmp	local07, #32 wz
283cc     14 4E 05 51 |  if_ne	add	fp, #20
283d0     A7 1E E2 5A |  if_ne	rdword	local01, fp
283d4     14 4E 85 51 |  if_ne	sub	fp, #20
283d8     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
283dc     18 00 90 5D |  if_ne	jmp	#LR__4121
283e0     2C 4E 05 F1 | 	add	fp, #44
283e4     A7 1E 02 FB | 	rdlong	local01, fp
283e8     01 1E 86 F1 | 	sub	local01, #1
283ec     A7 1E 62 FC | 	wrlong	local01, fp
283f0     2C 4E 85 F1 | 	sub	fp, #44
283f4     90 FF 9F FD | 	jmp	#LR__4119
283f8                 | LR__4120
283f8                 | LR__4121
283f8     18 4E 05 F1 | 	add	fp, #24
283fc     A7 2C 02 FB | 	rdlong	local08, fp
28400     14 4E 05 F1 | 	add	fp, #20
28404     A7 24 02 FB | 	rdlong	local04, fp
28408     01 24 66 F0 | 	shl	local04, #1
2840c     16 25 02 F1 | 	add	local04, local08
28410     12 01 58 FC | 	wrword	#0, local04
28414     A7 2A 0A FB | 	rdlong	local07, fp wz
28418     2C 4E 85 F1 | 	sub	fp, #44
2841c     06 FA 05 A6 |  if_e	mov	result1, #6
28420     04 06 90 AD |  if_e	jmp	#LR__4150
28424                 | ' 
28424                 | ' 
28424                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
28424     28 4E 05 F1 | 	add	fp, #40
28428     A7 00 68 FC | 	wrlong	#0, fp
2842c     28 4E 85 F1 | 	sub	fp, #40
28430     97 22 48 FB | 	callpa	#(@LR__4123-@LR__4122)>>2,fcache_load_ptr_
28434                 | LR__4122
28434     18 4E 05 F1 | 	add	fp, #24
28438     A7 2E 02 FB | 	rdlong	local09, fp
2843c     10 4E 05 F1 | 	add	fp, #16
28440     A7 30 02 FB | 	rdlong	local10, fp
28444     28 4E 85 F1 | 	sub	fp, #40
28448     01 30 66 F0 | 	shl	local10, #1
2844c     17 31 02 F1 | 	add	local10, local09
28450     18 33 E2 FA | 	rdword	local11, local10
28454     20 32 0E F2 | 	cmp	local11, #32 wz
28458     1C 00 90 5D |  if_ne	jmp	#LR__4124
2845c     28 4E 05 F1 | 	add	fp, #40
28460     A7 34 02 FB | 	rdlong	local12, fp
28464     1A 27 02 F6 | 	mov	local05, local12
28468     01 26 06 F1 | 	add	local05, #1
2846c     A7 26 62 FC | 	wrlong	local05, fp
28470     28 4E 85 F1 | 	sub	fp, #40
28474     BC FF 9F FD | 	jmp	#LR__4122
28478                 | LR__4123
28478                 | LR__4124
28478     28 4E 05 F1 | 	add	fp, #40
2847c     A7 2A 02 FB | 	rdlong	local07, fp
28480     28 4E 85 F1 | 	sub	fp, #40
28484     01 2A 16 F2 | 	cmp	local07, #1 wc
28488     28 00 90 3D |  if_ae	jmp	#LR__4125
2848c     18 4E 05 F1 | 	add	fp, #24
28490     A7 22 02 FB | 	rdlong	local03, fp
28494     10 4E 05 F1 | 	add	fp, #16
28498     A7 2E 02 FB | 	rdlong	local09, fp
2849c     28 4E 85 F1 | 	sub	fp, #40
284a0     01 2E 66 F0 | 	shl	local09, #1
284a4     11 2F 02 F1 | 	add	local09, local03
284a8     17 1F E2 FA | 	rdword	local01, local09
284ac     2E 1E 0E F2 | 	cmp	local01, #46 wz
284b0     14 00 90 5D |  if_ne	jmp	#LR__4126
284b4                 | LR__4125
284b4     10 4E 05 F1 | 	add	fp, #16
284b8     A7 2A C2 FA | 	rdbyte	local07, fp
284bc     03 2A 46 F5 | 	or	local07, #3
284c0     A7 2A 42 FC | 	wrbyte	local07, fp
284c4     10 4E 85 F1 | 	sub	fp, #16
284c8                 | LR__4126
284c8     97 2C 48 FB | 	callpa	#(@LR__4128-@LR__4127)>>2,fcache_load_ptr_
284cc                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
284cc                 | LR__4127
284cc     2C 4E 05 F1 | 	add	fp, #44
284d0     A7 2A 02 FB | 	rdlong	local07, fp
284d4     2C 4E 85 F1 | 	sub	fp, #44
284d8     01 2A 16 F2 | 	cmp	local07, #1 wc
284dc     44 00 90 CD |  if_b	jmp	#LR__4129
284e0     18 4E 05 F1 | 	add	fp, #24
284e4     A7 28 02 FB | 	rdlong	local06, fp
284e8     14 4E 05 F1 | 	add	fp, #20
284ec     A7 22 02 FB | 	rdlong	local03, fp
284f0     2C 4E 85 F1 | 	sub	fp, #44
284f4     01 22 86 F1 | 	sub	local03, #1
284f8     01 22 66 F0 | 	shl	local03, #1
284fc     14 23 02 F1 | 	add	local03, local06
28500     11 1F E2 FA | 	rdword	local01, local03
28504     2E 1E 0E F2 | 	cmp	local01, #46 wz
28508     18 00 90 AD |  if_e	jmp	#LR__4129
2850c     2C 4E 05 F1 | 	add	fp, #44
28510     A7 1E 02 FB | 	rdlong	local01, fp
28514     01 1E 86 F1 | 	sub	local01, #1
28518     A7 1E 62 FC | 	wrlong	local01, fp
2851c     2C 4E 85 F1 | 	sub	fp, #44
28520     A8 FF 9F FD | 	jmp	#LR__4127
28524                 | LR__4128
28524                 | LR__4129
28524     04 4E 05 F1 | 	add	fp, #4
28528     A7 12 02 FB | 	rdlong	arg01, fp
2852c     04 4E 85 F1 | 	sub	fp, #4
28530     20 12 06 F1 | 	add	arg01, #32
28534     20 14 06 F6 | 	mov	arg02, #32
28538     0B 16 06 F6 | 	mov	arg03, #11
2853c     09 37 02 F6 | 	mov	local13, arg01
28540     98 00 A0 FD | 	call	#\builtin_bytefill_
28544     1B FB 01 F6 | 	mov	result1, local13
28548     0C 4E 05 F1 | 	add	fp, #12
2854c     A7 00 48 FC | 	wrbyte	#0, fp
28550     A7 2A C2 FA | 	rdbyte	local07, fp
28554     14 4E 05 F1 | 	add	fp, #20
28558     A7 2A 62 FC | 	wrlong	local07, fp
2855c     04 4E 05 F1 | 	add	fp, #4
28560     A7 10 68 FC | 	wrlong	#8, fp
28564     24 4E 85 F1 | 	sub	fp, #36
28568                 | ' 
28568                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
28568                 | ' 	i = b = 0; ni = 8;
28568                 | ' 	for (;;) {
28568                 | LR__4130
28568     18 4E 05 F1 | 	add	fp, #24
2856c     A7 22 02 FB | 	rdlong	local03, fp
28570     10 4E 05 F1 | 	add	fp, #16
28574     A7 2E 02 FB | 	rdlong	local09, fp
28578     17 25 02 F6 | 	mov	local04, local09
2857c     01 24 06 F1 | 	add	local04, #1
28580     A7 24 62 FC | 	wrlong	local04, fp
28584     01 2E 66 F0 | 	shl	local09, #1
28588     11 2F 02 F1 | 	add	local09, local03
2858c     17 29 E2 FA | 	rdword	local06, local09
28590     14 4E 85 F1 | 	sub	fp, #20
28594     A7 28 52 FC | 	wrword	local06, fp
28598     A7 2A EA FA | 	rdword	local07, fp wz
2859c     14 4E 85 F1 | 	sub	fp, #20
285a0     74 03 90 AD |  if_e	jmp	#LR__4146
285a4     14 4E 05 F1 | 	add	fp, #20
285a8     A7 2A E2 FA | 	rdword	local07, fp
285ac     14 4E 85 F1 | 	sub	fp, #20
285b0     20 2A 0E F2 | 	cmp	local07, #32 wz
285b4     30 00 90 AD |  if_e	jmp	#LR__4131
285b8     14 4E 05 F1 | 	add	fp, #20
285bc     A7 1E E2 FA | 	rdword	local01, fp
285c0     14 4E 85 F1 | 	sub	fp, #20
285c4     2E 1E 0E F2 | 	cmp	local01, #46 wz
285c8     34 00 90 5D |  if_ne	jmp	#LR__4132
285cc     28 4E 05 F1 | 	add	fp, #40
285d0     A7 24 02 FB | 	rdlong	local04, fp
285d4     04 4E 05 F1 | 	add	fp, #4
285d8     A7 30 02 FB | 	rdlong	local10, fp
285dc     2C 4E 85 F1 | 	sub	fp, #44
285e0     18 25 0A F2 | 	cmp	local04, local10 wz
285e4     18 00 90 AD |  if_e	jmp	#LR__4132
285e8                 | LR__4131
285e8     10 4E 05 F1 | 	add	fp, #16
285ec     A7 2A C2 FA | 	rdbyte	local07, fp
285f0     03 2A 46 F5 | 	or	local07, #3
285f4     A7 2A 42 FC | 	wrbyte	local07, fp
285f8     10 4E 85 F1 | 	sub	fp, #16
285fc                 | ' 			cf |=  0x01  |  0x02 ;
285fc                 | ' 			continue;
285fc     68 FF 9F FD | 	jmp	#LR__4130
28600                 | LR__4132
28600     20 4E 05 F1 | 	add	fp, #32
28604     A7 2A 02 FB | 	rdlong	local07, fp
28608     04 4E 05 F1 | 	add	fp, #4
2860c     A7 1E 02 FB | 	rdlong	local01, fp
28610     24 4E 85 F1 | 	sub	fp, #36
28614     0F 2B 12 F2 | 	cmp	local07, local01 wc
28618     1C 00 90 3D |  if_ae	jmp	#LR__4133
2861c     28 4E 05 F1 | 	add	fp, #40
28620     A7 2C 02 FB | 	rdlong	local08, fp
28624     04 4E 05 F1 | 	add	fp, #4
28628     A7 30 02 FB | 	rdlong	local10, fp
2862c     2C 4E 85 F1 | 	sub	fp, #44
28630     18 2D 0A F2 | 	cmp	local08, local10 wz
28634     B0 00 90 5D |  if_ne	jmp	#LR__4135
28638                 | LR__4133
28638     24 4E 05 F1 | 	add	fp, #36
2863c     A7 2A 02 FB | 	rdlong	local07, fp
28640     24 4E 85 F1 | 	sub	fp, #36
28644     0B 2A 0E F2 | 	cmp	local07, #11 wz
28648     18 00 90 5D |  if_ne	jmp	#LR__4134
2864c     10 4E 05 F1 | 	add	fp, #16
28650     A7 2A C2 FA | 	rdbyte	local07, fp
28654     03 2A 46 F5 | 	or	local07, #3
28658     A7 2A 42 FC | 	wrbyte	local07, fp
2865c     10 4E 85 F1 | 	sub	fp, #16
28660                 | ' 				cf |=  0x01  |  0x02 ;
28660                 | ' 				break;
28660     B4 02 90 FD | 	jmp	#LR__4146
28664                 | LR__4134
28664     28 4E 05 F1 | 	add	fp, #40
28668     A7 2A 02 FB | 	rdlong	local07, fp
2866c     04 4E 05 F1 | 	add	fp, #4
28670     A7 1E 02 FB | 	rdlong	local01, fp
28674     2C 4E 85 F1 | 	sub	fp, #44
28678     0F 2B 0A F2 | 	cmp	local07, local01 wz
2867c     10 4E 05 51 |  if_ne	add	fp, #16
28680     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
28684     03 2A 46 55 |  if_ne	or	local07, #3
28688     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2868c     10 4E 85 51 |  if_ne	sub	fp, #16
28690     28 4E 05 F1 | 	add	fp, #40
28694     A7 2A 02 FB | 	rdlong	local07, fp
28698     04 4E 05 F1 | 	add	fp, #4
2869c     A7 20 02 FB | 	rdlong	local02, fp
286a0     2C 4E 85 F1 | 	sub	fp, #44
286a4     10 2B 1A F2 | 	cmp	local07, local02 wcz
286a8     6C 02 90 1D |  if_a	jmp	#LR__4146
286ac     2C 4E 05 F1 | 	add	fp, #44
286b0     A7 2A 02 FB | 	rdlong	local07, fp
286b4     04 4E 85 F1 | 	sub	fp, #4
286b8     A7 2A 62 FC | 	wrlong	local07, fp
286bc     08 4E 85 F1 | 	sub	fp, #8
286c0     A7 10 68 FC | 	wrlong	#8, fp
286c4     04 4E 05 F1 | 	add	fp, #4
286c8     A7 16 68 FC | 	wrlong	#11, fp
286cc     18 4E 85 F1 | 	sub	fp, #24
286d0     A7 32 C2 FA | 	rdbyte	local11, fp
286d4     19 2B E2 F8 | 	getbyte	local07, local11, #0
286d8     02 2A 66 F0 | 	shl	local07, #2
286dc     A7 2A 42 FC | 	wrbyte	local07, fp
286e0     0C 4E 85 F1 | 	sub	fp, #12
286e4                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
286e4                 | ' 			continue;
286e4     80 FE 9F FD | 	jmp	#LR__4130
286e8                 | LR__4135
286e8     14 4E 05 F1 | 	add	fp, #20
286ec     A7 2A E2 FA | 	rdword	local07, fp
286f0     14 4E 85 F1 | 	sub	fp, #20
286f4     80 2A 16 F2 | 	cmp	local07, #128 wc
286f8     6C 00 90 CD |  if_b	jmp	#LR__4137
286fc     10 4E 05 F1 | 	add	fp, #16
28700     A7 2A C2 FA | 	rdbyte	local07, fp
28704     02 2A 46 F5 | 	or	local07, #2
28708     A7 2A 42 FC | 	wrbyte	local07, fp
2870c     04 4E 05 F1 | 	add	fp, #4
28710     A7 12 E2 FA | 	rdword	arg01, fp
28714     14 4E 85 F1 | 	sub	fp, #20
28718     01 00 00 FF 
2871c     52 15 06 F6 | 	mov	arg02, ##850
28720     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
28724     14 4E 05 F1 | 	add	fp, #20
28728     A7 FA 51 FC | 	wrword	result1, fp
2872c     A7 2A E2 FA | 	rdword	local07, fp
28730     14 4E 85 F1 | 	sub	fp, #20
28734     80 2A CE F7 | 	test	local07, #128 wz
28738     2C 00 90 AD |  if_e	jmp	#LR__4136
2873c     14 4E 05 F1 | 	add	fp, #20
28740     A7 20 E2 FA | 	rdword	local02, fp
28744     7F 20 06 F5 | 	and	local02, #127
28748     01 00 00 FF 
2874c     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
28750     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
28754     10 2B C2 FA | 	rdbyte	local07, local02
28758     A7 2A 52 FC | 	wrword	local07, fp
2875c     14 4E 85 F1 | 	sub	fp, #20
28760     01 00 00 FF 
28764     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
28768                 | LR__4136
28768                 | LR__4137
28768     14 4E 05 F1 | 	add	fp, #20
2876c     A7 2A E2 FA | 	rdword	local07, fp
28770     14 4E 85 F1 | 	sub	fp, #20
28774     00 2B 16 F2 | 	cmp	local07, #256 wc
28778     88 00 90 CD |  if_b	jmp	#LR__4139
2877c     24 4E 05 F1 | 	add	fp, #36
28780     A7 2A 02 FB | 	rdlong	local07, fp
28784     01 2A 86 F1 | 	sub	local07, #1
28788     04 4E 85 F1 | 	sub	fp, #4
2878c     A7 20 02 FB | 	rdlong	local02, fp
28790     20 4E 85 F1 | 	sub	fp, #32
28794     15 21 12 F2 | 	cmp	local02, local07 wc
28798     2C 00 90 CD |  if_b	jmp	#LR__4138
2879c     10 4E 05 F1 | 	add	fp, #16
287a0     A7 32 C2 FA | 	rdbyte	local11, fp
287a4     19 2B E2 F8 | 	getbyte	local07, local11, #0
287a8     03 2A 46 F5 | 	or	local07, #3
287ac     A7 2A 42 FC | 	wrbyte	local07, fp
287b0     14 4E 05 F1 | 	add	fp, #20
287b4     A7 2A 02 FB | 	rdlong	local07, fp
287b8     04 4E 85 F1 | 	sub	fp, #4
287bc     A7 2A 62 FC | 	wrlong	local07, fp
287c0     20 4E 85 F1 | 	sub	fp, #32
287c4                 | ' 				cf |=  0x01  |  0x02 ;
287c4                 | ' 				i = ni; continue;
287c4     A0 FD 9F FD | 	jmp	#LR__4130
287c8                 | LR__4138
287c8     04 4E 05 F1 | 	add	fp, #4
287cc     A7 2E 02 FB | 	rdlong	local09, fp
287d0     1C 4E 05 F1 | 	add	fp, #28
287d4     A7 30 02 FB | 	rdlong	local10, fp
287d8     18 25 02 F6 | 	mov	local04, local10
287dc     01 24 06 F1 | 	add	local04, #1
287e0     A7 24 62 FC | 	wrlong	local04, fp
287e4     20 2E 06 F1 | 	add	local09, #32
287e8     17 31 02 F1 | 	add	local10, local09
287ec     0C 4E 85 F1 | 	sub	fp, #12
287f0     A7 22 E2 FA | 	rdword	local03, fp
287f4     14 4E 85 F1 | 	sub	fp, #20
287f8     08 22 46 F0 | 	shr	local03, #8
287fc     18 23 42 FC | 	wrbyte	local03, local10
28800     D4 00 90 FD | 	jmp	#LR__4145
28804                 | LR__4139
28804     14 4E 05 F1 | 	add	fp, #20
28808     A7 2A EA FA | 	rdword	local07, fp wz
2880c     14 4E 85 F1 | 	sub	fp, #20
28810     20 00 90 AD |  if_e	jmp	#LR__4140
28814     70 01 00 FF 
28818     A5 13 06 F6 | 	mov	arg01, ##@LR__4773
2881c     14 4E 05 F1 | 	add	fp, #20
28820     A7 14 E2 FA | 	rdword	arg02, fp
28824     14 4E 85 F1 | 	sub	fp, #20
28828     48 CB BF FD | 	call	#_fatfs_cc_strchr
2882c     00 FA 0D F2 | 	cmp	result1, #0 wz
28830     20 00 90 AD |  if_e	jmp	#LR__4141
28834                 | LR__4140
28834     14 4E 05 F1 | 	add	fp, #20
28838     A7 BE 58 FC | 	wrword	#95, fp
2883c     04 4E 85 F1 | 	sub	fp, #4
28840     A7 2A C2 FA | 	rdbyte	local07, fp
28844     03 2A 46 F5 | 	or	local07, #3
28848     A7 2A 42 FC | 	wrbyte	local07, fp
2884c     10 4E 85 F1 | 	sub	fp, #16
28850     84 00 90 FD | 	jmp	#LR__4144
28854                 | LR__4141
28854     14 4E 05 F1 | 	add	fp, #20
28858     A7 2A E2 FA | 	rdword	local07, fp
2885c     14 4E 85 F1 | 	sub	fp, #20
28860     41 2A 16 F2 | 	cmp	local07, #65 wc
28864     24 00 90 CD |  if_b	jmp	#LR__4142
28868     14 4E 05 F1 | 	add	fp, #20
2886c     A7 1E E2 FA | 	rdword	local01, fp
28870     14 4E 85 F1 | 	sub	fp, #20
28874     5B 1E 16 F2 | 	cmp	local01, #91 wc
28878     0C 4E 05 C1 |  if_b	add	fp, #12
2887c     A7 2A C2 CA |  if_b	rdbyte	local07, fp
28880     02 2A 46 C5 |  if_b	or	local07, #2
28884     A7 2A 42 CC |  if_b	wrbyte	local07, fp
28888     0C 4E 85 C1 |  if_b	sub	fp, #12
2888c                 | LR__4142
2888c     14 4E 05 F1 | 	add	fp, #20
28890     A7 2A E2 FA | 	rdword	local07, fp
28894     14 4E 85 F1 | 	sub	fp, #20
28898     61 2A 16 F2 | 	cmp	local07, #97 wc
2889c     38 00 90 CD |  if_b	jmp	#LR__4143
288a0     14 4E 05 F1 | 	add	fp, #20
288a4     A7 1E E2 FA | 	rdword	local01, fp
288a8     14 4E 85 F1 | 	sub	fp, #20
288ac     7B 1E 16 F2 | 	cmp	local01, #123 wc
288b0     24 00 90 3D |  if_ae	jmp	#LR__4143
288b4     0C 4E 05 F1 | 	add	fp, #12
288b8     A7 2A C2 FA | 	rdbyte	local07, fp
288bc     01 2A 46 F5 | 	or	local07, #1
288c0     A7 2A 42 FC | 	wrbyte	local07, fp
288c4     08 4E 05 F1 | 	add	fp, #8
288c8     A7 2A E2 FA | 	rdword	local07, fp
288cc     20 2A 86 F1 | 	sub	local07, #32
288d0     A7 2A 52 FC | 	wrword	local07, fp
288d4     14 4E 85 F1 | 	sub	fp, #20
288d8                 | LR__4143
288d8                 | LR__4144
288d8                 | LR__4145
288d8     04 4E 05 F1 | 	add	fp, #4
288dc     A7 32 02 FB | 	rdlong	local11, fp
288e0     19 2F 02 F6 | 	mov	local09, local11
288e4     1C 4E 05 F1 | 	add	fp, #28
288e8     A7 20 02 FB | 	rdlong	local02, fp
288ec     10 25 02 F6 | 	mov	local04, local02
288f0     01 24 06 F1 | 	add	local04, #1
288f4     A7 24 62 FC | 	wrlong	local04, fp
288f8     10 31 02 F6 | 	mov	local10, local02
288fc     20 2E 06 F1 | 	add	local09, #32
28900     17 31 02 F1 | 	add	local10, local09
28904     0C 4E 85 F1 | 	sub	fp, #12
28908     A7 22 E2 FA | 	rdword	local03, fp
2890c     14 4E 85 F1 | 	sub	fp, #20
28910     18 23 42 FC | 	wrbyte	local03, local10
28914     50 FC 9F FD | 	jmp	#LR__4130
28918                 | LR__4146
28918     04 4E 05 F1 | 	add	fp, #4
2891c     A7 32 02 FB | 	rdlong	local11, fp
28920     04 4E 85 F1 | 	sub	fp, #4
28924     20 32 06 F1 | 	add	local11, #32
28928     19 2B C2 FA | 	rdbyte	local07, local11
2892c     E5 2A 0E F2 | 	cmp	local07, #229 wz
28930     04 4E 05 A1 |  if_e	add	fp, #4
28934     A7 2A 02 AB |  if_e	rdlong	local07, fp
28938     04 4E 85 A1 |  if_e	sub	fp, #4
2893c     20 2A 06 A1 |  if_e	add	local07, #32
28940     15 0B 48 AC |  if_e	wrbyte	#5, local07
28944     24 4E 05 F1 | 	add	fp, #36
28948     A7 2A 02 FB | 	rdlong	local07, fp
2894c     24 4E 85 F1 | 	sub	fp, #36
28950     08 2A 0E F2 | 	cmp	local07, #8 wz
28954     0C 4E 05 A1 |  if_e	add	fp, #12
28958     A7 2A C2 AA |  if_e	rdbyte	local07, fp
2895c     02 2A 66 A0 |  if_e	shl	local07, #2
28960     A7 2A 42 AC |  if_e	wrbyte	local07, fp
28964     0C 4E 85 A1 |  if_e	sub	fp, #12
28968     0C 4E 05 F1 | 	add	fp, #12
2896c     A7 2A C2 FA | 	rdbyte	local07, fp
28970     0C 4E 85 F1 | 	sub	fp, #12
28974     0C 2A 06 F5 | 	and	local07, #12
28978     0C 2A 0E F2 | 	cmp	local07, #12 wz
2897c     18 00 90 AD |  if_e	jmp	#LR__4147
28980     0C 4E 05 F1 | 	add	fp, #12
28984     A7 1E C2 FA | 	rdbyte	local01, fp
28988     0C 4E 85 F1 | 	sub	fp, #12
2898c     03 1E 06 F5 | 	and	local01, #3
28990     03 1E 0E F2 | 	cmp	local01, #3 wz
28994     14 00 90 5D |  if_ne	jmp	#LR__4148
28998                 | LR__4147
28998     10 4E 05 F1 | 	add	fp, #16
2899c     A7 2A C2 FA | 	rdbyte	local07, fp
289a0     02 2A 46 F5 | 	or	local07, #2
289a4     A7 2A 42 FC | 	wrbyte	local07, fp
289a8     10 4E 85 F1 | 	sub	fp, #16
289ac                 | LR__4148
289ac     10 4E 05 F1 | 	add	fp, #16
289b0     A7 2A C2 FA | 	rdbyte	local07, fp
289b4     10 4E 85 F1 | 	sub	fp, #16
289b8     02 2A CE F7 | 	test	local07, #2 wz
289bc     48 00 90 5D |  if_ne	jmp	#LR__4149
289c0     0C 4E 05 F1 | 	add	fp, #12
289c4     A7 2A C2 FA | 	rdbyte	local07, fp
289c8     0C 4E 85 F1 | 	sub	fp, #12
289cc     01 2A CE F7 | 	test	local07, #1 wz
289d0     10 4E 05 51 |  if_ne	add	fp, #16
289d4     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
289d8     10 2A 46 55 |  if_ne	or	local07, #16
289dc     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
289e0     10 4E 85 51 |  if_ne	sub	fp, #16
289e4     0C 4E 05 F1 | 	add	fp, #12
289e8     A7 2A C2 FA | 	rdbyte	local07, fp
289ec     0C 4E 85 F1 | 	sub	fp, #12
289f0     04 2A CE F7 | 	test	local07, #4 wz
289f4     10 4E 05 51 |  if_ne	add	fp, #16
289f8     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
289fc     08 2A 46 55 |  if_ne	or	local07, #8
28a00     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
28a04     10 4E 85 51 |  if_ne	sub	fp, #16
28a08                 | LR__4149
28a08     04 4E 05 F1 | 	add	fp, #4
28a0c     A7 2A 02 FB | 	rdlong	local07, fp
28a10     0C 4E 05 F1 | 	add	fp, #12
28a14     A7 1E C2 FA | 	rdbyte	local01, fp
28a18     10 4E 85 F1 | 	sub	fp, #16
28a1c     2B 2A 06 F1 | 	add	local07, #43
28a20     15 1F 42 FC | 	wrbyte	local01, local07
28a24                 | ' 	}
28a24                 | ' 
28a24                 | ' 	dp->fn[ 11 ] = cf;
28a24                 | ' 
28a24                 | ' 	return FR_OK;
28a24     00 FA 05 F6 | 	mov	result1, #0
28a28                 | LR__4150
28a28     A7 F0 03 F6 | 	mov	ptra, fp
28a2c     B2 00 A0 FD | 	call	#popregs_
28a30                 | _fatfs_cc_create_name_ret
28a30     2D 00 64 FD | 	ret
28a34                 | 
28a34                 | _fatfs_cc_follow_path
28a34     02 4A 05 F6 | 	mov	COUNT_, #2
28a38     A8 00 A0 FD | 	call	#pushregs_
28a3c     18 F0 07 F1 | 	add	ptra, #24
28a40     04 4E 05 F1 | 	add	fp, #4
28a44     A7 12 62 FC | 	wrlong	arg01, fp
28a48     04 4E 05 F1 | 	add	fp, #4
28a4c     A7 14 62 FC | 	wrlong	arg02, fp
28a50     04 4E 85 F1 | 	sub	fp, #4
28a54     A7 FA 01 FB | 	rdlong	result1, fp
28a58     FD 1E 02 FB | 	rdlong	local01, result1
28a5c     10 4E 05 F1 | 	add	fp, #16
28a60     A7 1E 62 FC | 	wrlong	local01, fp
28a64     14 4E 85 F1 | 	sub	fp, #20
28a68     97 24 48 FB | 	callpa	#(@LR__4162-@LR__4160)>>2,fcache_load_ptr_
28a6c                 | ' )
28a6c                 | ' {
28a6c                 | ' 	FRESULT res;
28a6c                 | ' 	BYTE ns;
28a6c                 | ' 	FATFS *fs = dp->obj.fs;
28a6c                 | ' #line 3034 "ff.c"
28a6c                 | ' 	{
28a6c                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
28a6c                 | LR__4160
28a6c     08 4E 05 F1 | 	add	fp, #8
28a70     A7 1E 02 FB | 	rdlong	local01, fp
28a74     08 4E 85 F1 | 	sub	fp, #8
28a78     0F 1F C2 FA | 	rdbyte	local01, local01
28a7c     2F 1E 0E F2 | 	cmp	local01, #47 wz
28a80     18 00 90 AD |  if_e	jmp	#LR__4161
28a84     08 4E 05 F1 | 	add	fp, #8
28a88     A7 1E 02 FB | 	rdlong	local01, fp
28a8c     08 4E 85 F1 | 	sub	fp, #8
28a90     0F 1F C2 FA | 	rdbyte	local01, local01
28a94     5C 1E 0E F2 | 	cmp	local01, #92 wz
28a98     18 00 90 5D |  if_ne	jmp	#LR__4163
28a9c                 | LR__4161
28a9c     08 4E 05 F1 | 	add	fp, #8
28aa0     A7 1E 02 FB | 	rdlong	local01, fp
28aa4     01 1E 06 F1 | 	add	local01, #1
28aa8     A7 1E 62 FC | 	wrlong	local01, fp
28aac     08 4E 85 F1 | 	sub	fp, #8
28ab0     B8 FF 9F FD | 	jmp	#LR__4160
28ab4                 | LR__4162
28ab4                 | LR__4163
28ab4     04 4E 05 F1 | 	add	fp, #4
28ab8     A7 1E 02 FB | 	rdlong	local01, fp
28abc     08 1E 06 F1 | 	add	local01, #8
28ac0     0F 01 68 FC | 	wrlong	#0, local01
28ac4     04 4E 05 F1 | 	add	fp, #4
28ac8     A7 1E 02 FB | 	rdlong	local01, fp
28acc     08 4E 85 F1 | 	sub	fp, #8
28ad0     0F 1F C2 FA | 	rdbyte	local01, local01
28ad4     20 1E 16 F2 | 	cmp	local01, #32 wc
28ad8     30 00 90 3D |  if_ae	jmp	#LR__4164
28adc     04 4E 05 F1 | 	add	fp, #4
28ae0     A7 1E 02 FB | 	rdlong	local01, fp
28ae4     2B 1E 06 F1 | 	add	local01, #43
28ae8     0F 01 49 FC | 	wrbyte	#128, local01
28aec     A7 12 02 FB | 	rdlong	arg01, fp
28af0     04 4E 85 F1 | 	sub	fp, #4
28af4     00 14 06 F6 | 	mov	arg02, #0
28af8     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
28afc     0C 4E 05 F1 | 	add	fp, #12
28b00     A7 FA 61 FC | 	wrlong	result1, fp
28b04     0C 4E 85 F1 | 	sub	fp, #12
28b08     1C 01 90 FD | 	jmp	#LR__4168
28b0c                 | LR__4164
28b0c                 | ' 		for (;;) {
28b0c                 | LR__4165
28b0c     04 4E 05 F1 | 	add	fp, #4
28b10     A7 12 02 FB | 	rdlong	arg01, fp
28b14     04 4E 05 F1 | 	add	fp, #4
28b18     A7 14 02 F6 | 	mov	arg02, fp
28b1c     08 4E 85 F1 | 	sub	fp, #8
28b20     14 F6 BF FD | 	call	#_fatfs_cc_create_name
28b24     0C 4E 05 F1 | 	add	fp, #12
28b28     A7 FA 61 FC | 	wrlong	result1, fp
28b2c     00 FA 4D F2 | 	cmps	result1, #0 wz
28b30     0C 4E 85 F1 | 	sub	fp, #12
28b34     F0 00 90 5D |  if_ne	jmp	#LR__4167
28b38     04 4E 05 F1 | 	add	fp, #4
28b3c     A7 12 02 FB | 	rdlong	arg01, fp
28b40     04 4E 85 F1 | 	sub	fp, #4
28b44     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
28b48     0C 4E 05 F1 | 	add	fp, #12
28b4c     A7 FA 61 FC | 	wrlong	result1, fp
28b50     08 4E 85 F1 | 	sub	fp, #8
28b54     A7 1E 02 FB | 	rdlong	local01, fp
28b58     2B 1E 06 F1 | 	add	local01, #43
28b5c     0F 1F C2 FA | 	rdbyte	local01, local01
28b60     0C 4E 05 F1 | 	add	fp, #12
28b64     A7 1E 42 FC | 	wrbyte	local01, fp
28b68     04 4E 85 F1 | 	sub	fp, #4
28b6c     A7 1E 0A FB | 	rdlong	local01, fp wz
28b70     0C 4E 85 F1 | 	sub	fp, #12
28b74     34 00 90 AD |  if_e	jmp	#LR__4166
28b78     0C 4E 05 F1 | 	add	fp, #12
28b7c     A7 1E 02 FB | 	rdlong	local01, fp
28b80     0C 4E 85 F1 | 	sub	fp, #12
28b84     04 1E 0E F2 | 	cmp	local01, #4 wz
28b88     9C 00 90 5D |  if_ne	jmp	#LR__4167
28b8c     10 4E 05 F1 | 	add	fp, #16
28b90     A7 1E C2 FA | 	rdbyte	local01, fp
28b94     10 4E 85 F1 | 	sub	fp, #16
28b98     04 1E CE F7 | 	test	local01, #4 wz
28b9c     0C 4E 05 A1 |  if_e	add	fp, #12
28ba0     A7 0A 68 AC |  if_e	wrlong	#5, fp
28ba4     0C 4E 85 A1 |  if_e	sub	fp, #12
28ba8                 | ' 					}
28ba8                 | ' 				}
28ba8                 | ' 				break;
28ba8     7C 00 90 FD | 	jmp	#LR__4167
28bac                 | LR__4166
28bac     10 4E 05 F1 | 	add	fp, #16
28bb0     A7 1E C2 FA | 	rdbyte	local01, fp
28bb4     10 4E 85 F1 | 	sub	fp, #16
28bb8     04 1E CE F7 | 	test	local01, #4 wz
28bbc     68 00 90 5D |  if_ne	jmp	#LR__4167
28bc0     04 4E 05 F1 | 	add	fp, #4
28bc4     A7 1E 02 FB | 	rdlong	local01, fp
28bc8     04 4E 85 F1 | 	sub	fp, #4
28bcc     06 1E 06 F1 | 	add	local01, #6
28bd0     0F 1F C2 FA | 	rdbyte	local01, local01
28bd4     10 1E CE F7 | 	test	local01, #16 wz
28bd8     0C 4E 05 A1 |  if_e	add	fp, #12
28bdc     A7 0A 68 AC |  if_e	wrlong	#5, fp
28be0     0C 4E 85 A1 |  if_e	sub	fp, #12
28be4                 | ' 				res = FR_NO_PATH; break;
28be4     40 00 90 AD |  if_e	jmp	#LR__4167
28be8     04 4E 05 F1 | 	add	fp, #4
28bec     A7 20 02 FB | 	rdlong	local02, fp
28bf0     10 1F 02 F6 | 	mov	local01, local02
28bf4     10 4E 05 F1 | 	add	fp, #16
28bf8     A7 14 02 FB | 	rdlong	arg02, fp
28bfc     0A 13 02 F6 | 	mov	arg01, arg02
28c00     34 14 06 F1 | 	add	arg02, #52
28c04     14 4E 85 F1 | 	sub	fp, #20
28c08     10 20 06 F1 | 	add	local02, #16
28c0c     10 21 02 FB | 	rdlong	local02, local02
28c10     FF 21 06 F5 | 	and	local02, #511
28c14     10 15 02 F1 | 	add	arg02, local02
28c18     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
28c1c     08 1E 06 F1 | 	add	local01, #8
28c20     0F FB 61 FC | 	wrlong	result1, local01
28c24     E4 FE 9F FD | 	jmp	#LR__4165
28c28                 | LR__4167
28c28                 | LR__4168
28c28                 | ' 			}
28c28                 | ' #line 3090 "ff.c"
28c28                 | ' 			{
28c28                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
28c28                 | ' 			}
28c28                 | ' 		}
28c28                 | ' 	}
28c28                 | ' 
28c28                 | ' 	return res;
28c28     0C 4E 05 F1 | 	add	fp, #12
28c2c     A7 FA 01 FB | 	rdlong	result1, fp
28c30     0C 4E 85 F1 | 	sub	fp, #12
28c34     A7 F0 03 F6 | 	mov	ptra, fp
28c38     B2 00 A0 FD | 	call	#popregs_
28c3c                 | _fatfs_cc_follow_path_ret
28c3c     2D 00 64 FD | 	ret
28c40                 | 
28c40                 | _fatfs_cc_get_ldnumber
28c40     01 00 66 F6 | 	neg	_var01, #1
28c44     09 03 0A FB | 	rdlong	_var02, arg01 wz
28c48     01 05 02 F6 | 	mov	_var03, _var02
28c4c     01 FA 65 A6 |  if_e	neg	result1, #1
28c50     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
28c54     97 10 48 FB | 	callpa	#(@LR__4171-@LR__4170)>>2,fcache_load_ptr_
28c58                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
28c58                 | LR__4170
28c58     02 07 C2 FA | 	rdbyte	_var04, _var03
28c5c     03 FB E1 F8 | 	getbyte	result1, _var04, #0
28c60     20 FA 15 F2 | 	cmp	result1, #32 wc
28c64     01 04 06 F1 | 	add	_var03, #1
28c68     03 09 02 36 |  if_ae	mov	_var05, _var04
28c6c     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
28c70     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
28c74     E0 FF 9F 1D |  if_a	jmp	#LR__4170
28c78                 | LR__4171
28c78     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
28c7c     3A 06 0E F2 | 	cmp	_var04, #58 wz
28c80     40 00 90 5D |  if_ne	jmp	#LR__4173
28c84     01 0A 06 F6 | 	mov	_var06, #1
28c88     01 09 C2 FA | 	rdbyte	_var05, _var02
28c8c     30 08 16 F2 | 	cmp	_var05, #48 wc
28c90     1C 00 90 CD |  if_b	jmp	#LR__4172
28c94     01 09 C2 FA | 	rdbyte	_var05, _var02
28c98     3A 08 16 F2 | 	cmp	_var05, #58 wc
28c9c     01 0D 02 C6 |  if_b	mov	_var07, _var02
28ca0     02 0C 06 C1 |  if_b	add	_var07, #2
28ca4     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
28ca8     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
28cac     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
28cb0                 | LR__4172
28cb0     01 0A 56 F2 | 	cmps	_var06, #1 wc
28cb4     05 01 02 C6 |  if_b	mov	_var01, _var06
28cb8     09 05 62 CC |  if_b	wrlong	_var03, arg01
28cbc                 | ' 			vol = i;
28cbc                 | ' 			*path = tt;
28cbc                 | ' 		}
28cbc                 | ' 		return vol;
28cbc     00 FB 01 F6 | 	mov	result1, _var01
28cc0     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
28cc4                 | LR__4173
28cc4                 | ' 	}
28cc4                 | ' #line 3170 "ff.c"
28cc4                 | ' 	vol = 0;
28cc4                 | ' 
28cc4                 | ' 	return vol;
28cc4     00 FA 05 F6 | 	mov	result1, #0
28cc8                 | _fatfs_cc_get_ldnumber_ret
28cc8     2D 00 64 FD | 	ret
28ccc                 | 
28ccc                 | _fatfs_cc_check_fs
28ccc     04 4A 05 F6 | 	mov	COUNT_, #4
28cd0     A8 00 A0 FD | 	call	#pushregs_
28cd4     09 1F 02 F6 | 	mov	local01, arg01
28cd8     03 1E 06 F1 | 	add	local01, #3
28cdc     0F 01 48 FC | 	wrbyte	#0, local01
28ce0     2D 1E 06 F1 | 	add	local01, #45
28ce4     FF FF FF FF 
28ce8     0F FF 6B FC | 	wrlong	##-1, local01
28cec     30 1E 86 F1 | 	sub	local01, #48
28cf0     0F 13 02 F6 | 	mov	arg01, local01
28cf4     18 D5 BF FD | 	call	#_fatfs_cc_move_window
28cf8     00 FA 0D F2 | 	cmp	result1, #0 wz
28cfc     04 FA 05 56 |  if_ne	mov	result1, #4
28d00     94 01 90 5D |  if_ne	jmp	#LR__4184
28d04     34 1E 06 F1 | 	add	local01, #52
28d08     0F 13 02 F6 | 	mov	arg01, local01
28d0c     FE 13 06 F1 | 	add	arg01, #510
28d10                 | ' {
28d10                 | ' 
28d10                 | ' 	return *((WORD*)ptr);
28d10     09 21 E2 FA | 	rdword	local02, arg01
28d14     0F 23 C2 FA | 	rdbyte	local03, local01
28d18     34 1E 86 F1 | 	sub	local01, #52
28d1c     11 25 E2 F8 | 	getbyte	local04, local03, #0
28d20     EB 24 0E F2 | 	cmp	local04, #235 wz
28d24     11 17 02 56 |  if_ne	mov	arg03, local03
28d28     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
28d2c     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
28d30     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
28d34     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
28d38     44 01 90 5D |  if_ne	jmp	#LR__4183
28d3c     10 25 32 F9 | 	getword	local04, local02, #0
28d40     55 00 00 FF 
28d44     55 24 0E F2 | 	cmp	local04, ##43605 wz
28d48     2C 00 90 5D |  if_ne	jmp	#LR__4180
28d4c     34 1E 06 F1 | 	add	local01, #52
28d50     0F 13 02 F6 | 	mov	arg01, local01
28d54     34 1E 86 F1 | 	sub	local01, #52
28d58     52 12 06 F1 | 	add	arg01, #82
28d5c     70 01 00 FF 
28d60     AC 15 06 F6 | 	mov	arg02, ##@LR__4774
28d64     08 16 06 F6 | 	mov	arg03, #8
28d68     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
28d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
28d70                 | ' 			return 0;
28d70     00 FA 05 A6 |  if_e	mov	result1, #0
28d74     20 01 90 AD |  if_e	jmp	#LR__4184
28d78                 | LR__4180
28d78     34 1E 06 F1 | 	add	local01, #52
28d7c     0F 13 02 F6 | 	mov	arg01, local01
28d80     0B 12 06 F1 | 	add	arg01, #11
28d84                 | ' {
28d84                 | ' 
28d84                 | ' 	return *((WORD*)ptr);
28d84     09 FB E1 FA | 	rdword	result1, arg01
28d88     0D 1E 06 F1 | 	add	local01, #13
28d8c     0F 23 C2 FA | 	rdbyte	local03, local01
28d90     41 1E 86 F1 | 	sub	local01, #65
28d94     FD 24 32 F9 | 	getword	local04, result1, #0
28d98     FD 14 32 F9 | 	getword	arg02, result1, #0
28d9c     01 14 86 F1 | 	sub	arg02, #1
28da0     0A 25 CA F7 | 	test	local04, arg02 wz
28da4     D8 00 90 5D |  if_ne	jmp	#LR__4182
28da8     FD 14 32 F9 | 	getword	arg02, result1, #0
28dac     01 00 00 FF 
28db0     00 14 16 F2 | 	cmp	arg02, ##512 wc
28db4     C8 00 90 CD |  if_b	jmp	#LR__4182
28db8     FD 14 32 F9 | 	getword	arg02, result1, #0
28dbc     01 00 00 FF 
28dc0     01 14 16 F2 | 	cmp	arg02, ##513 wc
28dc4     B8 00 90 3D |  if_ae	jmp	#LR__4182
28dc8     11 13 02 F6 | 	mov	arg01, local03
28dcc     07 12 4E F7 | 	zerox	arg01, #7 wz
28dd0     AC 00 90 AD |  if_e	jmp	#LR__4182
28dd4     11 13 E2 F8 | 	getbyte	arg01, local03, #0
28dd8     11 23 E2 F8 | 	getbyte	local03, local03, #0
28ddc     01 22 86 F1 | 	sub	local03, #1
28de0     11 13 CA F7 | 	test	arg01, local03 wz
28de4     98 00 90 5D |  if_ne	jmp	#LR__4182
28de8     34 1E 06 F1 | 	add	local01, #52
28dec     0F 13 02 F6 | 	mov	arg01, local01
28df0     34 1E 86 F1 | 	sub	local01, #52
28df4     0E 12 06 F1 | 	add	arg01, #14
28df8                 | ' {
28df8                 | ' 
28df8                 | ' 	return *((WORD*)ptr);
28df8     09 FB E9 FA | 	rdword	result1, arg01 wz
28dfc     80 00 90 AD |  if_e	jmp	#LR__4182
28e00     44 1E 06 F1 | 	add	local01, #68
28e04     0F 13 C2 FA | 	rdbyte	arg01, local01
28e08     44 1E 86 F1 | 	sub	local01, #68
28e0c     01 12 86 F1 | 	sub	arg01, #1
28e10     02 12 16 F2 | 	cmp	arg01, #2 wc
28e14     68 00 90 3D |  if_ae	jmp	#LR__4182
28e18     34 1E 06 F1 | 	add	local01, #52
28e1c     0F 13 02 F6 | 	mov	arg01, local01
28e20     34 1E 86 F1 | 	sub	local01, #52
28e24     11 12 06 F1 | 	add	arg01, #17
28e28                 | ' {
28e28                 | ' 
28e28                 | ' 	return *((WORD*)ptr);
28e28     09 FB E9 FA | 	rdword	result1, arg01 wz
28e2c     50 00 90 AD |  if_e	jmp	#LR__4182
28e30     34 1E 06 F1 | 	add	local01, #52
28e34     0F 13 02 F6 | 	mov	arg01, local01
28e38     34 1E 86 F1 | 	sub	local01, #52
28e3c     13 12 06 F1 | 	add	arg01, #19
28e40                 | ' {
28e40                 | ' 
28e40                 | ' 	return *((WORD*)ptr);
28e40     09 FB E1 FA | 	rdword	result1, arg01
28e44     FD 22 32 F9 | 	getword	local03, result1, #0
28e48     80 22 16 F2 | 	cmp	local03, #128 wc
28e4c     20 00 90 3D |  if_ae	jmp	#LR__4181
28e50     34 1E 06 F1 | 	add	local01, #52
28e54     0F 13 02 F6 | 	mov	arg01, local01
28e58     34 1E 86 F1 | 	sub	local01, #52
28e5c     20 12 06 F1 | 	add	arg01, #32
28e60                 | ' {
28e60                 | ' 
28e60                 | ' 	return *((DWORD*)ptr);
28e60     09 FB 01 FB | 	rdlong	result1, arg01
28e64     80 00 00 FF 
28e68     00 FA 15 F2 | 	cmp	result1, ##65536 wc
28e6c     10 00 90 CD |  if_b	jmp	#LR__4182
28e70                 | LR__4181
28e70     4A 1E 06 F1 | 	add	local01, #74
28e74                 | ' {
28e74                 | ' 
28e74                 | ' 	return *((WORD*)ptr);
28e74     0F FB E9 FA | 	rdword	result1, local01 wz
28e78                 | ' 			&& b != 0 && (b & (b - 1)) == 0
28e78                 | ' 			&& ld_word(fs->win +  14 ) != 0
28e78                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
28e78                 | ' 			&& ld_word(fs->win +  17 ) != 0
28e78                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
28e78                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
28e78                 | ' 				return 0;
28e78     00 FA 05 56 |  if_ne	mov	result1, #0
28e7c     18 00 90 5D |  if_ne	jmp	#LR__4184
28e80                 | LR__4182
28e80                 | LR__4183
28e80                 | ' 		}
28e80                 | ' 	}
28e80                 | ' 	return sign == 0xAA55 ? 2 : 3;
28e80     10 23 32 F9 | 	getword	local03, local02, #0
28e84     55 00 00 FF 
28e88     55 22 0E F2 | 	cmp	local03, ##43605 wz
28e8c     02 24 06 A6 |  if_e	mov	local04, #2
28e90     03 24 06 56 |  if_ne	mov	local04, #3
28e94     12 FB 01 F6 | 	mov	result1, local04
28e98                 | LR__4184
28e98     A7 F0 03 F6 | 	mov	ptra, fp
28e9c     B2 00 A0 FD | 	call	#popregs_
28ea0                 | _fatfs_cc_check_fs_ret
28ea0     2D 00 64 FD | 	ret
28ea4                 | 
28ea4                 | _fatfs_cc_find_volume
28ea4     05 4A 05 F6 | 	mov	COUNT_, #5
28ea8     A8 00 A0 FD | 	call	#pushregs_
28eac     24 F0 07 F1 | 	add	ptra, #36
28eb0     09 1F 02 F6 | 	mov	local01, arg01
28eb4     0A 21 02 F6 | 	mov	local02, arg02
28eb8     0F 13 02 F6 | 	mov	arg01, local01
28ebc     00 14 06 F6 | 	mov	arg02, #0
28ec0     08 FE BF FD | 	call	#_fatfs_cc_check_fs
28ec4     02 FA 0D F2 | 	cmp	result1, #2 wz
28ec8     0C 00 90 AD |  if_e	jmp	#LR__4190
28ecc     03 FA 15 F2 | 	cmp	result1, #3 wc
28ed0     00 20 0E C2 |  if_b	cmp	local02, #0 wz
28ed4     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4198
28ed8                 | LR__4190
28ed8                 | ' 	for (i = 0; i < 4; i++) {
28ed8     00 22 06 F6 | 	mov	local03, #0
28edc     97 26 48 FB | 	callpa	#(@LR__4192-@LR__4191)>>2,fcache_load_ptr_
28ee0                 | LR__4191
28ee0     04 22 16 F2 | 	cmp	local03, #4 wc
28ee4     44 00 90 3D |  if_ae	jmp	#LR__4193
28ee8     11 25 02 F6 | 	mov	local04, local03
28eec     02 24 66 F0 | 	shl	local04, #2
28ef0     14 4E 05 F1 | 	add	fp, #20
28ef4     A7 24 02 F1 | 	add	local04, fp
28ef8     34 1E 06 F1 | 	add	local01, #52
28efc     0F 13 02 F6 | 	mov	arg01, local01
28f00     34 1E 86 F1 | 	sub	local01, #52
28f04     BE 13 06 F1 | 	add	arg01, #446
28f08     11 15 02 F6 | 	mov	arg02, local03
28f0c     04 14 66 F0 | 	shl	arg02, #4
28f10     0A 13 02 F1 | 	add	arg01, arg02
28f14     08 12 06 F1 | 	add	arg01, #8
28f18                 | ' {
28f18                 | ' 
28f18                 | ' 	return *((DWORD*)ptr);
28f18     09 FB 01 FB | 	rdlong	result1, arg01
28f1c     14 4E 85 F1 | 	sub	fp, #20
28f20     12 FB 61 FC | 	wrlong	result1, local04
28f24     01 22 06 F1 | 	add	local03, #1
28f28     B4 FF 9F FD | 	jmp	#LR__4191
28f2c                 | LR__4192
28f2c                 | LR__4193
28f2c     00 20 0E F2 | 	cmp	local02, #0 wz
28f30     10 25 02 56 |  if_ne	mov	local04, local02
28f34     01 24 86 51 |  if_ne	sub	local04, #1
28f38     00 24 06 A6 |  if_e	mov	local04, #0
28f3c     12 23 02 F6 | 	mov	local03, local04
28f40                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
28f40                 | ' 	}
28f40                 | ' 	i = part ? part - 1 : 0;
28f40                 | ' 	do {
28f40                 | LR__4194
28f40     11 25 02 F6 | 	mov	local04, local03
28f44     02 24 66 F0 | 	shl	local04, #2
28f48     14 4E 05 F1 | 	add	fp, #20
28f4c     A7 24 02 F1 | 	add	local04, fp
28f50     12 25 0A FB | 	rdlong	local04, local04 wz
28f54     14 4E 85 F1 | 	sub	fp, #20
28f58     28 00 90 AD |  if_e	jmp	#LR__4195
28f5c     11 25 02 F6 | 	mov	local04, local03
28f60     02 24 66 F0 | 	shl	local04, #2
28f64     14 4E 05 F1 | 	add	fp, #20
28f68     A7 24 02 F1 | 	add	local04, fp
28f6c     12 15 02 FB | 	rdlong	arg02, local04
28f70     0F 13 02 F6 | 	mov	arg01, local01
28f74     14 4E 85 F1 | 	sub	fp, #20
28f78     50 FD BF FD | 	call	#_fatfs_cc_check_fs
28f7c     FD 24 02 F6 | 	mov	local04, result1
28f80     04 00 90 FD | 	jmp	#LR__4196
28f84                 | LR__4195
28f84     03 24 06 F6 | 	mov	local04, #3
28f88                 | LR__4196
28f88     12 27 02 F6 | 	mov	local05, local04
28f8c     00 20 0E F2 | 	cmp	local02, #0 wz
28f90     02 26 16 A2 |  if_e	cmp	local05, #2 wc
28f94     0C 00 90 8D |  if_c_and_z	jmp	#LR__4197
28f98     01 22 06 A1 |  if_e	add	local03, #1
28f9c     04 22 16 A2 |  if_e	cmp	local03, #4 wc
28fa0     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4194
28fa4                 | LR__4197
28fa4                 | ' 	return fmt;
28fa4     13 FB 01 F6 | 	mov	result1, local05
28fa8                 | LR__4198
28fa8     A7 F0 03 F6 | 	mov	ptra, fp
28fac     B2 00 A0 FD | 	call	#popregs_
28fb0                 | _fatfs_cc_find_volume_ret
28fb0     2D 00 64 FD | 	ret
28fb4                 | 
28fb4                 | _fatfs_cc_mount_volume
28fb4     0B 4A 05 F6 | 	mov	COUNT_, #11
28fb8     A8 00 A0 FD | 	call	#pushregs_
28fbc     0A 1F 02 F6 | 	mov	local01, arg02
28fc0     0B 21 02 F6 | 	mov	local02, arg03
28fc4     0F 01 68 FC | 	wrlong	#0, local01
28fc8     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
28fcc     FD 22 02 F6 | 	mov	local03, result1
28fd0     00 22 56 F2 | 	cmps	local03, #0 wc
28fd4     0B FA 05 C6 |  if_b	mov	result1, #11
28fd8     3C 05 90 CD |  if_b	jmp	#LR__4210
28fdc     11 17 02 F6 | 	mov	arg03, local03
28fe0     02 16 66 F0 | 	shl	arg03, #2
28fe4     F2 16 02 F1 | 	add	arg03, objptr
28fe8     0B 25 0A FB | 	rdlong	local04, arg03 wz
28fec     0C FA 05 A6 |  if_e	mov	result1, #12
28ff0     24 05 90 AD |  if_e	jmp	#LR__4210
28ff4     0F 25 62 FC | 	wrlong	local04, local01
28ff8     10 21 E2 F8 | 	getbyte	local02, local02, #0
28ffc     FE 20 06 F5 | 	and	local02, #254
29000     12 17 CA FA | 	rdbyte	arg03, local04 wz
29004     4C 00 90 AD |  if_e	jmp	#LR__4201
29008     01 24 06 F1 | 	add	local04, #1
2900c     12 13 CA FA | 	rdbyte	arg01, local04 wz
29010     01 24 86 F1 | 	sub	local04, #1
29014     01 FA 05 56 |  if_ne	mov	result1, #1
29018                 | ' 
29018                 | ' 	return Stat;
29018     01 00 00 AF 
2901c     20 E4 05 A1 |  if_e	add	objptr, ##544
29020     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
29024     01 00 00 AF 
29028     20 E4 85 A1 |  if_e	sub	objptr, ##544
2902c     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
29030     01 16 CE F7 | 	test	arg03, #1 wz
29034     1C 00 90 5D |  if_ne	jmp	#LR__4200
29038     00 20 0E F2 | 	cmp	local02, #0 wz
2903c     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
29040     04 FA CD 57 |  if_ne	test	result1, #4 wz
29044                 | ' 				return FR_WRITE_PROTECTED;
29044     0A FA 05 56 |  if_ne	mov	result1, #10
29048     CC 04 90 5D |  if_ne	jmp	#LR__4210
2904c                 | ' 			}
2904c                 | ' 			return FR_OK;
2904c     00 FA 05 F6 | 	mov	result1, #0
29050     C4 04 90 FD | 	jmp	#LR__4210
29054                 | LR__4200
29054                 | LR__4201
29054     12 01 48 FC | 	wrbyte	#0, local04
29058     01 24 06 F1 | 	add	local04, #1
2905c     12 23 42 FC | 	wrbyte	local03, local04
29060     12 13 C2 FA | 	rdbyte	arg01, local04
29064     01 24 86 F1 | 	sub	local04, #1
29068     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
2906c     FD 16 02 F6 | 	mov	arg03, result1
29070     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
29074     01 26 CE F7 | 	test	local05, #1 wz
29078                 | ' 		return FR_NOT_READY;
29078     03 FA 05 56 |  if_ne	mov	result1, #3
2907c     98 04 90 5D |  if_ne	jmp	#LR__4210
29080     00 20 0E F2 | 	cmp	local02, #0 wz
29084     0B 27 02 56 |  if_ne	mov	local05, arg03
29088     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
2908c     04 26 CE 57 |  if_ne	test	local05, #4 wz
29090                 | ' 		return FR_WRITE_PROTECTED;
29090     0A FA 05 56 |  if_ne	mov	result1, #10
29094     80 04 90 5D |  if_ne	jmp	#LR__4210
29098     12 13 02 F6 | 	mov	arg01, local04
2909c     00 14 06 F6 | 	mov	arg02, #0
290a0     00 FE BF FD | 	call	#_fatfs_cc_find_volume
290a4     FD 12 02 F6 | 	mov	arg01, result1
290a8     04 12 0E F2 | 	cmp	arg01, #4 wz
290ac     01 FA 05 A6 |  if_e	mov	result1, #1
290b0     64 04 90 AD |  if_e	jmp	#LR__4210
290b4     02 12 16 F2 | 	cmp	arg01, #2 wc
290b8     0D FA 05 36 |  if_ae	mov	result1, #13
290bc     58 04 90 3D |  if_ae	jmp	#LR__4210
290c0     30 24 06 F1 | 	add	local04, #48
290c4     12 29 02 FB | 	rdlong	local06, local04
290c8     04 24 06 F1 | 	add	local04, #4
290cc     12 13 02 F6 | 	mov	arg01, local04
290d0     34 24 86 F1 | 	sub	local04, #52
290d4     0B 12 06 F1 | 	add	arg01, #11
290d8                 | ' {
290d8                 | ' 
290d8                 | ' 	return *((WORD*)ptr);
290d8     09 FB E1 FA | 	rdword	result1, arg01
290dc     01 00 00 FF 
290e0     00 FA 0D F2 | 	cmp	result1, ##512 wz
290e4     0D FA 05 56 |  if_ne	mov	result1, #13
290e8     2C 04 90 5D |  if_ne	jmp	#LR__4210
290ec     34 24 06 F1 | 	add	local04, #52
290f0     12 13 02 F6 | 	mov	arg01, local04
290f4     34 24 86 F1 | 	sub	local04, #52
290f8     16 12 06 F1 | 	add	arg01, #22
290fc                 | ' {
290fc                 | ' 
290fc                 | ' 	return *((WORD*)ptr);
290fc     09 FB E1 FA | 	rdword	result1, arg01
29100     FD 2A 0A F6 | 	mov	local07, result1 wz
29104     18 00 90 5D |  if_ne	jmp	#LR__4202
29108     34 24 06 F1 | 	add	local04, #52
2910c     12 13 02 F6 | 	mov	arg01, local04
29110     34 24 86 F1 | 	sub	local04, #52
29114     24 12 06 F1 | 	add	arg01, #36
29118                 | ' {
29118                 | ' 
29118                 | ' 	return *((DWORD*)ptr);
29118     09 FB 01 FB | 	rdlong	result1, arg01
2911c     FD 2A 02 F6 | 	mov	local07, result1
29120                 | LR__4202
29120     1C 24 06 F1 | 	add	local04, #28
29124     12 2B 62 FC | 	wrlong	local07, local04
29128     28 24 06 F1 | 	add	local04, #40
2912c     12 27 C2 FA | 	rdbyte	local05, local04
29130     42 24 86 F1 | 	sub	local04, #66
29134     12 27 42 FC | 	wrbyte	local05, local04
29138     12 27 C2 FA | 	rdbyte	local05, local04
2913c     02 24 86 F1 | 	sub	local04, #2
29140     01 26 0E F2 | 	cmp	local05, #1 wz
29144     02 24 06 51 |  if_ne	add	local04, #2
29148     12 27 C2 5A |  if_ne	rdbyte	local05, local04
2914c     02 24 86 51 |  if_ne	sub	local04, #2
29150     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
29154     0D FA 05 56 |  if_ne	mov	result1, #13
29158     BC 03 90 5D |  if_ne	jmp	#LR__4210
2915c     02 24 06 F1 | 	add	local04, #2
29160     12 27 C2 FA | 	rdbyte	local05, local04
29164     13 2B 02 FD | 	qmul	local07, local05
29168     3F 24 06 F1 | 	add	local04, #63
2916c     12 27 C2 FA | 	rdbyte	local05, local04
29170     37 24 86 F1 | 	sub	local04, #55
29174     12 27 52 FC | 	wrword	local05, local04
29178     12 27 EA FA | 	rdword	local05, local04 wz
2917c     0A 24 86 F1 | 	sub	local04, #10
29180     18 2A 62 FD | 	getqx	local07
29184     20 00 90 AD |  if_e	jmp	#LR__4203
29188     0A 24 06 F1 | 	add	local04, #10
2918c     12 27 E2 FA | 	rdword	local05, local04
29190     13 23 32 F9 | 	getword	local03, local05, #0
29194     0A 24 86 F1 | 	sub	local04, #10
29198     13 27 32 F9 | 	getword	local05, local05, #0
2919c     01 26 86 F1 | 	sub	local05, #1
291a0     13 23 CA F7 | 	test	local03, local05 wz
291a4     08 00 90 AD |  if_e	jmp	#LR__4204
291a8                 | LR__4203
291a8     0D FA 05 F6 | 	mov	result1, #13
291ac     68 03 90 FD | 	jmp	#LR__4210
291b0                 | LR__4204
291b0     34 24 06 F1 | 	add	local04, #52
291b4     12 13 02 F6 | 	mov	arg01, local04
291b8     11 12 06 F1 | 	add	arg01, #17
291bc                 | ' {
291bc                 | ' 
291bc                 | ' 	return *((WORD*)ptr);
291bc     09 FB E1 FA | 	rdword	result1, arg01
291c0     2C 24 86 F1 | 	sub	local04, #44
291c4     12 FB 51 FC | 	wrword	result1, local04
291c8     12 27 E2 FA | 	rdword	local05, local04
291cc     08 24 86 F1 | 	sub	local04, #8
291d0     13 13 52 F6 | 	abs	arg01, local05 wc
291d4     09 13 42 F8 | 	getnib	arg01, arg01, #0
291d8     09 13 8A F6 | 	negc	arg01, arg01 wz
291dc     0D FA 05 56 |  if_ne	mov	result1, #13
291e0     34 03 90 5D |  if_ne	jmp	#LR__4210
291e4     34 24 06 F1 | 	add	local04, #52
291e8     12 13 02 F6 | 	mov	arg01, local04
291ec     34 24 86 F1 | 	sub	local04, #52
291f0     13 12 06 F1 | 	add	arg01, #19
291f4                 | ' {
291f4                 | ' 
291f4                 | ' 	return *((WORD*)ptr);
291f4     09 FB E1 FA | 	rdword	result1, arg01
291f8     FD 2C 0A F6 | 	mov	local08, result1 wz
291fc     34 24 06 A1 |  if_e	add	local04, #52
29200     12 13 02 A6 |  if_e	mov	arg01, local04
29204     34 24 86 A1 |  if_e	sub	local04, #52
29208     20 12 06 A1 |  if_e	add	arg01, #32
2920c                 | ' {
2920c                 | ' 
2920c                 | ' 	return *((DWORD*)ptr);
2920c     09 2D 02 AB |  if_e	rdlong	local08, arg01
29210     34 24 06 F1 | 	add	local04, #52
29214     12 13 02 F6 | 	mov	arg01, local04
29218     34 24 86 F1 | 	sub	local04, #52
2921c     0E 12 06 F1 | 	add	arg01, #14
29220                 | ' {
29220                 | ' 
29220                 | ' 	return *((WORD*)ptr);
29220     09 FB E1 FA | 	rdword	result1, arg01
29224     FD 12 02 F6 | 	mov	arg01, result1
29228     09 27 02 F6 | 	mov	local05, arg01
2922c     0F 26 4E F7 | 	zerox	local05, #15 wz
29230     0D FA 05 A6 |  if_e	mov	result1, #13
29234     E0 02 90 AD |  if_e	jmp	#LR__4210
29238     09 2F 32 F9 | 	getword	local09, arg01, #0
2923c     15 2F 02 F1 | 	add	local09, local07
29240     08 24 06 F1 | 	add	local04, #8
29244     12 27 E2 FA | 	rdword	local05, local04
29248     08 24 86 F1 | 	sub	local04, #8
2924c     13 27 52 F6 | 	abs	local05, local05 wc
29250     04 26 46 F0 | 	shr	local05, #4
29254     13 2F 82 F3 | 	sumc	local09, local05
29258     17 2D 12 F2 | 	cmp	local08, local09 wc
2925c     0D FA 05 C6 |  if_b	mov	result1, #13
29260     B4 02 90 CD |  if_b	jmp	#LR__4210
29264     17 2D 82 F1 | 	sub	local08, local09
29268     0A 24 06 F1 | 	add	local04, #10
2926c     12 27 E2 FA | 	rdword	local05, local04
29270     13 2D 12 FD | 	qdiv	local08, local05
29274     0A 24 86 F1 | 	sub	local04, #10
29278     18 26 62 FD | 	getqx	local05
2927c     00 26 0E F2 | 	cmp	local05, #0 wz
29280     0D FA 05 A6 |  if_e	mov	result1, #13
29284     90 02 90 AD |  if_e	jmp	#LR__4210
29288     00 30 06 F6 | 	mov	local10, #0
2928c     FF FF 07 FF 
29290     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
29294     03 30 06 C6 |  if_b	mov	local10, #3
29298     7F 00 00 FF 
2929c     F6 27 16 F2 | 	cmp	local05, ##65526 wc
292a0     02 30 06 C6 |  if_b	mov	local10, #2
292a4     07 00 00 FF 
292a8     F6 27 16 F2 | 	cmp	local05, ##4086 wc
292ac     01 30 06 C6 |  if_b	mov	local10, #1
292b0     00 30 0E F2 | 	cmp	local10, #0 wz
292b4     0D FA 05 A6 |  if_e	mov	result1, #13
292b8     5C 02 90 AD |  if_e	jmp	#LR__4210
292bc     02 26 06 F1 | 	add	local05, #2
292c0     18 24 06 F1 | 	add	local04, #24
292c4     12 27 62 FC | 	wrlong	local05, local04
292c8     08 24 06 F1 | 	add	local04, #8
292cc     12 29 62 FC | 	wrlong	local06, local04
292d0     14 27 02 F6 | 	mov	local05, local06
292d4     09 13 32 F9 | 	getword	arg01, arg01, #0
292d8     09 27 02 F1 | 	add	local05, arg01
292dc     04 24 06 F1 | 	add	local04, #4
292e0     12 27 62 FC | 	wrlong	local05, local04
292e4     14 27 02 F6 | 	mov	local05, local06
292e8     17 27 02 F1 | 	add	local05, local09
292ec     08 24 06 F1 | 	add	local04, #8
292f0     12 27 62 FC | 	wrlong	local05, local04
292f4     2C 24 86 F1 | 	sub	local04, #44
292f8     03 30 0E F2 | 	cmp	local10, #3 wz
292fc     5C 00 90 5D |  if_ne	jmp	#LR__4205
29300     34 24 06 F1 | 	add	local04, #52
29304     12 13 02 F6 | 	mov	arg01, local04
29308     34 24 86 F1 | 	sub	local04, #52
2930c     2A 12 06 F1 | 	add	arg01, #42
29310                 | ' {
29310                 | ' 
29310                 | ' 	return *((WORD*)ptr);
29310     09 FB E9 FA | 	rdword	result1, arg01 wz
29314     0D FA 05 56 |  if_ne	mov	result1, #13
29318     FC 01 90 5D |  if_ne	jmp	#LR__4210
2931c     08 24 06 F1 | 	add	local04, #8
29320     12 27 EA FA | 	rdword	local05, local04 wz
29324     08 24 86 F1 | 	sub	local04, #8
29328     0D FA 05 56 |  if_ne	mov	result1, #13
2932c     E8 01 90 5D |  if_ne	jmp	#LR__4210
29330     34 24 06 F1 | 	add	local04, #52
29334     12 13 02 F6 | 	mov	arg01, local04
29338     2C 12 06 F1 | 	add	arg01, #44
2933c                 | ' {
2933c                 | ' 
2933c                 | ' 	return *((DWORD*)ptr);
2933c     09 FB 01 FB | 	rdlong	result1, arg01
29340     0C 24 86 F1 | 	sub	local04, #12
29344     12 FB 61 FC | 	wrlong	result1, local04
29348     10 24 86 F1 | 	sub	local04, #16
2934c     12 33 02 FB | 	rdlong	local11, local04
29350     18 24 86 F1 | 	sub	local04, #24
29354     02 32 66 F0 | 	shl	local11, #2
29358     6C 00 90 FD | 	jmp	#LR__4207
2935c                 | LR__4205
2935c     08 24 06 F1 | 	add	local04, #8
29360     12 27 EA FA | 	rdword	local05, local04 wz
29364     08 24 86 F1 | 	sub	local04, #8
29368     0D FA 05 A6 |  if_e	mov	result1, #13
2936c     A8 01 90 AD |  if_e	jmp	#LR__4210
29370     24 24 06 F1 | 	add	local04, #36
29374     12 27 02 FB | 	rdlong	local05, local04
29378     15 27 02 F1 | 	add	local05, local07
2937c     04 24 06 F1 | 	add	local04, #4
29380     12 27 62 FC | 	wrlong	local05, local04
29384     28 24 86 F1 | 	sub	local04, #40
29388     02 30 0E F2 | 	cmp	local10, #2 wz
2938c     18 24 06 A1 |  if_e	add	local04, #24
29390     12 27 02 AB |  if_e	rdlong	local05, local04
29394     18 24 86 A1 |  if_e	sub	local04, #24
29398     01 26 66 A0 |  if_e	shl	local05, #1
2939c     24 00 90 AD |  if_e	jmp	#LR__4206
293a0     18 24 06 F1 | 	add	local04, #24
293a4     12 33 02 FB | 	rdlong	local11, local04
293a8     19 27 02 F6 | 	mov	local05, local11
293ac     01 26 66 F0 | 	shl	local05, #1
293b0     19 27 02 F1 | 	add	local05, local11
293b4     01 26 46 F0 | 	shr	local05, #1
293b8     18 24 86 F1 | 	sub	local04, #24
293bc     01 32 06 F5 | 	and	local11, #1
293c0     19 27 02 F1 | 	add	local05, local11
293c4                 | LR__4206
293c4     13 33 02 F6 | 	mov	local11, local05
293c8                 | LR__4207
293c8     FF 33 06 F1 | 	add	local11, #511
293cc     09 32 46 F0 | 	shr	local11, #9
293d0     1C 24 06 F1 | 	add	local04, #28
293d4     12 17 02 FB | 	rdlong	arg03, local04
293d8     1C 24 86 F1 | 	sub	local04, #28
293dc     19 17 12 F2 | 	cmp	arg03, local11 wc
293e0     0D FA 05 C6 |  if_b	mov	result1, #13
293e4     30 01 90 CD |  if_b	jmp	#LR__4210
293e8     14 24 06 F1 | 	add	local04, #20
293ec     FF FF FF FF 
293f0     12 FF 6B FC | 	wrlong	##-1, local04
293f4     04 24 86 F1 | 	sub	local04, #4
293f8     FF FF FF FF 
293fc     12 FF 6B FC | 	wrlong	##-1, local04
29400     0C 24 86 F1 | 	sub	local04, #12
29404     12 01 49 FC | 	wrbyte	#128, local04
29408     04 24 86 F1 | 	sub	local04, #4
2940c     03 30 0E F2 | 	cmp	local10, #3 wz
29410     D0 00 90 5D |  if_ne	jmp	#LR__4209
29414     34 24 06 F1 | 	add	local04, #52
29418     12 13 02 F6 | 	mov	arg01, local04
2941c     34 24 86 F1 | 	sub	local04, #52
29420     30 12 06 F1 | 	add	arg01, #48
29424                 | ' {
29424                 | ' 
29424                 | ' 	return *((WORD*)ptr);
29424     09 FB E1 FA | 	rdword	result1, arg01
29428     FD 26 32 F9 | 	getword	local05, result1, #0
2942c     01 26 0E F2 | 	cmp	local05, #1 wz
29430     B0 00 90 5D |  if_ne	jmp	#LR__4209
29434     01 28 06 F1 | 	add	local06, #1
29438     12 13 02 F6 | 	mov	arg01, local04
2943c     14 15 02 F6 | 	mov	arg02, local06
29440     CC CD BF FD | 	call	#_fatfs_cc_move_window
29444     00 FA 0D F2 | 	cmp	result1, #0 wz
29448     98 00 90 5D |  if_ne	jmp	#LR__4209
2944c     04 24 06 F1 | 	add	local04, #4
29450     12 01 48 FC | 	wrbyte	#0, local04
29454     30 24 06 F1 | 	add	local04, #48
29458     12 13 02 F6 | 	mov	arg01, local04
2945c     34 24 86 F1 | 	sub	local04, #52
29460     FE 13 06 F1 | 	add	arg01, #510
29464                 | ' {
29464                 | ' 
29464                 | ' 	return *((WORD*)ptr);
29464     09 FB E1 FA | 	rdword	result1, arg01
29468     FD 26 32 F9 | 	getword	local05, result1, #0
2946c     55 00 00 FF 
29470     55 26 0E F2 | 	cmp	local05, ##43605 wz
29474     34 24 06 A1 |  if_e	add	local04, #52
29478     12 13 02 A6 |  if_e	mov	arg01, local04
2947c     34 24 86 A1 |  if_e	sub	local04, #52
29480                 | ' {
29480                 | ' 
29480                 | ' 	return *((DWORD*)ptr);
29480     09 FB 01 AB |  if_e	rdlong	result1, arg01
29484     A9 B0 20 AF 
29488     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
2948c     54 00 90 5D |  if_ne	jmp	#LR__4208
29490     34 24 06 F1 | 	add	local04, #52
29494     12 13 02 F6 | 	mov	arg01, local04
29498     34 24 86 F1 | 	sub	local04, #52
2949c     E4 13 06 F1 | 	add	arg01, #484
294a0                 | ' {
294a0                 | ' 
294a0                 | ' 	return *((DWORD*)ptr);
294a0     09 FB 01 FB | 	rdlong	result1, arg01
294a4     B9 A0 30 FF 
294a8     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
294ac     34 00 90 5D |  if_ne	jmp	#LR__4208
294b0     34 24 06 F1 | 	add	local04, #52
294b4     12 13 02 F6 | 	mov	arg01, local04
294b8     E8 13 06 F1 | 	add	arg01, #488
294bc                 | ' {
294bc                 | ' 
294bc                 | ' 	return *((DWORD*)ptr);
294bc     09 FB 01 FB | 	rdlong	result1, arg01
294c0     20 24 86 F1 | 	sub	local04, #32
294c4     12 FB 61 FC | 	wrlong	result1, local04
294c8     20 24 06 F1 | 	add	local04, #32
294cc     12 13 02 F6 | 	mov	arg01, local04
294d0     EC 13 06 F1 | 	add	arg01, #492
294d4                 | ' {
294d4                 | ' 
294d4                 | ' 	return *((DWORD*)ptr);
294d4     09 FB 01 FB | 	rdlong	result1, arg01
294d8     24 24 86 F1 | 	sub	local04, #36
294dc     12 FB 61 FC | 	wrlong	result1, local04
294e0     10 24 86 F1 | 	sub	local04, #16
294e4                 | LR__4208
294e4                 | LR__4209
294e4     12 31 42 FC | 	wrbyte	local10, local04
294e8     04 E4 05 F1 | 	add	objptr, #4
294ec     F2 26 E2 FA | 	rdword	local05, objptr
294f0     01 26 06 F1 | 	add	local05, #1
294f4     F2 26 52 FC | 	wrword	local05, objptr
294f8     F2 32 E2 FA | 	rdword	local11, objptr
294fc     06 24 06 F1 | 	add	local04, #6
29500     12 33 52 FC | 	wrword	local11, local04
29504     04 E4 05 F1 | 	add	objptr, #4
29508     06 24 06 F1 | 	add	local04, #6
2950c     12 E5 61 FC | 	wrlong	objptr, local04
29510                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
29510                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
29510                 | ' 			{
29510                 | ' 
29510                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
29510                 | ' 
29510                 | ' 
29510                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
29510                 | ' 
29510                 | ' 			}
29510                 | ' 		}
29510                 | ' 
29510                 | ' 
29510                 | ' 	}
29510                 | ' 
29510                 | ' 	fs->fs_type = (BYTE)fmt;
29510                 | ' 	fs->id = ++Fsid;
29510                 | ' 
29510                 | ' 	fs->lfnbuf = LfnBuf;
29510                 | ' #line 3567 "ff.c"
29510                 | ' 	return FR_OK;
29510     00 FA 05 F6 | 	mov	result1, #0
29514     08 E4 85 F1 | 	sub	objptr, #8
29518                 | LR__4210
29518     A7 F0 03 F6 | 	mov	ptra, fp
2951c     B2 00 A0 FD | 	call	#popregs_
29520                 | _fatfs_cc_mount_volume_ret
29520     2D 00 64 FD | 	ret
29524                 | 
29524                 | _fatfs_cc_validate
29524     09 01 0A F6 | 	mov	_var01, arg01 wz
29528     09 02 06 F6 | 	mov	_var02, #9
2952c     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
29530     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
29534     50 00 90 AD |  if_e	jmp	#LR__4220
29538     04 00 06 F1 | 	add	_var01, #4
2953c     00 07 E2 FA | 	rdword	_var04, _var01
29540     04 00 86 F1 | 	sub	_var01, #4
29544     00 13 02 FB | 	rdlong	arg01, _var01
29548     06 12 06 F1 | 	add	arg01, #6
2954c     09 FB E1 FA | 	rdword	result1, arg01
29550     FD 06 0A F2 | 	cmp	_var04, result1 wz
29554     30 00 90 5D |  if_ne	jmp	#LR__4220
29558     00 07 02 FB | 	rdlong	_var04, _var01
2955c     01 06 06 F1 | 	add	_var04, #1
29560     03 13 CA FA | 	rdbyte	arg01, _var04 wz
29564     01 FA 05 56 |  if_ne	mov	result1, #1
29568                 | ' 
29568                 | ' 	return Stat;
29568     01 00 00 AF 
2956c     20 E4 05 A1 |  if_e	add	objptr, ##544
29570     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
29574     01 00 00 AF 
29578     20 E4 85 A1 |  if_e	sub	objptr, ##544
2957c     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
29580     01 04 CE F7 | 	test	_var03, #1 wz
29584     00 02 06 A6 |  if_e	mov	_var02, #0
29588                 | LR__4220
29588     00 02 0E F2 | 	cmp	_var02, #0 wz
2958c     00 05 02 AB |  if_e	rdlong	_var03, _var01
29590     00 04 06 56 |  if_ne	mov	_var03, #0
29594     0A 05 62 FC | 	wrlong	_var03, arg02
29598                 | ' 			res = FR_OK;
29598                 | ' 		}
29598                 | ' 
29598                 | ' 	}
29598                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
29598                 | ' 	return res;
29598     01 FB 01 F6 | 	mov	result1, _var02
2959c                 | _fatfs_cc_validate_ret
2959c     2D 00 64 FD | 	ret
295a0                 | 
295a0                 | _fatfs_cc_f_mount
295a0     01 4A 05 F6 | 	mov	COUNT_, #1
295a4     A8 00 A0 FD | 	call	#pushregs_
295a8     20 F0 07 F1 | 	add	ptra, #32
295ac     04 4E 05 F1 | 	add	fp, #4
295b0     A7 12 62 FC | 	wrlong	arg01, fp
295b4     04 4E 05 F1 | 	add	fp, #4
295b8     A7 14 62 FC | 	wrlong	arg02, fp
295bc     04 4E 05 F1 | 	add	fp, #4
295c0     A7 16 42 FC | 	wrbyte	arg03, fp
295c4     04 4E 85 F1 | 	sub	fp, #4
295c8     A7 16 02 FB | 	rdlong	arg03, fp
295cc     14 4E 05 F1 | 	add	fp, #20
295d0     A7 16 62 FC | 	wrlong	arg03, fp
295d4     A7 12 02 F6 | 	mov	arg01, fp
295d8     1C 4E 85 F1 | 	sub	fp, #28
295dc     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
295e0     14 4E 05 F1 | 	add	fp, #20
295e4     A7 FA 61 FC | 	wrlong	result1, fp
295e8     14 4E 85 F1 | 	sub	fp, #20
295ec     00 FA 55 F2 | 	cmps	result1, #0 wc
295f0     0B FA 05 C6 |  if_b	mov	result1, #11
295f4     C0 00 90 CD |  if_b	jmp	#LR__4231
295f8     14 4E 05 F1 | 	add	fp, #20
295fc     A7 16 02 FB | 	rdlong	arg03, fp
29600     02 16 66 F0 | 	shl	arg03, #2
29604     F2 16 02 F1 | 	add	arg03, objptr
29608     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2960c     04 4E 85 F1 | 	sub	fp, #4
29610     A7 16 62 FC | 	wrlong	arg03, fp
29614     10 4E 85 F1 | 	sub	fp, #16
29618     28 00 90 AD |  if_e	jmp	#LR__4230
2961c     10 4E 05 F1 | 	add	fp, #16
29620     A7 16 02 FB | 	rdlong	arg03, fp
29624     10 4E 85 F1 | 	sub	fp, #16
29628     01 16 06 F1 | 	add	arg03, #1
2962c     0B 13 C2 FA | 	rdbyte	arg01, arg03
29630     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
29634     10 4E 05 F1 | 	add	fp, #16
29638     A7 16 02 FB | 	rdlong	arg03, fp
2963c     10 4E 85 F1 | 	sub	fp, #16
29640     0B 01 48 FC | 	wrbyte	#0, arg03
29644                 | LR__4230
29644     04 4E 05 F1 | 	add	fp, #4
29648     A7 1E 0A FB | 	rdlong	local01, fp wz
2964c     04 4E 85 F1 | 	sub	fp, #4
29650     04 4E 05 51 |  if_ne	add	fp, #4
29654     A7 1E 02 5B |  if_ne	rdlong	local01, fp
29658     04 4E 85 51 |  if_ne	sub	fp, #4
2965c     0F 01 48 5C |  if_ne	wrbyte	#0, local01
29660     14 4E 05 F1 | 	add	fp, #20
29664     A7 1E 02 FB | 	rdlong	local01, fp
29668     02 1E 66 F0 | 	shl	local01, #2
2966c     F2 1E 02 F1 | 	add	local01, objptr
29670     10 4E 85 F1 | 	sub	fp, #16
29674     A7 16 02 FB | 	rdlong	arg03, fp
29678     0F 17 62 FC | 	wrlong	arg03, local01
2967c     08 4E 05 F1 | 	add	fp, #8
29680     A7 1E CA FA | 	rdbyte	local01, fp wz
29684     0C 4E 85 F1 | 	sub	fp, #12
29688     00 FA 05 A6 |  if_e	mov	result1, #0
2968c     28 00 90 AD |  if_e	jmp	#LR__4231
29690     08 4E 05 F1 | 	add	fp, #8
29694     A7 12 02 F6 | 	mov	arg01, fp
29698     04 4E 85 F1 | 	sub	fp, #4
2969c     A7 14 02 F6 | 	mov	arg02, fp
296a0     04 4E 85 F1 | 	sub	fp, #4
296a4     00 16 06 F6 | 	mov	arg03, #0
296a8     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
296ac     18 4E 05 F1 | 	add	fp, #24
296b0     A7 FA 61 FC | 	wrlong	result1, fp
296b4                 | ' 
296b4                 | ' 	res = mount_volume(&path, &fs, 0);
296b4                 | ' 	return res ;
296b4     18 4E 85 F1 | 	sub	fp, #24
296b8                 | LR__4231
296b8     A7 F0 03 F6 | 	mov	ptra, fp
296bc     B2 00 A0 FD | 	call	#popregs_
296c0                 | _fatfs_cc_f_mount_ret
296c0     2D 00 64 FD | 	ret
296c4                 | 
296c4                 | _fatfs_cc_f_open
296c4     02 4A 05 F6 | 	mov	COUNT_, #2
296c8     A8 00 A0 FD | 	call	#pushregs_
296cc     60 F0 07 F1 | 	add	ptra, #96
296d0     04 4E 05 F1 | 	add	fp, #4
296d4     A7 12 62 FC | 	wrlong	arg01, fp
296d8     04 4E 05 F1 | 	add	fp, #4
296dc     A7 14 62 FC | 	wrlong	arg02, fp
296e0     04 4E 05 F1 | 	add	fp, #4
296e4     A7 16 42 FC | 	wrbyte	arg03, fp
296e8     08 4E 85 F1 | 	sub	fp, #8
296ec     A7 18 0A FB | 	rdlong	arg04, fp wz
296f0     04 4E 85 F1 | 	sub	fp, #4
296f4     09 FA 05 A6 |  if_e	mov	result1, #9
296f8     98 06 90 AD |  if_e	jmp	#LR__4257
296fc     0C 4E 05 F1 | 	add	fp, #12
29700     A7 18 C2 FA | 	rdbyte	arg04, fp
29704     3F 18 06 F5 | 	and	arg04, #63
29708     A7 18 42 FC | 	wrbyte	arg04, fp
2970c     04 4E 85 F1 | 	sub	fp, #4
29710     A7 12 02 F6 | 	mov	arg01, fp
29714     3C 4E 05 F1 | 	add	fp, #60
29718     A7 14 02 F6 | 	mov	arg02, fp
2971c     38 4E 85 F1 | 	sub	fp, #56
29720     A7 16 C2 FA | 	rdbyte	arg03, fp
29724     0C 4E 85 F1 | 	sub	fp, #12
29728     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
2972c     10 4E 05 F1 | 	add	fp, #16
29730     A7 FA 61 FC | 	wrlong	result1, fp
29734     10 4E 85 F1 | 	sub	fp, #16
29738     00 FA 0D F2 | 	cmp	result1, #0 wz
2973c     2C 06 90 5D |  if_ne	jmp	#LR__4256
29740     44 4E 05 F1 | 	add	fp, #68
29744     A7 18 02 FB | 	rdlong	arg04, fp
29748     30 4E 85 F1 | 	sub	fp, #48
2974c     A7 18 62 FC | 	wrlong	arg04, fp
29750     A7 12 02 F6 | 	mov	arg01, fp
29754     0C 4E 85 F1 | 	sub	fp, #12
29758     A7 1E 02 FB | 	rdlong	local01, fp
2975c     08 4E 85 F1 | 	sub	fp, #8
29760     0F 15 02 F6 | 	mov	arg02, local01
29764     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
29768     10 4E 05 F1 | 	add	fp, #16
2976c     A7 FA 61 FC | 	wrlong	result1, fp
29770     10 4E 85 F1 | 	sub	fp, #16
29774     00 FA 0D F2 | 	cmp	result1, #0 wz
29778     1C 00 90 5D |  if_ne	jmp	#LR__4240
2977c     3F 4E 05 F1 | 	add	fp, #63
29780     A7 18 C2 FA | 	rdbyte	arg04, fp
29784     3F 4E 85 F1 | 	sub	fp, #63
29788     80 18 CE F7 | 	test	arg04, #128 wz
2978c     10 4E 05 51 |  if_ne	add	fp, #16
29790     A7 0C 68 5C |  if_ne	wrlong	#6, fp
29794     10 4E 85 51 |  if_ne	sub	fp, #16
29798                 | LR__4240
29798     0C 4E 05 F1 | 	add	fp, #12
2979c     A7 18 C2 FA | 	rdbyte	arg04, fp
297a0     0C 4E 85 F1 | 	sub	fp, #12
297a4     1C 18 CE F7 | 	test	arg04, #28 wz
297a8     F0 01 90 AD |  if_e	jmp	#LR__4245
297ac     10 4E 05 F1 | 	add	fp, #16
297b0     A7 1E 0A FB | 	rdlong	local01, fp wz
297b4     10 4E 85 F1 | 	sub	fp, #16
297b8     48 00 90 AD |  if_e	jmp	#LR__4242
297bc     10 4E 05 F1 | 	add	fp, #16
297c0     A7 18 02 FB | 	rdlong	arg04, fp
297c4     10 4E 85 F1 | 	sub	fp, #16
297c8     04 18 0E F2 | 	cmp	arg04, #4 wz
297cc     1C 00 90 5D |  if_ne	jmp	#LR__4241
297d0     14 4E 05 F1 | 	add	fp, #20
297d4     A7 12 02 F6 | 	mov	arg01, fp
297d8     14 4E 85 F1 | 	sub	fp, #20
297dc     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
297e0     10 4E 05 F1 | 	add	fp, #16
297e4     A7 FA 61 FC | 	wrlong	result1, fp
297e8     10 4E 85 F1 | 	sub	fp, #16
297ec                 | LR__4241
297ec     0C 4E 05 F1 | 	add	fp, #12
297f0     A7 1E C2 FA | 	rdbyte	local01, fp
297f4     08 1E 46 F5 | 	or	local01, #8
297f8     A7 1E 42 FC | 	wrbyte	local01, fp
297fc     0C 4E 85 F1 | 	sub	fp, #12
29800     3C 00 90 FD | 	jmp	#LR__4244
29804                 | LR__4242
29804     1A 4E 05 F1 | 	add	fp, #26
29808     A7 1E C2 FA | 	rdbyte	local01, fp
2980c     1A 4E 85 F1 | 	sub	fp, #26
29810     11 1E CE F7 | 	test	local01, #17 wz
29814     10 4E 05 51 |  if_ne	add	fp, #16
29818     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2981c     10 4E 85 51 |  if_ne	sub	fp, #16
29820     1C 00 90 5D |  if_ne	jmp	#LR__4243
29824     0C 4E 05 F1 | 	add	fp, #12
29828     A7 1E C2 FA | 	rdbyte	local01, fp
2982c     0C 4E 85 F1 | 	sub	fp, #12
29830     04 1E CE F7 | 	test	local01, #4 wz
29834     10 4E 05 51 |  if_ne	add	fp, #16
29838     A7 10 68 5C |  if_ne	wrlong	#8, fp
2983c     10 4E 85 51 |  if_ne	sub	fp, #16
29840                 | LR__4243
29840                 | LR__4244
29840     10 4E 05 F1 | 	add	fp, #16
29844     A7 1E 0A FB | 	rdlong	local01, fp wz
29848     10 4E 85 F1 | 	sub	fp, #16
2984c     A8 01 90 5D |  if_ne	jmp	#LR__4248
29850     0C 4E 05 F1 | 	add	fp, #12
29854     A7 1E C2 FA | 	rdbyte	local01, fp
29858     0C 4E 85 F1 | 	sub	fp, #12
2985c     08 1E CE F7 | 	test	local01, #8 wz
29860     94 01 90 AD |  if_e	jmp	#LR__4248
29864     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
29868     54 4E 05 F1 | 	add	fp, #84
2986c     A7 FA 61 FC | 	wrlong	result1, fp
29870     24 4E 85 F1 | 	sub	fp, #36
29874     A7 12 02 FB | 	rdlong	arg01, fp
29878     0E 12 06 F1 | 	add	arg01, #14
2987c     09 FB 61 FC | 	wrlong	result1, arg01
29880     A7 12 02 FB | 	rdlong	arg01, fp
29884     16 12 06 F1 | 	add	arg01, #22
29888     24 4E 05 F1 | 	add	fp, #36
2988c     A7 14 02 FB | 	rdlong	arg02, fp
29890     09 15 62 FC | 	wrlong	arg02, arg01
29894     10 4E 85 F1 | 	sub	fp, #16
29898     A7 12 02 FB | 	rdlong	arg01, fp
2989c     14 4E 85 F1 | 	sub	fp, #20
298a0     A7 14 02 FB | 	rdlong	arg02, fp
298a4     30 4E 85 F1 | 	sub	fp, #48
298a8     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
298ac     48 4E 05 F1 | 	add	fp, #72
298b0     A7 FA 61 FC | 	wrlong	result1, fp
298b4     18 4E 85 F1 | 	sub	fp, #24
298b8     A7 1E 02 FB | 	rdlong	local01, fp
298bc     0B 1E 06 F1 | 	add	local01, #11
298c0     0F 41 48 FC | 	wrbyte	#32, local01
298c4     14 4E 05 F1 | 	add	fp, #20
298c8     A7 12 02 FB | 	rdlong	arg01, fp
298cc     14 4E 85 F1 | 	sub	fp, #20
298d0     A7 14 02 FB | 	rdlong	arg02, fp
298d4     30 4E 85 F1 | 	sub	fp, #48
298d8     00 16 06 F6 | 	mov	arg03, #0
298dc     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
298e0     30 4E 05 F1 | 	add	fp, #48
298e4     A7 12 02 FB | 	rdlong	arg01, fp
298e8     1C 12 06 F1 | 	add	arg01, #28
298ec     09 01 68 FC | 	wrlong	#0, arg01
298f0     14 4E 05 F1 | 	add	fp, #20
298f4     A7 1E 02 FB | 	rdlong	local01, fp
298f8     03 1E 06 F1 | 	add	local01, #3
298fc     0F 03 48 FC | 	wrbyte	#1, local01
29900     04 4E 05 F1 | 	add	fp, #4
29904     A7 1E 0A FB | 	rdlong	local01, fp wz
29908     48 4E 85 F1 | 	sub	fp, #72
2990c     E8 00 90 AD |  if_e	jmp	#LR__4248
29910     44 4E 05 F1 | 	add	fp, #68
29914     A7 1E 02 FB | 	rdlong	local01, fp
29918     30 1E 06 F1 | 	add	local01, #48
2991c     0F 1F 02 FB | 	rdlong	local01, local01
29920     14 4E 05 F1 | 	add	fp, #20
29924     A7 1E 62 FC | 	wrlong	local01, fp
29928     44 4E 85 F1 | 	sub	fp, #68
2992c     A7 12 02 F6 | 	mov	arg01, fp
29930     34 4E 05 F1 | 	add	fp, #52
29934     A7 14 02 FB | 	rdlong	arg02, fp
29938     48 4E 85 F1 | 	sub	fp, #72
2993c     00 16 06 F6 | 	mov	arg03, #0
29940     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
29944     10 4E 05 F1 | 	add	fp, #16
29948     A7 FA 61 FC | 	wrlong	result1, fp
2994c     10 4E 85 F1 | 	sub	fp, #16
29950     00 FA 0D F2 | 	cmp	result1, #0 wz
29954     A0 00 90 5D |  if_ne	jmp	#LR__4248
29958     44 4E 05 F1 | 	add	fp, #68
2995c     A7 12 02 FB | 	rdlong	arg01, fp
29960     14 4E 05 F1 | 	add	fp, #20
29964     A7 14 02 FB | 	rdlong	arg02, fp
29968     58 4E 85 F1 | 	sub	fp, #88
2996c     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
29970     10 4E 05 F1 | 	add	fp, #16
29974     A7 FA 61 FC | 	wrlong	result1, fp
29978     34 4E 05 F1 | 	add	fp, #52
2997c     A7 18 02 FB | 	rdlong	arg04, fp
29980     04 4E 05 F1 | 	add	fp, #4
29984     A7 1E 02 FB | 	rdlong	local01, fp
29988     48 4E 85 F1 | 	sub	fp, #72
2998c     01 1E 86 F1 | 	sub	local01, #1
29990     10 18 06 F1 | 	add	arg04, #16
29994     0C 1F 62 FC | 	wrlong	local01, arg04
29998     5C 00 90 FD | 	jmp	#LR__4248
2999c                 | LR__4245
2999c     10 4E 05 F1 | 	add	fp, #16
299a0     A7 18 0A FB | 	rdlong	arg04, fp wz
299a4     10 4E 85 F1 | 	sub	fp, #16
299a8     4C 00 90 5D |  if_ne	jmp	#LR__4247
299ac     1A 4E 05 F1 | 	add	fp, #26
299b0     A7 18 C2 FA | 	rdbyte	arg04, fp
299b4     1A 4E 85 F1 | 	sub	fp, #26
299b8     10 18 CE F7 | 	test	arg04, #16 wz
299bc     10 4E 05 51 |  if_ne	add	fp, #16
299c0     A7 08 68 5C |  if_ne	wrlong	#4, fp
299c4     10 4E 85 51 |  if_ne	sub	fp, #16
299c8     2C 00 90 5D |  if_ne	jmp	#LR__4246
299cc     0C 4E 05 F1 | 	add	fp, #12
299d0     A7 18 C2 FA | 	rdbyte	arg04, fp
299d4     0C 4E 85 F1 | 	sub	fp, #12
299d8     02 18 CE F7 | 	test	arg04, #2 wz
299dc     1A 4E 05 51 |  if_ne	add	fp, #26
299e0     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
299e4     1A 4E 85 51 |  if_ne	sub	fp, #26
299e8     01 1E CE 57 |  if_ne	test	local01, #1 wz
299ec     10 4E 05 51 |  if_ne	add	fp, #16
299f0     A7 0E 68 5C |  if_ne	wrlong	#7, fp
299f4     10 4E 85 51 |  if_ne	sub	fp, #16
299f8                 | LR__4246
299f8                 | LR__4247
299f8                 | LR__4248
299f8     10 4E 05 F1 | 	add	fp, #16
299fc     A7 1E 0A FB | 	rdlong	local01, fp wz
29a00     10 4E 85 F1 | 	sub	fp, #16
29a04     60 00 90 5D |  if_ne	jmp	#LR__4249
29a08     0C 4E 05 F1 | 	add	fp, #12
29a0c     A7 20 C2 FA | 	rdbyte	local02, fp
29a10     0C 4E 85 F1 | 	sub	fp, #12
29a14     08 20 CE F7 | 	test	local02, #8 wz
29a18     0C 4E 05 51 |  if_ne	add	fp, #12
29a1c     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
29a20     40 20 46 55 |  if_ne	or	local02, #64
29a24     A7 20 42 5C |  if_ne	wrbyte	local02, fp
29a28     0C 4E 85 51 |  if_ne	sub	fp, #12
29a2c     04 4E 05 F1 | 	add	fp, #4
29a30     A7 20 02 FB | 	rdlong	local02, fp
29a34     40 4E 05 F1 | 	add	fp, #64
29a38     A7 1E 02 FB | 	rdlong	local01, fp
29a3c     30 1E 06 F1 | 	add	local01, #48
29a40     0F 1F 02 FB | 	rdlong	local01, local01
29a44     20 20 06 F1 | 	add	local02, #32
29a48     10 1F 62 FC | 	wrlong	local01, local02
29a4c     40 4E 85 F1 | 	sub	fp, #64
29a50     A7 20 02 FB | 	rdlong	local02, fp
29a54     2C 4E 05 F1 | 	add	fp, #44
29a58     A7 1E 02 FB | 	rdlong	local01, fp
29a5c     30 4E 85 F1 | 	sub	fp, #48
29a60     24 20 06 F1 | 	add	local02, #36
29a64     10 1F 62 FC | 	wrlong	local01, local02
29a68                 | LR__4249
29a68     10 4E 05 F1 | 	add	fp, #16
29a6c     A7 20 0A FB | 	rdlong	local02, fp wz
29a70     10 4E 85 F1 | 	sub	fp, #16
29a74     F4 02 90 5D |  if_ne	jmp	#LR__4255
29a78     04 4E 05 F1 | 	add	fp, #4
29a7c     A7 20 02 FB | 	rdlong	local02, fp
29a80     40 4E 05 F1 | 	add	fp, #64
29a84     A7 12 02 FB | 	rdlong	arg01, fp
29a88     14 4E 85 F1 | 	sub	fp, #20
29a8c     A7 14 02 FB | 	rdlong	arg02, fp
29a90     30 4E 85 F1 | 	sub	fp, #48
29a94     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
29a98     08 20 06 F1 | 	add	local02, #8
29a9c     10 FB 61 FC | 	wrlong	result1, local02
29aa0     04 4E 05 F1 | 	add	fp, #4
29aa4     A7 20 02 FB | 	rdlong	local02, fp
29aa8     2C 4E 05 F1 | 	add	fp, #44
29aac     A7 12 02 FB | 	rdlong	arg01, fp
29ab0     1C 12 06 F1 | 	add	arg01, #28
29ab4                 | ' {
29ab4                 | ' 
29ab4                 | ' 	return *((DWORD*)ptr);
29ab4     09 FB 01 FB | 	rdlong	result1, arg01
29ab8     0C 20 06 F1 | 	add	local02, #12
29abc     10 FB 61 FC | 	wrlong	result1, local02
29ac0     2C 4E 85 F1 | 	sub	fp, #44
29ac4     A7 20 02 FB | 	rdlong	local02, fp
29ac8     40 4E 05 F1 | 	add	fp, #64
29acc     A7 1E 02 FB | 	rdlong	local01, fp
29ad0     10 1F 62 FC | 	wrlong	local01, local02
29ad4     40 4E 85 F1 | 	sub	fp, #64
29ad8     A7 20 02 FB | 	rdlong	local02, fp
29adc     40 4E 05 F1 | 	add	fp, #64
29ae0     A7 1E 02 FB | 	rdlong	local01, fp
29ae4     06 1E 06 F1 | 	add	local01, #6
29ae8     0F 1F E2 FA | 	rdword	local01, local01
29aec     04 20 06 F1 | 	add	local02, #4
29af0     10 1F 52 FC | 	wrword	local01, local02
29af4     40 4E 85 F1 | 	sub	fp, #64
29af8     A7 20 02 FB | 	rdlong	local02, fp
29afc     08 4E 05 F1 | 	add	fp, #8
29b00     A7 1E C2 FA | 	rdbyte	local01, fp
29b04     10 20 06 F1 | 	add	local02, #16
29b08     10 1F 42 FC | 	wrbyte	local01, local02
29b0c     08 4E 85 F1 | 	sub	fp, #8
29b10     A7 20 02 FB | 	rdlong	local02, fp
29b14     11 20 06 F1 | 	add	local02, #17
29b18     10 01 48 FC | 	wrbyte	#0, local02
29b1c     A7 20 02 FB | 	rdlong	local02, fp
29b20     1C 20 06 F1 | 	add	local02, #28
29b24     10 01 68 FC | 	wrlong	#0, local02
29b28     A7 20 02 FB | 	rdlong	local02, fp
29b2c     14 20 06 F1 | 	add	local02, #20
29b30     10 01 68 FC | 	wrlong	#0, local02
29b34     A7 12 02 FB | 	rdlong	arg01, fp
29b38     04 4E 85 F1 | 	sub	fp, #4
29b3c     28 12 06 F1 | 	add	arg01, #40
29b40     00 14 06 F6 | 	mov	arg02, #0
29b44     09 16 C6 F9 | 	decod	arg03, #9
29b48     98 00 A0 FD | 	call	#\builtin_bytefill_
29b4c     0C 4E 05 F1 | 	add	fp, #12
29b50     A7 20 C2 FA | 	rdbyte	local02, fp
29b54     0C 4E 85 F1 | 	sub	fp, #12
29b58     20 20 CE F7 | 	test	local02, #32 wz
29b5c     0C 02 90 AD |  if_e	jmp	#LR__4254
29b60     04 4E 05 F1 | 	add	fp, #4
29b64     A7 1E 02 FB | 	rdlong	local01, fp
29b68     04 4E 85 F1 | 	sub	fp, #4
29b6c     0C 1E 06 F1 | 	add	local01, #12
29b70     0F 21 02 FB | 	rdlong	local02, local01
29b74     01 20 16 F2 | 	cmp	local02, #1 wc
29b78     F0 01 90 CD |  if_b	jmp	#LR__4254
29b7c     04 4E 05 F1 | 	add	fp, #4
29b80     A7 1E 02 FB | 	rdlong	local01, fp
29b84     0F 21 02 F6 | 	mov	local02, local01
29b88     0C 1E 06 F1 | 	add	local01, #12
29b8c     0F 1F 02 FB | 	rdlong	local01, local01
29b90     14 20 06 F1 | 	add	local02, #20
29b94     10 1F 62 FC | 	wrlong	local01, local02
29b98     40 4E 05 F1 | 	add	fp, #64
29b9c     A7 20 02 FB | 	rdlong	local02, fp
29ba0     0A 20 06 F1 | 	add	local02, #10
29ba4     10 21 E2 FA | 	rdword	local02, local02
29ba8     09 20 66 F0 | 	shl	local02, #9
29bac     08 4E 05 F1 | 	add	fp, #8
29bb0     A7 20 62 FC | 	wrlong	local02, fp
29bb4     48 4E 85 F1 | 	sub	fp, #72
29bb8     A7 20 02 FB | 	rdlong	local02, fp
29bbc     08 20 06 F1 | 	add	local02, #8
29bc0     10 1F 02 FB | 	rdlong	local01, local02
29bc4     4C 4E 05 F1 | 	add	fp, #76
29bc8     A7 1E 62 FC | 	wrlong	local01, fp
29bcc                 | ' 				fp->fptr = fp->obj.objsize;
29bcc                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
29bcc                 | ' 				clst = fp->obj.sclust;
29bcc                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
29bcc     4C 4E 85 F1 | 	sub	fp, #76
29bd0     A7 20 02 FB | 	rdlong	local02, fp
29bd4     0C 20 06 F1 | 	add	local02, #12
29bd8     10 1F 02 FB | 	rdlong	local01, local02
29bdc     58 4E 05 F1 | 	add	fp, #88
29be0     A7 1E 62 FC | 	wrlong	local01, fp
29be4     5C 4E 85 F1 | 	sub	fp, #92
29be8                 | LR__4250
29be8     10 4E 05 F1 | 	add	fp, #16
29bec     A7 20 0A FB | 	rdlong	local02, fp wz
29bf0     10 4E 85 F1 | 	sub	fp, #16
29bf4     94 00 90 5D |  if_ne	jmp	#LR__4251
29bf8     5C 4E 05 F1 | 	add	fp, #92
29bfc     A7 20 02 FB | 	rdlong	local02, fp
29c00     10 4E 85 F1 | 	sub	fp, #16
29c04     A7 1E 02 FB | 	rdlong	local01, fp
29c08     4C 4E 85 F1 | 	sub	fp, #76
29c0c     0F 21 1A F2 | 	cmp	local02, local01 wcz
29c10     78 00 90 ED |  if_be	jmp	#LR__4251
29c14     04 4E 05 F1 | 	add	fp, #4
29c18     A7 12 02 FB | 	rdlong	arg01, fp
29c1c     4C 4E 05 F1 | 	add	fp, #76
29c20     A7 14 02 FB | 	rdlong	arg02, fp
29c24     50 4E 85 F1 | 	sub	fp, #80
29c28     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
29c2c     50 4E 05 F1 | 	add	fp, #80
29c30     A7 FA 61 FC | 	wrlong	result1, fp
29c34     50 4E 85 F1 | 	sub	fp, #80
29c38     02 FA 15 F2 | 	cmp	result1, #2 wc
29c3c     10 4E 05 C1 |  if_b	add	fp, #16
29c40     A7 04 68 CC |  if_b	wrlong	#2, fp
29c44     10 4E 85 C1 |  if_b	sub	fp, #16
29c48     50 4E 05 F1 | 	add	fp, #80
29c4c     A7 20 02 FB | 	rdlong	local02, fp
29c50     50 4E 85 F1 | 	sub	fp, #80
29c54     FF FF 7F FF 
29c58     FF 21 0E F2 | 	cmp	local02, ##-1 wz
29c5c     10 4E 05 A1 |  if_e	add	fp, #16
29c60     A7 02 68 AC |  if_e	wrlong	#1, fp
29c64     10 4E 85 A1 |  if_e	sub	fp, #16
29c68     5C 4E 05 F1 | 	add	fp, #92
29c6c     A7 20 02 FB | 	rdlong	local02, fp
29c70     10 4E 85 F1 | 	sub	fp, #16
29c74     A7 1E 02 FB | 	rdlong	local01, fp
29c78     0F 21 82 F1 | 	sub	local02, local01
29c7c     10 4E 05 F1 | 	add	fp, #16
29c80     A7 20 62 FC | 	wrlong	local02, fp
29c84     5C 4E 85 F1 | 	sub	fp, #92
29c88     5C FF 9F FD | 	jmp	#LR__4250
29c8c                 | LR__4251
29c8c     04 4E 05 F1 | 	add	fp, #4
29c90     A7 20 02 FB | 	rdlong	local02, fp
29c94     4C 4E 05 F1 | 	add	fp, #76
29c98     A7 1E 02 FB | 	rdlong	local01, fp
29c9c     18 20 06 F1 | 	add	local02, #24
29ca0     10 1F 62 FC | 	wrlong	local01, local02
29ca4     40 4E 85 F1 | 	sub	fp, #64
29ca8     A7 20 0A FB | 	rdlong	local02, fp wz
29cac     10 4E 85 F1 | 	sub	fp, #16
29cb0     B8 00 90 5D |  if_ne	jmp	#LR__4253
29cb4     5C 4E 05 F1 | 	add	fp, #92
29cb8     A7 1E 02 FB | 	rdlong	local01, fp
29cbc     5C 4E 85 F1 | 	sub	fp, #92
29cc0     FF 1F CE F7 | 	test	local01, #511 wz
29cc4     A4 00 90 AD |  if_e	jmp	#LR__4253
29cc8     44 4E 05 F1 | 	add	fp, #68
29ccc     A7 12 02 FB | 	rdlong	arg01, fp
29cd0     0C 4E 05 F1 | 	add	fp, #12
29cd4     A7 14 02 FB | 	rdlong	arg02, fp
29cd8     50 4E 85 F1 | 	sub	fp, #80
29cdc     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
29ce0     58 4E 05 F1 | 	add	fp, #88
29ce4     A7 FA 61 FC | 	wrlong	result1, fp
29ce8     00 FA 4D F2 | 	cmps	result1, #0 wz
29cec     58 4E 85 F1 | 	sub	fp, #88
29cf0     10 4E 05 A1 |  if_e	add	fp, #16
29cf4     A7 04 68 AC |  if_e	wrlong	#2, fp
29cf8     10 4E 85 A1 |  if_e	sub	fp, #16
29cfc     6C 00 90 AD |  if_e	jmp	#LR__4252
29d00     04 4E 05 F1 | 	add	fp, #4
29d04     A7 20 02 FB | 	rdlong	local02, fp
29d08     54 4E 05 F1 | 	add	fp, #84
29d0c     A7 1E 02 FB | 	rdlong	local01, fp
29d10     04 4E 05 F1 | 	add	fp, #4
29d14     A7 18 02 FB | 	rdlong	arg04, fp
29d18     09 18 46 F0 | 	shr	arg04, #9
29d1c     0C 1F 02 F1 | 	add	local01, arg04
29d20     1C 20 06 F1 | 	add	local02, #28
29d24     10 1F 62 FC | 	wrlong	local01, local02
29d28     18 4E 85 F1 | 	sub	fp, #24
29d2c     A7 20 02 FB | 	rdlong	local02, fp
29d30     01 20 06 F1 | 	add	local02, #1
29d34     10 13 C2 FA | 	rdbyte	arg01, local02
29d38     40 4E 85 F1 | 	sub	fp, #64
29d3c     A7 20 02 FB | 	rdlong	local02, fp
29d40     10 15 02 F6 | 	mov	arg02, local02
29d44     28 14 06 F1 | 	add	arg02, #40
29d48     04 4E 85 F1 | 	sub	fp, #4
29d4c     1C 20 06 F1 | 	add	local02, #28
29d50     10 17 02 FB | 	rdlong	arg03, local02
29d54     01 18 06 F6 | 	mov	arg04, #1
29d58     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
29d5c     00 FA 0D F2 | 	cmp	result1, #0 wz
29d60     10 4E 05 51 |  if_ne	add	fp, #16
29d64     A7 02 68 5C |  if_ne	wrlong	#1, fp
29d68     10 4E 85 51 |  if_ne	sub	fp, #16
29d6c                 | LR__4252
29d6c                 | LR__4253
29d6c                 | LR__4254
29d6c                 | LR__4255
29d6c                 | LR__4256
29d6c     10 4E 05 F1 | 	add	fp, #16
29d70     A7 20 0A FB | 	rdlong	local02, fp wz
29d74     10 4E 85 F1 | 	sub	fp, #16
29d78     04 4E 05 51 |  if_ne	add	fp, #4
29d7c     A7 20 02 5B |  if_ne	rdlong	local02, fp
29d80     04 4E 85 51 |  if_ne	sub	fp, #4
29d84     10 01 68 5C |  if_ne	wrlong	#0, local02
29d88                 | ' 
29d88                 | ' 	return res ;
29d88     10 4E 05 F1 | 	add	fp, #16
29d8c     A7 FA 01 FB | 	rdlong	result1, fp
29d90     10 4E 85 F1 | 	sub	fp, #16
29d94                 | LR__4257
29d94     A7 F0 03 F6 | 	mov	ptra, fp
29d98     B2 00 A0 FD | 	call	#popregs_
29d9c                 | _fatfs_cc_f_open_ret
29d9c     2D 00 64 FD | 	ret
29da0                 | 
29da0                 | _fatfs_cc_f_read
29da0     0E 4A 05 F6 | 	mov	COUNT_, #14
29da4     A8 00 A0 FD | 	call	#pushregs_
29da8     38 F0 07 F1 | 	add	ptra, #56
29dac     04 4E 05 F1 | 	add	fp, #4
29db0     A7 12 62 FC | 	wrlong	arg01, fp
29db4     04 4E 05 F1 | 	add	fp, #4
29db8     A7 14 62 FC | 	wrlong	arg02, fp
29dbc     04 4E 05 F1 | 	add	fp, #4
29dc0     A7 16 62 FC | 	wrlong	arg03, fp
29dc4     04 4E 05 F1 | 	add	fp, #4
29dc8     A7 18 62 FC | 	wrlong	arg04, fp
29dcc     08 4E 85 F1 | 	sub	fp, #8
29dd0     A7 FA 01 FB | 	rdlong	result1, fp
29dd4     2C 4E 05 F1 | 	add	fp, #44
29dd8     A7 FA 61 FC | 	wrlong	result1, fp
29ddc     24 4E 85 F1 | 	sub	fp, #36
29de0     A7 FA 01 FB | 	rdlong	result1, fp
29de4     FD 00 68 FC | 	wrlong	#0, result1
29de8     0C 4E 85 F1 | 	sub	fp, #12
29dec     A7 12 02 FB | 	rdlong	arg01, fp
29df0     14 4E 05 F1 | 	add	fp, #20
29df4     A7 14 02 F6 | 	mov	arg02, fp
29df8     18 4E 85 F1 | 	sub	fp, #24
29dfc     24 F7 BF FD | 	call	#_fatfs_cc_validate
29e00     14 4E 05 F1 | 	add	fp, #20
29e04     A7 FA 61 FC | 	wrlong	result1, fp
29e08     00 FA 4D F2 | 	cmps	result1, #0 wz
29e0c     14 4E 85 F1 | 	sub	fp, #20
29e10     20 00 90 5D |  if_ne	jmp	#LR__4260
29e14     04 4E 05 F1 | 	add	fp, #4
29e18     A7 14 02 FB | 	rdlong	arg02, fp
29e1c     11 14 06 F1 | 	add	arg02, #17
29e20     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
29e24     10 4E 05 F1 | 	add	fp, #16
29e28     A7 14 62 FC | 	wrlong	arg02, fp
29e2c     14 4E 85 F1 | 	sub	fp, #20
29e30     10 00 90 AD |  if_e	jmp	#LR__4261
29e34                 | LR__4260
29e34     14 4E 05 F1 | 	add	fp, #20
29e38     A7 FA 01 FB | 	rdlong	result1, fp
29e3c     14 4E 85 F1 | 	sub	fp, #20
29e40     EC 05 90 FD | 	jmp	#LR__4280
29e44                 | LR__4261
29e44     04 4E 05 F1 | 	add	fp, #4
29e48     A7 18 02 FB | 	rdlong	arg04, fp
29e4c     04 4E 85 F1 | 	sub	fp, #4
29e50     10 18 06 F1 | 	add	arg04, #16
29e54     0C 19 C2 FA | 	rdbyte	arg04, arg04
29e58     01 18 CE F7 | 	test	arg04, #1 wz
29e5c     07 FA 05 A6 |  if_e	mov	result1, #7
29e60     CC 05 90 AD |  if_e	jmp	#LR__4280
29e64     04 4E 05 F1 | 	add	fp, #4
29e68     A7 1E 02 FB | 	rdlong	local01, fp
29e6c     0F 21 02 F6 | 	mov	local02, local01
29e70     0C 20 06 F1 | 	add	local02, #12
29e74     10 23 02 FB | 	rdlong	local03, local02
29e78     14 1E 06 F1 | 	add	local01, #20
29e7c     0F 1F 02 FB | 	rdlong	local01, local01
29e80     0F 23 82 F1 | 	sub	local03, local01
29e84     20 4E 05 F1 | 	add	fp, #32
29e88     A7 22 62 FC | 	wrlong	local03, fp
29e8c     18 4E 85 F1 | 	sub	fp, #24
29e90     A7 24 02 FB | 	rdlong	local04, fp
29e94     0C 4E 85 F1 | 	sub	fp, #12
29e98     11 25 1A F2 | 	cmp	local04, local03 wcz
29e9c     24 4E 05 11 |  if_a	add	fp, #36
29ea0     A7 24 02 1B |  if_a	rdlong	local04, fp
29ea4     18 4E 85 11 |  if_a	sub	fp, #24
29ea8     A7 24 62 1C |  if_a	wrlong	local04, fp
29eac     0C 4E 85 11 |  if_a	sub	fp, #12
29eb0                 | ' 
29eb0                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
29eb0                 | LR__4262
29eb0     0C 4E 05 F1 | 	add	fp, #12
29eb4     A7 20 02 FB | 	rdlong	local02, fp
29eb8     0C 4E 85 F1 | 	sub	fp, #12
29ebc     10 25 02 F6 | 	mov	local04, local02
29ec0     01 24 16 F2 | 	cmp	local04, #1 wc
29ec4     64 05 90 CD |  if_b	jmp	#LR__4279
29ec8     04 4E 05 F1 | 	add	fp, #4
29ecc     A7 22 02 FB | 	rdlong	local03, fp
29ed0     04 4E 85 F1 | 	sub	fp, #4
29ed4     14 22 06 F1 | 	add	local03, #20
29ed8     11 23 02 FB | 	rdlong	local03, local03
29edc     FF 23 CE F7 | 	test	local03, #511 wz
29ee0     3C 04 90 5D |  if_ne	jmp	#LR__4277
29ee4     04 4E 05 F1 | 	add	fp, #4
29ee8     A7 1E 02 FB | 	rdlong	local01, fp
29eec     14 1E 06 F1 | 	add	local01, #20
29ef0     0F 23 02 FB | 	rdlong	local03, local01
29ef4     09 22 46 F0 | 	shr	local03, #9
29ef8     14 4E 05 F1 | 	add	fp, #20
29efc     A7 26 02 FB | 	rdlong	local05, fp
29f00     13 29 02 F6 | 	mov	local06, local05
29f04     0A 28 06 F1 | 	add	local06, #10
29f08     14 2B E2 FA | 	rdword	local07, local06
29f0c     0A 28 86 F1 | 	sub	local06, #10
29f10     15 2D 32 F9 | 	getword	local08, local07, #0
29f14     01 2C 86 F1 | 	sub	local08, #1
29f18     16 23 0A F5 | 	and	local03, local08 wz
29f1c     18 4E 05 F1 | 	add	fp, #24
29f20     A7 22 62 FC | 	wrlong	local03, fp
29f24     30 4E 85 F1 | 	sub	fp, #48
29f28     E0 00 90 5D |  if_ne	jmp	#LR__4267
29f2c     04 4E 05 F1 | 	add	fp, #4
29f30     A7 22 02 FB | 	rdlong	local03, fp
29f34     04 4E 85 F1 | 	sub	fp, #4
29f38     14 22 06 F1 | 	add	local03, #20
29f3c     11 23 0A FB | 	rdlong	local03, local03 wz
29f40     20 00 90 5D |  if_ne	jmp	#LR__4263
29f44     04 4E 05 F1 | 	add	fp, #4
29f48     A7 22 02 FB | 	rdlong	local03, fp
29f4c     08 22 06 F1 | 	add	local03, #8
29f50     11 23 02 FB | 	rdlong	local03, local03
29f54     18 4E 05 F1 | 	add	fp, #24
29f58     A7 22 62 FC | 	wrlong	local03, fp
29f5c     1C 4E 85 F1 | 	sub	fp, #28
29f60     28 00 90 FD | 	jmp	#LR__4264
29f64                 | LR__4263
29f64     04 4E 05 F1 | 	add	fp, #4
29f68     A7 2C 02 FB | 	rdlong	local08, fp
29f6c     16 13 02 F6 | 	mov	arg01, local08
29f70     04 4E 85 F1 | 	sub	fp, #4
29f74     18 2C 06 F1 | 	add	local08, #24
29f78     16 15 02 FB | 	rdlong	arg02, local08
29f7c     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
29f80     1C 4E 05 F1 | 	add	fp, #28
29f84     A7 FA 61 FC | 	wrlong	result1, fp
29f88     1C 4E 85 F1 | 	sub	fp, #28
29f8c                 | LR__4264
29f8c     1C 4E 05 F1 | 	add	fp, #28
29f90     A7 22 02 FB | 	rdlong	local03, fp
29f94     1C 4E 85 F1 | 	sub	fp, #28
29f98     02 22 16 F2 | 	cmp	local03, #2 wc
29f9c     1C 00 90 3D |  if_ae	jmp	#LR__4265
29fa0     04 4E 05 F1 | 	add	fp, #4
29fa4     A7 22 02 FB | 	rdlong	local03, fp
29fa8     04 4E 85 F1 | 	sub	fp, #4
29fac     11 22 06 F1 | 	add	local03, #17
29fb0     11 05 48 FC | 	wrbyte	#2, local03
29fb4     02 FA 05 F6 | 	mov	result1, #2
29fb8     74 04 90 FD | 	jmp	#LR__4280
29fbc                 | LR__4265
29fbc     1C 4E 05 F1 | 	add	fp, #28
29fc0     A7 22 02 FB | 	rdlong	local03, fp
29fc4     1C 4E 85 F1 | 	sub	fp, #28
29fc8     FF FF 7F FF 
29fcc     FF 23 0E F2 | 	cmp	local03, ##-1 wz
29fd0     1C 00 90 5D |  if_ne	jmp	#LR__4266
29fd4     04 4E 05 F1 | 	add	fp, #4
29fd8     A7 22 02 FB | 	rdlong	local03, fp
29fdc     04 4E 85 F1 | 	sub	fp, #4
29fe0     11 22 06 F1 | 	add	local03, #17
29fe4     11 03 48 FC | 	wrbyte	#1, local03
29fe8     01 FA 05 F6 | 	mov	result1, #1
29fec     40 04 90 FD | 	jmp	#LR__4280
29ff0                 | LR__4266
29ff0     04 4E 05 F1 | 	add	fp, #4
29ff4     A7 22 02 FB | 	rdlong	local03, fp
29ff8     18 4E 05 F1 | 	add	fp, #24
29ffc     A7 2C 02 FB | 	rdlong	local08, fp
2a000     1C 4E 85 F1 | 	sub	fp, #28
2a004     18 22 06 F1 | 	add	local03, #24
2a008     11 2D 62 FC | 	wrlong	local08, local03
2a00c                 | LR__4267
2a00c     18 4E 05 F1 | 	add	fp, #24
2a010     A7 12 02 FB | 	rdlong	arg01, fp
2a014     14 4E 85 F1 | 	sub	fp, #20
2a018     A7 22 02 FB | 	rdlong	local03, fp
2a01c     04 4E 85 F1 | 	sub	fp, #4
2a020     18 22 06 F1 | 	add	local03, #24
2a024     11 15 02 FB | 	rdlong	arg02, local03
2a028     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
2a02c     20 4E 05 F1 | 	add	fp, #32
2a030     A7 FA 61 FC | 	wrlong	result1, fp
2a034     20 4E 85 F1 | 	sub	fp, #32
2a038     00 FA 0D F2 | 	cmp	result1, #0 wz
2a03c     1C 00 90 5D |  if_ne	jmp	#LR__4268
2a040     04 4E 05 F1 | 	add	fp, #4
2a044     A7 22 02 FB | 	rdlong	local03, fp
2a048     04 4E 85 F1 | 	sub	fp, #4
2a04c     11 22 06 F1 | 	add	local03, #17
2a050     11 05 48 FC | 	wrbyte	#2, local03
2a054     02 FA 05 F6 | 	mov	result1, #2
2a058     D4 03 90 FD | 	jmp	#LR__4280
2a05c                 | LR__4268
2a05c     20 4E 05 F1 | 	add	fp, #32
2a060     A7 22 02 FB | 	rdlong	local03, fp
2a064     10 4E 05 F1 | 	add	fp, #16
2a068     A7 2C 02 FB | 	rdlong	local08, fp
2a06c     16 23 02 F1 | 	add	local03, local08
2a070     10 4E 85 F1 | 	sub	fp, #16
2a074     A7 22 62 FC | 	wrlong	local03, fp
2a078     14 4E 85 F1 | 	sub	fp, #20
2a07c     A7 22 02 FB | 	rdlong	local03, fp
2a080     09 22 46 F0 | 	shr	local03, #9
2a084     20 4E 05 F1 | 	add	fp, #32
2a088     A7 22 62 FC | 	wrlong	local03, fp
2a08c     2C 4E 85 F1 | 	sub	fp, #44
2a090     01 22 16 F2 | 	cmp	local03, #1 wc
2a094     5C 01 90 CD |  if_b	jmp	#LR__4272
2a098     30 4E 05 F1 | 	add	fp, #48
2a09c     A7 22 02 FB | 	rdlong	local03, fp
2a0a0     04 4E 85 F1 | 	sub	fp, #4
2a0a4     A7 2C 02 FB | 	rdlong	local08, fp
2a0a8     16 23 02 F1 | 	add	local03, local08
2a0ac     14 4E 85 F1 | 	sub	fp, #20
2a0b0     A7 2C 02 FB | 	rdlong	local08, fp
2a0b4     18 4E 85 F1 | 	sub	fp, #24
2a0b8     0A 2C 06 F1 | 	add	local08, #10
2a0bc     16 2D E2 FA | 	rdword	local08, local08
2a0c0     16 23 1A F2 | 	cmp	local03, local08 wcz
2a0c4     28 00 90 ED |  if_be	jmp	#LR__4269
2a0c8     18 4E 05 F1 | 	add	fp, #24
2a0cc     A7 1E 02 FB | 	rdlong	local01, fp
2a0d0     0A 1E 06 F1 | 	add	local01, #10
2a0d4     0F 23 E2 FA | 	rdword	local03, local01
2a0d8     18 4E 05 F1 | 	add	fp, #24
2a0dc     A7 2C 02 FB | 	rdlong	local08, fp
2a0e0     16 23 82 F1 | 	sub	local03, local08
2a0e4     04 4E 85 F1 | 	sub	fp, #4
2a0e8     A7 22 62 FC | 	wrlong	local03, fp
2a0ec     2C 4E 85 F1 | 	sub	fp, #44
2a0f0                 | LR__4269
2a0f0     18 4E 05 F1 | 	add	fp, #24
2a0f4     A7 1E 02 FB | 	rdlong	local01, fp
2a0f8     01 1E 06 F1 | 	add	local01, #1
2a0fc     0F 13 C2 FA | 	rdbyte	arg01, local01
2a100     1C 4E 05 F1 | 	add	fp, #28
2a104     A7 14 02 FB | 	rdlong	arg02, fp
2a108     14 4E 85 F1 | 	sub	fp, #20
2a10c     A7 16 02 FB | 	rdlong	arg03, fp
2a110     0C 4E 05 F1 | 	add	fp, #12
2a114     A7 18 02 FB | 	rdlong	arg04, fp
2a118     2C 4E 85 F1 | 	sub	fp, #44
2a11c     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2a120     00 FA 0D F2 | 	cmp	result1, #0 wz
2a124     1C 00 90 AD |  if_e	jmp	#LR__4270
2a128     04 4E 05 F1 | 	add	fp, #4
2a12c     A7 22 02 FB | 	rdlong	local03, fp
2a130     04 4E 85 F1 | 	sub	fp, #4
2a134     11 22 06 F1 | 	add	local03, #17
2a138     11 03 48 FC | 	wrbyte	#1, local03
2a13c     01 FA 05 F6 | 	mov	result1, #1
2a140     EC 02 90 FD | 	jmp	#LR__4280
2a144                 | LR__4270
2a144     04 4E 05 F1 | 	add	fp, #4
2a148     A7 1E 02 FB | 	rdlong	local01, fp
2a14c     04 4E 85 F1 | 	sub	fp, #4
2a150     10 1E 06 F1 | 	add	local01, #16
2a154     0F 23 C2 FA | 	rdbyte	local03, local01
2a158     80 22 CE F7 | 	test	local03, #128 wz
2a15c     78 00 90 AD |  if_e	jmp	#LR__4271
2a160     04 4E 05 F1 | 	add	fp, #4
2a164     A7 2C 02 FB | 	rdlong	local08, fp
2a168     1C 2C 06 F1 | 	add	local08, #28
2a16c     16 2D 02 FB | 	rdlong	local08, local08
2a170     1C 4E 05 F1 | 	add	fp, #28
2a174     A7 2E 02 FB | 	rdlong	local09, fp
2a178     17 2D 82 F1 | 	sub	local08, local09
2a17c     0C 4E 05 F1 | 	add	fp, #12
2a180     A7 30 02 FB | 	rdlong	local10, fp
2a184     2C 4E 85 F1 | 	sub	fp, #44
2a188     18 33 02 F6 | 	mov	local11, local10
2a18c     19 2D 12 F2 | 	cmp	local08, local11 wc
2a190     44 00 90 3D |  if_ae	jmp	#LR__4271
2a194     34 4E 05 F1 | 	add	fp, #52
2a198     A7 12 02 FB | 	rdlong	arg01, fp
2a19c     30 4E 85 F1 | 	sub	fp, #48
2a1a0     A7 14 02 FB | 	rdlong	arg02, fp
2a1a4     0A 33 02 F6 | 	mov	local11, arg02
2a1a8     1C 32 06 F1 | 	add	local11, #28
2a1ac     19 2F 02 FB | 	rdlong	local09, local11
2a1b0     1C 4E 05 F1 | 	add	fp, #28
2a1b4     A7 26 02 FB | 	rdlong	local05, fp
2a1b8     13 2F 82 F1 | 	sub	local09, local05
2a1bc     09 2E 66 F0 | 	shl	local09, #9
2a1c0     17 33 02 F6 | 	mov	local11, local09
2a1c4     17 13 02 F1 | 	add	arg01, local09
2a1c8     20 4E 85 F1 | 	sub	fp, #32
2a1cc     28 14 06 F1 | 	add	arg02, #40
2a1d0     09 16 C6 F9 | 	decod	arg03, #9
2a1d4     BC 48 BF FD | 	call	#__system____builtin_memmove
2a1d8                 | LR__4271
2a1d8     2C 4E 05 F1 | 	add	fp, #44
2a1dc     A7 22 02 FB | 	rdlong	local03, fp
2a1e0     09 22 66 F0 | 	shl	local03, #9
2a1e4     04 4E 85 F1 | 	sub	fp, #4
2a1e8     A7 22 62 FC | 	wrlong	local03, fp
2a1ec     28 4E 85 F1 | 	sub	fp, #40
2a1f0                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2a1f0                 | ' 				}
2a1f0                 | ' 
2a1f0                 | ' 
2a1f0                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2a1f0                 | ' 				continue;
2a1f0     B4 01 90 FD | 	jmp	#LR__4278
2a1f4                 | LR__4272
2a1f4     04 4E 05 F1 | 	add	fp, #4
2a1f8     A7 22 02 FB | 	rdlong	local03, fp
2a1fc     1C 22 06 F1 | 	add	local03, #28
2a200     11 23 02 FB | 	rdlong	local03, local03
2a204     1C 4E 05 F1 | 	add	fp, #28
2a208     A7 1E 02 FB | 	rdlong	local01, fp
2a20c     20 4E 85 F1 | 	sub	fp, #32
2a210     0F 23 0A F2 | 	cmp	local03, local01 wz
2a214     EC 00 90 AD |  if_e	jmp	#LR__4276
2a218     04 4E 05 F1 | 	add	fp, #4
2a21c     A7 1E 02 FB | 	rdlong	local01, fp
2a220     04 4E 85 F1 | 	sub	fp, #4
2a224     10 1E 06 F1 | 	add	local01, #16
2a228     0F 23 C2 FA | 	rdbyte	local03, local01
2a22c     80 22 CE F7 | 	test	local03, #128 wz
2a230     7C 00 90 AD |  if_e	jmp	#LR__4274
2a234     18 4E 05 F1 | 	add	fp, #24
2a238     A7 1E 02 FB | 	rdlong	local01, fp
2a23c     01 1E 06 F1 | 	add	local01, #1
2a240     0F 13 C2 FA | 	rdbyte	arg01, local01
2a244     14 4E 85 F1 | 	sub	fp, #20
2a248     A7 22 02 FB | 	rdlong	local03, fp
2a24c     11 15 02 F6 | 	mov	arg02, local03
2a250     28 14 06 F1 | 	add	arg02, #40
2a254     04 4E 85 F1 | 	sub	fp, #4
2a258     1C 22 06 F1 | 	add	local03, #28
2a25c     11 17 02 FB | 	rdlong	arg03, local03
2a260     01 18 06 F6 | 	mov	arg04, #1
2a264     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2a268     00 FA 0D F2 | 	cmp	result1, #0 wz
2a26c     1C 00 90 AD |  if_e	jmp	#LR__4273
2a270     04 4E 05 F1 | 	add	fp, #4
2a274     A7 22 02 FB | 	rdlong	local03, fp
2a278     04 4E 85 F1 | 	sub	fp, #4
2a27c     11 22 06 F1 | 	add	local03, #17
2a280     11 03 48 FC | 	wrbyte	#1, local03
2a284     01 FA 05 F6 | 	mov	result1, #1
2a288     A4 01 90 FD | 	jmp	#LR__4280
2a28c                 | LR__4273
2a28c     04 4E 05 F1 | 	add	fp, #4
2a290     A7 32 02 FB | 	rdlong	local11, fp
2a294     19 23 02 F6 | 	mov	local03, local11
2a298     04 4E 85 F1 | 	sub	fp, #4
2a29c     10 32 06 F1 | 	add	local11, #16
2a2a0     19 33 C2 FA | 	rdbyte	local11, local11
2a2a4     7F 32 06 F5 | 	and	local11, #127
2a2a8     10 22 06 F1 | 	add	local03, #16
2a2ac     11 33 42 FC | 	wrbyte	local11, local03
2a2b0                 | LR__4274
2a2b0     18 4E 05 F1 | 	add	fp, #24
2a2b4     A7 1E 02 FB | 	rdlong	local01, fp
2a2b8     01 1E 06 F1 | 	add	local01, #1
2a2bc     0F 13 C2 FA | 	rdbyte	arg01, local01
2a2c0     14 4E 85 F1 | 	sub	fp, #20
2a2c4     A7 14 02 FB | 	rdlong	arg02, fp
2a2c8     28 14 06 F1 | 	add	arg02, #40
2a2cc     1C 4E 05 F1 | 	add	fp, #28
2a2d0     A7 16 02 FB | 	rdlong	arg03, fp
2a2d4     20 4E 85 F1 | 	sub	fp, #32
2a2d8     01 18 06 F6 | 	mov	arg04, #1
2a2dc     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2a2e0     00 FA 0D F2 | 	cmp	result1, #0 wz
2a2e4     1C 00 90 AD |  if_e	jmp	#LR__4275
2a2e8     04 4E 05 F1 | 	add	fp, #4
2a2ec     A7 22 02 FB | 	rdlong	local03, fp
2a2f0     04 4E 85 F1 | 	sub	fp, #4
2a2f4     11 22 06 F1 | 	add	local03, #17
2a2f8     11 03 48 FC | 	wrbyte	#1, local03
2a2fc     01 FA 05 F6 | 	mov	result1, #1
2a300     2C 01 90 FD | 	jmp	#LR__4280
2a304                 | LR__4275
2a304                 | LR__4276
2a304     04 4E 05 F1 | 	add	fp, #4
2a308     A7 22 02 FB | 	rdlong	local03, fp
2a30c     1C 4E 05 F1 | 	add	fp, #28
2a310     A7 32 02 FB | 	rdlong	local11, fp
2a314     20 4E 85 F1 | 	sub	fp, #32
2a318     1C 22 06 F1 | 	add	local03, #28
2a31c     11 33 62 FC | 	wrlong	local11, local03
2a320                 | LR__4277
2a320     04 4E 05 F1 | 	add	fp, #4
2a324     A7 1E 02 FB | 	rdlong	local01, fp
2a328     14 1E 06 F1 | 	add	local01, #20
2a32c     0F 33 02 FB | 	rdlong	local11, local01
2a330     FF 33 06 F5 | 	and	local11, #511
2a334     09 22 C6 F9 | 	decod	local03, #9
2a338     19 23 82 F1 | 	sub	local03, local11
2a33c     24 4E 05 F1 | 	add	fp, #36
2a340     A7 22 62 FC | 	wrlong	local03, fp
2a344     1C 4E 85 F1 | 	sub	fp, #28
2a348     A7 32 02 FB | 	rdlong	local11, fp
2a34c     0C 4E 85 F1 | 	sub	fp, #12
2a350     19 23 1A F2 | 	cmp	local03, local11 wcz
2a354     0C 4E 05 11 |  if_a	add	fp, #12
2a358     A7 22 02 1B |  if_a	rdlong	local03, fp
2a35c     1C 4E 05 11 |  if_a	add	fp, #28
2a360     A7 22 62 1C |  if_a	wrlong	local03, fp
2a364     28 4E 85 11 |  if_a	sub	fp, #40
2a368     34 4E 05 F1 | 	add	fp, #52
2a36c     A7 12 02 FB | 	rdlong	arg01, fp
2a370     30 4E 85 F1 | 	sub	fp, #48
2a374     A7 28 02 FB | 	rdlong	local06, fp
2a378     14 15 02 F6 | 	mov	arg02, local06
2a37c     28 14 06 F1 | 	add	arg02, #40
2a380     14 28 06 F1 | 	add	local06, #20
2a384     14 33 02 FB | 	rdlong	local11, local06
2a388     19 2F 02 F6 | 	mov	local09, local11
2a38c     17 31 02 F6 | 	mov	local10, local09
2a390     FF 31 06 F5 | 	and	local10, #511
2a394     18 15 02 F1 | 	add	arg02, local10
2a398     24 4E 05 F1 | 	add	fp, #36
2a39c     A7 16 02 FB | 	rdlong	arg03, fp
2a3a0     28 4E 85 F1 | 	sub	fp, #40
2a3a4     EC 46 BF FD | 	call	#__system____builtin_memmove
2a3a8                 | LR__4278
2a3a8     0C 4E 05 F1 | 	add	fp, #12
2a3ac     A7 22 02 FB | 	rdlong	local03, fp
2a3b0     1C 4E 05 F1 | 	add	fp, #28
2a3b4     A7 2C 02 FB | 	rdlong	local08, fp
2a3b8     16 23 82 F1 | 	sub	local03, local08
2a3bc     1C 4E 85 F1 | 	sub	fp, #28
2a3c0     A7 22 62 FC | 	wrlong	local03, fp
2a3c4     04 4E 05 F1 | 	add	fp, #4
2a3c8     A7 1E 02 FB | 	rdlong	local01, fp
2a3cc     0F 2B 02 FB | 	rdlong	local07, local01
2a3d0     18 4E 05 F1 | 	add	fp, #24
2a3d4     A7 2C 02 FB | 	rdlong	local08, fp
2a3d8     16 2B 02 F1 | 	add	local07, local08
2a3dc     0F 2B 62 FC | 	wrlong	local07, local01
2a3e0     0C 4E 05 F1 | 	add	fp, #12
2a3e4     A7 22 02 FB | 	rdlong	local03, fp
2a3e8     0C 4E 85 F1 | 	sub	fp, #12
2a3ec     A7 34 02 FB | 	rdlong	local12, fp
2a3f0     1A 23 02 F1 | 	add	local03, local12
2a3f4     0C 4E 05 F1 | 	add	fp, #12
2a3f8     A7 22 62 FC | 	wrlong	local03, fp
2a3fc     30 4E 85 F1 | 	sub	fp, #48
2a400     A7 36 02 FB | 	rdlong	local13, fp
2a404     1B 23 02 F6 | 	mov	local03, local13
2a408     14 36 06 F1 | 	add	local13, #20
2a40c     1B 39 02 FB | 	rdlong	local14, local13
2a410     24 4E 05 F1 | 	add	fp, #36
2a414     A7 28 02 FB | 	rdlong	local06, fp
2a418     28 4E 85 F1 | 	sub	fp, #40
2a41c     14 39 02 F1 | 	add	local14, local06
2a420     14 22 06 F1 | 	add	local03, #20
2a424     11 39 62 FC | 	wrlong	local14, local03
2a428     84 FA 9F FD | 	jmp	#LR__4262
2a42c                 | LR__4279
2a42c                 | ' 
2a42c                 | ' 
2a42c                 | ' 
2a42c                 | ' 
2a42c                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2a42c                 | ' 
2a42c                 | ' 	}
2a42c                 | ' 
2a42c                 | ' 	return FR_OK ;
2a42c     00 FA 05 F6 | 	mov	result1, #0
2a430                 | LR__4280
2a430     A7 F0 03 F6 | 	mov	ptra, fp
2a434     B2 00 A0 FD | 	call	#popregs_
2a438                 | _fatfs_cc_f_read_ret
2a438     2D 00 64 FD | 	ret
2a43c                 | 
2a43c                 | _fatfs_cc_f_write
2a43c     15 4A 05 F6 | 	mov	COUNT_, #21
2a440     A8 00 A0 FD | 	call	#pushregs_
2a444     34 F0 07 F1 | 	add	ptra, #52
2a448     04 4E 05 F1 | 	add	fp, #4
2a44c     A7 12 62 FC | 	wrlong	arg01, fp
2a450     04 4E 05 F1 | 	add	fp, #4
2a454     A7 14 62 FC | 	wrlong	arg02, fp
2a458     04 4E 05 F1 | 	add	fp, #4
2a45c     A7 16 62 FC | 	wrlong	arg03, fp
2a460     04 4E 05 F1 | 	add	fp, #4
2a464     A7 18 62 FC | 	wrlong	arg04, fp
2a468     08 4E 85 F1 | 	sub	fp, #8
2a46c     A7 FA 01 FB | 	rdlong	result1, fp
2a470     28 4E 05 F1 | 	add	fp, #40
2a474     A7 FA 61 FC | 	wrlong	result1, fp
2a478     20 4E 85 F1 | 	sub	fp, #32
2a47c     A7 FA 01 FB | 	rdlong	result1, fp
2a480     FD 00 68 FC | 	wrlong	#0, result1
2a484     0C 4E 85 F1 | 	sub	fp, #12
2a488     A7 12 02 FB | 	rdlong	arg01, fp
2a48c     14 4E 05 F1 | 	add	fp, #20
2a490     A7 14 02 F6 | 	mov	arg02, fp
2a494     18 4E 85 F1 | 	sub	fp, #24
2a498     88 F0 BF FD | 	call	#_fatfs_cc_validate
2a49c     14 4E 05 F1 | 	add	fp, #20
2a4a0     A7 FA 61 FC | 	wrlong	result1, fp
2a4a4     00 FA 4D F2 | 	cmps	result1, #0 wz
2a4a8     14 4E 85 F1 | 	sub	fp, #20
2a4ac     20 00 90 5D |  if_ne	jmp	#LR__4290
2a4b0     04 4E 05 F1 | 	add	fp, #4
2a4b4     A7 14 02 FB | 	rdlong	arg02, fp
2a4b8     11 14 06 F1 | 	add	arg02, #17
2a4bc     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2a4c0     10 4E 05 F1 | 	add	fp, #16
2a4c4     A7 14 62 FC | 	wrlong	arg02, fp
2a4c8     14 4E 85 F1 | 	sub	fp, #20
2a4cc     10 00 90 AD |  if_e	jmp	#LR__4291
2a4d0                 | LR__4290
2a4d0     14 4E 05 F1 | 	add	fp, #20
2a4d4     A7 FA 01 FB | 	rdlong	result1, fp
2a4d8     14 4E 85 F1 | 	sub	fp, #20
2a4dc     44 07 90 FD | 	jmp	#LR__4313
2a4e0                 | LR__4291
2a4e0     04 4E 05 F1 | 	add	fp, #4
2a4e4     A7 14 02 FB | 	rdlong	arg02, fp
2a4e8     04 4E 85 F1 | 	sub	fp, #4
2a4ec     10 14 06 F1 | 	add	arg02, #16
2a4f0     0A 15 C2 FA | 	rdbyte	arg02, arg02
2a4f4     02 14 CE F7 | 	test	arg02, #2 wz
2a4f8     07 FA 05 A6 |  if_e	mov	result1, #7
2a4fc     24 07 90 AD |  if_e	jmp	#LR__4313
2a500     04 4E 05 F1 | 	add	fp, #4
2a504     A7 14 02 FB | 	rdlong	arg02, fp
2a508     0A 13 02 F6 | 	mov	arg01, arg02
2a50c     14 12 06 F1 | 	add	arg01, #20
2a510     09 13 02 FB | 	rdlong	arg01, arg01
2a514     08 4E 05 F1 | 	add	fp, #8
2a518     A7 FA 01 FB | 	rdlong	result1, fp
2a51c     FD 12 02 F1 | 	add	arg01, result1
2a520     0C 4E 85 F1 | 	sub	fp, #12
2a524     14 14 06 F1 | 	add	arg02, #20
2a528     0A FB 01 FB | 	rdlong	result1, arg02
2a52c     FD 12 12 F2 | 	cmp	arg01, result1 wc
2a530     24 00 90 3D |  if_ae	jmp	#LR__4292
2a534     04 4E 05 F1 | 	add	fp, #4
2a538     A7 14 02 FB | 	rdlong	arg02, fp
2a53c     01 FA 65 F6 | 	neg	result1, #1
2a540     14 14 06 F1 | 	add	arg02, #20
2a544     0A 15 02 FB | 	rdlong	arg02, arg02
2a548     0A FB 81 F1 | 	sub	result1, arg02
2a54c     08 4E 05 F1 | 	add	fp, #8
2a550     A7 FA 61 FC | 	wrlong	result1, fp
2a554     0C 4E 85 F1 | 	sub	fp, #12
2a558                 | LR__4292
2a558                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2a558                 | ' 	}
2a558                 | ' 
2a558                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2a558                 | LR__4293
2a558     0C 4E 05 F1 | 	add	fp, #12
2a55c     A7 FA 01 FB | 	rdlong	result1, fp
2a560     0C 4E 85 F1 | 	sub	fp, #12
2a564     01 FA 15 F2 | 	cmp	result1, #1 wc
2a568     90 06 90 CD |  if_b	jmp	#LR__4312
2a56c     04 4E 05 F1 | 	add	fp, #4
2a570     A7 FA 01 FB | 	rdlong	result1, fp
2a574     04 4E 85 F1 | 	sub	fp, #4
2a578     14 FA 05 F1 | 	add	result1, #20
2a57c     FD FA 01 FB | 	rdlong	result1, result1
2a580     FF FB CD F7 | 	test	result1, #511 wz
2a584     D8 04 90 5D |  if_ne	jmp	#LR__4308
2a588     04 4E 05 F1 | 	add	fp, #4
2a58c     A7 FA 01 FB | 	rdlong	result1, fp
2a590     14 FA 05 F1 | 	add	result1, #20
2a594     FD FA 01 FB | 	rdlong	result1, result1
2a598     09 FA 45 F0 | 	shr	result1, #9
2a59c     14 4E 05 F1 | 	add	fp, #20
2a5a0     A7 14 02 FB | 	rdlong	arg02, fp
2a5a4     0A 14 06 F1 | 	add	arg02, #10
2a5a8     0A 19 E2 FA | 	rdword	arg04, arg02
2a5ac     0C 15 32 F9 | 	getword	arg02, arg04, #0
2a5b0     01 14 86 F1 | 	sub	arg02, #1
2a5b4     0A FB 09 F5 | 	and	result1, arg02 wz
2a5b8     14 4E 05 F1 | 	add	fp, #20
2a5bc     A7 FA 61 FC | 	wrlong	result1, fp
2a5c0     2C 4E 85 F1 | 	sub	fp, #44
2a5c4     44 01 90 5D |  if_ne	jmp	#LR__4299
2a5c8     04 4E 05 F1 | 	add	fp, #4
2a5cc     A7 FA 01 FB | 	rdlong	result1, fp
2a5d0     04 4E 85 F1 | 	sub	fp, #4
2a5d4     14 FA 05 F1 | 	add	result1, #20
2a5d8     FD 14 0A FB | 	rdlong	arg02, result1 wz
2a5dc     44 00 90 5D |  if_ne	jmp	#LR__4294
2a5e0     04 4E 05 F1 | 	add	fp, #4
2a5e4     A7 14 02 FB | 	rdlong	arg02, fp
2a5e8     08 14 06 F1 | 	add	arg02, #8
2a5ec     0A 15 0A FB | 	rdlong	arg02, arg02 wz
2a5f0     18 4E 05 F1 | 	add	fp, #24
2a5f4     A7 14 62 FC | 	wrlong	arg02, fp
2a5f8     1C 4E 85 F1 | 	sub	fp, #28
2a5fc     4C 00 90 5D |  if_ne	jmp	#LR__4295
2a600     04 4E 05 F1 | 	add	fp, #4
2a604     A7 12 02 FB | 	rdlong	arg01, fp
2a608     04 4E 85 F1 | 	sub	fp, #4
2a60c     00 14 06 F6 | 	mov	arg02, #0
2a610     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
2a614     1C 4E 05 F1 | 	add	fp, #28
2a618     A7 FA 61 FC | 	wrlong	result1, fp
2a61c     1C 4E 85 F1 | 	sub	fp, #28
2a620     28 00 90 FD | 	jmp	#LR__4295
2a624                 | LR__4294
2a624     04 4E 05 F1 | 	add	fp, #4
2a628     A7 18 02 FB | 	rdlong	arg04, fp
2a62c     0C 13 02 F6 | 	mov	arg01, arg04
2a630     04 4E 85 F1 | 	sub	fp, #4
2a634     18 18 06 F1 | 	add	arg04, #24
2a638     0C 15 02 FB | 	rdlong	arg02, arg04
2a63c     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2a640     1C 4E 05 F1 | 	add	fp, #28
2a644     A7 FA 61 FC | 	wrlong	result1, fp
2a648     1C 4E 85 F1 | 	sub	fp, #28
2a64c                 | LR__4295
2a64c     1C 4E 05 F1 | 	add	fp, #28
2a650     A7 FA 09 FB | 	rdlong	result1, fp wz
2a654     1C 4E 85 F1 | 	sub	fp, #28
2a658     A0 05 90 AD |  if_e	jmp	#LR__4312
2a65c     1C 4E 05 F1 | 	add	fp, #28
2a660     A7 FA 01 FB | 	rdlong	result1, fp
2a664     1C 4E 85 F1 | 	sub	fp, #28
2a668     01 FA 0D F2 | 	cmp	result1, #1 wz
2a66c     1C 00 90 5D |  if_ne	jmp	#LR__4296
2a670     04 4E 05 F1 | 	add	fp, #4
2a674     A7 FA 01 FB | 	rdlong	result1, fp
2a678     04 4E 85 F1 | 	sub	fp, #4
2a67c     11 FA 05 F1 | 	add	result1, #17
2a680     FD 04 48 FC | 	wrbyte	#2, result1
2a684     02 FA 05 F6 | 	mov	result1, #2
2a688     98 05 90 FD | 	jmp	#LR__4313
2a68c                 | LR__4296
2a68c     1C 4E 05 F1 | 	add	fp, #28
2a690     A7 FA 01 FB | 	rdlong	result1, fp
2a694     1C 4E 85 F1 | 	sub	fp, #28
2a698     FF FF 7F FF 
2a69c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2a6a0     1C 00 90 5D |  if_ne	jmp	#LR__4297
2a6a4     04 4E 05 F1 | 	add	fp, #4
2a6a8     A7 FA 01 FB | 	rdlong	result1, fp
2a6ac     04 4E 85 F1 | 	sub	fp, #4
2a6b0     11 FA 05 F1 | 	add	result1, #17
2a6b4     FD 02 48 FC | 	wrbyte	#1, result1
2a6b8     01 FA 05 F6 | 	mov	result1, #1
2a6bc     64 05 90 FD | 	jmp	#LR__4313
2a6c0                 | LR__4297
2a6c0     04 4E 05 F1 | 	add	fp, #4
2a6c4     A7 FA 01 FB | 	rdlong	result1, fp
2a6c8     18 4E 05 F1 | 	add	fp, #24
2a6cc     A7 18 02 FB | 	rdlong	arg04, fp
2a6d0     18 FA 05 F1 | 	add	result1, #24
2a6d4     FD 18 62 FC | 	wrlong	arg04, result1
2a6d8     18 4E 85 F1 | 	sub	fp, #24
2a6dc     A7 FA 01 FB | 	rdlong	result1, fp
2a6e0     04 4E 85 F1 | 	sub	fp, #4
2a6e4     08 FA 05 F1 | 	add	result1, #8
2a6e8     FD FA 09 FB | 	rdlong	result1, result1 wz
2a6ec     1C 00 90 5D |  if_ne	jmp	#LR__4298
2a6f0     04 4E 05 F1 | 	add	fp, #4
2a6f4     A7 18 02 FB | 	rdlong	arg04, fp
2a6f8     18 4E 05 F1 | 	add	fp, #24
2a6fc     A7 FA 01 FB | 	rdlong	result1, fp
2a700     1C 4E 85 F1 | 	sub	fp, #28
2a704     08 18 06 F1 | 	add	arg04, #8
2a708     0C FB 61 FC | 	wrlong	result1, arg04
2a70c                 | LR__4298
2a70c                 | LR__4299
2a70c     04 4E 05 F1 | 	add	fp, #4
2a710     A7 18 02 FB | 	rdlong	arg04, fp
2a714     04 4E 85 F1 | 	sub	fp, #4
2a718     10 18 06 F1 | 	add	arg04, #16
2a71c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2a720     80 18 CE F7 | 	test	arg04, #128 wz
2a724     7C 00 90 AD |  if_e	jmp	#LR__4301
2a728     18 4E 05 F1 | 	add	fp, #24
2a72c     A7 18 02 FB | 	rdlong	arg04, fp
2a730     01 18 06 F1 | 	add	arg04, #1
2a734     0C 13 C2 FA | 	rdbyte	arg01, arg04
2a738     14 4E 85 F1 | 	sub	fp, #20
2a73c     A7 18 02 FB | 	rdlong	arg04, fp
2a740     0C 15 02 F6 | 	mov	arg02, arg04
2a744     28 14 06 F1 | 	add	arg02, #40
2a748     04 4E 85 F1 | 	sub	fp, #4
2a74c     1C 18 06 F1 | 	add	arg04, #28
2a750     0C 17 02 FB | 	rdlong	arg03, arg04
2a754     01 18 06 F6 | 	mov	arg04, #1
2a758     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2a75c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a760     1C 00 90 AD |  if_e	jmp	#LR__4300
2a764     04 4E 05 F1 | 	add	fp, #4
2a768     A7 FA 01 FB | 	rdlong	result1, fp
2a76c     04 4E 85 F1 | 	sub	fp, #4
2a770     11 FA 05 F1 | 	add	result1, #17
2a774     FD 02 48 FC | 	wrbyte	#1, result1
2a778     01 FA 05 F6 | 	mov	result1, #1
2a77c     A4 04 90 FD | 	jmp	#LR__4313
2a780                 | LR__4300
2a780     04 4E 05 F1 | 	add	fp, #4
2a784     A7 18 02 FB | 	rdlong	arg04, fp
2a788     0C FB 01 F6 | 	mov	result1, arg04
2a78c     04 4E 85 F1 | 	sub	fp, #4
2a790     10 18 06 F1 | 	add	arg04, #16
2a794     0C 19 C2 FA | 	rdbyte	arg04, arg04
2a798     7F 18 06 F5 | 	and	arg04, #127
2a79c     10 FA 05 F1 | 	add	result1, #16
2a7a0     FD 18 42 FC | 	wrbyte	arg04, result1
2a7a4                 | LR__4301
2a7a4     18 4E 05 F1 | 	add	fp, #24
2a7a8     A7 12 02 FB | 	rdlong	arg01, fp
2a7ac     14 4E 85 F1 | 	sub	fp, #20
2a7b0     A7 14 02 FB | 	rdlong	arg02, fp
2a7b4     04 4E 85 F1 | 	sub	fp, #4
2a7b8     18 14 06 F1 | 	add	arg02, #24
2a7bc     0A 15 02 FB | 	rdlong	arg02, arg02
2a7c0     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2a7c4     20 4E 05 F1 | 	add	fp, #32
2a7c8     A7 FA 61 FC | 	wrlong	result1, fp
2a7cc     20 4E 85 F1 | 	sub	fp, #32
2a7d0     00 FA 0D F2 | 	cmp	result1, #0 wz
2a7d4     1C 00 90 5D |  if_ne	jmp	#LR__4302
2a7d8     04 4E 05 F1 | 	add	fp, #4
2a7dc     A7 FA 01 FB | 	rdlong	result1, fp
2a7e0     04 4E 85 F1 | 	sub	fp, #4
2a7e4     11 FA 05 F1 | 	add	result1, #17
2a7e8     FD 04 48 FC | 	wrbyte	#2, result1
2a7ec     02 FA 05 F6 | 	mov	result1, #2
2a7f0     30 04 90 FD | 	jmp	#LR__4313
2a7f4                 | LR__4302
2a7f4     20 4E 05 F1 | 	add	fp, #32
2a7f8     A7 FA 01 FB | 	rdlong	result1, fp
2a7fc     0C 4E 05 F1 | 	add	fp, #12
2a800     A7 1E 02 FB | 	rdlong	local01, fp
2a804     0F FB 01 F1 | 	add	result1, local01
2a808     0C 4E 85 F1 | 	sub	fp, #12
2a80c     A7 FA 61 FC | 	wrlong	result1, fp
2a810     14 4E 85 F1 | 	sub	fp, #20
2a814     A7 FA 01 FB | 	rdlong	result1, fp
2a818     09 FA 45 F0 | 	shr	result1, #9
2a81c     1C 4E 05 F1 | 	add	fp, #28
2a820     A7 FA 61 FC | 	wrlong	result1, fp
2a824     28 4E 85 F1 | 	sub	fp, #40
2a828     01 FA 15 F2 | 	cmp	result1, #1 wc
2a82c     60 01 90 CD |  if_b	jmp	#LR__4306
2a830     2C 4E 05 F1 | 	add	fp, #44
2a834     A7 FA 01 FB | 	rdlong	result1, fp
2a838     04 4E 85 F1 | 	sub	fp, #4
2a83c     A7 18 02 FB | 	rdlong	arg04, fp
2a840     0C FB 01 F1 | 	add	result1, arg04
2a844     10 4E 85 F1 | 	sub	fp, #16
2a848     A7 18 02 FB | 	rdlong	arg04, fp
2a84c     18 4E 85 F1 | 	sub	fp, #24
2a850     0A 18 06 F1 | 	add	arg04, #10
2a854     0C 19 E2 FA | 	rdword	arg04, arg04
2a858     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2a85c     28 00 90 ED |  if_be	jmp	#LR__4303
2a860     18 4E 05 F1 | 	add	fp, #24
2a864     A7 FA 01 FB | 	rdlong	result1, fp
2a868     0A FA 05 F1 | 	add	result1, #10
2a86c     FD FA E1 FA | 	rdword	result1, result1
2a870     14 4E 05 F1 | 	add	fp, #20
2a874     A7 18 02 FB | 	rdlong	arg04, fp
2a878     0C FB 81 F1 | 	sub	result1, arg04
2a87c     04 4E 85 F1 | 	sub	fp, #4
2a880     A7 FA 61 FC | 	wrlong	result1, fp
2a884     28 4E 85 F1 | 	sub	fp, #40
2a888                 | LR__4303
2a888     18 4E 05 F1 | 	add	fp, #24
2a88c     A7 18 02 FB | 	rdlong	arg04, fp
2a890     01 18 06 F1 | 	add	arg04, #1
2a894     0C 13 C2 FA | 	rdbyte	arg01, arg04
2a898     18 4E 05 F1 | 	add	fp, #24
2a89c     A7 14 02 FB | 	rdlong	arg02, fp
2a8a0     10 4E 85 F1 | 	sub	fp, #16
2a8a4     A7 16 02 FB | 	rdlong	arg03, fp
2a8a8     08 4E 05 F1 | 	add	fp, #8
2a8ac     A7 18 02 FB | 	rdlong	arg04, fp
2a8b0     28 4E 85 F1 | 	sub	fp, #40
2a8b4     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2a8b8     00 FA 0D F2 | 	cmp	result1, #0 wz
2a8bc     1C 00 90 AD |  if_e	jmp	#LR__4304
2a8c0     04 4E 05 F1 | 	add	fp, #4
2a8c4     A7 1E 02 FB | 	rdlong	local01, fp
2a8c8     04 4E 85 F1 | 	sub	fp, #4
2a8cc     11 1E 06 F1 | 	add	local01, #17
2a8d0     0F 03 48 FC | 	wrbyte	#1, local01
2a8d4     01 FA 05 F6 | 	mov	result1, #1
2a8d8     48 03 90 FD | 	jmp	#LR__4313
2a8dc                 | LR__4304
2a8dc     04 4E 05 F1 | 	add	fp, #4
2a8e0     A7 FA 01 FB | 	rdlong	result1, fp
2a8e4     1C FA 05 F1 | 	add	result1, #28
2a8e8     FD FA 01 FB | 	rdlong	result1, result1
2a8ec     1C 4E 05 F1 | 	add	fp, #28
2a8f0     A7 20 02 FB | 	rdlong	local02, fp
2a8f4     10 FB 81 F1 | 	sub	result1, local02
2a8f8     08 4E 05 F1 | 	add	fp, #8
2a8fc     A7 18 02 FB | 	rdlong	arg04, fp
2a900     28 4E 85 F1 | 	sub	fp, #40
2a904     0C FB 11 F2 | 	cmp	result1, arg04 wc
2a908     68 00 90 3D |  if_ae	jmp	#LR__4305
2a90c     04 4E 05 F1 | 	add	fp, #4
2a910     A7 12 02 FB | 	rdlong	arg01, fp
2a914     28 12 06 F1 | 	add	arg01, #40
2a918     2C 4E 05 F1 | 	add	fp, #44
2a91c     A7 14 02 FB | 	rdlong	arg02, fp
2a920     2C 4E 85 F1 | 	sub	fp, #44
2a924     A7 FA 01 FB | 	rdlong	result1, fp
2a928     1C FA 05 F1 | 	add	result1, #28
2a92c     FD 22 02 FB | 	rdlong	local03, result1
2a930     1C 4E 05 F1 | 	add	fp, #28
2a934     A7 18 02 FB | 	rdlong	arg04, fp
2a938     20 4E 85 F1 | 	sub	fp, #32
2a93c     0C 23 82 F1 | 	sub	local03, arg04
2a940     09 22 66 F0 | 	shl	local03, #9
2a944     11 15 02 F1 | 	add	arg02, local03
2a948     09 16 C6 F9 | 	decod	arg03, #9
2a94c     44 41 BF FD | 	call	#__system____builtin_memmove
2a950     04 4E 05 F1 | 	add	fp, #4
2a954     A7 18 02 FB | 	rdlong	arg04, fp
2a958     0C FB 01 F6 | 	mov	result1, arg04
2a95c     04 4E 85 F1 | 	sub	fp, #4
2a960     10 18 06 F1 | 	add	arg04, #16
2a964     0C 19 C2 FA | 	rdbyte	arg04, arg04
2a968     7F 18 06 F5 | 	and	arg04, #127
2a96c     10 FA 05 F1 | 	add	result1, #16
2a970     FD 18 42 FC | 	wrbyte	arg04, result1
2a974                 | LR__4305
2a974     28 4E 05 F1 | 	add	fp, #40
2a978     A7 FA 01 FB | 	rdlong	result1, fp
2a97c     09 FA 65 F0 | 	shl	result1, #9
2a980     04 4E 85 F1 | 	sub	fp, #4
2a984     A7 FA 61 FC | 	wrlong	result1, fp
2a988     24 4E 85 F1 | 	sub	fp, #36
2a98c                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2a98c                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2a98c                 | ' 				}
2a98c                 | ' 
2a98c                 | ' 
2a98c                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2a98c                 | ' 				continue;
2a98c     74 01 90 FD | 	jmp	#LR__4309
2a990                 | LR__4306
2a990     04 4E 05 F1 | 	add	fp, #4
2a994     A7 20 02 FB | 	rdlong	local02, fp
2a998     1C 20 06 F1 | 	add	local02, #28
2a99c     10 FB 01 FB | 	rdlong	result1, local02
2a9a0     1C 4E 05 F1 | 	add	fp, #28
2a9a4     A7 20 02 FB | 	rdlong	local02, fp
2a9a8     20 4E 85 F1 | 	sub	fp, #32
2a9ac     10 FB 09 F2 | 	cmp	result1, local02 wz
2a9b0     90 00 90 AD |  if_e	jmp	#LR__4307
2a9b4     04 4E 05 F1 | 	add	fp, #4
2a9b8     A7 FA 01 FB | 	rdlong	result1, fp
2a9bc     FD 22 02 F6 | 	mov	local03, result1
2a9c0     04 4E 85 F1 | 	sub	fp, #4
2a9c4     14 22 06 F1 | 	add	local03, #20
2a9c8     11 23 02 FB | 	rdlong	local03, local03
2a9cc     0C FA 05 F1 | 	add	result1, #12
2a9d0     FD 24 02 FB | 	rdlong	local04, result1
2a9d4     12 27 02 F6 | 	mov	local05, local04
2a9d8     13 23 12 F2 | 	cmp	local03, local05 wc
2a9dc     64 00 90 3D |  if_ae	jmp	#LR__4307
2a9e0     18 4E 05 F1 | 	add	fp, #24
2a9e4     A7 18 02 FB | 	rdlong	arg04, fp
2a9e8     01 18 06 F1 | 	add	arg04, #1
2a9ec     0C 13 C2 FA | 	rdbyte	arg01, arg04
2a9f0     14 4E 85 F1 | 	sub	fp, #20
2a9f4     A7 28 02 FB | 	rdlong	local06, fp
2a9f8     28 28 06 F1 | 	add	local06, #40
2a9fc     14 2B 02 F6 | 	mov	local07, local06
2aa00     1C 4E 05 F1 | 	add	fp, #28
2aa04     A7 2C 02 FB | 	rdlong	local08, fp
2aa08     20 4E 85 F1 | 	sub	fp, #32
2aa0c     01 2E 06 F6 | 	mov	local09, #1
2aa10     15 15 02 F6 | 	mov	arg02, local07
2aa14     16 17 02 F6 | 	mov	arg03, local08
2aa18     01 18 06 F6 | 	mov	arg04, #1
2aa1c     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2aa20     FD 30 0A F6 | 	mov	local10, result1 wz
2aa24     1C 00 90 AD |  if_e	jmp	#LR__4307
2aa28     04 4E 05 F1 | 	add	fp, #4
2aa2c     A7 30 02 FB | 	rdlong	local10, fp
2aa30     04 4E 85 F1 | 	sub	fp, #4
2aa34     11 30 06 F1 | 	add	local10, #17
2aa38     18 03 48 FC | 	wrbyte	#1, local10
2aa3c                 | ' 				fp->fptr < fp->obj.objsize &&
2aa3c                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2aa3c                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2aa3c     01 FA 05 F6 | 	mov	result1, #1
2aa40     E0 01 90 FD | 	jmp	#LR__4313
2aa44                 | LR__4307
2aa44     04 4E 05 F1 | 	add	fp, #4
2aa48     A7 18 02 FB | 	rdlong	arg04, fp
2aa4c     1C 4E 05 F1 | 	add	fp, #28
2aa50     A7 FA 01 FB | 	rdlong	result1, fp
2aa54     20 4E 85 F1 | 	sub	fp, #32
2aa58     1C 18 06 F1 | 	add	arg04, #28
2aa5c     0C FB 61 FC | 	wrlong	result1, arg04
2aa60                 | LR__4308
2aa60     04 4E 05 F1 | 	add	fp, #4
2aa64     A7 FA 01 FB | 	rdlong	result1, fp
2aa68     14 FA 05 F1 | 	add	result1, #20
2aa6c     FD FA 01 FB | 	rdlong	result1, result1
2aa70     FF FB 05 F5 | 	and	result1, #511
2aa74     09 32 C6 F9 | 	decod	local11, #9
2aa78     FD 32 82 F1 | 	sub	local11, result1
2aa7c     20 4E 05 F1 | 	add	fp, #32
2aa80     A7 32 62 FC | 	wrlong	local11, fp
2aa84     18 4E 85 F1 | 	sub	fp, #24
2aa88     A7 FA 01 FB | 	rdlong	result1, fp
2aa8c     0C 4E 85 F1 | 	sub	fp, #12
2aa90     FD 32 1A F2 | 	cmp	local11, result1 wcz
2aa94     0C 4E 05 11 |  if_a	add	fp, #12
2aa98     A7 32 02 1B |  if_a	rdlong	local11, fp
2aa9c     18 4E 05 11 |  if_a	add	fp, #24
2aaa0     A7 32 62 1C |  if_a	wrlong	local11, fp
2aaa4     24 4E 85 11 |  if_a	sub	fp, #36
2aaa8     04 4E 05 F1 | 	add	fp, #4
2aaac     A7 32 02 FB | 	rdlong	local11, fp
2aab0     19 13 02 F6 | 	mov	arg01, local11
2aab4     28 12 06 F1 | 	add	arg01, #40
2aab8     14 32 06 F1 | 	add	local11, #20
2aabc     19 33 02 FB | 	rdlong	local11, local11
2aac0     FF 33 06 F5 | 	and	local11, #511
2aac4     19 13 02 F1 | 	add	arg01, local11
2aac8     2C 4E 05 F1 | 	add	fp, #44
2aacc     A7 14 02 FB | 	rdlong	arg02, fp
2aad0     0C 4E 85 F1 | 	sub	fp, #12
2aad4     A7 16 02 FB | 	rdlong	arg03, fp
2aad8     24 4E 85 F1 | 	sub	fp, #36
2aadc     B4 3F BF FD | 	call	#__system____builtin_memmove
2aae0     04 4E 05 F1 | 	add	fp, #4
2aae4     A7 FA 01 FB | 	rdlong	result1, fp
2aae8     FD 32 02 F6 | 	mov	local11, result1
2aaec     04 4E 85 F1 | 	sub	fp, #4
2aaf0     10 FA 05 F1 | 	add	result1, #16
2aaf4     FD FA C1 FA | 	rdbyte	result1, result1
2aaf8     80 FA 45 F5 | 	or	result1, #128
2aafc     10 32 06 F1 | 	add	local11, #16
2ab00     19 FB 41 FC | 	wrbyte	result1, local11
2ab04                 | LR__4309
2ab04     0C 4E 05 F1 | 	add	fp, #12
2ab08     A7 32 02 FB | 	rdlong	local11, fp
2ab0c     18 4E 05 F1 | 	add	fp, #24
2ab10     A7 FA 01 FB | 	rdlong	result1, fp
2ab14     FD 32 82 F1 | 	sub	local11, result1
2ab18     18 4E 85 F1 | 	sub	fp, #24
2ab1c     A7 32 62 FC | 	wrlong	local11, fp
2ab20     04 4E 05 F1 | 	add	fp, #4
2ab24     A7 34 02 FB | 	rdlong	local12, fp
2ab28     1A 33 02 FB | 	rdlong	local11, local12
2ab2c     14 4E 05 F1 | 	add	fp, #20
2ab30     A7 36 02 FB | 	rdlong	local13, fp
2ab34     1B 33 02 F1 | 	add	local11, local13
2ab38     1A 33 62 FC | 	wrlong	local11, local12
2ab3c     0C 4E 05 F1 | 	add	fp, #12
2ab40     A7 32 02 FB | 	rdlong	local11, fp
2ab44     0C 4E 85 F1 | 	sub	fp, #12
2ab48     A7 38 02 FB | 	rdlong	local14, fp
2ab4c     1C 33 02 F1 | 	add	local11, local14
2ab50     0C 4E 05 F1 | 	add	fp, #12
2ab54     A7 32 62 FC | 	wrlong	local11, fp
2ab58     2C 4E 85 F1 | 	sub	fp, #44
2ab5c     A7 3A 02 FB | 	rdlong	local15, fp
2ab60     1D 33 02 F6 | 	mov	local11, local15
2ab64     14 3A 06 F1 | 	add	local15, #20
2ab68     1D 3B 02 FB | 	rdlong	local15, local15
2ab6c     20 4E 05 F1 | 	add	fp, #32
2ab70     A7 3C 02 FB | 	rdlong	local16, fp
2ab74     1E 3B 02 F1 | 	add	local15, local16
2ab78     14 32 06 F1 | 	add	local11, #20
2ab7c     19 3B 62 FC | 	wrlong	local15, local11
2ab80     20 4E 85 F1 | 	sub	fp, #32
2ab84     A7 3E 02 FB | 	rdlong	local17, fp
2ab88     1F 33 02 F6 | 	mov	local11, local17
2ab8c     1F 41 02 F6 | 	mov	local18, local17
2ab90     04 4E 85 F1 | 	sub	fp, #4
2ab94     14 3E 06 F1 | 	add	local17, #20
2ab98     1F 43 02 FB | 	rdlong	local19, local17
2ab9c     0C 40 06 F1 | 	add	local18, #12
2aba0     20 45 02 FB | 	rdlong	local20, local18
2aba4     22 43 1A F2 | 	cmp	local19, local20 wcz
2aba8     24 00 90 ED |  if_be	jmp	#LR__4310
2abac     04 4E 05 F1 | 	add	fp, #4
2abb0     A7 26 02 FB | 	rdlong	local05, fp
2abb4     04 4E 85 F1 | 	sub	fp, #4
2abb8     13 23 02 F6 | 	mov	local03, local05
2abbc     14 22 06 F1 | 	add	local03, #20
2abc0     11 25 02 FB | 	rdlong	local04, local03
2abc4     14 22 86 F1 | 	sub	local03, #20
2abc8     12 47 02 F6 | 	mov	local21, local04
2abcc     20 00 90 FD | 	jmp	#LR__4311
2abd0                 | LR__4310
2abd0     04 4E 05 F1 | 	add	fp, #4
2abd4     A7 2A 02 FB | 	rdlong	local07, fp
2abd8     04 4E 85 F1 | 	sub	fp, #4
2abdc     15 31 02 F6 | 	mov	local10, local07
2abe0     0C 30 06 F1 | 	add	local10, #12
2abe4     18 2D 02 FB | 	rdlong	local08, local10
2abe8     0C 30 86 F1 | 	sub	local10, #12
2abec     16 47 02 F6 | 	mov	local21, local08
2abf0                 | LR__4311
2abf0     0C 32 06 F1 | 	add	local11, #12
2abf4     19 47 62 FC | 	wrlong	local21, local11
2abf8     5C F9 9F FD | 	jmp	#LR__4293
2abfc                 | LR__4312
2abfc     04 4E 05 F1 | 	add	fp, #4
2ac00     A7 34 02 FB | 	rdlong	local12, fp
2ac04     1A 1F 02 F6 | 	mov	local01, local12
2ac08     04 4E 85 F1 | 	sub	fp, #4
2ac0c     10 34 06 F1 | 	add	local12, #16
2ac10     1A 33 C2 FA | 	rdbyte	local11, local12
2ac14     40 32 46 F5 | 	or	local11, #64
2ac18     10 1E 06 F1 | 	add	local01, #16
2ac1c     0F 33 42 FC | 	wrbyte	local11, local01
2ac20                 | ' 
2ac20                 | ' 
2ac20                 | ' 
2ac20                 | ' 
2ac20                 | ' 
2ac20                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2ac20                 | ' 		fp->flag |=  0x80 ;
2ac20                 | ' 
2ac20                 | ' 	}
2ac20                 | ' 
2ac20                 | ' 	fp->flag |=  0x40 ;
2ac20                 | ' 
2ac20                 | ' 	return FR_OK ;
2ac20     00 FA 05 F6 | 	mov	result1, #0
2ac24                 | LR__4313
2ac24     A7 F0 03 F6 | 	mov	ptra, fp
2ac28     B2 00 A0 FD | 	call	#popregs_
2ac2c                 | _fatfs_cc_f_write_ret
2ac2c     2D 00 64 FD | 	ret
2ac30                 | 
2ac30                 | _fatfs_cc_f_sync
2ac30     00 4A 05 F6 | 	mov	COUNT_, #0
2ac34     A8 00 A0 FD | 	call	#pushregs_
2ac38     18 F0 07 F1 | 	add	ptra, #24
2ac3c     04 4E 05 F1 | 	add	fp, #4
2ac40     A7 12 62 FC | 	wrlong	arg01, fp
2ac44     08 4E 05 F1 | 	add	fp, #8
2ac48     A7 14 02 F6 | 	mov	arg02, fp
2ac4c     0C 4E 85 F1 | 	sub	fp, #12
2ac50     D0 E8 BF FD | 	call	#_fatfs_cc_validate
2ac54     08 4E 05 F1 | 	add	fp, #8
2ac58     A7 FA 61 FC | 	wrlong	result1, fp
2ac5c     08 4E 85 F1 | 	sub	fp, #8
2ac60     00 FA 0D F2 | 	cmp	result1, #0 wz
2ac64     C0 01 90 5D |  if_ne	jmp	#LR__4323
2ac68     04 4E 05 F1 | 	add	fp, #4
2ac6c     A7 18 02 FB | 	rdlong	arg04, fp
2ac70     04 4E 85 F1 | 	sub	fp, #4
2ac74     10 18 06 F1 | 	add	arg04, #16
2ac78     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ac7c     40 18 CE F7 | 	test	arg04, #64 wz
2ac80     A4 01 90 AD |  if_e	jmp	#LR__4322
2ac84     04 4E 05 F1 | 	add	fp, #4
2ac88     A7 18 02 FB | 	rdlong	arg04, fp
2ac8c     04 4E 85 F1 | 	sub	fp, #4
2ac90     10 18 06 F1 | 	add	arg04, #16
2ac94     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ac98     80 18 CE F7 | 	test	arg04, #128 wz
2ac9c     64 00 90 AD |  if_e	jmp	#LR__4320
2aca0     0C 4E 05 F1 | 	add	fp, #12
2aca4     A7 18 02 FB | 	rdlong	arg04, fp
2aca8     01 18 06 F1 | 	add	arg04, #1
2acac     0C 13 C2 FA | 	rdbyte	arg01, arg04
2acb0     08 4E 85 F1 | 	sub	fp, #8
2acb4     A7 18 02 FB | 	rdlong	arg04, fp
2acb8     0C 15 02 F6 | 	mov	arg02, arg04
2acbc     28 14 06 F1 | 	add	arg02, #40
2acc0     04 4E 85 F1 | 	sub	fp, #4
2acc4     1C 18 06 F1 | 	add	arg04, #28
2acc8     0C 17 02 FB | 	rdlong	arg03, arg04
2accc     01 18 06 F6 | 	mov	arg04, #1
2acd0     0C AE BF FD | 	call	#_fatfs_cc_disk_write
2acd4     00 FA 0D F2 | 	cmp	result1, #0 wz
2acd8     01 FA 05 56 |  if_ne	mov	result1, #1
2acdc     54 01 90 5D |  if_ne	jmp	#LR__4324
2ace0     04 4E 05 F1 | 	add	fp, #4
2ace4     A7 18 02 FB | 	rdlong	arg04, fp
2ace8     0C 17 02 F6 | 	mov	arg03, arg04
2acec     04 4E 85 F1 | 	sub	fp, #4
2acf0     10 18 06 F1 | 	add	arg04, #16
2acf4     0C 19 C2 FA | 	rdbyte	arg04, arg04
2acf8     7F 18 06 F5 | 	and	arg04, #127
2acfc     10 16 06 F1 | 	add	arg03, #16
2ad00     0B 19 42 FC | 	wrbyte	arg04, arg03
2ad04                 | LR__4320
2ad04     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2ad08     10 4E 05 F1 | 	add	fp, #16
2ad0c     A7 FA 61 FC | 	wrlong	result1, fp
2ad10     04 4E 85 F1 | 	sub	fp, #4
2ad14     A7 12 02 FB | 	rdlong	arg01, fp
2ad18     08 4E 85 F1 | 	sub	fp, #8
2ad1c     A7 18 02 FB | 	rdlong	arg04, fp
2ad20     04 4E 85 F1 | 	sub	fp, #4
2ad24     20 18 06 F1 | 	add	arg04, #32
2ad28     0C 15 02 FB | 	rdlong	arg02, arg04
2ad2c     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
2ad30     08 4E 05 F1 | 	add	fp, #8
2ad34     A7 FA 61 FC | 	wrlong	result1, fp
2ad38     08 4E 85 F1 | 	sub	fp, #8
2ad3c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ad40     E4 00 90 5D |  if_ne	jmp	#LR__4321
2ad44     04 4E 05 F1 | 	add	fp, #4
2ad48     A7 18 02 FB | 	rdlong	arg04, fp
2ad4c     24 18 06 F1 | 	add	arg04, #36
2ad50     0C 19 02 FB | 	rdlong	arg04, arg04
2ad54     10 4E 05 F1 | 	add	fp, #16
2ad58     A7 18 62 FC | 	wrlong	arg04, fp
2ad5c     0C 17 02 F6 | 	mov	arg03, arg04
2ad60     0B 16 06 F1 | 	add	arg03, #11
2ad64     0B 17 C2 FA | 	rdbyte	arg03, arg03
2ad68     20 16 46 F5 | 	or	arg03, #32
2ad6c     0B 18 06 F1 | 	add	arg04, #11
2ad70     0C 17 42 FC | 	wrbyte	arg03, arg04
2ad74     10 4E 85 F1 | 	sub	fp, #16
2ad78     A7 18 02 FB | 	rdlong	arg04, fp
2ad7c     0C 13 02 FB | 	rdlong	arg01, arg04
2ad80     10 4E 05 F1 | 	add	fp, #16
2ad84     A7 14 02 FB | 	rdlong	arg02, fp
2ad88     14 4E 85 F1 | 	sub	fp, #20
2ad8c     08 18 06 F1 | 	add	arg04, #8
2ad90     0C 17 02 FB | 	rdlong	arg03, arg04
2ad94     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2ad98     14 4E 05 F1 | 	add	fp, #20
2ad9c     A7 12 02 FB | 	rdlong	arg01, fp
2ada0     1C 12 06 F1 | 	add	arg01, #28
2ada4     10 4E 85 F1 | 	sub	fp, #16
2ada8     A7 18 02 FB | 	rdlong	arg04, fp
2adac     0C 18 06 F1 | 	add	arg04, #12
2adb0     0C 15 02 FB | 	rdlong	arg02, arg04
2adb4     09 15 62 FC | 	wrlong	arg02, arg01
2adb8     10 4E 05 F1 | 	add	fp, #16
2adbc     A7 12 02 FB | 	rdlong	arg01, fp
2adc0     16 12 06 F1 | 	add	arg01, #22
2adc4     04 4E 85 F1 | 	sub	fp, #4
2adc8     A7 14 02 FB | 	rdlong	arg02, fp
2adcc     09 15 62 FC | 	wrlong	arg02, arg01
2add0     04 4E 05 F1 | 	add	fp, #4
2add4     A7 12 02 FB | 	rdlong	arg01, fp
2add8     12 12 06 F1 | 	add	arg01, #18
2addc     09 01 58 FC | 	wrword	#0, arg01
2ade0     08 4E 85 F1 | 	sub	fp, #8
2ade4     A7 18 02 FB | 	rdlong	arg04, fp
2ade8     03 18 06 F1 | 	add	arg04, #3
2adec     0C 03 48 FC | 	wrbyte	#1, arg04
2adf0     A7 12 02 FB | 	rdlong	arg01, fp
2adf4     0C 4E 85 F1 | 	sub	fp, #12
2adf8     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
2adfc     08 4E 05 F1 | 	add	fp, #8
2ae00     A7 FA 61 FC | 	wrlong	result1, fp
2ae04     04 4E 85 F1 | 	sub	fp, #4
2ae08     A7 18 02 FB | 	rdlong	arg04, fp
2ae0c     0C 17 02 F6 | 	mov	arg03, arg04
2ae10     04 4E 85 F1 | 	sub	fp, #4
2ae14     10 18 06 F1 | 	add	arg04, #16
2ae18     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ae1c     BF 18 06 F5 | 	and	arg04, #191
2ae20     10 16 06 F1 | 	add	arg03, #16
2ae24     0B 19 42 FC | 	wrbyte	arg04, arg03
2ae28                 | LR__4321
2ae28                 | LR__4322
2ae28                 | LR__4323
2ae28                 | ' 					dir = fp->dir_ptr;
2ae28                 | ' 					dir[ 11 ] |=  0x20 ;
2ae28                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2ae28                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2ae28                 | ' 					st_dword(dir +  22 , tm);
2ae28                 | ' 					st_word(dir +  18 , 0);
2ae28                 | ' 					fs->wflag = 1;
2ae28                 | ' 					res = sync_fs(fs);
2ae28                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2ae28                 | ' 				}
2ae28                 | ' 			}
2ae28                 | ' 		}
2ae28                 | ' 	}
2ae28                 | ' 
2ae28                 | ' 	return res ;
2ae28     08 4E 05 F1 | 	add	fp, #8
2ae2c     A7 FA 01 FB | 	rdlong	result1, fp
2ae30     08 4E 85 F1 | 	sub	fp, #8
2ae34                 | LR__4324
2ae34     A7 F0 03 F6 | 	mov	ptra, fp
2ae38     B2 00 A0 FD | 	call	#popregs_
2ae3c                 | _fatfs_cc_f_sync_ret
2ae3c     2D 00 64 FD | 	ret
2ae40                 | 
2ae40                 | _fatfs_cc_f_close
2ae40     01 4A 05 F6 | 	mov	COUNT_, #1
2ae44     A8 00 A0 FD | 	call	#pushregs_
2ae48     10 F0 07 F1 | 	add	ptra, #16
2ae4c     04 4E 05 F1 | 	add	fp, #4
2ae50     A7 12 62 FC | 	wrlong	arg01, fp
2ae54     04 4E 85 F1 | 	sub	fp, #4
2ae58     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2ae5c     08 4E 05 F1 | 	add	fp, #8
2ae60     A7 FA 61 FC | 	wrlong	result1, fp
2ae64     08 4E 85 F1 | 	sub	fp, #8
2ae68     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae6c     38 00 90 5D |  if_ne	jmp	#LR__4330
2ae70     04 4E 05 F1 | 	add	fp, #4
2ae74     A7 12 02 FB | 	rdlong	arg01, fp
2ae78     08 4E 05 F1 | 	add	fp, #8
2ae7c     A7 14 02 F6 | 	mov	arg02, fp
2ae80     0C 4E 85 F1 | 	sub	fp, #12
2ae84     9C E6 BF FD | 	call	#_fatfs_cc_validate
2ae88     08 4E 05 F1 | 	add	fp, #8
2ae8c     A7 FA 61 FC | 	wrlong	result1, fp
2ae90     08 4E 85 F1 | 	sub	fp, #8
2ae94     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae98     04 4E 05 A1 |  if_e	add	fp, #4
2ae9c     A7 1E 02 AB |  if_e	rdlong	local01, fp
2aea0     04 4E 85 A1 |  if_e	sub	fp, #4
2aea4     0F 01 68 AC |  if_e	wrlong	#0, local01
2aea8                 | LR__4330
2aea8                 | ' 
2aea8                 | ' 
2aea8                 | ' 
2aea8                 | ' 
2aea8                 | ' 			fp->obj.fs = 0;
2aea8                 | ' #line 4192 "ff.c"
2aea8                 | ' 		}
2aea8                 | ' 	}
2aea8                 | ' 	return res;
2aea8     08 4E 05 F1 | 	add	fp, #8
2aeac     A7 FA 01 FB | 	rdlong	result1, fp
2aeb0     08 4E 85 F1 | 	sub	fp, #8
2aeb4     A7 F0 03 F6 | 	mov	ptra, fp
2aeb8     B2 00 A0 FD | 	call	#popregs_
2aebc                 | _fatfs_cc_f_close_ret
2aebc     2D 00 64 FD | 	ret
2aec0                 | 
2aec0                 | _fatfs_cc_f_lseek
2aec0     00 4A 05 F6 | 	mov	COUNT_, #0
2aec4     A8 00 A0 FD | 	call	#pushregs_
2aec8     24 F0 07 F1 | 	add	ptra, #36
2aecc     04 4E 05 F1 | 	add	fp, #4
2aed0     A7 12 62 FC | 	wrlong	arg01, fp
2aed4     04 4E 05 F1 | 	add	fp, #4
2aed8     A7 14 62 FC | 	wrlong	arg02, fp
2aedc     04 4E 85 F1 | 	sub	fp, #4
2aee0     A7 12 02 FB | 	rdlong	arg01, fp
2aee4     0C 4E 05 F1 | 	add	fp, #12
2aee8     A7 14 02 F6 | 	mov	arg02, fp
2aeec     10 4E 85 F1 | 	sub	fp, #16
2aef0     30 E6 BF FD | 	call	#_fatfs_cc_validate
2aef4     0C 4E 05 F1 | 	add	fp, #12
2aef8     A7 FA 61 FC | 	wrlong	result1, fp
2aefc     0C 4E 85 F1 | 	sub	fp, #12
2af00     00 FA 0D F2 | 	cmp	result1, #0 wz
2af04     1C 00 90 5D |  if_ne	jmp	#LR__4340
2af08     04 4E 05 F1 | 	add	fp, #4
2af0c     A7 18 02 FB | 	rdlong	arg04, fp
2af10     11 18 06 F1 | 	add	arg04, #17
2af14     0C 19 C2 FA | 	rdbyte	arg04, arg04
2af18     08 4E 05 F1 | 	add	fp, #8
2af1c     A7 18 62 FC | 	wrlong	arg04, fp
2af20     0C 4E 85 F1 | 	sub	fp, #12
2af24                 | LR__4340
2af24     0C 4E 05 F1 | 	add	fp, #12
2af28     A7 18 0A FB | 	rdlong	arg04, fp wz
2af2c     0C 4E 85 F1 | 	sub	fp, #12
2af30     0C 4E 05 51 |  if_ne	add	fp, #12
2af34     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2af38     0C 4E 85 51 |  if_ne	sub	fp, #12
2af3c     40 06 90 5D |  if_ne	jmp	#LR__4363
2af40     04 4E 05 F1 | 	add	fp, #4
2af44     A7 18 02 FB | 	rdlong	arg04, fp
2af48     04 4E 05 F1 | 	add	fp, #4
2af4c     A7 16 02 FB | 	rdlong	arg03, fp
2af50     08 4E 85 F1 | 	sub	fp, #8
2af54     0C 18 06 F1 | 	add	arg04, #12
2af58     0C 19 02 FB | 	rdlong	arg04, arg04
2af5c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2af60     3C 00 90 ED |  if_be	jmp	#LR__4341
2af64     04 4E 05 F1 | 	add	fp, #4
2af68     A7 16 02 FB | 	rdlong	arg03, fp
2af6c     04 4E 85 F1 | 	sub	fp, #4
2af70     10 16 06 F1 | 	add	arg03, #16
2af74     0B 17 C2 FA | 	rdbyte	arg03, arg03
2af78     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2af7c     02 16 CE F7 | 	test	arg03, #2 wz
2af80     1C 00 90 5D |  if_ne	jmp	#LR__4341
2af84     04 4E 05 F1 | 	add	fp, #4
2af88     A7 16 02 FB | 	rdlong	arg03, fp
2af8c     0C 16 06 F1 | 	add	arg03, #12
2af90     0B 17 02 FB | 	rdlong	arg03, arg03
2af94     04 4E 05 F1 | 	add	fp, #4
2af98     A7 16 62 FC | 	wrlong	arg03, fp
2af9c     08 4E 85 F1 | 	sub	fp, #8
2afa0                 | LR__4341
2afa0     04 4E 05 F1 | 	add	fp, #4
2afa4     A7 16 02 FB | 	rdlong	arg03, fp
2afa8     14 16 06 F1 | 	add	arg03, #20
2afac     0B 17 02 FB | 	rdlong	arg03, arg03
2afb0     1C 4E 05 F1 | 	add	fp, #28
2afb4     A7 16 62 FC | 	wrlong	arg03, fp
2afb8     1C 4E 85 F1 | 	sub	fp, #28
2afbc     A7 16 02 FB | 	rdlong	arg03, fp
2afc0     18 4E 05 F1 | 	add	fp, #24
2afc4     A7 00 68 FC | 	wrlong	#0, fp
2afc8     14 16 06 F1 | 	add	arg03, #20
2afcc     0B 01 68 FC | 	wrlong	#0, arg03
2afd0     14 4E 85 F1 | 	sub	fp, #20
2afd4     A7 16 02 FB | 	rdlong	arg03, fp
2afd8     08 4E 85 F1 | 	sub	fp, #8
2afdc     01 16 16 F2 | 	cmp	arg03, #1 wc
2afe0     E4 03 90 CD |  if_b	jmp	#LR__4357
2afe4     10 4E 05 F1 | 	add	fp, #16
2afe8     A7 16 02 FB | 	rdlong	arg03, fp
2afec     0A 16 06 F1 | 	add	arg03, #10
2aff0     0B 19 E2 FA | 	rdword	arg04, arg03
2aff4     09 18 66 F0 | 	shl	arg04, #9
2aff8     08 4E 05 F1 | 	add	fp, #8
2affc     A7 18 62 FC | 	wrlong	arg04, fp
2b000     08 4E 05 F1 | 	add	fp, #8
2b004     A7 18 02 FB | 	rdlong	arg04, fp
2b008     20 4E 85 F1 | 	sub	fp, #32
2b00c     01 18 16 F2 | 	cmp	arg04, #1 wc
2b010     AC 00 90 CD |  if_b	jmp	#LR__4342
2b014     08 4E 05 F1 | 	add	fp, #8
2b018     A7 18 02 FB | 	rdlong	arg04, fp
2b01c     01 18 86 F1 | 	sub	arg04, #1
2b020     10 4E 05 F1 | 	add	fp, #16
2b024     A7 16 02 FB | 	rdlong	arg03, fp
2b028     0B 19 12 FD | 	qdiv	arg04, arg03
2b02c     08 4E 05 F1 | 	add	fp, #8
2b030     A7 FA 01 FB | 	rdlong	result1, fp
2b034     01 FA 85 F1 | 	sub	result1, #1
2b038     18 18 62 FD | 	getqx	arg04
2b03c     0B FB 11 FD | 	qdiv	result1, arg03
2b040     20 4E 85 F1 | 	sub	fp, #32
2b044     18 16 62 FD | 	getqx	arg03
2b048     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2b04c     70 00 90 CD |  if_b	jmp	#LR__4342
2b050     04 4E 05 F1 | 	add	fp, #4
2b054     A7 16 02 FB | 	rdlong	arg03, fp
2b058     1C 4E 05 F1 | 	add	fp, #28
2b05c     A7 FA 01 FB | 	rdlong	result1, fp
2b060     01 FA 85 F1 | 	sub	result1, #1
2b064     08 4E 85 F1 | 	sub	fp, #8
2b068     A7 18 02 FB | 	rdlong	arg04, fp
2b06c     01 18 86 F1 | 	sub	arg04, #1
2b070     0C FB 21 F5 | 	andn	result1, arg04
2b074     14 16 06 F1 | 	add	arg03, #20
2b078     0B FB 61 FC | 	wrlong	result1, arg03
2b07c     10 4E 85 F1 | 	sub	fp, #16
2b080     A7 16 02 FB | 	rdlong	arg03, fp
2b084     04 4E 85 F1 | 	sub	fp, #4
2b088     A7 18 02 FB | 	rdlong	arg04, fp
2b08c     14 18 06 F1 | 	add	arg04, #20
2b090     0C 19 02 FB | 	rdlong	arg04, arg04
2b094     0C 17 82 F1 | 	sub	arg03, arg04
2b098     04 4E 05 F1 | 	add	fp, #4
2b09c     A7 16 62 FC | 	wrlong	arg03, fp
2b0a0     04 4E 85 F1 | 	sub	fp, #4
2b0a4     A7 16 02 FB | 	rdlong	arg03, fp
2b0a8     18 16 06 F1 | 	add	arg03, #24
2b0ac     0B 17 02 FB | 	rdlong	arg03, arg03
2b0b0     10 4E 05 F1 | 	add	fp, #16
2b0b4     A7 16 62 FC | 	wrlong	arg03, fp
2b0b8     14 4E 85 F1 | 	sub	fp, #20
2b0bc     D0 00 90 FD | 	jmp	#LR__4346
2b0c0                 | LR__4342
2b0c0     04 4E 05 F1 | 	add	fp, #4
2b0c4     A7 16 02 FB | 	rdlong	arg03, fp
2b0c8     08 16 06 F1 | 	add	arg03, #8
2b0cc     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2b0d0     10 4E 05 F1 | 	add	fp, #16
2b0d4     A7 16 62 FC | 	wrlong	arg03, fp
2b0d8     14 4E 85 F1 | 	sub	fp, #20
2b0dc     94 00 90 5D |  if_ne	jmp	#LR__4345
2b0e0     04 4E 05 F1 | 	add	fp, #4
2b0e4     A7 12 02 FB | 	rdlong	arg01, fp
2b0e8     04 4E 85 F1 | 	sub	fp, #4
2b0ec     00 14 06 F6 | 	mov	arg02, #0
2b0f0     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
2b0f4     14 4E 05 F1 | 	add	fp, #20
2b0f8     A7 FA 61 FC | 	wrlong	result1, fp
2b0fc     14 4E 85 F1 | 	sub	fp, #20
2b100     01 FA 0D F2 | 	cmp	result1, #1 wz
2b104     1C 00 90 5D |  if_ne	jmp	#LR__4343
2b108     04 4E 05 F1 | 	add	fp, #4
2b10c     A7 16 02 FB | 	rdlong	arg03, fp
2b110     04 4E 85 F1 | 	sub	fp, #4
2b114     11 16 06 F1 | 	add	arg03, #17
2b118     0B 05 48 FC | 	wrbyte	#2, arg03
2b11c     02 FA 05 F6 | 	mov	result1, #2
2b120     5C 04 90 FD | 	jmp	#LR__4363
2b124                 | LR__4343
2b124     14 4E 05 F1 | 	add	fp, #20
2b128     A7 FA 01 FB | 	rdlong	result1, fp
2b12c     14 4E 85 F1 | 	sub	fp, #20
2b130     FF FF 7F FF 
2b134     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2b138     1C 00 90 5D |  if_ne	jmp	#LR__4344
2b13c     04 4E 05 F1 | 	add	fp, #4
2b140     A7 16 02 FB | 	rdlong	arg03, fp
2b144     04 4E 85 F1 | 	sub	fp, #4
2b148     11 16 06 F1 | 	add	arg03, #17
2b14c     0B 03 48 FC | 	wrbyte	#1, arg03
2b150     01 FA 05 F6 | 	mov	result1, #1
2b154     28 04 90 FD | 	jmp	#LR__4363
2b158                 | LR__4344
2b158     04 4E 05 F1 | 	add	fp, #4
2b15c     A7 16 02 FB | 	rdlong	arg03, fp
2b160     10 4E 05 F1 | 	add	fp, #16
2b164     A7 18 02 FB | 	rdlong	arg04, fp
2b168     14 4E 85 F1 | 	sub	fp, #20
2b16c     08 16 06 F1 | 	add	arg03, #8
2b170     0B 19 62 FC | 	wrlong	arg04, arg03
2b174                 | LR__4345
2b174     04 4E 05 F1 | 	add	fp, #4
2b178     A7 16 02 FB | 	rdlong	arg03, fp
2b17c     10 4E 05 F1 | 	add	fp, #16
2b180     A7 18 02 FB | 	rdlong	arg04, fp
2b184     14 4E 85 F1 | 	sub	fp, #20
2b188     18 16 06 F1 | 	add	arg03, #24
2b18c     0B 19 62 FC | 	wrlong	arg04, arg03
2b190                 | LR__4346
2b190     14 4E 05 F1 | 	add	fp, #20
2b194     A7 16 0A FB | 	rdlong	arg03, fp wz
2b198     14 4E 85 F1 | 	sub	fp, #20
2b19c     28 02 90 AD |  if_e	jmp	#LR__4356
2b1a0                 | ' 				while (ofs > bcs) {
2b1a0                 | LR__4347
2b1a0     08 4E 05 F1 | 	add	fp, #8
2b1a4     A7 18 02 FB | 	rdlong	arg04, fp
2b1a8     10 4E 05 F1 | 	add	fp, #16
2b1ac     A7 16 02 FB | 	rdlong	arg03, fp
2b1b0     18 4E 85 F1 | 	sub	fp, #24
2b1b4     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2b1b8     68 01 90 ED |  if_be	jmp	#LR__4353
2b1bc     08 4E 05 F1 | 	add	fp, #8
2b1c0     A7 18 02 FB | 	rdlong	arg04, fp
2b1c4     10 4E 05 F1 | 	add	fp, #16
2b1c8     A7 16 02 FB | 	rdlong	arg03, fp
2b1cc     0B 19 82 F1 | 	sub	arg04, arg03
2b1d0     10 4E 85 F1 | 	sub	fp, #16
2b1d4     A7 18 62 FC | 	wrlong	arg04, fp
2b1d8     04 4E 85 F1 | 	sub	fp, #4
2b1dc     A7 18 02 FB | 	rdlong	arg04, fp
2b1e0     0C FB 01 F6 | 	mov	result1, arg04
2b1e4     14 18 06 F1 | 	add	arg04, #20
2b1e8     0C 19 02 FB | 	rdlong	arg04, arg04
2b1ec     14 4E 05 F1 | 	add	fp, #20
2b1f0     A7 16 02 FB | 	rdlong	arg03, fp
2b1f4     0B 19 02 F1 | 	add	arg04, arg03
2b1f8     14 FA 05 F1 | 	add	result1, #20
2b1fc     FD 18 62 FC | 	wrlong	arg04, result1
2b200     14 4E 85 F1 | 	sub	fp, #20
2b204     A7 16 02 FB | 	rdlong	arg03, fp
2b208     04 4E 85 F1 | 	sub	fp, #4
2b20c     10 16 06 F1 | 	add	arg03, #16
2b210     0B 17 C2 FA | 	rdbyte	arg03, arg03
2b214     02 16 CE F7 | 	test	arg03, #2 wz
2b218     3C 00 90 AD |  if_e	jmp	#LR__4348
2b21c     04 4E 05 F1 | 	add	fp, #4
2b220     A7 12 02 FB | 	rdlong	arg01, fp
2b224     10 4E 05 F1 | 	add	fp, #16
2b228     A7 14 02 FB | 	rdlong	arg02, fp
2b22c     14 4E 85 F1 | 	sub	fp, #20
2b230     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
2b234     14 4E 05 F1 | 	add	fp, #20
2b238     A7 FA 61 FC | 	wrlong	result1, fp
2b23c     00 FA 4D F2 | 	cmps	result1, #0 wz
2b240     14 4E 85 F1 | 	sub	fp, #20
2b244     08 4E 05 A1 |  if_e	add	fp, #8
2b248     A7 00 68 AC |  if_e	wrlong	#0, fp
2b24c     08 4E 85 A1 |  if_e	sub	fp, #8
2b250                 | ' 							ofs = 0; break;
2b250     D0 00 90 AD |  if_e	jmp	#LR__4353
2b254     24 00 90 FD | 	jmp	#LR__4349
2b258                 | LR__4348
2b258     04 4E 05 F1 | 	add	fp, #4
2b25c     A7 12 02 FB | 	rdlong	arg01, fp
2b260     10 4E 05 F1 | 	add	fp, #16
2b264     A7 14 02 FB | 	rdlong	arg02, fp
2b268     14 4E 85 F1 | 	sub	fp, #20
2b26c     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2b270     14 4E 05 F1 | 	add	fp, #20
2b274     A7 FA 61 FC | 	wrlong	result1, fp
2b278     14 4E 85 F1 | 	sub	fp, #20
2b27c                 | LR__4349
2b27c     14 4E 05 F1 | 	add	fp, #20
2b280     A7 16 02 FB | 	rdlong	arg03, fp
2b284     14 4E 85 F1 | 	sub	fp, #20
2b288     FF FF 7F FF 
2b28c     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2b290     1C 00 90 5D |  if_ne	jmp	#LR__4350
2b294     04 4E 05 F1 | 	add	fp, #4
2b298     A7 16 02 FB | 	rdlong	arg03, fp
2b29c     04 4E 85 F1 | 	sub	fp, #4
2b2a0     11 16 06 F1 | 	add	arg03, #17
2b2a4     0B 03 48 FC | 	wrbyte	#1, arg03
2b2a8     01 FA 05 F6 | 	mov	result1, #1
2b2ac     D0 02 90 FD | 	jmp	#LR__4363
2b2b0                 | LR__4350
2b2b0     14 4E 05 F1 | 	add	fp, #20
2b2b4     A7 16 02 FB | 	rdlong	arg03, fp
2b2b8     14 4E 85 F1 | 	sub	fp, #20
2b2bc     02 16 16 F2 | 	cmp	arg03, #2 wc
2b2c0     24 00 90 CD |  if_b	jmp	#LR__4351
2b2c4     10 4E 05 F1 | 	add	fp, #16
2b2c8     A7 18 02 FB | 	rdlong	arg04, fp
2b2cc     04 4E 05 F1 | 	add	fp, #4
2b2d0     A7 16 02 FB | 	rdlong	arg03, fp
2b2d4     14 4E 85 F1 | 	sub	fp, #20
2b2d8     18 18 06 F1 | 	add	arg04, #24
2b2dc     0C 19 02 FB | 	rdlong	arg04, arg04
2b2e0     0C 17 12 F2 | 	cmp	arg03, arg04 wc
2b2e4     1C 00 90 CD |  if_b	jmp	#LR__4352
2b2e8                 | LR__4351
2b2e8     04 4E 05 F1 | 	add	fp, #4
2b2ec     A7 16 02 FB | 	rdlong	arg03, fp
2b2f0     04 4E 85 F1 | 	sub	fp, #4
2b2f4     11 16 06 F1 | 	add	arg03, #17
2b2f8     0B 05 48 FC | 	wrbyte	#2, arg03
2b2fc     02 FA 05 F6 | 	mov	result1, #2
2b300     7C 02 90 FD | 	jmp	#LR__4363
2b304                 | LR__4352
2b304     04 4E 05 F1 | 	add	fp, #4
2b308     A7 18 02 FB | 	rdlong	arg04, fp
2b30c     10 4E 05 F1 | 	add	fp, #16
2b310     A7 16 02 FB | 	rdlong	arg03, fp
2b314     14 4E 85 F1 | 	sub	fp, #20
2b318     18 18 06 F1 | 	add	arg04, #24
2b31c     0C 17 62 FC | 	wrlong	arg03, arg04
2b320     7C FE 9F FD | 	jmp	#LR__4347
2b324                 | LR__4353
2b324     04 4E 05 F1 | 	add	fp, #4
2b328     A7 16 02 FB | 	rdlong	arg03, fp
2b32c     0B 13 02 F6 | 	mov	arg01, arg03
2b330     14 16 06 F1 | 	add	arg03, #20
2b334     0B 15 02 FB | 	rdlong	arg02, arg03
2b338     04 4E 05 F1 | 	add	fp, #4
2b33c     A7 16 02 FB | 	rdlong	arg03, fp
2b340     0B 15 02 F1 | 	add	arg02, arg03
2b344     14 12 06 F1 | 	add	arg01, #20
2b348     09 15 62 FC | 	wrlong	arg02, arg01
2b34c     A7 16 02 FB | 	rdlong	arg03, fp
2b350     08 4E 85 F1 | 	sub	fp, #8
2b354     FF 17 CE F7 | 	test	arg03, #511 wz
2b358     6C 00 90 AD |  if_e	jmp	#LR__4355
2b35c     10 4E 05 F1 | 	add	fp, #16
2b360     A7 12 02 FB | 	rdlong	arg01, fp
2b364     04 4E 05 F1 | 	add	fp, #4
2b368     A7 14 02 FB | 	rdlong	arg02, fp
2b36c     14 4E 85 F1 | 	sub	fp, #20
2b370     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2b374     1C 4E 05 F1 | 	add	fp, #28
2b378     A7 FA 61 FC | 	wrlong	result1, fp
2b37c     1C 4E 85 F1 | 	sub	fp, #28
2b380     00 FA 0D F2 | 	cmp	result1, #0 wz
2b384     1C 00 90 5D |  if_ne	jmp	#LR__4354
2b388     04 4E 05 F1 | 	add	fp, #4
2b38c     A7 16 02 FB | 	rdlong	arg03, fp
2b390     04 4E 85 F1 | 	sub	fp, #4
2b394     11 16 06 F1 | 	add	arg03, #17
2b398     0B 05 48 FC | 	wrbyte	#2, arg03
2b39c     02 FA 05 F6 | 	mov	result1, #2
2b3a0     DC 01 90 FD | 	jmp	#LR__4363
2b3a4                 | LR__4354
2b3a4     1C 4E 05 F1 | 	add	fp, #28
2b3a8     A7 18 02 FB | 	rdlong	arg04, fp
2b3ac     14 4E 85 F1 | 	sub	fp, #20
2b3b0     A7 16 02 FB | 	rdlong	arg03, fp
2b3b4     09 16 46 F0 | 	shr	arg03, #9
2b3b8     0B 19 02 F1 | 	add	arg04, arg03
2b3bc     14 4E 05 F1 | 	add	fp, #20
2b3c0     A7 18 62 FC | 	wrlong	arg04, fp
2b3c4     1C 4E 85 F1 | 	sub	fp, #28
2b3c8                 | LR__4355
2b3c8                 | LR__4356
2b3c8                 | LR__4357
2b3c8     04 4E 05 F1 | 	add	fp, #4
2b3cc     A7 18 02 FB | 	rdlong	arg04, fp
2b3d0     0C 17 02 F6 | 	mov	arg03, arg04
2b3d4     04 4E 85 F1 | 	sub	fp, #4
2b3d8     14 16 06 F1 | 	add	arg03, #20
2b3dc     0B 17 02 FB | 	rdlong	arg03, arg03
2b3e0     0C 18 06 F1 | 	add	arg04, #12
2b3e4     0C 19 02 FB | 	rdlong	arg04, arg04
2b3e8     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2b3ec     3C 00 90 ED |  if_be	jmp	#LR__4358
2b3f0     04 4E 05 F1 | 	add	fp, #4
2b3f4     A7 18 02 FB | 	rdlong	arg04, fp
2b3f8     0C 17 02 F6 | 	mov	arg03, arg04
2b3fc     14 18 06 F1 | 	add	arg04, #20
2b400     0C 19 02 FB | 	rdlong	arg04, arg04
2b404     0C 16 06 F1 | 	add	arg03, #12
2b408     0B 19 62 FC | 	wrlong	arg04, arg03
2b40c     A7 18 02 FB | 	rdlong	arg04, fp
2b410     0C 17 02 F6 | 	mov	arg03, arg04
2b414     04 4E 85 F1 | 	sub	fp, #4
2b418     10 18 06 F1 | 	add	arg04, #16
2b41c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2b420     40 18 46 F5 | 	or	arg04, #64
2b424     10 16 06 F1 | 	add	arg03, #16
2b428     0B 19 42 FC | 	wrbyte	arg04, arg03
2b42c                 | LR__4358
2b42c     04 4E 05 F1 | 	add	fp, #4
2b430     A7 16 02 FB | 	rdlong	arg03, fp
2b434     04 4E 85 F1 | 	sub	fp, #4
2b438     14 16 06 F1 | 	add	arg03, #20
2b43c     0B 17 02 FB | 	rdlong	arg03, arg03
2b440     FF 17 CE F7 | 	test	arg03, #511 wz
2b444     2C 01 90 AD |  if_e	jmp	#LR__4362
2b448     04 4E 05 F1 | 	add	fp, #4
2b44c     A7 18 02 FB | 	rdlong	arg04, fp
2b450     18 4E 05 F1 | 	add	fp, #24
2b454     A7 16 02 FB | 	rdlong	arg03, fp
2b458     1C 4E 85 F1 | 	sub	fp, #28
2b45c     1C 18 06 F1 | 	add	arg04, #28
2b460     0C 19 02 FB | 	rdlong	arg04, arg04
2b464     0C 17 0A F2 | 	cmp	arg03, arg04 wz
2b468     08 01 90 AD |  if_e	jmp	#LR__4362
2b46c     04 4E 05 F1 | 	add	fp, #4
2b470     A7 16 02 FB | 	rdlong	arg03, fp
2b474     04 4E 85 F1 | 	sub	fp, #4
2b478     10 16 06 F1 | 	add	arg03, #16
2b47c     0B 17 C2 FA | 	rdbyte	arg03, arg03
2b480     80 16 CE F7 | 	test	arg03, #128 wz
2b484     7C 00 90 AD |  if_e	jmp	#LR__4360
2b488     10 4E 05 F1 | 	add	fp, #16
2b48c     A7 16 02 FB | 	rdlong	arg03, fp
2b490     01 16 06 F1 | 	add	arg03, #1
2b494     0B 13 C2 FA | 	rdbyte	arg01, arg03
2b498     0C 4E 85 F1 | 	sub	fp, #12
2b49c     A7 16 02 FB | 	rdlong	arg03, fp
2b4a0     0B 15 02 F6 | 	mov	arg02, arg03
2b4a4     28 14 06 F1 | 	add	arg02, #40
2b4a8     04 4E 85 F1 | 	sub	fp, #4
2b4ac     1C 16 06 F1 | 	add	arg03, #28
2b4b0     0B 17 02 FB | 	rdlong	arg03, arg03
2b4b4     01 18 06 F6 | 	mov	arg04, #1
2b4b8     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2b4bc     00 FA 0D F2 | 	cmp	result1, #0 wz
2b4c0     1C 00 90 AD |  if_e	jmp	#LR__4359
2b4c4     04 4E 05 F1 | 	add	fp, #4
2b4c8     A7 16 02 FB | 	rdlong	arg03, fp
2b4cc     04 4E 85 F1 | 	sub	fp, #4
2b4d0     11 16 06 F1 | 	add	arg03, #17
2b4d4     0B 03 48 FC | 	wrbyte	#1, arg03
2b4d8     01 FA 05 F6 | 	mov	result1, #1
2b4dc     A0 00 90 FD | 	jmp	#LR__4363
2b4e0                 | LR__4359
2b4e0     04 4E 05 F1 | 	add	fp, #4
2b4e4     A7 18 02 FB | 	rdlong	arg04, fp
2b4e8     0C 17 02 F6 | 	mov	arg03, arg04
2b4ec     04 4E 85 F1 | 	sub	fp, #4
2b4f0     10 18 06 F1 | 	add	arg04, #16
2b4f4     0C 19 C2 FA | 	rdbyte	arg04, arg04
2b4f8     7F 18 06 F5 | 	and	arg04, #127
2b4fc     10 16 06 F1 | 	add	arg03, #16
2b500     0B 19 42 FC | 	wrbyte	arg04, arg03
2b504                 | LR__4360
2b504     10 4E 05 F1 | 	add	fp, #16
2b508     A7 16 02 FB | 	rdlong	arg03, fp
2b50c     01 16 06 F1 | 	add	arg03, #1
2b510     0B 13 C2 FA | 	rdbyte	arg01, arg03
2b514     0C 4E 85 F1 | 	sub	fp, #12
2b518     A7 14 02 FB | 	rdlong	arg02, fp
2b51c     28 14 06 F1 | 	add	arg02, #40
2b520     18 4E 05 F1 | 	add	fp, #24
2b524     A7 16 02 FB | 	rdlong	arg03, fp
2b528     1C 4E 85 F1 | 	sub	fp, #28
2b52c     01 18 06 F6 | 	mov	arg04, #1
2b530     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
2b534     00 FA 0D F2 | 	cmp	result1, #0 wz
2b538     1C 00 90 AD |  if_e	jmp	#LR__4361
2b53c     04 4E 05 F1 | 	add	fp, #4
2b540     A7 16 02 FB | 	rdlong	arg03, fp
2b544     04 4E 85 F1 | 	sub	fp, #4
2b548     11 16 06 F1 | 	add	arg03, #17
2b54c     0B 03 48 FC | 	wrbyte	#1, arg03
2b550     01 FA 05 F6 | 	mov	result1, #1
2b554     28 00 90 FD | 	jmp	#LR__4363
2b558                 | LR__4361
2b558     04 4E 05 F1 | 	add	fp, #4
2b55c     A7 18 02 FB | 	rdlong	arg04, fp
2b560     18 4E 05 F1 | 	add	fp, #24
2b564     A7 16 02 FB | 	rdlong	arg03, fp
2b568     1C 4E 85 F1 | 	sub	fp, #28
2b56c     1C 18 06 F1 | 	add	arg04, #28
2b570     0C 17 62 FC | 	wrlong	arg03, arg04
2b574                 | LR__4362
2b574                 | ' 
2b574                 | ' 			fp->sect = nsect;
2b574                 | ' 		}
2b574                 | ' 	}
2b574                 | ' 
2b574                 | ' 	return res ;
2b574     0C 4E 05 F1 | 	add	fp, #12
2b578     A7 FA 01 FB | 	rdlong	result1, fp
2b57c     0C 4E 85 F1 | 	sub	fp, #12
2b580                 | LR__4363
2b580     A7 F0 03 F6 | 	mov	ptra, fp
2b584     B2 00 A0 FD | 	call	#popregs_
2b588                 | _fatfs_cc_f_lseek_ret
2b588     2D 00 64 FD | 	ret
2b58c                 | 
2b58c                 | _fatfs_cc_f_opendir
2b58c     01 4A 05 F6 | 	mov	COUNT_, #1
2b590     A8 00 A0 FD | 	call	#pushregs_
2b594     14 F0 07 F1 | 	add	ptra, #20
2b598     04 4E 05 F1 | 	add	fp, #4
2b59c     A7 12 62 FC | 	wrlong	arg01, fp
2b5a0     04 4E 05 F1 | 	add	fp, #4
2b5a4     A7 14 62 FC | 	wrlong	arg02, fp
2b5a8     04 4E 85 F1 | 	sub	fp, #4
2b5ac     A7 16 0A FB | 	rdlong	arg03, fp wz
2b5b0     04 4E 85 F1 | 	sub	fp, #4
2b5b4     09 FA 05 A6 |  if_e	mov	result1, #9
2b5b8     78 01 90 AD |  if_e	jmp	#LR__4376
2b5bc     08 4E 05 F1 | 	add	fp, #8
2b5c0     A7 12 02 F6 | 	mov	arg01, fp
2b5c4     08 4E 05 F1 | 	add	fp, #8
2b5c8     A7 14 02 F6 | 	mov	arg02, fp
2b5cc     10 4E 85 F1 | 	sub	fp, #16
2b5d0     00 16 06 F6 | 	mov	arg03, #0
2b5d4     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2b5d8     0C 4E 05 F1 | 	add	fp, #12
2b5dc     A7 FA 61 FC | 	wrlong	result1, fp
2b5e0     0C 4E 85 F1 | 	sub	fp, #12
2b5e4     00 FA 0D F2 | 	cmp	result1, #0 wz
2b5e8     20 01 90 5D |  if_ne	jmp	#LR__4375
2b5ec     04 4E 05 F1 | 	add	fp, #4
2b5f0     A7 16 02 FB | 	rdlong	arg03, fp
2b5f4     0C 4E 05 F1 | 	add	fp, #12
2b5f8     A7 FA 01 FB | 	rdlong	result1, fp
2b5fc     0B FB 61 FC | 	wrlong	result1, arg03
2b600     0C 4E 85 F1 | 	sub	fp, #12
2b604     A7 12 02 FB | 	rdlong	arg01, fp
2b608     04 4E 05 F1 | 	add	fp, #4
2b60c     A7 14 02 FB | 	rdlong	arg02, fp
2b610     08 4E 85 F1 | 	sub	fp, #8
2b614     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
2b618     0C 4E 05 F1 | 	add	fp, #12
2b61c     A7 FA 61 FC | 	wrlong	result1, fp
2b620     0C 4E 85 F1 | 	sub	fp, #12
2b624     00 FA 0D F2 | 	cmp	result1, #0 wz
2b628     C4 00 90 5D |  if_ne	jmp	#LR__4374
2b62c     04 4E 05 F1 | 	add	fp, #4
2b630     A7 16 02 FB | 	rdlong	arg03, fp
2b634     04 4E 85 F1 | 	sub	fp, #4
2b638     2B 16 06 F1 | 	add	arg03, #43
2b63c     0B 17 C2 FA | 	rdbyte	arg03, arg03
2b640     80 16 CE F7 | 	test	arg03, #128 wz
2b644     58 00 90 5D |  if_ne	jmp	#LR__4372
2b648     04 4E 05 F1 | 	add	fp, #4
2b64c     A7 16 02 FB | 	rdlong	arg03, fp
2b650     04 4E 85 F1 | 	sub	fp, #4
2b654     06 16 06 F1 | 	add	arg03, #6
2b658     0B 17 C2 FA | 	rdbyte	arg03, arg03
2b65c     10 16 CE F7 | 	test	arg03, #16 wz
2b660     30 00 90 AD |  if_e	jmp	#LR__4370
2b664     04 4E 05 F1 | 	add	fp, #4
2b668     A7 16 02 FB | 	rdlong	arg03, fp
2b66c     0B 1F 02 F6 | 	mov	local01, arg03
2b670     0C 4E 05 F1 | 	add	fp, #12
2b674     A7 12 02 FB | 	rdlong	arg01, fp
2b678     10 4E 85 F1 | 	sub	fp, #16
2b67c     1C 16 06 F1 | 	add	arg03, #28
2b680     0B 15 02 FB | 	rdlong	arg02, arg03
2b684     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
2b688     08 1E 06 F1 | 	add	local01, #8
2b68c     0F FB 61 FC | 	wrlong	result1, local01
2b690     0C 00 90 FD | 	jmp	#LR__4371
2b694                 | LR__4370
2b694     0C 4E 05 F1 | 	add	fp, #12
2b698     A7 0A 68 FC | 	wrlong	#5, fp
2b69c     0C 4E 85 F1 | 	sub	fp, #12
2b6a0                 | LR__4371
2b6a0                 | LR__4372
2b6a0     0C 4E 05 F1 | 	add	fp, #12
2b6a4     A7 1E 0A FB | 	rdlong	local01, fp wz
2b6a8     0C 4E 85 F1 | 	sub	fp, #12
2b6ac     40 00 90 5D |  if_ne	jmp	#LR__4373
2b6b0     04 4E 05 F1 | 	add	fp, #4
2b6b4     A7 1E 02 FB | 	rdlong	local01, fp
2b6b8     0C 4E 05 F1 | 	add	fp, #12
2b6bc     A7 16 02 FB | 	rdlong	arg03, fp
2b6c0     06 16 06 F1 | 	add	arg03, #6
2b6c4     0B 17 E2 FA | 	rdword	arg03, arg03
2b6c8     04 1E 06 F1 | 	add	local01, #4
2b6cc     0F 17 52 FC | 	wrword	arg03, local01
2b6d0     0C 4E 85 F1 | 	sub	fp, #12
2b6d4     A7 12 02 FB | 	rdlong	arg01, fp
2b6d8     04 4E 85 F1 | 	sub	fp, #4
2b6dc     00 14 06 F6 | 	mov	arg02, #0
2b6e0     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
2b6e4     0C 4E 05 F1 | 	add	fp, #12
2b6e8     A7 FA 61 FC | 	wrlong	result1, fp
2b6ec     0C 4E 85 F1 | 	sub	fp, #12
2b6f0                 | LR__4373
2b6f0                 | LR__4374
2b6f0     0C 4E 05 F1 | 	add	fp, #12
2b6f4     A7 1E 02 FB | 	rdlong	local01, fp
2b6f8     0C 4E 85 F1 | 	sub	fp, #12
2b6fc     04 1E 0E F2 | 	cmp	local01, #4 wz
2b700     0C 4E 05 A1 |  if_e	add	fp, #12
2b704     A7 0A 68 AC |  if_e	wrlong	#5, fp
2b708     0C 4E 85 A1 |  if_e	sub	fp, #12
2b70c                 | LR__4375
2b70c     0C 4E 05 F1 | 	add	fp, #12
2b710     A7 1E 0A FB | 	rdlong	local01, fp wz
2b714     0C 4E 85 F1 | 	sub	fp, #12
2b718     04 4E 05 51 |  if_ne	add	fp, #4
2b71c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2b720     04 4E 85 51 |  if_ne	sub	fp, #4
2b724     0F 01 68 5C |  if_ne	wrlong	#0, local01
2b728                 | ' 
2b728                 | ' 	return res ;
2b728     0C 4E 05 F1 | 	add	fp, #12
2b72c     A7 FA 01 FB | 	rdlong	result1, fp
2b730     0C 4E 85 F1 | 	sub	fp, #12
2b734                 | LR__4376
2b734     A7 F0 03 F6 | 	mov	ptra, fp
2b738     B2 00 A0 FD | 	call	#popregs_
2b73c                 | _fatfs_cc_f_opendir_ret
2b73c     2D 00 64 FD | 	ret
2b740                 | 
2b740                 | _fatfs_cc_f_closedir
2b740     00 4A 05 F6 | 	mov	COUNT_, #0
2b744     A8 00 A0 FD | 	call	#pushregs_
2b748     10 F0 07 F1 | 	add	ptra, #16
2b74c     04 4E 05 F1 | 	add	fp, #4
2b750     A7 12 62 FC | 	wrlong	arg01, fp
2b754     08 4E 05 F1 | 	add	fp, #8
2b758     A7 14 02 F6 | 	mov	arg02, fp
2b75c     0C 4E 85 F1 | 	sub	fp, #12
2b760     C0 DD BF FD | 	call	#_fatfs_cc_validate
2b764     08 4E 05 F1 | 	add	fp, #8
2b768     A7 FA 61 FC | 	wrlong	result1, fp
2b76c     08 4E 85 F1 | 	sub	fp, #8
2b770     00 FA 0D F2 | 	cmp	result1, #0 wz
2b774     04 4E 05 A1 |  if_e	add	fp, #4
2b778     A7 FA 01 AB |  if_e	rdlong	result1, fp
2b77c     04 4E 85 A1 |  if_e	sub	fp, #4
2b780     FD 00 68 AC |  if_e	wrlong	#0, result1
2b784                 | ' 
2b784                 | ' 
2b784                 | ' 
2b784                 | ' 
2b784                 | ' 		dp->obj.fs = 0;
2b784                 | ' #line 4633 "ff.c"
2b784                 | ' 	}
2b784                 | ' 	return res;
2b784     08 4E 05 F1 | 	add	fp, #8
2b788     A7 FA 01 FB | 	rdlong	result1, fp
2b78c     08 4E 85 F1 | 	sub	fp, #8
2b790     A7 F0 03 F6 | 	mov	ptra, fp
2b794     B2 00 A0 FD | 	call	#popregs_
2b798                 | _fatfs_cc_f_closedir_ret
2b798     2D 00 64 FD | 	ret
2b79c                 | 
2b79c                 | _fatfs_cc_f_readdir
2b79c     00 4A 05 F6 | 	mov	COUNT_, #0
2b7a0     A8 00 A0 FD | 	call	#pushregs_
2b7a4     14 F0 07 F1 | 	add	ptra, #20
2b7a8     04 4E 05 F1 | 	add	fp, #4
2b7ac     A7 12 62 FC | 	wrlong	arg01, fp
2b7b0     04 4E 05 F1 | 	add	fp, #4
2b7b4     A7 14 62 FC | 	wrlong	arg02, fp
2b7b8     04 4E 85 F1 | 	sub	fp, #4
2b7bc     A7 12 02 FB | 	rdlong	arg01, fp
2b7c0     0C 4E 05 F1 | 	add	fp, #12
2b7c4     A7 14 02 F6 | 	mov	arg02, fp
2b7c8     10 4E 85 F1 | 	sub	fp, #16
2b7cc     54 DD BF FD | 	call	#_fatfs_cc_validate
2b7d0     0C 4E 05 F1 | 	add	fp, #12
2b7d4     A7 FA 61 FC | 	wrlong	result1, fp
2b7d8     0C 4E 85 F1 | 	sub	fp, #12
2b7dc     00 FA 0D F2 | 	cmp	result1, #0 wz
2b7e0     BC 00 90 5D |  if_ne	jmp	#LR__4383
2b7e4     08 4E 05 F1 | 	add	fp, #8
2b7e8     A7 FA 09 FB | 	rdlong	result1, fp wz
2b7ec     08 4E 85 F1 | 	sub	fp, #8
2b7f0     24 00 90 5D |  if_ne	jmp	#LR__4380
2b7f4     04 4E 05 F1 | 	add	fp, #4
2b7f8     A7 12 02 FB | 	rdlong	arg01, fp
2b7fc     04 4E 85 F1 | 	sub	fp, #4
2b800     00 14 06 F6 | 	mov	arg02, #0
2b804     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2b808     0C 4E 05 F1 | 	add	fp, #12
2b80c     A7 FA 61 FC | 	wrlong	result1, fp
2b810     0C 4E 85 F1 | 	sub	fp, #12
2b814     88 00 90 FD | 	jmp	#LR__4382
2b818                 | LR__4380
2b818     04 4E 05 F1 | 	add	fp, #4
2b81c     A7 12 02 FB | 	rdlong	arg01, fp
2b820     04 4E 85 F1 | 	sub	fp, #4
2b824     00 14 06 F6 | 	mov	arg02, #0
2b828     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2b82c     0C 4E 05 F1 | 	add	fp, #12
2b830     A7 FA 61 FC | 	wrlong	result1, fp
2b834     0C 4E 85 F1 | 	sub	fp, #12
2b838     04 FA 0D F2 | 	cmp	result1, #4 wz
2b83c     0C 4E 05 A1 |  if_e	add	fp, #12
2b840     A7 00 68 AC |  if_e	wrlong	#0, fp
2b844     0C 4E 85 A1 |  if_e	sub	fp, #12
2b848     0C 4E 05 F1 | 	add	fp, #12
2b84c     A7 FA 09 FB | 	rdlong	result1, fp wz
2b850     0C 4E 85 F1 | 	sub	fp, #12
2b854     48 00 90 5D |  if_ne	jmp	#LR__4381
2b858     04 4E 05 F1 | 	add	fp, #4
2b85c     A7 12 02 FB | 	rdlong	arg01, fp
2b860     04 4E 05 F1 | 	add	fp, #4
2b864     A7 14 02 FB | 	rdlong	arg02, fp
2b868     08 4E 85 F1 | 	sub	fp, #8
2b86c     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2b870     04 4E 05 F1 | 	add	fp, #4
2b874     A7 12 02 FB | 	rdlong	arg01, fp
2b878     04 4E 85 F1 | 	sub	fp, #4
2b87c     00 14 06 F6 | 	mov	arg02, #0
2b880     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2b884     0C 4E 05 F1 | 	add	fp, #12
2b888     A7 FA 61 FC | 	wrlong	result1, fp
2b88c     0C 4E 85 F1 | 	sub	fp, #12
2b890     04 FA 0D F2 | 	cmp	result1, #4 wz
2b894     0C 4E 05 A1 |  if_e	add	fp, #12
2b898     A7 00 68 AC |  if_e	wrlong	#0, fp
2b89c     0C 4E 85 A1 |  if_e	sub	fp, #12
2b8a0                 | LR__4381
2b8a0                 | LR__4382
2b8a0                 | LR__4383
2b8a0                 | ' 			}
2b8a0                 | ' 			;
2b8a0                 | ' 		}
2b8a0                 | ' 	}
2b8a0                 | ' 	return res ;
2b8a0     0C 4E 05 F1 | 	add	fp, #12
2b8a4     A7 FA 01 FB | 	rdlong	result1, fp
2b8a8     0C 4E 85 F1 | 	sub	fp, #12
2b8ac     A7 F0 03 F6 | 	mov	ptra, fp
2b8b0     B2 00 A0 FD | 	call	#popregs_
2b8b4                 | _fatfs_cc_f_readdir_ret
2b8b4     2D 00 64 FD | 	ret
2b8b8                 | 
2b8b8                 | _fatfs_cc_f_stat
2b8b8     00 4A 05 F6 | 	mov	COUNT_, #0
2b8bc     A8 00 A0 FD | 	call	#pushregs_
2b8c0     40 F0 07 F1 | 	add	ptra, #64
2b8c4     04 4E 05 F1 | 	add	fp, #4
2b8c8     A7 12 62 FC | 	wrlong	arg01, fp
2b8cc     04 4E 05 F1 | 	add	fp, #4
2b8d0     A7 14 62 FC | 	wrlong	arg02, fp
2b8d4     04 4E 85 F1 | 	sub	fp, #4
2b8d8     A7 12 02 F6 | 	mov	arg01, fp
2b8dc     0C 4E 05 F1 | 	add	fp, #12
2b8e0     A7 14 02 F6 | 	mov	arg02, fp
2b8e4     10 4E 85 F1 | 	sub	fp, #16
2b8e8     00 16 06 F6 | 	mov	arg03, #0
2b8ec     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2b8f0     0C 4E 05 F1 | 	add	fp, #12
2b8f4     A7 FA 61 FC | 	wrlong	result1, fp
2b8f8     0C 4E 85 F1 | 	sub	fp, #12
2b8fc     00 FA 0D F2 | 	cmp	result1, #0 wz
2b900     74 00 90 5D |  if_ne	jmp	#LR__4393
2b904     10 4E 05 F1 | 	add	fp, #16
2b908     A7 12 02 F6 | 	mov	arg01, fp
2b90c     0C 4E 85 F1 | 	sub	fp, #12
2b910     A7 14 02 FB | 	rdlong	arg02, fp
2b914     04 4E 85 F1 | 	sub	fp, #4
2b918     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2b91c     0C 4E 05 F1 | 	add	fp, #12
2b920     A7 FA 61 FC | 	wrlong	result1, fp
2b924     0C 4E 85 F1 | 	sub	fp, #12
2b928     00 FA 0D F2 | 	cmp	result1, #0 wz
2b92c     48 00 90 5D |  if_ne	jmp	#LR__4392
2b930     3B 4E 05 F1 | 	add	fp, #59
2b934     A7 FA C1 FA | 	rdbyte	result1, fp
2b938     3B 4E 85 F1 | 	sub	fp, #59
2b93c     80 FA CD F7 | 	test	result1, #128 wz
2b940     0C 4E 05 51 |  if_ne	add	fp, #12
2b944     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2b948     0C 4E 85 51 |  if_ne	sub	fp, #12
2b94c     28 00 90 5D |  if_ne	jmp	#LR__4391
2b950     08 4E 05 F1 | 	add	fp, #8
2b954     A7 FA 09 FB | 	rdlong	result1, fp wz
2b958     08 4E 85 F1 | 	sub	fp, #8
2b95c     18 00 90 AD |  if_e	jmp	#LR__4390
2b960     10 4E 05 F1 | 	add	fp, #16
2b964     A7 12 02 F6 | 	mov	arg01, fp
2b968     08 4E 85 F1 | 	sub	fp, #8
2b96c     A7 14 02 FB | 	rdlong	arg02, fp
2b970     08 4E 85 F1 | 	sub	fp, #8
2b974     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
2b978                 | LR__4390
2b978                 | LR__4391
2b978                 | LR__4392
2b978                 | LR__4393
2b978                 | ' 			}
2b978                 | ' 		}
2b978                 | ' 		;
2b978                 | ' 	}
2b978                 | ' 
2b978                 | ' 	return res ;
2b978     0C 4E 05 F1 | 	add	fp, #12
2b97c     A7 FA 01 FB | 	rdlong	result1, fp
2b980     0C 4E 85 F1 | 	sub	fp, #12
2b984     A7 F0 03 F6 | 	mov	ptra, fp
2b988     B2 00 A0 FD | 	call	#popregs_
2b98c                 | _fatfs_cc_f_stat_ret
2b98c     2D 00 64 FD | 	ret
2b990                 | 
2b990                 | _fatfs_cc_f_unlink
2b990     00 4A 05 F6 | 	mov	COUNT_, #0
2b994     A8 00 A0 FD | 	call	#pushregs_
2b998     74 F0 07 F1 | 	add	ptra, #116
2b99c     04 4E 05 F1 | 	add	fp, #4
2b9a0     A7 12 62 FC | 	wrlong	arg01, fp
2b9a4     68 4E 05 F1 | 	add	fp, #104
2b9a8     A7 00 68 FC | 	wrlong	#0, fp
2b9ac     68 4E 85 F1 | 	sub	fp, #104
2b9b0     A7 12 02 F6 | 	mov	arg01, fp
2b9b4     6C 4E 05 F1 | 	add	fp, #108
2b9b8     A7 14 02 F6 | 	mov	arg02, fp
2b9bc     70 4E 85 F1 | 	sub	fp, #112
2b9c0     02 16 06 F6 | 	mov	arg03, #2
2b9c4     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2b9c8     08 4E 05 F1 | 	add	fp, #8
2b9cc     A7 FA 61 FC | 	wrlong	result1, fp
2b9d0     08 4E 85 F1 | 	sub	fp, #8
2b9d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2b9d8     E4 01 90 5D |  if_ne	jmp	#LR__4408
2b9dc     70 4E 05 F1 | 	add	fp, #112
2b9e0     A7 16 02 FB | 	rdlong	arg03, fp
2b9e4     64 4E 85 F1 | 	sub	fp, #100
2b9e8     A7 16 62 FC | 	wrlong	arg03, fp
2b9ec     A7 12 02 F6 | 	mov	arg01, fp
2b9f0     08 4E 85 F1 | 	sub	fp, #8
2b9f4     A7 14 02 FB | 	rdlong	arg02, fp
2b9f8     04 4E 85 F1 | 	sub	fp, #4
2b9fc     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2ba00     08 4E 05 F1 | 	add	fp, #8
2ba04     A7 FA 61 FC | 	wrlong	result1, fp
2ba08     00 FA 4D F2 | 	cmps	result1, #0 wz
2ba0c     08 4E 85 F1 | 	sub	fp, #8
2ba10     AC 01 90 5D |  if_ne	jmp	#LR__4407
2ba14     37 4E 05 F1 | 	add	fp, #55
2ba18     A7 FA C1 FA | 	rdbyte	result1, fp
2ba1c     37 4E 85 F1 | 	sub	fp, #55
2ba20     80 FA CD F7 | 	test	result1, #128 wz
2ba24     08 4E 05 51 |  if_ne	add	fp, #8
2ba28     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2ba2c     08 4E 85 51 |  if_ne	sub	fp, #8
2ba30     1C 00 90 5D |  if_ne	jmp	#LR__4400
2ba34     12 4E 05 F1 | 	add	fp, #18
2ba38     A7 FA C1 FA | 	rdbyte	result1, fp
2ba3c     12 4E 85 F1 | 	sub	fp, #18
2ba40     01 FA CD F7 | 	test	result1, #1 wz
2ba44     08 4E 05 51 |  if_ne	add	fp, #8
2ba48     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2ba4c     08 4E 85 51 |  if_ne	sub	fp, #8
2ba50                 | LR__4400
2ba50     08 4E 05 F1 | 	add	fp, #8
2ba54     A7 FA 09 FB | 	rdlong	result1, fp wz
2ba58     08 4E 85 F1 | 	sub	fp, #8
2ba5c     C8 00 90 5D |  if_ne	jmp	#LR__4403
2ba60     70 4E 05 F1 | 	add	fp, #112
2ba64     A7 12 02 FB | 	rdlong	arg01, fp
2ba68     48 4E 85 F1 | 	sub	fp, #72
2ba6c     A7 14 02 FB | 	rdlong	arg02, fp
2ba70     28 4E 85 F1 | 	sub	fp, #40
2ba74     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2ba78     6C 4E 05 F1 | 	add	fp, #108
2ba7c     A7 FA 61 FC | 	wrlong	result1, fp
2ba80     5A 4E 85 F1 | 	sub	fp, #90
2ba84     A7 FA C1 FA | 	rdbyte	result1, fp
2ba88     12 4E 85 F1 | 	sub	fp, #18
2ba8c     10 FA CD F7 | 	test	result1, #16 wz
2ba90     94 00 90 AD |  if_e	jmp	#LR__4402
2ba94     70 4E 05 F1 | 	add	fp, #112
2ba98     A7 FA 01 FB | 	rdlong	result1, fp
2ba9c     34 4E 85 F1 | 	sub	fp, #52
2baa0     A7 FA 61 FC | 	wrlong	result1, fp
2baa4     30 4E 05 F1 | 	add	fp, #48
2baa8     A7 16 02 FB | 	rdlong	arg03, fp
2baac     28 4E 85 F1 | 	sub	fp, #40
2bab0     A7 16 62 FC | 	wrlong	arg03, fp
2bab4     08 4E 85 F1 | 	sub	fp, #8
2bab8     A7 12 02 F6 | 	mov	arg01, fp
2babc     3C 4E 85 F1 | 	sub	fp, #60
2bac0     00 14 06 F6 | 	mov	arg02, #0
2bac4     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2bac8     08 4E 05 F1 | 	add	fp, #8
2bacc     A7 FA 61 FC | 	wrlong	result1, fp
2bad0     08 4E 85 F1 | 	sub	fp, #8
2bad4     00 FA 0D F2 | 	cmp	result1, #0 wz
2bad8     4C 00 90 5D |  if_ne	jmp	#LR__4401
2badc     3C 4E 05 F1 | 	add	fp, #60
2bae0     A7 12 02 F6 | 	mov	arg01, fp
2bae4     3C 4E 85 F1 | 	sub	fp, #60
2bae8     00 14 06 F6 | 	mov	arg02, #0
2baec     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
2baf0     08 4E 05 F1 | 	add	fp, #8
2baf4     A7 FA 61 FC | 	wrlong	result1, fp
2baf8     00 FA 4D F2 | 	cmps	result1, #0 wz
2bafc     08 4E 85 F1 | 	sub	fp, #8
2bb00     08 4E 05 A1 |  if_e	add	fp, #8
2bb04     A7 0E 68 AC |  if_e	wrlong	#7, fp
2bb08     08 4E 85 A1 |  if_e	sub	fp, #8
2bb0c     08 4E 05 F1 | 	add	fp, #8
2bb10     A7 FA 01 FB | 	rdlong	result1, fp
2bb14     08 4E 85 F1 | 	sub	fp, #8
2bb18     04 FA 0D F2 | 	cmp	result1, #4 wz
2bb1c     08 4E 05 A1 |  if_e	add	fp, #8
2bb20     A7 00 68 AC |  if_e	wrlong	#0, fp
2bb24     08 4E 85 A1 |  if_e	sub	fp, #8
2bb28                 | LR__4401
2bb28                 | LR__4402
2bb28                 | LR__4403
2bb28     08 4E 05 F1 | 	add	fp, #8
2bb2c     A7 FA 09 FB | 	rdlong	result1, fp wz
2bb30     08 4E 85 F1 | 	sub	fp, #8
2bb34     88 00 90 5D |  if_ne	jmp	#LR__4406
2bb38     0C 4E 05 F1 | 	add	fp, #12
2bb3c     A7 12 02 F6 | 	mov	arg01, fp
2bb40     0C 4E 85 F1 | 	sub	fp, #12
2bb44     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2bb48     08 4E 05 F1 | 	add	fp, #8
2bb4c     A7 FA 61 FC | 	wrlong	result1, fp
2bb50     08 4E 85 F1 | 	sub	fp, #8
2bb54     00 FA 0D F2 | 	cmp	result1, #0 wz
2bb58     38 00 90 5D |  if_ne	jmp	#LR__4404
2bb5c     6C 4E 05 F1 | 	add	fp, #108
2bb60     A7 FA 09 FB | 	rdlong	result1, fp wz
2bb64     6C 4E 85 F1 | 	sub	fp, #108
2bb68     28 00 90 AD |  if_e	jmp	#LR__4404
2bb6c     0C 4E 05 F1 | 	add	fp, #12
2bb70     A7 12 02 F6 | 	mov	arg01, fp
2bb74     60 4E 05 F1 | 	add	fp, #96
2bb78     A7 14 02 FB | 	rdlong	arg02, fp
2bb7c     6C 4E 85 F1 | 	sub	fp, #108
2bb80     00 16 06 F6 | 	mov	arg03, #0
2bb84     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2bb88     08 4E 05 F1 | 	add	fp, #8
2bb8c     A7 FA 61 FC | 	wrlong	result1, fp
2bb90     08 4E 85 F1 | 	sub	fp, #8
2bb94                 | LR__4404
2bb94     08 4E 05 F1 | 	add	fp, #8
2bb98     A7 FA 09 FB | 	rdlong	result1, fp wz
2bb9c     08 4E 85 F1 | 	sub	fp, #8
2bba0     1C 00 90 5D |  if_ne	jmp	#LR__4405
2bba4     70 4E 05 F1 | 	add	fp, #112
2bba8     A7 12 02 FB | 	rdlong	arg01, fp
2bbac     70 4E 85 F1 | 	sub	fp, #112
2bbb0     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2bbb4     08 4E 05 F1 | 	add	fp, #8
2bbb8     A7 FA 61 FC | 	wrlong	result1, fp
2bbbc     08 4E 85 F1 | 	sub	fp, #8
2bbc0                 | LR__4405
2bbc0                 | LR__4406
2bbc0                 | LR__4407
2bbc0                 | LR__4408
2bbc0                 | ' 			}
2bbc0                 | ' 		}
2bbc0                 | ' 		;
2bbc0                 | ' 	}
2bbc0                 | ' 
2bbc0                 | ' 	return res ;
2bbc0     08 4E 05 F1 | 	add	fp, #8
2bbc4     A7 FA 01 FB | 	rdlong	result1, fp
2bbc8     08 4E 85 F1 | 	sub	fp, #8
2bbcc     A7 F0 03 F6 | 	mov	ptra, fp
2bbd0     B2 00 A0 FD | 	call	#popregs_
2bbd4                 | _fatfs_cc_f_unlink_ret
2bbd4     2D 00 64 FD | 	ret
2bbd8                 | 
2bbd8                 | _fatfs_cc_f_mkdir
2bbd8     00 4A 05 F6 | 	mov	COUNT_, #0
2bbdc     A8 00 A0 FD | 	call	#pushregs_
2bbe0     5C F0 07 F1 | 	add	ptra, #92
2bbe4     04 4E 05 F1 | 	add	fp, #4
2bbe8     A7 12 62 FC | 	wrlong	arg01, fp
2bbec     A7 12 02 F6 | 	mov	arg01, fp
2bbf0     48 4E 05 F1 | 	add	fp, #72
2bbf4     A7 14 02 F6 | 	mov	arg02, fp
2bbf8     4C 4E 85 F1 | 	sub	fp, #76
2bbfc     02 16 06 F6 | 	mov	arg03, #2
2bc00     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2bc04     08 4E 05 F1 | 	add	fp, #8
2bc08     A7 FA 61 FC | 	wrlong	result1, fp
2bc0c     08 4E 85 F1 | 	sub	fp, #8
2bc10     00 FA 0D F2 | 	cmp	result1, #0 wz
2bc14     C4 02 90 5D |  if_ne	jmp	#LR__4415
2bc18     4C 4E 05 F1 | 	add	fp, #76
2bc1c     A7 16 02 FB | 	rdlong	arg03, fp
2bc20     40 4E 85 F1 | 	sub	fp, #64
2bc24     A7 16 62 FC | 	wrlong	arg03, fp
2bc28     A7 12 02 F6 | 	mov	arg01, fp
2bc2c     08 4E 85 F1 | 	sub	fp, #8
2bc30     A7 14 02 FB | 	rdlong	arg02, fp
2bc34     04 4E 85 F1 | 	sub	fp, #4
2bc38     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2bc3c     08 4E 05 F1 | 	add	fp, #8
2bc40     A7 FA 61 FC | 	wrlong	result1, fp
2bc44     00 FA 4D F2 | 	cmps	result1, #0 wz
2bc48     08 4E 85 F1 | 	sub	fp, #8
2bc4c     08 4E 05 A1 |  if_e	add	fp, #8
2bc50     A7 10 68 AC |  if_e	wrlong	#8, fp
2bc54     08 4E 85 A1 |  if_e	sub	fp, #8
2bc58     08 4E 05 F1 | 	add	fp, #8
2bc5c     A7 FA 01 FB | 	rdlong	result1, fp
2bc60     08 4E 85 F1 | 	sub	fp, #8
2bc64     04 FA 0D F2 | 	cmp	result1, #4 wz
2bc68     70 02 90 5D |  if_ne	jmp	#LR__4414
2bc6c     4C 4E 05 F1 | 	add	fp, #76
2bc70     A7 16 02 FB | 	rdlong	arg03, fp
2bc74     10 4E 85 F1 | 	sub	fp, #16
2bc78     A7 16 62 FC | 	wrlong	arg03, fp
2bc7c     A7 12 02 F6 | 	mov	arg01, fp
2bc80     3C 4E 85 F1 | 	sub	fp, #60
2bc84     00 14 06 F6 | 	mov	arg02, #0
2bc88     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2bc8c     50 4E 05 F1 | 	add	fp, #80
2bc90     A7 FA 61 FC | 	wrlong	result1, fp
2bc94     48 4E 85 F1 | 	sub	fp, #72
2bc98     A7 00 68 FC | 	wrlong	#0, fp
2bc9c     48 4E 05 F1 | 	add	fp, #72
2bca0     A7 FA 09 FB | 	rdlong	result1, fp wz
2bca4     50 4E 85 F1 | 	sub	fp, #80
2bca8     08 4E 05 A1 |  if_e	add	fp, #8
2bcac     A7 0E 68 AC |  if_e	wrlong	#7, fp
2bcb0     08 4E 85 A1 |  if_e	sub	fp, #8
2bcb4     50 4E 05 F1 | 	add	fp, #80
2bcb8     A7 FA 01 FB | 	rdlong	result1, fp
2bcbc     50 4E 85 F1 | 	sub	fp, #80
2bcc0     01 FA 0D F2 | 	cmp	result1, #1 wz
2bcc4     08 4E 05 A1 |  if_e	add	fp, #8
2bcc8     A7 04 68 AC |  if_e	wrlong	#2, fp
2bccc     08 4E 85 A1 |  if_e	sub	fp, #8
2bcd0     50 4E 05 F1 | 	add	fp, #80
2bcd4     A7 16 02 FB | 	rdlong	arg03, fp
2bcd8     50 4E 85 F1 | 	sub	fp, #80
2bcdc     FF FF 7F FF 
2bce0     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2bce4     08 4E 05 A1 |  if_e	add	fp, #8
2bce8     A7 02 68 AC |  if_e	wrlong	#1, fp
2bcec     08 4E 85 A1 |  if_e	sub	fp, #8
2bcf0     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2bcf4     58 4E 05 F1 | 	add	fp, #88
2bcf8     A7 FA 61 FC | 	wrlong	result1, fp
2bcfc     50 4E 85 F1 | 	sub	fp, #80
2bd00     A7 FA 09 FB | 	rdlong	result1, fp wz
2bd04     08 4E 85 F1 | 	sub	fp, #8
2bd08     1C 01 90 5D |  if_ne	jmp	#LR__4411
2bd0c     4C 4E 05 F1 | 	add	fp, #76
2bd10     A7 12 02 FB | 	rdlong	arg01, fp
2bd14     04 4E 05 F1 | 	add	fp, #4
2bd18     A7 14 02 FB | 	rdlong	arg02, fp
2bd1c     50 4E 85 F1 | 	sub	fp, #80
2bd20     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
2bd24     08 4E 05 F1 | 	add	fp, #8
2bd28     A7 FA 61 FC | 	wrlong	result1, fp
2bd2c     00 FA 4D F2 | 	cmps	result1, #0 wz
2bd30     08 4E 85 F1 | 	sub	fp, #8
2bd34     F0 00 90 5D |  if_ne	jmp	#LR__4410
2bd38     4C 4E 05 F1 | 	add	fp, #76
2bd3c     A7 12 02 FB | 	rdlong	arg01, fp
2bd40     4C 4E 85 F1 | 	sub	fp, #76
2bd44     34 12 06 F1 | 	add	arg01, #52
2bd48     20 14 06 F6 | 	mov	arg02, #32
2bd4c     0B 16 06 F6 | 	mov	arg03, #11
2bd50     98 00 A0 FD | 	call	#\builtin_bytefill_
2bd54     4C 4E 05 F1 | 	add	fp, #76
2bd58     A7 FA 01 FB | 	rdlong	result1, fp
2bd5c     34 FA 05 F1 | 	add	result1, #52
2bd60     FD 5C 48 FC | 	wrbyte	#46, result1
2bd64     A7 16 02 FB | 	rdlong	arg03, fp
2bd68     3F 16 06 F1 | 	add	arg03, #63
2bd6c     0B 21 48 FC | 	wrbyte	#16, arg03
2bd70     A7 12 02 FB | 	rdlong	arg01, fp
2bd74     4A 12 06 F1 | 	add	arg01, #74
2bd78     0C 4E 05 F1 | 	add	fp, #12
2bd7c     A7 14 02 FB | 	rdlong	arg02, fp
2bd80     09 15 62 FC | 	wrlong	arg02, arg01
2bd84     0C 4E 85 F1 | 	sub	fp, #12
2bd88     A7 14 02 FB | 	rdlong	arg02, fp
2bd8c     0A 13 02 F6 | 	mov	arg01, arg02
2bd90     34 14 06 F1 | 	add	arg02, #52
2bd94     04 4E 05 F1 | 	add	fp, #4
2bd98     A7 16 02 FB | 	rdlong	arg03, fp
2bd9c     50 4E 85 F1 | 	sub	fp, #80
2bda0     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
2bda4     4C 4E 05 F1 | 	add	fp, #76
2bda8     A7 14 02 FB | 	rdlong	arg02, fp
2bdac     0A 13 02 F6 | 	mov	arg01, arg02
2bdb0     54 12 06 F1 | 	add	arg01, #84
2bdb4     4C 4E 85 F1 | 	sub	fp, #76
2bdb8     34 14 06 F1 | 	add	arg02, #52
2bdbc     20 16 06 F6 | 	mov	arg03, #32
2bdc0     D0 2C BF FD | 	call	#__system____builtin_memmove
2bdc4     4C 4E 05 F1 | 	add	fp, #76
2bdc8     A7 16 02 FB | 	rdlong	arg03, fp
2bdcc     55 16 06 F1 | 	add	arg03, #85
2bdd0     0B 5D 48 FC | 	wrbyte	#46, arg03
2bdd4     38 4E 85 F1 | 	sub	fp, #56
2bdd8     A7 16 02 FB | 	rdlong	arg03, fp
2bddc     40 4E 05 F1 | 	add	fp, #64
2bde0     A7 16 62 FC | 	wrlong	arg03, fp
2bde4     08 4E 85 F1 | 	sub	fp, #8
2bde8     A7 14 02 FB | 	rdlong	arg02, fp
2bdec     0A 13 02 F6 | 	mov	arg01, arg02
2bdf0     54 14 06 F1 | 	add	arg02, #84
2bdf4     4C 4E 85 F1 | 	sub	fp, #76
2bdf8     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2bdfc     4C 4E 05 F1 | 	add	fp, #76
2be00     A7 16 02 FB | 	rdlong	arg03, fp
2be04     03 16 06 F1 | 	add	arg03, #3
2be08     0B 03 48 FC | 	wrbyte	#1, arg03
2be0c     40 4E 85 F1 | 	sub	fp, #64
2be10     A7 12 02 F6 | 	mov	arg01, fp
2be14     0C 4E 85 F1 | 	sub	fp, #12
2be18     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2be1c     08 4E 05 F1 | 	add	fp, #8
2be20     A7 FA 61 FC | 	wrlong	result1, fp
2be24     08 4E 85 F1 | 	sub	fp, #8
2be28                 | LR__4410
2be28                 | LR__4411
2be28     08 4E 05 F1 | 	add	fp, #8
2be2c     A7 FA 09 FB | 	rdlong	result1, fp wz
2be30     08 4E 85 F1 | 	sub	fp, #8
2be34     88 00 90 5D |  if_ne	jmp	#LR__4412
2be38     28 4E 05 F1 | 	add	fp, #40
2be3c     A7 12 02 FB | 	rdlong	arg01, fp
2be40     16 12 06 F1 | 	add	arg01, #22
2be44     30 4E 05 F1 | 	add	fp, #48
2be48     A7 14 02 FB | 	rdlong	arg02, fp
2be4c     09 15 62 FC | 	wrlong	arg02, arg01
2be50     0C 4E 85 F1 | 	sub	fp, #12
2be54     A7 12 02 FB | 	rdlong	arg01, fp
2be58     24 4E 85 F1 | 	sub	fp, #36
2be5c     A7 14 02 FB | 	rdlong	arg02, fp
2be60     28 4E 05 F1 | 	add	fp, #40
2be64     A7 16 02 FB | 	rdlong	arg03, fp
2be68     50 4E 85 F1 | 	sub	fp, #80
2be6c     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2be70     28 4E 05 F1 | 	add	fp, #40
2be74     A7 FA 01 FB | 	rdlong	result1, fp
2be78     0B FA 05 F1 | 	add	result1, #11
2be7c     FD 20 48 FC | 	wrbyte	#16, result1
2be80     24 4E 05 F1 | 	add	fp, #36
2be84     A7 FA 01 FB | 	rdlong	result1, fp
2be88     03 FA 05 F1 | 	add	result1, #3
2be8c     FD 02 48 FC | 	wrbyte	#1, result1
2be90     44 4E 85 F1 | 	sub	fp, #68
2be94     A7 FA 09 FB | 	rdlong	result1, fp wz
2be98     08 4E 85 F1 | 	sub	fp, #8
2be9c     3C 00 90 5D |  if_ne	jmp	#LR__4413
2bea0     4C 4E 05 F1 | 	add	fp, #76
2bea4     A7 12 02 FB | 	rdlong	arg01, fp
2bea8     4C 4E 85 F1 | 	sub	fp, #76
2beac     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2beb0     08 4E 05 F1 | 	add	fp, #8
2beb4     A7 FA 61 FC | 	wrlong	result1, fp
2beb8     08 4E 85 F1 | 	sub	fp, #8
2bebc     1C 00 90 FD | 	jmp	#LR__4413
2bec0                 | LR__4412
2bec0     3C 4E 05 F1 | 	add	fp, #60
2bec4     A7 12 02 F6 | 	mov	arg01, fp
2bec8     14 4E 05 F1 | 	add	fp, #20
2becc     A7 14 02 FB | 	rdlong	arg02, fp
2bed0     50 4E 85 F1 | 	sub	fp, #80
2bed4     00 16 06 F6 | 	mov	arg03, #0
2bed8     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2bedc                 | LR__4413
2bedc                 | LR__4414
2bedc                 | LR__4415
2bedc                 | ' 				remove_chain(&sobj, dcl, 0);
2bedc                 | ' 			}
2bedc                 | ' 		}
2bedc                 | ' 		;
2bedc                 | ' 	}
2bedc                 | ' 
2bedc                 | ' 	return res ;
2bedc     08 4E 05 F1 | 	add	fp, #8
2bee0     A7 FA 01 FB | 	rdlong	result1, fp
2bee4     08 4E 85 F1 | 	sub	fp, #8
2bee8     A7 F0 03 F6 | 	mov	ptra, fp
2beec     B2 00 A0 FD | 	call	#popregs_
2bef0                 | _fatfs_cc_f_mkdir_ret
2bef0     2D 00 64 FD | 	ret
2bef4                 | 
2bef4                 | _fatfs_cc_f_rename
2bef4     01 4A 05 F6 | 	mov	COUNT_, #1
2bef8     A8 00 A0 FD | 	call	#pushregs_
2befc     9C F0 07 F1 | 	add	ptra, #156
2bf00     04 4E 05 F1 | 	add	fp, #4
2bf04     A7 12 62 FC | 	wrlong	arg01, fp
2bf08     04 4E 05 F1 | 	add	fp, #4
2bf0c     A7 14 62 FC | 	wrlong	arg02, fp
2bf10     A7 12 02 F6 | 	mov	arg01, fp
2bf14     08 4E 85 F1 | 	sub	fp, #8
2bf18     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2bf1c     04 4E 05 F1 | 	add	fp, #4
2bf20     A7 12 02 F6 | 	mov	arg01, fp
2bf24     6C 4E 05 F1 | 	add	fp, #108
2bf28     A7 14 02 F6 | 	mov	arg02, fp
2bf2c     70 4E 85 F1 | 	sub	fp, #112
2bf30     02 16 06 F6 | 	mov	arg03, #2
2bf34     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2bf38     0C 4E 05 F1 | 	add	fp, #12
2bf3c     A7 FA 61 FC | 	wrlong	result1, fp
2bf40     0C 4E 85 F1 | 	sub	fp, #12
2bf44     00 FA 0D F2 | 	cmp	result1, #0 wz
2bf48     44 03 90 5D |  if_ne	jmp	#LR__4433
2bf4c     70 4E 05 F1 | 	add	fp, #112
2bf50     A7 16 02 FB | 	rdlong	arg03, fp
2bf54     60 4E 85 F1 | 	sub	fp, #96
2bf58     A7 16 62 FC | 	wrlong	arg03, fp
2bf5c     A7 12 02 F6 | 	mov	arg01, fp
2bf60     0C 4E 85 F1 | 	sub	fp, #12
2bf64     A7 14 02 FB | 	rdlong	arg02, fp
2bf68     04 4E 85 F1 | 	sub	fp, #4
2bf6c     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2bf70     0C 4E 05 F1 | 	add	fp, #12
2bf74     A7 FA 61 FC | 	wrlong	result1, fp
2bf78     00 FA 4D F2 | 	cmps	result1, #0 wz
2bf7c     0C 4E 85 F1 | 	sub	fp, #12
2bf80     1C 00 90 5D |  if_ne	jmp	#LR__4420
2bf84     3B 4E 05 F1 | 	add	fp, #59
2bf88     A7 FA C1 FA | 	rdbyte	result1, fp
2bf8c     3B 4E 85 F1 | 	sub	fp, #59
2bf90     A0 FA CD F7 | 	test	result1, #160 wz
2bf94     0C 4E 05 51 |  if_ne	add	fp, #12
2bf98     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2bf9c     0C 4E 85 51 |  if_ne	sub	fp, #12
2bfa0                 | LR__4420
2bfa0     0C 4E 05 F1 | 	add	fp, #12
2bfa4     A7 1E 0A FB | 	rdlong	local01, fp wz
2bfa8     0C 4E 85 F1 | 	sub	fp, #12
2bfac     E0 02 90 5D |  if_ne	jmp	#LR__4432
2bfb0     74 4E 05 F1 | 	add	fp, #116
2bfb4     A7 12 02 F6 | 	mov	arg01, fp
2bfb8     48 4E 85 F1 | 	sub	fp, #72
2bfbc     A7 14 02 FB | 	rdlong	arg02, fp
2bfc0     2C 4E 85 F1 | 	sub	fp, #44
2bfc4     20 16 06 F6 | 	mov	arg03, #32
2bfc8     C8 2A BF FD | 	call	#__system____builtin_memmove
2bfcc     40 4E 05 F1 | 	add	fp, #64
2bfd0     A7 12 02 F6 | 	mov	arg01, fp
2bfd4     30 4E 85 F1 | 	sub	fp, #48
2bfd8     A7 14 02 F6 | 	mov	arg02, fp
2bfdc     10 4E 85 F1 | 	sub	fp, #16
2bfe0     30 16 06 F6 | 	mov	arg03, #48
2bfe4     AC 2A BF FD | 	call	#__system____builtin_memmove
2bfe8     40 4E 05 F1 | 	add	fp, #64
2bfec     A7 12 02 F6 | 	mov	arg01, fp
2bff0     38 4E 85 F1 | 	sub	fp, #56
2bff4     A7 14 02 FB | 	rdlong	arg02, fp
2bff8     08 4E 85 F1 | 	sub	fp, #8
2bffc     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2c000     0C 4E 05 F1 | 	add	fp, #12
2c004     A7 FA 61 FC | 	wrlong	result1, fp
2c008     0C 4E 85 F1 | 	sub	fp, #12
2c00c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c010     4C 00 90 5D |  if_ne	jmp	#LR__4423
2c014     48 4E 05 F1 | 	add	fp, #72
2c018     A7 FA 01 FB | 	rdlong	result1, fp
2c01c     30 4E 85 F1 | 	sub	fp, #48
2c020     A7 16 02 FB | 	rdlong	arg03, fp
2c024     18 4E 85 F1 | 	sub	fp, #24
2c028     0B FB 09 F2 | 	cmp	result1, arg03 wz
2c02c     20 00 90 5D |  if_ne	jmp	#LR__4421
2c030     50 4E 05 F1 | 	add	fp, #80
2c034     A7 FA 01 FB | 	rdlong	result1, fp
2c038     30 4E 85 F1 | 	sub	fp, #48
2c03c     A7 16 02 FB | 	rdlong	arg03, fp
2c040     20 4E 85 F1 | 	sub	fp, #32
2c044     0B FB 09 F2 | 	cmp	result1, arg03 wz
2c048     04 1E 06 A6 |  if_e	mov	local01, #4
2c04c     04 00 90 AD |  if_e	jmp	#LR__4422
2c050                 | LR__4421
2c050     08 1E 06 F6 | 	mov	local01, #8
2c054                 | LR__4422
2c054     0C 4E 05 F1 | 	add	fp, #12
2c058     A7 1E 62 FC | 	wrlong	local01, fp
2c05c     0C 4E 85 F1 | 	sub	fp, #12
2c060                 | LR__4423
2c060     0C 4E 05 F1 | 	add	fp, #12
2c064     A7 1E 02 FB | 	rdlong	local01, fp
2c068     0C 4E 85 F1 | 	sub	fp, #12
2c06c     04 1E 0E F2 | 	cmp	local01, #4 wz
2c070     CC 01 90 5D |  if_ne	jmp	#LR__4429
2c074     40 4E 05 F1 | 	add	fp, #64
2c078     A7 12 02 F6 | 	mov	arg01, fp
2c07c     40 4E 85 F1 | 	sub	fp, #64
2c080     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2c084     0C 4E 05 F1 | 	add	fp, #12
2c088     A7 FA 61 FC | 	wrlong	result1, fp
2c08c     0C 4E 85 F1 | 	sub	fp, #12
2c090     00 FA 0D F2 | 	cmp	result1, #0 wz
2c094     A8 01 90 5D |  if_ne	jmp	#LR__4428
2c098     5C 4E 05 F1 | 	add	fp, #92
2c09c     A7 12 02 FB | 	rdlong	arg01, fp
2c0a0     38 4E 05 F1 | 	add	fp, #56
2c0a4     A7 12 62 FC | 	wrlong	arg01, fp
2c0a8     0D 12 06 F1 | 	add	arg01, #13
2c0ac     20 4E 85 F1 | 	sub	fp, #32
2c0b0     A7 14 02 F6 | 	mov	arg02, fp
2c0b4     74 4E 85 F1 | 	sub	fp, #116
2c0b8     0D 14 06 F1 | 	add	arg02, #13
2c0bc     13 16 06 F6 | 	mov	arg03, #19
2c0c0     D0 29 BF FD | 	call	#__system____builtin_memmove
2c0c4     94 4E 05 F1 | 	add	fp, #148
2c0c8     A7 1E 02 FB | 	rdlong	local01, fp
2c0cc     15 4E 85 F1 | 	sub	fp, #21
2c0d0     A7 FA C1 FA | 	rdbyte	result1, fp
2c0d4     0B 1E 06 F1 | 	add	local01, #11
2c0d8     0F FB 41 FC | 	wrbyte	result1, local01
2c0dc     15 4E 05 F1 | 	add	fp, #21
2c0e0     A7 1E 02 FB | 	rdlong	local01, fp
2c0e4     94 4E 85 F1 | 	sub	fp, #148
2c0e8     0B 1E 06 F1 | 	add	local01, #11
2c0ec     0F 1F C2 FA | 	rdbyte	local01, local01
2c0f0     10 1E CE F7 | 	test	local01, #16 wz
2c0f4     24 00 90 5D |  if_ne	jmp	#LR__4424
2c0f8     94 4E 05 F1 | 	add	fp, #148
2c0fc     A7 FA 01 FB | 	rdlong	result1, fp
2c100     FD 1E 02 F6 | 	mov	local01, result1
2c104     94 4E 85 F1 | 	sub	fp, #148
2c108     0B FA 05 F1 | 	add	result1, #11
2c10c     FD FA C1 FA | 	rdbyte	result1, result1
2c110     20 FA 45 F5 | 	or	result1, #32
2c114     0B 1E 06 F1 | 	add	local01, #11
2c118     0F FB 41 FC | 	wrbyte	result1, local01
2c11c                 | LR__4424
2c11c     70 4E 05 F1 | 	add	fp, #112
2c120     A7 1E 02 FB | 	rdlong	local01, fp
2c124     03 1E 06 F1 | 	add	local01, #3
2c128     0F 03 48 FC | 	wrbyte	#1, local01
2c12c     24 4E 05 F1 | 	add	fp, #36
2c130     A7 1E 02 FB | 	rdlong	local01, fp
2c134     94 4E 85 F1 | 	sub	fp, #148
2c138     0B 1E 06 F1 | 	add	local01, #11
2c13c     0F 1F C2 FA | 	rdbyte	local01, local01
2c140     10 1E CE F7 | 	test	local01, #16 wz
2c144     F8 00 90 AD |  if_e	jmp	#LR__4427
2c148     18 4E 05 F1 | 	add	fp, #24
2c14c     A7 16 02 FB | 	rdlong	arg03, fp
2c150     30 4E 05 F1 | 	add	fp, #48
2c154     A7 1E 02 FB | 	rdlong	local01, fp
2c158     48 4E 85 F1 | 	sub	fp, #72
2c15c     0F 17 0A F2 | 	cmp	arg03, local01 wz
2c160     DC 00 90 AD |  if_e	jmp	#LR__4427
2c164     70 4E 05 F1 | 	add	fp, #112
2c168     A7 12 02 FB | 	rdlong	arg01, fp
2c16c     09 1F 02 F6 | 	mov	local01, arg01
2c170     24 4E 05 F1 | 	add	fp, #36
2c174     A7 14 02 FB | 	rdlong	arg02, fp
2c178     94 4E 85 F1 | 	sub	fp, #148
2c17c     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2c180     FD 14 02 F6 | 	mov	arg02, result1
2c184     0F 13 02 F6 | 	mov	arg01, local01
2c188     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
2c18c     98 4E 05 F1 | 	add	fp, #152
2c190     A7 FA 61 FC | 	wrlong	result1, fp
2c194     00 FA 4D F2 | 	cmps	result1, #0 wz
2c198     98 4E 85 F1 | 	sub	fp, #152
2c19c     0C 4E 05 A1 |  if_e	add	fp, #12
2c1a0     A7 04 68 AC |  if_e	wrlong	#2, fp
2c1a4     0C 4E 85 A1 |  if_e	sub	fp, #12
2c1a8     94 00 90 AD |  if_e	jmp	#LR__4426
2c1ac     70 4E 05 F1 | 	add	fp, #112
2c1b0     A7 12 02 FB | 	rdlong	arg01, fp
2c1b4     28 4E 05 F1 | 	add	fp, #40
2c1b8     A7 14 02 FB | 	rdlong	arg02, fp
2c1bc     98 4E 85 F1 | 	sub	fp, #152
2c1c0     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2c1c4     0C 4E 05 F1 | 	add	fp, #12
2c1c8     A7 FA 61 FC | 	wrlong	result1, fp
2c1cc     64 4E 05 F1 | 	add	fp, #100
2c1d0     A7 1E 02 FB | 	rdlong	local01, fp
2c1d4     54 1E 06 F1 | 	add	local01, #84
2c1d8     24 4E 05 F1 | 	add	fp, #36
2c1dc     A7 1E 62 FC | 	wrlong	local01, fp
2c1e0     88 4E 85 F1 | 	sub	fp, #136
2c1e4     A7 1E 0A FB | 	rdlong	local01, fp wz
2c1e8     0C 4E 85 F1 | 	sub	fp, #12
2c1ec     50 00 90 5D |  if_ne	jmp	#LR__4425
2c1f0     94 4E 05 F1 | 	add	fp, #148
2c1f4     A7 1E 02 FB | 	rdlong	local01, fp
2c1f8     94 4E 85 F1 | 	sub	fp, #148
2c1fc     01 1E 06 F1 | 	add	local01, #1
2c200     0F 1F C2 FA | 	rdbyte	local01, local01
2c204     2E 1E 0E F2 | 	cmp	local01, #46 wz
2c208     34 00 90 5D |  if_ne	jmp	#LR__4425
2c20c     70 4E 05 F1 | 	add	fp, #112
2c210     A7 12 02 FB | 	rdlong	arg01, fp
2c214     24 4E 05 F1 | 	add	fp, #36
2c218     A7 14 02 FB | 	rdlong	arg02, fp
2c21c     4C 4E 85 F1 | 	sub	fp, #76
2c220     A7 16 02 FB | 	rdlong	arg03, fp
2c224     48 4E 85 F1 | 	sub	fp, #72
2c228     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2c22c     70 4E 05 F1 | 	add	fp, #112
2c230     A7 1E 02 FB | 	rdlong	local01, fp
2c234     70 4E 85 F1 | 	sub	fp, #112
2c238     03 1E 06 F1 | 	add	local01, #3
2c23c     0F 03 48 FC | 	wrbyte	#1, local01
2c240                 | LR__4425
2c240                 | LR__4426
2c240                 | LR__4427
2c240                 | LR__4428
2c240                 | LR__4429
2c240     0C 4E 05 F1 | 	add	fp, #12
2c244     A7 1E 0A FB | 	rdlong	local01, fp wz
2c248     0C 4E 85 F1 | 	sub	fp, #12
2c24c     40 00 90 5D |  if_ne	jmp	#LR__4431
2c250     10 4E 05 F1 | 	add	fp, #16
2c254     A7 12 02 F6 | 	mov	arg01, fp
2c258     10 4E 85 F1 | 	sub	fp, #16
2c25c     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2c260     0C 4E 05 F1 | 	add	fp, #12
2c264     A7 FA 61 FC | 	wrlong	result1, fp
2c268     0C 4E 85 F1 | 	sub	fp, #12
2c26c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c270     1C 00 90 5D |  if_ne	jmp	#LR__4430
2c274     70 4E 05 F1 | 	add	fp, #112
2c278     A7 12 02 FB | 	rdlong	arg01, fp
2c27c     70 4E 85 F1 | 	sub	fp, #112
2c280     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
2c284     0C 4E 05 F1 | 	add	fp, #12
2c288     A7 FA 61 FC | 	wrlong	result1, fp
2c28c     0C 4E 85 F1 | 	sub	fp, #12
2c290                 | LR__4430
2c290                 | LR__4431
2c290                 | LR__4432
2c290                 | LR__4433
2c290                 | ' 					res = sync_fs(fs);
2c290                 | ' 				}
2c290                 | ' 			}
2c290                 | ' 
2c290                 | ' 		}
2c290                 | ' 		;
2c290                 | ' 	}
2c290                 | ' 
2c290                 | ' 	return res ;
2c290     0C 4E 05 F1 | 	add	fp, #12
2c294     A7 FA 01 FB | 	rdlong	result1, fp
2c298     0C 4E 85 F1 | 	sub	fp, #12
2c29c     A7 F0 03 F6 | 	mov	ptra, fp
2c2a0     B2 00 A0 FD | 	call	#popregs_
2c2a4                 | _fatfs_cc_f_rename_ret
2c2a4     2D 00 64 FD | 	ret
2c2a8                 | 
2c2a8                 | _fatfs_cc_time
2c2a8     00 4A 05 F6 | 	mov	COUNT_, #0
2c2ac     A8 00 A0 FD | 	call	#pushregs_
2c2b0     14 F0 07 F1 | 	add	ptra, #20
2c2b4     04 4E 05 F1 | 	add	fp, #4
2c2b8     A7 12 62 FC | 	wrlong	arg01, fp
2c2bc     04 4E 05 F1 | 	add	fp, #4
2c2c0     A7 12 02 F6 | 	mov	arg01, fp
2c2c4     08 4E 85 F1 | 	sub	fp, #8
2c2c8     00 14 06 F6 | 	mov	arg02, #0
2c2cc     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
2c2d0     08 4E 05 F1 | 	add	fp, #8
2c2d4     A7 FA 01 FB | 	rdlong	result1, fp
2c2d8     08 4E 05 F1 | 	add	fp, #8
2c2dc     A7 FA 61 FC | 	wrlong	result1, fp
2c2e0     0C 4E 85 F1 | 	sub	fp, #12
2c2e4     A7 FA 09 FB | 	rdlong	result1, fp wz
2c2e8     04 4E 85 F1 | 	sub	fp, #4
2c2ec     18 00 90 AD |  if_e	jmp	#LR__4440
2c2f0     04 4E 05 F1 | 	add	fp, #4
2c2f4     A7 FA 01 FB | 	rdlong	result1, fp
2c2f8     0C 4E 05 F1 | 	add	fp, #12
2c2fc     A7 14 02 FB | 	rdlong	arg02, fp
2c300     10 4E 85 F1 | 	sub	fp, #16
2c304     FD 14 62 FC | 	wrlong	arg02, result1
2c308                 | LR__4440
2c308                 | '         *tp = now;
2c308                 | '     return now;
2c308     10 4E 05 F1 | 	add	fp, #16
2c30c     A7 FA 01 FB | 	rdlong	result1, fp
2c310     10 4E 85 F1 | 	sub	fp, #16
2c314     A7 F0 03 F6 | 	mov	ptra, fp
2c318     B2 00 A0 FD | 	call	#popregs_
2c31c                 | _fatfs_cc_time_ret
2c31c     2D 00 64 FD | 	ret
2c320                 | 
2c320                 | _fatfs_cc_mktime
2c320     06 4A 05 F6 | 	mov	COUNT_, #6
2c324     A8 00 A0 FD | 	call	#pushregs_
2c328     09 1F 02 F6 | 	mov	local01, arg01
2c32c     14 1E 06 F1 | 	add	local01, #20
2c330     0F 13 02 FB | 	rdlong	arg01, local01
2c334     14 1E 86 F1 | 	sub	local01, #20
2c338     46 12 56 F2 | 	cmps	arg01, #70 wc
2c33c                 | '                 return (time_t) -1;
2c33c     01 FA 65 C6 |  if_b	neg	result1, #1
2c340     7C 01 90 CD |  if_b	jmp	#LR__4454
2c344     03 00 00 FF 
2c348     6C 21 06 F6 | 	mov	local02, ##1900
2c34c     14 1E 06 F1 | 	add	local01, #20
2c350     0F FB 01 FB | 	rdlong	result1, local01
2c354     FD 20 02 F1 | 	add	local02, result1
2c358     08 1E 86 F1 | 	sub	local01, #8
2c35c     0F 23 02 FB | 	rdlong	local03, local01
2c360     01 22 86 F1 | 	sub	local03, #1
2c364     04 1E 06 F1 | 	add	local01, #4
2c368     0F 13 02 FB | 	rdlong	arg01, local01
2c36c     10 1E 86 F1 | 	sub	local01, #16
2c370     02 12 66 F0 | 	shl	arg01, #2
2c374     02 00 00 FF 
2c378     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
2c37c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2c380     09 FB 01 FB | 	rdlong	result1, arg01
2c384     FD 22 02 F1 | 	add	local03, result1
2c388     10 13 02 F6 | 	mov	arg01, local02
2c38c     02 00 00 FF 
2c390     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2c394     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2c398     00 FA 0D F2 | 	cmp	result1, #0 wz
2c39c     1C 00 90 AD |  if_e	jmp	#LR__4450
2c3a0     00 24 06 F6 | 	mov	local04, #0
2c3a4     10 1E 06 F1 | 	add	local01, #16
2c3a8     0F FB 01 FB | 	rdlong	result1, local01
2c3ac     10 1E 86 F1 | 	sub	local01, #16
2c3b0     02 FA 55 F2 | 	cmps	result1, #2 wc
2c3b4     01 24 06 36 |  if_ae	mov	local04, #1
2c3b8     04 00 90 FD | 	jmp	#LR__4451
2c3bc                 | LR__4450
2c3bc     00 24 06 F6 | 	mov	local04, #0
2c3c0                 | LR__4451
2c3c0     04 1E 06 F1 | 	add	local01, #4
2c3c4     0F FB 01 FB | 	rdlong	result1, local01
2c3c8     04 1E 86 F1 | 	sub	local01, #4
2c3cc     0F 27 02 FB | 	rdlong	local05, local01
2c3d0     08 1E 06 F1 | 	add	local01, #8
2c3d4     0F 13 02 FB | 	rdlong	arg01, local01
2c3d8     07 00 00 FF 
2c3dc     10 12 06 FD | 	qmul	arg01, ##3600
2c3e0     12 23 02 F1 | 	add	local03, local04
2c3e4     FD 24 02 F6 | 	mov	local04, result1
2c3e8     04 24 66 F0 | 	shl	local04, #4
2c3ec     FD 24 82 F1 | 	sub	local04, result1
2c3f0     02 24 66 F0 | 	shl	local04, #2
2c3f4     12 27 02 F1 | 	add	local05, local04
2c3f8     08 1E 86 F1 | 	sub	local01, #8
2c3fc     18 24 62 FD | 	getqx	local04
2c400     A8 00 00 FF 
2c404     80 23 06 FD | 	qmul	local03, ##86400
2c408     12 27 02 F1 | 	add	local05, local04
2c40c     10 23 02 F6 | 	mov	local03, local02
2c410     03 00 00 FF 
2c414     B2 23 86 F1 | 	sub	local03, ##1970
2c418     18 24 62 FD | 	getqx	local04
2c41c     99 F0 00 FF 
2c420     80 23 06 FD | 	qmul	local03, ##31536000
2c424     12 27 02 F1 | 	add	local05, local04
2c428     10 23 02 F6 | 	mov	local03, local02
2c42c     03 00 00 FF 
2c430     B1 23 86 F1 | 	sub	local03, ##1969
2c434     11 29 52 F6 | 	abs	local06, local03 wc
2c438     02 28 46 F0 | 	shr	local06, #2
2c43c     14 29 82 F6 | 	negc	local06, local06
2c440     03 00 00 FF 
2c444     D1 21 56 F2 | 	cmps	local02, ##2001 wc
2c448     18 24 62 FD | 	getqx	local04
2c44c     12 27 02 F1 | 	add	local05, local04
2c450     18 00 90 CD |  if_b	jmp	#LR__4452
2c454     03 00 00 FF 
2c458     D0 21 86 F1 | 	sub	local02, ##2000
2c45c     10 25 52 F6 | 	abs	local04, local02 wc
2c460     64 24 16 FD | 	qdiv	local04, #100
2c464     18 24 62 FD | 	getqx	local04
2c468     12 29 A2 F3 | 	sumnc	local06, local04
2c46c                 | LR__4452
2c46c     A8 00 00 FF 
2c470     80 29 06 FD | 	qmul	local06, ##86400
2c474     18 28 62 FD | 	getqx	local06
2c478     14 27 02 F1 | 	add	local05, local06
2c47c     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2c480     02 00 00 FF 
2c484     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2c488     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2c48c     14 27 02 F1 | 	add	local05, local06
2c490     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2c494     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2c498     02 00 00 FF 
2c49c     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2c4a0     01 22 0E F2 | 	cmp	local03, #1 wz
2c4a4     14 00 90 5D |  if_ne	jmp	#LR__4453
2c4a8     0F 13 02 F6 | 	mov	arg01, local01
2c4ac     DC 19 B0 FD | 	call	#_fatfs_cc___indst
2c4b0     00 FA 0D F2 | 	cmp	result1, #0 wz
2c4b4     07 00 00 5F 
2c4b8     10 26 86 51 |  if_ne	sub	local05, ##3600
2c4bc                 | LR__4453
2c4bc                 | '                 s -=  (3600L) ;
2c4bc                 | ' 
2c4bc                 | '         return s;
2c4bc     13 FB 01 F6 | 	mov	result1, local05
2c4c0                 | LR__4454
2c4c0     A7 F0 03 F6 | 	mov	ptra, fp
2c4c4     B2 00 A0 FD | 	call	#popregs_
2c4c8                 | _fatfs_cc_mktime_ret
2c4c8     2D 00 64 FD | 	ret
2c4cc                 | 
2c4cc                 | _fatfs_cc__gmtime_r
2c4cc     03 4A 05 F6 | 	mov	COUNT_, #3
2c4d0     A8 00 A0 FD | 	call	#pushregs_
2c4d4     09 1F 02 FB | 	rdlong	local01, arg01
2c4d8     A8 00 00 FF 
2c4dc     80 1F 16 FD | 	qdiv	local01, ##86400
2c4e0     18 FA 61 FD | 	getqx	result1
2c4e4     04 FA 05 F1 | 	add	result1, #4
2c4e8     07 FA 15 FD | 	qdiv	result1, #7
2c4ec     18 14 06 F1 | 	add	arg02, #24
2c4f0     D1 7F 27 FF 
2c4f4     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
2c4f8     D1 7F 27 3F 
2c4fc     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
2c500     03 00 00 3F 
2c504     DC 21 06 36 |  if_ae	mov	local02, ##2012
2c508     03 00 00 CF 
2c50c     B2 21 06 C6 |  if_b	mov	local02, ##1970
2c510                 | ' 	  year = 1970;
2c510                 | ' 	}
2c510                 | ' 
2c510                 | ' 	for(;;) {
2c510     19 FA 61 FD | 	getqy	result1
2c514     0A FB 61 FC | 	wrlong	result1, arg02
2c518     18 14 86 F1 | 	sub	arg02, #24
2c51c                 | LR__4460
2c51c     10 13 02 F6 | 	mov	arg01, local02
2c520     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2c524     00 FA 0D F2 | 	cmp	result1, #0 wz
2c528     42 F1 00 5F 
2c52c     00 23 06 56 |  if_ne	mov	local03, ##31622400
2c530     99 F0 00 AF 
2c534     80 23 06 A6 |  if_e	mov	local03, ##31536000
2c538     11 1F 12 F2 | 	cmp	local01, local03 wc
2c53c                 | ' 	    break;
2c53c     01 20 06 31 |  if_ae	add	local02, #1
2c540     11 1F 82 31 |  if_ae	sub	local01, local03
2c544     D4 FF 9F 3D |  if_ae	jmp	#LR__4460
2c548     A8 00 00 FF 
2c54c     80 1F 16 FD | 	qdiv	local01, ##86400
2c550     10 23 02 F6 | 	mov	local03, local02
2c554     03 00 00 FF 
2c558     6C 23 86 F1 | 	sub	local03, ##1900
2c55c     14 14 06 F1 | 	add	arg02, #20
2c560     0A 23 62 FC | 	wrlong	local03, arg02
2c564     08 14 06 F1 | 	add	arg02, #8
2c568     10 13 02 F6 | 	mov	arg01, local02
2c56c     18 20 62 FD | 	getqx	local02
2c570     0A 21 62 FC | 	wrlong	local02, arg02
2c574     1C 14 86 F1 | 	sub	arg02, #28
2c578     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2c57c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c580     1D 22 06 56 |  if_ne	mov	local03, #29
2c584     1C 22 06 A6 |  if_e	mov	local03, #28
2c588     02 00 00 FF 
2c58c     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2c590     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2c594     02 00 00 FF 
2c598     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2c59c                 | ' 
2c59c                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2c59c                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2c59c     00 12 06 F6 | 	mov	arg01, #0
2c5a0     97 2A 48 FB | 	callpa	#(@LR__4462-@LR__4461)>>2,fcache_load_ptr_
2c5a4                 | LR__4461
2c5a4     09 23 02 F6 | 	mov	local03, arg01
2c5a8     02 22 66 F0 | 	shl	local03, #2
2c5ac     02 00 00 FF 
2c5b0     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2c5b4     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2c5b8     11 23 02 FB | 	rdlong	local03, local03
2c5bc     11 21 52 F2 | 	cmps	local02, local03 wc
2c5c0     02 00 00 FF 
2c5c4     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2c5c8     2C 00 90 CD |  if_b	jmp	#LR__4463
2c5cc     09 23 02 F6 | 	mov	local03, arg01
2c5d0     02 22 66 F0 | 	shl	local03, #2
2c5d4     02 00 00 FF 
2c5d8     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2c5dc     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2c5e0     11 23 02 FB | 	rdlong	local03, local03
2c5e4     11 21 82 F1 | 	sub	local02, local03
2c5e8     01 12 06 F1 | 	add	arg01, #1
2c5ec     02 00 00 FF 
2c5f0     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2c5f4     AC FF 9F FD | 	jmp	#LR__4461
2c5f8                 | LR__4462
2c5f8                 | LR__4463
2c5f8     A8 00 00 FF 
2c5fc     80 1F 16 FD | 	qdiv	local01, ##86400
2c600     10 14 06 F1 | 	add	arg02, #16
2c604     0A 13 62 FC | 	wrlong	arg01, arg02
2c608     01 20 06 F1 | 	add	local02, #1
2c60c     04 14 86 F1 | 	sub	arg02, #4
2c610     0A 21 62 FC | 	wrlong	local02, arg02
2c614     19 1E 62 FD | 	getqy	local01
2c618     07 00 00 FF 
2c61c     10 1E 16 FD | 	qdiv	local01, ##3600
2c620     18 22 62 FD | 	getqx	local03
2c624     07 00 00 FF 
2c628     10 1E 16 FD | 	qdiv	local01, ##3600
2c62c     04 14 86 F1 | 	sub	arg02, #4
2c630     0A 23 62 FC | 	wrlong	local03, arg02
2c634     19 1E 62 FD | 	getqy	local01
2c638     3C 1E 16 FD | 	qdiv	local01, #60
2c63c     18 22 62 FD | 	getqx	local03
2c640     3C 1E 16 FD | 	qdiv	local01, #60
2c644     04 14 86 F1 | 	sub	arg02, #4
2c648     0A 23 62 FC | 	wrlong	local03, arg02
2c64c     04 14 86 F1 | 	sub	arg02, #4
2c650                 | '         stm->tm_isdst = 0;
2c650                 | ' 
2c650                 | ' ;
2c650                 | '         return stm;
2c650     0A FB 01 F6 | 	mov	result1, arg02
2c654     19 22 62 FD | 	getqy	local03
2c658     0A 23 62 FC | 	wrlong	local03, arg02
2c65c     20 14 06 F1 | 	add	arg02, #32
2c660     0A 01 68 FC | 	wrlong	#0, arg02
2c664     A7 F0 03 F6 | 	mov	ptra, fp
2c668     B2 00 A0 FD | 	call	#popregs_
2c66c                 | _fatfs_cc__gmtime_r_ret
2c66c     2D 00 64 FD | 	ret
2c670                 | 
2c670                 | _fatfs_cc__tzset
2c670     70 01 00 FF 
2c674     B5 13 06 F6 | 	mov	arg01, ##@LR__4775
2c678     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2c67c     FD 12 02 F6 | 	mov	arg01, result1
2c680     02 00 00 FF 
2c684     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2c688     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2c68c     02 00 00 FF 
2c690     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2c694     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2c698     02 00 00 FF 
2c69c     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2c6a0     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2c6a4     02 00 00 FF 
2c6a8     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2c6ac                 | _fatfs_cc__tzset_ret
2c6ac     2D 00 64 FD | 	ret
2c6b0                 | 
2c6b0                 | _fatfs_cc_getenv
2c6b0     06 4A 05 F6 | 	mov	COUNT_, #6
2c6b4     A8 00 A0 FD | 	call	#pushregs_
2c6b8     09 1F 02 F6 | 	mov	local01, arg01
2c6bc     09 21 02 F6 | 	mov	local02, arg01
2c6c0     97 06 48 FB | 	callpa	#(@LR__4471-@LR__4470)>>2,fcache_load_ptr_
2c6c4                 | LR__4470
2c6c4     10 FB C9 FA | 	rdbyte	result1, local02 wz
2c6c8     01 20 06 51 |  if_ne	add	local02, #1
2c6cc     F4 FF 9F 5D |  if_ne	jmp	#LR__4470
2c6d0                 | LR__4471
2c6d0     09 21 82 F1 | 	sub	local02, arg01
2c6d4     10 FB 01 F6 | 	mov	result1, local02
2c6d8     02 00 00 FF 
2c6dc     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2c6e0     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2c6e4     02 00 00 FF 
2c6e8     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2c6ec                 | '             return 0;
2c6ec     00 FA 05 A6 |  if_e	mov	result1, #0
2c6f0     5C 00 90 AD |  if_e	jmp	#LR__4474
2c6f4                 | ' 
2c6f4                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2c6f4     02 00 00 FF 
2c6f8     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2c6fc     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2c700     02 00 00 FF 
2c704     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2c708                 | LR__4472
2c708     11 25 0A FB | 	rdlong	local04, local03 wz
2c70c     3C 00 90 AD |  if_e	jmp	#LR__4473
2c710     12 13 02 F6 | 	mov	arg01, local04
2c714     0F 15 02 F6 | 	mov	arg02, local01
2c718     10 17 02 F6 | 	mov	arg03, local02
2c71c     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
2c720     00 FA 0D F2 | 	cmp	result1, #0 wz
2c724     10 27 02 A6 |  if_e	mov	local05, local02
2c728     12 27 02 A1 |  if_e	add	local05, local04
2c72c     13 29 C2 AA |  if_e	rdbyte	local06, local05
2c730     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
2c734                 | ' 			return name+len+1;
2c734     10 25 02 A1 |  if_e	add	local04, local02
2c738     01 24 06 A1 |  if_e	add	local04, #1
2c73c     12 FB 01 A6 |  if_e	mov	result1, local04
2c740     0C 00 90 AD |  if_e	jmp	#LR__4474
2c744     04 22 06 F1 | 	add	local03, #4
2c748     BC FF 9F FD | 	jmp	#LR__4472
2c74c                 | LR__4473
2c74c                 | ' 	}
2c74c                 | ' 	return 0;
2c74c     00 FA 05 F6 | 	mov	result1, #0
2c750                 | LR__4474
2c750     A7 F0 03 F6 | 	mov	ptra, fp
2c754     B2 00 A0 FD | 	call	#popregs_
2c758                 | _fatfs_cc_getenv_ret
2c758     2D 00 64 FD | 	ret
2c75c                 | 
2c75c                 | _fatfs_cc__get_fattime
2c75c     00 4A 05 F6 | 	mov	COUNT_, #0
2c760     A8 00 A0 FD | 	call	#pushregs_
2c764     34 F0 07 F1 | 	add	ptra, #52
2c768     00 12 06 F6 | 	mov	arg01, #0
2c76c     38 FB BF FD | 	call	#_fatfs_cc_time
2c770     04 4E 05 F1 | 	add	fp, #4
2c774     A7 FA 61 FC | 	wrlong	result1, fp
2c778     A7 12 02 F6 | 	mov	arg01, fp
2c77c     0C 4E 05 F1 | 	add	fp, #12
2c780     A7 14 02 F6 | 	mov	arg02, fp
2c784     10 4E 85 F1 | 	sub	fp, #16
2c788     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2c78c     24 4E 05 F1 | 	add	fp, #36
2c790     A7 14 02 FB | 	rdlong	arg02, fp
2c794     50 14 86 F1 | 	sub	arg02, #80
2c798     09 14 66 F0 | 	shl	arg02, #9
2c79c     04 4E 85 F1 | 	sub	fp, #4
2c7a0     A7 FA 01 FB | 	rdlong	result1, fp
2c7a4     01 FA 05 F1 | 	add	result1, #1
2c7a8     05 FA 65 F0 | 	shl	result1, #5
2c7ac     FD 14 42 F5 | 	or	arg02, result1
2c7b0     04 4E 85 F1 | 	sub	fp, #4
2c7b4     A7 FA 01 FB | 	rdlong	result1, fp
2c7b8     FD 14 42 F5 | 	or	arg02, result1
2c7bc     14 4E 85 F1 | 	sub	fp, #20
2c7c0     A7 14 62 FC | 	wrlong	arg02, fp
2c7c4     10 4E 05 F1 | 	add	fp, #16
2c7c8     A7 14 02 FB | 	rdlong	arg02, fp
2c7cc     0B 14 66 F0 | 	shl	arg02, #11
2c7d0     04 4E 85 F1 | 	sub	fp, #4
2c7d4     A7 FA 01 FB | 	rdlong	result1, fp
2c7d8     05 FA 65 F0 | 	shl	result1, #5
2c7dc     FD 14 42 F5 | 	or	arg02, result1
2c7e0     04 4E 85 F1 | 	sub	fp, #4
2c7e4     A7 FA 01 FB | 	rdlong	result1, fp
2c7e8     FD 14 42 F5 | 	or	arg02, result1
2c7ec     04 4E 85 F1 | 	sub	fp, #4
2c7f0     A7 14 62 FC | 	wrlong	arg02, fp
2c7f4                 | ' 
2c7f4                 | '     now = time(0);
2c7f4                 | '     _gmtime_r (&now, &date);
2c7f4                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2c7f4                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2c7f4                 | '     return (ffdate << 16) | fftime;
2c7f4     04 4E 85 F1 | 	sub	fp, #4
2c7f8     A7 FA 01 FB | 	rdlong	result1, fp
2c7fc     10 FA 65 F0 | 	shl	result1, #16
2c800     08 4E 85 F1 | 	sub	fp, #8
2c804     0A FB 41 F5 | 	or	result1, arg02
2c808     A7 F0 03 F6 | 	mov	ptra, fp
2c80c     B2 00 A0 FD | 	call	#popregs_
2c810                 | _fatfs_cc__get_fattime_ret
2c810     2D 00 64 FD | 	ret
2c814                 | 
2c814                 | _fatfs_cc_unixtime_0904
2c814     00 4A 05 F6 | 	mov	COUNT_, #0
2c818     A8 00 A0 FD | 	call	#pushregs_
2c81c     34 F0 07 F1 | 	add	ptra, #52
2c820     04 4E 05 F1 | 	add	fp, #4
2c824     A7 12 62 FC | 	wrlong	arg01, fp
2c828     04 4E 05 F1 | 	add	fp, #4
2c82c     A7 14 62 FC | 	wrlong	arg02, fp
2c830     04 4E 85 F1 | 	sub	fp, #4
2c834     A7 14 02 FB | 	rdlong	arg02, fp
2c838     09 14 46 F0 | 	shr	arg02, #9
2c83c     7F 14 06 F5 | 	and	arg02, #127
2c840     50 FA 05 F6 | 	mov	result1, #80
2c844     0A FB 01 F1 | 	add	result1, arg02
2c848     20 4E 05 F1 | 	add	fp, #32
2c84c     A7 FA 61 FC | 	wrlong	result1, fp
2c850     20 4E 85 F1 | 	sub	fp, #32
2c854     A7 FA 01 FB | 	rdlong	result1, fp
2c858     05 FA 45 F0 | 	shr	result1, #5
2c85c     FD FA 41 F8 | 	getnib	result1, result1, #0
2c860     01 FA 85 F1 | 	sub	result1, #1
2c864     1C 4E 05 F1 | 	add	fp, #28
2c868     A7 FA 61 FC | 	wrlong	result1, fp
2c86c     1C 4E 85 F1 | 	sub	fp, #28
2c870     A7 FA 01 FB | 	rdlong	result1, fp
2c874     1F FA 05 F5 | 	and	result1, #31
2c878     18 4E 05 F1 | 	add	fp, #24
2c87c     A7 FA 61 FC | 	wrlong	result1, fp
2c880     14 4E 85 F1 | 	sub	fp, #20
2c884     A7 FA 01 FB | 	rdlong	result1, fp
2c888     0B FA 45 F0 | 	shr	result1, #11
2c88c     1F FA 05 F5 | 	and	result1, #31
2c890     10 4E 05 F1 | 	add	fp, #16
2c894     A7 FA 61 FC | 	wrlong	result1, fp
2c898     10 4E 85 F1 | 	sub	fp, #16
2c89c     A7 FA 01 FB | 	rdlong	result1, fp
2c8a0     05 FA 45 F0 | 	shr	result1, #5
2c8a4     3F FA 05 F5 | 	and	result1, #63
2c8a8     0C 4E 05 F1 | 	add	fp, #12
2c8ac     A7 FA 61 FC | 	wrlong	result1, fp
2c8b0     0C 4E 85 F1 | 	sub	fp, #12
2c8b4     A7 14 02 FB | 	rdlong	arg02, fp
2c8b8     1F 14 06 F5 | 	and	arg02, #31
2c8bc     01 14 66 F0 | 	shl	arg02, #1
2c8c0     08 4E 05 F1 | 	add	fp, #8
2c8c4     A7 14 62 FC | 	wrlong	arg02, fp
2c8c8     A7 12 02 F6 | 	mov	arg01, fp
2c8cc     10 4E 85 F1 | 	sub	fp, #16
2c8d0     4C FA BF FD | 	call	#_fatfs_cc_mktime
2c8d4     0C 4E 05 F1 | 	add	fp, #12
2c8d8     A7 FA 61 FC | 	wrlong	result1, fp
2c8dc                 | ' 
2c8dc                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2c8dc                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2c8dc                 | '     date.tm_mday = (dosdate & 0x1f);
2c8dc                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2c8dc                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2c8dc                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2c8dc                 | ' 
2c8dc                 | '     t = mktime(&date);
2c8dc                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2c8dc                 | '     return t;
2c8dc     0C 4E 85 F1 | 	sub	fp, #12
2c8e0     A7 F0 03 F6 | 	mov	ptra, fp
2c8e4     B2 00 A0 FD | 	call	#popregs_
2c8e8                 | _fatfs_cc_unixtime_0904_ret
2c8e8     2D 00 64 FD | 	ret
2c8ec                 | 
2c8ec                 | _fatfs_cc__set_dos_error_0906
2c8ec     09 01 02 F6 | 	mov	_var01, arg01
2c8f0                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2c8f0                 | '     switch (derr) {
2c8f0     14 00 26 F3 | 	fle	_var01, #20
2c8f4     30 00 62 FD | 	jmprel	_var01
2c8f8                 | LR__4480
2c8f8     50 00 90 FD | 	jmp	#LR__4481
2c8fc     84 00 90 FD | 	jmp	#LR__4495
2c900     80 00 90 FD | 	jmp	#LR__4496
2c904     7C 00 90 FD | 	jmp	#LR__4497
2c908     48 00 90 FD | 	jmp	#LR__4482
2c90c     44 00 90 FD | 	jmp	#LR__4483
2c910     40 00 90 FD | 	jmp	#LR__4484
2c914     44 00 90 FD | 	jmp	#LR__4485
2c918     48 00 90 FD | 	jmp	#LR__4487
2c91c     54 00 90 FD | 	jmp	#LR__4490
2c920     38 00 90 FD | 	jmp	#LR__4486
2c924     4C 00 90 FD | 	jmp	#LR__4491
2c928     48 00 90 FD | 	jmp	#LR__4492
2c92c     44 00 90 FD | 	jmp	#LR__4493
2c930     50 00 90 FD | 	jmp	#LR__4498
2c934     4C 00 90 FD | 	jmp	#LR__4498
2c938     48 00 90 FD | 	jmp	#LR__4498
2c93c     2C 00 90 FD | 	jmp	#LR__4488
2c940     38 00 90 FD | 	jmp	#LR__4494
2c944     2C 00 90 FD | 	jmp	#LR__4489
2c948     38 00 90 FD | 	jmp	#LR__4498
2c94c                 | LR__4481
2c94c     00 02 06 F6 | 	mov	_var02, #0
2c950                 | '         r = 0;
2c950                 | '         break;
2c950     34 00 90 FD | 	jmp	#LR__4499
2c954                 | LR__4482
2c954                 | LR__4483
2c954                 | LR__4484
2c954     04 02 06 F6 | 	mov	_var02, #4
2c958                 | '         r =  4 ;
2c958                 | '         break;
2c958     2C 00 90 FD | 	jmp	#LR__4499
2c95c                 | LR__4485
2c95c                 | LR__4486
2c95c     06 02 06 F6 | 	mov	_var02, #6
2c960                 | '         r =  6 ;
2c960                 | '         break;
2c960     24 00 90 FD | 	jmp	#LR__4499
2c964                 | LR__4487
2c964     09 02 06 F6 | 	mov	_var02, #9
2c968                 | '         r =  9 ;
2c968                 | '         break;
2c968     1C 00 90 FD | 	jmp	#LR__4499
2c96c                 | LR__4488
2c96c     07 02 06 F6 | 	mov	_var02, #7
2c970                 | '         r =  7 ;
2c970                 | '         break;
2c970     14 00 90 FD | 	jmp	#LR__4499
2c974                 | LR__4489
2c974                 | LR__4490
2c974                 | LR__4491
2c974                 | LR__4492
2c974                 | LR__4493
2c974     0A 02 06 F6 | 	mov	_var02, #10
2c978                 | '         r =  10 ;
2c978                 | '         break;
2c978     0C 00 90 FD | 	jmp	#LR__4499
2c97c                 | LR__4494
2c97c     0B 02 06 F6 | 	mov	_var02, #11
2c980                 | '         r =  11 ;
2c980                 | '         break;
2c980     04 00 90 FD | 	jmp	#LR__4499
2c984                 | LR__4495
2c984                 | LR__4496
2c984                 | LR__4497
2c984                 | LR__4498
2c984     0C 02 06 F6 | 	mov	_var02, #12
2c988                 | '         r =  12 ;
2c988                 | '         break;
2c988                 | LR__4499
2c988                 | '     }
2c988                 | '     return _seterror(r);
2c988     00 02 4E F2 | 	cmps	_var02, #0 wz
2c98c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c990     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2c994     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c998     01 FA 65 56 |  if_ne	neg	result1, #1
2c99c     00 FA 05 A6 |  if_e	mov	result1, #0
2c9a0                 | _fatfs_cc__set_dos_error_0906_ret
2c9a0     2D 00 64 FD | 	ret
2c9a4                 | 
2c9a4                 | _fatfs_cc_v_creat
2c9a4     04 4A 05 F6 | 	mov	COUNT_, #4
2c9a8     A8 00 A0 FD | 	call	#pushregs_
2c9ac     09 1F 02 F6 | 	mov	local01, arg01
2c9b0     0A 21 02 F6 | 	mov	local02, arg02
2c9b4     03 00 00 FF 
2c9b8     3C 12 06 F6 | 	mov	arg01, ##1596
2c9bc                 | '     return _gc_alloc(size);
2c9bc     10 14 06 F6 | 	mov	arg02, #16
2c9c0     2C 60 BF FD | 	call	#__system___gc_doalloc
2c9c4     FD 22 0A F6 | 	mov	local03, result1 wz
2c9c8                 | '       return _seterror( 7 );
2c9c8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c9cc     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2c9d0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c9d4     01 FA 65 A6 |  if_e	neg	result1, #1
2c9d8     58 00 90 AD |  if_e	jmp	#LR__4501
2c9dc     11 13 02 F6 | 	mov	arg01, local03
2c9e0     00 14 06 F6 | 	mov	arg02, #0
2c9e4     03 00 00 FF 
2c9e8     3C 16 06 F6 | 	mov	arg03, ##1596
2c9ec     98 00 A0 FD | 	call	#\builtin_bytefill_
2c9f0     02 00 00 FF 
2c9f4     14 22 06 F1 | 	add	local03, ##1044
2c9f8     11 13 02 F6 | 	mov	arg01, local03
2c9fc     02 00 00 FF 
2ca00     14 22 86 F1 | 	sub	local03, ##1044
2ca04     10 15 02 F6 | 	mov	arg02, local02
2ca08     07 16 06 F6 | 	mov	arg03, #7
2ca0c     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2ca10     FD 24 0A F6 | 	mov	local04, result1 wz
2ca14     14 00 90 AD |  if_e	jmp	#LR__4500
2ca18     11 13 02 F6 | 	mov	arg01, local03
2ca1c                 | '     return _gc_free(ptr);
2ca1c     DC 60 BF FD | 	call	#__system___gc_free
2ca20                 | '     free(f);
2ca20                 | '     return _set_dos_error(r);
2ca20     12 13 02 F6 | 	mov	arg01, local04
2ca24     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2ca28     08 00 90 FD | 	jmp	#LR__4501
2ca2c                 | LR__4500
2ca2c     0F 23 62 FC | 	wrlong	local03, local01
2ca30                 | '   }
2ca30                 | '   fil->vfsdata = f;
2ca30                 | '   return 0;
2ca30     00 FA 05 F6 | 	mov	result1, #0
2ca34                 | LR__4501
2ca34     A7 F0 03 F6 | 	mov	ptra, fp
2ca38     B2 00 A0 FD | 	call	#popregs_
2ca3c                 | _fatfs_cc_v_creat_ret
2ca3c     2D 00 64 FD | 	ret
2ca40                 | 
2ca40                 | _fatfs_cc_v_close
2ca40     02 4A 05 F6 | 	mov	COUNT_, #2
2ca44     A8 00 A0 FD | 	call	#pushregs_
2ca48     09 1F 02 FB | 	rdlong	local01, arg01
2ca4c     02 00 00 FF 
2ca50     14 1E 06 F1 | 	add	local01, ##1044
2ca54     0F 13 02 F6 | 	mov	arg01, local01
2ca58     02 00 00 FF 
2ca5c     14 1E 86 F1 | 	sub	local01, ##1044
2ca60     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2ca64     FD 20 02 F6 | 	mov	local02, result1
2ca68     0F 13 02 F6 | 	mov	arg01, local01
2ca6c                 | '     return _gc_free(ptr);
2ca6c     8C 60 BF FD | 	call	#__system___gc_free
2ca70                 | '     FAT_FIL *f = fil->vfsdata;
2ca70                 | '     r=f_close(&f->fil);
2ca70                 | '     free(f);
2ca70                 | '     return _set_dos_error(r);
2ca70     10 13 02 F6 | 	mov	arg01, local02
2ca74     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2ca78     A7 F0 03 F6 | 	mov	ptra, fp
2ca7c     B2 00 A0 FD | 	call	#popregs_
2ca80                 | _fatfs_cc_v_close_ret
2ca80     2D 00 64 FD | 	ret
2ca84                 | 
2ca84                 | _fatfs_cc_v_opendir
2ca84     04 4A 05 F6 | 	mov	COUNT_, #4
2ca88     A8 00 A0 FD | 	call	#pushregs_
2ca8c     09 1F 02 F6 | 	mov	local01, arg01
2ca90     0A 21 02 F6 | 	mov	local02, arg02
2ca94     30 12 06 F6 | 	mov	arg01, #48
2ca98                 | '     return _gc_alloc(size);
2ca98     10 14 06 F6 | 	mov	arg02, #16
2ca9c     50 5F BF FD | 	call	#__system___gc_doalloc
2caa0     FD 22 0A F6 | 	mov	local03, result1 wz
2caa4                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2caa4                 | '       return _seterror( 7 );
2caa4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2caa8     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2caac     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cab0     01 FA 65 A6 |  if_e	neg	result1, #1
2cab4     34 00 90 AD |  if_e	jmp	#LR__4511
2cab8     10 15 02 F6 | 	mov	arg02, local02
2cabc     11 13 02 F6 | 	mov	arg01, local03
2cac0     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2cac4     FD 24 0A F6 | 	mov	local04, result1 wz
2cac8     14 00 90 AD |  if_e	jmp	#LR__4510
2cacc     11 13 02 F6 | 	mov	arg01, local03
2cad0                 | '     return _gc_free(ptr);
2cad0     28 60 BF FD | 	call	#__system___gc_free
2cad4                 | '         free(f);
2cad4                 | '         return _set_dos_error(r);
2cad4     12 13 02 F6 | 	mov	arg01, local04
2cad8     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2cadc     0C 00 90 FD | 	jmp	#LR__4511
2cae0                 | LR__4510
2cae0     04 1E 06 F1 | 	add	local01, #4
2cae4     0F 23 62 FC | 	wrlong	local03, local01
2cae8                 | '     }
2cae8                 | '     dir->vfsdata = f;
2cae8                 | '     return 0;
2cae8     00 FA 05 F6 | 	mov	result1, #0
2caec                 | LR__4511
2caec     A7 F0 03 F6 | 	mov	ptra, fp
2caf0     B2 00 A0 FD | 	call	#popregs_
2caf4                 | _fatfs_cc_v_opendir_ret
2caf4     2D 00 64 FD | 	ret
2caf8                 | 
2caf8                 | _fatfs_cc_v_closedir
2caf8     02 4A 05 F6 | 	mov	COUNT_, #2
2cafc     A8 00 A0 FD | 	call	#pushregs_
2cb00     04 12 06 F1 | 	add	arg01, #4
2cb04     09 1F 02 FB | 	rdlong	local01, arg01
2cb08     0F 13 02 F6 | 	mov	arg01, local01
2cb0c     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2cb10     FD 20 02 F6 | 	mov	local02, result1
2cb14     0F 13 02 F6 | 	mov	arg01, local01
2cb18                 | '     return _gc_free(ptr);
2cb18     E0 5F BF FD | 	call	#__system___gc_free
2cb1c     00 20 0E F2 | 	cmp	local02, #0 wz
2cb20     10 13 02 56 |  if_ne	mov	arg01, local02
2cb24     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0906
2cb28                 | '     return r;
2cb28     10 FB 01 F6 | 	mov	result1, local02
2cb2c     A7 F0 03 F6 | 	mov	ptra, fp
2cb30     B2 00 A0 FD | 	call	#popregs_
2cb34                 | _fatfs_cc_v_closedir_ret
2cb34     2D 00 64 FD | 	ret
2cb38                 | 
2cb38                 | _fatfs_cc_v_readdir
2cb38     01 4A 05 F6 | 	mov	COUNT_, #1
2cb3c     A8 00 A0 FD | 	call	#pushregs_
2cb40     2C F1 07 F1 | 	add	ptra, #300
2cb44     04 4E 05 F1 | 	add	fp, #4
2cb48     A7 12 62 FC | 	wrlong	arg01, fp
2cb4c     04 4E 05 F1 | 	add	fp, #4
2cb50     A7 14 62 FC | 	wrlong	arg02, fp
2cb54     04 4E 85 F1 | 	sub	fp, #4
2cb58     A7 16 02 FB | 	rdlong	arg03, fp
2cb5c     04 16 06 F1 | 	add	arg03, #4
2cb60     0B 13 02 FB | 	rdlong	arg01, arg03
2cb64     08 4E 05 F1 | 	add	fp, #8
2cb68     A7 14 02 F6 | 	mov	arg02, fp
2cb6c     0C 4E 85 F1 | 	sub	fp, #12
2cb70     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2cb74     28 4F 05 F1 | 	add	fp, #296
2cb78     A7 FA 61 FC | 	wrlong	result1, fp
2cb7c     28 4F 85 F1 | 	sub	fp, #296
2cb80     00 FA 0D F2 | 	cmp	result1, #0 wz
2cb84     14 00 90 AD |  if_e	jmp	#LR__4520
2cb88                 | '         return _set_dos_error(r);
2cb88     28 4F 05 F1 | 	add	fp, #296
2cb8c     A7 12 02 FB | 	rdlong	arg01, fp
2cb90     28 4F 85 F1 | 	sub	fp, #296
2cb94     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2cb98     C4 00 90 FD | 	jmp	#LR__4523
2cb9c                 | LR__4520
2cb9c     28 4E 05 F1 | 	add	fp, #40
2cba0     A7 16 CA FA | 	rdbyte	arg03, fp wz
2cba4     28 4E 85 F1 | 	sub	fp, #40
2cba8                 | '         return -1;
2cba8     01 FA 65 A6 |  if_e	neg	result1, #1
2cbac     B0 00 90 AD |  if_e	jmp	#LR__4523
2cbb0     08 4E 05 F1 | 	add	fp, #8
2cbb4     A7 12 02 FB | 	rdlong	arg01, fp
2cbb8     20 4E 05 F1 | 	add	fp, #32
2cbbc     A7 14 02 F6 | 	mov	arg02, fp
2cbc0     28 4E 85 F1 | 	sub	fp, #40
2cbc4     3F 16 06 F6 | 	mov	arg03, #63
2cbc8     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2cbcc     08 4E 05 F1 | 	add	fp, #8
2cbd0     A7 16 02 FB | 	rdlong	arg03, fp
2cbd4     3F 16 06 F1 | 	add	arg03, #63
2cbd8     0B 01 48 FC | 	wrbyte	#0, arg03
2cbdc     0C 4E 05 F1 | 	add	fp, #12
2cbe0     A7 16 C2 FA | 	rdbyte	arg03, fp
2cbe4     14 4E 85 F1 | 	sub	fp, #20
2cbe8     10 16 CE F7 | 	test	arg03, #16 wz
2cbec     18 00 90 AD |  if_e	jmp	#LR__4521
2cbf0     08 4E 05 F1 | 	add	fp, #8
2cbf4     A7 16 02 FB | 	rdlong	arg03, fp
2cbf8     08 4E 85 F1 | 	sub	fp, #8
2cbfc     50 16 06 F1 | 	add	arg03, #80
2cc00     0B 03 48 FC | 	wrbyte	#1, arg03
2cc04     14 00 90 FD | 	jmp	#LR__4522
2cc08                 | LR__4521
2cc08     08 4E 05 F1 | 	add	fp, #8
2cc0c     A7 16 02 FB | 	rdlong	arg03, fp
2cc10     08 4E 85 F1 | 	sub	fp, #8
2cc14     50 16 06 F1 | 	add	arg03, #80
2cc18     0B 01 48 FC | 	wrbyte	#0, arg03
2cc1c                 | LR__4522
2cc1c     08 4E 05 F1 | 	add	fp, #8
2cc20     A7 16 02 FB | 	rdlong	arg03, fp
2cc24     04 4E 05 F1 | 	add	fp, #4
2cc28     A7 14 02 FB | 	rdlong	arg02, fp
2cc2c     48 16 06 F1 | 	add	arg03, #72
2cc30     0B 15 62 FC | 	wrlong	arg02, arg03
2cc34     04 4E 85 F1 | 	sub	fp, #4
2cc38     A7 1E 02 FB | 	rdlong	local01, fp
2cc3c     08 4E 05 F1 | 	add	fp, #8
2cc40     A7 12 E2 FA | 	rdword	arg01, fp
2cc44     02 4E 05 F1 | 	add	fp, #2
2cc48     A7 14 E2 FA | 	rdword	arg02, fp
2cc4c     12 4E 85 F1 | 	sub	fp, #18
2cc50     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0904
2cc54     4C 1E 06 F1 | 	add	local01, #76
2cc58     0F FB 61 FC | 	wrlong	result1, local01
2cc5c                 | '         ent->d_type =  (0) ;
2cc5c                 | '     }
2cc5c                 | '     ent->d_size = finfo.fsize;
2cc5c                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2cc5c                 | '     return 0;
2cc5c     00 FA 05 F6 | 	mov	result1, #0
2cc60                 | LR__4523
2cc60     A7 F0 03 F6 | 	mov	ptra, fp
2cc64     B2 00 A0 FD | 	call	#popregs_
2cc68                 | _fatfs_cc_v_readdir_ret
2cc68     2D 00 64 FD | 	ret
2cc6c                 | 
2cc6c                 | _fatfs_cc_v_stat
2cc6c     03 4A 05 F6 | 	mov	COUNT_, #3
2cc70     A8 00 A0 FD | 	call	#pushregs_
2cc74     30 F1 07 F1 | 	add	ptra, #304
2cc78     04 4E 05 F1 | 	add	fp, #4
2cc7c     A7 12 62 FC | 	wrlong	arg01, fp
2cc80     04 4E 05 F1 | 	add	fp, #4
2cc84     A7 14 62 FC | 	wrlong	arg02, fp
2cc88     08 4E 85 F1 | 	sub	fp, #8
2cc8c     0A 13 02 F6 | 	mov	arg01, arg02
2cc90     00 14 06 F6 | 	mov	arg02, #0
2cc94     30 16 06 F6 | 	mov	arg03, #48
2cc98     98 00 A0 FD | 	call	#\builtin_bytefill_
2cc9c     04 4E 05 F1 | 	add	fp, #4
2cca0     A7 FA 01 FB | 	rdlong	result1, fp
2cca4     04 4E 85 F1 | 	sub	fp, #4
2cca8     FD FA C9 FA | 	rdbyte	result1, result1 wz
2ccac     2C 00 90 AD |  if_e	jmp	#LR__4530
2ccb0     04 4E 05 F1 | 	add	fp, #4
2ccb4     A7 FA 01 FB | 	rdlong	result1, fp
2ccb8     04 4E 85 F1 | 	sub	fp, #4
2ccbc     FD FA C1 FA | 	rdbyte	result1, result1
2ccc0     2E FA 0D F2 | 	cmp	result1, #46 wz
2ccc4     04 4E 05 A1 |  if_e	add	fp, #4
2ccc8     A7 1E 02 AB |  if_e	rdlong	local01, fp
2cccc     04 4E 85 A1 |  if_e	sub	fp, #4
2ccd0     01 1E 06 A1 |  if_e	add	local01, #1
2ccd4     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2ccd8     18 00 90 5D |  if_ne	jmp	#LR__4531
2ccdc                 | LR__4530
2ccdc     18 4E 05 F1 | 	add	fp, #24
2cce0     A7 20 48 FC | 	wrbyte	#16, fp
2cce4     0C 4E 85 F1 | 	sub	fp, #12
2cce8     A7 00 68 FC | 	wrlong	#0, fp
2ccec     0C 4E 85 F1 | 	sub	fp, #12
2ccf0     24 00 90 FD | 	jmp	#LR__4532
2ccf4                 | LR__4531
2ccf4     04 4E 05 F1 | 	add	fp, #4
2ccf8     A7 12 02 FB | 	rdlong	arg01, fp
2ccfc     0C 4E 05 F1 | 	add	fp, #12
2cd00     A7 14 02 F6 | 	mov	arg02, fp
2cd04     10 4E 85 F1 | 	sub	fp, #16
2cd08     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2cd0c     0C 4E 05 F1 | 	add	fp, #12
2cd10     A7 FA 61 FC | 	wrlong	result1, fp
2cd14     0C 4E 85 F1 | 	sub	fp, #12
2cd18                 | LR__4532
2cd18     0C 4E 05 F1 | 	add	fp, #12
2cd1c     A7 20 0A FB | 	rdlong	local02, fp wz
2cd20     0C 4E 85 F1 | 	sub	fp, #12
2cd24     14 00 90 AD |  if_e	jmp	#LR__4533
2cd28                 | '         return _set_dos_error(r);
2cd28     0C 4E 05 F1 | 	add	fp, #12
2cd2c     A7 12 02 FB | 	rdlong	arg01, fp
2cd30     0C 4E 85 F1 | 	sub	fp, #12
2cd34     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2cd38     14 01 90 FD | 	jmp	#LR__4534
2cd3c                 | LR__4533
2cd3c     2C 4F 05 F1 | 	add	fp, #300
2cd40     A7 48 6A FC | 	wrlong	#292, fp
2cd44     14 4F 85 F1 | 	sub	fp, #276
2cd48     A7 22 C2 FA | 	rdbyte	local03, fp
2cd4c     18 4E 85 F1 | 	sub	fp, #24
2cd50     01 22 CE F7 | 	test	local03, #1 wz
2cd54     2C 4F 05 A1 |  if_e	add	fp, #300
2cd58     A7 22 02 AB |  if_e	rdlong	local03, fp
2cd5c     92 22 46 A5 |  if_e	or	local03, #146
2cd60     A7 22 62 AC |  if_e	wrlong	local03, fp
2cd64     2C 4F 85 A1 |  if_e	sub	fp, #300
2cd68     18 4E 05 F1 | 	add	fp, #24
2cd6c     A7 22 C2 FA | 	rdbyte	local03, fp
2cd70     18 4E 85 F1 | 	sub	fp, #24
2cd74     10 22 CE F7 | 	test	local03, #16 wz
2cd78     2C 4F 05 51 |  if_ne	add	fp, #300
2cd7c     A7 22 02 5B |  if_ne	rdlong	local03, fp
2cd80     08 00 00 5F 
2cd84     49 22 46 55 |  if_ne	or	local03, ##4169
2cd88     A7 22 62 5C |  if_ne	wrlong	local03, fp
2cd8c     2C 4F 85 51 |  if_ne	sub	fp, #300
2cd90     08 4E 05 F1 | 	add	fp, #8
2cd94     A7 22 02 FB | 	rdlong	local03, fp
2cd98     24 4F 05 F1 | 	add	fp, #292
2cd9c     A7 20 02 FB | 	rdlong	local02, fp
2cda0     08 22 06 F1 | 	add	local03, #8
2cda4     11 21 62 FC | 	wrlong	local02, local03
2cda8     24 4F 85 F1 | 	sub	fp, #292
2cdac     A7 22 02 FB | 	rdlong	local03, fp
2cdb0     0C 22 06 F1 | 	add	local03, #12
2cdb4     11 03 68 FC | 	wrlong	#1, local03
2cdb8     A7 22 02 FB | 	rdlong	local03, fp
2cdbc     08 4E 05 F1 | 	add	fp, #8
2cdc0     A7 20 02 FB | 	rdlong	local02, fp
2cdc4     18 22 06 F1 | 	add	local03, #24
2cdc8     11 21 62 FC | 	wrlong	local02, local03
2cdcc     08 4E 85 F1 | 	sub	fp, #8
2cdd0     A7 22 02 FB | 	rdlong	local03, fp
2cdd4     1C 22 06 F1 | 	add	local03, #28
2cdd8     01 00 80 FF 
2cddc     11 01 68 FC | 	wrlong	##512, local03
2cde0     A7 20 02 FB | 	rdlong	local02, fp
2cde4     10 23 02 F6 | 	mov	local03, local02
2cde8     18 20 06 F1 | 	add	local02, #24
2cdec     10 21 02 FB | 	rdlong	local02, local02
2cdf0     FF 21 06 F1 | 	add	local02, #511
2cdf4     10 21 52 F6 | 	abs	local02, local02 wc
2cdf8     09 20 46 F0 | 	shr	local02, #9
2cdfc     10 21 82 F6 | 	negc	local02, local02
2ce00     20 22 06 F1 | 	add	local03, #32
2ce04     11 21 62 FC | 	wrlong	local02, local03
2ce08     A7 20 02 FB | 	rdlong	local02, fp
2ce0c     10 23 02 F6 | 	mov	local03, local02
2ce10     10 1F 02 F6 | 	mov	local01, local02
2ce14     0C 4E 05 F1 | 	add	fp, #12
2ce18     A7 12 E2 FA | 	rdword	arg01, fp
2ce1c     02 4E 05 F1 | 	add	fp, #2
2ce20     A7 14 E2 FA | 	rdword	arg02, fp
2ce24     16 4E 85 F1 | 	sub	fp, #22
2ce28     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0904
2ce2c     2C 1E 06 F1 | 	add	local01, #44
2ce30     0F FB 61 FC | 	wrlong	result1, local01
2ce34     28 20 06 F1 | 	add	local02, #40
2ce38     10 FB 61 FC | 	wrlong	result1, local02
2ce3c     24 22 06 F1 | 	add	local03, #36
2ce40     11 FB 61 FC | 	wrlong	result1, local03
2ce44                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2ce44                 | '     }
2ce44                 | '     buf->st_mode = mode;
2ce44                 | '     buf->st_nlink = 1;
2ce44                 | '     buf->st_size = finfo.fsize;
2ce44                 | '     buf->st_blksize = 512;
2ce44                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2ce44                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2ce44                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ce44                 | '     return r;
2ce44     0C 4E 05 F1 | 	add	fp, #12
2ce48     A7 FA 01 FB | 	rdlong	result1, fp
2ce4c     0C 4E 85 F1 | 	sub	fp, #12
2ce50                 | LR__4534
2ce50     A7 F0 03 F6 | 	mov	ptra, fp
2ce54     B2 00 A0 FD | 	call	#popregs_
2ce58                 | _fatfs_cc_v_stat_ret
2ce58     2D 00 64 FD | 	ret
2ce5c                 | 
2ce5c                 | _fatfs_cc_v_read
2ce5c     00 4A 05 F6 | 	mov	COUNT_, #0
2ce60     A8 00 A0 FD | 	call	#pushregs_
2ce64     1C F0 07 F1 | 	add	ptra, #28
2ce68     04 4E 05 F1 | 	add	fp, #4
2ce6c     A7 12 62 FC | 	wrlong	arg01, fp
2ce70     04 4E 05 F1 | 	add	fp, #4
2ce74     A7 14 62 FC | 	wrlong	arg02, fp
2ce78     04 4E 05 F1 | 	add	fp, #4
2ce7c     A7 16 62 FC | 	wrlong	arg03, fp
2ce80     08 4E 85 F1 | 	sub	fp, #8
2ce84     A7 12 02 FB | 	rdlong	arg01, fp
2ce88     09 13 0A FB | 	rdlong	arg01, arg01 wz
2ce8c     0C 4E 05 F1 | 	add	fp, #12
2ce90     A7 12 62 FC | 	wrlong	arg01, fp
2ce94     10 4E 85 F1 | 	sub	fp, #16
2ce98                 | '         return _seterror( 5 );
2ce98     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ce9c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2cea0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cea4     01 FA 65 A6 |  if_e	neg	result1, #1
2cea8     B8 00 90 AD |  if_e	jmp	#LR__4542
2ceac     10 4E 05 F1 | 	add	fp, #16
2ceb0     A7 12 02 FB | 	rdlong	arg01, fp
2ceb4     02 00 00 FF 
2ceb8     14 12 06 F1 | 	add	arg01, ##1044
2cebc     08 4E 85 F1 | 	sub	fp, #8
2cec0     A7 14 02 FB | 	rdlong	arg02, fp
2cec4     04 4E 05 F1 | 	add	fp, #4
2cec8     A7 16 02 FB | 	rdlong	arg03, fp
2cecc     0C 4E 05 F1 | 	add	fp, #12
2ced0     A7 18 02 F6 | 	mov	arg04, fp
2ced4     18 4E 85 F1 | 	sub	fp, #24
2ced8     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2cedc     14 4E 05 F1 | 	add	fp, #20
2cee0     A7 FA 61 FC | 	wrlong	result1, fp
2cee4     14 4E 85 F1 | 	sub	fp, #20
2cee8     00 FA 0D F2 | 	cmp	result1, #0 wz
2ceec     34 00 90 AD |  if_e	jmp	#LR__4540
2cef0     04 4E 05 F1 | 	add	fp, #4
2cef4     A7 18 02 FB | 	rdlong	arg04, fp
2cef8     0C 17 02 F6 | 	mov	arg03, arg04
2cefc     08 18 06 F1 | 	add	arg04, #8
2cf00     0C 19 02 FB | 	rdlong	arg04, arg04
2cf04     20 18 46 F5 | 	or	arg04, #32
2cf08     08 16 06 F1 | 	add	arg03, #8
2cf0c     0B 19 62 FC | 	wrlong	arg04, arg03
2cf10                 | '         fil->state |=  (0x20) ;
2cf10                 | '         return _set_dos_error(r);
2cf10     10 4E 05 F1 | 	add	fp, #16
2cf14     A7 12 02 FB | 	rdlong	arg01, fp
2cf18     14 4E 85 F1 | 	sub	fp, #20
2cf1c     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2cf20     40 00 90 FD | 	jmp	#LR__4542
2cf24                 | LR__4540
2cf24     18 4E 05 F1 | 	add	fp, #24
2cf28     A7 FA 09 FB | 	rdlong	result1, fp wz
2cf2c     18 4E 85 F1 | 	sub	fp, #24
2cf30     24 00 90 5D |  if_ne	jmp	#LR__4541
2cf34     04 4E 05 F1 | 	add	fp, #4
2cf38     A7 FA 01 FB | 	rdlong	result1, fp
2cf3c     FD 18 02 F6 | 	mov	arg04, result1
2cf40     04 4E 85 F1 | 	sub	fp, #4
2cf44     08 FA 05 F1 | 	add	result1, #8
2cf48     FD FA 01 FB | 	rdlong	result1, result1
2cf4c     10 FA 45 F5 | 	or	result1, #16
2cf50     08 18 06 F1 | 	add	arg04, #8
2cf54     0C FB 61 FC | 	wrlong	result1, arg04
2cf58                 | LR__4541
2cf58                 | '         fil->state |=  (0x10) ;
2cf58                 | '     }
2cf58                 | '     return x;
2cf58     18 4E 05 F1 | 	add	fp, #24
2cf5c     A7 FA 01 FB | 	rdlong	result1, fp
2cf60     18 4E 85 F1 | 	sub	fp, #24
2cf64                 | LR__4542
2cf64     A7 F0 03 F6 | 	mov	ptra, fp
2cf68     B2 00 A0 FD | 	call	#popregs_
2cf6c                 | _fatfs_cc_v_read_ret
2cf6c     2D 00 64 FD | 	ret
2cf70                 | 
2cf70                 | _fatfs_cc_v_write
2cf70     00 4A 05 F6 | 	mov	COUNT_, #0
2cf74     A8 00 A0 FD | 	call	#pushregs_
2cf78     1C F0 07 F1 | 	add	ptra, #28
2cf7c     04 4E 05 F1 | 	add	fp, #4
2cf80     A7 12 62 FC | 	wrlong	arg01, fp
2cf84     04 4E 05 F1 | 	add	fp, #4
2cf88     A7 14 62 FC | 	wrlong	arg02, fp
2cf8c     04 4E 05 F1 | 	add	fp, #4
2cf90     A7 16 62 FC | 	wrlong	arg03, fp
2cf94     08 4E 85 F1 | 	sub	fp, #8
2cf98     A7 12 02 FB | 	rdlong	arg01, fp
2cf9c     09 13 0A FB | 	rdlong	arg01, arg01 wz
2cfa0     0C 4E 05 F1 | 	add	fp, #12
2cfa4     A7 12 62 FC | 	wrlong	arg01, fp
2cfa8     10 4E 85 F1 | 	sub	fp, #16
2cfac                 | '         return _seterror( 5 );
2cfac     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2cfb0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2cfb4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cfb8     01 FA 65 A6 |  if_e	neg	result1, #1
2cfbc     84 00 90 AD |  if_e	jmp	#LR__4551
2cfc0     10 4E 05 F1 | 	add	fp, #16
2cfc4     A7 12 02 FB | 	rdlong	arg01, fp
2cfc8     02 00 00 FF 
2cfcc     14 12 06 F1 | 	add	arg01, ##1044
2cfd0     08 4E 85 F1 | 	sub	fp, #8
2cfd4     A7 14 02 FB | 	rdlong	arg02, fp
2cfd8     04 4E 05 F1 | 	add	fp, #4
2cfdc     A7 16 02 FB | 	rdlong	arg03, fp
2cfe0     0C 4E 05 F1 | 	add	fp, #12
2cfe4     A7 18 02 F6 | 	mov	arg04, fp
2cfe8     18 4E 85 F1 | 	sub	fp, #24
2cfec     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2cff0     14 4E 05 F1 | 	add	fp, #20
2cff4     A7 FA 61 FC | 	wrlong	result1, fp
2cff8     14 4E 85 F1 | 	sub	fp, #20
2cffc     00 FA 0D F2 | 	cmp	result1, #0 wz
2d000     34 00 90 AD |  if_e	jmp	#LR__4550
2d004     04 4E 05 F1 | 	add	fp, #4
2d008     A7 18 02 FB | 	rdlong	arg04, fp
2d00c     0C 17 02 F6 | 	mov	arg03, arg04
2d010     08 18 06 F1 | 	add	arg04, #8
2d014     0C 19 02 FB | 	rdlong	arg04, arg04
2d018     20 18 46 F5 | 	or	arg04, #32
2d01c     08 16 06 F1 | 	add	arg03, #8
2d020     0B 19 62 FC | 	wrlong	arg04, arg03
2d024                 | '         fil->state |=  (0x20) ;
2d024                 | '         return _set_dos_error(r);
2d024     10 4E 05 F1 | 	add	fp, #16
2d028     A7 12 02 FB | 	rdlong	arg01, fp
2d02c     14 4E 85 F1 | 	sub	fp, #20
2d030     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d034     0C 00 90 FD | 	jmp	#LR__4551
2d038                 | LR__4550
2d038                 | '     }
2d038                 | '     return x;
2d038     18 4E 05 F1 | 	add	fp, #24
2d03c     A7 FA 01 FB | 	rdlong	result1, fp
2d040     18 4E 85 F1 | 	sub	fp, #24
2d044                 | LR__4551
2d044     A7 F0 03 F6 | 	mov	ptra, fp
2d048     B2 00 A0 FD | 	call	#popregs_
2d04c                 | _fatfs_cc_v_write_ret
2d04c     2D 00 64 FD | 	ret
2d050                 | 
2d050                 | _fatfs_cc_v_lseek
2d050     04 4A 05 F6 | 	mov	COUNT_, #4
2d054     A8 00 A0 FD | 	call	#pushregs_
2d058     0A 1F 02 F6 | 	mov	local01, arg02
2d05c     0B 21 02 F6 | 	mov	local02, arg03
2d060     09 23 02 FB | 	rdlong	local03, arg01
2d064     02 00 00 FF 
2d068     14 22 0E F1 | 	add	local03, ##1044 wz
2d06c                 | '         return _seterror( 5 );
2d06c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d070     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2d074     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d078     01 FA 65 A6 |  if_e	neg	result1, #1
2d07c     4C 00 90 AD |  if_e	jmp	#LR__4562
2d080     00 20 0E F2 | 	cmp	local02, #0 wz
2d084     24 00 90 AD |  if_e	jmp	#LR__4560
2d088     01 20 0E F2 | 	cmp	local02, #1 wz
2d08c     14 22 06 A1 |  if_e	add	local03, #20
2d090     11 25 02 AB |  if_e	rdlong	local04, local03
2d094     14 22 86 A1 |  if_e	sub	local03, #20
2d098     12 1F 02 A1 |  if_e	add	local01, local04
2d09c     0C 22 06 51 |  if_ne	add	local03, #12
2d0a0     11 25 02 5B |  if_ne	rdlong	local04, local03
2d0a4     0C 22 86 51 |  if_ne	sub	local03, #12
2d0a8     12 1F 02 51 |  if_ne	add	local01, local04
2d0ac                 | LR__4560
2d0ac     0F 15 02 F6 | 	mov	arg02, local01
2d0b0     11 13 02 F6 | 	mov	arg01, local03
2d0b4     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2d0b8     FD 12 0A F6 | 	mov	arg01, result1 wz
2d0bc     08 00 90 AD |  if_e	jmp	#LR__4561
2d0c0                 | '         return _set_dos_error(result);
2d0c0     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d0c4     04 00 90 FD | 	jmp	#LR__4562
2d0c8                 | LR__4561
2d0c8                 | '     }
2d0c8                 | '     return offset;
2d0c8     0F FB 01 F6 | 	mov	result1, local01
2d0cc                 | LR__4562
2d0cc     A7 F0 03 F6 | 	mov	ptra, fp
2d0d0     B2 00 A0 FD | 	call	#popregs_
2d0d4                 | _fatfs_cc_v_lseek_ret
2d0d4     2D 00 64 FD | 	ret
2d0d8                 | 
2d0d8                 | _fatfs_cc_v_ioctl
2d0d8                 | ' {
2d0d8                 | '     return _seterror( 10 );
2d0d8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d0dc     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2d0e0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d0e4     01 FA 65 F6 | 	neg	result1, #1
2d0e8                 | _fatfs_cc_v_ioctl_ret
2d0e8     2D 00 64 FD | 	ret
2d0ec                 | 
2d0ec                 | _fatfs_cc_v_mkdir
2d0ec     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2d0f0     FD 12 02 F6 | 	mov	arg01, result1
2d0f4                 | ' 
2d0f4                 | '     r = f_mkdir(name);
2d0f4                 | '     return _set_dos_error(r);
2d0f4     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d0f8                 | _fatfs_cc_v_mkdir_ret
2d0f8     2D 00 64 FD | 	ret
2d0fc                 | 
2d0fc                 | _fatfs_cc_v_remove
2d0fc     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2d100     FD 12 02 F6 | 	mov	arg01, result1
2d104                 | ' 
2d104                 | '     r = f_unlink(name);
2d104                 | '     return _set_dos_error(r);
2d104     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d108                 | _fatfs_cc_v_remove_ret
2d108     2D 00 64 FD | 	ret
2d10c                 | 
2d10c                 | _fatfs_cc_v_rmdir
2d10c     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2d110     FD 12 02 F6 | 	mov	arg01, result1
2d114                 | ' 
2d114                 | '     r = f_unlink(name);
2d114                 | '     return _set_dos_error(r);
2d114     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d118                 | _fatfs_cc_v_rmdir_ret
2d118     2D 00 64 FD | 	ret
2d11c                 | 
2d11c                 | _fatfs_cc_v_rename
2d11c     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2d120     FD 12 02 F6 | 	mov	arg01, result1
2d124                 | '     return _set_dos_error(r);
2d124     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d128                 | _fatfs_cc_v_rename_ret
2d128     2D 00 64 FD | 	ret
2d12c                 | 
2d12c                 | _fatfs_cc_v_open
2d12c     07 4A 05 F6 | 	mov	COUNT_, #7
2d130     A8 00 A0 FD | 	call	#pushregs_
2d134     09 1F 02 F6 | 	mov	local01, arg01
2d138     0A 21 02 F6 | 	mov	local02, arg02
2d13c     0B 23 02 F6 | 	mov	local03, arg03
2d140     03 00 00 FF 
2d144     3C 12 06 F6 | 	mov	arg01, ##1596
2d148                 | '     return _gc_alloc(size);
2d148     10 14 06 F6 | 	mov	arg02, #16
2d14c     A0 58 BF FD | 	call	#__system___gc_doalloc
2d150     FD 24 0A F6 | 	mov	local04, result1 wz
2d154                 | '       return _seterror( 7 );
2d154     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d158     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2d15c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d160     01 FA 65 A6 |  if_e	neg	result1, #1
2d164     98 00 90 AD |  if_e	jmp	#LR__4576
2d168     12 13 02 F6 | 	mov	arg01, local04
2d16c     00 14 06 F6 | 	mov	arg02, #0
2d170     03 00 00 FF 
2d174     3C 16 06 F6 | 	mov	arg03, ##1596
2d178     98 00 A0 FD | 	call	#\builtin_bytefill_
2d17c                 | '   switch (flags & 3) {
2d17c     11 27 02 F6 | 	mov	local05, local03
2d180     03 26 0E F5 | 	and	local05, #3 wz
2d184     0C 00 90 AD |  if_e	jmp	#LR__4570
2d188     01 26 0E F2 | 	cmp	local05, #1 wz
2d18c     0C 00 90 AD |  if_e	jmp	#LR__4571
2d190     10 00 90 FD | 	jmp	#LR__4572
2d194                 | LR__4570
2d194     01 28 06 F6 | 	mov	local06, #1
2d198                 | '       fs_flags =  0x01 ;
2d198                 | '       break;
2d198     0C 00 90 FD | 	jmp	#LR__4573
2d19c                 | LR__4571
2d19c     02 28 06 F6 | 	mov	local06, #2
2d1a0                 | '       fs_flags =  0x02 ;
2d1a0                 | '       break;
2d1a0     04 00 90 FD | 	jmp	#LR__4573
2d1a4                 | LR__4572
2d1a4     03 28 06 F6 | 	mov	local06, #3
2d1a8                 | '       fs_flags =  0x01  |  0x02 ;
2d1a8                 | '       break;
2d1a8                 | LR__4573
2d1a8     08 22 CE F7 | 	test	local03, #8 wz
2d1ac     18 28 46 55 |  if_ne	or	local06, #24
2d1b0     08 00 90 5D |  if_ne	jmp	#LR__4574
2d1b4     20 22 CE F7 | 	test	local03, #32 wz
2d1b8     30 28 46 55 |  if_ne	or	local06, #48
2d1bc                 | LR__4574
2d1bc     02 00 00 FF 
2d1c0     14 24 06 F1 | 	add	local04, ##1044
2d1c4     12 13 02 F6 | 	mov	arg01, local04
2d1c8     02 00 00 FF 
2d1cc     14 24 86 F1 | 	sub	local04, ##1044
2d1d0     10 15 02 F6 | 	mov	arg02, local02
2d1d4     14 17 02 F6 | 	mov	arg03, local06
2d1d8     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2d1dc     FD 2A 0A F6 | 	mov	local07, result1 wz
2d1e0     14 00 90 AD |  if_e	jmp	#LR__4575
2d1e4     12 13 02 F6 | 	mov	arg01, local04
2d1e8                 | '     return _gc_free(ptr);
2d1e8     10 59 BF FD | 	call	#__system___gc_free
2d1ec                 | '     free(f);
2d1ec                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2d1ec                 | '     return _set_dos_error(r);
2d1ec     15 13 02 F6 | 	mov	arg01, local07
2d1f0     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d1f4     08 00 90 FD | 	jmp	#LR__4576
2d1f8                 | LR__4575
2d1f8     0F 25 62 FC | 	wrlong	local04, local01
2d1fc                 | '   }
2d1fc                 | '   fil->vfsdata = f;
2d1fc                 | '   return 0;
2d1fc     00 FA 05 F6 | 	mov	result1, #0
2d200                 | LR__4576
2d200     A7 F0 03 F6 | 	mov	ptra, fp
2d204     B2 00 A0 FD | 	call	#popregs_
2d208                 | _fatfs_cc_v_open_ret
2d208     2D 00 64 FD | 	ret
2d20c                 | 
2d20c                 | _fatfs_cc_v_flush
2d20c     09 13 02 FB | 	rdlong	arg01, arg01
2d210     02 00 00 FF 
2d214     14 12 0E F1 | 	add	arg01, ##1044 wz
2d218                 | '         return _seterror( 5 );
2d218     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d21c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2d220     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d224     01 FA 65 A6 |  if_e	neg	result1, #1
2d228     0C 00 90 AD |  if_e	jmp	#LR__4580
2d22c     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2d230     FD 12 02 F6 | 	mov	arg01, result1
2d234                 | '     }
2d234                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2d234                 | '     result = f_sync(f);
2d234                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2d234                 | '     return _set_dos_error(result);
2d234     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d238                 | LR__4580
2d238                 | _fatfs_cc_v_flush_ret
2d238     2D 00 64 FD | 	ret
2d23c                 | 
2d23c                 | _fatfs_cc_v_init
2d23c                 | ' {
2d23c                 | '     return 0;
2d23c     00 FA 05 F6 | 	mov	result1, #0
2d240                 | _fatfs_cc_v_init_ret
2d240     2D 00 64 FD | 	ret
2d244                 | 
2d244                 | _fatfs_cc_v_deinit
2d244     70 01 00 FF 
2d248     B8 15 06 F6 | 	mov	arg02, ##@LR__4776
2d24c     00 12 06 F6 | 	mov	arg01, #0
2d250     00 16 06 F6 | 	mov	arg03, #0
2d254     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
2d258     01 00 00 FF 
2d25c     08 E4 05 F1 | 	add	objptr, ##520
2d260     F2 12 02 FB | 	rdlong	arg01, objptr
2d264     04 E4 05 F1 | 	add	objptr, #4
2d268     F2 14 02 FB | 	rdlong	arg02, objptr
2d26c     01 00 00 FF 
2d270     0C E4 85 F1 | 	sub	objptr, ##524
2d274     50 40 BF FD | 	call	#__system___freepins
2d278                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2d278                 | '     _freepins(f_pinmask);
2d278                 | '     return 0;
2d278     00 FA 05 F6 | 	mov	result1, #0
2d27c                 | _fatfs_cc_v_deinit_ret
2d27c     2D 00 64 FD | 	ret
2d280                 | 
2d280                 | _fatfs_cc_get_vfs
2d280     01 4A 05 F6 | 	mov	COUNT_, #1
2d284     A8 00 A0 FD | 	call	#pushregs_
2d288     09 1F 02 F6 | 	mov	local01, arg01
2d28c     50 12 06 F6 | 	mov	arg01, #80
2d290     2C 57 BF FD | 	call	#__system___gc_alloc_managed
2d294     FD 12 02 F6 | 	mov	arg01, result1
2d298     F2 FA 01 F6 | 	mov	result1, objptr
2d29c     00 88 04 FF 
2d2a0     00 FA 45 F5 | 	or	result1, ##152043520
2d2a4     09 FB 61 FC | 	wrlong	result1, arg01
2d2a8     F2 FA 01 F6 | 	mov	result1, objptr
2d2ac     00 90 04 FF 
2d2b0     00 FA 45 F5 | 	or	result1, ##153092096
2d2b4     04 12 06 F1 | 	add	arg01, #4
2d2b8     09 FB 61 FC | 	wrlong	result1, arg01
2d2bc     F2 FA 01 F6 | 	mov	result1, objptr
2d2c0     00 98 04 FF 
2d2c4     00 FA 45 F5 | 	or	result1, ##154140672
2d2c8     04 12 06 F1 | 	add	arg01, #4
2d2cc     09 FB 61 FC | 	wrlong	result1, arg01
2d2d0     F2 FA 01 F6 | 	mov	result1, objptr
2d2d4     00 A0 04 FF 
2d2d8     00 FA 45 F5 | 	or	result1, ##155189248
2d2dc     04 12 06 F1 | 	add	arg01, #4
2d2e0     09 FB 61 FC | 	wrlong	result1, arg01
2d2e4     F2 FA 01 F6 | 	mov	result1, objptr
2d2e8     00 A8 04 FF 
2d2ec     00 FA 45 F5 | 	or	result1, ##156237824
2d2f0     04 12 06 F1 | 	add	arg01, #4
2d2f4     09 FB 61 FC | 	wrlong	result1, arg01
2d2f8     04 12 06 F1 | 	add	arg01, #4
2d2fc     09 01 68 FC | 	wrlong	#0, arg01
2d300     04 12 06 F1 | 	add	arg01, #4
2d304     09 1F 62 FC | 	wrlong	local01, arg01
2d308     04 12 06 F1 | 	add	arg01, #4
2d30c     09 01 68 FC | 	wrlong	#0, arg01
2d310     F2 FA 01 F6 | 	mov	result1, objptr
2d314     00 B0 04 FF 
2d318     00 FA 45 F5 | 	or	result1, ##157286400
2d31c     04 12 06 F1 | 	add	arg01, #4
2d320     09 FB 61 FC | 	wrlong	result1, arg01
2d324     F2 FA 01 F6 | 	mov	result1, objptr
2d328     00 B8 04 FF 
2d32c     00 FA 45 F5 | 	or	result1, ##158334976
2d330     04 12 06 F1 | 	add	arg01, #4
2d334     09 FB 61 FC | 	wrlong	result1, arg01
2d338     F2 FA 01 F6 | 	mov	result1, objptr
2d33c     00 C0 04 FF 
2d340     00 FA 45 F5 | 	or	result1, ##159383552
2d344     04 12 06 F1 | 	add	arg01, #4
2d348     09 FB 61 FC | 	wrlong	result1, arg01
2d34c     F2 FA 01 F6 | 	mov	result1, objptr
2d350     00 C8 04 FF 
2d354     00 FA 45 F5 | 	or	result1, ##160432128
2d358     04 12 06 F1 | 	add	arg01, #4
2d35c     09 FB 61 FC | 	wrlong	result1, arg01
2d360     F2 FA 01 F6 | 	mov	result1, objptr
2d364     00 D0 04 FF 
2d368     00 FA 45 F5 | 	or	result1, ##161480704
2d36c     04 12 06 F1 | 	add	arg01, #4
2d370     09 FB 61 FC | 	wrlong	result1, arg01
2d374     F2 FA 01 F6 | 	mov	result1, objptr
2d378     00 D8 04 FF 
2d37c     00 FA 45 F5 | 	or	result1, ##162529280
2d380     04 12 06 F1 | 	add	arg01, #4
2d384     09 FB 61 FC | 	wrlong	result1, arg01
2d388     F2 FA 01 F6 | 	mov	result1, objptr
2d38c     00 E0 04 FF 
2d390     00 FA 45 F5 | 	or	result1, ##163577856
2d394     04 12 06 F1 | 	add	arg01, #4
2d398     09 FB 61 FC | 	wrlong	result1, arg01
2d39c     F2 FA 01 F6 | 	mov	result1, objptr
2d3a0     00 E8 04 FF 
2d3a4     00 FA 45 F5 | 	or	result1, ##164626432
2d3a8     04 12 06 F1 | 	add	arg01, #4
2d3ac     09 FB 61 FC | 	wrlong	result1, arg01
2d3b0     F2 FA 01 F6 | 	mov	result1, objptr
2d3b4     00 F0 04 FF 
2d3b8     00 FA 45 F5 | 	or	result1, ##165675008
2d3bc     04 12 06 F1 | 	add	arg01, #4
2d3c0     09 FB 61 FC | 	wrlong	result1, arg01
2d3c4     F2 FA 01 F6 | 	mov	result1, objptr
2d3c8     00 F8 04 FF 
2d3cc     00 FA 45 F5 | 	or	result1, ##166723584
2d3d0     04 12 06 F1 | 	add	arg01, #4
2d3d4     09 FB 61 FC | 	wrlong	result1, arg01
2d3d8     F2 FA 01 F6 | 	mov	result1, objptr
2d3dc     00 00 05 FF 
2d3e0     00 FA 45 F5 | 	or	result1, ##167772160
2d3e4     04 12 06 F1 | 	add	arg01, #4
2d3e8     09 FB 61 FC | 	wrlong	result1, arg01
2d3ec     F2 FA 01 F6 | 	mov	result1, objptr
2d3f0     00 08 05 FF 
2d3f4     00 FA 45 F5 | 	or	result1, ##168820736
2d3f8     04 12 06 F1 | 	add	arg01, #4
2d3fc     09 FB 61 FC | 	wrlong	result1, arg01
2d400     4C 12 86 F1 | 	sub	arg01, #76
2d404                 | ' 
2d404                 | '     v->close = &v_close;
2d404                 | '     v->read = &v_read;
2d404                 | '     v->write = &v_write;
2d404                 | '     v->lseek = &v_lseek;
2d404                 | '     v->ioctl = &v_ioctl;
2d404                 | '     v->flush = 0;
2d404                 | '     v->vfs_data = ptr;
2d404                 | '     v->reserved = 0;
2d404                 | ' 
2d404                 | '     v->open = &v_open;
2d404                 | '     v->creat = &v_creat;
2d404                 | '     v->opendir = &v_opendir;
2d404                 | '     v->closedir = &v_closedir;
2d404                 | '     v->readdir = &v_readdir;
2d404                 | '     v->stat = &v_stat;
2d404                 | ' 
2d404                 | '     v->mkdir = &v_mkdir;
2d404                 | '     v->rmdir = &v_rmdir;
2d404                 | ' 
2d404                 | '     v->remove = &v_remove;
2d404                 | '     v->rename = &v_rename;
2d404                 | ' 
2d404                 | '     v->init = &v_init;
2d404                 | '     v->deinit = &v_deinit;
2d404                 | ' 
2d404                 | '     return v;
2d404     09 FB 01 F6 | 	mov	result1, arg01
2d408     A7 F0 03 F6 | 	mov	ptra, fp
2d40c     B2 00 A0 FD | 	call	#popregs_
2d410                 | _fatfs_cc_get_vfs_ret
2d410     2D 00 64 FD | 	ret
2d414                 | 
2d414                 | _fatfs_cc_xmit_mmc_1053
2d414     01 00 00 FF 
2d418     10 E4 05 F1 | 	add	objptr, ##528
2d41c     F2 00 02 FB | 	rdlong	_var01, objptr
2d420     08 E4 05 F1 | 	add	objptr, #8
2d424     F2 02 02 FB | 	rdlong	_var02, objptr
2d428     01 00 00 FF 
2d42c     18 E4 85 F1 | 	sub	objptr, ##536
2d430     40 02 62 FD | 	dirl	_var02
2d434     28 02 64 FD | 	setq	#1
2d438     09 05 02 FB | 	rdlong	_var03, arg01
2d43c     69 04 62 FD | 	rev	_var03
2d440     1B 04 FE F9 | 	movbyts	_var03, #27
2d444     01 05 22 FC | 	wypin	_var03, _var02
2d448     0A 05 02 F6 | 	mov	_var03, arg02
2d44c     02 14 4E F0 | 	shr	arg02, #2 wz
2d450     03 04 66 F0 | 	shl	_var03, #3
2d454     00 05 22 FC | 	wypin	_var03, _var01
2d458     41 02 62 FD | 	dirh	_var02
2d45c     08 12 06 F1 | 	add	arg01, #8
2d460     69 06 62 FD | 	rev	_var04
2d464     1B 06 FE F9 | 	movbyts	_var04, #27
2d468                 | LR__4590
2d468     01 07 22 5C |  if_ne	wypin	_var04, _var02
2d46c     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2d470     04 12 06 51 |  if_ne	add	arg01, #4
2d474     69 06 62 5D |  if_ne	rev	_var04
2d478     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
2d47c                 | LR__4591
2d47c     40 02 72 5D |  if_ne	testp	_var02 wc
2d480     F8 FF 9F 1D |  if_a	jmp	#LR__4591
2d484     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4590
2d488                 | LR__4592
2d488     40 00 72 FD | 	testp	_var01 wc
2d48c     F8 FF 9F 3D |  if_ae	jmp	#LR__4592
2d490     40 02 62 FD | 	dirl	_var02
2d494     FF FF FF FF 
2d498     01 FF 2B FC | 	wypin	##-1, _var02
2d49c     41 02 62 FD | 	dirh	_var02
2d4a0                 | _fatfs_cc_xmit_mmc_1053_ret
2d4a0     2D 00 64 FD | 	ret
2d4a4                 | 
2d4a4                 | _fatfs_cc_rcvr_mmc_1060
2d4a4     01 00 00 FF 
2d4a8     10 E4 05 F1 | 	add	objptr, ##528
2d4ac     F2 00 02 FB | 	rdlong	_var01, objptr
2d4b0     0C E4 05 F1 | 	add	objptr, #12
2d4b4     F2 02 02 FB | 	rdlong	_var02, objptr
2d4b8     01 00 00 FF 
2d4bc     1C E4 85 F1 | 	sub	objptr, ##540
2d4c0     01 03 08 FC | 	akpin	_var02
2d4c4     0A 05 0A F6 | 	mov	_var03, arg02 wz
2d4c8     02 04 4E F0 | 	shr	_var03, #2 wz
2d4cc     30 00 90 AD |  if_e	jmp	#LR__4602
2d4d0     02 07 02 F6 | 	mov	_var04, _var03
2d4d4     05 06 66 F0 | 	shl	_var04, #5
2d4d8     00 07 22 FC | 	wypin	_var04, _var01
2d4dc     01 7F 18 FC | 	wxpin	#63, _var02
2d4e0                 | LR__4600
2d4e0                 | LR__4601
2d4e0     40 02 72 FD | 	testp	_var02 wc
2d4e4     F8 FF 9F 3D |  if_ae	jmp	#LR__4601
2d4e8     01 07 8A FA | 	rdpin	_var04, _var02
2d4ec     69 06 62 FD | 	rev	_var04
2d4f0     1B 06 FE F9 | 	movbyts	_var04, #27
2d4f4     09 07 62 FC | 	wrlong	_var04, arg01
2d4f8     04 12 06 F1 | 	add	arg01, #4
2d4fc     F8 05 6E FB | 	djnz	_var03, #LR__4600
2d500                 | LR__4602
2d500     03 14 0E F5 | 	and	arg02, #3 wz
2d504     24 00 90 AD |  if_e	jmp	#LR__4605
2d508     01 4F 18 FC | 	wxpin	#39, _var02
2d50c                 | LR__4603
2d50c     00 11 28 FC | 	wypin	#8, _var01
2d510                 | LR__4604
2d510     40 02 72 FD | 	testp	_var02 wc
2d514     F8 FF 9F 3D |  if_ae	jmp	#LR__4604
2d518     01 07 8A FA | 	rdpin	_var04, _var02
2d51c     69 06 62 FD | 	rev	_var04
2d520     09 07 42 FC | 	wrbyte	_var04, arg01
2d524     01 12 06 F1 | 	add	arg01, #1
2d528     F8 15 6E FB | 	djnz	arg02, #LR__4603
2d52c                 | LR__4605
2d52c                 | _fatfs_cc_rcvr_mmc_1060_ret
2d52c     2D 00 64 FD | 	ret
2d530                 | 
2d530                 | _fatfs_cc_wait_ready_1064
2d530     01 4A 05 F6 | 	mov	COUNT_, #1
2d534     A8 00 A0 FD | 	call	#pushregs_
2d538     10 F0 07 F1 | 	add	ptra, #16
2d53c     1A FA 61 FD | 	getct	result1
2d540     08 4E 05 F1 | 	add	fp, #8
2d544     A7 FA 61 FC | 	wrlong	result1, fp
2d548     14 1E 06 FB | 	rdlong	local01, #20
2d54c     01 1E 46 F0 | 	shr	local01, #1
2d550     04 4E 05 F1 | 	add	fp, #4
2d554     A7 1E 62 FC | 	wrlong	local01, fp
2d558     0C 4E 85 F1 | 	sub	fp, #12
2d55c                 | ' {
2d55c                 | ' 	BYTE d;
2d55c                 | ' 	UINT tmr, tmout;
2d55c                 | ' 
2d55c                 | ' 	tmr = _cnt();
2d55c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2d55c                 | ' 	for(;;) {
2d55c                 | LR__4610
2d55c     04 4E 05 F1 | 	add	fp, #4
2d560     A7 12 02 F6 | 	mov	arg01, fp
2d564     04 4E 85 F1 | 	sub	fp, #4
2d568     01 14 06 F6 | 	mov	arg02, #1
2d56c     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d570     04 4E 05 F1 | 	add	fp, #4
2d574     A7 1E C2 FA | 	rdbyte	local01, fp
2d578     04 4E 85 F1 | 	sub	fp, #4
2d57c     FF 1E 0E F2 | 	cmp	local01, #255 wz
2d580     01 FA 05 A6 |  if_e	mov	result1, #1
2d584     28 00 90 AD |  if_e	jmp	#LR__4611
2d588     1A FA 61 FD | 	getct	result1
2d58c     08 4E 05 F1 | 	add	fp, #8
2d590     A7 1E 02 FB | 	rdlong	local01, fp
2d594     0F FB 81 F1 | 	sub	result1, local01
2d598     04 4E 05 F1 | 	add	fp, #4
2d59c     A7 1E 02 FB | 	rdlong	local01, fp
2d5a0     0C 4E 85 F1 | 	sub	fp, #12
2d5a4     0F FB 11 F2 | 	cmp	result1, local01 wc
2d5a8     00 FA 05 36 |  if_ae	mov	result1, #0
2d5ac     AC FF 9F CD |  if_b	jmp	#LR__4610
2d5b0                 | LR__4611
2d5b0     A7 F0 03 F6 | 	mov	ptra, fp
2d5b4     B2 00 A0 FD | 	call	#popregs_
2d5b8                 | _fatfs_cc_wait_ready_1064_ret
2d5b8     2D 00 64 FD | 	ret
2d5bc                 | 
2d5bc                 | _fatfs_cc_deselect_1070
2d5bc     00 4A 05 F6 | 	mov	COUNT_, #0
2d5c0     A8 00 A0 FD | 	call	#pushregs_
2d5c4     14 F0 07 F1 | 	add	ptra, #20
2d5c8     01 00 00 FF 
2d5cc     14 E4 05 F1 | 	add	objptr, ##532
2d5d0     F2 14 02 FB | 	rdlong	arg02, objptr
2d5d4     04 4E 05 F1 | 	add	fp, #4
2d5d8     A7 14 62 FC | 	wrlong	arg02, fp
2d5dc     04 E4 85 F1 | 	sub	objptr, #4
2d5e0     F2 14 02 FB | 	rdlong	arg02, objptr
2d5e4     04 4E 05 F1 | 	add	fp, #4
2d5e8     A7 14 62 FC | 	wrlong	arg02, fp
2d5ec     08 E4 05 F1 | 	add	objptr, #8
2d5f0     F2 14 02 FB | 	rdlong	arg02, objptr
2d5f4     04 4E 05 F1 | 	add	fp, #4
2d5f8     A7 14 62 FC | 	wrlong	arg02, fp
2d5fc     04 E4 05 F1 | 	add	objptr, #4
2d600     F2 14 02 FB | 	rdlong	arg02, objptr
2d604     01 00 00 FF 
2d608     1C E4 85 F1 | 	sub	objptr, ##540
2d60c     04 4E 05 F1 | 	add	fp, #4
2d610     A7 14 62 FC | 	wrlong	arg02, fp
2d614     0C 4E 85 F1 | 	sub	fp, #12
2d618     A7 12 02 FB | 	rdlong	arg01, fp
2d61c     04 4E 85 F1 | 	sub	fp, #4
2d620     59 12 62 FD | 	drvh	arg01
2d624     1F 20 64 FD | 	waitx	#16
2d628     A7 12 02 F6 | 	mov	arg01, fp
2d62c     01 14 06 F6 | 	mov	arg02, #1
2d630     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d634     A7 F0 03 F6 | 	mov	ptra, fp
2d638     B2 00 A0 FD | 	call	#popregs_
2d63c                 | _fatfs_cc_deselect_1070_ret
2d63c     2D 00 64 FD | 	ret
2d640                 | 
2d640                 | _fatfs_cc_select_1074
2d640     00 4A 05 F6 | 	mov	COUNT_, #0
2d644     A8 00 A0 FD | 	call	#pushregs_
2d648     10 F0 07 F1 | 	add	ptra, #16
2d64c     01 00 00 FF 
2d650     14 E4 05 F1 | 	add	objptr, ##532
2d654     F2 14 02 FB | 	rdlong	arg02, objptr
2d658     08 4E 05 F1 | 	add	fp, #8
2d65c     A7 14 62 FC | 	wrlong	arg02, fp
2d660     08 E4 05 F1 | 	add	objptr, #8
2d664     F2 12 02 FB | 	rdlong	arg01, objptr
2d668     01 00 00 FF 
2d66c     1C E4 85 F1 | 	sub	objptr, ##540
2d670     04 4E 05 F1 | 	add	fp, #4
2d674     A7 12 62 FC | 	wrlong	arg01, fp
2d678     50 12 62 FD | 	fltl	arg01
2d67c     04 4E 85 F1 | 	sub	fp, #4
2d680     A7 12 02 FB | 	rdlong	arg01, fp
2d684     58 12 62 FD | 	drvl	arg01
2d688     1F 20 64 FD | 	waitx	#16
2d68c     04 4E 05 F1 | 	add	fp, #4
2d690     A7 12 02 FB | 	rdlong	arg01, fp
2d694     41 12 62 FD | 	dirh	arg01
2d698     08 4E 85 F1 | 	sub	fp, #8
2d69c     A7 12 02 F6 | 	mov	arg01, fp
2d6a0     04 4E 85 F1 | 	sub	fp, #4
2d6a4     01 14 06 F6 | 	mov	arg02, #1
2d6a8     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d6ac     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1064
2d6b0     00 FA 0D F2 | 	cmp	result1, #0 wz
2d6b4     01 FA 05 56 |  if_ne	mov	result1, #1
2d6b8     08 00 90 5D |  if_ne	jmp	#LR__4620
2d6bc     FC FE BF FD | 	call	#_fatfs_cc_deselect_1070
2d6c0                 | ' 
2d6c0                 | ' 	deselect();
2d6c0                 | ' 	return 0;
2d6c0     00 FA 05 F6 | 	mov	result1, #0
2d6c4                 | LR__4620
2d6c4     A7 F0 03 F6 | 	mov	ptra, fp
2d6c8     B2 00 A0 FD | 	call	#popregs_
2d6cc                 | _fatfs_cc_select_1074_ret
2d6cc     2D 00 64 FD | 	ret
2d6d0                 | 
2d6d0                 | _fatfs_cc_rcvr_datablock_1078
2d6d0     01 4A 05 F6 | 	mov	COUNT_, #1
2d6d4     A8 00 A0 FD | 	call	#pushregs_
2d6d8     18 F0 07 F1 | 	add	ptra, #24
2d6dc     04 4E 05 F1 | 	add	fp, #4
2d6e0     A7 12 62 FC | 	wrlong	arg01, fp
2d6e4     04 4E 05 F1 | 	add	fp, #4
2d6e8     A7 14 62 FC | 	wrlong	arg02, fp
2d6ec     1A FA 61 FD | 	getct	result1
2d6f0     08 4E 05 F1 | 	add	fp, #8
2d6f4     A7 FA 61 FC | 	wrlong	result1, fp
2d6f8     14 1E 06 FB | 	rdlong	local01, #20
2d6fc     03 1E 46 F0 | 	shr	local01, #3
2d700     04 4E 05 F1 | 	add	fp, #4
2d704     A7 1E 62 FC | 	wrlong	local01, fp
2d708     14 4E 85 F1 | 	sub	fp, #20
2d70c                 | ' 	BYTE *buff,
2d70c                 | ' 	UINT btr
2d70c                 | ' )
2d70c                 | ' {
2d70c                 | ' 	BYTE d[2];
2d70c                 | ' 	UINT tmr, tmout;
2d70c                 | ' 
2d70c                 | ' 	tmr = _cnt();
2d70c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2d70c                 | ' 	for(;;) {
2d70c                 | LR__4630
2d70c     0C 4E 05 F1 | 	add	fp, #12
2d710     A7 12 02 F6 | 	mov	arg01, fp
2d714     0C 4E 85 F1 | 	sub	fp, #12
2d718     01 14 06 F6 | 	mov	arg02, #1
2d71c     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d720     0C 4E 05 F1 | 	add	fp, #12
2d724     A7 1E C2 FA | 	rdbyte	local01, fp
2d728     0C 4E 85 F1 | 	sub	fp, #12
2d72c     FF 1E 0E F2 | 	cmp	local01, #255 wz
2d730     28 00 90 5D |  if_ne	jmp	#LR__4631
2d734     1A FA 61 FD | 	getct	result1
2d738     FD 1E 02 F6 | 	mov	local01, result1
2d73c     10 4E 05 F1 | 	add	fp, #16
2d740     A7 14 02 FB | 	rdlong	arg02, fp
2d744     0A 1F 82 F1 | 	sub	local01, arg02
2d748     04 4E 05 F1 | 	add	fp, #4
2d74c     A7 14 02 FB | 	rdlong	arg02, fp
2d750     14 4E 85 F1 | 	sub	fp, #20
2d754     0A 1F 12 F2 | 	cmp	local01, arg02 wc
2d758     B0 FF 9F CD |  if_b	jmp	#LR__4630
2d75c                 | LR__4631
2d75c     0C 4E 05 F1 | 	add	fp, #12
2d760     A7 1E C2 FA | 	rdbyte	local01, fp
2d764     0C 4E 85 F1 | 	sub	fp, #12
2d768     FE 1E 0E F2 | 	cmp	local01, #254 wz
2d76c     00 FA 05 56 |  if_ne	mov	result1, #0
2d770     30 00 90 5D |  if_ne	jmp	#LR__4632
2d774     04 4E 05 F1 | 	add	fp, #4
2d778     A7 12 02 FB | 	rdlong	arg01, fp
2d77c     04 4E 05 F1 | 	add	fp, #4
2d780     A7 14 02 FB | 	rdlong	arg02, fp
2d784     08 4E 85 F1 | 	sub	fp, #8
2d788     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d78c     0C 4E 05 F1 | 	add	fp, #12
2d790     A7 12 02 F6 | 	mov	arg01, fp
2d794     0C 4E 85 F1 | 	sub	fp, #12
2d798     02 14 06 F6 | 	mov	arg02, #2
2d79c     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d7a0                 | ' 
2d7a0                 | ' 	rcvr_mmc(buff, btr);
2d7a0                 | ' 	rcvr_mmc(d, 2);
2d7a0                 | ' 
2d7a0                 | ' 	return 1;
2d7a0     01 FA 05 F6 | 	mov	result1, #1
2d7a4                 | LR__4632
2d7a4     A7 F0 03 F6 | 	mov	ptra, fp
2d7a8     B2 00 A0 FD | 	call	#popregs_
2d7ac                 | _fatfs_cc_rcvr_datablock_1078_ret
2d7ac     2D 00 64 FD | 	ret
2d7b0                 | 
2d7b0                 | _fatfs_cc_xmit_datablock_1080
2d7b0     00 4A 05 F6 | 	mov	COUNT_, #0
2d7b4     A8 00 A0 FD | 	call	#pushregs_
2d7b8     10 F0 07 F1 | 	add	ptra, #16
2d7bc     04 4E 05 F1 | 	add	fp, #4
2d7c0     A7 12 62 FC | 	wrlong	arg01, fp
2d7c4     04 4E 05 F1 | 	add	fp, #4
2d7c8     A7 14 42 FC | 	wrbyte	arg02, fp
2d7cc     08 4E 85 F1 | 	sub	fp, #8
2d7d0     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1064
2d7d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2d7d8     00 FA 05 A6 |  if_e	mov	result1, #0
2d7dc     90 00 90 AD |  if_e	jmp	#LR__4641
2d7e0     08 4E 05 F1 | 	add	fp, #8
2d7e4     A7 14 C2 FA | 	rdbyte	arg02, fp
2d7e8     04 4E 05 F1 | 	add	fp, #4
2d7ec     A7 14 42 FC | 	wrbyte	arg02, fp
2d7f0     A7 12 02 F6 | 	mov	arg01, fp
2d7f4     0C 4E 85 F1 | 	sub	fp, #12
2d7f8     01 14 06 F6 | 	mov	arg02, #1
2d7fc     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1053
2d800     08 4E 05 F1 | 	add	fp, #8
2d804     A7 14 C2 FA | 	rdbyte	arg02, fp
2d808     08 4E 85 F1 | 	sub	fp, #8
2d80c     FD 14 0E F2 | 	cmp	arg02, #253 wz
2d810     58 00 90 AD |  if_e	jmp	#LR__4640
2d814     04 4E 05 F1 | 	add	fp, #4
2d818     A7 12 02 FB | 	rdlong	arg01, fp
2d81c     04 4E 85 F1 | 	sub	fp, #4
2d820     09 14 C6 F9 | 	decod	arg02, #9
2d824     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1053
2d828     0C 4E 05 F1 | 	add	fp, #12
2d82c     A7 12 02 F6 | 	mov	arg01, fp
2d830     0C 4E 85 F1 | 	sub	fp, #12
2d834     02 14 06 F6 | 	mov	arg02, #2
2d838     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d83c     0C 4E 05 F1 | 	add	fp, #12
2d840     A7 12 02 F6 | 	mov	arg01, fp
2d844     0C 4E 85 F1 | 	sub	fp, #12
2d848     01 14 06 F6 | 	mov	arg02, #1
2d84c     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d850     0C 4E 05 F1 | 	add	fp, #12
2d854     A7 14 C2 FA | 	rdbyte	arg02, fp
2d858     0C 4E 85 F1 | 	sub	fp, #12
2d85c     1F 14 06 F5 | 	and	arg02, #31
2d860     05 14 0E F2 | 	cmp	arg02, #5 wz
2d864                 | ' 			return 0;
2d864     00 FA 05 56 |  if_ne	mov	result1, #0
2d868     04 00 90 5D |  if_ne	jmp	#LR__4641
2d86c                 | LR__4640
2d86c                 | ' 	}
2d86c                 | ' 
2d86c                 | ' 	return 1;
2d86c     01 FA 05 F6 | 	mov	result1, #1
2d870                 | LR__4641
2d870     A7 F0 03 F6 | 	mov	ptra, fp
2d874     B2 00 A0 FD | 	call	#popregs_
2d878                 | _fatfs_cc_xmit_datablock_1080_ret
2d878     2D 00 64 FD | 	ret
2d87c                 | 
2d87c                 | _fatfs_cc_send_cmd_1084
2d87c     01 4A 05 F6 | 	mov	COUNT_, #1
2d880     A8 00 A0 FD | 	call	#pushregs_
2d884     1C F0 07 F1 | 	add	ptra, #28
2d888                 | _fatfs_cc_send_cmd_1084_enter
2d888     04 4E 05 F1 | 	add	fp, #4
2d88c     A7 12 42 FC | 	wrbyte	arg01, fp
2d890     04 4E 05 F1 | 	add	fp, #4
2d894     A7 14 62 FC | 	wrlong	arg02, fp
2d898     04 4E 85 F1 | 	sub	fp, #4
2d89c     A7 FA C1 FA | 	rdbyte	result1, fp
2d8a0     04 4E 85 F1 | 	sub	fp, #4
2d8a4     80 FA CD F7 | 	test	result1, #128 wz
2d8a8     44 00 90 AD |  if_e	jmp	#LR__4650
2d8ac     04 4E 05 F1 | 	add	fp, #4
2d8b0     A7 14 C2 FA | 	rdbyte	arg02, fp
2d8b4     7F 14 06 F5 | 	and	arg02, #127
2d8b8     A7 14 42 FC | 	wrbyte	arg02, fp
2d8bc     04 4E 85 F1 | 	sub	fp, #4
2d8c0     37 12 06 F6 | 	mov	arg01, #55
2d8c4     00 14 06 F6 | 	mov	arg02, #0
2d8c8     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1084
2d8cc     0C 4E 05 F1 | 	add	fp, #12
2d8d0     A7 FA 41 FC | 	wrbyte	result1, fp
2d8d4     A7 14 C2 FA | 	rdbyte	arg02, fp
2d8d8     0C 4E 85 F1 | 	sub	fp, #12
2d8dc     02 14 16 F2 | 	cmp	arg02, #2 wc
2d8e0     0C 4E 05 31 |  if_ae	add	fp, #12
2d8e4     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
2d8e8     0C 4E 85 31 |  if_ae	sub	fp, #12
2d8ec     6C 01 90 3D |  if_ae	jmp	#LR__4654
2d8f0                 | LR__4650
2d8f0     04 4E 05 F1 | 	add	fp, #4
2d8f4     A7 14 C2 FA | 	rdbyte	arg02, fp
2d8f8     04 4E 85 F1 | 	sub	fp, #4
2d8fc     0C 14 0E F2 | 	cmp	arg02, #12 wz
2d900     14 00 90 AD |  if_e	jmp	#LR__4651
2d904     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1070
2d908     34 FD BF FD | 	call	#_fatfs_cc_select_1074
2d90c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d910     FF FA 05 A6 |  if_e	mov	result1, #255
2d914     44 01 90 AD |  if_e	jmp	#LR__4654
2d918                 | LR__4651
2d918     04 4E 05 F1 | 	add	fp, #4
2d91c     A7 14 C2 FA | 	rdbyte	arg02, fp
2d920     40 FA 05 F6 | 	mov	result1, #64
2d924     0A FB 41 F5 | 	or	result1, arg02
2d928     10 4E 05 F1 | 	add	fp, #16
2d92c     A7 FA 41 FC | 	wrbyte	result1, fp
2d930     0C 4E 85 F1 | 	sub	fp, #12
2d934     A7 FA 01 FB | 	rdlong	result1, fp
2d938     18 FA 45 F0 | 	shr	result1, #24
2d93c     0D 4E 05 F1 | 	add	fp, #13
2d940     A7 FA 41 FC | 	wrbyte	result1, fp
2d944     0D 4E 85 F1 | 	sub	fp, #13
2d948     A7 FA 01 FB | 	rdlong	result1, fp
2d94c     10 FA 45 F0 | 	shr	result1, #16
2d950     0E 4E 05 F1 | 	add	fp, #14
2d954     A7 FA 41 FC | 	wrbyte	result1, fp
2d958     0E 4E 85 F1 | 	sub	fp, #14
2d95c     A7 FA 01 FB | 	rdlong	result1, fp
2d960     08 FA 45 F0 | 	shr	result1, #8
2d964     0F 4E 05 F1 | 	add	fp, #15
2d968     A7 FA 41 FC | 	wrbyte	result1, fp
2d96c     0F 4E 85 F1 | 	sub	fp, #15
2d970     A7 FA 01 FB | 	rdlong	result1, fp
2d974     10 4E 05 F1 | 	add	fp, #16
2d978     A7 FA 41 FC | 	wrbyte	result1, fp
2d97c     0C 4E 85 F1 | 	sub	fp, #12
2d980     A7 02 48 FC | 	wrbyte	#1, fp
2d984     08 4E 85 F1 | 	sub	fp, #8
2d988     A7 FA C9 FA | 	rdbyte	result1, fp wz
2d98c     04 4E 85 F1 | 	sub	fp, #4
2d990     0C 4E 05 A1 |  if_e	add	fp, #12
2d994     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2d998     0C 4E 85 A1 |  if_e	sub	fp, #12
2d99c     04 4E 05 F1 | 	add	fp, #4
2d9a0     A7 FA C1 FA | 	rdbyte	result1, fp
2d9a4     04 4E 85 F1 | 	sub	fp, #4
2d9a8     08 FA 0D F2 | 	cmp	result1, #8 wz
2d9ac     0C 4E 05 A1 |  if_e	add	fp, #12
2d9b0     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2d9b4     0C 4E 85 A1 |  if_e	sub	fp, #12
2d9b8     0C 4E 05 F1 | 	add	fp, #12
2d9bc     A7 14 C2 FA | 	rdbyte	arg02, fp
2d9c0     0D 4E 05 F1 | 	add	fp, #13
2d9c4     A7 14 42 FC | 	wrbyte	arg02, fp
2d9c8     05 4E 85 F1 | 	sub	fp, #5
2d9cc     A7 12 02 F6 | 	mov	arg01, fp
2d9d0     14 4E 85 F1 | 	sub	fp, #20
2d9d4     06 14 06 F6 | 	mov	arg02, #6
2d9d8     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1053
2d9dc     04 4E 05 F1 | 	add	fp, #4
2d9e0     A7 1E C2 FA | 	rdbyte	local01, fp
2d9e4     04 4E 85 F1 | 	sub	fp, #4
2d9e8     0C 1E 0E F2 | 	cmp	local01, #12 wz
2d9ec     10 4E 05 A1 |  if_e	add	fp, #16
2d9f0     A7 12 02 A6 |  if_e	mov	arg01, fp
2d9f4     10 4E 85 A1 |  if_e	sub	fp, #16
2d9f8     01 14 06 A6 |  if_e	mov	arg02, #1
2d9fc     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1060
2da00     0C 4E 05 F1 | 	add	fp, #12
2da04     A7 14 48 FC | 	wrbyte	#10, fp
2da08     0C 4E 85 F1 | 	sub	fp, #12
2da0c                 | ' 	n = 10;
2da0c                 | ' 	do
2da0c                 | LR__4652
2da0c     10 4E 05 F1 | 	add	fp, #16
2da10     A7 12 02 F6 | 	mov	arg01, fp
2da14     10 4E 85 F1 | 	sub	fp, #16
2da18     01 14 06 F6 | 	mov	arg02, #1
2da1c     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2da20     10 4E 05 F1 | 	add	fp, #16
2da24     A7 1E C2 FA | 	rdbyte	local01, fp
2da28     10 4E 85 F1 | 	sub	fp, #16
2da2c     80 1E CE F7 | 	test	local01, #128 wz
2da30     1C 00 90 AD |  if_e	jmp	#LR__4653
2da34     0C 4E 05 F1 | 	add	fp, #12
2da38     A7 1E C2 FA | 	rdbyte	local01, fp
2da3c     01 1E 86 F1 | 	sub	local01, #1
2da40     A7 1E 42 FC | 	wrbyte	local01, fp
2da44     A7 1E CA FA | 	rdbyte	local01, fp wz
2da48     0C 4E 85 F1 | 	sub	fp, #12
2da4c     BC FF 9F 5D |  if_ne	jmp	#LR__4652
2da50                 | LR__4653
2da50                 | ' 
2da50                 | ' 	return d;
2da50     10 4E 05 F1 | 	add	fp, #16
2da54     A7 FA C1 FA | 	rdbyte	result1, fp
2da58     10 4E 85 F1 | 	sub	fp, #16
2da5c                 | LR__4654
2da5c     A7 F0 03 F6 | 	mov	ptra, fp
2da60     B2 00 A0 FD | 	call	#popregs_
2da64                 | _fatfs_cc_send_cmd_1084_ret
2da64     2D 00 64 FD | 	ret
2da68                 | 
2da68                 | _fatfs_cc_disk_deinitialize
2da68     03 4A 05 F6 | 	mov	COUNT_, #3
2da6c     A8 00 A0 FD | 	call	#pushregs_
2da70     00 12 4E F2 | 	cmps	arg01, #0 wz
2da74     01 00 00 FF 
2da78     14 E4 05 F1 | 	add	objptr, ##532
2da7c     F2 12 02 FB | 	rdlong	arg01, objptr
2da80     04 E4 85 F1 | 	sub	objptr, #4
2da84     F2 1E 02 FB | 	rdlong	local01, objptr
2da88     08 E4 05 F1 | 	add	objptr, #8
2da8c     F2 20 02 FB | 	rdlong	local02, objptr
2da90     04 E4 05 F1 | 	add	objptr, #4
2da94     F2 22 02 FB | 	rdlong	local03, objptr
2da98     01 00 00 FF 
2da9c     1C E4 85 F1 | 	sub	objptr, ##540
2daa0                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2daa0                 | '         return RES_NOTRDY;
2daa0     03 FA 05 56 |  if_ne	mov	result1, #3
2daa4     2C 00 90 5D |  if_ne	jmp	#LR__4660
2daa8     50 12 62 FD | 	fltl	arg01
2daac     09 01 08 FC | 	wrpin	#0, arg01
2dab0     50 1E 62 FD | 	fltl	local01
2dab4     0F 01 08 FC | 	wrpin	#0, local01
2dab8     50 20 62 FD | 	fltl	local02
2dabc     10 01 08 FC | 	wrpin	#0, local02
2dac0     50 22 62 FD | 	fltl	local03
2dac4     11 01 08 FC | 	wrpin	#0, local03
2dac8     0A 12 06 F6 | 	mov	arg01, #10
2dacc     98 13 BF FD | 	call	#__system___waitms
2dad0                 | '     }
2dad0                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2dad0                 | '     _pinclear(PIN_SS);
2dad0                 | '     _pinclear(PIN_CLK);
2dad0                 | '     _pinclear(PIN_DI);
2dad0                 | '     _pinclear(PIN_DO);
2dad0                 | ' 
2dad0                 | '     _waitms(10);
2dad0                 | ' 
2dad0                 | '     return 0;
2dad0     00 FA 05 F6 | 	mov	result1, #0
2dad4                 | LR__4660
2dad4     A7 F0 03 F6 | 	mov	ptra, fp
2dad8     B2 00 A0 FD | 	call	#popregs_
2dadc                 | _fatfs_cc_disk_deinitialize_ret
2dadc     2D 00 64 FD | 	ret
2dae0                 | 
2dae0                 | _fatfs_cc_gettimeofday
2dae0     04 4A 05 F6 | 	mov	COUNT_, #4
2dae4     A8 00 A0 FD | 	call	#pushregs_
2dae8     09 1F 02 F6 | 	mov	local01, arg01
2daec     54 0F BF FD | 	call	#__system___getus
2daf0     FD 12 02 F6 | 	mov	arg01, result1
2daf4     02 00 00 FF 
2daf8     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
2dafc     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
2db00     09 FB 01 F6 | 	mov	result1, arg01
2db04     10 FB 81 F1 | 	sub	result1, local02
2db08     A1 07 00 FF 
2db0c     40 FA 15 FD | 	qdiv	result1, ##1000000
2db10     02 00 00 FF 
2db14     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2db18     18 20 62 FD | 	getqx	local02
2db1c     A1 07 00 FF 
2db20     40 FA 15 FD | 	qdiv	result1, ##1000000
2db24     00 20 0E F2 | 	cmp	local02, #0 wz
2db28     19 22 62 FD | 	getqy	local03
2db2c     28 00 90 AD |  if_e	jmp	#LR__4670
2db30     02 00 00 FF 
2db34     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2db38     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2db3c     10 25 02 F1 | 	add	local04, local02
2db40     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2db44     11 13 82 F1 | 	sub	arg01, local03
2db48     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
2db4c     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
2db50     02 00 00 FF 
2db54     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2db58                 | LR__4670
2db58     02 00 00 FF 
2db5c     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2db60     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2db64     02 00 00 FF 
2db68     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
2db6c     0F 25 62 FC | 	wrlong	local04, local01
2db70     04 1E 06 F1 | 	add	local01, #4
2db74     0F 23 62 FC | 	wrlong	local03, local01
2db78                 | '         lastsec += secs;
2db78                 | '         lastus = now - leftover;
2db78                 | '     }
2db78                 | '     tv->tv_sec = lastsec;
2db78                 | '     tv->tv_usec = leftover;
2db78                 | '     return 0;
2db78     00 FA 05 F6 | 	mov	result1, #0
2db7c     A7 F0 03 F6 | 	mov	ptra, fp
2db80     B2 00 A0 FD | 	call	#popregs_
2db84                 | _fatfs_cc_gettimeofday_ret
2db84     2D 00 64 FD | 	ret
2db88                 | 
2db88                 | _fatfs_cc__is_leap_year
2db88     09 FB 51 F6 | 	abs	result1, arg01 wc
2db8c     03 FA 05 F5 | 	and	result1, #3
2db90     FD FA 89 F6 | 	negc	result1, result1 wz
2db94     38 00 90 5D |  if_ne	jmp	#LR__4681
2db98     09 FB 51 F6 | 	abs	result1, arg01 wc
2db9c     64 FA 15 FD | 	qdiv	result1, #100
2dba0     19 FA 61 FD | 	getqy	result1
2dba4     FD FA 89 F6 | 	negc	result1, result1 wz
2dba8     1C 00 90 5D |  if_ne	jmp	#LR__4680
2dbac     09 FB 51 F6 | 	abs	result1, arg01 wc
2dbb0     90 FB 15 FD | 	qdiv	result1, #400
2dbb4                 | '       return (0 == y % 400);
2dbb4     00 FA 05 F6 | 	mov	result1, #0
2dbb8     19 00 62 FD | 	getqy	_var01
2dbbc     00 01 8A F6 | 	negc	_var01, _var01 wz
2dbc0     01 FA 05 A6 |  if_e	mov	result1, #1
2dbc4     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2dbc8                 | LR__4680
2dbc8                 | '     return 1;
2dbc8     01 FA 05 F6 | 	mov	result1, #1
2dbcc     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2dbd0                 | LR__4681
2dbd0                 | '   }
2dbd0                 | '   return 0;
2dbd0     00 FA 05 F6 | 	mov	result1, #0
2dbd4                 | _fatfs_cc__is_leap_year_ret
2dbd4     2D 00 64 FD | 	ret
2dbd8                 | 
2dbd8                 | _fatfs_cc___tzoffset
2dbd8     09 01 0A F6 | 	mov	_var01, arg01 wz
2dbdc     FF FF FF FF 
2dbe0     0A FF 6B FC | 	wrlong	##-1, arg02
2dbe4     01 02 06 F6 | 	mov	_var02, #1
2dbe8     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
2dbec                 | '                 return 0;
2dbec     00 FA 05 A6 |  if_e	mov	result1, #0
2dbf0     94 02 90 AD |  if_e	jmp	#LR__4707
2dbf4     0A 01 68 FC | 	wrlong	#0, arg02
2dbf8     02 00 00 FF 
2dbfc     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2dc00     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2dc04                 | ' 
2dc04                 | '        *hasdst = 0;
2dc04                 | ' 
2dc04                 | ' 	n = stdname;
2dc04                 | '         while (*s && isalpha(*s)) {
2dc04     02 00 00 FF 
2dc08     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2dc0c     97 28 48 FB | 	callpa	#(@LR__4691-@LR__4690)>>2,fcache_load_ptr_
2dc10                 | LR__4690
2dc10     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2dc14     48 00 90 AD |  if_e	jmp	#LR__4692
2dc18     00 13 C2 FA | 	rdbyte	arg01, _var01
2dc1c                 | ' {
2dc1c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2dc1c     80 12 36 F3 | 	fle	arg01, #128 wc
2dc20                 | '     return __ctype[c];
2dc20     02 00 00 FF 
2dc24     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2dc28     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2dc2c     09 FB C1 FA | 	rdbyte	result1, arg01
2dc30     02 00 00 FF 
2dc34     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2dc38     0C FA CD F7 | 	test	result1, #12 wz
2dc3c     20 00 90 AD |  if_e	jmp	#LR__4692
2dc40     00 09 02 F6 | 	mov	_var05, _var01
2dc44     00 0B 02 F6 | 	mov	_var06, _var01
2dc48     01 0A 06 F1 | 	add	_var06, #1
2dc4c     04 0D C2 FA | 	rdbyte	_var07, _var05
2dc50     05 01 02 F6 | 	mov	_var01, _var06
2dc54     03 0D 42 FC | 	wrbyte	_var07, _var04
2dc58     01 06 06 F1 | 	add	_var04, #1
2dc5c     B0 FF 9F FD | 	jmp	#LR__4690
2dc60                 | LR__4691
2dc60                 | LR__4692
2dc60     03 01 48 FC | 	wrbyte	#0, _var04
2dc64     00 0E 06 F6 | 	mov	_var08, #0
2dc68     00 05 C2 FA | 	rdbyte	_var03, _var01
2dc6c     2D 04 0E F2 | 	cmp	_var03, #45 wz
2dc70     01 02 66 A6 |  if_e	neg	_var02, #1
2dc74     01 00 06 A1 |  if_e	add	_var01, #1
2dc78     97 28 48 FB | 	callpa	#(@LR__4694-@LR__4693)>>2,fcache_load_ptr_
2dc7c                 | '                 sgn = -1;
2dc7c                 | '                 s++;
2dc7c                 | '         }
2dc7c                 | '         while (isdigit(*s)) {
2dc7c                 | LR__4693
2dc7c     00 13 C2 FA | 	rdbyte	arg01, _var01
2dc80                 | ' {
2dc80                 | '   return  (__ctype_get(c) & 0x02 ) ;
2dc80     80 12 36 F3 | 	fle	arg01, #128 wc
2dc84                 | '     return __ctype[c];
2dc84     02 00 00 FF 
2dc88     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2dc8c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2dc90     09 FB C1 FA | 	rdbyte	result1, arg01
2dc94     02 00 00 FF 
2dc98     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2dc9c     02 FA CD F7 | 	test	result1, #2 wz
2dca0     28 00 90 AD |  if_e	jmp	#LR__4695
2dca4     07 05 02 F6 | 	mov	_var03, _var08
2dca8     02 04 66 F0 | 	shl	_var03, #2
2dcac     07 05 02 F1 | 	add	_var03, _var08
2dcb0     01 04 66 F0 | 	shl	_var03, #1
2dcb4     00 09 C2 FA | 	rdbyte	_var05, _var01
2dcb8     30 08 86 F1 | 	sub	_var05, #48
2dcbc     04 05 02 F1 | 	add	_var03, _var05
2dcc0     02 0F 02 F6 | 	mov	_var08, _var03
2dcc4     01 00 06 F1 | 	add	_var01, #1
2dcc8     B0 FF 9F FD | 	jmp	#LR__4693
2dccc                 | LR__4694
2dccc                 | LR__4695
2dccc     07 00 00 FF 
2dcd0     10 0E 06 FD | 	qmul	_var08, ##3600
2dcd4     00 05 C2 FA | 	rdbyte	_var03, _var01
2dcd8     3A 04 0E F2 | 	cmp	_var03, #58 wz
2dcdc     18 10 62 FD | 	getqx	_var09
2dce0     70 00 90 5D |  if_ne	jmp	#LR__4699
2dce4     00 0E 06 F6 | 	mov	_var08, #0
2dce8     01 00 06 F1 | 	add	_var01, #1
2dcec     97 28 48 FB | 	callpa	#(@LR__4697-@LR__4696)>>2,fcache_load_ptr_
2dcf0                 | '                 x = 0;
2dcf0                 | '                 s++;
2dcf0                 | '                 while (isdigit(*s)) {
2dcf0                 | LR__4696
2dcf0     00 13 C2 FA | 	rdbyte	arg01, _var01
2dcf4                 | ' {
2dcf4                 | '   return  (__ctype_get(c) & 0x02 ) ;
2dcf4     80 12 36 F3 | 	fle	arg01, #128 wc
2dcf8                 | '     return __ctype[c];
2dcf8     02 00 00 FF 
2dcfc     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2dd00     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2dd04     09 FB C1 FA | 	rdbyte	result1, arg01
2dd08     02 00 00 FF 
2dd0c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2dd10     02 FA CD F7 | 	test	result1, #2 wz
2dd14     28 00 90 AD |  if_e	jmp	#LR__4698
2dd18     07 05 02 F6 | 	mov	_var03, _var08
2dd1c     02 04 66 F0 | 	shl	_var03, #2
2dd20     07 05 02 F1 | 	add	_var03, _var08
2dd24     01 04 66 F0 | 	shl	_var03, #1
2dd28     00 09 C2 FA | 	rdbyte	_var05, _var01
2dd2c     30 08 86 F1 | 	sub	_var05, #48
2dd30     04 05 02 F1 | 	add	_var03, _var05
2dd34     02 0F 02 F6 | 	mov	_var08, _var03
2dd38     01 00 06 F1 | 	add	_var01, #1
2dd3c     B0 FF 9F FD | 	jmp	#LR__4696
2dd40                 | LR__4697
2dd40                 | LR__4698
2dd40     07 0D 02 F6 | 	mov	_var07, _var08
2dd44     04 0C 66 F0 | 	shl	_var07, #4
2dd48     07 0D 82 F1 | 	sub	_var07, _var08
2dd4c     02 0C 66 F0 | 	shl	_var07, #2
2dd50     06 11 02 F1 | 	add	_var09, _var07
2dd54                 | LR__4699
2dd54     02 00 00 FF 
2dd58     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2dd5c     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2dd60     00 13 C2 FA | 	rdbyte	arg01, _var01
2dd64                 | ' {
2dd64                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2dd64     80 12 36 F3 | 	fle	arg01, #128 wc
2dd68                 | '     return __ctype[c];
2dd68     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
2dd6c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2dd70     09 FB C1 FA | 	rdbyte	result1, arg01
2dd74     02 00 00 FF 
2dd78     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2dd7c     0C FA CD F7 | 	test	result1, #12 wz
2dd80     50 00 90 AD |  if_e	jmp	#LR__4702
2dd84     0A 03 68 FC | 	wrlong	#1, arg02
2dd88                 | '                 *hasdst = 1;
2dd88                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
2dd88                 | LR__4700
2dd88     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2dd8c     44 00 90 AD |  if_e	jmp	#LR__4701
2dd90     00 13 C2 FA | 	rdbyte	arg01, _var01
2dd94                 | ' {
2dd94                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2dd94     80 12 36 F3 | 	fle	arg01, #128 wc
2dd98                 | '     return __ctype[c];
2dd98     02 00 00 FF 
2dd9c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2dda0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2dda4     09 FB C1 FA | 	rdbyte	result1, arg01
2dda8     02 00 00 FF 
2ddac     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2ddb0     0C FA CD F7 | 	test	result1, #12 wz
2ddb4     1C 00 90 AD |  if_e	jmp	#LR__4701
2ddb8     00 0B 02 F6 | 	mov	_var06, _var01
2ddbc     01 0A 06 F1 | 	add	_var06, #1
2ddc0     00 0D C2 FA | 	rdbyte	_var07, _var01
2ddc4     05 01 02 F6 | 	mov	_var01, _var06
2ddc8     03 0D 42 FC | 	wrbyte	_var07, _var04
2ddcc     01 06 06 F1 | 	add	_var04, #1
2ddd0     B4 FF 9F FD | 	jmp	#LR__4700
2ddd4                 | LR__4701
2ddd4                 | LR__4702
2ddd4     03 01 48 FC | 	wrbyte	#0, _var04
2ddd8     02 00 00 FF 
2dddc     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2dde0     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2dde4     02 00 00 FF 
2dde8     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2ddec     20 00 90 AD |  if_e	jmp	#LR__4703
2ddf0     02 00 00 FF 
2ddf4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2ddf8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2ddfc     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
2de00     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2de04     02 00 00 FF 
2de08     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2de0c     1C 00 90 FD | 	jmp	#LR__4704
2de10                 | LR__4703
2de10     02 00 00 FF 
2de14     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
2de18     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2de1c     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
2de20     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2de24     02 00 00 FF 
2de28     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2de2c                 | LR__4704
2de2c     02 00 00 FF 
2de30     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2de34     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2de38     02 00 00 FF 
2de3c     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
2de40     20 00 90 AD |  if_e	jmp	#LR__4705
2de44     02 00 00 FF 
2de48     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2de4c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2de50     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
2de54     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2de58     02 00 00 FF 
2de5c     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2de60     1C 00 90 FD | 	jmp	#LR__4706
2de64                 | LR__4705
2de64     02 00 00 FF 
2de68     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2de6c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2de70     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
2de74     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2de78     02 00 00 FF 
2de7c     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2de80                 | LR__4706
2de80     08 03 02 FD | 	qmul	_var02, _var09
2de84                 | ' 		_tzname[1] = stdname;
2de84                 | ' 
2de84                 | '         return sgn * off;
2de84     18 FA 61 FD | 	getqx	result1
2de88                 | LR__4707
2de88                 | _fatfs_cc___tzoffset_ret
2de88     2D 00 64 FD | 	ret
2de8c                 | 
2de8c                 | _fatfs_cc___indst
2de8c     10 12 06 F1 | 	add	arg01, #16
2de90     09 01 02 FB | 	rdlong	_var01, arg01
2de94     10 12 86 F1 | 	sub	arg01, #16
2de98     02 00 0E F2 | 	cmp	_var01, #2 wz
2de9c     30 00 90 5D |  if_ne	jmp	#LR__4710
2dea0     07 00 06 F6 | 	mov	_var01, #7
2dea4     18 12 06 F1 | 	add	arg01, #24
2dea8     09 03 02 FB | 	rdlong	_var02, arg01
2deac     01 01 02 F1 | 	add	_var01, _var02
2deb0     0C 12 86 F1 | 	sub	arg01, #12
2deb4     09 05 02 FB | 	rdlong	_var03, arg01
2deb8     02 01 82 F1 | 	sub	_var01, _var03
2debc     00 00 56 F2 | 	cmps	_var01, #0 wc
2dec0                 | '                         return 1;
2dec0     01 FA 05 C6 |  if_b	mov	result1, #1
2dec4     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2dec8                 | '                 return 0;
2dec8     00 FA 05 F6 | 	mov	result1, #0
2decc     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2ded0                 | LR__4710
2ded0     10 12 06 F1 | 	add	arg01, #16
2ded4     09 01 02 FB | 	rdlong	_var01, arg01
2ded8     10 12 86 F1 | 	sub	arg01, #16
2dedc     0A 00 0E F2 | 	cmp	_var01, #10 wz
2dee0     28 00 90 5D |  if_ne	jmp	#LR__4711
2dee4     18 12 06 F1 | 	add	arg01, #24
2dee8     09 01 02 FB | 	rdlong	_var01, arg01
2deec     0C 12 86 F1 | 	sub	arg01, #12
2def0     09 07 02 FB | 	rdlong	_var04, arg01
2def4     03 01 82 F1 | 	sub	_var01, _var04
2def8     00 00 56 F2 | 	cmps	_var01, #0 wc
2defc                 | '                         return 0;
2defc     00 FA 05 C6 |  if_b	mov	result1, #0
2df00     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2df04                 | '                 return 1;
2df04     01 FA 05 F6 | 	mov	result1, #1
2df08     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2df0c                 | LR__4711
2df0c                 | '         }
2df0c                 | ' 
2df0c                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
2df0c     00 00 06 F6 | 	mov	_var01, #0
2df10     10 12 06 F1 | 	add	arg01, #16
2df14     09 03 02 FB | 	rdlong	_var02, arg01
2df18     10 12 86 F1 | 	sub	arg01, #16
2df1c     03 02 56 F2 | 	cmps	_var02, #3 wc
2df20     10 00 90 CD |  if_b	jmp	#LR__4712
2df24     10 12 06 F1 | 	add	arg01, #16
2df28     09 05 02 FB | 	rdlong	_var03, arg01
2df2c     0A 04 56 F2 | 	cmps	_var03, #10 wc
2df30     01 00 06 C6 |  if_b	mov	_var01, #1
2df34                 | LR__4712
2df34     00 FB 01 F6 | 	mov	result1, _var01
2df38                 | _fatfs_cc___indst_ret
2df38     2D 00 64 FD | 	ret
2df3c                 | 
2df3c                 | ' 	
2df3c                 | ' 	FUNCTION pfunc(c as integer) as integer
2df3c                 | ___strs_cl_pfunc
2df3c                 | ' 		if (i < 16) then
2df3c     04 E4 05 F1 | 	add	objptr, #4
2df40     F2 FA 01 FB | 	rdlong	result1, objptr
2df44     04 E4 85 F1 | 	sub	objptr, #4
2df48     10 FA 55 F2 | 	cmps	result1, #16 wc
2df4c     2C 00 90 3D |  if_ae	jmp	#LR__4720
2df50     F2 FA 01 FB | 	rdlong	result1, objptr
2df54     04 E4 05 F1 | 	add	objptr, #4
2df58     F2 00 02 FB | 	rdlong	_var01, objptr
2df5c     FD 00 02 F1 | 	add	_var01, result1
2df60     00 13 42 FC | 	wrbyte	arg01, _var01
2df64     F2 FA 01 FB | 	rdlong	result1, objptr
2df68     01 FA 05 F1 | 	add	result1, #1
2df6c     F2 FA 61 FC | 	wrlong	result1, objptr
2df70     04 E4 85 F1 | 	sub	objptr, #4
2df74                 | ' 			p(i) = c
2df74                 | ' 			i = i+1
2df74                 | ' 			return 1
2df74     01 FA 05 F6 | 	mov	result1, #1
2df78     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
2df7c                 | LR__4720
2df7c                 | ' 			return -1
2df7c     01 FA 65 F6 | 	neg	result1, #1
2df80                 | ___strs_cl_pfunc_ret
2df80     2D 00 64 FD | 	ret
2df84                 | 
2df84                 | __struct__s_vfs_file_t_putchar
2df84     04 4A 05 F6 | 	mov	COUNT_, #4
2df88     A8 00 A0 FD | 	call	#pushregs_
2df8c     1C E4 05 F1 | 	add	objptr, #28
2df90     F2 1E 0A FB | 	rdlong	local01, objptr wz
2df94     1C E4 85 F1 | 	sub	objptr, #28
2df98     00 FA 05 A6 |  if_e	mov	result1, #0
2df9c     48 00 90 AD |  if_e	jmp	#LR__4730
2dfa0     1C E4 05 F1 | 	add	objptr, #28
2dfa4     F2 20 02 FB | 	rdlong	local02, objptr
2dfa8     10 23 02 F6 | 	mov	local03, local02
2dfac     1C E4 85 F1 | 	sub	objptr, #28
2dfb0     13 22 46 F7 | 	zerox	local03, #19
2dfb4     14 20 46 F0 | 	shr	local02, #20
2dfb8     02 20 66 F0 | 	shl	local02, #2
2dfbc     ED 20 02 F1 | 	add	local02, __methods__
2dfc0     10 21 02 FB | 	rdlong	local02, local02
2dfc4     F2 14 02 F6 | 	mov	arg02, objptr
2dfc8     F2 24 02 F6 | 	mov	local04, objptr
2dfcc     11 E5 01 F6 | 	mov	objptr, local03
2dfd0     2D 20 62 FD | 	call	local02
2dfd4     12 E5 01 F6 | 	mov	objptr, local04
2dfd8                 | '     return (i < 0) ? 0 : 1;
2dfd8     00 FA 55 F2 | 	cmps	result1, #0 wc
2dfdc     00 1E 06 C6 |  if_b	mov	local01, #0
2dfe0     01 1E 06 36 |  if_ae	mov	local01, #1
2dfe4     0F FB 01 F6 | 	mov	result1, local01
2dfe8                 | LR__4730
2dfe8     A7 F0 03 F6 | 	mov	ptra, fp
2dfec     B2 00 A0 FD | 	call	#popregs_
2dff0                 | __struct__s_vfs_file_t_putchar_ret
2dff0     2D 00 64 FD | 	ret
2dff4                 | 
2dff4                 | __struct__s_vfs_file_t_getchar
2dff4     03 4A 05 F6 | 	mov	COUNT_, #3
2dff8     A8 00 A0 FD | 	call	#pushregs_
2dffc     20 E4 05 F1 | 	add	objptr, #32
2e000     F2 12 0A FB | 	rdlong	arg01, objptr wz
2e004     20 E4 85 F1 | 	sub	objptr, #32
2e008     01 FA 65 A6 |  if_e	neg	result1, #1
2e00c     38 00 90 AD |  if_e	jmp	#LR__4740
2e010                 | '     return getcf(__this);
2e010     20 E4 05 F1 | 	add	objptr, #32
2e014     F2 1E 02 FB | 	rdlong	local01, objptr
2e018     0F 21 02 F6 | 	mov	local02, local01
2e01c     20 E4 85 F1 | 	sub	objptr, #32
2e020     13 20 46 F7 | 	zerox	local02, #19
2e024     14 1E 46 F0 | 	shr	local01, #20
2e028     02 1E 66 F0 | 	shl	local01, #2
2e02c     ED 1E 02 F1 | 	add	local01, __methods__
2e030     0F 1F 02 FB | 	rdlong	local01, local01
2e034     F2 12 02 F6 | 	mov	arg01, objptr
2e038     F2 22 02 F6 | 	mov	local03, objptr
2e03c     10 E5 01 F6 | 	mov	objptr, local02
2e040     2D 1E 62 FD | 	call	local01
2e044     11 E5 01 F6 | 	mov	objptr, local03
2e048                 | LR__4740
2e048     A7 F0 03 F6 | 	mov	ptra, fp
2e04c     B2 00 A0 FD | 	call	#popregs_
2e050                 | __struct__s_vfs_file_t_getchar_ret
2e050     2D 00 64 FD | 	ret
2e054                 | 
2e054                 | __struct___bas_wrap_sender_tx
2e054     03 4A 05 F6 | 	mov	COUNT_, #3
2e058     A8 00 A0 FD | 	call	#pushregs_
2e05c     F2 1E 02 FB | 	rdlong	local01, objptr
2e060     0F 21 02 F6 | 	mov	local02, local01
2e064     13 1E 46 F7 | 	zerox	local01, #19
2e068     14 20 46 F0 | 	shr	local02, #20
2e06c     02 20 66 F0 | 	shl	local02, #2
2e070     ED 20 02 F1 | 	add	local02, __methods__
2e074     10 21 02 FB | 	rdlong	local02, local02
2e078     F2 22 02 F6 | 	mov	local03, objptr
2e07c     0F E5 01 F6 | 	mov	objptr, local01
2e080     2D 20 62 FD | 	call	local02
2e084     11 E5 01 F6 | 	mov	objptr, local03
2e088     01 FA 05 F6 | 	mov	result1, #1
2e08c     A7 F0 03 F6 | 	mov	ptra, fp
2e090     B2 00 A0 FD | 	call	#popregs_
2e094                 | __struct___bas_wrap_sender_tx_ret
2e094     2D 00 64 FD | 	ret
2e098                 | 
2e098                 | __struct___bas_wrap_sender_rx
2e098     03 4A 05 F6 | 	mov	COUNT_, #3
2e09c     A8 00 A0 FD | 	call	#pushregs_
2e0a0     04 E4 05 F1 | 	add	objptr, #4
2e0a4     F2 1E 02 FB | 	rdlong	local01, objptr
2e0a8     0F 21 02 F6 | 	mov	local02, local01
2e0ac     04 E4 85 F1 | 	sub	objptr, #4
2e0b0     13 20 46 F7 | 	zerox	local02, #19
2e0b4     14 1E 46 F0 | 	shr	local01, #20
2e0b8     02 1E 66 F0 | 	shl	local01, #2
2e0bc     ED 1E 02 F1 | 	add	local01, __methods__
2e0c0     0F 1F 02 FB | 	rdlong	local01, local01
2e0c4     F2 22 02 F6 | 	mov	local03, objptr
2e0c8     10 E5 01 F6 | 	mov	objptr, local02
2e0cc     2D 1E 62 FD | 	call	local01
2e0d0     11 E5 01 F6 | 	mov	objptr, local03
2e0d4     A7 F0 03 F6 | 	mov	ptra, fp
2e0d8     B2 00 A0 FD | 	call	#popregs_
2e0dc                 | __struct___bas_wrap_sender_rx_ret
2e0dc     2D 00 64 FD | 	ret
2e0e0                 | 
2e0e0                 | __struct___bas_wrap_sender_close
2e0e0     03 4A 05 F6 | 	mov	COUNT_, #3
2e0e4     A8 00 A0 FD | 	call	#pushregs_
2e0e8     08 E4 05 F1 | 	add	objptr, #8
2e0ec     F2 1E 02 FB | 	rdlong	local01, objptr
2e0f0     0F 21 02 F6 | 	mov	local02, local01
2e0f4     08 E4 85 F1 | 	sub	objptr, #8
2e0f8     13 20 46 F7 | 	zerox	local02, #19
2e0fc     14 1E 46 F0 | 	shr	local01, #20
2e100     02 1E 66 F0 | 	shl	local01, #2
2e104     ED 1E 02 F1 | 	add	local01, __methods__
2e108     0F 1F 02 FB | 	rdlong	local01, local01
2e10c     F2 22 02 F6 | 	mov	local03, objptr
2e110     10 E5 01 F6 | 	mov	objptr, local02
2e114     2D 1E 62 FD | 	call	local01
2e118     11 E5 01 F6 | 	mov	objptr, local03
2e11c     A7 F0 03 F6 | 	mov	ptra, fp
2e120     B2 00 A0 FD | 	call	#popregs_
2e124                 | __struct___bas_wrap_sender_close_ret
2e124     2D 00 64 FD | 	ret
2e128                 | 
2e128                 | LR__4750
2e128     2F          | 	byte	"/"
2e129     00          | 	byte	0
2e12a                 | LR__4751
2e12a     69 6E 66    | 	byte	"inf"
2e12d     00          | 	byte	0
2e12e                 | LR__4752
2e12e     6E 61 6E    | 	byte	"nan"
2e131     00          | 	byte	0
2e132                 | LR__4753
2e132                 | 	byte	
2e132     00          | 	byte	0
2e133                 | LR__4754
2e133                 | 	byte	
2e133     00          | 	byte	0
2e134                 | LR__4755
2e134                 | 	byte	
2e134     00          | 	byte	0
2e135                 | LR__4756
2e135                 | 	byte	
2e135     00          | 	byte	0
2e136                 | LR__4757
2e136                 | 	byte	
2e136     00          | 	byte	0
2e137                 | LR__4758
2e137                 | 	byte	
2e137     00          | 	byte	0
2e138                 | LR__4759
2e138                 | 	byte	
2e138     00          | 	byte	0
2e139                 | LR__4760
2e139                 | 	byte	
2e139     00          | 	byte	0
2e13a                 | LR__4761
2e13a     00          | 	byte	0
2e13b     00          | 	byte	0
2e13c                 | LR__4762
2e13c     00          | 	byte	0
2e13d     00          | 	byte	0
2e13e                 | LR__4763
2e13e     00          | 	byte	0
2e13f     00          | 	byte	0
2e140                 | LR__4764
2e140     20 21 21 21 
2e144     20 63 6F 72 
2e148     72 75 70 74 
2e14c     65 64 20 68 
2e150     65 61 70 3F 
2e154     3F 3F 20 21 
2e158     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
2e15b     00          | 	byte	0
2e15c                 | LR__4765
2e15c     20 21 21 21 
2e160     20 6F 75 74 
2e164     20 6F 66 20 
2e168     68 65 61 70 
2e16c     20 6D 65 6D 
2e170     6F 72 79 20 
2e174     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
2e178     00          | 	byte	0
2e179                 | LR__4766
2e179     20 21 21 21 
2e17d     20 63 6F 72 
2e181     72 75 70 74 
2e185     65 64 20 68 
2e189     65 61 70 20 
2e18d     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
2e191     00          | 	byte	0
2e192                 | LR__4767
2e192     00          | 	byte	0
2e193     00          | 	byte	0
2e194                 | LR__4768
2e194     2E          | 	byte	"."
2e195     00          | 	byte	0
2e196                 | LR__4769
2e196     00          | 	byte	0
2e197     00          | 	byte	0
2e198                 | LR__4770
2e198     00          | 	byte	0
2e199     00          | 	byte	0
2e19a                 | LR__4771
2e19a     00          | 	byte	0
2e19b     00          | 	byte	0
2e19c                 | LR__4772
2e19c     2A 3A 3C 3E 
2e1a0     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
2e1a4     00          | 	byte	0
2e1a5                 | LR__4773
2e1a5     2B 2C 3B 3D 
2e1a9     5B 5D       | 	byte	"+,;=[]"
2e1ab     00          | 	byte	0
2e1ac                 | LR__4774
2e1ac     46 41 54 33 
2e1b0     32 20 20 20 | 	byte	"FAT32   "
2e1b4     00          | 	byte	0
2e1b5                 | LR__4775
2e1b5     54 5A       | 	byte	"TZ"
2e1b7     00          | 	byte	0
2e1b8                 | LR__4776
2e1b8     00          | 	byte	0
2e1b9     00          | 	byte	0
2e1ba                 | LR__4777
2e1ba                 | 	byte	
2e1ba     00          | 	byte	0
2e1bb                 | LR__4778
2e1bb                 | 	byte	
2e1bb     00          | 	byte	0
2e1bc                 | LR__4779
2e1bc     22          | 	byte	34
2e1bd     00          | 	byte	0
2e1be                 | LR__4780
2e1be     22          | 	byte	34
2e1bf     00          | 	byte	0
2e1c0                 | LR__4781
2e1c0     3A          | 	byte	":"
2e1c1     00          | 	byte	0
2e1c2                 | LR__4782
2e1c2                 | 	byte	
2e1c2     00          | 	byte	0
2e1c3                 | LR__4783
2e1c3                 | 	byte	
2e1c3     00          | 	byte	0
2e1c4                 | LR__4784
2e1c4                 | 	byte	
2e1c4     00          | 	byte	0
2e1c5                 | LR__4785
2e1c5                 | 	byte	
2e1c5     00          | 	byte	0
2e1c6                 | LR__4786
2e1c6                 | 	byte	
2e1c6     00          | 	byte	0
2e1c7                 | LR__4787
2e1c7                 | 	byte	
2e1c7     00          | 	byte	0
2e1c8                 | LR__4788
2e1c8                 | 	byte	
2e1c8     00          | 	byte	0
2e1c9                 | LR__4789
2e1c9     22          | 	byte	34
2e1ca     00          | 	byte	0
2e1cb                 | LR__4790
2e1cb     22          | 	byte	34
2e1cc     00          | 	byte	0
2e1cd                 | LR__4791
2e1cd     22          | 	byte	34
2e1ce     00          | 	byte	0
2e1cf                 | LR__4792
2e1cf     22          | 	byte	34
2e1d0     00          | 	byte	0
2e1d1                 | LR__4793
2e1d1     22          | 	byte	34
2e1d2     00          | 	byte	0
2e1d3                 | LR__4794
2e1d3     3E          | 	byte	">"
2e1d4     00          | 	byte	0
2e1d5                 | LR__4795
2e1d5     3C          | 	byte	"<"
2e1d6     00          | 	byte	0
2e1d7                 | LR__4796
2e1d7     2B          | 	byte	"+"
2e1d8     00          | 	byte	0
2e1d9                 | LR__4797
2e1d9     2D          | 	byte	"-"
2e1da     00          | 	byte	0
2e1db                 | LR__4798
2e1db     2A          | 	byte	"*"
2e1dc     00          | 	byte	0
2e1dd                 | LR__4799
2e1dd     2F          | 	byte	"/"
2e1de     00          | 	byte	0
2e1df                 | LR__4800
2e1df     5E          | 	byte	"^"
2e1e0     00          | 	byte	0
2e1e1                 | LR__4801
2e1e1     3D          | 	byte	"="
2e1e2     00          | 	byte	0
2e1e3                 | LR__4802
2e1e3     2B          | 	byte	"+"
2e1e4     00          | 	byte	0
2e1e5                 | LR__4803
2e1e5     2B          | 	byte	"+"
2e1e6     00          | 	byte	0
2e1e7                 | LR__4804
2e1e7     2D          | 	byte	"-"
2e1e8     00          | 	byte	0
2e1e9                 | LR__4805
2e1e9     2D          | 	byte	"-"
2e1ea     00          | 	byte	0
2e1eb                 | LR__4806
2e1eb     3C          | 	byte	"<"
2e1ec     00          | 	byte	0
2e1ed                 | LR__4807
2e1ed     3E          | 	byte	">"
2e1ee     00          | 	byte	0
2e1ef                 | LR__4808
2e1ef     22          | 	byte	34
2e1f0     00          | 	byte	0
2e1f1                 | LR__4809
2e1f1     22          | 	byte	34
2e1f2     00          | 	byte	0
2e1f3                 | LR__4810
2e1f3     2E          | 	byte	"."
2e1f4     00          | 	byte	0
2e1f5                 | LR__4811
2e1f5     3F          | 	byte	"?"
2e1f6     00          | 	byte	0
2e1f7                 | LR__4812
2e1f7     3F          | 	byte	"?"
2e1f8     00          | 	byte	0
2e1f9                 | LR__4813
2e1f9     6D 6F 75 73 
2e1fd     65          | 	byte	"mouse"
2e1fe     00          | 	byte	0
2e1ff                 | LR__4814
2e1ff     63 75 72 73 
2e203     6F 72       | 	byte	"cursor"
2e205     00          | 	byte	0
2e206                 | LR__4815
2e206     63 6C 69 63 
2e20a     6B          | 	byte	"click"
2e20b     00          | 	byte	0
2e20c                 | LR__4816
2e20c     6F 6E       | 	byte	"on"
2e20e     00          | 	byte	0
2e20f                 | LR__4817
2e20f     31          | 	byte	"1"
2e210     00          | 	byte	0
2e211                 | LR__4818
2e211     6F 66 66    | 	byte	"off"
2e214     00          | 	byte	0
2e215                 | LR__4819
2e215     30          | 	byte	"0"
2e216     00          | 	byte	0
2e217                 | LR__4820
2e217     6D 6F 64 65 | 	byte	"mode"
2e21b     00          | 	byte	0
2e21c                 | LR__4821
2e21c     6D 2E       | 	byte	"m."
2e21e     00          | 	byte	0
2e21f                 | LR__4822
2e21f     61 74 61 72 
2e223     69          | 	byte	"atari"
2e224     00          | 	byte	0
2e225                 | LR__4823
2e225     30          | 	byte	"0"
2e226     00          | 	byte	0
2e227                 | LR__4824
2e227     70 63 5F 61 
2e22b     6D 62 65 72 | 	byte	"pc_amber"
2e22f     00          | 	byte	0
2e230                 | LR__4825
2e230     31          | 	byte	"1"
2e231     00          | 	byte	0
2e232                 | LR__4826
2e232     70 63 5F 67 
2e236     72 65 65 6E | 	byte	"pc_green"
2e23a     00          | 	byte	0
2e23b                 | LR__4827
2e23b     32          | 	byte	"2"
2e23c     00          | 	byte	0
2e23d                 | LR__4828
2e23d     70 63 5F 77 
2e241     68 69 74 65 | 	byte	"pc_white"
2e245     00          | 	byte	0
2e246                 | LR__4829
2e246     33          | 	byte	"3"
2e247     00          | 	byte	0
2e248                 | LR__4830
2e248     73 74       | 	byte	"st"
2e24a     00          | 	byte	0
2e24b                 | LR__4831
2e24b     34          | 	byte	"4"
2e24c     00          | 	byte	0
2e24d                 | LR__4832
2e24d                 | 	byte	
2e24d     00          | 	byte	0
2e24e                 | LR__4833
2e24e     6C 6F 61 64 | 	byte	"load"
2e252     00          | 	byte	0
2e253                 | LR__4834
2e253     73 61 76 65 | 	byte	"save"
2e257     00          | 	byte	0
2e258                 | LR__4835
2e258     62 72 75 6E | 	byte	"brun"
2e25c     00          | 	byte	0
2e25d                 | LR__4836
2e25d     72 75 6E    | 	byte	"run"
2e260     00          | 	byte	0
2e261                 | LR__4837
2e261     6C 6F 2E    | 	byte	"lo."
2e264     00          | 	byte	0
2e265                 | LR__4838
2e265     73 2E       | 	byte	"s."
2e267     00          | 	byte	0
2e268                 | LR__4839
2e268     62 72 2E    | 	byte	"br."
2e26b     00          | 	byte	0
2e26c                 | LR__4840
2e26c                 | 	byte	
2e26c     00          | 	byte	0
2e26d                 | LR__4841
2e26d                 | 	byte	
2e26d     00          | 	byte	0
2e26e                 | LR__4842
2e26e                 | 	byte	
2e26e     00          | 	byte	0
2e26f                 | LR__4843
2e26f                 | 	byte	
2e26f     00          | 	byte	0
2e270                 | LR__4844
2e270     20 55 73 65 
2e274     72 20 66 75 
2e278     6E 63 74 69 
2e27c     6F 6E 73 20 
2e280     61 6E 64 20 
2e284     61 72 72 61 
2e288     79 73 20 6E 
2e28c     6F 74 20 79 
2e290     65 74 20 69 
2e294     6D 70 6C 65 
2e298     6D 65 6E 74 
2e29c     65 64       | 	byte	" User functions and arrays not yet implemented"
2e29e     00          | 	byte	0
2e29f                 | LR__4845
2e29f                 | 	byte	
2e29f     00          | 	byte	0
2e2a0                 | LR__4846
2e2a0                 | 	byte	
2e2a0     00          | 	byte	0
2e2a1                 | LR__4847
2e2a1     52 65 61 64 
2e2a5     79          | 	byte	"Ready"
2e2a6     00          | 	byte	0
2e2a7                 | LR__4848
2e2a7     2B          | 	byte	"+"
2e2a8     00          | 	byte	0
2e2a9                 | LR__4849
2e2a9     2D          | 	byte	"-"
2e2aa     00          | 	byte	0
2e2ab                 | LR__4850
2e2ab     6F 72       | 	byte	"or"
2e2ad     00          | 	byte	0
2e2ae                 | LR__4851
2e2ae     78 6F 72    | 	byte	"xor"
2e2b1     00          | 	byte	0
2e2b2                 | LR__4852
2e2b2     2A          | 	byte	"*"
2e2b3     00          | 	byte	0
2e2b4                 | LR__4853
2e2b4     2F          | 	byte	"/"
2e2b5     00          | 	byte	0
2e2b6                 | LR__4854
2e2b6     61 6E 64    | 	byte	"and"
2e2b9     00          | 	byte	0
2e2ba                 | LR__4855
2e2ba     64 69 76    | 	byte	"div"
2e2bd     00          | 	byte	0
2e2be                 | LR__4856
2e2be     6D 6F 64    | 	byte	"mod"
2e2c1     00          | 	byte	0
2e2c2                 | LR__4857
2e2c2     73 68 6C    | 	byte	"shl"
2e2c5     00          | 	byte	0
2e2c6                 | LR__4858
2e2c6     73 68 72    | 	byte	"shr"
2e2c9     00          | 	byte	0
2e2ca                 | LR__4859
2e2ca     5E          | 	byte	"^"
2e2cb     00          | 	byte	0
2e2cc                 | LR__4860
2e2cc     6E 6F 74    | 	byte	"not"
2e2cf     00          | 	byte	0
2e2d0                 | LR__4861
2e2d0     40          | 	byte	"@"
2e2d1     00          | 	byte	0
2e2d2                 | LR__4862
2e2d2     3D          | 	byte	"="
2e2d3     00          | 	byte	0
2e2d4                 | LR__4863
2e2d4     3E 3D       | 	byte	">="
2e2d6     00          | 	byte	0
2e2d7                 | LR__4864
2e2d7     3C 3D       | 	byte	"<="
2e2d9     00          | 	byte	0
2e2da                 | LR__4865
2e2da     3C          | 	byte	"<"
2e2db     00          | 	byte	0
2e2dc                 | LR__4866
2e2dc     3E          | 	byte	">"
2e2dd     00          | 	byte	0
2e2de                 | LR__4867
2e2de     3C 3E       | 	byte	"<>"
2e2e0     00          | 	byte	0
2e2e1                 | LR__4868
2e2e1     2B 2B       | 	byte	"++"
2e2e3     00          | 	byte	0
2e2e4                 | LR__4869
2e2e4     2D 2D       | 	byte	"--"
2e2e6     00          | 	byte	0
2e2e7                 | LR__4870
2e2e7     23          | 	byte	"#"
2e2e8     00          | 	byte	0
2e2e9                 | LR__4871
2e2e9     23          | 	byte	"#"
2e2ea     00          | 	byte	0
2e2eb                 | LR__4872
2e2eb     2D          | 	byte	"-"
2e2ec     00          | 	byte	0
2e2ed                 | LR__4873
2e2ed     30          | 	byte	"0"
2e2ee     00          | 	byte	0
2e2ef                 | LR__4874
2e2ef     63          | 	byte	"c"
2e2f0     00          | 	byte	0
2e2f1                 | LR__4875
2e2f1     63 23       | 	byte	"c#"
2e2f3     00          | 	byte	0
2e2f4                 | LR__4876
2e2f4     64          | 	byte	"d"
2e2f5     00          | 	byte	0
2e2f6                 | LR__4877
2e2f6     64 23       | 	byte	"d#"
2e2f8     00          | 	byte	0
2e2f9                 | LR__4878
2e2f9     65          | 	byte	"e"
2e2fa     00          | 	byte	0
2e2fb                 | LR__4879
2e2fb     66          | 	byte	"f"
2e2fc     00          | 	byte	0
2e2fd                 | LR__4880
2e2fd     66 23       | 	byte	"f#"
2e2ff     00          | 	byte	0
2e300                 | LR__4881
2e300     67          | 	byte	"g"
2e301     00          | 	byte	0
2e302                 | LR__4882
2e302     67 23       | 	byte	"g#"
2e304     00          | 	byte	0
2e305                 | LR__4883
2e305     61          | 	byte	"a"
2e306     00          | 	byte	0
2e307                 | LR__4884
2e307     61 23       | 	byte	"a#"
2e309     00          | 	byte	0
2e30a                 | LR__4885
2e30a     68          | 	byte	"h"
2e30b     00          | 	byte	0
2e30c                 | LR__4886
2e30c     62          | 	byte	"b"
2e30d     00          | 	byte	0
2e30e                 | LR__4887
2e30e     2B          | 	byte	"+"
2e30f     00          | 	byte	0
2e310                 | LR__4888
2e310     2D          | 	byte	"-"
2e311     00          | 	byte	0
2e312                 | LR__4889
2e312     3D          | 	byte	"="
2e313     00          | 	byte	0
2e314                 | LR__4890
2e314     2C          | 	byte	","
2e315     00          | 	byte	0
2e316                 | LR__4891
2e316     2A          | 	byte	"*"
2e317     00          | 	byte	0
2e318                 | LR__4892
2e318     2F          | 	byte	"/"
2e319     00          | 	byte	0
2e31a                 | LR__4893
2e31a     3B          | 	byte	";"
2e31b     00          | 	byte	0
2e31c                 | LR__4894
2e31c     22          | 	byte	34
2e31d     00          | 	byte	0
2e31e                 | LR__4895
2e31e     5E          | 	byte	"^"
2e31f     00          | 	byte	0
2e320                 | LR__4896
2e320     29          | 	byte	")"
2e321     00          | 	byte	0
2e322                 | LR__4897
2e322     28          | 	byte	"("
2e323     00          | 	byte	0
2e324                 | LR__4898
2e324     3A          | 	byte	":"
2e325     00          | 	byte	0
2e326                 | LR__4899
2e326     20          | 	byte	" "
2e327     00          | 	byte	0
2e328                 | LR__4900
2e328     3E          | 	byte	">"
2e329     00          | 	byte	0
2e32a                 | LR__4901
2e32a     3C          | 	byte	"<"
2e32b     00          | 	byte	0
2e32c                 | LR__4902
2e32c     3D          | 	byte	"="
2e32d     00          | 	byte	0
2e32e                 | LR__4903
2e32e     62 65 65 70 | 	byte	"beep"
2e332     00          | 	byte	0
2e333                 | LR__4904
2e333     62 2E       | 	byte	"b."
2e335     00          | 	byte	0
2e336                 | LR__4905
2e336     62 6F 78    | 	byte	"box"
2e339     00          | 	byte	0
2e33a                 | LR__4906
2e33a     62 72 75 6E | 	byte	"brun"
2e33e     00          | 	byte	0
2e33f                 | LR__4907
2e33f     62 72 2E    | 	byte	"br."
2e342     00          | 	byte	0
2e343                 | LR__4908
2e343     63 69 72 63 
2e347     6C 65       | 	byte	"circle"
2e349     00          | 	byte	0
2e34a                 | LR__4909
2e34a     63 69 2E    | 	byte	"ci."
2e34d     00          | 	byte	0
2e34e                 | LR__4910
2e34e     63 6C 69 63 
2e352     6B          | 	byte	"click"
2e353     00          | 	byte	0
2e354                 | LR__4911
2e354     63 6C 73    | 	byte	"cls"
2e357     00          | 	byte	0
2e358                 | LR__4912
2e358     63 6F 6C 6F 
2e35c     72          | 	byte	"color"
2e35d     00          | 	byte	0
2e35e                 | LR__4913
2e35e     63 2E       | 	byte	"c."
2e360     00          | 	byte	0
2e361                 | LR__4914
2e361     63 73 61 76 
2e365     65          | 	byte	"csave"
2e366     00          | 	byte	0
2e367                 | LR__4915
2e367     63 73 2E    | 	byte	"cs."
2e36a     00          | 	byte	0
2e36b                 | LR__4916
2e36b     63 75 72 73 
2e36f     6F 72       | 	byte	"cursor"
2e371     00          | 	byte	0
2e372                 | LR__4917
2e372     64 65 66 73 
2e376     6E 64       | 	byte	"defsnd"
2e378     00          | 	byte	0
2e379                 | LR__4918
2e379     64 65 66 65 
2e37d     6E 76       | 	byte	"defenv"
2e37f     00          | 	byte	0
2e380                 | LR__4919
2e380     64 65 66 73 
2e384     70 72 69 74 
2e388     65          | 	byte	"defsprite"
2e389     00          | 	byte	0
2e38a                 | LR__4920
2e38a     64 73 2E    | 	byte	"ds."
2e38d     00          | 	byte	0
2e38e                 | LR__4921
2e38e     64 65 67    | 	byte	"deg"
2e391     00          | 	byte	0
2e392                 | LR__4922
2e392     64 69 6D    | 	byte	"dim"
2e395     00          | 	byte	0
2e396                 | LR__4923
2e396     64 69 72    | 	byte	"dir"
2e399     00          | 	byte	0
2e39a                 | LR__4924
2e39a     64 70 6F 6B 
2e39e     65          | 	byte	"dpoke"
2e39f     00          | 	byte	0
2e3a0                 | LR__4925
2e3a0     64 72 61 77 | 	byte	"draw"
2e3a4     00          | 	byte	0
2e3a5                 | LR__4926
2e3a5     64 72 2E    | 	byte	"dr."
2e3a8     00          | 	byte	0
2e3a9                 | LR__4927
2e3a9     65 6C 73 65 | 	byte	"else"
2e3ad     00          | 	byte	0
2e3ae                 | LR__4928
2e3ae     65 6E 64    | 	byte	"end"
2e3b1     00          | 	byte	0
2e3b2                 | LR__4929
2e3b2     66 63 69 72 
2e3b6     63 6C 65    | 	byte	"fcircle"
2e3b9     00          | 	byte	0
2e3ba                 | LR__4930
2e3ba     66 63 2E    | 	byte	"fc."
2e3bd     00          | 	byte	0
2e3be                 | LR__4931
2e3be     66 69 6C 6C | 	byte	"fill"
2e3c2     00          | 	byte	0
2e3c3                 | LR__4932
2e3c3     66 69 2E    | 	byte	"fi."
2e3c6     00          | 	byte	0
2e3c7                 | LR__4933
2e3c7     66 6F 6E 74 | 	byte	"font"
2e3cb     00          | 	byte	0
2e3cc                 | LR__4934
2e3cc     66 6F 72    | 	byte	"for"
2e3cf     00          | 	byte	0
2e3d0                 | LR__4935
2e3d0     66 2E       | 	byte	"f."
2e3d2     00          | 	byte	0
2e3d3                 | LR__4936
2e3d3     66 72 61 6D 
2e3d7     65          | 	byte	"frame"
2e3d8     00          | 	byte	0
2e3d9                 | LR__4937
2e3d9     66 72 2E    | 	byte	"fr."
2e3dc     00          | 	byte	0
2e3dd                 | LR__4938
2e3dd     67 6F 73 75 
2e3e1     62          | 	byte	"gosub"
2e3e2     00          | 	byte	0
2e3e3                 | LR__4939
2e3e3     67 6F 74 6F | 	byte	"goto"
2e3e7     00          | 	byte	0
2e3e8                 | LR__4940
2e3e8     67 2E       | 	byte	"g."
2e3ea     00          | 	byte	0
2e3eb                 | LR__4941
2e3eb     69 66       | 	byte	"if"
2e3ed     00          | 	byte	0
2e3ee                 | LR__4942
2e3ee     69 6E 6B    | 	byte	"ink"
2e3f1     00          | 	byte	0
2e3f2                 | LR__4943
2e3f2     69 2E       | 	byte	"i."
2e3f4     00          | 	byte	0
2e3f5                 | LR__4944
2e3f5     69 6E 74    | 	byte	"int"
2e3f8     00          | 	byte	0
2e3f9                 | LR__4945
2e3f9     6C 69 73 74 | 	byte	"list"
2e3fd     00          | 	byte	0
2e3fe                 | LR__4946
2e3fe     6C 2E       | 	byte	"l."
2e400     00          | 	byte	0
2e401                 | LR__4947
2e401     6C 6F 61 64 | 	byte	"load"
2e405     00          | 	byte	0
2e406                 | LR__4948
2e406     6C 6F 2E    | 	byte	"lo."
2e409     00          | 	byte	0
2e40a                 | LR__4949
2e40a     6C 70 6F 6B 
2e40e     65          | 	byte	"lpoke"
2e40f     00          | 	byte	0
2e410                 | LR__4950
2e410     6D 6F 64 65 | 	byte	"mode"
2e414     00          | 	byte	0
2e415                 | LR__4951
2e415     6D 2E       | 	byte	"m."
2e417     00          | 	byte	0
2e418                 | LR__4952
2e418     6D 6F 75 73 
2e41c     65          | 	byte	"mouse"
2e41d     00          | 	byte	0
2e41e                 | LR__4953
2e41e     6E 65 77    | 	byte	"new"
2e421     00          | 	byte	0
2e422                 | LR__4954
2e422     6E 65 78 74 | 	byte	"next"
2e426     00          | 	byte	0
2e427                 | LR__4955
2e427     6E 2E       | 	byte	"n."
2e429     00          | 	byte	0
2e42a                 | LR__4956
2e42a     70 61 70 65 
2e42e     72          | 	byte	"paper"
2e42f     00          | 	byte	0
2e430                 | LR__4957
2e430     70 61 2E    | 	byte	"pa."
2e433     00          | 	byte	0
2e434                 | LR__4958
2e434     70 69 6E 66 
2e438     6C 6F 61 74 | 	byte	"pinfloat"
2e43c     00          | 	byte	0
2e43d                 | LR__4959
2e43d     70 69 6E 68 
2e441     69          | 	byte	"pinhi"
2e442     00          | 	byte	0
2e443                 | LR__4960
2e443     70 69 6E 6C 
2e447     6F          | 	byte	"pinlo"
2e448     00          | 	byte	0
2e449                 | LR__4961
2e449     70 69 6E 73 
2e44d     74 61 72 74 | 	byte	"pinstart"
2e451     00          | 	byte	0
2e452                 | LR__4962
2e452     70 69 6E 74 
2e456     6F 67 67 6C 
2e45a     65          | 	byte	"pintoggle"
2e45b     00          | 	byte	0
2e45c                 | LR__4963
2e45c     70 69 6E 77 
2e460     72 69 74 65 | 	byte	"pinwrite"
2e464     00          | 	byte	0
2e465                 | LR__4964
2e465     70 6C 61 79 | 	byte	"play"
2e469     00          | 	byte	0
2e46a                 | LR__4965
2e46a     70 2E       | 	byte	"p."
2e46c     00          | 	byte	0
2e46d                 | LR__4966
2e46d     70 6C 6F 74 | 	byte	"plot"
2e471     00          | 	byte	0
2e472                 | LR__4967
2e472     70 6C 2E    | 	byte	"pl."
2e475     00          | 	byte	0
2e476                 | LR__4968
2e476     70 6F 6B 65 | 	byte	"poke"
2e47a     00          | 	byte	0
2e47b                 | LR__4969
2e47b     70 6F 70    | 	byte	"pop"
2e47e     00          | 	byte	0
2e47f                 | LR__4970
2e47f     70 6F 73 69 
2e483     74 69 6F 6E | 	byte	"position"
2e487     00          | 	byte	0
2e488                 | LR__4971
2e488     70 6F 73 2E | 	byte	"pos."
2e48c     00          | 	byte	0
2e48d                 | LR__4972
2e48d     70 72 69 6E 
2e491     74          | 	byte	"print"
2e492     00          | 	byte	0
2e493                 | LR__4973
2e493     3F          | 	byte	"?"
2e494     00          | 	byte	0
2e495                 | LR__4974
2e495     72 61 64    | 	byte	"rad"
2e498     00          | 	byte	0
2e499                 | LR__4975
2e499     72 65 6C 65 
2e49d     61 73 65    | 	byte	"release"
2e4a0     00          | 	byte	0
2e4a1                 | LR__4976
2e4a1     72 65 74 75 
2e4a5     72 6E       | 	byte	"return"
2e4a7     00          | 	byte	0
2e4a8                 | LR__4977
2e4a8     72 75 6E    | 	byte	"run"
2e4ab     00          | 	byte	0
2e4ac                 | LR__4978
2e4ac     73 61 76 65 | 	byte	"save"
2e4b0     00          | 	byte	0
2e4b1                 | LR__4979
2e4b1     73 2E       | 	byte	"s."
2e4b3     00          | 	byte	0
2e4b4                 | LR__4980
2e4b4     73 65 74 64 
2e4b8     65 6C 61 79 | 	byte	"setdelay"
2e4bc     00          | 	byte	0
2e4bd                 | LR__4981
2e4bd     73 65 74 65 
2e4c1     6E 76       | 	byte	"setenv"
2e4c3     00          | 	byte	0
2e4c4                 | LR__4982
2e4c4     73 65 74 6C 
2e4c8     65 6E       | 	byte	"setlen"
2e4ca     00          | 	byte	0
2e4cb                 | LR__4983
2e4cb     73 65 74 70 
2e4cf     61 6E       | 	byte	"setpan"
2e4d1     00          | 	byte	0
2e4d2                 | LR__4984
2e4d2     73 65 74 73 
2e4d6     75 73 74 61 
2e4da     69 6E       | 	byte	"setsustain"
2e4dc     00          | 	byte	0
2e4dd                 | LR__4985
2e4dd     73 65 74 76 
2e4e1     6F 6C       | 	byte	"setvol"
2e4e3     00          | 	byte	0
2e4e4                 | LR__4986
2e4e4     73 65 74 77 
2e4e8     61 76 65    | 	byte	"setwave"
2e4eb     00          | 	byte	0
2e4ec                 | LR__4987
2e4ec     73 6F 75 6E 
2e4f0     64          | 	byte	"sound"
2e4f1     00          | 	byte	0
2e4f2                 | LR__4988
2e4f2     73 6F 2E    | 	byte	"so."
2e4f5     00          | 	byte	0
2e4f6                 | LR__4989
2e4f6     73 70 72 69 
2e4fa     74 65       | 	byte	"sprite"
2e4fc     00          | 	byte	0
2e4fd                 | LR__4990
2e4fd     73 70 2E    | 	byte	"sp."
2e500     00          | 	byte	0
2e501                 | LR__4991
2e501     74 68 65 6E | 	byte	"then"
2e505     00          | 	byte	0
2e506                 | LR__4992
2e506     77 61 69 74 
2e50a     6D 73       | 	byte	"waitms"
2e50c     00          | 	byte	0
2e50d                 | LR__4993
2e50d     77 61 69 74 
2e511     63 6C 6F 63 
2e515     6B          | 	byte	"waitclock"
2e516     00          | 	byte	0
2e517                 | LR__4994
2e517     77 63 2E    | 	byte	"wc."
2e51a     00          | 	byte	0
2e51b                 | LR__4995
2e51b     77 61 69 74 
2e51f     76 62 6C    | 	byte	"waitvbl"
2e522     00          | 	byte	0
2e523                 | LR__4996
2e523     77 76 2E    | 	byte	"wv."
2e526     00          | 	byte	0
2e527                 | LR__4997
2e527     77 78 70 69 
2e52b     6E          | 	byte	"wxpin"
2e52c     00          | 	byte	0
2e52d                 | LR__4998
2e52d     77 79 70 69 
2e531     6E          | 	byte	"wypin"
2e532     00          | 	byte	0
2e533                 | LR__4999
2e533     61 62 73    | 	byte	"abs"
2e536     00          | 	byte	0
2e537                 | LR__5000
2e537     61 63 6F 73 | 	byte	"acos"
2e53b     00          | 	byte	0
2e53c                 | LR__5001
2e53c     61 64 72    | 	byte	"adr"
2e53f     00          | 	byte	0
2e540                 | LR__5002
2e540     61 64 64 72 | 	byte	"addr"
2e544     00          | 	byte	0
2e545                 | LR__5003
2e545     61 73 63    | 	byte	"asc"
2e548     00          | 	byte	0
2e549                 | LR__5004
2e549     61 73 69 6E | 	byte	"asin"
2e54d     00          | 	byte	0
2e54e                 | LR__5005
2e54e     61 74 6E    | 	byte	"atn"
2e551     00          | 	byte	0
2e552                 | LR__5006
2e552     62 69 6E 24 | 	byte	"bin$"
2e556     00          | 	byte	0
2e557                 | LR__5007
2e557     63 68 72 24 | 	byte	"chr$"
2e55b     00          | 	byte	0
2e55c                 | LR__5008
2e55c     63 6F 73    | 	byte	"cos"
2e55f     00          | 	byte	0
2e560                 | LR__5009
2e560     64 70 65 65 
2e564     6B          | 	byte	"dpeek"
2e565     00          | 	byte	0
2e566                 | LR__5010
2e566     66 72 65    | 	byte	"fre"
2e569     00          | 	byte	0
2e56a                 | LR__5011
2e56a     67 65 74 70 
2e56e     69 78 65 6C | 	byte	"getpixel"
2e572     00          | 	byte	0
2e573                 | LR__5012
2e573     67 65 2E    | 	byte	"ge."
2e576     00          | 	byte	0
2e577                 | LR__5013
2e577     67 65 74 65 
2e57b     6E 76 73 75 
2e57f     73 74 61 69 
2e583     6E          | 	byte	"getenvsustain"
2e584     00          | 	byte	0
2e585                 | LR__5014
2e585     67 65 74 6E 
2e589     6F 74 65 76 
2e58d     61 6C 75 65 | 	byte	"getnotevalue"
2e591     00          | 	byte	0
2e592                 | LR__5015
2e592     67 65 74 74 
2e596     69 6D 65    | 	byte	"gettime"
2e599     00          | 	byte	0
2e59a                 | LR__5016
2e59a     68 65 78 24 | 	byte	"hex$"
2e59e     00          | 	byte	0
2e59f                 | LR__5017
2e59f     69 6E 6B 65 
2e5a3     79 24       | 	byte	"inkey$"
2e5a5     00          | 	byte	0
2e5a6                 | LR__5018
2e5a6     6C 65 66 74 
2e5aa     24          | 	byte	"left$"
2e5ab     00          | 	byte	0
2e5ac                 | LR__5019
2e5ac     6C 65 6E    | 	byte	"len"
2e5af     00          | 	byte	0
2e5b0                 | LR__5020
2e5b0     6C 70 65 65 
2e5b4     6B          | 	byte	"lpeek"
2e5b5     00          | 	byte	0
2e5b6                 | LR__5021
2e5b6     6D 69 64 24 | 	byte	"mid$"
2e5ba     00          | 	byte	0
2e5bb                 | LR__5022
2e5bb     6D 6F 75 73 
2e5bf     65 6B       | 	byte	"mousek"
2e5c1     00          | 	byte	0
2e5c2                 | LR__5023
2e5c2     6D 6F 75 73 
2e5c6     65 77       | 	byte	"mousew"
2e5c8     00          | 	byte	0
2e5c9                 | LR__5024
2e5c9     6D 6F 75 73 
2e5cd     65 78       | 	byte	"mousex"
2e5cf     00          | 	byte	0
2e5d0                 | LR__5025
2e5d0     6D 6F 75 73 
2e5d4     65 79       | 	byte	"mousey"
2e5d6     00          | 	byte	0
2e5d7                 | LR__5026
2e5d7     70 65 65 6B | 	byte	"peek"
2e5db     00          | 	byte	0
2e5dc                 | LR__5027
2e5dc     70 69 6E 72 
2e5e0     65 61 64    | 	byte	"pinread"
2e5e3     00          | 	byte	0
2e5e4                 | LR__5028
2e5e4     72 64 70 69 
2e5e8     6E          | 	byte	"rdpin"
2e5e9     00          | 	byte	0
2e5ea                 | LR__5029
2e5ea     72 69 67 68 
2e5ee     74 24       | 	byte	"right$"
2e5f0     00          | 	byte	0
2e5f1                 | LR__5030
2e5f1     72 71 70 69 
2e5f5     6E          | 	byte	"rqpin"
2e5f6     00          | 	byte	0
2e5f7                 | LR__5031
2e5f7     72 6E 64    | 	byte	"rnd"
2e5fa     00          | 	byte	0
2e5fb                 | LR__5032
2e5fb     73 69 6E    | 	byte	"sin"
2e5fe     00          | 	byte	0
2e5ff                 | LR__5033
2e5ff     73 71 72    | 	byte	"sqr"
2e602     00          | 	byte	0
2e603                 | LR__5034
2e603     73 74 69 63 
2e607     6B          | 	byte	"stick"
2e608     00          | 	byte	0
2e609                 | LR__5035
2e609     73 74 72 69 
2e60d     67          | 	byte	"strig"
2e60e     00          | 	byte	0
2e60f                 | LR__5036
2e60f     73 74 72 24 | 	byte	"str$"
2e613     00          | 	byte	0
2e614                 | LR__5037
2e614     74 61 6E    | 	byte	"tan"
2e617     00          | 	byte	0
2e618                 | LR__5038
2e618     76 61 6C    | 	byte	"val"
2e61b     00          | 	byte	0
2e61c                 | LR__5039
2e61c     76 61 72 70 
2e620     74 72       | 	byte	"varptr"
2e622     00          | 	byte	0
2e623                 | LR__5040
2e623     61          | 	byte	"a"
2e624     00          | 	byte	0
2e625                 | LR__5041
2e625     7A          | 	byte	"z"
2e626     00          | 	byte	0
2e627                 | LR__5042
2e627     5F          | 	byte	"_"
2e628     00          | 	byte	0
2e629                 | LR__5043
2e629     61          | 	byte	"a"
2e62a     00          | 	byte	0
2e62b                 | LR__5044
2e62b     7A          | 	byte	"z"
2e62c     00          | 	byte	0
2e62d                 | LR__5045
2e62d     30          | 	byte	"0"
2e62e     00          | 	byte	0
2e62f                 | LR__5046
2e62f     39          | 	byte	"9"
2e630     00          | 	byte	0
2e631                 | LR__5047
2e631     5F          | 	byte	"_"
2e632     00          | 	byte	0
2e633                 | LR__5048
2e633     2E          | 	byte	"."
2e634     00          | 	byte	0
2e635                 | LR__5049
2e635     61          | 	byte	"a"
2e636     00          | 	byte	0
2e637                 | LR__5050
2e637     7A          | 	byte	"z"
2e638     00          | 	byte	0
2e639                 | LR__5051
2e639     30          | 	byte	"0"
2e63a     00          | 	byte	0
2e63b                 | LR__5052
2e63b     39          | 	byte	"9"
2e63c     00          | 	byte	0
2e63d                 | LR__5053
2e63d     5F          | 	byte	"_"
2e63e     00          | 	byte	0
2e63f                 | LR__5054
2e63f     24          | 	byte	"$"
2e640     00          | 	byte	0
2e641                 | LR__5055
2e641     25          | 	byte	"%"
2e642     00          | 	byte	0
2e643                 | LR__5056
2e643     21          | 	byte	"!"
2e644     00          | 	byte	0
2e645                 | LR__5057
2e645     30          | 	byte	"0"
2e646     00          | 	byte	0
2e647                 | LR__5058
2e647     39          | 	byte	"9"
2e648     00          | 	byte	0
2e649                 | LR__5059
2e649     2E          | 	byte	"."
2e64a     00          | 	byte	0
2e64b                 | LR__5060
2e64b     24          | 	byte	"$"
2e64c     00          | 	byte	0
2e64d                 | LR__5061
2e64d     25          | 	byte	"%"
2e64e     00          | 	byte	0
2e64f                 | LR__5062
2e64f     2D          | 	byte	"-"
2e650     00          | 	byte	0
2e651                 | LR__5063
2e651     2E          | 	byte	"."
2e652     00          | 	byte	0
2e653                 | LR__5064
2e653     30          | 	byte	"0"
2e654     00          | 	byte	0
2e655                 | LR__5065
2e655     39          | 	byte	"9"
2e656     00          | 	byte	0
2e657                 | LR__5066
2e657     5F          | 	byte	"_"
2e658     00          | 	byte	0
2e659                 | LR__5067
2e659     2E          | 	byte	"."
2e65a     00          | 	byte	0
2e65b                 | LR__5068
2e65b     45          | 	byte	"E"
2e65c     00          | 	byte	0
2e65d                 | LR__5069
2e65d     65          | 	byte	"e"
2e65e     00          | 	byte	0
2e65f                 | LR__5070
2e65f     2D          | 	byte	"-"
2e660     00          | 	byte	0
2e661                 | LR__5071
2e661     2D          | 	byte	"-"
2e662     00          | 	byte	0
2e663                 | LR__5072
2e663     65          | 	byte	"e"
2e664     00          | 	byte	0
2e665                 | LR__5073
2e665     2E          | 	byte	"."
2e666     00          | 	byte	0
2e667                 | LR__5074
2e667     45          | 	byte	"E"
2e668     00          | 	byte	0
2e669                 | LR__5075
2e669     65          | 	byte	"e"
2e66a     00          | 	byte	0
2e66b                 | LR__5076
2e66b     30          | 	byte	"0"
2e66c     00          | 	byte	0
2e66d                 | LR__5077
2e66d     39          | 	byte	"9"
2e66e     00          | 	byte	0
2e66f                 | LR__5078
2e66f     24          | 	byte	"$"
2e670     00          | 	byte	0
2e671                 | LR__5079
2e671     25          | 	byte	"%"
2e672     00          | 	byte	0
2e673                 | LR__5080
2e673     2D          | 	byte	"-"
2e674     00          | 	byte	0
2e675                 | LR__5081
2e675     30          | 	byte	"0"
2e676     00          | 	byte	0
2e677                 | LR__5082
2e677     39          | 	byte	"9"
2e678     00          | 	byte	0
2e679                 | LR__5083
2e679     5F          | 	byte	"_"
2e67a     00          | 	byte	0
2e67b                 | LR__5084
2e67b     30          | 	byte	"0"
2e67c     00          | 	byte	0
2e67d                 | LR__5085
2e67d     39          | 	byte	"9"
2e67e     00          | 	byte	0
2e67f                 | LR__5086
2e67f     5F          | 	byte	"_"
2e680     00          | 	byte	0
2e681                 | LR__5087
2e681     22          | 	byte	34
2e682     00          | 	byte	0
2e683                 | LR__5088
2e683     22          | 	byte	34
2e684     00          | 	byte	0
2e685                 | LR__5089
2e685     44 69 6D 3A 
2e689     20 61 74 20 
2e68d     6C 69 6E 65 
2e691     20          | 	byte	"Dim: at line "
2e692     00          | 	byte	0
2e693                 | LR__5090
2e693     3A 20 77 61 
2e697     72 6E 69 6E 
2e69b     67 3A 20 74 
2e69f     68 65 20 76 
2e6a3     61 72 69 61 
2e6a7     62 6C 65 20 
2e6ab     65 78 69 73 
2e6af     74 65 64 2E | 	byte	": warning: the variable existed."
2e6b3     00          | 	byte	0
2e6b4                 | LR__5091
2e6b4     28          | 	byte	"("
2e6b5     00          | 	byte	0
2e6b6                 | LR__5092
2e6b6     61 73       | 	byte	"as"
2e6b8     00          | 	byte	0
2e6b9                 | LR__5093
2e6b9     61 73       | 	byte	"as"
2e6bb     00          | 	byte	0
2e6bc                 | LR__5094
2e6bc     2C          | 	byte	","
2e6bd     00          | 	byte	0
2e6be                 | LR__5095
2e6be     29          | 	byte	")"
2e6bf     00          | 	byte	0
2e6c0                 | LR__5096
2e6c0     29          | 	byte	")"
2e6c1     00          | 	byte	0
2e6c2                 | LR__5097
2e6c2     61 73       | 	byte	"as"
2e6c4     00          | 	byte	0
2e6c5                 | LR__5098
2e6c5     62 79 74 65 | 	byte	"byte"
2e6c9     00          | 	byte	0
2e6ca                 | LR__5099
2e6ca     75 62 79 74 
2e6ce     65          | 	byte	"ubyte"
2e6cf     00          | 	byte	0
2e6d0                 | LR__5100
2e6d0     73 68 6F 72 
2e6d4     74          | 	byte	"short"
2e6d5     00          | 	byte	0
2e6d6                 | LR__5101
2e6d6     75 73 68 6F 
2e6da     72 74       | 	byte	"ushort"
2e6dc     00          | 	byte	0
2e6dd                 | LR__5102
2e6dd     6C 6F 6E 67 | 	byte	"long"
2e6e1     00          | 	byte	0
2e6e2                 | LR__5103
2e6e2     69 6E 74 65 
2e6e6     67 65 72    | 	byte	"integer"
2e6e9     00          | 	byte	0
2e6ea                 | LR__5104
2e6ea     75 6C 6F 6E 
2e6ee     67          | 	byte	"ulong"
2e6ef     00          | 	byte	0
2e6f0                 | LR__5105
2e6f0     69 6E 74 36 
2e6f4     34          | 	byte	"int64"
2e6f5     00          | 	byte	0
2e6f6                 | LR__5106
2e6f6     75 69 6E 74 
2e6fa     36 34       | 	byte	"uint64"
2e6fc     00          | 	byte	0
2e6fd                 | LR__5107
2e6fd     73 69 6E 67 
2e701     6C 65       | 	byte	"single"
2e703     00          | 	byte	0
2e704                 | LR__5108
2e704     64 6F 75 62 
2e708     6C 65       | 	byte	"double"
2e70a     00          | 	byte	0
2e70b                 | LR__5109
2e70b     73 74 72 69 
2e70f     6E 67       | 	byte	"string"
2e711     00          | 	byte	0
2e712                 | LR__5110
2e712     74 6F       | 	byte	"to"
2e714     00          | 	byte	0
2e715                 | LR__5111
2e715     73 74 65 70 | 	byte	"step"
2e719     00          | 	byte	0
2e71a                 | LR__5112
2e71a     73 2E       | 	byte	"s."
2e71c     00          | 	byte	0
2e71d                 | LR__5113
2e71d     24          | 	byte	"$"
2e71e     00          | 	byte	0
2e71f                 | LR__5114
2e71f     26 68       | 	byte	"&h"
2e721     00          | 	byte	0
2e722                 | LR__5115
2e722     25          | 	byte	"%"
2e723     00          | 	byte	0
2e724                 | LR__5116
2e724     26 62       | 	byte	"&b"
2e726     00          | 	byte	0
2e727                 | LR__5117
2e727                 | 	byte	
2e727     00          | 	byte	0
2e728                 | LR__5118
2e728     2F          | 	byte	"/"
2e729     00          | 	byte	0
2e72a                 | LR__5119
2e72a                 | 	byte	
2e72a     00          | 	byte	0
2e72b                 | LR__5120
2e72b     53 61 76 65 
2e72f     64 20 61 73 
2e733     20          | 	byte	"Saved as "
2e734     00          | 	byte	0
2e735                 | LR__5121
2e735     2F          | 	byte	"/"
2e736     00          | 	byte	0
2e737                 | LR__5122
2e737                 | 	byte	
2e737     00          | 	byte	0
2e738                 | LR__5123
2e738     2F          | 	byte	"/"
2e739     00          | 	byte	0
2e73a                 | LR__5124
2e73a     2F          | 	byte	"/"
2e73b     00          | 	byte	0
2e73c                 | LR__5125
2e73c     2E 62 61 73 | 	byte	".bas"
2e740     00          | 	byte	0
2e741                 | LR__5126
2e741     53 79 73 74 
2e745     65 6D 20 65 
2e749     72 72 6F 72 
2e74d     20          | 	byte	"System error "
2e74e     00          | 	byte	0
2e74f                 | LR__5127
2e74f     3A 20       | 	byte	": "
2e751     00          | 	byte	0
2e752                 | LR__5128
2e752     2E 62 61 73 | 	byte	".bas"
2e756     00          | 	byte	0
2e757                 | LR__5129
2e757     2F          | 	byte	"/"
2e758     00          | 	byte	0
2e759                 | LR__5130
2e759     30          | 	byte	"0"
2e75a     00          | 	byte	0
2e75b                 | LR__5131
2e75b     39          | 	byte	"9"
2e75c     00          | 	byte	0
2e75d                 | LR__5132
2e75d                 | 	byte	
2e75d     00          | 	byte	0
2e75e                 | LR__5133
2e75e     4C 6F 61 64 
2e762     65 64 20    | 	byte	"Loaded "
2e765     00          | 	byte	0
2e766                 | LR__5134
2e766     2F          | 	byte	"/"
2e767     00          | 	byte	0
2e768                 | LR__5135
2e768     53 74 6F 70 
2e76c     70 65 64 20 
2e770     61 74 20 6C 
2e774     69 6E 65 20 | 	byte	"Stopped at line "
2e778     00          | 	byte	0
2e779                 | LR__5136
2e779                 | 	byte	
2e779     00          | 	byte	0
2e77a                 | LR__5137
2e77a                 | 	byte	
2e77a     00          | 	byte	0
2e77b                 | LR__5138
2e77b     2F 73 64 2F 
2e77f     6D 65 64 69 
2e783     61 2F 68 2F | 	byte	"/sd/media/h/"
2e787     00          | 	byte	0
2e788                 | LR__5139
2e788     53 79 73 74 
2e78c     65 6D 20 65 
2e790     72 72 6F 72 
2e794     20          | 	byte	"System error "
2e795     00          | 	byte	0
2e796                 | LR__5140
2e796     3A 20       | 	byte	": "
2e798     00          | 	byte	0
2e799                 | LR__5141
2e799                 | 	byte	
2e799     00          | 	byte	0
2e79a                 | LR__5142
2e79a                 | 	byte	
2e79a     00          | 	byte	0
2e79b                 | LR__5143
2e79b     2F 73 64 2F 
2e79f     6D 65 64 69 
2e7a3     61 2F 73 2F | 	byte	"/sd/media/s/"
2e7a7     00          | 	byte	0
2e7a8                 | LR__5144
2e7a8     53 79 73 74 
2e7ac     65 6D 20 65 
2e7b0     72 72 6F 72 
2e7b4     20          | 	byte	"System error "
2e7b5     00          | 	byte	0
2e7b6                 | LR__5145
2e7b6     3A 20       | 	byte	": "
2e7b8     00          | 	byte	0
2e7b9                 | LR__5146
2e7b9     6E 6F 6E 61 
2e7bd     6D 65 2E 62 
2e7c1     61 73       | 	byte	"noname.bas"
2e7c3     00          | 	byte	0
2e7c4                 | LR__5147
2e7c4     45 72 72 6F 
2e7c8     72 20       | 	byte	"Error "
2e7ca     00          | 	byte	0
2e7cb                 | LR__5148
2e7cb     3A 20       | 	byte	": "
2e7cd     00          | 	byte	0
2e7ce                 | LR__5149
2e7ce                 | 	byte	
2e7ce     00          | 	byte	0
2e7cf                 | LR__5150
2e7cf                 | 	byte	
2e7cf     00          | 	byte	0
2e7d0                 | LR__5151
2e7d0     72 6E 64 3A 
2e7d4     20          | 	byte	"rnd: "
2e7d5     00          | 	byte	0
2e7d6                 | LR__5152
2e7d6     72 6E 64 3A 
2e7da     20          | 	byte	"rnd: "
2e7db     00          | 	byte	0
2e7dc                 | LR__5153
2e7dc     67 65 74 65 
2e7e0     6E 76 73 75 
2e7e4     73 74 61 69 
2e7e8     6E 3A 20    | 	byte	"getenvsustain: "
2e7eb     00          | 	byte	0
2e7ec                 | LR__5154
2e7ec     73 69 6E 3A 
2e7f0     20          | 	byte	"sin: "
2e7f1     00          | 	byte	0
2e7f2                 | LR__5155
2e7f2     6D 69 64 24 
2e7f6     3A 20       | 	byte	"mid$: "
2e7f8     00          | 	byte	0
2e7f9                 | LR__5156
2e7f9     6D 69 64 24 
2e7fd     3A 20       | 	byte	"mid$: "
2e7ff     00          | 	byte	0
2e800                 | LR__5157
2e800     72 69 67 68 
2e804     74 24 3A 20 | 	byte	"right$: "
2e808     00          | 	byte	0
2e809                 | LR__5158
2e809     72 69 67 68 
2e80d     74 24 3A 20 | 	byte	"right$: "
2e811     00          | 	byte	0
2e812                 | LR__5159
2e812     6C 65 66 74 
2e816     24 3A 20    | 	byte	"left$: "
2e819     00          | 	byte	0
2e81a                 | LR__5160
2e81a     6C 65 66 74 
2e81e     24 3A 20    | 	byte	"left$: "
2e821     00          | 	byte	0
2e822                 | LR__5161
2e822     61 73 63 3A 
2e826     20          | 	byte	"asc: "
2e827     00          | 	byte	0
2e828                 | LR__5162
2e828     61 73 63 3A 
2e82c     20          | 	byte	"asc: "
2e82d     00          | 	byte	0
2e82e                 | LR__5163
2e82e     6C 65 6E 3A 
2e832     20          | 	byte	"len: "
2e833     00          | 	byte	0
2e834                 | LR__5164
2e834     6C 65 6E 3A 
2e838     20          | 	byte	"len: "
2e839     00          | 	byte	0
2e83a                 | LR__5165
2e83a     63 68 72 24 
2e83e     3A 20       | 	byte	"chr$: "
2e840     00          | 	byte	0
2e841                 | LR__5166
2e841     76 61 6C 3A 
2e845     20          | 	byte	"val: "
2e846     00          | 	byte	0
2e847                 | LR__5167
2e847     76 61 6C 3A 
2e84b     20          | 	byte	"val: "
2e84c     00          | 	byte	0
2e84d                 | LR__5168
2e84d     24          | 	byte	"$"
2e84e     00          | 	byte	0
2e84f                 | LR__5169
2e84f     26 68       | 	byte	"&h"
2e851     00          | 	byte	0
2e852                 | LR__5170
2e852     25          | 	byte	"%"
2e853     00          | 	byte	0
2e854                 | LR__5171
2e854     26 62       | 	byte	"&b"
2e856     00          | 	byte	0
2e857                 | LR__5172
2e857     68 65 78 24 
2e85b     3A 20       | 	byte	"hex$: "
2e85d     00          | 	byte	0
2e85e                 | LR__5173
2e85e     62 69 6E 24 
2e862     3A 20       | 	byte	"bin$: "
2e864     00          | 	byte	0
2e865                 | LR__5174
2e865     63 6F 73 3A 
2e869     20          | 	byte	"cos: "
2e86a     00          | 	byte	0
2e86b                 | LR__5175
2e86b     74 61 6E 3A 
2e86f     20          | 	byte	"tan: "
2e870     00          | 	byte	0
2e871                 | LR__5176
2e871     61 73 69 6E 
2e875     3A 20       | 	byte	"asin: "
2e877     00          | 	byte	0
2e878                 | LR__5177
2e878     61 63 6F 73 
2e87c     3A 20       | 	byte	"acos: "
2e87e     00          | 	byte	0
2e87f                 | LR__5178
2e87f     61 74 6E 3A 
2e883     20          | 	byte	"atn: "
2e884     00          | 	byte	0
2e885                 | LR__5179
2e885     73 71 72 3A 
2e889     20          | 	byte	"sqr: "
2e88a     00          | 	byte	0
2e88b                 | LR__5180
2e88b     73 74 69 63 
2e88f     6B 3A 20    | 	byte	"stick: "
2e892     00          | 	byte	0
2e893                 | LR__5181
2e893     73 74 72 69 
2e897     67 3A 20    | 	byte	"strig: "
2e89a     00          | 	byte	0
2e89b                 | LR__5182
2e89b     67 65 74 70 
2e89f     69 78 65 6C 
2e8a3     3A 20       | 	byte	"getpixel: "
2e8a5     00          | 	byte	0
2e8a6                 | LR__5183
2e8a6     20 42 41 53 
2e8aa     49 43 20 62 
2e8ae     79 74 65 73 
2e8b2     20 66 72 65 
2e8b6     65          | 	byte	" BASIC bytes free"
2e8b7     00          | 	byte	0
2e8b8                 | LR__5184
2e8b8                 | 	byte	
2e8b8     00          | 	byte	0
2e8b9                 | LR__5185
2e8b9     2F 73 64 2F 
2e8bd     62 61 73    | 	byte	"/sd/bas"
2e8c0     00          | 	byte	0
2e8c1                 | LR__5186
2e8c1     57 6F 72 6B 
2e8c5     69 6E 67 20 
2e8c9     64 69 72 65 
2e8cd     63 74 6F 72 
2e8d1     79 3A 20    | 	byte	"Working directory: "
2e8d4     00          | 	byte	0
2e8d5                 | LR__5187
2e8d5     2A          | 	byte	"*"
2e8d6     00          | 	byte	0
2e8d7                 | LR__5188
2e8d7                 | 	byte	
2e8d7     00          | 	byte	0
2e8d8                 | LR__5189
2e8d8     5B 64 69 72 
2e8dc     5D 20       | 	byte	"[dir] "
2e8de     00          | 	byte	0
2e8df                 | LR__5190
2e8df     2A          | 	byte	"*"
2e8e0     00          | 	byte	0
2e8e1                 | LR__5191
2e8e1                 | 	byte	
2e8e1     00          | 	byte	0
2e8e2                 | LR__5192
2e8e2     2D 2D 2D 2D 
2e8e6     2D 6D 6F 72 
2e8ea     65 2C 20 70 
2e8ee     72 65 73 73 
2e8f2     20 61 6E 79 
2e8f6     20 6B 65 79 | 	byte	"-----more, press any key"
2e8fa     00          | 	byte	0
2e8fb                 | LR__5193
2e8fb     20 20 20 20 
      ...             
2e913     20 20 20 20 
2e917     20          | 	byte	"                             "
2e918     00          | 	byte	0
2e919                 | LR__5194
2e919     2F          | 	byte	"/"
2e91a     00          | 	byte	0
2e91b                 | LR__5195
2e91b     2F 73 64 2F 
2e91f     62 69 6E 2F | 	byte	"/sd/bin/"
2e923     00          | 	byte	0
2e924                 | LR__5196
2e924     53 79 73 74 
2e928     65 6D 20 65 
2e92c     72 72 6F 72 
2e930     20          | 	byte	"System error "
2e931     00          | 	byte	0
2e932                 | LR__5197
2e932     3A 20       | 	byte	": "
2e934     00          | 	byte	0
2e935                 | LR__5198
2e935                 | 	byte	
2e935     00          | 	byte	0
2e936                 | LR__5199
2e936     45 78 70 65 
2e93a     63 74 65 64 
2e93e     20 6E 75 6D 
2e942     62 65 72 2C 
2e946     20 67 6F 74 
2e94a     20 73 6F 6D 
2e94e     65 74 68 69 
2e952     6E 67 20 65 
2e956     6C 73 65 2E | 	byte	"Expected number, got something else."
2e95a     00          | 	byte	0
2e95b                 | LR__5200
2e95b     43 61 6E 6E 
2e95f     6F 74 20 61 
2e963     64 64 20 61 
2e967     20 6E 75 6D 
2e96b     62 65 72 20 
2e96f     74 6F 20 61 
2e973     20 73 74 72 
2e977     69 6E 67 2E | 	byte	"Cannot add a number to a string."
2e97b     00          | 	byte	0
2e97c                 | LR__5201
2e97c     43 61 6E 6E 
2e980     6F 74 20 73 
2e984     75 62 73 74 
2e988     72 61 63 74 
2e98c     20 73 74 72 
2e990     69 6E 67 73 
2e994     2E          | 	byte	"Cannot substract strings."
2e995     00          | 	byte	0
2e996                 | LR__5202
2e996     55 6E 6B 6E 
2e99a     6F 77 6E 20 
2e99e     65 72 72 6F 
2e9a2     72 20 77 68 
2e9a6     69 6C 65 20 
2e9aa     61 64 64 69 
2e9ae     6E 67 2E    | 	byte	"Unknown error while adding."
2e9b1     00          | 	byte	0
2e9b2                 | LR__5203
2e9b2     55 6E 6B 6E 
2e9b6     6F 77 6E 20 
2e9ba     65 72 72 6F 
2e9be     72 20 77 68 
2e9c2     69 6C 65 20 
2e9c6     73 75 62 73 
2e9ca     74 72 61 63 
2e9ce     74 69 6E 67 
2e9d2     2E          | 	byte	"Unknown error while substracting."
2e9d3     00          | 	byte	0
2e9d4                 | LR__5204
2e9d4     43 61 6E 6E 
2e9d8     6F 74 20 64 
2e9dc     6F 20 6C 6F 
2e9e0     67 69 63 20 
2e9e4     6F 70 65 72 
2e9e8     61 74 69 6F 
2e9ec     6E 20 6F 6E 
2e9f0     20 73 74 72 
2e9f4     69 6E 67 20 
2e9f8     6F 72 20 66 
2e9fc     6C 6F 61 74 
2ea00     2E          | 	byte	"Cannot do logic operation on string or float."
2ea01     00          | 	byte	0
2ea02                 | LR__5205
2ea02     55 6E 6B 6E 
2ea06     6F 77 6E 20 
2ea0a     65 72 72 6F 
2ea0e     72 20 77 68 
2ea12     69 6C 65 20 
2ea16     64 6F 69 6E 
2ea1a     67 20 6C 6F 
2ea1e     67 69 63 20 
2ea22     6F 70 65 72 
2ea26     61 74 69 6F 
2ea2a     6E 2E       | 	byte	"Unknown error while doing logic operation."
2ea2c     00          | 	byte	0
2ea2d                 | LR__5206
2ea2d     43 61 6E 6E 
2ea31     6F 74 20 6D 
2ea35     75 6C 74 69 
2ea39     70 6C 79 20 
2ea3d     73 74 72 69 
2ea41     6E 67 73 2E | 	byte	"Cannot multiply strings."
2ea45     00          | 	byte	0
2ea46                 | LR__5207
2ea46     55 6E 6B 6E 
2ea4a     6F 77 6E 20 
2ea4e     65 72 72 6F 
2ea52     72 20 77 68 
2ea56     69 6C 65 20 
2ea5a     6D 75 6C 74 
2ea5e     69 70 6C 79 
2ea62     69 6E 67 2E | 	byte	"Unknown error while multiplying."
2ea66     00          | 	byte	0
2ea67                 | LR__5208
2ea67     43 61 6E 6E 
2ea6b     6F 74 20 64 
2ea6f     69 76 69 64 
2ea73     65 20 73 74 
2ea77     72 69 6E 67 
2ea7b     73 2E       | 	byte	"Cannot divide strings."
2ea7d     00          | 	byte	0
2ea7e                 | LR__5209
2ea7e     55 6E 6B 6E 
2ea82     6F 77 6E 20 
2ea86     65 72 72 6F 
2ea8a     72 20 77 68 
2ea8e     69 6C 65 20 
2ea92     64 69 76 69 
2ea96     64 69 6E 67 
2ea9a     2E          | 	byte	"Unknown error while dividing."
2ea9b     00          | 	byte	0
2ea9c                 | LR__5210
2ea9c     43 61 6E 6E 
2eaa0     6F 74 20 63 
2eaa4     6F 6D 70 75 
2eaa8     74 65 20 61 
2eaac     20 70 6F 77 
2eab0     65 72 20 6F 
2eab4     66 20 61 20 
2eab8     73 74 72 69 
2eabc     6E 67 2E    | 	byte	"Cannot compute a power of a string."
2eabf     00          | 	byte	0
2eac0                 | LR__5211
2eac0     55 6E 6B 6E 
2eac4     6F 77 6E 20 
2eac8     65 72 72 6F 
2eacc     72 20 77 68 
2ead0     69 6C 65 20 
2ead4     63 6F 6D 70 
2ead8     75 74 69 6E 
2eadc     67 20 61 20 
2eae0     70 6F 77 65 
2eae4     72 2E       | 	byte	"Unknown error while computing a power."
2eae6     00          | 	byte	0
2eae7                 | LR__5212
2eae7     52 69 67 68 
2eaeb     74 20 70 61 
2eaef     72 65 6E 74 
2eaf3     68 65 73 69 
2eaf7     73 20 65 78 
2eafb     70 65 63 74 
2eaff     65 64 2E    | 	byte	"Right parenthesis expected."
2eb02     00          | 	byte	0
2eb03                 | LR__5213
2eb03     45 78 70 65 
2eb07     63 74 65 64 
2eb0b     20 73 74 72 
2eb0f     69 6E 67 2E | 	byte	"Expected string."
2eb13     00          | 	byte	0
2eb14                 | LR__5214
2eb14     45 78 70 65 
2eb18     63 74 65 64 
2eb1c     20 66 6C 6F 
2eb20     61 74 2E    | 	byte	"Expected float."
2eb23     00          | 	byte	0
2eb24                 | LR__5215
2eb24     45 78 70 65 
2eb28     63 74 65 64 
2eb2c     20 75 6E 73 
2eb30     69 67 6E 65 
2eb34     64 20 69 6E 
2eb38     74 65 67 65 
2eb3c     72 2E       | 	byte	"Expected unsigned integer."
2eb3e     00          | 	byte	0
2eb3f                 | LR__5216
2eb3f     45 78 70 65 
2eb43     63 74 65 64 
2eb47     20 69 6E 74 
2eb4b     65 67 65 72 
2eb4f     2E          | 	byte	"Expected integer."
2eb50     00          | 	byte	0
2eb51                 | LR__5217
2eb51     4E 6F 20 6D 
2eb55     6F 72 65 20 
2eb59     76 61 72 69 
2eb5d     61 62 6C 65 
2eb61     20 73 6C 6F 
2eb65     74 73 2E    | 	byte	"No more variable slots."
2eb68     00          | 	byte	0
2eb69                 | LR__5218
2eb69     56 61 72 69 
2eb6d     61 62 6C 65 
2eb71     20 6E 6F 74 
2eb75     20 66 6F 75 
2eb79     6E 64 2E    | 	byte	"Variable not found."
2eb7c     00          | 	byte	0
2eb7d                 | LR__5219
2eb7d     43 6F 6D 6D 
2eb81     61 20 65 78 
2eb85     70 65 63 74 
2eb89     65 64 2E    | 	byte	"Comma expected."
2eb8c     00          | 	byte	0
2eb8d                 | LR__5220
2eb8d     43 6F 6D 6D 
2eb91     61 20 6F 72 
2eb95     20 73 65 6D 
2eb99     69 63 6F 6C 
2eb9d     6F 6E 20 65 
2eba1     78 70 65 63 
2eba5     74 65 64 2E | 	byte	"Comma or semicolon expected."
2eba9     00          | 	byte	0
2ebaa                 | LR__5221
2ebaa     55 6E 6B 6E 
2ebae     6F 77 6E 20 
2ebb2     63 6F 6D 6D 
2ebb6     61 6E 64 2E | 	byte	"Unknown command."
2ebba     00          | 	byte	0
2ebbb                 | LR__5222
2ebbb     53 74 61 63 
2ebbf     6B 20 75 6E 
2ebc3     64 65 72 66 
2ebc7     6C 6F 77 2E | 	byte	"Stack underflow."
2ebcb     00          | 	byte	0
2ebcc                 | LR__5223
2ebcc     43 61 6E 6E 
2ebd0     6F 74 20 65 
2ebd4     78 65 63 75 
2ebd8     74 65 20 67 
2ebdc     6F 74 6F 20 
2ebe0     69 6E 20 74 
2ebe4     68 65 20 69 
2ebe8     6D 6D 65 64 
2ebec     69 61 74 65 
2ebf0     20 6D 6F 64 
2ebf4     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
2ebf6     00          | 	byte	0
2ebf7                 | LR__5224
2ebf7     43 61 6E 6E 
2ebfb     6F 74 20 6C 
2ebff     6F 61 64 20 
2ec03     66 72 6F 6D 
2ec07     20 74 68 69 
2ec0b     73 20 66 69 
2ec0f     6C 65 2E    | 	byte	"Cannot load from this file."
2ec12     00          | 	byte	0
2ec13                 | LR__5225
2ec13     54 68 65 20 
2ec17     70 72 6F 67 
2ec1b     72 61 6D 20 
2ec1f     69 73 20 65 
2ec23     6D 70 74 79 
2ec27     2E          | 	byte	"The program is empty."
2ec28     00          | 	byte	0
2ec29                 | LR__5226
2ec29     49 66 20 61 
2ec2d     66 74 65 72 
2ec31     20 69 66 2E | 	byte	"If after if."
2ec35     00          | 	byte	0
2ec36                 | LR__5227
2ec36     45 6D 70 74 
2ec3a     79 20 65 78 
2ec3e     70 72 65 73 
2ec42     73 69 6F 6E 
2ec46     2E          | 	byte	"Empty expression."
2ec47     00          | 	byte	0
2ec48                 | LR__5228
2ec48     53 74 72 69 
2ec4c     6E 67 20 65 
2ec50     78 70 65 63 
2ec54     74 65 64 2E | 	byte	"String expected."
2ec58     00          | 	byte	0
2ec59                 | LR__5229
2ec59     49 6E 74 65 
2ec5d     72 70 72 65 
2ec61     74 65 72 20 
2ec65     69 6E 74 65 
2ec69     72 6E 61 6C 
2ec6d     20 65 72 72 
2ec71     6F 72 2E    | 	byte	"Interpreter internal error."
2ec74     00          | 	byte	0
2ec75                 | LR__5230
2ec75     45 78 70 65 
2ec79     63 74 65 64 
2ec7d     20 61 73 73 
2ec81     69 67 6E 2E | 	byte	"Expected assign."
2ec85     00          | 	byte	0
2ec86                 | LR__5231
2ec86     45 78 70 65 
2ec8a     63 74 65 64 
2ec8e     20 27 74 6F 
2ec92     27 2E       | 	byte	"Expected 'to'."
2ec94     00          | 	byte	0
2ec95                 | LR__5232
2ec95     45 78 70 65 
2ec99     63 74 65 64 
2ec9d     20 69 6E 74 
2eca1     65 67 65 72 
2eca5     20 76 61 72 
2eca9     69 61 62 6C 
2ecad     65 2E       | 	byte	"Expected integer variable."
2ecaf     00          | 	byte	0
2ecb0                 | LR__5233
2ecb0     55 6E 69 6E 
2ecb4     69 74 69 61 
2ecb8     6C 69 7A 65 
2ecbc     64 20 76 61 
2ecc0     72 69 61 62 
2ecc4     6C 65 20 69 
2ecc8     6E 20 27 6E 
2eccc     65 78 74 27 
2ecd0     2C 20 75 73 
2ecd4     65 20 27 66 
2ecd8     6F 72 27 20 
2ecdc     62 65 66 6F 
2ece0     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
2ece3     00          | 	byte	0
2ece4                 | LR__5234
2ece4     4E 6F 20 6D 
2ece8     6F 72 65 20 
2ecec     73 6C 6F 74 
2ecf0     73 20 66 6F 
2ecf4     72 20 27 66 
2ecf8     6F 72 27 2E | 	byte	"No more slots for 'for'."
2ecfc     00          | 	byte	0
2ecfd                 | LR__5235
2ecfd     27 4E 65 78 
2ed01     74 27 20 64 
2ed05     6F 65 73 6E 
2ed09     27 74 20 6D 
2ed0d     61 74 63 68 
2ed11     20 27 66 6F 
2ed15     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
2ed18     00          | 	byte	0
2ed19                 | LR__5236
2ed19     27 47 6F 74 
2ed1d     6F 27 20 74 
2ed21     61 72 67 65 
2ed25     74 20 6C 69 
2ed29     6E 65 20 6E 
2ed2d     6F 74 20 66 
2ed31     6F 75 6E 64 
2ed35     2E          | 	byte	"'Goto' target line not found."
2ed36     00          | 	byte	0
2ed37                 | LR__5237
2ed37     42 61 64 20 
2ed3b     6E 75 6D 62 
2ed3f     65 72 20 6F 
2ed43     66 20 70 61 
2ed47     72 61 6D 65 
2ed4b     74 65 72 73 | 	byte	"Bad number of parameters"
2ed4f     00          | 	byte	0
2ed50                 | LR__5238
2ed50     46 75 6E 63 
2ed54     74 69 6F 6E 
2ed58     20 75 6E 64 
2ed5c     65 66 69 6E 
2ed60     65 64 20 66 
2ed64     6F 72 20 73 
2ed68     74 72 69 6E 
2ed6c     67 73       | 	byte	"Function undefined for strings"
2ed6e     00          | 	byte	0
2ed6f                 | LR__5239
2ed6f     42 61 64 20 
2ed73     70 61 72 61 
2ed77     6D 65 74 65 
2ed7b     72 2E       | 	byte	"Bad parameter."
2ed7d     00          | 	byte	0
2ed7e                 | LR__5240
2ed7e     43 61 6E 6E 
2ed82     6F 74 20 64 
2ed86     65 63 6C 61 
2ed8a     72 65 20 61 
2ed8e     6E 20 61 72 
2ed92     72 61 79 3A 
2ed96     20 74 68 65 
2ed9a     20 76 61 72 
2ed9e     69 61 62 6C 
2eda2     65 20 65 78 
2eda6     69 73 74 73 
2edaa     2E          | 	byte	"Cannot declare an array: the variable exists."
2edab     00          | 	byte	0
2edac                 | LR__5241
2edac     45 78 70 65 
2edb0     63 74 65 64 
2edb4     20 27 28 27 
2edb8     2E          | 	byte	"Expected '('."
2edb9     00          | 	byte	0
2edba                 | LR__5242
2edba     45 78 70 65 
2edbe     63 74 65 64 
2edc2     20 27 29 27 
2edc6     20 6F 72 20 
2edca     27 2C 27 2E | 	byte	"Expected ')' or ','."
2edce     00          | 	byte	0
2edcf                 | LR__5243
2edcf     4E 6F 20 6D 
2edd3     6F 72 65 20 
2edd7     74 68 61 6E 
2eddb     20 33 20 64 
2eddf     69 6D 65 6E 
2ede3     73 69 6F 6E 
2ede7     73 20 73 75 
2edeb     70 70 6F 72 
2edef     74 65 64    | 	byte	"No more than 3 dimensions supported"
2edf2     00          | 	byte	0
2edf3                 | LR__5244
2edf3     56 61 72 69 
2edf7     61 62 6C 65 
2edfb     20 6E 61 6D 
2edff     65 20 65 78 
2ee03     70 65 63 74 
2ee07     65 64       | 	byte	"Variable name expected"
2ee09     00          | 	byte	0
2ee0a                 | LR__5245
2ee0a     54 79 70 65 
2ee0e     20 6E 61 6D 
2ee12     65 20 65 78 
2ee16     70 65 63 74 
2ee1a     65 64       | 	byte	"Type name expected"
2ee1c     00          | 	byte	0
2ee1d                 | LR__5246
2ee1d     54 79 70 65 
2ee21     20 6E 6F 74 
2ee25     20 73 75 70 
2ee29     70 6F 72 74 
2ee2d     65 64 20 79 
2ee31     65 74       | 	byte	"Type not supported yet"
2ee33     00          | 	byte	0
2ee34                 | LR__5247
2ee34     41 72 72 61 
2ee38     79 20 69 6E 
2ee3c     64 65 78 20 
2ee40     6F 75 74 20 
2ee44     6F 66 20 72 
2ee48     61 6E 67 65 | 	byte	"Array index out of range"
2ee4c     00          | 	byte	0
2ee4d                 | LR__5248
2ee4d     45 72 72 6F 
2ee51     72 20       | 	byte	"Error "
2ee53     00          | 	byte	0
2ee54                 | LR__5249
2ee54     3A 20       | 	byte	": "
2ee56     00          | 	byte	0
2ee57                 | LR__5250
2ee57     2F 73 64    | 	byte	"/sd"
2ee5a     00          | 	byte	0
2ee5b                 | LR__5251
2ee5b     2F 73 64 2F 
2ee5f     62 61 73    | 	byte	"/sd/bas"
2ee62     00          | 	byte	0
2ee63                 | LR__5252
2ee63     2F 73 64 2F 
2ee67     62 61 73    | 	byte	"/sd/bas"
2ee6a     00          | 	byte	0
2ee6b                 | LR__5253
2ee6b     20 42 41 53 
2ee6f     49 43 20 62 
2ee73     79 74 65 73 
2ee77     20 66 72 65 
2ee7b     65          | 	byte	" BASIC bytes free"
2ee7c     00          | 	byte	0
2ee7d                 | LR__5254
2ee7d     52 65 61 64 
2ee81     79          | 	byte	"Ready"
2ee82     00          | 	byte	0
2ee83                 | LR__5255
2ee83     6E 6F 6E 61 
2ee87     6D 65 2E 62 
2ee8b     61 73       | 	byte	"noname.bas"
2ee8d     00          | 	byte	0
2ee8e                 | LR__5256
2ee8e                 | 	byte	
2ee8e     00          | 	byte	0
2ee8f                 | LR__5257
2ee8f                 | 	byte	
2ee8f     00          | 	byte	0
2ee90                 | LR__5258
2ee90                 | 	byte	
2ee90     00          | 	byte	0
2ee91     00 00 00    | 	alignl
2ee94                 | _dat_
2ee94     00 00 00 00 
2ee98     00 00 00 00 
2ee9c     00 00 00 00 
2eea0     00 00 00 00 | 	byte	$00[16]
2eea4     61 41 17 0E 
2eea8     62 42 00 00 
2eeac     63 43 19 10 
2eeb0     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
2eeb4     65 45 18 0F 
2eeb8     66 46 00 00 
2eebc     67 47 00 00 
2eec0     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
2eec4     69 49 00 00 
2eec8     6A 4A 00 00 
2eecc     6B 4B 00 00 
2eed0     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
2eed4     6D 4D 00 00 
2eed8     6E 4E 1A 11 
2eedc     6F 4F 1E 15 
2eee0     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
2eee4     71 51 00 00 
2eee8     72 52 00 00 
2eeec     73 53 1B 12 
2eef0     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
2eef4     75 55 00 00 
2eef8     76 56 00 00 
2eefc     77 57 00 00 
2ef00     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
2ef04     79 59 00 00 
2ef08     7A 5A 1D 14 
2ef0c     31 21 04 00 
2ef10     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
2ef14     33 23 06 00 
2ef18     34 24 07 00 
2ef1c     35 25 08 00 
2ef20     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
2ef24     37 26 0A 00 
2ef28     38 2A 0B 00 
2ef2c     39 28 0C 00 
2ef30     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
2ef34     8D 8D 00 00 
2ef38     9B 9B 00 00 
2ef3c     88 88 00 00 
2ef40     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
2ef44     20 20 00 00 
2ef48     2D 5F 00 00 
2ef4c     3D 2B 00 00 
2ef50     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
2ef54     5D 7D 00 00 
2ef58     5C 7C 00 00 
2ef5c     23 7E 00 00 
2ef60     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
2ef64     27 22 00 00 
2ef68     60 7E 03 00 
2ef6c     2C 3C 00 00 
2ef70     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
2ef74     2F 3F 00 00 
2ef78     B9 B9 00 00 
2ef7c     BA 00 00 00 
2ef80     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
2ef84     BC 00 00 00 
2ef88     BD 00 00 00 
2ef8c     BE 00 00 00 
2ef90     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
2ef94     C0 00 00 00 
2ef98     C1 00 00 00 
2ef9c     C2 00 00 00 
2efa0     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
2efa4     C4 00 00 00 
2efa8     C5 00 00 00 
2efac     C6 00 00 00 
2efb0     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
2efb4     C8 00 00 00 
2efb8     C9 00 00 00 
2efbc     CA 00 00 00 
2efc0     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
2efc4     7F 7F 00 00 
2efc8     CC 00 00 00 
2efcc     CD 00 00 00 
2efd0     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
2efd4     CF 00 00 00 
2efd8     D0 00 00 00 
2efdc     D1 00 00 00 
2efe0     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
2efe4     2F 2F 00 00 
2efe8     2A 2A 00 00 
2efec     2D 2D 00 00 
2eff0     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
2eff4     8D 8D 00 00 
2eff8     31 31 00 00 
2effc     32 32 00 00 
2f000     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
2f004     34 34 00 00 
2f008     35 35 00 00 
2f00c     36 36 00 00 
2f010     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
2f014     38 38 00 00 
2f018     39 39 00 00 
2f01c     30 30 00 00 
2f020     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
2f024     5C 7C 00 00 
2f028     00 00 00 00 
2f02c     00 00 00 00 
2f030     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
2f034     00 00 00 00 
      ...             
2f08c     00 00 00 00 
2f090     00 00 00 00 | 	byte	$00[96]
2f094     2B 00 A6 F2 
2f098     24 A7 09 80 
2f09c     5B 88 4D 89 
2f0a0     80 88 A5 88 | atari_spl file "atari.spl"
2f0a4     6D 88 B8 88 
2f0a8     80 88 CB 88 
2f0ac     92 88 A5 88 
2f0b0     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
2f0b4     A5 88 CA 88 
2f0b8     A6 88 DD 88 
2f0bc     B8 88 AB 89 
2f0c0     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
2f0c4     C8 AD C6 F1 
2f0c8     91 06 B6 FF 
2f0cc     13 00 4A 00 
2f0d0     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
2f0d4     5D 00 5E 00 
2f0d8     5D 00 5E 00 
2f0dc     5E 00 5D 00 
2f0e0     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
2f0e4     38 00 83 00 
2f0e8     25 00 83 00 
2f0ec     C3 FE D1 04 
2f0f0     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
2f0f4     48 88 38 85 
2f0f8     41 8A CB 88 
2f0fc     28 89 B8 88 
2f100     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
2f104     15 89 03 89 
2f108     02 89 15 89 
2f10c     16 89 15 89 
2f110     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
2f114     15 89 3A 89 
2f118     72 89 E3 89 
2f11c     52 83 AD 97 
2f120     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
2f124     0C 02 B6 FF 
2f128     E1 00 A8 00 
2f12c     F3 00 A8 00 
2f130     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
2f134     CE 00 CD 00 
2f138     CD 00 BA 00 
2f13c     E1 00 BB 00 
2f140     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
2f144     DF 00 C9 FF 
2f148     E6 01 B6 06 
2f14c     EE DD 8D 98 
2f150     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
2f154     97 89 73 89 
2f158     3B 89 60 89 
2f15c     60 89 60 89 
2f160     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
2f164     73 89 72 89 
2f168     85 89 73 89 
2f16c     AA 89 60 89 
2f170     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
2f174     E8 8A 18 86 
2f178     92 88 A5 C2 
2f17c     E0 00 C3 05 
2f180     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
2f184     F2 00 64 01 
2f188     06 01 3E 01 
2f18c     2B 01 2B 01 
2f190     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
2f194     2B 01 2A 01 
2f198     2B 01 2B 01 
2f19c     2B 01 18 01 
2f1a0     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
2f1a4     39 07 61 F3 
2f1a8     C0 AF 37 85 
2f1ac     0F 88 8B 8A 
2f1b0     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
2f1b4     AB 89 D0 89 
2f1b8     AB 89 D0 89 
2f1bc     D0 89 CF 89 
2f1c0     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
2f1c4     D0 89 F5 89 
2f1c8     BD 89 08 8A 
2f1cc     CF 89 E8 8A 
2f1d0     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
2f1d4     53 B3 0D F8 
2f1d8     F4 07 38 00 
2f1dc     63 01 63 01 
2f1e0     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
2f1e4     88 01 88 01 
2f1e8     76 01 88 01 
2f1ec     88 01 89 01 
2f1f0     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
2f1f4     75 01 AE 01 
2f1f8     76 01 88 01 
2f1fc     4A 00 46 06 
2f200     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
2f204     08 8A 9A 86 
2f208     33 8B 08 8A 
2f20c     2D 8A F5 89 
2f210     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
2f214     2D 8A 2D 8A 
2f218     2E 8A 1B 8A 
2f21c     40 8A 2D 8A 
2f220     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
2f224     2E 8A 79 8A 
2f228     66 8A C8 8B 
2f22c     72 82 2B 97 
2f230     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
2f234     1D 02 05 01 
2f238     F8 01 C0 01 
2f23c     0B 02 C0 01 
2f240     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
2f244     F9 01 D3 01 
2f248     F8 01 D3 01 
2f24c     F8 01 D2 01 
2f250     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
2f254     E6 01 2B 01 
2f258     8E 02 5F 07 
2f25c     F7 E2 ED 9C 
2f260     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
2f264     E8 8A 78 8A 
2f268     78 8A 65 8A 
2f26c     8B 8A 78 8A 
2f270     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
2f274     8B 8A 9D 8A 
2f278     9D 8A 8B 8A 
2f27c     C2 8A 78 8A 
2f280     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
2f284     70 8C 18 86 
2f288     8B 8A 23 C9 
2f28c     CB 03 C4 05 
2f290     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
2f294     0B 02 7B 02 
2f298     1E 02 55 02 
2f29c     30 02 43 02 
2f2a0     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
2f2a4     43 02 44 02 
2f2a8     43 02 30 02 
2f2ac     68 02 31 02 
2f2b0     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
2f2b4     07 08 3F F7 
2f2b8     73 B2 13 85 
2f2bc     15 89 ED 8B 
2f2c0     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
2f2c4     B0 8A FB 8A 
2f2c8     D5 8A FA 8A 
2f2cc     E8 8A FB 8A 
2f2d0     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
2f2d4     E8 8A 21 8B 
2f2d8     E7 8A 33 8B 
2f2dc     E8 8A 26 8C 
2f2e0     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
2f2e4     8D B0 27 F6 
2f2e8     9C 08 AD 01 
2f2ec     7B 02 8D 02 
2f2f0     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
2f2f4     A1 02 A0 02 
2f2f8     A1 02 A0 02 
2f2fc     A0 02 A0 02 
2f300     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
2f304     7B 02 D8 02 
2f308     7B 02 C6 02 
2f30c     3E 01 C3 05 
2f310     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
2f314     00 8C 2A 86 
2f318     E0 8C FA 8A 
2f31c     6A 8B FB 8A 
2f320     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
2f324     45 8B 45 8B 
2f328     45 8B 6B 8B 
2f32c     46 8B 59 8B 
2f330     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
2f334     6B 8B 6B 8B 
2f338     6B 8B 6B 8B 
2f33c     7D 8B 7D 8B 
2f340     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
2f344     90 8B 91 8B 
2f348     90 8B 90 8B 
2f34c     A3 8B A3 8B 
2f350     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
2f354     B5 8B B6 8B 
2f358     B5 8B B5 8B 
2f35c     B6 8B C8 8B 
2f360     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
2f364     C8 8B DA 8B 
2f368     DB 8B DB 8B 
2f36c     DB 8B DC 8B 
2f370     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
2f374     EE 8B EE 8B 
2f378     00 8C 01 8C 
2f37c     00 8C 01 8C 
2f380     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
2f384     12 8C 13 8C 
2f388     13 8C 26 8C 
2f38c     26 8C 26 8C 
2f390     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
2f394     38 8C 38 8C 
2f398     38 8C 38 8C 
2f39c     4B 8C 4B 8C 
2f3a0     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
2f3a4     5E 8C 5E 8C 
2f3a8     5E 8C 5E 8C 
2f3ac     70 8C 70 8C 
2f3b0     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
2f3b4     70 8C 83 8C 
2f3b8     83 8C 83 8C 
2f3bc     83 8C 96 8C 
2f3c0     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
2f3c4     95 8C A9 8C 
2f3c8     A9 8C A8 8C 
2f3cc     A8 8C A8 8C 
2f3d0     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
2f3d4     BB 8C BB 8C 
2f3d8     BB 8C CE 8C 
2f3dc     CE 8C CE 8C 
2f3e0     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
2f3e4     E0 8C E1 8C 
2f3e8     E1 8C E0 8C 
2f3ec     F4 8C F2 8C 
2f3f0     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
2f3f4     05 8D 05 8D 
2f3f8     06 8D 06 8D 
2f3fc     19 8D 19 8D 
2f400     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
2f404     18 8D 2B 8D 
2f408     2B 8D 2B 8D 
2f40c     2A 8D 3E 8D 
2f410     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
2f414     3E 8D 51 8D 
2f418     50 8D 50 8D 
2f41c     50 8D 51 8D 
2f420     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
2f424     63 8D 64 8D 
2f428     76 8D 75 8D 
2f42c     75 8D 76 8D 
2f430     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
2f434     88 8D 88 8D 
2f438     89 8D 9B 8D 
2f43c     9A 8D 9B 8D 
2f440     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
2f444     AD 8D AE 8D 
2f448     AD 8D AE 8D 
2f44c     C1 8D C1 8D 
2f450     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
2f454     D3 8D D3 8D 
2f458     D3 8D D3 8D 
2f45c     D3 8D E6 8D 
2f460     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
2f464     E6 8D E6 8D 
2f468     F9 8D F9 8D 
2f46c     F9 8D F8 8D 
2f470     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
2f474     0B 8E 0B 8E 
2f478     1D 8E 1D 8E 
2f47c     1E 8E 1E 8E 
2f480     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
2f484     31 8E 31 8E 
2f488     31 8E 42 8E 
2f48c     43 8E 43 8E 
2f490     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
2f494     56 8E 56 8E 
2f498     55 8E 56 8E 
2f49c     68 8E 69 8E 
2f4a0     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
2f4a4     69 8E 7B 8E 
2f4a8     7C 8E 7B 8E 
2f4ac     7B 8E 8D 8E 
2f4b0     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
2f4b4     8D 8E A1 8E 
2f4b8     A0 8E A1 8E 
2f4bc     A1 8E A0 8E 
2f4c0     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
2f4c4     B3 8E B3 8E 
2f4c8     C6 8E C5 8E 
2f4cc     C6 8E C6 8E 
2f4d0     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
2f4d4     D8 8E D9 8E 
2f4d8     D8 8E EC 8E 
2f4dc     EB 8E EC 8E 
2f4e0     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
2f4e4     FE 8E FE 8E 
2f4e8     FE 8E FE 8E 
2f4ec     10 8F 10 8F 
2f4f0     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
2f4f4     11 8F 23 8F 
2f4f8     24 8F 23 8F 
2f4fc     24 8F 37 8F 
2f500     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
2f504     36 8F 36 8F 
2f508     48 8F 49 8F 
2f50c     49 8F 49 8F 
2f510     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
2f514     5B 8F 5C 8F 
2f518     5B 8F 6E 8F 
2f51c     6E 8F 6E 8F 
2f520     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
2f524     81 8F 81 8F 
2f528     81 8F 81 8F 
2f52c     93 8F 93 8F 
2f530     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
2f534     93 8F A6 8F 
2f538     A6 8F A6 8F 
2f53c     A6 8F B9 8F 
2f540     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
2f544     B9 8F B9 8F 
2f548     CC 8F CB 8F 
2f54c     CB 8F CC 8F 
2f550     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
2f554     DF 8F DE 8F 
2f558     DE 8F F1 8F 
2f55c     F1 8F F1 8F 
2f560     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
2f564     03 90 04 90 
2f568     04 90 04 90 
2f56c     16 90 17 90 
2f570     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
2f574     29 90 28 90 
2f578     29 90 28 90 
2f57c     29 90 3C 90 
2f580     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
2f584     3C 90 4F 90 
2f588     4E 90 4E 90 
2f58c     4E 90 4E 90 
2f590     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
2f594     61 90 61 90 
2f598     73 90 74 90 
2f59c     74 90 74 90 
2f5a0     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
2f5a4     87 90 86 90 
2f5a8     87 90 86 90 
2f5ac     99 90 99 90 
2f5b0     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
2f5b4     AB 90 AB 90 
2f5b8     AC 90 AB 90 
2f5bc     AB 90 BF 90 
2f5c0     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
2f5c4     BE 90 D1 90 
2f5c8     D0 90 D1 90 
2f5cc     D1 90 D1 90 
2f5d0     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
2f5d4     E3 90 E4 90 
2f5d8     F6 90 F6 90 
2f5dc     F6 90 F6 90 
2f5e0     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
2f5e4     09 91 0A 91 
2f5e8     0A 91 1C 91 
2f5ec     1C 91 1C 91 
2f5f0     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
2f5f4     2F 91 2E 91 
2f5f8     2F 91 2F 91 
2f5fc     2E 91 41 91 
2f600     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
2f604     41 91 53 91 
2f608     54 91 54 91 
2f60c     53 91 54 91 
2f610     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
2f614     67 91 67 91 
2f618     79 91 7A 91 
2f61c     79 91 78 91 
2f620     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
2f624     8C 91 8B 91 
2f628     8C 91 8C 91 
2f62c     9E 91 9E 91 
2f630     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
2f634     B1 91 B1 91 
2f638     B2 91 B1 91 
2f63c     B1 91 C4 91 
2f640     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
2f644     C4 91 D6 91 
2f648     D7 91 D7 91 
2f64c     D7 91 D6 91 
2f650     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
2f654     EA 91 EA 91 
2f658     EA 91 FC 91 
2f65c     FC 91 FB 91 
2f660     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
2f664     0E 92 0F 92 
2f668     0F 92 0E 92 
2f66c     21 92 21 92 
2f670     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
2f674     21 92 34 92 
2f678     33 92 34 92 
2f67c     34 92 47 92 
2f680     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
2f684     46 92 47 92 
2f688     59 92 59 92 
2f68c     59 92 59 92 
2f690     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
2f694     6C 92 6C 92 
2f698     6B 92 7E 92 
2f69c     7E 92 7E 92 
2f6a0     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
2f6a4     92 92 91 92 
2f6a8     91 92 90 92 
2f6ac     91 92 A4 92 
2f6b0     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
2f6b4     A3 92 B6 92 
2f6b8     B6 92 B7 92 
2f6bc     B7 92 B6 92 
2f6c0     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
2f6c4     CA 92 C9 92 
2f6c8     CA 92 DC 92 
2f6cc     DC 92 DC 92 
2f6d0     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
2f6d4     EF 92 EF 92 
2f6d8     EF 92 EF 92 
2f6dc     01 93 01 93 
2f6e0     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
2f6e4     15 93 14 93 
2f6e8     14 93 14 93 
2f6ec     14 93 27 93 
2f6f0     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
2f6f4     27 93 39 93 
2f6f8     3A 93 39 93 
2f6fc     39 93 39 93 
2f700     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
2f704     4B 93 4C 93 
2f708     5F 93 5F 93 
2f70c     5F 93 5E 93 
2f710     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
2f714     5F 93 84 93 
2f718     4C 93 96 93 
2f71c     5F 93 AE 94 
2f720     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
2f724     7B C1 00 00 
2f728     00 00 00 00 
2f72c     00 00 00 00 
2f730     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f734     00 00 00 00 | 	byte	$00, $00, $00, $00
2f738     00 00 00 00 | zero long 0
2f73c     7A D7 00 80 
2f740     87 8A 48 8F 
2f744     EC 8C 76 8D 
2f748     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
2f74c     3C 8D 82 8D 
2f750     42 8D 88 8D 
2f754     8C 8D 8E 8D 
2f758     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
2f75c     97 8D DE 8D 
2f760     E1 8D F1 8E 
2f764     D8 8C A3 83 
2f768     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
2f76c     65 71 C9 65 
2f770     FC 64 C4 65 
2f774     C1 65 BF 65 
2f778     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
2f77c     B6 65 B4 65 
2f780     B2 65 AE 65 
2f784     AC 65 ED 65 
2f788     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
2f78c     5E 65 25 66 
2f790     FA 62 23 6B 
2f794     B5 6C 61 0A 
2f798     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
2f79c     5D 90 BE 8D 
2f7a0     47 8E C3 8D 
2f7a4     09 8E C9 8D 
2f7a8     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
2f7ac     15 8E 19 8E 
2f7b0     1B 8E 62 8E 
2f7b4     64 8E 68 8E 
2f7b8     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
2f7bc     B5 8E 4C 90 
2f7c0     FA 84 3C 9D 
2f7c4     98 13 79 6D 
2f7c8     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
2f7cc     D9 66 50 66 
2f7d0     D4 66 4B 66 
2f7d4     8C 66 46 66 
2f7d8     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
2f7dc     81 66 3A 66 
2f7e0     7C 66 36 66 
2f7e4     76 66 30 66 
2f7e8     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
2f7ec     6B 66 88 72 
2f7f0     BF 37 E7 B7 
2f7f4     75 83 8B 8E 
2f7f8     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
2f7fc     94 8E 96 8E 
2f800     DD 8E 9C 8E 
2f804     E2 8E A2 8E 
2f808     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
2f80c     EE 8E AE 8E 
2f810     38 8F B5 8E 
2f814     3F 8F FD 8E 
2f818     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
2f81c     A5 87 1E E3 
2f820     6D 5D FA 71 
2f824     41 64 25 67 
2f828     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
2f82c     D9 66 1A 67 
2f830     18 67 15 67 
2f834     12 67 0F 67 
2f838     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
2f83c     07 67 C0 66 
2f840     01 67 BC 66 
2f844     B8 66 DE 64 
2f848     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
2f84c     43 E5 1F 8B 
2f850     14 8A F1 90 
2f854     1C 8F 63 8F 
2f858     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
2f85c     29 8F 6E 8F 
2f860     72 8F 75 8F 
2f864     34 8F BE 8F 
2f868     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
2f86c     84 8F 87 8F 
2f870     CC 8F 56 90 
2f874     67 91 49 80 
2f878     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
2f87c     46 77 A6 66 
2f880     E8 66 B0 67 
2f884     AD 67 ED 67 
2f888     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
2f88c     A2 67 E3 67 
2f890     9D 67 9A 67 
2f894     98 67 94 67 
2f898     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
2f89c     49 67 CD 67 
2f8a0     28 65 5F 6E 
2f8a4     82 67 3A 01 
2f8a8     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
2f8ac     C2 91 A9 8F 
2f8b0     EF 8F AE 8F 
2f8b4     F4 8F B5 8F 
2f8b8     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
2f8bc     01 90 03 90 
2f8c0     07 90 09 90 
2f8c4     0C 90 53 90 
2f8c8     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
2f8cc     18 90 44 93 
2f8d0     85 84 D6 9D 
2f8d4     87 1F 2F 75 
2f8d8     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
2f8dc     C4 68 F6 67 
2f8e0     BE 68 F1 67 
2f8e4     76 68 2E 68 
2f8e8     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
2f8ec     27 68 24 68 
2f8f0     64 68 1E 68 
2f8f4     5F 68 19 68 
2f8f8     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
2f8fc     DC 68 56 72 
2f900     7E 36 C2 B8 
2f904     D7 84 73 90 
2f908     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
2f90c     7B 90 7F 90 
2f910     82 90 84 90 
2f914     CB 90 8B 90 
2f918     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
2f91c     D7 90 96 90 
2f920     20 91 59 90 
2f924     25 91 A2 90 
2f928     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
2f92c     D0 89 40 EE 
2f930     12 64 C4 71 
2f934     29 66 0C 69 
2f938     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
2f93c     C0 68 02 69 
2f940     FE 68 FB 68 
2f944     F9 68 F6 68 
2f948     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
2f94c     EE 68 A8 68 
2f950     2C 69 5F 68 
2f954     E2 68 81 66 
2f958     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
2f95c     1E EB A6 8A 
2f960     73 8B 5E 93 
2f964     7B 90 48 91 
2f968     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
2f96c     0D 91 11 91 
2f970     14 91 16 91 
2f974     5C 91 1C 91 
2f978     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
2f97c     68 91 AF 91 
2f980     2A 91 B5 91 
2f984     75 91 1A 94 
2f988     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
2f98c     70 0E CB 6C 
2f990     5D 6E C4 67 
2f994     99 69 54 69 
2f998     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
2f99c     D2 69 49 69 
2f9a0     89 69 86 69 
2f9a4     40 69 C4 69 
2f9a8     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
2f9ac     35 69 76 69 
2f9b0     58 67 EB 6D 
2f9b4     E9 6D 89 0F 
2f9b8     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
2f9bc     33 94 94 91 
2f9c0     D9 91 56 91 
2f9c4     E0 91 9F 91 
2f9c8     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
2f9cc     EC 91 EE 91 
2f9d0     F1 91 F4 91 
2f9d4     F7 91 3D 92 
2f9d8     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
2f9dc     46 92 21 94 
2f9e0     11 89 A4 9D 
2f9e4     FD 0E 8F 6C 
2f9e8     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
2f9ec     28 6A E1 69 
2f9f0     65 6A 1F 6A 
2f9f4     5F 6A 1A 6A 
2f9f8     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
2f9fc     54 6A 0F 6A 
2fa00     4F 6A 09 6A 
2fa04     06 6A 03 6A 
2fa08     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
2fa0c     23 68 69 77 
2fa10     3A 4D 38 CA 
2fa14     38 86 4E 91 
2fa18     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
2fa1c     64 92 24 92 
2fa20     6A 92 2A 92 
2fa24     70 92 30 92 
2fa28     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
2fa2c     7B 92 7E 92 
2fa30     C5 92 84 92 
2fa34     CB 92 8A 92 
2fa38     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
2fa3c     4D 8D F9 E2 
2fa40     97 59 FE 74 
2fa44     DB 68 6D 6A 
2fa48     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
2fa4c     A8 6A A5 6A 
2fa50     A3 6A 9F 6A 
2fa54     9D 6A 9B 6A 
2fa58     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
2fa5c     D6 6A 8F 6A 
2fa60     CF 6A 46 6A 
2fa64     CA 6A E1 67 
2fa68     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
2fa6c     D3 F7 15 92 
2fa70     90 8C BF 94 
2fa74     A6 92 EB 92 
2fa78     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
2fa7c     B1 92 F7 92 
2fa80     FA 92 FD 92 
2fa84     00 93 02 93 
2fa88     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
2fa8c     4F 93 52 93 
2fa90     54 93 22 94 
2fa94     5A 93 8F 88 
2fa98     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
2fa9c     1C 77 07 6C 
2faa0     E8 69 7A 6B 
2faa4     34 6B 75 6B 
2faa8     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
2faac     29 6B 26 6B 
2fab0     24 6B 21 6B 
2fab4     1D 6B 5E 6B 
2fab8     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
2fabc     12 6B 52 6B 
2fac0     34 69 34 6E 
2fac4     BA 73 A4 24 
2fac8     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
2facc     7A 94 B3 93 
2fad0     72 93 31 93 
2fad4     78 93 7A 93 
2fad8     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
2fadc     83 93 86 93 
2fae0     89 93 D0 93 
2fae4     D2 93 D5 93 
2fae8     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
2faec     DD 93 40 96 
2faf0     30 8B 99 9C 
2faf4     52 10 94 71 
2faf8     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
2fafc     46 6C 79 6B 
2fb00     40 6C B7 6B 
2fb04     F7 6B B1 6B 
2fb08     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
2fb0c     EC 6B A5 6B 
2fb10     A2 6B 9F 6B 
2fb14     9D 6B 9A 6B 
2fb18     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
2fb1c     C8 6A E4 76 
2fb20     20 4B F9 CE 
2fb24     2E 8A 1A 92 
2fb28     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
2fb2c     FB 93 BA 93 
2fb30     01 94 03 94 
2fb34     4A 94 09 94 
2fb38     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
2fb3c     55 94 14 94 
2fb40     9E 94 1A 94 
2fb44     61 94 20 94 
2fb48     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
2fb4c     3E 87 E5 CD 
2fb50     5F 50 6C 78 
2fb54     B5 6A 04 6C 
2fb58     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
2fb5c     83 6C 7F 6C 
2fb60     7C 6C 36 6C 
2fb64     76 6C 74 6C 
2fb68     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
2fb6c     6B 6C 25 6C 
2fb70     66 6C 1F 6C 
2fb74     1D 6C 41 6A 
2fb78     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
2fb7c     BA FA FC 94 
2fb80     5B 8D 97 96 
2fb84     3B 94 C5 94 
2fb88     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
2fb8c     89 94 8C 94 
2fb90     8F 94 92 94 
2fb94     94 94 DB 94 
2fb98     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
2fb9c     E4 94 E7 94 
2fba0     2D 95 74 95 
2fba4     C8 96 15 89 
2fba8     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
2fbac     CB 75 31 6F 
2fbb0     7E 6B 10 6D 
2fbb4     C9 6C 0A 6D 
2fbb8     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
2fbbc     BD 6C FF 6C 
2fbc0     FB 6C F9 6C 
2fbc4     B2 6C F3 6C 
2fbc8     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
2fbcc     A7 6C E8 6C 
2fbd0     0D 6B 85 6F 
2fbd4     C7 74 10 28 
2fbd8     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
2fbdc     96 96 47 95 
2fbe0     06 95 0A 95 
2fbe4     0C 95 0F 95 
2fbe8     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
2fbec     17 95 5E 95 
2fbf0     61 95 63 95 
2fbf4     22 95 AC 95 
2fbf8     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
2fbfc     72 95 17 98 
2fc00     59 8E 01 96 
2fc04     CF FC 5A 68 
2fc08     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
2fc0c     96 6D 50 6D 
2fc10     D5 6D 4A 6D 
2fc14     8C 6D 89 6D 
2fc18     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
2fc1c     80 6D 3A 6D 
2fc20     7A 6D 77 6D 
2fc24     75 6D 71 6D 
2fc28     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
2fc2c     18 6C BC 78 
2fc30     9A 4F 7E CF 
2fc34     1F 89 F1 93 
2fc38     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
2fc3c     D2 95 4E 95 
2fc40     D7 95 53 95 
2fc44     DD 95 E0 95 
2fc48     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
2fc4c     A5 95 EB 95 
2fc50     EE 95 F0 95 
2fc54     37 96 B3 95 
2fc58     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
2fc5c     1A 98 D5 8D 
2fc60     C5 9F CD 0F 
2fc64     0F 71 F3 73 
2fc68     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
2fc6c     D9 6D 5E 6E 
2fc70     D3 6D 58 6E 
2fc74     12 6E 0F 6E 
2fc78     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
2fc7c     49 6E BF 6D 
2fc80     87 6E 76 6D 
2fc84     81 6E 11 6B 
2fc88     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
2fc8c     3F 09 44 95 
2fc90     E5 8D 3F 99 
2fc94     D4 95 A2 96 
2fc98     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
2fc9c     23 96 69 96 
2fca0     6B 96 6E 96 
2fca4     71 96 74 96 
2fca8     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
2fcac     BF 96 3C 96 
2fcb0     C6 96 C8 96 
2fcb4     A3 98 51 8D 
2fcb8     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
2fcbc     CF 75 29 73 
2fcc0     90 6C EC 6E 
2fcc4     62 6E E7 6E 
2fcc8     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
2fccc     9A 6E 98 6E 
2fcd0     95 6E 91 6E 
2fcd4     8E 6E CF 6E 
2fcd8     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
2fcdc     40 6E C3 6E 
2fce0     E8 6C 45 6F 
2fce4     A5 7B C9 35 
2fce8     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
2fcec     2D 98 23 97 
2fcf0     E1 96 A0 96 
2fcf4     A4 96 EA 96 
2fcf8     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
2fcfc     AF 96 F4 96 
2fd00     F8 96 3E 97 
2fd04     FD 96 43 97 
2fd08     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
2fd0c     08 97 6B 99 
2fd10     D6 92 88 91 
2fd14     D8 EE 84 66 
2fd18     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
2fd1c     2E 6F E7 6E 
2fd20     6C 6F 24 6F 
2fd24     21 6F 1F 6F 
2fd28     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
2fd2c     17 6F 13 6F 
2fd30     54 6F 0E 6F 
2fd34     0B 6F 4B 6F 
2fd38     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
2fd3c     27 6D 1C 7B 
2fd40     19 59 9F DB 
2fd44     66 8E BC 94 
2fd48     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
2fd4c     67 97 26 97 
2fd50     6D 97 2B 97 
2fd54     72 97 32 97 
2fd58     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
2fd5c     C1 97 7F 97 
2fd60     C6 97 85 97 
2fd64     CB 97 CE 97 
2fd68     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
2fd6c     EC 8A C4 C6 
2fd70     68 4C F4 7D 
2fd74     63 6E E8 6E 
2fd78     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
2fd7c     ED 6F A7 6F 
2fd80     E7 6F A0 6F 
2fd84     E1 6F 9B 6F 
2fd88     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
2fd8c     D5 6F 8F 6F 
2fd90     CE 6F 45 6F 
2fd94     86 6F 68 6D 
2fd98     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
2fd9c     C0 13 AD A2 
2fda0     A7 8E 79 99 
2fda4     E6 97 E8 97 
2fda8     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
2fdac     F1 97 F3 97 
2fdb0     F6 97 F9 97 
2fdb4     FB 97 FE 97 
2fdb8     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
2fdbc     4A 98 0A 98 
2fdc0     93 98 0F 98 
2fdc4     7F 9B BF 8C 
2fdc8     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
2fdcc     91 7B 62 73 
2fdd0     1A 6E B9 70 
2fdd4     EB 6F B3 70 
2fdd8     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
2fddc     25 70 20 70 
2fde0     1E 70 1B 70 
2fde4     18 70 15 70 
2fde8     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
2fdec     0D 70 09 70 
2fdf0     07 70 03 70 
2fdf4     01 70 FD 6F 
2fdf8     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
2fdfc     F6 6F F2 6F 
2fe00     EF 6F EC 6F 
2fe04     2C 70 E6 6F 
2fe08     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
2fe0c     DD 6F 97 6F 
2fe10     D7 6F 84 6E 
2fe14     8F 6F 3F 7D 
2fe18     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
2fe1a     00 00 00 00 | zero1 long 0
2fe1e     FF FF FF FF 
2fe22     FF FF       | atarist_spl file "atarist.spl" '512
2fe24     00 00 00 00 
2fe28     00 00 00 00 
2fe2c     00 00       | 	byte	$00[10]
2fe2e     17 7F F2 7F 
2fe32     B2 7F 72 7F 
2fe36     33 7F F4 7E 
2fe3a     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
2fe3e     36 7E F5 7D 
2fe42     E9 51 F2 0D 
2fe46     8E 00 F3 FD 
2fe4a     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
2fe4e     57 FD 58 FD 
2fe52     5B FD 5C FD 
2fe56     5C FD 60 7D 
2fe5a     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
2fe5e     D6 7C 98 7C 
2fe62     59 7C 1A 7C 
2fe66     DC 7B 9E 7B 
2fe6a     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
2fe6e     F3 05 00 FD 
2fe72     41 FB EA FA 
2fe76     D9 FA DB FA 
2fe7a     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
2fe7e     E4 FA 9B 36 
2fe82     F8 7A C0 7A 
2fe86     84 7A 45 7A 
2fe8a     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
2fe8e     8E 79 51 79 
2fe92     15 79 D7 78 
2fe96     3C 1F EB FF 
2fe9a     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
2fe9e     6D F8 65 F8 
2fea2     68 F8 6D F8 
2fea6     70 F8 74 F8 
2feaa     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
2feae     AB 60 79 60 
2feb2     4B 60 1A 60 
2feb6     E9 5F B9 5F 
2feba     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
2febe     FB 59 B2 0B 
2fec2     92 FA 3A F7 
2fec6     96 F6 79 F6 
2feca     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
2fece     82 F6 86 F6 
2fed2     8C F6 DB 5D 
2fed6     F1 5E C1 5E 
2feda     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
2fede     34 5E 04 5E 
2fee2     D6 5D A6 5D 
2fee6     78 5D D4 3E 
2feea     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
2feee     27 F5 BA F4 
2fef2     AB F4 AD F4 
2fef6     B2 F4 B8 F4 
2fefa     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
2fefe     26 5D 2B 5D 
2ff02     FC 5C CD 5C 
2ff06     9F 5C 70 5C 
2ff0a     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
2ff0e     E5 5B B8 5B 
2ff12     DB 24 A7 FC 
2ff16     D1 F4 4D F3 
2ff1a     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
2ff1e     04 F3 0B F3 
2ff22     11 F3 16 F3 
2ff26     DE 18 98 5B 
2ff2a     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
2ff2e     4E 4A 29 48 
2ff32     A0 47 6A 47 
2ff36     43 47 20 47 
2ff3a     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
2ff3e     E2 F6 98 F2 
2ff42     C5 F1 A3 F1 
2ff46     A3 F1 A8 F1 
2ff4a     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
2ff4e     BF F1 00 3D 
2ff52     EF 46 CD 46 
2ff56     AA 46 86 46 
2ff5a     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
2ff5e     1C 46 F9 45 
2ff62     D7 45 EE 43 
2ff66     DE 02 E8 F3 
2ff6a     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
2ff6e     61 F0 65 F0 
2ff72     6D F0 74 F0 
2ff76     7C F0 84 F0 
2ff7a     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
2ff7e     8E 45 6D 45 
2ff82     49 45 27 45 
2ff86     05 45 E1 44 
2ff8a     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
2ff8e     F1 2F A9 FB 
2ff92     8B F1 9B EF 
2ff96     40 EF 36 EF 
2ff9a     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
2ff9e     4D EF 56 EF 
2ffa2     5E EF 7B 44 
2ffa6     8C 44 69 44 
2ffaa     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
2ffae     03 44 E1 43 
2ffb2     C0 43 F5 37 
2ffb6     69 33 0F 11 
2ffba     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
2ffbe     66 EE 37 EE 
2ffc2     38 EE 40 EE 
2ffc6     48 EE 51 EE 
2ffca     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
2ffce     7D 32 6A 32 
2ffd2     51 32 37 32 
2ffd6     1F 32 05 32 
2ffda     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
2ffde     B9 31 A1 31 
2ffe2     F1 04 F4 F1 
2ffe6     50 EE A0 ED 
2ffea     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
2ffee     93 ED 9A ED 
2fff2     A4 ED AD ED 
2fff6     F4 27 C1 31 
2fffa     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
2fffe     78 31 5F 31 
30002     46 31 2E 31 
30006     15 31 FC 30 
3000a     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
3000e     C4 EF 4A ED 
30012     DC EC CB EC 
30016     D2 EC DA EC 
3001a     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
3001e     F9 EC 64 2F 
30022     0A 31 F1 30 
30026     D9 30 C0 30 
3002a     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
3002e     78 30 5F 30 
30032     46 30 38 23 
30036     A6 F6 19 EE 
3003a     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
3003e     20 EC 28 EC 
30042     32 EC 3C EC 
30046     47 EC 51 EC 
3004a     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
3004e     A3 22 93 22 
30052     7F 22 6E 22 
30056     5D 22 4C 22 
3005a     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
3005e     77 09 76 F1 
30062     CC EC F0 EB 
30066     CD EB CE EB 
3006a     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
3006e     ED EB F5 EB 
30072     3E F6 6B 22 
30076     5F 22 4E 22 
3007a     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
3007e     1B 22 0B 22 
30082     FA 21 E9 21 
30086     D8 21 4D FF 
3008a     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
3008e     92 EB 7B EB 
30092     82 EB 8C EB 
30096     97 EB A1 EB 
3009a     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
3009e     15 22 04 22 
300a2     F3 21 E3 21 
300a6     D2 21 C0 21 
300aa     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
300ae     8E 21 7D 21 
300b2     9A F8 A4 ED 
300b6     8E EB 2F EB 
300ba     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
300be     37 EB 42 EB 
300c2     4C EB 57 EB 
300c6     B2 17 22 19 
300ca     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
300ce     FD 18 EF 18 
300d2     E3 18 D6 18 
300d6     CA 18 BD 18 
300da     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
300de     60 EC 35 EB 
300e2     01 EB 01 EB 
300e6     0C EB 16 EB 
300ea     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
300ee     34 EB D0 18 
300f2     00 19 F4 18 
300f6     E8 18 DA 18 
300fa     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
300fe     B6 18 A9 18 
30102     9D 18 91 05 
30106     F0 EF CA EB 
3010a     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
3010e     E8 EA F2 EA 
30112     FE EA 07 EB 
30116     12 EB C2 EF 
3011a     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
3011e     D9 18 CD 18 
30122     C0 18 B3 18 
30126     A7 18 9B 18 
3012a     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
3012e     B8 FC 30 EE 
30132     61 EB DC EA 
30136     CD EA D2 EA 
3013a     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
3013e     F3 EA FE EA 
30142     D2 09 D1 18 
30146     C3 18 17 18 
3014a     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
3014e     66 11 52 11 
30152     49 11 41 11 
30156     38 11 E0 F4 
3015a     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
3015e     C9 EA C5 EA 
30162     CF EA DB EA 
30166     E6 EA EF EA 
3016a     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
3016e     89 11 80 11 
30172     78 11 6E 11 
30176     67 11 5D 11 
3017a     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
3017e     43 11 32 0D 
30182     9C F1 07 EC 
30186     F8 EA CD EA 
3018a     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
3018e     E4 EA ED EA 
30192     F8 EA 02 EB 
30196     55 11 91 11 
3019a     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
3019e     75 11 6E 11 
301a2     64 11 5E 11 
301a6     54 11 4A 11 
301aa     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
301ae     A8 EB F1 EA 
301b2     D9 EA DC EA 
301b6     E8 EA F1 EA 
301ba     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
301be     A6 EB 9E 11 
301c2     A0 11 96 11 
301c6     8D 11 85 11 
301ca     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
301ce     6A 11 CA 0D 
301d2     36 0B 57 F8 
301d6     6C ED 57 EB 
301da     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
301de     F4 EA FF EA 
301e2     09 EB 15 EB 
301e6     1E EB 1A FD 
301ea     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
301ee     ED 0A E8 0A 
301f2     E2 0A DC 0A 
301f6     D6 0A D1 0A 
301fa     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
301fe     F8 F3 BC EC 
30202     57 EB 1E EB 
30206     18 EB 24 EB 
3020a     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
3020e     42 EB 4D EB 
30212     08 09 20 0B 
30216     1A 0B 14 0B 
3021a     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
3021e     04 0B FE 0A 
30222     F9 0A F2 0A 
30226     84 08 3A F1 
3022a     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
3022e     42 EB 42 EB 
30232     4E EB 57 EB 
30236     62 EB 6B EB 
3023a     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
3023e     48 0B 43 0B 
30242     3C 0B 36 0B 
30246     31 0B 2C 0B 
3024a     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
3024e     1B 0B 5C 00 
30252     6A EF 1B EC 
30256     81 EB 6A EB 
3025a     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
3025e     85 EB 8E EB 
30262     99 EB A3 EB 
30266     DD 05 E5 05 
3026a     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
3026e     DB 05 D8 05 
30272     D5 05 D1 05 
30276     D0 05 CB 05 
3027a     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
3027e     0C EC BB EB 
30282     B3 EB BB EB 
30286     C5 EB D0 EB 
3028a     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
3028e     E4 F7 2C 06 
30292     28 06 24 06 
30296     22 06 1F 06 
3029a     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
3029e     16 06 14 06 
302a2     0F 06 D0 F3 
302a6     65 ED 2D EC 
302aa     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
302ae     01 EC 0A EC 
302b2     14 EC 1E EC 
302b6     29 EC FB 03 
302ba     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
302be     63 06 60 06 
302c2     5E 06 59 06 
302c6     58 06 54 06 
302ca     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
302ce     69 F1 21 ED 
302d2     55 EC 33 EC 
302d6     36 EC 40 EC 
302da     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
302de     5C EC 68 EC 
302e2     92 02 D9 02 
302e6     D7 02 D7 02 
302ea     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
302ee     D1 02 D1 02 
302f2     CE 02 CD 02 
302f6     5D FC 80 EF 
302fa     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
302fe     83 EC 8A EC 
30302     93 EC 9C EC 
30306     A5 EC B1 EC 
3030a     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
3030e     2B 03 2A 03 
30312     29 03 26 03 
30316     25 03 24 03 
3031a     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
3031e     1F 03 70 F7 
30322     D0 EE 27 ED 
30326     DB EC D4 EC 
3032a     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
3032e     F0 EC FA EC 
30332     02 ED F9 F4 
30336     7B 03 7C 03 
3033a     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
3033e     75 03 73 03 
30342     72 03 70 03 
30346     6D 03 6C 03 
3034a     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
3034e     54 ED 22 ED 
30352     22 ED 2C ED 
30356     35 ED 3F ED 
3035a     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
3035e     14 01 C3 03 
30362     C1 03 C0 03 
30366     5F 01 A5 00 
3036a     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
3036e     7B 00 7C 00 
30372     20 00 85 F1 
30376     2A EE 89 ED 
3037a     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
3037e     80 ED 87 ED 
30382     90 ED 9A ED 
30386     A3 ED 73 00 
3038a     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
3038e     D0 00 D0 00 
30392     D0 00 D0 00 
30396     D0 00 CF 00 
3039a     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
3039e     80 F0 3D EE 
303a2     D5 ED C7 ED 
303a6     CD ED D6 ED 
303aa     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
303ae     F2 ED FA ED 
303b2     1D 01 29 01 
303b6     27 01 27 01 
303ba     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
303be     25 01 26 01 
303c2     26 01 23 01 
303c6     D0 F7 EC EF 
303ca     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
303ce     1C EE 24 EE 
303d2     2D EE 37 EE 
303d6     40 EE 47 EE 
303da     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
303de     7D 01 7B 01 
303e2     7A 01 7A 01 
303e6     79 01 78 01 
303ea     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
303ee     84 FE DE F3 
303f2     6C EF 93 EE 
303f6     72 EE 72 EE 
303fa     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
303fe     8B EE 95 EE 
30402     9E EE 15 FC 
30406     67 FE 67 FE 
3040a     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
3040e     6B FE 6B FE 
30412     6D FE 6D FE 
30416     6D FE 6F FE 
3041a     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
3041e     DF EE CC EE 
30422     CF EE D9 EE 
30426     E1 EE EA EE 
3042a     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
3042e     5A FE C4 FE 
30432     C3 FE C5 FE 
30436     C6 FE C6 FE 
3043a     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
3043e     C8 FE C7 FE 
30442     DA FB 85 F1 
30446     8D EF 31 EF 
3044a     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
3044e     34 EF 3E EF 
30452     46 EF 4F EF 
30456     57 EF 0D FF 
3045a     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
3045e     1F FF 1F FF 
30462     21 FF 21 FF 
30466     21 FF 21 FF 
3046a     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
3046e     15 F1 BE EF 
30472     84 EF 7E EF 
30476     88 EF 8F EF 
3047a     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
3047e     A9 EF 06 F2 
30482     A6 FC AB FC 
30486     AD FC AE FC 
3048a     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
3048e     B2 FC B4 FC 
30492     B6 FC B7 FC 
30496     8B F4 BD F0 
3049a     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
3049e     E4 EF EE EF 
304a2     F6 EF FD EF 
304a6     04 F0 0E F0 
304aa     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
304ae     0B FD 0D FD 
304b2     0F FD 11 FD 
304b6     11 FD 13 FD 
304ba     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
304be     17 FD 64 F3 
304c2     CD F0 52 F0 
304c6     41 F0 45 F0 
304ca     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
304ce     5B F0 64 F0 
304d2     6D F0 FB FC 
304d6     65 FD 68 FD 
304da     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
304de     6C FD 6D FD 
304e2     6F FD 70 FD 
304e6     72 FD B3 FB 
304ea     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
304ee     A4 F0 99 F0 
304f2     A0 F0 A8 F0 
304f6     AE F0 B9 F0 
304fa     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
304fe     CB FB DD FB 
30502     DE FB E0 FB 
30506     E3 FB E3 FB 
3050a     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
3050e     E9 FB EC FB 
30512     62 F7 27 F2 
30516     2A F1 FF F0 
3051a     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
3051e     0C F1 13 F1 
30522     1B F1 23 F1 
30526     33 F2 3C FC 
3052a     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
3052e     42 FC 45 FC 
30532     47 FC 48 FC 
30536     4A FC 4C FC 
3053a     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
3053e     20 F2 77 F1 
30542     5C F1 5F F1 
30546     64 F1 6C F1 
3054a     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
3054e     83 F1 DC F8 
30552     9A FC 9A FC 
30556     9B FC 9E FC 
3055a     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
3055e     A3 FC A4 FC 
30562     A6 FC A9 FC 
30566     90 F4 33 F2 
3056a     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
3056e     BA F1 BF F1 
30572     C7 F1 CE F1 
30576     D6 F1 DC F1 
3057a     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
3057e     F3 FC F5 FC 
30582     FE FB 79 FB 
30586     62 FB 5F FB 
3058a     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
3058e     6F FA AF F3 
30592     53 F2 12 F2 
30596     0F F2 15 F2 
3059a     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
3059e     2A F2 32 F2 
305a2     38 F2 9A FB 
305a6     AF FB B1 FB 
305aa     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
305ae     B7 FB B8 FB 
305b2     BA FB BC FB 
305b6     C1 FB 3B F8 
305ba     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
305be     6E F2 6C F2 
305c2     74 F2 7A F2 
305c6     81 F2 87 F2 
305ca     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
305ce     06 FC 09 FC 
305d2     0C FC 0E FC 
305d6     0F FC 12 FC 
305da     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
305de     17 FC 1A FC 
305e2     B2 F6 7B F3 
305e6     DD F2 C5 F2 
305ea     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
305ee     D4 F2 DB F2 
305f2     E0 F2 E8 F2 
305f6     28 F8 60 FC 
305fa     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
305fe     64 FC 66 FC 
30602     68 FC 6A FC 
30606     6D FC 52 FC 
3060a     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
3060e     78 F3 24 F3 
30612     1A F3 1E F3 
30616     24 F3 2A F3 
3061a     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
3061e     3D F3 80 FA 
30622     0C FB 0F FB 
30626     10 FB 14 FB 
3062a     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
3062e     1B FB 1D FB 
30632     1F FB 92 FA 
30636     DE F4 AE F3 
3063a     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
3063e     79 F3 7E F3 
30642     84 F3 8C F3 
30646     92 F3 97 F3 
3064a     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
3064e     67 FB 69 FB 
30652     6B FB 6F FB 
30656     71 FB 72 FB 
3065a     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
3065e     E3 F8 BA F4 
30662     EE F3 CC F3 
30666     CA F3 CF F3 
3066a     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
3066e     E2 F3 E8 F3 
30672     ED F3 B7 FB 
30676     BC FB BE FB 
3067a     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
3067e     C4 FB C6 FB 
30682     C8 FB C9 FB 
30686     CC FB 8F F7 
3068a     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
3068e     1E F4 1E F4 
30692     24 F4 2A F4 
30696     30 F4 38 F4 
3069a     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
3069e     AD FA B1 FA 
306a2     B4 FA B6 FA 
306a6     BA FA BB FA 
306aa     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
306ae     C2 FA C6 FA 
306b2     55 F6 C6 F4 
306b6     7D F4 72 F4 
306ba     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
306be     83 F4 89 F4 
306c2     8F F4 94 F4 
306c6     66 FA 03 FB 
306ca     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
306ce     0A FB 0E FB 
306d2     10 FB 11 FB 
306d6     16 FB 18 FB 
306da     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
306de     F9 F4 CA F4 
306e2     C5 F4 CB F4 
306e6     D1 F4 D7 F4 
306ea     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
306ee     E8 F4 3F FB 
306f2     56 FB 58 FB 
306f6     5A FB 5E FB 
306fa     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
306fe     64 FB 64 FB 
30702     69 FB 99 F9 
30706     E9 F5 33 F5 
3070a     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
3070e     1D F5 22 F5 
30712     27 F5 2E F5 
30716     32 F5 37 F5 
3071a     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
3071e     BC FA BC FA 
30722     C1 FA C2 FA 
30726     C4 FA C8 FA 
3072a     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
3072e     F9 F7 DB F5 
30732     78 F5 69 F5 
30736     6A F5 70 F5 
3073a     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
3073e     7F F5 85 F5 
30742     6E F7 06 FB 
30746     0A FB 0B FB 
3074a     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
3074e     14 FB 15 FB 
30752     18 FB 1B FB 
30756     1D FB 70 F7 
3075a     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
3075e     B6 F5 BB F5 
30762     C0 F5 C6 F5 
30766     CA F5 CF F5 
3076a     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
3076e     54 FB 56 FB 
30772     5A FB 5B FB 
30776     5E FB 5F FB 
3077a     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
3077e     67 FB 52 FB 
30782     29 F7 33 F6 
30786     06 F6 02 F6 
3078a     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
3078e     10 F6 16 F6 
30792     1A F6 1F F6 
30796     81 FB 9F FB 
3079a     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
3079e     51 FB F2 FA 
307a2     E3 FA E3 FA 
307a6     E5 FA E9 FA 
307aa     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
307ae     64 F6 4D F6 
307b2     4D F6 53 F6 
307b6     57 F6 5C F6 
307ba     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
307be     6A F6 19 FB 
307c2     1E FB 22 FB 
307c6     23 FB 24 FB 
307ca     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
307ce     2C FB 2E FB 
307d2     32 FB F0 F8 
307d6     01 F7 A5 F6 
307da     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
307de     9F F6 A3 F6 
307e2     A6 F6 AC F6 
307e6     B0 F6 EB F7 
307ea     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
307ee     68 FB 6C FB 
307f2     6E FB 71 FB 
307f6     72 FB 74 FB 
307fa     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
307fe     71 F8 21 F7 
30802     E5 F6 DD F6 
30806     E1 F6 E6 F6 
3080a     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
3080e     F5 F6 F7 F6 
30812     F7 FA AB FB 
30816     AD FB AF FB 
3081a     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
3081e     B6 FB B9 FB 
30822     BB FB BC FB 
30826     21 FB 07 F8 
3082a     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
3082e     22 F7 26 F7 
30832     2B F7 2E F7 
30836     34 F7 38 F7 
3083a     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
3083e     13 FB 16 FB 
30842     17 FB 1B FB 
30846     1E FB 20 FB 
3084a     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
3084e     26 FB 77 FA 
30852     F3 F7 7C F7 
30856     67 F7 6A F7 
3085a     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
3085e     74 F7 7A F7 
30862     7E F7 82 F7 
30866     53 FB 5A FB 
3086a     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
3086e     5F FB 63 FB 
30872     65 FB 67 FB 
30876     69 FB 6A FB 
3087a     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
3087e     B5 F7 A9 F7 
30882     AD F7 B0 F7 
30886     B5 F7 B8 F7 
3088a     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
3088e     6E F8 99 FB 
30892     9C FB 9D FB 
30896     9F FB A4 FB 
3089a     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
3089e     A9 FB AB FB 
308a2     AD FB 46 F9 
308a6     26 F8 F0 F7 
308aa     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
308ae     F4 F7 F8 F7 
308b2     FB F7 FF F7 
308b6     03 F8 65 FA 
308ba     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
308be     2B FB 2F FB 
308c2     30 FB 32 FB 
308c6     34 FB 38 FB 
308ca     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
308ce     E9 F8 4A F8 
308d2     2E F8 2C F8 
308d6     2F F8 36 F8 
308da     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
308de     41 F8 44 F8 
308e2     4A FB 67 FB 
308e6     68 FB 6B FB 
308ea     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
308ee     73 FB 74 FB 
308f2     78 FB 7A FB 
308f6     14 FB E7 F8 
308fa     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
308fe     6D F8 70 F8 
30902     73 F8 78 F8 
30906     7C F8 80 F8 
3090a     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
3090e     A6 FB A7 FB 
30912     A9 FB AC FB 
30916     AF FB B1 FB 
3091a     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
3091e     B7 FB 73 FA 
30922     F8 F8 B4 F8 
30926     A9 F8 AB F8 
3092a     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
3092e     B4 F8 B8 F8 
30932     BB F8 FA F8 
30936     64 FB 65 FB 
3093a     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
3093e     6D FB 6F FB 
30942     70 FB 74 FB 
30946     77 FB 77 FB 
3094a     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
3094e     E9 F8 E4 F8 
30952     E8 F8 EB F8 
30956     EE F8 F2 F8 
3095a     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
3095e     B5 FA 9F FB 
30962     A1 FB A4 FB 
30966     A5 FB A9 FB 
3096a     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
3096e     AE FB B1 FB 
30972     B2 FB C7 F9 
30976     39 F9 22 F9 
3097a     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
3097e     26 F9 2A F9 
30982     2E F9 32 F9 
30986     33 F9 BA FB 
3098a     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
3098e     DE FB E1 FB 
30992     E2 FB E4 FB 
30996     E5 FB E7 FB 
3099a     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
3099e     C5 F9 67 F9 
309a2     57 F9 56 F9 
309a6     5B F9 5F F9 
309aa     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
309ae     68 F9 6C F9 
309b2     0B FC 11 FC 
309b6     14 FC 15 FC 
309ba     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
309be     B5 FB B5 FB 
309c2     B6 FB B8 FB 
309c6     E9 FA C8 F9 
309ca     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
309ce     90 F9 94 F9 
309d2     95 F9 99 F9 
309d6     9D F9 9F F9 
309da     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
309de     DE FB DF FB 
309e2     E2 FB E4 FB 
309e6     E6 FB E8 FB 
309ea     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
309ee     EF FB AC FA 
309f2     E9 F9 C7 F9 
309f6     C3 F9 C8 F9 
309fa     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
309fe     D0 F9 D4 F9 
30a02     D6 F9 0E FB 
30a06     11 FC 13 FC 
30a0a     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
30a0e     19 FC 1B FC 
30a12     1D FC 1E FC 
30a16     21 FC 22 FC 
30a1a     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
30a1e     F7 F9 F7 F9 
30a22     FB F9 FE F9 
30a26     00 FA 03 FA 
30a2a     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
30a2e     1B FC 45 FC 
30a32     46 FC 48 FC 
30a36     4A FC 4B FC 
30a3a     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
30a3e     52 FC 54 FC 
30a42     F3 FB 82 FA 
30a46     35 FA 28 FA 
30a4a     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
30a4e     31 FA 32 FA 
30a52     37 FA 37 FA 
30a56     3C FA 00 FC 
30a5a     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
30a5e     09 FC 0B FC 
30a62     0F FC 12 FC 
30a66     12 FC 15 FC 
30a6a     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
30a6e     8D FA 60 FA 
30a72     5B FA 5C FA 
30a76     60 FA 61 FA 
30a7a     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
30a7e     6C FA 6D FA 
30a82     37 FC 3A FC 
30a86     3B FC 3D FC 
30a8a     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
30a8e     43 FC 44 FC 
30a92     45 FC 47 FC 
30a96     51 FB AB FA 
30a9a     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
30a9e     8E FA 91 FA 
30aa2     93 FA 95 FA 
30aa6     98 FA 9B FA 
30aaa     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
30aae     68 FC 6A FC 
30ab2     6C FC 6E FC 
30ab6     70 FC 72 FC 
30aba     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
30abe     76 FC 3B FB 
30ac2     D0 FA BB FA 
30ac6     B9 FA BD FA 
30aca     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
30ace     C4 FA C6 FA 
30ad2     CA FA 13 FC 
30ad6     3A FC 3A FC 
30ada     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
30ade     41 FC 43 FC 
30ae2     44 FC 47 FC 
30ae6     48 FC 3C FC 
30aea     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
30aee     E6 FA E8 FA 
30af2     EB FA EE FA 
30af6     F0 FA F2 FA 
30afa     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
30afe     61 FC 66 FC 
30b02     68 FC 6B FC 
30b06     6C FC 6E FC 
30b0a     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
30b0e     73 FC 75 FC 
30b12     13 FC 3F FB 
30b16     17 FB 12 FB 
30b1a     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
30b1e     1A FB 1D FB 
30b22     1F FB 20 FB 
30b26     23 FB 92 FC 
30b2a     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
30b2e     96 FC 97 FC 
30b32     9A FC 9C FC 
30b36     9E FC 9F FC 
30b3a     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
30b3e     5A FB 41 FB 
30b42     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
30b46     00 00 00 00 | zero2 long 0
30b4a     01 00 00 00 
30b4e     00 00 00 00 
30b52     00 00 00 00 
30b56     00 00 00 00 | mouse  file "mouse2.def"
30b5a     00 00 00 00 
30b5e     00 00 00 00 
30b62     00 00 00 00 
30b66     00 00 00 00 | 	byte	$00[16]
30b6a     01 01 00 00 
30b6e     00 00 00 00 
30b72     00 00 00 00 
30b76     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30b7a     00 00 00 00 
30b7e     00 00 00 00 
30b82     00 00 00 00 
30b86     00 00 00 00 | 	byte	$00[16]
30b8a     01 0D 01 00 
30b8e     00 00 00 00 
30b92     00 00 00 00 
30b96     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30b9a     00 00 00 00 
30b9e     00 00 00 00 
30ba2     00 00 00 00 
30ba6     00 00 00 00 | 	byte	$00[16]
30baa     01 0D 0D 01 
30bae     00 00 00 00 
30bb2     00 00 00 00 
30bb6     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30bba     00 00 00 00 
30bbe     00 00 00 00 
30bc2     00 00 00 00 
30bc6     00 00 00 00 | 	byte	$00[16]
30bca     01 0D 0D 0D 
30bce     01 00 00 00 
30bd2     00 00 00 00 
30bd6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30bda     00 00 00 00 
30bde     00 00 00 00 
30be2     00 00 00 00 
30be6     00 00 00 00 | 	byte	$00[16]
30bea     01 0D 0D 0D 
30bee     0D 01 00 00 
30bf2     00 00 00 00 
30bf6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30bfa     00 00 00 00 
30bfe     00 00 00 00 
30c02     00 00 00 00 
30c06     00 00 00 00 | 	byte	$00[16]
30c0a     01 0D 0D 0D 
30c0e     0D 0D 01 00 
30c12     00 00 00 00 
30c16     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
30c1a     00 00 00 00 
30c1e     00 00 00 00 
30c22     00 00 00 00 
30c26     00 00 00 00 | 	byte	$00[16]
30c2a     01 0D 0D 0D 
30c2e     0D 0D 0D 01 
30c32     00 00 00 00 
30c36     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
30c3a     00 00 00 00 
30c3e     00 00 00 00 
30c42     00 00 00 00 
30c46     00 00 00 00 | 	byte	$00[16]
30c4a     01 0D 0D 0D 
30c4e     0D 0D 0D 0C 
30c52     01 00 00 00 
30c56     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
30c5a     00 00 00 00 
30c5e     00 00 00 00 
30c62     00 00 00 00 
30c66     00 00 00 00 | 	byte	$00[16]
30c6a     01 0D 0D 0D 
30c6e     0D 0D 0D 0D 
30c72     0C 01 00 00 
30c76     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
30c7a     00 00 00 00 
30c7e     00 00 00 00 
30c82     00 00 00 00 
30c86     00 00 00 00 | 	byte	$00[16]
30c8a     01 0D 0D 0D 
30c8e     0D 0D 0D 0D 
30c92     0D 0C 01 00 
30c96     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
30c9a     00 00 00 00 
30c9e     00 00 00 00 
30ca2     00 00 00 00 
30ca6     00 00 00 00 | 	byte	$00[16]
30caa     01 0D 0D 0D 
30cae     0D 0D 0D 0D 
30cb2     0D 0D 0B 01 
30cb6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
30cba     00 00 00 00 
30cbe     00 00 00 00 
30cc2     00 00 00 00 
30cc6     00 00 00 00 | 	byte	$00[16]
30cca     01 0D 0D 0D 
30cce     0C 0D 0D 03 
30cd2     01 01 01 01 
30cd6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
30cda     00 00 00 00 
30cde     00 00 00 00 
30ce2     00 00 00 00 
30ce6     00 00 00 00 | 	byte	$00[16]
30cea     01 0D 0D 0C 
30cee     01 09 0D 03 
30cf2     00 00 00 00 
30cf6     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
30cfa     00 00 00 00 
30cfe     00 00 00 00 
30d02     00 00 00 00 
30d06     00 00 00 00 | 	byte	$00[16]
30d0a     01 0D 0C 01 
30d0e     00 01 0D 0B 
30d12     01 00 00 00 
30d16     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
30d1a     00 00 00 00 
30d1e     00 00 00 00 
30d22     00 00 00 00 
30d26     00 00 00 00 | 	byte	$00[16]
30d2a     01 0C 01 00 
30d2e     00 01 0A 0D 
30d32     01 00 00 00 
30d36     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
30d3a     00 00 00 00 
30d3e     00 00 00 00 
30d42     00 00 00 00 
30d46     00 00 00 00 | 	byte	$00[16]
30d4a     01 01 00 00 
30d4e     00 00 01 0D 
30d52     0B 01 00 00 
30d56     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
30d5a     00 00 00 00 
30d5e     00 00 00 00 
30d62     00 00 00 00 
30d66     00 00 00 00 
30d6a     00 00 00 00 
30d6e     00 00       | 	byte	$00[22]
30d70     01 0B 0D 01 
30d74     00 00 00 00 
30d78     00 00 00 00 
30d7c     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30d80     00 00 00 00 
30d84     00 00 00 00 
30d88     00 00 00 00 
30d8c     00 00 00 00 
30d90     00          | 	byte	$00[17]
30d91     01 01 00 00 
30d95     00 00 00 00 
30d99     00 00 00 00 
30d9d     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30da1     00 00 00 00 
      ...             
30f45     00 00 00 00 
30f49     00          | 	byte	$00[425]
30f4a     73 32 00 04 
30f4e     00 00 10 00 
30f52     00 00 00 00 
30f56     00 00 00 00 | atari2 file "atari2.s2"
30f5a     43 87 43 87 
30f5e     43 87 44 87 
30f62     43 87 44 87 
30f66     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
30f6a     43 87 43 87 
30f6e     43 87 44 87 
30f72     43 87 43 87 
30f76     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
30f7a     44 87 43 87 
30f7e     44 87 43 87 
30f82     43 87 43 87 
30f86     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
30f8a     43 87 43 87 
30f8e     44 87 43 87 
30f92     44 87 44 87 
30f96     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
30f9a     43 87 43 87 
30f9e     44 87 43 87 
30fa2     43 87 42 87 
30fa6     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
30faa     43 87 43 87 
30fae     43 87 43 87 
30fb2     44 87 43 87 
30fb6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
30fba     44 87 44 87 
30fbe     43 87 44 87 
30fc2     43 87 44 87 
30fc6     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
30fca     44 87 43 87 
30fce     44 87 44 87 
30fd2     43 87 43 87 
30fd6     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
30fda     43 87 44 87 
30fde     44 87 43 87 
30fe2     43 87 44 87 
30fe6     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
30fea     43 87 43 87 
30fee     43 87 43 87 
30ff2     43 87 43 87 
30ff6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
30ffa     42 87 43 87 
30ffe     44 87 42 87 
31002     43 87 43 87 
31006     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
3100a     43 87 44 87 
3100e     44 87 43 87 
31012     43 87 43 87 
31016     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3101a     43 87 5C 87 
3101e     EE 86 AC 87 
31022     4C 7C A3 78 
31026     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
3102a     BC 78 BB 78 
3102e     BD 78 BC 78 
31032     BB 78 BD 78 
31036     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
3103a     BB 78 BB 78 
3103e     BC 78 BC 78 
31042     BC 78 BB 78 
31046     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3104a     BC 78 BC 78 
3104e     BC 78 BC 78 
31052     BC 78 BC 78 
31056     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3105a     BB 78 BC 78 
3105e     A0 78 4C 7C 
31062     11 7A 29 89 
31066     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
3106a     44 87 43 87 
3106e     44 87 43 87 
31072     43 87 42 87 
31076     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
3107a     43 87 43 87 
3107e     44 87 ED 85 
31082     71 85 52 79 
31086     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
3108a     BC 78 BC 78 
3108e     BC 78 BC 78 
31092     BC 78 BC 78 
31096     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3109a     BC 78 BC 78 
3109e     BC 78 A0 78 
310a2     CF 7A B9 81 
310a6     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
310aa     44 87 43 87 
310ae     43 87 44 87 
310b2     43 87 44 87 
310b6     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
310ba     43 87 43 87 
310be     43 87 43 87 
310c2     44 87 43 87 
310c6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
310ca     43 87 43 87 
310ce     44 87 43 87 
310d2     44 87 43 87 
310d6     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
310da     44 87 43 87 
310de     43 87 43 87 
310e2     5A 87 39 81 
310e6     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
310ea     A5 78 BC 78 
310ee     BB 78 BC 78 
310f2     BB 78 BC 78 
310f6     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
310fa     BC 78 BC 78 
310fe     BC 78 BC 78 
31102     BC 78 8F 79 
31106     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
3110a     09 85 47 87 
3110e     43 87 43 87 
31112     42 87 42 87 
31116     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
3111a     43 87 43 87 
3111e     43 87 43 87 
31122     43 87 44 87 
31126     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3112a     43 87 43 87 
3112e     44 87 43 87 
31132     42 87 43 87 
31136     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
3113a     44 87 43 87 
3113e     43 87 43 87 
31142     44 87 44 87 
31146     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
3114a     94 78 55 7A 
3114e     B9 78 BC 78 
31152     BC 78 BC 78 
31156     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3115a     BC 78 BB 78 
3115e     BC 78 BC 78 
31162     BC 78 BC 78 
31166     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3116a     BB 78 BC 78 
3116e     BC 78 BC 78 
31172     BB 78 BC 78 
31176     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3117a     BC 78 BC 78 
3117e     BD 78 BC 78 
31182     BC 78 BB 78 
31186     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
3118a     94 78 B3 84 
3118e     36 84 4A 87 
31192     43 87 43 87 
31196     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
3119a     43 87 44 87 
3119e     43 87 43 87 
311a2     43 87 43 87 
311a6     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
311aa     43 87 44 87 
311ae     43 87 44 87 
311b2     43 87 43 87 
311b6     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
311ba     43 87 43 87 
311be     43 87 45 87 
311c2     43 87 43 87 
311c6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
311ca     43 87 44 87 
311ce     44 87 44 87 
311d2     43 87 43 87 
311d6     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
311da     43 87 42 87 
311de     43 87 43 87 
311e2     44 87 43 87 
311e6     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
311ea     54 87 3C 82 
311ee     36 83 52 79 
311f2     C6 78 BC 78 
311f6     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
311fa     BB 78 BB 78 
311fe     BC 78 BC 78 
31202     BC 78 BC 78 
31206     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3120a     BD 78 ED 78 
3120e     1B 79 F4 83 
31212     4D 83 4E 87 
31216     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
3121a     44 87 43 87 
3121e     42 87 44 87 
31222     43 87 42 87 
31226     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
3122a     43 87 54 87 
3122e     26 82 B3 84 
31232     D6 77 BB 78 
31236     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
3123a     BC 78 BB 78 
3123e     BB 78 BB 78 
31242     BB 78 BB 78 
31246     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
3124a     BC 78 BC 78 
3124e     26 79 18 75 
31252     36 83 1F 84 
31256     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
3125a     43 87 43 87 
3125e     43 87 43 87 
31262     43 87 44 87 
31266     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3126a     43 87 44 87 
3126e     44 87 43 87 
31272     43 87 43 87 
31276     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
3127a     43 87 43 87 
3127e     43 87 43 87 
31282     44 87 44 87 
31286     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
3128a     44 87 43 87 
3128e     43 87 43 87 
31292     43 87 44 87 
31296     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3129a     44 87 44 87 
3129e     44 87 43 87 
312a2     44 87 43 87 
312a6     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
312aa     43 87 43 87 
312ae     43 87 44 87 
312b2     44 87 43 87 
312b6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
312ba     43 87 43 87 
312be     43 87 43 87 
312c2     43 87 44 87 
312c6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
312ca     43 87 44 87 
312ce     43 87 44 87 
312d2     19 87 7D 86 
312d6     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
312da     B1 78 BC 78 
312de     BC 78 BC 78 
312e2     BC 78 BC 78 
312e6     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
312ea     BC 78 BC 78 
312ee     BD 78 BC 78 
312f2     B7 78 3B 7B 
312f6     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
312fa     96 86 44 87 
312fe     43 87 43 87 
31302     43 87 43 87 
31306     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
3130a     44 87 44 87 
3130e     43 87 44 87 
31312     43 87 44 87 
31316     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
3131a     43 87 44 87 
3131e     43 87 44 87 
31322     43 87 44 87 
31326     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3132a     43 87 44 87 
3132e     43 87 43 87 
31332     44 87 43 87 
31336     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3133a     44 87 44 87 
3133e     43 87 43 87 
31342     43 87 44 87 
31346     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3134a     43 87 43 87 
3134e     43 87 43 87 
31352     44 87 44 87 
31356     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
3135a     36 83 CF 7A 
3135e     AB 78 BB 78 
31362     BC 78 BC 78 
31366     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
3136a     BB 78 BC 78 
3136e     BC 78 BC 78 
31372     BC 78 BC 78 
31376     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3137a     BC 78 BC 78 
3137e     BC 78 BB 78 
31382     BC 78 BC 78 
31386     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3138a     BB 78 BC 78 
3138e     BB 78 BC 78 
31392     BC 78 BD 78 
31396     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
3139a     BC 78 BC 78 
3139e     BC 78 BC 78 
313a2     BC 78 BD 78 
313a6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
313aa     BC 78 BB 78 
313ae     BC 78 BB 78 
313b2     BB 78 BC 78 
313b6     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
313ba     BC 78 BC 78 
313be     BC 78 BC 78 
313c2     BC 78 BB 78 
313c6     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
313ca     BC 78 BC 78 
313ce     BC 78 BD 78 
313d2     BB 78 BC 78 
313d6     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
313da     BC 78 BC 78 
313de     BC 78 BB 78 
313e2     BC 78 BB 78 
313e6     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
313ea     BB 78 BC 78 
313ee     BC 78 BC 78 
313f2     BC 78 BB 78 
313f6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
313fa     BC 78 BC 78 
313fe     BC 78 BB 78 
31402     BC 78 BB 78 
31406     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3140a     BC 78 BC 78 
3140e     BC 78 BC 78 
31412     BB 78 BC 78 
31416     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
3141a     BC 78 9F 78 
3141e     52 79 B3 84 
31422     2F 86 60 87 
31426     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
3142a     44 87 43 87 
3142e     43 87 43 87 
31432     43 87 43 87 
31436     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3143a     43 87 43 87 
3143e     43 87 44 87 
31442     43 87 43 87 
31446     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3144a     43 87 43 87 
3144e     43 87 43 87 
31452     43 87 44 87 
31456     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3145a     44 87 44 87 
3145e     5E 87 BC 80 
31462     FB 80 94 78 
31466     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
3146a     BD 78 BC 78 
3146e     BB 78 BC 78 
31472     BB 78 BB 78 
31476     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
3147a     BC 78 BB 78 
3147e     BB 78 6B 79 
31482     D6 77 AC 87 
31486     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
3148a     43 87 44 87 
3148e     43 87 43 87 
31492     44 87 43 87 
31496     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3149a     43 87 44 87 
3149e     43 87 5C 87 
314a2     E7 80 00 80 
314a6     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
314aa     BC 78 BD 78 
314ae     BC 78 BC 78 
314b2     BC 78 BB 78 
314b6     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
314ba     BC 78 BC 78 
314be     BB 78 BC 78 
314c2     BB 78 BC 78 
314c6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
314ca     BB 78 BC 78 
314ce     BC 78 BC 78 
314d2     BC 78 BC 78 
314d6     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
314da     BC 78 BC 78 
314de     BC 78 BC 78 
314e2     A0 78 8D 7B 
314e6     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
314ea     60 87 43 87 
314ee     44 87 44 87 
314f2     43 87 43 87 
314f6     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
314fa     44 87 43 87 
314fe     43 87 43 87 
31502     44 87 73 86 
31506     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
3150a     51 7B B6 78 
3150e     BC 78 BD 78 
31512     BC 78 BC 78 
31516     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3151a     BB 78 BC 78 
3151e     BD 78 BB 78 
31522     BC 78 BB 78 
31526     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
3152a     BC 78 BC 78 
3152e     BC 78 BC 78 
31532     BB 78 BC 78 
31536     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3153a     BC 78 BB 78 
3153e     BB 78 BC 78 
31542     BC 78 BB 78 
31546     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
3154a     22 8C AF 84 
3154e     48 87 43 87 
31552     44 87 43 87 
31556     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
3155a     43 87 42 87 
3155e     43 87 43 87 
31562     44 87 43 87 
31566     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3156a     43 87 43 87 
3156e     44 87 44 87 
31572     43 87 43 87 
31576     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3157a     43 87 43 87 
3157e     43 87 43 87 
31582     44 87 43 87 
31586     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
3158a     9F 8B D6 77 
3158e     16 7C B3 78 
31592     BC 78 BB 78 
31596     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
3159a     BB 78 BC 78 
3159e     BB 78 BC 78 
315a2     BC 78 BC 78 
315a6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
315aa     BC 78 BB 78 
315ae     BB 78 BC 78 
315b2     BB 78 BC 78 
315b6     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
315ba     BB 78 BB 78 
315be     BC 78 BC 78 
315c2     BC 78 BB 78 
315c6     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
315ca     BC 78 BC 78 
315ce     BC 78 BD 78 
315d2     BB 78 BC 78 
315d6     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
315da     BC 78 BC 78 
315de     BC 78 BB 78 
315e2     BC 78 BC 78 
315e6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
315ea     A8 78 54 7E 
315ee     F4 83 17 82 
315f2     50 87 43 87 
315f6     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
315fa     44 87 43 87 
315fe     44 87 43 87 
31602     43 87 44 87 
31606     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3160a     43 87 28 87 
3160e     20 85 CF 7A 
31612     70 7D AD 78 
31616     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
3161a     BB 78 BC 78 
3161e     BC 78 BC 78 
31622     BB 78 BB 78 
31626     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
3162a     BB 78 B2 78 
3162e     9A 7C CF 7A 
31632     4A 87 0D 87 
31636     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
3163a     43 87 44 87 
3163e     43 87 44 87 
31642     43 87 43 87 
31646     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
3164a     44 87 43 87 
3164e     28 87 51 85 
31652     11 7A 1E 7D 
31656     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
3165a     BC 78 BB 78 
3165e     BC 78 BC 78 
31662     BC 78 BC 78 
31666     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3166a     BB 78 BC 78 
3166e     BB 78 BC 78 
31672     BC 78 BC 78 
31676     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3167a     BB 78 BC 78 
3167e     BC 78 BC 78 
31682     BD 78 BB 78 
31686     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
3168a     BC 78 BB 78 
3168e     BC 78 BC 78 
31692     BC 78 BB 78 
31696     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3169a     BC 78 BC 78 
3169e     BC 78 BC 78 
316a2     BB 78 BC 78 
316a6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
316aa     BC 78 BD 78 
316ae     BC 78 BC 78 
316b2     BC 78 BB 78 
316b6     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
316ba     BC 78 BB 78 
316be     BB 78 BC 78 
316c2     BC 78 BB 78 
316c6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
316ca     BB 78 BB 78 
316ce     BB 78 BC 78 
316d2     B6 78 48 7D 
316d6     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
316da     56 87 43 87 
316de     42 87 44 87 
316e2     44 87 43 87 
316e6     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
316ea     43 87 44 87 
316ee     43 87 44 87 
316f2     4C 87 7E 83 
316f6     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
316fa     F7 78 BC 78 
316fe     BC 78 BB 78 
31702     BB 78 BC 78 
31706     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3170a     BC 78 BB 78 
3170e     BC 78 BC 78 
31712     BB 78 BC 78 
31716     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
3171a     BB 78 BC 78 
3171e     BC 78 BC 78 
31722     BC 78 BB 78 
31726     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3172a     BC 78 BC 78 
3172e     BC 78 BC 78 
31732     BC 78 BB 78 
31736     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3173a     BC 78 BB 78 
3173e     BB 78 BC 78 
31742     BC 78 BB 78 
31746     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3174a     BC 78 BC 78 
3174e     BB 78 BC 78 
31752     BC 78 BC 78 
31756     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
3175a     73 32 00 04 
3175e     00 00 10 00 
31762     00 00 00 00 
31766     00 00 00 00 | atari12 file "atari12.s2"
3176a     00 6D 00 6D 
3176e     00 6D 00 6D 
31772     00 6D 00 6D 
31776     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3177a     00 6D 00 6D 
3177e     00 6D 00 6D 
31782     00 6D 00 6D 
31786     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3178a     00 6D 00 6D 
3178e     00 6D 00 6D 
31792     00 6D 00 6D 
31796     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3179a     00 6D 00 6D 
3179e     00 6D 00 6D 
317a2     00 6D 00 6D 
317a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
317aa     00 6D 00 6D 
317ae     00 6D 00 6D 
317b2     00 6D 00 6D 
317b6     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
317ba     00 6C 00 6C 
317be     00 6C 00 6C 
317c2     00 6C 00 6C 
317c6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
317ca     00 6C 00 6C 
317ce     00 6C 00 6C 
317d2     00 6C 00 6C 
317d6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
317da     00 6C 00 6C 
317de     00 6C 00 6C 
317e2     00 6C 00 6C 
317e6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
317ea     00 6C 00 6C 
317ee     00 6C 00 6C 
317f2     00 6C 00 6C 
317f6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
317fa     00 6C 00 6C 
317fe     00 6C 00 6C 
31802     00 6C 00 6C 
31806     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3180a     00 6C 00 6C 
3180e     00 6C 00 6C 
31812     00 6C 00 6C 
31816     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3181a     00 6C 00 6C 
3181e     00 6C 00 6C 
31822     00 6C 00 6C 
31826     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3182a     00 6C 00 6C 
3182e     00 6C 00 6C 
31832     00 6C 00 6C 
31836     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3183a     00 6C 00 6C 
3183e     00 6C 00 6C 
31842     00 6C 00 6C 
31846     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3184a     00 6C 00 6C 
3184e     00 6C 00 6C 
31852     00 6C 00 6C 
31856     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3185a     00 6C 00 6C 
3185e     00 6C 00 6C 
31862     00 6C 00 6C 
31866     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3186a     00 6C 00 6B 
3186e     00 6B 00 6B 
31872     00 6B 00 6B 
31876     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3187a     00 6B 00 6B 
3187e     00 6B 00 6B 
31882     00 6B 00 6B 
31886     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3188a     00 6B 00 6B 
3188e     00 6B 00 6B 
31892     00 6B 00 6B 
31896     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3189a     00 6B 00 6B 
3189e     00 6B 00 6B 
318a2     00 6B 00 6B 
318a6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
318aa     00 6B 00 6B 
318ae     00 6B 00 6B 
318b2     00 6B 00 6B 
318b6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
318ba     00 6B 00 6B 
318be     00 6B 00 6B 
318c2     00 6B 00 6B 
318c6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
318ca     00 6B 00 6B 
318ce     00 6B 00 6B 
318d2     00 6B 00 6B 
318d6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
318da     00 6B 00 6B 
318de     00 6B 00 6B 
318e2     00 6B 00 6B 
318e6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
318ea     00 6B 00 6B 
318ee     00 6B 00 6B 
318f2     00 6B 00 6B 
318f6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
318fa     00 6B 00 6B 
318fe     00 6B 00 6B 
31902     00 6A 00 9D 
31906     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
3190a     00 9E 00 9E 
3190e     00 9E 00 9E 
31912     00 9E 00 9E 
31916     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3191a     00 9E 00 9E 
3191e     00 9E 00 9E 
31922     00 9E 00 9E 
31926     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3192a     00 9E 00 9E 
3192e     00 9E 00 9E 
31932     00 9E 00 9E 
31936     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3193a     00 9E 00 9E 
3193e     00 9E 00 9E 
31942     00 9E 00 9E 
31946     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3194a     00 9E 00 9E 
3194e     00 9E 00 9E 
31952     00 9E 00 9E 
31956     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3195a     00 9E 00 9E 
3195e     00 9E 00 9E 
31962     00 9E 00 9E 
31966     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3196a     00 9E 00 9E 
3196e     00 9E 00 9E 
31972     00 9E 00 9E 
31976     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3197a     00 9E 00 9E 
3197e     00 9E 00 9E 
31982     00 9E 00 9E 
31986     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3198a     00 9E 00 9E 
3198e     00 9E 00 9E 
31992     00 9E 00 9E 
31996     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
3199a     00 9F 00 9F 
3199e     00 9F 00 9F 
319a2     00 9F 00 9F 
319a6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
319aa     00 9F 00 9F 
319ae     00 9F 00 9F 
319b2     00 9F 00 9F 
319b6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
319ba     00 9F 00 9F 
319be     00 9F 00 9F 
319c2     00 9F 00 9F 
319c6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
319ca     00 9F 00 9F 
319ce     00 9F 00 9F 
319d2     00 9F 00 9F 
319d6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
319da     00 9F 00 9F 
319de     00 9F 00 9F 
319e2     00 9F 00 9F 
319e6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
319ea     00 9F 00 9F 
319ee     00 9F 00 9F 
319f2     00 9F 00 9F 
319f6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
319fa     00 9F 00 9F 
319fe     00 9F 00 9F 
31a02     00 9F 00 9F 
31a06     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31a0a     00 9F 00 9F 
31a0e     00 9F 00 9F 
31a12     00 9F 00 9F 
31a16     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31a1a     00 9F 00 9F 
31a1e     00 9F 00 9F 
31a22     00 9F 00 9F 
31a26     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31a2a     00 9F 00 9F 
31a2e     00 9F 00 9F 
31a32     00 9F 00 9F 
31a36     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31a3a     00 9F 00 9F 
31a3e     00 9F 00 9F 
31a42     00 9F 00 9F 
31a46     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31a4a     00 9F 00 9F 
31a4e     00 9F 00 9F 
31a52     00 9F 00 9F 
31a56     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31a5a     00 9F 00 9F 
31a5e     00 9F 00 A0 
31a62     00 A0 00 A0 
31a66     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a6a     00 A0 00 A0 
31a6e     00 A0 00 A0 
31a72     00 A0 00 A0 
31a76     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a7a     00 A0 00 A0 
31a7e     00 A0 00 A0 
31a82     00 A0 00 A0 
31a86     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a8a     00 A0 00 A0 
31a8e     00 A0 00 A0 
31a92     00 A0 00 A0 
31a96     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a9a     00 A0 00 A0 
31a9e     00 A0 00 A0 
31aa2     00 A0 00 A0 
31aa6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31aaa     00 A0 00 A0 
31aae     00 A0 00 A0 
31ab2     00 A0 00 A0 
31ab6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31aba     00 A0 00 A0 
31abe     00 A0 00 A0 
31ac2     00 A0 00 A0 
31ac6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31aca     00 A0 00 A0 
31ace     00 A0 00 A0 
31ad2     00 A0 00 A0 
31ad6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31ada     00 A0 00 A0 
31ade     00 A0 00 A0 
31ae2     00 A0 00 A0 
31ae6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31aea     00 A0 00 A0 
31aee     00 A0 00 A0 
31af2     00 A0 00 A0 
31af6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31afa     00 A0 00 A0 
31afe     00 A0 00 A0 
31b02     00 A0 00 A0 
31b06     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31b0a     00 A0 00 A0 
31b0e     00 A0 00 A0 
31b12     00 A0 00 A0 
31b16     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31b1a     00 A0 00 A0 
31b1e     00 A0 00 A0 
31b22     00 A0 00 A0 
31b26     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
31b2a     00 6D 00 6D 
31b2e     00 6D 00 6D 
31b32     00 6D 00 6D 
31b36     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31b3a     00 6D 00 6D 
31b3e     00 6D 00 6D 
31b42     00 6D 00 6D 
31b46     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31b4a     00 6D 00 6D 
31b4e     00 6D 00 6D 
31b52     00 6D 00 6D 
31b56     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31b5a     00 6D 00 6D 
31b5e     00 6D 00 6D 
31b62     00 6D 00 6D 
31b66     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31b6a     00 6D 00 6D 
31b6e     00 6D 00 6D 
31b72     00 6D 00 6D 
31b76     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31b7a     00 6D 00 6D 
31b7e     00 6D 00 6D 
31b82     00 6D 00 6D 
31b86     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31b8a     00 6D 00 6D 
31b8e     00 6D 00 6D 
31b92     00 6D 00 6D 
31b96     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31b9a     00 6D 00 6D 
31b9e     00 6D 00 6D 
31ba2     00 6D 00 6D 
31ba6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31baa     00 6D 00 6D 
31bae     00 A0 00 A0 
31bb2     00 A0 00 A0 
31bb6     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31bba     00 A0 00 A0 
31bbe     00 A0 00 A0 
31bc2     00 A0 00 A0 
31bc6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31bca     00 A0 00 A0 
31bce     00 A0 00 A0 
31bd2     00 A0 00 A0 
31bd6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31bda     00 A0 00 A0 
31bde     00 A0 00 A0 
31be2     00 A0 00 A0 
31be6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31bea     00 A0 00 A0 
31bee     00 A0 00 A0 
31bf2     00 A0 00 A0 
31bf6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31bfa     00 A0 00 A0 
31bfe     00 A0 00 A0 
31c02     00 A0 00 A0 
31c06     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31c0a     00 A0 00 A0 
31c0e     00 A0 00 A0 
31c12     00 A0 00 A0 
31c16     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31c1a     00 A0 00 A0 
31c1e     00 A0 00 A0 
31c22     00 A0 00 A0 
31c26     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31c2a     00 A0 00 A0 
31c2e     00 A0 00 A0 
31c32     00 A0 00 A0 
31c36     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
31c3a     00 6D 00 6D 
31c3e     00 6D 00 6D 
31c42     00 6D 00 6D 
31c46     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31c4a     00 6D 00 6D 
31c4e     00 6D 00 6D 
31c52     00 6D 00 6D 
31c56     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31c5a     00 6D 00 6D 
31c5e     00 6D 00 6D 
31c62     00 6D 00 6D 
31c66     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31c6a     00 6D 00 6D 
31c6e     00 6D 00 6D 
31c72     00 6D 00 6D 
31c76     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31c7a     00 6D 00 6D 
31c7e     00 6D 00 6D 
31c82     00 6D 00 6D 
31c86     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31c8a     00 6D 00 6D 
31c8e     00 6D 00 6D 
31c92     00 6D 00 6D 
31c96     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31c9a     00 6D 00 6D 
31c9e     00 6D 00 6D 
31ca2     00 6D 00 6D 
31ca6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31caa     00 6D 00 6D 
31cae     00 6D 00 6D 
31cb2     00 6D 00 6D 
31cb6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31cba     00 6D 00 6D 
31cbe     00 6C 00 A0 
31cc2     00 9F 00 A0 
31cc6     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
31cca     00 A0 00 A0 
31cce     00 A0 00 A0 
31cd2     00 A0 00 A0 
31cd6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31cda     00 A0 00 A0 
31cde     00 A0 00 A0 
31ce2     00 A0 00 A0 
31ce6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31cea     00 A0 00 A0 
31cee     00 A0 00 A0 
31cf2     00 A0 00 A0 
31cf6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31cfa     00 A0 00 A0 
31cfe     00 A0 00 A0 
31d02     00 A0 00 A0 
31d06     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31d0a     00 A0 00 A0 
31d0e     00 A0 00 A0 
31d12     00 A0 00 A0 
31d16     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31d1a     00 A0 00 A0 
31d1e     00 A0 00 A0 
31d22     00 A0 00 A0 
31d26     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31d2a     00 A0 00 A0 
31d2e     00 A0 00 A0 
31d32     00 A0 00 A0 
31d36     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31d3a     00 A0 00 A0 
31d3e     00 A0 00 A0 
31d42     00 A0 00 A0 
31d46     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31d4a     00 A0 00 A0 
31d4e     00 A0 00 A0 
31d52     00 A0 00 A0 
31d56     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31d5a     00 A0 00 A0 
31d5e     00 A0 00 A0 
31d62     00 A0 00 A0 
31d66     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31d6a     00 A0 00 A0 
31d6e     00 A0 00 A0 
31d72     00 A0 00 A0 
31d76     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
31d7a     00 A1 00 A1 
31d7e     00 A1 00 A1 
31d82     00 A1 00 A1 
31d86     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
31d8a     00 A1 00 A1 
31d8e     00 A1 00 A1 
31d92     00 A1 00 A1 
31d96     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
31d9a     00 A1 00 A1 
31d9e     00 A1 00 A1 
31da2     00 A1 00 A1 
31da6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
31daa     00 A1 00 A1 
31dae     00 A1 00 A1 
31db2     00 A1 00 A1 
31db6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
31dba     00 A1 00 A1 
31dbe     00 A1 00 A1 
31dc2     00 A1 00 A1 
31dc6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
31dca     00 A1 00 A1 
31dce     00 A1 00 A1 
31dd2     00 6E 00 6E 
31dd6     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
31dda     00 6E 00 6E 
31dde     00 6E 00 6E 
31de2     00 6E 00 6E 
31de6     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
31dea     00 6E 00 6E 
31dee     00 6E 00 6E 
31df2     00 6E 00 6E 
31df6     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
31dfa     00 6E 00 6E 
31dfe     00 6E 00 6E 
31e02     00 6E 00 6E 
31e06     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
31e0a     00 6E 00 6D 
31e0e     00 6D 00 6D 
31e12     00 6D 00 6D 
31e16     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31e1a     00 6D 00 6D 
31e1e     00 6D 00 6D 
31e22     00 6D 00 6D 
31e26     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31e2a     00 6D 00 6D 
31e2e     00 6D 00 6D 
31e32     00 6D 00 6D 
31e36     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31e3a     00 6D 00 6D 
31e3e     00 6D 00 6D 
31e42     00 6D 00 6D 
31e46     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31e4a     00 6D 00 6D 
31e4e     00 6D 00 6D 
31e52     00 6D 00 6D 
31e56     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31e5a     00 6D 00 6D 
31e5e     00 6D 00 6D 
31e62     00 6D 00 6D 
31e66     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31e6a     00 6D 00 6D 
31e6e     00 6D 00 6D 
31e72     00 6D 00 6D 
31e76     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31e7a     00 6D 00 6D 
31e7e     00 6D 00 6D 
31e82     00 6D 00 6D 
31e86     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31e8a     00 6D 00 6D 
31e8e     00 6D 00 6D 
31e92     00 6D 00 6D 
31e96     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31e9a     00 6D 00 6D 
31e9e     00 6D 00 6D 
31ea2     00 6D 00 6D 
31ea6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31eaa     00 6D 00 6D 
31eae     00 6D 00 6D 
31eb2     00 6D 00 6D 
31eb6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31eba     00 6D 00 6D 
31ebe     00 6C 00 6C 
31ec2     00 6C 00 6C 
31ec6     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
31eca     00 6C 00 6C 
31ece     00 6C 00 6C 
31ed2     00 6C 00 6C 
31ed6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
31eda     00 6C 00 6C 
31ede     00 6C 00 6C 
31ee2     00 9D 00 9F 
31ee6     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
31eea     00 9F 00 9F 
31eee     00 9F 00 9F 
31ef2     00 A0 00 A0 
31ef6     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31efa     00 A0 00 A0 
31efe     00 A0 00 A0 
31f02     00 A0 00 A0 
31f06     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31f0a     00 A0 00 A0 
31f0e     00 A0 00 A0 
31f12     00 A0 00 A0 
31f16     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31f1a     00 A0 00 A0 
31f1e     00 A0 00 A0 
31f22     00 A0 00 A0 
31f26     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31f2a     00 A0 00 A0 
31f2e     00 A0 00 A0 
31f32     00 A0 00 A0 
31f36     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31f3a     00 A0 00 A0 
31f3e     00 A0 00 A0 
31f42     00 A0 00 A0 
31f46     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31f4a     00 A0 00 A0 
31f4e     00 A0 00 A0 
31f52     00 A0 00 A0 
31f56     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31f5a     00 A0 00 A0 
31f5e     00 A0 00 A0 
31f62     00 A0 00 A0 
31f66     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31f6a                 | 
31f6a     00 00       |              	org
31f6c 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
31f70 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
31f74 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
31f78 003             | 
31f78 003 00 30 04 F6 |                 mov     psramaddr,#0
31f7c 004             | 
31f7c 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
31f80 005 20 00 00 FF 
31f84 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
31f88 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
31f8c 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
31f90 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
31f94 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
31f98 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
31f9c 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
31fa0 00d             | 
31fa0 00d 20 00 00 FF 
31fa4 00e 00 30 04 F1 |                 add 	psramaddr,##16384
31fa8 00f E0 03 00 FF 
31fac 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
31fb0 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
31fb4 012             | 
31fb4 012             |                 
31fb4 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
31fb8 013             |     
31fb8 013 01 2C 60 FD |                 cogid 	t11				' get id
31fbc 014 00 00 EC FC |                 coginit #0,#0				' start the new program
31fc0 015 03 2C 60 FD |                 cogstop t11				' stop the loader
31fc4 016             | 
31fc4 016 00 00 00 00 | t11 		long 	0
31fc8 017 00 FF 07 00 | mailbox 	long 	$7FF00
31fcc 018 00 00 00 00 | psramaddr 	long 	0
31fd0 019 00 00 00 00 | pslockval	long 	0
31fd4 01a 00 00 00 00 | cmd             long    0
31fd8 01b 00 00 00 00 | buf1            long    0
31fdc 01c 00 40 00 00 | buf2            long    16384
31fe0 01d E4 1F 03 00 | 	long	@@@_dat_ + 12624
31fe4 01e 50 32 20 52 
31fe8 01f 65 74 72 6F 
31fec 020 6D 61 63 68 
31ff0 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
31ff4 022 42 41 53 49 
31ff8 023 43 20 76 65 
31ffc 024 72 73 69 6F 
32000 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
32004 026 32 39 00 00 | 	byte	$32, $39, $00, $00
32008 027             | 	alignl
32008 027             | _hg010b_spin2_dat_
32008 027             | 
32008 027 00 00 00 00 
3200c 028 00 00 00 00 
32010 029 00 00 00 00 
32014 02a 00 00 00 00 
32018 02b 00 00 00    | vga_font       file "vgafont.def"
3201b 02b 7E 81 A5 81 
3201f 02c 81 BD 99 81 
32023 02d 81 7E 00 00 
32027 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
3202b 02f 7E FF DB FF 
3202f 030 FF C3 E7 FF 
32033 031 FF 7E 00 00 
32037 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
3203b 033 00 36 7F 7F 
3203f 034 7F 7F 3E 1C 
32043 035 08 00 00 00 
32047 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
3204b 037 00 08 1C 3E 
3204f 038 7F 3E 1C 08 
32053 039 00 00 00 00 
32057 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
3205b 03b 18 3C 3C E7 
3205f 03c E7 E7 18 18 
32063 03d 3C 00 00 00 
32067 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3206b 03f 18 3C 7E FF 
3206f 040 FF 7E 18 18 
32073 041 3C 00 00 00 
32077 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3207b 043 00 00 00 18 
3207f 044 3C 3C 18 00 
32083 045 00 00 00 00 
32087 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
3208b 047 FF FF FF E7 
3208f 048 C3 C3 E7 FF 
32093 049 FF FF FF FF 
32097 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3209b 04b 00 00 3C 66 
3209f 04c 42 42 66 3C 
320a3 04d 00 00 00 00 
320a7 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
320ab 04f FF FF C3 99 
320af 050 BD BD 99 C3 
320b3 051 FF FF FF FF 
320b7 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
320bb 053 78 70 58 4C 
320bf 054 1E 33 33 33 
320c3 055 33 1E 00 00 
320c7 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
320cb 057 3C 66 66 66 
320cf 058 66 3C 18 7E 
320d3 059 18 18 00 00 
320d7 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
320db 05b FC CC FC 0C 
320df 05c 0C 0C 0C 0E 
320e3 05d 0F 07 00 00 
320e7 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
320eb 05f FE C6 FE C6 
320ef 060 C6 C6 C6 E6 
320f3 061 E7 67 03 00 
320f7 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
320fb 063 18 18 DB 3C 
320ff 064 E7 3C DB 18 
32103 065 18 00 00 00 
32107 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
3210b 067 03 07 0F 1F 
3210f 068 7F 1F 0F 07 
32113 069 03 01 00 00 
32117 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
3211b 06b 60 70 78 7C 
3211f 06c 7F 7C 78 70 
32123 06d 60 40 00 00 
32127 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
3212b 06f 18 3C 7E 18 
3212f 070 18 18 7E 3C 
32133 071 18 00 00 00 
32137 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
3213b 073 66 66 66 66 
3213f 074 66 66 66    | 	byte	$66[7]
32142 075 00 66 66 00 
32146 076 00 00 00 00 
3214a 077 00 FE DB DB 
3214e 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
32152 079 D8 D8 D8 00 
32156 07a 00 00 00 3E 
3215a 07b 63 06 1C 36 
3215e 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
32162 07d 30 63 3E 00 
32166 07e 00 00 00 00 
3216a 07f 00 00 00 00 
3216e 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
32172 081 7F 7F 7F 00 
32176 082 00 00 00 00 
3217a 083 00 18 3C 7E 
3217e 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
32182 085 3C 18 7E 00 
32186 086 00 00 00 00 
3218a 087 00 18 3C 7E 
3218e 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
32192 089 18 18 18 00 
32196 08a 00 00 00 00 
3219a 08b 00 18 18 18 
3219e 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
321a2 08d 7E 3C 18 00 
321a6 08e 00 00 00 00 
321aa 08f 00 00 00 18 
321ae 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
321b2 091 00 00 00 00 
321b6 092 00 00 00 00 
321ba 093 00 00 00    | 	byte	$00[11]
321bd 094 0C 06 7F 06 
321c1 095 0C 00 00 00 
321c5 096 00 00 00 00 
321c9 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
321cd 098 00 03 03 03 
321d1 099 7F 00 00 00 
321d5 09a 00 00 00 00 
321d9 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
321dd 09c 14 36 7F 36 
321e1 09d 14 00 00 00 
321e5 09e 00 00 00 00 
321e9 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
321ed 0a0 1C 1C 3E 3E 
321f1 0a1 7F 7F 00 00 
321f5 0a2 00 00 00 00 
321f9 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
321fd 0a4 7F 3E 3E 1C 
32201 0a5 1C 08 00 00 
32205 0a6 00 00 00 00 
32209 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3220d 0a8 00 00 00 00 
32211 0a9 00 00 00 00 
32215 0aa 00 00 00 00 
32219 0ab 00 00       | 	byte	$00[14]
3221b 0ab 18 3C 3C 3C 
3221f 0ac 18 18 18 00 
32223 0ad 18 18 00 00 
32227 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
3222b 0af 66 24 00 00 
3222f 0b0 00 00 00 00 
32233 0b1 00 00 00 00 
32237 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3223b 0b3 00 36 36 7F 
3223f 0b4 36 36 36 7F 
32243 0b5 36 36 00 00 
32247 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
3224b 0b7 3E 63 43 03 
3224f 0b8 3E 60 60 61 
32253 0b9 63 3E 18 18 
32257 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
3225b 0bb 00 00 43 63 
3225f 0bc 30 18 0C 06 
32263 0bd 63 61 00 00 
32267 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
3226b 0bf 1C 36 36 1C 
3226f 0c0 6E 3B 33 33 
32273 0c1 33 6E 00 00 
32277 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
3227b 0c3 0C 0C 0C 06 
3227f 0c4 00 00 00 00 
32283 0c5 00 00 00 00 
32287 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3228b 0c7 30 18 0C 0C 
3228f 0c8 0C 0C 0C 0C 
32293 0c9 18 30 00 00 
32297 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
3229b 0cb 0C 18 30 30 
3229f 0cc 30 30 30 30 
322a3 0cd 18 0C 00 00 
322a7 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
322ab 0cf 00 00 00 66 
322af 0d0 3C FF 3C 66 
322b3 0d1 00 00 00 00 
322b7 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
322bb 0d3 00 00 00 18 
322bf 0d4 18 7E 18 18 
322c3 0d5 00 00 00 00 
322c7 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
322cb 0d7 00 00 00 00 
322cf 0d8 00 00 00 00 | 	byte	$00[8]
322d3 0d9 18 18 18 0C 
322d7 0da 00 00 00 00 
322db 0db 00 00 00 00 
322df 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
322e3 0dd 00 00 00 00 
322e7 0de 00 00 00 00 
322eb 0df 00 00 00 00 
322ef 0e0 00 00 00 00 | 	byte	$00[16]
322f3 0e1 18 18 00 00 
322f7 0e2 00 00 00 00 
322fb 0e3 00 00 40 60 
322ff 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
32303 0e5 03 01 00 00 
32307 0e6 00 00 00 00 
3230b 0e7 1C 36 63 63 
3230f 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
32313 0e9 36 1C 00 00 
32317 0ea 00 00 00 00 
3231b 0eb 18 1C 1E 18 
3231f 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
32323 0ed 18 7E 00 00 
32327 0ee 00 00 00 00 
3232b 0ef 3E 63 60 30 
3232f 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
32333 0f1 63 7F 00 00 
32337 0f2 00 00 00 00 
3233b 0f3 3E 63 60 60 
3233f 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
32343 0f5 63 3E 00 00 
32347 0f6 00 00 00 00 
3234b 0f7 30 38 3C 36 
3234f 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
32353 0f9 30 78 00 00 
32357 0fa 00 00 00 00 
3235b 0fb 7F 03 03 03 
3235f 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
32363 0fd 63 3E 00 00 
32367 0fe 00 00 00 00 
3236b 0ff 1C 06 03 03 
3236f 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
32373 101 63 3E 00 00 
32377 102 00 00 00 00 
3237b 103 7F 63 60 60 
3237f 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
32383 105 0C 0C 00 00 
32387 106 00 00 00 00 
3238b 107 3E 63 63 63 
3238f 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
32393 109 63 3E 00 00 
32397 10a 00 00 00 00 
3239b 10b 3E 63 63 63 
3239f 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
323a3 10d 30 1E 00 00 
323a7 10e 00 00 00 00 
323ab 10f 00 00 00 18 
323af 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
323b3 111 18 18 00 00 
323b7 112 00 00 00 00 
323bb 113 00 00 00 18 
323bf 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
323c3 115 18 18 0C 00 
323c7 116 00 00 00 00 
323cb 117 00 60 30 18 
323cf 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
323d3 119 30 60 00 00 
323d7 11a 00 00 00 00 
323db 11b 00 00 00 7E 
323df 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
323e3 11d 00 00 00 00 
323e7 11e 00 00 00 00 
323eb 11f 00          | 	byte	$00[9]
323ec 120 06 0C 18 30 
323f0 121 60 30 18 0C 
323f4 122 06 00 00 00 
323f8 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
323fc 124 63 63 30 18 
32400 125 18 18 00 18 
32404 126 18 00 00 00 
32408 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
3240c 128 3E 63 63 7B 
32410 129 7B 7B 3B 03 
32414 12a 3E 00 00 00 
32418 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
3241c 12c 1C 36 63 63 
32420 12d 7F 63 63 63 
32424 12e 63 00 00 00 
32428 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
3242c 130 66 66 66 3E 
32430 131 66 66 66 66 
32434 132 3F 00 00 00 
32438 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
3243c 134 66 43 03 03 
32440 135 03 03 43 66 
32444 136 3C 00 00 00 
32448 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
3244c 138 36 66 66 66 
32450 139 66 66 66 36 
32454 13a 1F 00 00 00 
32458 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
3245c 13c 66 46 16 1E 
32460 13d 16 06 46 66 
32464 13e 7F 00 00 00 
32468 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
3246c 140 66 46 16 1E 
32470 141 16 06 06 06 
32474 142 0F 00 00 00 
32478 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
3247c 144 66 43 03 03 
32480 145 7B 63 63 66 
32484 146 5C 00 00 00 
32488 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
3248c 148 63 63 63 7F 
32490 149 63 63 63 63 
32494 14a 63 00 00 00 
32498 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
3249c 14c 18 18 18 18 
324a0 14d 18 18 18 18 | 	byte	$18[8]
324a4 14e 3C 00 00 00 
324a8 14f 00 00 00 78 
324ac 150 30 30 30 30 
324b0 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
324b4 152 1E 00 00 00 
324b8 153 00 00 00 67 
324bc 154 66 66 36 1E 
324c0 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
324c4 156 67 00 00 00 
324c8 157 00 00 00 0F 
324cc 158 06 06 06 06 
324d0 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
324d4 15a 7F 00 00 00 
324d8 15b 00 00 00 63 
324dc 15c 77 7F 7F 6B 
324e0 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
324e4 15e 63 00 00 00 
324e8 15f 00 00 00 63 
324ec 160 67 6F 7F 7B 
324f0 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
324f4 162 63 00 00 00 
324f8 163 00 00 00 3E 
324fc 164 63 63 63 63 
32500 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
32504 166 3E 00 00 00 
32508 167 00 00 00 3F 
3250c 168 66 66 66 3E 
32510 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
32514 16a 0F 00 00 00 
32518 16b 00 00 00 3E 
3251c 16c 63 63 63 63 
32520 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
32524 16e 3E 30 70 00 
32528 16f 00 00 00 3F 
3252c 170 66 66 66 3E 
32530 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
32534 172 67 00 00 00 
32538 173 00 00 00 3E 
3253c 174 63 63 06 1C 
32540 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
32544 176 3E 00 00 00 
32548 177 00 00 00 7E 
3254c 178 7E 5A 18 18 
32550 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
32554 17a 3C 00 00 00 
32558 17b 00 00 00 63 
3255c 17c 63 63 63 63 
32560 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
32564 17e 3E 00 00 00 
32568 17f 00 00 00 63 
3256c 180 63 63 63 63 
32570 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
32574 182 08 00 00 00 
32578 183 00 00 00 63 
3257c 184 63 63 63 6B 
32580 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
32584 186 36 00 00 00 
32588 187 00 00 00 63 
3258c 188 63 36 3E 1C 
32590 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
32594 18a 63 00 00 00 
32598 18b 00 00 00 66 
3259c 18c 66 66 66 3C 
325a0 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
325a4 18e 3C 00 00 00 
325a8 18f 00 00 00 7F 
325ac 190 63 61 30 18 
325b0 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
325b4 192 7F 00 00 00 
325b8 193 00 00 00 3C 
325bc 194 0C 0C 0C 0C 
325c0 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
325c4 196 3C 00 00 00 
325c8 197 00 00 00 00 
325cc 198 01 03 07 0E 
325d0 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
325d4 19a 40 00 00 00 
325d8 19b 00 00 00 3C 
325dc 19c 30 30 30 30 
325e0 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
325e4 19e 3C 00 00 00 
325e8 19f 1C 36 00 00 
325ec 1a0 00 00 00 00 
325f0 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
325f4 1a2 00 00 00 00 
325f8 1a3 00 00 00 00 
325fc 1a4 00 00 00 00 
32600 1a5 00 00 00 00 
32604 1a6 00          | 	byte	$00[17]
32605 1a6 FF 00 00 0C 
32609 1a7 18 00 00 00 
3260d 1a8 00 00 00 00 
32611 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32615 1aa 00 00 00 00 
32619 1ab 00 00 00 00 
3261d 1ac 00          | 	byte	$00[9]
3261e 1ac 1E 30 3E 33 
32622 1ad 33 33 6E 00 
32626 1ae 00 00 00 00 
3262a 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3262e 1b0 1E 36 66 66 
32632 1b1 66 66 3E 00 
32636 1b2 00 00 00 00 
3263a 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3263e 1b4 3E 63 03 03 
32642 1b5 03 63 3E 00 
32646 1b6 00 00 00 00 
3264a 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3264e 1b8 3C 36 33 33 
32652 1b9 33 33 6E 00 
32656 1ba 00 00 00 00 
3265a 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3265e 1bc 3E 63 7F 03 
32662 1bd 03 63 3E 00 
32666 1be 00 00 00 00 
3266a 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3266e 1c0 0C 1E 0C 0C 
32672 1c1 0C 0C 1E 00 
32676 1c2 00 00 00 00 
3267a 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3267e 1c4 6E 33 33 33 
32682 1c5 33 33 3E 30 
32686 1c6 33 1E 00 00 
3268a 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3268e 1c8 36 6E 66 66 
32692 1c9 66 66 67 00 
32696 1ca 00 00 00 00 
3269a 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
3269e 1cc 1C 18 18 18 
326a2 1cd 18 18 3C 00 
326a6 1ce 00 00 00 00 
326aa 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
326ae 1d0 70 60 60 60 
326b2 1d1 60 60 60 66 
326b6 1d2 66 3C 00 00 
326ba 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
326be 1d4 66 36 1E 1E 
326c2 1d5 36 66 67 00 
326c6 1d6 00 00 00 00 
326ca 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
326ce 1d8 18 18 18 18 
326d2 1d9 18 18       | 	byte	$18[6]
326d4 1da 3C 00 00 00 
326d8 1db 00 00 00 00 
326dc 1dc 00 00 37 7F 
326e0 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
326e4 1de 63 00 00 00 
326e8 1df 00 00 00 00 
326ec 1e0 00 00 3B 66 
326f0 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
326f4 1e2 66 00 00 00 
326f8 1e3 00 00 00 00 
326fc 1e4 00 00 3E 63 
32700 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
32704 1e6 3E 00 00 00 
32708 1e7 00 00 00 00 
3270c 1e8 00 00 3B 66 
32710 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
32714 1ea 3E 06 06 0F 
32718 1eb 00 00 00 00 
3271c 1ec 00 00 6E 33 
32720 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
32724 1ee 3E 30 30 78 
32728 1ef 00 00 00 00 
3272c 1f0 00 00 3B 6E 
32730 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
32734 1f2 0F 00 00 00 
32738 1f3 00 00 00 00 
3273c 1f4 00 00 3E 63 
32740 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
32744 1f6 3E 00 00 00 
32748 1f7 00 00 00 08 
3274c 1f8 0C 0C 3F 0C 
32750 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
32754 1fa 38 00 00 00 
32758 1fb 00 00 00 00 
3275c 1fc 00 00 33 33 
32760 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
32764 1fe 6E 00 00 00 
32768 1ff 00 00 00 00 
3276c 200 00 00 63 63 
32770 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
32774 202 1C 00 00 00 
32778 203 00 00 00 00 
3277c 204 00 00 63 63 
32780 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
32784 206 36 00 00 00 
32788 207 00 00 00 00 
3278c 208 00 00 63 36 
32790 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
32794 20a 63 00 00 00 
32798 20b 00 00 00 00 
3279c 20c 00 00 63 63 
327a0 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
327a4 20e 7E 60 30 1F 
327a8 20f 00 00 00 00 
327ac 210 00 00 7F 33 
327b0 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
327b4 212 7F 00 00 00 
327b8 213 00 00 00 70 
327bc 214 18 18 18 0E 
327c0 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
327c4 216 70 00 00 00 
327c8 217 00 00 00 18 
327cc 218 18 18 18 18 
327d0 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
327d4 21a 18 00 00 00 
327d8 21b 00 00 00 0E 
327dc 21c 18 18 18 70 
327e0 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
327e4 21e 0E 00 00 00 
327e8 21f 6E 3B 00 00 
327ec 220 00 00 00 00 
327f0 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
327f4 222 00 00 00 00 
327f8 223 00 00 00 00 
327fc 224 00 00       | 	byte	$00[10]
327fe 224 08 1C 36 63 
32802 225 63 63 7F 00 
32806 226 00 00 00 00 
3280a 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
3280e 228 03 03 03 03 
32812 229 43 66 3C 18 
32816 22a 30 1E 00 00 
3281a 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
3281e 22c 33 33 33 33 
32822 22d 33 33       | 	byte	$33[6]
32824 22e 6E 00 00 00 
32828 22f 00 00 60 30 
3282c 230 18 00 3E 63 
32830 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
32834 232 3E 00 00 00 
32838 233 00 00 08 1C 
3283c 234 36 00 1E 30 
32840 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
32844 236 6E 00 00 00 
32848 237 00 00 00 00 
3284c 238 33 00 1E 30 
32850 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
32854 23a 6E 00 00 00 
32858 23b 00 00 1C 36 
3285c 23c 1C 00 33 33 
32860 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
32864 23e 6E 00 00 00 
32868 23f 00 00 60 30 
3286c 240 18 00 3E 63 
32870 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
32874 242 3E 00 00 00 
32878 243 00 00 00 00 
3287c 244 00 00 3E 63 
32880 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
32884 246 3E 18 30 1E 
32888 247 00 00 00 1C 
3288c 248 58 78 38 18 
32890 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
32894 24a 3C 00 00 00 
32898 24b 00 00 00 00 
3289c 24c 63 00 3E 63 
328a0 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
328a4 24e 3E 00 00 00 
328a8 24f 66 33 00 3E 
328ac 250 63 63 63 63 
328b0 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
328b4 252 3E 00 00 00 
328b8 253 00 00 CC 66 
328bc 254 33 00 3E 63 
328c0 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
328c4 256 3E 00 00 00 
328c8 257 00 00 18 3C 
328cc 258 66 00 1C 18 
328d0 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
328d4 25a 3C 00 00 00 
328d8 25b 30 18 00 7F 
328dc 25c 63 61 30 18 
328e0 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
328e4 25e 7F 00 00 00 
328e8 25f 00 63 00 08 
328ec 260 1C 36 63 63 
328f0 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
328f4 262 63 00 00 00 
328f8 263 30 18 00 3C 
328fc 264 66 43 03 03 
32900 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
32904 266 3C 00 00 00 
32908 267 30 18 00 7F 
3290c 268 66 46 16 1E 
32910 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
32914 26a 7F 00 00 00 
32918 26b 0C 06 00 0F 
3291c 26c 06 06 06 06 
32920 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
32924 26e 7F 00 00 00 
32928 26f 30 18 00 1C 
3292c 270 18 18 18 18 
32930 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
32934 272 3C 00 00 00 
32938 273 00 00 08 1C 
3293c 274 36 00 3E 63 
32940 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
32944 276 3E 00 00 00 
32948 277 00 00 00 00 
3294c 278 63 00 3E 63 
32950 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
32954 27a 3E 00 00 00 
32958 27b 00 00 00 6F 
3295c 27c 46 26 06 06 
32960 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
32964 27e 7F 00 00 00 
32968 27f 00 00 00 6E 
3296c 280 4C 2C 0C 0C 
32970 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
32974 282 1E 00 00 00 
32978 283 30 18 00 3E 
3297c 284 63 63 06 1C 
32980 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
32984 286 3E 00 00 00 
32988 287 00 00 60 30 
3298c 288 18 00 3E 63 
32990 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
32994 28a 3E 00 00 00 
32998 28b 00 63 00 3E 
3299c 28c 63 63 63 63 
329a0 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
329a4 28e 3E 00 00 00 
329a8 28f 00 63 00 63 
329ac 290 63 63 63 63 
329b0 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
329b4 292 3E 00 00 00 
329b8 293 6C 38 00 7E 
329bc 294 7E 5A 18 18 
329c0 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
329c4 296 3C 00 00 00 
329c8 297 00 00 60 48 
329cc 298 2C 0C 3F 0C 
329d0 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
329d4 29a 38 00 00 00 
329d8 29b 00 00 00 0F 
329dc 29c 26 36 1E 0E 
329e0 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
329e4 29e 7F 00 00 00 
329e8 29f 00 00 00 00 
329ec 2a0 00 63 36 1C 
329f0 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
329f4 2a2 00 00 00 00 
329f8 2a3 00 00       | 	byte	$00[6]
329fa 2a3 36 1C 08 00 
329fe 2a4 3E 63 03 03 
32a02 2a5 03 63 3E 00 
32a06 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
32a0a 2a7 30 18 0C 00 
32a0e 2a8 1E 30 3E 33 
32a12 2a9 33 33 6E 00 
32a16 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
32a1a 2ab 60 30 18 00 
32a1e 2ac 1C 18 18 18 
32a22 2ad 18 18 3C 00 
32a26 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
32a2a 2af 60 30 18 00 
32a2e 2b0 3E 63 63 63 
32a32 2b1 63 63 3E 00 
32a36 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
32a3a 2b3 30 18 0C 00 
32a3e 2b4 33 33 33 33 
32a42 2b5 33 33 6E 00 
32a46 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
32a4a 2b7 00 08 1C 36 
32a4e 2b8 63 63 7F 63 
32a52 2b9 63 63 63 18 
32a56 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
32a5a 2bb 00 00 00 00 
32a5e 2bc 1E 30 3E 33 
32a62 2bd 33 33 6E 18 
32a66 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
32a6a 2bf 00 7F 63 61 
32a6e 2c0 30 18 0C 06 
32a72 2c1 43 63 7F 00 
32a76 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
32a7a 2c3 36 1C 08 00 
32a7e 2c4 7F 33 18 0C 
32a82 2c5 06 63 7F 00 
32a86 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
32a8a 2c7 00 7F 66 46 
32a8e 2c8 16 1E 16 06 
32a92 2c9 46 66 7F 18 
32a96 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
32a9a 2cb 00 00 00 00 
32a9e 2cc 3E 63 7F 03 
32aa2 2cd 03 63 3E 18 
32aa6 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
32aaa 2cf 00 3C 66 03 
32aae 2d0 1F 03 0F 03 
32ab2 2d1 03 66 3C 00 
32ab6 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
32aba 2d3 60 30 18 00 
32abe 2d4 7F 33 18 0C 
32ac2 2d5 06 63 7F 00 
32ac6 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
32aca 2d7 00 3C 66 43 
32ace 2d8 03 03 03 03 
32ad2 2d9 43 66 3C 00 
32ad6 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
32ada 2db 00 00 00 00 
32ade 2dc 3E 63 06 1C 
32ae2 2dd 30 63 3E 18 
32ae6 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
32aea 2df 00 00 00 00 
32aee 2e0 00 00       | 	byte	$00[6]
32af0 2e1 6C 36 1B 36 
32af4 2e2 6C 00 00 00 
32af8 2e3 00 00 00 00 
32afc 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32b00 2e5 1B 36 6C 36 
32b04 2e6 1B 00 00 00 
32b08 2e7 88 22 88 22 
32b0c 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
32b10 2e9 88 22 88 22 
32b14 2ea 88 22 88 22 
32b18 2eb AA 55 AA 55 
32b1c 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
32b20 2ed AA 55 AA 55 
32b24 2ee AA 55 AA 55 
32b28 2ef BB EE BB EE 
32b2c 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
32b30 2f1 BB EE BB EE 
32b34 2f2 BB EE BB EE 
32b38 2f3 18 18 18 18 
32b3c 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
32b40 2f5 18 18 18 18 
32b44 2f6 18 18 18 18 
32b48 2f7 18 18 18 18 
32b4c 2f8 18 18 18    | 	byte	$18[15]
32b4f 2f8 1F 18 18 18 
32b53 2f9 18 18 18 18 
32b57 2fa 18 30 18 00 
32b5b 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
32b5f 2fc 63 7F 63 63 
32b63 2fd 63 63 00 00 
32b67 2fe 00 1C 36 00 
32b6b 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
32b6f 300 63 7F 63 63 
32b73 301 63 63 00 00 
32b77 302 00 36 1C 00 
32b7b 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
32b7f 304 1E 16 06 46 
32b83 305 66 7F 00 00 
32b87 306 00 00 00 00 
32b8b 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
32b8f 308 1C 30 60 63 
32b93 309 63 3E 18 30 
32b97 30a 1E 6C 6C 6C 
32b9b 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
32b9f 30c 6F 6C 6C 6C 
32ba3 30d 6C 6C 6C 6C 
32ba7 30e 6C 6C 6C 6C 
32bab 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
32baf 310 6C 6C 6C 6C 
32bb3 311 6C 6C 6C 6C 
32bb7 312 6C          | 	byte	$6c[9]
32bb8 313 00 00 00 00 
32bbc 314 00          | 	byte	$00[5]
32bbd 314 7F 60 6F 6C 
32bc1 315 6C 6C 6C 6C 
32bc5 316 6C 6C 6C 6C 
32bc9 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
32bcd 318 6F 60 7F 00 
32bd1 319 00 00 00 00 
32bd5 31a 00 00 00 18 
32bd9 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
32bdd 31c 61 30 18 0C 
32be1 31d 06 43 63 7F 
32be5 31e 00 00 00 00 
32be9 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
32bed 320 00 7F 33 18 
32bf1 321 0C 06 63 7F 
32bf5 322 00 00 00 00 
32bf9 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
32bfd 324 00 00 1F 18 
32c01 325 18 18 18 18 
32c05 326 18 18 18 18 
32c09 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
32c0d 328 18 18 F8 00 
32c11 329 00 00 00 00 
32c15 32a 00 00 00 18 
32c19 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
32c1d 32c 18 18 FF 00 
32c21 32d 00 00 00 00 
32c25 32e 00 00 00 00 
32c29 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32c2d 330 00 00 FF 18 
32c31 331 18 18 18 18 
32c35 332 18 18 18 18 
32c39 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
32c3d 334 18 18 F8 18 
32c41 335 18 18 18 18 
32c45 336 18 18 18 00 
32c49 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
32c4d 338 00 00 FF 00 
32c51 339 00 00 00 00 
32c55 33a 00 00 00 18 
32c59 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
32c5d 33c 18 18 FF 18 
32c61 33d 18 18 18 18 
32c65 33e 18 18 18 63 
32c69 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
32c6d 340 36 63 63 7F 
32c71 341 63 63 63 63 
32c75 342 00 00 00 00 
32c79 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
32c7d 344 00 1E 30 3E 
32c81 345 33 33 33 6E 
32c85 346 00 00 00 6C 
32c89 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
32c8d 348 EC 0C FC 00 
32c91 349 00 00 00 00 
32c95 34a 00 00 00 00 
32c99 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32c9d 34c FC 0C EC 6C 
32ca1 34d 6C 6C 6C 6C 
32ca5 34e 6C 6C 6C 6C 
32ca9 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
32cad 350 EF 00 FF 00 
32cb1 351 00 00 00 00 
32cb5 352 00 00 00 00 
32cb9 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32cbd 354 FF 00 EF 6C 
32cc1 355 6C 6C 6C 6C 
32cc5 356 6C 6C 6C 6C 
32cc9 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
32ccd 358 EC 0C EC 6C 
32cd1 359 6C 6C 6C 6C 
32cd5 35a 6C 6C 6C 00 
32cd9 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
32cdd 35c FF 00 FF 00 
32ce1 35d 00 00 00 00 
32ce5 35e 00 00 00 6C 
32ce9 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
32ced 360 EF 00 EF 6C 
32cf1 361 6C 6C 6C 6C 
32cf5 362 6C 6C 6C 00 
32cf9 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
32cfd 364 63 3E 63 63 
32d01 365 63 63 3E 63 
32d05 366 00 00 00 00 
32d09 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
32d0d 368 30 3C 36 33 
32d11 369 33 33 33 6E 
32d15 36a 00 00 00 00 
32d19 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
32d1d 36c 66 66 6F 66 
32d21 36d 66 66 36 1F 
32d25 36e 00 00 00 36 
32d29 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
32d2d 370 66 66 66 66 
32d31 371 66 66       | 	byte	$66[6]
32d33 371 36 1F 00 00 
32d37 372 00 00 63 00 
32d3b 373 7F 66 46 16 
32d3f 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
32d43 375 66 7F 00 00 
32d47 376 00 6C 38 00 
32d4b 377 38 30 30 3C 
32d4f 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
32d53 379 33 6E 00 00 
32d57 37a 00 36 1C 00 
32d5b 37b 63 67 6F 7F 
32d5f 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
32d63 37d 63 63 00 00 
32d67 37e 00 30 18 00 
32d6b 37f 3C 18 18 18 
32d6f 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
32d73 381 18 3C 00 00 
32d77 382 00 3C 66 00 
32d7b 383 3C 18 18 18 
32d7f 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
32d83 385 18 3C 00 00 
32d87 386 00 00 00 36 
32d8b 387 1C 08 00 3E 
32d8f 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
32d93 389 63 3E 00 00 
32d97 38a 00 18 18 18 
32d9b 38b 18 18 18 18 
32d9f 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
32da3 38d 00 00 00 00 
32da7 38e 00 00 00 00 
32dab 38f 00 00 00 00 | 	byte	$00[12]
32daf 390 F8 18 18 18 
32db3 391 18 18 18 18 
32db7 392 18 FF FF FF 
32dbb 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
32dbf 394 FF FF FF FF 
32dc3 395 FF FF FF FF 
32dc7 396 FF          | 	byte	$ff[9]
32dc8 397 00 00 00 00 
32dcc 398 00 00 00    | 	byte	$00[7]
32dcf 398 FF FF FF FF 
32dd3 399 FF FF FF FF 
32dd7 39a FF          | 	byte	$ff[9]
32dd8 39b 00 00 00 7E 
32ddc 39c 7E 5A 18 18 
32de0 39d 18 18 18 18 
32de4 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
32de8 39f 1C 36 1C 63 
32dec 3a0 63 63 63 63 
32df0 3a1 63 63 63 63 
32df4 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
32df8 3a3 FF FF FF FF 
32dfc 3a4 FF FF FF    | 	byte	$ff[7]
32dff 3a4 00 00 00 00 
32e03 3a5 00 00 00 00 
32e07 3a6 00          | 	byte	$00[9]
32e08 3a7 30 18 00 3E 
32e0c 3a8 63 63 63 63 
32e10 3a9 63 63 63 63 
32e14 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
32e18 3ab 00 00 00 1E 
32e1c 3ac 33 33 33 1B 
32e20 3ad 33 63 63 63 
32e24 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
32e28 3af 1C 36 00 3E 
32e2c 3b0 63 63 63 63 
32e30 3b1 63 63 63 63 
32e34 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
32e38 3b3 30 18 00 63 
32e3c 3b4 67 6F 7F 7B 
32e40 3b5 73 63 63 63 
32e44 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
32e48 3b7 00 00 60 30 
32e4c 3b8 18 00 3B 66 
32e50 3b9 66 66 66 66 
32e54 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
32e58 3bb 00 00 36 1C 
32e5c 3bc 08 00 3B 66 
32e60 3bd 66 66 66 66 
32e64 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
32e68 3bf 36 1C 00 3E 
32e6c 3c0 63 63 06 1C 
32e70 3c1 30 60 63 63 
32e74 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
32e78 3c3 00 00 36 1C 
32e7c 3c4 08 00 3E 63 
32e80 3c5 06 1C 30 63 
32e84 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
32e88 3c7 30 18 00 3F 
32e8c 3c8 66 66 66 3E 
32e90 3c9 36 66 66 66 
32e94 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
32e98 3cb 30 18 00 63 
32e9c 3cc 63 63 63 63 
32ea0 3cd 63 63 63 63 
32ea4 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
32ea8 3cf 00 00 60 30 
32eac 3d0 18 00 3B 6E 
32eb0 3d1 66 06 06 06 
32eb4 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
32eb8 3d3 66 33 00 63 
32ebc 3d4 63 63 63 63 
32ec0 3d5 63 63 63 63 
32ec4 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
32ec8 3d7 00 00 60 30 
32ecc 3d8 18 00 63 63 
32ed0 3d9 63 63 63 63 
32ed4 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
32ed8 3db 30 18 00 66 
32edc 3dc 66 66 66 3C 
32ee0 3dd 18 18 18 18 
32ee4 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
32ee8 3df 00 00 00 08 
32eec 3e0 0C 0C 3F 0C 
32ef0 3e1 0C 0C 0C 6C 
32ef4 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
32ef8 3e3 30 18 00 00 
32efc 3e4 00 00 00 00 
32f00 3e5 00 00 00 00 
32f04 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f08 3e7 00 00 00 00 
32f0c 3e8 00 00 00 00 | 	byte	$00[8]
32f10 3e9 7F 00 00 00 
32f14 3ea 00 00 00 00 
32f18 3eb 66 33 00 00 
32f1c 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
32f20 3ed 00 00 00 00 
32f24 3ee 00 00 00 00 
32f28 3ef 00 00 00 00 
32f2c 3f0 00 00 00 00 
32f30 3f1 00 00 00 00 
32f34 3f2 00          | 	byte	$00[21]
32f35 3f2 0C 06 3C 36 
32f39 3f3 1C 00 00 00 
32f3d 3f4 00 00 00 00 
32f41 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f45 3f6 00 00 00 63 
32f49 3f7 3E 00 00 00 
32f4d 3f8 00 00 00 00 
32f51 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f55 3fa 00 00 00 00 
32f59 3fb 3E 63 06 1C 
32f5d 3fc 36 63 63 36 
32f61 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
32f65 3fe 00 00 00 00 
32f69 3ff 00 00 00 00 | 	byte	$00[8]
32f6d 400 18 00 7E 00 
32f71 401 18 00 00 00 
32f75 402 00 00 00 00 
32f79 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f7d 404 00 00 00 00 
32f81 405 00 00 00 00 | 	byte	$00[8]
32f85 406 18 30 1E 00 
32f89 407 00 00 1C 36 
32f8d 408 36 1C 00 00 
32f91 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
32f95 40a 00 00 00 00 
32f99 40b 63 00 00 00 
32f9d 40c 00 00 00 00 
32fa1 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32fa5 40e 00 00 00 18 
32fa9 40f 18 00 00 00 
32fad 410 00 00 00 00 
32fb1 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32fb5 412 00 00 00 00 
32fb9 413 00          | 	byte	$00[5]
32fba 413 CC 66 33 00 
32fbe 414 33 33 33 33 
32fc2 415 33 33 6E 00 
32fc6 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
32fca 417 00 3F 66 66 
32fce 418 66 3E 36 66 
32fd2 419 66 66 6F 00 
32fd6 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
32fda 41b 36 1C 08 00 
32fde 41c 3B 6E 66 06 
32fe2 41d 06 06 0F 00 
32fe6 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
32fea 41f 00 00 00 7E 
32fee 420 7E 7E 7E 7E 
32ff2 421 7E 7E 00 00 
32ff6 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
32ffa 423 00 00 00 00 
32ffe 424 00 00 00 00 
33002 425 00 00 00 00 
33006 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33008 427             | 'vga_font       file "vgafont.def"
33008 427 00 00 00 00 
      ...             
33038 433 00 00 00 00 
3303c 434 00 00 00    | st_font        file "st4font.def"
3303f 434 FF FF 00 00 
33043 435 00 00 00 00 
33047 436 00 18 18 18 
3304b 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3304f 438 18 18 18 18 
33053 439 18 18 18 18 
33057 43a 18          | 	byte	$18[9]
33058 43b 00 00 00 00 
3305c 43c 00 00 00    | 	byte	$00[7]
3305f 43c FF FF 18 18 
33063 43d 18 18 18 18 
33067 43e 18 18 18 18 
3306b 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3306f 440 FF FF 00 00 
33073 441 00 00 00 00 
33077 442 00 18 18 18 
3307b 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3307f 444 1F 1F 18 18 
33083 445 18 18 18 18 
33087 446 18 18 18 18 
3308b 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3308f 448 F8 F8 18 18 
33093 449 18 18 18 18 
33097 44a 18 00 00 00 
3309b 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3309f 44c 1F 1F 18 18 
330a3 44d 18 18 18 18 
330a7 44e 18 00 00 00 
330ab 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
330af 450 F8 F8 18 18 
330b3 451 18 18 18 18 
330b7 452 18 18 18 18 
330bb 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
330bf 454 1F 1F 00 00 
330c3 455 00 00 00 00 
330c7 456 00 18 18 18 
330cb 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
330cf 458 F8 F8 00 00 
330d3 459 00 00 00 00 
330d7 45a 00 18 18 18 
330db 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
330df 45c FF FF 18 18 
330e3 45d 18 18 18 18 
330e7 45e 18 00 00 18 
330eb 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
330ef 460 66 7E 7E 66 
330f3 461 66 66 66 30 
330f7 462 18 00 00 7E 
330fb 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
330ff 464 3E 06 06 06 
33103 465 06 7E 7E 18 
33107 466 0C 30 18 3C 
3310b 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3310f 468 06 06 06 66 
33113 469 66 7E 3C 00 
33117 46a 00 30 18 66 
3311b 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3311f 46c 7E 7E 76 76 
33123 46d 66 66 66 00 
33127 46e 00 30 18 7C 
3312b 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3312f 470 1C 38 70 60 
33133 471 60 7E 3E 00 
33137 472 00 30 18 7E 
3313b 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3313f 474 18 0C 0C 06 
33143 475 06 7E 7E 00 
33147 476 00 18 18 00 
3314b 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
3314f 478 18 18 0C 0C 
33153 479 06 7E 7E 00 
33157 47a 00 30 18 3C 
3315b 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
3315f 47c 66 66 66 66 
33163 47d 66          | 	byte	$66[5]
33164 47e 7E 3C 00 00 
33168 47f 00 00 06 06 
3316c 480 06 06 16 1E 
33170 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
33174 482 7E 7E 00 00 
33178 483 00 00 00 00 
3317c 484 00 3C 7C 60 
33180 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
33184 486 7E 7C 30 18 
33188 487 00 00 00 00 
3318c 488 00 3C 7E 66 
33190 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
33194 48a 7E 7C 18 0C 
33198 48b 00 00 30 18 
3319c 48c 00 3C 3E 06 
331a0 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
331a4 48e 7E 7C 00 00 
331a8 48f 00 00 30 18 
331ac 490 00 3E 7E 66 
331b0 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
331b4 492 66 66 00 00 
331b8 493 00 00 30 18 
331bc 494 00 7C 7E 06 
331c0 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
331c4 496 7E 3E 00 00 
331c8 497 00 00 30 18 
331cc 498 00 7E 7E 30 
331d0 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
331d4 49a 7E 7E 00 00 
331d8 49b 00 00 18 18 
331dc 49c 00 7E 7E 30 
331e0 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
331e4 49e 7E 7E 00 00 
331e8 49f 00 00 30 18 
331ec 4a0 00 3C 7E 66 
331f0 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
331f4 4a2 7E 3C 00 00 
331f8 4a3 00 00 1C 1C 
331fc 4a4 18 18 38 3C 
33200 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
33204 4a6 3C 3C 00 00 
33208 4a7 00 00 00 00 
3320c 4a8 00 00 00 00 
33210 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33214 4aa 00 00 00 00 
33218 4ab 00 00       | 	byte	$00[6]
3321a 4ab 18 18 18 18 
3321e 4ac 18 18 18 18 | 	byte	$18[8]
33222 4ad 00 00 18 18 
33226 4ae 00 00 00 00 
3322a 4af 66 66 66 66 
3322e 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
33232 4b1 00 00 00 00 
33236 4b2 00 00 00 00 
3323a 4b3 00          | 	byte	$00[9]
3323b 4b3 66 66 FF FF 
3323f 4b4 66 66 FF FF 
33243 4b5 66 66 00 00 
33247 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
3324b 4b7 7C 7E 06 06 
3324f 4b8 3E 7C 60 60 
33253 4b9 7E 3E 18 18 
33257 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
3325b 4bb 66 30 30 18 
3325f 4bc 18 0C 0C 66 
33263 4bd 66 00 00 00 
33267 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
3326b 4bf 66 66 3C 1C 
3326f 4c0 1C FC FE 66 
33273 4c1 66 FE FC 00 
33277 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
3327b 4c3 18 18 18 18 
3327f 4c4 00 00 00 00 
33283 4c5 00 00 00 00 
33287 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
3328b 4c7 18 1C 0C 0C 
3328f 4c8 0C 0C 0C 0C 
33293 4c9 1C 18 30 00 
33297 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
3329b 4cb 18 38 30 30 
3329f 4cc 30 30 30 30 
332a3 4cd 38 18 0C 00 
332a7 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
332ab 4cf 66 66 3C 3C 
332af 4d0 FF FF 3C 3C 
332b3 4d1 66 66 00 00 
332b7 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
332bb 4d3 00 18 18 18 
332bf 4d4 7E 7E 18 18 
332c3 4d5 18 00 00 00 
332c7 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
332cb 4d7 00 00 00 00 
332cf 4d8 00 00       | 	byte	$00[6]
332d1 4d9 18 18 18 18 
332d5 4da 18          | 	byte	$18[5]
332d6 4da 0C 04 00 00 
332da 4db 00 00 00 00 
332de 4dc 7E 7E 00 00 
332e2 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
332e6 4de 00 00 00 00 
332ea 4df 00 00 00 00 
332ee 4e0 00 00 00 00 
332f2 4e1 00          | 	byte	$00[13]
332f3 4e1 18 18 18 00 
332f7 4e2 00 00 00 60 
332fb 4e3 60 60 30 30 
332ff 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
33303 4e5 06 06 06 00 
33307 4e6 00 00 00 3C 
3330b 4e7 7E 66 66 66 
3330f 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
33313 4e9 66 7E 3C 00 
33317 4ea 00 00 00 18 
3331b 4eb 18 1C 1C 18 
3331f 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
33323 4ed 18 7E 7E 00 
33327 4ee 00 00 00 3C 
3332b 4ef 7E 66 66 30 
3332f 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
33333 4f1 0C 7E 7E 00 
33337 4f2 00 00 00 7E 
3333b 4f3 7E 30 30 18 
3333f 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
33343 4f5 66 7E 3C 00 
33347 4f6 00 00 00 30 
3334b 4f7 30 38 38 3C 
3334f 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
33353 4f9 7E 30 30 00 
33357 4fa 00 00 00 7E 
3335b 4fb 7E 06 06 3E 
3335f 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
33363 4fd 66 7E 3C 00 
33367 4fe 00 00 00 38 
3336b 4ff 3C 0E 06 06 
3336f 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
33373 501 66 7E 3C 00 
33377 502 00 00 00 7E 
3337b 503 7E 60 60 30 
3337f 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
33383 505 0C 0C 0C 00 
33387 506 00 00 00 3C 
3338b 507 7E 66 66 3C 
3338f 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
33393 509 66 7E 3C 00 
33397 50a 00 00 00 3C 
3339b 50b 7E 66 66 7E 
3339f 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
333a3 50d 70 3C 1C 00 
333a7 50e 00 00 00 00 
333ab 50f 00 00 18 18 
333af 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
333b3 511 18 18 18 00 
333b7 512 00 00 00 00 
333bb 513 00 00 18 18 
333bf 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
333c3 515 18 18 18 0C 
333c7 516 04 00 00 00 
333cb 517 70 38 1C 0E 
333cf 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
333d3 519 70 00 00 00 
333d7 51a 00 00 00 00 
333db 51b 00 00 7E 7E 
333df 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
333e3 51d 00 00 00 00 
333e7 51e 00 00 00 00 | 	byte	$00[8]
333eb 51f 0E 1C 38 70 
333ef 520 E0 70 38 1C 
333f3 521 0E 00 00 00 
333f7 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
333fb 523 7E 66 66 30 
333ff 524 30 18 18 18 
33403 525 00 18 18 00 
33407 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
3340b 527 7E 66 66 66 
3340f 528 66 36 06 66 
33413 529 66 7E 3C 00 
33417 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
3341b 52b 3C 7E 66 66 
3341f 52c 66 7E 7E 66 
33423 52d 66 66 66 00 
33427 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
3342b 52f 7E 66 66 7E 
3342f 530 3E 66 66 66 
33433 531 66 7E 3E 00 
33437 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3343b 533 7E 66 66 06 
3343f 534 06 06 06 66 
33443 535 66 7E 3C 00 
33447 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
3344b 537 7E 66 66 66 
3344f 538 66 66 66 66 
33453 539 66 7E 3E 00 
33457 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
3345b 53b 7E 06 06 3E 
3345f 53c 3E 06 06 06 
33463 53d 06 7E 7E 00 
33467 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
3346b 53f 7E 06 06 3E 
3346f 540 3E 06 06 06 
33473 541 06 06 06 00 
33477 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
3347b 543 7E 06 06 76 
3347f 544 76 66 66 66 
33483 545 66 7E 3C 00 
33487 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
3348b 547 66 66 66 7E 
3348f 548 7E 66 66 66 
33493 549 66 66 66 00 
33497 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
3349b 54b 7E 18 18 18 
3349f 54c 18 18 18 18 
334a3 54d 18 7E 7E 00 
334a7 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
334ab 54f 60 60 60 60 
334af 550 60 60 60    | 	byte	$60[7]
334b2 551 66 66 7E 3C 
334b6 552 00 00 00 00 
334ba 553 66 66 36 36 
334be 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
334c2 555 66 66 C6 C6 
334c6 556 00 00 00 00 
334ca 557 06 06 06 06 
334ce 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
334d2 559 06 06 7E 7E 
334d6 55a 00 00 00 00 
334da 55b C6 C6 EE EE 
334de 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
334e2 55d C6 C6 C6 C6 
334e6 55e 00 00 00 00 
334ea 55f 66 66 66 6E 
334ee 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
334f2 561 76 66 66 66 
334f6 562 00 00 00 00 
334fa 563 3C 7E 66 66 
334fe 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
33502 565 66 66 7E 3C 
33506 566 00 00 00 00 
3350a 567 3E 7E 66 66 
3350e 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
33512 569 06 06 06 06 
33516 56a 00 00 00 00 
3351a 56b 3C 7E 66 66 
3351e 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
33522 56d 66 56 3E 6C 
33526 56e 00 00 00 00 
3352a 56f 3E 7E 66 66 
3352e 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
33532 571 66 66 C6 C6 
33536 572 00 00 00 00 
3353a 573 7C 7E 06 06 
3353e 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
33542 575 60 60 7E 3E 
33546 576 00 00 00 00 
3354a 577 7E 7E 18 18 
3354e 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
33552 579 18 18 18 18 
33556 57a 00 00 00 00 
3355a 57b 66 66 66 66 
3355e 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
33562 57d 66 66 7E 3C 
33566 57e 00 00 00 00 
3356a 57f 66 66 66 66 
3356e 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
33572 581 3C 3C 18 18 
33576 582 00 00 00 00 
3357a 583 C6 C6 C6 C6 
3357e 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
33582 585 FE EE C6 82 
33586 586 00 00 00 00 
3358a 587 66 66 66 3C 
3358e 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
33592 589 3C 66 66 66 
33596 58a 00 00 00 00 
3359a 58b 66 66 66 66 
3359e 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
335a2 58d 18 18 18 18 
335a6 58e 00 00 00 00 
335aa 58f 7E 7E 30 30 
335ae 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
335b2 591 06 06 7E 7E 
335b6 592 00 00 00 00 
335ba 593 3C 3C 0C 0C 
335be 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
335c2 595 0C 0C 3C 3C 
335c6 596 00 00 00 00 
335ca 597 06 06 0C 0C 
335ce 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
335d2 599 60 60 C0 C0 
335d6 59a 00 00 00 00 
335da 59b 3C 3C 30 30 
335de 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
335e2 59d 30 30 3C 3C 
335e6 59e 00 00 00 00 
335ea 59f 18 18 3C 3C 
335ee 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
335f2 5a1 00 00 00 00 
335f6 5a2 00 00 00 00 
335fa 5a3 00 00 00 00 
335fe 5a4 00 00 00 00 
33602 5a5 00 00       | 	byte	$00[18]
33604 5a6 FE FE 00 00 
33608 5a7 00 00 0C 0C 
3360c 5a8 18 18 00 00 
33610 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
33614 5aa 00 00 00 00 
33618 5ab 00 00 00 00 
3361c 5ac 00          | 	byte	$00[9]
3361d 5ac 3C 7C 60 7C 
33621 5ad 7E 66 66 7E 
33625 5ae 7C 00 00 00 
33629 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
3362d 5b0 3E 7E 66 66 
33631 5b1 66 66 66 7E 
33635 5b2 3E 00 00 00 
33639 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
3363d 5b4 3C 3E 06 06 
33641 5b5 06 06 06 7E 
33645 5b6 7C 00 00 00 
33649 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
3364d 5b8 7C 7E 66 66 
33651 5b9 66 66 66 7E 
33655 5ba 7C 00 00 00 
33659 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
3365d 5bc 3C 7E 66 66 
33661 5bd 7E 06 06 7E 
33665 5be 7C 00 00 00 
33669 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
3366d 5c0 18 7E 7E 18 
33671 5c1 18 18 18 18 
33675 5c2 18 00 00 00 
33679 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3367d 5c4 7C 7E 66 66 
33681 5c5 66 66 7E 7C 
33685 5c6 60 7E 3E 00 
33689 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
3368d 5c8 3E 7E 66 66 
33691 5c9 66 66 66 66 
33695 5ca 66 00 00 00 
33699 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
3369d 5cc 1C 1C 18 18 
336a1 5cd 18 18 18 3C 
336a5 5ce 3C 00 00 00 
336a9 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
336ad 5d0 30 30 30 30 
336b1 5d1 30 30 30 30 
336b5 5d2 30          | 	byte	$30[9]
336b6 5d2 3E 1E 00 00 
336ba 5d3 06 06 06 36 
336be 5d4 36 1E 1E 1E 
336c2 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
336c6 5d6 00 00 00 00 
336ca 5d7 1C 1C 18 18 
336ce 5d8 18 18 18 18 
336d2 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
336d6 5da 00 00 00 00 
336da 5db 00 00 00    | 	byte	$00[7]
336dd 5dc 6C FE FE D6 
336e1 5dd D6 C6 C6 C6 
336e5 5de C6 00 00 00 
336e9 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
336ed 5e0 3E 7E 66 66 
336f1 5e1 66 66 66 66 
336f5 5e2 66 00 00 00 
336f9 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
336fd 5e4 3C 7E 66 66 
33701 5e5 66 66 66 7E 
33705 5e6 3C 00 00 00 
33709 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
3370d 5e8 3E 7E 66 66 
33711 5e9 66 66 66 7E 
33715 5ea 3E 06 06 00 
33719 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
3371d 5ec 7C 7E 66 66 
33721 5ed 66 66 66 7E 
33725 5ee 7C 60 60 00 
33729 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
3372d 5f0 3E 7E 66 06 
33731 5f1 06 06 06 06 
33735 5f2 06 00 00 00 
33739 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
3373d 5f4 7C 7E 06 0E 
33741 5f5 3C 70 60 7E 
33745 5f6 3E 00 00 00 
33749 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
3374d 5f8 7E 7E 18 18 
33751 5f9 18 18 18 78 
33755 5fa 70 00 00 00 
33759 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
3375d 5fc 66 66 66 66 
33761 5fd 66 66 66    | 	byte	$66[7]
33764 5fe 7E 7C 00 00 
33768 5ff 00 00 00 00 
3376c 600 00 66 66 66 
33770 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
33774 602 18 18 00 00 
33778 603 00 00 00 00 
3377c 604 00 C6 C6 D6 
33780 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
33784 606 C6 82 00 00 
33788 607 00 00 00 00 
3378c 608 00 66 66 3C 
33790 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
33794 60a 66 66 00 00 
33798 60b 00 00 00 00 
3379c 60c 00 66 66 66 
337a0 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
337a4 60e 7C 60 7E 3E 
337a8 60f 00 00 00 00 
337ac 610 00 7E 7E 30 
337b0 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
337b4 612 7E 7E 00 00 
337b8 613 00 00 30 18 
337bc 614 18 18 18 0C 
337c0 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
337c4 616 18 30 00 00 
337c8 617 00 00 18 18 
337cc 618 18 18 18 18 
337d0 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
337d4 61a 18 18 00 00 
337d8 61b 00 00 0C 18 
337dc 61c 18 18 18 30 
337e0 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
337e4 61e 18 0C 00 00 
337e8 61f 00 00 6C 7E 
337ec 620 36 00 00 00 
337f0 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
337f4 622 00 00 00 00 
337f8 623 00 00 00 00 
337fc 624 00          | 	byte	$00[9]
337fd 624 18 18 18 18 
33801 625 18 18 00 00 
33805 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
33808 627             | 'amiga_font     file "amigafont.def"
33808 627 00 6C FE FE 
3380c 628 7C 38 10 00 
33810 629 18 18 18 F8 
33814 62a F8 18 18 18 | a8_font        file "atari8.fnt"
33818 62b C0 C0 C0 C0 
3381c 62c C0 C0 C0 C0 | 	byte	$c0[8]
33820 62d 18 18 18 1F 
33824 62e 1F 00 00 00 
33828 62f 18 18 18 1F 
3382c 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
33830 631 00 00 00 1F 
33834 632 1F 18 18 18 
33838 633 C0 E0 70 38 
3383c 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
33840 635 03 07 0E 1C 
33844 636 38 70 E0 C0 
33848 637 80 C0 E0 F0 
3384c 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
33850 639 00 00 00 00 
33854 63a F0 F0 F0 F0 
33858 63b 01 03 07 0F 
3385c 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
33860 63d F0 F0 F0 F0 
33864 63e 00 00 00 00 
33868 63f 0F 0F 0F 0F 
3386c 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
33870 641 FF FF 00 00 
33874 642 00 00 00 00 
33878 643 00 00 00 00 
3387c 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
33880 645 00 00 00 00 
33884 646 0F 0F 0F 0F 
33888 647 00 38 38 EE 
3388c 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
33890 649 00 00 00 F8 
33894 64a F8 18 18 18 
33898 64b 00 00 00 FF 
3389c 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
338a0 64d 18 18 18 FF 
338a4 64e FF 18 18 18 
338a8 64f 00 00 3C 7E 
338ac 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
338b0 651 00 00 00 00 
338b4 652 FF FF FF FF 
338b8 653 03 03 03 03 
338bc 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
338c0 655 00 00 00 FF 
338c4 656 FF 18 18 18 
338c8 657 18 18 18 FF 
338cc 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
338d0 659 0F 0F 0F 0F 
338d4 65a 0F 0F 0F 0F | 	byte	$0f[8]
338d8 65b 18 18 18 F8 
338dc 65c F8 00 00 00 
338e0 65d 1E 06 1E 06 
338e4 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
338e8 65f 00 18 3C 7E 
338ec 660 18 18 18 00 
338f0 661 00 18 18 18 
338f4 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
338f8 663 00 18 0C 7E 
338fc 664 0C 18 00 00 
33900 665 00 18 30 7E 
33904 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
33908 667 00 00 00 00 
3390c 668 00 00 00 00 
33910 669 00          | 	byte	$00[9]
33911 669 18 18 18 18 
33915 66a 00 18 00 00 
33919 66b 66 66 66 00 
3391d 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
33921 66d 66 FF 66 66 
33925 66e FF 66 00 18 
33929 66f 7C 06 3C 60 
3392d 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
33931 671 66 36 18 0C 
33935 672 66 62 00 38 
33939 673 6C 38 1C F6 
3393d 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
33941 675 18 18 18 00 
33945 676 00 00 00 00 
33949 677 70 38 18 18 
3394d 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
33951 679 0E 1C 18 18 
33955 67a 1C 0E 00 00 
33959 67b 66 3C FF 3C 
3395d 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
33961 67d 18 18 7E 18 
33965 67e 18 00 00 00 
33969 67f 00 00 00 00 
3396d 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
33971 681 00 00 7E 00 
33975 682 00 00 00 00 
33979 683 00 00 00 00 
3397d 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
33981 685 60 30 18 0C 
33985 686 06 02 00 00 
33989 687 3C 66 76 6E 
3398d 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
33991 689 18 1C 18 18 
33995 68a 18 7E 00 00 
33999 68b 3C 66 30 18 
3399d 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
339a1 68d 7E 30 18 30 
339a5 68e 66 3C 00 00 
339a9 68f 30 38 3C 36 
339ad 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
339b1 691 7E 06 3E 60 
339b5 692 66 3C 00 00 
339b9 693 3C 06 3E 66 
339bd 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
339c1 695 7E 60 30 18 
339c5 696 0C 0C 00 00 
339c9 697 3C 66 3C 66 
339cd 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
339d1 699 3C 66 7C 60 
339d5 69a 30 1C 00 00 
339d9 69b 00 18 18 00 
339dd 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
339e1 69d 00 18 18 00 
339e5 69e 18 18 0C 60 
339e9 69f 30 18 0C 18 
339ed 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
339f1 6a1 00 7E 00 00 
339f5 6a2 7E 00 00 06 
339f9 6a3 0C 18 30 18 
339fd 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
33a01 6a5 3C 66 30 18 
33a05 6a6 00 18 00 00 
33a09 6a7 3C 66 76 76 
33a0d 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
33a11 6a9 18 3C 66 66 
33a15 6aa 7E 66 00 00 
33a19 6ab 3E 66 3E 66 
33a1d 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
33a21 6ad 3C 66 06 06 
33a25 6ae 66 3C 00 00 
33a29 6af 1E 36 66 66 
33a2d 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
33a31 6b1 7E 06 3E 06 
33a35 6b2 06 7E 00 00 
33a39 6b3 7E 06 3E 06 
33a3d 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
33a41 6b5 7C 06 06 76 
33a45 6b6 66 7C 00 00 
33a49 6b7 66 66 7E 66 
33a4d 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
33a51 6b9 7E 18 18 18 
33a55 6ba 18 7E 00 00 
33a59 6bb 60 60 60 60 
33a5d 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
33a61 6bd 66 36 1E 1E 
33a65 6be 36 66 00 00 
33a69 6bf 06 06 06 06 
33a6d 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
33a71 6c1 C6 EE FE D6 
33a75 6c2 C6 C6 00 00 
33a79 6c3 66 6E 7E 7E 
33a7d 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
33a81 6c5 3C 66 66 66 
33a85 6c6 66 3C 00 00 
33a89 6c7 3E 66 66 3E 
33a8d 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
33a91 6c9 3C 66 66 66 
33a95 6ca 36 6C 00 00 
33a99 6cb 3E 66 66 3E 
33a9d 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
33aa1 6cd 3C 06 3C 60 
33aa5 6ce 60 3C 00 00 
33aa9 6cf 7E 18 18 18 
33aad 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
33ab1 6d1 66 66 66 66 
33ab5 6d2 66          | 	byte	$66[5]
33ab6 6d2 7E 00 00 66 
33aba 6d3 66 66 66 3C 
33abe 6d4 18 00 00 C6 
33ac2 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
33ac6 6d6 C6 00 00 66 
33aca 6d7 66 3C 3C 66 
33ace 6d8 66 00 00 66 
33ad2 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
33ad6 6da 18 00 00 7E 
33ada 6db 30 18 0C 06 
33ade 6dc 7E 00 00 78 
33ae2 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
33ae6 6de 78 00 00 02 
33aea 6df 06 0C 18 30 
33aee 6e0 60 00 00 1E 
33af2 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
33af6 6e2 1E 00 00 10 
33afa 6e3 38 6C C6 00 
33afe 6e4 00 00 00 00 
33b02 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
33b06 6e6 FF 00 00 18 
33b0a 6e7 3C 7E 7E 3C 
33b0e 6e8 18 00 00 00 
33b12 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
33b16 6ea 7C 00 00 06 
33b1a 6eb 06 3E 66 66 
33b1e 6ec 3E 00 00 00 
33b22 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
33b26 6ee 3C 00 00 60 
33b2a 6ef 60 7C 66 66 
33b2e 6f0 7C 00 00 00 
33b32 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
33b36 6f2 3C 00 00 70 
33b3a 6f3 18 7C 18 18 
33b3e 6f4 18 00 00 00 
33b42 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
33b46 6f6 60 3E 00 06 
33b4a 6f7 06 3E 66 66 
33b4e 6f8 66 00 00 18 
33b52 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
33b56 6fa 3C 00 00 60 
33b5a 6fb 00 60 60 60 
33b5e 6fc 60 3C 00 06 
33b62 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
33b66 6fe 66 00 00 1C 
33b6a 6ff 18 18 18 18 
33b6e 700 3C 00 00 00 
33b72 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
33b76 702 C6 00 00 00 
33b7a 703 3E 66 66 66 
33b7e 704 66 00 00 00 
33b82 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
33b86 706 3C 00 00 00 
33b8a 707 3E 66 66 3E 
33b8e 708 06 06 00 00 
33b92 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
33b96 70a 60 60 00 00 
33b9a 70b 3E 66 06 06 
33b9e 70c 06 00 00 00 
33ba2 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
33ba6 70e 3E 00 00 18 
33baa 70f 7E 18 18 18 
33bae 710 70 00 00 00 
33bb2 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
33bb6 712 7C 00 00 00 
33bba 713 66 66 66 3C 
33bbe 714 18 00 00 00 
33bc2 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
33bc6 716 6C 00 00 00 
33bca 717 66 3C 18 3C 
33bce 718 66 00 00 00 
33bd2 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
33bd6 71a 30 1E 00 00 
33bda 71b 7E 30 18 0C 
33bde 71c 7E 00 00 18 
33be2 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
33be6 71e 3C 00 18 18 
33bea 71f 18 18 18 18 
33bee 720 18 18 00 7E 
33bf2 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
33bf6 722 60 00 10 18 
33bfa 723 1C 1E 1C 18 
33bfe 724 10 00 08 18 
33c02 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
33c06 726 08 00       | 	byte	$08, $00
33c08 727 00 00 00 00 
33c0c 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
33c0d 728 80 00 00 00 
33c11 729 00 80 00 00 
33c15 72a 80 80 00 00 
33c19 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
33c1d 72c 80 00 80 00 
33c21 72d 00 40 80 00 
33c25 72e AA AA AA 00 
33c29 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
33c2d 730 FF 00 00 00 
33c31 731 00 FF 00 00 
33c35 732 FF FF 00 00 
33c39 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
33c3d 734 FF 00 FF 00 
33c41 735 00 FF FF 00 
33c45 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
33c48 737 00 00 00 00 
33c4c 738 00          | ataripalette   file "ataripalettep2.def"
33c4d 738 11 11 11 00 
33c51 739 22 22 22 00 
33c55 73a 33 33 33 00 
33c59 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
33c5d 73c 55 55 55 00 
33c61 73d 66 66 66 00 
33c65 73e 77 77 77 00 
33c69 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
33c6d 740 99 99 99 00 
33c71 741 AA AA AA 00 
33c75 742 BB BB BB 00 
33c79 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
33c7d 744 DD DD DD 00 
33c81 745 EE EE EE 00 
33c85 746 FF FF FF 00 
33c89 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
33c8d 748 00 14 40 00 
33c91 749 00 1E 60 00 
33c95 74a 00 28 80 00 
33c99 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
33c9d 74c 00 3C BF 00 
33ca1 74d 00 46 DF 00 
33ca5 74e 00 50 FF 00 
33ca9 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
33cad 750 39 77 FF 00 
33cb1 751 55 8A FF 00 
33cb5 752 71 9E FF 00 
33cb9 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
33cbd 754 AA C5 FF 00 
33cc1 755 C6 D8 FF 00 
33cc5 756 E3 EC FF 00 
33cc9 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
33ccd 758 00 00 40 00 
33cd1 759 00 00 60 00 
33cd5 75a 00 00 80 00 
33cd9 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
33cdd 75c 00 00 BF 00 
33ce1 75d 00 00 DF 00 
33ce5 75e 00 00 FF 00 
33ce9 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
33ced 760 39 39 FF 00 
33cf1 761 55 55 FF 00 
33cf5 762 71 71 FF 00 
33cf9 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
33cfd 764 AA AA FF 00 
33d01 765 C6 C6 FF 00 
33d05 766 E3 E3 FF 00 
33d09 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
33d0d 768 20 00 40 00 
33d11 769 30 00 60 00 
33d15 76a 40 00 80 00 
33d19 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
33d1d 76c 60 00 BF 00 
33d21 76d 70 00 DF 00 
33d25 76e 80 00 FF 00 
33d29 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
33d2d 770 9C 39 FF 00 
33d31 771 AA 55 FF 00 
33d35 772 B8 71 FF 00 
33d39 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
33d3d 774 D5 AA FF 00 
33d41 775 E3 C6 FF 00 
33d45 776 F1 E3 FF 00 
33d49 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
33d4d 778 40 00 40 00 
33d51 779 60 00 60 00 
33d55 77a 80 00 80 00 
33d59 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
33d5d 77c BF 00 BF 00 
33d61 77d DF 00 DF 00 
33d65 77e FF 00 FF 00 
33d69 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
33d6d 780 FF 39 FF 00 
33d71 781 FF 55 FF 00 
33d75 782 FF 71 FF 00 
33d79 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
33d7d 784 FF AA FF 00 
33d81 785 FF C6 FF 00 
33d85 786 FF E3 FF 00 
33d89 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
33d8d 788 40 00 20 00 
33d91 789 60 00 30 00 
33d95 78a 80 00 40 00 
33d99 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
33d9d 78c BF 00 60 00 
33da1 78d DF 00 70 00 
33da5 78e FF 00 80 00 
33da9 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
33dad 790 FF 39 9C 00 
33db1 791 FF 55 AA 00 
33db5 792 FF 71 B8 00 
33db9 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
33dbd 794 FF AA D5 00 
33dc1 795 FF C6 E3 00 
33dc5 796 FF E3 F1 00 
33dc9 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
33dcd 798 40 00 00 00 
33dd1 799 60 00 00 00 
33dd5 79a 80 00 00 00 
33dd9 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
33ddd 79c BF 00 00 00 
33de1 79d DF 00 00 00 
33de5 79e FF 00 00 00 
33de9 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
33ded 7a0 FF 39 39 00 
33df1 7a1 FF 55 55 00 
33df5 7a2 FF 71 71 00 
33df9 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
33dfd 7a4 FF AA AA 00 
33e01 7a5 FF C6 C6 00 
33e05 7a6 FF E3 E3 00 
33e09 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
33e0d 7a8 40 10 00 00 
33e11 7a9 60 18 00 00 
33e15 7aa 80 20 00 00 
33e19 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
33e1d 7ac BF 30 00 00 
33e21 7ad DF 38 00 00 
33e25 7ae FF 40 00 00 
33e29 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
33e2d 7b0 FF 6A 39 00 
33e31 7b1 FF 80 55 00 
33e35 7b2 FF 95 71 00 
33e39 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
33e3d 7b4 FF BF AA 00 
33e41 7b5 FF D5 C6 00 
33e45 7b6 FF EA E3 00 
33e49 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
33e4d 7b8 40 20 00 00 
33e51 7b9 60 30 00 00 
33e55 7ba 80 40 00 00 
33e59 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
33e5d 7bc BF 60 00 00 
33e61 7bd DF 70 00 00 
33e65 7be FF 80 00 00 
33e69 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
33e6d 7c0 FF 9C 39 00 
33e71 7c1 FF AA 55 00 
33e75 7c2 FF B8 71 00 
33e79 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
33e7d 7c4 FF D5 AA 00 
33e81 7c5 FF E3 C6 00 
33e85 7c6 FF F1 E3 00 
33e89 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
33e8d 7c8 40 30 00 00 
33e91 7c9 60 48 00 00 
33e95 7ca 80 60 00 00 
33e99 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
33e9d 7cc BF 90 00 00 
33ea1 7cd DF A8 00 00 
33ea5 7ce FF C0 00 00 
33ea9 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
33ead 7d0 FF CE 39 00 
33eb1 7d1 FF D5 55 00 
33eb5 7d2 FF DC 71 00 
33eb9 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
33ebd 7d4 FF EA AA 00 
33ec1 7d5 FF F1 C6 00 
33ec5 7d6 FF F8 E3 00 
33ec9 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
33ecd 7d8 30 40 00 00 
33ed1 7d9 48 60 00 00 
33ed5 7da 60 80 00 00 
33ed9 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
33edd 7dc 90 BF 00 00 
33ee1 7dd A8 DF 00 00 
33ee5 7de C0 FF 00 00 
33ee9 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
33eed 7e0 CE FF 39 00 
33ef1 7e1 D5 FF 55 00 
33ef5 7e2 DC FF 71 00 
33ef9 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
33efd 7e4 EA FF AA 00 
33f01 7e5 F1 FF C6 00 
33f05 7e6 F8 FF E3 00 
33f09 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
33f0d 7e8 00 40 00 00 
33f11 7e9 00 60 00 00 
33f15 7ea 00 80 00 00 
33f19 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
33f1d 7ec 00 BF 00 00 
33f21 7ed 00 DF 00 00 
33f25 7ee 00 FF 00 00 
33f29 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
33f2d 7f0 39 FF 39 00 
33f31 7f1 55 FF 55 00 
33f35 7f2 71 FF 71 00 
33f39 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
33f3d 7f4 AA FF AA 00 
33f41 7f5 C6 FF C6 00 
33f45 7f6 E3 FF E3 00 
33f49 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
33f4d 7f8 00 40 14 00 
33f51 7f9 00 60 1E 00 
33f55 7fa 00 80 28 00 
33f59 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
33f5d 7fc 00 BF 3C 00 
33f61 7fd 00 DF 46 00 
33f65 7fe 00 FF 50 00 
33f69 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
33f6d 800 39 FF 77 00 
33f71 801 55 FF 8A 00 
33f75 802 71 FF 9E 00 
33f79 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
33f7d 804 AA FF C5 00 
33f81 805 C6 FF D8 00 
33f85 806 E3 FF EC 00 
33f89 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
33f8d 808 00 40 28 00 
33f91 809 00 60 3C 00 
33f95 80a 00 80 50 00 
33f99 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
33f9d 80c 00 BF 78 00 
33fa1 80d 00 DF 8C 00 
33fa5 80e 00 FF A0 00 
33fa9 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
33fad 810 39 FF B5 00 
33fb1 811 55 FF C0 00 
33fb5 812 71 FF CA 00 
33fb9 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
33fbd 814 AA FF DF 00 
33fc1 815 C6 FF EA 00 
33fc5 816 E3 FF F4 00 
33fc9 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
33fcd 818 00 40 40 00 
33fd1 819 00 60 60 00 
33fd5 81a 00 80 80 00 
33fd9 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
33fdd 81c 00 BF BF 00 
33fe1 81d 00 DF DF 00 
33fe5 81e 00 FF FF 00 
33fe9 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
33fed 820 39 FF FF 00 
33ff1 821 55 FF FF 00 
33ff5 822 71 FF FF 00 
33ff9 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
33ffd 824 AA FF FF 00 
34001 825 C6 FF FF 00 
34005 826 E3 FF FF 00 
34009 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3400d 828 00 28 40 00 
34011 829 00 3C 60 00 
34015 82a 00 50 80 00 
34019 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3401d 82c 00 78 BF 00 
34021 82d 00 8C DF 00 
34025 82e 00 A0 FF 00 
34029 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3402d 830 39 B5 FF 00 
34031 831 55 C0 FF 00 
34035 832 71 CA FF 00 
34039 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3403d 834 AA DF FF 00 
34041 835 C6 EA FF 00 
34045 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
34048 837             | 
34048 837             | '**********************************************************************************
34048 837             | '
34048 837             | '        Timings and colors definitions
34048 837             | '
34048 837             | '**********************************************************************************
34048 837             | 
34048 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
34048 837 08 00 00 00 
3404c 838 3C 00 00 00 
34050 839 08 00 00 00 
34054 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         336956522,   %1_101101__11_0000_0110__1111_1011,   600,        0,     192, 0, 0
34058 83b 07 00 00 00 
3405c 83c 04 00 00 00 
34060 83d 01 00 00 00 
34064 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
34068 83f 58 02 00 00 
3406c 840 6A 8C 15 14 
34070 841 FB 06 B7 01 
34074 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $58, $02, $00, $00
34078 843 00 00 00 00 
3407c 844 C0 00 00 00 
34080 845 00 00 00 00 
34084 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34088 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
34088 847 00 75 C7 97 
3408c 848 27 47 F6 0A 
34090 849 05 79 CB 9B 
34094 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
34098 84b             | 
34098 84b             | ''--------  Initialization  ----------------------------------------------------------------
34098 84b             | 
34098 84b 28 0C 64 FD | hdmi            setq    #6
3409c 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
340a0 84d 28 10 64 FD |                 setq    #8
340a4 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
340a8 84f             | 
340a8 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
340ac 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
340b0 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
340b4 852 D6 C6 01 F1 |                 add     t1,hbase
340b8 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
340bc 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
340c0 855 7B 0B 80 5F 
340c4 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
340c8 857 66 66 86 FF 
340cc 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
340d0 859             | '
340d0 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
340d4 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
340d8 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
340dc 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
340e0 85d             | 
340e0 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
340e4 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
340e8 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
340ec 860             | 
340ec 860             | ''--------  frame rendering main loop  ---------------------------------------------------
340ec 860             | 
340ec 860 28 06 64 FD | p101            setq 	#3
340f0 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
340f4 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
340f8 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
340fc 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
34100 865 00 A0 05 F6 |                 mov     dlinum, #0
34104 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
34108 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3410c 868             | 
3410c 868             | 
3410c 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
34110 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
34114 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
34118 86b             |                 
34118 86b             | 
34118 86b             | 
34118 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
34118 86b             |   
34118 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3411c 86c 29 FE 65 3D |          if_nc  setq2   #255
34120 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
34124 86e             | 
34124 86e             | '' -----   up porch (before the picture)
34124 86e             | 
34124 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
34128 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
3412c 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
34130 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
34134 872             |  
34134 872             |    
34134 872             |  
34134 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
34138 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
3413c 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
34140 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
34144 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
34148 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3414c 878             | 
3414c 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
34150 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
34154 87a 48 00 B0 FD | 		call    #dli
34158 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
3415c 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
34160 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
34164 87e             |                 	
34164 87e             |                 
34164 87e             | 
34164 87e             |  
34164 87e             | '' ------- the main screen drawing starts here
34164 87e             | 
34164 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
34168 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3416c 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
34170 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
34174 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
34178 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3417c 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
34180 885             |               
34180 885             | 
34180 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
34184 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
34188 887             | 
34188 887             | ' ---------------- All visible lines displayed now, start vblank  
34188 887             | 
34188 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3418c 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
34190 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
34194 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
34198 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3419c 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
341a0 88d             | 
341a0 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
341a0 88d             | 
341a0 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
341a0 88d             | 
341a0 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
341a4 88e             | 
341a4 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
341a8 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
341ac 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
341b0 891             | 
341b0 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
341b4 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
341b8 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
341bc 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
341c0 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
341c4 896             | 
341c4 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
341c8 897 DD C6 41 F8 |                 getnib  t1,dl,#0
341cc 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
341d0 899 70 00 90 AD |     if_z        jmp     #preload
341d4 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
341d8 89b 94 00 90 AD |     if_z        jmp     #preload2
341dc 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
341e0 89d 0C 00 90 AD |     if_z        jmp     #p390
341e4 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
341e8 89f 28 00 90 AD |     if_z        jmp     #p391  
341ec 8a0             | 
341ec 8a0 2D 00 64 FD | p308            ret
341f0 8a1             |    
341f0 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
341f4 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
341f8 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
341fc 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
34200 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
34204 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
34208 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3420c 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
34210 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
34214 8aa             |  
34214 8aa             | '' --------  Reload palette. To do 
34214 8aa             | 
34214 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
34218 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3421c 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
34220 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
34224 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
34228 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
3422c 8b0 70 FF 9F FD |         	jmp     #dli                
34230 8b1             |       
34230 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
34230 8b1             | 
34230 8b1             | 
34230 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
34230 8b1             | 
34230 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
34234 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
34238 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3423c 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
34240 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
34244 8b6             |         
34244 8b6             | '' -------------- Preload a line from PSRAM        
34244 8b6             |         
34244 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
34248 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3424c 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
34250 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
34254 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
34258 8bb             | 
34258 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3425c 8bc 32 B7 01 F6 |                 mov     buf2,a1024
34260 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
34264 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
34268 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3426c 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
34270 8c1             |  
34270 8c1             |  
34270 8c1             | preload2      '  incmod  dlinum,#3
34270 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
34274 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
34278 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3427c 8c4 28 02 64 FD |                 setq	#1
34280 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
34284 8c6             |                 
34284 8c6             | 
34284 8c6             | '' -------------- Draw sprites
34284 8c6             | 
34284 8c6 CF 5C 02 F6 | sprite          mov t8,frames
34288 8c7 10 5C 0E F5 | 		and t8,#16 wz
3428c 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
34290 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
34294 8ca             | 		
34294 8ca             | 
34294 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
34298 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3429c 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
342a0 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
342a4 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
342a8 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
342ac 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
342b0 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
342b4 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
342b8 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
342bc 8d4 01 52 86 F1 |                 sub     sprite_h,#1
342c0 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
342c4 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
342c8 8d7             | 
342c8 8d7             | 
342c8 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
342cc 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
342d0 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
342d4 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
342d8 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
342dc 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
342e0 8dd 00 5E 06 F6 |                 mov 	t9,#0
342e4 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
342e8 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
342ec 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
342f0 8e1             |      
342f0 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
342f4 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
342f8 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
342fc 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
34300 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
34304 8e6             |                 
34304 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
34308 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3430c 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
34310 8e9             |   		
34310 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
34314 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
34318 8eb             | 
34318 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3431c 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
34320 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
34324 8ee             |  
34324 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
34328 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3432c 8f0 10 00 90 CD |      if_c 	jmp     #p899		
34330 8f1             | 	
34330 8f1             | 	
34330 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
34334 8f2 28 CD 01 F1 | 		add	t4,sprite_w
34338 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3433c 8f4             | 
3433c 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
34340 8f5             | 
34340 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
34344 8f6 01 58 86 F1 | 	 	sub     t6,#1
34348 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3434c 8f8             | 
3434c 8f8 28 58 62 FD |                 setq   	t6
34350 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
34354 8fa 28 5D 02 F6 |                 mov t8,sprite_w
34358 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3435c 8fc 24 00 90 AD |         if_z    jmp #p898
34360 8fd             |          
34360 8fd             |         
34360 8fd 70 5F 06 F6 |                 mov  t9,#368
34364 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
34368 8ff             | 
34368 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3436c 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
34370 901 FF FF 7F FF 
34374 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
34378 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3437c 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
34380 905 2D 01 00 F5 |                 and 0-0, t7
34384 906             |                
34384 906             | 
34384 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
34388 907 E5 E0 7A FA |                 wmlong 368,t3				
3438c 908             |                 
3438c 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
34390 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
34394 90a 2D 00 64 FD |                 ret
34398 90b             | 	
34398 90b             | 	
34398 90b             |                
34398 90b             |  
34398 90b             | '' -------------- Graphics line ------------------------------------------------------------
34398 90b             |  
34398 90b             | 
34398 90b             | '' consts and vars
34398 90b             | 
34398 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3439c 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
343a0 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
343a4 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
343a8 90f             | 
343a8 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
343ac 910             | 
343ac 910             | '------ these longs will be set by setmode function
343ac 910             | 
343ac 910 00 00 00 00 | m_bs            long    0        'blanks before sync
343b0 911 00 00 00 00 | m_sn            long    0        'sync
343b4 912 00 00 00 00 | m_bv            long    0        'blanks before visible
343b8 913 00 00 00 00 | m_vi            long    0        'visible pixels #
343bc 914             | 'm_border        long    0        'left/right borders
343bc 914 00 00 00 00 | i_upporch       long    0        'up porch lines
343c0 915 00 00 00 00 | i_vsync         long    0        'vsync lines
343c4 916 00 00 00 00 | i_downporch     long    0        'down porch lines
343c8 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
343cc 918 00 00 00 00 | i_totalvis      long    0
343d0 919             | 
343d0 919             | '-------------------------------------
343d0 919             |  
343d0 919 00 00 00 00 | linenum         long    0
343d4 91a 00 00 00 00 | frames          long    0
343d8 91b 00 00 00 00 | dlinum long 0
343dc 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
343e0 91d             | 
343e0 91d 00 00 00 00 | vblankptr       long    0
343e4 91e 00 00 00 00 | modeptr         long    0
343e8 91f 00 00 00 00 | paletteptr      long    0
343ec 920 00 00 00 00 | dlptr           long    0
343f0 921 01 00 00 00 | hbase           long    1
343f4 922 00 00 00 00 | mailbox         long    0
343f8 923 00 00 00 00 | spriteptr          long 0
343fc 924             | 
343fc 924 00 00 00 00 | cmd             long    0
34400 925 00 B0 07 00 | buf1            long    $80000-16384-4096
34404 926 00 04 00 00 | buf2            long    1024
34408 927 01 00 00 00 | dlptr2          long    1
3440c 928 01 00 00 00 | dl              long    1
34410 929             | 
34410 929 00 00 00 00 | buf1c long 0
34414 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
34418 92b 01 00 00 00 | framebuf2       long    1
3441c 92c 01 00 00 00 | hsync0          long    1
34420 92d 01 00 00 00 | hsync1          long    1
34424 92e             | 
34424 92e 01 00 00 00 | t1              long    1
34428 92f 00 00 00 00 | t2 long 0
3442c 930 00 00 00 00 | t3 long 0
34430 931 00 00 00 00 | t4 long 0
34434 932             | 
34434 932 00 00 00 00 | rcnt            long    0  'dl repeat count
34438 933 00 00 00 00 | rcnt2           long    0
3443c 934 00 00 00 00 | rcnt2a          long    0
34440 935 00 00 00 00 | roffset         long    0
34444 936 00 00 00 00 | rdl             long    0  'dl repeat line
34448 937 00 00 00 00 | dlc             long    0  'dl command
3444c 938             | 
3444c 938 FF FF FF FF | affffffff       long    $ffffffff
34450 939 00 00 00 00 | sprite1pointer long 0
34454 93a 00 00 00 00 | sprite1xy      long 0
34458 93b 00 00 00 00 | sprite1wh      long 0
3445c 93c 00 00 00 00 | sprite2pointer long 0
34460 93d 00 00 00 00 | sprite2xy      long 0
34464 93e 00 00 00 00 | sprite2wh      long 0
34468 93f 00 00 00 00 | sprite3pointer long 0
3446c 940 00 00 00 00 | sprite3xy      long 0
34470 941 00 00 00 00 | sprite3wh      long 0
34474 942 00 00 00 00 | sprite4pointer long 0
34478 943 00 00 00 00 | sprite4xy      long 0
3447c 944 00 00 00 00 | sprite4wh      long 0
34480 945 00 00 00 00 | sprite5pointer long 0
34484 946 00 00 00 00 | sprite5xy      long 0
34488 947 00 00 00 00 | sprite5wh      long 0
3448c 948 00 00 00 00 | sprite6pointer long 0
34490 949 00 00 00 00 | sprite6xy      long 0
34494 94a 00 00 00 00 | sprite6wh      long 0
34498 94b 00 00 00 00 | sprite7pointer long 0
3449c 94c 00 00 00 00 | sprite7xy      long 0
344a0 94d 00 00 00 00 | sprite7wh      long 0
344a4 94e 00 00 00 00 | sprite8pointer long 0
344a8 94f 00 00 00 00 | sprite8xy      long 0
344ac 950 00 00 00 00 | sprite8wh      long 0
344b0 951 00 00 00 00 | sprite9pointer long 0
344b4 952 00 00 00 00 | sprite9xy      long 0
344b8 953 00 00 00 00 | sprite9wh      long 0
344bc 954 00 00 00 00 | sprite10pointer long 0
344c0 955 00 00 00 00 | sprite10xy      long 0
344c4 956 00 00 00 00 | sprite10wh      long 0
344c8 957 00 00 00 00 | sprite11pointer long 0
344cc 958 00 00 00 00 | sprite11xy      long 0
344d0 959 00 00 00 00 | sprite11wh      long 0
344d4 95a 00 00 00 00 | sprite12pointer long 0
344d8 95b 00 00 00 00 | sprite12xy      long 0
344dc 95c 00 00 00 00 | sprite12wh      long 0
344e0 95d 00 00 00 00 | sprite13pointer long 0
344e4 95e 00 00 00 00 | sprite13xy      long 0
344e8 95f 00 00 00 00 | sprite13wh      long 0
344ec 960 00 00 00 00 | sprite14pointer long 0
344f0 961 00 00 00 00 | sprite14xy      long 0
344f4 962 00 00 00 00 | sprite14wh      long 0
344f8 963 00 00 00 00 | sprite15pointer long 0
344fc 964 00 00 00 00 | sprite15xy      long 0
34500 965 00 00 00 00 | sprite15wh      long 0
34504 966 00 00 00 00 | sprite16pointer long 0
34508 967 00 00 00 00 | sprite16xy      long 0
3450c 968 00 00 00 00 | sprite16wh      long 0
34510 969 00 00 00 00 | sprite17pointer long 0
34514 96a 00 00 00 00 | sprite17xy      long 0
34518 96b 00 00 00 00 | sprite17wh      long 0
3451c 96c 00 00 00 00 | sprite18pointer long 0
34520 96d 00 00 00 00 | sprite18xy      long 0
34524 96e 00 00 00 00 | sprite18wh      long 0
34528 96f 00 00 00 00 | spritenum long 0
3452c 970             | 
3452c 970 00 00 00 00 | spriteline long 0
34530 971 84 03 00 00 | sprite_x long 900
34534 972 00 00 00 00 | sprite_y long 0
34538 973 10 00 00 00 | sprite_w long 16
3453c 974 40 00 00 00 | sprite_h long 64
34540 975 00 00 00 00 | l2 long 0
34544 976 00 00 00 00 | t5 long 0
34548 977 00 00 00 00 | t6 long 0
3454c 978 00 00 00 00 | t7 long 0
34550 979 00 00 00 00 | t8 long 0
34554 97a 00 00 00 00 | t9 long 0
34558 97b 00 00 00 00 | preloadaddr long 0
3455c 97c 00 00 00 00 | preloadlineaddr long 0
34560 97d 00 04 00 00 | a1024 long 1024
34564 97e             | 
34564 97e E0 03 00 00 | aa long 992
34568 97f FF 03 00 00 | a1023 long 1023
3456c 980 00 10 00 00 | a4096 long 4096
34570 981             |  fit 368
34570 981             | _psram_spin2_dat_
34570 981 00 00 00 00 
      ...             
34668 9bf 00 00 00 00 
3466c 9c0 00 00 00 00 |     listdata long 0[8*8]
34670 9c1             |             orgh
34670                 | 
34670                 | ' driver state
34670     FF FF FF FF | drivercog   long    -1  ' COG id of driver
34674     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
34678                 | 
34678                 | ' delay profile
34678     07 00 00 00 
3467c     00 CF 7B 05 
34680     80 D1 F0 08 
34684     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
34688     80 C4 60 0F 
3468c     80 39 7A 12 
34690     40 2D D9 13 
34694     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
34698                 | 
34698                 | ' data to be passed to driver when starting it
34698                 | startupData
34698     00 00 00 00 |     long    0           ' current frequency
3469c     00 00 00 00 |     long    FLAGS       ' optional flags for driver
346a0     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
346a4     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
346a8     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
346ac     B8 46 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
346b0     38 47 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
346b4     58 47 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
346b8                 | 
346b8                 | ' data for memory
346b8                 | deviceData
346b8                 |     ' 16 bank parameters follow (16MB per bank)
346b8     00 00 00 00 
      ...             
346f0     00 00 00 00 
346f4     00 00 00 00 |     long    0[16]                               ' banks 0-15
346f8                 |     ' 16 banks of pin parameters follow
346f8     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
346fc     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
34700     FF FF FF FF 
      ...             
34730     FF FF FF FF 
34734     FF FF FF FF |     long    -1[14]                              ' banks 2-15
34738                 | 
34738                 | ' data for COG polling
34738                 | qosData 
34738     00 00 FF FF 
3473c     00 00 FF FF 
34740     00 00 FF FF 
34744     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
34748     00 00 FF FF 
3474c     00 00 FF FF 
34750     00 00 FF FF 
34754     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
34758                 |     
34758                 | ' mailbox storage
34758                 | 
34758                 | mailboxes
34758     00 00 00 00 
      ...             
347b0     00 00 00 00 
347b4     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
347b8                 | 	alignl
347b8                 | _psram16drv_spin2_dat_
347b8                 |                             orgh
347b8     00 00 00 00 
      ...             
347d0     00 00 00 00 
347d4     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
347d8                 | 
347d8                 | driver_start
347d8                 |                             org
347d8 000             | '..................................................................................................
347d8 000             | ' Memory layout for COG RAM once operational:
347d8 000             | '
347d8 000             | '  COG RAM address      Usage
347d8 000             | '  ---------------      ----
347d8 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
347d8 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
347d8 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
347d8 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
347d8 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
347d8 000             | '  ~$198-$1F3           State and register variables
347d8 000             | '
347d8 000             | ' Also during driver COG startup:
347d8 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
347d8 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
347d8 000             | '..................................................................................................
347d8 000             |                             
347d8 000             | ' Mailbox storage after vector initialization
347d8 000             | 
347d8 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
347dc 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
347e0 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
347e4 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
347e8 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
347ec 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
347f0 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
347f4 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
347f8 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
347fc 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
34800 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
34804 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
34808 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
3480c 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
34810 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
34814 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
34818 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
3481c 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
34820 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
34824 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
34828 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
3482c 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
34830 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
34834 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
34838 018             | 
34838 018             | ' Mailbox parameter addresses per COG once patched
34838 018             |                             
34838 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
3483c 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
34840 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
34844 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
34848 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3484c 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
34850 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
34854 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
34858 020             | 
34858 020             | '..................................................................................................
34858 020             | ' Per COG request and state setup and service branching
34858 020             |         
34858 020             | cog0                 
34858 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3485c 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
34860 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
34864 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
34868 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3486c 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34870 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
34874 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
34878 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3487c 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34880 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34884 02b 33 CA 63 FD |                             execf   request-0               'jump to service
34888 02c             | cog1                        
34888 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3488c 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
34890 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
34894 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
34898 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3489c 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
348a0 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
348a4 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
348a8 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
348ac 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
348b0 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
348b4 037 33 CA 63 FD |                             execf   request-0               'jump to service
348b8 038             | cog2                         
348b8 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
348bc 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
348c0 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
348c4 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
348c8 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
348cc 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
348d0 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
348d4 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
348d8 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
348dc 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
348e0 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
348e4 043 33 CA 63 FD |                             execf   request-0               'jump to service
348e8 044             | cog3                        
348e8 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
348ec 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
348f0 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
348f4 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
348f8 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
348fc 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34900 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
34904 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
34908 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3490c 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34910 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34914 04f 33 CA 63 FD |                             execf   request-0               'jump to service
34918 050             | cog4                        
34918 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3491c 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
34920 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
34924 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
34928 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3492c 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34930 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
34934 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
34938 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3493c 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34940 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34944 05b 33 CA 63 FD |                             execf   request-0               'jump to service
34948 05c             | cog5                        
34948 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3494c 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
34950 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
34954 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
34958 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3495c 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34960 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
34964 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
34968 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3496c 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34970 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
34974 067 33 CA 63 FD |                             execf   request-0               'jump to service
34978 068             | cog6                        
34978 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3497c 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
34980 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
34984 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
34988 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3498c 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34990 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
34994 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
34998 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3499c 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
349a0 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
349a4 073 33 CA 63 FD |                             execf   request-0               'jump to service
349a8 074             | cog7                        
349a8 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
349ac 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
349b0 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
349b4 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
349b8 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
349bc 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
349c0 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
349c4 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
349c8 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
349cc 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
349d0 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
349d4 07f 33 CA 63 FD |                             execf   request-0               'jump to service
349d8 080             |                             fit     128
349d8 080             | 
349d8 080             |                             fit     128
349d8 080             | pad                         long    0[128-$]                'align init code to $80
349d8 080             | 
349d8 080             | '..................................................................................................
349d8 080             | 
349d8 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
349d8 080             | 
349d8 080             | init                        
349d8 080             |                             ' get driver scratch long address in hub
349d8 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
349dc 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
349e0 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
349e4 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
349e8 084             |                     
349e8 084             |                             ' read in the additional LUT RAM code
349e8 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
349ec 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
349f0 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
349f4 087             | 
349f4 087             |                             ' read the startup parameters
349f4 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
349f8 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
349fc 089             | 
349fc 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
349fc 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
34a00 08a             | 
34a00 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
34a04 08b 01 00 00 5F 
34a08 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
34a0c 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
34a10 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
34a14 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
34a18 090             | 
34a18 090             |                             ' setup data pin modes and data bus pin group in streamer commands
34a18 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
34a1c 091 01 00 00 FF 
34a20 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
34a24 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
34a28 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
34a2c 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
34a30 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
34a34 097 08 DE 47 F5 |                             or      a, #8
34a38 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
34a3c 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
34a40 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
34a44 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
34a48 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
34a4c 09d 01 DE 07 F1 |                             add     a, #1
34a50 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
34a54 09f             |  
34a54 09f             |                             ' setup device control pin states
34a54 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
34a58 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
34a5c 0a1 01 00 00 FF 
34a60 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
34a64 0a3             | 
34a64 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
34a68 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
34a6c 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
34a70 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
34a74 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
34a78 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
34a7c 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
34a80 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
34a84 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
34a88 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
34a8c 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
34a90 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
34a94 0af             | pinloop
34a94 0af             |                             ' generate minimum CE high time before access
34a94 0af A1 07 00 FF 
34a98 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
34a9c 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
34aa0 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
34aa4 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
34aa8 0b4 1F DE 63 FD |                             waitx   a                       'delay
34aac 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
34ab0 0b6             | 
34ab0 0b6             |                             ' setup the COG mailboxes and addresses 
34ab0 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
34ab4 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
34ab8 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
34abc 0b9             | 
34abc 0b9 28 2E 64 FD |                             setq    #24-1
34ac0 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
34ac4 0bb             | 
34ac4 0bb             |                             ' setup the polling loop for active COGs 
34ac4 0bb 01 C2 63 FD |                             cogid   id
34ac8 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
34acc 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
34ad0 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
34ad4 0bf 0A F0 07 F6 |                             mov     ptra, #10
34ad8 0c0 E1 F1 03 FA |                             mul     ptra, id
34adc 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
34ae0 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
34ae4 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
34ae8 0c4 03 C2 07 FA |                             mul     id, #3
34aec 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
34af0 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
34af4 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
34af8 0c8 D8 01 B0 FD |                             call    #reloadcogs
34afc 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
34b00 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
34b04 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
34b04 0cb D8 E5 B7 F9 |                             setd    d, #addr1
34b08 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
34b0c 0cd 08 04 DC FC |                             rep     #2, #8
34b10 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
34b14 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
34b18 0d0             | 
34b18 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
34b18 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
34b18 0d0 01 C2 63 FD |                             cogid   id
34b1c 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
34b20 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
34b24 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
34b28 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
34b2c 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
34b30 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
34b34 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
34b38 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
34b3c 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
34b40 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
34b44 0db 3F E4 A7 F9 |                             alti    d, #%111_111
34b48 0dc 00 00 00 F6 |                             mov     0-0, 0-0
34b4c 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
34b50 0de A5 E5 03 F1 |                             add     d, const512
34b54 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
34b58 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
34b5c 0e1 00 00 00 F6 |                             mov     0-0, 0-0
34b60 0e2             |                             
34b60 0e2             |                             ' setup register values for control vector loop setup after we return
34b60 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
34b64 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
34b68 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
34b6c 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
34b70 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
34b74 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
34b78 0e8 D0 C3 8F F9 |                             altd    id, #id0
34b7c 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
34b80 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
34b84 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
34b88 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
34b8c 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
34b90 0ee             |  
34b90 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
34b94 0ef 07 CA 07 F5 |                             and     request, #7
34b98 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
34b9c 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
34ba0 0f2             |                             fit     $100                    'ensure all init code fits this space
34ba0 0f2             | 
34ba0 0f2             |                             fit     $100                    'ensure all init code fits this space
34ba0 0f2             | 
34ba0 0f2 00 00 00 00 
      ...             
34bd0 0fe 00 00 00 00 
34bd4 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
34bd8 100             | 
34bd8 100             | '..................................................................................................
34bd8 100             | ' Error result handling and COG notification of request completion
34bd8 100             | 
34bd8 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
34bdc 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
34be0 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
34be4 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
34be8 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
34bec 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
34bf0 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
34bf4 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
34bf8 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
34bfc 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
34c00 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
34c04 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
34c08 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
34c0c 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
34c10 10e             | ' Poller re-starts here after a COG is serviced
34c10 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
34c14 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
34c18 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
34c1c 111             | ' Main dynamic polling loop repeats until a request arrives
34c1c 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
34c20 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
34c24 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
34c28 114             | 
34c28 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
34c2c 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
34c30 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
34c34 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
34c38 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
34c3c 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
34c40 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
34c44 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
34c48 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
34c4c 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
34c50 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
34c54 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
34c58 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
34c5c 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
34c60 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
34c64 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
34c68 124             | 
34c68 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
34c6c 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
34c70 126             |  
34c70 126             | '..................................................................................................
34c70 126             | ' List handler                               
34c70 126             | 
34c70 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
34c74 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
34c78 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
34c7c 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
34c80 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
34c84 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
34c88 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
34c8c 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
34c90 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
34c94 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
34c98 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
34c9c 131 33 00 60 FD |                             execf   0-0                     'process the request 
34ca0 132             | 
34ca0 132             | '..................................................................................................
34ca0 132             | ' Restoring per COG state and resuming where we left off
34ca0 132             | 
34ca0 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
34ca4 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
34ca8 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
34cac 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
34cb0 136 D8 CB FB F8 |                             getbyte request, addr1, #3
34cb4 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
34cb8 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
34cbc 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
34cc0 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
34cc4 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
34cc8 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
34ccc 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
34cd0 13e             |                    
34cd0 13e             | '..................................................................................................
34cd0 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
34cd0 13e             | 
34cd0 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
34cd4 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
34cd8 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
34cdc 141 D0 DF B7 F9 |                             setd    a, #id0
34ce0 142 D8 DF BF F9 |                             sets    a, #addr1
34ce4 143 FE FF FF FF 
34ce8 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
34cec 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
34cf0 146 3F DE A7 F9 |                             alti    a, #%111_111 
34cf4 147 00 00 F0 F9 |                             muxq    0-0, 0-0
34cf8 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
34cfc 149 01 E2 63 FD |                             cogid   c
34d00 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
34d04 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
34d08 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
34d0c 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
34d10 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
34d14 14f 00 E0 03 F6 |                             mov     b, 0-0
34d18 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
34d1c 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
34d20 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
34d24 153 0C 00 90 AD |             if_z            jmp     #excluded               
34d28 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
34d2c 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
34d30 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
34d34 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
34d38 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
34d3c 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
34d40 15a             | 
34d40 15a             | 'determine priority cogs and build instructions for the polling sequence
34d40 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
34d44 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
34d48 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
34d4c 15d             | 
34d4c 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
34d50 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
34d54 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
34d58 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
34d5c 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
34d60 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
34d64 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
34d68 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
34d6c 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
34d70 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
34d74 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
34d78 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
34d7c 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
34d80 16a             | endprioloop
34d80 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
34d84 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
34d88 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
34d8c 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
34d90 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
34d94 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
34d98 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
34d9c 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
34da0 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
34da4 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
34da8 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
34dac 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
34db0 176             | 
34db0 176             | ' populate the round robin COG polling instructions
34db0 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
34db4 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
34db8 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
34dbc 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
34dc0 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
34dc4 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
34dc8 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
34dcc 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
34dd0 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
34dd4 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
34dd8 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
34ddc 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
34de0 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
34de4 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
34de8 184             | '..................................................................................................
34de8 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
34de8 184             | 
34de8 184             | set_latency                                                 '            (a) set latency
34de8 184             | get_latency                                                 '            (b) get latency
34de8 184             | set_burst                                                   '            (c) set burst size of bank
34de8 184             | get_burst                                                   '            (d) get burst size of bank
34de8 184             |                                                             '            (e) dump state
34de8 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
34dec 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
34df0 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
34df4 187             |                                                             ' | | | | e  account for following AUGS
34df4 187 04 00 00 FF 
34df8 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
34dfc 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
34e00 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
34e04 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
34e08 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
34e0c 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
34e10 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
34e14 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
34e18 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
34e1c 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
34e20 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
34e24 193             | 
34e24 193             | '..................................................................................................
34e24 193             | ' Misc EXECF code
34e24 193             | 
34e24 193 33 72 63 FD | start_read_exec             execf   newburstr
34e28 194 33 7C 63 FD | start_write_exec            execf   resumewrites
34e2c 195 33 78 63 FD | continue_read_exec          execf   lockedreads
34e30 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
34e34 197             | 
34e34 197             | '..................................................................................................
34e34 197             | ' Variables
34e34 197             | 
34e34 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
34e38 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
34e3c 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
34e40 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
34e44 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
34e48 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
34e4c 19d             | 
34e4c 19d 00 00 00 80 | xfreq1          long    $80000000
34e50 19e 00 00 00 40 | xfreq2          long    $40000000
34e54 19f 03 00 00 00 | delay           long    3
34e58 1a0             | 
34e58 1a0             | lutcodeaddr                 
34e58 1a0             | startupparams
34e58 1a0             | excludedcogs                                    'careful: shared register use!
34e58 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
34e5c 1a1 00 00 00 00 | flags           long    0
34e60 1a2             | mask                                            'careful: shared register use!
34e60 1a2 00 00 00 00 | resetmaskA      long    0
34e64 1a3             | limit                                           'careful: shared register use!
34e64 1a3 00 00 00 00 | resetmaskB      long    0
34e68 1a4 00 00 00 00 | datapins        long    0
34e6c 1a5             | const512                                        'careful: shared register use!
34e6c 1a5 00 00 00 00 | devicelist      long    0
34e70 1a6 00 00 00 00 | coglist         long    0
34e74 1a7 00 00 00 00 | mbox            long    0 
34e78 1a8             | 
34e78 1a8             | clkpin                                          'shared with code patched during init
34e78 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
34e7c 1a9             | cspin                                           'shared with code patched during init
34e7c 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
34e80 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
34e84 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
34e88 1ac 01 00 00 00 | clkdelay        long    1
34e8c 1ad 00 00 00 00 | regdatabus      long    0
34e90 1ae             | 
34e90 1ae 10 00 00 00 | deviceaddr      long    $10
34e94 1af             | rrcounter
34e94 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
34e98 1b0             | 
34e98 1b0             | ' jump addresses for the per COG handlers
34e98 1b0 20 00 00 00 | cog0_handler    long    cog0
34e9c 1b1 2C 00 00 00 | cog1_handler    long    cog1
34ea0 1b2 38 00 00 00 | cog2_handler    long    cog2
34ea4 1b3 44 00 00 00 | cog3_handler    long    cog3
34ea8 1b4 50 00 00 00 | cog4_handler    long    cog4
34eac 1b5 5C 00 00 00 | cog5_handler    long    cog5
34eb0 1b6 68 00 00 00 | cog6_handler    long    cog6
34eb4 1b7 74 00 00 00 | cog7_handler    long    cog7
34eb8 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
34ebc 1b9             | 
34ebc 1b9             | ' EXECF sequences
34ebc 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
34ec0 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
34ec4 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
34ec8 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
34ecc 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
34ed0 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
34ed4 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
34ed8 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
34ed8 1c0             | 
34ed8 1c0             | 
34ed8 1c0             | ' SKIPF sequences
34ed8 1c0             | skiptable
34ed8 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
34edc 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
34ee0 1c2 00 00 00 00 |                 long    0                      ' read modify write long
34ee4 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
34ee8 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
34eec 1c5 00 00 00 00 | pattern2        long    0
34ef0 1c6 00 00 00 00 | pattern3        long    0
34ef4 1c7 77 02 00 00 | singlelong      long    %1001110111  
34ef8 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
34efc 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
34f00 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
34f04 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
34f08 1cc             | 
34f08 1cc             | ' LUT RAM address values
34f08 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
34f0c 1cd DD 02 00 00 | continue_read   long    continue_read_lut
34f10 1ce DB 02 00 00 | continue_write  long    continue_write_lut
34f14 1cf F6 02 00 00 | noread          long    noread_lut
34f18 1d0             | 
34f18 1d0 00 00 00 00 | id0             long    0
34f1c 1d1 01 00 00 00 | id1             long    1
34f20 1d2 02 00 00 00 | id2             long    2
34f24 1d3 03 00 00 00 | id3             long    3
34f28 1d4 04 00 00 00 | id4             long    4
34f2c 1d5 05 00 00 00 | id5             long    5
34f30 1d6 06 00 00 00 | id6             long    6
34f34 1d7 07 00 00 00 | id7             long    7
34f38 1d8             | 
34f38 1d8             | 'These next 10 request registers below are also temporarily reused during init 
34f38 1d8             | 'and COG updates and need to follow immediately after id0-id7
34f38 1d8 00 00 00 00 | addr1           long    0
34f3c 1d9 00 00 00 00 | hubdata         long    0
34f40 1da 00 00 00 00 | count           long    0
34f44 1db 00 00 00 00 | addr2           long    0
34f48 1dc 00 00 00 00 | total           long    0
34f4c 1dd 00 00 00 00 | offset1         long    0
34f50 1de 00 00 00 00 | offset2         long    0
34f54 1df 00 00 00 00 | link            long    0
34f58 1e0             | 
34f58 1e0             | burstwrite                                      'note shared register use during init
34f58 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
34f5c 1e1 00 00 00 00 | id              long    0
34f60 1e2             | 
34f60 1e2 00 00 00 00 | header          long    0
34f64 1e3 00 00 00 00 | trailer         long    0
34f68 1e4 00 00 00 00 | cmdaddr         long    0
34f6c 1e5 00 00 00 00 | request         long    0
34f70 1e6 00 00 00 00 | rrlimit         long    0
34f74 1e7 00 00 00 00 | pinconfig       long    0
34f78 1e8 00 00 00 00 | clks            long    0
34f7c 1e9 00 00 00 00 | resume          long    0
34f80 1ea 00 00 00 00 | orighubsize     long    0
34f84 1eb 00 00 00 00 | wrclks          long    0
34f88 1ec             | 
34f88 1ec 00 00 00 00 | pattern         long    0
34f8c 1ed 00 00 00 00 | hubscratch      long    0
34f90 1ee 00 10 00 00 | val4k           long    4096
34f94 1ef             | 
34f94 1ef             | ' temporary general purpose regs
34f94 1ef 00 00 00 00 | a               long    0
34f98 1f0 00 00 00 00 | b               long    0
34f9c 1f1 00 00 00 00 | c               long    0
34fa0 1f2 00 00 00 00 | d               long    0
34fa4 1f3             |                 fit     502
34fa4 1f3             | 
34fa4 1f3             |                 fit     502
34fa4 1f3             | 
34fa4 1f3             | '..................................................................................................
34fa4 1f3             | 
34fa4 1f3             |             orgh
34fa4                 | 
34fa4                 | lut_code
34fa4                 | 'HW init code up to 80 longs
34fa4                 | 
34fa4                 | '..................................................................................................
34fa4                 | ' Memory layout for LUT RAM once operational:
34fa4                 | '
34fa4                 | '  LUT RAM address      Usage
34fa4                 | '  ---------------      ----
34fa4                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
34fa4                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
34fa4                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
34fa4                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
34fa4                 | '
34fa4                 | ' Also during driver COG startup:
34fa4                 | ' $230-$24F is used for HW init setup
34fa4                 | ' $250-$26F is used as temporary vector storage 
34fa4                 | '..................................................................................................
34fa4                 | 
34fa4                 |                 org $230    
34fa4 230             | 
34fa4 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
34fa4 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
34fa8 231 24 16 60 FD |                             pollxfi
34fac 232 FF AA 2A FF 
34fb0 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
34fb4 234 28 00 B0 FD |                             call    #sendqspi
34fb8 235 07 F8 07 FF 
34fbc 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
34fc0 237 28 00 B0 FD |                             call    #sendspi
34fc4 238 F8 07 78 FF 
34fc8 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
34fcc 23a 1C 00 B0 FD |                             call    #sendspi
34fd0 23b 7F 78 78 FF 
34fd4 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
34fd8 23d 10 00 B0 FD |                             call    #sendspi 
34fdc 23e 2D 00 64 FD |                             ret
34fe0 23f             | 
34fe0 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
34fe4 240 32 0C 64 FD |                             skipf   #%110
34fe8 241 9C EF 03 F6 |                             mov     pb, xsendimm
34fec 242             | 
34fec 242 10 D0 07 F6 | sendspi                     mov     clks, #16
34ff0 243 97 EF 03 F6 |                             mov     pb, ximm8lut
34ff4 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
34ff8 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
34ffc 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
35000 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
35004 248 24 36 60 FD |                             waitxfi                         'wait for the completion
35008 249 50 48 63 FD |                             fltl    datapins                'float data bus
3500c 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
35010 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
35014 24c             | 
35014 24c 00 00 00 00 
35018 24d 00 00 00 00 
3501c 24e 00 00 00 00 
35020 24f 00 00 00 00 |                 long    0[$270-32-$]
35024 250             |                 fit     $270-32  ' keep room for 32 vector longs
35024 250             |     
35024 250             |                 fit     $270-32  ' keep room for 32 vector longs
35024 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
35024 250             | rw_vect ' PSRAM jump vectors
35024 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
35028 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3502c 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
35030 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
35034 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
35038 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3503c 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
35040 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
35044 258             | ro_vect ' R/O PSRAM jump vectors
35044 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
35048 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3504c 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
35050 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
35054 25c 00 01 00 00 |                 long    unsupported
35058 25d 00 01 00 00 |                 long    unsupported
3505c 25e 00 01 00 00 |                 long    unsupported
35060 25f 00 01 00 00 |                 long    unsupported
35064 260             | ctrl_vect ' Control jump vectors
35064 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
35068 261 00 01 00 00 |                 long    unsupported
3506c 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
35070 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
35074 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
35078 265 00 01 00 00 |                 long    unsupported
3507c 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
35080 267 3E 01 00 00 |                 long    reconfig 
35084 268             | no_vect ' Invalid bank jump vectors
35084 268 01 01 00 00 |                 long    invalidbank
35088 269 01 01 00 00 |                 long    invalidbank
3508c 26a 01 01 00 00 |                 long    invalidbank
35090 26b 01 01 00 00 |                 long    invalidbank
35094 26c 01 01 00 00 |                 long    invalidbank
35098 26d 01 01 00 00 |                 long    invalidbank
3509c 26e 01 01 00 00 |                 long    invalidbank
350a0 26f 01 01 00 00 |                 long    invalidbank
350a4 270             |                 fit     $270
350a4 270             | 
350a4 270             |                 fit     $270
350a4 270             | '..................................................................................................
350a4 270             | ' PSRAM READS
350a4 270             |                                                             ' a b c d e f
350a4 270             |                                                             ' B W L B R L  (a) byte read
350a4 270             |                                                             ' Y O O U E O  (b) word read
350a4 270             |                                                             ' T R N R S C  (c) long read
350a4 270             |                                                             ' E D G S U K  (d) new burst read
350a4 270             |                                                             '       T M E  (e) resumed sub-burst
350a4 270             |                                                             '         E D  (f) locked sub-burst
350a4 270             | 
350a4 270             | 
350a4 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
350a8 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
350ac 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
350b0 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
350b4 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
350b8 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
350bc 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
350c0 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
350c4 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
350c8 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
350cc 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
350d0 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
350d4 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
350d8 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
350dc 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
350e0 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
350e4 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
350e8 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
350ec 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
350f0 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
350f4 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
350f8 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
350fc 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
35100 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
35104 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
35108 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3510c 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
35110 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
35114 28c             | 
35114 28c             |                             ' fall through to read bursts
35114 28c             |                         
35114 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
35114 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
35118 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3511c 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
35120 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
35124 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
35128 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3512c 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
35130 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
35134 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
35138 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3513c 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
35140 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
35144 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
35148 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3514c 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
35150 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
35154 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
35158 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3515c 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
35160 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
35164 2a0 E8 D1 03 F1 |                             add     clks, clks
35168 2a1             | readcommon
35168 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3516c 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
35170 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
35174 2a4             | 
35174 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
35178 2a5 69 C8 63 FD |                             rev     cmdaddr
3517c 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
35180 2a7 61 C8 63 FD |                             mergeb  cmdaddr
35184 2a8             | 
35184 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
35188 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3518c 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3518c 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
35190 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
35194 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
35198 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3519c 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
3519c 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
351a0 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
351a4 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
351a8 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
351ac 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
351b0 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
351b4 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
351b4 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
351b8 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
351bc 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
351c0 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
351c4 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
351c8 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
351cc 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
351d0 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
351d4 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
351d8 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
351dc 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
351e0 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
351e4 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
351e8 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
351ec 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
351ec 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
351f0 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
351f4 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
351f8 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
351fc 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
35200 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
35204 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
35208 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3520c 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
35210 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
35214 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
35218 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3521c 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
35220 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
35224 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
35228 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3522c 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
35230 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
35234 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
35238 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3523c 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
35240 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
35244 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
35248 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3524c 2da 10 03 90 FD |                             jmp     #writecommon
35250 2db             | 
35250 2db             | '..................................................................................................
35250 2db             | ' Burst continuation testing
35250 2db             | 
35250 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
35254 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
35258 2dd             | continue_read_lut          
35258 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3525c 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
35260 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
35264 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
35268 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3526c 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
35270 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
35274 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
35278 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3527c 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
35280 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
35284 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
35288 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3528c 2ea             | 
3528c 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
35290 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
35294 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
35298 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3529c 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
352a0 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
352a4 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
352a8 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
352ac 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
352b0 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
352b4 2f4 2A 1C 66 0D |             _ret_           push    #poller
352b8 2f5             | 
352b8 2f5             | 
352b8 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
352bc 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
352bc 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
352c0 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
352c4 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
352c8 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
352cc 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
352d0 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
352d4 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
352d8 2fd 2D 00 64 FD |                             ret                             ' | continue processing
352dc 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
352e0 2ff             | '..................................................................................................
352e0 2ff             | ' Completion of requests
352e0 2ff             | 
352e0 2ff             | complete_rw_lut             
352e0 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
352e4 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
352e8 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
352ec 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
352f0 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
352f4 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
352f8 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
352fc 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
35300 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
35304 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
35308 309 32 62 64 AD |             if_z            skipf   #%110001
3530c 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
35310 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
35314 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
35318 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3531c 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
35320 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
35324 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
35328 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3532c 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
35330 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
35334 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
35338 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3533c 316             |                                                             ' skipcase (a) gfx copy to/from hub
3533c 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3533c 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3533c 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
35340 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
35344 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
35348 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3534c 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
35350 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
35354 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
35358 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3535c 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
35360 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
35364 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
35368 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3536c 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
35370 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
35374 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
35378 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3537c 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
35380 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
35384 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
35388 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3538c 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
35390 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
35394 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
35398 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3539c 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
353a0 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
353a4 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
353a8 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
353ac 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
353b0 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
353b4 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
353b8 335 DF B7 03 A6 |             if_z            mov     addr2, link
353bc 336 34 FF 9F AD |             if_z            jmp     #checknext
353c0 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
353c4 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
353c8 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
353cc 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
353d0 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
353d4 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
353d8 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
353dc 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
353e0 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
353e4 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
353e8 341             | 
353e8 341             | '..................................................................................................
353e8 341             | ' PSRAM WRITES
353e8 341             |                                                             '  a b c d e f g h
353e8 341             | 
353e8 341             |                                                             '  B W L F B R L L (a) byte write(s)
353e8 341             |                                                             '  Y O O I U E O O (b) word write(s)
353e8 341             |                                                             '  T R N L R S C C (c) long write(s)
353e8 341             |                                                             '  E D G L S U K K (d) resumed fill
353e8 341             |                                                             '          T M E E (e) new burst write
353e8 341             |                                                             '            E D D (f) resumed burst
353e8 341             |                                                             '              F B (g) locked fill
353e8 341             |                                                             '              I U (h) locked burst write
353e8 341             |                                                             '              L R 
353e8 341             |                                                             '              L S 
353e8 341             |                                                             '                T 
353e8 341             | 
353e8 341             | w_single                   
353e8 341             | w_fill_cont           
353e8 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
353ec 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
353f0 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
353f4 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
353f8 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
353fc 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
35400 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
35404 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
35408 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3540c 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
35410 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
35414 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
35418 34d             |                ' disable call to r_resume_burst for single longs when z=0
35418 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3541c 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
35420 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
35424 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
35428 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3542c 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
35430 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
35434 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
35438 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3543c 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
35440 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
35444 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
35448 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3544c 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
35450 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
35454 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
35458 35d             |         
35458 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
35458 35d             |             '
35458 35d             |             '  At least one of these 3 optional components will be sent
35458 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
35458 35d             |             '     body - N x full longs of data
35458 35d             |             '     trailer - last partial long of data
35458 35d             |             '
35458 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
35458 35d             |             '
35458 35d             |             'Case    Type                           Sends
35458 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
35458 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
35458 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
35458 35d             |             ' 4)     Multiple long fill             body only
35458 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
35458 35d             | 
35458 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
35458 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3545c 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
35460 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
35464 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
35468 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3546c 362 13 8C 07 F6 |                             mov     pattern3, #%10011
35470 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
35474 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
35478 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3547c 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
35480 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
35484 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
35488 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3548c 36a             |                             
3548c 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
35490 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
35494 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
35498 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3549c 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
354a0 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
354a4 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
354a8 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
354ac 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
354b0 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
354b4 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
354b8 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
354bc 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
354c0 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
354c4 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
354c8 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
354cc 37a             | 
354cc 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
354d0 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
354d4 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
354d8 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
354dc 37e             |                  
354dc 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
354e0 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
354e4 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
354e8 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
354ec 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
354f0 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
354f4 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
354f8 385             | 
354f8 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
354fc 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
35500 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
35504 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
35508 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3550c 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
35510 38b             | 
35510 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
35510 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
35514 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
35518 38d 2A B0 63 FD |                             push    addr1                   'save address
3551c 38e             | 
3551c 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3551c 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
35520 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
35524 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
35528 391             |             
35528 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3552c 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
35530 393 2B B0 63 FD |                             pop     addr1                   'restore address
35534 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
35538 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3553c 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
35540 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
35544 398             | 
35544 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
35548 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3554c 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
35550 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
35554 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
35558 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3555c 39e             | 
3555c 39e             |                             'trailer is done
3555c 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
35560 39f             | 
35560 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
35564 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
35568 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3556c 3a2             | 
3556c 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
35570 3a3 69 C8 63 FD |                             rev     cmdaddr                 
35574 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
35578 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3557c 3a6             |                             
3557c 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
35580 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
35584 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
35588 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3558c 3aa             |                                                          
3558c 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
35590 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
35594 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
35598 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
3559c 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
355a0 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
355a4 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
355a8 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
355ac 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
355b0 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
355b4 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
355b8 3b5             |  
355b8 3b5 59 52 63 FD |                             drvh    cspin
355bc 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
355c0 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
355c4 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
355c8 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
355cc 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
355d0 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
355d4 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
355d8 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
355dc 3be EA E5 03 F6 |                             mov     d, orighubsize
355e0 3bf EF E5 63 F0 |                             shl     d, a
355e4 3c0 F2 E3 83 F1 |                             sub     c, d
355e8 3c1 DD E3 03 F1 |                             add     c, offset1
355ec 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
355f0 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
355f4 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
355f8 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
355fc 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
35600 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
35604 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
35608 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3560c 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
35610 3cb BB D3 03 F6 |                             mov     resume, restorefill
35614 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
35618 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3561c 3ce 6C FC BF CD |             if_c            call    #yield
35620 3cf 2D 00 64 FD |                             ret
35624 3d0             |                            
35624 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
35624 3d0             |                       '     rczl    pa                      'rotate left into address offset
35624 3d0             |                       '     rczl    c wcz                   'restore count and flags
35624 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
35628 3d1 02 EC 67 F0 |                             shl     pa, #2
3562c 3d2 28 06 64 AD |             if_z            setq    #3
35630 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
35634 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
35638 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3563c 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
35640 3d7             | 
35640 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
35644 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
35648 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3564c 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
35650 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
35654 3dc             |                 fit 1024-32
35654 3dc             |         
35654 3dc             | 
35654 3dc             | '..................................................................................................
35654 3dc             | 
35654 3dc             |                 fit 1024-32
35654 3dc 00 00 00 00 
35658 3dd 00 00 00 00 
3565c 3de 00 00 00 00 
35660 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
35664 3e0             |                 org 1024-32
35664 000             | 
35664 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
35664 000 00 00 00 00 |                 long $0000
35668 001 11 11 00 00 |                 long $1111
3566c 002 22 22 00 00 |                 long $2222
35670 003 33 33 00 00 |                 long $3333
35674 004 44 44 00 00 |                 long $4444
35678 005 55 55 00 00 |                 long $5555
3567c 006 66 66 00 00 |                 long $6666
35680 007 77 77 00 00 |                 long $7777
35684 008 88 88 00 00 |                 long $8888
35688 009 99 99 00 00 |                 long $9999
3568c 00a AA AA 00 00 |                 long $aaaa
35690 00b BB BB 00 00 |                 long $bbbb
35694 00c CC CC 00 00 |                 long $cccc
35698 00d DD DD 00 00 |                 long $dddd
3569c 00e EE EE 00 00 |                 long $eeee
356a0 00f FF FF 00 00 |                 long $ffff
356a4 010             | 
356a4 010             | 'masks
356a4 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
356a8 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
356ac 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
356b0 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
356b4 014             | 
356b4 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
356b8 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
356bc 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
356c0 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
356c4 018             | 
356c4 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
356c8 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
356cc 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
356d0 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
356d4 01c             | 
356d4 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
356d8 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
356dc 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
356e0 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
356e4 020             |         fit 1024
356e4 020             | 
356e4 020             |         fit 1024
356e4 020             | 
356e4 020             | '--------------------------------------------------------------------------------------------------
356e4 020             |         orgh
356e4                 | 
356e4                 | gfxexpansion
356e4                 |                             'simple line drawing graphics expansion of memory driver
356e4                 |                             'jmp     #donerepeats                'just return for now
356e4                 | 
356e4     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
356e8     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
356ec     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
356f0     DD E1 03 F6 |                             mov     b, offset1              'get error term
356f4     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
356f8     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
356fc     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
35700     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
35704     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
35708     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3570c     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
35710     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
35714     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
35718     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3571c     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
35720     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
35724     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
35728     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3572c     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
35730     DC E5 33 F9 |                             getword d, total, #0            'get line width
35734     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
35738     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3573c     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
35740     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
35744     C3 03 80 FD |                             jmp     #readmask               'continue filling
35748                 | 	alignl
35748                 | _usbnew_spin2_dat_
35748                 |                 org     $000
35748 000             | 
35748 000             | usb_host_start
35748 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3574c 001             | 
3574c 001 03 00 00 FF 
35750 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
35754 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
35758 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3575c 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
35760 006 29 70 63 FD |                 setq2   htmp
35764 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
35768 008             | 
35768 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3576c 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
35770 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
35774 00b             | 
35774 00b             | '------------------------------------------------------------------------------
35774 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
35774 00b             | ' special because the receiving function must not respond with either STALL or
35774 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
35774 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
35774 00b             | ' corrupt packet, it must ignore the transaction
35774 00b             | '------------------------------------------------------------------------------
35774 00b             | ' On entry:
35774 00b             | '   PTRA - start address of the SETUP data struct.
35774 00b             | ' On exit:
35774 00b             | '   retval - PID_ACK on success, otherwise error code.
35774 00b             | '------------------------------------------------------------------------------
35774 00b             | txn_setup
35774 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
35778 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3577c 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
35780 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
35784 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
35788 010             | .setup
35788 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3578c 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35790 012 2D 00 64 AD |         if_z    ret
35794 013 7C 0B B0 FD |                 call    #retry_wait
35798 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3579c 015 2D 00 64 AD |         if_z    ret
357a0 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
357a4 017 E0 FF 9F FD |                 jmp     #.setup
357a8 018             | 
357a8 018             | '------------------------------------------------------------------------------
357a8 018             | ' IN/INTERRUPT transaction.
357a8 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
357a8 018             | '------------------------------------------------------------------------------
357a8 018             | ' On entry:
357a8 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
357a8 018             | '     CRC(b19..23).
357a8 018             | ' On exit:
357a8 018             | '------------------------------------------------------------------------------
357a8 018             | txn_in
357a8 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
357ac 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
357b0 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
357b4 01b             | 
357b4 01b             |                 ' Fall through to urx_packet
357b4 01b             | 
357b4 01b             | '------------------------------------------------------------------------------
357b4 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
357b4 01b             | ' received are handshakes and IN DATAx.
357b4 01b             | '------------------------------------------------------------------------------
357b4 01b             | ' On entry:
357b4 01b             | ' On exit:
357b4 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
357b4 01b             | '     returned.
357b4 01b             | '------------------------------------------------------------------------------
357b4 01b             | urx_packet
357b4 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
357b8 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
357bc 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
357c0 01e 1A 92 63 FD |                 getct   hct2
357c4 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
357c8 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
357cc 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
357d0 022             | .wait_sop
357d0 022 22 A7 8A FA |                 rdpin   urx, dm
357d4 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
357d8 024 08 00 90 CD |         if_c    jmp     #.get_pid
357dc 025 FC 25 CC FB |                 jnct2   #.wait_sop
357e0 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
357e4 027             | .get_pid
357e4 027 28 02 B0 FD |                 call    #urx_next
357e8 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
357ec 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
357f0 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
357f4 02b             | .chk_pid
357f4 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
357f8 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
357fc 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
35800 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
35804 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
35808 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
3580c 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
35810 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
35814 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
35818 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
3581c 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
35820 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
35824 037             | .ack_resend
35824 037 22 A7 82 FA |                 rqpin   urx, dm
35828 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3582c 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
35830 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
35834 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
35838 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
3583c 03d             | .chk_eop
3583c 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
35840 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
35844 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
35848 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3584c 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
35850 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
35854 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
35858 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3585c 045 2D 00 64 FD |                 ret
35860 046             | .idle
35860 046 22 A7 82 FA |                 rqpin   urx, dm
35864 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
35868 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3586c 049 2D 00 64 FD |                 ret
35870 04a             | 
35870 04a             | '------------------------------------------------------------------------------
35870 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
35870 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
35870 04a             | ' if one is required.
35870 04a             | '------------------------------------------------------------------------------
35870 04a             | ' On entry:
35870 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
35870 04a             | ' On exit:
35870 04a             | '------------------------------------------------------------------------------
35870 04a             | utx_token
35870 04a 22 A7 82 FA |                 rqpin   urx, dm
35874 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
35878 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3587c 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
35880 04e 34 0D B0 CD |         if_c    call    #utx_pre
35884 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
35888 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3588c 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
35890 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
35894 053             | .next_byte
35894 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
35898 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
3589c 055             | .wait
3589c 055 40 46 72 FD |                 testp   dp                      wc
358a0 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
358a4 057 23 03 08 FC |                 akpin   dp
358a8 058 22 A5 22 FC |                 wypin   utx, dm
358ac 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
358b0 05a             | 
358b0 05a             | '------------------------------------------------------------------------------
358b0 05a             | ' SETUP/OUT/INTERRUPT transaction.
358b0 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
358b0 05a             | '------------------------------------------------------------------------------
358b0 05a             | ' On entry:
358b0 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
358b0 05a             | '     CRC(b19..23).
358b0 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
358b0 05a             | '   pkt_data - count of DATAx payload bytes to send.
358b0 05a             | ' On exit:
358b0 05a             | '------------------------------------------------------------------------------
358b0 05a             | txn_out
358b0 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
358b4 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
358b8 05c 00 00 C0 FF 
358bc 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
358c0 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
358c4 05f             | 
358c4 05f             |                 ' Fall through to utx_data
358c4 05f             | 
358c4 05f             | '------------------------------------------------------------------------------
358c4 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
358c4 05f             | ' calculated while the data byte is being shifted out. Since data stage
358c4 05f             | ' success/fail is not determined until the status stage of the transaction,
358c4 05f             | ' this routine is only concerned about the current DATAx packet.
358c4 05f             | '------------------------------------------------------------------------------
358c4 05f             | ' On entry:
358c4 05f             | '   PTRA - hub start address of the data to read.
358c4 05f             | '   pkt_cnt - data payload size.
358c4 05f             | ' On exit:
358c4 05f             | '------------------------------------------------------------------------------
358c4 05f             | utx_data
358c4 05f 22 A7 82 FA |                 rqpin   urx, dm
358c8 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
358cc 061 F4 FF 9F CD |         if_c    jmp     #utx_data
358d0 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
358d4 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
358d8 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
358dc 065 D8 0C B0 CD |         if_c    call    #utx_pre
358e0 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
358e4 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
358e8 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
358ec 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
358f0 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
358f4 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
358f8 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
358fc 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
35900 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
35904 06f             | .read_byte
35904 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
35908 070 F0 00 B0 FD |                 call    #utx_byte
3590c 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
35910 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
35914 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
35918 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3591c 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
35920 076             | .send_crc
35920 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
35924 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
35928 078 D0 00 B0 FD |                 call    #utx_byte
3592c 079 5D A5 EA F8 |                 getbyte utx, crc, #1
35930 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
35934 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
35938 07c             | 
35938 07c             | '------------------------------------------------------------------------------
35938 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
35938 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
35938 07c             | ' expects that the packet includes at least the CRC word.
35938 07c             | '
35938 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
35938 07c             | ' was requested, which makes it difficult to determine where the data stops
35938 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
35938 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
35938 07c             | ' USB-16 expected residual value of 0xB001.
35938 07c             | '
35938 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
35938 07c             | ' so the caller can verify IN success before writing the data to its final
35938 07c             | ' destination.
35938 07c             | '------------------------------------------------------------------------------
35938 07c             | ' On entry:
35938 07c             | '   pkt_data - max byte count expected to be in the packet.
35938 07c             | '   newb_flg - signals new byte ready when toggled.
35938 07c             | ' On exit:
35938 07c             | '   pkt_cnt - actual number of bytes read.
35938 07c             | '------------------------------------------------------------------------------
35938 07c             | urx_data
35938 07c F7 75 03 F6 |                 mov     htmp2, pb
3593c 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
35940 07e 00 00 C0 FF 
35944 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
35948 080 BA EF 03 F6 |                 mov     pb, htmp2
3594c 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
35950 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
35954 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
35958 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
3595c 085             | .wait_byte
3595c 085             | ' In-line rx for max speed
3595c 085 22 A7 82 FA |                 rqpin   urx, dm
35960 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
35964 087 53 A5 02 F5 |                 and     utx, urx
35968 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3596c 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
35970 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
35974 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
35978 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
3597c 08d DC FF 9F FD |                 jmp     #.wait_byte
35980 08e             | .get_byte
35980 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
35984 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
35988 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
3598c 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
35990 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
35994 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
35998 094             | .end_crc
35998 094 01 B8 06 F1 |                 add     pkt_cnt, #1
3599c 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
359a0 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
359a4 097 2D 00 64 1D |         if_a    ret
359a8 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
359a8 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
359a8 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
359a8 098             | ' to miss it, so cheat a bit and look for SOP clear here.
359a8 098 22 A7 82 FA |                 rqpin   urx, dm
359ac 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
359b0 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
359b4 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
359b4 09b             | .chk_crc
359b4 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
359b8 09c 58 00 00 FF 
359bc 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
359c0 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
359c4 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
359c8 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
359cc 0a1 34 09 B0 FD |                 call    #poll_waitx
359d0 0a2             | 
359d0 0a2             |                 ' Fall through to utx_handshake
359d0 0a2             | 
359d0 0a2             | '------------------------------------------------------------------------------
359d0 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
359d0 0a2             | ' the appropriate IP delay has been inserted.
359d0 0a2             | '------------------------------------------------------------------------------
359d0 0a2             | ' On entry:
359d0 0a2             | '   retval - handshake PID to send.
359d0 0a2             | ' On exit:
359d0 0a2             | '   retval unchanged.
359d0 0a2             | '------------------------------------------------------------------------------
359d0 0a2             | utx_handshake
359d0 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
359d4 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
359d8 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
359dc 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
359e0 0a6 5F A5 02 F6 |                 mov     utx, retval
359e4 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
359e8 0a8             | .idle
359e8 0a8 22 A7 82 FA |                 rqpin   urx, dm
359ec 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
359f0 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
359f4 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
359f8 0ac 08 09 90 FD |                 jmp     #poll_waitx
359fc 0ad             | 
359fc 0ad             | '------------------------------------------------------------------------------
359fc 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
359fc 0ad             | '------------------------------------------------------------------------------
359fc 0ad             | ' On entry:
359fc 0ad             | '   utx - byte to transmit.
359fc 0ad             | ' On exit:
359fc 0ad             | '------------------------------------------------------------------------------
359fc 0ad             | utx_byte
359fc 0ad 40 46 72 FD |                 testp   dp                      wc
35a00 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
35a04 0af 23 03 08 FC |                 akpin   dp
35a08 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
35a0c 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
35a10 0b2             | 
35a10 0b2             | '------------------------------------------------------------------------------
35a10 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
35a10 0b2             | '------------------------------------------------------------------------------
35a10 0b2             | ' On entry:
35a10 0b2             | ' On exit:
35a10 0b2             | '   retval - the byte read.
35a10 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
35a10 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
35a10 0b2             | '     received.
35a10 0b2             | '------------------------------------------------------------------------------
35a10 0b2             | urx_next
35a10 0b2 22 A7 8A FA |                 rdpin   urx, dm
35a14 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
35a18 0b4 53 A5 02 F5 |                 and     utx, urx
35a1c 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
35a20 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
35a24 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
35a28 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
35a2c 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
35a30 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
35a34 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
35a38 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
35a3c 0bd 2D 00 64 FD |                 ret
35a40 0be             | 
35a40 0be             | '------------------------------------------------------------------------------
35a40 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
35a40 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
35a40 0be             | ' length, and the PID is not included in the CRC calculation:
35a40 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
35a40 0be             | '  CRC5  ENDP ADDRESS PID
35a40 0be             | ' %00000_1111_1111111_xxxxxxxx
35a40 0be             | '------------------------------------------------------------------------------
35a40 0be             | ' On entry:
35a40 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
35a40 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
35a40 0be             | ' On exit:
35a40 0be             | '   ep_addr_pid - CRC value appended to the packet.
35a40 0be             | '------------------------------------------------------------------------------
35a40 0be             | calc_crc5
35a40 0be FF 03 00 FF 
35a44 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
35a48 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
35a4c 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
35a50 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
35a54 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
35a58 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
35a5c 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
35a60 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
35a64 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
35a68 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
35a6c 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
35a70 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
35a74 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
35a78 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
35a7c 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
35a80 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
35a84 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
35a88 0d0             | 
35a88 0d0             | '------------------------------------------------------------------------------
35a88 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
35a88 0d0             | '------------------------------------------------------------------------------
35a88 0d0             | isr1_fsframe
35a88 0d0 1A 92 62 FD |                 getct   iframe_ct_base
35a8c 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
35a90 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
35a94 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
35a98 0d4             | .wait
35a98 0d4 40 46 72 FD |                 testp   dp                      wc
35a9c 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
35aa0 0d6 23 03 08 FC |                 akpin   dp
35aa4 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
35aa8 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
35aac 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
35ab0 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
35ab4 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
35ab8 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
35abc 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
35ac0 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
35ac4 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
35ac8 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
35acc 0e1 2C FF BF FD |                 call    #utx_byte
35ad0 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
35ad4 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
35ad8 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
35adc 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
35ae0 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
35ae4 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
35ae8 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
35aec 0e9 5B A5 42 F5 |                 or      utx, icrc
35af0 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
35af4 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
35af8 0ec 20 00 90 FD |                 jmp     #isr1_wait
35afc 0ed             | isr1_lsframe
35afc 0ed 1A 92 62 FD |                 getct   iframe_ct_base
35b00 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
35b04 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
35b08 0f0             | .wait
35b08 0f0 40 46 72 FD |                 testp   dp                      wc
35b0c 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
35b10 0f2 23 03 08 FC |                 akpin   dp
35b14 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
35b18 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
35b1c 0f5             | isr1_wait
35b1c 0f5 22 A5 82 FA |                 rqpin   utx, dm
35b20 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
35b24 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
35b28 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
35b2c 0f9 03 00 00 FF 
35b30 0fa FF B3 06 F5 |                 and     frame, ##$7ff
35b34 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
35b38 0fc F5 FF 3B FB |                 reti1
35b3c 0fd             | 
35b3c 0fd             | '------------------------------------------------------------------------------
35b3c 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
35b3c 0fd             | ' transaction will complete before the next frame is triggered.
35b3c 0fd             | '------------------------------------------------------------------------------
35b3c 0fd             | ' On entry:
35b3c 0fd             | ' On exit:
35b3c 0fd             | '------------------------------------------------------------------------------
35b3c 0fd             | wait_txn_ok
35b3c 0fd 1A 74 63 FD |                 getct   htmp2
35b40 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
35b44 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
35b48 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
35b4c 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
35b50 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
35b54 103 2D 00 64 FD |                 ret
35b58 104             | 
35b58 104             | '------------------------------------------------------------------------------
35b58 104             | ' A device connection was detected, or a bus reset was requested by the USB
35b58 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
35b58 104             | ' and perform a reset sequence prior to device enumeration.
35b58 104             | '------------------------------------------------------------------------------
35b58 104             | dev_reset
35b58 104 22 A7 82 FA |                 rqpin   urx, dm
35b5c 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
35b60 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
35b64 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
35b68 108             | reset
35b68 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
35b6c 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
35b70 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
35b74 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
35b78 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
35b7c 10d 1A 92 62 FD |                 getct   iframe_ct_base
35b80 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
35b84 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
35b88 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
35b8c 111 24 70 07 F1 |                 add     htmp, #36
35b90 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
35b94 113             | .framewait
35b94 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
35b98 114 F8 FF 9F CD |         if_b    jmp     #.framewait
35b9c 115 2D 00 64 FD |                 ret
35ba0 116             | 
35ba0 116             | '------------------------------------------------------------------------------
35ba0 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
35ba0 116             | '------------------------------------------------------------------------------
35ba0 116             | ' On entry:
35ba0 116             | '   PTRA - source address.
35ba0 116             | '   PB - destination address.
35ba0 116             | '   hr0 - length of copy, in bytes.
35ba0 116             | ' On exit:
35ba0 116             | '------------------------------------------------------------------------------
35ba0 116             | hmemcpy
35ba0 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
35ba4 117 F7 71 43 FC |                 wrbyte  htmp, pb
35ba8 118 01 EE 07 F1 |                 add     pb, #1
35bac 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
35bb0 11a             | 
35bb0 11a             | '------------------------------------------------------------------------------
35bb0 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
35bb0 11a             | ' loop until the errant device is disconnected.
35bb0 11a             | '------------------------------------------------------------------------------
35bb0 11a             | ' On entry:
35bb0 11a             | ' On exit:
35bb0 11a             | '------------------------------------------------------------------------------
35bb0 11a             | host_error
35bb0 11a             |           if ERROR_LED >= 0
35bb0 11a             |           end
35bb0 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
35bb4 11b             | 
35bb4 11b             | '------------------------------------------------------------------------------
35bb4 11b             | ' Get HID descriptor buffer for current port
35bb4 11b             | '------------------------------------------------------------------------------
35bb4 11b             | ' On entry:
35bb4 11b             | ' On exit:
35bb4 11b             | '   PB - HID descriptor buffer pointer
35bb4 11b             | '------------------------------------------------------------------------------
35bb4 11b             | get_hid_descr_buffer
35bb4 11b 2D EF 03 F6 |                 mov     pb, hdev_port
35bb8 11c 01 EE E7 F2 |                 cmpsub  pb, #1
35bbc 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
35bc0 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
35bc4 11f             | 
35bc4 11f             | 
35bc4 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
35bc8 120             | 
35bc8 120             | ' USB commands and error codes
35bc8 120 00 00 00 00 | cmd_data        long    0
35bcc 121 00 00 00 00 | usb_err_code    long    ERR_NONE
35bd0 122             | 
35bd0 122             | ' Parameters block assigned at cog startup
35bd0 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
35bd4 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
35bd8 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
35bdc 125             | if ACTIVITY_LED >= 0
35bdc 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
35bdc 125             | end
35bdc 125             | if ERROR_LED >= 0
35bdc 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
35bdc 125             | end
35bdc 125 00 00 00 00 | hid_descr_p     long    0
35be0 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
35be0 126             | 'hkbd_report_p   long    0
35be0 126 00 00 00 00 | hub_descr_p     long    0
35be4 127 00 00 00 00 | urx_buff_p      long    0
35be8 128 00 00 00 00 | dev_desc_buff_p long    0
35bec 129 00 00 00 00 | con_desc_buff_p long    0
35bf0 12a 00 00 00 00 | cache_start_p   long    0
35bf4 12b 00 00 00 00 | cache_end_p     long    0
35bf8 12c             | if EMUPAD_MAX_PLAYER > 0
35bf8 12c             | emupad_out_ptr  long    0
35bf8 12c             | end
35bf8 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
35bfc 12d             | 
35bfc 12d             | hdev_init_start
35bfc 12d             | hdev_port       res     1
35bfc 12d             | hdev_port       res     1
35bfc 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
35bfc 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
35bfc 12d             | kbm_next_datax  res     1
35bfc 12d             | kbm_next_datax  res     1
35bfc 12d             | hub_intf_num    res     1
35bfc 12d             | hub_intf_num    res     1
35bfc 12d             | hub_next_datax  res     1
35bfc 12d             | hub_next_datax  res     1
35bfc 12d             | hub_status_chg  res     1
35bfc 12d             | hub_status_chg  res     1
35bfc 12d             | hub_port_status res     1
35bfc 12d             | hub_port_status res     1
35bfc 12d             | if HAVE_MOUSE
35bfc 12d             | ms_intf_num     res     1
35bfc 12d             | ms_intf_num     res     1
35bfc 12d             | ms_in_max_pkt   res     1
35bfc 12d             | ms_in_max_pkt   res     1
35bfc 12d             | end
35bfc 12d             | kb_intf_num     res     1
35bfc 12d             | kb_intf_num     res     1
35bfc 12d             | kb_interval     res     1
35bfc 12d             | kb_interval     res     1
35bfc 12d             | kb_in_max_pkt   res     1
35bfc 12d             | kb_in_max_pkt   res     1
35bfc 12d             | kb_max_index    res     1
35bfc 12d             | kb_max_index    res     1
35bfc 12d             | kb_led_states   res     1
35bfc 12d             | kb_led_states   res     1
35bfc 12d             | gp_intf_num     res     1
35bfc 12d             | gp_intf_num     res     1
35bfc 12d             | gp_interval     res     1
35bfc 12d             | gp_interval     res     1
35bfc 12d             | gp_max_index    res     1
35bfc 12d             | gp_max_index    res     1
35bfc 12d             | gp_descr_len    res     1+MAX_DEVICES
35bfc 12d             | gp_descr_len    res     1+MAX_DEVICES
35bfc 12d             | hdev_init_end
35bfc 12d             | 
35bfc 12d             | ' Initialized at cog startup:
35bfc 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
35bfc 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
35bfc 12d             | iframe_ct_new   res     1
35bfc 12d             | iframe_ct_new   res     1
35bfc 12d             | iframe_ct_base  res     1
35bfc 12d             | iframe_ct_base  res     1
35bfc 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
35bfc 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
35bfc 12d             | 
35bfc 12d             | ' This register block is reset to zero when a USB device connects
35bfc 12d             | hreg_init_start
35bfc 12d             | hstatus         res     1         ' Host status flags
35bfc 12d             | hstatus         res     1         ' Host status flags
35bfc 12d             | hctwait         res     1         ' Poll-based wait clocks
35bfc 12d             | hctwait         res     1         ' Poll-based wait clocks
35bfc 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
35bfc 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
35bfc 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
35bfc 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
35bfc 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
35bfc 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
35bfc 12d             | xfer_retry      res     1         ' Control transfer retry count
35bfc 12d             | xfer_retry      res     1         ' Control transfer retry count
35bfc 12d             | retry           res     1         ' Transaction retry count
35bfc 12d             | retry           res     1         ' Transaction retry count
35bfc 12d             | utx             res     1         ' Byte to transmit on USB
35bfc 12d             | utx             res     1         ' Byte to transmit on USB
35bfc 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
35bfc 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
35bfc 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
35bfc 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
35bfc 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
35bfc 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
35bfc 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
35bfc 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
35bfc 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
35bfc 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
35bfc 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
35bfc 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
35bfc 12d             | frame           res     1         ' USB 1ms frame counter value
35bfc 12d             | frame           res     1         ' USB 1ms frame counter value
35bfc 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
35bfc 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
35bfc 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
35bfc 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
35bfc 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
35bfc 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
35bfc 12d             | crc             res     1         ' Used for CRC16 calculation
35bfc 12d             | crc             res     1         ' Used for CRC16 calculation
35bfc 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
35bfc 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
35bfc 12d             | retval          res     1         ' Global success/fail return parameter
35bfc 12d             | retval          res     1         ' Global success/fail return parameter
35bfc 12d             | context_retval  res     1         ' Operation contextual return parameter
35bfc 12d             | context_retval  res     1         ' Operation contextual return parameter
35bfc 12d             | ' Device stuff
35bfc 12d             | hdev_id         res     1+MAX_DEVICES
35bfc 12d             | hdev_id         res     1+MAX_DEVICES
35bfc 12d             | hdev_bcd        res     1
35bfc 12d             | hdev_bcd        res     1
35bfc 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
35bfc 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
35bfc 12d             | ' Keyboard/mouse stuff
35bfc 12d             | hctrl_ep_addr   res     1
35bfc 12d             | hctrl_ep_addr   res     1
35bfc 12d             | hctrl_max_pkt   res     1
35bfc 12d             | hctrl_max_pkt   res     1
35bfc 12d             | hconfig_base    res     1
35bfc 12d             | hconfig_base    res     1
35bfc 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
35bfc 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
35bfc 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
35bfc 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
35bfc 12d             | hdev_class      res     1
35bfc 12d             | hdev_class      res     1
35bfc 12d             | hdev_subclass   res     1
35bfc 12d             | hdev_subclass   res     1
35bfc 12d             | hdev_protocol   res     1
35bfc 12d             | hdev_protocol   res     1
35bfc 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
35bfc 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
35bfc 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
35bfc 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
35bfc 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
35bfc 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
35bfc 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
35bfc 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
35bfc 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
35bfc 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
35bfc 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
35bfc 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
35bfc 12d             | if HAVE_MOUSE
35bfc 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
35bfc 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
35bfc 12d             | end
35bfc 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
35bfc 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
35bfc 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
35bfc 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
35bfc 12d             | hdev_ep_addr    res     1+MAX_DEVICES
35bfc 12d             | hdev_ep_addr    res     1+MAX_DEVICES
35bfc 12d             | hdev_out_addr   res     1
35bfc 12d             | hdev_out_addr   res     1
35bfc 12d             | 
35bfc 12d             | if EMUPAD_MAX_PLAYER > 0
35bfc 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
35bfc 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
35bfc 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
35bfc 12d             | end
35bfc 12d             | 
35bfc 12d             | hreg_init_end
35bfc 12d             | 
35bfc 12d             | hidr_start
35bfc 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
35bfc 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
35bfc 12d             | hidr_flags      res     1
35bfc 12d             | hidr_flags      res     1
35bfc 12d             | hidr_axis       res     3
35bfc 12d             | hidr_axis       res     3
35bfc 12d             | hidr_buttons    res     1
35bfc 12d             | hidr_buttons    res     1
35bfc 12d             | hidr_hats       res     1
35bfc 12d             | hidr_hats       res     1
35bfc 12d             | '' Above are actually useful values, 6 longs
35bfc 12d             | hidr_id         res     1
35bfc 12d             | hidr_id         res     1
35bfc 12d             | hidr_state      res     1
35bfc 12d             | hidr_state      res     1
35bfc 12d             | hidr_size       res     1
35bfc 12d             | hidr_size       res     1
35bfc 12d             | hidr_count      res     1
35bfc 12d             | hidr_count      res     1
35bfc 12d             | hidr_offset     res     1
35bfc 12d             | hidr_offset     res     1
35bfc 12d             | hidr_usage_idx  res     1
35bfc 12d             | hidr_usage_idx  res     1
35bfc 12d             | hidr_lminmax    res     1
35bfc 12d             | hidr_lminmax    res     1
35bfc 12d             | hidr_pminmax    res     1
35bfc 12d             | hidr_pminmax    res     1
35bfc 12d             | hidr_type       res     1
35bfc 12d             | hidr_type       res     1
35bfc 12d             | hidr_end
35bfc 12d             | 
35bfc 12d             | ' Variables dependent on the system freqency
35bfc 12d             | _var_64_lower_  res     1
35bfc 12d             | _var_64_lower_  res     1
35bfc 12d             | _var_64_upper_  res     1
35bfc 12d             | _var_64_upper_  res     1
35bfc 12d             | _12Mbps_        res     1
35bfc 12d             | _12Mbps_        res     1
35bfc 12d             | _1_5Mbps_       res     1
35bfc 12d             | _1_5Mbps_       res     1
35bfc 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
35bfc 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
35bfc 12d             | _1us_           res     1         ' 1us
35bfc 12d             | _1us_           res     1         ' 1us
35bfc 12d             | _10us_          res     1         ' 10us
35bfc 12d             | _10us_          res     1         ' 10us
35bfc 12d             | _33us_          res     1         ' 33us
35bfc 12d             | _33us_          res     1         ' 33us
35bfc 12d             | _txn_err_       res     1         ' 250us
35bfc 12d             | _txn_err_       res     1         ' 250us
35bfc 12d             | _500us_         res     1         ' 500us
35bfc 12d             | _500us_         res     1         ' 500us
35bfc 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
35bfc 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
35bfc 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
35bfc 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
35bfc 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
35bfc 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
35bfc 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
35bfc 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
35bfc 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
35bfc 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
35bfc 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
35bfc 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
35bfc 12d             | _preamble_wait_ res     1
35bfc 12d             | _preamble_wait_ res     1
35bfc 12d             | _1ms_           res     1         ' 1ms
35bfc 12d             | _1ms_           res     1         ' 1ms
35bfc 12d             | _2ms_           res     1         ' 2ms
35bfc 12d             | _2ms_           res     1         ' 2ms
35bfc 12d             | _suspend_wait_  res     1         ' 3ms
35bfc 12d             | _suspend_wait_  res     1         ' 3ms
35bfc 12d             | _4ms_           res     1         ' 4ms
35bfc 12d             | _4ms_           res     1         ' 4ms
35bfc 12d             | _xfer_wait_     res     1         ' 5ms
35bfc 12d             | _xfer_wait_     res     1         ' 5ms
35bfc 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
35bfc 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
35bfc 12d             | _reset_hold_    res     1         ' 15ms
35bfc 12d             | _reset_hold_    res     1         ' 15ms
35bfc 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
35bfc 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
35bfc 12d             | _21ms_          res     1         ' 21ms
35bfc 12d             | _21ms_          res     1         ' 21ms
35bfc 12d             | _100ms_         res     1         ' 100ms
35bfc 12d             | _100ms_         res     1         ' 100ms
35bfc 12d             | _500ms_         res     1         ' 500ms
35bfc 12d             | _500ms_         res     1         ' 500ms
35bfc 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
35bfc 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
35bfc 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
35bfc 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
35bfc 12d             | '------------------------------------------------------------------------------
35bfc 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
35bfc 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
35bfc 12d             | _usb_d_ls_nco_  res     1
35bfc 12d             | _usb_d_ls_nco_  res     1
35bfc 12d             | _usb_h_fs_nco_  res     1
35bfc 12d             | _usb_h_fs_nco_  res     1
35bfc 12d             | _usb_d_fs_nco_  res     1
35bfc 12d             | _usb_d_fs_nco_  res     1
35bfc 12d             | '------------------------------------------------------------------------------
35bfc 12d             | ' Scratch registers
35bfc 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
35bfc 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
35bfc 12d             | htmp1           res     1
35bfc 12d             | htmp1           res     1
35bfc 12d             | htmp2           res     1
35bfc 12d             | htmp2           res     1
35bfc 12d             | htmp3           res     1
35bfc 12d             | htmp3           res     1
35bfc 12d             | hrep            res     1         ' Repeat count
35bfc 12d             | hrep            res     1         ' Repeat count
35bfc 12d             | hsave0          res     1         ' Subroutine parameter saves
35bfc 12d             | hsave0          res     1         ' Subroutine parameter saves
35bfc 12d             | hsave1          res     1
35bfc 12d             | hsave1          res     1
35bfc 12d             | hsave2          res     1
35bfc 12d             | hsave2          res     1
35bfc 12d             | isrtmp1         res     1
35bfc 12d             | isrtmp1         res     1
35bfc 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
35bfc 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
35bfc 12d             | hr0             res     1         ' Multi-purpose registers
35bfc 12d             | hr0             res     1         ' Multi-purpose registers
35bfc 12d             | hr1             res     1
35bfc 12d             | hr1             res     1
35bfc 12d             | hr2             res     1
35bfc 12d             | hr2             res     1
35bfc 12d             | hr3             res     1
35bfc 12d             | hr3             res     1
35bfc 12d             | hpar1           res     1         ' Routine entry/exit parameters
35bfc 12d             | hpar1           res     1         ' Routine entry/exit parameters
35bfc 12d             | hpar2           res     1
35bfc 12d             | hpar2           res     1
35bfc 12d             | hpar3           res     1
35bfc 12d             | hpar3           res     1
35bfc 12d             | hct2            res     1         ' Function response bus turn-around timer
35bfc 12d             | hct2            res     1         ' Function response bus turn-around timer
35bfc 12d             | hct3            res     1         ' Keyboard/mouse poll timer
35bfc 12d             | hct3            res     1         ' Keyboard/mouse poll timer
35bfc 12d             | mod_cnt         res     1         ' Used in idle loops
35bfc 12d             | mod_cnt         res     1         ' Used in idle loops
35bfc 12d             |                 fit     $1F0
35bfc 12d             |                 org     $200
35bfc 200             | hlut_start
35bfc 200             | 
35bfc 200             | '------------------------------------------------------------------------------
35bfc 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
35bfc 200             | ' settings to startup defaults.
35bfc 200             | '------------------------------------------------------------------------------
35bfc 200             | ' On entry:
35bfc 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
35bfc 200             | '------------------------------------------------------------------------------
35bfc 200             | set_speed_full
35bfc 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
35c00 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
35c04 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
35c08 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
35c0c 204             | '                ret                             wcz     ' Restore caller flags on exit
35c0c 204             | 
35c0c 204             | '------------------------------------------------------------------------------
35c0c 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
35c0c 204             | ' is a downstream hub connected (not yet implemented), the baud generator
35c0c 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
35c0c 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
35c0c 204             | ' putting the smart pins into reset.
35c0c 204             | '------------------------------------------------------------------------------
35c0c 204             | ' On entry:
35c0c 204             | ' On exit: CZ flags restored to caller states
35c0c 204             | '------------------------------------------------------------------------------
35c0c 204             | set_speed_low
35c0c 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
35c10 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
35c14 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
35c18 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
35c1c 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
35c20 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
35c24 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
35c28 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
35c2c 20c             | 
35c2c 20c             | '------------------------------------------------------------------------------
35c2c 20c             | ' Perform configuration stuff required when a device intitially connects.
35c2c 20c             | '------------------------------------------------------------------------------
35c2c 20c             | ' On entry:
35c2c 20c             | ' On exit:
35c2c 20c             | '------------------------------------------------------------------------------
35c2c 20c             | on_connect
35c2c 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
35c30 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
35c34 20e             | .retry
35c34 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
35c38 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
35c3c 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
35c40 211 00 08 00 FF 
35c44 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
35c48 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
35c4c 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
35c50 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
35c54 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
35c58 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
35c5c 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35c60 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
35c64 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
35c68 21b 4C 03 B0 FD |                 call    #poll_waitx
35c6c 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
35c70 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
35c74 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
35c78 21f B8 FF 9F FD |                 jmp     #.retry
35c7c 220             | .get_dev_desc
35c7c 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
35c80 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
35c84 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
35c88 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
35c8c 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
35c90 225 88 FB BF FD |                 call    #reset
35c94 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
35c98 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
35c9c 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
35ca0 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
35ca4 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35ca8 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
35cac 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
35cb0 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
35cb4 22e 04 00 00 FF 
35cb8 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
35cbc 230 34 FA BF FD |                 call    #calc_crc5
35cc0 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
35cc4 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
35cc8 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
35ccc 234 F7 AD C2 FA |                 rdbyte  total_data, pb
35cd0 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
35cd4 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
35cd8 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35cdc 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
35ce0 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
35ce4 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
35ce8 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
35cec 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
35cf0 23d C4 02 B0 FD |                 call    #poll_waitx
35cf4 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
35cf8 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
35cfc 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
35d00 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
35d04 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
35d08 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35d0c 244 2D 00 64 5D |         if_nz   ret
35d10 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
35d14 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
35d18 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
35d1c 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
35d20 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
35d24 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
35d28 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
35d2c 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
35d30 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
35d34 24e 2C FB 9F CD |         if_b    jmp     #host_error
35d38 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
35d3c 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
35d40 251 2D EC 63 FD |                 call    pa
35d44 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
35d48 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
35d4c 254 2C EC 63 FD |                 jmp     pa
35d50 255             | 
35d50 255             | '------------------------------------------------------------------------------
35d50 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
35d50 255             | ' Status reporting is always in the function-to-host direction.
35d50 255             | '------------------------------------------------------------------------------
35d50 255             | ' On entry:
35d50 255             | '   PTRA - start address of the SETUP data in hub.
35d50 255             | '   PB - start address of the buffer/struct to be written to during the IN data
35d50 255             | '     stage.
35d50 255             | '   ep_addr_pid - device address, endpoint and CRC5.
35d50 255             | ' On exit:
35d50 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
35d50 255             | '     contains the count of data stage bytes actually received, which must
35d50 255             | '     always be <= the count requested.
35d50 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
35d50 255             | '     more specific USB operation error code.
35d50 255             | '------------------------------------------------------------------------------
35d50 255             | control_read
35d50 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
35d54 256 F8 8F 03 F6 |                 mov     hpar2, ptra
35d58 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
35d5c 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
35d60 259             | .xfer_start
35d60 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
35d64 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
35d68 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35d6c 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
35d70 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
35d74 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
35d78 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
35d7c 260 61 00 00 FF 
35d80 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
35d84 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
35d88 263             | .data
35d88 263 56 B1 02 F6 |                 mov     pkt_data, total_data
35d8c 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
35d90 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
35d94 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
35d98 267             | .nak_retry
35d98 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
35d9c 268             | .in_retry
35d9c 268 BC F6 BF FD |                 call    #txn_in
35da0 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
35da4 26a 28 00 90 AD |         if_z    jmp     #.commit
35da8 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
35dac 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
35db0 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
35db4 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
35db8 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
35dbc 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
35dc0 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
35dc4 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
35dc8 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
35dcc 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
35dd0 275             | .commit
35dd0 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
35dd4 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
35dd8 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
35ddc 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
35de0 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
35de4 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
35de8 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
35dec 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
35df0 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
35df4 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
35df8 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
35dfc 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
35e00 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
35e04 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
35e08 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
35e0c 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
35e10 285             | .pre_status
35e10 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
35e14 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
35e18 287 00 B0 06 F6 |                 mov     pkt_data, #0
35e1c 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
35e20 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
35e24 28a 61 00 00 FF 
35e28 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
35e2c 28c             | .out_retry
35e2c 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
35e30 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35e34 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
35e38 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
35e3c 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
35e40 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
35e44 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
35e48 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
35e4c 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
35e50 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
35e54 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
35e58 297             | ' I've encountered transfer STALL, even though the data looks correct, and
35e58 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
35e58 297             | ' ControlRead() transfer gets things unstuck most of the time...
35e58 297             | .xfer_retry
35e58 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
35e5c 298 58 01 B0 FD |                 call    #poll_waitx
35e60 299 8C F9 BF FD |                 call    #wait_txn_ok
35e64 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
35e68 29b C7 F1 03 F6 |                 mov     ptra, hpar2
35e6c 29c C8 EF 03 F6 |                 mov     pb, hpar3
35e70 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
35e74 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
35e78 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
35e7c 2a0             | 
35e7c 2a0             | '------------------------------------------------------------------------------
35e7c 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
35e7c 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
35e7c 2a0             | ' the SETUP data struct is filled with the required values.
35e7c 2a0             | '------------------------------------------------------------------------------
35e7c 2a0             | ' On entry:
35e7c 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
35e7c 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
35e7c 2a0             | '     stage.
35e7c 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
35e7c 2a0             | ' On exit:
35e7c 2a0             | '   retval - used to convey the success/failure of each stage.
35e7c 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
35e7c 2a0             | '     more specific USB operation error code.
35e7c 2a0             | '------------------------------------------------------------------------------
35e7c 2a0             | control_write
35e7c 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
35e80 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
35e84 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
35e88 2a3             | 
35e88 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
35e8c 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
35e90 2a5 F7 91 03 F6 |                 mov     hpar3, pb
35e94 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
35e98 2a7             | .xfer_start
35e98 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
35e9c 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
35ea0 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
35ea4 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35ea8 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
35eac 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
35eb0 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
35eb4 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
35eb8 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
35ebc 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
35ec0 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
35ec4 2b2             | .data
35ec4 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
35ec8 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
35ecc 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
35ed0 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
35ed4 2b6             | .out_retry
35ed4 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
35ed8 2b7 88 F6 BF FD |                 call    #txn_out
35edc 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35ee0 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
35ee4 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
35ee8 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
35eec 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
35ef0 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
35ef4 2be             | .commit
35ef4 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
35ef8 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
35efc 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
35f00 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
35f04 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
35f08 2c3             | pre_status_in
35f08 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
35f0c 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
35f10 2c5             | .status_retry
35f10 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
35f14 2c6 44 F5 BF FD |                 call    #txn_in
35f18 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
35f1c 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
35f20 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
35f24 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
35f28 2cb 2D 00 64 AD |         if_z    ret
35f2c 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
35f30 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
35f34 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
35f38 2cf             | '               ret                                     ' Caller must handle transfer retirement
35f38 2cf             | 
35f38 2cf             | '------------------------------------------------------------------------------
35f38 2cf             | ' Execute an IN interrupt transaction.
35f38 2cf             | '------------------------------------------------------------------------------
35f38 2cf             | ' On entry:
35f38 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
35f38 2cf             | '   hpar2 - Address of the IN data buffer
35f38 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
35f38 2cf             | ' On exit:
35f38 2cf             | '   retval - the result of the operation.
35f38 2cf             | '   hpar3 - the count of IN data bytes actually received.
35f38 2cf             | '------------------------------------------------------------------------------
35f38 2cf             | do_int_in
35f38 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
35f3c 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
35f40 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
35f44 2d2             | 
35f44 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
35f48 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
35f4c 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
35f50 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
35f54 2d6             | .retry
35f54 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
35f58 2d7 00 F5 BF FD |                 call    #txn_in
35f5c 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
35f60 2d9 1C 00 90 AD |         if_z    jmp     #.commit
35f64 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
35f68 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
35f6c 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
35f70 2dd 54 00 B0 FD |                 call    #retry_wait
35f74 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
35f78 2df 18 00 90 AD |         if_z    jmp     #.post_ret
35f7c 2e0 D4 FF 9F FD |                 jmp     #.retry
35f80 2e1             | .commit
35f80 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
35f84 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
35f88 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
35f8c 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
35f90 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
35f94 2e6             | .post_ret
35f94 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
35f98 2e7             | 
35f98 2e7             | 
35f98 2e7             | '------------------------------------------------------------------------------
35f98 2e7             | ' Resets the downstream hub port to FS
35f98 2e7             | '------------------------------------------------------------------------------
35f98 2e7             | dwnstream_reset
35f98 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
35f9c 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
35fa0 2e9             | 
35fa0 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
35fa4 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
35fa8 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
35fac 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
35fb0 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
35fb4 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
35fb8 2ef             | 
35fb8 2ef             | '------------------------------------------------------------------------------
35fb8 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
35fb8 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
35fb8 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
35fb8 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
35fb8 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
35fb8 2ef             | '------------------------------------------------------------------------------
35fb8 2ef             | ' On entry:
35fb8 2ef             | '   hctwait - wait interval in sysclocks.
35fb8 2ef             | ' On exit:
35fb8 2ef             | '------------------------------------------------------------------------------
35fb8 2ef             | poll_waitx
35fb8 2ef 1A 92 63 FD |                 getct   hct2
35fbc 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
35fc0 2f1             | .wait
35fc0 2f1 FF 25 CC FB |                 jnct2   #.wait
35fc4 2f2 2D 00 64 FD |                 ret
35fc8 2f3             | 
35fc8 2f3             | '------------------------------------------------------------------------------
35fc8 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
35fc8 2f3             | '------------------------------------------------------------------------------
35fc8 2f3             | ' On entry:
35fc8 2f3             | '   retval - transaction response PID or error code.
35fc8 2f3             | ' On exit:
35fc8 2f3             | '------------------------------------------------------------------------------
35fc8 2f3             | retry_wait
35fc8 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
35fcc 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
35fd0 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
35fd4 2f6 14 00 90 AD |         if_z    jmp     #.nak
35fd8 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
35fdc 2f8 D8 FF BF FD |                 call    #poll_waitx
35fe0 2f9             | .dec
35fe0 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
35fe4 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
35fe8 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
35fec 2fc             | .nak
35fec 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
35ff0 2fd C4 FF BF FD |                 call    #poll_waitx
35ff4 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
35ff8 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
35ffc 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
36000 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
36004 302 2D 00 64 FD |                 ret
36008 303             | 
36008 303             | host_reset
36008 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
3600c 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
36010 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
36010 305 BD 01 05 FF 
36014 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
36018 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
3601c 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
36020 309             | ' Check to see if the system clock has been changed.
36020 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
36024 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
36028 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3602c 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
36030 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
36034 30e 40 46 62 FD |                 dirl    dp
36038 30f             | 
36038 30f 28 02 64 FD |                 setq    #1
3603c 310 80 00 80 FF 
36040 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
36044 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
36048 313             | .enable
36048 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3604c 314 41 46 62 FD |                 dirh    dp
36050 315 1F 36 63 FD |                 waitx   _1us_
36054 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
36058 317             | 
36058 317             |                 ' Handle Port protection enable and startup delay
36058 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
3605c 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
36060 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
36064 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
36068 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
3606c 31c             | 
3606c 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
36070 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
36074 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
36078 31f 00 00 04 F6 |                 mov     0-0, #0
3607c 320             | .regloop
3607c 320             | 
3607c 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
3607c 320             | 
3607c 320             | discon_entry
3607c 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
36080 321             | 
36080 321             |               
36080 321             |         if HAVE_HIDPAD
36080 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
36084 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
36088 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
3608c 324 F7 01 68 FC |                 wrlong  #0,pb
36090 325             |         end
36090 325             |         if EMUPAD_MAX_PLAYER > 0
36090 325             |         end
36090 325             | 
36090 325             |                 ' Fall through to disconnected loop
36090 325             | 
36090 325             | '-----------------------------------------------------------------------------------------------------------------
36090 325             | ' Device connect handling (Section 7.1.7.3).
36090 325             | '-----------------------------------------------------------------------------------------------------------------
36090 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
36090 325             | ' device to connect (Section 7.1.7.3).
36090 325             | '-----------------------------------------------------------------------------------------------------------------
36090 325             | disconnected
36090 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
36094 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
36098 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
3609c 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
360a0 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
360a4 32a             |         if ACTIVITY_LED >= 0
360a4 32a             |         end
360a4 32a 22 A7 82 FA |                 rqpin   urx, dm
360a8 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
360ac 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
360b0 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
360b4 32e             | .se1_test
360b4 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
360b8 32f FC FE BF FD |                 call    #poll_waitx
360bc 330 22 A7 82 FA |                 rqpin   urx, dm
360c0 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
360c4 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
360c8 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
360cc 334             | .se1            'SE1 is a fatal error condition
360cc 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
360d0 335 E4 FE BF FD |                 call    #poll_waitx
360d4 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
360d8 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
360dc 338             | .connect_test                                           ' Test lines until stable J/K state seen
360dc 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
360e0 339 22 A7 82 FA |                 rqpin   urx, dm
360e4 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
360e8 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
360ec 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
360f0 33d             | connected
360f0 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
360f4 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
360f8 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
360fc 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
36100 341             | .set_pulse
36100 341 1A 64 63 FD |                 getct   _pulse_time_
36104 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
36108 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
36108 343             | ' of 1ms and make a correction, if necessary.
36108 343             | '                mov     htmp, _1ms_
36108 343             | '                subs    htmp, iframe_delta
36108 343             | '                adds    _frame1ms_clks_, htmp
36108 343             | '                debug(udec(_frame1ms_clks_))
36108 343             | 
36108 343             |                 ' Fall through to idle/processing loop
36108 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3610c 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
36110 345             | 
36110 345             | hidle
36110 345 22 A7 82 FA |                 rqpin   urx, dm
36114 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
36118 347 98 00 90 CD |         if_c    jmp     #.se0_test
3611c 348 24 06 70 FD |                 pollct3                         wc
36120 349 68 00 90 3D |         if_nc   jmp     #.nopoll
36124 34a 1A 94 63 FD |                 getct   hct3
36128 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3612c 34c             | 
3612c 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
36130 34d 00 70 E3 F8 |                 getbyte htmp
36134 34e             | 
36134 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
36138 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3613c 350 40 00 90 AD |         if_z    jmp     #.poll
36140 351             | 
36140 351             |         if _HAVE_GAMEPAD
36140 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
36144 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
36148 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
3614c 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
36150 355 2C 00 90 AD |         if_z    jmp     #.poll
36154 356             |         end
36154 356             | 
36154 356             |         if HAVE_MOUSE
36154 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
36158 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
3615c 358 20 00 90 AD |         if_z    jmp     #.poll
36160 359             |         end
36160 359             | 
36160 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
36164 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
36168 35b 14 00 90 AD |         if_z    jmp     #.poll
3616c 35c             | 
3616c 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
36170 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
36174 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
36178 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
3617c 360             |         if HAVE_MOUSE
3617c 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
36180 361             |         else
36180 361             |         end
36180 361             | 
36180 361             | .poll
36180 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
36184 362 2D EC 63 FD |                 call    pa
36188 363             | .skip_poll
36188 363             | 
36188 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
3618c 364             | 
3618c 364             | .nopoll
3618c 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
36190 365 44 00 90 AD |         if_z    jmp     #hsuspend
36194 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
36198 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
3619c 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
361a0 369 1A 84 63 FD |                 getct   hr0
361a4 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
361a8 36b             |         if ACTIVITY_LED >= 0
361a8 36b             |         end
361a8 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
361ac 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
361b0 36d 5C FF 9F FD |                 jmp     #hidle
361b4 36e             | ' Check for extended SE0 state on the bus
361b4 36e             | .se0_test
361b4 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
361b8 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
361bc 370 22 A7 82 FA |                 rqpin   urx, dm
361c0 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
361c4 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
361c8 373 24 F6 BF FD |                 call    #wait_txn_ok
361cc 374 00 00 80 FF 
361d0 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
361d4 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
361d4 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
361d8 377             | 
361d8 377             | hsuspend
361d8 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
361dc 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
361e0 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
361e4 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
361e8 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
361ec 37c 00 96 07 F6 |                 mov     mod_cnt, #0
361f0 37d             | 
361f0 37d             |                 ' Fall through to resume wait loop
361f0 37d             | 
361f0 37d             | hwait_resume
361f0 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
361f4 37e 02 86 47 F0 |                 shr     hr1, #2
361f8 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
361fc 380             |         if ACTIVITY_LED >= 0
361fc 380             |         end
361fc 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
36200 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
36204 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
36208 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3620c 384 18 00 90 AD |         if_z    jmp     #.resume
36210 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
36214 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
36218 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3621c 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
36220 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
36224 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
36228 38b             | .resume
36228 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3622c 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
36230 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
36234 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
36238 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3623c 390 1F 70 63 FD |                 waitx   htmp
36240 391 22 07 28 FC |                 wypin   #OUT_J, dm
36244 392 01 70 47 F0 |                 shr     htmp, #1
36248 393 1F 70 63 FD |                 waitx   htmp
3624c 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
36250 395 1A 92 62 FD |                 getct   iframe_ct_base
36254 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
36258 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3625c 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
36260 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
36264 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
36268 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
3626c 39c             | 
3626c 39c             | '------------------------------------------------------------------------------
3626c 39c             | ' Send preamble to enable low-speed HUB ports
3626c 39c             | '------------------------------------------------------------------------------
3626c 39c             | ' On entry:
3626c 39c             | ' On exit:
3626c 39c             | '   USB baud rate set to low-speed
3626c 39c             | '------------------------------------------------------------------------------
3626c 39c             | utx_pre
3626c 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
36270 39d 40 46 62 FD |                 dirl    dp
36274 39e 28 02 64 FD |                 setq    #1
36278 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
3627c 3a0 58 44 62 FD |                 drvl    dm
36280 3a1 59 46 62 FD |                 drvh    dp
36284 3a2             | 
36284 3a2 1E 00 00 FF 
36288 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
3628c 3a4             | 
3628c 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
36290 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
36294 3a6 28 02 64 3D |         if_nc   setq    #1
36298 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
3629c 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
362a0 3a9             | .l1
362a0 3a9             | 
362a0 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
362a4 3aa 40 46 62 FD |                 dirl    dp
362a8 3ab 28 02 64 FD |                 setq    #1
362ac 3ac 80 00 80 FF 
362b0 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
362b4 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
362b8 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
362bc 3b0 41 46 62 FD |                 dirh    dp
362c0 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
362c4 3b2             | 
362c4 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
362c8 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
362cc 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
362d0 3b5             | 
362d0 3b5             | hlut_end
362d0 3b5             |                 fit     $400
362d0 3b5             |                 orgh
362d0                 | if OVERLAP_MEMORY
362d0                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
362d0                 | end
362d0                 | '------------------------------------------------------------------------------
362d0                 | ' Routines called from cog space.
362d0                 | '------------------------------------------------------------------------------
362d0                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
362d0                 | '------------------------------------------------------------------------------
362d0                 | 
362d0                 | '------------------------------------------------------------------------------
362d0                 | ' USB host cog initialization.
362d0                 | '------------------------------------------------------------------------------
362d0                 | usb_host_init
362d0                 |                 ' Initialize buffer pointers
362d0                 |         if OVERLAP_MEMORY
362d0                 |         else
362d0     40 15 B0 FE |                 loc     pb, #hid_descr
362d4                 |         end
362d4     F7 4B 02 F6 |                 mov     hid_descr_p, pb
362d8                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
362d8                 |                 {
362d8                 |                 }
362d8                 |         
362d8                 |                 {
362d8                 |                 }
362d8                 |                 'loc     pb,#hkbd_report
362d8                 |                 'mov     hkbd_report_p,pb
362d8                 | 
362d8     08 1D B0 FE |                 loc     pb, #hub_descr
362dc     F7 4D 02 F6 |                 mov     hub_descr_p, pb
362e0     1D 1D B0 FE |                 loc     pb, #urx_buff
362e4     F7 4F 02 F6 |                 mov     urx_buff_p, pb
362e8     95 1D B0 FE |                 loc     pb, #dev_desc_buff
362ec     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
362f0     9F 1D B0 FE |                 loc     pb, #con_desc_buff
362f4     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
362f8     18 15 B0 FE |                 loc     pb, #usb_cache_start
362fc     F7 55 02 F6 |                 mov     cache_start_p, pb
36300     E9 1C B0 FE |                 loc     pb, #usb_cache_end
36304     F7 57 02 F6 |                 mov     cache_end_p, pb
36308                 | 
36308                 |         if ERROR_LED >= 0
36308                 |         end
36308                 | 
36308                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
36308                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
36308                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
36308                 | ' Configure and enable the Serial Host USB port.
36308     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3630c                 | 
3630c                 | '------------------------------------------------------------------------------
3630c                 | ' Timing calculations happen before any interrupt(s) are enabled.
3630c                 | '------------------------------------------------------------------------------
3630c                 | ' On entry:
3630c                 | '   htmp - current CLKFREQ value.
3630c                 | '------------------------------------------------------------------------------
3630c                 | hinit_usb_timings
3630c                 | '                getct   htmp2
3630c     B8 59 02 F6 |                 mov     save_sysclk, htmp
36310     8D 5B 80 FF 
36314     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
36318     18 30 63 FD |                 getqx   _12Mbps_
3631c     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
36320     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
36324     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
36328     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
3632c     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
36330     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
36334     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
36338     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3633c     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
36340     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
36344     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
36348     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
3634c     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
36350     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
36354     80 00 00 FF 
36358     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
3635c     18 2C 63 FD |                 getqx   _var_64_lower_
36360     19 2E 63 FD |                 getqy   _var_64_upper_
36364     28 2C 63 FD |                 setq    _var_64_lower_
36368     65 CD 1D FF 
3636c     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
36370     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
36374     01 00 00 FF 
36378     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
3637c     18 2C 63 FD |                 getqx   _var_64_lower_
36380     19 2E 63 FD |                 getqy   _var_64_upper_
36384     28 2C 63 FD |                 setq    _var_64_lower_
36388     A1 07 00 FF 
3638c     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
36390     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
36394     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
36398     09 36 57 F0 |                 shr     _1us_, #9               wc
3639c     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
363a0     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
363a4     18 38 63 FD |                 getqx   _10us_
363a8     09 38 57 F0 |                 shr     _10us_, #9              wc
363ac     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
363b0     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
363b4     18 3A 63 FD |                 getqx   _33us_
363b8     09 3A 57 F0 |                 shr     _33us_, #9              wc
363bc     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
363c0     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
363c4     18 3C 63 FD |                 getqx   _txn_err_
363c8     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
363cc     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
363d0     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
363d4     18 3E 63 FD |                 getqx   _500us_
363d8     09 3E 57 F0 |                 shr     _500us_, #9             wc
363dc     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
363e0     01 00 00 FF 
363e4     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
363e8     18 40 63 FD |                 getqx   _txn_ok_ls_
363ec     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
363f0     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
363f4     01 00 00 FF 
363f8     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
363fc     18 42 63 FD |                 getqx   _txn_ok_fs_
36400     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
36404     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
36408     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
3640c     05 00 00 FF 
36410     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
36414     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
36418     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
3641c     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
36420     1C 00 00 FF 
36424     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
36428     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3642c     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
36430     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
36434     00 00 00 FF 
36438     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3643c     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
36440     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
36444     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
36448     04 00 00 FF 
3644c     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
36450     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
36454     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
36458     8D 5B 00 FF 
3645c     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
36460     18 4C 63 FD |                 getqx   _preamble_wait_
36464     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
36468     01 00 00 FF 
3646c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
36470     18 2C 63 FD |                 getqx   _var_64_lower_
36474     19 2E 63 FD |                 getqy   _var_64_upper_
36478     28 2C 63 FD |                 setq    _var_64_lower_
3647c     01 00 00 FF 
36480     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
36484     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
36488     09 4E 57 F0 |                 shr     _1ms_, #9               wc
3648c     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
36490     FF FF 7F FF 
36494     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
36498     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
3649c     A7 51 03 F6 |                 mov     _2ms_, _1ms_
364a0     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
364a4     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
364a8     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
364ac     A7 55 03 F6 |                 mov     _4ms_, _1ms_
364b0     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
364b4     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
364b8     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
364bc     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
364c0     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
364c4     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
364c8     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
364cc     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
364d0     A7 59 03 F6 |                 mov     _8ms_, _1ms_
364d4     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
364d8     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
364dc     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
364e0     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
364e4     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
364e8     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
364ec     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
364f0     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
364f4     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
364f8     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
364fc     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
36500                 | '        _ret_   mov     _1sec_, save_sysclk
36500                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
36500                 | '                ret
36500                 | {
36500                 | }
36500                 | 
36500                 | '------------------------------------------------------------------------------
36500                 | ' Parse a configuration descriptor chain to see if the device is a recognized
36500                 | ' one. If it is, start the task progression that will configure the device for
36500                 | ' use.
36500                 | '------------------------------------------------------------------------------
36500                 | ' On entry:
36500                 | '   hconfig_base - start address of the cached config descriptor chain.
36500                 | ' On exit:
36500                 | '------------------------------------------------------------------------------
36500                 | hparse_con_desc
36500     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
36504     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
36508     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
3650c     4E 70 FF F9 |                 movbyts htmp,#%%1032
36510     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
36514                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
36514                 | 
36514     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
36518     6E ED 03 F1 |                 add     pa, hconfig_base
3651c     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
36520                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
36520                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
36520                 | ' that defines a keyboard and/or mouse.
36520     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
36524                 | .next_intf
36524     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
36528     BC 01 90 3D |         if_ae   jmp     #hset_config
3652c     6E F3 03 F6 |                 mov     ptrb, hconfig_base
36530     75 F3 03 F1 |                 add     ptrb, hnext_desc
36534     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
36538     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3653c     0C 00 90 AD |         if_z    jmp     #.intf
36540     80 71 C7 FA |                 rdbyte  htmp, ptrb
36544     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
36548     D8 FF 9F FD |                 jmp     #.next_intf
3654c                 | .intf
3654c     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
36550     00 90 07 F6 |                 mov     hpar3, #0
36554     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
36558     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
3655c     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
36560     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
36564                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
36564                 | 
36564                 | .endp
36564     80 71 C7 FA |                 rdbyte  htmp, ptrb
36568     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3656c     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
36570     78 00 90 3D |         if_ae   jmp     #.get_device
36574     6E F3 03 F6 |                 mov     ptrb, hconfig_base
36578     75 F3 03 F1 |                 add     ptrb, hnext_desc
3657c     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
36580     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
36584     64 00 90 AD |         if_z    jmp     #.get_device
36588     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
3658c     04 00 90 AD |         if_z    jmp     #.get_ep
36590     D0 FF 9F FD |                 jmp     #.endp
36594                 | .get_ep
36594     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
36598     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
3659c     0F 86 67 F0 |                 shl     hr1, #8 + 7
365a0     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
365a4     3F 00 00 FF 
365a8     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
365ac     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
365b0     00 8E 0F F2 |                 cmp     hpar2, #0               wz
365b4     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
365b8     00 90 0F F2 |                 cmp     hpar3, #0               wz
365bc     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
365c0     A0 FF 9F FD |                 jmp     #.endp
365c4                 | .in_ep
365c4     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
365c8     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
365cc                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
365cc     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
365d0     C2 89 DB F8 |                 setbyte hr2, hr0, #3
365d4     8C FF 9F FD |                 jmp     #.endp
365d8                 | .out_ep
365d8     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
365dc     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
365e0                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
365e0     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
365e4     C2 8B DB F8 |                 setbyte hr3, hr0, #3
365e8     78 FF 9F FD |                 jmp     #.endp
365ec                 | 
365ec                 | .get_device
365ec     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
365f0     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
365f4     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
365f8     68 00 90 AD |         if_z    jmp     #.gamepad
365fc     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
36600     AC 00 90 AD |         if_z    jmp     #.hub
36604     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
36608     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
3660c     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
36610     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
36614     4C 00 90 AD |         if_z    jmp     #.gamepad
36618     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
3661c     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
36620                 | .keyboard
36620     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
36624                 |         if HAVE_MOUSE
36624     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
36628                 |         else
36628                 |         end
36628     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
3662c     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
36630     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
36634     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
36638     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
3663c     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
36640                 |                 'debug(udec(kb_intf_num))
36640                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
36640     E0 FE 9F FD |                 jmp     #.next_intf
36644                 | if HAVE_MOUSE
36644                 | .mouse
36644     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
36648     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
3664c     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
36650     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
36654     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
36658                 |                 'getbyte ms_interval, hr2, #3
36658     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
3665c     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
36660                 |                 'debug(udec(kb_intf_num))
36660                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
36660     C0 FE 9F FD |                 jmp     #.next_intf
36664                 | end
36664                 | .gamepad
36664     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
36668     C7 71 63 F5 |                 xor     htmp, hpar2
3666c     3F 00 00 FF 
36670     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
36674     AC FE 9F AD |         if_z    jmp     #.next_intf
36678                 |         if HAVE_MOUSE
36678     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3667c     C7 71 63 F5 |                 xor     htmp, hpar2
36680     3F 00 00 FF 
36684     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
36688     98 FE 9F AD |         if_z    jmp     #.next_intf
3668c                 |         end
3668c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
36690     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
36694     8C FE 9F 5D |         if_nz   jmp     #.next_intf
36698                 | 
36698     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3669c     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
366a0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
366a4     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
366a8     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
366ac                 |                 'debug(udec(gp_intf_num))
366ac                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
366ac     74 FE 9F FD |                 jmp     #.next_intf
366b0                 | .hub
366b0     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
366b4     6C FE 9F 5D |         if_nz   jmp     #.next_intf
366b8     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
366bc     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
366c0     60 FE 9F 5D |         if_nz   jmp     #.next_intf
366c4     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
366c8     58 FE 9F 5D |         if_nz   jmp     #.next_intf
366cc     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
366d0     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
366d4     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
366d8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
366dc     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
366e0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
366e4                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
366e4     3C FE 9F FD |                 jmp     #.next_intf
366e8                 | 
366e8                 | '------------------------------------------------------------------------------
366e8                 | ' If a newly-connected device is recognized, do whatever is needed to configure
366e8                 | ' it according to its function, or functions. In the case of this boot protocol
366e8                 | ' keyboard/mouse class driver:
366e8                 | ' - SetConfiguration(config_num)
366e8                 | ' - SetProtocol(boot)
366e8                 | ' - SetIdle(indefinite)
366e8                 | ' - Enter the device interrupt IN polling task stage.
366e8                 | '------------------------------------------------------------------------------
366e8                 | ' On entry:
366e8                 | ' On exit:
366e8                 | '------------------------------------------------------------------------------
366e8                 | hset_config
366e8                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
366e8                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
366e8     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
366ec     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
366f0     00 00 0C F2 |                 cmp     0-0, #0                 wz
366f4     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
366f8                 |         if HAVE_MOUSE
366f8     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
366fc                 |         end
366fc     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
36700     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
36704                 | .set_config
36704     6C 0E D0 FE |                 loc     ptra, #set_config
36708     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
3670c     6E ED 03 F1 |                 add     pa, hconfig_base
36710     F6 8D C3 FA |                 rdbyte  hpar1, pa
36714     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
36718     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
3671c     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
36720     A0 02 A0 FD |                 call    #control_write
36724     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36728     2D 00 64 5D |         if_nz   ret
3672c                 | .kbd_config
3672c     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
36730     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
36734                 | 
36734     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
36738     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3673c     3F 00 00 FF 
36740     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
36744     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
36748                 | 
36748     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3674c     34 0E D0 FE |                 loc     ptra, #set_protocol
36750     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
36754     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
36758     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3675c     A0 02 A0 FD |                 call    #control_write
36760     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36764     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
36768     E4 02 90 5D |         if_nz   jmp     #.notify_client
3676c     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
36770     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
36774     30 03 B0 FD |                 call    #hset_idle
36778                 |                 'cmp     retval, #PID_ACK        wz
36778                 |         'if_nz   mov     hkbd_ep_addr, #0
36778                 |         'if_nz   jmp     #.notify_client
36778     A8 99 02 F6 |                 mov     hctwait, _2ms_
3677c     EF 02 A0 FD |                 call    #poll_waitx
36780     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
36784     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
36788     90 17 90 FE |                 loc     pa, #hkbd_led_rep
3678c     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
36790     2C 03 B0 FD |                 call    #hset_kbdled_report
36794     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36798     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3679c     B0 02 90 5D |         if_nz   jmp     #.notify_client
367a0     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
367a4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
367a8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
367ac     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
367b0     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
367b4     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
367b8     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
367bc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
367c0     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
367c4     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
367c8     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
367cc                 |         if !!HAVE_MOUSE
367cc                 |         end
367cc                 | 
367cc                 | .mouse_config
367cc                 | if HAVE_MOUSE
367cc     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
367d0     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
367d4     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
367d8     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
367dc     3F 00 00 FF 
367e0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
367e4     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
367e8                 | 
367e8                 |                 debug("mouse passed addr check")
367e8                 | 
367e8     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
367ec     00 00 80 FF 
367f0     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
367f4     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
367f8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
367fc     55 02 A0 FD |                 call    #control_read
36800     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36804     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
36808     44 02 90 5D |         if_nz   jmp     #.notify_client
3680c     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
36810     56 01 00 F6 |                 mov     0-0, total_data
36814     1B 01 A0 FD |                 call    #get_hid_descr_buffer
36818                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
36818                 | 
36818     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
3681c     64 0D D0 FE |                 loc     ptra, #set_protocol
36820     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
36824     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
36828     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3682c     A0 02 A0 FD |                 call    #control_write
36830     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36834     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
36838     14 02 90 5D |         if_nz   jmp     #.notify_client
3683c                 |                 debug("mouse passed SetProtocol")
3683c     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
36840     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
36844     60 02 B0 FD |                 call    #hset_idle
36848                 |                 'cmp     retval, #PID_ACK        wz
36848                 |         'if_nz   mov     hmouse_ep_addr, #0
36848                 |         'if_nz   jmp     #.notify_client
36848                 |                 debug("mouse passed SetIdle")
36848     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3684c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
36850     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
36854     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
36858     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
3685c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
36860     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
36864     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
36868     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
3686c     3F 00 00 FF 
36870     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
36874     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
36878     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
3687c     D0 01 90 FD |                 jmp     #.notify_client
36880                 | end
36880                 | .gamepad_config
36880                 | if _HAVE_GAMEPAD
36880     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
36884     00 00 0C F2 |                 cmp     0-0, #0                 wz
36888     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
3688c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
36890     00 70 03 F6 |                 mov     htmp, 0-0
36894     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
36898     3F 00 00 FF 
3689c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
368a0     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
368a4                 | 
368a4     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
368a8     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
368ac     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
368b0     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
368b4     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
368b8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
368bc     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
368c0     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
368c4     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
368c8     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
368cc     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
368d0     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
368d4     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
368d8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
368dc                 | 
368dc                 |                 if EMUPAD_MAX_PLAYER > 0
368dc                 |                 
368dc                 | .rule_loop           
368dc                 |                 end
368dc                 | 
368dc     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
368e0     5C 00 90 AD |         if_e    jmp     #.xinput
368e4     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
368e8     00 70 03 F6 |                 mov     htmp,0-0
368ec     01 A6 02 FF 
368f0     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
368f4     7C 00 90 AD |         if_e    jmp     #.ps3
368f8                 | 
368f8     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
368fc     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
36900     00 00 80 5F 
36904     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
36908     03 00 80 AF 
3690c     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
36910     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
36914     1B 01 A0 FD |                 call    #get_hid_descr_buffer
36918     55 02 A0 FD |                 call    #control_read
3691c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36920     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
36924     00 00 04 56 |         if_nz   mov     0-0, #0
36928     24 01 90 5D |         if_nz   jmp     #.notify_client
3692c     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
36930     56 01 00 F6 |                 mov     0-0, total_data
36934     1B 01 A0 FD |                 call    #get_hid_descr_buffer
36938                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
36938                 | 
36938     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
3693c     10 01 90 FD |                 jmp     #.notify_client
36940                 | .xinput
36940     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
36944     2D EF 03 F6 |                 mov     pb,hdev_port
36948     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
3694c     03 EE 27 F3 |                 fle     pb,#3
36950     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
36954     02 EF 47 FC |                 wrbyte  pb, ptra[2]
36958                 | 
36958     03 B0 06 F6 |                 mov     pkt_data, #3
3695c     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
36960     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
36964     5A 00 A0 FD |                 call    #txn_out
36968     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
3696c                 | 
3696c     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
36970     DC 00 90 FD |                 jmp     #.notify_client
36974                 | .ps3
36974     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
36978     2D EF 03 F6 |                 mov     pb,hdev_port
3697c     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
36980     04 EE 27 F3 |                 fle     pb,#4
36984     F7 EF C3 F9 |                 decod   pb
36988     09 EF 47 FC |                 wrbyte  pb, ptra[9]
3698c                 | 
3698c     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
36990     00 0C D0 FE |                 loc     ptra, #set_report
36994     01 00 80 FF 
36998     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
3699c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
369a0     03 61 5C FC |                 wrword  #48, ptra[wLength]
369a4     20 0C B0 FE |                 loc     pb, #ps3_command_buff
369a8     A0 02 A0 FD |                 call    #control_write
369ac                 | 
369ac     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
369b0     E0 0B D0 FE |                 loc     ptra, #set_report
369b4     01 00 80 FF 
369b8     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
369bc     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
369c0     03 09 5C FC |                 wrword  #4, ptra[wLength]
369c4     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
369c8     A0 02 A0 FD |                 call    #control_write
369cc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
369d0     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
369d4     00 00 04 56 |         if_nz   mov     0-0, #0
369d8     74 00 90 5D |         if_nz   jmp     #.notify_client
369dc                 | 
369dc     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
369e0     6C 00 90 FD |                 jmp     #.notify_client
369e4                 | end
369e4                 | 
369e4                 | .hub_config
369e4     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
369e8     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
369ec     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
369f0     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
369f4     3F 00 00 FF 
369f8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
369fc     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
36a00                 | 
36a00     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
36a04     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
36a08     26 EF 03 F6 |                 mov     pb, hub_descr_p
36a0c     55 02 A0 FD |                 call    #control_read
36a10     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36a14     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
36a18     34 00 90 5D |         if_nz   jmp     #.notify_client
36a1c                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
36a1c                 | 
36a1c     26 F1 03 F6 |                 mov     ptra, hub_descr_p
36a20     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
36a24     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
36a28                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
36a28                 | .pwr_loop
36a28     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
36a2c     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
36a30     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
36a34     A0 02 A0 FD |                 call    #control_write
36a38     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
36a3c                 | 
36a3c     B1 99 02 F6 |                 mov     hctwait, _500ms_
36a40     B0 99 02 F1 |                 add     hctwait, _100ms_
36a44     EF 02 A0 FD |                 call    #poll_waitx
36a48                 | 
36a48     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
36a4c     00 00 90 FD |                 jmp     #.notify_client
36a50                 | 
36a50                 | .notify_client
36a50     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
36a54     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
36a58                 |                 debug(uhex_long(hdev_type,hdev_type+1))
36a58                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
36a58     2D 00 64 FD |                 ret
36a5c                 | 
36a5c                 | '------------------------------------------------------------------------------
36a5c                 | ' Initialize the keyboard/mouse data area to start-up values.
36a5c                 | '------------------------------------------------------------------------------
36a5c                 | ' On entry:
36a5c                 | ' On exit:
36a5c                 | '------------------------------------------------------------------------------
36a5c                 | init_kbdm_data
36a5c     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
36a60     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
36a64                 | 
36a64     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
36a68     2B ED 03 F6 |                 mov     pa, cache_end_p
36a6c                 | .loop
36a6c     61 01 4C FC |                 wrbyte  #0, ptra++
36a70     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
36a74     F4 FF 9F CD |         if_b    jmp     #.loop
36a78                 |         
36a78                 |         if EMUPAD_MAX_PLAYER > 0
36a78                 |         end
36a78                 | 
36a78                 | 
36a78     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
36a7c                 | .regloop
36a7c     00 EC 8F F9 |                 altd    pa
36a80     00 00 04 F6 |                 mov     0-0, #0
36a84     01 EC 07 F1 |                 add     pa, #1
36a88     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
36a8c     EC FF 9F 5D |         if_nz   jmp     #.regloop
36a90                 | 
36a90     E1 E1 61 FF 
36a94     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
36a98     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
36a9c     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
36aa0     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
36aa4                 | 
36aa4     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
36aa8                 | 
36aa8                 | '------------------------------------------------------------------------------
36aa8                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
36aa8                 | ' function.
36aa8                 | '------------------------------------------------------------------------------
36aa8                 | ' On entry:
36aa8                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
36aa8                 | '   hpar2 - index number of the target interface.
36aa8                 | ' On exit:
36aa8                 | '------------------------------------------------------------------------------
36aa8                 | hset_idle
36aa8     A8 99 02 F6 |                 mov     hctwait, _2ms_
36aac     EF 02 A0 FD |                 call    #poll_waitx
36ab0     D8 0A D0 FE |                 loc     ptra, #set_idle
36ab4     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
36ab8     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
36abc     A0 02 80 FD |                 jmp     #control_write
36ac0                 | 
36ac0                 | '------------------------------------------------------------------------------
36ac0                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
36ac0                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
36ac0                 | '------------------------------------------------------------------------------
36ac0                 | ' On entry:
36ac0                 | '   ep_addr_pid - device address and enpoint for the request.
36ac0                 | ' On exit:
36ac0                 | '   retval - transaction result.
36ac0                 | '------------------------------------------------------------------------------
36ac0                 | hset_kbdled_report
36ac0     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
36ac4     CC 0A D0 FE |                 loc     ptra, #set_report
36ac8     01 00 80 FF 
36acc     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
36ad0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
36ad4     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
36ad8     27 EF 03 F6 |                 mov     pb, urx_buff_p
36adc     F7 77 42 FC |                 wrbyte  kb_led_states, pb
36ae0     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
36ae4                 | 
36ae4                 | '------------------------------------------------------------------------------
36ae4                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
36ae4                 | '------------------------------------------------------------------------------
36ae4                 | ' On entry:
36ae4                 | ' On exit:
36ae4                 | '------------------------------------------------------------------------------
36ae4                 | hget_kbd_in_report
36ae4     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
36ae8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
36aec     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
36af0     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
36af4     CF 02 A0 FD |                 call    #do_int_in
36af8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36afc     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
36b00                 | 
36b00     00 90 0F F2 |                 cmp     hpar3, #0               wz
36b04     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
36b08                 | 
36b08     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
36b0c     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
36b10     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
36b14     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
36b18                 | 
36b18     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
36b1c     18 00 B0 FD |                 call    #hkbd_compare
36b20                 |         if EMUPAD_MAX_PLAYER > 0
36b20                 |         end
36b20                 | 
36b20                 | .led_check
36b20     3B 71 03 F6 |                 mov     htmp, kb_led_states
36b24     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
36b28     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
36b2c     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
36b30     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
36b34     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
36b38                 | 
36b38                 | '------------------------------------------------------------------------------
36b38                 | ' Compare current and previous keyboard data buffers for keypress changes.
36b38                 | '------------------------------------------------------------------------------
36b38                 | hkbd_compare
36b38     27 F1 03 F6 |                 mov     ptra, urx_buff_p
36b3c     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
36b40     61 73 07 FB |                 rdlong  htmp1, ptra++
36b44     E1 75 07 FB |                 rdlong  htmp2, ptrb++
36b48     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
36b4c     61 73 07 FB |                 rdlong  htmp1, ptra++
36b50     E1 75 07 FB |                 rdlong  htmp2, ptrb++
36b54     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
36b58     2D 00 64 AD |         if_z    ret
36b5c                 | 
36b5c     B4 13 D0 FE |                 loc     ptra, #hkbd_report
36b60                 | 
36b60                 |                 ' Handle modifiers
36b60     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
36b64     00 87 C7 FA |                 rdbyte  hr1, ptra
36b68     C7 87 43 F9 |                 rolword hr1,hpar2,#0
36b6c     63 86 63 FD |                 mergew  hr1
36b70     08 EC 07 F6 |                 mov     pa,#8
36b74                 | .modloop
36b74     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
36b78     E8 8C 07 F6 |                 mov     hpar1,#$E8
36b7c     F6 8D 83 F1 |                 sub     hpar1,pa
36b80     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
36b84     FB ED 6F FB |                 djnz    pa,#.modloop
36b88                 | 
36b88     6F E0 75 FD | .release        modc    _set    wc
36b8c                 |                 'alts    hdev_port, #hid_report_p
36b8c                 |                 'mov     ptra, hid_report_p
36b8c     02 F0 07 F1 |                 add     ptra, #2
36b90     06 EC 07 F6 |                 mov     pa, #6
36b94     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
36b98     20 00 90 AD |         if_z    jmp     #.rl3
36b9c     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
36ba0     02 F2 07 F1 |                 add     ptrb, #2
36ba4     06 EE 07 F6 |                 mov     pb, #6
36ba8     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
36bac     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
36bb0     08 00 90 AD |         if_z    jmp     #.rl3
36bb4     FC EF 6F FB |                 djnz    pb, #.rl2
36bb8     68 00 B0 FD |                 call    #hkbd_translate
36bbc     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
36bc0                 | 
36bc0     00 90 07 F6 |                 mov     hpar3, #0
36bc4     1F 90 27 F4 |                 bith    hpar3, #31
36bc8                 | 
36bc8     6F 00 74 FD | .press          modc    _clr    wc
36bcc     27 F1 03 F6 |                 mov     ptra, urx_buff_p
36bd0     02 F0 07 F1 |                 add     ptra, #2
36bd4     06 EC 07 F6 |                 mov     pa, #6
36bd8     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
36bdc     20 00 90 AD |         if_z    jmp     #.pl3
36be0     30 13 F0 FE |                 loc     ptrb, #hkbd_report
36be4     02 F2 07 F1 |                 add     ptrb, #2
36be8     06 EE 07 F6 |                 mov     pb, #6
36bec     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
36bf0     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
36bf4     08 00 90 AD |         if_z    jmp     #.pl3
36bf8     FC EF 6F FB |                 djnz    pb, #.pl2
36bfc     24 00 B0 FD |                 call    #hkbd_translate
36c00     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
36c04                 | 
36c04     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
36c08     08 13 F0 FE |                 loc     ptrb, #hkbd_report
36c0c     28 02 64 FD |                 setq #1
36c10     61 73 07 FB |                 rdlong  htmp1, ptra++
36c14     28 02 64 FD |                 setq #1
36c18     E1 73 67 FC |                 wrlong  htmp1, ptrb++
36c1c     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
36c20                 | 
36c20     2D 00 64 FD |                 ret
36c24                 | 
36c24                 | '------------------------------------------------------------------------------
36c24                 | ' Translate keyboard scancode to ASCII
36c24                 | '------------------------------------------------------------------------------
36c24                 | ' On entry:
36c24                 | '   hpar1 - scancode
36c24                 | '   hpar2 - key modifiers state
36c24                 | '       c - pressed (0) or released (1) flag
36c24                 | ' On exit:
36c24                 | '   hpar1 - bit     31 = 0 pressed, 1 released
36c24                 | '               30..17 = unused
36c24                 | '                   18 = scroll-lock state 
36c24                 | '                   17 = caps-lock state
36c24                 | '                   16 = num-lock state 
36c24                 | '                15..8 = key modifiers state
36c24                 | '                 7..0 = scancode
36c24                 | '------------------------------------------------------------------------------
36c24                 | hkbd_translate
36c24     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
36c28     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
36c2c     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
36c30     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
36c34     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
36c38     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
36c3c                 | 
36c3c                 |         if EMUPAD_MAX_PLAYER > 0
36c3c                 | 
36c3c                 |         if EMUPAD_BT0_BIT >= 0
36c3c                 |         end
36c3c                 |         if EMUPAD_BT1_BIT >= 0
36c3c                 |         end
36c3c                 |         if EMUPAD_BT2_BIT >= 0
36c3c                 |         end
36c3c                 |         if EMUPAD_BT3_BIT >= 0
36c3c                 |         end
36c3c                 |         if EMUPAD_BT4_BIT >= 0
36c3c                 |         end
36c3c                 |         if EMUPAD_BT5_BIT >= 0
36c3c                 |         end
36c3c                 |         if EMUPAD_BT6_BIT >= 0
36c3c                 |         end
36c3c                 |         if EMUPAD_BT7_BIT >= 0
36c3c                 |         end
36c3c                 |         if EMUPAD_BT8_BIT >= 0
36c3c                 |         end
36c3c                 |         if EMUPAD_BT9_BIT >= 0
36c3c                 |         end
36c3c                 | 
36c3c                 |         end
36c3c     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
36c40     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
36c44     1F 8C 47 F4 |                 bitc    hpar1, #31
36c48                 |         if KEYQUEUE_SIZE > 0
36c48     C4 09 B0 FE |                 loc pb,#keyq_head
36c4c     F7 71 E3 FA |                 rdword htmp,pb
36c50     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
36c54     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
36c58     B8 75 03 F6 |                 mov htmp2,htmp
36c5c     04 74 07 FA |                 mul htmp2,#4
36c60     F7 75 03 F1 |                 add htmp2,pb
36c64     02 74 07 F1 |                 add htmp2,#2
36c68     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
36c6c     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
36c70     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
36c74     F7 71 43 5C |         if_nz   wrbyte htmp,pb
36c78                 |         end
36c78     2D 00 7C FD |                 ret wcz
36c7c                 | 
36c7c                 | if HAVE_MOUSE
36c7c                 | '------------------------------------------------------------------------------
36c7c                 | ' Execute an IN interrupt transaction to poll for mouse activity.
36c7c                 | '------------------------------------------------------------------------------
36c7c                 | ' On entry:
36c7c                 | ' On exit:
36c7c                 | '------------------------------------------------------------------------------
36c7c                 | hget_mouse_in_report
36c7c     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
36c80     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
36c84     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
36c88     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
36c8c     CF 02 A0 FD |                 call    #do_int_in
36c90     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36c94     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
36c98                 | 
36c98     00 90 0F F2 |                 cmp     hpar3, #0               wz
36c9c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
36ca0                 | 
36ca0     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
36ca4     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
36ca8     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
36cac     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
36cb0                 | 
36cb0     27 F1 03 F6 |                 mov     ptra, urx_buff_p
36cb4     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
36cb8     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
36cbc     01 90 87 31 |         if_ae   sub     hpar3, #1
36cc0                 | 
36cc0     40 09 90 FE |                 loc     pa, #mouse_limits
36cc4     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
36cc8                 | 
36cc8                 |                 ' load xacc,yacc,zacc
36cc8     28 04 64 FD |                 setq    #3-1
36ccc     80 87 07 FB |                 rdlong  hr1,ptrb
36cd0                 |                 ' load limits and outptr
36cd0     28 04 64 FD |                 setq    #3-1
36cd4     F6 73 03 FB |                 rdlong  htmp1,pa
36cd8                 | 
36cd8     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
36cdc     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
36ce0     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
36ce4     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
36ce8     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
36cec     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
36cf0     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
36cf4     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
36cf8                 |               
36cf8                 | 
36cf8     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
36cfc     07 70 67 F7 |                 signx   htmp, #7
36d00     B8 87 03 F1 |                 add     hr1,htmp
36d04     00 72 0F F2 |                 cmp     htmp1,#0 wz
36d08     B9 87 63 53 |         if_ne   fles    hr1,htmp1
36d0c     00 86 47 53 |         if_ne   fges    hr1,#0
36d10                 | 
36d10     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
36d14     07 70 67 F7 |                 signx   htmp, #7
36d18     B8 89 03 F1 |                 add     hr2,htmp
36d1c     00 74 0F F2 |                 cmp     htmp2,#0 wz
36d20     BA 89 63 53 |         if_ne   fles    hr2,htmp2
36d24     00 88 47 53 |         if_ne   fges    hr2,#0
36d28                 |                 
36d28                 | 
36d28     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
36d2c     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
36d30     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
36d34     B8 8B 03 A1 |         if_z    add     hr3,htmp
36d38                 | 
36d38     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
36d3c     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
36d40                 | 
36d40                 |                 ' write back accumulators
36d40     28 04 64 FD |                 setq    #3-1
36d44     80 87 67 FC |                 wrlong  hr1,ptrb
36d48                 |                 ' if outptr set, write X/Y words
36d48     00 76 0F F2 |                 cmp htmp3,#0                    wz
36d4c     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
36d50     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
36d54     2D 00 64 FD |                 ret
36d58                 | end
36d58                 | 
36d58                 | '------------------------------------------------------------------------------
36d58                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
36d58                 | '------------------------------------------------------------------------------
36d58                 | ' On entry:
36d58                 | ' On exit:
36d58                 | '------------------------------------------------------------------------------
36d58                 | if _HAVE_GAMEPAD
36d58                 | hget_gp_in_report
36d58     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
36d5c     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
36d60                 | 
36d60     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
36d64     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
36d68     00 90 E3 F8 |                 getbyte hpar3
36d6c     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
36d70     CF 02 A0 FD |                 call    #do_int_in
36d74     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36d78     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
36d7c                 | 
36d7c     00 90 0F F2 |                 cmp     hpar3, #0               wz
36d80     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
36d84                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
36d84                 | 
36d84     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
36d88     00 70 E3 F8 |                 getbyte htmp                            ' |
36d8c     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
36d90     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
36d94     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
36d98     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
36d9c     B8 01 C0 F8 |                 setbyte htmp                            ' |
36da0                 | 
36da0                 | ' Note: the following code compares the current and previous reports
36da0                 | ' and process the data if there are changes to ease the debug output.
36da0                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
36da0                 | ' gpPreReport buffer.
36da0                 | 
36da0                 |                 ' ----- start of block to remove
36da0                 |                 {
36da0                 |                 }
36da0                 |                 ' ----- end of block to remove
36da0     F4 04 90 FE |                 loc pa,#hpad_translate
36da4     2A EC 63 FD |                 push pa
36da8                 | 
36da8                 |                 ' FALL THROUGH !!!!
36da8                 | 
36da8                 | '------------------------------------------------------------------------------
36da8                 | ' Decode controller report
36da8                 | '------------------------------------------------------------------------------
36da8                 | hid_decode
36da8                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
36da8     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
36dac     00 04 00 FF 
36db0     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
36db4                 | 
36db4     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
36db8                 | 
36db8     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
36dbc     00 2A E3 F8 |                 getbyte hidr_type
36dc0     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
36dc4     34 02 90 AD |         if_z    jmp     #hpad_xinput
36dc8     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
36dcc     1C 03 90 AD |         if_z    jmp     #hpad_ps3
36dd0     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
36dd4     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
36dd8     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
36ddc                 |                 
36ddc                 | 
36ddc                 | '------------------------------------------------------------------------------
36ddc                 | ' Handle HID controller (or mouse now
36ddc                 | ' On entry:
36ddc                 | '   ptrb - controller report
36ddc                 | '------------------------------------------------------------------------------
36ddc                 | hpad_hid
36ddc     1B 01 A0 FD |                 call    #get_hid_descr_buffer
36de0     F7 F1 03 F6 |                 mov     ptra, pb
36de4     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
36de8     00 EC 03 F6 |                 mov     pa, 0-0
36dec                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
36dec     19 2A 3B FF 
36df0     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
36df4                 | 
36df4                 | .next
36df4     00 EC 5F F2 |                 cmps    pa, #0      wcz
36df8     2D 00 7C ED |         if_be   ret     wcz
36dfc                 | 
36dfc     61 8D C7 FA |                 rdbyte  hpar1, ptra++
36e00     01 EC 87 F1 |                 sub     pa, #1
36e04     00 8E 07 F6 |                 mov     hpar2, #0
36e08                 | 
36e08     C6 71 03 F6 |                 mov     htmp, hpar1
36e0c     03 70 07 F5 |                 and     htmp, #$03
36e10     01 70 0F F2 |                 cmp     htmp, #1    wz
36e14     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
36e18     07 8E 67 A7 |         if_z    signx   hpar2,#7
36e1c     01 EC 87 A1 |         if_z    sub     pa, #1
36e20     02 70 0F F2 |                 cmp     htmp, #2    wz
36e24     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
36e28     0F 8E 67 A7 |         if_z    signx   hpar2,#15
36e2c     02 EC 87 A1 |         if_z    sub     pa, #2
36e30     03 70 0F F2 |                 cmp     htmp, #3    wz
36e34     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
36e38     04 EC 87 A1 |         if_z    sub     pa, #4
36e3c                 | 
36e3c     FC 8C 07 F5 |                 and     hpar1, #$FC
36e40                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
36e40                 | 
36e40     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
36e44     0C 01 90 AD |         if_z    jmp     #.report_id
36e48     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
36e4c     24 01 90 AD |         if_z    jmp     #.usage_page
36e50     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
36e54     2C 01 90 AD |         if_z    jmp     #.usage
36e58     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
36e5c     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
36e60     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
36e64     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
36e68     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
36e6c     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
36e70     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
36e74     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
36e78     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
36e7c     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
36e80     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
36e84     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
36e88     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
36e8c     64 FF 9F 5D |         if_nz   jmp     #.next
36e90                 | 
36e90     D8 1D A7 FB |                 tjf     hidr_state,#.next
36e94                 | 
36e94     03 8E 07 F5 |                 and     hpar2, #$03
36e98     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
36e9c     18 00 90 5D |         if_nz   jmp     #.skip
36ea0                 | 
36ea0     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
36ea4     20 00 90 AD |         if_z    jmp     #.axes
36ea8     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
36eac     5C 00 90 AD |         if_z    jmp     #.hats
36eb0     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
36eb4     70 00 90 AD |         if_z    jmp     #.buttons
36eb8                 | .skip
36eb8     8F 71 03 F6 |                 mov     htmp, hidr_size
36ebc     90 71 03 FA |                 mul     htmp, hidr_count
36ec0     B8 23 03 F1 |                 add     hidr_offset, htmp
36ec4     2C FF 9F FD |                 jmp     #.next
36ec8                 | .axes
36ec8                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
36ec8     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
36ecc     90 87 03 F6 |                 mov     hr1, hidr_count
36ed0                 | .l1
36ed0     91 8D 03 F6 |                 mov     hpar1, hidr_offset
36ed4     8F 8F 03 F6 |                 mov     hpar2, hidr_size
36ed8     04 03 B0 FD |                 call    #hpad_getbits
36edc     64 03 B0 FD |                 call    #hpad_normalize
36ee0     06 84 1F F2 |                 cmp     hr0, #6         wcz
36ee4     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
36ee8     00 88 43 C8 |         if_b    getnib  hr2
36eec     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
36ef0     5F 01 20 C9 |         if_b    setword retval
36ef4     01 84 07 C1 |         if_b    add     hr0, #1
36ef8     8F 23 03 F1 |                 add     hidr_offset, hidr_size
36efc     F4 87 6F FB |                 djnz    hr1, #.l1
36f00                 | 
36f00     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
36f04     01 1C 07 F6 |                 mov     hidr_state, #1
36f08     E8 FE 9F FD |                 jmp     #.next
36f0c                 | .hats
36f0c                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
36f0c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
36f10     8F 8F 03 F6 |                 mov     hpar2, hidr_size
36f14     C8 02 B0 FD |                 call    #hpad_getbits
36f18     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
36f1c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
36f20     01 1C 07 F6 |                 mov     hidr_state, #1
36f24     90 FF 9F FD |                 jmp     #.skip
36f28                 | .buttons
36f28                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
36f28     91 8D 03 F6 |                 mov     hpar1, hidr_offset
36f2c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
36f30     90 8F 03 FA |                 mul     hpar2, hidr_count
36f34     A8 02 B0 FD |                 call    #hpad_getbits
36f38     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
36f3c     B8 BF 62 F0 |                 shl     retval, htmp
36f40     5F 17 43 F5 |                 or      hidr_buttons, retval
36f44     90 71 03 F1 |                 add     htmp, hidr_count
36f48     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
36f4c     01 1C 07 F6 |                 mov     hidr_state, #1
36f50     64 FF 9F FD |                 jmp     #.skip
36f54                 | .report_id
36f54     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
36f58     2D 00 7C 5D |         if_nz   ret     wcz
36f5c     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
36f60     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
36f64     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
36f68     01 1C 67 56 |         if_nz   neg     hidr_state,#1
36f6c     01 F2 87 51 |         if_nz   sub     ptrb,#1
36f70     80 FE 9F FD |                 jmp     #.next
36f74                 | .usage_page
36f74     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
36f78     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
36f7c     04 1C 07 A6 |         if_z    mov     hidr_state, #4
36f80     70 FE 9F FD |                 jmp     #.next
36f84                 | .usage
36f84     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
36f88     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
36f8c     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
36f90     01 1C 07 A6 |         if_z    mov     hidr_state, #1
36f94     5C FE 9F AD |         if_z    jmp     #.next
36f98     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
36f9c     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
36fa0     01 1C 07 A6 |         if_z    mov     hidr_state, #1
36fa4     4C FE 9F AD |         if_z    jmp     #.next
36fa8     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
36fac     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
36fb0     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
36fb4     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
36fb8     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
36fbc     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
36fc0     10 00 90 AD |         if_z    jmp     #.usage_axis
36fc4     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
36fc8     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
36fcc     03 1C 07 A6 |         if_z    mov     hidr_state, #3
36fd0     20 FE 9F FD |                 jmp     #.next
36fd4                 | .usage_axis
36fd4     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
36fd8     18 FE 9F CD |         if_b    jmp     #.next
36fdc     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
36fe0     C7 01 00 F8 |                 setnib  hpar2
36fe4                 | 
36fe4     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
36fe8     C7 8F C3 F9 |                 decod   hpar2
36fec     C7 0F 43 F5 |                 or      hidr_flags, hpar2
36ff0                 | 
36ff0     01 24 07 F1 |                 add     hidr_usage_idx, #1
36ff4     02 1C 07 F6 |                 mov     hidr_state, #2
36ff8     F8 FD 9F FD |                 jmp     #.next
36ffc                 | 
36ffc                 | '------------------------------------------------------------------------------
36ffc                 | ' Handle XInput controller
36ffc                 | ' On entry:
36ffc                 | '   ptrb - controller report
36ffc                 | '------------------------------------------------------------------------------
36ffc                 | '   Default implementation translates the report to a pseudo-defacto hid
36ffc                 | '   standard and jumps to hpad_translate for actions.
36ffc                 | '   Implementors may take specific actions for this kind of controller.
36ffc                 | '------------------------------------------------------------------------------
36ffc                 | hpad_xinput
36ffc     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
37000     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
37004     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
37008     14 70 0F F2 |                 cmp     htmp, #$14      wz
3700c     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
37010                 | 
37010                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
37010                 | 
37010     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
37014     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
37018                 | 
37018     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3701c     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
37020     5F BF 22 F6 |                 not     retval
37024     5F 11 2B F9 |                 setword hidr_axis, retval, #1
37028     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3702c     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
37030     5F BF 22 F6 |                 not     retval
37034     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
37038                 | 
37038     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3703c     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
37040     C0 BE 1E F2 |                 cmp     retval, #192    wcz
37044     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
37048     F8 01 B0 FD |                 call    #hpad_normalize
3704c     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
37050     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
37054     C0 BE 1E F2 |                 cmp     retval, #192    wcz
37058     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3705c     E4 01 B0 FD |                 call    #hpad_normalize
37060     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
37064                 | 
37064     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
37068     81 BF E6 FA |                 rdword  retval, ptrb[1]
3706c     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
37070     00 16 47 F4 |                 bitc    hidr_buttons, #0
37074     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
37078     01 16 47 F4 |                 bitc    hidr_buttons, #1
3707c     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
37080     02 16 47 F4 |                 bitc    hidr_buttons, #2
37084     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
37088     03 16 47 F4 |                 bitc    hidr_buttons, #3
3708c     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
37090     04 16 47 F4 |                 bitc    hidr_buttons, #4
37094     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
37098     05 16 47 F4 |                 bitc    hidr_buttons, #5
3709c     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
370a0     08 16 47 F4 |                 bitc    hidr_buttons, #8
370a4     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
370a8     09 16 47 F4 |                 bitc    hidr_buttons, #9
370ac     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
370b0     0A 16 47 F4 |                 bitc    hidr_buttons, #10
370b4     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
370b8     0B 16 47 F4 |                 bitc    hidr_buttons, #11
370bc     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
370c0     0C 16 47 F4 |                 bitc    hidr_buttons, #12
370c4                 | 
370c4     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
370c8     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
370cc     7A BB 7A FF 
370d0     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
370d4     F9 FF 7F FF 
370d8     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
370dc     B9 71 5F F9 |                 altgn   htmp, #htmp1
370e0     00 70 43 F8 |                 getnib  htmp
370e4     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
370e8                 | 
370e8     AC 01 90 FD |                 jmp     #hpad_translate
370ec                 | 
370ec                 | '------------------------------------------------------------------------------
370ec                 | ' Handle PS3 controller
370ec                 | ' On entry:
370ec                 | '   ptrb - controller report
370ec                 | '------------------------------------------------------------------------------
370ec                 | '   Default implementation translates the report to a pseudo-defacto hid
370ec                 | '   standard and jumps to hpad_translate for actions.
370ec                 | '   Implementors may take specific actions for this kind of controller.
370ec                 | '------------------------------------------------------------------------------
370ec                 | hpad_ps3
370ec     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
370f0     01 70 0F F2 |                 cmp     htmp, #$01      wz
370f4     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
370f8                 | 
370f8                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
370f8                 | 
370f8     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
370fc     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
37100     40 01 B0 FD |                 call    #hpad_normalize
37104     5F 11 23 F9 |                 setword hidr_axis, retval, #0
37108     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
3710c     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
37110     30 01 B0 FD |                 call    #hpad_normalize
37114     5F 11 2B F9 |                 setword hidr_axis, retval, #1
37118     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
3711c     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
37120     20 01 B0 FD |                 call    #hpad_normalize
37124     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
37128     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
3712c     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
37130     10 01 B0 FD |                 call    #hpad_normalize
37134     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
37138     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
3713c     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
37140                 | 
37140     08 8C 07 F6 |                 mov     hpar1, #8
37144     13 8E 07 F6 |                 mov     hpar2, #19
37148     94 00 B0 FD |                 call    #hpad_getbits
3714c                 | 
3714c     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
37150     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
37154     00 16 47 F4 |                 bitc    hidr_buttons, #0
37158     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3715c     01 16 47 F4 |                 bitc    hidr_buttons, #1
37160     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
37164     02 16 47 F4 |                 bitc    hidr_buttons, #2
37168     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3716c     03 16 47 F4 |                 bitc    hidr_buttons, #3
37170     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
37174     04 16 47 F4 |                 bitc    hidr_buttons, #4
37178     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3717c     05 16 47 F4 |                 bitc    hidr_buttons, #5
37180     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
37184     06 16 47 F4 |                 bitc    hidr_buttons, #6
37188     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3718c     07 16 47 F4 |                 bitc    hidr_buttons, #7
37190     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
37194     08 16 47 F4 |                 bitc    hidr_buttons, #8
37198     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3719c     09 16 47 F4 |                 bitc    hidr_buttons, #9
371a0     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
371a4     0A 16 47 F4 |                 bitc    hidr_buttons, #10
371a8     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
371ac     0B 16 47 F4 |                 bitc    hidr_buttons, #11
371b0     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
371b4     0C 16 47 F4 |                 bitc    hidr_buttons, #12
371b8                 | 
371b8     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
371bc     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
371c0     09 FA 79 FF 
371c4     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
371c8     FF FA 7F FF 
371cc     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
371d0     B9 71 5F F9 |                 altgn   htmp, #htmp1
371d4     00 70 43 F8 |                 getnib  htmp
371d8     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
371dc                 | 
371dc     B8 00 90 FD |                 jmp     #hpad_translate
371e0                 | 
371e0                 | '------------------------------------------------------------------------------
371e0                 | ' Read bits from report data buffer
371e0                 | '------------------------------------------------------------------------------
371e0                 | ' On entry:
371e0                 | '   PTRB - report buffer
371e0                 | '   hpar1 - start bit
371e0                 | '   hpar2 - number of bits
371e0                 | ' On exit:
371e0                 | '   retval - bits
371e0                 | '------------------------------------------------------------------------------
371e0                 | hpad_getbits
371e0     C6 71 03 F6 |                 mov     htmp, hpar1
371e4     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
371e8     F9 71 03 F1 |                 add     htmp, ptrb
371ec     B8 BF 02 FB |                 rdlong  retval, htmp
371f0                 | 
371f0     C6 73 03 F6 |                 mov     htmp1, hpar1
371f4     07 72 07 F5 |                 and     htmp1, #$07     ' shift
371f8     B9 BF 42 F0 |                 shr     retval, htmp1
371fc                 | 
371fc     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
37200     10 00 90 1D |         if_a    jmp     #.l1
37204                 | 
37204     C7 8F C3 F9 |                 decod   hpar2
37208     01 8E 87 F1 |                 sub     hpar2, #1
3720c     C7 BF 02 F5 |                 and     retval, hpar2
37210     2D 00 64 FD |                 ret
37214                 | .l1
37214     FF 7F 00 FF 
37218     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3721c     03 70 07 F1 |                 add     htmp, #3
37220     B8 75 03 FB |                 rdlong  htmp2, htmp
37224     18 8E 87 F1 |                 sub     hpar2, #24
37228     C7 8F C3 F9 |                 decod   hpar2
3722c     01 8E 87 F1 |                 sub     hpar2, #1
37230     B9 75 43 F0 |                 shr     htmp2, htmp1
37234     C7 75 03 F5 |                 and     htmp2, hpar2
37238     18 74 67 F0 |                 shl     htmp2, #24
3723c     BA BF 42 F5 |                 or      retval, htmp2
37240     2D 00 64 FD |                 ret
37244                 | 
37244                 | '------------------------------------------------------------------------------
37244                 | ' Normalize value to signed word (-32768 / 32767)
37244                 | '------------------------------------------------------------------------------
37244                 | ' On entry:
37244                 | '   retval - value to normalize
37244                 | '   hidr_lminmax - min (word 1) max (word 0) value range
37244                 | '   - or -
37244                 | '   hidr_pminmax - min (word 1) max (word 0) value range
37244                 | '   hidr_size - value bits length
37244                 | ' On exit:
37244                 | '   retval - normalized value
37244                 | '------------------------------------------------------------------------------
37244                 | hpad_normalize
37244     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
37248     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3724c     2D 00 64 AD |         if_z    ret
37250     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
37254     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
37258     0F 72 77 F7 |                 signx   htmp1, #15      wc
3725c     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
37260     00 BE 66 C7 |         if_c    signx   retval, #0-0
37264     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
37268     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3726c     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
37270     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
37274     B8 71 53 F6 |                 abs     htmp            wc
37278     1F BE 0E F4 |                 testb   retval, #31     wz
3727c     5F BF 42 F6 |                 abs     retval
37280     B8 BF 12 FD |                 qdiv    retval, htmp
37284     18 BE 62 FD |                 getqx   retval
37288     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3728c     C0 FF 7F FF 
37290     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
37294     2D 00 64 FD |                 ret
37298                 | 
37298                 | '------------------------------------------------------------------------------
37298                 | ' Perform controller actions
37298                 | ' On entry:
37298                 | '    hidr_id        report id
37298                 | '    hidr_axis      axis value (signed word, 2 axes per long)
37298                 | '                      X = hidr_axis+0, #0
37298                 | '                      Y = hidr_axis+0, #1
37298                 | '                      Z = hidr_axis+1, #0
37298                 | '                     RX = hidr_axis+1, #1
37298                 | '                     RY = hidr_axis+2, #0
37298                 | '                     RZ = hidr_axis+2, #1
37298                 | '    hidr_buttons   buttons state (bits 0 to 31)
37298                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
37298                 | '
37298                 | '                     -------3 -------2 -------1 -------0 byte
37298                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
37298                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
37298                 | '                                zyx||| |||||||| ++++++++ n. buttons
37298                 | '                                |||||| ||||++++--------- n. axes
37298                 | '                                |||||| ++++------------- n. hats
37298                 | '                                ++++++------------------ valid axes
37298                 | '------------------------------------------------------------------------------
37298                 | hpad_translate
37298                 | 
37298                 | 
37298                 |         if HAVE_HIDPAD
37298     84 0C F0 FE |                 loc     ptrb,#hidpad_report
3729c     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
372a0     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
372a4     01 70 E7 F2 |                 cmpsub  htmp,#1
372a8     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
372ac     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
372b0     2D 00 7C 3D |         if_ae   ret     wcz
372b4     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
372b8     B8 F3 03 F1 |                 add     ptrb,htmp
372bc     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
372c0     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
372c4     28 0C 64 FD |                 setq    #7-1
372c8     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
372cc                 |         end
372cc                 | 
372cc                 | 
372cc                 |         if EMUPAD_MAX_PLAYER > 0
372cc                 | .emupad_no_hat
372cc                 |         if EMUPAD_BT0_BIT >= 0
372cc                 |         end
372cc                 |         if EMUPAD_BT1_BIT >= 0
372cc                 |         end
372cc                 |         if EMUPAD_BT2_BIT >= 0
372cc                 |         end
372cc                 |         if EMUPAD_BT3_BIT >= 0
372cc                 |         end
372cc                 |         if EMUPAD_BT4_BIT >= 0
372cc                 |         end
372cc                 |         if EMUPAD_BT5_BIT >= 0
372cc                 |         end
372cc                 |         if EMUPAD_BT6_BIT >= 0
372cc                 |         end
372cc                 |         if EMUPAD_BT7_BIT >= 0
372cc                 |         end
372cc                 |         if EMUPAD_BT8_BIT >= 0
372cc                 |         end
372cc                 |         if EMUPAD_BT9_BIT >= 0
372cc                 |         end
372cc                 | .emupad_slot_over
372cc                 |         end
372cc                 | 
372cc                 |         if 0
372cc                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
372cc                 | 
372cc                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
372cc                 | 
372cc                 |         end
372cc     2D 00 64 FD |                 ret
372d0                 | end
372d0                 | 
372d0                 | if EMUPAD_MAX_PLAYER > 0
372d0                 | '------------------------------------------------------------------------------
372d0                 | ' Clear EmuPad state
372d0                 | '------------------------------------------------------------------------------
372d0                 | emupad_reset
372d0                 | 
372d0                 | '------------------------------------------------------------------------------
372d0                 | ' Get EmuPad Player number for current device (into retval)
372d0                 | ' Z flag is also set if current device is valid
372d0                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
372d0                 | '------------------------------------------------------------------------------
372d0                 | emupad_getnum
372d0                 | .loop
372d0                 | '------------------------------------------------------------------------------
372d0                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
372d0                 | '------------------------------------------------------------------------------
372d0                 | emupad_discon
372d0                 | .loop         
372d0                 |         
372d0                 |         ' FALL THROUGH!!!
372d0                 | 
372d0                 | '------------------------------------------------------------------------------
372d0                 | ' Update EmuPad reports (all of them...)
372d0                 | '------------------------------------------------------------------------------
372d0                 | emupad_write_reports
372d0                 | .devloop
372d0                 | 
372d0                 | end
372d0                 | 
372d0                 | 
372d0                 | '------------------------------------------------------------------------------
372d0                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
372d0                 | '------------------------------------------------------------------------------
372d0                 | ' On entry:
372d0                 | ' On exit:
372d0                 | '------------------------------------------------------------------------------
372d0                 | hget_hub_status
372d0     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
372d4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
372d8     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
372dc     01 90 2F F9 |                 setword hpar3, #1, #1
372e0     CF 02 A0 FD |                 call    #do_int_in
372e4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
372e8     0C 00 90 AD |         if_z    jmp     #.data
372ec     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
372f0     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
372f4     2D 00 64 FD |                 ret
372f8                 | .data
372f8     00 90 0F F2 |                 cmp     hpar3, #0               wz
372fc     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
37300                 | 
37300     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
37304     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
37308     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3730c     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
37310                 |                 debug(ubin_long(hub_status_chg))
37310                 | 
37310     01 5A 06 F6 |                 mov     hdev_port, #1
37314                 | .loop
37314     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
37318     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3731c     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
37320     F0 FF 9F 3D |         if_nc   jmp     #.loop
37324     2D 00 64 FD |                 ret
37328                 | 
37328                 | hub_port_handler
37328     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3732c     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
37330     27 EF 03 F6 |                 mov     pb, urx_buff_p
37334     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
37338     55 02 A0 FD |                 call    #control_read
3733c     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
37340                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
37340                 | 
37340     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
37344     50 01 90 5D |         if_x0   jmp     #.other
37348     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3734c     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
37350     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
37354     A0 02 A0 FD |                 call    #control_write
37358     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3735c     7C 01 90 5D |         if_x0   jmp     #.disconnect
37360     B0 99 02 F6 |                 mov     hctwait, _100ms_
37364     EF 02 A0 FD |                 call    #poll_waitx
37368                 | 
37368     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3736c     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
37370     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
37374     A0 02 A0 FD |                 call    #control_write
37378                 | 
37378     02 76 07 F6 |                 mov     htmp3, #2
3737c                 | .wait_reset
3737c     AC 99 02 F6 |                 mov     hctwait, _8ms_
37380     EF 02 A0 FD |                 call    #poll_waitx
37384     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
37388     27 EF 03 F6 |                 mov     pb, urx_buff_p
3738c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
37390     55 02 A0 FD |                 call    #control_read
37394     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
37398     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3739c     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
373a0                 | 
373a0     10 02 D0 FE |                 loc     ptra, #clr_port_feat
373a4     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
373a8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
373ac     A0 02 A0 FD |                 call    #control_write
373b0                 | 
373b0     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
373b4                 | .wait_recover
373b4     A7 99 02 F6 |                 mov     hctwait, _1ms_
373b8     EF 02 A0 FD |                 call    #poll_waitx
373bc     FD 71 6F FB |                 djnz    htmp,#.wait_recover
373c0                 | 
373c0     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
373c4     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
373c8     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
373cc                 | 
373cc     00 08 00 FF 
373d0     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
373d4     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
373d8     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
373dc     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
373e0     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
373e4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
373e8     48 01 90 5D |         if_nz   jmp     #.done
373ec                 | .get_dev_desc
373ec     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
373f0     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
373f4     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
373f8     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
373fc     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
37400     01 71 57 FC |                 wrword  htmp, ptra[wValue]
37404     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
37408     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3740c     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
37410     AC 99 02 F6 |                 mov     hctwait, _8ms_
37414     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
37418     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3741c     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
37420     BE 00 A0 FD |                 call    #calc_crc5
37424     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
37428     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3742c     F7 AD C2 FA |                 rdbyte  total_data, pb
37430     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
37434     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
37438     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3743c     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
37440     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
37444     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
37448                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
37448     9F 99 02 F6 |                 mov     hctwait, _500us_
3744c     EF 02 A0 FD |                 call    #poll_waitx
37450     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
37454     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
37458     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3745c     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
37460     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37464     CC 00 90 5D |         if_nz   jmp     #.done
37468     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3746c     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
37470     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
37474     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
37478     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3747c     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
37480     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
37484     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
37488     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3748c     A4 00 90 CD |         if_b    jmp     #.done
37490     6C F0 BF FD |                 call    #hparse_con_desc
37494     9C 00 90 FD |                 jmp     #.done
37498                 | 
37498                 | .other
37498     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3749c     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
374a0     28 00 90 AD |         if_x1   jmp     #.reset_feature
374a4     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
374a8     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
374ac     1C 00 90 AD |         if_x1   jmp     #.reset_feature
374b0     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
374b4     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
374b8     10 00 90 AD |         if_x1   jmp     #.reset_feature
374bc     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
374c0     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
374c4     04 00 90 AD |         if_x1   jmp     #.reset_feature
374c8     68 00 90 FD |                 jmp     #.done
374cc                 | .reset_feature
374cc     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
374d0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
374d4     A0 02 A0 FD |                 call    #control_write
374d8     58 00 90 FD |                 jmp     #.done
374dc                 | .disconnect
374dc                 | 
374dc     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
374e0     00 70 E3 F8 |                 getbyte htmp
374e4     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
374e8     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
374ec     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
374f0     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
374f4     00 76 06 A6 |         if_z    mov     kb_led_states, #0
374f8     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
374fc                 |         if EMUPAD_MAX_PLAYER > 0
374fc                 |         end
374fc                 |         if HAVE_MOUSE
374fc     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
37500     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
37504     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
37508                 |         end
37508                 |         if HAVE_HIDPAD
37508     14 0A F0 FE |                 loc ptrb,#hidpad_report
3750c     2D 71 03 F6 |                 mov htmp,hdev_port
37510     01 70 E7 F2 |                 cmpsub htmp,#1
37514     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
37518     B8 F3 03 F1 |                 add ptrb,htmp
3751c     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
37520     80 01 6C FC |                 wrlong #0,ptrb
37524                 |         end
37524                 | 
37524     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
37528     00 00 C4 F8 |                 setbyte #0
3752c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
37530     00 00 04 F6 |                 mov     0-0, #0
37534                 | 
37534                 | .done
37534     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
37538     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3753c     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
37540     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
37544     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
37548     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3754c                 | 
3754c     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
37550     27 EF 03 F6 |                 mov     pb, urx_buff_p
37554     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
37558     55 02 A0 FD |                 call    #control_read
3755c     00 69 06 FB |                 rdlong  hub_port_status, ptra
37560                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
37560     2D 00 64 FD |                 ret
37564                 | 
37564                 | '------------------------------------------------------------------------------
37564                 | ' Partially populated SETUP packets
37564                 | '------------------------------------------------------------------------------
37564     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
37565     06          |                 byte    REQ_GET_DESC
37566     00 01       |                 word    TYPE_DEVICE << 8
37568     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3756a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3756c     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3756d     06          |                 byte    REQ_GET_DESC
3756e     00 02       |                 word    TYPE_CONFIG << 8
37570     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
37572     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
37574     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
37575     09          |                 byte    REQ_SET_CONFIG
37576     00 00       |                 word    0       ' Configuration value
37578     00 00       |                 word    0       ' Zero
3757a     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3757c     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3757d     05          |                 byte    REQ_SET_ADDR
3757e     00 00       |                 word    0       ' Zero
37580     00 00       |                 word    0       ' Zero
37582     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
37584                 | '------------------------------------------------------------------------------
37584                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
37584                 | ' wValue field dictates which protocol should be used.
37584                 | '
37584                 | ' When initialized, all devices default to report protocol. However the host
37584                 | ' should not make any assumptions about the device state and should set the
37584                 | ' desired protocol whenever initializing a device.
37584                 | '------------------------------------------------------------------------------
37584     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
37585     0B          |                 byte    HID_SET_PROTO
37586     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
37588                 |                                                 ' (HID 1.11 Section 7.2.6).
37588     00 00       |                 word    0               ' Interface index number.
3758a     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3758c                 | '------------------------------------------------------------------------------
3758c     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3758d     0A          |                 byte    HID_SET_IDLE
3758e     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
37590                 |                                         ' reporting until a change is detected in the report data
37590                 | 
37590                 |                                         ' (HID 1.11 Section 7.2.4).
37590     00 00       |                 word    0       ' Interface index number.
37592     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
37594     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
37595     09          |                 byte    HID_SET_REPORT
37596     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
37598                 |                                         ' (HID 1.11 Section 7.2.2).
37598     00 00       |                 word    0       ' Interface index number.
3759a     00 00       |                 word    0       ' Size of the report, in bytes.
3759c     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3759d     06          |                 byte    REQ_GET_DESC
3759e     00 22       |                 word    TYPE_REPORT << 8
375a0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
375a2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
375a4                 | '------------------------------------------------------------------------------
375a4     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
375a5     06          |                 byte    REQ_GET_DESC
375a6     00 29       |                 word    TYPE_HUB << 8
375a8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
375aa     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
375ac     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
375ad     03          |                 byte    REQ_SET_FEATURE
375ae     00 00       |                 word    0       ' port power
375b0     01 00       |                 word    1       ' Port index number (1+)
375b2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
375b4     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
375b5     01          |                 byte    REQ_CLEAR_FEATURE
375b6     00 00       |                 word    0       ' port power
375b8     01 00       |                 word    1       ' Port index number (1+)
375ba     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
375bc     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
375bd     00          |                 byte    REQ_GET_STATUS
375be     00 00       |                 word    0
375c0     01 00       |                 word    1       ' Port index number (1+)
375c2     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
375c4                 | '------------------------------------------------------------------------------
375c4                 | if _HAVE_GAMEPAD
375c4     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
375c8                 | ps3_command_buff
375c8     00 00 00 00 
375cc     00          |                 byte    $00, $00, $00, $00, $00
375cd     00 00 00 00 
375d1     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
375d2     FF 27 10 00 
375d6     32          |                 byte    $FF, $27, $10, $00, $32
375d7     FF 27 10 00 
375db     32          |                 byte    $FF, $27, $10, $00, $32
375dc     FF 27 10 00 
375e0     32          |                 byte    $FF, $27, $10, $00, $32
375e1     FF 27 10 00 
375e5     32          |                 byte    $FF, $27, $10, $00, $32
375e6     00 00 00 00 
375ea     00          |                 byte    $00, $00, $00, $00, $00
375eb     00 00 00 00 
375ef     00          |                 byte    $00, $00, $00, $00, $00
375f0     00 00 00 00 
375f4     00          |                 byte    $00, $00, $00, $00, $00
375f5     00 00 00    |                 byte    $00, $00, $00
375f8                 | '------------------------------------------------------------------------------
375f8     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
375fb                 |                                         ' 0x01 All blinking
375fb                 |                                         ' 0x02 1 flashes, then on
375fb                 |                                         ' 0x03 2 flashes, then on
375fb                 |                                         ' 0x04 3 flashes, then on
375fb                 |                                         ' 0x05 4 flashes, then on
375fb                 |                                         ' 0x06 1 on
375fb                 |                                         ' 0x07 2 on
375fb                 |                                         ' 0x08 3 on
375fb                 |                                         ' 0x09 4 on
375fb                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
375fb                 |                                         ' 0x0B Blinking*
375fb                 |                                         ' 0x0C Slow blinking*
375fb                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
375fb     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
375fe     00          |                 byte    $00             ' Left rumble
375ff     00          |                 byte    $00             ' Right rumble
37600     00 00 00    |                 byte    $00, $00, $00
37603     00          | end
37604                 | alignl
37604                 | 
37604                 | if HAVE_MOUSE
37604     00 00 00 00 
37608     00 00 00 00 | mouse_limits long 0[2]
3760c     00 00 00 00 | mouse_outptr long 0
37610                 | end
37610                 | 
37610                 | if KEYQUEUE_SIZE > 0
37610     00          | keyq_head byte 0
37611     00          | keyq_tail byte 0
37612     00 00 00 00 
      ...             
3780e     00 00 00 00 
37812     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
37814                 | alignl
37814                 | end
37814                 | 
37814                 | if EMUPAD_MAX_PLAYER > 0
37814                 | emupad_rule_buffer
37814                 | if EMUPAD_BUILTIN_RULES
37814                 | file "padmap_builtin.dat"
37814                 | end
37814                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
37814                 | '' Default rule directly follows!
37814                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
37814                 | end
37814                 | 
37814                 | '------------------------------------------------------------------------------
37814                 | ' The USB data cache area gets zero-filled at every device disconnect
37814                 | '------------------------------------------------------------------------------
37814                 | usb_cache_start
37814                 | 
37814                 | ' HID descriptor and report buffers
37814                 | if !!OVERLAP_MEMORY
37814     00 00 00 00 
      ...             
37f0c     00 00 00 00 
37f10     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
37f14                 | end
37f14     00 00 00 00 
37f18     00 00 00 00 | hkbd_report     byte    0[8]
37f1c     00 00 00 00 | hkbd_led_rep    byte    0
37f20                 | alignl
37f20                 | 
37f20                 | if HAVE_HIDPAD
37f20     00 00 00 00 
      ...             
37fdc     00 00 00 00 
37fe0     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
37fe4                 | end
37fe4                 | 
37fe4                 | ' HUB descriptor
37fe4     00          | hub_descr       byte    0   ' bDescLength
37fe5     00          |                 byte    0   ' bDescriptorType
37fe6     00          |                 byte    0   ' bNbrPorts
37fe7     00 00       |                 word    0   ' wHubCharacteristics
37fe9     00          |                 byte    0   ' bPwrOn2PwrGood
37fea     00          |                 byte    0   ' bHubContrCurrent
37feb     00          |                 byte    0   ' DeviceRemoveable
37fec     00          |                 byte    0   ' PortPwrCtrlMask
37fed                 | 
37fed                 | usb_cache_end
37fed                 | 
37fed                 | if HAVE_MOUSE
37fed     00 00 00 00 | mouse_xacc      long 0
37ff1     00 00 00 00 | mouse_yacc      long 0
37ff5     00 00 00 00 | mouse_zacc      long 0
37ff9     00          | mouse_bstate    byte 0
37ffa     00          | mouse_lpending  byte 0
37ffb     00          | mouse_rpending  byte 0
37ffc     00          | mouse_mpending  byte 0
37ffd     00          | mouse_lock      byte 0
37ffe     00 00 00    |                 byte 0[3] ' padding
38001                 | end
38001                 | 
38001     00 00 00 00 
      ...             
38079     00 00 00 00 
3807d     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
38081     00 00 00 00 
38085     00 00 00 00 
38089     00 00 00 00 
3808d     00 00 00 00 
38091     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
38093     00 00 00 00 
      ...             
3818b     00 00 00 00 
3818f     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
38193                 | 
38193     00          | driver_cog      byte    0                       ' Current driver cog + 1
38194                 | 	alignl
38194                 | _audio096_spin2_dat_
38194                 | 
38194                 | audio       org     0
38194                 | 
38194     61 C9 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
38198     61 17 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3819c     61 23 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
381a0                 | 
381a0     01 EC 63 FD |             cogid   pa                   ' compute cogid
381a4     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
381a8     F6 C9 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
381ac     E4 C6 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
381b0                 | 
381b0     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
381b4     0E 20 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
381b8     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
381bc     0F 20 06 FC |             wrpin   dac2,#right
381c0     0F 00 1E FC |             wxpin   #256,#right    
381c4     41 9C 64 FD |             dirh    #left addpins 1
381c8     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
381cc     CB E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
381d0     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
381d4                 |             
381d4                 | '---------------------------------------------------------------------------------        
381d4                 | '----------------- The main loop -------------------------------------------------
381d4                 | '---------------------------------------------------------------------------------
381d4                 | 
381d4     D4 AA 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
381d8     10 00 90 CD |       if_c  jmp     #loop1
381dc                 |   
381dc     09 FC 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
381e0     D4 FC 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
381e4     D3 00 80 F1 |             sub     0-0,a40000000
381e8     FD FD 6D FB |             djnz    cn,#p402
381ec                 |     
381ec     00 FC 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
381f0     D6 FE 01 F6 |             mov     ct,time1            ' with the lowest next sample time
381f4     D7 FE 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
381f8     01 FC 05 C6 |     if_c    mov     cn,#1
381fc     D8 FE 39 F3 |             fle     ct,time3 wcz
38200     02 FC 05 C6 |     if_c    mov     cn,#2     
38204     D9 FE 39 F3 |             fle     ct,time4 wcz
38208     03 FC 05 C6 |     if_c    mov     cn,#3
3820c     DA FE 39 F3 |             fle     ct,time5 wcz
38210     04 FC 05 C6 |     if_c    mov     cn,#4
38214     DB FE 39 F3 |             fle     ct,time6 wcz
38218     05 FC 05 C6 |     if_c    mov     cn,#5
3821c     DC FE 39 F3 |             fle     ct,time7 wcz
38220     06 FC 05 C6 |     if_c    mov     cn,#6
38224     DD FE 39 F3 |             fle     ct,time8 wcz
38228     07 FC 05 C6 |     if_c    mov     cn,#7
3822c                 | 
3822c                 | 
3822c                 | '----------------------------------------------------------------------------------
3822c                 | '------------- Compute channel samples --------------------------------------------
3822c                 | '----------------------------------------------------------------------------------
3822c                 | 
3822c                 | 
3822c     FE BC 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
38230     06 BC 65 F0 |             shl     channeladd,#6
38234     DE F0 03 F1 |             add     ptra,channeladd
38238                 | 
38238     28 16 64 FD |             setq    #11                        	' read parameters
3823c     00 D3 05 FB |             rdlong  pointer0,ptra
38240                 |     	    
38240     1F E0 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
38244     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
38248     F0 C0 31 F9 |             getword qq,command0,#0            	' get the new rate
3824c     4E C0 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
38250     E0 C0 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
38254     00 C0 0D F2 |             cmp     qq,#0 wz                         
38258     4E 20 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3825c     4E 1E 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
38260                 |             
38260     1E E0 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
38264     E4 C6 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
38268     00 C6 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3826c                 | 
3826c     EA 02 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
38270     EA 04 3A F9 |             getword oldrs,sample0,#1
38274     EE F8 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
38278     EE F6 31 F9 |     	    getword avol0,volpan0,#0
3827c     EF F4 39 F9 |             getword askip0,freqskip0,#1    	    
38280     EF F2 31 F9 |             getword afreq0,freqskip0,#0
38284                 | 
38284     D6 FC 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
38288     00 00 02 F6 |             mov     dt0,0-0    
3828c     D5 00 82 F1 |             sub     dt0,time0
38290                 |             
38290     D6 FC 8D F9 |             altd    cn, #time1                ' add channel period to channel time
38294     F9 00 00 F1 |             add     0-0,afreq0  	
38298                 |             
38298                 | '---- envelopes
38298                 |             
38298     00 E4 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3829c     20 00 00 AF 
382a0     00 44 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
382a4     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
382a8                 | 
382a8     F9 44 02 F6 |             mov     envs1,afreq0
382ac     F3 44 02 FA |             mul     envs1,envspd0
382b0     22 E3 01 F1 |             add     envph0,envs1 
382b4                 | 
382b4     F1 40 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
382b8     06 40 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
382bc     20 43 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
382c0     10 40 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
382c4     F4 40 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
382c8     F4 40 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
382cc     00 42 06 36 |     if_ge   mov     envlo,#0
382d0     F4 E2 01 36 |     if_ge   mov     envph0,envlen0
382d4     16 E2 65 30 |     if_ge   shl     envph0,#22
382d8                 | 
382d8     20 45 02 F6 |             mov     envs1,envhi			' get the phase acc
382dc     01 44 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
382e0     F2 44 02 F1 |             add     envs1,envptr0		' and add the pointer
382e4     22 45 02 FB |             rdlong  envs1,envs1			' then read 2 entries
382e8     22 47 3A F9 |             getword envs2,envs1,#1		' next value
382ec     22 45 32 F9 |             getword envs1,envs1,#0		' current value
382f0     21 47 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
382f4     21 43 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
382f8     21 45 02 FA |             mul     envs1,envlo
382fc     23 45 02 F1 |             add     envs1,envs2
38300     12 44 46 F0 |             shr     envs1,#18			' normalize it to $4000
38304                 |             
38304     1B D6 0D F4 | p410        testb   sstart0, #27 wz
38308     1B C2 61 AD |     if_z    getrnd  spl
3830c     58 00 90 AD |     if_z    jmp     #p406
38310                 |  
38310     FA D2 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
38314     E9 3E C2 F8 |             setbyte pointer00,pointer0,#0
38318     08 D2 45 F0 |             shr     pointer0,#8
3831c                 |          
3831c     1F D6 0D F4 |             testb   sstart0,#31 wz            
38320     01 D2 65 A0 |     if_z    shl     pointer0,#1        
38324     1C D6 0D F4 |             testb   sstart0,#28 wz            
38328     01 D2 65 A0 |     if_z    shl     pointer0,#1        
3832c                 |         
3832c     ED D2 19 F2 |             cmp     pointer0,lend0 wcz
38330     ED D2 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
38334     EC D2 01 31 |     if_ge   add     pointer0,lstart0       
38338                 |             
38338     E9 C0 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3833c     EB C0 01 F1 |             add     qq,sstart0            
38340                 | 
38340     FF C7 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
38344     E0 C2 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
38348     14 01 B0 1D |     if_gt   call    #cache_read
3834c                 |          
3834c     1F D6 0D F4 |             testb   sstart0,#31 wz 
38350     08 C2 65 50 |     if_nz   shl     spl,#8
38354     08 D2 65 50 |     if_nz   shl     pointer0,#8
38358     07 D2 65 A0 |     if_z    shl     pointer0,#7
3835c     1C D6 0D F4 |             testb   sstart0,#28 wz            
38360     01 D2 45 A0 |     if_z    shr     pointer0,#1    
38364     1F D3 C1 F8 | 	    setbyte pointer0,pointer00,#0       
38368                 | 
38368                 | 
38368     22 C3 31 FA | p406        scas    spl,envs1			' apply envelope
3836c     00 C2 01 F6 |             mov     spl,0-0
38370     FB C2 31 FA |             scas    spl,avol0                 	' apply volume
38374     00 C2 01 F6 |             mov     spl,0-0
38378                 | 
38378     FC C2 31 FA |             scas    spl,apan0                 	' apply pan
3837c     00 06 02 F6 |             mov     ls0,0-0
38380     20 00 00 FF 
38384     00 C0 05 F6 |             mov     qq,##16384
38388     FC C0 81 F1 |             sub     qq,apan0
3838c     E0 C2 31 FA |             scas    spl,qq
38390     00 08 02 F6 |             mov     rs0, 0-0
38394                 | 
38394     02 0D 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
38398     04 0D 02 F1 |             add     rs,rs0
3839c     01 0B 82 F1 |             sub     ls,oldls
383a0     03 0B 02 F1 |             add     ls,ls0
383a4                 |    
383a4     04 D5 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
383a8     03 D5 21 F9 |             setword sample0,ls0,#0
383ac                 |             
383ac     1E D6 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
383b0     00 D2 05 A6 |     if_z    mov     pointer0, #0  		
383b4     00 E2 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
383b8                 |   '  if_z    mov     sample0,#0
383b8     02 D7 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
383bc     1D D6 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
383c0     04 00 00 AF 
383c4     00 AC 05 A1 |     if_z    add     time1,##2048
383c8     D6 AE 01 A6 |     if_z    mov     time2,time1
383cc     02 D7 65 AC |     if_z    wrlong  sstart0,ptra[2]
383d0                 | 
383d0     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
383d4     00 D3 65 FC |             wrlong  pointer0,ptra
383d8     08 E3 65 FC |             wrlong  envph0,ptra[8]
383dc     DE F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
383e0                 |                       
383e0     D5 FA 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
383e4     FF BF 25 A7 |     if_z    decmod  front, #511          
383e8                 |          
383e8     05 03 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
383ec     06 05 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
383f0     0F 02 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
383f4     0F 04 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
383f8                 | 	    
383f8                 | 		    
383f8     01 05 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
383fc     08 0F 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
38400     02 11 02 F6 |             mov     newsample, oldrs       
38404                 | 
38404     D5 FA 01 F6 |             mov     oldt0,time0              ' update global time
38408     00 AB 01 F1 |             add     time0,dt0    
3840c                 |                                      
3840c     00 00 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
38410     D8 FD 9F AD |     if_z    jmp     #loop1
38414     00 C1 01 F6 |             mov     qq,dt0
38418                 |   
38418     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3841c     00 BE 9D F2 |             cmpr    front, #0-0 wcz
38420     F4 FF 9F AD |     if_e    jmp     #p301    
38424                 | 		
38424     00 16 0E F2 | 	    cmp     scbase,#0 wz
38428     20 00 90 AD |     if_z    jmp     #p302	   
3842c                 |   
3842c     3F 1C 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
38430     0C 1B 02 C6 |     if_c    mov     scptr2,scptr
38434     02 1A 66 C0 |     if_c    shl     scptr2,#2
38438     0B 1B 02 C1 |     if_c    add     scptr2,scbase     
3843c     60 1A 66 FC |             wrlong  scptr2,#$60
38440     0D 0F 62 CC |     if_c    wrlong  oldsample,scptr2
38444     01 00 00 CF 
38448     7F 18 06 C7 |     if_c    incmod  scptr,##639
3844c                 | 			    
3844c     DF 0E 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
38450     00 00 00 FF 
38454     FF BF 05 F7 |             incmod  front, ##511
38458     EF C1 6D FB |             djnz    qq,#p301
3845c                 |             
3845c     74 FD 9F FD |             jmp     #loop            'loop
38460                 | 
38460                 | '----------------------------------------------------------------------------------
38460                 | '------------- This is the end of the main loop -----------------------------------
38460                 | '----------------------------------------------------------------------------------
38460                 | 
38460                 | '----------------------------------------------------------------------------------
38460                 | '------------- PSRAM cache ----------- --------------------------------------------
38460                 | '----------------------------------------------------------------------------------
38460                 | 
38460                 | ' There are 8 cache pointers for 8 channels
38460                 | ' if 24 higher bits of address=cache, then get a word from the cache
38460                 | ' else load the cache from PSRAM, update the pointer, then read a sample
38460                 | 
38460                 | 
38460     E0 3A E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
38464                 |             
38464     E0 3C 02 F6 | 	    mov     addrhi,qq		
38468     08 3C 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3846c     12 FD 95 F9 | 	    alts    cn,#cache1            
38470     00 3C 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
38474     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
38478                 | 	
38478     12 FD 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
3847c     1E 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
38480     1E 35 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
38484     08 34 66 F0 | 	    shl     cmd,#8
38488     0B 34 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3848c     FE 36 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
38490     08 36 66 F0 |             shl     hubaddr,#8                  '
38494     11 37 02 F1 |             add     hubaddr,hubptr 
38498     00 39 06 F6 |             mov     count,#256                  ' 256 bytes
3849c     28 04 64 FD |             setq    #2                          ' write 3 longs
384a0     E3 34 62 FC |             wrlong  cmd, mailbox                ' run it
384a4     E3 34 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
384a8     FE 35 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
384ac                 |             
384ac                 | 	
384ac     FE C0 01 F6 | p701	    mov     qq,cn			' cache hit
384b0     08 C0 65 F0 | 	    shl     qq,#8			' compute the cache start
384b4     11 C1 01 F1 | 	    add     qq,hubptr
384b8     1D C1 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
384bc     E0 C2 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
384c0                 |           
384c0                 | 
384c0                 | '--------------------------------------------------------------------------
384c0                 | '------ Interrupt service -------------------------------------------------
384c0                 | '------ Output the sample, get the next one if exists ---------------------
384c0                 | '--------------------------------------------------------------------------
384c0                 | 
384c0     0E CA 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
384c4     0F CC 25 FC |             wypin   rsample,#right       '4
384c8     DF F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
384cc     80 CF A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
384d0     FF F3 07 57 |     if_ne   incmod  ptrb,#511
384d4     E7 CC 39 59 |     if_ne   getword rsample,lsnext,#1    '13
384d8     E7 CA 31 59 |     if_ne   getword lsample,lsnext,#0    '15
384dc                 |     
384dc     F5 FF 3B FB |             reti1                        '17/19 
384e0                 |           
384e0                 | '---------------------------------------------------------------------------
384e0                 | '-------- End of interrupt -------------------------------------------------
384e0                 | '---------------------------------------------------------------------------    
384e0                 | 
384e0                 | 
384e0                 | '---------------------------------------------------------------------------
384e0                 | '------- Variables ---------------------------------------------------------
384e0                 | '---------------------------------------------------------------------------
384e0                 | 
384e0                 | ' constants
384e0                 | 
384e0     00 00 00 40 | a40000000   long $40000000
384e4     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
384e8                 | 
384e8                 | ' Time variables
384e8                 | 
384e8     00 00 00 00 | time0       long 0    ' Global sample computing time
384ec     01 00 00 00 | time1       long 1    ' Local channels time
384f0     02 00 00 00 | time2       long 2
384f4     03 00 00 00 | time3       long 3
384f8     04 00 00 00 | time4       long 4
384fc     05 00 00 00 | time5       long 5
38500     06 00 00 00 | time6       long 6
38504     07 00 00 00 | time7       long 7
38508     08 00 00 00 | time8       long 8
3850c                 | 
3850c     00 00 00 00 | channeladd long 0
38510                 | 
38510     00 00 00 00 | front       long 0
38514                 | 
38514                 | ' temporary variables 
38514     00 00 00 00 | qq          long 0
38518     00 00 00 00 | spl         long 0
3851c     00 00 00 00 | zero        long 0
38520     00 00 00 00 | mailbox     long 0
38524     00 00 00 00 | mailbox2 long 0
38528                 | 
38528                 | ' Interrupt ISR variables
38528                 | 
38528     00 00 00 00 | lsample     long 0
3852c     00 00 00 00 | rsample     long 0
38530     00 00 00 00 | lsnext      long 0
38534     00 00 00 00 | rsnext      long 0 
38538                 | 
38538                 | ' channel parameter block
38538                 | 
38538     00 00 00 00 | pointer0    long 0     
3853c     00 00 00 00 | sample0     long 0
38540     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
38544     00 00 00 00 | lstart0     long 0
38548     00 00 00 00 | lend0       long 0
3854c     00 00 00 00 | volpan0     long 0
38550     00 00 00 00 | freqskip0   long 0
38554     00 00 00 00 | command0    long 0
38558     00 00 00 00 | envph0	    long 0
3855c     00 00 00 00 | envptr0	    long 0
38560     00 00 00 00 | envspd0	    long 0
38564     00 00 00 00 | envlen0	    long 0
38568     00 00 00 00 | res5	    long 0
3856c     00 00 00 00 | res6	    long 0
38570     00 00 00 00 | res7	    long 0
38574     00 00 00 00 | res8	    long 0
38578                 | 
38578     00 00 00 00 | afreq0      long 0
3857c     00 00 00 00 | askip0      long 0
38580     00 00 00 00 | avol0       long 0
38584     00 00 00 00 | apan0       long 0
38588                 | 
38588     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3858c     00 00 00 00 | cn          long 0
38590     00 00 00 00 | ct          long 0
38594     00 00 00 00 | dt0         long 0
38598                 | 
38598                 | ' Samples
38598     00 00 00 00 | oldls       long 0
3859c     00 00 00 00 | oldrs       long 0
385a0                 | 
385a0     00 00 00 00 | ls0         long 0
385a4     00 00 00 00 | rs0         long 0
385a8                 | 
385a8     00 00 00 00 | ls          long 0    
385ac     00 00 00 00 | rs          long 0
385b0                 | 
385b0     00 00 00 00 | oldsample   long 0
385b4     00 00 00 00 | newsample   long 0
385b8                 | 
385b8     00 00 00 00 | nrsample    long 0
385bc     00 00 00 00 | nlsample    long 0
385c0                 | 
385c0     00 00 00 00 | scbase long 0
385c4     00 00 00 00 | scptr long 0
385c8     00 00 00 00 | scptr2 long 0
385cc     00 00 00 00 | scope long 0
385d0                 | 
385d0     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
385d4     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
385d8                 | 
385d8     00 18 07 00 | hubptr      long $71800
385dc     00 00 00 00 | cache1      long 0
385e0     00 00 00 00 | cache2      long 0
385e4     00 00 00 00 | cache3      long 0
385e8     00 00 00 00 | cache4      long 0
385ec     00 00 00 00 | cache5      long 0
385f0     00 00 00 00 | cache6      long 0
385f4     00 00 00 00 | cache7      long 0
385f8     00 00 00 00 | cache8      long 0
385fc                 | 
385fc                 | 
385fc     00 00 00 00 | cmd         long 0
38600     00 00 00 00 | hubaddr     long 0
38604     00 01 00 00 | count       long 256
38608     00 00 00 00 | addrlo long 0
3860c     00 00 00 00 | addrhi long 0
38610     00 00 00 00 | pointer00 long 0
38614     00 00 00 00 | envhi long 0
38618     00 00 00 00 | envlo long 0
3861c     00 00 00 00 | envs1 long 0
38620     00 00 00 00 | envs2 long 0
38624     00 00 00 00 | noise0 long 0
38628     00 00 00 00 
3862c     00 00 00 00 | null  			long 	0,0           ' for channel reset
38630                 | 	alignl
38630                 | __system__dat_
38630     00 00 00 00 
38634     00 00 00 00 | 	byte	$00[8]
38638     03 00 00 00 
3863c     00 00 00 00 
38640     00 00 00 00 
38644     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38648     00 00 00 00 
      ...             
388d4     00 00 00 00 
388d8     00 00 00 00 | 	byte	$00[660]
388dc     00 00 A0 08 | 	long	(138 {__system____root_opendir})<<20
388e0     00 00 B0 08 | 	long	(139 {__system____root_closedir})<<20
388e4     00 00 C0 08 | 	long	(140 {__system____root_readdir})<<20
388e8     00 00 D0 08 | 	long	(141 {__system____root_stat})<<20
388ec     00 00 00 00 
388f0     00 00 00 00 
388f4     00 00 00 00 
388f8     00 00 00 00 
388fc     00 00 00 00 
38900     00 00 00 00 
38904     00 00 00 00 | 	byte	$00[28]
38908     70 89 03 00 | 	long	@@@__system__dat_ + 832
3890c     73 89 03 00 | 	long	@@@__system__dat_ + 835
38910     94 89 03 00 | 	long	@@@__system__dat_ + 868
38914     AD 89 03 00 | 	long	@@@__system__dat_ + 893
38918     C8 89 03 00 | 	long	@@@__system__dat_ + 920
3891c     E2 89 03 00 | 	long	@@@__system__dat_ + 946
38920     F2 89 03 00 | 	long	@@@__system__dat_ + 962
38924     04 8A 03 00 | 	long	@@@__system__dat_ + 980
38928     16 8A 03 00 | 	long	@@@__system__dat_ + 998
3892c     28 8A 03 00 | 	long	@@@__system__dat_ + 1016
38930     34 8A 03 00 | 	long	@@@__system__dat_ + 1028
38934     45 8A 03 00 | 	long	@@@__system__dat_ + 1045
38938     59 8A 03 00 | 	long	@@@__system__dat_ + 1065
3893c     63 8A 03 00 | 	long	@@@__system__dat_ + 1075
38940     73 8A 03 00 | 	long	@@@__system__dat_ + 1091
38944     82 8A 03 00 | 	long	@@@__system__dat_ + 1106
38948     98 8A 03 00 | 	long	@@@__system__dat_ + 1128
3894c     B1 8A 03 00 | 	long	@@@__system__dat_ + 1153
38950     C5 8A 03 00 | 	long	@@@__system__dat_ + 1173
38954     D3 8A 03 00 | 	long	@@@__system__dat_ + 1187
38958     E7 8A 03 00 | 	long	@@@__system__dat_ + 1207
3895c     F3 8A 03 00 | 	long	@@@__system__dat_ + 1219
38960     05 8B 03 00 | 	long	@@@__system__dat_ + 1237
38964     1D 8B 03 00 | 	long	@@@__system__dat_ + 1261
38968     2F 8B 03 00 | 	long	@@@__system__dat_ + 1279
3896c     42 8B 03 00 | 	long	@@@__system__dat_ + 1298
38970     4F 4B 00 4E 
38974     75 6D 65 72 
38978     69 63 61 6C 
3897c     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
38980     75 6D 65 6E 
38984     74 20 6F 75 
38988     74 20 6F 66 
3898c     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
38990     61 69 6E 00 
38994     52 65 73 75 
38998     6C 74 20 6E 
3899c     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
389a0     65 70 72 65 
389a4     73 65 6E 74 
389a8     61 62 6C 65 
389ac     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
389b0     65 67 61 6C 
389b4     20 6D 75 6C 
389b8     74 69 62 79 
389bc     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
389c0     65 71 75 65 
389c4     6E 63 65 00 
389c8     4E 6F 20 73 
389cc     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
389d0     66 69 6C 65 
389d4     20 6F 72 20 
389d8     64 69 72 65 
389dc     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
389e0     79 00 42 61 
389e4     64 20 66 69 
389e8     6C 65 20 6E 
389ec     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
389f0     72 00 50 65 
389f4     72 6D 69 73 
389f8     73 69 6F 6E 
389fc     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
38a00     69 65 64 00 
38a04     4E 6F 74 20 
38a08     65 6E 6F 75 
38a0c     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
38a10     65 6D 6F 72 
38a14     79 00 54 65 
38a18     6D 70 6F 72 
38a1c     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
38a20     66 61 69 6C 
38a24     75 72 65 00 
38a28     46 69 6C 65 
38a2c     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
38a30     73 74 73 00 
38a34     49 6E 76 61 
38a38     6C 69 64 20 
38a3c     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
38a40     6D 65 6E 74 
38a44     00 54 6F 6F 
38a48     20 6D 61 6E 
38a4c     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
38a50     65 6E 20 66 
38a54     69 6C 65 73 
38a58     00 49 2F 4F 
38a5c     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
38a60     6F 72 00 4E 
38a64     6F 74 20 61 
38a68     20 64 69 72 
38a6c     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
38a70     72 79 00 49 
38a74     73 20 61 20 
38a78     64 69 72 65 
38a7c     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
38a80     79 00 52 65 
38a84     61 64 20 6F 
38a88     6E 6C 79 20 
38a8c     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
38a90     20 73 79 73 
38a94     74 65 6D 00 
38a98     46 75 6E 63 
38a9c     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
38aa0     20 6E 6F 74 
38aa4     20 69 6D 70 
38aa8     6C 65 6D 65 
38aac     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
38ab0     00 44 69 72 
38ab4     65 63 74 6F 
38ab8     72 79 20 6E 
38abc     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
38ac0     6D 70 74 79 
38ac4     00 4E 61 6D 
38ac8     65 20 74 6F 
38acc     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
38ad0     6E 67 00 44 
38ad4     65 76 69 63 
38ad8     65 20 6E 6F 
38adc     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
38ae0     65 6B 61 62 
38ae4     6C 65 00 42 
38ae8     61 64 20 61 
38aec     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
38af0     73 73 00 42 
38af4     72 6F 6B 65 
38af8     6E 20 63 6F 
38afc     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
38b00     74 69 6F 6E 
38b04     00 44 65 76 
38b08     69 63 65 20 
38b0c     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
38b10     65 73 6F 75 
38b14     72 63 65 20 
38b18     62 75 73 79 
38b1c     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
38b20     73 73 20 64 
38b24     65 76 69 63 
38b28     65 20 6C 69 
38b2c     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
38b30     6F 20 73 70 
38b34     61 63 65 20 
38b38     6F 6E 20 64 
38b3c     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
38b40     65 00 55 6E 
38b44     6B 6E 6F 77 
38b48     6E 20 65 72 
38b4c     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
38b50     00 00 00 00 
38b54     00 00 00 00 | 	byte	$00[8]
38b58     05 00 00 00 
38b5c     00 00 00 00 
38b60     00 00 00 00 
38b64     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38b68     00 00 00 00 | 	byte	$00, $00, $00, $00
38b6c     00 00 20 0A | 	long	(162 {__system___tx})<<20
38b70     00 00 30 0A | 	long	(163 {__system___rx})<<20
38b74     00 00 00 00 | 	byte	$00, $00, $00, $00
38b78     00 00 40 0A | 	long	(164 {__system___rxtxioctl_0640})<<20
38b7c     00 00 50 0A | 	long	(165 {__system____dummy_flush_0641})<<20
38b80     00 00 00 00 
38b84     00 00 00 00 | 	byte	$00[8]
38b88     01 00 00 00 
38b8c     06 00 00 00 
38b90     00 00 00 00 
38b94     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38b98     00 00 00 00 
38b9c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
38ba0     00 00 20 0A | 	long	(162 {__system___tx})<<20
38ba4     00 00 30 0A | 	long	(163 {__system___rx})<<20
38ba8     00 00 00 00 | 	byte	$00, $00, $00, $00
38bac     00 00 40 0A | 	long	(164 {__system___rxtxioctl_0640})<<20
38bb0     00 00 50 0A | 	long	(165 {__system____dummy_flush_0641})<<20
38bb4     00 00 00 00 
38bb8     00 00 00 00 | 	byte	$00[8]
38bbc     01 00 00 00 
38bc0     06 00 00 00 
38bc4     00 00 00 00 
38bc8     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38bcc     00 00 00 00 
38bd0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
38bd4     00 00 20 0A | 	long	(162 {__system___tx})<<20
38bd8     00 00 30 0A | 	long	(163 {__system___rx})<<20
38bdc     00 00 00 00 | 	byte	$00, $00, $00, $00
38be0     00 00 40 0A | 	long	(164 {__system___rxtxioctl_0640})<<20
38be4     00 00 50 0A | 	long	(165 {__system____dummy_flush_0641})<<20
38be8     00 00 00 00 
      ...             
38d58     00 00 00 00 
38d5c     00 00 00 00 | 	byte	$00[376]
38d60     64 8D 03 00 | 	long	@@@__system__dat_ + 1844
38d64     00 00 00 00 
38d68     00 00 00 00 
38d6c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38d70                 | 	alignl
38d70                 | _fatfs_cc_dat_
38d70     C7 00 FC 00 
38d74     E9 00 E2 00 
38d78     E4 00 E0 00 
38d7c     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
38d80     EA 00 EB 00 
38d84     E8 00 EF 00 
38d88     EE 00 EC 00 
38d8c     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
38d90     C9 00 E6 00 
38d94     C6 00 F4 00 
38d98     F6 00 F2 00 
38d9c     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
38da0     FF 00 D6 00 
38da4     DC 00 F8 00 
38da8     A3 00 D8 00 
38dac     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
38db0     E1 00 ED 00 
38db4     F3 00 FA 00 
38db8     F1 00 D1 00 
38dbc     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
38dc0     BF 00 AE 00 
38dc4     AC 00 BD 00 
38dc8     BC 00 A1 00 
38dcc     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
38dd0     91 25 92 25 
38dd4     93 25 02 25 
38dd8     24 25 C1 00 
38ddc     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
38de0     A9 00 63 25 
38de4     51 25 57 25 
38de8     5D 25 A2 00 
38dec     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
38df0     14 25 34 25 
38df4     2C 25 1C 25 
38df8     00 25 3C 25 
38dfc     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
38e00     5A 25 54 25 
38e04     69 25 66 25 
38e08     60 25 50 25 
38e0c     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
38e10     F0 00 D0 00 
38e14     CA 00 CB 00 
38e18     C8 00 31 01 
38e1c     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
38e20     CF 00 18 25 
38e24     0C 25 88 25 
38e28     84 25 A6 00 
38e2c     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
38e30     D3 00 DF 00 
38e34     D4 00 D2 00 
38e38     F5 00 D5 00 
38e3c     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
38e40     DE 00 DA 00 
38e44     DB 00 D9 00 
38e48     FD 00 DD 00 
38e4c     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
38e50     AD 00 B1 00 
38e54     17 20 BE 00 
38e58     B6 00 A7 00 
38e5c     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
38e60     B0 00 A8 00 
38e64     B7 00 B9 00 
38e68     B3 00 B2 00 
38e6c     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
38e70     61 00 1A 03 
38e74     E0 00 17 03 
38e78     F8 00 07 03 
38e7c     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
38e80     78 01 00 01 
38e84     30 01 32 01 
38e88     06 01 39 01 
38e8c     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
38e90     2E 01 79 01 
38e94     06 01 80 01 
38e98     4D 00 43 02 
38e9c     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
38ea0     82 01 84 01 
38ea4     84 01 86 01 
38ea8     87 01 87 01 
38eac     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
38eb0     8B 01 8B 01 
38eb4     8D 01 8E 01 
38eb8     8F 01 90 01 
38ebc     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
38ec0     93 01 94 01 
38ec4     F6 01 96 01 
38ec8     97 01 98 01 
38ecc     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
38ed0     9B 01 9C 01 
38ed4     9D 01 20 02 
38ed8     9F 01 A0 01 
38edc     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
38ee0     A2 01 A4 01 
38ee4     A4 01 A6 01 
38ee8     A7 01 A7 01 
38eec     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
38ef0     AB 01 AC 01 
38ef4     AC 01 AE 01 
38ef8     AF 01 AF 01 
38efc     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
38f00     B3 01 B3 01 
38f04     B5 01 B5 01 
38f08     B7 01 B8 01 
38f0c     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
38f10     BB 01 BC 01 
38f14     BC 01 BE 01 
38f18     F7 01 C0 01 
38f1c     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
38f20     C3 01 C4 01 
38f24     C5 01 C4 01 
38f28     C7 01 C8 01 
38f2c     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
38f30     CB 01 CA 01 
38f34     CD 01 10 01 
38f38     DD 01 01 00 
38f3c     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
38f40     12 01 F3 01 
38f44     03 00 F1 01 
38f48     F4 01 F4 01 
38f4c     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
38f50     22 02 12 01 
38f54     3A 02 09 00 
38f58     65 2C 3B 02 
38f5c     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
38f60     66 2C 3F 02 
38f64     40 02 41 02 
38f68     41 02 46 02 
38f6c     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
38f70     40 00 81 01 
38f74     86 01 55 02 
38f78     89 01 8A 01 
38f7c     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
38f80     5A 02 90 01 
38f84     5C 02 5D 02 
38f88     5E 02 5F 02 
38f8c     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
38f90     62 02 94 01 
38f94     64 02 65 02 
38f98     66 02 67 02 
38f9c     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
38fa0     6A 02 62 2C 
38fa4     6C 02 6D 02 
38fa8     6E 02 9C 01 
38fac     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
38fb0     9D 01 73 02 
38fb4     74 02 9F 01 
38fb8     76 02 77 02 
38fbc     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
38fc0     7A 02 7B 02 
38fc4     7C 02 64 2C 
38fc8     7E 02 7F 02 
38fcc     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
38fd0     82 02 A9 01 
38fd4     84 02 85 02 
38fd8     86 02 87 02 
38fdc     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
38fe0     B1 01 B2 01 
38fe4     45 02 8D 02 
38fe8     8E 02 8F 02 
38fec     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
38ff0     B7 01 7B 03 
38ff4     03 00 FD 03 
38ff8     FE 03 FF 03 
38ffc     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
39000     86 03 88 03 
39004     89 03 8A 03 
39008     B1 03 11 03 
3900c     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
39010     A3 03 A3 03 
39014     C4 03 08 03 
39018     CC 03 03 00 
3901c     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
39020     8F 03 D8 03 
39024     18 01 F2 03 
39028     0A 00 F9 03 
3902c     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
39030     F5 03 F6 03 
39034     F7 03 F7 03 
39038     F9 03 FA 03 
3903c     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
39040     20 03 50 04 
39044     10 07 60 04 
39048     22 01 8A 04 
3904c     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
39050     0E 01 CF 04 
39054     01 00 C0 04 
39058     D0 04 44 01 
3905c     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
39060     00 00 7D 1D 
39064     01 00 63 2C 
39068     00 1E 96 01 
3906c     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
39070     00 1F 08 06 
39074     10 1F 06 06 
39078     20 1F 08 06 
3907c     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
39080     40 1F 06 06 
39084     51 1F 07 00 
39088     59 1F 52 1F 
3908c     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
39090     5D 1F 56 1F 
39094     5F 1F 60 1F 
39098     08 06 70 1F 
3909c     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
390a0     BB 1F C8 1F 
390a4     C9 1F CA 1F 
390a8     CB 1F DA 1F 
390ac     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
390b0     F9 1F EA 1F 
390b4     EB 1F FA 1F 
390b8     FB 1F 80 1F 
390bc     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
390c0     08 06 A0 1F 
390c4     08 06 B0 1F 
390c8     04 00 B8 1F 
390cc     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
390d0     BC 1F CC 1F 
390d4     01 00 C3 1F 
390d8     D0 1F 02 06 
390dc     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
390e0     E5 1F 01 00 
390e4     EC 1F F3 1F 
390e8     01 00 FC 1F 
390ec     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
390f0     32 21 70 21 
390f4     10 02 84 21 
390f8     01 00 83 21 
390fc     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
39100     30 2C 2F 04 
39104     60 2C 02 01 
39108     67 2C 06 01 
3910c     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
39110     80 2C 64 01 
39114     00 2D 26 08 
39118     41 FF 1A 03 
3911c     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
39120     05 07 09 0E 
39124     10 12 14 16 
39128     18 1C 1E 43 
3912c     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
39130     41 41 43 45 
39134     45 45 49 49 
39138     49 41 41 45 
3913c     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
39140     4F 55 55 59 
39144     4F 55 4F 9C 
39148     4F 9E 9F 41 
3914c     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
39150     A5 A6 A7 A8 
39154     A9 AA AB AC 
39158     AD AE AF B0 
3915c     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
39160     41 41 41 B8 
39164     B9 BA BB BC 
39168     BD BE BF C0 
3916c     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
39170     C5 41 41 C8 
39174     C9 CA CB CC 
39178     CD CE CF D1 
3917c     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
39180     49 49 49 49 
39184     D9 DA DB DC 
39188     DD 49 DF 4F 
3918c     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
39190     4F E6 E8 E8 
39194     55 55 55 59 
39198     59 EE EF F0 
3919c     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
391a0     F5 F6 F7 F8 
391a4     F9 FA FB FC 
391a8     FD FE FF 00 
391ac     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
391b0     00 00 00 00 | 	byte	$00, $00, $00, $00
391b4     00 00 10 09 | 	long	(145 {_fatfs_cc_v_close})<<20
391b8     00 00 20 09 | 	long	(146 {_fatfs_cc_v_read})<<20
391bc     00 00 30 09 | 	long	(147 {_fatfs_cc_v_write})<<20
391c0     00 00 40 09 | 	long	(148 {_fatfs_cc_v_lseek})<<20
391c4     00 00 50 09 | 	long	(149 {_fatfs_cc_v_ioctl})<<20
391c8     00 00 60 0A | 	long	(166 {_fatfs_cc_v_flush})<<20
391cc     00 00 00 00 
391d0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
391d4     00 00 60 09 | 	long	(150 {_fatfs_cc_v_open})<<20
391d8     00 00 70 09 | 	long	(151 {_fatfs_cc_v_creat})<<20
391dc     00 00 80 09 | 	long	(152 {_fatfs_cc_v_opendir})<<20
391e0     00 00 90 09 | 	long	(153 {_fatfs_cc_v_closedir})<<20
391e4     00 00 A0 09 | 	long	(154 {_fatfs_cc_v_readdir})<<20
391e8     00 00 B0 09 | 	long	(155 {_fatfs_cc_v_stat})<<20
391ec     00 00 C0 09 | 	long	(156 {_fatfs_cc_v_mkdir})<<20
391f0     00 00 D0 09 | 	long	(157 {_fatfs_cc_v_rmdir})<<20
391f4     00 00 E0 09 | 	long	(158 {_fatfs_cc_v_remove})<<20
391f8     00 00 F0 09 | 	long	(159 {_fatfs_cc_v_rename})<<20
391fc     00 00 00 0A | 	long	(160 {_fatfs_cc_v_init})<<20
39200     00 00 10 0A | 	long	(161 {_fatfs_cc_v_deinit})<<20
39204     FF FF FF FF 
39208     1F 00 00 00 
3920c     1C 00 00 00 
39210     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
39214     1E 00 00 00 
39218     1F 00 00 00 
3921c     1E 00 00 00 
39220     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
39224     1F 00 00 00 
39228     1E 00 00 00 
3922c     1F 00 00 00 
39230     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
39234     1F 00 00 00 
39238     00 00 00 00 
3923c     1F 00 00 00 
39240     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
39244     5A 00 00 00 
39248     78 00 00 00 
3924c     97 00 00 00 
39250     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
39254     D4 00 00 00 
39258     F3 00 00 00 
3925c     11 01 00 00 
39260     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
39264     4E 01 00 00 
39268     6D 01 00 00 
3926c     FF FF FF FF 
39270     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
39274     00 00 00 00 
      ...             
3928c     00 00 00 00 
39290     00 00 00 00 | 	byte	$00[32]
39294     B2 92 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
39298     B6 92 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
3929c     00 00 00 00 
392a0     00 00 00 00 
392a4     00 00 00 00 
392a8     00 00 00 00 
392ac     00 00       | 	byte	$00[18]
392ae     3F 3F 3F 00 
392b2     55 43 54 00 
392b6     55 43 54 00 
392ba     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
392be     00 00 00 00 
392c2     00 00 00    | 	byte	$00[7]
392c5     CA 9A 3B 00 
392c9     00 00 00 01 
392cd     01 01 01 01 
392d1     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
392d5     91 11 11 11 
392d9     11 01 01 01 
392dd     01 01 01 01 
392e1     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
392e5     01 01 01 01 
392e9     01 01 01    | 	byte	$01[7]
392ec     90 20 20 20 
392f0     20 20 20 20 
392f4     20 20 20 20 
392f8     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
392fc     42 42 42 42 
39300     42 42 42 42 
39304     42 42       | 	byte	$42[10]
39306     20 20 20 20 
3930a     20 20 20    | 	byte	$20[7]
3930d     44 44 44 44 
39311     44 44       | 	byte	$44[6]
39313     04 04 04 04 
39317     04 04 04 04 
3931b     04 04 04 04 
3931f     04 04 04 04 
39323     04 04 04 04 | 	byte	$04[20]
39327     20 20 20 20 
3932b     20 20       | 	byte	$20[6]
3932d     48 48 48 48 
39331     48 48       | 	byte	$48[6]
39333     08 08 08 08 
39337     08 08 08 08 
3933b     08 08 08 08 
3933f     08 08 08 08 
39343     08 08 08 08 | 	byte	$08[20]
39347     20 20 20 20 
3934b     01 00 00 00 
3934f     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
39350                 | __methodtable__
39350     0C 89 01 00 | 	long	@_do_no_command
39354     DC FF 00 00 | 	long	@_do_plus
39358     C8 04 01 00 | 	long	@_do_minus
3935c     90 09 01 00 | 	long	@_do_or
39360     A8 0A 01 00 | 	long	@_do_mul
39364     34 10 01 00 | 	long	@_do_fdiv
39368     78 08 01 00 | 	long	@_do_and
3936c     14 0E 01 00 | 	long	@_do_div
39370     FC 11 01 00 | 	long	@_do_mod
39374     1C 14 01 00 | 	long	@_do_shl
39378     34 15 01 00 | 	long	@_do_shr
3937c     4C 16 01 00 | 	long	@_do_power
39380     5C F3 00 00 | 	long	@_do_getvar
39384     D8 A9 00 00 | 	long	@_do_push
39388     5C ED 00 00 | 	long	@_do_assign
3938c     70 5A 01 00 | 	long	@_do_cls
39390     B8 E5 00 00 | 	long	@_do_new
39394     14 5B 01 00 | 	long	@_do_plot
39398     E4 5B 01 00 | 	long	@_do_draw
3939c     58 65 01 00 | 	long	@_do_print
393a0     50 5E 01 00 | 	long	@_do_circle
393a4     D8 5C 01 00 | 	long	@_do_fcircle
393a8     C8 5F 01 00 | 	long	@_do_box
393ac     70 63 01 00 | 	long	@_do_frame
393b0     DC 5A 01 00 | 	long	@_do_color
393b4     A8 85 00 00 | 	long	@_do_for
393b8     00 89 00 00 | 	long	@_do_next
393bc     1C E3 00 00 | 	long	@_do_list
393c0     64 BD 00 00 | 	long	@_do_run
393c4     18 EC 00 00 | 	long	@_do_error
393c8     88 E7 00 00 | 	long	@_do_fast_goto
393cc     78 E8 00 00 | 	long	@_do_find_goto
393d0     88 EA 00 00 | 	long	@_do_slow_goto
393d4     28 85 01 00 | 	long	@_do_nothing
393d8     1C B0 00 00 | 	long	@_test_csave
393dc     80 B3 00 00 | 	long	@_do_save
393e0     7C B7 00 00 | 	long	@_do_load
393e4     04 74 01 00 | 	long	@_do_pinwrite
393e8     A0 7E 01 00 | 	long	@_do_waitms
393ec     DC 7F 01 00 | 	long	@_do_waitvbl
393f0     7C 83 01 00 | 	long	@_do_if
393f4     60 84 01 00 | 	long	@_do_else
393f8     14 18 01 00 | 	long	@_do_eq
393fc     8C 26 01 00 | 	long	@_do_ge
39400     64 2B 01 00 | 	long	@_do_le
39404     EC 1C 01 00 | 	long	@_do_gt
39408     C4 21 01 00 | 	long	@_do_lt
3940c     3C 30 01 00 | 	long	@_do_ne
39410     64 36 01 00 | 	long	@_do_rnd
39414     2C 85 01 00 | 	long	@_do_brun
39418     F8 87 01 00 | 	long	@_do_beep
3941c     0C 80 01 00 | 	long	@_do_dir
39420     20 6A 01 00 | 	long	@_do_paper
39424     A8 6A 01 00 | 	long	@_do_ink
39428     44 6B 01 00 | 	long	@_do_font
3942c     C0 6B 01 00 | 	long	@_do_mode
39430     64 87 01 00 | 	long	@_do_mouse
39434     08 5A 01 00 | 	long	@_do_gettime
39438     98 87 01 00 | 	long	@_do_cursor
3943c     CC 87 01 00 | 	long	@_do_click
39440     94 57 01 00 | 	long	@_do_mousex
39444     D8 57 01 00 | 	long	@_do_mousey
39448     60 58 01 00 | 	long	@_do_mousek
3944c     1C 58 01 00 | 	long	@_do_mousew
39450     38 39 01 00 | 	long	@_do_sin
39454     DC 4E 01 00 | 	long	@_do_stick
39458     60 50 01 00 | 	long	@_do_strig
3945c     A8 56 01 00 | 	long	@_do_sprite
39460     34 53 01 00 | 	long	@_do_defsprite
39464     E4 51 01 00 | 	long	@_do_getpixel
39468     E8 7F 01 00 | 	long	@_do_waitclock
3946c     18 89 01 00 | 	long	@_do_negative
39470     A4 58 01 00 | 	long	@_do_rdpin
39474     10 59 01 00 | 	long	@_do_rqpin
39478     84 59 01 00 | 	long	@_do_pinread
3947c     9C 76 01 00 | 	long	@_do_wrpin
39480     1C 77 01 00 | 	long	@_do_wxpin
39484     9C 77 01 00 | 	long	@_do_wypin
39488     8C 74 01 00 | 	long	@_do_pinfloat
3948c     CC 74 01 00 | 	long	@_do_pinlo
39490     0C 75 01 00 | 	long	@_do_pinhi
39494     8C 75 01 00 | 	long	@_do_pinstart
39498     4C 75 01 00 | 	long	@_do_pintoggle
3949c     1C 78 01 00 | 	long	@_do_position
394a0     94 48 01 00 | 	long	@_do_cos
394a4     B4 49 01 00 | 	long	@_do_tan
394a8     D8 4C 01 00 | 	long	@_do_atn
394ac     C0 4A 01 00 | 	long	@_do_asin
394b0     CC 4B 01 00 | 	long	@_do_acos
394b4     EC 4D 01 00 | 	long	@_do_sqr
394b8     B0 61 01 00 | 	long	@_do_fill
394bc     24 D9 00 00 | 	long	@_do_defsnd
394c0     0C C1 00 00 | 	long	@_do_defenv
394c4     84 84 01 00 | 	long	@_do_rad
394c8     AC 84 01 00 | 	long	@_do_deg
394cc     D4 84 01 00 | 	long	@_do_int
394d0     B4 CD 00 00 | 	long	@_do_play
394d4     64 71 01 00 | 	long	@_do_setdelay
394d8     BC 70 01 00 | 	long	@_do_setenv
394dc     0C 72 01 00 | 	long	@_do_setlen
394e0     5C 73 01 00 | 	long	@_do_setpan
394e4     B4 72 01 00 | 	long	@_do_setvol
394e8     6C 6F 01 00 | 	long	@_do_setwave
394ec     14 70 01 00 | 	long	@_do_setsustain
394f0     8C D8 00 00 | 	long	@_do_release
394f4     2C 38 01 00 | 	long	@_do_getenvsustain
394f8     A4 78 01 00 | 	long	@_do_poke
394fc     7C 79 01 00 | 	long	@_do_dpoke
39500     54 7A 01 00 | 	long	@_do_lpoke
39504     2C 7B 01 00 | 	long	@_do_peek
39508     DC 7B 01 00 | 	long	@_do_dpeek
3950c     88 7C 01 00 | 	long	@_do_lpeek
39510     98 7D 01 00 | 	long	@_do_adr
39514     34 7D 01 00 | 	long	@_do_fre
39518     9C 7D 01 00 | 	long	@_do_getnotevalue
3951c     14 F9 00 00 | 	long	@_do_getaddr
39520     04 FD 00 00 | 	long	@_do_inkey
39524     C8 89 01 00 | 	long	@_do_abs
39528     D4 45 01 00 | 	long	@_do_hex
3952c     34 47 01 00 | 	long	@_do_bin
39530     D0 42 01 00 | 	long	@_do_val
39534     D4 41 01 00 | 	long	@_do_chr
39538     10 3F 01 00 | 	long	@_do_asc
3953c     8C 3D 01 00 | 	long	@_do_left
39540     08 3C 01 00 | 	long	@_do_right
39544     44 3A 01 00 | 	long	@_do_mid
39548     68 40 01 00 | 	long	@_do_len
3954c     90 84 00 00 | 	long	@_do_gosub
39550     1C 88 00 00 | 	long	@_do_return
39554     30 BD 00 00 | 	long	@_do_end
39558     C8 88 00 00 | 	long	@_do_pop
3955c     BC D5 01 00 | 	long	@_hg010b_spin2_putchar
39560     54 E0 02 00 | 	long	@__struct___bas_wrap_sender_tx
39564     98 E0 02 00 | 	long	@__struct___bas_wrap_sender_rx
39568     E0 E0 02 00 | 	long	@__struct___bas_wrap_sender_close
3956c     84 DF 02 00 | 	long	@__struct__s_vfs_file_t_putchar
39570     F4 DF 02 00 | 	long	@__struct__s_vfs_file_t_getchar
39574     3C DF 02 00 | 	long	@___strs_cl_pfunc
39578     98 3E 02 00 | 	long	@__system____root_opendir
3957c     34 3F 02 00 | 	long	@__system____root_closedir
39580     B0 3E 02 00 | 	long	@__system____root_readdir
39584     3C 3F 02 00 | 	long	@__system____root_stat
39588     C4 37 02 00 | 	long	@__system____default_putc
3958c     48 37 02 00 | 	long	@__system____default_getc
39590     6C 38 02 00 | 	long	@__system____default_flush
39594     40 CA 02 00 | 	long	@_fatfs_cc_v_close
39598     5C CE 02 00 | 	long	@_fatfs_cc_v_read
3959c     70 CF 02 00 | 	long	@_fatfs_cc_v_write
395a0     50 D0 02 00 | 	long	@_fatfs_cc_v_lseek
395a4     D8 D0 02 00 | 	long	@_fatfs_cc_v_ioctl
395a8     2C D1 02 00 | 	long	@_fatfs_cc_v_open
395ac     A4 C9 02 00 | 	long	@_fatfs_cc_v_creat
395b0     84 CA 02 00 | 	long	@_fatfs_cc_v_opendir
395b4     F8 CA 02 00 | 	long	@_fatfs_cc_v_closedir
395b8     38 CB 02 00 | 	long	@_fatfs_cc_v_readdir
395bc     6C CC 02 00 | 	long	@_fatfs_cc_v_stat
395c0     EC D0 02 00 | 	long	@_fatfs_cc_v_mkdir
395c4     0C D1 02 00 | 	long	@_fatfs_cc_v_rmdir
395c8     FC D0 02 00 | 	long	@_fatfs_cc_v_remove
395cc     1C D1 02 00 | 	long	@_fatfs_cc_v_rename
395d0     3C D2 02 00 | 	long	@_fatfs_cc_v_init
395d4     44 D2 02 00 | 	long	@_fatfs_cc_v_deinit
395d8     6C EC 01 00 | 	long	@__system___tx
395dc     AC EC 01 00 | 	long	@__system___rx
395e0     A8 4A 02 00 | 	long	@__system___rxtxioctl_0640
395e4     00 4B 02 00 | 	long	@__system____dummy_flush_0641
395e8     0C D2 02 00 | 	long	@_fatfs_cc_v_flush
395ec                 | __heap_base
395ec     00 00 00 00 
      ...             
683ec     00 00 00 00 
683f0     00 00 00 00 | 	long	0[48002]
683f4                 | objmem
683f4     00 00 00 00 
      ...             
77828     00 00 00 00 
7782c     00 00 00 00 | 	long	0[15631]
77830                 | stackspace
77830     00 00 00 00 | 	long	0[1]
77834 100             | 	org	COG_BSS_START
77834 100             | _var01
77834 100             | 	res	1
77834 101             | _var02
77834 101             | 	res	1
77834 102             | _var03
77834 102             | 	res	1
77834 103             | _var04
77834 103             | 	res	1
77834 104             | _var05
77834 104             | 	res	1
77834 105             | _var06
77834 105             | 	res	1
77834 106             | _var07
77834 106             | 	res	1
77834 107             | _var08
77834 107             | 	res	1
77834 108             | _var09
77834 108             | 	res	1
77834 109             | arg01
77834 109             | 	res	1
77834 10a             | arg02
77834 10a             | 	res	1
77834 10b             | arg03
77834 10b             | 	res	1
77834 10c             | arg04
77834 10c             | 	res	1
77834 10d             | arg05
77834 10d             | 	res	1
77834 10e             | arg06
77834 10e             | 	res	1
77834 10f             | local01
77834 10f             | 	res	1
77834 110             | local02
77834 110             | 	res	1
77834 111             | local03
77834 111             | 	res	1
77834 112             | local04
77834 112             | 	res	1
77834 113             | local05
77834 113             | 	res	1
77834 114             | local06
77834 114             | 	res	1
77834 115             | local07
77834 115             | 	res	1
77834 116             | local08
77834 116             | 	res	1
77834 117             | local09
77834 117             | 	res	1
77834 118             | local10
77834 118             | 	res	1
77834 119             | local11
77834 119             | 	res	1
77834 11a             | local12
77834 11a             | 	res	1
77834 11b             | local13
77834 11b             | 	res	1
77834 11c             | local14
77834 11c             | 	res	1
77834 11d             | local15
77834 11d             | 	res	1
77834 11e             | local16
77834 11e             | 	res	1
77834 11f             | local17
77834 11f             | 	res	1
77834 120             | local18
77834 120             | 	res	1
77834 121             | local19
77834 121             | 	res	1
77834 122             | local20
77834 122             | 	res	1
77834 123             | local21
77834 123             | 	res	1
77834 124             | local22
77834 124             | 	res	1
77834 125             | local23
77834 125             | 	res	1
77834 126             | local24
77834 126             | 	res	1
77834 127             | local25
77834 127             | 	res	1
77834 128             | local26
77834 128             | 	res	1
77834 129             | local27
77834 129             | 	res	1
77834 12a             | local28
77834 12a             | 	res	1
77834 12b             | local29
77834 12b             | 	res	1
77834 12c             | local30
77834 12c             | 	res	1
77834 12d             | local31
77834 12d             | 	res	1
77834 12e             | local32
77834 12e             | 	res	1
77834 12f             | local33
77834 12f             | 	res	1
77834 130             | local34
77834 130             | 	res	1
77834 131             | local35
77834 131             | 	res	1
77834 132             | muldiva_
77834 132             | 	res	1
77834 133             | muldivb_
77834 133             | 	res	1
77834 134             | 	fit	480
77834 134             | 
