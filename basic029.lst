00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic029.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 29
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 54 AA A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 33 67 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 32 65 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 33 65 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 66 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 64 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 32 65 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 33 67 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 58 95 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed BC 92 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 60 83 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 9C 85 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 FC 80 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 FC ED 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 DC 8C 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 70 1F 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 20 47 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa D8 44 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb B0 56 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc CC 37 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     49 E4 05 F1 | 	add	objptr, #73
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     59 00 00 FF 
00818     6B E5 05 F1 | 	add	objptr, ##45931
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     59 00 00 FF 
0082c     B4 E5 85 F1 | 	sub	objptr, ##46004
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     CC E5 B1 FD | 	call	#__system___waitms
0083c     59 00 00 FF 
00840     B4 E5 05 F1 | 	add	objptr, ##46004
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     59 00 00 FF 
00854     B4 E5 85 F1 | 	sub	objptr, ##46004
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     A4 E5 B1 FD | 	call	#__system___waitms
00864     59 00 00 FF 
00868     B4 E5 05 F1 | 	add	objptr, ##46004
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     59 00 00 FF 
0087c     B4 E5 85 F1 | 	sub	objptr, ##46004
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     7C E5 B1 FD | 	call	#__system___waitms
0088c     59 00 00 FF 
00890     B4 E5 05 F1 | 	add	objptr, ##46004
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     59 00 00 FF 
008a4     B4 E5 85 F1 | 	sub	objptr, ##46004
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     59 00 00 FF 
008d4     2C E5 05 F1 | 	add	objptr, ##45868
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     59 00 00 FF 
00914     34 E5 85 F1 | 	sub	objptr, ##45876
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     D4 DA B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     24 DB B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     14 DB B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     59 00 00 FF 
00980     3C E5 05 F1 | 	add	objptr, ##45884
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     59 00 00 FF 
009ac     58 E5 85 F1 | 	sub	objptr, ##45912
009b0     78 DA B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     59 00 00 FF 
009e0     3C E5 05 F1 | 	add	objptr, ##45884
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     59 00 00 FF 
00a08     58 E5 85 F1 | 	sub	objptr, ##45912
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     23 4A 05 F6 | 	mov	COUNT_, #35
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     50 F0 07 F1 | 	add	ptra, ##592
00a2c     37 00 00 FF 
00a30     4C E4 05 F1 | 	add	objptr, ##28236
00a34     F2 12 02 FB | 	rdlong	arg01, objptr
00a38     37 00 00 FF 
00a3c     4C E4 85 F1 | 	sub	objptr, ##28236
00a40     70 05 B2 FD | 	call	#__system__RTrim_S
00a44     FD 12 02 F6 | 	mov	arg01, result1
00a48     A8 04 B2 FD | 	call	#__system__LTrim_S
00a4c     37 00 00 FF 
00a50     50 E4 05 F1 | 	add	objptr, ##28240
00a54     F2 FA 61 FC | 	wrlong	result1, objptr
00a58     04 E4 05 F1 | 	add	objptr, #4
00a5c     FF FF FF FF 
00a60     F2 FE 6B FC | 	wrlong	##-1, objptr
00a64     22 00 00 FF 
00a68     7C E5 05 F1 | 	add	objptr, ##17788
00a6c     F2 00 68 FC | 	wrlong	#0, objptr
00a70     0F 00 00 FF 
00a74     24 E5 85 F1 | 	sub	objptr, ##7972
00a78     F2 00 68 FC | 	wrlong	#0, objptr
00a7c     4A 00 00 FF 
00a80     AC E4 85 F1 | 	sub	objptr, ##38060
00a84     00 1E 06 F6 | 	mov	local01, #0
00a88                 | LR__0020
00a88                 | ' 
00a88                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a88                 | ' 
00a88                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
00a88                 | ' 
00a88                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a88     00 20 06 F6 | 	mov	local02, #0
00a8c     20 4E 05 F1 | 	add	fp, #32
00a90     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a94                 | LR__0021
00a94     10 23 02 F6 | 	mov	local03, local02
00a98     02 22 66 F0 | 	shl	local03, #2
00a9c     A7 22 02 F1 | 	add	local03, fp
00aa0     11 01 68 FC | 	wrlong	#0, local03
00aa4     01 20 06 F1 | 	add	local02, #1
00aa8     7E 20 56 F2 | 	cmps	local02, #126 wc
00aac     E4 FF 9F CD |  if_b	jmp	#LR__0021
00ab0                 | LR__0022
00ab0     20 4E 85 F1 | 	sub	fp, #32
00ab4                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00ab4     00 20 06 F6 | 	mov	local02, #0
00ab8     35 00 00 FF 
00abc     3C E4 05 F1 | 	add	objptr, ##27196
00ac0     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00ac4                 | LR__0023
00ac4     10 25 02 F6 | 	mov	local04, local02
00ac8     03 24 66 F0 | 	shl	local04, #3
00acc     F2 24 02 F1 | 	add	local04, objptr
00ad0     70 01 00 FF 
00ad4     22 17 06 F6 | 	mov	arg03, ##@LR__4777
00ad8     12 17 62 FC | 	wrlong	arg03, local04
00adc     10 25 02 F6 | 	mov	local04, local02
00ae0     03 24 66 F0 | 	shl	local04, #3
00ae4     F2 26 02 F6 | 	mov	local05, objptr
00ae8     F2 24 02 F1 | 	add	local04, objptr
00aec     00 28 06 F6 | 	mov	local06, #0
00af0     04 24 06 F1 | 	add	local04, #4
00af4     12 01 68 FC | 	wrlong	#0, local04
00af8     01 20 06 F1 | 	add	local02, #1
00afc     7E 20 56 F2 | 	cmps	local02, #126 wc
00b00     C0 FF 9F CD |  if_b	jmp	#LR__0023
00b04                 | LR__0024
00b04     02 00 00 FF 
00b08     10 E4 05 F1 | 	add	objptr, ##1040
00b0c     F2 12 02 FB | 	rdlong	arg01, objptr
00b10     37 00 00 FF 
00b14     4C E4 85 F1 | 	sub	objptr, ##28236
00b18     98 04 B2 FD | 	call	#__system__RTrim_S
00b1c     FD 12 02 F6 | 	mov	arg01, result1
00b20     D0 03 B2 FD | 	call	#__system__LTrim_S
00b24     37 00 00 FF 
00b28     4C E4 05 F1 | 	add	objptr, ##28236
00b2c     F2 FA 61 FC | 	wrlong	result1, objptr
00b30     70 01 00 FF 
00b34     23 25 06 F6 | 	mov	local04, ##@LR__4778
00b38     22 00 00 FF 
00b3c     C4 E5 05 F1 | 	add	objptr, ##17860
00b40     F2 24 62 FC | 	wrlong	local04, objptr
00b44     22 00 00 FF 
00b48     C4 E5 85 F1 | 	sub	objptr, ##17860
00b4c     F2 12 02 FB | 	rdlong	arg01, objptr
00b50     37 00 00 FF 
00b54     4C E4 85 F1 | 	sub	objptr, ##28236
00b58     09 2B 02 F6 | 	mov	local07, arg01
00b5c     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b60                 | LR__0025
00b60     15 FB C9 FA | 	rdbyte	result1, local07 wz
00b64     01 2A 06 51 |  if_ne	add	local07, #1
00b68     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b6c                 | LR__0026
00b6c     09 2B 8A F1 | 	sub	local07, arg01 wz
00b70     5A 00 00 FF 
00b74     14 E4 05 F1 | 	add	objptr, ##46100
00b78     F2 2A 62 FC | 	wrlong	local07, objptr
00b7c                 | ' if l=0 then goto 101
00b7c     5A 00 00 FF 
00b80     14 E4 85 F1 | 	sub	objptr, ##46100
00b84     B8 27 90 AD |  if_e	jmp	#LR__0149
00b88     5A 00 00 FF 
00b8c     18 E4 05 F1 | 	add	objptr, ##46104
00b90     F2 00 68 FC | 	wrlong	#0, objptr
00b94                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b94                 | ' for i=1 to len(line$)
00b94     01 20 06 F6 | 	mov	local02, #1
00b98     22 00 00 FF 
00b9c     CC E5 85 F1 | 	sub	objptr, ##17868
00ba0     F2 12 02 FB | 	rdlong	arg01, objptr
00ba4     37 00 00 FF 
00ba8     4C E4 85 F1 | 	sub	objptr, ##28236
00bac     09 2B 02 F6 | 	mov	local07, arg01
00bb0     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00bb4                 | LR__0027
00bb4     15 FB C9 FA | 	rdbyte	result1, local07 wz
00bb8     01 2A 06 51 |  if_ne	add	local07, #1
00bbc     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00bc0                 | LR__0028
00bc0     09 2B 82 F1 | 	sub	local07, arg01
00bc4     15 2D 02 F6 | 	mov	local08, local07
00bc8     01 2C 06 F1 | 	add	local08, #1
00bcc                 | LR__0029
00bcc     16 21 52 F2 | 	cmps	local02, local08 wc
00bd0     00 01 90 3D |  if_ae	jmp	#LR__0032
00bd4                 | ' 
00bd4                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bd4     37 00 00 FF 
00bd8     4C E4 05 F1 | 	add	objptr, ##28236
00bdc     F2 12 02 FB | 	rdlong	arg01, objptr
00be0     37 00 00 FF 
00be4     4C E4 85 F1 | 	sub	objptr, ##28236
00be8     10 15 02 F6 | 	mov	arg02, local02
00bec     01 16 06 F6 | 	mov	arg03, #1
00bf0     48 00 B2 FD | 	call	#__system__Mid_S
00bf4     FD 12 02 F6 | 	mov	arg01, result1
00bf8     70 01 00 FF 
00bfc     24 15 06 F6 | 	mov	arg02, ##@LR__4779
00c00     38 DF B1 FD | 	call	#__system___string_cmp
00c04     00 FA 0D F2 | 	cmp	result1, #0 wz
00c08     2C 00 90 5D |  if_ne	jmp	#LR__0030
00c0c     5A 00 00 FF 
00c10     18 E4 05 F1 | 	add	objptr, ##46104
00c14     F2 22 0A FB | 	rdlong	local03, objptr wz
00c18     5A 00 00 FF 
00c1c     18 E4 85 F1 | 	sub	objptr, ##46104
00c20     5A 00 00 AF 
00c24     18 E4 05 A1 |  if_e	add	objptr, ##46104
00c28     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c2c     5A 00 00 AF 
00c30     18 E4 85 A1 |  if_e	sub	objptr, ##46104
00c34     60 00 90 AD |  if_e	jmp	#LR__0031
00c38                 | LR__0030
00c38     37 00 00 FF 
00c3c     4C E4 05 F1 | 	add	objptr, ##28236
00c40     F2 12 02 FB | 	rdlong	arg01, objptr
00c44     37 00 00 FF 
00c48     4C E4 85 F1 | 	sub	objptr, ##28236
00c4c     10 15 02 F6 | 	mov	arg02, local02
00c50     01 16 06 F6 | 	mov	arg03, #1
00c54     E4 FF B1 FD | 	call	#__system__Mid_S
00c58     FD 12 02 F6 | 	mov	arg01, result1
00c5c     70 01 00 FF 
00c60     26 15 06 F6 | 	mov	arg02, ##@LR__4780
00c64     D4 DE B1 FD | 	call	#__system___string_cmp
00c68     00 FA 0D F2 | 	cmp	result1, #0 wz
00c6c     5A 00 00 AF 
00c70     18 E4 05 A1 |  if_e	add	objptr, ##46104
00c74     F2 22 02 AB |  if_e	rdlong	local03, objptr
00c78     5A 00 00 AF 
00c7c     18 E4 85 A1 |  if_e	sub	objptr, ##46104
00c80     01 22 0E A2 |  if_e	cmp	local03, #1 wz
00c84     5A 00 00 AF 
00c88     18 E4 05 A1 |  if_e	add	objptr, ##46104
00c8c     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c90     5A 00 00 AF 
00c94     18 E4 85 A1 |  if_e	sub	objptr, ##46104
00c98                 | LR__0031
00c98     10 25 02 F6 | 	mov	local04, local02
00c9c     03 24 66 F0 | 	shl	local04, #3
00ca0     35 00 00 FF 
00ca4     3C E4 05 F1 | 	add	objptr, ##27196
00ca8     F2 26 02 F6 | 	mov	local05, objptr
00cac     F2 24 02 F1 | 	add	local04, objptr
00cb0     24 00 00 FF 
00cb4     DC E5 05 F1 | 	add	objptr, ##18908
00cb8     F2 28 02 FB | 	rdlong	local06, objptr
00cbc     5A 00 00 FF 
00cc0     18 E4 85 F1 | 	sub	objptr, ##46104
00cc4     04 24 06 F1 | 	add	local04, #4
00cc8     12 29 62 FC | 	wrlong	local06, local04
00ccc     01 20 06 F1 | 	add	local02, #1
00cd0     F8 FE 9F FD | 	jmp	#LR__0029
00cd4                 | LR__0032
00cd4     01 20 06 F6 | 	mov	local02, #1
00cd8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cd8                 | LR__0033
00cd8     37 00 00 FF 
00cdc     4C E4 05 F1 | 	add	objptr, ##28236
00ce0     F2 12 02 FB | 	rdlong	arg01, objptr
00ce4     37 00 00 FF 
00ce8     4C E4 85 F1 | 	sub	objptr, ##28236
00cec     10 15 02 F6 | 	mov	arg02, local02
00cf0     01 16 06 F6 | 	mov	arg03, #1
00cf4     44 FF B1 FD | 	call	#__system__Mid_S
00cf8     FD 12 02 F6 | 	mov	arg01, result1
00cfc     70 01 00 FF 
00d00     28 2F 06 F6 | 	mov	local09, ##@LR__4781
00d04     17 15 02 F6 | 	mov	arg02, local09
00d08     30 DE B1 FD | 	call	#__system___string_cmp
00d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
00d10     34 00 90 5D |  if_ne	jmp	#LR__0034
00d14     10 27 02 F6 | 	mov	local05, local02
00d18     03 26 66 F0 | 	shl	local05, #3
00d1c     35 00 00 FF 
00d20     3C E4 05 F1 | 	add	objptr, ##27196
00d24     F2 28 02 F6 | 	mov	local06, objptr
00d28     F2 26 02 F1 | 	add	local05, objptr
00d2c     04 26 06 F1 | 	add	local05, #4
00d30     13 31 02 FB | 	rdlong	local10, local05
00d34     04 26 86 F1 | 	sub	local05, #4
00d38     18 33 0A F6 | 	mov	local11, local10 wz
00d3c     35 00 00 FF 
00d40     3C E4 85 F1 | 	sub	objptr, ##27196
00d44     24 00 90 AD |  if_e	jmp	#LR__0035
00d48                 | LR__0034
00d48     5A 00 00 FF 
00d4c     14 E4 05 F1 | 	add	objptr, ##46100
00d50     F2 34 02 FB | 	rdlong	local12, objptr
00d54     5A 00 00 FF 
00d58     14 E4 85 F1 | 	sub	objptr, ##46100
00d5c     1A 37 02 F6 | 	mov	local13, local12
00d60     1B 21 52 F2 | 	cmps	local02, local13 wc
00d64     01 20 06 C1 |  if_b	add	local02, #1
00d68     6C FF 9F CD |  if_b	jmp	#LR__0033
00d6c                 | LR__0035
00d6c                 | ' 
00d6c                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d6c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d6c     5A 00 00 FF 
00d70     14 E4 05 F1 | 	add	objptr, ##46100
00d74     F2 24 02 FB | 	rdlong	local04, objptr
00d78     5A 00 00 FF 
00d7c     14 E4 85 F1 | 	sub	objptr, ##46100
00d80     12 21 52 F2 | 	cmps	local02, local04 wc
00d84     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d88     37 00 00 FF 
00d8c     4C E4 05 F1 | 	add	objptr, ##28236
00d90     F2 28 02 FB | 	rdlong	local06, objptr
00d94     37 00 00 FF 
00d98     4C E4 85 F1 | 	sub	objptr, ##28236
00d9c     14 13 02 F6 | 	mov	arg01, local06
00da0     09 2B 02 F6 | 	mov	local07, arg01
00da4     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00da8                 | LR__0036
00da8     15 FB C9 FA | 	rdbyte	result1, local07 wz
00dac     01 2A 06 51 |  if_ne	add	local07, #1
00db0     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00db4                 | LR__0037
00db4     09 2B 82 F1 | 	sub	local07, arg01
00db8     15 15 02 F6 | 	mov	arg02, local07
00dbc     10 15 82 F1 | 	sub	arg02, local02
00dc0     14 13 02 F6 | 	mov	arg01, local06
00dc4     E4 FD B1 FD | 	call	#__system__Right_S
00dc8     FD 12 02 F6 | 	mov	arg01, result1
00dcc     E4 01 B2 FD | 	call	#__system__RTrim_S
00dd0     FD 12 02 F6 | 	mov	arg01, result1
00dd4     1C 01 B2 FD | 	call	#__system__LTrim_S
00dd8     5A 00 00 FF 
00ddc     1C E4 05 F1 | 	add	objptr, ##46108
00de0     F2 FA 61 FC | 	wrlong	result1, objptr
00de4     22 00 00 FF 
00de8     D0 E5 85 F1 | 	sub	objptr, ##17872
00dec     F2 12 02 FB | 	rdlong	arg01, objptr
00df0     37 00 00 FF 
00df4     4C E4 85 F1 | 	sub	objptr, ##28236
00df8     01 20 86 F1 | 	sub	local02, #1
00dfc     10 15 02 F6 | 	mov	arg02, local02
00e00     20 FD B1 FD | 	call	#__system__Left_S
00e04     FD 12 02 F6 | 	mov	arg01, result1
00e08     A8 01 B2 FD | 	call	#__system__RTrim_S
00e0c     FD 12 02 F6 | 	mov	arg01, result1
00e10     E0 00 B2 FD | 	call	#__system__LTrim_S
00e14     37 00 00 FF 
00e18     4C E4 05 F1 | 	add	objptr, ##28236
00e1c     F2 FA 61 FC | 	wrlong	result1, objptr
00e20     37 00 00 FF 
00e24     4C E4 85 F1 | 	sub	objptr, ##28236
00e28     1C 00 90 FD | 	jmp	#LR__0039
00e2c                 | LR__0038
00e2c     70 01 00 FF 
00e30     2A 25 06 F6 | 	mov	local04, ##@LR__4782
00e34     5A 00 00 FF 
00e38     1C E4 05 F1 | 	add	objptr, ##46108
00e3c     F2 24 62 FC | 	wrlong	local04, objptr
00e40     5A 00 00 FF 
00e44     1C E4 85 F1 | 	sub	objptr, ##46108
00e48                 | LR__0039
00e48                 | ' 'print "line$=";line$
00e48                 | ' 'print "rest$=";rest$
00e48                 | ' 
00e48                 | ' 
00e48                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e48     37 00 00 FF 
00e4c     54 E4 05 F1 | 	add	objptr, ##28244
00e50     F2 24 02 FB | 	rdlong	local04, objptr
00e54     37 00 00 FF 
00e58     54 E4 85 F1 | 	sub	objptr, ##28244
00e5c     FF FF 7F FF 
00e60     FF 25 0E F2 | 	cmp	local04, ##-1 wz
00e64     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e68     5A 00 00 FF 
00e6c     1C E4 05 F1 | 	add	objptr, ##46108
00e70     F2 12 02 FB | 	rdlong	arg01, objptr
00e74     5A 00 00 FF 
00e78     1C E4 85 F1 | 	sub	objptr, ##46108
00e7c     70 01 00 FF 
00e80     2B 15 06 F6 | 	mov	arg02, ##@LR__4783
00e84     B4 DC B1 FD | 	call	#__system___string_cmp
00e88     00 FA 0D F2 | 	cmp	result1, #0 wz
00e8c     37 00 00 5F 
00e90     54 E4 05 51 |  if_ne	add	objptr, ##28244
00e94     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e98     37 00 00 5F 
00e9c     54 E4 85 51 |  if_ne	sub	objptr, ##28244
00ea0     08 01 90 5D |  if_ne	jmp	#LR__0044
00ea4                 | LR__0040
00ea4                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00ea4     37 00 00 FF 
00ea8     54 E4 05 F1 | 	add	objptr, ##28244
00eac     F2 24 02 FB | 	rdlong	local04, objptr
00eb0     37 00 00 FF 
00eb4     54 E4 85 F1 | 	sub	objptr, ##28244
00eb8     FF FF 7F FF 
00ebc     FF 25 0E F2 | 	cmp	local04, ##-1 wz
00ec0     3C 00 90 5D |  if_ne	jmp	#LR__0041
00ec4     5A 00 00 FF 
00ec8     1C E4 05 F1 | 	add	objptr, ##46108
00ecc     F2 12 02 FB | 	rdlong	arg01, objptr
00ed0     5A 00 00 FF 
00ed4     1C E4 85 F1 | 	sub	objptr, ##46108
00ed8     70 01 00 FF 
00edc     2C 15 06 F6 | 	mov	arg02, ##@LR__4784
00ee0     58 DC B1 FD | 	call	#__system___string_cmp
00ee4     00 FA 0D F2 | 	cmp	result1, #0 wz
00ee8     37 00 00 AF 
00eec     54 E4 05 A1 |  if_e	add	objptr, ##28244
00ef0     F2 06 68 AC |  if_e	wrlong	#3, objptr
00ef4     37 00 00 AF 
00ef8     54 E4 85 A1 |  if_e	sub	objptr, ##28244
00efc     AC 00 90 AD |  if_e	jmp	#LR__0044
00f00                 | LR__0041
00f00                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00f00     37 00 00 FF 
00f04     54 E4 05 F1 | 	add	objptr, ##28244
00f08     F2 24 02 FB | 	rdlong	local04, objptr
00f0c     37 00 00 FF 
00f10     54 E4 85 F1 | 	sub	objptr, ##28244
00f14     04 24 0E F2 | 	cmp	local04, #4 wz
00f18     3C 00 90 5D |  if_ne	jmp	#LR__0042
00f1c     5A 00 00 FF 
00f20     1C E4 05 F1 | 	add	objptr, ##46108
00f24     F2 12 02 FB | 	rdlong	arg01, objptr
00f28     5A 00 00 FF 
00f2c     1C E4 85 F1 | 	sub	objptr, ##46108
00f30     70 01 00 FF 
00f34     2D 15 06 F6 | 	mov	arg02, ##@LR__4785
00f38     00 DC B1 FD | 	call	#__system___string_cmp
00f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f40     37 00 00 5F 
00f44     54 E4 05 51 |  if_ne	add	objptr, ##28244
00f48     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f4c     37 00 00 5F 
00f50     54 E4 85 51 |  if_ne	sub	objptr, ##28244
00f54     54 00 90 5D |  if_ne	jmp	#LR__0044
00f58                 | LR__0042
00f58                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f58     37 00 00 FF 
00f5c     54 E4 05 F1 | 	add	objptr, ##28244
00f60     F2 24 02 FB | 	rdlong	local04, objptr
00f64     37 00 00 FF 
00f68     54 E4 85 F1 | 	sub	objptr, ##28244
00f6c     04 24 0E F2 | 	cmp	local04, #4 wz
00f70     38 00 90 5D |  if_ne	jmp	#LR__0043
00f74     5A 00 00 FF 
00f78     1C E4 05 F1 | 	add	objptr, ##46108
00f7c     F2 12 02 FB | 	rdlong	arg01, objptr
00f80     5A 00 00 FF 
00f84     1C E4 85 F1 | 	sub	objptr, ##46108
00f88     70 01 00 FF 
00f8c     2E 15 06 F6 | 	mov	arg02, ##@LR__4786
00f90     A8 DB B1 FD | 	call	#__system___string_cmp
00f94     00 FA 0D F2 | 	cmp	result1, #0 wz
00f98     37 00 00 AF 
00f9c     54 E4 05 A1 |  if_e	add	objptr, ##28244
00fa0     F2 04 68 AC |  if_e	wrlong	#2, objptr
00fa4     37 00 00 AF 
00fa8     54 E4 85 A1 |  if_e	sub	objptr, ##28244
00fac                 | LR__0043
00fac                 | LR__0044
00fac     20 4E 05 F1 | 	add	fp, #32
00fb0     A7 00 68 FC | 	wrlong	#0, fp
00fb4     20 4E 85 F1 | 	sub	fp, #32
00fb8     00 20 06 F6 | 	mov	local02, #0
00fbc     01 38 06 F6 | 	mov	local14, #1
00fc0                 | ' 
00fc0                 | ' ' 1b: find separators
00fc0                 | ' 
00fc0                 | ' 107
00fc0                 | ' separators(0)=0
00fc0                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fc0                 | LR__0045
00fc0     01 20 06 F1 | 	add	local02, #1
00fc4     37 00 00 FF 
00fc8     4C E4 05 F1 | 	add	objptr, ##28236
00fcc     F2 12 02 FB | 	rdlong	arg01, objptr
00fd0     37 00 00 FF 
00fd4     4C E4 85 F1 | 	sub	objptr, ##28236
00fd8     10 15 02 F6 | 	mov	arg02, local02
00fdc     01 16 06 F6 | 	mov	arg03, #1
00fe0     58 FC B1 FD | 	call	#__system__Mid_S
00fe4     5A 00 00 FF 
00fe8     20 E4 05 F1 | 	add	objptr, ##46112
00fec     F2 FA 61 FC | 	wrlong	result1, objptr
00ff0                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00ff0     FD 12 02 F6 | 	mov	arg01, result1
00ff4     5A 00 00 FF 
00ff8     20 E4 85 F1 | 	sub	objptr, ##46112
00ffc     B8 29 B0 FD | 	call	#_isseparator
01000     00 FA 0D F2 | 	cmp	result1, #0 wz
01004     1C 00 90 AD |  if_e	jmp	#LR__0046
01008     1C 23 02 F6 | 	mov	local03, local14
0100c     02 22 66 F0 | 	shl	local03, #2
01010     20 4E 05 F1 | 	add	fp, #32
01014     A7 22 02 F1 | 	add	local03, fp
01018     11 21 62 FC | 	wrlong	local02, local03
0101c     01 38 06 F1 | 	add	local14, #1
01020     20 4E 85 F1 | 	sub	fp, #32
01024                 | LR__0046
01024     5A 00 00 FF 
01028     14 E4 05 F1 | 	add	objptr, ##46100
0102c     F2 24 02 FB | 	rdlong	local04, objptr
01030     5A 00 00 FF 
01034     14 E4 85 F1 | 	sub	objptr, ##46100
01038     12 21 5A F2 | 	cmps	local02, local04 wcz
0103c     80 FF 9F ED |  if_be	jmp	#LR__0045
01040     1C 23 02 F6 | 	mov	local03, local14
01044     02 22 66 F0 | 	shl	local03, #2
01048     20 4E 05 F1 | 	add	fp, #32
0104c     A7 22 02 F1 | 	add	local03, fp
01050     11 21 62 FC | 	wrlong	local02, local03
01054     00 3A 06 F6 | 	mov	local15, #0
01058                 | ' for i=0 to j-1 
01058     00 20 06 F6 | 	mov	local02, #0
0105c     1C 3D 02 F6 | 	mov	local16, local14
01060     20 4E 85 F1 | 	sub	fp, #32
01064                 | LR__0047
01064     1E 21 52 F2 | 	cmps	local02, local16 wc
01068     88 01 90 3D |  if_ae	jmp	#LR__0051
0106c     10 23 02 F6 | 	mov	local03, local02
01070     02 22 66 F0 | 	shl	local03, #2
01074     20 4E 05 F1 | 	add	fp, #32
01078     A7 22 02 F1 | 	add	local03, fp
0107c     11 27 02 FB | 	rdlong	local05, local03
01080     5A 00 00 FF 
01084     28 E4 05 F1 | 	add	objptr, ##46120
01088     F2 26 62 FC | 	wrlong	local05, objptr
0108c     10 23 02 F6 | 	mov	local03, local02
01090     01 22 06 F1 | 	add	local03, #1
01094     02 22 66 F0 | 	shl	local03, #2
01098     A7 2E 02 F6 | 	mov	local09, fp
0109c     A7 22 02 F1 | 	add	local03, fp
010a0     11 27 02 FB | 	rdlong	local05, local03
010a4     04 E4 05 F1 | 	add	objptr, #4
010a8     F2 26 62 FC | 	wrlong	local05, objptr
010ac                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
010ac     04 E4 85 F1 | 	sub	objptr, #4
010b0     F2 24 02 FB | 	rdlong	local04, objptr
010b4     5A 00 00 FF 
010b8     28 E4 85 F1 | 	sub	objptr, ##46120
010bc     01 24 56 F2 | 	cmps	local04, #1 wc
010c0     20 4E 85 F1 | 	sub	fp, #32
010c4     84 00 90 CD |  if_b	jmp	#LR__0049
010c8     37 00 00 FF 
010cc     4C E4 05 F1 | 	add	objptr, ##28236
010d0     F2 12 02 FB | 	rdlong	arg01, objptr
010d4     22 00 00 FF 
010d8     DC E5 05 F1 | 	add	objptr, ##17884
010dc     F2 14 02 FB | 	rdlong	arg02, objptr
010e0     5A 00 00 FF 
010e4     28 E4 85 F1 | 	sub	objptr, ##46120
010e8     01 16 06 F6 | 	mov	arg03, #1
010ec     4C FB B1 FD | 	call	#__system__Mid_S
010f0     5A 00 00 FF 
010f4     30 E4 05 F1 | 	add	objptr, ##46128
010f8     F2 FA 61 FC | 	wrlong	result1, objptr
010fc     5A 00 00 FF 
01100     30 E4 85 F1 | 	sub	objptr, ##46128
01104     FD 12 02 F6 | 	mov	arg01, result1
01108     70 01 00 FF 
0110c     2F 15 06 F6 | 	mov	arg02, ##@LR__4787
01110     28 DA B1 FD | 	call	#__system___string_cmp
01114     00 FA 0D F2 | 	cmp	result1, #0 wz
01118     30 00 90 AD |  if_e	jmp	#LR__0048
0111c     1D 2F 02 F6 | 	mov	local09, local15
01120     03 2E 66 F0 | 	shl	local09, #3
01124     35 00 00 FF 
01128     3C E4 05 F1 | 	add	objptr, ##27196
0112c     F2 2E 02 F1 | 	add	local09, objptr
01130     24 00 00 FF 
01134     F4 E5 05 F1 | 	add	objptr, ##18932
01138     F2 28 02 FB | 	rdlong	local06, objptr
0113c     5A 00 00 FF 
01140     30 E4 85 F1 | 	sub	objptr, ##46128
01144     17 29 62 FC | 	wrlong	local06, local09
01148     01 3A 06 F1 | 	add	local15, #1
0114c                 | LR__0048
0114c                 | LR__0049
0114c     37 00 00 FF 
01150     4C E4 05 F1 | 	add	objptr, ##28236
01154     F2 12 02 FB | 	rdlong	arg01, objptr
01158     22 00 00 FF 
0115c     DC E5 05 F1 | 	add	objptr, ##17884
01160     F2 14 02 FB | 	rdlong	arg02, objptr
01164     01 14 06 F1 | 	add	arg02, #1
01168     04 E4 05 F1 | 	add	objptr, #4
0116c     F2 16 02 FB | 	rdlong	arg03, objptr
01170     04 E4 85 F1 | 	sub	objptr, #4
01174     F2 30 02 FB | 	rdlong	local10, objptr
01178     5A 00 00 FF 
0117c     28 E4 85 F1 | 	sub	objptr, ##46120
01180     18 33 02 F6 | 	mov	local11, local10
01184     19 17 82 F1 | 	sub	arg03, local11
01188     01 16 86 F1 | 	sub	arg03, #1
0118c     AC FA B1 FD | 	call	#__system__Mid_S
01190     5A 00 00 FF 
01194     30 E4 05 F1 | 	add	objptr, ##46128
01198     F2 FA 61 FC | 	wrlong	result1, objptr
0119c     5A 00 00 FF 
011a0     30 E4 85 F1 | 	sub	objptr, ##46128
011a4     FD 12 02 F6 | 	mov	arg01, result1
011a8     70 01 00 FF 
011ac     30 15 06 F6 | 	mov	arg02, ##@LR__4788
011b0     88 D9 B1 FD | 	call	#__system___string_cmp
011b4     00 FA 0D F2 | 	cmp	result1, #0 wz
011b8     30 00 90 AD |  if_e	jmp	#LR__0050
011bc     1D 2F 02 F6 | 	mov	local09, local15
011c0     03 2E 66 F0 | 	shl	local09, #3
011c4     35 00 00 FF 
011c8     3C E4 05 F1 | 	add	objptr, ##27196
011cc     F2 2E 02 F1 | 	add	local09, objptr
011d0     24 00 00 FF 
011d4     F4 E5 05 F1 | 	add	objptr, ##18932
011d8     F2 28 02 FB | 	rdlong	local06, objptr
011dc     5A 00 00 FF 
011e0     30 E4 85 F1 | 	sub	objptr, ##46128
011e4     17 29 62 FC | 	wrlong	local06, local09
011e8     01 3A 06 F1 | 	add	local15, #1
011ec                 | LR__0050
011ec     01 20 06 F1 | 	add	local02, #1
011f0     70 FE 9F FD | 	jmp	#LR__0047
011f4                 | LR__0051
011f4     00 20 06 F6 | 	mov	local02, #0
011f8                 | ' 
011f8                 | ' ' 1d : find strings
011f8                 | ' 
011f8                 | ' i=0
011f8                 | ' do
011f8                 | LR__0052
011f8                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011f8     10 27 02 F6 | 	mov	local05, local02
011fc     03 26 66 F0 | 	shl	local05, #3
01200     35 00 00 FF 
01204     3C E4 05 F1 | 	add	objptr, ##27196
01208     F2 26 02 F1 | 	add	local05, objptr
0120c     13 13 02 FB | 	rdlong	arg01, local05
01210     70 01 00 FF 
01214     31 15 06 F6 | 	mov	arg02, ##@LR__4789
01218     35 00 00 FF 
0121c     3C E4 85 F1 | 	sub	objptr, ##27196
01220     18 D9 B1 FD | 	call	#__system___string_cmp
01224     00 FA 0D F2 | 	cmp	result1, #0 wz
01228     01 20 06 51 |  if_ne	add	local02, #1
0122c     50 01 90 5D |  if_ne	jmp	#LR__0057
01230     10 3F 02 F6 | 	mov	local17, local02
01234                 | LR__0053
01234     10 2F 02 F6 | 	mov	local09, local02
01238     01 2E 06 F1 | 	add	local09, #1
0123c     03 2E 66 F0 | 	shl	local09, #3
01240     35 00 00 FF 
01244     3C E4 05 F1 | 	add	objptr, ##27196
01248     F2 2E 02 F1 | 	add	local09, objptr
0124c     17 31 02 FB | 	rdlong	local10, local09
01250     24 00 00 FF 
01254     F4 E5 05 F1 | 	add	objptr, ##18932
01258     F2 30 62 FC | 	wrlong	local10, objptr
0125c     1F 2F 02 F6 | 	mov	local09, local17
01260     03 2E 66 F0 | 	shl	local09, #3
01264     24 00 00 FF 
01268     F4 E5 85 F1 | 	sub	objptr, ##18932
0126c     F2 2E 02 F1 | 	add	local09, objptr
01270     1F 37 02 F6 | 	mov	local13, local17
01274     03 36 66 F0 | 	shl	local13, #3
01278     F2 36 02 F1 | 	add	local13, objptr
0127c     1B 13 02 FB | 	rdlong	arg01, local13
01280     35 00 00 FF 
01284     3C E4 85 F1 | 	sub	objptr, ##27196
01288     18 33 02 F6 | 	mov	local11, local10
0128c     19 15 02 F6 | 	mov	arg02, local11
01290     DC D8 B1 FD | 	call	#__system___string_concat
01294     17 FB 61 FC | 	wrlong	result1, local09
01298     10 39 02 F6 | 	mov	local14, local02
0129c     01 38 06 F1 | 	add	local14, #1
012a0     1D 41 02 F6 | 	mov	local18, local15
012a4     01 40 06 F1 | 	add	local18, #1
012a8     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
012ac                 | LR__0054
012ac     20 39 52 F2 | 	cmps	local14, local18 wc
012b0     70 00 90 3D |  if_ae	jmp	#LR__0056
012b4     1C 27 02 F6 | 	mov	local05, local14
012b8     01 26 06 F1 | 	add	local05, #1
012bc     03 26 66 F0 | 	shl	local05, #3
012c0     35 00 00 FF 
012c4     3C E4 05 F1 | 	add	objptr, ##27196
012c8     F2 26 02 F1 | 	add	local05, objptr
012cc     13 25 02 FB | 	rdlong	local04, local05
012d0     1C 29 02 F6 | 	mov	local06, local14
012d4     01 28 06 F1 | 	add	local06, #1
012d8     03 28 66 F0 | 	shl	local06, #3
012dc     F2 28 02 F1 | 	add	local06, objptr
012e0     04 28 06 F1 | 	add	local06, #4
012e4     14 23 02 FB | 	rdlong	local03, local06
012e8     1C 29 02 F6 | 	mov	local06, local14
012ec     03 28 66 F0 | 	shl	local06, #3
012f0     F2 32 02 F6 | 	mov	local11, objptr
012f4     F2 28 02 F1 | 	add	local06, objptr
012f8     14 25 62 FC | 	wrlong	local04, local06
012fc     1C 31 02 F6 | 	mov	local10, local14
01300     18 35 02 F6 | 	mov	local12, local10
01304     03 34 66 F0 | 	shl	local12, #3
01308     F2 34 02 F1 | 	add	local12, objptr
0130c     04 34 06 F1 | 	add	local12, #4
01310     1A 23 62 FC | 	wrlong	local03, local12
01314     01 38 06 F1 | 	add	local14, #1
01318     35 00 00 FF 
0131c     3C E4 85 F1 | 	sub	objptr, ##27196
01320     88 FF 9F FD | 	jmp	#LR__0054
01324                 | LR__0055
01324                 | LR__0056
01324     01 3A 86 F1 | 	sub	local15, #1
01328     5A 00 00 FF 
0132c     30 E4 05 F1 | 	add	objptr, ##46128
01330     F2 12 02 FB | 	rdlong	arg01, objptr
01334     5A 00 00 FF 
01338     30 E4 85 F1 | 	sub	objptr, ##46128
0133c     70 01 00 FF 
01340     33 15 06 F6 | 	mov	arg02, ##@LR__4790
01344     F4 D7 B1 FD | 	call	#__system___string_cmp
01348     00 FA 0D F2 | 	cmp	result1, #0 wz
0134c     1D 21 52 52 |  if_ne	cmps	local02, local15 wc
01350     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
01354                 | '   if p$<>"""" then k+=1:i+=1
01354     5A 00 00 FF 
01358     30 E4 05 F1 | 	add	objptr, ##46128
0135c     F2 12 02 FB | 	rdlong	arg01, objptr
01360     5A 00 00 FF 
01364     30 E4 85 F1 | 	sub	objptr, ##46128
01368     70 01 00 FF 
0136c     35 15 06 F6 | 	mov	arg02, ##@LR__4791
01370     C8 D7 B1 FD | 	call	#__system___string_cmp
01374     00 FA 0D F2 | 	cmp	result1, #0 wz
01378     01 3A 06 51 |  if_ne	add	local15, #1
0137c     01 20 06 51 |  if_ne	add	local02, #1
01380                 | LR__0057
01380     1D 21 52 F2 | 	cmps	local02, local15 wc
01384     70 FE 9F CD |  if_b	jmp	#LR__0052
01388     00 20 06 F6 | 	mov	local02, #0
0138c                 | ' 
0138c                 | ' ' 1e : concatenate strings if "" detected between
0138c                 | '  
0138c                 | ' i=0 : do
0138c                 | LR__0058
0138c                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
0138c     10 27 02 F6 | 	mov	local05, local02
01390     03 26 66 F0 | 	shl	local05, #3
01394     35 00 00 FF 
01398     3C E4 05 F1 | 	add	objptr, ##27196
0139c     F2 26 02 F1 | 	add	local05, objptr
013a0     13 13 02 FB | 	rdlong	arg01, local05
013a4     01 14 06 F6 | 	mov	arg02, #1
013a8     35 00 00 FF 
013ac     3C E4 85 F1 | 	sub	objptr, ##27196
013b0     F8 F7 B1 FD | 	call	#__system__Right_S
013b4     FD 12 02 F6 | 	mov	arg01, result1
013b8     70 01 00 FF 
013bc     37 15 06 F6 | 	mov	arg02, ##@LR__4792
013c0     78 D7 B1 FD | 	call	#__system___string_cmp
013c4     00 FA 0D F2 | 	cmp	result1, #0 wz
013c8     78 01 90 5D |  if_ne	jmp	#LR__0064
013cc     10 29 02 F6 | 	mov	local06, local02
013d0     01 28 06 F1 | 	add	local06, #1
013d4     03 28 66 F0 | 	shl	local06, #3
013d8     35 00 00 FF 
013dc     3C E4 05 F1 | 	add	objptr, ##27196
013e0     F2 32 02 F6 | 	mov	local11, objptr
013e4     F2 28 02 F1 | 	add	local06, objptr
013e8     14 13 02 FB | 	rdlong	arg01, local06
013ec     01 14 06 F6 | 	mov	arg02, #1
013f0     35 00 00 FF 
013f4     3C E4 85 F1 | 	sub	objptr, ##27196
013f8     28 F7 B1 FD | 	call	#__system__Left_S
013fc     FD 12 02 F6 | 	mov	arg01, result1
01400     70 01 00 FF 
01404     39 15 06 F6 | 	mov	arg02, ##@LR__4793
01408     30 D7 B1 FD | 	call	#__system___string_cmp
0140c     00 FA 0D F2 | 	cmp	result1, #0 wz
01410     30 01 90 5D |  if_ne	jmp	#LR__0064
01414     10 2F 02 F6 | 	mov	local09, local02
01418     03 2E 66 F0 | 	shl	local09, #3
0141c     35 00 00 FF 
01420     3C E4 05 F1 | 	add	objptr, ##27196
01424     F2 2E 02 F1 | 	add	local09, objptr
01428     10 37 02 F6 | 	mov	local13, local02
0142c     03 36 66 F0 | 	shl	local13, #3
01430     F2 36 02 F1 | 	add	local13, objptr
01434     1B 29 02 FB | 	rdlong	local06, local13
01438     10 35 02 F6 | 	mov	local12, local02
0143c     01 34 06 F1 | 	add	local12, #1
01440     03 34 66 F0 | 	shl	local12, #3
01444     F2 34 02 F1 | 	add	local12, objptr
01448     1A 33 02 FB | 	rdlong	local11, local12
0144c     10 43 02 F6 | 	mov	local19, local02
01450     01 42 06 F1 | 	add	local19, #1
01454     21 45 02 F6 | 	mov	local20, local19
01458     03 44 66 F0 | 	shl	local20, #3
0145c     F2 46 02 F6 | 	mov	local21, objptr
01460     F2 44 02 F1 | 	add	local20, objptr
01464     22 13 02 FB | 	rdlong	arg01, local20
01468     35 00 00 FF 
0146c     3C E4 85 F1 | 	sub	objptr, ##27196
01470     09 2B 02 F6 | 	mov	local07, arg01
01474     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01478                 | LR__0059
01478     15 FB C9 FA | 	rdbyte	result1, local07 wz
0147c     01 2A 06 51 |  if_ne	add	local07, #1
01480     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
01484                 | LR__0060
01484     09 2B 82 F1 | 	sub	local07, arg01
01488     15 31 02 F6 | 	mov	local10, local07
0148c     01 30 86 F1 | 	sub	local10, #1
01490     19 13 02 F6 | 	mov	arg01, local11
01494     18 15 02 F6 | 	mov	arg02, local10
01498     10 F7 B1 FD | 	call	#__system__Right_S
0149c     FD 32 02 F6 | 	mov	local11, result1
014a0     14 13 02 F6 | 	mov	arg01, local06
014a4     19 15 02 F6 | 	mov	arg02, local11
014a8     C4 D6 B1 FD | 	call	#__system___string_concat
014ac     17 FB 61 FC | 	wrlong	result1, local09
014b0                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
014b0     10 39 02 F6 | 	mov	local14, local02
014b4     01 38 06 F1 | 	add	local14, #1
014b8     1D 49 02 F6 | 	mov	local22, local15
014bc     01 48 06 F1 | 	add	local22, #1
014c0     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014c4                 | LR__0061
014c4     24 39 52 F2 | 	cmps	local14, local22 wc
014c8     70 00 90 3D |  if_ae	jmp	#LR__0063
014cc     1C 27 02 F6 | 	mov	local05, local14
014d0     01 26 06 F1 | 	add	local05, #1
014d4     03 26 66 F0 | 	shl	local05, #3
014d8     35 00 00 FF 
014dc     3C E4 05 F1 | 	add	objptr, ##27196
014e0     F2 26 02 F1 | 	add	local05, objptr
014e4     13 25 02 FB | 	rdlong	local04, local05
014e8     1C 29 02 F6 | 	mov	local06, local14
014ec     01 28 06 F1 | 	add	local06, #1
014f0     03 28 66 F0 | 	shl	local06, #3
014f4     F2 28 02 F1 | 	add	local06, objptr
014f8     04 28 06 F1 | 	add	local06, #4
014fc     14 23 02 FB | 	rdlong	local03, local06
01500     1C 29 02 F6 | 	mov	local06, local14
01504     03 28 66 F0 | 	shl	local06, #3
01508     F2 32 02 F6 | 	mov	local11, objptr
0150c     F2 28 02 F1 | 	add	local06, objptr
01510     14 25 62 FC | 	wrlong	local04, local06
01514     1C 31 02 F6 | 	mov	local10, local14
01518     18 35 02 F6 | 	mov	local12, local10
0151c     03 34 66 F0 | 	shl	local12, #3
01520     F2 34 02 F1 | 	add	local12, objptr
01524     04 34 06 F1 | 	add	local12, #4
01528     1A 23 62 FC | 	wrlong	local03, local12
0152c     01 38 06 F1 | 	add	local14, #1
01530     35 00 00 FF 
01534     3C E4 85 F1 | 	sub	objptr, ##27196
01538     88 FF 9F FD | 	jmp	#LR__0061
0153c                 | LR__0062
0153c                 | LR__0063
0153c     01 20 86 F1 | 	sub	local02, #1
01540     01 3A 86 F1 | 	sub	local15, #1
01544                 | LR__0064
01544     01 20 06 F1 | 	add	local02, #1
01548     1D 21 52 F2 | 	cmps	local02, local15 wc
0154c     3C FE 9F CD |  if_b	jmp	#LR__0058
01550     00 20 06 F6 | 	mov	local02, #0
01554                 | '  
01554                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
01554                 | '  
01554                 | ' i=0 : do
01554                 | LR__0065
01554     10 2F 02 F6 | 	mov	local09, local02
01558     03 2E 66 F0 | 	shl	local09, #3
0155c     35 00 00 FF 
01560     3C E4 05 F1 | 	add	objptr, ##27196
01564     F2 2E 02 F1 | 	add	local09, objptr
01568     17 29 02 FB | 	rdlong	local06, local09
0156c     24 00 00 FF 
01570     FC E5 05 F1 | 	add	objptr, ##18940
01574     F2 28 62 FC | 	wrlong	local06, objptr
01578     10 2F 02 F6 | 	mov	local09, local02
0157c     01 2E 06 F1 | 	add	local09, #1
01580     03 2E 66 F0 | 	shl	local09, #3
01584     24 00 00 FF 
01588     FC E5 85 F1 | 	sub	objptr, ##18940
0158c     F2 2E 02 F1 | 	add	local09, objptr
01590     17 29 02 FB | 	rdlong	local06, local09
01594     25 00 00 FF 
01598     00 E4 05 F1 | 	add	objptr, ##18944
0159c     F2 28 62 FC | 	wrlong	local06, objptr
015a0                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
015a0     04 E4 85 F1 | 	sub	objptr, #4
015a4     F2 12 02 FB | 	rdlong	arg01, objptr
015a8     5A 00 00 FF 
015ac     38 E4 85 F1 | 	sub	objptr, ##46136
015b0     70 01 00 FF 
015b4     3B 15 06 F6 | 	mov	arg02, ##@LR__4794
015b8     80 D5 B1 FD | 	call	#__system___string_cmp
015bc     00 FA 0D F2 | 	cmp	result1, #0 wz
015c0     04 01 90 AD |  if_e	jmp	#LR__0066
015c4     5A 00 00 FF 
015c8     38 E4 05 F1 | 	add	objptr, ##46136
015cc     F2 12 02 FB | 	rdlong	arg01, objptr
015d0     5A 00 00 FF 
015d4     38 E4 85 F1 | 	sub	objptr, ##46136
015d8     70 01 00 FF 
015dc     3D 15 06 F6 | 	mov	arg02, ##@LR__4795
015e0     58 D5 B1 FD | 	call	#__system___string_cmp
015e4     FD 22 0A F6 | 	mov	local03, result1 wz
015e8     DC 00 90 AD |  if_e	jmp	#LR__0066
015ec     5A 00 00 FF 
015f0     38 E4 05 F1 | 	add	objptr, ##46136
015f4     F2 12 02 FB | 	rdlong	arg01, objptr
015f8     5A 00 00 FF 
015fc     38 E4 85 F1 | 	sub	objptr, ##46136
01600     70 01 00 FF 
01604     3F 15 06 F6 | 	mov	arg02, ##@LR__4796
01608     30 D5 B1 FD | 	call	#__system___string_cmp
0160c     00 FA 0D F2 | 	cmp	result1, #0 wz
01610     B4 00 90 AD |  if_e	jmp	#LR__0066
01614     5A 00 00 FF 
01618     38 E4 05 F1 | 	add	objptr, ##46136
0161c     F2 12 02 FB | 	rdlong	arg01, objptr
01620     5A 00 00 FF 
01624     38 E4 85 F1 | 	sub	objptr, ##46136
01628     70 01 00 FF 
0162c     41 33 06 F6 | 	mov	local11, ##@LR__4797
01630     19 15 02 F6 | 	mov	arg02, local11
01634     04 D5 B1 FD | 	call	#__system___string_cmp
01638     00 FA 0D F2 | 	cmp	result1, #0 wz
0163c     88 00 90 AD |  if_e	jmp	#LR__0066
01640     5A 00 00 FF 
01644     38 E4 05 F1 | 	add	objptr, ##46136
01648     F2 12 02 FB | 	rdlong	arg01, objptr
0164c     5A 00 00 FF 
01650     38 E4 85 F1 | 	sub	objptr, ##46136
01654     70 01 00 FF 
01658     43 31 06 F6 | 	mov	local10, ##@LR__4798
0165c     18 33 02 F6 | 	mov	local11, local10
01660     19 15 02 F6 | 	mov	arg02, local11
01664     D4 D4 B1 FD | 	call	#__system___string_cmp
01668     00 FA 0D F2 | 	cmp	result1, #0 wz
0166c     58 00 90 AD |  if_e	jmp	#LR__0066
01670     5A 00 00 FF 
01674     38 E4 05 F1 | 	add	objptr, ##46136
01678     F2 12 02 FB | 	rdlong	arg01, objptr
0167c     5A 00 00 FF 
01680     38 E4 85 F1 | 	sub	objptr, ##46136
01684     70 01 00 FF 
01688     45 31 06 F6 | 	mov	local10, ##@LR__4799
0168c     18 15 02 F6 | 	mov	arg02, local10
01690     A8 D4 B1 FD | 	call	#__system___string_cmp
01694     FD 32 0A F6 | 	mov	local11, result1 wz
01698     2C 00 90 AD |  if_e	jmp	#LR__0066
0169c     5A 00 00 FF 
016a0     38 E4 05 F1 | 	add	objptr, ##46136
016a4     F2 12 02 FB | 	rdlong	arg01, objptr
016a8     5A 00 00 FF 
016ac     38 E4 85 F1 | 	sub	objptr, ##46136
016b0     70 01 00 FF 
016b4     47 37 06 F6 | 	mov	local13, ##@LR__4800
016b8     1B 15 02 F6 | 	mov	arg02, local13
016bc     7C D4 B1 FD | 	call	#__system___string_cmp
016c0     FD 30 0A F6 | 	mov	local10, result1 wz
016c4     30 00 90 5D |  if_ne	jmp	#LR__0067
016c8                 | LR__0066
016c8     5A 00 00 FF 
016cc     3C E4 05 F1 | 	add	objptr, ##46140
016d0     F2 12 02 FB | 	rdlong	arg01, objptr
016d4     5A 00 00 FF 
016d8     3C E4 85 F1 | 	sub	objptr, ##46140
016dc     70 01 00 FF 
016e0     49 4B 06 F6 | 	mov	local23, ##@LR__4801
016e4     25 35 02 F6 | 	mov	local12, local23
016e8     1A 15 02 F6 | 	mov	arg02, local12
016ec     4C D4 B1 FD | 	call	#__system___string_cmp
016f0     FD 36 0A F6 | 	mov	local13, result1 wz
016f4     18 01 90 AD |  if_e	jmp	#LR__0070
016f8                 | LR__0067
016f8     5A 00 00 FF 
016fc     38 E4 05 F1 | 	add	objptr, ##46136
01700     F2 12 02 FB | 	rdlong	arg01, objptr
01704     5A 00 00 FF 
01708     38 E4 85 F1 | 	sub	objptr, ##46136
0170c     70 01 00 FF 
01710     4B 4B 06 F6 | 	mov	local23, ##@LR__4802
01714     25 15 02 F6 | 	mov	arg02, local23
01718     20 D4 B1 FD | 	call	#__system___string_cmp
0171c     FD 34 0A F6 | 	mov	local12, result1 wz
01720     30 00 90 5D |  if_ne	jmp	#LR__0068
01724     5A 00 00 FF 
01728     3C E4 05 F1 | 	add	objptr, ##46140
0172c     F2 12 02 FB | 	rdlong	arg01, objptr
01730     5A 00 00 FF 
01734     3C E4 85 F1 | 	sub	objptr, ##46140
01738     70 01 00 FF 
0173c     4D 45 06 F6 | 	mov	local20, ##@LR__4803
01740     22 43 02 F6 | 	mov	local19, local20
01744     21 15 02 F6 | 	mov	arg02, local19
01748     F0 D3 B1 FD | 	call	#__system___string_cmp
0174c     FD 4A 0A F6 | 	mov	local23, result1 wz
01750     BC 00 90 AD |  if_e	jmp	#LR__0070
01754                 | LR__0068
01754     5A 00 00 FF 
01758     38 E4 05 F1 | 	add	objptr, ##46136
0175c     F2 12 02 FB | 	rdlong	arg01, objptr
01760     5A 00 00 FF 
01764     38 E4 85 F1 | 	sub	objptr, ##46136
01768     70 01 00 FF 
0176c     4F 45 06 F6 | 	mov	local20, ##@LR__4804
01770     22 15 02 F6 | 	mov	arg02, local20
01774     C4 D3 B1 FD | 	call	#__system___string_cmp
01778     FD 42 0A F6 | 	mov	local19, result1 wz
0177c     30 00 90 5D |  if_ne	jmp	#LR__0069
01780     5A 00 00 FF 
01784     3C E4 05 F1 | 	add	objptr, ##46140
01788     F2 12 02 FB | 	rdlong	arg01, objptr
0178c     5A 00 00 FF 
01790     3C E4 85 F1 | 	sub	objptr, ##46140
01794     70 01 00 FF 
01798     51 4D 06 F6 | 	mov	local24, ##@LR__4805
0179c     26 47 02 F6 | 	mov	local21, local24
017a0     23 15 02 F6 | 	mov	arg02, local21
017a4     94 D3 B1 FD | 	call	#__system___string_cmp
017a8     FD 44 0A F6 | 	mov	local20, result1 wz
017ac     60 00 90 AD |  if_e	jmp	#LR__0070
017b0                 | LR__0069
017b0     5A 00 00 FF 
017b4     38 E4 05 F1 | 	add	objptr, ##46136
017b8     F2 12 02 FB | 	rdlong	arg01, objptr
017bc     5A 00 00 FF 
017c0     38 E4 85 F1 | 	sub	objptr, ##46136
017c4     70 01 00 FF 
017c8     53 4F 06 F6 | 	mov	local25, ##@LR__4806
017cc     27 4D 02 F6 | 	mov	local24, local25
017d0     26 15 02 F6 | 	mov	arg02, local24
017d4     64 D3 B1 FD | 	call	#__system___string_cmp
017d8     FD 46 0A F6 | 	mov	local21, result1 wz
017dc     10 01 90 5D |  if_ne	jmp	#LR__0074
017e0     5A 00 00 FF 
017e4     3C E4 05 F1 | 	add	objptr, ##46140
017e8     F2 12 02 FB | 	rdlong	arg01, objptr
017ec     5A 00 00 FF 
017f0     3C E4 85 F1 | 	sub	objptr, ##46140
017f4     70 01 00 FF 
017f8     55 51 06 F6 | 	mov	local26, ##@LR__4807
017fc     28 4F 02 F6 | 	mov	local25, local26
01800     27 15 02 F6 | 	mov	arg02, local25
01804     34 D3 B1 FD | 	call	#__system___string_cmp
01808     FD 4C 0A F6 | 	mov	local24, result1 wz
0180c     E0 00 90 5D |  if_ne	jmp	#LR__0074
01810                 | LR__0070
01810     10 2F 02 F6 | 	mov	local09, local02
01814     03 2E 66 F0 | 	shl	local09, #3
01818     35 00 00 FF 
0181c     3C E4 05 F1 | 	add	objptr, ##27196
01820     F2 2E 02 F1 | 	add	local09, objptr
01824     24 00 00 FF 
01828     FC E5 05 F1 | 	add	objptr, ##18940
0182c     F2 12 02 FB | 	rdlong	arg01, objptr
01830     04 E4 05 F1 | 	add	objptr, #4
01834     F2 30 02 FB | 	rdlong	local10, objptr
01838     5A 00 00 FF 
0183c     3C E4 85 F1 | 	sub	objptr, ##46140
01840     18 33 02 F6 | 	mov	local11, local10
01844     19 15 02 F6 | 	mov	arg02, local11
01848     24 D3 B1 FD | 	call	#__system___string_concat
0184c     17 FB 61 FC | 	wrlong	result1, local09
01850                 | '     lparts(i).part$=s1$+s2$
01850                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01850     10 39 02 F6 | 	mov	local14, local02
01854     01 38 06 F1 | 	add	local14, #1
01858     1D 53 02 F6 | 	mov	local27, local15
0185c     01 52 06 F1 | 	add	local27, #1
01860     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
01864                 | LR__0071
01864     29 39 52 F2 | 	cmps	local14, local27 wc
01868     7C 00 90 3D |  if_ae	jmp	#LR__0073
0186c     1C 27 02 F6 | 	mov	local05, local14
01870     01 26 06 F1 | 	add	local05, #1
01874     03 26 66 F0 | 	shl	local05, #3
01878     35 00 00 FF 
0187c     3C E4 05 F1 | 	add	objptr, ##27196
01880     F2 26 02 F1 | 	add	local05, objptr
01884     13 25 02 FB | 	rdlong	local04, local05
01888     1C 29 02 F6 | 	mov	local06, local14
0188c     01 28 06 F1 | 	add	local06, #1
01890     03 28 66 F0 | 	shl	local06, #3
01894     F2 28 02 F1 | 	add	local06, objptr
01898     04 28 06 F1 | 	add	local06, #4
0189c     14 23 02 FB | 	rdlong	local03, local06
018a0     1C 29 02 F6 | 	mov	local06, local14
018a4     03 28 66 F0 | 	shl	local06, #3
018a8     F2 32 02 F6 | 	mov	local11, objptr
018ac     F2 28 02 F1 | 	add	local06, objptr
018b0     14 25 62 FC | 	wrlong	local04, local06
018b4     1C 31 02 F6 | 	mov	local10, local14
018b8     18 37 02 F6 | 	mov	local13, local10
018bc     1B 35 02 F6 | 	mov	local12, local13
018c0     03 34 66 F0 | 	shl	local12, #3
018c4     F2 4A 02 F6 | 	mov	local23, objptr
018c8     F2 34 02 F1 | 	add	local12, objptr
018cc     04 34 06 F1 | 	add	local12, #4
018d0     1A 23 62 FC | 	wrlong	local03, local12
018d4     04 34 86 F1 | 	sub	local12, #4
018d8     01 38 06 F1 | 	add	local14, #1
018dc     35 00 00 FF 
018e0     3C E4 85 F1 | 	sub	objptr, ##27196
018e4     7C FF 9F FD | 	jmp	#LR__0071
018e8                 | LR__0072
018e8                 | LR__0073
018e8     01 20 86 F1 | 	sub	local02, #1
018ec     01 3A 86 F1 | 	sub	local15, #1
018f0                 | LR__0074
018f0     01 20 06 F1 | 	add	local02, #1
018f4     1D 21 52 F2 | 	cmps	local02, local15 wc
018f8     58 FC 9F CD |  if_b	jmp	#LR__0065
018fc                 | '  
018fc                 | ' ' 1f : now remove parts that are spaces
018fc                 | ' 
018fc                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018fc     00 20 06 F6 | 	mov	local02, #0
01900     1D 55 02 F6 | 	mov	local28, local15
01904     01 54 06 F1 | 	add	local28, #1
01908                 | LR__0075
01908     2A 21 52 F2 | 	cmps	local02, local28 wc
0190c     50 00 90 3D |  if_ae	jmp	#LR__0076
01910     10 2F 02 F6 | 	mov	local09, local02
01914     03 2E 66 F0 | 	shl	local09, #3
01918     35 00 00 FF 
0191c     3C E4 05 F1 | 	add	objptr, ##27196
01920     F2 2E 02 F1 | 	add	local09, objptr
01924     10 33 02 F6 | 	mov	local11, local02
01928     19 31 02 F6 | 	mov	local10, local11
0192c     18 37 02 F6 | 	mov	local13, local10
01930     03 36 66 F0 | 	shl	local13, #3
01934     F2 34 02 F6 | 	mov	local12, objptr
01938     F2 36 02 F1 | 	add	local13, objptr
0193c     1B 13 02 FB | 	rdlong	arg01, local13
01940     35 00 00 FF 
01944     3C E4 85 F1 | 	sub	objptr, ##27196
01948     68 F6 B1 FD | 	call	#__system__RTrim_S
0194c     FD 12 02 F6 | 	mov	arg01, result1
01950     A0 F5 B1 FD | 	call	#__system__LTrim_S
01954     17 FB 61 FC | 	wrlong	result1, local09
01958     01 20 06 F1 | 	add	local02, #1
0195c     A8 FF 9F FD | 	jmp	#LR__0075
01960                 | LR__0076
01960     00 20 06 F6 | 	mov	local02, #0
01964     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01968                 | ' 
01968                 | ' i=0
01968                 | ' do 
01968                 | LR__0077
01968                 | '   if len(lparts(i).part$)=0 then 
01968     10 2F 02 F6 | 	mov	local09, local02
0196c     17 27 02 F6 | 	mov	local05, local09
01970     03 26 66 F0 | 	shl	local05, #3
01974     35 00 00 FF 
01978     3C E4 05 F1 | 	add	objptr, ##27196
0197c     F2 26 02 F1 | 	add	local05, objptr
01980     13 13 02 FB | 	rdlong	arg01, local05
01984     35 00 00 FF 
01988     3C E4 85 F1 | 	sub	objptr, ##27196
0198c     09 2B 02 F6 | 	mov	local07, arg01
01990                 | LR__0078
01990     15 FB C9 FA | 	rdbyte	result1, local07 wz
01994     01 2A 06 51 |  if_ne	add	local07, #1
01998     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
0199c     09 2B 8A F1 | 	sub	local07, arg01 wz
019a0     C4 00 90 5D |  if_ne	jmp	#LR__0082
019a4                 | '     if i=k-1 then k-=1  :  exit
019a4     1D 25 02 F6 | 	mov	local04, local15
019a8     01 24 86 F1 | 	sub	local04, #1
019ac     12 21 0A F2 | 	cmp	local02, local04 wz
019b0     01 3A 86 A1 |  if_e	sub	local15, #1
019b4     C4 00 90 AD |  if_e	jmp	#LR__0084
019b8                 | '     if i<k-1 then 
019b8     1D 25 02 F6 | 	mov	local04, local15
019bc     01 24 86 F1 | 	sub	local04, #1
019c0     12 21 52 F2 | 	cmps	local02, local04 wc
019c4     A0 00 90 3D |  if_ae	jmp	#LR__0081
019c8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019c8     10 39 02 F6 | 	mov	local14, local02
019cc     1D 57 02 F6 | 	mov	local29, local15
019d0     01 56 86 F1 | 	sub	local29, #1
019d4                 | LR__0079
019d4     2B 39 52 F2 | 	cmps	local14, local29 wc
019d8     80 00 90 3D |  if_ae	jmp	#LR__0080
019dc     1C 27 02 F6 | 	mov	local05, local14
019e0     01 26 06 F1 | 	add	local05, #1
019e4     03 26 66 F0 | 	shl	local05, #3
019e8     35 00 00 FF 
019ec     3C E4 05 F1 | 	add	objptr, ##27196
019f0     F2 26 02 F1 | 	add	local05, objptr
019f4     13 25 02 FB | 	rdlong	local04, local05
019f8     1C 29 02 F6 | 	mov	local06, local14
019fc     01 28 06 F1 | 	add	local06, #1
01a00     03 28 66 F0 | 	shl	local06, #3
01a04     F2 28 02 F1 | 	add	local06, objptr
01a08     04 28 06 F1 | 	add	local06, #4
01a0c     14 23 02 FB | 	rdlong	local03, local06
01a10     1C 2F 02 F6 | 	mov	local09, local14
01a14     17 29 02 F6 | 	mov	local06, local09
01a18     03 28 66 F0 | 	shl	local06, #3
01a1c     F2 32 02 F6 | 	mov	local11, objptr
01a20     F2 28 02 F1 | 	add	local06, objptr
01a24     14 25 62 FC | 	wrlong	local04, local06
01a28     1C 31 02 F6 | 	mov	local10, local14
01a2c     18 37 02 F6 | 	mov	local13, local10
01a30     1B 35 02 F6 | 	mov	local12, local13
01a34     03 34 66 F0 | 	shl	local12, #3
01a38     F2 4A 02 F6 | 	mov	local23, objptr
01a3c     F2 34 02 F1 | 	add	local12, objptr
01a40     04 34 06 F1 | 	add	local12, #4
01a44     1A 23 62 FC | 	wrlong	local03, local12
01a48     04 34 86 F1 | 	sub	local12, #4
01a4c     01 38 06 F1 | 	add	local14, #1
01a50     35 00 00 FF 
01a54     3C E4 85 F1 | 	sub	objptr, ##27196
01a58     78 FF 9F FD | 	jmp	#LR__0079
01a5c                 | LR__0080
01a5c     01 3A 86 F1 | 	sub	local15, #1
01a60                 | '       if i>0 then i-=1 
01a60     01 20 56 F2 | 	cmps	local02, #1 wc
01a64     01 20 86 31 |  if_ae	sub	local02, #1
01a68                 | LR__0081
01a68                 | LR__0082
01a68     01 20 06 F1 | 	add	local02, #1
01a6c     1D 25 02 F6 | 	mov	local04, local15
01a70     01 24 86 F1 | 	sub	local04, #1
01a74     12 21 5A F2 | 	cmps	local02, local04 wcz
01a78     EC FE 9F ED |  if_be	jmp	#LR__0077
01a7c                 | LR__0083
01a7c                 | LR__0084
01a7c                 | ' 
01a7c                 | ' ' 1g: lowercase all that is not a string
01a7c                 | ' 
01a7c                 | ' for j=0 to k-1
01a7c     00 38 06 F6 | 	mov	local14, #0
01a80     1D 59 02 F6 | 	mov	local30, local15
01a84                 | LR__0085
01a84     2C 39 52 F2 | 	cmps	local14, local30 wc
01a88     C0 00 90 3D |  if_ae	jmp	#LR__0088
01a8c                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a8c     1C 27 02 F6 | 	mov	local05, local14
01a90     03 26 66 F0 | 	shl	local05, #3
01a94     35 00 00 FF 
01a98     3C E4 05 F1 | 	add	objptr, ##27196
01a9c     F2 26 02 F1 | 	add	local05, objptr
01aa0     13 13 02 FB | 	rdlong	arg01, local05
01aa4     01 14 06 F6 | 	mov	arg02, #1
01aa8     35 00 00 FF 
01aac     3C E4 85 F1 | 	sub	objptr, ##27196
01ab0     70 F0 B1 FD | 	call	#__system__Left_S
01ab4     FD 12 02 F6 | 	mov	arg01, result1
01ab8     70 01 00 FF 
01abc     57 15 06 F6 | 	mov	arg02, ##@LR__4808
01ac0     78 D0 B1 FD | 	call	#__system___string_cmp
01ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
01ac8     40 00 90 5D |  if_ne	jmp	#LR__0086
01acc     1C 29 02 F6 | 	mov	local06, local14
01ad0     03 28 66 F0 | 	shl	local06, #3
01ad4     35 00 00 FF 
01ad8     3C E4 05 F1 | 	add	objptr, ##27196
01adc     F2 28 02 F1 | 	add	local06, objptr
01ae0     14 13 02 FB | 	rdlong	arg01, local06
01ae4     01 14 06 F6 | 	mov	arg02, #1
01ae8     35 00 00 FF 
01aec     3C E4 85 F1 | 	sub	objptr, ##27196
01af0     B8 F0 B1 FD | 	call	#__system__Right_S
01af4     FD 12 02 F6 | 	mov	arg01, result1
01af8     70 01 00 FF 
01afc     59 15 06 F6 | 	mov	arg02, ##@LR__4809
01b00     38 D0 B1 FD | 	call	#__system___string_cmp
01b04     00 FA 0D F2 | 	cmp	result1, #0 wz
01b08     38 00 90 AD |  if_e	jmp	#LR__0087
01b0c                 | LR__0086
01b0c     1C 2F 02 F6 | 	mov	local09, local14
01b10     03 2E 66 F0 | 	shl	local09, #3
01b14     35 00 00 FF 
01b18     3C E4 05 F1 | 	add	objptr, ##27196
01b1c     F2 2E 02 F1 | 	add	local09, objptr
01b20     1C 37 02 F6 | 	mov	local13, local14
01b24     03 36 66 F0 | 	shl	local13, #3
01b28     F2 34 02 F6 | 	mov	local12, objptr
01b2c     F2 36 02 F1 | 	add	local13, objptr
01b30     1B 13 02 FB | 	rdlong	arg01, local13
01b34     35 00 00 FF 
01b38     3C E4 85 F1 | 	sub	objptr, ##27196
01b3c     F4 F2 B1 FD | 	call	#__system__LCase_S
01b40     17 FB 61 FC | 	wrlong	result1, local09
01b44                 | LR__0087
01b44     01 38 06 F1 | 	add	local14, #1
01b48     38 FF 9F FD | 	jmp	#LR__0085
01b4c                 | LR__0088
01b4c                 | ' 
01b4c                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b4c                 | ' 
01b4c                 | ' for i=0 to k: lparts(i).token=-1: next i
01b4c     00 20 06 F6 | 	mov	local02, #0
01b50     1D 5B 02 F6 | 	mov	local31, local15
01b54     01 5A 06 F1 | 	add	local31, #1
01b58     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b5c                 | LR__0089
01b5c     2D 21 52 F2 | 	cmps	local02, local31 wc
01b60     30 00 90 3D |  if_ae	jmp	#LR__0091
01b64     10 2F 02 F6 | 	mov	local09, local02
01b68     03 2E 66 F0 | 	shl	local09, #3
01b6c     35 00 00 FF 
01b70     3C E4 05 F1 | 	add	objptr, ##27196
01b74     F2 2E 02 F1 | 	add	local09, objptr
01b78     04 2E 06 F1 | 	add	local09, #4
01b7c     FF FF FF FF 
01b80     17 FF 6B FC | 	wrlong	##-1, local09
01b84     01 20 06 F1 | 	add	local02, #1
01b88     35 00 00 FF 
01b8c     3C E4 85 F1 | 	sub	objptr, ##27196
01b90     C8 FF 9F FD | 	jmp	#LR__0089
01b94                 | LR__0090
01b94                 | LR__0091
01b94                 | ' 
01b94                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b94                 | ' 
01b94                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b94     35 00 00 FF 
01b98     3C E4 05 F1 | 	add	objptr, ##27196
01b9c     F2 12 02 FB | 	rdlong	arg01, objptr
01ba0     35 00 00 FF 
01ba4     3C E4 85 F1 | 	sub	objptr, ##27196
01ba8     09 2B 02 F6 | 	mov	local07, arg01
01bac     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01bb0                 | LR__0092
01bb0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01bb4     01 2A 06 51 |  if_ne	add	local07, #1
01bb8     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01bbc                 | LR__0093
01bbc     09 2B 8A F1 | 	sub	local07, arg01 wz
01bc0     7C 17 90 AD |  if_e	jmp	#LR__0149
01bc4                 | ' 
01bc4                 | ' 
01bc4                 | ' if isdec(lparts(0).part$) then let addptr=1 else let addptr=0
01bc4     35 00 00 FF 
01bc8     3C E4 05 F1 | 	add	objptr, ##27196
01bcc     F2 12 02 FB | 	rdlong	arg01, objptr
01bd0     35 00 00 FF 
01bd4     3C E4 85 F1 | 	sub	objptr, ##27196
01bd8     E0 37 B0 FD | 	call	#_isdec
01bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
01be0     5A 00 00 5F 
01be4     40 E4 05 51 |  if_ne	add	objptr, ##46144
01be8     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01bec     5A 00 00 FF 
01bf0     40 E4 E5 F3 | 	sumnz	objptr, ##46144
01bf4     F2 00 68 AC |  if_e	wrlong	#0, objptr
01bf8     5A 00 00 AF 
01bfc     40 E4 85 A1 |  if_e	sub	objptr, ##46144
01c00     5A 00 00 FF 
01c04     40 E4 05 F1 | 	add	objptr, ##46144
01c08     F2 26 02 FB | 	rdlong	local05, objptr
01c0c     03 26 66 F0 | 	shl	local05, #3
01c10     25 00 00 FF 
01c14     04 E4 85 F1 | 	sub	objptr, ##18948
01c18     F2 26 02 F1 | 	add	local05, objptr
01c1c     13 33 02 FB | 	rdlong	local11, local05
01c20     25 00 00 FF 
01c24     08 E4 05 F1 | 	add	objptr, ##18952
01c28     F2 32 62 FC | 	wrlong	local11, objptr
01c2c     04 E4 85 F1 | 	sub	objptr, #4
01c30     F2 32 02 FB | 	rdlong	local11, objptr
01c34     03 32 66 F0 | 	shl	local11, #3
01c38     25 00 00 FF 
01c3c     04 E4 85 F1 | 	sub	objptr, ##18948
01c40     F2 30 02 F6 | 	mov	local10, objptr
01c44     F2 32 02 F1 | 	add	local11, objptr
01c48     19 15 02 FB | 	rdlong	arg02, local11
01c4c     70 01 00 FF 
01c50     5B 17 06 F6 | 	mov	arg03, ##@LR__4810
01c54     01 12 06 F6 | 	mov	arg01, #1
01c58     35 00 00 FF 
01c5c     3C E4 85 F1 | 	sub	objptr, ##27196
01c60     08 F4 B1 FD | 	call	#__system__Instr
01c64     5A 00 00 FF 
01c68     48 E4 05 F1 | 	add	objptr, ##46152
01c6c     F2 FA 61 FC | 	wrlong	result1, objptr
01c70                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 
01c70     FD 24 02 F6 | 	mov	local04, result1
01c74     5A 00 00 FF 
01c78     48 E4 85 F1 | 	sub	objptr, ##46152
01c7c     01 24 56 F2 | 	cmps	local04, #1 wc
01c80     DC 01 90 CD |  if_b	jmp	#LR__0100
01c84     5A 00 00 FF 
01c88     40 E4 05 F1 | 	add	objptr, ##46144
01c8c     F2 30 02 FB | 	rdlong	local10, objptr
01c90     03 30 66 F0 | 	shl	local10, #3
01c94     25 00 00 FF 
01c98     04 E4 85 F1 | 	sub	objptr, ##18948
01c9c     F2 36 02 F6 | 	mov	local13, objptr
01ca0     F2 30 02 F1 | 	add	local10, objptr
01ca4     18 13 02 FB | 	rdlong	arg01, local10
01ca8     35 00 00 FF 
01cac     3C E4 85 F1 | 	sub	objptr, ##27196
01cb0     09 2B 02 F6 | 	mov	local07, arg01
01cb4     97 06 48 FB | 	callpa	#(@LR__0095-@LR__0094)>>2,fcache_load_ptr_
01cb8                 | LR__0094
01cb8     15 FB C9 FA | 	rdbyte	result1, local07 wz
01cbc     01 2A 06 51 |  if_ne	add	local07, #1
01cc0     F4 FF 9F 5D |  if_ne	jmp	#LR__0094
01cc4                 | LR__0095
01cc4     09 2B 82 F1 | 	sub	local07, arg01
01cc8     15 2F 02 F6 | 	mov	local09, local07
01ccc     5A 00 00 FF 
01cd0     48 E4 05 F1 | 	add	objptr, ##46152
01cd4     F2 26 02 FB | 	rdlong	local05, objptr
01cd8     5A 00 00 FF 
01cdc     48 E4 85 F1 | 	sub	objptr, ##46152
01ce0     17 27 52 F2 | 	cmps	local05, local09 wc
01ce4     78 01 90 3D |  if_ae	jmp	#LR__0100
01ce8     01 3A 06 F1 | 	add	local15, #1
01cec                 | '   k+=1
01cec                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01cec     1D 21 02 F6 | 	mov	local02, local15
01cf0     5A 00 00 FF 
01cf4     40 E4 05 F1 | 	add	objptr, ##46144
01cf8     F2 5C 02 FB | 	rdlong	local32, objptr
01cfc     01 5C 06 F1 | 	add	local32, #1
01d00     25 00 00 FF 
01d04     04 E4 85 F1 | 	sub	objptr, ##18948
01d08     97 2E 48 FB | 	callpa	#(@LR__0097-@LR__0096)>>2,fcache_load_ptr_
01d0c                 | LR__0096
01d0c     10 29 02 F6 | 	mov	local06, local02
01d10     01 28 86 F1 | 	sub	local06, #1
01d14     03 28 66 F0 | 	shl	local06, #3
01d18     F2 28 02 F1 | 	add	local06, objptr
01d1c     14 23 02 FB | 	rdlong	local03, local06
01d20     10 33 02 F6 | 	mov	local11, local02
01d24     01 32 86 F1 | 	sub	local11, #1
01d28     03 32 66 F0 | 	shl	local11, #3
01d2c     F2 32 02 F1 | 	add	local11, objptr
01d30     04 32 06 F1 | 	add	local11, #4
01d34     19 2F 02 FB | 	rdlong	local09, local11
01d38     10 33 02 F6 | 	mov	local11, local02
01d3c     03 32 66 F0 | 	shl	local11, #3
01d40     F2 32 02 F1 | 	add	local11, objptr
01d44     19 23 62 FC | 	wrlong	local03, local11
01d48     10 4B 02 F6 | 	mov	local23, local02
01d4c     03 4A 66 F0 | 	shl	local23, #3
01d50     F2 4A 02 F1 | 	add	local23, objptr
01d54     04 4A 06 F1 | 	add	local23, #4
01d58     25 2F 62 FC | 	wrlong	local09, local23
01d5c     01 20 86 F1 | 	sub	local02, #1
01d60     2E 21 52 F2 | 	cmps	local02, local32 wc
01d64     A4 FF 9F 3D |  if_ae	jmp	#LR__0096
01d68                 | LR__0097
01d68     25 00 00 FF 
01d6c     04 E4 05 F1 | 	add	objptr, ##18948
01d70     F2 4A 02 FB | 	rdlong	local23, objptr
01d74     25 27 02 F6 | 	mov	local05, local23
01d78     01 26 06 F1 | 	add	local05, #1
01d7c     03 26 66 F0 | 	shl	local05, #3
01d80     25 00 00 FF 
01d84     04 E4 85 F1 | 	sub	objptr, ##18948
01d88     F2 26 02 F1 | 	add	local05, objptr
01d8c     03 4A 66 F0 | 	shl	local23, #3
01d90     F2 4A 02 F1 | 	add	local23, objptr
01d94     25 33 02 FB | 	rdlong	local11, local23
01d98     25 00 00 FF 
01d9c     04 E4 05 F1 | 	add	objptr, ##18948
01da0     F2 44 02 FB | 	rdlong	local20, objptr
01da4     22 47 02 F6 | 	mov	local21, local20
01da8     03 46 66 F0 | 	shl	local21, #3
01dac     25 00 00 FF 
01db0     04 E4 85 F1 | 	sub	objptr, ##18948
01db4     F2 4C 02 F6 | 	mov	local24, objptr
01db8     F2 46 02 F1 | 	add	local21, objptr
01dbc     23 13 02 FB | 	rdlong	arg01, local21
01dc0     35 00 00 FF 
01dc4     3C E4 85 F1 | 	sub	objptr, ##27196
01dc8     09 2B 02 F6 | 	mov	local07, arg01
01dcc     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
01dd0                 | LR__0098
01dd0     15 FB C9 FA | 	rdbyte	result1, local07 wz
01dd4     01 2A 06 51 |  if_ne	add	local07, #1
01dd8     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
01ddc                 | LR__0099
01ddc     09 2B 82 F1 | 	sub	local07, arg01
01de0     15 15 02 F6 | 	mov	arg02, local07
01de4     5A 00 00 FF 
01de8     48 E4 05 F1 | 	add	objptr, ##46152
01dec     F2 4A 02 FB | 	rdlong	local23, objptr
01df0     5A 00 00 FF 
01df4     48 E4 85 F1 | 	sub	objptr, ##46152
01df8     25 15 82 F1 | 	sub	arg02, local23
01dfc     19 13 02 F6 | 	mov	arg01, local11
01e00     A8 ED B1 FD | 	call	#__system__Right_S
01e04     13 FB 61 FC | 	wrlong	result1, local05
01e08     5A 00 00 FF 
01e0c     40 E4 05 F1 | 	add	objptr, ##46144
01e10     F2 34 02 FB | 	rdlong	local12, objptr
01e14     1A 27 02 F6 | 	mov	local05, local12
01e18     03 26 66 F0 | 	shl	local05, #3
01e1c     25 00 00 FF 
01e20     04 E4 85 F1 | 	sub	objptr, ##18948
01e24     F2 26 02 F1 | 	add	local05, objptr
01e28     1A 4B 02 F6 | 	mov	local23, local12
01e2c     03 4A 66 F0 | 	shl	local23, #3
01e30     F2 42 02 F6 | 	mov	local19, objptr
01e34     F2 4A 02 F1 | 	add	local23, objptr
01e38     25 13 02 FB | 	rdlong	arg01, local23
01e3c     25 00 00 FF 
01e40     0C E4 05 F1 | 	add	objptr, ##18956
01e44     F2 36 02 FB | 	rdlong	local13, objptr
01e48     5A 00 00 FF 
01e4c     48 E4 85 F1 | 	sub	objptr, ##46152
01e50     1B 31 02 F6 | 	mov	local10, local13
01e54     18 15 02 F6 | 	mov	arg02, local10
01e58     C8 EC B1 FD | 	call	#__system__Left_S
01e5c     13 FB 61 FC | 	wrlong	result1, local05
01e60                 | LR__0100
01e60                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then
01e60     5A 00 00 FF 
01e64     40 E4 05 F1 | 	add	objptr, ##46144
01e68     F2 28 02 FB | 	rdlong	local06, objptr
01e6c     03 28 66 F0 | 	shl	local06, #3
01e70     25 00 00 FF 
01e74     04 E4 85 F1 | 	sub	objptr, ##18948
01e78     F2 28 02 F1 | 	add	local06, objptr
01e7c     14 13 02 FB | 	rdlong	arg01, local06
01e80     01 14 06 F6 | 	mov	arg02, #1
01e84     35 00 00 FF 
01e88     3C E4 85 F1 | 	sub	objptr, ##27196
01e8c     94 EC B1 FD | 	call	#__system__Left_S
01e90     FD 12 02 F6 | 	mov	arg01, result1
01e94     70 01 00 FF 
01e98     5D 15 06 F6 | 	mov	arg02, ##@LR__4811
01e9c     9C CC B1 FD | 	call	#__system___string_cmp
01ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
01ea4     9C 01 90 5D |  if_ne	jmp	#LR__0107
01ea8     5A 00 00 FF 
01eac     40 E4 05 F1 | 	add	objptr, ##46144
01eb0     F2 32 02 FB | 	rdlong	local11, objptr
01eb4     03 32 66 F0 | 	shl	local11, #3
01eb8     25 00 00 FF 
01ebc     04 E4 85 F1 | 	sub	objptr, ##18948
01ec0     F2 30 02 F6 | 	mov	local10, objptr
01ec4     F2 32 02 F1 | 	add	local11, objptr
01ec8     19 13 02 FB | 	rdlong	arg01, local11
01ecc     35 00 00 FF 
01ed0     3C E4 85 F1 | 	sub	objptr, ##27196
01ed4     09 2B 02 F6 | 	mov	local07, arg01
01ed8     97 06 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01edc                 | LR__0101
01edc     15 FB C9 FA | 	rdbyte	result1, local07 wz
01ee0     01 2A 06 51 |  if_ne	add	local07, #1
01ee4     F4 FF 9F 5D |  if_ne	jmp	#LR__0101
01ee8                 | LR__0102
01ee8     09 2B 82 F1 | 	sub	local07, arg01
01eec     02 2A 56 F2 | 	cmps	local07, #2 wc
01ef0     50 01 90 CD |  if_b	jmp	#LR__0107
01ef4     01 3A 06 F1 | 	add	local15, #1
01ef8                 | '   k+=1
01ef8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
01ef8     1D 21 02 F6 | 	mov	local02, local15
01efc     5A 00 00 FF 
01f00     40 E4 05 F1 | 	add	objptr, ##46144
01f04     F2 5E 02 FB | 	rdlong	local33, objptr
01f08     01 5E 06 F1 | 	add	local33, #1
01f0c     25 00 00 FF 
01f10     04 E4 85 F1 | 	sub	objptr, ##18948
01f14     97 2E 48 FB | 	callpa	#(@LR__0104-@LR__0103)>>2,fcache_load_ptr_
01f18                 | LR__0103
01f18     10 29 02 F6 | 	mov	local06, local02
01f1c     01 28 86 F1 | 	sub	local06, #1
01f20     03 28 66 F0 | 	shl	local06, #3
01f24     F2 28 02 F1 | 	add	local06, objptr
01f28     14 23 02 FB | 	rdlong	local03, local06
01f2c     10 33 02 F6 | 	mov	local11, local02
01f30     01 32 86 F1 | 	sub	local11, #1
01f34     03 32 66 F0 | 	shl	local11, #3
01f38     F2 32 02 F1 | 	add	local11, objptr
01f3c     04 32 06 F1 | 	add	local11, #4
01f40     19 2F 02 FB | 	rdlong	local09, local11
01f44     10 33 02 F6 | 	mov	local11, local02
01f48     03 32 66 F0 | 	shl	local11, #3
01f4c     F2 32 02 F1 | 	add	local11, objptr
01f50     19 23 62 FC | 	wrlong	local03, local11
01f54     10 4B 02 F6 | 	mov	local23, local02
01f58     03 4A 66 F0 | 	shl	local23, #3
01f5c     F2 4A 02 F1 | 	add	local23, objptr
01f60     04 4A 06 F1 | 	add	local23, #4
01f64     25 2F 62 FC | 	wrlong	local09, local23
01f68     01 20 86 F1 | 	sub	local02, #1
01f6c     2F 21 52 F2 | 	cmps	local02, local33 wc
01f70     A4 FF 9F 3D |  if_ae	jmp	#LR__0103
01f74                 | LR__0104
01f74     25 00 00 FF 
01f78     04 E4 05 F1 | 	add	objptr, ##18948
01f7c     F2 4A 02 FB | 	rdlong	local23, objptr
01f80     25 27 02 F6 | 	mov	local05, local23
01f84     01 26 06 F1 | 	add	local05, #1
01f88     03 26 66 F0 | 	shl	local05, #3
01f8c     25 00 00 FF 
01f90     04 E4 85 F1 | 	sub	objptr, ##18948
01f94     F2 26 02 F1 | 	add	local05, objptr
01f98     03 4A 66 F0 | 	shl	local23, #3
01f9c     F2 4A 02 F1 | 	add	local23, objptr
01fa0     25 33 02 FB | 	rdlong	local11, local23
01fa4     25 00 00 FF 
01fa8     04 E4 05 F1 | 	add	objptr, ##18948
01fac     F2 42 02 FB | 	rdlong	local19, objptr
01fb0     21 4B 02 F6 | 	mov	local23, local19
01fb4     25 45 02 F6 | 	mov	local20, local23
01fb8     22 47 02 F6 | 	mov	local21, local20
01fbc     03 46 66 F0 | 	shl	local21, #3
01fc0     25 00 00 FF 
01fc4     04 E4 85 F1 | 	sub	objptr, ##18948
01fc8     F2 4C 02 F6 | 	mov	local24, objptr
01fcc     F2 46 02 F1 | 	add	local21, objptr
01fd0     23 13 02 FB | 	rdlong	arg01, local21
01fd4     35 00 00 FF 
01fd8     3C E4 85 F1 | 	sub	objptr, ##27196
01fdc     09 2B 02 F6 | 	mov	local07, arg01
01fe0     97 06 48 FB | 	callpa	#(@LR__0106-@LR__0105)>>2,fcache_load_ptr_
01fe4                 | LR__0105
01fe4     15 FB C9 FA | 	rdbyte	result1, local07 wz
01fe8     01 2A 06 51 |  if_ne	add	local07, #1
01fec     F4 FF 9F 5D |  if_ne	jmp	#LR__0105
01ff0                 | LR__0106
01ff0     09 2B 82 F1 | 	sub	local07, arg01
01ff4     15 35 02 F6 | 	mov	local12, local07
01ff8     1A 37 02 F6 | 	mov	local13, local12
01ffc     01 36 86 F1 | 	sub	local13, #1
02000     1B 31 02 F6 | 	mov	local10, local13
02004     19 13 02 F6 | 	mov	arg01, local11
02008     18 15 02 F6 | 	mov	arg02, local10
0200c     9C EB B1 FD | 	call	#__system__Right_S
02010     13 FB 61 FC | 	wrlong	result1, local05
02014     5A 00 00 FF 
02018     40 E4 05 F1 | 	add	objptr, ##46144
0201c     F2 26 02 FB | 	rdlong	local05, objptr
02020     03 26 66 F0 | 	shl	local05, #3
02024     25 00 00 FF 
02028     04 E4 85 F1 | 	sub	objptr, ##18948
0202c     F2 26 02 F1 | 	add	local05, objptr
02030     70 01 00 FF 
02034     5F 33 06 F6 | 	mov	local11, ##@LR__4812
02038     13 33 62 FC | 	wrlong	local11, local05
0203c     35 00 00 FF 
02040     3C E4 85 F1 | 	sub	objptr, ##27196
02044                 | LR__0107
02044     5A 00 00 FF 
02048     40 E4 05 F1 | 	add	objptr, ##46144
0204c     F2 26 02 FB | 	rdlong	local05, objptr
02050     03 26 66 F0 | 	shl	local05, #3
02054     25 00 00 FF 
02058     04 E4 85 F1 | 	sub	objptr, ##18948
0205c     F2 26 02 F1 | 	add	local05, objptr
02060     13 33 02 FB | 	rdlong	local11, local05
02064     25 00 00 FF 
02068     08 E4 05 F1 | 	add	objptr, ##18952
0206c     F2 32 62 FC | 	wrlong	local11, objptr
02070                 | ' 
02070                 | ' ' process the case when simple load or save is called without ""
02070                 | ' 
02070                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02070     5A 00 00 FF 
02074     44 E4 85 F1 | 	sub	objptr, ##46148
02078     70 01 00 FF 
0207c     61 15 06 F6 | 	mov	arg02, ##@LR__4813
02080     19 13 02 F6 | 	mov	arg01, local11
02084     B4 CA B1 FD | 	call	#__system___string_cmp
02088     00 FA 0D F2 | 	cmp	result1, #0 wz
0208c     50 00 90 AD |  if_e	jmp	#LR__0108
02090     5A 00 00 FF 
02094     44 E4 05 F1 | 	add	objptr, ##46148
02098     F2 12 02 FB | 	rdlong	arg01, objptr
0209c     5A 00 00 FF 
020a0     44 E4 85 F1 | 	sub	objptr, ##46148
020a4     70 01 00 FF 
020a8     67 15 06 F6 | 	mov	arg02, ##@LR__4814
020ac     8C CA B1 FD | 	call	#__system___string_cmp
020b0     00 FA 0D F2 | 	cmp	result1, #0 wz
020b4     28 00 90 AD |  if_e	jmp	#LR__0108
020b8     5A 00 00 FF 
020bc     44 E4 05 F1 | 	add	objptr, ##46148
020c0     F2 12 02 FB | 	rdlong	arg01, objptr
020c4     5A 00 00 FF 
020c8     44 E4 85 F1 | 	sub	objptr, ##46148
020cc     70 01 00 FF 
020d0     6E 15 06 F6 | 	mov	arg02, ##@LR__4815
020d4     64 CA B1 FD | 	call	#__system___string_cmp
020d8     00 FA 0D F2 | 	cmp	result1, #0 wz
020dc     48 01 90 5D |  if_ne	jmp	#LR__0111
020e0                 | LR__0108
020e0                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(addptr+1).token=token_decimal
020e0     5A 00 00 FF 
020e4     40 E4 05 F1 | 	add	objptr, ##46144
020e8     F2 28 02 FB | 	rdlong	local06, objptr
020ec     01 28 06 F1 | 	add	local06, #1
020f0     03 28 66 F0 | 	shl	local06, #3
020f4     25 00 00 FF 
020f8     04 E4 85 F1 | 	sub	objptr, ##18948
020fc     F2 28 02 F1 | 	add	local06, objptr
02100     14 13 02 FB | 	rdlong	arg01, local06
02104     70 01 00 FF 
02108     74 15 06 F6 | 	mov	arg02, ##@LR__4816
0210c     35 00 00 FF 
02110     3C E4 85 F1 | 	sub	objptr, ##27196
02114     24 CA B1 FD | 	call	#__system___string_cmp
02118     00 FA 0D F2 | 	cmp	result1, #0 wz
0211c     60 00 90 5D |  if_ne	jmp	#LR__0109
02120     5A 00 00 FF 
02124     40 E4 05 F1 | 	add	objptr, ##46144
02128     F2 26 02 FB | 	rdlong	local05, objptr
0212c     01 26 06 F1 | 	add	local05, #1
02130     03 26 66 F0 | 	shl	local05, #3
02134     25 00 00 FF 
02138     04 E4 85 F1 | 	sub	objptr, ##18948
0213c     F2 26 02 F1 | 	add	local05, objptr
02140     70 01 00 FF 
02144     77 33 06 F6 | 	mov	local11, ##@LR__4817
02148     13 33 62 FC | 	wrlong	local11, local05
0214c     25 00 00 FF 
02150     04 E4 05 F1 | 	add	objptr, ##18948
02154     F2 26 02 FB | 	rdlong	local05, objptr
02158     01 26 06 F1 | 	add	local05, #1
0215c     03 26 66 F0 | 	shl	local05, #3
02160     25 00 00 FF 
02164     04 E4 85 F1 | 	sub	objptr, ##18948
02168     F2 26 02 F1 | 	add	local05, objptr
0216c     04 26 06 F1 | 	add	local05, #4
02170     01 00 80 FF 
02174     13 01 68 FC | 	wrlong	##512, local05
02178     35 00 00 FF 
0217c     3C E4 85 F1 | 	sub	objptr, ##27196
02180                 | LR__0109
02180                 | '   if lparts(addptr+1).part$="off" then   lparts(addptr+1).part$="0" :lparts(addptr+1).token=token_decimal
02180     5A 00 00 FF 
02184     40 E4 05 F1 | 	add	objptr, ##46144
02188     F2 28 02 FB | 	rdlong	local06, objptr
0218c     01 28 06 F1 | 	add	local06, #1
02190     03 28 66 F0 | 	shl	local06, #3
02194     25 00 00 FF 
02198     04 E4 85 F1 | 	sub	objptr, ##18948
0219c     F2 32 02 F6 | 	mov	local11, objptr
021a0     F2 28 02 F1 | 	add	local06, objptr
021a4     14 13 02 FB | 	rdlong	arg01, local06
021a8     70 01 00 FF 
021ac     79 15 06 F6 | 	mov	arg02, ##@LR__4818
021b0     35 00 00 FF 
021b4     3C E4 85 F1 | 	sub	objptr, ##27196
021b8     80 C9 B1 FD | 	call	#__system___string_cmp
021bc     00 FA 0D F2 | 	cmp	result1, #0 wz
021c0     64 00 90 5D |  if_ne	jmp	#LR__0110
021c4     5A 00 00 FF 
021c8     40 E4 05 F1 | 	add	objptr, ##46144
021cc     F2 26 02 FB | 	rdlong	local05, objptr
021d0     01 26 06 F1 | 	add	local05, #1
021d4     03 26 66 F0 | 	shl	local05, #3
021d8     25 00 00 FF 
021dc     04 E4 85 F1 | 	sub	objptr, ##18948
021e0     F2 26 02 F1 | 	add	local05, objptr
021e4     70 01 00 FF 
021e8     7D 33 06 F6 | 	mov	local11, ##@LR__4819
021ec     13 33 62 FC | 	wrlong	local11, local05
021f0     25 00 00 FF 
021f4     04 E4 05 F1 | 	add	objptr, ##18948
021f8     F2 26 02 FB | 	rdlong	local05, objptr
021fc     01 26 06 F1 | 	add	local05, #1
02200     03 26 66 F0 | 	shl	local05, #3
02204     25 00 00 FF 
02208     04 E4 85 F1 | 	sub	objptr, ##18948
0220c     F2 26 02 F1 | 	add	local05, objptr
02210     09 32 C6 F9 | 	decod	local11, #9
02214     04 26 06 F1 | 	add	local05, #4
02218     01 00 80 FF 
0221c     13 01 68 FC | 	wrlong	##512, local05
02220     35 00 00 FF 
02224     3C E4 85 F1 | 	sub	objptr, ##27196
02228                 | LR__0110
02228                 | LR__0111
02228                 | ' if (lp$="mode" orelse lp$="m.") then 
02228     5A 00 00 FF 
0222c     44 E4 05 F1 | 	add	objptr, ##46148
02230     F2 12 02 FB | 	rdlong	arg01, objptr
02234     5A 00 00 FF 
02238     44 E4 85 F1 | 	sub	objptr, ##46148
0223c     70 01 00 FF 
02240     7F 15 06 F6 | 	mov	arg02, ##@LR__4820
02244     F4 C8 B1 FD | 	call	#__system___string_cmp
02248     00 FA 0D F2 | 	cmp	result1, #0 wz
0224c     28 00 90 AD |  if_e	jmp	#LR__0112
02250     5A 00 00 FF 
02254     44 E4 05 F1 | 	add	objptr, ##46148
02258     F2 12 02 FB | 	rdlong	arg01, objptr
0225c     5A 00 00 FF 
02260     44 E4 85 F1 | 	sub	objptr, ##46148
02264     70 01 00 FF 
02268     84 15 06 F6 | 	mov	arg02, ##@LR__4821
0226c     CC C8 B1 FD | 	call	#__system___string_cmp
02270     00 FA 0D F2 | 	cmp	result1, #0 wz
02274     48 02 90 5D |  if_ne	jmp	#LR__0118
02278                 | LR__0112
02278                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"  
02278     5A 00 00 FF 
0227c     40 E4 05 F1 | 	add	objptr, ##46144
02280     F2 28 02 FB | 	rdlong	local06, objptr
02284     01 28 06 F1 | 	add	local06, #1
02288     03 28 66 F0 | 	shl	local06, #3
0228c     25 00 00 FF 
02290     04 E4 85 F1 | 	sub	objptr, ##18948
02294     F2 28 02 F1 | 	add	local06, objptr
02298     14 13 02 FB | 	rdlong	arg01, local06
0229c     70 01 00 FF 
022a0     87 15 06 F6 | 	mov	arg02, ##@LR__4822
022a4     35 00 00 FF 
022a8     3C E4 85 F1 | 	sub	objptr, ##27196
022ac     8C C8 B1 FD | 	call	#__system___string_cmp
022b0     00 FA 0D F2 | 	cmp	result1, #0 wz
022b4     34 00 90 5D |  if_ne	jmp	#LR__0113
022b8     5A 00 00 FF 
022bc     40 E4 05 F1 | 	add	objptr, ##46144
022c0     F2 26 02 FB | 	rdlong	local05, objptr
022c4     01 26 06 F1 | 	add	local05, #1
022c8     03 26 66 F0 | 	shl	local05, #3
022cc     25 00 00 FF 
022d0     04 E4 85 F1 | 	sub	objptr, ##18948
022d4     F2 26 02 F1 | 	add	local05, objptr
022d8     70 01 00 FF 
022dc     8D 33 06 F6 | 	mov	local11, ##@LR__4823
022e0     13 33 62 FC | 	wrlong	local11, local05
022e4     35 00 00 FF 
022e8     3C E4 85 F1 | 	sub	objptr, ##27196
022ec                 | LR__0113
022ec                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
022ec     5A 00 00 FF 
022f0     40 E4 05 F1 | 	add	objptr, ##46144
022f4     F2 28 02 FB | 	rdlong	local06, objptr
022f8     01 28 06 F1 | 	add	local06, #1
022fc     03 28 66 F0 | 	shl	local06, #3
02300     25 00 00 FF 
02304     04 E4 85 F1 | 	sub	objptr, ##18948
02308     F2 28 02 F1 | 	add	local06, objptr
0230c     14 13 02 FB | 	rdlong	arg01, local06
02310     70 01 00 FF 
02314     8F 15 06 F6 | 	mov	arg02, ##@LR__4824
02318     35 00 00 FF 
0231c     3C E4 85 F1 | 	sub	objptr, ##27196
02320     18 C8 B1 FD | 	call	#__system___string_cmp
02324     00 FA 0D F2 | 	cmp	result1, #0 wz
02328     34 00 90 5D |  if_ne	jmp	#LR__0114
0232c     5A 00 00 FF 
02330     40 E4 05 F1 | 	add	objptr, ##46144
02334     F2 26 02 FB | 	rdlong	local05, objptr
02338     01 26 06 F1 | 	add	local05, #1
0233c     03 26 66 F0 | 	shl	local05, #3
02340     25 00 00 FF 
02344     04 E4 85 F1 | 	sub	objptr, ##18948
02348     F2 26 02 F1 | 	add	local05, objptr
0234c     70 01 00 FF 
02350     98 33 06 F6 | 	mov	local11, ##@LR__4825
02354     13 33 62 FC | 	wrlong	local11, local05
02358     35 00 00 FF 
0235c     3C E4 85 F1 | 	sub	objptr, ##27196
02360                 | LR__0114
02360                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02360     5A 00 00 FF 
02364     40 E4 05 F1 | 	add	objptr, ##46144
02368     F2 28 02 FB | 	rdlong	local06, objptr
0236c     01 28 06 F1 | 	add	local06, #1
02370     03 28 66 F0 | 	shl	local06, #3
02374     25 00 00 FF 
02378     04 E4 85 F1 | 	sub	objptr, ##18948
0237c     F2 28 02 F1 | 	add	local06, objptr
02380     14 13 02 FB | 	rdlong	arg01, local06
02384     70 01 00 FF 
02388     9A 15 06 F6 | 	mov	arg02, ##@LR__4826
0238c     35 00 00 FF 
02390     3C E4 85 F1 | 	sub	objptr, ##27196
02394     A4 C7 B1 FD | 	call	#__system___string_cmp
02398     00 FA 0D F2 | 	cmp	result1, #0 wz
0239c     34 00 90 5D |  if_ne	jmp	#LR__0115
023a0     5A 00 00 FF 
023a4     40 E4 05 F1 | 	add	objptr, ##46144
023a8     F2 26 02 FB | 	rdlong	local05, objptr
023ac     01 26 06 F1 | 	add	local05, #1
023b0     03 26 66 F0 | 	shl	local05, #3
023b4     25 00 00 FF 
023b8     04 E4 85 F1 | 	sub	objptr, ##18948
023bc     F2 26 02 F1 | 	add	local05, objptr
023c0     70 01 00 FF 
023c4     A3 33 06 F6 | 	mov	local11, ##@LR__4827
023c8     13 33 62 FC | 	wrlong	local11, local05
023cc     35 00 00 FF 
023d0     3C E4 85 F1 | 	sub	objptr, ##27196
023d4                 | LR__0115
023d4                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
023d4     5A 00 00 FF 
023d8     40 E4 05 F1 | 	add	objptr, ##46144
023dc     F2 28 02 FB | 	rdlong	local06, objptr
023e0     01 28 06 F1 | 	add	local06, #1
023e4     03 28 66 F0 | 	shl	local06, #3
023e8     25 00 00 FF 
023ec     04 E4 85 F1 | 	sub	objptr, ##18948
023f0     F2 28 02 F1 | 	add	local06, objptr
023f4     14 13 02 FB | 	rdlong	arg01, local06
023f8     70 01 00 FF 
023fc     A5 15 06 F6 | 	mov	arg02, ##@LR__4828
02400     35 00 00 FF 
02404     3C E4 85 F1 | 	sub	objptr, ##27196
02408     30 C7 B1 FD | 	call	#__system___string_cmp
0240c     00 FA 0D F2 | 	cmp	result1, #0 wz
02410     34 00 90 5D |  if_ne	jmp	#LR__0116
02414     5A 00 00 FF 
02418     40 E4 05 F1 | 	add	objptr, ##46144
0241c     F2 26 02 FB | 	rdlong	local05, objptr
02420     01 26 06 F1 | 	add	local05, #1
02424     03 26 66 F0 | 	shl	local05, #3
02428     25 00 00 FF 
0242c     04 E4 85 F1 | 	sub	objptr, ##18948
02430     F2 26 02 F1 | 	add	local05, objptr
02434     70 01 00 FF 
02438     AE 33 06 F6 | 	mov	local11, ##@LR__4829
0243c     13 33 62 FC | 	wrlong	local11, local05
02440     35 00 00 FF 
02444     3C E4 85 F1 | 	sub	objptr, ##27196
02448                 | LR__0116
02448                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02448     5A 00 00 FF 
0244c     40 E4 05 F1 | 	add	objptr, ##46144
02450     F2 28 02 FB | 	rdlong	local06, objptr
02454     01 28 06 F1 | 	add	local06, #1
02458     03 28 66 F0 | 	shl	local06, #3
0245c     25 00 00 FF 
02460     04 E4 85 F1 | 	sub	objptr, ##18948
02464     F2 32 02 F6 | 	mov	local11, objptr
02468     F2 28 02 F1 | 	add	local06, objptr
0246c     14 13 02 FB | 	rdlong	arg01, local06
02470     70 01 00 FF 
02474     B0 15 06 F6 | 	mov	arg02, ##@LR__4830
02478     35 00 00 FF 
0247c     3C E4 85 F1 | 	sub	objptr, ##27196
02480     B8 C6 B1 FD | 	call	#__system___string_cmp
02484     00 FA 0D F2 | 	cmp	result1, #0 wz
02488     34 00 90 5D |  if_ne	jmp	#LR__0117
0248c     5A 00 00 FF 
02490     40 E4 05 F1 | 	add	objptr, ##46144
02494     F2 26 02 FB | 	rdlong	local05, objptr
02498     01 26 06 F1 | 	add	local05, #1
0249c     03 26 66 F0 | 	shl	local05, #3
024a0     25 00 00 FF 
024a4     04 E4 85 F1 | 	sub	objptr, ##18948
024a8     F2 26 02 F1 | 	add	local05, objptr
024ac     70 01 00 FF 
024b0     B3 33 06 F6 | 	mov	local11, ##@LR__4831
024b4     13 33 62 FC | 	wrlong	local11, local05
024b8     35 00 00 FF 
024bc     3C E4 85 F1 | 	sub	objptr, ##27196
024c0                 | LR__0117
024c0                 | LR__0118
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' 
024c0                 | ' ' 2a find part types 
024c0                 | ' 
024c0                 | ' for i=0 to k-1
024c0     00 20 06 F6 | 	mov	local02, #0
024c4     1D 61 02 F6 | 	mov	local34, local15
024c8                 | LR__0119
024c8     30 21 52 F2 | 	cmps	local02, local34 wc
024cc     74 06 90 3D |  if_ae	jmp	#LR__0129
024d0     10 2F 02 F6 | 	mov	local09, local02
024d4     03 2E 66 F0 | 	shl	local09, #3
024d8     35 00 00 FF 
024dc     3C E4 05 F1 | 	add	objptr, ##27196
024e0     F2 2E 02 F1 | 	add	local09, objptr
024e4     10 31 02 F6 | 	mov	local10, local02
024e8     18 35 02 F6 | 	mov	local12, local10
024ec     03 34 66 F0 | 	shl	local12, #3
024f0     F2 4A 02 F6 | 	mov	local23, objptr
024f4     F2 34 02 F1 | 	add	local12, objptr
024f8     1A 13 02 FB | 	rdlong	arg01, local12
024fc     35 00 00 FF 
02500     3C E4 85 F1 | 	sub	objptr, ##27196
02504     B0 14 B0 FD | 	call	#_isseparator
02508     FD FA E1 F8 | 	getbyte	result1, result1, #0
0250c     04 2E 06 F1 | 	add	local09, #4
02510     17 FB 61 FC | 	wrlong	result1, local09
02514                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
02514     10 2F 02 F6 | 	mov	local09, local02
02518     03 2E 66 F0 | 	shl	local09, #3
0251c     35 00 00 FF 
02520     3C E4 05 F1 | 	add	objptr, ##27196
02524     F2 2E 02 F1 | 	add	local09, objptr
02528     04 2E 06 F1 | 	add	local09, #4
0252c     17 33 02 FB | 	rdlong	local11, local09
02530     01 32 56 F2 | 	cmps	local11, #1 wc
02534     35 00 00 FF 
02538     3C E4 85 F1 | 	sub	objptr, ##27196
0253c     FC 05 90 3D |  if_ae	jmp	#LR__0128
02540     10 2F 02 F6 | 	mov	local09, local02
02544     03 2E 66 F0 | 	shl	local09, #3
02548     35 00 00 FF 
0254c     3C E4 05 F1 | 	add	objptr, ##27196
02550     F2 2E 02 F1 | 	add	local09, objptr
02554     10 31 02 F6 | 	mov	local10, local02
02558     18 35 02 F6 | 	mov	local12, local10
0255c     03 34 66 F0 | 	shl	local12, #3
02560     F2 4A 02 F6 | 	mov	local23, objptr
02564     F2 34 02 F1 | 	add	local12, objptr
02568     1A 13 02 FB | 	rdlong	arg01, local12
0256c     35 00 00 FF 
02570     3C E4 85 F1 | 	sub	objptr, ##27196
02574     F4 0D B0 FD | 	call	#_isoperator
02578     FD FA E1 F8 | 	getbyte	result1, result1, #0
0257c     04 2E 06 F1 | 	add	local09, #4
02580     17 FB 61 FC | 	wrlong	result1, local09
02584                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
02584     10 2F 02 F6 | 	mov	local09, local02
02588     03 2E 66 F0 | 	shl	local09, #3
0258c     35 00 00 FF 
02590     3C E4 05 F1 | 	add	objptr, ##27196
02594     F2 2E 02 F1 | 	add	local09, objptr
02598     04 2E 06 F1 | 	add	local09, #4
0259c     17 33 02 FB | 	rdlong	local11, local09
025a0     01 32 56 F2 | 	cmps	local11, #1 wc
025a4     35 00 00 FF 
025a8     3C E4 85 F1 | 	sub	objptr, ##27196
025ac     8C 05 90 3D |  if_ae	jmp	#LR__0128
025b0     10 2F 02 F6 | 	mov	local09, local02
025b4     03 2E 66 F0 | 	shl	local09, #3
025b8     35 00 00 FF 
025bc     3C E4 05 F1 | 	add	objptr, ##27196
025c0     F2 2E 02 F1 | 	add	local09, objptr
025c4     10 31 02 F6 | 	mov	local10, local02
025c8     18 35 02 F6 | 	mov	local12, local10
025cc     03 34 66 F0 | 	shl	local12, #3
025d0     F2 4A 02 F6 | 	mov	local23, objptr
025d4     F2 34 02 F1 | 	add	local12, objptr
025d8     1A 13 02 FB | 	rdlong	arg01, local12
025dc     35 00 00 FF 
025e0     3C E4 85 F1 | 	sub	objptr, ##27196
025e4                 | ' 
025e4                 | ' select case s
025e4     71 01 00 FF 
025e8     94 14 06 F6 | 	mov	arg02, ##@LR__4902
025ec     4C C5 B1 FD | 	call	#__system___string_cmp
025f0     00 FA 0D F2 | 	cmp	result1, #0 wz
025f4     1B FA 05 A6 |  if_e	mov	result1, #27
025f8     00 FA 05 56 |  if_ne	mov	result1, #0
025fc     FD FA E1 F8 | 	getbyte	result1, result1, #0
02600     04 2E 06 F1 | 	add	local09, #4
02604     17 FB 61 FC | 	wrlong	result1, local09
02608                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
02608     10 2F 02 F6 | 	mov	local09, local02
0260c     03 2E 66 F0 | 	shl	local09, #3
02610     35 00 00 FF 
02614     3C E4 05 F1 | 	add	objptr, ##27196
02618     F2 2E 02 F1 | 	add	local09, objptr
0261c     04 2E 06 F1 | 	add	local09, #4
02620     17 33 02 FB | 	rdlong	local11, local09
02624     01 32 56 F2 | 	cmps	local11, #1 wc
02628     35 00 00 FF 
0262c     3C E4 85 F1 | 	sub	objptr, ##27196
02630     08 05 90 3D |  if_ae	jmp	#LR__0128
02634     10 2F 02 F6 | 	mov	local09, local02
02638     03 2E 66 F0 | 	shl	local09, #3
0263c     35 00 00 FF 
02640     3C E4 05 F1 | 	add	objptr, ##27196
02644     F2 2E 02 F1 | 	add	local09, objptr
02648     10 31 02 F6 | 	mov	local10, local02
0264c     18 35 02 F6 | 	mov	local12, local10
02650     03 34 66 F0 | 	shl	local12, #3
02654     F2 4A 02 F6 | 	mov	local23, objptr
02658     F2 34 02 F1 | 	add	local12, objptr
0265c     1A 13 02 FB | 	rdlong	arg01, local12
02660     35 00 00 FF 
02664     3C E4 85 F1 | 	sub	objptr, ##27196
02668     4C 15 B0 FD | 	call	#_iscommand
0266c     FD FA E1 F8 | 	getbyte	result1, result1, #0
02670     04 2E 06 F1 | 	add	local09, #4
02674     17 FB 61 FC | 	wrlong	result1, local09
02678                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
02678     10 2F 02 F6 | 	mov	local09, local02
0267c     03 2E 66 F0 | 	shl	local09, #3
02680     35 00 00 FF 
02684     3C E4 05 F1 | 	add	objptr, ##27196
02688     F2 2E 02 F1 | 	add	local09, objptr
0268c     04 2E 06 F1 | 	add	local09, #4
02690     17 33 02 FB | 	rdlong	local11, local09
02694     01 32 56 F2 | 	cmps	local11, #1 wc
02698     35 00 00 FF 
0269c     3C E4 85 F1 | 	sub	objptr, ##27196
026a0     98 04 90 3D |  if_ae	jmp	#LR__0128
026a4     10 2F 02 F6 | 	mov	local09, local02
026a8     03 2E 66 F0 | 	shl	local09, #3
026ac     35 00 00 FF 
026b0     3C E4 05 F1 | 	add	objptr, ##27196
026b4     F2 2E 02 F1 | 	add	local09, objptr
026b8     10 31 02 F6 | 	mov	local10, local02
026bc     18 35 02 F6 | 	mov	local12, local10
026c0     03 34 66 F0 | 	shl	local12, #3
026c4     F2 4A 02 F6 | 	mov	local23, objptr
026c8     F2 34 02 F1 | 	add	local12, objptr
026cc     1A 13 02 FB | 	rdlong	arg01, local12
026d0     35 00 00 FF 
026d4     3C E4 85 F1 | 	sub	objptr, ##27196
026d8     FC 20 B0 FD | 	call	#_isfunction
026dc     FD FA E1 F8 | 	getbyte	result1, result1, #0
026e0     04 2E 06 F1 | 	add	local09, #4
026e4     17 FB 61 FC | 	wrlong	result1, local09
026e8                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
026e8     10 2F 02 F6 | 	mov	local09, local02
026ec     03 2E 66 F0 | 	shl	local09, #3
026f0     35 00 00 FF 
026f4     3C E4 05 F1 | 	add	objptr, ##27196
026f8     F2 2E 02 F1 | 	add	local09, objptr
026fc     04 2E 06 F1 | 	add	local09, #4
02700     17 33 02 FB | 	rdlong	local11, local09
02704     01 32 56 F2 | 	cmps	local11, #1 wc
02708     35 00 00 FF 
0270c     3C E4 85 F1 | 	sub	objptr, ##27196
02710     28 04 90 3D |  if_ae	jmp	#LR__0128
02714     10 2F 02 F6 | 	mov	local09, local02
02718     03 2E 66 F0 | 	shl	local09, #3
0271c     35 00 00 FF 
02720     3C E4 05 F1 | 	add	objptr, ##27196
02724     F2 2E 02 F1 | 	add	local09, objptr
02728     10 31 02 F6 | 	mov	local10, local02
0272c     18 37 02 F6 | 	mov	local13, local10
02730     03 36 66 F0 | 	shl	local13, #3
02734     F2 34 02 F6 | 	mov	local12, objptr
02738     F2 36 02 F1 | 	add	local13, objptr
0273c     1B 13 02 FB | 	rdlong	arg01, local13
02740     35 00 00 FF 
02744     3C E4 85 F1 | 	sub	objptr, ##27196
02748     00 0F B0 FD | 	call	#_isnotename
0274c     04 2E 06 F1 | 	add	local09, #4
02750     17 FB 61 FC | 	wrlong	result1, local09
02754                 | ' lparts(i).token=isnotename(lparts(i).part$) 
02754                 | ' if lparts(i).token>0 then 
02754     10 2F 02 F6 | 	mov	local09, local02
02758     03 2E 66 F0 | 	shl	local09, #3
0275c     35 00 00 FF 
02760     3C E4 05 F1 | 	add	objptr, ##27196
02764     F2 2E 02 F1 | 	add	local09, objptr
02768     04 2E 06 F1 | 	add	local09, #4
0276c     17 33 02 FB | 	rdlong	local11, local09
02770     01 32 56 F2 | 	cmps	local11, #1 wc
02774     35 00 00 FF 
02778     3C E4 85 F1 | 	sub	objptr, ##27196
0277c     88 00 90 CD |  if_b	jmp	#LR__0120
02780     10 27 02 F6 | 	mov	local05, local02
02784     03 26 66 F0 | 	shl	local05, #3
02788     35 00 00 FF 
0278c     3C E4 05 F1 | 	add	objptr, ##27196
02790     F2 26 02 F1 | 	add	local05, objptr
02794     04 26 06 F1 | 	add	local05, #4
02798     13 33 02 FB | 	rdlong	local11, local05
0279c     19 13 02 F6 | 	mov	arg01, local11
027a0     35 00 00 FF 
027a4     3C E4 85 F1 | 	sub	objptr, ##27196
027a8     08 7B B1 FD | 	call	#_getnoteval
027ac     FD 62 02 F6 | 	mov	local35, result1
027b0     10 2F 02 F6 | 	mov	local09, local02
027b4     03 2E 66 F0 | 	shl	local09, #3
027b8     35 00 00 FF 
027bc     3C E4 05 F1 | 	add	objptr, ##27196
027c0     F2 2E 02 F1 | 	add	local09, objptr
027c4     31 13 02 F6 | 	mov	arg01, local35
027c8     35 00 00 FF 
027cc     3C E4 85 F1 | 	sub	objptr, ##27196
027d0     48 E5 B1 FD | 	call	#__system__str_S
027d4     17 FB 61 FC | 	wrlong	result1, local09
027d8     10 23 02 F6 | 	mov	local03, local02
027dc     11 2F 02 F6 | 	mov	local09, local03
027e0     03 2E 66 F0 | 	shl	local09, #3
027e4     35 00 00 FF 
027e8     3C E4 05 F1 | 	add	objptr, ##27196
027ec     F2 2E 02 F1 | 	add	local09, objptr
027f0     04 2E 06 F1 | 	add	local09, #4
027f4     01 00 80 FF 
027f8     17 05 68 FC | 	wrlong	##514, local09
027fc     35 00 00 FF 
02800     3C E4 85 F1 | 	sub	objptr, ##27196
02804     34 03 90 FD | 	jmp	#LR__0128
02808                 | LR__0120
02808     10 27 02 F6 | 	mov	local05, local02
0280c     03 26 66 F0 | 	shl	local05, #3
02810     35 00 00 FF 
02814     3C E4 05 F1 | 	add	objptr, ##27196
02818     F2 26 02 F1 | 	add	local05, objptr
0281c     13 13 02 FB | 	rdlong	arg01, local05
02820     35 00 00 FF 
02824     3C E4 85 F1 | 	sub	objptr, ##27196
02828     60 27 B0 FD | 	call	#_isnum
0282c     FD 24 02 F6 | 	mov	local04, result1
02830     5A 00 00 FF 
02834     4C E4 05 F1 | 	add	objptr, ##46156
02838     F2 24 62 FC | 	wrlong	local04, objptr
0283c     10 27 02 F6 | 	mov	local05, local02
02840     03 26 66 F0 | 	shl	local05, #3
02844     25 00 00 FF 
02848     10 E4 85 F1 | 	sub	objptr, ##18960
0284c     F2 26 02 F1 | 	add	local05, objptr
02850     13 13 02 FB | 	rdlong	arg01, local05
02854     35 00 00 FF 
02858     3C E4 85 F1 | 	sub	objptr, ##27196
0285c     04 2A B0 FD | 	call	#_isint
02860     FD 24 02 F6 | 	mov	local04, result1
02864     5A 00 00 FF 
02868     50 E4 05 F1 | 	add	objptr, ##46160
0286c     F2 24 62 FC | 	wrlong	local04, objptr
02870     10 27 02 F6 | 	mov	local05, local02
02874     03 26 66 F0 | 	shl	local05, #3
02878     25 00 00 FF 
0287c     14 E4 85 F1 | 	sub	objptr, ##18964
02880     F2 28 02 F6 | 	mov	local06, objptr
02884     F2 26 02 F1 | 	add	local05, objptr
02888     13 13 02 FB | 	rdlong	arg01, local05
0288c     35 00 00 FF 
02890     3C E4 85 F1 | 	sub	objptr, ##27196
02894     24 2B B0 FD | 	call	#_isdec
02898     5A 00 00 FF 
0289c     54 E4 05 F1 | 	add	objptr, ##46164
028a0     F2 FA 61 FC | 	wrlong	result1, objptr
028a4                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
028a4     08 E4 85 F1 | 	sub	objptr, #8
028a8     F2 24 0A FB | 	rdlong	local04, objptr wz
028ac     5A 00 00 FF 
028b0     4C E4 85 F1 | 	sub	objptr, ##46156
028b4     60 00 90 AD |  if_e	jmp	#LR__0121
028b8     5A 00 00 FF 
028bc     50 E4 05 F1 | 	add	objptr, ##46160
028c0     F2 2E 0A FB | 	rdlong	local09, objptr wz
028c4     5A 00 00 FF 
028c8     50 E4 85 F1 | 	sub	objptr, ##46160
028cc     48 00 90 AD |  if_e	jmp	#LR__0121
028d0     5A 00 00 FF 
028d4     54 E4 05 F1 | 	add	objptr, ##46164
028d8     F2 32 0A FB | 	rdlong	local11, objptr wz
028dc     5A 00 00 FF 
028e0     54 E4 85 F1 | 	sub	objptr, ##46164
028e4     30 00 90 AD |  if_e	jmp	#LR__0121
028e8     10 23 02 F6 | 	mov	local03, local02
028ec     11 2F 02 F6 | 	mov	local09, local03
028f0     03 2E 66 F0 | 	shl	local09, #3
028f4     35 00 00 FF 
028f8     3C E4 05 F1 | 	add	objptr, ##27196
028fc     F2 2E 02 F1 | 	add	local09, objptr
02900     04 2E 06 F1 | 	add	local09, #4
02904     01 00 80 FF 
02908     17 01 68 FC | 	wrlong	##512, local09
0290c     35 00 00 FF 
02910     3C E4 85 F1 | 	sub	objptr, ##27196
02914     24 02 90 FD | 	jmp	#LR__0128
02918                 | LR__0121
02918                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
02918     5A 00 00 FF 
0291c     4C E4 05 F1 | 	add	objptr, ##46156
02920     F2 24 0A FB | 	rdlong	local04, objptr wz
02924     5A 00 00 FF 
02928     4C E4 85 F1 | 	sub	objptr, ##46156
0292c     64 00 90 AD |  if_e	jmp	#LR__0122
02930     5A 00 00 FF 
02934     50 E4 05 F1 | 	add	objptr, ##46160
02938     F2 2E 0A FB | 	rdlong	local09, objptr wz
0293c     5A 00 00 FF 
02940     50 E4 85 F1 | 	sub	objptr, ##46160
02944     5A 00 00 5F 
02948     54 E4 05 51 |  if_ne	add	objptr, ##46164
0294c     F2 32 02 5B |  if_ne	rdlong	local11, objptr
02950     5A 00 00 5F 
02954     54 E4 85 51 |  if_ne	sub	objptr, ##46164
02958     19 29 22 56 |  if_ne	not	local06, local11
0295c     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
02960     30 00 90 AD |  if_e	jmp	#LR__0122
02964     10 23 02 F6 | 	mov	local03, local02
02968     11 2F 02 F6 | 	mov	local09, local03
0296c     03 2E 66 F0 | 	shl	local09, #3
02970     35 00 00 FF 
02974     3C E4 05 F1 | 	add	objptr, ##27196
02978     F2 2E 02 F1 | 	add	local09, objptr
0297c     04 2E 06 F1 | 	add	local09, #4
02980     01 00 80 FF 
02984     17 03 68 FC | 	wrlong	##513, local09
02988     35 00 00 FF 
0298c     3C E4 85 F1 | 	sub	objptr, ##27196
02990     A8 01 90 FD | 	jmp	#LR__0128
02994                 | LR__0122
02994                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
02994     5A 00 00 FF 
02998     4C E4 05 F1 | 	add	objptr, ##46156
0299c     F2 24 0A FB | 	rdlong	local04, objptr wz
029a0     5A 00 00 FF 
029a4     4C E4 85 F1 | 	sub	objptr, ##46156
029a8     5A 00 00 5F 
029ac     50 E4 05 51 |  if_ne	add	objptr, ##46160
029b0     F2 2E 02 5B |  if_ne	rdlong	local09, objptr
029b4     5A 00 00 5F 
029b8     50 E4 85 51 |  if_ne	sub	objptr, ##46160
029bc     17 2F 22 56 |  if_ne	not	local09, local09
029c0     00 2E 0E 52 |  if_ne	cmp	local09, #0 wz
029c4     5A 00 00 5F 
029c8     54 E4 05 51 |  if_ne	add	objptr, ##46164
029cc     F2 32 02 5B |  if_ne	rdlong	local11, objptr
029d0     5A 00 00 5F 
029d4     54 E4 85 51 |  if_ne	sub	objptr, ##46164
029d8     19 29 22 56 |  if_ne	not	local06, local11
029dc     00 28 0E 52 |  if_ne	cmp	local06, #0 wz
029e0     30 00 90 AD |  if_e	jmp	#LR__0123
029e4     10 23 02 F6 | 	mov	local03, local02
029e8     11 2F 02 F6 | 	mov	local09, local03
029ec     03 2E 66 F0 | 	shl	local09, #3
029f0     35 00 00 FF 
029f4     3C E4 05 F1 | 	add	objptr, ##27196
029f8     F2 2E 02 F1 | 	add	local09, objptr
029fc     04 2E 06 F1 | 	add	local09, #4
02a00     01 00 80 FF 
02a04     17 05 68 FC | 	wrlong	##514, local09
02a08     35 00 00 FF 
02a0c     3C E4 85 F1 | 	sub	objptr, ##27196
02a10     28 01 90 FD | 	jmp	#LR__0128
02a14                 | LR__0123
02a14                 | ' 
02a14                 | ' if isstring(lparts(i).part$) then 
02a14     10 27 02 F6 | 	mov	local05, local02
02a18     03 26 66 F0 | 	shl	local05, #3
02a1c     35 00 00 FF 
02a20     3C E4 05 F1 | 	add	objptr, ##27196
02a24     F2 26 02 F1 | 	add	local05, objptr
02a28     13 13 02 FB | 	rdlong	arg01, local05
02a2c     35 00 00 FF 
02a30     3C E4 85 F1 | 	sub	objptr, ##27196
02a34     44 2A B0 FD | 	call	#_isstring
02a38     00 FA 0D F2 | 	cmp	result1, #0 wz
02a3c     A0 00 90 AD |  if_e	jmp	#LR__0126
02a40     10 2F 02 F6 | 	mov	local09, local02
02a44     03 2E 66 F0 | 	shl	local09, #3
02a48     35 00 00 FF 
02a4c     3C E4 05 F1 | 	add	objptr, ##27196
02a50     F2 2E 02 F1 | 	add	local09, objptr
02a54     04 2E 06 F1 | 	add	local09, #4
02a58     01 00 80 FF 
02a5c     17 07 68 FC | 	wrlong	##515, local09
02a60     10 23 02 F6 | 	mov	local03, local02
02a64     11 2F 02 F6 | 	mov	local09, local03
02a68     03 2E 66 F0 | 	shl	local09, #3
02a6c     F2 2E 02 F1 | 	add	local09, objptr
02a70     10 37 02 F6 | 	mov	local13, local02
02a74     03 36 66 F0 | 	shl	local13, #3
02a78     F2 36 02 F1 | 	add	local13, objptr
02a7c     1B 29 02 FB | 	rdlong	local06, local13
02a80     02 32 06 F6 | 	mov	local11, #2
02a84     10 4B 02 F6 | 	mov	local23, local02
02a88     25 43 02 F6 | 	mov	local19, local23
02a8c     21 45 02 F6 | 	mov	local20, local19
02a90     03 44 66 F0 | 	shl	local20, #3
02a94     F2 46 02 F6 | 	mov	local21, objptr
02a98     F2 44 02 F1 | 	add	local20, objptr
02a9c     22 13 02 FB | 	rdlong	arg01, local20
02aa0     35 00 00 FF 
02aa4     3C E4 85 F1 | 	sub	objptr, ##27196
02aa8     09 2B 02 F6 | 	mov	local07, arg01
02aac     97 06 48 FB | 	callpa	#(@LR__0125-@LR__0124)>>2,fcache_load_ptr_
02ab0                 | LR__0124
02ab0     15 FB C9 FA | 	rdbyte	result1, local07 wz
02ab4     01 2A 06 51 |  if_ne	add	local07, #1
02ab8     F4 FF 9F 5D |  if_ne	jmp	#LR__0124
02abc                 | LR__0125
02abc     09 2B 82 F1 | 	sub	local07, arg01
02ac0     15 31 02 F6 | 	mov	local10, local07
02ac4     02 30 86 F1 | 	sub	local10, #2
02ac8     14 13 02 F6 | 	mov	arg01, local06
02acc     19 15 02 F6 | 	mov	arg02, local11
02ad0     18 17 02 F6 | 	mov	arg03, local10
02ad4     64 E1 B1 FD | 	call	#__system__Mid_S
02ad8     17 FB 61 FC | 	wrlong	result1, local09
02adc     5C 00 90 FD | 	jmp	#LR__0128
02ae0                 | LR__0126
02ae0                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
02ae0     10 23 02 F6 | 	mov	local03, local02
02ae4     11 27 02 F6 | 	mov	local05, local03
02ae8     03 26 66 F0 | 	shl	local05, #3
02aec     35 00 00 FF 
02af0     3C E4 05 F1 | 	add	objptr, ##27196
02af4     F2 26 02 F1 | 	add	local05, objptr
02af8     13 13 02 FB | 	rdlong	arg01, local05
02afc     35 00 00 FF 
02b00     3C E4 85 F1 | 	sub	objptr, ##27196
02b04     10 22 B0 FD | 	call	#_isname
02b08     00 FA 4D F2 | 	cmps	result1, #0 wz
02b0c     2C 00 90 AD |  if_e	jmp	#LR__0127
02b10     10 23 02 F6 | 	mov	local03, local02
02b14     11 2F 02 F6 | 	mov	local09, local03
02b18     03 2E 66 F0 | 	shl	local09, #3
02b1c     35 00 00 FF 
02b20     3C E4 05 F1 | 	add	objptr, ##27196
02b24     F2 2E 02 F1 | 	add	local09, objptr
02b28     04 2E 06 F1 | 	add	local09, #4
02b2c     01 00 80 FF 
02b30     17 09 68 FC | 	wrlong	##516, local09
02b34     35 00 00 FF 
02b38     3C E4 85 F1 | 	sub	objptr, ##27196
02b3c                 | LR__0127
02b3c                 | LR__0128
02b3c     01 20 06 F1 | 	add	local02, #1
02b40     84 F9 9F FD | 	jmp	#LR__0119
02b44                 | LR__0129
02b44     1D 2F 02 F6 | 	mov	local09, local15
02b48     03 2E 66 F0 | 	shl	local09, #3
02b4c     35 00 00 FF 
02b50     3C E4 05 F1 | 	add	objptr, ##27196
02b54     F2 2E 02 F1 | 	add	local09, objptr
02b58     04 2E 06 F1 | 	add	local09, #4
02b5c     17 FD 6B FC | 	wrlong	#510, local09
02b60     1D 2F 02 F6 | 	mov	local09, local15
02b64     03 2E 66 F0 | 	shl	local09, #3
02b68     F2 26 02 F6 | 	mov	local05, objptr
02b6c     F2 2E 02 F1 | 	add	local09, objptr
02b70     70 01 00 FF 
02b74     B5 29 06 F6 | 	mov	local06, ##@LR__4832
02b78     17 29 62 FC | 	wrlong	local06, local09
02b7c     10 00 00 FF 
02b80     54 E4 05 F1 | 	add	objptr, ##8276
02b84     F2 3A 62 FC | 	wrlong	local15, objptr
02b88                 | ' 
02b88                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
02b88                 | ' 
02b88                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
02b88                 | '  
02b88                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
02b88     14 00 00 FF 
02b8c     B4 E5 05 F1 | 	add	objptr, ##10676
02b90     F2 12 02 FB | 	rdlong	arg01, objptr
02b94     5A 00 00 FF 
02b98     44 E4 85 F1 | 	sub	objptr, ##46148
02b9c     70 01 00 FF 
02ba0     B6 2F 06 F6 | 	mov	local09, ##@LR__4833
02ba4     17 15 02 F6 | 	mov	arg02, local09
02ba8     90 BF B1 FD | 	call	#__system___string_cmp
02bac     00 FA 0D F2 | 	cmp	result1, #0 wz
02bb0     1C 01 90 AD |  if_e	jmp	#LR__0130
02bb4     5A 00 00 FF 
02bb8     44 E4 05 F1 | 	add	objptr, ##46148
02bbc     F2 12 02 FB | 	rdlong	arg01, objptr
02bc0     5A 00 00 FF 
02bc4     44 E4 85 F1 | 	sub	objptr, ##46148
02bc8     70 01 00 FF 
02bcc     BB 27 06 F6 | 	mov	local05, ##@LR__4834
02bd0     13 2F 02 F6 | 	mov	local09, local05
02bd4     17 15 02 F6 | 	mov	arg02, local09
02bd8     60 BF B1 FD | 	call	#__system___string_cmp
02bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
02be0     EC 00 90 AD |  if_e	jmp	#LR__0130
02be4     5A 00 00 FF 
02be8     44 E4 05 F1 | 	add	objptr, ##46148
02bec     F2 12 02 FB | 	rdlong	arg01, objptr
02bf0     5A 00 00 FF 
02bf4     44 E4 85 F1 | 	sub	objptr, ##46148
02bf8     70 01 00 FF 
02bfc     C0 29 06 F6 | 	mov	local06, ##@LR__4835
02c00     14 27 02 F6 | 	mov	local05, local06
02c04     13 15 02 F6 | 	mov	arg02, local05
02c08     30 BF B1 FD | 	call	#__system___string_cmp
02c0c     FD 2E 0A F6 | 	mov	local09, result1 wz
02c10     BC 00 90 AD |  if_e	jmp	#LR__0130
02c14     5A 00 00 FF 
02c18     44 E4 05 F1 | 	add	objptr, ##46148
02c1c     F2 12 02 FB | 	rdlong	arg01, objptr
02c20     5A 00 00 FF 
02c24     44 E4 85 F1 | 	sub	objptr, ##46148
02c28     70 01 00 FF 
02c2c     C5 33 06 F6 | 	mov	local11, ##@LR__4836
02c30     19 29 02 F6 | 	mov	local06, local11
02c34     14 15 02 F6 | 	mov	arg02, local06
02c38     00 BF B1 FD | 	call	#__system___string_cmp
02c3c     FD 26 0A F6 | 	mov	local05, result1 wz
02c40     8C 00 90 AD |  if_e	jmp	#LR__0130
02c44     5A 00 00 FF 
02c48     44 E4 05 F1 | 	add	objptr, ##46148
02c4c     F2 12 02 FB | 	rdlong	arg01, objptr
02c50     5A 00 00 FF 
02c54     44 E4 85 F1 | 	sub	objptr, ##46148
02c58     70 01 00 FF 
02c5c     C9 31 06 F6 | 	mov	local10, ##@LR__4837
02c60     18 33 02 F6 | 	mov	local11, local10
02c64     19 15 02 F6 | 	mov	arg02, local11
02c68     D0 BE B1 FD | 	call	#__system___string_cmp
02c6c     FD 28 0A F6 | 	mov	local06, result1 wz
02c70     5C 00 90 AD |  if_e	jmp	#LR__0130
02c74     5A 00 00 FF 
02c78     44 E4 05 F1 | 	add	objptr, ##46148
02c7c     F2 12 02 FB | 	rdlong	arg01, objptr
02c80     5A 00 00 FF 
02c84     44 E4 85 F1 | 	sub	objptr, ##46148
02c88     70 01 00 FF 
02c8c     CD 31 06 F6 | 	mov	local10, ##@LR__4838
02c90     18 15 02 F6 | 	mov	arg02, local10
02c94     A4 BE B1 FD | 	call	#__system___string_cmp
02c98     FD 32 0A F6 | 	mov	local11, result1 wz
02c9c     30 00 90 AD |  if_e	jmp	#LR__0130
02ca0     5A 00 00 FF 
02ca4     44 E4 05 F1 | 	add	objptr, ##46148
02ca8     F2 12 02 FB | 	rdlong	arg01, objptr
02cac     5A 00 00 FF 
02cb0     44 E4 85 F1 | 	sub	objptr, ##46148
02cb4     70 01 00 FF 
02cb8     D0 35 06 F6 | 	mov	local12, ##@LR__4839
02cbc     1A 37 02 F6 | 	mov	local13, local12
02cc0     1B 15 02 F6 | 	mov	arg02, local13
02cc4     74 BE B1 FD | 	call	#__system___string_cmp
02cc8     FD 30 0A F6 | 	mov	local10, result1 wz
02ccc     9C 00 90 5D |  if_ne	jmp	#LR__0131
02cd0                 | LR__0130
02cd0     5A 00 00 FF 
02cd4     40 E4 05 F1 | 	add	objptr, ##46144
02cd8     F2 34 02 FB | 	rdlong	local12, objptr
02cdc     1A 37 02 F6 | 	mov	local13, local12
02ce0     01 36 06 F1 | 	add	local13, #1
02ce4     1B 4B 02 F6 | 	mov	local23, local13
02ce8     25 43 02 F6 | 	mov	local19, local23
02cec     03 42 66 F0 | 	shl	local19, #3
02cf0     25 00 00 FF 
02cf4     04 E4 85 F1 | 	sub	objptr, ##18948
02cf8     F2 44 02 F6 | 	mov	local20, objptr
02cfc     F2 42 02 F1 | 	add	local19, objptr
02d00     04 42 06 F1 | 	add	local19, #4
02d04     21 4D 02 FB | 	rdlong	local24, local19
02d08     04 42 86 F1 | 	sub	local19, #4
02d0c     26 47 02 F6 | 	mov	local21, local24
02d10     01 00 00 FF 
02d14     04 46 0E F2 | 	cmp	local21, ##516 wz
02d18     35 00 00 FF 
02d1c     3C E4 85 F1 | 	sub	objptr, ##27196
02d20     48 00 90 5D |  if_ne	jmp	#LR__0131
02d24     5A 00 00 FF 
02d28     40 E4 05 F1 | 	add	objptr, ##46144
02d2c     F2 2E 02 FB | 	rdlong	local09, objptr
02d30     01 2E 06 F1 | 	add	local09, #1
02d34     17 27 02 F6 | 	mov	local05, local09
02d38     03 26 66 F0 | 	shl	local05, #3
02d3c     25 00 00 FF 
02d40     04 E4 85 F1 | 	sub	objptr, ##18948
02d44     F2 28 02 F6 | 	mov	local06, objptr
02d48     F2 26 02 F1 | 	add	local05, objptr
02d4c     01 00 00 FF 
02d50     03 32 06 F6 | 	mov	local11, ##515
02d54     04 26 06 F1 | 	add	local05, #4
02d58     01 00 80 FF 
02d5c     13 07 68 FC | 	wrlong	##515, local05
02d60     04 26 86 F1 | 	sub	local05, #4
02d64     35 00 00 FF 
02d68     3C E4 85 F1 | 	sub	objptr, ##27196
02d6c                 | LR__0131
02d6c                 | ' 
02d6c                 | ' ' abbreviated command has to be at the position addptr
02d6c                 | ' 
02d6c                 | ' 
02d6c                 | ' 
02d6c                 | ' '2b determine a type of the line
02d6c                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
02d6c     35 00 00 FF 
02d70     3C E4 05 F1 | 	add	objptr, ##27196
02d74     F2 12 02 FB | 	rdlong	arg01, objptr
02d78     35 00 00 FF 
02d7c     3C E4 85 F1 | 	sub	objptr, ##27196
02d80     38 26 B0 FD | 	call	#_isdec
02d84     00 FA 0D F2 | 	cmp	result1, #0 wz
02d88     30 00 90 AD |  if_e	jmp	#LR__0132
02d8c     35 00 00 FF 
02d90     3C E4 05 F1 | 	add	objptr, ##27196
02d94     F2 12 02 FB | 	rdlong	arg01, objptr
02d98     35 00 00 FF 
02d9c     3C E4 85 F1 | 	sub	objptr, ##27196
02da0     00 14 06 F6 | 	mov	arg02, #0
02da4     2C EF B1 FD | 	call	#__system____builtin_atoi
02da8     59 00 00 FF 
02dac     D0 E5 05 F1 | 	add	objptr, ##46032
02db0     F2 FA 61 FC | 	wrlong	result1, objptr
02db4     59 00 00 FF 
02db8     D0 E5 85 F1 | 	sub	objptr, ##46032
02dbc                 | LR__0132
02dbc                 | ' 
02dbc                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
02dbc     59 00 00 FF 
02dc0     D0 E5 05 F1 | 	add	objptr, ##46032
02dc4     F2 24 02 FB | 	rdlong	local04, objptr
02dc8     59 00 00 FF 
02dcc     D0 E5 85 F1 | 	sub	objptr, ##46032
02dd0     01 24 16 F2 | 	cmp	local04, #1 wc
02dd4     3C 00 90 CD |  if_b	jmp	#LR__0133
02dd8     01 3A 0E F2 | 	cmp	local15, #1 wz
02ddc     37 00 00 AF 
02de0     54 E4 05 A1 |  if_e	add	objptr, ##28244
02de4     F2 26 02 AB |  if_e	rdlong	local05, objptr
02de8     37 00 00 AF 
02dec     54 E4 85 A1 |  if_e	sub	objptr, ##28244
02df0     03 26 0E A2 |  if_e	cmp	local05, #3 wz
02df4     1C 00 90 5D |  if_ne	jmp	#LR__0133
02df8     59 00 00 FF 
02dfc     D0 E5 05 F1 | 	add	objptr, ##46032
02e00     F2 12 02 FB | 	rdlong	arg01, objptr
02e04     59 00 00 FF 
02e08     D0 E5 85 F1 | 	sub	objptr, ##46032
02e0c     D0 26 B0 FD | 	call	#_deleteline
02e10     4C 05 90 FD | 	jmp	#LR__0150
02e14                 | LR__0133
02e14                 | ' 
02e14                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
02e14     59 00 00 FF 
02e18     D0 E5 05 F1 | 	add	objptr, ##46032
02e1c     F2 24 02 FB | 	rdlong	local04, objptr
02e20     59 00 00 FF 
02e24     D0 E5 85 F1 | 	sub	objptr, ##46032
02e28     01 24 16 F2 | 	cmp	local04, #1 wc
02e2c     EC 00 90 CD |  if_b	jmp	#LR__0136
02e30     37 00 00 FF 
02e34     54 E4 05 F1 | 	add	objptr, ##28244
02e38     F2 26 02 FB | 	rdlong	local05, objptr
02e3c     37 00 00 FF 
02e40     54 E4 85 F1 | 	sub	objptr, ##28244
02e44     13 2F 0A F6 | 	mov	local09, local05 wz
02e48     20 00 90 AD |  if_e	jmp	#LR__0134
02e4c     37 00 00 FF 
02e50     54 E4 05 F1 | 	add	objptr, ##28244
02e54     F2 32 02 FB | 	rdlong	local11, objptr
02e58     37 00 00 FF 
02e5c     54 E4 85 F1 | 	sub	objptr, ##28244
02e60     19 29 02 F6 | 	mov	local06, local11
02e64     03 28 0E F2 | 	cmp	local06, #3 wz
02e68     B0 00 90 5D |  if_ne	jmp	#LR__0136
02e6c                 | LR__0134
02e6c     35 00 00 FF 
02e70     50 E4 05 F1 | 	add	objptr, ##27216
02e74     F2 36 02 FB | 	rdlong	local13, objptr
02e78     35 00 00 FF 
02e7c     50 E4 85 F1 | 	sub	objptr, ##27216
02e80     1B 31 02 F6 | 	mov	local10, local13
02e84     1B 30 0E F2 | 	cmp	local10, #27 wz
02e88     90 00 90 AD |  if_e	jmp	#LR__0136
02e8c     59 00 00 FF 
02e90     D0 E5 05 F1 | 	add	objptr, ##46032
02e94     F2 12 02 FB | 	rdlong	arg01, objptr
02e98     22 00 00 FF 
02e9c     7C E5 85 F1 | 	sub	objptr, ##17788
02ea0     F2 16 02 FB | 	rdlong	arg03, objptr
02ea4     37 00 00 FF 
02ea8     54 E4 85 F1 | 	sub	objptr, ##28244
02eac     00 14 06 F6 | 	mov	arg02, #0
02eb0     AC 3A B0 FD | 	call	#_compile
02eb4     FD 1E 0A F6 | 	mov	local01, result1 wz
02eb8                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02eb8                 | '   if err<>0 then printerror(err): goto 104
02eb8     0C 00 90 AD |  if_e	jmp	#LR__0135
02ebc     0F 13 02 F6 | 	mov	arg01, local01
02ec0     A8 77 B1 FD | 	call	#_printerror
02ec4     98 04 90 FD | 	jmp	#LR__0150
02ec8                 | LR__0135
02ec8                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
02ec8     5A 00 00 FF 
02ecc     1C E4 05 F1 | 	add	objptr, ##46108
02ed0     F2 12 02 FB | 	rdlong	arg01, objptr
02ed4     5A 00 00 FF 
02ed8     1C E4 85 F1 | 	sub	objptr, ##46108
02edc     70 01 00 FF 
02ee0     D4 15 06 F6 | 	mov	arg02, ##@LR__4840
02ee4     54 BC B1 FD | 	call	#__system___string_cmp
02ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
02eec     70 04 90 AD |  if_e	jmp	#LR__0150
02ef0     5A 00 00 FF 
02ef4     1C E4 05 F1 | 	add	objptr, ##46108
02ef8     F2 24 02 FB | 	rdlong	local04, objptr
02efc     22 00 00 FF 
02f00     D0 E5 85 F1 | 	sub	objptr, ##17872
02f04     F2 24 62 FC | 	wrlong	local04, objptr
02f08     08 E4 05 F1 | 	add	objptr, #8
02f0c     F2 08 68 FC | 	wrlong	#4, objptr
02f10     37 00 00 FF 
02f14     54 E4 85 F1 | 	sub	objptr, ##28244
02f18     6C DB 9F FD | 	jmp	#LR__0020
02f1c                 | LR__0136
02f1c                 | '       							
02f1c                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
02f1c     59 00 00 FF 
02f20     D0 E5 05 F1 | 	add	objptr, ##46032
02f24     F2 24 02 FB | 	rdlong	local04, objptr
02f28     59 00 00 FF 
02f2c     D0 E5 85 F1 | 	sub	objptr, ##46032
02f30     01 24 16 F2 | 	cmp	local04, #1 wc
02f34     EC 00 90 CD |  if_b	jmp	#LR__0139
02f38     37 00 00 FF 
02f3c     54 E4 05 F1 | 	add	objptr, ##28244
02f40     F2 26 02 FB | 	rdlong	local05, objptr
02f44     37 00 00 FF 
02f48     54 E4 85 F1 | 	sub	objptr, ##28244
02f4c     01 26 0E F2 | 	cmp	local05, #1 wz
02f50     20 00 90 AD |  if_e	jmp	#LR__0137
02f54     37 00 00 FF 
02f58     54 E4 05 F1 | 	add	objptr, ##28244
02f5c     F2 32 02 FB | 	rdlong	local11, objptr
02f60     37 00 00 FF 
02f64     54 E4 85 F1 | 	sub	objptr, ##28244
02f68     19 29 02 F6 | 	mov	local06, local11
02f6c     02 28 0E F2 | 	cmp	local06, #2 wz
02f70     B0 00 90 5D |  if_ne	jmp	#LR__0139
02f74                 | LR__0137
02f74     35 00 00 FF 
02f78     48 E4 05 F1 | 	add	objptr, ##27208
02f7c     F2 36 02 FB | 	rdlong	local13, objptr
02f80     35 00 00 FF 
02f84     48 E4 85 F1 | 	sub	objptr, ##27208
02f88     1B 31 02 F6 | 	mov	local10, local13
02f8c     1B 30 0E F2 | 	cmp	local10, #27 wz
02f90     90 00 90 AD |  if_e	jmp	#LR__0139
02f94     59 00 00 FF 
02f98     D0 E5 05 F1 | 	add	objptr, ##46032
02f9c     F2 12 02 FB | 	rdlong	arg01, objptr
02fa0     22 00 00 FF 
02fa4     7C E5 85 F1 | 	sub	objptr, ##17788
02fa8     F2 16 02 FB | 	rdlong	arg03, objptr
02fac     37 00 00 FF 
02fb0     54 E4 85 F1 | 	sub	objptr, ##28244
02fb4     00 14 06 F6 | 	mov	arg02, #0
02fb8     A4 39 B0 FD | 	call	#_compile
02fbc     FD 1E 0A F6 | 	mov	local01, result1 wz
02fc0                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
02fc0                 | '   if err<>0 then printerror(err): goto 104
02fc0     0C 00 90 AD |  if_e	jmp	#LR__0138
02fc4     0F 13 02 F6 | 	mov	arg01, local01
02fc8     A0 76 B1 FD | 	call	#_printerror
02fcc     90 03 90 FD | 	jmp	#LR__0150
02fd0                 | LR__0138
02fd0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
02fd0     5A 00 00 FF 
02fd4     1C E4 05 F1 | 	add	objptr, ##46108
02fd8     F2 12 02 FB | 	rdlong	arg01, objptr
02fdc     5A 00 00 FF 
02fe0     1C E4 85 F1 | 	sub	objptr, ##46108
02fe4     70 01 00 FF 
02fe8     D5 15 06 F6 | 	mov	arg02, ##@LR__4841
02fec     4C BB B1 FD | 	call	#__system___string_cmp
02ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff4     68 03 90 AD |  if_e	jmp	#LR__0150
02ff8     5A 00 00 FF 
02ffc     1C E4 05 F1 | 	add	objptr, ##46108
03000     F2 24 02 FB | 	rdlong	local04, objptr
03004     22 00 00 FF 
03008     D0 E5 85 F1 | 	sub	objptr, ##17872
0300c     F2 24 62 FC | 	wrlong	local04, objptr
03010     08 E4 05 F1 | 	add	objptr, #8
03014     F2 08 68 FC | 	wrlong	#4, objptr
03018     37 00 00 FF 
0301c     54 E4 85 F1 | 	sub	objptr, ##28244
03020     64 DA 9F FD | 	jmp	#LR__0020
03024                 | LR__0139
03024                 | ' 							 
03024                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
03024     59 00 00 FF 
03028     D0 E5 05 F1 | 	add	objptr, ##46032
0302c     F2 24 02 FB | 	rdlong	local04, objptr
03030     59 00 00 FF 
03034     D0 E5 85 F1 | 	sub	objptr, ##46032
03038     01 24 16 F2 | 	cmp	local04, #1 wc
0303c     D4 00 90 CD |  if_b	jmp	#LR__0141
03040     37 00 00 FF 
03044     54 E4 05 F1 | 	add	objptr, ##28244
03048     F2 26 0A FB | 	rdlong	local05, objptr wz
0304c     37 00 00 FF 
03050     54 E4 85 F1 | 	sub	objptr, ##28244
03054     20 00 90 AD |  if_e	jmp	#LR__0140
03058     37 00 00 FF 
0305c     54 E4 05 F1 | 	add	objptr, ##28244
03060     F2 32 02 FB | 	rdlong	local11, objptr
03064     37 00 00 FF 
03068     54 E4 85 F1 | 	sub	objptr, ##28244
0306c     19 29 02 F6 | 	mov	local06, local11
03070     03 28 0E F2 | 	cmp	local06, #3 wz
03074     9C 00 90 5D |  if_ne	jmp	#LR__0141
03078                 | LR__0140
03078     35 00 00 FF 
0307c     50 E4 05 F1 | 	add	objptr, ##27216
03080     F2 36 02 FB | 	rdlong	local13, objptr
03084     35 00 00 FF 
03088     50 E4 85 F1 | 	sub	objptr, ##27216
0308c     1B 31 02 F6 | 	mov	local10, local13
03090     1B 30 0E F2 | 	cmp	local10, #27 wz
03094     7C 00 90 5D |  if_ne	jmp	#LR__0141
03098     59 00 00 FF 
0309c     D0 E5 05 F1 | 	add	objptr, ##46032
030a0     F2 12 02 FB | 	rdlong	arg01, objptr
030a4     22 00 00 FF 
030a8     7C E5 85 F1 | 	sub	objptr, ##17788
030ac     F2 16 02 FB | 	rdlong	arg03, objptr
030b0     37 00 00 FF 
030b4     54 E4 85 F1 | 	sub	objptr, ##28244
030b8     00 14 06 F6 | 	mov	arg02, #0
030bc     70 39 B0 FD | 	call	#_compile_assign
030c0                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
030c0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
030c0     5A 00 00 FF 
030c4     1C E4 05 F1 | 	add	objptr, ##46108
030c8     F2 12 02 FB | 	rdlong	arg01, objptr
030cc     5A 00 00 FF 
030d0     1C E4 85 F1 | 	sub	objptr, ##46108
030d4     70 01 00 FF 
030d8     D6 15 06 F6 | 	mov	arg02, ##@LR__4842
030dc     5C BA B1 FD | 	call	#__system___string_cmp
030e0     00 FA 0D F2 | 	cmp	result1, #0 wz
030e4     78 02 90 AD |  if_e	jmp	#LR__0150
030e8     5A 00 00 FF 
030ec     1C E4 05 F1 | 	add	objptr, ##46108
030f0     F2 24 02 FB | 	rdlong	local04, objptr
030f4     22 00 00 FF 
030f8     D0 E5 85 F1 | 	sub	objptr, ##17872
030fc     F2 24 62 FC | 	wrlong	local04, objptr
03100     08 E4 05 F1 | 	add	objptr, #8
03104     F2 08 68 FC | 	wrlong	#4, objptr
03108     37 00 00 FF 
0310c     54 E4 85 F1 | 	sub	objptr, ##28244
03110     74 D9 9F FD | 	jmp	#LR__0020
03114                 | LR__0141
03114                 | '     							 
03114                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
03114     59 00 00 FF 
03118     D0 E5 05 F1 | 	add	objptr, ##46032
0311c     F2 24 02 FB | 	rdlong	local04, objptr
03120     59 00 00 FF 
03124     D0 E5 85 F1 | 	sub	objptr, ##46032
03128     01 24 16 F2 | 	cmp	local04, #1 wc
0312c     CC 00 90 CD |  if_b	jmp	#LR__0142
03130     37 00 00 FF 
03134     54 E4 05 F1 | 	add	objptr, ##28244
03138     F2 26 02 FB | 	rdlong	local05, objptr
0313c     37 00 00 FF 
03140     54 E4 85 F1 | 	sub	objptr, ##28244
03144     01 26 0E F2 | 	cmp	local05, #1 wz
03148     37 00 00 5F 
0314c     54 E4 05 51 |  if_ne	add	objptr, ##28244
03150     F2 32 02 5B |  if_ne	rdlong	local11, objptr
03154     37 00 00 5F 
03158     54 E4 85 51 |  if_ne	sub	objptr, ##28244
0315c     02 32 0E 52 |  if_ne	cmp	local11, #2 wz
03160     35 00 00 AF 
03164     48 E4 05 A1 |  if_e	add	objptr, ##27208
03168     F2 36 02 AB |  if_e	rdlong	local13, objptr
0316c     35 00 00 AF 
03170     48 E4 85 A1 |  if_e	sub	objptr, ##27208
03174     1B 31 02 A6 |  if_e	mov	local10, local13
03178     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
0317c     7C 00 90 5D |  if_ne	jmp	#LR__0142
03180     59 00 00 FF 
03184     D0 E5 05 F1 | 	add	objptr, ##46032
03188     F2 12 02 FB | 	rdlong	arg01, objptr
0318c     22 00 00 FF 
03190     7C E5 85 F1 | 	sub	objptr, ##17788
03194     F2 16 02 FB | 	rdlong	arg03, objptr
03198     37 00 00 FF 
0319c     54 E4 85 F1 | 	sub	objptr, ##28244
031a0     00 14 06 F6 | 	mov	arg02, #0
031a4     88 38 B0 FD | 	call	#_compile_assign
031a8                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
031a8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
031a8     5A 00 00 FF 
031ac     1C E4 05 F1 | 	add	objptr, ##46108
031b0     F2 12 02 FB | 	rdlong	arg01, objptr
031b4     5A 00 00 FF 
031b8     1C E4 85 F1 | 	sub	objptr, ##46108
031bc     70 01 00 FF 
031c0     D7 15 06 F6 | 	mov	arg02, ##@LR__4843
031c4     74 B9 B1 FD | 	call	#__system___string_cmp
031c8     00 FA 0D F2 | 	cmp	result1, #0 wz
031cc     90 01 90 AD |  if_e	jmp	#LR__0150
031d0     5A 00 00 FF 
031d4     1C E4 05 F1 | 	add	objptr, ##46108
031d8     F2 24 02 FB | 	rdlong	local04, objptr
031dc     22 00 00 FF 
031e0     D0 E5 85 F1 | 	sub	objptr, ##17872
031e4     F2 24 62 FC | 	wrlong	local04, objptr
031e8     08 E4 05 F1 | 	add	objptr, #8
031ec     F2 08 68 FC | 	wrlong	#4, objptr
031f0     37 00 00 FF 
031f4     54 E4 85 F1 | 	sub	objptr, ##28244
031f8     8C D8 9F FD | 	jmp	#LR__0020
031fc                 | LR__0142
031fc                 | ' 
031fc                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
031fc     35 00 00 FF 
03200     40 E4 05 F1 | 	add	objptr, ##27200
03204     F2 24 02 FB | 	rdlong	local04, objptr
03208     35 00 00 FF 
0320c     40 E4 85 F1 | 	sub	objptr, ##27200
03210     01 00 00 FF 
03214     04 24 0E F2 | 	cmp	local04, ##516 wz
03218     35 00 00 AF 
0321c     48 E4 05 A1 |  if_e	add	objptr, ##27208
03220     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03224     35 00 00 AF 
03228     48 E4 85 A1 |  if_e	sub	objptr, ##27208
0322c     1B 2E 0E A2 |  if_e	cmp	local09, #27 wz
03230     14 00 90 5D |  if_ne	jmp	#LR__0143
03234     00 12 06 F6 | 	mov	arg01, #0
03238     00 14 06 F6 | 	mov	arg02, #0
0323c     00 16 06 F6 | 	mov	arg03, #0
03240     EC 37 B0 FD | 	call	#_compile_assign
03244     90 00 90 FD | 	jmp	#LR__0145
03248                 | LR__0143
03248                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
03248     35 00 00 FF 
0324c     40 E4 05 F1 | 	add	objptr, ##27200
03250     F2 24 02 FB | 	rdlong	local04, objptr
03254     35 00 00 FF 
03258     40 E4 85 F1 | 	sub	objptr, ##27200
0325c     01 00 00 FF 
03260     04 24 0E F2 | 	cmp	local04, ##516 wz
03264     35 00 00 AF 
03268     48 E4 05 A1 |  if_e	add	objptr, ##27208
0326c     F2 2E 02 AB |  if_e	rdlong	local09, objptr
03270     35 00 00 AF 
03274     48 E4 85 A1 |  if_e	sub	objptr, ##27208
03278     14 2E 0E A2 |  if_e	cmp	local09, #20 wz
0327c     44 00 90 5D |  if_ne	jmp	#LR__0144
03280     00 12 06 F6 | 	mov	arg01, #0
03284     EC 11 B2 FD | 	call	#__system___getiolock_0484
03288     FD 12 02 F6 | 	mov	arg01, result1
0328c     84 B8 B1 FD | 	call	#__system___lockmem
03290     70 01 00 FF 
03294     D8 15 06 F6 | 	mov	arg02, ##@LR__4844
03298     00 12 06 F6 | 	mov	arg01, #0
0329c     00 16 06 F6 | 	mov	arg03, #0
032a0     64 C5 B1 FD | 	call	#__system___basic_print_string
032a4     00 12 06 F6 | 	mov	arg01, #0
032a8     0A 14 06 F6 | 	mov	arg02, #10
032ac     00 16 06 F6 | 	mov	arg03, #0
032b0     FC C4 B1 FD | 	call	#__system___basic_print_char
032b4     00 12 06 F6 | 	mov	arg01, #0
032b8     B8 11 B2 FD | 	call	#__system___getiolock_0484
032bc     FD 00 68 FC | 	wrlong	#0, result1
032c0     7C 00 90 FD | 	jmp	#LR__0149
032c4                 | LR__0144
032c4     00 12 06 F6 | 	mov	arg01, #0
032c8     00 14 06 F6 | 	mov	arg02, #0
032cc     00 16 06 F6 | 	mov	arg03, #0
032d0     8C 36 B0 FD | 	call	#_compile
032d4     FD 1E 02 F6 | 	mov	local01, result1
032d8                 | LR__0145
032d8                 | ' 
032d8                 | ' ' if we are here, this is not a program line to add, so try to execute this
032d8                 | ' 
032d8                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
032d8                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
032d8                 | ' if err=0 then execute_line() else printerror(err)
032d8     00 1E 0E F2 | 	cmp	local01, #0 wz
032dc     0C 00 90 5D |  if_ne	jmp	#LR__0146
032e0     00 12 06 F6 | 	mov	arg01, #0
032e4     8C 74 B0 FD | 	call	#_execute_line
032e8     08 00 90 FD | 	jmp	#LR__0147
032ec                 | LR__0146
032ec     0F 13 02 F6 | 	mov	arg01, local01
032f0     78 73 B1 FD | 	call	#_printerror
032f4                 | LR__0147
032f4                 | ' if rest$<>"" then line$=rest$:  goto 108 
032f4     5A 00 00 FF 
032f8     1C E4 05 F1 | 	add	objptr, ##46108
032fc     F2 12 02 FB | 	rdlong	arg01, objptr
03300     5A 00 00 FF 
03304     1C E4 85 F1 | 	sub	objptr, ##46108
03308     71 01 00 FF 
0330c     07 14 06 F6 | 	mov	arg02, ##@LR__4845
03310     28 B8 B1 FD | 	call	#__system___string_cmp
03314     00 FA 0D F2 | 	cmp	result1, #0 wz
03318     24 00 90 AD |  if_e	jmp	#LR__0148
0331c     5A 00 00 FF 
03320     1C E4 05 F1 | 	add	objptr, ##46108
03324     F2 24 02 FB | 	rdlong	local04, objptr
03328     22 00 00 FF 
0332c     D0 E5 85 F1 | 	sub	objptr, ##17872
03330     F2 24 62 FC | 	wrlong	local04, objptr
03334     37 00 00 FF 
03338     4C E4 85 F1 | 	sub	objptr, ##28236
0333c     48 D7 9F FD | 	jmp	#LR__0020
03340                 | LR__0148
03340                 | LR__0149
03340     71 01 00 FF 
03344     08 12 06 F6 | 	mov	arg01, ##@LR__4846
03348                 | ' 
03348                 | ' write(text)
03348     E0 A4 B1 FD | 	call	#_hg010b_spin2_write
0334c                 | ' crlf
0334c     A8 A7 B1 FD | 	call	#_hg010b_spin2_crlf
03350     71 01 00 FF 
03354     09 12 06 F6 | 	mov	arg01, ##@LR__4847
03358                 | ' 
03358                 | ' write(text)
03358     D0 A4 B1 FD | 	call	#_hg010b_spin2_write
0335c                 | ' crlf
0335c     98 A7 B1 FD | 	call	#_hg010b_spin2_crlf
03360                 | LR__0150
03360     A7 F0 03 F6 | 	mov	ptra, fp
03364     B2 00 A0 FD | 	call	#popregs_
03368                 | _interpret_ret
03368     2D 00 64 FD | 	ret
0336c                 | 
0336c                 | ' 
0336c                 | ' 
0336c                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
0336c                 | ' 
0336c                 | ' function isoperator(s as string) as ubyte
0336c                 | _isoperator
0336c     01 4A 05 F6 | 	mov	COUNT_, #1
03370     A8 00 A0 FD | 	call	#pushregs_
03374                 | ' 
03374                 | ' select case s
03374     09 1F 02 F6 | 	mov	local01, arg01
03378     71 01 00 FF 
0337c     0F 14 06 F6 | 	mov	arg02, ##@LR__4848
03380     0F 13 02 F6 | 	mov	arg01, local01
03384     B4 B7 B1 FD | 	call	#__system___string_cmp
03388     00 FA 0D F2 | 	cmp	result1, #0 wz
0338c     FC 01 90 AD |  if_e	jmp	#LR__0160
03390     71 01 00 FF 
03394     11 14 06 F6 | 	mov	arg02, ##@LR__4849
03398     0F 13 02 F6 | 	mov	arg01, local01
0339c     9C B7 B1 FD | 	call	#__system___string_cmp
033a0     00 FA 0D F2 | 	cmp	result1, #0 wz
033a4     EC 01 90 AD |  if_e	jmp	#LR__0161
033a8     71 01 00 FF 
033ac     13 14 06 F6 | 	mov	arg02, ##@LR__4850
033b0     0F 13 02 F6 | 	mov	arg01, local01
033b4     84 B7 B1 FD | 	call	#__system___string_cmp
033b8     00 FA 0D F2 | 	cmp	result1, #0 wz
033bc     DC 01 90 AD |  if_e	jmp	#LR__0162
033c0     71 01 00 FF 
033c4     16 14 06 F6 | 	mov	arg02, ##@LR__4851
033c8     0F 13 02 F6 | 	mov	arg01, local01
033cc     6C B7 B1 FD | 	call	#__system___string_cmp
033d0     00 FA 0D F2 | 	cmp	result1, #0 wz
033d4     CC 01 90 AD |  if_e	jmp	#LR__0163
033d8     71 01 00 FF 
033dc     1A 14 06 F6 | 	mov	arg02, ##@LR__4852
033e0     0F 13 02 F6 | 	mov	arg01, local01
033e4     54 B7 B1 FD | 	call	#__system___string_cmp
033e8     00 FA 0D F2 | 	cmp	result1, #0 wz
033ec     BC 01 90 AD |  if_e	jmp	#LR__0164
033f0     71 01 00 FF 
033f4     1C 14 06 F6 | 	mov	arg02, ##@LR__4853
033f8     0F 13 02 F6 | 	mov	arg01, local01
033fc     3C B7 B1 FD | 	call	#__system___string_cmp
03400     00 FA 0D F2 | 	cmp	result1, #0 wz
03404     AC 01 90 AD |  if_e	jmp	#LR__0165
03408     71 01 00 FF 
0340c     1E 14 06 F6 | 	mov	arg02, ##@LR__4854
03410     0F 13 02 F6 | 	mov	arg01, local01
03414     24 B7 B1 FD | 	call	#__system___string_cmp
03418     00 FA 0D F2 | 	cmp	result1, #0 wz
0341c     9C 01 90 AD |  if_e	jmp	#LR__0166
03420     71 01 00 FF 
03424     22 14 06 F6 | 	mov	arg02, ##@LR__4855
03428     0F 13 02 F6 | 	mov	arg01, local01
0342c     0C B7 B1 FD | 	call	#__system___string_cmp
03430     00 FA 0D F2 | 	cmp	result1, #0 wz
03434     8C 01 90 AD |  if_e	jmp	#LR__0167
03438     71 01 00 FF 
0343c     26 14 06 F6 | 	mov	arg02, ##@LR__4856
03440     0F 13 02 F6 | 	mov	arg01, local01
03444     F4 B6 B1 FD | 	call	#__system___string_cmp
03448     00 FA 0D F2 | 	cmp	result1, #0 wz
0344c     7C 01 90 AD |  if_e	jmp	#LR__0168
03450     71 01 00 FF 
03454     2A 14 06 F6 | 	mov	arg02, ##@LR__4857
03458     0F 13 02 F6 | 	mov	arg01, local01
0345c     DC B6 B1 FD | 	call	#__system___string_cmp
03460     00 FA 0D F2 | 	cmp	result1, #0 wz
03464     6C 01 90 AD |  if_e	jmp	#LR__0169
03468     71 01 00 FF 
0346c     2E 14 06 F6 | 	mov	arg02, ##@LR__4858
03470     0F 13 02 F6 | 	mov	arg01, local01
03474     C4 B6 B1 FD | 	call	#__system___string_cmp
03478     00 FA 0D F2 | 	cmp	result1, #0 wz
0347c     5C 01 90 AD |  if_e	jmp	#LR__0170
03480     71 01 00 FF 
03484     32 14 06 F6 | 	mov	arg02, ##@LR__4859
03488     0F 13 02 F6 | 	mov	arg01, local01
0348c     AC B6 B1 FD | 	call	#__system___string_cmp
03490     00 FA 0D F2 | 	cmp	result1, #0 wz
03494     4C 01 90 AD |  if_e	jmp	#LR__0171
03498     71 01 00 FF 
0349c     34 14 06 F6 | 	mov	arg02, ##@LR__4860
034a0     0F 13 02 F6 | 	mov	arg01, local01
034a4     94 B6 B1 FD | 	call	#__system___string_cmp
034a8     00 FA 0D F2 | 	cmp	result1, #0 wz
034ac     3C 01 90 AD |  if_e	jmp	#LR__0172
034b0     71 01 00 FF 
034b4     38 14 06 F6 | 	mov	arg02, ##@LR__4861
034b8     0F 13 02 F6 | 	mov	arg01, local01
034bc     7C B6 B1 FD | 	call	#__system___string_cmp
034c0     00 FA 0D F2 | 	cmp	result1, #0 wz
034c4     2C 01 90 AD |  if_e	jmp	#LR__0173
034c8     71 01 00 FF 
034cc     3A 14 06 F6 | 	mov	arg02, ##@LR__4862
034d0     0F 13 02 F6 | 	mov	arg01, local01
034d4     64 B6 B1 FD | 	call	#__system___string_cmp
034d8     00 FA 0D F2 | 	cmp	result1, #0 wz
034dc     1C 01 90 AD |  if_e	jmp	#LR__0174
034e0     71 01 00 FF 
034e4     3C 14 06 F6 | 	mov	arg02, ##@LR__4863
034e8     0F 13 02 F6 | 	mov	arg01, local01
034ec     4C B6 B1 FD | 	call	#__system___string_cmp
034f0     00 FA 0D F2 | 	cmp	result1, #0 wz
034f4     0C 01 90 AD |  if_e	jmp	#LR__0175
034f8     71 01 00 FF 
034fc     3F 14 06 F6 | 	mov	arg02, ##@LR__4864
03500     0F 13 02 F6 | 	mov	arg01, local01
03504     34 B6 B1 FD | 	call	#__system___string_cmp
03508     00 FA 0D F2 | 	cmp	result1, #0 wz
0350c     FC 00 90 AD |  if_e	jmp	#LR__0176
03510     71 01 00 FF 
03514     42 14 06 F6 | 	mov	arg02, ##@LR__4865
03518     0F 13 02 F6 | 	mov	arg01, local01
0351c     1C B6 B1 FD | 	call	#__system___string_cmp
03520     00 FA 0D F2 | 	cmp	result1, #0 wz
03524     EC 00 90 AD |  if_e	jmp	#LR__0177
03528     71 01 00 FF 
0352c     44 14 06 F6 | 	mov	arg02, ##@LR__4866
03530     0F 13 02 F6 | 	mov	arg01, local01
03534     04 B6 B1 FD | 	call	#__system___string_cmp
03538     00 FA 0D F2 | 	cmp	result1, #0 wz
0353c     DC 00 90 AD |  if_e	jmp	#LR__0178
03540     71 01 00 FF 
03544     46 14 06 F6 | 	mov	arg02, ##@LR__4867
03548     0F 13 02 F6 | 	mov	arg01, local01
0354c     EC B5 B1 FD | 	call	#__system___string_cmp
03550     00 FA 0D F2 | 	cmp	result1, #0 wz
03554     CC 00 90 AD |  if_e	jmp	#LR__0179
03558     71 01 00 FF 
0355c     49 14 06 F6 | 	mov	arg02, ##@LR__4868
03560     0F 13 02 F6 | 	mov	arg01, local01
03564     D4 B5 B1 FD | 	call	#__system___string_cmp
03568     00 FA 0D F2 | 	cmp	result1, #0 wz
0356c     BC 00 90 AD |  if_e	jmp	#LR__0180
03570     71 01 00 FF 
03574     4C 14 06 F6 | 	mov	arg02, ##@LR__4869
03578     0F 13 02 F6 | 	mov	arg01, local01
0357c     BC B5 B1 FD | 	call	#__system___string_cmp
03580     00 FA 0D F2 | 	cmp	result1, #0 wz
03584     AC 00 90 AD |  if_e	jmp	#LR__0181
03588     B0 00 90 FD | 	jmp	#LR__0182
0358c                 | LR__0160
0358c     01 FA 05 F6 | 	mov	result1, #1
03590     AC 00 90 FD | 	jmp	#LR__0183
03594                 | LR__0161
03594     02 FA 05 F6 | 	mov	result1, #2
03598     A4 00 90 FD | 	jmp	#LR__0183
0359c                 | LR__0162
0359c     03 FA 05 F6 | 	mov	result1, #3
035a0     9C 00 90 FD | 	jmp	#LR__0183
035a4                 | LR__0163
035a4     04 FA 05 F6 | 	mov	result1, #4
035a8     94 00 90 FD | 	jmp	#LR__0183
035ac                 | LR__0164
035ac     05 FA 05 F6 | 	mov	result1, #5
035b0     8C 00 90 FD | 	jmp	#LR__0183
035b4                 | LR__0165
035b4     06 FA 05 F6 | 	mov	result1, #6
035b8     84 00 90 FD | 	jmp	#LR__0183
035bc                 | LR__0166
035bc     07 FA 05 F6 | 	mov	result1, #7
035c0     7C 00 90 FD | 	jmp	#LR__0183
035c4                 | LR__0167
035c4     08 FA 05 F6 | 	mov	result1, #8
035c8     74 00 90 FD | 	jmp	#LR__0183
035cc                 | LR__0168
035cc     09 FA 05 F6 | 	mov	result1, #9
035d0     6C 00 90 FD | 	jmp	#LR__0183
035d4                 | LR__0169
035d4     0A FA 05 F6 | 	mov	result1, #10
035d8     64 00 90 FD | 	jmp	#LR__0183
035dc                 | LR__0170
035dc     0B FA 05 F6 | 	mov	result1, #11
035e0     5C 00 90 FD | 	jmp	#LR__0183
035e4                 | LR__0171
035e4     0C FA 05 F6 | 	mov	result1, #12
035e8     54 00 90 FD | 	jmp	#LR__0183
035ec                 | LR__0172
035ec     0D FA 05 F6 | 	mov	result1, #13
035f0     4C 00 90 FD | 	jmp	#LR__0183
035f4                 | LR__0173
035f4     0E FA 05 F6 | 	mov	result1, #14
035f8     44 00 90 FD | 	jmp	#LR__0183
035fc                 | LR__0174
035fc     1B FA 05 F6 | 	mov	result1, #27
03600     3C 00 90 FD | 	jmp	#LR__0183
03604                 | LR__0175
03604     27 FA 05 F6 | 	mov	result1, #39
03608     34 00 90 FD | 	jmp	#LR__0183
0360c                 | LR__0176
0360c     26 FA 05 F6 | 	mov	result1, #38
03610     2C 00 90 FD | 	jmp	#LR__0183
03614                 | LR__0177
03614     10 FA 05 F6 | 	mov	result1, #16
03618     24 00 90 FD | 	jmp	#LR__0183
0361c                 | LR__0178
0361c     0F FA 05 F6 | 	mov	result1, #15
03620     1C 00 90 FD | 	jmp	#LR__0183
03624                 | LR__0179
03624     2A FA 05 F6 | 	mov	result1, #42
03628     14 00 90 FD | 	jmp	#LR__0183
0362c                 | LR__0180
0362c     28 FA 05 F6 | 	mov	result1, #40
03630     0C 00 90 FD | 	jmp	#LR__0183
03634                 | LR__0181
03634     29 FA 05 F6 | 	mov	result1, #41
03638     04 00 90 FD | 	jmp	#LR__0183
0363c                 | LR__0182
0363c     00 FA 05 F6 | 	mov	result1, #0
03640                 | LR__0183
03640     A7 F0 03 F6 | 	mov	ptra, fp
03644     B2 00 A0 FD | 	call	#popregs_
03648                 | _isoperator_ret
03648     2D 00 64 FD | 	ret
0364c                 | 
0364c                 | ' 
0364c                 | ' 
0364c                 | ' function isnotename(s as string) as ulong
0364c                 | _isnotename
0364c     07 4A 05 F6 | 	mov	COUNT_, #7
03650     A8 00 A0 FD | 	call	#pushregs_
03654                 | ' if left$(s,1)<>"#" then return 0
03654     09 1F 02 F6 | 	mov	local01, arg01
03658     01 14 06 F6 | 	mov	arg02, #1
0365c     C4 D4 B1 FD | 	call	#__system__Left_S
03660     FD 12 02 F6 | 	mov	arg01, result1
03664     71 01 00 FF 
03668     4F 14 06 F6 | 	mov	arg02, ##@LR__4870
0366c     CC B4 B1 FD | 	call	#__system___string_cmp
03670     00 FA 0D F2 | 	cmp	result1, #0 wz
03674     00 FA 05 56 |  if_ne	mov	result1, #0
03678     30 03 90 5D |  if_ne	jmp	#LR__0213
0367c                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
0367c     0F 13 02 F6 | 	mov	arg01, local01
03680     03 14 06 F6 | 	mov	arg02, #3
03684     01 16 06 F6 | 	mov	arg03, #1
03688     B0 D5 B1 FD | 	call	#__system__Mid_S
0368c     FD 12 02 F6 | 	mov	arg01, result1
03690     71 01 00 FF 
03694     51 14 06 F6 | 	mov	arg02, ##@LR__4871
03698     A0 B4 B1 FD | 	call	#__system___string_cmp
0369c     00 FA 0D F2 | 	cmp	result1, #0 wz
036a0     18 00 90 5D |  if_ne	jmp	#LR__0190
036a4     0F 13 02 F6 | 	mov	arg01, local01
036a8     02 14 06 F6 | 	mov	arg02, #2
036ac     02 16 06 F6 | 	mov	arg03, #2
036b0     88 D5 B1 FD | 	call	#__system__Mid_S
036b4     FD 20 02 F6 | 	mov	local02, result1
036b8     14 00 90 FD | 	jmp	#LR__0191
036bc                 | LR__0190
036bc     0F 13 02 F6 | 	mov	arg01, local01
036c0     02 14 06 F6 | 	mov	arg02, #2
036c4     01 16 06 F6 | 	mov	arg03, #1
036c8     70 D5 B1 FD | 	call	#__system__Mid_S
036cc     FD 20 02 F6 | 	mov	local02, result1
036d0                 | LR__0191
036d0                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
036d0     0F 13 02 F6 | 	mov	arg01, local01
036d4     09 23 02 F6 | 	mov	local03, arg01
036d8     97 06 48 FB | 	callpa	#(@LR__0193-@LR__0192)>>2,fcache_load_ptr_
036dc                 | LR__0192
036dc     11 FB C9 FA | 	rdbyte	result1, local03 wz
036e0     01 22 06 51 |  if_ne	add	local03, #1
036e4     F4 FF 9F 5D |  if_ne	jmp	#LR__0192
036e8                 | LR__0193
036e8     09 23 82 F1 | 	sub	local03, arg01
036ec     11 15 02 F6 | 	mov	arg02, local03
036f0     01 14 86 F1 | 	sub	arg02, #1
036f4     0F 13 02 F6 | 	mov	arg01, local01
036f8     01 16 06 F6 | 	mov	arg03, #1
036fc     3C D5 B1 FD | 	call	#__system__Mid_S
03700     FD 12 02 F6 | 	mov	arg01, result1
03704     71 01 00 FF 
03708     53 14 06 F6 | 	mov	arg02, ##@LR__4872
0370c     2C B4 B1 FD | 	call	#__system___string_cmp
03710     00 FA 0D F2 | 	cmp	result1, #0 wz
03714     28 00 90 AD |  if_e	jmp	#LR__0194
03718     0F 13 02 F6 | 	mov	arg01, local01
0371c     01 14 06 F6 | 	mov	arg02, #1
03720     88 D4 B1 FD | 	call	#__system__Right_S
03724     FD 12 02 F6 | 	mov	arg01, result1
03728     18 E7 B1 FD | 	call	#__system____builtin_atof
0372c     FD 12 02 F6 | 	mov	arg01, result1
03730     00 14 06 F6 | 	mov	arg02, #0
03734     EC E3 B1 FD | 	call	#__system___float_tointeger
03738     FD 24 02 F6 | 	mov	local04, result1
0373c     34 00 90 FD | 	jmp	#LR__0195
03740                 | LR__0194
03740     0F 13 02 F6 | 	mov	arg01, local01
03744     01 14 06 F6 | 	mov	arg02, #1
03748     60 D4 B1 FD | 	call	#__system__Right_S
0374c     FD 12 02 F6 | 	mov	arg01, result1
03750     F0 E6 B1 FD | 	call	#__system____builtin_atof
03754     FD 14 02 F6 | 	mov	arg02, result1
03758     00 C0 5F FF 
0375c     00 12 06 F6 | 	mov	arg01, ##-1082130432
03760     F8 DE B1 FD | 	call	#__system___float_mul
03764     FD 12 02 F6 | 	mov	arg01, result1
03768     00 14 06 F6 | 	mov	arg02, #0
0376c     B4 E3 B1 FD | 	call	#__system___float_tointeger
03770     FD 24 02 F6 | 	mov	local04, result1
03774                 | LR__0195
03774                 | ' 
03774                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
03774     00 24 0E F2 | 	cmp	local04, #0 wz
03778     24 00 90 5D |  if_ne	jmp	#LR__0196
0377c     0F 13 02 F6 | 	mov	arg01, local01
03780     01 14 06 F6 | 	mov	arg02, #1
03784     24 D4 B1 FD | 	call	#__system__Right_S
03788     FD 12 02 F6 | 	mov	arg01, result1
0378c     71 01 00 FF 
03790     55 14 06 F6 | 	mov	arg02, ##@LR__4873
03794     A4 B3 B1 FD | 	call	#__system___string_cmp
03798     00 FA 0D F2 | 	cmp	result1, #0 wz
0379c     04 24 06 56 |  if_ne	mov	local04, #4
037a0                 | LR__0196
037a0                 | ' 
037a0                 | ' select case s1
037a0     10 27 02 F6 | 	mov	local05, local02
037a4     71 01 00 FF 
037a8     57 14 06 F6 | 	mov	arg02, ##@LR__4874
037ac     13 13 02 F6 | 	mov	arg01, local05
037b0     88 B3 B1 FD | 	call	#__system___string_cmp
037b4     00 FA 0D F2 | 	cmp	result1, #0 wz
037b8     24 01 90 AD |  if_e	jmp	#LR__0197
037bc     71 01 00 FF 
037c0     59 14 06 F6 | 	mov	arg02, ##@LR__4875
037c4     13 13 02 F6 | 	mov	arg01, local05
037c8     70 B3 B1 FD | 	call	#__system___string_cmp
037cc     00 FA 0D F2 | 	cmp	result1, #0 wz
037d0     18 01 90 AD |  if_e	jmp	#LR__0198
037d4     71 01 00 FF 
037d8     5C 14 06 F6 | 	mov	arg02, ##@LR__4876
037dc     13 13 02 F6 | 	mov	arg01, local05
037e0     58 B3 B1 FD | 	call	#__system___string_cmp
037e4     00 FA 0D F2 | 	cmp	result1, #0 wz
037e8     0C 01 90 AD |  if_e	jmp	#LR__0199
037ec     71 01 00 FF 
037f0     5E 14 06 F6 | 	mov	arg02, ##@LR__4877
037f4     13 13 02 F6 | 	mov	arg01, local05
037f8     40 B3 B1 FD | 	call	#__system___string_cmp
037fc     00 FA 0D F2 | 	cmp	result1, #0 wz
03800     00 01 90 AD |  if_e	jmp	#LR__0200
03804     71 01 00 FF 
03808     61 14 06 F6 | 	mov	arg02, ##@LR__4878
0380c     13 13 02 F6 | 	mov	arg01, local05
03810     28 B3 B1 FD | 	call	#__system___string_cmp
03814     00 FA 0D F2 | 	cmp	result1, #0 wz
03818     F4 00 90 AD |  if_e	jmp	#LR__0201
0381c     71 01 00 FF 
03820     63 14 06 F6 | 	mov	arg02, ##@LR__4879
03824     13 13 02 F6 | 	mov	arg01, local05
03828     10 B3 B1 FD | 	call	#__system___string_cmp
0382c     00 FA 0D F2 | 	cmp	result1, #0 wz
03830     E8 00 90 AD |  if_e	jmp	#LR__0202
03834     71 01 00 FF 
03838     65 14 06 F6 | 	mov	arg02, ##@LR__4880
0383c     13 13 02 F6 | 	mov	arg01, local05
03840     F8 B2 B1 FD | 	call	#__system___string_cmp
03844     00 FA 0D F2 | 	cmp	result1, #0 wz
03848     DC 00 90 AD |  if_e	jmp	#LR__0203
0384c     71 01 00 FF 
03850     68 14 06 F6 | 	mov	arg02, ##@LR__4881
03854     13 13 02 F6 | 	mov	arg01, local05
03858     E0 B2 B1 FD | 	call	#__system___string_cmp
0385c     00 FA 0D F2 | 	cmp	result1, #0 wz
03860     D0 00 90 AD |  if_e	jmp	#LR__0204
03864     71 01 00 FF 
03868     6A 14 06 F6 | 	mov	arg02, ##@LR__4882
0386c     13 13 02 F6 | 	mov	arg01, local05
03870     C8 B2 B1 FD | 	call	#__system___string_cmp
03874     00 FA 0D F2 | 	cmp	result1, #0 wz
03878     C4 00 90 AD |  if_e	jmp	#LR__0205
0387c     71 01 00 FF 
03880     6D 14 06 F6 | 	mov	arg02, ##@LR__4883
03884     13 13 02 F6 | 	mov	arg01, local05
03888     B0 B2 B1 FD | 	call	#__system___string_cmp
0388c     00 FA 0D F2 | 	cmp	result1, #0 wz
03890     B8 00 90 AD |  if_e	jmp	#LR__0206
03894     71 01 00 FF 
03898     6F 14 06 F6 | 	mov	arg02, ##@LR__4884
0389c     13 13 02 F6 | 	mov	arg01, local05
038a0     98 B2 B1 FD | 	call	#__system___string_cmp
038a4     00 FA 0D F2 | 	cmp	result1, #0 wz
038a8     AC 00 90 AD |  if_e	jmp	#LR__0207
038ac     71 01 00 FF 
038b0     72 14 06 F6 | 	mov	arg02, ##@LR__4885
038b4     13 13 02 F6 | 	mov	arg01, local05
038b8     80 B2 B1 FD | 	call	#__system___string_cmp
038bc     00 FA 0D F2 | 	cmp	result1, #0 wz
038c0     A0 00 90 AD |  if_e	jmp	#LR__0208
038c4     71 01 00 FF 
038c8     74 14 06 F6 | 	mov	arg02, ##@LR__4886
038cc     13 13 02 F6 | 	mov	arg01, local05
038d0     68 B2 B1 FD | 	call	#__system___string_cmp
038d4     00 FA 0D F2 | 	cmp	result1, #0 wz
038d8     94 00 90 AD |  if_e	jmp	#LR__0209
038dc     9C 00 90 FD | 	jmp	#LR__0210
038e0                 | LR__0197
038e0     01 00 00 FF 
038e4     00 29 06 F6 | 	mov	local06, ##768
038e8     98 00 90 FD | 	jmp	#LR__0211
038ec                 | LR__0198
038ec     01 00 00 FF 
038f0     01 29 06 F6 | 	mov	local06, ##769
038f4     8C 00 90 FD | 	jmp	#LR__0211
038f8                 | LR__0199
038f8     01 00 00 FF 
038fc     02 29 06 F6 | 	mov	local06, ##770
03900     80 00 90 FD | 	jmp	#LR__0211
03904                 | LR__0200
03904     01 00 00 FF 
03908     03 29 06 F6 | 	mov	local06, ##771
0390c     74 00 90 FD | 	jmp	#LR__0211
03910                 | LR__0201
03910     01 00 00 FF 
03914     04 29 06 F6 | 	mov	local06, ##772
03918     68 00 90 FD | 	jmp	#LR__0211
0391c                 | LR__0202
0391c     01 00 00 FF 
03920     05 29 06 F6 | 	mov	local06, ##773
03924     5C 00 90 FD | 	jmp	#LR__0211
03928                 | LR__0203
03928     01 00 00 FF 
0392c     06 29 06 F6 | 	mov	local06, ##774
03930     50 00 90 FD | 	jmp	#LR__0211
03934                 | LR__0204
03934     01 00 00 FF 
03938     07 29 06 F6 | 	mov	local06, ##775
0393c     44 00 90 FD | 	jmp	#LR__0211
03940                 | LR__0205
03940     01 00 00 FF 
03944     08 29 06 F6 | 	mov	local06, ##776
03948     38 00 90 FD | 	jmp	#LR__0211
0394c                 | LR__0206
0394c     01 00 00 FF 
03950     09 29 06 F6 | 	mov	local06, ##777
03954     2C 00 90 FD | 	jmp	#LR__0211
03958                 | LR__0207
03958     01 00 00 FF 
0395c     0A 29 06 F6 | 	mov	local06, ##778
03960     20 00 90 FD | 	jmp	#LR__0211
03964                 | LR__0208
03964     01 00 00 FF 
03968     0B 29 06 F6 | 	mov	local06, ##779
0396c     14 00 90 FD | 	jmp	#LR__0211
03970                 | LR__0209
03970     01 00 00 FF 
03974     0B 29 06 F6 | 	mov	local06, ##779
03978     08 00 90 FD | 	jmp	#LR__0211
0397c                 | LR__0210
0397c     00 FA 05 F6 | 	mov	result1, #0
03980     28 00 90 FD | 	jmp	#LR__0213
03984                 | LR__0211
03984                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
03984     FF FF 7F FF 
03988     FF 25 56 F2 | 	cmps	local04, ##-1 wc
0398c     18 00 90 CD |  if_b	jmp	#LR__0212
03990     0A 24 56 F2 | 	cmps	local04, #10 wc
03994     12 2B 02 C6 |  if_b	mov	local07, local04
03998     01 2A 66 C0 |  if_b	shl	local07, #1
0399c     12 2B 02 C1 |  if_b	add	local07, local04
039a0     02 2A 66 C0 |  if_b	shl	local07, #2
039a4     15 29 02 C1 |  if_b	add	local06, local07
039a8                 | LR__0212
039a8                 | ' return token
039a8     14 FB 01 F6 | 	mov	result1, local06
039ac                 | LR__0213
039ac     A7 F0 03 F6 | 	mov	ptra, fp
039b0     B2 00 A0 FD | 	call	#popregs_
039b4                 | _isnotename_ret
039b4     2D 00 64 FD | 	ret
039b8                 | 
039b8                 | ' 
039b8                 | ' 
039b8                 | ' function isseparator(s as string) as ubyte
039b8                 | _isseparator
039b8     01 4A 05 F6 | 	mov	COUNT_, #1
039bc     A8 00 A0 FD | 	call	#pushregs_
039c0                 | ' 
039c0                 | ' select case s
039c0     09 1F 02 F6 | 	mov	local01, arg01
039c4     71 01 00 FF 
039c8     76 14 06 F6 | 	mov	arg02, ##@LR__4887
039cc     0F 13 02 F6 | 	mov	arg01, local01
039d0     68 B1 B1 FD | 	call	#__system___string_cmp
039d4     00 FA 0D F2 | 	cmp	result1, #0 wz
039d8     54 01 90 AD |  if_e	jmp	#LR__0220
039dc     71 01 00 FF 
039e0     78 14 06 F6 | 	mov	arg02, ##@LR__4888
039e4     0F 13 02 F6 | 	mov	arg01, local01
039e8     50 B1 B1 FD | 	call	#__system___string_cmp
039ec     00 FA 0D F2 | 	cmp	result1, #0 wz
039f0     44 01 90 AD |  if_e	jmp	#LR__0221
039f4     71 01 00 FF 
039f8     7A 14 06 F6 | 	mov	arg02, ##@LR__4889
039fc     0F 13 02 F6 | 	mov	arg01, local01
03a00     38 B1 B1 FD | 	call	#__system___string_cmp
03a04     00 FA 0D F2 | 	cmp	result1, #0 wz
03a08     34 01 90 AD |  if_e	jmp	#LR__0222
03a0c     71 01 00 FF 
03a10     7C 14 06 F6 | 	mov	arg02, ##@LR__4890
03a14     0F 13 02 F6 | 	mov	arg01, local01
03a18     20 B1 B1 FD | 	call	#__system___string_cmp
03a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a20     24 01 90 AD |  if_e	jmp	#LR__0223
03a24     71 01 00 FF 
03a28     7E 14 06 F6 | 	mov	arg02, ##@LR__4891
03a2c     0F 13 02 F6 | 	mov	arg01, local01
03a30     08 B1 B1 FD | 	call	#__system___string_cmp
03a34     00 FA 0D F2 | 	cmp	result1, #0 wz
03a38     14 01 90 AD |  if_e	jmp	#LR__0224
03a3c     71 01 00 FF 
03a40     80 14 06 F6 | 	mov	arg02, ##@LR__4892
03a44     0F 13 02 F6 | 	mov	arg01, local01
03a48     F0 B0 B1 FD | 	call	#__system___string_cmp
03a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a50     04 01 90 AD |  if_e	jmp	#LR__0225
03a54     71 01 00 FF 
03a58     82 14 06 F6 | 	mov	arg02, ##@LR__4893
03a5c     0F 13 02 F6 | 	mov	arg01, local01
03a60     D8 B0 B1 FD | 	call	#__system___string_cmp
03a64     00 FA 0D F2 | 	cmp	result1, #0 wz
03a68     F4 00 90 AD |  if_e	jmp	#LR__0226
03a6c     71 01 00 FF 
03a70     84 14 06 F6 | 	mov	arg02, ##@LR__4894
03a74     0F 13 02 F6 | 	mov	arg01, local01
03a78     C0 B0 B1 FD | 	call	#__system___string_cmp
03a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a80     E4 00 90 AD |  if_e	jmp	#LR__0227
03a84     71 01 00 FF 
03a88     86 14 06 F6 | 	mov	arg02, ##@LR__4895
03a8c     0F 13 02 F6 | 	mov	arg01, local01
03a90     A8 B0 B1 FD | 	call	#__system___string_cmp
03a94     00 FA 0D F2 | 	cmp	result1, #0 wz
03a98     D4 00 90 AD |  if_e	jmp	#LR__0228
03a9c     71 01 00 FF 
03aa0     88 14 06 F6 | 	mov	arg02, ##@LR__4896
03aa4     0F 13 02 F6 | 	mov	arg01, local01
03aa8     90 B0 B1 FD | 	call	#__system___string_cmp
03aac     00 FA 0D F2 | 	cmp	result1, #0 wz
03ab0     C4 00 90 AD |  if_e	jmp	#LR__0229
03ab4     71 01 00 FF 
03ab8     8A 14 06 F6 | 	mov	arg02, ##@LR__4897
03abc     0F 13 02 F6 | 	mov	arg01, local01
03ac0     78 B0 B1 FD | 	call	#__system___string_cmp
03ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ac8     B4 00 90 AD |  if_e	jmp	#LR__0230
03acc     71 01 00 FF 
03ad0     8C 14 06 F6 | 	mov	arg02, ##@LR__4898
03ad4     0F 13 02 F6 | 	mov	arg01, local01
03ad8     60 B0 B1 FD | 	call	#__system___string_cmp
03adc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae0     A4 00 90 AD |  if_e	jmp	#LR__0231
03ae4     71 01 00 FF 
03ae8     8E 14 06 F6 | 	mov	arg02, ##@LR__4899
03aec     0F 13 02 F6 | 	mov	arg01, local01
03af0     48 B0 B1 FD | 	call	#__system___string_cmp
03af4     00 FA 0D F2 | 	cmp	result1, #0 wz
03af8     94 00 90 AD |  if_e	jmp	#LR__0232
03afc     71 01 00 FF 
03b00     90 14 06 F6 | 	mov	arg02, ##@LR__4900
03b04     0F 13 02 F6 | 	mov	arg01, local01
03b08     30 B0 B1 FD | 	call	#__system___string_cmp
03b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03b10     84 00 90 AD |  if_e	jmp	#LR__0233
03b14     71 01 00 FF 
03b18     92 14 06 F6 | 	mov	arg02, ##@LR__4901
03b1c     0F 13 02 F6 | 	mov	arg01, local01
03b20     18 B0 B1 FD | 	call	#__system___string_cmp
03b24     00 FA 0D F2 | 	cmp	result1, #0 wz
03b28     74 00 90 AD |  if_e	jmp	#LR__0234
03b2c     78 00 90 FD | 	jmp	#LR__0235
03b30                 | LR__0220
03b30     01 FA 05 F6 | 	mov	result1, #1
03b34     74 00 90 FD | 	jmp	#LR__0236
03b38                 | LR__0221
03b38     02 FA 05 F6 | 	mov	result1, #2
03b3c     6C 00 90 FD | 	jmp	#LR__0236
03b40                 | LR__0222
03b40     1B FA 05 F6 | 	mov	result1, #27
03b44     64 00 90 FD | 	jmp	#LR__0236
03b48                 | LR__0223
03b48     11 FA 05 F6 | 	mov	result1, #17
03b4c     5C 00 90 FD | 	jmp	#LR__0236
03b50                 | LR__0224
03b50     05 FA 05 F6 | 	mov	result1, #5
03b54     54 00 90 FD | 	jmp	#LR__0236
03b58                 | LR__0225
03b58     06 FA 05 F6 | 	mov	result1, #6
03b5c     4C 00 90 FD | 	jmp	#LR__0236
03b60                 | LR__0226
03b60     12 FA 05 F6 | 	mov	result1, #18
03b64     44 00 90 FD | 	jmp	#LR__0236
03b68                 | LR__0227
03b68     13 FA 05 F6 | 	mov	result1, #19
03b6c     3C 00 90 FD | 	jmp	#LR__0236
03b70                 | LR__0228
03b70     0C FA 05 F6 | 	mov	result1, #12
03b74     34 00 90 FD | 	jmp	#LR__0236
03b78                 | LR__0229
03b78     14 FA 05 F6 | 	mov	result1, #20
03b7c     2C 00 90 FD | 	jmp	#LR__0236
03b80                 | LR__0230
03b80     15 FA 05 F6 | 	mov	result1, #21
03b84     24 00 90 FD | 	jmp	#LR__0236
03b88                 | LR__0231
03b88     16 FA 05 F6 | 	mov	result1, #22
03b8c     1C 00 90 FD | 	jmp	#LR__0236
03b90                 | LR__0232
03b90     FF FB 05 F6 | 	mov	result1, #511
03b94     14 00 90 FD | 	jmp	#LR__0236
03b98                 | LR__0233
03b98     0F FA 05 F6 | 	mov	result1, #15
03b9c     0C 00 90 FD | 	jmp	#LR__0236
03ba0                 | LR__0234
03ba0     10 FA 05 F6 | 	mov	result1, #16
03ba4     04 00 90 FD | 	jmp	#LR__0236
03ba8                 | LR__0235
03ba8     00 FA 05 F6 | 	mov	result1, #0
03bac                 | LR__0236
03bac     A7 F0 03 F6 | 	mov	ptra, fp
03bb0     B2 00 A0 FD | 	call	#popregs_
03bb4                 | _isseparator_ret
03bb4     2D 00 64 FD | 	ret
03bb8                 | 
03bb8                 | ' 
03bb8                 | ' 
03bb8                 | ' function iscommand(s as string) as ubyte
03bb8                 | _iscommand
03bb8     01 4A 05 F6 | 	mov	COUNT_, #1
03bbc     A8 00 A0 FD | 	call	#pushregs_
03bc0                 | ' 
03bc0                 | ' select case s
03bc0     09 1F 02 F6 | 	mov	local01, arg01
03bc4     71 01 00 FF 
03bc8     96 14 06 F6 | 	mov	arg02, ##@LR__4903
03bcc     0F 13 02 F6 | 	mov	arg01, local01
03bd0     68 AF B1 FD | 	call	#__system___string_cmp
03bd4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bd8     EC 08 90 AD |  if_e	jmp	#LR__0240
03bdc     71 01 00 FF 
03be0     9B 14 06 F6 | 	mov	arg02, ##@LR__4904
03be4     0F 13 02 F6 | 	mov	arg01, local01
03be8     50 AF B1 FD | 	call	#__system___string_cmp
03bec     00 FA 0D F2 | 	cmp	result1, #0 wz
03bf0     DC 08 90 AD |  if_e	jmp	#LR__0241
03bf4     71 01 00 FF 
03bf8     9E 14 06 F6 | 	mov	arg02, ##@LR__4905
03bfc     0F 13 02 F6 | 	mov	arg01, local01
03c00     38 AF B1 FD | 	call	#__system___string_cmp
03c04     00 FA 0D F2 | 	cmp	result1, #0 wz
03c08     CC 08 90 AD |  if_e	jmp	#LR__0242
03c0c     71 01 00 FF 
03c10     A2 14 06 F6 | 	mov	arg02, ##@LR__4906
03c14     0F 13 02 F6 | 	mov	arg01, local01
03c18     20 AF B1 FD | 	call	#__system___string_cmp
03c1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c20     BC 08 90 AD |  if_e	jmp	#LR__0243
03c24     71 01 00 FF 
03c28     A7 14 06 F6 | 	mov	arg02, ##@LR__4907
03c2c     0F 13 02 F6 | 	mov	arg01, local01
03c30     08 AF B1 FD | 	call	#__system___string_cmp
03c34     00 FA 0D F2 | 	cmp	result1, #0 wz
03c38     AC 08 90 AD |  if_e	jmp	#LR__0244
03c3c     71 01 00 FF 
03c40     AB 14 06 F6 | 	mov	arg02, ##@LR__4908
03c44     0F 13 02 F6 | 	mov	arg01, local01
03c48     F0 AE B1 FD | 	call	#__system___string_cmp
03c4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c50     9C 08 90 AD |  if_e	jmp	#LR__0245
03c54     71 01 00 FF 
03c58     B2 14 06 F6 | 	mov	arg02, ##@LR__4909
03c5c     0F 13 02 F6 | 	mov	arg01, local01
03c60     D8 AE B1 FD | 	call	#__system___string_cmp
03c64     00 FA 0D F2 | 	cmp	result1, #0 wz
03c68     8C 08 90 AD |  if_e	jmp	#LR__0246
03c6c     71 01 00 FF 
03c70     B6 14 06 F6 | 	mov	arg02, ##@LR__4910
03c74     0F 13 02 F6 | 	mov	arg01, local01
03c78     C0 AE B1 FD | 	call	#__system___string_cmp
03c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c80     7C 08 90 AD |  if_e	jmp	#LR__0247
03c84     71 01 00 FF 
03c88     BC 14 06 F6 | 	mov	arg02, ##@LR__4911
03c8c     0F 13 02 F6 | 	mov	arg01, local01
03c90     A8 AE B1 FD | 	call	#__system___string_cmp
03c94     00 FA 0D F2 | 	cmp	result1, #0 wz
03c98     6C 08 90 AD |  if_e	jmp	#LR__0248
03c9c     71 01 00 FF 
03ca0     C0 14 06 F6 | 	mov	arg02, ##@LR__4912
03ca4     0F 13 02 F6 | 	mov	arg01, local01
03ca8     90 AE B1 FD | 	call	#__system___string_cmp
03cac     00 FA 0D F2 | 	cmp	result1, #0 wz
03cb0     5C 08 90 AD |  if_e	jmp	#LR__0249
03cb4     71 01 00 FF 
03cb8     C6 14 06 F6 | 	mov	arg02, ##@LR__4913
03cbc     0F 13 02 F6 | 	mov	arg01, local01
03cc0     78 AE B1 FD | 	call	#__system___string_cmp
03cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc8     4C 08 90 AD |  if_e	jmp	#LR__0250
03ccc     71 01 00 FF 
03cd0     C9 14 06 F6 | 	mov	arg02, ##@LR__4914
03cd4     0F 13 02 F6 | 	mov	arg01, local01
03cd8     60 AE B1 FD | 	call	#__system___string_cmp
03cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ce0     3C 08 90 AD |  if_e	jmp	#LR__0251
03ce4     71 01 00 FF 
03ce8     CF 14 06 F6 | 	mov	arg02, ##@LR__4915
03cec     0F 13 02 F6 | 	mov	arg01, local01
03cf0     48 AE B1 FD | 	call	#__system___string_cmp
03cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
03cf8     2C 08 90 AD |  if_e	jmp	#LR__0252
03cfc     71 01 00 FF 
03d00     D3 14 06 F6 | 	mov	arg02, ##@LR__4916
03d04     0F 13 02 F6 | 	mov	arg01, local01
03d08     30 AE B1 FD | 	call	#__system___string_cmp
03d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d10     1C 08 90 AD |  if_e	jmp	#LR__0253
03d14     71 01 00 FF 
03d18     DA 14 06 F6 | 	mov	arg02, ##@LR__4917
03d1c     0F 13 02 F6 | 	mov	arg01, local01
03d20     18 AE B1 FD | 	call	#__system___string_cmp
03d24     00 FA 0D F2 | 	cmp	result1, #0 wz
03d28     0C 08 90 AD |  if_e	jmp	#LR__0254
03d2c     71 01 00 FF 
03d30     E1 14 06 F6 | 	mov	arg02, ##@LR__4918
03d34     0F 13 02 F6 | 	mov	arg01, local01
03d38     00 AE B1 FD | 	call	#__system___string_cmp
03d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d40     FC 07 90 AD |  if_e	jmp	#LR__0255
03d44     71 01 00 FF 
03d48     E8 14 06 F6 | 	mov	arg02, ##@LR__4919
03d4c     0F 13 02 F6 | 	mov	arg01, local01
03d50     E8 AD B1 FD | 	call	#__system___string_cmp
03d54     00 FA 0D F2 | 	cmp	result1, #0 wz
03d58     EC 07 90 AD |  if_e	jmp	#LR__0256
03d5c     71 01 00 FF 
03d60     F2 14 06 F6 | 	mov	arg02, ##@LR__4920
03d64     0F 13 02 F6 | 	mov	arg01, local01
03d68     D0 AD B1 FD | 	call	#__system___string_cmp
03d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d70     DC 07 90 AD |  if_e	jmp	#LR__0257
03d74     71 01 00 FF 
03d78     F6 14 06 F6 | 	mov	arg02, ##@LR__4921
03d7c     0F 13 02 F6 | 	mov	arg01, local01
03d80     B8 AD B1 FD | 	call	#__system___string_cmp
03d84     00 FA 0D F2 | 	cmp	result1, #0 wz
03d88     CC 07 90 AD |  if_e	jmp	#LR__0258
03d8c     71 01 00 FF 
03d90     FA 14 06 F6 | 	mov	arg02, ##@LR__4922
03d94     0F 13 02 F6 | 	mov	arg01, local01
03d98     A0 AD B1 FD | 	call	#__system___string_cmp
03d9c     00 FA 0D F2 | 	cmp	result1, #0 wz
03da0     BC 07 90 AD |  if_e	jmp	#LR__0259
03da4     71 01 00 FF 
03da8     FE 14 06 F6 | 	mov	arg02, ##@LR__4923
03dac     0F 13 02 F6 | 	mov	arg01, local01
03db0     88 AD B1 FD | 	call	#__system___string_cmp
03db4     00 FA 0D F2 | 	cmp	result1, #0 wz
03db8     AC 07 90 AD |  if_e	jmp	#LR__0260
03dbc     71 01 00 FF 
03dc0     02 15 06 F6 | 	mov	arg02, ##@LR__4924
03dc4     0F 13 02 F6 | 	mov	arg01, local01
03dc8     70 AD B1 FD | 	call	#__system___string_cmp
03dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd0     9C 07 90 AD |  if_e	jmp	#LR__0261
03dd4     71 01 00 FF 
03dd8     08 15 06 F6 | 	mov	arg02, ##@LR__4925
03ddc     0F 13 02 F6 | 	mov	arg01, local01
03de0     58 AD B1 FD | 	call	#__system___string_cmp
03de4     00 FA 0D F2 | 	cmp	result1, #0 wz
03de8     8C 07 90 AD |  if_e	jmp	#LR__0262
03dec     71 01 00 FF 
03df0     0D 15 06 F6 | 	mov	arg02, ##@LR__4926
03df4     0F 13 02 F6 | 	mov	arg01, local01
03df8     40 AD B1 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     7C 07 90 AD |  if_e	jmp	#LR__0263
03e04     71 01 00 FF 
03e08     11 15 06 F6 | 	mov	arg02, ##@LR__4927
03e0c     0F 13 02 F6 | 	mov	arg01, local01
03e10     28 AD B1 FD | 	call	#__system___string_cmp
03e14     00 FA 0D F2 | 	cmp	result1, #0 wz
03e18     6C 07 90 AD |  if_e	jmp	#LR__0264
03e1c     71 01 00 FF 
03e20     16 15 06 F6 | 	mov	arg02, ##@LR__4928
03e24     0F 13 02 F6 | 	mov	arg01, local01
03e28     10 AD B1 FD | 	call	#__system___string_cmp
03e2c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e30     5C 07 90 AD |  if_e	jmp	#LR__0265
03e34     71 01 00 FF 
03e38     1A 15 06 F6 | 	mov	arg02, ##@LR__4929
03e3c     0F 13 02 F6 | 	mov	arg01, local01
03e40     F8 AC B1 FD | 	call	#__system___string_cmp
03e44     00 FA 0D F2 | 	cmp	result1, #0 wz
03e48     4C 07 90 AD |  if_e	jmp	#LR__0266
03e4c     71 01 00 FF 
03e50     22 15 06 F6 | 	mov	arg02, ##@LR__4930
03e54     0F 13 02 F6 | 	mov	arg01, local01
03e58     E0 AC B1 FD | 	call	#__system___string_cmp
03e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e60     3C 07 90 AD |  if_e	jmp	#LR__0267
03e64     71 01 00 FF 
03e68     26 15 06 F6 | 	mov	arg02, ##@LR__4931
03e6c     0F 13 02 F6 | 	mov	arg01, local01
03e70     C8 AC B1 FD | 	call	#__system___string_cmp
03e74     00 FA 0D F2 | 	cmp	result1, #0 wz
03e78     2C 07 90 AD |  if_e	jmp	#LR__0268
03e7c     71 01 00 FF 
03e80     2B 15 06 F6 | 	mov	arg02, ##@LR__4932
03e84     0F 13 02 F6 | 	mov	arg01, local01
03e88     B0 AC B1 FD | 	call	#__system___string_cmp
03e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03e90     1C 07 90 AD |  if_e	jmp	#LR__0269
03e94     71 01 00 FF 
03e98     2F 15 06 F6 | 	mov	arg02, ##@LR__4933
03e9c     0F 13 02 F6 | 	mov	arg01, local01
03ea0     98 AC B1 FD | 	call	#__system___string_cmp
03ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ea8     0C 07 90 AD |  if_e	jmp	#LR__0270
03eac     71 01 00 FF 
03eb0     34 15 06 F6 | 	mov	arg02, ##@LR__4934
03eb4     0F 13 02 F6 | 	mov	arg01, local01
03eb8     80 AC B1 FD | 	call	#__system___string_cmp
03ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ec0     FC 06 90 AD |  if_e	jmp	#LR__0271
03ec4     71 01 00 FF 
03ec8     38 15 06 F6 | 	mov	arg02, ##@LR__4935
03ecc     0F 13 02 F6 | 	mov	arg01, local01
03ed0     68 AC B1 FD | 	call	#__system___string_cmp
03ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ed8     EC 06 90 AD |  if_e	jmp	#LR__0272
03edc     71 01 00 FF 
03ee0     3B 15 06 F6 | 	mov	arg02, ##@LR__4936
03ee4     0F 13 02 F6 | 	mov	arg01, local01
03ee8     50 AC B1 FD | 	call	#__system___string_cmp
03eec     00 FA 0D F2 | 	cmp	result1, #0 wz
03ef0     DC 06 90 AD |  if_e	jmp	#LR__0273
03ef4     71 01 00 FF 
03ef8     41 15 06 F6 | 	mov	arg02, ##@LR__4937
03efc     0F 13 02 F6 | 	mov	arg01, local01
03f00     38 AC B1 FD | 	call	#__system___string_cmp
03f04     00 FA 0D F2 | 	cmp	result1, #0 wz
03f08     CC 06 90 AD |  if_e	jmp	#LR__0274
03f0c     71 01 00 FF 
03f10     45 15 06 F6 | 	mov	arg02, ##@LR__4938
03f14     0F 13 02 F6 | 	mov	arg01, local01
03f18     20 AC B1 FD | 	call	#__system___string_cmp
03f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f20     BC 06 90 AD |  if_e	jmp	#LR__0275
03f24     71 01 00 FF 
03f28     4B 15 06 F6 | 	mov	arg02, ##@LR__4939
03f2c     0F 13 02 F6 | 	mov	arg01, local01
03f30     08 AC B1 FD | 	call	#__system___string_cmp
03f34     00 FA 0D F2 | 	cmp	result1, #0 wz
03f38     AC 06 90 AD |  if_e	jmp	#LR__0276
03f3c     71 01 00 FF 
03f40     50 15 06 F6 | 	mov	arg02, ##@LR__4940
03f44     0F 13 02 F6 | 	mov	arg01, local01
03f48     F0 AB B1 FD | 	call	#__system___string_cmp
03f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f50     9C 06 90 AD |  if_e	jmp	#LR__0277
03f54     71 01 00 FF 
03f58     53 15 06 F6 | 	mov	arg02, ##@LR__4941
03f5c     0F 13 02 F6 | 	mov	arg01, local01
03f60     D8 AB B1 FD | 	call	#__system___string_cmp
03f64     00 FA 0D F2 | 	cmp	result1, #0 wz
03f68     8C 06 90 AD |  if_e	jmp	#LR__0278
03f6c     71 01 00 FF 
03f70     56 15 06 F6 | 	mov	arg02, ##@LR__4942
03f74     0F 13 02 F6 | 	mov	arg01, local01
03f78     C0 AB B1 FD | 	call	#__system___string_cmp
03f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03f80     7C 06 90 AD |  if_e	jmp	#LR__0279
03f84     71 01 00 FF 
03f88     5A 15 06 F6 | 	mov	arg02, ##@LR__4943
03f8c     0F 13 02 F6 | 	mov	arg01, local01
03f90     A8 AB B1 FD | 	call	#__system___string_cmp
03f94     00 FA 0D F2 | 	cmp	result1, #0 wz
03f98     6C 06 90 AD |  if_e	jmp	#LR__0280
03f9c     71 01 00 FF 
03fa0     5D 15 06 F6 | 	mov	arg02, ##@LR__4944
03fa4     0F 13 02 F6 | 	mov	arg01, local01
03fa8     90 AB B1 FD | 	call	#__system___string_cmp
03fac     00 FA 0D F2 | 	cmp	result1, #0 wz
03fb0     5C 06 90 AD |  if_e	jmp	#LR__0281
03fb4     71 01 00 FF 
03fb8     61 15 06 F6 | 	mov	arg02, ##@LR__4945
03fbc     0F 13 02 F6 | 	mov	arg01, local01
03fc0     78 AB B1 FD | 	call	#__system___string_cmp
03fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
03fc8     4C 06 90 AD |  if_e	jmp	#LR__0282
03fcc     71 01 00 FF 
03fd0     66 15 06 F6 | 	mov	arg02, ##@LR__4946
03fd4     0F 13 02 F6 | 	mov	arg01, local01
03fd8     60 AB B1 FD | 	call	#__system___string_cmp
03fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
03fe0     3C 06 90 AD |  if_e	jmp	#LR__0283
03fe4     71 01 00 FF 
03fe8     69 15 06 F6 | 	mov	arg02, ##@LR__4947
03fec     0F 13 02 F6 | 	mov	arg01, local01
03ff0     48 AB B1 FD | 	call	#__system___string_cmp
03ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ff8     2C 06 90 AD |  if_e	jmp	#LR__0284
03ffc     71 01 00 FF 
04000     6E 15 06 F6 | 	mov	arg02, ##@LR__4948
04004     0F 13 02 F6 | 	mov	arg01, local01
04008     30 AB B1 FD | 	call	#__system___string_cmp
0400c     00 FA 0D F2 | 	cmp	result1, #0 wz
04010     1C 06 90 AD |  if_e	jmp	#LR__0285
04014     71 01 00 FF 
04018     72 15 06 F6 | 	mov	arg02, ##@LR__4949
0401c     0F 13 02 F6 | 	mov	arg01, local01
04020     18 AB B1 FD | 	call	#__system___string_cmp
04024     00 FA 0D F2 | 	cmp	result1, #0 wz
04028     0C 06 90 AD |  if_e	jmp	#LR__0286
0402c     71 01 00 FF 
04030     78 15 06 F6 | 	mov	arg02, ##@LR__4950
04034     0F 13 02 F6 | 	mov	arg01, local01
04038     00 AB B1 FD | 	call	#__system___string_cmp
0403c     00 FA 0D F2 | 	cmp	result1, #0 wz
04040     FC 05 90 AD |  if_e	jmp	#LR__0287
04044     71 01 00 FF 
04048     7D 15 06 F6 | 	mov	arg02, ##@LR__4951
0404c     0F 13 02 F6 | 	mov	arg01, local01
04050     E8 AA B1 FD | 	call	#__system___string_cmp
04054     00 FA 0D F2 | 	cmp	result1, #0 wz
04058     EC 05 90 AD |  if_e	jmp	#LR__0288
0405c     71 01 00 FF 
04060     80 15 06 F6 | 	mov	arg02, ##@LR__4952
04064     0F 13 02 F6 | 	mov	arg01, local01
04068     D0 AA B1 FD | 	call	#__system___string_cmp
0406c     00 FA 0D F2 | 	cmp	result1, #0 wz
04070     DC 05 90 AD |  if_e	jmp	#LR__0289
04074     71 01 00 FF 
04078     86 15 06 F6 | 	mov	arg02, ##@LR__4953
0407c     0F 13 02 F6 | 	mov	arg01, local01
04080     B8 AA B1 FD | 	call	#__system___string_cmp
04084     00 FA 0D F2 | 	cmp	result1, #0 wz
04088     CC 05 90 AD |  if_e	jmp	#LR__0290
0408c     71 01 00 FF 
04090     8A 15 06 F6 | 	mov	arg02, ##@LR__4954
04094     0F 13 02 F6 | 	mov	arg01, local01
04098     A0 AA B1 FD | 	call	#__system___string_cmp
0409c     00 FA 0D F2 | 	cmp	result1, #0 wz
040a0     BC 05 90 AD |  if_e	jmp	#LR__0291
040a4     71 01 00 FF 
040a8     8F 15 06 F6 | 	mov	arg02, ##@LR__4955
040ac     0F 13 02 F6 | 	mov	arg01, local01
040b0     88 AA B1 FD | 	call	#__system___string_cmp
040b4     00 FA 0D F2 | 	cmp	result1, #0 wz
040b8     AC 05 90 AD |  if_e	jmp	#LR__0292
040bc     71 01 00 FF 
040c0     92 15 06 F6 | 	mov	arg02, ##@LR__4956
040c4     0F 13 02 F6 | 	mov	arg01, local01
040c8     70 AA B1 FD | 	call	#__system___string_cmp
040cc     00 FA 0D F2 | 	cmp	result1, #0 wz
040d0     9C 05 90 AD |  if_e	jmp	#LR__0293
040d4     71 01 00 FF 
040d8     98 15 06 F6 | 	mov	arg02, ##@LR__4957
040dc     0F 13 02 F6 | 	mov	arg01, local01
040e0     58 AA B1 FD | 	call	#__system___string_cmp
040e4     00 FA 0D F2 | 	cmp	result1, #0 wz
040e8     8C 05 90 AD |  if_e	jmp	#LR__0294
040ec     71 01 00 FF 
040f0     9C 15 06 F6 | 	mov	arg02, ##@LR__4958
040f4     0F 13 02 F6 | 	mov	arg01, local01
040f8     40 AA B1 FD | 	call	#__system___string_cmp
040fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04100     7C 05 90 AD |  if_e	jmp	#LR__0295
04104     71 01 00 FF 
04108     A5 15 06 F6 | 	mov	arg02, ##@LR__4959
0410c     0F 13 02 F6 | 	mov	arg01, local01
04110     28 AA B1 FD | 	call	#__system___string_cmp
04114     00 FA 0D F2 | 	cmp	result1, #0 wz
04118     6C 05 90 AD |  if_e	jmp	#LR__0296
0411c     71 01 00 FF 
04120     AB 15 06 F6 | 	mov	arg02, ##@LR__4960
04124     0F 13 02 F6 | 	mov	arg01, local01
04128     10 AA B1 FD | 	call	#__system___string_cmp
0412c     00 FA 0D F2 | 	cmp	result1, #0 wz
04130     5C 05 90 AD |  if_e	jmp	#LR__0297
04134     71 01 00 FF 
04138     B1 15 06 F6 | 	mov	arg02, ##@LR__4961
0413c     0F 13 02 F6 | 	mov	arg01, local01
04140     F8 A9 B1 FD | 	call	#__system___string_cmp
04144     00 FA 0D F2 | 	cmp	result1, #0 wz
04148     4C 05 90 AD |  if_e	jmp	#LR__0298
0414c     71 01 00 FF 
04150     BA 15 06 F6 | 	mov	arg02, ##@LR__4962
04154     0F 13 02 F6 | 	mov	arg01, local01
04158     E0 A9 B1 FD | 	call	#__system___string_cmp
0415c     00 FA 0D F2 | 	cmp	result1, #0 wz
04160     3C 05 90 AD |  if_e	jmp	#LR__0299
04164     71 01 00 FF 
04168     C4 15 06 F6 | 	mov	arg02, ##@LR__4963
0416c     0F 13 02 F6 | 	mov	arg01, local01
04170     C8 A9 B1 FD | 	call	#__system___string_cmp
04174     00 FA 0D F2 | 	cmp	result1, #0 wz
04178     2C 05 90 AD |  if_e	jmp	#LR__0300
0417c     71 01 00 FF 
04180     CD 15 06 F6 | 	mov	arg02, ##@LR__4964
04184     0F 13 02 F6 | 	mov	arg01, local01
04188     B0 A9 B1 FD | 	call	#__system___string_cmp
0418c     00 FA 0D F2 | 	cmp	result1, #0 wz
04190     1C 05 90 AD |  if_e	jmp	#LR__0301
04194     71 01 00 FF 
04198     D2 15 06 F6 | 	mov	arg02, ##@LR__4965
0419c     0F 13 02 F6 | 	mov	arg01, local01
041a0     98 A9 B1 FD | 	call	#__system___string_cmp
041a4     00 FA 0D F2 | 	cmp	result1, #0 wz
041a8     0C 05 90 AD |  if_e	jmp	#LR__0302
041ac     71 01 00 FF 
041b0     D5 15 06 F6 | 	mov	arg02, ##@LR__4966
041b4     0F 13 02 F6 | 	mov	arg01, local01
041b8     80 A9 B1 FD | 	call	#__system___string_cmp
041bc     00 FA 0D F2 | 	cmp	result1, #0 wz
041c0     FC 04 90 AD |  if_e	jmp	#LR__0303
041c4     71 01 00 FF 
041c8     DA 15 06 F6 | 	mov	arg02, ##@LR__4967
041cc     0F 13 02 F6 | 	mov	arg01, local01
041d0     68 A9 B1 FD | 	call	#__system___string_cmp
041d4     00 FA 0D F2 | 	cmp	result1, #0 wz
041d8     EC 04 90 AD |  if_e	jmp	#LR__0304
041dc     71 01 00 FF 
041e0     DE 15 06 F6 | 	mov	arg02, ##@LR__4968
041e4     0F 13 02 F6 | 	mov	arg01, local01
041e8     50 A9 B1 FD | 	call	#__system___string_cmp
041ec     00 FA 0D F2 | 	cmp	result1, #0 wz
041f0     DC 04 90 AD |  if_e	jmp	#LR__0305
041f4     71 01 00 FF 
041f8     E3 15 06 F6 | 	mov	arg02, ##@LR__4969
041fc     0F 13 02 F6 | 	mov	arg01, local01
04200     38 A9 B1 FD | 	call	#__system___string_cmp
04204     00 FA 0D F2 | 	cmp	result1, #0 wz
04208     CC 04 90 AD |  if_e	jmp	#LR__0306
0420c     71 01 00 FF 
04210     E7 15 06 F6 | 	mov	arg02, ##@LR__4970
04214     0F 13 02 F6 | 	mov	arg01, local01
04218     20 A9 B1 FD | 	call	#__system___string_cmp
0421c     00 FA 0D F2 | 	cmp	result1, #0 wz
04220     BC 04 90 AD |  if_e	jmp	#LR__0307
04224     71 01 00 FF 
04228     F0 15 06 F6 | 	mov	arg02, ##@LR__4971
0422c     0F 13 02 F6 | 	mov	arg01, local01
04230     08 A9 B1 FD | 	call	#__system___string_cmp
04234     00 FA 0D F2 | 	cmp	result1, #0 wz
04238     AC 04 90 AD |  if_e	jmp	#LR__0308
0423c     71 01 00 FF 
04240     F5 15 06 F6 | 	mov	arg02, ##@LR__4972
04244     0F 13 02 F6 | 	mov	arg01, local01
04248     F0 A8 B1 FD | 	call	#__system___string_cmp
0424c     00 FA 0D F2 | 	cmp	result1, #0 wz
04250     9C 04 90 AD |  if_e	jmp	#LR__0309
04254     71 01 00 FF 
04258     FB 15 06 F6 | 	mov	arg02, ##@LR__4973
0425c     0F 13 02 F6 | 	mov	arg01, local01
04260     D8 A8 B1 FD | 	call	#__system___string_cmp
04264     00 FA 0D F2 | 	cmp	result1, #0 wz
04268     8C 04 90 AD |  if_e	jmp	#LR__0310
0426c     71 01 00 FF 
04270     FD 15 06 F6 | 	mov	arg02, ##@LR__4974
04274     0F 13 02 F6 | 	mov	arg01, local01
04278     C0 A8 B1 FD | 	call	#__system___string_cmp
0427c     00 FA 0D F2 | 	cmp	result1, #0 wz
04280     7C 04 90 AD |  if_e	jmp	#LR__0311
04284     72 01 00 FF 
04288     01 14 06 F6 | 	mov	arg02, ##@LR__4975
0428c     0F 13 02 F6 | 	mov	arg01, local01
04290     A8 A8 B1 FD | 	call	#__system___string_cmp
04294     00 FA 0D F2 | 	cmp	result1, #0 wz
04298     6C 04 90 AD |  if_e	jmp	#LR__0312
0429c     72 01 00 FF 
042a0     09 14 06 F6 | 	mov	arg02, ##@LR__4976
042a4     0F 13 02 F6 | 	mov	arg01, local01
042a8     90 A8 B1 FD | 	call	#__system___string_cmp
042ac     00 FA 0D F2 | 	cmp	result1, #0 wz
042b0     5C 04 90 AD |  if_e	jmp	#LR__0313
042b4     72 01 00 FF 
042b8     10 14 06 F6 | 	mov	arg02, ##@LR__4977
042bc     0F 13 02 F6 | 	mov	arg01, local01
042c0     78 A8 B1 FD | 	call	#__system___string_cmp
042c4     00 FA 0D F2 | 	cmp	result1, #0 wz
042c8     4C 04 90 AD |  if_e	jmp	#LR__0314
042cc     72 01 00 FF 
042d0     14 14 06 F6 | 	mov	arg02, ##@LR__4978
042d4     0F 13 02 F6 | 	mov	arg01, local01
042d8     60 A8 B1 FD | 	call	#__system___string_cmp
042dc     00 FA 0D F2 | 	cmp	result1, #0 wz
042e0     3C 04 90 AD |  if_e	jmp	#LR__0315
042e4     72 01 00 FF 
042e8     19 14 06 F6 | 	mov	arg02, ##@LR__4979
042ec     0F 13 02 F6 | 	mov	arg01, local01
042f0     48 A8 B1 FD | 	call	#__system___string_cmp
042f4     00 FA 0D F2 | 	cmp	result1, #0 wz
042f8     2C 04 90 AD |  if_e	jmp	#LR__0316
042fc     72 01 00 FF 
04300     1C 14 06 F6 | 	mov	arg02, ##@LR__4980
04304     0F 13 02 F6 | 	mov	arg01, local01
04308     30 A8 B1 FD | 	call	#__system___string_cmp
0430c     00 FA 0D F2 | 	cmp	result1, #0 wz
04310     1C 04 90 AD |  if_e	jmp	#LR__0317
04314     72 01 00 FF 
04318     25 14 06 F6 | 	mov	arg02, ##@LR__4981
0431c     0F 13 02 F6 | 	mov	arg01, local01
04320     18 A8 B1 FD | 	call	#__system___string_cmp
04324     00 FA 0D F2 | 	cmp	result1, #0 wz
04328     0C 04 90 AD |  if_e	jmp	#LR__0318
0432c     72 01 00 FF 
04330     2C 14 06 F6 | 	mov	arg02, ##@LR__4982
04334     0F 13 02 F6 | 	mov	arg01, local01
04338     00 A8 B1 FD | 	call	#__system___string_cmp
0433c     00 FA 0D F2 | 	cmp	result1, #0 wz
04340     FC 03 90 AD |  if_e	jmp	#LR__0319
04344     72 01 00 FF 
04348     33 14 06 F6 | 	mov	arg02, ##@LR__4983
0434c     0F 13 02 F6 | 	mov	arg01, local01
04350     E8 A7 B1 FD | 	call	#__system___string_cmp
04354     00 FA 0D F2 | 	cmp	result1, #0 wz
04358     EC 03 90 AD |  if_e	jmp	#LR__0320
0435c     72 01 00 FF 
04360     3A 14 06 F6 | 	mov	arg02, ##@LR__4984
04364     0F 13 02 F6 | 	mov	arg01, local01
04368     D0 A7 B1 FD | 	call	#__system___string_cmp
0436c     00 FA 0D F2 | 	cmp	result1, #0 wz
04370     DC 03 90 AD |  if_e	jmp	#LR__0321
04374     72 01 00 FF 
04378     45 14 06 F6 | 	mov	arg02, ##@LR__4985
0437c     0F 13 02 F6 | 	mov	arg01, local01
04380     B8 A7 B1 FD | 	call	#__system___string_cmp
04384     00 FA 0D F2 | 	cmp	result1, #0 wz
04388     CC 03 90 AD |  if_e	jmp	#LR__0322
0438c     72 01 00 FF 
04390     4C 14 06 F6 | 	mov	arg02, ##@LR__4986
04394     0F 13 02 F6 | 	mov	arg01, local01
04398     A0 A7 B1 FD | 	call	#__system___string_cmp
0439c     00 FA 0D F2 | 	cmp	result1, #0 wz
043a0     BC 03 90 AD |  if_e	jmp	#LR__0323
043a4     72 01 00 FF 
043a8     54 14 06 F6 | 	mov	arg02, ##@LR__4987
043ac     0F 13 02 F6 | 	mov	arg01, local01
043b0     88 A7 B1 FD | 	call	#__system___string_cmp
043b4     00 FA 0D F2 | 	cmp	result1, #0 wz
043b8     AC 03 90 AD |  if_e	jmp	#LR__0324
043bc     72 01 00 FF 
043c0     5A 14 06 F6 | 	mov	arg02, ##@LR__4988
043c4     0F 13 02 F6 | 	mov	arg01, local01
043c8     70 A7 B1 FD | 	call	#__system___string_cmp
043cc     00 FA 0D F2 | 	cmp	result1, #0 wz
043d0     9C 03 90 AD |  if_e	jmp	#LR__0325
043d4     72 01 00 FF 
043d8     5E 14 06 F6 | 	mov	arg02, ##@LR__4989
043dc     0F 13 02 F6 | 	mov	arg01, local01
043e0     58 A7 B1 FD | 	call	#__system___string_cmp
043e4     00 FA 0D F2 | 	cmp	result1, #0 wz
043e8     8C 03 90 AD |  if_e	jmp	#LR__0326
043ec     72 01 00 FF 
043f0     65 14 06 F6 | 	mov	arg02, ##@LR__4990
043f4     0F 13 02 F6 | 	mov	arg01, local01
043f8     40 A7 B1 FD | 	call	#__system___string_cmp
043fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04400     7C 03 90 AD |  if_e	jmp	#LR__0327
04404     72 01 00 FF 
04408     69 14 06 F6 | 	mov	arg02, ##@LR__4991
0440c     0F 13 02 F6 | 	mov	arg01, local01
04410     28 A7 B1 FD | 	call	#__system___string_cmp
04414     00 FA 0D F2 | 	cmp	result1, #0 wz
04418     6C 03 90 AD |  if_e	jmp	#LR__0328
0441c     72 01 00 FF 
04420     6E 14 06 F6 | 	mov	arg02, ##@LR__4992
04424     0F 13 02 F6 | 	mov	arg01, local01
04428     10 A7 B1 FD | 	call	#__system___string_cmp
0442c     00 FA 0D F2 | 	cmp	result1, #0 wz
04430     5C 03 90 AD |  if_e	jmp	#LR__0329
04434     72 01 00 FF 
04438     75 14 06 F6 | 	mov	arg02, ##@LR__4993
0443c     0F 13 02 F6 | 	mov	arg01, local01
04440     F8 A6 B1 FD | 	call	#__system___string_cmp
04444     00 FA 0D F2 | 	cmp	result1, #0 wz
04448     4C 03 90 AD |  if_e	jmp	#LR__0330
0444c     72 01 00 FF 
04450     7F 14 06 F6 | 	mov	arg02, ##@LR__4994
04454     0F 13 02 F6 | 	mov	arg01, local01
04458     E0 A6 B1 FD | 	call	#__system___string_cmp
0445c     00 FA 0D F2 | 	cmp	result1, #0 wz
04460     3C 03 90 AD |  if_e	jmp	#LR__0331
04464     72 01 00 FF 
04468     83 14 06 F6 | 	mov	arg02, ##@LR__4995
0446c     0F 13 02 F6 | 	mov	arg01, local01
04470     C8 A6 B1 FD | 	call	#__system___string_cmp
04474     00 FA 0D F2 | 	cmp	result1, #0 wz
04478     2C 03 90 AD |  if_e	jmp	#LR__0332
0447c     72 01 00 FF 
04480     8B 14 06 F6 | 	mov	arg02, ##@LR__4996
04484     0F 13 02 F6 | 	mov	arg01, local01
04488     B0 A6 B1 FD | 	call	#__system___string_cmp
0448c     00 FA 0D F2 | 	cmp	result1, #0 wz
04490     1C 03 90 AD |  if_e	jmp	#LR__0333
04494     72 01 00 FF 
04498     8F 14 06 F6 | 	mov	arg02, ##@LR__4997
0449c     0F 13 02 F6 | 	mov	arg01, local01
044a0     98 A6 B1 FD | 	call	#__system___string_cmp
044a4     00 FA 0D F2 | 	cmp	result1, #0 wz
044a8     0C 03 90 AD |  if_e	jmp	#LR__0334
044ac     72 01 00 FF 
044b0     95 14 06 F6 | 	mov	arg02, ##@LR__4998
044b4     0F 13 02 F6 | 	mov	arg01, local01
044b8     80 A6 B1 FD | 	call	#__system___string_cmp
044bc     00 FA 0D F2 | 	cmp	result1, #0 wz
044c0     FC 02 90 AD |  if_e	jmp	#LR__0335
044c4     00 03 90 FD | 	jmp	#LR__0336
044c8                 | LR__0240
044c8     5C FA 05 F6 | 	mov	result1, #92
044cc     FC 02 90 FD | 	jmp	#LR__0337
044d0                 | LR__0241
044d0     5C FA 05 F6 | 	mov	result1, #92
044d4     F4 02 90 FD | 	jmp	#LR__0337
044d8                 | LR__0242
044d8     47 FA 05 F6 | 	mov	result1, #71
044dc     EC 02 90 FD | 	jmp	#LR__0337
044e0                 | LR__0243
044e0     59 FA 05 F6 | 	mov	result1, #89
044e4     E4 02 90 FD | 	jmp	#LR__0337
044e8                 | LR__0244
044e8     59 FA 05 F6 | 	mov	result1, #89
044ec     DC 02 90 FD | 	jmp	#LR__0337
044f0                 | LR__0245
044f0     45 FA 05 F6 | 	mov	result1, #69
044f4     D4 02 90 FD | 	jmp	#LR__0337
044f8                 | LR__0246
044f8     45 FA 05 F6 | 	mov	result1, #69
044fc     CC 02 90 FD | 	jmp	#LR__0337
04500                 | LR__0247
04500     69 FA 05 F6 | 	mov	result1, #105
04504     C4 02 90 FD | 	jmp	#LR__0337
04508                 | LR__0248
04508     40 FA 05 F6 | 	mov	result1, #64
0450c     BC 02 90 FD | 	jmp	#LR__0337
04510                 | LR__0249
04510     49 FA 05 F6 | 	mov	result1, #73
04514     B4 02 90 FD | 	jmp	#LR__0337
04518                 | LR__0250
04518     49 FA 05 F6 | 	mov	result1, #73
0451c     AC 02 90 FD | 	jmp	#LR__0337
04520                 | LR__0251
04520     50 FA 05 F6 | 	mov	result1, #80
04524     A4 02 90 FD | 	jmp	#LR__0337
04528                 | LR__0252
04528     50 FA 05 F6 | 	mov	result1, #80
0452c     9C 02 90 FD | 	jmp	#LR__0337
04530                 | LR__0253
04530     68 FA 05 F6 | 	mov	result1, #104
04534     94 02 90 FD | 	jmp	#LR__0337
04538                 | LR__0254
04538     73 FA 05 F6 | 	mov	result1, #115
0453c     8C 02 90 FD | 	jmp	#LR__0337
04540                 | LR__0255
04540     74 FA 05 F6 | 	mov	result1, #116
04544     84 02 90 FD | 	jmp	#LR__0337
04548                 | LR__0256
04548     6C FA 05 F6 | 	mov	result1, #108
0454c     7C 02 90 FD | 	jmp	#LR__0337
04550                 | LR__0257
04550     6C FA 05 F6 | 	mov	result1, #108
04554     74 02 90 FD | 	jmp	#LR__0337
04558                 | LR__0258
04558     89 FA 05 F6 | 	mov	result1, #137
0455c     6C 02 90 FD | 	jmp	#LR__0337
04560                 | LR__0259
04560     72 FA 05 F6 | 	mov	result1, #114
04564     64 02 90 FD | 	jmp	#LR__0337
04568                 | LR__0260
04568     5D FA 05 F6 | 	mov	result1, #93
0456c     5C 02 90 FD | 	jmp	#LR__0337
04570                 | LR__0261
04570     96 FA 05 F6 | 	mov	result1, #150
04574     54 02 90 FD | 	jmp	#LR__0337
04578                 | LR__0262
04578     43 FA 05 F6 | 	mov	result1, #67
0457c     4C 02 90 FD | 	jmp	#LR__0337
04580                 | LR__0263
04580     43 FA 05 F6 | 	mov	result1, #67
04584     44 02 90 FD | 	jmp	#LR__0337
04588                 | LR__0264
04588     5A FA 05 F6 | 	mov	result1, #90
0458c     3C 02 90 FD | 	jmp	#LR__0337
04590                 | LR__0265
04590     AB FA 05 F6 | 	mov	result1, #171
04594     34 02 90 FD | 	jmp	#LR__0337
04598                 | LR__0266
04598     46 FA 05 F6 | 	mov	result1, #70
0459c     2C 02 90 FD | 	jmp	#LR__0337
045a0                 | LR__0267
045a0     46 FA 05 F6 | 	mov	result1, #70
045a4     24 02 90 FD | 	jmp	#LR__0337
045a8                 | LR__0268
045a8     71 FA 05 F6 | 	mov	result1, #113
045ac     1C 02 90 FD | 	jmp	#LR__0337
045b0                 | LR__0269
045b0     71 FA 05 F6 | 	mov	result1, #113
045b4     14 02 90 FD | 	jmp	#LR__0337
045b8                 | LR__0270
045b8     60 FA 05 F6 | 	mov	result1, #96
045bc     0C 02 90 FD | 	jmp	#LR__0337
045c0                 | LR__0271
045c0     4A FA 05 F6 | 	mov	result1, #74
045c4     04 02 90 FD | 	jmp	#LR__0337
045c8                 | LR__0272
045c8     4A FA 05 F6 | 	mov	result1, #74
045cc     FC 01 90 FD | 	jmp	#LR__0337
045d0                 | LR__0273
045d0     48 FA 05 F6 | 	mov	result1, #72
045d4     F4 01 90 FD | 	jmp	#LR__0337
045d8                 | LR__0274
045d8     48 FA 05 F6 | 	mov	result1, #72
045dc     EC 01 90 FD | 	jmp	#LR__0337
045e0                 | LR__0275
045e0     A9 FA 05 F6 | 	mov	result1, #169
045e4     E4 01 90 FD | 	jmp	#LR__0337
045e8                 | LR__0276
045e8     4E FA 05 F6 | 	mov	result1, #78
045ec     DC 01 90 FD | 	jmp	#LR__0337
045f0                 | LR__0277
045f0     4E FA 05 F6 | 	mov	result1, #78
045f4     D4 01 90 FD | 	jmp	#LR__0337
045f8                 | LR__0278
045f8     58 FA 05 F6 | 	mov	result1, #88
045fc     CC 01 90 FD | 	jmp	#LR__0337
04600                 | LR__0279
04600     5F FA 05 F6 | 	mov	result1, #95
04604     C4 01 90 FD | 	jmp	#LR__0337
04608                 | LR__0280
04608     5F FA 05 F6 | 	mov	result1, #95
0460c     BC 01 90 FD | 	jmp	#LR__0337
04610                 | LR__0281
04610     8A FA 05 F6 | 	mov	result1, #138
04614     B4 01 90 FD | 	jmp	#LR__0337
04618                 | LR__0282
04618     4C FA 05 F6 | 	mov	result1, #76
0461c     AC 01 90 FD | 	jmp	#LR__0337
04620                 | LR__0283
04620     4C FA 05 F6 | 	mov	result1, #76
04624     A4 01 90 FD | 	jmp	#LR__0337
04628                 | LR__0284
04628     52 FA 05 F6 | 	mov	result1, #82
0462c     9C 01 90 FD | 	jmp	#LR__0337
04630                 | LR__0285
04630     52 FA 05 F6 | 	mov	result1, #82
04634     94 01 90 FD | 	jmp	#LR__0337
04638                 | LR__0286
04638     97 FA 05 F6 | 	mov	result1, #151
0463c     8C 01 90 FD | 	jmp	#LR__0337
04640                 | LR__0287
04640     61 FA 05 F6 | 	mov	result1, #97
04644     84 01 90 FD | 	jmp	#LR__0337
04648                 | LR__0288
04648     61 FA 05 F6 | 	mov	result1, #97
0464c     7C 01 90 FD | 	jmp	#LR__0337
04650                 | LR__0289
04650     63 FA 05 F6 | 	mov	result1, #99
04654     74 01 90 FD | 	jmp	#LR__0337
04658                 | LR__0290
04658     41 FA 05 F6 | 	mov	result1, #65
0465c     6C 01 90 FD | 	jmp	#LR__0337
04660                 | LR__0291
04660     4B FA 05 F6 | 	mov	result1, #75
04664     64 01 90 FD | 	jmp	#LR__0337
04668                 | LR__0292
04668     4B FA 05 F6 | 	mov	result1, #75
0466c     5C 01 90 FD | 	jmp	#LR__0337
04670                 | LR__0293
04670     5E FA 05 F6 | 	mov	result1, #94
04674     54 01 90 FD | 	jmp	#LR__0337
04678                 | LR__0294
04678     5E FA 05 F6 | 	mov	result1, #94
0467c     4C 01 90 FD | 	jmp	#LR__0337
04680                 | LR__0295
04680     7C FA 05 F6 | 	mov	result1, #124
04684     44 01 90 FD | 	jmp	#LR__0337
04688                 | LR__0296
04688     7E FA 05 F6 | 	mov	result1, #126
0468c     3C 01 90 FD | 	jmp	#LR__0337
04690                 | LR__0297
04690     7D FA 05 F6 | 	mov	result1, #125
04694     34 01 90 FD | 	jmp	#LR__0337
04698                 | LR__0298
04698     7F FA 05 F6 | 	mov	result1, #127
0469c     2C 01 90 FD | 	jmp	#LR__0337
046a0                 | LR__0299
046a0     80 FA 05 F6 | 	mov	result1, #128
046a4     24 01 90 FD | 	jmp	#LR__0337
046a8                 | LR__0300
046a8     55 FA 05 F6 | 	mov	result1, #85
046ac     1C 01 90 FD | 	jmp	#LR__0337
046b0                 | LR__0301
046b0     75 FA 05 F6 | 	mov	result1, #117
046b4     14 01 90 FD | 	jmp	#LR__0337
046b8                 | LR__0302
046b8     75 FA 05 F6 | 	mov	result1, #117
046bc     0C 01 90 FD | 	jmp	#LR__0337
046c0                 | LR__0303
046c0     42 FA 05 F6 | 	mov	result1, #66
046c4     04 01 90 FD | 	jmp	#LR__0337
046c8                 | LR__0304
046c8     42 FA 05 F6 | 	mov	result1, #66
046cc     FC 00 90 FD | 	jmp	#LR__0337
046d0                 | LR__0305
046d0     95 FA 05 F6 | 	mov	result1, #149
046d4     F4 00 90 FD | 	jmp	#LR__0337
046d8                 | LR__0306
046d8     AC FA 05 F6 | 	mov	result1, #172
046dc     EC 00 90 FD | 	jmp	#LR__0337
046e0                 | LR__0307
046e0     81 FA 05 F6 | 	mov	result1, #129
046e4     E4 00 90 FD | 	jmp	#LR__0337
046e8                 | LR__0308
046e8     81 FA 05 F6 | 	mov	result1, #129
046ec     DC 00 90 FD | 	jmp	#LR__0337
046f0                 | LR__0309
046f0     44 FA 05 F6 | 	mov	result1, #68
046f4     D4 00 90 FD | 	jmp	#LR__0337
046f8                 | LR__0310
046f8     44 FA 05 F6 | 	mov	result1, #68
046fc     CC 00 90 FD | 	jmp	#LR__0337
04700                 | LR__0311
04700     88 FA 05 F6 | 	mov	result1, #136
04704     C4 00 90 FD | 	jmp	#LR__0337
04708                 | LR__0312
04708     92 FA 05 F6 | 	mov	result1, #146
0470c     BC 00 90 FD | 	jmp	#LR__0337
04710                 | LR__0313
04710     AA FA 05 F6 | 	mov	result1, #170
04714     B4 00 90 FD | 	jmp	#LR__0337
04718                 | LR__0314
04718     4D FA 05 F6 | 	mov	result1, #77
0471c     AC 00 90 FD | 	jmp	#LR__0337
04720                 | LR__0315
04720     51 FA 05 F6 | 	mov	result1, #81
04724     A4 00 90 FD | 	jmp	#LR__0337
04728                 | LR__0316
04728     51 FA 05 F6 | 	mov	result1, #81
0472c     9C 00 90 FD | 	jmp	#LR__0337
04730                 | LR__0317
04730     8E FA 05 F6 | 	mov	result1, #142
04734     94 00 90 FD | 	jmp	#LR__0337
04738                 | LR__0318
04738     90 FA 05 F6 | 	mov	result1, #144
0473c     8C 00 90 FD | 	jmp	#LR__0337
04740                 | LR__0319
04740     8D FA 05 F6 | 	mov	result1, #141
04744     84 00 90 FD | 	jmp	#LR__0337
04748                 | LR__0320
04748     8C FA 05 F6 | 	mov	result1, #140
0474c     7C 00 90 FD | 	jmp	#LR__0337
04750                 | LR__0321
04750     91 FA 05 F6 | 	mov	result1, #145
04754     74 00 90 FD | 	jmp	#LR__0337
04758                 | LR__0322
04758     8B FA 05 F6 | 	mov	result1, #139
0475c     6C 00 90 FD | 	jmp	#LR__0337
04760                 | LR__0323
04760     8F FA 05 F6 | 	mov	result1, #143
04764     64 00 90 FD | 	jmp	#LR__0337
04768                 | LR__0324
04768     75 FA 05 F6 | 	mov	result1, #117
0476c     5C 00 90 FD | 	jmp	#LR__0337
04770                 | LR__0325
04770     75 FA 05 F6 | 	mov	result1, #117
04774     54 00 90 FD | 	jmp	#LR__0337
04778                 | LR__0326
04778     6D FA 05 F6 | 	mov	result1, #109
0477c     4C 00 90 FD | 	jmp	#LR__0337
04780                 | LR__0327
04780     6D FA 05 F6 | 	mov	result1, #109
04784     44 00 90 FD | 	jmp	#LR__0337
04788                 | LR__0328
04788     5B FA 05 F6 | 	mov	result1, #91
0478c     3C 00 90 FD | 	jmp	#LR__0337
04790                 | LR__0329
04790     56 FA 05 F6 | 	mov	result1, #86
04794     34 00 90 FD | 	jmp	#LR__0337
04798                 | LR__0330
04798     70 FA 05 F6 | 	mov	result1, #112
0479c     2C 00 90 FD | 	jmp	#LR__0337
047a0                 | LR__0331
047a0     70 FA 05 F6 | 	mov	result1, #112
047a4     24 00 90 FD | 	jmp	#LR__0337
047a8                 | LR__0332
047a8     57 FA 05 F6 | 	mov	result1, #87
047ac     1C 00 90 FD | 	jmp	#LR__0337
047b0                 | LR__0333
047b0     57 FA 05 F6 | 	mov	result1, #87
047b4     14 00 90 FD | 	jmp	#LR__0337
047b8                 | LR__0334
047b8     77 FA 05 F6 | 	mov	result1, #119
047bc     0C 00 90 FD | 	jmp	#LR__0337
047c0                 | LR__0335
047c0     78 FA 05 F6 | 	mov	result1, #120
047c4     04 00 90 FD | 	jmp	#LR__0337
047c8                 | LR__0336
047c8     00 FA 05 F6 | 	mov	result1, #0
047cc                 | LR__0337
047cc     A7 F0 03 F6 | 	mov	ptra, fp
047d0     B2 00 A0 FD | 	call	#popregs_
047d4                 | _iscommand_ret
047d4     2D 00 64 FD | 	ret
047d8                 | 
047d8                 | ' 
047d8                 | ' function isfunction(s as string) as ubyte
047d8                 | _isfunction
047d8     01 4A 05 F6 | 	mov	COUNT_, #1
047dc     A8 00 A0 FD | 	call	#pushregs_
047e0                 | ' 
047e0                 | ' select case s
047e0     09 1F 02 F6 | 	mov	local01, arg01
047e4     72 01 00 FF 
047e8     9B 14 06 F6 | 	mov	arg02, ##@LR__4999
047ec     0F 13 02 F6 | 	mov	arg01, local01
047f0     48 A3 B1 FD | 	call	#__system___string_cmp
047f4     00 FA 0D F2 | 	cmp	result1, #0 wz
047f8     C4 03 90 AD |  if_e	jmp	#LR__0340
047fc     72 01 00 FF 
04800     9F 14 06 F6 | 	mov	arg02, ##@LR__5000
04804     0F 13 02 F6 | 	mov	arg01, local01
04808     30 A3 B1 FD | 	call	#__system___string_cmp
0480c     00 FA 0D F2 | 	cmp	result1, #0 wz
04810     B4 03 90 AD |  if_e	jmp	#LR__0341
04814     72 01 00 FF 
04818     A4 14 06 F6 | 	mov	arg02, ##@LR__5001
0481c     0F 13 02 F6 | 	mov	arg01, local01
04820     18 A3 B1 FD | 	call	#__system___string_cmp
04824     00 FA 0D F2 | 	cmp	result1, #0 wz
04828     A4 03 90 AD |  if_e	jmp	#LR__0342
0482c     72 01 00 FF 
04830     A8 14 06 F6 | 	mov	arg02, ##@LR__5002
04834     0F 13 02 F6 | 	mov	arg01, local01
04838     00 A3 B1 FD | 	call	#__system___string_cmp
0483c     00 FA 0D F2 | 	cmp	result1, #0 wz
04840     94 03 90 AD |  if_e	jmp	#LR__0343
04844     72 01 00 FF 
04848     AD 14 06 F6 | 	mov	arg02, ##@LR__5003
0484c     0F 13 02 F6 | 	mov	arg01, local01
04850     E8 A2 B1 FD | 	call	#__system___string_cmp
04854     00 FA 0D F2 | 	cmp	result1, #0 wz
04858     84 03 90 AD |  if_e	jmp	#LR__0344
0485c     72 01 00 FF 
04860     B1 14 06 F6 | 	mov	arg02, ##@LR__5004
04864     0F 13 02 F6 | 	mov	arg01, local01
04868     D0 A2 B1 FD | 	call	#__system___string_cmp
0486c     00 FA 0D F2 | 	cmp	result1, #0 wz
04870     74 03 90 AD |  if_e	jmp	#LR__0345
04874     72 01 00 FF 
04878     B6 14 06 F6 | 	mov	arg02, ##@LR__5005
0487c     0F 13 02 F6 | 	mov	arg01, local01
04880     B8 A2 B1 FD | 	call	#__system___string_cmp
04884     00 FA 0D F2 | 	cmp	result1, #0 wz
04888     64 03 90 AD |  if_e	jmp	#LR__0346
0488c     72 01 00 FF 
04890     BA 14 06 F6 | 	mov	arg02, ##@LR__5006
04894     0F 13 02 F6 | 	mov	arg01, local01
04898     A0 A2 B1 FD | 	call	#__system___string_cmp
0489c     00 FA 0D F2 | 	cmp	result1, #0 wz
048a0     54 03 90 AD |  if_e	jmp	#LR__0347
048a4     72 01 00 FF 
048a8     BF 14 06 F6 | 	mov	arg02, ##@LR__5007
048ac     0F 13 02 F6 | 	mov	arg01, local01
048b0     88 A2 B1 FD | 	call	#__system___string_cmp
048b4     00 FA 0D F2 | 	cmp	result1, #0 wz
048b8     44 03 90 AD |  if_e	jmp	#LR__0348
048bc     72 01 00 FF 
048c0     C4 14 06 F6 | 	mov	arg02, ##@LR__5008
048c4     0F 13 02 F6 | 	mov	arg01, local01
048c8     70 A2 B1 FD | 	call	#__system___string_cmp
048cc     00 FA 0D F2 | 	cmp	result1, #0 wz
048d0     34 03 90 AD |  if_e	jmp	#LR__0349
048d4     72 01 00 FF 
048d8     C8 14 06 F6 | 	mov	arg02, ##@LR__5009
048dc     0F 13 02 F6 | 	mov	arg01, local01
048e0     58 A2 B1 FD | 	call	#__system___string_cmp
048e4     00 FA 0D F2 | 	cmp	result1, #0 wz
048e8     24 03 90 AD |  if_e	jmp	#LR__0350
048ec     72 01 00 FF 
048f0     CE 14 06 F6 | 	mov	arg02, ##@LR__5010
048f4     0F 13 02 F6 | 	mov	arg01, local01
048f8     40 A2 B1 FD | 	call	#__system___string_cmp
048fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04900     14 03 90 AD |  if_e	jmp	#LR__0351
04904     72 01 00 FF 
04908     D2 14 06 F6 | 	mov	arg02, ##@LR__5011
0490c     0F 13 02 F6 | 	mov	arg01, local01
04910     28 A2 B1 FD | 	call	#__system___string_cmp
04914     00 FA 0D F2 | 	cmp	result1, #0 wz
04918     04 03 90 AD |  if_e	jmp	#LR__0352
0491c     72 01 00 FF 
04920     DB 14 06 F6 | 	mov	arg02, ##@LR__5012
04924     0F 13 02 F6 | 	mov	arg01, local01
04928     10 A2 B1 FD | 	call	#__system___string_cmp
0492c     00 FA 0D F2 | 	cmp	result1, #0 wz
04930     F4 02 90 AD |  if_e	jmp	#LR__0353
04934     72 01 00 FF 
04938     DF 14 06 F6 | 	mov	arg02, ##@LR__5013
0493c     0F 13 02 F6 | 	mov	arg01, local01
04940     F8 A1 B1 FD | 	call	#__system___string_cmp
04944     00 FA 0D F2 | 	cmp	result1, #0 wz
04948     E4 02 90 AD |  if_e	jmp	#LR__0354
0494c     72 01 00 FF 
04950     ED 14 06 F6 | 	mov	arg02, ##@LR__5014
04954     0F 13 02 F6 | 	mov	arg01, local01
04958     E0 A1 B1 FD | 	call	#__system___string_cmp
0495c     00 FA 0D F2 | 	cmp	result1, #0 wz
04960     D4 02 90 AD |  if_e	jmp	#LR__0355
04964     72 01 00 FF 
04968     FA 14 06 F6 | 	mov	arg02, ##@LR__5015
0496c     0F 13 02 F6 | 	mov	arg01, local01
04970     C8 A1 B1 FD | 	call	#__system___string_cmp
04974     00 FA 0D F2 | 	cmp	result1, #0 wz
04978     C4 02 90 AD |  if_e	jmp	#LR__0356
0497c     72 01 00 FF 
04980     02 15 06 F6 | 	mov	arg02, ##@LR__5016
04984     0F 13 02 F6 | 	mov	arg01, local01
04988     B0 A1 B1 FD | 	call	#__system___string_cmp
0498c     00 FA 0D F2 | 	cmp	result1, #0 wz
04990     B4 02 90 AD |  if_e	jmp	#LR__0357
04994     72 01 00 FF 
04998     07 15 06 F6 | 	mov	arg02, ##@LR__5017
0499c     0F 13 02 F6 | 	mov	arg01, local01
049a0     98 A1 B1 FD | 	call	#__system___string_cmp
049a4     00 FA 0D F2 | 	cmp	result1, #0 wz
049a8     A4 02 90 AD |  if_e	jmp	#LR__0358
049ac     72 01 00 FF 
049b0     0E 15 06 F6 | 	mov	arg02, ##@LR__5018
049b4     0F 13 02 F6 | 	mov	arg01, local01
049b8     80 A1 B1 FD | 	call	#__system___string_cmp
049bc     00 FA 0D F2 | 	cmp	result1, #0 wz
049c0     94 02 90 AD |  if_e	jmp	#LR__0359
049c4     72 01 00 FF 
049c8     14 15 06 F6 | 	mov	arg02, ##@LR__5019
049cc     0F 13 02 F6 | 	mov	arg01, local01
049d0     68 A1 B1 FD | 	call	#__system___string_cmp
049d4     00 FA 0D F2 | 	cmp	result1, #0 wz
049d8     84 02 90 AD |  if_e	jmp	#LR__0360
049dc     72 01 00 FF 
049e0     18 15 06 F6 | 	mov	arg02, ##@LR__5020
049e4     0F 13 02 F6 | 	mov	arg01, local01
049e8     50 A1 B1 FD | 	call	#__system___string_cmp
049ec     00 FA 0D F2 | 	cmp	result1, #0 wz
049f0     74 02 90 AD |  if_e	jmp	#LR__0361
049f4     72 01 00 FF 
049f8     1E 15 06 F6 | 	mov	arg02, ##@LR__5021
049fc     0F 13 02 F6 | 	mov	arg01, local01
04a00     38 A1 B1 FD | 	call	#__system___string_cmp
04a04     00 FA 0D F2 | 	cmp	result1, #0 wz
04a08     64 02 90 AD |  if_e	jmp	#LR__0362
04a0c     72 01 00 FF 
04a10     23 15 06 F6 | 	mov	arg02, ##@LR__5022
04a14     0F 13 02 F6 | 	mov	arg01, local01
04a18     20 A1 B1 FD | 	call	#__system___string_cmp
04a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a20     54 02 90 AD |  if_e	jmp	#LR__0363
04a24     72 01 00 FF 
04a28     2A 15 06 F6 | 	mov	arg02, ##@LR__5023
04a2c     0F 13 02 F6 | 	mov	arg01, local01
04a30     08 A1 B1 FD | 	call	#__system___string_cmp
04a34     00 FA 0D F2 | 	cmp	result1, #0 wz
04a38     44 02 90 AD |  if_e	jmp	#LR__0364
04a3c     72 01 00 FF 
04a40     31 15 06 F6 | 	mov	arg02, ##@LR__5024
04a44     0F 13 02 F6 | 	mov	arg01, local01
04a48     F0 A0 B1 FD | 	call	#__system___string_cmp
04a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a50     34 02 90 AD |  if_e	jmp	#LR__0365
04a54     72 01 00 FF 
04a58     38 15 06 F6 | 	mov	arg02, ##@LR__5025
04a5c     0F 13 02 F6 | 	mov	arg01, local01
04a60     D8 A0 B1 FD | 	call	#__system___string_cmp
04a64     00 FA 0D F2 | 	cmp	result1, #0 wz
04a68     24 02 90 AD |  if_e	jmp	#LR__0366
04a6c     72 01 00 FF 
04a70     3F 15 06 F6 | 	mov	arg02, ##@LR__5026
04a74     0F 13 02 F6 | 	mov	arg01, local01
04a78     C0 A0 B1 FD | 	call	#__system___string_cmp
04a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a80     14 02 90 AD |  if_e	jmp	#LR__0367
04a84     72 01 00 FF 
04a88     44 15 06 F6 | 	mov	arg02, ##@LR__5027
04a8c     0F 13 02 F6 | 	mov	arg01, local01
04a90     A8 A0 B1 FD | 	call	#__system___string_cmp
04a94     00 FA 0D F2 | 	cmp	result1, #0 wz
04a98     04 02 90 AD |  if_e	jmp	#LR__0368
04a9c     72 01 00 FF 
04aa0     4C 15 06 F6 | 	mov	arg02, ##@LR__5028
04aa4     0F 13 02 F6 | 	mov	arg01, local01
04aa8     90 A0 B1 FD | 	call	#__system___string_cmp
04aac     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab0     F4 01 90 AD |  if_e	jmp	#LR__0369
04ab4     72 01 00 FF 
04ab8     52 15 06 F6 | 	mov	arg02, ##@LR__5029
04abc     0F 13 02 F6 | 	mov	arg01, local01
04ac0     78 A0 B1 FD | 	call	#__system___string_cmp
04ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ac8     E4 01 90 AD |  if_e	jmp	#LR__0370
04acc     72 01 00 FF 
04ad0     59 15 06 F6 | 	mov	arg02, ##@LR__5030
04ad4     0F 13 02 F6 | 	mov	arg01, local01
04ad8     60 A0 B1 FD | 	call	#__system___string_cmp
04adc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae0     D4 01 90 AD |  if_e	jmp	#LR__0371
04ae4     72 01 00 FF 
04ae8     5F 15 06 F6 | 	mov	arg02, ##@LR__5031
04aec     0F 13 02 F6 | 	mov	arg01, local01
04af0     48 A0 B1 FD | 	call	#__system___string_cmp
04af4     00 FA 0D F2 | 	cmp	result1, #0 wz
04af8     C4 01 90 AD |  if_e	jmp	#LR__0372
04afc     72 01 00 FF 
04b00     63 15 06 F6 | 	mov	arg02, ##@LR__5032
04b04     0F 13 02 F6 | 	mov	arg01, local01
04b08     30 A0 B1 FD | 	call	#__system___string_cmp
04b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b10     B4 01 90 AD |  if_e	jmp	#LR__0373
04b14     72 01 00 FF 
04b18     67 15 06 F6 | 	mov	arg02, ##@LR__5033
04b1c     0F 13 02 F6 | 	mov	arg01, local01
04b20     18 A0 B1 FD | 	call	#__system___string_cmp
04b24     00 FA 0D F2 | 	cmp	result1, #0 wz
04b28     A4 01 90 AD |  if_e	jmp	#LR__0374
04b2c     72 01 00 FF 
04b30     6B 15 06 F6 | 	mov	arg02, ##@LR__5034
04b34     0F 13 02 F6 | 	mov	arg01, local01
04b38     00 A0 B1 FD | 	call	#__system___string_cmp
04b3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b40     94 01 90 AD |  if_e	jmp	#LR__0375
04b44     72 01 00 FF 
04b48     71 15 06 F6 | 	mov	arg02, ##@LR__5035
04b4c     0F 13 02 F6 | 	mov	arg01, local01
04b50     E8 9F B1 FD | 	call	#__system___string_cmp
04b54     00 FA 0D F2 | 	cmp	result1, #0 wz
04b58     84 01 90 AD |  if_e	jmp	#LR__0376
04b5c     72 01 00 FF 
04b60     77 15 06 F6 | 	mov	arg02, ##@LR__5036
04b64     0F 13 02 F6 | 	mov	arg01, local01
04b68     D0 9F B1 FD | 	call	#__system___string_cmp
04b6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04b70     74 01 90 AD |  if_e	jmp	#LR__0377
04b74     72 01 00 FF 
04b78     7C 15 06 F6 | 	mov	arg02, ##@LR__5037
04b7c     0F 13 02 F6 | 	mov	arg01, local01
04b80     B8 9F B1 FD | 	call	#__system___string_cmp
04b84     00 FA 0D F2 | 	cmp	result1, #0 wz
04b88     64 01 90 AD |  if_e	jmp	#LR__0378
04b8c     72 01 00 FF 
04b90     80 15 06 F6 | 	mov	arg02, ##@LR__5038
04b94     0F 13 02 F6 | 	mov	arg01, local01
04b98     A0 9F B1 FD | 	call	#__system___string_cmp
04b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04ba0     54 01 90 AD |  if_e	jmp	#LR__0379
04ba4     72 01 00 FF 
04ba8     84 15 06 F6 | 	mov	arg02, ##@LR__5039
04bac     0F 13 02 F6 | 	mov	arg01, local01
04bb0     88 9F B1 FD | 	call	#__system___string_cmp
04bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04bb8     44 01 90 AD |  if_e	jmp	#LR__0380
04bbc     48 01 90 FD | 	jmp	#LR__0381
04bc0                 | LR__0340
04bc0     9E FA 05 F6 | 	mov	result1, #158
04bc4     44 01 90 FD | 	jmp	#LR__0382
04bc8                 | LR__0341
04bc8     85 FA 05 F6 | 	mov	result1, #133
04bcc     3C 01 90 FD | 	jmp	#LR__0382
04bd0                 | LR__0342
04bd0     9B FA 05 F6 | 	mov	result1, #155
04bd4     34 01 90 FD | 	jmp	#LR__0382
04bd8                 | LR__0343
04bd8     9B FA 05 F6 | 	mov	result1, #155
04bdc     2C 01 90 FD | 	jmp	#LR__0382
04be0                 | LR__0344
04be0     A7 FA 05 F6 | 	mov	result1, #167
04be4     24 01 90 FD | 	jmp	#LR__0382
04be8                 | LR__0345
04be8     84 FA 05 F6 | 	mov	result1, #132
04bec     1C 01 90 FD | 	jmp	#LR__0382
04bf0                 | LR__0346
04bf0     86 FA 05 F6 | 	mov	result1, #134
04bf4     14 01 90 FD | 	jmp	#LR__0382
04bf8                 | LR__0347
04bf8     A2 FA 05 F6 | 	mov	result1, #162
04bfc     0C 01 90 FD | 	jmp	#LR__0382
04c00                 | LR__0348
04c00     9F FA 05 F6 | 	mov	result1, #159
04c04     04 01 90 FD | 	jmp	#LR__0382
04c08                 | LR__0349
04c08     82 FA 05 F6 | 	mov	result1, #130
04c0c     FC 00 90 FD | 	jmp	#LR__0382
04c10                 | LR__0350
04c10     99 FA 05 F6 | 	mov	result1, #153
04c14     F4 00 90 FD | 	jmp	#LR__0382
04c18                 | LR__0351
04c18     9C FA 05 F6 | 	mov	result1, #156
04c1c     EC 00 90 FD | 	jmp	#LR__0382
04c20                 | LR__0352
04c20     6F FA 05 F6 | 	mov	result1, #111
04c24     E4 00 90 FD | 	jmp	#LR__0382
04c28                 | LR__0353
04c28     6F FA 05 F6 | 	mov	result1, #111
04c2c     DC 00 90 FD | 	jmp	#LR__0382
04c30                 | LR__0354
04c30     93 FA 05 F6 | 	mov	result1, #147
04c34     D4 00 90 FD | 	jmp	#LR__0382
04c38                 | LR__0355
04c38     94 FA 05 F6 | 	mov	result1, #148
04c3c     CC 00 90 FD | 	jmp	#LR__0382
04c40                 | LR__0356
04c40     62 FA 05 F6 | 	mov	result1, #98
04c44     C4 00 90 FD | 	jmp	#LR__0382
04c48                 | LR__0357
04c48     A3 FA 05 F6 | 	mov	result1, #163
04c4c     BC 00 90 FD | 	jmp	#LR__0382
04c50                 | LR__0358
04c50     9D FA 05 F6 | 	mov	result1, #157
04c54     B4 00 90 FD | 	jmp	#LR__0382
04c58                 | LR__0359
04c58     A4 FA 05 F6 | 	mov	result1, #164
04c5c     AC 00 90 FD | 	jmp	#LR__0382
04c60                 | LR__0360
04c60     A8 FA 05 F6 | 	mov	result1, #168
04c64     A4 00 90 FD | 	jmp	#LR__0382
04c68                 | LR__0361
04c68     9A FA 05 F6 | 	mov	result1, #154
04c6c     9C 00 90 FD | 	jmp	#LR__0382
04c70                 | LR__0362
04c70     A6 FA 05 F6 | 	mov	result1, #166
04c74     94 00 90 FD | 	jmp	#LR__0382
04c78                 | LR__0363
04c78     66 FA 05 F6 | 	mov	result1, #102
04c7c     8C 00 90 FD | 	jmp	#LR__0382
04c80                 | LR__0364
04c80     67 FA 05 F6 | 	mov	result1, #103
04c84     84 00 90 FD | 	jmp	#LR__0382
04c88                 | LR__0365
04c88     64 FA 05 F6 | 	mov	result1, #100
04c8c     7C 00 90 FD | 	jmp	#LR__0382
04c90                 | LR__0366
04c90     65 FA 05 F6 | 	mov	result1, #101
04c94     74 00 90 FD | 	jmp	#LR__0382
04c98                 | LR__0367
04c98     98 FA 05 F6 | 	mov	result1, #152
04c9c     6C 00 90 FD | 	jmp	#LR__0382
04ca0                 | LR__0368
04ca0     7B FA 05 F6 | 	mov	result1, #123
04ca4     64 00 90 FD | 	jmp	#LR__0382
04ca8                 | LR__0369
04ca8     76 FA 05 F6 | 	mov	result1, #118
04cac     5C 00 90 FD | 	jmp	#LR__0382
04cb0                 | LR__0370
04cb0     A5 FA 05 F6 | 	mov	result1, #165
04cb4     54 00 90 FD | 	jmp	#LR__0382
04cb8                 | LR__0371
04cb8     7A FA 05 F6 | 	mov	result1, #122
04cbc     4C 00 90 FD | 	jmp	#LR__0382
04cc0                 | LR__0372
04cc0     54 FA 05 F6 | 	mov	result1, #84
04cc4     44 00 90 FD | 	jmp	#LR__0382
04cc8                 | LR__0373
04cc8     6B FA 05 F6 | 	mov	result1, #107
04ccc     3C 00 90 FD | 	jmp	#LR__0382
04cd0                 | LR__0374
04cd0     87 FA 05 F6 | 	mov	result1, #135
04cd4     34 00 90 FD | 	jmp	#LR__0382
04cd8                 | LR__0375
04cd8     6A FA 05 F6 | 	mov	result1, #106
04cdc     2C 00 90 FD | 	jmp	#LR__0382
04ce0                 | LR__0376
04ce0     6E FA 05 F6 | 	mov	result1, #110
04ce4     24 00 90 FD | 	jmp	#LR__0382
04ce8                 | LR__0377
04ce8     A1 FA 05 F6 | 	mov	result1, #161
04cec     1C 00 90 FD | 	jmp	#LR__0382
04cf0                 | LR__0378
04cf0     83 FA 05 F6 | 	mov	result1, #131
04cf4     14 00 90 FD | 	jmp	#LR__0382
04cf8                 | LR__0379
04cf8     A0 FA 05 F6 | 	mov	result1, #160
04cfc     0C 00 90 FD | 	jmp	#LR__0382
04d00                 | LR__0380
04d00     9B FA 05 F6 | 	mov	result1, #155
04d04     04 00 90 FD | 	jmp	#LR__0382
04d08                 | LR__0381
04d08     00 FA 05 F6 | 	mov	result1, #0
04d0c                 | LR__0382
04d0c     A7 F0 03 F6 | 	mov	ptra, fp
04d10     B2 00 A0 FD | 	call	#popregs_
04d14                 | _isfunction_ret
04d14     2D 00 64 FD | 	ret
04d18                 | 
04d18                 | ' 
04d18                 | ' function isname(s as string) as boolean
04d18                 | _isname
04d18     0D 4A 05 F6 | 	mov	COUNT_, #13
04d1c     A8 00 A0 FD | 	call	#pushregs_
04d20     09 1F 02 F6 | 	mov	local01, arg01
04d24     09 21 02 F6 | 	mov	local02, arg01
04d28     97 06 48 FB | 	callpa	#(@LR__0391-@LR__0390)>>2,fcache_load_ptr_
04d2c                 | LR__0390
04d2c     10 FB C9 FA | 	rdbyte	result1, local02 wz
04d30     01 20 06 51 |  if_ne	add	local02, #1
04d34     F4 FF 9F 5D |  if_ne	jmp	#LR__0390
04d38                 | LR__0391
04d38     09 21 82 F1 | 	sub	local02, arg01
04d3c     10 FB 01 F6 | 	mov	result1, local02
04d40     FD 22 0A F6 | 	mov	local03, result1 wz
04d44     00 FA 05 A6 |  if_e	mov	result1, #0
04d48     34 02 90 AD |  if_e	jmp	#LR__0403
04d4c     0F 13 02 F6 | 	mov	arg01, local01
04d50     01 14 06 F6 | 	mov	arg02, #1
04d54     01 16 06 F6 | 	mov	arg03, #1
04d58     E0 BE B1 FD | 	call	#__system__Mid_S
04d5c     FD 24 02 F6 | 	mov	local04, result1
04d60                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
04d60     72 01 00 FF 
04d64     8B 15 06 F6 | 	mov	arg02, ##@LR__5040
04d68     12 13 02 F6 | 	mov	arg01, local04
04d6c     CC 9D B1 FD | 	call	#__system___string_cmp
04d70     00 FA 55 F2 | 	cmps	result1, #0 wc
04d74     18 00 90 CD |  if_b	jmp	#LR__0392
04d78     72 01 00 FF 
04d7c     8D 15 06 F6 | 	mov	arg02, ##@LR__5041
04d80     12 13 02 F6 | 	mov	arg01, local04
04d84     B4 9D B1 FD | 	call	#__system___string_cmp
04d88     01 FA 55 F2 | 	cmps	result1, #1 wc
04d8c     1C 00 90 CD |  if_b	jmp	#LR__0393
04d90                 | LR__0392
04d90     72 01 00 FF 
04d94     8F 15 06 F6 | 	mov	arg02, ##@LR__5042
04d98     12 13 02 F6 | 	mov	arg01, local04
04d9c     9C 9D B1 FD | 	call	#__system___string_cmp
04da0     00 FA 0D F2 | 	cmp	result1, #0 wz
04da4     00 FA 05 56 |  if_ne	mov	result1, #0
04da8     D4 01 90 5D |  if_ne	jmp	#LR__0403
04dac                 | LR__0393
04dac                 | ' if l>2 then 
04dac     03 22 56 F2 | 	cmps	local03, #3 wc
04db0     C8 01 90 CD |  if_b	jmp	#LR__0402
04db4                 | '   for i=2 to l
04db4     02 26 06 F6 | 	mov	local05, #2
04db8     11 29 02 F6 | 	mov	local06, local03
04dbc     01 28 06 F1 | 	add	local06, #1
04dc0                 | LR__0394
04dc0     14 27 52 F2 | 	cmps	local05, local06 wc
04dc4     B4 01 90 3D |  if_ae	jmp	#LR__0401
04dc8     0F 13 02 F6 | 	mov	arg01, local01
04dcc     13 15 02 F6 | 	mov	arg02, local05
04dd0     01 16 06 F6 | 	mov	arg03, #1
04dd4     64 BE B1 FD | 	call	#__system__Mid_S
04dd8     FD 24 02 F6 | 	mov	local04, result1
04ddc                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
04ddc     11 27 52 F2 | 	cmps	local05, local03 wc
04de0     9C 00 90 3D |  if_ae	jmp	#LR__0397
04de4     72 01 00 FF 
04de8     91 15 06 F6 | 	mov	arg02, ##@LR__5043
04dec     12 13 02 F6 | 	mov	arg01, local04
04df0     48 9D B1 FD | 	call	#__system___string_cmp
04df4     00 FA 55 F2 | 	cmps	result1, #0 wc
04df8     18 00 90 CD |  if_b	jmp	#LR__0395
04dfc     72 01 00 FF 
04e00     93 15 06 F6 | 	mov	arg02, ##@LR__5044
04e04     12 13 02 F6 | 	mov	arg01, local04
04e08     30 9D B1 FD | 	call	#__system___string_cmp
04e0c     01 FA 55 F2 | 	cmps	result1, #1 wc
04e10     6C 00 90 CD |  if_b	jmp	#LR__0397
04e14                 | LR__0395
04e14     72 01 00 FF 
04e18     95 15 06 F6 | 	mov	arg02, ##@LR__5045
04e1c     12 13 02 F6 | 	mov	arg01, local04
04e20     18 9D B1 FD | 	call	#__system___string_cmp
04e24     00 FA 55 F2 | 	cmps	result1, #0 wc
04e28     18 00 90 CD |  if_b	jmp	#LR__0396
04e2c     72 01 00 FF 
04e30     97 15 06 F6 | 	mov	arg02, ##@LR__5046
04e34     12 13 02 F6 | 	mov	arg01, local04
04e38     00 9D B1 FD | 	call	#__system___string_cmp
04e3c     01 FA 55 F2 | 	cmps	result1, #1 wc
04e40     3C 00 90 CD |  if_b	jmp	#LR__0397
04e44                 | LR__0396
04e44     72 01 00 FF 
04e48     99 2B 06 F6 | 	mov	local07, ##@LR__5047
04e4c     12 13 02 F6 | 	mov	arg01, local04
04e50     15 15 02 F6 | 	mov	arg02, local07
04e54     E4 9C B1 FD | 	call	#__system___string_cmp
04e58     00 FA 0D F2 | 	cmp	result1, #0 wz
04e5c     20 00 90 AD |  if_e	jmp	#LR__0397
04e60     72 01 00 FF 
04e64     9B 2D 06 F6 | 	mov	local08, ##@LR__5048
04e68     12 13 02 F6 | 	mov	arg01, local04
04e6c     16 15 02 F6 | 	mov	arg02, local08
04e70     C8 9C B1 FD | 	call	#__system___string_cmp
04e74     FD 2E 0A F6 | 	mov	local09, result1 wz
04e78     00 FA 05 56 |  if_ne	mov	result1, #0
04e7c     00 01 90 5D |  if_ne	jmp	#LR__0403
04e80                 | LR__0397
04e80                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
04e80     11 27 0A F2 | 	cmp	local05, local03 wz
04e84     EC 00 90 5D |  if_ne	jmp	#LR__0400
04e88     72 01 00 FF 
04e8c     9D 31 06 F6 | 	mov	local10, ##@LR__5049
04e90     12 13 02 F6 | 	mov	arg01, local04
04e94     18 15 02 F6 | 	mov	arg02, local10
04e98     A0 9C B1 FD | 	call	#__system___string_cmp
04e9c     FD 32 02 F6 | 	mov	local11, result1
04ea0     00 32 56 F2 | 	cmps	local11, #0 wc
04ea4     1C 00 90 CD |  if_b	jmp	#LR__0398
04ea8     72 01 00 FF 
04eac     9F 15 06 F6 | 	mov	arg02, ##@LR__5050
04eb0     12 13 02 F6 | 	mov	arg01, local04
04eb4     84 9C B1 FD | 	call	#__system___string_cmp
04eb8     FD 30 02 F6 | 	mov	local10, result1
04ebc     01 30 56 F2 | 	cmps	local10, #1 wc
04ec0     B0 00 90 CD |  if_b	jmp	#LR__0400
04ec4                 | LR__0398
04ec4     72 01 00 FF 
04ec8     A1 15 06 F6 | 	mov	arg02, ##@LR__5051
04ecc     12 13 02 F6 | 	mov	arg01, local04
04ed0     68 9C B1 FD | 	call	#__system___string_cmp
04ed4     00 FA 55 F2 | 	cmps	result1, #0 wc
04ed8     1C 00 90 CD |  if_b	jmp	#LR__0399
04edc     72 01 00 FF 
04ee0     A3 2F 06 F6 | 	mov	local09, ##@LR__5052
04ee4     12 13 02 F6 | 	mov	arg01, local04
04ee8     17 15 02 F6 | 	mov	arg02, local09
04eec     4C 9C B1 FD | 	call	#__system___string_cmp
04ef0     01 FA 55 F2 | 	cmps	result1, #1 wc
04ef4     7C 00 90 CD |  if_b	jmp	#LR__0400
04ef8                 | LR__0399
04ef8     72 01 00 FF 
04efc     A5 2F 06 F6 | 	mov	local09, ##@LR__5053
04f00     12 13 02 F6 | 	mov	arg01, local04
04f04     17 15 02 F6 | 	mov	arg02, local09
04f08     30 9C B1 FD | 	call	#__system___string_cmp
04f0c     00 FA 4D F2 | 	cmps	result1, #0 wz
04f10     60 00 90 AD |  if_e	jmp	#LR__0400
04f14     72 01 00 FF 
04f18     A7 2D 06 F6 | 	mov	local08, ##@LR__5054
04f1c     12 13 02 F6 | 	mov	arg01, local04
04f20     16 15 02 F6 | 	mov	arg02, local08
04f24     14 9C B1 FD | 	call	#__system___string_cmp
04f28     FD 2E 0A F6 | 	mov	local09, result1 wz
04f2c     44 00 90 AD |  if_e	jmp	#LR__0400
04f30     72 01 00 FF 
04f34     A9 35 06 F6 | 	mov	local12, ##@LR__5055
04f38     1A 2D 02 F6 | 	mov	local08, local12
04f3c     12 13 02 F6 | 	mov	arg01, local04
04f40     16 15 02 F6 | 	mov	arg02, local08
04f44     F4 9B B1 FD | 	call	#__system___string_cmp
04f48     FD 2A 0A F6 | 	mov	local07, result1 wz
04f4c     24 00 90 AD |  if_e	jmp	#LR__0400
04f50     72 01 00 FF 
04f54     AB 37 06 F6 | 	mov	local13, ##@LR__5056
04f58     1B 35 02 F6 | 	mov	local12, local13
04f5c     12 13 02 F6 | 	mov	arg01, local04
04f60     1A 15 02 F6 | 	mov	arg02, local12
04f64     D4 9B B1 FD | 	call	#__system___string_cmp
04f68     FD 2C 0A F6 | 	mov	local08, result1 wz
04f6c     00 FA 05 56 |  if_ne	mov	result1, #0
04f70     0C 00 90 5D |  if_ne	jmp	#LR__0403
04f74                 | LR__0400
04f74     01 26 06 F1 | 	add	local05, #1
04f78     44 FE 9F FD | 	jmp	#LR__0394
04f7c                 | LR__0401
04f7c                 | LR__0402
04f7c                 | ' return true
04f7c     01 FA 65 F6 | 	neg	result1, #1
04f80                 | LR__0403
04f80     A7 F0 03 F6 | 	mov	ptra, fp
04f84     B2 00 A0 FD | 	call	#popregs_
04f88                 | _isname_ret
04f88     2D 00 64 FD | 	ret
04f8c                 | 
04f8c                 | ' 
04f8c                 | ' function isnum(s as string) as boolean
04f8c                 | _isnum
04f8c     0D 4A 05 F6 | 	mov	COUNT_, #13
04f90     A8 00 A0 FD | 	call	#pushregs_
04f94     09 1F 02 F6 | 	mov	local01, arg01
04f98     00 20 06 F6 | 	mov	local02, #0
04f9c     00 22 06 F6 | 	mov	local03, #0
04fa0     0F 13 02 F6 | 	mov	arg01, local01
04fa4     09 25 02 F6 | 	mov	local04, arg01
04fa8     97 06 48 FB | 	callpa	#(@LR__0411-@LR__0410)>>2,fcache_load_ptr_
04fac                 | LR__0410
04fac     12 FB C9 FA | 	rdbyte	result1, local04 wz
04fb0     01 24 06 51 |  if_ne	add	local04, #1
04fb4     F4 FF 9F 5D |  if_ne	jmp	#LR__0410
04fb8                 | LR__0411
04fb8     09 25 82 F1 | 	sub	local04, arg01
04fbc     12 FB 01 F6 | 	mov	result1, local04
04fc0     FD 26 0A F6 | 	mov	local05, result1 wz
04fc4     00 FA 05 A6 |  if_e	mov	result1, #0
04fc8     8C 02 90 AD |  if_e	jmp	#LR__0422
04fcc     0F 13 02 F6 | 	mov	arg01, local01
04fd0     01 14 06 F6 | 	mov	arg02, #1
04fd4     01 16 06 F6 | 	mov	arg03, #1
04fd8     60 BC B1 FD | 	call	#__system__Mid_S
04fdc     FD 28 02 F6 | 	mov	local06, result1
04fe0                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
04fe0     72 01 00 FF 
04fe4     AD 15 06 F6 | 	mov	arg02, ##@LR__5057
04fe8     14 13 02 F6 | 	mov	arg01, local06
04fec     4C 9B B1 FD | 	call	#__system___string_cmp
04ff0     00 FA 55 F2 | 	cmps	result1, #0 wc
04ff4     18 00 90 CD |  if_b	jmp	#LR__0412
04ff8     72 01 00 FF 
04ffc     AF 15 06 F6 | 	mov	arg02, ##@LR__5058
05000     14 13 02 F6 | 	mov	arg01, local06
05004     34 9B B1 FD | 	call	#__system___string_cmp
05008     01 FA 55 F2 | 	cmps	result1, #1 wc
0500c     78 00 90 CD |  if_b	jmp	#LR__0413
05010                 | LR__0412
05010     72 01 00 FF 
05014     B1 15 06 F6 | 	mov	arg02, ##@LR__5059
05018     14 13 02 F6 | 	mov	arg01, local06
0501c     1C 9B B1 FD | 	call	#__system___string_cmp
05020     00 FA 0D F2 | 	cmp	result1, #0 wz
05024     60 00 90 AD |  if_e	jmp	#LR__0413
05028     72 01 00 FF 
0502c     B3 2B 06 F6 | 	mov	local07, ##@LR__5060
05030     14 13 02 F6 | 	mov	arg01, local06
05034     15 15 02 F6 | 	mov	arg02, local07
05038     00 9B B1 FD | 	call	#__system___string_cmp
0503c     00 FA 0D F2 | 	cmp	result1, #0 wz
05040     44 00 90 AD |  if_e	jmp	#LR__0413
05044     72 01 00 FF 
05048     B5 2D 06 F6 | 	mov	local08, ##@LR__5061
0504c     16 2B 02 F6 | 	mov	local07, local08
05050     14 13 02 F6 | 	mov	arg01, local06
05054     15 15 02 F6 | 	mov	arg02, local07
05058     E0 9A B1 FD | 	call	#__system___string_cmp
0505c     00 FA 4D F2 | 	cmps	result1, #0 wz
05060     24 00 90 AD |  if_e	jmp	#LR__0413
05064     72 01 00 FF 
05068     B7 2F 06 F6 | 	mov	local09, ##@LR__5062
0506c     17 2D 02 F6 | 	mov	local08, local09
05070     14 13 02 F6 | 	mov	arg01, local06
05074     16 15 02 F6 | 	mov	arg02, local08
05078     C0 9A B1 FD | 	call	#__system___string_cmp
0507c     FD 2A 0A F6 | 	mov	local07, result1 wz
05080     00 FA 05 56 |  if_ne	mov	result1, #0
05084     D0 01 90 5D |  if_ne	jmp	#LR__0422
05088                 | LR__0413
05088                 | ' if m$="." then ds=1
05088     72 01 00 FF 
0508c     B9 15 06 F6 | 	mov	arg02, ##@LR__5063
05090     14 13 02 F6 | 	mov	arg01, local06
05094     A4 9A B1 FD | 	call	#__system___string_cmp
05098     00 FA 0D F2 | 	cmp	result1, #0 wz
0509c     01 20 06 A6 |  if_e	mov	local02, #1
050a0                 | ' if l>1 then 
050a0     02 26 56 F2 | 	cmps	local05, #2 wc
050a4     AC 01 90 CD |  if_b	jmp	#LR__0421
050a8                 | '   for i=2 to l
050a8     02 30 06 F6 | 	mov	local10, #2
050ac     13 33 02 F6 | 	mov	local11, local05
050b0     01 32 06 F1 | 	add	local11, #1
050b4                 | LR__0414
050b4     19 31 52 F2 | 	cmps	local10, local11 wc
050b8     98 01 90 3D |  if_ae	jmp	#LR__0420
050bc     0F 13 02 F6 | 	mov	arg01, local01
050c0     18 15 02 F6 | 	mov	arg02, local10
050c4     01 16 06 F6 | 	mov	arg03, #1
050c8     70 BB B1 FD | 	call	#__system__Mid_S
050cc     FD 28 02 F6 | 	mov	local06, result1
050d0                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
050d0     72 01 00 FF 
050d4     BB 15 06 F6 | 	mov	arg02, ##@LR__5064
050d8     14 13 02 F6 | 	mov	arg01, local06
050dc     5C 9A B1 FD | 	call	#__system___string_cmp
050e0     00 FA 55 F2 | 	cmps	result1, #0 wc
050e4     18 00 90 CD |  if_b	jmp	#LR__0415
050e8     72 01 00 FF 
050ec     BD 15 06 F6 | 	mov	arg02, ##@LR__5065
050f0     14 13 02 F6 | 	mov	arg01, local06
050f4     44 9A B1 FD | 	call	#__system___string_cmp
050f8     01 FA 55 F2 | 	cmps	result1, #1 wc
050fc     98 00 90 CD |  if_b	jmp	#LR__0416
05100                 | LR__0415
05100     72 01 00 FF 
05104     BF 15 06 F6 | 	mov	arg02, ##@LR__5066
05108     14 13 02 F6 | 	mov	arg01, local06
0510c     2C 9A B1 FD | 	call	#__system___string_cmp
05110     00 FA 0D F2 | 	cmp	result1, #0 wz
05114     80 00 90 AD |  if_e	jmp	#LR__0416
05118     72 01 00 FF 
0511c     C1 2B 06 F6 | 	mov	local07, ##@LR__5067
05120     14 13 02 F6 | 	mov	arg01, local06
05124     15 15 02 F6 | 	mov	arg02, local07
05128     10 9A B1 FD | 	call	#__system___string_cmp
0512c     00 FA 4D F2 | 	cmps	result1, #0 wz
05130     64 00 90 AD |  if_e	jmp	#LR__0416
05134     72 01 00 FF 
05138     C3 2D 06 F6 | 	mov	local08, ##@LR__5068
0513c     16 2B 02 F6 | 	mov	local07, local08
05140     14 13 02 F6 | 	mov	arg01, local06
05144     15 15 02 F6 | 	mov	arg02, local07
05148     F0 99 B1 FD | 	call	#__system___string_cmp
0514c     FD 34 0A F6 | 	mov	local12, result1 wz
05150     44 00 90 AD |  if_e	jmp	#LR__0416
05154     72 01 00 FF 
05158     C5 2F 06 F6 | 	mov	local09, ##@LR__5069
0515c     17 2D 02 F6 | 	mov	local08, local09
05160     14 13 02 F6 | 	mov	arg01, local06
05164     16 15 02 F6 | 	mov	arg02, local08
05168     D0 99 B1 FD | 	call	#__system___string_cmp
0516c     FD 2A 0A F6 | 	mov	local07, result1 wz
05170     24 00 90 AD |  if_e	jmp	#LR__0416
05174     72 01 00 FF 
05178     C7 37 06 F6 | 	mov	local13, ##@LR__5070
0517c     1B 2F 02 F6 | 	mov	local09, local13
05180     14 13 02 F6 | 	mov	arg01, local06
05184     17 15 02 F6 | 	mov	arg02, local09
05188     B0 99 B1 FD | 	call	#__system___string_cmp
0518c     FD 2C 0A F6 | 	mov	local08, result1 wz
05190     00 FA 05 56 |  if_ne	mov	result1, #0
05194     C0 00 90 5D |  if_ne	jmp	#LR__0422
05198                 | LR__0416
05198                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
05198     72 01 00 FF 
0519c     C9 15 06 F6 | 	mov	arg02, ##@LR__5071
051a0     14 13 02 F6 | 	mov	arg01, local06
051a4     94 99 B1 FD | 	call	#__system___string_cmp
051a8     00 FA 0D F2 | 	cmp	result1, #0 wz
051ac     38 00 90 5D |  if_ne	jmp	#LR__0417
051b0     18 15 02 F6 | 	mov	arg02, local10
051b4     01 14 86 F1 | 	sub	arg02, #1
051b8     0F 13 02 F6 | 	mov	arg01, local01
051bc     01 16 06 F6 | 	mov	arg03, #1
051c0     78 BA B1 FD | 	call	#__system__Mid_S
051c4     FD 12 02 F6 | 	mov	arg01, result1
051c8     68 BC B1 FD | 	call	#__system__LCase_S
051cc     FD 12 02 F6 | 	mov	arg01, result1
051d0     72 01 00 FF 
051d4     CB 15 06 F6 | 	mov	arg02, ##@LR__5072
051d8     60 99 B1 FD | 	call	#__system___string_cmp
051dc     00 FA 0D F2 | 	cmp	result1, #0 wz
051e0     00 FA 05 56 |  if_ne	mov	result1, #0
051e4     70 00 90 5D |  if_ne	jmp	#LR__0422
051e8                 | LR__0417
051e8                 | '     if m$="." then ds+=1: if ds>1 then return false
051e8     72 01 00 FF 
051ec     CD 15 06 F6 | 	mov	arg02, ##@LR__5073
051f0     14 13 02 F6 | 	mov	arg01, local06
051f4     44 99 B1 FD | 	call	#__system___string_cmp
051f8     00 FA 0D F2 | 	cmp	result1, #0 wz
051fc     01 20 06 A1 |  if_e	add	local02, #1
05200     02 20 56 A2 |  if_e	cmps	local02, #2 wc
05204     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
05208     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0422
0520c                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
0520c     72 01 00 FF 
05210     CF 15 06 F6 | 	mov	arg02, ##@LR__5074
05214     14 13 02 F6 | 	mov	arg01, local06
05218     20 99 B1 FD | 	call	#__system___string_cmp
0521c     00 FA 4D F2 | 	cmps	result1, #0 wz
05220     18 00 90 AD |  if_e	jmp	#LR__0418
05224     72 01 00 FF 
05228     D1 15 06 F6 | 	mov	arg02, ##@LR__5075
0522c     14 13 02 F6 | 	mov	arg01, local06
05230     08 99 B1 FD | 	call	#__system___string_cmp
05234     00 FA 4D F2 | 	cmps	result1, #0 wz
05238     10 00 90 5D |  if_ne	jmp	#LR__0419
0523c                 | LR__0418
0523c     01 22 06 F1 | 	add	local03, #1
05240     02 22 56 F2 | 	cmps	local03, #2 wc
05244     00 FA 05 36 |  if_ae	mov	result1, #0
05248     0C 00 90 3D |  if_ae	jmp	#LR__0422
0524c                 | LR__0419
0524c     01 30 06 F1 | 	add	local10, #1
05250     60 FE 9F FD | 	jmp	#LR__0414
05254                 | LR__0420
05254                 | LR__0421
05254                 | ' return true
05254     01 FA 65 F6 | 	neg	result1, #1
05258                 | LR__0422
05258     A7 F0 03 F6 | 	mov	ptra, fp
0525c     B2 00 A0 FD | 	call	#popregs_
05260                 | _isnum_ret
05260     2D 00 64 FD | 	ret
05264                 | 
05264                 | '   
05264                 | ' function isint(s as string) as boolean
05264                 | _isint
05264     05 4A 05 F6 | 	mov	COUNT_, #5
05268     A8 00 A0 FD | 	call	#pushregs_
0526c     09 1F 02 F6 | 	mov	local01, arg01
05270     09 21 02 F6 | 	mov	local02, arg01
05274     97 06 48 FB | 	callpa	#(@LR__0431-@LR__0430)>>2,fcache_load_ptr_
05278                 | LR__0430
05278     10 FB C9 FA | 	rdbyte	result1, local02 wz
0527c     01 20 06 51 |  if_ne	add	local02, #1
05280     F4 FF 9F 5D |  if_ne	jmp	#LR__0430
05284                 | LR__0431
05284     09 21 82 F1 | 	sub	local02, arg01
05288     10 FB 01 F6 | 	mov	result1, local02
0528c     FD 20 0A F6 | 	mov	local02, result1 wz
05290     00 FA 05 A6 |  if_e	mov	result1, #0
05294     18 01 90 AD |  if_e	jmp	#LR__0439
05298     0F 13 02 F6 | 	mov	arg01, local01
0529c     01 14 06 F6 | 	mov	arg02, #1
052a0     01 16 06 F6 | 	mov	arg03, #1
052a4     94 B9 B1 FD | 	call	#__system__Mid_S
052a8     FD 22 02 F6 | 	mov	local03, result1
052ac                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
052ac     72 01 00 FF 
052b0     D3 15 06 F6 | 	mov	arg02, ##@LR__5076
052b4     11 13 02 F6 | 	mov	arg01, local03
052b8     80 98 B1 FD | 	call	#__system___string_cmp
052bc     00 FA 55 F2 | 	cmps	result1, #0 wc
052c0     18 00 90 CD |  if_b	jmp	#LR__0432
052c4     72 01 00 FF 
052c8     D5 15 06 F6 | 	mov	arg02, ##@LR__5077
052cc     11 13 02 F6 | 	mov	arg01, local03
052d0     68 98 B1 FD | 	call	#__system___string_cmp
052d4     01 FA 55 F2 | 	cmps	result1, #1 wc
052d8     4C 00 90 CD |  if_b	jmp	#LR__0433
052dc                 | LR__0432
052dc     72 01 00 FF 
052e0     D7 15 06 F6 | 	mov	arg02, ##@LR__5078
052e4     11 13 02 F6 | 	mov	arg01, local03
052e8     50 98 B1 FD | 	call	#__system___string_cmp
052ec     00 FA 0D F2 | 	cmp	result1, #0 wz
052f0     34 00 90 AD |  if_e	jmp	#LR__0433
052f4     72 01 00 FF 
052f8     D9 15 06 F6 | 	mov	arg02, ##@LR__5079
052fc     11 13 02 F6 | 	mov	arg01, local03
05300     38 98 B1 FD | 	call	#__system___string_cmp
05304     00 FA 0D F2 | 	cmp	result1, #0 wz
05308     1C 00 90 AD |  if_e	jmp	#LR__0433
0530c     72 01 00 FF 
05310     DB 15 06 F6 | 	mov	arg02, ##@LR__5080
05314     11 13 02 F6 | 	mov	arg01, local03
05318     20 98 B1 FD | 	call	#__system___string_cmp
0531c     00 FA 0D F2 | 	cmp	result1, #0 wz
05320     00 FA 05 56 |  if_ne	mov	result1, #0
05324     88 00 90 5D |  if_ne	jmp	#LR__0439
05328                 | LR__0433
05328                 | ' 
05328                 | ' if l>1 then 
05328     02 20 56 F2 | 	cmps	local02, #2 wc
0532c     7C 00 90 CD |  if_b	jmp	#LR__0438
05330                 | '   for i=2 to l
05330     02 24 06 F6 | 	mov	local04, #2
05334     10 27 02 F6 | 	mov	local05, local02
05338     01 26 06 F1 | 	add	local05, #1
0533c                 | LR__0434
0533c     13 25 52 F2 | 	cmps	local04, local05 wc
05340     68 00 90 3D |  if_ae	jmp	#LR__0437
05344     0F 13 02 F6 | 	mov	arg01, local01
05348     12 15 02 F6 | 	mov	arg02, local04
0534c     01 16 06 F6 | 	mov	arg03, #1
05350     E8 B8 B1 FD | 	call	#__system__Mid_S
05354     FD 22 02 F6 | 	mov	local03, result1
05358                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
05358     72 01 00 FF 
0535c     DD 15 06 F6 | 	mov	arg02, ##@LR__5081
05360     11 13 02 F6 | 	mov	arg01, local03
05364     D4 97 B1 FD | 	call	#__system___string_cmp
05368     00 FA 55 F2 | 	cmps	result1, #0 wc
0536c     18 00 90 CD |  if_b	jmp	#LR__0435
05370     72 01 00 FF 
05374     DF 15 06 F6 | 	mov	arg02, ##@LR__5082
05378     11 13 02 F6 | 	mov	arg01, local03
0537c     BC 97 B1 FD | 	call	#__system___string_cmp
05380     01 FA 55 F2 | 	cmps	result1, #1 wc
05384     1C 00 90 CD |  if_b	jmp	#LR__0436
05388                 | LR__0435
05388     72 01 00 FF 
0538c     E1 15 06 F6 | 	mov	arg02, ##@LR__5083
05390     11 13 02 F6 | 	mov	arg01, local03
05394     A4 97 B1 FD | 	call	#__system___string_cmp
05398     00 FA 0D F2 | 	cmp	result1, #0 wz
0539c     00 FA 05 56 |  if_ne	mov	result1, #0
053a0     0C 00 90 5D |  if_ne	jmp	#LR__0439
053a4                 | LR__0436
053a4     01 24 06 F1 | 	add	local04, #1
053a8     90 FF 9F FD | 	jmp	#LR__0434
053ac                 | LR__0437
053ac                 | LR__0438
053ac                 | ' return true
053ac     01 FA 65 F6 | 	neg	result1, #1
053b0                 | LR__0439
053b0     A7 F0 03 F6 | 	mov	ptra, fp
053b4     B2 00 A0 FD | 	call	#popregs_
053b8                 | _isint_ret
053b8     2D 00 64 FD | 	ret
053bc                 | 
053bc                 | ' 
053bc                 | ' function isdec(s as string) as boolean
053bc                 | _isdec
053bc     05 4A 05 F6 | 	mov	COUNT_, #5
053c0     A8 00 A0 FD | 	call	#pushregs_
053c4     09 1F 02 F6 | 	mov	local01, arg01
053c8     09 21 02 F6 | 	mov	local02, arg01
053cc     97 06 48 FB | 	callpa	#(@LR__0441-@LR__0440)>>2,fcache_load_ptr_
053d0                 | LR__0440
053d0     10 FB C9 FA | 	rdbyte	result1, local02 wz
053d4     01 20 06 51 |  if_ne	add	local02, #1
053d8     F4 FF 9F 5D |  if_ne	jmp	#LR__0440
053dc                 | LR__0441
053dc     09 21 82 F1 | 	sub	local02, arg01
053e0     10 FB 01 F6 | 	mov	result1, local02
053e4     FD 20 0A F6 | 	mov	local02, result1 wz
053e8     00 FA 05 A6 |  if_e	mov	result1, #0
053ec     80 00 90 AD |  if_e	jmp	#LR__0446
053f0                 | ' for i=1 to l
053f0     01 22 06 F6 | 	mov	local03, #1
053f4     10 25 02 F6 | 	mov	local04, local02
053f8     01 24 06 F1 | 	add	local04, #1
053fc                 | LR__0442
053fc     12 23 52 F2 | 	cmps	local03, local04 wc
05400     68 00 90 3D |  if_ae	jmp	#LR__0445
05404     0F 13 02 F6 | 	mov	arg01, local01
05408     11 15 02 F6 | 	mov	arg02, local03
0540c     01 16 06 F6 | 	mov	arg03, #1
05410     28 B8 B1 FD | 	call	#__system__Mid_S
05414     FD 26 02 F6 | 	mov	local05, result1
05418                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
05418     72 01 00 FF 
0541c     E3 15 06 F6 | 	mov	arg02, ##@LR__5084
05420     13 13 02 F6 | 	mov	arg01, local05
05424     14 97 B1 FD | 	call	#__system___string_cmp
05428     00 FA 55 F2 | 	cmps	result1, #0 wc
0542c     18 00 90 CD |  if_b	jmp	#LR__0443
05430     72 01 00 FF 
05434     E5 15 06 F6 | 	mov	arg02, ##@LR__5085
05438     13 13 02 F6 | 	mov	arg01, local05
0543c     FC 96 B1 FD | 	call	#__system___string_cmp
05440     01 FA 55 F2 | 	cmps	result1, #1 wc
05444     1C 00 90 CD |  if_b	jmp	#LR__0444
05448                 | LR__0443
05448     72 01 00 FF 
0544c     E7 15 06 F6 | 	mov	arg02, ##@LR__5086
05450     13 13 02 F6 | 	mov	arg01, local05
05454     E4 96 B1 FD | 	call	#__system___string_cmp
05458     00 FA 0D F2 | 	cmp	result1, #0 wz
0545c     00 FA 05 56 |  if_ne	mov	result1, #0
05460     0C 00 90 5D |  if_ne	jmp	#LR__0446
05464                 | LR__0444
05464     01 22 06 F1 | 	add	local03, #1
05468     90 FF 9F FD | 	jmp	#LR__0442
0546c                 | LR__0445
0546c                 | ' return true
0546c     01 FA 65 F6 | 	neg	result1, #1
05470                 | LR__0446
05470     A7 F0 03 F6 | 	mov	ptra, fp
05474     B2 00 A0 FD | 	call	#popregs_
05478                 | _isdec_ret
05478     2D 00 64 FD | 	ret
0547c                 | 
0547c                 | ' 
0547c                 | ' function isstring(s as string) as boolean
0547c                 | _isstring
0547c     01 4A 05 F6 | 	mov	COUNT_, #1
05480     A8 00 A0 FD | 	call	#pushregs_
05484                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
05484     09 1F 02 F6 | 	mov	local01, arg01
05488     01 14 06 F6 | 	mov	arg02, #1
0548c     94 B6 B1 FD | 	call	#__system__Left_S
05490     FD 12 02 F6 | 	mov	arg01, result1
05494     72 01 00 FF 
05498     E9 15 06 F6 | 	mov	arg02, ##@LR__5087
0549c     9C 96 B1 FD | 	call	#__system___string_cmp
054a0     00 FA 4D F2 | 	cmps	result1, #0 wz
054a4     28 00 90 5D |  if_ne	jmp	#LR__0450
054a8     0F 13 02 F6 | 	mov	arg01, local01
054ac     01 14 06 F6 | 	mov	arg02, #1
054b0     F8 B6 B1 FD | 	call	#__system__Right_S
054b4     FD 12 02 F6 | 	mov	arg01, result1
054b8     72 01 00 FF 
054bc     EB 15 06 F6 | 	mov	arg02, ##@LR__5088
054c0     78 96 B1 FD | 	call	#__system___string_cmp
054c4     00 FA 4D F2 | 	cmps	result1, #0 wz
054c8     01 FA 65 A6 |  if_e	neg	result1, #1
054cc     04 00 90 AD |  if_e	jmp	#LR__0451
054d0                 | LR__0450
054d0     00 FA 05 F6 | 	mov	result1, #0
054d4                 | LR__0451
054d4     A7 F0 03 F6 | 	mov	ptra, fp
054d8     B2 00 A0 FD | 	call	#popregs_
054dc                 | _isstring_ret
054dc     2D 00 64 FD | 	ret
054e0                 | 
054e0                 | ' 
054e0                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
054e0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
054e0                 | ' 
054e0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
054e0                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
054e0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
054e0                 | ' 
054e0                 | ' '----- delete a line from a program
054e0                 | ' 
054e0                 | ' function deleteline(aline as ulong) as integer
054e0                 | _deleteline
054e0     03 4A 05 F6 | 	mov	COUNT_, #3
054e4     A8 00 A0 FD | 	call	#pushregs_
054e8     2C F0 07 F1 | 	add	ptra, #44
054ec     04 4E 05 F1 | 	add	fp, #4
054f0     A7 12 62 FC | 	wrlong	arg01, fp
054f4     4A 00 00 FF 
054f8     B4 E4 05 F1 | 	add	objptr, ##38068
054fc     F2 1E 02 FB | 	rdlong	local01, objptr
05500     0C 4E 05 F1 | 	add	fp, #12
05504     A7 1E 62 FC | 	wrlong	local01, fp
05508     10 4E 85 F1 | 	sub	fp, #16
0550c                 | ' 
0550c                 | ' 
0550c                 | ' searchptr=programstart
0550c                 | ' 
0550c                 | ' do
0550c     3E 00 00 FF 
05510     E8 E5 85 F1 | 	sub	objptr, ##32232
05514                 | LR__0460
05514     14 4E 05 F1 | 	add	fp, #20
05518     A7 12 02 F6 | 	mov	arg01, fp
0551c     04 4E 85 F1 | 	sub	fp, #4
05520     A7 14 02 FB | 	rdlong	arg02, fp
05524     10 4E 85 F1 | 	sub	fp, #16
05528     18 16 06 F6 | 	mov	arg03, #24
0552c     A4 89 B1 FD | 	call	#_psram_spin2_read1
05530     10 4E 05 F1 | 	add	fp, #16
05534     A7 1E 02 FB | 	rdlong	local01, fp
05538     08 4E 85 F1 | 	sub	fp, #8
0553c     A7 1E 62 FC | 	wrlong	local01, fp
05540     20 4E 05 F1 | 	add	fp, #32
05544     A7 1E 02 FB | 	rdlong	local01, fp
05548     18 4E 85 F1 | 	sub	fp, #24
0554c     A7 1E 62 FC | 	wrlong	local01, fp
05550     04 4E 05 F1 | 	add	fp, #4
05554     A7 1E 02 FB | 	rdlong	local01, fp
05558     10 4E 85 F1 | 	sub	fp, #16
0555c     A7 16 02 FB | 	rdlong	arg03, fp
05560     04 4E 85 F1 | 	sub	fp, #4
05564     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05568     28 4E 05 C1 |  if_b	add	fp, #40
0556c     A7 20 02 CB |  if_b	rdlong	local02, fp
05570     28 4E 85 C1 |  if_b	sub	fp, #40
05574     FF FF 3F CF 
05578     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
0557c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0460
05580     0B 00 00 FF 
05584     CC E4 85 F1 | 	sub	objptr, ##5836
05588                 | ' 
05588                 | ' 
05588                 | ' if header(0)<>aline then return -1
05588     14 4E 05 F1 | 	add	fp, #20
0558c     A7 1E 02 FB | 	rdlong	local01, fp
05590     10 4E 85 F1 | 	sub	fp, #16
05594     A7 22 02 FB | 	rdlong	local03, fp
05598     04 4E 85 F1 | 	sub	fp, #4
0559c     11 1F 0A F2 | 	cmp	local01, local03 wz
055a0     01 FA 65 56 |  if_ne	neg	result1, #1
055a4     D8 02 90 5D |  if_ne	jmp	#LR__0466
055a8     08 4E 05 F1 | 	add	fp, #8
055ac     A7 12 02 FB | 	rdlong	arg01, fp
055b0     08 4E 85 F1 | 	sub	fp, #8
055b4     01 14 66 F6 | 	neg	arg02, #1
055b8     14 52 B1 FD | 	call	#_pslpoke
055bc                 | ' 
055bc                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
055bc                 | ' 
055bc                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  ' this is one and only line in the program
055bc     28 4E 05 F1 | 	add	fp, #40
055c0     A7 1E 02 FB | 	rdlong	local01, fp
055c4     28 4E 85 F1 | 	sub	fp, #40
055c8     FF FF 3F FF 
055cc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
055d0     24 4E 05 A1 |  if_e	add	fp, #36
055d4     A7 22 02 AB |  if_e	rdlong	local03, fp
055d8     24 4E 85 A1 |  if_e	sub	fp, #36
055dc     FF FF 7F AF 
055e0     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
055e4     88 00 90 5D |  if_ne	jmp	#LR__0461
055e8     4A 00 00 FF 
055ec     B4 E4 05 F1 | 	add	objptr, ##38068
055f0     00 04 80 FF 
055f4     F2 00 68 FC | 	wrlong	##524288, objptr
055f8     07 00 00 FF 
055fc     28 E4 85 F1 | 	sub	objptr, ##3624
05600     00 04 80 FF 
05604     F2 00 68 FC | 	wrlong	##524288, objptr
05608     07 00 00 FF 
0560c     2C E4 05 F1 | 	add	objptr, ##3628
05610     F2 00 68 FC | 	wrlong	#0, objptr
05614     04 E4 05 F1 | 	add	objptr, #4
05618     FF FF FF FF 
0561c     F2 FE 6B FC | 	wrlong	##-1, objptr
05620     4A 00 00 FF 
05624     BC E4 85 F1 | 	sub	objptr, ##38076
05628     00 12 06 F6 | 	mov	arg01, #0
0562c     01 14 66 F6 | 	neg	arg02, #1
05630     9C 51 B1 FD | 	call	#_pslpoke
05634     10 12 06 F6 | 	mov	arg01, #16
05638     01 14 66 F6 | 	neg	arg02, #1
0563c     90 51 B1 FD | 	call	#_pslpoke
05640     14 12 06 F6 | 	mov	arg01, #20
05644     1E 14 CE F9 | 	bmask	arg02, #30
05648     84 51 B1 FD | 	call	#_pslpoke
0564c     58 00 00 FF 
05650     EC E4 05 F1 | 	add	objptr, ##45292
05654     00 04 80 FF 
05658     F2 00 68 FC | 	wrlong	##524288, objptr
0565c     04 E4 05 F1 | 	add	objptr, #4
05660     00 04 80 FF 
05664     F2 00 68 FC | 	wrlong	##524288, objptr
05668     58 00 00 FF 
0566c     F0 E4 85 F1 | 	sub	objptr, ##45296
05670                 | LR__0461
05670                 | ' 
05670                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
05670     28 4E 05 F1 | 	add	fp, #40
05674     A7 1E 02 FB | 	rdlong	local01, fp
05678     28 4E 85 F1 | 	sub	fp, #40
0567c     FF FF 3F FF 
05680     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05684     74 00 90 5D |  if_ne	jmp	#LR__0462
05688     24 4E 05 F1 | 	add	fp, #36
0568c     A7 22 02 FB | 	rdlong	local03, fp
05690     24 4E 85 F1 | 	sub	fp, #36
05694     FF FF 7F FF 
05698     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0569c     5C 00 90 AD |  if_e	jmp	#LR__0462
056a0     24 4E 05 F1 | 	add	fp, #36
056a4     A7 12 02 FB | 	rdlong	arg01, fp
056a8     24 4E 85 F1 | 	sub	fp, #36
056ac     14 12 06 F1 | 	add	arg01, #20
056b0     1E 14 CE F9 | 	bmask	arg02, #30
056b4     18 51 B1 FD | 	call	#_pslpoke
056b8     24 4E 05 F1 | 	add	fp, #36
056bc     A7 1E 02 FB | 	rdlong	local01, fp
056c0     4A 00 00 FF 
056c4     BC E4 05 F1 | 	add	objptr, ##38076
056c8     F2 1E 62 FC | 	wrlong	local01, objptr
056cc     4A 00 00 FF 
056d0     BC E4 85 F1 | 	sub	objptr, ##38076
056d4     A7 12 02 FB | 	rdlong	arg01, fp
056d8     24 4E 85 F1 | 	sub	fp, #36
056dc     20 52 B1 FD | 	call	#_pslpeek
056e0     4A 00 00 FF 
056e4     B8 E4 05 F1 | 	add	objptr, ##38072
056e8     F2 FA 61 FC | 	wrlong	result1, objptr
056ec     4A 00 00 FF 
056f0     B8 E4 85 F1 | 	sub	objptr, ##38072
056f4                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
056f4                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
056f4                 | '   lastline=pslpeek(header(4))
056f4                 | '   return 0
056f4     00 FA 05 F6 | 	mov	result1, #0
056f8     84 01 90 FD | 	jmp	#LR__0466
056fc                 | LR__0462
056fc                 | ' 
056fc                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
056fc     28 4E 05 F1 | 	add	fp, #40
05700     A7 1E 02 FB | 	rdlong	local01, fp
05704     28 4E 85 F1 | 	sub	fp, #40
05708     FF FF 3F FF 
0570c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05710     58 00 90 AD |  if_e	jmp	#LR__0463
05714     24 4E 05 F1 | 	add	fp, #36
05718     A7 22 02 FB | 	rdlong	local03, fp
0571c     24 4E 85 F1 | 	sub	fp, #36
05720     FF FF 7F FF 
05724     FF 23 0E F2 | 	cmp	local03, ##-1 wz
05728     40 00 90 5D |  if_ne	jmp	#LR__0463
0572c     28 4E 05 F1 | 	add	fp, #40
05730     A7 12 02 FB | 	rdlong	arg01, fp
05734     28 4E 85 F1 | 	sub	fp, #40
05738     10 12 06 F1 | 	add	arg01, #16
0573c     01 14 66 F6 | 	neg	arg02, #1
05740     8C 50 B1 FD | 	call	#_pslpoke
05744     28 4E 05 F1 | 	add	fp, #40
05748     A7 1E 02 FB | 	rdlong	local01, fp
0574c     28 4E 85 F1 | 	sub	fp, #40
05750     4A 00 00 FF 
05754     B4 E4 05 F1 | 	add	objptr, ##38068
05758     F2 1E 62 FC | 	wrlong	local01, objptr
0575c     4A 00 00 FF 
05760     B4 E4 85 F1 | 	sub	objptr, ##38068
05764                 | ' '   print "deleted first line"
05764                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
05764                 | '   programstart=header(5) ' adjust the program start to point on the first new line
05764                 | '   return 0
05764     00 FA 05 F6 | 	mov	result1, #0
05768     14 01 90 FD | 	jmp	#LR__0466
0576c                 | LR__0463
0576c                 | ' 
0576c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
0576c     28 4E 05 F1 | 	add	fp, #40
05770     A7 1E 02 FB | 	rdlong	local01, fp
05774     28 4E 85 F1 | 	sub	fp, #40
05778     FF FF 3F FF 
0577c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
05780     24 4E 05 51 |  if_ne	add	fp, #36
05784     A7 22 02 5B |  if_ne	rdlong	local03, fp
05788     24 4E 85 51 |  if_ne	sub	fp, #36
0578c     FF FF 7F 5F 
05790     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
05794     40 00 90 AD |  if_e	jmp	#LR__0464
05798     28 4E 05 F1 | 	add	fp, #40
0579c     A7 12 02 FB | 	rdlong	arg01, fp
057a0     10 12 06 F1 | 	add	arg01, #16
057a4     04 4E 85 F1 | 	sub	fp, #4
057a8     A7 14 02 FB | 	rdlong	arg02, fp
057ac     24 4E 85 F1 | 	sub	fp, #36
057b0     1C 50 B1 FD | 	call	#_pslpoke
057b4     24 4E 05 F1 | 	add	fp, #36
057b8     A7 12 02 FB | 	rdlong	arg01, fp
057bc     14 12 06 F1 | 	add	arg01, #20
057c0     04 4E 05 F1 | 	add	fp, #4
057c4     A7 14 02 FB | 	rdlong	arg02, fp
057c8     28 4E 85 F1 | 	sub	fp, #40
057cc     00 50 B1 FD | 	call	#_pslpoke
057d0                 | '    pslpoke(header(5)+16,header(4))  
057d0                 | '    pslpoke(header(4)+20, header(5))
057d0                 | '    return 0
057d0     00 FA 05 F6 | 	mov	result1, #0
057d4     A8 00 90 FD | 	jmp	#LR__0466
057d8                 | LR__0464
057d8     10 4E 05 F1 | 	add	fp, #16
057dc     A7 1E 02 FB | 	rdlong	local01, fp
057e0     08 4E 85 F1 | 	sub	fp, #8
057e4     A7 1E 62 FC | 	wrlong	local01, fp
057e8     4A 00 00 FF 
057ec     B4 E4 05 F1 | 	add	objptr, ##38068
057f0     F2 1E 02 FB | 	rdlong	local01, objptr
057f4     08 4E 05 F1 | 	add	fp, #8
057f8     A7 1E 62 FC | 	wrlong	local01, fp
057fc     10 4E 85 F1 | 	sub	fp, #16
05800                 | ' 
05800                 | ' 
05800                 | ' 
05800                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
05800                 | ' 
05800                 | ' lineptr2=searchptr
05800                 | ' searchptr=programstart
05800                 | ' 
05800                 | ' do
05800     3E 00 00 FF 
05804     E8 E5 85 F1 | 	sub	objptr, ##32232
05808                 | LR__0465
05808     14 4E 05 F1 | 	add	fp, #20
0580c     A7 12 02 F6 | 	mov	arg01, fp
05810     04 4E 85 F1 | 	sub	fp, #4
05814     A7 14 02 FB | 	rdlong	arg02, fp
05818     10 4E 85 F1 | 	sub	fp, #16
0581c     18 16 06 F6 | 	mov	arg03, #24
05820     B0 86 B1 FD | 	call	#_psram_spin2_read1
05824     10 4E 05 F1 | 	add	fp, #16
05828     A7 1E 02 FB | 	rdlong	local01, fp
0582c     08 4E 85 F1 | 	sub	fp, #8
05830     A7 1E 62 FC | 	wrlong	local01, fp
05834     20 4E 05 F1 | 	add	fp, #32
05838     A7 1E 02 FB | 	rdlong	local01, fp
0583c     18 4E 85 F1 | 	sub	fp, #24
05840     A7 1E 62 FC | 	wrlong	local01, fp
05844     04 4E 05 F1 | 	add	fp, #4
05848     A7 1E 02 FB | 	rdlong	local01, fp
0584c     10 4E 85 F1 | 	sub	fp, #16
05850     A7 22 02 FB | 	rdlong	local03, fp
05854     04 4E 85 F1 | 	sub	fp, #4
05858     11 1F 12 F2 | 	cmp	local01, local03 wc
0585c     28 4E 05 C1 |  if_b	add	fp, #40
05860     A7 20 02 CB |  if_b	rdlong	local02, fp
05864     28 4E 85 C1 |  if_b	sub	fp, #40
05868     FF FF 3F CF 
0586c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05870     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0465
05874     0B 00 00 FF 
05878     CC E4 85 F1 | 	sub	objptr, ##5836
0587c     00 FA 05 F6 | 	mov	result1, #0
05880                 | LR__0466
05880     A7 F0 03 F6 | 	mov	ptra, fp
05884     B2 00 A0 FD | 	call	#popregs_
05888                 | _deleteline_ret
05888     2D 00 64 FD | 	ret
0588c                 | 
0588c                 | ' 
0588c                 | ' sub save_line
0588c                 | _save_line
0588c     03 4A 05 F6 | 	mov	COUNT_, #3
05890     A8 00 A0 FD | 	call	#pushregs_
05894     4A 00 00 FF 
05898     AC E4 05 F1 | 	add	objptr, ##38060
0589c     F2 16 02 FB | 	rdlong	arg03, objptr
058a0     01 16 06 F1 | 	add	arg03, #1
058a4     05 00 00 FF 
058a8     18 E4 85 F1 | 	sub	objptr, ##2584
058ac     F2 14 02 FB | 	rdlong	arg02, objptr
058b0     0B 15 02 FD | 	qmul	arg02, arg03
058b4     0E 00 00 FF 
058b8     44 E4 85 F1 | 	sub	objptr, ##7236
058bc     F2 12 02 FB | 	rdlong	arg01, objptr
058c0     37 00 00 FF 
058c4     50 E4 85 F1 | 	sub	objptr, ##28240
058c8     09 1F 02 F6 | 	mov	local01, arg01
058cc     18 20 62 FD | 	getqx	local02
058d0     97 06 48 FB | 	callpa	#(@LR__0471-@LR__0470)>>2,fcache_load_ptr_
058d4                 | LR__0470
058d4     0F FB C9 FA | 	rdbyte	result1, local01 wz
058d8     01 1E 06 51 |  if_ne	add	local01, #1
058dc     F4 FF 9F 5D |  if_ne	jmp	#LR__0470
058e0                 | LR__0471
058e0     09 1F 82 F1 | 	sub	local01, arg01
058e4     03 1E CE F7 | 	test	local01, #3 wz
058e8     02 1E 46 50 |  if_ne	shr	local01, #2
058ec     01 1E 06 51 |  if_ne	add	local01, #1
058f0     02 1E 66 50 |  if_ne	shl	local01, #2
058f4     10 23 02 F6 | 	mov	local03, local02
058f8     0F 23 02 F1 | 	add	local03, local01
058fc     43 00 00 FF 
05900     8C E4 05 F1 | 	add	objptr, ##34444
05904     F2 16 02 FB | 	rdlong	arg03, objptr
05908     10 17 02 F1 | 	add	arg03, local02
0590c     04 00 00 FF 
05910     28 E4 05 F1 | 	add	objptr, ##2088
05914     F2 16 62 FC | 	wrlong	arg03, objptr
05918     04 E4 05 F1 | 	add	objptr, #4
0591c     F2 1E 62 FC | 	wrlong	local01, objptr
05920     0C E4 85 F1 | 	sub	objptr, #12
05924     F2 12 02 F6 | 	mov	arg01, objptr
05928     04 00 00 FF 
0592c     20 E4 85 F1 | 	sub	objptr, ##2080
05930     F2 14 02 FB | 	rdlong	arg02, objptr
05934     10 17 02 F6 | 	mov	arg03, local02
05938     37 00 00 FF 
0593c     C0 E5 85 F1 | 	sub	objptr, ##28608
05940     2C 86 B1 FD | 	call	#_psram_spin2_write
05944     2B 00 00 FF 
05948     84 E5 05 F1 | 	add	objptr, ##22404
0594c     F2 12 02 FB | 	rdlong	arg01, objptr
05950     0C 00 00 FF 
05954     3C E4 05 F1 | 	add	objptr, ##6204
05958     F2 14 02 FB | 	rdlong	arg02, objptr
0595c     10 15 02 F1 | 	add	arg02, local02
05960     0F 17 02 F6 | 	mov	arg03, local01
05964     37 00 00 FF 
05968     C0 E5 85 F1 | 	sub	objptr, ##28608
0596c     00 86 B1 FD | 	call	#_psram_spin2_write
05970     37 00 00 FF 
05974     C0 E5 05 F1 | 	add	objptr, ##28608
05978     F2 1E 02 FB | 	rdlong	local01, objptr
0597c     11 1F 02 F1 | 	add	local01, local03
05980     F2 1E 62 FC | 	wrlong	local01, objptr
05984     43 00 00 FF 
05988     8C E4 85 F1 | 	sub	objptr, ##34444
0598c     A7 F0 03 F6 | 	mov	ptra, fp
05990     B2 00 A0 FD | 	call	#popregs_
05994                 | _save_line_ret
05994     2D 00 64 FD | 	ret
05998                 | 
05998                 | ' 
05998                 | ' 
05998                 | ' function insertline(aline as ulong) as integer
05998                 | _insertline
05998     02 4A 05 F6 | 	mov	COUNT_, #2
0599c     A8 00 A0 FD | 	call	#pushregs_
059a0     28 F0 07 F1 | 	add	ptra, #40
059a4     04 4E 05 F1 | 	add	fp, #4
059a8     A7 12 62 FC | 	wrlong	arg01, fp
059ac     4A 00 00 FF 
059b0     B4 E4 05 F1 | 	add	objptr, ##38068
059b4     F2 1E 02 FB | 	rdlong	local01, objptr
059b8     04 4E 05 F1 | 	add	fp, #4
059bc     A7 1E 62 FC | 	wrlong	local01, fp
059c0     08 4E 85 F1 | 	sub	fp, #8
059c4                 | ' 
059c4                 | ' do
059c4     3E 00 00 FF 
059c8     E8 E5 85 F1 | 	sub	objptr, ##32232
059cc                 | LR__0480
059cc     10 4E 05 F1 | 	add	fp, #16
059d0     A7 12 02 F6 | 	mov	arg01, fp
059d4     08 4E 85 F1 | 	sub	fp, #8
059d8     A7 14 02 FB | 	rdlong	arg02, fp
059dc     08 4E 85 F1 | 	sub	fp, #8
059e0     18 16 06 F6 | 	mov	arg03, #24
059e4     EC 84 B1 FD | 	call	#_psram_spin2_read1
059e8     08 4E 05 F1 | 	add	fp, #8
059ec     A7 1E 02 FB | 	rdlong	local01, fp
059f0     04 4E 05 F1 | 	add	fp, #4
059f4     A7 1E 62 FC | 	wrlong	local01, fp
059f8     18 4E 05 F1 | 	add	fp, #24
059fc     A7 1E 02 FB | 	rdlong	local01, fp
05a00     1C 4E 85 F1 | 	sub	fp, #28
05a04     A7 1E 62 FC | 	wrlong	local01, fp
05a08     08 4E 05 F1 | 	add	fp, #8
05a0c     A7 1E 02 FB | 	rdlong	local01, fp
05a10     0C 4E 85 F1 | 	sub	fp, #12
05a14     A7 16 02 FB | 	rdlong	arg03, fp
05a18     04 4E 85 F1 | 	sub	fp, #4
05a1c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05a20     24 4E 05 C1 |  if_b	add	fp, #36
05a24     A7 20 02 CB |  if_b	rdlong	local02, fp
05a28     24 4E 85 C1 |  if_b	sub	fp, #36
05a2c     FF FF 3F CF 
05a30     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
05a34     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0480
05a38     0B 00 00 FF 
05a3c     CC E4 85 F1 | 	sub	objptr, ##5836
05a40                 | ' 
05a40                 | ' if header(0)=aline then return -1 ' delete it first
05a40     10 4E 05 F1 | 	add	fp, #16
05a44     A7 1E 02 FB | 	rdlong	local01, fp
05a48     0C 4E 85 F1 | 	sub	fp, #12
05a4c     A7 20 02 FB | 	rdlong	local02, fp
05a50     04 4E 85 F1 | 	sub	fp, #4
05a54     10 1F 0A F2 | 	cmp	local01, local02 wz
05a58     01 FA 65 A6 |  if_e	neg	result1, #1
05a5c     48 01 90 AD |  if_e	jmp	#LR__0483
05a60                 | ' if header(0)<aline then return -2 ' end of program reached
05a60     10 4E 05 F1 | 	add	fp, #16
05a64     A7 1E 02 FB | 	rdlong	local01, fp
05a68     0C 4E 85 F1 | 	sub	fp, #12
05a6c     A7 16 02 FB | 	rdlong	arg03, fp
05a70     04 4E 85 F1 | 	sub	fp, #4
05a74     0B 1F 12 F2 | 	cmp	local01, arg03 wc
05a78     02 FA 65 C6 |  if_b	neg	result1, #2
05a7c     28 01 90 CD |  if_b	jmp	#LR__0483
05a80                 | ' 
05a80                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
05a80     20 4E 05 F1 | 	add	fp, #32
05a84     A7 1E 02 FB | 	rdlong	local01, fp
05a88     20 4E 85 F1 | 	sub	fp, #32
05a8c     FF FF 7F FF 
05a90     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
05a94     78 00 90 5D |  if_ne	jmp	#LR__0481
05a98     43 00 00 FF 
05a9c     8C E4 05 F1 | 	add	objptr, ##34444
05aa0     F2 1E 02 FB | 	rdlong	local01, objptr
05aa4     07 00 00 FF 
05aa8     28 E4 05 F1 | 	add	objptr, ##3624
05aac     F2 1E 62 FC | 	wrlong	local01, objptr
05ab0     0C 4E 05 F1 | 	add	fp, #12
05ab4     A7 12 02 FB | 	rdlong	arg01, fp
05ab8     0C 4E 85 F1 | 	sub	fp, #12
05abc     10 12 06 F1 | 	add	arg01, #16
05ac0     07 00 00 FF 
05ac4     28 E4 85 F1 | 	sub	objptr, ##3624
05ac8     F2 14 02 FB | 	rdlong	arg02, objptr
05acc     43 00 00 FF 
05ad0     8C E4 85 F1 | 	sub	objptr, ##34444
05ad4     F8 4C B1 FD | 	call	#_pslpoke
05ad8     47 00 00 FF 
05adc     BC E4 05 F1 | 	add	objptr, ##36540
05ae0     FF FF FF FF 
05ae4     F2 FE 6B FC | 	wrlong	##-1, objptr
05ae8     0C 4E 05 F1 | 	add	fp, #12
05aec     A7 1E 02 FB | 	rdlong	local01, fp
05af0     0C 4E 85 F1 | 	sub	fp, #12
05af4     04 E4 05 F1 | 	add	objptr, #4
05af8     F2 1E 62 FC | 	wrlong	local01, objptr
05afc     47 00 00 FF 
05b00     C0 E4 85 F1 | 	sub	objptr, ##36544
05b04     84 FD BF FD | 	call	#_save_line
05b08                 | '   programstart=programptr
05b08                 | '   pslpoke(lineptr2+16,programptr)
05b08                 | '   ucompiledline(4)=$FFFF_FFFF
05b08                 | '   ucompiledline(5)=lineptr2
05b08                 | '   save_line
05b08                 | '   return 0
05b08     00 FA 05 F6 | 	mov	result1, #0
05b0c     98 00 90 FD | 	jmp	#LR__0483
05b10                 | LR__0481
05b10                 | ' 
05b10                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
05b10     20 4E 05 F1 | 	add	fp, #32
05b14     A7 1E 02 FB | 	rdlong	local01, fp
05b18     20 4E 85 F1 | 	sub	fp, #32
05b1c     FF FF 7F FF 
05b20     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
05b24     7C 00 90 AD |  if_e	jmp	#LR__0482
05b28     20 4E 05 F1 | 	add	fp, #32
05b2c     A7 1E 02 FB | 	rdlong	local01, fp
05b30     47 00 00 FF 
05b34     BC E4 05 F1 | 	add	objptr, ##36540
05b38     F2 1E 62 FC | 	wrlong	local01, objptr
05b3c     14 4E 85 F1 | 	sub	fp, #20
05b40     A7 1E 02 FB | 	rdlong	local01, fp
05b44     04 E4 05 F1 | 	add	objptr, #4
05b48     F2 1E 62 FC | 	wrlong	local01, objptr
05b4c     A7 12 02 FB | 	rdlong	arg01, fp
05b50     0C 4E 85 F1 | 	sub	fp, #12
05b54     10 12 06 F1 | 	add	arg01, #16
05b58     04 00 00 FF 
05b5c     34 E4 85 F1 | 	sub	objptr, ##2100
05b60     F2 14 02 FB | 	rdlong	arg02, objptr
05b64     43 00 00 FF 
05b68     8C E4 85 F1 | 	sub	objptr, ##34444
05b6c     60 4C B1 FD | 	call	#_pslpoke
05b70     20 4E 05 F1 | 	add	fp, #32
05b74     A7 12 02 FB | 	rdlong	arg01, fp
05b78     20 4E 85 F1 | 	sub	fp, #32
05b7c     14 12 06 F1 | 	add	arg01, #20
05b80     43 00 00 FF 
05b84     8C E4 05 F1 | 	add	objptr, ##34444
05b88     F2 14 02 FB | 	rdlong	arg02, objptr
05b8c     43 00 00 FF 
05b90     8C E4 85 F1 | 	sub	objptr, ##34444
05b94     38 4C B1 FD | 	call	#_pslpoke
05b98     F0 FC BF FD | 	call	#_save_line
05b9c                 | '   ucompiledline(4)=header(4)
05b9c                 | '   ucompiledline(5)=lineptr2
05b9c                 | '   pslpoke(lineptr2+16,programptr)
05b9c                 | '   pslpoke(header(4)+20,programptr)
05b9c                 | '   save_line
05b9c                 | '   return 0
05b9c     00 FA 05 F6 | 	mov	result1, #0
05ba0     04 00 90 FD | 	jmp	#LR__0483
05ba4                 | LR__0482
05ba4     00 FA 05 F6 | 	mov	result1, #0
05ba8                 | LR__0483
05ba8     A7 F0 03 F6 | 	mov	ptra, fp
05bac     B2 00 A0 FD | 	call	#popregs_
05bb0                 | _insertline_ret
05bb0     2D 00 64 FD | 	ret
05bb4                 | 
05bb4                 | ' 
05bb4                 | ' sub add_line_at_end(aline) 
05bb4                 | _add_line_at_end
05bb4     4A 00 00 FF 
05bb8     B8 E4 05 F1 | 	add	objptr, ##38072
05bbc     F2 12 62 FC | 	wrlong	arg01, objptr
05bc0     04 E4 05 F1 | 	add	objptr, #4
05bc4     F2 14 02 FB | 	rdlong	arg02, objptr
05bc8     03 00 00 FF 
05bcc     00 E4 85 F1 | 	sub	objptr, ##1536
05bd0     F2 14 62 FC | 	wrlong	arg02, objptr
05bd4     03 00 00 FF 
05bd8     00 E4 05 F1 | 	add	objptr, ##1536
05bdc     F2 12 02 FB | 	rdlong	arg01, objptr
05be0     14 12 06 F1 | 	add	arg01, #20
05be4     07 00 00 FF 
05be8     30 E4 85 F1 | 	sub	objptr, ##3632
05bec     F2 14 02 FB | 	rdlong	arg02, objptr
05bf0     43 00 00 FF 
05bf4     8C E4 85 F1 | 	sub	objptr, ##34444
05bf8     D4 4B B1 FD | 	call	#_pslpoke
05bfc     43 00 00 FF 
05c00     8C E4 05 F1 | 	add	objptr, ##34444
05c04     F2 14 02 FB | 	rdlong	arg02, objptr
05c08     07 00 00 FF 
05c0c     30 E4 05 F1 | 	add	objptr, ##3632
05c10     F2 14 62 FC | 	wrlong	arg02, objptr
05c14     02 00 00 FF 
05c18     FC E5 85 F1 | 	sub	objptr, ##1532
05c1c     FF FF BF FF 
05c20     F2 FE 6B FC | 	wrlong	##2147483647, objptr
05c24                 | ' 
05c24                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
05c24                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
05c24     04 00 00 FF 
05c28     34 E4 85 F1 | 	sub	objptr, ##2100
05c2c     F2 14 02 FB | 	rdlong	arg02, objptr
05c30     43 00 00 FF 
05c34     8C E4 85 F1 | 	sub	objptr, ##34444
05c38     00 04 00 FF 
05c3c     00 14 0E F2 | 	cmp	arg02, ##524288 wz
05c40     47 00 00 AF 
05c44     BC E4 05 A1 |  if_e	add	objptr, ##36540
05c48     FF FF FF AF 
05c4c     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
05c50     47 00 00 AF 
05c54     BC E4 85 A1 |  if_e	sub	objptr, ##36540
05c58     30 FC BF FD | 	call	#_save_line
05c5c     43 00 00 FF 
05c60     8C E4 05 F1 | 	add	objptr, ##34444
05c64     F2 12 02 FB | 	rdlong	arg01, objptr
05c68     43 00 00 FF 
05c6c     8C E4 85 F1 | 	sub	objptr, ##34444
05c70     01 14 66 F6 | 	neg	arg02, #1
05c74     58 4B B1 FD | 	call	#_pslpoke
05c78                 | _add_line_at_end_ret
05c78     2D 00 64 FD | 	ret
05c7c                 | 
05c7c                 | ' 
05c7c                 | ' function compile_immediate(linetype as ulong) as integer
05c7c                 | _compile_immediate
05c7c     09 4A 05 F6 | 	mov	COUNT_, #9
05c80     A8 00 A0 FD | 	call	#pushregs_
05c84                 | _compile_immediate_enter
05c84     09 25 0A F6 | 	mov	local04, arg01 wz
05c88     00 26 06 F6 | 	mov	local05, #0
05c8c     00 28 06 F6 | 	mov	local06, #0
05c90                 | ' 
05c90                 | ' ' linetype=cont+1, linetype=0 immediate
05c90                 | ' '  : 1: this is the first part of the line that will continue
05c90                 | ' ' 2 - this is the continuation of the line
05c90                 | ' ' 3 - this is the last continued line
05c90                 | ' ' 4 - this is the one and only part
05c90                 | ' 
05c90                 | ' err=0
05c90                 | ' cmd=0
05c90                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
05c90     30 00 90 5D |  if_ne	jmp	#LR__0490
05c94     35 00 00 FF 
05c98     40 E4 05 F1 | 	add	objptr, ##27200
05c9c     F2 28 02 FB | 	rdlong	local06, objptr
05ca0     02 00 00 FF 
05ca4     34 E4 05 F1 | 	add	objptr, ##1076
05ca8     F2 02 68 FC | 	wrlong	#1, objptr
05cac     00 2A 06 F6 | 	mov	local07, #0
05cb0     13 00 00 FF 
05cb4     38 E4 05 F1 | 	add	objptr, ##9784
05cb8     F2 00 68 FC | 	wrlong	#0, objptr
05cbc     4A 00 00 FF 
05cc0     AC E4 85 F1 | 	sub	objptr, ##38060
05cc4                 | LR__0490
05cc4                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
05cc4     02 24 0E F2 | 	cmp	local04, #2 wz
05cc8     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05ccc     24 00 90 5D |  if_ne	jmp	#LR__0491
05cd0     35 00 00 FF 
05cd4     40 E4 05 F1 | 	add	objptr, ##27200
05cd8     F2 28 02 FB | 	rdlong	local06, objptr
05cdc     01 2A 06 F6 | 	mov	local07, #1
05ce0     02 00 00 FF 
05ce4     34 E4 05 F1 | 	add	objptr, ##1076
05ce8     F2 02 68 FC | 	wrlong	#1, objptr
05cec     37 00 00 FF 
05cf0     74 E4 85 F1 | 	sub	objptr, ##28276
05cf4                 | LR__0491
05cf4                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
05cf4     04 24 0E F2 | 	cmp	local04, #4 wz
05cf8     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
05cfc     30 00 90 5D |  if_ne	jmp	#LR__0492
05d00     35 00 00 FF 
05d04     48 E4 05 F1 | 	add	objptr, ##27208
05d08     F2 28 02 FB | 	rdlong	local06, objptr
05d0c     02 2A 06 F6 | 	mov	local07, #2
05d10     02 00 00 FF 
05d14     2C E4 05 F1 | 	add	objptr, ##1068
05d18     F2 04 68 FC | 	wrlong	#2, objptr
05d1c     13 00 00 FF 
05d20     38 E4 05 F1 | 	add	objptr, ##9784
05d24     F2 04 68 FC | 	wrlong	#2, objptr
05d28     4A 00 00 FF 
05d2c     AC E4 85 F1 | 	sub	objptr, ##38060
05d30                 | LR__0492
05d30                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
05d30     05 24 0E F2 | 	cmp	local04, #5 wz
05d34     44 00 90 5D |  if_ne	jmp	#LR__0493
05d38     37 00 00 FF 
05d3c     74 E4 05 F1 | 	add	objptr, ##28276
05d40     F2 FA 01 FB | 	rdlong	result1, objptr
05d44     FD 2A 02 F6 | 	mov	local07, result1
05d48     03 2A 66 F0 | 	shl	local07, #3
05d4c     02 00 00 FF 
05d50     38 E4 85 F1 | 	sub	objptr, ##1080
05d54     F2 2A 02 F1 | 	add	local07, objptr
05d58     04 2A 06 F1 | 	add	local07, #4
05d5c     15 29 02 FB | 	rdlong	local06, local07
05d60     FD 2A 02 F6 | 	mov	local07, result1
05d64     01 2A 06 F1 | 	add	local07, #1
05d68     02 00 00 FF 
05d6c     38 E4 05 F1 | 	add	objptr, ##1080
05d70     F2 2A 62 FC | 	wrlong	local07, objptr
05d74     37 00 00 FF 
05d78     74 E4 85 F1 | 	sub	objptr, ##28276
05d7c                 | LR__0493
05d7c     00 2C 06 F6 | 	mov	local08, #0
05d80                 | ' vars=0
05d80                 | ' 'print  "In compile_immediate cmd=:", cmd
05d80                 | ' 451 select case cmd
05d80     5C 28 0E F2 | 	cmp	local06, #92 wz
05d84     28 02 90 AD |  if_e	jmp	#LR__0494
05d88     47 28 0E F2 | 	cmp	local06, #71 wz
05d8c     2C 02 90 AD |  if_e	jmp	#LR__0495
05d90     59 28 0E F2 | 	cmp	local06, #89 wz
05d94     30 02 90 AD |  if_e	jmp	#LR__0496
05d98     45 28 0E F2 | 	cmp	local06, #69 wz
05d9c     34 02 90 AD |  if_e	jmp	#LR__0497
05da0     69 28 0E F2 | 	cmp	local06, #105 wz
05da4     38 02 90 AD |  if_e	jmp	#LR__0498
05da8     40 28 0E F2 | 	cmp	local06, #64 wz
05dac     B8 04 90 AD |  if_e	jmp	#LR__0555
05db0     49 28 0E F2 | 	cmp	local06, #73 wz
05db4     34 02 90 AD |  if_e	jmp	#LR__0499
05db8     50 28 0E F2 | 	cmp	local06, #80 wz
05dbc     38 02 90 AD |  if_e	jmp	#LR__0500
05dc0     68 28 0E F2 | 	cmp	local06, #104 wz
05dc4     3C 02 90 AD |  if_e	jmp	#LR__0501
05dc8     74 28 0E F2 | 	cmp	local06, #116 wz
05dcc     40 02 90 AD |  if_e	jmp	#LR__0502
05dd0     73 28 0E F2 | 	cmp	local06, #115 wz
05dd4     44 02 90 AD |  if_e	jmp	#LR__0503
05dd8     6C 28 0E F2 | 	cmp	local06, #108 wz
05ddc     48 02 90 AD |  if_e	jmp	#LR__0504
05de0     89 28 0E F2 | 	cmp	local06, #137 wz
05de4     80 04 90 AD |  if_e	jmp	#LR__0555
05de8     72 28 0E F2 | 	cmp	local06, #114 wz
05dec     44 02 90 AD |  if_e	jmp	#LR__0505
05df0     5D 28 0E F2 | 	cmp	local06, #93 wz
05df4     70 04 90 AD |  if_e	jmp	#LR__0555
05df8     96 28 0E F2 | 	cmp	local06, #150 wz
05dfc     3C 02 90 AD |  if_e	jmp	#LR__0506
05e00     43 28 0E F2 | 	cmp	local06, #67 wz
05e04     3C 02 90 AD |  if_e	jmp	#LR__0507
05e08     5A 28 0E F2 | 	cmp	local06, #90 wz
05e0c     40 02 90 AD |  if_e	jmp	#LR__0508
05e10     AB 28 0E F2 | 	cmp	local06, #171 wz
05e14     50 04 90 AD |  if_e	jmp	#LR__0555
05e18     4E 28 0E F2 | 	cmp	local06, #78 wz
05e1c     38 02 90 AD |  if_e	jmp	#LR__0509
05e20     A9 28 0E F2 | 	cmp	local06, #169 wz
05e24     4C 02 90 AD |  if_e	jmp	#LR__0511
05e28     46 28 0E F2 | 	cmp	local06, #70 wz
05e2c     4C 02 90 AD |  if_e	jmp	#LR__0512
05e30     71 28 0E F2 | 	cmp	local06, #113 wz
05e34     50 02 90 AD |  if_e	jmp	#LR__0513
05e38     60 28 0E F2 | 	cmp	local06, #96 wz
05e3c     54 02 90 AD |  if_e	jmp	#LR__0514
05e40     4A 28 0E F2 | 	cmp	local06, #74 wz
05e44     58 02 90 AD |  if_e	jmp	#LR__0515
05e48     48 28 0E F2 | 	cmp	local06, #72 wz
05e4c     58 02 90 AD |  if_e	jmp	#LR__0516
05e50     58 28 0E F2 | 	cmp	local06, #88 wz
05e54     5C 02 90 AD |  if_e	jmp	#LR__0517
05e58     5F 28 0E F2 | 	cmp	local06, #95 wz
05e5c     5C 02 90 AD |  if_e	jmp	#LR__0518
05e60     8A 28 0E F2 | 	cmp	local06, #138 wz
05e64     60 02 90 AD |  if_e	jmp	#LR__0519
05e68     4C 28 0E F2 | 	cmp	local06, #76 wz
05e6c     64 02 90 AD |  if_e	jmp	#LR__0520
05e70     52 28 0E F2 | 	cmp	local06, #82 wz
05e74     68 02 90 AD |  if_e	jmp	#LR__0521
05e78     97 28 0E F2 | 	cmp	local06, #151 wz
05e7c     6C 02 90 AD |  if_e	jmp	#LR__0522
05e80     61 28 0E F2 | 	cmp	local06, #97 wz
05e84     70 02 90 AD |  if_e	jmp	#LR__0523
05e88     63 28 0E F2 | 	cmp	local06, #99 wz
05e8c     74 02 90 AD |  if_e	jmp	#LR__0524
05e90     41 28 0E F2 | 	cmp	local06, #65 wz
05e94     D0 03 90 AD |  if_e	jmp	#LR__0555
05e98     4B 28 0E F2 | 	cmp	local06, #75 wz
05e9c     70 02 90 AD |  if_e	jmp	#LR__0525
05ea0     5E 28 0E F2 | 	cmp	local06, #94 wz
05ea4     70 02 90 AD |  if_e	jmp	#LR__0526
05ea8     7C 28 0E F2 | 	cmp	local06, #124 wz
05eac     74 02 90 AD |  if_e	jmp	#LR__0527
05eb0     7D 28 0E F2 | 	cmp	local06, #125 wz
05eb4     78 02 90 AD |  if_e	jmp	#LR__0528
05eb8     7E 28 0E F2 | 	cmp	local06, #126 wz
05ebc     7C 02 90 AD |  if_e	jmp	#LR__0529
05ec0     7F 28 0E F2 | 	cmp	local06, #127 wz
05ec4     80 02 90 AD |  if_e	jmp	#LR__0530
05ec8     80 28 0E F2 | 	cmp	local06, #128 wz
05ecc     84 02 90 AD |  if_e	jmp	#LR__0531
05ed0     55 28 0E F2 | 	cmp	local06, #85 wz
05ed4     88 02 90 AD |  if_e	jmp	#LR__0532
05ed8     75 28 0E F2 | 	cmp	local06, #117 wz
05edc     8C 02 90 AD |  if_e	jmp	#LR__0533
05ee0     42 28 0E F2 | 	cmp	local06, #66 wz
05ee4     90 02 90 AD |  if_e	jmp	#LR__0534
05ee8     95 28 0E F2 | 	cmp	local06, #149 wz
05eec     94 02 90 AD |  if_e	jmp	#LR__0535
05ef0     AC 28 0E F2 | 	cmp	local06, #172 wz
05ef4     70 03 90 AD |  if_e	jmp	#LR__0555
05ef8     81 28 0E F2 | 	cmp	local06, #129 wz
05efc     90 02 90 AD |  if_e	jmp	#LR__0536
05f00     44 28 0E F2 | 	cmp	local06, #68 wz
05f04     94 02 90 AD |  if_e	jmp	#LR__0537
05f08     88 28 0E F2 | 	cmp	local06, #136 wz
05f0c     58 03 90 AD |  if_e	jmp	#LR__0555
05f10     92 28 0E F2 | 	cmp	local06, #146 wz
05f14     90 02 90 AD |  if_e	jmp	#LR__0538
05f18     AA 28 0E F2 | 	cmp	local06, #170 wz
05f1c     48 03 90 AD |  if_e	jmp	#LR__0555
05f20     4D 28 0E F2 | 	cmp	local06, #77 wz
05f24     88 02 90 AD |  if_e	jmp	#LR__0539
05f28     51 28 0E F2 | 	cmp	local06, #81 wz
05f2c     8C 02 90 AD |  if_e	jmp	#LR__0540
05f30     8E 28 0E F2 | 	cmp	local06, #142 wz
05f34     90 02 90 AD |  if_e	jmp	#LR__0541
05f38     90 28 0E F2 | 	cmp	local06, #144 wz
05f3c     94 02 90 AD |  if_e	jmp	#LR__0542
05f40     8D 28 0E F2 | 	cmp	local06, #141 wz
05f44     98 02 90 AD |  if_e	jmp	#LR__0543
05f48     8C 28 0E F2 | 	cmp	local06, #140 wz
05f4c     9C 02 90 AD |  if_e	jmp	#LR__0544
05f50     91 28 0E F2 | 	cmp	local06, #145 wz
05f54     A0 02 90 AD |  if_e	jmp	#LR__0545
05f58     8B 28 0E F2 | 	cmp	local06, #139 wz
05f5c     A4 02 90 AD |  if_e	jmp	#LR__0546
05f60     8F 28 0E F2 | 	cmp	local06, #143 wz
05f64     A8 02 90 AD |  if_e	jmp	#LR__0547
05f68     6D 28 0E F2 | 	cmp	local06, #109 wz
05f6c     AC 02 90 AD |  if_e	jmp	#LR__0548
05f70     70 28 0E F2 | 	cmp	local06, #112 wz
05f74     F0 02 90 AD |  if_e	jmp	#LR__0555
05f78     56 28 0E F2 | 	cmp	local06, #86 wz
05f7c     A8 02 90 AD |  if_e	jmp	#LR__0549
05f80     57 28 0E F2 | 	cmp	local06, #87 wz
05f84     E0 02 90 AD |  if_e	jmp	#LR__0555
05f88     79 28 0E F2 | 	cmp	local06, #121 wz
05f8c     A4 02 90 AD |  if_e	jmp	#LR__0550
05f90     77 28 0E F2 | 	cmp	local06, #119 wz
05f94     A8 02 90 AD |  if_e	jmp	#LR__0551
05f98     78 28 0E F2 | 	cmp	local06, #120 wz
05f9c     AC 02 90 AD |  if_e	jmp	#LR__0552
05fa0     01 00 00 FF 
05fa4     04 28 0E F2 | 	cmp	local06, ##516 wz
05fa8     AC 02 90 AD |  if_e	jmp	#LR__0553
05fac     B0 02 90 FD | 	jmp	#LR__0554
05fb0                 | LR__0494
05fb0     B4 0C B0 FD | 	call	#_compile_fun_2p
05fb4     FD 26 02 F6 | 	mov	local05, result1
05fb8     AC 02 90 FD | 	jmp	#LR__0555
05fbc                 | LR__0495
05fbc     E8 0D B0 FD | 	call	#_compile_fun_4p
05fc0     FD 26 02 F6 | 	mov	local05, result1
05fc4     A0 02 90 FD | 	jmp	#LR__0555
05fc8                 | LR__0496
05fc8     6C 32 B0 FD | 	call	#_expr
05fcc                 | ' expr()
05fcc                 | ' return 0
05fcc     00 26 06 F6 | 	mov	local05, #0
05fd0     94 02 90 FD | 	jmp	#LR__0555
05fd4                 | LR__0497
05fd4     04 0D B0 FD | 	call	#_compile_fun_3p
05fd8     FD 26 02 F6 | 	mov	local05, result1
05fdc     88 02 90 FD | 	jmp	#LR__0555
05fe0                 | LR__0498
05fe0     54 32 B0 FD | 	call	#_expr
05fe4                 | ' expr()
05fe4                 | ' return 0
05fe4     00 26 06 F6 | 	mov	local05, #0
05fe8     7C 02 90 FD | 	jmp	#LR__0555
05fec                 | LR__0499
05fec     48 32 B0 FD | 	call	#_expr
05ff0                 | ' expr()
05ff0                 | ' return 0
05ff0     00 26 06 F6 | 	mov	local05, #0
05ff4     70 02 90 FD | 	jmp	#LR__0555
05ff8                 | LR__0500
05ff8     4C 10 B0 FD | 	call	#_compile_fun_varp
05ffc     FD 2C 02 F6 | 	mov	local08, result1
06000     64 02 90 FD | 	jmp	#LR__0555
06004                 | LR__0501
06004     30 32 B0 FD | 	call	#_expr
06008                 | ' expr()
06008                 | ' return 0
06008     00 26 06 F6 | 	mov	local05, #0
0600c     58 02 90 FD | 	jmp	#LR__0555
06010                 | LR__0502
06010     34 10 B0 FD | 	call	#_compile_fun_varp
06014     FD 2C 02 F6 | 	mov	local08, result1
06018     4C 02 90 FD | 	jmp	#LR__0555
0601c                 | LR__0503
0601c     28 10 B0 FD | 	call	#_compile_fun_varp
06020     FD 2C 02 F6 | 	mov	local08, result1
06024     40 02 90 FD | 	jmp	#LR__0555
06028                 | LR__0504
06028     A0 0E B0 FD | 	call	#_compile_fun_5p
0602c     FD 26 02 F6 | 	mov	local05, result1
06030     34 02 90 FD | 	jmp	#LR__0555
06034                 | LR__0505
06034     FC 19 B0 FD | 	call	#_compile_dim
06038     E8 02 90 FD | 	jmp	#LR__0556
0603c                 | LR__0506
0603c     28 0C B0 FD | 	call	#_compile_fun_2p
06040     24 02 90 FD | 	jmp	#LR__0555
06044                 | LR__0507
06044     20 0C B0 FD | 	call	#_compile_fun_2p
06048     FD 26 02 F6 | 	mov	local05, result1
0604c     18 02 90 FD | 	jmp	#LR__0555
06050                 | LR__0508
06050     B8 18 B0 FD | 	call	#_compile_else
06054     CC 02 90 FD | 	jmp	#LR__0556
06058                 | LR__0509
06058     01 24 16 F2 | 	cmp	local04, #1 wc
0605c     08 00 90 CD |  if_b	jmp	#LR__0510
06060     E4 2D B0 FD | 	call	#_compile_goto
06064     BC 02 90 FD | 	jmp	#LR__0556
06068                 | LR__0510
06068     19 12 06 F6 | 	mov	arg01, #25
0606c     FC 45 B1 FD | 	call	#_printerror
06070     B0 02 90 FD | 	jmp	#LR__0556
06074                 | LR__0511
06074     68 2D B0 FD | 	call	#_compile_gosub
06078     A8 02 90 FD | 	jmp	#LR__0556
0607c                 | LR__0512
0607c     5C 0C B0 FD | 	call	#_compile_fun_3p
06080     FD 26 02 F6 | 	mov	local05, result1
06084     E0 01 90 FD | 	jmp	#LR__0555
06088                 | LR__0513
06088     1C 0D B0 FD | 	call	#_compile_fun_4p
0608c     FD 26 02 F6 | 	mov	local05, result1
06090     D4 01 90 FD | 	jmp	#LR__0555
06094                 | LR__0514
06094     A0 31 B0 FD | 	call	#_expr
06098                 | ' expr()
06098                 | ' return 0
06098     00 26 06 F6 | 	mov	local05, #0
0609c     C8 01 90 FD | 	jmp	#LR__0555
060a0                 | LR__0515
060a0     A0 20 B0 FD | 	call	#_compile_for
060a4     7C 02 90 FD | 	jmp	#LR__0556
060a8                 | LR__0516
060a8     FC 0C B0 FD | 	call	#_compile_fun_4p
060ac     FD 26 02 F6 | 	mov	local05, result1
060b0     B4 01 90 FD | 	jmp	#LR__0555
060b4                 | LR__0517
060b4     14 17 B0 FD | 	call	#_compile_if
060b8     68 02 90 FD | 	jmp	#LR__0556
060bc                 | LR__0518
060bc     78 31 B0 FD | 	call	#_expr
060c0                 | ' expr()
060c0                 | ' return 0
060c0     00 26 06 F6 | 	mov	local05, #0
060c4     A0 01 90 FD | 	jmp	#LR__0555
060c8                 | LR__0519
060c8     6C 31 B0 FD | 	call	#_expr
060cc                 | ' expr()
060cc                 | ' return 0
060cc     00 26 06 F6 | 	mov	local05, #0
060d0     94 01 90 FD | 	jmp	#LR__0555
060d4                 | LR__0520
060d4     70 0F B0 FD | 	call	#_compile_fun_varp
060d8     FD 2C 02 F6 | 	mov	local08, result1
060dc     88 01 90 FD | 	jmp	#LR__0555
060e0                 | LR__0521
060e0     64 0F B0 FD | 	call	#_compile_fun_varp
060e4     FD 2C 02 F6 | 	mov	local08, result1
060e8     7C 01 90 FD | 	jmp	#LR__0555
060ec                 | LR__0522
060ec     78 0B B0 FD | 	call	#_compile_fun_2p
060f0     FD 26 02 F6 | 	mov	local05, result1
060f4     70 01 90 FD | 	jmp	#LR__0555
060f8                 | LR__0523
060f8     3C 31 B0 FD | 	call	#_expr
060fc                 | ' expr()
060fc                 | ' return 0
060fc     00 26 06 F6 | 	mov	local05, #0
06100     64 01 90 FD | 	jmp	#LR__0555
06104                 | LR__0524
06104     30 31 B0 FD | 	call	#_expr
06108                 | ' expr()
06108                 | ' return 0
06108     00 26 06 F6 | 	mov	local05, #0
0610c     58 01 90 FD | 	jmp	#LR__0555
06110                 | LR__0525
06110     1C 2B B0 FD | 	call	#_compile_next
06114     0C 02 90 FD | 	jmp	#LR__0556
06118                 | LR__0526
06118     1C 31 B0 FD | 	call	#_expr
0611c                 | ' expr()
0611c                 | ' return 0
0611c     00 26 06 F6 | 	mov	local05, #0
06120     44 01 90 FD | 	jmp	#LR__0555
06124                 | LR__0527
06124     10 31 B0 FD | 	call	#_expr
06128                 | ' expr()
06128                 | ' return 0
06128     00 26 06 F6 | 	mov	local05, #0
0612c     38 01 90 FD | 	jmp	#LR__0555
06130                 | LR__0528
06130     04 31 B0 FD | 	call	#_expr
06134                 | ' expr()
06134                 | ' return 0
06134     00 26 06 F6 | 	mov	local05, #0
06138     2C 01 90 FD | 	jmp	#LR__0555
0613c                 | LR__0529
0613c     F8 30 B0 FD | 	call	#_expr
06140                 | ' expr()
06140                 | ' return 0
06140     00 26 06 F6 | 	mov	local05, #0
06144     20 01 90 FD | 	jmp	#LR__0555
06148                 | LR__0530
06148     5C 0C B0 FD | 	call	#_compile_fun_4p
0614c     FD 26 02 F6 | 	mov	local05, result1
06150     14 01 90 FD | 	jmp	#LR__0555
06154                 | LR__0531
06154     E0 30 B0 FD | 	call	#_expr
06158                 | ' expr()
06158                 | ' return 0
06158     00 26 06 F6 | 	mov	local05, #0
0615c     08 01 90 FD | 	jmp	#LR__0555
06160                 | LR__0532
06160     04 0B B0 FD | 	call	#_compile_fun_2p
06164     FD 26 02 F6 | 	mov	local05, result1
06168     FC 00 90 FD | 	jmp	#LR__0555
0616c                 | LR__0533
0616c     D8 0E B0 FD | 	call	#_compile_fun_varp
06170     FD 2C 02 F6 | 	mov	local08, result1
06174     F0 00 90 FD | 	jmp	#LR__0555
06178                 | LR__0534
06178     EC 0A B0 FD | 	call	#_compile_fun_2p
0617c     FD 26 02 F6 | 	mov	local05, result1
06180     E4 00 90 FD | 	jmp	#LR__0555
06184                 | LR__0535
06184     E0 0A B0 FD | 	call	#_compile_fun_2p
06188     FD 26 02 F6 | 	mov	local05, result1
0618c     D8 00 90 FD | 	jmp	#LR__0555
06190                 | LR__0536
06190     D4 0A B0 FD | 	call	#_compile_fun_2p
06194     FD 26 02 F6 | 	mov	local05, result1
06198     CC 00 90 FD | 	jmp	#LR__0555
0619c                 | LR__0537
0619c     54 0F B0 FD | 	call	#_compile_print
061a0     FD 26 02 F6 | 	mov	local05, result1
061a4     7C 01 90 FD | 	jmp	#LR__0556
061a8                 | LR__0538
061a8     8C 30 B0 FD | 	call	#_expr
061ac                 | ' expr()
061ac                 | ' return 0
061ac     B8 00 90 FD | 	jmp	#LR__0555
061b0                 | LR__0539
061b0     94 0E B0 FD | 	call	#_compile_fun_varp
061b4     FD 2C 02 F6 | 	mov	local08, result1
061b8     AC 00 90 FD | 	jmp	#LR__0555
061bc                 | LR__0540
061bc     88 0E B0 FD | 	call	#_compile_fun_varp
061c0     FD 2C 02 F6 | 	mov	local08, result1
061c4     A0 00 90 FD | 	jmp	#LR__0555
061c8                 | LR__0541
061c8     9C 0A B0 FD | 	call	#_compile_fun_2p
061cc     FD 26 02 F6 | 	mov	local05, result1
061d0     94 00 90 FD | 	jmp	#LR__0555
061d4                 | LR__0542
061d4     90 0A B0 FD | 	call	#_compile_fun_2p
061d8     FD 26 02 F6 | 	mov	local05, result1
061dc     88 00 90 FD | 	jmp	#LR__0555
061e0                 | LR__0543
061e0     84 0A B0 FD | 	call	#_compile_fun_2p
061e4     FD 26 02 F6 | 	mov	local05, result1
061e8     7C 00 90 FD | 	jmp	#LR__0555
061ec                 | LR__0544
061ec     78 0A B0 FD | 	call	#_compile_fun_2p
061f0     FD 26 02 F6 | 	mov	local05, result1
061f4     70 00 90 FD | 	jmp	#LR__0555
061f8                 | LR__0545
061f8     6C 0A B0 FD | 	call	#_compile_fun_2p
061fc     FD 26 02 F6 | 	mov	local05, result1
06200     64 00 90 FD | 	jmp	#LR__0555
06204                 | LR__0546
06204     60 0A B0 FD | 	call	#_compile_fun_2p
06208     FD 26 02 F6 | 	mov	local05, result1
0620c     58 00 90 FD | 	jmp	#LR__0555
06210                 | LR__0547
06210     54 0A B0 FD | 	call	#_compile_fun_2p
06214     FD 26 02 F6 | 	mov	local05, result1
06218     4C 00 90 FD | 	jmp	#LR__0555
0621c                 | LR__0548
0621c     BC 0A B0 FD | 	call	#_compile_fun_3p
06220     FD 26 02 F6 | 	mov	local05, result1
06224     40 00 90 FD | 	jmp	#LR__0555
06228                 | LR__0549
06228     0C 30 B0 FD | 	call	#_expr
0622c                 | ' expr()
0622c                 | ' return 0
0622c     00 26 06 F6 | 	mov	local05, #0
06230     34 00 90 FD | 	jmp	#LR__0555
06234                 | LR__0550
06234     30 0A B0 FD | 	call	#_compile_fun_2p
06238     FD 26 02 F6 | 	mov	local05, result1
0623c     28 00 90 FD | 	jmp	#LR__0555
06240                 | LR__0551
06240     24 0A B0 FD | 	call	#_compile_fun_2p
06244     FD 26 02 F6 | 	mov	local05, result1
06248     1C 00 90 FD | 	jmp	#LR__0555
0624c                 | LR__0552
0624c     18 0A B0 FD | 	call	#_compile_fun_2p
06250     FD 26 02 F6 | 	mov	local05, result1
06254     10 00 90 FD | 	jmp	#LR__0555
06258                 | LR__0553
06258     E8 01 B0 FD | 	call	#_compile_array_assign
0625c     C4 00 90 FD | 	jmp	#LR__0556
06260                 | LR__0554
06260     48 09 B0 FD | 	call	#_compile_unknown
06264     BC 00 90 FD | 	jmp	#LR__0556
06268                 | LR__0555
06268     14 23 02 F6 | 	mov	local03, local06
0626c     16 1F 02 F6 | 	mov	local01, local08
06270     0F 2B 02 F6 | 	mov	local07, local01
06274     10 2F 02 F6 | 	mov	local09, local02
06278     11 29 02 F6 | 	mov	local06, local03
0627c     4A 00 00 FF 
06280     AC E4 05 F1 | 	add	objptr, ##38060
06284     F2 1E 02 FB | 	rdlong	local01, objptr
06288     0F 2D 02 F6 | 	mov	local08, local01
0628c     01 2C 66 F0 | 	shl	local08, #1
06290     0F 2D 02 F1 | 	add	local08, local01
06294     02 2C 66 F0 | 	shl	local08, #2
06298     03 00 00 FF 
0629c     00 E4 85 F1 | 	sub	objptr, ##1536
062a0     F2 2C 02 F1 | 	add	local08, objptr
062a4     16 2B 62 FC | 	wrlong	local07, local08
062a8     03 00 00 FF 
062ac     00 E4 05 F1 | 	add	objptr, ##1536
062b0     F2 1E 02 FB | 	rdlong	local01, objptr
062b4     0F 2D 02 F6 | 	mov	local08, local01
062b8     01 2C 66 F0 | 	shl	local08, #1
062bc     0F 2D 02 F1 | 	add	local08, local01
062c0     02 2C 66 F0 | 	shl	local08, #2
062c4     03 00 00 FF 
062c8     00 E4 85 F1 | 	sub	objptr, ##1536
062cc     F2 2C 02 F1 | 	add	local08, objptr
062d0     04 2C 06 F1 | 	add	local08, #4
062d4     16 2F 62 FC | 	wrlong	local09, local08
062d8     03 00 00 FF 
062dc     00 E4 05 F1 | 	add	objptr, ##1536
062e0     F2 1E 02 FB | 	rdlong	local01, objptr
062e4     0F 2D 02 F6 | 	mov	local08, local01
062e8     01 2C 66 F0 | 	shl	local08, #1
062ec     0F 2D 02 F1 | 	add	local08, local01
062f0     02 2C 66 F0 | 	shl	local08, #2
062f4     03 00 00 FF 
062f8     00 E4 85 F1 | 	sub	objptr, ##1536
062fc     F2 2C 02 F1 | 	add	local08, objptr
06300     08 2C 06 F1 | 	add	local08, #8
06304     16 29 62 FC | 	wrlong	local06, local08
06308     03 00 00 FF 
0630c     00 E4 05 F1 | 	add	objptr, ##1536
06310     F2 2A 02 FB | 	rdlong	local07, objptr
06314     01 2A 06 F1 | 	add	local07, #1
06318     F2 2A 62 FC | 	wrlong	local07, objptr
0631c     4A 00 00 FF 
06320     AC E4 85 F1 | 	sub	objptr, ##38060
06324                 | LR__0556
06324                 | ' 
06324                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
06324                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
06324     00 24 0E F2 | 	cmp	local04, #0 wz
06328     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
0632c     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
06330     38 00 90 5D |  if_ne	jmp	#LR__0557
06334     4A 00 00 FF 
06338     AC E4 05 F1 | 	add	objptr, ##38060
0633c     F2 2C 02 FB | 	rdlong	local08, objptr
06340     16 1F 02 F6 | 	mov	local01, local08
06344     01 1E 66 F0 | 	shl	local01, #1
06348     16 1F 02 F1 | 	add	local01, local08
0634c     02 1E 66 F0 | 	shl	local01, #2
06350     03 00 00 FF 
06354     00 E4 85 F1 | 	sub	objptr, ##1536
06358     F2 1E 02 F1 | 	add	local01, objptr
0635c     08 1E 06 F1 | 	add	local01, #8
06360     0F FD 6B FC | 	wrlong	#510, local01
06364     47 00 00 FF 
06368     AC E4 85 F1 | 	sub	objptr, ##36524
0636c                 | LR__0557
0636c                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
0636c     4A 00 00 FF 
06370     AC E4 05 F1 | 	add	objptr, ##38060
06374     F2 1E 02 FB | 	rdlong	local01, objptr
06378     4A 00 00 FF 
0637c     AC E4 85 F1 | 	sub	objptr, ##38060
06380     97 58 48 FB | 	callpa	#(@LR__0560-@LR__0558)>>2,fcache_load_ptr_
06384                 | LR__0558
06384     0F 2D 02 F6 | 	mov	local08, local01
06388     01 2C 66 F0 | 	shl	local08, #1
0638c     0F 2D 02 F1 | 	add	local08, local01
06390     02 2C 66 F0 | 	shl	local08, #2
06394     47 00 00 FF 
06398     AC E4 05 F1 | 	add	objptr, ##36524
0639c     F2 2C 02 F1 | 	add	local08, objptr
063a0     08 2C 06 F1 | 	add	local08, #8
063a4     16 2D 02 FB | 	rdlong	local08, local08
063a8     9B 2C 0E F2 | 	cmp	local08, #155 wz
063ac     47 00 00 FF 
063b0     AC E4 85 F1 | 	sub	objptr, ##36524
063b4     70 00 90 5D |  if_ne	jmp	#LR__0559
063b8     0F 2D 02 F6 | 	mov	local08, local01
063bc     01 2C 86 F1 | 	sub	local08, #1
063c0     16 2F 02 F6 | 	mov	local09, local08
063c4     01 2E 66 F0 | 	shl	local09, #1
063c8     16 2F 02 F1 | 	add	local09, local08
063cc     02 2E 66 F0 | 	shl	local09, #2
063d0     47 00 00 FF 
063d4     AC E4 05 F1 | 	add	objptr, ##36524
063d8     F2 2E 02 F1 | 	add	local09, objptr
063dc     08 2E 06 F1 | 	add	local09, #8
063e0     17 2D 02 FB | 	rdlong	local08, local09
063e4     11 2C 0E F2 | 	cmp	local08, #17 wz
063e8     47 00 00 FF 
063ec     AC E4 85 F1 | 	sub	objptr, ##36524
063f0     34 00 90 5D |  if_ne	jmp	#LR__0559
063f4     0F 2F 02 F6 | 	mov	local09, local01
063f8     01 2E 86 F1 | 	sub	local09, #1
063fc     17 2D 02 F6 | 	mov	local08, local09
06400     01 2C 66 F0 | 	shl	local08, #1
06404     17 2D 02 F1 | 	add	local08, local09
06408     02 2C 66 F0 | 	shl	local08, #2
0640c     47 00 00 FF 
06410     AC E4 05 F1 | 	add	objptr, ##36524
06414     F2 2C 02 F1 | 	add	local08, objptr
06418     08 2C 06 F1 | 	add	local08, #8
0641c     16 25 68 FC | 	wrlong	#18, local08
06420     47 00 00 FF 
06424     AC E4 85 F1 | 	sub	objptr, ##36524
06428                 | LR__0559
06428     01 1E 86 F1 | 	sub	local01, #1
0642c     01 1E 56 F2 | 	cmps	local01, #1 wc
06430     50 FF 9F 3D |  if_ae	jmp	#LR__0558
06434                 | LR__0560
06434                 | ' '  print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
06434                 | ' return err
06434     13 FB 01 F6 | 	mov	result1, local05
06438     A7 F0 03 F6 | 	mov	ptra, fp
0643c     B2 00 A0 FD | 	call	#popregs_
06440                 | _compile_immediate_ret
06440     2D 00 64 FD | 	ret
06444                 | 
06444                 | ' 
06444                 | ' sub compile_array_assign
06444                 | _compile_array_assign
06444     0A 4A 05 F6 | 	mov	COUNT_, #10
06448     A8 00 A0 FD | 	call	#pushregs_
0644c     00 24 06 F6 | 	mov	local04, #0
06450     37 00 00 FF 
06454     74 E4 05 F1 | 	add	objptr, ##28276
06458     F2 26 02 FB | 	rdlong	local05, objptr
0645c     13 FB 01 F6 | 	mov	result1, local05
06460     01 FA 85 F1 | 	sub	result1, #1
06464     03 FA 65 F0 | 	shl	result1, #3
06468     02 00 00 FF 
0646c     38 E4 85 F1 | 	sub	objptr, ##1080
06470     F2 FA 01 F1 | 	add	result1, objptr
06474     FD 28 02 FB | 	rdlong	local06, result1
06478                 | ' numpar=0
06478                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
06478                 | ' ' todo here: recognize params and t1.result.twowords=numpar
06478                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
06478                 | ' if lparts(ct).token=token_lpar then
06478     03 26 66 F0 | 	shl	local05, #3
0647c     F2 26 02 F1 | 	add	local05, objptr
06480     04 26 06 F1 | 	add	local05, #4
06484     13 27 02 FB | 	rdlong	local05, local05
06488     15 26 0E F2 | 	cmp	local05, #21 wz
0648c     35 00 00 FF 
06490     3C E4 85 F1 | 	sub	objptr, ##27196
06494     D4 01 90 5D |  if_ne	jmp	#LR__0574
06498     37 00 00 FF 
0649c     74 E4 05 F1 | 	add	objptr, ##28276
064a0     F2 2A 02 FB | 	rdlong	local07, objptr
064a4     01 2A 06 F1 | 	add	local07, #1
064a8     F2 2A 62 FC | 	wrlong	local07, objptr
064ac     37 00 00 FF 
064b0     74 E4 85 F1 | 	sub	objptr, ##28276
064b4                 | '   ct+=1 											' omit this lpar, this is for expr list
064b4                 | '   do
064b4                 | LR__0570
064b4     80 2D B0 FD | 	call	#_expr
064b8     37 00 00 FF 
064bc     74 E4 05 F1 | 	add	objptr, ##28276
064c0     F2 26 02 FB | 	rdlong	local05, objptr
064c4     01 26 06 F1 | 	add	local05, #1
064c8     F2 26 62 FC | 	wrlong	local05, objptr
064cc     01 24 06 F1 | 	add	local04, #1
064d0     01 26 86 F1 | 	sub	local05, #1
064d4     03 26 66 F0 | 	shl	local05, #3
064d8     02 00 00 FF 
064dc     38 E4 85 F1 | 	sub	objptr, ##1080
064e0     F2 26 02 F1 | 	add	local05, objptr
064e4     04 26 06 F1 | 	add	local05, #4
064e8     13 2B 02 FB | 	rdlong	local07, local05
064ec     14 2A 0E F2 | 	cmp	local07, #20 wz
064f0     35 00 00 FF 
064f4     3C E4 85 F1 | 	sub	objptr, ##27196
064f8     34 00 90 AD |  if_e	jmp	#LR__0571
064fc     37 00 00 FF 
06500     74 E4 05 F1 | 	add	objptr, ##28276
06504     F2 2A 02 FB | 	rdlong	local07, objptr
06508     03 2A 66 F0 | 	shl	local07, #3
0650c     02 00 00 FF 
06510     38 E4 85 F1 | 	sub	objptr, ##1080
06514     F2 2A 02 F1 | 	add	local07, objptr
06518     04 2A 06 F1 | 	add	local07, #4
0651c     15 2B 02 FB | 	rdlong	local07, local07
06520     FE 2B 0E F2 | 	cmp	local07, #510 wz
06524     35 00 00 FF 
06528     3C E4 85 F1 | 	sub	objptr, ##27196
0652c     84 FF 9F 5D |  if_ne	jmp	#LR__0570
06530                 | LR__0571
06530     37 00 00 FF 
06534     74 E4 05 F1 | 	add	objptr, ##28276
06538     F2 2A 02 FB | 	rdlong	local07, objptr
0653c     01 2A 06 F1 | 	add	local07, #1
06540     F2 2A 62 FC | 	wrlong	local07, objptr
06544     37 00 00 FF 
06548     74 E4 85 F1 | 	sub	objptr, ##28276
0654c     E8 2C B0 FD | 	call	#_expr
06550     01 2C 66 F6 | 	neg	local08, #1
06554     00 2E 06 F6 | 	mov	local09, #0
06558                 | ' '   print "in array_assign, rpar found, numpar=",numpar
06558                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
06558                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
06558                 | ' ct+=1 : expr()
06558                 | ' ' now find the vae
06558                 | ' 
06558                 | ' j=-1 : i=0 : do : 
06558                 | LR__0572
06558                 | '   if variables(i).name=varname$ then j=i: exit loop
06558     17 27 02 F6 | 	mov	local05, local09
0655c     04 26 66 F0 | 	shl	local05, #4
06560     15 00 00 FF 
06564     28 E4 05 F1 | 	add	objptr, ##10792
06568     F2 26 02 F1 | 	add	local05, objptr
0656c     13 13 02 FB | 	rdlong	arg01, local05
06570     14 15 02 F6 | 	mov	arg02, local06
06574     15 00 00 FF 
06578     28 E4 85 F1 | 	sub	objptr, ##10792
0657c     BC 85 B1 FD | 	call	#__system___string_cmp
06580     00 FA 0D F2 | 	cmp	result1, #0 wz
06584     17 2D 02 A6 |  if_e	mov	local08, local09
06588     20 00 90 AD |  if_e	jmp	#LR__0573
0658c     01 2E 06 F1 | 	add	local09, #1
06590     35 00 00 FF 
06594     38 E4 05 F1 | 	add	objptr, ##27192
06598     F2 2A 02 FB | 	rdlong	local07, objptr
0659c     35 00 00 FF 
065a0     38 E4 85 F1 | 	sub	objptr, ##27192
065a4     15 2F 5A F2 | 	cmps	local09, local07 wcz
065a8     AC FF 9F ED |  if_be	jmp	#LR__0572
065ac                 | LR__0573
065ac     16 1F 02 F6 | 	mov	local01, local08
065b0     12 21 02 F6 | 	mov	local02, local04
065b4     17 22 06 F6 | 	mov	local03, #23
065b8     0F 2B 02 F6 | 	mov	local07, local01
065bc     10 31 02 F6 | 	mov	local10, local02
065c0     11 2D 02 F6 | 	mov	local08, local03
065c4     4A 00 00 FF 
065c8     AC E4 05 F1 | 	add	objptr, ##38060
065cc     F2 1E 02 FB | 	rdlong	local01, objptr
065d0     0F 2F 02 F6 | 	mov	local09, local01
065d4     01 2E 66 F0 | 	shl	local09, #1
065d8     0F 2F 02 F1 | 	add	local09, local01
065dc     02 2E 66 F0 | 	shl	local09, #2
065e0     03 00 00 FF 
065e4     00 E4 85 F1 | 	sub	objptr, ##1536
065e8     F2 2E 02 F1 | 	add	local09, objptr
065ec     17 2B 62 FC | 	wrlong	local07, local09
065f0     03 00 00 FF 
065f4     00 E4 05 F1 | 	add	objptr, ##1536
065f8     F2 1E 02 FB | 	rdlong	local01, objptr
065fc     0F 2F 02 F6 | 	mov	local09, local01
06600     01 2E 66 F0 | 	shl	local09, #1
06604     0F 2F 02 F1 | 	add	local09, local01
06608     02 2E 66 F0 | 	shl	local09, #2
0660c     03 00 00 FF 
06610     00 E4 85 F1 | 	sub	objptr, ##1536
06614     F2 2E 02 F1 | 	add	local09, objptr
06618     04 2E 06 F1 | 	add	local09, #4
0661c     17 31 62 FC | 	wrlong	local10, local09
06620     03 00 00 FF 
06624     00 E4 05 F1 | 	add	objptr, ##1536
06628     F2 30 02 FB | 	rdlong	local10, objptr
0662c     18 1F 02 F6 | 	mov	local01, local10
06630     01 1E 66 F0 | 	shl	local01, #1
06634     18 1F 02 F1 | 	add	local01, local10
06638     02 1E 66 F0 | 	shl	local01, #2
0663c     03 00 00 FF 
06640     00 E4 85 F1 | 	sub	objptr, ##1536
06644     F2 1E 02 F1 | 	add	local01, objptr
06648     08 1E 06 F1 | 	add	local01, #8
0664c     0F 2D 62 FC | 	wrlong	local08, local01
06650     03 00 00 FF 
06654     00 E4 05 F1 | 	add	objptr, ##1536
06658     F2 2A 02 FB | 	rdlong	local07, objptr
0665c     01 2A 06 F1 | 	add	local07, #1
06660     F2 2A 62 FC | 	wrlong	local07, objptr
06664     4A 00 00 FF 
06668     AC E4 85 F1 | 	sub	objptr, ##38060
0666c                 | LR__0574
0666c     A7 F0 03 F6 | 	mov	ptra, fp
06670     B2 00 A0 FD | 	call	#popregs_
06674                 | _compile_array_assign_ret
06674     2D 00 64 FD | 	ret
06678                 | 
06678                 | ' 
06678                 | ' 
06678                 | ' sub compile_immediate_assign(linetype as ulong)
06678                 | _compile_immediate_assign
06678     09 4A 05 F6 | 	mov	COUNT_, #9
0667c     A8 00 A0 FD | 	call	#pushregs_
06680     09 25 0A F6 | 	mov	local04, arg01 wz
06684     FF 22 06 F6 | 	mov	local03, #255
06688     01 26 66 F6 | 	neg	local05, #1
0668c                 | ' 
0668c                 | ' t1.result_type=result_error : t1.result.uresult=0
0668c                 | ' i=-1: j=-1
0668c                 | ' 
0668c                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
0668c     2C 00 90 5D |  if_ne	jmp	#LR__0580
06690     35 00 00 FF 
06694     3C E4 05 F1 | 	add	objptr, ##27196
06698     F2 28 02 FB | 	rdlong	local06, objptr
0669c     02 00 00 FF 
066a0     38 E4 05 F1 | 	add	objptr, ##1080
066a4     F2 04 68 FC | 	wrlong	#2, objptr
066a8     13 00 00 FF 
066ac     38 E4 05 F1 | 	add	objptr, ##9784
066b0     F2 00 68 FC | 	wrlong	#0, objptr
066b4     4A 00 00 FF 
066b8     AC E4 85 F1 | 	sub	objptr, ##38060
066bc                 | LR__0580
066bc                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
066bc     02 24 0E F2 | 	cmp	local04, #2 wz
066c0     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
066c4     35 00 00 AF 
066c8     3C E4 05 A1 |  if_e	add	objptr, ##27196
066cc     F2 28 02 AB |  if_e	rdlong	local06, objptr
066d0     02 00 00 AF 
066d4     38 E4 05 A1 |  if_e	add	objptr, ##1080
066d8     F2 04 68 AC |  if_e	wrlong	#2, objptr
066dc     37 00 00 AF 
066e0     74 E4 85 A1 |  if_e	sub	objptr, ##28276
066e4                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
066e4     04 24 0E F2 | 	cmp	local04, #4 wz
066e8     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
066ec     2C 00 90 5D |  if_ne	jmp	#LR__0581
066f0     35 00 00 FF 
066f4     44 E4 05 F1 | 	add	objptr, ##27204
066f8     F2 28 02 FB | 	rdlong	local06, objptr
066fc     02 00 00 FF 
06700     30 E4 05 F1 | 	add	objptr, ##1072
06704     F2 06 68 FC | 	wrlong	#3, objptr
06708     13 00 00 FF 
0670c     38 E4 05 F1 | 	add	objptr, ##9784
06710     F2 04 68 FC | 	wrlong	#2, objptr
06714     4A 00 00 FF 
06718     AC E4 85 F1 | 	sub	objptr, ##38060
0671c                 | LR__0581
0671c                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
0671c     05 24 0E F2 | 	cmp	local04, #5 wz
06720     3C 00 90 5D |  if_ne	jmp	#LR__0582
06724     37 00 00 FF 
06728     74 E4 05 F1 | 	add	objptr, ##28276
0672c     F2 FA 01 FB | 	rdlong	result1, objptr
06730     FD 28 02 F6 | 	mov	local06, result1
06734     03 28 66 F0 | 	shl	local06, #3
06738     02 00 00 FF 
0673c     38 E4 85 F1 | 	sub	objptr, ##1080
06740     F2 28 02 F1 | 	add	local06, objptr
06744     14 29 02 FB | 	rdlong	local06, local06
06748     02 FA 05 F1 | 	add	result1, #2
0674c     02 00 00 FF 
06750     38 E4 05 F1 | 	add	objptr, ##1080
06754     F2 FA 61 FC | 	wrlong	result1, objptr
06758     37 00 00 FF 
0675c     74 E4 85 F1 | 	sub	objptr, ##28276
06760                 | LR__0582
06760     14 13 02 F6 | 	mov	arg01, local06
06764     01 14 06 F6 | 	mov	arg02, #1
06768     40 A4 B1 FD | 	call	#__system__Right_S
0676c     C8 2A B0 FD | 	call	#_expr
06770                 | '  
06770                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
06770                 | ' 
06770                 | ' suffix2$=right$(varname2$,1)
06770                 | ' expr()
06770                 | ' 
06770                 | ' 
06770                 | ' if varnum>0 then
06770     35 00 00 FF 
06774     38 E4 05 F1 | 	add	objptr, ##27192
06778     F2 2A 02 FB | 	rdlong	local07, objptr
0677c     35 00 00 FF 
06780     38 E4 85 F1 | 	sub	objptr, ##27192
06784     01 2A 56 F2 | 	cmps	local07, #1 wc
06788     58 00 90 CD |  if_b	jmp	#LR__0585
0678c                 | '   for i=0 to varnum-1
0678c     00 2C 06 F6 | 	mov	local08, #0
06790     35 00 00 FF 
06794     38 E4 05 F1 | 	add	objptr, ##27192
06798     F2 2E 02 FB | 	rdlong	local09, objptr
0679c     35 00 00 FF 
067a0     38 E4 85 F1 | 	sub	objptr, ##27192
067a4                 | LR__0583
067a4     17 2D 52 F2 | 	cmps	local08, local09 wc
067a8     38 00 90 3D |  if_ae	jmp	#LR__0584
067ac                 | '     if variables(i).name=varname2$ then j=i : exit
067ac     16 2B 02 F6 | 	mov	local07, local08
067b0     04 2A 66 F0 | 	shl	local07, #4
067b4     15 00 00 FF 
067b8     28 E4 05 F1 | 	add	objptr, ##10792
067bc     F2 2A 02 F1 | 	add	local07, objptr
067c0     15 13 02 FB | 	rdlong	arg01, local07
067c4     14 15 02 F6 | 	mov	arg02, local06
067c8     15 00 00 FF 
067cc     28 E4 85 F1 | 	sub	objptr, ##10792
067d0     68 83 B1 FD | 	call	#__system___string_cmp
067d4     00 FA 0D F2 | 	cmp	result1, #0 wz
067d8     16 27 02 A6 |  if_e	mov	local05, local08
067dc     01 2C 06 51 |  if_ne	add	local08, #1
067e0     C0 FF 9F 5D |  if_ne	jmp	#LR__0583
067e4                 | LR__0584
067e4                 | LR__0585
067e4                 | ' if  j=-1 andalso varnum<maxvars then   
067e4     FF FF 7F FF 
067e8     FF 27 0E F2 | 	cmp	local05, ##-1 wz
067ec     60 00 90 5D |  if_ne	jmp	#LR__0586
067f0     35 00 00 FF 
067f4     38 E4 05 F1 | 	add	objptr, ##27192
067f8     F2 2A 02 FB | 	rdlong	local07, objptr
067fc     35 00 00 FF 
06800     38 E4 85 F1 | 	sub	objptr, ##27192
06804     02 00 00 FF 
06808     00 2A 56 F2 | 	cmps	local07, ##1024 wc
0680c     40 00 90 3D |  if_ae	jmp	#LR__0586
06810     35 00 00 FF 
06814     38 E4 05 F1 | 	add	objptr, ##27192
06818     F2 2E 02 FB | 	rdlong	local09, objptr
0681c     04 2E 66 F0 | 	shl	local09, #4
06820     20 00 00 FF 
06824     10 E4 85 F1 | 	sub	objptr, ##16400
06828     F2 2E 02 F1 | 	add	local09, objptr
0682c     17 29 62 FC | 	wrlong	local06, local09
06830     20 00 00 FF 
06834     10 E4 05 F1 | 	add	objptr, ##16400
06838     F2 2A 02 FB | 	rdlong	local07, objptr
0683c     15 27 02 F6 | 	mov	local05, local07
06840     01 2A 06 F1 | 	add	local07, #1
06844     F2 2A 62 FC | 	wrlong	local07, objptr
06848     35 00 00 FF 
0684c     38 E4 85 F1 | 	sub	objptr, ##27192
06850                 | LR__0586
06850     13 1F 02 F6 | 	mov	local01, local05
06854     17 22 06 F6 | 	mov	local03, #23
06858     0F 2B 02 F6 | 	mov	local07, local01
0685c     10 2F 02 F6 | 	mov	local09, local02
06860     11 1F 02 F6 | 	mov	local01, local03
06864     4A 00 00 FF 
06868     AC E4 05 F1 | 	add	objptr, ##38060
0686c     F2 2C 02 FB | 	rdlong	local08, objptr
06870     16 29 02 F6 | 	mov	local06, local08
06874     01 28 66 F0 | 	shl	local06, #1
06878     16 29 02 F1 | 	add	local06, local08
0687c     02 28 66 F0 | 	shl	local06, #2
06880     03 00 00 FF 
06884     00 E4 85 F1 | 	sub	objptr, ##1536
06888     F2 28 02 F1 | 	add	local06, objptr
0688c     14 2B 62 FC | 	wrlong	local07, local06
06890     03 00 00 FF 
06894     00 E4 05 F1 | 	add	objptr, ##1536
06898     F2 2C 02 FB | 	rdlong	local08, objptr
0689c     16 2B 02 F6 | 	mov	local07, local08
068a0     01 2A 66 F0 | 	shl	local07, #1
068a4     16 2B 02 F1 | 	add	local07, local08
068a8     02 2A 66 F0 | 	shl	local07, #2
068ac     03 00 00 FF 
068b0     00 E4 85 F1 | 	sub	objptr, ##1536
068b4     F2 2A 02 F1 | 	add	local07, objptr
068b8     04 2A 06 F1 | 	add	local07, #4
068bc     15 2F 62 FC | 	wrlong	local09, local07
068c0     03 00 00 FF 
068c4     00 E4 05 F1 | 	add	objptr, ##1536
068c8     F2 2E 02 FB | 	rdlong	local09, objptr
068cc     17 2D 02 F6 | 	mov	local08, local09
068d0     01 2C 66 F0 | 	shl	local08, #1
068d4     17 2D 02 F1 | 	add	local08, local09
068d8     02 2C 66 F0 | 	shl	local08, #2
068dc     03 00 00 FF 
068e0     00 E4 85 F1 | 	sub	objptr, ##1536
068e4     F2 2C 02 F1 | 	add	local08, objptr
068e8     08 2C 06 F1 | 	add	local08, #8
068ec     16 1F 62 FC | 	wrlong	local01, local08
068f0     03 00 00 FF 
068f4     00 E4 05 F1 | 	add	objptr, ##1536
068f8     F2 2A 02 FB | 	rdlong	local07, objptr
068fc     01 2A 06 F1 | 	add	local07, #1
06900     F2 2A 62 FC | 	wrlong	local07, objptr
06904     4A 00 00 FF 
06908     AC E4 85 F1 | 	sub	objptr, ##38060
0690c                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
0690c                 | ' 
0690c                 | ' 
0690c                 | ' 
0690c                 | ' 
0690c                 | ' 
0690c                 | ' 
0690c                 | ' compiledline(lineptr)=t1:  lineptr+=1 
0690c                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
0690c     00 24 0E F2 | 	cmp	local04, #0 wz
06910     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
06914     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
06918     38 00 90 5D |  if_ne	jmp	#LR__0587
0691c     4A 00 00 FF 
06920     AC E4 05 F1 | 	add	objptr, ##38060
06924     F2 1E 02 FB | 	rdlong	local01, objptr
06928     0F 2F 02 F6 | 	mov	local09, local01
0692c     01 2E 66 F0 | 	shl	local09, #1
06930     0F 2F 02 F1 | 	add	local09, local01
06934     02 2E 66 F0 | 	shl	local09, #2
06938     03 00 00 FF 
0693c     00 E4 85 F1 | 	sub	objptr, ##1536
06940     F2 2E 02 F1 | 	add	local09, objptr
06944     08 2E 06 F1 | 	add	local09, #8
06948     17 FD 6B FC | 	wrlong	#510, local09
0694c     47 00 00 FF 
06950     AC E4 85 F1 | 	sub	objptr, ##36524
06954                 | LR__0587
06954     A7 F0 03 F6 | 	mov	ptra, fp
06958     B2 00 A0 FD | 	call	#popregs_
0695c                 | _compile_immediate_assign_ret
0695c     2D 00 64 FD | 	ret
06960                 | 
06960                 | ' 
06960                 | ' ' ------------------ compile the line that is calling a command 
06960                 | ' 
06960                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
06960                 | _compile
06960     04 4A 05 F6 | 	mov	COUNT_, #4
06964     A8 00 A0 FD | 	call	#pushregs_
06968     09 1F 0A F6 | 	mov	local01, arg01 wz
0696c     0A 21 02 F6 | 	mov	local02, arg02
06970     0B 23 02 F6 | 	mov	local03, arg03
06974                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
06974                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
06974                 | '  
06974                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
06974                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
06974     0C 00 90 5D |  if_ne	jmp	#LR__0590
06978     00 12 06 F6 | 	mov	arg01, #0
0697c     FC F2 BF FD | 	call	#_compile_immediate
06980     A0 00 90 FD | 	jmp	#LR__0597
06984                 | LR__0590
06984     47 00 00 FF 
06988     AC E4 05 F1 | 	add	objptr, ##36524
0698c     F2 1E 62 FC | 	wrlong	local01, objptr
06990     04 E4 05 F1 | 	add	objptr, #4
06994     F2 20 62 FC | 	wrlong	local02, objptr
06998     47 00 00 FF 
0699c     B0 E4 85 F1 | 	sub	objptr, ##36528
069a0     11 13 02 F6 | 	mov	arg01, local03
069a4     01 12 06 F1 | 	add	arg01, #1
069a8     D0 F2 BF FD | 	call	#_compile_immediate
069ac     FD 24 0A F6 | 	mov	local04, result1 wz
069b0                 | ' 
069b0                 | ' ucompiledline(0)=alinemajor
069b0                 | ' ucompiledline(1)=alineminor
069b0                 | ' 
069b0                 | ' 
069b0                 | ' ' cont: 0: this is the first part of the line that will continue
069b0                 | ' ' 1 - this is the continuation of the line
069b0                 | ' ' 2 - this is the last continued line
069b0                 | ' ' 3 - this is the ome and only part
069b0                 | ' 
069b0                 | ' err=compile_immediate(cont+1) 
069b0                 | ' if err=0 then
069b0     6C 00 90 5D |  if_ne	jmp	#LR__0596
069b4                 | '   if cont=3 orelse cont=2 then 
069b4     03 22 0E F2 | 	cmp	local03, #3 wz
069b8     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
069bc     60 00 90 5D |  if_ne	jmp	#LR__0595
069c0                 | '     if alinemajor >lastline then 
069c0     4A 00 00 FF 
069c4     B8 E4 05 F1 | 	add	objptr, ##38072
069c8     F2 16 02 FB | 	rdlong	arg03, objptr
069cc     4A 00 00 FF 
069d0     B8 E4 85 F1 | 	sub	objptr, ##38072
069d4     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
069d8     0C 00 90 ED |  if_be	jmp	#LR__0591
069dc     0F 13 02 F6 | 	mov	arg01, local01
069e0     D0 F1 BF FD | 	call	#_add_line_at_end
069e4     38 00 90 FD | 	jmp	#LR__0594
069e8                 | LR__0591
069e8     0F 13 02 F6 | 	mov	arg01, local01
069ec     F0 EA BF FD | 	call	#_deleteline
069f0                 | '       deleteline(alinemajor)  
069f0                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' yes I know that's not optimal    
069f0     4A 00 00 FF 
069f4     B8 E4 05 F1 | 	add	objptr, ##38072
069f8     F2 16 02 FB | 	rdlong	arg03, objptr
069fc     4A 00 00 FF 
06a00     B8 E4 85 F1 | 	sub	objptr, ##38072
06a04     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06a08     0C 00 90 ED |  if_be	jmp	#LR__0592
06a0c     0F 13 02 F6 | 	mov	arg01, local01
06a10     A0 F1 BF FD | 	call	#_add_line_at_end
06a14     08 00 90 FD | 	jmp	#LR__0593
06a18                 | LR__0592
06a18     0F 13 02 F6 | 	mov	arg01, local01
06a1c     78 EF BF FD | 	call	#_insertline
06a20                 | LR__0593
06a20                 | LR__0594
06a20                 | LR__0595
06a20                 | LR__0596
06a20                 | ' return err
06a20     12 FB 01 F6 | 	mov	result1, local04
06a24                 | LR__0597
06a24     A7 F0 03 F6 | 	mov	ptra, fp
06a28     B2 00 A0 FD | 	call	#popregs_
06a2c                 | _compile_ret
06a2c     2D 00 64 FD | 	ret
06a30                 | 
06a30                 | ' 
06a30                 | ' ' ------------------ compile the line that is assigning to a variable
06a30                 | ' 
06a30                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
06a30                 | _compile_assign
06a30     03 4A 05 F6 | 	mov	COUNT_, #3
06a34     A8 00 A0 FD | 	call	#pushregs_
06a38     09 1F 0A F6 | 	mov	local01, arg01 wz
06a3c     0A 21 02 F6 | 	mov	local02, arg02
06a40     0B 23 02 F6 | 	mov	local03, arg03
06a44                 | ' 
06a44                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
06a44                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
06a44     0C 00 90 5D |  if_ne	jmp	#LR__0600
06a48     00 12 06 F6 | 	mov	arg01, #0
06a4c     28 FC BF FD | 	call	#_compile_immediate_assign
06a50     94 00 90 FD | 	jmp	#LR__0606
06a54                 | LR__0600
06a54     47 00 00 FF 
06a58     AC E4 05 F1 | 	add	objptr, ##36524
06a5c     F2 1E 62 FC | 	wrlong	local01, objptr
06a60     04 E4 05 F1 | 	add	objptr, #4
06a64     F2 20 62 FC | 	wrlong	local02, objptr
06a68     47 00 00 FF 
06a6c     B0 E4 85 F1 | 	sub	objptr, ##36528
06a70     11 13 02 F6 | 	mov	arg01, local03
06a74     01 12 06 F1 | 	add	arg01, #1
06a78     FC FB BF FD | 	call	#_compile_immediate_assign
06a7c                 | ' 
06a7c                 | ' ucompiledline(0)=alinemajor
06a7c                 | ' ucompiledline(1)=alineminor
06a7c                 | ' 
06a7c                 | ' compile_immediate_assign(cont+1) 
06a7c                 | ' 
06a7c                 | ' if cont=3 orelse cont=2 then 
06a7c     03 22 0E F2 | 	cmp	local03, #3 wz
06a80     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
06a84     60 00 90 5D |  if_ne	jmp	#LR__0605
06a88                 | '   if alinemajor >lastline then 
06a88     4A 00 00 FF 
06a8c     B8 E4 05 F1 | 	add	objptr, ##38072
06a90     F2 16 02 FB | 	rdlong	arg03, objptr
06a94     4A 00 00 FF 
06a98     B8 E4 85 F1 | 	sub	objptr, ##38072
06a9c     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06aa0     0C 00 90 ED |  if_be	jmp	#LR__0601
06aa4     0F 13 02 F6 | 	mov	arg01, local01
06aa8     08 F1 BF FD | 	call	#_add_line_at_end
06aac     38 00 90 FD | 	jmp	#LR__0604
06ab0                 | LR__0601
06ab0     0F 13 02 F6 | 	mov	arg01, local01
06ab4     28 EA BF FD | 	call	#_deleteline
06ab8                 | '     deleteline(alinemajor)  
06ab8                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
06ab8     4A 00 00 FF 
06abc     B8 E4 05 F1 | 	add	objptr, ##38072
06ac0     F2 16 02 FB | 	rdlong	arg03, objptr
06ac4     4A 00 00 FF 
06ac8     B8 E4 85 F1 | 	sub	objptr, ##38072
06acc     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
06ad0     0C 00 90 ED |  if_be	jmp	#LR__0602
06ad4     0F 13 02 F6 | 	mov	arg01, local01
06ad8     D8 F0 BF FD | 	call	#_add_line_at_end
06adc     08 00 90 FD | 	jmp	#LR__0603
06ae0                 | LR__0602
06ae0     0F 13 02 F6 | 	mov	arg01, local01
06ae4     B0 EE BF FD | 	call	#_insertline
06ae8                 | LR__0603
06ae8                 | LR__0604
06ae8                 | LR__0605
06ae8                 | LR__0606
06ae8     A7 F0 03 F6 | 	mov	ptra, fp
06aec     B2 00 A0 FD | 	call	#popregs_
06af0                 | _compile_assign_ret
06af0     2D 00 64 FD | 	ret
06af4                 | 
06af4                 | ' 
06af4                 | ' sub compile_error(errno)
06af4                 | _compile_error
06af4     FF 04 06 F6 | 	mov	_var03, #255
06af8     01 07 02 F6 | 	mov	_var04, _var02
06afc     02 09 02 F6 | 	mov	_var05, _var03
06b00     4A 00 00 FF 
06b04     AC E4 05 F1 | 	add	objptr, ##38060
06b08     F2 0A 02 FB | 	rdlong	_var06, objptr
06b0c     05 0D 02 F6 | 	mov	_var07, _var06
06b10     01 0C 66 F0 | 	shl	_var07, #1
06b14     05 0D 02 F1 | 	add	_var07, _var06
06b18     02 0C 66 F0 | 	shl	_var07, #2
06b1c     03 00 00 FF 
06b20     00 E4 85 F1 | 	sub	objptr, ##1536
06b24     F2 0C 02 F1 | 	add	_var07, objptr
06b28     06 13 62 FC | 	wrlong	arg01, _var07
06b2c     03 00 00 FF 
06b30     00 E4 05 F1 | 	add	objptr, ##1536
06b34     F2 0C 02 FB | 	rdlong	_var07, objptr
06b38     06 0B 02 F6 | 	mov	_var06, _var07
06b3c     01 0A 66 F0 | 	shl	_var06, #1
06b40     06 0B 02 F1 | 	add	_var06, _var07
06b44     02 0A 66 F0 | 	shl	_var06, #2
06b48     03 00 00 FF 
06b4c     00 E4 85 F1 | 	sub	objptr, ##1536
06b50     F2 0A 02 F1 | 	add	_var06, objptr
06b54     04 0A 06 F1 | 	add	_var06, #4
06b58     05 07 62 FC | 	wrlong	_var04, _var06
06b5c     03 00 00 FF 
06b60     00 E4 05 F1 | 	add	objptr, ##1536
06b64     F2 0C 02 FB | 	rdlong	_var07, objptr
06b68     06 0B 02 F6 | 	mov	_var06, _var07
06b6c     01 0A 66 F0 | 	shl	_var06, #1
06b70     06 0B 02 F1 | 	add	_var06, _var07
06b74     02 0A 66 F0 | 	shl	_var06, #2
06b78     03 00 00 FF 
06b7c     00 E4 85 F1 | 	sub	objptr, ##1536
06b80     F2 0A 02 F1 | 	add	_var06, objptr
06b84     08 0A 06 F1 | 	add	_var06, #8
06b88     05 09 62 FC | 	wrlong	_var05, _var06
06b8c     03 00 00 FF 
06b90     00 E4 05 F1 | 	add	objptr, ##1536
06b94     F2 12 02 FB | 	rdlong	arg01, objptr
06b98     01 12 06 F1 | 	add	arg01, #1
06b9c     F2 12 62 FC | 	wrlong	arg01, objptr
06ba0     4A 00 00 FF 
06ba4     AC E4 85 F1 | 	sub	objptr, ##38060
06ba8                 | _compile_error_ret
06ba8     2D 00 64 FD | 	ret
06bac                 | 
06bac                 | ' 
06bac                 | ' sub compile_unknown() 
06bac                 | _compile_unknown
06bac     FF 04 06 F6 | 	mov	_var03, #255
06bb0     17 00 06 F6 | 	mov	_var01, #23
06bb4     01 07 02 F6 | 	mov	_var04, _var02
06bb8     02 01 02 F6 | 	mov	_var01, _var03
06bbc     4A 00 00 FF 
06bc0     AC E4 05 F1 | 	add	objptr, ##38060
06bc4     F2 08 02 FB | 	rdlong	_var05, objptr
06bc8     04 0B 02 F6 | 	mov	_var06, _var05
06bcc     01 0A 66 F0 | 	shl	_var06, #1
06bd0     04 0B 02 F1 | 	add	_var06, _var05
06bd4     02 0A 66 F0 | 	shl	_var06, #2
06bd8     03 00 00 FF 
06bdc     00 E4 85 F1 | 	sub	objptr, ##1536
06be0     F2 0A 02 F1 | 	add	_var06, objptr
06be4     05 2F 68 FC | 	wrlong	#23, _var06
06be8     03 00 00 FF 
06bec     00 E4 05 F1 | 	add	objptr, ##1536
06bf0     F2 0A 02 FB | 	rdlong	_var06, objptr
06bf4     05 09 02 F6 | 	mov	_var05, _var06
06bf8     01 08 66 F0 | 	shl	_var05, #1
06bfc     05 09 02 F1 | 	add	_var05, _var06
06c00     02 08 66 F0 | 	shl	_var05, #2
06c04     03 00 00 FF 
06c08     00 E4 85 F1 | 	sub	objptr, ##1536
06c0c     F2 08 02 F1 | 	add	_var05, objptr
06c10     04 08 06 F1 | 	add	_var05, #4
06c14     04 07 62 FC | 	wrlong	_var04, _var05
06c18     03 00 00 FF 
06c1c     00 E4 05 F1 | 	add	objptr, ##1536
06c20     F2 0A 02 FB | 	rdlong	_var06, objptr
06c24     05 09 02 F6 | 	mov	_var05, _var06
06c28     01 08 66 F0 | 	shl	_var05, #1
06c2c     05 09 02 F1 | 	add	_var05, _var06
06c30     02 08 66 F0 | 	shl	_var05, #2
06c34     03 00 00 FF 
06c38     00 E4 85 F1 | 	sub	objptr, ##1536
06c3c     F2 08 02 F1 | 	add	_var05, objptr
06c40     08 08 06 F1 | 	add	_var05, #8
06c44     04 01 62 FC | 	wrlong	_var01, _var05
06c48     03 00 00 FF 
06c4c     00 E4 05 F1 | 	add	objptr, ##1536
06c50     F2 0A 02 FB | 	rdlong	_var06, objptr
06c54     01 0A 06 F1 | 	add	_var06, #1
06c58     F2 0A 62 FC | 	wrlong	_var06, objptr
06c5c     4A 00 00 FF 
06c60     AC E4 85 F1 | 	sub	objptr, ##38060
06c64                 | _compile_unknown_ret
06c64     2D 00 64 FD | 	ret
06c68                 | 
06c68                 | ' 
06c68                 | ' function compile_fun_2p() as ulong
06c68                 | _compile_fun_2p
06c68     01 4A 05 F6 | 	mov	COUNT_, #1
06c6c     A8 00 A0 FD | 	call	#pushregs_
06c70     C4 25 B0 FD | 	call	#_expr
06c74                 | ' 
06c74                 | ' expr()
06c74                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06c74     37 00 00 FF 
06c78     74 E4 05 F1 | 	add	objptr, ##28276
06c7c     F2 1E 02 FB | 	rdlong	local01, objptr
06c80     03 1E 66 F0 | 	shl	local01, #3
06c84     02 00 00 FF 
06c88     38 E4 85 F1 | 	sub	objptr, ##1080
06c8c     F2 1E 02 F1 | 	add	local01, objptr
06c90     04 1E 06 F1 | 	add	local01, #4
06c94     0F 1F 02 FB | 	rdlong	local01, local01
06c98     11 1E 0E F2 | 	cmp	local01, #17 wz
06c9c     35 00 00 FF 
06ca0     3C E4 85 F1 | 	sub	objptr, ##27196
06ca4     15 FA 05 56 |  if_ne	mov	result1, #21
06ca8     24 00 90 5D |  if_ne	jmp	#LR__0610
06cac     37 00 00 FF 
06cb0     74 E4 05 F1 | 	add	objptr, ##28276
06cb4     F2 1E 02 FB | 	rdlong	local01, objptr
06cb8     01 1E 06 F1 | 	add	local01, #1
06cbc     F2 1E 62 FC | 	wrlong	local01, objptr
06cc0     37 00 00 FF 
06cc4     74 E4 85 F1 | 	sub	objptr, ##28276
06cc8     6C 25 B0 FD | 	call	#_expr
06ccc     00 FA 05 F6 | 	mov	result1, #0
06cd0                 | LR__0610
06cd0     A7 F0 03 F6 | 	mov	ptra, fp
06cd4     B2 00 A0 FD | 	call	#popregs_
06cd8                 | _compile_fun_2p_ret
06cd8     2D 00 64 FD | 	ret
06cdc                 | 
06cdc                 | ' 
06cdc                 | ' function compile_fun_3p() as ulong
06cdc                 | _compile_fun_3p
06cdc     01 4A 05 F6 | 	mov	COUNT_, #1
06ce0     A8 00 A0 FD | 	call	#pushregs_
06ce4     50 25 B0 FD | 	call	#_expr
06ce8                 | ' 
06ce8                 | ' expr()
06ce8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06ce8     37 00 00 FF 
06cec     74 E4 05 F1 | 	add	objptr, ##28276
06cf0     F2 1E 02 FB | 	rdlong	local01, objptr
06cf4     03 1E 66 F0 | 	shl	local01, #3
06cf8     02 00 00 FF 
06cfc     38 E4 85 F1 | 	sub	objptr, ##1080
06d00     F2 1E 02 F1 | 	add	local01, objptr
06d04     04 1E 06 F1 | 	add	local01, #4
06d08     0F 1F 02 FB | 	rdlong	local01, local01
06d0c     11 1E 0E F2 | 	cmp	local01, #17 wz
06d10     35 00 00 FF 
06d14     3C E4 85 F1 | 	sub	objptr, ##27196
06d18     15 FA 05 56 |  if_ne	mov	result1, #21
06d1c     7C 00 90 5D |  if_ne	jmp	#LR__0620
06d20     37 00 00 FF 
06d24     74 E4 05 F1 | 	add	objptr, ##28276
06d28     F2 1E 02 FB | 	rdlong	local01, objptr
06d2c     01 1E 06 F1 | 	add	local01, #1
06d30     F2 1E 62 FC | 	wrlong	local01, objptr
06d34     37 00 00 FF 
06d38     74 E4 85 F1 | 	sub	objptr, ##28276
06d3c     F8 24 B0 FD | 	call	#_expr
06d40                 | ' expr()
06d40                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06d40     37 00 00 FF 
06d44     74 E4 05 F1 | 	add	objptr, ##28276
06d48     F2 1E 02 FB | 	rdlong	local01, objptr
06d4c     03 1E 66 F0 | 	shl	local01, #3
06d50     02 00 00 FF 
06d54     38 E4 85 F1 | 	sub	objptr, ##1080
06d58     F2 1E 02 F1 | 	add	local01, objptr
06d5c     04 1E 06 F1 | 	add	local01, #4
06d60     0F 1F 02 FB | 	rdlong	local01, local01
06d64     11 1E 0E F2 | 	cmp	local01, #17 wz
06d68     35 00 00 FF 
06d6c     3C E4 85 F1 | 	sub	objptr, ##27196
06d70     15 FA 05 56 |  if_ne	mov	result1, #21
06d74     24 00 90 5D |  if_ne	jmp	#LR__0620
06d78     37 00 00 FF 
06d7c     74 E4 05 F1 | 	add	objptr, ##28276
06d80     F2 1E 02 FB | 	rdlong	local01, objptr
06d84     01 1E 06 F1 | 	add	local01, #1
06d88     F2 1E 62 FC | 	wrlong	local01, objptr
06d8c     37 00 00 FF 
06d90     74 E4 85 F1 | 	sub	objptr, ##28276
06d94     A0 24 B0 FD | 	call	#_expr
06d98     00 FA 05 F6 | 	mov	result1, #0
06d9c                 | LR__0620
06d9c     A7 F0 03 F6 | 	mov	ptra, fp
06da0     B2 00 A0 FD | 	call	#popregs_
06da4                 | _compile_fun_3p_ret
06da4     2D 00 64 FD | 	ret
06da8                 | 
06da8                 | ' 
06da8                 | ' function compile_fun_4p() as ulong
06da8                 | _compile_fun_4p
06da8     01 4A 05 F6 | 	mov	COUNT_, #1
06dac     A8 00 A0 FD | 	call	#pushregs_
06db0     84 24 B0 FD | 	call	#_expr
06db4                 | ' 
06db4                 | ' expr()
06db4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06db4     37 00 00 FF 
06db8     74 E4 05 F1 | 	add	objptr, ##28276
06dbc     F2 1E 02 FB | 	rdlong	local01, objptr
06dc0     03 1E 66 F0 | 	shl	local01, #3
06dc4     02 00 00 FF 
06dc8     38 E4 85 F1 | 	sub	objptr, ##1080
06dcc     F2 1E 02 F1 | 	add	local01, objptr
06dd0     04 1E 06 F1 | 	add	local01, #4
06dd4     0F 1F 02 FB | 	rdlong	local01, local01
06dd8     11 1E 0E F2 | 	cmp	local01, #17 wz
06ddc     35 00 00 FF 
06de0     3C E4 85 F1 | 	sub	objptr, ##27196
06de4     15 FA 05 56 |  if_ne	mov	result1, #21
06de8     D4 00 90 5D |  if_ne	jmp	#LR__0630
06dec     37 00 00 FF 
06df0     74 E4 05 F1 | 	add	objptr, ##28276
06df4     F2 1E 02 FB | 	rdlong	local01, objptr
06df8     01 1E 06 F1 | 	add	local01, #1
06dfc     F2 1E 62 FC | 	wrlong	local01, objptr
06e00     37 00 00 FF 
06e04     74 E4 85 F1 | 	sub	objptr, ##28276
06e08     2C 24 B0 FD | 	call	#_expr
06e0c                 | ' expr()
06e0c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06e0c     37 00 00 FF 
06e10     74 E4 05 F1 | 	add	objptr, ##28276
06e14     F2 1E 02 FB | 	rdlong	local01, objptr
06e18     03 1E 66 F0 | 	shl	local01, #3
06e1c     02 00 00 FF 
06e20     38 E4 85 F1 | 	sub	objptr, ##1080
06e24     F2 1E 02 F1 | 	add	local01, objptr
06e28     04 1E 06 F1 | 	add	local01, #4
06e2c     0F 1F 02 FB | 	rdlong	local01, local01
06e30     11 1E 0E F2 | 	cmp	local01, #17 wz
06e34     35 00 00 FF 
06e38     3C E4 85 F1 | 	sub	objptr, ##27196
06e3c     15 FA 05 56 |  if_ne	mov	result1, #21
06e40     7C 00 90 5D |  if_ne	jmp	#LR__0630
06e44     37 00 00 FF 
06e48     74 E4 05 F1 | 	add	objptr, ##28276
06e4c     F2 1E 02 FB | 	rdlong	local01, objptr
06e50     01 1E 06 F1 | 	add	local01, #1
06e54     F2 1E 62 FC | 	wrlong	local01, objptr
06e58     37 00 00 FF 
06e5c     74 E4 85 F1 | 	sub	objptr, ##28276
06e60     D4 23 B0 FD | 	call	#_expr
06e64                 | ' expr()
06e64                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06e64     37 00 00 FF 
06e68     74 E4 05 F1 | 	add	objptr, ##28276
06e6c     F2 1E 02 FB | 	rdlong	local01, objptr
06e70     03 1E 66 F0 | 	shl	local01, #3
06e74     02 00 00 FF 
06e78     38 E4 85 F1 | 	sub	objptr, ##1080
06e7c     F2 1E 02 F1 | 	add	local01, objptr
06e80     04 1E 06 F1 | 	add	local01, #4
06e84     0F 1F 02 FB | 	rdlong	local01, local01
06e88     11 1E 0E F2 | 	cmp	local01, #17 wz
06e8c     35 00 00 FF 
06e90     3C E4 85 F1 | 	sub	objptr, ##27196
06e94     15 FA 05 56 |  if_ne	mov	result1, #21
06e98     24 00 90 5D |  if_ne	jmp	#LR__0630
06e9c     37 00 00 FF 
06ea0     74 E4 05 F1 | 	add	objptr, ##28276
06ea4     F2 1E 02 FB | 	rdlong	local01, objptr
06ea8     01 1E 06 F1 | 	add	local01, #1
06eac     F2 1E 62 FC | 	wrlong	local01, objptr
06eb0     37 00 00 FF 
06eb4     74 E4 85 F1 | 	sub	objptr, ##28276
06eb8     7C 23 B0 FD | 	call	#_expr
06ebc     00 FA 05 F6 | 	mov	result1, #0
06ec0                 | LR__0630
06ec0     A7 F0 03 F6 | 	mov	ptra, fp
06ec4     B2 00 A0 FD | 	call	#popregs_
06ec8                 | _compile_fun_4p_ret
06ec8     2D 00 64 FD | 	ret
06ecc                 | 
06ecc                 | ' 
06ecc                 | ' 
06ecc                 | ' function compile_fun_5p() as ulong
06ecc                 | _compile_fun_5p
06ecc     01 4A 05 F6 | 	mov	COUNT_, #1
06ed0     A8 00 A0 FD | 	call	#pushregs_
06ed4     60 23 B0 FD | 	call	#_expr
06ed8                 | ' 
06ed8                 | ' expr()
06ed8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06ed8     37 00 00 FF 
06edc     74 E4 05 F1 | 	add	objptr, ##28276
06ee0     F2 1E 02 FB | 	rdlong	local01, objptr
06ee4     03 1E 66 F0 | 	shl	local01, #3
06ee8     02 00 00 FF 
06eec     38 E4 85 F1 | 	sub	objptr, ##1080
06ef0     F2 1E 02 F1 | 	add	local01, objptr
06ef4     04 1E 06 F1 | 	add	local01, #4
06ef8     0F 1F 02 FB | 	rdlong	local01, local01
06efc     11 1E 0E F2 | 	cmp	local01, #17 wz
06f00     35 00 00 FF 
06f04     3C E4 85 F1 | 	sub	objptr, ##27196
06f08     15 FA 05 56 |  if_ne	mov	result1, #21
06f0c     2C 01 90 5D |  if_ne	jmp	#LR__0640
06f10     37 00 00 FF 
06f14     74 E4 05 F1 | 	add	objptr, ##28276
06f18     F2 1E 02 FB | 	rdlong	local01, objptr
06f1c     01 1E 06 F1 | 	add	local01, #1
06f20     F2 1E 62 FC | 	wrlong	local01, objptr
06f24     37 00 00 FF 
06f28     74 E4 85 F1 | 	sub	objptr, ##28276
06f2c     08 23 B0 FD | 	call	#_expr
06f30                 | ' expr()
06f30                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06f30     37 00 00 FF 
06f34     74 E4 05 F1 | 	add	objptr, ##28276
06f38     F2 1E 02 FB | 	rdlong	local01, objptr
06f3c     03 1E 66 F0 | 	shl	local01, #3
06f40     02 00 00 FF 
06f44     38 E4 85 F1 | 	sub	objptr, ##1080
06f48     F2 1E 02 F1 | 	add	local01, objptr
06f4c     04 1E 06 F1 | 	add	local01, #4
06f50     0F 1F 02 FB | 	rdlong	local01, local01
06f54     11 1E 0E F2 | 	cmp	local01, #17 wz
06f58     35 00 00 FF 
06f5c     3C E4 85 F1 | 	sub	objptr, ##27196
06f60     15 FA 05 56 |  if_ne	mov	result1, #21
06f64     D4 00 90 5D |  if_ne	jmp	#LR__0640
06f68     37 00 00 FF 
06f6c     74 E4 05 F1 | 	add	objptr, ##28276
06f70     F2 1E 02 FB | 	rdlong	local01, objptr
06f74     01 1E 06 F1 | 	add	local01, #1
06f78     F2 1E 62 FC | 	wrlong	local01, objptr
06f7c     37 00 00 FF 
06f80     74 E4 85 F1 | 	sub	objptr, ##28276
06f84     B0 22 B0 FD | 	call	#_expr
06f88                 | ' expr()
06f88                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06f88     37 00 00 FF 
06f8c     74 E4 05 F1 | 	add	objptr, ##28276
06f90     F2 1E 02 FB | 	rdlong	local01, objptr
06f94     03 1E 66 F0 | 	shl	local01, #3
06f98     02 00 00 FF 
06f9c     38 E4 85 F1 | 	sub	objptr, ##1080
06fa0     F2 1E 02 F1 | 	add	local01, objptr
06fa4     04 1E 06 F1 | 	add	local01, #4
06fa8     0F 1F 02 FB | 	rdlong	local01, local01
06fac     11 1E 0E F2 | 	cmp	local01, #17 wz
06fb0     35 00 00 FF 
06fb4     3C E4 85 F1 | 	sub	objptr, ##27196
06fb8     15 FA 05 56 |  if_ne	mov	result1, #21
06fbc     7C 00 90 5D |  if_ne	jmp	#LR__0640
06fc0     37 00 00 FF 
06fc4     74 E4 05 F1 | 	add	objptr, ##28276
06fc8     F2 1E 02 FB | 	rdlong	local01, objptr
06fcc     01 1E 06 F1 | 	add	local01, #1
06fd0     F2 1E 62 FC | 	wrlong	local01, objptr
06fd4     37 00 00 FF 
06fd8     74 E4 85 F1 | 	sub	objptr, ##28276
06fdc     58 22 B0 FD | 	call	#_expr
06fe0                 | ' expr()
06fe0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
06fe0     37 00 00 FF 
06fe4     74 E4 05 F1 | 	add	objptr, ##28276
06fe8     F2 1E 02 FB | 	rdlong	local01, objptr
06fec     03 1E 66 F0 | 	shl	local01, #3
06ff0     02 00 00 FF 
06ff4     38 E4 85 F1 | 	sub	objptr, ##1080
06ff8     F2 1E 02 F1 | 	add	local01, objptr
06ffc     04 1E 06 F1 | 	add	local01, #4
07000     0F 1F 02 FB | 	rdlong	local01, local01
07004     11 1E 0E F2 | 	cmp	local01, #17 wz
07008     35 00 00 FF 
0700c     3C E4 85 F1 | 	sub	objptr, ##27196
07010     15 FA 05 56 |  if_ne	mov	result1, #21
07014     24 00 90 5D |  if_ne	jmp	#LR__0640
07018     37 00 00 FF 
0701c     74 E4 05 F1 | 	add	objptr, ##28276
07020     F2 1E 02 FB | 	rdlong	local01, objptr
07024     01 1E 06 F1 | 	add	local01, #1
07028     F2 1E 62 FC | 	wrlong	local01, objptr
0702c     37 00 00 FF 
07030     74 E4 85 F1 | 	sub	objptr, ##28276
07034     00 22 B0 FD | 	call	#_expr
07038     00 FA 05 F6 | 	mov	result1, #0
0703c                 | LR__0640
0703c     A7 F0 03 F6 | 	mov	ptra, fp
07040     B2 00 A0 FD | 	call	#popregs_
07044                 | _compile_fun_5p_ret
07044     2D 00 64 FD | 	ret
07048                 | 
07048                 | ' 
07048                 | ' function compile_fun_varp() as ulong 
07048                 | _compile_fun_varp
07048     02 4A 05 F6 | 	mov	COUNT_, #2
0704c     A8 00 A0 FD | 	call	#pushregs_
07050     00 1E 06 F6 | 	mov	local01, #0
07054                 | ' i=0
07054                 | ' if lparts(ct).token<>token_end then
07054     37 00 00 FF 
07058     74 E4 05 F1 | 	add	objptr, ##28276
0705c     F2 20 02 FB | 	rdlong	local02, objptr
07060     03 20 66 F0 | 	shl	local02, #3
07064     02 00 00 FF 
07068     38 E4 85 F1 | 	sub	objptr, ##1080
0706c     F2 20 02 F1 | 	add	local02, objptr
07070     04 20 06 F1 | 	add	local02, #4
07074     10 21 02 FB | 	rdlong	local02, local02
07078     FE 21 0E F2 | 	cmp	local02, #510 wz
0707c     35 00 00 FF 
07080     3C E4 85 F1 | 	sub	objptr, ##27196
07084     5C 00 90 AD |  if_e	jmp	#LR__0652
07088                 | '   do
07088                 | LR__0650
07088     AC 21 B0 FD | 	call	#_expr
0708c     01 1E 06 F1 | 	add	local01, #1
07090                 | '   expr()
07090                 | '    i+=1
07090                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
07090     37 00 00 FF 
07094     74 E4 05 F1 | 	add	objptr, ##28276
07098     F2 20 02 FB | 	rdlong	local02, objptr
0709c     03 20 66 F0 | 	shl	local02, #3
070a0     02 00 00 FF 
070a4     38 E4 85 F1 | 	sub	objptr, ##1080
070a8     F2 20 02 F1 | 	add	local02, objptr
070ac     04 20 06 F1 | 	add	local02, #4
070b0     10 21 02 FB | 	rdlong	local02, local02
070b4     11 20 0E F2 | 	cmp	local02, #17 wz
070b8     35 00 00 FF 
070bc     3C E4 85 F1 | 	sub	objptr, ##27196
070c0     20 00 90 5D |  if_ne	jmp	#LR__0651
070c4     37 00 00 FF 
070c8     74 E4 05 F1 | 	add	objptr, ##28276
070cc     F2 20 02 FB | 	rdlong	local02, objptr
070d0     01 20 06 F1 | 	add	local02, #1
070d4     F2 20 62 FC | 	wrlong	local02, objptr
070d8     37 00 00 FF 
070dc     74 E4 85 F1 | 	sub	objptr, ##28276
070e0     A4 FF 9F FD | 	jmp	#LR__0650
070e4                 | LR__0651
070e4                 | LR__0652
070e4                 | ' return i
070e4     0F FB 01 F6 | 	mov	result1, local01
070e8     A7 F0 03 F6 | 	mov	ptra, fp
070ec     B2 00 A0 FD | 	call	#popregs_
070f0                 | _compile_fun_varp_ret
070f0     2D 00 64 FD | 	ret
070f4                 | 
070f4                 | ' 
070f4                 | ' 
070f4                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
070f4                 | _compile_print
070f4     0B 4A 05 F6 | 	mov	COUNT_, #11
070f8     A8 00 A0 FD | 	call	#pushregs_
070fc     00 1E 06 F6 | 	mov	local01, #0
07100     1D 22 06 F6 | 	mov	local03, #29
07104                 | ' t1.result.uresult=0 : t1.result_type=result_uint
07104                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
07104     37 00 00 FF 
07108     74 E4 05 F1 | 	add	objptr, ##28276
0710c     F2 24 02 FB | 	rdlong	local04, objptr
07110     03 24 66 F0 | 	shl	local04, #3
07114     02 00 00 FF 
07118     38 E4 85 F1 | 	sub	objptr, ##1080
0711c     F2 24 02 F1 | 	add	local04, objptr
07120     04 24 06 F1 | 	add	local04, #4
07124     12 25 02 FB | 	rdlong	local04, local04
07128     FE 25 0E F2 | 	cmp	local04, #510 wz
0712c     35 00 00 FF 
07130     3C E4 85 F1 | 	sub	objptr, ##27196
07134     68 01 90 5D |  if_ne	jmp	#LR__0660
07138     20 22 06 F6 | 	mov	local03, #32
0713c     0F 27 02 F6 | 	mov	local05, local01
07140     10 29 02 F6 | 	mov	local06, local02
07144     11 2B 02 F6 | 	mov	local07, local03
07148     4A 00 00 FF 
0714c     AC E4 05 F1 | 	add	objptr, ##38060
07150     F2 2C 02 FB | 	rdlong	local08, objptr
07154     16 2F 02 F6 | 	mov	local09, local08
07158     01 2E 66 F0 | 	shl	local09, #1
0715c     16 2F 02 F1 | 	add	local09, local08
07160     02 2E 66 F0 | 	shl	local09, #2
07164     03 00 00 FF 
07168     00 E4 85 F1 | 	sub	objptr, ##1536
0716c     F2 2E 02 F1 | 	add	local09, objptr
07170     17 27 62 FC | 	wrlong	local05, local09
07174     03 00 00 FF 
07178     00 E4 05 F1 | 	add	objptr, ##1536
0717c     F2 26 02 FB | 	rdlong	local05, objptr
07180     13 31 02 F6 | 	mov	local10, local05
07184     01 30 66 F0 | 	shl	local10, #1
07188     13 31 02 F1 | 	add	local10, local05
0718c     02 30 66 F0 | 	shl	local10, #2
07190     03 00 00 FF 
07194     00 E4 85 F1 | 	sub	objptr, ##1536
07198     F2 30 02 F1 | 	add	local10, objptr
0719c     04 30 06 F1 | 	add	local10, #4
071a0     18 29 62 FC | 	wrlong	local06, local10
071a4     03 00 00 FF 
071a8     00 E4 05 F1 | 	add	objptr, ##1536
071ac     F2 26 02 FB | 	rdlong	local05, objptr
071b0     13 33 02 F6 | 	mov	local11, local05
071b4     01 32 66 F0 | 	shl	local11, #1
071b8     13 33 02 F1 | 	add	local11, local05
071bc     02 32 66 F0 | 	shl	local11, #2
071c0     03 00 00 FF 
071c4     00 E4 85 F1 | 	sub	objptr, ##1536
071c8     F2 32 02 F1 | 	add	local11, objptr
071cc     08 32 06 F1 | 	add	local11, #8
071d0     19 2B 62 FC | 	wrlong	local07, local11
071d4     03 00 00 FF 
071d8     00 E4 05 F1 | 	add	objptr, ##1536
071dc     F2 26 02 FB | 	rdlong	local05, objptr
071e0     01 26 06 F1 | 	add	local05, #1
071e4     F2 26 62 FC | 	wrlong	local05, objptr
071e8     44 22 06 F6 | 	mov	local03, #68
071ec     0F 27 02 F6 | 	mov	local05, local01
071f0     10 29 02 F6 | 	mov	local06, local02
071f4     11 2B 02 F6 | 	mov	local07, local03
071f8     F2 2C 02 FB | 	rdlong	local08, objptr
071fc     16 2F 02 F6 | 	mov	local09, local08
07200     01 2E 66 F0 | 	shl	local09, #1
07204     16 2F 02 F1 | 	add	local09, local08
07208     02 2E 66 F0 | 	shl	local09, #2
0720c     03 00 00 FF 
07210     00 E4 85 F1 | 	sub	objptr, ##1536
07214     F2 2E 02 F1 | 	add	local09, objptr
07218     17 27 62 FC | 	wrlong	local05, local09
0721c     03 00 00 FF 
07220     00 E4 05 F1 | 	add	objptr, ##1536
07224     F2 32 02 FB | 	rdlong	local11, objptr
07228     19 31 02 F6 | 	mov	local10, local11
0722c     01 30 66 F0 | 	shl	local10, #1
07230     19 31 02 F1 | 	add	local10, local11
07234     02 30 66 F0 | 	shl	local10, #2
07238     03 00 00 FF 
0723c     00 E4 85 F1 | 	sub	objptr, ##1536
07240     F2 30 02 F1 | 	add	local10, objptr
07244     04 30 06 F1 | 	add	local10, #4
07248     18 29 62 FC | 	wrlong	local06, local10
0724c     03 00 00 FF 
07250     00 E4 05 F1 | 	add	objptr, ##1536
07254     F2 30 02 FB | 	rdlong	local10, objptr
07258     18 33 02 F6 | 	mov	local11, local10
0725c     01 32 66 F0 | 	shl	local11, #1
07260     18 33 02 F1 | 	add	local11, local10
07264     02 32 66 F0 | 	shl	local11, #2
07268     03 00 00 FF 
0726c     00 E4 85 F1 | 	sub	objptr, ##1536
07270     F2 32 02 F1 | 	add	local11, objptr
07274     08 32 06 F1 | 	add	local11, #8
07278     19 2B 62 FC | 	wrlong	local07, local11
0727c     03 00 00 FF 
07280     00 E4 05 F1 | 	add	objptr, ##1536
07284     F2 26 02 FB | 	rdlong	local05, objptr
07288     01 26 06 F1 | 	add	local05, #1
0728c     F2 26 62 FC | 	wrlong	local05, objptr
07290     4A 00 00 FF 
07294     AC E4 85 F1 | 	sub	objptr, ##38060
07298     00 FA 05 F6 | 	mov	result1, #0
0729c     20 05 90 FD | 	jmp	#LR__0667
072a0                 | LR__0660
072a0                 | ' do
072a0                 | LR__0661
072a0     94 1F B0 FD | 	call	#_expr
072a4                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
072a4                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
072a4     37 00 00 FF 
072a8     74 E4 05 F1 | 	add	objptr, ##28276
072ac     F2 24 02 FB | 	rdlong	local04, objptr
072b0     03 24 66 F0 | 	shl	local04, #3
072b4     02 00 00 FF 
072b8     38 E4 85 F1 | 	sub	objptr, ##1080
072bc     F2 24 02 F1 | 	add	local04, objptr
072c0     04 24 06 F1 | 	add	local04, #4
072c4     12 2D 02 FB | 	rdlong	local08, local04
072c8     11 2C 0E F2 | 	cmp	local08, #17 wz
072cc     35 00 00 FF 
072d0     3C E4 85 F1 | 	sub	objptr, ##27196
072d4     60 01 90 5D |  if_ne	jmp	#LR__0662
072d8     21 22 06 F6 | 	mov	local03, #33
072dc     0F 27 02 F6 | 	mov	local05, local01
072e0     10 29 02 F6 | 	mov	local06, local02
072e4     11 2B 02 F6 | 	mov	local07, local03
072e8     4A 00 00 FF 
072ec     AC E4 05 F1 | 	add	objptr, ##38060
072f0     F2 2C 02 FB | 	rdlong	local08, objptr
072f4     16 2F 02 F6 | 	mov	local09, local08
072f8     01 2E 66 F0 | 	shl	local09, #1
072fc     16 2F 02 F1 | 	add	local09, local08
07300     02 2E 66 F0 | 	shl	local09, #2
07304     03 00 00 FF 
07308     00 E4 85 F1 | 	sub	objptr, ##1536
0730c     F2 2E 02 F1 | 	add	local09, objptr
07310     17 27 62 FC | 	wrlong	local05, local09
07314     03 00 00 FF 
07318     00 E4 05 F1 | 	add	objptr, ##1536
0731c     F2 32 02 FB | 	rdlong	local11, objptr
07320     19 31 02 F6 | 	mov	local10, local11
07324     01 30 66 F0 | 	shl	local10, #1
07328     19 31 02 F1 | 	add	local10, local11
0732c     02 30 66 F0 | 	shl	local10, #2
07330     03 00 00 FF 
07334     00 E4 85 F1 | 	sub	objptr, ##1536
07338     F2 30 02 F1 | 	add	local10, objptr
0733c     04 30 06 F1 | 	add	local10, #4
07340     18 29 62 FC | 	wrlong	local06, local10
07344     03 00 00 FF 
07348     00 E4 05 F1 | 	add	objptr, ##1536
0734c     F2 26 02 FB | 	rdlong	local05, objptr
07350     13 33 02 F6 | 	mov	local11, local05
07354     01 32 66 F0 | 	shl	local11, #1
07358     13 33 02 F1 | 	add	local11, local05
0735c     02 32 66 F0 | 	shl	local11, #2
07360     03 00 00 FF 
07364     00 E4 85 F1 | 	sub	objptr, ##1536
07368     F2 32 02 F1 | 	add	local11, objptr
0736c     08 32 06 F1 | 	add	local11, #8
07370     19 2B 62 FC | 	wrlong	local07, local11
07374     03 00 00 FF 
07378     00 E4 05 F1 | 	add	objptr, ##1536
0737c     F2 26 02 FB | 	rdlong	local05, objptr
07380     01 26 06 F1 | 	add	local05, #1
07384     F2 26 62 FC | 	wrlong	local05, objptr
07388     44 22 06 F6 | 	mov	local03, #68
0738c     0F 27 02 F6 | 	mov	local05, local01
07390     10 29 02 F6 | 	mov	local06, local02
07394     11 2B 02 F6 | 	mov	local07, local03
07398     F2 2C 02 FB | 	rdlong	local08, objptr
0739c     16 2F 02 F6 | 	mov	local09, local08
073a0     01 2E 66 F0 | 	shl	local09, #1
073a4     16 2F 02 F1 | 	add	local09, local08
073a8     02 2E 66 F0 | 	shl	local09, #2
073ac     03 00 00 FF 
073b0     00 E4 85 F1 | 	sub	objptr, ##1536
073b4     F2 2E 02 F1 | 	add	local09, objptr
073b8     17 27 62 FC | 	wrlong	local05, local09
073bc     03 00 00 FF 
073c0     00 E4 05 F1 | 	add	objptr, ##1536
073c4     F2 32 02 FB | 	rdlong	local11, objptr
073c8     19 31 02 F6 | 	mov	local10, local11
073cc     01 30 66 F0 | 	shl	local10, #1
073d0     19 31 02 F1 | 	add	local10, local11
073d4     02 30 66 F0 | 	shl	local10, #2
073d8     03 00 00 FF 
073dc     00 E4 85 F1 | 	sub	objptr, ##1536
073e0     F2 30 02 F1 | 	add	local10, objptr
073e4     04 30 06 F1 | 	add	local10, #4
073e8     18 29 62 FC | 	wrlong	local06, local10
073ec     03 00 00 FF 
073f0     00 E4 05 F1 | 	add	objptr, ##1536
073f4     F2 30 02 FB | 	rdlong	local10, objptr
073f8     18 33 02 F6 | 	mov	local11, local10
073fc     01 32 66 F0 | 	shl	local11, #1
07400     18 33 02 F1 | 	add	local11, local10
07404     02 32 66 F0 | 	shl	local11, #2
07408     03 00 00 FF 
0740c     00 E4 85 F1 | 	sub	objptr, ##1536
07410     F2 32 02 F1 | 	add	local11, objptr
07414     08 32 06 F1 | 	add	local11, #8
07418     19 2B 62 FC | 	wrlong	local07, local11
0741c     03 00 00 FF 
07420     00 E4 05 F1 | 	add	objptr, ##1536
07424     F2 26 02 FB | 	rdlong	local05, objptr
07428     01 26 06 F1 | 	add	local05, #1
0742c     F2 26 62 FC | 	wrlong	local05, objptr
07430     4A 00 00 FF 
07434     AC E4 85 F1 | 	sub	objptr, ##38060
07438                 | LR__0662
07438                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
07438     37 00 00 FF 
0743c     74 E4 05 F1 | 	add	objptr, ##28276
07440     F2 24 02 FB | 	rdlong	local04, objptr
07444     03 24 66 F0 | 	shl	local04, #3
07448     02 00 00 FF 
0744c     38 E4 85 F1 | 	sub	objptr, ##1080
07450     F2 24 02 F1 | 	add	local04, objptr
07454     04 24 06 F1 | 	add	local04, #4
07458     12 2D 02 FB | 	rdlong	local08, local04
0745c     12 2C 0E F2 | 	cmp	local08, #18 wz
07460     35 00 00 FF 
07464     3C E4 85 F1 | 	sub	objptr, ##27196
07468     60 01 90 5D |  if_ne	jmp	#LR__0663
0746c     22 22 06 F6 | 	mov	local03, #34
07470     0F 27 02 F6 | 	mov	local05, local01
07474     10 29 02 F6 | 	mov	local06, local02
07478     11 2B 02 F6 | 	mov	local07, local03
0747c     4A 00 00 FF 
07480     AC E4 05 F1 | 	add	objptr, ##38060
07484     F2 2C 02 FB | 	rdlong	local08, objptr
07488     16 2F 02 F6 | 	mov	local09, local08
0748c     01 2E 66 F0 | 	shl	local09, #1
07490     16 2F 02 F1 | 	add	local09, local08
07494     02 2E 66 F0 | 	shl	local09, #2
07498     03 00 00 FF 
0749c     00 E4 85 F1 | 	sub	objptr, ##1536
074a0     F2 2E 02 F1 | 	add	local09, objptr
074a4     17 27 62 FC | 	wrlong	local05, local09
074a8     03 00 00 FF 
074ac     00 E4 05 F1 | 	add	objptr, ##1536
074b0     F2 32 02 FB | 	rdlong	local11, objptr
074b4     19 31 02 F6 | 	mov	local10, local11
074b8     01 30 66 F0 | 	shl	local10, #1
074bc     19 31 02 F1 | 	add	local10, local11
074c0     02 30 66 F0 | 	shl	local10, #2
074c4     03 00 00 FF 
074c8     00 E4 85 F1 | 	sub	objptr, ##1536
074cc     F2 30 02 F1 | 	add	local10, objptr
074d0     04 30 06 F1 | 	add	local10, #4
074d4     18 29 62 FC | 	wrlong	local06, local10
074d8     03 00 00 FF 
074dc     00 E4 05 F1 | 	add	objptr, ##1536
074e0     F2 26 02 FB | 	rdlong	local05, objptr
074e4     13 33 02 F6 | 	mov	local11, local05
074e8     01 32 66 F0 | 	shl	local11, #1
074ec     13 33 02 F1 | 	add	local11, local05
074f0     02 32 66 F0 | 	shl	local11, #2
074f4     03 00 00 FF 
074f8     00 E4 85 F1 | 	sub	objptr, ##1536
074fc     F2 32 02 F1 | 	add	local11, objptr
07500     08 32 06 F1 | 	add	local11, #8
07504     19 2B 62 FC | 	wrlong	local07, local11
07508     03 00 00 FF 
0750c     00 E4 05 F1 | 	add	objptr, ##1536
07510     F2 26 02 FB | 	rdlong	local05, objptr
07514     01 26 06 F1 | 	add	local05, #1
07518     F2 26 62 FC | 	wrlong	local05, objptr
0751c     44 22 06 F6 | 	mov	local03, #68
07520     0F 27 02 F6 | 	mov	local05, local01
07524     10 29 02 F6 | 	mov	local06, local02
07528     11 2B 02 F6 | 	mov	local07, local03
0752c     F2 2C 02 FB | 	rdlong	local08, objptr
07530     16 2F 02 F6 | 	mov	local09, local08
07534     01 2E 66 F0 | 	shl	local09, #1
07538     16 2F 02 F1 | 	add	local09, local08
0753c     02 2E 66 F0 | 	shl	local09, #2
07540     03 00 00 FF 
07544     00 E4 85 F1 | 	sub	objptr, ##1536
07548     F2 2E 02 F1 | 	add	local09, objptr
0754c     17 27 62 FC | 	wrlong	local05, local09
07550     03 00 00 FF 
07554     00 E4 05 F1 | 	add	objptr, ##1536
07558     F2 32 02 FB | 	rdlong	local11, objptr
0755c     19 31 02 F6 | 	mov	local10, local11
07560     01 30 66 F0 | 	shl	local10, #1
07564     19 31 02 F1 | 	add	local10, local11
07568     02 30 66 F0 | 	shl	local10, #2
0756c     03 00 00 FF 
07570     00 E4 85 F1 | 	sub	objptr, ##1536
07574     F2 30 02 F1 | 	add	local10, objptr
07578     04 30 06 F1 | 	add	local10, #4
0757c     18 29 62 FC | 	wrlong	local06, local10
07580     03 00 00 FF 
07584     00 E4 05 F1 | 	add	objptr, ##1536
07588     F2 30 02 FB | 	rdlong	local10, objptr
0758c     18 33 02 F6 | 	mov	local11, local10
07590     01 32 66 F0 | 	shl	local11, #1
07594     18 33 02 F1 | 	add	local11, local10
07598     02 32 66 F0 | 	shl	local11, #2
0759c     03 00 00 FF 
075a0     00 E4 85 F1 | 	sub	objptr, ##1536
075a4     F2 32 02 F1 | 	add	local11, objptr
075a8     08 32 06 F1 | 	add	local11, #8
075ac     19 2B 62 FC | 	wrlong	local07, local11
075b0     03 00 00 FF 
075b4     00 E4 05 F1 | 	add	objptr, ##1536
075b8     F2 26 02 FB | 	rdlong	local05, objptr
075bc     01 26 06 F1 | 	add	local05, #1
075c0     F2 26 62 FC | 	wrlong	local05, objptr
075c4     4A 00 00 FF 
075c8     AC E4 85 F1 | 	sub	objptr, ##38060
075cc                 | LR__0663
075cc                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
075cc     37 00 00 FF 
075d0     74 E4 05 F1 | 	add	objptr, ##28276
075d4     F2 24 02 FB | 	rdlong	local04, objptr
075d8     03 24 66 F0 | 	shl	local04, #3
075dc     02 00 00 FF 
075e0     38 E4 85 F1 | 	sub	objptr, ##1080
075e4     F2 24 02 F1 | 	add	local04, objptr
075e8     04 24 06 F1 | 	add	local04, #4
075ec     12 2D 02 FB | 	rdlong	local08, local04
075f0     FE 2D 0E F2 | 	cmp	local08, #510 wz
075f4     35 00 00 FF 
075f8     3C E4 85 F1 | 	sub	objptr, ##27196
075fc     B8 00 90 5D |  if_ne	jmp	#LR__0664
07600     44 22 06 F6 | 	mov	local03, #68
07604     0F 27 02 F6 | 	mov	local05, local01
07608     10 29 02 F6 | 	mov	local06, local02
0760c     11 2B 02 F6 | 	mov	local07, local03
07610     4A 00 00 FF 
07614     AC E4 05 F1 | 	add	objptr, ##38060
07618     F2 2C 02 FB | 	rdlong	local08, objptr
0761c     16 2F 02 F6 | 	mov	local09, local08
07620     01 2E 66 F0 | 	shl	local09, #1
07624     16 2F 02 F1 | 	add	local09, local08
07628     02 2E 66 F0 | 	shl	local09, #2
0762c     03 00 00 FF 
07630     00 E4 85 F1 | 	sub	objptr, ##1536
07634     F2 2E 02 F1 | 	add	local09, objptr
07638     17 27 62 FC | 	wrlong	local05, local09
0763c     03 00 00 FF 
07640     00 E4 05 F1 | 	add	objptr, ##1536
07644     F2 32 02 FB | 	rdlong	local11, objptr
07648     19 31 02 F6 | 	mov	local10, local11
0764c     01 30 66 F0 | 	shl	local10, #1
07650     19 31 02 F1 | 	add	local10, local11
07654     02 30 66 F0 | 	shl	local10, #2
07658     03 00 00 FF 
0765c     00 E4 85 F1 | 	sub	objptr, ##1536
07660     F2 30 02 F1 | 	add	local10, objptr
07664     04 30 06 F1 | 	add	local10, #4
07668     18 29 62 FC | 	wrlong	local06, local10
0766c     03 00 00 FF 
07670     00 E4 05 F1 | 	add	objptr, ##1536
07674     F2 30 02 FB | 	rdlong	local10, objptr
07678     18 33 02 F6 | 	mov	local11, local10
0767c     01 32 66 F0 | 	shl	local11, #1
07680     18 33 02 F1 | 	add	local11, local10
07684     02 32 66 F0 | 	shl	local11, #2
07688     03 00 00 FF 
0768c     00 E4 85 F1 | 	sub	objptr, ##1536
07690     F2 32 02 F1 | 	add	local11, objptr
07694     08 32 06 F1 | 	add	local11, #8
07698     19 2B 62 FC | 	wrlong	local07, local11
0769c     03 00 00 FF 
076a0     00 E4 05 F1 | 	add	objptr, ##1536
076a4     F2 26 02 FB | 	rdlong	local05, objptr
076a8     01 26 06 F1 | 	add	local05, #1
076ac     F2 26 62 FC | 	wrlong	local05, objptr
076b0     4A 00 00 FF 
076b4     AC E4 85 F1 | 	sub	objptr, ##38060
076b8                 | LR__0664
076b8                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
076b8     37 00 00 FF 
076bc     74 E4 05 F1 | 	add	objptr, ##28276
076c0     F2 24 02 FB | 	rdlong	local04, objptr
076c4     03 24 66 F0 | 	shl	local04, #3
076c8     02 00 00 FF 
076cc     38 E4 85 F1 | 	sub	objptr, ##1080
076d0     F2 24 02 F1 | 	add	local04, objptr
076d4     04 24 06 F1 | 	add	local04, #4
076d8     12 2D 02 FB | 	rdlong	local08, local04
076dc     11 2C 0E F2 | 	cmp	local08, #17 wz
076e0     35 00 00 FF 
076e4     3C E4 85 F1 | 	sub	objptr, ##27196
076e8     6C 00 90 AD |  if_e	jmp	#LR__0665
076ec     37 00 00 FF 
076f0     74 E4 05 F1 | 	add	objptr, ##28276
076f4     F2 2C 02 FB | 	rdlong	local08, objptr
076f8     03 2C 66 F0 | 	shl	local08, #3
076fc     02 00 00 FF 
07700     38 E4 85 F1 | 	sub	objptr, ##1080
07704     F2 2C 02 F1 | 	add	local08, objptr
07708     04 2C 06 F1 | 	add	local08, #4
0770c     16 2D 02 FB | 	rdlong	local08, local08
07710     12 2C 0E F2 | 	cmp	local08, #18 wz
07714     35 00 00 FF 
07718     3C E4 85 F1 | 	sub	objptr, ##27196
0771c     38 00 90 AD |  if_e	jmp	#LR__0665
07720     37 00 00 FF 
07724     74 E4 05 F1 | 	add	objptr, ##28276
07728     F2 32 02 FB | 	rdlong	local11, objptr
0772c     03 32 66 F0 | 	shl	local11, #3
07730     02 00 00 FF 
07734     38 E4 85 F1 | 	sub	objptr, ##1080
07738     F2 32 02 F1 | 	add	local11, objptr
0773c     04 32 06 F1 | 	add	local11, #4
07740     19 33 02 FB | 	rdlong	local11, local11
07744     FE 33 0E F2 | 	cmp	local11, #510 wz
07748     35 00 00 FF 
0774c     3C E4 85 F1 | 	sub	objptr, ##27196
07750     16 FA 05 56 |  if_ne	mov	result1, #22
07754     68 00 90 5D |  if_ne	jmp	#LR__0667
07758                 | LR__0665
07758     37 00 00 FF 
0775c     74 E4 05 F1 | 	add	objptr, ##28276
07760     F2 24 02 FB | 	rdlong	local04, objptr
07764     01 24 06 F1 | 	add	local04, #1
07768     F2 24 62 FC | 	wrlong	local04, objptr
0776c     03 24 66 F0 | 	shl	local04, #3
07770     02 00 00 FF 
07774     38 E4 85 F1 | 	sub	objptr, ##1080
07778     F2 24 02 F1 | 	add	local04, objptr
0777c     04 24 06 F1 | 	add	local04, #4
07780     12 2D 02 FB | 	rdlong	local08, local04
07784     FE 2D 0E F2 | 	cmp	local08, #510 wz
07788     35 00 00 FF 
0778c     3C E4 85 F1 | 	sub	objptr, ##27196
07790     28 00 90 AD |  if_e	jmp	#LR__0666
07794     37 00 00 FF 
07798     74 E4 05 F1 | 	add	objptr, ##28276
0779c     F2 32 02 FB | 	rdlong	local11, objptr
077a0     0E 00 00 FF 
077a4     1C E4 05 F1 | 	add	objptr, ##7196
077a8     F2 30 02 FB | 	rdlong	local10, objptr
077ac     45 00 00 FF 
077b0     90 E4 85 F1 | 	sub	objptr, ##35472
077b4     18 33 52 F2 | 	cmps	local11, local10 wc
077b8     E4 FA 9F CD |  if_b	jmp	#LR__0661
077bc                 | LR__0666
077bc                 | ' return 0
077bc     00 FA 05 F6 | 	mov	result1, #0
077c0                 | LR__0667
077c0     A7 F0 03 F6 | 	mov	ptra, fp
077c4     B2 00 A0 FD | 	call	#popregs_
077c8                 | _compile_print_ret
077c8     2D 00 64 FD | 	ret
077cc                 | 
077cc                 | ' 
077cc                 | ' function compile_if() as ulong  
077cc                 | _compile_if
077cc     05 4A 05 F6 | 	mov	COUNT_, #5
077d0     A8 00 A0 FD | 	call	#pushregs_
077d4                 | _compile_if_enter
077d4     60 1A B0 FD | 	call	#_expr
077d8                 | ' expr()
077d8                 | ' return 0
077d8     37 00 00 FF 
077dc     74 E4 05 F1 | 	add	objptr, ##28276
077e0     F2 FA 01 FB | 	rdlong	result1, objptr
077e4     01 FA 05 F1 | 	add	result1, #1
077e8     F2 FA 61 FC | 	wrlong	result1, objptr
077ec     58 22 06 F6 | 	mov	local03, #88
077f0     0F 25 02 F6 | 	mov	local04, local01
077f4     10 27 02 F6 | 	mov	local05, local02
077f8     11 1F 02 F6 | 	mov	local01, local03
077fc     13 00 00 FF 
07800     38 E4 05 F1 | 	add	objptr, ##9784
07804     F2 12 02 FB | 	rdlong	arg01, objptr
07808     09 FB 01 F6 | 	mov	result1, arg01
0780c     01 FA 65 F0 | 	shl	result1, #1
07810     09 FB 01 F1 | 	add	result1, arg01
07814     02 FA 65 F0 | 	shl	result1, #2
07818     03 00 00 FF 
0781c     00 E4 85 F1 | 	sub	objptr, ##1536
07820     F2 FA 01 F1 | 	add	result1, objptr
07824     FD 24 62 FC | 	wrlong	local04, result1
07828     03 00 00 FF 
0782c     00 E4 05 F1 | 	add	objptr, ##1536
07830     F2 12 02 FB | 	rdlong	arg01, objptr
07834     09 25 02 F6 | 	mov	local04, arg01
07838     01 24 66 F0 | 	shl	local04, #1
0783c     09 25 02 F1 | 	add	local04, arg01
07840     02 24 66 F0 | 	shl	local04, #2
07844     03 00 00 FF 
07848     00 E4 85 F1 | 	sub	objptr, ##1536
0784c     F2 24 02 F1 | 	add	local04, objptr
07850     04 24 06 F1 | 	add	local04, #4
07854     12 27 62 FC | 	wrlong	local05, local04
07858     03 00 00 FF 
0785c     00 E4 05 F1 | 	add	objptr, ##1536
07860     F2 24 02 FB | 	rdlong	local04, objptr
07864     12 27 02 F6 | 	mov	local05, local04
07868     01 26 66 F0 | 	shl	local05, #1
0786c     12 27 02 F1 | 	add	local05, local04
07870     02 26 66 F0 | 	shl	local05, #2
07874     03 00 00 FF 
07878     00 E4 85 F1 | 	sub	objptr, ##1536
0787c     F2 26 02 F1 | 	add	local05, objptr
07880     08 26 06 F1 | 	add	local05, #8
07884     13 1F 62 FC | 	wrlong	local01, local05
07888     03 00 00 FF 
0788c     00 E4 05 F1 | 	add	objptr, ##1536
07890     F2 24 02 FB | 	rdlong	local04, objptr
07894     01 24 06 F1 | 	add	local04, #1
07898     F2 24 62 FC | 	wrlong	local04, objptr
0789c                 | ' 
0789c                 | ' 'print "In compile_if"
0789c                 | ' compile_fun_1p()
0789c                 | ' cmd=lparts(ct).token : ct+=1
0789c                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
0789c                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
0789c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
0789c     13 00 00 FF 
078a0     38 E4 85 F1 | 	sub	objptr, ##9784
078a4     F2 26 02 FB | 	rdlong	local05, objptr
078a8     01 26 06 F1 | 	add	local05, #1
078ac     03 26 66 F0 | 	shl	local05, #3
078b0     02 00 00 FF 
078b4     38 E4 85 F1 | 	sub	objptr, ##1080
078b8     F2 26 02 F1 | 	add	local05, objptr
078bc     13 13 02 FB | 	rdlong	arg01, local05
078c0     35 00 00 FF 
078c4     3C E4 85 F1 | 	sub	objptr, ##27196
078c8                 | ' 
078c8                 | ' select case s
078c8     71 01 00 FF 
078cc     94 14 06 F6 | 	mov	arg02, ##@LR__4902
078d0     68 72 B1 FD | 	call	#__system___string_cmp
078d4     00 FA 0D F2 | 	cmp	result1, #0 wz
078d8     1B FA 05 A6 |  if_e	mov	result1, #27
078dc     00 FA 05 56 |  if_ne	mov	result1, #0
078e0     00 FA 0D F2 | 	cmp	result1, #0 wz
078e4     0C 00 90 AD |  if_e	jmp	#LR__0670
078e8     05 12 06 F6 | 	mov	arg01, #5
078ec     88 ED BF FD | 	call	#_compile_immediate_assign
078f0     08 00 90 FD | 	jmp	#LR__0671
078f4                 | LR__0670
078f4     05 12 06 F6 | 	mov	arg01, #5
078f8     80 E3 BF FD | 	call	#_compile_immediate
078fc                 | LR__0671
078fc                 | ' 
078fc                 | ' 
078fc                 | ' return 0
078fc     00 FA 05 F6 | 	mov	result1, #0
07900     A7 F0 03 F6 | 	mov	ptra, fp
07904     B2 00 A0 FD | 	call	#popregs_
07908                 | _compile_if_ret
07908     2D 00 64 FD | 	ret
0790c                 | 
0790c                 | ' 
0790c                 | ' function compile_else() as ulong  
0790c                 | _compile_else
0790c     05 4A 05 F6 | 	mov	COUNT_, #5
07910     A8 00 A0 FD | 	call	#pushregs_
07914                 | _compile_else_enter
07914     5A 22 06 F6 | 	mov	local03, #90
07918     0F 25 02 F6 | 	mov	local04, local01
0791c     10 27 02 F6 | 	mov	local05, local02
07920     11 1F 02 F6 | 	mov	local01, local03
07924     4A 00 00 FF 
07928     AC E4 05 F1 | 	add	objptr, ##38060
0792c     F2 12 02 FB | 	rdlong	arg01, objptr
07930     09 FB 01 F6 | 	mov	result1, arg01
07934     01 FA 65 F0 | 	shl	result1, #1
07938     09 FB 01 F1 | 	add	result1, arg01
0793c     02 FA 65 F0 | 	shl	result1, #2
07940     03 00 00 FF 
07944     00 E4 85 F1 | 	sub	objptr, ##1536
07948     F2 FA 01 F1 | 	add	result1, objptr
0794c     FD 24 62 FC | 	wrlong	local04, result1
07950     03 00 00 FF 
07954     00 E4 05 F1 | 	add	objptr, ##1536
07958     F2 FA 01 FB | 	rdlong	result1, objptr
0795c     FD 24 02 F6 | 	mov	local04, result1
07960     01 24 66 F0 | 	shl	local04, #1
07964     FD 24 02 F1 | 	add	local04, result1
07968     02 24 66 F0 | 	shl	local04, #2
0796c     03 00 00 FF 
07970     00 E4 85 F1 | 	sub	objptr, ##1536
07974     F2 24 02 F1 | 	add	local04, objptr
07978     04 24 06 F1 | 	add	local04, #4
0797c     12 27 62 FC | 	wrlong	local05, local04
07980     03 00 00 FF 
07984     00 E4 05 F1 | 	add	objptr, ##1536
07988     F2 24 02 FB | 	rdlong	local04, objptr
0798c     12 27 02 F6 | 	mov	local05, local04
07990     01 26 66 F0 | 	shl	local05, #1
07994     12 27 02 F1 | 	add	local05, local04
07998     02 26 66 F0 | 	shl	local05, #2
0799c     03 00 00 FF 
079a0     00 E4 85 F1 | 	sub	objptr, ##1536
079a4     F2 26 02 F1 | 	add	local05, objptr
079a8     08 26 06 F1 | 	add	local05, #8
079ac     13 1F 62 FC | 	wrlong	local01, local05
079b0     03 00 00 FF 
079b4     00 E4 05 F1 | 	add	objptr, ##1536
079b8     F2 24 02 FB | 	rdlong	local04, objptr
079bc     01 24 06 F1 | 	add	local04, #1
079c0     F2 24 62 FC | 	wrlong	local04, objptr
079c4                 | ' 
079c4                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
079c4                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
079c4     13 00 00 FF 
079c8     38 E4 85 F1 | 	sub	objptr, ##9784
079cc     F2 26 02 FB | 	rdlong	local05, objptr
079d0     01 26 06 F1 | 	add	local05, #1
079d4     03 26 66 F0 | 	shl	local05, #3
079d8     02 00 00 FF 
079dc     38 E4 85 F1 | 	sub	objptr, ##1080
079e0     F2 26 02 F1 | 	add	local05, objptr
079e4     13 13 02 FB | 	rdlong	arg01, local05
079e8     35 00 00 FF 
079ec     3C E4 85 F1 | 	sub	objptr, ##27196
079f0                 | ' 
079f0                 | ' select case s
079f0     71 01 00 FF 
079f4     94 14 06 F6 | 	mov	arg02, ##@LR__4902
079f8     40 71 B1 FD | 	call	#__system___string_cmp
079fc     00 FA 0D F2 | 	cmp	result1, #0 wz
07a00     1B FA 05 A6 |  if_e	mov	result1, #27
07a04     00 FA 05 56 |  if_ne	mov	result1, #0
07a08     00 FA 0D F2 | 	cmp	result1, #0 wz
07a0c     0C 00 90 AD |  if_e	jmp	#LR__0680
07a10     05 12 06 F6 | 	mov	arg01, #5
07a14     60 EC BF FD | 	call	#_compile_immediate_assign
07a18     08 00 90 FD | 	jmp	#LR__0681
07a1c                 | LR__0680
07a1c     05 12 06 F6 | 	mov	arg01, #5
07a20     58 E2 BF FD | 	call	#_compile_immediate
07a24                 | LR__0681
07a24                 | ' 
07a24                 | ' 
07a24                 | ' return 0
07a24     00 FA 05 F6 | 	mov	result1, #0
07a28     A7 F0 03 F6 | 	mov	ptra, fp
07a2c     B2 00 A0 FD | 	call	#popregs_
07a30                 | _compile_else_ret
07a30     2D 00 64 FD | 	ret
07a34                 | 
07a34                 | ' 
07a34                 | ' 
07a34                 | ' function compile_dim() as ulong  
07a34                 | _compile_dim
07a34     11 4A 05 F6 | 	mov	COUNT_, #17
07a38     A8 00 A0 FD | 	call	#pushregs_
07a3c     01 1E 06 F6 | 	mov	local01, #1
07a40     01 20 06 F6 | 	mov	local02, #1
07a44     01 22 06 F6 | 	mov	local03, #1
07a48                 | ' 
07a48                 | ' dims(0)=1: dims(1)=1: dims(2)=1
07a48                 | ' 
07a48                 | ' if isname(lparts(ct).part$) then 
07a48     37 00 00 FF 
07a4c     74 E4 05 F1 | 	add	objptr, ##28276
07a50     F2 18 02 FB | 	rdlong	arg04, objptr
07a54     03 18 66 F0 | 	shl	arg04, #3
07a58     02 00 00 FF 
07a5c     38 E4 85 F1 | 	sub	objptr, ##1080
07a60     F2 18 02 F1 | 	add	arg04, objptr
07a64     0C 13 02 FB | 	rdlong	arg01, arg04
07a68     35 00 00 FF 
07a6c     3C E4 85 F1 | 	sub	objptr, ##27196
07a70     A4 D2 BF FD | 	call	#_isname
07a74     00 FA 0D F2 | 	cmp	result1, #0 wz
07a78     AC 05 90 AD |  if_e	jmp	#LR__0714
07a7c     37 00 00 FF 
07a80     74 E4 05 F1 | 	add	objptr, ##28276
07a84     F2 24 02 FB | 	rdlong	local04, objptr
07a88     03 24 66 F0 | 	shl	local04, #3
07a8c     02 00 00 FF 
07a90     38 E4 85 F1 | 	sub	objptr, ##1080
07a94     F2 24 02 F1 | 	add	local04, objptr
07a98     12 27 02 FB | 	rdlong	local05, local04
07a9c     01 28 66 F6 | 	neg	local06, #1
07aa0                 | '   varname2$=lparts(ct).part$ 
07aa0                 | '   j=-1
07aa0                 | '   if varnum>0 then
07aa0     04 E4 85 F1 | 	sub	objptr, #4
07aa4     F2 2A 02 FB | 	rdlong	local07, objptr
07aa8     35 00 00 FF 
07aac     38 E4 85 F1 | 	sub	objptr, ##27192
07ab0     01 2A 56 F2 | 	cmps	local07, #1 wc
07ab4     58 00 90 CD |  if_b	jmp	#LR__0692
07ab8                 | '  '   print "in dim, varnum=";varnum
07ab8                 | '     for i=0 to varnum-1
07ab8     00 2C 06 F6 | 	mov	local08, #0
07abc     35 00 00 FF 
07ac0     38 E4 05 F1 | 	add	objptr, ##27192
07ac4     F2 2E 02 FB | 	rdlong	local09, objptr
07ac8     35 00 00 FF 
07acc     38 E4 85 F1 | 	sub	objptr, ##27192
07ad0                 | LR__0690
07ad0     17 2D 52 F2 | 	cmps	local08, local09 wc
07ad4     38 00 90 3D |  if_ae	jmp	#LR__0691
07ad8                 | '       if variables(i).name=varname2$ then j=i : exit
07ad8     16 25 02 F6 | 	mov	local04, local08
07adc     04 24 66 F0 | 	shl	local04, #4
07ae0     15 00 00 FF 
07ae4     28 E4 05 F1 | 	add	objptr, ##10792
07ae8     F2 24 02 F1 | 	add	local04, objptr
07aec     12 13 02 FB | 	rdlong	arg01, local04
07af0     13 15 02 F6 | 	mov	arg02, local05
07af4     15 00 00 FF 
07af8     28 E4 85 F1 | 	sub	objptr, ##10792
07afc     3C 70 B1 FD | 	call	#__system___string_cmp
07b00     00 FA 0D F2 | 	cmp	result1, #0 wz
07b04     16 29 02 A6 |  if_e	mov	local06, local08
07b08     01 2C 06 51 |  if_ne	add	local08, #1
07b0c     C0 FF 9F 5D |  if_ne	jmp	#LR__0690
07b10                 | LR__0691
07b10                 | LR__0692
07b10                 | ' '  if j<>-1 then printerror (42) : return 42
07b10                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
07b10     FF FF 7F FF 
07b14     FF 29 0E F2 | 	cmp	local06, ##-1 wz
07b18     35 00 00 AF 
07b1c     38 E4 05 A1 |  if_e	add	objptr, ##27192
07b20     F2 28 02 AB |  if_e	rdlong	local06, objptr
07b24     35 00 00 AF 
07b28     38 E4 85 A1 |  if_e	sub	objptr, ##27192
07b2c     78 00 90 AD |  if_e	jmp	#LR__0693
07b30     00 12 06 F6 | 	mov	arg01, #0
07b34     3C C9 B1 FD | 	call	#__system___getiolock_0484
07b38     FD 12 02 F6 | 	mov	arg01, result1
07b3c     D4 6F B1 FD | 	call	#__system___lockmem
07b40     72 01 00 FF 
07b44     ED 15 06 F6 | 	mov	arg02, ##@LR__5089
07b48     00 12 06 F6 | 	mov	arg01, #0
07b4c     00 16 06 F6 | 	mov	arg03, #0
07b50     B4 7C B1 FD | 	call	#__system___basic_print_string
07b54     59 00 00 FF 
07b58     D0 E5 05 F1 | 	add	objptr, ##46032
07b5c     F2 14 02 FB | 	rdlong	arg02, objptr
07b60     59 00 00 FF 
07b64     D0 E5 85 F1 | 	sub	objptr, ##46032
07b68     00 12 06 F6 | 	mov	arg01, #0
07b6c     00 16 06 F6 | 	mov	arg03, #0
07b70     0A 18 06 F6 | 	mov	arg04, #10
07b74     14 7D B1 FD | 	call	#__system___basic_print_unsigned
07b78     72 01 00 FF 
07b7c     FB 15 06 F6 | 	mov	arg02, ##@LR__5090
07b80     00 12 06 F6 | 	mov	arg01, #0
07b84     00 16 06 F6 | 	mov	arg03, #0
07b88     7C 7C B1 FD | 	call	#__system___basic_print_string
07b8c     00 12 06 F6 | 	mov	arg01, #0
07b90     0A 14 06 F6 | 	mov	arg02, #10
07b94     00 16 06 F6 | 	mov	arg03, #0
07b98     14 7C B1 FD | 	call	#__system___basic_print_char
07b9c     00 12 06 F6 | 	mov	arg01, #0
07ba0     D0 C8 B1 FD | 	call	#__system___getiolock_0484
07ba4     FD 00 68 FC | 	wrlong	#0, result1
07ba8                 | LR__0693
07ba8                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
07ba8     37 00 00 FF 
07bac     74 E4 05 F1 | 	add	objptr, ##28276
07bb0     F2 18 02 FB | 	rdlong	arg04, objptr
07bb4     01 18 06 F1 | 	add	arg04, #1
07bb8     03 18 66 F0 | 	shl	arg04, #3
07bbc     02 00 00 FF 
07bc0     38 E4 85 F1 | 	sub	objptr, ##1080
07bc4     F2 18 02 F1 | 	add	arg04, objptr
07bc8     0C 13 02 FB | 	rdlong	arg01, arg04
07bcc     73 01 00 FF 
07bd0     1C 14 06 F6 | 	mov	arg02, ##@LR__5091
07bd4     35 00 00 FF 
07bd8     3C E4 85 F1 | 	sub	objptr, ##27196
07bdc     5C 6F B1 FD | 	call	#__system___string_cmp
07be0     00 FA 0D F2 | 	cmp	result1, #0 wz
07be4     50 00 90 AD |  if_e	jmp	#LR__0694
07be8     37 00 00 FF 
07bec     74 E4 05 F1 | 	add	objptr, ##28276
07bf0     F2 2E 02 FB | 	rdlong	local09, objptr
07bf4     01 2E 06 F1 | 	add	local09, #1
07bf8     03 2E 66 F0 | 	shl	local09, #3
07bfc     02 00 00 FF 
07c00     38 E4 85 F1 | 	sub	objptr, ##1080
07c04     F2 2E 02 F1 | 	add	local09, objptr
07c08     17 13 02 FB | 	rdlong	arg01, local09
07c0c     73 01 00 FF 
07c10     1E 14 06 F6 | 	mov	arg02, ##@LR__5092
07c14     35 00 00 FF 
07c18     3C E4 85 F1 | 	sub	objptr, ##27196
07c1c     1C 6F B1 FD | 	call	#__system___string_cmp
07c20     00 FA 0D F2 | 	cmp	result1, #0 wz
07c24     10 00 90 AD |  if_e	jmp	#LR__0694
07c28     2B 12 06 F6 | 	mov	arg01, #43
07c2c     3C 2A B1 FD | 	call	#_printerror
07c30     2B FA 05 F6 | 	mov	result1, #43
07c34     00 05 90 FD | 	jmp	#LR__0716
07c38                 | LR__0694
07c38                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
07c38     37 00 00 FF 
07c3c     74 E4 05 F1 | 	add	objptr, ##28276
07c40     F2 14 02 FB | 	rdlong	arg02, objptr
07c44     01 14 06 F1 | 	add	arg02, #1
07c48     03 14 66 F0 | 	shl	arg02, #3
07c4c     02 00 00 FF 
07c50     38 E4 85 F1 | 	sub	objptr, ##1080
07c54     F2 14 02 F1 | 	add	arg02, objptr
07c58     0A 13 02 FB | 	rdlong	arg01, arg02
07c5c     73 01 00 FF 
07c60     21 14 06 F6 | 	mov	arg02, ##@LR__5093
07c64     35 00 00 FF 
07c68     3C E4 85 F1 | 	sub	objptr, ##27196
07c6c     CC 6E B1 FD | 	call	#__system___string_cmp
07c70     00 FA 0D F2 | 	cmp	result1, #0 wz
07c74     37 00 00 AF 
07c78     74 E4 05 A1 |  if_e	add	objptr, ##28276
07c7c     F2 30 02 AB |  if_e	rdlong	local10, objptr
07c80     37 00 00 AF 
07c84     74 E4 85 A1 |  if_e	sub	objptr, ##28276
07c88     01 30 06 A1 |  if_e	add	local10, #1
07c8c     7C 01 90 AD |  if_e	jmp	#LR__0700
07c90     37 00 00 FF 
07c94     74 E4 05 F1 | 	add	objptr, ##28276
07c98     F2 30 02 FB | 	rdlong	local10, objptr
07c9c     37 00 00 FF 
07ca0     74 E4 85 F1 | 	sub	objptr, ##28276
07ca4     02 30 06 F1 | 	add	local10, #2
07ca8     00 32 06 F6 | 	mov	local11, #0
07cac                 | '   l=ct+2 : m=0 : do
07cac                 | LR__0695
07cac                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
07cac                 | '     if isdec(lparts(l).part$) then 
07cac     18 25 02 F6 | 	mov	local04, local10
07cb0     03 24 66 F0 | 	shl	local04, #3
07cb4     35 00 00 FF 
07cb8     3C E4 05 F1 | 	add	objptr, ##27196
07cbc     F2 24 02 F1 | 	add	local04, objptr
07cc0     12 13 02 FB | 	rdlong	arg01, local04
07cc4     35 00 00 FF 
07cc8     3C E4 85 F1 | 	sub	objptr, ##27196
07ccc     EC D6 BF FD | 	call	#_isdec
07cd0     00 FA 0D F2 | 	cmp	result1, #0 wz
07cd4     44 00 90 AD |  if_e	jmp	#LR__0696
07cd8     19 35 02 F6 | 	mov	local12, local11
07cdc     0F 35 06 F1 | 	add	local12, #local01
07ce0     18 2F 02 F6 | 	mov	local09, local10
07ce4     03 2E 66 F0 | 	shl	local09, #3
07ce8     35 00 00 FF 
07cec     3C E4 05 F1 | 	add	objptr, ##27196
07cf0     F2 2E 02 F1 | 	add	local09, objptr
07cf4     17 13 02 FB | 	rdlong	arg01, local09
07cf8     00 14 06 F6 | 	mov	arg02, #0
07cfc     35 00 00 FF 
07d00     3C E4 85 F1 | 	sub	objptr, ##27196
07d04     CC 9F B1 FD | 	call	#__system____builtin_atoi
07d08     FD 36 02 F6 | 	mov	local13, result1
07d0c                 | 	'.live	local13
07d0c                 | 	'.live	local12
07d0c     00 34 8E F9 | 	altd	local12, #0
07d10     1B 35 02 F6 | 	mov	local12, local13
07d14     01 32 06 F1 | 	add	local11, #1
07d18     10 00 90 FD | 	jmp	#LR__0697
07d1c                 | LR__0696
07d1c     11 12 06 F6 | 	mov	arg01, #17
07d20     48 29 B1 FD | 	call	#_printerror
07d24                 | '       printerror (17)  : return(17)
07d24     11 FA 05 F6 | 	mov	result1, #17
07d28     0C 04 90 FD | 	jmp	#LR__0716
07d2c                 | LR__0697
07d2c                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
07d2c     18 25 02 F6 | 	mov	local04, local10
07d30     01 24 06 F1 | 	add	local04, #1
07d34     03 24 66 F0 | 	shl	local04, #3
07d38     35 00 00 FF 
07d3c     3C E4 05 F1 | 	add	objptr, ##27196
07d40     F2 24 02 F1 | 	add	local04, objptr
07d44     12 13 02 FB | 	rdlong	arg01, local04
07d48     73 01 00 FF 
07d4c     24 14 06 F6 | 	mov	arg02, ##@LR__5094
07d50     35 00 00 FF 
07d54     3C E4 85 F1 | 	sub	objptr, ##27196
07d58     E0 6D B1 FD | 	call	#__system___string_cmp
07d5c     00 FA 0D F2 | 	cmp	result1, #0 wz
07d60     48 00 90 AD |  if_e	jmp	#LR__0698
07d64     18 37 02 F6 | 	mov	local13, local10
07d68     01 36 06 F1 | 	add	local13, #1
07d6c     03 36 66 F0 | 	shl	local13, #3
07d70     35 00 00 FF 
07d74     3C E4 05 F1 | 	add	objptr, ##27196
07d78     F2 36 02 F1 | 	add	local13, objptr
07d7c     1B 13 02 FB | 	rdlong	arg01, local13
07d80     73 01 00 FF 
07d84     26 14 06 F6 | 	mov	arg02, ##@LR__5095
07d88     35 00 00 FF 
07d8c     3C E4 85 F1 | 	sub	objptr, ##27196
07d90     A8 6D B1 FD | 	call	#__system___string_cmp
07d94     00 FA 0D F2 | 	cmp	result1, #0 wz
07d98     10 00 90 AD |  if_e	jmp	#LR__0698
07d9c     2C 12 06 F6 | 	mov	arg01, #44
07da0     C8 28 B1 FD | 	call	#_printerror
07da4     2C FA 05 F6 | 	mov	result1, #44
07da8     8C 03 90 FD | 	jmp	#LR__0716
07dac                 | LR__0698
07dac     02 30 06 F1 | 	add	local10, #2
07db0     18 25 02 F6 | 	mov	local04, local10
07db4     01 24 86 F1 | 	sub	local04, #1
07db8     03 24 66 F0 | 	shl	local04, #3
07dbc     35 00 00 FF 
07dc0     3C E4 05 F1 | 	add	objptr, ##27196
07dc4     F2 24 02 F1 | 	add	local04, objptr
07dc8     12 13 02 FB | 	rdlong	arg01, local04
07dcc     73 01 00 FF 
07dd0     28 14 06 F6 | 	mov	arg02, ##@LR__5096
07dd4     35 00 00 FF 
07dd8     3C E4 85 F1 | 	sub	objptr, ##27196
07ddc     5C 6D B1 FD | 	call	#__system___string_cmp
07de0     00 FA 0D F2 | 	cmp	result1, #0 wz
07de4     03 32 56 52 |  if_ne	cmps	local11, #3 wc
07de8     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0695
07dec                 | '   if m>3 then printerror(45): return(45)
07dec     04 32 56 F2 | 	cmps	local11, #4 wc
07df0     10 00 90 CD |  if_b	jmp	#LR__0699
07df4     2D 12 06 F6 | 	mov	arg01, #45
07df8     70 28 B1 FD | 	call	#_printerror
07dfc     2D FA 05 F6 | 	mov	result1, #45
07e00     34 03 90 FD | 	jmp	#LR__0716
07e04                 | LR__0699
07e04     00 39 06 F6 | 	mov	local14, #256
07e08     0C 3A 06 F6 | 	mov	local15, #12
07e0c                 | LR__0700
07e0c                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
07e0c                 | '   arraytype=array_no_type : esize=12
07e0c                 | ' 1350 
07e0c                 | '   if lparts(l).part$="as" then
07e0c     18 25 02 F6 | 	mov	local04, local10
07e10     03 24 66 F0 | 	shl	local04, #3
07e14     35 00 00 FF 
07e18     3C E4 05 F1 | 	add	objptr, ##27196
07e1c     F2 24 02 F1 | 	add	local04, objptr
07e20     12 13 02 FB | 	rdlong	arg01, local04
07e24     73 01 00 FF 
07e28     2A 14 06 F6 | 	mov	arg02, ##@LR__5097
07e2c     35 00 00 FF 
07e30     3C E4 85 F1 | 	sub	objptr, ##27196
07e34     04 6D B1 FD | 	call	#__system___string_cmp
07e38     00 FA 0D F2 | 	cmp	result1, #0 wz
07e3c     F8 01 90 5D |  if_ne	jmp	#LR__0715
07e40                 | '     select case lparts(l+1).part$
07e40     18 35 02 F6 | 	mov	local12, local10
07e44     01 34 06 F1 | 	add	local12, #1
07e48     03 34 66 F0 | 	shl	local12, #3
07e4c     35 00 00 FF 
07e50     3C E4 05 F1 | 	add	objptr, ##27196
07e54     F2 34 02 F1 | 	add	local12, objptr
07e58     1A 3D 02 FB | 	rdlong	local16, local12
07e5c     73 01 00 FF 
07e60     2D 14 06 F6 | 	mov	arg02, ##@LR__5098
07e64     1E 13 02 F6 | 	mov	arg01, local16
07e68     35 00 00 FF 
07e6c     3C E4 85 F1 | 	sub	objptr, ##27196
07e70     C8 6C B1 FD | 	call	#__system___string_cmp
07e74     00 FA 0D F2 | 	cmp	result1, #0 wz
07e78     0C 01 90 AD |  if_e	jmp	#LR__0701
07e7c     73 01 00 FF 
07e80     32 14 06 F6 | 	mov	arg02, ##@LR__5099
07e84     1E 13 02 F6 | 	mov	arg01, local16
07e88     B0 6C B1 FD | 	call	#__system___string_cmp
07e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
07e90     00 01 90 AD |  if_e	jmp	#LR__0702
07e94     73 01 00 FF 
07e98     38 14 06 F6 | 	mov	arg02, ##@LR__5100
07e9c     1E 13 02 F6 | 	mov	arg01, local16
07ea0     98 6C B1 FD | 	call	#__system___string_cmp
07ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
07ea8     F4 00 90 AD |  if_e	jmp	#LR__0703
07eac     73 01 00 FF 
07eb0     3E 14 06 F6 | 	mov	arg02, ##@LR__5101
07eb4     1E 13 02 F6 | 	mov	arg01, local16
07eb8     80 6C B1 FD | 	call	#__system___string_cmp
07ebc     00 FA 0D F2 | 	cmp	result1, #0 wz
07ec0     E8 00 90 AD |  if_e	jmp	#LR__0704
07ec4     73 01 00 FF 
07ec8     45 14 06 F6 | 	mov	arg02, ##@LR__5102
07ecc     1E 13 02 F6 | 	mov	arg01, local16
07ed0     68 6C B1 FD | 	call	#__system___string_cmp
07ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
07ed8     DC 00 90 AD |  if_e	jmp	#LR__0705
07edc     73 01 00 FF 
07ee0     4A 14 06 F6 | 	mov	arg02, ##@LR__5103
07ee4     1E 13 02 F6 | 	mov	arg01, local16
07ee8     50 6C B1 FD | 	call	#__system___string_cmp
07eec     00 FA 0D F2 | 	cmp	result1, #0 wz
07ef0     D0 00 90 AD |  if_e	jmp	#LR__0706
07ef4     73 01 00 FF 
07ef8     52 14 06 F6 | 	mov	arg02, ##@LR__5104
07efc     1E 13 02 F6 | 	mov	arg01, local16
07f00     38 6C B1 FD | 	call	#__system___string_cmp
07f04     00 FA 0D F2 | 	cmp	result1, #0 wz
07f08     C4 00 90 AD |  if_e	jmp	#LR__0707
07f0c     73 01 00 FF 
07f10     58 14 06 F6 | 	mov	arg02, ##@LR__5105
07f14     1E 13 02 F6 | 	mov	arg01, local16
07f18     20 6C B1 FD | 	call	#__system___string_cmp
07f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
07f20     B8 00 90 AD |  if_e	jmp	#LR__0708
07f24     73 01 00 FF 
07f28     5E 14 06 F6 | 	mov	arg02, ##@LR__5106
07f2c     1E 13 02 F6 | 	mov	arg01, local16
07f30     08 6C B1 FD | 	call	#__system___string_cmp
07f34     00 FA 0D F2 | 	cmp	result1, #0 wz
07f38     AC 00 90 AD |  if_e	jmp	#LR__0709
07f3c     73 01 00 FF 
07f40     65 14 06 F6 | 	mov	arg02, ##@LR__5107
07f44     1E 13 02 F6 | 	mov	arg01, local16
07f48     F0 6B B1 FD | 	call	#__system___string_cmp
07f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
07f50     A0 00 90 AD |  if_e	jmp	#LR__0710
07f54     73 01 00 FF 
07f58     6C 14 06 F6 | 	mov	arg02, ##@LR__5108
07f5c     1E 13 02 F6 | 	mov	arg01, local16
07f60     D8 6B B1 FD | 	call	#__system___string_cmp
07f64     00 FA 0D F2 | 	cmp	result1, #0 wz
07f68     94 00 90 AD |  if_e	jmp	#LR__0711
07f6c     73 01 00 FF 
07f70     73 14 06 F6 | 	mov	arg02, ##@LR__5109
07f74     1E 13 02 F6 | 	mov	arg01, local16
07f78     C0 6B B1 FD | 	call	#__system___string_cmp
07f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
07f80     88 00 90 AD |  if_e	jmp	#LR__0712
07f84     90 00 90 FD | 	jmp	#LR__0713
07f88                 | LR__0701
07f88     01 39 06 F6 | 	mov	local14, #257
07f8c     01 3A 06 F6 | 	mov	local15, #1
07f90     A4 00 90 FD | 	jmp	#LR__0715
07f94                 | LR__0702
07f94     02 39 06 F6 | 	mov	local14, #258
07f98     01 3A 06 F6 | 	mov	local15, #1
07f9c     98 00 90 FD | 	jmp	#LR__0715
07fa0                 | LR__0703
07fa0     03 39 06 F6 | 	mov	local14, #259
07fa4     02 3A 06 F6 | 	mov	local15, #2
07fa8     8C 00 90 FD | 	jmp	#LR__0715
07fac                 | LR__0704
07fac     04 39 06 F6 | 	mov	local14, #260
07fb0     02 3A 06 F6 | 	mov	local15, #2
07fb4     80 00 90 FD | 	jmp	#LR__0715
07fb8                 | LR__0705
07fb8     05 39 06 F6 | 	mov	local14, #261
07fbc     04 3A 06 F6 | 	mov	local15, #4
07fc0     74 00 90 FD | 	jmp	#LR__0715
07fc4                 | LR__0706
07fc4     05 39 06 F6 | 	mov	local14, #261
07fc8     04 3A 06 F6 | 	mov	local15, #4
07fcc     68 00 90 FD | 	jmp	#LR__0715
07fd0                 | LR__0707
07fd0     06 39 06 F6 | 	mov	local14, #262
07fd4     04 3A 06 F6 | 	mov	local15, #4
07fd8     5C 00 90 FD | 	jmp	#LR__0715
07fdc                 | LR__0708
07fdc     07 39 06 F6 | 	mov	local14, #263
07fe0     08 3A 06 F6 | 	mov	local15, #8
07fe4     50 00 90 FD | 	jmp	#LR__0715
07fe8                 | LR__0709
07fe8     08 39 06 F6 | 	mov	local14, #264
07fec     08 3A 06 F6 | 	mov	local15, #8
07ff0     44 00 90 FD | 	jmp	#LR__0715
07ff4                 | LR__0710
07ff4     09 39 06 F6 | 	mov	local14, #265
07ff8     04 3A 06 F6 | 	mov	local15, #4
07ffc     38 00 90 FD | 	jmp	#LR__0715
08000                 | LR__0711
08000     0A 39 06 F6 | 	mov	local14, #266
08004     08 3A 06 F6 | 	mov	local15, #8
08008     2C 00 90 FD | 	jmp	#LR__0715
0800c                 | LR__0712
0800c     0B 39 06 F6 | 	mov	local14, #267
08010     04 3A 06 F6 | 	mov	local15, #4
08014     20 00 90 FD | 	jmp	#LR__0715
08018                 | LR__0713
08018     2F 12 06 F6 | 	mov	arg01, #47
0801c     4C 26 B1 FD | 	call	#_printerror
08020     2F FA 05 F6 | 	mov	result1, #47
08024     10 01 90 FD | 	jmp	#LR__0716
08028                 | LR__0714
08028     2E 12 06 F6 | 	mov	arg01, #46
0802c     3C 26 B1 FD | 	call	#_printerror
08030                 | '   printerror(46): return 46
08030     2E FA 05 F6 | 	mov	result1, #46
08034     00 01 90 FD | 	jmp	#LR__0716
08038                 | LR__0715
08038     0F 3B 02 FD | 	qmul	local15, local01
0803c     18 2A 62 FD | 	getqx	local07
08040     10 2B 02 FD | 	qmul	local07, local02
08044     18 3C 62 FD | 	getqx	local16
08048     11 3D 02 FD | 	qmul	local16, local03
0804c     59 00 00 FF 
08050     B8 E5 05 F1 | 	add	objptr, ##46008
08054     F2 3E 02 FB | 	rdlong	local17, objptr
08058     1C 15 02 F6 | 	mov	arg02, local14
0805c     18 3C 62 FD | 	getqx	local16
08060     1E 3F 82 F1 | 	sub	local17, local16
08064     10 3E 86 F1 | 	sub	local17, #16
08068     0F 3E 26 F5 | 	andn	local17, #15
0806c     F2 3E 62 FC | 	wrlong	local17, objptr
08070     59 00 00 FF 
08074     B8 E5 85 F1 | 	sub	objptr, ##46008
08078     1F 13 02 F6 | 	mov	arg01, local17
0807c     98 27 B1 FD | 	call	#_psdpoke
08080     1F 13 02 F6 | 	mov	arg01, local17
08084     02 12 06 F1 | 	add	arg01, #2
08088     1D 15 02 F6 | 	mov	arg02, local15
0808c     88 27 B1 FD | 	call	#_psdpoke
08090     1F 13 02 F6 | 	mov	arg01, local17
08094     04 12 06 F1 | 	add	arg01, #4
08098     0F 15 02 F6 | 	mov	arg02, local01
0809c     30 27 B1 FD | 	call	#_pslpoke
080a0     1F 13 02 F6 | 	mov	arg01, local17
080a4     08 12 06 F1 | 	add	arg01, #8
080a8     10 15 02 F6 | 	mov	arg02, local02
080ac     20 27 B1 FD | 	call	#_pslpoke
080b0     1F 13 02 F6 | 	mov	arg01, local17
080b4     0C 12 06 F1 | 	add	arg01, #12
080b8     11 15 02 F6 | 	mov	arg02, local03
080bc     10 27 B1 FD | 	call	#_pslpoke
080c0     14 35 02 F6 | 	mov	local12, local06
080c4     04 34 66 F0 | 	shl	local12, #4
080c8     15 00 00 FF 
080cc     28 E4 05 F1 | 	add	objptr, ##10792
080d0     F2 34 02 F1 | 	add	local12, objptr
080d4     1A 27 62 FC | 	wrlong	local05, local12
080d8     14 35 02 F6 | 	mov	local12, local06
080dc     04 34 66 F0 | 	shl	local12, #4
080e0     F2 34 02 F1 | 	add	local12, objptr
080e4     04 34 06 F1 | 	add	local12, #4
080e8     1A 3F 62 FC | 	wrlong	local17, local12
080ec     14 35 02 F6 | 	mov	local12, local06
080f0     04 34 66 F0 | 	shl	local12, #4
080f4     F2 34 02 F1 | 	add	local12, objptr
080f8     0C 34 06 F1 | 	add	local12, #12
080fc     1A 39 62 FC | 	wrlong	local14, local12
08100                 | ' memtop=arrayptr
08100                 | ' 
08100                 | ' psdpoke arrayptr,arraytype ': print arraytype, arrayptr
08100                 | ' psdpoke arrayptr+2,esize ': print esize , psdpeek(arrayptr+2)
08100                 | ' pslpoke arrayptr+4,dims(0)
08100                 | ' pslpoke arrayptr+8,dims(1)
08100                 | ' pslpoke arrayptr+12,dims(2)
08100                 | ' 'for i=0 to 15: print hex$(pspeek(arrayptr+i),2), : next i
08100                 | ' 'for i=0 to 3: print hex$(pslpeek(arrayptr+4*i),2), : next i
08100                 | ' 
08100                 | ' 
08100                 | ' variables(j).name=varname2$
08100                 | ' variables(j).value.uresult=arrayptr
08100                 | ' variables(j).vartype=arraytype
08100                 | ' if j=varnum then varnum+=1
08100     20 00 00 FF 
08104     10 E4 05 F1 | 	add	objptr, ##16400
08108     F2 2A 02 FB | 	rdlong	local07, objptr
0810c     35 00 00 FF 
08110     38 E4 85 F1 | 	sub	objptr, ##27192
08114     15 29 0A F2 | 	cmp	local06, local07 wz
08118     35 00 00 AF 
0811c     38 E4 05 A1 |  if_e	add	objptr, ##27192
08120     F2 2A 02 AB |  if_e	rdlong	local07, objptr
08124     01 2A 06 A1 |  if_e	add	local07, #1
08128     F2 2A 62 AC |  if_e	wrlong	local07, objptr
0812c     35 00 00 AF 
08130     38 E4 85 A1 |  if_e	sub	objptr, ##27192
08134                 | ' 
08134                 | ' return 0
08134     00 FA 05 F6 | 	mov	result1, #0
08138                 | LR__0716
08138     A7 F0 03 F6 | 	mov	ptra, fp
0813c     B2 00 A0 FD | 	call	#popregs_
08140                 | _compile_dim_ret
08140     2D 00 64 FD | 	ret
08144                 | 
08144                 | ' 
08144                 | ' 
08144                 | ' function compile_for() as ulong  
08144                 | _compile_for
08144     07 4A 05 F6 | 	mov	COUNT_, #7
08148     A8 00 A0 FD | 	call	#pushregs_
0814c                 | ' 
0814c                 | ' 
0814c                 | ' 
0814c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
0814c     37 00 00 FF 
08150     74 E4 05 F1 | 	add	objptr, ##28276
08154     F2 14 02 FB | 	rdlong	arg02, objptr
08158     01 14 06 F1 | 	add	arg02, #1
0815c     03 14 66 F0 | 	shl	arg02, #3
08160     02 00 00 FF 
08164     38 E4 85 F1 | 	sub	objptr, ##1080
08168     F2 14 02 F1 | 	add	arg02, objptr
0816c     0A 13 02 FB | 	rdlong	arg01, arg02
08170     35 00 00 FF 
08174     3C E4 85 F1 | 	sub	objptr, ##27196
08178                 | ' 
08178                 | ' select case s
08178     71 01 00 FF 
0817c     94 14 06 F6 | 	mov	arg02, ##@LR__4902
08180     B8 69 B1 FD | 	call	#__system___string_cmp
08184     00 FA 0D F2 | 	cmp	result1, #0 wz
08188     1B FA 05 A6 |  if_e	mov	result1, #27
0818c     00 FA 05 56 |  if_ne	mov	result1, #0
08190     00 FA 0D F2 | 	cmp	result1, #0 wz
08194     0C 00 90 AD |  if_e	jmp	#LR__0720
08198     05 12 06 F6 | 	mov	arg01, #5
0819c     D8 E4 BF FD | 	call	#_compile_immediate_assign
081a0     10 00 90 FD | 	jmp	#LR__0721
081a4                 | LR__0720
081a4     20 12 06 F6 | 	mov	arg01, #32
081a8     48 E9 BF FD | 	call	#_compile_error
081ac     20 FA 05 F6 | 	mov	result1, #32
081b0     E8 02 90 FD | 	jmp	#LR__0727
081b4                 | LR__0721
081b4     4A 00 00 FF 
081b8     AC E4 05 F1 | 	add	objptr, ##38060
081bc     F2 12 02 FB | 	rdlong	arg01, objptr
081c0     09 25 02 F6 | 	mov	local04, arg01
081c4     01 24 86 F1 | 	sub	local04, #1
081c8     12 15 02 F6 | 	mov	arg02, local04
081cc     01 14 66 F0 | 	shl	arg02, #1
081d0     12 15 02 F1 | 	add	arg02, local04
081d4     02 14 66 F0 | 	shl	arg02, #2
081d8     03 00 00 FF 
081dc     00 E4 85 F1 | 	sub	objptr, ##1536
081e0     F2 14 02 F1 | 	add	arg02, objptr
081e4     0A 1F 02 FB | 	rdlong	local01, arg02
081e8     04 14 06 F1 | 	add	arg02, #4
081ec     0A 27 02 FB | 	rdlong	local05, arg02
081f0     01 12 86 F1 | 	sub	arg01, #1
081f4     09 29 02 F6 | 	mov	local06, arg01
081f8     01 28 66 F0 | 	shl	local06, #1
081fc     09 29 02 F1 | 	add	local06, arg01
08200     02 28 66 F0 | 	shl	local06, #2
08204     F2 28 02 F1 | 	add	local06, objptr
08208     08 28 06 F1 | 	add	local06, #8
0820c     14 13 02 FB | 	rdlong	arg01, local06
08210     13 21 02 F6 | 	mov	local02, local05
08214     09 23 02 F6 | 	mov	local03, arg01
08218                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
08218                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
08218     17 22 0E F2 | 	cmp	local03, #23 wz
0821c     47 00 00 FF 
08220     AC E4 85 F1 | 	sub	objptr, ##36524
08224     10 00 90 AD |  if_e	jmp	#LR__0722
08228     22 12 06 F6 | 	mov	arg01, #34
0822c     C4 E8 BF FD | 	call	#_compile_error
08230     22 FA 05 F6 | 	mov	result1, #34
08234     64 02 90 FD | 	jmp	#LR__0727
08238                 | LR__0722
08238     0F 2B 02 F6 | 	mov	local07, local01
0823c                 | ' varnum=t1.result.uresult
0823c                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
0823c     37 00 00 FF 
08240     74 E4 05 F1 | 	add	objptr, ##28276
08244     F2 24 02 FB | 	rdlong	local04, objptr
08248     03 24 66 F0 | 	shl	local04, #3
0824c     02 00 00 FF 
08250     38 E4 85 F1 | 	sub	objptr, ##1080
08254     F2 24 02 F1 | 	add	local04, objptr
08258     12 13 02 FB | 	rdlong	arg01, local04
0825c     73 01 00 FF 
08260     7A 14 06 F6 | 	mov	arg02, ##@LR__5110
08264     35 00 00 FF 
08268     3C E4 85 F1 | 	sub	objptr, ##27196
0826c     CC 68 B1 FD | 	call	#__system___string_cmp
08270     00 FA 0D F2 | 	cmp	result1, #0 wz
08274     10 00 90 AD |  if_e	jmp	#LR__0723
08278     21 12 06 F6 | 	mov	arg01, #33
0827c     74 E8 BF FD | 	call	#_compile_error
08280     21 FA 05 F6 | 	mov	result1, #33
08284     14 02 90 FD | 	jmp	#LR__0727
08288                 | LR__0723
08288     37 00 00 FF 
0828c     74 E4 05 F1 | 	add	objptr, ##28276
08290     F2 24 02 FB | 	rdlong	local04, objptr
08294     01 24 06 F1 | 	add	local04, #1
08298     F2 24 62 FC | 	wrlong	local04, objptr
0829c     37 00 00 FF 
082a0     74 E4 85 F1 | 	sub	objptr, ##28276
082a4     90 0F B0 FD | 	call	#_expr
082a8                 | ' ct+=1
082a8                 | ' expr()  ' there is "to" value pushed on the stack
082a8                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
082a8     37 00 00 FF 
082ac     74 E4 05 F1 | 	add	objptr, ##28276
082b0     F2 24 02 FB | 	rdlong	local04, objptr
082b4     03 24 66 F0 | 	shl	local04, #3
082b8     02 00 00 FF 
082bc     38 E4 85 F1 | 	sub	objptr, ##1080
082c0     F2 24 02 F1 | 	add	local04, objptr
082c4     12 13 02 FB | 	rdlong	arg01, local04
082c8     73 01 00 FF 
082cc     7D 14 06 F6 | 	mov	arg02, ##@LR__5111
082d0     35 00 00 FF 
082d4     3C E4 85 F1 | 	sub	objptr, ##27196
082d8     60 68 B1 FD | 	call	#__system___string_cmp
082dc     00 FA 0D F2 | 	cmp	result1, #0 wz
082e0     3C 00 90 AD |  if_e	jmp	#LR__0724
082e4     37 00 00 FF 
082e8     74 E4 05 F1 | 	add	objptr, ##28276
082ec     F2 28 02 FB | 	rdlong	local06, objptr
082f0     03 28 66 F0 | 	shl	local06, #3
082f4     02 00 00 FF 
082f8     38 E4 85 F1 | 	sub	objptr, ##1080
082fc     F2 28 02 F1 | 	add	local06, objptr
08300     14 13 02 FB | 	rdlong	arg01, local06
08304     73 01 00 FF 
08308     82 14 06 F6 | 	mov	arg02, ##@LR__5112
0830c     35 00 00 FF 
08310     3C E4 85 F1 | 	sub	objptr, ##27196
08314     24 68 B1 FD | 	call	#__system___string_cmp
08318     00 FA 0D F2 | 	cmp	result1, #0 wz
0831c     24 00 90 5D |  if_ne	jmp	#LR__0725
08320                 | LR__0724
08320     37 00 00 FF 
08324     74 E4 05 F1 | 	add	objptr, ##28276
08328     F2 28 02 FB | 	rdlong	local06, objptr
0832c     01 28 06 F1 | 	add	local06, #1
08330     F2 28 62 FC | 	wrlong	local06, objptr
08334     37 00 00 FF 
08338     74 E4 85 F1 | 	sub	objptr, ##28276
0833c     F8 0E B0 FD | 	call	#_expr
08340     78 00 90 FD | 	jmp	#LR__0726
08344                 | LR__0725
08344     4A 00 00 FF 
08348     AC E4 05 F1 | 	add	objptr, ##38060
0834c     F2 28 02 FB | 	rdlong	local06, objptr
08350     14 27 02 F6 | 	mov	local05, local06
08354     01 26 66 F0 | 	shl	local05, #1
08358     14 27 02 F1 | 	add	local05, local06
0835c     02 26 66 F0 | 	shl	local05, #2
08360     03 00 00 FF 
08364     00 E4 85 F1 | 	sub	objptr, ##1536
08368     F2 26 02 F1 | 	add	local05, objptr
0836c     08 26 06 F1 | 	add	local05, #8
08370     13 39 68 FC | 	wrlong	#28, local05
08374     03 00 00 FF 
08378     00 E4 05 F1 | 	add	objptr, ##1536
0837c     F2 28 02 FB | 	rdlong	local06, objptr
08380     14 27 02 F6 | 	mov	local05, local06
08384     01 26 66 F0 | 	shl	local05, #1
08388     14 27 02 F1 | 	add	local05, local06
0838c     02 26 66 F0 | 	shl	local05, #2
08390     03 00 00 FF 
08394     00 E4 85 F1 | 	sub	objptr, ##1536
08398     F2 26 02 F1 | 	add	local05, objptr
0839c     13 03 68 FC | 	wrlong	#1, local05
083a0     03 00 00 FF 
083a4     00 E4 05 F1 | 	add	objptr, ##1536
083a8     F2 28 02 FB | 	rdlong	local06, objptr
083ac     01 28 06 F1 | 	add	local06, #1
083b0     F2 28 62 FC | 	wrlong	local06, objptr
083b4     4A 00 00 FF 
083b8     AC E4 85 F1 | 	sub	objptr, ##38060
083bc                 | LR__0726
083bc     4A 00 00 FF 
083c0     AC E4 05 F1 | 	add	objptr, ##38060
083c4     F2 28 02 FB | 	rdlong	local06, objptr
083c8     14 27 02 F6 | 	mov	local05, local06
083cc     01 26 66 F0 | 	shl	local05, #1
083d0     14 27 02 F1 | 	add	local05, local06
083d4     02 26 66 F0 | 	shl	local05, #2
083d8     03 00 00 FF 
083dc     00 E4 85 F1 | 	sub	objptr, ##1536
083e0     F2 26 02 F1 | 	add	local05, objptr
083e4     08 26 06 F1 | 	add	local05, #8
083e8     13 39 68 FC | 	wrlong	#28, local05
083ec     03 00 00 FF 
083f0     00 E4 05 F1 | 	add	objptr, ##1536
083f4     F2 28 02 FB | 	rdlong	local06, objptr
083f8     14 27 02 F6 | 	mov	local05, local06
083fc     01 26 66 F0 | 	shl	local05, #1
08400     14 27 02 F1 | 	add	local05, local06
08404     02 26 66 F0 | 	shl	local05, #2
08408     03 00 00 FF 
0840c     00 E4 85 F1 | 	sub	objptr, ##1536
08410     F2 26 02 F1 | 	add	local05, objptr
08414     13 2B 62 FC | 	wrlong	local07, local05
08418     03 00 00 FF 
0841c     00 E4 05 F1 | 	add	objptr, ##1536
08420     F2 2A 02 FB | 	rdlong	local07, objptr
08424     01 2A 06 F1 | 	add	local07, #1
08428     F2 2A 62 FC | 	wrlong	local07, objptr
0842c     15 29 02 F6 | 	mov	local06, local07
08430     01 28 66 F0 | 	shl	local06, #1
08434     15 29 02 F1 | 	add	local06, local07
08438     02 28 66 F0 | 	shl	local06, #2
0843c     03 00 00 FF 
08440     00 E4 85 F1 | 	sub	objptr, ##1536
08444     F2 28 02 F1 | 	add	local06, objptr
08448     08 28 06 F1 | 	add	local06, #8
0844c     14 95 68 FC | 	wrlong	#74, local06
08450     03 00 00 FF 
08454     00 E4 05 F1 | 	add	objptr, ##1536
08458     F2 2A 02 FB | 	rdlong	local07, objptr
0845c     15 29 02 F6 | 	mov	local06, local07
08460     01 28 66 F0 | 	shl	local06, #1
08464     15 29 02 F1 | 	add	local06, local07
08468     02 28 66 F0 | 	shl	local06, #2
0846c     03 00 00 FF 
08470     00 E4 85 F1 | 	sub	objptr, ##1536
08474     F2 28 02 F1 | 	add	local06, objptr
08478     14 01 68 FC | 	wrlong	#0, local06
0847c     03 00 00 FF 
08480     00 E4 05 F1 | 	add	objptr, ##1536
08484     F2 2A 02 FB | 	rdlong	local07, objptr
08488     01 2A 06 F1 | 	add	local07, #1
0848c     F2 2A 62 FC | 	wrlong	local07, objptr
08490     4A 00 00 FF 
08494     AC E4 85 F1 | 	sub	objptr, ##38060
08498                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
08498                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
08498                 | ' 
08498                 | ' 
08498                 | ' return 0
08498     00 FA 05 F6 | 	mov	result1, #0
0849c                 | LR__0727
0849c     A7 F0 03 F6 | 	mov	ptra, fp
084a0     B2 00 A0 FD | 	call	#popregs_
084a4                 | _compile_for_ret
084a4     2D 00 64 FD | 	ret
084a8                 | 
084a8                 | ' 
084a8                 | ' 
084a8                 | ' sub do_gosub()
084a8                 | _do_gosub
084a8     58 00 00 FF 
084ac     18 E5 05 F1 | 	add	objptr, ##45336
084b0     F2 00 02 FB | 	rdlong	_var01, objptr
084b4     01 00 06 F1 | 	add	_var01, #1
084b8     F2 00 62 FC | 	wrlong	_var01, objptr
084bc                 | ' gosubtop+=1
084bc                 | ' if compiledline(lineptr_e+1).result_type=token_end then
084bc     0E 00 00 FF 
084c0     68 E4 85 F1 | 	sub	objptr, ##7272
084c4     F2 00 02 FB | 	rdlong	_var01, objptr
084c8     01 00 06 F1 | 	add	_var01, #1
084cc     00 03 02 F6 | 	mov	_var02, _var01
084d0     01 02 66 F0 | 	shl	_var02, #1
084d4     00 03 02 F1 | 	add	_var02, _var01
084d8     02 02 66 F0 | 	shl	_var02, #2
084dc     03 00 00 FF 
084e0     04 E4 85 F1 | 	sub	objptr, ##1540
084e4     F2 02 02 F1 | 	add	_var02, objptr
084e8     08 02 06 F1 | 	add	_var02, #8
084ec     01 03 02 FB | 	rdlong	_var02, _var02
084f0     FE 03 0E F2 | 	cmp	_var02, #510 wz
084f4     47 00 00 FF 
084f8     AC E4 85 F1 | 	sub	objptr, ##36524
084fc     58 00 90 5D |  if_ne	jmp	#LR__0730
08500     58 00 00 FF 
08504     18 E5 05 F1 | 	add	objptr, ##45336
08508     F2 02 02 FB | 	rdlong	_var02, objptr
0850c     03 02 66 F0 | 	shl	_var02, #3
08510     03 00 00 FF 
08514     38 E5 85 F1 | 	sub	objptr, ##1848
08518     F2 02 02 F1 | 	add	_var02, objptr
0851c     03 00 00 FF 
08520     0C E5 05 F1 | 	add	objptr, ##1804
08524     F2 00 02 FB | 	rdlong	_var01, objptr
08528     01 01 62 FC | 	wrlong	_var01, _var02
0852c     2C E4 05 F1 | 	add	objptr, #44
08530     F2 02 02 FB | 	rdlong	_var02, objptr
08534     03 02 66 F0 | 	shl	_var02, #3
08538     03 00 00 FF 
0853c     38 E5 85 F1 | 	sub	objptr, ##1848
08540     F2 02 02 F1 | 	add	_var02, objptr
08544     04 02 06 F1 | 	add	_var02, #4
08548     01 01 68 FC | 	wrlong	#0, _var02
0854c     54 00 00 FF 
08550     E0 E5 85 F1 | 	sub	objptr, ##43488
08554     64 00 90 FD | 	jmp	#LR__0731
08558                 | LR__0730
08558     58 00 00 FF 
0855c     18 E5 05 F1 | 	add	objptr, ##45336
08560     F2 02 02 FB | 	rdlong	_var02, objptr
08564     03 02 66 F0 | 	shl	_var02, #3
08568     03 00 00 FF 
0856c     38 E5 85 F1 | 	sub	objptr, ##1848
08570     F2 02 02 F1 | 	add	_var02, objptr
08574     03 00 00 FF 
08578     14 E5 05 F1 | 	add	objptr, ##1812
0857c     F2 00 02 FB | 	rdlong	_var01, objptr
08580     01 01 62 FC | 	wrlong	_var01, _var02
08584     24 E4 05 F1 | 	add	objptr, #36
08588     F2 02 02 FB | 	rdlong	_var02, objptr
0858c     03 02 66 F0 | 	shl	_var02, #3
08590     03 00 00 FF 
08594     38 E5 85 F1 | 	sub	objptr, ##1848
08598     F2 02 02 F1 | 	add	_var02, objptr
0859c     0A 00 00 FF 
085a0     30 E5 85 F1 | 	sub	objptr, ##5424
085a4     F2 00 02 FB | 	rdlong	_var01, objptr
085a8     4A 00 00 FF 
085ac     B0 E4 85 F1 | 	sub	objptr, ##38064
085b0     02 00 06 F1 | 	add	_var01, #2
085b4     04 02 06 F1 | 	add	_var02, #4
085b8     01 01 62 FC | 	wrlong	_var01, _var02
085bc                 | LR__0731
085bc                 | _do_gosub_ret
085bc     2D 00 64 FD | 	ret
085c0                 | 
085c0                 | ' 
085c0                 | ' 
085c0                 | ' sub do_for()
085c0                 | _do_for
085c0     01 4A 05 F6 | 	mov	COUNT_, #1
085c4     A8 00 A0 FD | 	call	#pushregs_
085c8     10 F0 07 F1 | 	add	ptra, #16
085cc     58 00 00 FF 
085d0     14 E5 05 F1 | 	add	objptr, ##45332
085d4     F2 12 02 FB | 	rdlong	arg01, objptr
085d8     01 12 06 F1 | 	add	arg01, #1
085dc     F2 12 62 FC | 	wrlong	arg01, objptr
085e0     58 00 00 FF 
085e4     14 E5 85 F1 | 	sub	objptr, ##45332
085e8     8C 22 B0 FD | 	call	#_pop
085ec     A7 FA 61 FC | 	wrlong	result1, fp
085f0     04 4E 05 F1 | 	add	fp, #4
085f4     A7 FC 61 FC | 	wrlong	result2, fp
085f8     04 4E 05 F1 | 	add	fp, #4
085fc     A7 FE 61 FC | 	wrlong	result3, fp
08600     08 4E 85 F1 | 	sub	fp, #8
08604     58 00 00 FF 
08608     14 E5 05 F1 | 	add	objptr, ##45332
0860c     F2 12 02 FB | 	rdlong	arg01, objptr
08610     09 1F 02 F6 | 	mov	local01, arg01
08614     02 1E 66 F0 | 	shl	local01, #2
08618     09 1F 02 F1 | 	add	local01, arg01
0861c     02 1E 66 F0 | 	shl	local01, #2
08620     06 00 00 FF 
08624     48 E4 85 F1 | 	sub	objptr, ##3144
08628     F2 1E 02 F1 | 	add	local01, objptr
0862c     A7 12 02 FB | 	rdlong	arg01, fp
08630     08 1E 06 F1 | 	add	local01, #8
08634     0F 13 62 FC | 	wrlong	arg01, local01
08638     52 00 00 FF 
0863c     CC E4 85 F1 | 	sub	objptr, ##42188
08640     34 22 B0 FD | 	call	#_pop
08644     A7 FA 61 FC | 	wrlong	result1, fp
08648     04 4E 05 F1 | 	add	fp, #4
0864c     A7 FC 61 FC | 	wrlong	result2, fp
08650     04 4E 05 F1 | 	add	fp, #4
08654     A7 FE 61 FC | 	wrlong	result3, fp
08658     08 4E 85 F1 | 	sub	fp, #8
0865c     58 00 00 FF 
08660     14 E5 05 F1 | 	add	objptr, ##45332
08664     F2 12 02 FB | 	rdlong	arg01, objptr
08668     09 1F 02 F6 | 	mov	local01, arg01
0866c     02 1E 66 F0 | 	shl	local01, #2
08670     09 1F 02 F1 | 	add	local01, arg01
08674     02 1E 66 F0 | 	shl	local01, #2
08678     06 00 00 FF 
0867c     48 E4 85 F1 | 	sub	objptr, ##3144
08680     F2 1E 02 F1 | 	add	local01, objptr
08684     A7 12 02 F6 | 	mov	arg01, fp
08688     52 00 00 FF 
0868c     CC E4 85 F1 | 	sub	objptr, ##42188
08690     24 AD B0 FD | 	call	#_converttoint
08694     FD 12 02 F6 | 	mov	arg01, result1
08698     0C 1E 06 F1 | 	add	local01, #12
0869c     0F 13 62 FC | 	wrlong	arg01, local01
086a0     D4 21 B0 FD | 	call	#_pop
086a4     A7 FA 61 FC | 	wrlong	result1, fp
086a8     04 4E 05 F1 | 	add	fp, #4
086ac     A7 FC 61 FC | 	wrlong	result2, fp
086b0     04 4E 05 F1 | 	add	fp, #4
086b4     A7 FE 61 FC | 	wrlong	result3, fp
086b8     08 4E 85 F1 | 	sub	fp, #8
086bc     58 00 00 FF 
086c0     14 E5 05 F1 | 	add	objptr, ##45332
086c4     F2 12 02 FB | 	rdlong	arg01, objptr
086c8     09 1F 02 F6 | 	mov	local01, arg01
086cc     02 1E 66 F0 | 	shl	local01, #2
086d0     09 1F 02 F1 | 	add	local01, arg01
086d4     02 1E 66 F0 | 	shl	local01, #2
086d8     06 00 00 FF 
086dc     48 E4 85 F1 | 	sub	objptr, ##3144
086e0     F2 1E 02 F1 | 	add	local01, objptr
086e4     A7 12 02 F6 | 	mov	arg01, fp
086e8     52 00 00 FF 
086ec     CC E4 85 F1 | 	sub	objptr, ##42188
086f0     C4 AC B0 FD | 	call	#_converttoint
086f4     10 1E 06 F1 | 	add	local01, #16
086f8     0F FB 61 FC | 	wrlong	result1, local01
086fc                 | ' fortop+=1
086fc                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
086fc                 | ' 'if i> maxfor then printerror(36) : return
086fc                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
086fc                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
086fc                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
086fc                 | ' if compiledline(lineptr_e).result_type=token_end then
086fc     4A 00 00 FF 
08700     B0 E4 05 F1 | 	add	objptr, ##38064
08704     F2 12 02 FB | 	rdlong	arg01, objptr
08708     09 1F 02 F6 | 	mov	local01, arg01
0870c     01 1E 66 F0 | 	shl	local01, #1
08710     09 1F 02 F1 | 	add	local01, arg01
08714     02 1E 66 F0 | 	shl	local01, #2
08718     03 00 00 FF 
0871c     04 E4 85 F1 | 	sub	objptr, ##1540
08720     F2 1E 02 F1 | 	add	local01, objptr
08724     08 1E 06 F1 | 	add	local01, #8
08728     0F 1F 02 FB | 	rdlong	local01, local01
0872c     FE 1F 0E F2 | 	cmp	local01, #510 wz
08730     47 00 00 FF 
08734     AC E4 85 F1 | 	sub	objptr, ##36524
08738     70 00 90 5D |  if_ne	jmp	#LR__0740
0873c     58 00 00 FF 
08740     14 E5 05 F1 | 	add	objptr, ##45332
08744     F2 12 02 FB | 	rdlong	arg01, objptr
08748     09 1F 02 F6 | 	mov	local01, arg01
0874c     02 1E 66 F0 | 	shl	local01, #2
08750     09 1F 02 F1 | 	add	local01, arg01
08754     02 1E 66 F0 | 	shl	local01, #2
08758     06 00 00 FF 
0875c     48 E4 85 F1 | 	sub	objptr, ##3144
08760     F2 1E 02 F1 | 	add	local01, objptr
08764     06 00 00 FF 
08768     20 E4 05 F1 | 	add	objptr, ##3104
0876c     F2 12 02 FB | 	rdlong	arg01, objptr
08770     0F 13 62 FC | 	wrlong	arg01, local01
08774     28 E4 05 F1 | 	add	objptr, #40
08778     F2 12 02 FB | 	rdlong	arg01, objptr
0877c     09 1F 02 F6 | 	mov	local01, arg01
08780     02 1E 66 F0 | 	shl	local01, #2
08784     09 1F 02 F1 | 	add	local01, arg01
08788     02 1E 66 F0 | 	shl	local01, #2
0878c     06 00 00 FF 
08790     48 E4 85 F1 | 	sub	objptr, ##3144
08794     F2 1E 02 F1 | 	add	local01, objptr
08798     04 1E 06 F1 | 	add	local01, #4
0879c     0F 01 68 FC | 	wrlong	#0, local01
087a0     52 00 00 FF 
087a4     CC E4 85 F1 | 	sub	objptr, ##42188
087a8     7C 00 90 FD | 	jmp	#LR__0741
087ac                 | LR__0740
087ac     58 00 00 FF 
087b0     14 E5 05 F1 | 	add	objptr, ##45332
087b4     F2 12 02 FB | 	rdlong	arg01, objptr
087b8     09 1F 02 F6 | 	mov	local01, arg01
087bc     02 1E 66 F0 | 	shl	local01, #2
087c0     09 1F 02 F1 | 	add	local01, arg01
087c4     02 1E 66 F0 | 	shl	local01, #2
087c8     06 00 00 FF 
087cc     48 E4 85 F1 | 	sub	objptr, ##3144
087d0     F2 1E 02 F1 | 	add	local01, objptr
087d4     06 00 00 FF 
087d8     28 E4 05 F1 | 	add	objptr, ##3112
087dc     F2 12 02 FB | 	rdlong	arg01, objptr
087e0     0F 13 62 FC | 	wrlong	arg01, local01
087e4     20 E4 05 F1 | 	add	objptr, #32
087e8     F2 12 02 FB | 	rdlong	arg01, objptr
087ec     09 1F 02 F6 | 	mov	local01, arg01
087f0     02 1E 66 F0 | 	shl	local01, #2
087f4     09 1F 02 F1 | 	add	local01, arg01
087f8     02 1E 66 F0 | 	shl	local01, #2
087fc     06 00 00 FF 
08800     48 E4 85 F1 | 	sub	objptr, ##3144
08804     F2 1E 02 F1 | 	add	local01, objptr
08808     08 00 00 FF 
0880c     1C E4 85 F1 | 	sub	objptr, ##4124
08810     F2 12 02 FB | 	rdlong	arg01, objptr
08814     4A 00 00 FF 
08818     B0 E4 85 F1 | 	sub	objptr, ##38064
0881c     01 12 06 F1 | 	add	arg01, #1
08820     04 1E 06 F1 | 	add	local01, #4
08824     0F 13 62 FC | 	wrlong	arg01, local01
08828                 | LR__0741
08828     A7 F0 03 F6 | 	mov	ptra, fp
0882c     B2 00 A0 FD | 	call	#popregs_
08830                 | _do_for_ret
08830     2D 00 64 FD | 	ret
08834                 | 
08834                 | ' 
08834                 | ' ' now do_next todo
08834                 | ' 
08834                 | ' sub do_return()
08834                 | _do_return
08834                 | ' if gosubtop>0 then
08834     58 00 00 FF 
08838     18 E5 05 F1 | 	add	objptr, ##45336
0883c     F2 00 02 FB | 	rdlong	_var01, objptr
08840     58 00 00 FF 
08844     18 E5 85 F1 | 	sub	objptr, ##45336
08848     01 00 56 F2 | 	cmps	_var01, #1 wc
0884c     8C 00 90 CD |  if_b	jmp	#LR__0750
08850     58 00 00 FF 
08854     18 E5 05 F1 | 	add	objptr, ##45336
08858     F2 00 02 FB | 	rdlong	_var01, objptr
0885c     03 00 66 F0 | 	shl	_var01, #3
08860     03 00 00 FF 
08864     38 E5 85 F1 | 	sub	objptr, ##1848
08868     F2 00 02 F1 | 	add	_var01, objptr
0886c     00 01 02 FB | 	rdlong	_var01, _var01
08870     03 00 00 FF 
08874     0C E5 05 F1 | 	add	objptr, ##1804
08878     F2 00 62 FC | 	wrlong	_var01, objptr
0887c     2C E4 05 F1 | 	add	objptr, #44
08880     F2 00 02 FB | 	rdlong	_var01, objptr
08884     03 00 66 F0 | 	shl	_var01, #3
08888     03 00 00 FF 
0888c     38 E5 85 F1 | 	sub	objptr, ##1848
08890     F2 00 02 F1 | 	add	_var01, objptr
08894     04 00 06 F1 | 	add	_var01, #4
08898     00 01 02 FB | 	rdlong	_var01, _var01
0889c     03 00 00 FF 
088a0     10 E5 05 F1 | 	add	objptr, ##1808
088a4     F2 00 62 FC | 	wrlong	_var01, objptr
088a8     0E 00 00 FF 
088ac     44 E4 85 F1 | 	sub	objptr, ##7236
088b0     F2 00 02 FB | 	rdlong	_var01, objptr
088b4     01 00 86 F1 | 	sub	_var01, #1
088b8     04 E4 05 F1 | 	add	objptr, #4
088bc     F2 00 62 FC | 	wrlong	_var01, objptr
088c0     0E 00 00 FF 
088c4     68 E4 05 F1 | 	add	objptr, ##7272
088c8     F2 00 02 FB | 	rdlong	_var01, objptr
088cc     01 00 86 F1 | 	sub	_var01, #1
088d0     F2 00 62 FC | 	wrlong	_var01, objptr
088d4     58 00 00 FF 
088d8     18 E5 85 F1 | 	sub	objptr, ##45336
088dc                 | LR__0750
088dc                 | _do_return_ret
088dc     2D 00 64 FD | 	ret
088e0                 | 
088e0                 | ' 
088e0                 | ' sub do_pop()
088e0                 | _do_pop
088e0                 | ' if gosubtop>0 then  gosubtop -=1 
088e0     58 00 00 FF 
088e4     18 E5 05 F1 | 	add	objptr, ##45336
088e8     F2 00 02 FB | 	rdlong	_var01, objptr
088ec     58 00 00 FF 
088f0     18 E5 85 F1 | 	sub	objptr, ##45336
088f4     01 00 56 F2 | 	cmps	_var01, #1 wc
088f8     58 00 00 3F 
088fc     18 E5 05 31 |  if_ae	add	objptr, ##45336
08900     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
08904     01 00 86 31 |  if_ae	sub	_var01, #1
08908     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
0890c     58 00 00 3F 
08910     18 E5 85 31 |  if_ae	sub	objptr, ##45336
08914                 | _do_pop_ret
08914     2D 00 64 FD | 	ret
08918                 | 
08918                 | ' 
08918                 | ' sub do_next()
08918                 | _do_next
08918     04 4A 05 F6 | 	mov	COUNT_, #4
0891c     A8 00 A0 FD | 	call	#pushregs_
08920     54 1F B0 FD | 	call	#_pop
08924     FD 1E 02 F6 | 	mov	local01, result1
08928     FE 20 02 F6 | 	mov	local02, result2
0892c     FF 22 02 F6 | 	mov	local03, result3
08930                 | ' 
08930                 | ' t1=pop() :varnum=t1.result.uresult
08930                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
08930     58 00 00 FF 
08934     14 E5 05 F1 | 	add	objptr, ##45332
08938     F2 12 02 FB | 	rdlong	arg01, objptr
0893c     09 15 02 F6 | 	mov	arg02, arg01
08940     02 14 66 F0 | 	shl	arg02, #2
08944     09 15 02 F1 | 	add	arg02, arg01
08948     02 14 66 F0 | 	shl	arg02, #2
0894c     06 00 00 FF 
08950     48 E4 85 F1 | 	sub	objptr, ##3144
08954     F2 14 02 F1 | 	add	arg02, objptr
08958     08 14 06 F1 | 	add	arg02, #8
0895c     0A 15 02 FB | 	rdlong	arg02, arg02
08960     0F 15 0A F2 | 	cmp	arg02, local01 wz
08964     52 00 00 FF 
08968     CC E4 85 F1 | 	sub	objptr, ##42188
0896c     0C 00 90 AD |  if_e	jmp	#LR__0760
08970     25 12 06 F6 | 	mov	arg01, #37
08974     F4 1C B1 FD | 	call	#_printerror
08978     A8 02 90 FD | 	jmp	#LR__0765
0897c                 | LR__0760
0897c                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
0897c     0F 15 02 F6 | 	mov	arg02, local01
08980     04 14 66 F0 | 	shl	arg02, #4
08984     15 00 00 FF 
08988     28 E4 05 F1 | 	add	objptr, ##10792
0898c     F2 14 02 F1 | 	add	arg02, objptr
08990     0C 14 06 F1 | 	add	arg02, #12
08994     0A 15 02 FB | 	rdlong	arg02, arg02
08998     1E 14 0E F2 | 	cmp	arg02, #30 wz
0899c     15 00 00 FF 
089a0     28 E4 85 F1 | 	sub	objptr, ##10792
089a4     54 00 90 5D |  if_ne	jmp	#LR__0761
089a8     0F 15 02 F6 | 	mov	arg02, local01
089ac     04 14 66 F0 | 	shl	arg02, #4
089b0     15 00 00 FF 
089b4     28 E4 05 F1 | 	add	objptr, ##10792
089b8     F2 14 02 F1 | 	add	arg02, objptr
089bc     0C 14 06 F1 | 	add	arg02, #12
089c0     0A 39 68 FC | 	wrlong	#28, arg02
089c4     0F 25 02 F6 | 	mov	local04, local01
089c8     04 24 66 F0 | 	shl	local04, #4
089cc     F2 24 02 F1 | 	add	local04, objptr
089d0     0F 13 02 F6 | 	mov	arg01, local01
089d4     04 12 66 F0 | 	shl	arg01, #4
089d8     F2 12 02 F1 | 	add	arg01, objptr
089dc     04 12 06 F1 | 	add	arg01, #4
089e0     09 13 02 FB | 	rdlong	arg01, arg01
089e4     15 00 00 FF 
089e8     28 E4 85 F1 | 	sub	objptr, ##10792
089ec     01 14 06 F6 | 	mov	arg02, #1
089f0     30 91 B1 FD | 	call	#__system___float_tointeger
089f4     04 24 06 F1 | 	add	local04, #4
089f8     12 FB 61 FC | 	wrlong	result1, local04
089fc                 | LR__0761
089fc     58 00 00 FF 
08a00     14 E5 05 F1 | 	add	objptr, ##45332
08a04     F2 12 02 FB | 	rdlong	arg01, objptr
08a08     09 25 02 F6 | 	mov	local04, arg01
08a0c     02 24 66 F0 | 	shl	local04, #2
08a10     09 25 02 F1 | 	add	local04, arg01
08a14     02 24 66 F0 | 	shl	local04, #2
08a18     06 00 00 FF 
08a1c     48 E4 85 F1 | 	sub	objptr, ##3144
08a20     F2 24 02 F1 | 	add	local04, objptr
08a24     0C 24 06 F1 | 	add	local04, #12
08a28     12 25 02 FB | 	rdlong	local04, local04
08a2c     0F 13 02 F6 | 	mov	arg01, local01
08a30     04 12 66 F0 | 	shl	arg01, #4
08a34     3D 00 00 FF 
08a38     A4 E4 85 F1 | 	sub	objptr, ##31396
08a3c     F2 12 02 F1 | 	add	arg01, objptr
08a40     0F FF 01 F6 | 	mov	result3, local01
08a44     04 FE 65 F0 | 	shl	result3, #4
08a48     F2 FE 01 F1 | 	add	result3, objptr
08a4c     04 FE 05 F1 | 	add	result3, #4
08a50     FF FE 01 FB | 	rdlong	result3, result3
08a54     12 FF 01 F1 | 	add	result3, local04
08a58     04 12 06 F1 | 	add	arg01, #4
08a5c     09 FF 61 FC | 	wrlong	result3, arg01
08a60                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
08a60                 | ' if fortable(fortop).stepval>=0 then
08a60     43 00 00 FF 
08a64     EC E4 05 F1 | 	add	objptr, ##34540
08a68     F2 12 02 FB | 	rdlong	arg01, objptr
08a6c     09 25 02 F6 | 	mov	local04, arg01
08a70     02 24 66 F0 | 	shl	local04, #2
08a74     09 25 02 F1 | 	add	local04, arg01
08a78     02 24 66 F0 | 	shl	local04, #2
08a7c     06 00 00 FF 
08a80     48 E4 85 F1 | 	sub	objptr, ##3144
08a84     F2 24 02 F1 | 	add	local04, objptr
08a88     0C 24 06 F1 | 	add	local04, #12
08a8c     12 25 02 FB | 	rdlong	local04, local04
08a90     00 24 56 F2 | 	cmps	local04, #0 wc
08a94     52 00 00 FF 
08a98     CC E4 85 F1 | 	sub	objptr, ##42188
08a9c     78 00 90 CD |  if_b	jmp	#LR__0762
08aa0                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
08aa0     04 1E 66 F0 | 	shl	local01, #4
08aa4     15 00 00 FF 
08aa8     28 E4 05 F1 | 	add	objptr, ##10792
08aac     F2 1E 02 F1 | 	add	local01, objptr
08ab0     43 00 00 FF 
08ab4     EC E4 05 F1 | 	add	objptr, ##34540
08ab8     F2 24 02 FB | 	rdlong	local04, objptr
08abc     12 13 02 F6 | 	mov	arg01, local04
08ac0     02 12 66 F0 | 	shl	arg01, #2
08ac4     12 13 02 F1 | 	add	arg01, local04
08ac8     02 12 66 F0 | 	shl	arg01, #2
08acc     06 00 00 FF 
08ad0     48 E4 85 F1 | 	sub	objptr, ##3144
08ad4     F2 12 02 F1 | 	add	arg01, objptr
08ad8     04 1E 06 F1 | 	add	local01, #4
08adc     0F 25 02 FB | 	rdlong	local04, local01
08ae0     10 12 06 F1 | 	add	arg01, #16
08ae4     09 13 02 FB | 	rdlong	arg01, arg01
08ae8     09 25 5A F2 | 	cmps	local04, arg01 wcz
08aec     52 00 00 FF 
08af0     CC E4 85 F1 | 	sub	objptr, ##42188
08af4     9C 00 90 ED |  if_be	jmp	#LR__0764
08af8     58 00 00 FF 
08afc     14 E5 05 F1 | 	add	objptr, ##45332
08b00     F2 24 02 FB | 	rdlong	local04, objptr
08b04     01 24 86 F1 | 	sub	local04, #1
08b08     F2 24 62 FC | 	wrlong	local04, objptr
08b0c     58 00 00 FF 
08b10     14 E5 85 F1 | 	sub	objptr, ##45332
08b14     0C 01 90 FD | 	jmp	#LR__0765
08b18                 | LR__0762
08b18                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
08b18     0F 13 02 F6 | 	mov	arg01, local01
08b1c     04 12 66 F0 | 	shl	arg01, #4
08b20     15 00 00 FF 
08b24     28 E4 05 F1 | 	add	objptr, ##10792
08b28     F2 12 02 F1 | 	add	arg01, objptr
08b2c     43 00 00 FF 
08b30     EC E4 05 F1 | 	add	objptr, ##34540
08b34     F2 24 02 FB | 	rdlong	local04, objptr
08b38     12 1F 02 F6 | 	mov	local01, local04
08b3c     02 1E 66 F0 | 	shl	local01, #2
08b40     12 1F 02 F1 | 	add	local01, local04
08b44     02 1E 66 F0 | 	shl	local01, #2
08b48     06 00 00 FF 
08b4c     48 E4 85 F1 | 	sub	objptr, ##3144
08b50     F2 1E 02 F1 | 	add	local01, objptr
08b54     04 12 06 F1 | 	add	arg01, #4
08b58     09 13 02 FB | 	rdlong	arg01, arg01
08b5c     10 1E 06 F1 | 	add	local01, #16
08b60     0F 1F 02 FB | 	rdlong	local01, local01
08b64     0F 13 52 F2 | 	cmps	arg01, local01 wc
08b68     52 00 00 FF 
08b6c     CC E4 85 F1 | 	sub	objptr, ##42188
08b70     20 00 90 3D |  if_ae	jmp	#LR__0763
08b74     58 00 00 FF 
08b78     14 E5 05 F1 | 	add	objptr, ##45332
08b7c     F2 24 02 FB | 	rdlong	local04, objptr
08b80     01 24 86 F1 | 	sub	local04, #1
08b84     F2 24 62 FC | 	wrlong	local04, objptr
08b88     58 00 00 FF 
08b8c     14 E5 85 F1 | 	sub	objptr, ##45332
08b90     90 00 90 FD | 	jmp	#LR__0765
08b94                 | LR__0763
08b94                 | LR__0764
08b94     58 00 00 FF 
08b98     14 E5 05 F1 | 	add	objptr, ##45332
08b9c     F2 1E 02 FB | 	rdlong	local01, objptr
08ba0     0F 25 02 F6 | 	mov	local04, local01
08ba4     02 24 66 F0 | 	shl	local04, #2
08ba8     0F 25 02 F1 | 	add	local04, local01
08bac     02 24 66 F0 | 	shl	local04, #2
08bb0     06 00 00 FF 
08bb4     48 E4 85 F1 | 	sub	objptr, ##3144
08bb8     F2 24 02 F1 | 	add	local04, objptr
08bbc     12 25 02 FB | 	rdlong	local04, local04
08bc0     06 00 00 FF 
08bc4     20 E4 05 F1 | 	add	objptr, ##3104
08bc8     F2 24 62 FC | 	wrlong	local04, objptr
08bcc     28 E4 05 F1 | 	add	objptr, #40
08bd0     F2 1E 02 FB | 	rdlong	local01, objptr
08bd4     0F 25 02 F6 | 	mov	local04, local01
08bd8     02 24 66 F0 | 	shl	local04, #2
08bdc     0F 25 02 F1 | 	add	local04, local01
08be0     02 24 66 F0 | 	shl	local04, #2
08be4     06 00 00 FF 
08be8     48 E4 85 F1 | 	sub	objptr, ##3144
08bec     F2 24 02 F1 | 	add	local04, objptr
08bf0     04 24 06 F1 | 	add	local04, #4
08bf4     12 25 02 FB | 	rdlong	local04, local04
08bf8     06 00 00 FF 
08bfc     24 E4 05 F1 | 	add	objptr, ##3108
08c00     F2 24 62 FC | 	wrlong	local04, objptr
08c04     0E 00 00 FF 
08c08     44 E4 85 F1 | 	sub	objptr, ##7236
08c0c     F2 24 02 FB | 	rdlong	local04, objptr
08c10     01 24 86 F1 | 	sub	local04, #1
08c14     04 E4 05 F1 | 	add	objptr, #4
08c18     F2 24 62 FC | 	wrlong	local04, objptr
08c1c     4A 00 00 FF 
08c20     B0 E4 85 F1 | 	sub	objptr, ##38064
08c24                 | LR__0765
08c24     A7 F0 03 F6 | 	mov	ptra, fp
08c28     B2 00 A0 FD | 	call	#popregs_
08c2c                 | _do_next_ret
08c2c     2D 00 64 FD | 	ret
08c30                 | 
08c30                 | ' 
08c30                 | ' 
08c30                 | ' function compile_next() as ulong
08c30                 | _compile_next
08c30     04 4A 05 F6 | 	mov	COUNT_, #4
08c34     A8 00 A0 FD | 	call	#pushregs_
08c38     37 00 00 FF 
08c3c     74 E4 05 F1 | 	add	objptr, ##28276
08c40     F2 12 02 FB | 	rdlong	arg01, objptr
08c44     03 12 66 F0 | 	shl	arg01, #3
08c48     02 00 00 FF 
08c4c     38 E4 85 F1 | 	sub	objptr, ##1080
08c50     F2 12 02 F1 | 	add	arg01, objptr
08c54     09 1F 02 FB | 	rdlong	local01, arg01
08c58                 | ' 
08c58                 | ' varname$=lparts(ct).part$ 
08c58                 | ' 'suffix$=right$(varname$,1)
08c58                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
08c58                 | ' if varnum=0 then compile_error(35)  : return 35
08c58     04 E4 85 F1 | 	sub	objptr, #4
08c5c     F2 14 0A FB | 	rdlong	arg02, objptr wz
08c60     35 00 00 FF 
08c64     38 E4 85 F1 | 	sub	objptr, ##27192
08c68     10 00 90 5D |  if_ne	jmp	#LR__0770
08c6c     23 12 06 F6 | 	mov	arg01, #35
08c70     80 DE BF FD | 	call	#_compile_error
08c74     23 FA 05 F6 | 	mov	result1, #35
08c78     58 01 90 FD | 	jmp	#LR__0774
08c7c                 | LR__0770
08c7c     01 20 66 F6 | 	neg	local02, #1
08c80                 | ' j=-1
08c80                 | ' for i=0 to varnum-1
08c80     00 22 06 F6 | 	mov	local03, #0
08c84     35 00 00 FF 
08c88     38 E4 05 F1 | 	add	objptr, ##27192
08c8c     F2 24 02 FB | 	rdlong	local04, objptr
08c90     35 00 00 FF 
08c94     38 E4 85 F1 | 	sub	objptr, ##27192
08c98                 | LR__0771
08c98     12 23 12 F2 | 	cmp	local03, local04 wc
08c9c     38 00 90 3D |  if_ae	jmp	#LR__0772
08ca0                 | '   if variables(i).name=varname$ then j=i : exit
08ca0     11 15 02 F6 | 	mov	arg02, local03
08ca4     04 14 66 F0 | 	shl	arg02, #4
08ca8     15 00 00 FF 
08cac     28 E4 05 F1 | 	add	objptr, ##10792
08cb0     F2 14 02 F1 | 	add	arg02, objptr
08cb4     0A 13 02 FB | 	rdlong	arg01, arg02
08cb8     0F 15 02 F6 | 	mov	arg02, local01
08cbc     15 00 00 FF 
08cc0     28 E4 85 F1 | 	sub	objptr, ##10792
08cc4     74 5E B1 FD | 	call	#__system___string_cmp
08cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
08ccc     11 21 02 A6 |  if_e	mov	local02, local03
08cd0     01 22 06 51 |  if_ne	add	local03, #1
08cd4     C0 FF 9F 5D |  if_ne	jmp	#LR__0771
08cd8                 | LR__0772
08cd8                 | ' if j=-1 then compile_error(35) : return 35
08cd8     FF FF 7F FF 
08cdc     FF 21 0E F2 | 	cmp	local02, ##-1 wz
08ce0     10 00 90 5D |  if_ne	jmp	#LR__0773
08ce4     23 12 06 F6 | 	mov	arg01, #35
08ce8     08 DE BF FD | 	call	#_compile_error
08cec     23 FA 05 F6 | 	mov	result1, #35
08cf0     E0 00 90 FD | 	jmp	#LR__0774
08cf4                 | LR__0773
08cf4     4A 00 00 FF 
08cf8     AC E4 05 F1 | 	add	objptr, ##38060
08cfc     F2 24 02 FB | 	rdlong	local04, objptr
08d00     12 23 02 F6 | 	mov	local03, local04
08d04     01 22 66 F0 | 	shl	local03, #1
08d08     12 23 02 F1 | 	add	local03, local04
08d0c     02 22 66 F0 | 	shl	local03, #2
08d10     03 00 00 FF 
08d14     00 E4 85 F1 | 	sub	objptr, ##1536
08d18     F2 22 02 F1 | 	add	local03, objptr
08d1c     08 22 06 F1 | 	add	local03, #8
08d20     11 39 68 FC | 	wrlong	#28, local03
08d24     03 00 00 FF 
08d28     00 E4 05 F1 | 	add	objptr, ##1536
08d2c     F2 24 02 FB | 	rdlong	local04, objptr
08d30     12 23 02 F6 | 	mov	local03, local04
08d34     01 22 66 F0 | 	shl	local03, #1
08d38     12 23 02 F1 | 	add	local03, local04
08d3c     02 22 66 F0 | 	shl	local03, #2
08d40     03 00 00 FF 
08d44     00 E4 85 F1 | 	sub	objptr, ##1536
08d48     F2 22 02 F1 | 	add	local03, objptr
08d4c     11 21 62 FC | 	wrlong	local02, local03
08d50     03 00 00 FF 
08d54     00 E4 05 F1 | 	add	objptr, ##1536
08d58     F2 24 02 FB | 	rdlong	local04, objptr
08d5c     01 24 06 F1 | 	add	local04, #1
08d60     F2 24 62 FC | 	wrlong	local04, objptr
08d64     12 23 02 F6 | 	mov	local03, local04
08d68     01 22 66 F0 | 	shl	local03, #1
08d6c     12 23 02 F1 | 	add	local03, local04
08d70     02 22 66 F0 | 	shl	local03, #2
08d74     03 00 00 FF 
08d78     00 E4 85 F1 | 	sub	objptr, ##1536
08d7c     F2 22 02 F1 | 	add	local03, objptr
08d80     08 22 06 F1 | 	add	local03, #8
08d84     11 97 68 FC | 	wrlong	#75, local03
08d88     03 00 00 FF 
08d8c     00 E4 05 F1 | 	add	objptr, ##1536
08d90     F2 24 02 FB | 	rdlong	local04, objptr
08d94     12 23 02 F6 | 	mov	local03, local04
08d98     01 22 66 F0 | 	shl	local03, #1
08d9c     12 23 02 F1 | 	add	local03, local04
08da0     02 22 66 F0 | 	shl	local03, #2
08da4     03 00 00 FF 
08da8     00 E4 85 F1 | 	sub	objptr, ##1536
08dac     F2 22 02 F1 | 	add	local03, objptr
08db0     11 01 68 FC | 	wrlong	#0, local03
08db4     03 00 00 FF 
08db8     00 E4 05 F1 | 	add	objptr, ##1536
08dbc     F2 24 02 FB | 	rdlong	local04, objptr
08dc0     01 24 06 F1 | 	add	local04, #1
08dc4     F2 24 62 FC | 	wrlong	local04, objptr
08dc8     4A 00 00 FF 
08dcc     AC E4 85 F1 | 	sub	objptr, ##38060
08dd0                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
08dd0                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
08dd0                 | ' return 0
08dd0     00 FA 05 F6 | 	mov	result1, #0
08dd4                 | LR__0774
08dd4     A7 F0 03 F6 | 	mov	ptra, fp
08dd8     B2 00 A0 FD | 	call	#popregs_
08ddc                 | _compile_next_ret
08ddc     2D 00 64 FD | 	ret
08de0                 | 
08de0                 | ' 
08de0                 | ' 
08de0                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
08de0                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
08de0                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
08de0                 | ' 
08de0                 | ' function compile_gosub() as ulong
08de0                 | _compile_gosub
08de0     01 4A 05 F6 | 	mov	COUNT_, #1
08de4     A8 00 A0 FD | 	call	#pushregs_
08de8     4A 00 00 FF 
08dec     AC E4 05 F1 | 	add	objptr, ##38060
08df0     F2 1E 02 FB | 	rdlong	local01, objptr
08df4     0F FB 01 F6 | 	mov	result1, local01
08df8     01 FA 65 F0 | 	shl	result1, #1
08dfc     0F FB 01 F1 | 	add	result1, local01
08e00     02 FA 65 F0 | 	shl	result1, #2
08e04     03 00 00 FF 
08e08     00 E4 85 F1 | 	sub	objptr, ##1536
08e0c     F2 FA 01 F1 | 	add	result1, objptr
08e10     08 FA 05 F1 | 	add	result1, #8
08e14     FD 52 69 FC | 	wrlong	#169, result1
08e18     03 00 00 FF 
08e1c     00 E4 05 F1 | 	add	objptr, ##1536
08e20     F2 1E 02 FB | 	rdlong	local01, objptr
08e24     01 1E 06 F1 | 	add	local01, #1
08e28     F2 1E 62 FC | 	wrlong	local01, objptr
08e2c     4A 00 00 FF 
08e30     AC E4 85 F1 | 	sub	objptr, ##38060
08e34     10 00 B0 FD | 	call	#_compile_goto
08e38                 | ' 
08e38                 | ' compiledline(lineptr).result_type=token_gosub
08e38                 | ' lineptr+=1
08e38                 | ' compile_goto()
08e38                 | ' return 0
08e38     00 FA 05 F6 | 	mov	result1, #0
08e3c     A7 F0 03 F6 | 	mov	ptra, fp
08e40     B2 00 A0 FD | 	call	#popregs_
08e44                 | _compile_gosub_ret
08e44     2D 00 64 FD | 	ret
08e48                 | 
08e48                 | ' 
08e48                 | ' function compile_goto( ) as ulong
08e48                 | _compile_goto
08e48     03 4A 05 F6 | 	mov	COUNT_, #3
08e4c     A8 00 A0 FD | 	call	#pushregs_
08e50     34 F0 07 F1 | 	add	ptra, #52
08e54                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
08e54     37 00 00 FF 
08e58     74 E4 05 F1 | 	add	objptr, ##28276
08e5c     F2 16 02 FB | 	rdlong	arg03, objptr
08e60     03 16 66 F0 | 	shl	arg03, #3
08e64     02 00 00 FF 
08e68     38 E4 85 F1 | 	sub	objptr, ##1080
08e6c     F2 16 02 F1 | 	add	arg03, objptr
08e70     04 16 06 F1 | 	add	arg03, #4
08e74     0B 17 02 FB | 	rdlong	arg03, arg03
08e78     01 00 00 FF 
08e7c     00 16 0E F2 | 	cmp	arg03, ##512 wz
08e80     35 00 00 FF 
08e84     3C E4 85 F1 | 	sub	objptr, ##27196
08e88     CC 02 90 5D |  if_ne	jmp	#LR__0785
08e8c     37 00 00 FF 
08e90     74 E4 05 F1 | 	add	objptr, ##28276
08e94     F2 16 02 FB | 	rdlong	arg03, objptr
08e98     01 16 06 F1 | 	add	arg03, #1
08e9c     03 16 66 F0 | 	shl	arg03, #3
08ea0     02 00 00 FF 
08ea4     38 E4 85 F1 | 	sub	objptr, ##1080
08ea8     F2 16 02 F1 | 	add	arg03, objptr
08eac     04 16 06 F1 | 	add	arg03, #4
08eb0     0B 17 02 FB | 	rdlong	arg03, arg03
08eb4     FE 17 0E F2 | 	cmp	arg03, #510 wz
08eb8     35 00 00 FF 
08ebc     3C E4 85 F1 | 	sub	objptr, ##27196
08ec0     94 02 90 5D |  if_ne	jmp	#LR__0785
08ec4     37 00 00 FF 
08ec8     74 E4 05 F1 | 	add	objptr, ##28276
08ecc     F2 16 02 FB | 	rdlong	arg03, objptr
08ed0     03 16 66 F0 | 	shl	arg03, #3
08ed4     02 00 00 FF 
08ed8     38 E4 85 F1 | 	sub	objptr, ##1080
08edc     F2 16 02 F1 | 	add	arg03, objptr
08ee0     0B 13 02 FB | 	rdlong	arg01, arg03
08ee4     00 14 06 F6 | 	mov	arg02, #0
08ee8     35 00 00 FF 
08eec     3C E4 85 F1 | 	sub	objptr, ##27196
08ef0     E0 8D B1 FD | 	call	#__system____builtin_atoi
08ef4     04 4E 05 F1 | 	add	fp, #4
08ef8     A7 FA 61 FC | 	wrlong	result1, fp
08efc     4A 00 00 FF 
08f00     AC E4 05 F1 | 	add	objptr, ##38060
08f04     F2 1E 02 FB | 	rdlong	local01, objptr
08f08     0F 21 02 F6 | 	mov	local02, local01
08f0c     01 20 66 F0 | 	shl	local02, #1
08f10     0F 21 02 F1 | 	add	local02, local01
08f14     02 20 66 F0 | 	shl	local02, #2
08f18     03 00 00 FF 
08f1c     00 E4 85 F1 | 	sub	objptr, ##1536
08f20     F2 20 02 F1 | 	add	local02, objptr
08f24     08 20 06 F1 | 	add	local02, #8
08f28     10 9D 68 FC | 	wrlong	#78, local02
08f2c     03 00 00 FF 
08f30     08 E4 05 F1 | 	add	objptr, ##1544
08f34     F2 22 02 FB | 	rdlong	local03, objptr
08f38     4A 00 00 FF 
08f3c     B4 E4 85 F1 | 	sub	objptr, ##38068
08f40     04 4E 05 F1 | 	add	fp, #4
08f44     A7 22 62 FC | 	wrlong	local03, fp
08f48     08 4E 85 F1 | 	sub	fp, #8
08f4c                 | ' 
08f4c                 | '   gotoline=val%(lparts(ct).part$) 
08f4c                 | '   compiledline(lineptr).result_type=token_fast_goto
08f4c                 | ' ' now find a pointer to goto
08f4c                 | '   gotoptr=programstart
08f4c                 | '   do
08f4c                 | LR__0780
08f4c     10 4E 05 F1 | 	add	fp, #16
08f50     A7 12 02 F6 | 	mov	arg01, fp
08f54     08 4E 85 F1 | 	sub	fp, #8
08f58     A7 14 02 FB | 	rdlong	arg02, fp
08f5c     08 4E 85 F1 | 	sub	fp, #8
08f60     18 16 06 F6 | 	mov	arg03, #24
08f64     0B 00 00 FF 
08f68     CC E4 05 F1 | 	add	objptr, ##5836
08f6c     64 4F B1 FD | 	call	#_psram_spin2_read1
08f70     0B 00 00 FF 
08f74     CC E4 85 F1 | 	sub	objptr, ##5836
08f78                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
08f78                 | '     if gotoheader(0)<>$FFFFFFFF then
08f78     10 4E 05 F1 | 	add	fp, #16
08f7c     A7 22 02 FB | 	rdlong	local03, fp
08f80     10 4E 85 F1 | 	sub	fp, #16
08f84     FF FF 7F FF 
08f88     FF 23 0E F2 | 	cmp	local03, ##-1 wz
08f8c     24 00 90 AD |  if_e	jmp	#LR__0781
08f90     08 4E 05 F1 | 	add	fp, #8
08f94     A7 22 02 FB | 	rdlong	local03, fp
08f98     04 4E 05 F1 | 	add	fp, #4
08f9c     A7 22 62 FC | 	wrlong	local03, fp
08fa0     18 4E 05 F1 | 	add	fp, #24
08fa4     A7 22 02 FB | 	rdlong	local03, fp
08fa8     1C 4E 85 F1 | 	sub	fp, #28
08fac     A7 22 62 FC | 	wrlong	local03, fp
08fb0     08 4E 85 F1 | 	sub	fp, #8
08fb4                 | LR__0781
08fb4     24 4E 05 F1 | 	add	fp, #36
08fb8     A7 22 02 FB | 	rdlong	local03, fp
08fbc     24 4E 85 F1 | 	sub	fp, #36
08fc0     FF FF 3F FF 
08fc4     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
08fc8     10 4E 05 51 |  if_ne	add	fp, #16
08fcc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
08fd0     10 4E 85 51 |  if_ne	sub	fp, #16
08fd4     FF FF 7F 5F 
08fd8     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
08fdc     1C 00 90 AD |  if_e	jmp	#LR__0782
08fe0     10 4E 05 F1 | 	add	fp, #16
08fe4     A7 22 02 FB | 	rdlong	local03, fp
08fe8     0C 4E 85 F1 | 	sub	fp, #12
08fec     A7 20 02 FB | 	rdlong	local02, fp
08ff0     04 4E 85 F1 | 	sub	fp, #4
08ff4     10 23 0A F2 | 	cmp	local03, local02 wz
08ff8     50 FF 9F 5D |  if_ne	jmp	#LR__0780
08ffc                 | LR__0782
08ffc                 | '   if gotoheader(0)=gotoline then
08ffc     10 4E 05 F1 | 	add	fp, #16
09000     A7 22 02 FB | 	rdlong	local03, fp
09004     0C 4E 85 F1 | 	sub	fp, #12
09008     A7 1E 02 FB | 	rdlong	local01, fp
0900c     04 4E 85 F1 | 	sub	fp, #4
09010     0F 23 0A F2 | 	cmp	local03, local01 wz
09014     7C 00 90 5D |  if_ne	jmp	#LR__0783
09018     4A 00 00 FF 
0901c     AC E4 05 F1 | 	add	objptr, ##38060
09020     F2 1E 02 FB | 	rdlong	local01, objptr
09024     0F 21 02 F6 | 	mov	local02, local01
09028     01 20 66 F0 | 	shl	local02, #1
0902c     0F 21 02 F1 | 	add	local02, local01
09030     02 20 66 F0 | 	shl	local02, #2
09034     03 00 00 FF 
09038     00 E4 85 F1 | 	sub	objptr, ##1536
0903c     F2 20 02 F1 | 	add	local02, objptr
09040     0C 4E 05 F1 | 	add	fp, #12
09044     A7 22 02 FB | 	rdlong	local03, fp
09048     10 23 62 FC | 	wrlong	local03, local02
0904c     03 00 00 FF 
09050     00 E4 05 F1 | 	add	objptr, ##1536
09054     F2 1E 02 FB | 	rdlong	local01, objptr
09058     0F 21 02 F6 | 	mov	local02, local01
0905c     01 20 66 F0 | 	shl	local02, #1
09060     0F 21 02 F1 | 	add	local02, local01
09064     02 20 66 F0 | 	shl	local02, #2
09068     03 00 00 FF 
0906c     00 E4 85 F1 | 	sub	objptr, ##1536
09070     F2 20 02 F1 | 	add	local02, objptr
09074     08 4E 85 F1 | 	sub	fp, #8
09078     A7 22 02 FB | 	rdlong	local03, fp
0907c     04 4E 85 F1 | 	sub	fp, #4
09080     04 20 06 F1 | 	add	local02, #4
09084     10 23 62 FC | 	wrlong	local03, local02
09088     47 00 00 FF 
0908c     AC E4 85 F1 | 	sub	objptr, ##36524
09090     A4 00 90 FD | 	jmp	#LR__0784
09094                 | LR__0783
09094     4A 00 00 FF 
09098     AC E4 05 F1 | 	add	objptr, ##38060
0909c     F2 1E 02 FB | 	rdlong	local01, objptr
090a0     0F 21 02 F6 | 	mov	local02, local01
090a4     01 20 66 F0 | 	shl	local02, #1
090a8     0F 21 02 F1 | 	add	local02, local01
090ac     02 20 66 F0 | 	shl	local02, #2
090b0     03 00 00 FF 
090b4     00 E4 85 F1 | 	sub	objptr, ##1536
090b8     F2 20 02 F1 | 	add	local02, objptr
090bc     00 00 C0 FF 
090c0     10 01 68 FC | 	wrlong	##-2147483648, local02
090c4     03 00 00 FF 
090c8     00 E4 05 F1 | 	add	objptr, ##1536
090cc     F2 1E 02 FB | 	rdlong	local01, objptr
090d0     0F 21 02 F6 | 	mov	local02, local01
090d4     01 20 66 F0 | 	shl	local02, #1
090d8     0F 21 02 F1 | 	add	local02, local01
090dc     02 20 66 F0 | 	shl	local02, #2
090e0     03 00 00 FF 
090e4     00 E4 85 F1 | 	sub	objptr, ##1536
090e8     F2 20 02 F1 | 	add	local02, objptr
090ec     04 4E 05 F1 | 	add	fp, #4
090f0     A7 22 02 FB | 	rdlong	local03, fp
090f4     04 4E 85 F1 | 	sub	fp, #4
090f8     04 20 06 F1 | 	add	local02, #4
090fc     10 23 62 FC | 	wrlong	local03, local02
09100     03 00 00 FF 
09104     00 E4 05 F1 | 	add	objptr, ##1536
09108     F2 1E 02 FB | 	rdlong	local01, objptr
0910c     0F 21 02 F6 | 	mov	local02, local01
09110     01 20 66 F0 | 	shl	local02, #1
09114     0F 21 02 F1 | 	add	local02, local01
09118     02 20 66 F0 | 	shl	local02, #2
0911c     03 00 00 FF 
09120     00 E4 85 F1 | 	sub	objptr, ##1536
09124     F2 20 02 F1 | 	add	local02, objptr
09128     08 20 06 F1 | 	add	local02, #8
0912c     10 A7 68 FC | 	wrlong	#83, local02
09130     47 00 00 FF 
09134     AC E4 85 F1 | 	sub	objptr, ##36524
09138                 | LR__0784
09138     4A 00 00 FF 
0913c     AC E4 05 F1 | 	add	objptr, ##38060
09140     F2 22 02 FB | 	rdlong	local03, objptr
09144     01 22 06 F1 | 	add	local03, #1
09148     F2 22 62 FC | 	wrlong	local03, objptr
0914c     4A 00 00 FF 
09150     AC E4 85 F1 | 	sub	objptr, ##38060
09154     D0 00 90 FD | 	jmp	#LR__0786
09158                 | LR__0785
09158     DC 00 B0 FD | 	call	#_expr
0915c     30 4E 05 F1 | 	add	fp, #48
09160     A7 9E 68 FC | 	wrlong	#79, fp
09164     08 4E 85 F1 | 	sub	fp, #8
09168     A7 00 68 FC | 	wrlong	#0, fp
0916c     04 4E 05 F1 | 	add	fp, #4
09170     A7 22 02 FB | 	rdlong	local03, fp
09174     04 4E 05 F1 | 	add	fp, #4
09178     A7 1E 02 FB | 	rdlong	local01, fp
0917c     30 4E 85 F1 | 	sub	fp, #48
09180     4A 00 00 FF 
09184     AC E4 05 F1 | 	add	objptr, ##38060
09188     F2 20 02 FB | 	rdlong	local02, objptr
0918c     10 17 02 F6 | 	mov	arg03, local02
09190     01 16 66 F0 | 	shl	arg03, #1
09194     10 17 02 F1 | 	add	arg03, local02
09198     02 16 66 F0 | 	shl	arg03, #2
0919c     03 00 00 FF 
091a0     00 E4 85 F1 | 	sub	objptr, ##1536
091a4     F2 16 02 F1 | 	add	arg03, objptr
091a8     0B 01 68 FC | 	wrlong	#0, arg03
091ac     03 00 00 FF 
091b0     00 E4 05 F1 | 	add	objptr, ##1536
091b4     F2 20 02 FB | 	rdlong	local02, objptr
091b8     10 17 02 F6 | 	mov	arg03, local02
091bc     01 16 66 F0 | 	shl	arg03, #1
091c0     10 17 02 F1 | 	add	arg03, local02
091c4     02 16 66 F0 | 	shl	arg03, #2
091c8     03 00 00 FF 
091cc     00 E4 85 F1 | 	sub	objptr, ##1536
091d0     F2 16 02 F1 | 	add	arg03, objptr
091d4     04 16 06 F1 | 	add	arg03, #4
091d8     0B 23 62 FC | 	wrlong	local03, arg03
091dc     03 00 00 FF 
091e0     00 E4 05 F1 | 	add	objptr, ##1536
091e4     F2 22 02 FB | 	rdlong	local03, objptr
091e8     11 21 02 F6 | 	mov	local02, local03
091ec     01 20 66 F0 | 	shl	local02, #1
091f0     11 21 02 F1 | 	add	local02, local03
091f4     02 20 66 F0 | 	shl	local02, #2
091f8     03 00 00 FF 
091fc     00 E4 85 F1 | 	sub	objptr, ##1536
09200     F2 20 02 F1 | 	add	local02, objptr
09204     08 20 06 F1 | 	add	local02, #8
09208     10 1F 62 FC | 	wrlong	local01, local02
0920c     03 00 00 FF 
09210     00 E4 05 F1 | 	add	objptr, ##1536
09214     F2 22 02 FB | 	rdlong	local03, objptr
09218     01 22 06 F1 | 	add	local03, #1
0921c     F2 22 62 FC | 	wrlong	local03, objptr
09220     4A 00 00 FF 
09224     AC E4 85 F1 | 	sub	objptr, ##38060
09228                 | LR__0786
09228                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
09228                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
09228                 | ' return 0
09228     00 FA 05 F6 | 	mov	result1, #0
0922c     A7 F0 03 F6 | 	mov	ptra, fp
09230     B2 00 A0 FD | 	call	#popregs_
09234                 | _compile_goto_ret
09234     2D 00 64 FD | 	ret
09238                 | 
09238                 | ' 
09238                 | ' 
09238                 | ' 
09238                 | ' 
09238                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09238                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
09238                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09238                 | ' 
09238                 | ' 
09238                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09238                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
09238                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09238                 | ' 
09238                 | ' 
09238                 | ' function expr() as integer 
09238                 | _expr
09238     07 4A 05 F6 | 	mov	COUNT_, #7
0923c     A8 00 A0 FD | 	call	#pushregs_
09240                 | _expr_enter
09240     37 00 00 FF 
09244     74 E4 05 F1 | 	add	objptr, ##28276
09248     F2 24 02 FB | 	rdlong	local04, objptr
0924c     03 24 66 F0 | 	shl	local04, #3
09250     02 00 00 FF 
09254     38 E4 85 F1 | 	sub	objptr, ##1080
09258     F2 24 02 F1 | 	add	local04, objptr
0925c     04 24 06 F1 | 	add	local04, #4
09260     12 27 02 FB | 	rdlong	local05, local04
09264                 | ' 
09264                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
09264     FE 27 0E F2 | 	cmp	local05, #510 wz
09268     35 00 00 FF 
0926c     3C E4 85 F1 | 	sub	objptr, ##27196
09270     C4 00 90 5D |  if_ne	jmp	#LR__0790
09274     1D 1E 06 F6 | 	mov	local01, #29
09278     FF 22 06 F6 | 	mov	local03, #255
0927c     0F 29 02 F6 | 	mov	local06, local01
09280     10 2B 02 F6 | 	mov	local07, local02
09284     11 1F 02 F6 | 	mov	local01, local03
09288     4A 00 00 FF 
0928c     AC E4 05 F1 | 	add	objptr, ##38060
09290     F2 26 02 FB | 	rdlong	local05, objptr
09294     13 25 02 F6 | 	mov	local04, local05
09298     01 24 66 F0 | 	shl	local04, #1
0929c     13 25 02 F1 | 	add	local04, local05
092a0     02 24 66 F0 | 	shl	local04, #2
092a4     03 00 00 FF 
092a8     00 E4 85 F1 | 	sub	objptr, ##1536
092ac     F2 24 02 F1 | 	add	local04, objptr
092b0     12 29 62 FC | 	wrlong	local06, local04
092b4     03 00 00 FF 
092b8     00 E4 05 F1 | 	add	objptr, ##1536
092bc     F2 28 02 FB | 	rdlong	local06, objptr
092c0     14 27 02 F6 | 	mov	local05, local06
092c4     01 26 66 F0 | 	shl	local05, #1
092c8     14 27 02 F1 | 	add	local05, local06
092cc     02 26 66 F0 | 	shl	local05, #2
092d0     03 00 00 FF 
092d4     00 E4 85 F1 | 	sub	objptr, ##1536
092d8     F2 26 02 F1 | 	add	local05, objptr
092dc     04 26 06 F1 | 	add	local05, #4
092e0     13 2B 62 FC | 	wrlong	local07, local05
092e4     03 00 00 FF 
092e8     00 E4 05 F1 | 	add	objptr, ##1536
092ec     F2 2A 02 FB | 	rdlong	local07, objptr
092f0     15 29 02 F6 | 	mov	local06, local07
092f4     01 28 66 F0 | 	shl	local06, #1
092f8     15 29 02 F1 | 	add	local06, local07
092fc     02 28 66 F0 | 	shl	local06, #2
09300     03 00 00 FF 
09304     00 E4 85 F1 | 	sub	objptr, ##1536
09308     F2 28 02 F1 | 	add	local06, objptr
0930c     08 28 06 F1 | 	add	local06, #8
09310     14 1F 62 FC | 	wrlong	local01, local06
09314     03 00 00 FF 
09318     00 E4 05 F1 | 	add	objptr, ##1536
0931c     F2 28 02 FB | 	rdlong	local06, objptr
09320     01 28 06 F1 | 	add	local06, #1
09324     F2 28 62 FC | 	wrlong	local06, objptr
09328     4A 00 00 FF 
0932c     AC E4 85 F1 | 	sub	objptr, ##38060
09330     1D FA 05 F6 | 	mov	result1, #29
09334     54 01 90 FD | 	jmp	#LR__0793
09338                 | LR__0790
09338     00 1E 06 F6 | 	mov	local01, #0
0933c     58 01 B0 FD | 	call	#_addsub
09340     37 00 00 FF 
09344     74 E4 05 F1 | 	add	objptr, ##28276
09348     F2 24 02 FB | 	rdlong	local04, objptr
0934c     03 24 66 F0 | 	shl	local04, #3
09350     02 00 00 FF 
09354     38 E4 85 F1 | 	sub	objptr, ##1080
09358     F2 24 02 F1 | 	add	local04, objptr
0935c     04 24 06 F1 | 	add	local04, #4
09360     12 27 02 FB | 	rdlong	local05, local04
09364                 | ' t3.result.uresult=0
09364                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
09364                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
09364                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
09364     35 00 00 FF 
09368     3C E4 85 F1 | 	sub	objptr, ##27196
0936c                 | LR__0791
0936c     1B 26 0E F2 | 	cmp	local05, #27 wz
09370     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
09374     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
09378     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
0937c     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
09380     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
09384     00 01 90 5D |  if_ne	jmp	#LR__0792
09388     37 00 00 FF 
0938c     74 E4 05 F1 | 	add	objptr, ##28276
09390     F2 28 02 FB | 	rdlong	local06, objptr
09394     01 28 06 F1 | 	add	local06, #1
09398     F2 28 62 FC | 	wrlong	local06, objptr
0939c     37 00 00 FF 
093a0     74 E4 85 F1 | 	sub	objptr, ##28276
093a4     F0 00 B0 FD | 	call	#_addsub
093a8     13 23 02 F6 | 	mov	local03, local05
093ac     0F 29 02 F6 | 	mov	local06, local01
093b0     10 2B 02 F6 | 	mov	local07, local02
093b4     11 27 02 F6 | 	mov	local05, local03
093b8     4A 00 00 FF 
093bc     AC E4 05 F1 | 	add	objptr, ##38060
093c0     F2 24 02 FB | 	rdlong	local04, objptr
093c4     12 FB 01 F6 | 	mov	result1, local04
093c8     01 FA 65 F0 | 	shl	result1, #1
093cc     12 FB 01 F1 | 	add	result1, local04
093d0     02 FA 65 F0 | 	shl	result1, #2
093d4     03 00 00 FF 
093d8     00 E4 85 F1 | 	sub	objptr, ##1536
093dc     F2 FA 01 F1 | 	add	result1, objptr
093e0     FD 28 62 FC | 	wrlong	local06, result1
093e4     03 00 00 FF 
093e8     00 E4 05 F1 | 	add	objptr, ##1536
093ec     F2 28 02 FB | 	rdlong	local06, objptr
093f0     14 25 02 F6 | 	mov	local04, local06
093f4     01 24 66 F0 | 	shl	local04, #1
093f8     14 25 02 F1 | 	add	local04, local06
093fc     02 24 66 F0 | 	shl	local04, #2
09400     03 00 00 FF 
09404     00 E4 85 F1 | 	sub	objptr, ##1536
09408     F2 24 02 F1 | 	add	local04, objptr
0940c     04 24 06 F1 | 	add	local04, #4
09410     12 2B 62 FC | 	wrlong	local07, local04
09414     03 00 00 FF 
09418     00 E4 05 F1 | 	add	objptr, ##1536
0941c     F2 2A 02 FB | 	rdlong	local07, objptr
09420     15 29 02 F6 | 	mov	local06, local07
09424     01 28 66 F0 | 	shl	local06, #1
09428     15 29 02 F1 | 	add	local06, local07
0942c     02 28 66 F0 | 	shl	local06, #2
09430     03 00 00 FF 
09434     00 E4 85 F1 | 	sub	objptr, ##1536
09438     F2 28 02 F1 | 	add	local06, objptr
0943c     08 28 06 F1 | 	add	local06, #8
09440     14 27 62 FC | 	wrlong	local05, local06
09444     03 00 00 FF 
09448     00 E4 05 F1 | 	add	objptr, ##1536
0944c     F2 28 02 FB | 	rdlong	local06, objptr
09450     01 28 06 F1 | 	add	local06, #1
09454     F2 28 62 FC | 	wrlong	local06, objptr
09458     13 00 00 FF 
0945c     38 E4 85 F1 | 	sub	objptr, ##9784
09460     F2 24 02 FB | 	rdlong	local04, objptr
09464     03 24 66 F0 | 	shl	local04, #3
09468     02 00 00 FF 
0946c     38 E4 85 F1 | 	sub	objptr, ##1080
09470     F2 24 02 F1 | 	add	local04, objptr
09474     04 24 06 F1 | 	add	local04, #4
09478     12 27 02 FB | 	rdlong	local05, local04
0947c     35 00 00 FF 
09480     3C E4 85 F1 | 	sub	objptr, ##27196
09484     E4 FE 9F FD | 	jmp	#LR__0791
09488                 | LR__0792
09488                 | ' return 0  
09488     00 FA 05 F6 | 	mov	result1, #0
0948c                 | LR__0793
0948c     A7 F0 03 F6 | 	mov	ptra, fp
09490     B2 00 A0 FD | 	call	#popregs_
09494                 | _expr_ret
09494     2D 00 64 FD | 	ret
09498                 | 
09498                 | ' 
09498                 | ' 
09498                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
09498                 | ' 
09498                 | ' function addsub() as integer 
09498                 | _addsub
09498     07 4A 05 F6 | 	mov	COUNT_, #7
0949c     A8 00 A0 FD | 	call	#pushregs_
094a0                 | _addsub_enter
094a0     00 1E 06 F6 | 	mov	local01, #0
094a4     50 01 B0 FD | 	call	#_muldiv
094a8     37 00 00 FF 
094ac     74 E4 05 F1 | 	add	objptr, ##28276
094b0     F2 24 02 FB | 	rdlong	local04, objptr
094b4     03 24 66 F0 | 	shl	local04, #3
094b8     02 00 00 FF 
094bc     38 E4 85 F1 | 	sub	objptr, ##1080
094c0     F2 24 02 F1 | 	add	local04, objptr
094c4     04 24 06 F1 | 	add	local04, #4
094c8     12 27 02 FB | 	rdlong	local05, local04
094cc                 | ' t3.result.uresult=0
094cc                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
094cc                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
094cc                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
094cc     35 00 00 FF 
094d0     3C E4 85 F1 | 	sub	objptr, ##27196
094d4                 | LR__0800
094d4     01 26 0E F2 | 	cmp	local05, #1 wz
094d8     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
094dc     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
094e0     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
094e4     00 01 90 5D |  if_ne	jmp	#LR__0801
094e8     37 00 00 FF 
094ec     74 E4 05 F1 | 	add	objptr, ##28276
094f0     F2 24 02 FB | 	rdlong	local04, objptr
094f4     01 24 06 F1 | 	add	local04, #1
094f8     F2 24 62 FC | 	wrlong	local04, objptr
094fc     37 00 00 FF 
09500     74 E4 85 F1 | 	sub	objptr, ##28276
09504     F0 00 B0 FD | 	call	#_muldiv
09508     13 23 02 F6 | 	mov	local03, local05
0950c     0F 29 02 F6 | 	mov	local06, local01
09510     10 2B 02 F6 | 	mov	local07, local02
09514     11 27 02 F6 | 	mov	local05, local03
09518     4A 00 00 FF 
0951c     AC E4 05 F1 | 	add	objptr, ##38060
09520     F2 24 02 FB | 	rdlong	local04, objptr
09524     12 FB 01 F6 | 	mov	result1, local04
09528     01 FA 65 F0 | 	shl	result1, #1
0952c     12 FB 01 F1 | 	add	result1, local04
09530     02 FA 65 F0 | 	shl	result1, #2
09534     03 00 00 FF 
09538     00 E4 85 F1 | 	sub	objptr, ##1536
0953c     F2 FA 01 F1 | 	add	result1, objptr
09540     FD 28 62 FC | 	wrlong	local06, result1
09544     03 00 00 FF 
09548     00 E4 05 F1 | 	add	objptr, ##1536
0954c     F2 28 02 FB | 	rdlong	local06, objptr
09550     14 25 02 F6 | 	mov	local04, local06
09554     01 24 66 F0 | 	shl	local04, #1
09558     14 25 02 F1 | 	add	local04, local06
0955c     02 24 66 F0 | 	shl	local04, #2
09560     03 00 00 FF 
09564     00 E4 85 F1 | 	sub	objptr, ##1536
09568     F2 24 02 F1 | 	add	local04, objptr
0956c     04 24 06 F1 | 	add	local04, #4
09570     12 2B 62 FC | 	wrlong	local07, local04
09574     03 00 00 FF 
09578     00 E4 05 F1 | 	add	objptr, ##1536
0957c     F2 2A 02 FB | 	rdlong	local07, objptr
09580     15 29 02 F6 | 	mov	local06, local07
09584     01 28 66 F0 | 	shl	local06, #1
09588     15 29 02 F1 | 	add	local06, local07
0958c     02 28 66 F0 | 	shl	local06, #2
09590     03 00 00 FF 
09594     00 E4 85 F1 | 	sub	objptr, ##1536
09598     F2 28 02 F1 | 	add	local06, objptr
0959c     08 28 06 F1 | 	add	local06, #8
095a0     14 27 62 FC | 	wrlong	local05, local06
095a4     03 00 00 FF 
095a8     00 E4 05 F1 | 	add	objptr, ##1536
095ac     F2 28 02 FB | 	rdlong	local06, objptr
095b0     01 28 06 F1 | 	add	local06, #1
095b4     F2 28 62 FC | 	wrlong	local06, objptr
095b8     13 00 00 FF 
095bc     38 E4 85 F1 | 	sub	objptr, ##9784
095c0     F2 24 02 FB | 	rdlong	local04, objptr
095c4     03 24 66 F0 | 	shl	local04, #3
095c8     02 00 00 FF 
095cc     38 E4 85 F1 | 	sub	objptr, ##1080
095d0     F2 24 02 F1 | 	add	local04, objptr
095d4     04 24 06 F1 | 	add	local04, #4
095d8     12 27 02 FB | 	rdlong	local05, local04
095dc     35 00 00 FF 
095e0     3C E4 85 F1 | 	sub	objptr, ##27196
095e4     EC FE 9F FD | 	jmp	#LR__0800
095e8                 | LR__0801
095e8                 | '   return 0
095e8     00 FA 05 F6 | 	mov	result1, #0
095ec     A7 F0 03 F6 | 	mov	ptra, fp
095f0     B2 00 A0 FD | 	call	#popregs_
095f4                 | _addsub_ret
095f4     2D 00 64 FD | 	ret
095f8                 | 
095f8                 | ' 
095f8                 | ' sub muldiv()
095f8                 | _muldiv
095f8     08 4A 05 F6 | 	mov	COUNT_, #8
095fc     A8 00 A0 FD | 	call	#pushregs_
09600                 | _muldiv_enter
09600     00 1E 06 F6 | 	mov	local01, #0
09604     58 01 B0 FD | 	call	#_getvalue
09608     37 00 00 FF 
0960c     74 E4 05 F1 | 	add	objptr, ##28276
09610     F2 24 02 FB | 	rdlong	local04, objptr
09614     03 24 66 F0 | 	shl	local04, #3
09618     02 00 00 FF 
0961c     38 E4 85 F1 | 	sub	objptr, ##1080
09620     F2 24 02 F1 | 	add	local04, objptr
09624     04 24 06 F1 | 	add	local04, #4
09628     12 27 02 FB | 	rdlong	local05, local04
0962c                 | ' t3.result.uresult=0
0962c                 | ' getvalue()    
0962c                 | ' op = lparts(ct).token
0962c                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0962c     35 00 00 FF 
09630     3C E4 85 F1 | 	sub	objptr, ##27196
09634                 | LR__0810
09634     05 26 0E F2 | 	cmp	local05, #5 wz
09638     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
0963c     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
09640     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
09644     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
09648     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
0964c     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
09650     00 01 90 5D |  if_ne	jmp	#LR__0811
09654     37 00 00 FF 
09658     74 E4 05 F1 | 	add	objptr, ##28276
0965c     F2 24 02 FB | 	rdlong	local04, objptr
09660     01 24 06 F1 | 	add	local04, #1
09664     F2 24 62 FC | 	wrlong	local04, objptr
09668     37 00 00 FF 
0966c     74 E4 85 F1 | 	sub	objptr, ##28276
09670     EC 00 B0 FD | 	call	#_getvalue
09674     13 23 02 F6 | 	mov	local03, local05
09678     0F 29 02 F6 | 	mov	local06, local01
0967c     10 2B 02 F6 | 	mov	local07, local02
09680     11 27 02 F6 | 	mov	local05, local03
09684     4A 00 00 FF 
09688     AC E4 05 F1 | 	add	objptr, ##38060
0968c     F2 24 02 FB | 	rdlong	local04, objptr
09690     12 2D 02 F6 | 	mov	local08, local04
09694     01 2C 66 F0 | 	shl	local08, #1
09698     12 2D 02 F1 | 	add	local08, local04
0969c     02 2C 66 F0 | 	shl	local08, #2
096a0     03 00 00 FF 
096a4     00 E4 85 F1 | 	sub	objptr, ##1536
096a8     F2 2C 02 F1 | 	add	local08, objptr
096ac     16 29 62 FC | 	wrlong	local06, local08
096b0     03 00 00 FF 
096b4     00 E4 05 F1 | 	add	objptr, ##1536
096b8     F2 2C 02 FB | 	rdlong	local08, objptr
096bc     16 29 02 F6 | 	mov	local06, local08
096c0     01 28 66 F0 | 	shl	local06, #1
096c4     16 29 02 F1 | 	add	local06, local08
096c8     02 28 66 F0 | 	shl	local06, #2
096cc     03 00 00 FF 
096d0     00 E4 85 F1 | 	sub	objptr, ##1536
096d4     F2 28 02 F1 | 	add	local06, objptr
096d8     04 28 06 F1 | 	add	local06, #4
096dc     14 2B 62 FC | 	wrlong	local07, local06
096e0     03 00 00 FF 
096e4     00 E4 05 F1 | 	add	objptr, ##1536
096e8     F2 2C 02 FB | 	rdlong	local08, objptr
096ec     16 2B 02 F6 | 	mov	local07, local08
096f0     01 2A 66 F0 | 	shl	local07, #1
096f4     16 2B 02 F1 | 	add	local07, local08
096f8     02 2A 66 F0 | 	shl	local07, #2
096fc     03 00 00 FF 
09700     00 E4 85 F1 | 	sub	objptr, ##1536
09704     F2 2A 02 F1 | 	add	local07, objptr
09708     08 2A 06 F1 | 	add	local07, #8
0970c     15 27 62 FC | 	wrlong	local05, local07
09710     03 00 00 FF 
09714     00 E4 05 F1 | 	add	objptr, ##1536
09718     F2 28 02 FB | 	rdlong	local06, objptr
0971c     01 28 06 F1 | 	add	local06, #1
09720     F2 28 62 FC | 	wrlong	local06, objptr
09724     13 00 00 FF 
09728     38 E4 85 F1 | 	sub	objptr, ##9784
0972c     F2 24 02 FB | 	rdlong	local04, objptr
09730     03 24 66 F0 | 	shl	local04, #3
09734     02 00 00 FF 
09738     38 E4 85 F1 | 	sub	objptr, ##1080
0973c     F2 24 02 F1 | 	add	local04, objptr
09740     04 24 06 F1 | 	add	local04, #4
09744     12 27 02 FB | 	rdlong	local05, local04
09748     35 00 00 FF 
0974c     3C E4 85 F1 | 	sub	objptr, ##27196
09750     E0 FE 9F FD | 	jmp	#LR__0810
09754                 | LR__0811
09754     A7 F0 03 F6 | 	mov	ptra, fp
09758     B2 00 A0 FD | 	call	#popregs_
0975c                 | _muldiv_ret
0975c     2D 00 64 FD | 	ret
09760                 | 
09760                 | ' 
09760                 | ' sub getvalue() 
09760                 | _getvalue
09760     0B 4A 05 F6 | 	mov	COUNT_, #11
09764     A8 00 A0 FD | 	call	#pushregs_
09768                 | _getvalue_enter
09768     01 24 06 F6 | 	mov	local04, #1
0976c     00 1E 06 F6 | 	mov	local01, #0
09770     1D 22 06 F6 | 	mov	local03, #29
09774     37 00 00 FF 
09778     74 E4 05 F1 | 	add	objptr, ##28276
0977c     F2 16 02 FB | 	rdlong	arg03, objptr
09780     03 16 66 F0 | 	shl	arg03, #3
09784     02 00 00 FF 
09788     38 E4 85 F1 | 	sub	objptr, ##1080
0978c     F2 16 02 F1 | 	add	arg03, objptr
09790     04 16 06 F1 | 	add	arg03, #4
09794     0B 27 02 FB | 	rdlong	local05, arg03
09798                 | ' m=1
09798                 | ' t1.result.uresult=0: t1.result_type=result_uint
09798                 | ' op=lparts(ct).token
09798                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
09798     02 26 0E F2 | 	cmp	local05, #2 wz
0979c     35 00 00 FF 
097a0     3C E4 85 F1 | 	sub	objptr, ##27196
097a4     38 00 90 5D |  if_ne	jmp	#LR__0820
097a8     01 24 66 F6 | 	neg	local04, #1
097ac     37 00 00 FF 
097b0     74 E4 05 F1 | 	add	objptr, ##28276
097b4     F2 26 02 FB | 	rdlong	local05, objptr
097b8     01 26 06 F1 | 	add	local05, #1
097bc     F2 26 62 FC | 	wrlong	local05, objptr
097c0     03 26 66 F0 | 	shl	local05, #3
097c4     02 00 00 FF 
097c8     38 E4 85 F1 | 	sub	objptr, ##1080
097cc     F2 26 02 F1 | 	add	local05, objptr
097d0     04 26 06 F1 | 	add	local05, #4
097d4     13 27 02 FB | 	rdlong	local05, local05
097d8     35 00 00 FF 
097dc     3C E4 85 F1 | 	sub	objptr, ##27196
097e0                 | LR__0820
097e0                 | ' select case op
097e0     01 00 00 FF 
097e4     00 26 0E F2 | 	cmp	local05, ##512 wz
097e8     3C 00 90 AD |  if_e	jmp	#LR__0821
097ec     01 00 00 FF 
097f0     01 26 0E F2 | 	cmp	local05, ##513 wz
097f4     88 01 90 AD |  if_e	jmp	#LR__0824
097f8     01 00 00 FF 
097fc     02 26 0E F2 | 	cmp	local05, ##514 wz
09800     3C 04 90 AD |  if_e	jmp	#LR__0831
09804     01 00 00 FF 
09808     03 26 0E F2 | 	cmp	local05, ##515 wz
0980c     A0 05 90 AD |  if_e	jmp	#LR__0834
09810     01 00 00 FF 
09814     04 26 0E F2 | 	cmp	local05, ##516 wz
09818     70 07 90 AD |  if_e	jmp	#LR__0839
0981c     15 26 0E F2 | 	cmp	local05, #21 wz
09820     90 07 90 AD |  if_e	jmp	#LR__0840
09824     00 08 90 FD | 	jmp	#LR__0841
09828                 | LR__0821
09828                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
09828     01 24 0E F2 | 	cmp	local04, #1 wz
0982c     3C 00 90 5D |  if_ne	jmp	#LR__0822
09830     37 00 00 FF 
09834     74 E4 05 F1 | 	add	objptr, ##28276
09838     F2 26 02 FB | 	rdlong	local05, objptr
0983c     03 26 66 F0 | 	shl	local05, #3
09840     02 00 00 FF 
09844     38 E4 85 F1 | 	sub	objptr, ##1080
09848     F2 26 02 F1 | 	add	local05, objptr
0984c     13 13 02 FB | 	rdlong	arg01, local05
09850     00 14 06 F6 | 	mov	arg02, #0
09854     35 00 00 FF 
09858     3C E4 85 F1 | 	sub	objptr, ##27196
0985c     74 84 B1 FD | 	call	#__system____builtin_atoi
09860     FD 24 02 FD | 	qmul	local04, result1
09864     18 1E 62 FD | 	getqx	local01
09868     1C 22 06 F6 | 	mov	local03, #28
0986c                 | LR__0822
0986c                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
0986c     FF FF 7F FF 
09870     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09874     3C 00 90 5D |  if_ne	jmp	#LR__0823
09878     37 00 00 FF 
0987c     74 E4 05 F1 | 	add	objptr, ##28276
09880     F2 26 02 FB | 	rdlong	local05, objptr
09884     03 26 66 F0 | 	shl	local05, #3
09888     02 00 00 FF 
0988c     38 E4 85 F1 | 	sub	objptr, ##1080
09890     F2 26 02 F1 | 	add	local05, objptr
09894     13 13 02 FB | 	rdlong	arg01, local05
09898     00 14 06 F6 | 	mov	arg02, #0
0989c     35 00 00 FF 
098a0     3C E4 85 F1 | 	sub	objptr, ##27196
098a4     2C 84 B1 FD | 	call	#__system____builtin_atoi
098a8     FD 24 02 FD | 	qmul	local04, result1
098ac     18 1E 62 FD | 	getqx	local01
098b0     1C 22 06 F6 | 	mov	local03, #28
098b4                 | LR__0823
098b4     0F 29 02 F6 | 	mov	local06, local01
098b8     10 2B 02 F6 | 	mov	local07, local02
098bc     11 27 02 F6 | 	mov	local05, local03
098c0     4A 00 00 FF 
098c4     AC E4 05 F1 | 	add	objptr, ##38060
098c8     F2 1E 02 FB | 	rdlong	local01, objptr
098cc     0F 25 02 F6 | 	mov	local04, local01
098d0     01 24 66 F0 | 	shl	local04, #1
098d4     0F 25 02 F1 | 	add	local04, local01
098d8     02 24 66 F0 | 	shl	local04, #2
098dc     03 00 00 FF 
098e0     00 E4 85 F1 | 	sub	objptr, ##1536
098e4     F2 24 02 F1 | 	add	local04, objptr
098e8     12 29 62 FC | 	wrlong	local06, local04
098ec     03 00 00 FF 
098f0     00 E4 05 F1 | 	add	objptr, ##1536
098f4     F2 28 02 FB | 	rdlong	local06, objptr
098f8     14 1F 02 F6 | 	mov	local01, local06
098fc     01 1E 66 F0 | 	shl	local01, #1
09900     14 1F 02 F1 | 	add	local01, local06
09904     02 1E 66 F0 | 	shl	local01, #2
09908     03 00 00 FF 
0990c     00 E4 85 F1 | 	sub	objptr, ##1536
09910     F2 1E 02 F1 | 	add	local01, objptr
09914     04 1E 06 F1 | 	add	local01, #4
09918     0F 2B 62 FC | 	wrlong	local07, local01
0991c     03 00 00 FF 
09920     00 E4 05 F1 | 	add	objptr, ##1536
09924     F2 2A 02 FB | 	rdlong	local07, objptr
09928     15 29 02 F6 | 	mov	local06, local07
0992c     01 28 66 F0 | 	shl	local06, #1
09930     15 29 02 F1 | 	add	local06, local07
09934     02 28 66 F0 | 	shl	local06, #2
09938     03 00 00 FF 
0993c     00 E4 85 F1 | 	sub	objptr, ##1536
09940     F2 28 02 F1 | 	add	local06, objptr
09944     08 28 06 F1 | 	add	local06, #8
09948     14 27 62 FC | 	wrlong	local05, local06
0994c     03 00 00 FF 
09950     00 E4 05 F1 | 	add	objptr, ##1536
09954     F2 28 02 FB | 	rdlong	local06, objptr
09958     01 28 06 F1 | 	add	local06, #1
0995c     F2 28 62 FC | 	wrlong	local06, objptr
09960     13 00 00 FF 
09964     38 E4 85 F1 | 	sub	objptr, ##9784
09968     F2 28 02 FB | 	rdlong	local06, objptr
0996c     01 28 06 F1 | 	add	local06, #1
09970     F2 28 62 FC | 	wrlong	local06, objptr
09974     37 00 00 FF 
09978     74 E4 85 F1 | 	sub	objptr, ##28276
0997c     CC 06 90 FD | 	jmp	#LR__0842
09980                 | LR__0824
09980                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
09980     37 00 00 FF 
09984     74 E4 05 F1 | 	add	objptr, ##28276
09988     F2 16 02 FB | 	rdlong	arg03, objptr
0998c     03 16 66 F0 | 	shl	arg03, #3
09990     02 00 00 FF 
09994     38 E4 85 F1 | 	sub	objptr, ##1080
09998     F2 16 02 F1 | 	add	arg03, objptr
0999c     0B 13 02 FB | 	rdlong	arg01, arg03
099a0     01 14 06 F6 | 	mov	arg02, #1
099a4     35 00 00 FF 
099a8     3C E4 85 F1 | 	sub	objptr, ##27196
099ac     74 71 B1 FD | 	call	#__system__Left_S
099b0     FD 12 02 F6 | 	mov	arg01, result1
099b4     73 01 00 FF 
099b8     85 14 06 F6 | 	mov	arg02, ##@LR__5113
099bc     7C 51 B1 FD | 	call	#__system___string_cmp
099c0     00 FA 0D F2 | 	cmp	result1, #0 wz
099c4     94 00 90 5D |  if_ne	jmp	#LR__0827
099c8     37 00 00 FF 
099cc     74 E4 05 F1 | 	add	objptr, ##28276
099d0     F2 2A 02 FB | 	rdlong	local07, objptr
099d4     15 29 02 F6 | 	mov	local06, local07
099d8     03 28 66 F0 | 	shl	local06, #3
099dc     02 00 00 FF 
099e0     38 E4 85 F1 | 	sub	objptr, ##1080
099e4     F2 28 02 F1 | 	add	local06, objptr
099e8     73 01 00 FF 
099ec     87 26 06 F6 | 	mov	local05, ##@LR__5114
099f0     03 2A 66 F0 | 	shl	local07, #3
099f4     F2 2A 02 F1 | 	add	local07, objptr
099f8     15 2B 02 FB | 	rdlong	local07, local07
099fc     02 00 00 FF 
09a00     38 E4 05 F1 | 	add	objptr, ##1080
09a04     F2 1E 02 FB | 	rdlong	local01, objptr
09a08     03 1E 66 F0 | 	shl	local01, #3
09a0c     02 00 00 FF 
09a10     38 E4 85 F1 | 	sub	objptr, ##1080
09a14     F2 1E 02 F1 | 	add	local01, objptr
09a18     0F 13 02 FB | 	rdlong	arg01, local01
09a1c     35 00 00 FF 
09a20     3C E4 85 F1 | 	sub	objptr, ##27196
09a24     09 2D 02 F6 | 	mov	local08, arg01
09a28     97 06 48 FB | 	callpa	#(@LR__0826-@LR__0825)>>2,fcache_load_ptr_
09a2c                 | LR__0825
09a2c     16 FB C9 FA | 	rdbyte	result1, local08 wz
09a30     01 2C 06 51 |  if_ne	add	local08, #1
09a34     F4 FF 9F 5D |  if_ne	jmp	#LR__0825
09a38                 | LR__0826
09a38     09 2D 82 F1 | 	sub	local08, arg01
09a3c     16 15 02 F6 | 	mov	arg02, local08
09a40     01 14 86 F1 | 	sub	arg02, #1
09a44     15 13 02 F6 | 	mov	arg01, local07
09a48     60 71 B1 FD | 	call	#__system__Right_S
09a4c     FD 14 02 F6 | 	mov	arg02, result1
09a50     13 13 02 F6 | 	mov	arg01, local05
09a54     18 51 B1 FD | 	call	#__system___string_concat
09a58     14 FB 61 FC | 	wrlong	result1, local06
09a5c                 | LR__0827
09a5c                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
09a5c     37 00 00 FF 
09a60     74 E4 05 F1 | 	add	objptr, ##28276
09a64     F2 16 02 FB | 	rdlong	arg03, objptr
09a68     03 16 66 F0 | 	shl	arg03, #3
09a6c     02 00 00 FF 
09a70     38 E4 85 F1 | 	sub	objptr, ##1080
09a74     F2 16 02 F1 | 	add	arg03, objptr
09a78     0B 13 02 FB | 	rdlong	arg01, arg03
09a7c     01 14 06 F6 | 	mov	arg02, #1
09a80     35 00 00 FF 
09a84     3C E4 85 F1 | 	sub	objptr, ##27196
09a88     98 70 B1 FD | 	call	#__system__Left_S
09a8c     FD 12 02 F6 | 	mov	arg01, result1
09a90     73 01 00 FF 
09a94     8A 14 06 F6 | 	mov	arg02, ##@LR__5115
09a98     A0 50 B1 FD | 	call	#__system___string_cmp
09a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
09aa0     94 00 90 5D |  if_ne	jmp	#LR__0830
09aa4     37 00 00 FF 
09aa8     74 E4 05 F1 | 	add	objptr, ##28276
09aac     F2 2A 02 FB | 	rdlong	local07, objptr
09ab0     15 29 02 F6 | 	mov	local06, local07
09ab4     03 28 66 F0 | 	shl	local06, #3
09ab8     02 00 00 FF 
09abc     38 E4 85 F1 | 	sub	objptr, ##1080
09ac0     F2 28 02 F1 | 	add	local06, objptr
09ac4     73 01 00 FF 
09ac8     8C 26 06 F6 | 	mov	local05, ##@LR__5116
09acc     03 2A 66 F0 | 	shl	local07, #3
09ad0     F2 2A 02 F1 | 	add	local07, objptr
09ad4     15 2B 02 FB | 	rdlong	local07, local07
09ad8     02 00 00 FF 
09adc     38 E4 05 F1 | 	add	objptr, ##1080
09ae0     F2 1E 02 FB | 	rdlong	local01, objptr
09ae4     03 1E 66 F0 | 	shl	local01, #3
09ae8     02 00 00 FF 
09aec     38 E4 85 F1 | 	sub	objptr, ##1080
09af0     F2 1E 02 F1 | 	add	local01, objptr
09af4     0F 13 02 FB | 	rdlong	arg01, local01
09af8     35 00 00 FF 
09afc     3C E4 85 F1 | 	sub	objptr, ##27196
09b00     09 2D 02 F6 | 	mov	local08, arg01
09b04     97 06 48 FB | 	callpa	#(@LR__0829-@LR__0828)>>2,fcache_load_ptr_
09b08                 | LR__0828
09b08     16 FB C9 FA | 	rdbyte	result1, local08 wz
09b0c     01 2C 06 51 |  if_ne	add	local08, #1
09b10     F4 FF 9F 5D |  if_ne	jmp	#LR__0828
09b14                 | LR__0829
09b14     09 2D 82 F1 | 	sub	local08, arg01
09b18     16 15 02 F6 | 	mov	arg02, local08
09b1c     01 14 86 F1 | 	sub	arg02, #1
09b20     15 13 02 F6 | 	mov	arg01, local07
09b24     84 70 B1 FD | 	call	#__system__Right_S
09b28     FD 14 02 F6 | 	mov	arg02, result1
09b2c     13 13 02 F6 | 	mov	arg01, local05
09b30     3C 50 B1 FD | 	call	#__system___string_concat
09b34     14 FB 61 FC | 	wrlong	result1, local06
09b38                 | LR__0830
09b38     37 00 00 FF 
09b3c     74 E4 05 F1 | 	add	objptr, ##28276
09b40     F2 28 02 FB | 	rdlong	local06, objptr
09b44     03 28 66 F0 | 	shl	local06, #3
09b48     02 00 00 FF 
09b4c     38 E4 85 F1 | 	sub	objptr, ##1080
09b50     F2 28 02 F1 | 	add	local06, objptr
09b54     14 13 02 FB | 	rdlong	arg01, local06
09b58     00 14 06 F6 | 	mov	arg02, #0
09b5c     35 00 00 FF 
09b60     3C E4 85 F1 | 	sub	objptr, ##27196
09b64     6C 81 B1 FD | 	call	#__system____builtin_atoi
09b68     FD 24 02 FD | 	qmul	local04, result1
09b6c     4A 00 00 FF 
09b70     AC E4 05 F1 | 	add	objptr, ##38060
09b74     F2 28 02 FB | 	rdlong	local06, objptr
09b78     14 2F 02 F6 | 	mov	local09, local06
09b7c     01 2E 66 F0 | 	shl	local09, #1
09b80     14 2F 02 F1 | 	add	local09, local06
09b84     02 2E 66 F0 | 	shl	local09, #2
09b88     03 00 00 FF 
09b8c     00 E4 85 F1 | 	sub	objptr, ##1536
09b90     F2 2E 02 F1 | 	add	local09, objptr
09b94     03 00 00 FF 
09b98     00 E4 05 F1 | 	add	objptr, ##1536
09b9c     18 1E 62 FD | 	getqx	local01
09ba0     1C 22 06 F6 | 	mov	local03, #28
09ba4     0F 29 02 F6 | 	mov	local06, local01
09ba8     10 2B 02 F6 | 	mov	local07, local02
09bac     17 29 62 FC | 	wrlong	local06, local09
09bb0     11 2F 02 F6 | 	mov	local09, local03
09bb4     F2 28 02 FB | 	rdlong	local06, objptr
09bb8     14 27 02 F6 | 	mov	local05, local06
09bbc     01 26 66 F0 | 	shl	local05, #1
09bc0     14 27 02 F1 | 	add	local05, local06
09bc4     02 26 66 F0 | 	shl	local05, #2
09bc8     03 00 00 FF 
09bcc     00 E4 85 F1 | 	sub	objptr, ##1536
09bd0     F2 26 02 F1 | 	add	local05, objptr
09bd4     04 26 06 F1 | 	add	local05, #4
09bd8     13 2B 62 FC | 	wrlong	local07, local05
09bdc     03 00 00 FF 
09be0     00 E4 05 F1 | 	add	objptr, ##1536
09be4     F2 2A 02 FB | 	rdlong	local07, objptr
09be8     15 29 02 F6 | 	mov	local06, local07
09bec     01 28 66 F0 | 	shl	local06, #1
09bf0     15 29 02 F1 | 	add	local06, local07
09bf4     02 28 66 F0 | 	shl	local06, #2
09bf8     03 00 00 FF 
09bfc     00 E4 85 F1 | 	sub	objptr, ##1536
09c00     F2 28 02 F1 | 	add	local06, objptr
09c04     08 28 06 F1 | 	add	local06, #8
09c08     14 2F 62 FC | 	wrlong	local09, local06
09c0c     03 00 00 FF 
09c10     00 E4 05 F1 | 	add	objptr, ##1536
09c14     F2 28 02 FB | 	rdlong	local06, objptr
09c18     01 28 06 F1 | 	add	local06, #1
09c1c     F2 28 62 FC | 	wrlong	local06, objptr
09c20     13 00 00 FF 
09c24     38 E4 85 F1 | 	sub	objptr, ##9784
09c28     F2 28 02 FB | 	rdlong	local06, objptr
09c2c     01 28 06 F1 | 	add	local06, #1
09c30     F2 28 62 FC | 	wrlong	local06, objptr
09c34     37 00 00 FF 
09c38     74 E4 85 F1 | 	sub	objptr, ##28276
09c3c     0C 04 90 FD | 	jmp	#LR__0842
09c40                 | LR__0831
09c40                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
09c40     01 24 0E F2 | 	cmp	local04, #1 wz
09c44     48 00 90 5D |  if_ne	jmp	#LR__0832
09c48     00 C0 1F FF 
09c4c     00 28 06 F6 | 	mov	local06, ##1065353216
09c50     37 00 00 FF 
09c54     74 E4 05 F1 | 	add	objptr, ##28276
09c58     F2 2E 02 FB | 	rdlong	local09, objptr
09c5c     03 2E 66 F0 | 	shl	local09, #3
09c60     02 00 00 FF 
09c64     38 E4 85 F1 | 	sub	objptr, ##1080
09c68     F2 2E 02 F1 | 	add	local09, objptr
09c6c     17 13 02 FB | 	rdlong	arg01, local09
09c70     35 00 00 FF 
09c74     3C E4 85 F1 | 	sub	objptr, ##27196
09c78     C8 81 B1 FD | 	call	#__system____builtin_atof
09c7c     FD 14 02 F6 | 	mov	arg02, result1
09c80     14 13 02 F6 | 	mov	arg01, local06
09c84     D4 79 B1 FD | 	call	#__system___float_mul
09c88     FD 1E 02 F6 | 	mov	local01, result1
09c8c     1E 22 06 F6 | 	mov	local03, #30
09c90                 | LR__0832
09c90                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
09c90     FF FF 7F FF 
09c94     FF 25 0E F2 | 	cmp	local04, ##-1 wz
09c98     48 00 90 5D |  if_ne	jmp	#LR__0833
09c9c     00 C0 5F FF 
09ca0     00 28 06 F6 | 	mov	local06, ##-1082130432
09ca4     37 00 00 FF 
09ca8     74 E4 05 F1 | 	add	objptr, ##28276
09cac     F2 2E 02 FB | 	rdlong	local09, objptr
09cb0     03 2E 66 F0 | 	shl	local09, #3
09cb4     02 00 00 FF 
09cb8     38 E4 85 F1 | 	sub	objptr, ##1080
09cbc     F2 2E 02 F1 | 	add	local09, objptr
09cc0     17 13 02 FB | 	rdlong	arg01, local09
09cc4     35 00 00 FF 
09cc8     3C E4 85 F1 | 	sub	objptr, ##27196
09ccc     74 81 B1 FD | 	call	#__system____builtin_atof
09cd0     FD 14 02 F6 | 	mov	arg02, result1
09cd4     14 13 02 F6 | 	mov	arg01, local06
09cd8     80 79 B1 FD | 	call	#__system___float_mul
09cdc     FD 1E 02 F6 | 	mov	local01, result1
09ce0     1E 22 06 F6 | 	mov	local03, #30
09ce4                 | LR__0833
09ce4     0F 29 02 F6 | 	mov	local06, local01
09ce8     10 2B 02 F6 | 	mov	local07, local02
09cec     11 27 02 F6 | 	mov	local05, local03
09cf0     4A 00 00 FF 
09cf4     AC E4 05 F1 | 	add	objptr, ##38060
09cf8     F2 1E 02 FB | 	rdlong	local01, objptr
09cfc     0F 2F 02 F6 | 	mov	local09, local01
09d00     01 2E 66 F0 | 	shl	local09, #1
09d04     0F 2F 02 F1 | 	add	local09, local01
09d08     02 2E 66 F0 | 	shl	local09, #2
09d0c     03 00 00 FF 
09d10     00 E4 85 F1 | 	sub	objptr, ##1536
09d14     F2 2E 02 F1 | 	add	local09, objptr
09d18     17 29 62 FC | 	wrlong	local06, local09
09d1c     03 00 00 FF 
09d20     00 E4 05 F1 | 	add	objptr, ##1536
09d24     F2 2E 02 FB | 	rdlong	local09, objptr
09d28     17 29 02 F6 | 	mov	local06, local09
09d2c     01 28 66 F0 | 	shl	local06, #1
09d30     17 29 02 F1 | 	add	local06, local09
09d34     02 28 66 F0 | 	shl	local06, #2
09d38     03 00 00 FF 
09d3c     00 E4 85 F1 | 	sub	objptr, ##1536
09d40     F2 28 02 F1 | 	add	local06, objptr
09d44     04 28 06 F1 | 	add	local06, #4
09d48     14 2B 62 FC | 	wrlong	local07, local06
09d4c     03 00 00 FF 
09d50     00 E4 05 F1 | 	add	objptr, ##1536
09d54     F2 2E 02 FB | 	rdlong	local09, objptr
09d58     17 2B 02 F6 | 	mov	local07, local09
09d5c     01 2A 66 F0 | 	shl	local07, #1
09d60     17 2B 02 F1 | 	add	local07, local09
09d64     02 2A 66 F0 | 	shl	local07, #2
09d68     03 00 00 FF 
09d6c     00 E4 85 F1 | 	sub	objptr, ##1536
09d70     F2 2A 02 F1 | 	add	local07, objptr
09d74     08 2A 06 F1 | 	add	local07, #8
09d78     15 27 62 FC | 	wrlong	local05, local07
09d7c     03 00 00 FF 
09d80     00 E4 05 F1 | 	add	objptr, ##1536
09d84     F2 28 02 FB | 	rdlong	local06, objptr
09d88     01 28 06 F1 | 	add	local06, #1
09d8c     F2 28 62 FC | 	wrlong	local06, objptr
09d90     13 00 00 FF 
09d94     38 E4 85 F1 | 	sub	objptr, ##9784
09d98     F2 28 02 FB | 	rdlong	local06, objptr
09d9c     01 28 06 F1 | 	add	local06, #1
09da0     F2 28 62 FC | 	wrlong	local06, objptr
09da4     37 00 00 FF 
09da8     74 E4 85 F1 | 	sub	objptr, ##28276
09dac     9C 02 90 FD | 	jmp	#LR__0842
09db0                 | LR__0834
09db0     1F 22 06 F6 | 	mov	local03, #31
09db4     37 00 00 FF 
09db8     74 E4 05 F1 | 	add	objptr, ##28276
09dbc     F2 16 02 FB | 	rdlong	arg03, objptr
09dc0     03 16 66 F0 | 	shl	arg03, #3
09dc4     02 00 00 FF 
09dc8     38 E4 85 F1 | 	sub	objptr, ##1080
09dcc     F2 16 02 F1 | 	add	arg03, objptr
09dd0     0B 13 02 FB | 	rdlong	arg01, arg03
09dd4     35 00 00 FF 
09dd8     3C E4 85 F1 | 	sub	objptr, ##27196
09ddc     09 2D 02 F6 | 	mov	local08, arg01
09de0     97 06 48 FB | 	callpa	#(@LR__0836-@LR__0835)>>2,fcache_load_ptr_
09de4                 | LR__0835
09de4     16 FB C9 FA | 	rdbyte	result1, local08 wz
09de8     01 2C 06 51 |  if_ne	add	local08, #1
09dec     F4 FF 9F 5D |  if_ne	jmp	#LR__0835
09df0                 | LR__0836
09df0     09 2D 82 F1 | 	sub	local08, arg01
09df4     16 FB 01 F6 | 	mov	result1, local08
09df8     5A 00 00 FF 
09dfc     14 E4 05 F1 | 	add	objptr, ##46100
09e00     F2 FA 61 FC | 	wrlong	result1, objptr
09e04     5C E4 85 F1 | 	sub	objptr, #92
09e08     F2 12 02 FB | 	rdlong	arg01, objptr
09e0c     FD 12 82 F1 | 	sub	arg01, result1
09e10     04 12 86 F1 | 	sub	arg01, #4
09e14     03 12 26 F5 | 	andn	arg01, #3
09e18     F2 12 62 FC | 	wrlong	arg01, objptr
09e1c     5C E4 05 F1 | 	add	objptr, #92
09e20     F2 14 02 FB | 	rdlong	arg02, objptr
09e24     5A 00 00 FF 
09e28     14 E4 85 F1 | 	sub	objptr, ##46100
09e2c     A0 09 B1 FD | 	call	#_pslpoke
09e30                 | '     pslpoke memtop,l
09e30                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
09e30     01 30 06 F6 | 	mov	local10, #1
09e34     5A 00 00 FF 
09e38     14 E4 05 F1 | 	add	objptr, ##46100
09e3c     F2 32 02 FB | 	rdlong	local11, objptr
09e40     5A 00 00 FF 
09e44     14 E4 85 F1 | 	sub	objptr, ##46100
09e48     01 32 06 F1 | 	add	local11, #1
09e4c                 | LR__0837
09e4c     19 31 52 F2 | 	cmps	local10, local11 wc
09e50     5C 00 90 3D |  if_ae	jmp	#LR__0838
09e54     59 00 00 FF 
09e58     B8 E5 05 F1 | 	add	objptr, ##46008
09e5c     F2 2A 02 FB | 	rdlong	local07, objptr
09e60     03 2A 06 F1 | 	add	local07, #3
09e64     18 2B 02 F1 | 	add	local07, local10
09e68     22 00 00 FF 
09e6c     44 E5 85 F1 | 	sub	objptr, ##17732
09e70     F2 2E 02 FB | 	rdlong	local09, objptr
09e74     03 2E 66 F0 | 	shl	local09, #3
09e78     02 00 00 FF 
09e7c     38 E4 85 F1 | 	sub	objptr, ##1080
09e80     F2 2E 02 F1 | 	add	local09, objptr
09e84     17 13 02 FB | 	rdlong	arg01, local09
09e88     18 15 02 F6 | 	mov	arg02, local10
09e8c     01 16 06 F6 | 	mov	arg03, #1
09e90     35 00 00 FF 
09e94     3C E4 85 F1 | 	sub	objptr, ##27196
09e98     A0 6D B1 FD | 	call	#__system__Mid_S
09e9c     FD 14 C2 FA | 	rdbyte	arg02, result1
09ea0     15 13 02 F6 | 	mov	arg01, local07
09ea4     B8 09 B1 FD | 	call	#_pspoke
09ea8     01 30 06 F1 | 	add	local10, #1
09eac     9C FF 9F FD | 	jmp	#LR__0837
09eb0                 | LR__0838
09eb0     59 00 00 FF 
09eb4     B8 E5 05 F1 | 	add	objptr, ##46008
09eb8     F2 1E 02 FB | 	rdlong	local01, objptr
09ebc     2B 22 06 F6 | 	mov	local03, #43
09ec0     0F 29 02 F6 | 	mov	local06, local01
09ec4     10 2B 02 F6 | 	mov	local07, local02
09ec8     11 33 02 F6 | 	mov	local11, local03
09ecc     0F 00 00 FF 
09ed0     0C E5 85 F1 | 	sub	objptr, ##7948
09ed4     F2 30 02 FB | 	rdlong	local10, objptr
09ed8     18 2F 02 F6 | 	mov	local09, local10
09edc     01 2E 66 F0 | 	shl	local09, #1
09ee0     18 2F 02 F1 | 	add	local09, local10
09ee4     02 2E 66 F0 | 	shl	local09, #2
09ee8     03 00 00 FF 
09eec     00 E4 85 F1 | 	sub	objptr, ##1536
09ef0     F2 2E 02 F1 | 	add	local09, objptr
09ef4     17 29 62 FC | 	wrlong	local06, local09
09ef8     03 00 00 FF 
09efc     00 E4 05 F1 | 	add	objptr, ##1536
09f00     F2 30 02 FB | 	rdlong	local10, objptr
09f04     18 2F 02 F6 | 	mov	local09, local10
09f08     01 2E 66 F0 | 	shl	local09, #1
09f0c     18 2F 02 F1 | 	add	local09, local10
09f10     02 2E 66 F0 | 	shl	local09, #2
09f14     03 00 00 FF 
09f18     00 E4 85 F1 | 	sub	objptr, ##1536
09f1c     F2 2E 02 F1 | 	add	local09, objptr
09f20     04 2E 06 F1 | 	add	local09, #4
09f24     17 2B 62 FC | 	wrlong	local07, local09
09f28     03 00 00 FF 
09f2c     00 E4 05 F1 | 	add	objptr, ##1536
09f30     F2 30 02 FB | 	rdlong	local10, objptr
09f34     18 2F 02 F6 | 	mov	local09, local10
09f38     01 2E 66 F0 | 	shl	local09, #1
09f3c     18 2F 02 F1 | 	add	local09, local10
09f40     02 2E 66 F0 | 	shl	local09, #2
09f44     03 00 00 FF 
09f48     00 E4 85 F1 | 	sub	objptr, ##1536
09f4c     F2 2E 02 F1 | 	add	local09, objptr
09f50     08 2E 06 F1 | 	add	local09, #8
09f54     17 33 62 FC | 	wrlong	local11, local09
09f58     03 00 00 FF 
09f5c     00 E4 05 F1 | 	add	objptr, ##1536
09f60     F2 28 02 FB | 	rdlong	local06, objptr
09f64     01 28 06 F1 | 	add	local06, #1
09f68     F2 28 62 FC | 	wrlong	local06, objptr
09f6c     13 00 00 FF 
09f70     38 E4 85 F1 | 	sub	objptr, ##9784
09f74     F2 28 02 FB | 	rdlong	local06, objptr
09f78     01 28 06 F1 | 	add	local06, #1
09f7c     F2 28 62 FC | 	wrlong	local06, objptr
09f80     37 00 00 FF 
09f84     74 E4 85 F1 | 	sub	objptr, ##28276
09f88     C0 00 90 FD | 	jmp	#LR__0842
09f8c                 | LR__0839
09f8c     12 13 02 F6 | 	mov	arg01, local04
09f90     B8 03 B0 FD | 	call	#_getvar
09f94     37 00 00 FF 
09f98     74 E4 05 F1 | 	add	objptr, ##28276
09f9c     F2 28 02 FB | 	rdlong	local06, objptr
09fa0     01 28 06 F1 | 	add	local06, #1
09fa4     F2 28 62 FC | 	wrlong	local06, objptr
09fa8     37 00 00 FF 
09fac     74 E4 85 F1 | 	sub	objptr, ##28276
09fb0     98 00 90 FD | 	jmp	#LR__0842
09fb4                 | LR__0840
09fb4     37 00 00 FF 
09fb8     74 E4 05 F1 | 	add	objptr, ##28276
09fbc     F2 28 02 FB | 	rdlong	local06, objptr
09fc0     01 28 06 F1 | 	add	local06, #1
09fc4     F2 28 62 FC | 	wrlong	local06, objptr
09fc8     37 00 00 FF 
09fcc     74 E4 85 F1 | 	sub	objptr, ##28276
09fd0     64 F2 BF FD | 	call	#_expr
09fd4                 | '     ct+=1
09fd4                 | '     expr() 
09fd4                 | '     if lparts(ct).token=token_rpar then ct+=1
09fd4     37 00 00 FF 
09fd8     74 E4 05 F1 | 	add	objptr, ##28276
09fdc     F2 32 02 FB | 	rdlong	local11, objptr
09fe0     03 32 66 F0 | 	shl	local11, #3
09fe4     02 00 00 FF 
09fe8     38 E4 85 F1 | 	sub	objptr, ##1080
09fec     F2 32 02 F1 | 	add	local11, objptr
09ff0     04 32 06 F1 | 	add	local11, #4
09ff4     19 33 02 FB | 	rdlong	local11, local11
09ff8     14 32 0E F2 | 	cmp	local11, #20 wz
09ffc     35 00 00 FF 
0a000     3C E4 85 F1 | 	sub	objptr, ##27196
0a004     44 00 90 5D |  if_ne	jmp	#LR__0842
0a008     37 00 00 FF 
0a00c     74 E4 05 F1 | 	add	objptr, ##28276
0a010     F2 28 02 FB | 	rdlong	local06, objptr
0a014     01 28 06 F1 | 	add	local06, #1
0a018     F2 28 62 FC | 	wrlong	local06, objptr
0a01c     37 00 00 FF 
0a020     74 E4 85 F1 | 	sub	objptr, ##28276
0a024     24 00 90 FD | 	jmp	#LR__0842
0a028                 | LR__0841
0a028     12 13 02 F6 | 	mov	arg01, local04
0a02c     28 00 B0 FD | 	call	#_getfun
0a030     37 00 00 FF 
0a034     74 E4 05 F1 | 	add	objptr, ##28276
0a038     F2 28 02 FB | 	rdlong	local06, objptr
0a03c     01 28 06 F1 | 	add	local06, #1
0a040     F2 28 62 FC | 	wrlong	local06, objptr
0a044     37 00 00 FF 
0a048     74 E4 85 F1 | 	sub	objptr, ##28276
0a04c                 | LR__0842
0a04c     A7 F0 03 F6 | 	mov	ptra, fp
0a050     B2 00 A0 FD | 	call	#popregs_
0a054                 | _getvalue_ret
0a054     2D 00 64 FD | 	ret
0a058                 | 
0a058                 | ' 
0a058                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
0a058                 | _getfun
0a058     0A 4A 05 F6 | 	mov	COUNT_, #10
0a05c     A8 00 A0 FD | 	call	#pushregs_
0a060                 | _getfun_enter
0a060     09 25 02 F6 | 	mov	local04, arg01
0a064     37 00 00 FF 
0a068     74 E4 05 F1 | 	add	objptr, ##28276
0a06c     F2 26 02 FB | 	rdlong	local05, objptr
0a070     13 29 02 F6 | 	mov	local06, local05
0a074     00 2A 06 F6 | 	mov	local07, #0
0a078                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
0a078                 | ' oldct=ct
0a078                 | ' numpar=0
0a078                 | '   
0a078                 | ' if lparts(ct+1).token=token_lpar then
0a078     01 26 06 F1 | 	add	local05, #1
0a07c     03 26 66 F0 | 	shl	local05, #3
0a080     02 00 00 FF 
0a084     38 E4 85 F1 | 	sub	objptr, ##1080
0a088     F2 26 02 F1 | 	add	local05, objptr
0a08c     04 26 06 F1 | 	add	local05, #4
0a090     13 27 02 FB | 	rdlong	local05, local05
0a094     15 26 0E F2 | 	cmp	local05, #21 wz
0a098     35 00 00 FF 
0a09c     3C E4 85 F1 | 	sub	objptr, ##27196
0a0a0     08 01 90 5D |  if_ne	jmp	#LR__0854
0a0a4     37 00 00 FF 
0a0a8     74 E4 05 F1 | 	add	objptr, ##28276
0a0ac     F2 2C 02 FB | 	rdlong	local08, objptr
0a0b0     01 2C 06 F1 | 	add	local08, #1
0a0b4     F2 2C 62 FC | 	wrlong	local08, objptr
0a0b8     37 00 00 FF 
0a0bc     74 E4 85 F1 | 	sub	objptr, ##28276
0a0c0                 | '   ct+=1 											' omit this lpar, this is for expr list
0a0c0                 | '   do
0a0c0                 | LR__0850
0a0c0     37 00 00 FF 
0a0c4     74 E4 05 F1 | 	add	objptr, ##28276
0a0c8     F2 26 02 FB | 	rdlong	local05, objptr
0a0cc     01 26 06 F1 | 	add	local05, #1
0a0d0     F2 26 62 FC | 	wrlong	local05, objptr
0a0d4                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0a0d4                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0a0d4     03 26 66 F0 | 	shl	local05, #3
0a0d8     02 00 00 FF 
0a0dc     38 E4 85 F1 | 	sub	objptr, ##1080
0a0e0     F2 26 02 F1 | 	add	local05, objptr
0a0e4     04 26 06 F1 | 	add	local05, #4
0a0e8     13 2D 02 FB | 	rdlong	local08, local05
0a0ec     15 2C 0E F2 | 	cmp	local08, #21 wz
0a0f0     35 00 00 FF 
0a0f4     3C E4 85 F1 | 	sub	objptr, ##27196
0a0f8     40 00 90 5D |  if_ne	jmp	#LR__0851
0a0fc     37 00 00 FF 
0a100     74 E4 05 F1 | 	add	objptr, ##28276
0a104     F2 2C 02 FB | 	rdlong	local08, objptr
0a108     01 2C 06 F1 | 	add	local08, #1
0a10c     F2 2C 62 FC | 	wrlong	local08, objptr
0a110     37 00 00 FF 
0a114     74 E4 85 F1 | 	sub	objptr, ##28276
0a118     1C F1 BF FD | 	call	#_expr
0a11c     37 00 00 FF 
0a120     74 E4 05 F1 | 	add	objptr, ##28276
0a124     F2 2C 02 FB | 	rdlong	local08, objptr
0a128     01 2C 06 F1 | 	add	local08, #1
0a12c     F2 2C 62 FC | 	wrlong	local08, objptr
0a130     37 00 00 FF 
0a134     74 E4 85 F1 | 	sub	objptr, ##28276
0a138     04 00 90 FD | 	jmp	#LR__0852
0a13c                 | LR__0851
0a13c     F8 F0 BF FD | 	call	#_expr
0a140                 | LR__0852
0a140     01 2A 06 F1 | 	add	local07, #1
0a144     37 00 00 FF 
0a148     74 E4 05 F1 | 	add	objptr, ##28276
0a14c     F2 26 02 FB | 	rdlong	local05, objptr
0a150     03 26 66 F0 | 	shl	local05, #3
0a154     02 00 00 FF 
0a158     38 E4 85 F1 | 	sub	objptr, ##1080
0a15c     F2 26 02 F1 | 	add	local05, objptr
0a160     04 26 06 F1 | 	add	local05, #4
0a164     13 2D 02 FB | 	rdlong	local08, local05
0a168     14 2C 0E F2 | 	cmp	local08, #20 wz
0a16c     35 00 00 FF 
0a170     3C E4 85 F1 | 	sub	objptr, ##27196
0a174     34 00 90 AD |  if_e	jmp	#LR__0853
0a178     37 00 00 FF 
0a17c     74 E4 05 F1 | 	add	objptr, ##28276
0a180     F2 2C 02 FB | 	rdlong	local08, objptr
0a184     03 2C 66 F0 | 	shl	local08, #3
0a188     02 00 00 FF 
0a18c     38 E4 85 F1 | 	sub	objptr, ##1080
0a190     F2 2C 02 F1 | 	add	local08, objptr
0a194     04 2C 06 F1 | 	add	local08, #4
0a198     16 2D 02 FB | 	rdlong	local08, local08
0a19c     FE 2D 0E F2 | 	cmp	local08, #510 wz
0a1a0     35 00 00 FF 
0a1a4     3C E4 85 F1 | 	sub	objptr, ##27196
0a1a8     14 FF 9F 5D |  if_ne	jmp	#LR__0850
0a1ac                 | LR__0853
0a1ac                 | LR__0854
0a1ac     15 1F 02 F6 | 	mov	local01, local07
0a1b0     03 28 66 F0 | 	shl	local06, #3
0a1b4     35 00 00 FF 
0a1b8     3C E4 05 F1 | 	add	objptr, ##27196
0a1bc     F2 28 02 F1 | 	add	local06, objptr
0a1c0     04 28 06 F1 | 	add	local06, #4
0a1c4     14 23 02 FB | 	rdlong	local03, local06
0a1c8     0F 2D 02 F6 | 	mov	local08, local01
0a1cc     10 2B 02 F6 | 	mov	local07, local02
0a1d0     11 29 02 F6 | 	mov	local06, local03
0a1d4     15 00 00 FF 
0a1d8     70 E4 05 F1 | 	add	objptr, ##10864
0a1dc     F2 26 02 FB | 	rdlong	local05, objptr
0a1e0     13 13 02 F6 | 	mov	arg01, local05
0a1e4     01 12 66 F0 | 	shl	arg01, #1
0a1e8     13 13 02 F1 | 	add	arg01, local05
0a1ec     02 12 66 F0 | 	shl	arg01, #2
0a1f0     03 00 00 FF 
0a1f4     00 E4 85 F1 | 	sub	objptr, ##1536
0a1f8     F2 12 02 F1 | 	add	arg01, objptr
0a1fc     09 2D 62 FC | 	wrlong	local08, arg01
0a200     03 00 00 FF 
0a204     00 E4 05 F1 | 	add	objptr, ##1536
0a208     F2 2C 02 FB | 	rdlong	local08, objptr
0a20c     16 2F 02 F6 | 	mov	local09, local08
0a210     01 2E 66 F0 | 	shl	local09, #1
0a214     16 2F 02 F1 | 	add	local09, local08
0a218     02 2E 66 F0 | 	shl	local09, #2
0a21c     03 00 00 FF 
0a220     00 E4 85 F1 | 	sub	objptr, ##1536
0a224     F2 2E 02 F1 | 	add	local09, objptr
0a228     04 2E 06 F1 | 	add	local09, #4
0a22c     17 2B 62 FC | 	wrlong	local07, local09
0a230     03 00 00 FF 
0a234     00 E4 05 F1 | 	add	objptr, ##1536
0a238     F2 2C 02 FB | 	rdlong	local08, objptr
0a23c     16 31 02 F6 | 	mov	local10, local08
0a240     01 30 66 F0 | 	shl	local10, #1
0a244     16 31 02 F1 | 	add	local10, local08
0a248     02 30 66 F0 | 	shl	local10, #2
0a24c     03 00 00 FF 
0a250     00 E4 85 F1 | 	sub	objptr, ##1536
0a254     F2 30 02 F1 | 	add	local10, objptr
0a258     08 30 06 F1 | 	add	local10, #8
0a25c     18 29 62 FC | 	wrlong	local06, local10
0a260     03 00 00 FF 
0a264     00 E4 05 F1 | 	add	objptr, ##1536
0a268     F2 2C 02 FB | 	rdlong	local08, objptr
0a26c     01 2C 06 F1 | 	add	local08, #1
0a270     F2 2C 62 FC | 	wrlong	local08, objptr
0a274     4A 00 00 FF 
0a278     AC E4 85 F1 | 	sub	objptr, ##38060
0a27c                 | ' 
0a27c                 | ' t2.result.uresult=numpar
0a27c                 | ' 
0a27c                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0a27c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0a27c                 | ' 
0a27c                 | '   
0a27c                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0a27c     FF FF 7F FF 
0a280     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a284     B8 00 90 5D |  if_ne	jmp	#LR__0855
0a288     15 22 06 F6 | 	mov	local03, #21
0a28c     0F 2D 02 F6 | 	mov	local08, local01
0a290     10 2B 02 F6 | 	mov	local07, local02
0a294     11 29 02 F6 | 	mov	local06, local03
0a298     4A 00 00 FF 
0a29c     AC E4 05 F1 | 	add	objptr, ##38060
0a2a0     F2 26 02 FB | 	rdlong	local05, objptr
0a2a4     13 13 02 F6 | 	mov	arg01, local05
0a2a8     01 12 66 F0 | 	shl	arg01, #1
0a2ac     13 13 02 F1 | 	add	arg01, local05
0a2b0     02 12 66 F0 | 	shl	arg01, #2
0a2b4     03 00 00 FF 
0a2b8     00 E4 85 F1 | 	sub	objptr, ##1536
0a2bc     F2 12 02 F1 | 	add	arg01, objptr
0a2c0     09 2D 62 FC | 	wrlong	local08, arg01
0a2c4     03 00 00 FF 
0a2c8     00 E4 05 F1 | 	add	objptr, ##1536
0a2cc     F2 30 02 FB | 	rdlong	local10, objptr
0a2d0     18 2F 02 F6 | 	mov	local09, local10
0a2d4     01 2E 66 F0 | 	shl	local09, #1
0a2d8     18 2F 02 F1 | 	add	local09, local10
0a2dc     02 2E 66 F0 | 	shl	local09, #2
0a2e0     03 00 00 FF 
0a2e4     00 E4 85 F1 | 	sub	objptr, ##1536
0a2e8     F2 2E 02 F1 | 	add	local09, objptr
0a2ec     04 2E 06 F1 | 	add	local09, #4
0a2f0     17 2B 62 FC | 	wrlong	local07, local09
0a2f4     03 00 00 FF 
0a2f8     00 E4 05 F1 | 	add	objptr, ##1536
0a2fc     F2 2E 02 FB | 	rdlong	local09, objptr
0a300     17 31 02 F6 | 	mov	local10, local09
0a304     01 30 66 F0 | 	shl	local10, #1
0a308     17 31 02 F1 | 	add	local10, local09
0a30c     02 30 66 F0 | 	shl	local10, #2
0a310     03 00 00 FF 
0a314     00 E4 85 F1 | 	sub	objptr, ##1536
0a318     F2 30 02 F1 | 	add	local10, objptr
0a31c     08 30 06 F1 | 	add	local10, #8
0a320     18 29 62 FC | 	wrlong	local06, local10
0a324     03 00 00 FF 
0a328     00 E4 05 F1 | 	add	objptr, ##1536
0a32c     F2 2C 02 FB | 	rdlong	local08, objptr
0a330     01 2C 06 F1 | 	add	local08, #1
0a334     F2 2C 62 FC | 	wrlong	local08, objptr
0a338     4A 00 00 FF 
0a33c     AC E4 85 F1 | 	sub	objptr, ##38060
0a340                 | LR__0855
0a340     A7 F0 03 F6 | 	mov	ptra, fp
0a344     B2 00 A0 FD | 	call	#popregs_
0a348                 | _getfun_ret
0a348     2D 00 64 FD | 	ret
0a34c                 | 
0a34c                 | '   
0a34c                 | '   
0a34c                 | ' sub getvar(m as integer) 
0a34c                 | _getvar
0a34c     0A 4A 05 F6 | 	mov	COUNT_, #10
0a350     A8 00 A0 FD | 	call	#pushregs_
0a354                 | _getvar_enter
0a354     09 25 02 F6 | 	mov	local04, arg01
0a358     37 00 00 FF 
0a35c     74 E4 05 F1 | 	add	objptr, ##28276
0a360     F2 14 02 FB | 	rdlong	arg02, objptr
0a364     03 14 66 F0 | 	shl	arg02, #3
0a368     02 00 00 FF 
0a36c     38 E4 85 F1 | 	sub	objptr, ##1080
0a370     F2 14 02 F1 | 	add	arg02, objptr
0a374     0A 27 02 FB | 	rdlong	local05, arg02
0a378     13 13 02 F6 | 	mov	arg01, local05
0a37c     01 14 06 F6 | 	mov	arg02, #1
0a380     35 00 00 FF 
0a384     3C E4 85 F1 | 	sub	objptr, ##27196
0a388     20 68 B1 FD | 	call	#__system__Right_S
0a38c     FD 28 02 F6 | 	mov	local06, result1
0a390     01 2A 66 F6 | 	neg	local07, #1
0a394                 | ' 
0a394                 | ' varname$=lparts(ct).part$
0a394                 | ' suffix$=right$(varname$,1)
0a394                 | ' j=-1
0a394                 | ' 
0a394                 | ' for i=0 to varnum-1
0a394     00 2C 06 F6 | 	mov	local08, #0
0a398     35 00 00 FF 
0a39c     38 E4 05 F1 | 	add	objptr, ##27192
0a3a0     F2 2E 02 FB | 	rdlong	local09, objptr
0a3a4     35 00 00 FF 
0a3a8     38 E4 85 F1 | 	sub	objptr, ##27192
0a3ac                 | LR__0860
0a3ac     17 2D 52 F2 | 	cmps	local08, local09 wc
0a3b0     38 00 90 3D |  if_ae	jmp	#LR__0861
0a3b4                 | '   if variables(i).name=varname$ then j=i : exit
0a3b4     16 15 02 F6 | 	mov	arg02, local08
0a3b8     04 14 66 F0 | 	shl	arg02, #4
0a3bc     15 00 00 FF 
0a3c0     28 E4 05 F1 | 	add	objptr, ##10792
0a3c4     F2 14 02 F1 | 	add	arg02, objptr
0a3c8     0A 13 02 FB | 	rdlong	arg01, arg02
0a3cc     13 15 02 F6 | 	mov	arg02, local05
0a3d0     15 00 00 FF 
0a3d4     28 E4 85 F1 | 	sub	objptr, ##10792
0a3d8     60 47 B1 FD | 	call	#__system___string_cmp
0a3dc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a3e0     16 2B 02 A6 |  if_e	mov	local07, local08
0a3e4     01 2C 06 51 |  if_ne	add	local08, #1
0a3e8     C0 FF 9F 5D |  if_ne	jmp	#LR__0860
0a3ec                 | LR__0861
0a3ec                 | ' if  j=-1 andalso varnum<maxvars then   
0a3ec     FF FF 7F FF 
0a3f0     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
0a3f4     A8 00 90 5D |  if_ne	jmp	#LR__0862
0a3f8     35 00 00 FF 
0a3fc     38 E4 05 F1 | 	add	objptr, ##27192
0a400     F2 2E 02 FB | 	rdlong	local09, objptr
0a404     35 00 00 FF 
0a408     38 E4 85 F1 | 	sub	objptr, ##27192
0a40c     02 00 00 FF 
0a410     00 2E 56 F2 | 	cmps	local09, ##1024 wc
0a414     88 00 90 3D |  if_ae	jmp	#LR__0862
0a418     35 00 00 FF 
0a41c     38 E4 05 F1 | 	add	objptr, ##27192
0a420     F2 2E 02 FB | 	rdlong	local09, objptr
0a424     04 2E 66 F0 | 	shl	local09, #4
0a428     20 00 00 FF 
0a42c     10 E4 85 F1 | 	sub	objptr, ##16400
0a430     F2 2E 02 F1 | 	add	local09, objptr
0a434     17 27 62 FC | 	wrlong	local05, local09
0a438     20 00 00 FF 
0a43c     10 E4 05 F1 | 	add	objptr, ##16400
0a440     F2 2E 02 FB | 	rdlong	local09, objptr
0a444     04 2E 66 F0 | 	shl	local09, #4
0a448     20 00 00 FF 
0a44c     10 E4 85 F1 | 	sub	objptr, ##16400
0a450     F2 2E 02 F1 | 	add	local09, objptr
0a454     04 2E 06 F1 | 	add	local09, #4
0a458     17 01 68 FC | 	wrlong	#0, local09
0a45c     20 00 00 FF 
0a460     10 E4 05 F1 | 	add	objptr, ##16400
0a464     F2 2E 02 FB | 	rdlong	local09, objptr
0a468     04 2E 66 F0 | 	shl	local09, #4
0a46c     20 00 00 FF 
0a470     10 E4 85 F1 | 	sub	objptr, ##16400
0a474     F2 2E 02 F1 | 	add	local09, objptr
0a478     0C 2E 06 F1 | 	add	local09, #12
0a47c     17 39 68 FC | 	wrlong	#28, local09
0a480     20 00 00 FF 
0a484     10 E4 05 F1 | 	add	objptr, ##16400
0a488     F2 2E 02 FB | 	rdlong	local09, objptr
0a48c     17 2B 02 F6 | 	mov	local07, local09
0a490     01 2E 06 F1 | 	add	local09, #1
0a494     F2 2E 62 FC | 	wrlong	local09, objptr
0a498     35 00 00 FF 
0a49c     38 E4 85 F1 | 	sub	objptr, ##27192
0a4a0                 | LR__0862
0a4a0     00 2E 06 F6 | 	mov	local09, #0
0a4a4                 | ' numpar=0
0a4a4                 | ' ' check if it is an array
0a4a4                 | ' 
0a4a4                 | ' if lparts(ct+1).token=token_lpar then
0a4a4     37 00 00 FF 
0a4a8     74 E4 05 F1 | 	add	objptr, ##28276
0a4ac     F2 2C 02 FB | 	rdlong	local08, objptr
0a4b0     01 2C 06 F1 | 	add	local08, #1
0a4b4     03 2C 66 F0 | 	shl	local08, #3
0a4b8     02 00 00 FF 
0a4bc     38 E4 85 F1 | 	sub	objptr, ##1080
0a4c0     F2 2C 02 F1 | 	add	local08, objptr
0a4c4     04 2C 06 F1 | 	add	local08, #4
0a4c8     16 2D 02 FB | 	rdlong	local08, local08
0a4cc     15 2C 0E F2 | 	cmp	local08, #21 wz
0a4d0     35 00 00 FF 
0a4d4     3C E4 85 F1 | 	sub	objptr, ##27196
0a4d8     08 01 90 5D |  if_ne	jmp	#LR__0867
0a4dc     37 00 00 FF 
0a4e0     74 E4 05 F1 | 	add	objptr, ##28276
0a4e4     F2 30 02 FB | 	rdlong	local10, objptr
0a4e8     01 30 06 F1 | 	add	local10, #1
0a4ec     F2 30 62 FC | 	wrlong	local10, objptr
0a4f0     37 00 00 FF 
0a4f4     74 E4 85 F1 | 	sub	objptr, ##28276
0a4f8                 | '   ct+=1 											' omit this lpar, this is for expr list
0a4f8                 | '   do
0a4f8                 | LR__0863
0a4f8     37 00 00 FF 
0a4fc     74 E4 05 F1 | 	add	objptr, ##28276
0a500     F2 2C 02 FB | 	rdlong	local08, objptr
0a504     01 2C 06 F1 | 	add	local08, #1
0a508     F2 2C 62 FC | 	wrlong	local08, objptr
0a50c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0a50c                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0a50c     03 2C 66 F0 | 	shl	local08, #3
0a510     02 00 00 FF 
0a514     38 E4 85 F1 | 	sub	objptr, ##1080
0a518     F2 2C 02 F1 | 	add	local08, objptr
0a51c     04 2C 06 F1 | 	add	local08, #4
0a520     16 31 02 FB | 	rdlong	local10, local08
0a524     15 30 0E F2 | 	cmp	local10, #21 wz
0a528     35 00 00 FF 
0a52c     3C E4 85 F1 | 	sub	objptr, ##27196
0a530     40 00 90 5D |  if_ne	jmp	#LR__0864
0a534     37 00 00 FF 
0a538     74 E4 05 F1 | 	add	objptr, ##28276
0a53c     F2 30 02 FB | 	rdlong	local10, objptr
0a540     01 30 06 F1 | 	add	local10, #1
0a544     F2 30 62 FC | 	wrlong	local10, objptr
0a548     37 00 00 FF 
0a54c     74 E4 85 F1 | 	sub	objptr, ##28276
0a550     E4 EC BF FD | 	call	#_expr
0a554     37 00 00 FF 
0a558     74 E4 05 F1 | 	add	objptr, ##28276
0a55c     F2 30 02 FB | 	rdlong	local10, objptr
0a560     01 30 06 F1 | 	add	local10, #1
0a564     F2 30 62 FC | 	wrlong	local10, objptr
0a568     37 00 00 FF 
0a56c     74 E4 85 F1 | 	sub	objptr, ##28276
0a570     04 00 90 FD | 	jmp	#LR__0865
0a574                 | LR__0864
0a574     C0 EC BF FD | 	call	#_expr
0a578                 | LR__0865
0a578     01 2E 06 F1 | 	add	local09, #1
0a57c     37 00 00 FF 
0a580     74 E4 05 F1 | 	add	objptr, ##28276
0a584     F2 2C 02 FB | 	rdlong	local08, objptr
0a588     03 2C 66 F0 | 	shl	local08, #3
0a58c     02 00 00 FF 
0a590     38 E4 85 F1 | 	sub	objptr, ##1080
0a594     F2 2C 02 F1 | 	add	local08, objptr
0a598     04 2C 06 F1 | 	add	local08, #4
0a59c     16 31 02 FB | 	rdlong	local10, local08
0a5a0     14 30 0E F2 | 	cmp	local10, #20 wz
0a5a4     35 00 00 FF 
0a5a8     3C E4 85 F1 | 	sub	objptr, ##27196
0a5ac     34 00 90 AD |  if_e	jmp	#LR__0866
0a5b0     37 00 00 FF 
0a5b4     74 E4 05 F1 | 	add	objptr, ##28276
0a5b8     F2 30 02 FB | 	rdlong	local10, objptr
0a5bc     03 30 66 F0 | 	shl	local10, #3
0a5c0     02 00 00 FF 
0a5c4     38 E4 85 F1 | 	sub	objptr, ##1080
0a5c8     F2 30 02 F1 | 	add	local10, objptr
0a5cc     04 30 06 F1 | 	add	local10, #4
0a5d0     18 31 02 FB | 	rdlong	local10, local10
0a5d4     FE 31 0E F2 | 	cmp	local10, #510 wz
0a5d8     35 00 00 FF 
0a5dc     3C E4 85 F1 | 	sub	objptr, ##27196
0a5e0     14 FF 9F 5D |  if_ne	jmp	#LR__0863
0a5e4                 | LR__0866
0a5e4                 | LR__0867
0a5e4     17 21 02 F6 | 	mov	local02, local09
0a5e8     11 22 06 F6 | 	mov	local03, #17
0a5ec     15 1F 02 F6 | 	mov	local01, local07
0a5f0     0F 31 02 F6 | 	mov	local10, local01
0a5f4     10 2F 02 F6 | 	mov	local09, local02
0a5f8     11 2D 02 F6 | 	mov	local08, local03
0a5fc     4A 00 00 FF 
0a600     AC E4 05 F1 | 	add	objptr, ##38060
0a604     F2 2A 02 FB | 	rdlong	local07, objptr
0a608     15 29 02 F6 | 	mov	local06, local07
0a60c     01 28 66 F0 | 	shl	local06, #1
0a610     15 29 02 F1 | 	add	local06, local07
0a614     02 28 66 F0 | 	shl	local06, #2
0a618     03 00 00 FF 
0a61c     00 E4 85 F1 | 	sub	objptr, ##1536
0a620     F2 28 02 F1 | 	add	local06, objptr
0a624     14 31 62 FC | 	wrlong	local10, local06
0a628     03 00 00 FF 
0a62c     00 E4 05 F1 | 	add	objptr, ##1536
0a630     F2 30 02 FB | 	rdlong	local10, objptr
0a634     18 27 02 F6 | 	mov	local05, local10
0a638     01 26 66 F0 | 	shl	local05, #1
0a63c     18 27 02 F1 | 	add	local05, local10
0a640     02 26 66 F0 | 	shl	local05, #2
0a644     03 00 00 FF 
0a648     00 E4 85 F1 | 	sub	objptr, ##1536
0a64c     F2 26 02 F1 | 	add	local05, objptr
0a650     04 26 06 F1 | 	add	local05, #4
0a654     13 2F 62 FC | 	wrlong	local09, local05
0a658     03 00 00 FF 
0a65c     00 E4 05 F1 | 	add	objptr, ##1536
0a660     F2 30 02 FB | 	rdlong	local10, objptr
0a664     18 FB 01 F6 | 	mov	result1, local10
0a668     01 FA 65 F0 | 	shl	result1, #1
0a66c     18 FB 01 F1 | 	add	result1, local10
0a670     02 FA 65 F0 | 	shl	result1, #2
0a674     03 00 00 FF 
0a678     00 E4 85 F1 | 	sub	objptr, ##1536
0a67c     F2 FA 01 F1 | 	add	result1, objptr
0a680     08 FA 05 F1 | 	add	result1, #8
0a684     FD 2C 62 FC | 	wrlong	local08, result1
0a688     03 00 00 FF 
0a68c     00 E4 05 F1 | 	add	objptr, ##1536
0a690     F2 30 02 FB | 	rdlong	local10, objptr
0a694     01 30 06 F1 | 	add	local10, #1
0a698     F2 30 62 FC | 	wrlong	local10, objptr
0a69c     4A 00 00 FF 
0a6a0     AC E4 85 F1 | 	sub	objptr, ##38060
0a6a4                 | ' 
0a6a4                 | ' t2.result.twowords(1)=numpar
0a6a4                 | ' 
0a6a4                 | ' 
0a6a4                 | ' 
0a6a4                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0a6a4                 | ' 
0a6a4                 | ' 
0a6a4                 | '  
0a6a4                 | ' 
0a6a4                 | ' 701 
0a6a4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0a6a4                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0a6a4     FF FF 7F FF 
0a6a8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a6ac     B8 00 90 5D |  if_ne	jmp	#LR__0868
0a6b0     15 22 06 F6 | 	mov	local03, #21
0a6b4     0F 31 02 F6 | 	mov	local10, local01
0a6b8     10 2F 02 F6 | 	mov	local09, local02
0a6bc     11 2D 02 F6 | 	mov	local08, local03
0a6c0     4A 00 00 FF 
0a6c4     AC E4 05 F1 | 	add	objptr, ##38060
0a6c8     F2 2A 02 FB | 	rdlong	local07, objptr
0a6cc     15 29 02 F6 | 	mov	local06, local07
0a6d0     01 28 66 F0 | 	shl	local06, #1
0a6d4     15 29 02 F1 | 	add	local06, local07
0a6d8     02 28 66 F0 | 	shl	local06, #2
0a6dc     03 00 00 FF 
0a6e0     00 E4 85 F1 | 	sub	objptr, ##1536
0a6e4     F2 28 02 F1 | 	add	local06, objptr
0a6e8     14 31 62 FC | 	wrlong	local10, local06
0a6ec     03 00 00 FF 
0a6f0     00 E4 05 F1 | 	add	objptr, ##1536
0a6f4     F2 1E 02 FB | 	rdlong	local01, objptr
0a6f8     0F 27 02 F6 | 	mov	local05, local01
0a6fc     01 26 66 F0 | 	shl	local05, #1
0a700     0F 27 02 F1 | 	add	local05, local01
0a704     02 26 66 F0 | 	shl	local05, #2
0a708     03 00 00 FF 
0a70c     00 E4 85 F1 | 	sub	objptr, ##1536
0a710     F2 26 02 F1 | 	add	local05, objptr
0a714     04 26 06 F1 | 	add	local05, #4
0a718     13 2F 62 FC | 	wrlong	local09, local05
0a71c     03 00 00 FF 
0a720     00 E4 05 F1 | 	add	objptr, ##1536
0a724     F2 1E 02 FB | 	rdlong	local01, objptr
0a728     0F FB 01 F6 | 	mov	result1, local01
0a72c     01 FA 65 F0 | 	shl	result1, #1
0a730     0F FB 01 F1 | 	add	result1, local01
0a734     02 FA 65 F0 | 	shl	result1, #2
0a738     03 00 00 FF 
0a73c     00 E4 85 F1 | 	sub	objptr, ##1536
0a740     F2 FA 01 F1 | 	add	result1, objptr
0a744     08 FA 05 F1 | 	add	result1, #8
0a748     FD 2C 62 FC | 	wrlong	local08, result1
0a74c     03 00 00 FF 
0a750     00 E4 05 F1 | 	add	objptr, ##1536
0a754     F2 30 02 FB | 	rdlong	local10, objptr
0a758     01 30 06 F1 | 	add	local10, #1
0a75c     F2 30 62 FC | 	wrlong	local10, objptr
0a760     4A 00 00 FF 
0a764     AC E4 85 F1 | 	sub	objptr, ##38060
0a768                 | LR__0868
0a768     A7 F0 03 F6 | 	mov	ptra, fp
0a76c     B2 00 A0 FD | 	call	#popregs_
0a770                 | _getvar_ret
0a770     2D 00 64 FD | 	ret
0a774                 | 
0a774                 | ' 
0a774                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a774                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0a774                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a774                 | ' 
0a774                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a774                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
0a774                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0a774                 | ' 
0a774                 | ' function execute_line (astart=0 as integer) as integer
0a774                 | _execute_line
0a774     04 4A 05 F6 | 	mov	COUNT_, #4
0a778     A8 00 A0 FD | 	call	#pushregs_
0a77c     58 00 00 FF 
0a780     F0 E4 05 F1 | 	add	objptr, ##45296
0a784     F2 00 68 FC | 	wrlong	#0, objptr
0a788                 | ' runptr2=0
0a788                 | ' for lineptr_e=astart to lineptr-1
0a788     0E 00 00 FF 
0a78c     40 E4 85 F1 | 	sub	objptr, ##7232
0a790     F2 12 62 FC | 	wrlong	arg01, objptr
0a794     04 E4 85 F1 | 	sub	objptr, #4
0a798     F2 1E 02 FB | 	rdlong	local01, objptr
0a79c     4A 00 00 FF 
0a7a0     AC E4 85 F1 | 	sub	objptr, ##38060
0a7a4                 | LR__0870
0a7a4     4A 00 00 FF 
0a7a8     B0 E4 05 F1 | 	add	objptr, ##38064
0a7ac     F2 FA 01 FB | 	rdlong	result1, objptr
0a7b0     4A 00 00 FF 
0a7b4     B0 E4 85 F1 | 	sub	objptr, ##38064
0a7b8     0F FB 51 F2 | 	cmps	result1, local01 wc
0a7bc     98 00 90 3D |  if_ae	jmp	#LR__0871
0a7c0     4A 00 00 FF 
0a7c4     B0 E4 05 F1 | 	add	objptr, ##38064
0a7c8     F2 FA 01 FB | 	rdlong	result1, objptr
0a7cc     FD 20 02 F6 | 	mov	local02, result1
0a7d0     01 20 66 F0 | 	shl	local02, #1
0a7d4     FD 20 02 F1 | 	add	local02, result1
0a7d8     02 20 66 F0 | 	shl	local02, #2
0a7dc     03 00 00 FF 
0a7e0     04 E4 85 F1 | 	sub	objptr, ##1540
0a7e4     F2 20 02 F1 | 	add	local02, objptr
0a7e8     08 20 06 F1 | 	add	local02, #8
0a7ec     10 21 02 FB | 	rdlong	local02, local02
0a7f0     10 21 E2 F8 | 	getbyte	local02, local02, #0
0a7f4     02 20 66 F0 | 	shl	local02, #2
0a7f8     04 00 00 FF 
0a7fc     1C E4 85 F1 | 	sub	objptr, ##2076
0a800     F2 20 02 F1 | 	add	local02, objptr
0a804     10 21 02 FB | 	rdlong	local02, local02
0a808     10 23 02 F6 | 	mov	local03, local02
0a80c     13 20 46 F7 | 	zerox	local02, #19
0a810     14 22 46 F0 | 	shr	local03, #20
0a814     02 22 66 F0 | 	shl	local03, #2
0a818     ED 22 02 F1 | 	add	local03, __methods__
0a81c     11 23 02 FB | 	rdlong	local03, local03
0a820     43 00 00 FF 
0a824     90 E4 85 F1 | 	sub	objptr, ##34448
0a828     F2 24 02 F6 | 	mov	local04, objptr
0a82c     10 E5 01 F6 | 	mov	objptr, local02
0a830     2D 22 62 FD | 	call	local03
0a834     12 E5 01 F6 | 	mov	objptr, local04
0a838     4A 00 00 FF 
0a83c     B0 E4 05 F1 | 	add	objptr, ##38064
0a840     F2 24 02 FB | 	rdlong	local04, objptr
0a844     01 24 06 F1 | 	add	local04, #1
0a848     F2 24 62 FC | 	wrlong	local04, objptr
0a84c     4A 00 00 FF 
0a850     B0 E4 85 F1 | 	sub	objptr, ##38064
0a854     4C FF 9F FD | 	jmp	#LR__0870
0a858                 | LR__0871
0a858                 | ' return runptr2
0a858     58 00 00 FF 
0a85c     F0 E4 05 F1 | 	add	objptr, ##45296
0a860     F2 FA 01 FB | 	rdlong	result1, objptr
0a864     58 00 00 FF 
0a868     F0 E4 85 F1 | 	sub	objptr, ##45296
0a86c     A7 F0 03 F6 | 	mov	ptra, fp
0a870     B2 00 A0 FD | 	call	#popregs_
0a874                 | _execute_line_ret
0a874     2D 00 64 FD | 	ret
0a878                 | 
0a878                 | ' 
0a878                 | ' 
0a878                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0a878                 | ' 
0a878                 | ' function pop() as expr_result
0a878                 | _pop
0a878                 | ' 
0a878                 | ' if stackpointer=0 then
0a878     43 00 00 FF 
0a87c     88 E4 05 F1 | 	add	objptr, ##34440
0a880     F2 FA 09 FB | 	rdlong	result1, objptr wz
0a884     43 00 00 FF 
0a888     88 E4 85 F1 | 	sub	objptr, ##34440
0a88c     FF 04 06 A6 |  if_e	mov	_var03, #255
0a890     18 00 06 A6 |  if_e	mov	_var01, #24
0a894     68 00 90 AD |  if_e	jmp	#LR__0880
0a898     43 00 00 FF 
0a89c     88 E4 05 F1 | 	add	objptr, ##34440
0a8a0     F2 FA 01 FB | 	rdlong	result1, objptr
0a8a4     01 FA 85 F1 | 	sub	result1, #1
0a8a8     F2 FA 61 FC | 	wrlong	result1, objptr
0a8ac     FD FE 01 F6 | 	mov	result3, result1
0a8b0     01 FE 65 F0 | 	shl	result3, #1
0a8b4     FD FE 01 F1 | 	add	result3, result1
0a8b8     02 FE 65 F0 | 	shl	result3, #2
0a8bc     0C 00 00 FF 
0a8c0     0C E4 85 F1 | 	sub	objptr, ##6156
0a8c4     F2 FE 01 F1 | 	add	result3, objptr
0a8c8     FF 00 02 FB | 	rdlong	_var01, result3
0a8cc     04 FE 05 F1 | 	add	result3, #4
0a8d0     FF FE 01 FB | 	rdlong	result3, result3
0a8d4     FD FC 01 F6 | 	mov	result2, result1
0a8d8     01 FC 65 F0 | 	shl	result2, #1
0a8dc     FD FC 01 F1 | 	add	result2, result1
0a8e0     02 FC 65 F0 | 	shl	result2, #2
0a8e4     F2 FC 01 F1 | 	add	result2, objptr
0a8e8     08 FC 05 F1 | 	add	result2, #8
0a8ec     FE FA 01 FB | 	rdlong	result1, result2
0a8f0     FF 02 02 F6 | 	mov	_var02, result3
0a8f4     FD 04 02 F6 | 	mov	_var03, result1
0a8f8     37 00 00 FF 
0a8fc     7C E4 85 F1 | 	sub	objptr, ##28284
0a900                 | LR__0880
0a900                 | ' return t1
0a900     01 FD 01 F6 | 	mov	result2, _var02
0a904     02 FF 01 F6 | 	mov	result3, _var03
0a908     00 FB 01 F6 | 	mov	result1, _var01
0a90c                 | _pop_ret
0a90c     2D 00 64 FD | 	ret
0a910                 | 
0a910                 | ' 
0a910                 | ' sub push(t1 as expr_result )
0a910                 | _push
0a910                 | ' 
0a910                 | ' 'print "In push: "; t1.result_type
0a910                 | ' 'print "In push: "; t1.result.uresult
0a910                 | ' 
0a910                 | ' if stackpointer<maxstack then 
0a910     43 00 00 FF 
0a914     88 E4 05 F1 | 	add	objptr, ##34440
0a918     F2 00 02 FB | 	rdlong	_var01, objptr
0a91c     43 00 00 FF 
0a920     88 E4 85 F1 | 	sub	objptr, ##34440
0a924     01 00 00 FF 
0a928     00 00 56 F2 | 	cmps	_var01, ##512 wc
0a92c     BC 00 90 3D |  if_ae	jmp	#LR__0890
0a930     09 01 02 FB | 	rdlong	_var01, arg01
0a934     04 12 06 F1 | 	add	arg01, #4
0a938     09 03 02 FB | 	rdlong	_var02, arg01
0a93c     04 12 06 F1 | 	add	arg01, #4
0a940     09 13 02 FB | 	rdlong	arg01, arg01
0a944     43 00 00 FF 
0a948     88 E4 05 F1 | 	add	objptr, ##34440
0a94c     F2 04 02 FB | 	rdlong	_var03, objptr
0a950     02 07 02 F6 | 	mov	_var04, _var03
0a954     01 06 66 F0 | 	shl	_var04, #1
0a958     02 07 02 F1 | 	add	_var04, _var03
0a95c     02 06 66 F0 | 	shl	_var04, #2
0a960     0C 00 00 FF 
0a964     0C E4 85 F1 | 	sub	objptr, ##6156
0a968     F2 06 02 F1 | 	add	_var04, objptr
0a96c     03 01 62 FC | 	wrlong	_var01, _var04
0a970     0C 00 00 FF 
0a974     0C E4 05 F1 | 	add	objptr, ##6156
0a978     F2 06 02 FB | 	rdlong	_var04, objptr
0a97c     03 05 02 F6 | 	mov	_var03, _var04
0a980     01 04 66 F0 | 	shl	_var03, #1
0a984     03 05 02 F1 | 	add	_var03, _var04
0a988     02 04 66 F0 | 	shl	_var03, #2
0a98c     0C 00 00 FF 
0a990     0C E4 85 F1 | 	sub	objptr, ##6156
0a994     F2 04 02 F1 | 	add	_var03, objptr
0a998     04 04 06 F1 | 	add	_var03, #4
0a99c     02 03 62 FC | 	wrlong	_var02, _var03
0a9a0     0C 00 00 FF 
0a9a4     0C E4 05 F1 | 	add	objptr, ##6156
0a9a8     F2 06 02 FB | 	rdlong	_var04, objptr
0a9ac     03 05 02 F6 | 	mov	_var03, _var04
0a9b0     01 04 66 F0 | 	shl	_var03, #1
0a9b4     03 05 02 F1 | 	add	_var03, _var04
0a9b8     02 04 66 F0 | 	shl	_var03, #2
0a9bc     0C 00 00 FF 
0a9c0     0C E4 85 F1 | 	sub	objptr, ##6156
0a9c4     F2 04 02 F1 | 	add	_var03, objptr
0a9c8     08 04 06 F1 | 	add	_var03, #8
0a9cc     02 13 62 FC | 	wrlong	arg01, _var03
0a9d0     0C 00 00 FF 
0a9d4     0C E4 05 F1 | 	add	objptr, ##6156
0a9d8     F2 00 02 FB | 	rdlong	_var01, objptr
0a9dc     01 00 06 F1 | 	add	_var01, #1
0a9e0     F2 00 62 FC | 	wrlong	_var01, objptr
0a9e4     43 00 00 FF 
0a9e8     88 E4 85 F1 | 	sub	objptr, ##34440
0a9ec                 | LR__0890
0a9ec                 | _push_ret
0a9ec     2D 00 64 FD | 	ret
0a9f0                 | 
0a9f0                 | ' 
0a9f0                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
0a9f0                 | ' 
0a9f0                 | ' sub do_push
0a9f0                 | _do_push
0a9f0                 | ' if stackpointer<maxstack then 
0a9f0     43 00 00 FF 
0a9f4     88 E4 05 F1 | 	add	objptr, ##34440
0a9f8     F2 00 02 FB | 	rdlong	_var01, objptr
0a9fc     43 00 00 FF 
0aa00     88 E4 85 F1 | 	sub	objptr, ##34440
0aa04     01 00 00 FF 
0aa08     00 00 56 F2 | 	cmps	_var01, ##512 wc
0aa0c     F8 00 90 3D |  if_ae	jmp	#LR__0900
0aa10     4A 00 00 FF 
0aa14     B0 E4 05 F1 | 	add	objptr, ##38064
0aa18     F2 02 02 FB | 	rdlong	_var02, objptr
0aa1c     01 05 02 F6 | 	mov	_var03, _var02
0aa20     01 04 66 F0 | 	shl	_var03, #1
0aa24     01 05 02 F1 | 	add	_var03, _var02
0aa28     02 04 66 F0 | 	shl	_var03, #2
0aa2c     03 00 00 FF 
0aa30     04 E4 85 F1 | 	sub	objptr, ##1540
0aa34     F2 04 02 F1 | 	add	_var03, objptr
0aa38     02 01 02 FB | 	rdlong	_var01, _var03
0aa3c     04 04 06 F1 | 	add	_var03, #4
0aa40     02 07 02 FB | 	rdlong	_var04, _var03
0aa44     01 05 02 F6 | 	mov	_var03, _var02
0aa48     01 04 66 F0 | 	shl	_var03, #1
0aa4c     01 05 02 F1 | 	add	_var03, _var02
0aa50     02 04 66 F0 | 	shl	_var03, #2
0aa54     F2 04 02 F1 | 	add	_var03, objptr
0aa58     08 04 06 F1 | 	add	_var03, #8
0aa5c     02 03 02 FB | 	rdlong	_var02, _var03
0aa60     04 00 00 FF 
0aa64     24 E4 85 F1 | 	sub	objptr, ##2084
0aa68     F2 04 02 FB | 	rdlong	_var03, objptr
0aa6c     02 09 02 F6 | 	mov	_var05, _var03
0aa70     01 08 66 F0 | 	shl	_var05, #1
0aa74     02 09 02 F1 | 	add	_var05, _var03
0aa78     02 08 66 F0 | 	shl	_var05, #2
0aa7c     0C 00 00 FF 
0aa80     0C E4 85 F1 | 	sub	objptr, ##6156
0aa84     F2 08 02 F1 | 	add	_var05, objptr
0aa88     04 01 62 FC | 	wrlong	_var01, _var05
0aa8c     0C 00 00 FF 
0aa90     0C E4 05 F1 | 	add	objptr, ##6156
0aa94     F2 08 02 FB | 	rdlong	_var05, objptr
0aa98     04 05 02 F6 | 	mov	_var03, _var05
0aa9c     01 04 66 F0 | 	shl	_var03, #1
0aaa0     04 05 02 F1 | 	add	_var03, _var05
0aaa4     02 04 66 F0 | 	shl	_var03, #2
0aaa8     0C 00 00 FF 
0aaac     0C E4 85 F1 | 	sub	objptr, ##6156
0aab0     F2 04 02 F1 | 	add	_var03, objptr
0aab4     04 04 06 F1 | 	add	_var03, #4
0aab8     02 07 62 FC | 	wrlong	_var04, _var03
0aabc     0C 00 00 FF 
0aac0     0C E4 05 F1 | 	add	objptr, ##6156
0aac4     F2 08 02 FB | 	rdlong	_var05, objptr
0aac8     04 07 02 F6 | 	mov	_var04, _var05
0aacc     01 06 66 F0 | 	shl	_var04, #1
0aad0     04 07 02 F1 | 	add	_var04, _var05
0aad4     02 06 66 F0 | 	shl	_var04, #2
0aad8     0C 00 00 FF 
0aadc     0C E4 85 F1 | 	sub	objptr, ##6156
0aae0     F2 06 02 F1 | 	add	_var04, objptr
0aae4     08 06 06 F1 | 	add	_var04, #8
0aae8     03 03 62 FC | 	wrlong	_var02, _var04
0aaec     0C 00 00 FF 
0aaf0     0C E4 05 F1 | 	add	objptr, ##6156
0aaf4     F2 00 02 FB | 	rdlong	_var01, objptr
0aaf8     01 00 06 F1 | 	add	_var01, #1
0aafc     F2 00 62 FC | 	wrlong	_var01, objptr
0ab00     43 00 00 FF 
0ab04     88 E4 85 F1 | 	sub	objptr, ##34440
0ab08                 | LR__0900
0ab08                 | _do_push_ret
0ab08     2D 00 64 FD | 	ret
0ab0c                 | 
0ab0c                 | ' 
0ab0c                 | '   
0ab0c                 | ' sub csave_block(address as ulong)
0ab0c                 | _csave_block
0ab0c     09 01 02 F6 | 	mov	_var01, arg01
0ab10                 | ' 
0ab10                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
0ab10                 | ' ' we enter it at the state of playing 1 kHz header tone
0ab10                 | ' 
0ab10                 | ' for i=0 to 63 step 2
0ab10     00 02 06 F6 | 	mov	_var02, #0
0ab14                 | LR__0910
0ab14                 | '   do: loop until lpeek(base+32*7)>32768
0ab14     37 00 00 FF 
0ab18     40 E4 05 F1 | 	add	objptr, ##28224
0ab1c     97 0C 48 FB | 	callpa	#(@LR__0912-@LR__0911)>>2,fcache_load_ptr_
0ab20                 | LR__0911
0ab20     F2 12 02 FB | 	rdlong	arg01, objptr
0ab24     E0 12 06 F1 | 	add	arg01, #224
0ab28     09 FB 01 FB | 	rdlong	result1, arg01
0ab2c     40 00 00 FF 
0ab30     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ab34     E8 FF 9F CD |  if_b	jmp	#LR__0911
0ab38                 | LR__0912
0ab38     00 13 02 F6 | 	mov	arg01, _var01
0ab3c     01 05 02 F6 | 	mov	_var03, _var02
0ab40     02 04 66 F0 | 	shl	_var03, #2
0ab44     02 13 02 F1 | 	add	arg01, _var03
0ab48     09 07 02 FB | 	rdlong	_var04, arg01
0ab4c     22 00 00 FF 
0ab50     F4 E5 05 F1 | 	add	objptr, ##17908
0ab54     F2 06 62 FC | 	wrlong	_var04, objptr
0ab58     5A 00 00 FF 
0ab5c     34 E4 85 F1 | 	sub	objptr, ##46132
0ab60                 | '   q=lpeek(address+4*i)
0ab60                 | '      for bit=0 to 31
0ab60     00 08 06 F6 | 	mov	_var05, #0
0ab64     97 84 48 FB | 	callpa	#(@LR__0917-@LR__0913)>>2,fcache_load_ptr_
0ab68                 | LR__0913
0ab68                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0ab68     5A 00 00 FF 
0ab6c     34 E4 05 F1 | 	add	objptr, ##46132
0ab70     F2 06 02 FB | 	rdlong	_var04, objptr
0ab74     5A 00 00 FF 
0ab78     34 E4 85 F1 | 	sub	objptr, ##46132
0ab7c     04 05 C2 F9 | 	decod	_var03, _var05
0ab80     02 07 CA F7 | 	test	_var04, _var03 wz
0ab84     60 00 90 AD |  if_e	jmp	#LR__0914
0ab88     04 05 02 F6 | 	mov	_var03, _var05
0ab8c     02 04 66 F0 | 	shl	_var03, #2
0ab90     55 00 00 FF 
0ab94     E8 E5 05 F1 | 	add	objptr, ##44008
0ab98     F2 04 02 F1 | 	add	_var03, objptr
0ab9c     02 FF 48 FC | 	wrbyte	#127, _var03
0aba0     04 05 02 F6 | 	mov	_var03, _var05
0aba4     02 04 66 F0 | 	shl	_var03, #2
0aba8     01 04 06 F1 | 	add	_var03, #1
0abac     F2 04 02 F1 | 	add	_var03, objptr
0abb0     02 01 49 FC | 	wrbyte	#128, _var03
0abb4     04 05 02 F6 | 	mov	_var03, _var05
0abb8     02 04 66 F0 | 	shl	_var03, #2
0abbc     02 04 06 F1 | 	add	_var03, #2
0abc0     F2 04 02 F1 | 	add	_var03, objptr
0abc4     02 FF 48 FC | 	wrbyte	#127, _var03
0abc8     04 05 02 F6 | 	mov	_var03, _var05
0abcc     02 04 66 F0 | 	shl	_var03, #2
0abd0     03 04 06 F1 | 	add	_var03, #3
0abd4     F2 04 02 F1 | 	add	_var03, objptr
0abd8     02 01 49 FC | 	wrbyte	#128, _var03
0abdc     55 00 00 FF 
0abe0     E8 E5 85 F1 | 	sub	objptr, ##44008
0abe4     5C 00 90 FD | 	jmp	#LR__0915
0abe8                 | LR__0914
0abe8     04 05 02 F6 | 	mov	_var03, _var05
0abec     02 04 66 F0 | 	shl	_var03, #2
0abf0     55 00 00 FF 
0abf4     E8 E5 05 F1 | 	add	objptr, ##44008
0abf8     F2 04 02 F1 | 	add	_var03, objptr
0abfc     02 01 49 FC | 	wrbyte	#128, _var03
0ac00     04 05 02 F6 | 	mov	_var03, _var05
0ac04     02 04 66 F0 | 	shl	_var03, #2
0ac08     01 04 06 F1 | 	add	_var03, #1
0ac0c     F2 04 02 F1 | 	add	_var03, objptr
0ac10     02 01 49 FC | 	wrbyte	#128, _var03
0ac14     04 05 02 F6 | 	mov	_var03, _var05
0ac18     02 04 66 F0 | 	shl	_var03, #2
0ac1c     02 04 06 F1 | 	add	_var03, #2
0ac20     F2 04 02 F1 | 	add	_var03, objptr
0ac24     02 FF 48 FC | 	wrbyte	#127, _var03
0ac28     04 05 02 F6 | 	mov	_var03, _var05
0ac2c     02 04 66 F0 | 	shl	_var03, #2
0ac30     03 04 06 F1 | 	add	_var03, #3
0ac34     F2 04 02 F1 | 	add	_var03, objptr
0ac38     02 FF 48 FC | 	wrbyte	#127, _var03
0ac3c     55 00 00 FF 
0ac40     E8 E5 85 F1 | 	sub	objptr, ##44008
0ac44                 | LR__0915
0ac44     01 08 06 F1 | 	add	_var05, #1
0ac48     20 08 56 F2 | 	cmps	_var05, #32 wc
0ac4c     18 FF 9F CD |  if_b	jmp	#LR__0913
0ac50                 | '   do: loop until lpeek(base+32*7)<32768
0ac50     37 00 00 FF 
0ac54     40 E4 05 F1 | 	add	objptr, ##28224
0ac58                 | LR__0916
0ac58     F2 12 02 FB | 	rdlong	arg01, objptr
0ac5c     E0 12 06 F1 | 	add	arg01, #224
0ac60     09 FB 01 FB | 	rdlong	result1, arg01
0ac64     40 00 00 FF 
0ac68     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0ac6c     E8 FF 9F 3D |  if_ae	jmp	#LR__0916
0ac70                 | LR__0917
0ac70     00 13 02 F6 | 	mov	arg01, _var01
0ac74     04 12 06 F1 | 	add	arg01, #4
0ac78     01 05 02 F6 | 	mov	_var03, _var02
0ac7c     02 04 66 F0 | 	shl	_var03, #2
0ac80     02 13 02 F1 | 	add	arg01, _var03
0ac84     09 07 02 FB | 	rdlong	_var04, arg01
0ac88     22 00 00 FF 
0ac8c     F4 E5 05 F1 | 	add	objptr, ##17908
0ac90     F2 06 62 FC | 	wrlong	_var04, objptr
0ac94     5A 00 00 FF 
0ac98     34 E4 85 F1 | 	sub	objptr, ##46132
0ac9c                 | '   q=lpeek(address+4+4*i)
0ac9c                 | '      for bit=0 to 31
0ac9c     00 08 06 F6 | 	mov	_var05, #0
0aca0     97 94 48 FB | 	callpa	#(@LR__0921-@LR__0918)>>2,fcache_load_ptr_
0aca4                 | LR__0918
0aca4                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0aca4     5A 00 00 FF 
0aca8     34 E4 05 F1 | 	add	objptr, ##46132
0acac     F2 06 02 FB | 	rdlong	_var04, objptr
0acb0     5A 00 00 FF 
0acb4     34 E4 85 F1 | 	sub	objptr, ##46132
0acb8     04 05 C2 F9 | 	decod	_var03, _var05
0acbc     02 07 CA F7 | 	test	_var04, _var03 wz
0acc0     80 00 90 AD |  if_e	jmp	#LR__0919
0acc4     04 0B 02 F6 | 	mov	_var06, _var05
0acc8     02 0A 66 F0 | 	shl	_var06, #2
0accc     80 04 06 F6 | 	mov	_var03, #128
0acd0     05 05 02 F1 | 	add	_var03, _var06
0acd4     55 00 00 FF 
0acd8     E8 E5 05 F1 | 	add	objptr, ##44008
0acdc     F2 04 02 F1 | 	add	_var03, objptr
0ace0     02 FF 48 FC | 	wrbyte	#127, _var03
0ace4     04 0B 02 F6 | 	mov	_var06, _var05
0ace8     02 0A 66 F0 | 	shl	_var06, #2
0acec     80 04 06 F6 | 	mov	_var03, #128
0acf0     05 05 02 F1 | 	add	_var03, _var06
0acf4     01 04 06 F1 | 	add	_var03, #1
0acf8     F2 04 02 F1 | 	add	_var03, objptr
0acfc     02 01 49 FC | 	wrbyte	#128, _var03
0ad00     04 0B 02 F6 | 	mov	_var06, _var05
0ad04     02 0A 66 F0 | 	shl	_var06, #2
0ad08     80 04 06 F6 | 	mov	_var03, #128
0ad0c     05 05 02 F1 | 	add	_var03, _var06
0ad10     02 04 06 F1 | 	add	_var03, #2
0ad14     F2 04 02 F1 | 	add	_var03, objptr
0ad18     02 FF 48 FC | 	wrbyte	#127, _var03
0ad1c     04 0B 02 F6 | 	mov	_var06, _var05
0ad20     02 0A 66 F0 | 	shl	_var06, #2
0ad24     80 04 06 F6 | 	mov	_var03, #128
0ad28     05 05 02 F1 | 	add	_var03, _var06
0ad2c     03 04 06 F1 | 	add	_var03, #3
0ad30     F2 04 02 F1 | 	add	_var03, objptr
0ad34     02 01 49 FC | 	wrbyte	#128, _var03
0ad38     55 00 00 FF 
0ad3c     E8 E5 85 F1 | 	sub	objptr, ##44008
0ad40     7C 00 90 FD | 	jmp	#LR__0920
0ad44                 | LR__0919
0ad44     04 0B 02 F6 | 	mov	_var06, _var05
0ad48     02 0A 66 F0 | 	shl	_var06, #2
0ad4c     80 04 06 F6 | 	mov	_var03, #128
0ad50     05 05 02 F1 | 	add	_var03, _var06
0ad54     55 00 00 FF 
0ad58     E8 E5 05 F1 | 	add	objptr, ##44008
0ad5c     F2 04 02 F1 | 	add	_var03, objptr
0ad60     02 01 49 FC | 	wrbyte	#128, _var03
0ad64     04 0B 02 F6 | 	mov	_var06, _var05
0ad68     02 0A 66 F0 | 	shl	_var06, #2
0ad6c     80 04 06 F6 | 	mov	_var03, #128
0ad70     05 05 02 F1 | 	add	_var03, _var06
0ad74     01 04 06 F1 | 	add	_var03, #1
0ad78     F2 04 02 F1 | 	add	_var03, objptr
0ad7c     02 01 49 FC | 	wrbyte	#128, _var03
0ad80     04 0B 02 F6 | 	mov	_var06, _var05
0ad84     02 0A 66 F0 | 	shl	_var06, #2
0ad88     80 04 06 F6 | 	mov	_var03, #128
0ad8c     05 05 02 F1 | 	add	_var03, _var06
0ad90     02 04 06 F1 | 	add	_var03, #2
0ad94     F2 04 02 F1 | 	add	_var03, objptr
0ad98     02 FF 48 FC | 	wrbyte	#127, _var03
0ad9c     04 0B 02 F6 | 	mov	_var06, _var05
0ada0     02 0A 66 F0 | 	shl	_var06, #2
0ada4     80 04 06 F6 | 	mov	_var03, #128
0ada8     05 05 02 F1 | 	add	_var03, _var06
0adac     03 04 06 F1 | 	add	_var03, #3
0adb0     F2 04 02 F1 | 	add	_var03, objptr
0adb4     02 FF 48 FC | 	wrbyte	#127, _var03
0adb8     55 00 00 FF 
0adbc     E8 E5 85 F1 | 	sub	objptr, ##44008
0adc0                 | LR__0920
0adc0     01 08 06 F1 | 	add	_var05, #1
0adc4     20 08 56 F2 | 	cmps	_var05, #32 wc
0adc8     D8 FE 9F CD |  if_b	jmp	#LR__0918
0adcc                 | LR__0921
0adcc     02 02 06 F1 | 	add	_var02, #2
0add0     40 02 56 F2 | 	cmps	_var02, #64 wc
0add4     3C FD 9F CD |  if_b	jmp	#LR__0910
0add8                 | ' do: loop until lpeek(base+32*7)>32768
0add8     37 00 00 FF 
0addc     40 E4 05 F1 | 	add	objptr, ##28224
0ade0     97 84 48 FB | 	callpa	#(@LR__0930-@LR__0922)>>2,fcache_load_ptr_
0ade4                 | LR__0922
0ade4     F2 12 02 FB | 	rdlong	arg01, objptr
0ade8     E0 12 06 F1 | 	add	arg01, #224
0adec     09 FB 01 FB | 	rdlong	result1, arg01
0adf0     40 00 00 FF 
0adf4     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0adf8     E8 FF 9F CD |  if_b	jmp	#LR__0922
0adfc     37 00 00 FF 
0ae00     40 E4 85 F1 | 	sub	objptr, ##28224
0ae04                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0ae04     00 02 06 F6 | 	mov	_var02, #0
0ae08                 | LR__0923
0ae08     01 07 52 F6 | 	abs	_var04, _var02 wc
0ae0c     07 06 06 F5 | 	and	_var04, #7
0ae10     03 07 82 F6 | 	negc	_var04, _var04
0ae14     04 06 56 F2 | 	cmps	_var04, #4 wc
0ae18     20 00 90 3D |  if_ae	jmp	#LR__0924
0ae1c     01 0B 02 F6 | 	mov	_var06, _var02
0ae20     55 00 00 FF 
0ae24     E8 E5 05 F1 | 	add	objptr, ##44008
0ae28     F2 0A 02 F1 | 	add	_var06, objptr
0ae2c     05 FF 48 FC | 	wrbyte	#127, _var06
0ae30     55 00 00 FF 
0ae34     E8 E5 85 F1 | 	sub	objptr, ##44008
0ae38     1C 00 90 FD | 	jmp	#LR__0925
0ae3c                 | LR__0924
0ae3c     01 0B 02 F6 | 	mov	_var06, _var02
0ae40     55 00 00 FF 
0ae44     E8 E5 05 F1 | 	add	objptr, ##44008
0ae48     F2 0A 02 F1 | 	add	_var06, objptr
0ae4c     05 01 49 FC | 	wrbyte	#128, _var06
0ae50     55 00 00 FF 
0ae54     E8 E5 85 F1 | 	sub	objptr, ##44008
0ae58                 | LR__0925
0ae58     01 02 06 F1 | 	add	_var02, #1
0ae5c     80 02 56 F2 | 	cmps	_var02, #128 wc
0ae60     A4 FF 9F CD |  if_b	jmp	#LR__0923
0ae64                 | ' 
0ae64                 | ' do: loop until lpeek(base+32*7)<32768
0ae64     37 00 00 FF 
0ae68     40 E4 05 F1 | 	add	objptr, ##28224
0ae6c                 | LR__0926
0ae6c     F2 12 02 FB | 	rdlong	arg01, objptr
0ae70     E0 12 06 F1 | 	add	arg01, #224
0ae74     09 FB 01 FB | 	rdlong	result1, arg01
0ae78     40 00 00 FF 
0ae7c     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0ae80     E8 FF 9F 3D |  if_ae	jmp	#LR__0926
0ae84     37 00 00 FF 
0ae88     40 E4 85 F1 | 	sub	objptr, ##28224
0ae8c                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0ae8c     80 02 06 F6 | 	mov	_var02, #128
0ae90                 | LR__0927
0ae90     01 07 52 F6 | 	abs	_var04, _var02 wc
0ae94     07 06 06 F5 | 	and	_var04, #7
0ae98     03 07 82 F6 | 	negc	_var04, _var04
0ae9c     04 06 56 F2 | 	cmps	_var04, #4 wc
0aea0     20 00 90 3D |  if_ae	jmp	#LR__0928
0aea4     01 0B 02 F6 | 	mov	_var06, _var02
0aea8     55 00 00 FF 
0aeac     E8 E5 05 F1 | 	add	objptr, ##44008
0aeb0     F2 0A 02 F1 | 	add	_var06, objptr
0aeb4     05 FF 48 FC | 	wrbyte	#127, _var06
0aeb8     55 00 00 FF 
0aebc     E8 E5 85 F1 | 	sub	objptr, ##44008
0aec0     1C 00 90 FD | 	jmp	#LR__0929
0aec4                 | LR__0928
0aec4     01 0B 02 F6 | 	mov	_var06, _var02
0aec8     55 00 00 FF 
0aecc     E8 E5 05 F1 | 	add	objptr, ##44008
0aed0     F2 0A 02 F1 | 	add	_var06, objptr
0aed4     05 01 49 FC | 	wrbyte	#128, _var06
0aed8     55 00 00 FF 
0aedc     E8 E5 85 F1 | 	sub	objptr, ##44008
0aee0                 | LR__0929
0aee0     01 02 06 F1 | 	add	_var02, #1
0aee4     00 03 16 F2 | 	cmp	_var02, #256 wc
0aee8     A4 FF 9F CD |  if_b	jmp	#LR__0927
0aeec                 | LR__0930
0aeec                 | _csave_block_ret
0aeec     2D 00 64 FD | 	ret
0aef0                 | 
0aef0                 | ' 
0aef0                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0aef0                 | _csave_addtoblock
0aef0     04 4A 05 F6 | 	mov	COUNT_, #4
0aef4     A8 00 A0 FD | 	call	#pushregs_
0aef8     09 1F 02 F6 | 	mov	local01, arg01
0aefc                 | ' 
0aefc                 | ' 
0aefc                 | ' if force=0 then
0aefc     07 14 4E F7 | 	zerox	arg02, #7 wz
0af00     78 00 90 5D |  if_ne	jmp	#LR__0940
0af04     58 00 00 FF 
0af08     E8 E4 05 F1 | 	add	objptr, ##45288
0af0c     F2 14 02 FB | 	rdlong	arg02, objptr
0af10     02 00 00 FF 
0af14     00 E4 85 F1 | 	sub	objptr, ##1024
0af18     F2 14 02 F1 | 	add	arg02, objptr
0af1c     0A 1F 42 FC | 	wrbyte	local01, arg02
0af20     02 00 00 FF 
0af24     00 E4 05 F1 | 	add	objptr, ##1024
0af28     F2 1E 02 FB | 	rdlong	local01, objptr
0af2c     01 1E 06 F1 | 	add	local01, #1
0af30     F2 1E 62 FC | 	wrlong	local01, objptr
0af34                 | '   block(blockptr)=d
0af34                 | '   blockptr+=1
0af34                 | '   if blockptr>=255 then
0af34     58 00 00 FF 
0af38     E8 E4 85 F1 | 	sub	objptr, ##45288
0af3c     FF 1E 16 F2 | 	cmp	local01, #255 wc
0af40     E4 00 90 CD |  if_b	jmp	#LR__0944
0af44     56 00 00 FF 
0af48     E8 E4 05 F1 | 	add	objptr, ##44264
0af4c     F2 12 02 F6 | 	mov	arg01, objptr
0af50     56 00 00 FF 
0af54     E8 E4 85 F1 | 	sub	objptr, ##44264
0af58     B0 FB BF FD | 	call	#_csave_block
0af5c     58 00 00 FF 
0af60     E8 E4 05 F1 | 	add	objptr, ##45288
0af64     F2 00 68 FC | 	wrlong	#0, objptr
0af68     58 00 00 FF 
0af6c     E8 E4 85 F1 | 	sub	objptr, ##45288
0af70     2C 13 06 F6 | 	mov	arg01, #300
0af74     90 3E B1 FD | 	call	#__system___waitms
0af78     AC 00 90 FD | 	jmp	#LR__0944
0af7c                 | LR__0940
0af7c     58 00 00 FF 
0af80     E8 E4 05 F1 | 	add	objptr, ##45288
0af84     F2 20 02 FB | 	rdlong	local02, objptr
0af88     02 00 00 FF 
0af8c     00 E4 85 F1 | 	sub	objptr, ##1024
0af90     F2 20 02 F1 | 	add	local02, objptr
0af94     10 1F 42 FC | 	wrbyte	local01, local02
0af98                 | '   block(blockptr)=d
0af98                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0af98     02 00 00 FF 
0af9c     00 E4 05 F1 | 	add	objptr, ##1024
0afa0     F2 22 02 FB | 	rdlong	local03, objptr
0afa4     58 00 00 FF 
0afa8     E8 E4 85 F1 | 	sub	objptr, ##45288
0afac     FF 22 16 F2 | 	cmp	local03, #255 wc
0afb0     40 00 90 3D |  if_ae	jmp	#LR__0943
0afb4     58 00 00 FF 
0afb8     E8 E4 05 F1 | 	add	objptr, ##45288
0afbc     F2 24 02 FB | 	rdlong	local04, objptr
0afc0     58 00 00 FF 
0afc4     E8 E4 85 F1 | 	sub	objptr, ##45288
0afc8                 | LR__0941
0afc8     00 25 56 F2 | 	cmps	local04, #256 wc
0afcc     24 00 90 3D |  if_ae	jmp	#LR__0942
0afd0     12 21 02 F6 | 	mov	local02, local04
0afd4     56 00 00 FF 
0afd8     E8 E4 05 F1 | 	add	objptr, ##44264
0afdc     F2 20 02 F1 | 	add	local02, objptr
0afe0     10 01 48 FC | 	wrbyte	#0, local02
0afe4     01 24 06 F1 | 	add	local04, #1
0afe8     56 00 00 FF 
0afec     E8 E4 85 F1 | 	sub	objptr, ##44264
0aff0     D4 FF 9F FD | 	jmp	#LR__0941
0aff4                 | LR__0942
0aff4                 | LR__0943
0aff4     56 00 00 FF 
0aff8     E8 E4 05 F1 | 	add	objptr, ##44264
0affc     F2 12 02 F6 | 	mov	arg01, objptr
0b000     56 00 00 FF 
0b004     E8 E4 85 F1 | 	sub	objptr, ##44264
0b008     00 FB BF FD | 	call	#_csave_block
0b00c     58 00 00 FF 
0b010     E8 E4 05 F1 | 	add	objptr, ##45288
0b014     F2 00 68 FC | 	wrlong	#0, objptr
0b018     58 00 00 FF 
0b01c     E8 E4 85 F1 | 	sub	objptr, ##45288
0b020     2C 13 06 F6 | 	mov	arg01, #300
0b024     E0 3D B1 FD | 	call	#__system___waitms
0b028                 | LR__0944
0b028     A7 F0 03 F6 | 	mov	ptra, fp
0b02c     B2 00 A0 FD | 	call	#popregs_
0b030                 | _csave_addtoblock_ret
0b030     2D 00 64 FD | 	ret
0b034                 | 
0b034                 | ' 
0b034                 | ' sub test_csave
0b034                 | _test_csave
0b034     04 4A 05 F6 | 	mov	COUNT_, #4
0b038     A8 00 A0 FD | 	call	#pushregs_
0b03c     C0 F0 07 F1 | 	add	ptra, #192
0b040                 | ' 'dim fileheader,savestart, saveptr as ulong
0b040                 | ' 
0b040                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0b040     4A 00 00 FF 
0b044     B4 E4 05 F1 | 	add	objptr, ##38068
0b048     F2 12 02 FB | 	rdlong	arg01, objptr
0b04c     4A 00 00 FF 
0b050     B4 E4 85 F1 | 	sub	objptr, ##38068
0b054     A8 F8 B0 FD | 	call	#_pslpeek
0b058     FF FF 7F FF 
0b05c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0b060     0C 00 90 5D |  if_ne	jmp	#LR__0950
0b064     1B 12 06 F6 | 	mov	arg01, #27
0b068     00 F6 B0 FD | 	call	#_printerror
0b06c     1C 03 90 FD | 	jmp	#LR__0964
0b070                 | LR__0950
0b070     04 F8 BF FD | 	call	#_pop
0b074     90 4E 05 F1 | 	add	fp, #144
0b078     A7 FA 61 FC | 	wrlong	result1, fp
0b07c     04 4E 05 F1 | 	add	fp, #4
0b080     A7 FC 61 FC | 	wrlong	result2, fp
0b084     04 4E 05 F1 | 	add	fp, #4
0b088     A7 FE 61 FC | 	wrlong	result3, fp
0b08c                 | ' t1=pop()
0b08c                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0b08c     98 4E 85 F1 | 	sub	fp, #152
0b090     1F FE 0D F2 | 	cmp	result3, #31 wz
0b094     24 00 90 AD |  if_e	jmp	#LR__0951
0b098     59 00 00 FF 
0b09c     E4 E5 05 F1 | 	add	objptr, ##46052
0b0a0     F2 1C 02 FB | 	rdlong	arg06, objptr
0b0a4     59 00 00 FF 
0b0a8     E4 E5 85 F1 | 	sub	objptr, ##46052
0b0ac     8C 4E 05 F1 | 	add	fp, #140
0b0b0     A7 1C 62 FC | 	wrlong	arg06, fp
0b0b4     8C 4E 85 F1 | 	sub	fp, #140
0b0b8     14 00 90 FD | 	jmp	#LR__0952
0b0bc                 | LR__0951
0b0bc     90 4E 05 F1 | 	add	fp, #144
0b0c0     A7 1C 02 FB | 	rdlong	arg06, fp
0b0c4     04 4E 85 F1 | 	sub	fp, #4
0b0c8     A7 1C 62 FC | 	wrlong	arg06, fp
0b0cc     8C 4E 85 F1 | 	sub	fp, #140
0b0d0                 | LR__0952
0b0d0                 | ' 
0b0d0                 | ' ' prepare 1 kHz header wave
0b0d0                 | ' 
0b0d0                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0b0d0     A7 00 68 FC | 	wrlong	#0, fp
0b0d4     97 34 48 FB | 	callpa	#(@LR__0956-@LR__0953)>>2,fcache_load_ptr_
0b0d8                 | LR__0953
0b0d8     A7 1C 02 FB | 	rdlong	arg06, fp
0b0dc     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0b0e0     07 1A 06 F5 | 	and	arg05, #7
0b0e4     0D 1B 82 F6 | 	negc	arg05, arg05
0b0e8     04 1A 56 F2 | 	cmps	arg05, #4 wc
0b0ec     20 00 90 3D |  if_ae	jmp	#LR__0954
0b0f0     A7 1A 02 FB | 	rdlong	arg05, fp
0b0f4     55 00 00 FF 
0b0f8     E8 E5 05 F1 | 	add	objptr, ##44008
0b0fc     F2 1A 02 F1 | 	add	arg05, objptr
0b100     0D FF 48 FC | 	wrbyte	#127, arg05
0b104     55 00 00 FF 
0b108     E8 E5 85 F1 | 	sub	objptr, ##44008
0b10c     1C 00 90 FD | 	jmp	#LR__0955
0b110                 | LR__0954
0b110     A7 1A 02 FB | 	rdlong	arg05, fp
0b114     55 00 00 FF 
0b118     E8 E5 05 F1 | 	add	objptr, ##44008
0b11c     F2 1A 02 F1 | 	add	arg05, objptr
0b120     0D 01 49 FC | 	wrbyte	#128, arg05
0b124     55 00 00 FF 
0b128     E8 E5 85 F1 | 	sub	objptr, ##44008
0b12c                 | LR__0955
0b12c     A7 1A 02 FB | 	rdlong	arg05, fp
0b130     01 1A 06 F1 | 	add	arg05, #1
0b134     A7 1A 62 FC | 	wrlong	arg05, fp
0b138     00 1B 56 F2 | 	cmps	arg05, #256 wc
0b13c     98 FF 9F CD |  if_b	jmp	#LR__0953
0b140                 | LR__0956
0b140     55 00 00 FF 
0b144     E8 E5 05 F1 | 	add	objptr, ##44008
0b148     F2 14 02 F6 | 	mov	arg02, objptr
0b14c     07 12 06 F6 | 	mov	arg01, #7
0b150     0F 00 00 FF 
0b154     40 17 06 F6 | 	mov	arg03, ##8000
0b158     0E 18 C6 F9 | 	decod	arg04, #14
0b15c     00 1B 06 F6 | 	mov	arg05, #256
0b160     00 1C 06 F6 | 	mov	arg06, #0
0b164     4A 00 00 FF 
0b168     1C E5 85 F1 | 	sub	objptr, ##38172
0b16c     00 36 B1 FD | 	call	#_audio096_spin2_play8
0b170     0B 00 00 FF 
0b174     CC E4 85 F1 | 	sub	objptr, ##5836
0b178     05 00 00 FF 
0b17c     B8 13 06 F6 | 	mov	arg01, ##3000
0b180     84 3C B1 FD | 	call	#__system___waitms
0b184     58 00 00 FF 
0b188     E8 E4 05 F1 | 	add	objptr, ##45288
0b18c     F2 00 68 FC | 	wrlong	#0, objptr
0b190     58 00 00 FF 
0b194     E8 E4 85 F1 | 	sub	objptr, ##45288
0b198     72 12 06 F6 | 	mov	arg01, #114
0b19c     00 14 06 F6 | 	mov	arg02, #0
0b1a0     4C FD BF FD | 	call	#_csave_addtoblock
0b1a4     62 12 06 F6 | 	mov	arg01, #98
0b1a8     00 14 06 F6 | 	mov	arg02, #0
0b1ac     40 FD BF FD | 	call	#_csave_addtoblock
0b1b0     61 12 06 F6 | 	mov	arg01, #97
0b1b4     00 14 06 F6 | 	mov	arg02, #0
0b1b8     34 FD BF FD | 	call	#_csave_addtoblock
0b1bc     0D 12 06 F6 | 	mov	arg01, #13
0b1c0     00 14 06 F6 | 	mov	arg02, #0
0b1c4     28 FD BF FD | 	call	#_csave_addtoblock
0b1c8                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0b1c8                 | ' waitms 3000 
0b1c8                 | ' 
0b1c8                 | ' blockptr=0
0b1c8                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0b1c8                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0b1c8     A7 02 68 FC | 	wrlong	#1, fp
0b1cc     8C 4E 05 F1 | 	add	fp, #140
0b1d0     A7 12 02 FB | 	rdlong	arg01, fp
0b1d4     8C 4E 85 F1 | 	sub	fp, #140
0b1d8     09 1F 02 F6 | 	mov	local01, arg01
0b1dc     97 06 48 FB | 	callpa	#(@LR__0958-@LR__0957)>>2,fcache_load_ptr_
0b1e0                 | LR__0957
0b1e0     0F FB C9 FA | 	rdbyte	result1, local01 wz
0b1e4     01 1E 06 51 |  if_ne	add	local01, #1
0b1e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0957
0b1ec                 | LR__0958
0b1ec     09 1F 82 F1 | 	sub	local01, arg01
0b1f0     0F 21 02 F6 | 	mov	local02, local01
0b1f4     01 20 06 F1 | 	add	local02, #1
0b1f8                 | LR__0959
0b1f8     A7 1A 02 FB | 	rdlong	arg05, fp
0b1fc     10 1B 52 F2 | 	cmps	arg05, local02 wc
0b200     34 00 90 3D |  if_ae	jmp	#LR__0960
0b204     8C 4E 05 F1 | 	add	fp, #140
0b208     A7 12 02 FB | 	rdlong	arg01, fp
0b20c     8C 4E 85 F1 | 	sub	fp, #140
0b210     A7 14 02 FB | 	rdlong	arg02, fp
0b214     01 16 06 F6 | 	mov	arg03, #1
0b218     20 5A B1 FD | 	call	#__system__Mid_S
0b21c     FD 12 C2 FA | 	rdbyte	arg01, result1
0b220     00 14 06 F6 | 	mov	arg02, #0
0b224     C8 FC BF FD | 	call	#_csave_addtoblock
0b228     A7 1A 02 FB | 	rdlong	arg05, fp
0b22c     01 1A 06 F1 | 	add	arg05, #1
0b230     A7 1A 62 FC | 	wrlong	arg05, fp
0b234     C0 FF 9F FD | 	jmp	#LR__0959
0b238                 | LR__0960
0b238     00 12 06 F6 | 	mov	arg01, #0
0b23c     00 14 06 F6 | 	mov	arg02, #0
0b240     AC FC BF FD | 	call	#_csave_addtoblock
0b244     72 12 06 F6 | 	mov	arg01, #114
0b248     00 14 06 F6 | 	mov	arg02, #0
0b24c     A0 FC BF FD | 	call	#_csave_addtoblock
0b250     62 12 06 F6 | 	mov	arg01, #98
0b254     00 14 06 F6 | 	mov	arg02, #0
0b258     94 FC BF FD | 	call	#_csave_addtoblock
0b25c     73 12 06 F6 | 	mov	arg01, #115
0b260     00 14 06 F6 | 	mov	arg02, #0
0b264     88 FC BF FD | 	call	#_csave_addtoblock
0b268     0D 12 06 F6 | 	mov	arg01, #13
0b26c     00 14 06 F6 | 	mov	arg02, #0
0b270     7C FC BF FD | 	call	#_csave_addtoblock
0b274     4A 00 00 FF 
0b278     B4 E4 05 F1 | 	add	objptr, ##38068
0b27c     F2 22 02 FB | 	rdlong	local03, objptr
0b280     4A 00 00 FF 
0b284     B4 E4 85 F1 | 	sub	objptr, ##38068
0b288     9C 4E 05 F1 | 	add	fp, #156
0b28c     A7 22 62 FC | 	wrlong	local03, fp
0b290     9C 4E 85 F1 | 	sub	fp, #156
0b294                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0b294                 | ' 
0b294                 | ' saveptr=programstart
0b294                 | ' do
0b294                 | LR__0961
0b294     A0 4E 05 F1 | 	add	fp, #160
0b298     A7 12 02 F6 | 	mov	arg01, fp
0b29c     04 4E 85 F1 | 	sub	fp, #4
0b2a0     A7 14 02 FB | 	rdlong	arg02, fp
0b2a4     9C 4E 85 F1 | 	sub	fp, #156
0b2a8     18 16 06 F6 | 	mov	arg03, #24
0b2ac     0B 00 00 FF 
0b2b0     CC E4 05 F1 | 	add	objptr, ##5836
0b2b4     1C 2C B1 FD | 	call	#_psram_spin2_read1
0b2b8     0C 4E 05 F1 | 	add	fp, #12
0b2bc     A7 12 02 F6 | 	mov	arg01, fp
0b2c0     9C 4E 05 F1 | 	add	fp, #156
0b2c4     A7 14 02 FB | 	rdlong	arg02, fp
0b2c8     04 4E 05 F1 | 	add	fp, #4
0b2cc     A7 16 02 FB | 	rdlong	arg03, fp
0b2d0     AC 4E 85 F1 | 	sub	fp, #172
0b2d4     FC 2B B1 FD | 	call	#_psram_spin2_read1
0b2d8     0B 00 00 FF 
0b2dc     CC E4 85 F1 | 	sub	objptr, ##5836
0b2e0     AC 4E 05 F1 | 	add	fp, #172
0b2e4     A7 12 02 FB | 	rdlong	arg01, fp
0b2e8     AC 4E 85 F1 | 	sub	fp, #172
0b2ec     00 14 06 F6 | 	mov	arg02, #0
0b2f0     FC FB BF FD | 	call	#_csave_addtoblock
0b2f4                 | '   psram.read1(varptr(header(0)),saveptr,24)
0b2f4                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0b2f4                 | '   csave_addtoblock(header(3),0) ' that's always <255
0b2f4                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
0b2f4     A7 00 68 FC | 	wrlong	#0, fp
0b2f8     AC 4E 05 F1 | 	add	fp, #172
0b2fc     A7 24 02 FB | 	rdlong	local04, fp
0b300     AC 4E 85 F1 | 	sub	fp, #172
0b304                 | LR__0962
0b304     A7 22 02 FB | 	rdlong	local03, fp
0b308     12 23 52 F2 | 	cmps	local03, local04 wc
0b30c     2C 00 90 3D |  if_ae	jmp	#LR__0963
0b310     A7 22 02 FB | 	rdlong	local03, fp
0b314     0C 4E 05 F1 | 	add	fp, #12
0b318     A7 22 02 F1 | 	add	local03, fp
0b31c     11 13 C2 FA | 	rdbyte	arg01, local03
0b320     00 14 06 F6 | 	mov	arg02, #0
0b324     0C 4E 85 F1 | 	sub	fp, #12
0b328     C4 FB BF FD | 	call	#_csave_addtoblock
0b32c     A7 22 02 FB | 	rdlong	local03, fp
0b330     01 22 06 F1 | 	add	local03, #1
0b334     A7 22 62 FC | 	wrlong	local03, fp
0b338     C8 FF 9F FD | 	jmp	#LR__0962
0b33c                 | LR__0963
0b33c     B4 4E 05 F1 | 	add	fp, #180
0b340     A7 22 02 FB | 	rdlong	local03, fp
0b344     18 4E 85 F1 | 	sub	fp, #24
0b348     A7 22 62 FC | 	wrlong	local03, fp
0b34c     18 4E 05 F1 | 	add	fp, #24
0b350     A7 22 02 FB | 	rdlong	local03, fp
0b354     B4 4E 85 F1 | 	sub	fp, #180
0b358     FF FF 3F FF 
0b35c     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0b360     30 FF 9F 5D |  if_ne	jmp	#LR__0961
0b364     00 12 06 F6 | 	mov	arg01, #0
0b368     01 14 06 F6 | 	mov	arg02, #1
0b36c     80 FB BF FD | 	call	#_csave_addtoblock
0b370     37 00 00 FF 
0b374     40 E4 05 F1 | 	add	objptr, ##28224
0b378     F2 12 02 FB | 	rdlong	arg01, objptr
0b37c     37 00 00 FF 
0b380     40 E4 85 F1 | 	sub	objptr, ##28224
0b384     F4 12 06 F1 | 	add	arg01, #244
0b388     09 01 58 FC | 	wrword	#0, arg01
0b38c                 | LR__0964
0b38c     A7 F0 03 F6 | 	mov	ptra, fp
0b390     B2 00 A0 FD | 	call	#popregs_
0b394                 | _test_csave_ret
0b394     2D 00 64 FD | 	ret
0b398                 | 
0b398                 | ' 
0b398                 | ' ' ----------------- Save the program
0b398                 | ' 
0b398                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
0b398                 | _do_save
0b398     04 4A 05 F6 | 	mov	COUNT_, #4
0b39c     A8 00 A0 FD | 	call	#pushregs_
0b3a0     01 00 00 FF 
0b3a4     C0 F0 07 F1 | 	add	ptra, ##704
0b3a8     4A 00 00 FF 
0b3ac     B0 E4 05 F1 | 	add	objptr, ##38064
0b3b0     F2 1E 02 FB | 	rdlong	local01, objptr
0b3b4     0F 21 02 F6 | 	mov	local02, local01
0b3b8     01 20 66 F0 | 	shl	local02, #1
0b3bc     0F 21 02 F1 | 	add	local02, local01
0b3c0     02 20 66 F0 | 	shl	local02, #2
0b3c4     03 00 00 FF 
0b3c8     04 E4 85 F1 | 	sub	objptr, ##1540
0b3cc     F2 20 02 F1 | 	add	local02, objptr
0b3d0     10 23 02 FB | 	rdlong	local03, local02
0b3d4     01 00 00 FF 
0b3d8     10 4E 05 F1 | 	add	fp, ##528
0b3dc     A7 22 62 FC | 	wrlong	local03, fp
0b3e0                 | ' 
0b3e0                 | ' numpar=compiledline(lineptr_e).result.uresult
0b3e0                 | ' 
0b3e0                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0b3e0     01 00 00 FF 
0b3e4     10 4E 85 F1 | 	sub	fp, ##528
0b3e8     01 22 56 F2 | 	cmps	local03, #1 wc
0b3ec     47 00 00 FF 
0b3f0     AC E4 85 F1 | 	sub	objptr, ##36524
0b3f4     20 00 90 CD |  if_b	jmp	#LR__0970
0b3f8     7C F4 BF FD | 	call	#_pop
0b3fc     A7 FA 61 FC | 	wrlong	result1, fp
0b400     04 4E 05 F1 | 	add	fp, #4
0b404     A7 FC 61 FC | 	wrlong	result2, fp
0b408     04 4E 05 F1 | 	add	fp, #4
0b40c     A7 FE 61 FC | 	wrlong	result3, fp
0b410     08 4E 85 F1 | 	sub	fp, #8
0b414     24 00 90 FD | 	jmp	#LR__0971
0b418                 | LR__0970
0b418     59 00 00 FF 
0b41c     E4 E5 05 F1 | 	add	objptr, ##46052
0b420     F2 22 02 FB | 	rdlong	local03, objptr
0b424     59 00 00 FF 
0b428     E4 E5 85 F1 | 	sub	objptr, ##46052
0b42c     A7 22 62 FC | 	wrlong	local03, fp
0b430     08 4E 05 F1 | 	add	fp, #8
0b434     A7 3E 68 FC | 	wrlong	#31, fp
0b438     08 4E 85 F1 | 	sub	fp, #8
0b43c                 | LR__0971
0b43c                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0b43c     4A 00 00 FF 
0b440     B4 E4 05 F1 | 	add	objptr, ##38068
0b444     F2 12 02 FB | 	rdlong	arg01, objptr
0b448     4A 00 00 FF 
0b44c     B4 E4 85 F1 | 	sub	objptr, ##38068
0b450     AC F4 B0 FD | 	call	#_pslpeek
0b454     FF FF 7F FF 
0b458     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0b45c     0C 00 90 5D |  if_ne	jmp	#LR__0972
0b460     1B 12 06 F6 | 	mov	arg01, #27
0b464     04 F2 B0 FD | 	call	#_printerror
0b468     1C 03 90 FD | 	jmp	#LR__0978
0b46c                 | LR__0972
0b46c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0b46c     08 4E 05 F1 | 	add	fp, #8
0b470     A7 22 02 FB | 	rdlong	local03, fp
0b474     08 4E 85 F1 | 	sub	fp, #8
0b478     2B 22 0E F2 | 	cmp	local03, #43 wz
0b47c     18 00 90 5D |  if_ne	jmp	#LR__0973
0b480     A7 12 02 FB | 	rdlong	arg01, fp
0b484     0C 37 B0 FD | 	call	#_convertstring
0b488     A7 FA 61 FC | 	wrlong	result1, fp
0b48c     08 4E 05 F1 | 	add	fp, #8
0b490     A7 3E 68 FC | 	wrlong	#31, fp
0b494     08 4E 85 F1 | 	sub	fp, #8
0b498                 | LR__0973
0b498                 | ' if t1.result_type=result_string then
0b498     08 4E 05 F1 | 	add	fp, #8
0b49c     A7 22 02 FB | 	rdlong	local03, fp
0b4a0     08 4E 85 F1 | 	sub	fp, #8
0b4a4     1F 22 0E F2 | 	cmp	local03, #31 wz
0b4a8     DC 02 90 5D |  if_ne	jmp	#LR__0977
0b4ac                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0b4ac     A7 12 02 FB | 	rdlong	arg01, fp
0b4b0     73 01 00 FF 
0b4b4     8F 14 06 F6 | 	mov	arg02, ##@LR__5117
0b4b8     80 36 B1 FD | 	call	#__system___string_cmp
0b4bc     00 FA 0D F2 | 	cmp	result1, #0 wz
0b4c0     59 00 00 AF 
0b4c4     E4 E5 05 A1 |  if_e	add	objptr, ##46052
0b4c8     F2 22 02 AB |  if_e	rdlong	local03, objptr
0b4cc     A7 22 62 AC |  if_e	wrlong	local03, fp
0b4d0     59 00 00 AF 
0b4d4     E4 E5 85 A1 |  if_e	sub	objptr, ##46052
0b4d8     A7 22 02 5B |  if_ne	rdlong	local03, fp
0b4dc     59 00 00 5F 
0b4e0     E4 E5 05 51 |  if_ne	add	objptr, ##46052
0b4e4     F2 22 62 5C |  if_ne	wrlong	local03, objptr
0b4e8     59 00 00 5F 
0b4ec     E4 E5 85 51 |  if_ne	sub	objptr, ##46052
0b4f0                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
0b4f0     09 12 06 F6 | 	mov	arg01, #9
0b4f4     AC 85 B1 FD | 	call	#__system__close
0b4f8     09 22 06 F6 | 	mov	local03, #9
0b4fc     52 00 00 FF 
0b500     C8 E4 05 F1 | 	add	objptr, ##42184
0b504     F2 12 02 FB | 	rdlong	arg01, objptr
0b508     52 00 00 FF 
0b50c     C8 E4 85 F1 | 	sub	objptr, ##42184
0b510     73 01 00 FF 
0b514     90 14 06 F6 | 	mov	arg02, ##@LR__5118
0b518     54 36 B1 FD | 	call	#__system___string_concat
0b51c     FD 12 02 F6 | 	mov	arg01, result1
0b520     A7 14 02 FB | 	rdlong	arg02, fp
0b524     48 36 B1 FD | 	call	#__system___string_concat
0b528     FD 14 02 F6 | 	mov	arg02, result1
0b52c     11 13 02 F6 | 	mov	arg01, local03
0b530     0D 16 06 F6 | 	mov	arg03, #13
0b534     E0 41 B1 FD | 	call	#__system___basic_open_string
0b538     01 00 00 FF 
0b53c     0C 4E 05 F1 | 	add	fp, ##524
0b540     A7 0A 68 FC | 	wrlong	#5, fp
0b544     4A 00 00 FF 
0b548     B4 E4 05 F1 | 	add	objptr, ##38068
0b54c     F2 22 02 FB | 	rdlong	local03, objptr
0b550     4A 00 00 FF 
0b554     B4 E4 85 F1 | 	sub	objptr, ##38068
0b558     10 4E 05 F1 | 	add	fp, #16
0b55c     A7 22 62 FC | 	wrlong	local03, fp
0b560     01 00 00 FF 
0b564     1C 4E 85 F1 | 	sub	fp, ##540
0b568                 | ' '  put #9,1,fileheader,1
0b568                 | '   i=5
0b568                 | '   saveptr=programstart
0b568                 | '   do
0b568                 | LR__0974
0b568     01 00 00 FF 
0b56c     20 4E 05 F1 | 	add	fp, ##544
0b570     A7 12 02 F6 | 	mov	arg01, fp
0b574     04 4E 85 F1 | 	sub	fp, #4
0b578     A7 14 02 FB | 	rdlong	arg02, fp
0b57c     01 00 00 FF 
0b580     1C 4E 85 F1 | 	sub	fp, ##540
0b584     18 16 06 F6 | 	mov	arg03, #24
0b588     0B 00 00 FF 
0b58c     CC E4 05 F1 | 	add	objptr, ##5836
0b590     40 29 B1 FD | 	call	#_psram_spin2_read1
0b594     01 00 00 FF 
0b598     38 4E 05 F1 | 	add	fp, ##568
0b59c     A7 12 02 F6 | 	mov	arg01, fp
0b5a0     10 4E 85 F1 | 	sub	fp, #16
0b5a4     A7 14 02 FB | 	rdlong	arg02, fp
0b5a8     04 4E 05 F1 | 	add	fp, #4
0b5ac     A7 16 02 FB | 	rdlong	arg03, fp
0b5b0     01 00 00 FF 
0b5b4     2C 4E 85 F1 | 	sub	fp, ##556
0b5b8     18 29 B1 FD | 	call	#_psram_spin2_read1
0b5bc     0B 00 00 FF 
0b5c0     CC E4 85 F1 | 	sub	objptr, ##5836
0b5c4     73 01 00 FF 
0b5c8     92 22 06 F6 | 	mov	local03, ##@LR__5119
0b5cc     01 00 00 FF 
0b5d0     B8 4E 05 F1 | 	add	fp, ##696
0b5d4     A7 22 62 FC | 	wrlong	local03, fp
0b5d8                 | '     psram.read1(varptr(header(0)),saveptr,24)
0b5d8                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
0b5d8                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
0b5d8     AC 4E 85 F1 | 	sub	fp, #172
0b5dc     A7 02 68 FC | 	wrlong	#1, fp
0b5e0     20 4E 05 F1 | 	add	fp, #32
0b5e4     A7 24 02 FB | 	rdlong	local04, fp
0b5e8     01 00 00 FF 
0b5ec     2C 4E 85 F1 | 	sub	fp, ##556
0b5f0     01 24 06 F1 | 	add	local04, #1
0b5f4                 | LR__0975
0b5f4     01 00 00 FF 
0b5f8     0C 4E 05 F1 | 	add	fp, ##524
0b5fc     A7 22 02 FB | 	rdlong	local03, fp
0b600     01 00 00 FF 
0b604     0C 4E 85 F1 | 	sub	fp, ##524
0b608     12 23 52 F2 | 	cmps	local03, local04 wc
0b60c     64 00 90 3D |  if_ae	jmp	#LR__0976
0b610     01 00 00 FF 
0b614     B8 4E 05 F1 | 	add	fp, ##696
0b618     A7 1E 02 FB | 	rdlong	local01, fp
0b61c     AC 4E 85 F1 | 	sub	fp, #172
0b620     A7 22 02 FB | 	rdlong	local03, fp
0b624     01 22 86 F1 | 	sub	local03, #1
0b628     2C 4E 05 F1 | 	add	fp, #44
0b62c     A7 22 02 F1 | 	add	local03, fp
0b630     11 13 C2 FA | 	rdbyte	arg01, local03
0b634     01 00 00 FF 
0b638     38 4E 85 F1 | 	sub	fp, ##568
0b63c     A8 56 B1 FD | 	call	#__system__Chr_S
0b640     FD 14 02 F6 | 	mov	arg02, result1
0b644     0F 13 02 F6 | 	mov	arg01, local01
0b648     24 35 B1 FD | 	call	#__system___string_concat
0b64c     01 00 00 FF 
0b650     B8 4E 05 F1 | 	add	fp, ##696
0b654     A7 FA 61 FC | 	wrlong	result1, fp
0b658     AC 4E 85 F1 | 	sub	fp, #172
0b65c     A7 22 02 FB | 	rdlong	local03, fp
0b660     01 22 06 F1 | 	add	local03, #1
0b664     A7 22 62 FC | 	wrlong	local03, fp
0b668     01 00 00 FF 
0b66c     0C 4E 85 F1 | 	sub	fp, ##524
0b670     80 FF 9F FD | 	jmp	#LR__0975
0b674                 | LR__0976
0b674                 | '  '   put #9,i,header(3),1 : i+=4
0b674                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0b674                 | '      print #9, saveline$
0b674     09 12 06 F6 | 	mov	arg01, #9
0b678     F8 8D B1 FD | 	call	#__system___getiolock_0484
0b67c     FD 12 02 F6 | 	mov	arg01, result1
0b680     90 34 B1 FD | 	call	#__system___lockmem
0b684     01 00 00 FF 
0b688     B8 4E 05 F1 | 	add	fp, ##696
0b68c     A7 14 02 FB | 	rdlong	arg02, fp
0b690     01 00 00 FF 
0b694     B8 4E 85 F1 | 	sub	fp, ##696
0b698     09 12 06 F6 | 	mov	arg01, #9
0b69c     00 16 06 F6 | 	mov	arg03, #0
0b6a0     64 41 B1 FD | 	call	#__system___basic_print_string
0b6a4     09 12 06 F6 | 	mov	arg01, #9
0b6a8     0A 14 06 F6 | 	mov	arg02, #10
0b6ac     00 16 06 F6 | 	mov	arg03, #0
0b6b0     FC 40 B1 FD | 	call	#__system___basic_print_char
0b6b4     09 12 06 F6 | 	mov	arg01, #9
0b6b8     B8 8D B1 FD | 	call	#__system___getiolock_0484
0b6bc     FD 00 68 FC | 	wrlong	#0, result1
0b6c0     01 00 00 FF 
0b6c4     34 4E 05 F1 | 	add	fp, ##564
0b6c8     A7 22 02 FB | 	rdlong	local03, fp
0b6cc     18 4E 85 F1 | 	sub	fp, #24
0b6d0     A7 22 62 FC | 	wrlong	local03, fp
0b6d4     18 4E 05 F1 | 	add	fp, #24
0b6d8     A7 22 02 FB | 	rdlong	local03, fp
0b6dc     01 00 00 FF 
0b6e0     34 4E 85 F1 | 	sub	fp, ##564
0b6e4     FF FF 3F FF 
0b6e8     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0b6ec     78 FE 9F 5D |  if_ne	jmp	#LR__0974
0b6f0                 | '   close #9  
0b6f0     09 12 06 F6 | 	mov	arg01, #9
0b6f4     AC 83 B1 FD | 	call	#__system__close
0b6f8                 | '   print "Saved as ";currentdir$+"/"+loadname
0b6f8     00 12 06 F6 | 	mov	arg01, #0
0b6fc     74 8D B1 FD | 	call	#__system___getiolock_0484
0b700     FD 12 02 F6 | 	mov	arg01, result1
0b704     0C 34 B1 FD | 	call	#__system___lockmem
0b708     73 01 00 FF 
0b70c     93 14 06 F6 | 	mov	arg02, ##@LR__5120
0b710     00 12 06 F6 | 	mov	arg01, #0
0b714     00 16 06 F6 | 	mov	arg03, #0
0b718     EC 40 B1 FD | 	call	#__system___basic_print_string
0b71c     00 20 06 F6 | 	mov	local02, #0
0b720     52 00 00 FF 
0b724     C8 E4 05 F1 | 	add	objptr, ##42184
0b728     F2 12 02 FB | 	rdlong	arg01, objptr
0b72c     52 00 00 FF 
0b730     C8 E4 85 F1 | 	sub	objptr, ##42184
0b734     73 01 00 FF 
0b738     9D 14 06 F6 | 	mov	arg02, ##@LR__5121
0b73c     30 34 B1 FD | 	call	#__system___string_concat
0b740     FD 12 02 F6 | 	mov	arg01, result1
0b744     59 00 00 FF 
0b748     E4 E5 05 F1 | 	add	objptr, ##46052
0b74c     F2 14 02 FB | 	rdlong	arg02, objptr
0b750     59 00 00 FF 
0b754     E4 E5 85 F1 | 	sub	objptr, ##46052
0b758     14 34 B1 FD | 	call	#__system___string_concat
0b75c     FD 14 02 F6 | 	mov	arg02, result1
0b760     10 13 02 F6 | 	mov	arg01, local02
0b764     00 16 06 F6 | 	mov	arg03, #0
0b768     9C 40 B1 FD | 	call	#__system___basic_print_string
0b76c     00 12 06 F6 | 	mov	arg01, #0
0b770     0A 14 06 F6 | 	mov	arg02, #10
0b774     00 16 06 F6 | 	mov	arg03, #0
0b778     34 40 B1 FD | 	call	#__system___basic_print_char
0b77c     00 12 06 F6 | 	mov	arg01, #0
0b780     F0 8C B1 FD | 	call	#__system___getiolock_0484
0b784     FD 00 68 FC | 	wrlong	#0, result1
0b788                 | LR__0977
0b788                 | LR__0978
0b788     A7 F0 03 F6 | 	mov	ptra, fp
0b78c     B2 00 A0 FD | 	call	#popregs_
0b790                 | _do_save_ret
0b790     2D 00 64 FD | 	ret
0b794                 | 
0b794                 | ' 
0b794                 | ' '----------------- Load the program
0b794                 | ' 'lo todo: errors while loading
0b794                 | ' sub do_load
0b794                 | _do_load
0b794     01 4A 05 F6 | 	mov	COUNT_, #1
0b798     A8 00 A0 FD | 	call	#pushregs_
0b79c     A8 F0 07 F1 | 	add	ptra, #168
0b7a0     4A 00 00 FF 
0b7a4     B0 E4 05 F1 | 	add	objptr, ##38064
0b7a8     F2 14 02 FB | 	rdlong	arg02, objptr
0b7ac     0A 13 02 F6 | 	mov	arg01, arg02
0b7b0     01 12 66 F0 | 	shl	arg01, #1
0b7b4     0A 13 02 F1 | 	add	arg01, arg02
0b7b8     02 12 66 F0 | 	shl	arg01, #2
0b7bc     03 00 00 FF 
0b7c0     04 E4 85 F1 | 	sub	objptr, ##1540
0b7c4     F2 12 02 F1 | 	add	arg01, objptr
0b7c8     09 15 02 FB | 	rdlong	arg02, arg01
0b7cc     18 4E 05 F1 | 	add	fp, #24
0b7d0     A7 14 62 FC | 	wrlong	arg02, fp
0b7d4     8C 4E 05 F1 | 	add	fp, #140
0b7d8     A7 12 02 F6 | 	mov	arg01, fp
0b7dc     47 00 00 FF 
0b7e0     AC E4 85 F1 | 	sub	objptr, ##36524
0b7e4     80 4E 85 F1 | 	sub	fp, #128
0b7e8     09 4F 61 FC | 	wrlong	fp, arg01
0b7ec                 | ' numpar=compiledline(lineptr_e).result.uresult
0b7ec                 | ' lpoke varptr(line2$),varptr(line2)
0b7ec                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
0b7ec     0C 4E 85 F1 | 	sub	fp, #12
0b7f0     A7 1E 02 FB | 	rdlong	local01, fp
0b7f4     18 4E 85 F1 | 	sub	fp, #24
0b7f8     01 1E 56 F2 | 	cmps	local01, #1 wc
0b7fc     20 00 90 CD |  if_b	jmp	#LR__0980
0b800     74 F0 BF FD | 	call	#_pop
0b804     A7 FA 61 FC | 	wrlong	result1, fp
0b808     04 4E 05 F1 | 	add	fp, #4
0b80c     A7 FC 61 FC | 	wrlong	result2, fp
0b810     04 4E 05 F1 | 	add	fp, #4
0b814     A7 FE 61 FC | 	wrlong	result3, fp
0b818     08 4E 85 F1 | 	sub	fp, #8
0b81c     24 00 90 FD | 	jmp	#LR__0981
0b820                 | LR__0980
0b820     59 00 00 FF 
0b824     E4 E5 05 F1 | 	add	objptr, ##46052
0b828     F2 1E 02 FB | 	rdlong	local01, objptr
0b82c     59 00 00 FF 
0b830     E4 E5 85 F1 | 	sub	objptr, ##46052
0b834     A7 1E 62 FC | 	wrlong	local01, fp
0b838     08 4E 05 F1 | 	add	fp, #8
0b83c     A7 3E 68 FC | 	wrlong	#31, fp
0b840     08 4E 85 F1 | 	sub	fp, #8
0b844                 | LR__0981
0b844                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0b844                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0b844     08 4E 05 F1 | 	add	fp, #8
0b848     A7 1E 02 FB | 	rdlong	local01, fp
0b84c     08 4E 85 F1 | 	sub	fp, #8
0b850     2B 1E 0E F2 | 	cmp	local01, #43 wz
0b854     18 00 90 5D |  if_ne	jmp	#LR__0982
0b858     A7 12 02 FB | 	rdlong	arg01, fp
0b85c     34 33 B0 FD | 	call	#_convertstring
0b860     A7 FA 61 FC | 	wrlong	result1, fp
0b864     08 4E 05 F1 | 	add	fp, #8
0b868     A7 3E 68 FC | 	wrlong	#31, fp
0b86c     08 4E 85 F1 | 	sub	fp, #8
0b870                 | LR__0982
0b870                 | ' if t1.result_type=result_string then
0b870     08 4E 05 F1 | 	add	fp, #8
0b874     A7 1E 02 FB | 	rdlong	local01, fp
0b878     08 4E 85 F1 | 	sub	fp, #8
0b87c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b880     20 04 90 5D |  if_ne	jmp	#LR__0990
0b884     C4 2B B0 FD | 	call	#_do_new
0b888                 | '   do_new
0b888                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
0b888     A7 12 02 FB | 	rdlong	arg01, fp
0b88c     73 01 00 FF 
0b890     9F 14 06 F6 | 	mov	arg02, ##@LR__5122
0b894     A4 32 B1 FD | 	call	#__system___string_cmp
0b898     00 FA 0D F2 | 	cmp	result1, #0 wz
0b89c     59 00 00 AF 
0b8a0     E4 E5 05 A1 |  if_e	add	objptr, ##46052
0b8a4     F2 1E 02 AB |  if_e	rdlong	local01, objptr
0b8a8     A7 1E 62 AC |  if_e	wrlong	local01, fp
0b8ac     59 00 00 AF 
0b8b0     E4 E5 85 A1 |  if_e	sub	objptr, ##46052
0b8b4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0b8b8     59 00 00 5F 
0b8bc     E4 E5 05 51 |  if_ne	add	objptr, ##46052
0b8c0     F2 1E 62 5C |  if_ne	wrlong	local01, objptr
0b8c4     59 00 00 5F 
0b8c8     E4 E5 85 51 |  if_ne	sub	objptr, ##46052
0b8cc                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
0b8cc     09 12 06 F6 | 	mov	arg01, #9
0b8d0     D0 81 B1 FD | 	call	#__system__close
0b8d4     09 1E 06 F6 | 	mov	local01, #9
0b8d8     52 00 00 FF 
0b8dc     C8 E4 05 F1 | 	add	objptr, ##42184
0b8e0     F2 12 02 FB | 	rdlong	arg01, objptr
0b8e4     52 00 00 FF 
0b8e8     C8 E4 85 F1 | 	sub	objptr, ##42184
0b8ec     73 01 00 FF 
0b8f0     A0 14 06 F6 | 	mov	arg02, ##@LR__5123
0b8f4     78 32 B1 FD | 	call	#__system___string_concat
0b8f8     FD 12 02 F6 | 	mov	arg01, result1
0b8fc     A7 14 02 FB | 	rdlong	arg02, fp
0b900     6C 32 B1 FD | 	call	#__system___string_concat
0b904     FD 14 02 F6 | 	mov	arg02, result1
0b908     0F 13 02 F6 | 	mov	arg01, local01
0b90c     00 16 06 F6 | 	mov	arg03, #0
0b910     04 3E B1 FD | 	call	#__system___basic_open_string
0b914     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0b918     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b91c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0b920     10 4E 05 F1 | 	add	fp, #16
0b924     A7 FA 61 FC | 	wrlong	result1, fp
0b928                 | '   r=geterr() 
0b928                 | '   if r then 
0b928     10 4E 85 F1 | 	sub	fp, #16
0b92c     48 01 90 AD |  if_e	jmp	#LR__0984
0b930                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
0b930     09 12 06 F6 | 	mov	arg01, #9
0b934     6C 81 B1 FD | 	call	#__system__close
0b938     09 1E 06 F6 | 	mov	local01, #9
0b93c     52 00 00 FF 
0b940     C8 E4 05 F1 | 	add	objptr, ##42184
0b944     F2 12 02 FB | 	rdlong	arg01, objptr
0b948     52 00 00 FF 
0b94c     C8 E4 85 F1 | 	sub	objptr, ##42184
0b950     73 01 00 FF 
0b954     A2 14 06 F6 | 	mov	arg02, ##@LR__5124
0b958     14 32 B1 FD | 	call	#__system___string_concat
0b95c     FD 12 02 F6 | 	mov	arg01, result1
0b960     A7 14 02 FB | 	rdlong	arg02, fp
0b964     08 32 B1 FD | 	call	#__system___string_concat
0b968     FD 12 02 F6 | 	mov	arg01, result1
0b96c     73 01 00 FF 
0b970     A4 14 06 F6 | 	mov	arg02, ##@LR__5125
0b974     F8 31 B1 FD | 	call	#__system___string_concat
0b978     FD 14 02 F6 | 	mov	arg02, result1
0b97c     0F 13 02 F6 | 	mov	arg01, local01
0b980     00 16 06 F6 | 	mov	arg03, #0
0b984     90 3D B1 FD | 	call	#__system___basic_open_string
0b988     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0b98c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0b990     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0b994     10 4E 05 F1 | 	add	fp, #16
0b998     A7 FA 61 FC | 	wrlong	result1, fp
0b99c                 | '     r=geterr() 
0b99c                 | '     if r then 
0b99c     10 4E 85 F1 | 	sub	fp, #16
0b9a0     A0 00 90 AD |  if_e	jmp	#LR__0983
0b9a4                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
0b9a4     00 12 06 F6 | 	mov	arg01, #0
0b9a8     C8 8A B1 FD | 	call	#__system___getiolock_0484
0b9ac     FD 12 02 F6 | 	mov	arg01, result1
0b9b0     60 31 B1 FD | 	call	#__system___lockmem
0b9b4     73 01 00 FF 
0b9b8     A9 14 06 F6 | 	mov	arg02, ##@LR__5126
0b9bc     00 12 06 F6 | 	mov	arg01, #0
0b9c0     00 16 06 F6 | 	mov	arg03, #0
0b9c4     40 3E B1 FD | 	call	#__system___basic_print_string
0b9c8     10 4E 05 F1 | 	add	fp, #16
0b9cc     A7 14 02 FB | 	rdlong	arg02, fp
0b9d0     10 4E 85 F1 | 	sub	fp, #16
0b9d4     00 12 06 F6 | 	mov	arg01, #0
0b9d8     00 16 06 F6 | 	mov	arg03, #0
0b9dc     0A 18 06 F6 | 	mov	arg04, #10
0b9e0     68 3E B1 FD | 	call	#__system___basic_print_integer
0b9e4     73 01 00 FF 
0b9e8     B7 14 06 F6 | 	mov	arg02, ##@LR__5127
0b9ec     00 12 06 F6 | 	mov	arg01, #0
0b9f0     00 16 06 F6 | 	mov	arg03, #0
0b9f4     10 3E B1 FD | 	call	#__system___basic_print_string
0b9f8     00 1E 06 F6 | 	mov	local01, #0
0b9fc     10 4E 05 F1 | 	add	fp, #16
0ba00     A7 12 02 FB | 	rdlong	arg01, fp
0ba04     10 4E 85 F1 | 	sub	fp, #16
0ba08     64 57 B1 FD | 	call	#__system___strerror
0ba0c     FD 14 02 F6 | 	mov	arg02, result1
0ba10     0F 13 02 F6 | 	mov	arg01, local01
0ba14     00 16 06 F6 | 	mov	arg03, #0
0ba18     EC 3D B1 FD | 	call	#__system___basic_print_string
0ba1c     00 12 06 F6 | 	mov	arg01, #0
0ba20     0A 14 06 F6 | 	mov	arg02, #10
0ba24     00 16 06 F6 | 	mov	arg03, #0
0ba28     84 3D B1 FD | 	call	#__system___basic_print_char
0ba2c     00 12 06 F6 | 	mov	arg01, #0
0ba30     40 8A B1 FD | 	call	#__system___getiolock_0484
0ba34     FD 00 68 FC | 	wrlong	#0, result1
0ba38     09 12 06 F6 | 	mov	arg01, #9
0ba3c     64 80 B1 FD | 	call	#__system__close
0ba40     F8 02 90 FD | 	jmp	#LR__0992
0ba44                 | LR__0983
0ba44     59 00 00 FF 
0ba48     E4 E5 05 F1 | 	add	objptr, ##46052
0ba4c     F2 12 02 FB | 	rdlong	arg01, objptr
0ba50     59 00 00 FF 
0ba54     E4 E5 85 F1 | 	sub	objptr, ##46052
0ba58     73 01 00 FF 
0ba5c     BA 14 06 F6 | 	mov	arg02, ##@LR__5128
0ba60     0C 31 B1 FD | 	call	#__system___string_concat
0ba64     59 00 00 FF 
0ba68     E4 E5 05 F1 | 	add	objptr, ##46052
0ba6c     F2 FA 61 FC | 	wrlong	result1, objptr
0ba70     59 00 00 FF 
0ba74     E4 E5 85 F1 | 	sub	objptr, ##46052
0ba78                 | LR__0984
0ba78     0C 4E 05 F1 | 	add	fp, #12
0ba7c     A7 0A 68 FC | 	wrlong	#5, fp
0ba80                 | '   i=5
0ba80                 | '   get #9,1,header,1   
0ba80     10 4E 05 F1 | 	add	fp, #16
0ba84     A7 16 02 F6 | 	mov	arg03, fp
0ba88     1C 4E 85 F1 | 	sub	fp, #28
0ba8c     09 12 06 F6 | 	mov	arg01, #9
0ba90     01 14 06 F6 | 	mov	arg02, #1
0ba94     01 18 06 F6 | 	mov	arg04, #1
0ba98     04 1A 06 F6 | 	mov	arg05, #4
0ba9c     78 3E B1 FD | 	call	#__system___basic_get
0baa0                 | '   
0baa0                 | '   if header<>$0D616272 then 
0baa0     1C 4E 05 F1 | 	add	fp, #28
0baa4     A7 1E 02 FB | 	rdlong	local01, fp
0baa8     1C 4E 85 F1 | 	sub	fp, #28
0baac     B1 B0 06 FF 
0bab0     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
0bab4     00 01 90 AD |  if_e	jmp	#LR__0987
0bab8                 | '     close #9: open currentdir$+"/"+loadname for input as #9
0bab8     09 12 06 F6 | 	mov	arg01, #9
0babc     E4 7F B1 FD | 	call	#__system__close
0bac0     09 1E 06 F6 | 	mov	local01, #9
0bac4     52 00 00 FF 
0bac8     C8 E4 05 F1 | 	add	objptr, ##42184
0bacc     F2 12 02 FB | 	rdlong	arg01, objptr
0bad0     52 00 00 FF 
0bad4     C8 E4 85 F1 | 	sub	objptr, ##42184
0bad8     73 01 00 FF 
0badc     BF 14 06 F6 | 	mov	arg02, ##@LR__5129
0bae0     8C 30 B1 FD | 	call	#__system___string_concat
0bae4     FD 12 02 F6 | 	mov	arg01, result1
0bae8     59 00 00 FF 
0baec     E4 E5 05 F1 | 	add	objptr, ##46052
0baf0     F2 14 02 FB | 	rdlong	arg02, objptr
0baf4     59 00 00 FF 
0baf8     E4 E5 85 F1 | 	sub	objptr, ##46052
0bafc     70 30 B1 FD | 	call	#__system___string_concat
0bb00     FD 14 02 F6 | 	mov	arg02, result1
0bb04     0F 13 02 F6 | 	mov	arg01, local01
0bb08     00 16 06 F6 | 	mov	arg03, #0
0bb0c     08 3C B1 FD | 	call	#__system___basic_open_string
0bb10                 | '     do
0bb10                 | LR__0985
0bb10     09 12 06 F6 | 	mov	arg01, #9
0bb14     08 32 B1 FD | 	call	#__system___basic_read_line
0bb18     37 00 00 FF 
0bb1c     4C E4 05 F1 | 	add	objptr, ##28236
0bb20     F2 FA 61 FC | 	wrlong	result1, objptr
0bb24                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
0bb24     37 00 00 FF 
0bb28     4C E4 85 F1 | 	sub	objptr, ##28236
0bb2c     FD 12 02 F6 | 	mov	arg01, result1
0bb30     01 14 06 F6 | 	mov	arg02, #1
0bb34     EC 4F B1 FD | 	call	#__system__Left_S
0bb38     FD 12 02 F6 | 	mov	arg01, result1
0bb3c     73 01 00 FF 
0bb40     C1 14 06 F6 | 	mov	arg02, ##@LR__5130
0bb44     F4 2F B1 FD | 	call	#__system___string_cmp
0bb48     00 FA 55 F2 | 	cmps	result1, #0 wc
0bb4c     34 00 90 CD |  if_b	jmp	#LR__0986
0bb50     37 00 00 FF 
0bb54     4C E4 05 F1 | 	add	objptr, ##28236
0bb58     F2 12 02 FB | 	rdlong	arg01, objptr
0bb5c     37 00 00 FF 
0bb60     4C E4 85 F1 | 	sub	objptr, ##28236
0bb64     01 14 06 F6 | 	mov	arg02, #1
0bb68     B8 4F B1 FD | 	call	#__system__Left_S
0bb6c     FD 12 02 F6 | 	mov	arg01, result1
0bb70     73 01 00 FF 
0bb74     C3 14 06 F6 | 	mov	arg02, ##@LR__5131
0bb78     C0 2F B1 FD | 	call	#__system___string_cmp
0bb7c     01 FA 55 F2 | 	cmps	result1, #1 wc
0bb80     98 4E BF CD |  if_b	call	#_interpret
0bb84                 | LR__0986
0bb84     37 00 00 FF 
0bb88     4C E4 05 F1 | 	add	objptr, ##28236
0bb8c     F2 12 02 FB | 	rdlong	arg01, objptr
0bb90     37 00 00 FF 
0bb94     4C E4 85 F1 | 	sub	objptr, ##28236
0bb98     73 01 00 FF 
0bb9c     C5 14 06 F6 | 	mov	arg02, ##@LR__5132
0bba0     98 2F B1 FD | 	call	#__system___string_cmp
0bba4     00 FA 0D F2 | 	cmp	result1, #0 wz
0bba8     64 FF 9F 5D |  if_ne	jmp	#LR__0985
0bbac                 | '     close #9
0bbac     09 12 06 F6 | 	mov	arg01, #9
0bbb0     F0 7E B1 FD | 	call	#__system__close
0bbb4     F4 00 90 FD | 	jmp	#LR__0991
0bbb8                 | LR__0987
0bbb8                 | '   'printerror(26) : close #9 : return
0bbb8                 | '     do
0bbb8                 | LR__0988
0bbb8                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
0bbb8     0C 4E 05 F1 | 	add	fp, #12
0bbbc     A7 14 02 FB | 	rdlong	arg02, fp
0bbc0     14 4E 05 F1 | 	add	fp, #20
0bbc4     A7 16 02 F6 | 	mov	arg03, fp
0bbc8     20 4E 85 F1 | 	sub	fp, #32
0bbcc     09 12 06 F6 | 	mov	arg01, #9
0bbd0     01 18 06 F6 | 	mov	arg04, #1
0bbd4     04 1A 06 F6 | 	mov	arg05, #4
0bbd8     3C 3D B1 FD | 	call	#__system___basic_get
0bbdc     14 4E 05 F1 | 	add	fp, #20
0bbe0     A7 FA 61 FC | 	wrlong	result1, fp
0bbe4     08 4E 85 F1 | 	sub	fp, #8
0bbe8     A7 1E 02 FB | 	rdlong	local01, fp
0bbec     04 1E 06 F1 | 	add	local01, #4
0bbf0     A7 1E 62 FC | 	wrlong	local01, fp
0bbf4     14 4E 05 F1 | 	add	fp, #20
0bbf8     A7 1E 02 FB | 	rdlong	local01, fp
0bbfc     04 4E 05 F1 | 	add	fp, #4
0bc00     A7 1E 02 F1 | 	add	local01, fp
0bc04     0F 01 48 FC | 	wrbyte	#0, local01
0bc08                 | '       if amount=1 then  
0bc08     10 4E 85 F1 | 	sub	fp, #16
0bc0c     A7 1E 02 FB | 	rdlong	local01, fp
0bc10     14 4E 85 F1 | 	sub	fp, #20
0bc14     01 1E 0E F2 | 	cmp	local01, #1 wz
0bc18     68 00 90 5D |  if_ne	jmp	#LR__0989
0bc1c                 | '         get #9,i,line2(0),linelength : i+=linelength
0bc1c     0C 4E 05 F1 | 	add	fp, #12
0bc20     A7 14 02 FB | 	rdlong	arg02, fp
0bc24     18 4E 05 F1 | 	add	fp, #24
0bc28     A7 16 02 F6 | 	mov	arg03, fp
0bc2c     04 4E 85 F1 | 	sub	fp, #4
0bc30     A7 18 02 FB | 	rdlong	arg04, fp
0bc34     20 4E 85 F1 | 	sub	fp, #32
0bc38     09 12 06 F6 | 	mov	arg01, #9
0bc3c     01 1A 06 F6 | 	mov	arg05, #1
0bc40     D4 3C B1 FD | 	call	#__system___basic_get
0bc44     0C 4E 05 F1 | 	add	fp, #12
0bc48     A7 1E 02 FB | 	rdlong	local01, fp
0bc4c     14 4E 05 F1 | 	add	fp, #20
0bc50     A7 1A 02 FB | 	rdlong	arg05, fp
0bc54     0D 1F 02 F1 | 	add	local01, arg05
0bc58     14 4E 85 F1 | 	sub	fp, #20
0bc5c     A7 1E 62 FC | 	wrlong	local01, fp
0bc60     98 4E 05 F1 | 	add	fp, #152
0bc64     A7 1E 02 FB | 	rdlong	local01, fp
0bc68     A4 4E 85 F1 | 	sub	fp, #164
0bc6c     37 00 00 FF 
0bc70     4C E4 05 F1 | 	add	objptr, ##28236
0bc74     F2 1E 62 FC | 	wrlong	local01, objptr
0bc78     37 00 00 FF 
0bc7c     4C E4 85 F1 | 	sub	objptr, ##28236
0bc80     98 4D BF FD | 	call	#_interpret
0bc84                 | LR__0989
0bc84     14 4E 05 F1 | 	add	fp, #20
0bc88     A7 1E 02 FB | 	rdlong	local01, fp
0bc8c     14 4E 85 F1 | 	sub	fp, #20
0bc90     01 1E 56 F2 | 	cmps	local01, #1 wc
0bc94     20 FF 9F 3D |  if_ae	jmp	#LR__0988
0bc98                 | '     close #9 
0bc98     09 12 06 F6 | 	mov	arg01, #9
0bc9c     04 7E B1 FD | 	call	#__system__close
0bca0     08 00 90 FD | 	jmp	#LR__0991
0bca4                 | LR__0990
0bca4     1E 12 06 F6 | 	mov	arg01, #30
0bca8     C0 E9 B0 FD | 	call	#_printerror
0bcac                 | LR__0991
0bcac                 | '   print "Loaded ";currentdir$+"/"+loadname
0bcac     00 12 06 F6 | 	mov	arg01, #0
0bcb0     C0 87 B1 FD | 	call	#__system___getiolock_0484
0bcb4     FD 12 02 F6 | 	mov	arg01, result1
0bcb8     58 2E B1 FD | 	call	#__system___lockmem
0bcbc     73 01 00 FF 
0bcc0     C6 14 06 F6 | 	mov	arg02, ##@LR__5133
0bcc4     00 12 06 F6 | 	mov	arg01, #0
0bcc8     00 16 06 F6 | 	mov	arg03, #0
0bccc     38 3B B1 FD | 	call	#__system___basic_print_string
0bcd0     00 1E 06 F6 | 	mov	local01, #0
0bcd4     52 00 00 FF 
0bcd8     C8 E4 05 F1 | 	add	objptr, ##42184
0bcdc     F2 12 02 FB | 	rdlong	arg01, objptr
0bce0     52 00 00 FF 
0bce4     C8 E4 85 F1 | 	sub	objptr, ##42184
0bce8     73 01 00 FF 
0bcec     CE 14 06 F6 | 	mov	arg02, ##@LR__5134
0bcf0     7C 2E B1 FD | 	call	#__system___string_concat
0bcf4     FD 12 02 F6 | 	mov	arg01, result1
0bcf8     59 00 00 FF 
0bcfc     E4 E5 05 F1 | 	add	objptr, ##46052
0bd00     F2 14 02 FB | 	rdlong	arg02, objptr
0bd04     59 00 00 FF 
0bd08     E4 E5 85 F1 | 	sub	objptr, ##46052
0bd0c     60 2E B1 FD | 	call	#__system___string_concat
0bd10     FD 14 02 F6 | 	mov	arg02, result1
0bd14     0F 13 02 F6 | 	mov	arg01, local01
0bd18     00 16 06 F6 | 	mov	arg03, #0
0bd1c     E8 3A B1 FD | 	call	#__system___basic_print_string
0bd20     00 12 06 F6 | 	mov	arg01, #0
0bd24     0A 14 06 F6 | 	mov	arg02, #10
0bd28     00 16 06 F6 | 	mov	arg03, #0
0bd2c     80 3A B1 FD | 	call	#__system___basic_print_char
0bd30     00 12 06 F6 | 	mov	arg01, #0
0bd34     3C 87 B1 FD | 	call	#__system___getiolock_0484
0bd38     FD 00 68 FC | 	wrlong	#0, result1
0bd3c                 | LR__0992
0bd3c     A7 F0 03 F6 | 	mov	ptra, fp
0bd40     B2 00 A0 FD | 	call	#popregs_
0bd44                 | _do_load_ret
0bd44     2D 00 64 FD | 	ret
0bd48                 | 
0bd48                 | ' 
0bd48                 | ' sub do_end
0bd48                 | _do_end
0bd48     4A 00 00 FF 
0bd4c     AC E4 05 F1 | 	add	objptr, ##38060
0bd50     F2 00 02 FB | 	rdlong	_var01, objptr
0bd54     01 00 86 F1 | 	sub	_var01, #1
0bd58     04 E4 05 F1 | 	add	objptr, #4
0bd5c     F2 00 62 FC | 	wrlong	_var01, objptr
0bd60     0E 00 00 FF 
0bd64     3C E4 05 F1 | 	add	objptr, ##7228
0bd68     FF FF BF FF 
0bd6c     F2 FE 6B FC | 	wrlong	##2147483647, objptr
0bd70     58 00 00 FF 
0bd74     EC E4 85 F1 | 	sub	objptr, ##45292
0bd78                 | _do_end_ret
0bd78     2D 00 64 FD | 	ret
0bd7c                 | 
0bd7c                 | ' 
0bd7c                 | ' '----------------- Run the program 
0bd7c                 | ' 
0bd7c                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
0bd7c                 | ' 
0bd7c                 | ' sub do_run
0bd7c                 | _do_run
0bd7c     01 4A 05 F6 | 	mov	COUNT_, #1
0bd80     A8 00 A0 FD | 	call	#pushregs_
0bd84     4A 00 00 FF 
0bd88     B0 E4 05 F1 | 	add	objptr, ##38064
0bd8c     F2 18 02 FB | 	rdlong	arg04, objptr
0bd90     0C 17 02 F6 | 	mov	arg03, arg04
0bd94     01 16 66 F0 | 	shl	arg03, #1
0bd98     0C 17 02 F1 | 	add	arg03, arg04
0bd9c     02 16 66 F0 | 	shl	arg03, #2
0bda0     03 00 00 FF 
0bda4     04 E4 85 F1 | 	sub	objptr, ##1540
0bda8     F2 16 02 F1 | 	add	arg03, objptr
0bdac     0B 15 02 FB | 	rdlong	arg02, arg03
0bdb0                 | ' numpar=compiledline(lineptr_e).result.uresult
0bdb0                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
0bdb0     01 14 0E F2 | 	cmp	arg02, #1 wz
0bdb4     47 00 00 FF 
0bdb8     AC E4 85 F1 | 	sub	objptr, ##36524
0bdbc     D4 F9 BF AD |  if_e	call	#_do_load
0bdc0     4A 00 00 FF 
0bdc4     B4 E4 05 F1 | 	add	objptr, ##38068
0bdc8     F2 18 02 FB | 	rdlong	arg04, objptr
0bdcc     0E 00 00 FF 
0bdd0     38 E4 05 F1 | 	add	objptr, ##7224
0bdd4     F2 18 62 FC | 	wrlong	arg04, objptr
0bdd8     04 E4 05 F1 | 	add	objptr, #4
0bddc     F2 00 68 FC | 	wrlong	#0, objptr
0bde0     04 E4 05 F1 | 	add	objptr, #4
0bde4     FF FF FF FF 
0bde8     F2 FE 6B FC | 	wrlong	##-1, objptr
0bdec                 | ' if inrun>0 then 
0bdec     04 E4 05 F1 | 	add	objptr, #4
0bdf0     F2 18 02 FB | 	rdlong	arg04, objptr
0bdf4     58 00 00 FF 
0bdf8     F8 E4 85 F1 | 	sub	objptr, ##45304
0bdfc     01 18 16 F2 | 	cmp	arg04, #1 wc
0be00     30 00 90 CD |  if_b	jmp	#LR__1000
0be04     58 00 00 FF 
0be08     FC E4 05 F1 | 	add	objptr, ##45308
0be0c     F2 12 02 F6 | 	mov	arg01, objptr
0be10     10 E4 85 F1 | 	sub	objptr, #16
0be14     F2 14 02 FB | 	rdlong	arg02, objptr
0be18     18 16 06 F6 | 	mov	arg03, #24
0be1c     4D 00 00 FF 
0be20     20 E4 85 F1 | 	sub	objptr, ##39456
0be24     AC 20 B1 FD | 	call	#_psram_spin2_read1
0be28     0B 00 00 FF 
0be2c     CC E4 85 F1 | 	sub	objptr, ##5836
0be30                 | '   psram.read1(varptr(runheader),runptr,24)  
0be30                 | '   return
0be30     88 02 90 FD | 	jmp	#LR__1006
0be34                 | LR__1000
0be34     58 00 00 FF 
0be38     F8 E4 05 F1 | 	add	objptr, ##45304
0be3c     F2 02 68 FC | 	wrlong	#1, objptr
0be40     04 E4 05 F1 | 	add	objptr, #4
0be44     F2 12 02 F6 | 	mov	arg01, objptr
0be48     10 E4 85 F1 | 	sub	objptr, #16
0be4c     F2 14 02 FB | 	rdlong	arg02, objptr
0be50     18 16 06 F6 | 	mov	arg03, #24
0be54     4D 00 00 FF 
0be58     20 E4 85 F1 | 	sub	objptr, ##39456
0be5c     74 20 B1 FD | 	call	#_psram_spin2_read1
0be60                 | ' inrun=1
0be60                 | ' psram.read1(varptr(runheader),runptr,24) 
0be60                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
0be60     4D 00 00 FF 
0be64     30 E4 05 F1 | 	add	objptr, ##39472
0be68     F2 1E 02 FB | 	rdlong	local01, objptr
0be6c     58 00 00 FF 
0be70     FC E4 85 F1 | 	sub	objptr, ##45308
0be74     FF FF 7F FF 
0be78     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
0be7c     58 00 00 AF 
0be80     F8 E4 05 A1 |  if_e	add	objptr, ##45304
0be84     F2 00 68 AC |  if_e	wrlong	#0, objptr
0be88     58 00 00 AF 
0be8c     F8 E4 85 A1 |  if_e	sub	objptr, ##45304
0be90     28 02 90 AD |  if_e	jmp	#LR__1006
0be94                 | ' do 
0be94                 | LR__1001
0be94                 | '   if runptr<>oldrunptr then
0be94     58 00 00 FF 
0be98     EC E4 05 F1 | 	add	objptr, ##45292
0be9c     F2 1E 02 FB | 	rdlong	local01, objptr
0bea0     08 E4 05 F1 | 	add	objptr, #8
0bea4     F2 18 02 FB | 	rdlong	arg04, objptr
0bea8     58 00 00 FF 
0beac     F4 E4 85 F1 | 	sub	objptr, ##45300
0beb0     0C 1F 0A F2 | 	cmp	local01, arg04 wz
0beb4     CC 00 90 AD |  if_e	jmp	#LR__1002
0beb8     58 00 00 FF 
0bebc     FC E4 05 F1 | 	add	objptr, ##45308
0bec0     F2 12 02 F6 | 	mov	arg01, objptr
0bec4     10 E4 85 F1 | 	sub	objptr, #16
0bec8     F2 14 02 FB | 	rdlong	arg02, objptr
0becc     18 16 06 F6 | 	mov	arg03, #24
0bed0     4D 00 00 FF 
0bed4     20 E4 85 F1 | 	sub	objptr, ##39456
0bed8     F8 1F B1 FD | 	call	#_psram_spin2_read1
0bedc     3B 00 00 FF 
0bee0     E0 E5 05 F1 | 	add	objptr, ##30688
0bee4     F2 12 02 F6 | 	mov	arg01, objptr
0bee8     11 00 00 FF 
0beec     40 E4 05 F1 | 	add	objptr, ##8768
0bef0     F2 14 02 FB | 	rdlong	arg02, objptr
0bef4     13 00 00 FF 
0bef8     58 E4 85 F1 | 	sub	objptr, ##9816
0befc     F2 1E 02 FB | 	rdlong	local01, objptr
0bf00     01 1E 66 F0 | 	shl	local01, #1
0bf04     0F 15 02 F1 | 	add	arg02, local01
0bf08     13 00 00 FF 
0bf0c     70 E4 05 F1 | 	add	objptr, ##9840
0bf10     F2 16 02 FB | 	rdlong	arg03, objptr
0bf14     18 E4 85 F1 | 	sub	objptr, #24
0bf18     F2 1E 02 FB | 	rdlong	local01, objptr
0bf1c     0F 17 82 F1 | 	sub	arg03, local01
0bf20     4D 00 00 FF 
0bf24     20 E4 85 F1 | 	sub	objptr, ##39456
0bf28     A8 1F B1 FD | 	call	#_psram_spin2_read1
0bf2c     4D 00 00 FF 
0bf30     38 E4 05 F1 | 	add	objptr, ##39480
0bf34     F2 1E 02 FB | 	rdlong	local01, objptr
0bf38     18 E4 85 F1 | 	sub	objptr, #24
0bf3c     F2 FA 01 FB | 	rdlong	result1, objptr
0bf40     FD 1E 82 F1 | 	sub	local01, result1
0bf44     13 00 00 FF 
0bf48     58 E4 85 F1 | 	sub	objptr, ##9816
0bf4c     F2 FA 01 FB | 	rdlong	result1, objptr
0bf50     FD 1E 12 FD | 	qdiv	local01, result1
0bf54     05 00 00 FF 
0bf58     18 E4 05 F1 | 	add	objptr, ##2584
0bf5c     18 1E 62 FD | 	getqx	local01
0bf60     03 1E 86 F1 | 	sub	local01, #3
0bf64     F2 1E 62 FC | 	wrlong	local01, objptr
0bf68     0E 00 00 FF 
0bf6c     40 E4 05 F1 | 	add	objptr, ##7232
0bf70     F2 1E 02 FB | 	rdlong	local01, objptr
0bf74     08 E4 05 F1 | 	add	objptr, #8
0bf78     F2 1E 62 FC | 	wrlong	local01, objptr
0bf7c     58 00 00 FF 
0bf80     F4 E4 85 F1 | 	sub	objptr, ##45300
0bf84                 | LR__1002
0bf84     58 00 00 FF 
0bf88     10 E5 05 F1 | 	add	objptr, ##45328
0bf8c     F2 1E 02 FB | 	rdlong	local01, objptr
0bf90     24 E4 85 F1 | 	sub	objptr, #36
0bf94     F2 1E 62 FC | 	wrlong	local01, objptr
0bf98     04 E4 05 F1 | 	add	objptr, #4
0bf9c     F2 12 02 FB | 	rdlong	arg01, objptr
0bfa0     58 00 00 FF 
0bfa4     F0 E4 85 F1 | 	sub	objptr, ##45296
0bfa8     C8 E7 BF FD | 	call	#_execute_line
0bfac     58 00 00 FF 
0bfb0     F0 E4 05 F1 | 	add	objptr, ##45296
0bfb4     F2 FA 61 FC | 	wrlong	result1, objptr
0bfb8     04 E4 85 F1 | 	sub	objptr, #4
0bfbc     F2 1E 02 FB | 	rdlong	local01, objptr
0bfc0     58 00 00 FF 
0bfc4     EC E4 85 F1 | 	sub	objptr, ##45292
0bfc8     FF FF 3F FF 
0bfcc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0bfd0     30 00 90 AD |  if_e	jmp	#LR__1004
0bfd4     E0 12 06 F6 | 	mov	arg01, #224
0bfd8     88 22 B1 FD | 	call	#_usbnew_spin2_keystate
0bfdc     00 FA 0D F2 | 	cmp	result1, #0 wz
0bfe0     10 00 90 5D |  if_ne	jmp	#LR__1003
0bfe4     E4 12 06 F6 | 	mov	arg01, #228
0bfe8     78 22 B1 FD | 	call	#_usbnew_spin2_keystate
0bfec     00 FA 0D F2 | 	cmp	result1, #0 wz
0bff0     A0 FE 9F AD |  if_e	jmp	#LR__1001
0bff4                 | LR__1003
0bff4     06 12 06 F6 | 	mov	arg01, #6
0bff8     68 22 B1 FD | 	call	#_usbnew_spin2_keystate
0bffc     00 FA 0D F2 | 	cmp	result1, #0 wz
0c000     90 FE 9F AD |  if_e	jmp	#LR__1001
0c004                 | LR__1004
0c004                 | '   ''do whatever kbm.peek_latest_key()=$106 
0c004                 | ' if runptr<>$7FFF_FFFF then 
0c004     58 00 00 FF 
0c008     EC E4 05 F1 | 	add	objptr, ##45292
0c00c     F2 1E 02 FB | 	rdlong	local01, objptr
0c010     58 00 00 FF 
0c014     EC E4 85 F1 | 	sub	objptr, ##45292
0c018     FF FF 3F FF 
0c01c     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0c020     64 00 90 AD |  if_e	jmp	#LR__1005
0c024                 | '     print "Stopped at line ";runheader(0)
0c024     00 12 06 F6 | 	mov	arg01, #0
0c028     48 84 B1 FD | 	call	#__system___getiolock_0484
0c02c     FD 12 02 F6 | 	mov	arg01, result1
0c030     E0 2A B1 FD | 	call	#__system___lockmem
0c034     73 01 00 FF 
0c038     D0 14 06 F6 | 	mov	arg02, ##@LR__5135
0c03c     00 12 06 F6 | 	mov	arg01, #0
0c040     00 16 06 F6 | 	mov	arg03, #0
0c044     C0 37 B1 FD | 	call	#__system___basic_print_string
0c048     58 00 00 FF 
0c04c     FC E4 05 F1 | 	add	objptr, ##45308
0c050     F2 14 02 FB | 	rdlong	arg02, objptr
0c054     58 00 00 FF 
0c058     FC E4 85 F1 | 	sub	objptr, ##45308
0c05c     00 12 06 F6 | 	mov	arg01, #0
0c060     00 16 06 F6 | 	mov	arg03, #0
0c064     0A 18 06 F6 | 	mov	arg04, #10
0c068     20 38 B1 FD | 	call	#__system___basic_print_unsigned
0c06c     00 12 06 F6 | 	mov	arg01, #0
0c070     0A 14 06 F6 | 	mov	arg02, #10
0c074     00 16 06 F6 | 	mov	arg03, #0
0c078     34 37 B1 FD | 	call	#__system___basic_print_char
0c07c     00 12 06 F6 | 	mov	arg01, #0
0c080     F0 83 B1 FD | 	call	#__system___getiolock_0484
0c084     FD 00 68 FC | 	wrlong	#0, result1
0c088                 | LR__1005
0c088     58 00 00 FF 
0c08c     F8 E4 05 F1 | 	add	objptr, ##45304
0c090     F2 00 68 FC | 	wrlong	#0, objptr
0c094     58 00 00 FF 
0c098     F8 E4 85 F1 | 	sub	objptr, ##45304
0c09c     11 12 06 F6 | 	mov	arg01, #17
0c0a0     08 14 06 F6 | 	mov	arg02, #8
0c0a4     10 16 06 F6 | 	mov	arg03, #16
0c0a8     A0 06 B1 FD | 	call	#_hg010b_spin2_setspritesize
0c0ac     10 12 06 F6 | 	mov	arg01, #16
0c0b0     20 14 06 F6 | 	mov	arg02, #32
0c0b4     20 16 06 F6 | 	mov	arg03, #32
0c0b8     90 06 B1 FD | 	call	#_hg010b_spin2_setspritesize
0c0bc                 | LR__1006
0c0bc     A7 F0 03 F6 | 	mov	ptra, fp
0c0c0     B2 00 A0 FD | 	call	#popregs_
0c0c4                 | _do_run_ret
0c0c4     2D 00 64 FD | 	ret
0c0c8                 | 
0c0c8                 | ' 
0c0c8                 | ' 
0c0c8                 | ' 
0c0c8                 | ' 
0c0c8                 | ' 
0c0c8                 | ' 
0c0c8                 | ' 
0c0c8                 | ' sub do_defenv
0c0c8                 | _do_defenv
0c0c8     08 4A 05 F6 | 	mov	COUNT_, #8
0c0cc     A8 00 A0 FD | 	call	#pushregs_
0c0d0     B4 F0 07 F1 | 	add	ptra, #180
0c0d4     4A 00 00 FF 
0c0d8     B0 E4 05 F1 | 	add	objptr, ##38064
0c0dc     F2 1E 02 FB | 	rdlong	local01, objptr
0c0e0     0F 1B 02 F6 | 	mov	arg05, local01
0c0e4     01 1A 66 F0 | 	shl	arg05, #1
0c0e8     0F 1B 02 F1 | 	add	arg05, local01
0c0ec     02 1A 66 F0 | 	shl	arg05, #2
0c0f0     03 00 00 FF 
0c0f4     04 E4 85 F1 | 	sub	objptr, ##1540
0c0f8     F2 20 02 F6 | 	mov	local02, objptr
0c0fc     F2 1A 02 F1 | 	add	arg05, objptr
0c100     0D 1B 02 FB | 	rdlong	arg05, arg05
0c104     10 4E 05 F1 | 	add	fp, #16
0c108     A7 1A 62 FC | 	wrlong	arg05, fp
0c10c                 | ' 
0c10c                 | ' numpar=compiledline(lineptr_e).result.uresult
0c10c                 | ' 
0c10c                 | ' 
0c10c                 | ' ' defenv channel, string - tries to load from /media/h a h2 file from PC-Softsynth
0c10c                 | ' 'TODO for 2.0: ' defenv channel, l1,r1,l2,r2,l3,r3,l4,r4 - defines ADSR in Yamaha DX  style, except these are linear values
0c10c                 | ' ' defsnd channel, a,d,s,r - defines ADSR attack time, decay time, sus level, release time. Sus point has to be returned - how?
0c10c                 | ' 
0c10c                 | ' 
0c10c                 | ' if numpar<>2 andalso numpar<>5 andalso numpar<>9 then return ' and print error
0c10c     10 4E 85 F1 | 	sub	fp, #16
0c110     02 1A 0E F2 | 	cmp	arg05, #2 wz
0c114     47 00 00 FF 
0c118     AC E4 85 F1 | 	sub	objptr, ##36524
0c11c     10 4E 05 51 |  if_ne	add	fp, #16
0c120     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c124     10 4E 85 51 |  if_ne	sub	fp, #16
0c128     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0c12c     10 4E 05 51 |  if_ne	add	fp, #16
0c130     0F 21 02 56 |  if_ne	mov	local02, local01
0c134     10 4E 85 51 |  if_ne	sub	fp, #16
0c138     09 20 0E 52 |  if_ne	cmp	local02, #9 wz
0c13c     10 0C 90 5D |  if_ne	jmp	#LR__1031
0c140                 | ' 
0c140                 | '  
0c140                 | ' if numpar=2 then
0c140     10 4E 05 F1 | 	add	fp, #16
0c144     A7 20 02 FB | 	rdlong	local02, fp
0c148     10 4E 85 F1 | 	sub	fp, #16
0c14c     02 20 0E F2 | 	cmp	local02, #2 wz
0c150     24 04 90 5D |  if_ne	jmp	#LR__1023
0c154     20 E7 BF FD | 	call	#_pop
0c158     FF 1A 02 F6 | 	mov	arg05, result3
0c15c     5C 4E 05 F1 | 	add	fp, #92
0c160     A7 FA 61 FC | 	wrlong	result1, fp
0c164     04 4E 05 F1 | 	add	fp, #4
0c168     A7 FC 61 FC | 	wrlong	result2, fp
0c16c     04 4E 05 F1 | 	add	fp, #4
0c170     A7 1A 62 FC | 	wrlong	arg05, fp
0c174                 | '   t1=pop()
0c174                 | '   if t1.result_type=result_string2 then 
0c174     64 4E 85 F1 | 	sub	fp, #100
0c178     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0c17c     20 00 90 5D |  if_ne	jmp	#LR__1010
0c180     5C 4E 05 F1 | 	add	fp, #92
0c184     A7 12 02 FB | 	rdlong	arg01, fp
0c188     5C 4E 85 F1 | 	sub	fp, #92
0c18c     04 2A B0 FD | 	call	#_convertstring
0c190     68 4E 05 F1 | 	add	fp, #104
0c194     A7 FA 61 FC | 	wrlong	result1, fp
0c198     68 4E 85 F1 | 	sub	fp, #104
0c19c     58 00 90 FD | 	jmp	#LR__1013
0c1a0                 | LR__1010
0c1a0     64 4E 05 F1 | 	add	fp, #100
0c1a4     A7 20 02 FB | 	rdlong	local02, fp
0c1a8     64 4E 85 F1 | 	sub	fp, #100
0c1ac     1F 20 0E F2 | 	cmp	local02, #31 wz
0c1b0     18 00 90 5D |  if_ne	jmp	#LR__1011
0c1b4     5C 4E 05 F1 | 	add	fp, #92
0c1b8     A7 20 02 FB | 	rdlong	local02, fp
0c1bc     0C 4E 05 F1 | 	add	fp, #12
0c1c0     A7 20 62 FC | 	wrlong	local02, fp
0c1c4     68 4E 85 F1 | 	sub	fp, #104
0c1c8     2C 00 90 FD | 	jmp	#LR__1012
0c1cc                 | LR__1011
0c1cc     73 01 00 FF 
0c1d0     E1 20 06 F6 | 	mov	local02, ##@LR__5136
0c1d4     68 4E 05 F1 | 	add	fp, #104
0c1d8     A7 20 62 FC | 	wrlong	local02, fp
0c1dc     0C 4E 85 F1 | 	sub	fp, #12
0c1e0     A7 12 02 F6 | 	mov	arg01, fp
0c1e4     5C 4E 85 F1 | 	sub	fp, #92
0c1e8     CC 71 B0 FD | 	call	#_converttoint
0c1ec     24 4E 05 F1 | 	add	fp, #36
0c1f0     A7 FA 61 FC | 	wrlong	result1, fp
0c1f4     24 4E 85 F1 | 	sub	fp, #36
0c1f8                 | LR__1012
0c1f8                 | LR__1013
0c1f8                 | ' 
0c1f8                 | '     
0c1f8                 | '   if s1<>"" then 
0c1f8     68 4E 05 F1 | 	add	fp, #104
0c1fc     A7 12 02 FB | 	rdlong	arg01, fp
0c200     68 4E 85 F1 | 	sub	fp, #104
0c204     73 01 00 FF 
0c208     E2 14 06 F6 | 	mov	arg02, ##@LR__5137
0c20c     2C 29 B1 FD | 	call	#__system___string_cmp
0c210     00 FA 0D F2 | 	cmp	result1, #0 wz
0c214     24 02 90 AD |  if_e	jmp	#LR__1017
0c218     5C E6 BF FD | 	call	#_pop
0c21c     FF 1E 02 F6 | 	mov	local01, result3
0c220     5C 4E 05 F1 | 	add	fp, #92
0c224     A7 FA 61 FC | 	wrlong	result1, fp
0c228     04 4E 05 F1 | 	add	fp, #4
0c22c     A7 FC 61 FC | 	wrlong	result2, fp
0c230     04 4E 05 F1 | 	add	fp, #4
0c234     A7 1E 62 FC | 	wrlong	local01, fp
0c238     08 4E 85 F1 | 	sub	fp, #8
0c23c     A7 12 02 F6 | 	mov	arg01, fp
0c240     5C 4E 85 F1 | 	sub	fp, #92
0c244     70 71 B0 FD | 	call	#_converttoint
0c248     20 4E 05 F1 | 	add	fp, #32
0c24c     A7 FA 61 FC | 	wrlong	result1, fp
0c250     20 4E 85 F1 | 	sub	fp, #32
0c254                 | '     t1=pop()
0c254                 | '     channel=converttoint(t1) 
0c254                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0c254     09 12 06 F6 | 	mov	arg01, #9
0c258     48 78 B1 FD | 	call	#__system__close
0c25c     09 20 06 F6 | 	mov	local02, #9
0c260     73 01 00 FF 
0c264     E3 12 06 F6 | 	mov	arg01, ##@LR__5138
0c268     68 4E 05 F1 | 	add	fp, #104
0c26c     A7 14 02 FB | 	rdlong	arg02, fp
0c270     68 4E 85 F1 | 	sub	fp, #104
0c274     F8 28 B1 FD | 	call	#__system___string_concat
0c278     FD 14 02 F6 | 	mov	arg02, result1
0c27c     10 13 02 F6 | 	mov	arg01, local02
0c280     00 16 06 F6 | 	mov	arg03, #0
0c284     90 34 B1 FD | 	call	#__system___basic_open_string
0c288     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0c28c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0c290     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0c294     0C 4E 05 F1 | 	add	fp, #12
0c298     A7 FA 61 FC | 	wrlong	result1, fp
0c29c                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0c29c     0C 4E 85 F1 | 	sub	fp, #12
0c2a0     A0 00 90 AD |  if_e	jmp	#LR__1014
0c2a4     00 12 06 F6 | 	mov	arg01, #0
0c2a8     C8 81 B1 FD | 	call	#__system___getiolock_0484
0c2ac     FD 12 02 F6 | 	mov	arg01, result1
0c2b0     60 28 B1 FD | 	call	#__system___lockmem
0c2b4     73 01 00 FF 
0c2b8     F0 14 06 F6 | 	mov	arg02, ##@LR__5139
0c2bc     00 12 06 F6 | 	mov	arg01, #0
0c2c0     00 16 06 F6 | 	mov	arg03, #0
0c2c4     40 35 B1 FD | 	call	#__system___basic_print_string
0c2c8     0C 4E 05 F1 | 	add	fp, #12
0c2cc     A7 14 02 FB | 	rdlong	arg02, fp
0c2d0     0C 4E 85 F1 | 	sub	fp, #12
0c2d4     00 12 06 F6 | 	mov	arg01, #0
0c2d8     00 16 06 F6 | 	mov	arg03, #0
0c2dc     0A 18 06 F6 | 	mov	arg04, #10
0c2e0     68 35 B1 FD | 	call	#__system___basic_print_integer
0c2e4     73 01 00 FF 
0c2e8     FE 14 06 F6 | 	mov	arg02, ##@LR__5140
0c2ec     00 12 06 F6 | 	mov	arg01, #0
0c2f0     00 16 06 F6 | 	mov	arg03, #0
0c2f4     10 35 B1 FD | 	call	#__system___basic_print_string
0c2f8     00 20 06 F6 | 	mov	local02, #0
0c2fc     0C 4E 05 F1 | 	add	fp, #12
0c300     A7 12 02 FB | 	rdlong	arg01, fp
0c304     0C 4E 85 F1 | 	sub	fp, #12
0c308     64 4E B1 FD | 	call	#__system___strerror
0c30c     FD 14 02 F6 | 	mov	arg02, result1
0c310     10 13 02 F6 | 	mov	arg01, local02
0c314     00 16 06 F6 | 	mov	arg03, #0
0c318     EC 34 B1 FD | 	call	#__system___basic_print_string
0c31c     00 12 06 F6 | 	mov	arg01, #0
0c320     0A 14 06 F6 | 	mov	arg02, #10
0c324     00 16 06 F6 | 	mov	arg03, #0
0c328     84 34 B1 FD | 	call	#__system___basic_print_char
0c32c     00 12 06 F6 | 	mov	arg01, #0
0c330     40 81 B1 FD | 	call	#__system___getiolock_0484
0c334     FD 00 68 FC | 	wrlong	#0, result1
0c338     09 12 06 F6 | 	mov	arg01, #9
0c33c     64 77 B1 FD | 	call	#__system__close
0c340     0C 0A 90 FD | 	jmp	#LR__1031
0c344                 | LR__1014
0c344                 | '     get #9,17,envbuf8(channel,0),256
0c344     20 4E 05 F1 | 	add	fp, #32
0c348     A7 1A 02 FB | 	rdlong	arg05, fp
0c34c     20 4E 85 F1 | 	sub	fp, #32
0c350     0D 17 02 F6 | 	mov	arg03, arg05
0c354     09 16 66 F0 | 	shl	arg03, #9
0c358     0D 17 02 F1 | 	add	arg03, arg05
0c35c     0C 00 00 FF 
0c360     D8 E4 05 F1 | 	add	objptr, ##6360
0c364     F2 16 02 F1 | 	add	arg03, objptr
0c368     09 12 06 F6 | 	mov	arg01, #9
0c36c     11 14 06 F6 | 	mov	arg02, #17
0c370     00 19 06 F6 | 	mov	arg04, #256
0c374     01 1A 06 F6 | 	mov	arg05, #1
0c378     0C 00 00 FF 
0c37c     D8 E4 85 F1 | 	sub	objptr, ##6360
0c380     94 35 B1 FD | 	call	#__system___basic_get
0c384                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0c384     14 4E 05 F1 | 	add	fp, #20
0c388     A7 FE 69 FC | 	wrlong	#255, fp
0c38c     14 4E 85 F1 | 	sub	fp, #20
0c390     0C 00 00 FF 
0c394     D8 E4 05 F1 | 	add	objptr, ##6360
0c398     97 30 48 FB | 	callpa	#(@LR__1016-@LR__1015)>>2,fcache_load_ptr_
0c39c                 | LR__1015
0c39c     20 4E 05 F1 | 	add	fp, #32
0c3a0     A7 18 02 FB | 	rdlong	arg04, fp
0c3a4     0C 21 02 F6 | 	mov	local02, arg04
0c3a8     09 20 66 F0 | 	shl	local02, #9
0c3ac     F2 20 02 F1 | 	add	local02, objptr
0c3b0     0C 4E 85 F1 | 	sub	fp, #12
0c3b4     A7 1E 02 FB | 	rdlong	local01, fp
0c3b8     0F 1B 02 F6 | 	mov	arg05, local01
0c3bc     01 1A 66 F0 | 	shl	arg05, #1
0c3c0     10 1B 02 F1 | 	add	arg05, local02
0c3c4     0C 21 02 F6 | 	mov	local02, arg04
0c3c8     09 20 66 F0 | 	shl	local02, #9
0c3cc     0C 21 02 F1 | 	add	local02, arg04
0c3d0     F2 20 02 F1 | 	add	local02, objptr
0c3d4     10 1F 02 F1 | 	add	local01, local02
0c3d8     0F 21 C2 FA | 	rdbyte	local02, local01
0c3dc     00 21 06 FA | 	mul	local02, #256
0c3e0     0D 21 52 FC | 	wrword	local02, arg05
0c3e4     A7 20 02 FB | 	rdlong	local02, fp
0c3e8     01 20 86 F1 | 	sub	local02, #1
0c3ec     A7 20 62 FC | 	wrlong	local02, fp
0c3f0     14 4E 85 F1 | 	sub	fp, #20
0c3f4     00 20 56 F2 | 	cmps	local02, #0 wc
0c3f8     A0 FF 9F 3D |  if_ae	jmp	#LR__1015
0c3fc                 | LR__1016
0c3fc     0C 00 00 FF 
0c400     D8 E4 85 F1 | 	sub	objptr, ##6360
0c404                 | '     close #9
0c404     09 12 06 F6 | 	mov	arg01, #9
0c408     98 76 B1 FD | 	call	#__system__close
0c40c     20 4E 05 F1 | 	add	fp, #32
0c410     A7 20 02 FB | 	rdlong	local02, fp
0c414     20 4E 85 F1 | 	sub	fp, #32
0c418     09 20 66 F0 | 	shl	local02, #9
0c41c     0C 00 00 FF 
0c420     D8 E4 05 F1 | 	add	objptr, ##6360
0c424     F2 20 02 F1 | 	add	local02, objptr
0c428     FE 21 06 F1 | 	add	local02, #510
0c42c     10 01 58 FC | 	wrword	#0, local02
0c430                 | '     envbuf(channel,255)=0                                                                   '  for i=0 to 255: v.putpixel(i,288-envbuf(channel,i)/400,40) : next i
0c430                 | '     return
0c430     0C 00 00 FF 
0c434     D8 E4 85 F1 | 	sub	objptr, ##6360
0c438     14 09 90 FD | 	jmp	#LR__1031
0c43c                 | LR__1017
0c43c                 | '     if wptr < ($80000 - 2048) then 
0c43c     24 4E 05 F1 | 	add	fp, #36
0c440     A7 22 02 FB | 	rdlong	local03, fp
0c444     24 4E 85 F1 | 	sub	fp, #36
0c448     FC 03 00 FF 
0c44c     00 22 56 F2 | 	cmps	local03, ##522240 wc
0c450     7C 00 90 3D |  if_ae	jmp	#LR__1020
0c454                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0c454     14 4E 05 F1 | 	add	fp, #20
0c458     A7 00 68 FC | 	wrlong	#0, fp
0c45c     14 4E 85 F1 | 	sub	fp, #20
0c460     0C 00 00 FF 
0c464     D8 E4 05 F1 | 	add	objptr, ##6360
0c468     97 2C 48 FB | 	callpa	#(@LR__1019-@LR__1018)>>2,fcache_load_ptr_
0c46c                 | LR__1018
0c46c     20 4E 05 F1 | 	add	fp, #32
0c470     A7 22 02 FB | 	rdlong	local03, fp
0c474     09 22 66 F0 | 	shl	local03, #9
0c478     F2 22 02 F1 | 	add	local03, objptr
0c47c     0C 4E 85 F1 | 	sub	fp, #12
0c480     A7 20 02 FB | 	rdlong	local02, fp
0c484     10 1F 02 F6 | 	mov	local01, local02
0c488     01 1E 66 F0 | 	shl	local01, #1
0c48c     11 1F 02 F1 | 	add	local01, local03
0c490     10 4E 05 F1 | 	add	fp, #16
0c494     A7 12 02 FB | 	rdlong	arg01, fp
0c498     01 20 66 F0 | 	shl	local02, #1
0c49c     10 13 02 F1 | 	add	arg01, local02
0c4a0     09 FB E1 FA | 	rdword	result1, arg01
0c4a4     0F FB 51 FC | 	wrword	result1, local01
0c4a8     10 4E 85 F1 | 	sub	fp, #16
0c4ac     A7 22 02 FB | 	rdlong	local03, fp
0c4b0     01 22 06 F1 | 	add	local03, #1
0c4b4     A7 22 62 FC | 	wrlong	local03, fp
0c4b8     14 4E 85 F1 | 	sub	fp, #20
0c4bc     00 23 56 F2 | 	cmps	local03, #256 wc
0c4c0     A8 FF 9F CD |  if_b	jmp	#LR__1018
0c4c4                 | LR__1019
0c4c4     0C 00 00 FF 
0c4c8     D8 E4 85 F1 | 	sub	objptr, ##6360
0c4cc     78 00 90 FD | 	jmp	#LR__1022
0c4d0                 | LR__1020
0c4d0                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0c4d0     14 4E 05 F1 | 	add	fp, #20
0c4d4     A7 00 68 FC | 	wrlong	#0, fp
0c4d8     14 4E 85 F1 | 	sub	fp, #20
0c4dc                 | LR__1021
0c4dc     20 4E 05 F1 | 	add	fp, #32
0c4e0     A7 22 02 FB | 	rdlong	local03, fp
0c4e4     09 22 66 F0 | 	shl	local03, #9
0c4e8     0C 00 00 FF 
0c4ec     D8 E4 05 F1 | 	add	objptr, ##6360
0c4f0     F2 22 02 F1 | 	add	local03, objptr
0c4f4     0C 4E 85 F1 | 	sub	fp, #12
0c4f8     A7 20 02 FB | 	rdlong	local02, fp
0c4fc     10 1F 02 F6 | 	mov	local01, local02
0c500     01 1E 66 F0 | 	shl	local01, #1
0c504     11 1F 02 F1 | 	add	local01, local03
0c508     10 4E 05 F1 | 	add	fp, #16
0c50c     A7 12 02 FB | 	rdlong	arg01, fp
0c510     24 4E 85 F1 | 	sub	fp, #36
0c514     01 20 66 F0 | 	shl	local02, #1
0c518     10 13 02 F1 | 	add	arg01, local02
0c51c     0C 00 00 FF 
0c520     D8 E4 85 F1 | 	sub	objptr, ##6360
0c524     30 E4 B0 FD | 	call	#_psdpeek
0c528     0F FB 51 FC | 	wrword	result1, local01
0c52c     14 4E 05 F1 | 	add	fp, #20
0c530     A7 22 02 FB | 	rdlong	local03, fp
0c534     01 22 06 F1 | 	add	local03, #1
0c538     A7 22 62 FC | 	wrlong	local03, fp
0c53c     14 4E 85 F1 | 	sub	fp, #20
0c540     00 23 56 F2 | 	cmps	local03, #256 wc
0c544     94 FF 9F CD |  if_b	jmp	#LR__1021
0c548                 | LR__1022
0c548     20 4E 05 F1 | 	add	fp, #32
0c54c     A7 22 02 FB | 	rdlong	local03, fp
0c550     20 4E 85 F1 | 	sub	fp, #32
0c554     09 22 66 F0 | 	shl	local03, #9
0c558     0C 00 00 FF 
0c55c     D8 E4 05 F1 | 	add	objptr, ##6360
0c560     F2 22 02 F1 | 	add	local03, objptr
0c564     FE 23 06 F1 | 	add	local03, #510
0c568     11 01 58 FC | 	wrword	#0, local03
0c56c                 | '     envbuf(channel,255)=0
0c56c                 | '     return   
0c56c     0C 00 00 FF 
0c570     D8 E4 85 F1 | 	sub	objptr, ##6360
0c574     D8 07 90 FD | 	jmp	#LR__1031
0c578                 | LR__1023
0c578                 | ' 
0c578                 | ' if numpar=5 then    'simple adsr
0c578     10 4E 05 F1 | 	add	fp, #16
0c57c     A7 22 02 FB | 	rdlong	local03, fp
0c580     10 4E 85 F1 | 	sub	fp, #16
0c584     05 22 0E F2 | 	cmp	local03, #5 wz
0c588     98 07 90 5D |  if_ne	jmp	#LR__1030
0c58c     E8 E2 BF FD | 	call	#_pop
0c590     FF 1E 02 F6 | 	mov	local01, result3
0c594     5C 4E 05 F1 | 	add	fp, #92
0c598     A7 FA 61 FC | 	wrlong	result1, fp
0c59c     04 4E 05 F1 | 	add	fp, #4
0c5a0     A7 FC 61 FC | 	wrlong	result2, fp
0c5a4     04 4E 05 F1 | 	add	fp, #4
0c5a8     A7 1E 62 FC | 	wrlong	local01, fp
0c5ac     08 4E 85 F1 | 	sub	fp, #8
0c5b0     A7 12 02 F6 | 	mov	arg01, fp
0c5b4     5C 4E 85 F1 | 	sub	fp, #92
0c5b8     A8 6E B0 FD | 	call	#_converttofloat
0c5bc     FD 22 02 F6 | 	mov	local03, result1
0c5c0     34 4E 05 F1 | 	add	fp, #52
0c5c4     A7 22 62 FC | 	wrlong	local03, fp
0c5c8     34 4E 85 F1 | 	sub	fp, #52
0c5cc     A8 E2 BF FD | 	call	#_pop
0c5d0     FF 1E 02 F6 | 	mov	local01, result3
0c5d4     5C 4E 05 F1 | 	add	fp, #92
0c5d8     A7 FA 61 FC | 	wrlong	result1, fp
0c5dc     04 4E 05 F1 | 	add	fp, #4
0c5e0     A7 FC 61 FC | 	wrlong	result2, fp
0c5e4     04 4E 05 F1 | 	add	fp, #4
0c5e8     A7 1E 62 FC | 	wrlong	local01, fp
0c5ec     08 4E 85 F1 | 	sub	fp, #8
0c5f0     A7 12 02 F6 | 	mov	arg01, fp
0c5f4     5C 4E 85 F1 | 	sub	fp, #92
0c5f8     68 6E B0 FD | 	call	#_converttofloat
0c5fc     FD 22 02 F6 | 	mov	local03, result1
0c600     30 4E 05 F1 | 	add	fp, #48
0c604     A7 22 62 FC | 	wrlong	local03, fp
0c608     30 4E 85 F1 | 	sub	fp, #48
0c60c     68 E2 BF FD | 	call	#_pop
0c610     FF 1E 02 F6 | 	mov	local01, result3
0c614     5C 4E 05 F1 | 	add	fp, #92
0c618     A7 FA 61 FC | 	wrlong	result1, fp
0c61c     04 4E 05 F1 | 	add	fp, #4
0c620     A7 FC 61 FC | 	wrlong	result2, fp
0c624     04 4E 05 F1 | 	add	fp, #4
0c628     A7 1E 62 FC | 	wrlong	local01, fp
0c62c     08 4E 85 F1 | 	sub	fp, #8
0c630     A7 12 02 F6 | 	mov	arg01, fp
0c634     5C 4E 85 F1 | 	sub	fp, #92
0c638     28 6E B0 FD | 	call	#_converttofloat
0c63c     FD 22 02 F6 | 	mov	local03, result1
0c640     2C 4E 05 F1 | 	add	fp, #44
0c644     A7 22 62 FC | 	wrlong	local03, fp
0c648     2C 4E 85 F1 | 	sub	fp, #44
0c64c     28 E2 BF FD | 	call	#_pop
0c650     FF 1E 02 F6 | 	mov	local01, result3
0c654     5C 4E 05 F1 | 	add	fp, #92
0c658     A7 FA 61 FC | 	wrlong	result1, fp
0c65c     04 4E 05 F1 | 	add	fp, #4
0c660     A7 FC 61 FC | 	wrlong	result2, fp
0c664     04 4E 05 F1 | 	add	fp, #4
0c668     A7 1E 62 FC | 	wrlong	local01, fp
0c66c     08 4E 85 F1 | 	sub	fp, #8
0c670     A7 12 02 F6 | 	mov	arg01, fp
0c674     5C 4E 85 F1 | 	sub	fp, #92
0c678     E8 6D B0 FD | 	call	#_converttofloat
0c67c     FD 22 02 F6 | 	mov	local03, result1
0c680     28 4E 05 F1 | 	add	fp, #40
0c684     A7 22 62 FC | 	wrlong	local03, fp
0c688     28 4E 85 F1 | 	sub	fp, #40
0c68c     E8 E1 BF FD | 	call	#_pop
0c690     FF 1E 02 F6 | 	mov	local01, result3
0c694     5C 4E 05 F1 | 	add	fp, #92
0c698     A7 FA 61 FC | 	wrlong	result1, fp
0c69c     04 4E 05 F1 | 	add	fp, #4
0c6a0     A7 FC 61 FC | 	wrlong	result2, fp
0c6a4     04 4E 05 F1 | 	add	fp, #4
0c6a8     A7 1E 62 FC | 	wrlong	local01, fp
0c6ac     08 4E 85 F1 | 	sub	fp, #8
0c6b0     A7 12 02 F6 | 	mov	arg01, fp
0c6b4     5C 4E 85 F1 | 	sub	fp, #92
0c6b8     FC 6C B0 FD | 	call	#_converttoint
0c6bc     20 4E 05 F1 | 	add	fp, #32
0c6c0     A7 FA 61 FC | 	wrlong	result1, fp
0c6c4                 | ' 
0c6c4                 | '   t1=pop() : rr=converttofloat(t1)
0c6c4                 | '   t1=pop() : ss=converttofloat(t1) 
0c6c4                 | '   t1=pop() : dd=converttofloat(t1)
0c6c4                 | '   t1=pop() : aa=converttofloat(t1)
0c6c4                 | '   t1=pop() : channel=converttoint(t1)
0c6c4                 | '   if ss<0.0 then ss=0.0 
0c6c4     10 4E 05 F1 | 	add	fp, #16
0c6c8     A7 12 02 FB | 	rdlong	arg01, fp
0c6cc     30 4E 85 F1 | 	sub	fp, #48
0c6d0     00 14 06 F6 | 	mov	arg02, #0
0c6d4     01 16 06 F6 | 	mov	arg03, #1
0c6d8     B4 53 B1 FD | 	call	#__system___float_cmp
0c6dc     00 FA 55 F2 | 	cmps	result1, #0 wc
0c6e0     30 4E 05 C1 |  if_b	add	fp, #48
0c6e4     A7 00 68 CC |  if_b	wrlong	#0, fp
0c6e8     30 4E 85 C1 |  if_b	sub	fp, #48
0c6ec                 | '   if ss>1.0 then ss=1.0
0c6ec     30 4E 05 F1 | 	add	fp, #48
0c6f0     A7 12 02 FB | 	rdlong	arg01, fp
0c6f4     30 4E 85 F1 | 	sub	fp, #48
0c6f8     00 C0 1F FF 
0c6fc     00 14 06 F6 | 	mov	arg02, ##1065353216
0c700     01 16 66 F6 | 	neg	arg03, #1
0c704     88 53 B1 FD | 	call	#__system___float_cmp
0c708     01 FA 55 F2 | 	cmps	result1, #1 wc
0c70c     30 4E 05 31 |  if_ae	add	fp, #48
0c710     00 C0 9F 3F 
0c714     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0c718     30 4E 85 31 |  if_ae	sub	fp, #48
0c71c     28 4E 05 F1 | 	add	fp, #40
0c720     A7 12 02 FB | 	rdlong	arg01, fp
0c724     04 4E 05 F1 | 	add	fp, #4
0c728     A7 14 02 FB | 	rdlong	arg02, fp
0c72c     2C 4E 85 F1 | 	sub	fp, #44
0c730     58 4B B1 FD | 	call	#__system___float_add
0c734     FD 12 02 F6 | 	mov	arg01, result1
0c738     34 4E 05 F1 | 	add	fp, #52
0c73c     A7 14 02 FB | 	rdlong	arg02, fp
0c740     34 4E 85 F1 | 	sub	fp, #52
0c744     44 4B B1 FD | 	call	#__system___float_add
0c748     4C 4E 05 F1 | 	add	fp, #76
0c74c     A7 FA 61 FC | 	wrlong	result1, fp
0c750     FD 14 02 F6 | 	mov	arg02, result1
0c754     4C 4E 85 F1 | 	sub	fp, #76
0c758     00 C0 21 FF 
0c75c     00 12 06 F6 | 	mov	arg01, ##1132462080
0c760     FC 50 B1 FD | 	call	#__system___float_div
0c764     50 4E 05 F1 | 	add	fp, #80
0c768     A7 FA 61 FC | 	wrlong	result1, fp
0c76c     28 4E 85 F1 | 	sub	fp, #40
0c770     A7 12 02 FB | 	rdlong	arg01, fp
0c774     FD 14 02 F6 | 	mov	arg02, result1
0c778     28 4E 85 F1 | 	sub	fp, #40
0c77c     DC 4E B1 FD | 	call	#__system___float_mul
0c780     FD 12 02 F6 | 	mov	arg01, result1
0c784     01 14 06 F6 | 	mov	arg02, #1
0c788     98 53 B1 FD | 	call	#__system___float_tointeger
0c78c     A7 FA 61 FC | 	wrlong	result1, fp
0c790     2C 4E 05 F1 | 	add	fp, #44
0c794     A7 12 02 FB | 	rdlong	arg01, fp
0c798     24 4E 05 F1 | 	add	fp, #36
0c79c     A7 14 02 FB | 	rdlong	arg02, fp
0c7a0     50 4E 85 F1 | 	sub	fp, #80
0c7a4     B4 4E B1 FD | 	call	#__system___float_mul
0c7a8     FD 12 02 F6 | 	mov	arg01, result1
0c7ac     01 14 06 F6 | 	mov	arg02, #1
0c7b0     70 53 B1 FD | 	call	#__system___float_tointeger
0c7b4     04 4E 05 F1 | 	add	fp, #4
0c7b8     A7 FA 61 FC | 	wrlong	result1, fp
0c7bc     30 4E 05 F1 | 	add	fp, #48
0c7c0     A7 12 02 FB | 	rdlong	arg01, fp
0c7c4     1C 4E 05 F1 | 	add	fp, #28
0c7c8     A7 14 02 FB | 	rdlong	arg02, fp
0c7cc     50 4E 85 F1 | 	sub	fp, #80
0c7d0     88 4E B1 FD | 	call	#__system___float_mul
0c7d4     FD 12 02 F6 | 	mov	arg01, result1
0c7d8     01 14 06 F6 | 	mov	arg02, #1
0c7dc     44 53 B1 FD | 	call	#__system___float_tointeger
0c7e0     FD 22 02 F6 | 	mov	local03, result1
0c7e4     0C 4E 05 F1 | 	add	fp, #12
0c7e8     A7 22 62 FC | 	wrlong	local03, fp
0c7ec     0C 4E 85 F1 | 	sub	fp, #12
0c7f0                 | '   fulltime=aa+dd+rr
0c7f0                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit) :print a,d,r,a+d+r
0c7f0     00 12 06 F6 | 	mov	arg01, #0
0c7f4     7C 7C B1 FD | 	call	#__system___getiolock_0484
0c7f8     FD 12 02 F6 | 	mov	arg01, result1
0c7fc     14 23 B1 FD | 	call	#__system___lockmem
0c800     A7 14 02 FB | 	rdlong	arg02, fp
0c804     00 12 06 F6 | 	mov	arg01, #0
0c808     00 16 06 F6 | 	mov	arg03, #0
0c80c     0A 18 06 F6 | 	mov	arg04, #10
0c810     38 30 B1 FD | 	call	#__system___basic_print_integer
0c814     00 12 06 F6 | 	mov	arg01, #0
0c818     09 14 06 F6 | 	mov	arg02, #9
0c81c     00 16 06 F6 | 	mov	arg03, #0
0c820     8C 2F B1 FD | 	call	#__system___basic_print_char
0c824     04 4E 05 F1 | 	add	fp, #4
0c828     A7 14 02 FB | 	rdlong	arg02, fp
0c82c     04 4E 85 F1 | 	sub	fp, #4
0c830     00 12 06 F6 | 	mov	arg01, #0
0c834     00 16 06 F6 | 	mov	arg03, #0
0c838     0A 18 06 F6 | 	mov	arg04, #10
0c83c     0C 30 B1 FD | 	call	#__system___basic_print_integer
0c840     00 12 06 F6 | 	mov	arg01, #0
0c844     09 14 06 F6 | 	mov	arg02, #9
0c848     00 16 06 F6 | 	mov	arg03, #0
0c84c     60 2F B1 FD | 	call	#__system___basic_print_char
0c850     0C 4E 05 F1 | 	add	fp, #12
0c854     A7 14 02 FB | 	rdlong	arg02, fp
0c858     0C 4E 85 F1 | 	sub	fp, #12
0c85c     00 12 06 F6 | 	mov	arg01, #0
0c860     00 16 06 F6 | 	mov	arg03, #0
0c864     0A 18 06 F6 | 	mov	arg04, #10
0c868     E0 2F B1 FD | 	call	#__system___basic_print_integer
0c86c     00 12 06 F6 | 	mov	arg01, #0
0c870     09 14 06 F6 | 	mov	arg02, #9
0c874     00 16 06 F6 | 	mov	arg03, #0
0c878     34 2F B1 FD | 	call	#__system___basic_print_char
0c87c     A7 14 02 FB | 	rdlong	arg02, fp
0c880     04 4E 05 F1 | 	add	fp, #4
0c884     A7 22 02 FB | 	rdlong	local03, fp
0c888     11 15 02 F1 | 	add	arg02, local03
0c88c     08 4E 05 F1 | 	add	fp, #8
0c890     A7 22 02 FB | 	rdlong	local03, fp
0c894     0C 4E 85 F1 | 	sub	fp, #12
0c898     11 15 02 F1 | 	add	arg02, local03
0c89c     00 12 06 F6 | 	mov	arg01, #0
0c8a0     00 16 06 F6 | 	mov	arg03, #0
0c8a4     0A 18 06 F6 | 	mov	arg04, #10
0c8a8     A0 2F B1 FD | 	call	#__system___basic_print_integer
0c8ac     00 12 06 F6 | 	mov	arg01, #0
0c8b0     0A 14 06 F6 | 	mov	arg02, #10
0c8b4     00 16 06 F6 | 	mov	arg03, #0
0c8b8     F4 2E B1 FD | 	call	#__system___basic_print_char
0c8bc     00 12 06 F6 | 	mov	arg01, #0
0c8c0     B0 7B B1 FD | 	call	#__system___getiolock_0484
0c8c4     FD 00 68 FC | 	wrlong	#0, result1
0c8c8     F8 BF 23 FF 
0c8cc     00 22 06 F6 | 	mov	local03, ##1199566848
0c8d0     A7 12 02 FB | 	rdlong	arg01, fp
0c8d4     09 13 52 F6 | 	abs	arg01, arg01 wc
0c8d8     1F 24 C6 C9 |  if_b	decod	local04, #31
0c8dc     00 24 06 36 |  if_ae	mov	local04, #0
0c8e0     74 49 B1 FD | 	call	#__system___float_fromuns
0c8e4     12 FB 61 F5 | 	xor	result1, local04
0c8e8     FD 14 02 F6 | 	mov	arg02, result1
0c8ec     11 13 02 F6 | 	mov	arg01, local03
0c8f0     6C 4F B1 FD | 	call	#__system___float_div
0c8f4     54 4E 05 F1 | 	add	fp, #84
0c8f8     A7 FA 61 FC | 	wrlong	result1, fp
0c8fc     F8 BF 23 FF 
0c900     00 22 06 F6 | 	mov	local03, ##1199566848
0c904     24 4E 85 F1 | 	sub	fp, #36
0c908     A7 14 02 FB | 	rdlong	arg02, fp
0c90c     30 4E 85 F1 | 	sub	fp, #48
0c910     F8 BF 23 FF 
0c914     00 12 06 F6 | 	mov	arg01, ##1199566848
0c918     40 4D B1 FD | 	call	#__system___float_mul
0c91c     FD 14 02 F6 | 	mov	arg02, result1
0c920     11 13 02 F6 | 	mov	arg01, local03
0c924     1F 14 E6 F4 | 	bitnot	arg02, #31
0c928     60 49 B1 FD | 	call	#__system___float_add
0c92c     FD 22 02 F6 | 	mov	local03, result1
0c930     04 4E 05 F1 | 	add	fp, #4
0c934     A7 12 02 FB | 	rdlong	arg01, fp
0c938     04 4E 85 F1 | 	sub	fp, #4
0c93c     09 13 52 F6 | 	abs	arg01, arg01 wc
0c940     1F 24 C6 C9 |  if_b	decod	local04, #31
0c944     00 24 06 36 |  if_ae	mov	local04, #0
0c948     0C 49 B1 FD | 	call	#__system___float_fromuns
0c94c     12 FB 61 F5 | 	xor	result1, local04
0c950     FD 14 02 F6 | 	mov	arg02, result1
0c954     11 13 02 F6 | 	mov	arg01, local03
0c958     04 4F B1 FD | 	call	#__system___float_div
0c95c     2C 4E 05 F1 | 	add	fp, #44
0c960     A7 FA 61 FC | 	wrlong	result1, fp
0c964     04 4E 05 F1 | 	add	fp, #4
0c968     A7 14 02 FB | 	rdlong	arg02, fp
0c96c     30 4E 85 F1 | 	sub	fp, #48
0c970     F8 BF 23 FF 
0c974     00 12 06 F6 | 	mov	arg01, ##1199566848
0c978     E0 4C B1 FD | 	call	#__system___float_mul
0c97c     FD 22 02 F6 | 	mov	local03, result1
0c980     0C 4E 05 F1 | 	add	fp, #12
0c984     A7 12 02 FB | 	rdlong	arg01, fp
0c988     0C 4E 85 F1 | 	sub	fp, #12
0c98c     09 13 52 F6 | 	abs	arg01, arg01 wc
0c990     1F 24 C6 C9 |  if_b	decod	local04, #31
0c994     00 24 06 36 |  if_ae	mov	local04, #0
0c998     BC 48 B1 FD | 	call	#__system___float_fromuns
0c99c     12 FB 61 F5 | 	xor	result1, local04
0c9a0     FD 14 02 F6 | 	mov	arg02, result1
0c9a4     11 13 02 F6 | 	mov	arg01, local03
0c9a8     B4 4E B1 FD | 	call	#__system___float_div
0c9ac     FD 22 02 F6 | 	mov	local03, result1
0c9b0     58 4E 05 F1 | 	add	fp, #88
0c9b4     A7 22 62 FC | 	wrlong	local03, fp
0c9b8     58 4E 85 F1 | 	sub	fp, #88
0c9bc                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r : print da,dd,dr
0c9bc     00 12 06 F6 | 	mov	arg01, #0
0c9c0     B0 7A B1 FD | 	call	#__system___getiolock_0484
0c9c4     FD 12 02 F6 | 	mov	arg01, result1
0c9c8     48 21 B1 FD | 	call	#__system___lockmem
0c9cc     54 4E 05 F1 | 	add	fp, #84
0c9d0     A7 14 02 FB | 	rdlong	arg02, fp
0c9d4     54 4E 85 F1 | 	sub	fp, #84
0c9d8     00 12 06 F6 | 	mov	arg01, #0
0c9dc     00 16 06 F6 | 	mov	arg03, #0
0c9e0     23 18 06 F6 | 	mov	arg04, #35
0c9e4     8C 52 B1 FD | 	call	#__system___basic_print_float
0c9e8     00 12 06 F6 | 	mov	arg01, #0
0c9ec     09 14 06 F6 | 	mov	arg02, #9
0c9f0     00 16 06 F6 | 	mov	arg03, #0
0c9f4     B8 2D B1 FD | 	call	#__system___basic_print_char
0c9f8     2C 4E 05 F1 | 	add	fp, #44
0c9fc     A7 14 02 FB | 	rdlong	arg02, fp
0ca00     2C 4E 85 F1 | 	sub	fp, #44
0ca04     00 12 06 F6 | 	mov	arg01, #0
0ca08     00 16 06 F6 | 	mov	arg03, #0
0ca0c     23 18 06 F6 | 	mov	arg04, #35
0ca10     60 52 B1 FD | 	call	#__system___basic_print_float
0ca14     00 12 06 F6 | 	mov	arg01, #0
0ca18     09 14 06 F6 | 	mov	arg02, #9
0ca1c     00 16 06 F6 | 	mov	arg03, #0
0ca20     8C 2D B1 FD | 	call	#__system___basic_print_char
0ca24     58 4E 05 F1 | 	add	fp, #88
0ca28     A7 14 02 FB | 	rdlong	arg02, fp
0ca2c     58 4E 85 F1 | 	sub	fp, #88
0ca30     00 12 06 F6 | 	mov	arg01, #0
0ca34     00 16 06 F6 | 	mov	arg03, #0
0ca38     23 18 06 F6 | 	mov	arg04, #35
0ca3c     34 52 B1 FD | 	call	#__system___basic_print_float
0ca40     00 12 06 F6 | 	mov	arg01, #0
0ca44     0A 14 06 F6 | 	mov	arg02, #10
0ca48     00 16 06 F6 | 	mov	arg03, #0
0ca4c     60 2D B1 FD | 	call	#__system___basic_print_char
0ca50     00 12 06 F6 | 	mov	arg01, #0
0ca54     1C 7A B1 FD | 	call	#__system___getiolock_0484
0ca58     FD 00 68 FC | 	wrlong	#0, result1
0ca5c     20 4E 05 F1 | 	add	fp, #32
0ca60     A7 26 02 FB | 	rdlong	local05, fp
0ca64     20 4E 85 F1 | 	sub	fp, #32
0ca68     01 26 66 F0 | 	shl	local05, #1
0ca6c     59 00 00 FF 
0ca70     D4 E5 05 F1 | 	add	objptr, ##46036
0ca74     F2 26 02 F1 | 	add	local05, objptr
0ca78     A7 28 02 FB | 	rdlong	local06, fp
0ca7c     04 4E 05 F1 | 	add	fp, #4
0ca80     A7 22 02 FB | 	rdlong	local03, fp
0ca84     11 29 02 F1 | 	add	local06, local03
0ca88     13 29 52 FC | 	wrword	local06, local05
0ca8c     24 4E 05 F1 | 	add	fp, #36
0ca90     A7 00 68 FC | 	wrlong	#0, fp
0ca94                 | '   suspoints(channel)=a+d
0ca94                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0ca94     14 4E 85 F1 | 	sub	fp, #20
0ca98     A7 00 68 FC | 	wrlong	#0, fp
0ca9c     14 4E 85 F1 | 	sub	fp, #20
0caa0     A7 2A 02 FB | 	rdlong	local07, fp
0caa4     59 00 00 FF 
0caa8     D4 E5 85 F1 | 	sub	objptr, ##46036
0caac                 | LR__1024
0caac     14 4E 05 F1 | 	add	fp, #20
0cab0     A7 22 02 FB | 	rdlong	local03, fp
0cab4     14 4E 85 F1 | 	sub	fp, #20
0cab8     15 23 52 F2 | 	cmps	local03, local07 wc
0cabc     80 00 90 3D |  if_ae	jmp	#LR__1025
0cac0     20 4E 05 F1 | 	add	fp, #32
0cac4     A7 28 02 FB | 	rdlong	local06, fp
0cac8     09 28 66 F0 | 	shl	local06, #9
0cacc     0C 00 00 FF 
0cad0     D8 E4 05 F1 | 	add	objptr, ##6360
0cad4     F2 28 02 F1 | 	add	local06, objptr
0cad8     0C 4E 85 F1 | 	sub	fp, #12
0cadc     A7 26 02 FB | 	rdlong	local05, fp
0cae0     01 26 66 F0 | 	shl	local05, #1
0cae4     14 27 02 F1 | 	add	local05, local06
0cae8     14 4E 05 F1 | 	add	fp, #20
0caec     A7 12 02 FB | 	rdlong	arg01, fp
0caf0     28 4E 85 F1 | 	sub	fp, #40
0caf4     0C 00 00 FF 
0caf8     D8 E4 85 F1 | 	sub	objptr, ##6360
0cafc     01 14 06 F6 | 	mov	arg02, #1
0cb00     20 50 B1 FD | 	call	#__system___float_tointeger
0cb04     13 FB 51 FC | 	wrword	result1, local05
0cb08     28 4E 05 F1 | 	add	fp, #40
0cb0c     A7 12 02 FB | 	rdlong	arg01, fp
0cb10     2C 4E 05 F1 | 	add	fp, #44
0cb14     A7 14 02 FB | 	rdlong	arg02, fp
0cb18     54 4E 85 F1 | 	sub	fp, #84
0cb1c     6C 47 B1 FD | 	call	#__system___float_add
0cb20     28 4E 05 F1 | 	add	fp, #40
0cb24     A7 FA 61 FC | 	wrlong	result1, fp
0cb28     14 4E 85 F1 | 	sub	fp, #20
0cb2c     A7 20 02 FB | 	rdlong	local02, fp
0cb30     01 20 06 F1 | 	add	local02, #1
0cb34     A7 20 62 FC | 	wrlong	local02, fp
0cb38     14 4E 85 F1 | 	sub	fp, #20
0cb3c     6C FF 9F FD | 	jmp	#LR__1024
0cb40                 | LR__1025
0cb40                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0cb40     A7 22 02 FB | 	rdlong	local03, fp
0cb44     14 4E 05 F1 | 	add	fp, #20
0cb48     A7 22 62 FC | 	wrlong	local03, fp
0cb4c     14 4E 85 F1 | 	sub	fp, #20
0cb50     A7 2C 02 FB | 	rdlong	local08, fp
0cb54     04 4E 05 F1 | 	add	fp, #4
0cb58     A7 22 02 FB | 	rdlong	local03, fp
0cb5c     04 4E 85 F1 | 	sub	fp, #4
0cb60     11 2D 02 F1 | 	add	local08, local03
0cb64                 | LR__1026
0cb64     14 4E 05 F1 | 	add	fp, #20
0cb68     A7 22 02 FB | 	rdlong	local03, fp
0cb6c     14 4E 85 F1 | 	sub	fp, #20
0cb70     16 23 52 F2 | 	cmps	local03, local08 wc
0cb74     A8 00 90 3D |  if_ae	jmp	#LR__1027
0cb78     20 4E 05 F1 | 	add	fp, #32
0cb7c     A7 2A 02 FB | 	rdlong	local07, fp
0cb80     09 2A 66 F0 | 	shl	local07, #9
0cb84     0C 00 00 FF 
0cb88     D8 E4 05 F1 | 	add	objptr, ##6360
0cb8c     F2 2A 02 F1 | 	add	local07, objptr
0cb90     0C 4E 85 F1 | 	sub	fp, #12
0cb94     A7 28 02 FB | 	rdlong	local06, fp
0cb98     01 28 66 F0 | 	shl	local06, #1
0cb9c     15 29 02 F1 | 	add	local06, local07
0cba0     14 4E 05 F1 | 	add	fp, #20
0cba4     A7 12 02 FB | 	rdlong	arg01, fp
0cba8     28 4E 85 F1 | 	sub	fp, #40
0cbac     0C 00 00 FF 
0cbb0     D8 E4 85 F1 | 	sub	objptr, ##6360
0cbb4     01 14 06 F6 | 	mov	arg02, #1
0cbb8     68 4F B1 FD | 	call	#__system___float_tointeger
0cbbc     14 FB 51 FC | 	wrword	result1, local06
0cbc0     28 4E 05 F1 | 	add	fp, #40
0cbc4     A7 12 02 FB | 	rdlong	arg01, fp
0cbc8     04 4E 05 F1 | 	add	fp, #4
0cbcc     A7 14 02 FB | 	rdlong	arg02, fp
0cbd0     2C 4E 85 F1 | 	sub	fp, #44
0cbd4     1F 14 E6 F4 | 	bitnot	arg02, #31
0cbd8     B0 46 B1 FD | 	call	#__system___float_add
0cbdc     28 4E 05 F1 | 	add	fp, #40
0cbe0     A7 FA 61 FC | 	wrlong	result1, fp
0cbe4     28 4E 85 F1 | 	sub	fp, #40
0cbe8     FD 12 02 F6 | 	mov	arg01, result1
0cbec     00 14 06 F6 | 	mov	arg02, #0
0cbf0     01 16 06 F6 | 	mov	arg03, #1
0cbf4     98 4E B1 FD | 	call	#__system___float_cmp
0cbf8     00 FA 55 F2 | 	cmps	result1, #0 wc
0cbfc     28 4E 05 C1 |  if_b	add	fp, #40
0cc00     A7 00 68 CC |  if_b	wrlong	#0, fp
0cc04     28 4E 85 C1 |  if_b	sub	fp, #40
0cc08     14 4E 05 F1 | 	add	fp, #20
0cc0c     A7 20 02 FB | 	rdlong	local02, fp
0cc10     01 20 06 F1 | 	add	local02, #1
0cc14     A7 20 62 FC | 	wrlong	local02, fp
0cc18     14 4E 85 F1 | 	sub	fp, #20
0cc1c     44 FF 9F FD | 	jmp	#LR__1026
0cc20                 | LR__1027
0cc20                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0cc20     A7 22 02 FB | 	rdlong	local03, fp
0cc24     04 4E 05 F1 | 	add	fp, #4
0cc28     A7 2C 02 FB | 	rdlong	local08, fp
0cc2c     16 23 02 F1 | 	add	local03, local08
0cc30     10 4E 05 F1 | 	add	fp, #16
0cc34     A7 22 62 FC | 	wrlong	local03, fp
0cc38     14 4E 85 F1 | 	sub	fp, #20
0cc3c                 | LR__1028
0cc3c     14 4E 05 F1 | 	add	fp, #20
0cc40     A7 26 02 FB | 	rdlong	local05, fp
0cc44     14 4E 85 F1 | 	sub	fp, #20
0cc48     00 27 56 F2 | 	cmps	local05, #256 wc
0cc4c     A8 00 90 3D |  if_ae	jmp	#LR__1029
0cc50     20 4E 05 F1 | 	add	fp, #32
0cc54     A7 2C 02 FB | 	rdlong	local08, fp
0cc58     09 2C 66 F0 | 	shl	local08, #9
0cc5c     0C 00 00 FF 
0cc60     D8 E4 05 F1 | 	add	objptr, ##6360
0cc64     F2 2C 02 F1 | 	add	local08, objptr
0cc68     0C 4E 85 F1 | 	sub	fp, #12
0cc6c     A7 2A 02 FB | 	rdlong	local07, fp
0cc70     01 2A 66 F0 | 	shl	local07, #1
0cc74     16 2B 02 F1 | 	add	local07, local08
0cc78     14 4E 05 F1 | 	add	fp, #20
0cc7c     A7 12 02 FB | 	rdlong	arg01, fp
0cc80     28 4E 85 F1 | 	sub	fp, #40
0cc84     0C 00 00 FF 
0cc88     D8 E4 85 F1 | 	sub	objptr, ##6360
0cc8c     01 14 06 F6 | 	mov	arg02, #1
0cc90     90 4E B1 FD | 	call	#__system___float_tointeger
0cc94     15 FB 51 FC | 	wrword	result1, local07
0cc98     28 4E 05 F1 | 	add	fp, #40
0cc9c     A7 12 02 FB | 	rdlong	arg01, fp
0cca0     30 4E 05 F1 | 	add	fp, #48
0cca4     A7 14 02 FB | 	rdlong	arg02, fp
0cca8     58 4E 85 F1 | 	sub	fp, #88
0ccac     1F 14 E6 F4 | 	bitnot	arg02, #31
0ccb0     D8 45 B1 FD | 	call	#__system___float_add
0ccb4     28 4E 05 F1 | 	add	fp, #40
0ccb8     A7 FA 61 FC | 	wrlong	result1, fp
0ccbc     28 4E 85 F1 | 	sub	fp, #40
0ccc0     FD 12 02 F6 | 	mov	arg01, result1
0ccc4     00 14 06 F6 | 	mov	arg02, #0
0ccc8     01 16 06 F6 | 	mov	arg03, #1
0cccc     C0 4D B1 FD | 	call	#__system___float_cmp
0ccd0     00 FA 55 F2 | 	cmps	result1, #0 wc
0ccd4     28 4E 05 C1 |  if_b	add	fp, #40
0ccd8     A7 00 68 CC |  if_b	wrlong	#0, fp
0ccdc     28 4E 85 C1 |  if_b	sub	fp, #40
0cce0     14 4E 05 F1 | 	add	fp, #20
0cce4     A7 2C 02 FB | 	rdlong	local08, fp
0cce8     01 2C 06 F1 | 	add	local08, #1
0ccec     A7 2C 62 FC | 	wrlong	local08, fp
0ccf0     14 4E 85 F1 | 	sub	fp, #20
0ccf4     44 FF 9F FD | 	jmp	#LR__1028
0ccf8                 | LR__1029
0ccf8     20 4E 05 F1 | 	add	fp, #32
0ccfc     A7 26 02 FB | 	rdlong	local05, fp
0cd00     20 4E 85 F1 | 	sub	fp, #32
0cd04     09 26 66 F0 | 	shl	local05, #9
0cd08     0C 00 00 FF 
0cd0c     D8 E4 05 F1 | 	add	objptr, ##6360
0cd10     F2 26 02 F1 | 	add	local05, objptr
0cd14     FE 27 06 F1 | 	add	local05, #510
0cd18     13 01 58 FC | 	wrword	#0, local05
0cd1c     0C 00 00 FF 
0cd20     D8 E4 85 F1 | 	sub	objptr, ##6360
0cd24                 | LR__1030
0cd24     20 4E 05 F1 | 	add	fp, #32
0cd28     A7 26 02 FB | 	rdlong	local05, fp
0cd2c     20 4E 85 F1 | 	sub	fp, #32
0cd30     09 26 66 F0 | 	shl	local05, #9
0cd34     0C 00 00 FF 
0cd38     D8 E4 05 F1 | 	add	objptr, ##6360
0cd3c     F2 26 02 F1 | 	add	local05, objptr
0cd40     FE 27 06 F1 | 	add	local05, #510
0cd44     13 01 58 FC | 	wrword	#0, local05
0cd48     0C 00 00 FF 
0cd4c     D8 E4 85 F1 | 	sub	objptr, ##6360
0cd50                 | LR__1031
0cd50     A7 F0 03 F6 | 	mov	ptra, fp
0cd54     B2 00 A0 FD | 	call	#popregs_
0cd58                 | _do_defenv_ret
0cd58     2D 00 64 FD | 	ret
0cd5c                 | 
0cd5c                 | ' 
0cd5c                 | ' 
0cd5c                 | ' sub do_play
0cd5c                 | _do_play
0cd5c     05 4A 05 F6 | 	mov	COUNT_, #5
0cd60     A8 00 A0 FD | 	call	#pushregs_
0cd64     74 F0 07 F1 | 	add	ptra, #116
0cd68     60 4E 05 F1 | 	add	fp, #96
0cd6c     F5 25 A2 FF 
0cd70     A7 AA 68 FC | 	wrlong	##1145825877, fp
0cd74                 | ' speed_coeff=815.6614449376854599406528189911
0cd74                 | ' 
0cd74                 | ' for i=0 to 8 : params(i)=-2.0 : next i
0cd74     5C 4E 85 F1 | 	sub	fp, #92
0cd78     A7 00 68 FC | 	wrlong	#0, fp
0cd7c     97 18 48 FB | 	callpa	#(@LR__1041-@LR__1040)>>2,fcache_load_ptr_
0cd80                 | LR__1040
0cd80     A7 16 02 FB | 	rdlong	arg03, fp
0cd84     02 16 66 F0 | 	shl	arg03, #2
0cd88     2C 4E 05 F1 | 	add	fp, #44
0cd8c     A7 16 02 F1 | 	add	arg03, fp
0cd90     00 00 E0 FF 
0cd94     0B 01 68 FC | 	wrlong	##-1073741824, arg03
0cd98     2C 4E 85 F1 | 	sub	fp, #44
0cd9c     A7 1E 02 FB | 	rdlong	local01, fp
0cda0     01 1E 06 F1 | 	add	local01, #1
0cda4     A7 1E 62 FC | 	wrlong	local01, fp
0cda8     09 1E 56 F2 | 	cmps	local01, #9 wc
0cdac     D0 FF 9F CD |  if_b	jmp	#LR__1040
0cdb0                 | LR__1041
0cdb0     04 4E 85 F1 | 	sub	fp, #4
0cdb4     4A 00 00 FF 
0cdb8     B0 E4 05 F1 | 	add	objptr, ##38064
0cdbc     F2 20 02 FB | 	rdlong	local02, objptr
0cdc0     10 23 02 F6 | 	mov	local03, local02
0cdc4     01 22 66 F0 | 	shl	local03, #1
0cdc8     10 23 02 F1 | 	add	local03, local02
0cdcc     02 22 66 F0 | 	shl	local03, #2
0cdd0     03 00 00 FF 
0cdd4     04 E4 85 F1 | 	sub	objptr, ##1540
0cdd8     F2 22 02 F1 | 	add	local03, objptr
0cddc     11 25 02 FB | 	rdlong	local04, local03
0cde0     A7 24 62 FC | 	wrlong	local04, fp
0cde4                 | ' 'params(0)=0: params(1)=440.0 : params(2)=16.0 : params(3)=0.0 : params(4)=0.0 : params(5)=1.0 : params(6)=0.0 : params(7)=0.0 : 
0cde4                 | ' 'chn		freq		   vol		   wave#	   env#		   len		   delay	   pan		: sus 
0cde4                 | ' numpar=compiledline(lineptr_e).result.uresult
0cde4                 | ' for i=numpar to 1 step -1 
0cde4     04 4E 05 F1 | 	add	fp, #4
0cde8     A7 24 62 FC | 	wrlong	local04, fp
0cdec     04 4E 85 F1 | 	sub	fp, #4
0cdf0     47 00 00 FF 
0cdf4     AC E4 85 F1 | 	sub	objptr, ##36524
0cdf8                 | LR__1042
0cdf8     7C DA BF FD | 	call	#_pop
0cdfc     54 4E 05 F1 | 	add	fp, #84
0ce00     A7 FA 61 FC | 	wrlong	result1, fp
0ce04     04 4E 05 F1 | 	add	fp, #4
0ce08     A7 FC 61 FC | 	wrlong	result2, fp
0ce0c     04 4E 05 F1 | 	add	fp, #4
0ce10     A7 FE 61 FC | 	wrlong	result3, fp
0ce14     58 4E 85 F1 | 	sub	fp, #88
0ce18     A7 22 02 FB | 	rdlong	local03, fp
0ce1c     01 22 86 F1 | 	sub	local03, #1
0ce20     02 22 66 F0 | 	shl	local03, #2
0ce24     2C 4E 05 F1 | 	add	fp, #44
0ce28     A7 22 02 F1 | 	add	local03, fp
0ce2c     24 4E 05 F1 | 	add	fp, #36
0ce30     A7 26 02 F6 | 	mov	local05, fp
0ce34     13 13 02 F6 | 	mov	arg01, local05
0ce38     54 4E 85 F1 | 	sub	fp, #84
0ce3c     24 66 B0 FD | 	call	#_converttofloat
0ce40     11 FB 61 FC | 	wrlong	result1, local03
0ce44     04 4E 05 F1 | 	add	fp, #4
0ce48     A7 1E 02 FB | 	rdlong	local01, fp
0ce4c     01 1E 86 F1 | 	sub	local01, #1
0ce50     A7 1E 62 FC | 	wrlong	local01, fp
0ce54     04 4E 85 F1 | 	sub	fp, #4
0ce58     01 1E 56 F2 | 	cmps	local01, #1 wc
0ce5c     98 FF 9F 3D |  if_ae	jmp	#LR__1042
0ce60                 | ' if params(0)<0 then channel=0 else channel=round(params(0))
0ce60     30 4E 05 F1 | 	add	fp, #48
0ce64     A7 12 02 FB | 	rdlong	arg01, fp
0ce68     30 4E 85 F1 | 	sub	fp, #48
0ce6c     00 14 06 F6 | 	mov	arg02, #0
0ce70     01 16 06 F6 | 	mov	arg03, #1
0ce74     18 4C B1 FD | 	call	#__system___float_cmp
0ce78     00 FA 55 F2 | 	cmps	result1, #0 wc
0ce7c     0C 4E 05 C1 |  if_b	add	fp, #12
0ce80     A7 00 68 CC |  if_b	wrlong	#0, fp
0ce84     0C 4E 85 C1 |  if_b	sub	fp, #12
0ce88     20 00 90 CD |  if_b	jmp	#LR__1043
0ce8c     30 4E 05 F1 | 	add	fp, #48
0ce90     A7 12 02 FB | 	rdlong	arg01, fp
0ce94     30 4E 85 F1 | 	sub	fp, #48
0ce98     01 14 06 F6 | 	mov	arg02, #1
0ce9c     84 4C B1 FD | 	call	#__system___float_tointeger
0cea0     0C 4E 05 F1 | 	add	fp, #12
0cea4     A7 FA 61 FC | 	wrlong	result1, fp
0cea8     0C 4E 85 F1 | 	sub	fp, #12
0ceac                 | LR__1043
0ceac                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
0ceac     34 4E 05 F1 | 	add	fp, #52
0ceb0     A7 12 02 FB | 	rdlong	arg01, fp
0ceb4     34 4E 85 F1 | 	sub	fp, #52
0ceb8     00 14 06 F6 | 	mov	arg02, #0
0cebc     01 16 06 F6 | 	mov	arg03, #1
0cec0     CC 4B B1 FD | 	call	#__system___float_cmp
0cec4     00 FA 55 F2 | 	cmps	result1, #0 wc
0cec8     40 00 90 3D |  if_ae	jmp	#LR__1044
0cecc     0C 4E 05 F1 | 	add	fp, #12
0ced0     A7 20 02 FB | 	rdlong	local02, fp
0ced4     10 23 02 F6 | 	mov	local03, local02
0ced8     01 22 66 F0 | 	shl	local03, #1
0cedc     10 23 02 F1 | 	add	local03, local02
0cee0     03 22 66 F0 | 	shl	local03, #3
0cee4     14 00 00 FF 
0cee8     68 E5 05 F1 | 	add	objptr, ##10600
0ceec     F2 22 02 F1 | 	add	local03, objptr
0cef0     11 23 02 FB | 	rdlong	local03, local03
0cef4     58 4E 05 F1 | 	add	fp, #88
0cef8     A7 22 62 FC | 	wrlong	local03, fp
0cefc     64 4E 85 F1 | 	sub	fp, #100
0cf00     14 00 00 FF 
0cf04     68 E5 85 F1 | 	sub	objptr, ##10600
0cf08     44 00 90 FD | 	jmp	#LR__1045
0cf0c                 | LR__1044
0cf0c     34 4E 05 F1 | 	add	fp, #52
0cf10     A7 24 02 FB | 	rdlong	local04, fp
0cf14     30 4E 05 F1 | 	add	fp, #48
0cf18     A7 24 62 FC | 	wrlong	local04, fp
0cf1c     58 4E 85 F1 | 	sub	fp, #88
0cf20     A7 20 02 FB | 	rdlong	local02, fp
0cf24     10 23 02 F6 | 	mov	local03, local02
0cf28     01 22 66 F0 | 	shl	local03, #1
0cf2c     10 23 02 F1 | 	add	local03, local02
0cf30     03 22 66 F0 | 	shl	local03, #3
0cf34     14 00 00 FF 
0cf38     68 E5 05 F1 | 	add	objptr, ##10600
0cf3c     F2 22 02 F1 | 	add	local03, objptr
0cf40     0C 4E 85 F1 | 	sub	fp, #12
0cf44     11 25 62 FC | 	wrlong	local04, local03
0cf48     14 00 00 FF 
0cf4c     68 E5 85 F1 | 	sub	objptr, ##10600
0cf50                 | LR__1045
0cf50                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
0cf50     3C 4E 05 F1 | 	add	fp, #60
0cf54     A7 12 02 FB | 	rdlong	arg01, fp
0cf58     3C 4E 85 F1 | 	sub	fp, #60
0cf5c     00 14 06 F6 | 	mov	arg02, #0
0cf60     01 16 06 F6 | 	mov	arg03, #1
0cf64     28 4B B1 FD | 	call	#__system___float_cmp
0cf68     00 FA 55 F2 | 	cmps	result1, #0 wc
0cf6c     24 00 90 CD |  if_b	jmp	#LR__1046
0cf70     3C 4E 05 F1 | 	add	fp, #60
0cf74     A7 12 02 FB | 	rdlong	arg01, fp
0cf78     3C 4E 85 F1 | 	sub	fp, #60
0cf7c     89 C1 20 FF 
0cf80     6F 14 06 F6 | 	mov	arg02, ##1099108975
0cf84     01 16 66 F6 | 	neg	arg03, #1
0cf88     04 4B B1 FD | 	call	#__system___float_cmp
0cf8c     01 FA 55 F2 | 	cmps	result1, #1 wc
0cf90     44 00 90 CD |  if_b	jmp	#LR__1047
0cf94                 | LR__1046
0cf94     0C 4E 05 F1 | 	add	fp, #12
0cf98     A7 20 02 FB | 	rdlong	local02, fp
0cf9c     10 23 02 F6 | 	mov	local03, local02
0cfa0     01 22 66 F0 | 	shl	local03, #1
0cfa4     10 23 02 F1 | 	add	local03, local02
0cfa8     03 22 66 F0 | 	shl	local03, #3
0cfac     14 00 00 FF 
0cfb0     68 E5 05 F1 | 	add	objptr, ##10600
0cfb4     F2 22 02 F1 | 	add	local03, objptr
0cfb8     0C 22 06 F1 | 	add	local03, #12
0cfbc     11 23 02 FB | 	rdlong	local03, local03
0cfc0     60 4E 05 F1 | 	add	fp, #96
0cfc4     A7 22 62 FC | 	wrlong	local03, fp
0cfc8     6C 4E 85 F1 | 	sub	fp, #108
0cfcc     14 00 00 FF 
0cfd0     68 E5 85 F1 | 	sub	objptr, ##10600
0cfd4     48 00 90 FD | 	jmp	#LR__1048
0cfd8                 | LR__1047
0cfd8     3C 4E 05 F1 | 	add	fp, #60
0cfdc     A7 24 02 FB | 	rdlong	local04, fp
0cfe0     30 4E 05 F1 | 	add	fp, #48
0cfe4     A7 24 62 FC | 	wrlong	local04, fp
0cfe8     60 4E 85 F1 | 	sub	fp, #96
0cfec     A7 20 02 FB | 	rdlong	local02, fp
0cff0     10 23 02 F6 | 	mov	local03, local02
0cff4     01 22 66 F0 | 	shl	local03, #1
0cff8     10 23 02 F1 | 	add	local03, local02
0cffc     03 22 66 F0 | 	shl	local03, #3
0d000     14 00 00 FF 
0d004     68 E5 05 F1 | 	add	objptr, ##10600
0d008     F2 22 02 F1 | 	add	local03, objptr
0d00c     0C 4E 85 F1 | 	sub	fp, #12
0d010     0C 22 06 F1 | 	add	local03, #12
0d014     11 25 62 FC | 	wrlong	local04, local03
0d018     14 00 00 FF 
0d01c     68 E5 85 F1 | 	sub	objptr, ##10600
0d020                 | LR__1048
0d020                 | ' if params(4)<0 orelse params(4)>8.0 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
0d020     40 4E 05 F1 | 	add	fp, #64
0d024     A7 12 02 FB | 	rdlong	arg01, fp
0d028     40 4E 85 F1 | 	sub	fp, #64
0d02c     00 14 06 F6 | 	mov	arg02, #0
0d030     01 16 06 F6 | 	mov	arg03, #1
0d034     58 4A B1 FD | 	call	#__system___float_cmp
0d038     00 FA 55 F2 | 	cmps	result1, #0 wc
0d03c     24 00 90 CD |  if_b	jmp	#LR__1049
0d040     40 4E 05 F1 | 	add	fp, #64
0d044     A7 12 02 FB | 	rdlong	arg01, fp
0d048     40 4E 85 F1 | 	sub	fp, #64
0d04c     00 80 20 FF 
0d050     00 14 06 F6 | 	mov	arg02, ##1090519040
0d054     01 16 66 F6 | 	neg	arg03, #1
0d058     34 4A B1 FD | 	call	#__system___float_cmp
0d05c     01 FA 55 F2 | 	cmps	result1, #1 wc
0d060     48 00 90 CD |  if_b	jmp	#LR__1050
0d064                 | LR__1049
0d064     0C 4E 05 F1 | 	add	fp, #12
0d068     A7 22 02 FB | 	rdlong	local03, fp
0d06c     11 27 02 F6 | 	mov	local05, local03
0d070     01 26 66 F0 | 	shl	local05, #1
0d074     11 27 02 F1 | 	add	local05, local03
0d078     03 26 66 F0 | 	shl	local05, #3
0d07c     14 00 00 FF 
0d080     68 E5 05 F1 | 	add	objptr, ##10600
0d084     F2 26 02 F1 | 	add	local05, objptr
0d088     04 26 06 F1 | 	add	local05, #4
0d08c     13 27 C2 FA | 	rdbyte	local05, local05
0d090     13 25 E2 F8 | 	getbyte	local04, local05, #0
0d094     14 4E 05 F1 | 	add	fp, #20
0d098     A7 24 62 FC | 	wrlong	local04, fp
0d09c     20 4E 85 F1 | 	sub	fp, #32
0d0a0     14 00 00 FF 
0d0a4     68 E5 85 F1 | 	sub	objptr, ##10600
0d0a8     54 00 90 FD | 	jmp	#LR__1051
0d0ac                 | LR__1050
0d0ac     40 4E 05 F1 | 	add	fp, #64
0d0b0     A7 12 02 FB | 	rdlong	arg01, fp
0d0b4     40 4E 85 F1 | 	sub	fp, #64
0d0b8     01 14 06 F6 | 	mov	arg02, #1
0d0bc     64 4A B1 FD | 	call	#__system___float_tointeger
0d0c0     20 4E 05 F1 | 	add	fp, #32
0d0c4     A7 FA 61 FC | 	wrlong	result1, fp
0d0c8     14 4E 85 F1 | 	sub	fp, #20
0d0cc     A7 20 02 FB | 	rdlong	local02, fp
0d0d0     10 23 02 F6 | 	mov	local03, local02
0d0d4     01 22 66 F0 | 	shl	local03, #1
0d0d8     10 23 02 F1 | 	add	local03, local02
0d0dc     03 22 66 F0 | 	shl	local03, #3
0d0e0     14 00 00 FF 
0d0e4     68 E5 05 F1 | 	add	objptr, ##10600
0d0e8     F2 22 02 F1 | 	add	local03, objptr
0d0ec     0C 4E 85 F1 | 	sub	fp, #12
0d0f0     04 22 06 F1 | 	add	local03, #4
0d0f4     11 FB 41 FC | 	wrbyte	result1, local03
0d0f8     14 00 00 FF 
0d0fc     68 E5 85 F1 | 	sub	objptr, ##10600
0d100                 | LR__1051
0d100                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
0d100     44 4E 05 F1 | 	add	fp, #68
0d104     A7 12 02 FB | 	rdlong	arg01, fp
0d108     44 4E 85 F1 | 	sub	fp, #68
0d10c     00 14 06 F6 | 	mov	arg02, #0
0d110     01 16 06 F6 | 	mov	arg03, #1
0d114     78 49 B1 FD | 	call	#__system___float_cmp
0d118     00 FA 55 F2 | 	cmps	result1, #0 wc
0d11c     24 00 90 CD |  if_b	jmp	#LR__1052
0d120     44 4E 05 F1 | 	add	fp, #68
0d124     A7 12 02 FB | 	rdlong	arg01, fp
0d128     44 4E 85 F1 | 	sub	fp, #68
0d12c     00 80 20 FF 
0d130     00 14 06 F6 | 	mov	arg02, ##1090519040
0d134     01 16 66 F6 | 	neg	arg03, #1
0d138     54 49 B1 FD | 	call	#__system___float_cmp
0d13c     01 FA 55 F2 | 	cmps	result1, #1 wc
0d140     48 00 90 CD |  if_b	jmp	#LR__1053
0d144                 | LR__1052
0d144     0C 4E 05 F1 | 	add	fp, #12
0d148     A7 22 02 FB | 	rdlong	local03, fp
0d14c     11 27 02 F6 | 	mov	local05, local03
0d150     01 26 66 F0 | 	shl	local05, #1
0d154     11 27 02 F1 | 	add	local05, local03
0d158     03 26 66 F0 | 	shl	local05, #3
0d15c     14 00 00 FF 
0d160     68 E5 05 F1 | 	add	objptr, ##10600
0d164     F2 26 02 F1 | 	add	local05, objptr
0d168     05 26 06 F1 | 	add	local05, #5
0d16c     13 27 C2 FA | 	rdbyte	local05, local05
0d170     13 25 E2 F8 | 	getbyte	local04, local05, #0
0d174     18 4E 05 F1 | 	add	fp, #24
0d178     A7 24 62 FC | 	wrlong	local04, fp
0d17c     24 4E 85 F1 | 	sub	fp, #36
0d180     14 00 00 FF 
0d184     68 E5 85 F1 | 	sub	objptr, ##10600
0d188     54 00 90 FD | 	jmp	#LR__1054
0d18c                 | LR__1053
0d18c     44 4E 05 F1 | 	add	fp, #68
0d190     A7 12 02 FB | 	rdlong	arg01, fp
0d194     44 4E 85 F1 | 	sub	fp, #68
0d198     01 14 06 F6 | 	mov	arg02, #1
0d19c     84 49 B1 FD | 	call	#__system___float_tointeger
0d1a0     24 4E 05 F1 | 	add	fp, #36
0d1a4     A7 FA 61 FC | 	wrlong	result1, fp
0d1a8     18 4E 85 F1 | 	sub	fp, #24
0d1ac     A7 20 02 FB | 	rdlong	local02, fp
0d1b0     10 23 02 F6 | 	mov	local03, local02
0d1b4     01 22 66 F0 | 	shl	local03, #1
0d1b8     10 23 02 F1 | 	add	local03, local02
0d1bc     03 22 66 F0 | 	shl	local03, #3
0d1c0     14 00 00 FF 
0d1c4     68 E5 05 F1 | 	add	objptr, ##10600
0d1c8     F2 22 02 F1 | 	add	local03, objptr
0d1cc     0C 4E 85 F1 | 	sub	fp, #12
0d1d0     05 22 06 F1 | 	add	local03, #5
0d1d4     11 FB 41 FC | 	wrbyte	result1, local03
0d1d8     14 00 00 FF 
0d1dc     68 E5 85 F1 | 	sub	objptr, ##10600
0d1e0                 | LR__1054
0d1e0                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
0d1e0     48 4E 05 F1 | 	add	fp, #72
0d1e4     A7 12 02 FB | 	rdlong	arg01, fp
0d1e8     48 4E 85 F1 | 	sub	fp, #72
0d1ec     00 14 06 F6 | 	mov	arg02, #0
0d1f0     01 16 06 F6 | 	mov	arg03, #1
0d1f4     98 48 B1 FD | 	call	#__system___float_cmp
0d1f8     00 FA 55 F2 | 	cmps	result1, #0 wc
0d1fc     24 00 90 CD |  if_b	jmp	#LR__1055
0d200     48 4E 05 F1 | 	add	fp, #72
0d204     A7 12 02 FB | 	rdlong	arg01, fp
0d208     48 4E 85 F1 | 	sub	fp, #72
0d20c     00 3D 22 FF 
0d210     00 14 06 F6 | 	mov	arg02, ##1148846080
0d214     01 16 66 F6 | 	neg	arg03, #1
0d218     74 48 B1 FD | 	call	#__system___float_cmp
0d21c     01 FA 55 F2 | 	cmps	result1, #1 wc
0d220     44 00 90 CD |  if_b	jmp	#LR__1056
0d224                 | LR__1055
0d224     0C 4E 05 F1 | 	add	fp, #12
0d228     A7 20 02 FB | 	rdlong	local02, fp
0d22c     10 23 02 F6 | 	mov	local03, local02
0d230     01 22 66 F0 | 	shl	local03, #1
0d234     10 23 02 F1 | 	add	local03, local02
0d238     03 22 66 F0 | 	shl	local03, #3
0d23c     14 00 00 FF 
0d240     68 E5 05 F1 | 	add	objptr, ##10600
0d244     F2 22 02 F1 | 	add	local03, objptr
0d248     08 22 06 F1 | 	add	local03, #8
0d24c     11 25 02 FB | 	rdlong	local04, local03
0d250     64 4E 05 F1 | 	add	fp, #100
0d254     A7 24 62 FC | 	wrlong	local04, fp
0d258     70 4E 85 F1 | 	sub	fp, #112
0d25c     14 00 00 FF 
0d260     68 E5 85 F1 | 	sub	objptr, ##10600
0d264     48 00 90 FD | 	jmp	#LR__1057
0d268                 | LR__1056
0d268     48 4E 05 F1 | 	add	fp, #72
0d26c     A7 24 02 FB | 	rdlong	local04, fp
0d270     28 4E 05 F1 | 	add	fp, #40
0d274     A7 24 62 FC | 	wrlong	local04, fp
0d278     64 4E 85 F1 | 	sub	fp, #100
0d27c     A7 20 02 FB | 	rdlong	local02, fp
0d280     10 23 02 F6 | 	mov	local03, local02
0d284     01 22 66 F0 | 	shl	local03, #1
0d288     10 23 02 F1 | 	add	local03, local02
0d28c     03 22 66 F0 | 	shl	local03, #3
0d290     14 00 00 FF 
0d294     68 E5 05 F1 | 	add	objptr, ##10600
0d298     F2 22 02 F1 | 	add	local03, objptr
0d29c     0C 4E 85 F1 | 	sub	fp, #12
0d2a0     08 22 06 F1 | 	add	local03, #8
0d2a4     11 25 62 FC | 	wrlong	local04, local03
0d2a8     14 00 00 FF 
0d2ac     68 E5 85 F1 | 	sub	objptr, ##10600
0d2b0                 | LR__1057
0d2b0                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
0d2b0     38 4E 05 F1 | 	add	fp, #56
0d2b4     A7 12 02 FB | 	rdlong	arg01, fp
0d2b8     38 4E 85 F1 | 	sub	fp, #56
0d2bc     00 14 06 F6 | 	mov	arg02, #0
0d2c0     01 16 06 F6 | 	mov	arg03, #1
0d2c4     C8 47 B1 FD | 	call	#__system___float_cmp
0d2c8     00 FA 55 F2 | 	cmps	result1, #0 wc
0d2cc     24 00 90 CD |  if_b	jmp	#LR__1058
0d2d0     38 4E 05 F1 | 	add	fp, #56
0d2d4     A7 12 02 FB | 	rdlong	arg01, fp
0d2d8     38 4E 85 F1 | 	sub	fp, #56
0d2dc     20 0E 23 FF 
0d2e0     00 14 06 F6 | 	mov	arg02, ##1176256512
0d2e4     01 16 66 F6 | 	neg	arg03, #1
0d2e8     A4 47 B1 FD | 	call	#__system___float_cmp
0d2ec     01 FA 55 F2 | 	cmps	result1, #1 wc
0d2f0     48 00 90 CD |  if_b	jmp	#LR__1059
0d2f4                 | LR__1058
0d2f4     0C 4E 05 F1 | 	add	fp, #12
0d2f8     A7 22 02 FB | 	rdlong	local03, fp
0d2fc     11 27 02 F6 | 	mov	local05, local03
0d300     01 26 66 F0 | 	shl	local05, #1
0d304     11 27 02 F1 | 	add	local05, local03
0d308     03 26 66 F0 | 	shl	local05, #3
0d30c     14 00 00 FF 
0d310     68 E5 05 F1 | 	add	objptr, ##10600
0d314     F2 26 02 F1 | 	add	local05, objptr
0d318     06 26 06 F1 | 	add	local05, #6
0d31c     13 27 E2 FA | 	rdword	local05, local05
0d320     13 25 32 F9 | 	getword	local04, local05, #0
0d324     1C 4E 05 F1 | 	add	fp, #28
0d328     A7 24 62 FC | 	wrlong	local04, fp
0d32c     28 4E 85 F1 | 	sub	fp, #40
0d330     14 00 00 FF 
0d334     68 E5 85 F1 | 	sub	objptr, ##10600
0d338     54 00 90 FD | 	jmp	#LR__1060
0d33c                 | LR__1059
0d33c     38 4E 05 F1 | 	add	fp, #56
0d340     A7 12 02 FB | 	rdlong	arg01, fp
0d344     38 4E 85 F1 | 	sub	fp, #56
0d348     01 14 06 F6 | 	mov	arg02, #1
0d34c     D4 47 B1 FD | 	call	#__system___float_tointeger
0d350     28 4E 05 F1 | 	add	fp, #40
0d354     A7 FA 61 FC | 	wrlong	result1, fp
0d358     1C 4E 85 F1 | 	sub	fp, #28
0d35c     A7 20 02 FB | 	rdlong	local02, fp
0d360     10 23 02 F6 | 	mov	local03, local02
0d364     01 22 66 F0 | 	shl	local03, #1
0d368     10 23 02 F1 | 	add	local03, local02
0d36c     03 22 66 F0 | 	shl	local03, #3
0d370     14 00 00 FF 
0d374     68 E5 05 F1 | 	add	objptr, ##10600
0d378     F2 22 02 F1 | 	add	local03, objptr
0d37c     0C 4E 85 F1 | 	sub	fp, #12
0d380     06 22 06 F1 | 	add	local03, #6
0d384     11 FB 51 FC | 	wrword	result1, local03
0d388     14 00 00 FF 
0d38c     68 E5 85 F1 | 	sub	objptr, ##10600
0d390                 | LR__1060
0d390                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
0d390     4C 4E 05 F1 | 	add	fp, #76
0d394     A7 12 02 FB | 	rdlong	arg01, fp
0d398     4C 4E 85 F1 | 	sub	fp, #76
0d39c     00 C0 5F FF 
0d3a0     00 14 06 F6 | 	mov	arg02, ##-1082130432
0d3a4     01 16 06 F6 | 	mov	arg03, #1
0d3a8     E4 46 B1 FD | 	call	#__system___float_cmp
0d3ac     00 FA 55 F2 | 	cmps	result1, #0 wc
0d3b0     24 00 90 CD |  if_b	jmp	#LR__1061
0d3b4     4C 4E 05 F1 | 	add	fp, #76
0d3b8     A7 12 02 FB | 	rdlong	arg01, fp
0d3bc     4C 4E 85 F1 | 	sub	fp, #76
0d3c0     00 C0 1F FF 
0d3c4     00 14 06 F6 | 	mov	arg02, ##1065353216
0d3c8     01 16 66 F6 | 	neg	arg03, #1
0d3cc     C0 46 B1 FD | 	call	#__system___float_cmp
0d3d0     01 FA 55 F2 | 	cmps	result1, #1 wc
0d3d4     44 00 90 CD |  if_b	jmp	#LR__1062
0d3d8                 | LR__1061
0d3d8     0C 4E 05 F1 | 	add	fp, #12
0d3dc     A7 20 02 FB | 	rdlong	local02, fp
0d3e0     10 23 02 F6 | 	mov	local03, local02
0d3e4     01 22 66 F0 | 	shl	local03, #1
0d3e8     10 23 02 F1 | 	add	local03, local02
0d3ec     03 22 66 F0 | 	shl	local03, #3
0d3f0     14 00 00 FF 
0d3f4     68 E5 05 F1 | 	add	objptr, ##10600
0d3f8     F2 22 02 F1 | 	add	local03, objptr
0d3fc     10 22 06 F1 | 	add	local03, #16
0d400     11 27 02 FB | 	rdlong	local05, local03
0d404     5C 4E 05 F1 | 	add	fp, #92
0d408     A7 26 62 FC | 	wrlong	local05, fp
0d40c     68 4E 85 F1 | 	sub	fp, #104
0d410     14 00 00 FF 
0d414     68 E5 85 F1 | 	sub	objptr, ##10600
0d418     48 00 90 FD | 	jmp	#LR__1063
0d41c                 | LR__1062
0d41c     4C 4E 05 F1 | 	add	fp, #76
0d420     A7 26 02 FB | 	rdlong	local05, fp
0d424     1C 4E 05 F1 | 	add	fp, #28
0d428     A7 26 62 FC | 	wrlong	local05, fp
0d42c     5C 4E 85 F1 | 	sub	fp, #92
0d430     A7 20 02 FB | 	rdlong	local02, fp
0d434     10 23 02 F6 | 	mov	local03, local02
0d438     01 22 66 F0 | 	shl	local03, #1
0d43c     10 23 02 F1 | 	add	local03, local02
0d440     03 22 66 F0 | 	shl	local03, #3
0d444     14 00 00 FF 
0d448     68 E5 05 F1 | 	add	objptr, ##10600
0d44c     F2 22 02 F1 | 	add	local03, objptr
0d450     0C 4E 85 F1 | 	sub	fp, #12
0d454     10 22 06 F1 | 	add	local03, #16
0d458     11 27 62 FC | 	wrlong	local05, local03
0d45c     14 00 00 FF 
0d460     68 E5 85 F1 | 	sub	objptr, ##10600
0d464                 | LR__1063
0d464                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
0d464     50 4E 05 F1 | 	add	fp, #80
0d468     A7 12 02 FB | 	rdlong	arg01, fp
0d46c     50 4E 85 F1 | 	sub	fp, #80
0d470     00 14 06 F6 | 	mov	arg02, #0
0d474     01 16 06 F6 | 	mov	arg03, #1
0d478     14 46 B1 FD | 	call	#__system___float_cmp
0d47c     00 FA 55 F2 | 	cmps	result1, #0 wc
0d480     24 00 90 CD |  if_b	jmp	#LR__1064
0d484     50 4E 05 F1 | 	add	fp, #80
0d488     A7 12 02 FB | 	rdlong	arg01, fp
0d48c     50 4E 85 F1 | 	sub	fp, #80
0d490     80 BF 21 FF 
0d494     00 14 06 F6 | 	mov	arg02, ##1132396544
0d498     01 16 66 F6 | 	neg	arg03, #1
0d49c     F0 45 B1 FD | 	call	#__system___float_cmp
0d4a0     01 FA 55 F2 | 	cmps	result1, #1 wc
0d4a4     44 00 90 CD |  if_b	jmp	#LR__1065
0d4a8                 | LR__1064
0d4a8     0C 4E 05 F1 | 	add	fp, #12
0d4ac     A7 22 02 FB | 	rdlong	local03, fp
0d4b0     11 27 02 F6 | 	mov	local05, local03
0d4b4     01 26 66 F0 | 	shl	local05, #1
0d4b8     11 27 02 F1 | 	add	local05, local03
0d4bc     03 26 66 F0 | 	shl	local05, #3
0d4c0     14 00 00 FF 
0d4c4     68 E5 05 F1 | 	add	objptr, ##10600
0d4c8     F2 26 02 F1 | 	add	local05, objptr
0d4cc     14 26 06 F1 | 	add	local05, #20
0d4d0     13 25 E2 FA | 	rdword	local04, local05
0d4d4     20 4E 05 F1 | 	add	fp, #32
0d4d8     A7 24 62 FC | 	wrlong	local04, fp
0d4dc     2C 4E 85 F1 | 	sub	fp, #44
0d4e0     14 00 00 FF 
0d4e4     68 E5 85 F1 | 	sub	objptr, ##10600
0d4e8     54 00 90 FD | 	jmp	#LR__1066
0d4ec                 | LR__1065
0d4ec     50 4E 05 F1 | 	add	fp, #80
0d4f0     A7 12 02 FB | 	rdlong	arg01, fp
0d4f4     50 4E 85 F1 | 	sub	fp, #80
0d4f8     01 14 06 F6 | 	mov	arg02, #1
0d4fc     24 46 B1 FD | 	call	#__system___float_tointeger
0d500     2C 4E 05 F1 | 	add	fp, #44
0d504     A7 FA 61 FC | 	wrlong	result1, fp
0d508     20 4E 85 F1 | 	sub	fp, #32
0d50c     A7 20 02 FB | 	rdlong	local02, fp
0d510     10 23 02 F6 | 	mov	local03, local02
0d514     01 22 66 F0 | 	shl	local03, #1
0d518     10 23 02 F1 | 	add	local03, local02
0d51c     03 22 66 F0 | 	shl	local03, #3
0d520     14 00 00 FF 
0d524     68 E5 05 F1 | 	add	objptr, ##10600
0d528     F2 22 02 F1 | 	add	local03, objptr
0d52c     0C 4E 85 F1 | 	sub	fp, #12
0d530     14 22 06 F1 | 	add	local03, #20
0d534     11 FB 51 FC | 	wrword	result1, local03
0d538     14 00 00 FF 
0d53c     68 E5 85 F1 | 	sub	objptr, ##10600
0d540                 | LR__1066
0d540     60 4E 05 F1 | 	add	fp, #96
0d544     A7 12 02 FB | 	rdlong	arg01, fp
0d548     10 4E 05 F1 | 	add	fp, #16
0d54c     A7 14 02 FB | 	rdlong	arg02, fp
0d550     70 4E 85 F1 | 	sub	fp, #112
0d554     08 43 B1 FD | 	call	#__system___float_div
0d558     FD 12 02 F6 | 	mov	arg01, result1
0d55c     01 14 06 F6 | 	mov	arg02, #1
0d560     C0 45 B1 FD | 	call	#__system___float_tointeger
0d564     FD 24 02 F6 | 	mov	local04, result1
0d568     14 4E 05 F1 | 	add	fp, #20
0d56c     A7 24 62 FC | 	wrlong	local04, fp
0d570     54 4E 05 F1 | 	add	fp, #84
0d574     A7 14 02 FB | 	rdlong	arg02, fp
0d578     68 4E 85 F1 | 	sub	fp, #104
0d57c     00 00 23 FF 
0d580     00 12 06 F6 | 	mov	arg01, ##1174405120
0d584     D4 40 B1 FD | 	call	#__system___float_mul
0d588     FD 12 02 F6 | 	mov	arg01, result1
0d58c     01 14 06 F6 | 	mov	arg02, #1
0d590     90 45 B1 FD | 	call	#__system___float_tointeger
0d594     0D 24 C6 F9 | 	decod	local04, #13
0d598     FD 24 02 F1 | 	add	local04, result1
0d59c     18 4E 05 F1 | 	add	fp, #24
0d5a0     A7 24 62 FC | 	wrlong	local04, fp
0d5a4     54 4E 05 F1 | 	add	fp, #84
0d5a8     A7 14 02 FB | 	rdlong	arg02, fp
0d5ac     6C 4E 85 F1 | 	sub	fp, #108
0d5b0     00 3D 22 FF 
0d5b4     00 12 06 F6 | 	mov	arg01, ##1148846080
0d5b8     A0 40 B1 FD | 	call	#__system___float_mul
0d5bc     FD 12 02 F6 | 	mov	arg01, result1
0d5c0     01 14 06 F6 | 	mov	arg02, #1
0d5c4     5C 45 B1 FD | 	call	#__system___float_tointeger
0d5c8     1C 4E 05 F1 | 	add	fp, #28
0d5cc     A7 FA 61 FC | 	wrlong	result1, fp
0d5d0     37 00 00 FF 
0d5d4     40 E4 05 F1 | 	add	objptr, ##28224
0d5d8     F2 24 02 FB | 	rdlong	local04, objptr
0d5dc     37 00 00 FF 
0d5e0     40 E4 85 F1 | 	sub	objptr, ##28224
0d5e4     10 4E 85 F1 | 	sub	fp, #16
0d5e8     A7 20 02 FB | 	rdlong	local02, fp
0d5ec     06 20 66 F0 | 	shl	local02, #6
0d5f0     10 25 02 F1 | 	add	local04, local02
0d5f4     04 4E 85 F1 | 	sub	fp, #4
0d5f8     A7 24 62 FC | 	wrlong	local04, fp
0d5fc     5C 4E 05 F1 | 	add	fp, #92
0d600     A7 12 02 FB | 	rdlong	arg01, fp
0d604     64 4E 85 F1 | 	sub	fp, #100
0d608     72 3F 20 FF 
0d60c     EA 14 06 F6 | 	mov	arg02, ##1082057962
0d610     48 40 B1 FD | 	call	#__system___float_mul
0d614     FD 12 02 F6 | 	mov	arg01, result1
0d618     01 14 06 F6 | 	mov	arg02, #1
0d61c     04 45 B1 FD | 	call	#__system___float_tointeger
0d620     10 4E 05 F1 | 	add	fp, #16
0d624     A7 FA 61 FC | 	wrlong	result1, fp
0d628                 | ' 
0d628                 | ' speed=round(speed_coeff/slen)
0d628                 | ' ipan=8192+round(8192*pan)
0d628                 | ' ivol=round(1000.0*vol)
0d628                 | ' base2=base+64*channel
0d628                 | ' skip=round(freq*3.9827219) 
0d628                 | ' if wave <32 then 
0d628     10 4E 05 F1 | 	add	fp, #16
0d62c     A7 24 02 FB | 	rdlong	local04, fp
0d630     20 4E 85 F1 | 	sub	fp, #32
0d634     20 24 56 F2 | 	cmps	local04, #32 wc
0d638     2C 00 90 3D |  if_ae	jmp	#LR__1067
0d63c     08 4E 05 F1 | 	add	fp, #8
0d640     A7 12 02 FB | 	rdlong	arg01, fp
0d644     08 12 06 F1 | 	add	arg01, #8
0d648     18 4E 05 F1 | 	add	fp, #24
0d64c     A7 14 02 FB | 	rdlong	arg02, fp
0d650     20 4E 85 F1 | 	sub	fp, #32
0d654     0B 14 66 F0 | 	shl	arg02, #11
0d658     00 00 60 FF 
0d65c     00 14 06 F1 | 	add	arg02, ##-1073741824
0d660     09 15 62 FC | 	wrlong	arg02, arg01
0d664     18 00 90 FD | 	jmp	#LR__1068
0d668                 | LR__1067
0d668     08 4E 05 F1 | 	add	fp, #8
0d66c     A7 12 02 FB | 	rdlong	arg01, fp
0d670     08 4E 85 F1 | 	sub	fp, #8
0d674     08 12 06 F1 | 	add	arg01, #8
0d678     00 00 E4 FF 
0d67c     09 01 68 FC | 	wrlong	##-939524096, arg01
0d680                 | LR__1068
0d680     08 4E 05 F1 | 	add	fp, #8
0d684     A7 12 02 FB | 	rdlong	arg01, fp
0d688     10 12 06 F1 | 	add	arg01, #16
0d68c     04 00 80 FF 
0d690     09 01 68 FC | 	wrlong	##2048, arg01
0d694     A7 12 02 FB | 	rdlong	arg01, fp
0d698     0C 12 06 F1 | 	add	arg01, #12
0d69c     09 01 68 FC | 	wrlong	#0, arg01
0d6a0     A7 12 02 FB | 	rdlong	arg01, fp
0d6a4     14 12 06 F1 | 	add	arg01, #20
0d6a8     14 4E 05 F1 | 	add	fp, #20
0d6ac     A7 14 02 FB | 	rdlong	arg02, fp
0d6b0     09 15 52 FC | 	wrword	arg02, arg01
0d6b4     14 4E 85 F1 | 	sub	fp, #20
0d6b8     A7 12 02 FB | 	rdlong	arg01, fp
0d6bc     16 12 06 F1 | 	add	arg01, #22
0d6c0     10 4E 05 F1 | 	add	fp, #16
0d6c4     A7 14 02 FB | 	rdlong	arg02, fp
0d6c8     09 15 52 FC | 	wrword	arg02, arg01
0d6cc                 | ' lpoke base2+16,2048
0d6cc                 | ' lpoke base2+12,0
0d6cc                 | ' dpoke base2+20,ivol 
0d6cc                 | ' dpoke base2+22,ipan 
0d6cc                 | ' if wave<32 then
0d6cc     08 4E 05 F1 | 	add	fp, #8
0d6d0     A7 24 02 FB | 	rdlong	local04, fp
0d6d4     20 4E 85 F1 | 	sub	fp, #32
0d6d8     20 24 56 F2 | 	cmps	local04, #32 wc
0d6dc     2C 00 90 3D |  if_ae	jmp	#LR__1069
0d6e0     08 4E 05 F1 | 	add	fp, #8
0d6e4     A7 12 02 FB | 	rdlong	arg01, fp
0d6e8     18 12 06 F1 | 	add	arg01, #24
0d6ec     09 29 58 FC | 	wrword	#20, arg01
0d6f0     A7 12 02 FB | 	rdlong	arg01, fp
0d6f4     1A 12 06 F1 | 	add	arg01, #26
0d6f8     08 4E 05 F1 | 	add	fp, #8
0d6fc     A7 14 02 FB | 	rdlong	arg02, fp
0d700     10 4E 85 F1 | 	sub	fp, #16
0d704     09 15 52 FC | 	wrword	arg02, arg01
0d708     48 00 90 FD | 	jmp	#LR__1070
0d70c                 | LR__1069
0d70c     08 4E 05 F1 | 	add	fp, #8
0d710     A7 24 02 FB | 	rdlong	local04, fp
0d714     18 24 06 F1 | 	add	local04, #24
0d718     5C 4E 05 F1 | 	add	fp, #92
0d71c     A7 14 02 FB | 	rdlong	arg02, fp
0d720     64 4E 85 F1 | 	sub	fp, #100
0d724     58 D0 24 FF 
0d728     B0 13 06 F6 | 	mov	arg01, ##1235268016
0d72c     30 41 B1 FD | 	call	#__system___float_div
0d730     FD 12 02 F6 | 	mov	arg01, result1
0d734     01 14 06 F6 | 	mov	arg02, #1
0d738     E8 43 B1 FD | 	call	#__system___float_tointeger
0d73c     12 FB 51 FC | 	wrword	result1, local04
0d740     08 4E 05 F1 | 	add	fp, #8
0d744     A7 12 02 FB | 	rdlong	arg01, fp
0d748     08 4E 85 F1 | 	sub	fp, #8
0d74c     1A 12 06 F1 | 	add	arg01, #26
0d750     09 01 5A FC | 	wrword	#256, arg01
0d754                 | LR__1070
0d754     08 4E 05 F1 | 	add	fp, #8
0d758     A7 12 02 FB | 	rdlong	arg01, fp
0d75c     1C 12 06 F1 | 	add	arg01, #28
0d760     09 01 68 FC | 	wrlong	#0, arg01
0d764     A7 12 02 FB | 	rdlong	arg01, fp
0d768     20 12 06 F1 | 	add	arg01, #32
0d76c     09 01 68 FC | 	wrlong	#0, arg01
0d770                 | ' lpoke base2+28,$0000_0000
0d770                 | ' lpoke base2+32,0 
0d770                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
0d770     1C 4E 05 F1 | 	add	fp, #28
0d774     A7 24 02 FB | 	rdlong	local04, fp
0d778     24 4E 85 F1 | 	sub	fp, #36
0d77c     08 24 0E F2 | 	cmp	local04, #8 wz
0d780     18 00 90 5D |  if_ne	jmp	#LR__1071
0d784     08 4E 05 F1 | 	add	fp, #8
0d788     A7 12 02 FB | 	rdlong	arg01, fp
0d78c     08 4E 85 F1 | 	sub	fp, #8
0d790     24 12 06 F1 | 	add	arg01, #36
0d794     09 01 68 FC | 	wrlong	#0, arg01
0d798     34 00 90 FD | 	jmp	#LR__1072
0d79c                 | LR__1071
0d79c     08 4E 05 F1 | 	add	fp, #8
0d7a0     A7 12 02 FB | 	rdlong	arg01, fp
0d7a4     24 12 06 F1 | 	add	arg01, #36
0d7a8     1C 4E 05 F1 | 	add	fp, #28
0d7ac     A7 14 02 FB | 	rdlong	arg02, fp
0d7b0     24 4E 85 F1 | 	sub	fp, #36
0d7b4     09 14 66 F0 | 	shl	arg02, #9
0d7b8     0C 00 00 FF 
0d7bc     D8 E4 05 F1 | 	add	objptr, ##6360
0d7c0     F2 14 02 F1 | 	add	arg02, objptr
0d7c4     0C 00 00 FF 
0d7c8     D8 E4 85 F1 | 	sub	objptr, ##6360
0d7cc     09 15 62 FC | 	wrlong	arg02, arg01
0d7d0                 | LR__1072
0d7d0     08 4E 05 F1 | 	add	fp, #8
0d7d4     A7 12 02 FB | 	rdlong	arg01, fp
0d7d8     28 12 06 F1 | 	add	arg01, #40
0d7dc     0C 4E 05 F1 | 	add	fp, #12
0d7e0     A7 14 02 FB | 	rdlong	arg02, fp
0d7e4     09 15 62 FC | 	wrlong	arg02, arg01
0d7e8     0C 4E 85 F1 | 	sub	fp, #12
0d7ec     A7 12 02 FB | 	rdlong	arg01, fp
0d7f0     2C 12 06 F1 | 	add	arg01, #44
0d7f4     24 4E 05 F1 | 	add	fp, #36
0d7f8     A7 14 02 FB | 	rdlong	arg02, fp
0d7fc     09 15 62 FC | 	wrlong	arg02, arg01
0d800                 | ' lpoke base2+40,speed' speed
0d800                 | ' lpoke base2+44,sus 'len
0d800                 | ' 
0d800                 | ' if delay>0 then waitms(delay) ' : print "wait "; round(params(6)) : l
0d800     04 4E 85 F1 | 	sub	fp, #4
0d804     A7 24 02 FB | 	rdlong	local04, fp
0d808     28 4E 85 F1 | 	sub	fp, #40
0d80c     01 24 56 F2 | 	cmps	local04, #1 wc
0d810     28 4E 05 31 |  if_ae	add	fp, #40
0d814     A7 12 02 3B |  if_ae	rdlong	arg01, fp
0d818     28 4E 85 31 |  if_ae	sub	fp, #40
0d81c     E8 15 B1 3D |  if_ae	call	#__system___waitms
0d820     A7 F0 03 F6 | 	mov	ptra, fp
0d824     B2 00 A0 FD | 	call	#popregs_
0d828                 | _do_play_ret
0d828     2D 00 64 FD | 	ret
0d82c                 | 
0d82c                 | ' 
0d82c                 | ' sub do_release
0d82c                 | _do_release
0d82c     00 4A 05 F6 | 	mov	COUNT_, #0
0d830     A8 00 A0 FD | 	call	#pushregs_
0d834     10 F0 07 F1 | 	add	ptra, #16
0d838     3C D0 BF FD | 	call	#_pop
0d83c     FF 14 02 F6 | 	mov	arg02, result3
0d840     A7 FA 61 FC | 	wrlong	result1, fp
0d844     04 4E 05 F1 | 	add	fp, #4
0d848     A7 FC 61 FC | 	wrlong	result2, fp
0d84c     04 4E 05 F1 | 	add	fp, #4
0d850     A7 14 62 FC | 	wrlong	arg02, fp
0d854     08 4E 85 F1 | 	sub	fp, #8
0d858     A7 12 02 F6 | 	mov	arg01, fp
0d85c     58 5B B0 FD | 	call	#_converttoint
0d860     0C 4E 05 F1 | 	add	fp, #12
0d864     A7 FA 61 FC | 	wrlong	result1, fp
0d868                 | ' t1=pop()
0d868                 | ' channel=converttoint(t1)
0d868                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255 ' else printerror
0d868     0C 4E 85 F1 | 	sub	fp, #12
0d86c     00 FA 55 F2 | 	cmps	result1, #0 wc
0d870     44 00 90 CD |  if_b	jmp	#LR__1080
0d874     0C 4E 05 F1 | 	add	fp, #12
0d878     A7 14 02 FB | 	rdlong	arg02, fp
0d87c     0C 4E 85 F1 | 	sub	fp, #12
0d880     08 14 56 F2 | 	cmps	arg02, #8 wc
0d884     30 00 90 3D |  if_ae	jmp	#LR__1080
0d888     37 00 00 FF 
0d88c     40 E4 05 F1 | 	add	objptr, ##28224
0d890     F2 12 02 FB | 	rdlong	arg01, objptr
0d894     37 00 00 FF 
0d898     40 E4 85 F1 | 	sub	objptr, ##28224
0d89c     0C 4E 05 F1 | 	add	fp, #12
0d8a0     A7 14 02 FB | 	rdlong	arg02, fp
0d8a4     0C 4E 85 F1 | 	sub	fp, #12
0d8a8     06 14 66 F0 | 	shl	arg02, #6
0d8ac     0A 13 02 F1 | 	add	arg01, arg02
0d8b0     2C 12 06 F1 | 	add	arg01, #44
0d8b4     09 FF 69 FC | 	wrlong	#255, arg01
0d8b8                 | LR__1080
0d8b8     A7 F0 03 F6 | 	mov	ptra, fp
0d8bc     B2 00 A0 FD | 	call	#popregs_
0d8c0                 | _do_release_ret
0d8c0     2D 00 64 FD | 	ret
0d8c4                 | 
0d8c4                 | ' 
0d8c4                 | ' 
0d8c4                 | ' sub do_defsnd
0d8c4                 | _do_defsnd
0d8c4     04 4A 05 F6 | 	mov	COUNT_, #4
0d8c8     A8 00 A0 FD | 	call	#pushregs_
0d8cc     88 F0 07 F1 | 	add	ptra, #136
0d8d0     4A 00 00 FF 
0d8d4     B0 E4 05 F1 | 	add	objptr, ##38064
0d8d8     F2 1A 02 FB | 	rdlong	arg05, objptr
0d8dc     0D 19 02 F6 | 	mov	arg04, arg05
0d8e0     01 18 66 F0 | 	shl	arg04, #1
0d8e4     0D 19 02 F1 | 	add	arg04, arg05
0d8e8     02 18 66 F0 | 	shl	arg04, #2
0d8ec     03 00 00 FF 
0d8f0     04 E4 85 F1 | 	sub	objptr, ##1540
0d8f4     F2 18 02 F1 | 	add	arg04, objptr
0d8f8     0C 1B 02 FB | 	rdlong	arg05, arg04
0d8fc     A7 1A 62 FC | 	wrlong	arg05, fp
0d900                 | ' 
0d900                 | ' numpar=compiledline(lineptr_e).result.uresult
0d900                 | ' 
0d900                 | ' 
0d900                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0d900                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0d900                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0d900                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0d900                 | ' 
0d900                 | ' if numpar<2 then return
0d900     02 1A 56 F2 | 	cmps	arg05, #2 wc
0d904     47 00 00 FF 
0d908     AC E4 85 F1 | 	sub	objptr, ##36524
0d90c     94 08 90 CD |  if_b	jmp	#LR__1113
0d910                 | ' 
0d910                 | '   
0d910                 | ' if numpar=2 then
0d910     A7 1A 02 FB | 	rdlong	arg05, fp
0d914     02 1A 0E F2 | 	cmp	arg05, #2 wz
0d918     A0 03 90 5D |  if_ne	jmp	#LR__1100
0d91c     58 CF BF FD | 	call	#_pop
0d920     FF 1A 02 F6 | 	mov	arg05, result3
0d924     2C 4E 05 F1 | 	add	fp, #44
0d928     A7 FA 61 FC | 	wrlong	result1, fp
0d92c     04 4E 05 F1 | 	add	fp, #4
0d930     A7 FC 61 FC | 	wrlong	result2, fp
0d934     04 4E 05 F1 | 	add	fp, #4
0d938     A7 1A 62 FC | 	wrlong	arg05, fp
0d93c                 | '   t1=pop()
0d93c                 | '   if t1.result_type=result_string2 then 
0d93c     34 4E 85 F1 | 	sub	fp, #52
0d940     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0d944     20 00 90 5D |  if_ne	jmp	#LR__1090
0d948     2C 4E 05 F1 | 	add	fp, #44
0d94c     A7 12 02 FB | 	rdlong	arg01, fp
0d950     2C 4E 85 F1 | 	sub	fp, #44
0d954     3C 12 B0 FD | 	call	#_convertstring
0d958     38 4E 05 F1 | 	add	fp, #56
0d95c     A7 FA 61 FC | 	wrlong	result1, fp
0d960     38 4E 85 F1 | 	sub	fp, #56
0d964     58 00 90 FD | 	jmp	#LR__1093
0d968                 | LR__1090
0d968     34 4E 05 F1 | 	add	fp, #52
0d96c     A7 1A 02 FB | 	rdlong	arg05, fp
0d970     34 4E 85 F1 | 	sub	fp, #52
0d974     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0d978     18 00 90 5D |  if_ne	jmp	#LR__1091
0d97c     2C 4E 05 F1 | 	add	fp, #44
0d980     A7 1A 02 FB | 	rdlong	arg05, fp
0d984     0C 4E 05 F1 | 	add	fp, #12
0d988     A7 1A 62 FC | 	wrlong	arg05, fp
0d98c     38 4E 85 F1 | 	sub	fp, #56
0d990     2C 00 90 FD | 	jmp	#LR__1092
0d994                 | LR__1091
0d994     73 01 00 FF 
0d998     01 1B 06 F6 | 	mov	arg05, ##@LR__5141
0d99c     38 4E 05 F1 | 	add	fp, #56
0d9a0     A7 1A 62 FC | 	wrlong	arg05, fp
0d9a4     0C 4E 85 F1 | 	sub	fp, #12
0d9a8     A7 12 02 F6 | 	mov	arg01, fp
0d9ac     2C 4E 85 F1 | 	sub	fp, #44
0d9b0     04 5A B0 FD | 	call	#_converttoint
0d9b4     14 4E 05 F1 | 	add	fp, #20
0d9b8     A7 FA 61 FC | 	wrlong	result1, fp
0d9bc     14 4E 85 F1 | 	sub	fp, #20
0d9c0                 | LR__1092
0d9c0                 | LR__1093
0d9c0                 | ' 
0d9c0                 | '     
0d9c0                 | '   if s<>"" then 
0d9c0     38 4E 05 F1 | 	add	fp, #56
0d9c4     A7 12 02 FB | 	rdlong	arg01, fp
0d9c8     38 4E 85 F1 | 	sub	fp, #56
0d9cc     73 01 00 FF 
0d9d0     02 15 06 F6 | 	mov	arg02, ##@LR__5142
0d9d4     64 11 B1 FD | 	call	#__system___string_cmp
0d9d8     00 FA 0D F2 | 	cmp	result1, #0 wz
0d9dc     E0 01 90 AD |  if_e	jmp	#LR__1096
0d9e0     94 CE BF FD | 	call	#_pop
0d9e4     FF 1A 02 F6 | 	mov	arg05, result3
0d9e8     2C 4E 05 F1 | 	add	fp, #44
0d9ec     A7 FA 61 FC | 	wrlong	result1, fp
0d9f0     04 4E 05 F1 | 	add	fp, #4
0d9f4     A7 FC 61 FC | 	wrlong	result2, fp
0d9f8     04 4E 05 F1 | 	add	fp, #4
0d9fc     A7 1A 62 FC | 	wrlong	arg05, fp
0da00     08 4E 85 F1 | 	sub	fp, #8
0da04     A7 12 02 F6 | 	mov	arg01, fp
0da08     2C 4E 85 F1 | 	sub	fp, #44
0da0c     A8 59 B0 FD | 	call	#_converttoint
0da10     10 4E 05 F1 | 	add	fp, #16
0da14     A7 FA 61 FC | 	wrlong	result1, fp
0da18                 | '     t1=pop()
0da18                 | '     channel=converttoint(t1) : if channel>31 then return
0da18     FD 1A 02 F6 | 	mov	arg05, result1
0da1c     10 4E 85 F1 | 	sub	fp, #16
0da20     20 1A 56 F2 | 	cmps	arg05, #32 wc
0da24     7C 07 90 3D |  if_ae	jmp	#LR__1113
0da28                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0da28     09 12 06 F6 | 	mov	arg01, #9
0da2c     74 60 B1 FD | 	call	#__system__close
0da30     09 1E 06 F6 | 	mov	local01, #9
0da34     73 01 00 FF 
0da38     03 13 06 F6 | 	mov	arg01, ##@LR__5143
0da3c     38 4E 05 F1 | 	add	fp, #56
0da40     A7 14 02 FB | 	rdlong	arg02, fp
0da44     38 4E 85 F1 | 	sub	fp, #56
0da48     24 11 B1 FD | 	call	#__system___string_concat
0da4c     FD 14 02 F6 | 	mov	arg02, result1
0da50     0F 13 02 F6 | 	mov	arg01, local01
0da54     00 16 06 F6 | 	mov	arg03, #0
0da58     BC 1C B1 FD | 	call	#__system___basic_open_string
0da5c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0da60     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0da64     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0da68     5A 00 00 FF 
0da6c     60 E4 05 F1 | 	add	objptr, ##46176
0da70     F2 FA 61 FC | 	wrlong	result1, objptr
0da74                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0da74     5A 00 00 FF 
0da78     60 E4 85 F1 | 	sub	objptr, ##46176
0da7c     B0 00 90 AD |  if_e	jmp	#LR__1094
0da80     00 12 06 F6 | 	mov	arg01, #0
0da84     EC 69 B1 FD | 	call	#__system___getiolock_0484
0da88     FD 12 02 F6 | 	mov	arg01, result1
0da8c     84 10 B1 FD | 	call	#__system___lockmem
0da90     73 01 00 FF 
0da94     10 15 06 F6 | 	mov	arg02, ##@LR__5144
0da98     00 12 06 F6 | 	mov	arg01, #0
0da9c     00 16 06 F6 | 	mov	arg03, #0
0daa0     64 1D B1 FD | 	call	#__system___basic_print_string
0daa4     5A 00 00 FF 
0daa8     60 E4 05 F1 | 	add	objptr, ##46176
0daac     F2 14 02 FB | 	rdlong	arg02, objptr
0dab0     5A 00 00 FF 
0dab4     60 E4 85 F1 | 	sub	objptr, ##46176
0dab8     00 12 06 F6 | 	mov	arg01, #0
0dabc     00 16 06 F6 | 	mov	arg03, #0
0dac0     0A 18 06 F6 | 	mov	arg04, #10
0dac4     84 1D B1 FD | 	call	#__system___basic_print_integer
0dac8     73 01 00 FF 
0dacc     1E 15 06 F6 | 	mov	arg02, ##@LR__5145
0dad0     00 12 06 F6 | 	mov	arg01, #0
0dad4     00 16 06 F6 | 	mov	arg03, #0
0dad8     2C 1D B1 FD | 	call	#__system___basic_print_string
0dadc     00 1E 06 F6 | 	mov	local01, #0
0dae0     5A 00 00 FF 
0dae4     60 E4 05 F1 | 	add	objptr, ##46176
0dae8     F2 12 02 FB | 	rdlong	arg01, objptr
0daec     5A 00 00 FF 
0daf0     60 E4 85 F1 | 	sub	objptr, ##46176
0daf4     78 36 B1 FD | 	call	#__system___strerror
0daf8     FD 14 02 F6 | 	mov	arg02, result1
0dafc     0F 13 02 F6 | 	mov	arg01, local01
0db00     00 16 06 F6 | 	mov	arg03, #0
0db04     00 1D B1 FD | 	call	#__system___basic_print_string
0db08     00 12 06 F6 | 	mov	arg01, #0
0db0c     0A 14 06 F6 | 	mov	arg02, #10
0db10     00 16 06 F6 | 	mov	arg03, #0
0db14     98 1C B1 FD | 	call	#__system___basic_print_char
0db18     00 12 06 F6 | 	mov	arg01, #0
0db1c     54 69 B1 FD | 	call	#__system___getiolock_0484
0db20     FD 00 68 FC | 	wrlong	#0, result1
0db24     09 12 06 F6 | 	mov	arg01, #9
0db28     78 5F B1 FD | 	call	#__system__close
0db2c     74 06 90 FD | 	jmp	#LR__1113
0db30                 | LR__1094
0db30                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
0db30     04 4E 05 F1 | 	add	fp, #4
0db34     A7 00 68 FC | 	wrlong	#0, fp
0db38                 | LR__1095
0db38     A7 1E 02 FB | 	rdlong	local01, fp
0db3c     01 1E 66 F0 | 	shl	local01, #1
0db40     11 14 06 F6 | 	mov	arg02, #17
0db44     0F 15 02 F1 | 	add	arg02, local01
0db48     78 4E 05 F1 | 	add	fp, #120
0db4c     A7 16 02 F6 | 	mov	arg03, fp
0db50     7C 4E 85 F1 | 	sub	fp, #124
0db54     09 12 06 F6 | 	mov	arg01, #9
0db58     01 18 06 F6 | 	mov	arg04, #1
0db5c     02 1A 06 F6 | 	mov	arg05, #2
0db60     B4 1D B1 FD | 	call	#__system___basic_get
0db64     10 4E 05 F1 | 	add	fp, #16
0db68     A7 12 02 FB | 	rdlong	arg01, fp
0db6c     0B 12 66 F0 | 	shl	arg01, #11
0db70     0C 4E 85 F1 | 	sub	fp, #12
0db74     A7 1E 02 FB | 	rdlong	local01, fp
0db78     01 1E 66 F0 | 	shl	local01, #1
0db7c     0F 13 02 F1 | 	add	arg01, local01
0db80     78 4E 05 F1 | 	add	fp, #120
0db84     A7 14 E2 FA | 	rdword	arg02, fp
0db88     7C 4E 85 F1 | 	sub	fp, #124
0db8c     0F 14 66 F7 | 	signx	arg02, #15
0db90     84 CC B0 FD | 	call	#_psdpoke
0db94     04 4E 05 F1 | 	add	fp, #4
0db98     A7 1E 02 FB | 	rdlong	local01, fp
0db9c     01 1E 06 F1 | 	add	local01, #1
0dba0     A7 1E 62 FC | 	wrlong	local01, fp
0dba4     02 00 00 FF 
0dba8     01 1E 56 F2 | 	cmps	local01, ##1025 wc
0dbac     88 FF 9F CD |  if_b	jmp	#LR__1095
0dbb0     04 4E 85 F1 | 	sub	fp, #4
0dbb4                 | '     close #9
0dbb4     09 12 06 F6 | 	mov	arg01, #9
0dbb8     E8 5E B1 FD | 	call	#__system__close
0dbbc                 | '                                                                        'for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0dbbc                 | '     return
0dbbc     E4 05 90 FD | 	jmp	#LR__1113
0dbc0                 | LR__1096
0dbc0                 | '     if wptr < ($80000 - 2048) then 
0dbc0     14 4E 05 F1 | 	add	fp, #20
0dbc4     A7 1E 02 FB | 	rdlong	local01, fp
0dbc8     14 4E 85 F1 | 	sub	fp, #20
0dbcc     FC 03 00 FF 
0dbd0     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0dbd4     70 00 90 3D |  if_ae	jmp	#LR__1098
0dbd8                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
0dbd8     04 4E 05 F1 | 	add	fp, #4
0dbdc     A7 00 68 FC | 	wrlong	#0, fp
0dbe0     04 4E 85 F1 | 	sub	fp, #4
0dbe4                 | LR__1097
0dbe4     10 4E 05 F1 | 	add	fp, #16
0dbe8     A7 1E 02 FB | 	rdlong	local01, fp
0dbec     0B 1E 66 F0 | 	shl	local01, #11
0dbf0     0C 4E 85 F1 | 	sub	fp, #12
0dbf4     A7 1A 02 FB | 	rdlong	arg05, fp
0dbf8     0D 19 02 F6 | 	mov	arg04, arg05
0dbfc     01 18 66 F0 | 	shl	arg04, #1
0dc00     0C 1F 02 F1 | 	add	local01, arg04
0dc04     10 4E 05 F1 | 	add	fp, #16
0dc08     A7 12 02 FB | 	rdlong	arg01, fp
0dc0c     14 4E 85 F1 | 	sub	fp, #20
0dc10     01 1A 66 F0 | 	shl	arg05, #1
0dc14     0D 13 02 F1 | 	add	arg01, arg05
0dc18     09 15 E2 FA | 	rdword	arg02, arg01
0dc1c     0F 13 02 F6 | 	mov	arg01, local01
0dc20     F4 CB B0 FD | 	call	#_psdpoke
0dc24     04 4E 05 F1 | 	add	fp, #4
0dc28     A7 1E 02 FB | 	rdlong	local01, fp
0dc2c     01 1E 06 F1 | 	add	local01, #1
0dc30     A7 1E 62 FC | 	wrlong	local01, fp
0dc34     04 4E 85 F1 | 	sub	fp, #4
0dc38     02 00 00 FF 
0dc3c     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0dc40     A0 FF 9F CD |  if_b	jmp	#LR__1097
0dc44     5C 05 90 FD | 	jmp	#LR__1113
0dc48                 | LR__1098
0dc48                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
0dc48     04 4E 05 F1 | 	add	fp, #4
0dc4c     A7 00 68 FC | 	wrlong	#0, fp
0dc50     04 4E 85 F1 | 	sub	fp, #4
0dc54                 | LR__1099
0dc54     10 4E 05 F1 | 	add	fp, #16
0dc58     A7 1E 02 FB | 	rdlong	local01, fp
0dc5c     0B 1E 66 F0 | 	shl	local01, #11
0dc60     0C 4E 85 F1 | 	sub	fp, #12
0dc64     A7 1A 02 FB | 	rdlong	arg05, fp
0dc68     0D 19 02 F6 | 	mov	arg04, arg05
0dc6c     01 18 66 F0 | 	shl	arg04, #1
0dc70     0C 1F 02 F1 | 	add	local01, arg04
0dc74     10 4E 05 F1 | 	add	fp, #16
0dc78     A7 12 02 FB | 	rdlong	arg01, fp
0dc7c     14 4E 85 F1 | 	sub	fp, #20
0dc80     01 1A 66 F0 | 	shl	arg05, #1
0dc84     0D 13 02 F1 | 	add	arg01, arg05
0dc88     CC CC B0 FD | 	call	#_psdpeek
0dc8c     FD 14 02 F6 | 	mov	arg02, result1
0dc90     0F 13 02 F6 | 	mov	arg01, local01
0dc94     80 CB B0 FD | 	call	#_psdpoke
0dc98     04 4E 05 F1 | 	add	fp, #4
0dc9c     A7 1E 02 FB | 	rdlong	local01, fp
0dca0     01 1E 06 F1 | 	add	local01, #1
0dca4     A7 1E 62 FC | 	wrlong	local01, fp
0dca8     04 4E 85 F1 | 	sub	fp, #4
0dcac     02 00 00 FF 
0dcb0     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0dcb4     9C FF 9F CD |  if_b	jmp	#LR__1099
0dcb8                 | '     return 
0dcb8     E8 04 90 FD | 	jmp	#LR__1113
0dcbc                 | '   
0dcbc                 | '                                                                         '  for i=0 to 1023: v.putpixel(i,288-samplebuf(channel,i)/200,40) : next i
0dcbc                 | '   return
0dcbc                 | LR__1100
0dcbc                 | ' for i=0 to 15 : harm(i)=0: next i  
0dcbc     04 4E 05 F1 | 	add	fp, #4
0dcc0     A7 00 68 FC | 	wrlong	#0, fp
0dcc4     97 16 48 FB | 	callpa	#(@LR__1102-@LR__1101)>>2,fcache_load_ptr_
0dcc8                 | LR__1101
0dcc8     A7 1E 02 FB | 	rdlong	local01, fp
0dccc     02 1E 66 F0 | 	shl	local01, #2
0dcd0     38 4E 05 F1 | 	add	fp, #56
0dcd4     A7 1E 02 F1 | 	add	local01, fp
0dcd8     0F 01 68 FC | 	wrlong	#0, local01
0dcdc     38 4E 85 F1 | 	sub	fp, #56
0dce0     A7 1E 02 FB | 	rdlong	local01, fp
0dce4     01 1E 06 F1 | 	add	local01, #1
0dce8     A7 1E 62 FC | 	wrlong	local01, fp
0dcec     10 1E 56 F2 | 	cmps	local01, #16 wc
0dcf0     D4 FF 9F CD |  if_b	jmp	#LR__1101
0dcf4                 | LR__1102
0dcf4     04 4E 85 F1 | 	sub	fp, #4
0dcf8                 | ' for i=numpar to 2 step -1 
0dcf8     A7 1E 02 FB | 	rdlong	local01, fp
0dcfc     04 4E 05 F1 | 	add	fp, #4
0dd00     A7 1E 62 FC | 	wrlong	local01, fp
0dd04     04 4E 85 F1 | 	sub	fp, #4
0dd08                 | LR__1103
0dd08     6C CB BF FD | 	call	#_pop
0dd0c     2C 4E 05 F1 | 	add	fp, #44
0dd10     A7 FA 61 FC | 	wrlong	result1, fp
0dd14     04 4E 05 F1 | 	add	fp, #4
0dd18     A7 FC 61 FC | 	wrlong	result2, fp
0dd1c     04 4E 05 F1 | 	add	fp, #4
0dd20     A7 FE 61 FC | 	wrlong	result3, fp
0dd24     30 4E 85 F1 | 	sub	fp, #48
0dd28     A7 1E 02 FB | 	rdlong	local01, fp
0dd2c     02 1E 86 F1 | 	sub	local01, #2
0dd30     02 1E 66 F0 | 	shl	local01, #2
0dd34     38 4E 05 F1 | 	add	fp, #56
0dd38     A7 1E 02 F1 | 	add	local01, fp
0dd3c     10 4E 85 F1 | 	sub	fp, #16
0dd40     A7 12 02 F6 | 	mov	arg01, fp
0dd44     2C 4E 85 F1 | 	sub	fp, #44
0dd48     18 57 B0 FD | 	call	#_converttofloat
0dd4c     0F FB 61 FC | 	wrlong	result1, local01
0dd50     04 4E 05 F1 | 	add	fp, #4
0dd54     A7 1E 02 FB | 	rdlong	local01, fp
0dd58     01 1E 86 F1 | 	sub	local01, #1
0dd5c     A7 1E 62 FC | 	wrlong	local01, fp
0dd60     04 4E 85 F1 | 	sub	fp, #4
0dd64     02 1E 56 F2 | 	cmps	local01, #2 wc
0dd68     9C FF 9F 3D |  if_ae	jmp	#LR__1103
0dd6c     08 CB BF FD | 	call	#_pop
0dd70     FF 1E 02 F6 | 	mov	local01, result3
0dd74     2C 4E 05 F1 | 	add	fp, #44
0dd78     A7 FA 61 FC | 	wrlong	result1, fp
0dd7c     04 4E 05 F1 | 	add	fp, #4
0dd80     A7 FC 61 FC | 	wrlong	result2, fp
0dd84     04 4E 05 F1 | 	add	fp, #4
0dd88     A7 1E 62 FC | 	wrlong	local01, fp
0dd8c     08 4E 85 F1 | 	sub	fp, #8
0dd90     A7 12 02 F6 | 	mov	arg01, fp
0dd94     2C 4E 85 F1 | 	sub	fp, #44
0dd98     1C 56 B0 FD | 	call	#_converttoint
0dd9c     10 4E 05 F1 | 	add	fp, #16
0dda0     A7 FA 61 FC | 	wrlong	result1, fp
0dda4                 | ' t1=pop()
0dda4                 | ' channel=converttoint(t1) : : if channel>31 then return
0dda4     FD 1E 02 F6 | 	mov	local01, result1
0dda8     10 4E 85 F1 | 	sub	fp, #16
0ddac     20 1E 56 F2 | 	cmps	local01, #32 wc
0ddb0     F0 03 90 3D |  if_ae	jmp	#LR__1113
0ddb4     20 4E 05 F1 | 	add	fp, #32
0ddb8     A7 00 68 FC | 	wrlong	#0, fp
0ddbc                 | ' max=0
0ddbc                 | ' if harm(0)<0 then
0ddbc     1C 4E 05 F1 | 	add	fp, #28
0ddc0     A7 12 02 FB | 	rdlong	arg01, fp
0ddc4     3C 4E 85 F1 | 	sub	fp, #60
0ddc8     00 14 06 F6 | 	mov	arg02, #0
0ddcc     01 16 06 F6 | 	mov	arg03, #1
0ddd0     BC 3C B1 FD | 	call	#__system___float_cmp
0ddd4     00 FA 55 F2 | 	cmps	result1, #0 wc
0ddd8     04 01 90 3D |  if_ae	jmp	#LR__1106
0dddc     3C 4E 05 F1 | 	add	fp, #60
0dde0     A7 FA 01 FB | 	rdlong	result1, fp
0dde4     1F FA 05 F4 | 	bitl	result1, #31
0dde8     24 4E 85 F1 | 	sub	fp, #36
0ddec     A7 FA 61 FC | 	wrlong	result1, fp
0ddf0     28 4E 05 F1 | 	add	fp, #40
0ddf4     A7 FA 01 FB | 	rdlong	result1, fp
0ddf8     1F FA 05 F4 | 	bitl	result1, #31
0ddfc     24 4E 85 F1 | 	sub	fp, #36
0de00     A7 FA 61 FC | 	wrlong	result1, fp
0de04     20 4E 05 F1 | 	add	fp, #32
0de08     00 C0 9F FF 
0de0c     A7 00 68 FC | 	wrlong	##1065353216, fp
0de10     24 4E 85 F1 | 	sub	fp, #36
0de14     A7 1E 02 FB | 	rdlong	local01, fp
0de18     28 4E 05 F1 | 	add	fp, #40
0de1c     A7 1E 62 FC | 	wrlong	local01, fp
0de20     24 4E 85 F1 | 	sub	fp, #36
0de24     A7 1E 02 FB | 	rdlong	local01, fp
0de28     28 4E 05 F1 | 	add	fp, #40
0de2c     A7 1E 62 FC | 	wrlong	local01, fp
0de30                 | '   harm(0)=1
0de30                 | '   harm(1)=even
0de30                 | '   harm(2)=odd
0de30                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0de30     40 4E 85 F1 | 	sub	fp, #64
0de34     A7 06 68 FC | 	wrlong	#3, fp
0de38                 | LR__1104
0de38     A7 1A 02 FB | 	rdlong	arg05, fp
0de3c     0D 21 02 F6 | 	mov	local02, arg05
0de40     02 20 66 F0 | 	shl	local02, #2
0de44     38 4E 05 F1 | 	add	fp, #56
0de48     A7 20 02 F1 | 	add	local02, fp
0de4c     02 1A 86 F1 | 	sub	arg05, #2
0de50     02 1A 66 F0 | 	shl	arg05, #2
0de54     A7 1A 02 F1 | 	add	arg05, fp
0de58     0D 13 02 FB | 	rdlong	arg01, arg05
0de5c     24 4E 85 F1 | 	sub	fp, #36
0de60     A7 14 02 FB | 	rdlong	arg02, fp
0de64     18 4E 85 F1 | 	sub	fp, #24
0de68     F0 37 B1 FD | 	call	#__system___float_mul
0de6c     10 FB 61 FC | 	wrlong	result1, local02
0de70     04 4E 05 F1 | 	add	fp, #4
0de74     A7 22 02 FB | 	rdlong	local03, fp
0de78     02 22 06 F1 | 	add	local03, #2
0de7c     A7 22 62 FC | 	wrlong	local03, fp
0de80     10 22 56 F2 | 	cmps	local03, #16 wc
0de84     B0 FF 9F CD |  if_b	jmp	#LR__1104
0de88                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0de88     A7 08 68 FC | 	wrlong	#4, fp
0de8c                 | LR__1105
0de8c     A7 22 02 FB | 	rdlong	local03, fp
0de90     11 21 02 F6 | 	mov	local02, local03
0de94     02 20 66 F0 | 	shl	local02, #2
0de98     38 4E 05 F1 | 	add	fp, #56
0de9c     A7 20 02 F1 | 	add	local02, fp
0dea0     02 22 86 F1 | 	sub	local03, #2
0dea4     02 22 66 F0 | 	shl	local03, #2
0dea8     A7 22 02 F1 | 	add	local03, fp
0deac     11 13 02 FB | 	rdlong	arg01, local03
0deb0     20 4E 85 F1 | 	sub	fp, #32
0deb4     A7 14 02 FB | 	rdlong	arg02, fp
0deb8     1C 4E 85 F1 | 	sub	fp, #28
0debc     9C 37 B1 FD | 	call	#__system___float_mul
0dec0     10 FB 61 FC | 	wrlong	result1, local02
0dec4     04 4E 05 F1 | 	add	fp, #4
0dec8     A7 22 02 FB | 	rdlong	local03, fp
0decc     02 22 06 F1 | 	add	local03, #2
0ded0     A7 22 62 FC | 	wrlong	local03, fp
0ded4     0F 22 56 F2 | 	cmps	local03, #15 wc
0ded8     B0 FF 9F CD |  if_b	jmp	#LR__1105
0dedc     04 4E 85 F1 | 	sub	fp, #4
0dee0                 | LR__1106
0dee0                 | ' if harm(0)>=0 then ' synthesize with harmonics
0dee0     3C 4E 05 F1 | 	add	fp, #60
0dee4     A7 12 02 FB | 	rdlong	arg01, fp
0dee8     3C 4E 85 F1 | 	sub	fp, #60
0deec     00 14 06 F6 | 	mov	arg02, #0
0def0     01 16 66 F6 | 	neg	arg03, #1
0def4     98 3B B1 FD | 	call	#__system___float_cmp
0def8     00 FA 55 F2 | 	cmps	result1, #0 wc
0defc     A4 02 90 CD |  if_b	jmp	#LR__1112
0df00                 | '   for i=0 to 1023
0df00     04 4E 05 F1 | 	add	fp, #4
0df04     A7 00 68 FC | 	wrlong	#0, fp
0df08     04 4E 85 F1 | 	sub	fp, #4
0df0c                 | LR__1107
0df0c     24 4E 05 F1 | 	add	fp, #36
0df10     A7 00 68 FC | 	wrlong	#0, fp
0df14                 | '     spl=0
0df14                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0df14     1C 4E 85 F1 | 	sub	fp, #28
0df18     A7 00 68 FC | 	wrlong	#0, fp
0df1c                 | LR__1108
0df1c     A7 20 02 FB | 	rdlong	local02, fp
0df20     02 20 66 F0 | 	shl	local02, #2
0df24     34 4E 05 F1 | 	add	fp, #52
0df28     A7 20 02 F1 | 	add	local02, fp
0df2c     10 23 02 FB | 	rdlong	local03, local02
0df30     87 E4 1D FF 
0df34     DB 21 06 F6 | 	mov	local02, ##1003032539
0df38     38 4E 85 F1 | 	sub	fp, #56
0df3c     A7 12 02 FB | 	rdlong	arg01, fp
0df40     04 4E 85 F1 | 	sub	fp, #4
0df44     09 13 52 F6 | 	abs	arg01, arg01 wc
0df48     1F 24 C6 C9 |  if_b	decod	local04, #31
0df4c     00 24 06 36 |  if_ae	mov	local04, #0
0df50     04 33 B1 FD | 	call	#__system___float_fromuns
0df54     12 FB 61 F5 | 	xor	result1, local04
0df58     FD 14 02 F6 | 	mov	arg02, result1
0df5c     10 13 02 F6 | 	mov	arg01, local02
0df60     F8 36 B1 FD | 	call	#__system___float_mul
0df64     FD 20 02 F6 | 	mov	local02, result1
0df68     08 4E 05 F1 | 	add	fp, #8
0df6c     A7 12 02 FB | 	rdlong	arg01, fp
0df70     08 4E 85 F1 | 	sub	fp, #8
0df74     01 12 06 F1 | 	add	arg01, #1
0df78     09 13 52 F6 | 	abs	arg01, arg01 wc
0df7c     1F 24 C6 C9 |  if_b	decod	local04, #31
0df80     00 24 06 36 |  if_ae	mov	local04, #0
0df84     D0 32 B1 FD | 	call	#__system___float_fromuns
0df88     12 FB 61 F5 | 	xor	result1, local04
0df8c     FD 14 02 F6 | 	mov	arg02, result1
0df90     10 13 02 F6 | 	mov	arg01, local02
0df94     C4 36 B1 FD | 	call	#__system___float_mul
0df98     FD 12 02 F6 | 	mov	arg01, result1
0df9c     F8 3F B1 FD | 	call	#__system____builtin_sinf
0dfa0     FD 14 02 F6 | 	mov	arg02, result1
0dfa4     11 13 02 F6 | 	mov	arg01, local03
0dfa8     B0 36 B1 FD | 	call	#__system___float_mul
0dfac     FD 14 02 F6 | 	mov	arg02, result1
0dfb0     24 4E 05 F1 | 	add	fp, #36
0dfb4     A7 12 02 FB | 	rdlong	arg01, fp
0dfb8     24 4E 85 F1 | 	sub	fp, #36
0dfbc     CC 32 B1 FD | 	call	#__system___float_add
0dfc0     24 4E 05 F1 | 	add	fp, #36
0dfc4     A7 FA 61 FC | 	wrlong	result1, fp
0dfc8     1C 4E 85 F1 | 	sub	fp, #28
0dfcc     A7 16 02 FB | 	rdlong	arg03, fp
0dfd0     01 16 06 F1 | 	add	arg03, #1
0dfd4     A7 16 62 FC | 	wrlong	arg03, fp
0dfd8     10 16 56 F2 | 	cmps	arg03, #16 wc
0dfdc     3C FF 9F CD |  if_b	jmp	#LR__1108
0dfe0                 | '     if abs(spl)>max then max=abs(spl)  ': print max 
0dfe0     1C 4E 05 F1 | 	add	fp, #28
0dfe4     A7 12 02 FB | 	rdlong	arg01, fp
0dfe8     1F 12 06 F4 | 	bitl	arg01, #31
0dfec     04 4E 85 F1 | 	sub	fp, #4
0dff0     A7 14 02 FB | 	rdlong	arg02, fp
0dff4     20 4E 85 F1 | 	sub	fp, #32
0dff8     01 16 66 F6 | 	neg	arg03, #1
0dffc     90 3A B1 FD | 	call	#__system___float_cmp
0e000     01 FA 55 F2 | 	cmps	result1, #1 wc
0e004     18 00 90 CD |  if_b	jmp	#LR__1109
0e008     24 4E 05 F1 | 	add	fp, #36
0e00c     A7 FA 01 FB | 	rdlong	result1, fp
0e010     1F FA 05 F4 | 	bitl	result1, #31
0e014     04 4E 85 F1 | 	sub	fp, #4
0e018     A7 FA 61 FC | 	wrlong	result1, fp
0e01c     20 4E 85 F1 | 	sub	fp, #32
0e020                 | LR__1109
0e020     04 4E 05 F1 | 	add	fp, #4
0e024     A7 22 02 FB | 	rdlong	local03, fp
0e028     01 22 06 F1 | 	add	local03, #1
0e02c     A7 22 62 FC | 	wrlong	local03, fp
0e030     04 4E 85 F1 | 	sub	fp, #4
0e034     02 00 00 FF 
0e038     00 22 56 F2 | 	cmps	local03, ##1024 wc
0e03c     CC FE 9F CD |  if_b	jmp	#LR__1107
0e040                 | '   for i=0 to 1023
0e040     04 4E 05 F1 | 	add	fp, #4
0e044     A7 00 68 FC | 	wrlong	#0, fp
0e048     04 4E 85 F1 | 	sub	fp, #4
0e04c                 | LR__1110
0e04c     24 4E 05 F1 | 	add	fp, #36
0e050     A7 00 68 FC | 	wrlong	#0, fp
0e054                 | '     spl=0
0e054                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j ':' print spl
0e054     1C 4E 85 F1 | 	sub	fp, #28
0e058     A7 00 68 FC | 	wrlong	#0, fp
0e05c                 | LR__1111
0e05c     A7 22 02 FB | 	rdlong	local03, fp
0e060     02 22 66 F0 | 	shl	local03, #2
0e064     34 4E 05 F1 | 	add	fp, #52
0e068     A7 22 02 F1 | 	add	local03, fp
0e06c     11 23 02 FB | 	rdlong	local03, local03
0e070     1C 4E 85 F1 | 	sub	fp, #28
0e074     A7 14 02 FB | 	rdlong	arg02, fp
0e078     20 4E 85 F1 | 	sub	fp, #32
0e07c     58 7F 23 FF 
0e080     00 12 06 F6 | 	mov	arg01, ##1191096320
0e084     D8 37 B1 FD | 	call	#__system___float_div
0e088     FD 14 02 F6 | 	mov	arg02, result1
0e08c     11 13 02 F6 | 	mov	arg01, local03
0e090     C8 35 B1 FD | 	call	#__system___float_mul
0e094     FD 22 02 F6 | 	mov	local03, result1
0e098     87 E4 1D FF 
0e09c     DB 21 06 F6 | 	mov	local02, ##1003032539
0e0a0     04 4E 05 F1 | 	add	fp, #4
0e0a4     A7 12 02 FB | 	rdlong	arg01, fp
0e0a8     04 4E 85 F1 | 	sub	fp, #4
0e0ac     09 13 52 F6 | 	abs	arg01, arg01 wc
0e0b0     1F 24 C6 C9 |  if_b	decod	local04, #31
0e0b4     00 24 06 36 |  if_ae	mov	local04, #0
0e0b8     9C 31 B1 FD | 	call	#__system___float_fromuns
0e0bc     12 FB 61 F5 | 	xor	result1, local04
0e0c0     FD 14 02 F6 | 	mov	arg02, result1
0e0c4     10 13 02 F6 | 	mov	arg01, local02
0e0c8     90 35 B1 FD | 	call	#__system___float_mul
0e0cc     FD 20 02 F6 | 	mov	local02, result1
0e0d0     08 4E 05 F1 | 	add	fp, #8
0e0d4     A7 12 02 FB | 	rdlong	arg01, fp
0e0d8     08 4E 85 F1 | 	sub	fp, #8
0e0dc     01 12 06 F1 | 	add	arg01, #1
0e0e0     09 13 52 F6 | 	abs	arg01, arg01 wc
0e0e4     1F 24 C6 C9 |  if_b	decod	local04, #31
0e0e8     00 24 06 36 |  if_ae	mov	local04, #0
0e0ec     68 31 B1 FD | 	call	#__system___float_fromuns
0e0f0     12 FB 61 F5 | 	xor	result1, local04
0e0f4     FD 14 02 F6 | 	mov	arg02, result1
0e0f8     10 13 02 F6 | 	mov	arg01, local02
0e0fc     5C 35 B1 FD | 	call	#__system___float_mul
0e100     FD 12 02 F6 | 	mov	arg01, result1
0e104     90 3E B1 FD | 	call	#__system____builtin_sinf
0e108     FD 14 02 F6 | 	mov	arg02, result1
0e10c     11 13 02 F6 | 	mov	arg01, local03
0e110     48 35 B1 FD | 	call	#__system___float_mul
0e114     FD 14 02 F6 | 	mov	arg02, result1
0e118     24 4E 05 F1 | 	add	fp, #36
0e11c     A7 12 02 FB | 	rdlong	arg01, fp
0e120     24 4E 85 F1 | 	sub	fp, #36
0e124     64 31 B1 FD | 	call	#__system___float_add
0e128     24 4E 05 F1 | 	add	fp, #36
0e12c     A7 FA 61 FC | 	wrlong	result1, fp
0e130     1C 4E 85 F1 | 	sub	fp, #28
0e134     A7 22 02 FB | 	rdlong	local03, fp
0e138     01 22 06 F1 | 	add	local03, #1
0e13c     A7 22 62 FC | 	wrlong	local03, fp
0e140     10 22 56 F2 | 	cmps	local03, #16 wc
0e144     14 FF 9F CD |  if_b	jmp	#LR__1111
0e148     08 4E 05 F1 | 	add	fp, #8
0e14c     A7 22 02 FB | 	rdlong	local03, fp
0e150     0B 22 66 F0 | 	shl	local03, #11
0e154     0C 4E 85 F1 | 	sub	fp, #12
0e158     A7 20 02 FB | 	rdlong	local02, fp
0e15c     01 20 66 F0 | 	shl	local02, #1
0e160     10 23 02 F1 | 	add	local03, local02
0e164     20 4E 05 F1 | 	add	fp, #32
0e168     A7 12 02 FB | 	rdlong	arg01, fp
0e16c     24 4E 85 F1 | 	sub	fp, #36
0e170     01 14 06 F6 | 	mov	arg02, #1
0e174     AC 39 B1 FD | 	call	#__system___float_tointeger
0e178     FD 14 02 F6 | 	mov	arg02, result1
0e17c     11 13 02 F6 | 	mov	arg01, local03
0e180     94 C6 B0 FD | 	call	#_psdpoke
0e184     04 4E 05 F1 | 	add	fp, #4
0e188     A7 22 02 FB | 	rdlong	local03, fp
0e18c     01 22 06 F1 | 	add	local03, #1
0e190     A7 22 62 FC | 	wrlong	local03, fp
0e194     04 4E 85 F1 | 	sub	fp, #4
0e198     02 00 00 FF 
0e19c     00 22 56 F2 | 	cmps	local03, ##1024 wc
0e1a0     A8 FE 9F CD |  if_b	jmp	#LR__1110
0e1a4                 | LR__1112
0e1a4                 | LR__1113
0e1a4     A7 F0 03 F6 | 	mov	ptra, fp
0e1a8     B2 00 A0 FD | 	call	#popregs_
0e1ac                 | _do_defsnd_ret
0e1ac     2D 00 64 FD | 	ret
0e1b0                 | 
0e1b0                 | ' 
0e1b0                 | ' ' ---------------  List the program. 
0e1b0                 | ' 
0e1b0                 | ' sub do_list
0e1b0                 | _do_list
0e1b0     02 4A 05 F6 | 	mov	COUNT_, #2
0e1b4     A8 00 A0 FD | 	call	#pushregs_
0e1b8     B8 F0 07 F1 | 	add	ptra, #184
0e1bc     04 4E 05 F1 | 	add	fp, #4
0e1c0     A7 00 68 FC | 	wrlong	#0, fp
0e1c4     04 4E 05 F1 | 	add	fp, #4
0e1c8     FF FF BF FF 
0e1cc     A7 FE 6B FC | 	wrlong	##2147483647, fp
0e1d0     08 4E 85 F1 | 	sub	fp, #8
0e1d4     4A 00 00 FF 
0e1d8     B0 E4 05 F1 | 	add	objptr, ##38064
0e1dc     F2 1E 02 FB | 	rdlong	local01, objptr
0e1e0     0F 17 02 F6 | 	mov	arg03, local01
0e1e4     01 16 66 F0 | 	shl	arg03, #1
0e1e8     0F 17 02 F1 | 	add	arg03, local01
0e1ec     02 16 66 F0 | 	shl	arg03, #2
0e1f0     03 00 00 FF 
0e1f4     04 E4 85 F1 | 	sub	objptr, ##1540
0e1f8     F2 16 02 F1 | 	add	arg03, objptr
0e1fc     0B 17 02 FB | 	rdlong	arg03, arg03
0e200     A7 16 62 FC | 	wrlong	arg03, fp
0e204                 | ' 
0e204                 | ' startline=0 : endline=$7FFFFFFF
0e204                 | ' numpar=compiledline(lineptr_e).result.uresult
0e204                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0e204     01 16 0E F2 | 	cmp	arg03, #1 wz
0e208     47 00 00 FF 
0e20c     AC E4 85 F1 | 	sub	objptr, ##36524
0e210     3C 00 90 5D |  if_ne	jmp	#LR__1120
0e214     60 C6 BF FD | 	call	#_pop
0e218     FF 1E 02 F6 | 	mov	local01, result3
0e21c     0C 4E 05 F1 | 	add	fp, #12
0e220     A7 FA 61 FC | 	wrlong	result1, fp
0e224     04 4E 05 F1 | 	add	fp, #4
0e228     A7 FC 61 FC | 	wrlong	result2, fp
0e22c     04 4E 05 F1 | 	add	fp, #4
0e230     A7 1E 62 FC | 	wrlong	local01, fp
0e234     08 4E 85 F1 | 	sub	fp, #8
0e238     A7 12 02 F6 | 	mov	arg01, fp
0e23c     0C 4E 85 F1 | 	sub	fp, #12
0e240     74 51 B0 FD | 	call	#_converttoint
0e244     04 4E 05 F1 | 	add	fp, #4
0e248     A7 FA 61 FC | 	wrlong	result1, fp
0e24c     04 4E 85 F1 | 	sub	fp, #4
0e250                 | LR__1120
0e250                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0e250     A7 16 02 FB | 	rdlong	arg03, fp
0e254     02 16 0E F2 | 	cmp	arg03, #2 wz
0e258     7C 00 90 5D |  if_ne	jmp	#LR__1121
0e25c     18 C6 BF FD | 	call	#_pop
0e260     FF 1E 02 F6 | 	mov	local01, result3
0e264     0C 4E 05 F1 | 	add	fp, #12
0e268     A7 FA 61 FC | 	wrlong	result1, fp
0e26c     04 4E 05 F1 | 	add	fp, #4
0e270     A7 FC 61 FC | 	wrlong	result2, fp
0e274     04 4E 05 F1 | 	add	fp, #4
0e278     A7 1E 62 FC | 	wrlong	local01, fp
0e27c     08 4E 85 F1 | 	sub	fp, #8
0e280     A7 12 02 F6 | 	mov	arg01, fp
0e284     0C 4E 85 F1 | 	sub	fp, #12
0e288     2C 51 B0 FD | 	call	#_converttoint
0e28c     FD 1E 02 F6 | 	mov	local01, result1
0e290     08 4E 05 F1 | 	add	fp, #8
0e294     A7 1E 62 FC | 	wrlong	local01, fp
0e298     08 4E 85 F1 | 	sub	fp, #8
0e29c     D8 C5 BF FD | 	call	#_pop
0e2a0     FF 1E 02 F6 | 	mov	local01, result3
0e2a4     0C 4E 05 F1 | 	add	fp, #12
0e2a8     A7 FA 61 FC | 	wrlong	result1, fp
0e2ac     04 4E 05 F1 | 	add	fp, #4
0e2b0     A7 FC 61 FC | 	wrlong	result2, fp
0e2b4     04 4E 05 F1 | 	add	fp, #4
0e2b8     A7 1E 62 FC | 	wrlong	local01, fp
0e2bc     08 4E 85 F1 | 	sub	fp, #8
0e2c0     A7 12 02 F6 | 	mov	arg01, fp
0e2c4     0C 4E 85 F1 | 	sub	fp, #12
0e2c8     EC 50 B0 FD | 	call	#_converttoint
0e2cc     04 4E 05 F1 | 	add	fp, #4
0e2d0     A7 FA 61 FC | 	wrlong	result1, fp
0e2d4     04 4E 85 F1 | 	sub	fp, #4
0e2d8                 | LR__1121
0e2d8                 | ' 
0e2d8                 | ' 
0e2d8                 | ' print
0e2d8     00 12 06 F6 | 	mov	arg01, #0
0e2dc     94 61 B1 FD | 	call	#__system___getiolock_0484
0e2e0     FD 12 02 F6 | 	mov	arg01, result1
0e2e4     2C 08 B1 FD | 	call	#__system___lockmem
0e2e8     00 12 06 F6 | 	mov	arg01, #0
0e2ec     0A 14 06 F6 | 	mov	arg02, #10
0e2f0     00 16 06 F6 | 	mov	arg03, #0
0e2f4     B8 14 B1 FD | 	call	#__system___basic_print_char
0e2f8     00 12 06 F6 | 	mov	arg01, #0
0e2fc     74 61 B1 FD | 	call	#__system___getiolock_0484
0e300     FD 00 68 FC | 	wrlong	#0, result1
0e304     4A 00 00 FF 
0e308     B4 E4 05 F1 | 	add	objptr, ##38068
0e30c     F2 20 02 FB | 	rdlong	local02, objptr
0e310     0F 00 00 FF 
0e314     A4 E5 05 F1 | 	add	objptr, ##8100
0e318     F2 20 62 FC | 	wrlong	local02, objptr
0e31c     5A 00 00 FF 
0e320     58 E4 85 F1 | 	sub	objptr, ##46168
0e324                 | ' do 
0e324                 | LR__1122
0e324     20 4E 05 F1 | 	add	fp, #32
0e328     A7 12 02 F6 | 	mov	arg01, fp
0e32c     20 4E 85 F1 | 	sub	fp, #32
0e330     5A 00 00 FF 
0e334     58 E4 05 F1 | 	add	objptr, ##46168
0e338     F2 14 02 FB | 	rdlong	arg02, objptr
0e33c     18 16 06 F6 | 	mov	arg03, #24
0e340     4E 00 00 FF 
0e344     8C E5 85 F1 | 	sub	objptr, ##40332
0e348     88 FB B0 FD | 	call	#_psram_spin2_read1
0e34c     0B 00 00 FF 
0e350     CC E4 85 F1 | 	sub	objptr, ##5836
0e354                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
0e354                 | '   
0e354                 | '   if header(0)<> $FFFFFFFF then
0e354     20 4E 05 F1 | 	add	fp, #32
0e358     A7 20 02 FB | 	rdlong	local02, fp
0e35c     20 4E 85 F1 | 	sub	fp, #32
0e360     FF FF 7F FF 
0e364     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0e368     A8 00 90 AD |  if_e	jmp	#LR__1124
0e36c     38 4E 05 F1 | 	add	fp, #56
0e370     3F 16 06 F6 | 	mov	arg03, #63
0e374     28 16 62 FD | 	setq	arg03
0e378     A7 00 68 FC | 	wrlong	#0, fp
0e37c     A7 12 02 F6 | 	mov	arg01, fp
0e380     10 4E 85 F1 | 	sub	fp, #16
0e384     A7 14 02 FB | 	rdlong	arg02, fp
0e388     04 4E 05 F1 | 	add	fp, #4
0e38c     A7 16 02 FB | 	rdlong	arg03, fp
0e390     2C 4E 85 F1 | 	sub	fp, #44
0e394     0B 00 00 FF 
0e398     CC E4 05 F1 | 	add	objptr, ##5836
0e39c     34 FB B0 FD | 	call	#_psram_spin2_read1
0e3a0     0B 00 00 FF 
0e3a4     CC E4 85 F1 | 	sub	objptr, ##5836
0e3a8                 | '     longfill(linebuf,0,64)
0e3a8                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0e3a8                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0e3a8     20 4E 05 F1 | 	add	fp, #32
0e3ac     A7 20 02 FB | 	rdlong	local02, fp
0e3b0     1C 4E 85 F1 | 	sub	fp, #28
0e3b4     A7 1E 02 FB | 	rdlong	local01, fp
0e3b8     04 4E 85 F1 | 	sub	fp, #4
0e3bc     0F 21 52 F2 | 	cmps	local02, local01 wc
0e3c0     30 00 90 CD |  if_b	jmp	#LR__1123
0e3c4     20 4E 05 F1 | 	add	fp, #32
0e3c8     A7 20 02 FB | 	rdlong	local02, fp
0e3cc     18 4E 85 F1 | 	sub	fp, #24
0e3d0     A7 16 02 FB | 	rdlong	arg03, fp
0e3d4     08 4E 85 F1 | 	sub	fp, #8
0e3d8     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0e3dc     14 00 90 1D |  if_a	jmp	#LR__1123
0e3e0     38 4E 05 F1 | 	add	fp, #56
0e3e4     A7 12 02 F6 | 	mov	arg01, fp
0e3e8     38 4E 85 F1 | 	sub	fp, #56
0e3ec                 | ' 
0e3ec                 | ' write(text)
0e3ec     3C F4 B0 FD | 	call	#_hg010b_spin2_write
0e3f0                 | ' crlf
0e3f0     04 F7 B0 FD | 	call	#_hg010b_spin2_crlf
0e3f4                 | LR__1123
0e3f4     34 4E 05 F1 | 	add	fp, #52
0e3f8     A7 20 02 FB | 	rdlong	local02, fp
0e3fc     34 4E 85 F1 | 	sub	fp, #52
0e400     5A 00 00 FF 
0e404     58 E4 05 F1 | 	add	objptr, ##46168
0e408     F2 20 62 FC | 	wrlong	local02, objptr
0e40c     5A 00 00 FF 
0e410     58 E4 85 F1 | 	sub	objptr, ##46168
0e414                 | LR__1124
0e414     34 4E 05 F1 | 	add	fp, #52
0e418     A7 20 02 FB | 	rdlong	local02, fp
0e41c     34 4E 85 F1 | 	sub	fp, #52
0e420     FF FF 3F FF 
0e424     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0e428     20 4E 05 51 |  if_ne	add	fp, #32
0e42c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e430     20 4E 85 51 |  if_ne	sub	fp, #32
0e434     FF FF 7F 5F 
0e438     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0e43c     E4 FE 9F 5D |  if_ne	jmp	#LR__1122
0e440     A7 F0 03 F6 | 	mov	ptra, fp
0e444     B2 00 A0 FD | 	call	#popregs_
0e448                 | _do_list_ret
0e448     2D 00 64 FD | 	ret
0e44c                 | 
0e44c                 | ' 
0e44c                 | ' '---------------- Clear the program
0e44c                 | ' 
0e44c                 | ' sub do_new
0e44c                 | _do_new
0e44c     03 4A 05 F6 | 	mov	COUNT_, #3
0e450     A8 00 A0 FD | 	call	#pushregs_
0e454     13 12 C6 F9 | 	decod	arg01, #19
0e458     01 14 66 F6 | 	neg	arg02, #1
0e45c     70 C3 B0 FD | 	call	#_pslpoke
0e460     35 00 00 FF 
0e464     38 E4 05 F1 | 	add	objptr, ##27192
0e468     F2 00 68 FC | 	wrlong	#0, objptr
0e46c     15 00 00 FF 
0e470     7C E4 05 F1 | 	add	objptr, ##10876
0e474     00 04 80 FF 
0e478     F2 00 68 FC | 	wrlong	##524288, objptr
0e47c     0E 00 00 FF 
0e480     38 E4 05 F1 | 	add	objptr, ##7224
0e484     00 04 80 FF 
0e488     F2 00 68 FC | 	wrlong	##524288, objptr
0e48c     04 E4 05 F1 | 	add	objptr, #4
0e490     00 04 80 FF 
0e494     F2 00 68 FC | 	wrlong	##524288, objptr
0e498     15 00 00 FF 
0e49c     68 E4 85 F1 | 	sub	objptr, ##10856
0e4a0     F2 00 68 FC | 	wrlong	#0, objptr
0e4a4     07 00 00 FF 
0e4a8     24 E4 05 F1 | 	add	objptr, ##3620
0e4ac     F2 00 68 FC | 	wrlong	#0, objptr
0e4b0     07 00 00 FF 
0e4b4     20 E4 85 F1 | 	sub	objptr, ##3616
0e4b8     00 04 80 FF 
0e4bc     F2 00 68 FC | 	wrlong	##524288, objptr
0e4c0     0F 00 00 FF 
0e4c4     38 E4 05 F1 | 	add	objptr, ##7736
0e4c8     F2 00 68 FC | 	wrlong	#0, objptr
0e4cc     08 00 00 FF 
0e4d0     0C E4 85 F1 | 	sub	objptr, ##4108
0e4d4     F2 00 68 FC | 	wrlong	#0, objptr
0e4d8     04 E4 05 F1 | 	add	objptr, #4
0e4dc     FF FF FF FF 
0e4e0     F2 FE 6B FC | 	wrlong	##-1, objptr
0e4e4     0E 00 00 FF 
0e4e8     58 E4 05 F1 | 	add	objptr, ##7256
0e4ec     F2 00 68 FC | 	wrlong	#0, objptr
0e4f0     04 E4 05 F1 | 	add	objptr, #4
0e4f4     F2 00 68 FC | 	wrlong	#0, objptr
0e4f8                 | ' 
0e4f8                 | ' pslpoke(memlo,$FFFFFFFF)
0e4f8                 | ' varnum=0
0e4f8                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
0e4f8                 | ' stackpointer=0
0e4f8                 | ' lineptr=0 
0e4f8                 | ' programptr=memlo : stringptr=0
0e4f8                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
0e4f8                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0e4f8     00 1E 06 F6 | 	mov	local01, #0
0e4fc     06 00 00 FF 
0e500     4C E4 85 F1 | 	sub	objptr, ##3148
0e504     97 16 48 FB | 	callpa	#(@LR__1131-@LR__1130)>>2,fcache_load_ptr_
0e508                 | LR__1130
0e508     0F 21 02 F6 | 	mov	local02, local01
0e50c     02 20 66 F0 | 	shl	local02, #2
0e510     0F 21 02 F1 | 	add	local02, local01
0e514     02 20 66 F0 | 	shl	local02, #2
0e518     F2 20 02 F1 | 	add	local02, objptr
0e51c     08 20 06 F1 | 	add	local02, #8
0e520     FF FF FF FF 
0e524     10 FF 6B FC | 	wrlong	##-1, local02
0e528     01 1E 06 F1 | 	add	local01, #1
0e52c     41 1E 56 F2 | 	cmps	local01, #65 wc
0e530     D4 FF 9F CD |  if_b	jmp	#LR__1130
0e534                 | LR__1131
0e534     52 00 00 FF 
0e538     CC E4 85 F1 | 	sub	objptr, ##42188
0e53c                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
0e53c     00 1E 06 F6 | 	mov	local01, #0
0e540                 | LR__1132
0e540     0F 21 02 F6 | 	mov	local02, local01
0e544     02 20 66 F0 | 	shl	local02, #2
0e548     59 00 00 FF 
0e54c     74 E5 05 F1 | 	add	objptr, ##45940
0e550     F2 20 02 F1 | 	add	local02, objptr
0e554     10 21 0A FB | 	rdlong	local02, local02 wz
0e558     59 00 00 FF 
0e55c     74 E5 85 F1 | 	sub	objptr, ##45940
0e560     34 00 90 AD |  if_e	jmp	#LR__1133
0e564     0F 13 02 F6 | 	mov	arg01, local01
0e568     00 14 06 F6 | 	mov	arg02, #0
0e56c     00 16 06 F6 | 	mov	arg03, #0
0e570     D8 E1 B0 FD | 	call	#_hg010b_spin2_setspritesize
0e574     0F 21 02 F6 | 	mov	local02, local01
0e578     02 20 66 F0 | 	shl	local02, #2
0e57c     59 00 00 FF 
0e580     74 E5 05 F1 | 	add	objptr, ##45940
0e584     F2 20 02 F1 | 	add	local02, objptr
0e588     10 13 02 FB | 	rdlong	arg01, local02
0e58c     59 00 00 FF 
0e590     74 E5 85 F1 | 	sub	objptr, ##45940
0e594     CC 44 B1 FD | 	call	#__system___gc_free
0e598                 | LR__1133
0e598     01 1E 06 F1 | 	add	local01, #1
0e59c     10 1E 56 F2 | 	cmps	local01, #16 wc
0e5a0     9C FF 9F CD |  if_b	jmp	#LR__1132
0e5a4     59 00 00 FF 
0e5a8     C8 E5 05 F1 | 	add	objptr, ##46024
0e5ac     00 C0 9F FF 
0e5b0     F2 00 68 FC | 	wrlong	##1065353216, objptr
0e5b4     04 E4 05 F1 | 	add	objptr, #4
0e5b8     00 C0 9F FF 
0e5bc     F2 00 68 FC | 	wrlong	##1065353216, objptr
0e5c0     59 00 00 FF 
0e5c4     C8 E5 85 F1 | 	sub	objptr, ##46024
0e5c8     F2 22 02 FB | 	rdlong	local03, objptr
0e5cc     59 00 00 FF 
0e5d0     B4 E5 05 F1 | 	add	objptr, ##46004
0e5d4     F2 22 62 FC | 	wrlong	local03, objptr
0e5d8     59 00 00 FF 
0e5dc     B8 E5 85 F1 | 	sub	objptr, ##46008
0e5e0     11 12 06 F6 | 	mov	arg01, #17
0e5e4     08 14 06 F6 | 	mov	arg02, #8
0e5e8     10 16 06 F6 | 	mov	arg03, #16
0e5ec     5C E1 B0 FD | 	call	#_hg010b_spin2_setspritesize
0e5f0     10 12 06 F6 | 	mov	arg01, #16
0e5f4     20 14 06 F6 | 	mov	arg02, #32
0e5f8     20 16 06 F6 | 	mov	arg03, #32
0e5fc     4C E1 B0 FD | 	call	#_hg010b_spin2_setspritesize
0e600     73 01 00 FF 
0e604     21 23 06 F6 | 	mov	local03, ##@LR__5146
0e608     59 00 00 FF 
0e60c     E4 E5 05 F1 | 	add	objptr, ##46052
0e610     F2 22 62 FC | 	wrlong	local03, objptr
0e614     59 00 00 FF 
0e618     E4 E5 85 F1 | 	sub	objptr, ##46052
0e61c     C0 B3 B0 FD | 	call	#_init_audio
0e620     A7 F0 03 F6 | 	mov	ptra, fp
0e624     B2 00 A0 FD | 	call	#popregs_
0e628                 | _do_new_ret
0e628     2D 00 64 FD | 	ret
0e62c                 | 
0e62c                 | ' 
0e62c                 | ' '----------------------- goto
0e62c                 | ' sub do_fast_goto
0e62c                 | _do_fast_goto
0e62c     02 4A 05 F6 | 	mov	COUNT_, #2
0e630     A8 00 A0 FD | 	call	#pushregs_
0e634                 | _do_fast_goto_enter
0e634     4A 00 00 FF 
0e638     B0 E4 05 F1 | 	add	objptr, ##38064
0e63c     F2 12 02 FB | 	rdlong	arg01, objptr
0e640     09 1F 02 F6 | 	mov	local01, arg01
0e644     01 1E 66 F0 | 	shl	local01, #1
0e648     09 1F 02 F1 | 	add	local01, arg01
0e64c     02 1E 66 F0 | 	shl	local01, #2
0e650     03 00 00 FF 
0e654     04 E4 85 F1 | 	sub	objptr, ##1540
0e658     F2 1E 02 F1 | 	add	local01, objptr
0e65c     0F 21 02 FB | 	rdlong	local02, local01
0e660     10 13 02 F6 | 	mov	arg01, local02
0e664     47 00 00 FF 
0e668     AC E4 85 F1 | 	sub	objptr, ##36524
0e66c     90 C2 B0 FD | 	call	#_pslpeek
0e670     FD 12 02 F6 | 	mov	arg01, result1
0e674                 | ' 
0e674                 | ' testptr=compiledline(lineptr_e).result.uresult
0e674                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0e674                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0e674     4A 00 00 FF 
0e678     B0 E4 05 F1 | 	add	objptr, ##38064
0e67c     F2 FA 01 FB | 	rdlong	result1, objptr
0e680     FD 1E 02 F6 | 	mov	local01, result1
0e684     01 1E 66 F0 | 	shl	local01, #1
0e688     FD 1E 02 F1 | 	add	local01, result1
0e68c     02 1E 66 F0 | 	shl	local01, #2
0e690     03 00 00 FF 
0e694     04 E4 85 F1 | 	sub	objptr, ##1540
0e698     F2 1E 02 F1 | 	add	local01, objptr
0e69c     04 1E 06 F1 | 	add	local01, #4
0e6a0     0F 1F 02 FB | 	rdlong	local01, local01
0e6a4     0F 13 0A F2 | 	cmp	arg01, local01 wz
0e6a8     47 00 00 FF 
0e6ac     AC E4 85 F1 | 	sub	objptr, ##36524
0e6b0     58 00 90 5D |  if_ne	jmp	#LR__1140
0e6b4     58 00 00 FF 
0e6b8     EC E4 05 F1 | 	add	objptr, ##45292
0e6bc     F2 20 62 FC | 	wrlong	local02, objptr
0e6c0     0E 00 00 FF 
0e6c4     40 E4 85 F1 | 	sub	objptr, ##7232
0e6c8     F2 20 02 FB | 	rdlong	local02, objptr
0e6cc     01 20 86 F1 | 	sub	local02, #1
0e6d0     04 E4 05 F1 | 	add	objptr, #4
0e6d4     F2 20 62 FC | 	wrlong	local02, objptr
0e6d8                 | '   runptr=testptr
0e6d8                 | '   lineptr_e=lineptr-1
0e6d8                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0e6d8     0E 00 00 FF 
0e6dc     60 E4 05 F1 | 	add	objptr, ##7264
0e6e0     F2 20 02 FB | 	rdlong	local02, objptr
0e6e4     58 00 00 FF 
0e6e8     10 E5 85 F1 | 	sub	objptr, ##45328
0e6ec     FF FF 3F FF 
0e6f0     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0e6f4     58 00 00 AF 
0e6f8     10 E5 05 A1 |  if_e	add	objptr, ##45328
0e6fc     F2 00 68 AC |  if_e	wrlong	#0, objptr
0e700     58 00 00 AF 
0e704     10 E5 85 A1 |  if_e	sub	objptr, ##45328
0e708     04 00 90 FD | 	jmp	#LR__1141
0e70c                 | LR__1140
0e70c     0C 00 B0 FD | 	call	#_do_find_goto
0e710                 | LR__1141
0e710     A7 F0 03 F6 | 	mov	ptra, fp
0e714     B2 00 A0 FD | 	call	#popregs_
0e718                 | _do_fast_goto_ret
0e718     2D 00 64 FD | 	ret
0e71c                 | 
0e71c                 | ' 
0e71c                 | ' 
0e71c                 | ' 
0e71c                 | ' 
0e71c                 | ' sub do_find_goto
0e71c                 | _do_find_goto
0e71c     03 4A 05 F6 | 	mov	COUNT_, #3
0e720     A8 00 A0 FD | 	call	#pushregs_
0e724     24 F0 07 F1 | 	add	ptra, #36
0e728                 | _do_find_goto_enter
0e728     4A 00 00 FF 
0e72c     B0 E4 05 F1 | 	add	objptr, ##38064
0e730     F2 1E 02 FB | 	rdlong	local01, objptr
0e734     0F 21 02 F6 | 	mov	local02, local01
0e738     01 20 66 F0 | 	shl	local02, #1
0e73c     0F 21 02 F1 | 	add	local02, local01
0e740     02 20 66 F0 | 	shl	local02, #2
0e744     03 00 00 FF 
0e748     04 E4 85 F1 | 	sub	objptr, ##1540
0e74c     F2 20 02 F1 | 	add	local02, objptr
0e750     04 20 06 F1 | 	add	local02, #4
0e754     10 21 02 FB | 	rdlong	local02, local02
0e758     A7 20 62 FC | 	wrlong	local02, fp
0e75c     03 00 00 FF 
0e760     08 E4 05 F1 | 	add	objptr, ##1544
0e764     F2 22 02 FB | 	rdlong	local03, objptr
0e768     4A 00 00 FF 
0e76c     B4 E4 85 F1 | 	sub	objptr, ##38068
0e770     04 4E 05 F1 | 	add	fp, #4
0e774     A7 22 62 FC | 	wrlong	local03, fp
0e778     04 4E 85 F1 | 	sub	fp, #4
0e77c                 | ' 
0e77c                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0e77c                 | '  ' print "find goto"                                                                     'print gotoline 
0e77c                 | ' gotoptr=programstart
0e77c                 | ' do
0e77c                 | LR__1150
0e77c     0C 4E 05 F1 | 	add	fp, #12
0e780     A7 12 02 F6 | 	mov	arg01, fp
0e784     08 4E 85 F1 | 	sub	fp, #8
0e788     A7 14 02 FB | 	rdlong	arg02, fp
0e78c     04 4E 85 F1 | 	sub	fp, #4
0e790     18 16 06 F6 | 	mov	arg03, #24
0e794     0B 00 00 FF 
0e798     CC E4 05 F1 | 	add	objptr, ##5836
0e79c     34 F7 B0 FD | 	call	#_psram_spin2_read1
0e7a0     0B 00 00 FF 
0e7a4     CC E4 85 F1 | 	sub	objptr, ##5836
0e7a8                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0e7a8                 | '   if gotoheader(0)<>$FFFFFFFF then
0e7a8     0C 4E 05 F1 | 	add	fp, #12
0e7ac     A7 22 02 FB | 	rdlong	local03, fp
0e7b0     0C 4E 85 F1 | 	sub	fp, #12
0e7b4     FF FF 7F FF 
0e7b8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0e7bc     24 00 90 AD |  if_e	jmp	#LR__1151
0e7c0     04 4E 05 F1 | 	add	fp, #4
0e7c4     A7 22 02 FB | 	rdlong	local03, fp
0e7c8     04 4E 05 F1 | 	add	fp, #4
0e7cc     A7 22 62 FC | 	wrlong	local03, fp
0e7d0     18 4E 05 F1 | 	add	fp, #24
0e7d4     A7 22 02 FB | 	rdlong	local03, fp
0e7d8     1C 4E 85 F1 | 	sub	fp, #28
0e7dc     A7 22 62 FC | 	wrlong	local03, fp
0e7e0     04 4E 85 F1 | 	sub	fp, #4
0e7e4                 | LR__1151
0e7e4     20 4E 05 F1 | 	add	fp, #32
0e7e8     A7 22 02 FB | 	rdlong	local03, fp
0e7ec     20 4E 85 F1 | 	sub	fp, #32
0e7f0     FF FF 3F FF 
0e7f4     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0e7f8     0C 4E 05 51 |  if_ne	add	fp, #12
0e7fc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0e800     0C 4E 85 51 |  if_ne	sub	fp, #12
0e804     FF FF 7F 5F 
0e808     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0e80c     18 00 90 AD |  if_e	jmp	#LR__1152
0e810     0C 4E 05 F1 | 	add	fp, #12
0e814     A7 22 02 FB | 	rdlong	local03, fp
0e818     0C 4E 85 F1 | 	sub	fp, #12
0e81c     A7 20 02 FB | 	rdlong	local02, fp
0e820     10 23 0A F2 | 	cmp	local03, local02 wz
0e824     54 FF 9F 5D |  if_ne	jmp	#LR__1150
0e828                 | LR__1152
0e828                 | ' 
0e828                 | ' if gotoheader(0)=gotoline then
0e828     0C 4E 05 F1 | 	add	fp, #12
0e82c     A7 22 02 FB | 	rdlong	local03, fp
0e830     0C 4E 85 F1 | 	sub	fp, #12
0e834     A7 1E 02 FB | 	rdlong	local01, fp
0e838     0F 23 0A F2 | 	cmp	local03, local01 wz
0e83c     D8 00 90 5D |  if_ne	jmp	#LR__1153
0e840     4A 00 00 FF 
0e844     B0 E4 05 F1 | 	add	objptr, ##38064
0e848     F2 1E 02 FB | 	rdlong	local01, objptr
0e84c     0F 21 02 F6 | 	mov	local02, local01
0e850     01 20 66 F0 | 	shl	local02, #1
0e854     0F 21 02 F1 | 	add	local02, local01
0e858     02 20 66 F0 | 	shl	local02, #2
0e85c     03 00 00 FF 
0e860     04 E4 85 F1 | 	sub	objptr, ##1540
0e864     F2 20 02 F1 | 	add	local02, objptr
0e868     08 4E 05 F1 | 	add	fp, #8
0e86c     A7 22 02 FB | 	rdlong	local03, fp
0e870     10 23 62 FC | 	wrlong	local03, local02
0e874     03 00 00 FF 
0e878     04 E4 05 F1 | 	add	objptr, ##1540
0e87c     F2 1E 02 FB | 	rdlong	local01, objptr
0e880     0F 21 02 F6 | 	mov	local02, local01
0e884     01 20 66 F0 | 	shl	local02, #1
0e888     0F 21 02 F1 | 	add	local02, local01
0e88c     02 20 66 F0 | 	shl	local02, #2
0e890     03 00 00 FF 
0e894     04 E4 85 F1 | 	sub	objptr, ##1540
0e898     F2 20 02 F1 | 	add	local02, objptr
0e89c     08 20 06 F1 | 	add	local02, #8
0e8a0     10 9D 68 FC | 	wrlong	#78, local02
0e8a4     03 00 00 FF 
0e8a8     04 E4 05 F1 | 	add	objptr, ##1540
0e8ac     F2 20 02 FB | 	rdlong	local02, objptr
0e8b0     10 13 02 F6 | 	mov	arg01, local02
0e8b4     01 12 66 F0 | 	shl	arg01, #1
0e8b8     10 13 02 F1 | 	add	arg01, local02
0e8bc     02 12 66 F0 | 	shl	arg01, #2
0e8c0     03 00 00 FF 
0e8c4     04 E4 85 F1 | 	sub	objptr, ##1540
0e8c8     F2 12 02 F1 | 	add	arg01, objptr
0e8cc     11 00 00 FF 
0e8d0     48 E4 05 F1 | 	add	objptr, ##8776
0e8d4     F2 14 02 FB | 	rdlong	arg02, objptr
0e8d8     02 22 06 F6 | 	mov	local03, #2
0e8dc     10 23 02 F1 | 	add	local03, local02
0e8e0     13 00 00 FF 
0e8e4     60 E4 85 F1 | 	sub	objptr, ##9824
0e8e8     F2 16 02 FB | 	rdlong	arg03, objptr
0e8ec     0B 23 02 FD | 	qmul	local03, arg03
0e8f0     08 4E 85 F1 | 	sub	fp, #8
0e8f4     39 00 00 FF 
0e8f8     C8 E5 85 F1 | 	sub	objptr, ##29640
0e8fc     18 22 62 FD | 	getqx	local03
0e900     11 15 02 F1 | 	add	arg02, local03
0e904     68 F6 B0 FD | 	call	#_psram_spin2_write
0e908     0B 00 00 FF 
0e90c     CC E4 85 F1 | 	sub	objptr, ##5836
0e910     18 FD BF FD | 	call	#_do_fast_goto
0e914     08 00 90 FD | 	jmp	#LR__1154
0e918                 | LR__1153
0e918     26 12 06 F6 | 	mov	arg01, #38
0e91c     4C BD B0 FD | 	call	#_printerror
0e920                 | LR__1154
0e920     A7 F0 03 F6 | 	mov	ptra, fp
0e924     B2 00 A0 FD | 	call	#popregs_
0e928                 | _do_find_goto_ret
0e928     2D 00 64 FD | 	ret
0e92c                 | 
0e92c                 | ' 
0e92c                 | ' sub do_slow_goto
0e92c                 | _do_slow_goto
0e92c     02 4A 05 F6 | 	mov	COUNT_, #2
0e930     A8 00 A0 FD | 	call	#pushregs_
0e934     30 F0 07 F1 | 	add	ptra, #48
0e938     3C BF BF FD | 	call	#_pop
0e93c     FF 1E 02 F6 | 	mov	local01, result3
0e940     24 4E 05 F1 | 	add	fp, #36
0e944     A7 FA 61 FC | 	wrlong	result1, fp
0e948     04 4E 05 F1 | 	add	fp, #4
0e94c     A7 FC 61 FC | 	wrlong	result2, fp
0e950     04 4E 05 F1 | 	add	fp, #4
0e954     A7 1E 62 FC | 	wrlong	local01, fp
0e958     08 4E 85 F1 | 	sub	fp, #8
0e95c     A7 12 02 F6 | 	mov	arg01, fp
0e960     24 4E 85 F1 | 	sub	fp, #36
0e964     50 4A B0 FD | 	call	#_converttoint
0e968     A7 FA 61 FC | 	wrlong	result1, fp
0e96c     4A 00 00 FF 
0e970     B4 E4 05 F1 | 	add	objptr, ##38068
0e974     F2 20 02 FB | 	rdlong	local02, objptr
0e978     4A 00 00 FF 
0e97c     B4 E4 85 F1 | 	sub	objptr, ##38068
0e980     04 4E 05 F1 | 	add	fp, #4
0e984     A7 20 62 FC | 	wrlong	local02, fp
0e988     04 4E 85 F1 | 	sub	fp, #4
0e98c                 | ' 
0e98c                 | ' t1=pop() : gotoline=converttoint(t1)
0e98c                 | ' gotoptr=programstart
0e98c                 | ' do
0e98c                 | LR__1160
0e98c     0C 4E 05 F1 | 	add	fp, #12
0e990     A7 12 02 F6 | 	mov	arg01, fp
0e994     08 4E 85 F1 | 	sub	fp, #8
0e998     A7 14 02 FB | 	rdlong	arg02, fp
0e99c     04 4E 85 F1 | 	sub	fp, #4
0e9a0     18 16 06 F6 | 	mov	arg03, #24
0e9a4     0B 00 00 FF 
0e9a8     CC E4 05 F1 | 	add	objptr, ##5836
0e9ac     24 F5 B0 FD | 	call	#_psram_spin2_read1
0e9b0     0B 00 00 FF 
0e9b4     CC E4 85 F1 | 	sub	objptr, ##5836
0e9b8                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0e9b8                 | '   if gotoheader(0)<>$FFFFFFFF then
0e9b8     0C 4E 05 F1 | 	add	fp, #12
0e9bc     A7 20 02 FB | 	rdlong	local02, fp
0e9c0     0C 4E 85 F1 | 	sub	fp, #12
0e9c4     FF FF 7F FF 
0e9c8     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0e9cc     24 00 90 AD |  if_e	jmp	#LR__1161
0e9d0     04 4E 05 F1 | 	add	fp, #4
0e9d4     A7 20 02 FB | 	rdlong	local02, fp
0e9d8     04 4E 05 F1 | 	add	fp, #4
0e9dc     A7 20 62 FC | 	wrlong	local02, fp
0e9e0     18 4E 05 F1 | 	add	fp, #24
0e9e4     A7 20 02 FB | 	rdlong	local02, fp
0e9e8     1C 4E 85 F1 | 	sub	fp, #28
0e9ec     A7 20 62 FC | 	wrlong	local02, fp
0e9f0     04 4E 85 F1 | 	sub	fp, #4
0e9f4                 | LR__1161
0e9f4     20 4E 05 F1 | 	add	fp, #32
0e9f8     A7 20 02 FB | 	rdlong	local02, fp
0e9fc     20 4E 85 F1 | 	sub	fp, #32
0ea00     FF FF 3F FF 
0ea04     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0ea08     0C 4E 05 51 |  if_ne	add	fp, #12
0ea0c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0ea10     0C 4E 85 51 |  if_ne	sub	fp, #12
0ea14     FF FF 7F 5F 
0ea18     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0ea1c     18 00 90 AD |  if_e	jmp	#LR__1162
0ea20     0C 4E 05 F1 | 	add	fp, #12
0ea24     A7 20 02 FB | 	rdlong	local02, fp
0ea28     0C 4E 85 F1 | 	sub	fp, #12
0ea2c     A7 16 02 FB | 	rdlong	arg03, fp
0ea30     0B 21 0A F2 | 	cmp	local02, arg03 wz
0ea34     54 FF 9F 5D |  if_ne	jmp	#LR__1160
0ea38                 | LR__1162
0ea38                 | ' if gotoheader(0)=gotoline then  
0ea38     0C 4E 05 F1 | 	add	fp, #12
0ea3c     A7 20 02 FB | 	rdlong	local02, fp
0ea40     0C 4E 85 F1 | 	sub	fp, #12
0ea44     A7 1E 02 FB | 	rdlong	local01, fp
0ea48     0F 21 0A F2 | 	cmp	local02, local01 wz
0ea4c     60 00 90 5D |  if_ne	jmp	#LR__1163
0ea50     08 4E 05 F1 | 	add	fp, #8
0ea54     A7 20 02 FB | 	rdlong	local02, fp
0ea58     08 4E 85 F1 | 	sub	fp, #8
0ea5c     58 00 00 FF 
0ea60     EC E4 05 F1 | 	add	objptr, ##45292
0ea64     F2 20 62 FC | 	wrlong	local02, objptr
0ea68     0E 00 00 FF 
0ea6c     40 E4 85 F1 | 	sub	objptr, ##7232
0ea70     F2 20 02 FB | 	rdlong	local02, objptr
0ea74     01 20 86 F1 | 	sub	local02, #1
0ea78     04 E4 05 F1 | 	add	objptr, #4
0ea7c     F2 20 62 FC | 	wrlong	local02, objptr
0ea80                 | '    runptr=oldgotoptr
0ea80                 | '    lineptr_e=lineptr-1
0ea80                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
0ea80     0E 00 00 FF 
0ea84     60 E4 05 F1 | 	add	objptr, ##7264
0ea88     F2 20 02 FB | 	rdlong	local02, objptr
0ea8c     58 00 00 FF 
0ea90     10 E5 85 F1 | 	sub	objptr, ##45328
0ea94     FF FF 3F FF 
0ea98     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0ea9c     58 00 00 AF 
0eaa0     10 E5 05 A1 |  if_e	add	objptr, ##45328
0eaa4     F2 00 68 AC |  if_e	wrlong	#0, objptr
0eaa8     58 00 00 AF 
0eaac     10 E5 85 A1 |  if_e	sub	objptr, ##45328
0eab0                 | LR__1163
0eab0     A7 F0 03 F6 | 	mov	ptra, fp
0eab4     B2 00 A0 FD | 	call	#popregs_
0eab8                 | _do_slow_goto_ret
0eab8     2D 00 64 FD | 	ret
0eabc                 | 
0eabc                 | ' 
0eabc                 | ' '----------------------- Error processing
0eabc                 | ' 
0eabc                 | ' sub do_error
0eabc                 | _do_error
0eabc     01 4A 05 F6 | 	mov	COUNT_, #1
0eac0     A8 00 A0 FD | 	call	#pushregs_
0eac4     4A 00 00 FF 
0eac8     B0 E4 05 F1 | 	add	objptr, ##38064
0eacc     F2 18 02 FB | 	rdlong	arg04, objptr
0ead0     0C 17 02 F6 | 	mov	arg03, arg04
0ead4     01 16 66 F0 | 	shl	arg03, #1
0ead8     0C 17 02 F1 | 	add	arg03, arg04
0eadc     02 16 66 F0 | 	shl	arg03, #2
0eae0     03 00 00 FF 
0eae4     04 E4 85 F1 | 	sub	objptr, ##1540
0eae8     F2 16 02 F1 | 	add	arg03, objptr
0eaec     0B 1F 02 FB | 	rdlong	local01, arg03
0eaf0                 | ' r=compiledline(lineptr_e).result.uresult
0eaf0                 | ' print "Error ";r;": ";errors$(r)
0eaf0     00 12 06 F6 | 	mov	arg01, #0
0eaf4     47 00 00 FF 
0eaf8     AC E4 85 F1 | 	sub	objptr, ##36524
0eafc     74 59 B1 FD | 	call	#__system___getiolock_0484
0eb00     FD 12 02 F6 | 	mov	arg01, result1
0eb04     0C 00 B1 FD | 	call	#__system___lockmem
0eb08     73 01 00 FF 
0eb0c     2C 15 06 F6 | 	mov	arg02, ##@LR__5147
0eb10     00 12 06 F6 | 	mov	arg01, #0
0eb14     00 16 06 F6 | 	mov	arg03, #0
0eb18     EC 0C B1 FD | 	call	#__system___basic_print_string
0eb1c     00 12 06 F6 | 	mov	arg01, #0
0eb20     0F 15 02 F6 | 	mov	arg02, local01
0eb24     00 16 06 F6 | 	mov	arg03, #0
0eb28     0A 18 06 F6 | 	mov	arg04, #10
0eb2c     5C 0D B1 FD | 	call	#__system___basic_print_unsigned
0eb30     73 01 00 FF 
0eb34     33 15 06 F6 | 	mov	arg02, ##@LR__5148
0eb38     00 12 06 F6 | 	mov	arg01, #0
0eb3c     00 16 06 F6 | 	mov	arg03, #0
0eb40     C4 0C B1 FD | 	call	#__system___basic_print_string
0eb44     02 1E 66 F0 | 	shl	local01, #2
0eb48     45 00 00 FF 
0eb4c     AC E4 05 F1 | 	add	objptr, ##35500
0eb50     F2 1E 02 F1 | 	add	local01, objptr
0eb54     0F 15 02 FB | 	rdlong	arg02, local01
0eb58     00 12 06 F6 | 	mov	arg01, #0
0eb5c     00 16 06 F6 | 	mov	arg03, #0
0eb60     45 00 00 FF 
0eb64     AC E4 85 F1 | 	sub	objptr, ##35500
0eb68     9C 0C B1 FD | 	call	#__system___basic_print_string
0eb6c     00 12 06 F6 | 	mov	arg01, #0
0eb70     0A 14 06 F6 | 	mov	arg02, #10
0eb74     00 16 06 F6 | 	mov	arg03, #0
0eb78     34 0C B1 FD | 	call	#__system___basic_print_char
0eb7c     00 12 06 F6 | 	mov	arg01, #0
0eb80     F0 58 B1 FD | 	call	#__system___getiolock_0484
0eb84     FD 00 68 FC | 	wrlong	#0, result1
0eb88     A7 F0 03 F6 | 	mov	ptra, fp
0eb8c     B2 00 A0 FD | 	call	#popregs_
0eb90                 | _do_error_ret
0eb90     2D 00 64 FD | 	ret
0eb94                 | 
0eb94                 | ' 
0eb94                 | ' 
0eb94                 | ' '------------------ Assigning to a variable  
0eb94                 | ' 
0eb94                 | ' function  convertstring(psaddr as ulong) as string
0eb94                 | _convertstring
0eb94     04 4A 05 F6 | 	mov	COUNT_, #4
0eb98     A8 00 A0 FD | 	call	#pushregs_
0eb9c     09 1F 02 F6 | 	mov	local01, arg01
0eba0     5C BD B0 FD | 	call	#_pslpeek
0eba4     FD 20 02 F6 | 	mov	local02, result1
0eba8     73 01 00 FF 
0ebac     36 23 06 F6 | 	mov	local03, ##@LR__5149
0ebb0                 | ' 'print "in convertstring: psaddr=";psaddr
0ebb0                 | ' l=pslpeek(psaddr)
0ebb0                 | ' 'print "in convertstring: len=";l
0ebb0                 | ' s="" 
0ebb0                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0ebb0     01 24 06 F6 | 	mov	local04, #1
0ebb4     01 20 06 F1 | 	add	local02, #1
0ebb8                 | LR__1170
0ebb8     10 25 52 F2 | 	cmps	local04, local02 wc
0ebbc     30 00 90 3D |  if_ae	jmp	#LR__1171
0ebc0     0F 13 02 F6 | 	mov	arg01, local01
0ebc4     03 12 06 F1 | 	add	arg01, #3
0ebc8     12 13 02 F1 | 	add	arg01, local04
0ebcc     D8 BC B0 FD | 	call	#_pspeek
0ebd0     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0ebd4     10 21 B1 FD | 	call	#__system__Chr_S
0ebd8     FD 14 02 F6 | 	mov	arg02, result1
0ebdc     11 13 02 F6 | 	mov	arg01, local03
0ebe0     8C FF B0 FD | 	call	#__system___string_concat
0ebe4     FD 22 02 F6 | 	mov	local03, result1
0ebe8     01 24 06 F1 | 	add	local04, #1
0ebec     C8 FF 9F FD | 	jmp	#LR__1170
0ebf0                 | LR__1171
0ebf0                 | ' 'print "in convertstring: str=";s
0ebf0                 | ' return s
0ebf0     11 FB 01 F6 | 	mov	result1, local03
0ebf4     A7 F0 03 F6 | 	mov	ptra, fp
0ebf8     B2 00 A0 FD | 	call	#popregs_
0ebfc                 | _convertstring_ret
0ebfc     2D 00 64 FD | 	ret
0ec00                 | 
0ec00                 | ' 
0ec00                 | ' sub do_assign
0ec00                 | _do_assign
0ec00     05 4A 05 F6 | 	mov	COUNT_, #5
0ec04     A8 00 A0 FD | 	call	#pushregs_
0ec08     44 F0 07 F1 | 	add	ptra, #68
0ec0c     4A 00 00 FF 
0ec10     B0 E4 05 F1 | 	add	objptr, ##38064
0ec14     F2 16 02 FB | 	rdlong	arg03, objptr
0ec18     0B 15 02 F6 | 	mov	arg02, arg03
0ec1c     01 14 66 F0 | 	shl	arg02, #1
0ec20     0B 15 02 F1 | 	add	arg02, arg03
0ec24     02 14 66 F0 | 	shl	arg02, #2
0ec28     03 00 00 FF 
0ec2c     04 E4 85 F1 | 	sub	objptr, ##1540
0ec30     F2 14 02 F1 | 	add	arg02, objptr
0ec34     0A 15 02 FB | 	rdlong	arg02, arg02
0ec38     18 4E 05 F1 | 	add	fp, #24
0ec3c     A7 14 62 FC | 	wrlong	arg02, fp
0ec40                 | ' 
0ec40                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0ec40                 | ' 
0ec40                 | ' if variables(varnum).vartype<array_no_type then 
0ec40     18 4E 85 F1 | 	sub	fp, #24
0ec44     04 14 66 F0 | 	shl	arg02, #4
0ec48     32 00 00 FF 
0ec4c     84 E4 85 F1 | 	sub	objptr, ##25732
0ec50     F2 14 02 F1 | 	add	arg02, objptr
0ec54     0C 14 06 F1 | 	add	arg02, #12
0ec58     0A 17 02 FB | 	rdlong	arg03, arg02
0ec5c     00 17 16 F2 | 	cmp	arg03, #256 wc
0ec60     15 00 00 FF 
0ec64     28 E4 85 F1 | 	sub	objptr, ##10792
0ec68     18 01 90 3D |  if_ae	jmp	#LR__1180
0ec6c     08 BC BF FD | 	call	#_pop
0ec70     A7 FA 61 FC | 	wrlong	result1, fp
0ec74     04 4E 05 F1 | 	add	fp, #4
0ec78     A7 FC 61 FC | 	wrlong	result2, fp
0ec7c     04 4E 05 F1 | 	add	fp, #4
0ec80     A7 FE 61 FC | 	wrlong	result3, fp
0ec84     08 4E 85 F1 | 	sub	fp, #8
0ec88     A7 16 02 FB | 	rdlong	arg03, fp
0ec8c     04 4E 05 F1 | 	add	fp, #4
0ec90     A7 14 02 FB | 	rdlong	arg02, fp
0ec94     14 4E 05 F1 | 	add	fp, #20
0ec98     A7 12 02 FB | 	rdlong	arg01, fp
0ec9c     04 12 66 F0 | 	shl	arg01, #4
0eca0     15 00 00 FF 
0eca4     28 E4 05 F1 | 	add	objptr, ##10792
0eca8     F2 12 02 F1 | 	add	arg01, objptr
0ecac     04 12 06 F1 | 	add	arg01, #4
0ecb0     09 17 62 FC | 	wrlong	arg03, arg01
0ecb4     A7 16 02 FB | 	rdlong	arg03, fp
0ecb8     04 16 66 F0 | 	shl	arg03, #4
0ecbc     F2 16 02 F1 | 	add	arg03, objptr
0ecc0     08 16 06 F1 | 	add	arg03, #8
0ecc4     0B 15 62 FC | 	wrlong	arg02, arg03
0ecc8     A7 16 02 FB | 	rdlong	arg03, fp
0eccc     04 16 66 F0 | 	shl	arg03, #4
0ecd0     F2 16 02 F1 | 	add	arg03, objptr
0ecd4     10 4E 85 F1 | 	sub	fp, #16
0ecd8     A7 14 02 FB | 	rdlong	arg02, fp
0ecdc     0C 16 06 F1 | 	add	arg03, #12
0ece0     0B 15 62 FC | 	wrlong	arg02, arg03
0ece4                 | '   t1=pop() 
0ece4                 | ' 'print "In do_assign value to assign=";t1.result.uresult, "type to assign=";t1.result_type  
0ece4                 | '    variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0ece4                 | '   if variables(varnum).vartype<>result_string2 then return
0ece4     10 4E 05 F1 | 	add	fp, #16
0ece8     A7 16 02 FB | 	rdlong	arg03, fp
0ecec     18 4E 85 F1 | 	sub	fp, #24
0ecf0     04 16 66 F0 | 	shl	arg03, #4
0ecf4     F2 16 02 F1 | 	add	arg03, objptr
0ecf8     0C 16 06 F1 | 	add	arg03, #12
0ecfc     0B 17 02 FB | 	rdlong	arg03, arg03
0ed00     2B 16 0E F2 | 	cmp	arg03, #43 wz
0ed04     15 00 00 FF 
0ed08     28 E4 85 F1 | 	sub	objptr, ##10792
0ed0c     E4 04 90 5D |  if_ne	jmp	#LR__1203
0ed10     18 4E 05 F1 | 	add	fp, #24
0ed14     A7 16 02 FB | 	rdlong	arg03, fp
0ed18     0B 1F 02 F6 | 	mov	local01, arg03
0ed1c     04 1E 66 F0 | 	shl	local01, #4
0ed20     15 00 00 FF 
0ed24     28 E4 05 F1 | 	add	objptr, ##10792
0ed28     F2 1E 02 F1 | 	add	local01, objptr
0ed2c     18 4E 85 F1 | 	sub	fp, #24
0ed30     04 16 66 F0 | 	shl	arg03, #4
0ed34     F2 16 02 F1 | 	add	arg03, objptr
0ed38     04 16 06 F1 | 	add	arg03, #4
0ed3c     0B 13 02 FB | 	rdlong	arg01, arg03
0ed40     15 00 00 FF 
0ed44     28 E4 85 F1 | 	sub	objptr, ##10792
0ed48     48 FE BF FD | 	call	#_convertstring
0ed4c     04 1E 06 F1 | 	add	local01, #4
0ed50     0F FB 61 FC | 	wrlong	result1, local01
0ed54     18 4E 05 F1 | 	add	fp, #24
0ed58     A7 1E 02 FB | 	rdlong	local01, fp
0ed5c     18 4E 85 F1 | 	sub	fp, #24
0ed60     04 1E 66 F0 | 	shl	local01, #4
0ed64     15 00 00 FF 
0ed68     28 E4 05 F1 | 	add	objptr, ##10792
0ed6c     F2 1E 02 F1 | 	add	local01, objptr
0ed70     0C 1E 06 F1 | 	add	local01, #12
0ed74     0F 3F 68 FC | 	wrlong	#31, local01
0ed78                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0ed78                 | '   variables(varnum).vartype=result_string
0ed78                 | '   return
0ed78     15 00 00 FF 
0ed7c     28 E4 85 F1 | 	sub	objptr, ##10792
0ed80     70 04 90 FD | 	jmp	#LR__1203
0ed84                 | LR__1180
0ed84                 | ' for i=0 to 2 : arrid(i)=0 : next i
0ed84     1C 4E 05 F1 | 	add	fp, #28
0ed88     A7 00 68 FC | 	wrlong	#0, fp
0ed8c     97 16 48 FB | 	callpa	#(@LR__1182-@LR__1181)>>2,fcache_load_ptr_
0ed90                 | LR__1181
0ed90     A7 1E 02 FB | 	rdlong	local01, fp
0ed94     02 1E 66 F0 | 	shl	local01, #2
0ed98     18 4E 05 F1 | 	add	fp, #24
0ed9c     A7 1E 02 F1 | 	add	local01, fp
0eda0     0F 01 68 FC | 	wrlong	#0, local01
0eda4     18 4E 85 F1 | 	sub	fp, #24
0eda8     A7 1E 02 FB | 	rdlong	local01, fp
0edac     01 1E 06 F1 | 	add	local01, #1
0edb0     A7 1E 62 FC | 	wrlong	local01, fp
0edb4     03 1E 16 F2 | 	cmp	local01, #3 wc
0edb8     D4 FF 9F CD |  if_b	jmp	#LR__1181
0edbc                 | LR__1182
0edbc     4A 00 00 FF 
0edc0     B0 E4 05 F1 | 	add	objptr, ##38064
0edc4     F2 16 02 FB | 	rdlong	arg03, objptr
0edc8     0B 1F 02 F6 | 	mov	local01, arg03
0edcc     01 1E 66 F0 | 	shl	local01, #1
0edd0     0B 1F 02 F1 | 	add	local01, arg03
0edd4     02 1E 66 F0 | 	shl	local01, #2
0edd8     03 00 00 FF 
0eddc     04 E4 85 F1 | 	sub	objptr, ##1540
0ede0     F2 1E 02 F1 | 	add	local01, objptr
0ede4     04 1E 06 F1 | 	add	local01, #4
0ede8     0F 21 02 FB | 	rdlong	local02, local01
0edec     04 4E 05 F1 | 	add	fp, #4
0edf0     A7 20 62 FC | 	wrlong	local02, fp
0edf4     20 4E 85 F1 | 	sub	fp, #32
0edf8     47 00 00 FF 
0edfc     AC E4 85 F1 | 	sub	objptr, ##36524
0ee00     74 BA BF FD | 	call	#_pop
0ee04     A7 FA 61 FC | 	wrlong	result1, fp
0ee08     04 4E 05 F1 | 	add	fp, #4
0ee0c     A7 FC 61 FC | 	wrlong	result2, fp
0ee10     04 4E 05 F1 | 	add	fp, #4
0ee14     A7 FE 61 FC | 	wrlong	result3, fp
0ee18                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0ee18                 | ' t1=pop() ' var value
0ee18                 | ' if numpar>0 then
0ee18     18 4E 05 F1 | 	add	fp, #24
0ee1c     A7 22 02 FB | 	rdlong	local03, fp
0ee20     20 4E 85 F1 | 	sub	fp, #32
0ee24     01 22 16 F2 | 	cmp	local03, #1 wc
0ee28     78 00 90 CD |  if_b	jmp	#LR__1185
0ee2c                 | '   for i=numpar to 1 step -1
0ee2c     20 4E 05 F1 | 	add	fp, #32
0ee30     A7 24 0A FB | 	rdlong	local04, fp wz
0ee34     04 4E 85 F1 | 	sub	fp, #4
0ee38     A7 24 62 FC | 	wrlong	local04, fp
0ee3c     1C 4E 85 F1 | 	sub	fp, #28
0ee40     60 00 90 AD |  if_e	jmp	#LR__1184
0ee44                 | LR__1183
0ee44     30 BA BF FD | 	call	#_pop
0ee48     0C 4E 05 F1 | 	add	fp, #12
0ee4c     A7 FA 61 FC | 	wrlong	result1, fp
0ee50     04 4E 05 F1 | 	add	fp, #4
0ee54     A7 FC 61 FC | 	wrlong	result2, fp
0ee58     04 4E 05 F1 | 	add	fp, #4
0ee5c     A7 FE 61 FC | 	wrlong	result3, fp
0ee60     08 4E 05 F1 | 	add	fp, #8
0ee64     A7 22 02 FB | 	rdlong	local03, fp
0ee68     01 22 86 F1 | 	sub	local03, #1
0ee6c     02 22 66 F0 | 	shl	local03, #2
0ee70     18 4E 05 F1 | 	add	fp, #24
0ee74     A7 22 02 F1 | 	add	local03, fp
0ee78     28 4E 85 F1 | 	sub	fp, #40
0ee7c     A7 12 02 F6 | 	mov	arg01, fp
0ee80     0C 4E 85 F1 | 	sub	fp, #12
0ee84     30 45 B0 FD | 	call	#_converttoint
0ee88     11 FB 61 FC | 	wrlong	result1, local03
0ee8c     1C 4E 05 F1 | 	add	fp, #28
0ee90     A7 24 02 FB | 	rdlong	local04, fp
0ee94     01 24 8E F1 | 	sub	local04, #1 wz
0ee98     A7 24 62 FC | 	wrlong	local04, fp
0ee9c     1C 4E 85 F1 | 	sub	fp, #28
0eea0     A0 FF 9F 5D |  if_ne	jmp	#LR__1183
0eea4                 | LR__1184
0eea4                 | LR__1185
0eea4     18 4E 05 F1 | 	add	fp, #24
0eea8     A7 1E 02 FB | 	rdlong	local01, fp
0eeac     04 1E 66 F0 | 	shl	local01, #4
0eeb0     15 00 00 FF 
0eeb4     28 E4 05 F1 | 	add	objptr, ##10792
0eeb8     F2 1E 02 F1 | 	add	local01, objptr
0eebc     04 1E 06 F1 | 	add	local01, #4
0eec0     0F 13 02 FB | 	rdlong	arg01, local01
0eec4     0C 4E 05 F1 | 	add	fp, #12
0eec8     A7 12 62 FC | 	wrlong	arg01, fp
0eecc     24 4E 85 F1 | 	sub	fp, #36
0eed0     15 00 00 FF 
0eed4     28 E4 85 F1 | 	sub	objptr, ##10792
0eed8     24 BA B0 FD | 	call	#_pslpeek
0eedc     FD 24 32 F9 | 	getword	local04, result1, #0
0eee0     28 4E 05 F1 | 	add	fp, #40
0eee4     A7 24 62 FC | 	wrlong	local04, fp
0eee8     04 4E 85 F1 | 	sub	fp, #4
0eeec     A7 12 02 FB | 	rdlong	arg01, fp
0eef0     24 4E 85 F1 | 	sub	fp, #36
0eef4     02 12 06 F1 | 	add	arg01, #2
0eef8     AC B9 B0 FD | 	call	#_pspeek
0eefc     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ef00     2C 4E 05 F1 | 	add	fp, #44
0ef04     A7 FA 61 FC | 	wrlong	result1, fp
0ef08                 | ' esize=pspeek(arrptr+2)
0ef08                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
0ef08     08 4E 85 F1 | 	sub	fp, #8
0ef0c     A7 12 02 FB | 	rdlong	arg01, fp
0ef10     24 4E 85 F1 | 	sub	fp, #36
0ef14     04 12 06 F1 | 	add	arg01, #4
0ef18     E4 B9 B0 FD | 	call	#_pslpeek
0ef1c     FD 24 02 F6 | 	mov	local04, result1
0ef20     34 4E 05 F1 | 	add	fp, #52
0ef24     A7 1E 02 FB | 	rdlong	local01, fp
0ef28     34 4E 85 F1 | 	sub	fp, #52
0ef2c     12 1F 12 F2 | 	cmp	local01, local04 wc
0ef30     54 00 90 3D |  if_ae	jmp	#LR__1186
0ef34     24 4E 05 F1 | 	add	fp, #36
0ef38     A7 12 02 FB | 	rdlong	arg01, fp
0ef3c     24 4E 85 F1 | 	sub	fp, #36
0ef40     08 12 06 F1 | 	add	arg01, #8
0ef44     B8 B9 B0 FD | 	call	#_pslpeek
0ef48     FD 1E 02 F6 | 	mov	local01, result1
0ef4c     38 4E 05 F1 | 	add	fp, #56
0ef50     A7 24 02 FB | 	rdlong	local04, fp
0ef54     38 4E 85 F1 | 	sub	fp, #56
0ef58     0F 25 12 F2 | 	cmp	local04, local01 wc
0ef5c     28 00 90 3D |  if_ae	jmp	#LR__1186
0ef60     24 4E 05 F1 | 	add	fp, #36
0ef64     A7 12 02 FB | 	rdlong	arg01, fp
0ef68     24 4E 85 F1 | 	sub	fp, #36
0ef6c     0C 12 06 F1 | 	add	arg01, #12
0ef70     8C B9 B0 FD | 	call	#_pslpeek
0ef74     3C 4E 05 F1 | 	add	fp, #60
0ef78     A7 24 02 FB | 	rdlong	local04, fp
0ef7c     3C 4E 85 F1 | 	sub	fp, #60
0ef80     FD 24 12 F2 | 	cmp	local04, result1 wc
0ef84     0C 00 90 CD |  if_b	jmp	#LR__1187
0ef88                 | LR__1186
0ef88     31 12 06 F6 | 	mov	arg01, #49
0ef8c     DC B6 B0 FD | 	call	#_printerror
0ef90     60 02 90 FD | 	jmp	#LR__1203
0ef94                 | LR__1187
0ef94     24 4E 05 F1 | 	add	fp, #36
0ef98     A7 12 02 FB | 	rdlong	arg01, fp
0ef9c     09 25 02 F6 | 	mov	local04, arg01
0efa0     10 24 06 F1 | 	add	local04, #16
0efa4     24 4E 85 F1 | 	sub	fp, #36
0efa8     04 12 06 F1 | 	add	arg01, #4
0efac     50 B9 B0 FD | 	call	#_pslpeek
0efb0     FD 1E 02 F6 | 	mov	local01, result1
0efb4     38 4E 05 F1 | 	add	fp, #56
0efb8     A7 20 02 FB | 	rdlong	local02, fp
0efbc     10 1F 02 FD | 	qmul	local01, local02
0efc0     04 4E 85 F1 | 	sub	fp, #4
0efc4     A7 22 02 FB | 	rdlong	local03, fp
0efc8     10 4E 85 F1 | 	sub	fp, #16
0efcc     A7 12 02 FB | 	rdlong	arg01, fp
0efd0     24 4E 85 F1 | 	sub	fp, #36
0efd4     08 12 06 F1 | 	add	arg01, #8
0efd8     18 20 62 FD | 	getqx	local02
0efdc     10 23 02 F1 | 	add	local03, local02
0efe0     1C B9 B0 FD | 	call	#_pslpeek
0efe4     FD 20 02 F6 | 	mov	local02, result1
0efe8     24 4E 05 F1 | 	add	fp, #36
0efec     A7 12 02 FB | 	rdlong	arg01, fp
0eff0     24 4E 85 F1 | 	sub	fp, #36
0eff4     04 12 06 F1 | 	add	arg01, #4
0eff8     04 B9 B0 FD | 	call	#_pslpeek
0effc     FD 20 02 FD | 	qmul	local02, result1
0f000     3C 4E 05 F1 | 	add	fp, #60
0f004     A7 20 02 FB | 	rdlong	local02, fp
0f008     18 1E 62 FD | 	getqx	local01
0f00c     10 1F 02 FD | 	qmul	local01, local02
0f010     10 4E 85 F1 | 	sub	fp, #16
0f014     A7 20 02 FB | 	rdlong	local02, fp
0f018     18 1E 62 FD | 	getqx	local01
0f01c     0F 23 02 F1 | 	add	local03, local01
0f020     11 21 02 FD | 	qmul	local02, local03
0f024     04 4E 05 F1 | 	add	fp, #4
0f028                 | ' 
0f028                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0f028                 | ' select case arrtype
0f028     18 22 62 FD | 	getqx	local03
0f02c     11 25 02 F1 | 	add	local04, local03
0f030     A7 24 62 FC | 	wrlong	local04, fp
0f034     08 4E 85 F1 | 	sub	fp, #8
0f038     A7 26 02 FB | 	rdlong	local05, fp
0f03c     28 4E 85 F1 | 	sub	fp, #40
0f040     00 27 86 F1 | 	sub	local05, #256
0f044     0C 26 26 F3 | 	fle	local05, #12
0f048     30 26 62 FD | 	jmprel	local05
0f04c                 | LR__1188
0f04c     30 00 90 FD | 	jmp	#LR__1189
0f050     58 00 90 FD | 	jmp	#LR__1190
0f054     6C 00 90 FD | 	jmp	#LR__1191
0f058     80 00 90 FD | 	jmp	#LR__1192
0f05c     B0 00 90 FD | 	jmp	#LR__1193
0f060     E0 00 90 FD | 	jmp	#LR__1194
0f064     F4 00 90 FD | 	jmp	#LR__1195
0f068     08 01 90 FD | 	jmp	#LR__1196
0f06c     1C 01 90 FD | 	jmp	#LR__1197
0f070     30 01 90 FD | 	jmp	#LR__1198
0f074     44 01 90 FD | 	jmp	#LR__1199
0f078     58 01 90 FD | 	jmp	#LR__1200
0f07c     6C 01 90 FD | 	jmp	#LR__1201
0f080                 | LR__1189
0f080     A7 12 02 F6 | 	mov	arg01, fp
0f084     30 4E 05 F1 | 	add	fp, #48
0f088     A7 14 02 FB | 	rdlong	arg02, fp
0f08c     30 4E 85 F1 | 	sub	fp, #48
0f090     0C 16 06 F6 | 	mov	arg03, #12
0f094     0B 00 00 FF 
0f098     CC E4 05 F1 | 	add	objptr, ##5836
0f09c     D0 EE B0 FD | 	call	#_psram_spin2_write
0f0a0     0B 00 00 FF 
0f0a4     CC E4 85 F1 | 	sub	objptr, ##5836
0f0a8     48 01 90 FD | 	jmp	#LR__1202
0f0ac                 | LR__1190
0f0ac     30 4E 05 F1 | 	add	fp, #48
0f0b0     A7 12 02 FB | 	rdlong	arg01, fp
0f0b4     30 4E 85 F1 | 	sub	fp, #48
0f0b8     A7 14 02 FB | 	rdlong	arg02, fp
0f0bc     A0 B7 B0 FD | 	call	#_pspoke
0f0c0     30 01 90 FD | 	jmp	#LR__1202
0f0c4                 | LR__1191
0f0c4     30 4E 05 F1 | 	add	fp, #48
0f0c8     A7 12 02 FB | 	rdlong	arg01, fp
0f0cc     30 4E 85 F1 | 	sub	fp, #48
0f0d0     A7 14 02 FB | 	rdlong	arg02, fp
0f0d4     88 B7 B0 FD | 	call	#_pspoke
0f0d8     18 01 90 FD | 	jmp	#LR__1202
0f0dc                 | LR__1192
0f0dc     30 4E 05 F1 | 	add	fp, #48
0f0e0     A7 12 02 FB | 	rdlong	arg01, fp
0f0e4     30 4E 85 F1 | 	sub	fp, #48
0f0e8     A7 14 02 FB | 	rdlong	arg02, fp
0f0ec     70 B7 B0 FD | 	call	#_pspoke
0f0f0     30 4E 05 F1 | 	add	fp, #48
0f0f4     A7 12 02 FB | 	rdlong	arg01, fp
0f0f8     30 4E 85 F1 | 	sub	fp, #48
0f0fc     01 12 06 F1 | 	add	arg01, #1
0f100     A7 14 02 FB | 	rdlong	arg02, fp
0f104     08 14 46 F0 | 	shr	arg02, #8
0f108     54 B7 B0 FD | 	call	#_pspoke
0f10c     E4 00 90 FD | 	jmp	#LR__1202
0f110                 | LR__1193
0f110     30 4E 05 F1 | 	add	fp, #48
0f114     A7 12 02 FB | 	rdlong	arg01, fp
0f118     30 4E 85 F1 | 	sub	fp, #48
0f11c     A7 14 02 FB | 	rdlong	arg02, fp
0f120     3C B7 B0 FD | 	call	#_pspoke
0f124     30 4E 05 F1 | 	add	fp, #48
0f128     A7 12 02 FB | 	rdlong	arg01, fp
0f12c     30 4E 85 F1 | 	sub	fp, #48
0f130     01 12 06 F1 | 	add	arg01, #1
0f134     A7 14 02 FB | 	rdlong	arg02, fp
0f138     08 14 46 F0 | 	shr	arg02, #8
0f13c     20 B7 B0 FD | 	call	#_pspoke
0f140     B0 00 90 FD | 	jmp	#LR__1202
0f144                 | LR__1194
0f144     30 4E 05 F1 | 	add	fp, #48
0f148     A7 12 02 FB | 	rdlong	arg01, fp
0f14c     30 4E 85 F1 | 	sub	fp, #48
0f150     A7 14 02 FB | 	rdlong	arg02, fp
0f154     78 B6 B0 FD | 	call	#_pslpoke
0f158     98 00 90 FD | 	jmp	#LR__1202
0f15c                 | LR__1195
0f15c     30 4E 05 F1 | 	add	fp, #48
0f160     A7 12 02 FB | 	rdlong	arg01, fp
0f164     30 4E 85 F1 | 	sub	fp, #48
0f168     A7 14 02 FB | 	rdlong	arg02, fp
0f16c     60 B6 B0 FD | 	call	#_pslpoke
0f170     80 00 90 FD | 	jmp	#LR__1202
0f174                 | LR__1196
0f174     30 4E 05 F1 | 	add	fp, #48
0f178     A7 12 02 FB | 	rdlong	arg01, fp
0f17c     30 4E 85 F1 | 	sub	fp, #48
0f180     A7 14 02 FB | 	rdlong	arg02, fp
0f184     48 B6 B0 FD | 	call	#_pslpoke
0f188     68 00 90 FD | 	jmp	#LR__1202
0f18c                 | LR__1197
0f18c     30 4E 05 F1 | 	add	fp, #48
0f190     A7 12 02 FB | 	rdlong	arg01, fp
0f194     30 4E 85 F1 | 	sub	fp, #48
0f198     A7 14 02 FB | 	rdlong	arg02, fp
0f19c     30 B6 B0 FD | 	call	#_pslpoke
0f1a0     50 00 90 FD | 	jmp	#LR__1202
0f1a4                 | LR__1198
0f1a4     30 4E 05 F1 | 	add	fp, #48
0f1a8     A7 12 02 FB | 	rdlong	arg01, fp
0f1ac     30 4E 85 F1 | 	sub	fp, #48
0f1b0     A7 14 02 FB | 	rdlong	arg02, fp
0f1b4     18 B6 B0 FD | 	call	#_pslpoke
0f1b8     38 00 90 FD | 	jmp	#LR__1202
0f1bc                 | LR__1199
0f1bc     30 4E 05 F1 | 	add	fp, #48
0f1c0     A7 12 02 FB | 	rdlong	arg01, fp
0f1c4     30 4E 85 F1 | 	sub	fp, #48
0f1c8     A7 14 02 FB | 	rdlong	arg02, fp
0f1cc     00 B6 B0 FD | 	call	#_pslpoke
0f1d0     20 00 90 FD | 	jmp	#LR__1202
0f1d4                 | LR__1200
0f1d4     30 4E 05 F1 | 	add	fp, #48
0f1d8     A7 12 02 FB | 	rdlong	arg01, fp
0f1dc     30 4E 85 F1 | 	sub	fp, #48
0f1e0     A7 14 02 FB | 	rdlong	arg02, fp
0f1e4     E8 B5 B0 FD | 	call	#_pslpoke
0f1e8     08 00 90 FD | 	jmp	#LR__1202
0f1ec                 | LR__1201
0f1ec     2F 12 06 F6 | 	mov	arg01, #47
0f1f0     78 B4 B0 FD | 	call	#_printerror
0f1f4                 | LR__1202
0f1f4                 | LR__1203
0f1f4     A7 F0 03 F6 | 	mov	ptra, fp
0f1f8     B2 00 A0 FD | 	call	#popregs_
0f1fc                 | _do_assign_ret
0f1fc     2D 00 64 FD | 	ret
0f200                 | 
0f200                 | ' 
0f200                 | ' 
0f200                 | ' ' --------------------- Read a variable and push to the stack
0f200                 | ' 
0f200                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0f200                 | ' 
0f200                 | ' sub do_getvar
0f200                 | _do_getvar
0f200     04 4A 05 F6 | 	mov	COUNT_, #4
0f204     A8 00 A0 FD | 	call	#pushregs_
0f208     3C F0 07 F1 | 	add	ptra, #60
0f20c                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0f20c                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0f20c     4A 00 00 FF 
0f210     B0 E4 05 F1 | 	add	objptr, ##38064
0f214     F2 1E 02 FB | 	rdlong	local01, objptr
0f218     0F 17 02 F6 | 	mov	arg03, local01
0f21c     01 16 66 F0 | 	shl	arg03, #1
0f220     0F 17 02 F1 | 	add	arg03, local01
0f224     02 16 66 F0 | 	shl	arg03, #2
0f228     03 00 00 FF 
0f22c     04 E4 85 F1 | 	sub	objptr, ##1540
0f230     F2 16 02 F1 | 	add	arg03, objptr
0f234     04 16 06 F1 | 	add	arg03, #4
0f238     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0f23c     47 00 00 FF 
0f240     AC E4 85 F1 | 	sub	objptr, ##36524
0f244     C4 00 90 5D |  if_ne	jmp	#LR__1211
0f248     4A 00 00 FF 
0f24c     B0 E4 05 F1 | 	add	objptr, ##38064
0f250     F2 1E 02 FB | 	rdlong	local01, objptr
0f254     0F 13 02 F6 | 	mov	arg01, local01
0f258     01 12 66 F0 | 	shl	arg01, #1
0f25c     0F 13 02 F1 | 	add	arg01, local01
0f260     02 12 66 F0 | 	shl	arg01, #2
0f264     03 00 00 FF 
0f268     04 E4 85 F1 | 	sub	objptr, ##1540
0f26c     F2 12 02 F1 | 	add	arg01, objptr
0f270     09 1F 02 FB | 	rdlong	local01, arg01
0f274     04 1E 66 F0 | 	shl	local01, #4
0f278     32 00 00 FF 
0f27c     84 E4 85 F1 | 	sub	objptr, ##25732
0f280     F2 1E 02 F1 | 	add	local01, objptr
0f284     04 1E 06 F1 | 	add	local01, #4
0f288     0F 13 02 FB | 	rdlong	arg01, local01
0f28c     04 1E 06 F1 | 	add	local01, #4
0f290     0F 1F 02 FB | 	rdlong	local01, local01
0f294     A7 12 62 FC | 	wrlong	arg01, fp
0f298     04 4E 05 F1 | 	add	fp, #4
0f29c     A7 1E 62 FC | 	wrlong	local01, fp
0f2a0     35 00 00 FF 
0f2a4     88 E4 05 F1 | 	add	objptr, ##27272
0f2a8     F2 1E 02 FB | 	rdlong	local01, objptr
0f2ac     0F 13 02 F6 | 	mov	arg01, local01
0f2b0     01 12 66 F0 | 	shl	arg01, #1
0f2b4     0F 13 02 F1 | 	add	arg01, local01
0f2b8     02 12 66 F0 | 	shl	arg01, #2
0f2bc     03 00 00 FF 
0f2c0     04 E4 85 F1 | 	sub	objptr, ##1540
0f2c4     F2 12 02 F1 | 	add	arg01, objptr
0f2c8     09 1F 02 FB | 	rdlong	local01, arg01
0f2cc     04 1E 66 F0 | 	shl	local01, #4
0f2d0     32 00 00 FF 
0f2d4     84 E4 85 F1 | 	sub	objptr, ##25732
0f2d8     F2 1E 02 F1 | 	add	local01, objptr
0f2dc     0C 1E 06 F1 | 	add	local01, #12
0f2e0     0F 1F 02 FB | 	rdlong	local01, local01
0f2e4     04 4E 05 F1 | 	add	fp, #4
0f2e8     A7 1E 62 FC | 	wrlong	local01, fp
0f2ec                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0f2ec                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0f2ec                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0f2ec     08 4E 85 F1 | 	sub	fp, #8
0f2f0     00 1F 16 F2 | 	cmp	local01, #256 wc
0f2f4     15 00 00 FF 
0f2f8     28 E4 85 F1 | 	sub	objptr, ##10792
0f2fc     0C 00 90 3D |  if_ae	jmp	#LR__1210
0f300     A7 12 02 F6 | 	mov	arg01, fp
0f304     08 B6 BF FD | 	call	#_push
0f308     A0 04 90 FD | 	jmp	#LR__1232
0f30c                 | LR__1210
0f30c                 | LR__1211
0f30c     4A 00 00 FF 
0f310     B0 E4 05 F1 | 	add	objptr, ##38064
0f314     F2 16 02 FB | 	rdlong	arg03, objptr
0f318     0B 15 02 F6 | 	mov	arg02, arg03
0f31c     01 14 66 F0 | 	shl	arg02, #1
0f320     0B 15 02 F1 | 	add	arg02, arg03
0f324     02 14 66 F0 | 	shl	arg02, #2
0f328     03 00 00 FF 
0f32c     04 E4 85 F1 | 	sub	objptr, ##1540
0f330     F2 14 02 F1 | 	add	arg02, objptr
0f334     0A 17 02 FB | 	rdlong	arg03, arg02
0f338     04 16 66 F0 | 	shl	arg03, #4
0f33c     32 00 00 FF 
0f340     84 E4 85 F1 | 	sub	objptr, ##25732
0f344     F2 16 02 F1 | 	add	arg03, objptr
0f348     04 16 06 F1 | 	add	arg03, #4
0f34c     0B 13 02 FB | 	rdlong	arg01, arg03
0f350     0C 4E 05 F1 | 	add	fp, #12
0f354     A7 12 62 FC | 	wrlong	arg01, fp
0f358     0C 4E 85 F1 | 	sub	fp, #12
0f35c     15 00 00 FF 
0f360     28 E4 85 F1 | 	sub	objptr, ##10792
0f364     98 B5 B0 FD | 	call	#_pslpeek
0f368     FD FA 31 F9 | 	getword	result1, result1, #0
0f36c     10 4E 05 F1 | 	add	fp, #16
0f370     A7 FA 61 FC | 	wrlong	result1, fp
0f374     4A 00 00 FF 
0f378     B0 E4 05 F1 | 	add	objptr, ##38064
0f37c     F2 16 02 FB | 	rdlong	arg03, objptr
0f380     0B 15 02 F6 | 	mov	arg02, arg03
0f384     01 14 66 F0 | 	shl	arg02, #1
0f388     0B 15 02 F1 | 	add	arg02, arg03
0f38c     02 14 66 F0 | 	shl	arg02, #2
0f390     03 00 00 FF 
0f394     04 E4 85 F1 | 	sub	objptr, ##1540
0f398     F2 14 02 F1 | 	add	arg02, objptr
0f39c     04 14 06 F1 | 	add	arg02, #4
0f3a0     0A 17 02 FB | 	rdlong	arg03, arg02
0f3a4     04 4E 05 F1 | 	add	fp, #4
0f3a8     A7 16 62 FC | 	wrlong	arg03, fp
0f3ac     08 4E 85 F1 | 	sub	fp, #8
0f3b0     A7 12 02 FB | 	rdlong	arg01, fp
0f3b4     0C 4E 85 F1 | 	sub	fp, #12
0f3b8     02 12 06 F1 | 	add	arg01, #2
0f3bc     47 00 00 FF 
0f3c0     AC E4 85 F1 | 	sub	objptr, ##36524
0f3c4     E0 B4 B0 FD | 	call	#_pspeek
0f3c8     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f3cc     18 4E 05 F1 | 	add	fp, #24
0f3d0     A7 FA 61 FC | 	wrlong	result1, fp
0f3d4     0C 4E 85 F1 | 	sub	fp, #12
0f3d8     A7 12 02 FB | 	rdlong	arg01, fp
0f3dc     0C 4E 85 F1 | 	sub	fp, #12
0f3e0     04 12 06 F1 | 	add	arg01, #4
0f3e4     18 B5 B0 FD | 	call	#_pslpeek
0f3e8     1C 4E 05 F1 | 	add	fp, #28
0f3ec     A7 FA 61 FC | 	wrlong	result1, fp
0f3f0     10 4E 85 F1 | 	sub	fp, #16
0f3f4     A7 12 02 FB | 	rdlong	arg01, fp
0f3f8     0C 4E 85 F1 | 	sub	fp, #12
0f3fc     08 12 06 F1 | 	add	arg01, #8
0f400     FC B4 B0 FD | 	call	#_pslpeek
0f404     20 4E 05 F1 | 	add	fp, #32
0f408     A7 FA 61 FC | 	wrlong	result1, fp
0f40c     14 4E 85 F1 | 	sub	fp, #20
0f410     A7 12 02 FB | 	rdlong	arg01, fp
0f414     0C 4E 85 F1 | 	sub	fp, #12
0f418     0C 12 06 F1 | 	add	arg01, #12
0f41c     E0 B4 B0 FD | 	call	#_pslpeek
0f420     24 4E 05 F1 | 	add	fp, #36
0f424     A7 FA 61 FC | 	wrlong	result1, fp
0f428                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0f428                 | ' esize=pspeek(arrptr+2)
0f428                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0f428                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0f428                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0f428                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0f428     10 4E 85 F1 | 	sub	fp, #16
0f42c     A7 16 02 FB | 	rdlong	arg03, fp
0f430     14 4E 85 F1 | 	sub	fp, #20
0f434     03 16 16 F2 | 	cmp	arg03, #3 wc
0f438     38 00 90 CD |  if_b	jmp	#LR__1212
0f43c     38 B4 BF FD | 	call	#_pop
0f440     FF 16 02 F6 | 	mov	arg03, result3
0f444     A7 FA 61 FC | 	wrlong	result1, fp
0f448     04 4E 05 F1 | 	add	fp, #4
0f44c     A7 FC 61 FC | 	wrlong	result2, fp
0f450     04 4E 05 F1 | 	add	fp, #4
0f454     A7 16 62 FC | 	wrlong	arg03, fp
0f458     08 4E 85 F1 | 	sub	fp, #8
0f45c     A7 12 02 F6 | 	mov	arg01, fp
0f460     54 3F B0 FD | 	call	#_converttoint
0f464     30 4E 05 F1 | 	add	fp, #48
0f468     A7 FA 61 FC | 	wrlong	result1, fp
0f46c     30 4E 85 F1 | 	sub	fp, #48
0f470     0C 00 90 FD | 	jmp	#LR__1213
0f474                 | LR__1212
0f474     30 4E 05 F1 | 	add	fp, #48
0f478     A7 00 68 FC | 	wrlong	#0, fp
0f47c     30 4E 85 F1 | 	sub	fp, #48
0f480                 | LR__1213
0f480                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0f480     14 4E 05 F1 | 	add	fp, #20
0f484     A7 16 02 FB | 	rdlong	arg03, fp
0f488     14 4E 85 F1 | 	sub	fp, #20
0f48c     02 16 16 F2 | 	cmp	arg03, #2 wc
0f490     38 00 90 CD |  if_b	jmp	#LR__1214
0f494     E0 B3 BF FD | 	call	#_pop
0f498     FF 16 02 F6 | 	mov	arg03, result3
0f49c     A7 FA 61 FC | 	wrlong	result1, fp
0f4a0     04 4E 05 F1 | 	add	fp, #4
0f4a4     A7 FC 61 FC | 	wrlong	result2, fp
0f4a8     04 4E 05 F1 | 	add	fp, #4
0f4ac     A7 16 62 FC | 	wrlong	arg03, fp
0f4b0     08 4E 85 F1 | 	sub	fp, #8
0f4b4     A7 12 02 F6 | 	mov	arg01, fp
0f4b8     FC 3E B0 FD | 	call	#_converttoint
0f4bc     2C 4E 05 F1 | 	add	fp, #44
0f4c0     A7 FA 61 FC | 	wrlong	result1, fp
0f4c4     2C 4E 85 F1 | 	sub	fp, #44
0f4c8     0C 00 90 FD | 	jmp	#LR__1215
0f4cc                 | LR__1214
0f4cc     2C 4E 05 F1 | 	add	fp, #44
0f4d0     A7 00 68 FC | 	wrlong	#0, fp
0f4d4     2C 4E 85 F1 | 	sub	fp, #44
0f4d8                 | LR__1215
0f4d8                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0f4d8     14 4E 05 F1 | 	add	fp, #20
0f4dc     A7 16 02 FB | 	rdlong	arg03, fp
0f4e0     14 4E 85 F1 | 	sub	fp, #20
0f4e4     01 16 16 F2 | 	cmp	arg03, #1 wc
0f4e8     38 00 90 CD |  if_b	jmp	#LR__1216
0f4ec     88 B3 BF FD | 	call	#_pop
0f4f0     FF 16 02 F6 | 	mov	arg03, result3
0f4f4     A7 FA 61 FC | 	wrlong	result1, fp
0f4f8     04 4E 05 F1 | 	add	fp, #4
0f4fc     A7 FC 61 FC | 	wrlong	result2, fp
0f500     04 4E 05 F1 | 	add	fp, #4
0f504     A7 16 62 FC | 	wrlong	arg03, fp
0f508     08 4E 85 F1 | 	sub	fp, #8
0f50c     A7 12 02 F6 | 	mov	arg01, fp
0f510     A4 3E B0 FD | 	call	#_converttoint
0f514     28 4E 05 F1 | 	add	fp, #40
0f518     A7 FA 61 FC | 	wrlong	result1, fp
0f51c     28 4E 85 F1 | 	sub	fp, #40
0f520     0C 00 90 FD | 	jmp	#LR__1217
0f524                 | LR__1216
0f524     28 4E 05 F1 | 	add	fp, #40
0f528     A7 00 68 FC | 	wrlong	#0, fp
0f52c     28 4E 85 F1 | 	sub	fp, #40
0f530                 | LR__1217
0f530     0C 4E 05 F1 | 	add	fp, #12
0f534     A7 20 02 FB | 	rdlong	local02, fp
0f538     1C 4E 05 F1 | 	add	fp, #28
0f53c     A7 22 02 FB | 	rdlong	local03, fp
0f540     04 4E 05 F1 | 	add	fp, #4
0f544     A7 FC 01 FB | 	rdlong	result2, fp
0f548     10 4E 85 F1 | 	sub	fp, #16
0f54c     A7 FE 01 FB | 	rdlong	result3, fp
0f550     FF FC 01 FD | 	qmul	result2, result3
0f554     10 20 06 F1 | 	add	local02, #16
0f558     14 4E 05 F1 | 	add	fp, #20
0f55c     A7 FC 01 FB | 	rdlong	result2, fp
0f560     18 FA 61 FD | 	getqx	result1
0f564     FF FC 01 FD | 	qmul	result2, result3
0f568     FD 22 02 F1 | 	add	local03, result1
0f56c     10 4E 85 F1 | 	sub	fp, #16
0f570     A7 FE 01 FB | 	rdlong	result3, fp
0f574     18 FC 61 FD | 	getqx	result2
0f578     FF FC 01 FD | 	qmul	result2, result3
0f57c     08 4E 85 F1 | 	sub	fp, #8
0f580     A7 FE 01 FB | 	rdlong	result3, fp
0f584     18 FC 61 FD | 	getqx	result2
0f588     FE 22 02 F1 | 	add	local03, result2
0f58c     FF 22 02 FD | 	qmul	local03, result3
0f590     1C 4E 05 F1 | 	add	fp, #28
0f594                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0f594                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0f594                 | ' 
0f594                 | ' select case vartype
0f594     18 FC 61 FD | 	getqx	result2
0f598     FE 20 02 F1 | 	add	local02, result2
0f59c     A7 20 62 FC | 	wrlong	local02, fp
0f5a0     24 4E 85 F1 | 	sub	fp, #36
0f5a4     A7 24 02 FB | 	rdlong	local04, fp
0f5a8     10 4E 85 F1 | 	sub	fp, #16
0f5ac     00 25 86 F1 | 	sub	local04, #256
0f5b0     0C 24 26 F3 | 	fle	local04, #12
0f5b4     30 24 62 FD | 	jmprel	local04
0f5b8                 | LR__1218
0f5b8     30 00 90 FD | 	jmp	#LR__1219
0f5bc     58 00 90 FD | 	jmp	#LR__1220
0f5c0     8C 00 90 FD | 	jmp	#LR__1221
0f5c4     AC 00 90 FD | 	jmp	#LR__1222
0f5c8     E8 00 90 FD | 	jmp	#LR__1223
0f5cc     08 01 90 FD | 	jmp	#LR__1224
0f5d0     24 01 90 FD | 	jmp	#LR__1225
0f5d4     40 01 90 FD | 	jmp	#LR__1226
0f5d8     50 01 90 FD | 	jmp	#LR__1227
0f5dc     60 01 90 FD | 	jmp	#LR__1228
0f5e0     7C 01 90 FD | 	jmp	#LR__1229
0f5e4     8C 01 90 FD | 	jmp	#LR__1230
0f5e8     B8 01 90 FD | 	jmp	#LR__1231
0f5ec                 | LR__1219
0f5ec     A7 12 02 F6 | 	mov	arg01, fp
0f5f0     34 4E 05 F1 | 	add	fp, #52
0f5f4     A7 14 02 FB | 	rdlong	arg02, fp
0f5f8     34 4E 85 F1 | 	sub	fp, #52
0f5fc     0C 16 06 F6 | 	mov	arg03, #12
0f600     0B 00 00 FF 
0f604     CC E4 05 F1 | 	add	objptr, ##5836
0f608     C8 E8 B0 FD | 	call	#_psram_spin2_read1
0f60c     0B 00 00 FF 
0f610     CC E4 85 F1 | 	sub	objptr, ##5836
0f614     8C 01 90 FD | 	jmp	#LR__1231
0f618                 | LR__1220
0f618     08 4E 05 F1 | 	add	fp, #8
0f61c     A7 38 68 FC | 	wrlong	#28, fp
0f620     2C 4E 05 F1 | 	add	fp, #44
0f624     A7 12 02 FB | 	rdlong	arg01, fp
0f628     34 4E 85 F1 | 	sub	fp, #52
0f62c     78 B2 B0 FD | 	call	#_pspeek
0f630     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f634     A7 FA 61 FC | 	wrlong	result1, fp
0f638     80 FA 15 F2 | 	cmp	result1, #128 wc
0f63c     00 1F 66 36 |  if_ae	neg	local01, #256
0f640     A7 22 02 3B |  if_ae	rdlong	local03, fp
0f644     11 1F 42 35 |  if_ae	or	local01, local03
0f648     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0f64c     54 01 90 FD | 	jmp	#LR__1231
0f650                 | LR__1221
0f650     08 4E 05 F1 | 	add	fp, #8
0f654     A7 3A 68 FC | 	wrlong	#29, fp
0f658     2C 4E 05 F1 | 	add	fp, #44
0f65c     A7 12 02 FB | 	rdlong	arg01, fp
0f660     34 4E 85 F1 | 	sub	fp, #52
0f664     40 B2 B0 FD | 	call	#_pspeek
0f668     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f66c     A7 FA 61 FC | 	wrlong	result1, fp
0f670     30 01 90 FD | 	jmp	#LR__1231
0f674                 | LR__1222
0f674     08 4E 05 F1 | 	add	fp, #8
0f678     A7 38 68 FC | 	wrlong	#28, fp
0f67c     2C 4E 05 F1 | 	add	fp, #44
0f680     A7 12 02 FB | 	rdlong	arg01, fp
0f684     34 4E 85 F1 | 	sub	fp, #52
0f688     74 B2 B0 FD | 	call	#_pslpeek
0f68c     FD FA 31 F9 | 	getword	result1, result1, #0
0f690     A7 FA 61 FC | 	wrlong	result1, fp
0f694     40 00 00 FF 
0f698     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0f69c     FF 7F 00 3F 
0f6a0     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0f6a4     A7 22 02 3B |  if_ae	rdlong	local03, fp
0f6a8     11 1F 42 35 |  if_ae	or	local01, local03
0f6ac     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0f6b0     F0 00 90 FD | 	jmp	#LR__1231
0f6b4                 | LR__1223
0f6b4     08 4E 05 F1 | 	add	fp, #8
0f6b8     A7 3A 68 FC | 	wrlong	#29, fp
0f6bc     2C 4E 05 F1 | 	add	fp, #44
0f6c0     A7 12 02 FB | 	rdlong	arg01, fp
0f6c4     34 4E 85 F1 | 	sub	fp, #52
0f6c8     34 B2 B0 FD | 	call	#_pslpeek
0f6cc     FD FA 31 F9 | 	getword	result1, result1, #0
0f6d0     A7 FA 61 FC | 	wrlong	result1, fp
0f6d4     CC 00 90 FD | 	jmp	#LR__1231
0f6d8                 | LR__1224
0f6d8     08 4E 05 F1 | 	add	fp, #8
0f6dc     A7 38 68 FC | 	wrlong	#28, fp
0f6e0     2C 4E 05 F1 | 	add	fp, #44
0f6e4     A7 12 02 FB | 	rdlong	arg01, fp
0f6e8     34 4E 85 F1 | 	sub	fp, #52
0f6ec     10 B2 B0 FD | 	call	#_pslpeek
0f6f0     A7 FA 61 FC | 	wrlong	result1, fp
0f6f4     AC 00 90 FD | 	jmp	#LR__1231
0f6f8                 | LR__1225
0f6f8     08 4E 05 F1 | 	add	fp, #8
0f6fc     A7 3A 68 FC | 	wrlong	#29, fp
0f700     2C 4E 05 F1 | 	add	fp, #44
0f704     A7 12 02 FB | 	rdlong	arg01, fp
0f708     34 4E 85 F1 | 	sub	fp, #52
0f70c     F0 B1 B0 FD | 	call	#_pslpeek
0f710     A7 FA 61 FC | 	wrlong	result1, fp
0f714     8C 00 90 FD | 	jmp	#LR__1231
0f718                 | LR__1226
0f718     08 4E 05 F1 | 	add	fp, #8
0f71c     A7 FE 69 FC | 	wrlong	#255, fp
0f720     08 4E 85 F1 | 	sub	fp, #8
0f724     A7 60 68 FC | 	wrlong	#48, fp
0f728     78 00 90 FD | 	jmp	#LR__1231
0f72c                 | LR__1227
0f72c     08 4E 05 F1 | 	add	fp, #8
0f730     A7 FE 69 FC | 	wrlong	#255, fp
0f734     08 4E 85 F1 | 	sub	fp, #8
0f738     A7 60 68 FC | 	wrlong	#48, fp
0f73c     64 00 90 FD | 	jmp	#LR__1231
0f740                 | LR__1228
0f740     08 4E 05 F1 | 	add	fp, #8
0f744     A7 3C 68 FC | 	wrlong	#30, fp
0f748     2C 4E 05 F1 | 	add	fp, #44
0f74c     A7 12 02 FB | 	rdlong	arg01, fp
0f750     34 4E 85 F1 | 	sub	fp, #52
0f754     A8 B1 B0 FD | 	call	#_pslpeek
0f758     A7 FA 61 FC | 	wrlong	result1, fp
0f75c     44 00 90 FD | 	jmp	#LR__1231
0f760                 | LR__1229
0f760     08 4E 05 F1 | 	add	fp, #8
0f764     A7 FE 69 FC | 	wrlong	#255, fp
0f768     08 4E 85 F1 | 	sub	fp, #8
0f76c     A7 60 68 FC | 	wrlong	#48, fp
0f770     30 00 90 FD | 	jmp	#LR__1231
0f774                 | LR__1230
0f774     08 4E 05 F1 | 	add	fp, #8
0f778     A7 3E 68 FC | 	wrlong	#31, fp
0f77c     2C 4E 05 F1 | 	add	fp, #44
0f780     A7 12 02 FB | 	rdlong	arg01, fp
0f784     34 4E 85 F1 | 	sub	fp, #52
0f788     74 B1 B0 FD | 	call	#_pslpeek
0f78c     A7 FA 61 FC | 	wrlong	result1, fp
0f790     00 04 00 FF 
0f794     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0f798     08 4E 05 31 |  if_ae	add	fp, #8
0f79c     A7 56 68 3C |  if_ae	wrlong	#43, fp
0f7a0     08 4E 85 31 |  if_ae	sub	fp, #8
0f7a4                 | LR__1231
0f7a4     A7 12 02 F6 | 	mov	arg01, fp
0f7a8     64 B1 BF FD | 	call	#_push
0f7ac                 | LR__1232
0f7ac     A7 F0 03 F6 | 	mov	ptra, fp
0f7b0     B2 00 A0 FD | 	call	#popregs_
0f7b4                 | _do_getvar_ret
0f7b4     2D 00 64 FD | 	ret
0f7b8                 | 
0f7b8                 | ' 
0f7b8                 | ' 
0f7b8                 | ' sub do_getaddr
0f7b8                 | _do_getaddr
0f7b8     01 4A 05 F6 | 	mov	COUNT_, #1
0f7bc     A8 00 A0 FD | 	call	#pushregs_
0f7c0     38 F0 07 F1 | 	add	ptra, #56
0f7c4                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0f7c4                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0f7c4     4A 00 00 FF 
0f7c8     B0 E4 05 F1 | 	add	objptr, ##38064
0f7cc     F2 12 02 FB | 	rdlong	arg01, objptr
0f7d0     09 FD 01 F6 | 	mov	result2, arg01
0f7d4     01 FC 65 F0 | 	shl	result2, #1
0f7d8     09 FD 01 F1 | 	add	result2, arg01
0f7dc     02 FC 65 F0 | 	shl	result2, #2
0f7e0     03 00 00 FF 
0f7e4     04 E4 85 F1 | 	sub	objptr, ##1540
0f7e8     F2 FC 01 F1 | 	add	result2, objptr
0f7ec     04 FC 05 F1 | 	add	result2, #4
0f7f0     FE FC 09 FB | 	rdlong	result2, result2 wz
0f7f4     47 00 00 FF 
0f7f8     AC E4 85 F1 | 	sub	objptr, ##36524
0f7fc     C4 00 90 5D |  if_ne	jmp	#LR__1240
0f800     4A 00 00 FF 
0f804     B0 E4 05 F1 | 	add	objptr, ##38064
0f808     F2 12 02 FB | 	rdlong	arg01, objptr
0f80c     09 FD 01 F6 | 	mov	result2, arg01
0f810     01 FC 65 F0 | 	shl	result2, #1
0f814     09 FD 01 F1 | 	add	result2, arg01
0f818     02 FC 65 F0 | 	shl	result2, #2
0f81c     03 00 00 FF 
0f820     04 E4 85 F1 | 	sub	objptr, ##1540
0f824     F2 FC 01 F1 | 	add	result2, objptr
0f828     FE 12 02 FB | 	rdlong	arg01, result2
0f82c     04 12 66 F0 | 	shl	arg01, #4
0f830     32 00 00 FF 
0f834     84 E4 85 F1 | 	sub	objptr, ##25732
0f838     F2 12 02 F1 | 	add	arg01, objptr
0f83c     0C 12 06 F1 | 	add	arg01, #12
0f840     09 13 02 FB | 	rdlong	arg01, arg01
0f844     08 4E 05 F1 | 	add	fp, #8
0f848     A7 12 62 FC | 	wrlong	arg01, fp
0f84c                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0f84c                 | '    if t1.result_type>=array_no_type then goto 2200
0f84c     08 4E 85 F1 | 	sub	fp, #8
0f850     00 13 16 F2 | 	cmp	arg01, #256 wc
0f854     15 00 00 FF 
0f858     28 E4 85 F1 | 	sub	objptr, ##10792
0f85c     64 00 90 3D |  if_ae	jmp	#LR__1241
0f860     4A 00 00 FF 
0f864     B0 E4 05 F1 | 	add	objptr, ##38064
0f868     F2 12 02 FB | 	rdlong	arg01, objptr
0f86c     09 FB 01 F6 | 	mov	result1, arg01
0f870     01 FA 65 F0 | 	shl	result1, #1
0f874     09 FB 01 F1 | 	add	result1, arg01
0f878     02 FA 65 F0 | 	shl	result1, #2
0f87c     03 00 00 FF 
0f880     04 E4 85 F1 | 	sub	objptr, ##1540
0f884     F2 FA 01 F1 | 	add	result1, objptr
0f888     FD FA 01 FB | 	rdlong	result1, result1
0f88c     04 FA 65 F0 | 	shl	result1, #4
0f890     32 00 00 FF 
0f894     84 E4 85 F1 | 	sub	objptr, ##25732
0f898     F2 FA 01 F1 | 	add	result1, objptr
0f89c     04 FA 05 F1 | 	add	result1, #4
0f8a0     15 00 00 FF 
0f8a4     28 E4 85 F1 | 	sub	objptr, ##10792
0f8a8     A7 FA 61 FC | 	wrlong	result1, fp
0f8ac     08 4E 05 F1 | 	add	fp, #8
0f8b0     A7 3A 68 FC | 	wrlong	#29, fp
0f8b4     08 4E 85 F1 | 	sub	fp, #8
0f8b8     A7 12 02 F6 | 	mov	arg01, fp
0f8bc     50 B0 BF FD | 	call	#_push
0f8c0                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
0f8c0                 | '   t1.result_type=result_uint
0f8c0                 | '   push t1 : return
0f8c0     D8 02 90 FD | 	jmp	#LR__1250
0f8c4                 | LR__1240
0f8c4                 | LR__1241
0f8c4     4A 00 00 FF 
0f8c8     B0 E4 05 F1 | 	add	objptr, ##38064
0f8cc     F2 FE 01 FB | 	rdlong	result3, objptr
0f8d0     FF 12 02 F6 | 	mov	arg01, result3
0f8d4     01 12 66 F0 | 	shl	arg01, #1
0f8d8     FF 12 02 F1 | 	add	arg01, result3
0f8dc     02 12 66 F0 | 	shl	arg01, #2
0f8e0     03 00 00 FF 
0f8e4     04 E4 85 F1 | 	sub	objptr, ##1540
0f8e8     F2 12 02 F1 | 	add	arg01, objptr
0f8ec     09 13 02 FB | 	rdlong	arg01, arg01
0f8f0     04 12 66 F0 | 	shl	arg01, #4
0f8f4     32 00 00 FF 
0f8f8     84 E4 85 F1 | 	sub	objptr, ##25732
0f8fc     F2 12 02 F1 | 	add	arg01, objptr
0f900     04 12 06 F1 | 	add	arg01, #4
0f904     09 13 02 FB | 	rdlong	arg01, arg01
0f908     0C 4E 05 F1 | 	add	fp, #12
0f90c     A7 12 62 FC | 	wrlong	arg01, fp
0f910     0C 4E 85 F1 | 	sub	fp, #12
0f914     15 00 00 FF 
0f918     28 E4 85 F1 | 	sub	objptr, ##10792
0f91c     E0 AF B0 FD | 	call	#_pslpeek
0f920     FD FA 31 F9 | 	getword	result1, result1, #0
0f924     10 4E 05 F1 | 	add	fp, #16
0f928     A7 FA 61 FC | 	wrlong	result1, fp
0f92c     4A 00 00 FF 
0f930     B0 E4 05 F1 | 	add	objptr, ##38064
0f934     F2 FE 01 FB | 	rdlong	result3, objptr
0f938     FF 12 02 F6 | 	mov	arg01, result3
0f93c     01 12 66 F0 | 	shl	arg01, #1
0f940     FF 12 02 F1 | 	add	arg01, result3
0f944     02 12 66 F0 | 	shl	arg01, #2
0f948     03 00 00 FF 
0f94c     04 E4 85 F1 | 	sub	objptr, ##1540
0f950     F2 12 02 F1 | 	add	arg01, objptr
0f954     04 12 06 F1 | 	add	arg01, #4
0f958     09 13 02 FB | 	rdlong	arg01, arg01
0f95c     04 4E 05 F1 | 	add	fp, #4
0f960     A7 12 62 FC | 	wrlong	arg01, fp
0f964     08 4E 85 F1 | 	sub	fp, #8
0f968     A7 12 02 FB | 	rdlong	arg01, fp
0f96c     0C 4E 85 F1 | 	sub	fp, #12
0f970     02 12 06 F1 | 	add	arg01, #2
0f974     47 00 00 FF 
0f978     AC E4 85 F1 | 	sub	objptr, ##36524
0f97c     28 AF B0 FD | 	call	#_pspeek
0f980     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f984     18 4E 05 F1 | 	add	fp, #24
0f988     A7 FA 61 FC | 	wrlong	result1, fp
0f98c     0C 4E 85 F1 | 	sub	fp, #12
0f990     A7 12 02 FB | 	rdlong	arg01, fp
0f994     0C 4E 85 F1 | 	sub	fp, #12
0f998     04 12 06 F1 | 	add	arg01, #4
0f99c     60 AF B0 FD | 	call	#_pslpeek
0f9a0     1C 4E 05 F1 | 	add	fp, #28
0f9a4     A7 FA 61 FC | 	wrlong	result1, fp
0f9a8     10 4E 85 F1 | 	sub	fp, #16
0f9ac     A7 12 02 FB | 	rdlong	arg01, fp
0f9b0     0C 4E 85 F1 | 	sub	fp, #12
0f9b4     08 12 06 F1 | 	add	arg01, #8
0f9b8     44 AF B0 FD | 	call	#_pslpeek
0f9bc     20 4E 05 F1 | 	add	fp, #32
0f9c0     A7 FA 61 FC | 	wrlong	result1, fp
0f9c4     14 4E 85 F1 | 	sub	fp, #20
0f9c8     A7 12 02 FB | 	rdlong	arg01, fp
0f9cc     0C 4E 85 F1 | 	sub	fp, #12
0f9d0     0C 12 06 F1 | 	add	arg01, #12
0f9d4     28 AF B0 FD | 	call	#_pslpeek
0f9d8     24 4E 05 F1 | 	add	fp, #36
0f9dc     A7 FA 61 FC | 	wrlong	result1, fp
0f9e0                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0f9e0                 | ' esize=pspeek(arrptr+2)
0f9e0                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0f9e0                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0f9e0                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0f9e0                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
0f9e0     10 4E 85 F1 | 	sub	fp, #16
0f9e4     A7 12 02 FB | 	rdlong	arg01, fp
0f9e8     14 4E 85 F1 | 	sub	fp, #20
0f9ec     03 12 16 F2 | 	cmp	arg01, #3 wc
0f9f0     34 00 90 CD |  if_b	jmp	#LR__1242
0f9f4     80 AE BF FD | 	call	#_pop
0f9f8     A7 FA 61 FC | 	wrlong	result1, fp
0f9fc     04 4E 05 F1 | 	add	fp, #4
0fa00     A7 FC 61 FC | 	wrlong	result2, fp
0fa04     04 4E 05 F1 | 	add	fp, #4
0fa08     A7 FE 61 FC | 	wrlong	result3, fp
0fa0c     08 4E 85 F1 | 	sub	fp, #8
0fa10     A7 12 02 F6 | 	mov	arg01, fp
0fa14     A0 39 B0 FD | 	call	#_converttoint
0fa18     30 4E 05 F1 | 	add	fp, #48
0fa1c     A7 FA 61 FC | 	wrlong	result1, fp
0fa20     30 4E 85 F1 | 	sub	fp, #48
0fa24     0C 00 90 FD | 	jmp	#LR__1243
0fa28                 | LR__1242
0fa28     30 4E 05 F1 | 	add	fp, #48
0fa2c     A7 00 68 FC | 	wrlong	#0, fp
0fa30     30 4E 85 F1 | 	sub	fp, #48
0fa34                 | LR__1243
0fa34                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
0fa34     14 4E 05 F1 | 	add	fp, #20
0fa38     A7 12 02 FB | 	rdlong	arg01, fp
0fa3c     14 4E 85 F1 | 	sub	fp, #20
0fa40     02 12 16 F2 | 	cmp	arg01, #2 wc
0fa44     34 00 90 CD |  if_b	jmp	#LR__1244
0fa48     2C AE BF FD | 	call	#_pop
0fa4c     A7 FA 61 FC | 	wrlong	result1, fp
0fa50     04 4E 05 F1 | 	add	fp, #4
0fa54     A7 FC 61 FC | 	wrlong	result2, fp
0fa58     04 4E 05 F1 | 	add	fp, #4
0fa5c     A7 FE 61 FC | 	wrlong	result3, fp
0fa60     08 4E 85 F1 | 	sub	fp, #8
0fa64     A7 12 02 F6 | 	mov	arg01, fp
0fa68     4C 39 B0 FD | 	call	#_converttoint
0fa6c     2C 4E 05 F1 | 	add	fp, #44
0fa70     A7 FA 61 FC | 	wrlong	result1, fp
0fa74     2C 4E 85 F1 | 	sub	fp, #44
0fa78     0C 00 90 FD | 	jmp	#LR__1245
0fa7c                 | LR__1244
0fa7c     2C 4E 05 F1 | 	add	fp, #44
0fa80     A7 00 68 FC | 	wrlong	#0, fp
0fa84     2C 4E 85 F1 | 	sub	fp, #44
0fa88                 | LR__1245
0fa88                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
0fa88     14 4E 05 F1 | 	add	fp, #20
0fa8c     A7 12 02 FB | 	rdlong	arg01, fp
0fa90     14 4E 85 F1 | 	sub	fp, #20
0fa94     01 12 16 F2 | 	cmp	arg01, #1 wc
0fa98     34 00 90 CD |  if_b	jmp	#LR__1246
0fa9c     D8 AD BF FD | 	call	#_pop
0faa0     A7 FA 61 FC | 	wrlong	result1, fp
0faa4     04 4E 05 F1 | 	add	fp, #4
0faa8     A7 FC 61 FC | 	wrlong	result2, fp
0faac     04 4E 05 F1 | 	add	fp, #4
0fab0     A7 FE 61 FC | 	wrlong	result3, fp
0fab4     08 4E 85 F1 | 	sub	fp, #8
0fab8     A7 12 02 F6 | 	mov	arg01, fp
0fabc     F8 38 B0 FD | 	call	#_converttoint
0fac0     28 4E 05 F1 | 	add	fp, #40
0fac4     A7 FA 61 FC | 	wrlong	result1, fp
0fac8     28 4E 85 F1 | 	sub	fp, #40
0facc     0C 00 90 FD | 	jmp	#LR__1247
0fad0                 | LR__1246
0fad0     28 4E 05 F1 | 	add	fp, #40
0fad4     A7 00 68 FC | 	wrlong	#0, fp
0fad8     28 4E 85 F1 | 	sub	fp, #40
0fadc                 | LR__1247
0fadc                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0fadc                 | ' if numpar>0 then
0fadc     14 4E 05 F1 | 	add	fp, #20
0fae0     A7 FE 01 FB | 	rdlong	result3, fp
0fae4     14 4E 85 F1 | 	sub	fp, #20
0fae8     01 FE 15 F2 | 	cmp	result3, #1 wc
0faec     8C 00 90 CD |  if_b	jmp	#LR__1248
0faf0     0C 4E 05 F1 | 	add	fp, #12
0faf4     A7 FC 01 FB | 	rdlong	result2, fp
0faf8     1C 4E 05 F1 | 	add	fp, #28
0fafc     A7 FE 01 FB | 	rdlong	result3, fp
0fb00     04 4E 05 F1 | 	add	fp, #4
0fb04     A7 12 02 FB | 	rdlong	arg01, fp
0fb08     10 4E 85 F1 | 	sub	fp, #16
0fb0c     A7 FA 01 FB | 	rdlong	result1, fp
0fb10     FD 12 02 FD | 	qmul	arg01, result1
0fb14     10 FC 05 F1 | 	add	result2, #16
0fb18     14 4E 05 F1 | 	add	fp, #20
0fb1c     A7 1E 02 FB | 	rdlong	local01, fp
0fb20     18 12 62 FD | 	getqx	arg01
0fb24     FD 1E 02 FD | 	qmul	local01, result1
0fb28     09 FF 01 F1 | 	add	result3, arg01
0fb2c     10 4E 85 F1 | 	sub	fp, #16
0fb30     A7 1E 02 FB | 	rdlong	local01, fp
0fb34     18 FA 61 FD | 	getqx	result1
0fb38     0F FB 01 FD | 	qmul	result1, local01
0fb3c     08 4E 85 F1 | 	sub	fp, #8
0fb40     A7 1E 02 FB | 	rdlong	local01, fp
0fb44     18 FA 61 FD | 	getqx	result1
0fb48     FD FE 01 F1 | 	add	result3, result1
0fb4c     0F FF 01 FD | 	qmul	result3, local01
0fb50     1C 4E 05 F1 | 	add	fp, #28
0fb54     18 1E 62 FD | 	getqx	local01
0fb58     0F FD 01 F1 | 	add	result2, local01
0fb5c     A7 FC 61 FC | 	wrlong	result2, fp
0fb60     2C 4E 85 F1 | 	sub	fp, #44
0fb64     A7 3A 68 FC | 	wrlong	#29, fp
0fb68     2C 4E 05 F1 | 	add	fp, #44
0fb6c     A7 1E 02 FB | 	rdlong	local01, fp
0fb70     34 4E 85 F1 | 	sub	fp, #52
0fb74     A7 1E 62 FC | 	wrlong	local01, fp
0fb78     18 00 90 FD | 	jmp	#LR__1249
0fb7c                 | LR__1248
0fb7c     08 4E 05 F1 | 	add	fp, #8
0fb80     A7 3A 68 FC | 	wrlong	#29, fp
0fb84     04 4E 05 F1 | 	add	fp, #4
0fb88     A7 1E 02 FB | 	rdlong	local01, fp
0fb8c     0C 4E 85 F1 | 	sub	fp, #12
0fb90     A7 1E 62 FC | 	wrlong	local01, fp
0fb94                 | LR__1249
0fb94     A7 12 02 F6 | 	mov	arg01, fp
0fb98     74 AD BF FD | 	call	#_push
0fb9c                 | LR__1250
0fb9c     A7 F0 03 F6 | 	mov	ptra, fp
0fba0     B2 00 A0 FD | 	call	#popregs_
0fba4                 | _do_getaddr_ret
0fba4     2D 00 64 FD | 	ret
0fba8                 | 
0fba8                 | ' 
0fba8                 | ' 
0fba8                 | ' sub do_inkey
0fba8                 | _do_inkey
0fba8     02 4A 05 F6 | 	mov	COUNT_, #2
0fbac     A8 00 A0 FD | 	call	#pushregs_
0fbb0     0C F0 07 F1 | 	add	ptra, #12
0fbb4     48 E7 B0 FD | 	call	#_usbnew_spin2_get_key
0fbb8     45 00 00 FF 
0fbbc     A4 E4 05 F1 | 	add	objptr, ##35492
0fbc0     F2 FA 61 FC | 	wrlong	result1, objptr
0fbc4                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
0fbc4     45 00 00 FF 
0fbc8     A4 E4 85 F1 | 	sub	objptr, ##35492
0fbcc     00 FA 0D F2 | 	cmp	result1, #0 wz
0fbd0     94 00 90 AD |  if_e	jmp	#LR__1261
0fbd4     45 00 00 FF 
0fbd8     A4 E4 05 F1 | 	add	objptr, ##35492
0fbdc     F2 1C 02 FB | 	rdlong	arg06, objptr
0fbe0     45 00 00 FF 
0fbe4     A4 E4 85 F1 | 	sub	objptr, ##35492
0fbe8     00 00 40 FF 
0fbec     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
0fbf0     45 00 00 CF 
0fbf4     A4 E4 05 C1 |  if_b	add	objptr, ##35492
0fbf8     F2 1E 02 CB |  if_b	rdlong	local01, objptr
0fbfc     45 00 00 CF 
0fc00     A4 E4 85 C1 |  if_b	sub	objptr, ##35492
0fc04     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
0fc08     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
0fc0c     58 00 90 3D |  if_ae	jmp	#LR__1261
0fc10                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
0fc10     58 00 00 FF 
0fc14     20 E5 05 F1 | 	add	objptr, ##45344
0fc18     F2 1C 02 FB | 	rdlong	arg06, objptr
0fc1c     58 00 00 FF 
0fc20     20 E5 85 F1 | 	sub	objptr, ##45344
0fc24     01 1C 0E F2 | 	cmp	arg06, #1 wz
0fc28     3C 00 90 5D |  if_ne	jmp	#LR__1260
0fc2c     59 00 00 FF 
0fc30     C4 E5 05 F1 | 	add	objptr, ##46020
0fc34     F2 14 02 FB | 	rdlong	arg02, objptr
0fc38     04 E4 85 F1 | 	sub	objptr, #4
0fc3c     F2 1A 02 FB | 	rdlong	arg05, objptr
0fc40     07 12 06 F6 | 	mov	arg01, #7
0fc44     56 00 00 FF 
0fc48     44 16 06 F6 | 	mov	arg03, ##44100
0fc4c     0C 18 C6 F9 | 	decod	arg04, #12
0fc50     01 1C 66 F6 | 	neg	arg06, #1
0fc54     4E 00 00 FF 
0fc58     F4 E4 85 F1 | 	sub	objptr, ##40180
0fc5c     44 EA B0 FD | 	call	#_audio096_spin2_play
0fc60     0B 00 00 FF 
0fc64     CC E4 85 F1 | 	sub	objptr, ##5836
0fc68                 | LR__1260
0fc68                 | LR__1261
0fc68                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
0fc68     45 00 00 FF 
0fc6c     A4 E4 05 F1 | 	add	objptr, ##35492
0fc70     F2 1C 0A FB | 	rdlong	arg06, objptr wz
0fc74     45 00 00 FF 
0fc78     A4 E4 85 F1 | 	sub	objptr, ##35492
0fc7c     D4 01 90 AD |  if_e	jmp	#LR__1270
0fc80     45 00 00 FF 
0fc84     A4 E4 05 F1 | 	add	objptr, ##35492
0fc88     F2 1C 02 FB | 	rdlong	arg06, objptr
0fc8c     45 00 00 FF 
0fc90     A4 E4 85 F1 | 	sub	objptr, ##35492
0fc94     00 00 40 FF 
0fc98     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
0fc9c     45 00 00 CF 
0fca0     A4 E4 05 C1 |  if_b	add	objptr, ##35492
0fca4     F2 1E 02 CB |  if_b	rdlong	local01, objptr
0fca8     45 00 00 CF 
0fcac     A4 E4 85 C1 |  if_b	sub	objptr, ##35492
0fcb0     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
0fcb4     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
0fcb8     98 01 90 3D |  if_ae	jmp	#LR__1270
0fcbc                 | '   if leds and 2 = 2 then 
0fcbc     59 00 00 FF 
0fcc0     EC E5 05 F1 | 	add	objptr, ##46060
0fcc4     F2 1E 0A FB | 	rdlong	local01, objptr wz
0fcc8     59 00 00 FF 
0fccc     EC E5 85 F1 | 	sub	objptr, ##46060
0fcd0     58 01 90 AD |  if_e	jmp	#LR__1269
0fcd4                 | '     if key>96 andalso key<123 then
0fcd4     45 00 00 FF 
0fcd8     A4 E4 05 F1 | 	add	objptr, ##35492
0fcdc     F2 1E 02 FB | 	rdlong	local01, objptr
0fce0     45 00 00 FF 
0fce4     A4 E4 85 F1 | 	sub	objptr, ##35492
0fce8     61 1E 16 F2 | 	cmp	local01, #97 wc
0fcec     3C 00 90 CD |  if_b	jmp	#LR__1262
0fcf0     45 00 00 FF 
0fcf4     A4 E4 05 F1 | 	add	objptr, ##35492
0fcf8     F2 1E 02 FB | 	rdlong	local01, objptr
0fcfc     45 00 00 FF 
0fd00     A4 E4 85 F1 | 	sub	objptr, ##35492
0fd04     7B 1E 16 F2 | 	cmp	local01, #123 wc
0fd08     20 00 90 3D |  if_ae	jmp	#LR__1262
0fd0c     45 00 00 FF 
0fd10     A4 E4 05 F1 | 	add	objptr, ##35492
0fd14     F2 1E 02 FB | 	rdlong	local01, objptr
0fd18     20 1E 86 F1 | 	sub	local01, #32
0fd1c     F2 1E 62 FC | 	wrlong	local01, objptr
0fd20     45 00 00 FF 
0fd24     A4 E4 85 F1 | 	sub	objptr, ##35492
0fd28     00 01 90 FD | 	jmp	#LR__1268
0fd2c                 | LR__1262
0fd2c     45 00 00 FF 
0fd30     A4 E4 05 F1 | 	add	objptr, ##35492
0fd34     F2 1E 02 FB | 	rdlong	local01, objptr
0fd38     45 00 00 FF 
0fd3c     A4 E4 85 F1 | 	sub	objptr, ##35492
0fd40     41 1E 16 F2 | 	cmp	local01, #65 wc
0fd44     3C 00 90 CD |  if_b	jmp	#LR__1263
0fd48     45 00 00 FF 
0fd4c     A4 E4 05 F1 | 	add	objptr, ##35492
0fd50     F2 1E 02 FB | 	rdlong	local01, objptr
0fd54     45 00 00 FF 
0fd58     A4 E4 85 F1 | 	sub	objptr, ##35492
0fd5c     5B 1E 16 F2 | 	cmp	local01, #91 wc
0fd60     20 00 90 3D |  if_ae	jmp	#LR__1263
0fd64     45 00 00 FF 
0fd68     A4 E4 05 F1 | 	add	objptr, ##35492
0fd6c     F2 1E 02 FB | 	rdlong	local01, objptr
0fd70     20 1E 06 F1 | 	add	local01, #32
0fd74     F2 1E 62 FC | 	wrlong	local01, objptr
0fd78     45 00 00 FF 
0fd7c     A4 E4 85 F1 | 	sub	objptr, ##35492
0fd80     A8 00 90 FD | 	jmp	#LR__1267
0fd84                 | LR__1263
0fd84     45 00 00 FF 
0fd88     A4 E4 05 F1 | 	add	objptr, ##35492
0fd8c     F2 1E 02 FB | 	rdlong	local01, objptr
0fd90     45 00 00 FF 
0fd94     A4 E4 85 F1 | 	sub	objptr, ##35492
0fd98     17 1E 16 F2 | 	cmp	local01, #23 wc
0fd9c     3C 00 90 CD |  if_b	jmp	#LR__1264
0fda0     45 00 00 FF 
0fda4     A4 E4 05 F1 | 	add	objptr, ##35492
0fda8     F2 1E 02 FB | 	rdlong	local01, objptr
0fdac     45 00 00 FF 
0fdb0     A4 E4 85 F1 | 	sub	objptr, ##35492
0fdb4     20 1E 16 F2 | 	cmp	local01, #32 wc
0fdb8     20 00 90 3D |  if_ae	jmp	#LR__1264
0fdbc     45 00 00 FF 
0fdc0     A4 E4 05 F1 | 	add	objptr, ##35492
0fdc4     F2 1E 02 FB | 	rdlong	local01, objptr
0fdc8     09 1E 86 F1 | 	sub	local01, #9
0fdcc     F2 1E 62 FC | 	wrlong	local01, objptr
0fdd0     45 00 00 FF 
0fdd4     A4 E4 85 F1 | 	sub	objptr, ##35492
0fdd8     50 00 90 FD | 	jmp	#LR__1266
0fddc                 | LR__1264
0fddc     45 00 00 FF 
0fde0     A4 E4 05 F1 | 	add	objptr, ##35492
0fde4     F2 20 02 FB | 	rdlong	local02, objptr
0fde8     45 00 00 FF 
0fdec     A4 E4 85 F1 | 	sub	objptr, ##35492
0fdf0     0E 20 16 F2 | 	cmp	local02, #14 wc
0fdf4     34 00 90 CD |  if_b	jmp	#LR__1265
0fdf8     45 00 00 FF 
0fdfc     A4 E4 05 F1 | 	add	objptr, ##35492
0fe00     F2 1E 02 FB | 	rdlong	local01, objptr
0fe04     45 00 00 FF 
0fe08     A4 E4 85 F1 | 	sub	objptr, ##35492
0fe0c     17 1E 16 F2 | 	cmp	local01, #23 wc
0fe10     59 00 00 CF 
0fe14     FC E5 05 C1 |  if_b	add	objptr, ##46076
0fe18     F2 20 02 CB |  if_b	rdlong	local02, objptr
0fe1c     27 20 06 C1 |  if_b	add	local02, #39
0fe20     F2 20 62 CC |  if_b	wrlong	local02, objptr
0fe24     59 00 00 CF 
0fe28     FC E5 85 C1 |  if_b	sub	objptr, ##46076
0fe2c                 | LR__1265
0fe2c                 | LR__1266
0fe2c                 | LR__1267
0fe2c                 | LR__1268
0fe2c                 | LR__1269
0fe2c     45 00 00 FF 
0fe30     A4 E4 05 F1 | 	add	objptr, ##35492
0fe34     F2 12 02 FB | 	rdlong	arg01, objptr
0fe38     45 00 00 FF 
0fe3c     A4 E4 85 F1 | 	sub	objptr, ##35492
0fe40     6C AB B0 FD | 	call	#_scantochar
0fe44     FD 12 02 F6 | 	mov	arg01, result1
0fe48     9C 0E B1 FD | 	call	#__system__Chr_S
0fe4c     A7 FA 61 FC | 	wrlong	result1, fp
0fe50     0C 00 90 FD | 	jmp	#LR__1271
0fe54                 | LR__1270
0fe54     73 01 00 FF 
0fe58     37 21 06 F6 | 	mov	local02, ##@LR__5150
0fe5c     A7 20 62 FC | 	wrlong	local02, fp
0fe60                 | LR__1271
0fe60     08 4E 05 F1 | 	add	fp, #8
0fe64     A7 3E 68 FC | 	wrlong	#31, fp
0fe68     08 4E 85 F1 | 	sub	fp, #8
0fe6c     A7 12 02 F6 | 	mov	arg01, fp
0fe70     9C AA BF FD | 	call	#_push
0fe74     A7 F0 03 F6 | 	mov	ptra, fp
0fe78     B2 00 A0 FD | 	call	#popregs_
0fe7c                 | _do_inkey_ret
0fe7c     2D 00 64 FD | 	ret
0fe80                 | 
0fe80                 | '  
0fe80                 | ' '------------------------ Operators 
0fe80                 | ' 
0fe80                 | ' sub do_plus 
0fe80                 | _do_plus
0fe80     05 4A 05 F6 | 	mov	COUNT_, #5
0fe84     A8 00 A0 FD | 	call	#pushregs_
0fe88     18 F0 07 F1 | 	add	ptra, #24
0fe8c     E8 A9 BF FD | 	call	#_pop
0fe90     FD 1E 02 F6 | 	mov	local01, result1
0fe94     FE 20 02 F6 | 	mov	local02, result2
0fe98     FF 22 02 F6 | 	mov	local03, result3
0fe9c     0C 4E 05 F1 | 	add	fp, #12
0fea0     A7 1E 62 FC | 	wrlong	local01, fp
0fea4     04 4E 05 F1 | 	add	fp, #4
0fea8     A7 20 62 FC | 	wrlong	local02, fp
0feac     04 4E 05 F1 | 	add	fp, #4
0feb0     A7 22 62 FC | 	wrlong	local03, fp
0feb4     14 4E 85 F1 | 	sub	fp, #20
0feb8     BC A9 BF FD | 	call	#_pop
0febc     FF 22 02 F6 | 	mov	local03, result3
0fec0     A7 FA 61 FC | 	wrlong	result1, fp
0fec4     04 4E 05 F1 | 	add	fp, #4
0fec8     A7 FC 61 FC | 	wrlong	result2, fp
0fecc     04 4E 05 F1 | 	add	fp, #4
0fed0     A7 22 62 FC | 	wrlong	local03, fp
0fed4                 | ' 
0fed4                 | ' t2=pop()
0fed4                 | ' t1=pop()
0fed4                 | ' 
0fed4                 | ' 
0fed4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0fed4     08 4E 85 F1 | 	sub	fp, #8
0fed8     1D 22 0E F2 | 	cmp	local03, #29 wz
0fedc     14 4E 05 A1 |  if_e	add	fp, #20
0fee0     A7 24 02 AB |  if_e	rdlong	local04, fp
0fee4     14 4E 85 A1 |  if_e	sub	fp, #20
0fee8     12 23 02 A6 |  if_e	mov	local03, local04
0feec     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0fef0     1C 00 90 5D |  if_ne	jmp	#LR__1280
0fef4     A7 1E 02 FB | 	rdlong	local01, fp
0fef8     0C 4E 05 F1 | 	add	fp, #12
0fefc     A7 20 02 FB | 	rdlong	local02, fp
0ff00     0C 4E 85 F1 | 	sub	fp, #12
0ff04     10 1F 02 F1 | 	add	local01, local02
0ff08     A7 1E 62 FC | 	wrlong	local01, fp
0ff0c     48 04 90 FD | 	jmp	#LR__1295
0ff10                 | LR__1280
0ff10                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0ff10     08 4E 05 F1 | 	add	fp, #8
0ff14     A7 1E 02 FB | 	rdlong	local01, fp
0ff18     08 4E 85 F1 | 	sub	fp, #8
0ff1c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ff20     14 4E 05 A1 |  if_e	add	fp, #20
0ff24     A7 24 02 AB |  if_e	rdlong	local04, fp
0ff28     14 4E 85 A1 |  if_e	sub	fp, #20
0ff2c     12 23 02 A6 |  if_e	mov	local03, local04
0ff30     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ff34     28 00 90 5D |  if_ne	jmp	#LR__1281
0ff38     A7 1E 02 FB | 	rdlong	local01, fp
0ff3c     0C 4E 05 F1 | 	add	fp, #12
0ff40     A7 20 02 FB | 	rdlong	local02, fp
0ff44     0C 4E 85 F1 | 	sub	fp, #12
0ff48     10 1F 02 F1 | 	add	local01, local02
0ff4c     A7 1E 62 FC | 	wrlong	local01, fp
0ff50     08 4E 05 F1 | 	add	fp, #8
0ff54     A7 38 68 FC | 	wrlong	#28, fp
0ff58     08 4E 85 F1 | 	sub	fp, #8
0ff5c     F8 03 90 FD | 	jmp	#LR__1295
0ff60                 | LR__1281
0ff60                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0ff60     08 4E 05 F1 | 	add	fp, #8
0ff64     A7 1E 02 FB | 	rdlong	local01, fp
0ff68     08 4E 85 F1 | 	sub	fp, #8
0ff6c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ff70     14 4E 05 A1 |  if_e	add	fp, #20
0ff74     A7 24 02 AB |  if_e	rdlong	local04, fp
0ff78     14 4E 85 A1 |  if_e	sub	fp, #20
0ff7c     12 23 02 A6 |  if_e	mov	local03, local04
0ff80     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0ff84     30 00 90 5D |  if_ne	jmp	#LR__1282
0ff88     A7 12 02 FB | 	rdlong	arg01, fp
0ff8c     C8 12 B1 FD | 	call	#__system___float_fromuns
0ff90     FD 12 02 F6 | 	mov	arg01, result1
0ff94     0C 4E 05 F1 | 	add	fp, #12
0ff98     A7 14 02 FB | 	rdlong	arg02, fp
0ff9c     0C 4E 85 F1 | 	sub	fp, #12
0ffa0     E8 12 B1 FD | 	call	#__system___float_add
0ffa4     A7 FA 61 FC | 	wrlong	result1, fp
0ffa8     08 4E 05 F1 | 	add	fp, #8
0ffac     A7 3C 68 FC | 	wrlong	#30, fp
0ffb0     08 4E 85 F1 | 	sub	fp, #8
0ffb4     A0 03 90 FD | 	jmp	#LR__1295
0ffb8                 | LR__1282
0ffb8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0ffb8     08 4E 05 F1 | 	add	fp, #8
0ffbc     A7 1E 02 FB | 	rdlong	local01, fp
0ffc0     08 4E 85 F1 | 	sub	fp, #8
0ffc4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ffc8     14 4E 05 A1 |  if_e	add	fp, #20
0ffcc     A7 24 02 AB |  if_e	rdlong	local04, fp
0ffd0     14 4E 85 A1 |  if_e	sub	fp, #20
0ffd4     12 23 02 A6 |  if_e	mov	local03, local04
0ffd8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ffdc     1C 00 90 5D |  if_ne	jmp	#LR__1283
0ffe0     A7 1E 02 FB | 	rdlong	local01, fp
0ffe4     0C 4E 05 F1 | 	add	fp, #12
0ffe8     A7 20 02 FB | 	rdlong	local02, fp
0ffec     0C 4E 85 F1 | 	sub	fp, #12
0fff0     10 1F 02 F1 | 	add	local01, local02
0fff4     A7 1E 62 FC | 	wrlong	local01, fp
0fff8     5C 03 90 FD | 	jmp	#LR__1295
0fffc                 | LR__1283
0fffc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0fffc     08 4E 05 F1 | 	add	fp, #8
10000     A7 1E 02 FB | 	rdlong	local01, fp
10004     08 4E 85 F1 | 	sub	fp, #8
10008     1C 1E 0E F2 | 	cmp	local01, #28 wz
1000c     14 4E 05 A1 |  if_e	add	fp, #20
10010     A7 24 02 AB |  if_e	rdlong	local04, fp
10014     14 4E 85 A1 |  if_e	sub	fp, #20
10018     12 23 02 A6 |  if_e	mov	local03, local04
1001c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10020     1C 00 90 5D |  if_ne	jmp	#LR__1284
10024     A7 1E 02 FB | 	rdlong	local01, fp
10028     0C 4E 05 F1 | 	add	fp, #12
1002c     A7 20 02 FB | 	rdlong	local02, fp
10030     0C 4E 85 F1 | 	sub	fp, #12
10034     10 1F 02 F1 | 	add	local01, local02
10038     A7 1E 62 FC | 	wrlong	local01, fp
1003c     18 03 90 FD | 	jmp	#LR__1295
10040                 | LR__1284
10040                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
10040     08 4E 05 F1 | 	add	fp, #8
10044     A7 1E 02 FB | 	rdlong	local01, fp
10048     08 4E 85 F1 | 	sub	fp, #8
1004c     1C 1E 0E F2 | 	cmp	local01, #28 wz
10050     14 4E 05 A1 |  if_e	add	fp, #20
10054     A7 24 02 AB |  if_e	rdlong	local04, fp
10058     14 4E 85 A1 |  if_e	sub	fp, #20
1005c     12 23 02 A6 |  if_e	mov	local03, local04
10060     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10064     40 00 90 5D |  if_ne	jmp	#LR__1285
10068     A7 12 02 FB | 	rdlong	arg01, fp
1006c     09 13 52 F6 | 	abs	arg01, arg01 wc
10070     1F 26 C6 C9 |  if_b	decod	local05, #31
10074     00 26 06 36 |  if_ae	mov	local05, #0
10078     DC 11 B1 FD | 	call	#__system___float_fromuns
1007c     13 FB 61 F5 | 	xor	result1, local05
10080     FD 12 02 F6 | 	mov	arg01, result1
10084     0C 4E 05 F1 | 	add	fp, #12
10088     A7 14 02 FB | 	rdlong	arg02, fp
1008c     0C 4E 85 F1 | 	sub	fp, #12
10090     F8 11 B1 FD | 	call	#__system___float_add
10094     A7 FA 61 FC | 	wrlong	result1, fp
10098     08 4E 05 F1 | 	add	fp, #8
1009c     A7 3C 68 FC | 	wrlong	#30, fp
100a0     08 4E 85 F1 | 	sub	fp, #8
100a4     B0 02 90 FD | 	jmp	#LR__1295
100a8                 | LR__1285
100a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
100a8     08 4E 05 F1 | 	add	fp, #8
100ac     A7 1E 02 FB | 	rdlong	local01, fp
100b0     08 4E 85 F1 | 	sub	fp, #8
100b4     1E 1E 0E F2 | 	cmp	local01, #30 wz
100b8     14 4E 05 A1 |  if_e	add	fp, #20
100bc     A7 24 02 AB |  if_e	rdlong	local04, fp
100c0     14 4E 85 A1 |  if_e	sub	fp, #20
100c4     12 23 02 A6 |  if_e	mov	local03, local04
100c8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
100cc     28 00 90 5D |  if_ne	jmp	#LR__1286
100d0     A7 1E 02 FB | 	rdlong	local01, fp
100d4     0C 4E 05 F1 | 	add	fp, #12
100d8     A7 12 02 FB | 	rdlong	arg01, fp
100dc     0C 4E 85 F1 | 	sub	fp, #12
100e0     74 11 B1 FD | 	call	#__system___float_fromuns
100e4     FD 14 02 F6 | 	mov	arg02, result1
100e8     0F 13 02 F6 | 	mov	arg01, local01
100ec     9C 11 B1 FD | 	call	#__system___float_add
100f0     A7 FA 61 FC | 	wrlong	result1, fp
100f4     60 02 90 FD | 	jmp	#LR__1295
100f8                 | LR__1286
100f8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
100f8     08 4E 05 F1 | 	add	fp, #8
100fc     A7 1E 02 FB | 	rdlong	local01, fp
10100     08 4E 85 F1 | 	sub	fp, #8
10104     1E 1E 0E F2 | 	cmp	local01, #30 wz
10108     14 4E 05 A1 |  if_e	add	fp, #20
1010c     A7 24 02 AB |  if_e	rdlong	local04, fp
10110     14 4E 85 A1 |  if_e	sub	fp, #20
10114     12 23 02 A6 |  if_e	mov	local03, local04
10118     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1011c     38 00 90 5D |  if_ne	jmp	#LR__1287
10120     A7 1E 02 FB | 	rdlong	local01, fp
10124     0C 4E 05 F1 | 	add	fp, #12
10128     A7 12 02 FB | 	rdlong	arg01, fp
1012c     0C 4E 85 F1 | 	sub	fp, #12
10130     09 13 52 F6 | 	abs	arg01, arg01 wc
10134     1F 26 C6 C9 |  if_b	decod	local05, #31
10138     00 26 06 36 |  if_ae	mov	local05, #0
1013c     18 11 B1 FD | 	call	#__system___float_fromuns
10140     13 FB 61 F5 | 	xor	result1, local05
10144     FD 14 02 F6 | 	mov	arg02, result1
10148     0F 13 02 F6 | 	mov	arg01, local01
1014c     3C 11 B1 FD | 	call	#__system___float_add
10150     A7 FA 61 FC | 	wrlong	result1, fp
10154     00 02 90 FD | 	jmp	#LR__1295
10158                 | LR__1287
10158                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
10158     08 4E 05 F1 | 	add	fp, #8
1015c     A7 1E 02 FB | 	rdlong	local01, fp
10160     08 4E 85 F1 | 	sub	fp, #8
10164     1E 1E 0E F2 | 	cmp	local01, #30 wz
10168     14 4E 05 A1 |  if_e	add	fp, #20
1016c     A7 24 02 AB |  if_e	rdlong	local04, fp
10170     14 4E 85 A1 |  if_e	sub	fp, #20
10174     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
10178     1C 00 90 5D |  if_ne	jmp	#LR__1288
1017c     A7 12 02 FB | 	rdlong	arg01, fp
10180     0C 4E 05 F1 | 	add	fp, #12
10184     A7 14 02 FB | 	rdlong	arg02, fp
10188     0C 4E 85 F1 | 	sub	fp, #12
1018c     FC 10 B1 FD | 	call	#__system___float_add
10190     A7 FA 61 FC | 	wrlong	result1, fp
10194     C0 01 90 FD | 	jmp	#LR__1295
10198                 | LR__1288
10198                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
10198     08 4E 05 F1 | 	add	fp, #8
1019c     A7 1E 02 FB | 	rdlong	local01, fp
101a0     08 4E 85 F1 | 	sub	fp, #8
101a4     1F 1E 0E F2 | 	cmp	local01, #31 wz
101a8     24 00 90 5D |  if_ne	jmp	#LR__1289
101ac     14 4E 05 F1 | 	add	fp, #20
101b0     A7 22 02 FB | 	rdlong	local03, fp
101b4     14 4E 85 F1 | 	sub	fp, #20
101b8     1F 22 0E F2 | 	cmp	local03, #31 wz
101bc     A7 04 68 5C |  if_ne	wrlong	#2, fp
101c0     08 4E 05 51 |  if_ne	add	fp, #8
101c4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
101c8     08 4E 85 51 |  if_ne	sub	fp, #8
101cc     88 01 90 5D |  if_ne	jmp	#LR__1295
101d0                 | LR__1289
101d0                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
101d0     14 4E 05 F1 | 	add	fp, #20
101d4     A7 1E 02 FB | 	rdlong	local01, fp
101d8     14 4E 85 F1 | 	sub	fp, #20
101dc     1F 1E 0E F2 | 	cmp	local01, #31 wz
101e0     24 00 90 5D |  if_ne	jmp	#LR__1290
101e4     08 4E 05 F1 | 	add	fp, #8
101e8     A7 22 02 FB | 	rdlong	local03, fp
101ec     08 4E 85 F1 | 	sub	fp, #8
101f0     1F 22 0E F2 | 	cmp	local03, #31 wz
101f4     A7 04 68 5C |  if_ne	wrlong	#2, fp
101f8     08 4E 05 51 |  if_ne	add	fp, #8
101fc     A7 FE 69 5C |  if_ne	wrlong	#255, fp
10200     08 4E 85 51 |  if_ne	sub	fp, #8
10204     50 01 90 5D |  if_ne	jmp	#LR__1295
10208                 | LR__1290
10208                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
10208     08 4E 05 F1 | 	add	fp, #8
1020c     A7 1E 02 FB | 	rdlong	local01, fp
10210     08 4E 85 F1 | 	sub	fp, #8
10214     1F 1E 0E F2 | 	cmp	local01, #31 wz
10218     14 4E 05 A1 |  if_e	add	fp, #20
1021c     A7 22 02 AB |  if_e	rdlong	local03, fp
10220     14 4E 85 A1 |  if_e	sub	fp, #20
10224     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10228     1C 00 90 5D |  if_ne	jmp	#LR__1291
1022c     A7 12 02 FB | 	rdlong	arg01, fp
10230     0C 4E 05 F1 | 	add	fp, #12
10234     A7 14 02 FB | 	rdlong	arg02, fp
10238     0C 4E 85 F1 | 	sub	fp, #12
1023c     30 E9 B0 FD | 	call	#__system___string_concat
10240     A7 FA 61 FC | 	wrlong	result1, fp
10244     10 01 90 FD | 	jmp	#LR__1295
10248                 | LR__1291
10248                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
10248     08 4E 05 F1 | 	add	fp, #8
1024c     A7 1E 02 FB | 	rdlong	local01, fp
10250     08 4E 85 F1 | 	sub	fp, #8
10254     2B 1E 0E F2 | 	cmp	local01, #43 wz
10258     14 4E 05 A1 |  if_e	add	fp, #20
1025c     A7 22 02 AB |  if_e	rdlong	local03, fp
10260     14 4E 85 A1 |  if_e	sub	fp, #20
10264     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
10268     30 00 90 5D |  if_ne	jmp	#LR__1292
1026c     A7 12 02 FB | 	rdlong	arg01, fp
10270     20 E9 BF FD | 	call	#_convertstring
10274     FD 12 02 F6 | 	mov	arg01, result1
10278     0C 4E 05 F1 | 	add	fp, #12
1027c     A7 14 02 FB | 	rdlong	arg02, fp
10280     0C 4E 85 F1 | 	sub	fp, #12
10284     E8 E8 B0 FD | 	call	#__system___string_concat
10288     A7 FA 61 FC | 	wrlong	result1, fp
1028c     08 4E 05 F1 | 	add	fp, #8
10290     A7 3E 68 FC | 	wrlong	#31, fp
10294     08 4E 85 F1 | 	sub	fp, #8
10298     BC 00 90 FD | 	jmp	#LR__1295
1029c                 | LR__1292
1029c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
1029c     08 4E 05 F1 | 	add	fp, #8
102a0     A7 1E 02 FB | 	rdlong	local01, fp
102a4     08 4E 85 F1 | 	sub	fp, #8
102a8     1F 1E 0E F2 | 	cmp	local01, #31 wz
102ac     14 4E 05 A1 |  if_e	add	fp, #20
102b0     A7 22 02 AB |  if_e	rdlong	local03, fp
102b4     14 4E 85 A1 |  if_e	sub	fp, #20
102b8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
102bc     28 00 90 5D |  if_ne	jmp	#LR__1293
102c0     A7 1E 02 FB | 	rdlong	local01, fp
102c4     0C 4E 05 F1 | 	add	fp, #12
102c8     A7 12 02 FB | 	rdlong	arg01, fp
102cc     0C 4E 85 F1 | 	sub	fp, #12
102d0     C0 E8 BF FD | 	call	#_convertstring
102d4     FD 14 02 F6 | 	mov	arg02, result1
102d8     0F 13 02 F6 | 	mov	arg01, local01
102dc     90 E8 B0 FD | 	call	#__system___string_concat
102e0     A7 FA 61 FC | 	wrlong	result1, fp
102e4     70 00 90 FD | 	jmp	#LR__1295
102e8                 | LR__1293
102e8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
102e8     08 4E 05 F1 | 	add	fp, #8
102ec     A7 1E 02 FB | 	rdlong	local01, fp
102f0     08 4E 85 F1 | 	sub	fp, #8
102f4     2B 1E 0E F2 | 	cmp	local01, #43 wz
102f8     14 4E 05 A1 |  if_e	add	fp, #20
102fc     A7 22 02 AB |  if_e	rdlong	local03, fp
10300     14 4E 85 A1 |  if_e	sub	fp, #20
10304     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
10308     3C 00 90 5D |  if_ne	jmp	#LR__1294
1030c     A7 12 02 FB | 	rdlong	arg01, fp
10310     80 E8 BF FD | 	call	#_convertstring
10314     FD 1E 02 F6 | 	mov	local01, result1
10318     0C 4E 05 F1 | 	add	fp, #12
1031c     A7 12 02 FB | 	rdlong	arg01, fp
10320     0C 4E 85 F1 | 	sub	fp, #12
10324     6C E8 BF FD | 	call	#_convertstring
10328     FD 14 02 F6 | 	mov	arg02, result1
1032c     0F 13 02 F6 | 	mov	arg01, local01
10330     3C E8 B0 FD | 	call	#__system___string_concat
10334     A7 FA 61 FC | 	wrlong	result1, fp
10338     08 4E 05 F1 | 	add	fp, #8
1033c     A7 3E 68 FC | 	wrlong	#31, fp
10340     08 4E 85 F1 | 	sub	fp, #8
10344     10 00 90 FD | 	jmp	#LR__1295
10348                 | LR__1294
10348     A7 08 68 FC | 	wrlong	#4, fp
1034c     08 4E 05 F1 | 	add	fp, #8
10350     A7 FE 69 FC | 	wrlong	#255, fp
10354     08 4E 85 F1 | 	sub	fp, #8
10358                 | LR__1295
10358     A7 12 02 F6 | 	mov	arg01, fp
1035c     B0 A5 BF FD | 	call	#_push
10360     A7 F0 03 F6 | 	mov	ptra, fp
10364     B2 00 A0 FD | 	call	#popregs_
10368                 | _do_plus_ret
10368     2D 00 64 FD | 	ret
1036c                 | 
1036c                 | ' 
1036c                 | ' sub do_minus
1036c                 | _do_minus
1036c     05 4A 05 F6 | 	mov	COUNT_, #5
10370     A8 00 A0 FD | 	call	#pushregs_
10374     18 F0 07 F1 | 	add	ptra, #24
10378     FC A4 BF FD | 	call	#_pop
1037c     FD 1E 02 F6 | 	mov	local01, result1
10380     FE 20 02 F6 | 	mov	local02, result2
10384     FF 22 02 F6 | 	mov	local03, result3
10388     0C 4E 05 F1 | 	add	fp, #12
1038c     A7 1E 62 FC | 	wrlong	local01, fp
10390     04 4E 05 F1 | 	add	fp, #4
10394     A7 20 62 FC | 	wrlong	local02, fp
10398     04 4E 05 F1 | 	add	fp, #4
1039c     A7 22 62 FC | 	wrlong	local03, fp
103a0     14 4E 85 F1 | 	sub	fp, #20
103a4     D0 A4 BF FD | 	call	#_pop
103a8     FF 22 02 F6 | 	mov	local03, result3
103ac     A7 FA 61 FC | 	wrlong	result1, fp
103b0     04 4E 05 F1 | 	add	fp, #4
103b4     A7 FC 61 FC | 	wrlong	result2, fp
103b8     04 4E 05 F1 | 	add	fp, #4
103bc     A7 22 62 FC | 	wrlong	local03, fp
103c0                 | ' 
103c0                 | ' t2=pop()
103c0                 | ' t1=pop()
103c0                 | ' 
103c0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
103c0     08 4E 85 F1 | 	sub	fp, #8
103c4     1D 22 0E F2 | 	cmp	local03, #29 wz
103c8     14 4E 05 A1 |  if_e	add	fp, #20
103cc     A7 24 02 AB |  if_e	rdlong	local04, fp
103d0     14 4E 85 A1 |  if_e	sub	fp, #20
103d4     12 23 02 A6 |  if_e	mov	local03, local04
103d8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
103dc     5C 00 90 5D |  if_ne	jmp	#LR__1301
103e0                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
103e0     0C 4E 05 F1 | 	add	fp, #12
103e4     A7 1E 02 FB | 	rdlong	local01, fp
103e8     0C 4E 85 F1 | 	sub	fp, #12
103ec     A7 22 02 FB | 	rdlong	local03, fp
103f0     11 1F 12 F2 | 	cmp	local01, local03 wc
103f4     1C 00 90 3D |  if_ae	jmp	#LR__1300
103f8     A7 1E 02 FB | 	rdlong	local01, fp
103fc     0C 4E 05 F1 | 	add	fp, #12
10400     A7 20 02 FB | 	rdlong	local02, fp
10404     0C 4E 85 F1 | 	sub	fp, #12
10408     10 1F 82 F1 | 	sub	local01, local02
1040c     A7 1E 62 FC | 	wrlong	local01, fp
10410     F4 02 90 FD | 	jmp	#LR__1310
10414                 | LR__1300
10414     A7 1E 02 FB | 	rdlong	local01, fp
10418     0C 4E 05 F1 | 	add	fp, #12
1041c     A7 20 02 FB | 	rdlong	local02, fp
10420     0C 4E 85 F1 | 	sub	fp, #12
10424     10 1F 82 F1 | 	sub	local01, local02
10428     A7 1E 62 FC | 	wrlong	local01, fp
1042c     08 4E 05 F1 | 	add	fp, #8
10430     A7 38 68 FC | 	wrlong	#28, fp
10434     08 4E 85 F1 | 	sub	fp, #8
10438     CC 02 90 FD | 	jmp	#LR__1310
1043c                 | LR__1301
1043c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1043c     08 4E 05 F1 | 	add	fp, #8
10440     A7 1E 02 FB | 	rdlong	local01, fp
10444     08 4E 85 F1 | 	sub	fp, #8
10448     1D 1E 0E F2 | 	cmp	local01, #29 wz
1044c     14 4E 05 A1 |  if_e	add	fp, #20
10450     A7 24 02 AB |  if_e	rdlong	local04, fp
10454     14 4E 85 A1 |  if_e	sub	fp, #20
10458     12 23 02 A6 |  if_e	mov	local03, local04
1045c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10460     28 00 90 5D |  if_ne	jmp	#LR__1302
10464     A7 1E 02 FB | 	rdlong	local01, fp
10468     0C 4E 05 F1 | 	add	fp, #12
1046c     A7 20 02 FB | 	rdlong	local02, fp
10470     0C 4E 85 F1 | 	sub	fp, #12
10474     10 1F 82 F1 | 	sub	local01, local02
10478     A7 1E 62 FC | 	wrlong	local01, fp
1047c     08 4E 05 F1 | 	add	fp, #8
10480     A7 38 68 FC | 	wrlong	#28, fp
10484     08 4E 85 F1 | 	sub	fp, #8
10488     7C 02 90 FD | 	jmp	#LR__1310
1048c                 | LR__1302
1048c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1048c     08 4E 05 F1 | 	add	fp, #8
10490     A7 1E 02 FB | 	rdlong	local01, fp
10494     08 4E 85 F1 | 	sub	fp, #8
10498     1D 1E 0E F2 | 	cmp	local01, #29 wz
1049c     14 4E 05 A1 |  if_e	add	fp, #20
104a0     A7 24 02 AB |  if_e	rdlong	local04, fp
104a4     14 4E 85 A1 |  if_e	sub	fp, #20
104a8     12 23 02 A6 |  if_e	mov	local03, local04
104ac     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
104b0     34 00 90 5D |  if_ne	jmp	#LR__1303
104b4     A7 12 02 FB | 	rdlong	arg01, fp
104b8     9C 0D B1 FD | 	call	#__system___float_fromuns
104bc     FD 12 02 F6 | 	mov	arg01, result1
104c0     0C 4E 05 F1 | 	add	fp, #12
104c4     A7 14 02 FB | 	rdlong	arg02, fp
104c8     0C 4E 85 F1 | 	sub	fp, #12
104cc     1F 14 E6 F4 | 	bitnot	arg02, #31
104d0     B8 0D B1 FD | 	call	#__system___float_add
104d4     A7 FA 61 FC | 	wrlong	result1, fp
104d8     08 4E 05 F1 | 	add	fp, #8
104dc     A7 3C 68 FC | 	wrlong	#30, fp
104e0     08 4E 85 F1 | 	sub	fp, #8
104e4     20 02 90 FD | 	jmp	#LR__1310
104e8                 | LR__1303
104e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
104e8     08 4E 05 F1 | 	add	fp, #8
104ec     A7 1E 02 FB | 	rdlong	local01, fp
104f0     08 4E 85 F1 | 	sub	fp, #8
104f4     1C 1E 0E F2 | 	cmp	local01, #28 wz
104f8     14 4E 05 A1 |  if_e	add	fp, #20
104fc     A7 24 02 AB |  if_e	rdlong	local04, fp
10500     14 4E 85 A1 |  if_e	sub	fp, #20
10504     12 23 02 A6 |  if_e	mov	local03, local04
10508     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1050c     1C 00 90 5D |  if_ne	jmp	#LR__1304
10510     A7 1E 02 FB | 	rdlong	local01, fp
10514     0C 4E 05 F1 | 	add	fp, #12
10518     A7 20 02 FB | 	rdlong	local02, fp
1051c     0C 4E 85 F1 | 	sub	fp, #12
10520     10 1F 82 F1 | 	sub	local01, local02
10524     A7 1E 62 FC | 	wrlong	local01, fp
10528     DC 01 90 FD | 	jmp	#LR__1310
1052c                 | LR__1304
1052c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1052c     08 4E 05 F1 | 	add	fp, #8
10530     A7 1E 02 FB | 	rdlong	local01, fp
10534     08 4E 85 F1 | 	sub	fp, #8
10538     1C 1E 0E F2 | 	cmp	local01, #28 wz
1053c     14 4E 05 A1 |  if_e	add	fp, #20
10540     A7 24 02 AB |  if_e	rdlong	local04, fp
10544     14 4E 85 A1 |  if_e	sub	fp, #20
10548     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
1054c     1C 00 90 5D |  if_ne	jmp	#LR__1305
10550     A7 1E 02 FB | 	rdlong	local01, fp
10554     0C 4E 05 F1 | 	add	fp, #12
10558     A7 20 02 FB | 	rdlong	local02, fp
1055c     0C 4E 85 F1 | 	sub	fp, #12
10560     10 1F 82 F1 | 	sub	local01, local02
10564     A7 1E 62 FC | 	wrlong	local01, fp
10568     9C 01 90 FD | 	jmp	#LR__1310
1056c                 | LR__1305
1056c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1056c     08 4E 05 F1 | 	add	fp, #8
10570     A7 1E 02 FB | 	rdlong	local01, fp
10574     08 4E 85 F1 | 	sub	fp, #8
10578     1C 1E 0E F2 | 	cmp	local01, #28 wz
1057c     14 4E 05 A1 |  if_e	add	fp, #20
10580     A7 22 02 AB |  if_e	rdlong	local03, fp
10584     14 4E 85 A1 |  if_e	sub	fp, #20
10588     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1058c     44 00 90 5D |  if_ne	jmp	#LR__1306
10590     A7 12 02 FB | 	rdlong	arg01, fp
10594     09 13 52 F6 | 	abs	arg01, arg01 wc
10598     1F 26 C6 C9 |  if_b	decod	local05, #31
1059c     00 26 06 36 |  if_ae	mov	local05, #0
105a0     B4 0C B1 FD | 	call	#__system___float_fromuns
105a4     13 FB 61 F5 | 	xor	result1, local05
105a8     FD 12 02 F6 | 	mov	arg01, result1
105ac     0C 4E 05 F1 | 	add	fp, #12
105b0     A7 14 02 FB | 	rdlong	arg02, fp
105b4     0C 4E 85 F1 | 	sub	fp, #12
105b8     1F 14 E6 F4 | 	bitnot	arg02, #31
105bc     CC 0C B1 FD | 	call	#__system___float_add
105c0     A7 FA 61 FC | 	wrlong	result1, fp
105c4     08 4E 05 F1 | 	add	fp, #8
105c8     A7 3C 68 FC | 	wrlong	#30, fp
105cc     08 4E 85 F1 | 	sub	fp, #8
105d0     34 01 90 FD | 	jmp	#LR__1310
105d4                 | LR__1306
105d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
105d4     08 4E 05 F1 | 	add	fp, #8
105d8     A7 1E 02 FB | 	rdlong	local01, fp
105dc     08 4E 85 F1 | 	sub	fp, #8
105e0     1E 1E 0E F2 | 	cmp	local01, #30 wz
105e4     14 4E 05 A1 |  if_e	add	fp, #20
105e8     A7 22 02 AB |  if_e	rdlong	local03, fp
105ec     14 4E 85 A1 |  if_e	sub	fp, #20
105f0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
105f4     2C 00 90 5D |  if_ne	jmp	#LR__1307
105f8     A7 1E 02 FB | 	rdlong	local01, fp
105fc     0C 4E 05 F1 | 	add	fp, #12
10600     A7 12 02 FB | 	rdlong	arg01, fp
10604     0C 4E 85 F1 | 	sub	fp, #12
10608     4C 0C B1 FD | 	call	#__system___float_fromuns
1060c     FD 14 02 F6 | 	mov	arg02, result1
10610     0F 13 02 F6 | 	mov	arg01, local01
10614     1F 14 E6 F4 | 	bitnot	arg02, #31
10618     70 0C B1 FD | 	call	#__system___float_add
1061c     A7 FA 61 FC | 	wrlong	result1, fp
10620     E4 00 90 FD | 	jmp	#LR__1310
10624                 | LR__1307
10624                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
10624     08 4E 05 F1 | 	add	fp, #8
10628     A7 1E 02 FB | 	rdlong	local01, fp
1062c     08 4E 85 F1 | 	sub	fp, #8
10630     1E 1E 0E F2 | 	cmp	local01, #30 wz
10634     14 4E 05 A1 |  if_e	add	fp, #20
10638     A7 22 02 AB |  if_e	rdlong	local03, fp
1063c     14 4E 85 A1 |  if_e	sub	fp, #20
10640     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10644     3C 00 90 5D |  if_ne	jmp	#LR__1308
10648     A7 1E 02 FB | 	rdlong	local01, fp
1064c     0C 4E 05 F1 | 	add	fp, #12
10650     A7 12 02 FB | 	rdlong	arg01, fp
10654     0C 4E 85 F1 | 	sub	fp, #12
10658     09 13 52 F6 | 	abs	arg01, arg01 wc
1065c     1F 26 C6 C9 |  if_b	decod	local05, #31
10660     00 26 06 36 |  if_ae	mov	local05, #0
10664     F0 0B B1 FD | 	call	#__system___float_fromuns
10668     13 FB 61 F5 | 	xor	result1, local05
1066c     FD 14 02 F6 | 	mov	arg02, result1
10670     0F 13 02 F6 | 	mov	arg01, local01
10674     1F 14 E6 F4 | 	bitnot	arg02, #31
10678     10 0C B1 FD | 	call	#__system___float_add
1067c     A7 FA 61 FC | 	wrlong	result1, fp
10680     84 00 90 FD | 	jmp	#LR__1310
10684                 | LR__1308
10684                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
10684     08 4E 05 F1 | 	add	fp, #8
10688     A7 1E 02 FB | 	rdlong	local01, fp
1068c     08 4E 85 F1 | 	sub	fp, #8
10690     1E 1E 0E F2 | 	cmp	local01, #30 wz
10694     14 4E 05 A1 |  if_e	add	fp, #20
10698     A7 22 02 AB |  if_e	rdlong	local03, fp
1069c     14 4E 85 A1 |  if_e	sub	fp, #20
106a0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
106a4     20 00 90 5D |  if_ne	jmp	#LR__1309
106a8     A7 12 02 FB | 	rdlong	arg01, fp
106ac     0C 4E 05 F1 | 	add	fp, #12
106b0     A7 14 02 FB | 	rdlong	arg02, fp
106b4     0C 4E 85 F1 | 	sub	fp, #12
106b8     1F 14 E6 F4 | 	bitnot	arg02, #31
106bc     CC 0B B1 FD | 	call	#__system___float_add
106c0     A7 FA 61 FC | 	wrlong	result1, fp
106c4     40 00 90 FD | 	jmp	#LR__1310
106c8                 | LR__1309
106c8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
106c8     08 4E 05 F1 | 	add	fp, #8
106cc     A7 1E 02 FB | 	rdlong	local01, fp
106d0     08 4E 85 F1 | 	sub	fp, #8
106d4     1F 1E 0E F2 | 	cmp	local01, #31 wz
106d8     14 4E 05 51 |  if_ne	add	fp, #20
106dc     A7 22 02 5B |  if_ne	rdlong	local03, fp
106e0     14 4E 85 51 |  if_ne	sub	fp, #20
106e4     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
106e8     A7 06 68 AC |  if_e	wrlong	#3, fp
106ec     08 4E 05 A1 |  if_e	add	fp, #8
106f0     A7 FE 69 AC |  if_e	wrlong	#255, fp
106f4     08 4E 85 A1 |  if_e	sub	fp, #8
106f8     A7 0A 68 5C |  if_ne	wrlong	#5, fp
106fc     08 4E 05 51 |  if_ne	add	fp, #8
10700     A7 FE 69 5C |  if_ne	wrlong	#255, fp
10704     08 4E 85 51 |  if_ne	sub	fp, #8
10708                 | LR__1310
10708     A7 12 02 F6 | 	mov	arg01, fp
1070c     00 A2 BF FD | 	call	#_push
10710     A7 F0 03 F6 | 	mov	ptra, fp
10714     B2 00 A0 FD | 	call	#popregs_
10718                 | _do_minus_ret
10718     2D 00 64 FD | 	ret
1071c                 | 
1071c                 | ' 
1071c                 | ' sub do_and 
1071c                 | _do_and
1071c     03 4A 05 F6 | 	mov	COUNT_, #3
10720     A8 00 A0 FD | 	call	#pushregs_
10724     18 F0 07 F1 | 	add	ptra, #24
10728     4C A1 BF FD | 	call	#_pop
1072c     FD 12 02 F6 | 	mov	arg01, result1
10730     FE 1E 02 F6 | 	mov	local01, result2
10734     FF 20 02 F6 | 	mov	local02, result3
10738     0C 4E 05 F1 | 	add	fp, #12
1073c     A7 12 62 FC | 	wrlong	arg01, fp
10740     04 4E 05 F1 | 	add	fp, #4
10744     A7 1E 62 FC | 	wrlong	local01, fp
10748     04 4E 05 F1 | 	add	fp, #4
1074c     A7 20 62 FC | 	wrlong	local02, fp
10750     14 4E 85 F1 | 	sub	fp, #20
10754     20 A1 BF FD | 	call	#_pop
10758     FF 22 02 F6 | 	mov	local03, result3
1075c     A7 FA 61 FC | 	wrlong	result1, fp
10760     04 4E 05 F1 | 	add	fp, #4
10764     A7 FC 61 FC | 	wrlong	result2, fp
10768     04 4E 05 F1 | 	add	fp, #4
1076c     A7 22 62 FC | 	wrlong	local03, fp
10770                 | ' 
10770                 | ' t2=pop()
10770                 | ' t1=pop()
10770                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
10770     08 4E 85 F1 | 	sub	fp, #8
10774     1C 22 0E F2 | 	cmp	local03, #28 wz
10778     A7 22 02 AB |  if_e	rdlong	local03, fp
1077c     A7 22 62 AC |  if_e	wrlong	local03, fp
10780     08 4E 05 A1 |  if_e	add	fp, #8
10784     A7 3A 68 AC |  if_e	wrlong	#29, fp
10788     08 4E 85 A1 |  if_e	sub	fp, #8
1078c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1078c     14 4E 05 F1 | 	add	fp, #20
10790     A7 22 02 FB | 	rdlong	local03, fp
10794     14 4E 85 F1 | 	sub	fp, #20
10798     1C 22 0E F2 | 	cmp	local03, #28 wz
1079c     18 00 90 5D |  if_ne	jmp	#LR__1320
107a0     0C 4E 05 F1 | 	add	fp, #12
107a4     A7 22 02 FB | 	rdlong	local03, fp
107a8     A7 22 62 FC | 	wrlong	local03, fp
107ac     08 4E 05 F1 | 	add	fp, #8
107b0     A7 3A 68 FC | 	wrlong	#29, fp
107b4     14 4E 85 F1 | 	sub	fp, #20
107b8                 | LR__1320
107b8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
107b8     08 4E 05 F1 | 	add	fp, #8
107bc     A7 22 02 FB | 	rdlong	local03, fp
107c0     08 4E 85 F1 | 	sub	fp, #8
107c4     1F 22 0E F2 | 	cmp	local03, #31 wz
107c8     14 4E 05 51 |  if_ne	add	fp, #20
107cc     A7 20 02 5B |  if_ne	rdlong	local02, fp
107d0     14 4E 85 51 |  if_ne	sub	fp, #20
107d4     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
107d8     08 4E 05 51 |  if_ne	add	fp, #8
107dc     A7 22 02 5B |  if_ne	rdlong	local03, fp
107e0     08 4E 85 51 |  if_ne	sub	fp, #8
107e4     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
107e8     14 4E 05 51 |  if_ne	add	fp, #20
107ec     14 4E 85 51 |  if_ne	sub	fp, #20
107f0     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
107f4     A7 0C 68 AC |  if_e	wrlong	#6, fp
107f8     08 4E 05 A1 |  if_e	add	fp, #8
107fc     A7 FE 69 AC |  if_e	wrlong	#255, fp
10800     08 4E 85 A1 |  if_e	sub	fp, #8
10804     18 00 90 AD |  if_e	jmp	#LR__1321
10808     A7 22 02 FB | 	rdlong	local03, fp
1080c     0C 4E 05 F1 | 	add	fp, #12
10810     A7 1E 02 FB | 	rdlong	local01, fp
10814     0C 4E 85 F1 | 	sub	fp, #12
10818     0F 23 02 F5 | 	and	local03, local01
1081c     A7 22 62 FC | 	wrlong	local03, fp
10820                 | LR__1321
10820     A7 12 02 F6 | 	mov	arg01, fp
10824     E8 A0 BF FD | 	call	#_push
10828     A7 F0 03 F6 | 	mov	ptra, fp
1082c     B2 00 A0 FD | 	call	#popregs_
10830                 | _do_and_ret
10830     2D 00 64 FD | 	ret
10834                 | 
10834                 | ' 
10834                 | ' sub do_or 
10834                 | _do_or
10834     03 4A 05 F6 | 	mov	COUNT_, #3
10838     A8 00 A0 FD | 	call	#pushregs_
1083c     18 F0 07 F1 | 	add	ptra, #24
10840     34 A0 BF FD | 	call	#_pop
10844     FD 12 02 F6 | 	mov	arg01, result1
10848     FE 1E 02 F6 | 	mov	local01, result2
1084c     FF 20 02 F6 | 	mov	local02, result3
10850     0C 4E 05 F1 | 	add	fp, #12
10854     A7 12 62 FC | 	wrlong	arg01, fp
10858     04 4E 05 F1 | 	add	fp, #4
1085c     A7 1E 62 FC | 	wrlong	local01, fp
10860     04 4E 05 F1 | 	add	fp, #4
10864     A7 20 62 FC | 	wrlong	local02, fp
10868     14 4E 85 F1 | 	sub	fp, #20
1086c     08 A0 BF FD | 	call	#_pop
10870     FF 22 02 F6 | 	mov	local03, result3
10874     A7 FA 61 FC | 	wrlong	result1, fp
10878     04 4E 05 F1 | 	add	fp, #4
1087c     A7 FC 61 FC | 	wrlong	result2, fp
10880     04 4E 05 F1 | 	add	fp, #4
10884     A7 22 62 FC | 	wrlong	local03, fp
10888                 | ' 
10888                 | ' t2=pop()
10888                 | ' t1=pop()
10888                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
10888     08 4E 85 F1 | 	sub	fp, #8
1088c     1C 22 0E F2 | 	cmp	local03, #28 wz
10890     A7 22 02 AB |  if_e	rdlong	local03, fp
10894     A7 22 62 AC |  if_e	wrlong	local03, fp
10898     08 4E 05 A1 |  if_e	add	fp, #8
1089c     A7 3A 68 AC |  if_e	wrlong	#29, fp
108a0     08 4E 85 A1 |  if_e	sub	fp, #8
108a4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
108a4     14 4E 05 F1 | 	add	fp, #20
108a8     A7 22 02 FB | 	rdlong	local03, fp
108ac     14 4E 85 F1 | 	sub	fp, #20
108b0     1C 22 0E F2 | 	cmp	local03, #28 wz
108b4     18 00 90 5D |  if_ne	jmp	#LR__1330
108b8     0C 4E 05 F1 | 	add	fp, #12
108bc     A7 22 02 FB | 	rdlong	local03, fp
108c0     A7 22 62 FC | 	wrlong	local03, fp
108c4     08 4E 05 F1 | 	add	fp, #8
108c8     A7 3A 68 FC | 	wrlong	#29, fp
108cc     14 4E 85 F1 | 	sub	fp, #20
108d0                 | LR__1330
108d0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
108d0     08 4E 05 F1 | 	add	fp, #8
108d4     A7 22 02 FB | 	rdlong	local03, fp
108d8     08 4E 85 F1 | 	sub	fp, #8
108dc     1F 22 0E F2 | 	cmp	local03, #31 wz
108e0     14 4E 05 51 |  if_ne	add	fp, #20
108e4     A7 20 02 5B |  if_ne	rdlong	local02, fp
108e8     14 4E 85 51 |  if_ne	sub	fp, #20
108ec     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
108f0     08 4E 05 51 |  if_ne	add	fp, #8
108f4     A7 22 02 5B |  if_ne	rdlong	local03, fp
108f8     08 4E 85 51 |  if_ne	sub	fp, #8
108fc     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
10900     14 4E 05 51 |  if_ne	add	fp, #20
10904     14 4E 85 51 |  if_ne	sub	fp, #20
10908     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
1090c     A7 0C 68 AC |  if_e	wrlong	#6, fp
10910     08 4E 05 A1 |  if_e	add	fp, #8
10914     A7 FE 69 AC |  if_e	wrlong	#255, fp
10918     08 4E 85 A1 |  if_e	sub	fp, #8
1091c     18 00 90 AD |  if_e	jmp	#LR__1331
10920     A7 22 02 FB | 	rdlong	local03, fp
10924     0C 4E 05 F1 | 	add	fp, #12
10928     A7 1E 02 FB | 	rdlong	local01, fp
1092c     0C 4E 85 F1 | 	sub	fp, #12
10930     0F 23 42 F5 | 	or	local03, local01
10934     A7 22 62 FC | 	wrlong	local03, fp
10938                 | LR__1331
10938     A7 12 02 F6 | 	mov	arg01, fp
1093c     D0 9F BF FD | 	call	#_push
10940     A7 F0 03 F6 | 	mov	ptra, fp
10944     B2 00 A0 FD | 	call	#popregs_
10948                 | _do_or_ret
10948     2D 00 64 FD | 	ret
1094c                 | 
1094c                 | ' 
1094c                 | ' sub do_mul
1094c                 | _do_mul
1094c     05 4A 05 F6 | 	mov	COUNT_, #5
10950     A8 00 A0 FD | 	call	#pushregs_
10954     18 F0 07 F1 | 	add	ptra, #24
10958     1C 9F BF FD | 	call	#_pop
1095c     FD 1E 02 F6 | 	mov	local01, result1
10960     FE 20 02 F6 | 	mov	local02, result2
10964     FF 22 02 F6 | 	mov	local03, result3
10968     0C 4E 05 F1 | 	add	fp, #12
1096c     A7 1E 62 FC | 	wrlong	local01, fp
10970     04 4E 05 F1 | 	add	fp, #4
10974     A7 20 62 FC | 	wrlong	local02, fp
10978     04 4E 05 F1 | 	add	fp, #4
1097c     A7 22 62 FC | 	wrlong	local03, fp
10980     14 4E 85 F1 | 	sub	fp, #20
10984     F0 9E BF FD | 	call	#_pop
10988     FF 22 02 F6 | 	mov	local03, result3
1098c     A7 FA 61 FC | 	wrlong	result1, fp
10990     04 4E 05 F1 | 	add	fp, #4
10994     A7 FC 61 FC | 	wrlong	result2, fp
10998     04 4E 05 F1 | 	add	fp, #4
1099c     A7 22 62 FC | 	wrlong	local03, fp
109a0                 | ' 
109a0                 | ' t2=pop()
109a0                 | ' t1=pop()
109a0                 | ' 
109a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
109a0     08 4E 85 F1 | 	sub	fp, #8
109a4     1D 22 0E F2 | 	cmp	local03, #29 wz
109a8     14 4E 05 A1 |  if_e	add	fp, #20
109ac     A7 24 02 AB |  if_e	rdlong	local04, fp
109b0     14 4E 85 A1 |  if_e	sub	fp, #20
109b4     12 23 02 A6 |  if_e	mov	local03, local04
109b8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
109bc     20 00 90 5D |  if_ne	jmp	#LR__1340
109c0     A7 20 02 FB | 	rdlong	local02, fp
109c4     0C 4E 05 F1 | 	add	fp, #12
109c8     A7 22 02 FB | 	rdlong	local03, fp
109cc     11 21 02 FD | 	qmul	local02, local03
109d0     0C 4E 85 F1 | 	sub	fp, #12
109d4     18 1E 62 FD | 	getqx	local01
109d8     A7 1E 62 FC | 	wrlong	local01, fp
109dc     C4 02 90 FD | 	jmp	#LR__1349
109e0                 | LR__1340
109e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
109e0     08 4E 05 F1 | 	add	fp, #8
109e4     A7 1E 02 FB | 	rdlong	local01, fp
109e8     08 4E 85 F1 | 	sub	fp, #8
109ec     1D 1E 0E F2 | 	cmp	local01, #29 wz
109f0     14 4E 05 A1 |  if_e	add	fp, #20
109f4     A7 24 02 AB |  if_e	rdlong	local04, fp
109f8     14 4E 85 A1 |  if_e	sub	fp, #20
109fc     12 23 02 A6 |  if_e	mov	local03, local04
10a00     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10a04     2C 00 90 5D |  if_ne	jmp	#LR__1341
10a08     A7 20 02 FB | 	rdlong	local02, fp
10a0c     0C 4E 05 F1 | 	add	fp, #12
10a10     A7 22 02 FB | 	rdlong	local03, fp
10a14     11 21 02 FD | 	qmul	local02, local03
10a18     0C 4E 85 F1 | 	sub	fp, #12
10a1c     18 1E 62 FD | 	getqx	local01
10a20     A7 1E 62 FC | 	wrlong	local01, fp
10a24     08 4E 05 F1 | 	add	fp, #8
10a28     A7 38 68 FC | 	wrlong	#28, fp
10a2c     08 4E 85 F1 | 	sub	fp, #8
10a30     70 02 90 FD | 	jmp	#LR__1349
10a34                 | LR__1341
10a34                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
10a34     08 4E 05 F1 | 	add	fp, #8
10a38     A7 1E 02 FB | 	rdlong	local01, fp
10a3c     08 4E 85 F1 | 	sub	fp, #8
10a40     1D 1E 0E F2 | 	cmp	local01, #29 wz
10a44     14 4E 05 A1 |  if_e	add	fp, #20
10a48     A7 24 02 AB |  if_e	rdlong	local04, fp
10a4c     14 4E 85 A1 |  if_e	sub	fp, #20
10a50     12 23 02 A6 |  if_e	mov	local03, local04
10a54     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10a58     30 00 90 5D |  if_ne	jmp	#LR__1342
10a5c     A7 12 02 FB | 	rdlong	arg01, fp
10a60     F4 07 B1 FD | 	call	#__system___float_fromuns
10a64     FD 12 02 F6 | 	mov	arg01, result1
10a68     0C 4E 05 F1 | 	add	fp, #12
10a6c     A7 14 02 FB | 	rdlong	arg02, fp
10a70     0C 4E 85 F1 | 	sub	fp, #12
10a74     E4 0B B1 FD | 	call	#__system___float_mul
10a78     A7 FA 61 FC | 	wrlong	result1, fp
10a7c     08 4E 05 F1 | 	add	fp, #8
10a80     A7 3C 68 FC | 	wrlong	#30, fp
10a84     08 4E 85 F1 | 	sub	fp, #8
10a88     18 02 90 FD | 	jmp	#LR__1349
10a8c                 | LR__1342
10a8c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
10a8c     08 4E 05 F1 | 	add	fp, #8
10a90     A7 1E 02 FB | 	rdlong	local01, fp
10a94     08 4E 85 F1 | 	sub	fp, #8
10a98     1C 1E 0E F2 | 	cmp	local01, #28 wz
10a9c     14 4E 05 A1 |  if_e	add	fp, #20
10aa0     A7 24 02 AB |  if_e	rdlong	local04, fp
10aa4     14 4E 85 A1 |  if_e	sub	fp, #20
10aa8     12 23 02 A6 |  if_e	mov	local03, local04
10aac     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10ab0     20 00 90 5D |  if_ne	jmp	#LR__1343
10ab4     A7 20 02 FB | 	rdlong	local02, fp
10ab8     0C 4E 05 F1 | 	add	fp, #12
10abc     A7 22 02 FB | 	rdlong	local03, fp
10ac0     11 21 02 FD | 	qmul	local02, local03
10ac4     0C 4E 85 F1 | 	sub	fp, #12
10ac8     18 1E 62 FD | 	getqx	local01
10acc     A7 1E 62 FC | 	wrlong	local01, fp
10ad0     D0 01 90 FD | 	jmp	#LR__1349
10ad4                 | LR__1343
10ad4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
10ad4     08 4E 05 F1 | 	add	fp, #8
10ad8     A7 1E 02 FB | 	rdlong	local01, fp
10adc     08 4E 85 F1 | 	sub	fp, #8
10ae0     1C 1E 0E F2 | 	cmp	local01, #28 wz
10ae4     14 4E 05 A1 |  if_e	add	fp, #20
10ae8     A7 24 02 AB |  if_e	rdlong	local04, fp
10aec     14 4E 85 A1 |  if_e	sub	fp, #20
10af0     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
10af4     20 00 90 5D |  if_ne	jmp	#LR__1344
10af8     A7 20 02 FB | 	rdlong	local02, fp
10afc     0C 4E 05 F1 | 	add	fp, #12
10b00     A7 22 02 FB | 	rdlong	local03, fp
10b04     11 21 02 FD | 	qmul	local02, local03
10b08     0C 4E 85 F1 | 	sub	fp, #12
10b0c     18 1E 62 FD | 	getqx	local01
10b10     A7 1E 62 FC | 	wrlong	local01, fp
10b14     8C 01 90 FD | 	jmp	#LR__1349
10b18                 | LR__1344
10b18                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
10b18     08 4E 05 F1 | 	add	fp, #8
10b1c     A7 1E 02 FB | 	rdlong	local01, fp
10b20     08 4E 85 F1 | 	sub	fp, #8
10b24     1C 1E 0E F2 | 	cmp	local01, #28 wz
10b28     14 4E 05 A1 |  if_e	add	fp, #20
10b2c     A7 22 02 AB |  if_e	rdlong	local03, fp
10b30     14 4E 85 A1 |  if_e	sub	fp, #20
10b34     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10b38     40 00 90 5D |  if_ne	jmp	#LR__1345
10b3c     A7 12 02 FB | 	rdlong	arg01, fp
10b40     09 13 52 F6 | 	abs	arg01, arg01 wc
10b44     1F 26 C6 C9 |  if_b	decod	local05, #31
10b48     00 26 06 36 |  if_ae	mov	local05, #0
10b4c     08 07 B1 FD | 	call	#__system___float_fromuns
10b50     13 FB 61 F5 | 	xor	result1, local05
10b54     FD 12 02 F6 | 	mov	arg01, result1
10b58     0C 4E 05 F1 | 	add	fp, #12
10b5c     A7 14 02 FB | 	rdlong	arg02, fp
10b60     0C 4E 85 F1 | 	sub	fp, #12
10b64     F4 0A B1 FD | 	call	#__system___float_mul
10b68     A7 FA 61 FC | 	wrlong	result1, fp
10b6c     08 4E 05 F1 | 	add	fp, #8
10b70     A7 3C 68 FC | 	wrlong	#30, fp
10b74     08 4E 85 F1 | 	sub	fp, #8
10b78     28 01 90 FD | 	jmp	#LR__1349
10b7c                 | LR__1345
10b7c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
10b7c     08 4E 05 F1 | 	add	fp, #8
10b80     A7 1E 02 FB | 	rdlong	local01, fp
10b84     08 4E 85 F1 | 	sub	fp, #8
10b88     1E 1E 0E F2 | 	cmp	local01, #30 wz
10b8c     14 4E 05 A1 |  if_e	add	fp, #20
10b90     A7 22 02 AB |  if_e	rdlong	local03, fp
10b94     14 4E 85 A1 |  if_e	sub	fp, #20
10b98     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
10b9c     28 00 90 5D |  if_ne	jmp	#LR__1346
10ba0     A7 1E 02 FB | 	rdlong	local01, fp
10ba4     0C 4E 05 F1 | 	add	fp, #12
10ba8     A7 12 02 FB | 	rdlong	arg01, fp
10bac     0C 4E 85 F1 | 	sub	fp, #12
10bb0     A4 06 B1 FD | 	call	#__system___float_fromuns
10bb4     FD 14 02 F6 | 	mov	arg02, result1
10bb8     0F 13 02 F6 | 	mov	arg01, local01
10bbc     9C 0A B1 FD | 	call	#__system___float_mul
10bc0     A7 FA 61 FC | 	wrlong	result1, fp
10bc4     DC 00 90 FD | 	jmp	#LR__1349
10bc8                 | LR__1346
10bc8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
10bc8     08 4E 05 F1 | 	add	fp, #8
10bcc     A7 1E 02 FB | 	rdlong	local01, fp
10bd0     08 4E 85 F1 | 	sub	fp, #8
10bd4     1E 1E 0E F2 | 	cmp	local01, #30 wz
10bd8     14 4E 05 A1 |  if_e	add	fp, #20
10bdc     A7 22 02 AB |  if_e	rdlong	local03, fp
10be0     14 4E 85 A1 |  if_e	sub	fp, #20
10be4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
10be8     38 00 90 5D |  if_ne	jmp	#LR__1347
10bec     A7 1E 02 FB | 	rdlong	local01, fp
10bf0     0C 4E 05 F1 | 	add	fp, #12
10bf4     A7 12 02 FB | 	rdlong	arg01, fp
10bf8     0C 4E 85 F1 | 	sub	fp, #12
10bfc     09 13 52 F6 | 	abs	arg01, arg01 wc
10c00     1F 26 C6 C9 |  if_b	decod	local05, #31
10c04     00 26 06 36 |  if_ae	mov	local05, #0
10c08     4C 06 B1 FD | 	call	#__system___float_fromuns
10c0c     13 FB 61 F5 | 	xor	result1, local05
10c10     FD 14 02 F6 | 	mov	arg02, result1
10c14     0F 13 02 F6 | 	mov	arg01, local01
10c18     40 0A B1 FD | 	call	#__system___float_mul
10c1c     A7 FA 61 FC | 	wrlong	result1, fp
10c20     80 00 90 FD | 	jmp	#LR__1349
10c24                 | LR__1347
10c24                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
10c24     08 4E 05 F1 | 	add	fp, #8
10c28     A7 1E 02 FB | 	rdlong	local01, fp
10c2c     08 4E 85 F1 | 	sub	fp, #8
10c30     1E 1E 0E F2 | 	cmp	local01, #30 wz
10c34     14 4E 05 A1 |  if_e	add	fp, #20
10c38     A7 22 02 AB |  if_e	rdlong	local03, fp
10c3c     14 4E 85 A1 |  if_e	sub	fp, #20
10c40     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
10c44     1C 00 90 5D |  if_ne	jmp	#LR__1348
10c48     A7 12 02 FB | 	rdlong	arg01, fp
10c4c     0C 4E 05 F1 | 	add	fp, #12
10c50     A7 14 02 FB | 	rdlong	arg02, fp
10c54     0C 4E 85 F1 | 	sub	fp, #12
10c58     00 0A B1 FD | 	call	#__system___float_mul
10c5c     A7 FA 61 FC | 	wrlong	result1, fp
10c60     40 00 90 FD | 	jmp	#LR__1349
10c64                 | LR__1348
10c64                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
10c64     08 4E 05 F1 | 	add	fp, #8
10c68     A7 1E 02 FB | 	rdlong	local01, fp
10c6c     08 4E 85 F1 | 	sub	fp, #8
10c70     1F 1E 0E F2 | 	cmp	local01, #31 wz
10c74     14 4E 05 51 |  if_ne	add	fp, #20
10c78     A7 22 02 5B |  if_ne	rdlong	local03, fp
10c7c     14 4E 85 51 |  if_ne	sub	fp, #20
10c80     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
10c84     A7 10 68 AC |  if_e	wrlong	#8, fp
10c88     08 4E 05 A1 |  if_e	add	fp, #8
10c8c     A7 FE 69 AC |  if_e	wrlong	#255, fp
10c90     08 4E 85 A1 |  if_e	sub	fp, #8
10c94     A7 12 68 5C |  if_ne	wrlong	#9, fp
10c98     08 4E 05 51 |  if_ne	add	fp, #8
10c9c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
10ca0     08 4E 85 51 |  if_ne	sub	fp, #8
10ca4                 | LR__1349
10ca4     A7 12 02 F6 | 	mov	arg01, fp
10ca8     64 9C BF FD | 	call	#_push
10cac     A7 F0 03 F6 | 	mov	ptra, fp
10cb0     B2 00 A0 FD | 	call	#popregs_
10cb4                 | _do_mul_ret
10cb4     2D 00 64 FD | 	ret
10cb8                 | 
10cb8                 | ' 
10cb8                 | ' sub do_div 
10cb8                 | _do_div
10cb8     01 4A 05 F6 | 	mov	COUNT_, #1
10cbc     A8 00 A0 FD | 	call	#pushregs_
10cc0     18 F0 07 F1 | 	add	ptra, #24
10cc4     B0 9B BF FD | 	call	#_pop
10cc8     FD 66 02 F6 | 	mov	muldivb_, result1
10ccc     FE 64 02 F6 | 	mov	muldiva_, result2
10cd0     FF 1E 02 F6 | 	mov	local01, result3
10cd4     0C 4E 05 F1 | 	add	fp, #12
10cd8     A7 66 62 FC | 	wrlong	muldivb_, fp
10cdc     04 4E 05 F1 | 	add	fp, #4
10ce0     A7 64 62 FC | 	wrlong	muldiva_, fp
10ce4     04 4E 05 F1 | 	add	fp, #4
10ce8     A7 1E 62 FC | 	wrlong	local01, fp
10cec     14 4E 85 F1 | 	sub	fp, #20
10cf0     84 9B BF FD | 	call	#_pop
10cf4     A7 FA 61 FC | 	wrlong	result1, fp
10cf8     04 4E 05 F1 | 	add	fp, #4
10cfc     A7 FC 61 FC | 	wrlong	result2, fp
10d00     04 4E 05 F1 | 	add	fp, #4
10d04     A7 FE 61 FC | 	wrlong	result3, fp
10d08                 | ' 
10d08                 | ' t2=pop()
10d08                 | ' t1=pop()
10d08                 | ' 
10d08                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
10d08     08 4E 85 F1 | 	sub	fp, #8
10d0c     1F FE 0D F2 | 	cmp	result3, #31 wz
10d10     14 4E 05 51 |  if_ne	add	fp, #20
10d14     A7 12 02 5B |  if_ne	rdlong	arg01, fp
10d18     14 4E 85 51 |  if_ne	sub	fp, #20
10d1c     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
10d20     A7 14 68 AC |  if_e	wrlong	#10, fp
10d24     08 4E 05 A1 |  if_e	add	fp, #8
10d28     A7 FE 69 AC |  if_e	wrlong	#255, fp
10d2c     08 4E 85 A1 |  if_e	sub	fp, #8
10d30     90 01 90 AD |  if_e	jmp	#LR__1356
10d34                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
10d34     08 4E 05 F1 | 	add	fp, #8
10d38     A7 66 02 FB | 	rdlong	muldivb_, fp
10d3c     08 4E 85 F1 | 	sub	fp, #8
10d40     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
10d44     1C 00 90 5D |  if_ne	jmp	#LR__1350
10d48     08 4E 05 F1 | 	add	fp, #8
10d4c     A7 38 68 FC | 	wrlong	#28, fp
10d50     08 4E 85 F1 | 	sub	fp, #8
10d54     A7 12 02 FB | 	rdlong	arg01, fp
10d58     00 14 06 F6 | 	mov	arg02, #0
10d5c     C4 0D B1 FD | 	call	#__system___float_tointeger
10d60     A7 FA 61 FC | 	wrlong	result1, fp
10d64                 | LR__1350
10d64                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
10d64     14 4E 05 F1 | 	add	fp, #20
10d68     A7 66 02 FB | 	rdlong	muldivb_, fp
10d6c     14 4E 85 F1 | 	sub	fp, #20
10d70     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
10d74     28 00 90 5D |  if_ne	jmp	#LR__1351
10d78     14 4E 05 F1 | 	add	fp, #20
10d7c     A7 38 68 FC | 	wrlong	#28, fp
10d80     08 4E 85 F1 | 	sub	fp, #8
10d84     A7 12 02 FB | 	rdlong	arg01, fp
10d88     0C 4E 85 F1 | 	sub	fp, #12
10d8c     00 14 06 F6 | 	mov	arg02, #0
10d90     90 0D B1 FD | 	call	#__system___float_tointeger
10d94     0C 4E 05 F1 | 	add	fp, #12
10d98     A7 FA 61 FC | 	wrlong	result1, fp
10d9c     0C 4E 85 F1 | 	sub	fp, #12
10da0                 | LR__1351
10da0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
10da0     08 4E 05 F1 | 	add	fp, #8
10da4     A7 66 02 FB | 	rdlong	muldivb_, fp
10da8     08 4E 85 F1 | 	sub	fp, #8
10dac     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10db0     14 4E 05 A1 |  if_e	add	fp, #20
10db4     A7 1E 02 AB |  if_e	rdlong	local01, fp
10db8     14 4E 85 A1 |  if_e	sub	fp, #20
10dbc     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10dc0     20 00 90 5D |  if_ne	jmp	#LR__1352
10dc4     0C 4E 05 F1 | 	add	fp, #12
10dc8     A7 1E 02 FB | 	rdlong	local01, fp
10dcc     0C 4E 85 F1 | 	sub	fp, #12
10dd0     A7 66 02 FB | 	rdlong	muldivb_, fp
10dd4     0F 67 12 FD | 	qdiv	muldivb_, local01
10dd8     18 1E 62 FD | 	getqx	local01
10ddc     A7 1E 62 FC | 	wrlong	local01, fp
10de0     E0 00 90 FD | 	jmp	#LR__1356
10de4                 | LR__1352
10de4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
10de4     08 4E 05 F1 | 	add	fp, #8
10de8     A7 66 02 FB | 	rdlong	muldivb_, fp
10dec     08 4E 85 F1 | 	sub	fp, #8
10df0     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
10df4     14 4E 05 A1 |  if_e	add	fp, #20
10df8     A7 1E 02 AB |  if_e	rdlong	local01, fp
10dfc     14 4E 85 A1 |  if_e	sub	fp, #20
10e00     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
10e04     2C 00 90 5D |  if_ne	jmp	#LR__1353
10e08     0C 4E 05 F1 | 	add	fp, #12
10e0c     A7 1E 02 FB | 	rdlong	local01, fp
10e10     0C 4E 85 F1 | 	sub	fp, #12
10e14     A7 66 02 FB | 	rdlong	muldivb_, fp
10e18     0F 67 12 FD | 	qdiv	muldivb_, local01
10e1c     18 1E 62 FD | 	getqx	local01
10e20     A7 1E 62 FC | 	wrlong	local01, fp
10e24     08 4E 05 F1 | 	add	fp, #8
10e28     A7 38 68 FC | 	wrlong	#28, fp
10e2c     08 4E 85 F1 | 	sub	fp, #8
10e30     90 00 90 FD | 	jmp	#LR__1356
10e34                 | LR__1353
10e34                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
10e34     08 4E 05 F1 | 	add	fp, #8
10e38     A7 66 02 FB | 	rdlong	muldivb_, fp
10e3c     08 4E 85 F1 | 	sub	fp, #8
10e40     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10e44     14 4E 05 A1 |  if_e	add	fp, #20
10e48     A7 1E 02 AB |  if_e	rdlong	local01, fp
10e4c     14 4E 85 A1 |  if_e	sub	fp, #20
10e50     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
10e54     1C 00 90 5D |  if_ne	jmp	#LR__1354
10e58     A7 64 02 FB | 	rdlong	muldiva_, fp
10e5c     0C 4E 05 F1 | 	add	fp, #12
10e60     A7 66 02 FB | 	rdlong	muldivb_, fp
10e64     0C 4E 85 F1 | 	sub	fp, #12
10e68     BA 00 A0 FD | 	call	#divide_
10e6c     A7 66 62 FC | 	wrlong	muldivb_, fp
10e70     50 00 90 FD | 	jmp	#LR__1356
10e74                 | LR__1354
10e74                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
10e74     08 4E 05 F1 | 	add	fp, #8
10e78     A7 66 02 FB | 	rdlong	muldivb_, fp
10e7c     08 4E 85 F1 | 	sub	fp, #8
10e80     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
10e84     14 4E 05 A1 |  if_e	add	fp, #20
10e88     A7 1E 02 AB |  if_e	rdlong	local01, fp
10e8c     14 4E 85 A1 |  if_e	sub	fp, #20
10e90     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
10e94     1C 00 90 5D |  if_ne	jmp	#LR__1355
10e98     A7 64 02 FB | 	rdlong	muldiva_, fp
10e9c     0C 4E 05 F1 | 	add	fp, #12
10ea0     A7 66 02 FB | 	rdlong	muldivb_, fp
10ea4     0C 4E 85 F1 | 	sub	fp, #12
10ea8     BA 00 A0 FD | 	call	#divide_
10eac     A7 66 62 FC | 	wrlong	muldivb_, fp
10eb0     10 00 90 FD | 	jmp	#LR__1356
10eb4                 | LR__1355
10eb4     A7 16 68 FC | 	wrlong	#11, fp
10eb8     08 4E 05 F1 | 	add	fp, #8
10ebc     A7 FE 69 FC | 	wrlong	#255, fp
10ec0     08 4E 85 F1 | 	sub	fp, #8
10ec4                 | LR__1356
10ec4     A7 12 02 F6 | 	mov	arg01, fp
10ec8     44 9A BF FD | 	call	#_push
10ecc     A7 F0 03 F6 | 	mov	ptra, fp
10ed0     B2 00 A0 FD | 	call	#popregs_
10ed4                 | _do_div_ret
10ed4     2D 00 64 FD | 	ret
10ed8                 | 
10ed8                 | ' 
10ed8                 | ' sub do_fdiv 
10ed8                 | _do_fdiv
10ed8     02 4A 05 F6 | 	mov	COUNT_, #2
10edc     A8 00 A0 FD | 	call	#pushregs_
10ee0     18 F0 07 F1 | 	add	ptra, #24
10ee4     90 99 BF FD | 	call	#_pop
10ee8     FD 14 02 F6 | 	mov	arg02, result1
10eec     FE 12 02 F6 | 	mov	arg01, result2
10ef0     FF 1E 02 F6 | 	mov	local01, result3
10ef4     0C 4E 05 F1 | 	add	fp, #12
10ef8     A7 14 62 FC | 	wrlong	arg02, fp
10efc     04 4E 05 F1 | 	add	fp, #4
10f00     A7 12 62 FC | 	wrlong	arg01, fp
10f04     04 4E 05 F1 | 	add	fp, #4
10f08     A7 1E 62 FC | 	wrlong	local01, fp
10f0c     14 4E 85 F1 | 	sub	fp, #20
10f10     64 99 BF FD | 	call	#_pop
10f14     A7 FA 61 FC | 	wrlong	result1, fp
10f18     04 4E 05 F1 | 	add	fp, #4
10f1c     A7 FC 61 FC | 	wrlong	result2, fp
10f20     04 4E 05 F1 | 	add	fp, #4
10f24     A7 FE 61 FC | 	wrlong	result3, fp
10f28                 | ' 
10f28                 | ' t2=pop()
10f28                 | ' t1=pop()
10f28                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
10f28     08 4E 85 F1 | 	sub	fp, #8
10f2c     1F FE 0D F2 | 	cmp	result3, #31 wz
10f30     14 4E 05 51 |  if_ne	add	fp, #20
10f34     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10f38     14 4E 85 51 |  if_ne	sub	fp, #20
10f3c     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
10f40     A7 14 68 AC |  if_e	wrlong	#10, fp
10f44     08 4E 05 A1 |  if_e	add	fp, #8
10f48     A7 FE 69 AC |  if_e	wrlong	#255, fp
10f4c     08 4E 85 A1 |  if_e	sub	fp, #8
10f50     38 01 90 AD |  if_e	jmp	#LR__1365
10f54                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
10f54     08 4E 05 F1 | 	add	fp, #8
10f58     A7 14 02 FB | 	rdlong	arg02, fp
10f5c     08 4E 85 F1 | 	sub	fp, #8
10f60     1C 14 0E F2 | 	cmp	arg02, #28 wz
10f64     28 00 90 5D |  if_ne	jmp	#LR__1360
10f68     08 4E 05 F1 | 	add	fp, #8
10f6c     A7 3C 68 FC | 	wrlong	#30, fp
10f70     08 4E 85 F1 | 	sub	fp, #8
10f74     A7 12 02 FB | 	rdlong	arg01, fp
10f78     09 13 52 F6 | 	abs	arg01, arg01 wc
10f7c     1F 20 C6 C9 |  if_b	decod	local02, #31
10f80     00 20 06 36 |  if_ae	mov	local02, #0
10f84     D0 02 B1 FD | 	call	#__system___float_fromuns
10f88     10 FB 61 F5 | 	xor	result1, local02
10f8c     A7 FA 61 FC | 	wrlong	result1, fp
10f90                 | LR__1360
10f90                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
10f90     08 4E 05 F1 | 	add	fp, #8
10f94     A7 14 02 FB | 	rdlong	arg02, fp
10f98     08 4E 85 F1 | 	sub	fp, #8
10f9c     1D 14 0E F2 | 	cmp	arg02, #29 wz
10fa0     18 00 90 5D |  if_ne	jmp	#LR__1361
10fa4     08 4E 05 F1 | 	add	fp, #8
10fa8     A7 3C 68 FC | 	wrlong	#30, fp
10fac     08 4E 85 F1 | 	sub	fp, #8
10fb0     A7 12 02 FB | 	rdlong	arg01, fp
10fb4     A0 02 B1 FD | 	call	#__system___float_fromuns
10fb8     A7 FA 61 FC | 	wrlong	result1, fp
10fbc                 | LR__1361
10fbc                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
10fbc     14 4E 05 F1 | 	add	fp, #20
10fc0     A7 14 02 FB | 	rdlong	arg02, fp
10fc4     14 4E 85 F1 | 	sub	fp, #20
10fc8     1C 14 0E F2 | 	cmp	arg02, #28 wz
10fcc     34 00 90 5D |  if_ne	jmp	#LR__1362
10fd0     14 4E 05 F1 | 	add	fp, #20
10fd4     A7 3C 68 FC | 	wrlong	#30, fp
10fd8     08 4E 85 F1 | 	sub	fp, #8
10fdc     A7 12 02 FB | 	rdlong	arg01, fp
10fe0     0C 4E 85 F1 | 	sub	fp, #12
10fe4     09 13 52 F6 | 	abs	arg01, arg01 wc
10fe8     1F 20 C6 C9 |  if_b	decod	local02, #31
10fec     00 20 06 36 |  if_ae	mov	local02, #0
10ff0     64 02 B1 FD | 	call	#__system___float_fromuns
10ff4     10 FB 61 F5 | 	xor	result1, local02
10ff8     0C 4E 05 F1 | 	add	fp, #12
10ffc     A7 FA 61 FC | 	wrlong	result1, fp
11000     0C 4E 85 F1 | 	sub	fp, #12
11004                 | LR__1362
11004                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
11004     14 4E 05 F1 | 	add	fp, #20
11008     A7 14 02 FB | 	rdlong	arg02, fp
1100c     14 4E 85 F1 | 	sub	fp, #20
11010     1D 14 0E F2 | 	cmp	arg02, #29 wz
11014     24 00 90 5D |  if_ne	jmp	#LR__1363
11018     14 4E 05 F1 | 	add	fp, #20
1101c     A7 3C 68 FC | 	wrlong	#30, fp
11020     08 4E 85 F1 | 	sub	fp, #8
11024     A7 12 02 FB | 	rdlong	arg01, fp
11028     0C 4E 85 F1 | 	sub	fp, #12
1102c     28 02 B1 FD | 	call	#__system___float_fromuns
11030     0C 4E 05 F1 | 	add	fp, #12
11034     A7 FA 61 FC | 	wrlong	result1, fp
11038     0C 4E 85 F1 | 	sub	fp, #12
1103c                 | LR__1363
1103c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1103c     08 4E 05 F1 | 	add	fp, #8
11040     A7 14 02 FB | 	rdlong	arg02, fp
11044     08 4E 85 F1 | 	sub	fp, #8
11048     1E 14 0E F2 | 	cmp	arg02, #30 wz
1104c     14 4E 05 A1 |  if_e	add	fp, #20
11050     A7 1E 02 AB |  if_e	rdlong	local01, fp
11054     14 4E 85 A1 |  if_e	sub	fp, #20
11058     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
1105c     1C 00 90 5D |  if_ne	jmp	#LR__1364
11060     A7 12 02 FB | 	rdlong	arg01, fp
11064     0C 4E 05 F1 | 	add	fp, #12
11068     A7 14 02 FB | 	rdlong	arg02, fp
1106c     0C 4E 85 F1 | 	sub	fp, #12
11070     EC 07 B1 FD | 	call	#__system___float_div
11074     A7 FA 61 FC | 	wrlong	result1, fp
11078     10 00 90 FD | 	jmp	#LR__1365
1107c                 | LR__1364
1107c     A7 16 68 FC | 	wrlong	#11, fp
11080     08 4E 05 F1 | 	add	fp, #8
11084     A7 FE 69 FC | 	wrlong	#255, fp
11088     08 4E 85 F1 | 	sub	fp, #8
1108c                 | LR__1365
1108c     A7 12 02 F6 | 	mov	arg01, fp
11090     7C 98 BF FD | 	call	#_push
11094     A7 F0 03 F6 | 	mov	ptra, fp
11098     B2 00 A0 FD | 	call	#popregs_
1109c                 | _do_fdiv_ret
1109c     2D 00 64 FD | 	ret
110a0                 | 
110a0                 | ' 
110a0                 | ' 
110a0                 | ' sub do_mod 
110a0                 | _do_mod
110a0     01 4A 05 F6 | 	mov	COUNT_, #1
110a4     A8 00 A0 FD | 	call	#pushregs_
110a8     18 F0 07 F1 | 	add	ptra, #24
110ac     C8 97 BF FD | 	call	#_pop
110b0     FD 66 02 F6 | 	mov	muldivb_, result1
110b4     FE 64 02 F6 | 	mov	muldiva_, result2
110b8     FF 1E 02 F6 | 	mov	local01, result3
110bc     0C 4E 05 F1 | 	add	fp, #12
110c0     A7 66 62 FC | 	wrlong	muldivb_, fp
110c4     04 4E 05 F1 | 	add	fp, #4
110c8     A7 64 62 FC | 	wrlong	muldiva_, fp
110cc     04 4E 05 F1 | 	add	fp, #4
110d0     A7 1E 62 FC | 	wrlong	local01, fp
110d4     14 4E 85 F1 | 	sub	fp, #20
110d8     9C 97 BF FD | 	call	#_pop
110dc     A7 FA 61 FC | 	wrlong	result1, fp
110e0     04 4E 05 F1 | 	add	fp, #4
110e4     A7 FC 61 FC | 	wrlong	result2, fp
110e8     04 4E 05 F1 | 	add	fp, #4
110ec     A7 FE 61 FC | 	wrlong	result3, fp
110f0                 | ' 
110f0                 | ' t2=pop()
110f0                 | ' t1=pop()
110f0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
110f0     08 4E 85 F1 | 	sub	fp, #8
110f4     1F FE 0D F2 | 	cmp	result3, #31 wz
110f8     14 4E 05 51 |  if_ne	add	fp, #20
110fc     A7 12 02 5B |  if_ne	rdlong	arg01, fp
11100     14 4E 85 51 |  if_ne	sub	fp, #20
11104     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
11108     A7 14 68 AC |  if_e	wrlong	#10, fp
1110c     08 4E 05 A1 |  if_e	add	fp, #8
11110     A7 FE 69 AC |  if_e	wrlong	#255, fp
11114     08 4E 85 A1 |  if_e	sub	fp, #8
11118     90 01 90 AD |  if_e	jmp	#LR__1376
1111c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1111c     08 4E 05 F1 | 	add	fp, #8
11120     A7 66 02 FB | 	rdlong	muldivb_, fp
11124     08 4E 85 F1 | 	sub	fp, #8
11128     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
1112c     1C 00 90 5D |  if_ne	jmp	#LR__1370
11130     08 4E 05 F1 | 	add	fp, #8
11134     A7 38 68 FC | 	wrlong	#28, fp
11138     08 4E 85 F1 | 	sub	fp, #8
1113c     A7 12 02 FB | 	rdlong	arg01, fp
11140     00 14 06 F6 | 	mov	arg02, #0
11144     DC 09 B1 FD | 	call	#__system___float_tointeger
11148     A7 FA 61 FC | 	wrlong	result1, fp
1114c                 | LR__1370
1114c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1114c     14 4E 05 F1 | 	add	fp, #20
11150     A7 66 02 FB | 	rdlong	muldivb_, fp
11154     14 4E 85 F1 | 	sub	fp, #20
11158     1E 66 0E F2 | 	cmp	muldivb_, #30 wz
1115c     28 00 90 5D |  if_ne	jmp	#LR__1371
11160     14 4E 05 F1 | 	add	fp, #20
11164     A7 38 68 FC | 	wrlong	#28, fp
11168     08 4E 85 F1 | 	sub	fp, #8
1116c     A7 12 02 FB | 	rdlong	arg01, fp
11170     0C 4E 85 F1 | 	sub	fp, #12
11174     00 14 06 F6 | 	mov	arg02, #0
11178     A8 09 B1 FD | 	call	#__system___float_tointeger
1117c     0C 4E 05 F1 | 	add	fp, #12
11180     A7 FA 61 FC | 	wrlong	result1, fp
11184     0C 4E 85 F1 | 	sub	fp, #12
11188                 | LR__1371
11188                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
11188     08 4E 05 F1 | 	add	fp, #8
1118c     A7 66 02 FB | 	rdlong	muldivb_, fp
11190     08 4E 85 F1 | 	sub	fp, #8
11194     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
11198     14 4E 05 A1 |  if_e	add	fp, #20
1119c     A7 1E 02 AB |  if_e	rdlong	local01, fp
111a0     14 4E 85 A1 |  if_e	sub	fp, #20
111a4     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
111a8     20 00 90 5D |  if_ne	jmp	#LR__1372
111ac     0C 4E 05 F1 | 	add	fp, #12
111b0     A7 1E 02 FB | 	rdlong	local01, fp
111b4     0C 4E 85 F1 | 	sub	fp, #12
111b8     A7 66 02 FB | 	rdlong	muldivb_, fp
111bc     0F 67 12 FD | 	qdiv	muldivb_, local01
111c0     19 1E 62 FD | 	getqy	local01
111c4     A7 1E 62 FC | 	wrlong	local01, fp
111c8     E0 00 90 FD | 	jmp	#LR__1376
111cc                 | LR__1372
111cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
111cc     08 4E 05 F1 | 	add	fp, #8
111d0     A7 66 02 FB | 	rdlong	muldivb_, fp
111d4     08 4E 85 F1 | 	sub	fp, #8
111d8     1D 66 0E F2 | 	cmp	muldivb_, #29 wz
111dc     14 4E 05 A1 |  if_e	add	fp, #20
111e0     A7 1E 02 AB |  if_e	rdlong	local01, fp
111e4     14 4E 85 A1 |  if_e	sub	fp, #20
111e8     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
111ec     2C 00 90 5D |  if_ne	jmp	#LR__1373
111f0     0C 4E 05 F1 | 	add	fp, #12
111f4     A7 1E 02 FB | 	rdlong	local01, fp
111f8     0C 4E 85 F1 | 	sub	fp, #12
111fc     A7 66 02 FB | 	rdlong	muldivb_, fp
11200     0F 67 12 FD | 	qdiv	muldivb_, local01
11204     19 1E 62 FD | 	getqy	local01
11208     A7 1E 62 FC | 	wrlong	local01, fp
1120c     08 4E 05 F1 | 	add	fp, #8
11210     A7 38 68 FC | 	wrlong	#28, fp
11214     08 4E 85 F1 | 	sub	fp, #8
11218     90 00 90 FD | 	jmp	#LR__1376
1121c                 | LR__1373
1121c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1121c     08 4E 05 F1 | 	add	fp, #8
11220     A7 66 02 FB | 	rdlong	muldivb_, fp
11224     08 4E 85 F1 | 	sub	fp, #8
11228     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
1122c     14 4E 05 A1 |  if_e	add	fp, #20
11230     A7 1E 02 AB |  if_e	rdlong	local01, fp
11234     14 4E 85 A1 |  if_e	sub	fp, #20
11238     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
1123c     1C 00 90 5D |  if_ne	jmp	#LR__1374
11240     A7 64 02 FB | 	rdlong	muldiva_, fp
11244     0C 4E 05 F1 | 	add	fp, #12
11248     A7 66 02 FB | 	rdlong	muldivb_, fp
1124c     0C 4E 85 F1 | 	sub	fp, #12
11250     BA 00 A0 FD | 	call	#divide_
11254     A7 64 62 FC | 	wrlong	muldiva_, fp
11258     50 00 90 FD | 	jmp	#LR__1376
1125c                 | LR__1374
1125c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1125c     08 4E 05 F1 | 	add	fp, #8
11260     A7 66 02 FB | 	rdlong	muldivb_, fp
11264     08 4E 85 F1 | 	sub	fp, #8
11268     1C 66 0E F2 | 	cmp	muldivb_, #28 wz
1126c     14 4E 05 A1 |  if_e	add	fp, #20
11270     A7 1E 02 AB |  if_e	rdlong	local01, fp
11274     14 4E 85 A1 |  if_e	sub	fp, #20
11278     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
1127c     1C 00 90 5D |  if_ne	jmp	#LR__1375
11280     A7 64 02 FB | 	rdlong	muldiva_, fp
11284     0C 4E 05 F1 | 	add	fp, #12
11288     A7 66 02 FB | 	rdlong	muldivb_, fp
1128c     0C 4E 85 F1 | 	sub	fp, #12
11290     BA 00 A0 FD | 	call	#divide_
11294     A7 64 62 FC | 	wrlong	muldiva_, fp
11298     10 00 90 FD | 	jmp	#LR__1376
1129c                 | LR__1375
1129c     A7 16 68 FC | 	wrlong	#11, fp
112a0     08 4E 05 F1 | 	add	fp, #8
112a4     A7 FE 69 FC | 	wrlong	#255, fp
112a8     08 4E 85 F1 | 	sub	fp, #8
112ac                 | LR__1376
112ac     A7 12 02 F6 | 	mov	arg01, fp
112b0     5C 96 BF FD | 	call	#_push
112b4     A7 F0 03 F6 | 	mov	ptra, fp
112b8     B2 00 A0 FD | 	call	#popregs_
112bc                 | _do_mod_ret
112bc     2D 00 64 FD | 	ret
112c0                 | 
112c0                 | ' 
112c0                 | ' sub do_shl 
112c0                 | _do_shl
112c0     03 4A 05 F6 | 	mov	COUNT_, #3
112c4     A8 00 A0 FD | 	call	#pushregs_
112c8     18 F0 07 F1 | 	add	ptra, #24
112cc     A8 95 BF FD | 	call	#_pop
112d0     FD 12 02 F6 | 	mov	arg01, result1
112d4     FE 1E 02 F6 | 	mov	local01, result2
112d8     FF 20 02 F6 | 	mov	local02, result3
112dc     0C 4E 05 F1 | 	add	fp, #12
112e0     A7 12 62 FC | 	wrlong	arg01, fp
112e4     04 4E 05 F1 | 	add	fp, #4
112e8     A7 1E 62 FC | 	wrlong	local01, fp
112ec     04 4E 05 F1 | 	add	fp, #4
112f0     A7 20 62 FC | 	wrlong	local02, fp
112f4     14 4E 85 F1 | 	sub	fp, #20
112f8     7C 95 BF FD | 	call	#_pop
112fc     FF 22 02 F6 | 	mov	local03, result3
11300     A7 FA 61 FC | 	wrlong	result1, fp
11304     04 4E 05 F1 | 	add	fp, #4
11308     A7 FC 61 FC | 	wrlong	result2, fp
1130c     04 4E 05 F1 | 	add	fp, #4
11310     A7 22 62 FC | 	wrlong	local03, fp
11314                 | ' 
11314                 | ' t2=pop()
11314                 | ' t1=pop()
11314                 | ' 
11314                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
11314     08 4E 85 F1 | 	sub	fp, #8
11318     1C 22 0E F2 | 	cmp	local03, #28 wz
1131c     A7 22 02 AB |  if_e	rdlong	local03, fp
11320     A7 22 62 AC |  if_e	wrlong	local03, fp
11324     08 4E 05 A1 |  if_e	add	fp, #8
11328     A7 3A 68 AC |  if_e	wrlong	#29, fp
1132c     08 4E 85 A1 |  if_e	sub	fp, #8
11330                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
11330     14 4E 05 F1 | 	add	fp, #20
11334     A7 22 02 FB | 	rdlong	local03, fp
11338     14 4E 85 F1 | 	sub	fp, #20
1133c     1C 22 0E F2 | 	cmp	local03, #28 wz
11340     18 00 90 5D |  if_ne	jmp	#LR__1380
11344     0C 4E 05 F1 | 	add	fp, #12
11348     A7 22 02 FB | 	rdlong	local03, fp
1134c     A7 22 62 FC | 	wrlong	local03, fp
11350     08 4E 05 F1 | 	add	fp, #8
11354     A7 3A 68 FC | 	wrlong	#29, fp
11358     14 4E 85 F1 | 	sub	fp, #20
1135c                 | LR__1380
1135c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
1135c     08 4E 05 F1 | 	add	fp, #8
11360     A7 22 02 FB | 	rdlong	local03, fp
11364     08 4E 85 F1 | 	sub	fp, #8
11368     1F 22 0E F2 | 	cmp	local03, #31 wz
1136c     14 4E 05 51 |  if_ne	add	fp, #20
11370     A7 20 02 5B |  if_ne	rdlong	local02, fp
11374     14 4E 85 51 |  if_ne	sub	fp, #20
11378     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
1137c     08 4E 05 51 |  if_ne	add	fp, #8
11380     A7 22 02 5B |  if_ne	rdlong	local03, fp
11384     08 4E 85 51 |  if_ne	sub	fp, #8
11388     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
1138c     14 4E 05 51 |  if_ne	add	fp, #20
11390     14 4E 85 51 |  if_ne	sub	fp, #20
11394     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
11398     A7 0C 68 AC |  if_e	wrlong	#6, fp
1139c     08 4E 05 A1 |  if_e	add	fp, #8
113a0     A7 FE 69 AC |  if_e	wrlong	#255, fp
113a4     08 4E 85 A1 |  if_e	sub	fp, #8
113a8     18 00 90 AD |  if_e	jmp	#LR__1381
113ac     A7 22 02 FB | 	rdlong	local03, fp
113b0     0C 4E 05 F1 | 	add	fp, #12
113b4     A7 1E 02 FB | 	rdlong	local01, fp
113b8     0C 4E 85 F1 | 	sub	fp, #12
113bc     0F 23 62 F0 | 	shl	local03, local01
113c0     A7 22 62 FC | 	wrlong	local03, fp
113c4                 | LR__1381
113c4     A7 12 02 F6 | 	mov	arg01, fp
113c8     44 95 BF FD | 	call	#_push
113cc     A7 F0 03 F6 | 	mov	ptra, fp
113d0     B2 00 A0 FD | 	call	#popregs_
113d4                 | _do_shl_ret
113d4     2D 00 64 FD | 	ret
113d8                 | 
113d8                 | ' 
113d8                 | ' sub do_shr 
113d8                 | _do_shr
113d8     03 4A 05 F6 | 	mov	COUNT_, #3
113dc     A8 00 A0 FD | 	call	#pushregs_
113e0     18 F0 07 F1 | 	add	ptra, #24
113e4     90 94 BF FD | 	call	#_pop
113e8     FD 12 02 F6 | 	mov	arg01, result1
113ec     FE 1E 02 F6 | 	mov	local01, result2
113f0     FF 20 02 F6 | 	mov	local02, result3
113f4     0C 4E 05 F1 | 	add	fp, #12
113f8     A7 12 62 FC | 	wrlong	arg01, fp
113fc     04 4E 05 F1 | 	add	fp, #4
11400     A7 1E 62 FC | 	wrlong	local01, fp
11404     04 4E 05 F1 | 	add	fp, #4
11408     A7 20 62 FC | 	wrlong	local02, fp
1140c     14 4E 85 F1 | 	sub	fp, #20
11410     64 94 BF FD | 	call	#_pop
11414     FF 22 02 F6 | 	mov	local03, result3
11418     A7 FA 61 FC | 	wrlong	result1, fp
1141c     04 4E 05 F1 | 	add	fp, #4
11420     A7 FC 61 FC | 	wrlong	result2, fp
11424     04 4E 05 F1 | 	add	fp, #4
11428     A7 22 62 FC | 	wrlong	local03, fp
1142c                 | ' t2=pop()
1142c                 | ' t1=pop()
1142c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1142c     08 4E 85 F1 | 	sub	fp, #8
11430     1C 22 0E F2 | 	cmp	local03, #28 wz
11434     A7 22 02 AB |  if_e	rdlong	local03, fp
11438     A7 22 62 AC |  if_e	wrlong	local03, fp
1143c     08 4E 05 A1 |  if_e	add	fp, #8
11440     A7 3A 68 AC |  if_e	wrlong	#29, fp
11444     08 4E 85 A1 |  if_e	sub	fp, #8
11448                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
11448     14 4E 05 F1 | 	add	fp, #20
1144c     A7 22 02 FB | 	rdlong	local03, fp
11450     14 4E 85 F1 | 	sub	fp, #20
11454     1C 22 0E F2 | 	cmp	local03, #28 wz
11458     18 00 90 5D |  if_ne	jmp	#LR__1390
1145c     0C 4E 05 F1 | 	add	fp, #12
11460     A7 22 02 FB | 	rdlong	local03, fp
11464     A7 22 62 FC | 	wrlong	local03, fp
11468     08 4E 05 F1 | 	add	fp, #8
1146c     A7 3A 68 FC | 	wrlong	#29, fp
11470     14 4E 85 F1 | 	sub	fp, #20
11474                 | LR__1390
11474                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
11474     08 4E 05 F1 | 	add	fp, #8
11478     A7 22 02 FB | 	rdlong	local03, fp
1147c     08 4E 85 F1 | 	sub	fp, #8
11480     1F 22 0E F2 | 	cmp	local03, #31 wz
11484     14 4E 05 51 |  if_ne	add	fp, #20
11488     A7 20 02 5B |  if_ne	rdlong	local02, fp
1148c     14 4E 85 51 |  if_ne	sub	fp, #20
11490     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
11494     08 4E 05 51 |  if_ne	add	fp, #8
11498     A7 22 02 5B |  if_ne	rdlong	local03, fp
1149c     08 4E 85 51 |  if_ne	sub	fp, #8
114a0     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
114a4     14 4E 05 51 |  if_ne	add	fp, #20
114a8     14 4E 85 51 |  if_ne	sub	fp, #20
114ac     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
114b0     A7 0C 68 AC |  if_e	wrlong	#6, fp
114b4     08 4E 05 A1 |  if_e	add	fp, #8
114b8     A7 FE 69 AC |  if_e	wrlong	#255, fp
114bc     08 4E 85 A1 |  if_e	sub	fp, #8
114c0     18 00 90 AD |  if_e	jmp	#LR__1391
114c4     A7 22 02 FB | 	rdlong	local03, fp
114c8     0C 4E 05 F1 | 	add	fp, #12
114cc     A7 1E 02 FB | 	rdlong	local01, fp
114d0     0C 4E 85 F1 | 	sub	fp, #12
114d4     0F 23 42 F0 | 	shr	local03, local01
114d8     A7 22 62 FC | 	wrlong	local03, fp
114dc                 | LR__1391
114dc     A7 12 02 F6 | 	mov	arg01, fp
114e0     2C 94 BF FD | 	call	#_push
114e4     A7 F0 03 F6 | 	mov	ptra, fp
114e8     B2 00 A0 FD | 	call	#popregs_
114ec                 | _do_shr_ret
114ec     2D 00 64 FD | 	ret
114f0                 | 
114f0                 | ' 
114f0                 | ' sub do_power 
114f0                 | _do_power
114f0     02 4A 05 F6 | 	mov	COUNT_, #2
114f4     A8 00 A0 FD | 	call	#pushregs_
114f8     18 F0 07 F1 | 	add	ptra, #24
114fc     78 93 BF FD | 	call	#_pop
11500     FD 14 02 F6 | 	mov	arg02, result1
11504     FE 12 02 F6 | 	mov	arg01, result2
11508     FF 1E 02 F6 | 	mov	local01, result3
1150c     0C 4E 05 F1 | 	add	fp, #12
11510     A7 14 62 FC | 	wrlong	arg02, fp
11514     04 4E 05 F1 | 	add	fp, #4
11518     A7 12 62 FC | 	wrlong	arg01, fp
1151c     04 4E 05 F1 | 	add	fp, #4
11520     A7 1E 62 FC | 	wrlong	local01, fp
11524     14 4E 85 F1 | 	sub	fp, #20
11528     4C 93 BF FD | 	call	#_pop
1152c     A7 FA 61 FC | 	wrlong	result1, fp
11530     04 4E 05 F1 | 	add	fp, #4
11534     A7 FC 61 FC | 	wrlong	result2, fp
11538     04 4E 05 F1 | 	add	fp, #4
1153c     A7 FE 61 FC | 	wrlong	result3, fp
11540                 | ' t2=pop()
11540                 | ' t1=pop()
11540                 | ' 
11540                 | ' 
11540                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
11540     08 4E 85 F1 | 	sub	fp, #8
11544     1F FE 0D F2 | 	cmp	result3, #31 wz
11548     14 4E 05 51 |  if_ne	add	fp, #20
1154c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
11550     14 4E 85 51 |  if_ne	sub	fp, #20
11554     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
11558     A7 18 68 AC |  if_e	wrlong	#12, fp
1155c     08 4E 05 A1 |  if_e	add	fp, #8
11560     A7 FE 69 AC |  if_e	wrlong	#255, fp
11564     08 4E 85 A1 |  if_e	sub	fp, #8
11568     38 01 90 AD |  if_e	jmp	#LR__1405
1156c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1156c     08 4E 05 F1 | 	add	fp, #8
11570     A7 14 02 FB | 	rdlong	arg02, fp
11574     08 4E 85 F1 | 	sub	fp, #8
11578     1C 14 0E F2 | 	cmp	arg02, #28 wz
1157c     28 00 90 5D |  if_ne	jmp	#LR__1400
11580     08 4E 05 F1 | 	add	fp, #8
11584     A7 3C 68 FC | 	wrlong	#30, fp
11588     08 4E 85 F1 | 	sub	fp, #8
1158c     A7 12 02 FB | 	rdlong	arg01, fp
11590     09 13 52 F6 | 	abs	arg01, arg01 wc
11594     1F 20 C6 C9 |  if_b	decod	local02, #31
11598     00 20 06 36 |  if_ae	mov	local02, #0
1159c     B8 FC B0 FD | 	call	#__system___float_fromuns
115a0     10 FB 61 F5 | 	xor	result1, local02
115a4     A7 FA 61 FC | 	wrlong	result1, fp
115a8                 | LR__1400
115a8                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
115a8     08 4E 05 F1 | 	add	fp, #8
115ac     A7 14 02 FB | 	rdlong	arg02, fp
115b0     08 4E 85 F1 | 	sub	fp, #8
115b4     1D 14 0E F2 | 	cmp	arg02, #29 wz
115b8     18 00 90 5D |  if_ne	jmp	#LR__1401
115bc     08 4E 05 F1 | 	add	fp, #8
115c0     A7 3C 68 FC | 	wrlong	#30, fp
115c4     08 4E 85 F1 | 	sub	fp, #8
115c8     A7 12 02 FB | 	rdlong	arg01, fp
115cc     88 FC B0 FD | 	call	#__system___float_fromuns
115d0     A7 FA 61 FC | 	wrlong	result1, fp
115d4                 | LR__1401
115d4                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
115d4     14 4E 05 F1 | 	add	fp, #20
115d8     A7 14 02 FB | 	rdlong	arg02, fp
115dc     14 4E 85 F1 | 	sub	fp, #20
115e0     1C 14 0E F2 | 	cmp	arg02, #28 wz
115e4     34 00 90 5D |  if_ne	jmp	#LR__1402
115e8     14 4E 05 F1 | 	add	fp, #20
115ec     A7 3C 68 FC | 	wrlong	#30, fp
115f0     08 4E 85 F1 | 	sub	fp, #8
115f4     A7 12 02 FB | 	rdlong	arg01, fp
115f8     0C 4E 85 F1 | 	sub	fp, #12
115fc     09 13 52 F6 | 	abs	arg01, arg01 wc
11600     1F 20 C6 C9 |  if_b	decod	local02, #31
11604     00 20 06 36 |  if_ae	mov	local02, #0
11608     4C FC B0 FD | 	call	#__system___float_fromuns
1160c     10 FB 61 F5 | 	xor	result1, local02
11610     0C 4E 05 F1 | 	add	fp, #12
11614     A7 FA 61 FC | 	wrlong	result1, fp
11618     0C 4E 85 F1 | 	sub	fp, #12
1161c                 | LR__1402
1161c                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1161c     14 4E 05 F1 | 	add	fp, #20
11620     A7 14 02 FB | 	rdlong	arg02, fp
11624     14 4E 85 F1 | 	sub	fp, #20
11628     1D 14 0E F2 | 	cmp	arg02, #29 wz
1162c     24 00 90 5D |  if_ne	jmp	#LR__1403
11630     14 4E 05 F1 | 	add	fp, #20
11634     A7 3C 68 FC | 	wrlong	#30, fp
11638     08 4E 85 F1 | 	sub	fp, #8
1163c     A7 12 02 FB | 	rdlong	arg01, fp
11640     0C 4E 85 F1 | 	sub	fp, #12
11644     10 FC B0 FD | 	call	#__system___float_fromuns
11648     0C 4E 05 F1 | 	add	fp, #12
1164c     A7 FA 61 FC | 	wrlong	result1, fp
11650     0C 4E 85 F1 | 	sub	fp, #12
11654                 | LR__1403
11654                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
11654     08 4E 05 F1 | 	add	fp, #8
11658     A7 14 02 FB | 	rdlong	arg02, fp
1165c     08 4E 85 F1 | 	sub	fp, #8
11660     1E 14 0E F2 | 	cmp	arg02, #30 wz
11664     14 4E 05 A1 |  if_e	add	fp, #20
11668     A7 1E 02 AB |  if_e	rdlong	local01, fp
1166c     14 4E 85 A1 |  if_e	sub	fp, #20
11670     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
11674     1C 00 90 5D |  if_ne	jmp	#LR__1404
11678     A7 12 02 FB | 	rdlong	arg01, fp
1167c     0C 4E 05 F1 | 	add	fp, #12
11680     A7 14 02 FB | 	rdlong	arg02, fp
11684     0C 4E 85 F1 | 	sub	fp, #12
11688     B4 0E B1 FD | 	call	#__system____builtin_powf
1168c     A7 FA 61 FC | 	wrlong	result1, fp
11690     10 00 90 FD | 	jmp	#LR__1405
11694                 | LR__1404
11694     A7 1A 68 FC | 	wrlong	#13, fp
11698     08 4E 05 F1 | 	add	fp, #8
1169c     A7 FE 69 FC | 	wrlong	#255, fp
116a0     08 4E 85 F1 | 	sub	fp, #8
116a4                 | LR__1405
116a4     A7 12 02 F6 | 	mov	arg01, fp
116a8     64 92 BF FD | 	call	#_push
116ac     A7 F0 03 F6 | 	mov	ptra, fp
116b0     B2 00 A0 FD | 	call	#popregs_
116b4                 | _do_power_ret
116b4     2D 00 64 FD | 	ret
116b8                 | 
116b8                 | ' 
116b8                 | ' 
116b8                 | ' sub do_eq
116b8                 | _do_eq
116b8     05 4A 05 F6 | 	mov	COUNT_, #5
116bc     A8 00 A0 FD | 	call	#pushregs_
116c0     18 F0 07 F1 | 	add	ptra, #24
116c4     B0 91 BF FD | 	call	#_pop
116c8     FD 1E 02 F6 | 	mov	local01, result1
116cc     FE 20 02 F6 | 	mov	local02, result2
116d0     FF 22 02 F6 | 	mov	local03, result3
116d4     0C 4E 05 F1 | 	add	fp, #12
116d8     A7 1E 62 FC | 	wrlong	local01, fp
116dc     04 4E 05 F1 | 	add	fp, #4
116e0     A7 20 62 FC | 	wrlong	local02, fp
116e4     04 4E 05 F1 | 	add	fp, #4
116e8     A7 22 62 FC | 	wrlong	local03, fp
116ec     14 4E 85 F1 | 	sub	fp, #20
116f0     84 91 BF FD | 	call	#_pop
116f4     FF 22 02 F6 | 	mov	local03, result3
116f8     A7 FA 61 FC | 	wrlong	result1, fp
116fc     04 4E 05 F1 | 	add	fp, #4
11700     A7 FC 61 FC | 	wrlong	result2, fp
11704     04 4E 05 F1 | 	add	fp, #4
11708     A7 22 62 FC | 	wrlong	local03, fp
1170c                 | ' t2=pop()
1170c                 | ' t1=pop()
1170c                 | ' 
1170c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1170c     08 4E 85 F1 | 	sub	fp, #8
11710     1F 22 0E F2 | 	cmp	local03, #31 wz
11714     14 4E 05 A1 |  if_e	add	fp, #20
11718     A7 24 02 AB |  if_e	rdlong	local04, fp
1171c     14 4E 85 A1 |  if_e	sub	fp, #20
11720     12 23 02 A6 |  if_e	mov	local03, local04
11724     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11728     28 00 90 5D |  if_ne	jmp	#LR__1410
1172c     00 1E 06 F6 | 	mov	local01, #0
11730     A7 12 02 FB | 	rdlong	arg01, fp
11734     0C 4E 05 F1 | 	add	fp, #12
11738     A7 14 02 FB | 	rdlong	arg02, fp
1173c     0C 4E 85 F1 | 	sub	fp, #12
11740     F8 D3 B0 FD | 	call	#__system___string_cmp
11744     00 FA 0D F2 | 	cmp	result1, #0 wz
11748     00 1E 26 A6 |  if_e	not	local01, #0
1174c     A7 1E 62 FC | 	wrlong	local01, fp
11750     1C 04 90 FD | 	jmp	#LR__1423
11754                 | LR__1410
11754                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
11754     08 4E 05 F1 | 	add	fp, #8
11758     A7 1E 02 FB | 	rdlong	local01, fp
1175c     08 4E 85 F1 | 	sub	fp, #8
11760     1E 1E 0E F2 | 	cmp	local01, #30 wz
11764     14 4E 05 A1 |  if_e	add	fp, #20
11768     A7 24 02 AB |  if_e	rdlong	local04, fp
1176c     14 4E 85 A1 |  if_e	sub	fp, #20
11770     12 23 02 A6 |  if_e	mov	local03, local04
11774     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11778     2C 00 90 5D |  if_ne	jmp	#LR__1411
1177c     00 1E 06 F6 | 	mov	local01, #0
11780     A7 12 02 FB | 	rdlong	arg01, fp
11784     0C 4E 05 F1 | 	add	fp, #12
11788     A7 14 02 FB | 	rdlong	arg02, fp
1178c     0C 4E 85 F1 | 	sub	fp, #12
11790     01 16 06 F6 | 	mov	arg03, #1
11794     F8 02 B1 FD | 	call	#__system___float_cmp
11798     00 FA 0D F2 | 	cmp	result1, #0 wz
1179c     00 1E 26 A6 |  if_e	not	local01, #0
117a0     A7 1E 62 FC | 	wrlong	local01, fp
117a4     C8 03 90 FD | 	jmp	#LR__1423
117a8                 | LR__1411
117a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
117a8     08 4E 05 F1 | 	add	fp, #8
117ac     A7 1E 02 FB | 	rdlong	local01, fp
117b0     08 4E 85 F1 | 	sub	fp, #8
117b4     1E 1E 0E F2 | 	cmp	local01, #30 wz
117b8     14 4E 05 A1 |  if_e	add	fp, #20
117bc     A7 24 02 AB |  if_e	rdlong	local04, fp
117c0     14 4E 85 A1 |  if_e	sub	fp, #20
117c4     12 23 02 A6 |  if_e	mov	local03, local04
117c8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
117cc     48 00 90 5D |  if_ne	jmp	#LR__1412
117d0     00 1E 06 F6 | 	mov	local01, #0
117d4     A7 20 02 FB | 	rdlong	local02, fp
117d8     0C 4E 05 F1 | 	add	fp, #12
117dc     A7 12 02 FB | 	rdlong	arg01, fp
117e0     0C 4E 85 F1 | 	sub	fp, #12
117e4     09 13 52 F6 | 	abs	arg01, arg01 wc
117e8     1F 26 C6 C9 |  if_b	decod	local05, #31
117ec     00 26 06 36 |  if_ae	mov	local05, #0
117f0     64 FA B0 FD | 	call	#__system___float_fromuns
117f4     13 FB 61 F5 | 	xor	result1, local05
117f8     FD 14 02 F6 | 	mov	arg02, result1
117fc     10 13 02 F6 | 	mov	arg01, local02
11800     01 16 06 F6 | 	mov	arg03, #1
11804     88 02 B1 FD | 	call	#__system___float_cmp
11808     00 FA 0D F2 | 	cmp	result1, #0 wz
1180c     00 1E 26 A6 |  if_e	not	local01, #0
11810     A7 1E 62 FC | 	wrlong	local01, fp
11814     58 03 90 FD | 	jmp	#LR__1423
11818                 | LR__1412
11818                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
11818     08 4E 05 F1 | 	add	fp, #8
1181c     A7 1E 02 FB | 	rdlong	local01, fp
11820     08 4E 85 F1 | 	sub	fp, #8
11824     1E 1E 0E F2 | 	cmp	local01, #30 wz
11828     14 4E 05 A1 |  if_e	add	fp, #20
1182c     A7 24 02 AB |  if_e	rdlong	local04, fp
11830     14 4E 85 A1 |  if_e	sub	fp, #20
11834     12 23 02 A6 |  if_e	mov	local03, local04
11838     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1183c     38 00 90 5D |  if_ne	jmp	#LR__1413
11840     00 1E 06 F6 | 	mov	local01, #0
11844     A7 20 02 FB | 	rdlong	local02, fp
11848     0C 4E 05 F1 | 	add	fp, #12
1184c     A7 12 02 FB | 	rdlong	arg01, fp
11850     0C 4E 85 F1 | 	sub	fp, #12
11854     00 FA B0 FD | 	call	#__system___float_fromuns
11858     FD 14 02 F6 | 	mov	arg02, result1
1185c     10 13 02 F6 | 	mov	arg01, local02
11860     01 16 06 F6 | 	mov	arg03, #1
11864     28 02 B1 FD | 	call	#__system___float_cmp
11868     00 FA 0D F2 | 	cmp	result1, #0 wz
1186c     00 1E 26 A6 |  if_e	not	local01, #0
11870     A7 1E 62 FC | 	wrlong	local01, fp
11874     F8 02 90 FD | 	jmp	#LR__1423
11878                 | LR__1413
11878                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
11878     08 4E 05 F1 | 	add	fp, #8
1187c     A7 1E 02 FB | 	rdlong	local01, fp
11880     08 4E 85 F1 | 	sub	fp, #8
11884     1C 1E 0E F2 | 	cmp	local01, #28 wz
11888     14 4E 05 A1 |  if_e	add	fp, #20
1188c     A7 24 02 AB |  if_e	rdlong	local04, fp
11890     14 4E 85 A1 |  if_e	sub	fp, #20
11894     12 23 02 A6 |  if_e	mov	local03, local04
11898     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1189c     44 00 90 5D |  if_ne	jmp	#LR__1414
118a0     00 1E 06 F6 | 	mov	local01, #0
118a4     A7 12 02 FB | 	rdlong	arg01, fp
118a8     09 13 52 F6 | 	abs	arg01, arg01 wc
118ac     1F 26 C6 C9 |  if_b	decod	local05, #31
118b0     00 26 06 36 |  if_ae	mov	local05, #0
118b4     A0 F9 B0 FD | 	call	#__system___float_fromuns
118b8     13 FB 61 F5 | 	xor	result1, local05
118bc     FD 12 02 F6 | 	mov	arg01, result1
118c0     0C 4E 05 F1 | 	add	fp, #12
118c4     A7 14 02 FB | 	rdlong	arg02, fp
118c8     0C 4E 85 F1 | 	sub	fp, #12
118cc     01 16 06 F6 | 	mov	arg03, #1
118d0     BC 01 B1 FD | 	call	#__system___float_cmp
118d4     00 FA 0D F2 | 	cmp	result1, #0 wz
118d8     00 1E 26 A6 |  if_e	not	local01, #0
118dc     A7 1E 62 FC | 	wrlong	local01, fp
118e0     8C 02 90 FD | 	jmp	#LR__1423
118e4                 | LR__1414
118e4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
118e4     08 4E 05 F1 | 	add	fp, #8
118e8     A7 1E 02 FB | 	rdlong	local01, fp
118ec     08 4E 85 F1 | 	sub	fp, #8
118f0     1C 1E 0E F2 | 	cmp	local01, #28 wz
118f4     14 4E 05 A1 |  if_e	add	fp, #20
118f8     A7 24 02 AB |  if_e	rdlong	local04, fp
118fc     14 4E 85 A1 |  if_e	sub	fp, #20
11900     12 23 02 A6 |  if_e	mov	local03, local04
11904     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11908     24 00 90 5D |  if_ne	jmp	#LR__1415
1190c     00 1E 06 F6 | 	mov	local01, #0
11910     A7 20 02 FB | 	rdlong	local02, fp
11914     0C 4E 05 F1 | 	add	fp, #12
11918     A7 22 02 FB | 	rdlong	local03, fp
1191c     0C 4E 85 F1 | 	sub	fp, #12
11920     11 21 0A F2 | 	cmp	local02, local03 wz
11924     01 1E 66 A6 |  if_e	neg	local01, #1
11928     A7 1E 62 FC | 	wrlong	local01, fp
1192c     40 02 90 FD | 	jmp	#LR__1423
11930                 | LR__1415
11930                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
11930     08 4E 05 F1 | 	add	fp, #8
11934     A7 1E 02 FB | 	rdlong	local01, fp
11938     08 4E 85 F1 | 	sub	fp, #8
1193c     1C 1E 0E F2 | 	cmp	local01, #28 wz
11940     14 4E 05 A1 |  if_e	add	fp, #20
11944     A7 24 02 AB |  if_e	rdlong	local04, fp
11948     14 4E 85 A1 |  if_e	sub	fp, #20
1194c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11950     24 00 90 5D |  if_ne	jmp	#LR__1416
11954     00 1E 06 F6 | 	mov	local01, #0
11958     A7 20 02 FB | 	rdlong	local02, fp
1195c     0C 4E 05 F1 | 	add	fp, #12
11960     A7 22 02 FB | 	rdlong	local03, fp
11964     0C 4E 85 F1 | 	sub	fp, #12
11968     11 21 0A F2 | 	cmp	local02, local03 wz
1196c     01 1E 66 A6 |  if_e	neg	local01, #1
11970     A7 1E 62 FC | 	wrlong	local01, fp
11974     F8 01 90 FD | 	jmp	#LR__1423
11978                 | LR__1416
11978                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
11978     08 4E 05 F1 | 	add	fp, #8
1197c     A7 1E 02 FB | 	rdlong	local01, fp
11980     08 4E 85 F1 | 	sub	fp, #8
11984     1D 1E 0E F2 | 	cmp	local01, #29 wz
11988     14 4E 05 A1 |  if_e	add	fp, #20
1198c     A7 22 02 AB |  if_e	rdlong	local03, fp
11990     14 4E 85 A1 |  if_e	sub	fp, #20
11994     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11998     34 00 90 5D |  if_ne	jmp	#LR__1417
1199c     00 1E 06 F6 | 	mov	local01, #0
119a0     A7 12 02 FB | 	rdlong	arg01, fp
119a4     B0 F8 B0 FD | 	call	#__system___float_fromuns
119a8     FD 12 02 F6 | 	mov	arg01, result1
119ac     0C 4E 05 F1 | 	add	fp, #12
119b0     A7 14 02 FB | 	rdlong	arg02, fp
119b4     0C 4E 85 F1 | 	sub	fp, #12
119b8     01 16 06 F6 | 	mov	arg03, #1
119bc     D0 00 B1 FD | 	call	#__system___float_cmp
119c0     00 FA 0D F2 | 	cmp	result1, #0 wz
119c4     00 1E 26 A6 |  if_e	not	local01, #0
119c8     A7 1E 62 FC | 	wrlong	local01, fp
119cc     A0 01 90 FD | 	jmp	#LR__1423
119d0                 | LR__1417
119d0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
119d0     08 4E 05 F1 | 	add	fp, #8
119d4     A7 1E 02 FB | 	rdlong	local01, fp
119d8     08 4E 85 F1 | 	sub	fp, #8
119dc     1D 1E 0E F2 | 	cmp	local01, #29 wz
119e0     14 4E 05 A1 |  if_e	add	fp, #20
119e4     A7 22 02 AB |  if_e	rdlong	local03, fp
119e8     14 4E 85 A1 |  if_e	sub	fp, #20
119ec     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
119f0     24 00 90 5D |  if_ne	jmp	#LR__1418
119f4     00 1E 06 F6 | 	mov	local01, #0
119f8     A7 20 02 FB | 	rdlong	local02, fp
119fc     0C 4E 05 F1 | 	add	fp, #12
11a00     A7 22 02 FB | 	rdlong	local03, fp
11a04     0C 4E 85 F1 | 	sub	fp, #12
11a08     11 21 0A F2 | 	cmp	local02, local03 wz
11a0c     01 1E 66 A6 |  if_e	neg	local01, #1
11a10     A7 1E 62 FC | 	wrlong	local01, fp
11a14     58 01 90 FD | 	jmp	#LR__1423
11a18                 | LR__1418
11a18                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
11a18     08 4E 05 F1 | 	add	fp, #8
11a1c     A7 1E 02 FB | 	rdlong	local01, fp
11a20     08 4E 85 F1 | 	sub	fp, #8
11a24     1D 1E 0E F2 | 	cmp	local01, #29 wz
11a28     14 4E 05 A1 |  if_e	add	fp, #20
11a2c     A7 22 02 AB |  if_e	rdlong	local03, fp
11a30     14 4E 85 A1 |  if_e	sub	fp, #20
11a34     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11a38     24 00 90 5D |  if_ne	jmp	#LR__1419
11a3c     00 1E 06 F6 | 	mov	local01, #0
11a40     A7 20 02 FB | 	rdlong	local02, fp
11a44     0C 4E 05 F1 | 	add	fp, #12
11a48     A7 22 02 FB | 	rdlong	local03, fp
11a4c     0C 4E 85 F1 | 	sub	fp, #12
11a50     11 21 0A F2 | 	cmp	local02, local03 wz
11a54     01 1E 66 A6 |  if_e	neg	local01, #1
11a58     A7 1E 62 FC | 	wrlong	local01, fp
11a5c     10 01 90 FD | 	jmp	#LR__1423
11a60                 | LR__1419
11a60                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
11a60     08 4E 05 F1 | 	add	fp, #8
11a64     A7 1E 02 FB | 	rdlong	local01, fp
11a68     08 4E 85 F1 | 	sub	fp, #8
11a6c     2B 1E 0E F2 | 	cmp	local01, #43 wz
11a70     14 4E 05 A1 |  if_e	add	fp, #20
11a74     A7 22 02 AB |  if_e	rdlong	local03, fp
11a78     14 4E 85 A1 |  if_e	sub	fp, #20
11a7c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11a80     30 00 90 5D |  if_ne	jmp	#LR__1420
11a84     00 1E 06 F6 | 	mov	local01, #0
11a88     A7 12 02 FB | 	rdlong	arg01, fp
11a8c     04 D1 BF FD | 	call	#_convertstring
11a90     FD 12 02 F6 | 	mov	arg01, result1
11a94     0C 4E 05 F1 | 	add	fp, #12
11a98     A7 14 02 FB | 	rdlong	arg02, fp
11a9c     0C 4E 85 F1 | 	sub	fp, #12
11aa0     98 D0 B0 FD | 	call	#__system___string_cmp
11aa4     00 FA 0D F2 | 	cmp	result1, #0 wz
11aa8     00 1E 26 A6 |  if_e	not	local01, #0
11aac     A7 1E 62 FC | 	wrlong	local01, fp
11ab0     BC 00 90 FD | 	jmp	#LR__1423
11ab4                 | LR__1420
11ab4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
11ab4     08 4E 05 F1 | 	add	fp, #8
11ab8     A7 1E 02 FB | 	rdlong	local01, fp
11abc     08 4E 85 F1 | 	sub	fp, #8
11ac0     1F 1E 0E F2 | 	cmp	local01, #31 wz
11ac4     14 4E 05 A1 |  if_e	add	fp, #20
11ac8     A7 22 02 AB |  if_e	rdlong	local03, fp
11acc     14 4E 85 A1 |  if_e	sub	fp, #20
11ad0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11ad4     34 00 90 5D |  if_ne	jmp	#LR__1421
11ad8     00 1E 06 F6 | 	mov	local01, #0
11adc     A7 20 02 FB | 	rdlong	local02, fp
11ae0     0C 4E 05 F1 | 	add	fp, #12
11ae4     A7 12 02 FB | 	rdlong	arg01, fp
11ae8     0C 4E 85 F1 | 	sub	fp, #12
11aec     A4 D0 BF FD | 	call	#_convertstring
11af0     FD 14 02 F6 | 	mov	arg02, result1
11af4     10 13 02 F6 | 	mov	arg01, local02
11af8     40 D0 B0 FD | 	call	#__system___string_cmp
11afc     00 FA 0D F2 | 	cmp	result1, #0 wz
11b00     00 1E 26 A6 |  if_e	not	local01, #0
11b04     A7 1E 62 FC | 	wrlong	local01, fp
11b08     64 00 90 FD | 	jmp	#LR__1423
11b0c                 | LR__1421
11b0c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
11b0c     08 4E 05 F1 | 	add	fp, #8
11b10     A7 1E 02 FB | 	rdlong	local01, fp
11b14     08 4E 85 F1 | 	sub	fp, #8
11b18     2B 1E 0E F2 | 	cmp	local01, #43 wz
11b1c     14 4E 05 A1 |  if_e	add	fp, #20
11b20     A7 22 02 AB |  if_e	rdlong	local03, fp
11b24     14 4E 85 A1 |  if_e	sub	fp, #20
11b28     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11b2c     3C 00 90 5D |  if_ne	jmp	#LR__1422
11b30     00 1E 06 F6 | 	mov	local01, #0
11b34     A7 12 02 FB | 	rdlong	arg01, fp
11b38     58 D0 BF FD | 	call	#_convertstring
11b3c     FD 20 02 F6 | 	mov	local02, result1
11b40     0C 4E 05 F1 | 	add	fp, #12
11b44     A7 12 02 FB | 	rdlong	arg01, fp
11b48     0C 4E 85 F1 | 	sub	fp, #12
11b4c     44 D0 BF FD | 	call	#_convertstring
11b50     FD 14 02 F6 | 	mov	arg02, result1
11b54     10 13 02 F6 | 	mov	arg01, local02
11b58     E0 CF B0 FD | 	call	#__system___string_cmp
11b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
11b60     00 1E 26 A6 |  if_e	not	local01, #0
11b64     A7 1E 62 FC | 	wrlong	local01, fp
11b68     04 00 90 FD | 	jmp	#LR__1423
11b6c                 | LR__1422
11b6c     A7 00 68 FC | 	wrlong	#0, fp
11b70                 | LR__1423
11b70     08 4E 05 F1 | 	add	fp, #8
11b74     A7 38 68 FC | 	wrlong	#28, fp
11b78     08 4E 85 F1 | 	sub	fp, #8
11b7c     A7 12 02 F6 | 	mov	arg01, fp
11b80     8C 8D BF FD | 	call	#_push
11b84     A7 F0 03 F6 | 	mov	ptra, fp
11b88     B2 00 A0 FD | 	call	#popregs_
11b8c                 | _do_eq_ret
11b8c     2D 00 64 FD | 	ret
11b90                 | 
11b90                 | ' 
11b90                 | ' sub do_gt
11b90                 | _do_gt
11b90     05 4A 05 F6 | 	mov	COUNT_, #5
11b94     A8 00 A0 FD | 	call	#pushregs_
11b98     18 F0 07 F1 | 	add	ptra, #24
11b9c     D8 8C BF FD | 	call	#_pop
11ba0     FD 1E 02 F6 | 	mov	local01, result1
11ba4     FE 20 02 F6 | 	mov	local02, result2
11ba8     FF 22 02 F6 | 	mov	local03, result3
11bac     0C 4E 05 F1 | 	add	fp, #12
11bb0     A7 1E 62 FC | 	wrlong	local01, fp
11bb4     04 4E 05 F1 | 	add	fp, #4
11bb8     A7 20 62 FC | 	wrlong	local02, fp
11bbc     04 4E 05 F1 | 	add	fp, #4
11bc0     A7 22 62 FC | 	wrlong	local03, fp
11bc4     14 4E 85 F1 | 	sub	fp, #20
11bc8     AC 8C BF FD | 	call	#_pop
11bcc     FF 22 02 F6 | 	mov	local03, result3
11bd0     A7 FA 61 FC | 	wrlong	result1, fp
11bd4     04 4E 05 F1 | 	add	fp, #4
11bd8     A7 FC 61 FC | 	wrlong	result2, fp
11bdc     04 4E 05 F1 | 	add	fp, #4
11be0     A7 22 62 FC | 	wrlong	local03, fp
11be4                 | ' t2=pop()
11be4                 | ' t1=pop()
11be4                 | ' 
11be4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
11be4     08 4E 85 F1 | 	sub	fp, #8
11be8     1F 22 0E F2 | 	cmp	local03, #31 wz
11bec     14 4E 05 A1 |  if_e	add	fp, #20
11bf0     A7 24 02 AB |  if_e	rdlong	local04, fp
11bf4     14 4E 85 A1 |  if_e	sub	fp, #20
11bf8     12 23 02 A6 |  if_e	mov	local03, local04
11bfc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11c00     28 00 90 5D |  if_ne	jmp	#LR__1430
11c04     00 1E 06 F6 | 	mov	local01, #0
11c08     A7 12 02 FB | 	rdlong	arg01, fp
11c0c     0C 4E 05 F1 | 	add	fp, #12
11c10     A7 14 02 FB | 	rdlong	arg02, fp
11c14     0C 4E 85 F1 | 	sub	fp, #12
11c18     20 CF B0 FD | 	call	#__system___string_cmp
11c1c     01 FA 55 F2 | 	cmps	result1, #1 wc
11c20     00 1E 26 36 |  if_ae	not	local01, #0
11c24     A7 1E 62 FC | 	wrlong	local01, fp
11c28     1C 04 90 FD | 	jmp	#LR__1443
11c2c                 | LR__1430
11c2c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
11c2c     08 4E 05 F1 | 	add	fp, #8
11c30     A7 1E 02 FB | 	rdlong	local01, fp
11c34     08 4E 85 F1 | 	sub	fp, #8
11c38     1E 1E 0E F2 | 	cmp	local01, #30 wz
11c3c     14 4E 05 A1 |  if_e	add	fp, #20
11c40     A7 24 02 AB |  if_e	rdlong	local04, fp
11c44     14 4E 85 A1 |  if_e	sub	fp, #20
11c48     12 23 02 A6 |  if_e	mov	local03, local04
11c4c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11c50     2C 00 90 5D |  if_ne	jmp	#LR__1431
11c54     00 1E 06 F6 | 	mov	local01, #0
11c58     A7 12 02 FB | 	rdlong	arg01, fp
11c5c     0C 4E 05 F1 | 	add	fp, #12
11c60     A7 14 02 FB | 	rdlong	arg02, fp
11c64     0C 4E 85 F1 | 	sub	fp, #12
11c68     01 16 66 F6 | 	neg	arg03, #1
11c6c     20 FE B0 FD | 	call	#__system___float_cmp
11c70     01 FA 55 F2 | 	cmps	result1, #1 wc
11c74     00 1E 26 36 |  if_ae	not	local01, #0
11c78     A7 1E 62 FC | 	wrlong	local01, fp
11c7c     C8 03 90 FD | 	jmp	#LR__1443
11c80                 | LR__1431
11c80                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
11c80     08 4E 05 F1 | 	add	fp, #8
11c84     A7 1E 02 FB | 	rdlong	local01, fp
11c88     08 4E 85 F1 | 	sub	fp, #8
11c8c     1E 1E 0E F2 | 	cmp	local01, #30 wz
11c90     14 4E 05 A1 |  if_e	add	fp, #20
11c94     A7 24 02 AB |  if_e	rdlong	local04, fp
11c98     14 4E 85 A1 |  if_e	sub	fp, #20
11c9c     12 23 02 A6 |  if_e	mov	local03, local04
11ca0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11ca4     48 00 90 5D |  if_ne	jmp	#LR__1432
11ca8     00 1E 06 F6 | 	mov	local01, #0
11cac     A7 20 02 FB | 	rdlong	local02, fp
11cb0     0C 4E 05 F1 | 	add	fp, #12
11cb4     A7 12 02 FB | 	rdlong	arg01, fp
11cb8     0C 4E 85 F1 | 	sub	fp, #12
11cbc     09 13 52 F6 | 	abs	arg01, arg01 wc
11cc0     1F 26 C6 C9 |  if_b	decod	local05, #31
11cc4     00 26 06 36 |  if_ae	mov	local05, #0
11cc8     8C F5 B0 FD | 	call	#__system___float_fromuns
11ccc     13 FB 61 F5 | 	xor	result1, local05
11cd0     FD 14 02 F6 | 	mov	arg02, result1
11cd4     10 13 02 F6 | 	mov	arg01, local02
11cd8     01 16 66 F6 | 	neg	arg03, #1
11cdc     B0 FD B0 FD | 	call	#__system___float_cmp
11ce0     01 FA 55 F2 | 	cmps	result1, #1 wc
11ce4     00 1E 26 36 |  if_ae	not	local01, #0
11ce8     A7 1E 62 FC | 	wrlong	local01, fp
11cec     58 03 90 FD | 	jmp	#LR__1443
11cf0                 | LR__1432
11cf0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
11cf0     08 4E 05 F1 | 	add	fp, #8
11cf4     A7 1E 02 FB | 	rdlong	local01, fp
11cf8     08 4E 85 F1 | 	sub	fp, #8
11cfc     1E 1E 0E F2 | 	cmp	local01, #30 wz
11d00     14 4E 05 A1 |  if_e	add	fp, #20
11d04     A7 24 02 AB |  if_e	rdlong	local04, fp
11d08     14 4E 85 A1 |  if_e	sub	fp, #20
11d0c     12 23 02 A6 |  if_e	mov	local03, local04
11d10     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11d14     38 00 90 5D |  if_ne	jmp	#LR__1433
11d18     00 1E 06 F6 | 	mov	local01, #0
11d1c     A7 20 02 FB | 	rdlong	local02, fp
11d20     0C 4E 05 F1 | 	add	fp, #12
11d24     A7 12 02 FB | 	rdlong	arg01, fp
11d28     0C 4E 85 F1 | 	sub	fp, #12
11d2c     28 F5 B0 FD | 	call	#__system___float_fromuns
11d30     FD 14 02 F6 | 	mov	arg02, result1
11d34     10 13 02 F6 | 	mov	arg01, local02
11d38     01 16 66 F6 | 	neg	arg03, #1
11d3c     50 FD B0 FD | 	call	#__system___float_cmp
11d40     01 FA 55 F2 | 	cmps	result1, #1 wc
11d44     00 1E 26 36 |  if_ae	not	local01, #0
11d48     A7 1E 62 FC | 	wrlong	local01, fp
11d4c     F8 02 90 FD | 	jmp	#LR__1443
11d50                 | LR__1433
11d50                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
11d50     08 4E 05 F1 | 	add	fp, #8
11d54     A7 1E 02 FB | 	rdlong	local01, fp
11d58     08 4E 85 F1 | 	sub	fp, #8
11d5c     1C 1E 0E F2 | 	cmp	local01, #28 wz
11d60     14 4E 05 A1 |  if_e	add	fp, #20
11d64     A7 24 02 AB |  if_e	rdlong	local04, fp
11d68     14 4E 85 A1 |  if_e	sub	fp, #20
11d6c     12 23 02 A6 |  if_e	mov	local03, local04
11d70     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11d74     44 00 90 5D |  if_ne	jmp	#LR__1434
11d78     00 1E 06 F6 | 	mov	local01, #0
11d7c     A7 12 02 FB | 	rdlong	arg01, fp
11d80     09 13 52 F6 | 	abs	arg01, arg01 wc
11d84     1F 26 C6 C9 |  if_b	decod	local05, #31
11d88     00 26 06 36 |  if_ae	mov	local05, #0
11d8c     C8 F4 B0 FD | 	call	#__system___float_fromuns
11d90     13 FB 61 F5 | 	xor	result1, local05
11d94     FD 12 02 F6 | 	mov	arg01, result1
11d98     0C 4E 05 F1 | 	add	fp, #12
11d9c     A7 14 02 FB | 	rdlong	arg02, fp
11da0     0C 4E 85 F1 | 	sub	fp, #12
11da4     01 16 66 F6 | 	neg	arg03, #1
11da8     E4 FC B0 FD | 	call	#__system___float_cmp
11dac     01 FA 55 F2 | 	cmps	result1, #1 wc
11db0     00 1E 26 36 |  if_ae	not	local01, #0
11db4     A7 1E 62 FC | 	wrlong	local01, fp
11db8     8C 02 90 FD | 	jmp	#LR__1443
11dbc                 | LR__1434
11dbc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
11dbc     08 4E 05 F1 | 	add	fp, #8
11dc0     A7 1E 02 FB | 	rdlong	local01, fp
11dc4     08 4E 85 F1 | 	sub	fp, #8
11dc8     1C 1E 0E F2 | 	cmp	local01, #28 wz
11dcc     14 4E 05 A1 |  if_e	add	fp, #20
11dd0     A7 24 02 AB |  if_e	rdlong	local04, fp
11dd4     14 4E 85 A1 |  if_e	sub	fp, #20
11dd8     12 23 02 A6 |  if_e	mov	local03, local04
11ddc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11de0     24 00 90 5D |  if_ne	jmp	#LR__1435
11de4     00 1E 06 F6 | 	mov	local01, #0
11de8     A7 20 02 FB | 	rdlong	local02, fp
11dec     0C 4E 05 F1 | 	add	fp, #12
11df0     A7 22 02 FB | 	rdlong	local03, fp
11df4     0C 4E 85 F1 | 	sub	fp, #12
11df8     11 21 5A F2 | 	cmps	local02, local03 wcz
11dfc     01 1E 66 16 |  if_a	neg	local01, #1
11e00     A7 1E 62 FC | 	wrlong	local01, fp
11e04     40 02 90 FD | 	jmp	#LR__1443
11e08                 | LR__1435
11e08                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
11e08     08 4E 05 F1 | 	add	fp, #8
11e0c     A7 1E 02 FB | 	rdlong	local01, fp
11e10     08 4E 85 F1 | 	sub	fp, #8
11e14     1C 1E 0E F2 | 	cmp	local01, #28 wz
11e18     14 4E 05 A1 |  if_e	add	fp, #20
11e1c     A7 24 02 AB |  if_e	rdlong	local04, fp
11e20     14 4E 85 A1 |  if_e	sub	fp, #20
11e24     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
11e28     24 00 90 5D |  if_ne	jmp	#LR__1436
11e2c     00 1E 06 F6 | 	mov	local01, #0
11e30     A7 20 02 FB | 	rdlong	local02, fp
11e34     0C 4E 05 F1 | 	add	fp, #12
11e38     A7 22 02 FB | 	rdlong	local03, fp
11e3c     0C 4E 85 F1 | 	sub	fp, #12
11e40     11 21 5A F2 | 	cmps	local02, local03 wcz
11e44     01 1E 66 16 |  if_a	neg	local01, #1
11e48     A7 1E 62 FC | 	wrlong	local01, fp
11e4c     F8 01 90 FD | 	jmp	#LR__1443
11e50                 | LR__1436
11e50                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
11e50     08 4E 05 F1 | 	add	fp, #8
11e54     A7 1E 02 FB | 	rdlong	local01, fp
11e58     08 4E 85 F1 | 	sub	fp, #8
11e5c     1D 1E 0E F2 | 	cmp	local01, #29 wz
11e60     14 4E 05 A1 |  if_e	add	fp, #20
11e64     A7 22 02 AB |  if_e	rdlong	local03, fp
11e68     14 4E 85 A1 |  if_e	sub	fp, #20
11e6c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
11e70     34 00 90 5D |  if_ne	jmp	#LR__1437
11e74     00 1E 06 F6 | 	mov	local01, #0
11e78     A7 12 02 FB | 	rdlong	arg01, fp
11e7c     D8 F3 B0 FD | 	call	#__system___float_fromuns
11e80     FD 12 02 F6 | 	mov	arg01, result1
11e84     0C 4E 05 F1 | 	add	fp, #12
11e88     A7 14 02 FB | 	rdlong	arg02, fp
11e8c     0C 4E 85 F1 | 	sub	fp, #12
11e90     01 16 66 F6 | 	neg	arg03, #1
11e94     F8 FB B0 FD | 	call	#__system___float_cmp
11e98     01 FA 55 F2 | 	cmps	result1, #1 wc
11e9c     00 1E 26 36 |  if_ae	not	local01, #0
11ea0     A7 1E 62 FC | 	wrlong	local01, fp
11ea4     A0 01 90 FD | 	jmp	#LR__1443
11ea8                 | LR__1437
11ea8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
11ea8     08 4E 05 F1 | 	add	fp, #8
11eac     A7 1E 02 FB | 	rdlong	local01, fp
11eb0     08 4E 85 F1 | 	sub	fp, #8
11eb4     1D 1E 0E F2 | 	cmp	local01, #29 wz
11eb8     14 4E 05 A1 |  if_e	add	fp, #20
11ebc     A7 22 02 AB |  if_e	rdlong	local03, fp
11ec0     14 4E 85 A1 |  if_e	sub	fp, #20
11ec4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
11ec8     24 00 90 5D |  if_ne	jmp	#LR__1438
11ecc     00 1E 06 F6 | 	mov	local01, #0
11ed0     A7 20 02 FB | 	rdlong	local02, fp
11ed4     0C 4E 05 F1 | 	add	fp, #12
11ed8     A7 22 02 FB | 	rdlong	local03, fp
11edc     0C 4E 85 F1 | 	sub	fp, #12
11ee0     11 21 5A F2 | 	cmps	local02, local03 wcz
11ee4     01 1E 66 16 |  if_a	neg	local01, #1
11ee8     A7 1E 62 FC | 	wrlong	local01, fp
11eec     58 01 90 FD | 	jmp	#LR__1443
11ef0                 | LR__1438
11ef0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
11ef0     08 4E 05 F1 | 	add	fp, #8
11ef4     A7 1E 02 FB | 	rdlong	local01, fp
11ef8     08 4E 85 F1 | 	sub	fp, #8
11efc     1D 1E 0E F2 | 	cmp	local01, #29 wz
11f00     14 4E 05 A1 |  if_e	add	fp, #20
11f04     A7 22 02 AB |  if_e	rdlong	local03, fp
11f08     14 4E 85 A1 |  if_e	sub	fp, #20
11f0c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
11f10     24 00 90 5D |  if_ne	jmp	#LR__1439
11f14     00 1E 06 F6 | 	mov	local01, #0
11f18     A7 20 02 FB | 	rdlong	local02, fp
11f1c     0C 4E 05 F1 | 	add	fp, #12
11f20     A7 22 02 FB | 	rdlong	local03, fp
11f24     0C 4E 85 F1 | 	sub	fp, #12
11f28     11 21 1A F2 | 	cmp	local02, local03 wcz
11f2c     01 1E 66 16 |  if_a	neg	local01, #1
11f30     A7 1E 62 FC | 	wrlong	local01, fp
11f34     10 01 90 FD | 	jmp	#LR__1443
11f38                 | LR__1439
11f38                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
11f38     08 4E 05 F1 | 	add	fp, #8
11f3c     A7 1E 02 FB | 	rdlong	local01, fp
11f40     08 4E 85 F1 | 	sub	fp, #8
11f44     2B 1E 0E F2 | 	cmp	local01, #43 wz
11f48     14 4E 05 A1 |  if_e	add	fp, #20
11f4c     A7 22 02 AB |  if_e	rdlong	local03, fp
11f50     14 4E 85 A1 |  if_e	sub	fp, #20
11f54     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
11f58     30 00 90 5D |  if_ne	jmp	#LR__1440
11f5c     00 1E 06 F6 | 	mov	local01, #0
11f60     A7 12 02 FB | 	rdlong	arg01, fp
11f64     2C CC BF FD | 	call	#_convertstring
11f68     FD 12 02 F6 | 	mov	arg01, result1
11f6c     0C 4E 05 F1 | 	add	fp, #12
11f70     A7 14 02 FB | 	rdlong	arg02, fp
11f74     0C 4E 85 F1 | 	sub	fp, #12
11f78     C0 CB B0 FD | 	call	#__system___string_cmp
11f7c     01 FA 55 F2 | 	cmps	result1, #1 wc
11f80     00 1E 26 36 |  if_ae	not	local01, #0
11f84     A7 1E 62 FC | 	wrlong	local01, fp
11f88     BC 00 90 FD | 	jmp	#LR__1443
11f8c                 | LR__1440
11f8c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
11f8c     08 4E 05 F1 | 	add	fp, #8
11f90     A7 1E 02 FB | 	rdlong	local01, fp
11f94     08 4E 85 F1 | 	sub	fp, #8
11f98     1F 1E 0E F2 | 	cmp	local01, #31 wz
11f9c     14 4E 05 A1 |  if_e	add	fp, #20
11fa0     A7 22 02 AB |  if_e	rdlong	local03, fp
11fa4     14 4E 85 A1 |  if_e	sub	fp, #20
11fa8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
11fac     34 00 90 5D |  if_ne	jmp	#LR__1441
11fb0     00 1E 06 F6 | 	mov	local01, #0
11fb4     A7 20 02 FB | 	rdlong	local02, fp
11fb8     0C 4E 05 F1 | 	add	fp, #12
11fbc     A7 12 02 FB | 	rdlong	arg01, fp
11fc0     0C 4E 85 F1 | 	sub	fp, #12
11fc4     CC CB BF FD | 	call	#_convertstring
11fc8     FD 14 02 F6 | 	mov	arg02, result1
11fcc     10 13 02 F6 | 	mov	arg01, local02
11fd0     68 CB B0 FD | 	call	#__system___string_cmp
11fd4     01 FA 55 F2 | 	cmps	result1, #1 wc
11fd8     00 1E 26 36 |  if_ae	not	local01, #0
11fdc     A7 1E 62 FC | 	wrlong	local01, fp
11fe0     64 00 90 FD | 	jmp	#LR__1443
11fe4                 | LR__1441
11fe4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
11fe4     08 4E 05 F1 | 	add	fp, #8
11fe8     A7 1E 02 FB | 	rdlong	local01, fp
11fec     08 4E 85 F1 | 	sub	fp, #8
11ff0     2B 1E 0E F2 | 	cmp	local01, #43 wz
11ff4     14 4E 05 A1 |  if_e	add	fp, #20
11ff8     A7 22 02 AB |  if_e	rdlong	local03, fp
11ffc     14 4E 85 A1 |  if_e	sub	fp, #20
12000     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12004     3C 00 90 5D |  if_ne	jmp	#LR__1442
12008     00 1E 06 F6 | 	mov	local01, #0
1200c     A7 12 02 FB | 	rdlong	arg01, fp
12010     80 CB BF FD | 	call	#_convertstring
12014     FD 20 02 F6 | 	mov	local02, result1
12018     0C 4E 05 F1 | 	add	fp, #12
1201c     A7 12 02 FB | 	rdlong	arg01, fp
12020     0C 4E 85 F1 | 	sub	fp, #12
12024     6C CB BF FD | 	call	#_convertstring
12028     FD 14 02 F6 | 	mov	arg02, result1
1202c     10 13 02 F6 | 	mov	arg01, local02
12030     08 CB B0 FD | 	call	#__system___string_cmp
12034     01 FA 55 F2 | 	cmps	result1, #1 wc
12038     00 1E 26 36 |  if_ae	not	local01, #0
1203c     A7 1E 62 FC | 	wrlong	local01, fp
12040     04 00 90 FD | 	jmp	#LR__1443
12044                 | LR__1442
12044     A7 00 68 FC | 	wrlong	#0, fp
12048                 | LR__1443
12048     08 4E 05 F1 | 	add	fp, #8
1204c     A7 38 68 FC | 	wrlong	#28, fp
12050     08 4E 85 F1 | 	sub	fp, #8
12054     A7 12 02 F6 | 	mov	arg01, fp
12058     B4 88 BF FD | 	call	#_push
1205c     A7 F0 03 F6 | 	mov	ptra, fp
12060     B2 00 A0 FD | 	call	#popregs_
12064                 | _do_gt_ret
12064     2D 00 64 FD | 	ret
12068                 | 
12068                 | ' 
12068                 | ' sub do_lt
12068                 | _do_lt
12068     05 4A 05 F6 | 	mov	COUNT_, #5
1206c     A8 00 A0 FD | 	call	#pushregs_
12070     18 F0 07 F1 | 	add	ptra, #24
12074     00 88 BF FD | 	call	#_pop
12078     FD 1E 02 F6 | 	mov	local01, result1
1207c     FE 20 02 F6 | 	mov	local02, result2
12080     FF 22 02 F6 | 	mov	local03, result3
12084     0C 4E 05 F1 | 	add	fp, #12
12088     A7 1E 62 FC | 	wrlong	local01, fp
1208c     04 4E 05 F1 | 	add	fp, #4
12090     A7 20 62 FC | 	wrlong	local02, fp
12094     04 4E 05 F1 | 	add	fp, #4
12098     A7 22 62 FC | 	wrlong	local03, fp
1209c     14 4E 85 F1 | 	sub	fp, #20
120a0     D4 87 BF FD | 	call	#_pop
120a4     FF 22 02 F6 | 	mov	local03, result3
120a8     A7 FA 61 FC | 	wrlong	result1, fp
120ac     04 4E 05 F1 | 	add	fp, #4
120b0     A7 FC 61 FC | 	wrlong	result2, fp
120b4     04 4E 05 F1 | 	add	fp, #4
120b8     A7 22 62 FC | 	wrlong	local03, fp
120bc                 | ' t2=pop()
120bc                 | ' t1=pop()
120bc                 | ' 
120bc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
120bc     08 4E 85 F1 | 	sub	fp, #8
120c0     1F 22 0E F2 | 	cmp	local03, #31 wz
120c4     14 4E 05 A1 |  if_e	add	fp, #20
120c8     A7 24 02 AB |  if_e	rdlong	local04, fp
120cc     14 4E 85 A1 |  if_e	sub	fp, #20
120d0     12 23 02 A6 |  if_e	mov	local03, local04
120d4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
120d8     28 00 90 5D |  if_ne	jmp	#LR__1450
120dc     00 1E 06 F6 | 	mov	local01, #0
120e0     A7 12 02 FB | 	rdlong	arg01, fp
120e4     0C 4E 05 F1 | 	add	fp, #12
120e8     A7 14 02 FB | 	rdlong	arg02, fp
120ec     0C 4E 85 F1 | 	sub	fp, #12
120f0     48 CA B0 FD | 	call	#__system___string_cmp
120f4     00 FA 55 F2 | 	cmps	result1, #0 wc
120f8     00 1E 26 C6 |  if_b	not	local01, #0
120fc     A7 1E 62 FC | 	wrlong	local01, fp
12100     0C 04 90 FD | 	jmp	#LR__1463
12104                 | LR__1450
12104                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
12104     08 4E 05 F1 | 	add	fp, #8
12108     A7 1E 02 FB | 	rdlong	local01, fp
1210c     08 4E 85 F1 | 	sub	fp, #8
12110     1E 1E 0E F2 | 	cmp	local01, #30 wz
12114     14 4E 05 A1 |  if_e	add	fp, #20
12118     A7 24 02 AB |  if_e	rdlong	local04, fp
1211c     14 4E 85 A1 |  if_e	sub	fp, #20
12120     12 23 02 A6 |  if_e	mov	local03, local04
12124     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12128     2C 00 90 5D |  if_ne	jmp	#LR__1451
1212c     00 1E 06 F6 | 	mov	local01, #0
12130     A7 12 02 FB | 	rdlong	arg01, fp
12134     0C 4E 05 F1 | 	add	fp, #12
12138     A7 14 02 FB | 	rdlong	arg02, fp
1213c     0C 4E 85 F1 | 	sub	fp, #12
12140     01 16 06 F6 | 	mov	arg03, #1
12144     48 F9 B0 FD | 	call	#__system___float_cmp
12148     00 FA 55 F2 | 	cmps	result1, #0 wc
1214c     00 1E 26 C6 |  if_b	not	local01, #0
12150     A7 1E 62 FC | 	wrlong	local01, fp
12154     B8 03 90 FD | 	jmp	#LR__1463
12158                 | LR__1451
12158                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
12158     08 4E 05 F1 | 	add	fp, #8
1215c     A7 1E 02 FB | 	rdlong	local01, fp
12160     08 4E 85 F1 | 	sub	fp, #8
12164     1E 1E 0E F2 | 	cmp	local01, #30 wz
12168     14 4E 05 A1 |  if_e	add	fp, #20
1216c     A7 24 02 AB |  if_e	rdlong	local04, fp
12170     14 4E 85 A1 |  if_e	sub	fp, #20
12174     12 23 02 A6 |  if_e	mov	local03, local04
12178     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1217c     48 00 90 5D |  if_ne	jmp	#LR__1452
12180     00 1E 06 F6 | 	mov	local01, #0
12184     A7 20 02 FB | 	rdlong	local02, fp
12188     0C 4E 05 F1 | 	add	fp, #12
1218c     A7 12 02 FB | 	rdlong	arg01, fp
12190     0C 4E 85 F1 | 	sub	fp, #12
12194     09 13 52 F6 | 	abs	arg01, arg01 wc
12198     1F 26 C6 C9 |  if_b	decod	local05, #31
1219c     00 26 06 36 |  if_ae	mov	local05, #0
121a0     B4 F0 B0 FD | 	call	#__system___float_fromuns
121a4     13 FB 61 F5 | 	xor	result1, local05
121a8     FD 14 02 F6 | 	mov	arg02, result1
121ac     10 13 02 F6 | 	mov	arg01, local02
121b0     01 16 06 F6 | 	mov	arg03, #1
121b4     D8 F8 B0 FD | 	call	#__system___float_cmp
121b8     00 FA 55 F2 | 	cmps	result1, #0 wc
121bc     00 1E 26 C6 |  if_b	not	local01, #0
121c0     A7 1E 62 FC | 	wrlong	local01, fp
121c4     48 03 90 FD | 	jmp	#LR__1463
121c8                 | LR__1452
121c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
121c8     08 4E 05 F1 | 	add	fp, #8
121cc     A7 1E 02 FB | 	rdlong	local01, fp
121d0     08 4E 85 F1 | 	sub	fp, #8
121d4     1E 1E 0E F2 | 	cmp	local01, #30 wz
121d8     14 4E 05 A1 |  if_e	add	fp, #20
121dc     A7 24 02 AB |  if_e	rdlong	local04, fp
121e0     14 4E 85 A1 |  if_e	sub	fp, #20
121e4     12 23 02 A6 |  if_e	mov	local03, local04
121e8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
121ec     38 00 90 5D |  if_ne	jmp	#LR__1453
121f0     00 1E 06 F6 | 	mov	local01, #0
121f4     A7 20 02 FB | 	rdlong	local02, fp
121f8     0C 4E 05 F1 | 	add	fp, #12
121fc     A7 12 02 FB | 	rdlong	arg01, fp
12200     0C 4E 85 F1 | 	sub	fp, #12
12204     50 F0 B0 FD | 	call	#__system___float_fromuns
12208     FD 14 02 F6 | 	mov	arg02, result1
1220c     10 13 02 F6 | 	mov	arg01, local02
12210     01 16 06 F6 | 	mov	arg03, #1
12214     78 F8 B0 FD | 	call	#__system___float_cmp
12218     00 FA 55 F2 | 	cmps	result1, #0 wc
1221c     00 1E 26 C6 |  if_b	not	local01, #0
12220     A7 1E 62 FC | 	wrlong	local01, fp
12224     E8 02 90 FD | 	jmp	#LR__1463
12228                 | LR__1453
12228                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
12228     08 4E 05 F1 | 	add	fp, #8
1222c     A7 1E 02 FB | 	rdlong	local01, fp
12230     08 4E 85 F1 | 	sub	fp, #8
12234     1C 1E 0E F2 | 	cmp	local01, #28 wz
12238     14 4E 05 A1 |  if_e	add	fp, #20
1223c     A7 24 02 AB |  if_e	rdlong	local04, fp
12240     14 4E 85 A1 |  if_e	sub	fp, #20
12244     12 23 02 A6 |  if_e	mov	local03, local04
12248     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1224c     44 00 90 5D |  if_ne	jmp	#LR__1454
12250     00 1E 06 F6 | 	mov	local01, #0
12254     A7 12 02 FB | 	rdlong	arg01, fp
12258     09 13 52 F6 | 	abs	arg01, arg01 wc
1225c     1F 26 C6 C9 |  if_b	decod	local05, #31
12260     00 26 06 36 |  if_ae	mov	local05, #0
12264     F0 EF B0 FD | 	call	#__system___float_fromuns
12268     13 FB 61 F5 | 	xor	result1, local05
1226c     FD 12 02 F6 | 	mov	arg01, result1
12270     0C 4E 05 F1 | 	add	fp, #12
12274     A7 14 02 FB | 	rdlong	arg02, fp
12278     0C 4E 85 F1 | 	sub	fp, #12
1227c     01 16 06 F6 | 	mov	arg03, #1
12280     0C F8 B0 FD | 	call	#__system___float_cmp
12284     00 FA 55 F2 | 	cmps	result1, #0 wc
12288     00 1E 26 C6 |  if_b	not	local01, #0
1228c     A7 1E 62 FC | 	wrlong	local01, fp
12290     7C 02 90 FD | 	jmp	#LR__1463
12294                 | LR__1454
12294                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
12294     08 4E 05 F1 | 	add	fp, #8
12298     A7 1E 02 FB | 	rdlong	local01, fp
1229c     08 4E 85 F1 | 	sub	fp, #8
122a0     1C 1E 0E F2 | 	cmp	local01, #28 wz
122a4     14 4E 05 A1 |  if_e	add	fp, #20
122a8     A7 24 02 AB |  if_e	rdlong	local04, fp
122ac     14 4E 85 A1 |  if_e	sub	fp, #20
122b0     12 23 02 A6 |  if_e	mov	local03, local04
122b4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
122b8     20 00 90 5D |  if_ne	jmp	#LR__1455
122bc     A7 20 02 FB | 	rdlong	local02, fp
122c0     0C 4E 05 F1 | 	add	fp, #12
122c4     A7 22 02 FB | 	rdlong	local03, fp
122c8     0C 4E 85 F1 | 	sub	fp, #12
122cc     11 21 52 F2 | 	cmps	local02, local03 wc
122d0     0F 1F A2 F1 | 	subx	local01, local01
122d4     A7 1E 62 FC | 	wrlong	local01, fp
122d8     34 02 90 FD | 	jmp	#LR__1463
122dc                 | LR__1455
122dc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
122dc     08 4E 05 F1 | 	add	fp, #8
122e0     A7 1E 02 FB | 	rdlong	local01, fp
122e4     08 4E 85 F1 | 	sub	fp, #8
122e8     1C 1E 0E F2 | 	cmp	local01, #28 wz
122ec     14 4E 05 A1 |  if_e	add	fp, #20
122f0     A7 24 02 AB |  if_e	rdlong	local04, fp
122f4     14 4E 85 A1 |  if_e	sub	fp, #20
122f8     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
122fc     20 00 90 5D |  if_ne	jmp	#LR__1456
12300     A7 20 02 FB | 	rdlong	local02, fp
12304     0C 4E 05 F1 | 	add	fp, #12
12308     A7 22 02 FB | 	rdlong	local03, fp
1230c     0C 4E 85 F1 | 	sub	fp, #12
12310     11 21 52 F2 | 	cmps	local02, local03 wc
12314     0F 1F A2 F1 | 	subx	local01, local01
12318     A7 1E 62 FC | 	wrlong	local01, fp
1231c     F0 01 90 FD | 	jmp	#LR__1463
12320                 | LR__1456
12320                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
12320     08 4E 05 F1 | 	add	fp, #8
12324     A7 1E 02 FB | 	rdlong	local01, fp
12328     08 4E 85 F1 | 	sub	fp, #8
1232c     1D 1E 0E F2 | 	cmp	local01, #29 wz
12330     14 4E 05 A1 |  if_e	add	fp, #20
12334     A7 22 02 AB |  if_e	rdlong	local03, fp
12338     14 4E 85 A1 |  if_e	sub	fp, #20
1233c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12340     34 00 90 5D |  if_ne	jmp	#LR__1457
12344     00 1E 06 F6 | 	mov	local01, #0
12348     A7 12 02 FB | 	rdlong	arg01, fp
1234c     08 EF B0 FD | 	call	#__system___float_fromuns
12350     FD 12 02 F6 | 	mov	arg01, result1
12354     0C 4E 05 F1 | 	add	fp, #12
12358     A7 14 02 FB | 	rdlong	arg02, fp
1235c     0C 4E 85 F1 | 	sub	fp, #12
12360     01 16 06 F6 | 	mov	arg03, #1
12364     28 F7 B0 FD | 	call	#__system___float_cmp
12368     00 FA 55 F2 | 	cmps	result1, #0 wc
1236c     00 1E 26 C6 |  if_b	not	local01, #0
12370     A7 1E 62 FC | 	wrlong	local01, fp
12374     98 01 90 FD | 	jmp	#LR__1463
12378                 | LR__1457
12378                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
12378     08 4E 05 F1 | 	add	fp, #8
1237c     A7 1E 02 FB | 	rdlong	local01, fp
12380     08 4E 85 F1 | 	sub	fp, #8
12384     1D 1E 0E F2 | 	cmp	local01, #29 wz
12388     14 4E 05 A1 |  if_e	add	fp, #20
1238c     A7 22 02 AB |  if_e	rdlong	local03, fp
12390     14 4E 85 A1 |  if_e	sub	fp, #20
12394     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12398     20 00 90 5D |  if_ne	jmp	#LR__1458
1239c     A7 20 02 FB | 	rdlong	local02, fp
123a0     0C 4E 05 F1 | 	add	fp, #12
123a4     A7 22 02 FB | 	rdlong	local03, fp
123a8     0C 4E 85 F1 | 	sub	fp, #12
123ac     11 21 52 F2 | 	cmps	local02, local03 wc
123b0     0F 1F A2 F1 | 	subx	local01, local01
123b4     A7 1E 62 FC | 	wrlong	local01, fp
123b8     54 01 90 FD | 	jmp	#LR__1463
123bc                 | LR__1458
123bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
123bc     08 4E 05 F1 | 	add	fp, #8
123c0     A7 1E 02 FB | 	rdlong	local01, fp
123c4     08 4E 85 F1 | 	sub	fp, #8
123c8     1D 1E 0E F2 | 	cmp	local01, #29 wz
123cc     14 4E 05 A1 |  if_e	add	fp, #20
123d0     A7 22 02 AB |  if_e	rdlong	local03, fp
123d4     14 4E 85 A1 |  if_e	sub	fp, #20
123d8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
123dc     20 00 90 5D |  if_ne	jmp	#LR__1459
123e0     A7 20 02 FB | 	rdlong	local02, fp
123e4     0C 4E 05 F1 | 	add	fp, #12
123e8     A7 22 02 FB | 	rdlong	local03, fp
123ec     0C 4E 85 F1 | 	sub	fp, #12
123f0     11 21 12 F2 | 	cmp	local02, local03 wc
123f4     0F 1F A2 F1 | 	subx	local01, local01
123f8     A7 1E 62 FC | 	wrlong	local01, fp
123fc     10 01 90 FD | 	jmp	#LR__1463
12400                 | LR__1459
12400                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
12400     08 4E 05 F1 | 	add	fp, #8
12404     A7 1E 02 FB | 	rdlong	local01, fp
12408     08 4E 85 F1 | 	sub	fp, #8
1240c     2B 1E 0E F2 | 	cmp	local01, #43 wz
12410     14 4E 05 A1 |  if_e	add	fp, #20
12414     A7 22 02 AB |  if_e	rdlong	local03, fp
12418     14 4E 85 A1 |  if_e	sub	fp, #20
1241c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12420     30 00 90 5D |  if_ne	jmp	#LR__1460
12424     00 1E 06 F6 | 	mov	local01, #0
12428     A7 12 02 FB | 	rdlong	arg01, fp
1242c     64 C7 BF FD | 	call	#_convertstring
12430     FD 12 02 F6 | 	mov	arg01, result1
12434     0C 4E 05 F1 | 	add	fp, #12
12438     A7 14 02 FB | 	rdlong	arg02, fp
1243c     0C 4E 85 F1 | 	sub	fp, #12
12440     F8 C6 B0 FD | 	call	#__system___string_cmp
12444     00 FA 55 F2 | 	cmps	result1, #0 wc
12448     00 1E 26 C6 |  if_b	not	local01, #0
1244c     A7 1E 62 FC | 	wrlong	local01, fp
12450     BC 00 90 FD | 	jmp	#LR__1463
12454                 | LR__1460
12454                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
12454     08 4E 05 F1 | 	add	fp, #8
12458     A7 1E 02 FB | 	rdlong	local01, fp
1245c     08 4E 85 F1 | 	sub	fp, #8
12460     1F 1E 0E F2 | 	cmp	local01, #31 wz
12464     14 4E 05 A1 |  if_e	add	fp, #20
12468     A7 22 02 AB |  if_e	rdlong	local03, fp
1246c     14 4E 85 A1 |  if_e	sub	fp, #20
12470     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12474     34 00 90 5D |  if_ne	jmp	#LR__1461
12478     00 1E 06 F6 | 	mov	local01, #0
1247c     A7 20 02 FB | 	rdlong	local02, fp
12480     0C 4E 05 F1 | 	add	fp, #12
12484     A7 12 02 FB | 	rdlong	arg01, fp
12488     0C 4E 85 F1 | 	sub	fp, #12
1248c     04 C7 BF FD | 	call	#_convertstring
12490     FD 14 02 F6 | 	mov	arg02, result1
12494     10 13 02 F6 | 	mov	arg01, local02
12498     A0 C6 B0 FD | 	call	#__system___string_cmp
1249c     00 FA 55 F2 | 	cmps	result1, #0 wc
124a0     00 1E 26 C6 |  if_b	not	local01, #0
124a4     A7 1E 62 FC | 	wrlong	local01, fp
124a8     64 00 90 FD | 	jmp	#LR__1463
124ac                 | LR__1461
124ac                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
124ac     08 4E 05 F1 | 	add	fp, #8
124b0     A7 1E 02 FB | 	rdlong	local01, fp
124b4     08 4E 85 F1 | 	sub	fp, #8
124b8     2B 1E 0E F2 | 	cmp	local01, #43 wz
124bc     14 4E 05 A1 |  if_e	add	fp, #20
124c0     A7 22 02 AB |  if_e	rdlong	local03, fp
124c4     14 4E 85 A1 |  if_e	sub	fp, #20
124c8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
124cc     3C 00 90 5D |  if_ne	jmp	#LR__1462
124d0     00 1E 06 F6 | 	mov	local01, #0
124d4     A7 12 02 FB | 	rdlong	arg01, fp
124d8     B8 C6 BF FD | 	call	#_convertstring
124dc     FD 20 02 F6 | 	mov	local02, result1
124e0     0C 4E 05 F1 | 	add	fp, #12
124e4     A7 12 02 FB | 	rdlong	arg01, fp
124e8     0C 4E 85 F1 | 	sub	fp, #12
124ec     A4 C6 BF FD | 	call	#_convertstring
124f0     FD 14 02 F6 | 	mov	arg02, result1
124f4     10 13 02 F6 | 	mov	arg01, local02
124f8     40 C6 B0 FD | 	call	#__system___string_cmp
124fc     00 FA 55 F2 | 	cmps	result1, #0 wc
12500     00 1E 26 C6 |  if_b	not	local01, #0
12504     A7 1E 62 FC | 	wrlong	local01, fp
12508     04 00 90 FD | 	jmp	#LR__1463
1250c                 | LR__1462
1250c     A7 00 68 FC | 	wrlong	#0, fp
12510                 | LR__1463
12510     08 4E 05 F1 | 	add	fp, #8
12514     A7 38 68 FC | 	wrlong	#28, fp
12518     08 4E 85 F1 | 	sub	fp, #8
1251c     A7 12 02 F6 | 	mov	arg01, fp
12520     EC 83 BF FD | 	call	#_push
12524     A7 F0 03 F6 | 	mov	ptra, fp
12528     B2 00 A0 FD | 	call	#popregs_
1252c                 | _do_lt_ret
1252c     2D 00 64 FD | 	ret
12530                 | 
12530                 | ' 
12530                 | ' sub do_ge
12530                 | _do_ge
12530     05 4A 05 F6 | 	mov	COUNT_, #5
12534     A8 00 A0 FD | 	call	#pushregs_
12538     18 F0 07 F1 | 	add	ptra, #24
1253c     38 83 BF FD | 	call	#_pop
12540     FD 1E 02 F6 | 	mov	local01, result1
12544     FE 20 02 F6 | 	mov	local02, result2
12548     FF 22 02 F6 | 	mov	local03, result3
1254c     0C 4E 05 F1 | 	add	fp, #12
12550     A7 1E 62 FC | 	wrlong	local01, fp
12554     04 4E 05 F1 | 	add	fp, #4
12558     A7 20 62 FC | 	wrlong	local02, fp
1255c     04 4E 05 F1 | 	add	fp, #4
12560     A7 22 62 FC | 	wrlong	local03, fp
12564     14 4E 85 F1 | 	sub	fp, #20
12568     0C 83 BF FD | 	call	#_pop
1256c     FF 22 02 F6 | 	mov	local03, result3
12570     A7 FA 61 FC | 	wrlong	result1, fp
12574     04 4E 05 F1 | 	add	fp, #4
12578     A7 FC 61 FC | 	wrlong	result2, fp
1257c     04 4E 05 F1 | 	add	fp, #4
12580     A7 22 62 FC | 	wrlong	local03, fp
12584                 | ' t2=pop()
12584                 | ' t1=pop()
12584                 | ' 
12584                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
12584     08 4E 85 F1 | 	sub	fp, #8
12588     1F 22 0E F2 | 	cmp	local03, #31 wz
1258c     14 4E 05 A1 |  if_e	add	fp, #20
12590     A7 24 02 AB |  if_e	rdlong	local04, fp
12594     14 4E 85 A1 |  if_e	sub	fp, #20
12598     12 23 02 A6 |  if_e	mov	local03, local04
1259c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
125a0     28 00 90 5D |  if_ne	jmp	#LR__1470
125a4     00 1E 06 F6 | 	mov	local01, #0
125a8     A7 12 02 FB | 	rdlong	arg01, fp
125ac     0C 4E 05 F1 | 	add	fp, #12
125b0     A7 14 02 FB | 	rdlong	arg02, fp
125b4     0C 4E 85 F1 | 	sub	fp, #12
125b8     80 C5 B0 FD | 	call	#__system___string_cmp
125bc     00 FA 55 F2 | 	cmps	result1, #0 wc
125c0     00 1E 26 36 |  if_ae	not	local01, #0
125c4     A7 1E 62 FC | 	wrlong	local01, fp
125c8     1C 04 90 FD | 	jmp	#LR__1483
125cc                 | LR__1470
125cc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
125cc     08 4E 05 F1 | 	add	fp, #8
125d0     A7 1E 02 FB | 	rdlong	local01, fp
125d4     08 4E 85 F1 | 	sub	fp, #8
125d8     1E 1E 0E F2 | 	cmp	local01, #30 wz
125dc     14 4E 05 A1 |  if_e	add	fp, #20
125e0     A7 24 02 AB |  if_e	rdlong	local04, fp
125e4     14 4E 85 A1 |  if_e	sub	fp, #20
125e8     12 23 02 A6 |  if_e	mov	local03, local04
125ec     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
125f0     2C 00 90 5D |  if_ne	jmp	#LR__1471
125f4     00 1E 06 F6 | 	mov	local01, #0
125f8     A7 12 02 FB | 	rdlong	arg01, fp
125fc     0C 4E 05 F1 | 	add	fp, #12
12600     A7 14 02 FB | 	rdlong	arg02, fp
12604     0C 4E 85 F1 | 	sub	fp, #12
12608     01 16 66 F6 | 	neg	arg03, #1
1260c     80 F4 B0 FD | 	call	#__system___float_cmp
12610     00 FA 55 F2 | 	cmps	result1, #0 wc
12614     00 1E 26 36 |  if_ae	not	local01, #0
12618     A7 1E 62 FC | 	wrlong	local01, fp
1261c     C8 03 90 FD | 	jmp	#LR__1483
12620                 | LR__1471
12620                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
12620     08 4E 05 F1 | 	add	fp, #8
12624     A7 1E 02 FB | 	rdlong	local01, fp
12628     08 4E 85 F1 | 	sub	fp, #8
1262c     1E 1E 0E F2 | 	cmp	local01, #30 wz
12630     14 4E 05 A1 |  if_e	add	fp, #20
12634     A7 24 02 AB |  if_e	rdlong	local04, fp
12638     14 4E 85 A1 |  if_e	sub	fp, #20
1263c     12 23 02 A6 |  if_e	mov	local03, local04
12640     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12644     48 00 90 5D |  if_ne	jmp	#LR__1472
12648     00 1E 06 F6 | 	mov	local01, #0
1264c     A7 20 02 FB | 	rdlong	local02, fp
12650     0C 4E 05 F1 | 	add	fp, #12
12654     A7 12 02 FB | 	rdlong	arg01, fp
12658     0C 4E 85 F1 | 	sub	fp, #12
1265c     09 13 52 F6 | 	abs	arg01, arg01 wc
12660     1F 26 C6 C9 |  if_b	decod	local05, #31
12664     00 26 06 36 |  if_ae	mov	local05, #0
12668     EC EB B0 FD | 	call	#__system___float_fromuns
1266c     13 FB 61 F5 | 	xor	result1, local05
12670     FD 14 02 F6 | 	mov	arg02, result1
12674     10 13 02 F6 | 	mov	arg01, local02
12678     01 16 66 F6 | 	neg	arg03, #1
1267c     10 F4 B0 FD | 	call	#__system___float_cmp
12680     00 FA 55 F2 | 	cmps	result1, #0 wc
12684     00 1E 26 36 |  if_ae	not	local01, #0
12688     A7 1E 62 FC | 	wrlong	local01, fp
1268c     58 03 90 FD | 	jmp	#LR__1483
12690                 | LR__1472
12690                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
12690     08 4E 05 F1 | 	add	fp, #8
12694     A7 1E 02 FB | 	rdlong	local01, fp
12698     08 4E 85 F1 | 	sub	fp, #8
1269c     1E 1E 0E F2 | 	cmp	local01, #30 wz
126a0     14 4E 05 A1 |  if_e	add	fp, #20
126a4     A7 24 02 AB |  if_e	rdlong	local04, fp
126a8     14 4E 85 A1 |  if_e	sub	fp, #20
126ac     12 23 02 A6 |  if_e	mov	local03, local04
126b0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
126b4     38 00 90 5D |  if_ne	jmp	#LR__1473
126b8     00 1E 06 F6 | 	mov	local01, #0
126bc     A7 20 02 FB | 	rdlong	local02, fp
126c0     0C 4E 05 F1 | 	add	fp, #12
126c4     A7 12 02 FB | 	rdlong	arg01, fp
126c8     0C 4E 85 F1 | 	sub	fp, #12
126cc     88 EB B0 FD | 	call	#__system___float_fromuns
126d0     FD 14 02 F6 | 	mov	arg02, result1
126d4     10 13 02 F6 | 	mov	arg01, local02
126d8     01 16 66 F6 | 	neg	arg03, #1
126dc     B0 F3 B0 FD | 	call	#__system___float_cmp
126e0     00 FA 55 F2 | 	cmps	result1, #0 wc
126e4     00 1E 26 36 |  if_ae	not	local01, #0
126e8     A7 1E 62 FC | 	wrlong	local01, fp
126ec     F8 02 90 FD | 	jmp	#LR__1483
126f0                 | LR__1473
126f0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
126f0     08 4E 05 F1 | 	add	fp, #8
126f4     A7 1E 02 FB | 	rdlong	local01, fp
126f8     08 4E 85 F1 | 	sub	fp, #8
126fc     1C 1E 0E F2 | 	cmp	local01, #28 wz
12700     14 4E 05 A1 |  if_e	add	fp, #20
12704     A7 24 02 AB |  if_e	rdlong	local04, fp
12708     14 4E 85 A1 |  if_e	sub	fp, #20
1270c     12 23 02 A6 |  if_e	mov	local03, local04
12710     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12714     44 00 90 5D |  if_ne	jmp	#LR__1474
12718     00 1E 06 F6 | 	mov	local01, #0
1271c     A7 12 02 FB | 	rdlong	arg01, fp
12720     09 13 52 F6 | 	abs	arg01, arg01 wc
12724     1F 26 C6 C9 |  if_b	decod	local05, #31
12728     00 26 06 36 |  if_ae	mov	local05, #0
1272c     28 EB B0 FD | 	call	#__system___float_fromuns
12730     13 FB 61 F5 | 	xor	result1, local05
12734     FD 12 02 F6 | 	mov	arg01, result1
12738     0C 4E 05 F1 | 	add	fp, #12
1273c     A7 14 02 FB | 	rdlong	arg02, fp
12740     0C 4E 85 F1 | 	sub	fp, #12
12744     01 16 66 F6 | 	neg	arg03, #1
12748     44 F3 B0 FD | 	call	#__system___float_cmp
1274c     00 FA 55 F2 | 	cmps	result1, #0 wc
12750     00 1E 26 36 |  if_ae	not	local01, #0
12754     A7 1E 62 FC | 	wrlong	local01, fp
12758     8C 02 90 FD | 	jmp	#LR__1483
1275c                 | LR__1474
1275c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1275c     08 4E 05 F1 | 	add	fp, #8
12760     A7 1E 02 FB | 	rdlong	local01, fp
12764     08 4E 85 F1 | 	sub	fp, #8
12768     1C 1E 0E F2 | 	cmp	local01, #28 wz
1276c     14 4E 05 A1 |  if_e	add	fp, #20
12770     A7 24 02 AB |  if_e	rdlong	local04, fp
12774     14 4E 85 A1 |  if_e	sub	fp, #20
12778     12 23 02 A6 |  if_e	mov	local03, local04
1277c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12780     24 00 90 5D |  if_ne	jmp	#LR__1475
12784     00 1E 06 F6 | 	mov	local01, #0
12788     A7 20 02 FB | 	rdlong	local02, fp
1278c     0C 4E 05 F1 | 	add	fp, #12
12790     A7 22 02 FB | 	rdlong	local03, fp
12794     0C 4E 85 F1 | 	sub	fp, #12
12798     11 21 52 F2 | 	cmps	local02, local03 wc
1279c     01 1E 66 36 |  if_ae	neg	local01, #1
127a0     A7 1E 62 FC | 	wrlong	local01, fp
127a4     40 02 90 FD | 	jmp	#LR__1483
127a8                 | LR__1475
127a8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
127a8     08 4E 05 F1 | 	add	fp, #8
127ac     A7 1E 02 FB | 	rdlong	local01, fp
127b0     08 4E 85 F1 | 	sub	fp, #8
127b4     1C 1E 0E F2 | 	cmp	local01, #28 wz
127b8     14 4E 05 A1 |  if_e	add	fp, #20
127bc     A7 24 02 AB |  if_e	rdlong	local04, fp
127c0     14 4E 85 A1 |  if_e	sub	fp, #20
127c4     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
127c8     24 00 90 5D |  if_ne	jmp	#LR__1476
127cc     00 1E 06 F6 | 	mov	local01, #0
127d0     A7 20 02 FB | 	rdlong	local02, fp
127d4     0C 4E 05 F1 | 	add	fp, #12
127d8     A7 22 02 FB | 	rdlong	local03, fp
127dc     0C 4E 85 F1 | 	sub	fp, #12
127e0     11 21 52 F2 | 	cmps	local02, local03 wc
127e4     01 1E 66 36 |  if_ae	neg	local01, #1
127e8     A7 1E 62 FC | 	wrlong	local01, fp
127ec     F8 01 90 FD | 	jmp	#LR__1483
127f0                 | LR__1476
127f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
127f0     08 4E 05 F1 | 	add	fp, #8
127f4     A7 1E 02 FB | 	rdlong	local01, fp
127f8     08 4E 85 F1 | 	sub	fp, #8
127fc     1D 1E 0E F2 | 	cmp	local01, #29 wz
12800     14 4E 05 A1 |  if_e	add	fp, #20
12804     A7 22 02 AB |  if_e	rdlong	local03, fp
12808     14 4E 85 A1 |  if_e	sub	fp, #20
1280c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12810     34 00 90 5D |  if_ne	jmp	#LR__1477
12814     00 1E 06 F6 | 	mov	local01, #0
12818     A7 12 02 FB | 	rdlong	arg01, fp
1281c     38 EA B0 FD | 	call	#__system___float_fromuns
12820     FD 12 02 F6 | 	mov	arg01, result1
12824     0C 4E 05 F1 | 	add	fp, #12
12828     A7 14 02 FB | 	rdlong	arg02, fp
1282c     0C 4E 85 F1 | 	sub	fp, #12
12830     01 16 66 F6 | 	neg	arg03, #1
12834     58 F2 B0 FD | 	call	#__system___float_cmp
12838     00 FA 55 F2 | 	cmps	result1, #0 wc
1283c     00 1E 26 36 |  if_ae	not	local01, #0
12840     A7 1E 62 FC | 	wrlong	local01, fp
12844     A0 01 90 FD | 	jmp	#LR__1483
12848                 | LR__1477
12848                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
12848     08 4E 05 F1 | 	add	fp, #8
1284c     A7 1E 02 FB | 	rdlong	local01, fp
12850     08 4E 85 F1 | 	sub	fp, #8
12854     1D 1E 0E F2 | 	cmp	local01, #29 wz
12858     14 4E 05 A1 |  if_e	add	fp, #20
1285c     A7 22 02 AB |  if_e	rdlong	local03, fp
12860     14 4E 85 A1 |  if_e	sub	fp, #20
12864     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12868     24 00 90 5D |  if_ne	jmp	#LR__1478
1286c     00 1E 06 F6 | 	mov	local01, #0
12870     A7 20 02 FB | 	rdlong	local02, fp
12874     0C 4E 05 F1 | 	add	fp, #12
12878     A7 22 02 FB | 	rdlong	local03, fp
1287c     0C 4E 85 F1 | 	sub	fp, #12
12880     11 21 52 F2 | 	cmps	local02, local03 wc
12884     01 1E 66 36 |  if_ae	neg	local01, #1
12888     A7 1E 62 FC | 	wrlong	local01, fp
1288c     58 01 90 FD | 	jmp	#LR__1483
12890                 | LR__1478
12890                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
12890     08 4E 05 F1 | 	add	fp, #8
12894     A7 1E 02 FB | 	rdlong	local01, fp
12898     08 4E 85 F1 | 	sub	fp, #8
1289c     1D 1E 0E F2 | 	cmp	local01, #29 wz
128a0     14 4E 05 A1 |  if_e	add	fp, #20
128a4     A7 22 02 AB |  if_e	rdlong	local03, fp
128a8     14 4E 85 A1 |  if_e	sub	fp, #20
128ac     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
128b0     24 00 90 5D |  if_ne	jmp	#LR__1479
128b4     00 1E 06 F6 | 	mov	local01, #0
128b8     A7 20 02 FB | 	rdlong	local02, fp
128bc     0C 4E 05 F1 | 	add	fp, #12
128c0     A7 22 02 FB | 	rdlong	local03, fp
128c4     0C 4E 85 F1 | 	sub	fp, #12
128c8     11 21 12 F2 | 	cmp	local02, local03 wc
128cc     01 1E 66 36 |  if_ae	neg	local01, #1
128d0     A7 1E 62 FC | 	wrlong	local01, fp
128d4     10 01 90 FD | 	jmp	#LR__1483
128d8                 | LR__1479
128d8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
128d8     08 4E 05 F1 | 	add	fp, #8
128dc     A7 1E 02 FB | 	rdlong	local01, fp
128e0     08 4E 85 F1 | 	sub	fp, #8
128e4     2B 1E 0E F2 | 	cmp	local01, #43 wz
128e8     14 4E 05 A1 |  if_e	add	fp, #20
128ec     A7 22 02 AB |  if_e	rdlong	local03, fp
128f0     14 4E 85 A1 |  if_e	sub	fp, #20
128f4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
128f8     30 00 90 5D |  if_ne	jmp	#LR__1480
128fc     00 1E 06 F6 | 	mov	local01, #0
12900     A7 12 02 FB | 	rdlong	arg01, fp
12904     8C C2 BF FD | 	call	#_convertstring
12908     FD 12 02 F6 | 	mov	arg01, result1
1290c     0C 4E 05 F1 | 	add	fp, #12
12910     A7 14 02 FB | 	rdlong	arg02, fp
12914     0C 4E 85 F1 | 	sub	fp, #12
12918     20 C2 B0 FD | 	call	#__system___string_cmp
1291c     00 FA 55 F2 | 	cmps	result1, #0 wc
12920     00 1E 26 36 |  if_ae	not	local01, #0
12924     A7 1E 62 FC | 	wrlong	local01, fp
12928     BC 00 90 FD | 	jmp	#LR__1483
1292c                 | LR__1480
1292c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1292c     08 4E 05 F1 | 	add	fp, #8
12930     A7 1E 02 FB | 	rdlong	local01, fp
12934     08 4E 85 F1 | 	sub	fp, #8
12938     1F 1E 0E F2 | 	cmp	local01, #31 wz
1293c     14 4E 05 A1 |  if_e	add	fp, #20
12940     A7 22 02 AB |  if_e	rdlong	local03, fp
12944     14 4E 85 A1 |  if_e	sub	fp, #20
12948     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1294c     34 00 90 5D |  if_ne	jmp	#LR__1481
12950     00 1E 06 F6 | 	mov	local01, #0
12954     A7 20 02 FB | 	rdlong	local02, fp
12958     0C 4E 05 F1 | 	add	fp, #12
1295c     A7 12 02 FB | 	rdlong	arg01, fp
12960     0C 4E 85 F1 | 	sub	fp, #12
12964     2C C2 BF FD | 	call	#_convertstring
12968     FD 14 02 F6 | 	mov	arg02, result1
1296c     10 13 02 F6 | 	mov	arg01, local02
12970     C8 C1 B0 FD | 	call	#__system___string_cmp
12974     00 FA 55 F2 | 	cmps	result1, #0 wc
12978     00 1E 26 36 |  if_ae	not	local01, #0
1297c     A7 1E 62 FC | 	wrlong	local01, fp
12980     64 00 90 FD | 	jmp	#LR__1483
12984                 | LR__1481
12984                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
12984     08 4E 05 F1 | 	add	fp, #8
12988     A7 1E 02 FB | 	rdlong	local01, fp
1298c     08 4E 85 F1 | 	sub	fp, #8
12990     2B 1E 0E F2 | 	cmp	local01, #43 wz
12994     14 4E 05 A1 |  if_e	add	fp, #20
12998     A7 22 02 AB |  if_e	rdlong	local03, fp
1299c     14 4E 85 A1 |  if_e	sub	fp, #20
129a0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
129a4     3C 00 90 5D |  if_ne	jmp	#LR__1482
129a8     00 1E 06 F6 | 	mov	local01, #0
129ac     A7 12 02 FB | 	rdlong	arg01, fp
129b0     E0 C1 BF FD | 	call	#_convertstring
129b4     FD 20 02 F6 | 	mov	local02, result1
129b8     0C 4E 05 F1 | 	add	fp, #12
129bc     A7 12 02 FB | 	rdlong	arg01, fp
129c0     0C 4E 85 F1 | 	sub	fp, #12
129c4     CC C1 BF FD | 	call	#_convertstring
129c8     FD 14 02 F6 | 	mov	arg02, result1
129cc     10 13 02 F6 | 	mov	arg01, local02
129d0     68 C1 B0 FD | 	call	#__system___string_cmp
129d4     00 FA 55 F2 | 	cmps	result1, #0 wc
129d8     00 1E 26 36 |  if_ae	not	local01, #0
129dc     A7 1E 62 FC | 	wrlong	local01, fp
129e0     04 00 90 FD | 	jmp	#LR__1483
129e4                 | LR__1482
129e4     A7 00 68 FC | 	wrlong	#0, fp
129e8                 | LR__1483
129e8     08 4E 05 F1 | 	add	fp, #8
129ec     A7 38 68 FC | 	wrlong	#28, fp
129f0     08 4E 85 F1 | 	sub	fp, #8
129f4     A7 12 02 F6 | 	mov	arg01, fp
129f8     14 7F BF FD | 	call	#_push
129fc     A7 F0 03 F6 | 	mov	ptra, fp
12a00     B2 00 A0 FD | 	call	#popregs_
12a04                 | _do_ge_ret
12a04     2D 00 64 FD | 	ret
12a08                 | 
12a08                 | ' 
12a08                 | ' sub do_le
12a08                 | _do_le
12a08     05 4A 05 F6 | 	mov	COUNT_, #5
12a0c     A8 00 A0 FD | 	call	#pushregs_
12a10     18 F0 07 F1 | 	add	ptra, #24
12a14     60 7E BF FD | 	call	#_pop
12a18     FD 1E 02 F6 | 	mov	local01, result1
12a1c     FE 20 02 F6 | 	mov	local02, result2
12a20     FF 22 02 F6 | 	mov	local03, result3
12a24     0C 4E 05 F1 | 	add	fp, #12
12a28     A7 1E 62 FC | 	wrlong	local01, fp
12a2c     04 4E 05 F1 | 	add	fp, #4
12a30     A7 20 62 FC | 	wrlong	local02, fp
12a34     04 4E 05 F1 | 	add	fp, #4
12a38     A7 22 62 FC | 	wrlong	local03, fp
12a3c     14 4E 85 F1 | 	sub	fp, #20
12a40     34 7E BF FD | 	call	#_pop
12a44     FF 22 02 F6 | 	mov	local03, result3
12a48     A7 FA 61 FC | 	wrlong	result1, fp
12a4c     04 4E 05 F1 | 	add	fp, #4
12a50     A7 FC 61 FC | 	wrlong	result2, fp
12a54     04 4E 05 F1 | 	add	fp, #4
12a58     A7 22 62 FC | 	wrlong	local03, fp
12a5c                 | ' t2=pop()
12a5c                 | ' t1=pop()
12a5c                 | ' 
12a5c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
12a5c     08 4E 85 F1 | 	sub	fp, #8
12a60     1F 22 0E F2 | 	cmp	local03, #31 wz
12a64     14 4E 05 A1 |  if_e	add	fp, #20
12a68     A7 24 02 AB |  if_e	rdlong	local04, fp
12a6c     14 4E 85 A1 |  if_e	sub	fp, #20
12a70     12 23 02 A6 |  if_e	mov	local03, local04
12a74     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12a78     28 00 90 5D |  if_ne	jmp	#LR__1490
12a7c     00 1E 06 F6 | 	mov	local01, #0
12a80     A7 12 02 FB | 	rdlong	arg01, fp
12a84     0C 4E 05 F1 | 	add	fp, #12
12a88     A7 14 02 FB | 	rdlong	arg02, fp
12a8c     0C 4E 85 F1 | 	sub	fp, #12
12a90     A8 C0 B0 FD | 	call	#__system___string_cmp
12a94     01 FA 55 F2 | 	cmps	result1, #1 wc
12a98     00 1E 26 C6 |  if_b	not	local01, #0
12a9c     A7 1E 62 FC | 	wrlong	local01, fp
12aa0     1C 04 90 FD | 	jmp	#LR__1503
12aa4                 | LR__1490
12aa4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
12aa4     08 4E 05 F1 | 	add	fp, #8
12aa8     A7 1E 02 FB | 	rdlong	local01, fp
12aac     08 4E 85 F1 | 	sub	fp, #8
12ab0     1E 1E 0E F2 | 	cmp	local01, #30 wz
12ab4     14 4E 05 A1 |  if_e	add	fp, #20
12ab8     A7 24 02 AB |  if_e	rdlong	local04, fp
12abc     14 4E 85 A1 |  if_e	sub	fp, #20
12ac0     12 23 02 A6 |  if_e	mov	local03, local04
12ac4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12ac8     2C 00 90 5D |  if_ne	jmp	#LR__1491
12acc     00 1E 06 F6 | 	mov	local01, #0
12ad0     A7 12 02 FB | 	rdlong	arg01, fp
12ad4     0C 4E 05 F1 | 	add	fp, #12
12ad8     A7 14 02 FB | 	rdlong	arg02, fp
12adc     0C 4E 85 F1 | 	sub	fp, #12
12ae0     01 16 06 F6 | 	mov	arg03, #1
12ae4     A8 EF B0 FD | 	call	#__system___float_cmp
12ae8     01 FA 55 F2 | 	cmps	result1, #1 wc
12aec     00 1E 26 C6 |  if_b	not	local01, #0
12af0     A7 1E 62 FC | 	wrlong	local01, fp
12af4     C8 03 90 FD | 	jmp	#LR__1503
12af8                 | LR__1491
12af8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
12af8     08 4E 05 F1 | 	add	fp, #8
12afc     A7 1E 02 FB | 	rdlong	local01, fp
12b00     08 4E 85 F1 | 	sub	fp, #8
12b04     1E 1E 0E F2 | 	cmp	local01, #30 wz
12b08     14 4E 05 A1 |  if_e	add	fp, #20
12b0c     A7 24 02 AB |  if_e	rdlong	local04, fp
12b10     14 4E 85 A1 |  if_e	sub	fp, #20
12b14     12 23 02 A6 |  if_e	mov	local03, local04
12b18     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12b1c     48 00 90 5D |  if_ne	jmp	#LR__1492
12b20     00 1E 06 F6 | 	mov	local01, #0
12b24     A7 20 02 FB | 	rdlong	local02, fp
12b28     0C 4E 05 F1 | 	add	fp, #12
12b2c     A7 12 02 FB | 	rdlong	arg01, fp
12b30     0C 4E 85 F1 | 	sub	fp, #12
12b34     09 13 52 F6 | 	abs	arg01, arg01 wc
12b38     1F 26 C6 C9 |  if_b	decod	local05, #31
12b3c     00 26 06 36 |  if_ae	mov	local05, #0
12b40     14 E7 B0 FD | 	call	#__system___float_fromuns
12b44     13 FB 61 F5 | 	xor	result1, local05
12b48     FD 14 02 F6 | 	mov	arg02, result1
12b4c     10 13 02 F6 | 	mov	arg01, local02
12b50     01 16 06 F6 | 	mov	arg03, #1
12b54     38 EF B0 FD | 	call	#__system___float_cmp
12b58     01 FA 55 F2 | 	cmps	result1, #1 wc
12b5c     00 1E 26 C6 |  if_b	not	local01, #0
12b60     A7 1E 62 FC | 	wrlong	local01, fp
12b64     58 03 90 FD | 	jmp	#LR__1503
12b68                 | LR__1492
12b68                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
12b68     08 4E 05 F1 | 	add	fp, #8
12b6c     A7 1E 02 FB | 	rdlong	local01, fp
12b70     08 4E 85 F1 | 	sub	fp, #8
12b74     1E 1E 0E F2 | 	cmp	local01, #30 wz
12b78     14 4E 05 A1 |  if_e	add	fp, #20
12b7c     A7 24 02 AB |  if_e	rdlong	local04, fp
12b80     14 4E 85 A1 |  if_e	sub	fp, #20
12b84     12 23 02 A6 |  if_e	mov	local03, local04
12b88     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12b8c     38 00 90 5D |  if_ne	jmp	#LR__1493
12b90     00 1E 06 F6 | 	mov	local01, #0
12b94     A7 20 02 FB | 	rdlong	local02, fp
12b98     0C 4E 05 F1 | 	add	fp, #12
12b9c     A7 12 02 FB | 	rdlong	arg01, fp
12ba0     0C 4E 85 F1 | 	sub	fp, #12
12ba4     B0 E6 B0 FD | 	call	#__system___float_fromuns
12ba8     FD 14 02 F6 | 	mov	arg02, result1
12bac     10 13 02 F6 | 	mov	arg01, local02
12bb0     01 16 06 F6 | 	mov	arg03, #1
12bb4     D8 EE B0 FD | 	call	#__system___float_cmp
12bb8     01 FA 55 F2 | 	cmps	result1, #1 wc
12bbc     00 1E 26 C6 |  if_b	not	local01, #0
12bc0     A7 1E 62 FC | 	wrlong	local01, fp
12bc4     F8 02 90 FD | 	jmp	#LR__1503
12bc8                 | LR__1493
12bc8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
12bc8     08 4E 05 F1 | 	add	fp, #8
12bcc     A7 1E 02 FB | 	rdlong	local01, fp
12bd0     08 4E 85 F1 | 	sub	fp, #8
12bd4     1C 1E 0E F2 | 	cmp	local01, #28 wz
12bd8     14 4E 05 A1 |  if_e	add	fp, #20
12bdc     A7 24 02 AB |  if_e	rdlong	local04, fp
12be0     14 4E 85 A1 |  if_e	sub	fp, #20
12be4     12 23 02 A6 |  if_e	mov	local03, local04
12be8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12bec     44 00 90 5D |  if_ne	jmp	#LR__1494
12bf0     00 1E 06 F6 | 	mov	local01, #0
12bf4     A7 12 02 FB | 	rdlong	arg01, fp
12bf8     09 13 52 F6 | 	abs	arg01, arg01 wc
12bfc     1F 26 C6 C9 |  if_b	decod	local05, #31
12c00     00 26 06 36 |  if_ae	mov	local05, #0
12c04     50 E6 B0 FD | 	call	#__system___float_fromuns
12c08     13 FB 61 F5 | 	xor	result1, local05
12c0c     FD 12 02 F6 | 	mov	arg01, result1
12c10     0C 4E 05 F1 | 	add	fp, #12
12c14     A7 14 02 FB | 	rdlong	arg02, fp
12c18     0C 4E 85 F1 | 	sub	fp, #12
12c1c     01 16 06 F6 | 	mov	arg03, #1
12c20     6C EE B0 FD | 	call	#__system___float_cmp
12c24     01 FA 55 F2 | 	cmps	result1, #1 wc
12c28     00 1E 26 C6 |  if_b	not	local01, #0
12c2c     A7 1E 62 FC | 	wrlong	local01, fp
12c30     8C 02 90 FD | 	jmp	#LR__1503
12c34                 | LR__1494
12c34                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
12c34     08 4E 05 F1 | 	add	fp, #8
12c38     A7 1E 02 FB | 	rdlong	local01, fp
12c3c     08 4E 85 F1 | 	sub	fp, #8
12c40     1C 1E 0E F2 | 	cmp	local01, #28 wz
12c44     14 4E 05 A1 |  if_e	add	fp, #20
12c48     A7 24 02 AB |  if_e	rdlong	local04, fp
12c4c     14 4E 85 A1 |  if_e	sub	fp, #20
12c50     12 23 02 A6 |  if_e	mov	local03, local04
12c54     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12c58     24 00 90 5D |  if_ne	jmp	#LR__1495
12c5c     00 1E 06 F6 | 	mov	local01, #0
12c60     A7 20 02 FB | 	rdlong	local02, fp
12c64     0C 4E 05 F1 | 	add	fp, #12
12c68     A7 22 02 FB | 	rdlong	local03, fp
12c6c     0C 4E 85 F1 | 	sub	fp, #12
12c70     11 21 5A F2 | 	cmps	local02, local03 wcz
12c74     01 1E 66 E6 |  if_be	neg	local01, #1
12c78     A7 1E 62 FC | 	wrlong	local01, fp
12c7c     40 02 90 FD | 	jmp	#LR__1503
12c80                 | LR__1495
12c80                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
12c80     08 4E 05 F1 | 	add	fp, #8
12c84     A7 1E 02 FB | 	rdlong	local01, fp
12c88     08 4E 85 F1 | 	sub	fp, #8
12c8c     1C 1E 0E F2 | 	cmp	local01, #28 wz
12c90     14 4E 05 A1 |  if_e	add	fp, #20
12c94     A7 24 02 AB |  if_e	rdlong	local04, fp
12c98     14 4E 85 A1 |  if_e	sub	fp, #20
12c9c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
12ca0     24 00 90 5D |  if_ne	jmp	#LR__1496
12ca4     00 1E 06 F6 | 	mov	local01, #0
12ca8     A7 20 02 FB | 	rdlong	local02, fp
12cac     0C 4E 05 F1 | 	add	fp, #12
12cb0     A7 22 02 FB | 	rdlong	local03, fp
12cb4     0C 4E 85 F1 | 	sub	fp, #12
12cb8     11 21 5A F2 | 	cmps	local02, local03 wcz
12cbc     01 1E 66 E6 |  if_be	neg	local01, #1
12cc0     A7 1E 62 FC | 	wrlong	local01, fp
12cc4     F8 01 90 FD | 	jmp	#LR__1503
12cc8                 | LR__1496
12cc8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
12cc8     08 4E 05 F1 | 	add	fp, #8
12ccc     A7 1E 02 FB | 	rdlong	local01, fp
12cd0     08 4E 85 F1 | 	sub	fp, #8
12cd4     1D 1E 0E F2 | 	cmp	local01, #29 wz
12cd8     14 4E 05 A1 |  if_e	add	fp, #20
12cdc     A7 22 02 AB |  if_e	rdlong	local03, fp
12ce0     14 4E 85 A1 |  if_e	sub	fp, #20
12ce4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12ce8     34 00 90 5D |  if_ne	jmp	#LR__1497
12cec     00 1E 06 F6 | 	mov	local01, #0
12cf0     A7 12 02 FB | 	rdlong	arg01, fp
12cf4     60 E5 B0 FD | 	call	#__system___float_fromuns
12cf8     FD 12 02 F6 | 	mov	arg01, result1
12cfc     0C 4E 05 F1 | 	add	fp, #12
12d00     A7 14 02 FB | 	rdlong	arg02, fp
12d04     0C 4E 85 F1 | 	sub	fp, #12
12d08     01 16 06 F6 | 	mov	arg03, #1
12d0c     80 ED B0 FD | 	call	#__system___float_cmp
12d10     01 FA 55 F2 | 	cmps	result1, #1 wc
12d14     00 1E 26 C6 |  if_b	not	local01, #0
12d18     A7 1E 62 FC | 	wrlong	local01, fp
12d1c     A0 01 90 FD | 	jmp	#LR__1503
12d20                 | LR__1497
12d20                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
12d20     08 4E 05 F1 | 	add	fp, #8
12d24     A7 1E 02 FB | 	rdlong	local01, fp
12d28     08 4E 85 F1 | 	sub	fp, #8
12d2c     1D 1E 0E F2 | 	cmp	local01, #29 wz
12d30     14 4E 05 A1 |  if_e	add	fp, #20
12d34     A7 22 02 AB |  if_e	rdlong	local03, fp
12d38     14 4E 85 A1 |  if_e	sub	fp, #20
12d3c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12d40     24 00 90 5D |  if_ne	jmp	#LR__1498
12d44     00 1E 06 F6 | 	mov	local01, #0
12d48     A7 20 02 FB | 	rdlong	local02, fp
12d4c     0C 4E 05 F1 | 	add	fp, #12
12d50     A7 22 02 FB | 	rdlong	local03, fp
12d54     0C 4E 85 F1 | 	sub	fp, #12
12d58     11 21 5A F2 | 	cmps	local02, local03 wcz
12d5c     01 1E 66 E6 |  if_be	neg	local01, #1
12d60     A7 1E 62 FC | 	wrlong	local01, fp
12d64     58 01 90 FD | 	jmp	#LR__1503
12d68                 | LR__1498
12d68                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
12d68     08 4E 05 F1 | 	add	fp, #8
12d6c     A7 1E 02 FB | 	rdlong	local01, fp
12d70     08 4E 85 F1 | 	sub	fp, #8
12d74     1D 1E 0E F2 | 	cmp	local01, #29 wz
12d78     14 4E 05 A1 |  if_e	add	fp, #20
12d7c     A7 22 02 AB |  if_e	rdlong	local03, fp
12d80     14 4E 85 A1 |  if_e	sub	fp, #20
12d84     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
12d88     24 00 90 5D |  if_ne	jmp	#LR__1499
12d8c     00 1E 06 F6 | 	mov	local01, #0
12d90     A7 20 02 FB | 	rdlong	local02, fp
12d94     0C 4E 05 F1 | 	add	fp, #12
12d98     A7 22 02 FB | 	rdlong	local03, fp
12d9c     0C 4E 85 F1 | 	sub	fp, #12
12da0     11 21 1A F2 | 	cmp	local02, local03 wcz
12da4     01 1E 66 E6 |  if_be	neg	local01, #1
12da8     A7 1E 62 FC | 	wrlong	local01, fp
12dac     10 01 90 FD | 	jmp	#LR__1503
12db0                 | LR__1499
12db0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
12db0     08 4E 05 F1 | 	add	fp, #8
12db4     A7 1E 02 FB | 	rdlong	local01, fp
12db8     08 4E 85 F1 | 	sub	fp, #8
12dbc     2B 1E 0E F2 | 	cmp	local01, #43 wz
12dc0     14 4E 05 A1 |  if_e	add	fp, #20
12dc4     A7 22 02 AB |  if_e	rdlong	local03, fp
12dc8     14 4E 85 A1 |  if_e	sub	fp, #20
12dcc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12dd0     30 00 90 5D |  if_ne	jmp	#LR__1500
12dd4     00 1E 06 F6 | 	mov	local01, #0
12dd8     A7 12 02 FB | 	rdlong	arg01, fp
12ddc     B4 BD BF FD | 	call	#_convertstring
12de0     FD 12 02 F6 | 	mov	arg01, result1
12de4     0C 4E 05 F1 | 	add	fp, #12
12de8     A7 14 02 FB | 	rdlong	arg02, fp
12dec     0C 4E 85 F1 | 	sub	fp, #12
12df0     48 BD B0 FD | 	call	#__system___string_cmp
12df4     01 FA 55 F2 | 	cmps	result1, #1 wc
12df8     00 1E 26 C6 |  if_b	not	local01, #0
12dfc     A7 1E 62 FC | 	wrlong	local01, fp
12e00     BC 00 90 FD | 	jmp	#LR__1503
12e04                 | LR__1500
12e04                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
12e04     08 4E 05 F1 | 	add	fp, #8
12e08     A7 1E 02 FB | 	rdlong	local01, fp
12e0c     08 4E 85 F1 | 	sub	fp, #8
12e10     1F 1E 0E F2 | 	cmp	local01, #31 wz
12e14     14 4E 05 A1 |  if_e	add	fp, #20
12e18     A7 22 02 AB |  if_e	rdlong	local03, fp
12e1c     14 4E 85 A1 |  if_e	sub	fp, #20
12e20     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12e24     34 00 90 5D |  if_ne	jmp	#LR__1501
12e28     00 1E 06 F6 | 	mov	local01, #0
12e2c     A7 20 02 FB | 	rdlong	local02, fp
12e30     0C 4E 05 F1 | 	add	fp, #12
12e34     A7 12 02 FB | 	rdlong	arg01, fp
12e38     0C 4E 85 F1 | 	sub	fp, #12
12e3c     54 BD BF FD | 	call	#_convertstring
12e40     FD 14 02 F6 | 	mov	arg02, result1
12e44     10 13 02 F6 | 	mov	arg01, local02
12e48     F0 BC B0 FD | 	call	#__system___string_cmp
12e4c     01 FA 55 F2 | 	cmps	result1, #1 wc
12e50     00 1E 26 C6 |  if_b	not	local01, #0
12e54     A7 1E 62 FC | 	wrlong	local01, fp
12e58     64 00 90 FD | 	jmp	#LR__1503
12e5c                 | LR__1501
12e5c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
12e5c     08 4E 05 F1 | 	add	fp, #8
12e60     A7 1E 02 FB | 	rdlong	local01, fp
12e64     08 4E 85 F1 | 	sub	fp, #8
12e68     2B 1E 0E F2 | 	cmp	local01, #43 wz
12e6c     14 4E 05 A1 |  if_e	add	fp, #20
12e70     A7 22 02 AB |  if_e	rdlong	local03, fp
12e74     14 4E 85 A1 |  if_e	sub	fp, #20
12e78     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
12e7c     3C 00 90 5D |  if_ne	jmp	#LR__1502
12e80     00 1E 06 F6 | 	mov	local01, #0
12e84     A7 12 02 FB | 	rdlong	arg01, fp
12e88     08 BD BF FD | 	call	#_convertstring
12e8c     FD 20 02 F6 | 	mov	local02, result1
12e90     0C 4E 05 F1 | 	add	fp, #12
12e94     A7 12 02 FB | 	rdlong	arg01, fp
12e98     0C 4E 85 F1 | 	sub	fp, #12
12e9c     F4 BC BF FD | 	call	#_convertstring
12ea0     FD 14 02 F6 | 	mov	arg02, result1
12ea4     10 13 02 F6 | 	mov	arg01, local02
12ea8     90 BC B0 FD | 	call	#__system___string_cmp
12eac     01 FA 55 F2 | 	cmps	result1, #1 wc
12eb0     00 1E 26 C6 |  if_b	not	local01, #0
12eb4     A7 1E 62 FC | 	wrlong	local01, fp
12eb8     04 00 90 FD | 	jmp	#LR__1503
12ebc                 | LR__1502
12ebc     A7 00 68 FC | 	wrlong	#0, fp
12ec0                 | LR__1503
12ec0     08 4E 05 F1 | 	add	fp, #8
12ec4     A7 38 68 FC | 	wrlong	#28, fp
12ec8     08 4E 85 F1 | 	sub	fp, #8
12ecc     A7 12 02 F6 | 	mov	arg01, fp
12ed0     3C 7A BF FD | 	call	#_push
12ed4     A7 F0 03 F6 | 	mov	ptra, fp
12ed8     B2 00 A0 FD | 	call	#popregs_
12edc                 | _do_le_ret
12edc     2D 00 64 FD | 	ret
12ee0                 | 
12ee0                 | ' 
12ee0                 | ' 
12ee0                 | ' sub do_ne
12ee0                 | _do_ne
12ee0     05 4A 05 F6 | 	mov	COUNT_, #5
12ee4     A8 00 A0 FD | 	call	#pushregs_
12ee8     18 F0 07 F1 | 	add	ptra, #24
12eec     88 79 BF FD | 	call	#_pop
12ef0     FD 1E 02 F6 | 	mov	local01, result1
12ef4     FE 20 02 F6 | 	mov	local02, result2
12ef8     FF 22 02 F6 | 	mov	local03, result3
12efc     0C 4E 05 F1 | 	add	fp, #12
12f00     A7 1E 62 FC | 	wrlong	local01, fp
12f04     04 4E 05 F1 | 	add	fp, #4
12f08     A7 20 62 FC | 	wrlong	local02, fp
12f0c     04 4E 05 F1 | 	add	fp, #4
12f10     A7 22 62 FC | 	wrlong	local03, fp
12f14     14 4E 85 F1 | 	sub	fp, #20
12f18     5C 79 BF FD | 	call	#_pop
12f1c     FF 22 02 F6 | 	mov	local03, result3
12f20     A7 FA 61 FC | 	wrlong	result1, fp
12f24     04 4E 05 F1 | 	add	fp, #4
12f28     A7 FC 61 FC | 	wrlong	result2, fp
12f2c     04 4E 05 F1 | 	add	fp, #4
12f30     A7 22 62 FC | 	wrlong	local03, fp
12f34                 | ' t2=pop()
12f34                 | ' t1=pop()
12f34                 | ' 
12f34                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
12f34     08 4E 85 F1 | 	sub	fp, #8
12f38     1F 22 0E F2 | 	cmp	local03, #31 wz
12f3c     14 4E 05 A1 |  if_e	add	fp, #20
12f40     A7 24 02 AB |  if_e	rdlong	local04, fp
12f44     14 4E 85 A1 |  if_e	sub	fp, #20
12f48     12 23 02 A6 |  if_e	mov	local03, local04
12f4c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
12f50     28 00 90 5D |  if_ne	jmp	#LR__1510
12f54     00 1E 06 F6 | 	mov	local01, #0
12f58     A7 12 02 FB | 	rdlong	arg01, fp
12f5c     0C 4E 05 F1 | 	add	fp, #12
12f60     A7 14 02 FB | 	rdlong	arg02, fp
12f64     0C 4E 85 F1 | 	sub	fp, #12
12f68     D0 BB B0 FD | 	call	#__system___string_cmp
12f6c     00 FA 0D F2 | 	cmp	result1, #0 wz
12f70     00 1E 26 56 |  if_ne	not	local01, #0
12f74     A7 1E 62 FC | 	wrlong	local01, fp
12f78     1C 04 90 FD | 	jmp	#LR__1523
12f7c                 | LR__1510
12f7c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
12f7c     08 4E 05 F1 | 	add	fp, #8
12f80     A7 1E 02 FB | 	rdlong	local01, fp
12f84     08 4E 85 F1 | 	sub	fp, #8
12f88     1E 1E 0E F2 | 	cmp	local01, #30 wz
12f8c     14 4E 05 A1 |  if_e	add	fp, #20
12f90     A7 24 02 AB |  if_e	rdlong	local04, fp
12f94     14 4E 85 A1 |  if_e	sub	fp, #20
12f98     12 23 02 A6 |  if_e	mov	local03, local04
12f9c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
12fa0     2C 00 90 5D |  if_ne	jmp	#LR__1511
12fa4     00 1E 06 F6 | 	mov	local01, #0
12fa8     A7 12 02 FB | 	rdlong	arg01, fp
12fac     0C 4E 05 F1 | 	add	fp, #12
12fb0     A7 14 02 FB | 	rdlong	arg02, fp
12fb4     0C 4E 85 F1 | 	sub	fp, #12
12fb8     01 16 06 F6 | 	mov	arg03, #1
12fbc     D0 EA B0 FD | 	call	#__system___float_cmp
12fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
12fc4     00 1E 26 56 |  if_ne	not	local01, #0
12fc8     A7 1E 62 FC | 	wrlong	local01, fp
12fcc     C8 03 90 FD | 	jmp	#LR__1523
12fd0                 | LR__1511
12fd0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
12fd0     08 4E 05 F1 | 	add	fp, #8
12fd4     A7 1E 02 FB | 	rdlong	local01, fp
12fd8     08 4E 85 F1 | 	sub	fp, #8
12fdc     1E 1E 0E F2 | 	cmp	local01, #30 wz
12fe0     14 4E 05 A1 |  if_e	add	fp, #20
12fe4     A7 24 02 AB |  if_e	rdlong	local04, fp
12fe8     14 4E 85 A1 |  if_e	sub	fp, #20
12fec     12 23 02 A6 |  if_e	mov	local03, local04
12ff0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
12ff4     48 00 90 5D |  if_ne	jmp	#LR__1512
12ff8     00 1E 06 F6 | 	mov	local01, #0
12ffc     A7 20 02 FB | 	rdlong	local02, fp
13000     0C 4E 05 F1 | 	add	fp, #12
13004     A7 12 02 FB | 	rdlong	arg01, fp
13008     0C 4E 85 F1 | 	sub	fp, #12
1300c     09 13 52 F6 | 	abs	arg01, arg01 wc
13010     1F 26 C6 C9 |  if_b	decod	local05, #31
13014     00 26 06 36 |  if_ae	mov	local05, #0
13018     3C E2 B0 FD | 	call	#__system___float_fromuns
1301c     13 FB 61 F5 | 	xor	result1, local05
13020     FD 14 02 F6 | 	mov	arg02, result1
13024     10 13 02 F6 | 	mov	arg01, local02
13028     01 16 06 F6 | 	mov	arg03, #1
1302c     60 EA B0 FD | 	call	#__system___float_cmp
13030     00 FA 0D F2 | 	cmp	result1, #0 wz
13034     00 1E 26 56 |  if_ne	not	local01, #0
13038     A7 1E 62 FC | 	wrlong	local01, fp
1303c     58 03 90 FD | 	jmp	#LR__1523
13040                 | LR__1512
13040                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
13040     08 4E 05 F1 | 	add	fp, #8
13044     A7 1E 02 FB | 	rdlong	local01, fp
13048     08 4E 85 F1 | 	sub	fp, #8
1304c     1E 1E 0E F2 | 	cmp	local01, #30 wz
13050     14 4E 05 A1 |  if_e	add	fp, #20
13054     A7 24 02 AB |  if_e	rdlong	local04, fp
13058     14 4E 85 A1 |  if_e	sub	fp, #20
1305c     12 23 02 A6 |  if_e	mov	local03, local04
13060     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
13064     38 00 90 5D |  if_ne	jmp	#LR__1513
13068     00 1E 06 F6 | 	mov	local01, #0
1306c     A7 20 02 FB | 	rdlong	local02, fp
13070     0C 4E 05 F1 | 	add	fp, #12
13074     A7 12 02 FB | 	rdlong	arg01, fp
13078     0C 4E 85 F1 | 	sub	fp, #12
1307c     D8 E1 B0 FD | 	call	#__system___float_fromuns
13080     FD 14 02 F6 | 	mov	arg02, result1
13084     10 13 02 F6 | 	mov	arg01, local02
13088     01 16 06 F6 | 	mov	arg03, #1
1308c     00 EA B0 FD | 	call	#__system___float_cmp
13090     00 FA 0D F2 | 	cmp	result1, #0 wz
13094     00 1E 26 56 |  if_ne	not	local01, #0
13098     A7 1E 62 FC | 	wrlong	local01, fp
1309c     F8 02 90 FD | 	jmp	#LR__1523
130a0                 | LR__1513
130a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
130a0     08 4E 05 F1 | 	add	fp, #8
130a4     A7 1E 02 FB | 	rdlong	local01, fp
130a8     08 4E 85 F1 | 	sub	fp, #8
130ac     1C 1E 0E F2 | 	cmp	local01, #28 wz
130b0     14 4E 05 A1 |  if_e	add	fp, #20
130b4     A7 24 02 AB |  if_e	rdlong	local04, fp
130b8     14 4E 85 A1 |  if_e	sub	fp, #20
130bc     12 23 02 A6 |  if_e	mov	local03, local04
130c0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
130c4     44 00 90 5D |  if_ne	jmp	#LR__1514
130c8     00 1E 06 F6 | 	mov	local01, #0
130cc     A7 12 02 FB | 	rdlong	arg01, fp
130d0     09 13 52 F6 | 	abs	arg01, arg01 wc
130d4     1F 26 C6 C9 |  if_b	decod	local05, #31
130d8     00 26 06 36 |  if_ae	mov	local05, #0
130dc     78 E1 B0 FD | 	call	#__system___float_fromuns
130e0     13 FB 61 F5 | 	xor	result1, local05
130e4     FD 12 02 F6 | 	mov	arg01, result1
130e8     0C 4E 05 F1 | 	add	fp, #12
130ec     A7 14 02 FB | 	rdlong	arg02, fp
130f0     0C 4E 85 F1 | 	sub	fp, #12
130f4     01 16 06 F6 | 	mov	arg03, #1
130f8     94 E9 B0 FD | 	call	#__system___float_cmp
130fc     00 FA 0D F2 | 	cmp	result1, #0 wz
13100     00 1E 26 56 |  if_ne	not	local01, #0
13104     A7 1E 62 FC | 	wrlong	local01, fp
13108     8C 02 90 FD | 	jmp	#LR__1523
1310c                 | LR__1514
1310c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1310c     08 4E 05 F1 | 	add	fp, #8
13110     A7 1E 02 FB | 	rdlong	local01, fp
13114     08 4E 85 F1 | 	sub	fp, #8
13118     1C 1E 0E F2 | 	cmp	local01, #28 wz
1311c     14 4E 05 A1 |  if_e	add	fp, #20
13120     A7 24 02 AB |  if_e	rdlong	local04, fp
13124     14 4E 85 A1 |  if_e	sub	fp, #20
13128     12 23 02 A6 |  if_e	mov	local03, local04
1312c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13130     24 00 90 5D |  if_ne	jmp	#LR__1515
13134     00 1E 06 F6 | 	mov	local01, #0
13138     A7 20 02 FB | 	rdlong	local02, fp
1313c     0C 4E 05 F1 | 	add	fp, #12
13140     A7 22 02 FB | 	rdlong	local03, fp
13144     0C 4E 85 F1 | 	sub	fp, #12
13148     11 21 0A F2 | 	cmp	local02, local03 wz
1314c     01 1E 66 56 |  if_ne	neg	local01, #1
13150     A7 1E 62 FC | 	wrlong	local01, fp
13154     40 02 90 FD | 	jmp	#LR__1523
13158                 | LR__1515
13158                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
13158     08 4E 05 F1 | 	add	fp, #8
1315c     A7 1E 02 FB | 	rdlong	local01, fp
13160     08 4E 85 F1 | 	sub	fp, #8
13164     1C 1E 0E F2 | 	cmp	local01, #28 wz
13168     14 4E 05 A1 |  if_e	add	fp, #20
1316c     A7 24 02 AB |  if_e	rdlong	local04, fp
13170     14 4E 85 A1 |  if_e	sub	fp, #20
13174     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
13178     24 00 90 5D |  if_ne	jmp	#LR__1516
1317c     00 1E 06 F6 | 	mov	local01, #0
13180     A7 20 02 FB | 	rdlong	local02, fp
13184     0C 4E 05 F1 | 	add	fp, #12
13188     A7 22 02 FB | 	rdlong	local03, fp
1318c     0C 4E 85 F1 | 	sub	fp, #12
13190     11 21 0A F2 | 	cmp	local02, local03 wz
13194     01 1E 66 56 |  if_ne	neg	local01, #1
13198     A7 1E 62 FC | 	wrlong	local01, fp
1319c     F8 01 90 FD | 	jmp	#LR__1523
131a0                 | LR__1516
131a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
131a0     08 4E 05 F1 | 	add	fp, #8
131a4     A7 1E 02 FB | 	rdlong	local01, fp
131a8     08 4E 85 F1 | 	sub	fp, #8
131ac     1D 1E 0E F2 | 	cmp	local01, #29 wz
131b0     14 4E 05 A1 |  if_e	add	fp, #20
131b4     A7 22 02 AB |  if_e	rdlong	local03, fp
131b8     14 4E 85 A1 |  if_e	sub	fp, #20
131bc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
131c0     34 00 90 5D |  if_ne	jmp	#LR__1517
131c4     00 1E 06 F6 | 	mov	local01, #0
131c8     A7 12 02 FB | 	rdlong	arg01, fp
131cc     88 E0 B0 FD | 	call	#__system___float_fromuns
131d0     FD 12 02 F6 | 	mov	arg01, result1
131d4     0C 4E 05 F1 | 	add	fp, #12
131d8     A7 14 02 FB | 	rdlong	arg02, fp
131dc     0C 4E 85 F1 | 	sub	fp, #12
131e0     01 16 06 F6 | 	mov	arg03, #1
131e4     A8 E8 B0 FD | 	call	#__system___float_cmp
131e8     00 FA 0D F2 | 	cmp	result1, #0 wz
131ec     00 1E 26 56 |  if_ne	not	local01, #0
131f0     A7 1E 62 FC | 	wrlong	local01, fp
131f4     A0 01 90 FD | 	jmp	#LR__1523
131f8                 | LR__1517
131f8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
131f8     08 4E 05 F1 | 	add	fp, #8
131fc     A7 1E 02 FB | 	rdlong	local01, fp
13200     08 4E 85 F1 | 	sub	fp, #8
13204     1D 1E 0E F2 | 	cmp	local01, #29 wz
13208     14 4E 05 A1 |  if_e	add	fp, #20
1320c     A7 22 02 AB |  if_e	rdlong	local03, fp
13210     14 4E 85 A1 |  if_e	sub	fp, #20
13214     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
13218     24 00 90 5D |  if_ne	jmp	#LR__1518
1321c     00 1E 06 F6 | 	mov	local01, #0
13220     A7 20 02 FB | 	rdlong	local02, fp
13224     0C 4E 05 F1 | 	add	fp, #12
13228     A7 22 02 FB | 	rdlong	local03, fp
1322c     0C 4E 85 F1 | 	sub	fp, #12
13230     11 21 0A F2 | 	cmp	local02, local03 wz
13234     01 1E 66 56 |  if_ne	neg	local01, #1
13238     A7 1E 62 FC | 	wrlong	local01, fp
1323c     58 01 90 FD | 	jmp	#LR__1523
13240                 | LR__1518
13240                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
13240     08 4E 05 F1 | 	add	fp, #8
13244     A7 1E 02 FB | 	rdlong	local01, fp
13248     08 4E 85 F1 | 	sub	fp, #8
1324c     1D 1E 0E F2 | 	cmp	local01, #29 wz
13250     14 4E 05 A1 |  if_e	add	fp, #20
13254     A7 22 02 AB |  if_e	rdlong	local03, fp
13258     14 4E 85 A1 |  if_e	sub	fp, #20
1325c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
13260     24 00 90 5D |  if_ne	jmp	#LR__1519
13264     00 1E 06 F6 | 	mov	local01, #0
13268     A7 20 02 FB | 	rdlong	local02, fp
1326c     0C 4E 05 F1 | 	add	fp, #12
13270     A7 22 02 FB | 	rdlong	local03, fp
13274     0C 4E 85 F1 | 	sub	fp, #12
13278     11 21 0A F2 | 	cmp	local02, local03 wz
1327c     01 1E 66 56 |  if_ne	neg	local01, #1
13280     A7 1E 62 FC | 	wrlong	local01, fp
13284     10 01 90 FD | 	jmp	#LR__1523
13288                 | LR__1519
13288                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
13288     08 4E 05 F1 | 	add	fp, #8
1328c     A7 1E 02 FB | 	rdlong	local01, fp
13290     08 4E 85 F1 | 	sub	fp, #8
13294     2B 1E 0E F2 | 	cmp	local01, #43 wz
13298     14 4E 05 A1 |  if_e	add	fp, #20
1329c     A7 22 02 AB |  if_e	rdlong	local03, fp
132a0     14 4E 85 A1 |  if_e	sub	fp, #20
132a4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
132a8     30 00 90 5D |  if_ne	jmp	#LR__1520
132ac     00 1E 06 F6 | 	mov	local01, #0
132b0     A7 12 02 FB | 	rdlong	arg01, fp
132b4     DC B8 BF FD | 	call	#_convertstring
132b8     FD 12 02 F6 | 	mov	arg01, result1
132bc     0C 4E 05 F1 | 	add	fp, #12
132c0     A7 14 02 FB | 	rdlong	arg02, fp
132c4     0C 4E 85 F1 | 	sub	fp, #12
132c8     70 B8 B0 FD | 	call	#__system___string_cmp
132cc     00 FA 0D F2 | 	cmp	result1, #0 wz
132d0     00 1E 26 56 |  if_ne	not	local01, #0
132d4     A7 1E 62 FC | 	wrlong	local01, fp
132d8     BC 00 90 FD | 	jmp	#LR__1523
132dc                 | LR__1520
132dc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
132dc     08 4E 05 F1 | 	add	fp, #8
132e0     A7 1E 02 FB | 	rdlong	local01, fp
132e4     08 4E 85 F1 | 	sub	fp, #8
132e8     1F 1E 0E F2 | 	cmp	local01, #31 wz
132ec     14 4E 05 A1 |  if_e	add	fp, #20
132f0     A7 22 02 AB |  if_e	rdlong	local03, fp
132f4     14 4E 85 A1 |  if_e	sub	fp, #20
132f8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
132fc     34 00 90 5D |  if_ne	jmp	#LR__1521
13300     00 1E 06 F6 | 	mov	local01, #0
13304     A7 20 02 FB | 	rdlong	local02, fp
13308     0C 4E 05 F1 | 	add	fp, #12
1330c     A7 12 02 FB | 	rdlong	arg01, fp
13310     0C 4E 85 F1 | 	sub	fp, #12
13314     7C B8 BF FD | 	call	#_convertstring
13318     FD 14 02 F6 | 	mov	arg02, result1
1331c     10 13 02 F6 | 	mov	arg01, local02
13320     18 B8 B0 FD | 	call	#__system___string_cmp
13324     00 FA 0D F2 | 	cmp	result1, #0 wz
13328     00 1E 26 56 |  if_ne	not	local01, #0
1332c     A7 1E 62 FC | 	wrlong	local01, fp
13330     64 00 90 FD | 	jmp	#LR__1523
13334                 | LR__1521
13334                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
13334     08 4E 05 F1 | 	add	fp, #8
13338     A7 1E 02 FB | 	rdlong	local01, fp
1333c     08 4E 85 F1 | 	sub	fp, #8
13340     2B 1E 0E F2 | 	cmp	local01, #43 wz
13344     14 4E 05 A1 |  if_e	add	fp, #20
13348     A7 22 02 AB |  if_e	rdlong	local03, fp
1334c     14 4E 85 A1 |  if_e	sub	fp, #20
13350     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
13354     3C 00 90 5D |  if_ne	jmp	#LR__1522
13358     00 1E 06 F6 | 	mov	local01, #0
1335c     A7 12 02 FB | 	rdlong	arg01, fp
13360     30 B8 BF FD | 	call	#_convertstring
13364     FD 20 02 F6 | 	mov	local02, result1
13368     0C 4E 05 F1 | 	add	fp, #12
1336c     A7 12 02 FB | 	rdlong	arg01, fp
13370     0C 4E 85 F1 | 	sub	fp, #12
13374     1C B8 BF FD | 	call	#_convertstring
13378     FD 14 02 F6 | 	mov	arg02, result1
1337c     10 13 02 F6 | 	mov	arg01, local02
13380     B8 B7 B0 FD | 	call	#__system___string_cmp
13384     00 FA 0D F2 | 	cmp	result1, #0 wz
13388     00 1E 26 56 |  if_ne	not	local01, #0
1338c     A7 1E 62 FC | 	wrlong	local01, fp
13390     04 00 90 FD | 	jmp	#LR__1523
13394                 | LR__1522
13394     A7 00 68 FC | 	wrlong	#0, fp
13398                 | LR__1523
13398     08 4E 05 F1 | 	add	fp, #8
1339c     A7 38 68 FC | 	wrlong	#28, fp
133a0     08 4E 85 F1 | 	sub	fp, #8
133a4     A7 12 02 F6 | 	mov	arg01, fp
133a8     64 75 BF FD | 	call	#_push
133ac     A7 F0 03 F6 | 	mov	ptra, fp
133b0     B2 00 A0 FD | 	call	#popregs_
133b4                 | _do_ne_ret
133b4     2D 00 64 FD | 	ret
133b8                 | 
133b8                 | ' 
133b8                 | ' 
133b8                 | ' 
133b8                 | ' ' -------------------   convert a variable on the top of stack to integer
133b8                 | ' 
133b8                 | ' 'sub do_converttoint'
133b8                 | ' 
133b8                 | ' 'dim t1 as expr_result 
133b8                 | ' 'dim a1,r as integer
133b8                 | ' 't1=pop() 
133b8                 | ' 'select case t1.result_type
133b8                 | ' '  case result_int: a1=t1.result.iresult : r=result_int
133b8                 | ' '  case result_uint: a1=t1.result.uresult : r=result_int
133b8                 | ' '  case result_float: a1=round(t1.result.fresult) : r=result_int
133b8                 | ' '  case result_string: a1=val(t1.result.sresult) :r=result_int
133b8                 | ' '  case result_string2: a1=val(convertstring(t1.result.uresult)) :r=result_int
133b8                 | ' '  case result_error: a1=0: r=t1.result.uresult
133b8                 | ' '  case else : a1=0 : r=1
133b8                 | ' 
133b8                 | ' 'end select
133b8                 | ' 't1.result.iresult=a1 : t1.result_type=r : push t1 
133b8                 | ' 
133b8                 | ' 'end sub
133b8                 | ' 
133b8                 | ' function converttoint (t1 as expr_result) as integer
133b8                 | _converttoint
133b8     02 4A 05 F6 | 	mov	COUNT_, #2
133bc     A8 00 A0 FD | 	call	#pushregs_
133c0     09 1F 02 F6 | 	mov	local01, arg01
133c4                 | ' 
133c4                 | ' select case t1.result_type
133c4     08 1E 06 F1 | 	add	local01, #8
133c8     0F 21 02 FB | 	rdlong	local02, local01
133cc     08 1E 86 F1 | 	sub	local01, #8
133d0     1C 20 0E F2 | 	cmp	local02, #28 wz
133d4     24 00 90 AD |  if_e	jmp	#LR__1530
133d8     1D 20 0E F2 | 	cmp	local02, #29 wz
133dc     24 00 90 AD |  if_e	jmp	#LR__1531
133e0     1E 20 0E F2 | 	cmp	local02, #30 wz
133e4     24 00 90 AD |  if_e	jmp	#LR__1532
133e8     1F 20 0E F2 | 	cmp	local02, #31 wz
133ec     2C 00 90 AD |  if_e	jmp	#LR__1533
133f0     2B 20 0E F2 | 	cmp	local02, #43 wz
133f4     3C 00 90 AD |  if_e	jmp	#LR__1534
133f8     58 00 90 FD | 	jmp	#LR__1535
133fc                 | LR__1530
133fc     0F FB 01 FB | 	rdlong	result1, local01
13400     54 00 90 FD | 	jmp	#LR__1536
13404                 | LR__1531
13404     0F FB 01 FB | 	rdlong	result1, local01
13408     4C 00 90 FD | 	jmp	#LR__1536
1340c                 | LR__1532
1340c     0F 13 02 FB | 	rdlong	arg01, local01
13410     01 14 06 F6 | 	mov	arg02, #1
13414     0C E7 B0 FD | 	call	#__system___float_tointeger
13418     3C 00 90 FD | 	jmp	#LR__1536
1341c                 | LR__1533
1341c     0F 13 02 FB | 	rdlong	arg01, local01
13420     20 EA B0 FD | 	call	#__system____builtin_atof
13424     FD 12 02 F6 | 	mov	arg01, result1
13428     00 14 06 F6 | 	mov	arg02, #0
1342c     F4 E6 B0 FD | 	call	#__system___float_tointeger
13430     24 00 90 FD | 	jmp	#LR__1536
13434                 | LR__1534
13434     0F 13 02 FB | 	rdlong	arg01, local01
13438     58 B7 BF FD | 	call	#_convertstring
1343c     FD 12 02 F6 | 	mov	arg01, result1
13440     00 EA B0 FD | 	call	#__system____builtin_atof
13444     FD 12 02 F6 | 	mov	arg01, result1
13448     00 14 06 F6 | 	mov	arg02, #0
1344c     D4 E6 B0 FD | 	call	#__system___float_tointeger
13450     04 00 90 FD | 	jmp	#LR__1536
13454                 | LR__1535
13454     00 FA 05 F6 | 	mov	result1, #0
13458                 | LR__1536
13458     A7 F0 03 F6 | 	mov	ptra, fp
1345c     B2 00 A0 FD | 	call	#popregs_
13460                 | _converttoint_ret
13460     2D 00 64 FD | 	ret
13464                 | 
13464                 | ' 
13464                 | ' function converttofloat (t1 as expr_result) as single
13464                 | _converttofloat
13464     03 4A 05 F6 | 	mov	COUNT_, #3
13468     A8 00 A0 FD | 	call	#pushregs_
1346c     09 1F 02 F6 | 	mov	local01, arg01
13470                 | ' 
13470                 | ' select case t1.result_type
13470     08 1E 06 F1 | 	add	local01, #8
13474     0F 21 02 FB | 	rdlong	local02, local01
13478     08 1E 86 F1 | 	sub	local01, #8
1347c     1C 20 0E F2 | 	cmp	local02, #28 wz
13480     24 00 90 AD |  if_e	jmp	#LR__1540
13484     1D 20 0E F2 | 	cmp	local02, #29 wz
13488     38 00 90 AD |  if_e	jmp	#LR__1541
1348c     1E 20 0E F2 | 	cmp	local02, #30 wz
13490     3C 00 90 AD |  if_e	jmp	#LR__1542
13494     1F 20 0E F2 | 	cmp	local02, #31 wz
13498     3C 00 90 AD |  if_e	jmp	#LR__1543
1349c     2B 20 0E F2 | 	cmp	local02, #43 wz
134a0     40 00 90 AD |  if_e	jmp	#LR__1544
134a4     50 00 90 FD | 	jmp	#LR__1545
134a8                 | LR__1540
134a8     0F 13 02 FB | 	rdlong	arg01, local01
134ac     09 13 52 F6 | 	abs	arg01, arg01 wc
134b0     1F 22 C6 C9 |  if_b	decod	local03, #31
134b4     00 22 06 36 |  if_ae	mov	local03, #0
134b8     9C DD B0 FD | 	call	#__system___float_fromuns
134bc     11 FB 61 F5 | 	xor	result1, local03
134c0     38 00 90 FD | 	jmp	#LR__1546
134c4                 | LR__1541
134c4     0F 13 02 FB | 	rdlong	arg01, local01
134c8     8C DD B0 FD | 	call	#__system___float_fromuns
134cc     2C 00 90 FD | 	jmp	#LR__1546
134d0                 | LR__1542
134d0     0F FB 01 FB | 	rdlong	result1, local01
134d4     24 00 90 FD | 	jmp	#LR__1546
134d8                 | LR__1543
134d8     0F 13 02 FB | 	rdlong	arg01, local01
134dc     64 E9 B0 FD | 	call	#__system____builtin_atof
134e0     18 00 90 FD | 	jmp	#LR__1546
134e4                 | LR__1544
134e4     0F 13 02 FB | 	rdlong	arg01, local01
134e8     A8 B6 BF FD | 	call	#_convertstring
134ec     FD 12 02 F6 | 	mov	arg01, result1
134f0     50 E9 B0 FD | 	call	#__system____builtin_atof
134f4     04 00 90 FD | 	jmp	#LR__1546
134f8                 | LR__1545
134f8     00 FA 05 F6 | 	mov	result1, #0
134fc                 | LR__1546
134fc     A7 F0 03 F6 | 	mov	ptra, fp
13500     B2 00 A0 FD | 	call	#popregs_
13504                 | _converttofloat_ret
13504     2D 00 64 FD | 	ret
13508                 | 
13508                 | ' 
13508                 | ' sub do_rnd
13508                 | _do_rnd
13508     01 4A 05 F6 | 	mov	COUNT_, #1
1350c     A8 00 A0 FD | 	call	#pushregs_
13510     10 F0 07 F1 | 	add	ptra, #16
13514     4A 00 00 FF 
13518     B0 E4 05 F1 | 	add	objptr, ##38064
1351c     F2 1E 02 FB | 	rdlong	local01, objptr
13520     0F 17 02 F6 | 	mov	arg03, local01
13524     01 16 66 F0 | 	shl	arg03, #1
13528     0F 17 02 F1 | 	add	arg03, local01
1352c     02 16 66 F0 | 	shl	arg03, #2
13530     03 00 00 FF 
13534     04 E4 85 F1 | 	sub	objptr, ##1540
13538     F2 16 02 F1 | 	add	arg03, objptr
1353c     0B 17 02 FB | 	rdlong	arg03, arg03
13540     0C 4E 05 F1 | 	add	fp, #12
13544     A7 16 62 FC | 	wrlong	arg03, fp
13548                 | ' 
13548                 | ' numpar=compiledline(lineptr_e).result.uresult
13548                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
13548     0C 4E 85 F1 | 	sub	fp, #12
1354c     02 16 16 F2 | 	cmp	arg03, #2 wc
13550     47 00 00 FF 
13554     AC E4 85 F1 | 	sub	objptr, ##36524
13558     3C 00 90 CD |  if_b	jmp	#LR__1550
1355c     00 12 06 F6 | 	mov	arg01, #0
13560     10 0F B1 FD | 	call	#__system___getiolock_0484
13564     FD 12 02 F6 | 	mov	arg01, result1
13568     A8 B5 B0 FD | 	call	#__system___lockmem
1356c     73 01 00 FF 
13570     38 15 06 F6 | 	mov	arg02, ##@LR__5151
13574     00 12 06 F6 | 	mov	arg01, #0
13578     00 16 06 F6 | 	mov	arg03, #0
1357c     88 C2 B0 FD | 	call	#__system___basic_print_string
13580     00 12 06 F6 | 	mov	arg01, #0
13584     EC 0E B1 FD | 	call	#__system___getiolock_0484
13588     FD 00 68 FC | 	wrlong	#0, result1
1358c     27 12 06 F6 | 	mov	arg01, #39
13590     D8 70 B0 FD | 	call	#_printerror
13594     2C 01 90 FD | 	jmp	#LR__1557
13598                 | LR__1550
13598                 | ' if numpar=0 then
13598     0C 4E 05 F1 | 	add	fp, #12
1359c     A7 FE 09 FB | 	rdlong	result3, fp wz
135a0     0C 4E 85 F1 | 	sub	fp, #12
135a4     20 00 90 5D |  if_ne	jmp	#LR__1551
135a8     08 4E 05 F1 | 	add	fp, #8
135ac     A7 3A 68 FC | 	wrlong	#29, fp
135b0     08 4E 85 F1 | 	sub	fp, #8
135b4     1B FA 61 FD | 	getrnd	result1
135b8     A7 FA 61 FC | 	wrlong	result1, fp
135bc     A7 12 02 F6 | 	mov	arg01, fp
135c0     4C 73 BF FD | 	call	#_push
135c4     FC 00 90 FD | 	jmp	#LR__1556
135c8                 | LR__1551
135c8     AC 72 BF FD | 	call	#_pop
135cc     A7 FA 61 FC | 	wrlong	result1, fp
135d0     04 4E 05 F1 | 	add	fp, #4
135d4     A7 FC 61 FC | 	wrlong	result2, fp
135d8     04 4E 05 F1 | 	add	fp, #4
135dc     A7 FE 61 FC | 	wrlong	result3, fp
135e0                 | '   t1=pop()
135e0                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
135e0     08 4E 85 F1 | 	sub	fp, #8
135e4     1C FE 0D F2 | 	cmp	result3, #28 wz
135e8     08 4E 05 51 |  if_ne	add	fp, #8
135ec     A7 1E 02 5B |  if_ne	rdlong	local01, fp
135f0     08 4E 85 51 |  if_ne	sub	fp, #8
135f4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
135f8     2C 00 90 5D |  if_ne	jmp	#LR__1552
135fc     1B FA 61 FD | 	getrnd	result1
13600     A7 1E 02 FB | 	rdlong	local01, fp
13604     0F FB 11 FD | 	qdiv	result1, local01
13608     A7 12 02 F6 | 	mov	arg01, fp
1360c     19 1E 62 FD | 	getqy	local01
13610     A7 1E 62 FC | 	wrlong	local01, fp
13614     08 4E 05 F1 | 	add	fp, #8
13618     A7 3A 68 FC | 	wrlong	#29, fp
1361c     08 4E 85 F1 | 	sub	fp, #8
13620     EC 72 BF FD | 	call	#_push
13624     9C 00 90 FD | 	jmp	#LR__1555
13628                 | LR__1552
13628     08 4E 05 F1 | 	add	fp, #8
1362c     A7 1E 02 FB | 	rdlong	local01, fp
13630     08 4E 85 F1 | 	sub	fp, #8
13634     1E 1E 0E F2 | 	cmp	local01, #30 wz
13638     48 00 90 5D |  if_ne	jmp	#LR__1553
1363c     A7 12 02 FB | 	rdlong	arg01, fp
13640     00 C0 24 FF 
13644     00 14 06 F6 | 	mov	arg02, ##1233125376
13648     14 E2 B0 FD | 	call	#__system___float_div
1364c     FD 1E 02 F6 | 	mov	local01, result1
13650     1B 12 62 FD | 	getrnd	arg01
13654     74 13 06 F4 | 	bitl	arg01, #372
13658     FC DB B0 FD | 	call	#__system___float_fromuns
1365c     FD 14 02 F6 | 	mov	arg02, result1
13660     0F 13 02 F6 | 	mov	arg01, local01
13664     F4 DF B0 FD | 	call	#__system___float_mul
13668     A7 FA 61 FC | 	wrlong	result1, fp
1366c     08 4E 05 F1 | 	add	fp, #8
13670     A7 3C 68 FC | 	wrlong	#30, fp
13674     08 4E 85 F1 | 	sub	fp, #8
13678     A7 12 02 F6 | 	mov	arg01, fp
1367c     90 72 BF FD | 	call	#_push
13680     40 00 90 FD | 	jmp	#LR__1554
13684                 | LR__1553
13684                 | '     print "rnd: "; : printerror(40) 
13684     00 12 06 F6 | 	mov	arg01, #0
13688     E8 0D B1 FD | 	call	#__system___getiolock_0484
1368c     FD 12 02 F6 | 	mov	arg01, result1
13690     80 B4 B0 FD | 	call	#__system___lockmem
13694     73 01 00 FF 
13698     3E 15 06 F6 | 	mov	arg02, ##@LR__5152
1369c     00 12 06 F6 | 	mov	arg01, #0
136a0     00 16 06 F6 | 	mov	arg03, #0
136a4     60 C1 B0 FD | 	call	#__system___basic_print_string
136a8     00 12 06 F6 | 	mov	arg01, #0
136ac     C4 0D B1 FD | 	call	#__system___getiolock_0484
136b0     FD 00 68 FC | 	wrlong	#0, result1
136b4     28 12 06 F6 | 	mov	arg01, #40
136b8     B0 6F B0 FD | 	call	#_printerror
136bc     A7 12 02 F6 | 	mov	arg01, fp
136c0     4C 72 BF FD | 	call	#_push
136c4                 | LR__1554
136c4                 | LR__1555
136c4                 | LR__1556
136c4                 | LR__1557
136c4     A7 F0 03 F6 | 	mov	ptra, fp
136c8     B2 00 A0 FD | 	call	#popregs_
136cc                 | _do_rnd_ret
136cc     2D 00 64 FD | 	ret
136d0                 | 
136d0                 | ' 
136d0                 | ' sub do_getenvsustain
136d0                 | _do_getenvsustain
136d0     01 4A 05 F6 | 	mov	COUNT_, #1
136d4     A8 00 A0 FD | 	call	#pushregs_
136d8     10 F0 07 F1 | 	add	ptra, #16
136dc     4A 00 00 FF 
136e0     B0 E4 05 F1 | 	add	objptr, ##38064
136e4     F2 1E 02 FB | 	rdlong	local01, objptr
136e8     0F 17 02 F6 | 	mov	arg03, local01
136ec     01 16 66 F0 | 	shl	arg03, #1
136f0     0F 17 02 F1 | 	add	arg03, local01
136f4     02 16 66 F0 | 	shl	arg03, #2
136f8     03 00 00 FF 
136fc     04 E4 85 F1 | 	sub	objptr, ##1540
13700     F2 16 02 F1 | 	add	arg03, objptr
13704     0B 17 02 FB | 	rdlong	arg03, arg03
13708     0C 4E 05 F1 | 	add	fp, #12
1370c     A7 16 62 FC | 	wrlong	arg03, fp
13710                 | ' 
13710                 | ' numpar=compiledline(lineptr_e).result.uresult
13710                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
13710     0C 4E 85 F1 | 	sub	fp, #12
13714     02 16 16 F2 | 	cmp	arg03, #2 wc
13718     47 00 00 FF 
1371c     AC E4 85 F1 | 	sub	objptr, ##36524
13720     0C 4E 05 C1 |  if_b	add	fp, #12
13724     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
13728     0C 4E 85 C1 |  if_b	sub	fp, #12
1372c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1560
13730     00 12 06 F6 | 	mov	arg01, #0
13734     3C 0D B1 FD | 	call	#__system___getiolock_0484
13738     FD 12 02 F6 | 	mov	arg01, result1
1373c     D4 B3 B0 FD | 	call	#__system___lockmem
13740     73 01 00 FF 
13744     44 15 06 F6 | 	mov	arg02, ##@LR__5153
13748     00 12 06 F6 | 	mov	arg01, #0
1374c     00 16 06 F6 | 	mov	arg03, #0
13750     B4 C0 B0 FD | 	call	#__system___basic_print_string
13754     00 12 06 F6 | 	mov	arg01, #0
13758     18 0D B1 FD | 	call	#__system___getiolock_0484
1375c     FD 00 68 FC | 	wrlong	#0, result1
13760     27 12 06 F6 | 	mov	arg01, #39
13764     04 6F B0 FD | 	call	#_printerror
13768     64 00 90 FD | 	jmp	#LR__1561
1376c                 | LR__1560
1376c     08 71 BF FD | 	call	#_pop
13770     FD 1E 02 F6 | 	mov	local01, result1
13774     FE 16 02 F6 | 	mov	arg03, result2
13778     A7 1E 62 FC | 	wrlong	local01, fp
1377c     04 4E 05 F1 | 	add	fp, #4
13780     A7 16 62 FC | 	wrlong	arg03, fp
13784     04 4E 05 F1 | 	add	fp, #4
13788     A7 FE 61 FC | 	wrlong	result3, fp
1378c     08 4E 85 F1 | 	sub	fp, #8
13790     A7 12 02 F6 | 	mov	arg01, fp
13794     20 FC BF FD | 	call	#_converttoint
13798     FD 1E 02 F6 | 	mov	local01, result1
1379c     01 1E 66 F0 | 	shl	local01, #1
137a0     59 00 00 FF 
137a4     D4 E5 05 F1 | 	add	objptr, ##46036
137a8     F2 1E 02 F1 | 	add	local01, objptr
137ac     0F 1F E2 FA | 	rdword	local01, local01
137b0     A7 1E 62 FC | 	wrlong	local01, fp
137b4     08 4E 05 F1 | 	add	fp, #8
137b8     A7 38 68 FC | 	wrlong	#28, fp
137bc     08 4E 85 F1 | 	sub	fp, #8
137c0     A7 12 02 F6 | 	mov	arg01, fp
137c4     59 00 00 FF 
137c8     D4 E5 85 F1 | 	sub	objptr, ##46036
137cc     40 71 BF FD | 	call	#_push
137d0                 | LR__1561
137d0     A7 F0 03 F6 | 	mov	ptra, fp
137d4     B2 00 A0 FD | 	call	#popregs_
137d8                 | _do_getenvsustain_ret
137d8     2D 00 64 FD | 	ret
137dc                 | 
137dc                 | ' 
137dc                 | ' sub do_sin
137dc                 | _do_sin
137dc     01 4A 05 F6 | 	mov	COUNT_, #1
137e0     A8 00 A0 FD | 	call	#pushregs_
137e4     10 F0 07 F1 | 	add	ptra, #16
137e8     4A 00 00 FF 
137ec     B0 E4 05 F1 | 	add	objptr, ##38064
137f0     F2 1E 02 FB | 	rdlong	local01, objptr
137f4     0F 17 02 F6 | 	mov	arg03, local01
137f8     01 16 66 F0 | 	shl	arg03, #1
137fc     0F 17 02 F1 | 	add	arg03, local01
13800     02 16 66 F0 | 	shl	arg03, #2
13804     03 00 00 FF 
13808     04 E4 85 F1 | 	sub	objptr, ##1540
1380c     F2 16 02 F1 | 	add	arg03, objptr
13810     0B 17 02 FB | 	rdlong	arg03, arg03
13814     0C 4E 05 F1 | 	add	fp, #12
13818     A7 16 62 FC | 	wrlong	arg03, fp
1381c                 | ' 
1381c                 | ' numpar=compiledline(lineptr_e).result.uresult
1381c                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1381c     0C 4E 85 F1 | 	sub	fp, #12
13820     02 16 16 F2 | 	cmp	arg03, #2 wc
13824     47 00 00 FF 
13828     AC E4 85 F1 | 	sub	objptr, ##36524
1382c     0C 4E 05 C1 |  if_b	add	fp, #12
13830     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
13834     0C 4E 85 C1 |  if_b	sub	fp, #12
13838     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1570
1383c     00 12 06 F6 | 	mov	arg01, #0
13840     30 0C B1 FD | 	call	#__system___getiolock_0484
13844     FD 12 02 F6 | 	mov	arg01, result1
13848     C8 B2 B0 FD | 	call	#__system___lockmem
1384c     73 01 00 FF 
13850     54 15 06 F6 | 	mov	arg02, ##@LR__5154
13854     00 12 06 F6 | 	mov	arg01, #0
13858     00 16 06 F6 | 	mov	arg03, #0
1385c     A8 BF B0 FD | 	call	#__system___basic_print_string
13860     00 12 06 F6 | 	mov	arg01, #0
13864     0C 0C B1 FD | 	call	#__system___getiolock_0484
13868     FD 00 68 FC | 	wrlong	#0, result1
1386c     27 12 06 F6 | 	mov	arg01, #39
13870     F8 6D B0 FD | 	call	#_printerror
13874     64 00 90 FD | 	jmp	#LR__1571
13878                 | LR__1570
13878     FC 6F BF FD | 	call	#_pop
1387c     A7 FA 61 FC | 	wrlong	result1, fp
13880     04 4E 05 F1 | 	add	fp, #4
13884     A7 FC 61 FC | 	wrlong	result2, fp
13888     04 4E 05 F1 | 	add	fp, #4
1388c     A7 FE 61 FC | 	wrlong	result3, fp
13890     08 4E 85 F1 | 	sub	fp, #8
13894     59 00 00 FF 
13898     C8 E5 05 F1 | 	add	objptr, ##46024
1389c     F2 1E 02 FB | 	rdlong	local01, objptr
138a0     59 00 00 FF 
138a4     C8 E5 85 F1 | 	sub	objptr, ##46024
138a8     A7 12 02 F6 | 	mov	arg01, fp
138ac     B4 FB BF FD | 	call	#_converttofloat
138b0     FD 14 02 F6 | 	mov	arg02, result1
138b4     0F 13 02 F6 | 	mov	arg01, local01
138b8     A0 DD B0 FD | 	call	#__system___float_mul
138bc     FD 12 02 F6 | 	mov	arg01, result1
138c0     D4 E6 B0 FD | 	call	#__system____builtin_sinf
138c4     A7 FA 61 FC | 	wrlong	result1, fp
138c8     08 4E 05 F1 | 	add	fp, #8
138cc     A7 3C 68 FC | 	wrlong	#30, fp
138d0     08 4E 85 F1 | 	sub	fp, #8
138d4     A7 12 02 F6 | 	mov	arg01, fp
138d8     34 70 BF FD | 	call	#_push
138dc                 | LR__1571
138dc     A7 F0 03 F6 | 	mov	ptra, fp
138e0     B2 00 A0 FD | 	call	#popregs_
138e4                 | _do_sin_ret
138e4     2D 00 64 FD | 	ret
138e8                 | 
138e8                 | ' 
138e8                 | ' 
138e8                 | ' sub do_mid
138e8                 | _do_mid
138e8     00 4A 05 F6 | 	mov	COUNT_, #0
138ec     A8 00 A0 FD | 	call	#pushregs_
138f0     18 F0 07 F1 | 	add	ptra, #24
138f4     4A 00 00 FF 
138f8     B0 E4 05 F1 | 	add	objptr, ##38064
138fc     F2 16 02 FB | 	rdlong	arg03, objptr
13900     0B 15 02 F6 | 	mov	arg02, arg03
13904     01 14 66 F0 | 	shl	arg02, #1
13908     0B 15 02 F1 | 	add	arg02, arg03
1390c     02 14 66 F0 | 	shl	arg02, #2
13910     03 00 00 FF 
13914     04 E4 85 F1 | 	sub	objptr, ##1540
13918     F2 14 02 F1 | 	add	arg02, objptr
1391c     0A 17 02 FB | 	rdlong	arg03, arg02
13920     0C 4E 05 F1 | 	add	fp, #12
13924     A7 16 62 FC | 	wrlong	arg03, fp
13928                 | ' 
13928                 | ' numpar=compiledline(lineptr_e).result.uresult
13928                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
13928     0C 4E 85 F1 | 	sub	fp, #12
1392c     03 16 0E F2 | 	cmp	arg03, #3 wz
13930     47 00 00 FF 
13934     AC E4 85 F1 | 	sub	objptr, ##36524
13938     3C 00 90 AD |  if_e	jmp	#LR__1580
1393c     00 12 06 F6 | 	mov	arg01, #0
13940     30 0B B1 FD | 	call	#__system___getiolock_0484
13944     FD 12 02 F6 | 	mov	arg01, result1
13948     C8 B1 B0 FD | 	call	#__system___lockmem
1394c     73 01 00 FF 
13950     5A 15 06 F6 | 	mov	arg02, ##@LR__5155
13954     00 12 06 F6 | 	mov	arg01, #0
13958     00 16 06 F6 | 	mov	arg03, #0
1395c     A8 BE B0 FD | 	call	#__system___basic_print_string
13960     00 12 06 F6 | 	mov	arg01, #0
13964     0C 0B B1 FD | 	call	#__system___getiolock_0484
13968     FD 00 68 FC | 	wrlong	#0, result1
1396c     27 12 06 F6 | 	mov	arg01, #39
13970     F8 6C B0 FD | 	call	#_printerror
13974     28 01 90 FD | 	jmp	#LR__1583
13978                 | LR__1580
13978     FC 6E BF FD | 	call	#_pop
1397c     FF 16 02 F6 | 	mov	arg03, result3
13980     A7 FA 61 FC | 	wrlong	result1, fp
13984     04 4E 05 F1 | 	add	fp, #4
13988     A7 FC 61 FC | 	wrlong	result2, fp
1398c     04 4E 05 F1 | 	add	fp, #4
13990     A7 16 62 FC | 	wrlong	arg03, fp
13994     08 4E 85 F1 | 	sub	fp, #8
13998     A7 12 02 F6 | 	mov	arg01, fp
1399c     18 FA BF FD | 	call	#_converttoint
139a0     FD 16 02 F6 | 	mov	arg03, result1
139a4     14 4E 05 F1 | 	add	fp, #20
139a8     A7 16 62 FC | 	wrlong	arg03, fp
139ac     14 4E 85 F1 | 	sub	fp, #20
139b0     C4 6E BF FD | 	call	#_pop
139b4     FF 16 02 F6 | 	mov	arg03, result3
139b8     A7 FA 61 FC | 	wrlong	result1, fp
139bc     04 4E 05 F1 | 	add	fp, #4
139c0     A7 FC 61 FC | 	wrlong	result2, fp
139c4     04 4E 05 F1 | 	add	fp, #4
139c8     A7 16 62 FC | 	wrlong	arg03, fp
139cc     08 4E 85 F1 | 	sub	fp, #8
139d0     A7 12 02 F6 | 	mov	arg01, fp
139d4     E0 F9 BF FD | 	call	#_converttoint
139d8     FD 16 02 F6 | 	mov	arg03, result1
139dc     10 4E 05 F1 | 	add	fp, #16
139e0     A7 16 62 FC | 	wrlong	arg03, fp
139e4     10 4E 85 F1 | 	sub	fp, #16
139e8     8C 6E BF FD | 	call	#_pop
139ec     FF 16 02 F6 | 	mov	arg03, result3
139f0     A7 FA 61 FC | 	wrlong	result1, fp
139f4     04 4E 05 F1 | 	add	fp, #4
139f8     A7 FC 61 FC | 	wrlong	result2, fp
139fc     04 4E 05 F1 | 	add	fp, #4
13a00     A7 16 62 FC | 	wrlong	arg03, fp
13a04                 | ' t1=pop() : arg2=converttoint(t1)
13a04                 | ' t1=pop() : arg1=converttoint(t1)
13a04                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13a04     08 4E 85 F1 | 	sub	fp, #8
13a08     2B 16 0E F2 | 	cmp	arg03, #43 wz
13a0c     18 00 90 5D |  if_ne	jmp	#LR__1581
13a10     A7 12 02 FB | 	rdlong	arg01, fp
13a14     7C B1 BF FD | 	call	#_convertstring
13a18     A7 FA 61 FC | 	wrlong	result1, fp
13a1c     08 4E 05 F1 | 	add	fp, #8
13a20     A7 3E 68 FC | 	wrlong	#31, fp
13a24     08 4E 85 F1 | 	sub	fp, #8
13a28                 | LR__1581
13a28                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
13a28     08 4E 05 F1 | 	add	fp, #8
13a2c     A7 16 02 FB | 	rdlong	arg03, fp
13a30     08 4E 85 F1 | 	sub	fp, #8
13a34     1F 16 0E F2 | 	cmp	arg03, #31 wz
13a38     3C 00 90 AD |  if_e	jmp	#LR__1582
13a3c     00 12 06 F6 | 	mov	arg01, #0
13a40     30 0A B1 FD | 	call	#__system___getiolock_0484
13a44     FD 12 02 F6 | 	mov	arg01, result1
13a48     C8 B0 B0 FD | 	call	#__system___lockmem
13a4c     73 01 00 FF 
13a50     61 15 06 F6 | 	mov	arg02, ##@LR__5156
13a54     00 12 06 F6 | 	mov	arg01, #0
13a58     00 16 06 F6 | 	mov	arg03, #0
13a5c     A8 BD B0 FD | 	call	#__system___basic_print_string
13a60     00 12 06 F6 | 	mov	arg01, #0
13a64     0C 0A B1 FD | 	call	#__system___getiolock_0484
13a68     FD 00 68 FC | 	wrlong	#0, result1
13a6c     0F 12 06 F6 | 	mov	arg01, #15
13a70     F8 6B B0 FD | 	call	#_printerror
13a74     28 00 90 FD | 	jmp	#LR__1583
13a78                 | LR__1582
13a78     A7 12 02 FB | 	rdlong	arg01, fp
13a7c     10 4E 05 F1 | 	add	fp, #16
13a80     A7 14 02 FB | 	rdlong	arg02, fp
13a84     04 4E 05 F1 | 	add	fp, #4
13a88     A7 16 02 FB | 	rdlong	arg03, fp
13a8c     14 4E 85 F1 | 	sub	fp, #20
13a90     A8 D1 B0 FD | 	call	#__system__Mid_S
13a94     A7 FA 61 FC | 	wrlong	result1, fp
13a98     A7 12 02 F6 | 	mov	arg01, fp
13a9c     70 6E BF FD | 	call	#_push
13aa0                 | LR__1583
13aa0     A7 F0 03 F6 | 	mov	ptra, fp
13aa4     B2 00 A0 FD | 	call	#popregs_
13aa8                 | _do_mid_ret
13aa8     2D 00 64 FD | 	ret
13aac                 | 
13aac                 | ' 
13aac                 | ' sub do_right
13aac                 | _do_right
13aac     00 4A 05 F6 | 	mov	COUNT_, #0
13ab0     A8 00 A0 FD | 	call	#pushregs_
13ab4     14 F0 07 F1 | 	add	ptra, #20
13ab8     4A 00 00 FF 
13abc     B0 E4 05 F1 | 	add	objptr, ##38064
13ac0     F2 16 02 FB | 	rdlong	arg03, objptr
13ac4     0B 15 02 F6 | 	mov	arg02, arg03
13ac8     01 14 66 F0 | 	shl	arg02, #1
13acc     0B 15 02 F1 | 	add	arg02, arg03
13ad0     02 14 66 F0 | 	shl	arg02, #2
13ad4     03 00 00 FF 
13ad8     04 E4 85 F1 | 	sub	objptr, ##1540
13adc     F2 14 02 F1 | 	add	arg02, objptr
13ae0     0A 17 02 FB | 	rdlong	arg03, arg02
13ae4     0C 4E 05 F1 | 	add	fp, #12
13ae8     A7 16 62 FC | 	wrlong	arg03, fp
13aec                 | ' 
13aec                 | ' numpar=compiledline(lineptr_e).result.uresult
13aec                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
13aec     0C 4E 85 F1 | 	sub	fp, #12
13af0     02 16 0E F2 | 	cmp	arg03, #2 wz
13af4     47 00 00 FF 
13af8     AC E4 85 F1 | 	sub	objptr, ##36524
13afc     3C 00 90 AD |  if_e	jmp	#LR__1590
13b00     00 12 06 F6 | 	mov	arg01, #0
13b04     6C 09 B1 FD | 	call	#__system___getiolock_0484
13b08     FD 12 02 F6 | 	mov	arg01, result1
13b0c     04 B0 B0 FD | 	call	#__system___lockmem
13b10     73 01 00 FF 
13b14     68 15 06 F6 | 	mov	arg02, ##@LR__5157
13b18     00 12 06 F6 | 	mov	arg01, #0
13b1c     00 16 06 F6 | 	mov	arg03, #0
13b20     E4 BC B0 FD | 	call	#__system___basic_print_string
13b24     00 12 06 F6 | 	mov	arg01, #0
13b28     48 09 B1 FD | 	call	#__system___getiolock_0484
13b2c     FD 00 68 FC | 	wrlong	#0, result1
13b30     27 12 06 F6 | 	mov	arg01, #39
13b34     34 6B B0 FD | 	call	#_printerror
13b38     E8 00 90 FD | 	jmp	#LR__1593
13b3c                 | LR__1590
13b3c     38 6D BF FD | 	call	#_pop
13b40     FF 16 02 F6 | 	mov	arg03, result3
13b44     A7 FA 61 FC | 	wrlong	result1, fp
13b48     04 4E 05 F1 | 	add	fp, #4
13b4c     A7 FC 61 FC | 	wrlong	result2, fp
13b50     04 4E 05 F1 | 	add	fp, #4
13b54     A7 16 62 FC | 	wrlong	arg03, fp
13b58     08 4E 85 F1 | 	sub	fp, #8
13b5c     A7 12 02 F6 | 	mov	arg01, fp
13b60     54 F8 BF FD | 	call	#_converttoint
13b64     FD 16 02 F6 | 	mov	arg03, result1
13b68     10 4E 05 F1 | 	add	fp, #16
13b6c     A7 16 62 FC | 	wrlong	arg03, fp
13b70     10 4E 85 F1 | 	sub	fp, #16
13b74     00 6D BF FD | 	call	#_pop
13b78     FF 16 02 F6 | 	mov	arg03, result3
13b7c     A7 FA 61 FC | 	wrlong	result1, fp
13b80     04 4E 05 F1 | 	add	fp, #4
13b84     A7 FC 61 FC | 	wrlong	result2, fp
13b88     04 4E 05 F1 | 	add	fp, #4
13b8c     A7 16 62 FC | 	wrlong	arg03, fp
13b90                 | ' t1=pop() : arg=converttoint(t1)
13b90                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13b90     08 4E 85 F1 | 	sub	fp, #8
13b94     2B 16 0E F2 | 	cmp	arg03, #43 wz
13b98     18 00 90 5D |  if_ne	jmp	#LR__1591
13b9c     A7 12 02 FB | 	rdlong	arg01, fp
13ba0     F0 AF BF FD | 	call	#_convertstring
13ba4     A7 FA 61 FC | 	wrlong	result1, fp
13ba8     08 4E 05 F1 | 	add	fp, #8
13bac     A7 3E 68 FC | 	wrlong	#31, fp
13bb0     08 4E 85 F1 | 	sub	fp, #8
13bb4                 | LR__1591
13bb4                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
13bb4     08 4E 05 F1 | 	add	fp, #8
13bb8     A7 16 02 FB | 	rdlong	arg03, fp
13bbc     08 4E 85 F1 | 	sub	fp, #8
13bc0     1F 16 0E F2 | 	cmp	arg03, #31 wz
13bc4     3C 00 90 AD |  if_e	jmp	#LR__1592
13bc8     00 12 06 F6 | 	mov	arg01, #0
13bcc     A4 08 B1 FD | 	call	#__system___getiolock_0484
13bd0     FD 12 02 F6 | 	mov	arg01, result1
13bd4     3C AF B0 FD | 	call	#__system___lockmem
13bd8     73 01 00 FF 
13bdc     71 15 06 F6 | 	mov	arg02, ##@LR__5158
13be0     00 12 06 F6 | 	mov	arg01, #0
13be4     00 16 06 F6 | 	mov	arg03, #0
13be8     1C BC B0 FD | 	call	#__system___basic_print_string
13bec     00 12 06 F6 | 	mov	arg01, #0
13bf0     80 08 B1 FD | 	call	#__system___getiolock_0484
13bf4     FD 00 68 FC | 	wrlong	#0, result1
13bf8     0F 12 06 F6 | 	mov	arg01, #15
13bfc     6C 6A B0 FD | 	call	#_printerror
13c00     20 00 90 FD | 	jmp	#LR__1593
13c04                 | LR__1592
13c04     A7 12 02 FB | 	rdlong	arg01, fp
13c08     10 4E 05 F1 | 	add	fp, #16
13c0c     A7 14 02 FB | 	rdlong	arg02, fp
13c10     10 4E 85 F1 | 	sub	fp, #16
13c14     94 CF B0 FD | 	call	#__system__Right_S
13c18     A7 FA 61 FC | 	wrlong	result1, fp
13c1c     A7 12 02 F6 | 	mov	arg01, fp
13c20     EC 6C BF FD | 	call	#_push
13c24                 | LR__1593
13c24     A7 F0 03 F6 | 	mov	ptra, fp
13c28     B2 00 A0 FD | 	call	#popregs_
13c2c                 | _do_right_ret
13c2c     2D 00 64 FD | 	ret
13c30                 | 
13c30                 | ' 
13c30                 | ' sub do_left
13c30                 | _do_left
13c30     00 4A 05 F6 | 	mov	COUNT_, #0
13c34     A8 00 A0 FD | 	call	#pushregs_
13c38     14 F0 07 F1 | 	add	ptra, #20
13c3c     4A 00 00 FF 
13c40     B0 E4 05 F1 | 	add	objptr, ##38064
13c44     F2 16 02 FB | 	rdlong	arg03, objptr
13c48     0B 15 02 F6 | 	mov	arg02, arg03
13c4c     01 14 66 F0 | 	shl	arg02, #1
13c50     0B 15 02 F1 | 	add	arg02, arg03
13c54     02 14 66 F0 | 	shl	arg02, #2
13c58     03 00 00 FF 
13c5c     04 E4 85 F1 | 	sub	objptr, ##1540
13c60     F2 14 02 F1 | 	add	arg02, objptr
13c64     0A 17 02 FB | 	rdlong	arg03, arg02
13c68     0C 4E 05 F1 | 	add	fp, #12
13c6c     A7 16 62 FC | 	wrlong	arg03, fp
13c70                 | ' 
13c70                 | ' numpar=compiledline(lineptr_e).result.uresult
13c70                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
13c70     0C 4E 85 F1 | 	sub	fp, #12
13c74     02 16 0E F2 | 	cmp	arg03, #2 wz
13c78     47 00 00 FF 
13c7c     AC E4 85 F1 | 	sub	objptr, ##36524
13c80     3C 00 90 AD |  if_e	jmp	#LR__1600
13c84     00 12 06 F6 | 	mov	arg01, #0
13c88     E8 07 B1 FD | 	call	#__system___getiolock_0484
13c8c     FD 12 02 F6 | 	mov	arg01, result1
13c90     80 AE B0 FD | 	call	#__system___lockmem
13c94     73 01 00 FF 
13c98     7A 15 06 F6 | 	mov	arg02, ##@LR__5159
13c9c     00 12 06 F6 | 	mov	arg01, #0
13ca0     00 16 06 F6 | 	mov	arg03, #0
13ca4     60 BB B0 FD | 	call	#__system___basic_print_string
13ca8     00 12 06 F6 | 	mov	arg01, #0
13cac     C4 07 B1 FD | 	call	#__system___getiolock_0484
13cb0     FD 00 68 FC | 	wrlong	#0, result1
13cb4     27 12 06 F6 | 	mov	arg01, #39
13cb8     B0 69 B0 FD | 	call	#_printerror
13cbc     E8 00 90 FD | 	jmp	#LR__1603
13cc0                 | LR__1600
13cc0     B4 6B BF FD | 	call	#_pop
13cc4     FF 16 02 F6 | 	mov	arg03, result3
13cc8     A7 FA 61 FC | 	wrlong	result1, fp
13ccc     04 4E 05 F1 | 	add	fp, #4
13cd0     A7 FC 61 FC | 	wrlong	result2, fp
13cd4     04 4E 05 F1 | 	add	fp, #4
13cd8     A7 16 62 FC | 	wrlong	arg03, fp
13cdc     08 4E 85 F1 | 	sub	fp, #8
13ce0     A7 12 02 F6 | 	mov	arg01, fp
13ce4     D0 F6 BF FD | 	call	#_converttoint
13ce8     FD 16 02 F6 | 	mov	arg03, result1
13cec     10 4E 05 F1 | 	add	fp, #16
13cf0     A7 16 62 FC | 	wrlong	arg03, fp
13cf4     10 4E 85 F1 | 	sub	fp, #16
13cf8     7C 6B BF FD | 	call	#_pop
13cfc     FF 16 02 F6 | 	mov	arg03, result3
13d00     A7 FA 61 FC | 	wrlong	result1, fp
13d04     04 4E 05 F1 | 	add	fp, #4
13d08     A7 FC 61 FC | 	wrlong	result2, fp
13d0c     04 4E 05 F1 | 	add	fp, #4
13d10     A7 16 62 FC | 	wrlong	arg03, fp
13d14                 | ' t1=pop() : arg=converttoint(t1)
13d14                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13d14     08 4E 85 F1 | 	sub	fp, #8
13d18     2B 16 0E F2 | 	cmp	arg03, #43 wz
13d1c     18 00 90 5D |  if_ne	jmp	#LR__1601
13d20     A7 12 02 FB | 	rdlong	arg01, fp
13d24     6C AE BF FD | 	call	#_convertstring
13d28     A7 FA 61 FC | 	wrlong	result1, fp
13d2c     08 4E 05 F1 | 	add	fp, #8
13d30     A7 3E 68 FC | 	wrlong	#31, fp
13d34     08 4E 85 F1 | 	sub	fp, #8
13d38                 | LR__1601
13d38                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
13d38     08 4E 05 F1 | 	add	fp, #8
13d3c     A7 16 02 FB | 	rdlong	arg03, fp
13d40     08 4E 85 F1 | 	sub	fp, #8
13d44     1F 16 0E F2 | 	cmp	arg03, #31 wz
13d48     3C 00 90 AD |  if_e	jmp	#LR__1602
13d4c     00 12 06 F6 | 	mov	arg01, #0
13d50     20 07 B1 FD | 	call	#__system___getiolock_0484
13d54     FD 12 02 F6 | 	mov	arg01, result1
13d58     B8 AD B0 FD | 	call	#__system___lockmem
13d5c     73 01 00 FF 
13d60     82 15 06 F6 | 	mov	arg02, ##@LR__5160
13d64     00 12 06 F6 | 	mov	arg01, #0
13d68     00 16 06 F6 | 	mov	arg03, #0
13d6c     98 BA B0 FD | 	call	#__system___basic_print_string
13d70     00 12 06 F6 | 	mov	arg01, #0
13d74     FC 06 B1 FD | 	call	#__system___getiolock_0484
13d78     FD 00 68 FC | 	wrlong	#0, result1
13d7c     0F 12 06 F6 | 	mov	arg01, #15
13d80     E8 68 B0 FD | 	call	#_printerror
13d84     20 00 90 FD | 	jmp	#LR__1603
13d88                 | LR__1602
13d88     A7 12 02 FB | 	rdlong	arg01, fp
13d8c     10 4E 05 F1 | 	add	fp, #16
13d90     A7 14 02 FB | 	rdlong	arg02, fp
13d94     10 4E 85 F1 | 	sub	fp, #16
13d98     88 CD B0 FD | 	call	#__system__Left_S
13d9c     A7 FA 61 FC | 	wrlong	result1, fp
13da0     A7 12 02 F6 | 	mov	arg01, fp
13da4     68 6B BF FD | 	call	#_push
13da8                 | LR__1603
13da8     A7 F0 03 F6 | 	mov	ptra, fp
13dac     B2 00 A0 FD | 	call	#popregs_
13db0                 | _do_left_ret
13db0     2D 00 64 FD | 	ret
13db4                 | 
13db4                 | ' 
13db4                 | ' sub do_asc
13db4                 | _do_asc
13db4     01 4A 05 F6 | 	mov	COUNT_, #1
13db8     A8 00 A0 FD | 	call	#pushregs_
13dbc     14 F0 07 F1 | 	add	ptra, #20
13dc0     4A 00 00 FF 
13dc4     B0 E4 05 F1 | 	add	objptr, ##38064
13dc8     F2 1E 02 FB | 	rdlong	local01, objptr
13dcc     0F 17 02 F6 | 	mov	arg03, local01
13dd0     01 16 66 F0 | 	shl	arg03, #1
13dd4     0F 17 02 F1 | 	add	arg03, local01
13dd8     02 16 66 F0 | 	shl	arg03, #2
13ddc     03 00 00 FF 
13de0     04 E4 85 F1 | 	sub	objptr, ##1540
13de4     F2 16 02 F1 | 	add	arg03, objptr
13de8     0B 17 02 FB | 	rdlong	arg03, arg03
13dec     0C 4E 05 F1 | 	add	fp, #12
13df0     A7 16 62 FC | 	wrlong	arg03, fp
13df4                 | ' 
13df4                 | ' numpar=compiledline(lineptr_e).result.uresult
13df4                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
13df4     0C 4E 85 F1 | 	sub	fp, #12
13df8     02 16 16 F2 | 	cmp	arg03, #2 wc
13dfc     47 00 00 FF 
13e00     AC E4 85 F1 | 	sub	objptr, ##36524
13e04     0C 4E 05 C1 |  if_b	add	fp, #12
13e08     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
13e0c     0C 4E 85 C1 |  if_b	sub	fp, #12
13e10     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1610
13e14     00 12 06 F6 | 	mov	arg01, #0
13e18     58 06 B1 FD | 	call	#__system___getiolock_0484
13e1c     FD 12 02 F6 | 	mov	arg01, result1
13e20     F0 AC B0 FD | 	call	#__system___lockmem
13e24     73 01 00 FF 
13e28     8A 15 06 F6 | 	mov	arg02, ##@LR__5161
13e2c     00 12 06 F6 | 	mov	arg01, #0
13e30     00 16 06 F6 | 	mov	arg03, #0
13e34     D0 B9 B0 FD | 	call	#__system___basic_print_string
13e38     00 12 06 F6 | 	mov	arg01, #0
13e3c     34 06 B1 FD | 	call	#__system___getiolock_0484
13e40     FD 00 68 FC | 	wrlong	#0, result1
13e44     27 12 06 F6 | 	mov	arg01, #39
13e48     20 68 B0 FD | 	call	#_printerror
13e4c     B0 00 90 FD | 	jmp	#LR__1613
13e50                 | LR__1610
13e50     24 6A BF FD | 	call	#_pop
13e54     FF 16 02 F6 | 	mov	arg03, result3
13e58     A7 FA 61 FC | 	wrlong	result1, fp
13e5c     04 4E 05 F1 | 	add	fp, #4
13e60     A7 FC 61 FC | 	wrlong	result2, fp
13e64     04 4E 05 F1 | 	add	fp, #4
13e68     A7 16 62 FC | 	wrlong	arg03, fp
13e6c                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13e6c     08 4E 85 F1 | 	sub	fp, #8
13e70     2B 16 0E F2 | 	cmp	arg03, #43 wz
13e74     18 00 90 5D |  if_ne	jmp	#LR__1611
13e78     A7 12 02 FB | 	rdlong	arg01, fp
13e7c     14 AD BF FD | 	call	#_convertstring
13e80     A7 FA 61 FC | 	wrlong	result1, fp
13e84     08 4E 05 F1 | 	add	fp, #8
13e88     A7 3E 68 FC | 	wrlong	#31, fp
13e8c     08 4E 85 F1 | 	sub	fp, #8
13e90                 | LR__1611
13e90                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
13e90     08 4E 05 F1 | 	add	fp, #8
13e94     A7 16 02 FB | 	rdlong	arg03, fp
13e98     08 4E 85 F1 | 	sub	fp, #8
13e9c     1F 16 0E F2 | 	cmp	arg03, #31 wz
13ea0     3C 00 90 AD |  if_e	jmp	#LR__1612
13ea4     00 12 06 F6 | 	mov	arg01, #0
13ea8     C8 05 B1 FD | 	call	#__system___getiolock_0484
13eac     FD 12 02 F6 | 	mov	arg01, result1
13eb0     60 AC B0 FD | 	call	#__system___lockmem
13eb4     73 01 00 FF 
13eb8     90 15 06 F6 | 	mov	arg02, ##@LR__5162
13ebc     00 12 06 F6 | 	mov	arg01, #0
13ec0     00 16 06 F6 | 	mov	arg03, #0
13ec4     40 B9 B0 FD | 	call	#__system___basic_print_string
13ec8     00 12 06 F6 | 	mov	arg01, #0
13ecc     A4 05 B1 FD | 	call	#__system___getiolock_0484
13ed0     FD 00 68 FC | 	wrlong	#0, result1
13ed4     0F 12 06 F6 | 	mov	arg01, #15
13ed8     90 67 B0 FD | 	call	#_printerror
13edc     20 00 90 FD | 	jmp	#LR__1613
13ee0                 | LR__1612
13ee0     A7 1E 02 FB | 	rdlong	local01, fp
13ee4     0F 1F C2 FA | 	rdbyte	local01, local01
13ee8     A7 1E 62 FC | 	wrlong	local01, fp
13eec     08 4E 05 F1 | 	add	fp, #8
13ef0     A7 38 68 FC | 	wrlong	#28, fp
13ef4     08 4E 85 F1 | 	sub	fp, #8
13ef8     A7 12 02 F6 | 	mov	arg01, fp
13efc     10 6A BF FD | 	call	#_push
13f00                 | LR__1613
13f00     A7 F0 03 F6 | 	mov	ptra, fp
13f04     B2 00 A0 FD | 	call	#popregs_
13f08                 | _do_asc_ret
13f08     2D 00 64 FD | 	ret
13f0c                 | 
13f0c                 | ' 
13f0c                 | ' sub do_len
13f0c                 | _do_len
13f0c     02 4A 05 F6 | 	mov	COUNT_, #2
13f10     A8 00 A0 FD | 	call	#pushregs_
13f14     14 F0 07 F1 | 	add	ptra, #20
13f18     4A 00 00 FF 
13f1c     B0 E4 05 F1 | 	add	objptr, ##38064
13f20     F2 1E 02 FB | 	rdlong	local01, objptr
13f24     0F 17 02 F6 | 	mov	arg03, local01
13f28     01 16 66 F0 | 	shl	arg03, #1
13f2c     0F 17 02 F1 | 	add	arg03, local01
13f30     02 16 66 F0 | 	shl	arg03, #2
13f34     03 00 00 FF 
13f38     04 E4 85 F1 | 	sub	objptr, ##1540
13f3c     F2 16 02 F1 | 	add	arg03, objptr
13f40     0B 17 02 FB | 	rdlong	arg03, arg03
13f44     0C 4E 05 F1 | 	add	fp, #12
13f48     A7 16 62 FC | 	wrlong	arg03, fp
13f4c                 | ' 
13f4c                 | ' numpar=compiledline(lineptr_e).result.uresult
13f4c                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
13f4c     0C 4E 85 F1 | 	sub	fp, #12
13f50     02 16 16 F2 | 	cmp	arg03, #2 wc
13f54     47 00 00 FF 
13f58     AC E4 85 F1 | 	sub	objptr, ##36524
13f5c     0C 4E 05 C1 |  if_b	add	fp, #12
13f60     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
13f64     0C 4E 85 C1 |  if_b	sub	fp, #12
13f68     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1620
13f6c     00 12 06 F6 | 	mov	arg01, #0
13f70     00 05 B1 FD | 	call	#__system___getiolock_0484
13f74     FD 12 02 F6 | 	mov	arg01, result1
13f78     98 AB B0 FD | 	call	#__system___lockmem
13f7c     73 01 00 FF 
13f80     96 15 06 F6 | 	mov	arg02, ##@LR__5163
13f84     00 12 06 F6 | 	mov	arg01, #0
13f88     00 16 06 F6 | 	mov	arg03, #0
13f8c     78 B8 B0 FD | 	call	#__system___basic_print_string
13f90     00 12 06 F6 | 	mov	arg01, #0
13f94     DC 04 B1 FD | 	call	#__system___getiolock_0484
13f98     FD 00 68 FC | 	wrlong	#0, result1
13f9c     27 12 06 F6 | 	mov	arg01, #39
13fa0     C8 66 B0 FD | 	call	#_printerror
13fa4     C4 00 90 FD | 	jmp	#LR__1625
13fa8                 | LR__1620
13fa8     CC 68 BF FD | 	call	#_pop
13fac     FF 16 02 F6 | 	mov	arg03, result3
13fb0     A7 FA 61 FC | 	wrlong	result1, fp
13fb4     04 4E 05 F1 | 	add	fp, #4
13fb8     A7 FC 61 FC | 	wrlong	result2, fp
13fbc     04 4E 05 F1 | 	add	fp, #4
13fc0     A7 16 62 FC | 	wrlong	arg03, fp
13fc4                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13fc4     08 4E 85 F1 | 	sub	fp, #8
13fc8     2B 16 0E F2 | 	cmp	arg03, #43 wz
13fcc     18 00 90 5D |  if_ne	jmp	#LR__1621
13fd0     A7 12 02 FB | 	rdlong	arg01, fp
13fd4     BC AB BF FD | 	call	#_convertstring
13fd8     A7 FA 61 FC | 	wrlong	result1, fp
13fdc     08 4E 05 F1 | 	add	fp, #8
13fe0     A7 3E 68 FC | 	wrlong	#31, fp
13fe4     08 4E 85 F1 | 	sub	fp, #8
13fe8                 | LR__1621
13fe8                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
13fe8     08 4E 05 F1 | 	add	fp, #8
13fec     A7 16 02 FB | 	rdlong	arg03, fp
13ff0     08 4E 85 F1 | 	sub	fp, #8
13ff4     1F 16 0E F2 | 	cmp	arg03, #31 wz
13ff8     3C 00 90 AD |  if_e	jmp	#LR__1622
13ffc     00 12 06 F6 | 	mov	arg01, #0
14000     70 04 B1 FD | 	call	#__system___getiolock_0484
14004     FD 12 02 F6 | 	mov	arg01, result1
14008     08 AB B0 FD | 	call	#__system___lockmem
1400c     73 01 00 FF 
14010     9C 15 06 F6 | 	mov	arg02, ##@LR__5164
14014     00 12 06 F6 | 	mov	arg01, #0
14018     00 16 06 F6 | 	mov	arg03, #0
1401c     E8 B7 B0 FD | 	call	#__system___basic_print_string
14020     00 12 06 F6 | 	mov	arg01, #0
14024     4C 04 B1 FD | 	call	#__system___getiolock_0484
14028     FD 00 68 FC | 	wrlong	#0, result1
1402c     0F 12 06 F6 | 	mov	arg01, #15
14030     38 66 B0 FD | 	call	#_printerror
14034     34 00 90 FD | 	jmp	#LR__1625
14038                 | LR__1622
14038     A7 12 02 FB | 	rdlong	arg01, fp
1403c     09 21 02 F6 | 	mov	local02, arg01
14040     97 06 48 FB | 	callpa	#(@LR__1624-@LR__1623)>>2,fcache_load_ptr_
14044                 | LR__1623
14044     10 FB C9 FA | 	rdbyte	result1, local02 wz
14048     01 20 06 51 |  if_ne	add	local02, #1
1404c     F4 FF 9F 5D |  if_ne	jmp	#LR__1623
14050                 | LR__1624
14050     09 21 82 F1 | 	sub	local02, arg01
14054     A7 20 62 FC | 	wrlong	local02, fp
14058     08 4E 05 F1 | 	add	fp, #8
1405c     A7 38 68 FC | 	wrlong	#28, fp
14060     08 4E 85 F1 | 	sub	fp, #8
14064     A7 12 02 F6 | 	mov	arg01, fp
14068     A4 68 BF FD | 	call	#_push
1406c                 | LR__1625
1406c     A7 F0 03 F6 | 	mov	ptra, fp
14070     B2 00 A0 FD | 	call	#popregs_
14074                 | _do_len_ret
14074     2D 00 64 FD | 	ret
14078                 | 
14078                 | ' 
14078                 | ' sub do_chr
14078                 | _do_chr
14078     01 4A 05 F6 | 	mov	COUNT_, #1
1407c     A8 00 A0 FD | 	call	#pushregs_
14080     14 F0 07 F1 | 	add	ptra, #20
14084     4A 00 00 FF 
14088     B0 E4 05 F1 | 	add	objptr, ##38064
1408c     F2 1E 02 FB | 	rdlong	local01, objptr
14090     0F 17 02 F6 | 	mov	arg03, local01
14094     01 16 66 F0 | 	shl	arg03, #1
14098     0F 17 02 F1 | 	add	arg03, local01
1409c     02 16 66 F0 | 	shl	arg03, #2
140a0     03 00 00 FF 
140a4     04 E4 85 F1 | 	sub	objptr, ##1540
140a8     F2 16 02 F1 | 	add	arg03, objptr
140ac     0B 17 02 FB | 	rdlong	arg03, arg03
140b0     0C 4E 05 F1 | 	add	fp, #12
140b4     A7 16 62 FC | 	wrlong	arg03, fp
140b8                 | ' 
140b8                 | ' numpar=compiledline(lineptr_e).result.uresult
140b8                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
140b8     0C 4E 85 F1 | 	sub	fp, #12
140bc     02 16 16 F2 | 	cmp	arg03, #2 wc
140c0     47 00 00 FF 
140c4     AC E4 85 F1 | 	sub	objptr, ##36524
140c8     0C 4E 05 C1 |  if_b	add	fp, #12
140cc     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
140d0     0C 4E 85 C1 |  if_b	sub	fp, #12
140d4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1630
140d8     00 12 06 F6 | 	mov	arg01, #0
140dc     94 03 B1 FD | 	call	#__system___getiolock_0484
140e0     FD 12 02 F6 | 	mov	arg01, result1
140e4     2C AA B0 FD | 	call	#__system___lockmem
140e8     73 01 00 FF 
140ec     A2 15 06 F6 | 	mov	arg02, ##@LR__5165
140f0     00 12 06 F6 | 	mov	arg01, #0
140f4     00 16 06 F6 | 	mov	arg03, #0
140f8     0C B7 B0 FD | 	call	#__system___basic_print_string
140fc     00 12 06 F6 | 	mov	arg01, #0
14100     70 03 B1 FD | 	call	#__system___getiolock_0484
14104     FD 00 68 FC | 	wrlong	#0, result1
14108     27 12 06 F6 | 	mov	arg01, #39
1410c     5C 65 B0 FD | 	call	#_printerror
14110     54 00 90 FD | 	jmp	#LR__1631
14114                 | LR__1630
14114     60 67 BF FD | 	call	#_pop
14118     FF 1E 02 F6 | 	mov	local01, result3
1411c     A7 FA 61 FC | 	wrlong	result1, fp
14120     04 4E 05 F1 | 	add	fp, #4
14124     A7 FC 61 FC | 	wrlong	result2, fp
14128     04 4E 05 F1 | 	add	fp, #4
1412c     A7 1E 62 FC | 	wrlong	local01, fp
14130     08 4E 85 F1 | 	sub	fp, #8
14134     A7 12 02 F6 | 	mov	arg01, fp
14138     7C F2 BF FD | 	call	#_converttoint
1413c     10 4E 05 F1 | 	add	fp, #16
14140     A7 FA 61 FC | 	wrlong	result1, fp
14144     FD 12 02 F6 | 	mov	arg01, result1
14148     10 4E 85 F1 | 	sub	fp, #16
1414c     98 CB B0 FD | 	call	#__system__Chr_S
14150     A7 FA 61 FC | 	wrlong	result1, fp
14154     08 4E 05 F1 | 	add	fp, #8
14158     A7 3E 68 FC | 	wrlong	#31, fp
1415c     08 4E 85 F1 | 	sub	fp, #8
14160     A7 12 02 F6 | 	mov	arg01, fp
14164     A8 67 BF FD | 	call	#_push
14168                 | LR__1631
14168     A7 F0 03 F6 | 	mov	ptra, fp
1416c     B2 00 A0 FD | 	call	#popregs_
14170                 | _do_chr_ret
14170     2D 00 64 FD | 	ret
14174                 | 
14174                 | ' 
14174                 | ' sub do_val
14174                 | _do_val
14174     03 4A 05 F6 | 	mov	COUNT_, #3
14178     A8 00 A0 FD | 	call	#pushregs_
1417c     20 F0 07 F1 | 	add	ptra, #32
14180     4A 00 00 FF 
14184     B0 E4 05 F1 | 	add	objptr, ##38064
14188     F2 16 02 FB | 	rdlong	arg03, objptr
1418c     0B 1F 02 F6 | 	mov	local01, arg03
14190     01 1E 66 F0 | 	shl	local01, #1
14194     0B 1F 02 F1 | 	add	local01, arg03
14198     02 1E 66 F0 | 	shl	local01, #2
1419c     03 00 00 FF 
141a0     04 E4 85 F1 | 	sub	objptr, ##1540
141a4     F2 1E 02 F1 | 	add	local01, objptr
141a8     0F 17 02 FB | 	rdlong	arg03, local01
141ac     0C 4E 05 F1 | 	add	fp, #12
141b0     A7 16 62 FC | 	wrlong	arg03, fp
141b4                 | ' 
141b4                 | ' numpar=compiledline(lineptr_e).result.uresult
141b4                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
141b4     0C 4E 85 F1 | 	sub	fp, #12
141b8     02 16 16 F2 | 	cmp	arg03, #2 wc
141bc     47 00 00 FF 
141c0     AC E4 85 F1 | 	sub	objptr, ##36524
141c4     0C 4E 05 C1 |  if_b	add	fp, #12
141c8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
141cc     0C 4E 85 C1 |  if_b	sub	fp, #12
141d0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1640
141d4     00 12 06 F6 | 	mov	arg01, #0
141d8     98 02 B1 FD | 	call	#__system___getiolock_0484
141dc     FD 12 02 F6 | 	mov	arg01, result1
141e0     30 A9 B0 FD | 	call	#__system___lockmem
141e4     73 01 00 FF 
141e8     A9 15 06 F6 | 	mov	arg02, ##@LR__5166
141ec     00 12 06 F6 | 	mov	arg01, #0
141f0     00 16 06 F6 | 	mov	arg03, #0
141f4     10 B6 B0 FD | 	call	#__system___basic_print_string
141f8     00 12 06 F6 | 	mov	arg01, #0
141fc     74 02 B1 FD | 	call	#__system___getiolock_0484
14200     FD 00 68 FC | 	wrlong	#0, result1
14204     27 12 06 F6 | 	mov	arg01, #39
14208     60 64 B0 FD | 	call	#_printerror
1420c     5C 02 90 FD | 	jmp	#LR__1653
14210                 | LR__1640
14210     64 66 BF FD | 	call	#_pop
14214     FF 16 02 F6 | 	mov	arg03, result3
14218     A7 FA 61 FC | 	wrlong	result1, fp
1421c     04 4E 05 F1 | 	add	fp, #4
14220     A7 FC 61 FC | 	wrlong	result2, fp
14224     04 4E 05 F1 | 	add	fp, #4
14228     A7 16 62 FC | 	wrlong	arg03, fp
1422c                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1422c     08 4E 85 F1 | 	sub	fp, #8
14230     2B 16 0E F2 | 	cmp	arg03, #43 wz
14234     18 00 90 5D |  if_ne	jmp	#LR__1641
14238     A7 12 02 FB | 	rdlong	arg01, fp
1423c     54 A9 BF FD | 	call	#_convertstring
14240     A7 FA 61 FC | 	wrlong	result1, fp
14244     08 4E 05 F1 | 	add	fp, #8
14248     A7 3E 68 FC | 	wrlong	#31, fp
1424c     08 4E 85 F1 | 	sub	fp, #8
14250                 | LR__1641
14250                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
14250     08 4E 05 F1 | 	add	fp, #8
14254     A7 16 02 FB | 	rdlong	arg03, fp
14258     08 4E 85 F1 | 	sub	fp, #8
1425c     1F 16 0E F2 | 	cmp	arg03, #31 wz
14260     3C 00 90 AD |  if_e	jmp	#LR__1642
14264     00 12 06 F6 | 	mov	arg01, #0
14268     08 02 B1 FD | 	call	#__system___getiolock_0484
1426c     FD 12 02 F6 | 	mov	arg01, result1
14270     A0 A8 B0 FD | 	call	#__system___lockmem
14274     73 01 00 FF 
14278     AF 15 06 F6 | 	mov	arg02, ##@LR__5167
1427c     00 12 06 F6 | 	mov	arg01, #0
14280     00 16 06 F6 | 	mov	arg03, #0
14284     80 B5 B0 FD | 	call	#__system___basic_print_string
14288     00 12 06 F6 | 	mov	arg01, #0
1428c     E4 01 B1 FD | 	call	#__system___getiolock_0484
14290     FD 00 68 FC | 	wrlong	#0, result1
14294     0F 12 06 F6 | 	mov	arg01, #15
14298     D0 63 B0 FD | 	call	#_printerror
1429c     CC 01 90 FD | 	jmp	#LR__1653
142a0                 | LR__1642
142a0                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
142a0     A7 12 02 FB | 	rdlong	arg01, fp
142a4     01 14 06 F6 | 	mov	arg02, #1
142a8     78 C8 B0 FD | 	call	#__system__Left_S
142ac     FD 12 02 F6 | 	mov	arg01, result1
142b0     73 01 00 FF 
142b4     B5 15 06 F6 | 	mov	arg02, ##@LR__5168
142b8     80 A8 B0 FD | 	call	#__system___string_cmp
142bc     00 FA 0D F2 | 	cmp	result1, #0 wz
142c0     48 00 90 5D |  if_ne	jmp	#LR__1645
142c4     73 01 00 FF 
142c8     B7 1F 06 F6 | 	mov	local01, ##@LR__5169
142cc     A7 16 02 FB | 	rdlong	arg03, fp
142d0     0B 13 02 F6 | 	mov	arg01, arg03
142d4     09 21 02 F6 | 	mov	local02, arg01
142d8     97 06 48 FB | 	callpa	#(@LR__1644-@LR__1643)>>2,fcache_load_ptr_
142dc                 | LR__1643
142dc     10 FB C9 FA | 	rdbyte	result1, local02 wz
142e0     01 20 06 51 |  if_ne	add	local02, #1
142e4     F4 FF 9F 5D |  if_ne	jmp	#LR__1643
142e8                 | LR__1644
142e8     09 21 82 F1 | 	sub	local02, arg01
142ec     10 15 02 F6 | 	mov	arg02, local02
142f0     01 14 86 F1 | 	sub	arg02, #1
142f4     0B 13 02 F6 | 	mov	arg01, arg03
142f8     B0 C8 B0 FD | 	call	#__system__Right_S
142fc     FD 14 02 F6 | 	mov	arg02, result1
14300     0F 13 02 F6 | 	mov	arg01, local01
14304     68 A8 B0 FD | 	call	#__system___string_concat
14308     A7 FA 61 FC | 	wrlong	result1, fp
1430c                 | LR__1645
1430c                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1430c     A7 12 02 FB | 	rdlong	arg01, fp
14310     01 14 06 F6 | 	mov	arg02, #1
14314     0C C8 B0 FD | 	call	#__system__Left_S
14318     FD 12 02 F6 | 	mov	arg01, result1
1431c     73 01 00 FF 
14320     BA 15 06 F6 | 	mov	arg02, ##@LR__5170
14324     14 A8 B0 FD | 	call	#__system___string_cmp
14328     00 FA 0D F2 | 	cmp	result1, #0 wz
1432c     48 00 90 5D |  if_ne	jmp	#LR__1648
14330     73 01 00 FF 
14334     BC 1F 06 F6 | 	mov	local01, ##@LR__5171
14338     A7 16 02 FB | 	rdlong	arg03, fp
1433c     0B 13 02 F6 | 	mov	arg01, arg03
14340     09 21 02 F6 | 	mov	local02, arg01
14344     97 06 48 FB | 	callpa	#(@LR__1647-@LR__1646)>>2,fcache_load_ptr_
14348                 | LR__1646
14348     10 FB C9 FA | 	rdbyte	result1, local02 wz
1434c     01 20 06 51 |  if_ne	add	local02, #1
14350     F4 FF 9F 5D |  if_ne	jmp	#LR__1646
14354                 | LR__1647
14354     09 21 82 F1 | 	sub	local02, arg01
14358     10 15 02 F6 | 	mov	arg02, local02
1435c     01 14 86 F1 | 	sub	arg02, #1
14360     0B 13 02 F6 | 	mov	arg01, arg03
14364     44 C8 B0 FD | 	call	#__system__Right_S
14368     FD 14 02 F6 | 	mov	arg02, result1
1436c     0F 13 02 F6 | 	mov	arg01, local01
14370     FC A7 B0 FD | 	call	#__system___string_concat
14374     A7 FA 61 FC | 	wrlong	result1, fp
14378                 | LR__1648
14378     A7 12 02 FB | 	rdlong	arg01, fp
1437c     C4 DA B0 FD | 	call	#__system____builtin_atof
14380     1C 4E 05 F1 | 	add	fp, #28
14384     A7 FA 61 FC | 	wrlong	result1, fp
14388     1C 4E 85 F1 | 	sub	fp, #28
1438c     A7 12 02 FB | 	rdlong	arg01, fp
14390     00 14 06 F6 | 	mov	arg02, #0
14394     3C D9 B0 FD | 	call	#__system____builtin_atoi
14398     18 4E 05 F1 | 	add	fp, #24
1439c     A7 FA 61 FC | 	wrlong	result1, fp
143a0                 | ' fval=val(t1.result.sresult)
143a0                 | ' ival=val%(t1.result.sresult)
143a0                 | ' if fval=ival then
143a0     04 4E 05 F1 | 	add	fp, #4
143a4     A7 1E 02 FB | 	rdlong	local01, fp
143a8     1C 4E 85 F1 | 	sub	fp, #28
143ac     FD 12 52 F6 | 	abs	arg01, result1 wc
143b0     1F 22 C6 C9 |  if_b	decod	local03, #31
143b4     00 22 06 36 |  if_ae	mov	local03, #0
143b8     9C CE B0 FD | 	call	#__system___float_fromuns
143bc     11 FB 61 F5 | 	xor	result1, local03
143c0     FD 14 02 F6 | 	mov	arg02, result1
143c4     0F 13 02 F6 | 	mov	arg01, local01
143c8     01 16 06 F6 | 	mov	arg03, #1
143cc     C0 D6 B0 FD | 	call	#__system___float_cmp
143d0     00 FA 0D F2 | 	cmp	result1, #0 wz
143d4     20 00 90 5D |  if_ne	jmp	#LR__1649
143d8     18 4E 05 F1 | 	add	fp, #24
143dc     A7 1E 02 FB | 	rdlong	local01, fp
143e0     18 4E 85 F1 | 	sub	fp, #24
143e4     A7 1E 62 FC | 	wrlong	local01, fp
143e8     08 4E 05 F1 | 	add	fp, #8
143ec     A7 38 68 FC | 	wrlong	#28, fp
143f0     08 4E 85 F1 | 	sub	fp, #8
143f4     6C 00 90 FD | 	jmp	#LR__1652
143f8                 | LR__1649
143f8                 | '   if fval=0 andalso ival<>0 then
143f8     1C 4E 05 F1 | 	add	fp, #28
143fc     A7 12 02 FB | 	rdlong	arg01, fp
14400     1C 4E 85 F1 | 	sub	fp, #28
14404     00 14 06 F6 | 	mov	arg02, #0
14408     01 16 06 F6 | 	mov	arg03, #1
1440c     80 D6 B0 FD | 	call	#__system___float_cmp
14410     00 FA 0D F2 | 	cmp	result1, #0 wz
14414     30 00 90 5D |  if_ne	jmp	#LR__1650
14418     18 4E 05 F1 | 	add	fp, #24
1441c     A7 1E 0A FB | 	rdlong	local01, fp wz
14420     18 4E 85 F1 | 	sub	fp, #24
14424     20 00 90 AD |  if_e	jmp	#LR__1650
14428     18 4E 05 F1 | 	add	fp, #24
1442c     A7 1E 02 FB | 	rdlong	local01, fp
14430     18 4E 85 F1 | 	sub	fp, #24
14434     A7 1E 62 FC | 	wrlong	local01, fp
14438     08 4E 05 F1 | 	add	fp, #8
1443c     A7 38 68 FC | 	wrlong	#28, fp
14440     08 4E 85 F1 | 	sub	fp, #8
14444     1C 00 90 FD | 	jmp	#LR__1651
14448                 | LR__1650
14448     1C 4E 05 F1 | 	add	fp, #28
1444c     A7 1E 02 FB | 	rdlong	local01, fp
14450     1C 4E 85 F1 | 	sub	fp, #28
14454     A7 1E 62 FC | 	wrlong	local01, fp
14458     08 4E 05 F1 | 	add	fp, #8
1445c     A7 3C 68 FC | 	wrlong	#30, fp
14460     08 4E 85 F1 | 	sub	fp, #8
14464                 | LR__1651
14464                 | LR__1652
14464     A7 12 02 F6 | 	mov	arg01, fp
14468     A4 64 BF FD | 	call	#_push
1446c                 | LR__1653
1446c     A7 F0 03 F6 | 	mov	ptra, fp
14470     B2 00 A0 FD | 	call	#popregs_
14474                 | _do_val_ret
14474     2D 00 64 FD | 	ret
14478                 | 
14478                 | ' 
14478                 | ' 
14478                 | ' sub do_hex
14478                 | _do_hex
14478     01 4A 05 F6 | 	mov	COUNT_, #1
1447c     A8 00 A0 FD | 	call	#pushregs_
14480     18 F0 07 F1 | 	add	ptra, #24
14484     4A 00 00 FF 
14488     B0 E4 05 F1 | 	add	objptr, ##38064
1448c     F2 1E 02 FB | 	rdlong	local01, objptr
14490     0F 17 02 F6 | 	mov	arg03, local01
14494     01 16 66 F0 | 	shl	arg03, #1
14498     0F 17 02 F1 | 	add	arg03, local01
1449c     02 16 66 F0 | 	shl	arg03, #2
144a0     03 00 00 FF 
144a4     04 E4 85 F1 | 	sub	objptr, ##1540
144a8     F2 16 02 F1 | 	add	arg03, objptr
144ac     0B 17 02 FB | 	rdlong	arg03, arg03
144b0     0C 4E 05 F1 | 	add	fp, #12
144b4     A7 16 62 FC | 	wrlong	arg03, fp
144b8                 | ' 
144b8                 | ' numpar=compiledline(lineptr_e).result.uresult
144b8                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
144b8     0C 4E 85 F1 | 	sub	fp, #12
144bc     03 16 16 F2 | 	cmp	arg03, #3 wc
144c0     47 00 00 FF 
144c4     AC E4 85 F1 | 	sub	objptr, ##36524
144c8     0C 4E 05 C1 |  if_b	add	fp, #12
144cc     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
144d0     0C 4E 85 C1 |  if_b	sub	fp, #12
144d4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1660
144d8     00 12 06 F6 | 	mov	arg01, #0
144dc     94 FF B0 FD | 	call	#__system___getiolock_0484
144e0     FD 12 02 F6 | 	mov	arg01, result1
144e4     2C A6 B0 FD | 	call	#__system___lockmem
144e8     73 01 00 FF 
144ec     BF 15 06 F6 | 	mov	arg02, ##@LR__5172
144f0     00 12 06 F6 | 	mov	arg01, #0
144f4     00 16 06 F6 | 	mov	arg03, #0
144f8     0C B3 B0 FD | 	call	#__system___basic_print_string
144fc     00 12 06 F6 | 	mov	arg01, #0
14500     70 FF B0 FD | 	call	#__system___getiolock_0484
14504     FD 00 68 FC | 	wrlong	#0, result1
14508     27 12 06 F6 | 	mov	arg01, #39
1450c     5C 61 B0 FD | 	call	#_printerror
14510     B8 00 90 FD | 	jmp	#LR__1663
14514                 | LR__1660
14514                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
14514     0C 4E 05 F1 | 	add	fp, #12
14518     A7 1E 02 FB | 	rdlong	local01, fp
1451c     0C 4E 85 F1 | 	sub	fp, #12
14520     02 1E 0E F2 | 	cmp	local01, #2 wz
14524     38 00 90 5D |  if_ne	jmp	#LR__1661
14528     4C 63 BF FD | 	call	#_pop
1452c     FF 1E 02 F6 | 	mov	local01, result3
14530     A7 FA 61 FC | 	wrlong	result1, fp
14534     04 4E 05 F1 | 	add	fp, #4
14538     A7 FC 61 FC | 	wrlong	result2, fp
1453c     04 4E 05 F1 | 	add	fp, #4
14540     A7 1E 62 FC | 	wrlong	local01, fp
14544     08 4E 85 F1 | 	sub	fp, #8
14548     A7 12 02 F6 | 	mov	arg01, fp
1454c     68 EE BF FD | 	call	#_converttoint
14550     14 4E 05 F1 | 	add	fp, #20
14554     A7 FA 61 FC | 	wrlong	result1, fp
14558     14 4E 85 F1 | 	sub	fp, #20
1455c     0C 00 90 FD | 	jmp	#LR__1662
14560                 | LR__1661
14560     14 4E 05 F1 | 	add	fp, #20
14564     A7 10 68 FC | 	wrlong	#8, fp
14568     14 4E 85 F1 | 	sub	fp, #20
1456c                 | LR__1662
1456c     08 63 BF FD | 	call	#_pop
14570     FF 1E 02 F6 | 	mov	local01, result3
14574     A7 FA 61 FC | 	wrlong	result1, fp
14578     04 4E 05 F1 | 	add	fp, #4
1457c     A7 FC 61 FC | 	wrlong	result2, fp
14580     04 4E 05 F1 | 	add	fp, #4
14584     A7 1E 62 FC | 	wrlong	local01, fp
14588     08 4E 85 F1 | 	sub	fp, #8
1458c     A7 12 02 F6 | 	mov	arg01, fp
14590     24 EE BF FD | 	call	#_converttoint
14594     10 4E 05 F1 | 	add	fp, #16
14598     A7 FA 61 FC | 	wrlong	result1, fp
1459c     FD 12 02 F6 | 	mov	arg01, result1
145a0     04 4E 05 F1 | 	add	fp, #4
145a4     A7 14 02 FB | 	rdlong	arg02, fp
145a8     14 4E 85 F1 | 	sub	fp, #20
145ac     10 16 06 F6 | 	mov	arg03, #16
145b0     C4 C7 B0 FD | 	call	#__system__Number_S
145b4     A7 FA 61 FC | 	wrlong	result1, fp
145b8     08 4E 05 F1 | 	add	fp, #8
145bc     A7 3E 68 FC | 	wrlong	#31, fp
145c0     08 4E 85 F1 | 	sub	fp, #8
145c4     A7 12 02 F6 | 	mov	arg01, fp
145c8     44 63 BF FD | 	call	#_push
145cc                 | LR__1663
145cc     A7 F0 03 F6 | 	mov	ptra, fp
145d0     B2 00 A0 FD | 	call	#popregs_
145d4                 | _do_hex_ret
145d4     2D 00 64 FD | 	ret
145d8                 | 
145d8                 | ' 
145d8                 | ' sub do_bin
145d8                 | _do_bin
145d8     01 4A 05 F6 | 	mov	COUNT_, #1
145dc     A8 00 A0 FD | 	call	#pushregs_
145e0     18 F0 07 F1 | 	add	ptra, #24
145e4     4A 00 00 FF 
145e8     B0 E4 05 F1 | 	add	objptr, ##38064
145ec     F2 1E 02 FB | 	rdlong	local01, objptr
145f0     0F 17 02 F6 | 	mov	arg03, local01
145f4     01 16 66 F0 | 	shl	arg03, #1
145f8     0F 17 02 F1 | 	add	arg03, local01
145fc     02 16 66 F0 | 	shl	arg03, #2
14600     03 00 00 FF 
14604     04 E4 85 F1 | 	sub	objptr, ##1540
14608     F2 16 02 F1 | 	add	arg03, objptr
1460c     0B 17 02 FB | 	rdlong	arg03, arg03
14610     0C 4E 05 F1 | 	add	fp, #12
14614     A7 16 62 FC | 	wrlong	arg03, fp
14618                 | ' 
14618                 | ' numpar=compiledline(lineptr_e).result.uresult
14618                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
14618     0C 4E 85 F1 | 	sub	fp, #12
1461c     03 16 16 F2 | 	cmp	arg03, #3 wc
14620     47 00 00 FF 
14624     AC E4 85 F1 | 	sub	objptr, ##36524
14628     0C 4E 05 C1 |  if_b	add	fp, #12
1462c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14630     0C 4E 85 C1 |  if_b	sub	fp, #12
14634     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1670
14638     00 12 06 F6 | 	mov	arg01, #0
1463c     34 FE B0 FD | 	call	#__system___getiolock_0484
14640     FD 12 02 F6 | 	mov	arg01, result1
14644     CC A4 B0 FD | 	call	#__system___lockmem
14648     73 01 00 FF 
1464c     C6 15 06 F6 | 	mov	arg02, ##@LR__5173
14650     00 12 06 F6 | 	mov	arg01, #0
14654     00 16 06 F6 | 	mov	arg03, #0
14658     AC B1 B0 FD | 	call	#__system___basic_print_string
1465c     00 12 06 F6 | 	mov	arg01, #0
14660     10 FE B0 FD | 	call	#__system___getiolock_0484
14664     FD 00 68 FC | 	wrlong	#0, result1
14668     27 12 06 F6 | 	mov	arg01, #39
1466c     FC 5F B0 FD | 	call	#_printerror
14670     B8 00 90 FD | 	jmp	#LR__1673
14674                 | LR__1670
14674                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
14674     0C 4E 05 F1 | 	add	fp, #12
14678     A7 1E 02 FB | 	rdlong	local01, fp
1467c     0C 4E 85 F1 | 	sub	fp, #12
14680     02 1E 0E F2 | 	cmp	local01, #2 wz
14684     38 00 90 5D |  if_ne	jmp	#LR__1671
14688     EC 61 BF FD | 	call	#_pop
1468c     FF 1E 02 F6 | 	mov	local01, result3
14690     A7 FA 61 FC | 	wrlong	result1, fp
14694     04 4E 05 F1 | 	add	fp, #4
14698     A7 FC 61 FC | 	wrlong	result2, fp
1469c     04 4E 05 F1 | 	add	fp, #4
146a0     A7 1E 62 FC | 	wrlong	local01, fp
146a4     08 4E 85 F1 | 	sub	fp, #8
146a8     A7 12 02 F6 | 	mov	arg01, fp
146ac     08 ED BF FD | 	call	#_converttoint
146b0     14 4E 05 F1 | 	add	fp, #20
146b4     A7 FA 61 FC | 	wrlong	result1, fp
146b8     14 4E 85 F1 | 	sub	fp, #20
146bc     0C 00 90 FD | 	jmp	#LR__1672
146c0                 | LR__1671
146c0     14 4E 05 F1 | 	add	fp, #20
146c4     A7 00 68 FC | 	wrlong	#0, fp
146c8     14 4E 85 F1 | 	sub	fp, #20
146cc                 | LR__1672
146cc     A8 61 BF FD | 	call	#_pop
146d0     FF 1E 02 F6 | 	mov	local01, result3
146d4     A7 FA 61 FC | 	wrlong	result1, fp
146d8     04 4E 05 F1 | 	add	fp, #4
146dc     A7 FC 61 FC | 	wrlong	result2, fp
146e0     04 4E 05 F1 | 	add	fp, #4
146e4     A7 1E 62 FC | 	wrlong	local01, fp
146e8     08 4E 85 F1 | 	sub	fp, #8
146ec     A7 12 02 F6 | 	mov	arg01, fp
146f0     C4 EC BF FD | 	call	#_converttoint
146f4     10 4E 05 F1 | 	add	fp, #16
146f8     A7 FA 61 FC | 	wrlong	result1, fp
146fc     FD 12 02 F6 | 	mov	arg01, result1
14700     04 4E 05 F1 | 	add	fp, #4
14704     A7 14 02 FB | 	rdlong	arg02, fp
14708     14 4E 85 F1 | 	sub	fp, #20
1470c     02 16 06 F6 | 	mov	arg03, #2
14710     64 C6 B0 FD | 	call	#__system__Number_S
14714     A7 FA 61 FC | 	wrlong	result1, fp
14718     08 4E 05 F1 | 	add	fp, #8
1471c     A7 3E 68 FC | 	wrlong	#31, fp
14720     08 4E 85 F1 | 	sub	fp, #8
14724     A7 12 02 F6 | 	mov	arg01, fp
14728     E4 61 BF FD | 	call	#_push
1472c                 | LR__1673
1472c     A7 F0 03 F6 | 	mov	ptra, fp
14730     B2 00 A0 FD | 	call	#popregs_
14734                 | _do_bin_ret
14734     2D 00 64 FD | 	ret
14738                 | 
14738                 | ' 
14738                 | ' sub do_cos
14738                 | _do_cos
14738     01 4A 05 F6 | 	mov	COUNT_, #1
1473c     A8 00 A0 FD | 	call	#pushregs_
14740     10 F0 07 F1 | 	add	ptra, #16
14744     4A 00 00 FF 
14748     B0 E4 05 F1 | 	add	objptr, ##38064
1474c     F2 1E 02 FB | 	rdlong	local01, objptr
14750     0F 17 02 F6 | 	mov	arg03, local01
14754     01 16 66 F0 | 	shl	arg03, #1
14758     0F 17 02 F1 | 	add	arg03, local01
1475c     02 16 66 F0 | 	shl	arg03, #2
14760     03 00 00 FF 
14764     04 E4 85 F1 | 	sub	objptr, ##1540
14768     F2 16 02 F1 | 	add	arg03, objptr
1476c     0B 17 02 FB | 	rdlong	arg03, arg03
14770     0C 4E 05 F1 | 	add	fp, #12
14774     A7 16 62 FC | 	wrlong	arg03, fp
14778                 | ' 
14778                 | ' numpar=compiledline(lineptr_e).result.uresult
14778                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
14778     0C 4E 85 F1 | 	sub	fp, #12
1477c     02 16 16 F2 | 	cmp	arg03, #2 wc
14780     47 00 00 FF 
14784     AC E4 85 F1 | 	sub	objptr, ##36524
14788     0C 4E 05 C1 |  if_b	add	fp, #12
1478c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14790     0C 4E 85 C1 |  if_b	sub	fp, #12
14794     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1680
14798     00 12 06 F6 | 	mov	arg01, #0
1479c     D4 FC B0 FD | 	call	#__system___getiolock_0484
147a0     FD 12 02 F6 | 	mov	arg01, result1
147a4     6C A3 B0 FD | 	call	#__system___lockmem
147a8     73 01 00 FF 
147ac     CD 15 06 F6 | 	mov	arg02, ##@LR__5174
147b0     00 12 06 F6 | 	mov	arg01, #0
147b4     00 16 06 F6 | 	mov	arg03, #0
147b8     4C B0 B0 FD | 	call	#__system___basic_print_string
147bc     00 12 06 F6 | 	mov	arg01, #0
147c0     B0 FC B0 FD | 	call	#__system___getiolock_0484
147c4     FD 00 68 FC | 	wrlong	#0, result1
147c8     27 12 06 F6 | 	mov	arg01, #39
147cc     9C 5E B0 FD | 	call	#_printerror
147d0     78 00 90 FD | 	jmp	#LR__1681
147d4                 | LR__1680
147d4     A0 60 BF FD | 	call	#_pop
147d8     A7 FA 61 FC | 	wrlong	result1, fp
147dc     04 4E 05 F1 | 	add	fp, #4
147e0     A7 FC 61 FC | 	wrlong	result2, fp
147e4     04 4E 05 F1 | 	add	fp, #4
147e8     A7 FE 61 FC | 	wrlong	result3, fp
147ec     08 4E 85 F1 | 	sub	fp, #8
147f0     59 00 00 FF 
147f4     C8 E5 05 F1 | 	add	objptr, ##46024
147f8     F2 1E 02 FB | 	rdlong	local01, objptr
147fc     59 00 00 FF 
14800     C8 E5 85 F1 | 	sub	objptr, ##46024
14804     A7 12 02 F6 | 	mov	arg01, fp
14808     58 EC BF FD | 	call	#_converttofloat
1480c     FD 14 02 F6 | 	mov	arg02, result1
14810     0F 13 02 F6 | 	mov	arg01, local01
14814     44 CE B0 FD | 	call	#__system___float_mul
14818     FD 14 02 F6 | 	mov	arg02, result1
1481c     87 E4 1F FF 
14820     DB 13 06 F6 | 	mov	arg01, ##1070141403
14824     1F 14 E6 F4 | 	bitnot	arg02, #31
14828     60 CA B0 FD | 	call	#__system___float_add
1482c     FD 12 02 F6 | 	mov	arg01, result1
14830     64 D7 B0 FD | 	call	#__system____builtin_sinf
14834     A7 FA 61 FC | 	wrlong	result1, fp
14838     08 4E 05 F1 | 	add	fp, #8
1483c     A7 3C 68 FC | 	wrlong	#30, fp
14840     08 4E 85 F1 | 	sub	fp, #8
14844     A7 12 02 F6 | 	mov	arg01, fp
14848     C4 60 BF FD | 	call	#_push
1484c                 | LR__1681
1484c     A7 F0 03 F6 | 	mov	ptra, fp
14850     B2 00 A0 FD | 	call	#popregs_
14854                 | _do_cos_ret
14854     2D 00 64 FD | 	ret
14858                 | 
14858                 | ' 
14858                 | ' sub do_tan
14858                 | _do_tan
14858     01 4A 05 F6 | 	mov	COUNT_, #1
1485c     A8 00 A0 FD | 	call	#pushregs_
14860     10 F0 07 F1 | 	add	ptra, #16
14864     4A 00 00 FF 
14868     B0 E4 05 F1 | 	add	objptr, ##38064
1486c     F2 1E 02 FB | 	rdlong	local01, objptr
14870     0F 17 02 F6 | 	mov	arg03, local01
14874     01 16 66 F0 | 	shl	arg03, #1
14878     0F 17 02 F1 | 	add	arg03, local01
1487c     02 16 66 F0 | 	shl	arg03, #2
14880     03 00 00 FF 
14884     04 E4 85 F1 | 	sub	objptr, ##1540
14888     F2 16 02 F1 | 	add	arg03, objptr
1488c     0B 17 02 FB | 	rdlong	arg03, arg03
14890     0C 4E 05 F1 | 	add	fp, #12
14894     A7 16 62 FC | 	wrlong	arg03, fp
14898                 | ' 
14898                 | ' numpar=compiledline(lineptr_e).result.uresult
14898                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
14898     0C 4E 85 F1 | 	sub	fp, #12
1489c     02 16 16 F2 | 	cmp	arg03, #2 wc
148a0     47 00 00 FF 
148a4     AC E4 85 F1 | 	sub	objptr, ##36524
148a8     0C 4E 05 C1 |  if_b	add	fp, #12
148ac     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
148b0     0C 4E 85 C1 |  if_b	sub	fp, #12
148b4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1690
148b8     00 12 06 F6 | 	mov	arg01, #0
148bc     B4 FB B0 FD | 	call	#__system___getiolock_0484
148c0     FD 12 02 F6 | 	mov	arg01, result1
148c4     4C A2 B0 FD | 	call	#__system___lockmem
148c8     73 01 00 FF 
148cc     D3 15 06 F6 | 	mov	arg02, ##@LR__5175
148d0     00 12 06 F6 | 	mov	arg01, #0
148d4     00 16 06 F6 | 	mov	arg03, #0
148d8     2C AF B0 FD | 	call	#__system___basic_print_string
148dc     00 12 06 F6 | 	mov	arg01, #0
148e0     90 FB B0 FD | 	call	#__system___getiolock_0484
148e4     FD 00 68 FC | 	wrlong	#0, result1
148e8     27 12 06 F6 | 	mov	arg01, #39
148ec     7C 5D B0 FD | 	call	#_printerror
148f0     64 00 90 FD | 	jmp	#LR__1691
148f4                 | LR__1690
148f4     80 5F BF FD | 	call	#_pop
148f8     A7 FA 61 FC | 	wrlong	result1, fp
148fc     04 4E 05 F1 | 	add	fp, #4
14900     A7 FC 61 FC | 	wrlong	result2, fp
14904     04 4E 05 F1 | 	add	fp, #4
14908     A7 FE 61 FC | 	wrlong	result3, fp
1490c     08 4E 85 F1 | 	sub	fp, #8
14910     59 00 00 FF 
14914     C8 E5 05 F1 | 	add	objptr, ##46024
14918     F2 1E 02 FB | 	rdlong	local01, objptr
1491c     59 00 00 FF 
14920     C8 E5 85 F1 | 	sub	objptr, ##46024
14924     A7 12 02 F6 | 	mov	arg01, fp
14928     38 EB BF FD | 	call	#_converttofloat
1492c     FD 14 02 F6 | 	mov	arg02, result1
14930     0F 13 02 F6 | 	mov	arg01, local01
14934     24 CD B0 FD | 	call	#__system___float_mul
14938     FD 12 02 F6 | 	mov	arg01, result1
1493c     A4 D7 B0 FD | 	call	#__system____builtin_tanf
14940     A7 FA 61 FC | 	wrlong	result1, fp
14944     08 4E 05 F1 | 	add	fp, #8
14948     A7 3C 68 FC | 	wrlong	#30, fp
1494c     08 4E 85 F1 | 	sub	fp, #8
14950     A7 12 02 F6 | 	mov	arg01, fp
14954     B8 5F BF FD | 	call	#_push
14958                 | LR__1691
14958     A7 F0 03 F6 | 	mov	ptra, fp
1495c     B2 00 A0 FD | 	call	#popregs_
14960                 | _do_tan_ret
14960     2D 00 64 FD | 	ret
14964                 | 
14964                 | ' 
14964                 | ' sub do_asin
14964                 | _do_asin
14964     01 4A 05 F6 | 	mov	COUNT_, #1
14968     A8 00 A0 FD | 	call	#pushregs_
1496c     10 F0 07 F1 | 	add	ptra, #16
14970     4A 00 00 FF 
14974     B0 E4 05 F1 | 	add	objptr, ##38064
14978     F2 1E 02 FB | 	rdlong	local01, objptr
1497c     0F 17 02 F6 | 	mov	arg03, local01
14980     01 16 66 F0 | 	shl	arg03, #1
14984     0F 17 02 F1 | 	add	arg03, local01
14988     02 16 66 F0 | 	shl	arg03, #2
1498c     03 00 00 FF 
14990     04 E4 85 F1 | 	sub	objptr, ##1540
14994     F2 16 02 F1 | 	add	arg03, objptr
14998     0B 17 02 FB | 	rdlong	arg03, arg03
1499c     0C 4E 05 F1 | 	add	fp, #12
149a0     A7 16 62 FC | 	wrlong	arg03, fp
149a4                 | ' 
149a4                 | ' numpar=compiledline(lineptr_e).result.uresult
149a4                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
149a4     0C 4E 85 F1 | 	sub	fp, #12
149a8     02 16 16 F2 | 	cmp	arg03, #2 wc
149ac     47 00 00 FF 
149b0     AC E4 85 F1 | 	sub	objptr, ##36524
149b4     0C 4E 05 C1 |  if_b	add	fp, #12
149b8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
149bc     0C 4E 85 C1 |  if_b	sub	fp, #12
149c0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1700
149c4     00 12 06 F6 | 	mov	arg01, #0
149c8     A8 FA B0 FD | 	call	#__system___getiolock_0484
149cc     FD 12 02 F6 | 	mov	arg01, result1
149d0     40 A1 B0 FD | 	call	#__system___lockmem
149d4     73 01 00 FF 
149d8     D9 15 06 F6 | 	mov	arg02, ##@LR__5176
149dc     00 12 06 F6 | 	mov	arg01, #0
149e0     00 16 06 F6 | 	mov	arg03, #0
149e4     20 AE B0 FD | 	call	#__system___basic_print_string
149e8     00 12 06 F6 | 	mov	arg01, #0
149ec     84 FA B0 FD | 	call	#__system___getiolock_0484
149f0     FD 00 68 FC | 	wrlong	#0, result1
149f4     27 12 06 F6 | 	mov	arg01, #39
149f8     70 5C B0 FD | 	call	#_printerror
149fc     64 00 90 FD | 	jmp	#LR__1701
14a00                 | LR__1700
14a00     74 5E BF FD | 	call	#_pop
14a04     FF 1E 02 F6 | 	mov	local01, result3
14a08     A7 FA 61 FC | 	wrlong	result1, fp
14a0c     04 4E 05 F1 | 	add	fp, #4
14a10     A7 FC 61 FC | 	wrlong	result2, fp
14a14     04 4E 05 F1 | 	add	fp, #4
14a18     A7 1E 62 FC | 	wrlong	local01, fp
14a1c     08 4E 85 F1 | 	sub	fp, #8
14a20     A7 12 02 F6 | 	mov	arg01, fp
14a24     3C EA BF FD | 	call	#_converttofloat
14a28     FD 12 02 F6 | 	mov	arg01, result1
14a2c     FC D6 B0 FD | 	call	#__system____builtin_asinf
14a30     FD 12 02 F6 | 	mov	arg01, result1
14a34     59 00 00 FF 
14a38     CC E5 05 F1 | 	add	objptr, ##46028
14a3c     F2 14 02 FB | 	rdlong	arg02, objptr
14a40     59 00 00 FF 
14a44     CC E5 85 F1 | 	sub	objptr, ##46028
14a48     10 CC B0 FD | 	call	#__system___float_mul
14a4c     A7 FA 61 FC | 	wrlong	result1, fp
14a50     08 4E 05 F1 | 	add	fp, #8
14a54     A7 3C 68 FC | 	wrlong	#30, fp
14a58     08 4E 85 F1 | 	sub	fp, #8
14a5c     A7 12 02 F6 | 	mov	arg01, fp
14a60     AC 5E BF FD | 	call	#_push
14a64                 | LR__1701
14a64     A7 F0 03 F6 | 	mov	ptra, fp
14a68     B2 00 A0 FD | 	call	#popregs_
14a6c                 | _do_asin_ret
14a6c     2D 00 64 FD | 	ret
14a70                 | 
14a70                 | ' 
14a70                 | ' sub do_acos
14a70                 | _do_acos
14a70     01 4A 05 F6 | 	mov	COUNT_, #1
14a74     A8 00 A0 FD | 	call	#pushregs_
14a78     10 F0 07 F1 | 	add	ptra, #16
14a7c     4A 00 00 FF 
14a80     B0 E4 05 F1 | 	add	objptr, ##38064
14a84     F2 1E 02 FB | 	rdlong	local01, objptr
14a88     0F 17 02 F6 | 	mov	arg03, local01
14a8c     01 16 66 F0 | 	shl	arg03, #1
14a90     0F 17 02 F1 | 	add	arg03, local01
14a94     02 16 66 F0 | 	shl	arg03, #2
14a98     03 00 00 FF 
14a9c     04 E4 85 F1 | 	sub	objptr, ##1540
14aa0     F2 16 02 F1 | 	add	arg03, objptr
14aa4     0B 17 02 FB | 	rdlong	arg03, arg03
14aa8     0C 4E 05 F1 | 	add	fp, #12
14aac     A7 16 62 FC | 	wrlong	arg03, fp
14ab0                 | ' 
14ab0                 | ' numpar=compiledline(lineptr_e).result.uresult
14ab0                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
14ab0     0C 4E 85 F1 | 	sub	fp, #12
14ab4     02 16 16 F2 | 	cmp	arg03, #2 wc
14ab8     47 00 00 FF 
14abc     AC E4 85 F1 | 	sub	objptr, ##36524
14ac0     0C 4E 05 C1 |  if_b	add	fp, #12
14ac4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14ac8     0C 4E 85 C1 |  if_b	sub	fp, #12
14acc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1710
14ad0     00 12 06 F6 | 	mov	arg01, #0
14ad4     9C F9 B0 FD | 	call	#__system___getiolock_0484
14ad8     FD 12 02 F6 | 	mov	arg01, result1
14adc     34 A0 B0 FD | 	call	#__system___lockmem
14ae0     73 01 00 FF 
14ae4     E0 15 06 F6 | 	mov	arg02, ##@LR__5177
14ae8     00 12 06 F6 | 	mov	arg01, #0
14aec     00 16 06 F6 | 	mov	arg03, #0
14af0     14 AD B0 FD | 	call	#__system___basic_print_string
14af4     00 12 06 F6 | 	mov	arg01, #0
14af8     78 F9 B0 FD | 	call	#__system___getiolock_0484
14afc     FD 00 68 FC | 	wrlong	#0, result1
14b00     27 12 06 F6 | 	mov	arg01, #39
14b04     64 5B B0 FD | 	call	#_printerror
14b08     64 00 90 FD | 	jmp	#LR__1711
14b0c                 | LR__1710
14b0c     68 5D BF FD | 	call	#_pop
14b10     FF 1E 02 F6 | 	mov	local01, result3
14b14     A7 FA 61 FC | 	wrlong	result1, fp
14b18     04 4E 05 F1 | 	add	fp, #4
14b1c     A7 FC 61 FC | 	wrlong	result2, fp
14b20     04 4E 05 F1 | 	add	fp, #4
14b24     A7 1E 62 FC | 	wrlong	local01, fp
14b28     08 4E 85 F1 | 	sub	fp, #8
14b2c     A7 12 02 F6 | 	mov	arg01, fp
14b30     30 E9 BF FD | 	call	#_converttofloat
14b34     FD 12 02 F6 | 	mov	arg01, result1
14b38     3C D6 B0 FD | 	call	#__system____builtin_acosf
14b3c     FD 12 02 F6 | 	mov	arg01, result1
14b40     59 00 00 FF 
14b44     CC E5 05 F1 | 	add	objptr, ##46028
14b48     F2 14 02 FB | 	rdlong	arg02, objptr
14b4c     59 00 00 FF 
14b50     CC E5 85 F1 | 	sub	objptr, ##46028
14b54     04 CB B0 FD | 	call	#__system___float_mul
14b58     A7 FA 61 FC | 	wrlong	result1, fp
14b5c     08 4E 05 F1 | 	add	fp, #8
14b60     A7 3C 68 FC | 	wrlong	#30, fp
14b64     08 4E 85 F1 | 	sub	fp, #8
14b68     A7 12 02 F6 | 	mov	arg01, fp
14b6c     A0 5D BF FD | 	call	#_push
14b70                 | LR__1711
14b70     A7 F0 03 F6 | 	mov	ptra, fp
14b74     B2 00 A0 FD | 	call	#popregs_
14b78                 | _do_acos_ret
14b78     2D 00 64 FD | 	ret
14b7c                 | 
14b7c                 | ' 
14b7c                 | ' sub do_atn
14b7c                 | _do_atn
14b7c     01 4A 05 F6 | 	mov	COUNT_, #1
14b80     A8 00 A0 FD | 	call	#pushregs_
14b84     10 F0 07 F1 | 	add	ptra, #16
14b88     4A 00 00 FF 
14b8c     B0 E4 05 F1 | 	add	objptr, ##38064
14b90     F2 1E 02 FB | 	rdlong	local01, objptr
14b94     0F 17 02 F6 | 	mov	arg03, local01
14b98     01 16 66 F0 | 	shl	arg03, #1
14b9c     0F 17 02 F1 | 	add	arg03, local01
14ba0     02 16 66 F0 | 	shl	arg03, #2
14ba4     03 00 00 FF 
14ba8     04 E4 85 F1 | 	sub	objptr, ##1540
14bac     F2 16 02 F1 | 	add	arg03, objptr
14bb0     0B 17 02 FB | 	rdlong	arg03, arg03
14bb4     0C 4E 05 F1 | 	add	fp, #12
14bb8     A7 16 62 FC | 	wrlong	arg03, fp
14bbc                 | ' 
14bbc                 | ' numpar=compiledline(lineptr_e).result.uresult
14bbc                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
14bbc     0C 4E 85 F1 | 	sub	fp, #12
14bc0     02 16 16 F2 | 	cmp	arg03, #2 wc
14bc4     47 00 00 FF 
14bc8     AC E4 85 F1 | 	sub	objptr, ##36524
14bcc     0C 4E 05 C1 |  if_b	add	fp, #12
14bd0     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14bd4     0C 4E 85 C1 |  if_b	sub	fp, #12
14bd8     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1720
14bdc     00 12 06 F6 | 	mov	arg01, #0
14be0     90 F8 B0 FD | 	call	#__system___getiolock_0484
14be4     FD 12 02 F6 | 	mov	arg01, result1
14be8     28 9F B0 FD | 	call	#__system___lockmem
14bec     73 01 00 FF 
14bf0     E7 15 06 F6 | 	mov	arg02, ##@LR__5178
14bf4     00 12 06 F6 | 	mov	arg01, #0
14bf8     00 16 06 F6 | 	mov	arg03, #0
14bfc     08 AC B0 FD | 	call	#__system___basic_print_string
14c00     00 12 06 F6 | 	mov	arg01, #0
14c04     6C F8 B0 FD | 	call	#__system___getiolock_0484
14c08     FD 00 68 FC | 	wrlong	#0, result1
14c0c     27 12 06 F6 | 	mov	arg01, #39
14c10     58 5A B0 FD | 	call	#_printerror
14c14     6C 00 90 FD | 	jmp	#LR__1721
14c18                 | LR__1720
14c18     5C 5C BF FD | 	call	#_pop
14c1c     FF 1E 02 F6 | 	mov	local01, result3
14c20     A7 FA 61 FC | 	wrlong	result1, fp
14c24     04 4E 05 F1 | 	add	fp, #4
14c28     A7 FC 61 FC | 	wrlong	result2, fp
14c2c     04 4E 05 F1 | 	add	fp, #4
14c30     A7 1E 62 FC | 	wrlong	local01, fp
14c34     08 4E 85 F1 | 	sub	fp, #8
14c38     A7 12 02 F6 | 	mov	arg01, fp
14c3c     24 E8 BF FD | 	call	#_converttofloat
14c40     FD 12 02 F6 | 	mov	arg01, result1
14c44     00 C0 1F FF 
14c48     00 14 06 F6 | 	mov	arg02, ##1065353216
14c4c     74 D5 B0 FD | 	call	#__system____builtin_atan2f
14c50     FD 12 02 F6 | 	mov	arg01, result1
14c54     59 00 00 FF 
14c58     CC E5 05 F1 | 	add	objptr, ##46028
14c5c     F2 14 02 FB | 	rdlong	arg02, objptr
14c60     59 00 00 FF 
14c64     CC E5 85 F1 | 	sub	objptr, ##46028
14c68     F0 C9 B0 FD | 	call	#__system___float_mul
14c6c     A7 FA 61 FC | 	wrlong	result1, fp
14c70     08 4E 05 F1 | 	add	fp, #8
14c74     A7 3C 68 FC | 	wrlong	#30, fp
14c78     08 4E 85 F1 | 	sub	fp, #8
14c7c     A7 12 02 F6 | 	mov	arg01, fp
14c80     8C 5C BF FD | 	call	#_push
14c84                 | LR__1721
14c84     A7 F0 03 F6 | 	mov	ptra, fp
14c88     B2 00 A0 FD | 	call	#popregs_
14c8c                 | _do_atn_ret
14c8c     2D 00 64 FD | 	ret
14c90                 | 
14c90                 | ' 
14c90                 | ' sub do_sqr
14c90                 | _do_sqr
14c90     01 4A 05 F6 | 	mov	COUNT_, #1
14c94     A8 00 A0 FD | 	call	#pushregs_
14c98     10 F0 07 F1 | 	add	ptra, #16
14c9c     4A 00 00 FF 
14ca0     B0 E4 05 F1 | 	add	objptr, ##38064
14ca4     F2 1E 02 FB | 	rdlong	local01, objptr
14ca8     0F 17 02 F6 | 	mov	arg03, local01
14cac     01 16 66 F0 | 	shl	arg03, #1
14cb0     0F 17 02 F1 | 	add	arg03, local01
14cb4     02 16 66 F0 | 	shl	arg03, #2
14cb8     03 00 00 FF 
14cbc     04 E4 85 F1 | 	sub	objptr, ##1540
14cc0     F2 16 02 F1 | 	add	arg03, objptr
14cc4     0B 17 02 FB | 	rdlong	arg03, arg03
14cc8     0C 4E 05 F1 | 	add	fp, #12
14ccc     A7 16 62 FC | 	wrlong	arg03, fp
14cd0                 | ' 
14cd0                 | ' numpar=compiledline(lineptr_e).result.uresult
14cd0                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
14cd0     0C 4E 85 F1 | 	sub	fp, #12
14cd4     02 16 16 F2 | 	cmp	arg03, #2 wc
14cd8     47 00 00 FF 
14cdc     AC E4 85 F1 | 	sub	objptr, ##36524
14ce0     0C 4E 05 C1 |  if_b	add	fp, #12
14ce4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
14ce8     0C 4E 85 C1 |  if_b	sub	fp, #12
14cec     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1730
14cf0     00 12 06 F6 | 	mov	arg01, #0
14cf4     7C F7 B0 FD | 	call	#__system___getiolock_0484
14cf8     FD 12 02 F6 | 	mov	arg01, result1
14cfc     14 9E B0 FD | 	call	#__system___lockmem
14d00     73 01 00 FF 
14d04     ED 15 06 F6 | 	mov	arg02, ##@LR__5179
14d08     00 12 06 F6 | 	mov	arg01, #0
14d0c     00 16 06 F6 | 	mov	arg03, #0
14d10     F4 AA B0 FD | 	call	#__system___basic_print_string
14d14     00 12 06 F6 | 	mov	arg01, #0
14d18     58 F7 B0 FD | 	call	#__system___getiolock_0484
14d1c     FD 00 68 FC | 	wrlong	#0, result1
14d20     27 12 06 F6 | 	mov	arg01, #39
14d24     44 59 B0 FD | 	call	#_printerror
14d28     48 00 90 FD | 	jmp	#LR__1731
14d2c                 | LR__1730
14d2c     48 5B BF FD | 	call	#_pop
14d30     FF 1E 02 F6 | 	mov	local01, result3
14d34     A7 FA 61 FC | 	wrlong	result1, fp
14d38     04 4E 05 F1 | 	add	fp, #4
14d3c     A7 FC 61 FC | 	wrlong	result2, fp
14d40     04 4E 05 F1 | 	add	fp, #4
14d44     A7 1E 62 FC | 	wrlong	local01, fp
14d48     08 4E 85 F1 | 	sub	fp, #8
14d4c     A7 12 02 F6 | 	mov	arg01, fp
14d50     10 E7 BF FD | 	call	#_converttofloat
14d54     FD 12 02 F6 | 	mov	arg01, result1
14d58     28 C8 B0 FD | 	call	#__system___float_sqrt
14d5c     A7 FA 61 FC | 	wrlong	result1, fp
14d60     08 4E 05 F1 | 	add	fp, #8
14d64     A7 3C 68 FC | 	wrlong	#30, fp
14d68     08 4E 85 F1 | 	sub	fp, #8
14d6c     A7 12 02 F6 | 	mov	arg01, fp
14d70     9C 5B BF FD | 	call	#_push
14d74                 | LR__1731
14d74     A7 F0 03 F6 | 	mov	ptra, fp
14d78     B2 00 A0 FD | 	call	#popregs_
14d7c                 | _do_sqr_ret
14d7c     2D 00 64 FD | 	ret
14d80                 | 
14d80                 | ' 
14d80                 | ' sub do_stick
14d80                 | _do_stick
14d80     01 4A 05 F6 | 	mov	COUNT_, #1
14d84     A8 00 A0 FD | 	call	#pushregs_
14d88     10 F0 07 F1 | 	add	ptra, #16
14d8c     4A 00 00 FF 
14d90     B0 E4 05 F1 | 	add	objptr, ##38064
14d94     F2 1E 02 FB | 	rdlong	local01, objptr
14d98     0F 17 02 F6 | 	mov	arg03, local01
14d9c     01 16 66 F0 | 	shl	arg03, #1
14da0     0F 17 02 F1 | 	add	arg03, local01
14da4     02 16 66 F0 | 	shl	arg03, #2
14da8     03 00 00 FF 
14dac     04 E4 85 F1 | 	sub	objptr, ##1540
14db0     F2 16 02 F1 | 	add	arg03, objptr
14db4     0B 17 02 FB | 	rdlong	arg03, arg03
14db8     0C 4E 05 F1 | 	add	fp, #12
14dbc     A7 16 62 FC | 	wrlong	arg03, fp
14dc0                 | ' 
14dc0                 | ' numpar=compiledline(lineptr_e).result.uresult
14dc0                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
14dc0     0C 4E 85 F1 | 	sub	fp, #12
14dc4     02 16 16 F2 | 	cmp	arg03, #2 wc
14dc8     47 00 00 FF 
14dcc     AC E4 85 F1 | 	sub	objptr, ##36524
14dd0     3C 00 90 CD |  if_b	jmp	#LR__1740
14dd4     00 12 06 F6 | 	mov	arg01, #0
14dd8     98 F6 B0 FD | 	call	#__system___getiolock_0484
14ddc     FD 12 02 F6 | 	mov	arg01, result1
14de0     30 9D B0 FD | 	call	#__system___lockmem
14de4     73 01 00 FF 
14de8     F3 15 06 F6 | 	mov	arg02, ##@LR__5180
14dec     00 12 06 F6 | 	mov	arg01, #0
14df0     00 16 06 F6 | 	mov	arg03, #0
14df4     10 AA B0 FD | 	call	#__system___basic_print_string
14df8     00 12 06 F6 | 	mov	arg01, #0
14dfc     74 F6 B0 FD | 	call	#__system___getiolock_0484
14e00     FD 00 68 FC | 	wrlong	#0, result1
14e04     27 12 06 F6 | 	mov	arg01, #39
14e08     60 58 B0 FD | 	call	#_printerror
14e0c     E8 00 90 FD | 	jmp	#LR__1744
14e10                 | LR__1740
14e10                 | ' 
14e10                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
14e10     0C 4E 05 F1 | 	add	fp, #12
14e14     A7 FE 09 FB | 	rdlong	result3, fp wz
14e18     0C 4E 85 F1 | 	sub	fp, #12
14e1c     30 00 90 5D |  if_ne	jmp	#LR__1741
14e20     59 00 00 FF 
14e24     3C E5 05 F1 | 	add	objptr, ##45884
14e28     F2 1E 02 FB | 	rdlong	local01, objptr
14e2c     59 00 00 FF 
14e30     3C E5 85 F1 | 	sub	objptr, ##45884
14e34     A7 1E 62 FC | 	wrlong	local01, fp
14e38     08 4E 05 F1 | 	add	fp, #8
14e3c     A7 3A 68 FC | 	wrlong	#29, fp
14e40     08 4E 85 F1 | 	sub	fp, #8
14e44     A7 12 02 F6 | 	mov	arg01, fp
14e48     C4 5A BF FD | 	call	#_push
14e4c     A8 00 90 FD | 	jmp	#LR__1744
14e50                 | LR__1741
14e50     24 5A BF FD | 	call	#_pop
14e54     A7 FA 61 FC | 	wrlong	result1, fp
14e58     04 4E 05 F1 | 	add	fp, #4
14e5c     A7 FC 61 FC | 	wrlong	result2, fp
14e60     04 4E 05 F1 | 	add	fp, #4
14e64     A7 FE 61 FC | 	wrlong	result3, fp
14e68                 | ' 
14e68                 | ' t1=pop()
14e68                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
14e68     08 4E 85 F1 | 	sub	fp, #8
14e6c     1C FE 0D F2 | 	cmp	result3, #28 wz
14e70     08 4E 05 51 |  if_ne	add	fp, #8
14e74     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14e78     08 4E 85 51 |  if_ne	sub	fp, #8
14e7c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
14e80     6C 00 90 5D |  if_ne	jmp	#LR__1743
14e84     A7 1E 02 FB | 	rdlong	local01, fp
14e88     5A 00 00 FF 
14e8c     34 E4 05 F1 | 	add	objptr, ##46132
14e90     F2 1E 62 FC | 	wrlong	local01, objptr
14e94                 | '   q=t1.result.uresult
14e94                 | '   if q<7 then 
14e94     5A 00 00 FF 
14e98     34 E4 85 F1 | 	sub	objptr, ##46132
14e9c     07 1E 56 F2 | 	cmps	local01, #7 wc
14ea0     40 00 90 3D |  if_ae	jmp	#LR__1742
14ea4     5A 00 00 FF 
14ea8     34 E4 05 F1 | 	add	objptr, ##46132
14eac     F2 1E 02 FB | 	rdlong	local01, objptr
14eb0     02 1E 66 F0 | 	shl	local01, #2
14eb4     F8 E4 85 F1 | 	sub	objptr, #248
14eb8     F2 1E 02 F1 | 	add	local01, objptr
14ebc     0F 1F 02 FB | 	rdlong	local01, local01
14ec0     A7 1E 62 FC | 	wrlong	local01, fp
14ec4     08 4E 05 F1 | 	add	fp, #8
14ec8     A7 3A 68 FC | 	wrlong	#29, fp
14ecc     08 4E 85 F1 | 	sub	fp, #8
14ed0     A7 12 02 F6 | 	mov	arg01, fp
14ed4     59 00 00 FF 
14ed8     3C E5 85 F1 | 	sub	objptr, ##45884
14edc     30 5A BF FD | 	call	#_push
14ee0                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
14ee0     14 00 90 FD | 	jmp	#LR__1744
14ee4                 | LR__1742
14ee4     29 12 06 F6 | 	mov	arg01, #41
14ee8     80 57 B0 FD | 	call	#_printerror
14eec                 | '      printerror(41) : return
14eec     08 00 90 FD | 	jmp	#LR__1744
14ef0                 | LR__1743
14ef0     29 12 06 F6 | 	mov	arg01, #41
14ef4     74 57 B0 FD | 	call	#_printerror
14ef8                 | LR__1744
14ef8     A7 F0 03 F6 | 	mov	ptra, fp
14efc     B2 00 A0 FD | 	call	#popregs_
14f00                 | _do_stick_ret
14f00     2D 00 64 FD | 	ret
14f04                 | 
14f04                 | ' 
14f04                 | ' sub do_strig
14f04                 | _do_strig
14f04     01 4A 05 F6 | 	mov	COUNT_, #1
14f08     A8 00 A0 FD | 	call	#pushregs_
14f0c     10 F0 07 F1 | 	add	ptra, #16
14f10     4A 00 00 FF 
14f14     B0 E4 05 F1 | 	add	objptr, ##38064
14f18     F2 1E 02 FB | 	rdlong	local01, objptr
14f1c     0F 17 02 F6 | 	mov	arg03, local01
14f20     01 16 66 F0 | 	shl	arg03, #1
14f24     0F 17 02 F1 | 	add	arg03, local01
14f28     02 16 66 F0 | 	shl	arg03, #2
14f2c     03 00 00 FF 
14f30     04 E4 85 F1 | 	sub	objptr, ##1540
14f34     F2 16 02 F1 | 	add	arg03, objptr
14f38     0B 17 02 FB | 	rdlong	arg03, arg03
14f3c     0C 4E 05 F1 | 	add	fp, #12
14f40     A7 16 62 FC | 	wrlong	arg03, fp
14f44                 | ' 
14f44                 | ' numpar=compiledline(lineptr_e).result.uresult
14f44                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
14f44     0C 4E 85 F1 | 	sub	fp, #12
14f48     02 16 16 F2 | 	cmp	arg03, #2 wc
14f4c     47 00 00 FF 
14f50     AC E4 85 F1 | 	sub	objptr, ##36524
14f54     3C 00 90 CD |  if_b	jmp	#LR__1750
14f58     00 12 06 F6 | 	mov	arg01, #0
14f5c     14 F5 B0 FD | 	call	#__system___getiolock_0484
14f60     FD 12 02 F6 | 	mov	arg01, result1
14f64     AC 9B B0 FD | 	call	#__system___lockmem
14f68     73 01 00 FF 
14f6c     FB 15 06 F6 | 	mov	arg02, ##@LR__5181
14f70     00 12 06 F6 | 	mov	arg01, #0
14f74     00 16 06 F6 | 	mov	arg03, #0
14f78     8C A8 B0 FD | 	call	#__system___basic_print_string
14f7c     00 12 06 F6 | 	mov	arg01, #0
14f80     F0 F4 B0 FD | 	call	#__system___getiolock_0484
14f84     FD 00 68 FC | 	wrlong	#0, result1
14f88     27 12 06 F6 | 	mov	arg01, #39
14f8c     DC 56 B0 FD | 	call	#_printerror
14f90     E8 00 90 FD | 	jmp	#LR__1754
14f94                 | LR__1750
14f94                 | ' 
14f94                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
14f94     0C 4E 05 F1 | 	add	fp, #12
14f98     A7 FE 09 FB | 	rdlong	result3, fp wz
14f9c     0C 4E 85 F1 | 	sub	fp, #12
14fa0     30 00 90 5D |  if_ne	jmp	#LR__1751
14fa4     59 00 00 FF 
14fa8     58 E5 05 F1 | 	add	objptr, ##45912
14fac     F2 1E 02 FB | 	rdlong	local01, objptr
14fb0     59 00 00 FF 
14fb4     58 E5 85 F1 | 	sub	objptr, ##45912
14fb8     A7 1E 62 FC | 	wrlong	local01, fp
14fbc     08 4E 05 F1 | 	add	fp, #8
14fc0     A7 3A 68 FC | 	wrlong	#29, fp
14fc4     08 4E 85 F1 | 	sub	fp, #8
14fc8     A7 12 02 F6 | 	mov	arg01, fp
14fcc     40 59 BF FD | 	call	#_push
14fd0     A8 00 90 FD | 	jmp	#LR__1754
14fd4                 | LR__1751
14fd4     A0 58 BF FD | 	call	#_pop
14fd8     A7 FA 61 FC | 	wrlong	result1, fp
14fdc     04 4E 05 F1 | 	add	fp, #4
14fe0     A7 FC 61 FC | 	wrlong	result2, fp
14fe4     04 4E 05 F1 | 	add	fp, #4
14fe8     A7 FE 61 FC | 	wrlong	result3, fp
14fec                 | ' 
14fec                 | ' t1=pop()
14fec                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
14fec     08 4E 85 F1 | 	sub	fp, #8
14ff0     1C FE 0D F2 | 	cmp	result3, #28 wz
14ff4     08 4E 05 51 |  if_ne	add	fp, #8
14ff8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
14ffc     08 4E 85 51 |  if_ne	sub	fp, #8
15000     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15004     6C 00 90 5D |  if_ne	jmp	#LR__1753
15008     A7 1E 02 FB | 	rdlong	local01, fp
1500c     5A 00 00 FF 
15010     34 E4 05 F1 | 	add	objptr, ##46132
15014     F2 1E 62 FC | 	wrlong	local01, objptr
15018                 | '   q=t1.result.uresult
15018                 | '   if q<7 then 
15018     5A 00 00 FF 
1501c     34 E4 85 F1 | 	sub	objptr, ##46132
15020     07 1E 56 F2 | 	cmps	local01, #7 wc
15024     40 00 90 3D |  if_ae	jmp	#LR__1752
15028     5A 00 00 FF 
1502c     34 E4 05 F1 | 	add	objptr, ##46132
15030     F2 1E 02 FB | 	rdlong	local01, objptr
15034     02 1E 66 F0 | 	shl	local01, #2
15038     DC E4 85 F1 | 	sub	objptr, #220
1503c     F2 1E 02 F1 | 	add	local01, objptr
15040     0F 1F 02 FB | 	rdlong	local01, local01
15044     A7 1E 62 FC | 	wrlong	local01, fp
15048     08 4E 05 F1 | 	add	fp, #8
1504c     A7 3A 68 FC | 	wrlong	#29, fp
15050     08 4E 85 F1 | 	sub	fp, #8
15054     A7 12 02 F6 | 	mov	arg01, fp
15058     59 00 00 FF 
1505c     58 E5 85 F1 | 	sub	objptr, ##45912
15060     AC 58 BF FD | 	call	#_push
15064                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
15064     14 00 90 FD | 	jmp	#LR__1754
15068                 | LR__1752
15068     29 12 06 F6 | 	mov	arg01, #41
1506c     FC 55 B0 FD | 	call	#_printerror
15070                 | '      printerror(41) : return
15070     08 00 90 FD | 	jmp	#LR__1754
15074                 | LR__1753
15074     29 12 06 F6 | 	mov	arg01, #41
15078     F0 55 B0 FD | 	call	#_printerror
1507c                 | LR__1754
1507c     A7 F0 03 F6 | 	mov	ptra, fp
15080     B2 00 A0 FD | 	call	#popregs_
15084                 | _do_strig_ret
15084     2D 00 64 FD | 	ret
15088                 | 
15088                 | ' 
15088                 | ' sub do_getpixel
15088                 | _do_getpixel
15088     00 4A 05 F6 | 	mov	COUNT_, #0
1508c     A8 00 A0 FD | 	call	#pushregs_
15090     24 F0 07 F1 | 	add	ptra, #36
15094     4A 00 00 FF 
15098     B0 E4 05 F1 | 	add	objptr, ##38064
1509c     F2 16 02 FB | 	rdlong	arg03, objptr
150a0     0B 15 02 F6 | 	mov	arg02, arg03
150a4     01 14 66 F0 | 	shl	arg02, #1
150a8     0B 15 02 F1 | 	add	arg02, arg03
150ac     02 14 66 F0 | 	shl	arg02, #2
150b0     03 00 00 FF 
150b4     04 E4 85 F1 | 	sub	objptr, ##1540
150b8     F2 14 02 F1 | 	add	arg02, objptr
150bc     0A 17 02 FB | 	rdlong	arg03, arg02
150c0     18 4E 05 F1 | 	add	fp, #24
150c4     A7 16 62 FC | 	wrlong	arg03, fp
150c8                 | ' 
150c8                 | ' numpar=compiledline(lineptr_e).result.uresult
150c8                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
150c8     18 4E 85 F1 | 	sub	fp, #24
150cc     02 16 0E F2 | 	cmp	arg03, #2 wz
150d0     47 00 00 FF 
150d4     AC E4 85 F1 | 	sub	objptr, ##36524
150d8     3C 00 90 AD |  if_e	jmp	#LR__1760
150dc     00 12 06 F6 | 	mov	arg01, #0
150e0     90 F3 B0 FD | 	call	#__system___getiolock_0484
150e4     FD 12 02 F6 | 	mov	arg01, result1
150e8     28 9A B0 FD | 	call	#__system___lockmem
150ec     74 01 00 FF 
150f0     03 14 06 F6 | 	mov	arg02, ##@LR__5182
150f4     00 12 06 F6 | 	mov	arg01, #0
150f8     00 16 06 F6 | 	mov	arg03, #0
150fc     08 A7 B0 FD | 	call	#__system___basic_print_string
15100     00 12 06 F6 | 	mov	arg01, #0
15104     6C F3 B0 FD | 	call	#__system___getiolock_0484
15108     FD 00 68 FC | 	wrlong	#0, result1
1510c     27 12 06 F6 | 	mov	arg01, #39
15110     58 55 B0 FD | 	call	#_printerror
15114     B4 00 90 FD | 	jmp	#LR__1761
15118                 | LR__1760
15118     5C 57 BF FD | 	call	#_pop
1511c     FD 16 02 F6 | 	mov	arg03, result1
15120     FE 14 02 F6 | 	mov	arg02, result2
15124     FF 12 02 F6 | 	mov	arg01, result3
15128     0C 4E 05 F1 | 	add	fp, #12
1512c     A7 16 62 FC | 	wrlong	arg03, fp
15130     04 4E 05 F1 | 	add	fp, #4
15134     A7 14 62 FC | 	wrlong	arg02, fp
15138     04 4E 05 F1 | 	add	fp, #4
1513c     A7 12 62 FC | 	wrlong	arg01, fp
15140     14 4E 85 F1 | 	sub	fp, #20
15144     30 57 BF FD | 	call	#_pop
15148     FF 16 02 F6 | 	mov	arg03, result3
1514c     A7 FA 61 FC | 	wrlong	result1, fp
15150     04 4E 05 F1 | 	add	fp, #4
15154     A7 FC 61 FC | 	wrlong	result2, fp
15158     04 4E 05 F1 | 	add	fp, #4
1515c     A7 16 62 FC | 	wrlong	arg03, fp
15160     08 4E 85 F1 | 	sub	fp, #8
15164     A7 12 02 F6 | 	mov	arg01, fp
15168     4C E2 BF FD | 	call	#_converttoint
1516c     1C 4E 05 F1 | 	add	fp, #28
15170     A7 FA 61 FC | 	wrlong	result1, fp
15174     10 4E 85 F1 | 	sub	fp, #16
15178     A7 12 02 F6 | 	mov	arg01, fp
1517c     0C 4E 85 F1 | 	sub	fp, #12
15180     34 E2 BF FD | 	call	#_converttoint
15184     FD 16 02 F6 | 	mov	arg03, result1
15188     20 4E 05 F1 | 	add	fp, #32
1518c     A7 16 62 FC | 	wrlong	arg03, fp
15190     F2 12 02 FB | 	rdlong	arg01, objptr
15194     04 4E 85 F1 | 	sub	fp, #4
15198     A7 FE 01 FB | 	rdlong	result3, fp
1519c     FF 12 02 F1 | 	add	arg01, result3
151a0     1C 4E 85 F1 | 	sub	fp, #28
151a4     0A 16 66 F0 | 	shl	arg03, #10
151a8     0B 13 02 F1 | 	add	arg01, arg03
151ac     F8 56 B0 FD | 	call	#_pspeek
151b0     FD FA E1 F8 | 	getbyte	result1, result1, #0
151b4     A7 FA 61 FC | 	wrlong	result1, fp
151b8     08 4E 05 F1 | 	add	fp, #8
151bc     A7 3A 68 FC | 	wrlong	#29, fp
151c0     08 4E 85 F1 | 	sub	fp, #8
151c4     A7 12 02 F6 | 	mov	arg01, fp
151c8     44 57 BF FD | 	call	#_push
151cc                 | LR__1761
151cc     A7 F0 03 F6 | 	mov	ptra, fp
151d0     B2 00 A0 FD | 	call	#popregs_
151d4                 | _do_getpixel_ret
151d4     2D 00 64 FD | 	ret
151d8                 | 
151d8                 | ' 
151d8                 | ' 
151d8                 | ' 
151d8                 | ' sub do_defsprite
151d8                 | _do_defsprite
151d8     07 4A 05 F6 | 	mov	COUNT_, #7
151dc     A8 00 A0 FD | 	call	#pushregs_
151e0     60 F0 07 F1 | 	add	ptra, #96
151e4     90 56 BF FD | 	call	#_pop
151e8     FD 16 02 F6 | 	mov	arg03, result1
151ec     FE 14 02 F6 | 	mov	arg02, result2
151f0     FF 12 02 F6 | 	mov	arg01, result3
151f4     30 4E 05 F1 | 	add	fp, #48
151f8     A7 16 62 FC | 	wrlong	arg03, fp
151fc     04 4E 05 F1 | 	add	fp, #4
15200     A7 14 62 FC | 	wrlong	arg02, fp
15204     04 4E 05 F1 | 	add	fp, #4
15208     A7 12 62 FC | 	wrlong	arg01, fp
1520c     38 4E 85 F1 | 	sub	fp, #56
15210     64 56 BF FD | 	call	#_pop
15214     FD 16 02 F6 | 	mov	arg03, result1
15218     FE 14 02 F6 | 	mov	arg02, result2
1521c     FF 12 02 F6 | 	mov	arg01, result3
15220     24 4E 05 F1 | 	add	fp, #36
15224     A7 16 62 FC | 	wrlong	arg03, fp
15228     04 4E 05 F1 | 	add	fp, #4
1522c     A7 14 62 FC | 	wrlong	arg02, fp
15230     04 4E 05 F1 | 	add	fp, #4
15234     A7 12 62 FC | 	wrlong	arg01, fp
15238     2C 4E 85 F1 | 	sub	fp, #44
1523c     38 56 BF FD | 	call	#_pop
15240     FD 16 02 F6 | 	mov	arg03, result1
15244     FE 14 02 F6 | 	mov	arg02, result2
15248     FF 12 02 F6 | 	mov	arg01, result3
1524c     18 4E 05 F1 | 	add	fp, #24
15250     A7 16 62 FC | 	wrlong	arg03, fp
15254     04 4E 05 F1 | 	add	fp, #4
15258     A7 14 62 FC | 	wrlong	arg02, fp
1525c     04 4E 05 F1 | 	add	fp, #4
15260     A7 12 62 FC | 	wrlong	arg01, fp
15264     20 4E 85 F1 | 	sub	fp, #32
15268     0C 56 BF FD | 	call	#_pop
1526c     FD 16 02 F6 | 	mov	arg03, result1
15270     FE 14 02 F6 | 	mov	arg02, result2
15274     FF 12 02 F6 | 	mov	arg01, result3
15278     0C 4E 05 F1 | 	add	fp, #12
1527c     A7 16 62 FC | 	wrlong	arg03, fp
15280     04 4E 05 F1 | 	add	fp, #4
15284     A7 14 62 FC | 	wrlong	arg02, fp
15288     04 4E 05 F1 | 	add	fp, #4
1528c     A7 12 62 FC | 	wrlong	arg01, fp
15290     14 4E 85 F1 | 	sub	fp, #20
15294     E0 55 BF FD | 	call	#_pop
15298     FF 16 02 F6 | 	mov	arg03, result3
1529c     A7 FA 61 FC | 	wrlong	result1, fp
152a0     04 4E 05 F1 | 	add	fp, #4
152a4     A7 FC 61 FC | 	wrlong	result2, fp
152a8     04 4E 05 F1 | 	add	fp, #4
152ac     A7 16 62 FC | 	wrlong	arg03, fp
152b0     08 4E 85 F1 | 	sub	fp, #8
152b4     A7 12 02 F6 | 	mov	arg01, fp
152b8     FC E0 BF FD | 	call	#_converttoint
152bc     3C 4E 05 F1 | 	add	fp, #60
152c0     A7 FA 61 FC | 	wrlong	result1, fp
152c4     30 4E 85 F1 | 	sub	fp, #48
152c8     A7 12 02 F6 | 	mov	arg01, fp
152cc     0C 4E 85 F1 | 	sub	fp, #12
152d0     E4 E0 BF FD | 	call	#_converttoint
152d4     40 4E 05 F1 | 	add	fp, #64
152d8     A7 FA 61 FC | 	wrlong	result1, fp
152dc     28 4E 85 F1 | 	sub	fp, #40
152e0     A7 12 02 F6 | 	mov	arg01, fp
152e4     18 4E 85 F1 | 	sub	fp, #24
152e8     CC E0 BF FD | 	call	#_converttoint
152ec     44 4E 05 F1 | 	add	fp, #68
152f0     A7 FA 61 FC | 	wrlong	result1, fp
152f4     20 4E 85 F1 | 	sub	fp, #32
152f8     A7 12 02 F6 | 	mov	arg01, fp
152fc     24 4E 85 F1 | 	sub	fp, #36
15300     B4 E0 BF FD | 	call	#_converttoint
15304     48 4E 05 F1 | 	add	fp, #72
15308     A7 FA 61 FC | 	wrlong	result1, fp
1530c     18 4E 85 F1 | 	sub	fp, #24
15310     A7 12 02 F6 | 	mov	arg01, fp
15314     30 4E 85 F1 | 	sub	fp, #48
15318     9C E0 BF FD | 	call	#_converttoint
1531c     4C 4E 05 F1 | 	add	fp, #76
15320     A7 FA 61 FC | 	wrlong	result1, fp
15324                 | ' 
15324                 | ' t5=pop()
15324                 | ' t4=pop()
15324                 | ' t3=pop()
15324                 | ' t2=pop()
15324                 | ' t1=pop()
15324                 | ' 
15324                 | ' ' do convert, defsprite is not a racing command
15324                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
15324                 | '  
15324                 | ' ' todo: check parameters for linits
15324                 | ' if sprite(a1)<> nil then delete(sprite(a1))
15324     10 4E 85 F1 | 	sub	fp, #16
15328     A7 16 02 FB | 	rdlong	arg03, fp
1532c     3C 4E 85 F1 | 	sub	fp, #60
15330     02 16 66 F0 | 	shl	arg03, #2
15334     59 00 00 FF 
15338     74 E5 05 F1 | 	add	objptr, ##45940
1533c     F2 16 02 F1 | 	add	arg03, objptr
15340     0B 17 0A FB | 	rdlong	arg03, arg03 wz
15344     59 00 00 FF 
15348     74 E5 85 F1 | 	sub	objptr, ##45940
1534c     2C 00 90 AD |  if_e	jmp	#LR__1770
15350     3C 4E 05 F1 | 	add	fp, #60
15354     A7 16 02 FB | 	rdlong	arg03, fp
15358     3C 4E 85 F1 | 	sub	fp, #60
1535c     02 16 66 F0 | 	shl	arg03, #2
15360     59 00 00 FF 
15364     74 E5 05 F1 | 	add	objptr, ##45940
15368     F2 16 02 F1 | 	add	arg03, objptr
1536c     0B 13 02 FB | 	rdlong	arg01, arg03
15370     59 00 00 FF 
15374     74 E5 85 F1 | 	sub	objptr, ##45940
15378     E8 D6 B0 FD | 	call	#__system___gc_free
1537c                 | LR__1770
1537c     3C 4E 05 F1 | 	add	fp, #60
15380     A7 1E 02 FB | 	rdlong	local01, fp
15384     0C 4E 05 F1 | 	add	fp, #12
15388     A7 16 02 FB | 	rdlong	arg03, fp
1538c     04 4E 05 F1 | 	add	fp, #4
15390     A7 14 02 FB | 	rdlong	arg02, fp
15394     0A 17 02 FD | 	qmul	arg03, arg02
15398     02 1E 66 F0 | 	shl	local01, #2
1539c     59 00 00 FF 
153a0     74 E5 05 F1 | 	add	objptr, ##45940
153a4     F2 1E 02 F1 | 	add	local01, objptr
153a8     4C 4E 85 F1 | 	sub	fp, #76
153ac     59 00 00 FF 
153b0     74 E5 85 F1 | 	sub	objptr, ##45940
153b4     18 12 62 FD | 	getqx	arg01
153b8     6C D5 B0 FD | 	call	#__system___gc_alloc_managed
153bc     0F FB 61 FC | 	wrlong	result1, local01
153c0                 | ' for y=a3 to a3+a5-1
153c0     44 4E 05 F1 | 	add	fp, #68
153c4     A7 20 02 FB | 	rdlong	local02, fp
153c8     0C 4E 05 F1 | 	add	fp, #12
153cc     A7 20 62 FC | 	wrlong	local02, fp
153d0     0C 4E 85 F1 | 	sub	fp, #12
153d4     A7 22 02 FB | 	rdlong	local03, fp
153d8     08 4E 05 F1 | 	add	fp, #8
153dc     A7 24 02 FB | 	rdlong	local04, fp
153e0     4C 4E 85 F1 | 	sub	fp, #76
153e4     12 23 02 F1 | 	add	local03, local04
153e8                 | LR__1771
153e8     50 4E 05 F1 | 	add	fp, #80
153ec     A7 20 02 FB | 	rdlong	local02, fp
153f0     50 4E 85 F1 | 	sub	fp, #80
153f4     11 21 52 F2 | 	cmps	local02, local03 wc
153f8     F4 00 90 3D |  if_ae	jmp	#LR__1774
153fc                 | '   for x=a2 to a4+a2-1
153fc     40 4E 05 F1 | 	add	fp, #64
15400     A7 1E 02 FB | 	rdlong	local01, fp
15404     14 4E 05 F1 | 	add	fp, #20
15408     A7 1E 62 FC | 	wrlong	local01, fp
1540c     0C 4E 85 F1 | 	sub	fp, #12
15410     A7 26 02 FB | 	rdlong	local05, fp
15414     08 4E 85 F1 | 	sub	fp, #8
15418     A7 28 02 FB | 	rdlong	local06, fp
1541c     40 4E 85 F1 | 	sub	fp, #64
15420     14 27 02 F1 | 	add	local05, local06
15424                 | LR__1772
15424     54 4E 05 F1 | 	add	fp, #84
15428     A7 1E 02 FB | 	rdlong	local01, fp
1542c     54 4E 85 F1 | 	sub	fp, #84
15430     13 1F 52 F2 | 	cmps	local01, local05 wc
15434     A0 00 90 3D |  if_ae	jmp	#LR__1773
15438     3C 4E 05 F1 | 	add	fp, #60
1543c     A7 28 02 FB | 	rdlong	local06, fp
15440     18 4E 05 F1 | 	add	fp, #24
15444     A7 24 02 FB | 	rdlong	local04, fp
15448     14 4E 85 F1 | 	sub	fp, #20
1544c     A7 20 02 FB | 	rdlong	local02, fp
15450     10 4E 05 F1 | 	add	fp, #16
15454     A7 1E 02 FB | 	rdlong	local01, fp
15458     0F 17 02 F6 | 	mov	arg03, local01
1545c     0C 4E 85 F1 | 	sub	fp, #12
15460     A7 14 02 FB | 	rdlong	arg02, fp
15464     0A 17 82 F1 | 	sub	arg03, arg02
15468     04 4E 05 F1 | 	add	fp, #4
1546c     A7 14 02 FB | 	rdlong	arg02, fp
15470     0A 17 02 FD | 	qmul	arg03, arg02
15474     02 28 66 F0 | 	shl	local06, #2
15478     59 00 00 FF 
1547c     74 E5 05 F1 | 	add	objptr, ##45940
15480     F2 28 02 F1 | 	add	local06, objptr
15484     14 29 02 FB | 	rdlong	local06, local06
15488     12 2B 02 F6 | 	mov	local07, local04
1548c     10 2B 82 F1 | 	sub	local07, local02
15490     59 00 00 FF 
15494     74 E5 85 F1 | 	sub	objptr, ##45940
15498     F2 12 02 FB | 	rdlong	arg01, objptr
1549c     12 13 02 F1 | 	add	arg01, local04
154a0     48 4E 85 F1 | 	sub	fp, #72
154a4     0A 1E 66 F0 | 	shl	local01, #10
154a8     0F 13 02 F1 | 	add	arg01, local01
154ac     18 24 62 FD | 	getqx	local04
154b0     12 2B 02 F1 | 	add	local07, local04
154b4     14 2B 02 F1 | 	add	local07, local06
154b8     EC 53 B0 FD | 	call	#_pspeek
154bc     15 FB 41 FC | 	wrbyte	result1, local07
154c0     54 4E 05 F1 | 	add	fp, #84
154c4     A7 2A 02 FB | 	rdlong	local07, fp
154c8     01 2A 06 F1 | 	add	local07, #1
154cc     A7 2A 62 FC | 	wrlong	local07, fp
154d0     54 4E 85 F1 | 	sub	fp, #84
154d4     4C FF 9F FD | 	jmp	#LR__1772
154d8                 | LR__1773
154d8     50 4E 05 F1 | 	add	fp, #80
154dc     A7 2A 02 FB | 	rdlong	local07, fp
154e0     01 2A 06 F1 | 	add	local07, #1
154e4     A7 2A 62 FC | 	wrlong	local07, fp
154e8     50 4E 85 F1 | 	sub	fp, #80
154ec     F8 FE 9F FD | 	jmp	#LR__1771
154f0                 | LR__1774
154f0     3C 4E 05 F1 | 	add	fp, #60
154f4     A7 2A 02 FB | 	rdlong	local07, fp
154f8     15 13 02 F6 | 	mov	arg01, local07
154fc     3C 4E 85 F1 | 	sub	fp, #60
15500     02 2A 66 F0 | 	shl	local07, #2
15504     59 00 00 FF 
15508     74 E5 05 F1 | 	add	objptr, ##45940
1550c     F2 2A 02 F1 | 	add	local07, objptr
15510     15 15 02 FB | 	rdlong	arg02, local07
15514     59 00 00 FF 
15518     74 E5 85 F1 | 	sub	objptr, ##45940
1551c     9C 71 B0 FD | 	call	#_hg010b_spin2_setspriteptr
15520     3C 4E 05 F1 | 	add	fp, #60
15524     A7 12 02 FB | 	rdlong	arg01, fp
15528     0C 4E 05 F1 | 	add	fp, #12
1552c     A7 14 02 FB | 	rdlong	arg02, fp
15530     04 4E 05 F1 | 	add	fp, #4
15534     A7 16 02 FB | 	rdlong	arg03, fp
15538     4C 4E 85 F1 | 	sub	fp, #76
1553c     0C 72 B0 FD | 	call	#_hg010b_spin2_setspritesize
15540     A7 F0 03 F6 | 	mov	ptra, fp
15544     B2 00 A0 FD | 	call	#popregs_
15548                 | _do_defsprite_ret
15548     2D 00 64 FD | 	ret
1554c                 | 
1554c                 | ' 
1554c                 | ' sub do_sprite
1554c                 | _do_sprite
1554c     00 4A 05 F6 | 	mov	COUNT_, #0
15550     A8 00 A0 FD | 	call	#pushregs_
15554     30 F0 07 F1 | 	add	ptra, #48
15558     1C 53 BF FD | 	call	#_pop
1555c     FD 16 02 F6 | 	mov	arg03, result1
15560     FE 14 02 F6 | 	mov	arg02, result2
15564     FF 12 02 F6 | 	mov	arg01, result3
15568     18 4E 05 F1 | 	add	fp, #24
1556c     A7 16 62 FC | 	wrlong	arg03, fp
15570     04 4E 05 F1 | 	add	fp, #4
15574     A7 14 62 FC | 	wrlong	arg02, fp
15578     04 4E 05 F1 | 	add	fp, #4
1557c     A7 12 62 FC | 	wrlong	arg01, fp
15580     20 4E 85 F1 | 	sub	fp, #32
15584     F0 52 BF FD | 	call	#_pop
15588     FD 16 02 F6 | 	mov	arg03, result1
1558c     FE 14 02 F6 | 	mov	arg02, result2
15590     FF 12 02 F6 | 	mov	arg01, result3
15594     0C 4E 05 F1 | 	add	fp, #12
15598     A7 16 62 FC | 	wrlong	arg03, fp
1559c     04 4E 05 F1 | 	add	fp, #4
155a0     A7 14 62 FC | 	wrlong	arg02, fp
155a4     04 4E 05 F1 | 	add	fp, #4
155a8     A7 12 62 FC | 	wrlong	arg01, fp
155ac     14 4E 85 F1 | 	sub	fp, #20
155b0     C4 52 BF FD | 	call	#_pop
155b4     FF 16 02 F6 | 	mov	arg03, result3
155b8     A7 FA 61 FC | 	wrlong	result1, fp
155bc     04 4E 05 F1 | 	add	fp, #4
155c0     A7 FC 61 FC | 	wrlong	result2, fp
155c4     04 4E 05 F1 | 	add	fp, #4
155c8     A7 16 62 FC | 	wrlong	arg03, fp
155cc     08 4E 85 F1 | 	sub	fp, #8
155d0     A7 12 02 F6 | 	mov	arg01, fp
155d4     E0 DD BF FD | 	call	#_converttoint
155d8     24 4E 05 F1 | 	add	fp, #36
155dc     A7 FA 61 FC | 	wrlong	result1, fp
155e0     18 4E 85 F1 | 	sub	fp, #24
155e4     A7 12 02 F6 | 	mov	arg01, fp
155e8     0C 4E 85 F1 | 	sub	fp, #12
155ec     C8 DD BF FD | 	call	#_converttoint
155f0     28 4E 05 F1 | 	add	fp, #40
155f4     A7 FA 61 FC | 	wrlong	result1, fp
155f8     10 4E 85 F1 | 	sub	fp, #16
155fc     A7 12 02 F6 | 	mov	arg01, fp
15600     18 4E 85 F1 | 	sub	fp, #24
15604     B0 DD BF FD | 	call	#_converttoint
15608     2C 4E 05 F1 | 	add	fp, #44
1560c     A7 FA 61 FC | 	wrlong	result1, fp
15610     08 4E 85 F1 | 	sub	fp, #8
15614     A7 12 02 FB | 	rdlong	arg01, fp
15618     04 4E 05 F1 | 	add	fp, #4
1561c     A7 14 02 FB | 	rdlong	arg02, fp
15620     FD 16 02 F6 | 	mov	arg03, result1
15624     28 4E 85 F1 | 	sub	fp, #40
15628     B8 70 B0 FD | 	call	#_hg010b_spin2_setspritepos
1562c     A7 F0 03 F6 | 	mov	ptra, fp
15630     B2 00 A0 FD | 	call	#popregs_
15634                 | _do_sprite_ret
15634     2D 00 64 FD | 	ret
15638                 | 
15638                 | ' 
15638                 | ' sub do_mousex
15638                 | _do_mousex
15638     00 4A 05 F6 | 	mov	COUNT_, #0
1563c     A8 00 A0 FD | 	call	#pushregs_
15640     0C F0 07 F1 | 	add	ptra, #12
15644     08 4E 05 F1 | 	add	fp, #8
15648     A7 3A 68 FC | 	wrlong	#29, fp
1564c     08 4E 85 F1 | 	sub	fp, #8
15650     59 00 00 FF 
15654     2C E5 05 F1 | 	add	objptr, ##45868
15658     F2 12 02 FB | 	rdlong	arg01, objptr
1565c     59 00 00 FF 
15660     2C E5 85 F1 | 	sub	objptr, ##45868
15664     A7 12 62 FC | 	wrlong	arg01, fp
15668     A7 12 02 F6 | 	mov	arg01, fp
1566c     A0 52 BF FD | 	call	#_push
15670     A7 F0 03 F6 | 	mov	ptra, fp
15674     B2 00 A0 FD | 	call	#popregs_
15678                 | _do_mousex_ret
15678     2D 00 64 FD | 	ret
1567c                 | 
1567c                 | ' 
1567c                 | ' sub do_mousey
1567c                 | _do_mousey
1567c     00 4A 05 F6 | 	mov	COUNT_, #0
15680     A8 00 A0 FD | 	call	#pushregs_
15684     0C F0 07 F1 | 	add	ptra, #12
15688     08 4E 05 F1 | 	add	fp, #8
1568c     A7 3A 68 FC | 	wrlong	#29, fp
15690     08 4E 85 F1 | 	sub	fp, #8
15694     59 00 00 FF 
15698     30 E5 05 F1 | 	add	objptr, ##45872
1569c     F2 12 02 FB | 	rdlong	arg01, objptr
156a0     59 00 00 FF 
156a4     30 E5 85 F1 | 	sub	objptr, ##45872
156a8     A7 12 62 FC | 	wrlong	arg01, fp
156ac     A7 12 02 F6 | 	mov	arg01, fp
156b0     5C 52 BF FD | 	call	#_push
156b4     A7 F0 03 F6 | 	mov	ptra, fp
156b8     B2 00 A0 FD | 	call	#popregs_
156bc                 | _do_mousey_ret
156bc     2D 00 64 FD | 	ret
156c0                 | 
156c0                 | ' 
156c0                 | ' sub do_mousew
156c0                 | _do_mousew
156c0     00 4A 05 F6 | 	mov	COUNT_, #0
156c4     A8 00 A0 FD | 	call	#pushregs_
156c8     0C F0 07 F1 | 	add	ptra, #12
156cc     08 4E 05 F1 | 	add	fp, #8
156d0     A7 38 68 FC | 	wrlong	#28, fp
156d4     08 4E 85 F1 | 	sub	fp, #8
156d8     59 00 00 FF 
156dc     38 E5 05 F1 | 	add	objptr, ##45880
156e0     F2 12 02 FB | 	rdlong	arg01, objptr
156e4     59 00 00 FF 
156e8     38 E5 85 F1 | 	sub	objptr, ##45880
156ec     A7 12 62 FC | 	wrlong	arg01, fp
156f0     A7 12 02 F6 | 	mov	arg01, fp
156f4     18 52 BF FD | 	call	#_push
156f8     A7 F0 03 F6 | 	mov	ptra, fp
156fc     B2 00 A0 FD | 	call	#popregs_
15700                 | _do_mousew_ret
15700     2D 00 64 FD | 	ret
15704                 | 
15704                 | ' 
15704                 | ' sub do_mousek
15704                 | _do_mousek
15704     00 4A 05 F6 | 	mov	COUNT_, #0
15708     A8 00 A0 FD | 	call	#pushregs_
1570c     0C F0 07 F1 | 	add	ptra, #12
15710     08 4E 05 F1 | 	add	fp, #8
15714     A7 3A 68 FC | 	wrlong	#29, fp
15718     08 4E 85 F1 | 	sub	fp, #8
1571c     59 00 00 FF 
15720     34 E5 05 F1 | 	add	objptr, ##45876
15724     F2 12 02 FB | 	rdlong	arg01, objptr
15728     59 00 00 FF 
1572c     34 E5 85 F1 | 	sub	objptr, ##45876
15730     A7 12 62 FC | 	wrlong	arg01, fp
15734     A7 12 02 F6 | 	mov	arg01, fp
15738     D4 51 BF FD | 	call	#_push
1573c     A7 F0 03 F6 | 	mov	ptra, fp
15740     B2 00 A0 FD | 	call	#popregs_
15744                 | _do_mousek_ret
15744     2D 00 64 FD | 	ret
15748                 | 
15748                 | ' 
15748                 | ' 
15748                 | ' sub do_rdpin
15748                 | _do_rdpin
15748     00 4A 05 F6 | 	mov	COUNT_, #0
1574c     A8 00 A0 FD | 	call	#pushregs_
15750     0C F0 07 F1 | 	add	ptra, #12
15754     20 51 BF FD | 	call	#_pop
15758     A7 FA 61 FC | 	wrlong	result1, fp
1575c     04 4E 05 F1 | 	add	fp, #4
15760     A7 FC 61 FC | 	wrlong	result2, fp
15764     04 4E 05 F1 | 	add	fp, #4
15768     A7 FE 61 FC | 	wrlong	result3, fp
1576c     08 4E 85 F1 | 	sub	fp, #8
15770     A7 12 02 F6 | 	mov	arg01, fp
15774     40 DC BF FD | 	call	#_converttoint
15778     FD FA 89 FA | 	rdpin	result1, result1
1577c     5A 00 00 FF 
15780     60 E4 05 F1 | 	add	objptr, ##46176
15784     F2 FA 61 FC | 	wrlong	result1, objptr
15788     5A 00 00 FF 
1578c     60 E4 85 F1 | 	sub	objptr, ##46176
15790     08 4E 05 F1 | 	add	fp, #8
15794     A7 3A 68 FC | 	wrlong	#29, fp
15798     08 4E 85 F1 | 	sub	fp, #8
1579c     A7 08 68 FC | 	wrlong	#4, fp
157a0     A7 12 02 F6 | 	mov	arg01, fp
157a4     68 51 BF FD | 	call	#_push
157a8     A7 F0 03 F6 | 	mov	ptra, fp
157ac     B2 00 A0 FD | 	call	#popregs_
157b0                 | _do_rdpin_ret
157b0     2D 00 64 FD | 	ret
157b4                 | 
157b4                 | ' 
157b4                 | ' sub do_rqpin
157b4                 | _do_rqpin
157b4     00 4A 05 F6 | 	mov	COUNT_, #0
157b8     A8 00 A0 FD | 	call	#pushregs_
157bc     0C F0 07 F1 | 	add	ptra, #12
157c0     B4 50 BF FD | 	call	#_pop
157c4     A7 FA 61 FC | 	wrlong	result1, fp
157c8     04 4E 05 F1 | 	add	fp, #4
157cc     A7 FC 61 FC | 	wrlong	result2, fp
157d0     04 4E 05 F1 | 	add	fp, #4
157d4     A7 FE 61 FC | 	wrlong	result3, fp
157d8     08 4E 85 F1 | 	sub	fp, #8
157dc     A7 12 02 F6 | 	mov	arg01, fp
157e0     D4 DB BF FD | 	call	#_converttoint
157e4     FD 12 02 F6 | 	mov	arg01, result1
157e8     00 FA 05 F6 | 	mov	result1, #0
157ec     09 FB 81 FA | 	rqpin	result1, arg01
157f0     5A 00 00 FF 
157f4     60 E4 05 F1 | 	add	objptr, ##46176
157f8     F2 FA 61 FC | 	wrlong	result1, objptr
157fc     5A 00 00 FF 
15800     60 E4 85 F1 | 	sub	objptr, ##46176
15804     08 4E 05 F1 | 	add	fp, #8
15808     A7 3A 68 FC | 	wrlong	#29, fp
1580c     08 4E 85 F1 | 	sub	fp, #8
15810     A7 08 68 FC | 	wrlong	#4, fp
15814     A7 12 02 F6 | 	mov	arg01, fp
15818     F4 50 BF FD | 	call	#_push
1581c     A7 F0 03 F6 | 	mov	ptra, fp
15820     B2 00 A0 FD | 	call	#popregs_
15824                 | _do_rqpin_ret
15824     2D 00 64 FD | 	ret
15828                 | 
15828                 | ' 
15828                 | ' sub do_pinread
15828                 | _do_pinread
15828     00 4A 05 F6 | 	mov	COUNT_, #0
1582c     A8 00 A0 FD | 	call	#pushregs_
15830     0C F0 07 F1 | 	add	ptra, #12
15834     40 50 BF FD | 	call	#_pop
15838     A7 FA 61 FC | 	wrlong	result1, fp
1583c     04 4E 05 F1 | 	add	fp, #4
15840     A7 FC 61 FC | 	wrlong	result2, fp
15844     04 4E 05 F1 | 	add	fp, #4
15848     A7 FE 61 FC | 	wrlong	result3, fp
1584c     08 4E 85 F1 | 	sub	fp, #8
15850     A7 12 02 F6 | 	mov	arg01, fp
15854     60 DB BF FD | 	call	#_converttoint
15858     FD 12 02 F6 | 	mov	arg01, result1
1585c     20 12 CE F7 | 	test	arg01, #32 wz
15860     FF FB 01 56 |  if_ne	mov	result1, inb
15864     FE FB 01 A6 |  if_e	mov	result1, ina
15868     09 FB 41 F0 | 	shr	result1, arg01
1586c     06 12 46 F0 | 	shr	arg01, #6
15870     09 FB 41 F7 | 	zerox	result1, arg01
15874     5A 00 00 FF 
15878     60 E4 05 F1 | 	add	objptr, ##46176
1587c     F2 FA 61 FC | 	wrlong	result1, objptr
15880     5A 00 00 FF 
15884     60 E4 85 F1 | 	sub	objptr, ##46176
15888     08 4E 05 F1 | 	add	fp, #8
1588c     A7 3A 68 FC | 	wrlong	#29, fp
15890     08 4E 85 F1 | 	sub	fp, #8
15894     A7 08 68 FC | 	wrlong	#4, fp
15898     A7 12 02 F6 | 	mov	arg01, fp
1589c     70 50 BF FD | 	call	#_push
158a0     A7 F0 03 F6 | 	mov	ptra, fp
158a4     B2 00 A0 FD | 	call	#popregs_
158a8                 | _do_pinread_ret
158a8     2D 00 64 FD | 	ret
158ac                 | 
158ac                 | ' 
158ac                 | ' sub do_gettime
158ac                 | _do_gettime
158ac     02 4A 05 F6 | 	mov	COUNT_, #2
158b0     A8 00 A0 FD | 	call	#pushregs_
158b4     14 F0 07 F1 | 	add	ptra, #20
158b8                 | ' 
158b8                 | ' const asm 
158b8     1A 1E 72 FD | 	getct	local01 wc
158bc     1A 20 62 FD | 	getct	local02
158c0                 | ' 
158c0                 | ' return hi1, lo1
158c0     10 FD 01 F6 | 	mov	result2, local02
158c4     A7 1E 62 FC | 	wrlong	local01, fp
158c8     04 4E 05 F1 | 	add	fp, #4
158cc     A7 FC 61 FC | 	wrlong	result2, fp
158d0     0C 4E 05 F1 | 	add	fp, #12
158d4     A7 3A 68 FC | 	wrlong	#29, fp
158d8     0C 4E 85 F1 | 	sub	fp, #12
158dc     A7 12 02 FB | 	rdlong	arg01, fp
158e0     04 4E 05 F1 | 	add	fp, #4
158e4     A7 12 62 FC | 	wrlong	arg01, fp
158e8     08 4E 85 F1 | 	sub	fp, #8
158ec     A7 12 02 FB | 	rdlong	arg01, fp
158f0     0C 4E 05 F1 | 	add	fp, #12
158f4     A7 12 62 FC | 	wrlong	arg01, fp
158f8     04 4E 85 F1 | 	sub	fp, #4
158fc     A7 12 02 F6 | 	mov	arg01, fp
15900     08 4E 85 F1 | 	sub	fp, #8
15904     08 50 BF FD | 	call	#_push
15908     A7 F0 03 F6 | 	mov	ptra, fp
1590c     B2 00 A0 FD | 	call	#popregs_
15910                 | _do_gettime_ret
15910     2D 00 64 FD | 	ret
15914                 | 
15914                 | '    
15914                 | ' 
15914                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
15914                 | ' 
15914                 | ' '' ----------------------------- Clear the screen
15914                 | ' 
15914                 | ' sub do_cls
15914                 | _do_cls
15914     37 00 00 FF 
15918     6C E4 05 F1 | 	add	objptr, ##28268
1591c     F2 12 02 FB | 	rdlong	arg01, objptr
15920     04 E4 85 F1 | 	sub	objptr, #4
15924     F2 14 02 FB | 	rdlong	arg02, objptr
15928     37 00 00 FF 
1592c     68 E4 85 F1 | 	sub	objptr, ##28264
15930     38 7B B0 FD | 	call	#_hg010b_spin2_cls
15934     37 00 00 FF 
15938     6C E4 05 F1 | 	add	objptr, ##28268
1593c     F2 14 02 FB | 	rdlong	arg02, objptr
15940     14 E4 85 F1 | 	sub	objptr, #20
15944     F2 14 62 FC | 	wrlong	arg02, objptr
15948     37 00 00 FF 
1594c     58 E4 85 F1 | 	sub	objptr, ##28248
15950                 | _do_cls_ret
15950     2D 00 64 FD | 	ret
15954                 | 
15954                 | ' 
15954                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
15954                 | ' 
15954                 | ' sub do_color
15954                 | _do_color
15954     03 4A 05 F6 | 	mov	COUNT_, #3
15958     A8 00 A0 FD | 	call	#pushregs_
1595c     18 4F BF FD | 	call	#_pop
15960     FD 1E 02 F6 | 	mov	local01, result1
15964     FE 20 02 F6 | 	mov	local02, result2
15968     FF 22 02 F6 | 	mov	local03, result3
1596c     37 00 00 FF 
15970     58 E4 05 F1 | 	add	objptr, ##28248
15974     F2 1E 62 FC | 	wrlong	local01, objptr
15978     37 00 00 FF 
1597c     58 E4 85 F1 | 	sub	objptr, ##28248
15980     A7 F0 03 F6 | 	mov	ptra, fp
15984     B2 00 A0 FD | 	call	#popregs_
15988                 | _do_color_ret
15988     2D 00 64 FD | 	ret
1598c                 | 
1598c                 | ' 
1598c                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
1598c                 | ' 
1598c                 | ' sub do_plot
1598c                 | _do_plot
1598c     00 4A 05 F6 | 	mov	COUNT_, #0
15990     A8 00 A0 FD | 	call	#pushregs_
15994     20 F0 07 F1 | 	add	ptra, #32
15998     DC 4E BF FD | 	call	#_pop
1599c     FD 16 02 F6 | 	mov	arg03, result1
159a0     FE 14 02 F6 | 	mov	arg02, result2
159a4     FF 12 02 F6 | 	mov	arg01, result3
159a8     0C 4E 05 F1 | 	add	fp, #12
159ac     A7 16 62 FC | 	wrlong	arg03, fp
159b0     04 4E 05 F1 | 	add	fp, #4
159b4     A7 14 62 FC | 	wrlong	arg02, fp
159b8     04 4E 05 F1 | 	add	fp, #4
159bc     A7 12 62 FC | 	wrlong	arg01, fp
159c0     14 4E 85 F1 | 	sub	fp, #20
159c4     B0 4E BF FD | 	call	#_pop
159c8     FF 16 02 F6 | 	mov	arg03, result3
159cc     A7 FA 61 FC | 	wrlong	result1, fp
159d0     04 4E 05 F1 | 	add	fp, #4
159d4     A7 FC 61 FC | 	wrlong	result2, fp
159d8     04 4E 05 F1 | 	add	fp, #4
159dc     A7 16 62 FC | 	wrlong	arg03, fp
159e0     08 4E 85 F1 | 	sub	fp, #8
159e4     A7 12 02 F6 | 	mov	arg01, fp
159e8     CC D9 BF FD | 	call	#_converttoint
159ec     18 4E 05 F1 | 	add	fp, #24
159f0     A7 FA 61 FC | 	wrlong	result1, fp
159f4     0C 4E 85 F1 | 	sub	fp, #12
159f8     A7 12 02 F6 | 	mov	arg01, fp
159fc     0C 4E 85 F1 | 	sub	fp, #12
15a00     B4 D9 BF FD | 	call	#_converttoint
15a04     1C 4E 05 F1 | 	add	fp, #28
15a08     A7 FA 61 FC | 	wrlong	result1, fp
15a0c     04 4E 85 F1 | 	sub	fp, #4
15a10     A7 16 02 FB | 	rdlong	arg03, fp
15a14     37 00 00 FF 
15a18     5C E4 05 F1 | 	add	objptr, ##28252
15a1c     F2 16 62 FC | 	wrlong	arg03, objptr
15a20     04 4E 05 F1 | 	add	fp, #4
15a24     A7 14 02 FB | 	rdlong	arg02, fp
15a28     1C 4E 85 F1 | 	sub	fp, #28
15a2c     04 E4 05 F1 | 	add	objptr, #4
15a30     F2 14 62 FC | 	wrlong	arg02, objptr
15a34     04 E4 85 F1 | 	sub	objptr, #4
15a38     F2 12 02 FB | 	rdlong	arg01, objptr
15a3c     04 E4 85 F1 | 	sub	objptr, #4
15a40     F2 16 02 FB | 	rdlong	arg03, objptr
15a44     37 00 00 FF 
15a48     58 E4 85 F1 | 	sub	objptr, ##28248
15a4c     48 6D B0 FD | 	call	#_hg010b_spin2_putpixel
15a50     A7 F0 03 F6 | 	mov	ptra, fp
15a54     B2 00 A0 FD | 	call	#popregs_
15a58                 | _do_plot_ret
15a58     2D 00 64 FD | 	ret
15a5c                 | 
15a5c                 | ' 
15a5c                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
15a5c                 | ' 
15a5c                 | ' sub do_draw
15a5c                 | _do_draw
15a5c     00 4A 05 F6 | 	mov	COUNT_, #0
15a60     A8 00 A0 FD | 	call	#pushregs_
15a64     20 F0 07 F1 | 	add	ptra, #32
15a68     0C 4E BF FD | 	call	#_pop
15a6c     FD 1A 02 F6 | 	mov	arg05, result1
15a70     FE 18 02 F6 | 	mov	arg04, result2
15a74     FF 16 02 F6 | 	mov	arg03, result3
15a78     0C 4E 05 F1 | 	add	fp, #12
15a7c     A7 1A 62 FC | 	wrlong	arg05, fp
15a80     04 4E 05 F1 | 	add	fp, #4
15a84     A7 18 62 FC | 	wrlong	arg04, fp
15a88     04 4E 05 F1 | 	add	fp, #4
15a8c     A7 16 62 FC | 	wrlong	arg03, fp
15a90     14 4E 85 F1 | 	sub	fp, #20
15a94     E0 4D BF FD | 	call	#_pop
15a98     FF 1A 02 F6 | 	mov	arg05, result3
15a9c     A7 FA 61 FC | 	wrlong	result1, fp
15aa0     04 4E 05 F1 | 	add	fp, #4
15aa4     A7 FC 61 FC | 	wrlong	result2, fp
15aa8     04 4E 05 F1 | 	add	fp, #4
15aac     A7 1A 62 FC | 	wrlong	arg05, fp
15ab0     08 4E 85 F1 | 	sub	fp, #8
15ab4     A7 12 02 F6 | 	mov	arg01, fp
15ab8     FC D8 BF FD | 	call	#_converttoint
15abc     18 4E 05 F1 | 	add	fp, #24
15ac0     A7 FA 61 FC | 	wrlong	result1, fp
15ac4     0C 4E 85 F1 | 	sub	fp, #12
15ac8     A7 12 02 F6 | 	mov	arg01, fp
15acc     0C 4E 85 F1 | 	sub	fp, #12
15ad0     E4 D8 BF FD | 	call	#_converttoint
15ad4     1C 4E 05 F1 | 	add	fp, #28
15ad8     A7 FA 61 FC | 	wrlong	result1, fp
15adc     37 00 00 FF 
15ae0     5C E4 05 F1 | 	add	objptr, ##28252
15ae4     F2 12 02 FB | 	rdlong	arg01, objptr
15ae8     04 E4 05 F1 | 	add	objptr, #4
15aec     F2 14 02 FB | 	rdlong	arg02, objptr
15af0     04 4E 85 F1 | 	sub	fp, #4
15af4     A7 16 02 FB | 	rdlong	arg03, fp
15af8     FD 18 02 F6 | 	mov	arg04, result1
15afc     18 4E 85 F1 | 	sub	fp, #24
15b00     08 E4 85 F1 | 	sub	objptr, #8
15b04     F2 1A 02 FB | 	rdlong	arg05, objptr
15b08     37 00 00 FF 
15b0c     58 E4 85 F1 | 	sub	objptr, ##28248
15b10     34 6F B0 FD | 	call	#_hg010b_spin2_draw
15b14     18 4E 05 F1 | 	add	fp, #24
15b18     A7 1A 02 FB | 	rdlong	arg05, fp
15b1c     37 00 00 FF 
15b20     5C E4 05 F1 | 	add	objptr, ##28252
15b24     F2 1A 62 FC | 	wrlong	arg05, objptr
15b28     04 4E 05 F1 | 	add	fp, #4
15b2c     A7 1A 02 FB | 	rdlong	arg05, fp
15b30     1C 4E 85 F1 | 	sub	fp, #28
15b34     04 E4 05 F1 | 	add	objptr, #4
15b38     F2 1A 62 FC | 	wrlong	arg05, objptr
15b3c     37 00 00 FF 
15b40     60 E4 85 F1 | 	sub	objptr, ##28256
15b44     A7 F0 03 F6 | 	mov	ptra, fp
15b48     B2 00 A0 FD | 	call	#popregs_
15b4c                 | _do_draw_ret
15b4c     2D 00 64 FD | 	ret
15b50                 | 
15b50                 | ' 
15b50                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
15b50                 | ' 
15b50                 | ' sub do_fcircle
15b50                 | _do_fcircle
15b50     02 4A 05 F6 | 	mov	COUNT_, #2
15b54     A8 00 A0 FD | 	call	#pushregs_
15b58     24 F0 07 F1 | 	add	ptra, #36
15b5c     18 4D BF FD | 	call	#_pop
15b60     FD 18 02 F6 | 	mov	arg04, result1
15b64     FE 16 02 F6 | 	mov	arg03, result2
15b68     FF 14 02 F6 | 	mov	arg02, result3
15b6c     18 4E 05 F1 | 	add	fp, #24
15b70     A7 18 62 FC | 	wrlong	arg04, fp
15b74     04 4E 05 F1 | 	add	fp, #4
15b78     A7 16 62 FC | 	wrlong	arg03, fp
15b7c     04 4E 05 F1 | 	add	fp, #4
15b80     A7 14 62 FC | 	wrlong	arg02, fp
15b84     20 4E 85 F1 | 	sub	fp, #32
15b88     EC 4C BF FD | 	call	#_pop
15b8c     FD 18 02 F6 | 	mov	arg04, result1
15b90     FE 16 02 F6 | 	mov	arg03, result2
15b94     FF 1E 02 F6 | 	mov	local01, result3
15b98     0C 4E 05 F1 | 	add	fp, #12
15b9c     A7 18 62 FC | 	wrlong	arg04, fp
15ba0     04 4E 05 F1 | 	add	fp, #4
15ba4     A7 16 62 FC | 	wrlong	arg03, fp
15ba8     04 4E 05 F1 | 	add	fp, #4
15bac     A7 1E 62 FC | 	wrlong	local01, fp
15bb0     14 4E 85 F1 | 	sub	fp, #20
15bb4     C0 4C BF FD | 	call	#_pop
15bb8     A7 FA 61 FC | 	wrlong	result1, fp
15bbc     04 4E 05 F1 | 	add	fp, #4
15bc0     A7 FC 61 FC | 	wrlong	result2, fp
15bc4     04 4E 05 F1 | 	add	fp, #4
15bc8     A7 FE 61 FC | 	wrlong	result3, fp
15bcc                 | ' 
15bcc                 | ' t3=pop()
15bcc                 | ' t2=pop()
15bcc                 | ' t1=pop()
15bcc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
15bcc     FF 18 02 F6 | 	mov	arg04, result3
15bd0     08 4E 85 F1 | 	sub	fp, #8
15bd4     1C 18 0E F2 | 	cmp	arg04, #28 wz
15bd8     08 4E 05 51 |  if_ne	add	fp, #8
15bdc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15be0     08 4E 85 51 |  if_ne	sub	fp, #8
15be4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15be8     7C 00 90 5D |  if_ne	jmp	#LR__1780
15bec     14 4E 05 F1 | 	add	fp, #20
15bf0     A7 1E 02 FB | 	rdlong	local01, fp
15bf4     14 4E 85 F1 | 	sub	fp, #20
15bf8     1C 1E 0E F2 | 	cmp	local01, #28 wz
15bfc     14 4E 05 51 |  if_ne	add	fp, #20
15c00     A7 18 02 5B |  if_ne	rdlong	arg04, fp
15c04     14 4E 85 51 |  if_ne	sub	fp, #20
15c08     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
15c0c     58 00 90 5D |  if_ne	jmp	#LR__1780
15c10     20 4E 05 F1 | 	add	fp, #32
15c14     A7 1E 02 FB | 	rdlong	local01, fp
15c18     20 4E 85 F1 | 	sub	fp, #32
15c1c     1C 1E 0E F2 | 	cmp	local01, #28 wz
15c20     20 4E 05 51 |  if_ne	add	fp, #32
15c24     A7 18 02 5B |  if_ne	rdlong	arg04, fp
15c28     20 4E 85 51 |  if_ne	sub	fp, #32
15c2c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
15c30     34 00 90 5D |  if_ne	jmp	#LR__1780
15c34     A7 12 02 FB | 	rdlong	arg01, fp
15c38     0C 4E 05 F1 | 	add	fp, #12
15c3c     A7 14 02 FB | 	rdlong	arg02, fp
15c40     0C 4E 05 F1 | 	add	fp, #12
15c44     A7 16 02 FB | 	rdlong	arg03, fp
15c48     18 4E 85 F1 | 	sub	fp, #24
15c4c     37 00 00 FF 
15c50     58 E4 05 F1 | 	add	objptr, ##28248
15c54     F2 18 02 FB | 	rdlong	arg04, objptr
15c58     37 00 00 FF 
15c5c     58 E4 85 F1 | 	sub	objptr, ##28248
15c60     68 72 B0 FD | 	call	#_hg010b_spin2_fcircle
15c64                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
15c64     54 00 90 FD | 	jmp	#LR__1781
15c68                 | LR__1780
15c68     A7 12 02 F6 | 	mov	arg01, fp
15c6c     48 D7 BF FD | 	call	#_converttoint
15c70     FD 1E 02 F6 | 	mov	local01, result1
15c74     0C 4E 05 F1 | 	add	fp, #12
15c78     A7 12 02 F6 | 	mov	arg01, fp
15c7c     0C 4E 85 F1 | 	sub	fp, #12
15c80     34 D7 BF FD | 	call	#_converttoint
15c84     FD 20 02 F6 | 	mov	local02, result1
15c88     18 4E 05 F1 | 	add	fp, #24
15c8c     A7 12 02 F6 | 	mov	arg01, fp
15c90     18 4E 85 F1 | 	sub	fp, #24
15c94     20 D7 BF FD | 	call	#_converttoint
15c98     FD 16 02 F6 | 	mov	arg03, result1
15c9c     37 00 00 FF 
15ca0     58 E4 05 F1 | 	add	objptr, ##28248
15ca4     F2 18 02 FB | 	rdlong	arg04, objptr
15ca8     37 00 00 FF 
15cac     58 E4 85 F1 | 	sub	objptr, ##28248
15cb0     0F 13 02 F6 | 	mov	arg01, local01
15cb4     10 15 02 F6 | 	mov	arg02, local02
15cb8     10 72 B0 FD | 	call	#_hg010b_spin2_fcircle
15cbc                 | LR__1781
15cbc     A7 F0 03 F6 | 	mov	ptra, fp
15cc0     B2 00 A0 FD | 	call	#popregs_
15cc4                 | _do_fcircle_ret
15cc4     2D 00 64 FD | 	ret
15cc8                 | 
15cc8                 | ' 
15cc8                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
15cc8                 | ' 
15cc8                 | ' sub do_circle
15cc8                 | _do_circle
15cc8     02 4A 05 F6 | 	mov	COUNT_, #2
15ccc     A8 00 A0 FD | 	call	#pushregs_
15cd0     24 F0 07 F1 | 	add	ptra, #36
15cd4     A0 4B BF FD | 	call	#_pop
15cd8     FD 18 02 F6 | 	mov	arg04, result1
15cdc     FE 16 02 F6 | 	mov	arg03, result2
15ce0     FF 14 02 F6 | 	mov	arg02, result3
15ce4     18 4E 05 F1 | 	add	fp, #24
15ce8     A7 18 62 FC | 	wrlong	arg04, fp
15cec     04 4E 05 F1 | 	add	fp, #4
15cf0     A7 16 62 FC | 	wrlong	arg03, fp
15cf4     04 4E 05 F1 | 	add	fp, #4
15cf8     A7 14 62 FC | 	wrlong	arg02, fp
15cfc     20 4E 85 F1 | 	sub	fp, #32
15d00     74 4B BF FD | 	call	#_pop
15d04     FD 18 02 F6 | 	mov	arg04, result1
15d08     FE 16 02 F6 | 	mov	arg03, result2
15d0c     FF 1E 02 F6 | 	mov	local01, result3
15d10     0C 4E 05 F1 | 	add	fp, #12
15d14     A7 18 62 FC | 	wrlong	arg04, fp
15d18     04 4E 05 F1 | 	add	fp, #4
15d1c     A7 16 62 FC | 	wrlong	arg03, fp
15d20     04 4E 05 F1 | 	add	fp, #4
15d24     A7 1E 62 FC | 	wrlong	local01, fp
15d28     14 4E 85 F1 | 	sub	fp, #20
15d2c     48 4B BF FD | 	call	#_pop
15d30     A7 FA 61 FC | 	wrlong	result1, fp
15d34     04 4E 05 F1 | 	add	fp, #4
15d38     A7 FC 61 FC | 	wrlong	result2, fp
15d3c     04 4E 05 F1 | 	add	fp, #4
15d40     A7 FE 61 FC | 	wrlong	result3, fp
15d44                 | ' 
15d44                 | ' t3=pop()
15d44                 | ' t2=pop()
15d44                 | ' t1=pop()
15d44                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
15d44     FF 18 02 F6 | 	mov	arg04, result3
15d48     08 4E 85 F1 | 	sub	fp, #8
15d4c     1C 18 0E F2 | 	cmp	arg04, #28 wz
15d50     08 4E 05 51 |  if_ne	add	fp, #8
15d54     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15d58     08 4E 85 51 |  if_ne	sub	fp, #8
15d5c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15d60     7C 00 90 5D |  if_ne	jmp	#LR__1790
15d64     14 4E 05 F1 | 	add	fp, #20
15d68     A7 1E 02 FB | 	rdlong	local01, fp
15d6c     14 4E 85 F1 | 	sub	fp, #20
15d70     1C 1E 0E F2 | 	cmp	local01, #28 wz
15d74     14 4E 05 51 |  if_ne	add	fp, #20
15d78     A7 18 02 5B |  if_ne	rdlong	arg04, fp
15d7c     14 4E 85 51 |  if_ne	sub	fp, #20
15d80     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
15d84     58 00 90 5D |  if_ne	jmp	#LR__1790
15d88     20 4E 05 F1 | 	add	fp, #32
15d8c     A7 1E 02 FB | 	rdlong	local01, fp
15d90     20 4E 85 F1 | 	sub	fp, #32
15d94     1C 1E 0E F2 | 	cmp	local01, #28 wz
15d98     20 4E 05 51 |  if_ne	add	fp, #32
15d9c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
15da0     20 4E 85 51 |  if_ne	sub	fp, #32
15da4     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
15da8     34 00 90 5D |  if_ne	jmp	#LR__1790
15dac     A7 12 02 FB | 	rdlong	arg01, fp
15db0     0C 4E 05 F1 | 	add	fp, #12
15db4     A7 14 02 FB | 	rdlong	arg02, fp
15db8     0C 4E 05 F1 | 	add	fp, #12
15dbc     A7 16 02 FB | 	rdlong	arg03, fp
15dc0     18 4E 85 F1 | 	sub	fp, #24
15dc4     37 00 00 FF 
15dc8     58 E4 05 F1 | 	add	objptr, ##28248
15dcc     F2 18 02 FB | 	rdlong	arg04, objptr
15dd0     37 00 00 FF 
15dd4     58 E4 85 F1 | 	sub	objptr, ##28248
15dd8     FC 71 B0 FD | 	call	#_hg010b_spin2_circle
15ddc                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
15ddc     54 00 90 FD | 	jmp	#LR__1791
15de0                 | LR__1790
15de0     A7 12 02 F6 | 	mov	arg01, fp
15de4     D0 D5 BF FD | 	call	#_converttoint
15de8     FD 1E 02 F6 | 	mov	local01, result1
15dec     0C 4E 05 F1 | 	add	fp, #12
15df0     A7 12 02 F6 | 	mov	arg01, fp
15df4     0C 4E 85 F1 | 	sub	fp, #12
15df8     BC D5 BF FD | 	call	#_converttoint
15dfc     FD 20 02 F6 | 	mov	local02, result1
15e00     18 4E 05 F1 | 	add	fp, #24
15e04     A7 12 02 F6 | 	mov	arg01, fp
15e08     18 4E 85 F1 | 	sub	fp, #24
15e0c     A8 D5 BF FD | 	call	#_converttoint
15e10     FD 16 02 F6 | 	mov	arg03, result1
15e14     37 00 00 FF 
15e18     58 E4 05 F1 | 	add	objptr, ##28248
15e1c     F2 18 02 FB | 	rdlong	arg04, objptr
15e20     37 00 00 FF 
15e24     58 E4 85 F1 | 	sub	objptr, ##28248
15e28     0F 13 02 F6 | 	mov	arg01, local01
15e2c     10 15 02 F6 | 	mov	arg02, local02
15e30     A4 71 B0 FD | 	call	#_hg010b_spin2_circle
15e34                 | LR__1791
15e34     A7 F0 03 F6 | 	mov	ptra, fp
15e38     B2 00 A0 FD | 	call	#popregs_
15e3c                 | _do_circle_ret
15e3c     2D 00 64 FD | 	ret
15e40                 | 
15e40                 | ' 
15e40                 | ' ' -------------------------- Draw a rectangle
15e40                 | ' 
15e40                 | ' sub do_box
15e40                 | _do_box
15e40     03 4A 05 F6 | 	mov	COUNT_, #3
15e44     A8 00 A0 FD | 	call	#pushregs_
15e48     30 F0 07 F1 | 	add	ptra, #48
15e4c     28 4A BF FD | 	call	#_pop
15e50     FD 1A 02 F6 | 	mov	arg05, result1
15e54     FE 18 02 F6 | 	mov	arg04, result2
15e58     FF 16 02 F6 | 	mov	arg03, result3
15e5c     24 4E 05 F1 | 	add	fp, #36
15e60     A7 1A 62 FC | 	wrlong	arg05, fp
15e64     04 4E 05 F1 | 	add	fp, #4
15e68     A7 18 62 FC | 	wrlong	arg04, fp
15e6c     04 4E 05 F1 | 	add	fp, #4
15e70     A7 16 62 FC | 	wrlong	arg03, fp
15e74     2C 4E 85 F1 | 	sub	fp, #44
15e78     FC 49 BF FD | 	call	#_pop
15e7c     FD 1A 02 F6 | 	mov	arg05, result1
15e80     FE 18 02 F6 | 	mov	arg04, result2
15e84     FF 16 02 F6 | 	mov	arg03, result3
15e88     18 4E 05 F1 | 	add	fp, #24
15e8c     A7 1A 62 FC | 	wrlong	arg05, fp
15e90     04 4E 05 F1 | 	add	fp, #4
15e94     A7 18 62 FC | 	wrlong	arg04, fp
15e98     04 4E 05 F1 | 	add	fp, #4
15e9c     A7 16 62 FC | 	wrlong	arg03, fp
15ea0     20 4E 85 F1 | 	sub	fp, #32
15ea4     D0 49 BF FD | 	call	#_pop
15ea8     FD 1A 02 F6 | 	mov	arg05, result1
15eac     FE 18 02 F6 | 	mov	arg04, result2
15eb0     FF 1E 02 F6 | 	mov	local01, result3
15eb4     0C 4E 05 F1 | 	add	fp, #12
15eb8     A7 1A 62 FC | 	wrlong	arg05, fp
15ebc     04 4E 05 F1 | 	add	fp, #4
15ec0     A7 18 62 FC | 	wrlong	arg04, fp
15ec4     04 4E 05 F1 | 	add	fp, #4
15ec8     A7 1E 62 FC | 	wrlong	local01, fp
15ecc     14 4E 85 F1 | 	sub	fp, #20
15ed0     A4 49 BF FD | 	call	#_pop
15ed4     A7 FA 61 FC | 	wrlong	result1, fp
15ed8     04 4E 05 F1 | 	add	fp, #4
15edc     A7 FC 61 FC | 	wrlong	result2, fp
15ee0     04 4E 05 F1 | 	add	fp, #4
15ee4     A7 FE 61 FC | 	wrlong	result3, fp
15ee8                 | ' 
15ee8                 | ' t4=pop()
15ee8                 | ' t3=pop()
15ee8                 | ' t2=pop()
15ee8                 | ' t1=pop()
15ee8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
15ee8     FF 1A 02 F6 | 	mov	arg05, result3
15eec     08 4E 85 F1 | 	sub	fp, #8
15ef0     1C 1A 0E F2 | 	cmp	arg05, #28 wz
15ef4     08 4E 05 51 |  if_ne	add	fp, #8
15ef8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15efc     08 4E 85 51 |  if_ne	sub	fp, #8
15f00     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15f04     A8 00 90 5D |  if_ne	jmp	#LR__1800
15f08     14 4E 05 F1 | 	add	fp, #20
15f0c     A7 1E 02 FB | 	rdlong	local01, fp
15f10     14 4E 85 F1 | 	sub	fp, #20
15f14     1C 1E 0E F2 | 	cmp	local01, #28 wz
15f18     14 4E 05 51 |  if_ne	add	fp, #20
15f1c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
15f20     14 4E 85 51 |  if_ne	sub	fp, #20
15f24     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
15f28     84 00 90 5D |  if_ne	jmp	#LR__1800
15f2c     20 4E 05 F1 | 	add	fp, #32
15f30     A7 1E 02 FB | 	rdlong	local01, fp
15f34     20 4E 85 F1 | 	sub	fp, #32
15f38     1C 1E 0E F2 | 	cmp	local01, #28 wz
15f3c     20 4E 05 51 |  if_ne	add	fp, #32
15f40     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
15f44     20 4E 85 51 |  if_ne	sub	fp, #32
15f48     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
15f4c     60 00 90 5D |  if_ne	jmp	#LR__1800
15f50     2C 4E 05 F1 | 	add	fp, #44
15f54     A7 1E 02 FB | 	rdlong	local01, fp
15f58     2C 4E 85 F1 | 	sub	fp, #44
15f5c     1C 1E 0E F2 | 	cmp	local01, #28 wz
15f60     2C 4E 05 51 |  if_ne	add	fp, #44
15f64     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
15f68     2C 4E 85 51 |  if_ne	sub	fp, #44
15f6c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
15f70     3C 00 90 5D |  if_ne	jmp	#LR__1800
15f74     A7 12 02 FB | 	rdlong	arg01, fp
15f78     0C 4E 05 F1 | 	add	fp, #12
15f7c     A7 14 02 FB | 	rdlong	arg02, fp
15f80     0C 4E 05 F1 | 	add	fp, #12
15f84     A7 16 02 FB | 	rdlong	arg03, fp
15f88     0C 4E 05 F1 | 	add	fp, #12
15f8c     A7 18 02 FB | 	rdlong	arg04, fp
15f90     24 4E 85 F1 | 	sub	fp, #36
15f94     37 00 00 FF 
15f98     58 E4 05 F1 | 	add	objptr, ##28248
15f9c     F2 1A 02 FB | 	rdlong	arg05, objptr
15fa0     37 00 00 FF 
15fa4     58 E4 85 F1 | 	sub	objptr, ##28248
15fa8     F8 71 B0 FD | 	call	#_hg010b_spin2_box
15fac                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
15fac     6C 00 90 FD | 	jmp	#LR__1801
15fb0                 | LR__1800
15fb0     A7 12 02 F6 | 	mov	arg01, fp
15fb4     00 D4 BF FD | 	call	#_converttoint
15fb8     FD 20 02 F6 | 	mov	local02, result1
15fbc     0C 4E 05 F1 | 	add	fp, #12
15fc0     A7 12 02 F6 | 	mov	arg01, fp
15fc4     0C 4E 85 F1 | 	sub	fp, #12
15fc8     EC D3 BF FD | 	call	#_converttoint
15fcc     FD 22 02 F6 | 	mov	local03, result1
15fd0     18 4E 05 F1 | 	add	fp, #24
15fd4     A7 12 02 F6 | 	mov	arg01, fp
15fd8     18 4E 85 F1 | 	sub	fp, #24
15fdc     D8 D3 BF FD | 	call	#_converttoint
15fe0     FD 1E 02 F6 | 	mov	local01, result1
15fe4     24 4E 05 F1 | 	add	fp, #36
15fe8     A7 12 02 F6 | 	mov	arg01, fp
15fec     24 4E 85 F1 | 	sub	fp, #36
15ff0     C4 D3 BF FD | 	call	#_converttoint
15ff4     FD 18 02 F6 | 	mov	arg04, result1
15ff8     37 00 00 FF 
15ffc     58 E4 05 F1 | 	add	objptr, ##28248
16000     F2 1A 02 FB | 	rdlong	arg05, objptr
16004     37 00 00 FF 
16008     58 E4 85 F1 | 	sub	objptr, ##28248
1600c     10 13 02 F6 | 	mov	arg01, local02
16010     11 15 02 F6 | 	mov	arg02, local03
16014     0F 17 02 F6 | 	mov	arg03, local01
16018     88 71 B0 FD | 	call	#_hg010b_spin2_box
1601c                 | LR__1801
1601c     A7 F0 03 F6 | 	mov	ptra, fp
16020     B2 00 A0 FD | 	call	#popregs_
16024                 | _do_box_ret
16024     2D 00 64 FD | 	ret
16028                 | 
16028                 | ' 
16028                 | ' sub do_fill
16028                 | _do_fill
16028     03 4A 05 F6 | 	mov	COUNT_, #3
1602c     A8 00 A0 FD | 	call	#pushregs_
16030     30 F0 07 F1 | 	add	ptra, #48
16034     40 48 BF FD | 	call	#_pop
16038     FD 18 02 F6 | 	mov	arg04, result1
1603c     FE 16 02 F6 | 	mov	arg03, result2
16040     FF 14 02 F6 | 	mov	arg02, result3
16044     24 4E 05 F1 | 	add	fp, #36
16048     A7 18 62 FC | 	wrlong	arg04, fp
1604c     04 4E 05 F1 | 	add	fp, #4
16050     A7 16 62 FC | 	wrlong	arg03, fp
16054     04 4E 05 F1 | 	add	fp, #4
16058     A7 14 62 FC | 	wrlong	arg02, fp
1605c     2C 4E 85 F1 | 	sub	fp, #44
16060     14 48 BF FD | 	call	#_pop
16064     FD 18 02 F6 | 	mov	arg04, result1
16068     FE 16 02 F6 | 	mov	arg03, result2
1606c     FF 14 02 F6 | 	mov	arg02, result3
16070     18 4E 05 F1 | 	add	fp, #24
16074     A7 18 62 FC | 	wrlong	arg04, fp
16078     04 4E 05 F1 | 	add	fp, #4
1607c     A7 16 62 FC | 	wrlong	arg03, fp
16080     04 4E 05 F1 | 	add	fp, #4
16084     A7 14 62 FC | 	wrlong	arg02, fp
16088     20 4E 85 F1 | 	sub	fp, #32
1608c     E8 47 BF FD | 	call	#_pop
16090     FD 18 02 F6 | 	mov	arg04, result1
16094     FE 16 02 F6 | 	mov	arg03, result2
16098     FF 1E 02 F6 | 	mov	local01, result3
1609c     0C 4E 05 F1 | 	add	fp, #12
160a0     A7 18 62 FC | 	wrlong	arg04, fp
160a4     04 4E 05 F1 | 	add	fp, #4
160a8     A7 16 62 FC | 	wrlong	arg03, fp
160ac     04 4E 05 F1 | 	add	fp, #4
160b0     A7 1E 62 FC | 	wrlong	local01, fp
160b4     14 4E 85 F1 | 	sub	fp, #20
160b8     BC 47 BF FD | 	call	#_pop
160bc     A7 FA 61 FC | 	wrlong	result1, fp
160c0     04 4E 05 F1 | 	add	fp, #4
160c4     A7 FC 61 FC | 	wrlong	result2, fp
160c8     04 4E 05 F1 | 	add	fp, #4
160cc     A7 FE 61 FC | 	wrlong	result3, fp
160d0                 | ' 
160d0                 | ' t4=pop()
160d0                 | ' t3=pop()
160d0                 | ' t2=pop()
160d0                 | ' t1=pop()
160d0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
160d0     FF 18 02 F6 | 	mov	arg04, result3
160d4     08 4E 85 F1 | 	sub	fp, #8
160d8     1C 18 0E F2 | 	cmp	arg04, #28 wz
160dc     08 4E 05 51 |  if_ne	add	fp, #8
160e0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
160e4     08 4E 85 51 |  if_ne	sub	fp, #8
160e8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
160ec     94 00 90 5D |  if_ne	jmp	#LR__1810
160f0     14 4E 05 F1 | 	add	fp, #20
160f4     A7 1E 02 FB | 	rdlong	local01, fp
160f8     14 4E 85 F1 | 	sub	fp, #20
160fc     1C 1E 0E F2 | 	cmp	local01, #28 wz
16100     14 4E 05 51 |  if_ne	add	fp, #20
16104     A7 18 02 5B |  if_ne	rdlong	arg04, fp
16108     14 4E 85 51 |  if_ne	sub	fp, #20
1610c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
16110     70 00 90 5D |  if_ne	jmp	#LR__1810
16114     20 4E 05 F1 | 	add	fp, #32
16118     A7 1E 02 FB | 	rdlong	local01, fp
1611c     20 4E 85 F1 | 	sub	fp, #32
16120     1C 1E 0E F2 | 	cmp	local01, #28 wz
16124     20 4E 05 51 |  if_ne	add	fp, #32
16128     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1612c     20 4E 85 51 |  if_ne	sub	fp, #32
16130     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
16134     4C 00 90 5D |  if_ne	jmp	#LR__1810
16138     2C 4E 05 F1 | 	add	fp, #44
1613c     A7 1E 02 FB | 	rdlong	local01, fp
16140     2C 4E 85 F1 | 	sub	fp, #44
16144     1C 1E 0E F2 | 	cmp	local01, #28 wz
16148     2C 4E 05 51 |  if_ne	add	fp, #44
1614c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
16150     2C 4E 85 51 |  if_ne	sub	fp, #44
16154     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
16158     28 00 90 5D |  if_ne	jmp	#LR__1810
1615c     A7 12 02 FB | 	rdlong	arg01, fp
16160     0C 4E 05 F1 | 	add	fp, #12
16164     A7 14 02 FB | 	rdlong	arg02, fp
16168     0C 4E 05 F1 | 	add	fp, #12
1616c     A7 16 02 FB | 	rdlong	arg03, fp
16170     0C 4E 05 F1 | 	add	fp, #12
16174     A7 18 02 FB | 	rdlong	arg04, fp
16178     24 4E 85 F1 | 	sub	fp, #36
1617c     B8 6A B0 FD | 	call	#_hg010b_spin2_fill
16180                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
16180     58 00 90 FD | 	jmp	#LR__1811
16184                 | LR__1810
16184     A7 12 02 F6 | 	mov	arg01, fp
16188     2C D2 BF FD | 	call	#_converttoint
1618c     FD 20 02 F6 | 	mov	local02, result1
16190     0C 4E 05 F1 | 	add	fp, #12
16194     A7 12 02 F6 | 	mov	arg01, fp
16198     0C 4E 85 F1 | 	sub	fp, #12
1619c     18 D2 BF FD | 	call	#_converttoint
161a0     FD 22 02 F6 | 	mov	local03, result1
161a4     18 4E 05 F1 | 	add	fp, #24
161a8     A7 12 02 F6 | 	mov	arg01, fp
161ac     18 4E 85 F1 | 	sub	fp, #24
161b0     04 D2 BF FD | 	call	#_converttoint
161b4     FD 1E 02 F6 | 	mov	local01, result1
161b8     24 4E 05 F1 | 	add	fp, #36
161bc     A7 12 02 F6 | 	mov	arg01, fp
161c0     24 4E 85 F1 | 	sub	fp, #36
161c4     F0 D1 BF FD | 	call	#_converttoint
161c8     FD 18 02 F6 | 	mov	arg04, result1
161cc     10 13 02 F6 | 	mov	arg01, local02
161d0     11 15 02 F6 | 	mov	arg02, local03
161d4     0F 17 02 F6 | 	mov	arg03, local01
161d8     5C 6A B0 FD | 	call	#_hg010b_spin2_fill
161dc                 | LR__1811
161dc     A7 F0 03 F6 | 	mov	ptra, fp
161e0     B2 00 A0 FD | 	call	#popregs_
161e4                 | _do_fill_ret
161e4     2D 00 64 FD | 	ret
161e8                 | 
161e8                 | ' 
161e8                 | ' ' -------------------------- Draw a frane
161e8                 | ' 
161e8                 | ' sub do_frame
161e8                 | _do_frame
161e8     03 4A 05 F6 | 	mov	COUNT_, #3
161ec     A8 00 A0 FD | 	call	#pushregs_
161f0     30 F0 07 F1 | 	add	ptra, #48
161f4     80 46 BF FD | 	call	#_pop
161f8     FD 1A 02 F6 | 	mov	arg05, result1
161fc     FE 18 02 F6 | 	mov	arg04, result2
16200     FF 16 02 F6 | 	mov	arg03, result3
16204     24 4E 05 F1 | 	add	fp, #36
16208     A7 1A 62 FC | 	wrlong	arg05, fp
1620c     04 4E 05 F1 | 	add	fp, #4
16210     A7 18 62 FC | 	wrlong	arg04, fp
16214     04 4E 05 F1 | 	add	fp, #4
16218     A7 16 62 FC | 	wrlong	arg03, fp
1621c     2C 4E 85 F1 | 	sub	fp, #44
16220     54 46 BF FD | 	call	#_pop
16224     FD 1A 02 F6 | 	mov	arg05, result1
16228     FE 18 02 F6 | 	mov	arg04, result2
1622c     FF 16 02 F6 | 	mov	arg03, result3
16230     18 4E 05 F1 | 	add	fp, #24
16234     A7 1A 62 FC | 	wrlong	arg05, fp
16238     04 4E 05 F1 | 	add	fp, #4
1623c     A7 18 62 FC | 	wrlong	arg04, fp
16240     04 4E 05 F1 | 	add	fp, #4
16244     A7 16 62 FC | 	wrlong	arg03, fp
16248     20 4E 85 F1 | 	sub	fp, #32
1624c     28 46 BF FD | 	call	#_pop
16250     FD 1A 02 F6 | 	mov	arg05, result1
16254     FE 18 02 F6 | 	mov	arg04, result2
16258     FF 1E 02 F6 | 	mov	local01, result3
1625c     0C 4E 05 F1 | 	add	fp, #12
16260     A7 1A 62 FC | 	wrlong	arg05, fp
16264     04 4E 05 F1 | 	add	fp, #4
16268     A7 18 62 FC | 	wrlong	arg04, fp
1626c     04 4E 05 F1 | 	add	fp, #4
16270     A7 1E 62 FC | 	wrlong	local01, fp
16274     14 4E 85 F1 | 	sub	fp, #20
16278     FC 45 BF FD | 	call	#_pop
1627c     A7 FA 61 FC | 	wrlong	result1, fp
16280     04 4E 05 F1 | 	add	fp, #4
16284     A7 FC 61 FC | 	wrlong	result2, fp
16288     04 4E 05 F1 | 	add	fp, #4
1628c     A7 FE 61 FC | 	wrlong	result3, fp
16290                 | ' 
16290                 | ' t4=pop()
16290                 | ' t3=pop()
16290                 | ' t2=pop()
16290                 | ' t1=pop()
16290                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
16290     FF 1A 02 F6 | 	mov	arg05, result3
16294     08 4E 85 F1 | 	sub	fp, #8
16298     1C 1A 0E F2 | 	cmp	arg05, #28 wz
1629c     08 4E 05 51 |  if_ne	add	fp, #8
162a0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
162a4     08 4E 85 51 |  if_ne	sub	fp, #8
162a8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
162ac     A8 00 90 5D |  if_ne	jmp	#LR__1820
162b0     14 4E 05 F1 | 	add	fp, #20
162b4     A7 1E 02 FB | 	rdlong	local01, fp
162b8     14 4E 85 F1 | 	sub	fp, #20
162bc     1C 1E 0E F2 | 	cmp	local01, #28 wz
162c0     14 4E 05 51 |  if_ne	add	fp, #20
162c4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
162c8     14 4E 85 51 |  if_ne	sub	fp, #20
162cc     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
162d0     84 00 90 5D |  if_ne	jmp	#LR__1820
162d4     20 4E 05 F1 | 	add	fp, #32
162d8     A7 1E 02 FB | 	rdlong	local01, fp
162dc     20 4E 85 F1 | 	sub	fp, #32
162e0     1C 1E 0E F2 | 	cmp	local01, #28 wz
162e4     20 4E 05 51 |  if_ne	add	fp, #32
162e8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
162ec     20 4E 85 51 |  if_ne	sub	fp, #32
162f0     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
162f4     60 00 90 5D |  if_ne	jmp	#LR__1820
162f8     2C 4E 05 F1 | 	add	fp, #44
162fc     A7 1E 02 FB | 	rdlong	local01, fp
16300     2C 4E 85 F1 | 	sub	fp, #44
16304     1C 1E 0E F2 | 	cmp	local01, #28 wz
16308     2C 4E 05 51 |  if_ne	add	fp, #44
1630c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
16310     2C 4E 85 51 |  if_ne	sub	fp, #44
16314     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
16318     3C 00 90 5D |  if_ne	jmp	#LR__1820
1631c     A7 12 02 FB | 	rdlong	arg01, fp
16320     0C 4E 05 F1 | 	add	fp, #12
16324     A7 14 02 FB | 	rdlong	arg02, fp
16328     0C 4E 05 F1 | 	add	fp, #12
1632c     A7 16 02 FB | 	rdlong	arg03, fp
16330     0C 4E 05 F1 | 	add	fp, #12
16334     A7 18 02 FB | 	rdlong	arg04, fp
16338     24 4E 85 F1 | 	sub	fp, #36
1633c     37 00 00 FF 
16340     58 E4 05 F1 | 	add	objptr, ##28248
16344     F2 1A 02 FB | 	rdlong	arg05, objptr
16348     37 00 00 FF 
1634c     58 E4 85 F1 | 	sub	objptr, ##28248
16350     D0 6D B0 FD | 	call	#_hg010b_spin2_frame
16354                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
16354     6C 00 90 FD | 	jmp	#LR__1821
16358                 | LR__1820
16358     A7 12 02 F6 | 	mov	arg01, fp
1635c     58 D0 BF FD | 	call	#_converttoint
16360     FD 20 02 F6 | 	mov	local02, result1
16364     0C 4E 05 F1 | 	add	fp, #12
16368     A7 12 02 F6 | 	mov	arg01, fp
1636c     0C 4E 85 F1 | 	sub	fp, #12
16370     44 D0 BF FD | 	call	#_converttoint
16374     FD 22 02 F6 | 	mov	local03, result1
16378     18 4E 05 F1 | 	add	fp, #24
1637c     A7 12 02 F6 | 	mov	arg01, fp
16380     18 4E 85 F1 | 	sub	fp, #24
16384     30 D0 BF FD | 	call	#_converttoint
16388     FD 1E 02 F6 | 	mov	local01, result1
1638c     24 4E 05 F1 | 	add	fp, #36
16390     A7 12 02 F6 | 	mov	arg01, fp
16394     24 4E 85 F1 | 	sub	fp, #36
16398     1C D0 BF FD | 	call	#_converttoint
1639c     FD 18 02 F6 | 	mov	arg04, result1
163a0     37 00 00 FF 
163a4     58 E4 05 F1 | 	add	objptr, ##28248
163a8     F2 1A 02 FB | 	rdlong	arg05, objptr
163ac     37 00 00 FF 
163b0     58 E4 85 F1 | 	sub	objptr, ##28248
163b4     10 13 02 F6 | 	mov	arg01, local02
163b8     11 15 02 F6 | 	mov	arg02, local03
163bc     0F 17 02 F6 | 	mov	arg03, local01
163c0     60 6D B0 FD | 	call	#_hg010b_spin2_frame
163c4                 | LR__1821
163c4     A7 F0 03 F6 | 	mov	ptra, fp
163c8     B2 00 A0 FD | 	call	#popregs_
163cc                 | _do_frame_ret
163cc     2D 00 64 FD | 	ret
163d0                 | 
163d0                 | ' 
163d0                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
163d0                 | ' 
163d0                 | ' ' ------------------------- Print to the screem
163d0                 | ' 
163d0                 | ' sub do_print  
163d0                 | _do_print
163d0     0A 4A 05 F6 | 	mov	COUNT_, #10
163d4     A8 00 A0 FD | 	call	#pushregs_
163d8     00 24 06 F6 | 	mov	local04, #0
163dc     98 44 BF FD | 	call	#_pop
163e0     FD 26 02 F6 | 	mov	local05, result1
163e4     FE 28 02 F6 | 	mov	local06, result2
163e8     FF 2A 02 F6 | 	mov	local07, result3
163ec     13 1F 02 F6 | 	mov	local01, local05
163f0     14 21 02 F6 | 	mov	local02, local06
163f4     15 23 02 F6 | 	mov	local03, local07
163f8                 | '  
163f8                 | ' r=0
163f8                 | ' t1=pop() 
163f8                 | ' 'print t1.result_type,t1.result.uresult
163f8                 | ' 
163f8                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
163f8     21 22 0E F2 | 	cmp	local03, #33 wz
163fc     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
16400     20 00 90 5D |  if_ne	jmp	#LR__1830
16404     11 25 02 F6 | 	mov	local04, local03
16408     6C 44 BF FD | 	call	#_pop
1640c     FD 26 02 F6 | 	mov	local05, result1
16410     FE 28 02 F6 | 	mov	local06, result2
16414     FF 2A 02 F6 | 	mov	local07, result3
16418     13 1F 02 F6 | 	mov	local01, local05
1641c     14 21 02 F6 | 	mov	local02, local06
16420     15 23 02 F6 | 	mov	local03, local07
16424                 | LR__1830
16424                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
16424     20 22 0E F2 | 	cmp	local03, #32 wz
16428     11 25 02 A6 |  if_e	mov	local04, local03
1642c                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
1642c     FF 22 0E F2 | 	cmp	local03, #255 wz
16430     0C 00 90 5D |  if_ne	jmp	#LR__1831
16434     0F 13 02 F6 | 	mov	arg01, local01
16438     30 42 B0 FD | 	call	#_printerror
1643c     4C 04 90 FD | 	jmp	#LR__1849
16440                 | LR__1831
16440                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
16440     2B 22 0E F2 | 	cmp	local03, #43 wz
16444     14 00 90 5D |  if_ne	jmp	#LR__1832
16448     0F 13 02 F6 | 	mov	arg01, local01
1644c     44 87 BF FD | 	call	#_convertstring
16450     FD 26 02 F6 | 	mov	local05, result1
16454     13 1F 02 F6 | 	mov	local01, local05
16458     1F 22 06 F6 | 	mov	local03, #31
1645c                 | LR__1832
1645c                 | ' 
1645c                 | ' if r=print_mod_comma  then
1645c     21 24 0E F2 | 	cmp	local04, #33 wz
16460     AC 01 90 5D |  if_ne	jmp	#LR__1837
16464                 | '   if t1.result_type=result_int then print t1.result.iresult,
16464     1C 22 0E F2 | 	cmp	local03, #28 wz
16468     64 00 90 5D |  if_ne	jmp	#LR__1833
1646c     00 12 06 F6 | 	mov	arg01, #0
16470     00 E0 B0 FD | 	call	#__system___getiolock_0484
16474     FD 12 02 F6 | 	mov	arg01, result1
16478     98 86 B0 FD | 	call	#__system___lockmem
1647c     00 28 06 F6 | 	mov	local06, #0
16480     00 12 06 F6 | 	mov	arg01, #0
16484     0F 15 02 F6 | 	mov	arg02, local01
16488     00 16 06 F6 | 	mov	arg03, #0
1648c     0A 18 06 F6 | 	mov	arg04, #10
16490     B8 93 B0 FD | 	call	#__system___basic_print_integer
16494     FD 2A 02 F6 | 	mov	local07, result1
16498     14 27 02 F6 | 	mov	local05, local06
1649c     15 27 02 F1 | 	add	local05, local07
164a0     00 2C 06 F6 | 	mov	local08, #0
164a4     00 12 06 F6 | 	mov	arg01, #0
164a8     09 14 06 F6 | 	mov	arg02, #9
164ac     00 16 06 F6 | 	mov	arg03, #0
164b0     FC 92 B0 FD | 	call	#__system___basic_print_char
164b4     FD 2E 02 F6 | 	mov	local09, result1
164b8     FD 26 02 F1 | 	add	local05, result1
164bc     00 12 06 F6 | 	mov	arg01, #0
164c0     B0 DF B0 FD | 	call	#__system___getiolock_0484
164c4     FD 00 68 FC | 	wrlong	#0, result1
164c8     00 FA 05 F6 | 	mov	result1, #0
164cc     00 30 06 F6 | 	mov	local10, #0
164d0                 | LR__1833
164d0                 | '   if t1.result_type=result_uint then print t1.result.uresult,
164d0     1D 22 0E F2 | 	cmp	local03, #29 wz
164d4     64 00 90 5D |  if_ne	jmp	#LR__1834
164d8     00 12 06 F6 | 	mov	arg01, #0
164dc     94 DF B0 FD | 	call	#__system___getiolock_0484
164e0     FD 12 02 F6 | 	mov	arg01, result1
164e4     2C 86 B0 FD | 	call	#__system___lockmem
164e8     00 28 06 F6 | 	mov	local06, #0
164ec     00 12 06 F6 | 	mov	arg01, #0
164f0     0F 15 02 F6 | 	mov	arg02, local01
164f4     00 16 06 F6 | 	mov	arg03, #0
164f8     0A 18 06 F6 | 	mov	arg04, #10
164fc     8C 93 B0 FD | 	call	#__system___basic_print_unsigned
16500     FD 2A 02 F6 | 	mov	local07, result1
16504     14 27 02 F6 | 	mov	local05, local06
16508     15 27 02 F1 | 	add	local05, local07
1650c     00 2C 06 F6 | 	mov	local08, #0
16510     00 12 06 F6 | 	mov	arg01, #0
16514     09 14 06 F6 | 	mov	arg02, #9
16518     00 16 06 F6 | 	mov	arg03, #0
1651c     90 92 B0 FD | 	call	#__system___basic_print_char
16520     FD 2E 02 F6 | 	mov	local09, result1
16524     FD 26 02 F1 | 	add	local05, result1
16528     00 12 06 F6 | 	mov	arg01, #0
1652c     44 DF B0 FD | 	call	#__system___getiolock_0484
16530     FD 00 68 FC | 	wrlong	#0, result1
16534     00 FA 05 F6 | 	mov	result1, #0
16538     00 30 06 F6 | 	mov	local10, #0
1653c                 | LR__1834
1653c                 | '   if t1.result_type=result_float then print t1.result.fresult,
1653c     1E 22 0E F2 | 	cmp	local03, #30 wz
16540     64 00 90 5D |  if_ne	jmp	#LR__1835
16544     00 12 06 F6 | 	mov	arg01, #0
16548     28 DF B0 FD | 	call	#__system___getiolock_0484
1654c     FD 12 02 F6 | 	mov	arg01, result1
16550     C0 85 B0 FD | 	call	#__system___lockmem
16554     00 28 06 F6 | 	mov	local06, #0
16558     00 12 06 F6 | 	mov	arg01, #0
1655c     0F 15 02 F6 | 	mov	arg02, local01
16560     00 16 06 F6 | 	mov	arg03, #0
16564     23 18 06 F6 | 	mov	arg04, #35
16568     08 B7 B0 FD | 	call	#__system___basic_print_float
1656c     FD 2A 02 F6 | 	mov	local07, result1
16570     14 27 02 F6 | 	mov	local05, local06
16574     15 27 02 F1 | 	add	local05, local07
16578     00 2C 06 F6 | 	mov	local08, #0
1657c     00 12 06 F6 | 	mov	arg01, #0
16580     09 14 06 F6 | 	mov	arg02, #9
16584     00 16 06 F6 | 	mov	arg03, #0
16588     24 92 B0 FD | 	call	#__system___basic_print_char
1658c     FD 2E 02 F6 | 	mov	local09, result1
16590     FD 26 02 F1 | 	add	local05, result1
16594     00 12 06 F6 | 	mov	arg01, #0
16598     D8 DE B0 FD | 	call	#__system___getiolock_0484
1659c     FD 00 68 FC | 	wrlong	#0, result1
165a0     00 FA 05 F6 | 	mov	result1, #0
165a4     00 30 06 F6 | 	mov	local10, #0
165a8                 | LR__1835
165a8                 | '   if t1.result_type=result_string then print t1.result.sresult,
165a8     1F 22 0E F2 | 	cmp	local03, #31 wz
165ac     60 00 90 5D |  if_ne	jmp	#LR__1836
165b0     00 12 06 F6 | 	mov	arg01, #0
165b4     BC DE B0 FD | 	call	#__system___getiolock_0484
165b8     FD 12 02 F6 | 	mov	arg01, result1
165bc     54 85 B0 FD | 	call	#__system___lockmem
165c0     00 28 06 F6 | 	mov	local06, #0
165c4     00 12 06 F6 | 	mov	arg01, #0
165c8     0F 15 02 F6 | 	mov	arg02, local01
165cc     00 16 06 F6 | 	mov	arg03, #0
165d0     34 92 B0 FD | 	call	#__system___basic_print_string
165d4     FD 2A 02 F6 | 	mov	local07, result1
165d8     14 27 02 F6 | 	mov	local05, local06
165dc     15 27 02 F1 | 	add	local05, local07
165e0     00 2C 06 F6 | 	mov	local08, #0
165e4     00 12 06 F6 | 	mov	arg01, #0
165e8     09 14 06 F6 | 	mov	arg02, #9
165ec     00 16 06 F6 | 	mov	arg03, #0
165f0     BC 91 B0 FD | 	call	#__system___basic_print_char
165f4     FD 2E 02 F6 | 	mov	local09, result1
165f8     FD 26 02 F1 | 	add	local05, result1
165fc     00 12 06 F6 | 	mov	arg01, #0
16600     70 DE B0 FD | 	call	#__system___getiolock_0484
16604     FD 00 68 FC | 	wrlong	#0, result1
16608     00 FA 05 F6 | 	mov	result1, #0
1660c     00 30 06 F6 | 	mov	local10, #0
16610                 | LR__1836
16610                 | LR__1837
16610                 | ' if r=print_mod_semicolon then 
16610     22 24 0E F2 | 	cmp	local04, #34 wz
16614     1C 01 90 5D |  if_ne	jmp	#LR__1842
16618                 | '   if t1.result_type=result_int then print t1.result.iresult;
16618     1C 22 0E F2 | 	cmp	local03, #28 wz
1661c     50 00 90 5D |  if_ne	jmp	#LR__1838
16620     00 12 06 F6 | 	mov	arg01, #0
16624     4C DE B0 FD | 	call	#__system___getiolock_0484
16628     FD 12 02 F6 | 	mov	arg01, result1
1662c     E4 84 B0 FD | 	call	#__system___lockmem
16630     00 28 06 F6 | 	mov	local06, #0
16634     00 30 06 F6 | 	mov	local10, #0
16638     0A 2C 06 F6 | 	mov	local08, #10
1663c     00 12 06 F6 | 	mov	arg01, #0
16640     0F 15 02 F6 | 	mov	arg02, local01
16644     00 16 06 F6 | 	mov	arg03, #0
16648     0A 18 06 F6 | 	mov	arg04, #10
1664c     FC 91 B0 FD | 	call	#__system___basic_print_integer
16650     FD 2A 02 F6 | 	mov	local07, result1
16654     14 27 02 F6 | 	mov	local05, local06
16658     15 27 02 F1 | 	add	local05, local07
1665c     00 12 06 F6 | 	mov	arg01, #0
16660     10 DE B0 FD | 	call	#__system___getiolock_0484
16664     FD 00 68 FC | 	wrlong	#0, result1
16668     00 FA 05 F6 | 	mov	result1, #0
1666c     00 2E 06 F6 | 	mov	local09, #0
16670                 | LR__1838
16670                 | '   if t1.result_type=result_uint then print t1.result.uresult;
16670     1D 22 0E F2 | 	cmp	local03, #29 wz
16674     50 00 90 5D |  if_ne	jmp	#LR__1839
16678     00 12 06 F6 | 	mov	arg01, #0
1667c     F4 DD B0 FD | 	call	#__system___getiolock_0484
16680     FD 12 02 F6 | 	mov	arg01, result1
16684     8C 84 B0 FD | 	call	#__system___lockmem
16688     00 28 06 F6 | 	mov	local06, #0
1668c     00 30 06 F6 | 	mov	local10, #0
16690     0A 2C 06 F6 | 	mov	local08, #10
16694     00 12 06 F6 | 	mov	arg01, #0
16698     0F 15 02 F6 | 	mov	arg02, local01
1669c     00 16 06 F6 | 	mov	arg03, #0
166a0     0A 18 06 F6 | 	mov	arg04, #10
166a4     E4 91 B0 FD | 	call	#__system___basic_print_unsigned
166a8     FD 2A 02 F6 | 	mov	local07, result1
166ac     14 27 02 F6 | 	mov	local05, local06
166b0     15 27 02 F1 | 	add	local05, local07
166b4     00 12 06 F6 | 	mov	arg01, #0
166b8     B8 DD B0 FD | 	call	#__system___getiolock_0484
166bc     FD 00 68 FC | 	wrlong	#0, result1
166c0     00 FA 05 F6 | 	mov	result1, #0
166c4     00 2E 06 F6 | 	mov	local09, #0
166c8                 | LR__1839
166c8                 | '   if t1.result_type=result_float then print t1.result.fresult;
166c8     1E 22 0E F2 | 	cmp	local03, #30 wz
166cc     30 00 90 5D |  if_ne	jmp	#LR__1840
166d0     00 12 06 F6 | 	mov	arg01, #0
166d4     9C DD B0 FD | 	call	#__system___getiolock_0484
166d8     FD 12 02 F6 | 	mov	arg01, result1
166dc     34 84 B0 FD | 	call	#__system___lockmem
166e0     00 12 06 F6 | 	mov	arg01, #0
166e4     0F 15 02 F6 | 	mov	arg02, local01
166e8     00 16 06 F6 | 	mov	arg03, #0
166ec     23 18 06 F6 | 	mov	arg04, #35
166f0     80 B5 B0 FD | 	call	#__system___basic_print_float
166f4     00 12 06 F6 | 	mov	arg01, #0
166f8     78 DD B0 FD | 	call	#__system___getiolock_0484
166fc     FD 00 68 FC | 	wrlong	#0, result1
16700                 | LR__1840
16700                 | '   if t1.result_type=result_string then print t1.result.sresult;
16700     1F 22 0E F2 | 	cmp	local03, #31 wz
16704     2C 00 90 5D |  if_ne	jmp	#LR__1841
16708     00 12 06 F6 | 	mov	arg01, #0
1670c     64 DD B0 FD | 	call	#__system___getiolock_0484
16710     FD 12 02 F6 | 	mov	arg01, result1
16714     FC 83 B0 FD | 	call	#__system___lockmem
16718     00 12 06 F6 | 	mov	arg01, #0
1671c     0F 15 02 F6 | 	mov	arg02, local01
16720     00 16 06 F6 | 	mov	arg03, #0
16724     E0 90 B0 FD | 	call	#__system___basic_print_string
16728     00 12 06 F6 | 	mov	arg01, #0
1672c     44 DD B0 FD | 	call	#__system___getiolock_0484
16730     FD 00 68 FC | 	wrlong	#0, result1
16734                 | LR__1841
16734                 | LR__1842
16734                 | ' if r=0 then 
16734     00 24 0E F2 | 	cmp	local04, #0 wz
16738     1C 01 90 5D |  if_ne	jmp	#LR__1847
1673c                 | '   if t1.result_type=result_int then print t1.result.iresult
1673c     1C 22 0E F2 | 	cmp	local03, #28 wz
16740     40 00 90 5D |  if_ne	jmp	#LR__1843
16744     00 12 06 F6 | 	mov	arg01, #0
16748     28 DD B0 FD | 	call	#__system___getiolock_0484
1674c     FD 12 02 F6 | 	mov	arg01, result1
16750     C0 83 B0 FD | 	call	#__system___lockmem
16754     00 12 06 F6 | 	mov	arg01, #0
16758     0F 15 02 F6 | 	mov	arg02, local01
1675c     00 16 06 F6 | 	mov	arg03, #0
16760     0A 18 06 F6 | 	mov	arg04, #10
16764     E4 90 B0 FD | 	call	#__system___basic_print_integer
16768     00 12 06 F6 | 	mov	arg01, #0
1676c     0A 14 06 F6 | 	mov	arg02, #10
16770     00 16 06 F6 | 	mov	arg03, #0
16774     38 90 B0 FD | 	call	#__system___basic_print_char
16778     00 12 06 F6 | 	mov	arg01, #0
1677c     F4 DC B0 FD | 	call	#__system___getiolock_0484
16780     FD 00 68 FC | 	wrlong	#0, result1
16784                 | LR__1843
16784                 | '   if t1.result_type=result_uint then print t1.result.uresult
16784     1D 22 0E F2 | 	cmp	local03, #29 wz
16788     40 00 90 5D |  if_ne	jmp	#LR__1844
1678c     00 12 06 F6 | 	mov	arg01, #0
16790     E0 DC B0 FD | 	call	#__system___getiolock_0484
16794     FD 12 02 F6 | 	mov	arg01, result1
16798     78 83 B0 FD | 	call	#__system___lockmem
1679c     00 12 06 F6 | 	mov	arg01, #0
167a0     0F 15 02 F6 | 	mov	arg02, local01
167a4     00 16 06 F6 | 	mov	arg03, #0
167a8     0A 18 06 F6 | 	mov	arg04, #10
167ac     DC 90 B0 FD | 	call	#__system___basic_print_unsigned
167b0     00 12 06 F6 | 	mov	arg01, #0
167b4     0A 14 06 F6 | 	mov	arg02, #10
167b8     00 16 06 F6 | 	mov	arg03, #0
167bc     F0 8F B0 FD | 	call	#__system___basic_print_char
167c0     00 12 06 F6 | 	mov	arg01, #0
167c4     AC DC B0 FD | 	call	#__system___getiolock_0484
167c8     FD 00 68 FC | 	wrlong	#0, result1
167cc                 | LR__1844
167cc                 | '   if t1.result_type=result_float then print t1.result.fresult
167cc     1E 22 0E F2 | 	cmp	local03, #30 wz
167d0     40 00 90 5D |  if_ne	jmp	#LR__1845
167d4     00 12 06 F6 | 	mov	arg01, #0
167d8     98 DC B0 FD | 	call	#__system___getiolock_0484
167dc     FD 12 02 F6 | 	mov	arg01, result1
167e0     30 83 B0 FD | 	call	#__system___lockmem
167e4     00 12 06 F6 | 	mov	arg01, #0
167e8     0F 15 02 F6 | 	mov	arg02, local01
167ec     00 16 06 F6 | 	mov	arg03, #0
167f0     23 18 06 F6 | 	mov	arg04, #35
167f4     7C B4 B0 FD | 	call	#__system___basic_print_float
167f8     00 12 06 F6 | 	mov	arg01, #0
167fc     0A 14 06 F6 | 	mov	arg02, #10
16800     00 16 06 F6 | 	mov	arg03, #0
16804     A8 8F B0 FD | 	call	#__system___basic_print_char
16808     00 12 06 F6 | 	mov	arg01, #0
1680c     64 DC B0 FD | 	call	#__system___getiolock_0484
16810     FD 00 68 FC | 	wrlong	#0, result1
16814                 | LR__1845
16814                 | '   if t1.result_type=result_string then print t1.result.sresult
16814     1F 22 0E F2 | 	cmp	local03, #31 wz
16818     3C 00 90 5D |  if_ne	jmp	#LR__1846
1681c     00 12 06 F6 | 	mov	arg01, #0
16820     50 DC B0 FD | 	call	#__system___getiolock_0484
16824     FD 12 02 F6 | 	mov	arg01, result1
16828     E8 82 B0 FD | 	call	#__system___lockmem
1682c     00 12 06 F6 | 	mov	arg01, #0
16830     0F 15 02 F6 | 	mov	arg02, local01
16834     00 16 06 F6 | 	mov	arg03, #0
16838     CC 8F B0 FD | 	call	#__system___basic_print_string
1683c     00 12 06 F6 | 	mov	arg01, #0
16840     0A 14 06 F6 | 	mov	arg02, #10
16844     00 16 06 F6 | 	mov	arg03, #0
16848     64 8F B0 FD | 	call	#__system___basic_print_char
1684c     00 12 06 F6 | 	mov	arg01, #0
16850     20 DC B0 FD | 	call	#__system___getiolock_0484
16854     FD 00 68 FC | 	wrlong	#0, result1
16858                 | LR__1846
16858                 | LR__1847
16858                 | ' if r=print_mod_empty then print
16858     20 24 0E F2 | 	cmp	local04, #32 wz
1685c     2C 00 90 5D |  if_ne	jmp	#LR__1848
16860     00 12 06 F6 | 	mov	arg01, #0
16864     0C DC B0 FD | 	call	#__system___getiolock_0484
16868     FD 12 02 F6 | 	mov	arg01, result1
1686c     A4 82 B0 FD | 	call	#__system___lockmem
16870     00 12 06 F6 | 	mov	arg01, #0
16874     0A 14 06 F6 | 	mov	arg02, #10
16878     00 16 06 F6 | 	mov	arg03, #0
1687c     30 8F B0 FD | 	call	#__system___basic_print_char
16880     00 12 06 F6 | 	mov	arg01, #0
16884     EC DB B0 FD | 	call	#__system___getiolock_0484
16888     FD 00 68 FC | 	wrlong	#0, result1
1688c                 | LR__1848
1688c                 | LR__1849
1688c     A7 F0 03 F6 | 	mov	ptra, fp
16890     B2 00 A0 FD | 	call	#popregs_
16894                 | _do_print_ret
16894     2D 00 64 FD | 	ret
16898                 | 
16898                 | ' 
16898                 | ' 
16898                 | ' sub do_paper
16898                 | _do_paper
16898     03 4A 05 F6 | 	mov	COUNT_, #3
1689c     A8 00 A0 FD | 	call	#pushregs_
168a0     D4 3F BF FD | 	call	#_pop
168a4     FD 1E 02 F6 | 	mov	local01, result1
168a8     FE 20 02 F6 | 	mov	local02, result2
168ac     FF 22 02 F6 | 	mov	local03, result3
168b0                 | ' t1=pop() 
168b0                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
168b0     1E 22 0E F2 | 	cmp	local03, #30 wz
168b4     10 00 90 5D |  if_ne	jmp	#LR__1850
168b8     0F 13 02 F6 | 	mov	arg01, local01
168bc     00 14 06 F6 | 	mov	arg02, #0
168c0     60 B2 B0 FD | 	call	#__system___float_tointeger
168c4     FD 1E 02 F6 | 	mov	local01, result1
168c8                 | LR__1850
168c8                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
168c8     1F 22 0E F2 | 	cmp	local03, #31 wz
168cc     18 00 90 5D |  if_ne	jmp	#LR__1851
168d0     0F 13 02 F6 | 	mov	arg01, local01
168d4     6C B5 B0 FD | 	call	#__system____builtin_atof
168d8     FD 12 02 F6 | 	mov	arg01, result1
168dc     00 14 06 F6 | 	mov	arg02, #0
168e0     40 B2 B0 FD | 	call	#__system___float_tointeger
168e4     FD 1E 02 F6 | 	mov	local01, result1
168e8                 | LR__1851
168e8     37 00 00 FF 
168ec     68 E4 05 F1 | 	add	objptr, ##28264
168f0     F2 1E 62 FC | 	wrlong	local01, objptr
168f4     04 E4 05 F1 | 	add	objptr, #4
168f8     F2 12 02 FB | 	rdlong	arg01, objptr
168fc                 | ' 
168fc                 | ' write_color:=ff
168fc     37 00 00 FF 
16900     2B E4 85 F1 | 	sub	objptr, ##28203
16904     F2 12 62 FC | 	wrlong	arg01, objptr
16908                 | ' write_background:=bb
16908     04 E4 05 F1 | 	add	objptr, #4
1690c     F2 1E 62 FC | 	wrlong	local01, objptr
16910     45 E4 85 F1 | 	sub	objptr, #69
16914     A7 F0 03 F6 | 	mov	ptra, fp
16918     B2 00 A0 FD | 	call	#popregs_
1691c                 | _do_paper_ret
1691c     2D 00 64 FD | 	ret
16920                 | 
16920                 | ' 
16920                 | ' sub do_ink
16920                 | _do_ink
16920     03 4A 05 F6 | 	mov	COUNT_, #3
16924     A8 00 A0 FD | 	call	#pushregs_
16928     4C 3F BF FD | 	call	#_pop
1692c     FD 1E 02 F6 | 	mov	local01, result1
16930     FE 20 02 F6 | 	mov	local02, result2
16934     FF 22 02 F6 | 	mov	local03, result3
16938                 | ' t1=pop() 
16938                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16938     1E 22 0E F2 | 	cmp	local03, #30 wz
1693c     10 00 90 5D |  if_ne	jmp	#LR__1860
16940     0F 13 02 F6 | 	mov	arg01, local01
16944     00 14 06 F6 | 	mov	arg02, #0
16948     D8 B1 B0 FD | 	call	#__system___float_tointeger
1694c     FD 1E 02 F6 | 	mov	local01, result1
16950                 | LR__1860
16950                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16950     1F 22 0E F2 | 	cmp	local03, #31 wz
16954     18 00 90 5D |  if_ne	jmp	#LR__1861
16958     0F 13 02 F6 | 	mov	arg01, local01
1695c     E4 B4 B0 FD | 	call	#__system____builtin_atof
16960     FD 12 02 F6 | 	mov	arg01, result1
16964     00 14 06 F6 | 	mov	arg02, #0
16968     B8 B1 B0 FD | 	call	#__system___float_tointeger
1696c     FD 1E 02 F6 | 	mov	local01, result1
16970                 | LR__1861
16970     37 00 00 FF 
16974     6C E4 05 F1 | 	add	objptr, ##28268
16978     F2 1E 62 FC | 	wrlong	local01, objptr
1697c     04 E4 85 F1 | 	sub	objptr, #4
16980     F2 14 02 FB | 	rdlong	arg02, objptr
16984                 | ' 
16984                 | ' write_color:=ff
16984     37 00 00 FF 
16988     27 E4 85 F1 | 	sub	objptr, ##28199
1698c     F2 1E 62 FC | 	wrlong	local01, objptr
16990                 | ' write_background:=bb
16990     04 E4 05 F1 | 	add	objptr, #4
16994     F2 14 62 FC | 	wrlong	arg02, objptr
16998     37 00 00 FF 
1699c     27 E4 05 F1 | 	add	objptr, ##28199
169a0     F2 12 02 FB | 	rdlong	arg01, objptr
169a4     37 00 00 FF 
169a8     6C E4 85 F1 | 	sub	objptr, ##28268
169ac     28 59 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
169b0     A7 F0 03 F6 | 	mov	ptra, fp
169b4     B2 00 A0 FD | 	call	#popregs_
169b8                 | _do_ink_ret
169b8     2D 00 64 FD | 	ret
169bc                 | 
169bc                 | ' 
169bc                 | ' 
169bc                 | ' sub do_font
169bc                 | _do_font
169bc     03 4A 05 F6 | 	mov	COUNT_, #3
169c0     A8 00 A0 FD | 	call	#pushregs_
169c4     B0 3E BF FD | 	call	#_pop
169c8     FD 1E 02 F6 | 	mov	local01, result1
169cc     FE 20 02 F6 | 	mov	local02, result2
169d0     FF 22 02 F6 | 	mov	local03, result3
169d4                 | ' t1=pop() 
169d4                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
169d4     1E 22 0E F2 | 	cmp	local03, #30 wz
169d8     10 00 90 5D |  if_ne	jmp	#LR__1870
169dc     0F 13 02 F6 | 	mov	arg01, local01
169e0     00 14 06 F6 | 	mov	arg02, #0
169e4     3C B1 B0 FD | 	call	#__system___float_tointeger
169e8     FD 1E 02 F6 | 	mov	local01, result1
169ec                 | LR__1870
169ec                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
169ec     1F 22 0E F2 | 	cmp	local03, #31 wz
169f0     18 00 90 5D |  if_ne	jmp	#LR__1871
169f4     0F 13 02 F6 | 	mov	arg01, local01
169f8     48 B4 B0 FD | 	call	#__system____builtin_atof
169fc     FD 12 02 F6 | 	mov	arg01, result1
16a00     00 14 06 F6 | 	mov	arg02, #0
16a04     1C B1 B0 FD | 	call	#__system___float_tointeger
16a08     FD 1E 02 F6 | 	mov	local01, result1
16a0c                 | LR__1871
16a0c     37 00 00 FF 
16a10     70 E4 05 F1 | 	add	objptr, ##28272
16a14     F2 1E 62 FC | 	wrlong	local01, objptr
16a18     37 00 00 FF 
16a1c     70 E4 85 F1 | 	sub	objptr, ##28272
16a20     02 1E 66 F0 | 	shl	local01, #2
16a24     0F 13 02 F6 | 	mov	arg01, local01
16a28     F0 68 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16a2c     A7 F0 03 F6 | 	mov	ptra, fp
16a30     B2 00 A0 FD | 	call	#popregs_
16a34                 | _do_font_ret
16a34     2D 00 64 FD | 	ret
16a38                 | 
16a38                 | ' 
16a38                 | ' sub do_mode
16a38                 | _do_mode
16a38     05 4A 05 F6 | 	mov	COUNT_, #5
16a3c     A8 00 A0 FD | 	call	#pushregs_
16a40     34 3E BF FD | 	call	#_pop
16a44     FD 1E 02 F6 | 	mov	local01, result1
16a48     FE 20 02 F6 | 	mov	local02, result2
16a4c     FF 22 02 F6 | 	mov	local03, result3
16a50                 | ' t1=pop() 
16a50                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16a50     1E 22 0E F2 | 	cmp	local03, #30 wz
16a54     10 00 90 5D |  if_ne	jmp	#LR__1880
16a58     0F 13 02 F6 | 	mov	arg01, local01
16a5c     00 14 06 F6 | 	mov	arg02, #0
16a60     C0 B0 B0 FD | 	call	#__system___float_tointeger
16a64     FD 1E 02 F6 | 	mov	local01, result1
16a68                 | LR__1880
16a68                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16a68     1F 22 0E F2 | 	cmp	local03, #31 wz
16a6c     18 00 90 5D |  if_ne	jmp	#LR__1881
16a70     0F 13 02 F6 | 	mov	arg01, local01
16a74     CC B3 B0 FD | 	call	#__system____builtin_atof
16a78     FD 12 02 F6 | 	mov	arg01, result1
16a7c     00 14 06 F6 | 	mov	arg02, #0
16a80     A0 B0 B0 FD | 	call	#__system___float_tointeger
16a84     FD 1E 02 F6 | 	mov	local01, result1
16a88                 | LR__1881
16a88                 | ' select case t1.result.iresult
16a88     0F 25 02 F6 | 	mov	local04, local01
16a8c     05 24 26 F3 | 	fle	local04, #5
16a90     30 24 62 FD | 	jmprel	local04
16a94                 | LR__1882
16a94     14 00 90 FD | 	jmp	#LR__1883
16a98     A8 00 90 FD | 	jmp	#LR__1884
16a9c     10 01 90 FD | 	jmp	#LR__1885
16aa0     78 01 90 FD | 	jmp	#LR__1886
16aa4     E0 01 90 FD | 	jmp	#LR__1887
16aa8     70 02 90 FD | 	jmp	#LR__1888
16aac                 | LR__1883
16aac     37 00 00 FF 
16ab0     70 E4 05 F1 | 	add	objptr, ##28272
16ab4     F2 02 68 FC | 	wrlong	#1, objptr
16ab8     04 E4 85 F1 | 	sub	objptr, #4
16abc     F2 34 69 FC | 	wrlong	#154, objptr
16ac0     21 00 00 FF 
16ac4     B4 E4 05 F1 | 	add	objptr, ##17076
16ac8     F2 02 68 FC | 	wrlong	#1, objptr
16acc     21 00 00 FF 
16ad0     B8 E4 85 F1 | 	sub	objptr, ##17080
16ad4     F2 26 69 FC | 	wrlong	#147, objptr
16ad8     37 00 00 FF 
16adc     68 E4 85 F1 | 	sub	objptr, ##28264
16ae0     04 12 06 F6 | 	mov	arg01, #4
16ae4     34 68 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16ae8     37 00 00 FF 
16aec     6C E4 05 F1 | 	add	objptr, ##28268
16af0     F2 12 02 FB | 	rdlong	arg01, objptr
16af4     04 E4 85 F1 | 	sub	objptr, #4
16af8     F2 14 02 FB | 	rdlong	arg02, objptr
16afc                 | ' 
16afc                 | ' write_color:=ff
16afc     37 00 00 FF 
16b00     27 E4 85 F1 | 	sub	objptr, ##28199
16b04     F2 12 62 FC | 	wrlong	arg01, objptr
16b08                 | ' write_background:=bb
16b08     04 E4 05 F1 | 	add	objptr, #4
16b0c     F2 14 62 FC | 	wrlong	arg02, objptr
16b10     01 00 00 FF 
16b14     00 EA 05 F1 | 	add	ptr__dat__, ##512
16b18     59 00 00 FF 
16b1c     7F E5 05 F1 | 	add	objptr, ##45951
16b20     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
16b24     04 E4 85 F1 | 	sub	objptr, #4
16b28     03 00 80 FF 
16b2c     F2 30 69 FC | 	wrlong	##1688, objptr
16b30     59 00 00 FF 
16b34     C0 E5 85 F1 | 	sub	objptr, ##46016
16b38     01 00 00 FF 
16b3c     00 EA 85 F1 | 	sub	ptr__dat__, ##512
16b40     D8 01 90 FD | 	jmp	#LR__1888
16b44                 | LR__1884
16b44     37 00 00 FF 
16b48     70 E4 05 F1 | 	add	objptr, ##28272
16b4c     F2 00 68 FC | 	wrlong	#0, objptr
16b50     04 E4 85 F1 | 	sub	objptr, #4
16b54     F2 2E 68 FC | 	wrlong	#23, objptr
16b58     21 00 00 FF 
16b5c     B4 E4 05 F1 | 	add	objptr, ##17076
16b60     F2 00 68 FC | 	wrlong	#0, objptr
16b64     21 00 00 FF 
16b68     B8 E4 85 F1 | 	sub	objptr, ##17080
16b6c     F2 00 68 FC | 	wrlong	#0, objptr
16b70     37 00 00 FF 
16b74     68 E4 85 F1 | 	sub	objptr, ##28264
16b78     00 12 06 F6 | 	mov	arg01, #0
16b7c     9C 67 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16b80     37 00 00 FF 
16b84     6C E4 05 F1 | 	add	objptr, ##28268
16b88     F2 12 02 FB | 	rdlong	arg01, objptr
16b8c     04 E4 85 F1 | 	sub	objptr, #4
16b90     F2 14 02 FB | 	rdlong	arg02, objptr
16b94                 | ' 
16b94                 | ' write_color:=ff
16b94     37 00 00 FF 
16b98     27 E4 85 F1 | 	sub	objptr, ##28199
16b9c     F2 12 62 FC | 	wrlong	arg01, objptr
16ba0                 | ' write_background:=bb
16ba0     04 E4 05 F1 | 	add	objptr, #4
16ba4     F2 14 62 FC | 	wrlong	arg02, objptr
16ba8     45 E4 85 F1 | 	sub	objptr, #69
16bac     6C 01 90 FD | 	jmp	#LR__1888
16bb0                 | LR__1885
16bb0     37 00 00 FF 
16bb4     70 E4 05 F1 | 	add	objptr, ##28272
16bb8     F2 00 68 FC | 	wrlong	#0, objptr
16bbc     04 E4 85 F1 | 	sub	objptr, #4
16bc0     F2 6A 69 FC | 	wrlong	#181, objptr
16bc4     21 00 00 FF 
16bc8     B4 E4 05 F1 | 	add	objptr, ##17076
16bcc     F2 00 68 FC | 	wrlong	#0, objptr
16bd0     21 00 00 FF 
16bd4     B8 E4 85 F1 | 	sub	objptr, ##17080
16bd8     F2 00 68 FC | 	wrlong	#0, objptr
16bdc     37 00 00 FF 
16be0     68 E4 85 F1 | 	sub	objptr, ##28264
16be4     00 12 06 F6 | 	mov	arg01, #0
16be8     30 67 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16bec     37 00 00 FF 
16bf0     6C E4 05 F1 | 	add	objptr, ##28268
16bf4     F2 12 02 FB | 	rdlong	arg01, objptr
16bf8     04 E4 85 F1 | 	sub	objptr, #4
16bfc     F2 14 02 FB | 	rdlong	arg02, objptr
16c00                 | ' 
16c00                 | ' write_color:=ff
16c00     37 00 00 FF 
16c04     27 E4 85 F1 | 	sub	objptr, ##28199
16c08     F2 12 62 FC | 	wrlong	arg01, objptr
16c0c                 | ' write_background:=bb
16c0c     04 E4 05 F1 | 	add	objptr, #4
16c10     F2 14 62 FC | 	wrlong	arg02, objptr
16c14     45 E4 85 F1 | 	sub	objptr, #69
16c18     00 01 90 FD | 	jmp	#LR__1888
16c1c                 | LR__1886
16c1c     37 00 00 FF 
16c20     70 E4 05 F1 | 	add	objptr, ##28272
16c24     F2 00 68 FC | 	wrlong	#0, objptr
16c28     04 E4 85 F1 | 	sub	objptr, #4
16c2c     F2 1E 68 FC | 	wrlong	#15, objptr
16c30     21 00 00 FF 
16c34     B4 E4 05 F1 | 	add	objptr, ##17076
16c38     F2 00 68 FC | 	wrlong	#0, objptr
16c3c     21 00 00 FF 
16c40     B8 E4 85 F1 | 	sub	objptr, ##17080
16c44     F2 00 68 FC | 	wrlong	#0, objptr
16c48     37 00 00 FF 
16c4c     68 E4 85 F1 | 	sub	objptr, ##28264
16c50     00 12 06 F6 | 	mov	arg01, #0
16c54     C4 66 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16c58     37 00 00 FF 
16c5c     6C E4 05 F1 | 	add	objptr, ##28268
16c60     F2 12 02 FB | 	rdlong	arg01, objptr
16c64     04 E4 85 F1 | 	sub	objptr, #4
16c68     F2 14 02 FB | 	rdlong	arg02, objptr
16c6c                 | ' 
16c6c                 | ' write_color:=ff
16c6c     37 00 00 FF 
16c70     27 E4 85 F1 | 	sub	objptr, ##28199
16c74     F2 12 62 FC | 	wrlong	arg01, objptr
16c78                 | ' write_background:=bb
16c78     04 E4 05 F1 | 	add	objptr, #4
16c7c     F2 14 62 FC | 	wrlong	arg02, objptr
16c80     45 E4 85 F1 | 	sub	objptr, #69
16c84     94 00 90 FD | 	jmp	#LR__1888
16c88                 | LR__1887
16c88     37 00 00 FF 
16c8c     70 E4 05 F1 | 	add	objptr, ##28272
16c90     F2 02 68 FC | 	wrlong	#1, objptr
16c94     04 E4 85 F1 | 	sub	objptr, #4
16c98     F2 02 68 FC | 	wrlong	#1, objptr
16c9c     21 00 00 FF 
16ca0     B4 E4 05 F1 | 	add	objptr, ##17076
16ca4     F2 02 68 FC | 	wrlong	#1, objptr
16ca8     21 00 00 FF 
16cac     B8 E4 85 F1 | 	sub	objptr, ##17080
16cb0     F2 1C 68 FC | 	wrlong	#14, objptr
16cb4     37 00 00 FF 
16cb8     68 E4 85 F1 | 	sub	objptr, ##28264
16cbc     04 12 06 F6 | 	mov	arg01, #4
16cc0     58 66 B0 FD | 	call	#_hg010b_spin2_setfontfamily
16cc4     37 00 00 FF 
16cc8     6C E4 05 F1 | 	add	objptr, ##28268
16ccc     F2 12 02 FB | 	rdlong	arg01, objptr
16cd0     04 E4 85 F1 | 	sub	objptr, #4
16cd4     F2 14 02 FB | 	rdlong	arg02, objptr
16cd8                 | ' 
16cd8                 | ' write_color:=ff
16cd8     37 00 00 FF 
16cdc     27 E4 85 F1 | 	sub	objptr, ##28199
16ce0     F2 12 62 FC | 	wrlong	arg01, objptr
16ce4                 | ' write_background:=bb
16ce4     04 E4 05 F1 | 	add	objptr, #4
16ce8     F2 14 62 FC | 	wrlong	arg02, objptr
16cec     07 00 00 FF 
16cf0     8A EB 05 F1 | 	add	ptr__dat__, ##3978
16cf4     59 00 00 FF 
16cf8     7F E5 05 F1 | 	add	objptr, ##45951
16cfc     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
16d00     04 E4 85 F1 | 	sub	objptr, #4
16d04     03 00 80 FF 
16d08     F2 30 69 FC | 	wrlong	##1688, objptr
16d0c     59 00 00 FF 
16d10     C0 E5 85 F1 | 	sub	objptr, ##46016
16d14     07 00 00 FF 
16d18     8A EB 85 F1 | 	sub	ptr__dat__, ##3978
16d1c                 | LR__1888
16d1c     59 00 00 FF 
16d20     BC E5 05 F1 | 	add	objptr, ##46012
16d24     F2 1E 62 FC | 	wrlong	local01, objptr
16d28     04 E4 85 F1 | 	sub	objptr, #4
16d2c     F2 12 02 FB | 	rdlong	arg01, objptr
16d30     16 00 00 FF 
16d34     2C E5 85 F1 | 	sub	objptr, ##11564
16d38     F2 26 02 FB | 	rdlong	local05, objptr
16d3c     43 00 00 FF 
16d40     8C E4 85 F1 | 	sub	objptr, ##34444
16d44     13 13 82 F1 | 	sub	arg01, local05
16d48     00 14 06 F6 | 	mov	arg02, #0
16d4c     0A 16 06 F6 | 	mov	arg03, #10
16d50     24 A0 B0 FD | 	call	#__system__Number_S
16d54     FD 12 02 F6 | 	mov	arg01, result1
16d58     74 01 00 FF 
16d5c     0E 14 06 F6 | 	mov	arg02, ##@LR__5183
16d60     0C 7E B0 FD | 	call	#__system___string_concat
16d64     58 00 00 FF 
16d68     1C E5 05 F1 | 	add	objptr, ##45340
16d6c     F2 FA 61 FC | 	wrlong	result1, objptr
16d70     21 00 00 FF 
16d74     B0 E4 85 F1 | 	sub	objptr, ##17072
16d78     F2 12 02 FB | 	rdlong	arg01, objptr
16d7c     04 E4 85 F1 | 	sub	objptr, #4
16d80     F2 14 02 FB | 	rdlong	arg02, objptr
16d84     37 00 00 FF 
16d88     68 E4 85 F1 | 	sub	objptr, ##28264
16d8c     DC 66 B0 FD | 	call	#_hg010b_spin2_cls
16d90     74 01 00 FF 
16d94     20 12 06 F6 | 	mov	arg01, ##@LR__5184
16d98                 | ' 
16d98                 | ' write(text)
16d98     90 6A B0 FD | 	call	#_hg010b_spin2_write
16d9c                 | ' crlf
16d9c     58 6D B0 FD | 	call	#_hg010b_spin2_crlf
16da0     18 00 00 FF 
16da4     4C EB 05 F1 | 	add	ptr__dat__, ##12620
16da8     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
16dac     18 00 00 FF 
16db0     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
16db4                 | ' 
16db4                 | ' write(text)
16db4     74 6A B0 FD | 	call	#_hg010b_spin2_write
16db8                 | ' crlf
16db8     3C 6D B0 FD | 	call	#_hg010b_spin2_crlf
16dbc     58 00 00 FF 
16dc0     1C E5 05 F1 | 	add	objptr, ##45340
16dc4     F2 12 02 FB | 	rdlong	arg01, objptr
16dc8     58 00 00 FF 
16dcc     1C E5 85 F1 | 	sub	objptr, ##45340
16dd0                 | ' 
16dd0                 | ' write(text)
16dd0     58 6A B0 FD | 	call	#_hg010b_spin2_write
16dd4                 | ' crlf
16dd4     20 6D B0 FD | 	call	#_hg010b_spin2_crlf
16dd8     A7 F0 03 F6 | 	mov	ptra, fp
16ddc     B2 00 A0 FD | 	call	#popregs_
16de0                 | _do_mode_ret
16de0     2D 00 64 FD | 	ret
16de4                 | 
16de4                 | ' 
16de4                 | ' sub do_setwave
16de4                 | _do_setwave
16de4     02 4A 05 F6 | 	mov	COUNT_, #2
16de8     A8 00 A0 FD | 	call	#pushregs_
16dec     18 F0 07 F1 | 	add	ptra, #24
16df0     84 3A BF FD | 	call	#_pop
16df4     FD 12 02 F6 | 	mov	arg01, result1
16df8     FE 1E 02 F6 | 	mov	local01, result2
16dfc     FF 20 02 F6 | 	mov	local02, result3
16e00     A7 12 62 FC | 	wrlong	arg01, fp
16e04     04 4E 05 F1 | 	add	fp, #4
16e08     A7 1E 62 FC | 	wrlong	local01, fp
16e0c     04 4E 05 F1 | 	add	fp, #4
16e10     A7 20 62 FC | 	wrlong	local02, fp
16e14     08 4E 85 F1 | 	sub	fp, #8
16e18     5C 3A BF FD | 	call	#_pop
16e1c     FD 20 02 F6 | 	mov	local02, result1
16e20     0C 4E 05 F1 | 	add	fp, #12
16e24     A7 20 62 FC | 	wrlong	local02, fp
16e28     04 4E 05 F1 | 	add	fp, #4
16e2c     A7 FC 61 FC | 	wrlong	result2, fp
16e30     04 4E 05 F1 | 	add	fp, #4
16e34     A7 FE 61 FC | 	wrlong	result3, fp
16e38     08 4E 85 F1 | 	sub	fp, #8
16e3c     A7 12 02 F6 | 	mov	arg01, fp
16e40     0C 4E 85 F1 | 	sub	fp, #12
16e44     70 C5 BF FD | 	call	#_converttoint
16e48     FD 20 02 F6 | 	mov	local02, result1
16e4c     10 1F 02 F6 | 	mov	local01, local02
16e50     01 1E 66 F0 | 	shl	local01, #1
16e54     10 1F 02 F1 | 	add	local01, local02
16e58     03 1E 66 F0 | 	shl	local01, #3
16e5c     14 00 00 FF 
16e60     68 E5 05 F1 | 	add	objptr, ##10600
16e64     F2 1E 02 F1 | 	add	local01, objptr
16e68     A7 12 02 F6 | 	mov	arg01, fp
16e6c     14 00 00 FF 
16e70     68 E5 85 F1 | 	sub	objptr, ##10600
16e74     40 C5 BF FD | 	call	#_converttoint
16e78     04 1E 06 F1 | 	add	local01, #4
16e7c     0F FB 41 FC | 	wrbyte	result1, local01
16e80     A7 F0 03 F6 | 	mov	ptra, fp
16e84     B2 00 A0 FD | 	call	#popregs_
16e88                 | _do_setwave_ret
16e88     2D 00 64 FD | 	ret
16e8c                 | 
16e8c                 | ' 
16e8c                 | ' sub do_setsustain
16e8c                 | _do_setsustain
16e8c     02 4A 05 F6 | 	mov	COUNT_, #2
16e90     A8 00 A0 FD | 	call	#pushregs_
16e94     18 F0 07 F1 | 	add	ptra, #24
16e98     DC 39 BF FD | 	call	#_pop
16e9c     FD 12 02 F6 | 	mov	arg01, result1
16ea0     FE 1E 02 F6 | 	mov	local01, result2
16ea4     FF 20 02 F6 | 	mov	local02, result3
16ea8     A7 12 62 FC | 	wrlong	arg01, fp
16eac     04 4E 05 F1 | 	add	fp, #4
16eb0     A7 1E 62 FC | 	wrlong	local01, fp
16eb4     04 4E 05 F1 | 	add	fp, #4
16eb8     A7 20 62 FC | 	wrlong	local02, fp
16ebc     08 4E 85 F1 | 	sub	fp, #8
16ec0     B4 39 BF FD | 	call	#_pop
16ec4     FD 20 02 F6 | 	mov	local02, result1
16ec8     0C 4E 05 F1 | 	add	fp, #12
16ecc     A7 20 62 FC | 	wrlong	local02, fp
16ed0     04 4E 05 F1 | 	add	fp, #4
16ed4     A7 FC 61 FC | 	wrlong	result2, fp
16ed8     04 4E 05 F1 | 	add	fp, #4
16edc     A7 FE 61 FC | 	wrlong	result3, fp
16ee0     08 4E 85 F1 | 	sub	fp, #8
16ee4     A7 12 02 F6 | 	mov	arg01, fp
16ee8     0C 4E 85 F1 | 	sub	fp, #12
16eec     C8 C4 BF FD | 	call	#_converttoint
16ef0     FD 20 02 F6 | 	mov	local02, result1
16ef4     10 1F 02 F6 | 	mov	local01, local02
16ef8     01 1E 66 F0 | 	shl	local01, #1
16efc     10 1F 02 F1 | 	add	local01, local02
16f00     03 1E 66 F0 | 	shl	local01, #3
16f04     14 00 00 FF 
16f08     68 E5 05 F1 | 	add	objptr, ##10600
16f0c     F2 1E 02 F1 | 	add	local01, objptr
16f10     A7 12 02 F6 | 	mov	arg01, fp
16f14     14 00 00 FF 
16f18     68 E5 85 F1 | 	sub	objptr, ##10600
16f1c     98 C4 BF FD | 	call	#_converttoint
16f20     14 1E 06 F1 | 	add	local01, #20
16f24     0F FB 51 FC | 	wrword	result1, local01
16f28     A7 F0 03 F6 | 	mov	ptra, fp
16f2c     B2 00 A0 FD | 	call	#popregs_
16f30                 | _do_setsustain_ret
16f30     2D 00 64 FD | 	ret
16f34                 | 
16f34                 | ' 
16f34                 | ' sub do_setenv
16f34                 | _do_setenv
16f34     02 4A 05 F6 | 	mov	COUNT_, #2
16f38     A8 00 A0 FD | 	call	#pushregs_
16f3c     18 F0 07 F1 | 	add	ptra, #24
16f40     34 39 BF FD | 	call	#_pop
16f44     FD 12 02 F6 | 	mov	arg01, result1
16f48     FE 1E 02 F6 | 	mov	local01, result2
16f4c     FF 20 02 F6 | 	mov	local02, result3
16f50     A7 12 62 FC | 	wrlong	arg01, fp
16f54     04 4E 05 F1 | 	add	fp, #4
16f58     A7 1E 62 FC | 	wrlong	local01, fp
16f5c     04 4E 05 F1 | 	add	fp, #4
16f60     A7 20 62 FC | 	wrlong	local02, fp
16f64     08 4E 85 F1 | 	sub	fp, #8
16f68     0C 39 BF FD | 	call	#_pop
16f6c     FD 20 02 F6 | 	mov	local02, result1
16f70     0C 4E 05 F1 | 	add	fp, #12
16f74     A7 20 62 FC | 	wrlong	local02, fp
16f78     04 4E 05 F1 | 	add	fp, #4
16f7c     A7 FC 61 FC | 	wrlong	result2, fp
16f80     04 4E 05 F1 | 	add	fp, #4
16f84     A7 FE 61 FC | 	wrlong	result3, fp
16f88     08 4E 85 F1 | 	sub	fp, #8
16f8c     A7 12 02 F6 | 	mov	arg01, fp
16f90     0C 4E 85 F1 | 	sub	fp, #12
16f94     20 C4 BF FD | 	call	#_converttoint
16f98     FD 20 02 F6 | 	mov	local02, result1
16f9c     10 1F 02 F6 | 	mov	local01, local02
16fa0     01 1E 66 F0 | 	shl	local01, #1
16fa4     10 1F 02 F1 | 	add	local01, local02
16fa8     03 1E 66 F0 | 	shl	local01, #3
16fac     14 00 00 FF 
16fb0     68 E5 05 F1 | 	add	objptr, ##10600
16fb4     F2 1E 02 F1 | 	add	local01, objptr
16fb8     A7 12 02 F6 | 	mov	arg01, fp
16fbc     14 00 00 FF 
16fc0     68 E5 85 F1 | 	sub	objptr, ##10600
16fc4     F0 C3 BF FD | 	call	#_converttoint
16fc8     05 1E 06 F1 | 	add	local01, #5
16fcc     0F FB 41 FC | 	wrbyte	result1, local01
16fd0     A7 F0 03 F6 | 	mov	ptra, fp
16fd4     B2 00 A0 FD | 	call	#popregs_
16fd8                 | _do_setenv_ret
16fd8     2D 00 64 FD | 	ret
16fdc                 | 
16fdc                 | ' 
16fdc                 | ' sub do_setdelay
16fdc                 | _do_setdelay
16fdc     02 4A 05 F6 | 	mov	COUNT_, #2
16fe0     A8 00 A0 FD | 	call	#pushregs_
16fe4     18 F0 07 F1 | 	add	ptra, #24
16fe8     8C 38 BF FD | 	call	#_pop
16fec     FD 12 02 F6 | 	mov	arg01, result1
16ff0     FE 1E 02 F6 | 	mov	local01, result2
16ff4     FF 20 02 F6 | 	mov	local02, result3
16ff8     A7 12 62 FC | 	wrlong	arg01, fp
16ffc     04 4E 05 F1 | 	add	fp, #4
17000     A7 1E 62 FC | 	wrlong	local01, fp
17004     04 4E 05 F1 | 	add	fp, #4
17008     A7 20 62 FC | 	wrlong	local02, fp
1700c     08 4E 85 F1 | 	sub	fp, #8
17010     64 38 BF FD | 	call	#_pop
17014     FD 20 02 F6 | 	mov	local02, result1
17018     0C 4E 05 F1 | 	add	fp, #12
1701c     A7 20 62 FC | 	wrlong	local02, fp
17020     04 4E 05 F1 | 	add	fp, #4
17024     A7 FC 61 FC | 	wrlong	result2, fp
17028     04 4E 05 F1 | 	add	fp, #4
1702c     A7 FE 61 FC | 	wrlong	result3, fp
17030     08 4E 85 F1 | 	sub	fp, #8
17034     A7 12 02 F6 | 	mov	arg01, fp
17038     0C 4E 85 F1 | 	sub	fp, #12
1703c     78 C3 BF FD | 	call	#_converttoint
17040     FD 20 02 F6 | 	mov	local02, result1
17044     10 1F 02 F6 | 	mov	local01, local02
17048     01 1E 66 F0 | 	shl	local01, #1
1704c     10 1F 02 F1 | 	add	local01, local02
17050     03 1E 66 F0 | 	shl	local01, #3
17054     14 00 00 FF 
17058     68 E5 05 F1 | 	add	objptr, ##10600
1705c     F2 1E 02 F1 | 	add	local01, objptr
17060     A7 12 02 F6 | 	mov	arg01, fp
17064     14 00 00 FF 
17068     68 E5 85 F1 | 	sub	objptr, ##10600
1706c     48 C3 BF FD | 	call	#_converttoint
17070     06 1E 06 F1 | 	add	local01, #6
17074     0F FB 51 FC | 	wrword	result1, local01
17078     A7 F0 03 F6 | 	mov	ptra, fp
1707c     B2 00 A0 FD | 	call	#popregs_
17080                 | _do_setdelay_ret
17080     2D 00 64 FD | 	ret
17084                 | 
17084                 | ' 
17084                 | ' sub do_setlen
17084                 | _do_setlen
17084     02 4A 05 F6 | 	mov	COUNT_, #2
17088     A8 00 A0 FD | 	call	#pushregs_
1708c     18 F0 07 F1 | 	add	ptra, #24
17090     E4 37 BF FD | 	call	#_pop
17094     FD 12 02 F6 | 	mov	arg01, result1
17098     FE 1E 02 F6 | 	mov	local01, result2
1709c     FF 20 02 F6 | 	mov	local02, result3
170a0     A7 12 62 FC | 	wrlong	arg01, fp
170a4     04 4E 05 F1 | 	add	fp, #4
170a8     A7 1E 62 FC | 	wrlong	local01, fp
170ac     04 4E 05 F1 | 	add	fp, #4
170b0     A7 20 62 FC | 	wrlong	local02, fp
170b4     08 4E 85 F1 | 	sub	fp, #8
170b8     BC 37 BF FD | 	call	#_pop
170bc     FD 20 02 F6 | 	mov	local02, result1
170c0     0C 4E 05 F1 | 	add	fp, #12
170c4     A7 20 62 FC | 	wrlong	local02, fp
170c8     04 4E 05 F1 | 	add	fp, #4
170cc     A7 FC 61 FC | 	wrlong	result2, fp
170d0     04 4E 05 F1 | 	add	fp, #4
170d4     A7 FE 61 FC | 	wrlong	result3, fp
170d8     08 4E 85 F1 | 	sub	fp, #8
170dc     A7 12 02 F6 | 	mov	arg01, fp
170e0     0C 4E 85 F1 | 	sub	fp, #12
170e4     D0 C2 BF FD | 	call	#_converttoint
170e8     FD 20 02 F6 | 	mov	local02, result1
170ec     10 1F 02 F6 | 	mov	local01, local02
170f0     01 1E 66 F0 | 	shl	local01, #1
170f4     10 1F 02 F1 | 	add	local01, local02
170f8     03 1E 66 F0 | 	shl	local01, #3
170fc     14 00 00 FF 
17100     68 E5 05 F1 | 	add	objptr, ##10600
17104     F2 1E 02 F1 | 	add	local01, objptr
17108     A7 12 02 F6 | 	mov	arg01, fp
1710c     14 00 00 FF 
17110     68 E5 85 F1 | 	sub	objptr, ##10600
17114     4C C3 BF FD | 	call	#_converttofloat
17118     08 1E 06 F1 | 	add	local01, #8
1711c     0F FB 61 FC | 	wrlong	result1, local01
17120     A7 F0 03 F6 | 	mov	ptra, fp
17124     B2 00 A0 FD | 	call	#popregs_
17128                 | _do_setlen_ret
17128     2D 00 64 FD | 	ret
1712c                 | 
1712c                 | ' 
1712c                 | ' sub do_setvol
1712c                 | _do_setvol
1712c     02 4A 05 F6 | 	mov	COUNT_, #2
17130     A8 00 A0 FD | 	call	#pushregs_
17134     18 F0 07 F1 | 	add	ptra, #24
17138     3C 37 BF FD | 	call	#_pop
1713c     FD 12 02 F6 | 	mov	arg01, result1
17140     FE 1E 02 F6 | 	mov	local01, result2
17144     FF 20 02 F6 | 	mov	local02, result3
17148     A7 12 62 FC | 	wrlong	arg01, fp
1714c     04 4E 05 F1 | 	add	fp, #4
17150     A7 1E 62 FC | 	wrlong	local01, fp
17154     04 4E 05 F1 | 	add	fp, #4
17158     A7 20 62 FC | 	wrlong	local02, fp
1715c     08 4E 85 F1 | 	sub	fp, #8
17160     14 37 BF FD | 	call	#_pop
17164     FD 20 02 F6 | 	mov	local02, result1
17168     0C 4E 05 F1 | 	add	fp, #12
1716c     A7 20 62 FC | 	wrlong	local02, fp
17170     04 4E 05 F1 | 	add	fp, #4
17174     A7 FC 61 FC | 	wrlong	result2, fp
17178     04 4E 05 F1 | 	add	fp, #4
1717c     A7 FE 61 FC | 	wrlong	result3, fp
17180     08 4E 85 F1 | 	sub	fp, #8
17184     A7 12 02 F6 | 	mov	arg01, fp
17188     0C 4E 85 F1 | 	sub	fp, #12
1718c     28 C2 BF FD | 	call	#_converttoint
17190     FD 20 02 F6 | 	mov	local02, result1
17194     10 1F 02 F6 | 	mov	local01, local02
17198     01 1E 66 F0 | 	shl	local01, #1
1719c     10 1F 02 F1 | 	add	local01, local02
171a0     03 1E 66 F0 | 	shl	local01, #3
171a4     14 00 00 FF 
171a8     68 E5 05 F1 | 	add	objptr, ##10600
171ac     F2 1E 02 F1 | 	add	local01, objptr
171b0     A7 12 02 F6 | 	mov	arg01, fp
171b4     14 00 00 FF 
171b8     68 E5 85 F1 | 	sub	objptr, ##10600
171bc     A4 C2 BF FD | 	call	#_converttofloat
171c0     0C 1E 06 F1 | 	add	local01, #12
171c4     0F FB 61 FC | 	wrlong	result1, local01
171c8     A7 F0 03 F6 | 	mov	ptra, fp
171cc     B2 00 A0 FD | 	call	#popregs_
171d0                 | _do_setvol_ret
171d0     2D 00 64 FD | 	ret
171d4                 | 
171d4                 | ' 
171d4                 | ' sub do_setpan
171d4                 | _do_setpan
171d4     02 4A 05 F6 | 	mov	COUNT_, #2
171d8     A8 00 A0 FD | 	call	#pushregs_
171dc     18 F0 07 F1 | 	add	ptra, #24
171e0     94 36 BF FD | 	call	#_pop
171e4     FD 12 02 F6 | 	mov	arg01, result1
171e8     FE 1E 02 F6 | 	mov	local01, result2
171ec     FF 20 02 F6 | 	mov	local02, result3
171f0     A7 12 62 FC | 	wrlong	arg01, fp
171f4     04 4E 05 F1 | 	add	fp, #4
171f8     A7 1E 62 FC | 	wrlong	local01, fp
171fc     04 4E 05 F1 | 	add	fp, #4
17200     A7 20 62 FC | 	wrlong	local02, fp
17204     08 4E 85 F1 | 	sub	fp, #8
17208     6C 36 BF FD | 	call	#_pop
1720c     FD 20 02 F6 | 	mov	local02, result1
17210     0C 4E 05 F1 | 	add	fp, #12
17214     A7 20 62 FC | 	wrlong	local02, fp
17218     04 4E 05 F1 | 	add	fp, #4
1721c     A7 FC 61 FC | 	wrlong	result2, fp
17220     04 4E 05 F1 | 	add	fp, #4
17224     A7 FE 61 FC | 	wrlong	result3, fp
17228     08 4E 85 F1 | 	sub	fp, #8
1722c     A7 12 02 F6 | 	mov	arg01, fp
17230     0C 4E 85 F1 | 	sub	fp, #12
17234     80 C1 BF FD | 	call	#_converttoint
17238     FD 20 02 F6 | 	mov	local02, result1
1723c     10 1F 02 F6 | 	mov	local01, local02
17240     01 1E 66 F0 | 	shl	local01, #1
17244     10 1F 02 F1 | 	add	local01, local02
17248     03 1E 66 F0 | 	shl	local01, #3
1724c     14 00 00 FF 
17250     68 E5 05 F1 | 	add	objptr, ##10600
17254     F2 1E 02 F1 | 	add	local01, objptr
17258     A7 12 02 F6 | 	mov	arg01, fp
1725c     14 00 00 FF 
17260     68 E5 85 F1 | 	sub	objptr, ##10600
17264     FC C1 BF FD | 	call	#_converttofloat
17268     10 1E 06 F1 | 	add	local01, #16
1726c     0F FB 61 FC | 	wrlong	result1, local01
17270     A7 F0 03 F6 | 	mov	ptra, fp
17274     B2 00 A0 FD | 	call	#popregs_
17278                 | _do_setpan_ret
17278     2D 00 64 FD | 	ret
1727c                 | 
1727c                 | ' 
1727c                 | ' 
1727c                 | ' sub do_pinwrite
1727c                 | _do_pinwrite
1727c     01 4A 05 F6 | 	mov	COUNT_, #1
17280     A8 00 A0 FD | 	call	#pushregs_
17284     18 F0 07 F1 | 	add	ptra, #24
17288     EC 35 BF FD | 	call	#_pop
1728c     FD 14 02 F6 | 	mov	arg02, result1
17290     FE 12 02 F6 | 	mov	arg01, result2
17294     FF 1E 02 F6 | 	mov	local01, result3
17298     A7 14 62 FC | 	wrlong	arg02, fp
1729c     04 4E 05 F1 | 	add	fp, #4
172a0     A7 12 62 FC | 	wrlong	arg01, fp
172a4     04 4E 05 F1 | 	add	fp, #4
172a8     A7 1E 62 FC | 	wrlong	local01, fp
172ac     08 4E 85 F1 | 	sub	fp, #8
172b0     C4 35 BF FD | 	call	#_pop
172b4     FF 1E 02 F6 | 	mov	local01, result3
172b8     0C 4E 05 F1 | 	add	fp, #12
172bc     A7 FA 61 FC | 	wrlong	result1, fp
172c0     04 4E 05 F1 | 	add	fp, #4
172c4     A7 FC 61 FC | 	wrlong	result2, fp
172c8     04 4E 05 F1 | 	add	fp, #4
172cc     A7 1E 62 FC | 	wrlong	local01, fp
172d0     08 4E 85 F1 | 	sub	fp, #8
172d4     A7 12 02 F6 | 	mov	arg01, fp
172d8     0C 4E 85 F1 | 	sub	fp, #12
172dc     D8 C0 BF FD | 	call	#_converttoint
172e0     FD 1E 02 F6 | 	mov	local01, result1
172e4     A7 12 02 F6 | 	mov	arg01, fp
172e8     CC C0 BF FD | 	call	#_converttoint
172ec     FD 14 02 F6 | 	mov	arg02, result1
172f0     0F 13 02 F6 | 	mov	arg01, local01
172f4     D0 79 B0 FD | 	call	#__system___pinwrite
172f8     A7 F0 03 F6 | 	mov	ptra, fp
172fc     B2 00 A0 FD | 	call	#popregs_
17300                 | _do_pinwrite_ret
17300     2D 00 64 FD | 	ret
17304                 | 
17304                 | ' 
17304                 | ' sub do_pinfloat
17304                 | _do_pinfloat
17304     00 4A 05 F6 | 	mov	COUNT_, #0
17308     A8 00 A0 FD | 	call	#pushregs_
1730c     0C F0 07 F1 | 	add	ptra, #12
17310     64 35 BF FD | 	call	#_pop
17314     A7 FA 61 FC | 	wrlong	result1, fp
17318     04 4E 05 F1 | 	add	fp, #4
1731c     A7 FC 61 FC | 	wrlong	result2, fp
17320     04 4E 05 F1 | 	add	fp, #4
17324     A7 FE 61 FC | 	wrlong	result3, fp
17328     08 4E 85 F1 | 	sub	fp, #8
1732c     A7 12 02 F6 | 	mov	arg01, fp
17330     84 C0 BF FD | 	call	#_converttoint
17334     50 FA 61 FD | 	fltl	result1
17338     A7 F0 03 F6 | 	mov	ptra, fp
1733c     B2 00 A0 FD | 	call	#popregs_
17340                 | _do_pinfloat_ret
17340     2D 00 64 FD | 	ret
17344                 | 
17344                 | ' 
17344                 | ' sub do_pinlo
17344                 | _do_pinlo
17344     00 4A 05 F6 | 	mov	COUNT_, #0
17348     A8 00 A0 FD | 	call	#pushregs_
1734c     0C F0 07 F1 | 	add	ptra, #12
17350     24 35 BF FD | 	call	#_pop
17354     A7 FA 61 FC | 	wrlong	result1, fp
17358     04 4E 05 F1 | 	add	fp, #4
1735c     A7 FC 61 FC | 	wrlong	result2, fp
17360     04 4E 05 F1 | 	add	fp, #4
17364     A7 FE 61 FC | 	wrlong	result3, fp
17368     08 4E 85 F1 | 	sub	fp, #8
1736c     A7 12 02 F6 | 	mov	arg01, fp
17370     44 C0 BF FD | 	call	#_converttoint
17374     58 FA 61 FD | 	drvl	result1
17378     A7 F0 03 F6 | 	mov	ptra, fp
1737c     B2 00 A0 FD | 	call	#popregs_
17380                 | _do_pinlo_ret
17380     2D 00 64 FD | 	ret
17384                 | 
17384                 | ' 
17384                 | ' sub do_pinhi
17384                 | _do_pinhi
17384     00 4A 05 F6 | 	mov	COUNT_, #0
17388     A8 00 A0 FD | 	call	#pushregs_
1738c     0C F0 07 F1 | 	add	ptra, #12
17390     E4 34 BF FD | 	call	#_pop
17394     A7 FA 61 FC | 	wrlong	result1, fp
17398     04 4E 05 F1 | 	add	fp, #4
1739c     A7 FC 61 FC | 	wrlong	result2, fp
173a0     04 4E 05 F1 | 	add	fp, #4
173a4     A7 FE 61 FC | 	wrlong	result3, fp
173a8     08 4E 85 F1 | 	sub	fp, #8
173ac     A7 12 02 F6 | 	mov	arg01, fp
173b0     04 C0 BF FD | 	call	#_converttoint
173b4     59 FA 61 FD | 	drvh	result1
173b8     A7 F0 03 F6 | 	mov	ptra, fp
173bc     B2 00 A0 FD | 	call	#popregs_
173c0                 | _do_pinhi_ret
173c0     2D 00 64 FD | 	ret
173c4                 | 
173c4                 | ' 
173c4                 | ' sub do_pintoggle
173c4                 | _do_pintoggle
173c4     00 4A 05 F6 | 	mov	COUNT_, #0
173c8     A8 00 A0 FD | 	call	#pushregs_
173cc     0C F0 07 F1 | 	add	ptra, #12
173d0     A4 34 BF FD | 	call	#_pop
173d4     A7 FA 61 FC | 	wrlong	result1, fp
173d8     04 4E 05 F1 | 	add	fp, #4
173dc     A7 FC 61 FC | 	wrlong	result2, fp
173e0     04 4E 05 F1 | 	add	fp, #4
173e4     A7 FE 61 FC | 	wrlong	result3, fp
173e8     08 4E 85 F1 | 	sub	fp, #8
173ec     A7 12 02 F6 | 	mov	arg01, fp
173f0     C4 BF BF FD | 	call	#_converttoint
173f4     5F FA 61 FD | 	drvnot	result1
173f8     A7 F0 03 F6 | 	mov	ptra, fp
173fc     B2 00 A0 FD | 	call	#popregs_
17400                 | _do_pintoggle_ret
17400     2D 00 64 FD | 	ret
17404                 | 
17404                 | ' 
17404                 | ' 
17404                 | ' sub do_pinstart
17404                 | _do_pinstart
17404     03 4A 05 F6 | 	mov	COUNT_, #3
17408     A8 00 A0 FD | 	call	#pushregs_
1740c     30 F0 07 F1 | 	add	ptra, #48
17410     64 34 BF FD | 	call	#_pop
17414     FD 16 02 F6 | 	mov	arg03, result1
17418     FE 14 02 F6 | 	mov	arg02, result2
1741c     FF 18 02 F6 | 	mov	arg04, result3
17420     A7 16 62 FC | 	wrlong	arg03, fp
17424     04 4E 05 F1 | 	add	fp, #4
17428     A7 14 62 FC | 	wrlong	arg02, fp
1742c     04 4E 05 F1 | 	add	fp, #4
17430     A7 18 62 FC | 	wrlong	arg04, fp
17434     08 4E 85 F1 | 	sub	fp, #8
17438     3C 34 BF FD | 	call	#_pop
1743c     FD 16 02 F6 | 	mov	arg03, result1
17440     FE 14 02 F6 | 	mov	arg02, result2
17444     FF 18 02 F6 | 	mov	arg04, result3
17448     0C 4E 05 F1 | 	add	fp, #12
1744c     A7 16 62 FC | 	wrlong	arg03, fp
17450     04 4E 05 F1 | 	add	fp, #4
17454     A7 14 62 FC | 	wrlong	arg02, fp
17458     04 4E 05 F1 | 	add	fp, #4
1745c     A7 18 62 FC | 	wrlong	arg04, fp
17460     14 4E 85 F1 | 	sub	fp, #20
17464     10 34 BF FD | 	call	#_pop
17468     FD 16 02 F6 | 	mov	arg03, result1
1746c     FE 14 02 F6 | 	mov	arg02, result2
17470     FF 18 02 F6 | 	mov	arg04, result3
17474     18 4E 05 F1 | 	add	fp, #24
17478     A7 16 62 FC | 	wrlong	arg03, fp
1747c     04 4E 05 F1 | 	add	fp, #4
17480     A7 14 62 FC | 	wrlong	arg02, fp
17484     04 4E 05 F1 | 	add	fp, #4
17488     A7 18 62 FC | 	wrlong	arg04, fp
1748c     20 4E 85 F1 | 	sub	fp, #32
17490     E4 33 BF FD | 	call	#_pop
17494     FF 16 02 F6 | 	mov	arg03, result3
17498     24 4E 05 F1 | 	add	fp, #36
1749c     A7 FA 61 FC | 	wrlong	result1, fp
174a0     04 4E 05 F1 | 	add	fp, #4
174a4     A7 FC 61 FC | 	wrlong	result2, fp
174a8     04 4E 05 F1 | 	add	fp, #4
174ac     A7 16 62 FC | 	wrlong	arg03, fp
174b0     08 4E 85 F1 | 	sub	fp, #8
174b4     A7 12 02 F6 | 	mov	arg01, fp
174b8     24 4E 85 F1 | 	sub	fp, #36
174bc     F8 BE BF FD | 	call	#_converttoint
174c0     FD 1E 02 F6 | 	mov	local01, result1
174c4     18 4E 05 F1 | 	add	fp, #24
174c8     A7 12 02 F6 | 	mov	arg01, fp
174cc     18 4E 85 F1 | 	sub	fp, #24
174d0     E4 BE BF FD | 	call	#_converttoint
174d4     FD 20 02 F6 | 	mov	local02, result1
174d8     0C 4E 05 F1 | 	add	fp, #12
174dc     A7 12 02 F6 | 	mov	arg01, fp
174e0     0C 4E 85 F1 | 	sub	fp, #12
174e4     D0 BE BF FD | 	call	#_converttoint
174e8     FD 22 02 F6 | 	mov	local03, result1
174ec     A7 12 02 F6 | 	mov	arg01, fp
174f0     C4 BE BF FD | 	call	#_converttoint
174f4     40 1E 62 FD | 	dirl	local01
174f8     0F 21 02 FC | 	wrpin	local02, local01
174fc     0F 23 12 FC | 	wxpin	local03, local01
17500     0F FB 21 FC | 	wypin	result1, local01
17504     41 1E 62 FD | 	dirh	local01
17508     A7 F0 03 F6 | 	mov	ptra, fp
1750c     B2 00 A0 FD | 	call	#popregs_
17510                 | _do_pinstart_ret
17510     2D 00 64 FD | 	ret
17514                 | 
17514                 | ' 
17514                 | ' 
17514                 | ' sub do_wrpin
17514                 | _do_wrpin
17514     01 4A 05 F6 | 	mov	COUNT_, #1
17518     A8 00 A0 FD | 	call	#pushregs_
1751c     18 F0 07 F1 | 	add	ptra, #24
17520     54 33 BF FD | 	call	#_pop
17524     FD 14 02 F6 | 	mov	arg02, result1
17528     FE 12 02 F6 | 	mov	arg01, result2
1752c     FF 1E 02 F6 | 	mov	local01, result3
17530     A7 14 62 FC | 	wrlong	arg02, fp
17534     04 4E 05 F1 | 	add	fp, #4
17538     A7 12 62 FC | 	wrlong	arg01, fp
1753c     04 4E 05 F1 | 	add	fp, #4
17540     A7 1E 62 FC | 	wrlong	local01, fp
17544     08 4E 85 F1 | 	sub	fp, #8
17548     2C 33 BF FD | 	call	#_pop
1754c     FF 1E 02 F6 | 	mov	local01, result3
17550     0C 4E 05 F1 | 	add	fp, #12
17554     A7 FA 61 FC | 	wrlong	result1, fp
17558     04 4E 05 F1 | 	add	fp, #4
1755c     A7 FC 61 FC | 	wrlong	result2, fp
17560     04 4E 05 F1 | 	add	fp, #4
17564     A7 1E 62 FC | 	wrlong	local01, fp
17568     08 4E 85 F1 | 	sub	fp, #8
1756c     A7 12 02 F6 | 	mov	arg01, fp
17570     0C 4E 85 F1 | 	sub	fp, #12
17574     40 BE BF FD | 	call	#_converttoint
17578     FD 1E 02 F6 | 	mov	local01, result1
1757c     A7 12 02 F6 | 	mov	arg01, fp
17580     34 BE BF FD | 	call	#_converttoint
17584     0F FB 01 FC | 	wrpin	result1, local01
17588     A7 F0 03 F6 | 	mov	ptra, fp
1758c     B2 00 A0 FD | 	call	#popregs_
17590                 | _do_wrpin_ret
17590     2D 00 64 FD | 	ret
17594                 | 
17594                 | ' 
17594                 | ' sub do_wxpin
17594                 | _do_wxpin
17594     01 4A 05 F6 | 	mov	COUNT_, #1
17598     A8 00 A0 FD | 	call	#pushregs_
1759c     18 F0 07 F1 | 	add	ptra, #24
175a0     D4 32 BF FD | 	call	#_pop
175a4     FD 14 02 F6 | 	mov	arg02, result1
175a8     FE 12 02 F6 | 	mov	arg01, result2
175ac     FF 1E 02 F6 | 	mov	local01, result3
175b0     A7 14 62 FC | 	wrlong	arg02, fp
175b4     04 4E 05 F1 | 	add	fp, #4
175b8     A7 12 62 FC | 	wrlong	arg01, fp
175bc     04 4E 05 F1 | 	add	fp, #4
175c0     A7 1E 62 FC | 	wrlong	local01, fp
175c4     08 4E 85 F1 | 	sub	fp, #8
175c8     AC 32 BF FD | 	call	#_pop
175cc     FF 1E 02 F6 | 	mov	local01, result3
175d0     0C 4E 05 F1 | 	add	fp, #12
175d4     A7 FA 61 FC | 	wrlong	result1, fp
175d8     04 4E 05 F1 | 	add	fp, #4
175dc     A7 FC 61 FC | 	wrlong	result2, fp
175e0     04 4E 05 F1 | 	add	fp, #4
175e4     A7 1E 62 FC | 	wrlong	local01, fp
175e8     08 4E 85 F1 | 	sub	fp, #8
175ec     A7 12 02 F6 | 	mov	arg01, fp
175f0     0C 4E 85 F1 | 	sub	fp, #12
175f4     C0 BD BF FD | 	call	#_converttoint
175f8     FD 1E 02 F6 | 	mov	local01, result1
175fc     A7 12 02 F6 | 	mov	arg01, fp
17600     B4 BD BF FD | 	call	#_converttoint
17604     0F FB 11 FC | 	wxpin	result1, local01
17608     A7 F0 03 F6 | 	mov	ptra, fp
1760c     B2 00 A0 FD | 	call	#popregs_
17610                 | _do_wxpin_ret
17610     2D 00 64 FD | 	ret
17614                 | 
17614                 | ' 
17614                 | ' sub do_wypin
17614                 | _do_wypin
17614     01 4A 05 F6 | 	mov	COUNT_, #1
17618     A8 00 A0 FD | 	call	#pushregs_
1761c     18 F0 07 F1 | 	add	ptra, #24
17620     54 32 BF FD | 	call	#_pop
17624     FD 14 02 F6 | 	mov	arg02, result1
17628     FE 12 02 F6 | 	mov	arg01, result2
1762c     FF 1E 02 F6 | 	mov	local01, result3
17630     A7 14 62 FC | 	wrlong	arg02, fp
17634     04 4E 05 F1 | 	add	fp, #4
17638     A7 12 62 FC | 	wrlong	arg01, fp
1763c     04 4E 05 F1 | 	add	fp, #4
17640     A7 1E 62 FC | 	wrlong	local01, fp
17644     08 4E 85 F1 | 	sub	fp, #8
17648     2C 32 BF FD | 	call	#_pop
1764c     FF 1E 02 F6 | 	mov	local01, result3
17650     0C 4E 05 F1 | 	add	fp, #12
17654     A7 FA 61 FC | 	wrlong	result1, fp
17658     04 4E 05 F1 | 	add	fp, #4
1765c     A7 FC 61 FC | 	wrlong	result2, fp
17660     04 4E 05 F1 | 	add	fp, #4
17664     A7 1E 62 FC | 	wrlong	local01, fp
17668     08 4E 85 F1 | 	sub	fp, #8
1766c     A7 12 02 F6 | 	mov	arg01, fp
17670     0C 4E 85 F1 | 	sub	fp, #12
17674     40 BD BF FD | 	call	#_converttoint
17678     FD 1E 02 F6 | 	mov	local01, result1
1767c     A7 12 02 F6 | 	mov	arg01, fp
17680     34 BD BF FD | 	call	#_converttoint
17684     0F FB 21 FC | 	wypin	result1, local01
17688     A7 F0 03 F6 | 	mov	ptra, fp
1768c     B2 00 A0 FD | 	call	#popregs_
17690                 | _do_wypin_ret
17690     2D 00 64 FD | 	ret
17694                 | 
17694                 | ' 
17694                 | ' sub do_position
17694                 | _do_position
17694     01 4A 05 F6 | 	mov	COUNT_, #1
17698     A8 00 A0 FD | 	call	#pushregs_
1769c     18 F0 07 F1 | 	add	ptra, #24
176a0     D4 31 BF FD | 	call	#_pop
176a4     FD 14 02 F6 | 	mov	arg02, result1
176a8     FE 12 02 F6 | 	mov	arg01, result2
176ac     FF 1E 02 F6 | 	mov	local01, result3
176b0     A7 14 62 FC | 	wrlong	arg02, fp
176b4     04 4E 05 F1 | 	add	fp, #4
176b8     A7 12 62 FC | 	wrlong	arg01, fp
176bc     04 4E 05 F1 | 	add	fp, #4
176c0     A7 1E 62 FC | 	wrlong	local01, fp
176c4     08 4E 85 F1 | 	sub	fp, #8
176c8     AC 31 BF FD | 	call	#_pop
176cc     FF 1E 02 F6 | 	mov	local01, result3
176d0     0C 4E 05 F1 | 	add	fp, #12
176d4     A7 FA 61 FC | 	wrlong	result1, fp
176d8     04 4E 05 F1 | 	add	fp, #4
176dc     A7 FC 61 FC | 	wrlong	result2, fp
176e0     04 4E 05 F1 | 	add	fp, #4
176e4     A7 1E 62 FC | 	wrlong	local01, fp
176e8     08 4E 85 F1 | 	sub	fp, #8
176ec     A7 12 02 F6 | 	mov	arg01, fp
176f0     0C 4E 85 F1 | 	sub	fp, #12
176f4     C0 BC BF FD | 	call	#_converttoint
176f8     FD 1E 02 F6 | 	mov	local01, result1
176fc     A7 12 02 F6 | 	mov	arg01, fp
17700     B4 BC BF FD | 	call	#_converttoint
17704     FD 14 02 F6 | 	mov	arg02, result1
17708     0F 13 02 F6 | 	mov	arg01, local01
1770c     4C 5C B0 FD | 	call	#_hg010b_spin2_setcursorpos
17710     A7 F0 03 F6 | 	mov	ptra, fp
17714     B2 00 A0 FD | 	call	#popregs_
17718                 | _do_position_ret
17718     2D 00 64 FD | 	ret
1771c                 | 
1771c                 | ' 
1771c                 | ' sub do_poke
1771c                 | _do_poke
1771c     01 4A 05 F6 | 	mov	COUNT_, #1
17720     A8 00 A0 FD | 	call	#pushregs_
17724     20 F0 07 F1 | 	add	ptra, #32
17728     4C 31 BF FD | 	call	#_pop
1772c     FD 14 02 F6 | 	mov	arg02, result1
17730     FE 12 02 F6 | 	mov	arg01, result2
17734     FF 1E 02 F6 | 	mov	local01, result3
17738     A7 14 62 FC | 	wrlong	arg02, fp
1773c     04 4E 05 F1 | 	add	fp, #4
17740     A7 12 62 FC | 	wrlong	arg01, fp
17744     04 4E 05 F1 | 	add	fp, #4
17748     A7 1E 62 FC | 	wrlong	local01, fp
1774c     08 4E 85 F1 | 	sub	fp, #8
17750     24 31 BF FD | 	call	#_pop
17754     FF 1E 02 F6 | 	mov	local01, result3
17758     0C 4E 05 F1 | 	add	fp, #12
1775c     A7 FA 61 FC | 	wrlong	result1, fp
17760     04 4E 05 F1 | 	add	fp, #4
17764     A7 FC 61 FC | 	wrlong	result2, fp
17768     04 4E 05 F1 | 	add	fp, #4
1776c     A7 1E 62 FC | 	wrlong	local01, fp
17770     08 4E 85 F1 | 	sub	fp, #8
17774     A7 12 02 F6 | 	mov	arg01, fp
17778     0C 4E 85 F1 | 	sub	fp, #12
1777c     38 BC BF FD | 	call	#_converttoint
17780     18 4E 05 F1 | 	add	fp, #24
17784     A7 FA 61 FC | 	wrlong	result1, fp
17788     18 4E 85 F1 | 	sub	fp, #24
1778c     A7 12 02 F6 | 	mov	arg01, fp
17790     24 BC BF FD | 	call	#_converttoint
17794     1C 4E 05 F1 | 	add	fp, #28
17798     A7 FA 61 FC | 	wrlong	result1, fp
1779c                 | ' t1=pop() 'value
1779c                 | ' t2=pop() 
1779c                 | ' a=converttoint(t2) : v=converttoint(t1)
1779c                 | ' if a<$80000 then poke a,v else pspoke a,v
1779c     04 4E 85 F1 | 	sub	fp, #4
177a0     A7 1E 02 FB | 	rdlong	local01, fp
177a4     18 4E 85 F1 | 	sub	fp, #24
177a8     00 04 00 FF 
177ac     00 1E 16 F2 | 	cmp	local01, ##524288 wc
177b0     1C 00 90 3D |  if_ae	jmp	#LR__1890
177b4     18 4E 05 F1 | 	add	fp, #24
177b8     A7 12 02 FB | 	rdlong	arg01, fp
177bc     04 4E 05 F1 | 	add	fp, #4
177c0     A7 14 02 FB | 	rdlong	arg02, fp
177c4     1C 4E 85 F1 | 	sub	fp, #28
177c8     09 15 42 FC | 	wrbyte	arg02, arg01
177cc     18 00 90 FD | 	jmp	#LR__1891
177d0                 | LR__1890
177d0     18 4E 05 F1 | 	add	fp, #24
177d4     A7 12 02 FB | 	rdlong	arg01, fp
177d8     04 4E 05 F1 | 	add	fp, #4
177dc     A7 14 02 FB | 	rdlong	arg02, fp
177e0     1C 4E 85 F1 | 	sub	fp, #28
177e4     78 30 B0 FD | 	call	#_pspoke
177e8                 | LR__1891
177e8     A7 F0 03 F6 | 	mov	ptra, fp
177ec     B2 00 A0 FD | 	call	#popregs_
177f0                 | _do_poke_ret
177f0     2D 00 64 FD | 	ret
177f4                 | 
177f4                 | ' 
177f4                 | ' sub do_dpoke
177f4                 | _do_dpoke
177f4     01 4A 05 F6 | 	mov	COUNT_, #1
177f8     A8 00 A0 FD | 	call	#pushregs_
177fc     20 F0 07 F1 | 	add	ptra, #32
17800     74 30 BF FD | 	call	#_pop
17804     FD 14 02 F6 | 	mov	arg02, result1
17808     FE 12 02 F6 | 	mov	arg01, result2
1780c     FF 1E 02 F6 | 	mov	local01, result3
17810     A7 14 62 FC | 	wrlong	arg02, fp
17814     04 4E 05 F1 | 	add	fp, #4
17818     A7 12 62 FC | 	wrlong	arg01, fp
1781c     04 4E 05 F1 | 	add	fp, #4
17820     A7 1E 62 FC | 	wrlong	local01, fp
17824     08 4E 85 F1 | 	sub	fp, #8
17828     4C 30 BF FD | 	call	#_pop
1782c     FF 1E 02 F6 | 	mov	local01, result3
17830     0C 4E 05 F1 | 	add	fp, #12
17834     A7 FA 61 FC | 	wrlong	result1, fp
17838     04 4E 05 F1 | 	add	fp, #4
1783c     A7 FC 61 FC | 	wrlong	result2, fp
17840     04 4E 05 F1 | 	add	fp, #4
17844     A7 1E 62 FC | 	wrlong	local01, fp
17848     08 4E 85 F1 | 	sub	fp, #8
1784c     A7 12 02 F6 | 	mov	arg01, fp
17850     0C 4E 85 F1 | 	sub	fp, #12
17854     60 BB BF FD | 	call	#_converttoint
17858     18 4E 05 F1 | 	add	fp, #24
1785c     A7 FA 61 FC | 	wrlong	result1, fp
17860     18 4E 85 F1 | 	sub	fp, #24
17864     A7 12 02 F6 | 	mov	arg01, fp
17868     4C BB BF FD | 	call	#_converttoint
1786c     1C 4E 05 F1 | 	add	fp, #28
17870     A7 FA 61 FC | 	wrlong	result1, fp
17874                 | ' t1=pop() 'value
17874                 | ' t2=pop() 
17874                 | ' a=converttoint(t2) : v=converttoint(t1)
17874                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
17874     04 4E 85 F1 | 	sub	fp, #4
17878     A7 1E 02 FB | 	rdlong	local01, fp
1787c     18 4E 85 F1 | 	sub	fp, #24
17880     00 04 00 FF 
17884     00 1E 16 F2 | 	cmp	local01, ##524288 wc
17888     1C 00 90 3D |  if_ae	jmp	#LR__1900
1788c     18 4E 05 F1 | 	add	fp, #24
17890     A7 12 02 FB | 	rdlong	arg01, fp
17894     04 4E 05 F1 | 	add	fp, #4
17898     A7 14 02 FB | 	rdlong	arg02, fp
1789c     1C 4E 85 F1 | 	sub	fp, #28
178a0     09 15 52 FC | 	wrword	arg02, arg01
178a4     18 00 90 FD | 	jmp	#LR__1901
178a8                 | LR__1900
178a8     18 4E 05 F1 | 	add	fp, #24
178ac     A7 12 02 FB | 	rdlong	arg01, fp
178b0     04 4E 05 F1 | 	add	fp, #4
178b4     A7 14 02 FB | 	rdlong	arg02, fp
178b8     1C 4E 85 F1 | 	sub	fp, #28
178bc     58 2F B0 FD | 	call	#_psdpoke
178c0                 | LR__1901
178c0     A7 F0 03 F6 | 	mov	ptra, fp
178c4     B2 00 A0 FD | 	call	#popregs_
178c8                 | _do_dpoke_ret
178c8     2D 00 64 FD | 	ret
178cc                 | 
178cc                 | ' 
178cc                 | ' sub do_lpoke
178cc                 | _do_lpoke
178cc     01 4A 05 F6 | 	mov	COUNT_, #1
178d0     A8 00 A0 FD | 	call	#pushregs_
178d4     20 F0 07 F1 | 	add	ptra, #32
178d8     9C 2F BF FD | 	call	#_pop
178dc     FD 14 02 F6 | 	mov	arg02, result1
178e0     FE 12 02 F6 | 	mov	arg01, result2
178e4     FF 1E 02 F6 | 	mov	local01, result3
178e8     A7 14 62 FC | 	wrlong	arg02, fp
178ec     04 4E 05 F1 | 	add	fp, #4
178f0     A7 12 62 FC | 	wrlong	arg01, fp
178f4     04 4E 05 F1 | 	add	fp, #4
178f8     A7 1E 62 FC | 	wrlong	local01, fp
178fc     08 4E 85 F1 | 	sub	fp, #8
17900     74 2F BF FD | 	call	#_pop
17904     FF 1E 02 F6 | 	mov	local01, result3
17908     0C 4E 05 F1 | 	add	fp, #12
1790c     A7 FA 61 FC | 	wrlong	result1, fp
17910     04 4E 05 F1 | 	add	fp, #4
17914     A7 FC 61 FC | 	wrlong	result2, fp
17918     04 4E 05 F1 | 	add	fp, #4
1791c     A7 1E 62 FC | 	wrlong	local01, fp
17920     08 4E 85 F1 | 	sub	fp, #8
17924     A7 12 02 F6 | 	mov	arg01, fp
17928     0C 4E 85 F1 | 	sub	fp, #12
1792c     88 BA BF FD | 	call	#_converttoint
17930     18 4E 05 F1 | 	add	fp, #24
17934     A7 FA 61 FC | 	wrlong	result1, fp
17938     18 4E 85 F1 | 	sub	fp, #24
1793c     A7 12 02 F6 | 	mov	arg01, fp
17940     74 BA BF FD | 	call	#_converttoint
17944     1C 4E 05 F1 | 	add	fp, #28
17948     A7 FA 61 FC | 	wrlong	result1, fp
1794c                 | ' t1=pop() 'value
1794c                 | ' t2=pop() 
1794c                 | ' a=converttoint(t2) : v=converttoint(t1)
1794c                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
1794c     04 4E 85 F1 | 	sub	fp, #4
17950     A7 1E 02 FB | 	rdlong	local01, fp
17954     18 4E 85 F1 | 	sub	fp, #24
17958     00 04 00 FF 
1795c     00 1E 16 F2 | 	cmp	local01, ##524288 wc
17960     1C 00 90 3D |  if_ae	jmp	#LR__1910
17964     18 4E 05 F1 | 	add	fp, #24
17968     A7 12 02 FB | 	rdlong	arg01, fp
1796c     04 4E 05 F1 | 	add	fp, #4
17970     A7 14 02 FB | 	rdlong	arg02, fp
17974     1C 4E 85 F1 | 	sub	fp, #28
17978     09 15 62 FC | 	wrlong	arg02, arg01
1797c     18 00 90 FD | 	jmp	#LR__1911
17980                 | LR__1910
17980     18 4E 05 F1 | 	add	fp, #24
17984     A7 12 02 FB | 	rdlong	arg01, fp
17988     04 4E 05 F1 | 	add	fp, #4
1798c     A7 14 02 FB | 	rdlong	arg02, fp
17990     1C 4E 85 F1 | 	sub	fp, #28
17994     38 2E B0 FD | 	call	#_pslpoke
17998                 | LR__1911
17998     A7 F0 03 F6 | 	mov	ptra, fp
1799c     B2 00 A0 FD | 	call	#popregs_
179a0                 | _do_lpoke_ret
179a0     2D 00 64 FD | 	ret
179a4                 | 
179a4                 | ' 
179a4                 | ' sub do_peek
179a4                 | _do_peek
179a4     00 4A 05 F6 | 	mov	COUNT_, #0
179a8     A8 00 A0 FD | 	call	#pushregs_
179ac     14 F0 07 F1 | 	add	ptra, #20
179b0     C4 2E BF FD | 	call	#_pop
179b4     A7 FA 61 FC | 	wrlong	result1, fp
179b8     04 4E 05 F1 | 	add	fp, #4
179bc     A7 FC 61 FC | 	wrlong	result2, fp
179c0     04 4E 05 F1 | 	add	fp, #4
179c4     A7 FE 61 FC | 	wrlong	result3, fp
179c8     08 4E 85 F1 | 	sub	fp, #8
179cc     A7 12 02 F6 | 	mov	arg01, fp
179d0     E4 B9 BF FD | 	call	#_converttoint
179d4     0C 4E 05 F1 | 	add	fp, #12
179d8     A7 FA 61 FC | 	wrlong	result1, fp
179dc                 | ' t1=pop()
179dc                 | ' a=converttoint(t1)
179dc                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
179dc     0C 4E 85 F1 | 	sub	fp, #12
179e0     00 04 00 FF 
179e4     00 FA 15 F2 | 	cmp	result1, ##524288 wc
179e8     1C 00 90 3D |  if_ae	jmp	#LR__1920
179ec     0C 4E 05 F1 | 	add	fp, #12
179f0     A7 12 02 FB | 	rdlong	arg01, fp
179f4     09 FB C1 FA | 	rdbyte	result1, arg01
179f8     04 4E 05 F1 | 	add	fp, #4
179fc     A7 FA 61 FC | 	wrlong	result1, fp
17a00     10 4E 85 F1 | 	sub	fp, #16
17a04     20 00 90 FD | 	jmp	#LR__1921
17a08                 | LR__1920
17a08     0C 4E 05 F1 | 	add	fp, #12
17a0c     A7 12 02 FB | 	rdlong	arg01, fp
17a10     0C 4E 85 F1 | 	sub	fp, #12
17a14     90 2E B0 FD | 	call	#_pspeek
17a18     FD FA E1 F8 | 	getbyte	result1, result1, #0
17a1c     10 4E 05 F1 | 	add	fp, #16
17a20     A7 FA 61 FC | 	wrlong	result1, fp
17a24     10 4E 85 F1 | 	sub	fp, #16
17a28                 | LR__1921
17a28     08 4E 05 F1 | 	add	fp, #8
17a2c     A7 3A 68 FC | 	wrlong	#29, fp
17a30     08 4E 05 F1 | 	add	fp, #8
17a34     A7 12 02 FB | 	rdlong	arg01, fp
17a38     10 4E 85 F1 | 	sub	fp, #16
17a3c     A7 12 62 FC | 	wrlong	arg01, fp
17a40     A7 12 02 F6 | 	mov	arg01, fp
17a44     C8 2E BF FD | 	call	#_push
17a48     A7 F0 03 F6 | 	mov	ptra, fp
17a4c     B2 00 A0 FD | 	call	#popregs_
17a50                 | _do_peek_ret
17a50     2D 00 64 FD | 	ret
17a54                 | 
17a54                 | ' 
17a54                 | ' sub do_dpeek
17a54                 | _do_dpeek
17a54     00 4A 05 F6 | 	mov	COUNT_, #0
17a58     A8 00 A0 FD | 	call	#pushregs_
17a5c     14 F0 07 F1 | 	add	ptra, #20
17a60     14 2E BF FD | 	call	#_pop
17a64     A7 FA 61 FC | 	wrlong	result1, fp
17a68     04 4E 05 F1 | 	add	fp, #4
17a6c     A7 FC 61 FC | 	wrlong	result2, fp
17a70     04 4E 05 F1 | 	add	fp, #4
17a74     A7 FE 61 FC | 	wrlong	result3, fp
17a78     08 4E 85 F1 | 	sub	fp, #8
17a7c     A7 12 02 F6 | 	mov	arg01, fp
17a80     34 B9 BF FD | 	call	#_converttoint
17a84     0C 4E 05 F1 | 	add	fp, #12
17a88     A7 FA 61 FC | 	wrlong	result1, fp
17a8c                 | ' t1=pop()
17a8c                 | ' a=converttoint(t1)
17a8c                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
17a8c     0C 4E 85 F1 | 	sub	fp, #12
17a90     00 04 00 FF 
17a94     00 FA 15 F2 | 	cmp	result1, ##524288 wc
17a98     1C 00 90 3D |  if_ae	jmp	#LR__1930
17a9c     0C 4E 05 F1 | 	add	fp, #12
17aa0     A7 12 02 FB | 	rdlong	arg01, fp
17aa4     09 FB E1 FA | 	rdword	result1, arg01
17aa8     04 4E 05 F1 | 	add	fp, #4
17aac     A7 FA 61 FC | 	wrlong	result1, fp
17ab0     10 4E 85 F1 | 	sub	fp, #16
17ab4     1C 00 90 FD | 	jmp	#LR__1931
17ab8                 | LR__1930
17ab8     0C 4E 05 F1 | 	add	fp, #12
17abc     A7 12 02 FB | 	rdlong	arg01, fp
17ac0     0C 4E 85 F1 | 	sub	fp, #12
17ac4     90 2E B0 FD | 	call	#_psdpeek
17ac8     10 4E 05 F1 | 	add	fp, #16
17acc     A7 FA 61 FC | 	wrlong	result1, fp
17ad0     10 4E 85 F1 | 	sub	fp, #16
17ad4                 | LR__1931
17ad4     08 4E 05 F1 | 	add	fp, #8
17ad8     A7 3A 68 FC | 	wrlong	#29, fp
17adc     08 4E 05 F1 | 	add	fp, #8
17ae0     A7 12 02 FB | 	rdlong	arg01, fp
17ae4     10 4E 85 F1 | 	sub	fp, #16
17ae8     A7 12 62 FC | 	wrlong	arg01, fp
17aec     A7 12 02 F6 | 	mov	arg01, fp
17af0     1C 2E BF FD | 	call	#_push
17af4     A7 F0 03 F6 | 	mov	ptra, fp
17af8     B2 00 A0 FD | 	call	#popregs_
17afc                 | _do_dpeek_ret
17afc     2D 00 64 FD | 	ret
17b00                 | 
17b00                 | ' 
17b00                 | ' 
17b00                 | ' sub do_lpeek
17b00                 | _do_lpeek
17b00     00 4A 05 F6 | 	mov	COUNT_, #0
17b04     A8 00 A0 FD | 	call	#pushregs_
17b08     14 F0 07 F1 | 	add	ptra, #20
17b0c     68 2D BF FD | 	call	#_pop
17b10     A7 FA 61 FC | 	wrlong	result1, fp
17b14     04 4E 05 F1 | 	add	fp, #4
17b18     A7 FC 61 FC | 	wrlong	result2, fp
17b1c     04 4E 05 F1 | 	add	fp, #4
17b20     A7 FE 61 FC | 	wrlong	result3, fp
17b24     08 4E 85 F1 | 	sub	fp, #8
17b28     A7 12 02 F6 | 	mov	arg01, fp
17b2c     88 B8 BF FD | 	call	#_converttoint
17b30     0C 4E 05 F1 | 	add	fp, #12
17b34     A7 FA 61 FC | 	wrlong	result1, fp
17b38                 | ' t1=pop()
17b38                 | ' a=converttoint(t1)
17b38                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
17b38     0C 4E 85 F1 | 	sub	fp, #12
17b3c     00 04 00 FF 
17b40     00 FA 15 F2 | 	cmp	result1, ##524288 wc
17b44     1C 00 90 3D |  if_ae	jmp	#LR__1940
17b48     0C 4E 05 F1 | 	add	fp, #12
17b4c     A7 12 02 FB | 	rdlong	arg01, fp
17b50     09 FB 01 FB | 	rdlong	result1, arg01
17b54     04 4E 05 F1 | 	add	fp, #4
17b58     A7 FA 61 FC | 	wrlong	result1, fp
17b5c     10 4E 85 F1 | 	sub	fp, #16
17b60     1C 00 90 FD | 	jmp	#LR__1941
17b64                 | LR__1940
17b64     0C 4E 05 F1 | 	add	fp, #12
17b68     A7 12 02 FB | 	rdlong	arg01, fp
17b6c     0C 4E 85 F1 | 	sub	fp, #12
17b70     8C 2D B0 FD | 	call	#_pslpeek
17b74     10 4E 05 F1 | 	add	fp, #16
17b78     A7 FA 61 FC | 	wrlong	result1, fp
17b7c     10 4E 85 F1 | 	sub	fp, #16
17b80                 | LR__1941
17b80     08 4E 05 F1 | 	add	fp, #8
17b84     A7 3A 68 FC | 	wrlong	#29, fp
17b88     08 4E 05 F1 | 	add	fp, #8
17b8c     A7 12 02 FB | 	rdlong	arg01, fp
17b90     10 4E 85 F1 | 	sub	fp, #16
17b94     A7 12 62 FC | 	wrlong	arg01, fp
17b98     A7 12 02 F6 | 	mov	arg01, fp
17b9c     70 2D BF FD | 	call	#_push
17ba0     A7 F0 03 F6 | 	mov	ptra, fp
17ba4     B2 00 A0 FD | 	call	#popregs_
17ba8                 | _do_lpeek_ret
17ba8     2D 00 64 FD | 	ret
17bac                 | 
17bac                 | ' 
17bac                 | ' sub do_fre
17bac                 | _do_fre
17bac     01 4A 05 F6 | 	mov	COUNT_, #1
17bb0     A8 00 A0 FD | 	call	#pushregs_
17bb4     0C F0 07 F1 | 	add	ptra, #12
17bb8     59 00 00 FF 
17bbc     B8 E5 05 F1 | 	add	objptr, ##46008
17bc0     F2 12 02 FB | 	rdlong	arg01, objptr
17bc4     16 00 00 FF 
17bc8     2C E5 85 F1 | 	sub	objptr, ##11564
17bcc     F2 1E 02 FB | 	rdlong	local01, objptr
17bd0     0F 13 82 F1 | 	sub	arg01, local01
17bd4     16 00 00 FF 
17bd8     D4 E5 05 F1 | 	add	objptr, ##11732
17bdc     F2 12 62 FC | 	wrlong	arg01, objptr
17be0     08 4E 05 F1 | 	add	fp, #8
17be4     A7 3A 68 FC | 	wrlong	#29, fp
17be8     08 4E 85 F1 | 	sub	fp, #8
17bec     F2 1E 02 FB | 	rdlong	local01, objptr
17bf0     5A 00 00 FF 
17bf4     60 E4 85 F1 | 	sub	objptr, ##46176
17bf8     A7 1E 62 FC | 	wrlong	local01, fp
17bfc     A7 12 02 F6 | 	mov	arg01, fp
17c00     0C 2D BF FD | 	call	#_push
17c04     A7 F0 03 F6 | 	mov	ptra, fp
17c08     B2 00 A0 FD | 	call	#popregs_
17c0c                 | _do_fre_ret
17c0c     2D 00 64 FD | 	ret
17c10                 | 
17c10                 | ' 
17c10                 | ' sub do_adr
17c10                 | _do_adr
17c10                 | _do_adr_ret
17c10     2D 00 64 FD | 	ret
17c14                 | 
17c14                 | ' 
17c14                 | ' sub do_getnotevalue
17c14                 | _do_getnotevalue
17c14     01 4A 05 F6 | 	mov	COUNT_, #1
17c18     A8 00 A0 FD | 	call	#pushregs_
17c1c     1C F0 07 F1 | 	add	ptra, #28
17c20     54 2C BF FD | 	call	#_pop
17c24     FF 14 02 F6 | 	mov	arg02, result3
17c28     10 4E 05 F1 | 	add	fp, #16
17c2c     A7 FA 61 FC | 	wrlong	result1, fp
17c30     04 4E 05 F1 | 	add	fp, #4
17c34     A7 FC 61 FC | 	wrlong	result2, fp
17c38     04 4E 05 F1 | 	add	fp, #4
17c3c     A7 14 62 FC | 	wrlong	arg02, fp
17c40     08 4E 85 F1 | 	sub	fp, #8
17c44     A7 12 02 F6 | 	mov	arg01, fp
17c48     10 4E 85 F1 | 	sub	fp, #16
17c4c     68 B7 BF FD | 	call	#_converttoint
17c50     FD 14 52 F6 | 	abs	arg02, result1 wc
17c54     0C 14 16 FD | 	qdiv	arg02, #12
17c58     0C 4E 05 F1 | 	add	fp, #12
17c5c     A7 FA 61 FC | 	wrlong	result1, fp
17c60     14 00 00 FF 
17c64     D8 E4 05 F1 | 	add	objptr, ##10456
17c68     08 4E 85 F1 | 	sub	fp, #8
17c6c     19 14 62 FD | 	getqy	arg02
17c70     0A 15 82 F6 | 	negc	arg02, arg02
17c74     02 14 66 F0 | 	shl	arg02, #2
17c78     F2 14 02 F1 | 	add	arg02, objptr
17c7c     0A 15 02 FB | 	rdlong	arg02, arg02
17c80     A7 14 62 FC | 	wrlong	arg02, fp
17c84     08 4E 05 F1 | 	add	fp, #8
17c88     A7 14 02 FB | 	rdlong	arg02, fp
17c8c     0A 15 52 F6 | 	abs	arg02, arg02 wc
17c90     0C 14 16 FD | 	qdiv	arg02, #12
17c94     0C 4E 85 F1 | 	sub	fp, #12
17c98     14 00 00 FF 
17c9c     D8 E4 85 F1 | 	sub	objptr, ##10456
17ca0     18 14 62 FD | 	getqx	arg02
17ca4     0A 13 82 F6 | 	negc	arg01, arg02
17ca8     09 13 52 F6 | 	abs	arg01, arg01 wc
17cac     1F 1E C6 C9 |  if_b	decod	local01, #31
17cb0     00 1E 06 36 |  if_ae	mov	local01, #0
17cb4     A0 95 B0 FD | 	call	#__system___float_fromuns
17cb8     0F FB 61 F5 | 	xor	result1, local01
17cbc     08 4E 05 F1 | 	add	fp, #8
17cc0     A7 FA 61 FC | 	wrlong	result1, fp
17cc4     FD 14 02 F6 | 	mov	arg02, result1
17cc8     08 4E 85 F1 | 	sub	fp, #8
17ccc     1E 12 C6 F9 | 	decod	arg01, #30
17cd0     6C A8 B0 FD | 	call	#__system____builtin_powf
17cd4     FD 12 02 F6 | 	mov	arg01, result1
17cd8     04 4E 05 F1 | 	add	fp, #4
17cdc     A7 14 02 FB | 	rdlong	arg02, fp
17ce0     04 4E 85 F1 | 	sub	fp, #4
17ce4     74 99 B0 FD | 	call	#__system___float_mul
17ce8     A7 FA 61 FC | 	wrlong	result1, fp
17cec     10 4E 05 F1 | 	add	fp, #16
17cf0     A7 FA 61 FC | 	wrlong	result1, fp
17cf4     08 4E 05 F1 | 	add	fp, #8
17cf8     A7 3C 68 FC | 	wrlong	#30, fp
17cfc     08 4E 85 F1 | 	sub	fp, #8
17d00     A7 12 02 F6 | 	mov	arg01, fp
17d04     10 4E 85 F1 | 	sub	fp, #16
17d08     04 2C BF FD | 	call	#_push
17d0c     A7 F0 03 F6 | 	mov	ptra, fp
17d10     B2 00 A0 FD | 	call	#popregs_
17d14                 | _do_getnotevalue_ret
17d14     2D 00 64 FD | 	ret
17d18                 | 
17d18                 | ' 
17d18                 | ' 
17d18                 | ' sub do_waitms
17d18                 | _do_waitms
17d18     01 4A 05 F6 | 	mov	COUNT_, #1
17d1c     A8 00 A0 FD | 	call	#pushregs_
17d20     18 F0 07 F1 | 	add	ptra, #24
17d24     50 2B BF FD | 	call	#_pop
17d28     A7 FA 61 FC | 	wrlong	result1, fp
17d2c     04 4E 05 F1 | 	add	fp, #4
17d30     A7 FC 61 FC | 	wrlong	result2, fp
17d34     04 4E 05 F1 | 	add	fp, #4
17d38     A7 FE 61 FC | 	wrlong	result3, fp
17d3c                 | ' 
17d3c                 | ' t1=pop() 'value
17d3c                 | ' 
17d3c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
17d3c     08 4E 85 F1 | 	sub	fp, #8
17d40     1C FE 0D F2 | 	cmp	result3, #28 wz
17d44     08 4E 05 51 |  if_ne	add	fp, #8
17d48     A7 12 02 5B |  if_ne	rdlong	arg01, fp
17d4c     08 4E 85 51 |  if_ne	sub	fp, #8
17d50     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
17d54     A7 12 02 AB |  if_e	rdlong	arg01, fp
17d58     0C 4E 05 A1 |  if_e	add	fp, #12
17d5c     A7 12 62 AC |  if_e	wrlong	arg01, fp
17d60     0C 4E 85 A1 |  if_e	sub	fp, #12
17d64     14 00 90 AD |  if_e	jmp	#LR__1950
17d68     A7 12 02 F6 | 	mov	arg01, fp
17d6c     48 B6 BF FD | 	call	#_converttoint
17d70     0C 4E 05 F1 | 	add	fp, #12
17d74     A7 FA 61 FC | 	wrlong	result1, fp
17d78     0C 4E 85 F1 | 	sub	fp, #12
17d7c                 | LR__1950
17d7c                 | ' if t<0 then return
17d7c     0C 4E 05 F1 | 	add	fp, #12
17d80     A7 12 02 FB | 	rdlong	arg01, fp
17d84     0C 4E 85 F1 | 	sub	fp, #12
17d88     00 12 56 F2 | 	cmps	arg01, #0 wc
17d8c     B8 00 90 CD |  if_b	jmp	#LR__1955
17d90                 | ' if t < 5000 then 
17d90     0C 4E 05 F1 | 	add	fp, #12
17d94     A7 12 02 FB | 	rdlong	arg01, fp
17d98     0C 4E 85 F1 | 	sub	fp, #12
17d9c     09 00 00 FF 
17da0     88 13 56 F2 | 	cmps	arg01, ##5000 wc
17da4     14 00 90 3D |  if_ae	jmp	#LR__1951
17da8     0C 4E 05 F1 | 	add	fp, #12
17dac     A7 12 02 FB | 	rdlong	arg01, fp
17db0     0C 4E 85 F1 | 	sub	fp, #12
17db4     50 70 B0 FD | 	call	#__system___waitms
17db8     8C 00 90 FD | 	jmp	#LR__1954
17dbc                 | LR__1951
17dbc     10 4E 05 F1 | 	add	fp, #16
17dc0     A7 02 68 FC | 	wrlong	#1, fp
17dc4     04 4E 85 F1 | 	sub	fp, #4
17dc8     A7 12 02 FB | 	rdlong	arg01, fp
17dcc     09 13 52 F6 | 	abs	arg01, arg01 wc
17dd0     09 00 00 FF 
17dd4     88 13 16 FD | 	qdiv	arg01, ##5000
17dd8                 | '   for i=1 to t/5000
17dd8     0C 4E 85 F1 | 	sub	fp, #12
17ddc     18 1E 62 FD | 	getqx	local01
17de0     0F 1F 82 F6 | 	negc	local01, local01
17de4     01 1E 06 F1 | 	add	local01, #1
17de8                 | LR__1952
17de8     10 4E 05 F1 | 	add	fp, #16
17dec     A7 12 02 FB | 	rdlong	arg01, fp
17df0     10 4E 85 F1 | 	sub	fp, #16
17df4     0F 13 52 F2 | 	cmps	arg01, local01 wc
17df8     28 00 90 3D |  if_ae	jmp	#LR__1953
17dfc     0C 4E 05 F1 | 	add	fp, #12
17e00     A7 12 02 FB | 	rdlong	arg01, fp
17e04     0C 4E 85 F1 | 	sub	fp, #12
17e08     FC 6F B0 FD | 	call	#__system___waitms
17e0c     10 4E 05 F1 | 	add	fp, #16
17e10     A7 12 02 FB | 	rdlong	arg01, fp
17e14     01 12 06 F1 | 	add	arg01, #1
17e18     A7 12 62 FC | 	wrlong	arg01, fp
17e1c     10 4E 85 F1 | 	sub	fp, #16
17e20     C4 FF 9F FD | 	jmp	#LR__1952
17e24                 | LR__1953
17e24     0C 4E 05 F1 | 	add	fp, #12
17e28     A7 1E 02 FB | 	rdlong	local01, fp
17e2c     0F 1F 52 F6 | 	abs	local01, local01 wc
17e30     09 00 00 FF 
17e34     88 1F 16 FD | 	qdiv	local01, ##5000
17e38     0C 4E 85 F1 | 	sub	fp, #12
17e3c     19 1E 62 FD | 	getqy	local01
17e40     0F 13 82 F6 | 	negc	arg01, local01
17e44     C0 6F B0 FD | 	call	#__system___waitms
17e48                 | LR__1954
17e48                 | LR__1955
17e48     A7 F0 03 F6 | 	mov	ptra, fp
17e4c     B2 00 A0 FD | 	call	#popregs_
17e50                 | _do_waitms_ret
17e50     2D 00 64 FD | 	ret
17e54                 | 
17e54                 | ' 
17e54                 | ' sub do_waitvbl
17e54                 | _do_waitvbl
17e54     01 12 06 F6 | 	mov	arg01, #1
17e58     A0 55 B0 FD | 	call	#_hg010b_spin2_waitvbl
17e5c                 | _do_waitvbl_ret
17e5c     2D 00 64 FD | 	ret
17e60                 | 
17e60                 | ' 
17e60                 | ' sub do_waitclock
17e60                 | _do_waitclock
17e60     59 00 00 FF 
17e64     B4 E5 05 F1 | 	add	objptr, ##46004
17e68     F2 00 02 FB | 	rdlong	_var01, objptr
17e6c                 | ' c=hkcnt
17e6c                 | ' do: loop until hkcnt<>c
17e6c                 | LR__1960
17e6c     F2 02 02 FB | 	rdlong	_var02, objptr
17e70     00 03 0A F2 | 	cmp	_var02, _var01 wz
17e74     F4 FF 9F AD |  if_e	jmp	#LR__1960
17e78     59 00 00 FF 
17e7c     B4 E5 85 F1 | 	sub	objptr, ##46004
17e80                 | _do_waitclock_ret
17e80     2D 00 64 FD | 	ret
17e84                 | 
17e84                 | ' 
17e84                 | ' sub do_dir
17e84                 | _do_dir
17e84     05 4A 05 F6 | 	mov	COUNT_, #5
17e88     A8 00 A0 FD | 	call	#pushregs_
17e8c     74 01 00 FF 
17e90     21 12 06 F6 | 	mov	arg01, ##@LR__5185
17e94     08 73 B0 FD | 	call	#__system___chdir
17e98                 | ' chdir("/sd/bas")       ' set working directory
17e98                 | ' print "Working directory: "; currentdir$ 
17e98     00 12 06 F6 | 	mov	arg01, #0
17e9c     D4 C5 B0 FD | 	call	#__system___getiolock_0484
17ea0     FD 12 02 F6 | 	mov	arg01, result1
17ea4     6C 6C B0 FD | 	call	#__system___lockmem
17ea8     74 01 00 FF 
17eac     29 14 06 F6 | 	mov	arg02, ##@LR__5186
17eb0     00 12 06 F6 | 	mov	arg01, #0
17eb4     00 16 06 F6 | 	mov	arg03, #0
17eb8     4C 79 B0 FD | 	call	#__system___basic_print_string
17ebc     52 00 00 FF 
17ec0     C8 E4 05 F1 | 	add	objptr, ##42184
17ec4     F2 14 02 FB | 	rdlong	arg02, objptr
17ec8     52 00 00 FF 
17ecc     C8 E4 85 F1 | 	sub	objptr, ##42184
17ed0     00 12 06 F6 | 	mov	arg01, #0
17ed4     00 16 06 F6 | 	mov	arg03, #0
17ed8     2C 79 B0 FD | 	call	#__system___basic_print_string
17edc     00 12 06 F6 | 	mov	arg01, #0
17ee0     0A 14 06 F6 | 	mov	arg02, #10
17ee4     00 16 06 F6 | 	mov	arg03, #0
17ee8     C4 78 B0 FD | 	call	#__system___basic_print_char
17eec     00 12 06 F6 | 	mov	arg01, #0
17ef0     80 C5 B0 FD | 	call	#__system___getiolock_0484
17ef4     FD 00 68 FC | 	wrlong	#0, result1
17ef8     00 1E 06 F6 | 	mov	local01, #0
17efc     74 01 00 FF 
17f00     3D 12 06 F6 | 	mov	arg01, ##@LR__5187
17f04     10 14 06 F6 | 	mov	arg02, #16
17f08     A0 C6 B0 FD | 	call	#__system___basic_dir
17f0c     FD 20 02 F6 | 	mov	local02, result1
17f10                 | ' px=0:
17f10                 | ' filename=dir$("*", fbDirectory)
17f10                 | ' while filename <> "" and filename <> nil
17f10                 | LR__1970
17f10     00 22 06 F6 | 	mov	local03, #0
17f14     74 01 00 FF 
17f18     3F 14 06 F6 | 	mov	arg02, ##@LR__5188
17f1c     10 13 02 F6 | 	mov	arg01, local02
17f20     18 6C B0 FD | 	call	#__system___string_cmp
17f24     00 FA 0D F2 | 	cmp	result1, #0 wz
17f28     00 22 26 56 |  if_ne	not	local03, #0
17f2c     00 24 06 F6 | 	mov	local04, #0
17f30     10 13 02 F6 | 	mov	arg01, local02
17f34     00 14 06 F6 | 	mov	arg02, #0
17f38     00 6C B0 FD | 	call	#__system___string_cmp
17f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
17f40     00 24 26 56 |  if_ne	not	local04, #0
17f44     12 23 CA F7 | 	test	local03, local04 wz
17f48     9C 00 90 AD |  if_e	jmp	#LR__1972
17f4c                 | '   print "[dir] ";filename; : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
17f4c     00 12 06 F6 | 	mov	arg01, #0
17f50     20 C5 B0 FD | 	call	#__system___getiolock_0484
17f54     FD 12 02 F6 | 	mov	arg01, result1
17f58     B8 6B B0 FD | 	call	#__system___lockmem
17f5c     74 01 00 FF 
17f60     40 14 06 F6 | 	mov	arg02, ##@LR__5189
17f64     00 12 06 F6 | 	mov	arg01, #0
17f68     00 16 06 F6 | 	mov	arg03, #0
17f6c     98 78 B0 FD | 	call	#__system___basic_print_string
17f70     00 26 06 F6 | 	mov	local05, #0
17f74     00 12 06 F6 | 	mov	arg01, #0
17f78     10 15 02 F6 | 	mov	arg02, local02
17f7c     00 16 06 F6 | 	mov	arg03, #0
17f80     84 78 B0 FD | 	call	#__system___basic_print_string
17f84     00 12 06 F6 | 	mov	arg01, #0
17f88     E8 C4 B0 FD | 	call	#__system___getiolock_0484
17f8c     FD 00 68 FC | 	wrlong	#0, result1
17f90     40 1E 06 F1 | 	add	local01, #64
17f94     0F 13 02 F6 | 	mov	arg01, local01
17f98     FC 53 B0 FD | 	call	#_hg010b_spin2_setcursorx
17f9c     00 1F 56 F2 | 	cmps	local01, #256 wc
17fa0     30 00 90 CD |  if_b	jmp	#LR__1971
17fa4     00 1E 06 F6 | 	mov	local01, #0
17fa8     00 12 06 F6 | 	mov	arg01, #0
17fac     C4 C4 B0 FD | 	call	#__system___getiolock_0484
17fb0     FD 12 02 F6 | 	mov	arg01, result1
17fb4     5C 6B B0 FD | 	call	#__system___lockmem
17fb8     00 12 06 F6 | 	mov	arg01, #0
17fbc     0A 14 06 F6 | 	mov	arg02, #10
17fc0     00 16 06 F6 | 	mov	arg03, #0
17fc4     E8 77 B0 FD | 	call	#__system___basic_print_char
17fc8     00 12 06 F6 | 	mov	arg01, #0
17fcc     A4 C4 B0 FD | 	call	#__system___getiolock_0484
17fd0     FD 00 68 FC | 	wrlong	#0, result1
17fd4                 | LR__1971
17fd4     00 12 06 F6 | 	mov	arg01, #0
17fd8     00 14 06 F6 | 	mov	arg02, #0
17fdc     CC C5 B0 FD | 	call	#__system___basic_dir
17fe0     FD 20 02 F6 | 	mov	local02, result1
17fe4     28 FF 9F FD | 	jmp	#LR__1970
17fe8                 | LR__1972
17fe8                 | ' print
17fe8     00 12 06 F6 | 	mov	arg01, #0
17fec     84 C4 B0 FD | 	call	#__system___getiolock_0484
17ff0     FD 12 02 F6 | 	mov	arg01, result1
17ff4     1C 6B B0 FD | 	call	#__system___lockmem
17ff8     00 12 06 F6 | 	mov	arg01, #0
17ffc     0A 14 06 F6 | 	mov	arg02, #10
18000     00 16 06 F6 | 	mov	arg03, #0
18004     A8 77 B0 FD | 	call	#__system___basic_print_char
18008     00 12 06 F6 | 	mov	arg01, #0
1800c     64 C4 B0 FD | 	call	#__system___getiolock_0484
18010     FD 00 68 FC | 	wrlong	#0, result1
18014     00 1E 06 F6 | 	mov	local01, #0
18018                 | ' return cursor_y
18018     74 01 00 FF 
1801c     47 12 06 F6 | 	mov	arg01, ##@LR__5190
18020     21 14 06 F6 | 	mov	arg02, #33
18024     84 C5 B0 FD | 	call	#__system___basic_dir
18028     FD 20 02 F6 | 	mov	local02, result1
1802c                 | ' px=0: py=v.getcursory()
1802c                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
1802c                 | ' do while filename <> "" and filename <> nil
1802c                 | LR__1973
1802c     00 22 06 F6 | 	mov	local03, #0
18030     74 01 00 FF 
18034     49 14 06 F6 | 	mov	arg02, ##@LR__5191
18038     10 13 02 F6 | 	mov	arg01, local02
1803c     FC 6A B0 FD | 	call	#__system___string_cmp
18040     00 FA 0D F2 | 	cmp	result1, #0 wz
18044     00 22 26 56 |  if_ne	not	local03, #0
18048     00 24 06 F6 | 	mov	local04, #0
1804c     10 13 02 F6 | 	mov	arg01, local02
18050     00 14 06 F6 | 	mov	arg02, #0
18054     E4 6A B0 FD | 	call	#__system___string_cmp
18058     00 FA 0D F2 | 	cmp	result1, #0 wz
1805c     00 24 26 56 |  if_ne	not	local04, #0
18060     12 23 CA F7 | 	test	local03, local04 wz
18064     80 01 90 AD |  if_e	jmp	#LR__1978
18068                 | '   print filename; : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
18068     00 12 06 F6 | 	mov	arg01, #0
1806c     04 C4 B0 FD | 	call	#__system___getiolock_0484
18070     FD 12 02 F6 | 	mov	arg01, result1
18074     9C 6A B0 FD | 	call	#__system___lockmem
18078     00 12 06 F6 | 	mov	arg01, #0
1807c     10 15 02 F6 | 	mov	arg02, local02
18080     00 16 06 F6 | 	mov	arg03, #0
18084     80 77 B0 FD | 	call	#__system___basic_print_string
18088     00 12 06 F6 | 	mov	arg01, #0
1808c     E4 C3 B0 FD | 	call	#__system___getiolock_0484
18090     FD 00 68 FC | 	wrlong	#0, result1
18094     40 1E 06 F1 | 	add	local01, #64
18098     0F 13 02 F6 | 	mov	arg01, local01
1809c     F8 52 B0 FD | 	call	#_hg010b_spin2_setcursorx
180a0     00 1F 56 F2 | 	cmps	local01, #256 wc
180a4     30 00 90 CD |  if_b	jmp	#LR__1974
180a8     00 1E 06 F6 | 	mov	local01, #0
180ac     00 12 06 F6 | 	mov	arg01, #0
180b0     C0 C3 B0 FD | 	call	#__system___getiolock_0484
180b4     FD 12 02 F6 | 	mov	arg01, result1
180b8     58 6A B0 FD | 	call	#__system___lockmem
180bc     00 12 06 F6 | 	mov	arg01, #0
180c0     0A 14 06 F6 | 	mov	arg02, #10
180c4     00 16 06 F6 | 	mov	arg03, #0
180c8     E4 76 B0 FD | 	call	#__system___basic_print_char
180cc     00 12 06 F6 | 	mov	arg01, #0
180d0     A0 C3 B0 FD | 	call	#__system___getiolock_0484
180d4     FD 00 68 FC | 	wrlong	#0, result1
180d8                 | LR__1974
180d8     00 12 06 F6 | 	mov	arg01, #0
180dc     00 14 06 F6 | 	mov	arg02, #0
180e0     C8 C4 B0 FD | 	call	#__system___basic_dir
180e4     FD 20 02 F6 | 	mov	local02, result1
180e8                 | '   filename = dir$()      ' continue scan
180e8                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
180e8                 | ' return cursor_y
180e8     3E E4 05 F1 | 	add	objptr, #62
180ec     F2 FA C1 FA | 	rdbyte	result1, objptr
180f0     3E E4 85 F1 | 	sub	objptr, #62
180f4     22 FA 0D F2 | 	cmp	result1, #34 wz
180f8     30 FF 9F 5D |  if_ne	jmp	#LR__1973
180fc                 | '     print "-----more, press any key";
180fc     00 12 06 F6 | 	mov	arg01, #0
18100     70 C3 B0 FD | 	call	#__system___getiolock_0484
18104     FD 12 02 F6 | 	mov	arg01, result1
18108     08 6A B0 FD | 	call	#__system___lockmem
1810c     74 01 00 FF 
18110     4A 14 06 F6 | 	mov	arg02, ##@LR__5192
18114     00 12 06 F6 | 	mov	arg01, #0
18118     00 16 06 F6 | 	mov	arg03, #0
1811c     E8 76 B0 FD | 	call	#__system___basic_print_string
18120     00 12 06 F6 | 	mov	arg01, #0
18124     4C C3 B0 FD | 	call	#__system___getiolock_0484
18128     FD 00 68 FC | 	wrlong	#0, result1
1812c                 | '     do 
1812c                 | LR__1975
1812c     D0 61 B0 FD | 	call	#_usbnew_spin2_get_key
18130     00 FA 0D F2 | 	cmp	result1, #0 wz
18134     F4 FF 9F 5D |  if_ne	jmp	#LR__1975
18138                 | '     do
18138                 | LR__1976
18138     C4 61 B0 FD | 	call	#_usbnew_spin2_get_key
1813c     00 FA 0D F2 | 	cmp	result1, #0 wz
18140     F4 FF 9F AD |  if_e	jmp	#LR__1976
18144                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
18144     58 00 00 FF 
18148     20 E5 05 F1 | 	add	objptr, ##45344
1814c     F2 22 02 FB | 	rdlong	local03, objptr
18150     58 00 00 FF 
18154     20 E5 85 F1 | 	sub	objptr, ##45344
18158     01 22 0E F2 | 	cmp	local03, #1 wz
1815c     3C 00 90 5D |  if_ne	jmp	#LR__1977
18160     59 00 00 FF 
18164     C4 E5 05 F1 | 	add	objptr, ##46020
18168     F2 14 02 FB | 	rdlong	arg02, objptr
1816c     04 E4 85 F1 | 	sub	objptr, #4
18170     F2 1A 02 FB | 	rdlong	arg05, objptr
18174     07 12 06 F6 | 	mov	arg01, #7
18178     56 00 00 FF 
1817c     44 16 06 F6 | 	mov	arg03, ##44100
18180     0C 18 C6 F9 | 	decod	arg04, #12
18184     01 1C 66 F6 | 	neg	arg06, #1
18188     4E 00 00 FF 
1818c     F4 E4 85 F1 | 	sub	objptr, ##40180
18190     10 65 B0 FD | 	call	#_audio096_spin2_play
18194     0B 00 00 FF 
18198     CC E4 85 F1 | 	sub	objptr, ##5836
1819c                 | LR__1977
1819c     00 12 06 F6 | 	mov	arg01, #0
181a0     23 14 06 F6 | 	mov	arg02, #35
181a4     B4 51 B0 FD | 	call	#_hg010b_spin2_setcursorpos
181a8                 | '     position 0,35: print "                             ";: position 4,35  
181a8     00 12 06 F6 | 	mov	arg01, #0
181ac     C4 C2 B0 FD | 	call	#__system___getiolock_0484
181b0     FD 12 02 F6 | 	mov	arg01, result1
181b4     5C 69 B0 FD | 	call	#__system___lockmem
181b8     74 01 00 FF 
181bc     63 14 06 F6 | 	mov	arg02, ##@LR__5193
181c0     00 12 06 F6 | 	mov	arg01, #0
181c4     00 16 06 F6 | 	mov	arg03, #0
181c8     3C 76 B0 FD | 	call	#__system___basic_print_string
181cc     00 12 06 F6 | 	mov	arg01, #0
181d0     A0 C2 B0 FD | 	call	#__system___getiolock_0484
181d4     FD 00 68 FC | 	wrlong	#0, result1
181d8     04 12 06 F6 | 	mov	arg01, #4
181dc     23 14 06 F6 | 	mov	arg02, #35
181e0     78 51 B0 FD | 	call	#_hg010b_spin2_setcursorpos
181e4     44 FE 9F FD | 	jmp	#LR__1973
181e8                 | LR__1978
181e8     A7 F0 03 F6 | 	mov	ptra, fp
181ec     B2 00 A0 FD | 	call	#popregs_
181f0                 | _do_dir_ret
181f0     2D 00 64 FD | 	ret
181f4                 | 
181f4                 | ' 
181f4                 | ' sub do_if
181f4                 | _do_if
181f4     05 4A 05 F6 | 	mov	COUNT_, #5
181f8     A8 00 A0 FD | 	call	#pushregs_
181fc     78 26 BF FD | 	call	#_pop
18200     FD 1E 0A F6 | 	mov	local01, result1 wz
18204     FE 20 02 F6 | 	mov	local02, result2
18208     FF 22 02 F6 | 	mov	local03, result3
1820c                 | ' t1=pop()
1820c                 | ' ' if uresult=0, jump over else
1820c                 | ' if t1.result.uresult = 0 then 
1820c     BC 00 90 5D |  if_ne	jmp	#LR__1982
18210                 | '   for i=lineptr_e to lineptr-1
18210     4A 00 00 FF 
18214     B0 E4 05 F1 | 	add	objptr, ##38064
18218     F2 24 02 FB | 	rdlong	local04, objptr
1821c     04 E4 85 F1 | 	sub	objptr, #4
18220     F2 26 02 FB | 	rdlong	local05, objptr
18224     4A 00 00 FF 
18228     AC E4 85 F1 | 	sub	objptr, ##38060
1822c                 | LR__1980
1822c     13 25 52 F2 | 	cmps	local04, local05 wc
18230     78 00 90 3D |  if_ae	jmp	#LR__1981
18234     12 FF 01 F6 | 	mov	result3, local04
18238     01 FE 65 F0 | 	shl	result3, #1
1823c     12 FF 01 F1 | 	add	result3, local04
18240     02 FE 65 F0 | 	shl	result3, #2
18244     47 00 00 FF 
18248     AC E4 05 F1 | 	add	objptr, ##36524
1824c     F2 FE 01 F1 | 	add	result3, objptr
18250     FF 1E 02 FB | 	rdlong	local01, result3
18254     04 FE 05 F1 | 	add	result3, #4
18258     FF FC 01 FB | 	rdlong	result2, result3
1825c     12 FF 01 F6 | 	mov	result3, local04
18260     01 FE 65 F0 | 	shl	result3, #1
18264     12 FF 01 F1 | 	add	result3, local04
18268     02 FE 65 F0 | 	shl	result3, #2
1826c     F2 FE 01 F1 | 	add	result3, objptr
18270     08 FE 05 F1 | 	add	result3, #8
18274     FF FE 01 FB | 	rdlong	result3, result3
18278     FE 20 02 F6 | 	mov	local02, result2
1827c     FF 22 02 F6 | 	mov	local03, result3
18280                 | '     t1=compiledline(i)
18280                 | '     if t1.result_type=token_else then lineptr_e=i : return
18280     5A 22 0E F2 | 	cmp	local03, #90 wz
18284     47 00 00 FF 
18288     AC E4 85 F1 | 	sub	objptr, ##36524
1828c     4A 00 00 AF 
18290     B0 E4 05 A1 |  if_e	add	objptr, ##38064
18294     F2 24 62 AC |  if_e	wrlong	local04, objptr
18298     4A 00 00 AF 
1829c     B0 E4 85 A1 |  if_e	sub	objptr, ##38064
182a0     28 00 90 AD |  if_e	jmp	#LR__1983
182a4     01 24 06 F1 | 	add	local04, #1
182a8     80 FF 9F FD | 	jmp	#LR__1980
182ac                 | LR__1981
182ac     4A 00 00 FF 
182b0     AC E4 05 F1 | 	add	objptr, ##38060
182b4     F2 26 02 FB | 	rdlong	local05, objptr
182b8     01 26 86 F1 | 	sub	local05, #1
182bc     04 E4 05 F1 | 	add	objptr, #4
182c0     F2 26 62 FC | 	wrlong	local05, objptr
182c4     4A 00 00 FF 
182c8     B0 E4 85 F1 | 	sub	objptr, ##38064
182cc                 | LR__1982
182cc                 | LR__1983
182cc     A7 F0 03 F6 | 	mov	ptra, fp
182d0     B2 00 A0 FD | 	call	#popregs_
182d4                 | _do_if_ret
182d4     2D 00 64 FD | 	ret
182d8                 | 
182d8                 | ' 
182d8                 | ' sub do_else
182d8                 | _do_else
182d8     4A 00 00 FF 
182dc     AC E4 05 F1 | 	add	objptr, ##38060
182e0     F2 00 02 FB | 	rdlong	_var01, objptr
182e4     01 00 86 F1 | 	sub	_var01, #1
182e8     04 E4 05 F1 | 	add	objptr, #4
182ec     F2 00 62 FC | 	wrlong	_var01, objptr
182f0     4A 00 00 FF 
182f4     B0 E4 85 F1 | 	sub	objptr, ##38064
182f8                 | _do_else_ret
182f8     2D 00 64 FD | 	ret
182fc                 | 
182fc                 | ' 
182fc                 | ' sub do_rad
182fc                 | _do_rad
182fc     59 00 00 FF 
18300     C8 E5 05 F1 | 	add	objptr, ##46024
18304     00 C0 9F FF 
18308     F2 00 68 FC | 	wrlong	##1065353216, objptr
1830c     04 E4 05 F1 | 	add	objptr, #4
18310     00 C0 9F FF 
18314     F2 00 68 FC | 	wrlong	##1065353216, objptr
18318     59 00 00 FF 
1831c     CC E5 85 F1 | 	sub	objptr, ##46028
18320                 | _do_rad_ret
18320     2D 00 64 FD | 	ret
18324                 | 
18324                 | ' 
18324                 | ' sub do_deg
18324                 | _do_deg
18324     59 00 00 FF 
18328     C8 E5 05 F1 | 	add	objptr, ##46024
1832c     7D 47 9E FF 
18330     F2 6A 68 FC | 	wrlong	##1016003125, objptr
18334     04 E4 05 F1 | 	add	objptr, #4
18338     97 32 A1 FF 
1833c     F2 C2 69 FC | 	wrlong	##1113927393, objptr
18340     59 00 00 FF 
18344     CC E5 85 F1 | 	sub	objptr, ##46028
18348                 | _do_deg_ret
18348     2D 00 64 FD | 	ret
1834c                 | 
1834c                 | ' 
1834c                 | ' sub do_int
1834c                 | _do_int
1834c     00 4A 05 F6 | 	mov	COUNT_, #0
18350     A8 00 A0 FD | 	call	#pushregs_
18354     0C F0 07 F1 | 	add	ptra, #12
18358     1C 25 BF FD | 	call	#_pop
1835c     A7 FA 61 FC | 	wrlong	result1, fp
18360     04 4E 05 F1 | 	add	fp, #4
18364     A7 FC 61 FC | 	wrlong	result2, fp
18368     04 4E 05 F1 | 	add	fp, #4
1836c     A7 FE 61 FC | 	wrlong	result3, fp
18370     08 4E 85 F1 | 	sub	fp, #8
18374     A7 12 02 F6 | 	mov	arg01, fp
18378     3C B0 BF FD | 	call	#_converttoint
1837c     A7 FA 61 FC | 	wrlong	result1, fp
18380     08 4E 05 F1 | 	add	fp, #8
18384     A7 38 68 FC | 	wrlong	#28, fp
18388     08 4E 85 F1 | 	sub	fp, #8
1838c     A7 12 02 F6 | 	mov	arg01, fp
18390     7C 25 BF FD | 	call	#_push
18394     A7 F0 03 F6 | 	mov	ptra, fp
18398     B2 00 A0 FD | 	call	#popregs_
1839c                 | _do_int_ret
1839c     2D 00 64 FD | 	ret
183a0                 | 
183a0                 | ' 
183a0                 | ' sub do_nothing
183a0                 | _do_nothing
183a0                 | _do_nothing_ret
183a0     2D 00 64 FD | 	ret
183a4                 | 
183a4                 | ' 
183a4                 | ' sub do_brun
183a4                 | _do_brun
183a4     08 4A 05 F6 | 	mov	COUNT_, #8
183a8     A8 00 A0 FD | 	call	#pushregs_
183ac     C8 24 BF FD | 	call	#_pop
183b0     FE 1A 02 F6 | 	mov	arg05, result2
183b4     FF 18 02 F6 | 	mov	arg04, result3
183b8     FD 1E 02 F6 | 	mov	local01, result1
183bc     0D 21 02 F6 | 	mov	local02, arg05
183c0     0C 23 02 F6 | 	mov	local03, arg04
183c4                 | ' 
183c4                 | ' t1=pop() 
183c4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
183c4     2B 22 0E F2 | 	cmp	local03, #43 wz
183c8     10 00 90 5D |  if_ne	jmp	#LR__1990
183cc     0F 13 02 F6 | 	mov	arg01, local01
183d0     C0 67 BF FD | 	call	#_convertstring
183d4     FD 1E 02 F6 | 	mov	local01, result1
183d8     1F 22 06 F6 | 	mov	local03, #31
183dc                 | LR__1990
183dc                 | ' if t1.result_type=result_string then
183dc     1F 22 0E F2 | 	cmp	local03, #31 wz
183e0     EC 01 90 5D |  if_ne	jmp	#LR__1994
183e4     0F 25 02 F6 | 	mov	local04, local01
183e8                 | '   filename=t1.result.sresult
183e8                 | '   if left$(filename,1)="/" then 
183e8     12 13 02 F6 | 	mov	arg01, local04
183ec     01 14 06 F6 | 	mov	arg02, #1
183f0     30 87 B0 FD | 	call	#__system__Left_S
183f4     FD 12 02 F6 | 	mov	arg01, result1
183f8     74 01 00 FF 
183fc     81 14 06 F6 | 	mov	arg02, ##@LR__5194
18400     38 67 B0 FD | 	call	#__system___string_cmp
18404     00 FA 0D F2 | 	cmp	result1, #0 wz
18408     12 27 02 A6 |  if_e	mov	local05, local04
1840c     14 00 90 AD |  if_e	jmp	#LR__1991
18410     74 01 00 FF 
18414     83 12 06 F6 | 	mov	arg01, ##@LR__5195
18418     12 15 02 F6 | 	mov	arg02, local04
1841c     50 67 B0 FD | 	call	#__system___string_concat
18420     FD 26 02 F6 | 	mov	local05, result1
18424                 | LR__1991
18424                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
18424                 | '   open fullfilename for input as #9
18424     09 12 06 F6 | 	mov	arg01, #9
18428     13 15 02 F6 | 	mov	arg02, local05
1842c     00 16 06 F6 | 	mov	arg03, #0
18430     E4 72 B0 FD | 	call	#__system___basic_open_string
18434     20 E6 05 F1 | 	add	ptr___system__dat__, #32
18438     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1843c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
18440     FD 28 0A F6 | 	mov	local06, result1 wz
18444                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
18444     8C 00 90 AD |  if_e	jmp	#LR__1992
18448     00 12 06 F6 | 	mov	arg01, #0
1844c     24 C0 B0 FD | 	call	#__system___getiolock_0484
18450     FD 12 02 F6 | 	mov	arg01, result1
18454     BC 66 B0 FD | 	call	#__system___lockmem
18458     74 01 00 FF 
1845c     8C 14 06 F6 | 	mov	arg02, ##@LR__5196
18460     00 12 06 F6 | 	mov	arg01, #0
18464     00 16 06 F6 | 	mov	arg03, #0
18468     9C 73 B0 FD | 	call	#__system___basic_print_string
1846c     00 12 06 F6 | 	mov	arg01, #0
18470     14 15 02 F6 | 	mov	arg02, local06
18474     00 16 06 F6 | 	mov	arg03, #0
18478     0A 18 06 F6 | 	mov	arg04, #10
1847c     CC 73 B0 FD | 	call	#__system___basic_print_integer
18480     74 01 00 FF 
18484     9A 14 06 F6 | 	mov	arg02, ##@LR__5197
18488     00 12 06 F6 | 	mov	arg01, #0
1848c     00 16 06 F6 | 	mov	arg03, #0
18490     74 73 B0 FD | 	call	#__system___basic_print_string
18494     14 13 02 F6 | 	mov	arg01, local06
18498     D4 8C B0 FD | 	call	#__system___strerror
1849c     FD 14 02 F6 | 	mov	arg02, result1
184a0     00 12 06 F6 | 	mov	arg01, #0
184a4     00 16 06 F6 | 	mov	arg03, #0
184a8     5C 73 B0 FD | 	call	#__system___basic_print_string
184ac     00 12 06 F6 | 	mov	arg01, #0
184b0     0A 14 06 F6 | 	mov	arg02, #10
184b4     00 16 06 F6 | 	mov	arg03, #0
184b8     F4 72 B0 FD | 	call	#__system___basic_print_char
184bc     00 12 06 F6 | 	mov	arg01, #0
184c0     B0 BF B0 FD | 	call	#__system___getiolock_0484
184c4     FD 00 68 FC | 	wrlong	#0, result1
184c8     09 12 06 F6 | 	mov	arg01, #9
184cc     D4 B5 B0 FD | 	call	#__system__close
184d0     FC 00 90 FD | 	jmp	#LR__1995
184d4                 | LR__1992
184d4     01 2A 06 F6 | 	mov	local07, #1
184d8     00 2C 06 F6 | 	mov	local08, #0
184dc                 | '   do
184dc                 | LR__1993
184dc                 | '     get #9,pos,block(0),1024,r : pos+=r	
184dc     56 00 00 FF 
184e0     E8 E4 05 F1 | 	add	objptr, ##44264
184e4     F2 16 02 F6 | 	mov	arg03, objptr
184e8     56 00 00 FF 
184ec     E8 E4 85 F1 | 	sub	objptr, ##44264
184f0     09 12 06 F6 | 	mov	arg01, #9
184f4     15 15 02 F6 | 	mov	arg02, local07
184f8     0A 18 C6 F9 | 	decod	arg04, #10
184fc     01 1A 06 F6 | 	mov	arg05, #1
18500     14 74 B0 FD | 	call	#__system___basic_get
18504     FD 28 02 F6 | 	mov	local06, result1
18508     FD 2A 02 F1 | 	add	local07, result1
1850c     56 00 00 FF 
18510     E8 E4 05 F1 | 	add	objptr, ##44264
18514     F2 12 02 F6 | 	mov	arg01, objptr
18518     16 15 02 F6 | 	mov	arg02, local08
1851c     0A 16 C6 F9 | 	decod	arg03, #10
18520     4B 00 00 FF 
18524     1C E4 85 F1 | 	sub	objptr, ##38428
18528     44 5A B0 FD | 	call	#_psram_spin2_write
1852c     0B 00 00 FF 
18530     CC E4 85 F1 | 	sub	objptr, ##5836
18534     14 2D 02 F1 | 	add	local08, local06
18538     02 00 00 FF 
1853c     00 28 0E F2 | 	cmp	local06, ##1024 wz
18540     E0 03 00 AF 
18544     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
18548     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1993
1854c     37 00 00 FF 
18550     2C E4 05 F1 | 	add	objptr, ##28204
18554     F2 12 02 FB | 	rdlong	arg01, objptr
18558     03 12 62 FD | 	cogstop	arg01
1855c     04 E4 05 F1 | 	add	objptr, #4
18560     F2 12 02 FB | 	rdlong	arg01, objptr
18564     03 12 62 FD | 	cogstop	arg01
18568     04 E4 05 F1 | 	add	objptr, #4
1856c     F2 12 02 FB | 	rdlong	arg01, objptr
18570     03 12 62 FD | 	cogstop	arg01
18574     21 00 00 FF 
18578     F0 E4 05 F1 | 	add	objptr, ##17136
1857c     F2 12 02 FB | 	rdlong	arg01, objptr
18580     03 12 62 FD | 	cogstop	arg01
18584     18 00 00 FF 
18588     D8 EA 05 F1 | 	add	ptr__dat__, ##12504
1858c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
18590     18 00 00 FF 
18594     D8 EA 85 F1 | 	sub	ptr__dat__, ##12504
18598     21 00 00 FF 
1859c     E8 E4 85 F1 | 	sub	objptr, ##17128
185a0     1E 2C 06 F6 | 	mov	local08, #30
185a4     28 E4 61 FD | 	setq	objptr
185a8     0A 2D F2 FC | 	coginit	local08, arg02 wc
185ac     01 2C 66 C6 |  if_b	neg	local08, #1
185b0     23 00 00 FF 
185b4     2C E4 05 F1 | 	add	objptr, ##17964
185b8     F2 2C 62 FC | 	wrlong	local08, objptr
185bc     5A 00 00 FF 
185c0     68 E4 85 F1 | 	sub	objptr, ##46184
185c4     00 12 06 F6 | 	mov	arg01, #0
185c8     01 12 62 FD | 	cogid	arg01
185cc     03 12 62 FD | 	cogstop	arg01
185d0                 | LR__1994
185d0                 | LR__1995
185d0     A7 F0 03 F6 | 	mov	ptra, fp
185d4     B2 00 A0 FD | 	call	#popregs_
185d8                 | _do_brun_ret
185d8     2D 00 64 FD | 	ret
185dc                 | 
185dc                 | ' 
185dc                 | ' 
185dc                 | ' sub do_mouse
185dc                 | _do_mouse
185dc     98 22 BF FD | 	call	#_pop
185e0     00 FA 4D F2 | 	cmps	result1, #0 wz
185e4                 | ' t1=pop()
185e4                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
185e4     14 00 90 5D |  if_ne	jmp	#LR__2000
185e8     10 12 06 F6 | 	mov	arg01, #16
185ec     00 14 06 F6 | 	mov	arg02, #0
185f0     00 16 06 F6 | 	mov	arg03, #0
185f4     54 41 B0 FD | 	call	#_hg010b_spin2_setspritesize
185f8     10 00 90 FD | 	jmp	#LR__2001
185fc                 | LR__2000
185fc     10 12 06 F6 | 	mov	arg01, #16
18600     20 14 06 F6 | 	mov	arg02, #32
18604     20 16 06 F6 | 	mov	arg03, #32
18608     40 41 B0 FD | 	call	#_hg010b_spin2_setspritesize
1860c                 | LR__2001
1860c                 | _do_mouse_ret
1860c     2D 00 64 FD | 	ret
18610                 | 
18610                 | ' 
18610                 | ' sub do_cursor
18610                 | _do_cursor
18610     64 22 BF FD | 	call	#_pop
18614     00 FA 4D F2 | 	cmps	result1, #0 wz
18618                 | ' t1=pop()
18618                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
18618     14 00 90 5D |  if_ne	jmp	#LR__2010
1861c     11 12 06 F6 | 	mov	arg01, #17
18620     00 14 06 F6 | 	mov	arg02, #0
18624     00 16 06 F6 | 	mov	arg03, #0
18628     20 41 B0 FD | 	call	#_hg010b_spin2_setspritesize
1862c     10 00 90 FD | 	jmp	#LR__2011
18630                 | LR__2010
18630     11 12 06 F6 | 	mov	arg01, #17
18634     08 14 06 F6 | 	mov	arg02, #8
18638     10 16 06 F6 | 	mov	arg03, #16
1863c     0C 41 B0 FD | 	call	#_hg010b_spin2_setspritesize
18640                 | LR__2011
18640                 | _do_cursor_ret
18640     2D 00 64 FD | 	ret
18644                 | 
18644                 | ' 
18644                 | ' 
18644                 | ' sub do_click
18644                 | _do_click
18644     30 22 BF FD | 	call	#_pop
18648     00 FA 4D F2 | 	cmps	result1, #0 wz
1864c                 | ' t1=pop()
1864c                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
1864c     58 00 00 AF 
18650     20 E5 05 A1 |  if_e	add	objptr, ##45344
18654     F2 00 68 AC |  if_e	wrlong	#0, objptr
18658     58 00 00 FF 
1865c     20 E5 C5 F3 | 	sumz	objptr, ##45344
18660     F2 02 68 5C |  if_ne	wrlong	#1, objptr
18664     58 00 00 5F 
18668     20 E5 85 51 |  if_ne	sub	objptr, ##45344
1866c                 | _do_click_ret
1866c     2D 00 64 FD | 	ret
18670                 | 
18670                 | ' 
18670                 | ' 
18670                 | ' sub do_beep
18670                 | _do_beep
18670     02 4A 05 F6 | 	mov	COUNT_, #2
18674     A8 00 A0 FD | 	call	#pushregs_
18678     20 F0 07 F1 | 	add	ptra, #32
1867c     F8 21 BF FD | 	call	#_pop
18680     FD 1E 02 F6 | 	mov	local01, result1
18684     FE 1C 02 F6 | 	mov	arg06, result2
18688     FF 20 02 F6 | 	mov	local02, result3
1868c     0C 4E 05 F1 | 	add	fp, #12
18690     A7 1E 62 FC | 	wrlong	local01, fp
18694     04 4E 05 F1 | 	add	fp, #4
18698     A7 1C 62 FC | 	wrlong	arg06, fp
1869c     04 4E 05 F1 | 	add	fp, #4
186a0     A7 20 62 FC | 	wrlong	local02, fp
186a4     14 4E 85 F1 | 	sub	fp, #20
186a8     CC 21 BF FD | 	call	#_pop
186ac     A7 FA 61 FC | 	wrlong	result1, fp
186b0     04 4E 05 F1 | 	add	fp, #4
186b4     A7 FC 61 FC | 	wrlong	result2, fp
186b8     04 4E 05 F1 | 	add	fp, #4
186bc     A7 FE 61 FC | 	wrlong	result3, fp
186c0                 | ' 
186c0                 | ' t2=pop()
186c0                 | ' t1=pop()
186c0                 | ' 
186c0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
186c0     08 4E 85 F1 | 	sub	fp, #8
186c4     1C FE 0D F2 | 	cmp	result3, #28 wz
186c8     08 4E 05 51 |  if_ne	add	fp, #8
186cc     A7 20 02 5B |  if_ne	rdlong	local02, fp
186d0     08 4E 85 51 |  if_ne	sub	fp, #8
186d4     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
186d8     A7 1E 02 AB |  if_e	rdlong	local01, fp
186dc     18 4E 05 A1 |  if_e	add	fp, #24
186e0     A7 1E 62 AC |  if_e	wrlong	local01, fp
186e4     18 4E 85 A1 |  if_e	sub	fp, #24
186e8     14 00 90 AD |  if_e	jmp	#LR__2020
186ec     A7 12 02 F6 | 	mov	arg01, fp
186f0     C4 AC BF FD | 	call	#_converttoint
186f4     18 4E 05 F1 | 	add	fp, #24
186f8     A7 FA 61 FC | 	wrlong	result1, fp
186fc     18 4E 85 F1 | 	sub	fp, #24
18700                 | LR__2020
18700     1C 4E 05 F1 | 	add	fp, #28
18704     A7 FE 48 FC | 	wrbyte	#127, fp
18708     01 4E 05 F1 | 	add	fp, #1
1870c     A7 00 49 FC | 	wrbyte	#128, fp
18710     01 4E 85 F1 | 	sub	fp, #1
18714     A7 14 02 F6 | 	mov	arg02, fp
18718     04 4E 85 F1 | 	sub	fp, #4
1871c     A7 16 02 FB | 	rdlong	arg03, fp
18720     18 4E 85 F1 | 	sub	fp, #24
18724     01 16 66 F0 | 	shl	arg03, #1
18728     07 12 06 F6 | 	mov	arg01, #7
1872c     0E 18 C6 F9 | 	decod	arg04, #14
18730     02 1A 06 F6 | 	mov	arg05, #2
18734     00 1C 06 F6 | 	mov	arg06, #0
18738     0B 00 00 FF 
1873c     CC E4 05 F1 | 	add	objptr, ##5836
18740     2C 60 B0 FD | 	call	#_audio096_spin2_play8
18744     0B 00 00 FF 
18748     CC E4 85 F1 | 	sub	objptr, ##5836
1874c     0C 4E 05 F1 | 	add	fp, #12
18750     A7 12 02 F6 | 	mov	arg01, fp
18754     0C 4E 85 F1 | 	sub	fp, #12
18758     B4 21 BF FD | 	call	#_push
1875c     B8 F5 BF FD | 	call	#_do_waitms
18760     07 12 06 F6 | 	mov	arg01, #7
18764     0B 00 00 FF 
18768     CC E4 05 F1 | 	add	objptr, ##5836
1876c     A4 60 B0 FD | 	call	#_audio096_spin2_stop
18770     0B 00 00 FF 
18774     CC E4 85 F1 | 	sub	objptr, ##5836
18778     A7 F0 03 F6 | 	mov	ptra, fp
1877c     B2 00 A0 FD | 	call	#popregs_
18780                 | _do_beep_ret
18780     2D 00 64 FD | 	ret
18784                 | 
18784                 | ' 
18784                 | ' sub do_no_command
18784                 | _do_no_command
18784     17 12 06 F6 | 	mov	arg01, #23
18788     E0 1E B0 FD | 	call	#_printerror
1878c                 | _do_no_command_ret
1878c     2D 00 64 FD | 	ret
18790                 | 
18790                 | ' 
18790                 | ' sub do_negative
18790                 | _do_negative
18790     02 4A 05 F6 | 	mov	COUNT_, #2
18794     A8 00 A0 FD | 	call	#pushregs_
18798     0C F0 07 F1 | 	add	ptra, #12
1879c     D8 20 BF FD | 	call	#_pop
187a0     FF 1E 02 F6 | 	mov	local01, result3
187a4     A7 FA 61 FC | 	wrlong	result1, fp
187a8     04 4E 05 F1 | 	add	fp, #4
187ac     A7 FC 61 FC | 	wrlong	result2, fp
187b0     04 4E 05 F1 | 	add	fp, #4
187b4     A7 1E 62 FC | 	wrlong	local01, fp
187b8                 | ' t1=pop()
187b8                 | ' if t1.result_type=result_int then 
187b8     08 4E 85 F1 | 	sub	fp, #8
187bc     1C 1E 0E F2 | 	cmp	local01, #28 wz
187c0     A7 20 02 AB |  if_e	rdlong	local02, fp
187c4     10 1F 62 A6 |  if_e	neg	local01, local02
187c8     A7 1E 62 AC |  if_e	wrlong	local01, fp
187cc     5C 00 90 AD |  if_e	jmp	#LR__2032
187d0     08 4E 05 F1 | 	add	fp, #8
187d4     A7 1E 02 FB | 	rdlong	local01, fp
187d8     08 4E 85 F1 | 	sub	fp, #8
187dc     1D 1E 0E F2 | 	cmp	local01, #29 wz
187e0     1C 00 90 5D |  if_ne	jmp	#LR__2030
187e4     A7 20 02 FB | 	rdlong	local02, fp
187e8     10 1F 62 F6 | 	neg	local01, local02
187ec     A7 1E 62 FC | 	wrlong	local01, fp
187f0     08 4E 05 F1 | 	add	fp, #8
187f4     A7 38 68 FC | 	wrlong	#28, fp
187f8     08 4E 85 F1 | 	sub	fp, #8
187fc     2C 00 90 FD | 	jmp	#LR__2031
18800                 | LR__2030
18800     08 4E 05 F1 | 	add	fp, #8
18804     A7 1E 02 FB | 	rdlong	local01, fp
18808     08 4E 85 F1 | 	sub	fp, #8
1880c     1E 1E 0E F2 | 	cmp	local01, #30 wz
18810     A7 FA 01 AB |  if_e	rdlong	result1, fp
18814     1F FA E5 A4 |  if_e	bitnot	result1, #31
18818     A7 FA 61 AC |  if_e	wrlong	result1, fp
1881c     08 4E 05 51 |  if_ne	add	fp, #8
18820     A7 FE 69 5C |  if_ne	wrlong	#255, fp
18824     08 4E 85 51 |  if_ne	sub	fp, #8
18828     A7 50 68 5C |  if_ne	wrlong	#40, fp
1882c                 | LR__2031
1882c                 | LR__2032
1882c     A7 12 02 F6 | 	mov	arg01, fp
18830     DC 20 BF FD | 	call	#_push
18834     A7 F0 03 F6 | 	mov	ptra, fp
18838     B2 00 A0 FD | 	call	#popregs_
1883c                 | _do_negative_ret
1883c     2D 00 64 FD | 	ret
18840                 | 
18840                 | ' 
18840                 | ' sub do_abs
18840                 | _do_abs
18840     01 4A 05 F6 | 	mov	COUNT_, #1
18844     A8 00 A0 FD | 	call	#pushregs_
18848     0C F0 07 F1 | 	add	ptra, #12
1884c     28 20 BF FD | 	call	#_pop
18850     FF 1E 02 F6 | 	mov	local01, result3
18854     A7 FA 61 FC | 	wrlong	result1, fp
18858     04 4E 05 F1 | 	add	fp, #4
1885c     A7 FC 61 FC | 	wrlong	result2, fp
18860     04 4E 05 F1 | 	add	fp, #4
18864     A7 1E 62 FC | 	wrlong	local01, fp
18868                 | ' t1=pop()
18868                 | ' if t1.result_type=result_int then 
18868     08 4E 85 F1 | 	sub	fp, #8
1886c     1C 1E 0E F2 | 	cmp	local01, #28 wz
18870     A7 12 02 AB |  if_e	rdlong	arg01, fp
18874     09 1F 42 A6 |  if_e	abs	local01, arg01
18878     A7 1E 62 AC |  if_e	wrlong	local01, fp
1887c     2C 00 90 AD |  if_e	jmp	#LR__2040
18880     08 4E 05 F1 | 	add	fp, #8
18884     A7 1E 02 FB | 	rdlong	local01, fp
18888     08 4E 85 F1 | 	sub	fp, #8
1888c     1E 1E 0E F2 | 	cmp	local01, #30 wz
18890     A7 FA 01 AB |  if_e	rdlong	result1, fp
18894     1F FA 05 A4 |  if_e	bitl	result1, #31
18898     A7 FA 61 AC |  if_e	wrlong	result1, fp
1889c     08 4E 05 51 |  if_ne	add	fp, #8
188a0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
188a4     08 4E 85 51 |  if_ne	sub	fp, #8
188a8     A7 50 68 5C |  if_ne	wrlong	#40, fp
188ac                 | LR__2040
188ac     A7 12 02 F6 | 	mov	arg01, fp
188b0     5C 20 BF FD | 	call	#_push
188b4     A7 F0 03 F6 | 	mov	ptra, fp
188b8     B2 00 A0 FD | 	call	#popregs_
188bc                 | _do_abs_ret
188bc     2D 00 64 FD | 	ret
188c0                 | 
188c0                 | ' 
188c0                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
188c0                 | ' 
188c0                 | ' ''----------------------------------------------------------------------------------------------------
188c0                 | ' ''------------------ Initialization procedures -------------------------------------------------------
188c0                 | ' ''----------------------------------------------------------------------------------------------------
188c0                 | ' 
188c0                 | ' ''--------------------------- Command function pointers
188c0                 | ' 
188c0                 | ' sub init_commands
188c0                 | _init_commands
188c0                 | ' 
188c0                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
188c0     00 00 06 F6 | 	mov	_var01, #0
188c4     97 16 48 FB | 	callpa	#(@LR__2051-@LR__2050)>>2,fcache_load_ptr_
188c8                 | LR__2050
188c8     00 FB 01 F6 | 	mov	result1, _var01
188cc     02 FA 65 F0 | 	shl	result1, #2
188d0     43 00 00 FF 
188d4     90 E4 05 F1 | 	add	objptr, ##34448
188d8     F2 FA 01 F1 | 	add	result1, objptr
188dc     43 00 00 FF 
188e0     90 E4 85 F1 | 	sub	objptr, ##34448
188e4     FD E4 61 FC | 	wrlong	objptr, result1
188e8     01 00 06 F1 | 	add	_var01, #1
188ec     00 01 56 F2 | 	cmps	_var01, #256 wc
188f0     D4 FF 9F CD |  if_b	jmp	#LR__2050
188f4                 | LR__2051
188f4     F2 FA 01 F6 | 	mov	result1, objptr
188f8     14 FA 25 F4 | 	bith	result1, #20
188fc     43 00 00 FF 
18900     94 E4 05 F1 | 	add	objptr, ##34452
18904     F2 FA 61 FC | 	wrlong	result1, objptr
18908     43 00 00 FF 
1890c     94 E4 85 F1 | 	sub	objptr, ##34452
18910     F2 FA 01 F6 | 	mov	result1, objptr
18914     15 FA 25 F4 | 	bith	result1, #21
18918     43 00 00 FF 
1891c     98 E4 05 F1 | 	add	objptr, ##34456
18920     F2 FA 61 FC | 	wrlong	result1, objptr
18924     43 00 00 FF 
18928     98 E4 85 F1 | 	sub	objptr, ##34456
1892c     F2 FA 01 F6 | 	mov	result1, objptr
18930     34 FA 25 F4 | 	bith	result1, #52
18934     43 00 00 FF 
18938     9C E4 05 F1 | 	add	objptr, ##34460
1893c     F2 FA 61 FC | 	wrlong	result1, objptr
18940     43 00 00 FF 
18944     9C E4 85 F1 | 	sub	objptr, ##34460
18948     F2 FA 01 F6 | 	mov	result1, objptr
1894c     16 FA 25 F4 | 	bith	result1, #22
18950     43 00 00 FF 
18954     A4 E4 05 F1 | 	add	objptr, ##34468
18958     F2 FA 61 FC | 	wrlong	result1, objptr
1895c     43 00 00 FF 
18960     A4 E4 85 F1 | 	sub	objptr, ##34468
18964     F2 FA 01 F6 | 	mov	result1, objptr
18968     00 28 00 FF 
1896c     00 FA 45 F5 | 	or	result1, ##5242880
18970     43 00 00 FF 
18974     A8 E4 05 F1 | 	add	objptr, ##34472
18978     F2 FA 61 FC | 	wrlong	result1, objptr
1897c     43 00 00 FF 
18980     A8 E4 85 F1 | 	sub	objptr, ##34472
18984     F2 FA 01 F6 | 	mov	result1, objptr
18988     35 FA 25 F4 | 	bith	result1, #53
1898c     43 00 00 FF 
18990     AC E4 05 F1 | 	add	objptr, ##34476
18994     F2 FA 61 FC | 	wrlong	result1, objptr
18998     43 00 00 FF 
1899c     AC E4 85 F1 | 	sub	objptr, ##34476
189a0     F2 FA 01 F6 | 	mov	result1, objptr
189a4     54 FA 25 F4 | 	bith	result1, #84
189a8     43 00 00 FF 
189ac     B0 E4 05 F1 | 	add	objptr, ##34480
189b0     F2 FA 61 FC | 	wrlong	result1, objptr
189b4     43 00 00 FF 
189b8     B0 E4 85 F1 | 	sub	objptr, ##34480
189bc     F2 FA 01 F6 | 	mov	result1, objptr
189c0     17 FA 25 F4 | 	bith	result1, #23
189c4     43 00 00 FF 
189c8     B4 E4 05 F1 | 	add	objptr, ##34484
189cc     F2 FA 61 FC | 	wrlong	result1, objptr
189d0     43 00 00 FF 
189d4     B4 E4 85 F1 | 	sub	objptr, ##34484
189d8     F2 FA 01 F6 | 	mov	result1, objptr
189dc     00 48 00 FF 
189e0     00 FA 45 F5 | 	or	result1, ##9437184
189e4     43 00 00 FF 
189e8     B8 E4 05 F1 | 	add	objptr, ##34488
189ec     F2 FA 61 FC | 	wrlong	result1, objptr
189f0     43 00 00 FF 
189f4     B8 E4 85 F1 | 	sub	objptr, ##34488
189f8     F2 FA 01 F6 | 	mov	result1, objptr
189fc     00 50 00 FF 
18a00     00 FA 45 F5 | 	or	result1, ##10485760
18a04     43 00 00 FF 
18a08     BC E4 05 F1 | 	add	objptr, ##34492
18a0c     F2 FA 61 FC | 	wrlong	result1, objptr
18a10     43 00 00 FF 
18a14     BC E4 85 F1 | 	sub	objptr, ##34492
18a18     F2 FA 01 F6 | 	mov	result1, objptr
18a1c     00 58 00 FF 
18a20     00 FA 45 F5 | 	or	result1, ##11534336
18a24     43 00 00 FF 
18a28     C0 E4 05 F1 | 	add	objptr, ##34496
18a2c     F2 FA 61 FC | 	wrlong	result1, objptr
18a30     43 00 00 FF 
18a34     C0 E4 85 F1 | 	sub	objptr, ##34496
18a38     F2 FA 01 F6 | 	mov	result1, objptr
18a3c     36 FA 25 F4 | 	bith	result1, #54
18a40     43 00 00 FF 
18a44     D4 E4 05 F1 | 	add	objptr, ##34516
18a48     F2 FA 61 FC | 	wrlong	result1, objptr
18a4c     43 00 00 FF 
18a50     D4 E4 85 F1 | 	sub	objptr, ##34516
18a54     F2 FA 01 F6 | 	mov	result1, objptr
18a58     00 68 00 FF 
18a5c     00 FA 45 F5 | 	or	result1, ##13631488
18a60     43 00 00 FF 
18a64     04 E5 05 F1 | 	add	objptr, ##34564
18a68     F2 FA 61 FC | 	wrlong	result1, objptr
18a6c     43 00 00 FF 
18a70     04 E5 85 F1 | 	sub	objptr, ##34564
18a74     F2 FA 01 F6 | 	mov	result1, objptr
18a78     00 68 00 FF 
18a7c     00 FA 45 F5 | 	or	result1, ##13631488
18a80     43 00 00 FF 
18a84     00 E5 05 F1 | 	add	objptr, ##34560
18a88     F2 FA 61 FC | 	wrlong	result1, objptr
18a8c     43 00 00 FF 
18a90     00 E5 85 F1 | 	sub	objptr, ##34560
18a94     F2 FA 01 F6 | 	mov	result1, objptr
18a98     00 68 00 FF 
18a9c     00 FA 45 F5 | 	or	result1, ##13631488
18aa0     43 00 00 FF 
18aa4     08 E5 05 F1 | 	add	objptr, ##34568
18aa8     F2 FA 61 FC | 	wrlong	result1, objptr
18aac     43 00 00 FF 
18ab0     08 E5 85 F1 | 	sub	objptr, ##34568
18ab4     F2 FA 01 F6 | 	mov	result1, objptr
18ab8     00 68 00 FF 
18abc     00 FA 45 F5 | 	or	result1, ##13631488
18ac0     43 00 00 FF 
18ac4     0C E5 05 F1 | 	add	objptr, ##34572
18ac8     F2 FA 61 FC | 	wrlong	result1, objptr
18acc     43 00 00 FF 
18ad0     0C E5 85 F1 | 	sub	objptr, ##34572
18ad4     F2 FA 01 F6 | 	mov	result1, objptr
18ad8     00 68 00 FF 
18adc     00 FA 45 F5 | 	or	result1, ##13631488
18ae0     43 00 00 FF 
18ae4     3C E5 05 F1 | 	add	objptr, ##34620
18ae8     F2 FA 61 FC | 	wrlong	result1, objptr
18aec     43 00 00 FF 
18af0     3C E5 85 F1 | 	sub	objptr, ##34620
18af4     F2 FA 01 F6 | 	mov	result1, objptr
18af8     55 FA 25 F4 | 	bith	result1, #85
18afc     43 00 00 FF 
18b00     EC E4 05 F1 | 	add	objptr, ##34540
18b04     F2 FA 61 FC | 	wrlong	result1, objptr
18b08     43 00 00 FF 
18b0c     EC E4 85 F1 | 	sub	objptr, ##34540
18b10     F2 FA 01 F6 | 	mov	result1, objptr
18b14     00 68 00 FF 
18b18     00 FA 45 F5 | 	or	result1, ##13631488
18b1c     43 00 00 FF 
18b20     10 E5 05 F1 | 	add	objptr, ##34576
18b24     F2 FA 61 FC | 	wrlong	result1, objptr
18b28     43 00 00 FF 
18b2c     10 E5 85 F1 | 	sub	objptr, ##34576
18b30     F2 FA 01 F6 | 	mov	result1, objptr
18b34     00 68 00 FF 
18b38     00 FA 45 F5 | 	or	result1, ##13631488
18b3c     43 00 00 FF 
18b40     14 E5 05 F1 | 	add	objptr, ##34580
18b44     F2 FA 61 FC | 	wrlong	result1, objptr
18b48     43 00 00 FF 
18b4c     14 E5 85 F1 | 	sub	objptr, ##34580
18b50     F2 FA 01 F6 | 	mov	result1, objptr
18b54     00 68 00 FF 
18b58     00 FA 45 F5 | 	or	result1, ##13631488
18b5c     43 00 00 FF 
18b60     18 E5 05 F1 | 	add	objptr, ##34584
18b64     F2 FA 61 FC | 	wrlong	result1, objptr
18b68     43 00 00 FF 
18b6c     18 E5 85 F1 | 	sub	objptr, ##34584
18b70     F2 FA 01 F6 | 	mov	result1, objptr
18b74     74 FA 25 F4 | 	bith	result1, #116
18b78     43 00 00 FF 
18b7c     90 E5 05 F1 | 	add	objptr, ##34704
18b80     F2 FA 61 FC | 	wrlong	result1, objptr
18b84     43 00 00 FF 
18b88     90 E5 85 F1 | 	sub	objptr, ##34704
18b8c     F2 FA 01 F6 | 	mov	result1, objptr
18b90     18 FA 25 F4 | 	bith	result1, #24
18b94     43 00 00 FF 
18b98     94 E5 05 F1 | 	add	objptr, ##34708
18b9c     F2 FA 61 FC | 	wrlong	result1, objptr
18ba0     43 00 00 FF 
18ba4     94 E5 85 F1 | 	sub	objptr, ##34708
18ba8     F2 FA 01 F6 | 	mov	result1, objptr
18bac     00 88 00 FF 
18bb0     00 FA 45 F5 | 	or	result1, ##17825792
18bb4     43 00 00 FF 
18bb8     98 E5 05 F1 | 	add	objptr, ##34712
18bbc     F2 FA 61 FC | 	wrlong	result1, objptr
18bc0     43 00 00 FF 
18bc4     98 E5 85 F1 | 	sub	objptr, ##34712
18bc8     F2 FA 01 F6 | 	mov	result1, objptr
18bcc     00 90 00 FF 
18bd0     00 FA 45 F5 | 	or	result1, ##18874368
18bd4     43 00 00 FF 
18bd8     9C E5 05 F1 | 	add	objptr, ##34716
18bdc     F2 FA 61 FC | 	wrlong	result1, objptr
18be0     43 00 00 FF 
18be4     9C E5 85 F1 | 	sub	objptr, ##34716
18be8     F2 FA 01 F6 | 	mov	result1, objptr
18bec     00 98 00 FF 
18bf0     00 FA 45 F5 | 	or	result1, ##19922944
18bf4     43 00 00 FF 
18bf8     A0 E5 05 F1 | 	add	objptr, ##34720
18bfc     F2 FA 61 FC | 	wrlong	result1, objptr
18c00     43 00 00 FF 
18c04     A0 E5 85 F1 | 	sub	objptr, ##34720
18c08     F2 FA 01 F6 | 	mov	result1, objptr
18c0c     00 A0 00 FF 
18c10     00 FA 45 F5 | 	or	result1, ##20971520
18c14     43 00 00 FF 
18c18     A4 E5 05 F1 | 	add	objptr, ##34724
18c1c     F2 FA 61 FC | 	wrlong	result1, objptr
18c20     43 00 00 FF 
18c24     A4 E5 85 F1 | 	sub	objptr, ##34724
18c28     F2 FA 01 F6 | 	mov	result1, objptr
18c2c     00 A8 00 FF 
18c30     00 FA 45 F5 | 	or	result1, ##22020096
18c34     43 00 00 FF 
18c38     A8 E5 05 F1 | 	add	objptr, ##34728
18c3c     F2 FA 61 FC | 	wrlong	result1, objptr
18c40     43 00 00 FF 
18c44     A8 E5 85 F1 | 	sub	objptr, ##34728
18c48     F2 FA 01 F6 | 	mov	result1, objptr
18c4c     00 B0 00 FF 
18c50     00 FA 45 F5 | 	or	result1, ##23068672
18c54     43 00 00 FF 
18c58     AC E5 05 F1 | 	add	objptr, ##34732
18c5c     F2 FA 61 FC | 	wrlong	result1, objptr
18c60     43 00 00 FF 
18c64     AC E5 85 F1 | 	sub	objptr, ##34732
18c68     F2 FA 01 F6 | 	mov	result1, objptr
18c6c     00 B8 00 FF 
18c70     00 FA 45 F5 | 	or	result1, ##24117248
18c74     43 00 00 FF 
18c78     B0 E5 05 F1 | 	add	objptr, ##34736
18c7c     F2 FA 61 FC | 	wrlong	result1, objptr
18c80     43 00 00 FF 
18c84     B0 E5 85 F1 | 	sub	objptr, ##34736
18c88     F2 FA 01 F6 | 	mov	result1, objptr
18c8c     37 FA 25 F4 | 	bith	result1, #55
18c90     43 00 00 FF 
18c94     B4 E5 05 F1 | 	add	objptr, ##34740
18c98     F2 FA 61 FC | 	wrlong	result1, objptr
18c9c     43 00 00 FF 
18ca0     B4 E5 85 F1 | 	sub	objptr, ##34740
18ca4     F2 FA 01 F6 | 	mov	result1, objptr
18ca8     00 C8 00 FF 
18cac     00 FA 45 F5 | 	or	result1, ##26214400
18cb0     43 00 00 FF 
18cb4     B8 E5 05 F1 | 	add	objptr, ##34744
18cb8     F2 FA 61 FC | 	wrlong	result1, objptr
18cbc     43 00 00 FF 
18cc0     B8 E5 85 F1 | 	sub	objptr, ##34744
18cc4     F2 FA 01 F6 | 	mov	result1, objptr
18cc8     00 D0 00 FF 
18ccc     00 FA 45 F5 | 	or	result1, ##27262976
18cd0     43 00 00 FF 
18cd4     BC E5 05 F1 | 	add	objptr, ##34748
18cd8     F2 FA 61 FC | 	wrlong	result1, objptr
18cdc     43 00 00 FF 
18ce0     BC E5 85 F1 | 	sub	objptr, ##34748
18ce4     F2 FA 01 F6 | 	mov	result1, objptr
18ce8     00 D8 00 FF 
18cec     00 FA 45 F5 | 	or	result1, ##28311552
18cf0     43 00 00 FF 
18cf4     C0 E5 05 F1 | 	add	objptr, ##34752
18cf8     F2 FA 61 FC | 	wrlong	result1, objptr
18cfc     43 00 00 FF 
18d00     C0 E5 85 F1 | 	sub	objptr, ##34752
18d04     F2 FA 01 F6 | 	mov	result1, objptr
18d08     56 FA 25 F4 | 	bith	result1, #86
18d0c     43 00 00 FF 
18d10     C4 E5 05 F1 | 	add	objptr, ##34756
18d14     F2 FA 61 FC | 	wrlong	result1, objptr
18d18     43 00 00 FF 
18d1c     C4 E5 85 F1 | 	sub	objptr, ##34756
18d20     F2 FA 01 F6 | 	mov	result1, objptr
18d24     00 E8 00 FF 
18d28     00 FA 45 F5 | 	or	result1, ##30408704
18d2c     45 00 00 FF 
18d30     8C E4 05 F1 | 	add	objptr, ##35468
18d34     F2 FA 61 FC | 	wrlong	result1, objptr
18d38     45 00 00 FF 
18d3c     8C E4 85 F1 | 	sub	objptr, ##35468
18d40     F2 FA 01 F6 | 	mov	result1, objptr
18d44     75 FA 25 F4 | 	bith	result1, #117
18d48     43 00 00 FF 
18d4c     C8 E5 05 F1 | 	add	objptr, ##34760
18d50     F2 FA 61 FC | 	wrlong	result1, objptr
18d54     43 00 00 FF 
18d58     C8 E5 85 F1 | 	sub	objptr, ##34760
18d5c     F2 FA 01 F6 | 	mov	result1, objptr
18d60     94 FA 25 F4 | 	bith	result1, #148
18d64     43 00 00 FF 
18d68     DC E5 05 F1 | 	add	objptr, ##34780
18d6c     F2 FA 61 FC | 	wrlong	result1, objptr
18d70     43 00 00 FF 
18d74     DC E5 85 F1 | 	sub	objptr, ##34780
18d78     F2 FA 01 F6 | 	mov	result1, objptr
18d7c     19 FA 25 F4 | 	bith	result1, #25
18d80     43 00 00 FF 
18d84     CC E5 05 F1 | 	add	objptr, ##34764
18d88     F2 FA 61 FC | 	wrlong	result1, objptr
18d8c     43 00 00 FF 
18d90     CC E5 85 F1 | 	sub	objptr, ##34764
18d94     F2 FA 01 F6 | 	mov	result1, objptr
18d98     00 08 01 FF 
18d9c     00 FA 45 F5 | 	or	result1, ##34603008
18da0     43 00 00 FF 
18da4     E8 E4 05 F1 | 	add	objptr, ##34536
18da8     F2 FA 61 FC | 	wrlong	result1, objptr
18dac     43 00 00 FF 
18db0     E8 E4 85 F1 | 	sub	objptr, ##34536
18db4     F2 FA 01 F6 | 	mov	result1, objptr
18db8     00 10 01 FF 
18dbc     00 FA 45 F5 | 	or	result1, ##35651584
18dc0     43 00 00 FF 
18dc4     D0 E5 05 F1 | 	add	objptr, ##34768
18dc8     F2 FA 61 FC | 	wrlong	result1, objptr
18dcc     43 00 00 FF 
18dd0     D0 E5 85 F1 | 	sub	objptr, ##34768
18dd4     F2 FA 01 F6 | 	mov	result1, objptr
18dd8     00 18 01 FF 
18ddc     00 FA 45 F5 | 	or	result1, ##36700160
18de0     43 00 00 FF 
18de4     D4 E5 05 F1 | 	add	objptr, ##34772
18de8     F2 FA 61 FC | 	wrlong	result1, objptr
18dec     43 00 00 FF 
18df0     D4 E5 85 F1 | 	sub	objptr, ##34772
18df4     F2 FA 01 F6 | 	mov	result1, objptr
18df8     00 20 01 FF 
18dfc     00 FA 45 F5 | 	or	result1, ##37748736
18e00     43 00 00 FF 
18e04     D8 E5 05 F1 | 	add	objptr, ##34776
18e08     F2 FA 61 FC | 	wrlong	result1, objptr
18e0c     43 00 00 FF 
18e10     D8 E5 85 F1 | 	sub	objptr, ##34776
18e14     F2 FA 01 F6 | 	mov	result1, objptr
18e18     00 28 01 FF 
18e1c     00 FA 45 F5 | 	or	result1, ##38797312
18e20     43 00 00 FF 
18e24     E4 E5 05 F1 | 	add	objptr, ##34788
18e28     F2 FA 61 FC | 	wrlong	result1, objptr
18e2c     43 00 00 FF 
18e30     E4 E5 85 F1 | 	sub	objptr, ##34788
18e34     F2 FA 01 F6 | 	mov	result1, objptr
18e38     00 30 01 FF 
18e3c     00 FA 45 F5 | 	or	result1, ##39845888
18e40     43 00 00 FF 
18e44     E8 E5 05 F1 | 	add	objptr, ##34792
18e48     F2 FA 61 FC | 	wrlong	result1, objptr
18e4c     43 00 00 FF 
18e50     E8 E5 85 F1 | 	sub	objptr, ##34792
18e54     F2 FA 01 F6 | 	mov	result1, objptr
18e58     00 38 01 FF 
18e5c     00 FA 45 F5 | 	or	result1, ##40894464
18e60     43 00 00 FF 
18e64     EC E5 05 F1 | 	add	objptr, ##34796
18e68     F2 FA 61 FC | 	wrlong	result1, objptr
18e6c     43 00 00 FF 
18e70     EC E5 85 F1 | 	sub	objptr, ##34796
18e74     F2 FA 01 F6 | 	mov	result1, objptr
18e78     00 40 01 FF 
18e7c     00 FA 45 F5 | 	or	result1, ##41943040
18e80     43 00 00 FF 
18e84     F0 E5 05 F1 | 	add	objptr, ##34800
18e88     F2 FA 61 FC | 	wrlong	result1, objptr
18e8c     43 00 00 FF 
18e90     F0 E5 85 F1 | 	sub	objptr, ##34800
18e94     F2 FA 01 F6 | 	mov	result1, objptr
18e98     00 48 01 FF 
18e9c     00 FA 45 F5 | 	or	result1, ##42991616
18ea0     43 00 00 FF 
18ea4     F8 E5 05 F1 | 	add	objptr, ##34808
18ea8     F2 FA 61 FC | 	wrlong	result1, objptr
18eac     43 00 00 FF 
18eb0     F8 E5 85 F1 | 	sub	objptr, ##34808
18eb4     F2 FA 01 F6 | 	mov	result1, objptr
18eb8     00 08 01 FF 
18ebc     00 FA 45 F5 | 	or	result1, ##34603008
18ec0     43 00 00 FF 
18ec4     FC E5 05 F1 | 	add	objptr, ##34812
18ec8     F2 FA 61 FC | 	wrlong	result1, objptr
18ecc     43 00 00 FF 
18ed0     FC E5 85 F1 | 	sub	objptr, ##34812
18ed4     F2 FA 01 F6 | 	mov	result1, objptr
18ed8     00 50 01 FF 
18edc     00 FA 45 F5 | 	or	result1, ##44040192
18ee0     43 00 00 FF 
18ee4     FC E4 05 F1 | 	add	objptr, ##34556
18ee8     F2 FA 61 FC | 	wrlong	result1, objptr
18eec     43 00 00 FF 
18ef0     FC E4 85 F1 | 	sub	objptr, ##34556
18ef4     F2 FA 01 F6 | 	mov	result1, objptr
18ef8     00 58 01 FF 
18efc     00 FA 45 F5 | 	or	result1, ##45088768
18f00     43 00 00 FF 
18f04     2C E5 05 F1 | 	add	objptr, ##34604
18f08     F2 FA 61 FC | 	wrlong	result1, objptr
18f0c     43 00 00 FF 
18f10     2C E5 85 F1 | 	sub	objptr, ##34604
18f14     F2 FA 01 F6 | 	mov	result1, objptr
18f18     00 60 01 FF 
18f1c     00 FA 45 F5 | 	or	result1, ##46137344
18f20     43 00 00 FF 
18f24     28 E5 05 F1 | 	add	objptr, ##34600
18f28     F2 FA 61 FC | 	wrlong	result1, objptr
18f2c     43 00 00 FF 
18f30     28 E5 85 F1 | 	sub	objptr, ##34600
18f34     F2 FA 01 F6 | 	mov	result1, objptr
18f38     00 68 01 FF 
18f3c     00 FA 45 F5 | 	or	result1, ##47185920
18f40     43 00 00 FF 
18f44     CC E4 05 F1 | 	add	objptr, ##34508
18f48     F2 FA 61 FC | 	wrlong	result1, objptr
18f4c     43 00 00 FF 
18f50     CC E4 85 F1 | 	sub	objptr, ##34508
18f54     F2 FA 01 F6 | 	mov	result1, objptr
18f58     00 70 01 FF 
18f5c     00 FA 45 F5 | 	or	result1, ##48234496
18f60     43 00 00 FF 
18f64     D0 E4 05 F1 | 	add	objptr, ##34512
18f68     F2 FA 61 FC | 	wrlong	result1, objptr
18f6c     43 00 00 FF 
18f70     D0 E4 85 F1 | 	sub	objptr, ##34512
18f74     F2 FA 01 F6 | 	mov	result1, objptr
18f78     00 78 01 FF 
18f7c     00 FA 45 F5 | 	or	result1, ##49283072
18f80     43 00 00 FF 
18f84     38 E5 05 F1 | 	add	objptr, ##34616
18f88     F2 FA 61 FC | 	wrlong	result1, objptr
18f8c     43 00 00 FF 
18f90     38 E5 85 F1 | 	sub	objptr, ##34616
18f94     F2 FA 01 F6 | 	mov	result1, objptr
18f98     38 FA 25 F4 | 	bith	result1, #56
18f9c     43 00 00 FF 
18fa0     E0 E5 05 F1 | 	add	objptr, ##34784
18fa4     F2 FA 61 FC | 	wrlong	result1, objptr
18fa8     43 00 00 FF 
18fac     E0 E5 85 F1 | 	sub	objptr, ##34784
18fb0     F2 FA 01 F6 | 	mov	result1, objptr
18fb4     00 88 01 FF 
18fb8     00 FA 45 F5 | 	or	result1, ##51380224
18fbc     43 00 00 FF 
18fc0     F4 E5 05 F1 | 	add	objptr, ##34804
18fc4     F2 FA 61 FC | 	wrlong	result1, objptr
18fc8     43 00 00 FF 
18fcc     F4 E5 85 F1 | 	sub	objptr, ##34804
18fd0     F2 FA 01 F6 | 	mov	result1, objptr
18fd4     00 90 01 FF 
18fd8     00 FA 45 F5 | 	or	result1, ##52428800
18fdc     44 00 00 FF 
18fe0     00 E4 05 F1 | 	add	objptr, ##34816
18fe4     F2 FA 61 FC | 	wrlong	result1, objptr
18fe8     44 00 00 FF 
18fec     00 E4 85 F1 | 	sub	objptr, ##34816
18ff0     F2 FA 01 F6 | 	mov	result1, objptr
18ff4     00 98 01 FF 
18ff8     00 FA 45 F5 | 	or	result1, ##53477376
18ffc     44 00 00 FF 
19000     04 E4 05 F1 | 	add	objptr, ##34820
19004     F2 FA 61 FC | 	wrlong	result1, objptr
19008     44 00 00 FF 
1900c     04 E4 85 F1 | 	sub	objptr, ##34820
19010     F2 FA 01 F6 | 	mov	result1, objptr
19014     00 A0 01 FF 
19018     00 FA 45 F5 | 	or	result1, ##54525952
1901c     44 00 00 FF 
19020     08 E4 05 F1 | 	add	objptr, ##34824
19024     F2 FA 61 FC | 	wrlong	result1, objptr
19028     44 00 00 FF 
1902c     08 E4 85 F1 | 	sub	objptr, ##34824
19030     F2 FA 01 F6 | 	mov	result1, objptr
19034     00 A8 01 FF 
19038     00 FA 45 F5 | 	or	result1, ##55574528
1903c     44 00 00 FF 
19040     0C E4 05 F1 | 	add	objptr, ##34828
19044     F2 FA 61 FC | 	wrlong	result1, objptr
19048     44 00 00 FF 
1904c     0C E4 85 F1 | 	sub	objptr, ##34828
19050     F2 FA 01 F6 | 	mov	result1, objptr
19054     00 B0 01 FF 
19058     00 FA 45 F5 | 	or	result1, ##56623104
1905c     44 00 00 FF 
19060     10 E4 05 F1 | 	add	objptr, ##34832
19064     F2 FA 61 FC | 	wrlong	result1, objptr
19068     44 00 00 FF 
1906c     10 E4 85 F1 | 	sub	objptr, ##34832
19070     F2 FA 01 F6 | 	mov	result1, objptr
19074     00 B8 01 FF 
19078     00 FA 45 F5 | 	or	result1, ##57671680
1907c     44 00 00 FF 
19080     14 E4 05 F1 | 	add	objptr, ##34836
19084     F2 FA 61 FC | 	wrlong	result1, objptr
19088     44 00 00 FF 
1908c     14 E4 85 F1 | 	sub	objptr, ##34836
19090     F2 FA 01 F6 | 	mov	result1, objptr
19094     94 FA 25 F4 | 	bith	result1, #148
19098     43 00 00 FF 
1909c     DC E5 05 F1 | 	add	objptr, ##34780
190a0     F2 FA 61 FC | 	wrlong	result1, objptr
190a4     43 00 00 FF 
190a8     DC E5 85 F1 | 	sub	objptr, ##34780
190ac     F2 FA 01 F6 | 	mov	result1, objptr
190b0     57 FA 25 F4 | 	bith	result1, #87
190b4     44 00 00 FF 
190b8     1C E4 05 F1 | 	add	objptr, ##34844
190bc     F2 FA 61 FC | 	wrlong	result1, objptr
190c0     44 00 00 FF 
190c4     1C E4 85 F1 | 	sub	objptr, ##34844
190c8     F2 FA 01 F6 | 	mov	result1, objptr
190cc     00 C8 01 FF 
190d0     00 FA 45 F5 | 	or	result1, ##59768832
190d4     44 00 00 FF 
190d8     18 E4 05 F1 | 	add	objptr, ##34840
190dc     F2 FA 61 FC | 	wrlong	result1, objptr
190e0     44 00 00 FF 
190e4     18 E4 85 F1 | 	sub	objptr, ##34840
190e8     F2 FA 01 F6 | 	mov	result1, objptr
190ec     00 D0 01 FF 
190f0     00 FA 45 F5 | 	or	result1, ##60817408
190f4     44 00 00 FF 
190f8     30 E4 05 F1 | 	add	objptr, ##34864
190fc     F2 FA 61 FC | 	wrlong	result1, objptr
19100     44 00 00 FF 
19104     30 E4 85 F1 | 	sub	objptr, ##34864
19108     F2 FA 01 F6 | 	mov	result1, objptr
1910c     00 D8 01 FF 
19110     00 FA 45 F5 | 	or	result1, ##61865984
19114     44 00 00 FF 
19118     34 E4 05 F1 | 	add	objptr, ##34868
1911c     F2 FA 61 FC | 	wrlong	result1, objptr
19120     44 00 00 FF 
19124     34 E4 85 F1 | 	sub	objptr, ##34868
19128     F2 FA 01 F6 | 	mov	result1, objptr
1912c     76 FA 25 F4 | 	bith	result1, #118
19130     44 00 00 FF 
19134     20 E4 05 F1 | 	add	objptr, ##34848
19138     F2 FA 61 FC | 	wrlong	result1, objptr
1913c     44 00 00 FF 
19140     20 E4 85 F1 | 	sub	objptr, ##34848
19144     F2 FA 01 F6 | 	mov	result1, objptr
19148     00 E8 01 FF 
1914c     00 FA 45 F5 | 	or	result1, ##63963136
19150     44 00 00 FF 
19154     24 E4 05 F1 | 	add	objptr, ##34852
19158     F2 FA 61 FC | 	wrlong	result1, objptr
1915c     44 00 00 FF 
19160     24 E4 85 F1 | 	sub	objptr, ##34852
19164     F2 FA 01 F6 | 	mov	result1, objptr
19168     95 FA 25 F4 | 	bith	result1, #149
1916c     44 00 00 FF 
19170     28 E4 05 F1 | 	add	objptr, ##34856
19174     F2 FA 61 FC | 	wrlong	result1, objptr
19178     44 00 00 FF 
1917c     28 E4 85 F1 | 	sub	objptr, ##34856
19180     F2 FA 01 F6 | 	mov	result1, objptr
19184     B4 FA 25 F4 | 	bith	result1, #180
19188     44 00 00 FF 
1918c     2C E4 05 F1 | 	add	objptr, ##34860
19190     F2 FA 61 FC | 	wrlong	result1, objptr
19194     44 00 00 FF 
19198     2C E4 85 F1 | 	sub	objptr, ##34860
1919c     F2 FA 01 F6 | 	mov	result1, objptr
191a0     1A FA 25 F4 | 	bith	result1, #26
191a4     44 00 00 FF 
191a8     3C E4 05 F1 | 	add	objptr, ##34876
191ac     F2 FA 61 FC | 	wrlong	result1, objptr
191b0     44 00 00 FF 
191b4     3C E4 85 F1 | 	sub	objptr, ##34876
191b8     F2 FA 01 F6 | 	mov	result1, objptr
191bc     00 08 02 FF 
191c0     00 FA 45 F5 | 	or	result1, ##68157440
191c4     44 00 00 FF 
191c8     38 E4 05 F1 | 	add	objptr, ##34872
191cc     F2 FA 61 FC | 	wrlong	result1, objptr
191d0     44 00 00 FF 
191d4     38 E4 85 F1 | 	sub	objptr, ##34872
191d8     F2 FA 01 F6 | 	mov	result1, objptr
191dc     00 10 02 FF 
191e0     00 FA 45 F5 | 	or	result1, ##69206016
191e4     44 00 00 FF 
191e8     48 E4 05 F1 | 	add	objptr, ##34888
191ec     F2 FA 61 FC | 	wrlong	result1, objptr
191f0     44 00 00 FF 
191f4     48 E4 85 F1 | 	sub	objptr, ##34888
191f8     F2 FA 01 F6 | 	mov	result1, objptr
191fc     00 18 02 FF 
19200     00 FA 45 F5 | 	or	result1, ##70254592
19204     44 00 00 FF 
19208     44 E4 05 F1 | 	add	objptr, ##34884
1920c     F2 FA 61 FC | 	wrlong	result1, objptr
19210     44 00 00 FF 
19214     44 E4 85 F1 | 	sub	objptr, ##34884
19218     F2 FA 01 F6 | 	mov	result1, objptr
1921c     00 20 02 FF 
19220     00 FA 45 F5 | 	or	result1, ##71303168
19224     44 00 00 FF 
19228     40 E4 05 F1 | 	add	objptr, ##34880
1922c     F2 FA 61 FC | 	wrlong	result1, objptr
19230     44 00 00 FF 
19234     40 E4 85 F1 | 	sub	objptr, ##34880
19238     F2 FA 01 F6 | 	mov	result1, objptr
1923c     00 28 02 FF 
19240     00 FA 45 F5 | 	or	result1, ##72351744
19244     44 00 00 FF 
19248     4C E4 05 F1 | 	add	objptr, ##34892
1924c     F2 FA 61 FC | 	wrlong	result1, objptr
19250     44 00 00 FF 
19254     4C E4 85 F1 | 	sub	objptr, ##34892
19258     F2 FA 01 F6 | 	mov	result1, objptr
1925c     00 30 02 FF 
19260     00 FA 45 F5 | 	or	result1, ##73400320
19264     44 00 00 FF 
19268     50 E4 05 F1 | 	add	objptr, ##34896
1926c     F2 FA 61 FC | 	wrlong	result1, objptr
19270     44 00 00 FF 
19274     50 E4 85 F1 | 	sub	objptr, ##34896
19278     F2 FA 01 F6 | 	mov	result1, objptr
1927c     00 38 02 FF 
19280     00 FA 45 F5 | 	or	result1, ##74448896
19284     43 00 00 FF 
19288     E4 E4 05 F1 | 	add	objptr, ##34532
1928c     F2 FA 61 FC | 	wrlong	result1, objptr
19290     43 00 00 FF 
19294     E4 E4 85 F1 | 	sub	objptr, ##34532
19298     F2 FA 01 F6 | 	mov	result1, objptr
1929c     00 40 02 FF 
192a0     00 FA 45 F5 | 	or	result1, ##75497472
192a4     44 00 00 FF 
192a8     68 E4 05 F1 | 	add	objptr, ##34920
192ac     F2 FA 61 FC | 	wrlong	result1, objptr
192b0     44 00 00 FF 
192b4     68 E4 85 F1 | 	sub	objptr, ##34920
192b8     F2 FA 01 F6 | 	mov	result1, objptr
192bc     00 48 02 FF 
192c0     00 FA 45 F5 | 	or	result1, ##76546048
192c4     44 00 00 FF 
192c8     78 E4 05 F1 | 	add	objptr, ##34936
192cc     F2 FA 61 FC | 	wrlong	result1, objptr
192d0     44 00 00 FF 
192d4     78 E4 85 F1 | 	sub	objptr, ##34936
192d8     F2 FA 01 F6 | 	mov	result1, objptr
192dc     00 50 02 FF 
192e0     00 FA 45 F5 | 	or	result1, ##77594624
192e4     44 00 00 FF 
192e8     7C E4 05 F1 | 	add	objptr, ##34940
192ec     F2 FA 61 FC | 	wrlong	result1, objptr
192f0     44 00 00 FF 
192f4     7C E4 85 F1 | 	sub	objptr, ##34940
192f8     F2 FA 01 F6 | 	mov	result1, objptr
192fc     00 58 02 FF 
19300     00 FA 45 F5 | 	or	result1, ##78643200
19304     44 00 00 FF 
19308     74 E4 05 F1 | 	add	objptr, ##34932
1930c     F2 FA 61 FC | 	wrlong	result1, objptr
19310     44 00 00 FF 
19314     74 E4 85 F1 | 	sub	objptr, ##34932
19318     F2 FA 01 F6 | 	mov	result1, objptr
1931c     00 60 02 FF 
19320     00 FA 45 F5 | 	or	result1, ##79691776
19324     44 00 00 FF 
19328     6C E4 05 F1 | 	add	objptr, ##34924
1932c     F2 FA 61 FC | 	wrlong	result1, objptr
19330     44 00 00 FF 
19334     6C E4 85 F1 | 	sub	objptr, ##34924
19338     F2 FA 01 F6 | 	mov	result1, objptr
1933c     00 68 02 FF 
19340     00 FA 45 F5 | 	or	result1, ##80740352
19344     44 00 00 FF 
19348     70 E4 05 F1 | 	add	objptr, ##34928
1934c     F2 FA 61 FC | 	wrlong	result1, objptr
19350     44 00 00 FF 
19354     70 E4 85 F1 | 	sub	objptr, ##34928
19358     F2 FA 01 F6 | 	mov	result1, objptr
1935c     00 70 02 FF 
19360     00 FA 45 F5 | 	or	result1, ##81788928
19364     44 00 00 FF 
19368     80 E4 05 F1 | 	add	objptr, ##34944
1936c     F2 FA 61 FC | 	wrlong	result1, objptr
19370     44 00 00 FF 
19374     80 E4 85 F1 | 	sub	objptr, ##34944
19378     F2 FA 01 F6 | 	mov	result1, objptr
1937c     00 78 02 FF 
19380     00 FA 45 F5 | 	or	result1, ##82837504
19384     44 00 00 FF 
19388     84 E4 05 F1 | 	add	objptr, ##34948
1938c     F2 FA 61 FC | 	wrlong	result1, objptr
19390     44 00 00 FF 
19394     84 E4 85 F1 | 	sub	objptr, ##34948
19398     F2 FA 01 F6 | 	mov	result1, objptr
1939c     00 80 02 FF 
193a0     00 FA 45 F5 | 	or	result1, ##83886080
193a4     44 00 00 FF 
193a8     88 E4 05 F1 | 	add	objptr, ##34952
193ac     F2 FA 61 FC | 	wrlong	result1, objptr
193b0     44 00 00 FF 
193b4     88 E4 85 F1 | 	sub	objptr, ##34952
193b8     F2 FA 01 F6 | 	mov	result1, objptr
193bc     00 88 02 FF 
193c0     00 FA 45 F5 | 	or	result1, ##84934656
193c4     44 00 00 FF 
193c8     8C E4 05 F1 | 	add	objptr, ##34956
193cc     F2 FA 61 FC | 	wrlong	result1, objptr
193d0     44 00 00 FF 
193d4     8C E4 85 F1 | 	sub	objptr, ##34956
193d8     F2 FA 01 F6 | 	mov	result1, objptr
193dc     00 90 02 FF 
193e0     00 FA 45 F5 | 	or	result1, ##85983232
193e4     44 00 00 FF 
193e8     90 E4 05 F1 | 	add	objptr, ##34960
193ec     F2 FA 61 FC | 	wrlong	result1, objptr
193f0     44 00 00 FF 
193f4     90 E4 85 F1 | 	sub	objptr, ##34960
193f8     F2 FA 01 F6 | 	mov	result1, objptr
193fc     00 98 02 FF 
19400     00 FA 45 F5 | 	or	result1, ##87031808
19404     44 00 00 FF 
19408     94 E4 05 F1 | 	add	objptr, ##34964
1940c     F2 FA 61 FC | 	wrlong	result1, objptr
19410     44 00 00 FF 
19414     94 E4 85 F1 | 	sub	objptr, ##34964
19418     F2 FA 01 F6 | 	mov	result1, objptr
1941c     00 A0 02 FF 
19420     00 FA 45 F5 | 	or	result1, ##88080384
19424     44 00 00 FF 
19428     98 E4 05 F1 | 	add	objptr, ##34968
1942c     F2 FA 61 FC | 	wrlong	result1, objptr
19430     44 00 00 FF 
19434     98 E4 85 F1 | 	sub	objptr, ##34968
19438     F2 FA 01 F6 | 	mov	result1, objptr
1943c     00 A8 02 FF 
19440     00 FA 45 F5 | 	or	result1, ##89128960
19444     44 00 00 FF 
19448     9C E4 05 F1 | 	add	objptr, ##34972
1944c     F2 FA 61 FC | 	wrlong	result1, objptr
19450     44 00 00 FF 
19454     9C E4 85 F1 | 	sub	objptr, ##34972
19458     F2 FA 01 F6 | 	mov	result1, objptr
1945c     00 B0 02 FF 
19460     00 FA 45 F5 | 	or	result1, ##90177536
19464     44 00 00 FF 
19468     A8 E4 05 F1 | 	add	objptr, ##34984
1946c     F2 FA 61 FC | 	wrlong	result1, objptr
19470     44 00 00 FF 
19474     A8 E4 85 F1 | 	sub	objptr, ##34984
19478     F2 FA 01 F6 | 	mov	result1, objptr
1947c     00 B8 02 FF 
19480     00 FA 45 F5 | 	or	result1, ##91226112
19484     44 00 00 FF 
19488     A0 E4 05 F1 | 	add	objptr, ##34976
1948c     F2 FA 61 FC | 	wrlong	result1, objptr
19490     44 00 00 FF 
19494     A0 E4 85 F1 | 	sub	objptr, ##34976
19498     F2 FA 01 F6 | 	mov	result1, objptr
1949c     00 C0 02 FF 
194a0     00 FA 45 F5 | 	or	result1, ##92274688
194a4     44 00 00 FF 
194a8     A4 E4 05 F1 | 	add	objptr, ##34980
194ac     F2 FA 61 FC | 	wrlong	result1, objptr
194b0     44 00 00 FF 
194b4     A4 E4 85 F1 | 	sub	objptr, ##34980
194b8     F2 FA 01 F6 | 	mov	result1, objptr
194bc     00 C8 02 FF 
194c0     00 FA 45 F5 | 	or	result1, ##93323264
194c4     44 00 00 FF 
194c8     AC E4 05 F1 | 	add	objptr, ##34988
194cc     F2 FA 61 FC | 	wrlong	result1, objptr
194d0     44 00 00 FF 
194d4     AC E4 85 F1 | 	sub	objptr, ##34988
194d8     F2 FA 01 F6 | 	mov	result1, objptr
194dc     00 D0 02 FF 
194e0     00 FA 45 F5 | 	or	result1, ##94371840
194e4     44 00 00 FF 
194e8     54 E4 05 F1 | 	add	objptr, ##34900
194ec     F2 FA 61 FC | 	wrlong	result1, objptr
194f0     44 00 00 FF 
194f4     54 E4 85 F1 | 	sub	objptr, ##34900
194f8     F2 FA 01 F6 | 	mov	result1, objptr
194fc     00 D8 02 FF 
19500     00 FA 45 F5 | 	or	result1, ##95420416
19504     44 00 00 FF 
19508     5C E4 05 F1 | 	add	objptr, ##34908
1950c     F2 FA 61 FC | 	wrlong	result1, objptr
19510     44 00 00 FF 
19514     5C E4 85 F1 | 	sub	objptr, ##34908
19518     F2 FA 01 F6 | 	mov	result1, objptr
1951c     00 E0 02 FF 
19520     00 FA 45 F5 | 	or	result1, ##96468992
19524     44 00 00 FF 
19528     60 E4 05 F1 | 	add	objptr, ##34912
1952c     F2 FA 61 FC | 	wrlong	result1, objptr
19530     44 00 00 FF 
19534     60 E4 85 F1 | 	sub	objptr, ##34912
19538     F2 FA 01 F6 | 	mov	result1, objptr
1953c     00 E8 02 FF 
19540     00 FA 45 F5 | 	or	result1, ##97517568
19544     44 00 00 FF 
19548     B0 E4 05 F1 | 	add	objptr, ##34992
1954c     F2 FA 61 FC | 	wrlong	result1, objptr
19550     44 00 00 FF 
19554     B0 E4 85 F1 | 	sub	objptr, ##34992
19558     F2 FA 01 F6 | 	mov	result1, objptr
1955c     00 F0 02 FF 
19560     00 FA 45 F5 | 	or	result1, ##98566144
19564     44 00 00 FF 
19568     B4 E4 05 F1 | 	add	objptr, ##34996
1956c     F2 FA 61 FC | 	wrlong	result1, objptr
19570     44 00 00 FF 
19574     B4 E4 85 F1 | 	sub	objptr, ##34996
19578     F2 FA 01 F6 | 	mov	result1, objptr
1957c     00 F8 02 FF 
19580     00 FA 45 F5 | 	or	result1, ##99614720
19584     44 00 00 FF 
19588     B8 E4 05 F1 | 	add	objptr, ##35000
1958c     F2 FA 61 FC | 	wrlong	result1, objptr
19590     44 00 00 FF 
19594     B8 E4 85 F1 | 	sub	objptr, ##35000
19598     F2 FA 01 F6 | 	mov	result1, objptr
1959c     39 FA 25 F4 | 	bith	result1, #57
195a0     44 00 00 FF 
195a4     64 E4 05 F1 | 	add	objptr, ##34916
195a8     F2 FA 61 FC | 	wrlong	result1, objptr
195ac     44 00 00 FF 
195b0     64 E4 85 F1 | 	sub	objptr, ##34916
195b4     F2 FA 01 F6 | 	mov	result1, objptr
195b8     00 08 03 FF 
195bc     00 FA 45 F5 | 	or	result1, ##101711872
195c0     44 00 00 FF 
195c4     C8 E4 05 F1 | 	add	objptr, ##35016
195c8     F2 FA 61 FC | 	wrlong	result1, objptr
195cc     44 00 00 FF 
195d0     C8 E4 85 F1 | 	sub	objptr, ##35016
195d4     F2 FA 01 F6 | 	mov	result1, objptr
195d8     00 10 03 FF 
195dc     00 FA 45 F5 | 	or	result1, ##102760448
195e0     44 00 00 FF 
195e4     D0 E4 05 F1 | 	add	objptr, ##35024
195e8     F2 FA 61 FC | 	wrlong	result1, objptr
195ec     44 00 00 FF 
195f0     D0 E4 85 F1 | 	sub	objptr, ##35024
195f4     F2 FA 01 F6 | 	mov	result1, objptr
195f8     00 18 03 FF 
195fc     00 FA 45 F5 | 	or	result1, ##103809024
19600     44 00 00 FF 
19604     C4 E4 05 F1 | 	add	objptr, ##35012
19608     F2 FA 61 FC | 	wrlong	result1, objptr
1960c     44 00 00 FF 
19610     C4 E4 85 F1 | 	sub	objptr, ##35012
19614     F2 FA 01 F6 | 	mov	result1, objptr
19618     00 20 03 FF 
1961c     00 FA 45 F5 | 	or	result1, ##104857600
19620     44 00 00 FF 
19624     C0 E4 05 F1 | 	add	objptr, ##35008
19628     F2 FA 61 FC | 	wrlong	result1, objptr
1962c     44 00 00 FF 
19630     C0 E4 85 F1 | 	sub	objptr, ##35008
19634     F2 FA 01 F6 | 	mov	result1, objptr
19638     00 28 03 FF 
1963c     00 FA 45 F5 | 	or	result1, ##105906176
19640     44 00 00 FF 
19644     BC E4 05 F1 | 	add	objptr, ##35004
19648     F2 FA 61 FC | 	wrlong	result1, objptr
1964c     44 00 00 FF 
19650     BC E4 85 F1 | 	sub	objptr, ##35004
19654     F2 FA 01 F6 | 	mov	result1, objptr
19658     00 30 03 FF 
1965c     00 FA 45 F5 | 	or	result1, ##106954752
19660     44 00 00 FF 
19664     CC E4 05 F1 | 	add	objptr, ##35020
19668     F2 FA 61 FC | 	wrlong	result1, objptr
1966c     44 00 00 FF 
19670     CC E4 85 F1 | 	sub	objptr, ##35020
19674     F2 FA 01 F6 | 	mov	result1, objptr
19678     00 38 03 FF 
1967c     00 FA 45 F5 | 	or	result1, ##108003328
19680     44 00 00 FF 
19684     D4 E4 05 F1 | 	add	objptr, ##35028
19688     F2 FA 61 FC | 	wrlong	result1, objptr
1968c     44 00 00 FF 
19690     D4 E4 85 F1 | 	sub	objptr, ##35028
19694     F2 FA 01 F6 | 	mov	result1, objptr
19698     00 40 03 FF 
1969c     00 FA 45 F5 | 	or	result1, ##109051904
196a0     44 00 00 FF 
196a4     D8 E4 05 F1 | 	add	objptr, ##35032
196a8     F2 FA 61 FC | 	wrlong	result1, objptr
196ac     44 00 00 FF 
196b0     D8 E4 85 F1 | 	sub	objptr, ##35032
196b4     F2 FA 01 F6 | 	mov	result1, objptr
196b8     00 48 03 FF 
196bc     00 FA 45 F5 | 	or	result1, ##110100480
196c0     44 00 00 FF 
196c4     DC E4 05 F1 | 	add	objptr, ##35036
196c8     F2 FA 61 FC | 	wrlong	result1, objptr
196cc     44 00 00 FF 
196d0     DC E4 85 F1 | 	sub	objptr, ##35036
196d4     F2 FA 01 F6 | 	mov	result1, objptr
196d8     00 50 03 FF 
196dc     00 FA 45 F5 | 	or	result1, ##111149056
196e0     44 00 00 FF 
196e4     E4 E4 05 F1 | 	add	objptr, ##35044
196e8     F2 FA 61 FC | 	wrlong	result1, objptr
196ec     44 00 00 FF 
196f0     E4 E4 85 F1 | 	sub	objptr, ##35044
196f4     F2 FA 01 F6 | 	mov	result1, objptr
196f8     00 58 03 FF 
196fc     00 FA 45 F5 | 	or	result1, ##112197632
19700     44 00 00 FF 
19704     E8 E4 05 F1 | 	add	objptr, ##35048
19708     F2 FA 61 FC | 	wrlong	result1, objptr
1970c     44 00 00 FF 
19710     E8 E4 85 F1 | 	sub	objptr, ##35048
19714     F2 FA 01 F6 | 	mov	result1, objptr
19718     00 60 03 FF 
1971c     00 FA 45 F5 | 	or	result1, ##113246208
19720     44 00 00 FF 
19724     EC E4 05 F1 | 	add	objptr, ##35052
19728     F2 FA 61 FC | 	wrlong	result1, objptr
1972c     44 00 00 FF 
19730     EC E4 85 F1 | 	sub	objptr, ##35052
19734     F2 FA 01 F6 | 	mov	result1, objptr
19738     00 68 03 FF 
1973c     00 FA 45 F5 | 	or	result1, ##114294784
19740     44 00 00 FF 
19744     F0 E4 05 F1 | 	add	objptr, ##35056
19748     F2 FA 61 FC | 	wrlong	result1, objptr
1974c     44 00 00 FF 
19750     F0 E4 85 F1 | 	sub	objptr, ##35056
19754     F2 FA 01 F6 | 	mov	result1, objptr
19758     00 70 03 FF 
1975c     00 FA 45 F5 | 	or	result1, ##115343360
19760     44 00 00 FF 
19764     F4 E4 05 F1 | 	add	objptr, ##35060
19768     F2 FA 61 FC | 	wrlong	result1, objptr
1976c     44 00 00 FF 
19770     F4 E4 85 F1 | 	sub	objptr, ##35060
19774     F2 FA 01 F6 | 	mov	result1, objptr
19778     00 78 03 FF 
1977c     00 FA 45 F5 | 	or	result1, ##116391936
19780     44 00 00 FF 
19784     F8 E4 05 F1 | 	add	objptr, ##35064
19788     F2 FA 61 FC | 	wrlong	result1, objptr
1978c     44 00 00 FF 
19790     F8 E4 85 F1 | 	sub	objptr, ##35064
19794     F2 FA 01 F6 | 	mov	result1, objptr
19798     58 FA 25 F4 | 	bith	result1, #88
1979c     44 00 00 FF 
197a0     FC E4 05 F1 | 	add	objptr, ##35068
197a4     F2 FA 61 FC | 	wrlong	result1, objptr
197a8     44 00 00 FF 
197ac     FC E4 85 F1 | 	sub	objptr, ##35068
197b0     F2 FA 01 F6 | 	mov	result1, objptr
197b4     00 88 03 FF 
197b8     00 FA 45 F5 | 	or	result1, ##118489088
197bc     44 00 00 FF 
197c0     00 E5 05 F1 | 	add	objptr, ##35072
197c4     F2 FA 61 FC | 	wrlong	result1, objptr
197c8     44 00 00 FF 
197cc     00 E5 85 F1 | 	sub	objptr, ##35072
197d0     F2 FA 01 F6 | 	mov	result1, objptr
197d4     00 90 03 FF 
197d8     00 FA 45 F5 | 	or	result1, ##119537664
197dc     44 00 00 FF 
197e0     E0 E4 05 F1 | 	add	objptr, ##35040
197e4     F2 FA 61 FC | 	wrlong	result1, objptr
197e8     44 00 00 FF 
197ec     E0 E4 85 F1 | 	sub	objptr, ##35040
197f0     F2 FA 01 F6 | 	mov	result1, objptr
197f4     00 98 03 FF 
197f8     00 FA 45 F5 | 	or	result1, ##120586240
197fc     43 00 00 FF 
19800     D8 E4 05 F1 | 	add	objptr, ##34520
19804     F2 FA 61 FC | 	wrlong	result1, objptr
19808     43 00 00 FF 
1980c     D8 E4 85 F1 | 	sub	objptr, ##34520
19810     F2 FA 01 F6 | 	mov	result1, objptr
19814     00 A0 03 FF 
19818     00 FA 45 F5 | 	or	result1, ##121634816
1981c     44 00 00 FF 
19820     04 E5 05 F1 | 	add	objptr, ##35076
19824     F2 FA 61 FC | 	wrlong	result1, objptr
19828     44 00 00 FF 
1982c     04 E5 85 F1 | 	sub	objptr, ##35076
19830     F2 FA 01 F6 | 	mov	result1, objptr
19834     00 A8 03 FF 
19838     00 FA 45 F5 | 	or	result1, ##122683392
1983c     44 00 00 FF 
19840     08 E5 05 F1 | 	add	objptr, ##35080
19844     F2 FA 61 FC | 	wrlong	result1, objptr
19848     44 00 00 FF 
1984c     08 E5 85 F1 | 	sub	objptr, ##35080
19850     F2 FA 01 F6 | 	mov	result1, objptr
19854     00 B0 03 FF 
19858     00 FA 45 F5 | 	or	result1, ##123731968
1985c     44 00 00 FF 
19860     1C E5 05 F1 | 	add	objptr, ##35100
19864     F2 FA 61 FC | 	wrlong	result1, objptr
19868     44 00 00 FF 
1986c     1C E5 85 F1 | 	sub	objptr, ##35100
19870     F2 FA 01 F6 | 	mov	result1, objptr
19874     00 B8 03 FF 
19878     00 FA 45 F5 | 	or	result1, ##124780544
1987c     44 00 00 FF 
19880     18 E5 05 F1 | 	add	objptr, ##35096
19884     F2 FA 61 FC | 	wrlong	result1, objptr
19888     44 00 00 FF 
1988c     18 E5 85 F1 | 	sub	objptr, ##35096
19890     F2 FA 01 F6 | 	mov	result1, objptr
19894     77 FA 25 F4 | 	bith	result1, #119
19898     44 00 00 FF 
1989c     10 E5 05 F1 | 	add	objptr, ##35088
198a0     F2 FA 61 FC | 	wrlong	result1, objptr
198a4     44 00 00 FF 
198a8     10 E5 85 F1 | 	sub	objptr, ##35088
198ac     F2 FA 01 F6 | 	mov	result1, objptr
198b0     00 C8 03 FF 
198b4     00 FA 45 F5 | 	or	result1, ##126877696
198b8     44 00 00 FF 
198bc     0C E5 05 F1 | 	add	objptr, ##35084
198c0     F2 FA 61 FC | 	wrlong	result1, objptr
198c4     44 00 00 FF 
198c8     0C E5 85 F1 | 	sub	objptr, ##35084
198cc     F2 FA 01 F6 | 	mov	result1, objptr
198d0     00 D0 03 FF 
198d4     00 FA 45 F5 | 	or	result1, ##127926272
198d8     44 00 00 FF 
198dc     2C E5 05 F1 | 	add	objptr, ##35116
198e0     F2 FA 61 FC | 	wrlong	result1, objptr
198e4     44 00 00 FF 
198e8     2C E5 85 F1 | 	sub	objptr, ##35116
198ec     F2 FA 01 F6 | 	mov	result1, objptr
198f0     00 D8 03 FF 
198f4     00 FA 45 F5 | 	or	result1, ##128974848
198f8     44 00 00 FF 
198fc     20 E5 05 F1 | 	add	objptr, ##35104
19900     F2 FA 61 FC | 	wrlong	result1, objptr
19904     44 00 00 FF 
19908     20 E5 85 F1 | 	sub	objptr, ##35104
1990c     F2 FA 01 F6 | 	mov	result1, objptr
19910     96 FA 25 F4 | 	bith	result1, #150
19914     44 00 00 FF 
19918     24 E5 05 F1 | 	add	objptr, ##35108
1991c     F2 FA 61 FC | 	wrlong	result1, objptr
19920     44 00 00 FF 
19924     24 E5 85 F1 | 	sub	objptr, ##35108
19928     F2 FA 01 F6 | 	mov	result1, objptr
1992c     00 E8 03 FF 
19930     00 FA 45 F5 | 	or	result1, ##131072000
19934     44 00 00 FF 
19938     28 E5 05 F1 | 	add	objptr, ##35112
1993c     F2 FA 61 FC | 	wrlong	result1, objptr
19940     44 00 00 FF 
19944     28 E5 85 F1 | 	sub	objptr, ##35112
19948     F2 FA 01 F6 | 	mov	result1, objptr
1994c     B5 FA 25 F4 | 	bith	result1, #181
19950     44 00 00 FF 
19954     30 E5 05 F1 | 	add	objptr, ##35120
19958     F2 FA 61 FC | 	wrlong	result1, objptr
1995c     44 00 00 FF 
19960     30 E5 85 F1 | 	sub	objptr, ##35120
19964     F2 FA 01 F6 | 	mov	result1, objptr
19968     D4 FA 25 F4 | 	bith	result1, #212
1996c     44 00 00 FF 
19970     34 E5 05 F1 | 	add	objptr, ##35124
19974     F2 FA 61 FC | 	wrlong	result1, objptr
19978     44 00 00 FF 
1997c     34 E5 85 F1 | 	sub	objptr, ##35124
19980     F2 FA 01 F6 | 	mov	result1, objptr
19984     1B FA 25 F4 | 	bith	result1, #27
19988     44 00 00 FF 
1998c     38 E5 05 F1 | 	add	objptr, ##35128
19990     F2 FA 61 FC | 	wrlong	result1, objptr
19994     44 00 00 FF 
19998     38 E5 85 F1 | 	sub	objptr, ##35128
1999c     F2 FA 01 F6 | 	mov	result1, objptr
199a0     00 08 04 FF 
199a4     00 FA 45 F5 | 	or	result1, ##135266304
199a8     44 00 00 FF 
199ac     3C E5 05 F1 | 	add	objptr, ##35132
199b0     F2 FA 61 FC | 	wrlong	result1, objptr
199b4     44 00 00 FF 
199b8     3C E5 85 F1 | 	sub	objptr, ##35132
199bc     F2 FA 01 F6 | 	mov	result1, objptr
199c0     00 10 04 FF 
199c4     00 FA 45 F5 | 	or	result1, ##136314880
199c8     44 00 00 FF 
199cc     40 E5 05 F1 | 	add	objptr, ##35136
199d0     F2 FA 61 FC | 	wrlong	result1, objptr
199d4     44 00 00 FF 
199d8     40 E5 85 F1 | 	sub	objptr, ##35136
199dc                 | _init_commands_ret
199dc     2D 00 64 FD | 	ret
199e0                 | 
199e0                 | ' 
199e0                 | ' ''--------------------------------Error strings -------------------------------------
199e0                 | ' sub init_audio
199e0                 | _init_audio
199e0     06 4A 05 F6 | 	mov	COUNT_, #6
199e4     A8 00 A0 FD | 	call	#pushregs_
199e8     00 C0 1F FF 
199ec     00 1E 06 F6 | 	mov	local01, ##1065353216
199f0                 | ' 'for i=0 to 1023 : samplebuf(0,i)=round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
199f0                 | ' 'for i=0 to 511  : samplebuf(1,i)= -32512+127*i: samplebuf(1,512+i)=-samplebuf(1,i) : next i   		' 1 : triangle 
199f0                 | ' 'for i=0 to 1023 : samplebuf(2,i)= -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
199f0                 | ' 'for i=0 to 127  : samplebuf(3,i)= -32600 : next i : for i=128 to 1023 : samplebuf(3,i) =32600 : next i 	' 3 pulse 12.5%
199f0                 | ' 'for i=0 to 511  : samplebuf(4,i)= -32600 : next i : for i=512 to 1023 : samplebuf(4,i) =32600 : next i 	' 4 square
199f0                 | ' 'for i=0 to 255  : samplebuf(5,i)= -32600 : next i : for i=256 to 1023 : samplebuf(5,i) =32600 : next i 	' 5 pulse 25%
199f0                 | ' 'for i=0 to 1023 : samplebuf(6,i)= dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
199f0                 | ' 'for i=0 to 1023 : samplebuf(7,i)= dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
199f0                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
199f0     00 20 06 F6 | 	mov	local02, #0
199f4                 | LR__2060
199f4     10 23 02 F6 | 	mov	local03, local02
199f8     01 22 66 F0 | 	shl	local03, #1
199fc     58 7F 23 FF 
19a00     00 24 06 F6 | 	mov	local04, ##1191096320
19a04     10 13 52 F6 | 	abs	arg01, local02 wc
19a08     1F 26 C6 C9 |  if_b	decod	local05, #31
19a0c     00 26 06 36 |  if_ae	mov	local05, #0
19a10     44 78 B0 FD | 	call	#__system___float_fromuns
19a14     13 FB 61 F5 | 	xor	result1, local05
19a18     FD 12 02 F6 | 	mov	arg01, result1
19a1c     87 24 20 FF 
19a20     DB 15 06 F6 | 	mov	arg02, ##1078530011
19a24     34 7C B0 FD | 	call	#__system___float_mul
19a28     FD 12 02 F6 | 	mov	arg01, result1
19a2c     00 00 22 FF 
19a30     00 14 06 F6 | 	mov	arg02, ##1140850688
19a34     28 7E B0 FD | 	call	#__system___float_div
19a38     FD 12 02 F6 | 	mov	arg01, result1
19a3c     58 85 B0 FD | 	call	#__system____builtin_sinf
19a40     FD 14 02 F6 | 	mov	arg02, result1
19a44     12 13 02 F6 | 	mov	arg01, local04
19a48     10 7C B0 FD | 	call	#__system___float_mul
19a4c     FD 12 02 F6 | 	mov	arg01, result1
19a50     01 14 06 F6 | 	mov	arg02, #1
19a54     CC 80 B0 FD | 	call	#__system___float_tointeger
19a58     FD 14 02 F6 | 	mov	arg02, result1
19a5c     11 13 02 F6 | 	mov	arg01, local03
19a60     B4 0D B0 FD | 	call	#_psdpoke
19a64     01 20 06 F1 | 	add	local02, #1
19a68     02 00 00 FF 
19a6c     00 20 56 F2 | 	cmps	local02, ##1024 wc
19a70     80 FF 9F CD |  if_b	jmp	#LR__2060
19a74                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
19a74     00 20 06 F6 | 	mov	local02, #0
19a78                 | LR__2061
19a78     10 15 02 F6 | 	mov	arg02, local02
19a7c     01 14 66 F0 | 	shl	arg02, #1
19a80     0B 12 C6 F9 | 	decod	arg01, #11
19a84     0A 13 02 F1 | 	add	arg01, arg02
19a88     10 25 02 F6 | 	mov	local04, local02
19a8c     07 24 66 F0 | 	shl	local04, #7
19a90     10 25 82 F1 | 	sub	local04, local02
19a94     C0 FF 7F FF 
19a98     00 15 06 F6 | 	mov	arg02, ##-32512
19a9c     12 15 02 F1 | 	add	arg02, local04
19aa0     74 0D B0 FD | 	call	#_psdpoke
19aa4     09 24 C6 F9 | 	decod	local04, #9
19aa8     10 25 02 F1 | 	add	local04, local02
19aac     01 24 66 F0 | 	shl	local04, #1
19ab0     0B 12 C6 F9 | 	decod	arg01, #11
19ab4     12 13 02 F1 | 	add	arg01, local04
19ab8     10 27 02 F6 | 	mov	local05, local02
19abc     07 26 66 F0 | 	shl	local05, #7
19ac0     10 27 82 F1 | 	sub	local05, local02
19ac4     3F 00 00 FF 
19ac8     00 15 06 F6 | 	mov	arg02, ##32512
19acc     13 15 82 F1 | 	sub	arg02, local05
19ad0     44 0D B0 FD | 	call	#_psdpoke
19ad4     01 20 06 F1 | 	add	local02, #1
19ad8     01 00 00 FF 
19adc     00 20 56 F2 | 	cmps	local02, ##512 wc
19ae0     94 FF 9F CD |  if_b	jmp	#LR__2061
19ae4                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
19ae4     00 20 06 F6 | 	mov	local02, #0
19ae8                 | LR__2062
19ae8     10 27 02 F6 | 	mov	local05, local02
19aec     01 26 66 F0 | 	shl	local05, #1
19af0     0C 12 C6 F9 | 	decod	arg01, #12
19af4     13 13 02 F1 | 	add	arg01, local05
19af8     10 27 02 F6 | 	mov	local05, local02
19afc     06 26 66 F0 | 	shl	local05, #6
19b00     10 27 82 F1 | 	sub	local05, local02
19b04     C1 FF 7F FF 
19b08     00 14 06 F6 | 	mov	arg02, ##-32256
19b0c     13 15 02 F1 | 	add	arg02, local05
19b10     04 0D B0 FD | 	call	#_psdpoke
19b14     01 20 06 F1 | 	add	local02, #1
19b18     02 00 00 FF 
19b1c     00 20 56 F2 | 	cmps	local02, ##1024 wc
19b20     C4 FF 9F CD |  if_b	jmp	#LR__2062
19b24                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
19b24     00 20 06 F6 | 	mov	local02, #0
19b28                 | LR__2063
19b28     10 27 02 F6 | 	mov	local05, local02
19b2c     01 26 66 F0 | 	shl	local05, #1
19b30     0C 00 00 FF 
19b34     00 12 06 F6 | 	mov	arg01, ##6144
19b38     13 13 02 F1 | 	add	arg01, local05
19b3c     C0 FF 7F FF 
19b40     A8 14 06 F6 | 	mov	arg02, ##-32600
19b44     D0 0C B0 FD | 	call	#_psdpoke
19b48     01 20 06 F1 | 	add	local02, #1
19b4c     80 20 56 F2 | 	cmps	local02, #128 wc
19b50     D4 FF 9F CD |  if_b	jmp	#LR__2063
19b54     80 20 06 F6 | 	mov	local02, #128
19b58                 | LR__2064
19b58     10 27 02 F6 | 	mov	local05, local02
19b5c     01 26 66 F0 | 	shl	local05, #1
19b60     0C 00 00 FF 
19b64     00 12 06 F6 | 	mov	arg01, ##6144
19b68     13 13 02 F1 | 	add	arg01, local05
19b6c     3F 00 00 FF 
19b70     58 15 06 F6 | 	mov	arg02, ##32600
19b74     A0 0C B0 FD | 	call	#_psdpoke
19b78     01 20 06 F1 | 	add	local02, #1
19b7c     02 00 00 FF 
19b80     00 20 16 F2 | 	cmp	local02, ##1024 wc
19b84     D0 FF 9F CD |  if_b	jmp	#LR__2064
19b88     0C 00 00 FF 
19b8c     00 12 06 F6 | 	mov	arg01, ##6144
19b90     00 14 06 F6 | 	mov	arg02, #0
19b94     80 0C B0 FD | 	call	#_psdpoke
19b98     0C 00 00 FF 
19b9c     80 12 06 F6 | 	mov	arg01, ##6272
19ba0     00 14 06 F6 | 	mov	arg02, #0
19ba4     70 0C B0 FD | 	call	#_psdpoke
19ba8                 | '                   psdpoke  6144,0 : psdpoke 6144+128,0
19ba8                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
19ba8     00 20 06 F6 | 	mov	local02, #0
19bac                 | LR__2065
19bac     10 27 02 F6 | 	mov	local05, local02
19bb0     01 26 66 F0 | 	shl	local05, #1
19bb4     0D 12 C6 F9 | 	decod	arg01, #13
19bb8     13 13 02 F1 | 	add	arg01, local05
19bbc     C0 FF 7F FF 
19bc0     A8 14 06 F6 | 	mov	arg02, ##-32600
19bc4     50 0C B0 FD | 	call	#_psdpoke
19bc8     01 20 06 F1 | 	add	local02, #1
19bcc     01 00 00 FF 
19bd0     00 20 56 F2 | 	cmps	local02, ##512 wc
19bd4     D4 FF 9F CD |  if_b	jmp	#LR__2065
19bd8     09 20 C6 F9 | 	decod	local02, #9
19bdc                 | LR__2066
19bdc     10 27 02 F6 | 	mov	local05, local02
19be0     01 26 66 F0 | 	shl	local05, #1
19be4     0D 12 C6 F9 | 	decod	arg01, #13
19be8     13 13 02 F1 | 	add	arg01, local05
19bec     3F 00 00 FF 
19bf0     58 15 06 F6 | 	mov	arg02, ##32600
19bf4     20 0C B0 FD | 	call	#_psdpoke
19bf8     01 20 06 F1 | 	add	local02, #1
19bfc     02 00 00 FF 
19c00     00 20 16 F2 | 	cmp	local02, ##1024 wc
19c04     D4 FF 9F CD |  if_b	jmp	#LR__2066
19c08     0D 12 C6 F9 | 	decod	arg01, #13
19c0c     00 14 06 F6 | 	mov	arg02, #0
19c10     04 0C B0 FD | 	call	#_psdpoke
19c14     11 00 00 FF 
19c18     00 12 06 F6 | 	mov	arg01, ##8704
19c1c     00 14 06 F6 | 	mov	arg02, #0
19c20     F4 0B B0 FD | 	call	#_psdpoke
19c24                 | '                   psdpoke  8192,0 : psdpoke 8192+512,0
19c24                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
19c24     00 20 06 F6 | 	mov	local02, #0
19c28                 | LR__2067
19c28     10 27 02 F6 | 	mov	local05, local02
19c2c     01 26 66 F0 | 	shl	local05, #1
19c30     14 00 00 FF 
19c34     00 12 06 F6 | 	mov	arg01, ##10240
19c38     13 13 02 F1 | 	add	arg01, local05
19c3c     C0 FF 7F FF 
19c40     A8 14 06 F6 | 	mov	arg02, ##-32600
19c44     D0 0B B0 FD | 	call	#_psdpoke
19c48     01 20 06 F1 | 	add	local02, #1
19c4c     00 21 56 F2 | 	cmps	local02, #256 wc
19c50     D4 FF 9F CD |  if_b	jmp	#LR__2067
19c54     00 21 06 F6 | 	mov	local02, #256
19c58                 | LR__2068
19c58     10 27 02 F6 | 	mov	local05, local02
19c5c     01 26 66 F0 | 	shl	local05, #1
19c60     14 00 00 FF 
19c64     00 12 06 F6 | 	mov	arg01, ##10240
19c68     13 13 02 F1 | 	add	arg01, local05
19c6c     3F 00 00 FF 
19c70     58 15 06 F6 | 	mov	arg02, ##32600
19c74     A0 0B B0 FD | 	call	#_psdpoke
19c78     01 20 06 F1 | 	add	local02, #1
19c7c     02 00 00 FF 
19c80     00 20 16 F2 | 	cmp	local02, ##1024 wc
19c84     D0 FF 9F CD |  if_b	jmp	#LR__2068
19c88     14 00 00 FF 
19c8c     00 12 06 F6 | 	mov	arg01, ##10240
19c90     00 14 06 F6 | 	mov	arg02, #0
19c94     80 0B B0 FD | 	call	#_psdpoke
19c98     14 00 00 FF 
19c9c     00 13 06 F6 | 	mov	arg01, ##10496
19ca0     00 14 06 F6 | 	mov	arg02, #0
19ca4     70 0B B0 FD | 	call	#_psdpoke
19ca8                 | '                   psdpoke 10240,0 : psdpoke 10240+256,0
19ca8                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
19ca8     18 00 00 FF 
19cac     00 20 06 F6 | 	mov	local02, ##12288
19cb0                 | LR__2069
19cb0     10 13 02 F6 | 	mov	arg01, local02
19cb4     00 14 06 F6 | 	mov	arg02, #0
19cb8     14 0B B0 FD | 	call	#_pslpoke
19cbc     04 20 06 F1 | 	add	local02, #4
19cc0     77 00 00 FF 
19cc4     FD 21 56 F2 | 	cmps	local02, ##61437 wc
19cc8     E4 FF 9F CD |  if_b	jmp	#LR__2069
19ccc                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
19ccc     00 20 06 F6 | 	mov	local02, #0
19cd0                 | LR__2070
19cd0     10 27 02 F6 | 	mov	local05, local02
19cd4     01 26 66 F0 | 	shl	local05, #1
19cd8     78 00 00 FF 
19cdc     00 22 06 F6 | 	mov	local03, ##61440
19ce0     13 23 02 F1 | 	add	local03, local05
19ce4     14 00 00 FF 
19ce8     C6 EA 05 F1 | 	add	ptr__dat__, ##10438
19cec     F5 12 02 F6 | 	mov	arg01, ptr__dat__
19cf0     14 00 00 FF 
19cf4     C6 EA 85 F1 | 	sub	ptr__dat__, ##10438
19cf8     10 12 06 F1 | 	add	arg01, #16
19cfc     10 15 02 F6 | 	mov	arg02, local02
19d00     01 14 66 F0 | 	shl	arg02, #1
19d04     0A 13 02 F1 | 	add	arg01, arg02
19d08     09 15 E2 FA | 	rdword	arg02, arg01
19d0c     11 13 02 F6 | 	mov	arg01, local03
19d10     04 0B B0 FD | 	call	#_psdpoke
19d14     01 20 06 F1 | 	add	local02, #1
19d18     02 00 00 FF 
19d1c     00 20 56 F2 | 	cmps	local02, ##1024 wc
19d20     AC FF 9F CD |  if_b	jmp	#LR__2070
19d24                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
19d24     00 20 06 F6 | 	mov	local02, #0
19d28                 | LR__2071
19d28     10 27 02 F6 | 	mov	local05, local02
19d2c     01 26 66 F0 | 	shl	local05, #1
19d30     7C 00 00 FF 
19d34     00 22 06 F6 | 	mov	local03, ##63488
19d38     13 23 02 F1 | 	add	local03, local05
19d3c     10 00 00 FF 
19d40     B6 EA 05 F1 | 	add	ptr__dat__, ##8374
19d44     F5 12 02 F6 | 	mov	arg01, ptr__dat__
19d48     10 00 00 FF 
19d4c     B6 EA 85 F1 | 	sub	ptr__dat__, ##8374
19d50     10 12 06 F1 | 	add	arg01, #16
19d54     10 15 02 F6 | 	mov	arg02, local02
19d58     01 14 66 F0 | 	shl	arg02, #1
19d5c     0A 13 02 F1 | 	add	arg01, arg02
19d60     09 15 E2 FA | 	rdword	arg02, arg01
19d64     11 13 02 F6 | 	mov	arg01, local03
19d68     AC 0A B0 FD | 	call	#_psdpoke
19d6c     01 20 06 F1 | 	add	local02, #1
19d70     02 00 00 FF 
19d74     00 20 56 F2 | 	cmps	local02, ##1024 wc
19d78     AC FF 9F CD |  if_b	jmp	#LR__2071
19d7c                 | ' 
19d7c                 | ' 
19d7c                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
19d7c     00 20 06 F6 | 	mov	local02, #0
19d80     0C 00 00 FF 
19d84     D8 E4 05 F1 | 	add	objptr, ##6360
19d88     97 18 48 FB | 	callpa	#(@LR__2073-@LR__2072)>>2,fcache_load_ptr_
19d8c                 | LR__2072
19d8c     10 27 02 F6 | 	mov	local05, local02
19d90     01 26 66 F0 | 	shl	local05, #1
19d94     F2 26 02 F1 | 	add	local05, objptr
19d98     10 23 02 F6 | 	mov	local03, local02
19d9c     08 22 66 F0 | 	shl	local03, #8
19da0     7F 00 00 FF 
19da4     00 29 06 F6 | 	mov	local06, ##65280
19da8     11 29 82 F1 | 	sub	local06, local03
19dac     13 29 52 FC | 	wrword	local06, local05
19db0     01 20 06 F1 | 	add	local02, #1
19db4     00 21 56 F2 | 	cmps	local02, #256 wc
19db8     D0 FF 9F CD |  if_b	jmp	#LR__2072
19dbc                 | LR__2073
19dbc     0C 00 00 FF 
19dc0     D8 E4 85 F1 | 	sub	objptr, ##6360
19dc4                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
19dc4     00 20 06 F6 | 	mov	local02, #0
19dc8                 | LR__2074
19dc8     10 27 02 F6 | 	mov	local05, local02
19dcc     01 26 66 F0 | 	shl	local05, #1
19dd0     0D 00 00 FF 
19dd4     D8 E4 05 F1 | 	add	objptr, ##6872
19dd8     F2 26 02 F1 | 	add	local05, objptr
19ddc     80 BF 23 FF 
19de0     00 12 06 F6 | 	mov	arg01, ##1199505408
19de4     0F 15 02 F6 | 	mov	arg02, local01
19de8     0D 00 00 FF 
19dec     D8 E4 85 F1 | 	sub	objptr, ##6872
19df0     68 78 B0 FD | 	call	#__system___float_mul
19df4     FD 12 02 F6 | 	mov	arg01, result1
19df8     01 14 06 F6 | 	mov	arg02, #1
19dfc     24 7D B0 FD | 	call	#__system___float_tointeger
19e00     13 FB 51 FC | 	wrword	result1, local05
19e04     0F 13 02 F6 | 	mov	arg01, local01
19e08     CC BC 1F FF 
19e0c     9A 15 06 F6 | 	mov	arg02, ##1064933786
19e10     48 78 B0 FD | 	call	#__system___float_mul
19e14     FD 1E 02 F6 | 	mov	local01, result1
19e18     01 20 06 F1 | 	add	local02, #1
19e1c     00 21 56 F2 | 	cmps	local02, #256 wc
19e20     A4 FF 9F CD |  if_b	jmp	#LR__2074
19e24     0E 00 00 FF 
19e28     D6 E4 05 F1 | 	add	objptr, ##7382
19e2c     F2 00 58 FC | 	wrword	#0, objptr
19e30                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
19e30     00 20 06 F6 | 	mov	local02, #0
19e34     02 E4 05 F1 | 	add	objptr, #2
19e38     97 10 48 FB | 	callpa	#(@LR__2076-@LR__2075)>>2,fcache_load_ptr_
19e3c                 | LR__2075
19e3c     10 27 02 F6 | 	mov	local05, local02
19e40     01 26 66 F0 | 	shl	local05, #1
19e44     F2 26 02 F1 | 	add	local05, objptr
19e48     7F 00 80 FF 
19e4c     13 01 5A FC | 	wrword	##65280, local05
19e50     01 20 06 F1 | 	add	local02, #1
19e54     FF 20 56 F2 | 	cmps	local02, #255 wc
19e58     E0 FF 9F CD |  if_b	jmp	#LR__2075
19e5c                 | LR__2076
19e5c     FE E5 05 F1 | 	add	objptr, #510
19e60     F2 00 58 FC | 	wrword	#0, objptr
19e64                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
19e64     00 20 06 F6 | 	mov	local02, #0
19e68     02 E4 05 F1 | 	add	objptr, #2
19e6c     97 52 48 FB | 	callpa	#(@LR__2081-@LR__2077)>>2,fcache_load_ptr_
19e70                 | LR__2077
19e70     10 27 02 F6 | 	mov	local05, local02
19e74     01 26 66 F0 | 	shl	local05, #1
19e78     F2 26 02 F1 | 	add	local05, objptr
19e7c     10 29 02 F6 | 	mov	local06, local02
19e80     0C 28 66 F0 | 	shl	local06, #12
19e84     13 29 52 FC | 	wrword	local06, local05
19e88     01 20 06 F1 | 	add	local02, #1
19e8c     10 20 56 F2 | 	cmps	local02, #16 wc
19e90     DC FF 9F CD |  if_b	jmp	#LR__2077
19e94                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
19e94     10 20 06 F6 | 	mov	local02, #16
19e98                 | LR__2078
19e98     10 27 02 F6 | 	mov	local05, local02
19e9c     01 26 66 F0 | 	shl	local05, #1
19ea0     F2 26 02 F1 | 	add	local05, objptr
19ea4     7F 00 80 FF 
19ea8     13 01 5A FC | 	wrword	##65280, local05
19eac     01 20 06 F1 | 	add	local02, #1
19eb0     F0 20 16 F2 | 	cmp	local02, #240 wc
19eb4     E0 FF 9F CD |  if_b	jmp	#LR__2078
19eb8                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
19eb8     F0 20 06 F6 | 	mov	local02, #240
19ebc                 | LR__2079
19ebc     10 27 02 F6 | 	mov	local05, local02
19ec0     01 26 66 F0 | 	shl	local05, #1
19ec4     F2 26 02 F1 | 	add	local05, objptr
19ec8     FF 22 06 F6 | 	mov	local03, #255
19ecc     10 23 82 F1 | 	sub	local03, local02
19ed0     0C 22 66 F0 | 	shl	local03, #12
19ed4     13 23 52 FC | 	wrword	local03, local05
19ed8     01 20 06 F1 | 	add	local02, #1
19edc     00 21 16 F2 | 	cmp	local02, #256 wc
19ee0     D8 FF 9F CD |  if_b	jmp	#LR__2079
19ee4                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
19ee4     00 20 06 F6 | 	mov	local02, #0
19ee8     01 00 00 FF 
19eec     00 E4 05 F1 | 	add	objptr, ##512
19ef0                 | LR__2080
19ef0     10 27 02 F6 | 	mov	local05, local02
19ef4     01 26 66 F0 | 	shl	local05, #1
19ef8     F2 26 02 F1 | 	add	local05, objptr
19efc     10 29 02 F6 | 	mov	local06, local02
19f00     08 28 66 F0 | 	shl	local06, #8
19f04     13 29 52 FC | 	wrword	local06, local05
19f08     01 20 06 F1 | 	add	local02, #1
19f0c     00 21 56 F2 | 	cmps	local02, #256 wc
19f10     DC FF 9F CD |  if_b	jmp	#LR__2080
19f14                 | LR__2081
19f14     FE E5 05 F1 | 	add	objptr, #510
19f18     F2 00 58 FC | 	wrword	#0, objptr
19f1c                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
19f1c     00 20 06 F6 | 	mov	local02, #0
19f20     02 E4 05 F1 | 	add	objptr, #2
19f24     97 6A 48 FB | 	callpa	#(@LR__2086-@LR__2082)>>2,fcache_load_ptr_
19f28                 | LR__2082
19f28     10 27 02 F6 | 	mov	local05, local02
19f2c     01 26 66 F0 | 	shl	local05, #1
19f30     F2 26 02 F1 | 	add	local05, objptr
19f34     10 29 02 F6 | 	mov	local06, local02
19f38     04 28 66 F0 | 	shl	local06, #4
19f3c     10 29 02 F1 | 	add	local06, local02
19f40     04 28 66 F0 | 	shl	local06, #4
19f44     13 29 52 FC | 	wrword	local06, local05
19f48     01 20 06 F1 | 	add	local02, #1
19f4c     F0 20 56 F2 | 	cmps	local02, #240 wc
19f50     D4 FF 9F CD |  if_b	jmp	#LR__2082
19f54     F0 20 06 F6 | 	mov	local02, #240
19f58                 | LR__2083
19f58     10 27 02 F6 | 	mov	local05, local02
19f5c     01 26 66 F0 | 	shl	local05, #1
19f60     F2 26 02 F1 | 	add	local05, objptr
19f64     FF 22 06 F6 | 	mov	local03, #255
19f68     10 23 82 F1 | 	sub	local03, local02
19f6c     0C 22 66 F0 | 	shl	local03, #12
19f70     13 23 52 FC | 	wrword	local03, local05
19f74     01 20 06 F1 | 	add	local02, #1
19f78     00 21 16 F2 | 	cmp	local02, #256 wc
19f7c     D8 FF 9F CD |  if_b	jmp	#LR__2083
19f80                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
19f80     00 20 06 F6 | 	mov	local02, #0
19f84     01 00 00 FF 
19f88     00 E4 05 F1 | 	add	objptr, ##512
19f8c                 | LR__2084
19f8c     10 27 02 F6 | 	mov	local05, local02
19f90     01 26 66 F0 | 	shl	local05, #1
19f94     F2 26 02 F1 | 	add	local05, objptr
19f98     10 29 02 F6 | 	mov	local06, local02
19f9c     09 28 66 F0 | 	shl	local06, #9
19fa0     13 29 52 FC | 	wrword	local06, local05
19fa4     FF 26 06 F6 | 	mov	local05, #255
19fa8     10 27 82 F1 | 	sub	local05, local02
19fac     01 26 66 F0 | 	shl	local05, #1
19fb0     F2 26 02 F1 | 	add	local05, objptr
19fb4     10 29 02 F6 | 	mov	local06, local02
19fb8     09 28 66 F0 | 	shl	local06, #9
19fbc     13 29 52 FC | 	wrword	local06, local05
19fc0     01 20 06 F1 | 	add	local02, #1
19fc4     80 20 56 F2 | 	cmps	local02, #128 wc
19fc8     C0 FF 9F CD |  if_b	jmp	#LR__2084
19fcc                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
19fcc     00 20 06 F6 | 	mov	local02, #0
19fd0     01 00 00 FF 
19fd4     00 E4 05 F1 | 	add	objptr, ##512
19fd8                 | LR__2085
19fd8     10 27 02 F6 | 	mov	local05, local02
19fdc     01 26 66 F0 | 	shl	local05, #1
19fe0     F2 26 02 F1 | 	add	local05, objptr
19fe4     10 29 02 F6 | 	mov	local06, local02
19fe8     0D 28 66 F0 | 	shl	local06, #13
19fec     13 29 52 FC | 	wrword	local06, local05
19ff0     01 20 06 F1 | 	add	local02, #1
19ff4     08 20 56 F2 | 	cmps	local02, #8 wc
19ff8     DC FF 9F CD |  if_b	jmp	#LR__2085
19ffc                 | LR__2086
19ffc                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
19ffc     08 20 06 F6 | 	mov	local02, #8
1a000     97 42 48 FB | 	callpa	#(@LR__2090-@LR__2087)>>2,fcache_load_ptr_
1a004                 | LR__2087
1a004     10 27 02 F6 | 	mov	local05, local02
1a008     01 26 66 F0 | 	shl	local05, #1
1a00c     F2 26 02 F1 | 	add	local05, objptr
1a010     10 1F 02 F6 | 	mov	local01, local02
1a014     08 1E 86 F1 | 	sub	local01, #8
1a018     0B 1E 66 F0 | 	shl	local01, #11
1a01c     7F 00 00 FF 
1a020     00 29 06 F6 | 	mov	local06, ##65280
1a024     0F 29 82 F1 | 	sub	local06, local01
1a028     13 29 52 FC | 	wrword	local06, local05
1a02c     01 20 06 F1 | 	add	local02, #1
1a030     18 20 16 F2 | 	cmp	local02, #24 wc
1a034     CC FF 9F CD |  if_b	jmp	#LR__2087
1a038                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
1a038     18 20 06 F6 | 	mov	local02, #24
1a03c                 | LR__2088
1a03c     10 27 02 F6 | 	mov	local05, local02
1a040     01 26 66 F0 | 	shl	local05, #1
1a044     F2 26 02 F1 | 	add	local05, objptr
1a048     40 00 80 FF 
1a04c     13 01 58 FC | 	wrword	##32768, local05
1a050     01 20 06 F1 | 	add	local02, #1
1a054     81 20 16 F2 | 	cmp	local02, #129 wc
1a058     E0 FF 9F CD |  if_b	jmp	#LR__2088
1a05c                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
1a05c     81 20 06 F6 | 	mov	local02, #129
1a060                 | LR__2089
1a060     10 27 02 F6 | 	mov	local05, local02
1a064     01 26 66 F0 | 	shl	local05, #1
1a068     F2 26 02 F1 | 	add	local05, objptr
1a06c     FF 22 06 F6 | 	mov	local03, #255
1a070     10 23 82 F1 | 	sub	local03, local02
1a074     08 22 66 F0 | 	shl	local03, #8
1a078     13 23 52 FC | 	wrword	local03, local05
1a07c     01 20 06 F1 | 	add	local02, #1
1a080     00 21 16 F2 | 	cmp	local02, #256 wc
1a084     D8 FF 9F CD |  if_b	jmp	#LR__2089
1a088                 | LR__2090
1a088     46 00 00 FF 
1a08c     0A E5 05 F1 | 	add	objptr, ##36106
1a090     F2 00 59 FC | 	wrword	#128, objptr
1a094     59 00 00 FF 
1a098     E2 E5 85 F1 | 	sub	objptr, ##46050
1a09c                 | ' for i=0 to 7
1a09c     00 20 06 F6 | 	mov	local02, #0
1a0a0     97 8E 48 FB | 	callpa	#(@LR__2092-@LR__2091)>>2,fcache_load_ptr_
1a0a4                 | LR__2091
1a0a4     10 27 02 F6 | 	mov	local05, local02
1a0a8     01 26 66 F0 | 	shl	local05, #1
1a0ac     10 27 02 F1 | 	add	local05, local02
1a0b0     03 26 66 F0 | 	shl	local05, #3
1a0b4     14 00 00 FF 
1a0b8     68 E5 05 F1 | 	add	objptr, ##10600
1a0bc     F2 26 02 F1 | 	add	local05, objptr
1a0c0     00 EE A1 FF 
1a0c4     13 01 68 FC | 	wrlong	##1138491392, local05
1a0c8     10 27 02 F6 | 	mov	local05, local02
1a0cc     01 26 66 F0 | 	shl	local05, #1
1a0d0     10 27 02 F1 | 	add	local05, local02
1a0d4     03 26 66 F0 | 	shl	local05, #3
1a0d8     F2 26 02 F1 | 	add	local05, objptr
1a0dc     04 26 06 F1 | 	add	local05, #4
1a0e0     13 21 42 FC | 	wrbyte	local02, local05
1a0e4     10 27 02 F6 | 	mov	local05, local02
1a0e8     01 26 66 F0 | 	shl	local05, #1
1a0ec     10 27 02 F1 | 	add	local05, local02
1a0f0     03 26 66 F0 | 	shl	local05, #3
1a0f4     F2 26 02 F1 | 	add	local05, objptr
1a0f8     05 26 06 F1 | 	add	local05, #5
1a0fc     13 21 42 FC | 	wrbyte	local02, local05
1a100     10 27 02 F6 | 	mov	local05, local02
1a104     01 26 66 F0 | 	shl	local05, #1
1a108     10 27 02 F1 | 	add	local05, local02
1a10c     03 26 66 F0 | 	shl	local05, #3
1a110     F2 26 02 F1 | 	add	local05, objptr
1a114     06 26 06 F1 | 	add	local05, #6
1a118     13 01 58 FC | 	wrword	#0, local05
1a11c     10 27 02 F6 | 	mov	local05, local02
1a120     01 26 66 F0 | 	shl	local05, #1
1a124     10 27 02 F1 | 	add	local05, local02
1a128     03 26 66 F0 | 	shl	local05, #3
1a12c     F2 26 02 F1 | 	add	local05, objptr
1a130     08 26 06 F1 | 	add	local05, #8
1a134     00 C0 9F FF 
1a138     13 01 68 FC | 	wrlong	##1065353216, local05
1a13c     10 27 02 F6 | 	mov	local05, local02
1a140     01 26 66 F0 | 	shl	local05, #1
1a144     10 27 02 F1 | 	add	local05, local02
1a148     03 26 66 F0 | 	shl	local05, #3
1a14c     F2 26 02 F1 | 	add	local05, objptr
1a150     0C 26 06 F1 | 	add	local05, #12
1a154     00 40 A0 FF 
1a158     13 01 68 FC | 	wrlong	##1082130432, local05
1a15c     10 27 02 F6 | 	mov	local05, local02
1a160     01 26 66 F0 | 	shl	local05, #1
1a164     10 27 02 F1 | 	add	local05, local02
1a168     03 26 66 F0 | 	shl	local05, #3
1a16c     F2 26 02 F1 | 	add	local05, objptr
1a170     10 26 06 F1 | 	add	local05, #16
1a174     13 01 68 FC | 	wrlong	#0, local05
1a178     10 27 02 F6 | 	mov	local05, local02
1a17c     01 26 66 F0 | 	shl	local05, #1
1a180     10 27 02 F1 | 	add	local05, local02
1a184     03 26 66 F0 | 	shl	local05, #3
1a188     F2 26 02 F1 | 	add	local05, objptr
1a18c     14 26 06 F1 | 	add	local05, #20
1a190     13 FF 59 FC | 	wrword	#255, local05
1a194     10 27 02 F6 | 	mov	local05, local02
1a198     01 26 66 F0 | 	shl	local05, #1
1a19c     45 00 00 FF 
1a1a0     6C E4 05 F1 | 	add	objptr, ##35436
1a1a4     F2 26 02 F1 | 	add	local05, objptr
1a1a8     13 FF 59 FC | 	wrword	#255, local05
1a1ac     01 20 06 F1 | 	add	local02, #1
1a1b0     08 20 56 F2 | 	cmps	local02, #8 wc
1a1b4     59 00 00 FF 
1a1b8     D4 E5 85 F1 | 	sub	objptr, ##46036
1a1bc     E4 FE 9F CD |  if_b	jmp	#LR__2091
1a1c0                 | LR__2092
1a1c0     00 6E 20 FF 
1a1c4     00 28 06 F6 | 	mov	local06, ##1088159744
1a1c8                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
1a1c8     03 26 06 F6 | 	mov	local05, #3
1a1cc                 | LR__2093
1a1cc     14 13 02 F6 | 	mov	arg01, local06
1a1d0     CE C3 1F FF 
1a1d4     7D 14 06 F6 | 	mov	arg02, ##1065852029
1a1d8     80 74 B0 FD | 	call	#__system___float_mul
1a1dc     FD 28 02 F6 | 	mov	local06, result1
1a1e0     FA 27 6E FB | 	djnz	local05, #LR__2093
1a1e4     00 20 06 F6 | 	mov	local02, #0
1a1e8                 | LR__2094
1a1e8     10 25 02 F6 | 	mov	local04, local02
1a1ec     02 24 66 F0 | 	shl	local04, #2
1a1f0     14 00 00 FF 
1a1f4     D8 E4 05 F1 | 	add	objptr, ##10456
1a1f8     F2 24 02 F1 | 	add	local04, objptr
1a1fc     12 29 62 FC | 	wrlong	local06, local04
1a200     14 13 02 F6 | 	mov	arg01, local06
1a204     CE C3 1F FF 
1a208     7D 14 06 F6 | 	mov	arg02, ##1065852029
1a20c     14 00 00 FF 
1a210     D8 E4 85 F1 | 	sub	objptr, ##10456
1a214     44 74 B0 FD | 	call	#__system___float_mul
1a218     FD 28 02 F6 | 	mov	local06, result1
1a21c     01 20 06 F1 | 	add	local02, #1
1a220     0C 20 56 F2 | 	cmps	local02, #12 wc
1a224     C0 FF 9F CD |  if_b	jmp	#LR__2094
1a228     14 00 00 FF 
1a22c     38 E5 05 F1 | 	add	objptr, ##10552
1a230     F2 50 6B FC | 	wrlong	#424, objptr
1a234     04 E4 05 F1 | 	add	objptr, #4
1a238     F2 20 6B FC | 	wrlong	#400, objptr
1a23c     04 E4 05 F1 | 	add	objptr, #4
1a240     F2 F2 6A FC | 	wrlong	#377, objptr
1a244     04 E4 05 F1 | 	add	objptr, #4
1a248     F2 C8 6A FC | 	wrlong	#356, objptr
1a24c     04 E4 05 F1 | 	add	objptr, #4
1a250     F2 A0 6A FC | 	wrlong	#336, objptr
1a254     04 E4 05 F1 | 	add	objptr, #4
1a258     F2 7A 6A FC | 	wrlong	#317, objptr
1a25c     04 E4 05 F1 | 	add	objptr, #4
1a260     F2 58 6A FC | 	wrlong	#300, objptr
1a264     04 E4 05 F1 | 	add	objptr, #4
1a268     F2 36 6A FC | 	wrlong	#283, objptr
1a26c     04 E4 05 F1 | 	add	objptr, #4
1a270     F2 16 6A FC | 	wrlong	#267, objptr
1a274     04 E4 05 F1 | 	add	objptr, #4
1a278     F2 F8 69 FC | 	wrlong	#252, objptr
1a27c     04 E4 05 F1 | 	add	objptr, #4
1a280     F2 DC 69 FC | 	wrlong	#238, objptr
1a284     04 E4 05 F1 | 	add	objptr, #4
1a288     F2 C0 69 FC | 	wrlong	#224, objptr
1a28c     45 00 00 FF 
1a290     7E E4 05 F1 | 	add	objptr, ##35454
1a294     F2 00 59 FC | 	wrword	#128, objptr
1a298     02 E4 85 F1 | 	sub	objptr, #2
1a29c     F2 00 59 FC | 	wrword	#128, objptr
1a2a0     59 00 00 FF 
1a2a4     E0 E5 85 F1 | 	sub	objptr, ##46048
1a2a8     A7 F0 03 F6 | 	mov	ptra, fp
1a2ac     B2 00 A0 FD | 	call	#popregs_
1a2b0                 | _init_audio_ret
1a2b0     2D 00 64 FD | 	ret
1a2b4                 | 
1a2b4                 | ' 
1a2b4                 | ' 
1a2b4                 | ' function getnoteval(token) as single
1a2b4                 | _getnoteval
1a2b4     02 4A 05 F6 | 	mov	COUNT_, #2
1a2b8     A8 00 A0 FD | 	call	#pushregs_
1a2bc     01 00 00 FF 
1a2c0     00 13 86 F1 | 	sub	arg01, ##768
1a2c4     09 15 52 F6 | 	abs	arg02, arg01 wc
1a2c8     0C 14 16 FD | 	qdiv	arg02, #12
1a2cc     14 00 00 FF 
1a2d0     D8 E4 05 F1 | 	add	objptr, ##10456
1a2d4     19 14 62 FD | 	getqy	arg02
1a2d8     0A 15 82 F6 | 	negc	arg02, arg02
1a2dc     02 14 66 F0 | 	shl	arg02, #2
1a2e0     F2 14 02 F1 | 	add	arg02, objptr
1a2e4     0A 1F 02 FB | 	rdlong	local01, arg02
1a2e8     09 15 52 F6 | 	abs	arg02, arg01 wc
1a2ec     0C 14 16 FD | 	qdiv	arg02, #12
1a2f0     14 00 00 FF 
1a2f4     D8 E4 85 F1 | 	sub	objptr, ##10456
1a2f8     01 12 06 F6 | 	mov	arg01, #1
1a2fc                 | ' noteexp=1+(note/12) 
1a2fc                 | ' return (2.0^noteexp)*notebase
1a2fc     18 14 62 FD | 	getqx	arg02
1a300     0A 13 82 F3 | 	sumc	arg01, arg02
1a304     09 13 52 F6 | 	abs	arg01, arg01 wc
1a308     1F 20 C6 C9 |  if_b	decod	local02, #31
1a30c     00 20 06 36 |  if_ae	mov	local02, #0
1a310     44 6F B0 FD | 	call	#__system___float_fromuns
1a314     10 FB 61 F5 | 	xor	result1, local02
1a318     FD 14 02 F6 | 	mov	arg02, result1
1a31c     1E 12 C6 F9 | 	decod	arg01, #30
1a320     1C 82 B0 FD | 	call	#__system____builtin_powf
1a324     FD 12 02 F6 | 	mov	arg01, result1
1a328     0F 15 02 F6 | 	mov	arg02, local01
1a32c     2C 73 B0 FD | 	call	#__system___float_mul
1a330     A7 F0 03 F6 | 	mov	ptra, fp
1a334     B2 00 A0 FD | 	call	#popregs_
1a338                 | _getnoteval_ret
1a338     2D 00 64 FD | 	ret
1a33c                 | 
1a33c                 | ' 
1a33c                 | ' 
1a33c                 | ' 
1a33c                 | ' sub init_error_strings
1a33c                 | _init_error_strings
1a33c     74 01 00 FF 
1a340     9D 00 06 F6 | 	mov	_var01, ##@LR__5198
1a344     45 00 00 FF 
1a348     AC E4 05 F1 | 	add	objptr, ##35500
1a34c     F2 00 62 FC | 	wrlong	_var01, objptr
1a350     74 01 00 FF 
1a354     9E 00 06 F6 | 	mov	_var01, ##@LR__5199
1a358     04 E4 05 F1 | 	add	objptr, #4
1a35c     F2 00 62 FC | 	wrlong	_var01, objptr
1a360     74 01 00 FF 
1a364     C3 00 06 F6 | 	mov	_var01, ##@LR__5200
1a368     04 E4 05 F1 | 	add	objptr, #4
1a36c     F2 00 62 FC | 	wrlong	_var01, objptr
1a370     74 01 00 FF 
1a374     E4 00 06 F6 | 	mov	_var01, ##@LR__5201
1a378     04 E4 05 F1 | 	add	objptr, #4
1a37c     F2 00 62 FC | 	wrlong	_var01, objptr
1a380     74 01 00 FF 
1a384     FE 00 06 F6 | 	mov	_var01, ##@LR__5202
1a388     04 E4 05 F1 | 	add	objptr, #4
1a38c     F2 00 62 FC | 	wrlong	_var01, objptr
1a390     74 01 00 FF 
1a394     1A 01 06 F6 | 	mov	_var01, ##@LR__5203
1a398     04 E4 05 F1 | 	add	objptr, #4
1a39c     F2 00 62 FC | 	wrlong	_var01, objptr
1a3a0     74 01 00 FF 
1a3a4     3C 01 06 F6 | 	mov	_var01, ##@LR__5204
1a3a8     04 E4 05 F1 | 	add	objptr, #4
1a3ac     F2 00 62 FC | 	wrlong	_var01, objptr
1a3b0     74 01 00 FF 
1a3b4     6A 01 06 F6 | 	mov	_var01, ##@LR__5205
1a3b8     04 E4 05 F1 | 	add	objptr, #4
1a3bc     F2 00 62 FC | 	wrlong	_var01, objptr
1a3c0     74 01 00 FF 
1a3c4     95 01 06 F6 | 	mov	_var01, ##@LR__5206
1a3c8     04 E4 05 F1 | 	add	objptr, #4
1a3cc     F2 00 62 FC | 	wrlong	_var01, objptr
1a3d0     74 01 00 FF 
1a3d4     AE 01 06 F6 | 	mov	_var01, ##@LR__5207
1a3d8     04 E4 05 F1 | 	add	objptr, #4
1a3dc     F2 00 62 FC | 	wrlong	_var01, objptr
1a3e0     74 01 00 FF 
1a3e4     CF 01 06 F6 | 	mov	_var01, ##@LR__5208
1a3e8     04 E4 05 F1 | 	add	objptr, #4
1a3ec     F2 00 62 FC | 	wrlong	_var01, objptr
1a3f0     74 01 00 FF 
1a3f4     E6 01 06 F6 | 	mov	_var01, ##@LR__5209
1a3f8     04 E4 05 F1 | 	add	objptr, #4
1a3fc     F2 00 62 FC | 	wrlong	_var01, objptr
1a400     75 01 00 FF 
1a404     04 00 06 F6 | 	mov	_var01, ##@LR__5210
1a408     04 E4 05 F1 | 	add	objptr, #4
1a40c     F2 00 62 FC | 	wrlong	_var01, objptr
1a410     75 01 00 FF 
1a414     28 00 06 F6 | 	mov	_var01, ##@LR__5211
1a418     04 E4 05 F1 | 	add	objptr, #4
1a41c     F2 00 62 FC | 	wrlong	_var01, objptr
1a420     75 01 00 FF 
1a424     4F 00 06 F6 | 	mov	_var01, ##@LR__5212
1a428     04 E4 05 F1 | 	add	objptr, #4
1a42c     F2 00 62 FC | 	wrlong	_var01, objptr
1a430     75 01 00 FF 
1a434     6B 00 06 F6 | 	mov	_var01, ##@LR__5213
1a438     04 E4 05 F1 | 	add	objptr, #4
1a43c     F2 00 62 FC | 	wrlong	_var01, objptr
1a440     75 01 00 FF 
1a444     7C 00 06 F6 | 	mov	_var01, ##@LR__5214
1a448     04 E4 05 F1 | 	add	objptr, #4
1a44c     F2 00 62 FC | 	wrlong	_var01, objptr
1a450     75 01 00 FF 
1a454     8C 00 06 F6 | 	mov	_var01, ##@LR__5215
1a458     04 E4 05 F1 | 	add	objptr, #4
1a45c     F2 00 62 FC | 	wrlong	_var01, objptr
1a460     75 01 00 FF 
1a464     A7 00 06 F6 | 	mov	_var01, ##@LR__5216
1a468     04 E4 05 F1 | 	add	objptr, #4
1a46c     F2 00 62 FC | 	wrlong	_var01, objptr
1a470     75 01 00 FF 
1a474     B9 00 06 F6 | 	mov	_var01, ##@LR__5217
1a478     04 E4 05 F1 | 	add	objptr, #4
1a47c     F2 00 62 FC | 	wrlong	_var01, objptr
1a480     75 01 00 FF 
1a484     D1 00 06 F6 | 	mov	_var01, ##@LR__5218
1a488     04 E4 05 F1 | 	add	objptr, #4
1a48c     F2 00 62 FC | 	wrlong	_var01, objptr
1a490     75 01 00 FF 
1a494     E5 00 06 F6 | 	mov	_var01, ##@LR__5219
1a498     04 E4 05 F1 | 	add	objptr, #4
1a49c     F2 00 62 FC | 	wrlong	_var01, objptr
1a4a0     75 01 00 FF 
1a4a4     F5 00 06 F6 | 	mov	_var01, ##@LR__5220
1a4a8     04 E4 05 F1 | 	add	objptr, #4
1a4ac     F2 00 62 FC | 	wrlong	_var01, objptr
1a4b0     75 01 00 FF 
1a4b4     12 01 06 F6 | 	mov	_var01, ##@LR__5221
1a4b8     04 E4 05 F1 | 	add	objptr, #4
1a4bc     F2 00 62 FC | 	wrlong	_var01, objptr
1a4c0     75 01 00 FF 
1a4c4     23 01 06 F6 | 	mov	_var01, ##@LR__5222
1a4c8     04 E4 05 F1 | 	add	objptr, #4
1a4cc     F2 00 62 FC | 	wrlong	_var01, objptr
1a4d0     75 01 00 FF 
1a4d4     34 01 06 F6 | 	mov	_var01, ##@LR__5223
1a4d8     04 E4 05 F1 | 	add	objptr, #4
1a4dc     F2 00 62 FC | 	wrlong	_var01, objptr
1a4e0     75 01 00 FF 
1a4e4     5F 01 06 F6 | 	mov	_var01, ##@LR__5224
1a4e8     04 E4 05 F1 | 	add	objptr, #4
1a4ec     F2 00 62 FC | 	wrlong	_var01, objptr
1a4f0     75 01 00 FF 
1a4f4     7B 01 06 F6 | 	mov	_var01, ##@LR__5225
1a4f8     04 E4 05 F1 | 	add	objptr, #4
1a4fc     F2 00 62 FC | 	wrlong	_var01, objptr
1a500     75 01 00 FF 
1a504     91 01 06 F6 | 	mov	_var01, ##@LR__5226
1a508     04 E4 05 F1 | 	add	objptr, #4
1a50c     F2 00 62 FC | 	wrlong	_var01, objptr
1a510     75 01 00 FF 
1a514     9E 01 06 F6 | 	mov	_var01, ##@LR__5227
1a518     04 E4 05 F1 | 	add	objptr, #4
1a51c     F2 00 62 FC | 	wrlong	_var01, objptr
1a520     75 01 00 FF 
1a524     B0 01 06 F6 | 	mov	_var01, ##@LR__5228
1a528     04 E4 05 F1 | 	add	objptr, #4
1a52c     F2 00 62 FC | 	wrlong	_var01, objptr
1a530     75 01 00 FF 
1a534     C1 01 06 F6 | 	mov	_var01, ##@LR__5229
1a538     04 E4 05 F1 | 	add	objptr, #4
1a53c     F2 00 62 FC | 	wrlong	_var01, objptr
1a540     75 01 00 FF 
1a544     DD 01 06 F6 | 	mov	_var01, ##@LR__5230
1a548     04 E4 05 F1 | 	add	objptr, #4
1a54c     F2 00 62 FC | 	wrlong	_var01, objptr
1a550     75 01 00 FF 
1a554     EE 01 06 F6 | 	mov	_var01, ##@LR__5231
1a558     04 E4 05 F1 | 	add	objptr, #4
1a55c     F2 00 62 FC | 	wrlong	_var01, objptr
1a560     75 01 00 FF 
1a564     FD 01 06 F6 | 	mov	_var01, ##@LR__5232
1a568     04 E4 05 F1 | 	add	objptr, #4
1a56c     F2 00 62 FC | 	wrlong	_var01, objptr
1a570     76 01 00 FF 
1a574     18 00 06 F6 | 	mov	_var01, ##@LR__5233
1a578     04 E4 05 F1 | 	add	objptr, #4
1a57c     F2 00 62 FC | 	wrlong	_var01, objptr
1a580     76 01 00 FF 
1a584     4C 00 06 F6 | 	mov	_var01, ##@LR__5234
1a588     04 E4 05 F1 | 	add	objptr, #4
1a58c     F2 00 62 FC | 	wrlong	_var01, objptr
1a590     76 01 00 FF 
1a594     65 00 06 F6 | 	mov	_var01, ##@LR__5235
1a598     04 E4 05 F1 | 	add	objptr, #4
1a59c     F2 00 62 FC | 	wrlong	_var01, objptr
1a5a0     76 01 00 FF 
1a5a4     81 00 06 F6 | 	mov	_var01, ##@LR__5236
1a5a8     04 E4 05 F1 | 	add	objptr, #4
1a5ac     F2 00 62 FC | 	wrlong	_var01, objptr
1a5b0     76 01 00 FF 
1a5b4     9F 00 06 F6 | 	mov	_var01, ##@LR__5237
1a5b8     04 E4 05 F1 | 	add	objptr, #4
1a5bc     F2 00 62 FC | 	wrlong	_var01, objptr
1a5c0     76 01 00 FF 
1a5c4     B8 00 06 F6 | 	mov	_var01, ##@LR__5238
1a5c8     04 E4 05 F1 | 	add	objptr, #4
1a5cc     F2 00 62 FC | 	wrlong	_var01, objptr
1a5d0     76 01 00 FF 
1a5d4     D7 00 06 F6 | 	mov	_var01, ##@LR__5239
1a5d8     04 E4 05 F1 | 	add	objptr, #4
1a5dc     F2 00 62 FC | 	wrlong	_var01, objptr
1a5e0     76 01 00 FF 
1a5e4     E6 00 06 F6 | 	mov	_var01, ##@LR__5240
1a5e8     04 E4 05 F1 | 	add	objptr, #4
1a5ec     F2 00 62 FC | 	wrlong	_var01, objptr
1a5f0     76 01 00 FF 
1a5f4     14 01 06 F6 | 	mov	_var01, ##@LR__5241
1a5f8     04 E4 05 F1 | 	add	objptr, #4
1a5fc     F2 00 62 FC | 	wrlong	_var01, objptr
1a600     76 01 00 FF 
1a604     22 01 06 F6 | 	mov	_var01, ##@LR__5242
1a608     04 E4 05 F1 | 	add	objptr, #4
1a60c     F2 00 62 FC | 	wrlong	_var01, objptr
1a610     76 01 00 FF 
1a614     37 01 06 F6 | 	mov	_var01, ##@LR__5243
1a618     04 E4 05 F1 | 	add	objptr, #4
1a61c     F2 00 62 FC | 	wrlong	_var01, objptr
1a620     76 01 00 FF 
1a624     5B 01 06 F6 | 	mov	_var01, ##@LR__5244
1a628     04 E4 05 F1 | 	add	objptr, #4
1a62c     F2 00 62 FC | 	wrlong	_var01, objptr
1a630     76 01 00 FF 
1a634     72 01 06 F6 | 	mov	_var01, ##@LR__5245
1a638     04 E4 05 F1 | 	add	objptr, #4
1a63c     F2 00 62 FC | 	wrlong	_var01, objptr
1a640     76 01 00 FF 
1a644     85 01 06 F6 | 	mov	_var01, ##@LR__5246
1a648     04 E4 05 F1 | 	add	objptr, #4
1a64c     F2 00 62 FC | 	wrlong	_var01, objptr
1a650     76 01 00 FF 
1a654     9C 01 06 F6 | 	mov	_var01, ##@LR__5247
1a658     04 E4 05 F1 | 	add	objptr, #4
1a65c     F2 00 62 FC | 	wrlong	_var01, objptr
1a660     45 00 00 FF 
1a664     70 E5 85 F1 | 	sub	objptr, ##35696
1a668                 | _init_error_strings_ret
1a668     2D 00 64 FD | 	ret
1a66c                 | 
1a66c                 | '         
1a66c                 | ' sub printerror(err as integer)
1a66c                 | _printerror
1a66c     01 4A 05 F6 | 	mov	COUNT_, #1
1a670     A8 00 A0 FD | 	call	#pushregs_
1a674     09 1F 02 F6 | 	mov	local01, arg01
1a678     76 01 00 FF 
1a67c     B5 13 06 F6 | 	mov	arg01, ##@LR__5248
1a680     A8 31 B0 FD | 	call	#_hg010b_spin2_write
1a684     0F 13 02 F6 | 	mov	arg01, local01
1a688     10 35 B0 FD | 	call	#_hg010b_spin2_inttostr
1a68c     FD 12 02 F6 | 	mov	arg01, result1
1a690     98 31 B0 FD | 	call	#_hg010b_spin2_write
1a694     76 01 00 FF 
1a698     BC 13 06 F6 | 	mov	arg01, ##@LR__5249
1a69c     8C 31 B0 FD | 	call	#_hg010b_spin2_write
1a6a0     02 1E 66 F0 | 	shl	local01, #2
1a6a4     45 00 00 FF 
1a6a8     AC E4 05 F1 | 	add	objptr, ##35500
1a6ac     F2 1E 02 F1 | 	add	local01, objptr
1a6b0     0F 13 02 FB | 	rdlong	arg01, local01
1a6b4     45 00 00 FF 
1a6b8     AC E4 85 F1 | 	sub	objptr, ##35500
1a6bc                 | ' 
1a6bc                 | ' write(text)
1a6bc     6C 31 B0 FD | 	call	#_hg010b_spin2_write
1a6c0                 | ' crlf
1a6c0     34 34 B0 FD | 	call	#_hg010b_spin2_crlf
1a6c4     A7 F0 03 F6 | 	mov	ptra, fp
1a6c8     B2 00 A0 FD | 	call	#popregs_
1a6cc                 | _printerror_ret
1a6cc     2D 00 64 FD | 	ret
1a6d0                 | 
1a6d0                 | ' 
1a6d0                 | ' '' ------------------------------- Hardware start/stop/initialization 
1a6d0                 | ' 
1a6d0                 | ' sub startpsram
1a6d0                 | _startpsram
1a6d0     00 12 06 F6 | 	mov	arg01, #0
1a6d4     0A 14 C6 F9 | 	decod	arg02, #10
1a6d8     0B 16 06 F6 | 	mov	arg03, #11
1a6dc     07 18 06 F6 | 	mov	arg04, #7
1a6e0     0B 00 00 FF 
1a6e4     CC E4 05 F1 | 	add	objptr, ##5836
1a6e8     BC 35 B0 FD | 	call	#_psram_spin2_startx
1a6ec     2B 00 00 FF 
1a6f0     6C E5 05 F1 | 	add	objptr, ##22380
1a6f4     F2 FA 61 FC | 	wrlong	result1, objptr
1a6f8                 | '     return $7FF00 + cog*12
1a6f8     0C E4 05 F1 | 	add	objptr, #12
1a6fc     FF 03 80 FF 
1a700     F2 00 6A FC | 	wrlong	##524032, objptr
1a704     37 00 00 FF 
1a708     44 E4 85 F1 | 	sub	objptr, ##28228
1a70c                 | _startpsram_ret
1a70c     2D 00 64 FD | 	ret
1a710                 | 
1a710                 | ' 
1a710                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
1a710                 | _startvideo
1a710     01 4A 05 F6 | 	mov	COUNT_, #1
1a714     A8 00 A0 FD | 	call	#pushregs_
1a718     37 00 00 FF 
1a71c     44 E4 05 F1 | 	add	objptr, ##28228
1a720     F2 18 02 FB | 	rdlong	arg04, objptr
1a724     37 00 00 FF 
1a728     44 E4 85 F1 | 	sub	objptr, ##28228
1a72c     0A 13 02 F6 | 	mov	arg01, arg02
1a730     0C 15 02 F6 | 	mov	arg02, arg04
1a734     EC 18 B0 FD | 	call	#_hg010b_spin2_start
1a738     37 00 00 FF 
1a73c     30 E4 05 F1 | 	add	objptr, ##28208
1a740     F2 FA 61 FC | 	wrlong	result1, objptr
1a744                 | ' 
1a744                 | ' videocog=v.start(pin,mbox)
1a744                 | ' 
1a744                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1a744     00 1E 06 F6 | 	mov	local01, #0
1a748     2B 00 00 FF 
1a74c     64 E5 85 F1 | 	sub	objptr, ##22372
1a750                 | LR__2100
1a750     0F 13 02 F6 | 	mov	arg01, local01
1a754     00 28 00 FF 
1a758     00 14 06 F6 | 	mov	arg02, ##5242880
1a75c     A0 39 B0 FD | 	call	#_psram_spin2_setQos
1a760     01 1E 06 F1 | 	add	local01, #1
1a764     08 1E 56 F2 | 	cmps	local01, #8 wc
1a768     E4 FF 9F CD |  if_b	jmp	#LR__2100
1a76c     2B 00 00 FF 
1a770     64 E5 05 F1 | 	add	objptr, ##22372
1a774     F2 12 02 FB | 	rdlong	arg01, objptr
1a778     7A 00 02 FF 
1a77c     00 14 06 F6 | 	mov	arg02, ##67171328
1a780     2B 00 00 FF 
1a784     64 E5 85 F1 | 	sub	objptr, ##22372
1a788     74 39 B0 FD | 	call	#_psram_spin2_setQos
1a78c     0B 00 00 FF 
1a790     CC E4 85 F1 | 	sub	objptr, ##5836
1a794                 | ' psram.setQoS(videocog, $0400f400) 
1a794                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1a794     F2 14 02 F6 | 	mov	arg02, objptr
1a798     00 18 04 FF 
1a79c     00 14 46 F5 | 	or	arg02, ##137363456
1a7a0     00 16 06 F6 | 	mov	arg03, #0
1a7a4     00 18 06 F6 | 	mov	arg04, #0
1a7a8     00 12 06 F6 | 	mov	arg01, #0
1a7ac     0C 4E B0 FD | 	call	#__system___basic_open
1a7b0                 | ' return videocog
1a7b0     37 00 00 FF 
1a7b4     30 E4 05 F1 | 	add	objptr, ##28208
1a7b8     F2 FA 01 FB | 	rdlong	result1, objptr
1a7bc     37 00 00 FF 
1a7c0     30 E4 85 F1 | 	sub	objptr, ##28208
1a7c4     A7 F0 03 F6 | 	mov	ptra, fp
1a7c8     B2 00 A0 FD | 	call	#popregs_
1a7cc                 | _startvideo_ret
1a7cc     2D 00 64 FD | 	ret
1a7d0                 | 
1a7d0                 | ' 
1a7d0                 | ' 
1a7d0                 | ' 
1a7d0                 | ' 
1a7d0                 | ' '' ------------------------------- Convenient psram peek/poke
1a7d0                 | ' 
1a7d0                 | ' sub pslpoke(addr as ulong,value as ulong)
1a7d0                 | _pslpoke
1a7d0     00 4A 05 F6 | 	mov	COUNT_, #0
1a7d4     A8 00 A0 FD | 	call	#pushregs_
1a7d8     08 F0 07 F1 | 	add	ptra, #8
1a7dc     A7 12 62 FC | 	wrlong	arg01, fp
1a7e0     04 4E 05 F1 | 	add	fp, #4
1a7e4     A7 14 62 FC | 	wrlong	arg02, fp
1a7e8     A7 12 02 F6 | 	mov	arg01, fp
1a7ec     04 4E 85 F1 | 	sub	fp, #4
1a7f0     A7 14 02 FB | 	rdlong	arg02, fp
1a7f4     04 16 06 F6 | 	mov	arg03, #4
1a7f8     0B 00 00 FF 
1a7fc     CC E4 05 F1 | 	add	objptr, ##5836
1a800     6C 37 B0 FD | 	call	#_psram_spin2_write
1a804     0B 00 00 FF 
1a808     CC E4 85 F1 | 	sub	objptr, ##5836
1a80c     A7 F0 03 F6 | 	mov	ptra, fp
1a810     B2 00 A0 FD | 	call	#popregs_
1a814                 | _pslpoke_ret
1a814     2D 00 64 FD | 	ret
1a818                 | 
1a818                 | ' 
1a818                 | ' sub psdpoke(addr as ulong,value as ulong)
1a818                 | _psdpoke
1a818     00 4A 05 F6 | 	mov	COUNT_, #0
1a81c     A8 00 A0 FD | 	call	#pushregs_
1a820     08 F0 07 F1 | 	add	ptra, #8
1a824     A7 12 62 FC | 	wrlong	arg01, fp
1a828     04 4E 05 F1 | 	add	fp, #4
1a82c     A7 14 62 FC | 	wrlong	arg02, fp
1a830     A7 12 02 F6 | 	mov	arg01, fp
1a834     04 4E 85 F1 | 	sub	fp, #4
1a838     A7 14 02 FB | 	rdlong	arg02, fp
1a83c     02 16 06 F6 | 	mov	arg03, #2
1a840     0B 00 00 FF 
1a844     CC E4 05 F1 | 	add	objptr, ##5836
1a848     24 37 B0 FD | 	call	#_psram_spin2_write
1a84c     0B 00 00 FF 
1a850     CC E4 85 F1 | 	sub	objptr, ##5836
1a854     A7 F0 03 F6 | 	mov	ptra, fp
1a858     B2 00 A0 FD | 	call	#popregs_
1a85c                 | _psdpoke_ret
1a85c     2D 00 64 FD | 	ret
1a860                 | 
1a860                 | ' 
1a860                 | ' sub pspoke(addr as ulong,value as ulong)
1a860                 | _pspoke
1a860     00 4A 05 F6 | 	mov	COUNT_, #0
1a864     A8 00 A0 FD | 	call	#pushregs_
1a868     08 F0 07 F1 | 	add	ptra, #8
1a86c     A7 12 62 FC | 	wrlong	arg01, fp
1a870     04 4E 05 F1 | 	add	fp, #4
1a874     A7 14 62 FC | 	wrlong	arg02, fp
1a878     A7 12 02 F6 | 	mov	arg01, fp
1a87c     04 4E 85 F1 | 	sub	fp, #4
1a880     A7 14 02 FB | 	rdlong	arg02, fp
1a884     01 16 06 F6 | 	mov	arg03, #1
1a888     0B 00 00 FF 
1a88c     CC E4 05 F1 | 	add	objptr, ##5836
1a890     DC 36 B0 FD | 	call	#_psram_spin2_write
1a894     0B 00 00 FF 
1a898     CC E4 85 F1 | 	sub	objptr, ##5836
1a89c     A7 F0 03 F6 | 	mov	ptra, fp
1a8a0     B2 00 A0 FD | 	call	#popregs_
1a8a4                 | _pspoke_ret
1a8a4     2D 00 64 FD | 	ret
1a8a8                 | 
1a8a8                 | ' 
1a8a8                 | ' function pspeek(adr as ulong) as ubyte
1a8a8                 | _pspeek
1a8a8     00 4A 05 F6 | 	mov	COUNT_, #0
1a8ac     A8 00 A0 FD | 	call	#pushregs_
1a8b0     0C F0 07 F1 | 	add	ptra, #12
1a8b4     04 4E 05 F1 | 	add	fp, #4
1a8b8     A7 12 62 FC | 	wrlong	arg01, fp
1a8bc     04 4E 05 F1 | 	add	fp, #4
1a8c0     A7 12 02 F6 | 	mov	arg01, fp
1a8c4     04 4E 85 F1 | 	sub	fp, #4
1a8c8     A7 14 02 FB | 	rdlong	arg02, fp
1a8cc     04 4E 85 F1 | 	sub	fp, #4
1a8d0     01 16 06 F6 | 	mov	arg03, #1
1a8d4     0B 00 00 FF 
1a8d8     CC E4 05 F1 | 	add	objptr, ##5836
1a8dc     F4 35 B0 FD | 	call	#_psram_spin2_read1
1a8e0     0B 00 00 FF 
1a8e4     CC E4 85 F1 | 	sub	objptr, ##5836
1a8e8                 | ' psram.read1(varptr(res),adr,1)
1a8e8                 | ' return res
1a8e8     08 4E 05 F1 | 	add	fp, #8
1a8ec     A7 FA C1 FA | 	rdbyte	result1, fp
1a8f0     08 4E 85 F1 | 	sub	fp, #8
1a8f4     A7 F0 03 F6 | 	mov	ptra, fp
1a8f8     B2 00 A0 FD | 	call	#popregs_
1a8fc                 | _pspeek_ret
1a8fc     2D 00 64 FD | 	ret
1a900                 | 
1a900                 | ' 
1a900                 | ' function pslpeek(adr as ulong) as ulong
1a900                 | _pslpeek
1a900     00 4A 05 F6 | 	mov	COUNT_, #0
1a904     A8 00 A0 FD | 	call	#pushregs_
1a908     0C F0 07 F1 | 	add	ptra, #12
1a90c     04 4E 05 F1 | 	add	fp, #4
1a910     A7 12 62 FC | 	wrlong	arg01, fp
1a914     04 4E 05 F1 | 	add	fp, #4
1a918     A7 12 02 F6 | 	mov	arg01, fp
1a91c     04 4E 85 F1 | 	sub	fp, #4
1a920     A7 14 02 FB | 	rdlong	arg02, fp
1a924     04 4E 85 F1 | 	sub	fp, #4
1a928     04 16 06 F6 | 	mov	arg03, #4
1a92c     0B 00 00 FF 
1a930     CC E4 05 F1 | 	add	objptr, ##5836
1a934     9C 35 B0 FD | 	call	#_psram_spin2_read1
1a938     0B 00 00 FF 
1a93c     CC E4 85 F1 | 	sub	objptr, ##5836
1a940                 | ' psram.read1(varptr(res),adr,4)
1a940                 | ' return res
1a940     08 4E 05 F1 | 	add	fp, #8
1a944     A7 FA 01 FB | 	rdlong	result1, fp
1a948     08 4E 85 F1 | 	sub	fp, #8
1a94c     A7 F0 03 F6 | 	mov	ptra, fp
1a950     B2 00 A0 FD | 	call	#popregs_
1a954                 | _pslpeek_ret
1a954     2D 00 64 FD | 	ret
1a958                 | 
1a958                 | ' 
1a958                 | ' function psdpeek(adr as ulong) as ulong
1a958                 | _psdpeek
1a958     00 4A 05 F6 | 	mov	COUNT_, #0
1a95c     A8 00 A0 FD | 	call	#pushregs_
1a960     0C F0 07 F1 | 	add	ptra, #12
1a964     04 4E 05 F1 | 	add	fp, #4
1a968     A7 12 62 FC | 	wrlong	arg01, fp
1a96c     04 4E 05 F1 | 	add	fp, #4
1a970     A7 12 02 F6 | 	mov	arg01, fp
1a974     04 4E 85 F1 | 	sub	fp, #4
1a978     A7 14 02 FB | 	rdlong	arg02, fp
1a97c     04 4E 85 F1 | 	sub	fp, #4
1a980     02 16 06 F6 | 	mov	arg03, #2
1a984     0B 00 00 FF 
1a988     CC E4 05 F1 | 	add	objptr, ##5836
1a98c     44 35 B0 FD | 	call	#_psram_spin2_read1
1a990     0B 00 00 FF 
1a994     CC E4 85 F1 | 	sub	objptr, ##5836
1a998                 | ' psram.read1(varptr(res),adr,2)
1a998                 | ' return res
1a998     08 4E 05 F1 | 	add	fp, #8
1a99c     A7 FA E1 FA | 	rdword	result1, fp
1a9a0     08 4E 85 F1 | 	sub	fp, #8
1a9a4     A7 F0 03 F6 | 	mov	ptra, fp
1a9a8     B2 00 A0 FD | 	call	#popregs_
1a9ac                 | _psdpeek_ret
1a9ac     2D 00 64 FD | 	ret
1a9b0                 | 
1a9b0                 | ' 
1a9b0                 | ' '' ------------------------------- USB keyboard scan to char translator
1a9b0                 | ' 
1a9b0                 | ' function scantochar(key)
1a9b0                 | _scantochar
1a9b0                 | ' 
1a9b0                 | ' select case (key shr 8) and 255
1a9b0     09 01 02 F6 | 	mov	_var01, arg01
1a9b4     08 00 C6 F0 | 	sar	_var01, #8
1a9b8     FF 00 0E F5 | 	and	_var01, #255 wz
1a9bc     24 00 90 AD |  if_e	jmp	#LR__2110
1a9c0     02 00 0E F2 | 	cmp	_var01, #2 wz
1a9c4     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1a9c8     30 00 90 AD |  if_e	jmp	#LR__2111
1a9cc     40 00 0E F2 | 	cmp	_var01, #64 wz
1a9d0     44 00 90 AD |  if_e	jmp	#LR__2112
1a9d4     42 00 0E F2 | 	cmp	_var01, #66 wz
1a9d8     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1a9dc     70 00 90 5D |  if_ne	jmp	#LR__2114
1a9e0     50 00 90 FD | 	jmp	#LR__2113
1a9e4                 | LR__2110
1a9e4     09 FB 01 F6 | 	mov	result1, arg01
1a9e8     7F FA 05 F5 | 	and	result1, #127
1a9ec     02 FA 65 F0 | 	shl	result1, #2
1a9f0     F5 FA 01 F1 | 	add	result1, ptr__dat__
1a9f4     FD FA C1 FA | 	rdbyte	result1, result1
1a9f8     54 00 90 FD | 	jmp	#_scantochar_ret
1a9fc                 | LR__2111
1a9fc     09 FB 01 F6 | 	mov	result1, arg01
1aa00     7F FA 05 F5 | 	and	result1, #127
1aa04     02 FA 65 F0 | 	shl	result1, #2
1aa08     01 FA 05 F1 | 	add	result1, #1
1aa0c     F5 FA 01 F1 | 	add	result1, ptr__dat__
1aa10     FD FA C1 FA | 	rdbyte	result1, result1
1aa14     38 00 90 FD | 	jmp	#_scantochar_ret
1aa18                 | LR__2112
1aa18     09 FB 01 F6 | 	mov	result1, arg01
1aa1c     7F FA 05 F5 | 	and	result1, #127
1aa20     02 FA 65 F0 | 	shl	result1, #2
1aa24     02 FA 05 F1 | 	add	result1, #2
1aa28     F5 FA 01 F1 | 	add	result1, ptr__dat__
1aa2c     FD FA C1 FA | 	rdbyte	result1, result1
1aa30     1C 00 90 FD | 	jmp	#_scantochar_ret
1aa34                 | LR__2113
1aa34     09 FB 01 F6 | 	mov	result1, arg01
1aa38     7F FA 05 F5 | 	and	result1, #127
1aa3c     02 FA 65 F0 | 	shl	result1, #2
1aa40     03 FA 05 F1 | 	add	result1, #3
1aa44     F5 FA 01 F1 | 	add	result1, ptr__dat__
1aa48     FD FA C1 FA | 	rdbyte	result1, result1
1aa4c     00 00 90 FD | 	jmp	#_scantochar_ret
1aa50                 | LR__2114
1aa50                 | _scantochar_ret
1aa50     2D 00 64 FD | 	ret
1aa54                 | 
1aa54                 | _program
1aa54     13 4A 05 F6 | 	mov	COUNT_, #19
1aa58     A8 00 A0 FD | 	call	#pushregs_
1aa5c     70 FC BF FD | 	call	#_startpsram
1aa60     40 12 06 F6 | 	mov	arg01, #64
1aa64     00 14 06 F6 | 	mov	arg02, #0
1aa68     00 16 06 F6 | 	mov	arg03, #0
1aa6c     A0 FC BF FD | 	call	#_startvideo
1aa70     37 00 00 FF 
1aa74     44 E4 05 F1 | 	add	objptr, ##28228
1aa78     F2 12 02 FB | 	rdlong	arg01, objptr
1aa7c     00 14 06 F6 | 	mov	arg02, #0
1aa80     FB 03 00 FF 
1aa84     00 17 06 F6 | 	mov	arg03, ##521984
1aa88     2B 00 00 FF 
1aa8c     78 E5 85 F1 | 	sub	objptr, ##22392
1aa90     1C 3A B0 FD | 	call	#_audio096_spin2_start
1aa94     FE 1C 02 F6 | 	mov	arg06, result2
1aa98     2B 00 00 FF 
1aa9c     60 E5 05 F1 | 	add	objptr, ##22368
1aaa0     F2 FA 61 FC | 	wrlong	result1, objptr
1aaa4     14 E4 05 F1 | 	add	objptr, #20
1aaa8     F2 1C 62 FC | 	wrlong	arg06, objptr
1aaac     37 00 00 FF 
1aab0     40 E4 85 F1 | 	sub	objptr, ##28224
1aab4     32 12 06 F6 | 	mov	arg01, #50
1aab8     4C 43 B0 FD | 	call	#__system___waitms
1aabc     37 00 00 FF 
1aac0     40 E4 05 F1 | 	add	objptr, ##28224
1aac4     F2 12 02 FB | 	rdlong	arg01, objptr
1aac8     37 00 00 FF 
1aacc     40 E4 85 F1 | 	sub	objptr, ##28224
1aad0     14 12 06 F1 | 	add	arg01, #20
1aad4     20 00 80 FF 
1aad8     09 01 58 FC | 	wrword	##16384, arg01
1aadc     28 37 B0 FD | 	call	#_usbnew_spin2_start
1aae0     37 00 00 FF 
1aae4     34 E4 05 F1 | 	add	objptr, ##28212
1aae8     F2 FA 61 FC | 	wrlong	result1, objptr
1aaec                 | '   mouse_limits[0] := xlim
1aaec     0F 00 00 FF 
1aaf0     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
1aaf4     01 00 80 FF 
1aaf8     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1aafc                 | '   mouse_limits[1] := ylim
1aafc     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1ab00     01 00 80 FF 
1ab04     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
1ab08     36 00 00 FF 
1ab0c     23 E5 85 F1 | 	sub	objptr, ##27939
1ab10     F2 12 02 F6 | 	mov	arg01, objptr
1ab14     11 E5 85 F1 | 	sub	objptr, #273
1ab18     C4 12 06 F1 | 	add	arg01, #196
1ab1c                 | '   mouse_outptr := ptr
1ab1c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1ab20     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
1ab24     0F 00 00 FF 
1ab28     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1ab2c     0E 00 00 FF 
1ab30     B6 EA 05 F1 | 	add	ptr__dat__, ##7350
1ab34     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1ab38     0E 00 00 FF 
1ab3c     B6 EA 85 F1 | 	sub	ptr__dat__, ##7350
1ab40     10 12 06 F6 | 	mov	arg01, #16
1ab44     74 1B B0 FD | 	call	#_hg010b_spin2_setspriteptr
1ab48     10 12 06 F6 | 	mov	arg01, #16
1ab4c     20 14 06 F6 | 	mov	arg02, #32
1ab50     20 16 06 F6 | 	mov	arg03, #32
1ab54     F4 1B B0 FD | 	call	#_hg010b_spin2_setspritesize
1ab58     09 12 C6 F9 | 	decod	arg01, #9
1ab5c     2C 15 06 F6 | 	mov	arg02, #300
1ab60     FC 37 B0 FD | 	call	#_usbnew_spin2_mouse_move
1ab64     F2 1C 02 F6 | 	mov	arg06, objptr
1ab68     58 00 00 FF 
1ab6c     28 E5 05 F1 | 	add	objptr, ##45352
1ab70     F2 1A 02 F6 | 	mov	arg05, objptr
1ab74     0D 1D 62 FC | 	wrlong	arg06, arg05
1ab78     04 1A 06 F1 | 	add	arg05, #4
1ab7c     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
1ab80     EF 14 02 F6 | 	mov	arg02, entryptr__
1ab84     F2 1E 02 F6 | 	mov	local01, objptr
1ab88     1E FA 05 F6 | 	mov	result1, #30
1ab8c     28 1E 62 FD | 	setq	local01
1ab90     0A FB F1 FC | 	coginit	result1, arg02 wc
1ab94     01 FA 65 C6 |  if_b	neg	result1, #1
1ab98     04 E4 85 F1 | 	sub	objptr, #4
1ab9c     F2 FA 61 FC | 	wrlong	result1, objptr
1aba0     01 00 00 FF 
1aba4     90 E4 05 F1 | 	add	objptr, ##656
1aba8     F2 00 68 FC | 	wrlong	#0, objptr
1abac     22 00 00 FF 
1abb0     50 E5 85 F1 | 	sub	objptr, ##17744
1abb4     F2 04 68 FC | 	wrlong	#2, objptr
1abb8     04 E4 05 F1 | 	add	objptr, #4
1abbc     F2 26 69 FC | 	wrlong	#147, objptr
1abc0     04 E4 05 F1 | 	add	objptr, #4
1abc4     F2 34 69 FC | 	wrlong	#154, objptr
1abc8     04 E4 05 F1 | 	add	objptr, #4
1abcc     F2 08 68 FC | 	wrlong	#4, objptr
1abd0     04 E4 85 F1 | 	sub	objptr, #4
1abd4     F2 1C 02 FB | 	rdlong	arg06, objptr
1abd8     14 E4 85 F1 | 	sub	objptr, #20
1abdc     F2 1C 62 FC | 	wrlong	arg06, objptr
1abe0     04 E4 05 F1 | 	add	objptr, #4
1abe4     F2 00 68 FC | 	wrlong	#0, objptr
1abe8     04 E4 05 F1 | 	add	objptr, #4
1abec     F2 00 68 FC | 	wrlong	#0, objptr
1abf0     21 00 00 FF 
1abf4     C0 E4 05 F1 | 	add	objptr, ##17088
1abf8     F2 02 68 FC | 	wrlong	#1, objptr
1abfc     01 00 00 FF 
1ac00     9C E4 05 F1 | 	add	objptr, ##668
1ac04     F2 00 68 FC | 	wrlong	#0, objptr
1ac08     01 00 00 FF 
1ac0c     00 EA 05 F1 | 	add	ptr__dat__, ##512
1ac10     08 E4 05 F1 | 	add	objptr, #8
1ac14     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1ac18     04 E4 85 F1 | 	sub	objptr, #4
1ac1c     03 00 80 FF 
1ac20     F2 3C 69 FC | 	wrlong	##1694, objptr
1ac24     14 00 00 FF 
1ac28     2C E5 85 F1 | 	sub	objptr, ##10540
1ac2c     F2 18 68 FC | 	wrlong	#12, objptr
1ac30     45 00 00 FF 
1ac34     94 E4 85 F1 | 	sub	objptr, ##35476
1ac38     01 00 00 FF 
1ac3c     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1ac40     7C DC BF FD | 	call	#_init_commands
1ac44     F4 F6 BF FD | 	call	#_init_error_strings
1ac48     94 ED BF FD | 	call	#_init_audio
1ac4c     FC 37 BF FD | 	call	#_do_new
1ac50     37 00 00 FF 
1ac54     6C E4 05 F1 | 	add	objptr, ##28268
1ac58     F2 12 02 FB | 	rdlong	arg01, objptr
1ac5c     04 E4 85 F1 | 	sub	objptr, #4
1ac60     F2 14 02 FB | 	rdlong	arg02, objptr
1ac64     37 00 00 FF 
1ac68     68 E4 85 F1 | 	sub	objptr, ##28264
1ac6c     FC 27 B0 FD | 	call	#_hg010b_spin2_cls
1ac70     37 00 00 FF 
1ac74     70 E4 05 F1 | 	add	objptr, ##28272
1ac78     F2 12 02 FB | 	rdlong	arg01, objptr
1ac7c     37 00 00 FF 
1ac80     70 E4 85 F1 | 	sub	objptr, ##28272
1ac84     94 26 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1ac88                 | ' 
1ac88                 | ' leading_spaces:=amount
1ac88     01 00 00 FF 
1ac8c     B6 E4 05 F1 | 	add	objptr, ##694
1ac90     F2 04 68 FC | 	wrlong	#2, objptr
1ac94     01 00 00 FF 
1ac98     B6 E4 85 F1 | 	sub	objptr, ##694
1ac9c     76 01 00 FF 
1aca0     BF 21 06 F6 | 	mov	local02, ##@LR__5250
1aca4     3D 12 06 F6 | 	mov	arg01, #61
1aca8     3C 14 06 F6 | 	mov	arg02, #60
1acac     3B 16 06 F6 | 	mov	arg03, #59
1acb0     3A 18 06 F6 | 	mov	arg04, #58
1acb4     54 88 B0 FD | 	call	#__system___vfs_open_sdcardx
1acb8     FD 14 02 F6 | 	mov	arg02, result1
1acbc     10 13 02 F6 | 	mov	arg01, local02
1acc0     1C 42 B0 FD | 	call	#__system___mount
1acc4     76 01 00 FF 
1acc8     C3 13 06 F6 | 	mov	arg01, ##@LR__5251
1accc     D0 44 B0 FD | 	call	#__system___chdir
1acd0     76 01 00 FF 
1acd4     CB 21 06 F6 | 	mov	local02, ##@LR__5252
1acd8     52 00 00 FF 
1acdc     C8 E4 05 F1 | 	add	objptr, ##42184
1ace0     F2 20 62 FC | 	wrlong	local02, objptr
1ace4     1B 00 00 FF 
1ace8     64 E4 85 F1 | 	sub	objptr, ##13924
1acec     F2 12 02 FB | 	rdlong	arg01, objptr
1acf0     37 00 00 FF 
1acf4     64 E4 85 F1 | 	sub	objptr, ##28260
1acf8     01 12 66 F0 | 	shl	arg01, #1
1acfc     01 14 06 F6 | 	mov	arg02, #1
1ad00     58 26 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1ad04                 | ' 
1ad04                 | ' init_commands
1ad04                 | ' init_error_strings
1ad04                 | ' init_audio
1ad04                 | ' do_new
1ad04                 | ' 
1ad04                 | ' 
1ad04                 | ' cls(ink, paper)
1ad04                 | ' v.setfontfamily(font) 				' use ST Mono font
1ad04                 | ' v.setleadingspaces(2)
1ad04                 | ' mount "/sd", _vfs_open_sdcard()
1ad04                 | ' chdir "/sd/bas"
1ad04                 | ' 
1ad04                 | ' currentdir$="/sd/bas"
1ad04                 | ' 
1ad04                 | ' position 2*editor_spaces,1 : print ver$
1ad04     00 12 06 F6 | 	mov	arg01, #0
1ad08     68 97 B0 FD | 	call	#__system___getiolock_0484
1ad0c     FD 12 02 F6 | 	mov	arg01, result1
1ad10     00 3E B0 FD | 	call	#__system___lockmem
1ad14     18 00 00 FF 
1ad18     4C EB 05 F1 | 	add	ptr__dat__, ##12620
1ad1c     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1ad20     18 00 00 FF 
1ad24     4C EB 85 F1 | 	sub	ptr__dat__, ##12620
1ad28     00 12 06 F6 | 	mov	arg01, #0
1ad2c     00 16 06 F6 | 	mov	arg03, #0
1ad30     D4 4A B0 FD | 	call	#__system___basic_print_string
1ad34     00 12 06 F6 | 	mov	arg01, #0
1ad38     0A 14 06 F6 | 	mov	arg02, #10
1ad3c     00 16 06 F6 | 	mov	arg03, #0
1ad40     6C 4A B0 FD | 	call	#__system___basic_print_char
1ad44     00 12 06 F6 | 	mov	arg01, #0
1ad48     28 97 B0 FD | 	call	#__system___getiolock_0484
1ad4c     FD 00 68 FC | 	wrlong	#0, result1
1ad50     59 00 00 FF 
1ad54     B8 E5 05 F1 | 	add	objptr, ##46008
1ad58     F2 12 02 FB | 	rdlong	arg01, objptr
1ad5c     16 00 00 FF 
1ad60     2C E5 85 F1 | 	sub	objptr, ##11564
1ad64     F2 20 02 FB | 	rdlong	local02, objptr
1ad68     43 00 00 FF 
1ad6c     8C E4 85 F1 | 	sub	objptr, ##34444
1ad70     10 13 82 F1 | 	sub	arg01, local02
1ad74     00 14 06 F6 | 	mov	arg02, #0
1ad78     0A 16 06 F6 | 	mov	arg03, #10
1ad7c     F8 5F B0 FD | 	call	#__system__Number_S
1ad80     FD 12 02 F6 | 	mov	arg01, result1
1ad84     76 01 00 FF 
1ad88     D3 15 06 F6 | 	mov	arg02, ##@LR__5253
1ad8c     E0 3D B0 FD | 	call	#__system___string_concat
1ad90     FD 20 02 F6 | 	mov	local02, result1
1ad94     58 00 00 FF 
1ad98     1C E5 05 F1 | 	add	objptr, ##45340
1ad9c     F2 20 62 FC | 	wrlong	local02, objptr
1ada0     58 00 00 FF 
1ada4     1C E5 85 F1 | 	sub	objptr, ##45340
1ada8                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
1ada8     00 12 06 F6 | 	mov	arg01, #0
1adac     C4 96 B0 FD | 	call	#__system___getiolock_0484
1adb0     FD 12 02 F6 | 	mov	arg01, result1
1adb4     5C 3D B0 FD | 	call	#__system___lockmem
1adb8     58 00 00 FF 
1adbc     1C E5 05 F1 | 	add	objptr, ##45340
1adc0     F2 14 02 FB | 	rdlong	arg02, objptr
1adc4     58 00 00 FF 
1adc8     1C E5 85 F1 | 	sub	objptr, ##45340
1adcc     00 12 06 F6 | 	mov	arg01, #0
1add0     00 16 06 F6 | 	mov	arg03, #0
1add4     30 4A B0 FD | 	call	#__system___basic_print_string
1add8     00 12 06 F6 | 	mov	arg01, #0
1addc     0A 14 06 F6 | 	mov	arg02, #10
1ade0     00 16 06 F6 | 	mov	arg03, #0
1ade4     C8 49 B0 FD | 	call	#__system___basic_print_char
1ade8     00 12 06 F6 | 	mov	arg01, #0
1adec     84 96 B0 FD | 	call	#__system___getiolock_0484
1adf0     FD 00 68 FC | 	wrlong	#0, result1
1adf4     37 00 00 FF 
1adf8     64 E4 05 F1 | 	add	objptr, ##28260
1adfc     F2 12 02 FB | 	rdlong	arg01, objptr
1ae00     37 00 00 FF 
1ae04     64 E4 85 F1 | 	sub	objptr, ##28260
1ae08     01 12 66 F0 | 	shl	arg01, #1
1ae0c     04 14 06 F6 | 	mov	arg02, #4
1ae10     48 25 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1ae14                 | ' position 2*editor_spaces,4 : print "Ready"
1ae14     00 12 06 F6 | 	mov	arg01, #0
1ae18     58 96 B0 FD | 	call	#__system___getiolock_0484
1ae1c     FD 12 02 F6 | 	mov	arg01, result1
1ae20     F0 3C B0 FD | 	call	#__system___lockmem
1ae24     76 01 00 FF 
1ae28     E5 15 06 F6 | 	mov	arg02, ##@LR__5254
1ae2c     00 12 06 F6 | 	mov	arg01, #0
1ae30     00 16 06 F6 | 	mov	arg03, #0
1ae34     D0 49 B0 FD | 	call	#__system___basic_print_string
1ae38     FD 22 02 F6 | 	mov	local03, result1
1ae3c     00 12 06 F6 | 	mov	arg01, #0
1ae40     0A 14 06 F6 | 	mov	arg02, #10
1ae44     00 16 06 F6 | 	mov	arg03, #0
1ae48     64 49 B0 FD | 	call	#__system___basic_print_char
1ae4c     01 24 06 F6 | 	mov	local04, #1
1ae50     00 12 06 F6 | 	mov	arg01, #0
1ae54     1C 96 B0 FD | 	call	#__system___getiolock_0484
1ae58     FD 00 68 FC | 	wrlong	#0, result1
1ae5c     00 26 06 F6 | 	mov	local05, #0
1ae60     00 14 06 F6 | 	mov	arg02, #0
1ae64     01 14 D6 F7 | 	test	arg02, #1 wc
1ae68     5A 4C 64 FD | 	drvc	#38
1ae6c     01 14 D6 F7 | 	test	arg02, #1 wc
1ae70     5A 4E 64 FD | 	drvc	#39
1ae74     76 01 00 FF 
1ae78     EB 21 06 F6 | 	mov	local02, ##@LR__5255
1ae7c     59 00 00 FF 
1ae80     E4 E5 05 F1 | 	add	objptr, ##46052
1ae84     F2 20 62 FC | 	wrlong	local02, objptr
1ae88     04 E4 05 F1 | 	add	objptr, #4
1ae8c     FF FF FF FF 
1ae90     F2 FE 6B FC | 	wrlong	##-1, objptr
1ae94     59 00 00 FF 
1ae98     E8 E5 85 F1 | 	sub	objptr, ##46056
1ae9c                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
1ae9c                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1ae9c                 | ' 
1ae9c                 | ' loadname="noname.bas"
1ae9c                 | ' do_insert=-1
1ae9c                 | ' 
1ae9c                 | ' 
1ae9c                 | ' '-------------------------------------------------------------------------------------------------------- 
1ae9c                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1ae9c                 | ' '--------------------------------------------------------------------------------------------------------
1ae9c                 | ' 
1ae9c                 | ' do
1ae9c                 | LR__2120
1ae9c     01 12 06 F6 | 	mov	arg01, #1
1aea0     58 25 B0 FD | 	call	#_hg010b_spin2_waitvbl
1aea4     07 12 06 F6 | 	mov	arg01, #7
1aea8     0B 00 00 FF 
1aeac     CC E4 05 F1 | 	add	objptr, ##5836
1aeb0     60 39 B0 FD | 	call	#_audio096_spin2_stop
1aeb4     0B 00 00 FF 
1aeb8     CC E4 85 F1 | 	sub	objptr, ##5836
1aebc     40 34 B0 FD | 	call	#_usbnew_spin2_get_key
1aec0     45 00 00 FF 
1aec4     A4 E4 05 F1 | 	add	objptr, ##35492
1aec8     F2 FA 61 FC | 	wrlong	result1, objptr
1aecc                 | '   return hkbd_led_rep
1aecc     13 00 00 FF 
1aed0     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
1aed4     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
1aed8     13 00 00 FF 
1aedc     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
1aee0     14 00 00 FF 
1aee4     48 E5 05 F1 | 	add	objptr, ##10568
1aee8     F2 FA 61 FC | 	wrlong	result1, objptr
1aeec                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
1aeec     14 00 00 FF 
1aef0     48 E5 85 F1 | 	sub	objptr, ##10568
1aef4     F2 20 02 FB | 	rdlong	local02, objptr
1aef8     45 00 00 FF 
1aefc     A4 E4 85 F1 | 	sub	objptr, ##35492
1af00     01 20 16 F2 | 	cmp	local02, #1 wc
1af04     BC 00 90 CD |  if_b	jmp	#LR__2121
1af08     45 00 00 FF 
1af0c     A4 E4 05 F1 | 	add	objptr, ##35492
1af10     F2 24 02 FB | 	rdlong	local04, objptr
1af14     45 00 00 FF 
1af18     A4 E4 85 F1 | 	sub	objptr, ##35492
1af1c     12 23 02 F6 | 	mov	local03, local04
1af20     04 22 16 F2 | 	cmp	local03, #4 wc
1af24     9C 00 90 3D |  if_ae	jmp	#LR__2121
1af28     58 00 00 FF 
1af2c     20 E5 05 F1 | 	add	objptr, ##45344
1af30     F2 1E 02 FB | 	rdlong	local01, objptr
1af34     58 00 00 FF 
1af38     20 E5 85 F1 | 	sub	objptr, ##45344
1af3c     0F 27 02 F6 | 	mov	local05, local01
1af40     01 26 0E F2 | 	cmp	local05, #1 wz
1af44     7C 00 90 5D |  if_ne	jmp	#LR__2121
1af48     04 00 00 FF 
1af4c     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
1af50     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1af54     04 00 00 FF 
1af58     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1af5c     56 00 00 FF 
1af60     44 22 06 F6 | 	mov	local03, ##44100
1af64     0C 24 C6 F9 | 	decod	local04, #12
1af68     00 26 06 F6 | 	mov	local05, #0
1af6c     03 00 00 FF 
1af70     DE 1E 06 F6 | 	mov	local01, ##1758
1af74     07 12 06 F6 | 	mov	arg01, #7
1af78     56 00 00 FF 
1af7c     44 16 06 F6 | 	mov	arg03, ##44100
1af80     0C 18 C6 F9 | 	decod	arg04, #12
1af84     00 1A 06 F6 | 	mov	arg05, #0
1af88     03 00 00 FF 
1af8c     DE 1C 06 F6 | 	mov	arg06, ##1758
1af90     0B 00 00 FF 
1af94     CC E4 05 F1 | 	add	objptr, ##5836
1af98     08 37 B0 FD | 	call	#_audio096_spin2_play
1af9c     0B 00 00 FF 
1afa0     CC E4 85 F1 | 	sub	objptr, ##5836
1afa4     0A 12 06 F6 | 	mov	arg01, #10
1afa8     5C 3E B0 FD | 	call	#__system___waitms
1afac     07 12 06 F6 | 	mov	arg01, #7
1afb0     0B 00 00 FF 
1afb4     CC E4 05 F1 | 	add	objptr, ##5836
1afb8     58 38 B0 FD | 	call	#_audio096_spin2_stop
1afbc     0B 00 00 FF 
1afc0     CC E4 85 F1 | 	sub	objptr, ##5836
1afc4                 | LR__2121
1afc4                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
1afc4     45 00 00 FF 
1afc8     A4 E4 05 F1 | 	add	objptr, ##35492
1afcc     F2 20 02 FB | 	rdlong	local02, objptr
1afd0     45 00 00 FF 
1afd4     A4 E4 85 F1 | 	sub	objptr, ##35492
1afd8     04 20 16 F2 | 	cmp	local02, #4 wc
1afdc     80 00 90 CD |  if_b	jmp	#LR__2122
1afe0     45 00 00 FF 
1afe4     A4 E4 05 F1 | 	add	objptr, ##35492
1afe8     F2 24 02 FB | 	rdlong	local04, objptr
1afec     45 00 00 FF 
1aff0     A4 E4 85 F1 | 	sub	objptr, ##35492
1aff4     12 23 02 F6 | 	mov	local03, local04
1aff8     00 00 40 FF 
1affc     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
1b000     45 00 00 CF 
1b004     A4 E4 05 C1 |  if_b	add	objptr, ##35492
1b008     F2 1E 02 CB |  if_b	rdlong	local01, objptr
1b00c     45 00 00 CF 
1b010     A4 E4 85 C1 |  if_b	sub	objptr, ##35492
1b014     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
1b018     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
1b01c     40 00 90 3D |  if_ae	jmp	#LR__2122
1b020     45 00 00 FF 
1b024     A4 E4 05 F1 | 	add	objptr, ##35492
1b028     F2 20 02 FB | 	rdlong	local02, objptr
1b02c     04 E4 05 F1 | 	add	objptr, #4
1b030     F2 20 62 FC | 	wrlong	local02, objptr
1b034     14 00 00 FF 
1b038     48 E5 05 F1 | 	add	objptr, ##10568
1b03c     F2 02 68 FC | 	wrlong	#1, objptr
1b040     14 00 00 FF 
1b044     48 E5 85 F1 | 	sub	objptr, ##10568
1b048     F2 20 02 FB | 	rdlong	local02, objptr
1b04c     14 00 00 FF 
1b050     4C E5 05 F1 | 	add	objptr, ##10572
1b054     F2 20 62 FC | 	wrlong	local02, objptr
1b058     59 00 00 FF 
1b05c     F4 E5 85 F1 | 	sub	objptr, ##46068
1b060                 | LR__2122
1b060                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
1b060     45 00 00 FF 
1b064     A4 E4 05 F1 | 	add	objptr, ##35492
1b068     F2 20 02 FB | 	rdlong	local02, objptr
1b06c     45 00 00 FF 
1b070     A4 E4 85 F1 | 	sub	objptr, ##35492
1b074     00 00 40 FF 
1b078     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
1b07c     59 00 00 3F 
1b080     F8 E5 05 31 |  if_ae	add	objptr, ##46072
1b084     F2 00 68 3C |  if_ae	wrlong	#0, objptr
1b088     08 E4 85 31 |  if_ae	sub	objptr, #8
1b08c     F2 00 68 3C |  if_ae	wrlong	#0, objptr
1b090     59 00 00 3F 
1b094     F0 E5 85 31 |  if_ae	sub	objptr, ##46064
1b098                 | ' if key=0 andalso rpt=1 then rptcnt+=1
1b098     45 00 00 FF 
1b09c     A4 E4 05 F1 | 	add	objptr, ##35492
1b0a0     F2 20 0A FB | 	rdlong	local02, objptr wz
1b0a4     45 00 00 FF 
1b0a8     A4 E4 85 F1 | 	sub	objptr, ##35492
1b0ac     59 00 00 AF 
1b0b0     F0 E5 05 A1 |  if_e	add	objptr, ##46064
1b0b4     F2 24 02 AB |  if_e	rdlong	local04, objptr
1b0b8     59 00 00 AF 
1b0bc     F0 E5 85 A1 |  if_e	sub	objptr, ##46064
1b0c0     12 23 02 A6 |  if_e	mov	local03, local04
1b0c4     01 22 0E A2 |  if_e	cmp	local03, #1 wz
1b0c8     59 00 00 AF 
1b0cc     F8 E5 05 A1 |  if_e	add	objptr, ##46072
1b0d0     F2 20 02 AB |  if_e	rdlong	local02, objptr
1b0d4     01 20 06 A1 |  if_e	add	local02, #1
1b0d8     F2 20 62 AC |  if_e	wrlong	local02, objptr
1b0dc     59 00 00 AF 
1b0e0     F8 E5 85 A1 |  if_e	sub	objptr, ##46072
1b0e4                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
1b0e4     45 00 00 FF 
1b0e8     A4 E4 05 F1 | 	add	objptr, ##35492
1b0ec     F2 20 02 FB | 	rdlong	local02, objptr
1b0f0     45 00 00 FF 
1b0f4     A4 E4 85 F1 | 	sub	objptr, ##35492
1b0f8     00 00 40 FF 
1b0fc     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
1b100     44 00 90 3D |  if_ae	jmp	#LR__2124
1b104     59 00 00 FF 
1b108     F8 E5 05 F1 | 	add	objptr, ##46072
1b10c     F2 20 02 FB | 	rdlong	local02, objptr
1b110     59 00 00 FF 
1b114     F8 E5 85 F1 | 	sub	objptr, ##46072
1b118     19 20 0E F2 | 	cmp	local02, #25 wz
1b11c     28 00 90 5D |  if_ne	jmp	#LR__2123
1b120     45 00 00 FF 
1b124     A8 E4 05 F1 | 	add	objptr, ##35496
1b128     F2 20 02 FB | 	rdlong	local02, objptr
1b12c     14 00 00 FF 
1b130     4C E5 05 F1 | 	add	objptr, ##10572
1b134     F2 20 62 FC | 	wrlong	local02, objptr
1b138     04 E4 05 F1 | 	add	objptr, #4
1b13c     F2 2A 68 FC | 	wrlong	#21, objptr
1b140     59 00 00 FF 
1b144     F8 E5 85 F1 | 	sub	objptr, ##46072
1b148                 | LR__2123
1b148                 | LR__2124
1b148                 | ' 
1b148                 | ' 
1b148                 | ' if key3<>0 then
1b148     59 00 00 FF 
1b14c     F4 E5 05 F1 | 	add	objptr, ##46068
1b150     F2 28 0A FB | 	rdlong	local06, objptr wz
1b154     59 00 00 FF 
1b158     F4 E5 85 F1 | 	sub	objptr, ##46068
1b15c     3C FD 9F AD |  if_e	jmp	#LR__2120
1b160                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
1b160     58 00 00 FF 
1b164     20 E5 05 F1 | 	add	objptr, ##45344
1b168     F2 20 02 FB | 	rdlong	local02, objptr
1b16c     58 00 00 FF 
1b170     20 E5 85 F1 | 	sub	objptr, ##45344
1b174     01 20 0E F2 | 	cmp	local02, #1 wz
1b178     50 00 90 5D |  if_ne	jmp	#LR__2125
1b17c     59 00 00 FF 
1b180     C4 E5 05 F1 | 	add	objptr, ##46020
1b184     F2 14 02 FB | 	rdlong	arg02, objptr
1b188     56 00 00 FF 
1b18c     44 22 06 F6 | 	mov	local03, ##44100
1b190     0C 24 C6 F9 | 	decod	local04, #12
1b194     04 E4 85 F1 | 	sub	objptr, #4
1b198     F2 26 02 FB | 	rdlong	local05, objptr
1b19c     01 1E 66 F6 | 	neg	local01, #1
1b1a0     07 12 06 F6 | 	mov	arg01, #7
1b1a4     56 00 00 FF 
1b1a8     44 16 06 F6 | 	mov	arg03, ##44100
1b1ac     0C 18 C6 F9 | 	decod	arg04, #12
1b1b0     13 1B 02 F6 | 	mov	arg05, local05
1b1b4     01 1C 66 F6 | 	neg	arg06, #1
1b1b8     4E 00 00 FF 
1b1bc     F4 E4 85 F1 | 	sub	objptr, ##40180
1b1c0     E0 34 B0 FD | 	call	#_audio096_spin2_play
1b1c4     0B 00 00 FF 
1b1c8     CC E4 85 F1 | 	sub	objptr, ##5836
1b1cc                 | LR__2125
1b1cc     59 00 00 FF 
1b1d0     F4 E5 05 F1 | 	add	objptr, ##46068
1b1d4     F2 12 02 FB | 	rdlong	arg01, objptr
1b1d8     59 00 00 FF 
1b1dc     F4 E5 85 F1 | 	sub	objptr, ##46068
1b1e0     CC F7 BF FD | 	call	#_scantochar
1b1e4     59 00 00 FF 
1b1e8     FC E5 05 F1 | 	add	objptr, ##46076
1b1ec     F2 FA 61 FC | 	wrlong	result1, objptr
1b1f0                 | '   if leds and 2 = 2 then 
1b1f0     10 E4 85 F1 | 	sub	objptr, #16
1b1f4     F2 20 0A FB | 	rdlong	local02, objptr wz
1b1f8     59 00 00 FF 
1b1fc     EC E5 85 F1 | 	sub	objptr, ##46060
1b200     68 01 90 AD |  if_e	jmp	#LR__2133
1b204                 | '     if key4>96 andalso key4<123 then
1b204     59 00 00 FF 
1b208     FC E5 05 F1 | 	add	objptr, ##46076
1b20c     F2 20 02 FB | 	rdlong	local02, objptr
1b210     59 00 00 FF 
1b214     FC E5 85 F1 | 	sub	objptr, ##46076
1b218     61 20 56 F2 | 	cmps	local02, #97 wc
1b21c     40 00 90 CD |  if_b	jmp	#LR__2126
1b220     59 00 00 FF 
1b224     FC E5 05 F1 | 	add	objptr, ##46076
1b228     F2 24 02 FB | 	rdlong	local04, objptr
1b22c     59 00 00 FF 
1b230     FC E5 85 F1 | 	sub	objptr, ##46076
1b234     12 23 02 F6 | 	mov	local03, local04
1b238     7B 22 56 F2 | 	cmps	local03, #123 wc
1b23c     20 00 90 3D |  if_ae	jmp	#LR__2126
1b240     59 00 00 FF 
1b244     FC E5 05 F1 | 	add	objptr, ##46076
1b248     F2 20 02 FB | 	rdlong	local02, objptr
1b24c     20 20 86 F1 | 	sub	local02, #32
1b250     F2 20 62 FC | 	wrlong	local02, objptr
1b254     59 00 00 FF 
1b258     FC E5 85 F1 | 	sub	objptr, ##46076
1b25c     0C 01 90 FD | 	jmp	#LR__2132
1b260                 | LR__2126
1b260     59 00 00 FF 
1b264     FC E5 05 F1 | 	add	objptr, ##46076
1b268     F2 20 02 FB | 	rdlong	local02, objptr
1b26c     59 00 00 FF 
1b270     FC E5 85 F1 | 	sub	objptr, ##46076
1b274     41 20 56 F2 | 	cmps	local02, #65 wc
1b278     40 00 90 CD |  if_b	jmp	#LR__2127
1b27c     59 00 00 FF 
1b280     FC E5 05 F1 | 	add	objptr, ##46076
1b284     F2 24 02 FB | 	rdlong	local04, objptr
1b288     59 00 00 FF 
1b28c     FC E5 85 F1 | 	sub	objptr, ##46076
1b290     12 23 02 F6 | 	mov	local03, local04
1b294     5B 22 56 F2 | 	cmps	local03, #91 wc
1b298     20 00 90 3D |  if_ae	jmp	#LR__2127
1b29c     59 00 00 FF 
1b2a0     FC E5 05 F1 | 	add	objptr, ##46076
1b2a4     F2 20 02 FB | 	rdlong	local02, objptr
1b2a8     20 20 06 F1 | 	add	local02, #32
1b2ac     F2 20 62 FC | 	wrlong	local02, objptr
1b2b0     59 00 00 FF 
1b2b4     FC E5 85 F1 | 	sub	objptr, ##46076
1b2b8     B0 00 90 FD | 	jmp	#LR__2131
1b2bc                 | LR__2127
1b2bc     59 00 00 FF 
1b2c0     FC E5 05 F1 | 	add	objptr, ##46076
1b2c4     F2 20 02 FB | 	rdlong	local02, objptr
1b2c8     59 00 00 FF 
1b2cc     FC E5 85 F1 | 	sub	objptr, ##46076
1b2d0     17 20 56 F2 | 	cmps	local02, #23 wc
1b2d4     40 00 90 CD |  if_b	jmp	#LR__2128
1b2d8     59 00 00 FF 
1b2dc     FC E5 05 F1 | 	add	objptr, ##46076
1b2e0     F2 24 02 FB | 	rdlong	local04, objptr
1b2e4     59 00 00 FF 
1b2e8     FC E5 85 F1 | 	sub	objptr, ##46076
1b2ec     12 23 02 F6 | 	mov	local03, local04
1b2f0     20 22 56 F2 | 	cmps	local03, #32 wc
1b2f4     20 00 90 3D |  if_ae	jmp	#LR__2128
1b2f8     59 00 00 FF 
1b2fc     FC E5 05 F1 | 	add	objptr, ##46076
1b300     F2 20 02 FB | 	rdlong	local02, objptr
1b304     09 20 86 F1 | 	sub	local02, #9
1b308     F2 20 62 FC | 	wrlong	local02, objptr
1b30c     59 00 00 FF 
1b310     FC E5 85 F1 | 	sub	objptr, ##46076
1b314     54 00 90 FD | 	jmp	#LR__2130
1b318                 | LR__2128
1b318     59 00 00 FF 
1b31c     FC E5 05 F1 | 	add	objptr, ##46076
1b320     F2 20 02 FB | 	rdlong	local02, objptr
1b324     59 00 00 FF 
1b328     FC E5 85 F1 | 	sub	objptr, ##46076
1b32c     0E 20 56 F2 | 	cmps	local02, #14 wc
1b330     38 00 90 CD |  if_b	jmp	#LR__2129
1b334     59 00 00 FF 
1b338     FC E5 05 F1 | 	add	objptr, ##46076
1b33c     F2 24 02 FB | 	rdlong	local04, objptr
1b340     59 00 00 FF 
1b344     FC E5 85 F1 | 	sub	objptr, ##46076
1b348     12 23 02 F6 | 	mov	local03, local04
1b34c     17 22 56 F2 | 	cmps	local03, #23 wc
1b350     59 00 00 CF 
1b354     FC E5 05 C1 |  if_b	add	objptr, ##46076
1b358     F2 20 02 CB |  if_b	rdlong	local02, objptr
1b35c     27 20 06 C1 |  if_b	add	local02, #39
1b360     F2 20 62 CC |  if_b	wrlong	local02, objptr
1b364     59 00 00 CF 
1b368     FC E5 85 C1 |  if_b	sub	objptr, ##46076
1b36c                 | LR__2129
1b36c                 | LR__2130
1b36c                 | LR__2131
1b36c                 | LR__2132
1b36c                 | LR__2133
1b36c                 | '  
1b36c                 | '  
1b36c                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then 
1b36c     59 00 00 FF 
1b370     FC E5 05 F1 | 	add	objptr, ##46076
1b374     F2 20 02 FB | 	rdlong	local02, objptr
1b378     59 00 00 FF 
1b37c     FC E5 85 F1 | 	sub	objptr, ##46076
1b380     01 20 56 F2 | 	cmps	local02, #1 wc
1b384     E8 01 90 CD |  if_b	jmp	#LR__2138
1b388     59 00 00 FF 
1b38c     FC E5 05 F1 | 	add	objptr, ##46076
1b390     F2 24 02 FB | 	rdlong	local04, objptr
1b394     59 00 00 FF 
1b398     FC E5 85 F1 | 	sub	objptr, ##46076
1b39c     12 23 02 F6 | 	mov	local03, local04
1b3a0     7F 22 56 F2 | 	cmps	local03, #127 wc
1b3a4     3C E4 05 C1 |  if_b	add	objptr, #60
1b3a8     F2 1E E2 CA |  if_b	rdword	local01, objptr
1b3ac     3C E4 85 C1 |  if_b	sub	objptr, #60
1b3b0     0F 27 32 C9 |  if_b	getword	local05, local01, #0
1b3b4     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
1b3b8     B4 01 90 3D |  if_ae	jmp	#LR__2138
1b3bc                 | '     if do_insert then
1b3bc     59 00 00 FF 
1b3c0     E8 E5 05 F1 | 	add	objptr, ##46056
1b3c4     F2 20 0A FB | 	rdlong	local02, objptr wz
1b3c8     59 00 00 FF 
1b3cc     E8 E5 85 F1 | 	sub	objptr, ##46056
1b3d0     84 01 90 AD |  if_e	jmp	#LR__2137
1b3d4                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
1b3d4     3E E4 05 F1 | 	add	objptr, #62
1b3d8     F2 22 C2 FA | 	rdbyte	local03, objptr
1b3dc     11 25 E2 F8 | 	getbyte	local04, local03, #0
1b3e0     80 24 06 FA | 	mul	local04, #128
1b3e4     3A E4 85 F1 | 	sub	objptr, #58
1b3e8     F2 2A 02 FB | 	rdlong	local07, objptr
1b3ec     15 2D 02 F6 | 	mov	local08, local07
1b3f0     12 2D 02 F1 | 	add	local08, local04
1b3f4     7F 2C 06 F1 | 	add	local08, #127
1b3f8     11 23 E2 F8 | 	getbyte	local03, local03, #0
1b3fc     80 22 06 FA | 	mul	local03, #128
1b400     11 2B 02 F1 | 	add	local07, local03
1b404     38 E4 05 F1 | 	add	objptr, #56
1b408     F2 26 E2 FA | 	rdword	local05, objptr
1b40c     3C E4 85 F1 | 	sub	objptr, #60
1b410     13 2F 52 F6 | 	abs	local09, local05 wc
1b414     01 2E 46 F0 | 	shr	local09, #1
1b418     17 2B 82 F3 | 	sumc	local07, local09
1b41c     01 2A 06 F1 | 	add	local07, #1
1b420                 | LR__2134
1b420     16 31 02 F6 | 	mov	local10, local08
1b424     01 30 86 F1 | 	sub	local10, #1
1b428     18 13 02 F6 | 	mov	arg01, local10
1b42c     78 F4 BF FD | 	call	#_pspeek
1b430     FD 32 02 F6 | 	mov	local11, result1
1b434     19 35 E2 F8 | 	getbyte	local12, local11, #0
1b438     1A 37 02 F6 | 	mov	local13, local12
1b43c     16 13 02 F6 | 	mov	arg01, local08
1b440     1B 15 02 F6 | 	mov	arg02, local13
1b444     18 F4 BF FD | 	call	#_pspoke
1b448     01 2C 86 F1 | 	sub	local08, #1
1b44c     15 2D 52 F2 | 	cmps	local08, local07 wc
1b450     CC FF 9F 3D |  if_ae	jmp	#LR__2134
1b454     5A 00 00 FF 
1b458     00 E4 05 F1 | 	add	objptr, ##46080
1b45c     F2 00 68 FC | 	wrlong	#0, objptr
1b460     59 00 00 FF 
1b464     C2 E5 85 F1 | 	sub	objptr, ##46018
1b468     F2 22 C2 FA | 	rdbyte	local03, objptr
1b46c     11 25 E2 F8 | 	getbyte	local04, local03, #0
1b470     80 24 06 FA | 	mul	local04, #128
1b474     3A E4 85 F1 | 	sub	objptr, #58
1b478     F2 26 02 FB | 	rdlong	local05, objptr
1b47c     13 2D 02 F6 | 	mov	local08, local05
1b480     12 2D 02 F1 | 	add	local08, local04
1b484     38 E4 05 F1 | 	add	objptr, #56
1b488     F2 2E E2 FA | 	rdword	local09, objptr
1b48c     17 1F 32 F9 | 	getword	local01, local09, #0
1b490     0F 39 52 F6 | 	abs	local14, local01 wc
1b494     01 38 46 F0 | 	shr	local14, #1
1b498     1C 39 82 F6 | 	negc	local14, local14
1b49c     1C 2D 02 F1 | 	add	local08, local14
1b4a0     11 23 E2 F8 | 	getbyte	local03, local03, #0
1b4a4     80 22 06 FA | 	mul	local03, #128
1b4a8     13 25 02 F6 | 	mov	local04, local05
1b4ac     3C E4 85 F1 | 	sub	objptr, #60
1b4b0     12 3B 02 F6 | 	mov	local15, local04
1b4b4     11 3B 02 F1 | 	add	local15, local03
1b4b8     80 3A 06 F1 | 	add	local15, #128
1b4bc                 | LR__2135
1b4bc     1D 2D 52 F2 | 	cmps	local08, local15 wc
1b4c0     94 00 90 3D |  if_ae	jmp	#LR__2136
1b4c4     3C E4 05 F1 | 	add	objptr, #60
1b4c8     F2 20 E2 FA | 	rdword	local02, objptr
1b4cc     59 00 00 FF 
1b4d0     C4 E5 05 F1 | 	add	objptr, ##46020
1b4d4     F2 24 02 FB | 	rdlong	local04, objptr
1b4d8     01 24 66 F0 | 	shl	local04, #1
1b4dc     12 21 02 F1 | 	add	local02, local04
1b4e0     59 00 00 FF 
1b4e4     C2 E5 85 F1 | 	sub	objptr, ##46018
1b4e8     F2 28 C2 FA | 	rdbyte	local06, objptr
1b4ec     3E E4 85 F1 | 	sub	objptr, #62
1b4f0     10 28 06 FA | 	mul	local06, #16
1b4f4     04 28 06 F1 | 	add	local06, #4
1b4f8     16 13 02 F6 | 	mov	arg01, local08
1b4fc     A8 F3 BF FD | 	call	#_pspeek
1b500     FD 22 E2 F8 | 	getbyte	local03, result1, #0
1b504     41 E4 05 F1 | 	add	objptr, #65
1b508     F2 24 02 FB | 	rdlong	local04, objptr
1b50c     04 E4 05 F1 | 	add	objptr, #4
1b510     F2 1E 02 FB | 	rdlong	local01, objptr
1b514     45 E4 85 F1 | 	sub	objptr, #69
1b518     0F 27 02 F6 | 	mov	local05, local01
1b51c     10 13 02 F6 | 	mov	arg01, local02
1b520     14 15 02 F6 | 	mov	arg02, local06
1b524     11 17 02 F6 | 	mov	arg03, local03
1b528     12 19 02 F6 | 	mov	arg04, local04
1b52c     13 1B 02 F6 | 	mov	arg05, local05
1b530     C4 1C B0 FD | 	call	#_hg010b_spin2_putcharxycgf
1b534     5A 00 00 FF 
1b538     00 E4 05 F1 | 	add	objptr, ##46080
1b53c     F2 20 02 FB | 	rdlong	local02, objptr
1b540     01 20 06 F1 | 	add	local02, #1
1b544     F2 20 62 FC | 	wrlong	local02, objptr
1b548     5A 00 00 FF 
1b54c     00 E4 85 F1 | 	sub	objptr, ##46080
1b550     01 2C 06 F1 | 	add	local08, #1
1b554     64 FF 9F FD | 	jmp	#LR__2135
1b558                 | LR__2136
1b558                 | LR__2137
1b558     59 00 00 FF 
1b55c     FC E5 05 F1 | 	add	objptr, ##46076
1b560     F2 12 02 FB | 	rdlong	arg01, objptr
1b564     59 00 00 FF 
1b568     FC E5 85 F1 | 	sub	objptr, ##46076
1b56c     D0 1F B0 FD | 	call	#_hg010b_spin2_putchar
1b570                 | LR__2138
1b570                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
1b570     59 00 00 FF 
1b574     FC E5 05 F1 | 	add	objptr, ##46076
1b578     F2 20 02 FB | 	rdlong	local02, objptr
1b57c     59 00 00 FF 
1b580     FC E5 85 F1 | 	sub	objptr, ##46076
1b584     01 20 56 F2 | 	cmps	local02, #1 wc
1b588     D0 00 90 CD |  if_b	jmp	#LR__2139
1b58c     59 00 00 FF 
1b590     FC E5 05 F1 | 	add	objptr, ##46076
1b594     F2 24 02 FB | 	rdlong	local04, objptr
1b598     59 00 00 FF 
1b59c     FC E5 85 F1 | 	sub	objptr, ##46076
1b5a0     12 23 02 F6 | 	mov	local03, local04
1b5a4     7F 22 56 F2 | 	cmps	local03, #127 wc
1b5a8     B0 00 90 3D |  if_ae	jmp	#LR__2139
1b5ac     3C E4 05 F1 | 	add	objptr, #60
1b5b0     F2 1E E2 FA | 	rdword	local01, objptr
1b5b4     3C E4 85 F1 | 	sub	objptr, #60
1b5b8     0F 27 32 F9 | 	getword	local05, local01, #0
1b5bc     FE 26 0E F2 | 	cmp	local05, #254 wz
1b5c0     58 00 00 AF 
1b5c4     20 E5 05 A1 |  if_e	add	objptr, ##45344
1b5c8     F2 38 02 AB |  if_e	rdlong	local14, objptr
1b5cc     58 00 00 AF 
1b5d0     20 E5 85 A1 |  if_e	sub	objptr, ##45344
1b5d4     1C 2F 02 A6 |  if_e	mov	local09, local14
1b5d8     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
1b5dc     7C 00 90 5D |  if_ne	jmp	#LR__2139
1b5e0     04 00 00 FF 
1b5e4     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
1b5e8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1b5ec     04 00 00 FF 
1b5f0     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1b5f4     56 00 00 FF 
1b5f8     44 22 06 F6 | 	mov	local03, ##44100
1b5fc     0C 24 C6 F9 | 	decod	local04, #12
1b600     00 26 06 F6 | 	mov	local05, #0
1b604     03 00 00 FF 
1b608     DE 1E 06 F6 | 	mov	local01, ##1758
1b60c     07 12 06 F6 | 	mov	arg01, #7
1b610     56 00 00 FF 
1b614     44 16 06 F6 | 	mov	arg03, ##44100
1b618     0C 18 C6 F9 | 	decod	arg04, #12
1b61c     00 1A 06 F6 | 	mov	arg05, #0
1b620     03 00 00 FF 
1b624     DE 1C 06 F6 | 	mov	arg06, ##1758
1b628     0B 00 00 FF 
1b62c     CC E4 05 F1 | 	add	objptr, ##5836
1b630     70 30 B0 FD | 	call	#_audio096_spin2_play
1b634     0B 00 00 FF 
1b638     CC E4 85 F1 | 	sub	objptr, ##5836
1b63c     2C 13 06 F6 | 	mov	arg01, #300
1b640     C4 37 B0 FD | 	call	#__system___waitms
1b644     07 12 06 F6 | 	mov	arg01, #7
1b648     0B 00 00 FF 
1b64c     CC E4 05 F1 | 	add	objptr, ##5836
1b650     C0 31 B0 FD | 	call	#_audio096_spin2_stop
1b654     0B 00 00 FF 
1b658     CC E4 85 F1 | 	sub	objptr, ##5836
1b65c                 | LR__2139
1b65c                 | '  
1b65c                 | '   if key4=key_enter then 
1b65c     59 00 00 FF 
1b660     FC E5 05 F1 | 	add	objptr, ##46076
1b664     F2 20 02 FB | 	rdlong	local02, objptr
1b668     59 00 00 FF 
1b66c     FC E5 85 F1 | 	sub	objptr, ##46076
1b670     8D 20 0E F2 | 	cmp	local02, #141 wz
1b674     F0 00 90 5D |  if_ne	jmp	#LR__2142
1b678     76 01 00 FF 
1b67c     F6 21 06 F6 | 	mov	local02, ##@LR__5256
1b680     37 00 00 FF 
1b684     4C E4 05 F1 | 	add	objptr, ##28236
1b688     F2 20 62 FC | 	wrlong	local02, objptr
1b68c                 | ' 
1b68c                 | ' ''      interpret: line$="" :let t1=getct()-t1 :rpt=0: rptcnt=0
1b68c                 | '     line$="" : for i=editor_spaces to 127
1b68c     18 E4 05 F1 | 	add	objptr, #24
1b690     F2 2C 02 FB | 	rdlong	local08, objptr
1b694     37 00 00 FF 
1b698     64 E4 85 F1 | 	sub	objptr, ##28260
1b69c                 | LR__2140
1b69c     80 2C 56 F2 | 	cmps	local08, #128 wc
1b6a0     8C 00 90 3D |  if_ae	jmp	#LR__2141
1b6a4     3E E4 05 F1 | 	add	objptr, #62
1b6a8     F2 1E C2 FA | 	rdbyte	local01, objptr
1b6ac     0F 27 E2 F8 | 	getbyte	local05, local01, #0
1b6b0     13 2F 02 F6 | 	mov	local09, local05
1b6b4     80 2E 06 FA | 	mul	local09, #128
1b6b8     3A E4 85 F1 | 	sub	objptr, #58
1b6bc     F2 38 02 FB | 	rdlong	local14, objptr
1b6c0     04 E4 85 F1 | 	sub	objptr, #4
1b6c4     1C 13 02 F6 | 	mov	arg01, local14
1b6c8     17 13 02 F1 | 	add	arg01, local09
1b6cc     16 13 02 F1 | 	add	arg01, local08
1b6d0     D4 F1 BF FD | 	call	#_pspeek
1b6d4     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1b6d8     5A 00 00 FF 
1b6dc     04 E4 05 F1 | 	add	objptr, ##46084
1b6e0     F2 24 62 FC | 	wrlong	local04, objptr
1b6e4     22 00 00 FF 
1b6e8     B8 E5 85 F1 | 	sub	objptr, ##17848
1b6ec     F2 28 02 FB | 	rdlong	local06, objptr
1b6f0     37 00 00 FF 
1b6f4     4C E4 85 F1 | 	sub	objptr, ##28236
1b6f8     12 13 02 F6 | 	mov	arg01, local04
1b6fc     E8 55 B0 FD | 	call	#__system__Chr_S
1b700     FD 14 02 F6 | 	mov	arg02, result1
1b704     14 13 02 F6 | 	mov	arg01, local06
1b708     64 34 B0 FD | 	call	#__system___string_concat
1b70c     37 00 00 FF 
1b710     4C E4 05 F1 | 	add	objptr, ##28236
1b714     F2 FA 61 FC | 	wrlong	result1, objptr
1b718     37 00 00 FF 
1b71c     4C E4 85 F1 | 	sub	objptr, ##28236
1b720     16 23 02 F6 | 	mov	local03, local08
1b724     01 22 06 F1 | 	add	local03, #1
1b728     11 2D 02 F6 | 	mov	local08, local03
1b72c     6C FF 9F FD | 	jmp	#LR__2140
1b730                 | LR__2141
1b730     C4 23 B0 FD | 	call	#_hg010b_spin2_crlf
1b734     E4 52 BE FD | 	call	#_interpret
1b738     76 01 00 FF 
1b73c     F7 21 06 F6 | 	mov	local02, ##@LR__5257
1b740     37 00 00 FF 
1b744     4C E4 05 F1 | 	add	objptr, ##28236
1b748     F2 20 62 FC | 	wrlong	local02, objptr
1b74c     22 00 00 FF 
1b750     A4 E5 05 F1 | 	add	objptr, ##17828
1b754     F2 00 68 FC | 	wrlong	#0, objptr
1b758     08 E4 05 F1 | 	add	objptr, #8
1b75c     F2 00 68 FC | 	wrlong	#0, objptr
1b760     59 00 00 FF 
1b764     F8 E5 85 F1 | 	sub	objptr, ##46072
1b768                 | LR__2142
1b768     59 00 00 FF 
1b76c     F4 E5 05 F1 | 	add	objptr, ##46068
1b770     F2 20 02 FB | 	rdlong	local02, objptr
1b774     10 21 E2 F8 | 	getbyte	local02, local02, #0
1b778     08 E4 05 F1 | 	add	objptr, #8
1b77c     F2 20 62 FC | 	wrlong	local02, objptr
1b780                 | '   'tab
1b780                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
1b780     59 00 00 FF 
1b784     FC E5 85 F1 | 	sub	objptr, ##46076
1b788     2B 20 0E F2 | 	cmp	local02, #43 wz
1b78c     B4 00 90 5D |  if_ne	jmp	#LR__2143
1b790     3C E4 05 F1 | 	add	objptr, #60
1b794     F2 24 E2 FA | 	rdword	local04, objptr
1b798     3C E4 85 F1 | 	sub	objptr, #60
1b79c     12 23 32 F9 | 	getword	local03, local04, #0
1b7a0     F0 22 16 F2 | 	cmp	local03, #240 wc
1b7a4     9C 00 90 CD |  if_b	jmp	#LR__2143
1b7a8     58 00 00 FF 
1b7ac     20 E5 05 F1 | 	add	objptr, ##45344
1b7b0     F2 1E 02 FB | 	rdlong	local01, objptr
1b7b4     58 00 00 FF 
1b7b8     20 E5 85 F1 | 	sub	objptr, ##45344
1b7bc     0F 27 02 F6 | 	mov	local05, local01
1b7c0     01 26 0E F2 | 	cmp	local05, #1 wz
1b7c4     7C 00 90 5D |  if_ne	jmp	#LR__2143
1b7c8     04 00 00 FF 
1b7cc     A8 EA 05 F1 | 	add	ptr__dat__, ##2216
1b7d0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1b7d4     04 00 00 FF 
1b7d8     A8 EA 85 F1 | 	sub	ptr__dat__, ##2216
1b7dc     56 00 00 FF 
1b7e0     44 22 06 F6 | 	mov	local03, ##44100
1b7e4     0E 24 C6 F9 | 	decod	local04, #14
1b7e8     00 26 06 F6 | 	mov	local05, #0
1b7ec     03 00 00 FF 
1b7f0     DE 1E 06 F6 | 	mov	local01, ##1758
1b7f4     00 12 06 F6 | 	mov	arg01, #0
1b7f8     56 00 00 FF 
1b7fc     44 16 06 F6 | 	mov	arg03, ##44100
1b800     0E 18 C6 F9 | 	decod	arg04, #14
1b804     00 1A 06 F6 | 	mov	arg05, #0
1b808     03 00 00 FF 
1b80c     DE 1C 06 F6 | 	mov	arg06, ##1758
1b810     0B 00 00 FF 
1b814     CC E4 05 F1 | 	add	objptr, ##5836
1b818     88 2E B0 FD | 	call	#_audio096_spin2_play
1b81c     0B 00 00 FF 
1b820     CC E4 85 F1 | 	sub	objptr, ##5836
1b824     2C 13 06 F6 | 	mov	arg01, #300
1b828     DC 35 B0 FD | 	call	#__system___waitms
1b82c     00 12 06 F6 | 	mov	arg01, #0
1b830     0B 00 00 FF 
1b834     CC E4 05 F1 | 	add	objptr, ##5836
1b838     D8 2F B0 FD | 	call	#_audio096_spin2_stop
1b83c     0B 00 00 FF 
1b840     CC E4 85 F1 | 	sub	objptr, ##5836
1b844                 | LR__2143
1b844                 | '   if key4 = 43 andalso v.cursor_x<240 then v.setcursorx((v.cursor_x+8) and $F8)  
1b844     59 00 00 FF 
1b848     FC E5 05 F1 | 	add	objptr, ##46076
1b84c     F2 20 02 FB | 	rdlong	local02, objptr
1b850     59 00 00 FF 
1b854     FC E5 85 F1 | 	sub	objptr, ##46076
1b858     2B 20 0E F2 | 	cmp	local02, #43 wz
1b85c     34 00 90 5D |  if_ne	jmp	#LR__2144
1b860     3C E4 05 F1 | 	add	objptr, #60
1b864     F2 24 E2 FA | 	rdword	local04, objptr
1b868     3C E4 85 F1 | 	sub	objptr, #60
1b86c     12 23 32 F9 | 	getword	local03, local04, #0
1b870     F0 22 16 F2 | 	cmp	local03, #240 wc
1b874     1C 00 90 3D |  if_ae	jmp	#LR__2144
1b878     3C E4 05 F1 | 	add	objptr, #60
1b87c     F2 22 E2 FA | 	rdword	local03, objptr
1b880     3C E4 85 F1 | 	sub	objptr, #60
1b884     11 13 32 F9 | 	getword	arg01, local03, #0
1b888     08 12 06 F1 | 	add	arg01, #8
1b88c     F8 12 06 F5 | 	and	arg01, #248
1b890     04 1B B0 FD | 	call	#_hg010b_spin2_setcursorx
1b894                 | LR__2144
1b894                 | '  ' tab43 del 76 home74 end 77 pgup=75 pgdn 78
1b894                 | '   if key4=77 then i=127 : do: 
1b894     59 00 00 FF 
1b898     FC E5 05 F1 | 	add	objptr, ##46076
1b89c     F2 20 02 FB | 	rdlong	local02, objptr
1b8a0     59 00 00 FF 
1b8a4     FC E5 85 F1 | 	sub	objptr, ##46076
1b8a8     4D 20 0E F2 | 	cmp	local02, #77 wz
1b8ac     90 00 90 5D |  if_ne	jmp	#LR__2149
1b8b0     7F 2C 06 F6 | 	mov	local08, #127
1b8b4                 | LR__2145
1b8b4                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
1b8b4     3E E4 05 F1 | 	add	objptr, #62
1b8b8     F2 26 C2 FA | 	rdbyte	local05, objptr
1b8bc     13 25 E2 F8 | 	getbyte	local04, local05, #0
1b8c0     12 1F 02 F6 | 	mov	local01, local04
1b8c4     80 1E 06 FA | 	mul	local01, #128
1b8c8     3A E4 85 F1 | 	sub	objptr, #58
1b8cc     F2 2E 02 FB | 	rdlong	local09, objptr
1b8d0     04 E4 85 F1 | 	sub	objptr, #4
1b8d4     17 23 02 F6 | 	mov	local03, local09
1b8d8     0F 23 02 F1 | 	add	local03, local01
1b8dc     16 23 02 F1 | 	add	local03, local08
1b8e0     11 13 02 F6 | 	mov	arg01, local03
1b8e4     C0 EF BF FD | 	call	#_pspeek
1b8e8     FD 20 E2 F8 | 	getbyte	local02, result1, #0
1b8ec     20 20 0E F2 | 	cmp	local02, #32 wz
1b8f0     2C 00 90 AD |  if_e	jmp	#LR__2147
1b8f4                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
1b8f4     7F 2C 56 F2 | 	cmps	local08, #127 wc
1b8f8     18 00 90 3D |  if_ae	jmp	#LR__2146
1b8fc     16 23 02 F6 | 	mov	local03, local08
1b900     01 22 66 F0 | 	shl	local03, #1
1b904     11 13 02 F6 | 	mov	arg01, local03
1b908     02 12 06 F1 | 	add	arg01, #2
1b90c     88 1A B0 FD | 	call	#_hg010b_spin2_setcursorx
1b910     2C 00 90 FD | 	jmp	#LR__2148
1b914                 | LR__2146
1b914     FE 12 06 F6 | 	mov	arg01, #254
1b918     7C 1A B0 FD | 	call	#_hg010b_spin2_setcursorx
1b91c     20 00 90 FD | 	jmp	#LR__2148
1b920                 | LR__2147
1b920     01 2C 86 F1 | 	sub	local08, #1
1b924     37 00 00 FF 
1b928     64 E4 05 F1 | 	add	objptr, ##28260
1b92c     F2 20 02 FB | 	rdlong	local02, objptr
1b930     37 00 00 FF 
1b934     64 E4 85 F1 | 	sub	objptr, ##28260
1b938     10 2D 0A F2 | 	cmp	local08, local02 wz
1b93c     74 FF 9F 5D |  if_ne	jmp	#LR__2145
1b940                 | LR__2148
1b940                 | LR__2149
1b940                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
1b940     37 00 00 FF 
1b944     64 E4 05 F1 | 	add	objptr, ##28260
1b948     F2 20 02 FB | 	rdlong	local02, objptr
1b94c     37 00 00 FF 
1b950     64 E4 85 F1 | 	sub	objptr, ##28260
1b954     10 2D 0A F2 | 	cmp	local08, local02 wz
1b958     24 00 90 5D |  if_ne	jmp	#LR__2150
1b95c     37 00 00 FF 
1b960     64 E4 05 F1 | 	add	objptr, ##28260
1b964     F2 24 02 FB | 	rdlong	local04, objptr
1b968     37 00 00 FF 
1b96c     64 E4 85 F1 | 	sub	objptr, ##28260
1b970     12 23 02 F6 | 	mov	local03, local04
1b974     11 13 02 F6 | 	mov	arg01, local03
1b978     01 12 66 F0 | 	shl	arg01, #1
1b97c     18 1A B0 FD | 	call	#_hg010b_spin2_setcursorx
1b980                 | LR__2150
1b980                 | '   
1b980                 | '   
1b980                 | '   if key4=74 then v.setcursorx(editor_spaces*2)
1b980     59 00 00 FF 
1b984     FC E5 05 F1 | 	add	objptr, ##46076
1b988     F2 20 02 FB | 	rdlong	local02, objptr
1b98c     59 00 00 FF 
1b990     FC E5 85 F1 | 	sub	objptr, ##46076
1b994     4A 20 0E F2 | 	cmp	local02, #74 wz
1b998     24 00 90 5D |  if_ne	jmp	#LR__2151
1b99c     37 00 00 FF 
1b9a0     64 E4 05 F1 | 	add	objptr, ##28260
1b9a4     F2 24 02 FB | 	rdlong	local04, objptr
1b9a8     37 00 00 FF 
1b9ac     64 E4 85 F1 | 	sub	objptr, ##28260
1b9b0     12 23 02 F6 | 	mov	local03, local04
1b9b4     11 13 02 F6 | 	mov	arg01, local03
1b9b8     01 12 66 F0 | 	shl	arg01, #1
1b9bc     D8 19 B0 FD | 	call	#_hg010b_spin2_setcursorx
1b9c0                 | LR__2151
1b9c0                 | '   if key4=75 then v.setcursory(0)
1b9c0     59 00 00 FF 
1b9c4     FC E5 05 F1 | 	add	objptr, ##46076
1b9c8     F2 20 02 FB | 	rdlong	local02, objptr
1b9cc     59 00 00 FF 
1b9d0     FC E5 85 F1 | 	sub	objptr, ##46076
1b9d4     4B 20 0E F2 | 	cmp	local02, #75 wz
1b9d8     00 12 06 A6 |  if_e	mov	arg01, #0
1b9dc     E8 19 B0 AD |  if_e	call	#_hg010b_spin2_setcursory
1b9e0                 | '   if key4=78 then v.setcursory(36) ' todo: parameter instead 36
1b9e0     59 00 00 FF 
1b9e4     FC E5 05 F1 | 	add	objptr, ##46076
1b9e8     F2 20 02 FB | 	rdlong	local02, objptr
1b9ec     59 00 00 FF 
1b9f0     FC E5 85 F1 | 	sub	objptr, ##46076
1b9f4     4E 20 0E F2 | 	cmp	local02, #78 wz
1b9f8     24 12 06 A6 |  if_e	mov	arg01, #36
1b9fc     C8 19 B0 AD |  if_e	call	#_hg010b_spin2_setcursory
1ba00                 | '   
1ba00                 | '   if key4=76 then 'del
1ba00     59 00 00 FF 
1ba04     FC E5 05 F1 | 	add	objptr, ##46076
1ba08     F2 20 02 FB | 	rdlong	local02, objptr
1ba0c     59 00 00 FF 
1ba10     FC E5 85 F1 | 	sub	objptr, ##46076
1ba14     4C 20 0E F2 | 	cmp	local02, #76 wz
1ba18     9C 01 90 5D |  if_ne	jmp	#LR__2156
1ba1c                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
1ba1c     3E E4 05 F1 | 	add	objptr, #62
1ba20     F2 22 C2 FA | 	rdbyte	local03, objptr
1ba24     11 25 E2 F8 | 	getbyte	local04, local03, #0
1ba28     80 24 06 FA | 	mul	local04, #128
1ba2c     3A E4 85 F1 | 	sub	objptr, #58
1ba30     F2 3C 02 FB | 	rdlong	local16, objptr
1ba34     1E 2D 02 F6 | 	mov	local08, local16
1ba38     12 2D 02 F1 | 	add	local08, local04
1ba3c     38 E4 05 F1 | 	add	objptr, #56
1ba40     F2 1E E2 FA | 	rdword	local01, objptr
1ba44     0F 39 52 F6 | 	abs	local14, local01 wc
1ba48     01 38 46 F0 | 	shr	local14, #1
1ba4c     1C 2D 82 F3 | 	sumc	local08, local14
1ba50     11 23 E2 F8 | 	getbyte	local03, local03, #0
1ba54     80 22 06 FA | 	mul	local03, #128
1ba58     3C E4 85 F1 | 	sub	objptr, #60
1ba5c     11 3D 02 F1 | 	add	local16, local03
1ba60     80 3C 06 F1 | 	add	local16, #128
1ba64                 | LR__2152
1ba64     1E 2D 52 F2 | 	cmps	local08, local16 wc
1ba68     20 00 90 3D |  if_ae	jmp	#LR__2153
1ba6c     16 13 02 F6 | 	mov	arg01, local08
1ba70     01 12 06 F1 | 	add	arg01, #1
1ba74     30 EE BF FD | 	call	#_pspeek
1ba78     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
1ba7c     16 13 02 F6 | 	mov	arg01, local08
1ba80     DC ED BF FD | 	call	#_pspoke
1ba84     01 2C 06 F1 | 	add	local08, #1
1ba88     D8 FF 9F FD | 	jmp	#LR__2152
1ba8c                 | LR__2153
1ba8c     3E E4 05 F1 | 	add	objptr, #62
1ba90     F2 26 C2 FA | 	rdbyte	local05, objptr
1ba94     80 26 06 FA | 	mul	local05, #128
1ba98     3A E4 85 F1 | 	sub	objptr, #58
1ba9c     F2 12 02 FB | 	rdlong	arg01, objptr
1baa0     04 E4 85 F1 | 	sub	objptr, #4
1baa4     13 13 02 F1 | 	add	arg01, local05
1baa8     7F 12 06 F1 | 	add	arg01, #127
1baac     20 14 06 F6 | 	mov	arg02, #32
1bab0     AC ED BF FD | 	call	#_pspoke
1bab4     5A 00 00 FF 
1bab8     00 E4 05 F1 | 	add	objptr, ##46080
1babc     F2 00 68 FC | 	wrlong	#0, objptr
1bac0     59 00 00 FF 
1bac4     C2 E5 85 F1 | 	sub	objptr, ##46018
1bac8     F2 22 C2 FA | 	rdbyte	local03, objptr
1bacc     11 25 E2 F8 | 	getbyte	local04, local03, #0
1bad0     80 24 06 FA | 	mul	local04, #128
1bad4     3A E4 85 F1 | 	sub	objptr, #58
1bad8     F2 26 02 FB | 	rdlong	local05, objptr
1badc     13 2D 02 F6 | 	mov	local08, local05
1bae0     12 2D 02 F1 | 	add	local08, local04
1bae4     38 E4 05 F1 | 	add	objptr, #56
1bae8     F2 2E E2 FA | 	rdword	local09, objptr
1baec     17 1F 32 F9 | 	getword	local01, local09, #0
1baf0     0F 39 52 F6 | 	abs	local14, local01 wc
1baf4     01 38 46 F0 | 	shr	local14, #1
1baf8     1C 39 82 F6 | 	negc	local14, local14
1bafc     1C 2D 02 F1 | 	add	local08, local14
1bb00     11 23 E2 F8 | 	getbyte	local03, local03, #0
1bb04     80 22 06 FA | 	mul	local03, #128
1bb08     13 25 02 F6 | 	mov	local04, local05
1bb0c     3C E4 85 F1 | 	sub	objptr, #60
1bb10     12 3F 02 F6 | 	mov	local17, local04
1bb14     11 3F 02 F1 | 	add	local17, local03
1bb18     80 3E 06 F1 | 	add	local17, #128
1bb1c                 | LR__2154
1bb1c     1F 2D 52 F2 | 	cmps	local08, local17 wc
1bb20     94 00 90 3D |  if_ae	jmp	#LR__2155
1bb24     3C E4 05 F1 | 	add	objptr, #60
1bb28     F2 20 E2 FA | 	rdword	local02, objptr
1bb2c     59 00 00 FF 
1bb30     C4 E5 05 F1 | 	add	objptr, ##46020
1bb34     F2 24 02 FB | 	rdlong	local04, objptr
1bb38     01 24 66 F0 | 	shl	local04, #1
1bb3c     12 21 02 F1 | 	add	local02, local04
1bb40     59 00 00 FF 
1bb44     C2 E5 85 F1 | 	sub	objptr, ##46018
1bb48     F2 28 C2 FA | 	rdbyte	local06, objptr
1bb4c     3E E4 85 F1 | 	sub	objptr, #62
1bb50     10 28 06 FA | 	mul	local06, #16
1bb54     04 28 06 F1 | 	add	local06, #4
1bb58     16 13 02 F6 | 	mov	arg01, local08
1bb5c     48 ED BF FD | 	call	#_pspeek
1bb60     FD 22 E2 F8 | 	getbyte	local03, result1, #0
1bb64     41 E4 05 F1 | 	add	objptr, #65
1bb68     F2 24 02 FB | 	rdlong	local04, objptr
1bb6c     04 E4 05 F1 | 	add	objptr, #4
1bb70     F2 1E 02 FB | 	rdlong	local01, objptr
1bb74     45 E4 85 F1 | 	sub	objptr, #69
1bb78     0F 27 02 F6 | 	mov	local05, local01
1bb7c     10 13 02 F6 | 	mov	arg01, local02
1bb80     14 15 02 F6 | 	mov	arg02, local06
1bb84     11 17 02 F6 | 	mov	arg03, local03
1bb88     12 19 02 F6 | 	mov	arg04, local04
1bb8c     13 1B 02 F6 | 	mov	arg05, local05
1bb90     64 16 B0 FD | 	call	#_hg010b_spin2_putcharxycgf
1bb94     5A 00 00 FF 
1bb98     00 E4 05 F1 | 	add	objptr, ##46080
1bb9c     F2 20 02 FB | 	rdlong	local02, objptr
1bba0     01 20 06 F1 | 	add	local02, #1
1bba4     F2 20 62 FC | 	wrlong	local02, objptr
1bba8     5A 00 00 FF 
1bbac     00 E4 85 F1 | 	sub	objptr, ##46080
1bbb0     01 2C 06 F1 | 	add	local08, #1
1bbb4     64 FF 9F FD | 	jmp	#LR__2154
1bbb8                 | LR__2155
1bbb8                 | LR__2156
1bbb8                 | '    
1bbb8                 | '   'backspace
1bbb8                 | '   if key4 = 42 then 
1bbb8     59 00 00 FF 
1bbbc     FC E5 05 F1 | 	add	objptr, ##46076
1bbc0     F2 20 02 FB | 	rdlong	local02, objptr
1bbc4     59 00 00 FF 
1bbc8     FC E5 85 F1 | 	sub	objptr, ##46076
1bbcc     2A 20 0E F2 | 	cmp	local02, #42 wz
1bbd0     0C 02 90 5D |  if_ne	jmp	#LR__2162
1bbd4                 | '       if v.cursor_x>editor_spaces*2 then 
1bbd4     3C E4 05 F1 | 	add	objptr, #60
1bbd8     F2 20 E2 FA | 	rdword	local02, objptr
1bbdc     37 00 00 FF 
1bbe0     28 E4 05 F1 | 	add	objptr, ##28200
1bbe4     F2 26 02 FB | 	rdlong	local05, objptr
1bbe8     37 00 00 FF 
1bbec     64 E4 85 F1 | 	sub	objptr, ##28260
1bbf0     13 25 02 F6 | 	mov	local04, local05
1bbf4     12 23 02 F6 | 	mov	local03, local04
1bbf8     01 22 66 F0 | 	shl	local03, #1
1bbfc     11 21 5A F2 | 	cmps	local02, local03 wcz
1bc00     B8 01 90 ED |  if_be	jmp	#LR__2160
1bc04     3C E4 05 F1 | 	add	objptr, #60
1bc08     F2 12 E2 FA | 	rdword	arg01, objptr
1bc0c     02 12 86 F1 | 	sub	arg01, #2
1bc10     02 E4 05 F1 | 	add	objptr, #2
1bc14     F2 14 C2 FA | 	rdbyte	arg02, objptr
1bc18     3E E4 85 F1 | 	sub	objptr, #62
1bc1c     3C 17 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1bc20                 | '          position v.cursor_x-2,v.cursor_y
1bc20                 | '          for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
1bc20     3E E4 05 F1 | 	add	objptr, #62
1bc24     F2 22 C2 FA | 	rdbyte	local03, objptr
1bc28     11 25 E2 F8 | 	getbyte	local04, local03, #0
1bc2c     80 24 06 FA | 	mul	local04, #128
1bc30     3A E4 85 F1 | 	sub	objptr, #58
1bc34     F2 40 02 FB | 	rdlong	local18, objptr
1bc38     20 2D 02 F6 | 	mov	local08, local18
1bc3c     12 2D 02 F1 | 	add	local08, local04
1bc40     38 E4 05 F1 | 	add	objptr, #56
1bc44     F2 1E E2 FA | 	rdword	local01, objptr
1bc48     0F 39 52 F6 | 	abs	local14, local01 wc
1bc4c     01 38 46 F0 | 	shr	local14, #1
1bc50     1C 2D 82 F3 | 	sumc	local08, local14
1bc54     11 23 E2 F8 | 	getbyte	local03, local03, #0
1bc58     80 22 06 FA | 	mul	local03, #128
1bc5c     3C E4 85 F1 | 	sub	objptr, #60
1bc60     11 41 02 F1 | 	add	local18, local03
1bc64     80 40 06 F1 | 	add	local18, #128
1bc68                 | LR__2157
1bc68     20 2D 52 F2 | 	cmps	local08, local18 wc
1bc6c     20 00 90 3D |  if_ae	jmp	#LR__2158
1bc70     16 13 02 F6 | 	mov	arg01, local08
1bc74     01 12 06 F1 | 	add	arg01, #1
1bc78     2C EC BF FD | 	call	#_pspeek
1bc7c     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
1bc80     16 13 02 F6 | 	mov	arg01, local08
1bc84     D8 EB BF FD | 	call	#_pspoke
1bc88     01 2C 06 F1 | 	add	local08, #1
1bc8c     D8 FF 9F FD | 	jmp	#LR__2157
1bc90                 | LR__2158
1bc90     3E E4 05 F1 | 	add	objptr, #62
1bc94     F2 26 C2 FA | 	rdbyte	local05, objptr
1bc98     80 26 06 FA | 	mul	local05, #128
1bc9c     3A E4 85 F1 | 	sub	objptr, #58
1bca0     F2 12 02 FB | 	rdlong	arg01, objptr
1bca4     04 E4 85 F1 | 	sub	objptr, #4
1bca8     13 13 02 F1 | 	add	arg01, local05
1bcac     7F 12 06 F1 | 	add	arg01, #127
1bcb0     20 14 06 F6 | 	mov	arg02, #32
1bcb4     A8 EB BF FD | 	call	#_pspoke
1bcb8     5A 00 00 FF 
1bcbc     00 E4 05 F1 | 	add	objptr, ##46080
1bcc0     F2 00 68 FC | 	wrlong	#0, objptr
1bcc4     59 00 00 FF 
1bcc8     C2 E5 85 F1 | 	sub	objptr, ##46018
1bccc     F2 22 C2 FA | 	rdbyte	local03, objptr
1bcd0     11 25 E2 F8 | 	getbyte	local04, local03, #0
1bcd4     80 24 06 FA | 	mul	local04, #128
1bcd8     3A E4 85 F1 | 	sub	objptr, #58
1bcdc     F2 26 02 FB | 	rdlong	local05, objptr
1bce0     13 2D 02 F6 | 	mov	local08, local05
1bce4     12 2D 02 F1 | 	add	local08, local04
1bce8     38 E4 05 F1 | 	add	objptr, #56
1bcec     F2 2E E2 FA | 	rdword	local09, objptr
1bcf0     17 1F 32 F9 | 	getword	local01, local09, #0
1bcf4     0F 39 52 F6 | 	abs	local14, local01 wc
1bcf8     01 38 46 F0 | 	shr	local14, #1
1bcfc     1C 39 82 F6 | 	negc	local14, local14
1bd00     1C 2D 02 F1 | 	add	local08, local14
1bd04     11 23 E2 F8 | 	getbyte	local03, local03, #0
1bd08     80 22 06 FA | 	mul	local03, #128
1bd0c     13 25 02 F6 | 	mov	local04, local05
1bd10     3C E4 85 F1 | 	sub	objptr, #60
1bd14     12 43 02 F6 | 	mov	local19, local04
1bd18     11 43 02 F1 | 	add	local19, local03
1bd1c     80 42 06 F1 | 	add	local19, #128
1bd20                 | LR__2159
1bd20     21 2D 52 F2 | 	cmps	local08, local19 wc
1bd24     B8 00 90 3D |  if_ae	jmp	#LR__2161
1bd28     3C E4 05 F1 | 	add	objptr, #60
1bd2c     F2 20 E2 FA | 	rdword	local02, objptr
1bd30     59 00 00 FF 
1bd34     C4 E5 05 F1 | 	add	objptr, ##46020
1bd38     F2 24 02 FB | 	rdlong	local04, objptr
1bd3c     01 24 66 F0 | 	shl	local04, #1
1bd40     12 21 02 F1 | 	add	local02, local04
1bd44     59 00 00 FF 
1bd48     C2 E5 85 F1 | 	sub	objptr, ##46018
1bd4c     F2 28 C2 FA | 	rdbyte	local06, objptr
1bd50     3E E4 85 F1 | 	sub	objptr, #62
1bd54     10 28 06 FA | 	mul	local06, #16
1bd58     04 28 06 F1 | 	add	local06, #4
1bd5c     16 13 02 F6 | 	mov	arg01, local08
1bd60     44 EB BF FD | 	call	#_pspeek
1bd64     FD 22 E2 F8 | 	getbyte	local03, result1, #0
1bd68     41 E4 05 F1 | 	add	objptr, #65
1bd6c     F2 24 02 FB | 	rdlong	local04, objptr
1bd70     04 E4 05 F1 | 	add	objptr, #4
1bd74     F2 1E 02 FB | 	rdlong	local01, objptr
1bd78     45 E4 85 F1 | 	sub	objptr, #69
1bd7c     0F 27 02 F6 | 	mov	local05, local01
1bd80     10 13 02 F6 | 	mov	arg01, local02
1bd84     14 15 02 F6 | 	mov	arg02, local06
1bd88     11 17 02 F6 | 	mov	arg03, local03
1bd8c     12 19 02 F6 | 	mov	arg04, local04
1bd90     13 1B 02 F6 | 	mov	arg05, local05
1bd94     60 14 B0 FD | 	call	#_hg010b_spin2_putcharxycgf
1bd98     5A 00 00 FF 
1bd9c     00 E4 05 F1 | 	add	objptr, ##46080
1bda0     F2 20 02 FB | 	rdlong	local02, objptr
1bda4     01 20 06 F1 | 	add	local02, #1
1bda8     F2 20 62 FC | 	wrlong	local02, objptr
1bdac     5A 00 00 FF 
1bdb0     00 E4 85 F1 | 	sub	objptr, ##46080
1bdb4     01 2C 06 F1 | 	add	local08, #1
1bdb8     64 FF 9F FD | 	jmp	#LR__2159
1bdbc                 | LR__2160
1bdbc     76 01 00 FF 
1bdc0     F8 21 06 F6 | 	mov	local02, ##@LR__5258
1bdc4     37 00 00 FF 
1bdc8     4C E4 05 F1 | 	add	objptr, ##28236
1bdcc     F2 20 62 FC | 	wrlong	local02, objptr
1bdd0     37 00 00 FF 
1bdd4     10 E4 85 F1 | 	sub	objptr, ##28176
1bdd8     F2 08 58 FC | 	wrword	#4, objptr
1bddc     3C E4 85 F1 | 	sub	objptr, #60
1bde0                 | LR__2161
1bde0                 | LR__2162
1bde0                 | '      if key4= 82 then 
1bde0     59 00 00 FF 
1bde4     FC E5 05 F1 | 	add	objptr, ##46076
1bde8     F2 20 02 FB | 	rdlong	local02, objptr
1bdec     59 00 00 FF 
1bdf0     FC E5 85 F1 | 	sub	objptr, ##46076
1bdf4     52 20 0E F2 | 	cmp	local02, #82 wz
1bdf8     50 00 90 5D |  if_ne	jmp	#LR__2163
1bdfc                 | ' return cursor_y
1bdfc     3E E4 05 F1 | 	add	objptr, #62
1be00     F2 20 C2 FA | 	rdbyte	local02, objptr
1be04     01 20 86 F1 | 	sub	local02, #1
1be08     59 00 00 FF 
1be0c     CA E5 05 F1 | 	add	objptr, ##46026
1be10     F2 20 62 FC | 	wrlong	local02, objptr
1be14     5A 00 00 FF 
1be18     08 E4 85 F1 | 	sub	objptr, ##46088
1be1c     00 20 56 F2 | 	cmps	local02, #0 wc
1be20     5A 00 00 CF 
1be24     08 E4 05 C1 |  if_b	add	objptr, ##46088
1be28     F2 00 68 CC |  if_b	wrlong	#0, objptr
1be2c     5A 00 00 CF 
1be30     08 E4 85 C1 |  if_b	sub	objptr, ##46088
1be34     5A 00 00 FF 
1be38     08 E4 05 F1 | 	add	objptr, ##46088
1be3c     F2 12 02 FB | 	rdlong	arg01, objptr
1be40     5A 00 00 FF 
1be44     08 E4 85 F1 | 	sub	objptr, ##46088
1be48     7C 15 B0 FD | 	call	#_hg010b_spin2_setcursory
1be4c                 | LR__2163
1be4c                 | '    if key4= 81 then
1be4c     59 00 00 FF 
1be50     FC E5 05 F1 | 	add	objptr, ##46076
1be54     F2 20 02 FB | 	rdlong	local02, objptr
1be58     59 00 00 FF 
1be5c     FC E5 85 F1 | 	sub	objptr, ##46076
1be60     51 20 0E F2 | 	cmp	local02, #81 wz
1be64     50 00 90 5D |  if_ne	jmp	#LR__2164
1be68                 | ' return cursor_y
1be68     3E E4 05 F1 | 	add	objptr, #62
1be6c     F2 20 C2 FA | 	rdbyte	local02, objptr
1be70     01 20 06 F1 | 	add	local02, #1
1be74     59 00 00 FF 
1be78     CA E5 05 F1 | 	add	objptr, ##46026
1be7c     F2 20 62 FC | 	wrlong	local02, objptr
1be80     5A 00 00 FF 
1be84     08 E4 85 F1 | 	sub	objptr, ##46088
1be88     25 20 56 F2 | 	cmps	local02, #37 wc
1be8c     5A 00 00 3F 
1be90     08 E4 05 31 |  if_ae	add	objptr, ##46088
1be94     F2 48 68 3C |  if_ae	wrlong	#36, objptr
1be98     5A 00 00 3F 
1be9c     08 E4 85 31 |  if_ae	sub	objptr, ##46088
1bea0     5A 00 00 FF 
1bea4     08 E4 05 F1 | 	add	objptr, ##46088
1bea8     F2 12 02 FB | 	rdlong	arg01, objptr
1beac     5A 00 00 FF 
1beb0     08 E4 85 F1 | 	sub	objptr, ##46088
1beb4     10 15 B0 FD | 	call	#_hg010b_spin2_setcursory
1beb8                 | LR__2164
1beb8                 | '    if key4= 80 then
1beb8     59 00 00 FF 
1bebc     FC E5 05 F1 | 	add	objptr, ##46076
1bec0     F2 20 02 FB | 	rdlong	local02, objptr
1bec4     59 00 00 FF 
1bec8     FC E5 85 F1 | 	sub	objptr, ##46076
1becc     50 20 0E F2 | 	cmp	local02, #80 wz
1bed0     6C 00 90 5D |  if_ne	jmp	#LR__2165
1bed4                 | ' return cursor_x
1bed4     3C E4 05 F1 | 	add	objptr, #60
1bed8     F2 20 E2 FA | 	rdword	local02, objptr
1bedc     02 20 86 F1 | 	sub	local02, #2
1bee0     59 00 00 FF 
1bee4     D0 E5 05 F1 | 	add	objptr, ##46032
1bee8     F2 20 62 FC | 	wrlong	local02, objptr
1beec                 | '      if cx<editor_spaces then cx=editor_spaces
1beec     22 00 00 FF 
1bef0     A8 E5 85 F1 | 	sub	objptr, ##17832
1bef4     F2 24 02 FB | 	rdlong	local04, objptr
1bef8     37 00 00 FF 
1befc     64 E4 85 F1 | 	sub	objptr, ##28260
1bf00     12 23 02 F6 | 	mov	local03, local04
1bf04     11 21 52 F2 | 	cmps	local02, local03 wc
1bf08     37 00 00 CF 
1bf0c     64 E4 05 C1 |  if_b	add	objptr, ##28260
1bf10     F2 20 02 CB |  if_b	rdlong	local02, objptr
1bf14     22 00 00 CF 
1bf18     A8 E5 05 C1 |  if_b	add	objptr, ##17832
1bf1c     F2 20 62 CC |  if_b	wrlong	local02, objptr
1bf20     5A 00 00 CF 
1bf24     0C E4 85 C1 |  if_b	sub	objptr, ##46092
1bf28     5A 00 00 FF 
1bf2c     0C E4 05 F1 | 	add	objptr, ##46092
1bf30     F2 12 02 FB | 	rdlong	arg01, objptr
1bf34     5A 00 00 FF 
1bf38     0C E4 85 F1 | 	sub	objptr, ##46092
1bf3c     58 14 B0 FD | 	call	#_hg010b_spin2_setcursorx
1bf40                 | LR__2165
1bf40                 | '    if key4= 79 then
1bf40     59 00 00 FF 
1bf44     FC E5 05 F1 | 	add	objptr, ##46076
1bf48     F2 20 02 FB | 	rdlong	local02, objptr
1bf4c     59 00 00 FF 
1bf50     FC E5 85 F1 | 	sub	objptr, ##46076
1bf54     4F 20 0E F2 | 	cmp	local02, #79 wz
1bf58     50 00 90 5D |  if_ne	jmp	#LR__2166
1bf5c                 | ' return cursor_x
1bf5c     3C E4 05 F1 | 	add	objptr, #60
1bf60     F2 20 E2 FA | 	rdword	local02, objptr
1bf64     02 20 06 F1 | 	add	local02, #2
1bf68     59 00 00 FF 
1bf6c     D0 E5 05 F1 | 	add	objptr, ##46032
1bf70     F2 20 62 FC | 	wrlong	local02, objptr
1bf74                 | '      if cx>254  then cx=254 
1bf74     5A 00 00 FF 
1bf78     0C E4 85 F1 | 	sub	objptr, ##46092
1bf7c     FF 20 56 F2 | 	cmps	local02, #255 wc
1bf80     5A 00 00 3F 
1bf84     0C E4 05 31 |  if_ae	add	objptr, ##46092
1bf88     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
1bf8c     5A 00 00 3F 
1bf90     0C E4 85 31 |  if_ae	sub	objptr, ##46092
1bf94     5A 00 00 FF 
1bf98     0C E4 05 F1 | 	add	objptr, ##46092
1bf9c     F2 12 02 FB | 	rdlong	arg01, objptr
1bfa0     5A 00 00 FF 
1bfa4     0C E4 85 F1 | 	sub	objptr, ##46092
1bfa8     EC 13 B0 FD | 	call	#_hg010b_spin2_setcursorx
1bfac                 | LR__2166
1bfac                 | '   ' print key3 and 255
1bfac                 | '    
1bfac                 | '    if key4=73 then ' ins
1bfac     59 00 00 FF 
1bfb0     FC E5 05 F1 | 	add	objptr, ##46076
1bfb4     F2 28 02 FB | 	rdlong	local06, objptr
1bfb8     59 00 00 FF 
1bfbc     FC E5 85 F1 | 	sub	objptr, ##46076
1bfc0     49 28 0E F2 | 	cmp	local06, #73 wz
1bfc4     38 00 90 5D |  if_ne	jmp	#LR__2169
1bfc8     59 00 00 FF 
1bfcc     E8 E5 05 F1 | 	add	objptr, ##46056
1bfd0     F2 20 02 FB | 	rdlong	local02, objptr
1bfd4     10 29 22 F6 | 	not	local06, local02
1bfd8     F2 28 62 FC | 	wrlong	local06, objptr
1bfdc                 | '      if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
1bfdc     59 00 00 FF 
1bfe0     E8 E5 85 F1 | 	sub	objptr, ##46056
1bfe4     00 28 0E F2 | 	cmp	local06, #0 wz
1bfe8     0C 00 90 AD |  if_e	jmp	#LR__2167
1bfec     0E 12 06 F6 | 	mov	arg01, #14
1bff0     28 02 B0 FD | 	call	#_hg010b_spin2_setcursorshape
1bff4     08 00 90 FD | 	jmp	#LR__2168
1bff8                 | LR__2167
1bff8     00 12 06 F6 | 	mov	arg01, #0
1bffc     1C 02 B0 FD | 	call	#_hg010b_spin2_setcursorshape
1c000                 | LR__2168
1c000                 | LR__2169
1c000     59 00 00 FF 
1c004     F4 E5 05 F1 | 	add	objptr, ##46068
1c008     F2 00 68 FC | 	wrlong	#0, objptr
1c00c     59 00 00 FF 
1c010     F4 E5 85 F1 | 	sub	objptr, ##46068
1c014     84 EE 9F FD | 	jmp	#LR__2120
1c018     A7 F0 03 F6 | 	mov	ptra, fp
1c01c     B2 00 A0 FD | 	call	#popregs_
1c020                 | _program_ret
1c020     2D 00 64 FD | 	ret
1c024                 | 
1c024                 | ' '' this is not a main program.
1c024                 | ' 
1c024                 | ' '****************************************************************************************************************
1c024                 | ' '                                                                                                             	*
1c024                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
1c024                 | ' '                                                                                                            	*
1c024                 | ' ' base - HDMI base pin												*
1c024                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1c024                 | ' '														*
1c024                 | ' '														*
1c024                 | ' '****************************************************************************************************************
1c024                 | ' 
1c024                 | ' pub start(base,mb):result |i
1c024                 | _hg010b_spin2_start
1c024                 | ' 
1c024                 | ' '--------------------------- initialize pointers and variables
1c024                 | ' 
1c024                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1c024     34 E4 05 F1 | 	add	objptr, #52
1c028     F2 FA 01 F6 | 	mov	result1, objptr
1c02c     28 E4 85 F1 | 	sub	objptr, #40
1c030     F2 FA 61 FC | 	wrlong	result1, objptr
1c034                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1c034                 | ' hdmibase:=base							' HDMI base pin, 8*n
1c034     18 E4 05 F1 | 	add	objptr, #24
1c038     F2 12 62 FC | 	wrlong	arg01, objptr
1c03c                 | ' mailbox_ptr:=mb		
1c03c     04 E4 05 F1 | 	add	objptr, #4
1c040     F2 14 62 FC | 	wrlong	arg02, objptr
1c044                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1c044     C1 E5 05 F1 | 	add	objptr, #449
1c048     F2 14 62 FC | 	wrlong	arg02, objptr
1c04c                 | ' sprite_ptr:=@spr1ptr
1c04c     D8 E4 85 F1 | 	sub	objptr, #216
1c050     F2 FA 01 F6 | 	mov	result1, objptr
1c054     E5 E4 85 F1 | 	sub	objptr, #229
1c058     F2 FA 61 FC | 	wrlong	result1, objptr
1c05c                 | ' 
1c05c                 | ' 		'
1c05c                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1c05c     E5 E4 05 F1 | 	add	objptr, #229
1c060     F2 FA 01 FB | 	rdlong	result1, objptr
1c064     D0 FA 05 F1 | 	add	result1, #208
1c068     FD 10 58 FC | 	wrword	#8, result1
1c06c                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1c06c     F2 16 02 FB | 	rdlong	arg03, objptr
1c070     D2 16 06 F1 | 	add	arg03, #210
1c074     0B 21 58 FC | 	wrword	#16, arg03
1c078                 | ' leading_spaces:=0				'
1c078     A5 E5 05 F1 | 	add	objptr, #421
1c07c     F2 00 68 FC | 	wrlong	#0, objptr
1c080                 | ' 
1c080                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1c080     99 E4 85 F1 | 	sub	objptr, #153
1c084     00 00 A0 FF 
1c088     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1c08c                 | ' emptydl[1]:=0
1c08c     04 E4 05 F1 | 	add	objptr, #4
1c090     F2 00 68 FC | 	wrlong	#0, objptr
1c094                 | ' 
1c094                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1c094                 | ' 
1c094                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1c094     28 E5 85 F1 | 	sub	objptr, #296
1c098     F2 02 68 FC | 	wrlong	#1, objptr
1c09c                 | ' if s_debug<>0
1c09c                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1c09c     20 00 80 FF 
1c0a0     F2 00 68 FC | 	wrlong	##16384, objptr
1c0a4     F9 E4 85 F1 | 	sub	objptr, #249
1c0a8                 | ' setmode()							' set the mode, see below
1c0a8     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
1c0ac                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1c0ac     49 E4 05 F1 | 	add	objptr, #73
1c0b0     F2 FA 01 F6 | 	mov	result1, objptr
1c0b4     35 E4 85 F1 | 	sub	objptr, #53
1c0b8     F2 FA 61 FC | 	wrlong	result1, objptr
1c0bc                 | ' cursor_ptr:=@cursor_x						
1c0bc     28 E4 05 F1 | 	add	objptr, #40
1c0c0     F2 16 02 F6 | 	mov	arg03, objptr
1c0c4     2C E4 85 F1 | 	sub	objptr, #44
1c0c8     F2 16 62 FC | 	wrlong	arg03, objptr
1c0cc                 | ' fontnum:=0  							' start with a PC type font 
1c0cc     55 E4 05 F1 | 	add	objptr, #85
1c0d0     F2 00 68 FC | 	wrlong	#0, objptr
1c0d4                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1c0d4     1C E4 05 F1 | 	add	objptr, #28
1c0d8     F2 12 02 F6 | 	mov	arg01, objptr
1c0dc     81 E4 85 F1 | 	sub	objptr, #129
1c0e0     10 00 00 FF 
1c0e4     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1c0e8     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1c0ec     10 00 00 FF 
1c0f0     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1c0f4     10 16 06 F6 | 	mov	arg03, #16
1c0f8     38 29 B0 FD | 	call	#__system____builtin_memmove
1c0fc                 | ' leading_spaces:=0
1c0fc     01 00 00 FF 
1c100     B6 E4 05 F1 | 	add	objptr, ##694
1c104     F2 00 68 FC | 	wrlong	#0, objptr
1c108     01 00 00 FF 
1c10c     B6 E4 85 F1 | 	sub	objptr, ##694
1c110                 | ' '---------------------------- initialize a cursor (MSDOS type)
1c110                 | ' 
1c110                 | ' initcursor(154)
1c110     9A 12 06 F6 | 	mov	arg01, #154
1c114     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1c118                 | ' 
1c118                 | ' '---------------------------- start the cog
1c118                 | ' 
1c118                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1c118     10 00 00 FF 
1c11c     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1c120     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1c124     10 00 00 FF 
1c128     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1c12c     14 E4 05 F1 | 	add	objptr, #20
1c130     10 FA 05 F6 | 	mov	result1, #16
1c134     28 E4 61 FD | 	setq	objptr
1c138     0A FB F1 FC | 	coginit	result1, arg02 wc
1c13c     01 FA 65 C6 |  if_b	neg	result1, #1
1c140     1C E4 05 F1 | 	add	objptr, #28
1c144     F2 FA 61 FC | 	wrlong	result1, objptr
1c148     30 E4 85 F1 | 	sub	objptr, #48
1c14c                 | ' waitms(40)							' wait for stabilize
1c14c     28 12 06 F6 | 	mov	arg01, #40
1c150     B4 2C B0 FD | 	call	#__system___waitms
1c154                 | ' return cog							' return the driver's cog #
1c154     30 E4 05 F1 | 	add	objptr, #48
1c158     F2 FA 01 FB | 	rdlong	result1, objptr
1c15c     30 E4 85 F1 | 	sub	objptr, #48
1c160                 | _hg010b_spin2_start_ret
1c160     2D 00 64 FD | 	ret
1c164                 | 
1c164                 | ' 
1c164                 | ' 
1c164                 | ' '**************************************************************************************************************** 
1c164                 | ' '                                                                                                             	*
1c164                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1c164                 | ' '  Mode number - see start() above or bits below								*
1c164                 | ' '                                                                                                             	*
1c164                 | ' '****************************************************************************************************************
1c164                 | ' 
1c164                 | ' '---------------------------- initialize a cursor (MSDOS type)
1c164                 | ' pub initcursor(color) |i
1c164                 | _hg010b_spin2_initcursor
1c164     03 4A 05 F6 | 	mov	COUNT_, #3
1c168     A8 00 A0 FD | 	call	#pushregs_
1c16c     09 1F 02 F6 | 	mov	local01, arg01
1c170                 | ' 
1c170                 | ' cursor_x:=0							' place the cursor at 0:0
1c170     3C E4 05 F1 | 	add	objptr, #60
1c174     F2 00 58 FC | 	wrword	#0, objptr
1c178                 | ' cursor_y:=0
1c178     02 E4 05 F1 | 	add	objptr, #2
1c17c     F2 00 48 FC | 	wrbyte	#0, objptr
1c180                 | ' repeat i from 0 to 111
1c180     00 20 06 F6 | 	mov	local02, #0
1c184     F8 E5 05 F1 | 	add	objptr, #504
1c188     97 1A 48 FB | 	callpa	#(@LR__2172-@LR__2170)>>2,fcache_load_ptr_
1c18c                 | LR__2170
1c18c                 | '   cursor[i]:=0
1c18c     10 23 02 F6 | 	mov	local03, local02
1c190     F2 22 02 F1 | 	add	local03, objptr
1c194     11 01 48 FC | 	wrbyte	#0, local03
1c198     01 20 06 F1 | 	add	local02, #1
1c19c     70 20 56 F2 | 	cmps	local02, #112 wc
1c1a0     E8 FF 9F CD |  if_b	jmp	#LR__2170
1c1a4                 | ' repeat i from 112 to 127
1c1a4     70 20 06 F6 | 	mov	local02, #112
1c1a8                 | LR__2171
1c1a8                 | '   cursor[i]:=color  
1c1a8     10 23 02 F6 | 	mov	local03, local02
1c1ac     F2 22 02 F1 | 	add	local03, objptr
1c1b0     11 1F 42 FC | 	wrbyte	local01, local03
1c1b4     01 20 06 F1 | 	add	local02, #1
1c1b8     80 20 16 F2 | 	cmp	local02, #128 wc
1c1bc     E8 FF 9F CD |  if_b	jmp	#LR__2171
1c1c0                 | LR__2172
1c1c0                 | ' 'repeat i from 0 to 127
1c1c0                 | ' '  if ((i/8)//2)
1c1c0                 | ' '    cursor[i]:=15
1c1c0                 | ' '  else
1c1c0                 | ' '    cursor[i]:=0
1c1c0                 | ' '  if i>=120    
1c1c0                 | ' '    cursor[i]:=40
1c1c0                 | ' setspriteptr(17,@cursor)
1c1c0     F2 14 02 F6 | 	mov	arg02, objptr
1c1c4     01 00 00 FF 
1c1c8     36 E4 85 F1 | 	sub	objptr, ##566
1c1cc     11 12 06 F6 | 	mov	arg01, #17
1c1d0     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1c1d4                 | ' setspritesize(17,8,16)
1c1d4     11 12 06 F6 | 	mov	arg01, #17
1c1d8     08 14 06 F6 | 	mov	arg02, #8
1c1dc     10 16 06 F6 | 	mov	arg03, #16
1c1e0     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
1c1e4                 | ' setspritepos(17,0,0)
1c1e4     11 12 06 F6 | 	mov	arg01, #17
1c1e8     00 14 06 F6 | 	mov	arg02, #0
1c1ec     00 16 06 F6 | 	mov	arg03, #0
1c1f0     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
1c1f4                 | ' cursorshape:=14
1c1f4     0B 00 00 FF 
1c1f8     C6 E4 05 F1 | 	add	objptr, ##5830
1c1fc     F2 1C 68 FC | 	wrlong	#14, objptr
1c200                 | ' cursorcolor:=color
1c200     04 E4 85 F1 | 	sub	objptr, #4
1c204     F2 1E 62 FC | 	wrlong	local01, objptr
1c208     0B 00 00 FF 
1c20c     C2 E4 85 F1 | 	sub	objptr, ##5826
1c210     A7 F0 03 F6 | 	mov	ptra, fp
1c214     B2 00 A0 FD | 	call	#popregs_
1c218                 | _hg010b_spin2_initcursor_ret
1c218     2D 00 64 FD | 	ret
1c21c                 | 
1c21c                 | ' 
1c21c                 | ' pub setcursorshape(shape) | i
1c21c                 | _hg010b_spin2_setcursorshape
1c21c                 | ' 
1c21c                 | ' cursorshape:=shape
1c21c     0B 00 00 FF 
1c220     C6 E4 05 F1 | 	add	objptr, ##5830
1c224     F2 12 62 FC | 	wrlong	arg01, objptr
1c228                 | ' repeat i from 0 to (8*cursorshape)-1
1c228     00 00 06 F6 | 	mov	_var01, #0
1c22c     09 03 02 F6 | 	mov	_var02, arg01
1c230     03 02 66 F0 | 	shl	_var02, #3
1c234     01 02 86 F1 | 	sub	_var02, #1
1c238     00 02 56 F2 | 	cmps	_var02, #0 wc
1c23c     01 04 86 F6 | 	negc	_var03, #1
1c240     02 07 02 F6 | 	mov	_var04, _var03
1c244     02 03 02 F1 | 	add	_var02, _var03
1c248     0A 00 00 FF 
1c24c     90 E4 85 F1 | 	sub	objptr, ##5264
1c250     97 0C 48 FB | 	callpa	#(@LR__2181-@LR__2180)>>2,fcache_load_ptr_
1c254                 | LR__2180
1c254                 | '   cursor[i]:=0
1c254     00 05 02 F6 | 	mov	_var03, _var01
1c258     F2 04 02 F1 | 	add	_var03, objptr
1c25c     02 01 48 FC | 	wrbyte	#0, _var03
1c260     03 01 02 F1 | 	add	_var01, _var04
1c264     01 01 0A F2 | 	cmp	_var01, _var02 wz
1c268     E8 FF 9F 5D |  if_ne	jmp	#LR__2180
1c26c                 | LR__2181
1c26c                 | ' repeat i from 8*cursorshape to 127
1c26c     0A 00 00 FF 
1c270     90 E4 05 F1 | 	add	objptr, ##5264
1c274     F2 06 02 FB | 	rdlong	_var04, objptr
1c278     03 01 02 F6 | 	mov	_var01, _var04
1c27c     03 00 66 F0 | 	shl	_var01, #3
1c280     0B 00 00 FF 
1c284     C6 E4 85 F1 | 	sub	objptr, ##5830
1c288     03 06 66 F0 | 	shl	_var04, #3
1c28c     80 06 56 F2 | 	cmps	_var04, #128 wc
1c290     01 04 A6 F6 | 	negnc	_var03, #1
1c294     7F 02 06 F6 | 	mov	_var02, #127
1c298     02 03 02 F1 | 	add	_var02, _var03
1c29c     97 1A 48 FB | 	callpa	#(@LR__2183-@LR__2182)>>2,fcache_load_ptr_
1c2a0                 | LR__2182
1c2a0                 | '   cursor[i]:=cursorcolor
1c2a0     00 07 02 F6 | 	mov	_var04, _var01
1c2a4     01 00 00 FF 
1c2a8     36 E4 05 F1 | 	add	objptr, ##566
1c2ac     F2 06 02 F1 | 	add	_var04, objptr
1c2b0     0A 00 00 FF 
1c2b4     8C E4 05 F1 | 	add	objptr, ##5260
1c2b8     F2 12 02 FB | 	rdlong	arg01, objptr
1c2bc     0B 00 00 FF 
1c2c0     C2 E4 85 F1 | 	sub	objptr, ##5826
1c2c4     03 13 42 FC | 	wrbyte	arg01, _var04
1c2c8     02 01 02 F1 | 	add	_var01, _var03
1c2cc     01 01 0A F2 | 	cmp	_var01, _var02 wz
1c2d0     CC FF 9F 5D |  if_ne	jmp	#LR__2182
1c2d4                 | LR__2183
1c2d4                 | _hg010b_spin2_setcursorshape_ret
1c2d4     2D 00 64 FD | 	ret
1c2d8                 | 
1c2d8                 | ' 
1c2d8                 | ' pub setcursorcolor(color) | i
1c2d8                 | _hg010b_spin2_setcursorcolor
1c2d8                 | ' 
1c2d8                 | ' cursorcolor:=color
1c2d8     0B 00 00 FF 
1c2dc     C2 E4 05 F1 | 	add	objptr, ##5826
1c2e0     F2 12 62 FC | 	wrlong	arg01, objptr
1c2e4                 | ' repeat i from 0 to (8*cursorshape)-1
1c2e4     00 12 06 F6 | 	mov	arg01, #0
1c2e8     04 E4 05 F1 | 	add	objptr, #4
1c2ec     F2 00 02 FB | 	rdlong	_var01, objptr
1c2f0     03 00 66 F0 | 	shl	_var01, #3
1c2f4     01 00 86 F1 | 	sub	_var01, #1
1c2f8     00 00 56 F2 | 	cmps	_var01, #0 wc
1c2fc     01 02 86 F6 | 	negc	_var02, #1
1c300     01 05 02 F6 | 	mov	_var03, _var02
1c304     01 01 02 F1 | 	add	_var01, _var02
1c308     0A 00 00 FF 
1c30c     90 E4 85 F1 | 	sub	objptr, ##5264
1c310     97 0C 48 FB | 	callpa	#(@LR__2191-@LR__2190)>>2,fcache_load_ptr_
1c314                 | LR__2190
1c314                 | '   cursor[i]:=0
1c314     09 03 02 F6 | 	mov	_var02, arg01
1c318     F2 02 02 F1 | 	add	_var02, objptr
1c31c     01 01 48 FC | 	wrbyte	#0, _var02
1c320     02 13 02 F1 | 	add	arg01, _var03
1c324     00 13 0A F2 | 	cmp	arg01, _var01 wz
1c328     E8 FF 9F 5D |  if_ne	jmp	#LR__2190
1c32c                 | LR__2191
1c32c                 | ' repeat i from 8*cursorshape to 127
1c32c     0A 00 00 FF 
1c330     90 E4 05 F1 | 	add	objptr, ##5264
1c334     F2 04 02 FB | 	rdlong	_var03, objptr
1c338     02 13 02 F6 | 	mov	arg01, _var03
1c33c     03 12 66 F0 | 	shl	arg01, #3
1c340     0B 00 00 FF 
1c344     C6 E4 85 F1 | 	sub	objptr, ##5830
1c348     03 04 66 F0 | 	shl	_var03, #3
1c34c     80 04 56 F2 | 	cmps	_var03, #128 wc
1c350     01 02 A6 F6 | 	negnc	_var02, #1
1c354     7F 00 06 F6 | 	mov	_var01, #127
1c358     01 01 02 F1 | 	add	_var01, _var02
1c35c     97 1A 48 FB | 	callpa	#(@LR__2193-@LR__2192)>>2,fcache_load_ptr_
1c360                 | LR__2192
1c360                 | '   cursor[i]:=cursorcolor
1c360     09 05 02 F6 | 	mov	_var03, arg01
1c364     01 00 00 FF 
1c368     36 E4 05 F1 | 	add	objptr, ##566
1c36c     F2 04 02 F1 | 	add	_var03, objptr
1c370     0A 00 00 FF 
1c374     8C E4 05 F1 | 	add	objptr, ##5260
1c378     F2 06 02 FB | 	rdlong	_var04, objptr
1c37c     0B 00 00 FF 
1c380     C2 E4 85 F1 | 	sub	objptr, ##5826
1c384     02 07 42 FC | 	wrbyte	_var04, _var03
1c388     01 13 02 F1 | 	add	arg01, _var02
1c38c     00 13 0A F2 | 	cmp	arg01, _var01 wz
1c390     CC FF 9F 5D |  if_ne	jmp	#LR__2192
1c394                 | LR__2193
1c394                 | _hg010b_spin2_setcursorcolor_ret
1c394     2D 00 64 FD | 	ret
1c398                 | 
1c398                 | '   
1c398                 | '   
1c398                 | '   
1c398                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1c398                 | _hg010b_spin2_setmode
1c398     02 4A 05 F6 | 	mov	COUNT_, #2
1c39c     A8 00 A0 FD | 	call	#pushregs_
1c3a0                 | ' 
1c3a0                 | ' 
1c3a0                 | ' dl_ptr:=@emptydl[0]
1c3a0     01 00 00 FF 
1c3a4     1D E4 05 F1 | 	add	objptr, ##541
1c3a8     F2 1A 02 F6 | 	mov	arg05, objptr
1c3ac     FD E5 85 F1 | 	sub	objptr, #509
1c3b0     F2 1A 62 FC | 	wrlong	arg05, objptr
1c3b4                 | ' 
1c3b4                 | ' if cog>0 
1c3b4     10 E4 05 F1 | 	add	objptr, #16
1c3b8     F2 1A 02 FB | 	rdlong	arg05, objptr
1c3bc     30 E4 85 F1 | 	sub	objptr, #48
1c3c0     01 1A 56 F2 | 	cmps	arg05, #1 wc
1c3c4                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1c3c4     01 12 06 36 |  if_ae	mov	arg01, #1
1c3c8     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1c3cc                 | ' xres:=1024
1c3cc     01 00 00 FF 
1c3d0     26 E4 05 F1 | 	add	objptr, ##550
1c3d4     02 00 80 FF 
1c3d8     F2 00 68 FC | 	wrlong	##1024, objptr
1c3dc                 | ' yres:=600
1c3dc     04 E4 05 F1 | 	add	objptr, #4
1c3e0     01 00 80 FF 
1c3e4     F2 B0 68 FC | 	wrlong	##600, objptr
1c3e8                 | ' ppl:=(timings[3])
1c3e8     10 00 00 FF 
1c3ec     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1c3f0     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1c3f4     51 E5 85 F1 | 	sub	objptr, #337
1c3f8     F2 1A 62 FC | 	wrlong	arg05, objptr
1c3fc                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1c3fc     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1c400     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1c404     01 1E 66 F0 | 	shl	local01, #1
1c408     80 E4 85 F1 | 	sub	objptr, #128
1c40c     F2 1E 62 FC | 	wrlong	local01, objptr
1c410                 | ' cpl1:=cpl '' todo remove
1c410     04 E4 05 F1 | 	add	objptr, #4
1c414     F2 1E 62 FC | 	wrlong	local01, objptr
1c418                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1c418     02 00 00 FF 
1c41c     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1c420     41 E4 85 F1 | 	sub	objptr, #65
1c424     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1c428                 | ' repeat i from 0 to 3
1c428     00 20 06 F6 | 	mov	local02, #0
1c42c     02 00 00 FF 
1c430     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1c434     08 E4 05 F1 | 	add	objptr, #8
1c438     97 20 48 FB | 	callpa	#(@LR__2201-@LR__2200)>>2,fcache_load_ptr_
1c43c                 | LR__2200
1c43c                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1c43c     10 1F 02 F6 | 	mov	local01, local02
1c440     02 1E 66 F0 | 	shl	local01, #2
1c444     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1c448     F2 1A 02 FB | 	rdlong	arg05, objptr
1c44c     11 1A 66 F0 | 	shl	arg05, #17
1c450     0F 1F 02 FB | 	rdlong	local01, local01
1c454     0D 1F 02 F1 | 	add	local01, arg05
1c458     80 40 38 FF 
1c45c     00 1E 06 F1 | 	add	local01, ##1887502336
1c460     10 1B 02 F6 | 	mov	arg05, local02
1c464     02 1A 66 F0 | 	shl	arg05, #2
1c468     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
1c46c     0D 1F 62 FC | 	wrlong	local01, arg05
1c470     01 20 06 F1 | 	add	local02, #1
1c474     04 20 56 F2 | 	cmps	local02, #4 wc
1c478     C0 FF 9F CD |  if_b	jmp	#LR__2200
1c47c                 | LR__2201
1c47c     24 E4 85 F1 | 	sub	objptr, #36
1c480                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1c480     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1c484     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1c488     14 1E 66 FC | 	wrlong	local01, #20
1c48c                 | ' hubset(timings[10])
1c48c     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1c490     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1c494     10 00 00 FF 
1c498     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1c49c     00 12 62 FD | 	hubset	arg01
1c4a0                 | ' waitms(1)                                                   	' wait for stabilization
1c4a0     01 12 06 F6 | 	mov	arg01, #1
1c4a4     60 29 B0 FD | 	call	#__system___waitms
1c4a8     10 00 00 FF 
1c4ac     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1c4b0     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1c4b4     61 E4 05 F1 | 	add	objptr, #97
1c4b8     F2 20 62 FC | 	wrlong	local02, objptr
1c4bc     10 1F 52 F6 | 	abs	local01, local02 wc
1c4c0     04 1E 46 F0 | 	shr	local01, #4
1c4c4     0F 1F 82 F6 | 	negc	local01, local01
1c4c8     9C E4 05 F1 | 	add	objptr, #156
1c4cc     F2 1E 62 FC | 	wrlong	local01, objptr
1c4d0     A4 E4 85 F1 | 	sub	objptr, #164
1c4d4     F2 20 02 FB | 	rdlong	local02, objptr
1c4d8     08 E4 05 F1 | 	add	objptr, #8
1c4dc     F2 1E 02 FB | 	rdlong	local01, objptr
1c4e0     0F 21 02 FD | 	qmul	local02, local01
1c4e4                 | ' lines:=timings[11]
1c4e4                 | ' t_lines:=lines/16
1c4e4                 | ' buflen:=cpl*lines						' framebuffer length in longs
1c4e4     29 E4 85 F1 | 	sub	objptr, #41
1c4e8     19 1E C6 F9 | 	decod	local01, #25
1c4ec     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
1c4f0     18 20 62 FD | 	getqx	local02
1c4f4     F2 20 62 FC | 	wrlong	local02, objptr
1c4f8     38 E4 85 F1 | 	sub	objptr, #56
1c4fc     02 20 66 F0 | 	shl	local02, #2
1c500     10 1F 82 F1 | 	sub	local01, local02
1c504     F2 1E 62 FC | 	wrlong	local01, objptr
1c508     FD E4 05 F1 | 	add	objptr, #253
1c50c     F2 20 02 FB | 	rdlong	local02, objptr
1c510     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1c514     0D 21 02 FD | 	qmul	local02, arg05
1c518                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1c518                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
1c518     F9 E4 85 F1 | 	sub	objptr, #249
1c51c                 | ' mode_ptr:=@timings						' set pointers to timings
1c51c     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
1c520                 | ' graphmode:=1024+512+192+48							' det global variable
1c520                 | ' makedl(graphmode)							' make a DL for the mode
1c520     03 00 00 FF 
1c524     F0 12 06 F6 | 	mov	arg01, ##1776
1c528     18 20 62 FD | 	getqx	local02
1c52c     10 1F 82 F1 | 	sub	local01, local02
1c530     F2 1E 62 FC | 	wrlong	local01, objptr
1c534     14 E4 05 F1 | 	add	objptr, #20
1c538     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1c53c     79 E4 05 F1 | 	add	objptr, #121
1c540     03 00 80 FF 
1c544     F2 E0 69 FC | 	wrlong	##1776, objptr
1c548     91 E4 85 F1 | 	sub	objptr, #145
1c54c     10 00 00 FF 
1c550     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1c554     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
1c558                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1c558     F2 1E 02 FB | 	rdlong	local01, objptr
1c55c     DD E4 05 F1 | 	add	objptr, #221
1c560     F2 1E 62 FC | 	wrlong	local01, objptr
1c564                 | ' s_font_ptr:=font_ptr
1c564     D5 E4 85 F1 | 	sub	objptr, #213
1c568     F2 1E 02 FB | 	rdlong	local01, objptr
1c56c     D9 E4 05 F1 | 	add	objptr, #217
1c570     F2 1E 62 FC | 	wrlong	local01, objptr
1c574                 | ' s_lines:=lines
1c574     80 E4 85 F1 | 	sub	objptr, #128
1c578     F2 1E 02 FB | 	rdlong	local01, objptr
1c57c     84 E4 05 F1 | 	add	objptr, #132
1c580     F2 1E 62 FC | 	wrlong	local01, objptr
1c584                 | ' s_buflen:=buflen
1c584     AD E4 85 F1 | 	sub	objptr, #173
1c588     F2 1E 02 FB | 	rdlong	local01, objptr
1c58c     B5 E4 05 F1 | 	add	objptr, #181
1c590     F2 1E 62 FC | 	wrlong	local01, objptr
1c594                 | ' s_cpl:=cpl
1c594     94 E4 85 F1 | 	sub	objptr, #148
1c598     F2 1E 02 FB | 	rdlong	local01, objptr
1c59c     90 E4 05 F1 | 	add	objptr, #144
1c5a0     F2 1E 62 FC | 	wrlong	local01, objptr
1c5a4                 | ' s_cpl1:=cpl
1c5a4     90 E4 85 F1 | 	sub	objptr, #144
1c5a8     F2 1E 02 FB | 	rdlong	local01, objptr
1c5ac     98 E4 05 F1 | 	add	objptr, #152
1c5b0     F2 1E 62 FC | 	wrlong	local01, objptr
1c5b4                 | ' st_lines:=t_lines
1c5b4     0C E4 05 F1 | 	add	objptr, #12
1c5b8     F2 1E 02 FB | 	rdlong	local01, objptr
1c5bc     04 E4 05 F1 | 	add	objptr, #4
1c5c0     F2 1E 62 FC | 	wrlong	local01, objptr
1c5c4                 | ' ppl:=ppl/xzoom  
1c5c4     28 E4 85 F1 | 	sub	objptr, #40
1c5c8     F2 64 02 FB | 	rdlong	muldiva_, objptr
1c5cc     2C E4 05 F1 | 	add	objptr, #44
1c5d0     F2 66 02 FB | 	rdlong	muldivb_, objptr
1c5d4     05 E5 85 F1 | 	sub	objptr, #261
1c5d8     BA 00 A0 FD | 	call	#divide_
1c5dc     D9 E4 05 F1 | 	add	objptr, #217
1c5e0     F2 66 62 FC | 	wrlong	muldivb_, objptr
1c5e4                 | ' s_ppl:=ppl
1c5e4     1C E4 05 F1 | 	add	objptr, #28
1c5e8     F2 66 62 FC | 	wrlong	muldivb_, objptr
1c5ec     F5 E4 85 F1 | 	sub	objptr, #245
1c5f0                 | ' waitms(20)							' wait 
1c5f0     14 12 06 F6 | 	mov	arg01, #20
1c5f4     10 28 B0 FD | 	call	#__system___waitms
1c5f8                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1c5f8     04 E4 05 F1 | 	add	objptr, #4
1c5fc     F2 12 02 FB | 	rdlong	arg01, objptr
1c600     04 E4 85 F1 | 	sub	objptr, #4
1c604     F2 16 02 FB | 	rdlong	arg03, objptr
1c608     09 17 82 F1 | 	sub	arg03, arg01
1c60c     20 14 06 F6 | 	mov	arg02, #32
1c610     00 18 06 F6 | 	mov	arg04, #0
1c614     01 1A 06 F6 | 	mov	arg05, #1
1c618     0B 00 00 FF 
1c61c     CC E4 05 F1 | 	add	objptr, ##5836
1c620     E8 19 B0 FD | 	call	#_psram_spin2_fill
1c624     0B 00 00 FF 
1c628     CC E4 85 F1 | 	sub	objptr, ##5836
1c62c     A7 F0 03 F6 | 	mov	ptra, fp
1c630     B2 00 A0 FD | 	call	#popregs_
1c634                 | _hg010b_spin2_setmode_ret
1c634     2D 00 64 FD | 	ret
1c638                 | 
1c638                 | ' 
1c638                 | ' '****************************************************************************************************************
1c638                 | ' '                                                                                                             	*
1c638                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1c638                 | ' '                                                                                                             	*
1c638                 | ' '****************************************************************************************************************
1c638                 | ' 
1c638                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1c638                 | _hg010b_spin2_makedl
1c638                 | ' 
1c638                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1c638                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1c638                 | ' repeat i from 0 to 11                                                           ' clear DL
1c638     00 00 06 F6 | 	mov	_var01, #0
1c63c     ED E5 05 F1 | 	add	objptr, #493
1c640     97 0E 48 FB | 	callpa	#(@LR__2211-@LR__2210)>>2,fcache_load_ptr_
1c644                 | LR__2210
1c644                 | '   displaylist[i]:=0 
1c644     00 03 02 F6 | 	mov	_var02, _var01
1c648     02 02 66 F0 | 	shl	_var02, #2
1c64c     F2 02 02 F1 | 	add	_var02, objptr
1c650     01 01 68 FC | 	wrlong	#0, _var02
1c654     01 00 06 F1 | 	add	_var01, #1
1c658     0C 00 56 F2 | 	cmps	_var01, #12 wc
1c65c     E4 FF 9F CD |  if_b	jmp	#LR__2210
1c660                 | LR__2211
1c660                 | '                         ' 
1c660                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1c660     8C E5 85 F1 | 	sub	objptr, #396
1c664     F2 02 02 FB | 	rdlong	_var02, objptr
1c668     14 02 66 F0 | 	shl	_var02, #20
1c66c     01 02 06 F1 | 	add	_var02, #1
1c670     04 E4 85 F1 | 	sub	objptr, #4
1c674     F2 00 02 FB | 	rdlong	_var01, objptr
1c678     02 00 66 F0 | 	shl	_var01, #2
1c67c     04 00 66 F0 | 	shl	_var01, #4
1c680     00 03 02 F1 | 	add	_var02, _var01
1c684     90 E5 05 F1 | 	add	objptr, #400
1c688     F2 02 62 FC | 	wrlong	_var02, objptr
1c68c     ED E5 85 F1 | 	sub	objptr, #493
1c690                 | ' displaylist[1]:=buf_ptr<<4+%10  
1c690     F2 02 02 FB | 	rdlong	_var02, objptr
1c694     04 02 66 F0 | 	shl	_var02, #4
1c698     02 02 06 F1 | 	add	_var02, #2
1c69c     F1 E5 05 F1 | 	add	objptr, #497
1c6a0     F2 02 62 FC | 	wrlong	_var02, objptr
1c6a4                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1c6a4     04 E4 85 F1 | 	sub	objptr, #4
1c6a8     F2 02 02 F6 | 	mov	_var02, objptr
1c6ac     CD E5 85 F1 | 	sub	objptr, #461
1c6b0     F2 02 62 FC | 	wrlong	_var02, objptr
1c6b4     20 E4 85 F1 | 	sub	objptr, #32
1c6b8                 | _hg010b_spin2_makedl_ret
1c6b8     2D 00 64 FD | 	ret
1c6bc                 | 
1c6bc                 | ' 
1c6bc                 | ' 
1c6bc                 | ' '****************************************************************************************************************
1c6bc                 | ' '                                                                        					*
1c6bc                 | ' '  Graphic primitives                                                    					*
1c6bc                 | ' '                                                                        					*
1c6bc                 | ' '****************************************************************************************************************
1c6bc                 | ' 
1c6bc                 | ' pub setspriteptr(num,ptr)
1c6bc                 | _hg010b_spin2_setspriteptr
1c6bc                 | ' long[@spr1ptr+12*num]:=ptr
1c6bc     11 E5 05 F1 | 	add	objptr, #273
1c6c0     F2 00 02 F6 | 	mov	_var01, objptr
1c6c4     09 03 02 F6 | 	mov	_var02, arg01
1c6c8     01 02 66 F0 | 	shl	_var02, #1
1c6cc     09 03 02 F1 | 	add	_var02, arg01
1c6d0     02 02 66 F0 | 	shl	_var02, #2
1c6d4     01 01 02 F1 | 	add	_var01, _var02
1c6d8     00 15 62 FC | 	wrlong	arg02, _var01
1c6dc     11 E5 85 F1 | 	sub	objptr, #273
1c6e0                 | _hg010b_spin2_setspriteptr_ret
1c6e0     2D 00 64 FD | 	ret
1c6e4                 | 
1c6e4                 | ' 
1c6e4                 | ' pub setspritepos(num,x,y)
1c6e4                 | _hg010b_spin2_setspritepos
1c6e4                 | ' if y>601
1c6e4     01 00 00 FF 
1c6e8     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1c6ec                 | '   y:=601
1c6ec     01 00 00 3F 
1c6f0     59 16 06 36 |  if_ae	mov	arg03, ##601
1c6f4                 | ' if x>1024
1c6f4     02 00 00 FF 
1c6f8     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1c6fc                 | '   x:=1024
1c6fc     0A 14 C6 39 |  if_ae	decod	arg02, #10
1c700                 | ' word[@spr1ptr+12*num+4]:=x
1c700     11 E5 05 F1 | 	add	objptr, #273
1c704     F2 00 02 F6 | 	mov	_var01, objptr
1c708     09 03 02 F6 | 	mov	_var02, arg01
1c70c     01 02 66 F0 | 	shl	_var02, #1
1c710     09 03 02 F1 | 	add	_var02, arg01
1c714     02 02 66 F0 | 	shl	_var02, #2
1c718     01 01 02 F1 | 	add	_var01, _var02
1c71c     04 00 06 F1 | 	add	_var01, #4
1c720     00 15 52 FC | 	wrword	arg02, _var01
1c724                 | ' word[@spr1ptr+12*num+6]:=y
1c724     F2 00 02 F6 | 	mov	_var01, objptr
1c728     09 03 02 F6 | 	mov	_var02, arg01
1c72c     01 02 66 F0 | 	shl	_var02, #1
1c730     09 03 02 F1 | 	add	_var02, arg01
1c734     02 02 66 F0 | 	shl	_var02, #2
1c738     01 01 02 F1 | 	add	_var01, _var02
1c73c     06 00 06 F1 | 	add	_var01, #6
1c740     00 17 52 FC | 	wrword	arg03, _var01
1c744     11 E5 85 F1 | 	sub	objptr, #273
1c748                 | _hg010b_spin2_setspritepos_ret
1c748     2D 00 64 FD | 	ret
1c74c                 | 
1c74c                 | ' 
1c74c                 | ' pub setspritesize(num,w,h)
1c74c                 | _hg010b_spin2_setspritesize
1c74c                 | ' word[@spr1ptr+12*num+8]:=w
1c74c     11 E5 05 F1 | 	add	objptr, #273
1c750     F2 00 02 F6 | 	mov	_var01, objptr
1c754     09 03 02 F6 | 	mov	_var02, arg01
1c758     01 02 66 F0 | 	shl	_var02, #1
1c75c     09 03 02 F1 | 	add	_var02, arg01
1c760     02 02 66 F0 | 	shl	_var02, #2
1c764     01 01 02 F1 | 	add	_var01, _var02
1c768     08 00 06 F1 | 	add	_var01, #8
1c76c     00 15 52 FC | 	wrword	arg02, _var01
1c770                 | ' word[@spr1ptr+12*num+10]:=h
1c770     F2 00 02 F6 | 	mov	_var01, objptr
1c774     09 03 02 F6 | 	mov	_var02, arg01
1c778     01 02 66 F0 | 	shl	_var02, #1
1c77c     09 03 02 F1 | 	add	_var02, arg01
1c780     02 02 66 F0 | 	shl	_var02, #2
1c784     01 01 02 F1 | 	add	_var01, _var02
1c788     0A 00 06 F1 | 	add	_var01, #10
1c78c     00 17 52 FC | 	wrword	arg03, _var01
1c790     11 E5 85 F1 | 	sub	objptr, #273
1c794                 | _hg010b_spin2_setspritesize_ret
1c794     2D 00 64 FD | 	ret
1c798                 | 
1c798                 | ' 
1c798                 | ' 
1c798                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1c798                 | ' 
1c798                 | ' 
1c798                 | ' pub putpixel(x,y,c)
1c798                 | _hg010b_spin2_putpixel
1c798     04 4A 05 F6 | 	mov	COUNT_, #4
1c79c     A8 00 A0 FD | 	call	#pushregs_
1c7a0     09 1F 02 F6 | 	mov	local01, arg01
1c7a4                 | ' 
1c7a4                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1c7a4     00 20 06 F6 | 	mov	local02, #0
1c7a8     00 1E 56 F2 | 	cmps	local01, #0 wc
1c7ac     01 20 66 36 |  if_ae	neg	local02, #1
1c7b0     E9 E4 05 F1 | 	add	objptr, #233
1c7b4     F2 1A 02 FB | 	rdlong	arg05, objptr
1c7b8     02 1A 66 F0 | 	shl	arg05, #2
1c7bc     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1c7c0     11 23 A2 F1 | 	subx	local03, local03
1c7c4     11 21 02 F5 | 	and	local02, local03
1c7c8     00 22 06 F6 | 	mov	local03, #0
1c7cc     00 14 56 F2 | 	cmps	arg02, #0 wc
1c7d0     01 22 66 36 |  if_ae	neg	local03, #1
1c7d4     11 21 02 F5 | 	and	local02, local03
1c7d8     04 E4 85 F1 | 	sub	objptr, #4
1c7dc     F2 22 02 FB | 	rdlong	local03, objptr
1c7e0     E5 E4 85 F1 | 	sub	objptr, #229
1c7e4     11 15 52 F2 | 	cmps	arg02, local03 wc
1c7e8     12 25 A2 F1 | 	subx	local04, local04
1c7ec     12 21 CA F7 | 	test	local02, local04 wz
1c7f0     48 00 90 AD |  if_e	jmp	#LR__2220
1c7f4     DD E4 05 F1 | 	add	objptr, #221
1c7f8     F2 12 02 FB | 	rdlong	arg01, objptr
1c7fc     14 E4 05 F1 | 	add	objptr, #20
1c800     F2 24 02 FB | 	rdlong	local04, objptr
1c804     02 24 66 F0 | 	shl	local04, #2
1c808     0A 25 02 FD | 	qmul	local04, arg02
1c80c                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1c80c     0B 15 02 F6 | 	mov	arg02, arg03
1c810     01 16 06 F6 | 	mov	arg03, #1
1c814     00 18 06 F6 | 	mov	arg04, #0
1c818     01 1A 06 F6 | 	mov	arg05, #1
1c81c     0A 00 00 FF 
1c820     DB E5 05 F1 | 	add	objptr, ##5595
1c824     18 24 62 FD | 	getqx	local04
1c828     0F 25 02 F1 | 	add	local04, local01
1c82c     12 13 02 F1 | 	add	arg01, local04
1c830     D8 17 B0 FD | 	call	#_psram_spin2_fill
1c834     0B 00 00 FF 
1c838     CC E4 85 F1 | 	sub	objptr, ##5836
1c83c                 | LR__2220
1c83c     A7 F0 03 F6 | 	mov	ptra, fp
1c840     B2 00 A0 FD | 	call	#popregs_
1c844                 | _hg010b_spin2_putpixel_ret
1c844     2D 00 64 FD | 	ret
1c848                 | 
1c848                 | ' 
1c848                 | ' pub putpixel2(x,y,c)
1c848                 | _hg010b_spin2_putpixel2
1c848     02 4A 05 F6 | 	mov	COUNT_, #2
1c84c     A8 00 A0 FD | 	call	#pushregs_
1c850     DD E4 05 F1 | 	add	objptr, #221
1c854     F2 1E 02 FB | 	rdlong	local01, objptr
1c858     14 E4 05 F1 | 	add	objptr, #20
1c85c     F2 1A 02 FB | 	rdlong	arg05, objptr
1c860     02 1A 66 F0 | 	shl	arg05, #2
1c864     0A 1B 02 FD | 	qmul	arg05, arg02
1c868                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1c868     0B 15 02 F6 | 	mov	arg02, arg03
1c86c     01 16 06 F6 | 	mov	arg03, #1
1c870     00 18 06 F6 | 	mov	arg04, #0
1c874     01 1A 06 F6 | 	mov	arg05, #1
1c878     0A 00 00 FF 
1c87c     DB E5 05 F1 | 	add	objptr, ##5595
1c880     18 20 62 FD | 	getqx	local02
1c884     09 21 02 F1 | 	add	local02, arg01
1c888     10 1F 02 F1 | 	add	local01, local02
1c88c     0F 13 02 F6 | 	mov	arg01, local01
1c890     78 17 B0 FD | 	call	#_psram_spin2_fill
1c894     0B 00 00 FF 
1c898     CC E4 85 F1 | 	sub	objptr, ##5836
1c89c     A7 F0 03 F6 | 	mov	ptra, fp
1c8a0     B2 00 A0 FD | 	call	#popregs_
1c8a4                 | _hg010b_spin2_putpixel2_ret
1c8a4     2D 00 64 FD | 	ret
1c8a8                 | 
1c8a8                 | ' 
1c8a8                 | ' pub getpixel2(x,y): c 
1c8a8                 | _hg010b_spin2_getpixel2
1c8a8     02 4A 05 F6 | 	mov	COUNT_, #2
1c8ac     A8 00 A0 FD | 	call	#pushregs_
1c8b0     0C F0 07 F1 | 	add	ptra, #12
1c8b4     04 4E 05 F1 | 	add	fp, #4
1c8b8     A7 12 62 FC | 	wrlong	arg01, fp
1c8bc     04 4E 05 F1 | 	add	fp, #4
1c8c0     A7 14 62 FC | 	wrlong	arg02, fp
1c8c4     08 4E 85 F1 | 	sub	fp, #8
1c8c8     A7 00 68 FC | 	wrlong	#0, fp
1c8cc     A7 12 02 F6 | 	mov	arg01, fp
1c8d0     DD E4 05 F1 | 	add	objptr, #221
1c8d4     F2 14 02 FB | 	rdlong	arg02, objptr
1c8d8     14 E4 05 F1 | 	add	objptr, #20
1c8dc     F2 16 02 FB | 	rdlong	arg03, objptr
1c8e0     02 16 66 F0 | 	shl	arg03, #2
1c8e4     08 4E 05 F1 | 	add	fp, #8
1c8e8     A7 FA 01 FB | 	rdlong	result1, fp
1c8ec     FD 16 02 FD | 	qmul	arg03, result1
1c8f0                 | ' 
1c8f0                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1c8f0     04 4E 85 F1 | 	sub	fp, #4
1c8f4     A7 1E 02 FB | 	rdlong	local01, fp
1c8f8     04 4E 85 F1 | 	sub	fp, #4
1c8fc     01 16 06 F6 | 	mov	arg03, #1
1c900     0A 00 00 FF 
1c904     DB E5 05 F1 | 	add	objptr, ##5595
1c908     18 20 62 FD | 	getqx	local02
1c90c     0F 21 02 F1 | 	add	local02, local01
1c910     10 15 02 F1 | 	add	arg02, local02
1c914     BC 15 B0 FD | 	call	#_psram_spin2_read1
1c918     0B 00 00 FF 
1c91c     CC E4 85 F1 | 	sub	objptr, ##5836
1c920                 | ' return c
1c920     A7 FA 01 FB | 	rdlong	result1, fp
1c924     A7 F0 03 F6 | 	mov	ptra, fp
1c928     B2 00 A0 FD | 	call	#popregs_
1c92c                 | _hg010b_spin2_getpixel2_ret
1c92c     2D 00 64 FD | 	ret
1c930                 | 
1c930                 | '   
1c930                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1c930                 | ' 
1c930                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1c930                 | _hg010b_spin2_fastline
1c930     02 4A 05 F6 | 	mov	COUNT_, #2
1c934     A8 00 A0 FD | 	call	#pushregs_
1c938     09 1F 02 F6 | 	mov	local01, arg01
1c93c     0A 21 02 F6 | 	mov	local02, arg02
1c940                 | ' 
1c940                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1c940     00 16 56 F2 | 	cmps	arg03, #0 wc
1c944     F4 00 90 CD |  if_b	jmp	#LR__2230
1c948     01 00 00 FF 
1c94c     2A E4 05 F1 | 	add	objptr, ##554
1c950     F2 1A 02 FB | 	rdlong	arg05, objptr
1c954     01 00 00 FF 
1c958     2A E4 85 F1 | 	sub	objptr, ##554
1c95c     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1c960     D8 00 90 3D |  if_ae	jmp	#LR__2230
1c964     00 1E 56 F2 | 	cmps	local01, #0 wc
1c968     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1c96c     CC 00 90 CD |  if_b	jmp	#LR__2230
1c970     01 00 00 FF 
1c974     26 E4 05 F1 | 	add	objptr, ##550
1c978     F2 1A 02 FB | 	rdlong	arg05, objptr
1c97c     01 00 00 FF 
1c980     26 E4 85 F1 | 	sub	objptr, ##550
1c984     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1c988     01 00 00 1F 
1c98c     26 E4 05 11 |  if_a	add	objptr, ##550
1c990     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1c994     01 00 00 1F 
1c998     26 E4 85 11 |  if_a	sub	objptr, ##550
1c99c     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1c9a0                 | '   return
1c9a0     98 00 90 1D |  if_a	jmp	#LR__2230
1c9a4     10 1F 5A F2 | 	cmps	local01, local02 wcz
1c9a8     0F 1B 02 16 |  if_a	mov	arg05, local01
1c9ac     10 1F 02 16 |  if_a	mov	local01, local02
1c9b0     0D 21 02 16 |  if_a	mov	local02, arg05
1c9b4     00 1E 56 F2 | 	cmps	local01, #0 wc
1c9b8     00 1E 06 C6 |  if_b	mov	local01, #0
1c9bc     01 00 00 FF 
1c9c0     26 E4 05 F1 | 	add	objptr, ##550
1c9c4     F2 1A 02 FB | 	rdlong	arg05, objptr
1c9c8     01 00 00 FF 
1c9cc     26 E4 85 F1 | 	sub	objptr, ##550
1c9d0     0D 21 52 F2 | 	cmps	local02, arg05 wc
1c9d4     01 00 00 3F 
1c9d8     26 E4 05 31 |  if_ae	add	objptr, ##550
1c9dc     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1c9e0     01 00 00 3F 
1c9e4     26 E4 85 31 |  if_ae	sub	objptr, ##550
1c9e8     DD E4 05 F1 | 	add	objptr, #221
1c9ec     F2 12 02 FB | 	rdlong	arg01, objptr
1c9f0     14 E4 05 F1 | 	add	objptr, #20
1c9f4     F2 1A 02 FB | 	rdlong	arg05, objptr
1c9f8     02 1A 66 F0 | 	shl	arg05, #2
1c9fc     0B 1B 02 FD | 	qmul	arg05, arg03
1ca00                 | ' if x1>x2
1ca00                 | '   x1,x2:=x2,x1
1ca00                 | ' if x1<0 
1ca00                 | '   x1:=0
1ca00                 | ' if x2>=xres
1ca00                 | '   x2:=xres-1  
1ca00     01 20 86 31 |  if_ae	sub	local02, #1
1ca04                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1ca04     01 16 06 F6 | 	mov	arg03, #1
1ca08     10 17 02 F1 | 	add	arg03, local02
1ca0c     0F 17 82 F1 | 	sub	arg03, local01
1ca10     0C 15 02 F6 | 	mov	arg02, arg04
1ca14     00 18 06 F6 | 	mov	arg04, #0
1ca18     01 1A 06 F6 | 	mov	arg05, #1
1ca1c     0A 00 00 FF 
1ca20     DB E5 05 F1 | 	add	objptr, ##5595
1ca24     18 20 62 FD | 	getqx	local02
1ca28     0F 21 02 F1 | 	add	local02, local01
1ca2c     10 13 02 F1 | 	add	arg01, local02
1ca30     D8 15 B0 FD | 	call	#_psram_spin2_fill
1ca34     0B 00 00 FF 
1ca38     CC E4 85 F1 | 	sub	objptr, ##5836
1ca3c                 | LR__2230
1ca3c     A7 F0 03 F6 | 	mov	ptra, fp
1ca40     B2 00 A0 FD | 	call	#popregs_
1ca44                 | _hg010b_spin2_fastline_ret
1ca44     2D 00 64 FD | 	ret
1ca48                 | 
1ca48                 | ' 
1ca48                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1ca48                 | _hg010b_spin2_draw
1ca48     0E 4A 05 F6 | 	mov	COUNT_, #14
1ca4c     A8 00 A0 FD | 	call	#pushregs_
1ca50     09 1F 02 F6 | 	mov	local01, arg01
1ca54     0A 21 02 F6 | 	mov	local02, arg02
1ca58     0B 23 02 F6 | 	mov	local03, arg03
1ca5c     0C 25 02 F6 | 	mov	local04, arg04
1ca60     0D 27 02 F6 | 	mov	local05, arg05
1ca64                 | ' 
1ca64                 | ' if (y1==y2)
1ca64     12 21 0A F2 | 	cmp	local02, local04 wz
1ca68     18 00 90 5D |  if_ne	jmp	#LR__2240
1ca6c                 | '   fastline(x1,x2,y1,c)
1ca6c     0F 13 02 F6 | 	mov	arg01, local01
1ca70     11 15 02 F6 | 	mov	arg02, local03
1ca74     10 17 02 F6 | 	mov	arg03, local02
1ca78     13 19 02 F6 | 	mov	arg04, local05
1ca7c     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1ca80     F8 00 90 FD | 	jmp	#LR__2246
1ca84                 | LR__2240
1ca84                 | ' else  
1ca84                 | '   x:=x1
1ca84     0F 29 02 F6 | 	mov	local06, local01
1ca88                 | '   y:=y1
1ca88     10 2B 02 F6 | 	mov	local07, local02
1ca8c                 | ' 
1ca8c                 | '   if (x1<x2) 
1ca8c     11 1F 52 F2 | 	cmps	local01, local03 wc
1ca90                 | '     xi:=1
1ca90     01 2C 06 C6 |  if_b	mov	local08, #1
1ca94                 | '     dx:=x2-x1
1ca94     11 2F 02 C6 |  if_b	mov	local09, local03
1ca98     0F 2F 82 C1 |  if_b	sub	local09, local01
1ca9c                 | '   else
1ca9c                 | '     xi:=-1
1ca9c     01 2C 66 36 |  if_ae	neg	local08, #1
1caa0                 | '     dx:=x1-x2
1caa0     11 1F 82 31 |  if_ae	sub	local01, local03
1caa4     0F 2F 02 36 |  if_ae	mov	local09, local01
1caa8                 | '   
1caa8                 | '   if (y1<y2) 
1caa8     12 21 52 F2 | 	cmps	local02, local04 wc
1caac                 | '     yi:=1
1caac     01 30 06 C6 |  if_b	mov	local10, #1
1cab0                 | '     dy:=y2-y1
1cab0     12 33 02 C6 |  if_b	mov	local11, local04
1cab4     10 33 82 C1 |  if_b	sub	local11, local02
1cab8                 | '   else
1cab8                 | '     yi:=-1
1cab8     01 30 66 36 |  if_ae	neg	local10, #1
1cabc                 | '     dy:=y1-y2
1cabc     12 21 82 31 |  if_ae	sub	local02, local04
1cac0     10 33 02 36 |  if_ae	mov	local11, local02
1cac4                 | ' 
1cac4                 | '   putpixel(x,y,c)
1cac4     13 17 02 F6 | 	mov	arg03, local05
1cac8     14 13 02 F6 | 	mov	arg01, local06
1cacc     15 15 02 F6 | 	mov	arg02, local07
1cad0     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1cad4                 | ' 
1cad4                 | '   if (dx>dy)
1cad4     19 2F 5A F2 | 	cmps	local09, local11 wcz
1cad8     50 00 90 ED |  if_be	jmp	#LR__2242
1cadc                 | '     ai:=(dy-dx)*2
1cadc     19 35 02 F6 | 	mov	local12, local11
1cae0     17 35 82 F1 | 	sub	local12, local09
1cae4     01 34 66 F0 | 	shl	local12, #1
1cae8                 | '     bi:=dy*2
1cae8     01 32 66 F0 | 	shl	local11, #1
1caec     19 37 02 F6 | 	mov	local13, local11
1caf0                 | '     d:= bi-dx
1caf0     1B 39 02 F6 | 	mov	local14, local13
1caf4     17 39 82 F1 | 	sub	local14, local09
1caf8                 | '     repeat while (x<>x2) 
1caf8                 | LR__2241
1caf8     11 29 0A F2 | 	cmp	local06, local03 wz
1cafc     7C 00 90 AD |  if_e	jmp	#LR__2245
1cb00                 | '       if (d>=0) 
1cb00     00 38 56 F2 | 	cmps	local14, #0 wc
1cb04                 | '         x+=xi
1cb04     16 29 02 31 |  if_ae	add	local06, local08
1cb08                 | '         y+=yi
1cb08     18 2B 02 31 |  if_ae	add	local07, local10
1cb0c                 | '         d+=ai
1cb0c     1A 39 02 31 |  if_ae	add	local14, local12
1cb10                 | '       else
1cb10                 | '         d+=bi
1cb10     1B 39 02 C1 |  if_b	add	local14, local13
1cb14                 | '         x+=xi
1cb14     16 29 02 C1 |  if_b	add	local06, local08
1cb18                 | '       putpixel(x,y,c)
1cb18     14 13 02 F6 | 	mov	arg01, local06
1cb1c     15 15 02 F6 | 	mov	arg02, local07
1cb20     13 17 02 F6 | 	mov	arg03, local05
1cb24     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1cb28     CC FF 9F FD | 	jmp	#LR__2241
1cb2c                 | LR__2242
1cb2c                 | '   else
1cb2c                 | '     ai:=(dx-dy)*2
1cb2c     17 35 02 F6 | 	mov	local12, local09
1cb30     19 35 82 F1 | 	sub	local12, local11
1cb34     01 34 66 F0 | 	shl	local12, #1
1cb38                 | '     bi:=dx*2
1cb38     01 2E 66 F0 | 	shl	local09, #1
1cb3c     17 37 02 F6 | 	mov	local13, local09
1cb40                 | '     d:=bi-dy
1cb40     1B 39 02 F6 | 	mov	local14, local13
1cb44     19 39 82 F1 | 	sub	local14, local11
1cb48                 | '     repeat while (y<>y2)
1cb48                 | LR__2243
1cb48     12 2B 0A F2 | 	cmp	local07, local04 wz
1cb4c     2C 00 90 AD |  if_e	jmp	#LR__2244
1cb50                 | '       if (d>=0)
1cb50     00 38 56 F2 | 	cmps	local14, #0 wc
1cb54                 | '         x+=xi
1cb54     16 29 02 31 |  if_ae	add	local06, local08
1cb58                 | '         y+=yi
1cb58     18 2B 02 31 |  if_ae	add	local07, local10
1cb5c                 | '         d+=ai
1cb5c     1A 39 02 31 |  if_ae	add	local14, local12
1cb60                 | '       else
1cb60                 | '         d+=bi
1cb60     1B 39 02 C1 |  if_b	add	local14, local13
1cb64                 | '         y+=yi
1cb64     18 2B 02 C1 |  if_b	add	local07, local10
1cb68                 | '       putpixel(x, y,c)
1cb68     14 13 02 F6 | 	mov	arg01, local06
1cb6c     15 15 02 F6 | 	mov	arg02, local07
1cb70     13 17 02 F6 | 	mov	arg03, local05
1cb74     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1cb78     CC FF 9F FD | 	jmp	#LR__2243
1cb7c                 | LR__2244
1cb7c                 | LR__2245
1cb7c                 | LR__2246
1cb7c     A7 F0 03 F6 | 	mov	ptra, fp
1cb80     B2 00 A0 FD | 	call	#popregs_
1cb84                 | _hg010b_spin2_draw_ret
1cb84     2D 00 64 FD | 	ret
1cb88                 | 
1cb88                 | '  
1cb88                 | ' pub fillpush(val) 
1cb88                 | _hg010b_spin2_fillpush
1cb88                 | ' fillstack[fillptr]:=val
1cb88     0B 00 00 FF 
1cb8c     BA E4 05 F1 | 	add	objptr, ##5818
1cb90     F2 00 02 FB | 	rdlong	_var01, objptr
1cb94     02 00 66 F0 | 	shl	_var01, #2
1cb98     0A 00 00 FF 
1cb9c     00 E4 85 F1 | 	sub	objptr, ##5120
1cba0     F2 00 02 F1 | 	add	_var01, objptr
1cba4     00 13 62 FC | 	wrlong	arg01, _var01
1cba8                 | ' fillptr+=1   
1cba8     0A 00 00 FF 
1cbac     00 E4 05 F1 | 	add	objptr, ##5120
1cbb0     F2 00 02 FB | 	rdlong	_var01, objptr
1cbb4     01 00 06 F1 | 	add	_var01, #1
1cbb8     F2 00 62 FC | 	wrlong	_var01, objptr
1cbbc     0B 00 00 FF 
1cbc0     BA E4 85 F1 | 	sub	objptr, ##5818
1cbc4                 | _hg010b_spin2_fillpush_ret
1cbc4     2D 00 64 FD | 	ret
1cbc8                 | 
1cbc8                 | ' 
1cbc8                 | '     
1cbc8                 | ' pub fillpop() : val
1cbc8                 | _hg010b_spin2_fillpop
1cbc8                 | ' 
1cbc8                 | ' fillptr-=1
1cbc8     0B 00 00 FF 
1cbcc     BA E4 05 F1 | 	add	objptr, ##5818
1cbd0     F2 FA 01 FB | 	rdlong	result1, objptr
1cbd4     01 FA 85 F1 | 	sub	result1, #1
1cbd8     F2 FA 61 FC | 	wrlong	result1, objptr
1cbdc                 | ' if fillptr<0
1cbdc     0B 00 00 FF 
1cbe0     BA E4 85 F1 | 	sub	objptr, ##5818
1cbe4     00 FA 55 F2 | 	cmps	result1, #0 wc
1cbe8                 | '   fillptr:=0
1cbe8     0B 00 00 CF 
1cbec     BA E4 05 C1 |  if_b	add	objptr, ##5818
1cbf0     F2 00 68 CC |  if_b	wrlong	#0, objptr
1cbf4     0B 00 00 CF 
1cbf8     BA E4 85 C1 |  if_b	sub	objptr, ##5818
1cbfc                 | '   val:=-12345
1cbfc     E7 FF 7F CF 
1cc00     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1cc04     28 00 90 CD |  if_b	jmp	#LR__2250
1cc08                 | ' else 
1cc08                 | '   val:=fillstack[fillptr]
1cc08     0B 00 00 FF 
1cc0c     BA E4 05 F1 | 	add	objptr, ##5818
1cc10     F2 00 02 FB | 	rdlong	_var01, objptr
1cc14     02 00 66 F0 | 	shl	_var01, #2
1cc18     0A 00 00 FF 
1cc1c     00 E4 85 F1 | 	sub	objptr, ##5120
1cc20     F2 00 02 F1 | 	add	_var01, objptr
1cc24     00 01 02 FB | 	rdlong	_var01, _var01
1cc28     01 00 00 FF 
1cc2c     BA E4 85 F1 | 	sub	objptr, ##698
1cc30                 | LR__2250
1cc30                 | ' return val
1cc30     00 FB 01 F6 | 	mov	result1, _var01
1cc34                 | _hg010b_spin2_fillpop_ret
1cc34     2D 00 64 FD | 	ret
1cc38                 | 
1cc38                 | ' 
1cc38                 | '       
1cc38                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1cc38                 | _hg010b_spin2_fill
1cc38     0B 4A 05 F6 | 	mov	COUNT_, #11
1cc3c     A8 00 A0 FD | 	call	#pushregs_
1cc40                 | ' 
1cc40                 | ' newcolor:=newcolor & 255
1cc40     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1cc44                 | ' oldcolor:=oldcolor & 255
1cc44     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1cc48                 | ' 
1cc48                 | ' if (oldcolor == newcolor) 
1cc48     0F 21 0A F2 | 	cmp	local02, local01 wz
1cc4c                 | '   return
1cc4c     70 02 90 AD |  if_e	jmp	#LR__2269
1cc50                 | ' 
1cc50                 | ' fillptr:=0
1cc50     0B 00 00 FF 
1cc54     BA E4 05 F1 | 	add	objptr, ##5818
1cc58     F2 00 68 FC | 	wrlong	#0, objptr
1cc5c                 | ' fillmax:=0
1cc5c     04 E4 05 F1 | 	add	objptr, #4
1cc60     F2 00 68 FC | 	wrlong	#0, objptr
1cc64     0B 00 00 FF 
1cc68     BE E4 85 F1 | 	sub	objptr, ##5822
1cc6c                 | ' fillpush(x)
1cc6c     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1cc70                 | ' fillpush(y)
1cc70     0A 13 02 F6 | 	mov	arg01, arg02
1cc74     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1cc78                 | ' y:=fillpop()
1cc78     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1cc7c     FD 22 02 F6 | 	mov	local03, result1
1cc80                 | ' x:=fillpop()
1cc80     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1cc84     FD 24 02 F6 | 	mov	local04, result1
1cc88                 | ' 'pinhigh(38)
1cc88                 | ' repeat while (x>-1)       
1cc88                 | LR__2260
1cc88     00 24 56 F2 | 	cmps	local04, #0 wc
1cc8c     30 02 90 CD |  if_b	jmp	#LR__2268
1cc90                 | '  ' pintoggle(39)
1cc90                 | '   x1 := x
1cc90     12 27 02 F6 | 	mov	local05, local04
1cc94                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1cc94                 | LR__2261
1cc94     00 28 06 F6 | 	mov	local06, #0
1cc98     00 2A 06 F6 | 	mov	local07, #0
1cc9c     00 26 56 F2 | 	cmps	local05, #0 wc
1cca0     01 2A 66 36 |  if_ae	neg	local07, #1
1cca4     00 2A 0E F2 | 	cmp	local07, #0 wz
1cca8     00 28 26 56 |  if_ne	not	local06, #0
1ccac     00 2C 06 F6 | 	mov	local08, #0
1ccb0     00 2E 06 F6 | 	mov	local09, #0
1ccb4     11 15 02 F6 | 	mov	arg02, local03
1ccb8     13 13 02 F6 | 	mov	arg01, local05
1ccbc     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1ccc0     10 FB 09 F2 | 	cmp	result1, local02 wz
1ccc4     00 2E 26 A6 |  if_e	not	local09, #0
1ccc8     00 2E 0E F2 | 	cmp	local09, #0 wz
1cccc     00 2C 26 56 |  if_ne	not	local08, #0
1ccd0     16 29 CA F7 | 	test	local06, local08 wz
1ccd4                 | '     x1--
1ccd4     01 26 86 51 |  if_ne	sub	local05, #1
1ccd8     B8 FF 9F 5D |  if_ne	jmp	#LR__2261
1ccdc                 | '   x1++
1ccdc     01 26 06 F1 | 	add	local05, #1
1cce0                 | '   spanabove := 0
1cce0     00 30 06 F6 | 	mov	local10, #0
1cce4                 | '   spanbelow := 0
1cce4     00 32 06 F6 | 	mov	local11, #0
1cce8                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1cce8                 | LR__2262
1cce8     00 28 06 F6 | 	mov	local06, #0
1ccec     02 00 00 FF 
1ccf0     00 26 56 F2 | 	cmps	local05, ##1024 wc
1ccf4     00 28 26 C6 |  if_b	not	local06, #0
1ccf8     00 2C 06 F6 | 	mov	local08, #0
1ccfc     00 2E 06 F6 | 	mov	local09, #0
1cd00     11 15 02 F6 | 	mov	arg02, local03
1cd04     13 13 02 F6 | 	mov	arg01, local05
1cd08     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1cd0c     10 FB 09 F2 | 	cmp	result1, local02 wz
1cd10     00 2E 26 A6 |  if_e	not	local09, #0
1cd14     00 2E 0E F2 | 	cmp	local09, #0 wz
1cd18     00 2C 26 56 |  if_ne	not	local08, #0
1cd1c     16 29 CA F7 | 	test	local06, local08 wz
1cd20     88 01 90 AD |  if_e	jmp	#LR__2267
1cd24                 | '     putpixel2 (x1,y, newcolor & 255)
1cd24     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1cd28     13 13 02 F6 | 	mov	arg01, local05
1cd2c     11 15 02 F6 | 	mov	arg02, local03
1cd30     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1cd34                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1cd34     00 28 06 F6 | 	mov	local06, #0
1cd38     00 2A 06 F6 | 	mov	local07, #0
1cd3c     00 30 0E F2 | 	cmp	local10, #0 wz
1cd40     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1cd44     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1cd48     00 2A 0E F2 | 	cmp	local07, #0 wz
1cd4c     00 28 26 56 |  if_ne	not	local06, #0
1cd50     00 2C 06 F6 | 	mov	local08, #0
1cd54     00 2E 06 F6 | 	mov	local09, #0
1cd58     11 15 02 F6 | 	mov	arg02, local03
1cd5c     01 14 86 F1 | 	sub	arg02, #1
1cd60     13 13 02 F6 | 	mov	arg01, local05
1cd64     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1cd68     10 FB 09 F2 | 	cmp	result1, local02 wz
1cd6c     00 2E 26 A6 |  if_e	not	local09, #0
1cd70     00 2E 0E F2 | 	cmp	local09, #0 wz
1cd74     00 2C 26 56 |  if_ne	not	local08, #0
1cd78     16 29 CA F7 | 	test	local06, local08 wz
1cd7c     1C 00 90 AD |  if_e	jmp	#LR__2263
1cd80                 | '       fillpush(x1)
1cd80     13 13 02 F6 | 	mov	arg01, local05
1cd84     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1cd88                 | '       fillpush(y-1)
1cd88     11 13 02 F6 | 	mov	arg01, local03
1cd8c     01 12 86 F1 | 	sub	arg01, #1
1cd90     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1cd94                 | '       spanabove := 1 
1cd94     01 30 06 F6 | 	mov	local10, #1
1cd98     4C 00 90 FD | 	jmp	#LR__2264
1cd9c                 | LR__2263
1cd9c                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1cd9c     00 28 06 F6 | 	mov	local06, #0
1cda0     00 2A 06 F6 | 	mov	local07, #0
1cda4     00 30 0E F2 | 	cmp	local10, #0 wz
1cda8     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1cdac     01 2A 66 16 |  if_a	neg	local07, #1
1cdb0     00 2A 0E F2 | 	cmp	local07, #0 wz
1cdb4     00 28 26 56 |  if_ne	not	local06, #0
1cdb8     00 2C 06 F6 | 	mov	local08, #0
1cdbc     00 2E 06 F6 | 	mov	local09, #0
1cdc0     11 15 02 F6 | 	mov	arg02, local03
1cdc4     01 14 86 F1 | 	sub	arg02, #1
1cdc8     13 13 02 F6 | 	mov	arg01, local05
1cdcc     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1cdd0     10 FB 09 F2 | 	cmp	result1, local02 wz
1cdd4     00 2E 26 56 |  if_ne	not	local09, #0
1cdd8     00 2E 0E F2 | 	cmp	local09, #0 wz
1cddc     00 2C 26 56 |  if_ne	not	local08, #0
1cde0     16 29 CA F7 | 	test	local06, local08 wz
1cde4                 | '       spanabove := 0 
1cde4     00 30 06 56 |  if_ne	mov	local10, #0
1cde8                 | LR__2264
1cde8                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1cde8     00 28 06 F6 | 	mov	local06, #0
1cdec     00 2A 06 F6 | 	mov	local07, #0
1cdf0     00 32 0E F2 | 	cmp	local11, #0 wz
1cdf4     01 00 00 AF 
1cdf8     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1cdfc     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1ce00     00 2A 0E F2 | 	cmp	local07, #0 wz
1ce04     00 28 26 56 |  if_ne	not	local06, #0
1ce08     00 2C 06 F6 | 	mov	local08, #0
1ce0c     00 2E 06 F6 | 	mov	local09, #0
1ce10     11 15 02 F6 | 	mov	arg02, local03
1ce14     01 14 06 F1 | 	add	arg02, #1
1ce18     13 13 02 F6 | 	mov	arg01, local05
1ce1c     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1ce20     10 FB 09 F2 | 	cmp	result1, local02 wz
1ce24     00 2E 26 A6 |  if_e	not	local09, #0
1ce28     00 2E 0E F2 | 	cmp	local09, #0 wz
1ce2c     00 2C 26 56 |  if_ne	not	local08, #0
1ce30     16 29 CA F7 | 	test	local06, local08 wz
1ce34     1C 00 90 AD |  if_e	jmp	#LR__2265
1ce38                 | '       fillpush(x1)
1ce38     13 13 02 F6 | 	mov	arg01, local05
1ce3c     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1ce40                 | '       fillpush(y + 1)
1ce40     11 13 02 F6 | 	mov	arg01, local03
1ce44     01 12 06 F1 | 	add	arg01, #1
1ce48     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1ce4c                 | '       spanBelow := 1
1ce4c     01 32 06 F6 | 	mov	local11, #1
1ce50     50 00 90 FD | 	jmp	#LR__2266
1ce54                 | LR__2265
1ce54                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1ce54     00 28 06 F6 | 	mov	local06, #0
1ce58     00 2A 06 F6 | 	mov	local07, #0
1ce5c     00 32 0E F2 | 	cmp	local11, #0 wz
1ce60     01 00 00 5F 
1ce64     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1ce68     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1ce6c     00 2A 0E F2 | 	cmp	local07, #0 wz
1ce70     00 28 26 56 |  if_ne	not	local06, #0
1ce74     00 2C 06 F6 | 	mov	local08, #0
1ce78     00 2E 06 F6 | 	mov	local09, #0
1ce7c     11 15 02 F6 | 	mov	arg02, local03
1ce80     01 14 06 F1 | 	add	arg02, #1
1ce84     13 13 02 F6 | 	mov	arg01, local05
1ce88     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1ce8c     10 FB 09 F2 | 	cmp	result1, local02 wz
1ce90     00 2E 26 56 |  if_ne	not	local09, #0
1ce94     00 2E 0E F2 | 	cmp	local09, #0 wz
1ce98     00 2C 26 56 |  if_ne	not	local08, #0
1ce9c     16 29 CA F7 | 	test	local06, local08 wz
1cea0                 | '       spanbelow := 0
1cea0     00 32 06 56 |  if_ne	mov	local11, #0
1cea4                 | LR__2266
1cea4                 | '     x1++
1cea4     01 26 06 F1 | 	add	local05, #1
1cea8     3C FE 9F FD | 	jmp	#LR__2262
1ceac                 | LR__2267
1ceac                 | '   y:=fillpop()
1ceac     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1ceb0     FD 22 02 F6 | 	mov	local03, result1
1ceb4                 | '   x:=fillpop()
1ceb4     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1ceb8     FD 24 02 F6 | 	mov	local04, result1
1cebc     C8 FD 9F FD | 	jmp	#LR__2260
1cec0                 | LR__2268
1cec0                 | LR__2269
1cec0     A7 F0 03 F6 | 	mov	ptra, fp
1cec4     B2 00 A0 FD | 	call	#popregs_
1cec8                 | _hg010b_spin2_fill_ret
1cec8     2D 00 64 FD | 	ret
1cecc                 | 
1cecc                 | ' 'pinlow(38)    
1cecc                 | ' 
1cecc                 | ' '-- A filled circle -----------------------------------------------------
1cecc                 | ' 
1cecc                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1cecc                 | _hg010b_spin2_fcircle
1cecc     08 4A 05 F6 | 	mov	COUNT_, #8
1ced0     A8 00 A0 FD | 	call	#pushregs_
1ced4     0B 1F 02 F6 | 	mov	local01, arg03
1ced8     FF FF 7F FF 
1cedc     FE 1F 06 FD | 	qmul	local01, ##-2
1cee0     09 21 02 F6 | 	mov	local02, arg01
1cee4     0A 23 02 F6 | 	mov	local03, arg02
1cee8     0C 25 02 F6 | 	mov	local04, arg04
1ceec                 | ' 
1ceec                 | ' d:=5-4*r
1ceec     0F 19 02 F6 | 	mov	arg04, local01
1cef0     02 18 66 F0 | 	shl	arg04, #2
1cef4     05 26 06 F6 | 	mov	local05, #5
1cef8     0C 27 82 F1 | 	sub	local05, arg04
1cefc                 | ' x:=0
1cefc     00 28 06 F6 | 	mov	local06, #0
1cf00                 | ' y:=r
1cf00                 | ' da:=(-2*r+5)*4
1cf00                 | ' db:=3*4
1cf00     0C 2A 06 F6 | 	mov	local07, #12
1cf04                 | ' repeat while (x<=y) 
1cf04     18 2C 62 FD | 	getqx	local08
1cf08     05 2C 06 F1 | 	add	local08, #5
1cf0c     02 2C 66 F0 | 	shl	local08, #2
1cf10                 | LR__2270
1cf10     0F 29 5A F2 | 	cmps	local06, local01 wcz
1cf14     B4 00 90 1D |  if_a	jmp	#LR__2272
1cf18                 | '   fastline(x0-x,x0+x,y0-y,c)
1cf18     10 13 02 F6 | 	mov	arg01, local02
1cf1c     14 13 82 F1 | 	sub	arg01, local06
1cf20     10 15 02 F6 | 	mov	arg02, local02
1cf24     14 15 02 F1 | 	add	arg02, local06
1cf28     11 17 02 F6 | 	mov	arg03, local03
1cf2c     0F 17 82 F1 | 	sub	arg03, local01
1cf30     12 19 02 F6 | 	mov	arg04, local04
1cf34     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1cf38                 | '   fastline(x0-x,x0+x,y0+y,c)
1cf38     10 13 02 F6 | 	mov	arg01, local02
1cf3c     14 13 82 F1 | 	sub	arg01, local06
1cf40     10 15 02 F6 | 	mov	arg02, local02
1cf44     14 15 02 F1 | 	add	arg02, local06
1cf48     11 17 02 F6 | 	mov	arg03, local03
1cf4c     0F 17 02 F1 | 	add	arg03, local01
1cf50     12 19 02 F6 | 	mov	arg04, local04
1cf54     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1cf58                 | '   fastline(x0-y,x0+y,y0-x,c)
1cf58     10 13 02 F6 | 	mov	arg01, local02
1cf5c     0F 13 82 F1 | 	sub	arg01, local01
1cf60     10 15 02 F6 | 	mov	arg02, local02
1cf64     0F 15 02 F1 | 	add	arg02, local01
1cf68     11 17 02 F6 | 	mov	arg03, local03
1cf6c     14 17 82 F1 | 	sub	arg03, local06
1cf70     12 19 02 F6 | 	mov	arg04, local04
1cf74     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1cf78                 | '   fastline(x0-y,x0+y,y0+x,c)
1cf78     10 13 02 F6 | 	mov	arg01, local02
1cf7c     0F 13 82 F1 | 	sub	arg01, local01
1cf80     10 15 02 F6 | 	mov	arg02, local02
1cf84     0F 15 02 F1 | 	add	arg02, local01
1cf88     11 17 02 F6 | 	mov	arg03, local03
1cf8c     14 17 02 F1 | 	add	arg03, local06
1cf90     12 19 02 F6 | 	mov	arg04, local04
1cf94     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1cf98                 | '   if d>0 
1cf98     01 26 56 F2 | 	cmps	local05, #1 wc
1cf9c     18 00 90 CD |  if_b	jmp	#LR__2271
1cfa0                 | '     d+=da
1cfa0     16 27 02 F1 | 	add	local05, local08
1cfa4                 | '     y-=1
1cfa4     01 1E 86 F1 | 	sub	local01, #1
1cfa8                 | '     x+=1
1cfa8     01 28 06 F1 | 	add	local06, #1
1cfac                 | '     da+=4*4
1cfac     10 2C 06 F1 | 	add	local08, #16
1cfb0                 | '     db+=2*4
1cfb0     08 2A 06 F1 | 	add	local07, #8
1cfb4     58 FF 9F FD | 	jmp	#LR__2270
1cfb8                 | LR__2271
1cfb8                 | '   else
1cfb8                 | '     d+=db
1cfb8     15 27 02 F1 | 	add	local05, local07
1cfbc                 | '     x+=1
1cfbc     01 28 06 F1 | 	add	local06, #1
1cfc0                 | '     da+=2*4
1cfc0     08 2C 06 F1 | 	add	local08, #8
1cfc4                 | '     db+=2*4
1cfc4     08 2A 06 F1 | 	add	local07, #8
1cfc8     44 FF 9F FD | 	jmp	#LR__2270
1cfcc                 | LR__2272
1cfcc     A7 F0 03 F6 | 	mov	ptra, fp
1cfd0     B2 00 A0 FD | 	call	#popregs_
1cfd4                 | _hg010b_spin2_fcircle_ret
1cfd4     2D 00 64 FD | 	ret
1cfd8                 | 
1cfd8                 | '  
1cfd8                 | ' '-- A circle ------------------------------------------------------------ 
1cfd8                 | '  
1cfd8                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1cfd8                 | _hg010b_spin2_circle
1cfd8     08 4A 05 F6 | 	mov	COUNT_, #8
1cfdc     A8 00 A0 FD | 	call	#pushregs_
1cfe0     0B 1F 02 F6 | 	mov	local01, arg03
1cfe4     FF FF 7F FF 
1cfe8     FE 1F 06 FD | 	qmul	local01, ##-2
1cfec     09 21 02 F6 | 	mov	local02, arg01
1cff0     0A 23 02 F6 | 	mov	local03, arg02
1cff4     0C 25 02 F6 | 	mov	local04, arg04
1cff8                 | ' 
1cff8                 | '  
1cff8                 | ' d:=5-4*r
1cff8     0F 19 02 F6 | 	mov	arg04, local01
1cffc     02 18 66 F0 | 	shl	arg04, #2
1d000     05 26 06 F6 | 	mov	local05, #5
1d004     0C 27 82 F1 | 	sub	local05, arg04
1d008                 | ' x:=0
1d008     00 28 06 F6 | 	mov	local06, #0
1d00c                 | ' y:=r
1d00c                 | ' da:=(-2*r+5)*4
1d00c                 | ' db:=3*4
1d00c     0C 2A 06 F6 | 	mov	local07, #12
1d010                 | ' repeat while (x<=y) 
1d010     18 2C 62 FD | 	getqx	local08
1d014     05 2C 06 F1 | 	add	local08, #5
1d018     02 2C 66 F0 | 	shl	local08, #2
1d01c                 | LR__2280
1d01c     0F 29 5A F2 | 	cmps	local06, local01 wcz
1d020     F4 00 90 1D |  if_a	jmp	#LR__2282
1d024                 | '   putpixel(x0-x,y0-y,c)
1d024     10 13 02 F6 | 	mov	arg01, local02
1d028     14 13 82 F1 | 	sub	arg01, local06
1d02c     11 15 02 F6 | 	mov	arg02, local03
1d030     0F 15 82 F1 | 	sub	arg02, local01
1d034     12 17 02 F6 | 	mov	arg03, local04
1d038     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1d03c                 | '   putpixel(x0-x,y0+y,c)
1d03c     10 13 02 F6 | 	mov	arg01, local02
1d040     14 13 82 F1 | 	sub	arg01, local06
1d044     11 15 02 F6 | 	mov	arg02, local03
1d048     0F 15 02 F1 | 	add	arg02, local01
1d04c     12 17 02 F6 | 	mov	arg03, local04
1d050     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1d054                 | '   putpixel(x0+x,y0-y,c)
1d054     10 13 02 F6 | 	mov	arg01, local02
1d058     14 13 02 F1 | 	add	arg01, local06
1d05c     11 15 02 F6 | 	mov	arg02, local03
1d060     0F 15 82 F1 | 	sub	arg02, local01
1d064     12 17 02 F6 | 	mov	arg03, local04
1d068     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1d06c                 | '   putpixel(x0+x,y0+y,c)
1d06c     10 13 02 F6 | 	mov	arg01, local02
1d070     14 13 02 F1 | 	add	arg01, local06
1d074     11 15 02 F6 | 	mov	arg02, local03
1d078     0F 15 02 F1 | 	add	arg02, local01
1d07c     12 17 02 F6 | 	mov	arg03, local04
1d080     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1d084                 | '   putpixel(x0-y,y0-x,c)
1d084     10 13 02 F6 | 	mov	arg01, local02
1d088     0F 13 82 F1 | 	sub	arg01, local01
1d08c     11 15 02 F6 | 	mov	arg02, local03
1d090     14 15 82 F1 | 	sub	arg02, local06
1d094     12 17 02 F6 | 	mov	arg03, local04
1d098     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1d09c                 | '   putpixel(x0-y,y0+x,c)
1d09c     10 13 02 F6 | 	mov	arg01, local02
1d0a0     0F 13 82 F1 | 	sub	arg01, local01
1d0a4     11 15 02 F6 | 	mov	arg02, local03
1d0a8     14 15 02 F1 | 	add	arg02, local06
1d0ac     12 17 02 F6 | 	mov	arg03, local04
1d0b0     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1d0b4                 | '   putpixel(x0+y,y0-x,c)
1d0b4     10 13 02 F6 | 	mov	arg01, local02
1d0b8     0F 13 02 F1 | 	add	arg01, local01
1d0bc     11 15 02 F6 | 	mov	arg02, local03
1d0c0     14 15 82 F1 | 	sub	arg02, local06
1d0c4     12 17 02 F6 | 	mov	arg03, local04
1d0c8     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1d0cc                 | '   putpixel(x0+y,y0+x,c)
1d0cc     10 13 02 F6 | 	mov	arg01, local02
1d0d0     0F 13 02 F1 | 	add	arg01, local01
1d0d4     11 15 02 F6 | 	mov	arg02, local03
1d0d8     14 15 02 F1 | 	add	arg02, local06
1d0dc     12 17 02 F6 | 	mov	arg03, local04
1d0e0     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1d0e4                 | '   if d>0 
1d0e4     01 26 56 F2 | 	cmps	local05, #1 wc
1d0e8     18 00 90 CD |  if_b	jmp	#LR__2281
1d0ec                 | '     d+=da
1d0ec     16 27 02 F1 | 	add	local05, local08
1d0f0                 | '     y-=1
1d0f0     01 1E 86 F1 | 	sub	local01, #1
1d0f4                 | '     x+=1
1d0f4     01 28 06 F1 | 	add	local06, #1
1d0f8                 | '     da+=4*4
1d0f8     10 2C 06 F1 | 	add	local08, #16
1d0fc                 | '     db+=2*4
1d0fc     08 2A 06 F1 | 	add	local07, #8
1d100     18 FF 9F FD | 	jmp	#LR__2280
1d104                 | LR__2281
1d104                 | '   else
1d104                 | '     d+=db
1d104     15 27 02 F1 | 	add	local05, local07
1d108                 | '     x+=1
1d108     01 28 06 F1 | 	add	local06, #1
1d10c                 | '     da+=2*4
1d10c     08 2C 06 F1 | 	add	local08, #8
1d110                 | '     db+=2*4
1d110     08 2A 06 F1 | 	add	local07, #8
1d114     04 FF 9F FD | 	jmp	#LR__2280
1d118                 | LR__2282
1d118     A7 F0 03 F6 | 	mov	ptra, fp
1d11c     B2 00 A0 FD | 	call	#popregs_
1d120                 | _hg010b_spin2_circle_ret
1d120     2D 00 64 FD | 	ret
1d124                 | 
1d124                 | '     
1d124                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1d124                 | ' 
1d124                 | ' pub frame(x1,y1,x2,y2,c)
1d124                 | _hg010b_spin2_frame
1d124     05 4A 05 F6 | 	mov	COUNT_, #5
1d128     A8 00 A0 FD | 	call	#pushregs_
1d12c     09 1F 02 F6 | 	mov	local01, arg01
1d130     0A 21 02 F6 | 	mov	local02, arg02
1d134     0B 23 02 F6 | 	mov	local03, arg03
1d138     0C 25 02 F6 | 	mov	local04, arg04
1d13c     0D 27 02 F6 | 	mov	local05, arg05
1d140                 | ' 
1d140                 | ' fastline(x1,x2,y1,c)
1d140     0F 13 02 F6 | 	mov	arg01, local01
1d144     11 15 02 F6 | 	mov	arg02, local03
1d148     10 17 02 F6 | 	mov	arg03, local02
1d14c     13 19 02 F6 | 	mov	arg04, local05
1d150     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1d154                 | ' fastline(x1,x2,y2,c)
1d154     0F 13 02 F6 | 	mov	arg01, local01
1d158     11 15 02 F6 | 	mov	arg02, local03
1d15c     12 17 02 F6 | 	mov	arg03, local04
1d160     13 19 02 F6 | 	mov	arg04, local05
1d164     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1d168                 | ' line(x1,y1,x1,y2,c)
1d168     0F 13 02 F6 | 	mov	arg01, local01
1d16c     10 15 02 F6 | 	mov	arg02, local02
1d170     0F 17 02 F6 | 	mov	arg03, local01
1d174     12 19 02 F6 | 	mov	arg04, local04
1d178     13 1B 02 F6 | 	mov	arg05, local05
1d17c                 | ' draw(x1,y1,x2,y2,c)
1d17c     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1d180                 | ' line(x2,y1,x2,y2,c)
1d180     11 13 02 F6 | 	mov	arg01, local03
1d184     10 15 02 F6 | 	mov	arg02, local02
1d188     11 17 02 F6 | 	mov	arg03, local03
1d18c     12 19 02 F6 | 	mov	arg04, local04
1d190     13 1B 02 F6 | 	mov	arg05, local05
1d194                 | ' draw(x1,y1,x2,y2,c)
1d194     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1d198     A7 F0 03 F6 | 	mov	ptra, fp
1d19c     B2 00 A0 FD | 	call	#popregs_
1d1a0                 | _hg010b_spin2_frame_ret
1d1a0     2D 00 64 FD | 	ret
1d1a4                 | 
1d1a4                 | ' 
1d1a4                 | ' '-- A box (a filled rectangle) ----------------------------------------
1d1a4                 | ' 
1d1a4                 | ' pub box(x1,y1,x2,y2,c) |yy
1d1a4                 | _hg010b_spin2_box
1d1a4     06 4A 05 F6 | 	mov	COUNT_, #6
1d1a8     A8 00 A0 FD | 	call	#pushregs_
1d1ac     09 1F 02 F6 | 	mov	local01, arg01
1d1b0     0A 21 02 F6 | 	mov	local02, arg02
1d1b4     0B 23 02 F6 | 	mov	local03, arg03
1d1b8     0C 25 02 F6 | 	mov	local04, arg04
1d1bc     0D 27 02 F6 | 	mov	local05, arg05
1d1c0                 | ' 
1d1c0                 | ' repeat yy from y1 to y2
1d1c0     10 25 52 F2 | 	cmps	local04, local02 wc
1d1c4     01 28 86 F6 | 	negc	local06, #1
1d1c8     14 25 02 F1 | 	add	local04, local06
1d1cc                 | LR__2290
1d1cc                 | '   fastline(x1,x2,yy,c)
1d1cc     0F 13 02 F6 | 	mov	arg01, local01
1d1d0     11 15 02 F6 | 	mov	arg02, local03
1d1d4     13 19 02 F6 | 	mov	arg04, local05
1d1d8     10 17 02 F6 | 	mov	arg03, local02
1d1dc     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1d1e0     14 21 02 F1 | 	add	local02, local06
1d1e4     12 21 0A F2 | 	cmp	local02, local04 wz
1d1e8     E0 FF 9F 5D |  if_ne	jmp	#LR__2290
1d1ec     A7 F0 03 F6 | 	mov	ptra, fp
1d1f0     B2 00 A0 FD | 	call	#popregs_
1d1f4                 | _hg010b_spin2_box_ret
1d1f4     2D 00 64 FD | 	ret
1d1f8                 | 
1d1f8                 | '       
1d1f8                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1d1f8                 | _hg010b_spin2_putcharxycgf
1d1f8                 | ' 
1d1f8                 | '  
1d1f8                 | ' repeat yy from 0 to 15
1d1f8     00 00 06 F6 | 	mov	_var01, #0
1d1fc     97 8C 48 FB | 	callpa	#(@LR__2302-@LR__2300)>>2,fcache_load_ptr_
1d200                 | LR__2300
1d200                 | ' 
1d200                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1d200     95 E4 05 F1 | 	add	objptr, #149
1d204     F2 02 02 FB | 	rdlong	_var02, objptr
1d208     0A 02 66 F0 | 	shl	_var02, #10
1d20c     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1d210     01 05 02 F1 | 	add	_var03, _var02
1d214     0B 03 02 F6 | 	mov	_var02, arg03
1d218     04 02 66 F0 | 	shl	_var02, #4
1d21c     01 05 02 F1 | 	add	_var03, _var02
1d220     00 05 02 F1 | 	add	_var03, _var01
1d224     02 05 C2 FA | 	rdbyte	_var03, _var03
1d228                 | '   asm
1d228     00 04 0E F4 | 	testb	_var03, #0 wz
1d22c     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1d230     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1d234     01 04 0E F4 | 	testb	_var03, #1 wz
1d238     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1d23c     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1d240     02 04 0E F4 | 	testb	_var03, #2 wz
1d244     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1d248     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1d24c     03 04 0E F4 | 	testb	_var03, #3 wz
1d250     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1d254     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1d258     04 04 0E F4 | 	testb	_var03, #4 wz
1d25c     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1d260     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1d264     05 04 0E F4 | 	testb	_var03, #5 wz
1d268     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1d26c     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1d270     06 04 0E F4 | 	testb	_var03, #6 wz
1d274     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1d278     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1d27c     07 04 0E F4 | 	testb	_var03, #7 wz
1d280     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1d284     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1d288                 | '   
1d288                 | '   ccc[0]:=c1
1d288     99 E5 05 F1 | 	add	objptr, #409
1d28c     F2 06 62 FC | 	wrlong	_var04, objptr
1d290                 | '   ccc[1]:=c2 
1d290     04 E4 05 F1 | 	add	objptr, #4
1d294     F2 08 62 FC | 	wrlong	_var05, objptr
1d298                 | '   long[mailbox0][2]:=8
1d298     49 E4 85 F1 | 	sub	objptr, #73
1d29c     F2 04 02 FB | 	rdlong	_var03, objptr
1d2a0     08 04 06 F1 | 	add	_var03, #8
1d2a4     02 11 68 FC | 	wrlong	#8, _var03
1d2a8                 | '   long[mailbox0][1]:=@ccc
1d2a8     45 E4 05 F1 | 	add	objptr, #69
1d2ac     F2 04 02 F6 | 	mov	_var03, objptr
1d2b0     45 E4 85 F1 | 	sub	objptr, #69
1d2b4     F2 02 02 FB | 	rdlong	_var02, objptr
1d2b8     04 02 06 F1 | 	add	_var02, #4
1d2bc     01 05 62 FC | 	wrlong	_var03, _var02
1d2c0                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1d2c0     0C E5 85 F1 | 	sub	objptr, #268
1d2c4     F2 04 02 FB | 	rdlong	_var03, objptr
1d2c8     0A 03 02 F6 | 	mov	_var02, arg02
1d2cc     00 03 02 F1 | 	add	_var02, _var01
1d2d0     0A 02 66 F0 | 	shl	_var02, #10
1d2d4     09 0B 02 F6 | 	mov	_var06, arg01
1d2d8     02 0A 66 F0 | 	shl	_var06, #2
1d2dc     05 03 02 F1 | 	add	_var02, _var06
1d2e0     01 05 02 F1 | 	add	_var03, _var02
1d2e4     00 00 78 FF 
1d2e8     00 04 06 F1 | 	add	_var03, ##-268435456
1d2ec     0C E5 05 F1 | 	add	objptr, #268
1d2f0     F2 0A 02 FB | 	rdlong	_var06, objptr
1d2f4     05 05 62 FC | 	wrlong	_var03, _var06
1d2f8                 | '   repeat
1d2f8                 | LR__2301
1d2f8     F2 04 02 FB | 	rdlong	_var03, objptr
1d2fc     02 03 02 FB | 	rdlong	_var02, _var03
1d300     00 02 56 F2 | 	cmps	_var02, #0 wc
1d304     F0 FF 9F CD |  if_b	jmp	#LR__2301
1d308     E9 E5 85 F1 | 	sub	objptr, #489
1d30c     01 00 06 F1 | 	add	_var01, #1
1d310     10 00 56 F2 | 	cmps	_var01, #16 wc
1d314     E8 FE 9F CD |  if_b	jmp	#LR__2300
1d318                 | LR__2302
1d318                 | _hg010b_spin2_putcharxycgf_ret
1d318     2D 00 64 FD | 	ret
1d31c                 | 
1d31c                 | ' 
1d31c                 | ' 
1d31c                 | ' '**********************************************************************r***
1d31c                 | ' '                                                                        *
1d31c                 | ' ' Font related functions                                                 *
1d31c                 | ' '                                                                        *
1d31c                 | ' '*************************************************************************
1d31c                 | ' 
1d31c                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1d31c                 | ' 
1d31c                 | ' pub setfontfamily(afontnum)
1d31c                 | _hg010b_spin2_setfontfamily
1d31c                 | ' 
1d31c                 | ' font_family:=afontnum
1d31c     95 E4 05 F1 | 	add	objptr, #149
1d320     F2 12 62 FC | 	wrlong	arg01, objptr
1d324     95 E4 85 F1 | 	sub	objptr, #149
1d328                 | ' 'if afontnum==8
1d328                 | ' '  font_ptr:=@amiga_font
1d328                 | ' 
1d328                 | ' if afontnum==4
1d328     04 12 0E F2 | 	cmp	arg01, #4 wz
1d32c                 | '   font_ptr:=@st_font
1d32c     08 00 00 AF 
1d330     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1d334     08 E4 05 A1 |  if_e	add	objptr, #8
1d338     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1d33c     08 E4 85 A1 |  if_e	sub	objptr, #8
1d340     08 00 00 AF 
1d344     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1d348                 | ' if afontnum==0
1d348     00 12 0E F2 | 	cmp	arg01, #0 wz
1d34c                 | '   font_ptr:=@vga_font
1d34c     08 E4 05 A1 |  if_e	add	objptr, #8
1d350     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1d354     08 E4 85 A1 |  if_e	sub	objptr, #8
1d358                 | _hg010b_spin2_setfontfamily_ret
1d358     2D 00 64 FD | 	ret
1d35c                 | 
1d35c                 | ' 
1d35c                 | ' '*************************************************************************
1d35c                 | ' '                                                                        *
1d35c                 | ' '  Cursor functions                                                      *
1d35c                 | ' '                                                                        *
1d35c                 | ' '*************************************************************************
1d35c                 | ' 
1d35c                 | ' 
1d35c                 | ' pub setcursorpos(x,y)
1d35c                 | _hg010b_spin2_setcursorpos
1d35c                 | ' 
1d35c                 | ' ''---------- Set the (x,y) position of cursor
1d35c                 | ' 
1d35c                 | ' cursor_x:=x
1d35c     3C E4 05 F1 | 	add	objptr, #60
1d360     F2 12 52 FC | 	wrword	arg01, objptr
1d364                 | ' cursor_y:=y
1d364     02 E4 05 F1 | 	add	objptr, #2
1d368     F2 14 42 FC | 	wrbyte	arg02, objptr
1d36c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1d36c     02 E4 85 F1 | 	sub	objptr, #2
1d370     F2 14 E2 FA | 	rdword	arg02, objptr
1d374     02 14 66 F0 | 	shl	arg02, #2
1d378     02 E4 05 F1 | 	add	objptr, #2
1d37c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d380     3E E4 85 F1 | 	sub	objptr, #62
1d384     04 16 66 F0 | 	shl	arg03, #4
1d388     04 16 06 F1 | 	add	arg03, #4
1d38c     11 12 06 F6 | 	mov	arg01, #17
1d390     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1d394                 | _hg010b_spin2_setcursorpos_ret
1d394     2D 00 64 FD | 	ret
1d398                 | 
1d398                 | ' 
1d398                 | ' pub setcursorx(x)
1d398                 | _hg010b_spin2_setcursorx
1d398                 | ' cursor_x:=x
1d398     3C E4 05 F1 | 	add	objptr, #60
1d39c     F2 12 52 FC | 	wrword	arg01, objptr
1d3a0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1d3a0     F2 14 E2 FA | 	rdword	arg02, objptr
1d3a4     02 14 66 F0 | 	shl	arg02, #2
1d3a8     02 E4 05 F1 | 	add	objptr, #2
1d3ac     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d3b0     3E E4 85 F1 | 	sub	objptr, #62
1d3b4     04 16 66 F0 | 	shl	arg03, #4
1d3b8     04 16 06 F1 | 	add	arg03, #4
1d3bc     11 12 06 F6 | 	mov	arg01, #17
1d3c0     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1d3c4                 | _hg010b_spin2_setcursorx_ret
1d3c4     2D 00 64 FD | 	ret
1d3c8                 | 
1d3c8                 | ' 
1d3c8                 | ' pub setcursory(y) 
1d3c8                 | _hg010b_spin2_setcursory
1d3c8                 | ' cursor_y:=y
1d3c8     3E E4 05 F1 | 	add	objptr, #62
1d3cc     F2 12 42 FC | 	wrbyte	arg01, objptr
1d3d0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
1d3d0     02 E4 85 F1 | 	sub	objptr, #2
1d3d4     F2 14 E2 FA | 	rdword	arg02, objptr
1d3d8     02 14 66 F0 | 	shl	arg02, #2
1d3dc     02 E4 05 F1 | 	add	objptr, #2
1d3e0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d3e4     3E E4 85 F1 | 	sub	objptr, #62
1d3e8     04 16 66 F0 | 	shl	arg03, #4
1d3ec     04 16 06 F1 | 	add	arg03, #4
1d3f0     11 12 06 F6 | 	mov	arg01, #17
1d3f4     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1d3f8                 | _hg010b_spin2_setcursory_ret
1d3f8     2D 00 64 FD | 	ret
1d3fc                 | 
1d3fc                 | ' 
1d3fc                 | ' '*************************************************************************
1d3fc                 | ' '                                                                        *
1d3fc                 | ' '  VBlank functions                                                      *
1d3fc                 | ' '                                                                        *
1d3fc                 | ' '*************************************************************************
1d3fc                 | ' 
1d3fc                 | ' pub waitvbl(amount) | i
1d3fc                 | _hg010b_spin2_waitvbl
1d3fc     03 4A 05 F6 | 	mov	COUNT_, #3
1d400     A8 00 A0 FD | 	call	#pushregs_
1d404     09 1F 02 F6 | 	mov	local01, arg01
1d408                 | ' 
1d408                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1d408                 | ' 
1d408                 | ' repeat i from 1 to amount
1d408     01 20 06 F6 | 	mov	local02, #1
1d40c     01 1E 56 F2 | 	cmps	local01, #1 wc
1d410     01 22 86 F6 | 	negc	local03, #1
1d414     11 1F 02 F1 | 	add	local01, local03
1d418                 | LR__2310
1d418                 | '   repeat until vblank==0
1d418                 | LR__2311
1d418     49 E4 05 F1 | 	add	objptr, #73
1d41c     F2 12 0A FB | 	rdlong	arg01, objptr wz
1d420     49 E4 85 F1 | 	sub	objptr, #73
1d424     0C 00 90 AD |  if_e	jmp	#LR__2312
1d428                 | '     waitus(100)
1d428     64 12 06 F6 | 	mov	arg01, #100
1d42c     44 1A B0 FD | 	call	#__system___waitus
1d430     E4 FF 9F FD | 	jmp	#LR__2311
1d434                 | LR__2312
1d434                 | '   repeat until vblank==1
1d434                 | LR__2313
1d434     49 E4 05 F1 | 	add	objptr, #73
1d438     F2 12 02 FB | 	rdlong	arg01, objptr
1d43c     49 E4 85 F1 | 	sub	objptr, #73
1d440     01 12 0E F2 | 	cmp	arg01, #1 wz
1d444     0C 00 90 AD |  if_e	jmp	#LR__2314
1d448                 | '     waitus(100)
1d448     64 12 06 F6 | 	mov	arg01, #100
1d44c     24 1A B0 FD | 	call	#__system___waitus
1d450     E0 FF 9F FD | 	jmp	#LR__2313
1d454                 | LR__2314
1d454     11 21 02 F1 | 	add	local02, local03
1d458     0F 21 0A F2 | 	cmp	local02, local01 wz
1d45c     B8 FF 9F 5D |  if_ne	jmp	#LR__2310
1d460     A7 F0 03 F6 | 	mov	ptra, fp
1d464     B2 00 A0 FD | 	call	#popregs_
1d468                 | _hg010b_spin2_waitvbl_ret
1d468     2D 00 64 FD | 	ret
1d46c                 | 
1d46c                 | ' 
1d46c                 | ' 
1d46c                 | ' pub cls(fc,bc)   :c,i
1d46c                 | _hg010b_spin2_cls
1d46c     02 4A 05 F6 | 	mov	COUNT_, #2
1d470     A8 00 A0 FD | 	call	#pushregs_
1d474     09 1F 02 F6 | 	mov	local01, arg01
1d478     0A 21 02 F6 | 	mov	local02, arg02
1d47c                 | ' 
1d47c                 | ' c:=bc
1d47c                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1d47c     DD E4 05 F1 | 	add	objptr, #221
1d480     F2 12 02 FB | 	rdlong	arg01, objptr
1d484     A5 E4 85 F1 | 	sub	objptr, #165
1d488     F2 16 02 FB | 	rdlong	arg03, objptr
1d48c     02 16 66 F0 | 	shl	arg03, #2
1d490     10 15 02 F6 | 	mov	arg02, local02
1d494     00 18 06 F6 | 	mov	arg04, #0
1d498     01 1A 06 F6 | 	mov	arg05, #1
1d49c     0B 00 00 FF 
1d4a0     94 E4 05 F1 | 	add	objptr, ##5780
1d4a4     64 0B B0 FD | 	call	#_psram_spin2_fill
1d4a8                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1d4a8     0B 00 00 FF 
1d4ac     C8 E4 85 F1 | 	sub	objptr, ##5832
1d4b0     F2 12 02 FB | 	rdlong	arg01, objptr
1d4b4     04 E4 85 F1 | 	sub	objptr, #4
1d4b8     F2 16 02 FB | 	rdlong	arg03, objptr
1d4bc     09 17 82 F1 | 	sub	arg03, arg01
1d4c0     20 14 06 F6 | 	mov	arg02, #32
1d4c4     00 18 06 F6 | 	mov	arg04, #0
1d4c8     01 1A 06 F6 | 	mov	arg05, #1
1d4cc     0B 00 00 FF 
1d4d0     CC E4 05 F1 | 	add	objptr, ##5836
1d4d4     34 0B B0 FD | 	call	#_psram_spin2_fill
1d4d8                 | ' setwritecolors(fc,bc)
1d4d8                 | ' 
1d4d8                 | ' write_color:=ff
1d4d8     0B 00 00 FF 
1d4dc     8B E4 85 F1 | 	sub	objptr, ##5771
1d4e0     F2 1E 62 FC | 	wrlong	local01, objptr
1d4e4                 | ' write_background:=bb
1d4e4     04 E4 05 F1 | 	add	objptr, #4
1d4e8     F2 20 62 FC | 	wrlong	local02, objptr
1d4ec                 | ' cursor_x:=0
1d4ec     09 E4 85 F1 | 	sub	objptr, #9
1d4f0     F2 00 58 FC | 	wrword	#0, objptr
1d4f4                 | ' cursor_y:=0
1d4f4     02 E4 05 F1 | 	add	objptr, #2
1d4f8     F2 00 48 FC | 	wrbyte	#0, objptr
1d4fc                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1d4fc     02 E4 85 F1 | 	sub	objptr, #2
1d500     F2 14 E2 FA | 	rdword	arg02, objptr
1d504     02 14 66 F0 | 	shl	arg02, #2
1d508     02 E4 05 F1 | 	add	objptr, #2
1d50c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d510     3E E4 85 F1 | 	sub	objptr, #62
1d514     04 16 66 F0 | 	shl	arg03, #4
1d518     04 16 06 F1 | 	add	arg03, #4
1d51c     11 12 06 F6 | 	mov	arg01, #17
1d520     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
1d524                 | ' setcursorcolor(fc)
1d524     0F 13 02 F6 | 	mov	arg01, local01
1d528     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
1d52c     10 FB 01 F6 | 	mov	result1, local02
1d530     00 FC 05 F6 | 	mov	result2, #0
1d534     A7 F0 03 F6 | 	mov	ptra, fp
1d538     B2 00 A0 FD | 	call	#popregs_
1d53c                 | _hg010b_spin2_cls_ret
1d53c     2D 00 64 FD | 	ret
1d540                 | 
1d540                 | ' 
1d540                 | ' ''---------- Output a char at the cursor position, move the cursor 
1d540                 | ' 
1d540                 | ' pub putchar(achar) | c,x,y,l,newcpl
1d540                 | _hg010b_spin2_putchar
1d540     02 4A 05 F6 | 	mov	COUNT_, #2
1d544     A8 00 A0 FD | 	call	#pushregs_
1d548     09 1F 02 F6 | 	mov	local01, arg01
1d54c                 | ' 
1d54c                 | ' if achar==10
1d54c     0A 1E 0E F2 | 	cmp	local01, #10 wz
1d550                 | '   crlf()
1d550     A4 05 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1d554                 | ' if achar==9
1d554     09 1E 0E F2 | 	cmp	local01, #9 wz
1d558     18 00 90 5D |  if_ne	jmp	#LR__2320
1d55c                 | '   cursor_x:=(cursor_x& %11110000)+16
1d55c     3C E4 05 F1 | 	add	objptr, #60
1d560     F2 16 E2 FA | 	rdword	arg03, objptr
1d564     F0 16 06 F5 | 	and	arg03, #240
1d568     10 16 06 F1 | 	add	arg03, #16
1d56c     F2 16 52 FC | 	wrword	arg03, objptr
1d570     3C E4 85 F1 | 	sub	objptr, #60
1d574                 | LR__2320
1d574                 | '   
1d574                 | ' if (achar<>9) && (achar<>10) 
1d574     09 1E 0E F2 | 	cmp	local01, #9 wz
1d578     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1d57c     A8 00 90 AD |  if_e	jmp	#LR__2321
1d580                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1d580     3C E4 05 F1 | 	add	objptr, #60
1d584     F2 12 E2 FA | 	rdword	arg01, objptr
1d588     02 E4 05 F1 | 	add	objptr, #2
1d58c     F2 14 C2 FA | 	rdbyte	arg02, objptr
1d590     04 14 66 F0 | 	shl	arg02, #4
1d594     04 14 06 F1 | 	add	arg02, #4
1d598     03 E4 05 F1 | 	add	objptr, #3
1d59c     F2 18 02 FB | 	rdlong	arg04, objptr
1d5a0     04 E4 05 F1 | 	add	objptr, #4
1d5a4     F2 1A 02 FB | 	rdlong	arg05, objptr
1d5a8     45 E4 85 F1 | 	sub	objptr, #69
1d5ac     0F 17 02 F6 | 	mov	arg03, local01
1d5b0     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1d5b4     04 E4 05 F1 | 	add	objptr, #4
1d5b8     F2 12 02 FB | 	rdlong	arg01, objptr
1d5bc     10 00 00 FF 
1d5c0     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1d5c4     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1d5c8     3A E4 05 F1 | 	add	objptr, #58
1d5cc     F2 1A C2 FA | 	rdbyte	arg05, objptr
1d5d0     0D 17 02 FD | 	qmul	arg03, arg05
1d5d4                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1d5d4     10 00 00 FF 
1d5d8     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1d5dc     02 E4 85 F1 | 	sub	objptr, #2
1d5e0     F2 20 E2 FA | 	rdword	local02, objptr
1d5e4     01 20 46 F0 | 	shr	local02, #1
1d5e8     0F 15 02 F6 | 	mov	arg02, local01
1d5ec     01 16 06 F6 | 	mov	arg03, #1
1d5f0     00 18 06 F6 | 	mov	arg04, #0
1d5f4     01 1A 06 F6 | 	mov	arg05, #1
1d5f8     0B 00 00 FF 
1d5fc     90 E4 05 F1 | 	add	objptr, ##5776
1d600     18 1E 62 FD | 	getqx	local01
1d604     10 1F 02 F1 | 	add	local01, local02
1d608     0F 13 02 F1 | 	add	arg01, local01
1d60c     FC 09 B0 FD | 	call	#_psram_spin2_fill
1d610                 | '   cursor_x+=2
1d610     0B 00 00 FF 
1d614     90 E4 85 F1 | 	sub	objptr, ##5776
1d618     F2 20 E2 FA | 	rdword	local02, objptr
1d61c     02 20 06 F1 | 	add	local02, #2
1d620     F2 20 52 FC | 	wrword	local02, objptr
1d624     3C E4 85 F1 | 	sub	objptr, #60
1d628                 | LR__2321
1d628                 | ' 
1d628                 | ' if cursor_x>=256
1d628     3C E4 05 F1 | 	add	objptr, #60
1d62c     F2 20 E2 FA | 	rdword	local02, objptr
1d630     3C E4 85 F1 | 	sub	objptr, #60
1d634     00 21 56 F2 | 	cmps	local02, #256 wc
1d638     64 00 90 CD |  if_b	jmp	#LR__2323
1d63c                 | '   cursor_x:=0
1d63c     3C E4 05 F1 | 	add	objptr, #60
1d640     F2 00 58 FC | 	wrword	#0, objptr
1d644                 | '   cursor_y+=1
1d644     02 E4 05 F1 | 	add	objptr, #2
1d648     F2 20 C2 FA | 	rdbyte	local02, objptr
1d64c     01 20 06 F1 | 	add	local02, #1
1d650     F2 20 42 FC | 	wrbyte	local02, objptr
1d654                 | '   if cursor_y>st_lines-1
1d654     C3 E4 05 F1 | 	add	objptr, #195
1d658     F2 20 02 FB | 	rdlong	local02, objptr
1d65c     01 20 86 F1 | 	sub	local02, #1
1d660     C3 E4 85 F1 | 	sub	objptr, #195
1d664     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d668     3E E4 85 F1 | 	sub	objptr, #62
1d66c     10 17 5A F2 | 	cmps	arg03, local02 wcz
1d670     2C 00 90 ED |  if_be	jmp	#LR__2322
1d674                 | '     scrollup2()
1d674     00 12 06 F6 | 	mov	arg01, #0
1d678     01 00 00 FF 
1d67c     58 14 06 F6 | 	mov	arg02, ##600
1d680     10 16 06 F6 | 	mov	arg03, #16
1d684     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
1d688                 | '     cursor_y:=st_lines-1
1d688     01 E5 05 F1 | 	add	objptr, #257
1d68c     F2 20 02 FB | 	rdlong	local02, objptr
1d690     01 20 86 F1 | 	sub	local02, #1
1d694     C3 E4 85 F1 | 	sub	objptr, #195
1d698     F2 20 42 FC | 	wrbyte	local02, objptr
1d69c     3E E4 85 F1 | 	sub	objptr, #62
1d6a0                 | LR__2322
1d6a0                 | LR__2323
1d6a0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1d6a0     3C E4 05 F1 | 	add	objptr, #60
1d6a4     F2 14 E2 FA | 	rdword	arg02, objptr
1d6a8     02 14 66 F0 | 	shl	arg02, #2
1d6ac     02 E4 05 F1 | 	add	objptr, #2
1d6b0     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d6b4     3E E4 85 F1 | 	sub	objptr, #62
1d6b8     04 16 66 F0 | 	shl	arg03, #4
1d6bc     04 16 06 F1 | 	add	arg03, #4
1d6c0     11 12 06 F6 | 	mov	arg01, #17
1d6c4     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1d6c8     A7 F0 03 F6 | 	mov	ptra, fp
1d6cc     B2 00 A0 FD | 	call	#popregs_
1d6d0                 | _hg010b_spin2_putchar_ret
1d6d0     2D 00 64 FD | 	ret
1d6d4                 | 
1d6d4                 | '     
1d6d4                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1d6d4                 | ' 
1d6d4                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1d6d4                 | _hg010b_spin2_putchar2
1d6d4     02 4A 05 F6 | 	mov	COUNT_, #2
1d6d8     A8 00 A0 FD | 	call	#pushregs_
1d6dc     09 1F 02 F6 | 	mov	local01, arg01
1d6e0                 | ' 
1d6e0                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1d6e0     3C E4 05 F1 | 	add	objptr, #60
1d6e4     F2 12 E2 FA | 	rdword	arg01, objptr
1d6e8     02 E4 05 F1 | 	add	objptr, #2
1d6ec     F2 14 C2 FA | 	rdbyte	arg02, objptr
1d6f0     04 14 66 F0 | 	shl	arg02, #4
1d6f4     04 14 06 F1 | 	add	arg02, #4
1d6f8     03 E4 05 F1 | 	add	objptr, #3
1d6fc     F2 18 02 FB | 	rdlong	arg04, objptr
1d700     04 E4 05 F1 | 	add	objptr, #4
1d704     F2 1A 02 FB | 	rdlong	arg05, objptr
1d708     45 E4 85 F1 | 	sub	objptr, #69
1d70c     0F 17 02 F6 | 	mov	arg03, local01
1d710     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
1d714     04 E4 05 F1 | 	add	objptr, #4
1d718     F2 12 02 FB | 	rdlong	arg01, objptr
1d71c     10 00 00 FF 
1d720     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1d724     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1d728     3A E4 05 F1 | 	add	objptr, #58
1d72c     F2 1A C2 FA | 	rdbyte	arg05, objptr
1d730     0D 17 02 FD | 	qmul	arg03, arg05
1d734                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1d734     10 00 00 FF 
1d738     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1d73c     02 E4 85 F1 | 	sub	objptr, #2
1d740     F2 20 E2 FA | 	rdword	local02, objptr
1d744     01 20 46 F0 | 	shr	local02, #1
1d748     0F 15 02 F6 | 	mov	arg02, local01
1d74c     01 16 06 F6 | 	mov	arg03, #1
1d750     00 18 06 F6 | 	mov	arg04, #0
1d754     01 1A 06 F6 | 	mov	arg05, #1
1d758     0B 00 00 FF 
1d75c     90 E4 05 F1 | 	add	objptr, ##5776
1d760     18 1E 62 FD | 	getqx	local01
1d764     10 1F 02 F1 | 	add	local01, local02
1d768     0F 13 02 F1 | 	add	arg01, local01
1d76c     9C 08 B0 FD | 	call	#_psram_spin2_fill
1d770                 | ' 
1d770                 | ' cursor_x+=2
1d770     0B 00 00 FF 
1d774     90 E4 85 F1 | 	sub	objptr, ##5776
1d778     F2 20 E2 FA | 	rdword	local02, objptr
1d77c     02 20 06 F1 | 	add	local02, #2
1d780     F2 20 52 FC | 	wrword	local02, objptr
1d784                 | ' if cursor_x>=256
1d784     F2 20 E2 FA | 	rdword	local02, objptr
1d788     3C E4 85 F1 | 	sub	objptr, #60
1d78c     00 21 56 F2 | 	cmps	local02, #256 wc
1d790     64 00 90 CD |  if_b	jmp	#LR__2331
1d794                 | '   cursor_x:=0
1d794     3C E4 05 F1 | 	add	objptr, #60
1d798     F2 00 58 FC | 	wrword	#0, objptr
1d79c                 | '   cursor_y+=1
1d79c     02 E4 05 F1 | 	add	objptr, #2
1d7a0     F2 20 C2 FA | 	rdbyte	local02, objptr
1d7a4     01 20 06 F1 | 	add	local02, #1
1d7a8     F2 20 42 FC | 	wrbyte	local02, objptr
1d7ac                 | '   if cursor_y>st_lines-1
1d7ac     C3 E4 05 F1 | 	add	objptr, #195
1d7b0     F2 20 02 FB | 	rdlong	local02, objptr
1d7b4     01 20 86 F1 | 	sub	local02, #1
1d7b8     C3 E4 85 F1 | 	sub	objptr, #195
1d7bc     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d7c0     3E E4 85 F1 | 	sub	objptr, #62
1d7c4     10 17 5A F2 | 	cmps	arg03, local02 wcz
1d7c8     2C 00 90 ED |  if_be	jmp	#LR__2330
1d7cc                 | '     scrollup2()
1d7cc     00 12 06 F6 | 	mov	arg01, #0
1d7d0     01 00 00 FF 
1d7d4     58 14 06 F6 | 	mov	arg02, ##600
1d7d8     10 16 06 F6 | 	mov	arg03, #16
1d7dc     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
1d7e0                 | '     cursor_y:=st_lines-1
1d7e0     01 E5 05 F1 | 	add	objptr, #257
1d7e4     F2 20 02 FB | 	rdlong	local02, objptr
1d7e8     01 20 86 F1 | 	sub	local02, #1
1d7ec     C3 E4 85 F1 | 	sub	objptr, #195
1d7f0     F2 20 42 FC | 	wrbyte	local02, objptr
1d7f4     3E E4 85 F1 | 	sub	objptr, #62
1d7f8                 | LR__2330
1d7f8                 | LR__2331
1d7f8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
1d7f8     3C E4 05 F1 | 	add	objptr, #60
1d7fc     F2 14 E2 FA | 	rdword	arg02, objptr
1d800     02 14 66 F0 | 	shl	arg02, #2
1d804     02 E4 05 F1 | 	add	objptr, #2
1d808     F2 16 C2 FA | 	rdbyte	arg03, objptr
1d80c     3E E4 85 F1 | 	sub	objptr, #62
1d810     04 16 66 F0 | 	shl	arg03, #4
1d814     04 16 06 F1 | 	add	arg03, #4
1d818     11 12 06 F6 | 	mov	arg01, #17
1d81c     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
1d820     A7 F0 03 F6 | 	mov	ptra, fp
1d824     B2 00 A0 FD | 	call	#popregs_
1d828                 | _hg010b_spin2_putchar2_ret
1d828     2D 00 64 FD | 	ret
1d82c                 | 
1d82c                 | ' ''--------- Output a string at the cursor position, move the cursor  
1d82c                 | ' 
1d82c                 | ' pub write(text) | iii,c,ncx,ncy
1d82c                 | _hg010b_spin2_write
1d82c     04 4A 05 F6 | 	mov	COUNT_, #4
1d830     A8 00 A0 FD | 	call	#pushregs_
1d834     09 1F 02 F6 | 	mov	local01, arg01
1d838                 | ' 
1d838                 | ' repeat iii from 0 to strsize(text)-1
1d838     00 20 06 F6 | 	mov	local02, #0
1d83c     0F 13 02 F6 | 	mov	arg01, local01
1d840     09 23 02 F6 | 	mov	local03, arg01
1d844     97 06 48 FB | 	callpa	#(@LR__2341-@LR__2340)>>2,fcache_load_ptr_
1d848                 | LR__2340
1d848     11 FB C9 FA | 	rdbyte	result1, local03 wz
1d84c     01 22 06 51 |  if_ne	add	local03, #1
1d850     F4 FF 9F 5D |  if_ne	jmp	#LR__2340
1d854                 | LR__2341
1d854     09 23 82 F1 | 	sub	local03, arg01
1d858     01 22 86 F1 | 	sub	local03, #1
1d85c     00 22 56 F2 | 	cmps	local03, #0 wc
1d860     01 24 86 F6 | 	negc	local04, #1
1d864     12 23 02 F1 | 	add	local03, local04
1d868                 | LR__2342
1d868                 | '   putchar2(byte[text+iii])
1d868     0F 13 02 F6 | 	mov	arg01, local01
1d86c     10 13 02 F1 | 	add	arg01, local02
1d870     09 13 C2 FA | 	rdbyte	arg01, arg01
1d874     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
1d878     12 21 02 F1 | 	add	local02, local04
1d87c     11 21 0A F2 | 	cmp	local02, local03 wz
1d880     E4 FF 9F 5D |  if_ne	jmp	#LR__2342
1d884     A7 F0 03 F6 | 	mov	ptra, fp
1d888     B2 00 A0 FD | 	call	#popregs_
1d88c                 | _hg010b_spin2_write_ret
1d88c     2D 00 64 FD | 	ret
1d890                 | 
1d890                 | '    
1d890                 | ' ' a version for text scrolling in Basic shifted 4 lines down
1d890                 | ' 
1d890                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
1d890                 | _hg010b_spin2_scrollup2
1d890     03 4A 05 F6 | 	mov	COUNT_, #3
1d894     A8 00 A0 FD | 	call	#pushregs_
1d898                 | ' 	
1d898                 | ' repeat i from 4 to 579 
1d898     04 1E 06 F6 | 	mov	local01, #4
1d89c                 | LR__2350
1d89c     F9 E4 05 F1 | 	add	objptr, #249
1d8a0     F2 1A 02 FB | 	rdlong	arg05, objptr
1d8a4     1C E4 85 F1 | 	sub	objptr, #28
1d8a8     F2 14 02 FB | 	rdlong	arg02, objptr
1d8ac     0F 19 02 F6 | 	mov	arg04, local01
1d8b0     10 18 06 F1 | 	add	arg04, #16
1d8b4     02 18 66 F0 | 	shl	arg04, #2
1d8b8     14 E4 05 F1 | 	add	objptr, #20
1d8bc     F2 16 02 FB | 	rdlong	arg03, objptr
1d8c0     0B 19 02 FD | 	qmul	arg04, arg03
1d8c4                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1d8c4     F6 03 00 FF 
1d8c8     00 12 06 F6 | 	mov	arg01, ##519168
1d8cc     0D 13 82 F1 | 	sub	arg01, arg05
1d8d0     02 16 66 F0 | 	shl	arg03, #2
1d8d4     0A 00 00 FF 
1d8d8     DB E5 05 F1 | 	add	objptr, ##5595
1d8dc     18 1A 62 FD | 	getqx	arg05
1d8e0     0D 15 02 F1 | 	add	arg02, arg05
1d8e4     EC 05 B0 FD | 	call	#_psram_spin2_read1
1d8e8     0A 00 00 FF 
1d8ec     D3 E5 85 F1 | 	sub	objptr, ##5587
1d8f0     F2 1A 02 FB | 	rdlong	arg05, objptr
1d8f4     1C E4 85 F1 | 	sub	objptr, #28
1d8f8     F2 14 02 FB | 	rdlong	arg02, objptr
1d8fc     0F 19 02 F6 | 	mov	arg04, local01
1d900     02 18 66 F0 | 	shl	arg04, #2
1d904     14 E4 05 F1 | 	add	objptr, #20
1d908     F2 16 02 FB | 	rdlong	arg03, objptr
1d90c     0B 19 02 FD | 	qmul	arg04, arg03
1d910                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1d910     F6 03 00 FF 
1d914     00 12 06 F6 | 	mov	arg01, ##519168
1d918     0D 13 82 F1 | 	sub	arg01, arg05
1d91c     02 16 66 F0 | 	shl	arg03, #2
1d920     0A 00 00 FF 
1d924     DB E5 05 F1 | 	add	objptr, ##5595
1d928     18 1A 62 FD | 	getqx	arg05
1d92c     0D 15 02 F1 | 	add	arg02, arg05
1d930     3C 06 B0 FD | 	call	#_psram_spin2_write
1d934     0B 00 00 FF 
1d938     CC E4 85 F1 | 	sub	objptr, ##5836
1d93c     01 1E 06 F1 | 	add	local01, #1
1d940     01 00 00 FF 
1d944     44 1E 16 F2 | 	cmp	local01, ##580 wc
1d948     50 FF 9F CD |  if_b	jmp	#LR__2350
1d94c                 | ' 
1d94c                 | ' repeat i from 580 to 599
1d94c     01 00 00 FF 
1d950     44 1E 06 F6 | 	mov	local01, ##580
1d954                 | LR__2351
1d954                 | '    fastline(0,1023,i,write_background)   
1d954     45 E4 05 F1 | 	add	objptr, #69
1d958     F2 18 02 FB | 	rdlong	arg04, objptr
1d95c     45 E4 85 F1 | 	sub	objptr, #69
1d960     00 12 06 F6 | 	mov	arg01, #0
1d964     09 14 CE F9 | 	bmask	arg02, #9
1d968     0F 17 02 F6 | 	mov	arg03, local01
1d96c     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
1d970     01 1E 06 F1 | 	add	local01, #1
1d974     01 00 00 FF 
1d978     58 1E 16 F2 | 	cmp	local01, ##600 wc
1d97c     D4 FF 9F CD |  if_b	jmp	#LR__2351
1d980                 | ' repeat i from 0 to 3
1d980     00 1E 06 F6 | 	mov	local01, #0
1d984                 | LR__2352
1d984                 | '    fastline(0,1023,i,write_background)      
1d984     45 E4 05 F1 | 	add	objptr, #69
1d988     F2 18 02 FB | 	rdlong	arg04, objptr
1d98c     45 E4 85 F1 | 	sub	objptr, #69
1d990     00 12 06 F6 | 	mov	arg01, #0
1d994     09 14 CE F9 | 	bmask	arg02, #9
1d998     0F 17 02 F6 | 	mov	arg03, local01
1d99c     90 EF BF FD | 	call	#_hg010b_spin2_fastline
1d9a0     01 1E 06 F1 | 	add	local01, #1
1d9a4     04 1E 56 F2 | 	cmps	local01, #4 wc
1d9a8     D8 FF 9F CD |  if_b	jmp	#LR__2352
1d9ac                 | ' 
1d9ac                 | ' repeat i from 0 to 35
1d9ac     00 1E 06 F6 | 	mov	local01, #0
1d9b0                 | LR__2353
1d9b0     0F 1B 02 F6 | 	mov	arg05, local01
1d9b4     01 1A 06 F1 | 	add	arg05, #1
1d9b8     10 00 00 FF 
1d9bc     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1d9c0     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1d9c4     0B 1B 02 FD | 	qmul	arg05, arg03
1d9c8                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
1d9c8     F6 03 00 FF 
1d9cc     00 12 06 F6 | 	mov	arg01, ##519168
1d9d0     F9 E4 05 F1 | 	add	objptr, #249
1d9d4     F2 1A 02 FB | 	rdlong	arg05, objptr
1d9d8     0D 13 82 F1 | 	sub	arg01, arg05
1d9dc     F5 E4 85 F1 | 	sub	objptr, #245
1d9e0     F2 14 02 FB | 	rdlong	arg02, objptr
1d9e4     10 00 00 FF 
1d9e8     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1d9ec     0B 00 00 FF 
1d9f0     C8 E4 05 F1 | 	add	objptr, ##5832
1d9f4     18 1A 62 FD | 	getqx	arg05
1d9f8     0D 15 02 F1 | 	add	arg02, arg05
1d9fc     D4 04 B0 FD | 	call	#_psram_spin2_read1
1da00     10 00 00 FF 
1da04     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1da08     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1da0c     0B 1F 02 FD | 	qmul	local01, arg03
1da10                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
1da10     F6 03 00 FF 
1da14     00 12 06 F6 | 	mov	arg01, ##519168
1da18     0A 00 00 FF 
1da1c     D3 E5 85 F1 | 	sub	objptr, ##5587
1da20     F2 1A 02 FB | 	rdlong	arg05, objptr
1da24     0D 13 82 F1 | 	sub	arg01, arg05
1da28     F5 E4 85 F1 | 	sub	objptr, #245
1da2c     F2 14 02 FB | 	rdlong	arg02, objptr
1da30     10 00 00 FF 
1da34     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1da38     0B 00 00 FF 
1da3c     C8 E4 05 F1 | 	add	objptr, ##5832
1da40     18 1A 62 FD | 	getqx	arg05
1da44     0D 15 02 F1 | 	add	arg02, arg05
1da48     24 05 B0 FD | 	call	#_psram_spin2_write
1da4c     0B 00 00 FF 
1da50     CC E4 85 F1 | 	sub	objptr, ##5836
1da54     01 1E 06 F1 | 	add	local01, #1
1da58     24 1E 56 F2 | 	cmps	local01, #36 wc
1da5c     50 FF 9F CD |  if_b	jmp	#LR__2353
1da60                 | ' repeat i from 0 to timings[7]-1
1da60     00 1E 06 F6 | 	mov	local01, #0
1da64     10 00 00 FF 
1da68     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1da6c     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1da70     10 00 00 FF 
1da74     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1da78     01 20 86 F1 | 	sub	local02, #1
1da7c     00 20 56 F2 | 	cmps	local02, #0 wc
1da80     01 22 86 F6 | 	negc	local03, #1
1da84     11 21 02 F1 | 	add	local02, local03
1da88                 | LR__2354
1da88                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
1da88     04 E4 05 F1 | 	add	objptr, #4
1da8c     F2 12 02 FB | 	rdlong	arg01, objptr
1da90     10 00 00 FF 
1da94     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1da98     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1da9c     10 00 00 FF 
1daa0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1daa4     0D 19 02 F6 | 	mov	arg04, arg05
1daa8     03 18 66 F0 | 	shl	arg04, #3
1daac     0D 19 02 F1 | 	add	arg04, arg05
1dab0     02 18 66 F0 | 	shl	arg04, #2
1dab4     0F 19 02 F1 | 	add	arg04, local01
1dab8     0C 13 02 F1 | 	add	arg01, arg04
1dabc     20 14 06 F6 | 	mov	arg02, #32
1dac0     01 16 06 F6 | 	mov	arg03, #1
1dac4     00 18 06 F6 | 	mov	arg04, #0
1dac8     01 1A 06 F6 | 	mov	arg05, #1
1dacc     0B 00 00 FF 
1dad0     C8 E4 05 F1 | 	add	objptr, ##5832
1dad4     34 05 B0 FD | 	call	#_psram_spin2_fill
1dad8     0B 00 00 FF 
1dadc     CC E4 85 F1 | 	sub	objptr, ##5836
1dae0     11 1F 02 F1 | 	add	local01, local03
1dae4     10 1F 0A F2 | 	cmp	local01, local02 wz
1dae8     9C FF 9F 5D |  if_ne	jmp	#LR__2354
1daec     A7 F0 03 F6 | 	mov	ptra, fp
1daf0     B2 00 A0 FD | 	call	#popregs_
1daf4                 | _hg010b_spin2_scrollup2_ret
1daf4     2D 00 64 FD | 	ret
1daf8                 | 
1daf8                 | ' 
1daf8                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
1daf8                 | ' 
1daf8                 | ' pub crlf()
1daf8                 | _hg010b_spin2_crlf
1daf8                 | ' 
1daf8                 | ' cursor_x:=leading_spaces*2
1daf8     01 00 00 FF 
1dafc     B6 E4 05 F1 | 	add	objptr, ##694
1db00     F2 16 02 FB | 	rdlong	arg03, objptr
1db04     01 16 66 F0 | 	shl	arg03, #1
1db08     01 00 00 FF 
1db0c     7A E4 85 F1 | 	sub	objptr, ##634
1db10     F2 16 52 FC | 	wrword	arg03, objptr
1db14                 | ' cursor_y+=1
1db14     02 E4 05 F1 | 	add	objptr, #2
1db18     F2 16 C2 FA | 	rdbyte	arg03, objptr
1db1c     01 16 06 F1 | 	add	arg03, #1
1db20     F2 16 42 FC | 	wrbyte	arg03, objptr
1db24                 | ' if cursor_y>st_lines-1
1db24     C3 E4 05 F1 | 	add	objptr, #195
1db28     F2 16 02 FB | 	rdlong	arg03, objptr
1db2c     01 16 86 F1 | 	sub	arg03, #1
1db30     C3 E4 85 F1 | 	sub	objptr, #195
1db34     F2 14 C2 FA | 	rdbyte	arg02, objptr
1db38     3E E4 85 F1 | 	sub	objptr, #62
1db3c     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
1db40     2C 00 90 ED |  if_be	jmp	#LR__2360
1db44                 | '   scrollup2()
1db44     00 12 06 F6 | 	mov	arg01, #0
1db48     01 00 00 FF 
1db4c     58 14 06 F6 | 	mov	arg02, ##600
1db50     10 16 06 F6 | 	mov	arg03, #16
1db54     38 FD BF FD | 	call	#_hg010b_spin2_scrollup2
1db58                 | '   cursor_y:=st_lines-1
1db58     01 E5 05 F1 | 	add	objptr, #257
1db5c     F2 16 02 FB | 	rdlong	arg03, objptr
1db60     01 16 86 F1 | 	sub	arg03, #1
1db64     C3 E4 85 F1 | 	sub	objptr, #195
1db68     F2 16 42 FC | 	wrbyte	arg03, objptr
1db6c     3E E4 85 F1 | 	sub	objptr, #62
1db70                 | LR__2360
1db70                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
1db70     3C E4 05 F1 | 	add	objptr, #60
1db74     F2 14 E2 FA | 	rdword	arg02, objptr
1db78     02 14 66 F0 | 	shl	arg02, #2
1db7c     02 E4 05 F1 | 	add	objptr, #2
1db80     F2 16 C2 FA | 	rdbyte	arg03, objptr
1db84     3E E4 85 F1 | 	sub	objptr, #62
1db88     04 16 66 F0 | 	shl	arg03, #4
1db8c     04 16 06 F1 | 	add	arg03, #4
1db90     11 12 06 F6 | 	mov	arg01, #17
1db94     4C EB BF FD | 	call	#_hg010b_spin2_setspritepos
1db98                 | _hg010b_spin2_crlf_ret
1db98     2D 00 64 FD | 	ret
1db9c                 | 
1db9c                 | ' 
1db9c                 | ' 
1db9c                 | ' '*************************************************************************
1db9c                 | ' '                                                                        *
1db9c                 | ' '  Conversions                                                           *
1db9c                 | ' '                                                                        *
1db9c                 | ' '*************************************************************************
1db9c                 | ' 
1db9c                 | ' ''---------- Convert a integer to dec string, return a pointer
1db9c                 | ' 
1db9c                 | ' pub inttostr(i):result |q,pos,k,j
1db9c                 | _hg010b_spin2_inttostr
1db9c     03 4A 05 F6 | 	mov	COUNT_, #3
1dba0     A8 00 A0 FD | 	call	#pushregs_
1dba4     09 1F 0A F6 | 	mov	local01, arg01 wz
1dba8                 | ' 
1dba8                 | ' j:=i
1dba8                 | ' pos:=10
1dba8     0A 20 06 F6 | 	mov	local02, #10
1dbac                 | ' k:=0
1dbac     00 22 06 F6 | 	mov	local03, #0
1dbb0                 | ' 
1dbb0                 | ' if (j==0)
1dbb0     18 00 90 5D |  if_ne	jmp	#LR__2370
1dbb4                 | '   n_string[0]:=48
1dbb4     4D E4 05 F1 | 	add	objptr, #77
1dbb8     F2 60 48 FC | 	wrbyte	#48, objptr
1dbbc                 | '   n_string[1]:=0
1dbbc     01 E4 05 F1 | 	add	objptr, #1
1dbc0     F2 00 48 FC | 	wrbyte	#0, objptr
1dbc4     4E E4 85 F1 | 	sub	objptr, #78
1dbc8     C4 00 90 FD | 	jmp	#LR__2377
1dbcc                 | LR__2370
1dbcc                 | ' 
1dbcc                 | ' else
1dbcc                 | '   if (j<0)
1dbcc     0F 1F 52 F6 | 	abs	local01, local01 wc
1dbd0                 | '     j:=0-j
1dbd0                 | '     k:=45
1dbd0     2D 22 06 C6 |  if_b	mov	local03, #45
1dbd4                 | ' 
1dbd4                 | '   n_string[11]:=0
1dbd4     58 E4 05 F1 | 	add	objptr, #88
1dbd8     F2 00 48 FC | 	wrbyte	#0, objptr
1dbdc     58 E4 85 F1 | 	sub	objptr, #88
1dbe0     97 24 48 FB | 	callpa	#(@LR__2372-@LR__2371)>>2,fcache_load_ptr_
1dbe4                 | '   repeat while (pos>-1)
1dbe4                 | LR__2371
1dbe4     00 20 56 F2 | 	cmps	local02, #0 wc
1dbe8     40 00 90 CD |  if_b	jmp	#LR__2373
1dbec     0F FB 51 F6 | 	abs	result1, local01 wc
1dbf0     0A FA 15 FD | 	qdiv	result1, #10
1dbf4                 | '     q:=j//10
1dbf4     19 FA 61 FD | 	getqy	result1
1dbf8     FD FA 81 F6 | 	negc	result1, result1
1dbfc     0F 1F 52 F6 | 	abs	local01, local01 wc
1dc00     0A 1E 16 FD | 	qdiv	local01, #10
1dc04                 | '     q:=48+q
1dc04     30 FA 05 F1 | 	add	result1, #48
1dc08                 | '     n_string[pos]:=q
1dc08     10 1F 02 F6 | 	mov	local01, local02
1dc0c     4D E4 05 F1 | 	add	objptr, #77
1dc10     F2 1E 02 F1 | 	add	local01, objptr
1dc14     0F FB 41 FC | 	wrbyte	result1, local01
1dc18                 | '     j:=j/10
1dc18     4D E4 85 F1 | 	sub	objptr, #77
1dc1c                 | '     pos-=1
1dc1c     01 20 86 F1 | 	sub	local02, #1
1dc20     18 1E 62 FD | 	getqx	local01
1dc24     0F 1F 82 F6 | 	negc	local01, local01
1dc28     B8 FF 9F FD | 	jmp	#LR__2371
1dc2c                 | LR__2372
1dc2c                 | LR__2373
1dc2c                 | '   repeat while n_string[0]==48
1dc2c                 | LR__2374
1dc2c     4D E4 05 F1 | 	add	objptr, #77
1dc30     F2 16 C2 FA | 	rdbyte	arg03, objptr
1dc34     4D E4 85 F1 | 	sub	objptr, #77
1dc38     30 16 0E F2 | 	cmp	arg03, #48 wz
1dc3c     20 00 90 5D |  if_ne	jmp	#LR__2375
1dc40                 | '     bytemove(@n_string,@n_string+1,12)
1dc40     4D E4 05 F1 | 	add	objptr, #77
1dc44     F2 12 02 F6 | 	mov	arg01, objptr
1dc48     F2 14 02 F6 | 	mov	arg02, objptr
1dc4c     4D E4 85 F1 | 	sub	objptr, #77
1dc50     01 14 06 F1 | 	add	arg02, #1
1dc54     0C 16 06 F6 | 	mov	arg03, #12
1dc58     D8 0D B0 FD | 	call	#__system____builtin_memmove
1dc5c     CC FF 9F FD | 	jmp	#LR__2374
1dc60                 | LR__2375
1dc60                 | ' 
1dc60                 | '   if k==45
1dc60     2D 22 0E F2 | 	cmp	local03, #45 wz
1dc64     28 00 90 5D |  if_ne	jmp	#LR__2376
1dc68                 | '      bytemove(@n_string+1,@n_string,12)
1dc68     4D E4 05 F1 | 	add	objptr, #77
1dc6c     F2 12 02 F6 | 	mov	arg01, objptr
1dc70     01 12 06 F1 | 	add	arg01, #1
1dc74     F2 14 02 F6 | 	mov	arg02, objptr
1dc78     4D E4 85 F1 | 	sub	objptr, #77
1dc7c     0C 16 06 F6 | 	mov	arg03, #12
1dc80     B0 0D B0 FD | 	call	#__system____builtin_memmove
1dc84                 | '      n_string[0]:=k
1dc84     4D E4 05 F1 | 	add	objptr, #77
1dc88     F2 22 42 FC | 	wrbyte	local03, objptr
1dc8c     4D E4 85 F1 | 	sub	objptr, #77
1dc90                 | LR__2376
1dc90                 | LR__2377
1dc90                 | ' 
1dc90                 | ' q:=@n_string
1dc90     4D E4 05 F1 | 	add	objptr, #77
1dc94     F2 FA 01 F6 | 	mov	result1, objptr
1dc98     4D E4 85 F1 | 	sub	objptr, #77
1dc9c                 | ' return q
1dc9c     A7 F0 03 F6 | 	mov	ptra, fp
1dca0     B2 00 A0 FD | 	call	#popregs_
1dca4                 | _hg010b_spin2_inttostr_ret
1dca4     2D 00 64 FD | 	ret
1dca8                 | 
1dca8                 | ' 
1dca8                 | ' '..............................................................................
1dca8                 | ' 
1dca8                 | ' {{
1dca8                 | ' }}
1dca8                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
1dca8                 | _psram_spin2_startx
1dca8     04 4A 05 F6 | 	mov	COUNT_, #4
1dcac     A8 00 A0 FD | 	call	#pushregs_
1dcb0     09 1F 02 F6 | 	mov	local01, arg01
1dcb4     0B 21 02 F6 | 	mov	local02, arg03
1dcb8     0C 23 02 F6 | 	mov	local03, arg04
1dcbc                 | '     stop() ' restart driver if required
1dcbc     54 01 B0 FD | 	call	#_psram_spin2_stop
1dcc0     00 1E 0E F2 | 	cmp	local01, #0 wz
1dcc4     14 1E 06 AB |  if_e	rdlong	local01, #20
1dcc8     0F 15 52 F6 | 	abs	arg02, local01 wc
1dccc     A1 07 00 FF 
1dcd0     40 14 16 FD | 	qdiv	arg02, ##1000000
1dcd4                 | ' 
1dcd4                 | '     ' use current frequency if none specified
1dcd4                 | ' 
1dcd4                 | '     if freq == 0 
1dcd4                 | '         freq := clkfreq 
1dcd4                 | ' 
1dcd4                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1dcd4                 | ' 
1dcd4                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1dcd4                 | '     if burst < 0
1dcd4                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1dcd4     18 14 62 FD | 	getqx	arg02
1dcd8     0A 19 82 F6 | 	negc	arg04, arg02
1dcdc     03 18 66 F0 | 	shl	arg04, #3
1dce0     84 18 86 F1 | 	sub	arg04, #132
1dce4     04 18 46 F0 | 	shr	arg04, #4
1dce8     04 18 66 F0 | 	shl	arg04, #4
1dcec     00 18 56 F2 | 	cmps	arg04, #0 wc
1dcf0     0E FA 65 C6 |  if_b	neg	result1, #14
1dcf4     10 01 90 CD |  if_b	jmp	#LR__2383
1dcf8                 | ' 
1dcf8                 | '     ' compute the input delay
1dcf8                 | ' 
1dcf8                 | '     if delay <= 0
1dcf8     01 20 56 F2 | 	cmps	local02, #1 wc
1dcfc     10 00 90 3D |  if_ae	jmp	#LR__2380
1dd00                 | '         delay := lookupDelay(freq)
1dd00     0F 13 02 F6 | 	mov	arg01, local01
1dd04     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
1dd08     FD 20 02 F6 | 	mov	local02, result1
1dd0c     04 00 90 FD | 	jmp	#LR__2381
1dd10                 | LR__2380
1dd10                 | '     else
1dd10                 | '         delay <#= $f ' limit to 15
1dd10     0F 20 66 F3 | 	fles	local02, #15
1dd14                 | LR__2381
1dd14                 | ' 
1dd14                 | '     ' create our lock
1dd14                 | ' 
1dd14                 | '     driverlock := LOCKNEW()  
1dd14     00 FA 05 F6 | 	mov	result1, #0
1dd18     04 FA 61 FD | 	locknew	result1
1dd1c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1dd20     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1dd24                 | '     if driverlock == -1
1dd24     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1dd28     FF FF 7F FF 
1dd2c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1dd30                 | '         return ERR_NO_LOCK
1dd30     1A FA 65 A6 |  if_e	neg	result1, #26
1dd34     D0 00 90 AD |  if_e	jmp	#LR__2383
1dd38                 | ' 
1dd38                 | '     ' patch in the proper data and HUB addresses to the startup structure
1dd38                 | ' 
1dd38                 | '     long[@startupData][0]:=clkfreq
1dd38     14 1E 06 FB | 	rdlong	local01, #20
1dd3c     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
1dd40     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1dd44                 | ' '    long[@startupData][1]:=$1000_0000
1dd44                 | '     long[@startupData][5]:=@deviceData
1dd44     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1dd48     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1dd4c     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
1dd50     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1dd54     14 14 06 F1 | 	add	arg02, #20
1dd58     0A 1F 62 FC | 	wrlong	local01, arg02
1dd5c                 | '     long[@startupData][6]:=@qosData
1dd5c     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
1dd60     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1dd64     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1dd68     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1dd6c     18 14 06 F1 | 	add	arg02, #24
1dd70     0A 1F 62 FC | 	wrlong	local01, arg02
1dd74                 | '     long[@startupData][7]:=$7FF00
1dd74     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1dd78     1C 1E 06 F1 | 	add	local01, #28
1dd7c     FF 03 80 FF 
1dd80     0F 01 6A FC | 	wrlong	##524032, local01
1dd84                 | ' 
1dd84                 | '     ' setup some default bank and QoS parameter values
1dd84                 | ' 
1dd84                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
1dd84     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
1dd88     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
1dd8c     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
1dd90     10 18 66 F0 | 	shl	arg04, #16
1dd94     0C 20 66 F0 | 	shl	local02, #12
1dd98     10 19 42 F5 | 	or	arg04, local02
1dd9c     18 18 46 F5 | 	or	arg04, #24
1dda0     0C 15 02 F6 | 	mov	arg02, arg04
1dda4     02 16 06 F6 | 	mov	arg03, #2
1dda8     A0 00 A0 FD | 	call	#\builtin_longfill_
1ddac                 | '     longfill(@qosData, $FFFF0000, 8)
1ddac     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1ddb0     07 16 06 F6 | 	mov	arg03, #7
1ddb4     28 16 62 FD | 	setq	arg03
1ddb8     80 FF FF FF 
1ddbc     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
1ddc0                 | ' 
1ddc0                 | '     ' get the address of the PSRAM memory driver so we can start it
1ddc0                 | ' 
1ddc0                 | '     driverAddr:= driver.getDriverAddr()
1ddc0                 | '     return @driver_start
1ddc0     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
1ddc4     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
1ddc8     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
1ddcc                 | ' 
1ddcc                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
1ddcc                 | ' 
1ddcc                 | '     if desiredcog < 0
1ddcc     00 22 56 F2 | 	cmps	local03, #0 wc
1ddd0                 | '         desiredcog := NEWCOG
1ddd0     10 22 06 C6 |  if_b	mov	local03, #16
1ddd4                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1ddd4     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
1ddd8     11 25 02 F6 | 	mov	local04, local03
1dddc     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
1dde0     0A 25 F2 FC | 	coginit	local04, arg02 wc
1dde4     01 24 66 C6 |  if_b	neg	local04, #1
1dde8     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1ddec     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
1ddf0                 | '     repeat until long[@startupData] == 0 
1ddf0     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1ddf4                 | LR__2382
1ddf4     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
1ddf8     F8 FF 9F 5D |  if_ne	jmp	#LR__2382
1ddfc                 | ' 
1ddfc                 | '     return drivercog
1ddfc     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
1de00     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1de04     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1de08                 | LR__2383
1de08     A7 F0 03 F6 | 	mov	ptra, fp
1de0c     B2 00 A0 FD | 	call	#popregs_
1de10                 | _psram_spin2_startx_ret
1de10     2D 00 64 FD | 	ret
1de14                 | 
1de14                 | ' 
1de14                 | ' '..............................................................................
1de14                 | ' 
1de14                 | ' {{
1de14                 | ' }}
1de14                 | ' PUB stop() : i
1de14                 | _psram_spin2_stop
1de14     00 00 06 F6 | 	mov	_var01, #0
1de18                 | '     if drivercog <> -1
1de18     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1de1c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1de20     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1de24     FF FF 7F FF 
1de28     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
1de2c     70 00 90 AD |  if_e	jmp	#LR__2393
1de30                 | '         cogstop(drivercog) ' a rather brutal stop
1de30     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1de34     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1de38     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1de3c     03 12 62 FD | 	cogstop	arg01
1de40     97 26 48 FB | 	callpa	#(@LR__2392-@LR__2390)>>2,fcache_load_ptr_
1de44                 | '         repeat i from 0 to 7
1de44                 | LR__2390
1de44                 | '             if long[$7FF00][i*3] < 0
1de44     00 FB 01 F6 | 	mov	result1, _var01
1de48     01 FA 65 F0 | 	shl	result1, #1
1de4c     00 FB 01 F1 | 	add	result1, _var01
1de50     02 FA 65 F0 | 	shl	result1, #2
1de54     FF 03 00 FF 
1de58     00 FB 05 F1 | 	add	result1, ##524032
1de5c     FD FA 01 FB | 	rdlong	result1, result1
1de60     00 FA 55 F2 | 	cmps	result1, #0 wc
1de64     1C 00 90 3D |  if_ae	jmp	#LR__2391
1de68                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
1de68     00 FB 01 F6 | 	mov	result1, _var01
1de6c     01 FA 65 F0 | 	shl	result1, #1
1de70     00 FB 01 F1 | 	add	result1, _var01
1de74     02 FA 65 F0 | 	shl	result1, #2
1de78     FF 03 00 FF 
1de7c     00 FB 05 F1 | 	add	result1, ##524032
1de80     FD 20 68 FC | 	wrlong	#16, result1
1de84                 | LR__2391
1de84     01 00 06 F1 | 	add	_var01, #1
1de88     08 00 56 F2 | 	cmps	_var01, #8 wc
1de8c     B4 FF 9F CD |  if_b	jmp	#LR__2390
1de90                 | LR__2392
1de90                 | '         drivercog := -1
1de90     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1de94     FF FF FF FF 
1de98     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
1de9c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1dea0                 | LR__2393
1dea0                 | '     if driverlock <> -1
1dea0     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1dea4     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1dea8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1deac     FF FF 7F FF 
1deb0     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1deb4                 | '         LOCKRET(driverlock)
1deb4     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
1deb8     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
1debc     05 12 62 5D |  if_ne	lockret	arg01
1dec0                 | '         driverlock := -1
1dec0     FF FF FF 5F 
1dec4     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
1dec8     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
1decc     00 FB 01 F6 | 	mov	result1, _var01
1ded0                 | _psram_spin2_stop_ret
1ded0     2D 00 64 FD | 	ret
1ded4                 | 
1ded4                 | ' 
1ded4                 | ' '..............................................................................
1ded4                 | ' 
1ded4                 | ' {{
1ded4                 | ' }}
1ded4                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1ded4                 | _psram_spin2_read1
1ded4                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1ded4                 | '     if drivercog == -1 ' driver must be running
1ded4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1ded8     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1dedc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1dee0     FF FF 7F FF 
1dee4     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1dee8                 | '         return ERR_INACTIVE
1dee8     0F FA 65 A6 |  if_e	neg	result1, #15
1deec     7C 00 90 AD |  if_e	jmp	#LR__2401
1def0                 | '     if count == 0 ' don't even bother reading
1def0     00 16 0E F2 | 	cmp	arg03, #0 wz
1def4                 | '         return 0
1def4     00 FA 05 A6 |  if_e	mov	result1, #0
1def8     70 00 90 AD |  if_e	jmp	#LR__2401
1defc                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1defc     00 FA 05 F6 | 	mov	result1, #0
1df00     01 FA 61 FD | 	cogid	result1
1df04     FD 00 02 F6 | 	mov	_var01, result1
1df08     01 00 66 F0 | 	shl	_var01, #1
1df0c     FD 00 02 F1 | 	add	_var01, result1
1df10     02 00 66 F0 | 	shl	_var01, #2
1df14     FF 03 00 FF 
1df18     00 03 06 F6 | 	mov	_var02, ##524032
1df1c     00 03 02 F1 | 	add	_var02, _var01
1df20                 | '     if long[mailbox] < 0
1df20     01 01 02 FB | 	rdlong	_var01, _var02
1df24     00 00 56 F2 | 	cmps	_var01, #0 wc
1df28                 | '         return ERR_MAILBOX_BUSY
1df28     1C FA 65 C6 |  if_b	neg	result1, #28
1df2c     3C 00 90 CD |  if_b	jmp	#LR__2401
1df30                 | '     long[mailbox][2] := count
1df30     08 02 06 F1 | 	add	_var02, #8
1df34     01 17 62 FC | 	wrlong	arg03, _var02
1df38                 | '     long[mailbox][1] := dstHubAddr
1df38     04 02 86 F1 | 	sub	_var02, #4
1df3c     01 13 62 FC | 	wrlong	arg01, _var02
1df40     04 02 86 F1 | 	sub	_var02, #4
1df44                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1df44     0A 05 02 F6 | 	mov	_var03, arg02
1df48     D9 04 06 F4 | 	bitl	_var03, #217
1df4c     00 00 58 FF 
1df50     00 00 06 F6 | 	mov	_var01, ##-1342177280
1df54     02 01 02 F1 | 	add	_var01, _var03
1df58     01 01 62 FC | 	wrlong	_var01, _var02
1df5c                 | '     repeat
1df5c                 | LR__2400
1df5c                 | '         result := long[mailbox]    
1df5c     01 05 02 FB | 	rdlong	_var03, _var02
1df60     00 04 56 F2 | 	cmps	_var03, #0 wc
1df64     F4 FF 9F CD |  if_b	jmp	#LR__2400
1df68                 | '     while result < 0   
1df68                 | '     return -result                       'return success or error
1df68     02 FB 61 F6 | 	neg	result1, _var03
1df6c                 | LR__2401
1df6c                 | _psram_spin2_read1_ret
1df6c     2D 00 64 FD | 	ret
1df70                 | 
1df70                 | ' 
1df70                 | ' '..............................................................................
1df70                 | ' 
1df70                 | ' {{
1df70                 | ' }}
1df70                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
1df70                 | _psram_spin2_write
1df70                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1df70                 | '     if drivercog == -1 ' driver must be running
1df70     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1df74     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
1df78     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1df7c     FF FF 7F FF 
1df80     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
1df84                 | '         return ERR_INACTIVE
1df84     0F FA 65 A6 |  if_e	neg	result1, #15
1df88     7C 00 90 AD |  if_e	jmp	#LR__2411
1df8c                 | '     if count == 0 ' don't even bother writing
1df8c     00 16 0E F2 | 	cmp	arg03, #0 wz
1df90                 | '         return 0
1df90     00 FA 05 A6 |  if_e	mov	result1, #0
1df94     70 00 90 AD |  if_e	jmp	#LR__2411
1df98                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
1df98     00 FA 05 F6 | 	mov	result1, #0
1df9c     01 FA 61 FD | 	cogid	result1
1dfa0     FD 00 02 F6 | 	mov	_var01, result1
1dfa4     01 00 66 F0 | 	shl	_var01, #1
1dfa8     FD 00 02 F1 | 	add	_var01, result1
1dfac     02 00 66 F0 | 	shl	_var01, #2
1dfb0     FF 03 00 FF 
1dfb4     00 03 06 F6 | 	mov	_var02, ##524032
1dfb8     00 03 02 F1 | 	add	_var02, _var01
1dfbc                 | '     if long[mailbox] < 0
1dfbc     01 01 02 FB | 	rdlong	_var01, _var02
1dfc0     00 00 56 F2 | 	cmps	_var01, #0 wc
1dfc4                 | '         return ERR_MAILBOX_BUSY
1dfc4     1C FA 65 C6 |  if_b	neg	result1, #28
1dfc8     3C 00 90 CD |  if_b	jmp	#LR__2411
1dfcc                 | '     long[mailbox][2] := count
1dfcc     08 02 06 F1 | 	add	_var02, #8
1dfd0     01 17 62 FC | 	wrlong	arg03, _var02
1dfd4                 | '     long[mailbox][1] := srcHubAddr
1dfd4     04 02 86 F1 | 	sub	_var02, #4
1dfd8     01 13 62 FC | 	wrlong	arg01, _var02
1dfdc     04 02 86 F1 | 	sub	_var02, #4
1dfe0                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
1dfe0     0A 05 02 F6 | 	mov	_var03, arg02
1dfe4     D9 04 06 F4 | 	bitl	_var03, #217
1dfe8     00 00 78 FF 
1dfec     00 00 06 F6 | 	mov	_var01, ##-268435456
1dff0     02 01 02 F1 | 	add	_var01, _var03
1dff4     01 01 62 FC | 	wrlong	_var01, _var02
1dff8                 | '     repeat
1dff8                 | LR__2410
1dff8                 | '         result := long[mailbox]    
1dff8     01 05 02 FB | 	rdlong	_var03, _var02
1dffc     00 04 56 F2 | 	cmps	_var03, #0 wc
1e000     F4 FF 9F CD |  if_b	jmp	#LR__2410
1e004                 | '     while result < 0   
1e004                 | '     return -result                       'return success or error
1e004     02 FB 61 F6 | 	neg	result1, _var03
1e008                 | LR__2411
1e008                 | _psram_spin2_write_ret
1e008     2D 00 64 FD | 	ret
1e00c                 | 
1e00c                 | ' 
1e00c                 | ' ' generalized fill
1e00c                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
1e00c                 | _psram_spin2_fill
1e00c     09 01 02 F6 | 	mov	_var01, arg01
1e010     0A 03 02 F6 | 	mov	_var02, arg02
1e014     0B 05 02 F6 | 	mov	_var03, arg03
1e018     0D 07 02 F6 | 	mov	_var04, arg05
1e01c                 | '     case datasize 
1e01c     01 06 86 F1 | 	sub	_var04, #1
1e020     04 06 26 F3 | 	fle	_var04, #4
1e024     30 06 62 FD | 	jmprel	_var04
1e028                 | LR__2420
1e028     10 00 90 FD | 	jmp	#LR__2421
1e02c     18 00 90 FD | 	jmp	#LR__2422
1e030     2C 00 90 FD | 	jmp	#LR__2424
1e034     1C 00 90 FD | 	jmp	#LR__2423
1e038     24 00 90 FD | 	jmp	#LR__2424
1e03c                 | LR__2421
1e03c                 | '         1: req := driver.R_WRITEBYTE
1e03c     00 00 60 FF 
1e040     00 08 06 F6 | 	mov	_var05, ##-1073741824
1e044     20 00 90 FD | 	jmp	#LR__2425
1e048                 | LR__2422
1e048                 | '         2: req := driver.R_WRITEWORD
1e048     00 00 68 FF 
1e04c     00 08 06 F6 | 	mov	_var05, ##-805306368
1e050     14 00 90 FD | 	jmp	#LR__2425
1e054                 | LR__2423
1e054                 | '         4: req := driver.R_WRITELONG
1e054     00 00 70 FF 
1e058     00 08 06 F6 | 	mov	_var05, ##-536870912
1e05c     08 00 90 FD | 	jmp	#LR__2425
1e060                 | LR__2424
1e060                 | '         other : return ERR_INVALID
1e060     06 FA 65 F6 | 	neg	result1, #6
1e064     94 00 90 FD | 	jmp	#LR__2427
1e068                 | LR__2425
1e068                 | '     if count == 0   ' nothing to do
1e068     00 04 0E F2 | 	cmp	_var03, #0 wz
1e06c                 | '         return 0
1e06c     00 FA 05 A6 |  if_e	mov	result1, #0
1e070     88 00 90 AD |  if_e	jmp	#LR__2427
1e074                 | '     if drivercog == -1
1e074     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1e078     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
1e07c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1e080     FF FF 7F FF 
1e084     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
1e088                 | '         return ERR_INACTIVE
1e088     0F FA 65 A6 |  if_e	neg	result1, #15
1e08c     6C 00 90 AD |  if_e	jmp	#LR__2427
1e090                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
1e090     00 FA 05 F6 | 	mov	result1, #0
1e094     01 FA 61 FD | 	cogid	result1
1e098     FD 06 02 F6 | 	mov	_var04, result1
1e09c     01 06 66 F0 | 	shl	_var04, #1
1e0a0     FD 06 02 F1 | 	add	_var04, result1
1e0a4     02 06 66 F0 | 	shl	_var04, #2
1e0a8     FF 03 00 FF 
1e0ac     00 0B 06 F6 | 	mov	_var06, ##524032
1e0b0     03 0B 02 F1 | 	add	_var06, _var04
1e0b4                 | '     if long[mailbox] < 0
1e0b4     05 07 02 FB | 	rdlong	_var04, _var06
1e0b8     00 06 56 F2 | 	cmps	_var04, #0 wc
1e0bc                 | '         return ERR_MAILBOX_BUSY
1e0bc     1C FA 65 C6 |  if_b	neg	result1, #28
1e0c0     38 00 90 CD |  if_b	jmp	#LR__2427
1e0c4                 | '     long[mailbox][2] := count
1e0c4     08 0A 06 F1 | 	add	_var06, #8
1e0c8     05 05 62 FC | 	wrlong	_var03, _var06
1e0cc                 | '     long[mailbox][1] := pattern
1e0cc     04 0A 86 F1 | 	sub	_var06, #4
1e0d0     05 03 62 FC | 	wrlong	_var02, _var06
1e0d4     04 0A 86 F1 | 	sub	_var06, #4
1e0d8                 | '     long[mailbox] := req + (addr & $1ffffff)
1e0d8     04 0D 02 F6 | 	mov	_var07, _var05
1e0dc     00 0F 02 F6 | 	mov	_var08, _var01
1e0e0     D9 0E 06 F4 | 	bitl	_var08, #217
1e0e4     07 0D 02 F1 | 	add	_var07, _var08
1e0e8     05 0D 62 FC | 	wrlong	_var07, _var06
1e0ec                 | '     repeat
1e0ec                 | LR__2426
1e0ec                 | '         r := long[mailbox]
1e0ec     05 0F 02 FB | 	rdlong	_var08, _var06
1e0f0     00 0E 56 F2 | 	cmps	_var08, #0 wc
1e0f4     F4 FF 9F CD |  if_b	jmp	#LR__2426
1e0f8                 | '     while r < 0
1e0f8                 | '     return -r                  ' return 0 for success or negated error code
1e0f8     07 FB 61 F6 | 	neg	result1, _var08
1e0fc                 | LR__2427
1e0fc                 | _psram_spin2_fill_ret
1e0fc     2D 00 64 FD | 	ret
1e100                 | 
1e100                 | ' 
1e100                 | ' '..............................................................................
1e100                 | ' 
1e100                 | ' {{
1e100                 | ' }}
1e100                 | ' PUB setQos(cog, qos) : result | mailbox
1e100                 | _psram_spin2_setQos
1e100     09 01 02 F6 | 	mov	_var01, arg01
1e104                 | '     if drivercog == -1 ' driver must be running
1e104     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1e108     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
1e10c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1e110     FF FF 7F FF 
1e114     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
1e118                 | '         return ERR_INACTIVE
1e118     0F FA 65 A6 |  if_e	neg	result1, #15
1e11c     9C 00 90 AD |  if_e	jmp	#LR__2434
1e120                 | '     if cog < 0 or cog > 7 ' enforce cog id range
1e120     00 00 56 F2 | 	cmps	_var01, #0 wc
1e124     08 00 90 CD |  if_b	jmp	#LR__2430
1e128     08 00 56 F2 | 	cmps	_var01, #8 wc
1e12c     08 00 90 CD |  if_b	jmp	#LR__2431
1e130                 | LR__2430
1e130                 | '         return ERR_INVALID
1e130     06 FA 65 F6 | 	neg	result1, #6
1e134     84 00 90 FD | 	jmp	#LR__2434
1e138                 | LR__2431
1e138                 | '     long[@qosData][cog] := qos & !$1ff
1e138     FF 15 26 F5 | 	andn	arg02, #511
1e13c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
1e140     02 00 66 F0 | 	shl	_var01, #2
1e144     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
1e148     00 15 62 FC | 	wrlong	arg02, _var01
1e14c                 | '     mailbox := $7FF00 + drivercog*12
1e14c     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
1e150     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
1e154     02 07 02 F6 | 	mov	_var04, _var03
1e158     01 06 66 F0 | 	shl	_var04, #1
1e15c     02 07 02 F1 | 	add	_var04, _var03
1e160     02 06 66 F0 | 	shl	_var04, #2
1e164     FF 03 00 FF 
1e168     00 09 06 F6 | 	mov	_var05, ##524032
1e16c     03 09 02 F1 | 	add	_var05, _var04
1e170                 | '     repeat until LOCKTRY(driverlock)
1e170     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
1e174                 | LR__2432
1e174     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1e178     06 12 72 FD | 	locktry	arg01 wc
1e17c     F4 FF 9F 3D |  if_ae	jmp	#LR__2432
1e180     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1e184                 | '     long[mailbox] := driver.R_CONFIG + cogid()
1e184     00 06 06 F6 | 	mov	_var04, #0
1e188     01 06 62 FD | 	cogid	_var04
1e18c     00 00 78 FF 
1e190     00 02 06 F6 | 	mov	_var02, ##-268435456
1e194     03 03 02 F1 | 	add	_var02, _var04
1e198     04 03 62 FC | 	wrlong	_var02, _var05
1e19c                 | '     repeat while long[mailbox] < 0
1e19c                 | LR__2433
1e19c     04 03 02 FB | 	rdlong	_var02, _var05
1e1a0     00 02 56 F2 | 	cmps	_var02, #0 wc
1e1a4     F4 FF 9F CD |  if_b	jmp	#LR__2433
1e1a8                 | '     LOCKREL(driverlock)
1e1a8     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
1e1ac     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
1e1b0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
1e1b4     07 12 72 FD | 	lockrel	arg01 wc
1e1b8     00 FA 05 F6 | 	mov	result1, #0
1e1bc                 | LR__2434
1e1bc                 | _psram_spin2_setQos_ret
1e1bc     2D 00 64 FD | 	ret
1e1c0                 | 
1e1c0                 | ' 
1e1c0                 | ' '..............................................................................
1e1c0                 | ' 
1e1c0                 | ' {{
1e1c0                 | ' }}
1e1c0                 | ' PRI lookupDelay(freq) : delay | profile
1e1c0                 | _psram_spin2_lookupDelay
1e1c0                 | '     profile := @delayTable
1e1c0     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
1e1c4     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
1e1c8                 | '     delay := long[profile][0]
1e1c8     00 03 02 FB | 	rdlong	_var02, _var01
1e1cc                 | '     repeat while long[profile][1] 
1e1cc     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
1e1d0     97 16 48 FB | 	callpa	#(@LR__2441-@LR__2440)>>2,fcache_load_ptr_
1e1d4                 | LR__2440
1e1d4     04 00 06 F1 | 	add	_var01, #4
1e1d8     00 FB 09 FB | 	rdlong	result1, _var01 wz
1e1dc     04 00 86 F1 | 	sub	_var01, #4
1e1e0     1C 00 90 AD |  if_e	jmp	#LR__2442
1e1e4                 | '         if freq +< long[profile][1] 
1e1e4     04 00 06 F1 | 	add	_var01, #4
1e1e8     00 FB 01 FB | 	rdlong	result1, _var01
1e1ec     04 00 86 F1 | 	sub	_var01, #4
1e1f0     FD 12 12 F2 | 	cmp	arg01, result1 wc
1e1f4                 | '             quit
1e1f4                 | '         profile += 4
1e1f4     04 00 06 31 |  if_ae	add	_var01, #4
1e1f8                 | '         delay++
1e1f8     01 02 06 31 |  if_ae	add	_var02, #1
1e1fc     D4 FF 9F 3D |  if_ae	jmp	#LR__2440
1e200                 | LR__2441
1e200                 | LR__2442
1e200     01 FB 01 F6 | 	mov	result1, _var02
1e204                 | _psram_spin2_lookupDelay_ret
1e204     2D 00 64 FD | 	ret
1e208                 | 
1e208                 | ' 
1e208                 | ' PUB start() : r
1e208                 | _usbnew_spin2_start
1e208     00 00 06 F6 | 	mov	_var01, #0
1e20c                 | '   ifnot driver_cog
1e20c     15 00 00 FF 
1e210     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
1e214     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
1e218     15 00 00 FF 
1e21c     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
1e220     38 00 90 5D |  if_ne	jmp	#LR__2450
1e224                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
1e224     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
1e228     10 00 06 F6 | 	mov	_var01, #16
1e22c     00 16 06 F6 | 	mov	arg03, #0
1e230     28 16 62 FD | 	setq	arg03
1e234     0A 01 F2 FC | 	coginit	_var01, arg02 wc
1e238     01 00 66 C6 |  if_b	neg	_var01, #1
1e23c                 | '     if r >= 0
1e23c     00 00 56 F2 | 	cmps	_var01, #0 wc
1e240                 | '       driver_cog := r+1
1e240     00 03 02 36 |  if_ae	mov	_var02, _var01
1e244     01 02 06 31 |  if_ae	add	_var02, #1
1e248     15 00 00 3F 
1e24c     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
1e250     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
1e254     15 00 00 3F 
1e258     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
1e25c                 | LR__2450
1e25c     00 FB 01 F6 | 	mov	result1, _var01
1e260                 | _usbnew_spin2_start_ret
1e260     2D 00 64 FD | 	ret
1e264                 | 
1e264                 | '     '' (Always enabled)
1e264                 | ' 
1e264                 | ' '' Get current pressed state of a keyboard key
1e264                 | ' PUB keystate(key) : r | buf[2],tmp
1e264                 | _usbnew_spin2_keystate
1e264     00 04 06 F6 | 	mov	_var03, #0
1e268                 | '   if key >= $E0 && key < $E8
1e268     E0 12 56 F2 | 	cmps	arg01, #224 wc
1e26c     34 00 90 CD |  if_b	jmp	#LR__2460
1e270     E8 12 56 F2 | 	cmps	arg01, #232 wc
1e274     2C 00 90 3D |  if_ae	jmp	#LR__2460
1e278                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
1e278     00 FA 05 F6 | 	mov	result1, #0
1e27c     13 00 00 FF 
1e280     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1e284     09 07 02 F6 | 	mov	_var04, arg01
1e288     E0 06 86 F1 | 	sub	_var04, #224
1e28c     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
1e290     03 09 4A F0 | 	shr	_var05, _var04 wz
1e294     13 00 00 FF 
1e298     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1e29c     01 FA 65 56 |  if_ne	neg	result1, #1
1e2a0     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
1e2a4                 | LR__2460
1e2a4                 | '   else
1e2a4                 | '     '' Do this in inline ASM to ensure atomicity
1e2a4                 | '     tmp := @hkbd_report
1e2a4     13 00 00 FF 
1e2a8     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
1e2ac     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
1e2b0                 | '     org
1e2b0     13 00 00 FF 
1e2b4     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
1e2b8     97 1E 48 FB | 	callpa	#(@LR__2462-@LR__2461)>>2,fcache_load_ptr_
1e2bc                 | LR__2461
1e2bc 000             | 	org	0
1e2bc 000 28 02 64 FD | 	setq	#1
1e2c0 001 04 01 02 FB | 	rdlong	_var01, _var05
1e2c4 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
1e2c8 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
1e2cc 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
1e2d0 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1e2d4 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
1e2d8 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1e2dc 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
1e2e0 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1e2e4 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
1e2e8 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1e2ec 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
1e2f0 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
1e2f4 00e 01 04 66 A6 |  if_e	neg	_var03, #1
1e2f8 00f             | LR__2462
1e2f8                 | 	orgh
1e2f8     02 FB 01 F6 | 	mov	result1, _var03
1e2fc                 | _usbnew_spin2_keystate_ret
1e2fc     2D 00 64 FD | 	ret
1e300                 | 
1e300                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
1e300                 | ' 
1e300                 | ' '' Return key event from buffer if there is one
1e300                 | ' PUB get_key() : r | tail
1e300                 | _usbnew_spin2_get_key
1e300                 | '   tail := keyq_tail
1e300     0F 00 00 FF 
1e304     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
1e308     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
1e30c                 | '   if keyq_head == tail
1e30c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1e310     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
1e314     0F 00 00 FF 
1e318     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
1e31c     00 03 0A F2 | 	cmp	_var02, _var01 wz
1e320                 | '     return 0 ' No event
1e320     00 FA 05 A6 |  if_e	mov	result1, #0
1e324     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
1e328                 | '   r := keyq_data[tail]
1e328     00 03 02 F6 | 	mov	_var02, _var01
1e32c     02 02 66 F0 | 	shl	_var02, #2
1e330     0F 00 00 FF 
1e334     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
1e338     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
1e33c     01 FB 01 FB | 	rdlong	result1, _var02
1e340                 | '   if ++tail == KEYQUEUE_SIZE
1e340     01 00 06 F1 | 	add	_var01, #1
1e344     80 00 0E F2 | 	cmp	_var01, #128 wz
1e348                 | '     tail := 0
1e348     00 00 06 A6 |  if_e	mov	_var01, #0
1e34c                 | '   keyq_tail := tail
1e34c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
1e350     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
1e354     0F 00 00 FF 
1e358     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
1e35c                 | _usbnew_spin2_get_key_ret
1e35c     2D 00 64 FD | 	ret
1e360                 | 
1e360                 | ' 
1e360                 | ' '' Emulate mouse movement
1e360                 | ' PUB mouse_move(x,y)
1e360                 | _usbnew_spin2_mouse_move
1e360     02 4A 05 F6 | 	mov	COUNT_, #2
1e364     A8 00 A0 FD | 	call	#pushregs_
1e368     09 1F 02 F6 | 	mov	local01, arg01
1e36c     0A 21 02 F6 | 	mov	local02, arg02
1e370                 | '   mouse_lock := 1
1e370     14 00 00 FF 
1e374     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1e378     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
1e37c     14 00 00 FF 
1e380     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1e384                 | '   waitus(2) ' hope driver is now done
1e384     02 12 06 F6 | 	mov	arg01, #2
1e388     E8 0A B0 FD | 	call	#__system___waitus
1e38c                 | '   mouse_xacc := x
1e38c     14 00 00 FF 
1e390     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
1e394     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
1e398                 | '   mouse_yacc := y
1e398     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1e39c     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
1e3a0                 | '   if mouse_outptr
1e3a0     04 00 00 FF 
1e3a4     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
1e3a8     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
1e3ac     0F 00 00 FF 
1e3b0     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1e3b4     24 00 90 AD |  if_e	jmp	#LR__2470
1e3b8                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
1e3b8     10 20 66 F0 | 	shl	local02, #16
1e3bc     0F 1F 32 F9 | 	getword	local01, local01, #0
1e3c0     0F 21 42 F5 | 	or	local02, local01
1e3c4     0F 00 00 FF 
1e3c8     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
1e3cc     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
1e3d0     0F 00 00 FF 
1e3d4     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1e3d8     0F 21 62 FC | 	wrlong	local02, local01
1e3dc                 | LR__2470
1e3dc                 | '   mouse_lock := 0
1e3dc     14 00 00 FF 
1e3e0     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
1e3e4     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
1e3e8     14 00 00 FF 
1e3ec     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
1e3f0     A7 F0 03 F6 | 	mov	ptra, fp
1e3f4     B2 00 A0 FD | 	call	#popregs_
1e3f8                 | _usbnew_spin2_mouse_move_ret
1e3f8     2D 00 64 FD | 	ret
1e3fc                 | 
1e3fc                 | '     '' Set HAVE_HIDPAD to enable.
1e3fc                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
1e3fc                 | ' 
1e3fc                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
1e3fc                 | ' PUB hidpad_id(dev) : r
1e3fc                 | _usbnew_spin2_hidpad_id
1e3fc                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
1e3fc     13 00 00 FF 
1e400     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1e404     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1e408     09 01 02 F6 | 	mov	_var01, arg01
1e40c     03 00 66 F0 | 	shl	_var01, #3
1e410     09 01 82 F1 | 	sub	_var01, arg01
1e414     02 00 66 F0 | 	shl	_var01, #2
1e418     00 FB 01 F1 | 	add	result1, _var01
1e41c     FD FA 01 FB | 	rdlong	result1, result1
1e420     13 00 00 FF 
1e424     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1e428                 | _usbnew_spin2_hidpad_id_ret
1e428     2D 00 64 FD | 	ret
1e42c                 | 
1e42c                 | ' 
1e42c                 | ' '' Get all button states for a device
1e42c                 | ' PUB hidpad_buttons(dev) : r 
1e42c                 | _usbnew_spin2_hidpad_buttons
1e42c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
1e42c     13 00 00 FF 
1e430     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1e434     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1e438     09 01 02 F6 | 	mov	_var01, arg01
1e43c     03 00 66 F0 | 	shl	_var01, #3
1e440     09 01 82 F1 | 	sub	_var01, arg01
1e444     02 00 66 F0 | 	shl	_var01, #2
1e448     00 FB 01 F1 | 	add	result1, _var01
1e44c     14 FA 05 F1 | 	add	result1, #20
1e450     FD FA 01 FB | 	rdlong	result1, result1
1e454     13 00 00 FF 
1e458     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1e45c                 | _usbnew_spin2_hidpad_buttons_ret
1e45c     2D 00 64 FD | 	ret
1e460                 | 
1e460                 | ' 
1e460                 | ' '' Get state of an axis (normalized between -32768 and 32767)
1e460                 | ' PUB hidpad_axis(dev,axnum) : r
1e460                 | _usbnew_spin2_hidpad_axis
1e460                 | '   if axnum +>= 6
1e460     06 14 16 F2 | 	cmp	arg02, #6 wc
1e464                 | '     return 0
1e464     00 FA 05 36 |  if_ae	mov	result1, #0
1e468     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
1e46c                 | '   else 
1e46c                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
1e46c     13 00 00 FF 
1e470     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
1e474     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
1e478     09 01 02 F6 | 	mov	_var01, arg01
1e47c     03 00 66 F0 | 	shl	_var01, #3
1e480     09 01 82 F1 | 	sub	_var01, arg01
1e484     02 00 66 F0 | 	shl	_var01, #2
1e488     00 FB 01 F1 | 	add	result1, _var01
1e48c     04 00 06 F6 | 	mov	_var01, #4
1e490     0A 01 02 F1 | 	add	_var01, arg02
1e494     01 00 66 F0 | 	shl	_var01, #1
1e498     FD 00 02 F1 | 	add	_var01, result1
1e49c     00 FB E1 FA | 	rdword	result1, _var01
1e4a0     0F FA 65 F7 | 	signx	result1, #15
1e4a4     13 00 00 FF 
1e4a8     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
1e4ac                 | _usbnew_spin2_hidpad_axis_ret
1e4ac     2D 00 64 FD | 	ret
1e4b0                 | 
1e4b0                 | ' 
1e4b0                 | ' 
1e4b0                 | ' '--------------------------------------------------------------
1e4b0                 | ' '---------- Init the variables, start the cog. ----------------
1e4b0                 | ' '--------------------------------------------------------------
1e4b0                 | ' 
1e4b0                 | ' pub start(mbox,scope,cache) :cog,base | iii
1e4b0                 | _audio096_spin2_start
1e4b0     04 4A 05 F6 | 	mov	COUNT_, #4
1e4b4     A8 00 A0 FD | 	call	#pushregs_
1e4b8     09 1F 02 F6 | 	mov	local01, arg01
1e4bc                 | ' 
1e4bc                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
1e4bc                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
1e4bc                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
1e4bc                 | ' 
1e4bc                 | ' mailboxaddr:=mbox 
1e4bc     F2 1E 62 FC | 	wrlong	local01, objptr
1e4c0                 | ' scope_ptr:=scope
1e4c0     04 E4 05 F1 | 	add	objptr, #4
1e4c4     F2 14 62 FC | 	wrlong	arg02, objptr
1e4c8                 | ' cache_ptr:=cache
1e4c8     04 E4 05 F1 | 	add	objptr, #4
1e4cc     F2 16 62 FC | 	wrlong	arg03, objptr
1e4d0                 | ' base:=@channel1[0]
1e4d0     04 E4 05 F1 | 	add	objptr, #4
1e4d4     F2 20 02 F6 | 	mov	local02, objptr
1e4d8                 | ' long[$40]:=mbox
1e4d8     40 1E 66 FC | 	wrlong	local01, #64
1e4dc                 | ' repeat iii from 0 to 7
1e4dc     00 22 06 F6 | 	mov	local03, #0
1e4e0     02 00 00 FF 
1e4e4     98 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1176
1e4e8     0C E4 85 F1 | 	sub	objptr, #12
1e4ec     97 BC 48 FB | 	callpa	#(@LR__2481-@LR__2480)>>2,fcache_load_ptr_
1e4f0                 | LR__2480
1e4f0                 | '   long[base+64*iii]:=0
1e4f0     10 1F 02 F6 | 	mov	local01, local02
1e4f4     11 FD 01 F6 | 	mov	result2, local03
1e4f8     06 FC 65 F0 | 	shl	result2, #6
1e4fc     FE 1E 02 F1 | 	add	local01, result2
1e500     0F 01 68 FC | 	wrlong	#0, local01
1e504                 | '   long[base+64*iii+4]:=0
1e504     10 1F 02 F6 | 	mov	local01, local02
1e508     11 FD 01 F6 | 	mov	result2, local03
1e50c     06 FC 65 F0 | 	shl	result2, #6
1e510     FE 1E 02 F1 | 	add	local01, result2
1e514     04 1E 06 F1 | 	add	local01, #4
1e518     0F 01 68 FC | 	wrlong	#0, local01
1e51c                 | '   long[base+64*iii+12]:=0
1e51c     10 25 02 F6 | 	mov	local04, local02
1e520     11 1F 02 F6 | 	mov	local01, local03
1e524     06 1E 66 F0 | 	shl	local01, #6
1e528     0F 25 02 F1 | 	add	local04, local01
1e52c     0C 24 06 F1 | 	add	local04, #12
1e530     12 01 68 FC | 	wrlong	#0, local04
1e534                 | '   long[base+64*iii+16]:=2 
1e534     10 25 02 F6 | 	mov	local04, local02
1e538     11 1F 02 F6 | 	mov	local01, local03
1e53c     06 1E 66 F0 | 	shl	local01, #6
1e540     0F 25 02 F1 | 	add	local04, local01
1e544     10 24 06 F1 | 	add	local04, #16
1e548     12 05 68 FC | 	wrlong	#2, local04
1e54c                 | '   word[base+64*iii+20]:=0
1e54c     10 25 02 F6 | 	mov	local04, local02
1e550     11 1F 02 F6 | 	mov	local01, local03
1e554     06 1E 66 F0 | 	shl	local01, #6
1e558     0F 25 02 F1 | 	add	local04, local01
1e55c     14 24 06 F1 | 	add	local04, #20
1e560     12 01 58 FC | 	wrword	#0, local04
1e564                 | '   word[base+64*iii+22]:=8192
1e564     10 25 02 F6 | 	mov	local04, local02
1e568     11 1F 02 F6 | 	mov	local01, local03
1e56c     06 1E 66 F0 | 	shl	local01, #6
1e570     0F 25 02 F1 | 	add	local04, local01
1e574     16 24 06 F1 | 	add	local04, #22
1e578     10 00 80 FF 
1e57c     12 01 58 FC | 	wrword	##8192, local04
1e580                 | '   word[base+64*iii+24]:=4000+2*iii
1e580     11 25 02 F6 | 	mov	local04, local03
1e584     01 24 66 F0 | 	shl	local04, #1
1e588     07 00 00 FF 
1e58c     A0 1F 06 F6 | 	mov	local01, ##4000
1e590     12 1F 02 F1 | 	add	local01, local04
1e594     10 25 02 F6 | 	mov	local04, local02
1e598     11 FD 01 F6 | 	mov	result2, local03
1e59c     06 FC 65 F0 | 	shl	result2, #6
1e5a0     FE 24 02 F1 | 	add	local04, result2
1e5a4     18 24 06 F1 | 	add	local04, #24
1e5a8     12 1F 52 FC | 	wrword	local01, local04
1e5ac                 | '   word[base+64*iii+26]:=2
1e5ac     10 25 02 F6 | 	mov	local04, local02
1e5b0     11 1F 02 F6 | 	mov	local01, local03
1e5b4     06 1E 66 F0 | 	shl	local01, #6
1e5b8     0F 25 02 F1 | 	add	local04, local01
1e5bc     1A 24 06 F1 | 	add	local04, #26
1e5c0     12 05 58 FC | 	wrword	#2, local04
1e5c4                 | '   long [base+64*iii+8]:=@null | $C0000000
1e5c4     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
1e5c8     3E 1E 26 F4 | 	bith	local01, #62
1e5cc     10 25 02 F6 | 	mov	local04, local02
1e5d0     11 17 02 F6 | 	mov	arg03, local03
1e5d4     06 16 66 F0 | 	shl	arg03, #6
1e5d8     0B 25 02 F1 | 	add	local04, arg03
1e5dc     08 24 06 F1 | 	add	local04, #8
1e5e0     12 1F 62 FC | 	wrlong	local01, local04
1e5e4                 | '   long[base+64*iii+32]:=0
1e5e4     10 25 02 F6 | 	mov	local04, local02
1e5e8     11 1F 02 F6 | 	mov	local01, local03
1e5ec     06 1E 66 F0 | 	shl	local01, #6
1e5f0     0F 25 02 F1 | 	add	local04, local01
1e5f4     20 24 06 F1 | 	add	local04, #32
1e5f8     12 01 68 FC | 	wrlong	#0, local04
1e5fc                 | '   long[base+64*iii+36]:=0
1e5fc     10 25 02 F6 | 	mov	local04, local02
1e600     11 1F 02 F6 | 	mov	local01, local03
1e604     06 1E 66 F0 | 	shl	local01, #6
1e608     0F 25 02 F1 | 	add	local04, local01
1e60c     24 24 06 F1 | 	add	local04, #36
1e610     12 01 68 FC | 	wrlong	#0, local04
1e614                 | '   long[base+64*iii+40]:=0
1e614     10 25 02 F6 | 	mov	local04, local02
1e618     11 1F 02 F6 | 	mov	local01, local03
1e61c     06 1E 66 F0 | 	shl	local01, #6
1e620     0F 25 02 F1 | 	add	local04, local01
1e624     28 24 06 F1 | 	add	local04, #40
1e628     12 01 68 FC | 	wrlong	#0, local04
1e62c                 | '   long[base+64*iii+44]:=0
1e62c     10 25 02 F6 | 	mov	local04, local02
1e630     11 1F 02 F6 | 	mov	local01, local03
1e634     06 1E 66 F0 | 	shl	local01, #6
1e638     0F 25 02 F1 | 	add	local04, local01
1e63c     2C 24 06 F1 | 	add	local04, #44
1e640     12 01 68 FC | 	wrlong	#0, local04
1e644                 | '   long[base+64*iii+28]:=0
1e644     10 25 02 F6 | 	mov	local04, local02
1e648     11 1F 02 F6 | 	mov	local01, local03
1e64c     06 1E 66 F0 | 	shl	local01, #6
1e650     0F 25 02 F1 | 	add	local04, local01
1e654     1C 24 06 F1 | 	add	local04, #28
1e658     12 01 68 FC | 	wrlong	#0, local04
1e65c     01 22 06 F1 | 	add	local03, #1
1e660     08 22 56 F2 | 	cmps	local03, #8 wc
1e664     88 FE 9F CD |  if_b	jmp	#LR__2480
1e668                 | LR__2481
1e668     02 00 00 FF 
1e66c     98 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1176
1e670                 | '   
1e670                 | ' cog:=coginit(16,@audio,@mailboxaddr)
1e670     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
1e674     F2 16 02 F6 | 	mov	arg03, objptr
1e678     10 24 06 F6 | 	mov	local04, #16
1e67c     28 16 62 FD | 	setq	arg03
1e680     0A 25 F2 FC | 	coginit	local04, arg02 wc
1e684     01 24 66 C6 |  if_b	neg	local04, #1
1e688                 | ' waitms(100)
1e688     64 12 06 F6 | 	mov	arg01, #100
1e68c     78 07 B0 FD | 	call	#__system___waitms
1e690                 | ' return cog,base
1e690     10 FD 01 F6 | 	mov	result2, local02
1e694     12 FB 01 F6 | 	mov	result1, local04
1e698     A7 F0 03 F6 | 	mov	ptra, fp
1e69c     B2 00 A0 FD | 	call	#popregs_
1e6a0                 | _audio096_spin2_start_ret
1e6a0     2D 00 64 FD | 	ret
1e6a4                 | 
1e6a4                 | ' 
1e6a4                 | ' ' a simple play procedure to not poke everything. 
1e6a4                 | ' 
1e6a4                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
1e6a4                 | _audio096_spin2_play
1e6a4     0C E4 05 F1 | 	add	objptr, #12
1e6a8     F2 00 02 F6 | 	mov	_var01, objptr
1e6ac     06 12 66 F0 | 	shl	arg01, #6
1e6b0     09 01 02 F1 | 	add	_var01, arg01
1e6b4     00 13 02 F6 | 	mov	arg01, _var01
1e6b8     0C 12 06 F1 | 	add	arg01, #12
1e6bc     09 1B 62 FC | 	wrlong	arg05, arg01
1e6c0     00 1C 56 F2 | 	cmps	arg06, #0 wc
1e6c4     00 13 02 36 |  if_ae	mov	arg01, _var01
1e6c8     10 12 06 31 |  if_ae	add	arg01, #16
1e6cc     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
1e6d0     02 1A 06 C1 |  if_b	add	arg05, #2
1e6d4     00 13 02 C6 |  if_b	mov	arg01, _var01
1e6d8     10 12 06 C1 |  if_b	add	arg01, #16
1e6dc     09 1B 62 CC |  if_b	wrlong	arg05, arg01
1e6e0     0B 13 52 F6 | 	abs	arg01, arg03 wc
1e6e4     0B 0A 80 FF 
1e6e8     09 6D 18 FD | 	qdiv	##1316406, arg01
1e6ec                 | ' 
1e6ec                 | ' base2:=@channel1[0]+64*channel
1e6ec                 | ' 
1e6ec                 | ' 
1e6ec                 | ' long[base2+12]:= len
1e6ec                 | ' if loop >=0 
1e6ec                 | '   long[base2+16]:= loop
1e6ec     0C E4 85 F1 | 	sub	objptr, #12
1e6f0                 | ' else
1e6f0                 | '   long[base2+16]:= len+2
1e6f0                 | ' word[base2+20]:=vol
1e6f0     00 13 02 F6 | 	mov	arg01, _var01
1e6f4     14 12 06 F1 | 	add	arg01, #20
1e6f8     09 19 52 FC | 	wrword	arg04, arg01
1e6fc                 | ' word[base2+24]:= 1316406/splfreq 
1e6fc     00 19 02 F6 | 	mov	arg04, _var01
1e700     18 18 06 F1 | 	add	arg04, #24
1e704                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1e704                 | ' long[base2+28]:=$40000000    
1e704                 | ' long[base2+32]:=0    
1e704                 | ' long[base2+36]:=0    
1e704                 | ' long[base2+40]:=0    
1e704                 | ' long[base2+44]:=0    
1e704                 | ' long[base2+8]:=sample+$C0000000     
1e704     00 00 60 FF 
1e708     00 14 06 F1 | 	add	arg02, ##-1073741824
1e70c     18 12 62 FD | 	getqx	arg01
1e710     09 13 82 F6 | 	negc	arg01, arg01
1e714     0C 13 52 FC | 	wrword	arg01, arg04
1e718     00 13 02 F6 | 	mov	arg01, _var01
1e71c     1A 12 06 F1 | 	add	arg01, #26
1e720     09 01 5A FC | 	wrword	#256, arg01
1e724     00 13 02 F6 | 	mov	arg01, _var01
1e728     1C 12 06 F1 | 	add	arg01, #28
1e72c     00 00 A0 FF 
1e730     09 01 68 FC | 	wrlong	##1073741824, arg01
1e734     00 13 02 F6 | 	mov	arg01, _var01
1e738     20 12 06 F1 | 	add	arg01, #32
1e73c     09 01 68 FC | 	wrlong	#0, arg01
1e740     00 13 02 F6 | 	mov	arg01, _var01
1e744     24 12 06 F1 | 	add	arg01, #36
1e748     09 01 68 FC | 	wrlong	#0, arg01
1e74c     00 13 02 F6 | 	mov	arg01, _var01
1e750     28 12 06 F1 | 	add	arg01, #40
1e754     09 01 68 FC | 	wrlong	#0, arg01
1e758     00 13 02 F6 | 	mov	arg01, _var01
1e75c     2C 12 06 F1 | 	add	arg01, #44
1e760     09 01 68 FC | 	wrlong	#0, arg01
1e764     08 00 06 F1 | 	add	_var01, #8
1e768     00 15 62 FC | 	wrlong	arg02, _var01
1e76c                 | _audio096_spin2_play_ret
1e76c     2D 00 64 FD | 	ret
1e770                 | 
1e770                 | ' 
1e770                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
1e770                 | _audio096_spin2_play8
1e770                 | ' 
1e770                 | ' base2:=@channel1[0]+64*channel
1e770     0C E4 05 F1 | 	add	objptr, #12
1e774     F2 00 02 F6 | 	mov	_var01, objptr
1e778     06 12 66 F0 | 	shl	arg01, #6
1e77c     09 01 02 F1 | 	add	_var01, arg01
1e780                 | ' long[base2]:=0
1e780     00 01 68 FC | 	wrlong	#0, _var01
1e784                 | ' long[base2+8]:=sample+$40000000 
1e784     00 00 20 FF 
1e788     00 14 06 F1 | 	add	arg02, ##1073741824
1e78c     00 13 02 F6 | 	mov	arg01, _var01
1e790     08 12 06 F1 | 	add	arg01, #8
1e794     09 15 62 FC | 	wrlong	arg02, arg01
1e798                 | ' if loop>=0
1e798     00 1C 56 F2 | 	cmps	arg06, #0 wc
1e79c     0C E4 85 F1 | 	sub	objptr, #12
1e7a0     1C 00 90 CD |  if_b	jmp	#LR__2490
1e7a4                 | '   long[base2+12]:=loop
1e7a4     00 15 02 F6 | 	mov	arg02, _var01
1e7a8     0C 14 06 F1 | 	add	arg02, #12
1e7ac     0A 1D 62 FC | 	wrlong	arg06, arg02
1e7b0                 | '   long[base2+16]:= len
1e7b0     00 1D 02 F6 | 	mov	arg06, _var01
1e7b4     10 1C 06 F1 | 	add	arg06, #16
1e7b8     0E 1B 62 FC | 	wrlong	arg05, arg06
1e7bc     1C 00 90 FD | 	jmp	#LR__2491
1e7c0                 | LR__2490
1e7c0                 | ' else
1e7c0                 | '   long[base2+12]:= len
1e7c0     00 1D 02 F6 | 	mov	arg06, _var01
1e7c4     0C 1C 06 F1 | 	add	arg06, #12
1e7c8     0E 1B 62 FC | 	wrlong	arg05, arg06
1e7cc                 | '   long[base2+16]:= len+1
1e7cc     01 1A 06 F1 | 	add	arg05, #1
1e7d0     00 13 02 F6 | 	mov	arg01, _var01
1e7d4     10 12 06 F1 | 	add	arg01, #16
1e7d8     09 1B 62 FC | 	wrlong	arg05, arg01
1e7dc                 | LR__2491
1e7dc     0B 17 52 F6 | 	abs	arg03, arg03 wc
1e7e0     0B 0A 80 FF 
1e7e4     0B 6D 18 FD | 	qdiv	##1316406, arg03
1e7e8                 | ' word[base2+20]:=vol
1e7e8     00 17 02 F6 | 	mov	arg03, _var01
1e7ec     14 16 06 F1 | 	add	arg03, #20
1e7f0     0B 19 52 FC | 	wrword	arg04, arg03
1e7f4                 | ' word[base2+24]:= 1316406 /splfreq 
1e7f4     00 13 02 F6 | 	mov	arg01, _var01
1e7f8     18 12 06 F1 | 	add	arg01, #24
1e7fc                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
1e7fc     1A 00 06 F1 | 	add	_var01, #26
1e800     18 18 62 FD | 	getqx	arg04
1e804     0C 19 82 F6 | 	negc	arg04, arg04
1e808     09 19 52 FC | 	wrword	arg04, arg01
1e80c     00 01 5A FC | 	wrword	#256, _var01
1e810                 | _audio096_spin2_play8_ret
1e810     2D 00 64 FD | 	ret
1e814                 | 
1e814                 | ' 'long[base2+28]:=$40000000
1e814                 | ' 
1e814                 | '     
1e814                 | ' pub stop(channel) 'silence it
1e814                 | _audio096_spin2_stop
1e814                 | ' 
1e814                 | ' word[@channel1[0]+64*channel+20]:=0
1e814     0C E4 05 F1 | 	add	objptr, #12
1e818     F2 00 02 F6 | 	mov	_var01, objptr
1e81c     09 03 02 F6 | 	mov	_var02, arg01
1e820     06 02 66 F0 | 	shl	_var02, #6
1e824     01 01 02 F1 | 	add	_var01, _var02
1e828     14 00 06 F1 | 	add	_var01, #20
1e82c     00 01 58 FC | 	wrword	#0, _var01
1e830                 | ' word[@channel1[0]+64*channel+20]:=0
1e830     F2 00 02 F6 | 	mov	_var01, objptr
1e834     06 12 66 F0 | 	shl	arg01, #6
1e838     09 01 02 F1 | 	add	_var01, arg01
1e83c     14 00 06 F1 | 	add	_var01, #20
1e840     00 01 58 FC | 	wrword	#0, _var01
1e844     0C E4 85 F1 | 	sub	objptr, #12
1e848                 | _audio096_spin2_stop_ret
1e848     2D 00 64 FD | 	ret
1e84c                 | hubexit
1e84c     81 00 80 FD | 	jmp	#cogexit
1e850                 | 
1e850                 | __system___setbaud
1e850     14 64 06 FB | 	rdlong	muldiva_, #20
1e854     09 67 02 F6 | 	mov	muldivb_, arg01
1e858     BA 00 A0 FD | 	call	#divide_
1e85c     97 06 48 FB | 	callpa	#(@LR__2501-@LR__2500)>>2,fcache_load_ptr_
1e860                 | LR__2500
1e860     3E FA 9D FA | 	rdpin	result1, #62 wc
1e864     FE FC A1 F1 | 	subx	result2, result2
1e868     F4 FF 9F CD |  if_b	jmp	#LR__2500
1e86c                 | LR__2501
1e86c     40 7C 64 FD | 	dirl	#62
1e870     40 7E 64 FD | 	dirl	#63
1e874     F3 66 62 FC | 	wrlong	muldivb_, ptr___system__dat__
1e878     10 66 66 F0 | 	shl	muldivb_, #16
1e87c     07 14 06 F6 | 	mov	arg02, #7
1e880     33 15 02 F1 | 	add	arg02, muldivb_
1e884     3E F8 0C FC | 	wrpin	#124, #62
1e888     3E 14 16 FC | 	wxpin	arg02, #62
1e88c     3F 7C 0C FC | 	wrpin	#62, #63
1e890     14 14 06 F1 | 	add	arg02, #20
1e894     3F 14 16 FC | 	wxpin	arg02, #63
1e898     41 7C 64 FD | 	dirh	#62
1e89c     41 7E 64 FD | 	dirh	#63
1e8a0                 | __system___setbaud_ret
1e8a0     2D 00 64 FD | 	ret
1e8a4                 | 
1e8a4                 | __system___txraw
1e8a4     01 4A 05 F6 | 	mov	COUNT_, #1
1e8a8     A8 00 A0 FD | 	call	#pushregs_
1e8ac     09 1F 02 F6 | 	mov	local01, arg01
1e8b0     97 06 48 FB | 	callpa	#(@LR__2511-@LR__2510)>>2,fcache_load_ptr_
1e8b4                 | LR__2510
1e8b4     3E FA 9D FA | 	rdpin	result1, #62 wc
1e8b8     FE FC A1 F1 | 	subx	result2, result2
1e8bc     F4 FF 9F CD |  if_b	jmp	#LR__2510
1e8c0                 | LR__2511
1e8c0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
1e8c4     C2 01 00 AF 
1e8c8     00 12 06 A6 |  if_e	mov	arg01, ##230400
1e8cc     80 FF BF AD |  if_e	call	#__system___setbaud
1e8d0     58 7C 64 FD | 	drvl	#62
1e8d4     3E 1E 26 FC | 	wypin	local01, #62
1e8d8     01 FA 05 F6 | 	mov	result1, #1
1e8dc     A7 F0 03 F6 | 	mov	ptra, fp
1e8e0     B2 00 A0 FD | 	call	#popregs_
1e8e4                 | __system___txraw_ret
1e8e4     2D 00 64 FD | 	ret
1e8e8                 | 
1e8e8                 | __system___rxraw
1e8e8     0D 4A 05 F6 | 	mov	COUNT_, #13
1e8ec     A8 00 A0 FD | 	call	#pushregs_
1e8f0     09 1F 02 F6 | 	mov	local01, arg01
1e8f4     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1e8f8     C2 01 00 AF 
1e8fc     00 12 06 A6 |  if_e	mov	arg01, ##230400
1e900     4C FF BF AD |  if_e	call	#__system___setbaud
1e904     00 1E 0E F2 | 	cmp	local01, #0 wz
1e908     20 00 90 AD |  if_e	jmp	#LR__2520
1e90c     14 22 06 FB | 	rdlong	local03, #20
1e910     0A 22 46 F0 | 	shr	local03, #10
1e914     11 1F 02 FD | 	qmul	local01, local03
1e918     1A FA 61 FD | 	getct	result1
1e91c     18 24 62 FD | 	getqx	local04
1e920     12 FB 01 F1 | 	add	result1, local04
1e924     FD 26 02 F6 | 	mov	local05, result1
1e928     04 00 90 FD | 	jmp	#LR__2521
1e92c                 | LR__2520
1e92c     00 26 06 F6 | 	mov	local05, #0
1e930                 | LR__2521
1e930     01 28 66 F6 | 	neg	local06, #1
1e934     3F 2A 06 F6 | 	mov	local07, #63
1e938     00 2C 06 F6 | 	mov	local08, #0
1e93c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1e940     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
1e944     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1e948                 | LR__2522
1e948     08 2E 16 F4 | 	testb	local09, #8 wc
1e94c     09 2E 76 F4 | 	testbn	local09, #9 andc
1e950     0A 2E 46 F0 | 	shr	local09, #10
1e954     01 2C 06 C6 |  if_b	mov	local08, #1
1e958     40 7E 6C 3D |  if_ae	testp	#63 wz
1e95c     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
1e960     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
1e964     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
1e968                 | LR__2523
1e968     00 20 06 F6 | 	mov	local02, #0
1e96c     00 2C 0E F2 | 	cmp	local08, #0 wz
1e970     01 20 66 56 |  if_ne	neg	local02, #1
1e974     00 30 06 F6 | 	mov	local10, #0
1e978     00 22 06 F6 | 	mov	local03, #0
1e97c     00 1E 0E F2 | 	cmp	local01, #0 wz
1e980     01 22 66 56 |  if_ne	neg	local03, #1
1e984     00 24 06 F6 | 	mov	local04, #0
1e988     00 32 06 F6 | 	mov	local11, #0
1e98c     1A FA 61 FD | 	getct	result1
1e990     FD 34 02 F6 | 	mov	local12, result1
1e994     1A 37 02 F6 | 	mov	local13, local12
1e998     13 37 82 F1 | 	sub	local13, local05
1e99c     00 36 56 F2 | 	cmps	local13, #0 wc
1e9a0     00 32 26 C6 |  if_b	not	local11, #0
1e9a4     00 32 0E F2 | 	cmp	local11, #0 wz
1e9a8     00 24 26 56 |  if_ne	not	local04, #0
1e9ac     12 23 CA F7 | 	test	local03, local04 wz
1e9b0     00 30 26 56 |  if_ne	not	local10, #0
1e9b4     18 21 4A F5 | 	or	local02, local10 wz
1e9b8     8C FF 9F AD |  if_e	jmp	#LR__2522
1e9bc     00 2C 0E F2 | 	cmp	local08, #0 wz
1e9c0     17 29 02 56 |  if_ne	mov	local06, local09
1e9c4     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
1e9c8     04 E6 05 F1 | 	add	ptr___system__dat__, #4
1e9cc     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
1e9d0     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
1e9d4     14 FB 01 F6 | 	mov	result1, local06
1e9d8     A7 F0 03 F6 | 	mov	ptra, fp
1e9dc     B2 00 A0 FD | 	call	#popregs_
1e9e0                 | __system___rxraw_ret
1e9e0     2D 00 64 FD | 	ret
1e9e4                 | 
1e9e4                 | __system___getus
1e9e4     1A FC 71 FD | 	getct	result2 wc
1e9e8     1A 00 62 FD | 	getct	_var01
1e9ec     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1e9f0     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
1e9f4     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1e9f8     20 00 90 5D |  if_ne	jmp	#LR__2530
1e9fc     14 02 06 FB | 	rdlong	_var02, #20
1ea00     A1 07 00 FF 
1ea04     40 02 16 FD | 	qdiv	_var02, ##1000000
1ea08     10 E6 05 F1 | 	add	ptr___system__dat__, #16
1ea0c     18 FA 61 FD | 	getqx	result1
1ea10     FD 02 02 F6 | 	mov	_var02, result1
1ea14     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1ea18     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1ea1c                 | LR__2530
1ea1c     01 FD 11 FD | 	qdiv	result2, _var02
1ea20     19 FC 61 FD | 	getqy	result2
1ea24     28 FC 61 FD | 	setq	result2
1ea28     01 01 12 FD | 	qdiv	_var01, _var02
1ea2c     18 FA 61 FD | 	getqx	result1
1ea30                 | __system___getus_ret
1ea30     2D 00 64 FD | 	ret
1ea34                 | 
1ea34                 | __system____builtin_memmove
1ea34     09 01 02 F6 | 	mov	_var01, arg01
1ea38     0A 13 52 F2 | 	cmps	arg01, arg02 wc
1ea3c     10 00 90 CD |  if_b	jmp	#LR__2540
1ea40     0A 03 02 F6 | 	mov	_var02, arg02
1ea44     0B 03 02 F1 | 	add	_var02, arg03
1ea48     01 13 52 F2 | 	cmps	arg01, _var02 wc
1ea4c     48 00 90 CD |  if_b	jmp	#LR__2546
1ea50                 | LR__2540
1ea50     0B 05 02 F6 | 	mov	_var03, arg03
1ea54     02 04 4E F0 | 	shr	_var03, #2 wz
1ea58     18 00 90 AD |  if_e	jmp	#LR__2545
1ea5c     97 0A 48 FB | 	callpa	#(@LR__2543-@LR__2541)>>2,fcache_load_ptr_
1ea60                 | LR__2541
1ea60     02 09 D8 FC | 	rep	@LR__2544, _var03
1ea64                 | LR__2542
1ea64     0A 05 02 FB | 	rdlong	_var03, arg02
1ea68     09 05 62 FC | 	wrlong	_var03, arg01
1ea6c     04 12 06 F1 | 	add	arg01, #4
1ea70     04 14 06 F1 | 	add	arg02, #4
1ea74                 | LR__2543
1ea74                 | LR__2544
1ea74                 | LR__2545
1ea74     02 16 CE F7 | 	test	arg03, #2 wz
1ea78     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
1ea7c     09 03 52 5C |  if_ne	wrword	_var02, arg01
1ea80     02 12 06 51 |  if_ne	add	arg01, #2
1ea84     02 14 06 51 |  if_ne	add	arg02, #2
1ea88     01 16 CE F7 | 	test	arg03, #1 wz
1ea8c     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1ea90     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
1ea94     28 00 90 FD | 	jmp	#LR__2552
1ea98                 | LR__2546
1ea98     0B 13 02 F1 | 	add	arg01, arg03
1ea9c     0B 15 02 F1 | 	add	arg02, arg03
1eaa0     0B 07 0A F6 | 	mov	_var04, arg03 wz
1eaa4     18 00 90 AD |  if_e	jmp	#LR__2551
1eaa8     97 0A 48 FB | 	callpa	#(@LR__2549-@LR__2547)>>2,fcache_load_ptr_
1eaac                 | LR__2547
1eaac     03 09 D8 FC | 	rep	@LR__2550, _var04
1eab0                 | LR__2548
1eab0     01 12 86 F1 | 	sub	arg01, #1
1eab4     01 14 86 F1 | 	sub	arg02, #1
1eab8     0A 03 C2 FA | 	rdbyte	_var02, arg02
1eabc     09 03 42 FC | 	wrbyte	_var02, arg01
1eac0                 | LR__2549
1eac0                 | LR__2550
1eac0                 | LR__2551
1eac0                 | LR__2552
1eac0     00 FB 01 F6 | 	mov	result1, _var01
1eac4                 | __system____builtin_memmove_ret
1eac4     2D 00 64 FD | 	ret
1eac8                 | 
1eac8                 | __system____builtin_strcpy
1eac8     09 01 02 F6 | 	mov	_var01, arg01
1eacc     97 0A 48 FB | 	callpa	#(@LR__2561-@LR__2560)>>2,fcache_load_ptr_
1ead0                 | LR__2560
1ead0     0A FB C9 FA | 	rdbyte	result1, arg02 wz
1ead4     09 FB 41 FC | 	wrbyte	result1, arg01
1ead8     01 14 06 F1 | 	add	arg02, #1
1eadc     01 12 06 F1 | 	add	arg01, #1
1eae0     EC FF 9F 5D |  if_ne	jmp	#LR__2560
1eae4                 | LR__2561
1eae4     00 FB 01 F6 | 	mov	result1, _var01
1eae8                 | __system____builtin_strcpy_ret
1eae8     2D 00 64 FD | 	ret
1eaec                 | 
1eaec                 | __system____topofstack
1eaec     00 4A 05 F6 | 	mov	COUNT_, #0
1eaf0     A8 00 A0 FD | 	call	#pushregs_
1eaf4     08 F0 07 F1 | 	add	ptra, #8
1eaf8     04 4E 05 F1 | 	add	fp, #4
1eafc     A7 12 62 FC | 	wrlong	arg01, fp
1eb00     A7 FA 01 F6 | 	mov	result1, fp
1eb04     04 4E 85 F1 | 	sub	fp, #4
1eb08     A7 F0 03 F6 | 	mov	ptra, fp
1eb0c     B2 00 A0 FD | 	call	#popregs_
1eb10                 | __system____topofstack_ret
1eb10     2D 00 64 FD | 	ret
1eb14                 | 
1eb14                 | __system___lockmem
1eb14     00 FA 05 F6 | 	mov	result1, #0
1eb18     01 FA 61 FD | 	cogid	result1
1eb1c     00 FB 05 F1 | 	add	result1, #256
1eb20                 | LR__2570
1eb20     09 01 0A FB | 	rdlong	_var01, arg01 wz
1eb24     09 FB 61 AC |  if_e	wrlong	result1, arg01
1eb28     09 01 02 AB |  if_e	rdlong	_var01, arg01
1eb2c     09 01 02 AB |  if_e	rdlong	_var01, arg01
1eb30     FD 00 0A F2 | 	cmp	_var01, result1 wz
1eb34     E8 FF 9F 5D |  if_ne	jmp	#LR__2570
1eb38                 | __system___lockmem_ret
1eb38     2D 00 64 FD | 	ret
1eb3c                 | 
1eb3c                 | __system___string_cmp
1eb3c     97 14 48 FB | 	callpa	#(@LR__2581-@LR__2580)>>2,fcache_load_ptr_
1eb40                 | LR__2580
1eb40     09 01 C2 FA | 	rdbyte	_var01, arg01
1eb44     0A 03 C2 FA | 	rdbyte	_var02, arg02
1eb48     00 05 02 F6 | 	mov	_var03, _var01
1eb4c     01 05 8A F1 | 	sub	_var03, _var02 wz
1eb50     01 12 06 F1 | 	add	arg01, #1
1eb54     01 14 06 F1 | 	add	arg02, #1
1eb58     0C 00 90 5D |  if_ne	jmp	#LR__2582
1eb5c     00 00 0E F2 | 	cmp	_var01, #0 wz
1eb60     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
1eb64     D8 FF 9F 5D |  if_ne	jmp	#LR__2580
1eb68                 | LR__2581
1eb68                 | LR__2582
1eb68     02 FB 01 F6 | 	mov	result1, _var03
1eb6c                 | __system___string_cmp_ret
1eb6c     2D 00 64 FD | 	ret
1eb70                 | 
1eb70                 | __system___string_concat
1eb70     05 4A 05 F6 | 	mov	COUNT_, #5
1eb74     A8 00 A0 FD | 	call	#pushregs_
1eb78     09 1F 02 F6 | 	mov	local01, arg01
1eb7c     0A 21 02 F6 | 	mov	local02, arg02
1eb80     0F 13 02 F6 | 	mov	arg01, local01
1eb84     09 23 02 F6 | 	mov	local03, arg01
1eb88     97 06 48 FB | 	callpa	#(@LR__2591-@LR__2590)>>2,fcache_load_ptr_
1eb8c                 | LR__2590
1eb8c     11 FB C9 FA | 	rdbyte	result1, local03 wz
1eb90     01 22 06 51 |  if_ne	add	local03, #1
1eb94     F4 FF 9F 5D |  if_ne	jmp	#LR__2590
1eb98                 | LR__2591
1eb98     09 23 82 F1 | 	sub	local03, arg01
1eb9c     11 25 02 F6 | 	mov	local04, local03
1eba0     10 13 02 F6 | 	mov	arg01, local02
1eba4     09 23 02 F6 | 	mov	local03, arg01
1eba8     97 06 48 FB | 	callpa	#(@LR__2593-@LR__2592)>>2,fcache_load_ptr_
1ebac                 | LR__2592
1ebac     11 FB C9 FA | 	rdbyte	result1, local03 wz
1ebb0     01 22 06 51 |  if_ne	add	local03, #1
1ebb4     F4 FF 9F 5D |  if_ne	jmp	#LR__2592
1ebb8                 | LR__2593
1ebb8     09 23 82 F1 | 	sub	local03, arg01
1ebbc     12 13 02 F6 | 	mov	arg01, local04
1ebc0     11 13 02 F1 | 	add	arg01, local03
1ebc4     01 12 06 F1 | 	add	arg01, #1
1ebc8     5C 3D B0 FD | 	call	#__system___gc_alloc_managed
1ebcc     FD 26 0A F6 | 	mov	local05, result1 wz
1ebd0     28 00 90 AD |  if_e	jmp	#LR__2594
1ebd4     13 13 02 F6 | 	mov	arg01, local05
1ebd8     0F 15 02 F6 | 	mov	arg02, local01
1ebdc     12 17 02 F6 | 	mov	arg03, local04
1ebe0     50 FE BF FD | 	call	#__system____builtin_memmove
1ebe4     13 13 02 F6 | 	mov	arg01, local05
1ebe8     12 13 02 F1 | 	add	arg01, local04
1ebec     01 22 06 F1 | 	add	local03, #1
1ebf0     10 15 02 F6 | 	mov	arg02, local02
1ebf4     11 17 02 F6 | 	mov	arg03, local03
1ebf8     38 FE BF FD | 	call	#__system____builtin_memmove
1ebfc                 | LR__2594
1ebfc     13 FB 01 F6 | 	mov	result1, local05
1ec00     A7 F0 03 F6 | 	mov	ptra, fp
1ec04     B2 00 A0 FD | 	call	#popregs_
1ec08                 | __system___string_concat_ret
1ec08     2D 00 64 FD | 	ret
1ec0c                 | 
1ec0c                 | __system___tx
1ec0c     02 4A 05 F6 | 	mov	COUNT_, #2
1ec10     A8 00 A0 FD | 	call	#pushregs_
1ec14     09 1F 02 F6 | 	mov	local01, arg01
1ec18     0A 1E 0E F2 | 	cmp	local01, #10 wz
1ec1c     18 00 90 5D |  if_ne	jmp	#LR__2600
1ec20     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1ec24     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
1ec28     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1ec2c     02 20 CE F7 | 	test	local02, #2 wz
1ec30     0D 12 06 56 |  if_ne	mov	arg01, #13
1ec34     6C FC BF 5D |  if_ne	call	#__system___txraw
1ec38                 | LR__2600
1ec38     0F 13 02 F6 | 	mov	arg01, local01
1ec3c     64 FC BF FD | 	call	#__system___txraw
1ec40     A7 F0 03 F6 | 	mov	ptra, fp
1ec44     B2 00 A0 FD | 	call	#popregs_
1ec48                 | __system___tx_ret
1ec48     2D 00 64 FD | 	ret
1ec4c                 | 
1ec4c                 | __system___rx
1ec4c     01 4A 05 F6 | 	mov	COUNT_, #1
1ec50     A8 00 A0 FD | 	call	#pushregs_
1ec54                 | LR__2610
1ec54     00 12 06 F6 | 	mov	arg01, #0
1ec58     8C FC BF FD | 	call	#__system___rxraw
1ec5c     FD 1E 02 F6 | 	mov	local01, result1
1ec60     FF FF 7F FF 
1ec64     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
1ec68     E8 FF 9F AD |  if_e	jmp	#LR__2610
1ec6c     0D 1E 0E F2 | 	cmp	local01, #13 wz
1ec70     14 00 90 5D |  if_ne	jmp	#LR__2611
1ec74     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1ec78     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1ec7c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1ec80     02 FA CD F7 | 	test	result1, #2 wz
1ec84     0A 1E 06 56 |  if_ne	mov	local01, #10
1ec88                 | LR__2611
1ec88     08 E6 05 F1 | 	add	ptr___system__dat__, #8
1ec8c     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1ec90     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
1ec94     01 12 CE F7 | 	test	arg01, #1 wz
1ec98     1C 00 90 AD |  if_e	jmp	#LR__2614
1ec9c     7F 1E 0E F2 | 	cmp	local01, #127 wz
1eca0     0C 00 90 5D |  if_ne	jmp	#LR__2612
1eca4     08 12 06 F6 | 	mov	arg01, #8
1eca8     60 FF BF FD | 	call	#__system___tx
1ecac     08 00 90 FD | 	jmp	#LR__2613
1ecb0                 | LR__2612
1ecb0     0F 13 02 F6 | 	mov	arg01, local01
1ecb4     54 FF BF FD | 	call	#__system___tx
1ecb8                 | LR__2613
1ecb8                 | LR__2614
1ecb8     0F FB 01 F6 | 	mov	result1, local01
1ecbc     A7 F0 03 F6 | 	mov	ptra, fp
1ecc0     B2 00 A0 FD | 	call	#popregs_
1ecc4                 | __system___rx_ret
1ecc4     2D 00 64 FD | 	ret
1ecc8                 | 
1ecc8                 | __system___pinwrite
1ecc8     09 01 02 F6 | 	mov	_var01, arg01
1eccc     1F 00 06 F5 | 	and	_var01, #31
1ecd0     20 12 CE F7 | 	test	arg01, #32 wz
1ecd4     06 12 46 F0 | 	shr	arg01, #6
1ecd8     09 13 CA F9 | 	bmask	arg01, arg01
1ecdc     00 13 62 F0 | 	shl	arg01, _var01
1ece0     00 15 62 F0 | 	shl	arg02, _var01
1ece4     1C 00 90 AD |  if_e	jmp	#LR__2620
1ece8     09 F7 43 F5 | 	or	dirb, arg01
1ecec     FD 01 02 F6 | 	mov	_var01, outb
1ecf0     09 01 22 F5 | 	andn	_var01, arg01
1ecf4     09 15 02 F5 | 	and	arg02, arg01
1ecf8     0A 01 42 F5 | 	or	_var01, arg02
1ecfc     00 FB 03 F6 | 	mov	outb, _var01
1ed00     18 00 90 FD | 	jmp	#LR__2621
1ed04                 | LR__2620
1ed04     09 F5 43 F5 | 	or	dira, arg01
1ed08     FC 01 02 F6 | 	mov	_var01, outa
1ed0c     09 01 22 F5 | 	andn	_var01, arg01
1ed10     09 15 02 F5 | 	and	arg02, arg01
1ed14     0A 01 42 F5 | 	or	_var01, arg02
1ed18     00 F9 03 F6 | 	mov	outa, _var01
1ed1c                 | LR__2621
1ed1c                 | __system___pinwrite_ret
1ed1c     2D 00 64 FD | 	ret
1ed20                 | 
1ed20                 | __system___basic_read_line
1ed20     06 4A 05 F6 | 	mov	COUNT_, #6
1ed24     A8 00 A0 FD | 	call	#pushregs_
1ed28     09 1F 02 F6 | 	mov	local01, arg01
1ed2c     00 20 06 F6 | 	mov	local02, #0
1ed30     18 22 06 F6 | 	mov	local03, #24
1ed34     00 24 06 F6 | 	mov	local04, #0
1ed38     18 12 06 F6 | 	mov	arg01, #24
1ed3c     E8 3B B0 FD | 	call	#__system___gc_alloc_managed
1ed40     FD 26 0A F6 | 	mov	local05, result1 wz
1ed44     13 FB 01 A6 |  if_e	mov	result1, local05
1ed48     B0 00 90 AD |  if_e	jmp	#LR__2633
1ed4c                 | LR__2630
1ed4c     0F 13 02 F6 | 	mov	arg01, local01
1ed50     78 0B B0 FD | 	call	#__system___basic_get_char
1ed54     FD 28 02 F6 | 	mov	local06, result1
1ed58     01 28 56 F2 | 	cmps	local06, #1 wc
1ed5c     8C 00 90 CD |  if_b	jmp	#LR__2632
1ed60     0A 28 0E F2 | 	cmp	local06, #10 wz
1ed64     10 00 90 5D |  if_ne	jmp	#LR__2631
1ed68     00 24 0E F2 | 	cmp	local04, #0 wz
1ed6c     01 20 56 52 |  if_ne	cmps	local02, #1 wc
1ed70     01 20 86 11 |  if_a	sub	local02, #1
1ed74     74 00 90 FD | 	jmp	#LR__2632
1ed78                 | LR__2631
1ed78     0D 28 0E F2 | 	cmp	local06, #13 wz
1ed7c     01 24 06 A6 |  if_e	mov	local04, #1
1ed80     00 24 06 56 |  if_ne	mov	local04, #0
1ed84     08 28 0E F2 | 	cmp	local06, #8 wz
1ed88     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
1ed8c     01 20 56 A2 |  if_e	cmps	local02, #1 wc
1ed90     01 20 86 21 |  if_nc_and_z	sub	local02, #1
1ed94     B4 FF 9F AD |  if_e	jmp	#LR__2630
1ed98     13 17 02 F6 | 	mov	arg03, local05
1ed9c     10 17 02 F1 | 	add	arg03, local02
1eda0     0B 29 42 FC | 	wrbyte	local06, arg03
1eda4     01 20 06 F1 | 	add	local02, #1
1eda8     11 21 0A F2 | 	cmp	local02, local03 wz
1edac     9C FF 9F 5D |  if_ne	jmp	#LR__2630
1edb0     11 13 02 F6 | 	mov	arg01, local03
1edb4     20 12 06 F1 | 	add	arg01, #32
1edb8     6C 3B B0 FD | 	call	#__system___gc_alloc_managed
1edbc     FD 28 0A F6 | 	mov	local06, result1 wz
1edc0     14 FB 01 A6 |  if_e	mov	result1, local06
1edc4     34 00 90 AD |  if_e	jmp	#LR__2633
1edc8     14 13 02 F6 | 	mov	arg01, local06
1edcc     13 15 02 F6 | 	mov	arg02, local05
1edd0     11 17 02 F6 | 	mov	arg03, local03
1edd4     5C FC BF FD | 	call	#__system____builtin_memmove
1edd8     20 22 06 F1 | 	add	local03, #32
1eddc     13 13 02 F6 | 	mov	arg01, local05
1ede0     80 3C B0 FD | 	call	#__system___gc_free
1ede4     14 27 02 F6 | 	mov	local05, local06
1ede8     60 FF 9F FD | 	jmp	#LR__2630
1edec                 | LR__2632
1edec     13 29 02 F6 | 	mov	local06, local05
1edf0     10 29 02 F1 | 	add	local06, local02
1edf4     14 01 48 FC | 	wrbyte	#0, local06
1edf8     13 FB 01 F6 | 	mov	result1, local05
1edfc                 | LR__2633
1edfc     A7 F0 03 F6 | 	mov	ptra, fp
1ee00     B2 00 A0 FD | 	call	#popregs_
1ee04                 | __system___basic_read_line_ret
1ee04     2D 00 64 FD | 	ret
1ee08                 | 
1ee08                 | __system___waitms
1ee08     09 01 02 F6 | 	mov	_var01, arg01
1ee0c     1A 02 62 FD | 	getct	_var02
1ee10     14 04 06 FB | 	rdlong	_var03, #20
1ee14     97 14 48 FB | 	callpa	#(@LR__2641-@LR__2640)>>2,fcache_load_ptr_
1ee18                 | LR__2640
1ee18     01 00 00 FF 
1ee1c     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
1ee20     1C 00 90 CD |  if_b	jmp	#LR__2642
1ee24     02 03 02 F1 | 	add	_var02, _var03
1ee28     01 13 02 F6 | 	mov	arg01, _var02
1ee2c     00 12 66 FA | 	addct1	arg01, #0
1ee30     24 22 60 FD | 	waitct1
1ee34     01 00 00 FF 
1ee38     E8 01 86 F1 | 	sub	_var01, ##1000
1ee3c     D8 FF 9F FD | 	jmp	#LR__2640
1ee40                 | LR__2641
1ee40                 | LR__2642
1ee40     01 00 56 F2 | 	cmps	_var01, #1 wc
1ee44     28 00 90 CD |  if_b	jmp	#LR__2643
1ee48     02 01 02 FD | 	qmul	_var01, _var03
1ee4c     01 00 00 FF 
1ee50     E8 17 06 F6 | 	mov	arg03, ##1000
1ee54     19 FA 61 FD | 	getqy	result1
1ee58     18 12 62 FD | 	getqx	arg01
1ee5c     28 FA 61 FD | 	setq	result1
1ee60     0B 13 12 FD | 	qdiv	arg01, arg03
1ee64     18 12 62 FD | 	getqx	arg01
1ee68     01 13 62 FA | 	addct1	arg01, _var02
1ee6c     24 22 60 FD | 	waitct1
1ee70                 | LR__2643
1ee70                 | __system___waitms_ret
1ee70     2D 00 64 FD | 	ret
1ee74                 | 
1ee74                 | __system___waitus
1ee74     09 01 02 F6 | 	mov	_var01, arg01
1ee78     1A 02 62 FD | 	getct	_var02
1ee7c     14 04 06 FB | 	rdlong	_var03, #20
1ee80     97 14 48 FB | 	callpa	#(@LR__2651-@LR__2650)>>2,fcache_load_ptr_
1ee84                 | LR__2650
1ee84     A1 07 00 FF 
1ee88     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
1ee8c     1C 00 90 CD |  if_b	jmp	#LR__2652
1ee90     02 03 02 F1 | 	add	_var02, _var03
1ee94     01 13 02 F6 | 	mov	arg01, _var02
1ee98     00 12 66 FA | 	addct1	arg01, #0
1ee9c     24 22 60 FD | 	waitct1
1eea0     A1 07 00 FF 
1eea4     40 00 86 F1 | 	sub	_var01, ##1000000
1eea8     D8 FF 9F FD | 	jmp	#LR__2650
1eeac                 | LR__2651
1eeac                 | LR__2652
1eeac     01 00 56 F2 | 	cmps	_var01, #1 wc
1eeb0     28 00 90 CD |  if_b	jmp	#LR__2653
1eeb4     02 01 02 FD | 	qmul	_var01, _var03
1eeb8     A1 07 00 FF 
1eebc     40 16 06 F6 | 	mov	arg03, ##1000000
1eec0     19 FA 61 FD | 	getqy	result1
1eec4     18 12 62 FD | 	getqx	arg01
1eec8     28 FA 61 FD | 	setq	result1
1eecc     0B 13 12 FD | 	qdiv	arg01, arg03
1eed0     18 FA 61 FD | 	getqx	result1
1eed4     FD 02 62 FA | 	addct1	_var02, result1
1eed8     24 22 60 FD | 	waitct1
1eedc                 | LR__2653
1eedc                 | __system___waitus_ret
1eedc     2D 00 64 FD | 	ret
1eee0                 | 
1eee0                 | __system___mount
1eee0     0B 4A 05 F6 | 	mov	COUNT_, #11
1eee4     A8 00 A0 FD | 	call	#pushregs_
1eee8     09 1F 02 F6 | 	mov	local01, arg01
1eeec     0A 21 0A F6 | 	mov	local02, arg02 wz
1eef0     01 22 66 F6 | 	neg	local03, #1
1eef4     01 FA 65 A6 |  if_e	neg	result1, #1
1eef8     98 02 90 AD |  if_e	jmp	#LR__2675
1eefc     0F FB C1 FA | 	rdbyte	result1, local01
1ef00     2F FA 0D F2 | 	cmp	result1, #47 wz
1ef04     28 00 90 5D |  if_ne	jmp	#LR__2662
1ef08     0F 13 02 F6 | 	mov	arg01, local01
1ef0c     09 25 02 F6 | 	mov	local04, arg01
1ef10     97 06 48 FB | 	callpa	#(@LR__2661-@LR__2660)>>2,fcache_load_ptr_
1ef14                 | LR__2660
1ef14     12 FB C9 FA | 	rdbyte	result1, local04 wz
1ef18     01 24 06 51 |  if_ne	add	local04, #1
1ef1c     F4 FF 9F 5D |  if_ne	jmp	#LR__2660
1ef20                 | LR__2661
1ef20     09 25 82 F1 | 	sub	local04, arg01
1ef24     12 FB 01 F6 | 	mov	result1, local04
1ef28     10 FA 55 F2 | 	cmps	result1, #16 wc
1ef2c     14 00 90 CD |  if_b	jmp	#LR__2663
1ef30                 | LR__2662
1ef30     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1ef34     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
1ef38     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1ef3c     01 FA 65 F6 | 	neg	result1, #1
1ef40     50 02 90 FD | 	jmp	#LR__2675
1ef44                 | LR__2663
1ef44     00 26 06 F6 | 	mov	local05, #0
1ef48                 | LR__2664
1ef48     04 26 56 F2 | 	cmps	local05, #4 wc
1ef4c     B0 00 90 3D |  if_ae	jmp	#LR__2669
1ef50     13 13 02 F6 | 	mov	arg01, local05
1ef54     02 12 66 F0 | 	shl	arg01, #2
1ef58     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1ef5c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1ef60     09 FB 09 FB | 	rdlong	result1, arg01 wz
1ef64     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1ef68     00 22 56 A2 |  if_e	cmps	local03, #0 wc
1ef6c     13 23 02 86 |  if_c_and_z	mov	local03, local05
1ef70     84 00 90 8D |  if_c_and_z	jmp	#LR__2668
1ef74     13 13 02 F6 | 	mov	arg01, local05
1ef78     02 12 66 F0 | 	shl	arg01, #2
1ef7c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1ef80     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
1ef84     09 13 02 FB | 	rdlong	arg01, arg01
1ef88     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1ef8c     09 25 02 F6 | 	mov	local04, arg01
1ef90     97 06 48 FB | 	callpa	#(@LR__2666-@LR__2665)>>2,fcache_load_ptr_
1ef94                 | LR__2665
1ef94     12 FB C9 FA | 	rdbyte	result1, local04 wz
1ef98     01 24 06 51 |  if_ne	add	local04, #1
1ef9c     F4 FF 9F 5D |  if_ne	jmp	#LR__2665
1efa0                 | LR__2666
1efa0     09 25 82 F1 | 	sub	local04, arg01
1efa4     12 29 02 F6 | 	mov	local06, local04
1efa8     14 13 02 F6 | 	mov	arg01, local06
1efac     0F 13 02 F1 | 	add	arg01, local01
1efb0     09 FB C1 FA | 	rdbyte	result1, arg01
1efb4     2F FA 0D F2 | 	cmp	result1, #47 wz
1efb8     14 2B 02 56 |  if_ne	mov	local07, local06
1efbc     0F 2B 02 51 |  if_ne	add	local07, local01
1efc0     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
1efc4     30 00 90 5D |  if_ne	jmp	#LR__2667
1efc8     13 17 02 F6 | 	mov	arg03, local05
1efcc     02 16 66 F0 | 	shl	arg03, #2
1efd0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1efd4     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1efd8     0B 15 02 FB | 	rdlong	arg02, arg03
1efdc     0F 13 02 F6 | 	mov	arg01, local01
1efe0     14 17 02 F6 | 	mov	arg03, local06
1efe4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1efe8     80 4D B0 FD | 	call	#__system__strncmp
1efec     00 FA 0D F2 | 	cmp	result1, #0 wz
1eff0     13 23 02 A6 |  if_e	mov	local03, local05
1eff4     08 00 90 AD |  if_e	jmp	#LR__2669
1eff8                 | LR__2667
1eff8                 | LR__2668
1eff8     01 26 06 F1 | 	add	local05, #1
1effc     48 FF 9F FD | 	jmp	#LR__2664
1f000                 | LR__2669
1f000     FF FF 7F FF 
1f004     FF 23 0E F2 | 	cmp	local03, ##-1 wz
1f008     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
1f00c     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
1f010     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
1f014     01 FA 65 A6 |  if_e	neg	result1, #1
1f018     78 01 90 AD |  if_e	jmp	#LR__2675
1f01c     11 27 02 F6 | 	mov	local05, local03
1f020     13 2B 02 F6 | 	mov	local07, local05
1f024     02 2A 66 F0 | 	shl	local07, #2
1f028     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1f02c     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
1f030     15 29 0A FB | 	rdlong	local06, local07 wz
1f034     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1f038     58 00 90 AD |  if_e	jmp	#LR__2670
1f03c     4C 28 06 F1 | 	add	local06, #76
1f040     14 2B 0A FB | 	rdlong	local07, local06 wz
1f044     4C 28 86 F1 | 	sub	local06, #76
1f048     48 00 90 AD |  if_e	jmp	#LR__2670
1f04c     4C 28 06 F1 | 	add	local06, #76
1f050     14 2B 02 FB | 	rdlong	local07, local06
1f054     15 23 02 F6 | 	mov	local03, local07
1f058     13 2A 46 F7 | 	zerox	local07, #19
1f05c     14 22 46 F0 | 	shr	local03, #20
1f060     02 22 66 F0 | 	shl	local03, #2
1f064     ED 22 02 F1 | 	add	local03, __methods__
1f068     11 23 02 FB | 	rdlong	local03, local03
1f06c     13 29 02 F6 | 	mov	local06, local05
1f070     02 28 66 F0 | 	shl	local06, #2
1f074     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f078     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1f07c     14 13 02 FB | 	rdlong	arg01, local06
1f080     F2 28 02 F6 | 	mov	local06, objptr
1f084     15 E5 01 F6 | 	mov	objptr, local07
1f088     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f08c     2D 22 62 FD | 	call	local03
1f090     14 E5 01 F6 | 	mov	objptr, local06
1f094                 | LR__2670
1f094     13 2D 02 F6 | 	mov	local08, local05
1f098     02 2C 66 F0 | 	shl	local08, #2
1f09c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1f0a0     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1f0a4     16 21 62 FC | 	wrlong	local02, local08
1f0a8     00 20 0E F2 | 	cmp	local02, #0 wz
1f0ac     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1f0b0     18 00 90 5D |  if_ne	jmp	#LR__2671
1f0b4     02 26 66 F0 | 	shl	local05, #2
1f0b8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f0bc     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1f0c0     13 01 68 FC | 	wrlong	#0, local05
1f0c4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f0c8     C4 00 90 FD | 	jmp	#LR__2674
1f0cc                 | LR__2671
1f0cc     13 2F 02 F6 | 	mov	local09, local05
1f0d0     04 2E 66 F0 | 	shl	local09, #4
1f0d4     24 E6 05 F1 | 	add	ptr___system__dat__, #36
1f0d8     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
1f0dc     17 13 02 F6 | 	mov	arg01, local09
1f0e0     0F 15 02 F6 | 	mov	arg02, local01
1f0e4     10 16 06 F6 | 	mov	arg03, #16
1f0e8     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
1f0ec     D0 4B B0 FD | 	call	#__system__strncpy
1f0f0     48 20 06 F1 | 	add	local02, #72
1f0f4     10 2D 0A FB | 	rdlong	local08, local02 wz
1f0f8     48 20 86 F1 | 	sub	local02, #72
1f0fc     7C 00 90 AD |  if_e	jmp	#LR__2673
1f100     48 20 06 F1 | 	add	local02, #72
1f104     10 2D 02 FB | 	rdlong	local08, local02
1f108     16 31 02 F6 | 	mov	local10, local08
1f10c     13 2C 46 F7 | 	zerox	local08, #19
1f110     14 30 46 F0 | 	shr	local10, #20
1f114     02 30 66 F0 | 	shl	local10, #2
1f118     ED 30 02 F1 | 	add	local10, __methods__
1f11c     18 31 02 FB | 	rdlong	local10, local10
1f120     17 13 02 F6 | 	mov	arg01, local09
1f124     F2 32 02 F6 | 	mov	local11, objptr
1f128     16 E5 01 F6 | 	mov	objptr, local08
1f12c     2D 30 62 FD | 	call	local10
1f130     19 E5 01 F6 | 	mov	objptr, local11
1f134     FD 12 0A F6 | 	mov	arg01, result1 wz
1f138     40 00 90 AD |  if_e	jmp	#LR__2672
1f13c     13 2D 02 F6 | 	mov	local08, local05
1f140     02 2C 66 F0 | 	shl	local08, #2
1f144     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1f148     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
1f14c     16 01 68 FC | 	wrlong	#0, local08
1f150     02 26 66 F0 | 	shl	local05, #2
1f154     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
1f158     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1f15c     13 01 68 FC | 	wrlong	#0, local05
1f160     09 13 6A F6 | 	neg	arg01, arg01 wz
1f164     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
1f168     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1f16c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1f170     01 FA 65 56 |  if_ne	neg	result1, #1
1f174     00 FA 05 A6 |  if_e	mov	result1, #0
1f178     18 00 90 FD | 	jmp	#LR__2675
1f17c                 | LR__2672
1f17c                 | LR__2673
1f17c     02 26 66 F0 | 	shl	local05, #2
1f180     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f184     F3 26 02 F1 | 	add	local05, ptr___system__dat__
1f188     13 2F 62 FC | 	wrlong	local09, local05
1f18c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f190                 | LR__2674
1f190     00 FA 05 F6 | 	mov	result1, #0
1f194                 | LR__2675
1f194     A7 F0 03 F6 | 	mov	ptra, fp
1f198     B2 00 A0 FD | 	call	#popregs_
1f19c                 | __system___mount_ret
1f19c     2D 00 64 FD | 	ret
1f1a0                 | 
1f1a0                 | __system___chdir
1f1a0     00 4A 05 F6 | 	mov	COUNT_, #0
1f1a4     A8 00 A0 FD | 	call	#pushregs_
1f1a8     40 F0 07 F1 | 	add	ptra, #64
1f1ac     04 4E 05 F1 | 	add	fp, #4
1f1b0     A7 12 62 FC | 	wrlong	arg01, fp
1f1b4     04 4E 05 F1 | 	add	fp, #4
1f1b8     A7 14 02 F6 | 	mov	arg02, fp
1f1bc     08 4E 85 F1 | 	sub	fp, #8
1f1c0     DC 47 B0 FD | 	call	#__system__stat
1f1c4     3C 4E 05 F1 | 	add	fp, #60
1f1c8     A7 FA 61 FC | 	wrlong	result1, fp
1f1cc     3C 4E 85 F1 | 	sub	fp, #60
1f1d0     00 FA 0D F2 | 	cmp	result1, #0 wz
1f1d4     3C 4E 05 51 |  if_ne	add	fp, #60
1f1d8     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1f1dc     3C 4E 85 51 |  if_ne	sub	fp, #60
1f1e0     BC 00 90 5D |  if_ne	jmp	#LR__2682
1f1e4     10 4E 05 F1 | 	add	fp, #16
1f1e8     A7 12 02 FB | 	rdlong	arg01, fp
1f1ec     10 4E 85 F1 | 	sub	fp, #16
1f1f0     78 00 00 FF 
1f1f4     00 12 06 F5 | 	and	arg01, ##61440
1f1f8     08 00 00 FF 
1f1fc     00 12 0E F2 | 	cmp	arg01, ##4096 wz
1f200     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
1f204     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
1f208     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
1f20c     01 FA 65 56 |  if_ne	neg	result1, #1
1f210     8C 00 90 5D |  if_ne	jmp	#LR__2682
1f214     04 4E 05 F1 | 	add	fp, #4
1f218     A7 16 02 FB | 	rdlong	arg03, fp
1f21c     04 4E 85 F1 | 	sub	fp, #4
1f220     0B 17 C2 FA | 	rdbyte	arg03, arg03
1f224     2F 16 0E F2 | 	cmp	arg03, #47 wz
1f228     24 00 90 5D |  if_ne	jmp	#LR__2680
1f22c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1f230     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1f234     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1f238     04 4E 05 F1 | 	add	fp, #4
1f23c     A7 14 02 FB | 	rdlong	arg02, fp
1f240     04 4E 85 F1 | 	sub	fp, #4
1f244     00 17 06 F6 | 	mov	arg03, #256
1f248     74 4A B0 FD | 	call	#__system__strncpy
1f24c     4C 00 90 FD | 	jmp	#LR__2681
1f250                 | LR__2680
1f250     84 E7 05 F1 | 	add	ptr___system__dat__, #388
1f254     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
1f258     38 4E 05 F1 | 	add	fp, #56
1f25c     A7 12 62 FC | 	wrlong	arg01, fp
1f260     38 4E 85 F1 | 	sub	fp, #56
1f264     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
1f268     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1f26c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1f270     00 17 06 F6 | 	mov	arg03, #256
1f274     48 4A B0 FD | 	call	#__system__strncpy
1f278     38 4E 05 F1 | 	add	fp, #56
1f27c     A7 12 02 FB | 	rdlong	arg01, fp
1f280     34 4E 85 F1 | 	sub	fp, #52
1f284     A7 14 02 FB | 	rdlong	arg02, fp
1f288     04 4E 85 F1 | 	sub	fp, #4
1f28c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1f290     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
1f294     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1f298     10 00 B0 FD | 	call	#__system____getvfsforfile
1f29c                 | LR__2681
1f29c     00 FA 05 F6 | 	mov	result1, #0
1f2a0                 | LR__2682
1f2a0     A7 F0 03 F6 | 	mov	ptra, fp
1f2a4     B2 00 A0 FD | 	call	#popregs_
1f2a8                 | __system___chdir_ret
1f2a8     2D 00 64 FD | 	ret
1f2ac                 | 
1f2ac                 | __system____getvfsforfile
1f2ac     0E 4A 05 F6 | 	mov	COUNT_, #14
1f2b0     A8 00 A0 FD | 	call	#pushregs_
1f2b4     09 1F 02 F6 | 	mov	local01, arg01
1f2b8     0A 21 02 F6 | 	mov	local02, arg02
1f2bc     0B 23 02 F6 | 	mov	local03, arg03
1f2c0     97 10 48 FB | 	callpa	#(@LR__2691-@LR__2690)>>2,fcache_load_ptr_
1f2c4                 | LR__2690
1f2c4     10 FB C1 FA | 	rdbyte	result1, local02
1f2c8     2F FA 0D F2 | 	cmp	result1, #47 wz
1f2cc     01 20 06 A1 |  if_e	add	local02, #1
1f2d0     10 25 C2 AA |  if_e	rdbyte	local04, local02
1f2d4     01 20 86 A1 |  if_e	sub	local02, #1
1f2d8     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
1f2dc     01 20 06 A1 |  if_e	add	local02, #1
1f2e0     E0 FF 9F AD |  if_e	jmp	#LR__2690
1f2e4                 | LR__2691
1f2e4     10 25 C2 FA | 	rdbyte	local04, local02
1f2e8     2F 24 0E F2 | 	cmp	local04, #47 wz
1f2ec     14 00 90 5D |  if_ne	jmp	#LR__2692
1f2f0     0F 13 02 F6 | 	mov	arg01, local01
1f2f4     10 15 02 F6 | 	mov	arg02, local02
1f2f8     00 17 06 F6 | 	mov	arg03, #256
1f2fc     C0 49 B0 FD | 	call	#__system__strncpy
1f300     7C 00 90 FD | 	jmp	#LR__2694
1f304                 | LR__2692
1f304     84 E6 05 F1 | 	add	ptr___system__dat__, #132
1f308     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
1f30c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
1f310     0F 13 02 F6 | 	mov	arg01, local01
1f314     00 17 06 F6 | 	mov	arg03, #256
1f318     A4 49 B0 FD | 	call	#__system__strncpy
1f31c     10 25 CA FA | 	rdbyte	local04, local02 wz
1f320     5C 00 90 AD |  if_e	jmp	#LR__2693
1f324     10 25 C2 FA | 	rdbyte	local04, local02
1f328     2E 24 0E F2 | 	cmp	local04, #46 wz
1f32c     01 20 06 A1 |  if_e	add	local02, #1
1f330     10 27 C2 AA |  if_e	rdbyte	local05, local02
1f334     01 20 86 A1 |  if_e	sub	local02, #1
1f338     13 29 02 A6 |  if_e	mov	local06, local05
1f33c     07 28 4E A7 |  if_e	zerox	local06, #7 wz
1f340     3C 00 90 AD |  if_e	jmp	#LR__2693
1f344     0F 27 C2 FA | 	rdbyte	local05, local01
1f348     2F 26 0E F2 | 	cmp	local05, #47 wz
1f34c     01 1E 06 A1 |  if_e	add	local01, #1
1f350     0F 25 C2 AA |  if_e	rdbyte	local04, local01
1f354     01 1E 86 A1 |  if_e	sub	local01, #1
1f358     00 24 4E A2 |  if_e	cmps	local04, #0 wz
1f35c     70 01 00 5F 
1f360     90 14 06 56 |  if_ne	mov	arg02, ##@LR__4750
1f364     0F 13 02 56 |  if_ne	mov	arg01, local01
1f368     00 17 06 56 |  if_ne	mov	arg03, #256
1f36c     9C 49 B0 5D |  if_ne	call	#__system__strncat
1f370     0F 13 02 F6 | 	mov	arg01, local01
1f374     10 15 02 F6 | 	mov	arg02, local02
1f378     00 17 06 F6 | 	mov	arg03, #256
1f37c     8C 49 B0 FD | 	call	#__system__strncat
1f380                 | LR__2693
1f380                 | LR__2694
1f380     0F 13 02 F6 | 	mov	arg01, local01
1f384     44 4B B0 FD | 	call	#__system___normalizeName
1f388     0F 25 CA FA | 	rdbyte	local04, local01 wz
1f38c     1C 00 90 AD |  if_e	jmp	#LR__2695
1f390     0F 25 C2 FA | 	rdbyte	local04, local01
1f394     2F 24 0E F2 | 	cmp	local04, #47 wz
1f398     01 1E 06 A1 |  if_e	add	local01, #1
1f39c     0F 29 C2 AA |  if_e	rdbyte	local06, local01
1f3a0     01 1E 86 A1 |  if_e	sub	local01, #1
1f3a4     00 28 4E A2 |  if_e	cmps	local06, #0 wz
1f3a8     18 00 90 5D |  if_ne	jmp	#LR__2696
1f3ac                 | LR__2695
1f3ac     01 00 00 FF 
1f3b0     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
1f3b4     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
1f3b8     01 00 00 FF 
1f3bc     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
1f3c0     EC 01 90 FD | 	jmp	#LR__2710
1f3c4                 | LR__2696
1f3c4     00 2A 06 F6 | 	mov	local07, #0
1f3c8                 | LR__2697
1f3c8     04 2A 56 F2 | 	cmps	local07, #4 wc
1f3cc     CC 01 90 3D |  if_ae	jmp	#LR__2709
1f3d0     15 29 02 F6 | 	mov	local06, local07
1f3d4     02 28 66 F0 | 	shl	local06, #2
1f3d8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f3dc     F3 28 02 F1 | 	add	local06, ptr___system__dat__
1f3e0     14 29 0A FB | 	rdlong	local06, local06 wz
1f3e4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f3e8     A8 01 90 AD |  if_e	jmp	#LR__2708
1f3ec     15 25 02 F6 | 	mov	local04, local07
1f3f0     02 24 66 F0 | 	shl	local04, #2
1f3f4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f3f8     F3 24 02 F1 | 	add	local04, ptr___system__dat__
1f3fc     12 13 02 FB | 	rdlong	arg01, local04
1f400     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f404     09 2D 02 F6 | 	mov	local08, arg01
1f408     97 06 48 FB | 	callpa	#(@LR__2699-@LR__2698)>>2,fcache_load_ptr_
1f40c                 | LR__2698
1f40c     16 FB C9 FA | 	rdbyte	result1, local08 wz
1f410     01 2C 06 51 |  if_ne	add	local08, #1
1f414     F4 FF 9F 5D |  if_ne	jmp	#LR__2698
1f418                 | LR__2699
1f418     09 2D 82 F1 | 	sub	local08, arg01
1f41c     16 2F 02 F6 | 	mov	local09, local08
1f420     17 25 02 F6 | 	mov	local04, local09
1f424     0F 25 02 F1 | 	add	local04, local01
1f428     12 29 C2 FA | 	rdbyte	local06, local04
1f42c     2F 28 0E F2 | 	cmp	local06, #47 wz
1f430     17 31 02 56 |  if_ne	mov	local10, local09
1f434     0F 31 02 51 |  if_ne	add	local10, local01
1f438     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
1f43c     54 01 90 5D |  if_ne	jmp	#LR__2707
1f440     15 17 02 F6 | 	mov	arg03, local07
1f444     02 16 66 F0 | 	shl	arg03, #2
1f448     64 E6 05 F1 | 	add	ptr___system__dat__, #100
1f44c     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
1f450     0B 15 02 FB | 	rdlong	arg02, arg03
1f454     17 17 02 F6 | 	mov	arg03, local09
1f458     0F 13 02 F6 | 	mov	arg01, local01
1f45c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
1f460     08 49 B0 FD | 	call	#__system__strncmp
1f464     00 FA 4D F2 | 	cmps	result1, #0 wz
1f468     28 01 90 5D |  if_ne	jmp	#LR__2707
1f46c     15 33 02 F6 | 	mov	local11, local07
1f470     02 32 66 F0 | 	shl	local11, #2
1f474     74 E6 05 F1 | 	add	ptr___system__dat__, #116
1f478     F3 32 02 F1 | 	add	local11, ptr___system__dat__
1f47c     19 35 02 FB | 	rdlong	local12, local11
1f480     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
1f484     97 22 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
1f488                 | LR__2700
1f488     17 29 02 F6 | 	mov	local06, local09
1f48c     01 28 06 F1 | 	add	local06, #1
1f490     0F 29 02 F1 | 	add	local06, local01
1f494     14 33 C2 FA | 	rdbyte	local11, local06
1f498     2E 32 0E F2 | 	cmp	local11, #46 wz
1f49c     2C 00 90 5D |  if_ne	jmp	#LR__2702
1f4a0     17 33 02 F6 | 	mov	local11, local09
1f4a4     02 32 06 F1 | 	add	local11, #2
1f4a8     0F 33 02 F1 | 	add	local11, local01
1f4ac     19 31 C2 FA | 	rdbyte	local10, local11
1f4b0     2F 30 0E F2 | 	cmp	local10, #47 wz
1f4b4     17 37 02 56 |  if_ne	mov	local13, local09
1f4b8     02 36 06 51 |  if_ne	add	local13, #2
1f4bc     0F 37 02 51 |  if_ne	add	local13, local01
1f4c0     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
1f4c4     01 2E 06 A1 |  if_e	add	local09, #1
1f4c8     BC FF 9F AD |  if_e	jmp	#LR__2700
1f4cc                 | LR__2701
1f4cc                 | LR__2702
1f4cc     00 22 0E F2 | 	cmp	local03, #0 wz
1f4d0     11 13 02 56 |  if_ne	mov	arg01, local03
1f4d4     0F 15 02 56 |  if_ne	mov	arg02, local01
1f4d8     00 17 06 56 |  if_ne	mov	arg03, #256
1f4dc     E0 47 B0 5D |  if_ne	call	#__system__strncpy
1f4e0     0F 15 02 F6 | 	mov	arg02, local01
1f4e4     17 15 02 F1 | 	add	arg02, local09
1f4e8     01 14 06 F1 | 	add	arg02, #1
1f4ec     0F 13 02 F6 | 	mov	arg01, local01
1f4f0     D4 F5 BF FD | 	call	#__system____builtin_strcpy
1f4f4     0F 13 02 F6 | 	mov	arg01, local01
1f4f8     09 2D 02 F6 | 	mov	local08, arg01
1f4fc     97 06 48 FB | 	callpa	#(@LR__2704-@LR__2703)>>2,fcache_load_ptr_
1f500                 | LR__2703
1f500     16 FB C9 FA | 	rdbyte	result1, local08 wz
1f504     01 2C 06 51 |  if_ne	add	local08, #1
1f508     F4 FF 9F 5D |  if_ne	jmp	#LR__2703
1f50c                 | LR__2704
1f50c     09 2D 82 F1 | 	sub	local08, arg01
1f510     16 2F 02 F6 | 	mov	local09, local08
1f514                 | LR__2705
1f514     01 2E 56 F2 | 	cmps	local09, #1 wc
1f518     70 00 90 CD |  if_b	jmp	#LR__2706
1f51c     17 25 02 F6 | 	mov	local04, local09
1f520     0F 25 02 F1 | 	add	local04, local01
1f524     12 33 C2 FA | 	rdbyte	local11, local04
1f528     2F 32 0E F2 | 	cmp	local11, #47 wz
1f52c     17 33 02 A6 |  if_e	mov	local11, local09
1f530     0F 33 02 A1 |  if_e	add	local11, local01
1f534     19 01 48 AC |  if_e	wrbyte	#0, local11
1f538     01 2E 86 A1 |  if_e	sub	local09, #1
1f53c     D4 FF 9F AD |  if_e	jmp	#LR__2705
1f540     17 25 02 F6 | 	mov	local04, local09
1f544     0F 25 02 F1 | 	add	local04, local01
1f548     12 33 C2 FA | 	rdbyte	local11, local04
1f54c     2E 32 0E F2 | 	cmp	local11, #46 wz
1f550     38 00 90 5D |  if_ne	jmp	#LR__2706
1f554     02 2E 56 F2 | 	cmps	local09, #2 wc
1f558     30 00 90 CD |  if_b	jmp	#LR__2706
1f55c     17 39 02 F6 | 	mov	local14, local09
1f560     01 38 86 F1 | 	sub	local14, #1
1f564     0F 39 02 F1 | 	add	local14, local01
1f568     1C 27 C2 FA | 	rdbyte	local05, local14
1f56c     2F 26 0E F2 | 	cmp	local05, #47 wz
1f570     18 00 90 5D |  if_ne	jmp	#LR__2706
1f574     17 25 02 F6 | 	mov	local04, local09
1f578     01 24 86 F1 | 	sub	local04, #1
1f57c     0F 25 02 F1 | 	add	local04, local01
1f580     12 01 48 FC | 	wrbyte	#0, local04
1f584     02 2E 86 F1 | 	sub	local09, #2
1f588     88 FF 9F FD | 	jmp	#LR__2705
1f58c                 | LR__2706
1f58c     1A FB 01 F6 | 	mov	result1, local12
1f590     1C 00 90 FD | 	jmp	#LR__2710
1f594                 | LR__2707
1f594                 | LR__2708
1f594     01 2A 06 F1 | 	add	local07, #1
1f598     2C FE 9F FD | 	jmp	#LR__2697
1f59c                 | LR__2709
1f59c     03 00 00 FF 
1f5a0     38 E7 05 F1 | 	add	ptr___system__dat__, ##1848
1f5a4     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1f5a8     03 00 00 FF 
1f5ac     38 E7 85 F1 | 	sub	ptr___system__dat__, ##1848
1f5b0                 | LR__2710
1f5b0     A7 F0 03 F6 | 	mov	ptra, fp
1f5b4     B2 00 A0 FD | 	call	#popregs_
1f5b8                 | __system____getvfsforfile_ret
1f5b8     2D 00 64 FD | 	ret
1f5bc                 | 
1f5bc                 | __system___basic_open
1f5bc     05 4A 05 F6 | 	mov	COUNT_, #5
1f5c0     A8 00 A0 FD | 	call	#pushregs_
1f5c4     0A 1F 02 F6 | 	mov	local01, arg02
1f5c8     0B 21 02 F6 | 	mov	local02, arg03
1f5cc     0C 23 02 F6 | 	mov	local03, arg04
1f5d0     00 24 06 F6 | 	mov	local04, #0
1f5d4     C0 46 B0 FD | 	call	#__system____getftab
1f5d8     FD 26 0A F6 | 	mov	local05, result1 wz
1f5dc     18 00 90 5D |  if_ne	jmp	#LR__2720
1f5e0     EE 12 02 F6 | 	mov	arg01, abortchain
1f5e4     0C 14 06 F6 | 	mov	arg02, #12
1f5e8     01 16 06 F6 | 	mov	arg03, #1
1f5ec     DA 00 A0 FD | 	call	#__longjmp
1f5f0     01 FA 65 F6 | 	neg	result1, #1
1f5f4     14 01 90 FD | 	jmp	#LR__2729
1f5f8                 | LR__2720
1f5f8     08 26 06 F1 | 	add	local05, #8
1f5fc     13 FB 09 FB | 	rdlong	result1, local05 wz
1f600     08 26 86 F1 | 	sub	local05, #8
1f604     13 13 02 56 |  if_ne	mov	arg01, local05
1f608     1C 3E B0 5D |  if_ne	call	#__system___closeraw
1f60c     00 1E 0E F2 | 	cmp	local01, #0 wz
1f610     00 20 0E A2 |  if_e	cmp	local02, #0 wz
1f614     00 22 0E A2 |  if_e	cmp	local03, #0 wz
1f618     3C 00 90 AD |  if_e	jmp	#LR__2722
1f61c     0C 12 06 F6 | 	mov	arg01, #12
1f620     04 33 B0 FD | 	call	#__system___gc_alloc_managed
1f624     FD 24 0A F6 | 	mov	local04, result1 wz
1f628     18 00 90 5D |  if_ne	jmp	#LR__2721
1f62c     EE 12 02 F6 | 	mov	arg01, abortchain
1f630     07 14 06 F6 | 	mov	arg02, #7
1f634     01 16 06 F6 | 	mov	arg03, #1
1f638     DA 00 A0 FD | 	call	#__longjmp
1f63c     01 FA 65 F6 | 	neg	result1, #1
1f640     C8 00 90 FD | 	jmp	#LR__2729
1f644                 | LR__2721
1f644     12 01 68 FC | 	wrlong	#0, local04
1f648     04 24 06 F1 | 	add	local04, #4
1f64c     12 01 68 FC | 	wrlong	#0, local04
1f650     04 24 86 F1 | 	sub	local04, #4
1f654     13 25 62 FC | 	wrlong	local04, local05
1f658                 | LR__2722
1f658     00 1E 0E F2 | 	cmp	local01, #0 wz
1f65c     20 00 90 AD |  if_e	jmp	#LR__2723
1f660     12 1F 62 FC | 	wrlong	local01, local04
1f664     12 FB 01 F6 | 	mov	result1, local04
1f668     00 20 04 FF 
1f66c     00 FA 45 F5 | 	or	result1, ##138412032
1f670     1C 26 06 F1 | 	add	local05, #28
1f674     13 FB 61 FC | 	wrlong	result1, local05
1f678     1C 26 86 F1 | 	sub	local05, #28
1f67c     0C 00 90 FD | 	jmp	#LR__2724
1f680                 | LR__2723
1f680     1C 26 06 F1 | 	add	local05, #28
1f684     13 01 68 FC | 	wrlong	#0, local05
1f688     1C 26 86 F1 | 	sub	local05, #28
1f68c                 | LR__2724
1f68c     00 20 0E F2 | 	cmp	local02, #0 wz
1f690     28 00 90 AD |  if_e	jmp	#LR__2725
1f694     04 24 06 F1 | 	add	local04, #4
1f698     12 21 62 FC | 	wrlong	local02, local04
1f69c     04 24 86 F1 | 	sub	local04, #4
1f6a0     12 FB 01 F6 | 	mov	result1, local04
1f6a4     00 28 04 FF 
1f6a8     00 FA 45 F5 | 	or	result1, ##139460608
1f6ac     20 26 06 F1 | 	add	local05, #32
1f6b0     13 FB 61 FC | 	wrlong	result1, local05
1f6b4     20 26 86 F1 | 	sub	local05, #32
1f6b8     0C 00 90 FD | 	jmp	#LR__2726
1f6bc                 | LR__2725
1f6bc     20 26 06 F1 | 	add	local05, #32
1f6c0     13 01 68 FC | 	wrlong	#0, local05
1f6c4     20 26 86 F1 | 	sub	local05, #32
1f6c8                 | LR__2726
1f6c8     00 22 0E F2 | 	cmp	local03, #0 wz
1f6cc     24 00 90 AD |  if_e	jmp	#LR__2727
1f6d0     08 24 06 F1 | 	add	local04, #8
1f6d4     12 23 62 FC | 	wrlong	local03, local04
1f6d8     08 24 86 F1 | 	sub	local04, #8
1f6dc     00 30 04 FF 
1f6e0     00 24 46 F5 | 	or	local04, ##140509184
1f6e4     24 26 06 F1 | 	add	local05, #36
1f6e8     13 25 62 FC | 	wrlong	local04, local05
1f6ec     24 26 86 F1 | 	sub	local05, #36
1f6f0     0C 00 90 FD | 	jmp	#LR__2728
1f6f4                 | LR__2727
1f6f4     24 26 06 F1 | 	add	local05, #36
1f6f8     13 01 68 FC | 	wrlong	#0, local05
1f6fc     24 26 86 F1 | 	sub	local05, #36
1f700                 | LR__2728
1f700     08 26 06 F1 | 	add	local05, #8
1f704     13 0F 68 FC | 	wrlong	#7, local05
1f708     00 FA 05 F6 | 	mov	result1, #0
1f70c                 | LR__2729
1f70c     A7 F0 03 F6 | 	mov	ptra, fp
1f710     B2 00 A0 FD | 	call	#popregs_
1f714                 | __system___basic_open_ret
1f714     2D 00 64 FD | 	ret
1f718                 | 
1f718                 | __system___basic_open_string
1f718     04 4A 05 F6 | 	mov	COUNT_, #4
1f71c     A8 00 A0 FD | 	call	#pushregs_
1f720     0A 1F 02 F6 | 	mov	local01, arg02
1f724     0B 21 02 F6 | 	mov	local02, arg03
1f728     6C 45 B0 FD | 	call	#__system____getftab
1f72c     FD 22 0A F6 | 	mov	local03, result1 wz
1f730     18 00 90 5D |  if_ne	jmp	#LR__2730
1f734     EE 12 02 F6 | 	mov	arg01, abortchain
1f738     0C 14 06 F6 | 	mov	arg02, #12
1f73c     01 16 06 F6 | 	mov	arg03, #1
1f740     DA 00 A0 FD | 	call	#__longjmp
1f744     01 FA 65 F6 | 	neg	result1, #1
1f748     58 00 90 FD | 	jmp	#LR__2732
1f74c                 | LR__2730
1f74c     08 22 06 F1 | 	add	local03, #8
1f750     11 19 0A FB | 	rdlong	arg04, local03 wz
1f754     08 22 86 F1 | 	sub	local03, #8
1f758     11 13 02 56 |  if_ne	mov	arg01, local03
1f75c     C8 3C B0 5D |  if_ne	call	#__system___closeraw
1f760     0F 15 02 F6 | 	mov	arg02, local01
1f764     10 17 02 F6 | 	mov	arg03, local02
1f768     11 13 02 F6 | 	mov	arg01, local03
1f76c     B6 19 06 F6 | 	mov	arg04, #438
1f770     B0 39 B0 FD | 	call	#__system___openraw
1f774     FD 24 02 F6 | 	mov	local04, result1
1f778     00 24 56 F2 | 	cmps	local04, #0 wc
1f77c     20 00 90 3D |  if_ae	jmp	#LR__2731
1f780     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1f784     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1f788     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1f78c     EE 12 02 F6 | 	mov	arg01, abortchain
1f790     01 16 06 F6 | 	mov	arg03, #1
1f794     DA 00 A0 FD | 	call	#__longjmp
1f798     01 FA 65 F6 | 	neg	result1, #1
1f79c     04 00 90 FD | 	jmp	#LR__2732
1f7a0                 | LR__2731
1f7a0     12 FB 01 F6 | 	mov	result1, local04
1f7a4                 | LR__2732
1f7a4     A7 F0 03 F6 | 	mov	ptra, fp
1f7a8     B2 00 A0 FD | 	call	#popregs_
1f7ac                 | __system___basic_open_string_ret
1f7ac     2D 00 64 FD | 	ret
1f7b0                 | 
1f7b0                 | __system___basic_print_char
1f7b0     03 4A 05 F6 | 	mov	COUNT_, #3
1f7b4     A8 00 A0 FD | 	call	#pushregs_
1f7b8     0A 1F 02 F6 | 	mov	local01, arg02
1f7bc     2C 4C B0 FD | 	call	#__system___gettxfunc
1f7c0     FD 20 0A F6 | 	mov	local02, result1 wz
1f7c4     00 FA 05 A6 |  if_e	mov	result1, #0
1f7c8     30 00 90 AD |  if_e	jmp	#LR__2740
1f7cc     10 23 02 F6 | 	mov	local03, local02
1f7d0     13 20 46 F7 | 	zerox	local02, #19
1f7d4     14 22 46 F0 | 	shr	local03, #20
1f7d8     02 22 66 F0 | 	shl	local03, #2
1f7dc     ED 22 02 F1 | 	add	local03, __methods__
1f7e0     11 23 02 FB | 	rdlong	local03, local03
1f7e4     0F 13 02 F6 | 	mov	arg01, local01
1f7e8     F2 1E 02 F6 | 	mov	local01, objptr
1f7ec     10 E5 01 F6 | 	mov	objptr, local02
1f7f0     2D 22 62 FD | 	call	local03
1f7f4     0F E5 01 F6 | 	mov	objptr, local01
1f7f8     01 FA 05 F6 | 	mov	result1, #1
1f7fc                 | LR__2740
1f7fc     A7 F0 03 F6 | 	mov	ptra, fp
1f800     B2 00 A0 FD | 	call	#popregs_
1f804                 | __system___basic_print_char_ret
1f804     2D 00 64 FD | 	ret
1f808                 | 
1f808                 | __system___basic_print_string
1f808     03 4A 05 F6 | 	mov	COUNT_, #3
1f80c     A8 00 A0 FD | 	call	#pushregs_
1f810     0A 1F 02 F6 | 	mov	local01, arg02
1f814     0B 21 02 F6 | 	mov	local02, arg03
1f818     D0 4B B0 FD | 	call	#__system___gettxfunc
1f81c     FD 22 0A F6 | 	mov	local03, result1 wz
1f820     00 FA 05 A6 |  if_e	mov	result1, #0
1f824     18 00 90 AD |  if_e	jmp	#LR__2750
1f828     00 1E 0E F2 | 	cmp	local01, #0 wz
1f82c     00 FA 05 A6 |  if_e	mov	result1, #0
1f830     11 13 02 56 |  if_ne	mov	arg01, local03
1f834     10 15 02 56 |  if_ne	mov	arg02, local02
1f838     0F 17 02 56 |  if_ne	mov	arg03, local01
1f83c     9C 01 B0 5D |  if_ne	call	#__system___fmtstr
1f840                 | LR__2750
1f840     A7 F0 03 F6 | 	mov	ptra, fp
1f844     B2 00 A0 FD | 	call	#popregs_
1f848                 | __system___basic_print_string_ret
1f848     2D 00 64 FD | 	ret
1f84c                 | 
1f84c                 | __system___basic_print_integer
1f84c     04 4A 05 F6 | 	mov	COUNT_, #4
1f850     A8 00 A0 FD | 	call	#pushregs_
1f854     0A 1F 02 F6 | 	mov	local01, arg02
1f858     0B 21 02 F6 | 	mov	local02, arg03
1f85c     0C 23 02 F6 | 	mov	local03, arg04
1f860     88 4B B0 FD | 	call	#__system___gettxfunc
1f864     FD 24 0A F6 | 	mov	local04, result1 wz
1f868     00 FA 05 A6 |  if_e	mov	result1, #0
1f86c     12 13 02 56 |  if_ne	mov	arg01, local04
1f870     10 15 02 56 |  if_ne	mov	arg02, local02
1f874     0F 17 02 56 |  if_ne	mov	arg03, local01
1f878     11 19 02 56 |  if_ne	mov	arg04, local03
1f87c     48 02 B0 5D |  if_ne	call	#__system___fmtnum
1f880     A7 F0 03 F6 | 	mov	ptra, fp
1f884     B2 00 A0 FD | 	call	#popregs_
1f888                 | __system___basic_print_integer_ret
1f888     2D 00 64 FD | 	ret
1f88c                 | 
1f88c                 | __system___basic_print_unsigned
1f88c     03 4A 05 F6 | 	mov	COUNT_, #3
1f890     A8 00 A0 FD | 	call	#pushregs_
1f894     0A 1F 02 F6 | 	mov	local01, arg02
1f898     0B 21 02 F6 | 	mov	local02, arg03
1f89c     0C 23 02 F6 | 	mov	local03, arg04
1f8a0     48 4B B0 FD | 	call	#__system___gettxfunc
1f8a4     FD 12 0A F6 | 	mov	arg01, result1 wz
1f8a8     00 FA 05 A6 |  if_e	mov	result1, #0
1f8ac     3A 20 26 54 |  if_ne	bith	local02, #58
1f8b0     10 15 02 56 |  if_ne	mov	arg02, local02
1f8b4     0F 17 02 56 |  if_ne	mov	arg03, local01
1f8b8     11 19 02 56 |  if_ne	mov	arg04, local03
1f8bc     08 02 B0 5D |  if_ne	call	#__system___fmtnum
1f8c0     A7 F0 03 F6 | 	mov	ptra, fp
1f8c4     B2 00 A0 FD | 	call	#popregs_
1f8c8                 | __system___basic_print_unsigned_ret
1f8c8     2D 00 64 FD | 	ret
1f8cc                 | 
1f8cc                 | __system___basic_get_char
1f8cc     03 4A 05 F6 | 	mov	COUNT_, #3
1f8d0     A8 00 A0 FD | 	call	#pushregs_
1f8d4     58 4B B0 FD | 	call	#__system___getrxfunc
1f8d8     FD 1E 0A F6 | 	mov	local01, result1 wz
1f8dc     01 FA 65 A6 |  if_e	neg	result1, #1
1f8e0     28 00 90 AD |  if_e	jmp	#LR__2760
1f8e4     0F 21 02 F6 | 	mov	local02, local01
1f8e8     13 1E 46 F7 | 	zerox	local01, #19
1f8ec     14 20 46 F0 | 	shr	local02, #20
1f8f0     02 20 66 F0 | 	shl	local02, #2
1f8f4     ED 20 02 F1 | 	add	local02, __methods__
1f8f8     10 21 02 FB | 	rdlong	local02, local02
1f8fc     F2 22 02 F6 | 	mov	local03, objptr
1f900     0F E5 01 F6 | 	mov	objptr, local01
1f904     2D 20 62 FD | 	call	local02
1f908     11 E5 01 F6 | 	mov	objptr, local03
1f90c                 | LR__2760
1f90c     A7 F0 03 F6 | 	mov	ptra, fp
1f910     B2 00 A0 FD | 	call	#popregs_
1f914                 | __system___basic_get_char_ret
1f914     2D 00 64 FD | 	ret
1f918                 | 
1f918                 | __system___basic_get
1f918     04 4A 05 F6 | 	mov	COUNT_, #4
1f91c     A8 00 A0 FD | 	call	#pushregs_
1f920     0D 1F 02 F6 | 	mov	local01, arg05
1f924     0F 19 02 FD | 	qmul	arg04, local01
1f928     09 21 02 F6 | 	mov	local02, arg01
1f92c     0B 23 02 F6 | 	mov	local03, arg03
1f930     00 14 0E F2 | 	cmp	arg02, #0 wz
1f934     01 14 86 51 |  if_ne	sub	arg02, #1
1f938     10 13 02 56 |  if_ne	mov	arg01, local02
1f93c     00 16 06 56 |  if_ne	mov	arg03, #0
1f940     18 24 62 FD | 	getqx	local04
1f944     98 41 B0 5D |  if_ne	call	#__system__lseek
1f948     11 15 02 F6 | 	mov	arg02, local03
1f94c     12 17 02 F6 | 	mov	arg03, local04
1f950     10 13 02 F6 | 	mov	arg01, local02
1f954     10 41 B0 FD | 	call	#__system__read
1f958     FD 24 02 F6 | 	mov	local04, result1
1f95c     01 24 56 F2 | 	cmps	local04, #1 wc
1f960     10 00 90 CD |  if_b	jmp	#LR__2770
1f964     12 65 02 F6 | 	mov	muldiva_, local04
1f968     0F 67 02 F6 | 	mov	muldivb_, local01
1f96c     BA 00 A0 FD | 	call	#divide_
1f970     33 25 02 F6 | 	mov	local04, muldivb_
1f974                 | LR__2770
1f974     12 FB 01 F6 | 	mov	result1, local04
1f978     A7 F0 03 F6 | 	mov	ptra, fp
1f97c     B2 00 A0 FD | 	call	#popregs_
1f980                 | __system___basic_get_ret
1f980     2D 00 64 FD | 	ret
1f984                 | 
1f984                 | __system___fmtchar
1f984     00 4A 05 F6 | 	mov	COUNT_, #0
1f988     A8 00 A0 FD | 	call	#pushregs_
1f98c     10 F0 07 F1 | 	add	ptra, #16
1f990     04 4E 05 F1 | 	add	fp, #4
1f994     A7 12 62 FC | 	wrlong	arg01, fp
1f998     04 4E 05 F1 | 	add	fp, #4
1f99c     A7 14 62 FC | 	wrlong	arg02, fp
1f9a0     04 4E 05 F1 | 	add	fp, #4
1f9a4     A7 16 62 FC | 	wrlong	arg03, fp
1f9a8     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
1f9ac     A7 16 62 FC | 	wrlong	arg03, fp
1f9b0     08 4E 85 F1 | 	sub	fp, #8
1f9b4     A7 12 02 FB | 	rdlong	arg01, fp
1f9b8     04 4E 05 F1 | 	add	fp, #4
1f9bc     A7 14 02 FB | 	rdlong	arg02, fp
1f9c0     04 4E 05 F1 | 	add	fp, #4
1f9c4     A7 16 02 F6 | 	mov	arg03, fp
1f9c8     0C 4E 85 F1 | 	sub	fp, #12
1f9cc     0C 00 B0 FD | 	call	#__system___fmtstr
1f9d0     A7 F0 03 F6 | 	mov	ptra, fp
1f9d4     B2 00 A0 FD | 	call	#popregs_
1f9d8                 | __system___fmtchar_ret
1f9d8     2D 00 64 FD | 	ret
1f9dc                 | 
1f9dc                 | __system___fmtstr
1f9dc     09 4A 05 F6 | 	mov	COUNT_, #9
1f9e0     A8 00 A0 FD | 	call	#pushregs_
1f9e4     09 1F 02 F6 | 	mov	local01, arg01
1f9e8     0A 21 02 F6 | 	mov	local02, arg02
1f9ec     0B 23 02 F6 | 	mov	local03, arg03
1f9f0     10 19 E2 F8 | 	getbyte	arg04, local02, #0
1f9f4     11 13 02 F6 | 	mov	arg01, local03
1f9f8     09 25 02 F6 | 	mov	local04, arg01
1f9fc     97 06 48 FB | 	callpa	#(@LR__2781-@LR__2780)>>2,fcache_load_ptr_
1fa00                 | LR__2780
1fa00     12 FB C9 FA | 	rdbyte	result1, local04 wz
1fa04     01 24 06 51 |  if_ne	add	local04, #1
1fa08     F4 FF 9F 5D |  if_ne	jmp	#LR__2780
1fa0c                 | LR__2781
1fa0c     09 25 82 F1 | 	sub	local04, arg01
1fa10     00 18 0E F2 | 	cmp	arg04, #0 wz
1fa14     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
1fa18     10 15 02 F6 | 	mov	arg02, local02
1fa1c     12 17 02 F6 | 	mov	arg03, local04
1fa20     0F 13 02 F6 | 	mov	arg01, local01
1fa24     02 18 06 F6 | 	mov	arg04, #2
1fa28     60 46 B0 FD | 	call	#__system___fmtpad
1fa2c     FD 26 02 F6 | 	mov	local05, result1
1fa30     00 26 56 F2 | 	cmps	local05, #0 wc
1fa34     13 FB 01 C6 |  if_b	mov	result1, local05
1fa38     80 00 90 CD |  if_b	jmp	#LR__2784
1fa3c     01 24 56 F2 | 	cmps	local04, #1 wc
1fa40     50 00 90 CD |  if_b	jmp	#LR__2783
1fa44     12 29 02 F6 | 	mov	local06, local04
1fa48                 | LR__2782
1fa48     0F 2B 02 F6 | 	mov	local07, local01
1fa4c     0F 2D 02 F6 | 	mov	local08, local01
1fa50     13 2A 46 F7 | 	zerox	local07, #19
1fa54     14 2C 46 F0 | 	shr	local08, #20
1fa58     02 2C 66 F0 | 	shl	local08, #2
1fa5c     ED 2C 02 F1 | 	add	local08, __methods__
1fa60     16 2D 02 FB | 	rdlong	local08, local08
1fa64     11 13 C2 FA | 	rdbyte	arg01, local03
1fa68     F2 2E 02 F6 | 	mov	local09, objptr
1fa6c     15 E5 01 F6 | 	mov	objptr, local07
1fa70     01 22 06 F1 | 	add	local03, #1
1fa74     2D 2C 62 FD | 	call	local08
1fa78     17 E5 01 F6 | 	mov	objptr, local09
1fa7c     FD 2E 02 F6 | 	mov	local09, result1
1fa80     00 2E 56 F2 | 	cmps	local09, #0 wc
1fa84     17 FB 01 C6 |  if_b	mov	result1, local09
1fa88     30 00 90 CD |  if_b	jmp	#LR__2784
1fa8c     17 27 02 F1 | 	add	local05, local09
1fa90     ED 29 6E FB | 	djnz	local06, #LR__2782
1fa94                 | LR__2783
1fa94     10 15 02 F6 | 	mov	arg02, local02
1fa98     12 17 02 F6 | 	mov	arg03, local04
1fa9c     0F 13 02 F6 | 	mov	arg01, local01
1faa0     01 18 06 F6 | 	mov	arg04, #1
1faa4     E4 45 B0 FD | 	call	#__system___fmtpad
1faa8     FD 2E 02 F6 | 	mov	local09, result1
1faac     00 2E 56 F2 | 	cmps	local09, #0 wc
1fab0     17 FB 01 C6 |  if_b	mov	result1, local09
1fab4     17 27 02 31 |  if_ae	add	local05, local09
1fab8     13 FB 01 36 |  if_ae	mov	result1, local05
1fabc                 | LR__2784
1fabc     A7 F0 03 F6 | 	mov	ptra, fp
1fac0     B2 00 A0 FD | 	call	#popregs_
1fac4                 | __system___fmtstr_ret
1fac4     2D 00 64 FD | 	ret
1fac8                 | 
1fac8                 | __system___fmtnum
1fac8     0B 4A 05 F6 | 	mov	COUNT_, #11
1facc     A8 00 A0 FD | 	call	#pushregs_
1fad0     09 1F 02 F6 | 	mov	local01, arg01
1fad4     0A 21 02 F6 | 	mov	local02, arg02
1fad8     0B 23 02 F6 | 	mov	local03, arg03
1fadc     0C 25 02 F6 | 	mov	local04, arg04
1fae0     F8 27 02 F6 | 	mov	local05, ptra
1fae4     13 29 02 F6 | 	mov	local06, local05
1fae8     00 2A 06 F6 | 	mov	local07, #0
1faec     10 2D 02 F6 | 	mov	local08, local02
1faf0     10 2C 46 F0 | 	shr	local08, #16
1faf4     3F 2C 06 F5 | 	and	local08, #63
1faf8     10 2F E2 F8 | 	getbyte	local09, local02, #0
1fafc     10 31 02 F6 | 	mov	local10, local02
1fb00     1A 30 46 F0 | 	shr	local10, #26
1fb04     03 30 06 F5 | 	and	local10, #3
1fb08     18 33 02 F6 | 	mov	local11, local10
1fb0c     01 2C 56 F2 | 	cmps	local08, #1 wc
1fb10     44 F0 07 F1 | 	add	ptra, #68
1fb14     01 2C 86 31 |  if_ae	sub	local08, #1
1fb18     41 2E 56 F2 | 	cmps	local09, #65 wc
1fb1c     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
1fb20     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
1fb24     03 32 0E F2 | 	cmp	local11, #3 wz
1fb28     00 32 06 A6 |  if_e	mov	local11, #0
1fb2c     00 22 56 52 |  if_ne	cmps	local03, #0 wc
1fb30     04 32 06 46 |  if_c_and_nz	mov	local11, #4
1fb34     11 23 62 46 |  if_c_and_nz	neg	local03, local03
1fb38     00 32 0E F2 | 	cmp	local11, #0 wz
1fb3c     4C 00 90 AD |  if_e	jmp	#LR__2793
1fb40     01 2A 06 F6 | 	mov	local07, #1
1fb44     17 2D 0A F2 | 	cmp	local08, local09 wz
1fb48     18 00 90 5D |  if_ne	jmp	#LR__2791
1fb4c     05 2C 6E FB | 	djnz	local08, #LR__2790
1fb50     0F 13 02 F6 | 	mov	arg01, local01
1fb54     10 15 02 F6 | 	mov	arg02, local02
1fb58     23 16 06 F6 | 	mov	arg03, #35
1fb5c     24 FE BF FD | 	call	#__system___fmtchar
1fb60     88 00 90 FD | 	jmp	#LR__2797
1fb64                 | LR__2790
1fb64                 | LR__2791
1fb64     02 32 0E F2 | 	cmp	local11, #2 wz
1fb68     14 31 02 A6 |  if_e	mov	local10, local06
1fb6c     01 28 06 A1 |  if_e	add	local06, #1
1fb70     18 41 48 AC |  if_e	wrbyte	#32, local10
1fb74     14 00 90 AD |  if_e	jmp	#LR__2792
1fb78     04 32 0E F2 | 	cmp	local11, #4 wz
1fb7c     14 5B 48 AC |  if_e	wrbyte	#45, local06
1fb80     01 28 06 A1 |  if_e	add	local06, #1
1fb84     14 57 48 5C |  if_ne	wrbyte	#43, local06
1fb88     01 28 06 51 |  if_ne	add	local06, #1
1fb8c                 | LR__2792
1fb8c                 | LR__2793
1fb8c     14 13 02 F6 | 	mov	arg01, local06
1fb90     11 15 02 F6 | 	mov	arg02, local03
1fb94     12 17 02 F6 | 	mov	arg03, local04
1fb98     16 19 02 F6 | 	mov	arg04, local08
1fb9c     00 1A 06 F6 | 	mov	arg05, #0
1fba0     1D 20 2E F4 | 	testbn	local02, #29 wz
1fba4     01 1A 06 56 |  if_ne	mov	arg05, #1
1fba8     A8 45 B0 FD | 	call	#__system___uitoa
1fbac     FD 2A 02 F1 | 	add	local07, result1
1fbb0     17 2B 5A F2 | 	cmps	local07, local09 wcz
1fbb4     24 00 90 ED |  if_be	jmp	#LR__2796
1fbb8     97 0E 48 FB | 	callpa	#(@LR__2795-@LR__2794)>>2,fcache_load_ptr_
1fbbc                 | LR__2794
1fbbc     17 31 02 F6 | 	mov	local10, local09
1fbc0     01 30 56 F2 | 	cmps	local10, #1 wc
1fbc4     01 2E 86 F1 | 	sub	local09, #1
1fbc8     14 31 02 36 |  if_ae	mov	local10, local06
1fbcc     01 28 06 31 |  if_ae	add	local06, #1
1fbd0     18 47 48 3C |  if_ae	wrbyte	#35, local10
1fbd4     E4 FF 9F 3D |  if_ae	jmp	#LR__2794
1fbd8                 | LR__2795
1fbd8     14 01 48 FC | 	wrbyte	#0, local06
1fbdc                 | LR__2796
1fbdc     0F 13 02 F6 | 	mov	arg01, local01
1fbe0     10 15 02 F6 | 	mov	arg02, local02
1fbe4     13 17 02 F6 | 	mov	arg03, local05
1fbe8     F0 FD BF FD | 	call	#__system___fmtstr
1fbec                 | LR__2797
1fbec     A7 F0 03 F6 | 	mov	ptra, fp
1fbf0     B2 00 A0 FD | 	call	#popregs_
1fbf4                 | __system___fmtnum_ret
1fbf4     2D 00 64 FD | 	ret
1fbf8                 | 
1fbf8                 | __system___fmtfloat
1fbf8     10 4A 05 F6 | 	mov	COUNT_, #16
1fbfc     A8 00 A0 FD | 	call	#pushregs_
1fc00     24 F1 07 F1 | 	add	ptra, #292
1fc04     04 4E 05 F1 | 	add	fp, #4
1fc08     A7 12 62 FC | 	wrlong	arg01, fp
1fc0c     04 4E 05 F1 | 	add	fp, #4
1fc10     A7 14 62 FC | 	wrlong	arg02, fp
1fc14     04 4E 05 F1 | 	add	fp, #4
1fc18     A7 16 62 FC | 	wrlong	arg03, fp
1fc1c     04 4E 05 F1 | 	add	fp, #4
1fc20     A7 18 62 FC | 	wrlong	arg04, fp
1fc24     0C 4E 05 F1 | 	add	fp, #12
1fc28     A7 14 68 FC | 	wrlong	#10, fp
1fc2c     08 4E 05 F1 | 	add	fp, #8
1fc30     A7 00 68 FC | 	wrlong	#0, fp
1fc34     08 4E 05 F1 | 	add	fp, #8
1fc38     A7 00 68 FC | 	wrlong	#0, fp
1fc3c     08 4E 05 F1 | 	add	fp, #8
1fc40     A7 00 68 FC | 	wrlong	#0, fp
1fc44     04 4E 05 F1 | 	add	fp, #4
1fc48     A7 04 68 FC | 	wrlong	#2, fp
1fc4c     04 4E 05 F1 | 	add	fp, #4
1fc50     A7 00 68 FC | 	wrlong	#0, fp
1fc54     04 4E 05 F1 | 	add	fp, #4
1fc58     A7 00 68 FC | 	wrlong	#0, fp
1fc5c     04 4E 05 F1 | 	add	fp, #4
1fc60     A7 00 68 FC | 	wrlong	#0, fp
1fc64     04 4E 05 F1 | 	add	fp, #4
1fc68     A7 00 68 FC | 	wrlong	#0, fp
1fc6c     18 4E 05 F1 | 	add	fp, #24
1fc70     A7 00 68 FC | 	wrlong	#0, fp
1fc74     68 4E 05 F1 | 	add	fp, #104
1fc78     A7 1E 02 F6 | 	mov	local01, fp
1fc7c     08 4E 85 F1 | 	sub	fp, #8
1fc80     A7 1E 62 FC | 	wrlong	local01, fp
1fc84     04 4E 05 F1 | 	add	fp, #4
1fc88     A7 1E 62 FC | 	wrlong	local01, fp
1fc8c     BC 4E 85 F1 | 	sub	fp, #188
1fc90     A7 1E 02 FB | 	rdlong	local01, fp
1fc94     10 1E 46 F0 | 	shr	local01, #16
1fc98     3F 1E 06 F5 | 	and	local01, #63
1fc9c     B0 4E 05 F1 | 	add	fp, #176
1fca0     A7 1E 62 FC | 	wrlong	local01, fp
1fca4     B0 4E 85 F1 | 	sub	fp, #176
1fca8     A7 1E 02 FB | 	rdlong	local01, fp
1fcac     1C 1E 46 F0 | 	shr	local01, #28
1fcb0     01 1E 06 F5 | 	and	local01, #1
1fcb4     08 4F 05 F1 | 	add	fp, #264
1fcb8     A7 1E 62 FC | 	wrlong	local01, fp
1fcbc     58 4E 85 F1 | 	sub	fp, #88
1fcc0     A7 1E 0A FB | 	rdlong	local01, fp wz
1fcc4     B8 4E 85 F1 | 	sub	fp, #184
1fcc8     3C 00 90 5D |  if_ne	jmp	#LR__2801
1fccc     10 4E 05 F1 | 	add	fp, #16
1fcd0     A7 1E 02 FB | 	rdlong	local01, fp
1fcd4     10 4E 85 F1 | 	sub	fp, #16
1fcd8     61 1E 0E F2 | 	cmp	local01, #97 wz
1fcdc     18 00 90 5D |  if_ne	jmp	#LR__2800
1fce0     B8 4E 05 F1 | 	add	fp, #184
1fce4     A7 1A 68 FC | 	wrlong	#13, fp
1fce8     84 4E 85 F1 | 	sub	fp, #132
1fcec     A7 02 68 FC | 	wrlong	#1, fp
1fcf0     34 4E 85 F1 | 	sub	fp, #52
1fcf4     24 00 90 FD | 	jmp	#LR__2802
1fcf8                 | LR__2800
1fcf8     B8 4E 05 F1 | 	add	fp, #184
1fcfc     A7 0C 68 FC | 	wrlong	#6, fp
1fd00     B8 4E 85 F1 | 	sub	fp, #184
1fd04     14 00 90 FD | 	jmp	#LR__2802
1fd08                 | LR__2801
1fd08     B8 4E 05 F1 | 	add	fp, #184
1fd0c     A7 1E 02 FB | 	rdlong	local01, fp
1fd10     01 1E 86 F1 | 	sub	local01, #1
1fd14     A7 1E 62 FC | 	wrlong	local01, fp
1fd18     B8 4E 85 F1 | 	sub	fp, #184
1fd1c                 | LR__2802
1fd1c     08 4E 05 F1 | 	add	fp, #8
1fd20     A7 1E 02 FB | 	rdlong	local01, fp
1fd24     16 1E 46 F0 | 	shr	local01, #22
1fd28     03 1E 06 F5 | 	and	local01, #3
1fd2c     04 4F 05 F1 | 	add	fp, #260
1fd30     A7 1E 62 FC | 	wrlong	local01, fp
1fd34     04 4F 85 F1 | 	sub	fp, #260
1fd38     A7 1E 02 FB | 	rdlong	local01, fp
1fd3c     1D 1E 46 F0 | 	shr	local01, #29
1fd40     01 1E 06 F5 | 	and	local01, #1
1fd44     B4 4E 05 F1 | 	add	fp, #180
1fd48     A7 1E 62 FC | 	wrlong	local01, fp
1fd4c     B4 4E 85 F1 | 	sub	fp, #180
1fd50     A7 1E 02 FB | 	rdlong	local01, fp
1fd54     0F 1F EA F8 | 	getbyte	local01, local01, #1
1fd58     60 4E 05 F1 | 	add	fp, #96
1fd5c     A7 1E 62 FC | 	wrlong	local01, fp
1fd60     60 4E 85 F1 | 	sub	fp, #96
1fd64     A7 1E 02 FB | 	rdlong	local01, fp
1fd68     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1fd6c     64 4E 05 F1 | 	add	fp, #100
1fd70     A7 1E 62 FC | 	wrlong	local01, fp
1fd74     00 1E 06 F6 | 	mov	local01, #0
1fd78     5C 4E 85 F1 | 	sub	fp, #92
1fd7c     A7 1A 02 FB | 	rdlong	arg05, fp
1fd80     65 1A 0E F2 | 	cmp	arg05, #101 wz
1fd84     01 1E 06 A6 |  if_e	mov	local01, #1
1fd88     14 4E 05 F1 | 	add	fp, #20
1fd8c     A7 1E 62 FC | 	wrlong	local01, fp
1fd90     98 4E 05 F1 | 	add	fp, #152
1fd94     A7 20 0A FB | 	rdlong	local02, fp wz
1fd98     45 1E 06 56 |  if_ne	mov	local01, #69
1fd9c     65 1E 06 A6 |  if_e	mov	local01, #101
1fda0     8C 4E 85 F1 | 	sub	fp, #140
1fda4     A7 1E 62 FC | 	wrlong	local01, fp
1fda8     20 4E 85 F1 | 	sub	fp, #32
1fdac     A7 1E 02 FB | 	rdlong	local01, fp
1fdb0     10 4E 85 F1 | 	sub	fp, #16
1fdb4     61 1E 0E F2 | 	cmp	local01, #97 wz
1fdb8     4C 00 90 5D |  if_ne	jmp	#LR__2803
1fdbc     24 4E 05 F1 | 	add	fp, #36
1fdc0     A7 02 68 FC | 	wrlong	#1, fp
1fdc4     98 4E 05 F1 | 	add	fp, #152
1fdc8     A7 20 0A FB | 	rdlong	local02, fp wz
1fdcc     50 1E 06 56 |  if_ne	mov	local01, #80
1fdd0     70 1E 06 A6 |  if_e	mov	local01, #112
1fdd4     8C 4E 85 F1 | 	sub	fp, #140
1fdd8     A7 1E 62 FC | 	wrlong	local01, fp
1fddc     14 4E 85 F1 | 	sub	fp, #20
1fde0     A7 04 68 FC | 	wrlong	#2, fp
1fde4     1C 4E 05 F1 | 	add	fp, #28
1fde8     A7 02 68 FC | 	wrlong	#1, fp
1fdec     84 4E 05 F1 | 	add	fp, #132
1fdf0     A7 20 0A FB | 	rdlong	local02, fp wz
1fdf4     58 1E 06 56 |  if_ne	mov	local01, #88
1fdf8     78 1E 06 A6 |  if_e	mov	local01, #120
1fdfc     7C 4E 85 F1 | 	sub	fp, #124
1fe00     A7 1E 62 FC | 	wrlong	local01, fp
1fe04     40 4E 85 F1 | 	sub	fp, #64
1fe08                 | LR__2803
1fe08     10 4E 05 F1 | 	add	fp, #16
1fe0c     A7 1E 02 FB | 	rdlong	local01, fp
1fe10     10 4E 85 F1 | 	sub	fp, #16
1fe14     23 1E 0E F2 | 	cmp	local01, #35 wz
1fe18     3C 00 90 5D |  if_ne	jmp	#LR__2806
1fe1c     48 4E 05 F1 | 	add	fp, #72
1fe20     A7 02 68 FC | 	wrlong	#1, fp
1fe24     C8 4E 05 F1 | 	add	fp, #200
1fe28     A7 1E 0A FB | 	rdlong	local01, fp wz
1fe2c     10 4F 85 F1 | 	sub	fp, #272
1fe30     18 00 90 AD |  if_e	jmp	#LR__2804
1fe34     10 4E 05 F1 | 	add	fp, #16
1fe38     A7 CC 68 FC | 	wrlong	#102, fp
1fe3c     00 4F 05 F1 | 	add	fp, #256
1fe40     A7 00 68 FC | 	wrlong	#0, fp
1fe44     10 4F 85 F1 | 	sub	fp, #272
1fe48     0C 00 90 FD | 	jmp	#LR__2805
1fe4c                 | LR__2804
1fe4c     10 4F 05 F1 | 	add	fp, #272
1fe50     A7 02 68 FC | 	wrlong	#1, fp
1fe54     10 4F 85 F1 | 	sub	fp, #272
1fe58                 | LR__2805
1fe58                 | LR__2806
1fe58     08 4E 05 F1 | 	add	fp, #8
1fe5c     A7 1E 02 FB | 	rdlong	local01, fp
1fe60     1A 1E 46 F0 | 	shr	local01, #26
1fe64     03 1E 06 F5 | 	and	local01, #3
1fe68     5C 4E 05 F1 | 	add	fp, #92
1fe6c     A7 1E 62 FC | 	wrlong	local01, fp
1fe70     58 4E 85 F1 | 	sub	fp, #88
1fe74     A7 FA 01 FB | 	rdlong	result1, fp
1fe78     0C 4E 85 F1 | 	sub	fp, #12
1fe7c     1F FA 4D F0 | 	shr	result1, #31 wz
1fe80     20 00 90 AD |  if_e	jmp	#LR__2807
1fe84     2C 4E 05 F1 | 	add	fp, #44
1fe88     A7 5A 68 FC | 	wrlong	#45, fp
1fe8c     20 4E 85 F1 | 	sub	fp, #32
1fe90     A7 FA 01 FB | 	rdlong	result1, fp
1fe94     1F FA E5 F4 | 	bitnot	result1, #31
1fe98     A7 FA 61 FC | 	wrlong	result1, fp
1fe9c     0C 4E 85 F1 | 	sub	fp, #12
1fea0     3C 00 90 FD | 	jmp	#LR__2809
1fea4                 | LR__2807
1fea4     64 4E 05 F1 | 	add	fp, #100
1fea8     A7 1E 02 FB | 	rdlong	local01, fp
1feac     64 4E 85 F1 | 	sub	fp, #100
1feb0     01 1E 0E F2 | 	cmp	local01, #1 wz
1feb4     2C 4E 05 A1 |  if_e	add	fp, #44
1feb8     A7 56 68 AC |  if_e	wrlong	#43, fp
1febc     2C 4E 85 A1 |  if_e	sub	fp, #44
1fec0     1C 00 90 AD |  if_e	jmp	#LR__2808
1fec4     64 4E 05 F1 | 	add	fp, #100
1fec8     A7 1E 02 FB | 	rdlong	local01, fp
1fecc     64 4E 85 F1 | 	sub	fp, #100
1fed0     02 1E 0E F2 | 	cmp	local01, #2 wz
1fed4     2C 4E 05 A1 |  if_e	add	fp, #44
1fed8     A7 40 68 AC |  if_e	wrlong	#32, fp
1fedc     2C 4E 85 A1 |  if_e	sub	fp, #44
1fee0                 | LR__2808
1fee0                 | LR__2809
1fee0     08 4E 05 F1 | 	add	fp, #8
1fee4     A7 1E 02 FB | 	rdlong	local01, fp
1fee8     18 1E 46 F0 | 	shr	local01, #24
1feec     03 1E 06 F5 | 	and	local01, #3
1fef0     3C 4E 05 F1 | 	add	fp, #60
1fef4     A7 1E 62 FC | 	wrlong	local01, fp
1fef8     00 1E 06 F6 | 	mov	local01, #0
1fefc     18 4E 85 F1 | 	sub	fp, #24
1ff00     A7 22 0A FB | 	rdlong	local03, fp wz
1ff04     2C 4E 85 F1 | 	sub	fp, #44
1ff08     18 00 90 5D |  if_ne	jmp	#LR__2810
1ff0c     1C 4E 05 F1 | 	add	fp, #28
1ff10     A7 24 02 FB | 	rdlong	local04, fp
1ff14     1C 4E 85 F1 | 	sub	fp, #28
1ff18     12 27 02 F6 | 	mov	local05, local04
1ff1c     0A 26 0E F2 | 	cmp	local05, #10 wz
1ff20     04 00 90 AD |  if_e	jmp	#LR__2811
1ff24                 | LR__2810
1ff24     01 1E 66 F5 | 	xor	local01, #1
1ff28                 | LR__2811
1ff28     3C 4E 05 F1 | 	add	fp, #60
1ff2c     A7 1E 62 FC | 	wrlong	local01, fp
1ff30     3C 4E 85 F1 | 	sub	fp, #60
1ff34     00 1E 0E F2 | 	cmp	local01, #0 wz
1ff38     0C 01 90 AD |  if_e	jmp	#LR__2813
1ff3c     44 4E 05 F1 | 	add	fp, #68
1ff40     A7 26 02 FB | 	rdlong	local05, fp
1ff44     44 4E 85 F1 | 	sub	fp, #68
1ff48     13 23 02 F6 | 	mov	local03, local05
1ff4c     02 22 0E F2 | 	cmp	local03, #2 wz
1ff50     F4 00 90 5D |  if_ne	jmp	#LR__2813
1ff54     0C 4F 05 F1 | 	add	fp, #268
1ff58     A7 28 02 FB | 	rdlong	local06, fp
1ff5c     0C 4F 85 F1 | 	sub	fp, #268
1ff60     14 25 02 F6 | 	mov	local04, local06
1ff64     02 24 0E F2 | 	cmp	local04, #2 wz
1ff68     DC 00 90 AD |  if_e	jmp	#LR__2813
1ff6c     C0 4E 05 F1 | 	add	fp, #192
1ff70     A7 12 02 FB | 	rdlong	arg01, fp
1ff74     94 4E 85 F1 | 	sub	fp, #148
1ff78     A7 14 02 FB | 	rdlong	arg02, fp
1ff7c     14 4E 05 F1 | 	add	fp, #20
1ff80     A7 16 02 FB | 	rdlong	arg03, fp
1ff84     40 4E 85 F1 | 	sub	fp, #64
1ff88     30 44 B0 FD | 	call	#__system__emitsign_0444
1ff8c     14 4F 05 F1 | 	add	fp, #276
1ff90     A7 FA 61 FC | 	wrlong	result1, fp
1ff94     14 4F 85 F1 | 	sub	fp, #276
1ff98     00 FA 55 F2 | 	cmps	result1, #0 wc
1ff9c     14 4F 05 C1 |  if_b	add	fp, #276
1ffa0     A7 FA 01 CB |  if_b	rdlong	result1, fp
1ffa4     14 4F 85 C1 |  if_b	sub	fp, #276
1ffa8     6C 0B 90 CD |  if_b	jmp	#LR__2863
1ffac     C0 4E 05 F1 | 	add	fp, #192
1ffb0     A7 1E 02 FB | 	rdlong	local01, fp
1ffb4     54 4E 05 F1 | 	add	fp, #84
1ffb8     A7 26 02 FB | 	rdlong	local05, fp
1ffbc     13 23 02 F6 | 	mov	local03, local05
1ffc0     13 1F 02 F1 | 	add	local01, local05
1ffc4     54 4E 85 F1 | 	sub	fp, #84
1ffc8     A7 1E 62 FC | 	wrlong	local01, fp
1ffcc     58 4E 85 F1 | 	sub	fp, #88
1ffd0     A7 1E 0A FB | 	rdlong	local01, fp wz
1ffd4     68 4E 85 F1 | 	sub	fp, #104
1ffd8     60 00 90 AD |  if_e	jmp	#LR__2812
1ffdc     68 4E 05 F1 | 	add	fp, #104
1ffe0     A7 1E 02 FB | 	rdlong	local01, fp
1ffe4     AC 4E 05 F1 | 	add	fp, #172
1ffe8     A7 22 02 FB | 	rdlong	local03, fp
1ffec     11 1F 82 F1 | 	sub	local01, local03
1fff0     AC 4E 85 F1 | 	sub	fp, #172
1fff4     A7 1E 62 FC | 	wrlong	local01, fp
1fff8     68 4E 85 F1 | 	sub	fp, #104
1fffc     00 1E 56 F2 | 	cmps	local01, #0 wc
20000     68 4E 05 C1 |  if_b	add	fp, #104
20004     A7 00 68 CC |  if_b	wrlong	#0, fp
20008     68 4E 85 C1 |  if_b	sub	fp, #104
2000c     08 4E 05 F1 | 	add	fp, #8
20010     A7 1E 02 FB | 	rdlong	local01, fp
20014     E8 1E 06 F4 | 	bitl	local01, #232
20018     A7 1E 62 FC | 	wrlong	local01, fp
2001c     60 4E 05 F1 | 	add	fp, #96
20020     A7 26 02 FB | 	rdlong	local05, fp
20024     13 23 02 F6 | 	mov	local03, local05
20028     08 22 66 F0 | 	shl	local03, #8
2002c     11 1F 42 F5 | 	or	local01, local03
20030     60 4E 85 F1 | 	sub	fp, #96
20034     A7 1E 62 FC | 	wrlong	local01, fp
20038     08 4E 85 F1 | 	sub	fp, #8
2003c                 | LR__2812
2003c     3C 4E 05 F1 | 	add	fp, #60
20040     A7 00 68 FC | 	wrlong	#0, fp
20044     3C 4E 85 F1 | 	sub	fp, #60
20048                 | LR__2813
20048     0C 4E 05 F1 | 	add	fp, #12
2004c     A7 12 02 FB | 	rdlong	arg01, fp
20050     0C 4E 85 F1 | 	sub	fp, #12
20054     04 1F B0 FD | 	call	#__system____builtin_ilogb
20058     FF FF 3F FF 
2005c     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
20060     50 00 90 5D |  if_ne	jmp	#LR__2815
20064     2C 4E 05 F1 | 	add	fp, #44
20068     A7 1E 0A FB | 	rdlong	local01, fp wz
2006c     2C 4E 85 F1 | 	sub	fp, #44
20070     24 00 90 AD |  if_e	jmp	#LR__2814
20074     C0 4E 05 F1 | 	add	fp, #192
20078     A7 20 02 FB | 	rdlong	local02, fp
2007c     10 23 02 F6 | 	mov	local03, local02
20080     01 22 06 F1 | 	add	local03, #1
20084     A7 22 62 FC | 	wrlong	local03, fp
20088     94 4E 85 F1 | 	sub	fp, #148
2008c     A7 24 02 FB | 	rdlong	local04, fp
20090     2C 4E 85 F1 | 	sub	fp, #44
20094     10 25 42 FC | 	wrbyte	local04, local02
20098                 | LR__2814
20098     C0 4E 05 F1 | 	add	fp, #192
2009c     A7 12 02 FB | 	rdlong	arg01, fp
200a0     C0 4E 85 F1 | 	sub	fp, #192
200a4     70 01 00 FF 
200a8     92 14 06 F6 | 	mov	arg02, ##@LR__4751
200ac     18 EA BF FD | 	call	#__system____builtin_strcpy
200b0     A4 08 90 FD | 	jmp	#LR__2851
200b4                 | LR__2815
200b4     0C 4E 05 F1 | 	add	fp, #12
200b8     A7 20 02 FB | 	rdlong	local02, fp
200bc     0C 4E 85 F1 | 	sub	fp, #12
200c0     10 13 02 F6 | 	mov	arg01, local02
200c4     94 1E B0 FD | 	call	#__system____builtin_ilogb
200c8     00 00 40 FF 
200cc     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
200d0     50 00 90 5D |  if_ne	jmp	#LR__2817
200d4     2C 4E 05 F1 | 	add	fp, #44
200d8     A7 1E 0A FB | 	rdlong	local01, fp wz
200dc     2C 4E 85 F1 | 	sub	fp, #44
200e0     24 00 90 AD |  if_e	jmp	#LR__2816
200e4     C0 4E 05 F1 | 	add	fp, #192
200e8     A7 20 02 FB | 	rdlong	local02, fp
200ec     10 23 02 F6 | 	mov	local03, local02
200f0     01 22 06 F1 | 	add	local03, #1
200f4     A7 22 62 FC | 	wrlong	local03, fp
200f8     94 4E 85 F1 | 	sub	fp, #148
200fc     A7 24 02 FB | 	rdlong	local04, fp
20100     2C 4E 85 F1 | 	sub	fp, #44
20104     10 25 42 FC | 	wrbyte	local04, local02
20108                 | LR__2816
20108     C0 4E 05 F1 | 	add	fp, #192
2010c     A7 12 02 FB | 	rdlong	arg01, fp
20110     C0 4E 85 F1 | 	sub	fp, #192
20114     70 01 00 FF 
20118     96 14 06 F6 | 	mov	arg02, ##@LR__4752
2011c     A8 E9 BF FD | 	call	#__system____builtin_strcpy
20120     34 08 90 FD | 	jmp	#LR__2851
20124                 | LR__2817
20124     10 4E 05 F1 | 	add	fp, #16
20128     A7 1E 02 FB | 	rdlong	local01, fp
2012c     10 4E 85 F1 | 	sub	fp, #16
20130     67 1E 0E F2 | 	cmp	local01, #103 wz
20134     10 4E 05 51 |  if_ne	add	fp, #16
20138     A7 22 02 5B |  if_ne	rdlong	local03, fp
2013c     10 4E 85 51 |  if_ne	sub	fp, #16
20140     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
20144     94 01 90 5D |  if_ne	jmp	#LR__2822
20148     0C 4E 05 F1 | 	add	fp, #12
2014c     A7 12 02 FB | 	rdlong	arg01, fp
20150     08 4E 05 F1 | 	add	fp, #8
20154     A7 14 02 F6 | 	mov	arg02, fp
20158     0C 4E 05 F1 | 	add	fp, #12
2015c     A7 16 02 F6 | 	mov	arg03, fp
20160     98 4E 05 F1 | 	add	fp, #152
20164     A7 18 02 FB | 	rdlong	arg04, fp
20168     9C 4E 85 F1 | 	sub	fp, #156
2016c     A7 1A 02 FB | 	rdlong	arg05, fp
20170     1C 4E 85 F1 | 	sub	fp, #28
20174     50 40 B0 FD | 	call	#__system__disassemble_0442
20178     10 4E 05 F1 | 	add	fp, #16
2017c     A7 1E 02 FB | 	rdlong	local01, fp
20180     10 4E 85 F1 | 	sub	fp, #16
20184     23 1E 0E F2 | 	cmp	local01, #35 wz
20188     A0 00 90 5D |  if_ne	jmp	#LR__2819
2018c     20 4E 05 F1 | 	add	fp, #32
20190     A7 1E 02 FB | 	rdlong	local01, fp
20194     98 4E 05 F1 | 	add	fp, #152
20198     A7 22 02 FB | 	rdlong	local03, fp
2019c     B8 4E 85 F1 | 	sub	fp, #184
201a0     11 1F 5A F2 | 	cmps	local01, local03 wcz
201a4     24 4E 05 11 |  if_a	add	fp, #36
201a8     A7 02 68 1C |  if_a	wrlong	#1, fp
201ac     24 4E 85 11 |  if_a	sub	fp, #36
201b0     A4 01 90 1D |  if_a	jmp	#LR__2825
201b4     20 4E 05 F1 | 	add	fp, #32
201b8     A7 1E 02 FB | 	rdlong	local01, fp
201bc     20 4E 85 F1 | 	sub	fp, #32
201c0     00 1E 56 F2 | 	cmps	local01, #0 wc
201c4     2C 00 90 3D |  if_ae	jmp	#LR__2818
201c8     B8 4E 05 F1 | 	add	fp, #184
201cc     A7 1E 02 FB | 	rdlong	local01, fp
201d0     0F 1F 62 F6 | 	neg	local01, local01
201d4     98 4E 85 F1 | 	sub	fp, #152
201d8     A7 22 02 FB | 	rdlong	local03, fp
201dc     20 4E 85 F1 | 	sub	fp, #32
201e0     0F 23 5A F2 | 	cmps	local03, local01 wcz
201e4     24 4E 05 E1 |  if_be	add	fp, #36
201e8     A7 02 68 EC |  if_be	wrlong	#1, fp
201ec     24 4E 85 E1 |  if_be	sub	fp, #36
201f0     64 01 90 FD | 	jmp	#LR__2825
201f4                 | LR__2818
201f4     20 4E 05 F1 | 	add	fp, #32
201f8     A7 1E 02 FB | 	rdlong	local01, fp
201fc     20 4E 85 F1 | 	sub	fp, #32
20200     01 1E 56 F2 | 	cmps	local01, #1 wc
20204     50 01 90 CD |  if_b	jmp	#LR__2825
20208     B8 4E 05 F1 | 	add	fp, #184
2020c     A7 1E 02 FB | 	rdlong	local01, fp
20210     98 4E 85 F1 | 	sub	fp, #152
20214     A7 22 02 FB | 	rdlong	local03, fp
20218     11 1F 82 F1 | 	sub	local01, local03
2021c     98 4E 05 F1 | 	add	fp, #152
20220     A7 1E 62 FC | 	wrlong	local01, fp
20224     B8 4E 85 F1 | 	sub	fp, #184
20228     2C 01 90 FD | 	jmp	#LR__2825
2022c                 | LR__2819
2022c     00 1E 06 F6 | 	mov	local01, #0
20230     08 4E 05 F1 | 	add	fp, #8
20234     A7 20 02 FB | 	rdlong	local02, fp
20238     1C 20 46 F0 | 	shr	local02, #28
2023c     01 20 0E F5 | 	and	local02, #1 wz
20240     01 1E 06 A6 |  if_e	mov	local01, #1
20244     2C 4E 05 F1 | 	add	fp, #44
20248     A7 1E 62 FC | 	wrlong	local01, fp
2024c     14 4E 85 F1 | 	sub	fp, #20
20250     A7 1E 02 FB | 	rdlong	local01, fp
20254     98 4E 05 F1 | 	add	fp, #152
20258     A7 22 02 FB | 	rdlong	local03, fp
2025c     B8 4E 85 F1 | 	sub	fp, #184
20260     11 1F 52 F2 | 	cmps	local01, local03 wc
20264     18 00 90 3D |  if_ae	jmp	#LR__2820
20268     20 4E 05 F1 | 	add	fp, #32
2026c     A7 24 02 FB | 	rdlong	local04, fp
20270     20 4E 85 F1 | 	sub	fp, #32
20274     FF FF 7F FF 
20278     FC 25 56 F2 | 	cmps	local04, ##-4 wc
2027c     10 00 90 3D |  if_ae	jmp	#LR__2821
20280                 | LR__2820
20280     24 4E 05 F1 | 	add	fp, #36
20284     A7 02 68 FC | 	wrlong	#1, fp
20288     24 4E 85 F1 | 	sub	fp, #36
2028c     C8 00 90 FD | 	jmp	#LR__2825
20290                 | LR__2821
20290     B8 4E 05 F1 | 	add	fp, #184
20294     A7 24 02 FB | 	rdlong	local04, fp
20298     98 4E 85 F1 | 	sub	fp, #152
2029c     A7 22 02 FB | 	rdlong	local03, fp
202a0     11 25 82 F1 | 	sub	local04, local03
202a4     98 4E 05 F1 | 	add	fp, #152
202a8     A7 24 62 FC | 	wrlong	local04, fp
202ac     AC 4E 85 F1 | 	sub	fp, #172
202b0     A7 12 02 FB | 	rdlong	arg01, fp
202b4     08 4E 05 F1 | 	add	fp, #8
202b8     A7 14 02 F6 | 	mov	arg02, fp
202bc     0C 4E 05 F1 | 	add	fp, #12
202c0     A7 16 02 F6 | 	mov	arg03, fp
202c4     12 19 62 F6 | 	neg	arg04, local04
202c8     04 4E 85 F1 | 	sub	fp, #4
202cc     A7 1A 02 FB | 	rdlong	arg05, fp
202d0     1C 4E 85 F1 | 	sub	fp, #28
202d4     F0 3E B0 FD | 	call	#__system__disassemble_0442
202d8     7C 00 90 FD | 	jmp	#LR__2825
202dc                 | LR__2822
202dc     24 4E 05 F1 | 	add	fp, #36
202e0     A7 1E 0A FB | 	rdlong	local01, fp wz
202e4     24 4E 85 F1 | 	sub	fp, #36
202e8     34 00 90 AD |  if_e	jmp	#LR__2823
202ec     0C 4E 05 F1 | 	add	fp, #12
202f0     A7 12 02 FB | 	rdlong	arg01, fp
202f4     08 4E 05 F1 | 	add	fp, #8
202f8     A7 14 02 F6 | 	mov	arg02, fp
202fc     0C 4E 05 F1 | 	add	fp, #12
20300     A7 16 02 F6 | 	mov	arg03, fp
20304     98 4E 05 F1 | 	add	fp, #152
20308     A7 18 02 FB | 	rdlong	arg04, fp
2030c     9C 4E 85 F1 | 	sub	fp, #156
20310     A7 1A 02 FB | 	rdlong	arg05, fp
20314     1C 4E 85 F1 | 	sub	fp, #28
20318     AC 3E B0 FD | 	call	#__system__disassemble_0442
2031c     38 00 90 FD | 	jmp	#LR__2824
20320                 | LR__2823
20320     0C 4E 05 F1 | 	add	fp, #12
20324     A7 12 02 FB | 	rdlong	arg01, fp
20328     08 4E 05 F1 | 	add	fp, #8
2032c     A7 14 02 F6 | 	mov	arg02, fp
20330     0C 4E 05 F1 | 	add	fp, #12
20334     A7 16 02 F6 | 	mov	arg03, fp
20338     98 4E 05 F1 | 	add	fp, #152
2033c     A7 24 02 FB | 	rdlong	local04, fp
20340     01 24 06 F1 | 	add	local04, #1
20344     12 19 62 F6 | 	neg	arg04, local04
20348     9C 4E 85 F1 | 	sub	fp, #156
2034c     A7 1A 02 FB | 	rdlong	arg05, fp
20350     1C 4E 85 F1 | 	sub	fp, #28
20354     70 3E B0 FD | 	call	#__system__disassemble_0442
20358                 | LR__2824
20358                 | LR__2825
20358     1C 4E 05 F1 | 	add	fp, #28
2035c     A7 1E 02 FB | 	rdlong	local01, fp
20360     1C 4E 85 F1 | 	sub	fp, #28
20364     02 1E 0E F2 | 	cmp	local01, #2 wz
20368     4C 00 90 5D |  if_ne	jmp	#LR__2828
2036c     1C 4E 05 F1 | 	add	fp, #28
20370     A7 20 68 FC | 	wrlong	#16, fp
20374     1C 4E 85 F1 | 	sub	fp, #28
20378                 | LR__2826
20378     14 4E 05 F1 | 	add	fp, #20
2037c     A7 1E 0A FB | 	rdlong	local01, fp wz
20380     14 4E 85 F1 | 	sub	fp, #20
20384     30 00 90 AD |  if_e	jmp	#LR__2827
20388     14 4E 05 F1 | 	add	fp, #20
2038c     A7 22 02 FB | 	rdlong	local03, fp
20390     14 4E 85 F1 | 	sub	fp, #20
20394     00 80 00 FF 
20398     00 22 16 F2 | 	cmp	local03, ##16777216 wc
2039c     18 00 90 3D |  if_ae	jmp	#LR__2827
203a0     14 4E 05 F1 | 	add	fp, #20
203a4     A7 1E 02 FB | 	rdlong	local01, fp
203a8     01 1E 66 F0 | 	shl	local01, #1
203ac     A7 1E 62 FC | 	wrlong	local01, fp
203b0     14 4E 85 F1 | 	sub	fp, #20
203b4     C0 FF 9F FD | 	jmp	#LR__2826
203b8                 | LR__2827
203b8                 | LR__2828
203b8     70 4E 05 F1 | 	add	fp, #112
203bc     A7 12 02 F6 | 	mov	arg01, fp
203c0     5C 4E 85 F1 | 	sub	fp, #92
203c4     A7 14 02 FB | 	rdlong	arg02, fp
203c8     08 4E 05 F1 | 	add	fp, #8
203cc     A7 16 02 FB | 	rdlong	arg03, fp
203d0     A0 4E 05 F1 | 	add	fp, #160
203d4     A7 1A 02 FB | 	rdlong	arg05, fp
203d8     BC 4E 85 F1 | 	sub	fp, #188
203dc     01 18 06 F6 | 	mov	arg04, #1
203e0     70 3D B0 FD | 	call	#__system___uitoa
203e4     58 4E 05 F1 | 	add	fp, #88
203e8     A7 FA 61 FC | 	wrlong	result1, fp
203ec     38 4E 85 F1 | 	sub	fp, #56
203f0     A7 1E 02 FB | 	rdlong	local01, fp
203f4     20 4E 85 F1 | 	sub	fp, #32
203f8     00 1E 56 F2 | 	cmps	local01, #0 wc
203fc     50 00 90 3D |  if_ae	jmp	#LR__2829
20400     60 4E 05 F1 | 	add	fp, #96
20404     A7 5A 68 FC | 	wrlong	#45, fp
20408     50 4E 05 F1 | 	add	fp, #80
2040c     A7 12 02 F6 | 	mov	arg01, fp
20410     90 4E 85 F1 | 	sub	fp, #144
20414     A7 22 02 FB | 	rdlong	local03, fp
20418     11 15 62 F6 | 	neg	arg02, local03
2041c     18 4E 05 F1 | 	add	fp, #24
20420     A7 18 02 FB | 	rdlong	arg04, fp
20424     84 4E 05 F1 | 	add	fp, #132
20428     A7 28 02 FB | 	rdlong	local06, fp
2042c     BC 4E 85 F1 | 	sub	fp, #188
20430     14 25 02 F6 | 	mov	local04, local06
20434     0A 16 06 F6 | 	mov	arg03, #10
20438     12 1B 02 F6 | 	mov	arg05, local04
2043c     14 3D B0 FD | 	call	#__system___uitoa
20440     5C 4E 05 F1 | 	add	fp, #92
20444     A7 FA 61 FC | 	wrlong	result1, fp
20448     5C 4E 85 F1 | 	sub	fp, #92
2044c     48 00 90 FD | 	jmp	#LR__2830
20450                 | LR__2829
20450     60 4E 05 F1 | 	add	fp, #96
20454     A7 56 68 FC | 	wrlong	#43, fp
20458     50 4E 05 F1 | 	add	fp, #80
2045c     A7 12 02 F6 | 	mov	arg01, fp
20460     90 4E 85 F1 | 	sub	fp, #144
20464     A7 14 02 FB | 	rdlong	arg02, fp
20468     18 4E 05 F1 | 	add	fp, #24
2046c     A7 18 02 FB | 	rdlong	arg04, fp
20470     84 4E 05 F1 | 	add	fp, #132
20474     A7 28 02 FB | 	rdlong	local06, fp
20478     BC 4E 85 F1 | 	sub	fp, #188
2047c     14 25 02 F6 | 	mov	local04, local06
20480     0A 16 06 F6 | 	mov	arg03, #10
20484     12 1B 02 F6 | 	mov	arg05, local04
20488     C8 3C B0 FD | 	call	#__system___uitoa
2048c     5C 4E 05 F1 | 	add	fp, #92
20490     A7 FA 61 FC | 	wrlong	result1, fp
20494     5C 4E 85 F1 | 	sub	fp, #92
20498                 | LR__2830
20498     24 4E 05 F1 | 	add	fp, #36
2049c     A7 1E 0A FB | 	rdlong	local01, fp wz
204a0     24 4E 85 F1 | 	sub	fp, #36
204a4     2C 00 90 AD |  if_e	jmp	#LR__2831
204a8     50 4E 05 F1 | 	add	fp, #80
204ac     A7 00 68 FC | 	wrlong	#0, fp
204b0     04 4E 85 F1 | 	sub	fp, #4
204b4     A7 00 68 FC | 	wrlong	#0, fp
204b8     6C 4E 05 F1 | 	add	fp, #108
204bc     A7 1E 02 FB | 	rdlong	local01, fp
204c0     01 1E 06 F1 | 	add	local01, #1
204c4     64 4E 85 F1 | 	sub	fp, #100
204c8     A7 1E 62 FC | 	wrlong	local01, fp
204cc     54 4E 85 F1 | 	sub	fp, #84
204d0     88 00 90 FD | 	jmp	#LR__2834
204d4                 | LR__2831
204d4     20 4E 05 F1 | 	add	fp, #32
204d8     A7 1E 02 FB | 	rdlong	local01, fp
204dc     20 4E 85 F1 | 	sub	fp, #32
204e0     00 1E 56 F2 | 	cmps	local01, #0 wc
204e4     40 00 90 3D |  if_ae	jmp	#LR__2832
204e8     20 4E 05 F1 | 	add	fp, #32
204ec     A7 20 02 FB | 	rdlong	local02, fp
204f0     30 4E 05 F1 | 	add	fp, #48
204f4     A7 20 62 FC | 	wrlong	local02, fp
204f8     04 4E 85 F1 | 	sub	fp, #4
204fc     A7 20 62 FC | 	wrlong	local02, fp
20500     2C 4E 85 F1 | 	sub	fp, #44
20504     A7 1E 02 FB | 	rdlong	local01, fp
20508     98 4E 05 F1 | 	add	fp, #152
2050c     A7 22 02 FB | 	rdlong	local03, fp
20510     11 1F 02 F1 | 	add	local01, local03
20514     01 1E 06 F1 | 	add	local01, #1
20518     64 4E 85 F1 | 	sub	fp, #100
2051c     A7 1E 62 FC | 	wrlong	local01, fp
20520     54 4E 85 F1 | 	sub	fp, #84
20524     34 00 90 FD | 	jmp	#LR__2833
20528                 | LR__2832
20528     4C 4E 05 F1 | 	add	fp, #76
2052c     A7 00 68 FC | 	wrlong	#0, fp
20530     2C 4E 85 F1 | 	sub	fp, #44
20534     A7 1E 02 FB | 	rdlong	local01, fp
20538     30 4E 05 F1 | 	add	fp, #48
2053c     A7 1E 62 FC | 	wrlong	local01, fp
20540     68 4E 05 F1 | 	add	fp, #104
20544     A7 22 02 FB | 	rdlong	local03, fp
20548     11 1F 02 F1 | 	add	local01, local03
2054c     01 1E 06 F1 | 	add	local01, #1
20550     64 4E 85 F1 | 	sub	fp, #100
20554     A7 1E 62 FC | 	wrlong	local01, fp
20558     54 4E 85 F1 | 	sub	fp, #84
2055c                 | LR__2833
2055c                 | LR__2834
2055c     54 4E 05 F1 | 	add	fp, #84
20560     A7 1E 02 FB | 	rdlong	local01, fp
20564     08 4E 85 F1 | 	sub	fp, #8
20568     A7 22 02 FB | 	rdlong	local03, fp
2056c     11 1F 82 F1 | 	sub	local01, local03
20570     01 1E 06 F1 | 	add	local01, #1
20574     24 4E 85 F1 | 	sub	fp, #36
20578     A7 1E 62 FC | 	wrlong	local01, fp
2057c     04 4E 05 F1 | 	add	fp, #4
20580     A7 1E 0A FB | 	rdlong	local01, fp wz
20584     2C 4E 85 F1 | 	sub	fp, #44
20588     28 4E 05 51 |  if_ne	add	fp, #40
2058c     A7 22 02 5B |  if_ne	rdlong	local03, fp
20590     01 22 06 51 |  if_ne	add	local03, #1
20594     A7 22 62 5C |  if_ne	wrlong	local03, fp
20598     28 4E 85 51 |  if_ne	sub	fp, #40
2059c     1C 4E 05 F1 | 	add	fp, #28
205a0     A7 1E 02 FB | 	rdlong	local01, fp
205a4     1C 4E 85 F1 | 	sub	fp, #28
205a8     10 1E 0E F2 | 	cmp	local01, #16 wz
205ac     28 4E 05 A1 |  if_e	add	fp, #40
205b0     A7 1E 02 AB |  if_e	rdlong	local01, fp
205b4     02 1E 06 A1 |  if_e	add	local01, #2
205b8     A7 1E 62 AC |  if_e	wrlong	local01, fp
205bc     28 4E 85 A1 |  if_e	sub	fp, #40
205c0     24 4E 05 F1 | 	add	fp, #36
205c4     A7 1E 0A FB | 	rdlong	local01, fp wz
205c8     24 4E 85 F1 | 	sub	fp, #36
205cc     28 00 90 AD |  if_e	jmp	#LR__2835
205d0     28 4E 05 F1 | 	add	fp, #40
205d4     A7 1E 02 FB | 	rdlong	local01, fp
205d8     02 22 06 F6 | 	mov	local03, #2
205dc     34 4E 05 F1 | 	add	fp, #52
205e0     A7 26 02 FB | 	rdlong	local05, fp
205e4     13 23 02 F1 | 	add	local03, local05
205e8     11 1F 02 F1 | 	add	local01, local03
205ec     34 4E 85 F1 | 	sub	fp, #52
205f0     A7 1E 62 FC | 	wrlong	local01, fp
205f4     28 4E 85 F1 | 	sub	fp, #40
205f8                 | LR__2835
205f8     28 4E 05 F1 | 	add	fp, #40
205fc     A7 1E 02 FB | 	rdlong	local01, fp
20600     28 4E 85 F1 | 	sub	fp, #40
20604     41 1E 56 F2 | 	cmps	local01, #65 wc
20608     01 FA 65 36 |  if_ae	neg	result1, #1
2060c     08 05 90 3D |  if_ae	jmp	#LR__2863
20610     3C 4E 05 F1 | 	add	fp, #60
20614     A7 1E 0A FB | 	rdlong	local01, fp wz
20618     3C 4E 85 F1 | 	sub	fp, #60
2061c     60 00 90 AD |  if_e	jmp	#LR__2836
20620     C0 4E 05 F1 | 	add	fp, #192
20624     A7 12 02 FB | 	rdlong	arg01, fp
20628     94 4E 85 F1 | 	sub	fp, #148
2062c     A7 14 02 FB | 	rdlong	arg02, fp
20630     14 4E 05 F1 | 	add	fp, #20
20634     A7 16 02 FB | 	rdlong	arg03, fp
20638     40 4E 85 F1 | 	sub	fp, #64
2063c     7C 3D B0 FD | 	call	#__system__emitsign_0444
20640     18 4F 05 F1 | 	add	fp, #280
20644     A7 FA 61 FC | 	wrlong	result1, fp
20648     18 4F 85 F1 | 	sub	fp, #280
2064c     00 FA 55 F2 | 	cmps	result1, #0 wc
20650     18 4F 05 C1 |  if_b	add	fp, #280
20654     A7 FA 01 CB |  if_b	rdlong	result1, fp
20658     18 4F 85 C1 |  if_b	sub	fp, #280
2065c     B8 04 90 CD |  if_b	jmp	#LR__2863
20660     C0 4E 05 F1 | 	add	fp, #192
20664     A7 1E 02 FB | 	rdlong	local01, fp
20668     58 4E 05 F1 | 	add	fp, #88
2066c     A7 22 02 FB | 	rdlong	local03, fp
20670     11 1F 02 F1 | 	add	local01, local03
20674     58 4E 85 F1 | 	sub	fp, #88
20678     A7 1E 62 FC | 	wrlong	local01, fp
2067c     C0 4E 85 F1 | 	sub	fp, #192
20680                 | LR__2836
20680     4C 4E 05 F1 | 	add	fp, #76
20684     A7 1E 02 FB | 	rdlong	local01, fp
20688     34 4E 85 F1 | 	sub	fp, #52
2068c     A7 1E 62 FC | 	wrlong	local01, fp
20690     18 4E 85 F1 | 	sub	fp, #24
20694     97 9E 48 FB | 	callpa	#(@LR__2842-@LR__2837)>>2,fcache_load_ptr_
20698                 | LR__2837
20698     18 4E 05 F1 | 	add	fp, #24
2069c     A7 20 02 FB | 	rdlong	local02, fp
206a0     3C 4E 05 F1 | 	add	fp, #60
206a4     A7 26 02 FB | 	rdlong	local05, fp
206a8     54 4E 85 F1 | 	sub	fp, #84
206ac     13 21 52 F2 | 	cmps	local02, local05 wc
206b0     20 01 90 3D |  if_ae	jmp	#LR__2843
206b4     18 4E 05 F1 | 	add	fp, #24
206b8     A7 28 02 FB | 	rdlong	local06, fp
206bc     18 4E 85 F1 | 	sub	fp, #24
206c0     00 28 56 F2 | 	cmps	local06, #0 wc
206c4     58 00 90 CD |  if_b	jmp	#LR__2838
206c8     18 4E 05 F1 | 	add	fp, #24
206cc     A7 28 02 FB | 	rdlong	local06, fp
206d0     40 4E 05 F1 | 	add	fp, #64
206d4     A7 2A 02 FB | 	rdlong	local07, fp
206d8     58 4E 85 F1 | 	sub	fp, #88
206dc     15 29 52 F2 | 	cmps	local06, local07 wc
206e0     3C 00 90 3D |  if_ae	jmp	#LR__2838
206e4     C0 4E 05 F1 | 	add	fp, #192
206e8     A7 2C 02 FB | 	rdlong	local08, fp
206ec     16 2B 02 F6 | 	mov	local07, local08
206f0     01 2A 06 F1 | 	add	local07, #1
206f4     A7 2A 62 FC | 	wrlong	local07, fp
206f8     A8 4E 85 F1 | 	sub	fp, #168
206fc     A7 2A 02 FB | 	rdlong	local07, fp
20700     15 2F 02 F6 | 	mov	local09, local07
20704     58 4E 05 F1 | 	add	fp, #88
20708     A7 30 02 F6 | 	mov	local10, fp
2070c     A7 2E 02 F1 | 	add	local09, fp
20710     17 33 C2 FA | 	rdbyte	local11, local09
20714     16 33 42 FC | 	wrbyte	local11, local08
20718     70 4E 85 F1 | 	sub	fp, #112
2071c     20 00 90 FD | 	jmp	#LR__2839
20720                 | LR__2838
20720     C0 4E 05 F1 | 	add	fp, #192
20724     A7 2C 02 FB | 	rdlong	local08, fp
20728     16 2F 02 F6 | 	mov	local09, local08
2072c     01 2E 06 F1 | 	add	local09, #1
20730     A7 2E 62 FC | 	wrlong	local09, fp
20734     C0 4E 85 F1 | 	sub	fp, #192
20738     30 2E 06 F6 | 	mov	local09, #48
2073c     16 61 48 FC | 	wrbyte	#48, local08
20740                 | LR__2839
20740     18 4E 05 F1 | 	add	fp, #24
20744     A7 28 02 FB | 	rdlong	local06, fp
20748     38 4E 05 F1 | 	add	fp, #56
2074c     A7 34 02 FB | 	rdlong	local12, fp
20750     50 4E 85 F1 | 	sub	fp, #80
20754     1A 29 0A F2 | 	cmp	local06, local12 wz
20758     5C 00 90 5D |  if_ne	jmp	#LR__2841
2075c     10 4F 05 F1 | 	add	fp, #272
20760     A7 2A 02 FB | 	rdlong	local07, fp
20764     10 4F 85 F1 | 	sub	fp, #272
20768     15 2F 0A F6 | 	mov	local09, local07 wz
2076c     28 00 90 5D |  if_ne	jmp	#LR__2840
20770     54 4E 05 F1 | 	add	fp, #84
20774     A7 32 02 FB | 	rdlong	local11, fp
20778     19 31 02 F6 | 	mov	local10, local11
2077c     01 30 86 F1 | 	sub	local10, #1
20780     3C 4E 85 F1 | 	sub	fp, #60
20784     A7 36 02 FB | 	rdlong	local13, fp
20788     18 4E 85 F1 | 	sub	fp, #24
2078c     1B 39 02 F6 | 	mov	local14, local13
20790     18 39 52 F2 | 	cmps	local14, local10 wc
20794     20 00 90 3D |  if_ae	jmp	#LR__2841
20798                 | LR__2840
20798     C0 4E 05 F1 | 	add	fp, #192
2079c     A7 2C 02 FB | 	rdlong	local08, fp
207a0     16 35 02 F6 | 	mov	local12, local08
207a4     01 34 06 F1 | 	add	local12, #1
207a8     A7 34 62 FC | 	wrlong	local12, fp
207ac     C0 4E 85 F1 | 	sub	fp, #192
207b0     2E 2E 06 F6 | 	mov	local09, #46
207b4     16 5D 48 FC | 	wrbyte	#46, local08
207b8                 | LR__2841
207b8     18 4E 05 F1 | 	add	fp, #24
207bc     A7 3A 02 FB | 	rdlong	local15, fp
207c0     1D 35 02 F6 | 	mov	local12, local15
207c4     01 34 06 F1 | 	add	local12, #1
207c8     A7 34 62 FC | 	wrlong	local12, fp
207cc     18 4E 85 F1 | 	sub	fp, #24
207d0     C4 FE 9F FD | 	jmp	#LR__2837
207d4                 | LR__2842
207d4                 | LR__2843
207d4     34 4E 05 F1 | 	add	fp, #52
207d8     A7 1E 0A FB | 	rdlong	local01, fp wz
207dc     34 4E 85 F1 | 	sub	fp, #52
207e0     A0 00 90 AD |  if_e	jmp	#LR__2847
207e4     C0 4E 05 F1 | 	add	fp, #192
207e8     A7 1E 02 FB | 	rdlong	local01, fp
207ec     01 1E 86 F1 | 	sub	local01, #1
207f0     A7 1E 62 FC | 	wrlong	local01, fp
207f4     C0 4E 85 F1 | 	sub	fp, #192
207f8     97 26 48 FB | 	callpa	#(@LR__2845-@LR__2844)>>2,fcache_load_ptr_
207fc                 | LR__2844
207fc     C0 4E 05 F1 | 	add	fp, #192
20800     A7 1E 02 FB | 	rdlong	local01, fp
20804     04 4E 05 F1 | 	add	fp, #4
20808     A7 22 02 FB | 	rdlong	local03, fp
2080c     C4 4E 85 F1 | 	sub	fp, #196
20810     11 1F 5A F2 | 	cmps	local01, local03 wcz
20814     30 00 90 ED |  if_be	jmp	#LR__2846
20818     C0 4E 05 F1 | 	add	fp, #192
2081c     A7 28 02 FB | 	rdlong	local06, fp
20820     C0 4E 85 F1 | 	sub	fp, #192
20824     14 25 C2 FA | 	rdbyte	local04, local06
20828     30 24 0E F2 | 	cmp	local04, #48 wz
2082c     18 00 90 5D |  if_ne	jmp	#LR__2846
20830     C0 4E 05 F1 | 	add	fp, #192
20834     A7 1E 02 FB | 	rdlong	local01, fp
20838     01 1E 86 F1 | 	sub	local01, #1
2083c     A7 1E 62 FC | 	wrlong	local01, fp
20840     C0 4E 85 F1 | 	sub	fp, #192
20844     B4 FF 9F FD | 	jmp	#LR__2844
20848                 | LR__2845
20848                 | LR__2846
20848     C0 4E 05 F1 | 	add	fp, #192
2084c     A7 20 02 FB | 	rdlong	local02, fp
20850     C0 4E 85 F1 | 	sub	fp, #192
20854     10 1F C2 FA | 	rdbyte	local01, local02
20858     2E 1E 0E F2 | 	cmp	local01, #46 wz
2085c     C0 4E 05 A1 |  if_e	add	fp, #192
20860     A7 1E 02 AB |  if_e	rdlong	local01, fp
20864     01 1E 86 A1 |  if_e	sub	local01, #1
20868     A7 1E 62 AC |  if_e	wrlong	local01, fp
2086c     C0 4E 85 A1 |  if_e	sub	fp, #192
20870     C0 4E 05 F1 | 	add	fp, #192
20874     A7 22 02 FB | 	rdlong	local03, fp
20878     01 22 06 F1 | 	add	local03, #1
2087c     A7 22 62 FC | 	wrlong	local03, fp
20880     C0 4E 85 F1 | 	sub	fp, #192
20884                 | LR__2847
20884     24 4E 05 F1 | 	add	fp, #36
20888     A7 1E 0A FB | 	rdlong	local01, fp wz
2088c     24 4E 85 F1 | 	sub	fp, #36
20890     B4 00 90 AD |  if_e	jmp	#LR__2850
20894     C0 4E 05 F1 | 	add	fp, #192
20898     A7 20 02 FB | 	rdlong	local02, fp
2089c     10 23 02 F6 | 	mov	local03, local02
208a0     01 22 06 F1 | 	add	local03, #1
208a4     A7 22 62 FC | 	wrlong	local03, fp
208a8     90 4E 85 F1 | 	sub	fp, #144
208ac     A7 24 02 FB | 	rdlong	local04, fp
208b0     10 25 42 FC | 	wrbyte	local04, local02
208b4     90 4E 05 F1 | 	add	fp, #144
208b8     A7 20 02 FB | 	rdlong	local02, fp
208bc     10 23 02 F6 | 	mov	local03, local02
208c0     01 22 06 F1 | 	add	local03, #1
208c4     A7 22 62 FC | 	wrlong	local03, fp
208c8     60 4E 85 F1 | 	sub	fp, #96
208cc     A7 24 02 FB | 	rdlong	local04, fp
208d0     10 25 42 FC | 	wrbyte	local04, local02
208d4     48 4E 85 F1 | 	sub	fp, #72
208d8     A7 00 68 FC | 	wrlong	#0, fp
208dc     18 4E 85 F1 | 	sub	fp, #24
208e0                 | LR__2848
208e0     18 4E 05 F1 | 	add	fp, #24
208e4     A7 20 02 FB | 	rdlong	local02, fp
208e8     44 4E 05 F1 | 	add	fp, #68
208ec     A7 26 02 FB | 	rdlong	local05, fp
208f0     5C 4E 85 F1 | 	sub	fp, #92
208f4     13 21 52 F2 | 	cmps	local02, local05 wc
208f8     4C 00 90 3D |  if_ae	jmp	#LR__2849
208fc     C0 4E 05 F1 | 	add	fp, #192
20900     A7 2C 02 FB | 	rdlong	local08, fp
20904     16 35 02 F6 | 	mov	local12, local08
20908     01 34 06 F1 | 	add	local12, #1
2090c     A7 34 62 FC | 	wrlong	local12, fp
20910     A8 4E 85 F1 | 	sub	fp, #168
20914     A7 2A 02 FB | 	rdlong	local07, fp
20918     15 2F 02 F6 | 	mov	local09, local07
2091c     98 4E 05 F1 | 	add	fp, #152
20920     A7 30 02 F6 | 	mov	local10, fp
20924     A7 2E 02 F1 | 	add	local09, fp
20928     17 33 C2 FA | 	rdbyte	local11, local09
2092c     16 33 42 FC | 	wrbyte	local11, local08
20930     98 4E 85 F1 | 	sub	fp, #152
20934     A7 34 02 FB | 	rdlong	local12, fp
20938     01 34 06 F1 | 	add	local12, #1
2093c     A7 34 62 FC | 	wrlong	local12, fp
20940     18 4E 85 F1 | 	sub	fp, #24
20944     98 FF 9F FD | 	jmp	#LR__2848
20948                 | LR__2849
20948                 | LR__2850
20948     C0 4E 05 F1 | 	add	fp, #192
2094c     A7 1E 02 FB | 	rdlong	local01, fp
20950     C0 4E 85 F1 | 	sub	fp, #192
20954     0F 01 48 FC | 	wrbyte	#0, local01
20958                 | LR__2851
20958     6C 4E 05 F1 | 	add	fp, #108
2095c     A7 1E 0A FB | 	rdlong	local01, fp wz
20960     6C 4E 85 F1 | 	sub	fp, #108
20964     90 01 90 AD |  if_e	jmp	#LR__2862
20968     48 4E 05 F1 | 	add	fp, #72
2096c     A7 22 0A FB | 	rdlong	local03, fp wz
20970     48 4E 85 F1 | 	sub	fp, #72
20974     80 01 90 AD |  if_e	jmp	#LR__2862
20978     C4 4E 05 F1 | 	add	fp, #196
2097c     A7 12 02 FB | 	rdlong	arg01, fp
20980     C4 4E 85 F1 | 	sub	fp, #196
20984     09 3D 02 F6 | 	mov	local16, arg01
20988     97 06 48 FB | 	callpa	#(@LR__2853-@LR__2852)>>2,fcache_load_ptr_
2098c                 | LR__2852
2098c     1E FB C9 FA | 	rdbyte	result1, local16 wz
20990     01 3C 06 51 |  if_ne	add	local16, #1
20994     F4 FF 9F 5D |  if_ne	jmp	#LR__2852
20998                 | LR__2853
20998     09 3D 82 F1 | 	sub	local16, arg01
2099c     1E 25 02 F6 | 	mov	local04, local16
209a0     6C 4E 05 F1 | 	add	fp, #108
209a4     A7 28 02 FB | 	rdlong	local06, fp
209a8     6C 4E 85 F1 | 	sub	fp, #108
209ac     14 25 5A F2 | 	cmps	local04, local06 wcz
209b0     44 01 90 ED |  if_be	jmp	#LR__2862
209b4     C4 4E 05 F1 | 	add	fp, #196
209b8     A7 1E 02 FB | 	rdlong	local01, fp
209bc     5C 4E 05 F1 | 	add	fp, #92
209c0     A7 1E 62 FC | 	wrlong	local01, fp
209c4     FC 4E 85 F1 | 	sub	fp, #252
209c8     A7 1E 0A FB | 	rdlong	local01, fp wz
209cc     24 4E 85 F1 | 	sub	fp, #36
209d0     20 00 90 AD |  if_e	jmp	#LR__2854
209d4     B8 4E 05 F1 | 	add	fp, #184
209d8     A7 00 68 FC | 	wrlong	#0, fp
209dc     4C 4E 85 F1 | 	sub	fp, #76
209e0     A7 1E 02 FB | 	rdlong	local01, fp
209e4     B0 4E 05 F1 | 	add	fp, #176
209e8     A7 1E 62 FC | 	wrlong	local01, fp
209ec     1C 4F 85 F1 | 	sub	fp, #284
209f0     24 00 90 FD | 	jmp	#LR__2855
209f4                 | LR__2854
209f4     6C 4E 05 F1 | 	add	fp, #108
209f8     A7 1E 02 FB | 	rdlong	local01, fp
209fc     01 1E 86 F1 | 	sub	local01, #1
20a00     4C 4E 05 F1 | 	add	fp, #76
20a04     A7 22 02 FB | 	rdlong	local03, fp
20a08     11 1F 82 F1 | 	sub	local01, local03
20a0c     64 4E 05 F1 | 	add	fp, #100
20a10     A7 1E 62 FC | 	wrlong	local01, fp
20a14     1C 4F 85 F1 | 	sub	fp, #284
20a18                 | LR__2855
20a18     97 20 48 FB | 	callpa	#(@LR__2857-@LR__2856)>>2,fcache_load_ptr_
20a1c                 | LR__2856
20a1c     1C 4F 05 F1 | 	add	fp, #284
20a20     A7 1E 0A FB | 	rdlong	local01, fp wz
20a24     1C 4F 85 F1 | 	sub	fp, #284
20a28     30 00 90 AD |  if_e	jmp	#LR__2858
20a2c     20 4F 05 F1 | 	add	fp, #288
20a30     A7 20 02 FB | 	rdlong	local02, fp
20a34     10 23 02 F6 | 	mov	local03, local02
20a38     01 22 06 F1 | 	add	local03, #1
20a3c     A7 22 62 FC | 	wrlong	local03, fp
20a40     10 55 48 FC | 	wrbyte	#42, local02
20a44     04 4E 85 F1 | 	sub	fp, #4
20a48     A7 1E 02 FB | 	rdlong	local01, fp
20a4c     01 1E 86 F1 | 	sub	local01, #1
20a50     A7 1E 62 FC | 	wrlong	local01, fp
20a54     1C 4F 85 F1 | 	sub	fp, #284
20a58     C0 FF 9F FD | 	jmp	#LR__2856
20a5c                 | LR__2857
20a5c                 | LR__2858
20a5c     B8 4E 05 F1 | 	add	fp, #184
20a60     A7 1E 0A FB | 	rdlong	local01, fp wz
20a64     B8 4E 85 F1 | 	sub	fp, #184
20a68     70 00 90 AD |  if_e	jmp	#LR__2861
20a6c     20 4F 05 F1 | 	add	fp, #288
20a70     A7 20 02 FB | 	rdlong	local02, fp
20a74     10 23 02 F6 | 	mov	local03, local02
20a78     01 22 06 F1 | 	add	local03, #1
20a7c     A7 22 62 FC | 	wrlong	local03, fp
20a80     10 5D 48 FC | 	wrbyte	#46, local02
20a84     04 4E 85 F1 | 	sub	fp, #4
20a88     A7 00 68 FC | 	wrlong	#0, fp
20a8c     1C 4F 85 F1 | 	sub	fp, #284
20a90                 | LR__2859
20a90     1C 4F 05 F1 | 	add	fp, #284
20a94     A7 20 02 FB | 	rdlong	local02, fp
20a98     64 4E 85 F1 | 	sub	fp, #100
20a9c     A7 26 02 FB | 	rdlong	local05, fp
20aa0     B8 4E 85 F1 | 	sub	fp, #184
20aa4     13 21 52 F2 | 	cmps	local02, local05 wc
20aa8     30 00 90 3D |  if_ae	jmp	#LR__2860
20aac     20 4F 05 F1 | 	add	fp, #288
20ab0     A7 2C 02 FB | 	rdlong	local08, fp
20ab4     16 35 02 F6 | 	mov	local12, local08
20ab8     01 34 06 F1 | 	add	local12, #1
20abc     A7 34 62 FC | 	wrlong	local12, fp
20ac0     16 55 48 FC | 	wrbyte	#42, local08
20ac4     04 4E 85 F1 | 	sub	fp, #4
20ac8     A7 34 02 FB | 	rdlong	local12, fp
20acc     01 34 06 F1 | 	add	local12, #1
20ad0     A7 34 62 FC | 	wrlong	local12, fp
20ad4     1C 4F 85 F1 | 	sub	fp, #284
20ad8     B4 FF 9F FD | 	jmp	#LR__2859
20adc                 | LR__2860
20adc                 | LR__2861
20adc     20 4F 05 F1 | 	add	fp, #288
20ae0     A7 20 02 FB | 	rdlong	local02, fp
20ae4     10 23 02 F6 | 	mov	local03, local02
20ae8     01 22 06 F1 | 	add	local03, #1
20aec     A7 22 62 FC | 	wrlong	local03, fp
20af0     20 4F 85 F1 | 	sub	fp, #288
20af4     10 01 48 FC | 	wrbyte	#0, local02
20af8                 | LR__2862
20af8     04 4E 05 F1 | 	add	fp, #4
20afc     A7 12 02 FB | 	rdlong	arg01, fp
20b00     04 4E 05 F1 | 	add	fp, #4
20b04     A7 14 02 FB | 	rdlong	arg02, fp
20b08     BC 4E 05 F1 | 	add	fp, #188
20b0c     A7 16 02 FB | 	rdlong	arg03, fp
20b10     C4 4E 85 F1 | 	sub	fp, #196
20b14     C4 EE BF FD | 	call	#__system___fmtstr
20b18                 | LR__2863
20b18     A7 F0 03 F6 | 	mov	ptra, fp
20b1c     B2 00 A0 FD | 	call	#popregs_
20b20                 | __system___fmtfloat_ret
20b20     2D 00 64 FD | 	ret
20b24                 | 
20b24                 | __system__Left_S
20b24     04 4A 05 F6 | 	mov	COUNT_, #4
20b28     A8 00 A0 FD | 	call	#pushregs_
20b2c     09 1F 02 F6 | 	mov	local01, arg01
20b30     0A 21 02 F6 | 	mov	local02, arg02
20b34     01 20 56 F2 | 	cmps	local02, #1 wc
20b38     70 01 00 CF 
20b3c     9A FA 05 C6 |  if_b	mov	result1, ##@LR__4753
20b40     5C 00 90 CD |  if_b	jmp	#LR__2873
20b44     0F 13 02 F6 | 	mov	arg01, local01
20b48     09 23 02 F6 | 	mov	local03, arg01
20b4c     97 06 48 FB | 	callpa	#(@LR__2871-@LR__2870)>>2,fcache_load_ptr_
20b50                 | LR__2870
20b50     11 FB C9 FA | 	rdbyte	result1, local03 wz
20b54     01 22 06 51 |  if_ne	add	local03, #1
20b58     F4 FF 9F 5D |  if_ne	jmp	#LR__2870
20b5c                 | LR__2871
20b5c     09 23 82 F1 | 	sub	local03, arg01
20b60     11 FB 01 F6 | 	mov	result1, local03
20b64     10 FB 59 F2 | 	cmps	result1, local02 wcz
20b68     0F FB 01 E6 |  if_be	mov	result1, local01
20b6c     30 00 90 ED |  if_be	jmp	#LR__2873
20b70     10 13 02 F6 | 	mov	arg01, local02
20b74     02 12 06 F1 | 	add	arg01, #2
20b78     AC 1D B0 FD | 	call	#__system___gc_alloc_managed
20b7c     FD 24 0A F6 | 	mov	local04, result1 wz
20b80     18 00 90 AD |  if_e	jmp	#LR__2872
20b84     12 13 02 F6 | 	mov	arg01, local04
20b88     0F 15 02 F6 | 	mov	arg02, local01
20b8c     10 17 02 F6 | 	mov	arg03, local02
20b90     A0 DE BF FD | 	call	#__system____builtin_memmove
20b94     12 21 02 F1 | 	add	local02, local04
20b98     10 01 48 FC | 	wrbyte	#0, local02
20b9c                 | LR__2872
20b9c     12 FB 01 F6 | 	mov	result1, local04
20ba0                 | LR__2873
20ba0     A7 F0 03 F6 | 	mov	ptra, fp
20ba4     B2 00 A0 FD | 	call	#popregs_
20ba8                 | __system__Left_S_ret
20ba8     2D 00 64 FD | 	ret
20bac                 | 
20bac                 | __system__Right_S
20bac     05 4A 05 F6 | 	mov	COUNT_, #5
20bb0     A8 00 A0 FD | 	call	#pushregs_
20bb4     09 1F 02 F6 | 	mov	local01, arg01
20bb8     0A 21 02 F6 | 	mov	local02, arg02
20bbc     01 20 56 F2 | 	cmps	local02, #1 wc
20bc0     70 01 00 CF 
20bc4     9B FA 05 C6 |  if_b	mov	result1, ##@LR__4754
20bc8     64 00 90 CD |  if_b	jmp	#LR__2883
20bcc     0F 13 02 F6 | 	mov	arg01, local01
20bd0     09 23 02 F6 | 	mov	local03, arg01
20bd4     97 06 48 FB | 	callpa	#(@LR__2881-@LR__2880)>>2,fcache_load_ptr_
20bd8                 | LR__2880
20bd8     11 FB C9 FA | 	rdbyte	result1, local03 wz
20bdc     01 22 06 51 |  if_ne	add	local03, #1
20be0     F4 FF 9F 5D |  if_ne	jmp	#LR__2880
20be4                 | LR__2881
20be4     09 23 82 F1 | 	sub	local03, arg01
20be8     11 FB 01 F6 | 	mov	result1, local03
20bec     FD 24 02 F6 | 	mov	local04, result1
20bf0     10 25 5A F2 | 	cmps	local04, local02 wcz
20bf4     0F FB 01 E6 |  if_be	mov	result1, local01
20bf8     34 00 90 ED |  if_be	jmp	#LR__2883
20bfc     10 13 02 F6 | 	mov	arg01, local02
20c00     02 12 06 F1 | 	add	arg01, #2
20c04     20 1D B0 FD | 	call	#__system___gc_alloc_managed
20c08     FD 26 0A F6 | 	mov	local05, result1 wz
20c0c     1C 00 90 AD |  if_e	jmp	#LR__2882
20c10     10 25 82 F1 | 	sub	local04, local02
20c14     0F 25 02 F1 | 	add	local04, local01
20c18     01 20 06 F1 | 	add	local02, #1
20c1c     13 13 02 F6 | 	mov	arg01, local05
20c20     12 15 02 F6 | 	mov	arg02, local04
20c24     10 17 02 F6 | 	mov	arg03, local02
20c28     08 DE BF FD | 	call	#__system____builtin_memmove
20c2c                 | LR__2882
20c2c     13 FB 01 F6 | 	mov	result1, local05
20c30                 | LR__2883
20c30     A7 F0 03 F6 | 	mov	ptra, fp
20c34     B2 00 A0 FD | 	call	#popregs_
20c38                 | __system__Right_S_ret
20c38     2D 00 64 FD | 	ret
20c3c                 | 
20c3c                 | __system__Mid_S
20c3c     05 4A 05 F6 | 	mov	COUNT_, #5
20c40     A8 00 A0 FD | 	call	#pushregs_
20c44     09 1F 02 F6 | 	mov	local01, arg01
20c48     0A 21 02 F6 | 	mov	local02, arg02
20c4c     01 16 56 F2 | 	cmps	arg03, #1 wc
20c50     70 01 00 CF 
20c54     9C FA 05 C6 |  if_b	mov	result1, ##@LR__4755
20c58     80 00 90 CD |  if_b	jmp	#LR__2893
20c5c     01 20 86 F1 | 	sub	local02, #1
20c60     00 20 56 F3 | 	fges	local02, #0 wc
20c64     0F 13 02 F6 | 	mov	arg01, local01
20c68     09 23 02 F6 | 	mov	local03, arg01
20c6c     97 06 48 FB | 	callpa	#(@LR__2891-@LR__2890)>>2,fcache_load_ptr_
20c70                 | LR__2890
20c70     11 FB C9 FA | 	rdbyte	result1, local03 wz
20c74     01 22 06 51 |  if_ne	add	local03, #1
20c78     F4 FF 9F 5D |  if_ne	jmp	#LR__2890
20c7c                 | LR__2891
20c7c     09 23 82 F1 | 	sub	local03, arg01
20c80     11 FB 01 F6 | 	mov	result1, local03
20c84     FD 14 02 F6 | 	mov	arg02, result1
20c88     10 15 52 F2 | 	cmps	arg02, local02 wc
20c8c     70 01 00 CF 
20c90     9D FA 05 C6 |  if_b	mov	result1, ##@LR__4756
20c94     44 00 90 CD |  if_b	jmp	#LR__2893
20c98     0A 25 02 F6 | 	mov	local04, arg02
20c9c     10 25 82 F1 | 	sub	local04, local02
20ca0     0B 25 5A F2 | 	cmps	local04, arg03 wcz
20ca4     0B 25 02 16 |  if_a	mov	local04, arg03
20ca8     12 13 02 F6 | 	mov	arg01, local04
20cac     02 12 06 F1 | 	add	arg01, #2
20cb0     74 1C B0 FD | 	call	#__system___gc_alloc_managed
20cb4     FD 26 0A F6 | 	mov	local05, result1 wz
20cb8     1C 00 90 AD |  if_e	jmp	#LR__2892
20cbc     0F 21 02 F1 | 	add	local02, local01
20cc0     13 13 02 F6 | 	mov	arg01, local05
20cc4     10 15 02 F6 | 	mov	arg02, local02
20cc8     12 17 02 F6 | 	mov	arg03, local04
20ccc     64 DD BF FD | 	call	#__system____builtin_memmove
20cd0     13 25 02 F1 | 	add	local04, local05
20cd4     12 01 48 FC | 	wrbyte	#0, local04
20cd8                 | LR__2892
20cd8     13 FB 01 F6 | 	mov	result1, local05
20cdc                 | LR__2893
20cdc     A7 F0 03 F6 | 	mov	ptra, fp
20ce0     B2 00 A0 FD | 	call	#popregs_
20ce4                 | __system__Mid_S_ret
20ce4     2D 00 64 FD | 	ret
20ce8                 | 
20ce8                 | __system__Chr_S
20ce8     01 4A 05 F6 | 	mov	COUNT_, #1
20cec     A8 00 A0 FD | 	call	#pushregs_
20cf0     09 1F 02 F6 | 	mov	local01, arg01
20cf4     03 12 06 F6 | 	mov	arg01, #3
20cf8     2C 1C B0 FD | 	call	#__system___gc_alloc_managed
20cfc     00 FA 4D F2 | 	cmps	result1, #0 wz
20d00     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
20d04     01 FA 05 51 |  if_ne	add	result1, #1
20d08     FD 00 48 5C |  if_ne	wrbyte	#0, result1
20d0c     01 FA 85 51 |  if_ne	sub	result1, #1
20d10     A7 F0 03 F6 | 	mov	ptra, fp
20d14     B2 00 A0 FD | 	call	#popregs_
20d18                 | __system__Chr_S_ret
20d18     2D 00 64 FD | 	ret
20d1c                 | 
20d1c                 | __system__str_S
20d1c     02 4A 05 F6 | 	mov	COUNT_, #2
20d20     A8 00 A0 FD | 	call	#pushregs_
20d24     09 1F 02 F6 | 	mov	local01, arg01
20d28     10 12 06 F6 | 	mov	arg01, #16
20d2c     F8 1B B0 FD | 	call	#__system___gc_alloc_managed
20d30     FD 20 0A F6 | 	mov	local02, result1 wz
20d34     30 00 90 AD |  if_e	jmp	#LR__2900
20d38     F8 13 02 F6 | 	mov	arg01, ptra
20d3c     08 F0 07 F1 | 	add	ptra, #8
20d40     09 21 62 FC | 	wrlong	local02, arg01
20d44     04 12 06 F1 | 	add	arg01, #4
20d48     09 01 68 FC | 	wrlong	#0, arg01
20d4c     04 12 86 F1 | 	sub	arg01, #4
20d50     00 48 04 FF 
20d54     00 12 46 F5 | 	or	arg01, ##143654912
20d58     00 14 06 F6 | 	mov	arg02, #0
20d5c     0F 17 02 F6 | 	mov	arg03, local01
20d60     67 18 06 F6 | 	mov	arg04, #103
20d64     90 EE BF FD | 	call	#__system___fmtfloat
20d68                 | LR__2900
20d68     10 FB 01 F6 | 	mov	result1, local02
20d6c     A7 F0 03 F6 | 	mov	ptra, fp
20d70     B2 00 A0 FD | 	call	#popregs_
20d74                 | __system__str_S_ret
20d74     2D 00 64 FD | 	ret
20d78                 | 
20d78                 | __system__Number_S
20d78     08 4A 05 F6 | 	mov	COUNT_, #8
20d7c     A8 00 A0 FD | 	call	#pushregs_
20d80     09 1F 02 F6 | 	mov	local01, arg01
20d84     0A 21 0A F6 | 	mov	local02, arg02 wz
20d88     0B 23 02 F6 | 	mov	local03, arg03
20d8c     3C 00 90 5D |  if_ne	jmp	#LR__2912
20d90     01 20 06 F6 | 	mov	local02, #1
20d94     11 25 02 F6 | 	mov	local04, local03
20d98     01 26 06 F6 | 	mov	local05, #1
20d9c     97 16 48 FB | 	callpa	#(@LR__2911-@LR__2910)>>2,fcache_load_ptr_
20da0                 | LR__2910
20da0     00 28 06 F6 | 	mov	local06, #0
20da4     0F 25 1A F2 | 	cmp	local04, local01 wcz
20da8     01 28 66 E6 |  if_be	neg	local06, #1
20dac     12 27 12 F2 | 	cmp	local05, local04 wc
20db0     15 2B A2 F1 | 	subx	local07, local07
20db4     15 29 CA F7 | 	test	local06, local07 wz
20db8     11 25 02 5D |  if_ne	qmul	local04, local03
20dbc     12 27 02 56 |  if_ne	mov	local05, local04
20dc0     01 20 06 51 |  if_ne	add	local02, #1
20dc4     18 24 62 5D |  if_ne	getqx	local04
20dc8     D4 FF 9F 5D |  if_ne	jmp	#LR__2910
20dcc                 | LR__2911
20dcc                 | LR__2912
20dcc     20 20 36 F3 | 	fle	local02, #32 wc
20dd0     10 13 02 F6 | 	mov	arg01, local02
20dd4     02 12 06 F1 | 	add	arg01, #2
20dd8     4C 1B B0 FD | 	call	#__system___gc_alloc_managed
20ddc     FD 28 02 F6 | 	mov	local06, result1
20de0     10 2B 02 F6 | 	mov	local07, local02
20de4     14 2B 02 F1 | 	add	local07, local06
20de8     15 01 48 FC | 	wrbyte	#0, local07
20dec     97 1A 48 FB | 	callpa	#(@LR__2914-@LR__2913)>>2,fcache_load_ptr_
20df0                 | LR__2913
20df0     01 20 16 F2 | 	cmp	local02, #1 wc
20df4     2C 00 90 CD |  if_b	jmp	#LR__2915
20df8     11 1F 12 FD | 	qdiv	local01, local03
20dfc     01 20 86 F1 | 	sub	local02, #1
20e00     10 2B 02 F6 | 	mov	local07, local02
20e04     14 2B 02 F1 | 	add	local07, local06
20e08     19 2C 62 FD | 	getqy	local08
20e0c     0A 2C 16 F2 | 	cmp	local08, #10 wc
20e10     30 2C 06 C1 |  if_b	add	local08, #48
20e14     37 2C 06 31 |  if_ae	add	local08, #55
20e18     15 2D 42 FC | 	wrbyte	local08, local07
20e1c     18 1E 62 FD | 	getqx	local01
20e20     CC FF 9F FD | 	jmp	#LR__2913
20e24                 | LR__2914
20e24                 | LR__2915
20e24     14 FB 01 F6 | 	mov	result1, local06
20e28     A7 F0 03 F6 | 	mov	ptra, fp
20e2c     B2 00 A0 FD | 	call	#popregs_
20e30                 | __system__Number_S_ret
20e30     2D 00 64 FD | 	ret
20e34                 | 
20e34                 | __system__LCase_S
20e34     07 4A 05 F6 | 	mov	COUNT_, #7
20e38     A8 00 A0 FD | 	call	#pushregs_
20e3c     09 1F 02 F6 | 	mov	local01, arg01
20e40     09 21 02 F6 | 	mov	local02, arg01
20e44     97 06 48 FB | 	callpa	#(@LR__2921-@LR__2920)>>2,fcache_load_ptr_
20e48                 | LR__2920
20e48     10 FB C9 FA | 	rdbyte	result1, local02 wz
20e4c     01 20 06 51 |  if_ne	add	local02, #1
20e50     F4 FF 9F 5D |  if_ne	jmp	#LR__2920
20e54                 | LR__2921
20e54     09 21 82 F1 | 	sub	local02, arg01
20e58     10 FB 01 F6 | 	mov	result1, local02
20e5c     FD 20 0A F6 | 	mov	local02, result1 wz
20e60     70 01 00 AF 
20e64     9E FA 05 A6 |  if_e	mov	result1, ##@LR__4757
20e68     7C 00 90 AD |  if_e	jmp	#LR__2927
20e6c     10 13 02 F6 | 	mov	arg01, local02
20e70     02 12 06 F1 | 	add	arg01, #2
20e74     B0 1A B0 FD | 	call	#__system___gc_alloc_managed
20e78     FD 22 0A F6 | 	mov	local03, result1 wz
20e7c     64 00 90 AD |  if_e	jmp	#LR__2926
20e80     01 24 66 F6 | 	neg	local04, #1
20e84     97 26 48 FB | 	callpa	#(@LR__2925-@LR__2922)>>2,fcache_load_ptr_
20e88                 | LR__2922
20e88     01 24 06 F1 | 	add	local04, #1
20e8c     12 27 02 F6 | 	mov	local05, local04
20e90     0F 27 02 F1 | 	add	local05, local01
20e94     13 29 C2 FA | 	rdbyte	local06, local05
20e98     41 28 56 F2 | 	cmps	local06, #65 wc
20e9c     18 00 90 CD |  if_b	jmp	#LR__2923
20ea0     5B 28 56 F2 | 	cmps	local06, #91 wc
20ea4     12 2B 02 C6 |  if_b	mov	local07, local04
20ea8     11 2B 02 C1 |  if_b	add	local07, local03
20eac     20 28 06 C1 |  if_b	add	local06, #32
20eb0     15 29 42 CC |  if_b	wrbyte	local06, local07
20eb4     0C 00 90 CD |  if_b	jmp	#LR__2924
20eb8                 | LR__2923
20eb8     12 2B 02 F6 | 	mov	local07, local04
20ebc     11 2B 02 F1 | 	add	local07, local03
20ec0     15 29 42 FC | 	wrbyte	local06, local07
20ec4                 | LR__2924
20ec4     10 29 02 F6 | 	mov	local06, local02
20ec8     01 28 86 F1 | 	sub	local06, #1
20ecc     14 25 0A F2 | 	cmp	local04, local06 wz
20ed0     B4 FF 9F 5D |  if_ne	jmp	#LR__2922
20ed4                 | LR__2925
20ed4     11 21 02 F1 | 	add	local02, local03
20ed8     10 01 48 FC | 	wrbyte	#0, local02
20edc     11 FB 01 F6 | 	mov	result1, local03
20ee0     04 00 90 FD | 	jmp	#LR__2927
20ee4                 | LR__2926
20ee4     11 FB 01 F6 | 	mov	result1, local03
20ee8                 | LR__2927
20ee8     A7 F0 03 F6 | 	mov	ptra, fp
20eec     B2 00 A0 FD | 	call	#popregs_
20ef0                 | __system__LCase_S_ret
20ef0     2D 00 64 FD | 	ret
20ef4                 | 
20ef4                 | __system__LTrim_S
20ef4     05 4A 05 F6 | 	mov	COUNT_, #5
20ef8     A8 00 A0 FD | 	call	#pushregs_
20efc     09 1F 02 F6 | 	mov	local01, arg01
20f00     09 21 02 F6 | 	mov	local02, arg01
20f04     97 06 48 FB | 	callpa	#(@LR__2931-@LR__2930)>>2,fcache_load_ptr_
20f08                 | LR__2930
20f08     10 FB C9 FA | 	rdbyte	result1, local02 wz
20f0c     01 20 06 51 |  if_ne	add	local02, #1
20f10     F4 FF 9F 5D |  if_ne	jmp	#LR__2930
20f14                 | LR__2931
20f14     09 21 82 F1 | 	sub	local02, arg01
20f18     10 FB 01 F6 | 	mov	result1, local02
20f1c     FD 20 0A F6 | 	mov	local02, result1 wz
20f20     70 01 00 AF 
20f24     9F FA 05 A6 |  if_e	mov	result1, ##@LR__4758
20f28     7C 00 90 AD |  if_e	jmp	#LR__2936
20f2c     00 22 06 F6 | 	mov	local03, #0
20f30     10 25 02 F6 | 	mov	local04, local02
20f34                 | LR__2932
20f34     12 23 52 F2 | 	cmps	local03, local04 wc
20f38     68 00 90 3D |  if_ae	jmp	#LR__2935
20f3c     11 17 02 F6 | 	mov	arg03, local03
20f40     0F 17 02 F1 | 	add	arg03, local01
20f44     0B 17 C2 FA | 	rdbyte	arg03, arg03
20f48     20 16 0E F2 | 	cmp	arg03, #32 wz
20f4c     4C 00 90 AD |  if_e	jmp	#LR__2934
20f50     10 13 02 F6 | 	mov	arg01, local02
20f54     11 13 82 F1 | 	sub	arg01, local03
20f58     02 12 06 F1 | 	add	arg01, #2
20f5c     C8 19 B0 FD | 	call	#__system___gc_alloc_managed
20f60     FD 26 0A F6 | 	mov	local05, result1 wz
20f64     2C 00 90 AD |  if_e	jmp	#LR__2933
20f68     11 15 02 F6 | 	mov	arg02, local03
20f6c     0F 15 02 F1 | 	add	arg02, local01
20f70     10 17 02 F6 | 	mov	arg03, local02
20f74     11 17 82 F1 | 	sub	arg03, local03
20f78     13 13 02 F6 | 	mov	arg01, local05
20f7c     B4 DA BF FD | 	call	#__system____builtin_memmove
20f80     11 21 82 F1 | 	sub	local02, local03
20f84     13 21 02 F1 | 	add	local02, local05
20f88     10 01 48 FC | 	wrbyte	#0, local02
20f8c     13 FB 01 F6 | 	mov	result1, local05
20f90     14 00 90 FD | 	jmp	#LR__2936
20f94                 | LR__2933
20f94     13 FB 01 F6 | 	mov	result1, local05
20f98     0C 00 90 FD | 	jmp	#LR__2936
20f9c                 | LR__2934
20f9c     01 22 06 F1 | 	add	local03, #1
20fa0     90 FF 9F FD | 	jmp	#LR__2932
20fa4                 | LR__2935
20fa4     0F FB 01 F6 | 	mov	result1, local01
20fa8                 | LR__2936
20fa8     A7 F0 03 F6 | 	mov	ptra, fp
20fac     B2 00 A0 FD | 	call	#popregs_
20fb0                 | __system__LTrim_S_ret
20fb0     2D 00 64 FD | 	ret
20fb4                 | 
20fb4                 | __system__RTrim_S
20fb4     04 4A 05 F6 | 	mov	COUNT_, #4
20fb8     A8 00 A0 FD | 	call	#pushregs_
20fbc     09 1F 02 F6 | 	mov	local01, arg01
20fc0     09 21 02 F6 | 	mov	local02, arg01
20fc4     97 06 48 FB | 	callpa	#(@LR__2941-@LR__2940)>>2,fcache_load_ptr_
20fc8                 | LR__2940
20fc8     10 FB C9 FA | 	rdbyte	result1, local02 wz
20fcc     01 20 06 51 |  if_ne	add	local02, #1
20fd0     F4 FF 9F 5D |  if_ne	jmp	#LR__2940
20fd4                 | LR__2941
20fd4     09 21 82 F1 | 	sub	local02, arg01
20fd8     10 FB 01 F6 | 	mov	result1, local02
20fdc     FD 20 0A F6 | 	mov	local02, result1 wz
20fe0     70 01 00 AF 
20fe4     A0 FA 05 A6 |  if_e	mov	result1, ##@LR__4759
20fe8     74 00 90 AD |  if_e	jmp	#LR__2945
20fec     10 23 02 F6 | 	mov	local03, local02
20ff0     01 22 86 F1 | 	sub	local03, #1
20ff4                 | LR__2942
20ff4     11 15 02 F6 | 	mov	arg02, local03
20ff8     0F 15 02 F1 | 	add	arg02, local01
20ffc     0A 21 C2 FA | 	rdbyte	local02, arg02
21000     20 20 0E F2 | 	cmp	local02, #32 wz
21004     44 00 90 AD |  if_e	jmp	#LR__2944
21008     11 13 02 F6 | 	mov	arg01, local03
2100c     02 12 06 F1 | 	add	arg01, #2
21010     14 19 B0 FD | 	call	#__system___gc_alloc_managed
21014     FD 24 0A F6 | 	mov	local04, result1 wz
21018     28 00 90 AD |  if_e	jmp	#LR__2943
2101c     11 17 02 F6 | 	mov	arg03, local03
21020     01 16 06 F1 | 	add	arg03, #1
21024     12 13 02 F6 | 	mov	arg01, local04
21028     0F 15 02 F6 | 	mov	arg02, local01
2102c     04 DA BF FD | 	call	#__system____builtin_memmove
21030     01 22 06 F1 | 	add	local03, #1
21034     12 23 02 F1 | 	add	local03, local04
21038     11 01 48 FC | 	wrbyte	#0, local03
2103c     12 FB 01 F6 | 	mov	result1, local04
21040     1C 00 90 FD | 	jmp	#LR__2945
21044                 | LR__2943
21044     12 FB 01 F6 | 	mov	result1, local04
21048     14 00 90 FD | 	jmp	#LR__2945
2104c                 | LR__2944
2104c     01 22 86 F1 | 	sub	local03, #1
21050     00 22 56 F2 | 	cmps	local03, #0 wc
21054     9C FF 9F 3D |  if_ae	jmp	#LR__2942
21058     70 01 00 FF 
2105c     A1 FA 05 F6 | 	mov	result1, ##@LR__4760
21060                 | LR__2945
21060     A7 F0 03 F6 | 	mov	ptra, fp
21064     B2 00 A0 FD | 	call	#popregs_
21068                 | __system__RTrim_S_ret
21068     2D 00 64 FD | 	ret
2106c                 | 
2106c                 | __system__Instr
2106c     07 4A 05 F6 | 	mov	COUNT_, #7
21070     A8 00 A0 FD | 	call	#pushregs_
21074     09 1F 02 F6 | 	mov	local01, arg01
21078     0A 21 02 F6 | 	mov	local02, arg02
2107c     0B 23 02 F6 | 	mov	local03, arg03
21080     11 13 02 F6 | 	mov	arg01, local03
21084     09 25 02 F6 | 	mov	local04, arg01
21088     97 06 48 FB | 	callpa	#(@LR__2951-@LR__2950)>>2,fcache_load_ptr_
2108c                 | LR__2950
2108c     12 FB C9 FA | 	rdbyte	result1, local04 wz
21090     01 24 06 51 |  if_ne	add	local04, #1
21094     F4 FF 9F 5D |  if_ne	jmp	#LR__2950
21098                 | LR__2951
21098     09 25 82 F1 | 	sub	local04, arg01
2109c     12 27 02 F6 | 	mov	local05, local04
210a0     10 13 02 F6 | 	mov	arg01, local02
210a4     09 25 02 F6 | 	mov	local04, arg01
210a8     97 06 48 FB | 	callpa	#(@LR__2953-@LR__2952)>>2,fcache_load_ptr_
210ac                 | LR__2952
210ac     12 FB C9 FA | 	rdbyte	result1, local04 wz
210b0     01 24 06 51 |  if_ne	add	local04, #1
210b4     F4 FF 9F 5D |  if_ne	jmp	#LR__2952
210b8                 | LR__2953
210b8     09 25 82 F1 | 	sub	local04, arg01
210bc     12 FB 01 F6 | 	mov	result1, local04
210c0     FD 18 0A F6 | 	mov	arg04, result1 wz
210c4     00 FA 05 A6 |  if_e	mov	result1, #0
210c8     98 00 90 AD |  if_e	jmp	#LR__2957
210cc     00 26 0E F2 | 	cmp	local05, #0 wz
210d0     00 FA 05 A6 |  if_e	mov	result1, #0
210d4     8C 00 90 AD |  if_e	jmp	#LR__2957
210d8     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
210dc     00 FA 05 16 |  if_a	mov	result1, #0
210e0     80 00 90 1D |  if_a	jmp	#LR__2957
210e4     01 1E 56 F2 | 	cmps	local01, #1 wc
210e8     01 1E 06 C6 |  if_b	mov	local01, #1
210ec     11 29 C2 FA | 	rdbyte	local06, local03
210f0     01 26 0E F2 | 	cmp	local05, #1 wz
210f4     18 00 90 5D |  if_ne	jmp	#LR__2954
210f8     10 13 02 F6 | 	mov	arg01, local02
210fc     14 15 02 F6 | 	mov	arg02, local06
21100     0F 17 02 F6 | 	mov	arg03, local01
21104     00 18 06 F6 | 	mov	arg04, #0
21108     B8 33 B0 FD | 	call	#__system____ScanForChar
2110c     54 00 90 FD | 	jmp	#LR__2957
21110                 | LR__2954
21110     0F 2B 02 F6 | 	mov	local07, local01
21114                 | LR__2955
21114     10 13 02 F6 | 	mov	arg01, local02
21118     14 15 02 F6 | 	mov	arg02, local06
2111c     15 17 02 F6 | 	mov	arg03, local07
21120     00 18 06 F6 | 	mov	arg04, #0
21124     9C 33 B0 FD | 	call	#__system____ScanForChar
21128     FD 2A 0A F6 | 	mov	local07, result1 wz
2112c     30 00 90 AD |  if_e	jmp	#LR__2956
21130     13 17 02 F6 | 	mov	arg03, local05
21134     10 13 02 F6 | 	mov	arg01, local02
21138     15 15 02 F6 | 	mov	arg02, local07
2113c     FC FA BF FD | 	call	#__system__Mid_S
21140     FD 12 02 F6 | 	mov	arg01, result1
21144     11 15 02 F6 | 	mov	arg02, local03
21148     F0 D9 BF FD | 	call	#__system___string_cmp
2114c     00 FA 0D F2 | 	cmp	result1, #0 wz
21150     15 FB 01 A6 |  if_e	mov	result1, local07
21154     0C 00 90 AD |  if_e	jmp	#LR__2957
21158     13 2B 02 F1 | 	add	local07, local05
2115c     B4 FF 9F FD | 	jmp	#LR__2955
21160                 | LR__2956
21160     00 FA 05 F6 | 	mov	result1, #0
21164                 | LR__2957
21164     A7 F0 03 F6 | 	mov	ptra, fp
21168     B2 00 A0 FD | 	call	#popregs_
2116c                 | __system__Instr_ret
2116c     2D 00 64 FD | 	ret
21170                 | 
21170                 | __system___strerror
21170     00 12 56 F2 | 	cmps	arg01, #0 wc
21174     08 00 90 CD |  if_b	jmp	#LR__2960
21178     1A 12 56 F2 | 	cmps	arg01, #26 wc
2117c     04 00 90 CD |  if_b	jmp	#LR__2961
21180                 | LR__2960
21180     19 12 06 F6 | 	mov	arg01, #25
21184                 | LR__2961
21184     02 12 66 F0 | 	shl	arg01, #2
21188     01 00 00 FF 
2118c     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
21190     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
21194     09 FB 01 FB | 	rdlong	result1, arg01
21198     01 00 00 FF 
2119c     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
211a0                 | __system___strerror_ret
211a0     2D 00 64 FD | 	ret
211a4                 | 
211a4                 | __system___int64_shl
211a4     20 16 CE F7 | 	test	arg03, #32 wz
211a8     09 15 02 56 |  if_ne	mov	arg02, arg01
211ac     00 12 06 56 |  if_ne	mov	arg01, #0
211b0     1F 16 CE F7 | 	test	arg03, #31 wz
211b4     18 00 90 AD |  if_e	jmp	#LR__2970
211b8     0B 15 62 F0 | 	shl	arg02, arg03
211bc     09 FB 01 F6 | 	mov	result1, arg01
211c0     0B FD 61 F6 | 	neg	result2, arg03
211c4     FE FA 41 F0 | 	shr	result1, result2
211c8     FD 14 42 F5 | 	or	arg02, result1
211cc     0B 13 62 F0 | 	shl	arg01, arg03
211d0                 | LR__2970
211d0     0A FD 01 F6 | 	mov	result2, arg02
211d4     09 FB 01 F6 | 	mov	result1, arg01
211d8                 | __system___int64_shl_ret
211d8     2D 00 64 FD | 	ret
211dc                 | 
211dc                 | __system___usepins
211dc     14 E6 05 F1 | 	add	ptr___system__dat__, #20
211e0     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
211e4     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
211e8     00 13 CA F7 | 	test	arg01, _var01 wz
211ec     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
211f0     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
211f4     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
211f8     01 15 CA A7 |  if_e	test	arg02, _var02 wz
211fc     00 FA 05 56 |  if_ne	mov	result1, #0
21200     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
21204     14 E6 05 F1 | 	add	ptr___system__dat__, #20
21208     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
2120c     09 03 42 F5 | 	or	_var02, arg01
21210     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
21214     04 E6 05 F1 | 	add	ptr___system__dat__, #4
21218     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
2121c     0A 03 42 F5 | 	or	_var02, arg02
21220     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
21224     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
21228     01 FA 65 F6 | 	neg	result1, #1
2122c                 | __system___usepins_ret
2122c     2D 00 64 FD | 	ret
21230                 | 
21230                 | __system___freepins
21230     14 E6 05 F1 | 	add	ptr___system__dat__, #20
21234     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
21238     09 01 22 F5 | 	andn	_var01, arg01
2123c     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
21240     04 E6 05 F1 | 	add	ptr___system__dat__, #4
21244     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
21248     0A 01 22 F5 | 	andn	_var01, arg02
2124c     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
21250     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
21254                 | __system___freepins_ret
21254     2D 00 64 FD | 	ret
21258                 | 
21258                 | __system___float_fromuns
21258     09 17 0A F6 | 	mov	arg03, arg01 wz
2125c     0B FB 01 A6 |  if_e	mov	result1, arg03
21260     24 00 90 AD |  if_e	jmp	#LR__2980
21264     0B 15 92 F7 | 	encod	arg02, arg03 wc
21268     01 14 06 C1 |  if_b	add	arg02, #1
2126c     01 14 86 F1 | 	sub	arg02, #1
21270     1F 12 06 F6 | 	mov	arg01, #31
21274     0A 13 82 F1 | 	sub	arg01, arg02
21278     09 17 62 F0 | 	shl	arg03, arg01
2127c     02 16 46 F0 | 	shr	arg03, #2
21280     00 12 06 F6 | 	mov	arg01, #0
21284     4C 09 B0 FD | 	call	#__system___float_Pack
21288                 | LR__2980
21288                 | __system___float_fromuns_ret
21288     2D 00 64 FD | 	ret
2128c                 | 
2128c                 | __system___float_add
2128c     0F 4A 05 F6 | 	mov	COUNT_, #15
21290     A8 00 A0 FD | 	call	#pushregs_
21294     09 1F 02 F6 | 	mov	local01, arg01
21298     0A 21 02 F6 | 	mov	local02, arg02
2129c     00 22 06 F6 | 	mov	local03, #0
212a0     0F 25 02 F6 | 	mov	local04, local01
212a4     12 27 02 F6 | 	mov	local05, local04
212a8     16 26 46 F7 | 	zerox	local05, #22
212ac     12 29 02 F6 | 	mov	local06, local04
212b0     01 28 66 F0 | 	shl	local06, #1
212b4     18 28 46 F0 | 	shr	local06, #24
212b8     1F 24 46 F0 | 	shr	local04, #31
212bc     10 13 02 F6 | 	mov	arg01, local02
212c0     09 FB 01 F6 | 	mov	result1, arg01
212c4     FD 2A 02 F6 | 	mov	local07, result1
212c8     15 2D 02 F6 | 	mov	local08, local07
212cc     16 2C 46 F7 | 	zerox	local08, #22
212d0     15 2F 02 F6 | 	mov	local09, local07
212d4     01 2E 66 F0 | 	shl	local09, #1
212d8     18 2E 46 F0 | 	shr	local09, #24
212dc     17 31 02 F6 | 	mov	local10, local09
212e0     1F 2A 46 F0 | 	shr	local07, #31
212e4     00 32 06 F6 | 	mov	local11, #0
212e8     00 34 06 F6 | 	mov	local12, #0
212ec     18 29 12 F2 | 	cmp	local06, local10 wc
212f0     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
212f4     2C 00 90 1D |  if_a	jmp	#LR__2990
212f8     16 27 12 32 |  if_ae	cmp	local05, local08 wc
212fc     24 00 90 3D |  if_ae	jmp	#LR__2990
21300     13 37 02 F6 | 	mov	local13, local05
21304     16 27 02 F6 | 	mov	local05, local08
21308     1B 2D 02 F6 | 	mov	local08, local13
2130c     14 37 02 F6 | 	mov	local13, local06
21310     18 29 02 F6 | 	mov	local06, local10
21314     1B 31 02 F6 | 	mov	local10, local13
21318     12 37 02 F6 | 	mov	local13, local04
2131c     15 25 02 F6 | 	mov	local04, local07
21320     1B 2B 02 F6 | 	mov	local07, local13
21324                 | LR__2990
21324     FF 28 0E F2 | 	cmp	local06, #255 wz
21328     70 01 90 AD |  if_e	jmp	#LR__3005
2132c     00 28 0E F2 | 	cmp	local06, #0 wz
21330     AC 01 90 AD |  if_e	jmp	#LR__3007
21334     17 26 26 F4 | 	bith	local05, #23
21338                 | LR__2991
21338     00 30 0E F2 | 	cmp	local10, #0 wz
2133c     F0 01 90 AD |  if_e	jmp	#LR__3011
21340     17 2C 26 F4 | 	bith	local08, #23
21344                 | LR__2992
21344     7F 28 86 F1 | 	sub	local06, #127
21348     7F 30 86 F1 | 	sub	local10, #127
2134c     14 39 02 F6 | 	mov	local14, local06
21350     18 39 82 F1 | 	sub	local14, local10
21354     97 14 48 FB | 	callpa	#(@LR__2994-@LR__2993)>>2,fcache_load_ptr_
21358                 | LR__2993
21358     20 38 56 F2 | 	cmps	local14, #32 wc
2135c     20 00 90 CD |  if_b	jmp	#LR__2995
21360     16 2F 02 F6 | 	mov	local09, local08
21364     00 32 0E F2 | 	cmp	local11, #0 wz
21368     6F 32 62 FD | 	wrnz	local11
2136c     19 2F 42 F5 | 	or	local09, local11
21370     17 33 02 F6 | 	mov	local11, local09
21374     00 2C 06 F6 | 	mov	local08, #0
21378     20 38 86 F1 | 	sub	local14, #32
2137c     D8 FF 9F FD | 	jmp	#LR__2993
21380                 | LR__2994
21380                 | LR__2995
21380     00 38 0E F2 | 	cmp	local14, #0 wz
21384     38 00 90 AD |  if_e	jmp	#LR__2996
21388     16 37 02 F6 | 	mov	local13, local08
2138c     20 30 06 F6 | 	mov	local10, #32
21390     1C 31 82 F1 | 	sub	local10, local14
21394     18 37 62 F0 | 	shl	local13, local10
21398     19 31 02 F6 | 	mov	local10, local11
2139c     20 2E 06 F6 | 	mov	local09, #32
213a0     1C 2F 82 F1 | 	sub	local09, local14
213a4     17 31 6A F0 | 	shl	local10, local09 wz
213a8     1C 33 42 F0 | 	shr	local11, local14
213ac     1C 2D 42 F0 | 	shr	local08, local14
213b0     1B 33 42 F5 | 	or	local11, local13
213b4     00 3A 06 F6 | 	mov	local15, #0
213b8     01 3A 06 56 |  if_ne	mov	local15, #1
213bc     1D 33 42 F5 | 	or	local11, local15
213c0                 | LR__2996
213c0     12 3B 02 F6 | 	mov	local15, local04
213c4     15 3B 62 F5 | 	xor	local15, local07
213c8     01 3A CE F7 | 	test	local15, #1 wz
213cc     18 00 90 AD |  if_e	jmp	#LR__2997
213d0     16 2D 22 F6 | 	not	local08, local08
213d4     19 33 22 F6 | 	not	local11, local11
213d8     01 32 0E F1 | 	add	local11, #1 wz
213dc     00 3A 06 F6 | 	mov	local15, #0
213e0     01 3A 06 A6 |  if_e	mov	local15, #1
213e4     1D 2D 02 F1 | 	add	local08, local15
213e8                 | LR__2997
213e8     19 35 12 F1 | 	add	local12, local11 wc
213ec     16 27 22 F1 | 	addx	local05, local08
213f0     00 26 56 F2 | 	cmps	local05, #0 wc
213f4     1C 00 90 3D |  if_ae	jmp	#LR__2998
213f8     01 24 66 F5 | 	xor	local04, #1
213fc     13 27 22 F6 | 	not	local05, local05
21400     1A 35 22 F6 | 	not	local12, local12
21404     01 34 0E F1 | 	add	local12, #1 wz
21408     00 3A 06 F6 | 	mov	local15, #0
2140c     01 3A 06 A6 |  if_e	mov	local15, #1
21410     1D 27 02 F1 | 	add	local05, local15
21414                 | LR__2998
21414     00 80 00 FF 
21418     00 26 16 F2 | 	cmp	local05, ##16777216 wc
2141c     28 00 90 CD |  if_b	jmp	#LR__2999
21420     01 28 06 F1 | 	add	local06, #1
21424     1A 39 02 F6 | 	mov	local14, local12
21428     01 38 06 F5 | 	and	local14, #1
2142c     01 34 46 F0 | 	shr	local12, #1
21430     13 3B 02 F6 | 	mov	local15, local05
21434     1F 3A 66 F0 | 	shl	local15, #31
21438     1D 35 42 F5 | 	or	local12, local15
2143c     1C 35 42 F5 | 	or	local12, local14
21440     01 26 46 F0 | 	shr	local05, #1
21444     3C 00 90 FD | 	jmp	#LR__3004
21448                 | LR__2999
21448     00 40 00 FF 
2144c     00 26 16 F2 | 	cmp	local05, ##8388608 wc
21450     30 00 90 3D |  if_ae	jmp	#LR__3003
21454     00 26 0E F2 | 	cmp	local05, #0 wz
21458     00 34 0E A2 |  if_e	cmp	local12, #0 wz
2145c     08 24 46 A5 |  if_e	or	local04, #8
21460     01 24 26 A5 |  if_e	andn	local04, #1
21464     1C 00 90 AD |  if_e	jmp	#LR__3002
21468                 | LR__3000
21468     00 40 00 FF 
2146c     00 26 16 F2 | 	cmp	local05, ##8388608 wc
21470     10 00 90 3D |  if_ae	jmp	#LR__3001
21474     1A 35 12 F1 | 	add	local12, local12 wc
21478     13 27 22 F1 | 	addx	local05, local05
2147c     01 28 86 F1 | 	sub	local06, #1
21480     E4 FF 9F FD | 	jmp	#LR__3000
21484                 | LR__3001
21484                 | LR__3002
21484                 | LR__3003
21484                 | LR__3004
21484     13 13 02 F6 | 	mov	arg01, local05
21488     1A 15 02 F6 | 	mov	arg02, local12
2148c     14 17 02 F6 | 	mov	arg03, local06
21490     12 19 02 F6 | 	mov	arg04, local04
21494     70 34 B0 FD | 	call	#__system__pack_0550
21498     DC 00 90 FD | 	jmp	#LR__3015
2149c                 | LR__3005
2149c     FF 30 0E F2 | 	cmp	local10, #255 wz
214a0     10 00 90 5D |  if_ne	jmp	#LR__3006
214a4     12 2B 0A F2 | 	cmp	local07, local04 wz
214a8     00 F8 3F 5F 
214ac     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
214b0     C4 00 90 5D |  if_ne	jmp	#LR__3015
214b4                 | LR__3006
214b4     00 26 0E F2 | 	cmp	local05, #0 wz
214b8     00 F8 3F 5F 
214bc     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
214c0     B4 00 90 5D |  if_ne	jmp	#LR__3015
214c4     1A 15 02 F6 | 	mov	arg02, local12
214c8     14 17 02 F6 | 	mov	arg03, local06
214cc     12 19 02 F6 | 	mov	arg04, local04
214d0     02 18 46 F5 | 	or	arg04, #2
214d4     13 13 02 F6 | 	mov	arg01, local05
214d8     2C 34 B0 FD | 	call	#__system__pack_0550
214dc     98 00 90 FD | 	jmp	#LR__3015
214e0                 | LR__3007
214e0     00 26 0E F2 | 	cmp	local05, #0 wz
214e4     28 00 90 AD |  if_e	jmp	#LR__3010
214e8     01 26 66 F0 | 	shl	local05, #1
214ec     97 0E 48 FB | 	callpa	#(@LR__3009-@LR__3008)>>2,fcache_load_ptr_
214f0                 | LR__3008
214f0     00 40 00 FF 
214f4     00 26 16 F2 | 	cmp	local05, ##8388608 wc
214f8     14 3B 02 C6 |  if_b	mov	local15, local06
214fc     01 3A 86 C1 |  if_b	sub	local15, #1
21500     1D 29 02 C6 |  if_b	mov	local06, local15
21504     01 26 66 C0 |  if_b	shl	local05, #1
21508     E4 FF 9F CD |  if_b	jmp	#LR__3008
2150c                 | LR__3009
2150c     28 FE 9F FD | 	jmp	#LR__2991
21510                 | LR__3010
21510     15 25 02 F5 | 	and	local04, local07
21514     12 19 02 F6 | 	mov	arg04, local04
21518     08 18 46 F5 | 	or	arg04, #8
2151c     00 12 06 F6 | 	mov	arg01, #0
21520     00 14 06 F6 | 	mov	arg02, #0
21524     00 16 06 F6 | 	mov	arg03, #0
21528     DC 33 B0 FD | 	call	#__system__pack_0550
2152c     48 00 90 FD | 	jmp	#LR__3015
21530                 | LR__3011
21530     00 2C 0E F2 | 	cmp	local08, #0 wz
21534     28 00 90 AD |  if_e	jmp	#LR__3014
21538     01 2C 66 F0 | 	shl	local08, #1
2153c     97 0E 48 FB | 	callpa	#(@LR__3013-@LR__3012)>>2,fcache_load_ptr_
21540                 | LR__3012
21540     00 40 00 FF 
21544     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
21548     18 3B 02 C6 |  if_b	mov	local15, local10
2154c     01 3A 86 C1 |  if_b	sub	local15, #1
21550     1D 31 02 C6 |  if_b	mov	local10, local15
21554     01 2C 66 C0 |  if_b	shl	local08, #1
21558     E4 FF 9F CD |  if_b	jmp	#LR__3012
2155c                 | LR__3013
2155c     E4 FD 9F FD | 	jmp	#LR__2992
21560                 | LR__3014
21560     7F 28 86 F1 | 	sub	local06, #127
21564     13 13 02 F6 | 	mov	arg01, local05
21568     1A 15 02 F6 | 	mov	arg02, local12
2156c     14 17 02 F6 | 	mov	arg03, local06
21570     12 19 02 F6 | 	mov	arg04, local04
21574     90 33 B0 FD | 	call	#__system__pack_0550
21578                 | LR__3015
21578     A7 F0 03 F6 | 	mov	ptra, fp
2157c     B2 00 A0 FD | 	call	#popregs_
21580                 | __system___float_add_ret
21580     2D 00 64 FD | 	ret
21584                 | 
21584                 | __system___float_sqrt
21584     04 4A 05 F6 | 	mov	COUNT_, #4
21588     A8 00 A0 FD | 	call	#pushregs_
2158c     09 1F 02 F6 | 	mov	local01, arg01
21590     09 FB 01 F6 | 	mov	result1, arg01
21594     FD 20 02 F6 | 	mov	local02, result1
21598     10 23 02 F6 | 	mov	local03, local02
2159c     16 22 46 F7 | 	zerox	local03, #22
215a0     10 25 02 F6 | 	mov	local04, local02
215a4     01 24 66 F0 | 	shl	local04, #1
215a8     18 24 4E F0 | 	shr	local04, #24 wz
215ac     1F 20 46 F0 | 	shr	local02, #31
215b0     70 00 90 AD |  if_e	jmp	#LR__3021
215b4     17 22 26 F4 | 	bith	local03, #23
215b8                 | LR__3020
215b8     00 20 0E F2 | 	cmp	local02, #0 wz
215bc     00 F8 3F 5F 
215c0     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
215c4     88 00 90 5D |  if_ne	jmp	#LR__3024
215c8     FF 24 0E F2 | 	cmp	local04, #255 wz
215cc     0F FB 01 A6 |  if_e	mov	result1, local01
215d0     7C 00 90 AD |  if_e	jmp	#LR__3024
215d4     7F 24 86 F1 | 	sub	local04, #127
215d8     01 24 CE F7 | 	test	local04, #1 wz
215dc     01 22 66 50 |  if_ne	shl	local03, #1
215e0     05 22 66 F0 | 	shl	local03, #5
215e4     11 01 38 FD | 	qsqrt	#0, local03
215e8     01 24 86 51 |  if_ne	sub	local04, #1
215ec     12 25 52 F6 | 	abs	local04, local04 wc
215f0     01 24 46 F0 | 	shr	local04, #1
215f4     12 17 82 F6 | 	negc	arg03, local04
215f8     10 19 02 F6 | 	mov	arg04, local02
215fc     18 12 62 FD | 	getqx	arg01
21600     09 15 02 F6 | 	mov	arg02, arg01
21604     19 14 66 F0 | 	shl	arg02, #25
21608     07 12 46 F0 | 	shr	arg01, #7
2160c     00 80 00 FF 
21610     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
21614     01 16 06 31 |  if_ae	add	arg03, #1
21618     01 12 46 30 |  if_ae	shr	arg01, #1
2161c     E8 32 B0 FD | 	call	#__system__pack_0550
21620     2C 00 90 FD | 	jmp	#LR__3024
21624                 | LR__3021
21624     00 22 0E F2 | 	cmp	local03, #0 wz
21628     0F FB 01 A6 |  if_e	mov	result1, local01
2162c     20 00 90 AD |  if_e	jmp	#LR__3024
21630     01 22 66 F0 | 	shl	local03, #1
21634     97 0A 48 FB | 	callpa	#(@LR__3023-@LR__3022)>>2,fcache_load_ptr_
21638                 | LR__3022
21638     00 40 00 FF 
2163c     00 22 16 F2 | 	cmp	local03, ##8388608 wc
21640     01 24 86 C1 |  if_b	sub	local04, #1
21644     01 22 66 C0 |  if_b	shl	local03, #1
21648     EC FF 9F CD |  if_b	jmp	#LR__3022
2164c                 | LR__3023
2164c     68 FF 9F FD | 	jmp	#LR__3020
21650                 | LR__3024
21650     A7 F0 03 F6 | 	mov	ptra, fp
21654     B2 00 A0 FD | 	call	#popregs_
21658                 | __system___float_sqrt_ret
21658     2D 00 64 FD | 	ret
2165c                 | 
2165c                 | __system___float_mul
2165c     0B 4A 05 F6 | 	mov	COUNT_, #11
21660     A8 00 A0 FD | 	call	#pushregs_
21664     09 1F 02 F6 | 	mov	local01, arg01
21668     0A 21 02 F6 | 	mov	local02, arg02
2166c     0F 23 02 F6 | 	mov	local03, local01
21670     11 25 02 F6 | 	mov	local04, local03
21674     16 24 46 F7 | 	zerox	local04, #22
21678     11 27 02 F6 | 	mov	local05, local03
2167c     01 26 66 F0 | 	shl	local05, #1
21680     18 26 46 F0 | 	shr	local05, #24
21684     1F 22 46 F0 | 	shr	local03, #31
21688     10 FB 01 F6 | 	mov	result1, local02
2168c     FD 28 02 F6 | 	mov	local06, result1
21690     14 2B 02 F6 | 	mov	local07, local06
21694     16 2A 46 F7 | 	zerox	local07, #22
21698     14 2D 02 F6 | 	mov	local08, local06
2169c     01 2C 66 F0 | 	shl	local08, #1
216a0     18 2C 46 F0 | 	shr	local08, #24
216a4     1F 28 46 F0 | 	shr	local06, #31
216a8     14 23 62 F5 | 	xor	local03, local06
216ac     FF 26 0E F2 | 	cmp	local05, #255 wz
216b0     90 00 90 AD |  if_e	jmp	#LR__3033
216b4     FF 2C 0E F2 | 	cmp	local08, #255 wz
216b8     D8 00 90 AD |  if_e	jmp	#LR__3035
216bc     00 26 0E F2 | 	cmp	local05, #0 wz
216c0     0C 01 90 AD |  if_e	jmp	#LR__3036
216c4     17 24 26 F4 | 	bith	local04, #23
216c8                 | LR__3030
216c8     00 2C 0E F2 | 	cmp	local08, #0 wz
216cc     44 01 90 AD |  if_e	jmp	#LR__3040
216d0     17 2A 26 F4 | 	bith	local07, #23
216d4                 | LR__3031
216d4     12 21 02 F6 | 	mov	local02, local04
216d8     04 20 66 F0 | 	shl	local02, #4
216dc     15 29 02 F6 | 	mov	local06, local07
216e0     05 28 66 F0 | 	shl	local06, #5
216e4     14 21 02 FD | 	qmul	local02, local06
216e8     16 27 02 F1 | 	add	local05, local08
216ec     FE 26 86 F1 | 	sub	local05, #254
216f0     13 2F 02 F6 | 	mov	local09, local05
216f4     04 24 66 F0 | 	shl	local04, #4
216f8     05 2A 66 F0 | 	shl	local07, #5
216fc     18 30 62 FD | 	getqx	local10
21700     15 25 02 FD | 	qmul	local04, local07
21704     19 32 62 FD | 	getqy	local11
21708     00 80 00 FF 
2170c     00 32 16 F2 | 	cmp	local11, ##16777216 wc
21710     18 00 90 CD |  if_b	jmp	#LR__3032
21714     01 2E 06 F1 | 	add	local09, #1
21718     01 30 46 F0 | 	shr	local10, #1
2171c     19 2D 02 F6 | 	mov	local08, local11
21720     1F 2C 66 F0 | 	shl	local08, #31
21724     16 31 42 F5 | 	or	local10, local08
21728     01 32 46 F0 | 	shr	local11, #1
2172c                 | LR__3032
2172c     19 13 02 F6 | 	mov	arg01, local11
21730     18 15 02 F6 | 	mov	arg02, local10
21734     17 17 02 F6 | 	mov	arg03, local09
21738     11 19 02 F6 | 	mov	arg04, local03
2173c     C8 31 B0 FD | 	call	#__system__pack_0550
21740     10 01 90 FD | 	jmp	#LR__3044
21744                 | LR__3033
21744     00 24 0E F2 | 	cmp	local04, #0 wz
21748     0F FB 01 56 |  if_ne	mov	result1, local01
2174c     04 01 90 5D |  if_ne	jmp	#LR__3044
21750     FF 2C 56 F2 | 	cmps	local08, #255 wc
21754     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
21758     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
2175c     18 00 90 4D |  if_c_and_nz	jmp	#LR__3034
21760     00 F8 3F CF 
21764     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
21768     E8 00 90 CD |  if_b	jmp	#LR__3044
2176c     00 2A 0E F2 | 	cmp	local07, #0 wz
21770     10 FB 01 56 |  if_ne	mov	result1, local02
21774     DC 00 90 5D |  if_ne	jmp	#LR__3044
21778                 | LR__3034
21778     02 22 46 F5 | 	or	local03, #2
2177c     00 12 06 F6 | 	mov	arg01, #0
21780     00 14 06 F6 | 	mov	arg02, #0
21784     13 17 02 F6 | 	mov	arg03, local05
21788     11 19 02 F6 | 	mov	arg04, local03
2178c     78 31 B0 FD | 	call	#__system__pack_0550
21790     C0 00 90 FD | 	jmp	#LR__3044
21794                 | LR__3035
21794     00 26 0E F2 | 	cmp	local05, #0 wz
21798     00 24 0E A2 |  if_e	cmp	local04, #0 wz
2179c     00 F8 3F AF 
217a0     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
217a4     AC 00 90 AD |  if_e	jmp	#LR__3044
217a8     00 2A 0E F2 | 	cmp	local07, #0 wz
217ac     10 FB 01 56 |  if_ne	mov	result1, local02
217b0     A0 00 90 5D |  if_ne	jmp	#LR__3044
217b4     16 17 02 F6 | 	mov	arg03, local08
217b8     11 19 02 F6 | 	mov	arg04, local03
217bc     02 18 46 F5 | 	or	arg04, #2
217c0     00 12 06 F6 | 	mov	arg01, #0
217c4     00 14 06 F6 | 	mov	arg02, #0
217c8     3C 31 B0 FD | 	call	#__system__pack_0550
217cc     84 00 90 FD | 	jmp	#LR__3044
217d0                 | LR__3036
217d0     00 24 0E F2 | 	cmp	local04, #0 wz
217d4     20 00 90 AD |  if_e	jmp	#LR__3039
217d8     01 24 66 F0 | 	shl	local04, #1
217dc     97 0A 48 FB | 	callpa	#(@LR__3038-@LR__3037)>>2,fcache_load_ptr_
217e0                 | LR__3037
217e0     00 40 00 FF 
217e4     00 24 16 F2 | 	cmp	local04, ##8388608 wc
217e8     01 26 86 C1 |  if_b	sub	local05, #1
217ec     01 24 66 C0 |  if_b	shl	local04, #1
217f0     EC FF 9F CD |  if_b	jmp	#LR__3037
217f4                 | LR__3038
217f4     D0 FE 9F FD | 	jmp	#LR__3030
217f8                 | LR__3039
217f8     08 22 46 F5 | 	or	local03, #8
217fc     00 12 06 F6 | 	mov	arg01, #0
21800     00 14 06 F6 | 	mov	arg02, #0
21804     00 16 06 F6 | 	mov	arg03, #0
21808     11 19 02 F6 | 	mov	arg04, local03
2180c     F8 30 B0 FD | 	call	#__system__pack_0550
21810     40 00 90 FD | 	jmp	#LR__3044
21814                 | LR__3040
21814     00 2A 0E F2 | 	cmp	local07, #0 wz
21818     20 00 90 AD |  if_e	jmp	#LR__3043
2181c     01 2A 66 F0 | 	shl	local07, #1
21820     97 0A 48 FB | 	callpa	#(@LR__3042-@LR__3041)>>2,fcache_load_ptr_
21824                 | LR__3041
21824     00 40 00 FF 
21828     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
2182c     01 2C 86 C1 |  if_b	sub	local08, #1
21830     01 2A 66 C0 |  if_b	shl	local07, #1
21834     EC FF 9F CD |  if_b	jmp	#LR__3041
21838                 | LR__3042
21838     98 FE 9F FD | 	jmp	#LR__3031
2183c                 | LR__3043
2183c     08 22 46 F5 | 	or	local03, #8
21840     00 12 06 F6 | 	mov	arg01, #0
21844     00 14 06 F6 | 	mov	arg02, #0
21848     00 16 06 F6 | 	mov	arg03, #0
2184c     11 19 02 F6 | 	mov	arg04, local03
21850     B4 30 B0 FD | 	call	#__system__pack_0550
21854                 | LR__3044
21854     A7 F0 03 F6 | 	mov	ptra, fp
21858     B2 00 A0 FD | 	call	#popregs_
2185c                 | __system___float_mul_ret
2185c     2D 00 64 FD | 	ret
21860                 | 
21860                 | __system___float_div
21860     0E 4A 05 F6 | 	mov	COUNT_, #14
21864     A8 00 A0 FD | 	call	#pushregs_
21868     09 23 02 F6 | 	mov	local03, arg01
2186c     0A 25 02 F6 | 	mov	local04, arg02
21870     11 27 02 F6 | 	mov	local05, local03
21874     13 29 02 F6 | 	mov	local06, local05
21878     16 28 46 F7 | 	zerox	local06, #22
2187c     13 2B 02 F6 | 	mov	local07, local05
21880     01 2A 66 F0 | 	shl	local07, #1
21884     18 2A 46 F0 | 	shr	local07, #24
21888     1F 26 46 F0 | 	shr	local05, #31
2188c     12 FB 01 F6 | 	mov	result1, local04
21890     FD 2C 02 F6 | 	mov	local08, result1
21894     16 2F 02 F6 | 	mov	local09, local08
21898     16 2E 46 F7 | 	zerox	local09, #22
2189c     16 31 02 F6 | 	mov	local10, local08
218a0     01 30 66 F0 | 	shl	local10, #1
218a4     18 30 46 F0 | 	shr	local10, #24
218a8     1F 2C 46 F0 | 	shr	local08, #31
218ac     16 27 62 F5 | 	xor	local05, local08
218b0     FF 2A 0E F2 | 	cmp	local07, #255 wz
218b4     D4 00 90 AD |  if_e	jmp	#LR__3055
218b8     FF 30 0E F2 | 	cmp	local10, #255 wz
218bc     04 01 90 AD |  if_e	jmp	#LR__3056
218c0     00 2A 0E F2 | 	cmp	local07, #0 wz
218c4     24 01 90 AD |  if_e	jmp	#LR__3057
218c8     17 28 26 F4 | 	bith	local06, #23
218cc                 | LR__3050
218cc     00 30 0E F2 | 	cmp	local10, #0 wz
218d0     70 01 90 AD |  if_e	jmp	#LR__3061
218d4     17 2E 26 F4 | 	bith	local09, #23
218d8                 | LR__3051
218d8     18 2B 82 F1 | 	sub	local07, local10
218dc     15 33 02 F6 | 	mov	local11, local07
218e0     14 13 02 F6 | 	mov	arg01, local06
218e4     02 12 46 F0 | 	shr	arg01, #2
218e8     1E 28 66 F0 | 	shl	local06, #30
218ec     14 15 02 F6 | 	mov	arg02, local06
218f0     17 17 02 F6 | 	mov	arg03, local09
218f4     28 12 62 FD | 	setq	arg01
218f8     0B 15 12 FD | 	qdiv	arg02, arg03
218fc     00 34 06 F6 | 	mov	local12, #0
21900     18 1E 62 FD | 	getqx	local01
21904     19 FC 61 FD | 	getqy	result2
21908     FE 20 02 F6 | 	mov	local02, result2
2190c     0F 37 02 F6 | 	mov	local13, local01
21910     00 20 4E F2 | 	cmps	local02, #0 wz
21914     1B 39 02 F6 | 	mov	local14, local13
21918     19 38 66 F0 | 	shl	local14, #25
2191c     01 34 06 56 |  if_ne	mov	local12, #1
21920     1A 39 42 F5 | 	or	local14, local12
21924     07 36 46 F0 | 	shr	local13, #7
21928     00 80 00 FF 
2192c     00 36 16 F2 | 	cmp	local13, ##16777216 wc
21930     1C 00 90 CD |  if_b	jmp	#LR__3052
21934     01 32 06 F1 | 	add	local11, #1
21938     01 38 46 F0 | 	shr	local14, #1
2193c     1B 35 02 F6 | 	mov	local12, local13
21940     1F 34 66 F0 | 	shl	local12, #31
21944     1A 39 42 F5 | 	or	local14, local12
21948     01 36 46 F0 | 	shr	local13, #1
2194c     24 00 90 FD | 	jmp	#LR__3054
21950                 | LR__3052
21950     00 40 00 FF 
21954     00 36 16 F2 | 	cmp	local13, ##8388608 wc
21958     18 00 90 3D |  if_ae	jmp	#LR__3053
2195c     01 32 86 F1 | 	sub	local11, #1
21960     01 36 66 F0 | 	shl	local13, #1
21964     1C 35 02 F6 | 	mov	local12, local14
21968     1F 34 46 F0 | 	shr	local12, #31
2196c     1A 37 42 F5 | 	or	local13, local12
21970     01 38 66 F0 | 	shl	local14, #1
21974                 | LR__3053
21974                 | LR__3054
21974     1B 13 02 F6 | 	mov	arg01, local13
21978     1C 15 02 F6 | 	mov	arg02, local14
2197c     19 17 02 F6 | 	mov	arg03, local11
21980     13 19 02 F6 | 	mov	arg04, local05
21984     80 2F B0 FD | 	call	#__system__pack_0550
21988     F8 00 90 FD | 	jmp	#LR__3065
2198c                 | LR__3055
2198c     00 28 0E F2 | 	cmp	local06, #0 wz
21990     11 FB 01 56 |  if_ne	mov	result1, local03
21994     EC 00 90 5D |  if_ne	jmp	#LR__3065
21998     FF 30 0E F2 | 	cmp	local10, #255 wz
2199c     00 F8 3F AF 
219a0     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
219a4     DC 00 90 AD |  if_e	jmp	#LR__3065
219a8     02 26 46 F5 | 	or	local05, #2
219ac     00 12 06 F6 | 	mov	arg01, #0
219b0     00 14 06 F6 | 	mov	arg02, #0
219b4     15 17 02 F6 | 	mov	arg03, local07
219b8     13 19 02 F6 | 	mov	arg04, local05
219bc     48 2F B0 FD | 	call	#__system__pack_0550
219c0     C0 00 90 FD | 	jmp	#LR__3065
219c4                 | LR__3056
219c4     00 2E 0E F2 | 	cmp	local09, #0 wz
219c8     12 FB 01 56 |  if_ne	mov	result1, local04
219cc     B4 00 90 5D |  if_ne	jmp	#LR__3065
219d0     13 19 02 F6 | 	mov	arg04, local05
219d4     08 18 46 F5 | 	or	arg04, #8
219d8     00 12 06 F6 | 	mov	arg01, #0
219dc     00 14 06 F6 | 	mov	arg02, #0
219e0     00 16 06 F6 | 	mov	arg03, #0
219e4     20 2F B0 FD | 	call	#__system__pack_0550
219e8     98 00 90 FD | 	jmp	#LR__3065
219ec                 | LR__3057
219ec     00 28 0E F2 | 	cmp	local06, #0 wz
219f0     20 00 90 AD |  if_e	jmp	#LR__3060
219f4     01 28 66 F0 | 	shl	local06, #1
219f8     97 0A 48 FB | 	callpa	#(@LR__3059-@LR__3058)>>2,fcache_load_ptr_
219fc                 | LR__3058
219fc     00 40 00 FF 
21a00     00 28 16 F2 | 	cmp	local06, ##8388608 wc
21a04     01 2A 86 C1 |  if_b	sub	local07, #1
21a08     01 28 66 C0 |  if_b	shl	local06, #1
21a0c     EC FF 9F CD |  if_b	jmp	#LR__3058
21a10                 | LR__3059
21a10     B8 FE 9F FD | 	jmp	#LR__3050
21a14                 | LR__3060
21a14     00 30 0E F2 | 	cmp	local10, #0 wz
21a18     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
21a1c     00 F8 3F AF 
21a20     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
21a24     5C 00 90 AD |  if_e	jmp	#LR__3065
21a28     13 19 02 F6 | 	mov	arg04, local05
21a2c     08 18 46 F5 | 	or	arg04, #8
21a30     00 12 06 F6 | 	mov	arg01, #0
21a34     00 14 06 F6 | 	mov	arg02, #0
21a38     00 16 06 F6 | 	mov	arg03, #0
21a3c     C8 2E B0 FD | 	call	#__system__pack_0550
21a40     40 00 90 FD | 	jmp	#LR__3065
21a44                 | LR__3061
21a44     00 2E 0E F2 | 	cmp	local09, #0 wz
21a48     20 00 90 AD |  if_e	jmp	#LR__3064
21a4c     01 2E 66 F0 | 	shl	local09, #1
21a50     97 0A 48 FB | 	callpa	#(@LR__3063-@LR__3062)>>2,fcache_load_ptr_
21a54                 | LR__3062
21a54     00 40 00 FF 
21a58     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
21a5c     01 30 86 C1 |  if_b	sub	local10, #1
21a60     01 2E 66 C0 |  if_b	shl	local09, #1
21a64     EC FF 9F CD |  if_b	jmp	#LR__3062
21a68                 | LR__3063
21a68     6C FE 9F FD | 	jmp	#LR__3051
21a6c                 | LR__3064
21a6c     02 26 46 F5 | 	or	local05, #2
21a70     00 12 06 F6 | 	mov	arg01, #0
21a74     00 14 06 F6 | 	mov	arg02, #0
21a78     00 16 06 F6 | 	mov	arg03, #0
21a7c     13 19 02 F6 | 	mov	arg04, local05
21a80     84 2E B0 FD | 	call	#__system__pack_0550
21a84                 | LR__3065
21a84     A7 F0 03 F6 | 	mov	ptra, fp
21a88     B2 00 A0 FD | 	call	#popregs_
21a8c                 | __system___float_div_ret
21a8c     2D 00 64 FD | 	ret
21a90                 | 
21a90                 | __system___float_cmp
21a90     00 C0 3F FF 
21a94     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
21a98     00 C0 3F CF 
21a9c     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
21aa0     0B FB 01 36 |  if_ae	mov	result1, arg03
21aa4     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
21aa8     00 C0 7F FF 
21aac     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
21ab0     00 C0 7F CF 
21ab4     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
21ab8     0B FB 01 36 |  if_ae	mov	result1, arg03
21abc     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
21ac0     00 12 56 F2 | 	cmps	arg01, #0 wc
21ac4     2C 00 90 3D |  if_ae	jmp	#LR__3070
21ac8     00 14 56 F2 | 	cmps	arg02, #0 wc
21acc     0A FB 01 C6 |  if_b	mov	result1, arg02
21ad0     09 FB 81 C1 |  if_b	sub	result1, arg01
21ad4     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
21ad8     00 14 0E F2 | 	cmp	arg02, #0 wz
21adc     00 00 40 AF 
21ae0     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
21ae4     00 FA 05 A6 |  if_e	mov	result1, #0
21ae8     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
21aec     01 FA 65 F6 | 	neg	result1, #1
21af0     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
21af4                 | LR__3070
21af4     00 14 56 F2 | 	cmps	arg02, #0 wc
21af8     1C 00 90 3D |  if_ae	jmp	#LR__3071
21afc     00 12 0E F2 | 	cmp	arg01, #0 wz
21b00     00 00 40 AF 
21b04     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
21b08     00 FA 05 A6 |  if_e	mov	result1, #0
21b0c     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
21b10     01 FA 05 F6 | 	mov	result1, #1
21b14     08 00 90 FD | 	jmp	#__system___float_cmp_ret
21b18                 | LR__3071
21b18     0A 13 82 F1 | 	sub	arg01, arg02
21b1c     09 FB 01 F6 | 	mov	result1, arg01
21b20                 | __system___float_cmp_ret
21b20     2D 00 64 FD | 	ret
21b24                 | 
21b24                 | __system___float_tointeger
21b24     02 4A 05 F6 | 	mov	COUNT_, #2
21b28     A8 00 A0 FD | 	call	#pushregs_
21b2c     50 00 B0 FD | 	call	#__system___float_Unpack
21b30     FF FF 7F FF 
21b34     FF FD 55 F2 | 	cmps	result2, ##-1 wc
21b38     34 00 90 CD |  if_b	jmp	#LR__3080
21b3c     1F FC 55 F2 | 	cmps	result2, #31 wc
21b40     2C 00 90 3D |  if_ae	jmp	#LR__3080
21b44     02 FE 65 F0 | 	shl	result3, #2
21b48     1E 1E 06 F6 | 	mov	local01, #30
21b4c     FE 1E 82 F1 | 	sub	local01, result2
21b50     0F FF 41 F0 | 	shr	result3, local01
21b54     FF 20 02 F6 | 	mov	local02, result3
21b58     0A 21 02 F1 | 	add	local02, arg02
21b5c     01 20 46 F0 | 	shr	local02, #1
21b60     00 FA 0D F2 | 	cmp	result1, #0 wz
21b64     10 21 62 56 |  if_ne	neg	local02, local02
21b68     10 FB 01 F6 | 	mov	result1, local02
21b6c     04 00 90 FD | 	jmp	#LR__3081
21b70                 | LR__3080
21b70     00 FA 05 F6 | 	mov	result1, #0
21b74                 | LR__3081
21b74     A7 F0 03 F6 | 	mov	ptra, fp
21b78     B2 00 A0 FD | 	call	#popregs_
21b7c                 | __system___float_tointeger_ret
21b7c     2D 00 64 FD | 	ret
21b80                 | 
21b80                 | __system___float_Unpack
21b80     09 01 02 F6 | 	mov	_var01, arg01
21b84     1F 00 46 F0 | 	shr	_var01, #31
21b88     09 03 02 F6 | 	mov	_var02, arg01
21b8c     01 02 66 F0 | 	shl	_var02, #1
21b90     18 02 4E F0 | 	shr	_var02, #24 wz
21b94     17 13 06 F4 | 	bitl	arg01, #279
21b98     06 12 66 50 |  if_ne	shl	arg01, #6
21b9c     1D 12 26 54 |  if_ne	bith	arg01, #29
21ba0     1C 00 90 5D |  if_ne	jmp	#LR__3090
21ba4     09 05 92 F7 | 	encod	_var03, arg01 wc
21ba8     01 04 06 C1 |  if_b	add	_var03, #1
21bac     17 04 86 F1 | 	sub	_var03, #23
21bb0     02 03 02 F6 | 	mov	_var02, _var03
21bb4     07 FC 05 F6 | 	mov	result2, #7
21bb8     02 FD 81 F1 | 	sub	result2, _var03
21bbc     FE 12 62 F0 | 	shl	arg01, result2
21bc0                 | LR__3090
21bc0     7F 02 86 F1 | 	sub	_var02, #127
21bc4     09 FF 01 F6 | 	mov	result3, arg01
21bc8     00 FB 01 F6 | 	mov	result1, _var01
21bcc     01 FD 01 F6 | 	mov	result2, _var02
21bd0                 | __system___float_Unpack_ret
21bd0     2D 00 64 FD | 	ret
21bd4                 | 
21bd4                 | __system___float_Pack
21bd4     00 00 06 F6 | 	mov	_var01, #0
21bd8     00 16 0E F2 | 	cmp	arg03, #0 wz
21bdc     8C 00 90 AD |  if_e	jmp	#LR__3101
21be0     0B 03 92 F7 | 	encod	_var02, arg03 wc
21be4     01 02 06 C1 |  if_b	add	_var02, #1
21be8     21 00 06 F6 | 	mov	_var01, #33
21bec     01 01 82 F1 | 	sub	_var01, _var02
21bf0     00 17 62 F0 | 	shl	arg03, _var01
21bf4     03 02 06 F6 | 	mov	_var02, #3
21bf8     00 03 82 F1 | 	sub	_var02, _var01
21bfc     01 15 02 F1 | 	add	arg02, _var02
21c00     0A 05 02 F6 | 	mov	_var03, arg02
21c04     00 17 06 F1 | 	add	arg03, #256
21c08     0B 03 02 F6 | 	mov	_var02, arg03
21c0c     FF 02 2E F5 | 	andn	_var02, #255 wz
21c10     01 04 06 A1 |  if_e	add	_var03, #1
21c14     7F 04 06 F1 | 	add	_var03, #127
21c18     FF FF 7F FF 
21c1c     E9 05 46 F3 | 	fges	_var03, ##-23
21c20     FF 04 66 F3 | 	fles	_var03, #255
21c24     01 04 56 F2 | 	cmps	_var03, #1 wc
21c28     1C 00 90 3D |  if_ae	jmp	#LR__3100
21c2c     01 16 46 F0 | 	shr	arg03, #1
21c30     1F 02 C6 F9 | 	decod	_var02, #31
21c34     0B 03 02 F1 | 	add	_var02, arg03
21c38     02 05 62 F6 | 	neg	_var03, _var03
21c3c     02 03 42 F0 | 	shr	_var02, _var03
21c40     01 17 02 F6 | 	mov	arg03, _var02
21c44     00 04 06 F6 | 	mov	_var03, #0
21c48                 | LR__3100
21c48     09 FB 01 F6 | 	mov	result1, arg01
21c4c     1F FA 65 F0 | 	shl	result1, #31
21c50     02 03 02 F6 | 	mov	_var02, _var03
21c54     17 02 66 F0 | 	shl	_var02, #23
21c58     01 FB 41 F5 | 	or	result1, _var02
21c5c     0B 07 02 F6 | 	mov	_var04, arg03
21c60     09 06 46 F0 | 	shr	_var04, #9
21c64     03 FB 41 F5 | 	or	result1, _var04
21c68     04 00 90 FD | 	jmp	#__system___float_Pack_ret
21c6c                 | LR__3101
21c6c     00 FB 01 F6 | 	mov	result1, _var01
21c70                 | __system___float_Pack_ret
21c70     2D 00 64 FD | 	ret
21c74                 | 
21c74                 | __system___basic_print_float
21c74     05 4A 05 F6 | 	mov	COUNT_, #5
21c78     A8 00 A0 FD | 	call	#pushregs_
21c7c     09 1F 02 F6 | 	mov	local01, arg01
21c80     0A 21 02 F6 | 	mov	local02, arg02
21c84     0B 23 0A F6 | 	mov	local03, arg03 wz
21c88     0C 25 02 F6 | 	mov	local04, arg04
21c8c     14 00 90 5D |  if_ne	jmp	#LR__3110
21c90     23 24 0E F2 | 	cmp	local04, #35 wz
21c94     80 02 10 AF 
21c98     00 26 06 A6 |  if_e	mov	local05, ##537198592
21c9c     1D 26 C6 59 |  if_ne	decod	local05, #29
21ca0     13 23 02 F6 | 	mov	local03, local05
21ca4                 | LR__3110
21ca4     0F 13 02 F6 | 	mov	arg01, local01
21ca8     40 27 B0 FD | 	call	#__system___gettxfunc
21cac     FD 26 0A F6 | 	mov	local05, result1 wz
21cb0     00 FA 05 A6 |  if_e	mov	result1, #0
21cb4     13 13 02 56 |  if_ne	mov	arg01, local05
21cb8     11 15 02 56 |  if_ne	mov	arg02, local03
21cbc     10 17 02 56 |  if_ne	mov	arg03, local02
21cc0     12 19 02 56 |  if_ne	mov	arg04, local04
21cc4     30 DF BF 5D |  if_ne	call	#__system___fmtfloat
21cc8     A7 F0 03 F6 | 	mov	ptra, fp
21ccc     B2 00 A0 FD | 	call	#popregs_
21cd0                 | __system___basic_print_float_ret
21cd0     2D 00 64 FD | 	ret
21cd4                 | 
21cd4                 | __system____builtin_atoi
21cd4     07 4A 05 F6 | 	mov	COUNT_, #7
21cd8     A8 00 A0 FD | 	call	#pushregs_
21cdc                 | __system____builtin_atoi_enter
21cdc     09 1F 02 F6 | 	mov	local01, arg01
21ce0     0A 21 02 F6 | 	mov	local02, arg02
21ce4     00 22 06 F6 | 	mov	local03, #0
21ce8     00 24 06 F6 | 	mov	local04, #0
21cec     00 26 06 F6 | 	mov	local05, #0
21cf0     97 08 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
21cf4                 | LR__3120
21cf4     0F 29 C2 FA | 	rdbyte	local06, local01
21cf8     20 28 0E F2 | 	cmp	local06, #32 wz
21cfc     01 1E 06 A1 |  if_e	add	local01, #1
21d00     F0 FF 9F AD |  if_e	jmp	#LR__3120
21d04                 | LR__3121
21d04     0F 2B C2 FA | 	rdbyte	local07, local01
21d08                 | LR__3122
21d08     2D 2A 0E F2 | 	cmp	local07, #45 wz
21d0c     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
21d10     18 00 90 5D |  if_ne	jmp	#LR__3123
21d14     01 1E 06 F1 | 	add	local01, #1
21d18     2D 2A 0E F2 | 	cmp	local07, #45 wz
21d1c     01 28 06 A6 |  if_e	mov	local06, #1
21d20     14 27 C2 A2 |  if_e	subr	local05, local06
21d24     0F 2B C2 FA | 	rdbyte	local07, local01
21d28     DC FF 9F FD | 	jmp	#LR__3122
21d2c                 | LR__3123
21d2c     97 48 48 FB | 	callpa	#(@LR__3131-@LR__3124)>>2,fcache_load_ptr_
21d30                 | LR__3124
21d30                 | LR__3125
21d30     0F 2B C2 FA | 	rdbyte	local07, local01
21d34     5F 2A 0E F2 | 	cmp	local07, #95 wz
21d38     01 1E 06 F1 | 	add	local01, #1
21d3c     F0 FF 9F AD |  if_e	jmp	#LR__3125
21d40     30 2A 0E F2 | 	cmp	local07, #48 wz
21d44     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
21d48     00 24 06 A6 |  if_e	mov	local04, #0
21d4c     60 00 90 AD |  if_e	jmp	#LR__3130
21d50     31 2A 56 F2 | 	cmps	local07, #49 wc
21d54     18 00 90 CD |  if_b	jmp	#LR__3126
21d58     3A 2A 56 F2 | 	cmps	local07, #58 wc
21d5c     15 25 02 C6 |  if_b	mov	local04, local07
21d60     30 24 86 C1 |  if_b	sub	local04, #48
21d64     00 20 0E C2 |  if_b	cmp	local02, #0 wz
21d68     0A 20 06 86 |  if_c_and_z	mov	local02, #10
21d6c     40 00 90 CD |  if_b	jmp	#LR__3129
21d70                 | LR__3126
21d70     0B 20 56 F2 | 	cmps	local02, #11 wc
21d74     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
21d78     14 00 90 CD |  if_b	jmp	#LR__3127
21d7c     67 2A 56 F2 | 	cmps	local07, #103 wc
21d80     61 2A 86 C1 |  if_b	sub	local07, #97
21d84     0A 24 06 C6 |  if_b	mov	local04, #10
21d88     15 25 02 C1 |  if_b	add	local04, local07
21d8c     20 00 90 CD |  if_b	jmp	#LR__3128
21d90                 | LR__3127
21d90     0B 20 56 F2 | 	cmps	local02, #11 wc
21d94     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
21d98     24 00 90 CD |  if_b	jmp	#LR__3132
21d9c     47 2A 56 F2 | 	cmps	local07, #71 wc
21da0     41 2A 86 C1 |  if_b	sub	local07, #65
21da4     0A 24 06 C6 |  if_b	mov	local04, #10
21da8     15 25 02 C1 |  if_b	add	local04, local07
21dac     10 00 90 3D |  if_ae	jmp	#LR__3132
21db0                 | LR__3128
21db0                 | LR__3129
21db0                 | LR__3130
21db0     11 21 02 FD | 	qmul	local02, local03
21db4     18 22 62 FD | 	getqx	local03
21db8     12 23 02 F1 | 	add	local03, local04
21dbc     70 FF 9F FD | 	jmp	#LR__3124
21dc0                 | LR__3131
21dc0                 | LR__3132
21dc0     00 20 0E F2 | 	cmp	local02, #0 wz
21dc4     64 00 90 5D |  if_ne	jmp	#LR__3138
21dc8     78 2A 0E F2 | 	cmp	local07, #120 wz
21dcc     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
21dd0     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
21dd4     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
21dd8     14 00 90 5D |  if_ne	jmp	#LR__3133
21ddc     0F 13 02 F6 | 	mov	arg01, local01
21de0     10 14 06 F6 | 	mov	arg02, #16
21de4     EC FE BF FD | 	call	#__system____builtin_atoi
21de8     FD 22 02 F6 | 	mov	local03, result1
21dec     3C 00 90 FD | 	jmp	#LR__3137
21df0                 | LR__3133
21df0     62 2A 0E F2 | 	cmp	local07, #98 wz
21df4     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
21df8     14 00 90 5D |  if_ne	jmp	#LR__3134
21dfc     0F 13 02 F6 | 	mov	arg01, local01
21e00     02 14 06 F6 | 	mov	arg02, #2
21e04     CC FE BF FD | 	call	#__system____builtin_atoi
21e08     FD 22 02 F6 | 	mov	local03, result1
21e0c     1C 00 90 FD | 	jmp	#LR__3136
21e10                 | LR__3134
21e10     6F 2A 0E F2 | 	cmp	local07, #111 wz
21e14     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
21e18     10 00 90 5D |  if_ne	jmp	#LR__3135
21e1c     0F 13 02 F6 | 	mov	arg01, local01
21e20     08 14 06 F6 | 	mov	arg02, #8
21e24     AC FE BF FD | 	call	#__system____builtin_atoi
21e28     FD 22 02 F6 | 	mov	local03, result1
21e2c                 | LR__3135
21e2c                 | LR__3136
21e2c                 | LR__3137
21e2c                 | LR__3138
21e2c     00 26 0E F2 | 	cmp	local05, #0 wz
21e30     11 23 62 56 |  if_ne	neg	local03, local03
21e34     11 FB 01 F6 | 	mov	result1, local03
21e38     A7 F0 03 F6 | 	mov	ptra, fp
21e3c     B2 00 A0 FD | 	call	#popregs_
21e40                 | __system____builtin_atoi_ret
21e40     2D 00 64 FD | 	ret
21e44                 | 
21e44                 | __system____builtin_atof
21e44     07 4A 05 F6 | 	mov	COUNT_, #7
21e48     A8 00 A0 FD | 	call	#pushregs_
21e4c     09 1F 02 F6 | 	mov	local01, arg01
21e50     00 20 06 F6 | 	mov	local02, #0
21e54     00 22 06 F6 | 	mov	local03, #0
21e58     00 24 06 F6 | 	mov	local04, #0
21e5c     00 26 06 F6 | 	mov	local05, #0
21e60     97 08 48 FB | 	callpa	#(@LR__3141-@LR__3140)>>2,fcache_load_ptr_
21e64                 | LR__3140
21e64     0F 17 C2 FA | 	rdbyte	arg03, local01
21e68     20 16 0E F2 | 	cmp	arg03, #32 wz
21e6c     01 1E 06 A1 |  if_e	add	local01, #1
21e70     F0 FF 9F AD |  if_e	jmp	#LR__3140
21e74                 | LR__3141
21e74     0F 29 C2 FA | 	rdbyte	local06, local01
21e78                 | LR__3142
21e78     2B 28 0E F2 | 	cmp	local06, #43 wz
21e7c     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
21e80     14 00 90 5D |  if_ne	jmp	#LR__3143
21e84     2D 28 0E F2 | 	cmp	local06, #45 wz
21e88     1F 24 E6 A4 |  if_e	bitnot	local04, #31
21e8c     01 1E 06 F1 | 	add	local01, #1
21e90     0F 29 C2 FA | 	rdbyte	local06, local01
21e94     E0 FF 9F FD | 	jmp	#LR__3142
21e98                 | LR__3143
21e98                 | LR__3144
21e98     97 08 48 FB | 	callpa	#(@LR__3146-@LR__3145)>>2,fcache_load_ptr_
21e9c                 | LR__3145
21e9c     0F 29 C2 FA | 	rdbyte	local06, local01
21ea0     5F 28 0E F2 | 	cmp	local06, #95 wz
21ea4     01 1E 06 F1 | 	add	local01, #1
21ea8     F0 FF 9F AD |  if_e	jmp	#LR__3145
21eac                 | LR__3146
21eac     00 28 0E F2 | 	cmp	local06, #0 wz
21eb0     5C 00 90 AD |  if_e	jmp	#LR__3148
21eb4     30 28 56 F2 | 	cmps	local06, #48 wc
21eb8     44 00 90 CD |  if_b	jmp	#LR__3147
21ebc     3A 28 56 F2 | 	cmps	local06, #58 wc
21ec0     3C 00 90 3D |  if_ae	jmp	#LR__3147
21ec4     10 13 02 F6 | 	mov	arg01, local02
21ec8     00 90 20 FF 
21ecc     00 14 06 F6 | 	mov	arg02, ##1092616192
21ed0     88 F7 BF FD | 	call	#__system___float_mul
21ed4     FD 20 02 F6 | 	mov	local02, result1
21ed8     30 28 86 F1 | 	sub	local06, #48
21edc     14 13 02 F6 | 	mov	arg01, local06
21ee0     74 F3 BF FD | 	call	#__system___float_fromuns
21ee4     FD 14 02 F6 | 	mov	arg02, result1
21ee8     10 13 02 F6 | 	mov	arg01, local02
21eec     9C F3 BF FD | 	call	#__system___float_add
21ef0     FD 20 02 F6 | 	mov	local02, result1
21ef4     00 26 0E F2 | 	cmp	local05, #0 wz
21ef8     01 22 86 51 |  if_ne	sub	local03, #1
21efc     98 FF 9F FD | 	jmp	#LR__3144
21f00                 | LR__3147
21f00     2E 28 0E F2 | 	cmp	local06, #46 wz
21f04     00 26 0E A2 |  if_e	cmp	local05, #0 wz
21f08     01 26 06 A6 |  if_e	mov	local05, #1
21f0c     88 FF 9F AD |  if_e	jmp	#LR__3144
21f10                 | LR__3148
21f10     45 28 0E F2 | 	cmp	local06, #69 wz
21f14     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
21f18     18 00 90 5D |  if_ne	jmp	#LR__3149
21f1c     0F 13 02 F6 | 	mov	arg01, local01
21f20     00 14 06 F6 | 	mov	arg02, #0
21f24     AC FD BF FD | 	call	#__system____builtin_atoi
21f28     11 FB 01 F1 | 	add	result1, local03
21f2c     FD 2A 02 F6 | 	mov	local07, result1
21f30     04 00 90 FD | 	jmp	#LR__3150
21f34                 | LR__3149
21f34     11 2B 02 F6 | 	mov	local07, local03
21f38                 | LR__3150
21f38     15 17 02 F6 | 	mov	arg03, local07
21f3c     10 13 02 F6 | 	mov	arg01, local02
21f40     00 90 20 FF 
21f44     00 14 06 F6 | 	mov	arg02, ##1092616192
21f48     BC 06 B0 FD | 	call	#__system___float_pow_n
21f4c     12 FB 61 F5 | 	xor	result1, local04
21f50     A7 F0 03 F6 | 	mov	ptra, fp
21f54     B2 00 A0 FD | 	call	#popregs_
21f58                 | __system____builtin_atof_ret
21f58     2D 00 64 FD | 	ret
21f5c                 | 
21f5c                 | __system____builtin_ilogb
21f5c     20 FC BF FD | 	call	#__system___float_Unpack
21f60     00 FE 0D F2 | 	cmp	result3, #0 wz
21f64     00 00 40 AF 
21f68     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
21f6c     24 00 90 AD |  if_e	jmp	#LR__3161
21f70     80 FC 0D F2 | 	cmp	result2, #128 wz
21f74     18 00 90 5D |  if_ne	jmp	#LR__3160
21f78     00 00 10 FF 
21f7c     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
21f80     1E FA CD A9 |  if_e	bmask	result1, #30
21f84     0C 00 90 AD |  if_e	jmp	#LR__3161
21f88     1F FA C5 F9 | 	decod	result1, #31
21f8c     04 00 90 FD | 	jmp	#LR__3161
21f90                 | LR__3160
21f90     FE FA 01 F6 | 	mov	result1, result2
21f94                 | LR__3161
21f94                 | __system____builtin_ilogb_ret
21f94     2D 00 64 FD | 	ret
21f98                 | 
21f98                 | __system____builtin_sinf
21f98     03 4A 05 F6 | 	mov	COUNT_, #3
21f9c     A8 00 A0 FD | 	call	#pushregs_
21fa0     09 1F 02 F6 | 	mov	local01, arg01
21fa4     87 64 20 FF 
21fa8     DB 15 06 F6 | 	mov	arg02, ##1086918619
21fac     B0 F8 BF FD | 	call	#__system___float_div
21fb0     FD 12 02 F6 | 	mov	arg01, result1
21fb4     00 14 06 F6 | 	mov	arg02, #0
21fb8     68 FB BF FD | 	call	#__system___float_tointeger
21fbc     FD 16 0A F6 | 	mov	arg03, result1 wz
21fc0     44 00 90 AD |  if_e	jmp	#LR__3170
21fc4     0B 13 52 F6 | 	abs	arg01, arg03 wc
21fc8     1F 20 C6 C9 |  if_b	decod	local02, #31
21fcc     00 20 06 36 |  if_ae	mov	local02, #0
21fd0     84 F2 BF FD | 	call	#__system___float_fromuns
21fd4     10 FB 61 F5 | 	xor	result1, local02
21fd8     FD 12 02 F6 | 	mov	arg01, result1
21fdc     1E 14 C6 F9 | 	decod	arg02, #30
21fe0     78 F6 BF FD | 	call	#__system___float_mul
21fe4     FD 12 02 F6 | 	mov	arg01, result1
21fe8     87 24 20 FF 
21fec     DB 15 06 F6 | 	mov	arg02, ##1078530011
21ff0     68 F6 BF FD | 	call	#__system___float_mul
21ff4     FD 14 02 F6 | 	mov	arg02, result1
21ff8     0F 13 02 F6 | 	mov	arg01, local01
21ffc     1F 14 E6 F4 | 	bitnot	arg02, #31
22000     88 F2 BF FD | 	call	#__system___float_add
22004     FD 1E 02 F6 | 	mov	local01, result1
22008                 | LR__3170
22008     0F 13 02 F6 | 	mov	arg01, local01
2200c     66 E6 1E FF 
22010     CD 14 06 F6 | 	mov	arg02, ##1036831949
22014     01 16 06 F6 | 	mov	arg03, #1
22018     74 FA BF FD | 	call	#__system___float_cmp
2201c     00 FA 55 F2 | 	cmps	result1, #0 wc
22020     5C 00 90 3D |  if_ae	jmp	#LR__3171
22024     0F 13 02 F6 | 	mov	arg01, local01
22028     66 E6 5E FF 
2202c     CD 14 06 F6 | 	mov	arg02, ##-1110651699
22030     01 16 66 F6 | 	neg	arg03, #1
22034     58 FA BF FD | 	call	#__system___float_cmp
22038     01 FA 55 F2 | 	cmps	result1, #1 wc
2203c     40 00 90 CD |  if_b	jmp	#LR__3171
22040     0F 13 02 F6 | 	mov	arg01, local01
22044     0F 15 02 F6 | 	mov	arg02, local01
22048     10 F6 BF FD | 	call	#__system___float_mul
2204c     FD 12 02 F6 | 	mov	arg01, result1
22050     0F 15 02 F6 | 	mov	arg02, local01
22054     04 F6 BF FD | 	call	#__system___float_mul
22058     FD 12 02 F6 | 	mov	arg01, result1
2205c     00 60 20 FF 
22060     00 14 06 F6 | 	mov	arg02, ##1086324736
22064     F8 F7 BF FD | 	call	#__system___float_div
22068     FD 14 02 F6 | 	mov	arg02, result1
2206c     0F 13 02 F6 | 	mov	arg01, local01
22070     1F 14 E6 F4 | 	bitnot	arg02, #31
22074     14 F2 BF FD | 	call	#__system___float_add
22078     FD 22 02 F6 | 	mov	local03, result1
2207c     54 00 90 FD | 	jmp	#LR__3172
22080                 | LR__3171
22080     0F 13 02 F6 | 	mov	arg01, local01
22084     7C 91 26 FF 
22088     83 15 06 F6 | 	mov	arg02, ##1294137731
2208c     CC F5 BF FD | 	call	#__system___float_mul
22090     FD 12 02 F6 | 	mov	arg01, result1
22094     00 14 06 F6 | 	mov	arg02, #0
22098     88 FA BF FD | 	call	#__system___float_tointeger
2209c     02 FA 65 F0 | 	shl	result1, #2
220a0     00 00 A0 FF 
220a4     FD 00 48 FD | 	qrotate	##1073741824, result1
220a8     19 12 62 FD | 	getqy	arg01
220ac     09 13 52 F6 | 	abs	arg01, arg01 wc
220b0     1F 20 C6 C9 |  if_b	decod	local02, #31
220b4     00 20 06 36 |  if_ae	mov	local02, #0
220b8     9C F1 BF FD | 	call	#__system___float_fromuns
220bc     10 FB 61 F5 | 	xor	result1, local02
220c0     FD 12 02 F6 | 	mov	arg01, result1
220c4     00 40 27 FF 
220c8     00 14 06 F6 | 	mov	arg02, ##1317011456
220cc     90 F7 BF FD | 	call	#__system___float_div
220d0     FD 22 02 F6 | 	mov	local03, result1
220d4                 | LR__3172
220d4     11 FB 01 F6 | 	mov	result1, local03
220d8     A7 F0 03 F6 | 	mov	ptra, fp
220dc     B2 00 A0 FD | 	call	#popregs_
220e0                 | __system____builtin_sinf_ret
220e0     2D 00 64 FD | 	ret
220e4                 | 
220e4                 | __system____builtin_tanf
220e4     02 4A 05 F6 | 	mov	COUNT_, #2
220e8     A8 00 A0 FD | 	call	#pushregs_
220ec     09 1F 02 F6 | 	mov	local01, arg01
220f0     A4 FE BF FD | 	call	#__system____builtin_sinf
220f4     FD 20 02 F6 | 	mov	local02, result1
220f8     0F 15 02 F6 | 	mov	arg02, local01
220fc     87 E4 1F FF 
22100     DB 13 06 F6 | 	mov	arg01, ##1070141403
22104     1F 14 E6 F4 | 	bitnot	arg02, #31
22108     80 F1 BF FD | 	call	#__system___float_add
2210c     FD 12 02 F6 | 	mov	arg01, result1
22110     84 FE BF FD | 	call	#__system____builtin_sinf
22114     FD 14 02 F6 | 	mov	arg02, result1
22118     10 13 02 F6 | 	mov	arg01, local02
2211c     40 F7 BF FD | 	call	#__system___float_div
22120     A7 F0 03 F6 | 	mov	ptra, fp
22124     B2 00 A0 FD | 	call	#popregs_
22128                 | __system____builtin_tanf_ret
22128     2D 00 64 FD | 	ret
2212c                 | 
2212c                 | __system____builtin_asinf
2212c     01 4A 05 F6 | 	mov	COUNT_, #1
22130     A8 00 A0 FD | 	call	#pushregs_
22134     09 1F 02 F6 | 	mov	local01, arg01
22138     0F 15 02 F6 | 	mov	arg02, local01
2213c     0F 13 02 F6 | 	mov	arg01, local01
22140     18 F5 BF FD | 	call	#__system___float_mul
22144     FD 14 02 F6 | 	mov	arg02, result1
22148     00 C0 1F FF 
2214c     00 12 06 F6 | 	mov	arg01, ##1065353216
22150     1F 14 E6 F4 | 	bitnot	arg02, #31
22154     34 F1 BF FD | 	call	#__system___float_add
22158     FD 12 02 F6 | 	mov	arg01, result1
2215c     24 F4 BF FD | 	call	#__system___float_sqrt
22160     FD 14 02 F6 | 	mov	arg02, result1
22164     0F 13 02 F6 | 	mov	arg01, local01
22168     58 00 B0 FD | 	call	#__system____builtin_atan2f
2216c     A7 F0 03 F6 | 	mov	ptra, fp
22170     B2 00 A0 FD | 	call	#popregs_
22174                 | __system____builtin_asinf_ret
22174     2D 00 64 FD | 	ret
22178                 | 
22178                 | __system____builtin_acosf
22178     01 4A 05 F6 | 	mov	COUNT_, #1
2217c     A8 00 A0 FD | 	call	#pushregs_
22180     09 1F 02 F6 | 	mov	local01, arg01
22184     0F 15 02 F6 | 	mov	arg02, local01
22188     0F 13 02 F6 | 	mov	arg01, local01
2218c     CC F4 BF FD | 	call	#__system___float_mul
22190     FD 14 02 F6 | 	mov	arg02, result1
22194     00 C0 1F FF 
22198     00 12 06 F6 | 	mov	arg01, ##1065353216
2219c     1F 14 E6 F4 | 	bitnot	arg02, #31
221a0     E8 F0 BF FD | 	call	#__system___float_add
221a4     FD 12 02 F6 | 	mov	arg01, result1
221a8     D8 F3 BF FD | 	call	#__system___float_sqrt
221ac     FD 12 02 F6 | 	mov	arg01, result1
221b0     0F 15 02 F6 | 	mov	arg02, local01
221b4     0C 00 B0 FD | 	call	#__system____builtin_atan2f
221b8     A7 F0 03 F6 | 	mov	ptra, fp
221bc     B2 00 A0 FD | 	call	#popregs_
221c0                 | __system____builtin_acosf_ret
221c0     2D 00 64 FD | 	ret
221c4                 | 
221c4                 | __system____builtin_atan2f
221c4     04 4A 05 F6 | 	mov	COUNT_, #4
221c8     A8 00 A0 FD | 	call	#pushregs_
221cc     09 1F 02 F6 | 	mov	local01, arg01
221d0     0A 21 02 F6 | 	mov	local02, arg02
221d4     0F 13 02 F6 | 	mov	arg01, local01
221d8     00 14 06 F6 | 	mov	arg02, #0
221dc     01 16 06 F6 | 	mov	arg03, #1
221e0     AC F8 BF FD | 	call	#__system___float_cmp
221e4     00 FA 0D F2 | 	cmp	result1, #0 wz
221e8     28 00 90 5D |  if_ne	jmp	#LR__3180
221ec     10 13 02 F6 | 	mov	arg01, local02
221f0     00 14 06 F6 | 	mov	arg02, #0
221f4     01 16 06 F6 | 	mov	arg03, #1
221f8     94 F8 BF FD | 	call	#__system___float_cmp
221fc     00 FA 55 F2 | 	cmps	result1, #0 wc
22200     87 24 60 CF 
22204     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
22208     DC 00 90 CD |  if_b	jmp	#LR__3181
2220c     00 FA 05 F6 | 	mov	result1, #0
22210     D4 00 90 FD | 	jmp	#LR__3181
22214                 | LR__3180
22214     10 13 02 F6 | 	mov	arg01, local02
22218     10 15 02 F6 | 	mov	arg02, local02
2221c     3C F4 BF FD | 	call	#__system___float_mul
22220     FD 22 02 F6 | 	mov	local03, result1
22224     0F 13 02 F6 | 	mov	arg01, local01
22228     0F 15 02 F6 | 	mov	arg02, local01
2222c     2C F4 BF FD | 	call	#__system___float_mul
22230     FD 14 02 F6 | 	mov	arg02, result1
22234     11 13 02 F6 | 	mov	arg01, local03
22238     50 F0 BF FD | 	call	#__system___float_add
2223c     FD 12 02 F6 | 	mov	arg01, result1
22240     40 F3 BF FD | 	call	#__system___float_sqrt
22244     FD 22 02 F6 | 	mov	local03, result1
22248     10 13 02 F6 | 	mov	arg01, local02
2224c     11 15 02 F6 | 	mov	arg02, local03
22250     0C F6 BF FD | 	call	#__system___float_div
22254     FD 20 02 F6 | 	mov	local02, result1
22258     0F 13 02 F6 | 	mov	arg01, local01
2225c     11 15 02 F6 | 	mov	arg02, local03
22260     FC F5 BF FD | 	call	#__system___float_div
22264     FD 1E 02 F6 | 	mov	local01, result1
22268     00 40 27 FF 
2226c     00 12 06 F6 | 	mov	arg01, ##1317011456
22270     10 15 02 F6 | 	mov	arg02, local02
22274     E4 F3 BF FD | 	call	#__system___float_mul
22278     FD 12 02 F6 | 	mov	arg01, result1
2227c     00 14 06 F6 | 	mov	arg02, #0
22280     A0 F8 BF FD | 	call	#__system___float_tointeger
22284     FD 22 02 F6 | 	mov	local03, result1
22288     00 40 27 FF 
2228c     00 12 06 F6 | 	mov	arg01, ##1317011456
22290     0F 15 02 F6 | 	mov	arg02, local01
22294     C4 F3 BF FD | 	call	#__system___float_mul
22298     FD 12 02 F6 | 	mov	arg01, result1
2229c     00 14 06 F6 | 	mov	arg02, #0
222a0     80 F8 BF FD | 	call	#__system___float_tointeger
222a4     FD 22 52 FD | 	qvector	local03, result1
222a8     87 24 20 FF 
222ac     DB 23 06 F6 | 	mov	local03, ##1078530011
222b0     19 12 62 FD | 	getqy	arg01
222b4     01 12 C6 F0 | 	sar	arg01, #1
222b8     09 13 52 F6 | 	abs	arg01, arg01 wc
222bc     1F 24 C6 C9 |  if_b	decod	local04, #31
222c0     00 24 06 36 |  if_ae	mov	local04, #0
222c4     90 EF BF FD | 	call	#__system___float_fromuns
222c8     12 FB 61 F5 | 	xor	result1, local04
222cc     FD 12 02 F6 | 	mov	arg01, result1
222d0     00 40 27 FF 
222d4     00 14 06 F6 | 	mov	arg02, ##1317011456
222d8     84 F5 BF FD | 	call	#__system___float_div
222dc     FD 14 02 F6 | 	mov	arg02, result1
222e0     11 13 02 F6 | 	mov	arg01, local03
222e4     74 F3 BF FD | 	call	#__system___float_mul
222e8                 | LR__3181
222e8     A7 F0 03 F6 | 	mov	ptra, fp
222ec     B2 00 A0 FD | 	call	#popregs_
222f0                 | __system____builtin_atan2f_ret
222f0     2D 00 64 FD | 	ret
222f4                 | 
222f4                 | __system____builtin_exp2f
222f4     04 4A 05 F6 | 	mov	COUNT_, #4
222f8     A8 00 A0 FD | 	call	#pushregs_
222fc     09 1F 02 F6 | 	mov	local01, arg01
22300     00 7F 21 FF 
22304     00 14 06 F6 | 	mov	arg02, ##1123942400
22308     01 16 66 F6 | 	neg	arg03, #1
2230c     80 F7 BF FD | 	call	#__system___float_cmp
22310     00 FA 55 F2 | 	cmps	result1, #0 wc
22314     00 C0 3F 3F 
22318     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
2231c     DC 00 90 3D |  if_ae	jmp	#LR__3191
22320     0F 13 02 F6 | 	mov	arg01, local01
22324     00 7F 61 FF 
22328     00 14 06 F6 | 	mov	arg02, ##-1023541248
2232c     01 16 06 F6 | 	mov	arg03, #1
22330     5C F7 BF FD | 	call	#__system___float_cmp
22334     00 FA 55 F2 | 	cmps	result1, #0 wc
22338     00 FA 05 C6 |  if_b	mov	result1, #0
2233c     BC 00 90 CD |  if_b	jmp	#LR__3191
22340     0F 13 02 F6 | 	mov	arg01, local01
22344     00 14 06 F6 | 	mov	arg02, #0
22348     D8 F7 BF FD | 	call	#__system___float_tointeger
2234c     FD 20 02 F6 | 	mov	local02, result1
22350     10 13 52 F6 | 	abs	arg01, local02 wc
22354     1F 22 C6 C9 |  if_b	decod	local03, #31
22358     00 22 06 36 |  if_ae	mov	local03, #0
2235c     F8 EE BF FD | 	call	#__system___float_fromuns
22360     11 FB 61 F5 | 	xor	result1, local03
22364     FD 14 02 F6 | 	mov	arg02, result1
22368     0F 13 02 F6 | 	mov	arg01, local01
2236c     1F 14 E6 F4 | 	bitnot	arg02, #31
22370     18 EF BF FD | 	call	#__system___float_add
22374     FD 24 02 F6 | 	mov	local04, result1
22378     12 13 02 F6 | 	mov	arg01, local04
2237c     00 14 06 F6 | 	mov	arg02, #0
22380     01 16 06 F6 | 	mov	arg03, #1
22384     08 F7 BF FD | 	call	#__system___float_cmp
22388     00 FA 55 F2 | 	cmps	result1, #0 wc
2238c     18 00 90 3D |  if_ae	jmp	#LR__3190
22390     12 13 02 F6 | 	mov	arg01, local04
22394     00 C0 1F FF 
22398     00 14 06 F6 | 	mov	arg02, ##1065353216
2239c     EC EE BF FD | 	call	#__system___float_add
223a0     FD 24 02 F6 | 	mov	local04, result1
223a4     01 20 86 F1 | 	sub	local02, #1
223a8                 | LR__3190
223a8     7F 20 06 F1 | 	add	local02, #127
223ac     17 20 66 F0 | 	shl	local02, #23
223b0     12 13 02 F6 | 	mov	arg01, local04
223b4     00 80 26 FF 
223b8     00 14 06 F6 | 	mov	arg02, ##1291845632
223bc     9C F2 BF FD | 	call	#__system___float_mul
223c0     FD 12 02 F6 | 	mov	arg01, result1
223c4     00 14 06 F6 | 	mov	arg02, #0
223c8     58 F7 BF FD | 	call	#__system___float_tointeger
223cc     FD 24 0A F6 | 	mov	local04, result1 wz
223d0     10 FB 01 A6 |  if_e	mov	result1, local02
223d4     24 00 90 AD |  if_e	jmp	#LR__3191
223d8     3E 24 26 F4 | 	bith	local04, #62
223dc     0F 24 62 FD | 	qexp	local04
223e0     10 13 02 F6 | 	mov	arg01, local02
223e4     18 14 62 FD | 	getqx	arg02
223e8     01 14 06 F1 | 	add	arg02, #1
223ec     01 14 46 F0 | 	shr	arg02, #1
223f0     00 80 1F FF 
223f4     00 14 06 F1 | 	add	arg02, ##1056964608
223f8     60 F2 BF FD | 	call	#__system___float_mul
223fc                 | LR__3191
223fc     A7 F0 03 F6 | 	mov	ptra, fp
22400     B2 00 A0 FD | 	call	#popregs_
22404                 | __system____builtin_exp2f_ret
22404     2D 00 64 FD | 	ret
22408                 | 
22408                 | __system____builtin_log2f
22408     06 4A 05 F6 | 	mov	COUNT_, #6
2240c     A8 00 A0 FD | 	call	#pushregs_
22410     09 1F 02 F6 | 	mov	local01, arg01
22414     09 21 0A F6 | 	mov	local02, arg01 wz
22418     00 00 40 5F 
2241c     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
22420     00 40 00 AF 
22424     00 FA 65 A6 |  if_e	neg	result1, ##8388608
22428     08 01 90 AD |  if_e	jmp	#LR__3204
2242c     00 20 56 F2 | 	cmps	local02, #0 wc
22430     00 E0 3F CF 
22434     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
22438     F8 00 90 CD |  if_b	jmp	#LR__3204
2243c     0F 13 02 F6 | 	mov	arg01, local01
22440     00 90 20 FF 
22444     00 14 06 F6 | 	mov	arg02, ##1092616192
22448     01 16 06 F6 | 	mov	arg03, #1
2244c     40 F6 BF FD | 	call	#__system___float_cmp
22450     00 FA 0D F2 | 	cmp	result1, #0 wz
22454     4D 2A 20 AF 
22458     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
2245c     D4 00 90 AD |  if_e	jmp	#LR__3204
22460     0F 13 02 F6 | 	mov	arg01, local01
22464     FC 16 20 FF 
22468     54 14 06 F6 | 	mov	arg02, ##1076754516
2246c     01 16 06 F6 | 	mov	arg03, #1
22470     1C F6 BF FD | 	call	#__system___float_cmp
22474     00 FA 0D F2 | 	cmp	result1, #0 wz
22478     55 DC 1F AF 
2247c     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
22480     B0 00 90 AD |  if_e	jmp	#LR__3204
22484     10 23 02 F6 | 	mov	local03, local02
22488     17 22 46 F0 | 	shr	local03, #23
2248c     11 23 E2 F8 | 	getbyte	local03, local03, #0
22490     17 21 06 F4 | 	bitl	local02, #279
22494     10 25 02 F6 | 	mov	local04, local02
22498     FF 22 0E F2 | 	cmp	local03, #255 wz
2249c     1C 00 90 5D |  if_ne	jmp	#LR__3200
224a0     00 24 0E F2 | 	cmp	local04, #0 wz
224a4     00 C0 3F 5F 
224a8     00 26 06 56 |  if_ne	mov	local05, ##2139095040
224ac     00 E0 3F AF 
224b0     00 26 06 A6 |  if_e	mov	local05, ##2143289344
224b4     13 FB 01 F6 | 	mov	result1, local05
224b8     78 00 90 FD | 	jmp	#LR__3204
224bc                 | LR__3200
224bc     00 22 0E F2 | 	cmp	local03, #0 wz
224c0     17 24 26 54 |  if_ne	bith	local04, #23
224c4     7F 22 86 51 |  if_ne	sub	local03, #127
224c8     28 00 90 5D |  if_ne	jmp	#LR__3203
224cc     00 24 0E F2 | 	cmp	local04, #0 wz
224d0     00 40 00 AF 
224d4     00 FA 65 A6 |  if_e	neg	result1, ##8388608
224d8     58 00 90 AD |  if_e	jmp	#LR__3204
224dc     7E 22 66 F6 | 	neg	local03, #126
224e0     97 08 48 FB | 	callpa	#(@LR__3202-@LR__3201)>>2,fcache_load_ptr_
224e4                 | LR__3201
224e4     17 24 2E F4 | 	testbn	local04, #23 wz
224e8     01 24 66 A0 |  if_e	shl	local04, #1
224ec     01 22 06 A1 |  if_e	add	local03, #1
224f0     F0 FF 9F AD |  if_e	jmp	#LR__3201
224f4                 | LR__3202
224f4                 | LR__3203
224f4     0E 24 62 FD | 	qlog	local04
224f8     01 22 86 F1 | 	sub	local03, #1
224fc     11 13 52 F6 | 	abs	arg01, local03 wc
22500     1F 28 C6 C9 |  if_b	decod	local06, #31
22504     00 28 06 36 |  if_ae	mov	local06, #0
22508     18 26 62 FD | 	getqx	local05
2250c     9B 26 06 F4 | 	bitl	local05, #155
22510     08 26 06 F1 | 	add	local05, #8
22514     04 26 46 F0 | 	shr	local05, #4
22518     00 C0 1F FF 
2251c     00 26 06 F1 | 	add	local05, ##1065353216
22520     34 ED BF FD | 	call	#__system___float_fromuns
22524     14 FB 61 F5 | 	xor	result1, local06
22528     FD 14 02 F6 | 	mov	arg02, result1
2252c     13 13 02 F6 | 	mov	arg01, local05
22530     58 ED BF FD | 	call	#__system___float_add
22534                 | LR__3204
22534     A7 F0 03 F6 | 	mov	ptra, fp
22538     B2 00 A0 FD | 	call	#popregs_
2253c                 | __system____builtin_log2f_ret
2253c     2D 00 64 FD | 	ret
22540                 | 
22540                 | __system____builtin_powf
22540     04 4A 05 F6 | 	mov	COUNT_, #4
22544     A8 00 A0 FD | 	call	#pushregs_
22548     09 1F 02 F6 | 	mov	local01, arg01
2254c     0A 21 02 F6 | 	mov	local02, arg02
22550     10 13 02 F6 | 	mov	arg01, local02
22554     00 14 06 F6 | 	mov	arg02, #0
22558     C8 F5 BF FD | 	call	#__system___float_tointeger
2255c     FD 22 02 F6 | 	mov	local03, result1
22560     11 13 52 F6 | 	abs	arg01, local03 wc
22564     1F 24 C6 C9 |  if_b	decod	local04, #31
22568     00 24 06 36 |  if_ae	mov	local04, #0
2256c     E8 EC BF FD | 	call	#__system___float_fromuns
22570     12 FB 61 F5 | 	xor	result1, local04
22574     FD 12 02 F6 | 	mov	arg01, result1
22578     10 15 02 F6 | 	mov	arg02, local02
2257c     01 16 06 F6 | 	mov	arg03, #1
22580     0C F5 BF FD | 	call	#__system___float_cmp
22584     00 FA 0D F2 | 	cmp	result1, #0 wz
22588     18 00 90 5D |  if_ne	jmp	#LR__3210
2258c     00 C0 1F FF 
22590     00 12 06 F6 | 	mov	arg01, ##1065353216
22594     0F 15 02 F6 | 	mov	arg02, local01
22598     11 17 02 F6 | 	mov	arg03, local03
2259c     68 00 B0 FD | 	call	#__system___float_pow_n
225a0     58 00 90 FD | 	jmp	#LR__3211
225a4                 | LR__3210
225a4     0F 13 02 F6 | 	mov	arg01, local01
225a8     00 14 06 F6 | 	mov	arg02, #0
225ac     01 16 06 F6 | 	mov	arg03, #1
225b0     DC F4 BF FD | 	call	#__system___float_cmp
225b4     00 FA 55 F2 | 	cmps	result1, #0 wc
225b8     00 E0 3F CF 
225bc     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
225c0     38 00 90 CD |  if_b	jmp	#LR__3211
225c4     0F 13 02 F6 | 	mov	arg01, local01
225c8     00 14 06 F6 | 	mov	arg02, #0
225cc     01 16 06 F6 | 	mov	arg03, #1
225d0     BC F4 BF FD | 	call	#__system___float_cmp
225d4     00 FA 0D F2 | 	cmp	result1, #0 wz
225d8     00 FA 05 A6 |  if_e	mov	result1, #0
225dc     1C 00 90 AD |  if_e	jmp	#LR__3211
225e0     0F 13 02 F6 | 	mov	arg01, local01
225e4     20 FE BF FD | 	call	#__system____builtin_log2f
225e8     FD 12 02 F6 | 	mov	arg01, result1
225ec     10 15 02 F6 | 	mov	arg02, local02
225f0     68 F0 BF FD | 	call	#__system___float_mul
225f4     FD 12 02 F6 | 	mov	arg01, result1
225f8     F8 FC BF FD | 	call	#__system____builtin_exp2f
225fc                 | LR__3211
225fc     A7 F0 03 F6 | 	mov	ptra, fp
22600     B2 00 A0 FD | 	call	#popregs_
22604                 | __system____builtin_powf_ret
22604     2D 00 64 FD | 	ret
22608                 | 
22608                 | __system___float_pow_n
22608     05 4A 05 F6 | 	mov	COUNT_, #5
2260c     A8 00 A0 FD | 	call	#pushregs_
22610     09 1F 02 F6 | 	mov	local01, arg01
22614     0A 21 02 F6 | 	mov	local02, arg02
22618     0B 23 02 F6 | 	mov	local03, arg03
2261c     00 22 56 F2 | 	cmps	local03, #0 wc
22620     18 00 90 3D |  if_ae	jmp	#LR__3220
22624     01 24 06 F6 | 	mov	local04, #1
22628     11 23 62 F6 | 	neg	local03, local03
2262c     00 22 56 F2 | 	cmps	local03, #0 wc
22630     00 FA 05 C6 |  if_b	mov	result1, #0
22634     94 00 90 CD |  if_b	jmp	#LR__3228
22638     04 00 90 FD | 	jmp	#LR__3221
2263c                 | LR__3220
2263c     00 24 06 F6 | 	mov	local04, #0
22640                 | LR__3221
22640     00 C0 1F FF 
22644     00 26 06 F6 | 	mov	local05, ##1065353216
22648                 | LR__3222
22648     01 22 56 F2 | 	cmps	local03, #1 wc
2264c     30 00 90 CD |  if_b	jmp	#LR__3224
22650     01 22 CE F7 | 	test	local03, #1 wz
22654     10 00 90 AD |  if_e	jmp	#LR__3223
22658     13 13 02 F6 | 	mov	arg01, local05
2265c     10 15 02 F6 | 	mov	arg02, local02
22660     F8 EF BF FD | 	call	#__system___float_mul
22664     FD 26 02 F6 | 	mov	local05, result1
22668                 | LR__3223
22668     01 22 C6 F0 | 	sar	local03, #1
2266c     10 13 02 F6 | 	mov	arg01, local02
22670     10 15 02 F6 | 	mov	arg02, local02
22674     E4 EF BF FD | 	call	#__system___float_mul
22678     FD 20 02 F6 | 	mov	local02, result1
2267c     C8 FF 9F FD | 	jmp	#LR__3222
22680                 | LR__3224
22680     00 24 0E F2 | 	cmp	local04, #0 wz
22684     14 00 90 AD |  if_e	jmp	#LR__3225
22688     0F 13 02 F6 | 	mov	arg01, local01
2268c     13 15 02 F6 | 	mov	arg02, local05
22690     CC F1 BF FD | 	call	#__system___float_div
22694     FD 26 02 F6 | 	mov	local05, result1
22698     2C 00 90 FD | 	jmp	#LR__3227
2269c                 | LR__3225
2269c     0F 13 02 F6 | 	mov	arg01, local01
226a0     00 C0 1F FF 
226a4     00 14 06 F6 | 	mov	arg02, ##1065353216
226a8     01 16 06 F6 | 	mov	arg03, #1
226ac     E0 F3 BF FD | 	call	#__system___float_cmp
226b0     00 FA 0D F2 | 	cmp	result1, #0 wz
226b4     10 00 90 AD |  if_e	jmp	#LR__3226
226b8     0F 13 02 F6 | 	mov	arg01, local01
226bc     13 15 02 F6 | 	mov	arg02, local05
226c0     98 EF BF FD | 	call	#__system___float_mul
226c4     FD 26 02 F6 | 	mov	local05, result1
226c8                 | LR__3226
226c8                 | LR__3227
226c8     13 FB 01 F6 | 	mov	result1, local05
226cc                 | LR__3228
226cc     A7 F0 03 F6 | 	mov	ptra, fp
226d0     B2 00 A0 FD | 	call	#popregs_
226d4                 | __system___float_pow_n_ret
226d4     2D 00 64 FD | 	ret
226d8                 | 
226d8                 | __system___gc_ptrs
226d8     EC 00 02 F6 | 	mov	_var01, __heap_ptr
226dc     00 03 02 F6 | 	mov	_var02, _var01
226e0     76 01 00 FF 
226e4     F8 03 06 F1 | 	add	_var02, ##191992
226e8     00 FD 09 FB | 	rdlong	result2, _var01 wz
226ec     74 00 90 5D |  if_ne	jmp	#LR__3230
226f0     01 FD 01 F6 | 	mov	result2, _var02
226f4     00 FD 81 F1 | 	sub	result2, _var01
226f8     00 03 58 FC | 	wrword	#1, _var01
226fc     00 FB 01 F6 | 	mov	result1, _var01
22700     02 FA 05 F1 | 	add	result1, #2
22704     36 00 80 FF 
22708     FD 20 59 FC | 	wrword	##27792, result1
2270c     00 FB 01 F6 | 	mov	result1, _var01
22710     04 FA 05 F1 | 	add	result1, #4
22714     FD 00 58 FC | 	wrword	#0, result1
22718     00 FB 01 F6 | 	mov	result1, _var01
2271c     06 FA 05 F1 | 	add	result1, #6
22720     FD 02 58 FC | 	wrword	#1, result1
22724     10 00 06 F1 | 	add	_var01, #16
22728     FE FC 51 F6 | 	abs	result2, result2 wc
2272c     04 FC 45 F0 | 	shr	result2, #4
22730     FE FC 81 F6 | 	negc	result2, result2
22734     00 FD 51 FC | 	wrword	result2, _var01
22738     00 FD 01 F6 | 	mov	result2, _var01
2273c     02 FC 05 F1 | 	add	result2, #2
22740     36 00 80 FF 
22744     FE 1E 59 FC | 	wrword	##27791, result2
22748     00 FD 01 F6 | 	mov	result2, _var01
2274c     04 FC 05 F1 | 	add	result2, #4
22750     FE 00 58 FC | 	wrword	#0, result2
22754     00 FD 01 F6 | 	mov	result2, _var01
22758     06 FC 05 F1 | 	add	result2, #6
2275c     FE 00 58 FC | 	wrword	#0, result2
22760     10 00 86 F1 | 	sub	_var01, #16
22764                 | LR__3230
22764     00 FB 01 F6 | 	mov	result1, _var01
22768     01 FD 01 F6 | 	mov	result2, _var02
2276c                 | __system___gc_ptrs_ret
2276c     2D 00 64 FD | 	ret
22770                 | 
22770                 | __system___gc_tryalloc
22770     0B 4A 05 F6 | 	mov	COUNT_, #11
22774     A8 00 A0 FD | 	call	#pushregs_
22778     09 1F 02 F6 | 	mov	local01, arg01
2277c     0A 21 02 F6 | 	mov	local02, arg02
22780     54 FF BF FD | 	call	#__system___gc_ptrs
22784     FD 22 02 F6 | 	mov	local03, result1
22788     FE 24 02 F6 | 	mov	local04, result2
2278c     11 27 02 F6 | 	mov	local05, local03
22790     00 28 06 F6 | 	mov	local06, #0
22794     97 1E 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
22798                 | LR__3240
22798     13 2B 02 F6 | 	mov	local07, local05
2279c     06 26 06 F1 | 	add	local05, #6
227a0     13 15 EA FA | 	rdword	arg02, local05 wz
227a4     11 13 02 F6 | 	mov	arg01, local03
227a8     00 FA 05 A6 |  if_e	mov	result1, #0
227ac     04 14 66 50 |  if_ne	shl	arg02, #4
227b0     0A 13 02 51 |  if_ne	add	arg01, arg02
227b4     09 FB 01 56 |  if_ne	mov	result1, arg01
227b8     FD 26 0A F6 | 	mov	local05, result1 wz
227bc     13 29 E2 5A |  if_ne	rdword	local06, local05
227c0     00 26 0E F2 | 	cmp	local05, #0 wz
227c4     12 27 52 52 |  if_ne	cmps	local05, local04 wc
227c8     08 00 90 1D |  if_a	jmp	#LR__3242
227cc     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
227d0     C4 FF 9F 1D |  if_a	jmp	#LR__3240
227d4                 | LR__3241
227d4                 | LR__3242
227d4     00 26 0E F2 | 	cmp	local05, #0 wz
227d8     13 FB 01 A6 |  if_e	mov	result1, local05
227dc     3C 01 90 AD |  if_e	jmp	#LR__3245
227e0     13 FD 01 F6 | 	mov	result2, local05
227e4     06 FC 05 F1 | 	add	result2, #6
227e8     FE 2C E2 FA | 	rdword	local08, result2
227ec     14 1F 52 F2 | 	cmps	local01, local06 wc
227f0     C0 00 90 3D |  if_ae	jmp	#LR__3244
227f4     13 1F 52 FC | 	wrword	local01, local05
227f8     13 13 02 F6 | 	mov	arg01, local05
227fc     0F 2D 02 F6 | 	mov	local08, local01
22800     04 2C 66 F0 | 	shl	local08, #4
22804     16 13 02 F1 | 	add	arg01, local08
22808     0F 29 82 F1 | 	sub	local06, local01
2280c     09 29 52 FC | 	wrword	local06, arg01
22810     09 2D 02 F6 | 	mov	local08, arg01
22814     02 2C 06 F1 | 	add	local08, #2
22818     36 00 80 FF 
2281c     16 1F 59 FC | 	wrword	##27791, local08
22820     13 15 0A F6 | 	mov	arg02, local05 wz
22824     00 FA 05 A6 |  if_e	mov	result1, #0
22828     11 15 82 51 |  if_ne	sub	arg02, local03
2282c     04 14 46 50 |  if_ne	shr	arg02, #4
22830     0A FB 01 56 |  if_ne	mov	result1, arg02
22834     09 2D 02 F6 | 	mov	local08, arg01
22838     04 2C 06 F1 | 	add	local08, #4
2283c     16 FB 51 FC | 	wrword	result1, local08
22840     13 2D 02 F6 | 	mov	local08, local05
22844     06 2C 06 F1 | 	add	local08, #6
22848     09 15 02 F6 | 	mov	arg02, arg01
2284c     16 2D E2 FA | 	rdword	local08, local08
22850     06 14 06 F1 | 	add	arg02, #6
22854     0A 2D 52 FC | 	wrword	local08, arg02
22858     09 2F 02 F6 | 	mov	local09, arg01
2285c     17 15 0A F6 | 	mov	arg02, local09 wz
22860     00 FA 05 A6 |  if_e	mov	result1, #0
22864     11 15 82 51 |  if_ne	sub	arg02, local03
22868     04 14 46 50 |  if_ne	shr	arg02, #4
2286c     0A FB 01 56 |  if_ne	mov	result1, arg02
22870     FD 2C 02 F6 | 	mov	local08, result1
22874     09 31 EA FA | 	rdword	local10, arg01 wz
22878     00 FA 05 A6 |  if_e	mov	result1, #0
2287c     04 30 66 50 |  if_ne	shl	local10, #4
22880     18 13 02 51 |  if_ne	add	arg01, local10
22884     09 FB 01 56 |  if_ne	mov	result1, arg01
22888     FD 32 0A F6 | 	mov	local11, result1 wz
2288c     24 00 90 AD |  if_e	jmp	#LR__3243
22890     12 33 52 F2 | 	cmps	local11, local04 wc
22894     1C 00 90 3D |  if_ae	jmp	#LR__3243
22898     17 15 0A F6 | 	mov	arg02, local09 wz
2289c     00 FA 05 A6 |  if_e	mov	result1, #0
228a0     11 15 82 51 |  if_ne	sub	arg02, local03
228a4     04 14 46 50 |  if_ne	shr	arg02, #4
228a8     0A FB 01 56 |  if_ne	mov	result1, arg02
228ac     04 32 06 F1 | 	add	local11, #4
228b0     19 FB 51 FC | 	wrword	result1, local11
228b4                 | LR__3243
228b4                 | LR__3244
228b4     06 2A 06 F1 | 	add	local07, #6
228b8     15 2D 52 FC | 	wrword	local08, local07
228bc     36 00 00 FF 
228c0     80 2E 06 F6 | 	mov	local09, ##27776
228c4     10 2F 42 F5 | 	or	local09, local02
228c8     00 FA 05 F6 | 	mov	result1, #0
228cc     01 FA 61 FD | 	cogid	result1
228d0     FD 2E 42 F5 | 	or	local09, result1
228d4     13 33 02 F6 | 	mov	local11, local05
228d8     02 32 06 F1 | 	add	local11, #2
228dc     19 2F 52 FC | 	wrword	local09, local11
228e0     11 2F 02 F6 | 	mov	local09, local03
228e4     08 2E 06 F1 | 	add	local09, #8
228e8     13 33 02 F6 | 	mov	local11, local05
228ec     17 2F E2 FA | 	rdword	local09, local09
228f0     06 32 06 F1 | 	add	local11, #6
228f4     19 2F 52 FC | 	wrword	local09, local11
228f8     13 15 0A F6 | 	mov	arg02, local05 wz
228fc     00 FA 05 A6 |  if_e	mov	result1, #0
22900     11 15 82 51 |  if_ne	sub	arg02, local03
22904     04 14 46 50 |  if_ne	shr	arg02, #4
22908     0A FB 01 56 |  if_ne	mov	result1, arg02
2290c     08 22 06 F1 | 	add	local03, #8
22910     11 FB 51 FC | 	wrword	result1, local03
22914     08 26 06 F1 | 	add	local05, #8
22918     13 FB 01 F6 | 	mov	result1, local05
2291c                 | LR__3245
2291c     A7 F0 03 F6 | 	mov	ptra, fp
22920     B2 00 A0 FD | 	call	#popregs_
22924                 | __system___gc_tryalloc_ret
22924     2D 00 64 FD | 	ret
22928                 | 
22928                 | __system___gc_alloc_managed
22928     01 4A 05 F6 | 	mov	COUNT_, #1
2292c     A8 00 A0 FD | 	call	#pushregs_
22930     09 1F 02 F6 | 	mov	local01, arg01
22934     00 14 06 F6 | 	mov	arg02, #0
22938     1C 00 B0 FD | 	call	#__system___gc_doalloc
2293c     FD 14 0A F6 | 	mov	arg02, result1 wz
22940     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
22944     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
22948     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
2294c     A7 F0 03 F6 | 	mov	ptra, fp
22950     B2 00 A0 FD | 	call	#popregs_
22954                 | __system___gc_alloc_managed_ret
22954     2D 00 64 FD | 	ret
22958                 | 
22958                 | __system___gc_doalloc
22958     06 4A 05 F6 | 	mov	COUNT_, #6
2295c     A8 00 A0 FD | 	call	#pushregs_
22960     09 1F 0A F6 | 	mov	local01, arg01 wz
22964     0A 21 02 F6 | 	mov	local02, arg02
22968     00 FA 05 A6 |  if_e	mov	result1, #0
2296c     8C 00 90 AD |  if_e	jmp	#LR__3257
22970     17 1E 06 F1 | 	add	local01, #23
22974     0F 1E 26 F5 | 	andn	local01, #15
22978     04 1E 46 F0 | 	shr	local01, #4
2297c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
22980     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
22984     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
22988     88 C1 BF FD | 	call	#__system___lockmem
2298c     0F 13 02 F6 | 	mov	arg01, local01
22990     10 15 02 F6 | 	mov	arg02, local02
22994     D8 FD BF FD | 	call	#__system___gc_tryalloc
22998     FD 22 0A F6 | 	mov	local03, result1 wz
2299c     14 00 90 5D |  if_ne	jmp	#LR__3250
229a0     70 03 B0 FD | 	call	#__system___gc_docollect
229a4     0F 13 02 F6 | 	mov	arg01, local01
229a8     10 15 02 F6 | 	mov	arg02, local02
229ac     C0 FD BF FD | 	call	#__system___gc_tryalloc
229b0     FD 22 02 F6 | 	mov	local03, result1
229b4                 | LR__3250
229b4     1C E6 05 F1 | 	add	ptr___system__dat__, #28
229b8     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
229bc     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
229c0     09 01 68 FC | 	wrlong	#0, arg01
229c4     00 22 0E F2 | 	cmp	local03, #0 wz
229c8     2C 00 90 AD |  if_e	jmp	#LR__3256
229cc     04 1E 66 F0 | 	shl	local01, #4
229d0     08 1E 86 F1 | 	sub	local01, #8
229d4     0F 25 52 F6 | 	abs	local04, local01 wc
229d8     02 24 46 F0 | 	shr	local04, #2
229dc     12 27 8A F6 | 	negc	local05, local04 wz
229e0     11 29 02 F6 | 	mov	local06, local03
229e4     10 00 90 AD |  if_e	jmp	#LR__3255
229e8     97 06 48 FB | 	callpa	#(@LR__3253-@LR__3251)>>2,fcache_load_ptr_
229ec                 | LR__3251
229ec     13 05 D8 FC | 	rep	@LR__3254, local05
229f0                 | LR__3252
229f0     14 01 68 FC | 	wrlong	#0, local06
229f4     04 28 06 F1 | 	add	local06, #4
229f8                 | LR__3253
229f8                 | LR__3254
229f8                 | LR__3255
229f8                 | LR__3256
229f8     11 FB 01 F6 | 	mov	result1, local03
229fc                 | LR__3257
229fc     A7 F0 03 F6 | 	mov	ptra, fp
22a00     B2 00 A0 FD | 	call	#popregs_
22a04                 | __system___gc_doalloc_ret
22a04     2D 00 64 FD | 	ret
22a08                 | 
22a08                 | __system___gc_isvalidptr
22a08     F8 16 06 F4 | 	bitl	arg03, #248
22a0c     08 16 86 F1 | 	sub	arg03, #8
22a10     09 17 52 F2 | 	cmps	arg03, arg01 wc
22a14     08 00 90 CD |  if_b	jmp	#LR__3260
22a18     0A 17 52 F2 | 	cmps	arg03, arg02 wc
22a1c     08 00 90 CD |  if_b	jmp	#LR__3261
22a20                 | LR__3260
22a20     00 FA 05 F6 | 	mov	result1, #0
22a24     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
22a28                 | LR__3261
22a28     0B 01 02 F6 | 	mov	_var01, arg03
22a2c     09 01 62 F5 | 	xor	_var01, arg01
22a30     0F 00 CE F7 | 	test	_var01, #15 wz
22a34     00 FA 05 56 |  if_ne	mov	result1, #0
22a38     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
22a3c     0B 01 02 F6 | 	mov	_var01, arg03
22a40     02 00 06 F1 | 	add	_var01, #2
22a44     00 01 E2 FA | 	rdword	_var01, _var01
22a48     7F 00 00 FF 
22a4c     C0 01 06 F5 | 	and	_var01, ##65472
22a50     36 00 00 FF 
22a54     80 00 0E F2 | 	cmp	_var01, ##27776 wz
22a58     00 FA 05 56 |  if_ne	mov	result1, #0
22a5c     0B FB 01 A6 |  if_e	mov	result1, arg03
22a60                 | __system___gc_isvalidptr_ret
22a60     2D 00 64 FD | 	ret
22a64                 | 
22a64                 | __system___gc_free
22a64     09 17 02 F6 | 	mov	arg03, arg01
22a68     6C FC BF FD | 	call	#__system___gc_ptrs
22a6c     FD 12 02 F6 | 	mov	arg01, result1
22a70     FE 14 02 F6 | 	mov	arg02, result2
22a74     90 FF BF FD | 	call	#__system___gc_isvalidptr
22a78     FD 14 0A F6 | 	mov	arg02, result1 wz
22a7c     28 00 90 AD |  if_e	jmp	#LR__3270
22a80     1C E6 05 F1 | 	add	ptr___system__dat__, #28
22a84     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
22a88     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
22a8c     84 C0 BF FD | 	call	#__system___lockmem
22a90     0A 13 02 F6 | 	mov	arg01, arg02
22a94     14 00 B0 FD | 	call	#__system___gc_dofree
22a98     1C E6 05 F1 | 	add	ptr___system__dat__, #28
22a9c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
22aa0     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
22aa4     09 01 68 FC | 	wrlong	#0, arg01
22aa8                 | LR__3270
22aa8                 | __system___gc_free_ret
22aa8     2D 00 64 FD | 	ret
22aac                 | 
22aac                 | __system___gc_dofree
22aac     06 4A 05 F6 | 	mov	COUNT_, #6
22ab0     A8 00 A0 FD | 	call	#pushregs_
22ab4     09 1F 02 F6 | 	mov	local01, arg01
22ab8     1C FC BF FD | 	call	#__system___gc_ptrs
22abc     FD 20 02 F6 | 	mov	local02, result1
22ac0     FE 22 02 F6 | 	mov	local03, result2
22ac4     0F 15 02 F6 | 	mov	arg02, local01
22ac8     02 14 06 F1 | 	add	arg02, #2
22acc     36 00 80 FF 
22ad0     0A 1F 59 FC | 	wrword	##27791, arg02
22ad4     0F 25 02 F6 | 	mov	local04, local01
22ad8     0F 13 02 F6 | 	mov	arg01, local01
22adc     09 27 EA FA | 	rdword	local05, arg01 wz
22ae0     00 FA 05 A6 |  if_e	mov	result1, #0
22ae4     04 26 66 50 |  if_ne	shl	local05, #4
22ae8     13 13 02 51 |  if_ne	add	arg01, local05
22aec     09 FB 01 56 |  if_ne	mov	result1, arg01
22af0     FD 28 02 F6 | 	mov	local06, result1
22af4     97 24 48 FB | 	callpa	#(@LR__3281-@LR__3280)>>2,fcache_load_ptr_
22af8                 | LR__3280
22af8     04 24 06 F1 | 	add	local04, #4
22afc     12 15 EA FA | 	rdword	arg02, local04 wz
22b00     10 13 02 F6 | 	mov	arg01, local02
22b04     00 FA 05 A6 |  if_e	mov	result1, #0
22b08     04 14 66 50 |  if_ne	shl	arg02, #4
22b0c     0A 13 02 51 |  if_ne	add	arg01, arg02
22b10     09 FB 01 56 |  if_ne	mov	result1, arg01
22b14     FD 24 0A F6 | 	mov	local04, result1 wz
22b18     24 00 90 AD |  if_e	jmp	#LR__3282
22b1c     12 13 02 F6 | 	mov	arg01, local04
22b20     00 FA 05 F6 | 	mov	result1, #0
22b24     02 12 06 F1 | 	add	arg01, #2
22b28     09 13 E2 FA | 	rdword	arg01, arg01
22b2c     36 00 00 FF 
22b30     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
22b34     01 FA 65 A6 |  if_e	neg	result1, #1
22b38     00 FA 0D F2 | 	cmp	result1, #0 wz
22b3c     B8 FF 9F AD |  if_e	jmp	#LR__3280
22b40                 | LR__3281
22b40                 | LR__3282
22b40     00 24 0E F2 | 	cmp	local04, #0 wz
22b44     10 25 02 A6 |  if_e	mov	local04, local02
22b48     12 15 02 F6 | 	mov	arg02, local04
22b4c     06 14 06 F1 | 	add	arg02, #6
22b50     0F 13 02 F6 | 	mov	arg01, local01
22b54     0A 15 E2 FA | 	rdword	arg02, arg02
22b58     06 12 06 F1 | 	add	arg01, #6
22b5c     09 15 52 FC | 	wrword	arg02, arg01
22b60     0F 15 0A F6 | 	mov	arg02, local01 wz
22b64     00 FA 05 A6 |  if_e	mov	result1, #0
22b68     10 15 82 51 |  if_ne	sub	arg02, local02
22b6c     04 14 46 50 |  if_ne	shr	arg02, #4
22b70     0A FB 01 56 |  if_ne	mov	result1, arg02
22b74     12 15 02 F6 | 	mov	arg02, local04
22b78     06 14 06 F1 | 	add	arg02, #6
22b7c     0A FB 51 FC | 	wrword	result1, arg02
22b80     10 25 0A F2 | 	cmp	local04, local02 wz
22b84     A4 00 90 AD |  if_e	jmp	#LR__3285
22b88     12 13 02 F6 | 	mov	arg01, local04
22b8c     09 27 EA FA | 	rdword	local05, arg01 wz
22b90     00 FA 05 A6 |  if_e	mov	result1, #0
22b94     04 26 66 50 |  if_ne	shl	local05, #4
22b98     13 13 02 51 |  if_ne	add	arg01, local05
22b9c     09 FB 01 56 |  if_ne	mov	result1, arg01
22ba0     0F FB 09 F2 | 	cmp	result1, local01 wz
22ba4     84 00 90 5D |  if_ne	jmp	#LR__3284
22ba8     12 29 E2 FA | 	rdword	local06, local04
22bac     0F 15 E2 FA | 	rdword	arg02, local01
22bb0     0A 29 02 F1 | 	add	local06, arg02
22bb4     12 29 52 FC | 	wrword	local06, local04
22bb8     0F 29 02 F6 | 	mov	local06, local01
22bbc     02 28 06 F1 | 	add	local06, #2
22bc0     14 01 58 FC | 	wrword	#0, local06
22bc4     0F 13 02 F6 | 	mov	arg01, local01
22bc8     09 27 EA FA | 	rdword	local05, arg01 wz
22bcc     00 FA 05 A6 |  if_e	mov	result1, #0
22bd0     04 26 66 50 |  if_ne	shl	local05, #4
22bd4     13 13 02 51 |  if_ne	add	arg01, local05
22bd8     09 FB 01 56 |  if_ne	mov	result1, arg01
22bdc     FD 28 02 F6 | 	mov	local06, result1
22be0     11 29 52 F2 | 	cmps	local06, local03 wc
22be4     20 00 90 3D |  if_ae	jmp	#LR__3283
22be8     12 15 0A F6 | 	mov	arg02, local04 wz
22bec     00 FA 05 A6 |  if_e	mov	result1, #0
22bf0     10 15 82 51 |  if_ne	sub	arg02, local02
22bf4     04 14 46 50 |  if_ne	shr	arg02, #4
22bf8     0A FB 01 56 |  if_ne	mov	result1, arg02
22bfc     14 15 02 F6 | 	mov	arg02, local06
22c00     04 14 06 F1 | 	add	arg02, #4
22c04     0A FB 51 FC | 	wrword	result1, arg02
22c08                 | LR__3283
22c08     0F 15 02 F6 | 	mov	arg02, local01
22c0c     06 14 06 F1 | 	add	arg02, #6
22c10     12 FD 01 F6 | 	mov	result2, local04
22c14     0A 15 E2 FA | 	rdword	arg02, arg02
22c18     06 FC 05 F1 | 	add	result2, #6
22c1c     FE 14 52 FC | 	wrword	arg02, result2
22c20     06 1E 06 F1 | 	add	local01, #6
22c24     0F 01 58 FC | 	wrword	#0, local01
22c28     12 1F 02 F6 | 	mov	local01, local04
22c2c                 | LR__3284
22c2c                 | LR__3285
22c2c     0F 13 02 F6 | 	mov	arg01, local01
22c30     09 27 EA FA | 	rdword	local05, arg01 wz
22c34     00 FA 05 A6 |  if_e	mov	result1, #0
22c38     04 26 66 50 |  if_ne	shl	local05, #4
22c3c     13 13 02 51 |  if_ne	add	arg01, local05
22c40     09 FB 01 56 |  if_ne	mov	result1, arg01
22c44     FD 14 0A F6 | 	mov	arg02, result1 wz
22c48     B8 00 90 AD |  if_e	jmp	#LR__3287
22c4c     11 15 52 F2 | 	cmps	arg02, local03 wc
22c50     B0 00 90 3D |  if_ae	jmp	#LR__3287
22c54     0A 13 02 F6 | 	mov	arg01, arg02
22c58     00 FA 05 F6 | 	mov	result1, #0
22c5c     02 12 06 F1 | 	add	arg01, #2
22c60     09 13 E2 FA | 	rdword	arg01, arg01
22c64     36 00 00 FF 
22c68     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
22c6c     01 FA 65 A6 |  if_e	neg	result1, #1
22c70     00 FA 0D F2 | 	cmp	result1, #0 wz
22c74     8C 00 90 AD |  if_e	jmp	#LR__3287
22c78     0F 25 02 F6 | 	mov	local04, local01
22c7c     12 29 E2 FA | 	rdword	local06, local04
22c80     0A 13 02 F6 | 	mov	arg01, arg02
22c84     09 1F E2 FA | 	rdword	local01, arg01
22c88     0F 29 02 F1 | 	add	local06, local01
22c8c     12 29 52 FC | 	wrword	local06, local04
22c90     09 29 02 F6 | 	mov	local06, arg01
22c94     06 28 06 F1 | 	add	local06, #6
22c98     12 1F 02 F6 | 	mov	local01, local04
22c9c     14 29 E2 FA | 	rdword	local06, local06
22ca0     06 1E 06 F1 | 	add	local01, #6
22ca4     0F 29 52 FC | 	wrword	local06, local01
22ca8     09 29 02 F6 | 	mov	local06, arg01
22cac     02 28 06 F1 | 	add	local06, #2
22cb0     14 55 59 FC | 	wrword	#170, local06
22cb4     09 29 02 F6 | 	mov	local06, arg01
22cb8     06 28 06 F1 | 	add	local06, #6
22cbc     14 01 58 FC | 	wrword	#0, local06
22cc0     09 27 EA FA | 	rdword	local05, arg01 wz
22cc4     00 FA 05 A6 |  if_e	mov	result1, #0
22cc8     04 26 66 50 |  if_ne	shl	local05, #4
22ccc     13 13 02 51 |  if_ne	add	arg01, local05
22cd0     09 FB 01 56 |  if_ne	mov	result1, arg01
22cd4     FD 28 0A F6 | 	mov	local06, result1 wz
22cd8     28 00 90 AD |  if_e	jmp	#LR__3286
22cdc     11 29 52 F2 | 	cmps	local06, local03 wc
22ce0     20 00 90 3D |  if_ae	jmp	#LR__3286
22ce4     12 15 0A F6 | 	mov	arg02, local04 wz
22ce8     00 FA 05 A6 |  if_e	mov	result1, #0
22cec     10 15 82 51 |  if_ne	sub	arg02, local02
22cf0     04 14 46 50 |  if_ne	shr	arg02, #4
22cf4     0A FB 01 56 |  if_ne	mov	result1, arg02
22cf8     14 25 02 F6 | 	mov	local04, local06
22cfc     04 24 06 F1 | 	add	local04, #4
22d00     12 FB 51 FC | 	wrword	result1, local04
22d04                 | LR__3286
22d04                 | LR__3287
22d04     14 FB 01 F6 | 	mov	result1, local06
22d08     A7 F0 03 F6 | 	mov	ptra, fp
22d0c     B2 00 A0 FD | 	call	#popregs_
22d10                 | __system___gc_dofree_ret
22d10     2D 00 64 FD | 	ret
22d14                 | 
22d14                 | __system___gc_docollect
22d14     05 4A 05 F6 | 	mov	COUNT_, #5
22d18     A8 00 A0 FD | 	call	#pushregs_
22d1c     B8 F9 BF FD | 	call	#__system___gc_ptrs
22d20     FE 1E 02 F6 | 	mov	local01, result2
22d24     FD 20 02 F6 | 	mov	local02, result1
22d28     10 13 02 F6 | 	mov	arg01, local02
22d2c     09 23 EA FA | 	rdword	local03, arg01 wz
22d30     00 FA 05 A6 |  if_e	mov	result1, #0
22d34     04 22 66 50 |  if_ne	shl	local03, #4
22d38     11 13 02 51 |  if_ne	add	arg01, local03
22d3c     09 FB 01 56 |  if_ne	mov	result1, arg01
22d40     FD 24 0A F6 | 	mov	local04, result1 wz
22d44     00 FA 05 F6 | 	mov	result1, #0
22d48     01 FA 61 FD | 	cogid	result1
22d4c     FD 26 02 F6 | 	mov	local05, result1
22d50     48 00 90 AD |  if_e	jmp	#LR__3292
22d54     97 22 48 FB | 	callpa	#(@LR__3291-@LR__3290)>>2,fcache_load_ptr_
22d58                 | LR__3290
22d58     0F 25 52 F2 | 	cmps	local04, local01 wc
22d5c     3C 00 90 3D |  if_ae	jmp	#LR__3292
22d60     12 15 02 F6 | 	mov	arg02, local04
22d64     02 14 06 F1 | 	add	arg02, #2
22d68     0A 15 E2 FA | 	rdword	arg02, arg02
22d6c     20 14 26 F5 | 	andn	arg02, #32
22d70     12 13 02 F6 | 	mov	arg01, local04
22d74     02 12 06 F1 | 	add	arg01, #2
22d78     09 15 52 FC | 	wrword	arg02, arg01
22d7c     12 13 02 F6 | 	mov	arg01, local04
22d80     09 23 EA FA | 	rdword	local03, arg01 wz
22d84     00 FA 05 A6 |  if_e	mov	result1, #0
22d88     04 22 66 50 |  if_ne	shl	local03, #4
22d8c     11 13 02 51 |  if_ne	add	arg01, local03
22d90     09 FB 01 56 |  if_ne	mov	result1, arg01
22d94     FD 24 0A F6 | 	mov	local04, result1 wz
22d98     BC FF 9F 5D |  if_ne	jmp	#LR__3290
22d9c                 | LR__3291
22d9c                 | LR__3292
22d9c     00 22 06 F6 | 	mov	local03, #0
22da0     00 12 06 F6 | 	mov	arg01, #0
22da4     44 BD BF FD | 	call	#__system____topofstack
22da8     FD 14 02 F6 | 	mov	arg02, result1
22dac     11 13 02 F6 | 	mov	arg01, local03
22db0     90 00 B0 FD | 	call	#__system___gc_markhub
22db4     1C 01 B0 FD | 	call	#__system___gc_markcog
22db8     10 13 02 F6 | 	mov	arg01, local02
22dbc     09 23 EA FA | 	rdword	local03, arg01 wz
22dc0     00 FA 05 A6 |  if_e	mov	result1, #0
22dc4     04 22 66 50 |  if_ne	shl	local03, #4
22dc8     11 13 02 51 |  if_ne	add	arg01, local03
22dcc     09 FB 01 56 |  if_ne	mov	result1, arg01
22dd0     FD 20 0A F6 | 	mov	local02, result1 wz
22dd4     60 00 90 AD |  if_e	jmp	#LR__3296
22dd8                 | LR__3293
22dd8     10 25 02 F6 | 	mov	local04, local02
22ddc     12 13 02 F6 | 	mov	arg01, local04
22de0     09 23 EA FA | 	rdword	local03, arg01 wz
22de4     00 FA 05 A6 |  if_e	mov	result1, #0
22de8     04 22 66 50 |  if_ne	shl	local03, #4
22dec     11 13 02 51 |  if_ne	add	arg01, local03
22df0     09 FB 01 56 |  if_ne	mov	result1, arg01
22df4     FD 20 02 F6 | 	mov	local02, result1
22df8     12 15 02 F6 | 	mov	arg02, local04
22dfc     02 14 06 F1 | 	add	arg02, #2
22e00     0A 15 E2 FA | 	rdword	arg02, arg02
22e04     20 14 CE F7 | 	test	arg02, #32 wz
22e08     10 14 CE A7 |  if_e	test	arg02, #16 wz
22e0c     1C 00 90 5D |  if_ne	jmp	#LR__3295
22e10     0A 15 42 F8 | 	getnib	arg02, arg02, #0
22e14     13 15 0A F2 | 	cmp	arg02, local05 wz
22e18     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
22e1c     0C 00 90 5D |  if_ne	jmp	#LR__3294
22e20     12 13 02 F6 | 	mov	arg01, local04
22e24     84 FC BF FD | 	call	#__system___gc_dofree
22e28     FD 20 02 F6 | 	mov	local02, result1
22e2c                 | LR__3294
22e2c                 | LR__3295
22e2c     00 20 0E F2 | 	cmp	local02, #0 wz
22e30     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
22e34     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3293
22e38                 | LR__3296
22e38     A7 F0 03 F6 | 	mov	ptra, fp
22e3c     B2 00 A0 FD | 	call	#popregs_
22e40                 | __system___gc_docollect_ret
22e40     2D 00 64 FD | 	ret
22e44                 | 
22e44                 | __system___gc_markhub
22e44     04 4A 05 F6 | 	mov	COUNT_, #4
22e48     A8 00 A0 FD | 	call	#pushregs_
22e4c     09 1F 02 F6 | 	mov	local01, arg01
22e50     0A 21 02 F6 | 	mov	local02, arg02
22e54     80 F8 BF FD | 	call	#__system___gc_ptrs
22e58     FD 22 02 F6 | 	mov	local03, result1
22e5c     FE 24 02 F6 | 	mov	local04, result2
22e60                 | LR__3300
22e60     10 1F 52 F2 | 	cmps	local01, local02 wc
22e64     60 00 90 3D |  if_ae	jmp	#LR__3301
22e68     0F 17 02 FB | 	rdlong	arg03, local01
22e6c     04 1E 06 F1 | 	add	local01, #4
22e70     12 15 02 F6 | 	mov	arg02, local04
22e74     11 13 02 F6 | 	mov	arg01, local03
22e78     8C FB BF FD | 	call	#__system___gc_isvalidptr
22e7c     FD 16 0A F6 | 	mov	arg03, result1 wz
22e80     DC FF 9F AD |  if_e	jmp	#LR__3300
22e84     0B 13 02 F6 | 	mov	arg01, arg03
22e88     00 FA 05 F6 | 	mov	result1, #0
22e8c     02 12 06 F1 | 	add	arg01, #2
22e90     09 13 E2 FA | 	rdword	arg01, arg01
22e94     36 00 00 FF 
22e98     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
22e9c     01 FA 65 A6 |  if_e	neg	result1, #1
22ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
22ea4     B8 FF 9F 5D |  if_ne	jmp	#LR__3300
22ea8     0B FD 01 F6 | 	mov	result2, arg03
22eac     02 FC 05 F1 | 	add	result2, #2
22eb0     FE FC E1 FA | 	rdword	result2, result2
22eb4     0F FC 25 F5 | 	andn	result2, #15
22eb8     2E FC 45 F5 | 	or	result2, #46
22ebc     02 16 06 F1 | 	add	arg03, #2
22ec0     0B FD 51 FC | 	wrword	result2, arg03
22ec4     98 FF 9F FD | 	jmp	#LR__3300
22ec8                 | LR__3301
22ec8     A7 F0 03 F6 | 	mov	ptra, fp
22ecc     B2 00 A0 FD | 	call	#popregs_
22ed0                 | __system___gc_markhub_ret
22ed0     2D 00 64 FD | 	ret
22ed4                 | 
22ed4                 | __system___gc_markcog
22ed4     04 4A 05 F6 | 	mov	COUNT_, #4
22ed8     A8 00 A0 FD | 	call	#pushregs_
22edc     F8 F7 BF FD | 	call	#__system___gc_ptrs
22ee0     FD 1E 02 F6 | 	mov	local01, result1
22ee4     FE 20 02 F6 | 	mov	local02, result2
22ee8     EF 23 06 F6 | 	mov	local03, #495
22eec                 | LR__3310
22eec                 | 	'.live	local03
22eec     00 22 96 F9 | 	alts	local03, #0
22ef0     11 25 02 F6 | 	mov	local04, local03
22ef4     0F 13 02 F6 | 	mov	arg01, local01
22ef8     10 15 02 F6 | 	mov	arg02, local02
22efc     12 17 02 F6 | 	mov	arg03, local04
22f00     04 FB BF FD | 	call	#__system___gc_isvalidptr
22f04     00 FA 0D F2 | 	cmp	result1, #0 wz
22f08     18 00 90 AD |  if_e	jmp	#LR__3311
22f0c     FD 24 02 F6 | 	mov	local04, result1
22f10     02 24 06 F1 | 	add	local04, #2
22f14     12 25 E2 FA | 	rdword	local04, local04
22f18     20 24 46 F5 | 	or	local04, #32
22f1c     02 FA 05 F1 | 	add	result1, #2
22f20     FD 24 52 FC | 	wrword	local04, result1
22f24                 | LR__3311
22f24     01 22 86 F1 | 	sub	local03, #1
22f28     00 22 56 F2 | 	cmps	local03, #0 wc
22f2c     BC FF 9F 3D |  if_ae	jmp	#LR__3310
22f30     A7 F0 03 F6 | 	mov	ptra, fp
22f34     B2 00 A0 FD | 	call	#popregs_
22f38                 | __system___gc_markcog_ret
22f38     2D 00 64 FD | 	ret
22f3c                 | 
22f3c                 | __system__opendir
22f3c     06 4A 05 F6 | 	mov	COUNT_, #6
22f40     A8 00 A0 FD | 	call	#pushregs_
22f44     84 E7 05 F1 | 	add	ptr___system__dat__, #388
22f48     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
22f4c     09 15 02 F6 | 	mov	arg02, arg01
22f50     0F 13 02 F6 | 	mov	arg01, local01
22f54     00 16 06 F6 | 	mov	arg03, #0
22f58     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
22f5c     4C C3 BF FD | 	call	#__system____getvfsforfile
22f60     FD 20 0A F6 | 	mov	local02, result1 wz
22f64     10 00 90 AD |  if_e	jmp	#LR__3320
22f68     28 20 06 F1 | 	add	local02, #40
22f6c     10 17 0A FB | 	rdlong	arg03, local02 wz
22f70     28 20 86 F1 | 	sub	local02, #40
22f74     14 00 90 5D |  if_ne	jmp	#LR__3321
22f78                 | LR__3320
22f78     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22f7c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
22f80     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
22f84     00 FA 05 F6 | 	mov	result1, #0
22f88     90 00 90 FD | 	jmp	#LR__3323
22f8c                 | LR__3321
22f8c     5C 12 06 F6 | 	mov	arg01, #92
22f90     10 14 06 F6 | 	mov	arg02, #16
22f94     C0 F9 BF FD | 	call	#__system___gc_doalloc
22f98     FD 22 0A F6 | 	mov	local03, result1 wz
22f9c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
22fa0     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
22fa4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
22fa8     00 FA 05 A6 |  if_e	mov	result1, #0
22fac     6C 00 90 AD |  if_e	jmp	#LR__3323
22fb0     28 20 06 F1 | 	add	local02, #40
22fb4     10 25 02 FB | 	rdlong	local04, local02
22fb8     12 27 02 F6 | 	mov	local05, local04
22fbc     28 20 86 F1 | 	sub	local02, #40
22fc0     13 26 46 F7 | 	zerox	local05, #19
22fc4     14 24 46 F0 | 	shr	local04, #20
22fc8     02 24 66 F0 | 	shl	local04, #2
22fcc     ED 24 02 F1 | 	add	local04, __methods__
22fd0     12 25 02 FB | 	rdlong	local04, local04
22fd4     11 13 02 F6 | 	mov	arg01, local03
22fd8     0F 15 02 F6 | 	mov	arg02, local01
22fdc     F2 28 02 F6 | 	mov	local06, objptr
22fe0     13 E5 01 F6 | 	mov	objptr, local05
22fe4     2D 24 62 FD | 	call	local04
22fe8     14 E5 01 F6 | 	mov	objptr, local06
22fec     FD 16 0A F6 | 	mov	arg03, result1 wz
22ff0     20 00 90 AD |  if_e	jmp	#LR__3322
22ff4     00 16 4E F2 | 	cmps	arg03, #0 wz
22ff8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22ffc     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
23000     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23004     11 13 02 F6 | 	mov	arg01, local03
23008     58 FA BF FD | 	call	#__system___gc_free
2300c     00 FA 05 F6 | 	mov	result1, #0
23010     08 00 90 FD | 	jmp	#LR__3323
23014                 | LR__3322
23014     11 21 62 FC | 	wrlong	local02, local03
23018     11 FB 01 F6 | 	mov	result1, local03
2301c                 | LR__3323
2301c     A7 F0 03 F6 | 	mov	ptra, fp
23020     B2 00 A0 FD | 	call	#popregs_
23024                 | __system__opendir_ret
23024     2D 00 64 FD | 	ret
23028                 | 
23028                 | __system__closedir
23028     04 4A 05 F6 | 	mov	COUNT_, #4
2302c     A8 00 A0 FD | 	call	#pushregs_
23030     09 1F 02 F6 | 	mov	local01, arg01
23034     0F 13 02 FB | 	rdlong	arg01, local01
23038     2C 12 06 F1 | 	add	arg01, #44
2303c     09 21 02 FB | 	rdlong	local02, arg01
23040     10 23 02 F6 | 	mov	local03, local02
23044     13 22 46 F7 | 	zerox	local03, #19
23048     14 20 46 F0 | 	shr	local02, #20
2304c     02 20 66 F0 | 	shl	local02, #2
23050     ED 20 02 F1 | 	add	local02, __methods__
23054     10 21 02 FB | 	rdlong	local02, local02
23058     0F 13 02 F6 | 	mov	arg01, local01
2305c     F2 24 02 F6 | 	mov	local04, objptr
23060     11 E5 01 F6 | 	mov	objptr, local03
23064     2D 20 62 FD | 	call	local02
23068     12 E5 01 F6 | 	mov	objptr, local04
2306c     FD 24 02 F6 | 	mov	local04, result1
23070     0F 13 02 F6 | 	mov	arg01, local01
23074     EC F9 BF FD | 	call	#__system___gc_free
23078     00 24 4E F2 | 	cmps	local04, #0 wz
2307c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23080     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
23084     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23088     01 FA 65 56 |  if_ne	neg	result1, #1
2308c     00 FA 05 A6 |  if_e	mov	result1, #0
23090     A7 F0 03 F6 | 	mov	ptra, fp
23094     B2 00 A0 FD | 	call	#popregs_
23098                 | __system__closedir_ret
23098     2D 00 64 FD | 	ret
2309c                 | 
2309c                 | __system__readdir
2309c     04 4A 05 F6 | 	mov	COUNT_, #4
230a0     A8 00 A0 FD | 	call	#pushregs_
230a4     09 15 0A FB | 	rdlong	arg02, arg01 wz
230a8     08 12 06 F1 | 	add	arg01, #8
230ac     09 1F 02 F6 | 	mov	local01, arg01
230b0     08 12 86 F1 | 	sub	arg01, #8
230b4     00 FA 05 A6 |  if_e	mov	result1, #0
230b8     5C 00 90 AD |  if_e	jmp	#LR__3331
230bc     30 14 06 F1 | 	add	arg02, #48
230c0     0A 21 02 FB | 	rdlong	local02, arg02
230c4     10 23 02 F6 | 	mov	local03, local02
230c8     13 22 46 F7 | 	zerox	local03, #19
230cc     14 20 46 F0 | 	shr	local02, #20
230d0     02 20 66 F0 | 	shl	local02, #2
230d4     ED 20 02 F1 | 	add	local02, __methods__
230d8     10 21 02 FB | 	rdlong	local02, local02
230dc     0F 15 02 F6 | 	mov	arg02, local01
230e0     F2 24 02 F6 | 	mov	local04, objptr
230e4     11 E5 01 F6 | 	mov	objptr, local03
230e8     2D 20 62 FD | 	call	local02
230ec     12 E5 01 F6 | 	mov	objptr, local04
230f0     00 FA 4D F2 | 	cmps	result1, #0 wz
230f4     1C 00 90 AD |  if_e	jmp	#LR__3330
230f8     01 FA 55 F2 | 	cmps	result1, #1 wc
230fc     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
23100     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
23104     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
23108     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2310c     00 FA 05 F6 | 	mov	result1, #0
23110     04 00 90 FD | 	jmp	#LR__3331
23114                 | LR__3330
23114     0F FB 01 F6 | 	mov	result1, local01
23118                 | LR__3331
23118     A7 F0 03 F6 | 	mov	ptra, fp
2311c     B2 00 A0 FD | 	call	#popregs_
23120                 | __system__readdir_ret
23120     2D 00 64 FD | 	ret
23124                 | 
23124                 | __system___openraw
23124     15 4A 05 F6 | 	mov	COUNT_, #21
23128     A8 00 A0 FD | 	call	#pushregs_
2312c     09 1F 02 F6 | 	mov	local01, arg01
23130     0A 21 02 F6 | 	mov	local02, arg02
23134     0B 23 02 F6 | 	mov	local03, arg03
23138     0C 25 02 F6 | 	mov	local04, arg04
2313c     04 26 06 F6 | 	mov	local05, #4
23140     0F 29 02 F6 | 	mov	local06, local01
23144     00 2A 06 F6 | 	mov	local07, #0
23148     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2314c     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
23150     16 13 02 F6 | 	mov	arg01, local08
23154     10 15 02 F6 | 	mov	arg02, local02
23158     00 16 06 F6 | 	mov	arg03, #0
2315c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
23160     48 C1 BF FD | 	call	#__system____getvfsforfile
23164     FD 2E 0A F6 | 	mov	local09, result1 wz
23168     10 00 90 AD |  if_e	jmp	#LR__3340
2316c     20 2E 06 F1 | 	add	local09, #32
23170     17 FB 09 FB | 	rdlong	result1, local09 wz
23174     20 2E 86 F1 | 	sub	local09, #32
23178     14 00 90 5D |  if_ne	jmp	#LR__3341
2317c                 | LR__3340
2317c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23180     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
23184     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23188     01 FA 65 F6 | 	neg	result1, #1
2318c     8C 02 90 FD | 	jmp	#LR__3354
23190                 | LR__3341
23190     14 13 02 F6 | 	mov	arg01, local06
23194     00 14 06 F6 | 	mov	arg02, #0
23198     34 16 06 F6 | 	mov	arg03, #52
2319c     09 31 02 F6 | 	mov	local10, arg01
231a0     98 00 A0 FD | 	call	#\builtin_bytefill_
231a4     20 2E 06 F1 | 	add	local09, #32
231a8     17 33 02 FB | 	rdlong	local11, local09
231ac     19 35 02 F6 | 	mov	local12, local11
231b0     19 37 02 F6 | 	mov	local13, local11
231b4     20 2E 86 F1 | 	sub	local09, #32
231b8     1B 39 02 F6 | 	mov	local14, local13
231bc     13 34 46 F7 | 	zerox	local12, #19
231c0     14 38 46 F0 | 	shr	local14, #20
231c4     02 38 66 F0 | 	shl	local14, #2
231c8     ED 38 02 F1 | 	add	local14, __methods__
231cc     1C 39 02 FB | 	rdlong	local14, local14
231d0     14 3B 02 F6 | 	mov	local15, local06
231d4     16 3D 02 F6 | 	mov	local16, local08
231d8     11 3F 02 F6 | 	mov	local17, local03
231dc     1D 13 02 F6 | 	mov	arg01, local15
231e0     1E 15 02 F6 | 	mov	arg02, local16
231e4     1F 17 02 F6 | 	mov	arg03, local17
231e8     F2 40 02 F6 | 	mov	local18, objptr
231ec     1A E5 01 F6 | 	mov	objptr, local12
231f0     2D 38 62 FD | 	call	local14
231f4     20 E5 01 F6 | 	mov	objptr, local18
231f8     FD 42 0A F6 | 	mov	local19, result1 wz
231fc     04 22 CE 57 |  if_ne	test	local03, #4 wz
23200     58 00 90 AD |  if_e	jmp	#LR__3342
23204     24 2E 06 F1 | 	add	local09, #36
23208     17 33 02 FB | 	rdlong	local11, local09
2320c     19 35 02 F6 | 	mov	local12, local11
23210     19 37 02 F6 | 	mov	local13, local11
23214     24 2E 86 F1 | 	sub	local09, #36
23218     1B 39 02 F6 | 	mov	local14, local13
2321c     13 34 46 F7 | 	zerox	local12, #19
23220     14 38 46 F0 | 	shr	local14, #20
23224     02 38 66 F0 | 	shl	local14, #2
23228     ED 38 02 F1 | 	add	local14, __methods__
2322c     1C 39 02 FB | 	rdlong	local14, local14
23230     14 3B 02 F6 | 	mov	local15, local06
23234     16 3D 02 F6 | 	mov	local16, local08
23238     12 3F 02 F6 | 	mov	local17, local04
2323c     1D 13 02 F6 | 	mov	arg01, local15
23240     1E 15 02 F6 | 	mov	arg02, local16
23244     1F 17 02 F6 | 	mov	arg03, local17
23248     F2 40 02 F6 | 	mov	local18, objptr
2324c     1A E5 01 F6 | 	mov	objptr, local12
23250     2D 38 62 FD | 	call	local14
23254     20 E5 01 F6 | 	mov	objptr, local18
23258     FD 42 02 F6 | 	mov	local19, result1
2325c                 | LR__3342
2325c     00 42 0E F2 | 	cmp	local19, #0 wz
23260     8C 01 90 5D |  if_ne	jmp	#LR__3352
23264     11 45 02 F6 | 	mov	local20, local03
23268     03 44 0E F5 | 	and	local20, #3 wz
2326c     02 26 46 55 |  if_ne	or	local05, #2
23270     01 44 0E F2 | 	cmp	local20, #1 wz
23274     01 26 46 55 |  if_ne	or	local05, #1
23278     20 22 CE F7 | 	test	local03, #32 wz
2327c     C0 26 46 55 |  if_ne	or	local05, #192
23280     08 28 06 F1 | 	add	local06, #8
23284     14 27 62 FC | 	wrlong	local05, local06
23288     0C 28 06 F1 | 	add	local06, #12
2328c     14 47 0A FB | 	rdlong	local21, local06 wz
23290     14 28 86 F1 | 	sub	local06, #20
23294     18 00 90 5D |  if_ne	jmp	#LR__3343
23298     04 2E 06 F1 | 	add	local09, #4
2329c     17 47 02 FB | 	rdlong	local21, local09
232a0     04 2E 86 F1 | 	sub	local09, #4
232a4     14 28 06 F1 | 	add	local06, #20
232a8     14 47 62 FC | 	wrlong	local21, local06
232ac     14 28 86 F1 | 	sub	local06, #20
232b0                 | LR__3343
232b0     18 28 06 F1 | 	add	local06, #24
232b4     14 47 0A FB | 	rdlong	local21, local06 wz
232b8     18 28 86 F1 | 	sub	local06, #24
232bc     18 00 90 5D |  if_ne	jmp	#LR__3344
232c0     08 2E 06 F1 | 	add	local09, #8
232c4     17 47 02 FB | 	rdlong	local21, local09
232c8     08 2E 86 F1 | 	sub	local09, #8
232cc     18 28 06 F1 | 	add	local06, #24
232d0     14 47 62 FC | 	wrlong	local21, local06
232d4     18 28 86 F1 | 	sub	local06, #24
232d8                 | LR__3344
232d8     24 28 06 F1 | 	add	local06, #36
232dc     14 47 0A FB | 	rdlong	local21, local06 wz
232e0     24 28 86 F1 | 	sub	local06, #36
232e4     17 47 02 AB |  if_e	rdlong	local21, local09
232e8     24 28 06 A1 |  if_e	add	local06, #36
232ec     14 47 62 AC |  if_e	wrlong	local21, local06
232f0     24 28 86 A1 |  if_e	sub	local06, #36
232f4     28 28 06 F1 | 	add	local06, #40
232f8     14 47 0A FB | 	rdlong	local21, local06 wz
232fc     28 28 86 F1 | 	sub	local06, #40
23300     18 00 90 5D |  if_ne	jmp	#LR__3345
23304     10 2E 06 F1 | 	add	local09, #16
23308     17 47 02 FB | 	rdlong	local21, local09
2330c     10 2E 86 F1 | 	sub	local09, #16
23310     28 28 06 F1 | 	add	local06, #40
23314     14 47 62 FC | 	wrlong	local21, local06
23318     28 28 86 F1 | 	sub	local06, #40
2331c                 | LR__3345
2331c     30 28 06 F1 | 	add	local06, #48
23320     14 47 0A FB | 	rdlong	local21, local06 wz
23324     30 28 86 F1 | 	sub	local06, #48
23328     18 00 90 5D |  if_ne	jmp	#LR__3346
2332c     0C 2E 06 F1 | 	add	local09, #12
23330     17 47 02 FB | 	rdlong	local21, local09
23334     0C 2E 86 F1 | 	sub	local09, #12
23338     30 28 06 F1 | 	add	local06, #48
2333c     14 47 62 FC | 	wrlong	local21, local06
23340     30 28 86 F1 | 	sub	local06, #48
23344                 | LR__3346
23344     1C 28 06 F1 | 	add	local06, #28
23348     14 47 0A FB | 	rdlong	local21, local06 wz
2334c     1C 28 86 F1 | 	sub	local06, #28
23350     1C 00 90 5D |  if_ne	jmp	#LR__3347
23354     01 2A 06 F6 | 	mov	local07, #1
23358     F2 12 02 F6 | 	mov	arg01, objptr
2335c     00 70 04 FF 
23360     00 12 46 F5 | 	or	arg01, ##148897792
23364     1C 28 06 F1 | 	add	local06, #28
23368     14 13 62 FC | 	wrlong	arg01, local06
2336c     1C 28 86 F1 | 	sub	local06, #28
23370                 | LR__3347
23370     20 28 06 F1 | 	add	local06, #32
23374     14 47 0A FB | 	rdlong	local21, local06 wz
23378     20 28 86 F1 | 	sub	local06, #32
2337c     1C 00 90 5D |  if_ne	jmp	#LR__3348
23380     01 2A 06 F6 | 	mov	local07, #1
23384     F2 12 02 F6 | 	mov	arg01, objptr
23388     00 78 04 FF 
2338c     00 12 46 F5 | 	or	arg01, ##149946368
23390     20 28 06 F1 | 	add	local06, #32
23394     14 13 62 FC | 	wrlong	arg01, local06
23398     20 28 86 F1 | 	sub	local06, #32
2339c                 | LR__3348
2339c     2C 28 06 F1 | 	add	local06, #44
233a0     14 47 0A FB | 	rdlong	local21, local06 wz
233a4     2C 28 86 F1 | 	sub	local06, #44
233a8     44 00 90 5D |  if_ne	jmp	#LR__3351
233ac     14 2E 06 F1 | 	add	local09, #20
233b0     17 47 0A FB | 	rdlong	local21, local09 wz
233b4     14 2E 86 F1 | 	sub	local09, #20
233b8     18 00 90 AD |  if_e	jmp	#LR__3349
233bc     14 2E 06 F1 | 	add	local09, #20
233c0     17 47 02 FB | 	rdlong	local21, local09
233c4     2C 28 06 F1 | 	add	local06, #44
233c8     14 47 62 FC | 	wrlong	local21, local06
233cc     2C 28 86 F1 | 	sub	local06, #44
233d0     1C 00 90 FD | 	jmp	#LR__3350
233d4                 | LR__3349
233d4     01 2A 06 F6 | 	mov	local07, #1
233d8     F2 12 02 F6 | 	mov	arg01, objptr
233dc     00 80 04 FF 
233e0     00 12 46 F5 | 	or	arg01, ##150994944
233e4     2C 28 06 F1 | 	add	local06, #44
233e8     14 13 62 FC | 	wrlong	arg01, local06
233ec     2C 28 86 F1 | 	sub	local06, #44
233f0                 | LR__3350
233f0                 | LR__3351
233f0                 | LR__3352
233f0     00 2A 0E F2 | 	cmp	local07, #0 wz
233f4     14 13 02 56 |  if_ne	mov	arg01, local06
233f8     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
233fc     00 42 0E F2 | 	cmp	local19, #0 wz
23400     00 12 06 A6 |  if_e	mov	arg01, #0
23404     10 00 90 5D |  if_ne	jmp	#LR__3353
23408     00 12 4E F2 | 	cmps	arg01, #0 wz
2340c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23410     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
23414     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23418                 | LR__3353
23418     21 FB 01 F6 | 	mov	result1, local19
2341c                 | LR__3354
2341c     A7 F0 03 F6 | 	mov	ptra, fp
23420     B2 00 A0 FD | 	call	#popregs_
23424                 | __system___openraw_ret
23424     2D 00 64 FD | 	ret
23428                 | 
23428                 | __system___closeraw
23428     05 4A 05 F6 | 	mov	COUNT_, #5
2342c     A8 00 A0 FD | 	call	#pushregs_
23430     09 1F 02 F6 | 	mov	local01, arg01
23434     00 20 06 F6 | 	mov	local02, #0
23438     08 1E 06 F1 | 	add	local01, #8
2343c     0F FB 09 FB | 	rdlong	result1, local01 wz
23440     08 1E 86 F1 | 	sub	local01, #8
23444     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
23448     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2344c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
23450     01 FA 65 A6 |  if_e	neg	result1, #1
23454     A8 00 90 AD |  if_e	jmp	#LR__3362
23458     2C 1E 06 F1 | 	add	local01, #44
2345c     0F FB 09 FB | 	rdlong	result1, local01 wz
23460     2C 1E 86 F1 | 	sub	local01, #44
23464     38 00 90 AD |  if_e	jmp	#LR__3360
23468     2C 1E 06 F1 | 	add	local01, #44
2346c     0F 23 02 FB | 	rdlong	local03, local01
23470     11 25 02 F6 | 	mov	local04, local03
23474     2C 1E 86 F1 | 	sub	local01, #44
23478     13 24 46 F7 | 	zerox	local04, #19
2347c     14 22 46 F0 | 	shr	local03, #20
23480     02 22 66 F0 | 	shl	local03, #2
23484     ED 22 02 F1 | 	add	local03, __methods__
23488     11 23 02 FB | 	rdlong	local03, local03
2348c     0F 13 02 F6 | 	mov	arg01, local01
23490     F2 26 02 F6 | 	mov	local05, objptr
23494     12 E5 01 F6 | 	mov	objptr, local04
23498     2D 22 62 FD | 	call	local03
2349c     13 E5 01 F6 | 	mov	objptr, local05
234a0                 | LR__3360
234a0     24 1E 06 F1 | 	add	local01, #36
234a4     0F 27 0A FB | 	rdlong	local05, local01 wz
234a8     24 1E 86 F1 | 	sub	local01, #36
234ac     3C 00 90 AD |  if_e	jmp	#LR__3361
234b0     24 1E 06 F1 | 	add	local01, #36
234b4     0F 23 02 FB | 	rdlong	local03, local01
234b8     11 25 02 F6 | 	mov	local04, local03
234bc     24 1E 86 F1 | 	sub	local01, #36
234c0     13 24 46 F7 | 	zerox	local04, #19
234c4     14 22 46 F0 | 	shr	local03, #20
234c8     02 22 66 F0 | 	shl	local03, #2
234cc     ED 22 02 F1 | 	add	local03, __methods__
234d0     11 23 02 FB | 	rdlong	local03, local03
234d4     0F 13 02 F6 | 	mov	arg01, local01
234d8     F2 26 02 F6 | 	mov	local05, objptr
234dc     12 E5 01 F6 | 	mov	objptr, local04
234e0     2D 22 62 FD | 	call	local03
234e4     13 E5 01 F6 | 	mov	objptr, local05
234e8     FD 20 02 F6 | 	mov	local02, result1
234ec                 | LR__3361
234ec     0F 13 02 F6 | 	mov	arg01, local01
234f0     00 14 06 F6 | 	mov	arg02, #0
234f4     34 16 06 F6 | 	mov	arg03, #52
234f8     98 00 A0 FD | 	call	#\builtin_bytefill_
234fc     10 FB 01 F6 | 	mov	result1, local02
23500                 | LR__3362
23500     A7 F0 03 F6 | 	mov	ptra, fp
23504     B2 00 A0 FD | 	call	#popregs_
23508                 | __system___closeraw_ret
23508     2D 00 64 FD | 	ret
2350c                 | 
2350c                 | __system___vfs_open_sdcardx
2350c     0B 4A 05 F6 | 	mov	COUNT_, #11
23510     A8 00 A0 FD | 	call	#pushregs_
23514     09 23 02 F6 | 	mov	local03, arg01
23518     0A 25 02 F6 | 	mov	local04, arg02
2351c     0B 27 02 F6 | 	mov	local05, arg03
23520     0C 29 02 F6 | 	mov	local06, arg04
23524     01 00 00 FF 
23528     24 12 06 F6 | 	mov	arg01, ##548
2352c     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
23530     FD 2A 02 F6 | 	mov	local07, result1
23534     01 00 00 FF 
23538     34 12 06 F6 | 	mov	arg01, ##564
2353c     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
23540     FD 2C 02 F6 | 	mov	local08, result1
23544     11 19 02 F6 | 	mov	arg04, local03
23548     1F 18 C6 F0 | 	sar	arg04, #31
2354c     11 17 02 F6 | 	mov	arg03, local03
23550     01 12 06 F6 | 	mov	arg01, #1
23554     00 14 06 F6 | 	mov	arg02, #0
23558     48 DC BF FD | 	call	#__system___int64_shl
2355c     FD 1E 02 F6 | 	mov	local01, result1
23560     FE 2E 02 F6 | 	mov	local09, result2
23564     12 19 02 F6 | 	mov	arg04, local04
23568     1F 18 C6 F0 | 	sar	arg04, #31
2356c     12 17 02 F6 | 	mov	arg03, local04
23570     01 12 06 F6 | 	mov	arg01, #1
23574     00 14 06 F6 | 	mov	arg02, #0
23578     28 DC BF FD | 	call	#__system___int64_shl
2357c     FD 1E 42 F5 | 	or	local01, result1
23580     FE 2E 42 F5 | 	or	local09, result2
23584     13 19 02 F6 | 	mov	arg04, local05
23588     1F 18 C6 F0 | 	sar	arg04, #31
2358c     13 17 02 F6 | 	mov	arg03, local05
23590     01 12 06 F6 | 	mov	arg01, #1
23594     00 14 06 F6 | 	mov	arg02, #0
23598     08 DC BF FD | 	call	#__system___int64_shl
2359c     FD 1E 42 F5 | 	or	local01, result1
235a0     FE 2E 42 F5 | 	or	local09, result2
235a4     14 19 02 F6 | 	mov	arg04, local06
235a8     1F 18 C6 F0 | 	sar	arg04, #31
235ac     14 17 02 F6 | 	mov	arg03, local06
235b0     01 12 06 F6 | 	mov	arg01, #1
235b4     00 14 06 F6 | 	mov	arg02, #0
235b8     E8 DB BF FD | 	call	#__system___int64_shl
235bc     17 15 02 F6 | 	mov	arg02, local09
235c0     FD 1E 42 F5 | 	or	local01, result1
235c4     0A FD 41 F5 | 	or	result2, arg02
235c8     FE 20 02 F6 | 	mov	local02, result2
235cc     0F 13 02 F6 | 	mov	arg01, local01
235d0     10 15 02 F6 | 	mov	arg02, local02
235d4     04 DC BF FD | 	call	#__system___usepins
235d8     00 FA 0D F2 | 	cmp	result1, #0 wz
235dc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
235e0     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
235e4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
235e8     00 FA 05 A6 |  if_e	mov	result1, #0
235ec     B4 00 90 AD |  if_e	jmp	#LR__3372
235f0     0F 31 02 F6 | 	mov	local10, local01
235f4     10 2F 02 F6 | 	mov	local09, local02
235f8     01 00 00 FF 
235fc     08 2A 06 F1 | 	add	local07, ##520
23600     15 31 62 FC | 	wrlong	local10, local07
23604     04 2A 06 F1 | 	add	local07, #4
23608     15 2F 62 FC | 	wrlong	local09, local07
2360c     01 00 00 FF 
23610     0C 2A 86 F1 | 	sub	local07, ##524
23614     14 1B 02 F6 | 	mov	arg05, local06
23618     00 12 06 F6 | 	mov	arg01, #0
2361c     11 15 02 F6 | 	mov	arg02, local03
23620     12 17 02 F6 | 	mov	arg03, local04
23624     13 19 02 F6 | 	mov	arg04, local05
23628     F2 30 02 F6 | 	mov	local10, objptr
2362c     15 E5 01 F6 | 	mov	objptr, local07
23630     7C 27 B0 FD | 	call	#_fatfs_cc_disk_setpins
23634     18 E5 01 F6 | 	mov	objptr, local10
23638     FD 32 0A F6 | 	mov	local11, result1 wz
2363c     24 00 90 5D |  if_ne	jmp	#LR__3370
23640     70 01 00 FF 
23644     FA 14 06 F6 | 	mov	arg02, ##@LR__4767
23648     16 13 02 F6 | 	mov	arg01, local08
2364c     00 16 06 F6 | 	mov	arg03, #0
23650     F2 32 02 F6 | 	mov	local11, objptr
23654     15 E5 01 F6 | 	mov	objptr, local07
23658     AC 5E B0 FD | 	call	#_fatfs_cc_f_mount
2365c     19 E5 01 F6 | 	mov	objptr, local11
23660     FD 32 02 F6 | 	mov	local11, result1
23664                 | LR__3370
23664     00 32 0E F2 | 	cmp	local11, #0 wz
23668     24 00 90 AD |  if_e	jmp	#LR__3371
2366c     0F 13 02 F6 | 	mov	arg01, local01
23670     10 15 02 F6 | 	mov	arg02, local02
23674     B8 DB BF FD | 	call	#__system___freepins
23678     19 13 6A F6 | 	neg	arg01, local11 wz
2367c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23680     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
23684     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23688     00 FA 05 F6 | 	mov	result1, #0
2368c     14 00 90 FD | 	jmp	#LR__3372
23690                 | LR__3371
23690     15 13 02 F6 | 	mov	arg01, local07
23694     F2 32 02 F6 | 	mov	local11, objptr
23698     15 E5 01 F6 | 	mov	objptr, local07
2369c     48 9B B0 FD | 	call	#_fatfs_cc_get_vfs
236a0     19 E5 01 F6 | 	mov	objptr, local11
236a4                 | LR__3372
236a4     A7 F0 03 F6 | 	mov	ptra, fp
236a8     B2 00 A0 FD | 	call	#popregs_
236ac                 | __system___vfs_open_sdcardx_ret
236ac     2D 00 64 FD | 	ret
236b0                 | 
236b0                 | __system____default_getc
236b0     03 4A 05 F6 | 	mov	COUNT_, #3
236b4     A8 00 A0 FD | 	call	#pushregs_
236b8     09 1F 02 F6 | 	mov	local01, arg01
236bc     0F 21 02 FB | 	rdlong	local02, local01
236c0     08 20 06 F1 | 	add	local02, #8
236c4     10 23 02 FB | 	rdlong	local03, local02
236c8     02 22 CE F7 | 	test	local03, #2 wz
236cc     0F 13 02 56 |  if_ne	mov	arg01, local01
236d0     00 01 B0 5D |  if_ne	call	#__system____default_flush
236d4     10 23 02 FB | 	rdlong	local03, local02
236d8     01 22 46 F5 | 	or	local03, #1
236dc     10 23 62 FC | 	wrlong	local03, local02
236e0     08 20 86 F1 | 	sub	local02, #8
236e4     10 23 0A FB | 	rdlong	local03, local02 wz
236e8     0C 00 90 5D |  if_ne	jmp	#LR__3380
236ec     0F 13 02 F6 | 	mov	arg01, local01
236f0     64 16 B0 FD | 	call	#__system____default_filbuf
236f4     FD 22 02 F6 | 	mov	local03, result1
236f8                 | LR__3380
236f8     01 22 56 F2 | 	cmps	local03, #1 wc
236fc     01 FA 65 C6 |  if_b	neg	result1, #1
23700     1C 00 90 CD |  if_b	jmp	#LR__3381
23704     01 22 86 F1 | 	sub	local03, #1
23708     10 23 62 FC | 	wrlong	local03, local02
2370c     04 20 06 F1 | 	add	local02, #4
23710     10 23 02 FB | 	rdlong	local03, local02
23714     11 FB C1 FA | 	rdbyte	result1, local03
23718     01 22 06 F1 | 	add	local03, #1
2371c     10 23 62 FC | 	wrlong	local03, local02
23720                 | LR__3381
23720     A7 F0 03 F6 | 	mov	ptra, fp
23724     B2 00 A0 FD | 	call	#popregs_
23728                 | __system____default_getc_ret
23728     2D 00 64 FD | 	ret
2372c                 | 
2372c                 | __system____default_putc
2372c     06 4A 05 F6 | 	mov	COUNT_, #6
23730     A8 00 A0 FD | 	call	#pushregs_
23734     09 1F 02 F6 | 	mov	local01, arg01
23738     0A 21 02 F6 | 	mov	local02, arg02
2373c     10 23 02 FB | 	rdlong	local03, local02
23740     08 22 06 F1 | 	add	local03, #8
23744     11 FB 01 FB | 	rdlong	result1, local03
23748     01 FA CD F7 | 	test	result1, #1 wz
2374c     10 13 02 56 |  if_ne	mov	arg01, local02
23750     80 00 B0 5D |  if_ne	call	#__system____default_flush
23754     11 25 02 FB | 	rdlong	local04, local03
23758     02 24 46 F5 | 	or	local04, #2
2375c     11 25 62 FC | 	wrlong	local04, local03
23760     08 22 86 F1 | 	sub	local03, #8
23764     11 27 02 FB | 	rdlong	local05, local03
23768     10 22 06 F1 | 	add	local03, #16
2376c     11 15 02 FB | 	rdlong	arg02, local03
23770     10 22 86 F1 | 	sub	local03, #16
23774     13 FB 01 F6 | 	mov	result1, local05
23778     0A FB 01 F1 | 	add	result1, arg02
2377c     FD 1E 42 FC | 	wrbyte	local01, result1
23780     0F 1F E2 F8 | 	getbyte	local01, local01, #0
23784     01 26 06 F1 | 	add	local05, #1
23788     11 27 62 FC | 	wrlong	local05, local03
2378c     06 20 06 F1 | 	add	local02, #6
23790     10 29 EA FA | 	rdword	local06, local02 wz
23794     06 20 86 F1 | 	sub	local02, #6
23798     0C 22 06 51 |  if_ne	add	local03, #12
2379c     11 25 02 5B |  if_ne	rdlong	local04, local03
237a0     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
237a4     0C 00 90 AD |  if_e	jmp	#LR__3390
237a8     0A 1E 0E F2 | 	cmp	local01, #10 wz
237ac     01 28 0E A2 |  if_e	cmp	local06, #1 wz
237b0     10 00 90 5D |  if_ne	jmp	#LR__3391
237b4                 | LR__3390
237b4     10 13 02 F6 | 	mov	arg01, local02
237b8     18 00 B0 FD | 	call	#__system____default_flush
237bc     00 FA 0D F2 | 	cmp	result1, #0 wz
237c0     01 1E 66 56 |  if_ne	neg	local01, #1
237c4                 | LR__3391
237c4     0F FB 01 F6 | 	mov	result1, local01
237c8     A7 F0 03 F6 | 	mov	ptra, fp
237cc     B2 00 A0 FD | 	call	#popregs_
237d0                 | __system____default_putc_ret
237d0     2D 00 64 FD | 	ret
237d4                 | 
237d4                 | __system____default_flush
237d4     06 4A 05 F6 | 	mov	COUNT_, #6
237d8     A8 00 A0 FD | 	call	#pushregs_
237dc     09 1F 02 F6 | 	mov	local01, arg01
237e0     0F 21 02 FB | 	rdlong	local02, local01
237e4     10 23 02 FB | 	rdlong	local03, local02
237e8     08 20 06 F1 | 	add	local02, #8
237ec     10 FB 01 FB | 	rdlong	result1, local02
237f0     08 20 86 F1 | 	sub	local02, #8
237f4     02 FA CD F7 | 	test	result1, #2 wz
237f8     D0 00 90 AD |  if_e	jmp	#LR__3402
237fc     01 22 56 F2 | 	cmps	local03, #1 wc
23800     20 01 90 CD |  if_b	jmp	#LR__3404
23804     08 1E 06 F1 | 	add	local01, #8
23808     0F FB 01 FB | 	rdlong	result1, local01
2380c     08 1E 86 F1 | 	sub	local01, #8
23810     40 FA CD F7 | 	test	result1, #64 wz
23814     68 00 90 AD |  if_e	jmp	#LR__3401
23818     08 1E 06 F1 | 	add	local01, #8
2381c     0F 17 02 FB | 	rdlong	arg03, local01
23820     08 1E 86 F1 | 	sub	local01, #8
23824     80 16 CE F7 | 	test	arg03, #128 wz
23828     54 00 90 AD |  if_e	jmp	#LR__3400
2382c     30 1E 06 F1 | 	add	local01, #48
23830     0F 25 02 FB | 	rdlong	local04, local01
23834     12 27 02 F6 | 	mov	local05, local04
23838     30 1E 86 F1 | 	sub	local01, #48
2383c     13 26 46 F7 | 	zerox	local05, #19
23840     14 24 46 F0 | 	shr	local04, #20
23844     02 24 66 F0 | 	shl	local04, #2
23848     ED 24 02 F1 | 	add	local04, __methods__
2384c     12 25 02 FB | 	rdlong	local04, local04
23850     0F 13 02 F6 | 	mov	arg01, local01
23854     00 14 06 F6 | 	mov	arg02, #0
23858     02 16 06 F6 | 	mov	arg03, #2
2385c     F2 28 02 F6 | 	mov	local06, objptr
23860     13 E5 01 F6 | 	mov	objptr, local05
23864     2D 24 62 FD | 	call	local04
23868     14 E5 01 F6 | 	mov	objptr, local06
2386c     08 1E 06 F1 | 	add	local01, #8
23870     0F 29 02 FB | 	rdlong	local06, local01
23874     80 28 26 F5 | 	andn	local06, #128
23878     0F 29 62 FC | 	wrlong	local06, local01
2387c     08 1E 86 F1 | 	sub	local01, #8
23880                 | LR__3400
23880                 | LR__3401
23880     18 1E 06 F1 | 	add	local01, #24
23884     0F 25 02 FB | 	rdlong	local04, local01
23888     12 27 02 F6 | 	mov	local05, local04
2388c     18 1E 86 F1 | 	sub	local01, #24
23890     13 26 46 F7 | 	zerox	local05, #19
23894     14 24 46 F0 | 	shr	local04, #20
23898     02 24 66 F0 | 	shl	local04, #2
2389c     ED 24 02 F1 | 	add	local04, __methods__
238a0     12 25 02 FB | 	rdlong	local04, local04
238a4     10 20 06 F1 | 	add	local02, #16
238a8     10 15 02 FB | 	rdlong	arg02, local02
238ac     10 20 86 F1 | 	sub	local02, #16
238b0     0F 13 02 F6 | 	mov	arg01, local01
238b4     11 17 02 F6 | 	mov	arg03, local03
238b8     F2 28 02 F6 | 	mov	local06, objptr
238bc     13 E5 01 F6 | 	mov	objptr, local05
238c0     2D 24 62 FD | 	call	local04
238c4     14 E5 01 F6 | 	mov	objptr, local06
238c8     58 00 90 FD | 	jmp	#LR__3404
238cc                 | LR__3402
238cc     08 20 06 F1 | 	add	local02, #8
238d0     10 29 02 FB | 	rdlong	local06, local02
238d4     08 20 86 F1 | 	sub	local02, #8
238d8     01 28 CE F7 | 	test	local06, #1 wz
238dc     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
238e0     40 00 90 AD |  if_e	jmp	#LR__3403
238e4     30 1E 06 F1 | 	add	local01, #48
238e8     0F 25 02 FB | 	rdlong	local04, local01
238ec     12 27 02 F6 | 	mov	local05, local04
238f0     30 1E 86 F1 | 	sub	local01, #48
238f4     13 26 46 F7 | 	zerox	local05, #19
238f8     14 24 46 F0 | 	shr	local04, #20
238fc     02 24 66 F0 | 	shl	local04, #2
23900     ED 24 02 F1 | 	add	local04, __methods__
23904     12 25 02 FB | 	rdlong	local04, local04
23908     0F 13 02 F6 | 	mov	arg01, local01
2390c     11 15 62 F6 | 	neg	arg02, local03
23910     01 16 06 F6 | 	mov	arg03, #1
23914     F2 28 02 F6 | 	mov	local06, objptr
23918     13 E5 01 F6 | 	mov	objptr, local05
2391c     2D 24 62 FD | 	call	local04
23920     14 E5 01 F6 | 	mov	objptr, local06
23924                 | LR__3403
23924                 | LR__3404
23924     10 01 68 FC | 	wrlong	#0, local02
23928     04 20 06 F1 | 	add	local02, #4
2392c     10 01 68 FC | 	wrlong	#0, local02
23930     04 20 06 F1 | 	add	local02, #4
23934     10 01 68 FC | 	wrlong	#0, local02
23938     00 FA 05 F6 | 	mov	result1, #0
2393c     A7 F0 03 F6 | 	mov	ptra, fp
23940     B2 00 A0 FD | 	call	#popregs_
23944                 | __system____default_flush_ret
23944     2D 00 64 FD | 	ret
23948                 | 
23948                 | __system____default_buffer_init
23948     02 4A 05 F6 | 	mov	COUNT_, #2
2394c     A8 00 A0 FD | 	call	#pushregs_
23950     09 1F 02 F6 | 	mov	local01, arg01
23954     0F 21 02 FB | 	rdlong	local02, local01
23958     0F 13 02 F6 | 	mov	arg01, local01
2395c     F8 02 B0 FD | 	call	#__system___isatty
23960     00 FA 0D F2 | 	cmp	result1, #0 wz
23964     06 1E 06 51 |  if_ne	add	local01, #6
23968     0F 0B 58 5C |  if_ne	wrword	#5, local01
2396c     06 1E 06 A1 |  if_e	add	local01, #6
23970     0F 0D 58 AC |  if_e	wrword	#6, local01
23974     14 20 06 F1 | 	add	local02, #20
23978     10 1F 02 F6 | 	mov	local01, local02
2397c     04 20 86 F1 | 	sub	local02, #4
23980     10 1F 62 FC | 	wrlong	local01, local02
23984     04 20 86 F1 | 	sub	local02, #4
23988     02 00 80 FF 
2398c     10 01 68 FC | 	wrlong	##1024, local02
23990     00 FA 05 F6 | 	mov	result1, #0
23994     A7 F0 03 F6 | 	mov	ptra, fp
23998     B2 00 A0 FD | 	call	#popregs_
2399c                 | __system____default_buffer_init_ret
2399c     2D 00 64 FD | 	ret
239a0                 | 
239a0                 | __system__stat
239a0     04 4A 05 F6 | 	mov	COUNT_, #4
239a4     A8 00 A0 FD | 	call	#pushregs_
239a8     0A 1F 02 F6 | 	mov	local01, arg02
239ac     84 E7 05 F1 | 	add	ptr___system__dat__, #388
239b0     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
239b4     09 15 02 F6 | 	mov	arg02, arg01
239b8     10 13 02 F6 | 	mov	arg01, local02
239bc     00 16 06 F6 | 	mov	arg03, #0
239c0     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
239c4     E4 B8 BF FD | 	call	#__system____getvfsforfile
239c8     FD 22 0A F6 | 	mov	local03, result1 wz
239cc     10 00 90 AD |  if_e	jmp	#LR__3410
239d0     34 22 06 F1 | 	add	local03, #52
239d4     11 17 0A FB | 	rdlong	arg03, local03 wz
239d8     34 22 86 F1 | 	sub	local03, #52
239dc     14 00 90 5D |  if_ne	jmp	#LR__3411
239e0                 | LR__3410
239e0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
239e4     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
239e8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
239ec     01 FA 65 F6 | 	neg	result1, #1
239f0     68 00 90 FD | 	jmp	#LR__3412
239f4                 | LR__3411
239f4     0F 13 02 F6 | 	mov	arg01, local01
239f8     00 14 06 F6 | 	mov	arg02, #0
239fc     30 16 06 F6 | 	mov	arg03, #48
23a00     09 25 02 F6 | 	mov	local04, arg01
23a04     98 00 A0 FD | 	call	#\builtin_bytefill_
23a08     12 FB 01 F6 | 	mov	result1, local04
23a0c     10 13 CA FA | 	rdbyte	arg01, local02 wz
23a10     08 1E 06 A1 |  if_e	add	local01, #8
23a14     08 00 80 AF 
23a18     0F FF 6B AC |  if_e	wrlong	##4607, local01
23a1c     00 FA 05 A6 |  if_e	mov	result1, #0
23a20     38 00 90 AD |  if_e	jmp	#LR__3412
23a24     34 22 06 F1 | 	add	local03, #52
23a28     11 23 02 FB | 	rdlong	local03, local03
23a2c     11 25 02 F6 | 	mov	local04, local03
23a30     13 22 46 F7 | 	zerox	local03, #19
23a34     14 24 46 F0 | 	shr	local04, #20
23a38     02 24 66 F0 | 	shl	local04, #2
23a3c     ED 24 02 F1 | 	add	local04, __methods__
23a40     12 25 02 FB | 	rdlong	local04, local04
23a44     10 13 02 F6 | 	mov	arg01, local02
23a48     0F 15 02 F6 | 	mov	arg02, local01
23a4c     F2 20 02 F6 | 	mov	local02, objptr
23a50     11 E5 01 F6 | 	mov	objptr, local03
23a54     2D 24 62 FD | 	call	local04
23a58     10 E5 01 F6 | 	mov	objptr, local02
23a5c                 | LR__3412
23a5c     A7 F0 03 F6 | 	mov	ptra, fp
23a60     B2 00 A0 FD | 	call	#popregs_
23a64                 | __system__stat_ret
23a64     2D 00 64 FD | 	ret
23a68                 | 
23a68                 | __system__read
23a68     0A 12 16 F2 | 	cmp	arg01, #10 wc
23a6c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
23a70     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
23a74     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
23a78     01 FA 65 36 |  if_ae	neg	result1, #1
23a7c     20 00 90 3D |  if_ae	jmp	#LR__3420
23a80     34 12 06 FD | 	qmul	arg01, #52
23a84     02 00 00 FF 
23a88     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
23a8c     18 12 62 FD | 	getqx	arg01
23a90     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
23a94     02 00 00 FF 
23a98     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
23a9c     D0 0F B0 FD | 	call	#__system___vfsread
23aa0                 | LR__3420
23aa0                 | __system__read_ret
23aa0     2D 00 64 FD | 	ret
23aa4                 | 
23aa4                 | __system__close
23aa4     0A 12 16 F2 | 	cmp	arg01, #10 wc
23aa8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
23aac     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
23ab0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
23ab4     01 FA 65 36 |  if_ae	neg	result1, #1
23ab8     20 00 90 3D |  if_ae	jmp	#LR__3430
23abc     34 12 06 FD | 	qmul	arg01, #52
23ac0     02 00 00 FF 
23ac4     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
23ac8     18 12 62 FD | 	getqx	arg01
23acc     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
23ad0     02 00 00 FF 
23ad4     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
23ad8     4C F9 BF FD | 	call	#__system___closeraw
23adc                 | LR__3430
23adc                 | __system__close_ret
23adc     2D 00 64 FD | 	ret
23ae0                 | 
23ae0                 | __system__lseek
23ae0     06 4A 05 F6 | 	mov	COUNT_, #6
23ae4     A8 00 A0 FD | 	call	#pushregs_
23ae8     0A 12 16 F2 | 	cmp	arg01, #10 wc
23aec     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
23af0     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
23af4     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
23af8     01 FA 65 36 |  if_ae	neg	result1, #1
23afc     C4 00 90 3D |  if_ae	jmp	#LR__3441
23b00     34 12 06 FD | 	qmul	arg01, #52
23b04     02 00 00 FF 
23b08     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
23b0c     18 1E 62 FD | 	getqx	local01
23b10     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
23b14     30 1E 06 F1 | 	add	local01, #48
23b18     0F 13 0A FB | 	rdlong	arg01, local01 wz
23b1c     30 1E 86 F1 | 	sub	local01, #48
23b20     02 00 00 FF 
23b24     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
23b28     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
23b2c     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
23b30     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
23b34     01 FA 65 A6 |  if_e	neg	result1, #1
23b38     88 00 90 AD |  if_e	jmp	#LR__3441
23b3c     08 1E 06 F1 | 	add	local01, #8
23b40     0F 21 02 FB | 	rdlong	local02, local01
23b44     08 1E 86 F1 | 	sub	local01, #8
23b48     40 20 CE F7 | 	test	local02, #64 wz
23b4c     08 1E 06 51 |  if_ne	add	local01, #8
23b50     0F 21 02 5B |  if_ne	rdlong	local02, local01
23b54     80 20 46 55 |  if_ne	or	local02, #128
23b58     0F 21 62 5C |  if_ne	wrlong	local02, local01
23b5c     08 1E 86 51 |  if_ne	sub	local01, #8
23b60     30 1E 06 F1 | 	add	local01, #48
23b64     0F 23 02 FB | 	rdlong	local03, local01
23b68     11 25 02 F6 | 	mov	local04, local03
23b6c     30 1E 86 F1 | 	sub	local01, #48
23b70     13 24 46 F7 | 	zerox	local04, #19
23b74     14 22 46 F0 | 	shr	local03, #20
23b78     02 22 66 F0 | 	shl	local03, #2
23b7c     ED 22 02 F1 | 	add	local03, __methods__
23b80     11 23 02 FB | 	rdlong	local03, local03
23b84     0F 13 02 F6 | 	mov	arg01, local01
23b88     F2 26 02 F6 | 	mov	local05, objptr
23b8c     12 E5 01 F6 | 	mov	objptr, local04
23b90     2D 22 62 FD | 	call	local03
23b94     13 E5 01 F6 | 	mov	objptr, local05
23b98     FD 28 02 F6 | 	mov	local06, result1
23b9c     00 28 56 F2 | 	cmps	local06, #0 wc
23ba0     1C 00 90 3D |  if_ae	jmp	#LR__3440
23ba4     14 13 6A F6 | 	neg	arg01, local06 wz
23ba8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23bac     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
23bb0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23bb4     01 FA 65 56 |  if_ne	neg	result1, #1
23bb8     00 FA 05 A6 |  if_e	mov	result1, #0
23bbc     04 00 90 FD | 	jmp	#LR__3441
23bc0                 | LR__3440
23bc0     14 FB 01 F6 | 	mov	result1, local06
23bc4                 | LR__3441
23bc4     A7 F0 03 F6 | 	mov	ptra, fp
23bc8     B2 00 A0 FD | 	call	#popregs_
23bcc                 | __system__lseek_ret
23bcc     2D 00 64 FD | 	ret
23bd0                 | 
23bd0                 | __system___ioctl
23bd0     03 4A 05 F6 | 	mov	COUNT_, #3
23bd4     A8 00 A0 FD | 	call	#pushregs_
23bd8     00 12 4E F2 | 	cmps	arg01, #0 wz
23bdc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
23be0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
23be4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
23be8     01 FA 65 A6 |  if_e	neg	result1, #1
23bec     5C 00 90 AD |  if_e	jmp	#LR__3451
23bf0     28 12 06 F1 | 	add	arg01, #40
23bf4     09 1F 02 FB | 	rdlong	local01, arg01
23bf8     0F 21 02 F6 | 	mov	local02, local01
23bfc     28 12 86 F1 | 	sub	arg01, #40
23c00     13 20 46 F7 | 	zerox	local02, #19
23c04     14 1E 46 F0 | 	shr	local01, #20
23c08     02 1E 66 F0 | 	shl	local01, #2
23c0c     ED 1E 02 F1 | 	add	local01, __methods__
23c10     0F 1F 02 FB | 	rdlong	local01, local01
23c14     F2 22 02 F6 | 	mov	local03, objptr
23c18     10 E5 01 F6 | 	mov	objptr, local02
23c1c     2D 1E 62 FD | 	call	local01
23c20     11 E5 01 F6 | 	mov	objptr, local03
23c24     FD 12 0A F6 | 	mov	arg01, result1 wz
23c28     1C 00 90 AD |  if_e	jmp	#LR__3450
23c2c     00 12 4E F2 | 	cmps	arg01, #0 wz
23c30     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23c34     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
23c38     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23c3c     01 FA 65 56 |  if_ne	neg	result1, #1
23c40     00 FA 05 A6 |  if_e	mov	result1, #0
23c44     04 00 90 FD | 	jmp	#LR__3451
23c48                 | LR__3450
23c48     00 FA 05 F6 | 	mov	result1, #0
23c4c                 | LR__3451
23c4c     A7 F0 03 F6 | 	mov	ptra, fp
23c50     B2 00 A0 FD | 	call	#popregs_
23c54                 | __system___ioctl_ret
23c54     2D 00 64 FD | 	ret
23c58                 | 
23c58                 | __system___isatty
23c58     00 4A 05 F6 | 	mov	COUNT_, #0
23c5c     A8 00 A0 FD | 	call	#pushregs_
23c60     0C F0 07 F1 | 	add	ptra, #12
23c64     04 4E 05 F1 | 	add	fp, #4
23c68     A7 12 62 FC | 	wrlong	arg01, fp
23c6c     04 4E 05 F1 | 	add	fp, #4
23c70     A7 16 02 F6 | 	mov	arg03, fp
23c74     08 4E 85 F1 | 	sub	fp, #8
23c78     00 15 06 F6 | 	mov	arg02, #256
23c7c     50 FF BF FD | 	call	#__system___ioctl
23c80     00 FA 0D F2 | 	cmp	result1, #0 wz
23c84     01 FA 05 A6 |  if_e	mov	result1, #1
23c88     00 FA 05 56 |  if_ne	mov	result1, #0
23c8c     A7 F0 03 F6 | 	mov	ptra, fp
23c90     B2 00 A0 FD | 	call	#popregs_
23c94                 | __system___isatty_ret
23c94     2D 00 64 FD | 	ret
23c98                 | 
23c98                 | __system____getftab
23c98     0A 12 16 F2 | 	cmp	arg01, #10 wc
23c9c     34 12 06 CD |  if_b	qmul	arg01, #52
23ca0     00 FA 05 36 |  if_ae	mov	result1, #0
23ca4     02 00 00 CF 
23ca8     20 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1312
23cac     18 FA 61 CD |  if_b	getqx	result1
23cb0     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
23cb4     02 00 00 CF 
23cb8     20 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
23cbc                 | __system____getftab_ret
23cbc     2D 00 64 FD | 	ret
23cc0                 | 
23cc0                 | __system__strncpy
23cc0     09 01 02 F6 | 	mov	_var01, arg01
23cc4                 | LR__3460
23cc4     01 16 86 F1 | 	sub	arg03, #1
23cc8     00 16 56 F2 | 	cmps	arg03, #0 wc
23ccc     18 00 90 CD |  if_b	jmp	#LR__3461
23cd0     0A FB C1 FA | 	rdbyte	result1, arg02
23cd4     00 FB 41 FC | 	wrbyte	result1, _var01
23cd8     01 14 06 F1 | 	add	arg02, #1
23cdc     00 FB C9 FA | 	rdbyte	result1, _var01 wz
23ce0     01 00 06 F1 | 	add	_var01, #1
23ce4     DC FF 9F 5D |  if_ne	jmp	#LR__3460
23ce8                 | LR__3461
23ce8     97 0C 48 FB | 	callpa	#(@LR__3463-@LR__3462)>>2,fcache_load_ptr_
23cec                 | LR__3462
23cec     01 16 86 F1 | 	sub	arg03, #1
23cf0     00 16 56 F2 | 	cmps	arg03, #0 wc
23cf4     00 03 02 36 |  if_ae	mov	_var02, _var01
23cf8     01 00 06 31 |  if_ae	add	_var01, #1
23cfc     01 01 48 3C |  if_ae	wrbyte	#0, _var02
23d00     E8 FF 9F 3D |  if_ae	jmp	#LR__3462
23d04                 | LR__3463
23d04     09 FB 01 F6 | 	mov	result1, arg01
23d08                 | __system__strncpy_ret
23d08     2D 00 64 FD | 	ret
23d0c                 | 
23d0c                 | __system__strncat
23d0c     00 14 4E F2 | 	cmps	arg02, #0 wz
23d10     50 00 90 AD |  if_e	jmp	#LR__3474
23d14     01 16 16 F2 | 	cmp	arg03, #1 wc
23d18     48 00 90 CD |  if_b	jmp	#LR__3474
23d1c     09 01 02 F6 | 	mov	_var01, arg01
23d20     97 1E 48 FB | 	callpa	#(@LR__3472-@LR__3470)>>2,fcache_load_ptr_
23d24                 | LR__3470
23d24     00 FB C9 FA | 	rdbyte	result1, _var01 wz
23d28     01 00 06 51 |  if_ne	add	_var01, #1
23d2c     F4 FF 9F 5D |  if_ne	jmp	#LR__3470
23d30     0B 03 02 F6 | 	mov	_var02, arg03
23d34                 | LR__3471
23d34     0A 05 C2 FA | 	rdbyte	_var03, arg02
23d38     02 07 02 F6 | 	mov	_var04, _var03
23d3c     07 06 4E F7 | 	zerox	_var04, #7 wz
23d40     01 14 06 F1 | 	add	arg02, #1
23d44     18 00 90 AD |  if_e	jmp	#LR__3473
23d48     01 02 86 F1 | 	sub	_var02, #1
23d4c     00 02 56 F2 | 	cmps	_var02, #0 wc
23d50     00 07 02 36 |  if_ae	mov	_var04, _var01
23d54     01 00 06 31 |  if_ae	add	_var01, #1
23d58     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
23d5c     D4 FF 9F 3D |  if_ae	jmp	#LR__3471
23d60                 | LR__3472
23d60                 | LR__3473
23d60     00 01 48 FC | 	wrbyte	#0, _var01
23d64                 | LR__3474
23d64     09 FB 01 F6 | 	mov	result1, arg01
23d68                 | __system__strncat_ret
23d68     2D 00 64 FD | 	ret
23d6c                 | 
23d6c                 | __system__strncmp
23d6c     09 01 0A F6 | 	mov	_var01, arg01 wz
23d70     14 00 90 5D |  if_ne	jmp	#LR__3480
23d74     00 14 0E F2 | 	cmp	arg02, #0 wz
23d78     01 02 66 56 |  if_ne	neg	_var02, #1
23d7c     00 02 06 A6 |  if_e	mov	_var02, #0
23d80     01 FB 01 F6 | 	mov	result1, _var02
23d84     74 00 90 FD | 	jmp	#__system__strncmp_ret
23d88                 | LR__3480
23d88     00 14 0E F2 | 	cmp	arg02, #0 wz
23d8c     01 FA 05 A6 |  if_e	mov	result1, #1
23d90     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
23d94     0B 05 02 F6 | 	mov	_var03, arg03
23d98     97 16 48 FB | 	callpa	#(@LR__3482-@LR__3481)>>2,fcache_load_ptr_
23d9c                 | LR__3481
23d9c     00 07 C2 FA | 	rdbyte	_var04, _var01
23da0     0A 09 02 F6 | 	mov	_var05, arg02
23da4     04 0B C2 FA | 	rdbyte	_var06, _var05
23da8     01 04 86 F1 | 	sub	_var03, #1
23dac     00 04 56 F2 | 	cmps	_var03, #0 wc
23db0     01 00 06 F1 | 	add	_var01, #1
23db4     01 14 06 F1 | 	add	arg02, #1
23db8     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
23dbc     08 00 90 2D |  if_nc_and_z	jmp	#LR__3483
23dc0     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
23dc4     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3481
23dc8                 | LR__3482
23dc8                 | LR__3483
23dc8     00 04 56 F2 | 	cmps	_var03, #0 wc
23dcc     00 FA 05 C6 |  if_b	mov	result1, #0
23dd0     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
23dd4     05 07 0A F2 | 	cmp	_var04, _var06 wz
23dd8     00 FA 05 A6 |  if_e	mov	result1, #0
23ddc     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
23de0     00 06 0E F2 | 	cmp	_var04, #0 wz
23de4     01 FA 65 A6 |  if_e	neg	result1, #1
23de8     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
23dec     00 0A 0E F2 | 	cmp	_var06, #0 wz
23df0     01 FA 05 A6 |  if_e	mov	result1, #1
23df4     03 FB 01 56 |  if_ne	mov	result1, _var04
23df8     05 FB 81 51 |  if_ne	sub	result1, _var06
23dfc                 | __system__strncmp_ret
23dfc     2D 00 64 FD | 	ret
23e00                 | 
23e00                 | __system____root_opendir
23e00     64 E6 05 F1 | 	add	ptr___system__dat__, #100
23e04     04 12 06 F1 | 	add	arg01, #4
23e08     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
23e0c     00 FA 05 F6 | 	mov	result1, #0
23e10     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
23e14                 | __system____root_opendir_ret
23e14     2D 00 64 FD | 	ret
23e18                 | 
23e18                 | __system____root_readdir
23e18     03 4A 05 F6 | 	mov	COUNT_, #3
23e1c     A8 00 A0 FD | 	call	#pushregs_
23e20     09 1F 02 F6 | 	mov	local01, arg01
23e24     0A 21 02 F6 | 	mov	local02, arg02
23e28     04 1E 06 F1 | 	add	local01, #4
23e2c     0F 23 02 FB | 	rdlong	local03, local01
23e30     04 1E 86 F1 | 	sub	local01, #4
23e34                 | LR__3490
23e34     74 E6 05 F1 | 	add	ptr___system__dat__, #116
23e38     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
23e3c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
23e40     01 FA 65 A6 |  if_e	neg	result1, #1
23e44     48 00 90 AD |  if_e	jmp	#LR__3491
23e48     11 17 0A FB | 	rdlong	arg03, local03 wz
23e4c     04 22 06 A1 |  if_e	add	local03, #4
23e50     E0 FF 9F AD |  if_e	jmp	#LR__3490
23e54     11 15 02 FB | 	rdlong	arg02, local03
23e58     01 14 06 F1 | 	add	arg02, #1
23e5c     10 13 02 F6 | 	mov	arg01, local02
23e60     40 16 06 F6 | 	mov	arg03, #64
23e64     58 FE BF FD | 	call	#__system__strncpy
23e68     50 20 06 F1 | 	add	local02, #80
23e6c     10 03 48 FC | 	wrbyte	#1, local02
23e70     08 20 86 F1 | 	sub	local02, #8
23e74     10 01 68 FC | 	wrlong	#0, local02
23e78     04 20 06 F1 | 	add	local02, #4
23e7c     10 01 68 FC | 	wrlong	#0, local02
23e80     04 22 06 F1 | 	add	local03, #4
23e84     04 1E 06 F1 | 	add	local01, #4
23e88     0F 23 62 FC | 	wrlong	local03, local01
23e8c     00 FA 05 F6 | 	mov	result1, #0
23e90                 | LR__3491
23e90     A7 F0 03 F6 | 	mov	ptra, fp
23e94     B2 00 A0 FD | 	call	#popregs_
23e98                 | __system____root_readdir_ret
23e98     2D 00 64 FD | 	ret
23e9c                 | 
23e9c                 | __system____root_closedir
23e9c     00 FA 05 F6 | 	mov	result1, #0
23ea0                 | __system____root_closedir_ret
23ea0     2D 00 64 FD | 	ret
23ea4                 | 
23ea4                 | __system____root_stat
23ea4     0A 01 02 F6 | 	mov	_var01, arg02
23ea8     00 13 02 F6 | 	mov	arg01, _var01
23eac     00 14 06 F6 | 	mov	arg02, #0
23eb0     30 16 06 F6 | 	mov	arg03, #48
23eb4     98 00 A0 FD | 	call	#\builtin_bytefill_
23eb8     08 00 06 F1 | 	add	_var01, #8
23ebc     08 00 80 FF 
23ec0     00 FF 6B FC | 	wrlong	##4607, _var01
23ec4     00 FA 05 F6 | 	mov	result1, #0
23ec8                 | __system____root_stat_ret
23ec8     2D 00 64 FD | 	ret
23ecc                 | 
23ecc                 | __system___normalizeName
23ecc     00 00 06 F6 | 	mov	_var01, #0
23ed0     09 03 02 F6 | 	mov	_var02, arg01
23ed4     01 05 02 F6 | 	mov	_var03, _var02
23ed8                 | LR__3500
23ed8     01 07 CA FA | 	rdbyte	_var04, _var02 wz
23edc     5C 01 90 AD |  if_e	jmp	#LR__3519
23ee0     00 00 0E F2 | 	cmp	_var01, #0 wz
23ee4     02 07 02 56 |  if_ne	mov	_var04, _var03
23ee8     01 04 06 51 |  if_ne	add	_var03, #1
23eec     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
23ef0     00 00 06 56 |  if_ne	mov	_var01, #0
23ef4     01 07 C2 FA | 	rdbyte	_var04, _var02
23ef8     2E 06 0E F2 | 	cmp	_var04, #46 wz
23efc     D8 00 90 5D |  if_ne	jmp	#LR__3512
23f00     01 02 06 F1 | 	add	_var02, #1
23f04     01 07 C2 FA | 	rdbyte	_var04, _var02
23f08     01 02 86 F1 | 	sub	_var02, #1
23f0c     2F 06 0E F2 | 	cmp	_var04, #47 wz
23f10     18 00 90 AD |  if_e	jmp	#LR__3501
23f14     01 02 06 F1 | 	add	_var02, #1
23f18     01 09 C2 FA | 	rdbyte	_var05, _var02
23f1c     01 02 86 F1 | 	sub	_var02, #1
23f20     04 0B 02 F6 | 	mov	_var06, _var05
23f24     07 0A 4E F7 | 	zerox	_var06, #7 wz
23f28     10 00 90 5D |  if_ne	jmp	#LR__3502
23f2c                 | LR__3501
23f2c     01 0D 02 F6 | 	mov	_var07, _var02
23f30     01 0C 06 F1 | 	add	_var07, #1
23f34     06 03 02 F6 | 	mov	_var02, _var07
23f38     E0 00 90 FD | 	jmp	#LR__3516
23f3c                 | LR__3502
23f3c     01 02 06 F1 | 	add	_var02, #1
23f40     01 0D C2 FA | 	rdbyte	_var07, _var02
23f44     01 02 86 F1 | 	sub	_var02, #1
23f48     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
23f4c     2E 06 0E F2 | 	cmp	_var04, #46 wz
23f50     84 00 90 5D |  if_ne	jmp	#LR__3511
23f54     02 02 06 F1 | 	add	_var02, #2
23f58     01 0D C2 FA | 	rdbyte	_var07, _var02
23f5c     02 02 86 F1 | 	sub	_var02, #2
23f60     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
23f64     2F 06 0E F2 | 	cmp	_var04, #47 wz
23f68     18 00 90 AD |  if_e	jmp	#LR__3503
23f6c     02 02 06 F1 | 	add	_var02, #2
23f70     01 09 C2 FA | 	rdbyte	_var05, _var02
23f74     02 02 86 F1 | 	sub	_var02, #2
23f78     04 0B 02 F6 | 	mov	_var06, _var05
23f7c     07 0A 4E F7 | 	zerox	_var06, #7 wz
23f80     54 00 90 5D |  if_ne	jmp	#LR__3510
23f84                 | LR__3503
23f84     02 02 06 F1 | 	add	_var02, #2
23f88     09 05 5A F2 | 	cmps	_var03, arg01 wcz
23f8c     40 00 90 ED |  if_be	jmp	#LR__3509
23f90     02 0F 02 F6 | 	mov	_var08, _var03
23f94     01 0E 86 F1 | 	sub	_var08, #1
23f98                 | LR__3504
23f98     07 07 C2 FA | 	rdbyte	_var04, _var08
23f9c     2F 06 0E F2 | 	cmp	_var04, #47 wz
23fa0     0C 00 90 5D |  if_ne	jmp	#LR__3505
23fa4     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
23fa8     01 0E 86 11 |  if_a	sub	_var08, #1
23fac     E8 FF 9F 1D |  if_a	jmp	#LR__3504
23fb0                 | LR__3505
23fb0     97 0C 48 FB | 	callpa	#(@LR__3507-@LR__3506)>>2,fcache_load_ptr_
23fb4                 | LR__3506
23fb4     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
23fb8     10 00 90 ED |  if_be	jmp	#LR__3508
23fbc     07 07 C2 FA | 	rdbyte	_var04, _var08
23fc0     2F 06 0E F2 | 	cmp	_var04, #47 wz
23fc4     01 0E 86 51 |  if_ne	sub	_var08, #1
23fc8     E8 FF 9F 5D |  if_ne	jmp	#LR__3506
23fcc                 | LR__3507
23fcc                 | LR__3508
23fcc     07 05 02 F6 | 	mov	_var03, _var08
23fd0                 | LR__3509
23fd0     01 00 06 F6 | 	mov	_var01, #1
23fd4     44 00 90 FD | 	jmp	#LR__3516
23fd8                 | LR__3510
23fd8                 | LR__3511
23fd8                 | LR__3512
23fd8     97 18 48 FB | 	callpa	#(@LR__3514-@LR__3513)>>2,fcache_load_ptr_
23fdc                 | LR__3513
23fdc     01 07 CA FA | 	rdbyte	_var04, _var02 wz
23fe0     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
23fe4     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
23fe8     20 00 90 AD |  if_e	jmp	#LR__3515
23fec     01 0B 02 F6 | 	mov	_var06, _var02
23ff0     01 09 02 F6 | 	mov	_var05, _var02
23ff4     01 08 06 F1 | 	add	_var05, #1
23ff8     05 11 C2 FA | 	rdbyte	_var09, _var06
23ffc     04 03 02 F6 | 	mov	_var02, _var05
24000     02 11 42 FC | 	wrbyte	_var09, _var03
24004     01 04 06 F1 | 	add	_var03, #1
24008     D0 FF 9F FD | 	jmp	#LR__3513
2400c                 | LR__3514
2400c                 | LR__3515
2400c     01 07 C2 FA | 	rdbyte	_var04, _var02
24010     2F 06 0E F2 | 	cmp	_var04, #47 wz
24014     C0 FE 9F 5D |  if_ne	jmp	#LR__3500
24018     01 00 06 F6 | 	mov	_var01, #1
2401c                 | LR__3516
2401c     97 0C 48 FB | 	callpa	#(@LR__3518-@LR__3517)>>2,fcache_load_ptr_
24020                 | LR__3517
24020     01 07 C2 FA | 	rdbyte	_var04, _var02
24024     2F 06 0E F2 | 	cmp	_var04, #47 wz
24028     01 0D 02 A6 |  if_e	mov	_var07, _var02
2402c     01 0C 06 A1 |  if_e	add	_var07, #1
24030     06 03 02 A6 |  if_e	mov	_var02, _var07
24034     E8 FF 9F AD |  if_e	jmp	#LR__3517
24038                 | LR__3518
24038     9C FE 9F FD | 	jmp	#LR__3500
2403c                 | LR__3519
2403c     02 01 48 FC | 	wrbyte	#0, _var03
24040                 | __system___normalizeName_ret
24040     2D 00 64 FD | 	ret
24044                 | 
24044                 | __system___strrev
24044     09 01 CA FA | 	rdbyte	_var01, arg01 wz
24048     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
2404c     09 03 02 F6 | 	mov	_var02, arg01
24050     97 1A 48 FB | 	callpa	#(@LR__3522-@LR__3520)>>2,fcache_load_ptr_
24054                 | LR__3520
24054     01 01 CA FA | 	rdbyte	_var01, _var02 wz
24058     01 02 06 51 |  if_ne	add	_var02, #1
2405c     F4 FF 9F 5D |  if_ne	jmp	#LR__3520
24060     01 02 86 F1 | 	sub	_var02, #1
24064                 | LR__3521
24064     09 03 5A F2 | 	cmps	_var02, arg01 wcz
24068     1C 00 90 ED |  if_be	jmp	#LR__3523
2406c     09 01 C2 FA | 	rdbyte	_var01, arg01
24070     01 05 C2 FA | 	rdbyte	_var03, _var02
24074     09 05 42 FC | 	wrbyte	_var03, arg01
24078     01 01 42 FC | 	wrbyte	_var01, _var02
2407c     01 12 06 F1 | 	add	arg01, #1
24080     01 02 86 F1 | 	sub	_var02, #1
24084     DC FF 9F FD | 	jmp	#LR__3521
24088                 | LR__3522
24088                 | LR__3523
24088                 | __system___strrev_ret
24088     2D 00 64 FD | 	ret
2408c                 | 
2408c                 | __system___fmtpad
2408c     06 4A 05 F6 | 	mov	COUNT_, #6
24090     A8 00 A0 FD | 	call	#pushregs_
24094     09 1F 02 F6 | 	mov	local01, arg01
24098     0A 21 02 F6 | 	mov	local02, arg02
2409c     0B 23 02 F6 | 	mov	local03, arg03
240a0     10 13 EA F8 | 	getbyte	arg01, local02, #1
240a4     16 20 46 F0 | 	shr	local02, #22
240a8     03 20 0E F5 | 	and	local02, #3 wz
240ac     00 24 06 F6 | 	mov	local04, #0
240b0     01 20 06 A6 |  if_e	mov	local02, #1
240b4     0C 21 CA F7 | 	test	local02, arg04 wz
240b8     00 FA 05 A6 |  if_e	mov	result1, #0
240bc     88 00 90 AD |  if_e	jmp	#LR__3533
240c0     09 23 C2 F2 | 	subr	local03, arg01
240c4     01 22 56 F2 | 	cmps	local03, #1 wc
240c8     00 FA 05 C6 |  if_b	mov	result1, #0
240cc     78 00 90 CD |  if_b	jmp	#LR__3533
240d0     03 20 0E F2 | 	cmp	local02, #3 wz
240d4     18 00 90 5D |  if_ne	jmp	#LR__3530
240d8     01 18 0E F2 | 	cmp	arg04, #1 wz
240dc     6E 20 62 FD | 	wrz	local02
240e0     10 23 02 F1 | 	add	local03, local02
240e4     11 23 52 F6 | 	abs	local03, local03 wc
240e8     01 22 46 F0 | 	shr	local03, #1
240ec     11 23 82 F6 | 	negc	local03, local03
240f0                 | LR__3530
240f0     01 22 56 F2 | 	cmps	local03, #1 wc
240f4     4C 00 90 CD |  if_b	jmp	#LR__3532
240f8     11 27 02 F6 | 	mov	local05, local03
240fc                 | LR__3531
240fc     0F 21 02 F6 | 	mov	local02, local01
24100     0F 29 02 F6 | 	mov	local06, local01
24104     13 20 46 F7 | 	zerox	local02, #19
24108     14 28 46 F0 | 	shr	local06, #20
2410c     02 28 66 F0 | 	shl	local06, #2
24110     ED 28 02 F1 | 	add	local06, __methods__
24114     14 29 02 FB | 	rdlong	local06, local06
24118     20 12 06 F6 | 	mov	arg01, #32
2411c     F2 22 02 F6 | 	mov	local03, objptr
24120     10 E5 01 F6 | 	mov	objptr, local02
24124     2D 28 62 FD | 	call	local06
24128     11 E5 01 F6 | 	mov	objptr, local03
2412c     FD 28 02 F6 | 	mov	local06, result1
24130     00 28 56 F2 | 	cmps	local06, #0 wc
24134     14 FB 01 C6 |  if_b	mov	result1, local06
24138     0C 00 90 CD |  if_b	jmp	#LR__3533
2413c     14 25 02 F1 | 	add	local04, local06
24140     EE 27 6E FB | 	djnz	local05, #LR__3531
24144                 | LR__3532
24144     12 FB 01 F6 | 	mov	result1, local04
24148                 | LR__3533
24148     A7 F0 03 F6 | 	mov	ptra, fp
2414c     B2 00 A0 FD | 	call	#popregs_
24150                 | __system___fmtpad_ret
24150     2D 00 64 FD | 	ret
24154                 | 
24154                 | __system___uitoa
24154     04 4A 05 F6 | 	mov	COUNT_, #4
24158     A8 00 A0 FD | 	call	#pushregs_
2415c     09 1F 02 F6 | 	mov	local01, arg01
24160     00 1A 4E F2 | 	cmps	arg05, #0 wz
24164     0F 1B 02 F6 | 	mov	arg05, local01
24168     00 20 06 F6 | 	mov	local02, #0
2416c     37 22 06 56 |  if_ne	mov	local03, #55
24170     57 22 06 A6 |  if_e	mov	local03, #87
24174                 | LR__3540
24174     0B 15 12 FD | 	qdiv	arg02, arg03
24178     19 24 62 FD | 	getqy	local04
2417c     0B 15 12 FD | 	qdiv	arg02, arg03
24180     0A 24 16 F2 | 	cmp	local04, #10 wc
24184     30 24 06 C1 |  if_b	add	local04, #48
24188     11 25 02 31 |  if_ae	add	local04, local03
2418c     0D 25 42 FC | 	wrbyte	local04, arg05
24190     01 1A 06 F1 | 	add	arg05, #1
24194     01 20 06 F1 | 	add	local02, #1
24198     18 14 62 FD | 	getqx	arg02
2419c     00 14 0E F2 | 	cmp	arg02, #0 wz
241a0     D0 FF 9F 5D |  if_ne	jmp	#LR__3540
241a4     0C 21 12 F2 | 	cmp	local02, arg04 wc
241a8     C8 FF 9F CD |  if_b	jmp	#LR__3540
241ac     0D 01 48 FC | 	wrbyte	#0, arg05
241b0     0F 13 02 F6 | 	mov	arg01, local01
241b4     8C FE BF FD | 	call	#__system___strrev
241b8     10 FB 01 F6 | 	mov	result1, local02
241bc     A7 F0 03 F6 | 	mov	ptra, fp
241c0     B2 00 A0 FD | 	call	#popregs_
241c4                 | __system___uitoa_ret
241c4     2D 00 64 FD | 	ret
241c8                 | 
241c8                 | __system__disassemble_0442
241c8     10 4A 05 F6 | 	mov	COUNT_, #16
241cc     A8 00 A0 FD | 	call	#pushregs_
241d0     09 1F 02 F6 | 	mov	local01, arg01
241d4     0A 21 02 F6 | 	mov	local02, arg02
241d8     0B 23 02 F6 | 	mov	local03, arg03
241dc     0C 25 02 F6 | 	mov	local04, arg04
241e0     0D 27 02 F6 | 	mov	local05, arg05
241e4     13 13 52 F6 | 	abs	arg01, local05 wc
241e8     1F 28 C6 C9 |  if_b	decod	local06, #31
241ec     00 28 06 36 |  if_ae	mov	local06, #0
241f0     64 D0 BF FD | 	call	#__system___float_fromuns
241f4     14 FB 61 F5 | 	xor	result1, local06
241f8     FD 2A 02 F6 | 	mov	local07, result1
241fc     00 2C 06 F6 | 	mov	local08, #0
24200     0F 13 02 F6 | 	mov	arg01, local01
24204     00 14 06 F6 | 	mov	arg02, #0
24208     01 16 06 F6 | 	mov	arg03, #1
2420c     80 D8 BF FD | 	call	#__system___float_cmp
24210     00 FA 0D F2 | 	cmp	result1, #0 wz
24214     00 2E 06 A6 |  if_e	mov	local09, #0
24218     10 01 68 AC |  if_e	wrlong	#0, local02
2421c     11 2F 62 AC |  if_e	wrlong	local09, local03
24220     8C 01 90 AD |  if_e	jmp	#LR__3562
24224     0F 13 02 F6 | 	mov	arg01, local01
24228     30 DD BF FD | 	call	#__system____builtin_ilogb
2422c     FD 30 02 F6 | 	mov	local10, result1
24230     0A 26 0E F2 | 	cmp	local05, #10 wz
24234     24 00 90 5D |  if_ne	jmp	#LR__3550
24238     18 2F 02 F6 | 	mov	local09, local10
2423c     01 2E 66 F0 | 	shl	local09, #1
24240     18 2F 02 F1 | 	add	local09, local10
24244     17 31 52 F6 | 	abs	local10, local09 wc
24248     0A 30 16 FD | 	qdiv	local10, #10
2424c     09 32 06 F6 | 	mov	local11, #9
24250     18 30 62 FD | 	getqx	local10
24254     18 31 82 F6 | 	negc	local10, local10
24258     04 00 90 FD | 	jmp	#LR__3551
2425c                 | LR__3550
2425c     18 32 06 F6 | 	mov	local11, #24
24260                 | LR__3551
24260                 | LR__3552
24260     08 2C 56 F2 | 	cmps	local08, #8 wc
24264     01 2C 06 F1 | 	add	local08, #1
24268     60 00 90 3D |  if_ae	jmp	#LR__3553
2426c     00 C0 1F FF 
24270     00 12 06 F6 | 	mov	arg01, ##1065353216
24274     15 15 02 F6 | 	mov	arg02, local07
24278     18 17 02 F6 | 	mov	arg03, local10
2427c     88 E3 BF FD | 	call	#__system___float_pow_n
24280     FD 14 02 F6 | 	mov	arg02, result1
24284     0F 13 02 F6 | 	mov	arg01, local01
24288     D4 D5 BF FD | 	call	#__system___float_div
2428c     FD 34 02 F6 | 	mov	local12, result1
24290     1A 13 02 F6 | 	mov	arg01, local12
24294     00 C0 1F FF 
24298     00 14 06 F6 | 	mov	arg02, ##1065353216
2429c     01 16 06 F6 | 	mov	arg03, #1
242a0     EC D7 BF FD | 	call	#__system___float_cmp
242a4     00 FA 55 F2 | 	cmps	result1, #0 wc
242a8     01 30 86 C1 |  if_b	sub	local10, #1
242ac     B0 FF 9F CD |  if_b	jmp	#LR__3552
242b0     15 15 02 F6 | 	mov	arg02, local07
242b4     1A 13 02 F6 | 	mov	arg01, local12
242b8     01 16 66 F6 | 	neg	arg03, #1
242bc     D0 D7 BF FD | 	call	#__system___float_cmp
242c0     00 FA 55 F2 | 	cmps	result1, #0 wc
242c4     01 30 06 31 |  if_ae	add	local10, #1
242c8     94 FF 9F 3D |  if_ae	jmp	#LR__3552
242cc                 | LR__3553
242cc     1A 13 02 F6 | 	mov	arg01, local12
242d0     88 DC BF FD | 	call	#__system____builtin_ilogb
242d4     FD 36 02 F6 | 	mov	local13, result1
242d8     1A 39 02 F6 | 	mov	local14, local12
242dc     17 39 06 F4 | 	bitl	local14, #279
242e0     17 38 26 F4 | 	bith	local14, #23
242e4     1B 39 62 F0 | 	shl	local14, local13
242e8     02 26 0E F2 | 	cmp	local05, #2 wz
242ec     02 24 66 A0 |  if_e	shl	local04, #2
242f0     00 3A 06 F6 | 	mov	local15, #0
242f4     00 24 56 F2 | 	cmps	local04, #0 wc
242f8     10 00 90 3D |  if_ae	jmp	#LR__3554
242fc     18 25 C2 F2 | 	subr	local04, local10
24300     00 24 56 F2 | 	cmps	local04, #0 wc
24304     A0 00 90 CD |  if_b	jmp	#LR__3561
24308     04 00 90 FD | 	jmp	#LR__3555
2430c                 | LR__3554
2430c     01 24 06 F1 | 	add	local04, #1
24310                 | LR__3555
24310     19 25 7A F3 | 	fles	local04, local11 wcz
24314     01 3C 06 F6 | 	mov	local16, #1
24318     97 22 48 FB | 	callpa	#(@LR__3557-@LR__3556)>>2,fcache_load_ptr_
2431c                 | LR__3556
2431c     00 40 00 FF 
24320     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
24324     38 00 90 3D |  if_ae	jmp	#LR__3558
24328     01 24 56 F2 | 	cmps	local04, #1 wc
2432c     01 24 86 F1 | 	sub	local04, #1
24330     2C 00 90 CD |  if_b	jmp	#LR__3558
24334     13 3B 02 FD | 	qmul	local15, local05
24338     1C 37 02 F6 | 	mov	local13, local14
2433c     17 36 46 F0 | 	shr	local13, #23
24340     17 39 06 F4 | 	bitl	local14, #279
24344     18 3A 62 FD | 	getqx	local15
24348     13 3D 02 FD | 	qmul	local16, local05
2434c     18 3C 62 FD | 	getqx	local16
24350     13 39 02 FD | 	qmul	local14, local05
24354     1B 3B 02 F1 | 	add	local15, local13
24358     18 38 62 FD | 	getqx	local14
2435c     BC FF 9F FD | 	jmp	#LR__3556
24360                 | LR__3557
24360                 | LR__3558
24360     13 2F 02 F6 | 	mov	local09, local05
24364     17 2E 66 F0 | 	shl	local09, #23
24368     17 37 52 F6 | 	abs	local13, local09 wc
2436c     01 36 46 F0 | 	shr	local13, #1
24370     1B 37 82 F6 | 	negc	local13, local13
24374     1B 39 1A F2 | 	cmp	local14, local13 wcz
24378     20 00 90 1D |  if_a	jmp	#LR__3559
2437c     17 26 66 F0 | 	shl	local05, #23
24380     13 37 52 F6 | 	abs	local13, local05 wc
24384     01 36 46 F0 | 	shr	local13, #1
24388     1B 37 82 F6 | 	negc	local13, local13
2438c     1B 39 0A F2 | 	cmp	local14, local13 wz
24390     14 00 90 5D |  if_ne	jmp	#LR__3560
24394     01 3A CE F7 | 	test	local15, #1 wz
24398     0C 00 90 AD |  if_e	jmp	#LR__3560
2439c                 | LR__3559
2439c     01 3A 06 F1 | 	add	local15, #1
243a0     1E 3B 0A F2 | 	cmp	local15, local16 wz
243a4     01 30 06 A1 |  if_e	add	local10, #1
243a8                 | LR__3560
243a8                 | LR__3561
243a8     10 3B 62 FC | 	wrlong	local15, local02
243ac     11 31 62 FC | 	wrlong	local10, local03
243b0                 | LR__3562
243b0     A7 F0 03 F6 | 	mov	ptra, fp
243b4     B2 00 A0 FD | 	call	#popregs_
243b8                 | __system__disassemble_0442_ret
243b8     2D 00 64 FD | 	ret
243bc                 | 
243bc                 | __system__emitsign_0444
243bc     00 FA 05 F6 | 	mov	result1, #0
243c0     00 14 0E F2 | 	cmp	arg02, #0 wz
243c4     09 01 02 56 |  if_ne	mov	_var01, arg01
243c8     01 12 06 51 |  if_ne	add	arg01, #1
243cc     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
243d0     01 FA 05 56 |  if_ne	mov	result1, #1
243d4     00 16 0E F2 | 	cmp	arg03, #0 wz
243d8     09 61 48 5C |  if_ne	wrbyte	#48, arg01
243dc     01 12 06 51 |  if_ne	add	arg01, #1
243e0     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
243e4     02 FA 05 51 |  if_ne	add	result1, #2
243e8                 | __system__emitsign_0444_ret
243e8     2D 00 64 FD | 	ret
243ec                 | 
243ec                 | __system___gettxfunc
243ec     01 4A 05 F6 | 	mov	COUNT_, #1
243f0     A8 00 A0 FD | 	call	#pushregs_
243f4     A0 F8 BF FD | 	call	#__system____getftab
243f8     FD 1E 0A F6 | 	mov	local01, result1 wz
243fc     10 00 90 AD |  if_e	jmp	#LR__3570
24400     08 1E 06 F1 | 	add	local01, #8
24404     0F 15 0A FB | 	rdlong	arg02, local01 wz
24408     08 1E 86 F1 | 	sub	local01, #8
2440c     08 00 90 5D |  if_ne	jmp	#LR__3571
24410                 | LR__3570
24410     00 FA 05 F6 | 	mov	result1, #0
24414     0C 00 90 FD | 	jmp	#LR__3572
24418                 | LR__3571
24418     00 38 04 FF 
2441c     00 1E 46 F5 | 	or	local01, ##141557760
24420     0F FB 01 F6 | 	mov	result1, local01
24424                 | LR__3572
24424     A7 F0 03 F6 | 	mov	ptra, fp
24428     B2 00 A0 FD | 	call	#popregs_
2442c                 | __system___gettxfunc_ret
2442c     2D 00 64 FD | 	ret
24430                 | 
24430                 | __system___getrxfunc
24430     01 4A 05 F6 | 	mov	COUNT_, #1
24434     A8 00 A0 FD | 	call	#pushregs_
24438     5C F8 BF FD | 	call	#__system____getftab
2443c     FD 1E 0A F6 | 	mov	local01, result1 wz
24440     10 00 90 AD |  if_e	jmp	#LR__3580
24444     08 1E 06 F1 | 	add	local01, #8
24448     0F 15 0A FB | 	rdlong	arg02, local01 wz
2444c     08 1E 86 F1 | 	sub	local01, #8
24450     08 00 90 5D |  if_ne	jmp	#LR__3581
24454                 | LR__3580
24454     00 FA 05 F6 | 	mov	result1, #0
24458     0C 00 90 FD | 	jmp	#LR__3582
2445c                 | LR__3581
2445c     00 40 04 FF 
24460     00 1E 46 F5 | 	or	local01, ##142606336
24464     0F FB 01 F6 | 	mov	result1, local01
24468                 | LR__3582
24468     A7 F0 03 F6 | 	mov	ptra, fp
2446c     B2 00 A0 FD | 	call	#popregs_
24470                 | __system___getrxfunc_ret
24470     2D 00 64 FD | 	ret
24474                 | 
24474                 | __system___getiolock_0484
24474     01 4A 05 F6 | 	mov	COUNT_, #1
24478     A8 00 A0 FD | 	call	#pushregs_
2447c     18 F8 BF FD | 	call	#__system____getftab
24480     FD 1E 0A F6 | 	mov	local01, result1 wz
24484     10 00 90 AD |  if_e	jmp	#LR__3590
24488     08 1E 06 F1 | 	add	local01, #8
2448c     0F FB 09 FB | 	rdlong	result1, local01 wz
24490     08 1E 86 F1 | 	sub	local01, #8
24494     18 00 90 5D |  if_ne	jmp	#LR__3591
24498                 | LR__3590
24498     01 00 00 FF 
2449c     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
244a0     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
244a4     01 00 00 FF 
244a8     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
244ac     08 00 90 FD | 	jmp	#LR__3592
244b0                 | LR__3591
244b0     0C 1E 06 F1 | 	add	local01, #12
244b4     0F FB 01 F6 | 	mov	result1, local01
244b8                 | LR__3592
244b8     A7 F0 03 F6 | 	mov	ptra, fp
244bc     B2 00 A0 FD | 	call	#popregs_
244c0                 | __system___getiolock_0484_ret
244c0     2D 00 64 FD | 	ret
244c4                 | 
244c4                 | __system____ScanForChar
244c4     09 01 02 F6 | 	mov	_var01, arg01
244c8     09 03 02 F6 | 	mov	_var02, arg01
244cc     97 06 48 FB | 	callpa	#(@LR__3601-@LR__3600)>>2,fcache_load_ptr_
244d0                 | LR__3600
244d0     01 FB C9 FA | 	rdbyte	result1, _var02 wz
244d4     01 02 06 51 |  if_ne	add	_var02, #1
244d8     F4 FF 9F 5D |  if_ne	jmp	#LR__3600
244dc                 | LR__3601
244dc     09 03 82 F1 | 	sub	_var02, arg01
244e0     01 FB 01 F6 | 	mov	result1, _var02
244e4     FD 12 0A F6 | 	mov	arg01, result1 wz
244e8     00 FA 05 A6 |  if_e	mov	result1, #0
244ec     B8 00 90 AD |  if_e	jmp	#LR__3608
244f0     0A 05 02 F6 | 	mov	_var03, arg02
244f4     07 04 4E F7 | 	zerox	_var03, #7 wz
244f8     00 FA 05 A6 |  if_e	mov	result1, #0
244fc     A8 00 90 AD |  if_e	jmp	#LR__3608
24500     01 16 16 F2 | 	cmp	arg03, #1 wc
24504     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
24508     01 16 06 86 |  if_c_and_z	mov	arg03, #1
2450c     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
24510     94 00 90 4D |  if_c_and_nz	jmp	#LR__3608
24514     09 17 1A F2 | 	cmp	arg03, arg01 wcz
24518     10 00 90 ED |  if_be	jmp	#LR__3602
2451c     00 18 0E F2 | 	cmp	arg04, #0 wz
24520     00 FA 05 A6 |  if_e	mov	result1, #0
24524     80 00 90 AD |  if_e	jmp	#LR__3608
24528     09 17 02 F6 | 	mov	arg03, arg01
2452c                 | LR__3602
2452c     01 16 86 F1 | 	sub	arg03, #1
24530     00 18 0E F2 | 	cmp	arg04, #0 wz
24534     38 00 90 5D |  if_ne	jmp	#LR__3604
24538     0B 07 02 F6 | 	mov	_var04, arg03
2453c     09 09 02 F6 | 	mov	_var05, arg01
24540                 | LR__3603
24540     04 07 12 F2 | 	cmp	_var04, _var05 wc
24544     5C 00 90 3D |  if_ae	jmp	#LR__3607
24548     03 05 02 F6 | 	mov	_var03, _var04
2454c     00 05 02 F1 | 	add	_var03, _var01
24550     02 05 C2 FA | 	rdbyte	_var03, _var03
24554     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
24558     0C 05 0A F2 | 	cmp	_var03, arg04 wz
2455c     01 06 06 A1 |  if_e	add	_var04, #1
24560     03 FB 01 A6 |  if_e	mov	result1, _var04
24564     40 00 90 AD |  if_e	jmp	#LR__3608
24568     01 06 06 F1 | 	add	_var04, #1
2456c     D0 FF 9F FD | 	jmp	#LR__3603
24570                 | LR__3604
24570     0B 07 02 F6 | 	mov	_var04, arg03
24574                 | LR__3605
24574     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
24578     28 00 90 1D |  if_a	jmp	#LR__3606
2457c     03 09 02 F6 | 	mov	_var05, _var04
24580     00 09 02 F1 | 	add	_var05, _var01
24584     04 05 C2 FA | 	rdbyte	_var03, _var05
24588     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
2458c     04 05 0A F2 | 	cmp	_var03, _var05 wz
24590     01 06 06 A1 |  if_e	add	_var04, #1
24594     03 FB 01 A6 |  if_e	mov	result1, _var04
24598     0C 00 90 AD |  if_e	jmp	#LR__3608
2459c     01 06 86 F1 | 	sub	_var04, #1
245a0     D0 FF 9F FD | 	jmp	#LR__3605
245a4                 | LR__3606
245a4                 | LR__3607
245a4     00 FA 05 F6 | 	mov	result1, #0
245a8                 | LR__3608
245a8                 | __system____ScanForChar_ret
245a8     2D 00 64 FD | 	ret
245ac                 | 
245ac                 | __system___basic_dir
245ac     05 4A 05 F6 | 	mov	COUNT_, #5
245b0     A8 00 A0 FD | 	call	#pushregs_
245b4     4C F0 07 F1 | 	add	ptra, #76
245b8     04 4E 05 F1 | 	add	fp, #4
245bc     A7 12 62 FC | 	wrlong	arg01, fp
245c0     04 4E 05 F1 | 	add	fp, #4
245c4     A7 14 62 FC | 	wrlong	arg02, fp
245c8     04 4E 85 F1 | 	sub	fp, #4
245cc     A7 14 0A FB | 	rdlong	arg02, fp wz
245d0     04 4E 85 F1 | 	sub	fp, #4
245d4     04 4E 05 51 |  if_ne	add	fp, #4
245d8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
245dc     04 4E 85 51 |  if_ne	sub	fp, #4
245e0     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
245e4     70 00 90 AD |  if_e	jmp	#LR__3610
245e8     03 00 00 FF 
245ec     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
245f0     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
245f4     03 00 00 FF 
245f8     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
245fc     03 00 00 5F 
24600     28 E7 05 51 |  if_ne	add	ptr___system__dat__, ##1832
24604     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
24608     03 00 00 5F 
2460c     28 E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
24610     14 EA BF 5D |  if_ne	call	#__system__closedir
24614     70 01 00 FF 
24618     FC 12 06 F6 | 	mov	arg01, ##@LR__4768
2461c     1C E9 BF FD | 	call	#__system__opendir
24620     03 00 00 FF 
24624     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
24628     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2462c     08 4E 05 F1 | 	add	fp, #8
24630     A7 20 02 FB | 	rdlong	local02, fp
24634     04 E6 05 F1 | 	add	ptr___system__dat__, #4
24638     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
2463c     04 4E 85 F1 | 	sub	fp, #4
24640     A7 20 02 FB | 	rdlong	local02, fp
24644     04 4E 85 F1 | 	sub	fp, #4
24648     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2464c     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
24650     03 00 00 FF 
24654     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
24658                 | LR__3610
24658     03 00 00 FF 
2465c     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
24660     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
24664     03 00 00 FF 
24668     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
2466c     70 01 00 AF 
24670     FE FA 05 A6 |  if_e	mov	result1, ##@LR__4769
24674     84 02 90 AD |  if_e	jmp	#LR__3623
24678                 | LR__3611
24678     03 00 00 FF 
2467c     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
24680     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
24684     03 00 00 FF 
24688     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
2468c     0C EA BF FD | 	call	#__system__readdir
24690     0C 4E 05 F1 | 	add	fp, #12
24694     A7 FA 61 FC | 	wrlong	result1, fp
24698     0C 4E 85 F1 | 	sub	fp, #12
2469c     00 FA 0D F2 | 	cmp	result1, #0 wz
246a0     38 00 90 5D |  if_ne	jmp	#LR__3612
246a4     03 00 00 FF 
246a8     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
246ac     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
246b0     03 00 00 FF 
246b4     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
246b8     6C E9 BF FD | 	call	#__system__closedir
246bc     03 00 00 FF 
246c0     28 E7 05 F1 | 	add	ptr___system__dat__, ##1832
246c4     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
246c8     03 00 00 FF 
246cc     28 E7 85 F1 | 	sub	ptr___system__dat__, ##1832
246d0     70 01 00 FF 
246d4     00 FB 05 F6 | 	mov	result1, ##@LR__4770
246d8     20 02 90 FD | 	jmp	#LR__3623
246dc                 | LR__3612
246dc     0C 4E 05 F1 | 	add	fp, #12
246e0     A7 12 02 FB | 	rdlong	arg01, fp
246e4     0C 4E 85 F1 | 	sub	fp, #12
246e8     03 00 00 FF 
246ec     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
246f0     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
246f4     03 00 00 FF 
246f8     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
246fc     48 07 B0 FD | 	call	#__system___pat_match
24700     00 FA 0D F2 | 	cmp	result1, #0 wz
24704     70 FF 9F AD |  if_e	jmp	#LR__3611
24708     03 00 00 FF 
2470c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
24710     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
24714     03 00 00 FF 
24718     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2471c     78 01 90 AD |  if_e	jmp	#LR__3619
24720     0C 4E 05 F1 | 	add	fp, #12
24724     A7 12 02 FB | 	rdlong	arg01, fp
24728     04 4E 05 F1 | 	add	fp, #4
2472c     A7 14 02 F6 | 	mov	arg02, fp
24730     10 4E 85 F1 | 	sub	fp, #16
24734     68 F2 BF FD | 	call	#__system__stat
24738     40 4E 05 F1 | 	add	fp, #64
2473c     A7 FA 61 FC | 	wrlong	result1, fp
24740     40 4E 85 F1 | 	sub	fp, #64
24744     00 FA 0D F2 | 	cmp	result1, #0 wz
24748     70 01 00 5F 
2474c     02 FB 05 56 |  if_ne	mov	result1, ##@LR__4771
24750     A8 01 90 5D |  if_ne	jmp	#LR__3623
24754     18 4E 05 F1 | 	add	fp, #24
24758     A7 20 02 FB | 	rdlong	local02, fp
2475c     78 00 00 FF 
24760     00 20 06 F5 | 	and	local02, ##61440
24764     2C 4E 05 F1 | 	add	fp, #44
24768     A7 20 62 FC | 	wrlong	local02, fp
2476c     38 4E 85 F1 | 	sub	fp, #56
24770     A7 20 02 FB | 	rdlong	local02, fp
24774     0C 4E 85 F1 | 	sub	fp, #12
24778     10 21 C2 FA | 	rdbyte	local02, local02
2477c     2E 20 0E F2 | 	cmp	local02, #46 wz
24780     08 4E 05 A1 |  if_e	add	fp, #8
24784     A7 04 68 AC |  if_e	wrlong	#2, fp
24788     08 4E C5 F3 | 	sumz	fp, #8
2478c     A7 00 68 5C |  if_ne	wrlong	#0, fp
24790     08 4E 85 51 |  if_ne	sub	fp, #8
24794     44 4E 05 F1 | 	add	fp, #68
24798     A7 20 02 FB | 	rdlong	local02, fp
2479c     44 4E 85 F1 | 	sub	fp, #68
247a0     08 00 00 FF 
247a4     00 20 0E F2 | 	cmp	local02, ##4096 wz
247a8     18 00 90 5D |  if_ne	jmp	#LR__3613
247ac     08 4E 05 F1 | 	add	fp, #8
247b0     A7 20 02 FB | 	rdlong	local02, fp
247b4     10 20 46 F5 | 	or	local02, #16
247b8     A7 20 62 FC | 	wrlong	local02, fp
247bc     08 4E 85 F1 | 	sub	fp, #8
247c0     AC 00 90 FD | 	jmp	#LR__3618
247c4                 | LR__3613
247c4     44 4E 05 F1 | 	add	fp, #68
247c8     A7 20 02 FB | 	rdlong	local02, fp
247cc     44 4E 85 F1 | 	sub	fp, #68
247d0     10 00 00 FF 
247d4     00 20 0E F2 | 	cmp	local02, ##8192 wz
247d8     44 4E 05 51 |  if_ne	add	fp, #68
247dc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
247e0     44 4E 85 51 |  if_ne	sub	fp, #68
247e4     18 00 00 5F 
247e8     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
247ec     44 4E 05 51 |  if_ne	add	fp, #68
247f0     0F 23 02 56 |  if_ne	mov	local03, local01
247f4     44 4E 85 51 |  if_ne	sub	fp, #68
247f8     20 00 00 5F 
247fc     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
24800     18 00 90 5D |  if_ne	jmp	#LR__3614
24804     08 4E 05 F1 | 	add	fp, #8
24808     A7 20 02 FB | 	rdlong	local02, fp
2480c     04 20 46 F5 | 	or	local02, #4
24810     A7 20 62 FC | 	wrlong	local02, fp
24814     08 4E 85 F1 | 	sub	fp, #8
24818     54 00 90 FD | 	jmp	#LR__3617
2481c                 | LR__3614
2481c     18 4E 05 F1 | 	add	fp, #24
24820     A7 20 02 FB | 	rdlong	local02, fp
24824     18 4E 85 F1 | 	sub	fp, #24
24828     92 20 CE F7 | 	test	local02, #146 wz
2482c     18 00 90 5D |  if_ne	jmp	#LR__3615
24830     08 4E 05 F1 | 	add	fp, #8
24834     A7 20 02 FB | 	rdlong	local02, fp
24838     01 20 46 F5 | 	or	local02, #1
2483c     A7 20 62 FC | 	wrlong	local02, fp
24840     08 4E 85 F1 | 	sub	fp, #8
24844     28 00 90 FD | 	jmp	#LR__3616
24848                 | LR__3615
24848     44 4E 05 F1 | 	add	fp, #68
2484c     A7 24 02 FB | 	rdlong	local04, fp
24850     44 4E 85 F1 | 	sub	fp, #68
24854     08 00 00 FF 
24858     00 24 0E F2 | 	cmp	local04, ##4096 wz
2485c     08 4E 05 51 |  if_ne	add	fp, #8
24860     A7 24 02 5B |  if_ne	rdlong	local04, fp
24864     20 24 46 55 |  if_ne	or	local04, #32
24868     A7 24 62 5C |  if_ne	wrlong	local04, fp
2486c     08 4E 85 51 |  if_ne	sub	fp, #8
24870                 | LR__3616
24870                 | LR__3617
24870                 | LR__3618
24870     08 4E 05 F1 | 	add	fp, #8
24874     A7 24 02 FB | 	rdlong	local04, fp
24878     08 4E 85 F1 | 	sub	fp, #8
2487c     03 00 00 FF 
24880     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
24884     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
24888     03 00 00 FF 
2488c     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
24890     0F 25 CA F7 | 	test	local04, local01 wz
24894     E0 FD 9F AD |  if_e	jmp	#LR__3611
24898                 | LR__3619
24898     0C 4E 05 F1 | 	add	fp, #12
2489c     A7 12 02 FB | 	rdlong	arg01, fp
248a0     0C 4E 85 F1 | 	sub	fp, #12
248a4     09 27 02 F6 | 	mov	local05, arg01
248a8     97 06 48 FB | 	callpa	#(@LR__3621-@LR__3620)>>2,fcache_load_ptr_
248ac                 | LR__3620
248ac     13 FB C9 FA | 	rdbyte	result1, local05 wz
248b0     01 26 06 51 |  if_ne	add	local05, #1
248b4     F4 FF 9F 5D |  if_ne	jmp	#LR__3620
248b8                 | LR__3621
248b8     13 13 C2 F2 | 	subr	arg01, local05
248bc     01 12 06 F1 | 	add	arg01, #1
248c0     64 E0 BF FD | 	call	#__system___gc_alloc_managed
248c4     48 4E 05 F1 | 	add	fp, #72
248c8     A7 FA 61 FC | 	wrlong	result1, fp
248cc     48 4E 85 F1 | 	sub	fp, #72
248d0     00 FA 0D F2 | 	cmp	result1, #0 wz
248d4     18 00 90 AD |  if_e	jmp	#LR__3622
248d8     48 4E 05 F1 | 	add	fp, #72
248dc     A7 12 02 FB | 	rdlong	arg01, fp
248e0     3C 4E 85 F1 | 	sub	fp, #60
248e4     A7 14 02 FB | 	rdlong	arg02, fp
248e8     0C 4E 85 F1 | 	sub	fp, #12
248ec     D8 A1 BF FD | 	call	#__system____builtin_strcpy
248f0                 | LR__3622
248f0     48 4E 05 F1 | 	add	fp, #72
248f4     A7 FA 01 FB | 	rdlong	result1, fp
248f8     48 4E 85 F1 | 	sub	fp, #72
248fc                 | LR__3623
248fc     A7 F0 03 F6 | 	mov	ptra, fp
24900     B2 00 A0 FD | 	call	#popregs_
24904                 | __system___basic_dir_ret
24904     2D 00 64 FD | 	ret
24908                 | 
24908                 | __system__pack_0550
24908     09 01 02 F6 | 	mov	_var01, arg01
2490c     7F 16 06 F1 | 	add	arg03, #127
24910     04 18 CE F7 | 	test	arg04, #4 wz
24914     10 00 90 AD |  if_e	jmp	#LR__3630
24918     00 00 0E F2 | 	cmp	_var01, #0 wz
2491c     16 00 C6 A9 |  if_e	decod	_var01, #22
24920     F7 00 26 F4 | 	bith	_var01, #247
24924     B4 00 90 FD | 	jmp	#LR__3639
24928                 | LR__3630
24928     02 18 CE F7 | 	test	arg04, #2 wz
2492c     00 C0 3F 5F 
24930     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
24934     00 14 06 56 |  if_ne	mov	arg02, #0
24938     A0 00 90 5D |  if_ne	jmp	#LR__3638
2493c     08 18 CE F7 | 	test	arg04, #8 wz
24940     00 00 06 56 |  if_ne	mov	_var01, #0
24944     94 00 90 5D |  if_ne	jmp	#LR__3637
24948     FF 16 56 F2 | 	cmps	arg03, #255 wc
2494c     00 C0 3F 3F 
24950     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
24954     00 14 06 36 |  if_ae	mov	arg02, #0
24958     80 00 90 3D |  if_ae	jmp	#LR__3636
2495c     01 16 56 F2 | 	cmps	arg03, #1 wc
24960     6C 00 90 3D |  if_ae	jmp	#LR__3634
24964     01 14 46 F0 | 	shr	arg02, #1
24968     00 03 02 F6 | 	mov	_var02, _var01
2496c     01 02 06 F5 | 	and	_var02, #1
24970     1F 02 66 F0 | 	shl	_var02, #31
24974     01 15 42 F5 | 	or	arg02, _var02
24978     01 00 46 F0 | 	shr	_var01, #1
2497c     97 1E 48 FB | 	callpa	#(@LR__3632-@LR__3631)>>2,fcache_load_ptr_
24980                 | LR__3631
24980     00 16 56 F2 | 	cmps	arg03, #0 wc
24984     34 00 90 3D |  if_ae	jmp	#LR__3633
24988     00 00 0E F2 | 	cmp	_var01, #0 wz
2498c     2C 00 90 AD |  if_e	jmp	#LR__3633
24990     0A 13 02 F6 | 	mov	arg01, arg02
24994     01 12 06 F5 | 	and	arg01, #1
24998     01 16 06 F1 | 	add	arg03, #1
2499c     01 14 46 F0 | 	shr	arg02, #1
249a0     00 03 02 F6 | 	mov	_var02, _var01
249a4     01 02 06 F5 | 	and	_var02, #1
249a8     1F 02 66 F0 | 	shl	_var02, #31
249ac     01 15 42 F5 | 	or	arg02, _var02
249b0     09 15 42 F5 | 	or	arg02, arg01
249b4     01 00 46 F0 | 	shr	_var01, #1
249b8     C4 FF 9F FD | 	jmp	#LR__3631
249bc                 | LR__3632
249bc                 | LR__3633
249bc     00 16 56 F2 | 	cmps	arg03, #0 wc
249c0     18 00 90 3D |  if_ae	jmp	#LR__3635
249c4     00 14 0E F2 | 	cmp	arg02, #0 wz
249c8     6F 14 62 FD | 	wrnz	arg02
249cc     0C 00 90 FD | 	jmp	#LR__3635
249d0                 | LR__3634
249d0     17 01 06 F4 | 	bitl	_var01, #279
249d4     17 16 66 F0 | 	shl	arg03, #23
249d8     0B 01 42 F5 | 	or	_var01, arg03
249dc                 | LR__3635
249dc                 | LR__3636
249dc                 | LR__3637
249dc                 | LR__3638
249dc                 | LR__3639
249dc     01 00 CE F7 | 	test	_var01, #1 wz
249e0     01 14 46 55 |  if_ne	or	arg02, #1
249e4     0A 17 02 F6 | 	mov	arg03, arg02
249e8     00 02 06 F6 | 	mov	_var02, #0
249ec     FF FF 3F FF 
249f0     FF 15 06 F1 | 	add	arg02, ##2147483647
249f4     0B 15 12 F2 | 	cmp	arg02, arg03 wc
249f8     01 02 06 C6 |  if_b	mov	_var02, #1
249fc     01 01 02 F1 | 	add	_var01, _var02
24a00     01 18 CE F7 | 	test	arg04, #1 wz
24a04     1F 00 26 54 |  if_ne	bith	_var01, #31
24a08     00 FB 01 F6 | 	mov	result1, _var01
24a0c                 | __system__pack_0550_ret
24a0c     2D 00 64 FD | 	ret
24a10                 | 
24a10                 | __system___rxtxioctl_0640
24a10     00 15 0E F2 | 	cmp	arg02, #256 wz
24a14     0C 00 90 AD |  if_e	jmp	#LR__3640
24a18     01 15 0E F2 | 	cmp	arg02, #257 wz
24a1c     1C 00 90 AD |  if_e	jmp	#LR__3641
24a20     30 00 90 FD | 	jmp	#LR__3642
24a24                 | LR__3640
24a24     08 E6 05 F1 | 	add	ptr___system__dat__, #8
24a28     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
24a2c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
24a30     0B FB 61 FC | 	wrlong	result1, arg03
24a34     00 FA 05 F6 | 	mov	result1, #0
24a38     28 00 90 FD | 	jmp	#LR__3643
24a3c                 | LR__3641
24a3c     0B 13 02 FB | 	rdlong	arg01, arg03
24a40     08 E6 05 F1 | 	add	ptr___system__dat__, #8
24a44     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
24a48     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
24a4c     00 FA 05 F6 | 	mov	result1, #0
24a50     10 00 90 FD | 	jmp	#LR__3643
24a54                 | LR__3642
24a54     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24a58     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
24a5c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24a60     01 FA 65 F6 | 	neg	result1, #1
24a64                 | LR__3643
24a64                 | __system___rxtxioctl_0640_ret
24a64     2D 00 64 FD | 	ret
24a68                 | 
24a68                 | __system____dummy_flush_0641
24a68     00 FA 05 F6 | 	mov	result1, #0
24a6c                 | __system____dummy_flush_0641_ret
24a6c     2D 00 64 FD | 	ret
24a70                 | 
24a70                 | __system___vfsread
24a70     03 4A 05 F6 | 	mov	COUNT_, #3
24a74     A8 00 A0 FD | 	call	#pushregs_
24a78     28 F0 07 F1 | 	add	ptra, #40
24a7c     04 4E 05 F1 | 	add	fp, #4
24a80     A7 12 62 FC | 	wrlong	arg01, fp
24a84     04 4E 05 F1 | 	add	fp, #4
24a88     A7 14 62 FC | 	wrlong	arg02, fp
24a8c     04 4E 05 F1 | 	add	fp, #4
24a90     A7 16 62 FC | 	wrlong	arg03, fp
24a94     04 4E 85 F1 | 	sub	fp, #4
24a98     A7 FA 01 FB | 	rdlong	result1, fp
24a9c     14 4E 05 F1 | 	add	fp, #20
24aa0     A7 FA 61 FC | 	wrlong	result1, fp
24aa4     04 4E 05 F1 | 	add	fp, #4
24aa8     A7 00 68 FC | 	wrlong	#0, fp
24aac     1C 4E 85 F1 | 	sub	fp, #28
24ab0     A7 12 02 FB | 	rdlong	arg01, fp
24ab4     04 4E 85 F1 | 	sub	fp, #4
24ab8     08 12 06 F1 | 	add	arg01, #8
24abc     09 FB 01 FB | 	rdlong	result1, arg01
24ac0     01 FA CD F7 | 	test	result1, #1 wz
24ac4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
24ac8     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
24acc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
24ad0     01 FA 65 A6 |  if_e	neg	result1, #1
24ad4     74 02 90 AD |  if_e	jmp	#LR__3656
24ad8     04 4E 05 F1 | 	add	fp, #4
24adc     A7 12 02 FB | 	rdlong	arg01, fp
24ae0     04 4E 85 F1 | 	sub	fp, #4
24ae4     14 12 06 F1 | 	add	arg01, #20
24ae8     09 FB 09 FB | 	rdlong	result1, arg01 wz
24aec     B8 00 90 AD |  if_e	jmp	#LR__3651
24af0     04 4E 05 F1 | 	add	fp, #4
24af4     A7 12 02 FB | 	rdlong	arg01, fp
24af8     09 17 02 F6 | 	mov	arg03, arg01
24afc     14 16 06 F1 | 	add	arg03, #20
24b00     0B 1F 02 FB | 	rdlong	local01, arg03
24b04     0F 21 02 F6 | 	mov	local02, local01
24b08     13 1E 46 F7 | 	zerox	local01, #19
24b0c     14 20 46 F0 | 	shr	local02, #20
24b10     02 20 66 F0 | 	shl	local02, #2
24b14     ED 20 02 F1 | 	add	local02, __methods__
24b18     10 21 02 FB | 	rdlong	local02, local02
24b1c     04 4E 05 F1 | 	add	fp, #4
24b20     A7 14 02 FB | 	rdlong	arg02, fp
24b24     04 4E 05 F1 | 	add	fp, #4
24b28     A7 16 02 FB | 	rdlong	arg03, fp
24b2c     0C 4E 85 F1 | 	sub	fp, #12
24b30     F2 22 02 F6 | 	mov	local03, objptr
24b34     0F E5 01 F6 | 	mov	objptr, local01
24b38     2D 20 62 FD | 	call	local02
24b3c     11 E5 01 F6 | 	mov	objptr, local03
24b40     10 4E 05 F1 | 	add	fp, #16
24b44     A7 FA 61 FC | 	wrlong	result1, fp
24b48     10 4E 85 F1 | 	sub	fp, #16
24b4c     00 FA 55 F2 | 	cmps	result1, #0 wc
24b50     44 00 90 3D |  if_ae	jmp	#LR__3650
24b54     04 4E 05 F1 | 	add	fp, #4
24b58     A7 22 02 FB | 	rdlong	local03, fp
24b5c     11 1F 02 F6 | 	mov	local01, local03
24b60     08 22 06 F1 | 	add	local03, #8
24b64     11 21 02 FB | 	rdlong	local02, local03
24b68     20 20 46 F5 | 	or	local02, #32
24b6c     08 1E 06 F1 | 	add	local01, #8
24b70     0F 21 62 FC | 	wrlong	local02, local01
24b74     0C 4E 05 F1 | 	add	fp, #12
24b78     A7 12 0A FB | 	rdlong	arg01, fp wz
24b7c     10 4E 85 F1 | 	sub	fp, #16
24b80     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24b84     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
24b88     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24b8c     01 FA 65 56 |  if_ne	neg	result1, #1
24b90     00 FA 05 A6 |  if_e	mov	result1, #0
24b94     B4 01 90 FD | 	jmp	#LR__3656
24b98                 | LR__3650
24b98     10 4E 05 F1 | 	add	fp, #16
24b9c     A7 FA 01 FB | 	rdlong	result1, fp
24ba0     10 4E 85 F1 | 	sub	fp, #16
24ba4     A4 01 90 FD | 	jmp	#LR__3656
24ba8                 | LR__3651
24ba8     04 4E 05 F1 | 	add	fp, #4
24bac     A7 12 02 FB | 	rdlong	arg01, fp
24bb0     20 12 06 F1 | 	add	arg01, #32
24bb4     09 13 0A FB | 	rdlong	arg01, arg01 wz
24bb8     14 4E 05 F1 | 	add	fp, #20
24bbc     A7 12 62 FC | 	wrlong	arg01, fp
24bc0     18 4E 85 F1 | 	sub	fp, #24
24bc4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
24bc8     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
24bcc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
24bd0     01 FA 65 A6 |  if_e	neg	result1, #1
24bd4     74 01 90 AD |  if_e	jmp	#LR__3656
24bd8     04 4E 05 F1 | 	add	fp, #4
24bdc     A7 22 02 FB | 	rdlong	local03, fp
24be0     04 4E 85 F1 | 	sub	fp, #4
24be4     28 22 06 F1 | 	add	local03, #40
24be8     11 21 0A FB | 	rdlong	local02, local03 wz
24bec     7C 00 90 AD |  if_e	jmp	#LR__3653
24bf0     04 4E 05 F1 | 	add	fp, #4
24bf4     A7 12 02 FB | 	rdlong	arg01, fp
24bf8     09 23 02 F6 | 	mov	local03, arg01
24bfc     28 22 06 F1 | 	add	local03, #40
24c00     11 1F 02 FB | 	rdlong	local01, local03
24c04     0F 21 02 F6 | 	mov	local02, local01
24c08     13 1E 46 F7 | 	zerox	local01, #19
24c0c     14 20 46 F0 | 	shr	local02, #20
24c10     02 20 66 F0 | 	shl	local02, #2
24c14     ED 20 02 F1 | 	add	local02, __methods__
24c18     10 21 02 FB | 	rdlong	local02, local02
24c1c     20 4E 05 F1 | 	add	fp, #32
24c20     A7 16 02 F6 | 	mov	arg03, fp
24c24     24 4E 85 F1 | 	sub	fp, #36
24c28     00 15 06 F6 | 	mov	arg02, #256
24c2c     F2 22 02 F6 | 	mov	local03, objptr
24c30     0F E5 01 F6 | 	mov	objptr, local01
24c34     2D 20 62 FD | 	call	local02
24c38     11 E5 01 F6 | 	mov	objptr, local03
24c3c     10 4E 05 F1 | 	add	fp, #16
24c40     A7 FA 61 FC | 	wrlong	result1, fp
24c44     00 FA 4D F2 | 	cmps	result1, #0 wz
24c48     10 4E 85 F1 | 	sub	fp, #16
24c4c     1C 00 90 5D |  if_ne	jmp	#LR__3652
24c50     24 4E 05 F1 | 	add	fp, #36
24c54     A7 20 02 FB | 	rdlong	local02, fp
24c58     24 4E 85 F1 | 	sub	fp, #36
24c5c     02 20 CE F7 | 	test	local02, #2 wz
24c60     20 4E 05 51 |  if_ne	add	fp, #32
24c64     A7 02 68 5C |  if_ne	wrlong	#1, fp
24c68     20 4E 85 51 |  if_ne	sub	fp, #32
24c6c                 | LR__3652
24c6c                 | LR__3653
24c6c     10 4E 05 F1 | 	add	fp, #16
24c70     A7 00 68 FC | 	wrlong	#0, fp
24c74     10 4E 85 F1 | 	sub	fp, #16
24c78                 | LR__3654
24c78     0C 4E 05 F1 | 	add	fp, #12
24c7c     A7 22 02 FB | 	rdlong	local03, fp
24c80     0C 4E 85 F1 | 	sub	fp, #12
24c84     01 22 16 F2 | 	cmp	local03, #1 wc
24c88     B4 00 90 CD |  if_b	jmp	#LR__3655
24c8c     18 4E 05 F1 | 	add	fp, #24
24c90     A7 20 02 FB | 	rdlong	local02, fp
24c94     10 23 02 F6 | 	mov	local03, local02
24c98     13 22 46 F7 | 	zerox	local03, #19
24c9c     14 20 46 F0 | 	shr	local02, #20
24ca0     02 20 66 F0 | 	shl	local02, #2
24ca4     ED 20 02 F1 | 	add	local02, __methods__
24ca8     10 21 02 FB | 	rdlong	local02, local02
24cac     14 4E 85 F1 | 	sub	fp, #20
24cb0     A7 12 02 FB | 	rdlong	arg01, fp
24cb4     04 4E 85 F1 | 	sub	fp, #4
24cb8     F2 1E 02 F6 | 	mov	local01, objptr
24cbc     11 E5 01 F6 | 	mov	objptr, local03
24cc0     2D 20 62 FD | 	call	local02
24cc4     0F E5 01 F6 | 	mov	objptr, local01
24cc8     14 4E 05 F1 | 	add	fp, #20
24ccc     A7 FA 61 FC | 	wrlong	result1, fp
24cd0     14 4E 85 F1 | 	sub	fp, #20
24cd4     00 FA 55 F2 | 	cmps	result1, #0 wc
24cd8     64 00 90 CD |  if_b	jmp	#LR__3655
24cdc     1C 4E 05 F1 | 	add	fp, #28
24ce0     A7 22 02 FB | 	rdlong	local03, fp
24ce4     11 21 02 F6 | 	mov	local02, local03
24ce8     01 20 06 F1 | 	add	local02, #1
24cec     A7 20 62 FC | 	wrlong	local02, fp
24cf0     08 4E 85 F1 | 	sub	fp, #8
24cf4     A7 20 02 FB | 	rdlong	local02, fp
24cf8     11 21 42 FC | 	wrbyte	local02, local03
24cfc     04 4E 85 F1 | 	sub	fp, #4
24d00     A7 22 02 FB | 	rdlong	local03, fp
24d04     01 22 06 F1 | 	add	local03, #1
24d08     A7 22 62 FC | 	wrlong	local03, fp
24d0c     04 4E 85 F1 | 	sub	fp, #4
24d10     A7 22 02 FB | 	rdlong	local03, fp
24d14     01 22 86 F1 | 	sub	local03, #1
24d18     A7 22 62 FC | 	wrlong	local03, fp
24d1c     14 4E 05 F1 | 	add	fp, #20
24d20     A7 22 0A FB | 	rdlong	local03, fp wz
24d24     20 4E 85 F1 | 	sub	fp, #32
24d28     4C FF 9F AD |  if_e	jmp	#LR__3654
24d2c     14 4E 05 F1 | 	add	fp, #20
24d30     A7 20 02 FB | 	rdlong	local02, fp
24d34     14 4E 85 F1 | 	sub	fp, #20
24d38     0A 20 0E F2 | 	cmp	local02, #10 wz
24d3c     38 FF 9F 5D |  if_ne	jmp	#LR__3654
24d40                 | LR__3655
24d40     10 4E 05 F1 | 	add	fp, #16
24d44     A7 FA 01 FB | 	rdlong	result1, fp
24d48     10 4E 85 F1 | 	sub	fp, #16
24d4c                 | LR__3656
24d4c     A7 F0 03 F6 | 	mov	ptra, fp
24d50     B2 00 A0 FD | 	call	#popregs_
24d54                 | __system___vfsread_ret
24d54     2D 00 64 FD | 	ret
24d58                 | 
24d58                 | __system____default_filbuf
24d58     04 4A 05 F6 | 	mov	COUNT_, #4
24d5c     A8 00 A0 FD | 	call	#pushregs_
24d60     09 1F 02 F6 | 	mov	local01, arg01
24d64     0F 21 02 FB | 	rdlong	local02, local01
24d68     0C 20 06 F1 | 	add	local02, #12
24d6c     10 FB 09 FB | 	rdlong	result1, local02 wz
24d70     0C 20 86 F1 | 	sub	local02, #12
24d74     20 00 90 5D |  if_ne	jmp	#LR__3660
24d78     14 20 06 F1 | 	add	local02, #20
24d7c     10 FB 01 F6 | 	mov	result1, local02
24d80     04 20 86 F1 | 	sub	local02, #4
24d84     10 FB 61 FC | 	wrlong	result1, local02
24d88     04 20 86 F1 | 	sub	local02, #4
24d8c     02 00 80 FF 
24d90     10 01 68 FC | 	wrlong	##1024, local02
24d94     0C 20 86 F1 | 	sub	local02, #12
24d98                 | LR__3660
24d98     14 1E 06 F1 | 	add	local01, #20
24d9c     0F 23 02 FB | 	rdlong	local03, local01
24da0     11 25 02 F6 | 	mov	local04, local03
24da4     14 1E 86 F1 | 	sub	local01, #20
24da8     13 24 46 F7 | 	zerox	local04, #19
24dac     14 22 46 F0 | 	shr	local03, #20
24db0     02 22 66 F0 | 	shl	local03, #2
24db4     ED 22 02 F1 | 	add	local03, __methods__
24db8     11 23 02 FB | 	rdlong	local03, local03
24dbc     10 20 06 F1 | 	add	local02, #16
24dc0     10 15 02 FB | 	rdlong	arg02, local02
24dc4     04 20 86 F1 | 	sub	local02, #4
24dc8     10 17 02 FB | 	rdlong	arg03, local02
24dcc     0C 20 86 F1 | 	sub	local02, #12
24dd0     0F 13 02 F6 | 	mov	arg01, local01
24dd4     F2 1E 02 F6 | 	mov	local01, objptr
24dd8     12 E5 01 F6 | 	mov	objptr, local04
24ddc     2D 22 62 FD | 	call	local03
24de0     0F E5 01 F6 | 	mov	objptr, local01
24de4     FD 24 02 F6 | 	mov	local04, result1
24de8     00 24 56 F2 | 	cmps	local04, #0 wc
24dec     01 FA 65 C6 |  if_b	neg	result1, #1
24df0     28 00 90 CD |  if_b	jmp	#LR__3661
24df4     10 25 62 FC | 	wrlong	local04, local02
24df8     10 20 06 F1 | 	add	local02, #16
24dfc     10 23 02 FB | 	rdlong	local03, local02
24e00     0C 20 86 F1 | 	sub	local02, #12
24e04     10 23 62 FC | 	wrlong	local03, local02
24e08     04 20 06 F1 | 	add	local02, #4
24e0c     10 23 02 FB | 	rdlong	local03, local02
24e10     01 22 46 F5 | 	or	local03, #1
24e14     10 23 62 FC | 	wrlong	local03, local02
24e18     12 FB 01 F6 | 	mov	result1, local04
24e1c                 | LR__3661
24e1c     A7 F0 03 F6 | 	mov	ptra, fp
24e20     B2 00 A0 FD | 	call	#popregs_
24e24                 | __system____default_filbuf_ret
24e24     2D 00 64 FD | 	ret
24e28                 | 
24e28                 | __system__getlower_1026
24e28     41 12 56 F2 | 	cmps	arg01, #65 wc
24e2c     10 00 90 CD |  if_b	jmp	#LR__3670
24e30     5B 12 56 F2 | 	cmps	arg01, #91 wc
24e34     09 FB 01 C6 |  if_b	mov	result1, arg01
24e38     20 FA 05 C1 |  if_b	add	result1, #32
24e3c     04 00 90 CD |  if_b	jmp	#__system__getlower_1026_ret
24e40                 | LR__3670
24e40     09 FB 01 F6 | 	mov	result1, arg01
24e44                 | __system__getlower_1026_ret
24e44     2D 00 64 FD | 	ret
24e48                 | 
24e48                 | __system___pat_match
24e48     08 4A 05 F6 | 	mov	COUNT_, #8
24e4c     A8 00 A0 FD | 	call	#pushregs_
24e50     09 1F 02 F6 | 	mov	local01, arg01
24e54                 | LR__3680
24e54     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
24e58     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
24e5c     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
24e60     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
24e64     2C 00 90 AD |  if_e	jmp	#LR__3681
24e68     0A 13 C2 FA | 	rdbyte	arg01, arg02
24e6c     B8 FF BF FD | 	call	#__system__getlower_1026
24e70     FD 22 02 F6 | 	mov	local03, result1
24e74     0F 13 C2 FA | 	rdbyte	arg01, local01
24e78     AC FF BF FD | 	call	#__system__getlower_1026
24e7c     11 FB 09 F2 | 	cmp	result1, local03 wz
24e80     00 FA 05 56 |  if_ne	mov	result1, #0
24e84     FC 00 90 5D |  if_ne	jmp	#LR__3689
24e88     01 1E 06 F1 | 	add	local01, #1
24e8c     01 14 06 F1 | 	add	arg02, #1
24e90     C0 FF 9F FD | 	jmp	#LR__3680
24e94                 | LR__3681
24e94     0A 23 C2 FA | 	rdbyte	local03, arg02
24e98     2A 22 0E F2 | 	cmp	local03, #42 wz
24e9c     D4 00 90 5D |  if_ne	jmp	#LR__3688
24ea0     01 14 06 F1 | 	add	arg02, #1
24ea4     0A 21 C2 FA | 	rdbyte	local02, arg02
24ea8     01 14 86 F1 | 	sub	arg02, #1
24eac     2E 20 0E F2 | 	cmp	local02, #46 wz
24eb0     28 00 90 5D |  if_ne	jmp	#LR__3682
24eb4     02 14 06 F1 | 	add	arg02, #2
24eb8     0A 21 C2 FA | 	rdbyte	local02, arg02
24ebc     02 14 86 F1 | 	sub	arg02, #2
24ec0     2A 20 0E F2 | 	cmp	local02, #42 wz
24ec4     03 14 06 A1 |  if_e	add	arg02, #3
24ec8     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
24ecc     03 14 86 A1 |  if_e	sub	arg02, #3
24ed0     12 27 0A A6 |  if_e	mov	local05, local04 wz
24ed4     01 FA 05 A6 |  if_e	mov	result1, #1
24ed8     A8 00 90 AD |  if_e	jmp	#LR__3689
24edc                 | LR__3682
24edc     01 14 06 F1 | 	add	arg02, #1
24ee0     00 28 06 F6 | 	mov	local06, #0
24ee4     97 1E 48 FB | 	callpa	#(@LR__3685-@LR__3683)>>2,fcache_load_ptr_
24ee8                 | LR__3683
24ee8     14 2B 02 F6 | 	mov	local07, local06
24eec     0A 2B 02 F1 | 	add	local07, arg02
24ef0     15 2B CA FA | 	rdbyte	local07, local07 wz
24ef4     14 27 02 56 |  if_ne	mov	local05, local06
24ef8     01 26 06 51 |  if_ne	add	local05, #1
24efc     13 29 02 56 |  if_ne	mov	local06, local05
24f00     E4 FF 9F 5D |  if_ne	jmp	#LR__3683
24f04     00 2C 06 F6 | 	mov	local08, #0
24f08                 | LR__3684
24f08     16 2B 02 F6 | 	mov	local07, local08
24f0c     0F 2B 02 F1 | 	add	local07, local01
24f10     15 2B CA FA | 	rdbyte	local07, local07 wz
24f14     16 27 02 56 |  if_ne	mov	local05, local08
24f18     01 26 06 51 |  if_ne	add	local05, #1
24f1c     13 2D 02 56 |  if_ne	mov	local08, local05
24f20     E4 FF 9F 5D |  if_ne	jmp	#LR__3684
24f24                 | LR__3685
24f24     14 2D 52 F2 | 	cmps	local08, local06 wc
24f28     00 FA 05 C6 |  if_b	mov	result1, #0
24f2c     54 00 90 CD |  if_b	jmp	#LR__3689
24f30     16 21 02 F6 | 	mov	local02, local08
24f34     14 21 82 F1 | 	sub	local02, local06
24f38     10 1F 02 F1 | 	add	local01, local02
24f3c                 | LR__3686
24f3c     01 28 56 F2 | 	cmps	local06, #1 wc
24f40     30 00 90 CD |  if_b	jmp	#LR__3687
24f44     0F 13 C2 FA | 	rdbyte	arg01, local01
24f48     DC FE BF FD | 	call	#__system__getlower_1026
24f4c     FD 2C 02 F6 | 	mov	local08, result1
24f50     0A 13 C2 FA | 	rdbyte	arg01, arg02
24f54     D0 FE BF FD | 	call	#__system__getlower_1026
24f58     FD 2C 0A F2 | 	cmp	local08, result1 wz
24f5c     00 FA 05 56 |  if_ne	mov	result1, #0
24f60     20 00 90 5D |  if_ne	jmp	#LR__3689
24f64     01 1E 06 F1 | 	add	local01, #1
24f68     01 14 06 F1 | 	add	arg02, #1
24f6c     01 28 86 F1 | 	sub	local06, #1
24f70     C8 FF 9F FD | 	jmp	#LR__3686
24f74                 | LR__3687
24f74                 | LR__3688
24f74     0A 2D CA FA | 	rdbyte	local08, arg02 wz
24f78     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
24f7c     01 FA 05 A6 |  if_e	mov	result1, #1
24f80     00 FA 05 56 |  if_ne	mov	result1, #0
24f84                 | LR__3689
24f84     A7 F0 03 F6 | 	mov	ptra, fp
24f88     B2 00 A0 FD | 	call	#popregs_
24f8c                 | __system___pat_match_ret
24f8c     2D 00 64 FD | 	ret
24f90                 | 
24f90                 | _fatfs_cc_ff_uni2oem
24f90     00 00 06 F6 | 	mov	_var01, #0
24f94     80 12 16 F2 | 	cmp	arg01, #128 wc
24f98     09 01 02 C6 |  if_b	mov	_var01, arg01
24f9c     58 00 90 CD |  if_b	jmp	#LR__3694
24fa0     80 00 00 FF 
24fa4     00 12 16 F2 | 	cmp	arg01, ##65536 wc
24fa8     4C 00 90 3D |  if_ae	jmp	#LR__3693
24fac     0A FB 31 F9 | 	getword	result1, arg02, #0
24fb0     01 00 00 FF 
24fb4     52 FB 0D F2 | 	cmp	result1, ##850 wz
24fb8     3C 00 90 5D |  if_ne	jmp	#LR__3693
24fbc                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
24fbc     00 00 06 F6 | 	mov	_var01, #0
24fc0     97 14 48 FB | 	callpa	#(@LR__3691-@LR__3690)>>2,fcache_load_ptr_
24fc4                 | LR__3690
24fc4     00 FB 31 F9 | 	getword	result1, _var01, #0
24fc8     80 FA 15 F2 | 	cmp	result1, #128 wc
24fcc     1C 00 90 3D |  if_ae	jmp	#LR__3692
24fd0     00 FB 31 F9 | 	getword	result1, _var01, #0
24fd4     01 FA 65 F0 | 	shl	result1, #1
24fd8     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
24fdc     FD FA E1 FA | 	rdword	result1, result1
24fe0     FD 12 0A F2 | 	cmp	arg01, result1 wz
24fe4     01 00 06 51 |  if_ne	add	_var01, #1
24fe8     D8 FF 9F 5D |  if_ne	jmp	#LR__3690
24fec                 | LR__3691
24fec                 | LR__3692
24fec     00 01 32 F9 | 	getword	_var01, _var01, #0
24ff0     80 00 06 F1 | 	add	_var01, #128
24ff4     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
24ff8                 | LR__3693
24ff8                 | LR__3694
24ff8                 | ' 			c = (c + 0x80) & 0xFF;
24ff8                 | ' 		}
24ff8                 | ' 	}
24ff8                 | ' 
24ff8                 | ' 	return c;
24ff8     00 FB 01 F6 | 	mov	result1, _var01
24ffc                 | _fatfs_cc_ff_uni2oem_ret
24ffc     2D 00 64 FD | 	ret
25000                 | 
25000                 | _fatfs_cc_ff_oem2uni
25000     00 00 06 F6 | 	mov	_var01, #0
25004     09 FB 31 F9 | 	getword	result1, arg01, #0
25008     80 FA 15 F2 | 	cmp	result1, #128 wc
2500c     09 01 02 C6 |  if_b	mov	_var01, arg01
25010     2C 00 90 CD |  if_b	jmp	#LR__3701
25014     0A 15 32 F9 | 	getword	arg02, arg02, #0
25018     01 00 00 FF 
2501c     52 15 0E F2 | 	cmp	arg02, ##850 wz
25020     1C 00 90 5D |  if_ne	jmp	#LR__3700
25024     09 FB 31 F9 | 	getword	result1, arg01, #0
25028     00 FB 15 F2 | 	cmp	result1, #256 wc
2502c     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
25030     80 12 86 C1 |  if_b	sub	arg01, #128
25034     01 12 66 C0 |  if_b	shl	arg01, #1
25038     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2503c     09 01 E2 CA |  if_b	rdword	_var01, arg01
25040                 | LR__3700
25040                 | LR__3701
25040                 | ' 		}
25040                 | ' 	}
25040                 | ' 
25040                 | ' 	return c;
25040     00 FB 01 F6 | 	mov	result1, _var01
25044                 | _fatfs_cc_ff_oem2uni_ret
25044     2D 00 64 FD | 	ret
25048                 | 
25048                 | _fatfs_cc_ff_wtoupper
25048     09 01 02 F6 | 	mov	_var01, arg01
2504c     80 00 00 FF 
25050     00 00 16 F2 | 	cmp	_var01, ##65536 wc
25054     60 01 90 3D |  if_ae	jmp	#LR__3723
25058     00 03 02 F6 | 	mov	_var02, _var01
2505c     01 01 32 F9 | 	getword	_var01, _var02, #0
25060     08 00 00 FF 
25064     00 00 16 F2 | 	cmp	_var01, ##4096 wc
25068     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
2506c     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
25070     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
25074     01 00 00 3F 
25078     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
2507c     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
25080     01 00 00 3F 
25084     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
25088     02 07 02 F6 | 	mov	_var04, _var03
2508c                 | ' 		uc = (WORD)uni;
2508c                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2508c                 | ' 		for (;;) {
2508c                 | LR__3710
2508c     03 09 E2 FA | 	rdword	_var05, _var04
25090     04 05 02 F6 | 	mov	_var03, _var05
25094     0F 04 4E F7 | 	zerox	_var03, #15 wz
25098     02 06 06 F1 | 	add	_var04, #2
2509c     14 01 90 AD |  if_e	jmp	#LR__3722
250a0     01 05 32 F9 | 	getword	_var03, _var02, #0
250a4     04 01 32 F9 | 	getword	_var01, _var05, #0
250a8     00 05 12 F2 | 	cmp	_var03, _var01 wc
250ac     04 01 90 CD |  if_b	jmp	#LR__3722
250b0     03 0B E2 FA | 	rdword	_var06, _var04
250b4     05 0D 32 F9 | 	getword	_var07, _var06, #0
250b8     08 0C 46 F0 | 	shr	_var07, #8
250bc     05 0B 32 F9 | 	getword	_var06, _var06, #0
250c0     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
250c4     01 05 32 F9 | 	getword	_var03, _var02, #0
250c8     04 0F 32 F9 | 	getword	_var08, _var05, #0
250cc     05 01 32 F9 | 	getword	_var01, _var06, #0
250d0     00 0F 02 F1 | 	add	_var08, _var01
250d4     07 05 52 F2 | 	cmps	_var03, _var08 wc
250d8     02 06 06 F1 | 	add	_var04, #2
250dc     C4 00 90 3D |  if_ae	jmp	#LR__3721
250e0                 | ' 				switch (cmd) {
250e0     06 11 32 F9 | 	getword	_var09, _var07, #0
250e4     09 10 26 F3 | 	fle	_var09, #9
250e8     30 10 62 FD | 	jmprel	_var09
250ec                 | LR__3711
250ec     24 00 90 FD | 	jmp	#LR__3712
250f0     3C 00 90 FD | 	jmp	#LR__3713
250f4     54 00 90 FD | 	jmp	#LR__3714
250f8     5C 00 90 FD | 	jmp	#LR__3715
250fc     64 00 90 FD | 	jmp	#LR__3716
25100     6C 00 90 FD | 	jmp	#LR__3717
25104     74 00 90 FD | 	jmp	#LR__3718
25108     7C 00 90 FD | 	jmp	#LR__3719
2510c     84 00 90 FD | 	jmp	#LR__3720
25110     A0 00 90 FD | 	jmp	#LR__3722
25114                 | LR__3712
25114     01 03 32 F9 | 	getword	_var02, _var02, #0
25118     04 09 32 F9 | 	getword	_var05, _var05, #0
2511c     04 03 82 F1 | 	sub	_var02, _var05
25120     01 02 66 F0 | 	shl	_var02, #1
25124     03 03 02 F1 | 	add	_var02, _var04
25128     01 03 E2 FA | 	rdword	_var02, _var02
2512c     84 00 90 FD | 	jmp	#LR__3722
25130                 | LR__3713
25130     01 05 32 F9 | 	getword	_var03, _var02, #0
25134     01 03 32 F9 | 	getword	_var02, _var02, #0
25138     04 09 32 F9 | 	getword	_var05, _var05, #0
2513c     04 03 82 F1 | 	sub	_var02, _var05
25140     01 02 06 F5 | 	and	_var02, #1
25144     02 03 C2 F2 | 	subr	_var02, _var03
25148     68 00 90 FD | 	jmp	#LR__3722
2514c                 | LR__3714
2514c     01 03 32 F9 | 	getword	_var02, _var02, #0
25150     10 02 86 F1 | 	sub	_var02, #16
25154     5C 00 90 FD | 	jmp	#LR__3722
25158                 | LR__3715
25158     01 03 32 F9 | 	getword	_var02, _var02, #0
2515c     20 02 86 F1 | 	sub	_var02, #32
25160     50 00 90 FD | 	jmp	#LR__3722
25164                 | LR__3716
25164     01 03 32 F9 | 	getword	_var02, _var02, #0
25168     30 02 86 F1 | 	sub	_var02, #48
2516c     44 00 90 FD | 	jmp	#LR__3722
25170                 | LR__3717
25170     01 03 32 F9 | 	getword	_var02, _var02, #0
25174     1A 02 86 F1 | 	sub	_var02, #26
25178     38 00 90 FD | 	jmp	#LR__3722
2517c                 | LR__3718
2517c     01 03 32 F9 | 	getword	_var02, _var02, #0
25180     08 02 06 F1 | 	add	_var02, #8
25184     2C 00 90 FD | 	jmp	#LR__3722
25188                 | LR__3719
25188     01 03 32 F9 | 	getword	_var02, _var02, #0
2518c     50 02 86 F1 | 	sub	_var02, #80
25190     20 00 90 FD | 	jmp	#LR__3722
25194                 | LR__3720
25194     01 03 32 F9 | 	getword	_var02, _var02, #0
25198     0E 00 00 FF 
2519c     60 02 86 F1 | 	sub	_var02, ##7264
251a0                 | ' 				}
251a0                 | ' 				break;
251a0     10 00 90 FD | 	jmp	#LR__3722
251a4                 | LR__3721
251a4     0F 0C 4E F7 | 	zerox	_var07, #15 wz
251a8     02 0A 06 AA |  if_e	mul	_var06, #2
251ac     05 07 02 A1 |  if_e	add	_var04, _var06
251b0     D8 FE 9F FD | 	jmp	#LR__3710
251b4                 | LR__3722
251b4     01 01 32 F9 | 	getword	_var01, _var02, #0
251b8                 | LR__3723
251b8                 | ' 		}
251b8                 | ' 		uni = uc;
251b8                 | ' 	}
251b8                 | ' 
251b8                 | ' 	return uni;
251b8     00 FB 01 F6 | 	mov	result1, _var01
251bc                 | _fatfs_cc_ff_wtoupper_ret
251bc     2D 00 64 FD | 	ret
251c0                 | 
251c0                 | _fatfs_cc_strncpy
251c0     09 01 02 F6 | 	mov	_var01, arg01
251c4     97 12 48 FB | 	callpa	#(@LR__3731-@LR__3730)>>2,fcache_load_ptr_
251c8                 | ' 
251c8                 | ' 	dscan = dst;
251c8                 | ' 	sscan = src;
251c8                 | ' 	count = n;
251c8                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
251c8                 | LR__3730
251c8     01 16 86 F1 | 	sub	arg03, #1
251cc     00 16 56 F2 | 	cmps	arg03, #0 wc
251d0     18 00 90 CD |  if_b	jmp	#LR__3732
251d4     0A FB C1 FA | 	rdbyte	result1, arg02
251d8     00 FB 41 FC | 	wrbyte	result1, _var01
251dc     01 14 06 F1 | 	add	arg02, #1
251e0     00 FB C9 FA | 	rdbyte	result1, _var01 wz
251e4                 | ' 		continue;
251e4     01 00 06 F1 | 	add	_var01, #1
251e8     DC FF 9F 5D |  if_ne	jmp	#LR__3730
251ec                 | LR__3731
251ec                 | LR__3732
251ec     97 0C 48 FB | 	callpa	#(@LR__3734-@LR__3733)>>2,fcache_load_ptr_
251f0                 | ' 	while (--count >= 0)
251f0                 | LR__3733
251f0     01 16 86 F1 | 	sub	arg03, #1
251f4     00 16 56 F2 | 	cmps	arg03, #0 wc
251f8     00 03 02 36 |  if_ae	mov	_var02, _var01
251fc     01 00 06 31 |  if_ae	add	_var01, #1
25200     01 01 48 3C |  if_ae	wrbyte	#0, _var02
25204     E8 FF 9F 3D |  if_ae	jmp	#LR__3733
25208                 | LR__3734
25208                 | ' 		*dscan++ = '\0';
25208                 | ' 	return(dst);
25208     09 FB 01 F6 | 	mov	result1, arg01
2520c                 | _fatfs_cc_strncpy_ret
2520c     2D 00 64 FD | 	ret
25210                 | 
25210                 | _fatfs_cc_memcmp
25210                 | ' 	for (n = size; n > 0; n--)
25210     00 16 0E F2 | 	cmp	arg03, #0 wz
25214     28 00 90 AD |  if_e	jmp	#LR__3741
25218                 | LR__3740
25218     09 01 C2 FA | 	rdbyte	_var01, arg01
2521c     0A 03 C2 FA | 	rdbyte	_var02, arg02
25220     01 01 0A F2 | 	cmp	_var01, _var02 wz
25224     01 12 06 A1 |  if_e	add	arg01, #1
25228     01 14 06 A1 |  if_e	add	arg02, #1
2522c                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2522c     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
25230     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
25234     01 FB 81 51 |  if_ne	sub	result1, _var02
25238     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2523c     F6 17 6E FB | 	djnz	arg03, #LR__3740
25240                 | LR__3741
25240                 | ' 
25240                 | ' 	return(0);
25240     00 FA 05 F6 | 	mov	result1, #0
25244                 | _fatfs_cc_memcmp_ret
25244     2D 00 64 FD | 	ret
25248                 | 
25248                 | _fatfs_cc_strncmp
25248     09 01 0A F6 | 	mov	_var01, arg01 wz
2524c     14 00 90 5D |  if_ne	jmp	#LR__3750
25250                 | ' 		return scan2 ? -1 : 0;
25250     00 14 0E F2 | 	cmp	arg02, #0 wz
25254     01 02 66 56 |  if_ne	neg	_var02, #1
25258     00 02 06 A6 |  if_e	mov	_var02, #0
2525c     01 FB 01 F6 | 	mov	result1, _var02
25260     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
25264                 | LR__3750
25264     00 14 0E F2 | 	cmp	arg02, #0 wz
25268     01 FA 05 A6 |  if_e	mov	result1, #1
2526c     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
25270     0B 05 02 F6 | 	mov	_var03, arg03
25274     97 16 48 FB | 	callpa	#(@LR__3752-@LR__3751)>>2,fcache_load_ptr_
25278                 | ' 	count = n;
25278                 | ' 	do {
25278                 | LR__3751
25278     00 07 C2 FA | 	rdbyte	_var04, _var01
2527c     0A 09 02 F6 | 	mov	_var05, arg02
25280     04 0B C2 FA | 	rdbyte	_var06, _var05
25284     01 04 86 F1 | 	sub	_var03, #1
25288     00 04 56 F2 | 	cmps	_var03, #0 wc
2528c     01 00 06 F1 | 	add	_var01, #1
25290     01 14 06 F1 | 	add	arg02, #1
25294     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
25298     08 00 90 2D |  if_nc_and_z	jmp	#LR__3753
2529c     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
252a0     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3751
252a4                 | LR__3752
252a4                 | LR__3753
252a4     00 04 56 F2 | 	cmps	_var03, #0 wc
252a8                 | ' 		return(0);
252a8     00 FA 05 C6 |  if_b	mov	result1, #0
252ac     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
252b0     05 07 0A F2 | 	cmp	_var04, _var06 wz
252b4                 | ' 		return(0);
252b4     00 FA 05 A6 |  if_e	mov	result1, #0
252b8     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
252bc     00 06 0E F2 | 	cmp	_var04, #0 wz
252c0                 | ' 		return(-1);
252c0     01 FA 65 A6 |  if_e	neg	result1, #1
252c4     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
252c8     00 0A 0E F2 | 	cmp	_var06, #0 wz
252cc                 | ' 		return(1);
252cc     01 FA 05 A6 |  if_e	mov	result1, #1
252d0                 | ' 		return(c1 - c2);
252d0     03 FB 01 56 |  if_ne	mov	result1, _var04
252d4     05 FB 81 51 |  if_ne	sub	result1, _var06
252d8                 | _fatfs_cc_strncmp_ret
252d8     2D 00 64 FD | 	ret
252dc                 | 
252dc                 | _fatfs_cc_strchr
252dc                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
252dc                 | ' 	while ((c = *s++) != (char) charwanted)
252dc                 | LR__3760
252dc     09 01 02 F6 | 	mov	_var01, arg01
252e0     00 03 C2 FA | 	rdbyte	_var02, _var01
252e4     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
252e8     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
252ec     03 05 0A F2 | 	cmp	_var03, _var04 wz
252f0     01 12 06 F1 | 	add	arg01, #1
252f4     14 00 90 AD |  if_e	jmp	#LR__3761
252f8     01 05 02 F6 | 	mov	_var03, _var02
252fc     07 04 4E F7 | 	zerox	_var03, #7 wz
25300     00 FA 05 A6 |  if_e	mov	result1, #0
25304     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
25308     D0 FF 9F FD | 	jmp	#LR__3760
2530c                 | LR__3761
2530c                 | ' 	return((char *)--s);
2530c     01 12 86 F1 | 	sub	arg01, #1
25310     09 FB 01 F6 | 	mov	result1, arg01
25314                 | _fatfs_cc_strchr_ret
25314     2D 00 64 FD | 	ret
25318                 | 
25318                 | _fatfs_cc_disk_initialize
25318     04 4A 05 F6 | 	mov	COUNT_, #4
2531c     A8 00 A0 FD | 	call	#pushregs_
25320     40 F0 07 F1 | 	add	ptra, #64
25324     04 4E 05 F1 | 	add	fp, #4
25328     A7 12 42 FC | 	wrbyte	arg01, fp
2532c     01 00 00 FF 
25330     14 E4 05 F1 | 	add	objptr, ##532
25334     F2 18 02 FB | 	rdlong	arg04, objptr
25338     2C 4E 05 F1 | 	add	fp, #44
2533c     A7 18 62 FC | 	wrlong	arg04, fp
25340     04 E4 85 F1 | 	sub	objptr, #4
25344     F2 18 02 FB | 	rdlong	arg04, objptr
25348     04 4E 05 F1 | 	add	fp, #4
2534c     A7 18 62 FC | 	wrlong	arg04, fp
25350     08 E4 05 F1 | 	add	objptr, #8
25354     F2 18 02 FB | 	rdlong	arg04, objptr
25358     04 4E 05 F1 | 	add	fp, #4
2535c     A7 18 62 FC | 	wrlong	arg04, fp
25360     04 E4 05 F1 | 	add	objptr, #4
25364     F2 18 02 FB | 	rdlong	arg04, objptr
25368     04 4E 05 F1 | 	add	fp, #4
2536c     A7 18 62 FC | 	wrlong	arg04, fp
25370     04 E4 05 F1 | 	add	objptr, #4
25374     F2 02 48 FC | 	wrbyte	#1, objptr
25378     01 00 00 FF 
2537c     20 E4 85 F1 | 	sub	objptr, ##544
25380     38 4E 85 F1 | 	sub	fp, #56
25384     A7 18 CA FA | 	rdbyte	arg04, fp wz
25388     04 4E 85 F1 | 	sub	fp, #4
2538c                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2538c                 | '             return RES_NOTRDY;
2538c     03 FA 05 56 |  if_ne	mov	result1, #3
25390     D8 05 90 5D |  if_ne	jmp	#LR__3788
25394     13 00 00 FF 
25398     10 13 06 F6 | 	mov	arg01, ##10000
2539c     D4 9A BF FD | 	call	#__system___waitus
253a0     30 4E 05 F1 | 	add	fp, #48
253a4     A7 12 02 FB | 	rdlong	arg01, fp
253a8     09 01 08 FC | 	wrpin	#0, arg01
253ac     04 4E 05 F1 | 	add	fp, #4
253b0     A7 12 02 FB | 	rdlong	arg01, fp
253b4     09 01 08 FC | 	wrpin	#0, arg01
253b8     04 4E 05 F1 | 	add	fp, #4
253bc     A7 12 02 FB | 	rdlong	arg01, fp
253c0     09 01 08 FC | 	wrpin	#0, arg01
253c4     04 4E 05 F1 | 	add	fp, #4
253c8     A7 12 02 FB | 	rdlong	arg01, fp
253cc     09 00 80 FF 
253d0     09 01 08 FC | 	wrpin	##4608, arg01
253d4     0C 4E 85 F1 | 	sub	fp, #12
253d8     A7 12 02 FB | 	rdlong	arg01, fp
253dc     59 12 62 FD | 	drvh	arg01
253e0     04 4E 05 F1 | 	add	fp, #4
253e4     A7 12 02 FB | 	rdlong	arg01, fp
253e8     59 12 62 FD | 	drvh	arg01
253ec     04 4E 05 F1 | 	add	fp, #4
253f0     A7 12 02 FB | 	rdlong	arg01, fp
253f4     59 12 62 FD | 	drvh	arg01
253f8     04 4E 05 F1 | 	add	fp, #4
253fc     A7 12 02 FB | 	rdlong	arg01, fp
25400     59 12 62 FD | 	drvh	arg01
25404     20 4E 85 F1 | 	sub	fp, #32
25408     00 04 80 FF 
2540c     A7 20 68 FC | 	wrlong	##524304, fp
25410     04 4E 05 F1 | 	add	fp, #4
25414     20 03 80 FF 
25418     A7 90 68 FC | 	wrlong	##409672, fp
2541c     14 4E 05 F1 | 	add	fp, #20
25420     A7 1E 02 FB | 	rdlong	local01, fp
25424     18 4E 85 F1 | 	sub	fp, #24
25428     A7 16 02 FB | 	rdlong	arg03, fp
2542c     40 1E 62 FD | 	dirl	local01
25430     A0 03 80 FF 
25434     0F 91 08 FC | 	wrpin	##475208, local01
25438     0F 17 12 FC | 	wxpin	arg03, local01
2543c     0F 01 28 FC | 	wypin	#0, local01
25440     41 1E 62 FD | 	dirh	local01
25444     1C 4E 05 F1 | 	add	fp, #28
25448     A7 20 02 FB | 	rdlong	local02, fp
2544c     10 1F 82 F1 | 	sub	local01, local02
25450     07 1E 06 F5 | 	and	local01, #7
25454     18 1E 66 F0 | 	shl	local01, #24
25458     78 14 06 F6 | 	mov	arg02, #120
2545c     0F 15 42 F5 | 	or	arg02, local01
25460     14 4E 85 F1 | 	sub	fp, #20
25464     A7 14 62 FC | 	wrlong	arg02, fp
25468     14 4E 05 F1 | 	add	fp, #20
2546c     A7 12 02 FB | 	rdlong	arg01, fp
25470     10 14 26 F4 | 	bith	arg02, #16
25474     40 12 62 FD | 	dirl	arg01
25478     09 15 02 FC | 	wrpin	arg02, arg01
2547c     09 3F 18 FC | 	wxpin	#31, arg01
25480     FF FF FF FF 
25484     09 FF 2B FC | 	wypin	##-1, arg01
25488     41 12 62 FD | 	dirh	arg01
2548c     04 4E 85 F1 | 	sub	fp, #4
25490     A7 14 02 FB | 	rdlong	arg02, fp
25494     08 4E 05 F1 | 	add	fp, #8
25498     A7 22 02 FB | 	rdlong	local03, fp
2549c     11 15 82 F1 | 	sub	arg02, local03
254a0     07 14 06 F5 | 	and	arg02, #7
254a4     18 14 66 F0 | 	shl	arg02, #24
254a8     14 4E 85 F1 | 	sub	fp, #20
254ac     A7 14 62 FC | 	wrlong	arg02, fp
254b0     29 00 00 FF 
254b4     7A 14 46 F5 | 	or	arg02, ##21114
254b8     A7 14 62 FC | 	wrlong	arg02, fp
254bc     14 4E 05 F1 | 	add	fp, #20
254c0     A7 12 02 FB | 	rdlong	arg01, fp
254c4     40 12 62 FD | 	dirl	arg01
254c8     09 15 02 FC | 	wrpin	arg02, arg01
254cc     09 4F 18 FC | 	wxpin	#39, arg01
254d0     09 01 28 FC | 	wypin	#0, arg01
254d4     41 12 62 FD | 	dirh	arg01
254d8     28 4E 85 F1 | 	sub	fp, #40
254dc     A7 12 02 F6 | 	mov	arg01, fp
254e0     14 4E 85 F1 | 	sub	fp, #20
254e4     0A 14 06 F6 | 	mov	arg02, #10
254e8     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1060
254ec     00 12 06 F6 | 	mov	arg01, #0
254f0     00 14 06 F6 | 	mov	arg02, #0
254f4     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
254f8     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1070
254fc     64 12 06 F6 | 	mov	arg01, #100
25500     70 99 BF FD | 	call	#__system___waitus
25504     14 4E 05 F1 | 	add	fp, #20
25508     A7 12 02 F6 | 	mov	arg01, fp
2550c     14 4E 85 F1 | 	sub	fp, #20
25510     0A 14 06 F6 | 	mov	arg02, #10
25514     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1060
25518     0C 4E 05 F1 | 	add	fp, #12
2551c     A7 00 48 FC | 	wrbyte	#0, fp
25520     0C 4E 85 F1 | 	sub	fp, #12
25524     00 12 06 F6 | 	mov	arg01, #0
25528     00 14 06 F6 | 	mov	arg02, #0
2552c     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25530     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
25534     01 18 0E F2 | 	cmp	arg04, #1 wz
25538     B8 03 90 5D |  if_ne	jmp	#LR__3787
2553c     08 12 06 F6 | 	mov	arg01, #8
25540     AA 15 06 F6 | 	mov	arg02, #426
25544     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25548     FD FA E1 F8 | 	getbyte	result1, result1, #0
2554c     01 FA 0D F2 | 	cmp	result1, #1 wz
25550     98 01 90 5D |  if_ne	jmp	#LR__3773
25554     14 4E 05 F1 | 	add	fp, #20
25558     A7 12 02 F6 | 	mov	arg01, fp
2555c     14 4E 85 F1 | 	sub	fp, #20
25560     04 14 06 F6 | 	mov	arg02, #4
25564     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1060
25568     16 4E 05 F1 | 	add	fp, #22
2556c     A7 24 C2 FA | 	rdbyte	local04, fp
25570     16 4E 85 F1 | 	sub	fp, #22
25574     01 24 0E F2 | 	cmp	local04, #1 wz
25578     17 4E 05 A1 |  if_e	add	fp, #23
2557c     A7 22 C2 AA |  if_e	rdbyte	local03, fp
25580     17 4E 85 A1 |  if_e	sub	fp, #23
25584     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
25588     68 03 90 5D |  if_ne	jmp	#LR__3786
2558c                 | ' 				for (tmr = 1000; tmr; tmr--) {
2558c     18 4E 05 F1 | 	add	fp, #24
25590     01 00 80 FF 
25594     A7 D0 6B FC | 	wrlong	##1000, fp
25598     18 4E 85 F1 | 	sub	fp, #24
2559c                 | LR__3770
2559c     18 4E 05 F1 | 	add	fp, #24
255a0     A7 1E 0A FB | 	rdlong	local01, fp wz
255a4     18 4E 85 F1 | 	sub	fp, #24
255a8     3C 00 90 AD |  if_e	jmp	#LR__3771
255ac     A9 12 06 F6 | 	mov	arg01, #169
255b0     1E 14 C6 F9 | 	decod	arg02, #30
255b4     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
255b8     FD 24 02 F6 | 	mov	local04, result1
255bc     07 24 4E F7 | 	zerox	local04, #7 wz
255c0     24 00 90 AD |  if_e	jmp	#LR__3771
255c4     01 00 00 FF 
255c8     E8 13 06 F6 | 	mov	arg01, ##1000
255cc     A4 98 BF FD | 	call	#__system___waitus
255d0     18 4E 05 F1 | 	add	fp, #24
255d4     A7 24 02 FB | 	rdlong	local04, fp
255d8     01 24 86 F1 | 	sub	local04, #1
255dc     A7 24 62 FC | 	wrlong	local04, fp
255e0     18 4E 85 F1 | 	sub	fp, #24
255e4     B4 FF 9F FD | 	jmp	#LR__3770
255e8                 | LR__3771
255e8     18 4E 05 F1 | 	add	fp, #24
255ec     A7 24 0A FB | 	rdlong	local04, fp wz
255f0     18 4E 85 F1 | 	sub	fp, #24
255f4     4C 00 90 AD |  if_e	jmp	#LR__3772
255f8     3A 12 06 F6 | 	mov	arg01, #58
255fc     00 14 06 F6 | 	mov	arg02, #0
25600     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25604     FD 22 02 F6 | 	mov	local03, result1
25608     07 22 4E F7 | 	zerox	local03, #7 wz
2560c     34 00 90 5D |  if_ne	jmp	#LR__3772
25610     14 4E 05 F1 | 	add	fp, #20
25614     A7 12 02 F6 | 	mov	arg01, fp
25618     14 4E 85 F1 | 	sub	fp, #20
2561c     04 14 06 F6 | 	mov	arg02, #4
25620     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1060
25624     14 4E 05 F1 | 	add	fp, #20
25628     A7 1E C2 FA | 	rdbyte	local01, fp
2562c     40 1E CE F7 | 	test	local01, #64 wz
25630     0C 24 06 56 |  if_ne	mov	local04, #12
25634     04 24 06 A6 |  if_e	mov	local04, #4
25638     08 4E 85 F1 | 	sub	fp, #8
2563c     A7 24 42 FC | 	wrbyte	local04, fp
25640     0C 4E 85 F1 | 	sub	fp, #12
25644                 | LR__3772
25644     14 24 06 FB | 	rdlong	local04, #20
25648     18 4E 05 F1 | 	add	fp, #24
2564c     A7 24 62 FC | 	wrlong	local04, fp
25650     0C 4E 05 F1 | 	add	fp, #12
25654     A7 24 02 FB | 	rdlong	local04, fp
25658     1B 24 26 F4 | 	bith	local04, #27
2565c     A7 24 62 FC | 	wrlong	local04, fp
25660     0C 4E 85 F1 | 	sub	fp, #12
25664     A7 24 02 FB | 	rdlong	local04, fp
25668     18 4E 85 F1 | 	sub	fp, #24
2566c     68 78 04 FF 
25670     81 25 16 F2 | 	cmp	local04, ##150000001 wc
25674     1C 4E 05 C1 |  if_b	add	fp, #28
25678     00 01 80 CF 
2567c     A7 08 68 CC |  if_b	wrlong	##131076, fp
25680     1C 4E 85 C1 |  if_b	sub	fp, #28
25684     6C 02 90 CD |  if_b	jmp	#LR__3786
25688     18 4E 05 F1 | 	add	fp, #24
2568c     A7 24 02 FB | 	rdlong	local04, fp
25690     18 4E 85 F1 | 	sub	fp, #24
25694     E1 F5 05 FF 
25698     01 24 16 F2 | 	cmp	local04, ##200000001 wc
2569c     1C 4E 05 C1 |  if_b	add	fp, #28
256a0     00 01 80 CF 
256a4     A7 0A 68 CC |  if_b	wrlong	##131077, fp
256a8     1C 4E 85 C1 |  if_b	sub	fp, #28
256ac     44 02 90 CD |  if_b	jmp	#LR__3786
256b0     18 4E 05 F1 | 	add	fp, #24
256b4     A7 24 02 FB | 	rdlong	local04, fp
256b8     18 4E 85 F1 | 	sub	fp, #24
256bc     3B 58 08 FF 
256c0     01 24 16 F2 | 	cmp	local04, ##280000001 wc
256c4     1C 4E 05 C1 |  if_b	add	fp, #28
256c8     00 01 80 CF 
256cc     A7 0C 68 CC |  if_b	wrlong	##131078, fp
256d0     1C 4E 85 C1 |  if_b	sub	fp, #28
256d4     1C 02 90 CD |  if_b	jmp	#LR__3786
256d8     1C 4E 05 F1 | 	add	fp, #28
256dc     80 01 80 FF 
256e0     A7 10 68 FC | 	wrlong	##196616, fp
256e4     1C 4E 85 F1 | 	sub	fp, #28
256e8     08 02 90 FD | 	jmp	#LR__3786
256ec                 | LR__3773
256ec     A9 12 06 F6 | 	mov	arg01, #169
256f0     00 14 06 F6 | 	mov	arg02, #0
256f4     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
256f8     FD 24 E2 F8 | 	getbyte	local04, result1, #0
256fc     02 24 16 F2 | 	cmp	local04, #2 wc
25700     18 00 90 3D |  if_ae	jmp	#LR__3774
25704     0C 4E 05 F1 | 	add	fp, #12
25708     A7 04 48 FC | 	wrbyte	#2, fp
2570c     04 4E 05 F1 | 	add	fp, #4
25710     A7 52 49 FC | 	wrbyte	#169, fp
25714     10 4E 85 F1 | 	sub	fp, #16
25718     14 00 90 FD | 	jmp	#LR__3775
2571c                 | LR__3774
2571c     0C 4E 05 F1 | 	add	fp, #12
25720     A7 02 48 FC | 	wrbyte	#1, fp
25724     04 4E 05 F1 | 	add	fp, #4
25728     A7 02 48 FC | 	wrbyte	#1, fp
2572c     10 4E 85 F1 | 	sub	fp, #16
25730                 | LR__3775
25730                 | ' 				ty =  0x01 ; cmd =  (1) ;
25730                 | ' 			}
25730                 | ' 			for (tmr = 1000; tmr; tmr--) {
25730     18 4E 05 F1 | 	add	fp, #24
25734     01 00 80 FF 
25738     A7 D0 6B FC | 	wrlong	##1000, fp
2573c     18 4E 85 F1 | 	sub	fp, #24
25740                 | LR__3776
25740     18 4E 05 F1 | 	add	fp, #24
25744     A7 22 0A FB | 	rdlong	local03, fp wz
25748     18 4E 85 F1 | 	sub	fp, #24
2574c     44 00 90 AD |  if_e	jmp	#LR__3777
25750     10 4E 05 F1 | 	add	fp, #16
25754     A7 12 C2 FA | 	rdbyte	arg01, fp
25758     10 4E 85 F1 | 	sub	fp, #16
2575c     00 14 06 F6 | 	mov	arg02, #0
25760     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25764     FD 24 02 F6 | 	mov	local04, result1
25768     07 24 4E F7 | 	zerox	local04, #7 wz
2576c     24 00 90 AD |  if_e	jmp	#LR__3777
25770     01 00 00 FF 
25774     E8 13 06 F6 | 	mov	arg01, ##1000
25778     F8 96 BF FD | 	call	#__system___waitus
2577c     18 4E 05 F1 | 	add	fp, #24
25780     A7 24 02 FB | 	rdlong	local04, fp
25784     01 24 86 F1 | 	sub	local04, #1
25788     A7 24 62 FC | 	wrlong	local04, fp
2578c     18 4E 85 F1 | 	sub	fp, #24
25790     AC FF 9F FD | 	jmp	#LR__3776
25794                 | LR__3777
25794     18 4E 05 F1 | 	add	fp, #24
25798     A7 24 0A FB | 	rdlong	local04, fp wz
2579c     18 4E 85 F1 | 	sub	fp, #24
257a0     14 00 90 AD |  if_e	jmp	#LR__3778
257a4     10 12 06 F6 | 	mov	arg01, #16
257a8     09 14 C6 F9 | 	decod	arg02, #9
257ac     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1084
257b0     07 FA 4D F7 | 	zerox	result1, #7 wz
257b4     0C 00 90 AD |  if_e	jmp	#LR__3779
257b8                 | LR__3778
257b8     0C 4E 05 F1 | 	add	fp, #12
257bc     A7 00 48 FC | 	wrbyte	#0, fp
257c0     0C 4E 85 F1 | 	sub	fp, #12
257c4                 | LR__3779
257c4     14 24 06 FB | 	rdlong	local04, #20
257c8     18 4E 05 F1 | 	add	fp, #24
257cc     A7 24 62 FC | 	wrlong	local04, fp
257d0     18 4E 85 F1 | 	sub	fp, #24
257d4     F0 FA 02 FF 
257d8     01 25 16 F2 | 	cmp	local04, ##100000001 wc
257dc     18 00 90 3D |  if_ae	jmp	#LR__3780
257e0     24 4E 05 F1 | 	add	fp, #36
257e4     A7 24 02 FB | 	rdlong	local04, fp
257e8     1B 24 26 F4 | 	bith	local04, #27
257ec     A7 24 62 FC | 	wrlong	local04, fp
257f0     24 4E 85 F1 | 	sub	fp, #36
257f4     2C 00 90 FD | 	jmp	#LR__3781
257f8                 | LR__3780
257f8     18 4E 05 F1 | 	add	fp, #24
257fc     A7 24 02 FB | 	rdlong	local04, fp
25800     18 4E 85 F1 | 	sub	fp, #24
25804     E1 F5 05 FF 
25808     01 24 16 F2 | 	cmp	local04, ##200000001 wc
2580c     24 4E 05 C1 |  if_b	add	fp, #36
25810     A7 24 02 CB |  if_b	rdlong	local04, fp
25814     80 00 04 CF 
25818     00 24 46 C5 |  if_b	or	local04, ##134283264
2581c     A7 24 62 CC |  if_b	wrlong	local04, fp
25820     24 4E 85 C1 |  if_b	sub	fp, #36
25824                 | LR__3781
25824     18 4E 05 F1 | 	add	fp, #24
25828     A7 24 02 FB | 	rdlong	local04, fp
2582c     18 4E 85 F1 | 	sub	fp, #24
25830     F0 FA 02 FF 
25834     01 25 16 F2 | 	cmp	local04, ##100000001 wc
25838     1C 4E 05 C1 |  if_b	add	fp, #28
2583c     00 01 80 CF 
25840     A7 08 68 CC |  if_b	wrlong	##131076, fp
25844     1C 4E 85 C1 |  if_b	sub	fp, #28
25848     A8 00 90 CD |  if_b	jmp	#LR__3785
2584c     18 4E 05 F1 | 	add	fp, #24
25850     A7 24 02 FB | 	rdlong	local04, fp
25854     18 4E 85 F1 | 	sub	fp, #24
25858     68 78 04 FF 
2585c     81 25 16 F2 | 	cmp	local04, ##150000001 wc
25860     1C 4E 05 C1 |  if_b	add	fp, #28
25864     80 01 80 CF 
25868     A7 0C 68 CC |  if_b	wrlong	##196614, fp
2586c     1C 4E 85 C1 |  if_b	sub	fp, #28
25870     80 00 90 CD |  if_b	jmp	#LR__3784
25874     18 4E 05 F1 | 	add	fp, #24
25878     A7 24 02 FB | 	rdlong	local04, fp
2587c     18 4E 85 F1 | 	sub	fp, #24
25880     E1 F5 05 FF 
25884     01 24 16 F2 | 	cmp	local04, ##200000001 wc
25888     1C 4E 05 C1 |  if_b	add	fp, #28
2588c     00 02 80 CF 
25890     A7 10 68 CC |  if_b	wrlong	##262152, fp
25894     1C 4E 85 C1 |  if_b	sub	fp, #28
25898     58 00 90 CD |  if_b	jmp	#LR__3783
2589c     18 4E 05 F1 | 	add	fp, #24
258a0     A7 24 02 FB | 	rdlong	local04, fp
258a4     18 4E 85 F1 | 	sub	fp, #24
258a8     59 73 07 FF 
258ac     81 24 16 F2 | 	cmp	local04, ##250000001 wc
258b0     1C 4E 05 C1 |  if_b	add	fp, #28
258b4     80 02 80 CF 
258b8     A7 14 68 CC |  if_b	wrlong	##327690, fp
258bc     1C 4E 85 C1 |  if_b	sub	fp, #28
258c0     30 00 90 CD |  if_b	jmp	#LR__3782
258c4     18 4E 05 F1 | 	add	fp, #24
258c8     A7 24 02 FB | 	rdlong	local04, fp
258cc     18 4E 85 F1 | 	sub	fp, #24
258d0     D1 F0 08 FF 
258d4     01 25 16 F2 | 	cmp	local04, ##300000001 wc
258d8     1C 4E 05 C1 |  if_b	add	fp, #28
258dc     00 03 80 CF 
258e0     A7 18 68 CC |  if_b	wrlong	##393228, fp
258e4     1C 4E 85 F3 | 	sumc	fp, #28
258e8     80 03 80 3F 
258ec     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
258f0     1C 4E 85 31 |  if_ae	sub	fp, #28
258f4                 | LR__3782
258f4                 | LR__3783
258f4                 | LR__3784
258f4                 | LR__3785
258f4                 | LR__3786
258f4                 | LR__3787
258f4     0C 4E 05 F1 | 	add	fp, #12
258f8     A7 24 C2 FA | 	rdbyte	local04, fp
258fc     01 00 00 FF 
25900     21 E4 05 F1 | 	add	objptr, ##545
25904     F2 24 42 FC | 	wrbyte	local04, objptr
25908     A7 1E CA FA | 	rdbyte	local01, fp wz
2590c     00 24 06 56 |  if_ne	mov	local04, #0
25910     01 24 06 A6 |  if_e	mov	local04, #1
25914     20 4E 05 F1 | 	add	fp, #32
25918     A7 24 42 FC | 	wrbyte	local04, fp
2591c     A7 24 C2 FA | 	rdbyte	local04, fp
25920     2C 4E 85 F1 | 	sub	fp, #44
25924     01 E4 85 F1 | 	sub	objptr, #1
25928     F2 24 42 FC | 	wrbyte	local04, objptr
2592c     01 00 00 FF 
25930     20 E4 85 F1 | 	sub	objptr, ##544
25934     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1070
25938     34 4E 05 F1 | 	add	fp, #52
2593c     A7 12 02 FB | 	rdlong	arg01, fp
25940     18 4E 85 F1 | 	sub	fp, #24
25944     A7 14 02 FB | 	rdlong	arg02, fp
25948     09 15 12 FC | 	wxpin	arg02, arg01
2594c     1C 4E 05 F1 | 	add	fp, #28
25950     A7 12 02 FB | 	rdlong	arg01, fp
25954     14 4E 85 F1 | 	sub	fp, #20
25958     A7 14 02 FB | 	rdlong	arg02, fp
2595c     09 15 02 FC | 	wrpin	arg02, arg01
25960                 | ' 
25960                 | ' 		}
25960                 | ' 	}
25960                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
25960                 | ' 	CardType = ty;
25960                 | ' 	s = ty ? 0 :  0x01 ;
25960                 | ' 	Stat = s;
25960                 | ' 
25960                 | ' 	deselect();
25960                 | ' 
25960                 | ' 
25960                 | ' 	_wxpin( PIN_CLK, ck_div );
25960                 | ' 	_wrpin( PIN_DI, spm_tx );
25960                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
25960                 | ' 	return s;
25960     08 4E 05 F1 | 	add	fp, #8
25964     A7 FA C1 FA | 	rdbyte	result1, fp
25968     2C 4E 85 F1 | 	sub	fp, #44
2596c                 | LR__3788
2596c     A7 F0 03 F6 | 	mov	ptra, fp
25970     B2 00 A0 FD | 	call	#popregs_
25974                 | _fatfs_cc_disk_initialize_ret
25974     2D 00 64 FD | 	ret
25978                 | 
25978                 | _fatfs_cc_disk_read
25978     05 4A 05 F6 | 	mov	COUNT_, #5
2597c     A8 00 A0 FD | 	call	#pushregs_
25980     0A 1F 02 F6 | 	mov	local01, arg02
25984     0B 21 02 F6 | 	mov	local02, arg03
25988     0C 23 02 F6 | 	mov	local03, arg04
2598c     00 12 0E F2 | 	cmp	arg01, #0 wz
25990     01 FA 05 56 |  if_ne	mov	result1, #1
25994                 | ' 
25994                 | ' 	return Stat;
25994     01 00 00 AF 
25998     20 E4 05 A1 |  if_e	add	objptr, ##544
2599c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
259a0     01 00 00 AF 
259a4     20 E4 85 A1 |  if_e	sub	objptr, ##544
259a8     FD FA E1 F8 | 	getbyte	result1, result1, #0
259ac     01 FA CD F7 | 	test	result1, #1 wz
259b0     03 FA 05 56 |  if_ne	mov	result1, #3
259b4     84 00 90 5D |  if_ne	jmp	#LR__3792
259b8     01 00 00 FF 
259bc     21 E4 05 F1 | 	add	objptr, ##545
259c0     F2 24 C2 FA | 	rdbyte	local04, objptr
259c4     01 00 00 FF 
259c8     21 E4 85 F1 | 	sub	objptr, ##545
259cc     08 24 CE F7 | 	test	local04, #8 wz
259d0     09 20 66 A0 |  if_e	shl	local02, #9
259d4     02 22 16 F2 | 	cmp	local03, #2 wc
259d8     12 24 06 36 |  if_ae	mov	local04, #18
259dc     11 24 06 C6 |  if_b	mov	local04, #17
259e0     10 15 02 F6 | 	mov	arg02, local02
259e4     12 13 02 F6 | 	mov	arg01, local04
259e8     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1084
259ec     FD 26 02 F6 | 	mov	local05, result1
259f0     07 26 4E F7 | 	zerox	local05, #7 wz
259f4     30 00 90 5D |  if_ne	jmp	#LR__3791
259f8                 | ' 		do {
259f8                 | LR__3790
259f8     0F 13 02 F6 | 	mov	arg01, local01
259fc     09 14 C6 F9 | 	decod	arg02, #9
25a00     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1078
25a04     00 FA 0D F2 | 	cmp	result1, #0 wz
25a08     01 00 00 5F 
25a0c     00 1E 06 51 |  if_ne	add	local01, ##512
25a10     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3790
25a14     12 25 E2 F8 | 	getbyte	local04, local04, #0
25a18     12 24 0E F2 | 	cmp	local04, #18 wz
25a1c     0C 12 06 A6 |  if_e	mov	arg01, #12
25a20     00 14 06 A6 |  if_e	mov	arg02, #0
25a24     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1084
25a28                 | LR__3791
25a28     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1070
25a2c                 | ' 	}
25a2c                 | ' 	deselect();
25a2c                 | ' 
25a2c                 | ' 	return count ? RES_ERROR : RES_OK;
25a2c     00 22 0E F2 | 	cmp	local03, #0 wz
25a30     01 26 06 56 |  if_ne	mov	local05, #1
25a34     00 26 06 A6 |  if_e	mov	local05, #0
25a38     13 FB 01 F6 | 	mov	result1, local05
25a3c                 | LR__3792
25a3c     A7 F0 03 F6 | 	mov	ptra, fp
25a40     B2 00 A0 FD | 	call	#popregs_
25a44                 | _fatfs_cc_disk_read_ret
25a44     2D 00 64 FD | 	ret
25a48                 | 
25a48                 | _fatfs_cc_disk_write
25a48     04 4A 05 F6 | 	mov	COUNT_, #4
25a4c     A8 00 A0 FD | 	call	#pushregs_
25a50     0A 1F 02 F6 | 	mov	local01, arg02
25a54     0C 21 02 F6 | 	mov	local02, arg04
25a58     0B 23 02 F6 | 	mov	local03, arg03
25a5c     00 12 0E F2 | 	cmp	arg01, #0 wz
25a60     01 FA 05 56 |  if_ne	mov	result1, #1
25a64                 | ' 
25a64                 | ' 	return Stat;
25a64     01 00 00 AF 
25a68     20 E4 05 A1 |  if_e	add	objptr, ##544
25a6c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
25a70     01 00 00 AF 
25a74     20 E4 85 A1 |  if_e	sub	objptr, ##544
25a78     FD FA E1 F8 | 	getbyte	result1, result1, #0
25a7c     01 FA CD F7 | 	test	result1, #1 wz
25a80     03 FA 05 56 |  if_ne	mov	result1, #3
25a84     D4 00 90 5D |  if_ne	jmp	#LR__3804
25a88     01 00 00 FF 
25a8c     21 E4 05 F1 | 	add	objptr, ##545
25a90     F2 16 C2 FA | 	rdbyte	arg03, objptr
25a94     01 00 00 FF 
25a98     21 E4 85 F1 | 	sub	objptr, ##545
25a9c     08 16 CE F7 | 	test	arg03, #8 wz
25aa0     09 22 66 A0 |  if_e	shl	local03, #9
25aa4     01 20 0E F2 | 	cmp	local02, #1 wz
25aa8     30 00 90 5D |  if_ne	jmp	#LR__3800
25aac     18 12 06 F6 | 	mov	arg01, #24
25ab0     11 15 02 F6 | 	mov	arg02, local03
25ab4     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25ab8     FD 24 02 F6 | 	mov	local04, result1
25abc     07 24 4E F7 | 	zerox	local04, #7 wz
25ac0     84 00 90 5D |  if_ne	jmp	#LR__3803
25ac4     0F 13 02 F6 | 	mov	arg01, local01
25ac8     FE 14 06 F6 | 	mov	arg02, #254
25acc     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1080
25ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
25ad4     00 20 06 56 |  if_ne	mov	local02, #0
25ad8     6C 00 90 FD | 	jmp	#LR__3803
25adc                 | LR__3800
25adc     01 00 00 FF 
25ae0     21 E4 05 F1 | 	add	objptr, ##545
25ae4     F2 24 C2 FA | 	rdbyte	local04, objptr
25ae8     01 00 00 FF 
25aec     21 E4 85 F1 | 	sub	objptr, ##545
25af0     06 24 CE F7 | 	test	local04, #6 wz
25af4     97 12 06 56 |  if_ne	mov	arg01, #151
25af8     10 15 02 56 |  if_ne	mov	arg02, local02
25afc     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1084
25b00     11 15 02 F6 | 	mov	arg02, local03
25b04     19 12 06 F6 | 	mov	arg01, #25
25b08     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25b0c     FD 24 02 F6 | 	mov	local04, result1
25b10     07 24 4E F7 | 	zerox	local04, #7 wz
25b14     30 00 90 5D |  if_ne	jmp	#LR__3802
25b18                 | ' 			do {
25b18                 | LR__3801
25b18     0F 13 02 F6 | 	mov	arg01, local01
25b1c     FC 14 06 F6 | 	mov	arg02, #252
25b20     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1080
25b24     00 FA 0D F2 | 	cmp	result1, #0 wz
25b28     01 00 00 5F 
25b2c     00 1E 06 51 |  if_ne	add	local01, ##512
25b30     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3801
25b34     00 12 06 F6 | 	mov	arg01, #0
25b38     FD 14 06 F6 | 	mov	arg02, #253
25b3c     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1080
25b40     00 FA 0D F2 | 	cmp	result1, #0 wz
25b44     01 20 06 A6 |  if_e	mov	local02, #1
25b48                 | LR__3802
25b48                 | LR__3803
25b48     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1070
25b4c                 | ' 				count = 1;
25b4c                 | ' 		}
25b4c                 | ' 	}
25b4c                 | ' 	deselect();
25b4c                 | ' 
25b4c                 | ' 	return count ? RES_ERROR : RES_OK;
25b4c     00 20 0E F2 | 	cmp	local02, #0 wz
25b50     01 24 06 56 |  if_ne	mov	local04, #1
25b54     00 24 06 A6 |  if_e	mov	local04, #0
25b58     12 FB 01 F6 | 	mov	result1, local04
25b5c                 | LR__3804
25b5c     A7 F0 03 F6 | 	mov	ptra, fp
25b60     B2 00 A0 FD | 	call	#popregs_
25b64                 | _fatfs_cc_disk_write_ret
25b64     2D 00 64 FD | 	ret
25b68                 | 
25b68                 | _fatfs_cc_disk_ioctl
25b68     01 4A 05 F6 | 	mov	COUNT_, #1
25b6c     A8 00 A0 FD | 	call	#pushregs_
25b70     30 F0 07 F1 | 	add	ptra, #48
25b74     04 4E 05 F1 | 	add	fp, #4
25b78     A7 12 42 FC | 	wrbyte	arg01, fp
25b7c     04 4E 05 F1 | 	add	fp, #4
25b80     A7 14 42 FC | 	wrbyte	arg02, fp
25b84     04 4E 05 F1 | 	add	fp, #4
25b88     A7 16 62 FC | 	wrlong	arg03, fp
25b8c     08 4E 85 F1 | 	sub	fp, #8
25b90     A7 12 CA FA | 	rdbyte	arg01, fp wz
25b94     04 4E 85 F1 | 	sub	fp, #4
25b98     01 FA 05 56 |  if_ne	mov	result1, #1
25b9c                 | ' 
25b9c                 | ' 	return Stat;
25b9c     01 00 00 AF 
25ba0     20 E4 05 A1 |  if_e	add	objptr, ##544
25ba4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
25ba8     01 00 00 AF 
25bac     20 E4 85 A1 |  if_e	sub	objptr, ##544
25bb0     FD FA E1 F8 | 	getbyte	result1, result1, #0
25bb4     01 FA CD F7 | 	test	result1, #1 wz
25bb8     03 FA 05 56 |  if_ne	mov	result1, #3
25bbc     E4 01 90 5D |  if_ne	jmp	#LR__3818
25bc0     10 4E 05 F1 | 	add	fp, #16
25bc4     A7 02 68 FC | 	wrlong	#1, fp
25bc8                 | ' 
25bc8                 | ' 	res = RES_ERROR;
25bc8                 | ' 	switch (ctrl) {
25bc8     08 4E 85 F1 | 	sub	fp, #8
25bcc     A7 1E C2 FA | 	rdbyte	local01, fp
25bd0     08 4E 85 F1 | 	sub	fp, #8
25bd4     04 1E 26 F3 | 	fle	local01, #4
25bd8     30 1E 62 FD | 	jmprel	local01
25bdc                 | LR__3810
25bdc     10 00 90 FD | 	jmp	#LR__3811
25be0     24 00 90 FD | 	jmp	#LR__3812
25be4     A0 01 90 FD | 	jmp	#LR__3816
25be8     80 01 90 FD | 	jmp	#LR__3815
25bec     98 01 90 FD | 	jmp	#LR__3816
25bf0                 | LR__3811
25bf0     B4 79 B0 FD | 	call	#_fatfs_cc_select_1074
25bf4     00 FA 0D F2 | 	cmp	result1, #0 wz
25bf8     10 4E 05 51 |  if_ne	add	fp, #16
25bfc     A7 00 68 5C |  if_ne	wrlong	#0, fp
25c00     10 4E 85 51 |  if_ne	sub	fp, #16
25c04                 | ' 			break;
25c04     8C 01 90 FD | 	jmp	#LR__3817
25c08                 | LR__3812
25c08     09 12 06 F6 | 	mov	arg01, #9
25c0c     00 14 06 F6 | 	mov	arg02, #0
25c10     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1084
25c14     FD 1E 02 F6 | 	mov	local01, result1
25c18     07 1E 4E F7 | 	zerox	local01, #7 wz
25c1c     74 01 90 5D |  if_ne	jmp	#LR__3817
25c20     18 4E 05 F1 | 	add	fp, #24
25c24     A7 12 02 F6 | 	mov	arg01, fp
25c28     18 4E 85 F1 | 	sub	fp, #24
25c2c     10 14 06 F6 | 	mov	arg02, #16
25c30     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1078
25c34     00 FA 0D F2 | 	cmp	result1, #0 wz
25c38     58 01 90 AD |  if_e	jmp	#LR__3817
25c3c     18 4E 05 F1 | 	add	fp, #24
25c40     A7 1E C2 FA | 	rdbyte	local01, fp
25c44     18 4E 85 F1 | 	sub	fp, #24
25c48     06 1E 46 F0 | 	shr	local01, #6
25c4c     01 1E 0E F2 | 	cmp	local01, #1 wz
25c50     5C 00 90 5D |  if_ne	jmp	#LR__3813
25c54     21 4E 05 F1 | 	add	fp, #33
25c58     A7 1E C2 FA | 	rdbyte	local01, fp
25c5c     01 4E 85 F1 | 	sub	fp, #1
25c60     A7 FA C1 FA | 	rdbyte	result1, fp
25c64     FD FA 31 F9 | 	getword	result1, result1, #0
25c68     08 FA 65 F0 | 	shl	result1, #8
25c6c     FD 1E 02 F1 | 	add	local01, result1
25c70     01 4E 85 F1 | 	sub	fp, #1
25c74     A7 FA C1 FA | 	rdbyte	result1, fp
25c78     3F FA 05 F5 | 	and	result1, #63
25c7c     10 FA 65 F0 | 	shl	result1, #16
25c80     FD 1E 02 F1 | 	add	local01, result1
25c84     01 1E 06 F1 | 	add	local01, #1
25c88     09 4E 05 F1 | 	add	fp, #9
25c8c     A7 1E 62 FC | 	wrlong	local01, fp
25c90     1C 4E 85 F1 | 	sub	fp, #28
25c94     A7 1E 02 FB | 	rdlong	local01, fp
25c98     1C 4E 05 F1 | 	add	fp, #28
25c9c     A7 FA 01 FB | 	rdlong	result1, fp
25ca0     28 4E 85 F1 | 	sub	fp, #40
25ca4     0A FA 65 F0 | 	shl	result1, #10
25ca8     0F FB 61 FC | 	wrlong	result1, local01
25cac     AC 00 90 FD | 	jmp	#LR__3814
25cb0                 | LR__3813
25cb0     1D 4E 05 F1 | 	add	fp, #29
25cb4     A7 1E C2 FA | 	rdbyte	local01, fp
25cb8     0F 1F 42 F8 | 	getnib	local01, local01, #0
25cbc     05 4E 05 F1 | 	add	fp, #5
25cc0     A7 FA C1 FA | 	rdbyte	result1, fp
25cc4     80 FA 05 F5 | 	and	result1, #128
25cc8     07 FA C5 F0 | 	sar	result1, #7
25ccc     FD 1E 02 F1 | 	add	local01, result1
25cd0     01 4E 85 F1 | 	sub	fp, #1
25cd4     A7 FA C1 FA | 	rdbyte	result1, fp
25cd8     03 FA 05 F5 | 	and	result1, #3
25cdc     01 FA 65 F0 | 	shl	result1, #1
25ce0     FD 1E 02 F1 | 	add	local01, result1
25ce4     02 1E 06 F1 | 	add	local01, #2
25ce8     0D 4E 85 F1 | 	sub	fp, #13
25cec     A7 1E 42 FC | 	wrbyte	local01, fp
25cf0     0C 4E 05 F1 | 	add	fp, #12
25cf4     A7 1E C2 FA | 	rdbyte	local01, fp
25cf8     06 1E 46 F0 | 	shr	local01, #6
25cfc     01 4E 85 F1 | 	sub	fp, #1
25d00     A7 FA C1 FA | 	rdbyte	result1, fp
25d04     FD FA 31 F9 | 	getword	result1, result1, #0
25d08     02 FA 65 F0 | 	shl	result1, #2
25d0c     FD 1E 02 F1 | 	add	local01, result1
25d10     01 4E 85 F1 | 	sub	fp, #1
25d14     A7 FA C1 FA | 	rdbyte	result1, fp
25d18     03 FA 05 F5 | 	and	result1, #3
25d1c     FD FA 31 F9 | 	getword	result1, result1, #0
25d20     0A FA 65 F0 | 	shl	result1, #10
25d24     FD 1E 02 F1 | 	add	local01, result1
25d28     01 1E 06 F1 | 	add	local01, #1
25d2c     0A 4E 05 F1 | 	add	fp, #10
25d30     A7 1E 62 FC | 	wrlong	local01, fp
25d34     1C 4E 85 F1 | 	sub	fp, #28
25d38     A7 1E 02 FB | 	rdlong	local01, fp
25d3c     1C 4E 05 F1 | 	add	fp, #28
25d40     A7 FA 01 FB | 	rdlong	result1, fp
25d44     14 4E 85 F1 | 	sub	fp, #20
25d48     A7 16 C2 FA | 	rdbyte	arg03, fp
25d4c     14 4E 85 F1 | 	sub	fp, #20
25d50     09 16 86 F1 | 	sub	arg03, #9
25d54     0B FB 61 F0 | 	shl	result1, arg03
25d58     0F FB 61 FC | 	wrlong	result1, local01
25d5c                 | LR__3814
25d5c     10 4E 05 F1 | 	add	fp, #16
25d60     A7 00 68 FC | 	wrlong	#0, fp
25d64     10 4E 85 F1 | 	sub	fp, #16
25d68                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
25d68                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
25d68                 | ' 					*(LBA_t*)buff = cs << (n - 9);
25d68                 | ' 				}
25d68                 | ' 				res = RES_OK;
25d68                 | ' 			}
25d68                 | ' 			break;
25d68     28 00 90 FD | 	jmp	#LR__3817
25d6c                 | LR__3815
25d6c     0C 4E 05 F1 | 	add	fp, #12
25d70     A7 1E 02 FB | 	rdlong	local01, fp
25d74     0F 01 69 FC | 	wrlong	#128, local01
25d78     04 4E 05 F1 | 	add	fp, #4
25d7c     A7 00 68 FC | 	wrlong	#0, fp
25d80     10 4E 85 F1 | 	sub	fp, #16
25d84                 | ' 			*(DWORD*)buff = 128;
25d84                 | ' 			res = RES_OK;
25d84                 | ' 			break;
25d84     0C 00 90 FD | 	jmp	#LR__3817
25d88                 | LR__3816
25d88     10 4E 05 F1 | 	add	fp, #16
25d8c     A7 08 68 FC | 	wrlong	#4, fp
25d90     10 4E 85 F1 | 	sub	fp, #16
25d94                 | LR__3817
25d94     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1070
25d98                 | ' 			res = RES_PARERR;
25d98                 | ' 	}
25d98                 | ' 
25d98                 | ' 	deselect();
25d98                 | ' 
25d98                 | ' 	return res;
25d98     10 4E 05 F1 | 	add	fp, #16
25d9c     A7 FA 01 FB | 	rdlong	result1, fp
25da0     10 4E 85 F1 | 	sub	fp, #16
25da4                 | LR__3818
25da4     A7 F0 03 F6 | 	mov	ptra, fp
25da8     B2 00 A0 FD | 	call	#popregs_
25dac                 | _fatfs_cc_disk_ioctl_ret
25dac     2D 00 64 FD | 	ret
25db0                 | 
25db0                 | _fatfs_cc_disk_setpins
25db0     00 12 0E F2 | 	cmp	arg01, #0 wz
25db4     01 FA 65 56 |  if_ne	neg	result1, #1
25db8     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
25dbc     01 00 00 FF 
25dc0     10 E4 05 F1 | 	add	objptr, ##528
25dc4     F2 14 62 FC | 	wrlong	arg02, objptr
25dc8     04 E4 05 F1 | 	add	objptr, #4
25dcc     F2 16 62 FC | 	wrlong	arg03, objptr
25dd0     04 E4 05 F1 | 	add	objptr, #4
25dd4     F2 18 62 FC | 	wrlong	arg04, objptr
25dd8     04 E4 05 F1 | 	add	objptr, #4
25ddc     F2 1A 62 FC | 	wrlong	arg05, objptr
25de0     01 00 00 FF 
25de4     1C E4 85 F1 | 	sub	objptr, ##540
25de8     00 FA 05 F6 | 	mov	result1, #0
25dec                 | _fatfs_cc_disk_setpins_ret
25dec     2D 00 64 FD | 	ret
25df0                 | 
25df0                 | _fatfs_cc_tchar2uni
25df0     09 01 02 FB | 	rdlong	_var01, arg01
25df4     00 03 02 F6 | 	mov	_var02, _var01
25df8     01 00 06 F1 | 	add	_var01, #1
25dfc     00 05 02 F6 | 	mov	_var03, _var01
25e00     01 07 C2 FA | 	rdbyte	_var04, _var02
25e04     80 06 CE F7 | 	test	_var04, #128 wz
25e08     E8 00 90 AD |  if_e	jmp	#LR__3827
25e0c     03 09 02 F6 | 	mov	_var05, _var04
25e10     E0 08 06 F5 | 	and	_var05, #224
25e14     C0 08 0E F2 | 	cmp	_var05, #192 wz
25e18     1F 06 06 A5 |  if_e	and	_var04, #31
25e1c     01 0A 06 A6 |  if_e	mov	_var06, #1
25e20     34 00 90 AD |  if_e	jmp	#LR__3821
25e24     03 09 02 F6 | 	mov	_var05, _var04
25e28     F0 08 06 F5 | 	and	_var05, #240
25e2c     E0 08 0E F2 | 	cmp	_var05, #224 wz
25e30     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
25e34     02 0A 06 A6 |  if_e	mov	_var06, #2
25e38     1C 00 90 AD |  if_e	jmp	#LR__3820
25e3c     03 09 02 F6 | 	mov	_var05, _var04
25e40     F8 08 06 F5 | 	and	_var05, #248
25e44     F0 08 0E F2 | 	cmp	_var05, #240 wz
25e48     07 06 06 A5 |  if_e	and	_var04, #7
25e4c     03 0A 06 A6 |  if_e	mov	_var06, #3
25e50                 | ' 			return 0xFFFFFFFF;
25e50     01 FA 65 56 |  if_ne	neg	result1, #1
25e54     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
25e58                 | LR__3820
25e58                 | LR__3821
25e58                 | ' 		}
25e58                 | ' 		do {
25e58                 | LR__3822
25e58     02 0D C2 FA | 	rdbyte	_var07, _var03
25e5c     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
25e60     C0 08 06 F5 | 	and	_var05, #192
25e64     80 08 0E F2 | 	cmp	_var05, #128 wz
25e68     01 04 06 F1 | 	add	_var03, #1
25e6c     01 FA 65 56 |  if_ne	neg	result1, #1
25e70     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
25e74     06 06 66 F0 | 	shl	_var04, #6
25e78     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
25e7c     3F 02 06 F5 | 	and	_var02, #63
25e80     01 07 42 F5 | 	or	_var04, _var02
25e84     F4 0B 6E FB | 	djnz	_var06, #LR__3822
25e88     80 06 16 F2 | 	cmp	_var04, #128 wc
25e8c     24 00 90 CD |  if_b	jmp	#LR__3824
25e90     6C 00 00 FF 
25e94     00 06 16 F2 | 	cmp	_var04, ##55296 wc
25e98     0C 00 90 CD |  if_b	jmp	#LR__3823
25e9c     70 00 00 FF 
25ea0     00 06 16 F2 | 	cmp	_var04, ##57344 wc
25ea4     0C 00 90 CD |  if_b	jmp	#LR__3824
25ea8                 | LR__3823
25ea8     80 08 00 FF 
25eac     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
25eb0     08 00 90 CD |  if_b	jmp	#LR__3825
25eb4                 | LR__3824
25eb4     01 FA 65 F6 | 	neg	result1, #1
25eb8     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
25ebc                 | LR__3825
25ebc     80 00 00 FF 
25ec0     00 06 16 F2 | 	cmp	_var04, ##65536 wc
25ec4     2C 00 90 CD |  if_b	jmp	#LR__3826
25ec8     03 03 02 F6 | 	mov	_var02, _var04
25ecc     80 00 00 FF 
25ed0     00 02 86 F1 | 	sub	_var02, ##65536
25ed4     06 02 66 F0 | 	shl	_var02, #6
25ed8     80 FF 01 FF 
25edc     00 02 06 F5 | 	and	_var02, ##67043328
25ee0     6E 00 6C FF 
25ee4     00 08 06 F6 | 	mov	_var05, ##-671032320
25ee8     01 09 42 F5 | 	or	_var05, _var02
25eec     09 06 46 F7 | 	zerox	_var04, #9
25ef0     04 07 42 F5 | 	or	_var04, _var05
25ef4                 | LR__3826
25ef4                 | LR__3827
25ef4     09 05 62 FC | 	wrlong	_var03, arg01
25ef8                 | ' 	}
25ef8                 | ' #line 811 "ff.c"
25ef8                 | ' 	*str = p;
25ef8                 | ' 	return uc;
25ef8     03 FB 01 F6 | 	mov	result1, _var04
25efc                 | _fatfs_cc_tchar2uni_ret
25efc     2D 00 64 FD | 	ret
25f00                 | 
25f00                 | _fatfs_cc_put_utf
25f00     80 12 16 F2 | 	cmp	arg01, #128 wc
25f04     18 00 90 3D |  if_ae	jmp	#LR__3830
25f08     01 16 16 F2 | 	cmp	arg03, #1 wc
25f0c     00 FA 05 C6 |  if_b	mov	result1, #0
25f10     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
25f14     0A 13 42 FC | 	wrbyte	arg01, arg02
25f18                 | ' 		*buf = (TCHAR)chr;
25f18                 | ' 		return 1;
25f18     01 FA 05 F6 | 	mov	result1, #1
25f1c     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
25f20                 | LR__3830
25f20     04 00 00 FF 
25f24     00 12 16 F2 | 	cmp	arg01, ##2048 wc
25f28     40 00 90 3D |  if_ae	jmp	#LR__3831
25f2c     02 16 16 F2 | 	cmp	arg03, #2 wc
25f30     00 FA 05 C6 |  if_b	mov	result1, #0
25f34     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
25f38     09 FB 01 F6 | 	mov	result1, arg01
25f3c     06 FA 45 F0 | 	shr	result1, #6
25f40     1F FA 05 F5 | 	and	result1, #31
25f44     C0 16 06 F6 | 	mov	arg03, #192
25f48     FD 16 42 F5 | 	or	arg03, result1
25f4c     0A 17 42 FC | 	wrbyte	arg03, arg02
25f50     01 14 06 F1 | 	add	arg02, #1
25f54     3F 12 06 F5 | 	and	arg01, #63
25f58     80 FA 05 F6 | 	mov	result1, #128
25f5c     09 FB 41 F5 | 	or	result1, arg01
25f60     0A FB 41 FC | 	wrbyte	result1, arg02
25f64                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
25f64                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
25f64                 | ' 		return 2;
25f64     02 FA 05 F6 | 	mov	result1, #2
25f68     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
25f6c                 | LR__3831
25f6c     80 00 00 FF 
25f70     00 12 16 F2 | 	cmp	arg01, ##65536 wc
25f74     70 00 90 3D |  if_ae	jmp	#LR__3834
25f78     03 16 16 F2 | 	cmp	arg03, #3 wc
25f7c     18 00 90 CD |  if_b	jmp	#LR__3832
25f80     6C 00 00 FF 
25f84     00 12 16 F2 | 	cmp	arg01, ##55296 wc
25f88     14 00 90 CD |  if_b	jmp	#LR__3833
25f8c     70 00 00 FF 
25f90     00 12 16 F2 | 	cmp	arg01, ##57344 wc
25f94     08 00 90 3D |  if_ae	jmp	#LR__3833
25f98                 | LR__3832
25f98     00 FA 05 F6 | 	mov	result1, #0
25f9c     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
25fa0                 | LR__3833
25fa0     09 FB 59 F8 | 	getnib	result1, arg01, #3
25fa4     E0 16 06 F6 | 	mov	arg03, #224
25fa8     FD 16 42 F5 | 	or	arg03, result1
25fac     0A 17 42 FC | 	wrbyte	arg03, arg02
25fb0     01 14 06 F1 | 	add	arg02, #1
25fb4     09 FB 01 F6 | 	mov	result1, arg01
25fb8     06 FA 45 F0 | 	shr	result1, #6
25fbc     3F FA 05 F5 | 	and	result1, #63
25fc0     80 16 06 F6 | 	mov	arg03, #128
25fc4     FD 16 42 F5 | 	or	arg03, result1
25fc8     0A 17 42 FC | 	wrbyte	arg03, arg02
25fcc     01 14 06 F1 | 	add	arg02, #1
25fd0     3F 12 06 F5 | 	and	arg01, #63
25fd4     80 FA 05 F6 | 	mov	result1, #128
25fd8     09 FB 41 F5 | 	or	result1, arg01
25fdc     0A FB 41 FC | 	wrbyte	result1, arg02
25fe0                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
25fe0                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
25fe0                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
25fe0                 | ' 		return 3;
25fe0     03 FA 05 F6 | 	mov	result1, #3
25fe4     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
25fe8                 | LR__3834
25fe8     04 16 16 F2 | 	cmp	arg03, #4 wc
25fec     00 FA 05 C6 |  if_b	mov	result1, #0
25ff0     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
25ff4     09 01 02 F6 | 	mov	_var01, arg01
25ff8     E0 01 06 F4 | 	bitl	_var01, #480
25ffc     00 00 6C FF 
26000     00 00 86 F1 | 	sub	_var01, ##-671088640
26004     06 00 46 F0 | 	shr	_var01, #6
26008     09 13 32 F9 | 	getword	arg01, arg01, #0
2600c     6E 00 00 FF 
26010     00 12 86 F1 | 	sub	arg01, ##56320
26014     00 08 00 FF 
26018     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
2601c     02 00 00 CF 
26020     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
26024     00 FA 05 36 |  if_ae	mov	result1, #0
26028     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2602c     09 01 42 F5 | 	or	_var01, arg01
26030     80 00 00 FF 
26034     00 00 06 F1 | 	add	_var01, ##65536
26038     00 FB 01 F6 | 	mov	result1, _var01
2603c     12 FA 45 F0 | 	shr	result1, #18
26040     07 FA 05 F5 | 	and	result1, #7
26044     F0 16 06 F6 | 	mov	arg03, #240
26048     FD 16 42 F5 | 	or	arg03, result1
2604c     0A 17 42 FC | 	wrbyte	arg03, arg02
26050     01 14 06 F1 | 	add	arg02, #1
26054     00 FB 01 F6 | 	mov	result1, _var01
26058     0C FA 45 F0 | 	shr	result1, #12
2605c     3F FA 05 F5 | 	and	result1, #63
26060     80 16 06 F6 | 	mov	arg03, #128
26064     FD 16 42 F5 | 	or	arg03, result1
26068     0A 17 42 FC | 	wrbyte	arg03, arg02
2606c     01 14 06 F1 | 	add	arg02, #1
26070     00 FB 01 F6 | 	mov	result1, _var01
26074     06 FA 45 F0 | 	shr	result1, #6
26078     3F FA 05 F5 | 	and	result1, #63
2607c     80 16 06 F6 | 	mov	arg03, #128
26080     FD 16 42 F5 | 	or	arg03, result1
26084     0A 17 42 FC | 	wrbyte	arg03, arg02
26088     01 14 06 F1 | 	add	arg02, #1
2608c     3F 00 06 F5 | 	and	_var01, #63
26090     80 FA 05 F6 | 	mov	result1, #128
26094     00 FB 41 F5 | 	or	result1, _var01
26098     0A FB 41 FC | 	wrbyte	result1, arg02
2609c                 | ' 	chr = (hc | chr) + 0x10000;
2609c                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2609c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2609c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2609c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2609c                 | ' 	return 4;
2609c     04 FA 05 F6 | 	mov	result1, #4
260a0                 | _fatfs_cc_put_utf_ret
260a0     2D 00 64 FD | 	ret
260a4                 | 
260a4                 | _fatfs_cc_sync_window
260a4     02 4A 05 F6 | 	mov	COUNT_, #2
260a8     A8 00 A0 FD | 	call	#pushregs_
260ac     09 1F 02 F6 | 	mov	local01, arg01
260b0     00 20 06 F6 | 	mov	local02, #0
260b4     03 1E 06 F1 | 	add	local01, #3
260b8     0F FB C9 FA | 	rdbyte	result1, local01 wz
260bc     03 1E 86 F1 | 	sub	local01, #3
260c0     A4 00 90 AD |  if_e	jmp	#LR__3842
260c4     01 1E 06 F1 | 	add	local01, #1
260c8     0F 13 C2 FA | 	rdbyte	arg01, local01
260cc     33 1E 06 F1 | 	add	local01, #51
260d0     0F 15 02 F6 | 	mov	arg02, local01
260d4     04 1E 86 F1 | 	sub	local01, #4
260d8     0F 17 02 FB | 	rdlong	arg03, local01
260dc     30 1E 86 F1 | 	sub	local01, #48
260e0     01 18 06 F6 | 	mov	arg04, #1
260e4     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
260e8     00 FA 0D F2 | 	cmp	result1, #0 wz
260ec     74 00 90 5D |  if_ne	jmp	#LR__3840
260f0     03 1E 06 F1 | 	add	local01, #3
260f4     0F 01 48 FC | 	wrbyte	#0, local01
260f8     2D 1E 06 F1 | 	add	local01, #45
260fc     0F FB 01 FB | 	rdlong	result1, local01
26100     0C 1E 86 F1 | 	sub	local01, #12
26104     0F 19 02 FB | 	rdlong	arg04, local01
26108     0C FB 81 F1 | 	sub	result1, arg04
2610c     08 1E 86 F1 | 	sub	local01, #8
26110     0F 19 02 FB | 	rdlong	arg04, local01
26114     1C 1E 86 F1 | 	sub	local01, #28
26118     0C FB 11 F2 | 	cmp	result1, arg04 wc
2611c     48 00 90 3D |  if_ae	jmp	#LR__3841
26120     02 1E 06 F1 | 	add	local01, #2
26124     0F 19 C2 FA | 	rdbyte	arg04, local01
26128     02 1E 86 F1 | 	sub	local01, #2
2612c     02 18 0E F2 | 	cmp	arg04, #2 wz
26130     34 00 90 5D |  if_ne	jmp	#LR__3841
26134     01 1E 06 F1 | 	add	local01, #1
26138     0F 13 C2 FA | 	rdbyte	arg01, local01
2613c     33 1E 06 F1 | 	add	local01, #51
26140     0F 15 02 F6 | 	mov	arg02, local01
26144     04 1E 86 F1 | 	sub	local01, #4
26148     0F 17 02 FB | 	rdlong	arg03, local01
2614c     14 1E 86 F1 | 	sub	local01, #20
26150     0F 1F 02 FB | 	rdlong	local01, local01
26154     0F 17 02 F1 | 	add	arg03, local01
26158     01 18 06 F6 | 	mov	arg04, #1
2615c     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
26160     04 00 90 FD | 	jmp	#LR__3841
26164                 | LR__3840
26164     01 20 06 F6 | 	mov	local02, #1
26168                 | LR__3841
26168                 | LR__3842
26168                 | ' 			res = FR_DISK_ERR;
26168                 | ' 		}
26168                 | ' 	}
26168                 | ' 	return res;
26168     10 FB 01 F6 | 	mov	result1, local02
2616c     A7 F0 03 F6 | 	mov	ptra, fp
26170     B2 00 A0 FD | 	call	#popregs_
26174                 | _fatfs_cc_sync_window_ret
26174     2D 00 64 FD | 	ret
26178                 | 
26178                 | _fatfs_cc_move_window
26178     03 4A 05 F6 | 	mov	COUNT_, #3
2617c     A8 00 A0 FD | 	call	#pushregs_
26180     09 1F 02 F6 | 	mov	local01, arg01
26184     0A 21 02 F6 | 	mov	local02, arg02
26188     00 22 06 F6 | 	mov	local03, #0
2618c     30 1E 06 F1 | 	add	local01, #48
26190     0F 19 02 FB | 	rdlong	arg04, local01
26194     30 1E 86 F1 | 	sub	local01, #48
26198     0C 21 0A F2 | 	cmp	local02, arg04 wz
2619c     40 00 90 AD |  if_e	jmp	#LR__3851
261a0     0F 13 02 F6 | 	mov	arg01, local01
261a4     FC FE BF FD | 	call	#_fatfs_cc_sync_window
261a8     FD 22 0A F6 | 	mov	local03, result1 wz
261ac     30 00 90 5D |  if_ne	jmp	#LR__3850
261b0     01 1E 06 F1 | 	add	local01, #1
261b4     0F 13 C2 FA | 	rdbyte	arg01, local01
261b8     33 1E 06 F1 | 	add	local01, #51
261bc     0F 15 02 F6 | 	mov	arg02, local01
261c0     10 17 02 F6 | 	mov	arg03, local02
261c4     01 18 06 F6 | 	mov	arg04, #1
261c8     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
261cc     00 FA 0D F2 | 	cmp	result1, #0 wz
261d0     01 20 66 56 |  if_ne	neg	local02, #1
261d4     01 22 06 56 |  if_ne	mov	local03, #1
261d8     04 1E 86 F1 | 	sub	local01, #4
261dc     0F 21 62 FC | 	wrlong	local02, local01
261e0                 | LR__3850
261e0                 | LR__3851
261e0                 | ' 				sect = (LBA_t)0 - 1;
261e0                 | ' 				res = FR_DISK_ERR;
261e0                 | ' 			}
261e0                 | ' 			fs->winsect = sect;
261e0                 | ' 		}
261e0                 | ' 	}
261e0                 | ' 	return res;
261e0     11 FB 01 F6 | 	mov	result1, local03
261e4     A7 F0 03 F6 | 	mov	ptra, fp
261e8     B2 00 A0 FD | 	call	#popregs_
261ec                 | _fatfs_cc_move_window_ret
261ec     2D 00 64 FD | 	ret
261f0                 | 
261f0                 | _fatfs_cc_sync_fs
261f0     02 4A 05 F6 | 	mov	COUNT_, #2
261f4     A8 00 A0 FD | 	call	#pushregs_
261f8     09 1F 02 F6 | 	mov	local01, arg01
261fc     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
26200     FD 20 0A F6 | 	mov	local02, result1 wz
26204     D8 00 90 5D |  if_ne	jmp	#LR__3861
26208     0F 19 C2 FA | 	rdbyte	arg04, local01
2620c     03 18 0E F2 | 	cmp	arg04, #3 wz
26210     04 1E 06 A1 |  if_e	add	local01, #4
26214     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
26218     04 1E 86 A1 |  if_e	sub	local01, #4
2621c     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
26220     A0 00 90 5D |  if_ne	jmp	#LR__3860
26224     34 1E 06 F1 | 	add	local01, #52
26228     0F 13 02 F6 | 	mov	arg01, local01
2622c     00 14 06 F6 | 	mov	arg02, #0
26230     09 16 C6 F9 | 	decod	arg03, #9
26234     98 00 A0 FD | 	call	#\builtin_bytefill_
26238     0F 13 02 F6 | 	mov	arg01, local01
2623c     FE 13 06 F1 | 	add	arg01, #510
26240     55 00 80 FF 
26244     09 AB 58 FC | 	wrword	##43605, arg01
26248     A9 B0 A0 FF 
2624c     0F A5 68 FC | 	wrlong	##1096897106, local01
26250     0F 13 02 F6 | 	mov	arg01, local01
26254     E4 13 06 F1 | 	add	arg01, #484
26258     B9 A0 B0 FF 
2625c     09 E5 68 FC | 	wrlong	##1631679090, arg01
26260     0F 13 02 F6 | 	mov	arg01, local01
26264     E8 13 06 F1 | 	add	arg01, #488
26268     20 1E 86 F1 | 	sub	local01, #32
2626c     0F 15 02 FB | 	rdlong	arg02, local01
26270     09 15 62 FC | 	wrlong	arg02, arg01
26274     20 1E 06 F1 | 	add	local01, #32
26278     0F 13 02 F6 | 	mov	arg01, local01
2627c     EC 13 06 F1 | 	add	arg01, #492
26280     24 1E 86 F1 | 	sub	local01, #36
26284     0F 15 02 FB | 	rdlong	arg02, local01
26288     09 15 62 FC | 	wrlong	arg02, arg01
2628c     10 1E 06 F1 | 	add	local01, #16
26290     0F 17 02 FB | 	rdlong	arg03, local01
26294     01 16 06 F1 | 	add	arg03, #1
26298     10 1E 06 F1 | 	add	local01, #16
2629c     0F 17 62 FC | 	wrlong	arg03, local01
262a0     2F 1E 86 F1 | 	sub	local01, #47
262a4     0F 13 C2 FA | 	rdbyte	arg01, local01
262a8     33 1E 06 F1 | 	add	local01, #51
262ac     0F 15 02 F6 | 	mov	arg02, local01
262b0     01 18 06 F6 | 	mov	arg04, #1
262b4     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
262b8     30 1E 86 F1 | 	sub	local01, #48
262bc     0F 01 48 FC | 	wrbyte	#0, local01
262c0     04 1E 86 F1 | 	sub	local01, #4
262c4                 | LR__3860
262c4     01 1E 06 F1 | 	add	local01, #1
262c8     0F 13 C2 FA | 	rdbyte	arg01, local01
262cc     00 14 06 F6 | 	mov	arg02, #0
262d0     00 16 06 F6 | 	mov	arg03, #0
262d4     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
262d8     00 FA 0D F2 | 	cmp	result1, #0 wz
262dc     01 20 06 56 |  if_ne	mov	local02, #1
262e0                 | LR__3861
262e0                 | ' 	}
262e0                 | ' 
262e0                 | ' 	return res;
262e0     10 FB 01 F6 | 	mov	result1, local02
262e4     A7 F0 03 F6 | 	mov	ptra, fp
262e8     B2 00 A0 FD | 	call	#popregs_
262ec                 | _fatfs_cc_sync_fs_ret
262ec     2D 00 64 FD | 	ret
262f0                 | 
262f0                 | _fatfs_cc_clst2sect
262f0     02 14 86 F1 | 	sub	arg02, #2
262f4     18 12 06 F1 | 	add	arg01, #24
262f8     09 01 02 FB | 	rdlong	_var01, arg01
262fc     18 12 86 F1 | 	sub	arg01, #24
26300     02 00 86 F1 | 	sub	_var01, #2
26304     00 15 12 F2 | 	cmp	arg02, _var01 wc
26308     00 FA 05 36 |  if_ae	mov	result1, #0
2630c     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
26310     0A 12 06 F1 | 	add	arg01, #10
26314     09 01 E2 FA | 	rdword	_var01, arg01
26318     0A 01 02 FD | 	qmul	_var01, arg02
2631c                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2631c     22 12 06 F1 | 	add	arg01, #34
26320     09 FB 01 FB | 	rdlong	result1, arg01
26324     18 00 62 FD | 	getqx	_var01
26328     00 FB 01 F1 | 	add	result1, _var01
2632c                 | _fatfs_cc_clst2sect_ret
2632c     2D 00 64 FD | 	ret
26330                 | 
26330                 | _fatfs_cc_get_fat
26330     07 4A 05 F6 | 	mov	COUNT_, #7
26334     A8 00 A0 FD | 	call	#pushregs_
26338     0A 1F 02 F6 | 	mov	local01, arg02
2633c     09 21 02 FB | 	rdlong	local02, arg01
26340     02 1E 16 F2 | 	cmp	local01, #2 wc
26344     14 00 90 CD |  if_b	jmp	#LR__3870
26348     18 20 06 F1 | 	add	local02, #24
2634c     10 23 02 FB | 	rdlong	local03, local02
26350     18 20 86 F1 | 	sub	local02, #24
26354     11 1F 12 F2 | 	cmp	local01, local03 wc
26358     08 00 90 CD |  if_b	jmp	#LR__3871
2635c                 | LR__3870
2635c     01 24 06 F6 | 	mov	local04, #1
26360     60 01 90 FD | 	jmp	#LR__3878
26364                 | LR__3871
26364     01 24 66 F6 | 	neg	local04, #1
26368                 | ' 		val = 0xFFFFFFFF;
26368                 | ' 
26368                 | ' 		switch (fs->fs_type) {
26368     10 27 C2 FA | 	rdbyte	local05, local02
2636c     01 26 86 F1 | 	sub	local05, #1
26370     03 26 26 F3 | 	fle	local05, #3
26374     30 26 62 FD | 	jmprel	local05
26378                 | LR__3872
26378     0C 00 90 FD | 	jmp	#LR__3873
2637c     B8 00 90 FD | 	jmp	#LR__3874
26380     F8 00 90 FD | 	jmp	#LR__3875
26384     38 01 90 FD | 	jmp	#LR__3876
26388                 | LR__3873
26388     0F 27 02 F6 | 	mov	local05, local01
2638c     0F 13 02 F6 | 	mov	arg01, local01
26390     01 12 46 F0 | 	shr	arg01, #1
26394     09 27 02 F1 | 	add	local05, arg01
26398     10 13 02 F6 | 	mov	arg01, local02
2639c     13 29 02 F6 | 	mov	local06, local05
263a0     09 28 46 F0 | 	shr	local06, #9
263a4     24 20 06 F1 | 	add	local02, #36
263a8     10 15 02 FB | 	rdlong	arg02, local02
263ac     24 20 86 F1 | 	sub	local02, #36
263b0     14 15 02 F1 | 	add	arg02, local06
263b4     C0 FD BF FD | 	call	#_fatfs_cc_move_window
263b8     00 FA 0D F2 | 	cmp	result1, #0 wz
263bc     04 01 90 5D |  if_ne	jmp	#LR__3877
263c0     13 29 02 F6 | 	mov	local06, local05
263c4     FF 29 06 F5 | 	and	local06, #511
263c8     34 20 06 F1 | 	add	local02, #52
263cc     10 29 02 F1 | 	add	local06, local02
263d0     14 2B C2 FA | 	rdbyte	local07, local06
263d4     34 20 86 F1 | 	sub	local02, #52
263d8     10 13 02 F6 | 	mov	arg01, local02
263dc     01 26 06 F1 | 	add	local05, #1
263e0     13 29 02 F6 | 	mov	local06, local05
263e4     09 28 46 F0 | 	shr	local06, #9
263e8     24 20 06 F1 | 	add	local02, #36
263ec     10 15 02 FB | 	rdlong	arg02, local02
263f0     24 20 86 F1 | 	sub	local02, #36
263f4     14 15 02 F1 | 	add	arg02, local06
263f8     7C FD BF FD | 	call	#_fatfs_cc_move_window
263fc     00 FA 0D F2 | 	cmp	result1, #0 wz
26400     C0 00 90 5D |  if_ne	jmp	#LR__3877
26404     FF 27 06 F5 | 	and	local05, #511
26408     34 20 06 F1 | 	add	local02, #52
2640c     10 27 02 F1 | 	add	local05, local02
26410     13 29 C2 FA | 	rdbyte	local06, local05
26414     08 28 66 F0 | 	shl	local06, #8
26418     14 2B 42 F5 | 	or	local07, local06
2641c     01 1E CE F7 | 	test	local01, #1 wz
26420     04 2A 46 50 |  if_ne	shr	local07, #4
26424     15 23 02 56 |  if_ne	mov	local03, local07
26428     0B 2A 46 A7 |  if_e	zerox	local07, #11
2642c     15 23 02 A6 |  if_e	mov	local03, local07
26430     11 25 02 F6 | 	mov	local04, local03
26434                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
26434                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
26434                 | ' 			break;
26434     8C 00 90 FD | 	jmp	#LR__3877
26438                 | LR__3874
26438     10 13 02 F6 | 	mov	arg01, local02
2643c     0F 29 02 F6 | 	mov	local06, local01
26440     08 28 46 F0 | 	shr	local06, #8
26444     24 20 06 F1 | 	add	local02, #36
26448     10 15 02 FB | 	rdlong	arg02, local02
2644c     24 20 86 F1 | 	sub	local02, #36
26450     14 15 02 F1 | 	add	arg02, local06
26454     20 FD BF FD | 	call	#_fatfs_cc_move_window
26458     00 FA 0D F2 | 	cmp	result1, #0 wz
2645c     64 00 90 5D |  if_ne	jmp	#LR__3877
26460     34 20 06 F1 | 	add	local02, #52
26464     01 1E 66 F0 | 	shl	local01, #1
26468     FF 1F 06 F5 | 	and	local01, #511
2646c     0F 21 02 F1 | 	add	local02, local01
26470                 | ' {
26470                 | ' 
26470                 | ' 	return *((WORD*)ptr);
26470     10 FB E1 FA | 	rdword	result1, local02
26474     FD 24 32 F9 | 	getword	local04, result1, #0
26478                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
26478                 | ' 			break;
26478     48 00 90 FD | 	jmp	#LR__3877
2647c                 | LR__3875
2647c     10 13 02 F6 | 	mov	arg01, local02
26480     0F 29 02 F6 | 	mov	local06, local01
26484     07 28 46 F0 | 	shr	local06, #7
26488     24 20 06 F1 | 	add	local02, #36
2648c     10 15 02 FB | 	rdlong	arg02, local02
26490     24 20 86 F1 | 	sub	local02, #36
26494     14 15 02 F1 | 	add	arg02, local06
26498     DC FC BF FD | 	call	#_fatfs_cc_move_window
2649c     00 FA 0D F2 | 	cmp	result1, #0 wz
264a0     20 00 90 5D |  if_ne	jmp	#LR__3877
264a4     34 20 06 F1 | 	add	local02, #52
264a8     02 1E 66 F0 | 	shl	local01, #2
264ac     FF 1F 06 F5 | 	and	local01, #511
264b0     0F 21 02 F1 | 	add	local02, local01
264b4                 | ' {
264b4                 | ' 
264b4                 | ' 	return *((DWORD*)ptr);
264b4     10 25 02 FB | 	rdlong	local04, local02
264b8     7C 24 06 F4 | 	bitl	local04, #124
264bc                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
264bc                 | ' 			break;
264bc     04 00 90 FD | 	jmp	#LR__3877
264c0                 | LR__3876
264c0     01 24 06 F6 | 	mov	local04, #1
264c4                 | LR__3877
264c4                 | LR__3878
264c4                 | ' 			val = 1;
264c4                 | ' 		}
264c4                 | ' 	}
264c4                 | ' 
264c4                 | ' 	return val;
264c4     12 FB 01 F6 | 	mov	result1, local04
264c8     A7 F0 03 F6 | 	mov	ptra, fp
264cc     B2 00 A0 FD | 	call	#popregs_
264d0                 | _fatfs_cc_get_fat_ret
264d0     2D 00 64 FD | 	ret
264d4                 | 
264d4                 | _fatfs_cc_put_fat
264d4     08 4A 05 F6 | 	mov	COUNT_, #8
264d8     A8 00 A0 FD | 	call	#pushregs_
264dc     09 1F 02 F6 | 	mov	local01, arg01
264e0     0A 21 02 F6 | 	mov	local02, arg02
264e4     0B 23 02 F6 | 	mov	local03, arg03
264e8     02 24 06 F6 | 	mov	local04, #2
264ec     02 20 16 F2 | 	cmp	local02, #2 wc
264f0     E0 01 90 CD |  if_b	jmp	#LR__3887
264f4     18 1E 06 F1 | 	add	local01, #24
264f8     0F 27 02 FB | 	rdlong	local05, local01
264fc     18 1E 86 F1 | 	sub	local01, #24
26500     13 21 12 F2 | 	cmp	local02, local05 wc
26504     CC 01 90 3D |  if_ae	jmp	#LR__3887
26508                 | ' 		switch (fs->fs_type) {
26508     0F 29 C2 FA | 	rdbyte	local06, local01
2650c     01 28 86 F1 | 	sub	local06, #1
26510     03 28 26 F3 | 	fle	local06, #3
26514     30 28 62 FD | 	jmprel	local06
26518                 | LR__3880
26518     0C 00 90 FD | 	jmp	#LR__3881
2651c     F8 00 90 FD | 	jmp	#LR__3884
26520     40 01 90 FD | 	jmp	#LR__3885
26524     AC 01 90 FD | 	jmp	#LR__3886
26528                 | LR__3881
26528     10 2B 02 F6 | 	mov	local07, local02
2652c     10 27 02 F6 | 	mov	local05, local02
26530     01 26 46 F0 | 	shr	local05, #1
26534     13 2B 02 F1 | 	add	local07, local05
26538     0F 13 02 F6 | 	mov	arg01, local01
2653c     15 29 02 F6 | 	mov	local06, local07
26540     09 28 46 F0 | 	shr	local06, #9
26544     24 1E 06 F1 | 	add	local01, #36
26548     0F 15 02 FB | 	rdlong	arg02, local01
2654c     24 1E 86 F1 | 	sub	local01, #36
26550     14 15 02 F1 | 	add	arg02, local06
26554     20 FC BF FD | 	call	#_fatfs_cc_move_window
26558     FD 24 0A F6 | 	mov	local04, result1 wz
2655c     74 01 90 5D |  if_ne	jmp	#LR__3886
26560     34 1E 06 F1 | 	add	local01, #52
26564     0F 2D 02 F6 | 	mov	local08, local01
26568     15 27 02 F6 | 	mov	local05, local07
2656c     FF 27 06 F5 | 	and	local05, #511
26570     13 2D 02 F1 | 	add	local08, local05
26574     01 20 CE F7 | 	test	local02, #1 wz
26578     34 1E 86 F1 | 	sub	local01, #52
2657c     01 2A 06 F1 | 	add	local07, #1
26580     18 00 90 AD |  if_e	jmp	#LR__3882
26584     16 27 C2 FA | 	rdbyte	local05, local08
26588     13 27 42 F8 | 	getnib	local05, local05, #0
2658c     11 29 E2 F8 | 	getbyte	local06, local03, #0
26590     04 28 66 F0 | 	shl	local06, #4
26594     14 27 42 F5 | 	or	local05, local06
26598     04 00 90 FD | 	jmp	#LR__3883
2659c                 | LR__3882
2659c     11 27 02 F6 | 	mov	local05, local03
265a0                 | LR__3883
265a0     16 27 42 FC | 	wrbyte	local05, local08
265a4     03 1E 06 F1 | 	add	local01, #3
265a8     0F 03 48 FC | 	wrbyte	#1, local01
265ac     03 1E 86 F1 | 	sub	local01, #3
265b0     0F 13 02 F6 | 	mov	arg01, local01
265b4     15 2D 02 F6 | 	mov	local08, local07
265b8     09 2C 46 F0 | 	shr	local08, #9
265bc     24 1E 06 F1 | 	add	local01, #36
265c0     0F 15 02 FB | 	rdlong	arg02, local01
265c4     24 1E 86 F1 | 	sub	local01, #36
265c8     16 15 02 F1 | 	add	arg02, local08
265cc     A8 FB BF FD | 	call	#_fatfs_cc_move_window
265d0     FD 24 0A F6 | 	mov	local04, result1 wz
265d4     FC 00 90 5D |  if_ne	jmp	#LR__3886
265d8     34 1E 06 F1 | 	add	local01, #52
265dc     0F 2D 02 F6 | 	mov	local08, local01
265e0     FF 2B 06 F5 | 	and	local07, #511
265e4     15 2D 02 F1 | 	add	local08, local07
265e8     01 20 CE F7 | 	test	local02, #1 wz
265ec     04 22 46 50 |  if_ne	shr	local03, #4
265f0     11 27 02 56 |  if_ne	mov	local05, local03
265f4     16 27 C2 AA |  if_e	rdbyte	local05, local08
265f8     F0 26 06 A5 |  if_e	and	local05, #240
265fc     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
26600     11 23 42 A8 |  if_e	getnib	local03, local03, #0
26604     11 27 42 A5 |  if_e	or	local05, local03
26608     16 27 42 FC | 	wrbyte	local05, local08
2660c     31 1E 86 F1 | 	sub	local01, #49
26610     0F 03 48 FC | 	wrbyte	#1, local01
26614                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
26614                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
26614                 | ' 			fs->wflag = 1;
26614                 | ' 			break;
26614     BC 00 90 FD | 	jmp	#LR__3886
26618                 | LR__3884
26618     0F 13 02 F6 | 	mov	arg01, local01
2661c     10 2D 02 F6 | 	mov	local08, local02
26620     08 2C 46 F0 | 	shr	local08, #8
26624     24 1E 06 F1 | 	add	local01, #36
26628     0F 15 02 FB | 	rdlong	arg02, local01
2662c     24 1E 86 F1 | 	sub	local01, #36
26630     16 15 02 F1 | 	add	arg02, local08
26634     40 FB BF FD | 	call	#_fatfs_cc_move_window
26638     FD 24 0A F6 | 	mov	local04, result1 wz
2663c     94 00 90 5D |  if_ne	jmp	#LR__3886
26640     34 1E 06 F1 | 	add	local01, #52
26644     0F 13 02 F6 | 	mov	arg01, local01
26648     01 20 66 F0 | 	shl	local02, #1
2664c     FF 21 06 F5 | 	and	local02, #511
26650     10 13 02 F1 | 	add	arg01, local02
26654     09 23 52 FC | 	wrword	local03, arg01
26658     31 1E 86 F1 | 	sub	local01, #49
2665c     0F 03 48 FC | 	wrbyte	#1, local01
26660                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
26660                 | ' 			fs->wflag = 1;
26660                 | ' 			break;
26660     70 00 90 FD | 	jmp	#LR__3886
26664                 | LR__3885
26664     0F 13 02 F6 | 	mov	arg01, local01
26668     10 2D 02 F6 | 	mov	local08, local02
2666c     07 2C 46 F0 | 	shr	local08, #7
26670     24 1E 06 F1 | 	add	local01, #36
26674     0F 15 02 FB | 	rdlong	arg02, local01
26678     24 1E 86 F1 | 	sub	local01, #36
2667c     16 15 02 F1 | 	add	arg02, local08
26680     F4 FA BF FD | 	call	#_fatfs_cc_move_window
26684     FD 24 0A F6 | 	mov	local04, result1 wz
26688     48 00 90 5D |  if_ne	jmp	#LR__3886
2668c     7C 22 06 F4 | 	bitl	local03, #124
26690     34 1E 06 F1 | 	add	local01, #52
26694     10 2D 02 F6 | 	mov	local08, local02
26698     02 2C 66 F0 | 	shl	local08, #2
2669c     FF 2D 06 F5 | 	and	local08, #511
266a0     0F 13 02 F6 | 	mov	arg01, local01
266a4     16 13 02 F1 | 	add	arg01, local08
266a8                 | ' {
266a8                 | ' 
266a8                 | ' 	return *((DWORD*)ptr);
266a8     09 2D 02 FB | 	rdlong	local08, arg01
266ac     00 00 78 FF 
266b0     00 2C 06 F5 | 	and	local08, ##-268435456
266b4     16 23 42 F5 | 	or	local03, local08
266b8     0F 13 02 F6 | 	mov	arg01, local01
266bc     02 20 66 F0 | 	shl	local02, #2
266c0     FF 21 06 F5 | 	and	local02, #511
266c4     10 13 02 F1 | 	add	arg01, local02
266c8     09 23 62 FC | 	wrlong	local03, arg01
266cc     31 1E 86 F1 | 	sub	local01, #49
266d0     0F 03 48 FC | 	wrbyte	#1, local01
266d4                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
266d4                 | ' 			}
266d4                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
266d4                 | ' 			fs->wflag = 1;
266d4                 | ' 			break;
266d4                 | LR__3886
266d4                 | LR__3887
266d4                 | ' 		}
266d4                 | ' 	}
266d4                 | ' 	return res;
266d4     12 FB 01 F6 | 	mov	result1, local04
266d8     A7 F0 03 F6 | 	mov	ptra, fp
266dc     B2 00 A0 FD | 	call	#popregs_
266e0                 | _fatfs_cc_put_fat_ret
266e0     2D 00 64 FD | 	ret
266e4                 | 
266e4                 | _fatfs_cc_remove_chain
266e4     05 4A 05 F6 | 	mov	COUNT_, #5
266e8     A8 00 A0 FD | 	call	#pushregs_
266ec     09 1F 02 F6 | 	mov	local01, arg01
266f0     0A 21 02 F6 | 	mov	local02, arg02
266f4     0B 23 02 F6 | 	mov	local03, arg03
266f8     0F 25 02 FB | 	rdlong	local04, local01
266fc     02 20 16 F2 | 	cmp	local02, #2 wc
26700     14 00 90 CD |  if_b	jmp	#LR__3890
26704     18 24 06 F1 | 	add	local04, #24
26708     12 FB 01 FB | 	rdlong	result1, local04
2670c     18 24 86 F1 | 	sub	local04, #24
26710     FD 20 12 F2 | 	cmp	local02, result1 wc
26714     08 00 90 CD |  if_b	jmp	#LR__3891
26718                 | LR__3890
26718     02 FA 05 F6 | 	mov	result1, #2
2671c     CC 00 90 FD | 	jmp	#LR__3896
26720                 | LR__3891
26720     00 22 0E F2 | 	cmp	local03, #0 wz
26724     18 00 90 AD |  if_e	jmp	#LR__3892
26728     11 15 02 F6 | 	mov	arg02, local03
2672c     12 13 02 F6 | 	mov	arg01, local04
26730     01 16 66 F6 | 	neg	arg03, #1
26734     9C FD BF FD | 	call	#_fatfs_cc_put_fat
26738     00 FA 0D F2 | 	cmp	result1, #0 wz
2673c     AC 00 90 5D |  if_ne	jmp	#LR__3896
26740                 | LR__3892
26740                 | ' 	}
26740                 | ' 
26740                 | ' 
26740                 | ' 	do {
26740                 | LR__3893
26740     10 15 02 F6 | 	mov	arg02, local02
26744     0F 13 02 F6 | 	mov	arg01, local01
26748     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2674c     FD 26 0A F6 | 	mov	local05, result1 wz
26750     94 00 90 AD |  if_e	jmp	#LR__3895
26754     01 26 0E F2 | 	cmp	local05, #1 wz
26758     02 FA 05 A6 |  if_e	mov	result1, #2
2675c     8C 00 90 AD |  if_e	jmp	#LR__3896
26760     FF FF 7F FF 
26764     FF 27 0E F2 | 	cmp	local05, ##-1 wz
26768     01 FA 05 A6 |  if_e	mov	result1, #1
2676c     7C 00 90 AD |  if_e	jmp	#LR__3896
26770     10 15 02 F6 | 	mov	arg02, local02
26774     12 13 02 F6 | 	mov	arg01, local04
26778     00 16 06 F6 | 	mov	arg03, #0
2677c     54 FD BF FD | 	call	#_fatfs_cc_put_fat
26780     FD 22 0A F6 | 	mov	local03, result1 wz
26784     11 FB 01 56 |  if_ne	mov	result1, local03
26788     60 00 90 5D |  if_ne	jmp	#LR__3896
2678c     18 24 06 F1 | 	add	local04, #24
26790     12 23 02 FB | 	rdlong	local03, local04
26794     02 22 86 F1 | 	sub	local03, #2
26798     04 24 86 F1 | 	sub	local04, #4
2679c     12 21 02 FB | 	rdlong	local02, local04
267a0     14 24 86 F1 | 	sub	local04, #20
267a4     11 21 12 F2 | 	cmp	local02, local03 wc
267a8     24 00 90 3D |  if_ae	jmp	#LR__3894
267ac     14 24 06 F1 | 	add	local04, #20
267b0     12 23 02 FB | 	rdlong	local03, local04
267b4     01 22 06 F1 | 	add	local03, #1
267b8     12 23 62 FC | 	wrlong	local03, local04
267bc     10 24 86 F1 | 	sub	local04, #16
267c0     12 23 C2 FA | 	rdbyte	local03, local04
267c4     01 22 46 F5 | 	or	local03, #1
267c8     12 23 42 FC | 	wrbyte	local03, local04
267cc     04 24 86 F1 | 	sub	local04, #4
267d0                 | LR__3894
267d0     13 21 02 F6 | 	mov	local02, local05
267d4     18 24 06 F1 | 	add	local04, #24
267d8     12 27 02 FB | 	rdlong	local05, local04
267dc     18 24 86 F1 | 	sub	local04, #24
267e0     13 21 12 F2 | 	cmp	local02, local05 wc
267e4     58 FF 9F CD |  if_b	jmp	#LR__3893
267e8                 | LR__3895
267e8                 | ' #line 1500 "ff.c"
267e8                 | ' 	return FR_OK;
267e8     00 FA 05 F6 | 	mov	result1, #0
267ec                 | LR__3896
267ec     A7 F0 03 F6 | 	mov	ptra, fp
267f0     B2 00 A0 FD | 	call	#popregs_
267f4                 | _fatfs_cc_remove_chain_ret
267f4     2D 00 64 FD | 	ret
267f8                 | 
267f8                 | _fatfs_cc_create_chain
267f8     09 4A 05 F6 | 	mov	COUNT_, #9
267fc     A8 00 A0 FD | 	call	#pushregs_
26800     09 1F 02 F6 | 	mov	local01, arg01
26804     0A 21 0A F6 | 	mov	local02, arg02 wz
26808     0F 23 02 FB | 	rdlong	local03, local01
2680c     28 00 90 5D |  if_ne	jmp	#LR__3900
26810     10 22 06 F1 | 	add	local03, #16
26814     11 25 0A FB | 	rdlong	local04, local03 wz
26818     10 22 86 F1 | 	sub	local03, #16
2681c     18 22 06 51 |  if_ne	add	local03, #24
26820     11 27 02 5B |  if_ne	rdlong	local05, local03
26824     18 22 86 51 |  if_ne	sub	local03, #24
26828     13 25 12 52 |  if_ne	cmp	local04, local05 wc
2682c     50 00 90 4D |  if_c_and_nz	jmp	#LR__3901
26830     01 24 06 F6 | 	mov	local04, #1
26834     48 00 90 FD | 	jmp	#LR__3901
26838                 | LR__3900
26838     10 15 02 F6 | 	mov	arg02, local02
2683c     0F 13 02 F6 | 	mov	arg01, local01
26840     EC FA BF FD | 	call	#_fatfs_cc_get_fat
26844     FD 24 02 F6 | 	mov	local04, result1
26848     02 24 16 F2 | 	cmp	local04, #2 wc
2684c     01 FA 05 C6 |  if_b	mov	result1, #1
26850     BC 01 90 CD |  if_b	jmp	#LR__3911
26854     FF FF 7F FF 
26858     FF 25 0E F2 | 	cmp	local04, ##-1 wz
2685c     12 FB 01 A6 |  if_e	mov	result1, local04
26860     AC 01 90 AD |  if_e	jmp	#LR__3911
26864     18 22 06 F1 | 	add	local03, #24
26868     11 27 02 FB | 	rdlong	local05, local03
2686c     18 22 86 F1 | 	sub	local03, #24
26870     13 25 12 F2 | 	cmp	local04, local05 wc
26874     12 FB 01 C6 |  if_b	mov	result1, local04
26878     94 01 90 CD |  if_b	jmp	#LR__3911
2687c     10 25 02 F6 | 	mov	local04, local02
26880                 | LR__3901
26880     14 22 06 F1 | 	add	local03, #20
26884     11 27 0A FB | 	rdlong	local05, local03 wz
26888     14 22 86 F1 | 	sub	local03, #20
2688c     00 FA 05 A6 |  if_e	mov	result1, #0
26890     7C 01 90 AD |  if_e	jmp	#LR__3911
26894     00 28 06 F6 | 	mov	local06, #0
26898     10 25 0A F2 | 	cmp	local04, local02 wz
2689c     74 00 90 5D |  if_ne	jmp	#LR__3904
268a0     12 29 02 F6 | 	mov	local06, local04
268a4     01 28 06 F1 | 	add	local06, #1
268a8     18 22 06 F1 | 	add	local03, #24
268ac     11 27 02 FB | 	rdlong	local05, local03
268b0     18 22 86 F1 | 	sub	local03, #24
268b4     13 29 12 F2 | 	cmp	local06, local05 wc
268b8     02 28 06 36 |  if_ae	mov	local06, #2
268bc     14 15 02 F6 | 	mov	arg02, local06
268c0     0F 13 02 F6 | 	mov	arg01, local01
268c4     68 FA BF FD | 	call	#_fatfs_cc_get_fat
268c8     FD 26 02 F6 | 	mov	local05, result1
268cc     01 26 0E F2 | 	cmp	local05, #1 wz
268d0     FF FF 7F 5F 
268d4     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
268d8     13 FB 01 A6 |  if_e	mov	result1, local05
268dc     30 01 90 AD |  if_e	jmp	#LR__3911
268e0     00 26 0E F2 | 	cmp	local05, #0 wz
268e4     2C 00 90 AD |  if_e	jmp	#LR__3903
268e8     10 22 06 F1 | 	add	local03, #16
268ec     11 2B 02 FB | 	rdlong	local07, local03
268f0     10 22 86 F1 | 	sub	local03, #16
268f4     02 2A 16 F2 | 	cmp	local07, #2 wc
268f8     14 00 90 CD |  if_b	jmp	#LR__3902
268fc     18 22 06 F1 | 	add	local03, #24
26900     11 27 02 FB | 	rdlong	local05, local03
26904     18 22 86 F1 | 	sub	local03, #24
26908     13 2B 12 F2 | 	cmp	local07, local05 wc
2690c     15 25 02 C6 |  if_b	mov	local04, local07
26910                 | LR__3902
26910     00 28 06 F6 | 	mov	local06, #0
26914                 | LR__3903
26914                 | LR__3904
26914     00 28 0E F2 | 	cmp	local06, #0 wz
26918     60 00 90 5D |  if_ne	jmp	#LR__3907
2691c     12 29 02 F6 | 	mov	local06, local04
26920                 | ' 			ncl = scl;
26920                 | ' 			for (;;) {
26920                 | LR__3905
26920     01 28 06 F1 | 	add	local06, #1
26924     18 22 06 F1 | 	add	local03, #24
26928     11 27 02 FB | 	rdlong	local05, local03
2692c     18 22 86 F1 | 	sub	local03, #24
26930     13 29 12 F2 | 	cmp	local06, local05 wc
26934     02 28 06 36 |  if_ae	mov	local06, #2
26938     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
2693c     00 FA 05 16 |  if_a	mov	result1, #0
26940     CC 00 90 1D |  if_a	jmp	#LR__3911
26944     14 15 02 F6 | 	mov	arg02, local06
26948     0F 13 02 F6 | 	mov	arg01, local01
2694c     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
26950     FD 2A 0A F6 | 	mov	local07, result1 wz
26954     24 00 90 AD |  if_e	jmp	#LR__3906
26958     01 2A 0E F2 | 	cmp	local07, #1 wz
2695c     FF FF 7F 5F 
26960     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
26964     15 FB 01 A6 |  if_e	mov	result1, local07
26968     A4 00 90 AD |  if_e	jmp	#LR__3911
2696c     12 29 0A F2 | 	cmp	local06, local04 wz
26970     00 FA 05 A6 |  if_e	mov	result1, #0
26974     98 00 90 AD |  if_e	jmp	#LR__3911
26978     A4 FF 9F FD | 	jmp	#LR__3905
2697c                 | LR__3906
2697c                 | LR__3907
2697c     11 13 02 F6 | 	mov	arg01, local03
26980     14 15 02 F6 | 	mov	arg02, local06
26984     01 16 66 F6 | 	neg	arg03, #1
26988     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2698c     FD 2C 0A F6 | 	mov	local08, result1 wz
26990     1C 00 90 5D |  if_ne	jmp	#LR__3908
26994     00 20 0E F2 | 	cmp	local02, #0 wz
26998     14 00 90 AD |  if_e	jmp	#LR__3908
2699c     11 13 02 F6 | 	mov	arg01, local03
269a0     10 15 02 F6 | 	mov	arg02, local02
269a4     14 17 02 F6 | 	mov	arg03, local06
269a8     28 FB BF FD | 	call	#_fatfs_cc_put_fat
269ac     FD 2C 02 F6 | 	mov	local08, result1
269b0                 | LR__3908
269b0     00 2C 0E F2 | 	cmp	local08, #0 wz
269b4     4C 00 90 5D |  if_ne	jmp	#LR__3909
269b8     10 22 06 F1 | 	add	local03, #16
269bc     11 29 62 FC | 	wrlong	local06, local03
269c0     08 22 06 F1 | 	add	local03, #8
269c4     11 27 02 FB | 	rdlong	local05, local03
269c8     02 26 86 F1 | 	sub	local05, #2
269cc     04 22 86 F1 | 	sub	local03, #4
269d0     11 2F 02 FB | 	rdlong	local09, local03
269d4     14 22 86 F1 | 	sub	local03, #20
269d8     13 2F 1A F2 | 	cmp	local09, local05 wcz
269dc     14 22 06 E1 |  if_be	add	local03, #20
269e0     11 2F 02 EB |  if_be	rdlong	local09, local03
269e4     01 2E 86 E1 |  if_be	sub	local09, #1
269e8     11 2F 62 EC |  if_be	wrlong	local09, local03
269ec     14 22 86 E1 |  if_be	sub	local03, #20
269f0     04 22 06 F1 | 	add	local03, #4
269f4     11 27 C2 FA | 	rdbyte	local05, local03
269f8     01 26 46 F5 | 	or	local05, #1
269fc     11 27 42 FC | 	wrbyte	local05, local03
26a00     08 00 90 FD | 	jmp	#LR__3910
26a04                 | LR__3909
26a04     01 2C 0E F2 | 	cmp	local08, #1 wz
26a08     01 28 C6 F6 | 	negz	local06, #1
26a0c                 | LR__3910
26a0c                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
26a0c                 | ' 	}
26a0c                 | ' 
26a0c                 | ' 	return ncl;
26a0c     14 FB 01 F6 | 	mov	result1, local06
26a10                 | LR__3911
26a10     A7 F0 03 F6 | 	mov	ptra, fp
26a14     B2 00 A0 FD | 	call	#popregs_
26a18                 | _fatfs_cc_create_chain_ret
26a18     2D 00 64 FD | 	ret
26a1c                 | 
26a1c                 | _fatfs_cc_dir_clear
26a1c     06 4A 05 F6 | 	mov	COUNT_, #6
26a20     A8 00 A0 FD | 	call	#pushregs_
26a24     09 1F 02 F6 | 	mov	local01, arg01
26a28     0A 21 02 F6 | 	mov	local02, arg02
26a2c     0F 13 02 F6 | 	mov	arg01, local01
26a30     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
26a34     00 FA 0D F2 | 	cmp	result1, #0 wz
26a38     01 FA 05 56 |  if_ne	mov	result1, #1
26a3c     90 00 90 5D |  if_ne	jmp	#LR__3922
26a40     0F 13 02 F6 | 	mov	arg01, local01
26a44     10 15 02 F6 | 	mov	arg02, local02
26a48     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
26a4c     FD 22 02 F6 | 	mov	local03, result1
26a50     30 1E 06 F1 | 	add	local01, #48
26a54     0F 23 62 FC | 	wrlong	local03, local01
26a58     04 1E 06 F1 | 	add	local01, #4
26a5c     0F 13 02 F6 | 	mov	arg01, local01
26a60     00 14 06 F6 | 	mov	arg02, #0
26a64     09 16 C6 F9 | 	decod	arg03, #9
26a68     98 00 A0 FD | 	call	#\builtin_bytefill_
26a6c     0F 25 02 F6 | 	mov	local04, local01
26a70                 | ' #line 1667 "ff.c"
26a70                 | ' 	{
26a70                 | ' 		ibuf = fs->win; szb = 1;
26a70                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
26a70     00 26 06 F6 | 	mov	local05, #0
26a74     34 1E 86 F1 | 	sub	local01, #52
26a78                 | LR__3920
26a78     0A 1E 06 F1 | 	add	local01, #10
26a7c     0F 29 E2 FA | 	rdword	local06, local01
26a80     0A 1E 86 F1 | 	sub	local01, #10
26a84     14 27 12 F2 | 	cmp	local05, local06 wc
26a88     2C 00 90 3D |  if_ae	jmp	#LR__3921
26a8c     01 1E 06 F1 | 	add	local01, #1
26a90     0F 13 C2 FA | 	rdbyte	arg01, local01
26a94     01 1E 86 F1 | 	sub	local01, #1
26a98     12 15 02 F6 | 	mov	arg02, local04
26a9c     11 17 02 F6 | 	mov	arg03, local03
26aa0     13 17 02 F1 | 	add	arg03, local05
26aa4     01 18 06 F6 | 	mov	arg04, #1
26aa8     9C EF BF FD | 	call	#_fatfs_cc_disk_write
26aac     00 FA 0D F2 | 	cmp	result1, #0 wz
26ab0     01 26 06 A1 |  if_e	add	local05, #1
26ab4     C0 FF 9F AD |  if_e	jmp	#LR__3920
26ab8                 | LR__3921
26ab8                 | ' 	}
26ab8                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
26ab8     0A 1E 06 F1 | 	add	local01, #10
26abc     0F 25 E2 FA | 	rdword	local04, local01
26ac0     12 27 0A F2 | 	cmp	local05, local04 wz
26ac4     00 28 06 A6 |  if_e	mov	local06, #0
26ac8     01 28 06 56 |  if_ne	mov	local06, #1
26acc     14 FB 01 F6 | 	mov	result1, local06
26ad0                 | LR__3922
26ad0     A7 F0 03 F6 | 	mov	ptra, fp
26ad4     B2 00 A0 FD | 	call	#popregs_
26ad8                 | _fatfs_cc_dir_clear_ret
26ad8     2D 00 64 FD | 	ret
26adc                 | 
26adc                 | _fatfs_cc_dir_sdi
26adc     06 4A 05 F6 | 	mov	COUNT_, #6
26ae0     A8 00 A0 FD | 	call	#pushregs_
26ae4     09 1F 02 F6 | 	mov	local01, arg01
26ae8     0A 21 02 F6 | 	mov	local02, arg02
26aec     0F 23 02 FB | 	rdlong	local03, local01
26af0     00 10 00 FF 
26af4     00 20 16 F2 | 	cmp	local02, ##2097152 wc
26af8     1F 20 CE C7 |  if_b	test	local02, #31 wz
26afc                 | ' 		return FR_INT_ERR;
26afc     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
26b00     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3936
26b04     10 1E 06 F1 | 	add	local01, #16
26b08     0F 21 62 FC | 	wrlong	local02, local01
26b0c     08 1E 86 F1 | 	sub	local01, #8
26b10     0F 25 0A FB | 	rdlong	local04, local01 wz
26b14     08 1E 86 F1 | 	sub	local01, #8
26b18     11 27 C2 AA |  if_e	rdbyte	local05, local03
26b1c     03 26 16 A2 |  if_e	cmp	local05, #3 wc
26b20     28 22 06 21 |  if_nc_and_z	add	local03, #40
26b24     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
26b28     28 22 86 21 |  if_nc_and_z	sub	local03, #40
26b2c     00 24 0E F2 | 	cmp	local04, #0 wz
26b30     3C 00 90 5D |  if_ne	jmp	#LR__3930
26b34     10 27 02 F6 | 	mov	local05, local02
26b38     05 26 46 F0 | 	shr	local05, #5
26b3c     08 22 06 F1 | 	add	local03, #8
26b40     11 15 E2 FA | 	rdword	arg02, local03
26b44     08 22 86 F1 | 	sub	local03, #8
26b48     0A 27 12 F2 | 	cmp	local05, arg02 wc
26b4c     02 FA 05 36 |  if_ae	mov	result1, #2
26b50     E4 00 90 3D |  if_ae	jmp	#LR__3936
26b54     28 22 06 F1 | 	add	local03, #40
26b58     11 27 02 FB | 	rdlong	local05, local03
26b5c     28 22 86 F1 | 	sub	local03, #40
26b60     18 1E 06 F1 | 	add	local01, #24
26b64     0F 27 62 FC | 	wrlong	local05, local01
26b68     18 1E 86 F1 | 	sub	local01, #24
26b6c     7C 00 90 FD | 	jmp	#LR__3935
26b70                 | LR__3930
26b70     0A 22 06 F1 | 	add	local03, #10
26b74     11 29 E2 FA | 	rdword	local06, local03
26b78     0A 22 86 F1 | 	sub	local03, #10
26b7c     09 28 66 F0 | 	shl	local06, #9
26b80                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
26b80                 | ' 		while (ofs >= csz) {
26b80                 | LR__3931
26b80     14 21 12 F2 | 	cmp	local02, local06 wc
26b84     4C 00 90 CD |  if_b	jmp	#LR__3934
26b88     0F 13 02 F6 | 	mov	arg01, local01
26b8c     12 15 02 F6 | 	mov	arg02, local04
26b90     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
26b94     FD 24 02 F6 | 	mov	local04, result1
26b98     FF FF 7F FF 
26b9c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
26ba0     01 FA 05 A6 |  if_e	mov	result1, #1
26ba4     90 00 90 AD |  if_e	jmp	#LR__3936
26ba8     02 24 16 F2 | 	cmp	local04, #2 wc
26bac     14 00 90 CD |  if_b	jmp	#LR__3932
26bb0     18 22 06 F1 | 	add	local03, #24
26bb4     11 27 02 FB | 	rdlong	local05, local03
26bb8     18 22 86 F1 | 	sub	local03, #24
26bbc     13 25 12 F2 | 	cmp	local04, local05 wc
26bc0     08 00 90 CD |  if_b	jmp	#LR__3933
26bc4                 | LR__3932
26bc4     02 FA 05 F6 | 	mov	result1, #2
26bc8     6C 00 90 FD | 	jmp	#LR__3936
26bcc                 | LR__3933
26bcc     14 21 82 F1 | 	sub	local02, local06
26bd0     AC FF 9F FD | 	jmp	#LR__3931
26bd4                 | LR__3934
26bd4     11 13 02 F6 | 	mov	arg01, local03
26bd8     12 15 02 F6 | 	mov	arg02, local04
26bdc     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
26be0     18 1E 06 F1 | 	add	local01, #24
26be4     0F FB 61 FC | 	wrlong	result1, local01
26be8     18 1E 86 F1 | 	sub	local01, #24
26bec                 | LR__3935
26bec     14 1E 06 F1 | 	add	local01, #20
26bf0     0F 25 62 FC | 	wrlong	local04, local01
26bf4     04 1E 06 F1 | 	add	local01, #4
26bf8     0F 27 0A FB | 	rdlong	local05, local01 wz
26bfc     18 1E 86 F1 | 	sub	local01, #24
26c00     02 FA 05 A6 |  if_e	mov	result1, #2
26c04     30 00 90 AD |  if_e	jmp	#LR__3936
26c08     10 29 02 F6 | 	mov	local06, local02
26c0c     09 28 46 F0 | 	shr	local06, #9
26c10     18 1E 06 F1 | 	add	local01, #24
26c14     0F 27 02 FB | 	rdlong	local05, local01
26c18     14 27 02 F1 | 	add	local05, local06
26c1c     0F 27 62 FC | 	wrlong	local05, local01
26c20     34 22 06 F1 | 	add	local03, #52
26c24     FF 21 06 F5 | 	and	local02, #511
26c28     10 23 02 F1 | 	add	local03, local02
26c2c     04 1E 06 F1 | 	add	local01, #4
26c30     0F 23 62 FC | 	wrlong	local03, local01
26c34                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
26c34                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
26c34                 | ' 
26c34                 | ' 	return FR_OK;
26c34     00 FA 05 F6 | 	mov	result1, #0
26c38                 | LR__3936
26c38     A7 F0 03 F6 | 	mov	ptra, fp
26c3c     B2 00 A0 FD | 	call	#popregs_
26c40                 | _fatfs_cc_dir_sdi_ret
26c40     2D 00 64 FD | 	ret
26c44                 | 
26c44                 | _fatfs_cc_dir_next
26c44     05 4A 05 F6 | 	mov	COUNT_, #5
26c48     A8 00 A0 FD | 	call	#pushregs_
26c4c     09 1F 02 F6 | 	mov	local01, arg01
26c50     0A 21 02 F6 | 	mov	local02, arg02
26c54     0F 23 02 FB | 	rdlong	local03, local01
26c58     10 1E 06 F1 | 	add	local01, #16
26c5c     0F 25 02 FB | 	rdlong	local04, local01
26c60     10 1E 86 F1 | 	sub	local01, #16
26c64     20 24 06 F1 | 	add	local04, #32
26c68     00 10 00 FF 
26c6c     00 24 16 F2 | 	cmp	local04, ##2097152 wc
26c70     18 1E 06 31 |  if_ae	add	local01, #24
26c74     0F 01 68 3C |  if_ae	wrlong	#0, local01
26c78     18 1E 86 31 |  if_ae	sub	local01, #24
26c7c     18 1E 06 F1 | 	add	local01, #24
26c80     0F 15 0A FB | 	rdlong	arg02, local01 wz
26c84     18 1E 86 F1 | 	sub	local01, #24
26c88     04 FA 05 A6 |  if_e	mov	result1, #4
26c8c     64 01 90 AD |  if_e	jmp	#LR__3945
26c90     FF 25 CE F7 | 	test	local04, #511 wz
26c94     3C 01 90 5D |  if_ne	jmp	#LR__3944
26c98     18 1E 06 F1 | 	add	local01, #24
26c9c     0F 15 02 FB | 	rdlong	arg02, local01
26ca0     01 14 06 F1 | 	add	arg02, #1
26ca4     0F 15 62 FC | 	wrlong	arg02, local01
26ca8     04 1E 86 F1 | 	sub	local01, #4
26cac     0F 15 0A FB | 	rdlong	arg02, local01 wz
26cb0     14 1E 86 F1 | 	sub	local01, #20
26cb4     2C 00 90 5D |  if_ne	jmp	#LR__3940
26cb8     12 15 02 F6 | 	mov	arg02, local04
26cbc     05 14 46 F0 | 	shr	arg02, #5
26cc0     08 22 06 F1 | 	add	local03, #8
26cc4     11 21 E2 FA | 	rdword	local02, local03
26cc8     08 22 86 F1 | 	sub	local03, #8
26ccc     10 15 12 F2 | 	cmp	arg02, local02 wc
26cd0     18 1E 06 31 |  if_ae	add	local01, #24
26cd4     0F 01 68 3C |  if_ae	wrlong	#0, local01
26cd8                 | ' 				dp->sect = 0; return FR_NO_FILE;
26cd8     04 FA 05 36 |  if_ae	mov	result1, #4
26cdc     14 01 90 3D |  if_ae	jmp	#LR__3945
26ce0     F0 00 90 FD | 	jmp	#LR__3943
26ce4                 | LR__3940
26ce4     12 13 02 F6 | 	mov	arg01, local04
26ce8     09 12 46 F0 | 	shr	arg01, #9
26cec     0A 22 06 F1 | 	add	local03, #10
26cf0     11 15 E2 FA | 	rdword	arg02, local03
26cf4     0A 22 86 F1 | 	sub	local03, #10
26cf8     01 14 86 F1 | 	sub	arg02, #1
26cfc     0A 13 CA F7 | 	test	arg01, arg02 wz
26d00     D0 00 90 5D |  if_ne	jmp	#LR__3942
26d04     0F 13 02 F6 | 	mov	arg01, local01
26d08     14 1E 06 F1 | 	add	local01, #20
26d0c     0F 15 02 FB | 	rdlong	arg02, local01
26d10     14 1E 86 F1 | 	sub	local01, #20
26d14     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
26d18     FD 26 02 F6 | 	mov	local05, result1
26d1c     02 26 16 F2 | 	cmp	local05, #2 wc
26d20     02 FA 05 C6 |  if_b	mov	result1, #2
26d24     CC 00 90 CD |  if_b	jmp	#LR__3945
26d28     FF FF 7F FF 
26d2c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
26d30     01 FA 05 A6 |  if_e	mov	result1, #1
26d34     BC 00 90 AD |  if_e	jmp	#LR__3945
26d38     18 22 06 F1 | 	add	local03, #24
26d3c     11 15 02 FB | 	rdlong	arg02, local03
26d40     18 22 86 F1 | 	sub	local03, #24
26d44     0A 27 12 F2 | 	cmp	local05, arg02 wc
26d48     68 00 90 CD |  if_b	jmp	#LR__3941
26d4c     00 20 0E F2 | 	cmp	local02, #0 wz
26d50     18 1E 06 A1 |  if_e	add	local01, #24
26d54     0F 01 68 AC |  if_e	wrlong	#0, local01
26d58                 | ' 						dp->sect = 0; return FR_NO_FILE;
26d58     04 FA 05 A6 |  if_e	mov	result1, #4
26d5c     94 00 90 AD |  if_e	jmp	#LR__3945
26d60     0F 13 02 F6 | 	mov	arg01, local01
26d64     14 1E 06 F1 | 	add	local01, #20
26d68     0F 15 02 FB | 	rdlong	arg02, local01
26d6c     14 1E 86 F1 | 	sub	local01, #20
26d70     84 FA BF FD | 	call	#_fatfs_cc_create_chain
26d74     FD 26 0A F6 | 	mov	local05, result1 wz
26d78     07 FA 05 A6 |  if_e	mov	result1, #7
26d7c     74 00 90 AD |  if_e	jmp	#LR__3945
26d80     01 26 0E F2 | 	cmp	local05, #1 wz
26d84     02 FA 05 A6 |  if_e	mov	result1, #2
26d88     68 00 90 AD |  if_e	jmp	#LR__3945
26d8c     FF FF 7F FF 
26d90     FF 27 0E F2 | 	cmp	local05, ##-1 wz
26d94     01 FA 05 A6 |  if_e	mov	result1, #1
26d98     58 00 90 AD |  if_e	jmp	#LR__3945
26d9c     13 15 02 F6 | 	mov	arg02, local05
26da0     11 13 02 F6 | 	mov	arg01, local03
26da4     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
26da8     00 FA 0D F2 | 	cmp	result1, #0 wz
26dac     01 FA 05 56 |  if_ne	mov	result1, #1
26db0     40 00 90 5D |  if_ne	jmp	#LR__3945
26db4                 | LR__3941
26db4     14 1E 06 F1 | 	add	local01, #20
26db8     0F 27 62 FC | 	wrlong	local05, local01
26dbc     11 13 02 F6 | 	mov	arg01, local03
26dc0     13 15 02 F6 | 	mov	arg02, local05
26dc4     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
26dc8     04 1E 06 F1 | 	add	local01, #4
26dcc     0F FB 61 FC | 	wrlong	result1, local01
26dd0     18 1E 86 F1 | 	sub	local01, #24
26dd4                 | LR__3942
26dd4                 | LR__3943
26dd4                 | LR__3944
26dd4     10 1E 06 F1 | 	add	local01, #16
26dd8     0F 25 62 FC | 	wrlong	local04, local01
26ddc     34 22 06 F1 | 	add	local03, #52
26de0     FF 25 06 F5 | 	and	local04, #511
26de4     12 23 02 F1 | 	add	local03, local04
26de8     0C 1E 06 F1 | 	add	local01, #12
26dec     0F 23 62 FC | 	wrlong	local03, local01
26df0                 | ' #line 1771 "ff.c"
26df0                 | ' 				}
26df0                 | ' 				dp->clust = clst;
26df0                 | ' 				dp->sect = clst2sect(fs, clst);
26df0                 | ' 			}
26df0                 | ' 		}
26df0                 | ' 	}
26df0                 | ' 	dp->dptr = ofs;
26df0                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
26df0                 | ' 
26df0                 | ' 	return FR_OK;
26df0     00 FA 05 F6 | 	mov	result1, #0
26df4                 | LR__3945
26df4     A7 F0 03 F6 | 	mov	ptra, fp
26df8     B2 00 A0 FD | 	call	#popregs_
26dfc                 | _fatfs_cc_dir_next_ret
26dfc     2D 00 64 FD | 	ret
26e00                 | 
26e00                 | _fatfs_cc_dir_alloc
26e00     08 4A 05 F6 | 	mov	COUNT_, #8
26e04     A8 00 A0 FD | 	call	#pushregs_
26e08     09 1F 02 F6 | 	mov	local01, arg01
26e0c     0A 21 02 F6 | 	mov	local02, arg02
26e10     0F 23 02 FB | 	rdlong	local03, local01
26e14     0F 13 02 F6 | 	mov	arg01, local01
26e18     00 14 06 F6 | 	mov	arg02, #0
26e1c     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
26e20     FD 24 0A F6 | 	mov	local04, result1 wz
26e24     70 00 90 5D |  if_ne	jmp	#LR__3954
26e28     00 26 06 F6 | 	mov	local05, #0
26e2c                 | ' 		n = 0;
26e2c                 | ' 		do {
26e2c                 | LR__3950
26e2c     18 1E 06 F1 | 	add	local01, #24
26e30     0F 15 02 FB | 	rdlong	arg02, local01
26e34     18 1E 86 F1 | 	sub	local01, #24
26e38     11 13 02 F6 | 	mov	arg01, local03
26e3c     38 F3 BF FD | 	call	#_fatfs_cc_move_window
26e40     FD 24 0A F6 | 	mov	local04, result1 wz
26e44     50 00 90 5D |  if_ne	jmp	#LR__3953
26e48     1C 1E 06 F1 | 	add	local01, #28
26e4c     0F 29 02 FB | 	rdlong	local06, local01
26e50     1C 1E 86 F1 | 	sub	local01, #28
26e54     14 29 C2 FA | 	rdbyte	local06, local06
26e58     E5 28 0E F2 | 	cmp	local06, #229 wz
26e5c     1C 1E 06 51 |  if_ne	add	local01, #28
26e60     0F 2B 02 5B |  if_ne	rdlong	local07, local01
26e64     1C 1E 86 51 |  if_ne	sub	local01, #28
26e68     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
26e6c     10 00 90 5D |  if_ne	jmp	#LR__3951
26e70     01 26 06 F1 | 	add	local05, #1
26e74     10 27 0A F2 | 	cmp	local05, local02 wz
26e78     1C 00 90 AD |  if_e	jmp	#LR__3953
26e7c     04 00 90 FD | 	jmp	#LR__3952
26e80                 | LR__3951
26e80     00 26 06 F6 | 	mov	local05, #0
26e84                 | LR__3952
26e84     0F 13 02 F6 | 	mov	arg01, local01
26e88     01 14 06 F6 | 	mov	arg02, #1
26e8c     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
26e90     FD 24 0A F6 | 	mov	local04, result1 wz
26e94     94 FF 9F AD |  if_e	jmp	#LR__3950
26e98                 | LR__3953
26e98                 | LR__3954
26e98     04 24 0E F2 | 	cmp	local04, #4 wz
26e9c     07 24 06 A6 |  if_e	mov	local04, #7
26ea0                 | ' 	return res;
26ea0     12 FB 01 F6 | 	mov	result1, local04
26ea4     A7 F0 03 F6 | 	mov	ptra, fp
26ea8     B2 00 A0 FD | 	call	#popregs_
26eac                 | _fatfs_cc_dir_alloc_ret
26eac     2D 00 64 FD | 	ret
26eb0                 | 
26eb0                 | _fatfs_cc_ld_clust
26eb0     09 01 02 F6 | 	mov	_var01, arg01
26eb4     0A 13 02 F6 | 	mov	arg01, arg02
26eb8     1A 12 06 F1 | 	add	arg01, #26
26ebc                 | ' {
26ebc                 | ' 
26ebc                 | ' 	return *((WORD*)ptr);
26ebc     09 FB E1 FA | 	rdword	result1, arg01
26ec0     FD 12 32 F9 | 	getword	arg01, result1, #0
26ec4     00 01 C2 FA | 	rdbyte	_var01, _var01
26ec8     03 00 0E F2 | 	cmp	_var01, #3 wz
26ecc     14 14 06 A1 |  if_e	add	arg02, #20
26ed0                 | ' {
26ed0                 | ' 
26ed0                 | ' 	return *((WORD*)ptr);
26ed0     0A FB E1 AA |  if_e	rdword	result1, arg02
26ed4     10 FA 65 A0 |  if_e	shl	result1, #16
26ed8     FD 12 42 A5 |  if_e	or	arg01, result1
26edc                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
26edc                 | ' 	}
26edc                 | ' 
26edc                 | ' 	return cl;
26edc     09 FB 01 F6 | 	mov	result1, arg01
26ee0                 | _fatfs_cc_ld_clust_ret
26ee0     2D 00 64 FD | 	ret
26ee4                 | 
26ee4                 | _fatfs_cc_st_clust
26ee4     09 01 02 F6 | 	mov	_var01, arg01
26ee8     0A 13 02 F6 | 	mov	arg01, arg02
26eec     1A 12 06 F1 | 	add	arg01, #26
26ef0     09 17 52 FC | 	wrword	arg03, arg01
26ef4     00 01 C2 FA | 	rdbyte	_var01, _var01
26ef8     03 00 0E F2 | 	cmp	_var01, #3 wz
26efc     14 14 06 A1 |  if_e	add	arg02, #20
26f00     10 16 46 A0 |  if_e	shr	arg03, #16
26f04     0A 17 52 AC |  if_e	wrword	arg03, arg02
26f08                 | _fatfs_cc_st_clust_ret
26f08     2D 00 64 FD | 	ret
26f0c                 | 
26f0c                 | _fatfs_cc_cmp_lfn
26f0c     07 4A 05 F6 | 	mov	COUNT_, #7
26f10     A8 00 A0 FD | 	call	#pushregs_
26f14     09 1F 02 F6 | 	mov	local01, arg01
26f18     0A 13 02 F6 | 	mov	arg01, arg02
26f1c     1A 12 06 F1 | 	add	arg01, #26
26f20                 | ' {
26f20                 | ' 
26f20                 | ' 	return *((WORD*)ptr);
26f20     09 FB E9 FA | 	rdword	result1, arg01 wz
26f24     00 FA 05 56 |  if_ne	mov	result1, #0
26f28     E0 00 90 5D |  if_ne	jmp	#LR__3966
26f2c     0A 21 C2 FA | 	rdbyte	local02, arg02
26f30     3F 20 06 F5 | 	and	local02, #63
26f34     01 20 86 F1 | 	sub	local02, #1
26f38     0D 20 06 FD | 	qmul	local02, #13
26f3c                 | ' 
26f3c                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
26f3c                 | ' 
26f3c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
26f3c     01 22 06 F6 | 	mov	local03, #1
26f40     00 24 06 F6 | 	mov	local04, #0
26f44     18 26 62 FD | 	getqx	local05
26f48                 | LR__3960
26f48     0D 24 16 F2 | 	cmp	local04, #13 wc
26f4c     9C 00 90 3D |  if_ae	jmp	#LR__3965
26f50     0A 13 02 F6 | 	mov	arg01, arg02
26f54     12 21 02 F6 | 	mov	local02, local04
26f58     01 00 00 FF 
26f5c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
26f60     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
26f64     10 21 C2 FA | 	rdbyte	local02, local02
26f68     01 20 06 FA | 	mul	local02, #1
26f6c     10 13 02 F1 | 	add	arg01, local02
26f70     01 00 00 FF 
26f74     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
26f78                 | ' {
26f78                 | ' 
26f78                 | ' 	return *((WORD*)ptr);
26f78     09 FB E1 FA | 	rdword	result1, arg01
26f7c     FD 28 02 F6 | 	mov	local06, result1
26f80     11 21 02 F6 | 	mov	local02, local03
26f84     0F 20 4E F7 | 	zerox	local02, #15 wz
26f88     44 00 90 AD |  if_e	jmp	#LR__3963
26f8c     00 27 16 F2 | 	cmp	local05, #256 wc
26f90     2C 00 90 3D |  if_ae	jmp	#LR__3961
26f94     14 13 32 F9 | 	getword	arg01, local06, #0
26f98     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
26f9c     FD 20 02 F6 | 	mov	local02, result1
26fa0     13 23 02 F6 | 	mov	local03, local05
26fa4     01 22 66 F0 | 	shl	local03, #1
26fa8     0F 23 02 F1 | 	add	local03, local01
26fac     11 13 E2 FA | 	rdword	arg01, local03
26fb0     01 26 06 F1 | 	add	local05, #1
26fb4     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
26fb8     FD 20 0A F2 | 	cmp	local02, result1 wz
26fbc     08 00 90 AD |  if_e	jmp	#LR__3962
26fc0                 | LR__3961
26fc0                 | ' 				return 0;
26fc0     00 FA 05 F6 | 	mov	result1, #0
26fc4     44 00 90 FD | 	jmp	#LR__3966
26fc8                 | LR__3962
26fc8     14 23 02 F6 | 	mov	local03, local06
26fcc     14 00 90 FD | 	jmp	#LR__3964
26fd0                 | LR__3963
26fd0     14 29 32 F9 | 	getword	local06, local06, #0
26fd4     7F 00 00 FF 
26fd8     FF 29 0E F2 | 	cmp	local06, ##65535 wz
26fdc     00 FA 05 56 |  if_ne	mov	result1, #0
26fe0     28 00 90 5D |  if_ne	jmp	#LR__3966
26fe4                 | LR__3964
26fe4     01 24 06 F1 | 	add	local04, #1
26fe8     5C FF 9F FD | 	jmp	#LR__3960
26fec                 | LR__3965
26fec     0A 21 C2 FA | 	rdbyte	local02, arg02
26ff0     40 20 CE F7 | 	test	local02, #64 wz
26ff4     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
26ff8     01 26 66 50 |  if_ne	shl	local05, #1
26ffc     0F 27 02 51 |  if_ne	add	local05, local01
27000     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
27004     00 FA 05 56 |  if_ne	mov	result1, #0
27008                 | ' 
27008                 | ' 	return 1;
27008     01 FA 05 A6 |  if_e	mov	result1, #1
2700c                 | LR__3966
2700c     A7 F0 03 F6 | 	mov	ptra, fp
27010     B2 00 A0 FD | 	call	#popregs_
27014                 | _fatfs_cc_cmp_lfn_ret
27014     2D 00 64 FD | 	ret
27018                 | 
27018                 | _fatfs_cc_pick_lfn
27018     09 01 02 F6 | 	mov	_var01, arg01
2701c     0A 13 02 F6 | 	mov	arg01, arg02
27020     1A 12 06 F1 | 	add	arg01, #26
27024                 | ' {
27024                 | ' 
27024                 | ' 	return *((WORD*)ptr);
27024     09 FB E9 FA | 	rdword	result1, arg01 wz
27028     00 FA 05 56 |  if_ne	mov	result1, #0
2702c     D4 00 90 5D |  if_ne	jmp	#LR__3975
27030     0A 03 C2 FA | 	rdbyte	_var02, arg02
27034     40 02 26 F5 | 	andn	_var02, #64
27038     01 02 86 F1 | 	sub	_var02, #1
2703c     0D 02 06 FD | 	qmul	_var02, #13
27040                 | ' 
27040                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
27040                 | ' 
27040                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
27040     01 04 06 F6 | 	mov	_var03, #1
27044     00 06 06 F6 | 	mov	_var04, #0
27048     18 08 62 FD | 	getqx	_var05
2704c                 | LR__3970
2704c     0D 06 16 F2 | 	cmp	_var04, #13 wc
27050     80 00 90 3D |  if_ae	jmp	#LR__3973
27054     0A 13 02 F6 | 	mov	arg01, arg02
27058     03 03 02 F6 | 	mov	_var02, _var04
2705c     01 00 00 FF 
27060     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
27064     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
27068     01 03 C2 FA | 	rdbyte	_var02, _var02
2706c     01 02 06 FA | 	mul	_var02, #1
27070     01 13 02 F1 | 	add	arg01, _var02
27074     01 00 00 FF 
27078     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2707c                 | ' {
2707c                 | ' 
2707c                 | ' 	return *((WORD*)ptr);
2707c     09 FB E1 FA | 	rdword	result1, arg01
27080     FD 0A 02 F6 | 	mov	_var06, result1
27084     02 03 02 F6 | 	mov	_var02, _var03
27088     0F 02 4E F7 | 	zerox	_var02, #15 wz
2708c     28 00 90 AD |  if_e	jmp	#LR__3971
27090     00 09 16 F2 | 	cmp	_var05, #256 wc
27094     00 FA 05 36 |  if_ae	mov	result1, #0
27098     68 00 90 3D |  if_ae	jmp	#LR__3975
2709c     04 03 02 F6 | 	mov	_var02, _var05
270a0     01 02 66 F0 | 	shl	_var02, #1
270a4     00 03 02 F1 | 	add	_var02, _var01
270a8     05 05 02 F6 | 	mov	_var03, _var06
270ac     01 05 52 FC | 	wrword	_var03, _var02
270b0     01 08 06 F1 | 	add	_var05, #1
270b4     14 00 90 FD | 	jmp	#LR__3972
270b8                 | LR__3971
270b8     05 0B 32 F9 | 	getword	_var06, _var06, #0
270bc     7F 00 00 FF 
270c0     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
270c4     00 FA 05 56 |  if_ne	mov	result1, #0
270c8     38 00 90 5D |  if_ne	jmp	#LR__3975
270cc                 | LR__3972
270cc     01 06 06 F1 | 	add	_var04, #1
270d0     78 FF 9F FD | 	jmp	#LR__3970
270d4                 | LR__3973
270d4     0A 03 C2 FA | 	rdbyte	_var02, arg02
270d8     40 02 CE F7 | 	test	_var02, #64 wz
270dc     02 0D 02 56 |  if_ne	mov	_var07, _var03
270e0     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
270e4     18 00 90 AD |  if_e	jmp	#LR__3974
270e8     00 09 16 F2 | 	cmp	_var05, #256 wc
270ec     00 FA 05 36 |  if_ae	mov	result1, #0
270f0     10 00 90 3D |  if_ae	jmp	#LR__3975
270f4     01 08 66 F0 | 	shl	_var05, #1
270f8     00 09 02 F1 | 	add	_var05, _var01
270fc     04 01 58 FC | 	wrword	#0, _var05
27100                 | LR__3974
27100                 | ' 		lfnbuf[i] = 0;
27100                 | ' 	}
27100                 | ' 
27100                 | ' 	return 1;
27100     01 FA 05 F6 | 	mov	result1, #1
27104                 | LR__3975
27104                 | _fatfs_cc_pick_lfn_ret
27104     2D 00 64 FD | 	ret
27108                 | 
27108                 | _fatfs_cc_put_lfn
27108     0D 14 06 F1 | 	add	arg02, #13
2710c     0A 19 42 FC | 	wrbyte	arg04, arg02
27110     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
27114     01 18 86 F1 | 	sub	arg04, #1
27118     0D 18 06 FD | 	qmul	arg04, #13
2711c     09 01 02 F6 | 	mov	_var01, arg01
27120     02 14 86 F1 | 	sub	arg02, #2
27124     0A 1F 48 FC | 	wrbyte	#15, arg02
27128     01 14 06 F1 | 	add	arg02, #1
2712c     0A 01 48 FC | 	wrbyte	#0, arg02
27130     0C 14 86 F1 | 	sub	arg02, #12
27134     0A 13 02 F6 | 	mov	arg01, arg02
27138     1A 12 06 F1 | 	add	arg01, #26
2713c     09 01 58 FC | 	wrword	#0, arg01
27140     00 02 06 F6 | 	mov	_var02, #0
27144     00 04 06 F6 | 	mov	_var03, #0
27148                 | ' 	BYTE* dir,
27148                 | ' 	BYTE ord,
27148                 | ' 	BYTE sum
27148                 | ' )
27148                 | ' {
27148                 | ' 	UINT i, s;
27148                 | ' 	WCHAR wc;
27148                 | ' 
27148                 | ' 
27148                 | ' 	dir[ 13 ] = sum;
27148                 | ' 	dir[ 11 ] =  0x0F ;
27148                 | ' 	dir[ 12 ] = 0;
27148                 | ' 	st_word(dir +  26 , 0);
27148                 | ' 
27148                 | ' 	i = (ord - 1) * 13;
27148                 | ' 	s = wc = 0;
27148                 | ' 	do {
27148     01 00 00 FF 
2714c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
27150     18 06 62 FD | 	getqx	_var04
27154     97 2A 48 FB | 	callpa	#(@LR__3981-@LR__3980)>>2,fcache_load_ptr_
27158                 | LR__3980
27158     01 19 32 F9 | 	getword	arg04, _var02, #0
2715c     7F 00 00 FF 
27160     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
27164     03 13 02 56 |  if_ne	mov	arg01, _var04
27168     01 06 06 51 |  if_ne	add	_var04, #1
2716c     01 12 66 50 |  if_ne	shl	arg01, #1
27170     00 13 02 51 |  if_ne	add	arg01, _var01
27174     09 03 E2 5A |  if_ne	rdword	_var02, arg01
27178     0A 13 02 F6 | 	mov	arg01, arg02
2717c     02 19 02 F6 | 	mov	arg04, _var03
27180     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
27184     0C 19 C2 FA | 	rdbyte	arg04, arg04
27188     01 18 06 FA | 	mul	arg04, #1
2718c     0C 13 02 F1 | 	add	arg01, arg04
27190     09 03 52 FC | 	wrword	_var02, arg01
27194     01 19 02 F6 | 	mov	arg04, _var02
27198     0F 18 4E F7 | 	zerox	arg04, #15 wz
2719c     0F 02 CE A9 |  if_e	bmask	_var02, #15
271a0     01 04 06 F1 | 	add	_var03, #1
271a4     0D 04 16 F2 | 	cmp	_var03, #13 wc
271a8     AC FF 9F CD |  if_b	jmp	#LR__3980
271ac                 | LR__3981
271ac     01 00 00 FF 
271b0     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
271b4     01 03 32 F9 | 	getword	_var02, _var02, #0
271b8     7F 00 00 FF 
271bc     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
271c0     01 06 66 50 |  if_ne	shl	_var04, #1
271c4     00 07 02 51 |  if_ne	add	_var04, _var01
271c8     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
271cc     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
271d0     40 16 46 A5 |  if_e	or	arg03, #64
271d4     0A 17 42 FC | 	wrbyte	arg03, arg02
271d8                 | _fatfs_cc_put_lfn_ret
271d8     2D 00 64 FD | 	ret
271dc                 | 
271dc                 | _fatfs_cc_gen_numname
271dc     08 4A 05 F6 | 	mov	COUNT_, #8
271e0     A8 00 A0 FD | 	call	#pushregs_
271e4     2C F0 07 F1 | 	add	ptra, #44
271e8     09 1F 02 F6 | 	mov	local01, arg01
271ec     0A 21 02 F6 | 	mov	local02, arg02
271f0     0B 23 02 F6 | 	mov	local03, arg03
271f4     0C 25 02 F6 | 	mov	local04, arg04
271f8     0F 13 02 F6 | 	mov	arg01, local01
271fc     10 15 02 F6 | 	mov	arg02, local02
27200     0B 16 06 F6 | 	mov	arg03, #11
27204     2C 78 BF FD | 	call	#__system____builtin_memmove
27208     06 24 16 F2 | 	cmp	local04, #6 wc
2720c     48 00 90 CD |  if_b	jmp	#LR__3995
27210     12 27 02 F6 | 	mov	local05, local04
27214     97 1E 48 FB | 	callpa	#(@LR__3993-@LR__3990)>>2,fcache_load_ptr_
27218                 | ' 		sreg = seq;
27218                 | ' 		while (*lfn) {
27218                 | LR__3990
27218     11 29 EA FA | 	rdword	local06, local03 wz
2721c     34 00 90 AD |  if_e	jmp	#LR__3994
27220     11 2B E2 FA | 	rdword	local07, local03
27224                 | ' 			wc = *lfn++;
27224                 | ' 			for (i = 0; i < 16; i++) {
27224     02 22 06 F1 | 	add	local03, #2
27228     10 12 DC FC | 	rep	@LR__3992, #16
2722c                 | LR__3991
2722c     01 26 66 F0 | 	shl	local05, #1
27230     15 29 32 F9 | 	getword	local06, local07, #0
27234     01 28 06 F5 | 	and	local06, #1
27238     14 27 02 F1 | 	add	local05, local06
2723c     15 2B 32 F9 | 	getword	local07, local07, #0
27240     01 2A 46 F0 | 	shr	local07, #1
27244     10 26 2E F4 | 	testbn	local05, #16 wz
27248     88 00 00 5F 
2724c     21 26 66 55 |  if_ne	xor	local05, ##69665
27250                 | LR__3992
27250     C4 FF 9F FD | 	jmp	#LR__3990
27254                 | LR__3993
27254                 | LR__3994
27254     13 25 02 F6 | 	mov	local04, local05
27258                 | LR__3995
27258     07 2A 06 F6 | 	mov	local07, #7
2725c                 | ' 			}
2725c                 | ' 		}
2725c                 | ' 		seq = (UINT)sreg;
2725c                 | ' 	}
2725c                 | ' 
2725c                 | ' 
2725c                 | ' 	i = 7;
2725c                 | ' 	do {
2725c     10 4E 05 F1 | 	add	fp, #16
27260     97 1A 48 FB | 	callpa	#(@LR__3997-@LR__3996)>>2,fcache_load_ptr_
27264                 | LR__3996
27264     12 27 42 F8 | 	getnib	local05, local04, #0
27268     30 26 06 F1 | 	add	local05, #48
2726c     04 24 46 F0 | 	shr	local04, #4
27270     13 29 E2 F8 | 	getbyte	local06, local05, #0
27274     3A 28 16 F2 | 	cmp	local06, #58 wc
27278     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
2727c     07 26 06 31 |  if_ae	add	local05, #7
27280     15 29 02 F6 | 	mov	local06, local07
27284     01 2A 8E F1 | 	sub	local07, #1 wz
27288     A7 28 02 F1 | 	add	local06, fp
2728c     14 27 42 FC | 	wrbyte	local05, local06
27290     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
27294     CC FF 9F 5D |  if_ne	jmp	#LR__3996
27298                 | LR__3997
27298     15 29 02 F6 | 	mov	local06, local07
2729c     A7 28 02 F1 | 	add	local06, fp
272a0     14 FD 48 FC | 	wrbyte	#126, local06
272a4                 | ' 	ns[i] = '~';
272a4                 | ' 
272a4                 | ' 
272a4                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
272a4     00 26 06 F6 | 	mov	local05, #0
272a8     10 4E 85 F1 | 	sub	fp, #16
272ac     97 2A 48 FB | 	callpa	#(@LR__4000-@LR__3998)>>2,fcache_load_ptr_
272b0                 | LR__3998
272b0     15 27 12 F2 | 	cmp	local05, local07 wc
272b4     4C 00 90 3D |  if_ae	jmp	#LR__4001
272b8     13 29 02 F6 | 	mov	local06, local05
272bc     0F 29 02 F1 | 	add	local06, local01
272c0     14 29 C2 FA | 	rdbyte	local06, local06
272c4     20 28 0E F2 | 	cmp	local06, #32 wz
272c8     38 00 90 AD |  if_e	jmp	#LR__4001
272cc     13 13 02 F6 | 	mov	arg01, local05
272d0     0F 13 02 F1 | 	add	arg01, local01
272d4     09 13 CA FA | 	rdbyte	arg01, arg01 wz
272d8     00 FA 05 56 |  if_ne	mov	result1, #0
272dc                 | ' 
272dc                 | ' 	return 0;
272dc     00 FA 05 A6 |  if_e	mov	result1, #0
272e0     00 FA 0D F2 | 	cmp	result1, #0 wz
272e4     14 00 90 AD |  if_e	jmp	#LR__3999
272e8     15 29 02 F6 | 	mov	local06, local07
272ec     01 28 86 F1 | 	sub	local06, #1
272f0     14 27 0A F2 | 	cmp	local05, local06 wz
272f4     0C 00 90 AD |  if_e	jmp	#LR__4001
272f8     01 26 06 F1 | 	add	local05, #1
272fc                 | LR__3999
272fc     01 26 06 F1 | 	add	local05, #1
27300     AC FF 9F FD | 	jmp	#LR__3998
27304                 | LR__4000
27304                 | LR__4001
27304     97 20 48 FB | 	callpa	#(@LR__4005-@LR__4002)>>2,fcache_load_ptr_
27308                 | ' 			j++;
27308                 | ' 		}
27308                 | ' 	}
27308                 | ' 	do {
27308                 | LR__4002
27308     13 29 02 F6 | 	mov	local06, local05
2730c     0F 29 02 F1 | 	add	local06, local01
27310     08 2A 16 F2 | 	cmp	local07, #8 wc
27314     01 26 06 F1 | 	add	local05, #1
27318     1C 00 90 3D |  if_ae	jmp	#LR__4003
2731c     15 25 02 F6 | 	mov	local04, local07
27320     10 4E 05 F1 | 	add	fp, #16
27324     A7 24 02 F1 | 	add	local04, fp
27328     12 2D C2 FA | 	rdbyte	local08, local04
2732c     01 2A 06 F1 | 	add	local07, #1
27330     10 4E 85 F1 | 	sub	fp, #16
27334     04 00 90 FD | 	jmp	#LR__4004
27338                 | LR__4003
27338     20 2C 06 F6 | 	mov	local08, #32
2733c                 | LR__4004
2733c     14 2D 42 FC | 	wrbyte	local08, local06
27340     08 26 16 F2 | 	cmp	local05, #8 wc
27344     C0 FF 9F CD |  if_b	jmp	#LR__4002
27348                 | LR__4005
27348     A7 F0 03 F6 | 	mov	ptra, fp
2734c     B2 00 A0 FD | 	call	#popregs_
27350                 | _fatfs_cc_gen_numname_ret
27350     2D 00 64 FD | 	ret
27354                 | 
27354                 | _fatfs_cc_sum_sfn
27354     00 00 06 F6 | 	mov	_var01, #0
27358                 | ' )
27358                 | ' {
27358                 | ' 	BYTE sum = 0;
27358                 | ' 	UINT n = 11;
27358                 | ' 
27358                 | ' 	do {
27358     97 12 48 FB | 	callpa	#(@LR__4012-@LR__4010)>>2,fcache_load_ptr_
2735c                 | LR__4010
2735c     0B 10 DC FC | 	rep	@LR__4013, #11
27360                 | LR__4011
27360     00 FB E1 F8 | 	getbyte	result1, _var01, #0
27364     01 FA 45 F0 | 	shr	result1, #1
27368     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2736c     07 00 66 F0 | 	shl	_var01, #7
27370     00 FB 01 F1 | 	add	result1, _var01
27374     09 01 C2 FA | 	rdbyte	_var01, arg01
27378     FD 00 02 F1 | 	add	_var01, result1
2737c     01 12 06 F1 | 	add	arg01, #1
27380                 | LR__4012
27380                 | LR__4013
27380                 | ' 	return sum;
27380     00 FB 01 F6 | 	mov	result1, _var01
27384                 | _fatfs_cc_sum_sfn_ret
27384     2D 00 64 FD | 	ret
27388                 | 
27388                 | _fatfs_cc_dir_read
27388     0C 4A 05 F6 | 	mov	COUNT_, #12
2738c     A8 00 A0 FD | 	call	#pushregs_
27390     09 1F 02 F6 | 	mov	local01, arg01
27394     0A 21 02 F6 | 	mov	local02, arg02
27398     04 22 06 F6 | 	mov	local03, #4
2739c     0F 25 02 FB | 	rdlong	local04, local01
273a0     FF 26 06 F6 | 	mov	local05, #255
273a4     FF 28 06 F6 | 	mov	local06, #255
273a8                 | ' )
273a8                 | ' {
273a8                 | ' 	FRESULT res = FR_NO_FILE;
273a8                 | ' 	FATFS *fs = dp->obj.fs;
273a8                 | ' 	BYTE attr, b;
273a8                 | ' 
273a8                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
273a8                 | ' 
273a8                 | ' 
273a8                 | ' 	while (dp->sect) {
273a8                 | LR__4020
273a8     18 1E 06 F1 | 	add	local01, #24
273ac     0F FB 09 FB | 	rdlong	result1, local01 wz
273b0     18 1E 86 F1 | 	sub	local01, #24
273b4     AC 01 90 AD |  if_e	jmp	#LR__4030
273b8     18 1E 06 F1 | 	add	local01, #24
273bc     0F 15 02 FB | 	rdlong	arg02, local01
273c0     18 1E 86 F1 | 	sub	local01, #24
273c4     12 13 02 F6 | 	mov	arg01, local04
273c8     AC ED BF FD | 	call	#_fatfs_cc_move_window
273cc     FD 22 0A F6 | 	mov	local03, result1 wz
273d0     90 01 90 5D |  if_ne	jmp	#LR__4030
273d4     1C 1E 06 F1 | 	add	local01, #28
273d8     0F FB 01 FB | 	rdlong	result1, local01
273dc     1C 1E 86 F1 | 	sub	local01, #28
273e0     FD 2A C2 FA | 	rdbyte	local07, result1
273e4     15 FB 01 F6 | 	mov	result1, local07
273e8     07 FA 4D F7 | 	zerox	result1, #7 wz
273ec     04 22 06 A6 |  if_e	mov	local03, #4
273f0                 | ' 			res = FR_NO_FILE; break;
273f0     70 01 90 AD |  if_e	jmp	#LR__4030
273f4     1C 1E 06 F1 | 	add	local01, #28
273f8     0F 2D 02 FB | 	rdlong	local08, local01
273fc     0B 2C 06 F1 | 	add	local08, #11
27400     16 2F C2 FA | 	rdbyte	local09, local08
27404     3F 2E 06 F5 | 	and	local09, #63
27408     16 1E 86 F1 | 	sub	local01, #22
2740c     0F 2F 42 FC | 	wrbyte	local09, local01
27410     06 1E 86 F1 | 	sub	local01, #6
27414     15 FB E1 F8 | 	getbyte	result1, local07, #0
27418     E5 FA 0D F2 | 	cmp	result1, #229 wz
2741c     15 2D 02 56 |  if_ne	mov	local08, local07
27420     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
27424     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
27428     1C 00 90 AD |  if_e	jmp	#LR__4021
2742c     00 30 06 F6 | 	mov	local10, #0
27430     17 2D E2 F8 | 	getbyte	local08, local09, #0
27434     20 2C 26 F5 | 	andn	local08, #32
27438     08 2C 0E F2 | 	cmp	local08, #8 wz
2743c     01 30 06 A6 |  if_e	mov	local10, #1
27440     10 31 0A F2 | 	cmp	local10, local02 wz
27444     08 00 90 AD |  if_e	jmp	#LR__4022
27448                 | LR__4021
27448     FF 26 06 F6 | 	mov	local05, #255
2744c     00 01 90 FD | 	jmp	#LR__4029
27450                 | LR__4022
27450     17 2F E2 F8 | 	getbyte	local09, local09, #0
27454     0F 2E 0E F2 | 	cmp	local09, #15 wz
27458     B4 00 90 5D |  if_ne	jmp	#LR__4026
2745c     15 33 E2 F8 | 	getbyte	local11, local07, #0
27460     40 32 CE F7 | 	test	local11, #64 wz
27464     30 00 90 AD |  if_e	jmp	#LR__4023
27468     1C 1E 06 F1 | 	add	local01, #28
2746c     0F 33 02 FB | 	rdlong	local11, local01
27470     0D 32 06 F1 | 	add	local11, #13
27474     19 29 C2 FA | 	rdbyte	local06, local11
27478     15 2B E2 F8 | 	getbyte	local07, local07, #0
2747c     BF 2A 06 F5 | 	and	local07, #191
27480     15 27 02 F6 | 	mov	local05, local07
27484     0C 1E 86 F1 | 	sub	local01, #12
27488     0F 33 02 FB | 	rdlong	local11, local01
2748c     1C 1E 06 F1 | 	add	local01, #28
27490     0F 33 62 FC | 	wrlong	local11, local01
27494     2C 1E 86 F1 | 	sub	local01, #44
27498                 | LR__4023
27498     15 2D E2 F8 | 	getbyte	local08, local07, #0
2749c     13 31 E2 F8 | 	getbyte	local10, local05, #0
274a0     18 2D 0A F2 | 	cmp	local08, local10 wz
274a4     5C 00 90 5D |  if_ne	jmp	#LR__4024
274a8     14 31 E2 F8 | 	getbyte	local10, local06, #0
274ac     1C 1E 06 F1 | 	add	local01, #28
274b0     0F 2F 02 FB | 	rdlong	local09, local01
274b4     1C 1E 86 F1 | 	sub	local01, #28
274b8     0D 2E 06 F1 | 	add	local09, #13
274bc     17 2D C2 FA | 	rdbyte	local08, local09
274c0     16 2F E2 F8 | 	getbyte	local09, local08, #0
274c4     17 31 0A F2 | 	cmp	local10, local09 wz
274c8     38 00 90 5D |  if_ne	jmp	#LR__4024
274cc     0C 24 06 F1 | 	add	local04, #12
274d0     12 13 02 FB | 	rdlong	arg01, local04
274d4     0C 24 86 F1 | 	sub	local04, #12
274d8     1C 1E 06 F1 | 	add	local01, #28
274dc     0F 35 02 FB | 	rdlong	local12, local01
274e0     1C 1E 86 F1 | 	sub	local01, #28
274e4     1A 15 02 F6 | 	mov	arg02, local12
274e8     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
274ec     00 FA 4D F2 | 	cmps	result1, #0 wz
274f0     13 35 02 56 |  if_ne	mov	local12, local05
274f4     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
274f8     01 34 86 51 |  if_ne	sub	local12, #1
274fc     1A 33 02 56 |  if_ne	mov	local11, local12
27500     04 00 90 5D |  if_ne	jmp	#LR__4025
27504                 | LR__4024
27504     FF 32 06 F6 | 	mov	local11, #255
27508                 | LR__4025
27508     19 27 02 F6 | 	mov	local05, local11
2750c     40 00 90 FD | 	jmp	#LR__4028
27510                 | LR__4026
27510     13 33 02 F6 | 	mov	local11, local05
27514     07 32 4E F7 | 	zerox	local11, #7 wz
27518     20 00 90 5D |  if_ne	jmp	#LR__4027
2751c     14 29 E2 F8 | 	getbyte	local06, local06, #0
27520     1C 1E 06 F1 | 	add	local01, #28
27524     0F 13 02 FB | 	rdlong	arg01, local01
27528     1C 1E 86 F1 | 	sub	local01, #28
2752c     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
27530     FD FA E1 F8 | 	getbyte	result1, result1, #0
27534     FD 28 0A F2 | 	cmp	local06, result1 wz
27538     28 00 90 AD |  if_e	jmp	#LR__4030
2753c                 | LR__4027
2753c     2C 1E 06 F1 | 	add	local01, #44
27540     FF FF FF FF 
27544     0F FF 6B FC | 	wrlong	##-1, local01
27548     2C 1E 86 F1 | 	sub	local01, #44
2754c                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2754c                 | ' 					}
2754c                 | ' 					break;
2754c     14 00 90 FD | 	jmp	#LR__4030
27550                 | LR__4028
27550                 | LR__4029
27550     0F 13 02 F6 | 	mov	arg01, local01
27554     00 14 06 F6 | 	mov	arg02, #0
27558     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
2755c     FD 22 0A F6 | 	mov	local03, result1 wz
27560     44 FE 9F AD |  if_e	jmp	#LR__4020
27564                 | LR__4030
27564     00 22 0E F2 | 	cmp	local03, #0 wz
27568     18 1E 06 51 |  if_ne	add	local01, #24
2756c     0F 01 68 5C |  if_ne	wrlong	#0, local01
27570                 | ' 	return res;
27570     11 FB 01 F6 | 	mov	result1, local03
27574     A7 F0 03 F6 | 	mov	ptra, fp
27578     B2 00 A0 FD | 	call	#popregs_
2757c                 | _fatfs_cc_dir_read_ret
2757c     2D 00 64 FD | 	ret
27580                 | 
27580                 | _fatfs_cc_dir_find
27580     0B 4A 05 F6 | 	mov	COUNT_, #11
27584     A8 00 A0 FD | 	call	#pushregs_
27588     09 1F 02 F6 | 	mov	local01, arg01
2758c     0F 21 02 FB | 	rdlong	local02, local01
27590     0F 13 02 F6 | 	mov	arg01, local01
27594     00 14 06 F6 | 	mov	arg02, #0
27598     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2759c     00 FA 0D F2 | 	cmp	result1, #0 wz
275a0     18 02 90 5D |  if_ne	jmp	#LR__4052
275a4     FF 22 06 F6 | 	mov	local03, #255
275a8     FF 24 06 F6 | 	mov	local04, #255
275ac     2C 1E 06 F1 | 	add	local01, #44
275b0     FF FF FF FF 
275b4     0F FF 6B FC | 	wrlong	##-1, local01
275b8     2C 1E 86 F1 | 	sub	local01, #44
275bc                 | ' #line 2404 "ff.c"
275bc                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
275bc                 | ' 
275bc                 | ' 	do {
275bc                 | LR__4040
275bc     18 1E 06 F1 | 	add	local01, #24
275c0     0F 15 02 FB | 	rdlong	arg02, local01
275c4     18 1E 86 F1 | 	sub	local01, #24
275c8     10 13 02 F6 | 	mov	arg01, local02
275cc     A8 EB BF FD | 	call	#_fatfs_cc_move_window
275d0     FD 26 0A F6 | 	mov	local05, result1 wz
275d4     E0 01 90 5D |  if_ne	jmp	#LR__4051
275d8     1C 1E 06 F1 | 	add	local01, #28
275dc     0F 17 02 FB | 	rdlong	arg03, local01
275e0     1C 1E 86 F1 | 	sub	local01, #28
275e4     0B 29 C2 FA | 	rdbyte	local06, arg03
275e8     14 17 02 F6 | 	mov	arg03, local06
275ec     07 16 4E F7 | 	zerox	arg03, #7 wz
275f0     04 26 06 A6 |  if_e	mov	local05, #4
275f4     C0 01 90 AD |  if_e	jmp	#LR__4051
275f8     1C 1E 06 F1 | 	add	local01, #28
275fc     0F 2B 02 FB | 	rdlong	local07, local01
27600     15 17 02 F6 | 	mov	arg03, local07
27604     0B 16 06 F1 | 	add	arg03, #11
27608     0B 2D C2 FA | 	rdbyte	local08, arg03
2760c     3F 2C 06 F5 | 	and	local08, #63
27610     16 1E 86 F1 | 	sub	local01, #22
27614     0F 2D 42 FC | 	wrbyte	local08, local01
27618     06 1E 86 F1 | 	sub	local01, #6
2761c     14 17 E2 F8 | 	getbyte	arg03, local06, #0
27620     E5 16 0E F2 | 	cmp	arg03, #229 wz
27624     18 00 90 AD |  if_e	jmp	#LR__4041
27628     16 17 E2 F8 | 	getbyte	arg03, local08, #0
2762c     08 16 CE F7 | 	test	arg03, #8 wz
27630     16 2B 02 56 |  if_ne	mov	local07, local08
27634     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
27638     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
2763c     18 00 90 AD |  if_e	jmp	#LR__4042
27640                 | LR__4041
27640     FF 24 06 F6 | 	mov	local04, #255
27644     2C 1E 06 F1 | 	add	local01, #44
27648     FF FF FF FF 
2764c     0F FF 6B FC | 	wrlong	##-1, local01
27650     2C 1E 86 F1 | 	sub	local01, #44
27654     4C 01 90 FD | 	jmp	#LR__4050
27658                 | LR__4042
27658     16 2D E2 F8 | 	getbyte	local08, local08, #0
2765c     0F 2C 0E F2 | 	cmp	local08, #15 wz
27660     C8 00 90 5D |  if_ne	jmp	#LR__4046
27664     2B 1E 06 F1 | 	add	local01, #43
27668     0F 2D C2 FA | 	rdbyte	local08, local01
2766c     2B 1E 86 F1 | 	sub	local01, #43
27670     40 2C CE F7 | 	test	local08, #64 wz
27674     2C 01 90 5D |  if_ne	jmp	#LR__4049
27678     14 2F E2 F8 | 	getbyte	local09, local06, #0
2767c     40 2E CE F7 | 	test	local09, #64 wz
27680     30 00 90 AD |  if_e	jmp	#LR__4043
27684     1C 1E 06 F1 | 	add	local01, #28
27688     0F 2F 02 FB | 	rdlong	local09, local01
2768c     0D 2E 06 F1 | 	add	local09, #13
27690     17 23 C2 FA | 	rdbyte	local03, local09
27694     14 29 E2 F8 | 	getbyte	local06, local06, #0
27698     BF 28 06 F5 | 	and	local06, #191
2769c     14 25 02 F6 | 	mov	local04, local06
276a0     0C 1E 86 F1 | 	sub	local01, #12
276a4     0F 2F 02 FB | 	rdlong	local09, local01
276a8     1C 1E 06 F1 | 	add	local01, #28
276ac     0F 2F 62 FC | 	wrlong	local09, local01
276b0     2C 1E 86 F1 | 	sub	local01, #44
276b4                 | LR__4043
276b4     14 31 E2 F8 | 	getbyte	local10, local06, #0
276b8     12 2B E2 F8 | 	getbyte	local07, local04, #0
276bc     15 31 0A F2 | 	cmp	local10, local07 wz
276c0     5C 00 90 5D |  if_ne	jmp	#LR__4044
276c4     11 2D E2 F8 | 	getbyte	local08, local03, #0
276c8     1C 1E 06 F1 | 	add	local01, #28
276cc     0F 2B 02 FB | 	rdlong	local07, local01
276d0     1C 1E 86 F1 | 	sub	local01, #28
276d4     0D 2A 06 F1 | 	add	local07, #13
276d8     15 29 C2 FA | 	rdbyte	local06, local07
276dc     14 2B E2 F8 | 	getbyte	local07, local06, #0
276e0     15 2D 0A F2 | 	cmp	local08, local07 wz
276e4     38 00 90 5D |  if_ne	jmp	#LR__4044
276e8     0C 20 06 F1 | 	add	local02, #12
276ec     10 13 02 FB | 	rdlong	arg01, local02
276f0     0C 20 86 F1 | 	sub	local02, #12
276f4     1C 1E 06 F1 | 	add	local01, #28
276f8     0F 33 02 FB | 	rdlong	local11, local01
276fc     1C 1E 86 F1 | 	sub	local01, #28
27700     19 15 02 F6 | 	mov	arg02, local11
27704     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
27708     00 FA 4D F2 | 	cmps	result1, #0 wz
2770c     12 33 02 56 |  if_ne	mov	local11, local04
27710     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
27714     01 32 86 51 |  if_ne	sub	local11, #1
27718     19 2F 02 56 |  if_ne	mov	local09, local11
2771c     04 00 90 5D |  if_ne	jmp	#LR__4045
27720                 | LR__4044
27720     FF 2E 06 F6 | 	mov	local09, #255
27724                 | LR__4045
27724     17 25 02 F6 | 	mov	local04, local09
27728     78 00 90 FD | 	jmp	#LR__4049
2772c                 | LR__4046
2772c     12 2F 02 F6 | 	mov	local09, local04
27730     07 2E 4E F7 | 	zerox	local09, #7 wz
27734     20 00 90 5D |  if_ne	jmp	#LR__4047
27738     11 31 E2 F8 | 	getbyte	local10, local03, #0
2773c     1C 1E 06 F1 | 	add	local01, #28
27740     0F 13 02 FB | 	rdlong	arg01, local01
27744     1C 1E 86 F1 | 	sub	local01, #28
27748     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2774c     FD FA E1 F8 | 	getbyte	result1, result1, #0
27750     FD 30 0A F2 | 	cmp	local10, result1 wz
27754     60 00 90 AD |  if_e	jmp	#LR__4051
27758                 | LR__4047
27758     2B 1E 06 F1 | 	add	local01, #43
2775c     0F 2F C2 FA | 	rdbyte	local09, local01
27760     2B 1E 86 F1 | 	sub	local01, #43
27764     01 2E CE F7 | 	test	local09, #1 wz
27768     24 00 90 5D |  if_ne	jmp	#LR__4048
2776c     1C 1E 06 F1 | 	add	local01, #28
27770     0F 13 02 FB | 	rdlong	arg01, local01
27774     04 1E 06 F1 | 	add	local01, #4
27778     0F 15 02 F6 | 	mov	arg02, local01
2777c     20 1E 86 F1 | 	sub	local01, #32
27780     0B 16 06 F6 | 	mov	arg03, #11
27784     88 DA BF FD | 	call	#_fatfs_cc_memcmp
27788     00 FA 0D F2 | 	cmp	result1, #0 wz
2778c     28 00 90 AD |  if_e	jmp	#LR__4051
27790                 | LR__4048
27790     FF 24 06 F6 | 	mov	local04, #255
27794     2C 1E 06 F1 | 	add	local01, #44
27798     FF FF FF FF 
2779c     0F FF 6B FC | 	wrlong	##-1, local01
277a0     2C 1E 86 F1 | 	sub	local01, #44
277a4                 | LR__4049
277a4                 | LR__4050
277a4     0F 13 02 F6 | 	mov	arg01, local01
277a8     00 14 06 F6 | 	mov	arg02, #0
277ac     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
277b0     FD 26 0A F6 | 	mov	local05, result1 wz
277b4     04 FE 9F AD |  if_e	jmp	#LR__4040
277b8                 | LR__4051
277b8                 | ' 
277b8                 | ' 	return res;
277b8     13 FB 01 F6 | 	mov	result1, local05
277bc                 | LR__4052
277bc     A7 F0 03 F6 | 	mov	ptra, fp
277c0     B2 00 A0 FD | 	call	#popregs_
277c4                 | _fatfs_cc_dir_find_ret
277c4     2D 00 64 FD | 	ret
277c8                 | 
277c8                 | _fatfs_cc_dir_register
277c8     0A 4A 05 F6 | 	mov	COUNT_, #10
277cc     A8 00 A0 FD | 	call	#pushregs_
277d0     2C F0 07 F1 | 	add	ptra, #44
277d4     04 4E 05 F1 | 	add	fp, #4
277d8     A7 12 62 FC | 	wrlong	arg01, fp
277dc     09 1F 02 FB | 	rdlong	local01, arg01
277e0     08 4E 05 F1 | 	add	fp, #8
277e4     A7 1E 62 FC | 	wrlong	local01, fp
277e8     08 4E 85 F1 | 	sub	fp, #8
277ec     A7 20 02 FB | 	rdlong	local02, fp
277f0     04 4E 85 F1 | 	sub	fp, #4
277f4     2B 20 06 F1 | 	add	local02, #43
277f8     10 21 C2 FA | 	rdbyte	local02, local02
277fc     A0 20 CE F7 | 	test	local02, #160 wz
27800     06 FA 05 56 |  if_ne	mov	result1, #6
27804     F8 03 90 5D |  if_ne	jmp	#LR__4075
27808                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
27808     14 4E 05 F1 | 	add	fp, #20
2780c     A7 00 68 FC | 	wrlong	#0, fp
27810     14 4E 85 F1 | 	sub	fp, #20
27814     97 28 48 FB | 	callpa	#(@LR__4061-@LR__4060)>>2,fcache_load_ptr_
27818                 | LR__4060
27818     0C 4E 05 F1 | 	add	fp, #12
2781c     A7 20 02 FB | 	rdlong	local02, fp
27820     0C 20 06 F1 | 	add	local02, #12
27824     10 23 02 FB | 	rdlong	local03, local02
27828     08 4E 05 F1 | 	add	fp, #8
2782c     A7 24 02 FB | 	rdlong	local04, fp
27830     14 4E 85 F1 | 	sub	fp, #20
27834     01 24 66 F0 | 	shl	local04, #1
27838     11 25 02 F1 | 	add	local04, local03
2783c     12 21 EA FA | 	rdword	local02, local04 wz
27840     24 00 90 AD |  if_e	jmp	#LR__4062
27844     14 4E 05 F1 | 	add	fp, #20
27848     A7 26 02 FB | 	rdlong	local05, fp
2784c     13 29 02 F6 | 	mov	local06, local05
27850     13 2B 02 F6 | 	mov	local07, local05
27854     15 2D 02 F6 | 	mov	local08, local07
27858     01 2C 06 F1 | 	add	local08, #1
2785c     A7 2C 62 FC | 	wrlong	local08, fp
27860     14 4E 85 F1 | 	sub	fp, #20
27864     B0 FF 9F FD | 	jmp	#LR__4060
27868                 | LR__4061
27868                 | LR__4062
27868     1C 4E 05 F1 | 	add	fp, #28
2786c     A7 12 02 F6 | 	mov	arg01, fp
27870     18 4E 85 F1 | 	sub	fp, #24
27874     A7 14 02 FB | 	rdlong	arg02, fp
27878     04 4E 85 F1 | 	sub	fp, #4
2787c     20 14 06 F1 | 	add	arg02, #32
27880     0C 16 06 F6 | 	mov	arg03, #12
27884     AC 71 BF FD | 	call	#__system____builtin_memmove
27888     27 4E 05 F1 | 	add	fp, #39
2788c     A7 2E C2 FA | 	rdbyte	local09, fp
27890     27 4E 85 F1 | 	sub	fp, #39
27894     01 2E CE F7 | 	test	local09, #1 wz
27898     F4 00 90 AD |  if_e	jmp	#LR__4065
2789c     04 4E 05 F1 | 	add	fp, #4
278a0     A7 30 02 FB | 	rdlong	local10, fp
278a4     2B 30 06 F1 | 	add	local10, #43
278a8     18 81 48 FC | 	wrbyte	#64, local10
278ac                 | ' 		dp->fn[ 11 ] =  0x40 ;
278ac                 | ' 		for (n = 1; n < 100; n++) {
278ac     0C 4E 05 F1 | 	add	fp, #12
278b0     A7 02 68 FC | 	wrlong	#1, fp
278b4     10 4E 85 F1 | 	sub	fp, #16
278b8                 | LR__4063
278b8     10 4E 05 F1 | 	add	fp, #16
278bc     A7 20 02 FB | 	rdlong	local02, fp
278c0     10 4E 85 F1 | 	sub	fp, #16
278c4     64 20 16 F2 | 	cmp	local02, #100 wc
278c8     70 00 90 3D |  if_ae	jmp	#LR__4064
278cc     04 4E 05 F1 | 	add	fp, #4
278d0     A7 12 02 FB | 	rdlong	arg01, fp
278d4     20 12 06 F1 | 	add	arg01, #32
278d8     18 4E 05 F1 | 	add	fp, #24
278dc     A7 14 02 F6 | 	mov	arg02, fp
278e0     10 4E 85 F1 | 	sub	fp, #16
278e4     A7 30 02 FB | 	rdlong	local10, fp
278e8     0C 30 06 F1 | 	add	local10, #12
278ec     18 17 02 FB | 	rdlong	arg03, local10
278f0     04 4E 05 F1 | 	add	fp, #4
278f4     A7 18 02 FB | 	rdlong	arg04, fp
278f8     10 4E 85 F1 | 	sub	fp, #16
278fc     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
27900     04 4E 05 F1 | 	add	fp, #4
27904     A7 12 02 FB | 	rdlong	arg01, fp
27908     04 4E 85 F1 | 	sub	fp, #4
2790c     70 FC BF FD | 	call	#_fatfs_cc_dir_find
27910     08 4E 05 F1 | 	add	fp, #8
27914     A7 FA 61 FC | 	wrlong	result1, fp
27918     00 FA 4D F2 | 	cmps	result1, #0 wz
2791c     08 4E 85 F1 | 	sub	fp, #8
27920     18 00 90 5D |  if_ne	jmp	#LR__4064
27924     10 4E 05 F1 | 	add	fp, #16
27928     A7 30 02 FB | 	rdlong	local10, fp
2792c     01 30 06 F1 | 	add	local10, #1
27930     A7 30 62 FC | 	wrlong	local10, fp
27934     10 4E 85 F1 | 	sub	fp, #16
27938     7C FF 9F FD | 	jmp	#LR__4063
2793c                 | LR__4064
2793c     10 4E 05 F1 | 	add	fp, #16
27940     A7 30 02 FB | 	rdlong	local10, fp
27944     10 4E 85 F1 | 	sub	fp, #16
27948     64 30 0E F2 | 	cmp	local10, #100 wz
2794c     07 FA 05 A6 |  if_e	mov	result1, #7
27950     AC 02 90 AD |  if_e	jmp	#LR__4075
27954     08 4E 05 F1 | 	add	fp, #8
27958     A7 30 02 FB | 	rdlong	local10, fp
2795c     08 4E 85 F1 | 	sub	fp, #8
27960     04 30 0E F2 | 	cmp	local10, #4 wz
27964     08 4E 05 51 |  if_ne	add	fp, #8
27968     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2796c     08 4E 85 51 |  if_ne	sub	fp, #8
27970     8C 02 90 5D |  if_ne	jmp	#LR__4075
27974     04 4E 05 F1 | 	add	fp, #4
27978     A7 30 02 FB | 	rdlong	local10, fp
2797c     23 4E 05 F1 | 	add	fp, #35
27980     A7 1E C2 FA | 	rdbyte	local01, fp
27984     27 4E 85 F1 | 	sub	fp, #39
27988     2B 30 06 F1 | 	add	local10, #43
2798c     18 1F 42 FC | 	wrbyte	local01, local10
27990                 | LR__4065
27990     27 4E 05 F1 | 	add	fp, #39
27994     A7 20 C2 FA | 	rdbyte	local02, fp
27998     27 4E 85 F1 | 	sub	fp, #39
2799c     02 20 CE F7 | 	test	local02, #2 wz
279a0     20 00 90 AD |  if_e	jmp	#LR__4066
279a4     14 4E 05 F1 | 	add	fp, #20
279a8     A7 30 02 FB | 	rdlong	local10, fp
279ac     0C 30 06 F1 | 	add	local10, #12
279b0     0D 30 16 FD | 	qdiv	local10, #13
279b4     14 4E 85 F1 | 	sub	fp, #20
279b8     18 30 62 FD | 	getqx	local10
279bc     01 30 06 F1 | 	add	local10, #1
279c0     04 00 90 FD | 	jmp	#LR__4067
279c4                 | LR__4066
279c4     01 30 06 F6 | 	mov	local10, #1
279c8                 | LR__4067
279c8     18 4E 05 F1 | 	add	fp, #24
279cc     A7 30 62 FC | 	wrlong	local10, fp
279d0     14 4E 85 F1 | 	sub	fp, #20
279d4     A7 12 02 FB | 	rdlong	arg01, fp
279d8     18 15 02 F6 | 	mov	arg02, local10
279dc     04 4E 85 F1 | 	sub	fp, #4
279e0     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
279e4     08 4E 05 F1 | 	add	fp, #8
279e8     A7 FA 61 FC | 	wrlong	result1, fp
279ec     08 4E 85 F1 | 	sub	fp, #8
279f0     00 FA 0D F2 | 	cmp	result1, #0 wz
279f4     38 01 90 5D |  if_ne	jmp	#LR__4072
279f8     18 4E 05 F1 | 	add	fp, #24
279fc     A7 30 02 FB | 	rdlong	local10, fp
27a00     01 30 8E F1 | 	sub	local10, #1 wz
27a04     A7 30 62 FC | 	wrlong	local10, fp
27a08     18 4E 85 F1 | 	sub	fp, #24
27a0c     20 01 90 AD |  if_e	jmp	#LR__4072
27a10     04 4E 05 F1 | 	add	fp, #4
27a14     A7 30 02 FB | 	rdlong	local10, fp
27a18     18 13 02 F6 | 	mov	arg01, local10
27a1c     14 4E 05 F1 | 	add	fp, #20
27a20     A7 18 02 FB | 	rdlong	arg04, fp
27a24     18 4E 85 F1 | 	sub	fp, #24
27a28     05 18 66 F0 | 	shl	arg04, #5
27a2c     10 30 06 F1 | 	add	local10, #16
27a30     18 15 02 FB | 	rdlong	arg02, local10
27a34     0C 15 82 F1 | 	sub	arg02, arg04
27a38     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
27a3c     08 4E 05 F1 | 	add	fp, #8
27a40     A7 FA 61 FC | 	wrlong	result1, fp
27a44     08 4E 85 F1 | 	sub	fp, #8
27a48     00 FA 0D F2 | 	cmp	result1, #0 wz
27a4c     E0 00 90 5D |  if_ne	jmp	#LR__4071
27a50     04 4E 05 F1 | 	add	fp, #4
27a54     A7 12 02 FB | 	rdlong	arg01, fp
27a58     04 4E 85 F1 | 	sub	fp, #4
27a5c     20 12 06 F1 | 	add	arg01, #32
27a60     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
27a64     FD 30 02 F6 | 	mov	local10, result1
27a68     28 4E 05 F1 | 	add	fp, #40
27a6c     A7 30 42 FC | 	wrbyte	local10, fp
27a70     28 4E 85 F1 | 	sub	fp, #40
27a74                 | ' 			sum = sum_sfn(dp->fn);
27a74                 | ' 			do {
27a74                 | LR__4068
27a74     0C 4E 05 F1 | 	add	fp, #12
27a78     A7 12 02 FB | 	rdlong	arg01, fp
27a7c     08 4E 85 F1 | 	sub	fp, #8
27a80     A7 1E 02 FB | 	rdlong	local01, fp
27a84     04 4E 85 F1 | 	sub	fp, #4
27a88     18 1E 06 F1 | 	add	local01, #24
27a8c     0F 15 02 FB | 	rdlong	arg02, local01
27a90     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
27a94     08 4E 05 F1 | 	add	fp, #8
27a98     A7 FA 61 FC | 	wrlong	result1, fp
27a9c     00 FA 4D F2 | 	cmps	result1, #0 wz
27aa0     08 4E 85 F1 | 	sub	fp, #8
27aa4     88 00 90 5D |  if_ne	jmp	#LR__4070
27aa8     0C 4E 05 F1 | 	add	fp, #12
27aac     A7 20 02 FB | 	rdlong	local02, fp
27ab0     0C 20 06 F1 | 	add	local02, #12
27ab4     10 13 02 FB | 	rdlong	arg01, local02
27ab8     08 4E 85 F1 | 	sub	fp, #8
27abc     A7 1E 02 FB | 	rdlong	local01, fp
27ac0     1C 1E 06 F1 | 	add	local01, #28
27ac4     0F 15 02 FB | 	rdlong	arg02, local01
27ac8     14 4E 05 F1 | 	add	fp, #20
27acc     A7 16 02 FB | 	rdlong	arg03, fp
27ad0     10 4E 05 F1 | 	add	fp, #16
27ad4     A7 18 C2 FA | 	rdbyte	arg04, fp
27ad8     28 4E 85 F1 | 	sub	fp, #40
27adc     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
27ae0     0C 4E 05 F1 | 	add	fp, #12
27ae4     A7 30 02 FB | 	rdlong	local10, fp
27ae8     03 30 06 F1 | 	add	local10, #3
27aec     18 03 48 FC | 	wrbyte	#1, local10
27af0     08 4E 85 F1 | 	sub	fp, #8
27af4     A7 12 02 FB | 	rdlong	arg01, fp
27af8     04 4E 85 F1 | 	sub	fp, #4
27afc     00 14 06 F6 | 	mov	arg02, #0
27b00     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
27b04     08 4E 05 F1 | 	add	fp, #8
27b08     A7 FA 61 FC | 	wrlong	result1, fp
27b0c     00 FA 4D F2 | 	cmps	result1, #0 wz
27b10     08 4E 85 F1 | 	sub	fp, #8
27b14     18 00 90 5D |  if_ne	jmp	#LR__4069
27b18     18 4E 05 F1 | 	add	fp, #24
27b1c     A7 30 02 FB | 	rdlong	local10, fp
27b20     01 30 8E F1 | 	sub	local10, #1 wz
27b24     A7 30 62 FC | 	wrlong	local10, fp
27b28     18 4E 85 F1 | 	sub	fp, #24
27b2c     44 FF 9F 5D |  if_ne	jmp	#LR__4068
27b30                 | LR__4069
27b30                 | LR__4070
27b30                 | LR__4071
27b30                 | LR__4072
27b30     08 4E 05 F1 | 	add	fp, #8
27b34     A7 30 0A FB | 	rdlong	local10, fp wz
27b38     08 4E 85 F1 | 	sub	fp, #8
27b3c     B4 00 90 5D |  if_ne	jmp	#LR__4074
27b40     0C 4E 05 F1 | 	add	fp, #12
27b44     A7 12 02 FB | 	rdlong	arg01, fp
27b48     08 4E 85 F1 | 	sub	fp, #8
27b4c     A7 1E 02 FB | 	rdlong	local01, fp
27b50     04 4E 85 F1 | 	sub	fp, #4
27b54     18 1E 06 F1 | 	add	local01, #24
27b58     0F 15 02 FB | 	rdlong	arg02, local01
27b5c     18 E6 BF FD | 	call	#_fatfs_cc_move_window
27b60     08 4E 05 F1 | 	add	fp, #8
27b64     A7 FA 61 FC | 	wrlong	result1, fp
27b68     08 4E 85 F1 | 	sub	fp, #8
27b6c     00 FA 0D F2 | 	cmp	result1, #0 wz
27b70     80 00 90 5D |  if_ne	jmp	#LR__4073
27b74     04 4E 05 F1 | 	add	fp, #4
27b78     A7 20 02 FB | 	rdlong	local02, fp
27b7c     04 4E 85 F1 | 	sub	fp, #4
27b80     1C 20 06 F1 | 	add	local02, #28
27b84     10 13 02 FB | 	rdlong	arg01, local02
27b88     00 14 06 F6 | 	mov	arg02, #0
27b8c     20 16 06 F6 | 	mov	arg03, #32
27b90     98 00 A0 FD | 	call	#\builtin_bytefill_
27b94     04 4E 05 F1 | 	add	fp, #4
27b98     A7 14 02 FB | 	rdlong	arg02, fp
27b9c     0A 1F 02 F6 | 	mov	local01, arg02
27ba0     1C 1E 06 F1 | 	add	local01, #28
27ba4     0F 13 02 FB | 	rdlong	arg01, local01
27ba8     04 4E 85 F1 | 	sub	fp, #4
27bac     20 14 06 F1 | 	add	arg02, #32
27bb0     0B 16 06 F6 | 	mov	arg03, #11
27bb4     7C 6E BF FD | 	call	#__system____builtin_memmove
27bb8     04 4E 05 F1 | 	add	fp, #4
27bbc     A7 2E 02 FB | 	rdlong	local09, fp
27bc0     17 31 02 F6 | 	mov	local10, local09
27bc4     1C 30 06 F1 | 	add	local10, #28
27bc8     18 1F 02 FB | 	rdlong	local01, local10
27bcc     2B 2E 06 F1 | 	add	local09, #43
27bd0     17 31 C2 FA | 	rdbyte	local10, local09
27bd4     18 30 06 F5 | 	and	local10, #24
27bd8     0C 1E 06 F1 | 	add	local01, #12
27bdc     0F 31 42 FC | 	wrbyte	local10, local01
27be0     08 4E 05 F1 | 	add	fp, #8
27be4     A7 30 02 FB | 	rdlong	local10, fp
27be8     0C 4E 85 F1 | 	sub	fp, #12
27bec     03 30 06 F1 | 	add	local10, #3
27bf0     18 03 48 FC | 	wrbyte	#1, local10
27bf4                 | LR__4073
27bf4                 | LR__4074
27bf4                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
27bf4                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
27bf4                 | ' 
27bf4                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
27bf4                 | ' 
27bf4                 | ' 			fs->wflag = 1;
27bf4                 | ' 		}
27bf4                 | ' 	}
27bf4                 | ' 
27bf4                 | ' 	return res;
27bf4     08 4E 05 F1 | 	add	fp, #8
27bf8     A7 FA 01 FB | 	rdlong	result1, fp
27bfc     08 4E 85 F1 | 	sub	fp, #8
27c00                 | LR__4075
27c00     A7 F0 03 F6 | 	mov	ptra, fp
27c04     B2 00 A0 FD | 	call	#popregs_
27c08                 | _fatfs_cc_dir_register_ret
27c08     2D 00 64 FD | 	ret
27c0c                 | 
27c0c                 | _fatfs_cc_dir_remove
27c0c     05 4A 05 F6 | 	mov	COUNT_, #5
27c10     A8 00 A0 FD | 	call	#pushregs_
27c14     09 1F 02 F6 | 	mov	local01, arg01
27c18     0F 21 02 FB | 	rdlong	local02, local01
27c1c     10 1E 06 F1 | 	add	local01, #16
27c20     0F 23 02 FB | 	rdlong	local03, local01
27c24     1C 1E 06 F1 | 	add	local01, #28
27c28     0F 15 02 FB | 	rdlong	arg02, local01
27c2c     2C 1E 86 F1 | 	sub	local01, #44
27c30     FF FF 7F FF 
27c34     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
27c38     00 24 06 A6 |  if_e	mov	local04, #0
27c3c     18 00 90 AD |  if_e	jmp	#LR__4080
27c40     0F 13 02 F6 | 	mov	arg01, local01
27c44     2C 1E 06 F1 | 	add	local01, #44
27c48     0F 15 02 FB | 	rdlong	arg02, local01
27c4c     2C 1E 86 F1 | 	sub	local01, #44
27c50     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
27c54     FD 24 02 F6 | 	mov	local04, result1
27c58                 | LR__4080
27c58     12 27 0A F6 | 	mov	local05, local04 wz
27c5c     64 00 90 5D |  if_ne	jmp	#LR__4083
27c60                 | ' 		do {
27c60                 | LR__4081
27c60     18 1E 06 F1 | 	add	local01, #24
27c64     0F 15 02 FB | 	rdlong	arg02, local01
27c68     18 1E 86 F1 | 	sub	local01, #24
27c6c     10 13 02 F6 | 	mov	arg01, local02
27c70     04 E5 BF FD | 	call	#_fatfs_cc_move_window
27c74     FD 26 0A F6 | 	mov	local05, result1 wz
27c78     40 00 90 5D |  if_ne	jmp	#LR__4082
27c7c     1C 1E 06 F1 | 	add	local01, #28
27c80     0F 25 02 FB | 	rdlong	local04, local01
27c84     12 CB 49 FC | 	wrbyte	#229, local04
27c88     03 20 06 F1 | 	add	local02, #3
27c8c     10 03 48 FC | 	wrbyte	#1, local02
27c90     03 20 86 F1 | 	sub	local02, #3
27c94     0C 1E 86 F1 | 	sub	local01, #12
27c98     0F 25 02 FB | 	rdlong	local04, local01
27c9c     10 1E 86 F1 | 	sub	local01, #16
27ca0     11 25 12 F2 | 	cmp	local04, local03 wc
27ca4     14 00 90 3D |  if_ae	jmp	#LR__4082
27ca8     0F 13 02 F6 | 	mov	arg01, local01
27cac     00 14 06 F6 | 	mov	arg02, #0
27cb0     90 EF BF FD | 	call	#_fatfs_cc_dir_next
27cb4     FD 26 0A F6 | 	mov	local05, result1 wz
27cb8     A4 FF 9F AD |  if_e	jmp	#LR__4081
27cbc                 | LR__4082
27cbc     04 26 0E F2 | 	cmp	local05, #4 wz
27cc0     02 26 06 A6 |  if_e	mov	local05, #2
27cc4                 | LR__4083
27cc4                 | ' 	}
27cc4                 | ' #line 2590 "ff.c"
27cc4                 | ' 	return res;
27cc4     13 FB 01 F6 | 	mov	result1, local05
27cc8     A7 F0 03 F6 | 	mov	ptra, fp
27ccc     B2 00 A0 FD | 	call	#popregs_
27cd0                 | _fatfs_cc_dir_remove_ret
27cd0     2D 00 64 FD | 	ret
27cd4                 | 
27cd4                 | _fatfs_cc_get_fileinfo
27cd4     0F 4A 05 F6 | 	mov	COUNT_, #15
27cd8     A8 00 A0 FD | 	call	#pushregs_
27cdc     09 1F 02 F6 | 	mov	local01, arg01
27ce0     0A 21 02 F6 | 	mov	local02, arg02
27ce4     0F 23 02 FB | 	rdlong	local03, local01
27ce8     1C 20 06 F1 | 	add	local02, #28
27cec     10 01 48 FC | 	wrbyte	#0, local02
27cf0     1C 20 86 F1 | 	sub	local02, #28
27cf4     18 1E 06 F1 | 	add	local01, #24
27cf8     0F 25 0A FB | 	rdlong	local04, local01 wz
27cfc     18 1E 86 F1 | 	sub	local01, #24
27d00     90 03 90 AD |  if_e	jmp	#LR__4104
27d04     2C 1E 06 F1 | 	add	local01, #44
27d08     0F 25 02 FB | 	rdlong	local04, local01
27d0c     2C 1E 86 F1 | 	sub	local01, #44
27d10     FF FF 7F FF 
27d14     FF 25 0E F2 | 	cmp	local04, ##-1 wz
27d18     D8 00 90 AD |  if_e	jmp	#LR__4093
27d1c     00 26 06 F6 | 	mov	local05, #0
27d20     00 28 06 F6 | 	mov	local06, #0
27d24     00 2A 06 F6 | 	mov	local07, #0
27d28                 | ' 			si = di = 0;
27d28                 | ' 			hs = 0;
27d28                 | ' 			while (fs->lfnbuf[si] != 0) {
27d28                 | LR__4090
27d28     0C 22 06 F1 | 	add	local03, #12
27d2c     11 25 02 FB | 	rdlong	local04, local03
27d30     0C 22 86 F1 | 	sub	local03, #12
27d34     14 2D 02 F6 | 	mov	local08, local06
27d38     01 2C 66 F0 | 	shl	local08, #1
27d3c     12 2D 02 F1 | 	add	local08, local04
27d40     16 25 EA FA | 	rdword	local04, local08 wz
27d44     90 00 90 AD |  if_e	jmp	#LR__4092
27d48     0C 22 06 F1 | 	add	local03, #12
27d4c     11 2F 02 FB | 	rdlong	local09, local03
27d50     0C 22 86 F1 | 	sub	local03, #12
27d54     14 31 02 F6 | 	mov	local10, local06
27d58     01 30 66 F0 | 	shl	local10, #1
27d5c     17 31 02 F1 | 	add	local10, local09
27d60     18 33 E2 FA | 	rdword	local11, local10
27d64     15 25 02 F6 | 	mov	local04, local07
27d68     0F 24 4E F7 | 	zerox	local04, #15 wz
27d6c     01 28 06 F1 | 	add	local06, #1
27d70     24 00 90 5D |  if_ne	jmp	#LR__4091
27d74     19 35 32 F9 | 	getword	local12, local11, #0
27d78     6C 00 00 FF 
27d7c     00 34 16 F2 | 	cmp	local12, ##55296 wc
27d80     14 00 90 CD |  if_b	jmp	#LR__4091
27d84     19 37 32 F9 | 	getword	local13, local11, #0
27d88     70 00 00 FF 
27d8c     00 36 16 F2 | 	cmp	local13, ##57344 wc
27d90     19 2B 02 C6 |  if_b	mov	local07, local11
27d94                 | ' 					hs = wc; continue;
27d94     90 FF 9F CD |  if_b	jmp	#LR__4090
27d98                 | LR__4091
27d98     15 13 32 F9 | 	getword	arg01, local07, #0
27d9c     10 12 66 F0 | 	shl	arg01, #16
27da0     19 33 32 F9 | 	getword	local11, local11, #0
27da4     19 13 42 F5 | 	or	arg01, local11
27da8     13 15 02 F6 | 	mov	arg02, local05
27dac     1C 20 06 F1 | 	add	local02, #28
27db0     10 15 02 F1 | 	add	arg02, local02
27db4     FF 16 06 F6 | 	mov	arg03, #255
27db8     13 17 82 F1 | 	sub	arg03, local05
27dbc     1C 20 86 F1 | 	sub	local02, #28
27dc0     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
27dc4     FD 38 0A F6 | 	mov	local14, result1 wz
27dc8     00 26 06 A6 |  if_e	mov	local05, #0
27dcc     1C 27 02 51 |  if_ne	add	local05, local14
27dd0     00 2A 06 56 |  if_ne	mov	local07, #0
27dd4     50 FF 9F 5D |  if_ne	jmp	#LR__4090
27dd8                 | LR__4092
27dd8     15 25 02 F6 | 	mov	local04, local07
27ddc     0F 24 4E F7 | 	zerox	local04, #15 wz
27de0     00 26 06 56 |  if_ne	mov	local05, #0
27de4     1C 20 06 F1 | 	add	local02, #28
27de8     10 27 02 F1 | 	add	local05, local02
27dec     13 01 48 FC | 	wrbyte	#0, local05
27df0     1C 20 86 F1 | 	sub	local02, #28
27df4                 | LR__4093
27df4     00 26 06 F6 | 	mov	local05, #0
27df8     00 28 06 F6 | 	mov	local06, #0
27dfc                 | ' 			fno->fname[di] = 0;
27dfc                 | ' 		}
27dfc                 | ' 	}
27dfc                 | ' 
27dfc                 | ' 	si = di = 0;
27dfc                 | ' 	while (si < 11) {
27dfc                 | LR__4094
27dfc     0B 28 16 F2 | 	cmp	local06, #11 wc
27e00     20 01 90 3D |  if_ae	jmp	#LR__4097
27e04     1C 1E 06 F1 | 	add	local01, #28
27e08     0F 2F 02 FB | 	rdlong	local09, local01
27e0c     1C 1E 86 F1 | 	sub	local01, #28
27e10     14 31 02 F6 | 	mov	local10, local06
27e14     17 31 02 F1 | 	add	local10, local09
27e18     18 33 C2 FA | 	rdbyte	local11, local10
27e1c     19 25 32 F9 | 	getword	local04, local11, #0
27e20     20 24 0E F2 | 	cmp	local04, #32 wz
27e24     01 28 06 F1 | 	add	local06, #1
27e28     D0 FF 9F AD |  if_e	jmp	#LR__4094
27e2c     19 25 32 F9 | 	getword	local04, local11, #0
27e30     05 24 0E F2 | 	cmp	local04, #5 wz
27e34     E5 32 06 A6 |  if_e	mov	local11, #229
27e38     09 28 0E F2 | 	cmp	local06, #9 wz
27e3c     20 00 90 5D |  if_ne	jmp	#LR__4095
27e40     0C 26 16 F2 | 	cmp	local05, #12 wc
27e44     18 00 90 3D |  if_ae	jmp	#LR__4095
27e48     13 37 02 F6 | 	mov	local13, local05
27e4c     0C 20 06 F1 | 	add	local02, #12
27e50     10 37 02 F1 | 	add	local13, local02
27e54     1B 5D 48 FC | 	wrbyte	#46, local13
27e58     01 26 06 F1 | 	add	local05, #1
27e5c     0C 20 86 F1 | 	sub	local02, #12
27e60                 | LR__4095
27e60     19 13 32 F9 | 	getword	arg01, local11, #0
27e64     07 12 4E F7 | 	zerox	arg01, #7 wz
27e68     00 FA 05 56 |  if_ne	mov	result1, #0
27e6c                 | ' 
27e6c                 | ' 	return 0;
27e6c     00 FA 05 A6 |  if_e	mov	result1, #0
27e70     00 FA 0D F2 | 	cmp	result1, #0 wz
27e74     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
27e78     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
27e7c     50 00 90 AD |  if_e	jmp	#LR__4096
27e80     1C 1E 06 F1 | 	add	local01, #28
27e84     0F 31 02 FB | 	rdlong	local10, local01
27e88     1C 1E 86 F1 | 	sub	local01, #28
27e8c     14 2D 02 F6 | 	mov	local08, local06
27e90     18 2D 02 F1 | 	add	local08, local10
27e94     16 13 CA FA | 	rdbyte	arg01, local08 wz
27e98     00 FA 05 56 |  if_ne	mov	result1, #0
27e9c                 | ' 
27e9c                 | ' 	return 0;
27e9c     00 FA 05 A6 |  if_e	mov	result1, #0
27ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
27ea4     28 00 90 AD |  if_e	jmp	#LR__4096
27ea8     19 33 32 F9 | 	getword	local11, local11, #0
27eac     08 32 66 F0 | 	shl	local11, #8
27eb0     1C 1E 06 F1 | 	add	local01, #28
27eb4     0F 39 02 FB | 	rdlong	local14, local01
27eb8     1C 1E 86 F1 | 	sub	local01, #28
27ebc     14 2F 02 F6 | 	mov	local09, local06
27ec0     1C 2F 02 F1 | 	add	local09, local14
27ec4     17 35 C2 FA | 	rdbyte	local12, local09
27ec8     1A 33 42 F5 | 	or	local11, local12
27ecc     01 28 06 F1 | 	add	local06, #1
27ed0                 | LR__4096
27ed0     19 13 02 F6 | 	mov	arg01, local11
27ed4     01 00 00 FF 
27ed8     52 15 06 F6 | 	mov	arg02, ##850
27edc     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
27ee0     FD 32 02 F6 | 	mov	local11, result1
27ee4     19 25 02 F6 | 	mov	local04, local11
27ee8     0F 24 4E F7 | 	zerox	local04, #15 wz
27eec     00 26 06 A6 |  if_e	mov	local05, #0
27ef0     30 00 90 AD |  if_e	jmp	#LR__4097
27ef4     19 13 32 F9 | 	getword	arg01, local11, #0
27ef8     13 15 02 F6 | 	mov	arg02, local05
27efc     0C 20 06 F1 | 	add	local02, #12
27f00     10 15 02 F1 | 	add	arg02, local02
27f04     0C 16 06 F6 | 	mov	arg03, #12
27f08     13 17 82 F1 | 	sub	arg03, local05
27f0c     0C 20 86 F1 | 	sub	local02, #12
27f10     EC DF BF FD | 	call	#_fatfs_cc_put_utf
27f14     FD 38 0A F6 | 	mov	local14, result1 wz
27f18     00 26 06 A6 |  if_e	mov	local05, #0
27f1c     1C 27 02 51 |  if_ne	add	local05, local14
27f20     D8 FE 9F 5D |  if_ne	jmp	#LR__4094
27f24                 | LR__4097
27f24     13 25 02 F6 | 	mov	local04, local05
27f28     0C 20 06 F1 | 	add	local02, #12
27f2c     10 25 02 F1 | 	add	local04, local02
27f30     12 01 48 FC | 	wrbyte	#0, local04
27f34     10 20 06 F1 | 	add	local02, #16
27f38     10 25 CA FA | 	rdbyte	local04, local02 wz
27f3c     1C 20 86 F1 | 	sub	local02, #28
27f40     F8 00 90 5D |  if_ne	jmp	#LR__4103
27f44     00 26 0E F2 | 	cmp	local05, #0 wz
27f48     1C 00 90 5D |  if_ne	jmp	#LR__4098
27f4c     13 37 02 F6 | 	mov	local13, local05
27f50     1C 20 06 F1 | 	add	local02, #28
27f54     10 37 02 F1 | 	add	local13, local02
27f58     1B 7F 48 FC | 	wrbyte	#63, local13
27f5c     01 26 06 F1 | 	add	local05, #1
27f60     1C 20 86 F1 | 	sub	local02, #28
27f64     A4 00 90 FD | 	jmp	#LR__4102
27f68                 | LR__4098
27f68                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
27f68     00 26 06 F6 | 	mov	local05, #0
27f6c     00 28 06 F6 | 	mov	local06, #0
27f70     08 3A 06 F6 | 	mov	local15, #8
27f74                 | LR__4099
27f74     14 25 02 F6 | 	mov	local04, local06
27f78     0C 20 06 F1 | 	add	local02, #12
27f7c     10 25 02 F1 | 	add	local04, local02
27f80     12 37 CA FA | 	rdbyte	local13, local04 wz
27f84     0C 20 86 F1 | 	sub	local02, #12
27f88     80 00 90 AD |  if_e	jmp	#LR__4101
27f8c     14 2D 02 F6 | 	mov	local08, local06
27f90     0C 20 06 F1 | 	add	local02, #12
27f94     10 2D 02 F1 | 	add	local08, local02
27f98     16 33 C2 FA | 	rdbyte	local11, local08
27f9c     19 39 32 F9 | 	getword	local14, local11, #0
27fa0     2E 38 0E F2 | 	cmp	local14, #46 wz
27fa4     0C 20 86 F1 | 	sub	local02, #12
27fa8     10 3A 06 A6 |  if_e	mov	local15, #16
27fac     19 39 32 F9 | 	getword	local14, local11, #0
27fb0     41 38 16 F2 | 	cmp	local14, #65 wc
27fb4     30 00 90 CD |  if_b	jmp	#LR__4100
27fb8     19 2D 32 F9 | 	getword	local08, local11, #0
27fbc     5B 2C 16 F2 | 	cmp	local08, #91 wc
27fc0     24 00 90 3D |  if_ae	jmp	#LR__4100
27fc4     1C 1E 06 F1 | 	add	local01, #28
27fc8     0F 2F 02 FB | 	rdlong	local09, local01
27fcc     1C 1E 86 F1 | 	sub	local01, #28
27fd0     0C 2E 06 F1 | 	add	local09, #12
27fd4     17 31 C2 FA | 	rdbyte	local10, local09
27fd8     1D 39 E2 F8 | 	getbyte	local14, local15, #0
27fdc     1C 31 CA F7 | 	test	local10, local14 wz
27fe0     19 33 32 59 |  if_ne	getword	local11, local11, #0
27fe4     20 32 06 51 |  if_ne	add	local11, #32
27fe8                 | LR__4100
27fe8     13 39 02 F6 | 	mov	local14, local05
27fec     1C 20 06 F1 | 	add	local02, #28
27ff0     10 39 02 F1 | 	add	local14, local02
27ff4     19 33 32 F9 | 	getword	local11, local11, #0
27ff8     1C 33 42 FC | 	wrbyte	local11, local14
27ffc     01 28 06 F1 | 	add	local06, #1
28000     01 26 06 F1 | 	add	local05, #1
28004     1C 20 86 F1 | 	sub	local02, #28
28008     68 FF 9F FD | 	jmp	#LR__4099
2800c                 | LR__4101
2800c                 | LR__4102
2800c     1C 20 06 F1 | 	add	local02, #28
28010     10 27 02 F1 | 	add	local05, local02
28014     13 01 48 FC | 	wrbyte	#0, local05
28018     1C 1E 06 F1 | 	add	local01, #28
2801c     0F 25 02 FB | 	rdlong	local04, local01
28020     1C 1E 86 F1 | 	sub	local01, #28
28024     0C 24 06 F1 | 	add	local04, #12
28028     12 37 CA FA | 	rdbyte	local13, local04 wz
2802c     1C 20 86 F1 | 	sub	local02, #28
28030     0C 20 06 A1 |  if_e	add	local02, #12
28034     10 01 48 AC |  if_e	wrbyte	#0, local02
28038     0C 20 86 A1 |  if_e	sub	local02, #12
2803c                 | LR__4103
2803c     1C 1E 06 F1 | 	add	local01, #28
28040     0F 35 02 FB | 	rdlong	local12, local01
28044     0B 34 06 F1 | 	add	local12, #11
28048     1A 25 C2 FA | 	rdbyte	local04, local12
2804c     3F 24 06 F5 | 	and	local04, #63
28050     08 20 06 F1 | 	add	local02, #8
28054     10 25 42 FC | 	wrbyte	local04, local02
28058     08 20 86 F1 | 	sub	local02, #8
2805c     0F 13 02 FB | 	rdlong	arg01, local01
28060     1C 12 06 F1 | 	add	arg01, #28
28064                 | ' {
28064                 | ' 
28064                 | ' 	return *((DWORD*)ptr);
28064     09 FB 01 FB | 	rdlong	result1, arg01
28068     10 FB 61 FC | 	wrlong	result1, local02
2806c     0F 13 02 FB | 	rdlong	arg01, local01
28070     16 12 06 F1 | 	add	arg01, #22
28074                 | ' {
28074                 | ' 
28074                 | ' 	return *((WORD*)ptr);
28074     09 FB E1 FA | 	rdword	result1, arg01
28078     06 20 06 F1 | 	add	local02, #6
2807c     10 FB 51 FC | 	wrword	result1, local02
28080     0F 13 02 FB | 	rdlong	arg01, local01
28084     18 12 06 F1 | 	add	arg01, #24
28088                 | ' {
28088                 | ' 
28088                 | ' 	return *((WORD*)ptr);
28088     09 FB E1 FA | 	rdword	result1, arg01
2808c     02 20 86 F1 | 	sub	local02, #2
28090     10 FB 51 FC | 	wrword	result1, local02
28094                 | LR__4104
28094     A7 F0 03 F6 | 	mov	ptra, fp
28098     B2 00 A0 FD | 	call	#popregs_
2809c                 | _fatfs_cc_get_fileinfo_ret
2809c     2D 00 64 FD | 	ret
280a0                 | 
280a0                 | _fatfs_cc_create_name
280a0     0D 4A 05 F6 | 	mov	COUNT_, #13
280a4     A8 00 A0 FD | 	call	#pushregs_
280a8     34 F0 07 F1 | 	add	ptra, #52
280ac     04 4E 05 F1 | 	add	fp, #4
280b0     A7 12 62 FC | 	wrlong	arg01, fp
280b4     04 4E 05 F1 | 	add	fp, #4
280b8     A7 14 62 FC | 	wrlong	arg02, fp
280bc     0A FB 01 FB | 	rdlong	result1, arg02
280c0     28 4E 05 F1 | 	add	fp, #40
280c4     A7 FA 61 FC | 	wrlong	result1, fp
280c8     2C 4E 85 F1 | 	sub	fp, #44
280cc     A7 FA 01 FB | 	rdlong	result1, fp
280d0     FD 1E 02 FB | 	rdlong	local01, result1
280d4     0C 1E 06 F1 | 	add	local01, #12
280d8     0F 21 02 FB | 	rdlong	local02, local01
280dc     14 4E 05 F1 | 	add	fp, #20
280e0     A7 20 62 FC | 	wrlong	local02, fp
280e4     14 4E 05 F1 | 	add	fp, #20
280e8     A7 00 68 FC | 	wrlong	#0, fp
280ec     2C 4E 85 F1 | 	sub	fp, #44
280f0                 | ' 
280f0                 | ' 
280f0                 | ' 
280f0                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
280f0                 | ' 	for (;;) {
280f0                 | LR__4110
280f0     30 4E 05 F1 | 	add	fp, #48
280f4     A7 12 02 F6 | 	mov	arg01, fp
280f8     30 4E 85 F1 | 	sub	fp, #48
280fc     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
28100     1C 4E 05 F1 | 	add	fp, #28
28104     A7 FA 61 FC | 	wrlong	result1, fp
28108     1C 4E 85 F1 | 	sub	fp, #28
2810c     FF FF 7F FF 
28110     FF FB 0D F2 | 	cmp	result1, ##-1 wz
28114     06 FA 05 A6 |  if_e	mov	result1, #6
28118     74 08 90 AD |  if_e	jmp	#LR__4150
2811c     1C 4E 05 F1 | 	add	fp, #28
28120     A7 1E 02 FB | 	rdlong	local01, fp
28124     1C 4E 85 F1 | 	sub	fp, #28
28128     80 00 00 FF 
2812c     00 1E 16 F2 | 	cmp	local01, ##65536 wc
28130     3C 00 90 CD |  if_b	jmp	#LR__4111
28134     18 4E 05 F1 | 	add	fp, #24
28138     A7 22 02 FB | 	rdlong	local03, fp
2813c     14 4E 05 F1 | 	add	fp, #20
28140     A7 1E 02 FB | 	rdlong	local01, fp
28144     0F 25 02 F6 | 	mov	local04, local01
28148     01 24 06 F1 | 	add	local04, #1
2814c     A7 24 62 FC | 	wrlong	local04, fp
28150     01 1E 66 F0 | 	shl	local01, #1
28154     11 1F 02 F1 | 	add	local01, local03
28158     10 4E 85 F1 | 	sub	fp, #16
2815c     A7 26 02 FB | 	rdlong	local05, fp
28160     1C 4E 85 F1 | 	sub	fp, #28
28164     13 29 02 F6 | 	mov	local06, local05
28168     10 28 46 F0 | 	shr	local06, #16
2816c     0F 29 52 FC | 	wrword	local06, local01
28170                 | LR__4111
28170     1C 4E 05 F1 | 	add	fp, #28
28174     A7 1E 02 FB | 	rdlong	local01, fp
28178     08 4E 85 F1 | 	sub	fp, #8
2817c     A7 1E 52 FC | 	wrword	local01, fp
28180     A7 1E E2 FA | 	rdword	local01, fp
28184     14 4E 85 F1 | 	sub	fp, #20
28188     20 1E 16 F2 | 	cmp	local01, #32 wc
2818c     B0 00 90 CD |  if_b	jmp	#LR__4113
28190     14 4E 05 F1 | 	add	fp, #20
28194     A7 1E E2 FA | 	rdword	local01, fp
28198     14 4E 85 F1 | 	sub	fp, #20
2819c     2F 1E 0E F2 | 	cmp	local01, #47 wz
281a0     14 4E 05 51 |  if_ne	add	fp, #20
281a4     A7 24 E2 5A |  if_ne	rdword	local04, fp
281a8     14 4E 85 51 |  if_ne	sub	fp, #20
281ac     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
281b0     8C 00 90 AD |  if_e	jmp	#LR__4113
281b4     14 4E 05 F1 | 	add	fp, #20
281b8     A7 12 E2 FA | 	rdword	arg01, fp
281bc     14 4E 85 F1 | 	sub	fp, #20
281c0     80 12 16 F2 | 	cmp	arg01, #128 wc
281c4     24 00 90 3D |  if_ae	jmp	#LR__4112
281c8     70 01 00 FF 
281cc     04 13 06 F6 | 	mov	arg01, ##@LR__4772
281d0     14 4E 05 F1 | 	add	fp, #20
281d4     A7 14 E2 FA | 	rdword	arg02, fp
281d8     14 4E 85 F1 | 	sub	fp, #20
281dc     FC D0 BF FD | 	call	#_fatfs_cc_strchr
281e0     00 FA 0D F2 | 	cmp	result1, #0 wz
281e4     06 FA 05 56 |  if_ne	mov	result1, #6
281e8     A4 07 90 5D |  if_ne	jmp	#LR__4150
281ec                 | LR__4112
281ec     2C 4E 05 F1 | 	add	fp, #44
281f0     A7 28 02 FB | 	rdlong	local06, fp
281f4     2C 4E 85 F1 | 	sub	fp, #44
281f8     FF 28 16 F2 | 	cmp	local06, #255 wc
281fc     06 FA 05 36 |  if_ae	mov	result1, #6
28200     8C 07 90 3D |  if_ae	jmp	#LR__4150
28204     18 4E 05 F1 | 	add	fp, #24
28208     A7 22 02 FB | 	rdlong	local03, fp
2820c     14 4E 05 F1 | 	add	fp, #20
28210     A7 20 02 FB | 	rdlong	local02, fp
28214     10 25 02 F6 | 	mov	local04, local02
28218     01 24 06 F1 | 	add	local04, #1
2821c     A7 24 62 FC | 	wrlong	local04, fp
28220     10 1F 02 F6 | 	mov	local01, local02
28224     01 1E 66 F0 | 	shl	local01, #1
28228     11 1F 02 F1 | 	add	local01, local03
2822c     18 4E 85 F1 | 	sub	fp, #24
28230     A7 28 E2 FA | 	rdword	local06, fp
28234     14 4E 85 F1 | 	sub	fp, #20
28238     0F 29 52 FC | 	wrword	local06, local01
2823c     B0 FE 9F FD | 	jmp	#LR__4110
28240                 | LR__4113
28240     14 4E 05 F1 | 	add	fp, #20
28244     A7 2A E2 FA | 	rdword	local07, fp
28248     14 4E 85 F1 | 	sub	fp, #20
2824c     20 2A 16 F2 | 	cmp	local07, #32 wc
28250     10 4E 05 C1 |  if_b	add	fp, #16
28254     A7 08 48 CC |  if_b	wrbyte	#4, fp
28258     10 4E 85 C1 |  if_b	sub	fp, #16
2825c     74 00 90 CD |  if_b	jmp	#LR__4118
28260     97 24 48 FB | 	callpa	#(@LR__4116-@LR__4114)>>2,fcache_load_ptr_
28264                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
28264                 | LR__4114
28264     30 4E 05 F1 | 	add	fp, #48
28268     A7 24 02 FB | 	rdlong	local04, fp
2826c     30 4E 85 F1 | 	sub	fp, #48
28270     12 2B C2 FA | 	rdbyte	local07, local04
28274     2F 2A 0E F2 | 	cmp	local07, #47 wz
28278     18 00 90 AD |  if_e	jmp	#LR__4115
2827c     30 4E 05 F1 | 	add	fp, #48
28280     A7 24 02 FB | 	rdlong	local04, fp
28284     30 4E 85 F1 | 	sub	fp, #48
28288     12 21 C2 FA | 	rdbyte	local02, local04
2828c     5C 20 0E F2 | 	cmp	local02, #92 wz
28290     18 00 90 5D |  if_ne	jmp	#LR__4117
28294                 | LR__4115
28294     30 4E 05 F1 | 	add	fp, #48
28298     A7 1E 02 FB | 	rdlong	local01, fp
2829c     01 1E 06 F1 | 	add	local01, #1
282a0     A7 1E 62 FC | 	wrlong	local01, fp
282a4     30 4E 85 F1 | 	sub	fp, #48
282a8     B8 FF 9F FD | 	jmp	#LR__4114
282ac                 | LR__4116
282ac                 | LR__4117
282ac     10 4E 05 F1 | 	add	fp, #16
282b0     A7 00 48 FC | 	wrbyte	#0, fp
282b4     20 4E 05 F1 | 	add	fp, #32
282b8     A7 28 02 FB | 	rdlong	local06, fp
282bc     30 4E 85 F1 | 	sub	fp, #48
282c0     14 2B C2 FA | 	rdbyte	local07, local06
282c4     20 2A 16 F2 | 	cmp	local07, #32 wc
282c8     10 4E 05 C1 |  if_b	add	fp, #16
282cc     A7 08 48 CC |  if_b	wrbyte	#4, fp
282d0     10 4E 85 C1 |  if_b	sub	fp, #16
282d4                 | LR__4118
282d4     08 4E 05 F1 | 	add	fp, #8
282d8     A7 2A 02 FB | 	rdlong	local07, fp
282dc     28 4E 05 F1 | 	add	fp, #40
282e0     A7 1E 02 FB | 	rdlong	local01, fp
282e4     30 4E 85 F1 | 	sub	fp, #48
282e8     15 1F 62 FC | 	wrlong	local01, local07
282ec     97 38 48 FB | 	callpa	#(@LR__4120-@LR__4119)>>2,fcache_load_ptr_
282f0                 | ' 	}
282f0                 | ' 	*path = p;
282f0                 | ' #line 2862 "ff.c"
282f0                 | ' 	while (di) {
282f0                 | LR__4119
282f0     2C 4E 05 F1 | 	add	fp, #44
282f4     A7 2A 0A FB | 	rdlong	local07, fp wz
282f8     2C 4E 85 F1 | 	sub	fp, #44
282fc     60 00 90 AD |  if_e	jmp	#LR__4121
28300     18 4E 05 F1 | 	add	fp, #24
28304     A7 28 02 FB | 	rdlong	local06, fp
28308     14 4E 05 F1 | 	add	fp, #20
2830c     A7 24 02 FB | 	rdlong	local04, fp
28310     01 24 86 F1 | 	sub	local04, #1
28314     01 24 66 F0 | 	shl	local04, #1
28318     14 25 02 F1 | 	add	local04, local06
2831c     12 29 E2 FA | 	rdword	local06, local04
28320     18 4E 85 F1 | 	sub	fp, #24
28324     A7 28 52 FC | 	wrword	local06, fp
28328     A7 2A E2 FA | 	rdword	local07, fp
2832c     14 4E 85 F1 | 	sub	fp, #20
28330     20 2A 0E F2 | 	cmp	local07, #32 wz
28334     14 4E 05 51 |  if_ne	add	fp, #20
28338     A7 1E E2 5A |  if_ne	rdword	local01, fp
2833c     14 4E 85 51 |  if_ne	sub	fp, #20
28340     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
28344     18 00 90 5D |  if_ne	jmp	#LR__4121
28348     2C 4E 05 F1 | 	add	fp, #44
2834c     A7 1E 02 FB | 	rdlong	local01, fp
28350     01 1E 86 F1 | 	sub	local01, #1
28354     A7 1E 62 FC | 	wrlong	local01, fp
28358     2C 4E 85 F1 | 	sub	fp, #44
2835c     90 FF 9F FD | 	jmp	#LR__4119
28360                 | LR__4120
28360                 | LR__4121
28360     18 4E 05 F1 | 	add	fp, #24
28364     A7 2C 02 FB | 	rdlong	local08, fp
28368     14 4E 05 F1 | 	add	fp, #20
2836c     A7 24 02 FB | 	rdlong	local04, fp
28370     01 24 66 F0 | 	shl	local04, #1
28374     16 25 02 F1 | 	add	local04, local08
28378     12 01 58 FC | 	wrword	#0, local04
2837c     A7 2A 0A FB | 	rdlong	local07, fp wz
28380     2C 4E 85 F1 | 	sub	fp, #44
28384     06 FA 05 A6 |  if_e	mov	result1, #6
28388     04 06 90 AD |  if_e	jmp	#LR__4150
2838c                 | ' 
2838c                 | ' 
2838c                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2838c     28 4E 05 F1 | 	add	fp, #40
28390     A7 00 68 FC | 	wrlong	#0, fp
28394     28 4E 85 F1 | 	sub	fp, #40
28398     97 22 48 FB | 	callpa	#(@LR__4123-@LR__4122)>>2,fcache_load_ptr_
2839c                 | LR__4122
2839c     18 4E 05 F1 | 	add	fp, #24
283a0     A7 2E 02 FB | 	rdlong	local09, fp
283a4     10 4E 05 F1 | 	add	fp, #16
283a8     A7 30 02 FB | 	rdlong	local10, fp
283ac     28 4E 85 F1 | 	sub	fp, #40
283b0     01 30 66 F0 | 	shl	local10, #1
283b4     17 31 02 F1 | 	add	local10, local09
283b8     18 33 E2 FA | 	rdword	local11, local10
283bc     20 32 0E F2 | 	cmp	local11, #32 wz
283c0     1C 00 90 5D |  if_ne	jmp	#LR__4124
283c4     28 4E 05 F1 | 	add	fp, #40
283c8     A7 34 02 FB | 	rdlong	local12, fp
283cc     1A 27 02 F6 | 	mov	local05, local12
283d0     01 26 06 F1 | 	add	local05, #1
283d4     A7 26 62 FC | 	wrlong	local05, fp
283d8     28 4E 85 F1 | 	sub	fp, #40
283dc     BC FF 9F FD | 	jmp	#LR__4122
283e0                 | LR__4123
283e0                 | LR__4124
283e0     28 4E 05 F1 | 	add	fp, #40
283e4     A7 2A 02 FB | 	rdlong	local07, fp
283e8     28 4E 85 F1 | 	sub	fp, #40
283ec     01 2A 16 F2 | 	cmp	local07, #1 wc
283f0     28 00 90 3D |  if_ae	jmp	#LR__4125
283f4     18 4E 05 F1 | 	add	fp, #24
283f8     A7 22 02 FB | 	rdlong	local03, fp
283fc     10 4E 05 F1 | 	add	fp, #16
28400     A7 2E 02 FB | 	rdlong	local09, fp
28404     28 4E 85 F1 | 	sub	fp, #40
28408     01 2E 66 F0 | 	shl	local09, #1
2840c     11 2F 02 F1 | 	add	local09, local03
28410     17 1F E2 FA | 	rdword	local01, local09
28414     2E 1E 0E F2 | 	cmp	local01, #46 wz
28418     14 00 90 5D |  if_ne	jmp	#LR__4126
2841c                 | LR__4125
2841c     10 4E 05 F1 | 	add	fp, #16
28420     A7 2A C2 FA | 	rdbyte	local07, fp
28424     03 2A 46 F5 | 	or	local07, #3
28428     A7 2A 42 FC | 	wrbyte	local07, fp
2842c     10 4E 85 F1 | 	sub	fp, #16
28430                 | LR__4126
28430     97 2C 48 FB | 	callpa	#(@LR__4128-@LR__4127)>>2,fcache_load_ptr_
28434                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
28434                 | LR__4127
28434     2C 4E 05 F1 | 	add	fp, #44
28438     A7 2A 02 FB | 	rdlong	local07, fp
2843c     2C 4E 85 F1 | 	sub	fp, #44
28440     01 2A 16 F2 | 	cmp	local07, #1 wc
28444     44 00 90 CD |  if_b	jmp	#LR__4129
28448     18 4E 05 F1 | 	add	fp, #24
2844c     A7 28 02 FB | 	rdlong	local06, fp
28450     14 4E 05 F1 | 	add	fp, #20
28454     A7 22 02 FB | 	rdlong	local03, fp
28458     2C 4E 85 F1 | 	sub	fp, #44
2845c     01 22 86 F1 | 	sub	local03, #1
28460     01 22 66 F0 | 	shl	local03, #1
28464     14 23 02 F1 | 	add	local03, local06
28468     11 1F E2 FA | 	rdword	local01, local03
2846c     2E 1E 0E F2 | 	cmp	local01, #46 wz
28470     18 00 90 AD |  if_e	jmp	#LR__4129
28474     2C 4E 05 F1 | 	add	fp, #44
28478     A7 1E 02 FB | 	rdlong	local01, fp
2847c     01 1E 86 F1 | 	sub	local01, #1
28480     A7 1E 62 FC | 	wrlong	local01, fp
28484     2C 4E 85 F1 | 	sub	fp, #44
28488     A8 FF 9F FD | 	jmp	#LR__4127
2848c                 | LR__4128
2848c                 | LR__4129
2848c     04 4E 05 F1 | 	add	fp, #4
28490     A7 12 02 FB | 	rdlong	arg01, fp
28494     04 4E 85 F1 | 	sub	fp, #4
28498     20 12 06 F1 | 	add	arg01, #32
2849c     20 14 06 F6 | 	mov	arg02, #32
284a0     0B 16 06 F6 | 	mov	arg03, #11
284a4     09 37 02 F6 | 	mov	local13, arg01
284a8     98 00 A0 FD | 	call	#\builtin_bytefill_
284ac     1B FB 01 F6 | 	mov	result1, local13
284b0     0C 4E 05 F1 | 	add	fp, #12
284b4     A7 00 48 FC | 	wrbyte	#0, fp
284b8     A7 2A C2 FA | 	rdbyte	local07, fp
284bc     14 4E 05 F1 | 	add	fp, #20
284c0     A7 2A 62 FC | 	wrlong	local07, fp
284c4     04 4E 05 F1 | 	add	fp, #4
284c8     A7 10 68 FC | 	wrlong	#8, fp
284cc     24 4E 85 F1 | 	sub	fp, #36
284d0                 | ' 
284d0                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
284d0                 | ' 	i = b = 0; ni = 8;
284d0                 | ' 	for (;;) {
284d0                 | LR__4130
284d0     18 4E 05 F1 | 	add	fp, #24
284d4     A7 22 02 FB | 	rdlong	local03, fp
284d8     10 4E 05 F1 | 	add	fp, #16
284dc     A7 2E 02 FB | 	rdlong	local09, fp
284e0     17 25 02 F6 | 	mov	local04, local09
284e4     01 24 06 F1 | 	add	local04, #1
284e8     A7 24 62 FC | 	wrlong	local04, fp
284ec     01 2E 66 F0 | 	shl	local09, #1
284f0     11 2F 02 F1 | 	add	local09, local03
284f4     17 29 E2 FA | 	rdword	local06, local09
284f8     14 4E 85 F1 | 	sub	fp, #20
284fc     A7 28 52 FC | 	wrword	local06, fp
28500     A7 2A EA FA | 	rdword	local07, fp wz
28504     14 4E 85 F1 | 	sub	fp, #20
28508     74 03 90 AD |  if_e	jmp	#LR__4146
2850c     14 4E 05 F1 | 	add	fp, #20
28510     A7 2A E2 FA | 	rdword	local07, fp
28514     14 4E 85 F1 | 	sub	fp, #20
28518     20 2A 0E F2 | 	cmp	local07, #32 wz
2851c     30 00 90 AD |  if_e	jmp	#LR__4131
28520     14 4E 05 F1 | 	add	fp, #20
28524     A7 1E E2 FA | 	rdword	local01, fp
28528     14 4E 85 F1 | 	sub	fp, #20
2852c     2E 1E 0E F2 | 	cmp	local01, #46 wz
28530     34 00 90 5D |  if_ne	jmp	#LR__4132
28534     28 4E 05 F1 | 	add	fp, #40
28538     A7 24 02 FB | 	rdlong	local04, fp
2853c     04 4E 05 F1 | 	add	fp, #4
28540     A7 30 02 FB | 	rdlong	local10, fp
28544     2C 4E 85 F1 | 	sub	fp, #44
28548     18 25 0A F2 | 	cmp	local04, local10 wz
2854c     18 00 90 AD |  if_e	jmp	#LR__4132
28550                 | LR__4131
28550     10 4E 05 F1 | 	add	fp, #16
28554     A7 2A C2 FA | 	rdbyte	local07, fp
28558     03 2A 46 F5 | 	or	local07, #3
2855c     A7 2A 42 FC | 	wrbyte	local07, fp
28560     10 4E 85 F1 | 	sub	fp, #16
28564                 | ' 			cf |=  0x01  |  0x02 ;
28564                 | ' 			continue;
28564     68 FF 9F FD | 	jmp	#LR__4130
28568                 | LR__4132
28568     20 4E 05 F1 | 	add	fp, #32
2856c     A7 2A 02 FB | 	rdlong	local07, fp
28570     04 4E 05 F1 | 	add	fp, #4
28574     A7 1E 02 FB | 	rdlong	local01, fp
28578     24 4E 85 F1 | 	sub	fp, #36
2857c     0F 2B 12 F2 | 	cmp	local07, local01 wc
28580     1C 00 90 3D |  if_ae	jmp	#LR__4133
28584     28 4E 05 F1 | 	add	fp, #40
28588     A7 2C 02 FB | 	rdlong	local08, fp
2858c     04 4E 05 F1 | 	add	fp, #4
28590     A7 30 02 FB | 	rdlong	local10, fp
28594     2C 4E 85 F1 | 	sub	fp, #44
28598     18 2D 0A F2 | 	cmp	local08, local10 wz
2859c     B0 00 90 5D |  if_ne	jmp	#LR__4135
285a0                 | LR__4133
285a0     24 4E 05 F1 | 	add	fp, #36
285a4     A7 2A 02 FB | 	rdlong	local07, fp
285a8     24 4E 85 F1 | 	sub	fp, #36
285ac     0B 2A 0E F2 | 	cmp	local07, #11 wz
285b0     18 00 90 5D |  if_ne	jmp	#LR__4134
285b4     10 4E 05 F1 | 	add	fp, #16
285b8     A7 2A C2 FA | 	rdbyte	local07, fp
285bc     03 2A 46 F5 | 	or	local07, #3
285c0     A7 2A 42 FC | 	wrbyte	local07, fp
285c4     10 4E 85 F1 | 	sub	fp, #16
285c8                 | ' 				cf |=  0x01  |  0x02 ;
285c8                 | ' 				break;
285c8     B4 02 90 FD | 	jmp	#LR__4146
285cc                 | LR__4134
285cc     28 4E 05 F1 | 	add	fp, #40
285d0     A7 2A 02 FB | 	rdlong	local07, fp
285d4     04 4E 05 F1 | 	add	fp, #4
285d8     A7 1E 02 FB | 	rdlong	local01, fp
285dc     2C 4E 85 F1 | 	sub	fp, #44
285e0     0F 2B 0A F2 | 	cmp	local07, local01 wz
285e4     10 4E 05 51 |  if_ne	add	fp, #16
285e8     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
285ec     03 2A 46 55 |  if_ne	or	local07, #3
285f0     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
285f4     10 4E 85 51 |  if_ne	sub	fp, #16
285f8     28 4E 05 F1 | 	add	fp, #40
285fc     A7 2A 02 FB | 	rdlong	local07, fp
28600     04 4E 05 F1 | 	add	fp, #4
28604     A7 20 02 FB | 	rdlong	local02, fp
28608     2C 4E 85 F1 | 	sub	fp, #44
2860c     10 2B 1A F2 | 	cmp	local07, local02 wcz
28610     6C 02 90 1D |  if_a	jmp	#LR__4146
28614     2C 4E 05 F1 | 	add	fp, #44
28618     A7 2A 02 FB | 	rdlong	local07, fp
2861c     04 4E 85 F1 | 	sub	fp, #4
28620     A7 2A 62 FC | 	wrlong	local07, fp
28624     08 4E 85 F1 | 	sub	fp, #8
28628     A7 10 68 FC | 	wrlong	#8, fp
2862c     04 4E 05 F1 | 	add	fp, #4
28630     A7 16 68 FC | 	wrlong	#11, fp
28634     18 4E 85 F1 | 	sub	fp, #24
28638     A7 32 C2 FA | 	rdbyte	local11, fp
2863c     19 2B E2 F8 | 	getbyte	local07, local11, #0
28640     02 2A 66 F0 | 	shl	local07, #2
28644     A7 2A 42 FC | 	wrbyte	local07, fp
28648     0C 4E 85 F1 | 	sub	fp, #12
2864c                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2864c                 | ' 			continue;
2864c     80 FE 9F FD | 	jmp	#LR__4130
28650                 | LR__4135
28650     14 4E 05 F1 | 	add	fp, #20
28654     A7 2A E2 FA | 	rdword	local07, fp
28658     14 4E 85 F1 | 	sub	fp, #20
2865c     80 2A 16 F2 | 	cmp	local07, #128 wc
28660     6C 00 90 CD |  if_b	jmp	#LR__4137
28664     10 4E 05 F1 | 	add	fp, #16
28668     A7 2A C2 FA | 	rdbyte	local07, fp
2866c     02 2A 46 F5 | 	or	local07, #2
28670     A7 2A 42 FC | 	wrbyte	local07, fp
28674     04 4E 05 F1 | 	add	fp, #4
28678     A7 12 E2 FA | 	rdword	arg01, fp
2867c     14 4E 85 F1 | 	sub	fp, #20
28680     01 00 00 FF 
28684     52 15 06 F6 | 	mov	arg02, ##850
28688     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2868c     14 4E 05 F1 | 	add	fp, #20
28690     A7 FA 51 FC | 	wrword	result1, fp
28694     A7 2A E2 FA | 	rdword	local07, fp
28698     14 4E 85 F1 | 	sub	fp, #20
2869c     80 2A CE F7 | 	test	local07, #128 wz
286a0     2C 00 90 AD |  if_e	jmp	#LR__4136
286a4     14 4E 05 F1 | 	add	fp, #20
286a8     A7 20 E2 FA | 	rdword	local02, fp
286ac     7F 20 06 F5 | 	and	local02, #127
286b0     01 00 00 FF 
286b4     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
286b8     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
286bc     10 2B C2 FA | 	rdbyte	local07, local02
286c0     A7 2A 52 FC | 	wrword	local07, fp
286c4     14 4E 85 F1 | 	sub	fp, #20
286c8     01 00 00 FF 
286cc     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
286d0                 | LR__4136
286d0                 | LR__4137
286d0     14 4E 05 F1 | 	add	fp, #20
286d4     A7 2A E2 FA | 	rdword	local07, fp
286d8     14 4E 85 F1 | 	sub	fp, #20
286dc     00 2B 16 F2 | 	cmp	local07, #256 wc
286e0     88 00 90 CD |  if_b	jmp	#LR__4139
286e4     24 4E 05 F1 | 	add	fp, #36
286e8     A7 2A 02 FB | 	rdlong	local07, fp
286ec     01 2A 86 F1 | 	sub	local07, #1
286f0     04 4E 85 F1 | 	sub	fp, #4
286f4     A7 20 02 FB | 	rdlong	local02, fp
286f8     20 4E 85 F1 | 	sub	fp, #32
286fc     15 21 12 F2 | 	cmp	local02, local07 wc
28700     2C 00 90 CD |  if_b	jmp	#LR__4138
28704     10 4E 05 F1 | 	add	fp, #16
28708     A7 32 C2 FA | 	rdbyte	local11, fp
2870c     19 2B E2 F8 | 	getbyte	local07, local11, #0
28710     03 2A 46 F5 | 	or	local07, #3
28714     A7 2A 42 FC | 	wrbyte	local07, fp
28718     14 4E 05 F1 | 	add	fp, #20
2871c     A7 2A 02 FB | 	rdlong	local07, fp
28720     04 4E 85 F1 | 	sub	fp, #4
28724     A7 2A 62 FC | 	wrlong	local07, fp
28728     20 4E 85 F1 | 	sub	fp, #32
2872c                 | ' 				cf |=  0x01  |  0x02 ;
2872c                 | ' 				i = ni; continue;
2872c     A0 FD 9F FD | 	jmp	#LR__4130
28730                 | LR__4138
28730     04 4E 05 F1 | 	add	fp, #4
28734     A7 2E 02 FB | 	rdlong	local09, fp
28738     1C 4E 05 F1 | 	add	fp, #28
2873c     A7 30 02 FB | 	rdlong	local10, fp
28740     18 25 02 F6 | 	mov	local04, local10
28744     01 24 06 F1 | 	add	local04, #1
28748     A7 24 62 FC | 	wrlong	local04, fp
2874c     20 2E 06 F1 | 	add	local09, #32
28750     17 31 02 F1 | 	add	local10, local09
28754     0C 4E 85 F1 | 	sub	fp, #12
28758     A7 22 E2 FA | 	rdword	local03, fp
2875c     14 4E 85 F1 | 	sub	fp, #20
28760     08 22 46 F0 | 	shr	local03, #8
28764     18 23 42 FC | 	wrbyte	local03, local10
28768     D4 00 90 FD | 	jmp	#LR__4145
2876c                 | LR__4139
2876c     14 4E 05 F1 | 	add	fp, #20
28770     A7 2A EA FA | 	rdword	local07, fp wz
28774     14 4E 85 F1 | 	sub	fp, #20
28778     20 00 90 AD |  if_e	jmp	#LR__4140
2877c     70 01 00 FF 
28780     0D 13 06 F6 | 	mov	arg01, ##@LR__4773
28784     14 4E 05 F1 | 	add	fp, #20
28788     A7 14 E2 FA | 	rdword	arg02, fp
2878c     14 4E 85 F1 | 	sub	fp, #20
28790     48 CB BF FD | 	call	#_fatfs_cc_strchr
28794     00 FA 0D F2 | 	cmp	result1, #0 wz
28798     20 00 90 AD |  if_e	jmp	#LR__4141
2879c                 | LR__4140
2879c     14 4E 05 F1 | 	add	fp, #20
287a0     A7 BE 58 FC | 	wrword	#95, fp
287a4     04 4E 85 F1 | 	sub	fp, #4
287a8     A7 2A C2 FA | 	rdbyte	local07, fp
287ac     03 2A 46 F5 | 	or	local07, #3
287b0     A7 2A 42 FC | 	wrbyte	local07, fp
287b4     10 4E 85 F1 | 	sub	fp, #16
287b8     84 00 90 FD | 	jmp	#LR__4144
287bc                 | LR__4141
287bc     14 4E 05 F1 | 	add	fp, #20
287c0     A7 2A E2 FA | 	rdword	local07, fp
287c4     14 4E 85 F1 | 	sub	fp, #20
287c8     41 2A 16 F2 | 	cmp	local07, #65 wc
287cc     24 00 90 CD |  if_b	jmp	#LR__4142
287d0     14 4E 05 F1 | 	add	fp, #20
287d4     A7 1E E2 FA | 	rdword	local01, fp
287d8     14 4E 85 F1 | 	sub	fp, #20
287dc     5B 1E 16 F2 | 	cmp	local01, #91 wc
287e0     0C 4E 05 C1 |  if_b	add	fp, #12
287e4     A7 2A C2 CA |  if_b	rdbyte	local07, fp
287e8     02 2A 46 C5 |  if_b	or	local07, #2
287ec     A7 2A 42 CC |  if_b	wrbyte	local07, fp
287f0     0C 4E 85 C1 |  if_b	sub	fp, #12
287f4                 | LR__4142
287f4     14 4E 05 F1 | 	add	fp, #20
287f8     A7 2A E2 FA | 	rdword	local07, fp
287fc     14 4E 85 F1 | 	sub	fp, #20
28800     61 2A 16 F2 | 	cmp	local07, #97 wc
28804     38 00 90 CD |  if_b	jmp	#LR__4143
28808     14 4E 05 F1 | 	add	fp, #20
2880c     A7 1E E2 FA | 	rdword	local01, fp
28810     14 4E 85 F1 | 	sub	fp, #20
28814     7B 1E 16 F2 | 	cmp	local01, #123 wc
28818     24 00 90 3D |  if_ae	jmp	#LR__4143
2881c     0C 4E 05 F1 | 	add	fp, #12
28820     A7 2A C2 FA | 	rdbyte	local07, fp
28824     01 2A 46 F5 | 	or	local07, #1
28828     A7 2A 42 FC | 	wrbyte	local07, fp
2882c     08 4E 05 F1 | 	add	fp, #8
28830     A7 2A E2 FA | 	rdword	local07, fp
28834     20 2A 86 F1 | 	sub	local07, #32
28838     A7 2A 52 FC | 	wrword	local07, fp
2883c     14 4E 85 F1 | 	sub	fp, #20
28840                 | LR__4143
28840                 | LR__4144
28840                 | LR__4145
28840     04 4E 05 F1 | 	add	fp, #4
28844     A7 32 02 FB | 	rdlong	local11, fp
28848     19 2F 02 F6 | 	mov	local09, local11
2884c     1C 4E 05 F1 | 	add	fp, #28
28850     A7 20 02 FB | 	rdlong	local02, fp
28854     10 25 02 F6 | 	mov	local04, local02
28858     01 24 06 F1 | 	add	local04, #1
2885c     A7 24 62 FC | 	wrlong	local04, fp
28860     10 31 02 F6 | 	mov	local10, local02
28864     20 2E 06 F1 | 	add	local09, #32
28868     17 31 02 F1 | 	add	local10, local09
2886c     0C 4E 85 F1 | 	sub	fp, #12
28870     A7 22 E2 FA | 	rdword	local03, fp
28874     14 4E 85 F1 | 	sub	fp, #20
28878     18 23 42 FC | 	wrbyte	local03, local10
2887c     50 FC 9F FD | 	jmp	#LR__4130
28880                 | LR__4146
28880     04 4E 05 F1 | 	add	fp, #4
28884     A7 32 02 FB | 	rdlong	local11, fp
28888     04 4E 85 F1 | 	sub	fp, #4
2888c     20 32 06 F1 | 	add	local11, #32
28890     19 2B C2 FA | 	rdbyte	local07, local11
28894     E5 2A 0E F2 | 	cmp	local07, #229 wz
28898     04 4E 05 A1 |  if_e	add	fp, #4
2889c     A7 2A 02 AB |  if_e	rdlong	local07, fp
288a0     04 4E 85 A1 |  if_e	sub	fp, #4
288a4     20 2A 06 A1 |  if_e	add	local07, #32
288a8     15 0B 48 AC |  if_e	wrbyte	#5, local07
288ac     24 4E 05 F1 | 	add	fp, #36
288b0     A7 2A 02 FB | 	rdlong	local07, fp
288b4     24 4E 85 F1 | 	sub	fp, #36
288b8     08 2A 0E F2 | 	cmp	local07, #8 wz
288bc     0C 4E 05 A1 |  if_e	add	fp, #12
288c0     A7 2A C2 AA |  if_e	rdbyte	local07, fp
288c4     02 2A 66 A0 |  if_e	shl	local07, #2
288c8     A7 2A 42 AC |  if_e	wrbyte	local07, fp
288cc     0C 4E 85 A1 |  if_e	sub	fp, #12
288d0     0C 4E 05 F1 | 	add	fp, #12
288d4     A7 2A C2 FA | 	rdbyte	local07, fp
288d8     0C 4E 85 F1 | 	sub	fp, #12
288dc     0C 2A 06 F5 | 	and	local07, #12
288e0     0C 2A 0E F2 | 	cmp	local07, #12 wz
288e4     18 00 90 AD |  if_e	jmp	#LR__4147
288e8     0C 4E 05 F1 | 	add	fp, #12
288ec     A7 1E C2 FA | 	rdbyte	local01, fp
288f0     0C 4E 85 F1 | 	sub	fp, #12
288f4     03 1E 06 F5 | 	and	local01, #3
288f8     03 1E 0E F2 | 	cmp	local01, #3 wz
288fc     14 00 90 5D |  if_ne	jmp	#LR__4148
28900                 | LR__4147
28900     10 4E 05 F1 | 	add	fp, #16
28904     A7 2A C2 FA | 	rdbyte	local07, fp
28908     02 2A 46 F5 | 	or	local07, #2
2890c     A7 2A 42 FC | 	wrbyte	local07, fp
28910     10 4E 85 F1 | 	sub	fp, #16
28914                 | LR__4148
28914     10 4E 05 F1 | 	add	fp, #16
28918     A7 2A C2 FA | 	rdbyte	local07, fp
2891c     10 4E 85 F1 | 	sub	fp, #16
28920     02 2A CE F7 | 	test	local07, #2 wz
28924     48 00 90 5D |  if_ne	jmp	#LR__4149
28928     0C 4E 05 F1 | 	add	fp, #12
2892c     A7 2A C2 FA | 	rdbyte	local07, fp
28930     0C 4E 85 F1 | 	sub	fp, #12
28934     01 2A CE F7 | 	test	local07, #1 wz
28938     10 4E 05 51 |  if_ne	add	fp, #16
2893c     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
28940     10 2A 46 55 |  if_ne	or	local07, #16
28944     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
28948     10 4E 85 51 |  if_ne	sub	fp, #16
2894c     0C 4E 05 F1 | 	add	fp, #12
28950     A7 2A C2 FA | 	rdbyte	local07, fp
28954     0C 4E 85 F1 | 	sub	fp, #12
28958     04 2A CE F7 | 	test	local07, #4 wz
2895c     10 4E 05 51 |  if_ne	add	fp, #16
28960     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
28964     08 2A 46 55 |  if_ne	or	local07, #8
28968     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2896c     10 4E 85 51 |  if_ne	sub	fp, #16
28970                 | LR__4149
28970     04 4E 05 F1 | 	add	fp, #4
28974     A7 2A 02 FB | 	rdlong	local07, fp
28978     0C 4E 05 F1 | 	add	fp, #12
2897c     A7 1E C2 FA | 	rdbyte	local01, fp
28980     10 4E 85 F1 | 	sub	fp, #16
28984     2B 2A 06 F1 | 	add	local07, #43
28988     15 1F 42 FC | 	wrbyte	local01, local07
2898c                 | ' 	}
2898c                 | ' 
2898c                 | ' 	dp->fn[ 11 ] = cf;
2898c                 | ' 
2898c                 | ' 	return FR_OK;
2898c     00 FA 05 F6 | 	mov	result1, #0
28990                 | LR__4150
28990     A7 F0 03 F6 | 	mov	ptra, fp
28994     B2 00 A0 FD | 	call	#popregs_
28998                 | _fatfs_cc_create_name_ret
28998     2D 00 64 FD | 	ret
2899c                 | 
2899c                 | _fatfs_cc_follow_path
2899c     02 4A 05 F6 | 	mov	COUNT_, #2
289a0     A8 00 A0 FD | 	call	#pushregs_
289a4     18 F0 07 F1 | 	add	ptra, #24
289a8     04 4E 05 F1 | 	add	fp, #4
289ac     A7 12 62 FC | 	wrlong	arg01, fp
289b0     04 4E 05 F1 | 	add	fp, #4
289b4     A7 14 62 FC | 	wrlong	arg02, fp
289b8     04 4E 85 F1 | 	sub	fp, #4
289bc     A7 FA 01 FB | 	rdlong	result1, fp
289c0     FD 1E 02 FB | 	rdlong	local01, result1
289c4     10 4E 05 F1 | 	add	fp, #16
289c8     A7 1E 62 FC | 	wrlong	local01, fp
289cc     14 4E 85 F1 | 	sub	fp, #20
289d0     97 24 48 FB | 	callpa	#(@LR__4162-@LR__4160)>>2,fcache_load_ptr_
289d4                 | ' )
289d4                 | ' {
289d4                 | ' 	FRESULT res;
289d4                 | ' 	BYTE ns;
289d4                 | ' 	FATFS *fs = dp->obj.fs;
289d4                 | ' #line 3034 "ff.c"
289d4                 | ' 	{
289d4                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
289d4                 | LR__4160
289d4     08 4E 05 F1 | 	add	fp, #8
289d8     A7 1E 02 FB | 	rdlong	local01, fp
289dc     08 4E 85 F1 | 	sub	fp, #8
289e0     0F 1F C2 FA | 	rdbyte	local01, local01
289e4     2F 1E 0E F2 | 	cmp	local01, #47 wz
289e8     18 00 90 AD |  if_e	jmp	#LR__4161
289ec     08 4E 05 F1 | 	add	fp, #8
289f0     A7 1E 02 FB | 	rdlong	local01, fp
289f4     08 4E 85 F1 | 	sub	fp, #8
289f8     0F 1F C2 FA | 	rdbyte	local01, local01
289fc     5C 1E 0E F2 | 	cmp	local01, #92 wz
28a00     18 00 90 5D |  if_ne	jmp	#LR__4163
28a04                 | LR__4161
28a04     08 4E 05 F1 | 	add	fp, #8
28a08     A7 1E 02 FB | 	rdlong	local01, fp
28a0c     01 1E 06 F1 | 	add	local01, #1
28a10     A7 1E 62 FC | 	wrlong	local01, fp
28a14     08 4E 85 F1 | 	sub	fp, #8
28a18     B8 FF 9F FD | 	jmp	#LR__4160
28a1c                 | LR__4162
28a1c                 | LR__4163
28a1c     04 4E 05 F1 | 	add	fp, #4
28a20     A7 1E 02 FB | 	rdlong	local01, fp
28a24     08 1E 06 F1 | 	add	local01, #8
28a28     0F 01 68 FC | 	wrlong	#0, local01
28a2c     04 4E 05 F1 | 	add	fp, #4
28a30     A7 1E 02 FB | 	rdlong	local01, fp
28a34     08 4E 85 F1 | 	sub	fp, #8
28a38     0F 1F C2 FA | 	rdbyte	local01, local01
28a3c     20 1E 16 F2 | 	cmp	local01, #32 wc
28a40     30 00 90 3D |  if_ae	jmp	#LR__4164
28a44     04 4E 05 F1 | 	add	fp, #4
28a48     A7 1E 02 FB | 	rdlong	local01, fp
28a4c     2B 1E 06 F1 | 	add	local01, #43
28a50     0F 01 49 FC | 	wrbyte	#128, local01
28a54     A7 12 02 FB | 	rdlong	arg01, fp
28a58     04 4E 85 F1 | 	sub	fp, #4
28a5c     00 14 06 F6 | 	mov	arg02, #0
28a60     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
28a64     0C 4E 05 F1 | 	add	fp, #12
28a68     A7 FA 61 FC | 	wrlong	result1, fp
28a6c     0C 4E 85 F1 | 	sub	fp, #12
28a70     1C 01 90 FD | 	jmp	#LR__4168
28a74                 | LR__4164
28a74                 | ' 		for (;;) {
28a74                 | LR__4165
28a74     04 4E 05 F1 | 	add	fp, #4
28a78     A7 12 02 FB | 	rdlong	arg01, fp
28a7c     04 4E 05 F1 | 	add	fp, #4
28a80     A7 14 02 F6 | 	mov	arg02, fp
28a84     08 4E 85 F1 | 	sub	fp, #8
28a88     14 F6 BF FD | 	call	#_fatfs_cc_create_name
28a8c     0C 4E 05 F1 | 	add	fp, #12
28a90     A7 FA 61 FC | 	wrlong	result1, fp
28a94     00 FA 4D F2 | 	cmps	result1, #0 wz
28a98     0C 4E 85 F1 | 	sub	fp, #12
28a9c     F0 00 90 5D |  if_ne	jmp	#LR__4167
28aa0     04 4E 05 F1 | 	add	fp, #4
28aa4     A7 12 02 FB | 	rdlong	arg01, fp
28aa8     04 4E 85 F1 | 	sub	fp, #4
28aac     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
28ab0     0C 4E 05 F1 | 	add	fp, #12
28ab4     A7 FA 61 FC | 	wrlong	result1, fp
28ab8     08 4E 85 F1 | 	sub	fp, #8
28abc     A7 1E 02 FB | 	rdlong	local01, fp
28ac0     2B 1E 06 F1 | 	add	local01, #43
28ac4     0F 1F C2 FA | 	rdbyte	local01, local01
28ac8     0C 4E 05 F1 | 	add	fp, #12
28acc     A7 1E 42 FC | 	wrbyte	local01, fp
28ad0     04 4E 85 F1 | 	sub	fp, #4
28ad4     A7 1E 0A FB | 	rdlong	local01, fp wz
28ad8     0C 4E 85 F1 | 	sub	fp, #12
28adc     34 00 90 AD |  if_e	jmp	#LR__4166
28ae0     0C 4E 05 F1 | 	add	fp, #12
28ae4     A7 1E 02 FB | 	rdlong	local01, fp
28ae8     0C 4E 85 F1 | 	sub	fp, #12
28aec     04 1E 0E F2 | 	cmp	local01, #4 wz
28af0     9C 00 90 5D |  if_ne	jmp	#LR__4167
28af4     10 4E 05 F1 | 	add	fp, #16
28af8     A7 1E C2 FA | 	rdbyte	local01, fp
28afc     10 4E 85 F1 | 	sub	fp, #16
28b00     04 1E CE F7 | 	test	local01, #4 wz
28b04     0C 4E 05 A1 |  if_e	add	fp, #12
28b08     A7 0A 68 AC |  if_e	wrlong	#5, fp
28b0c     0C 4E 85 A1 |  if_e	sub	fp, #12
28b10                 | ' 					}
28b10                 | ' 				}
28b10                 | ' 				break;
28b10     7C 00 90 FD | 	jmp	#LR__4167
28b14                 | LR__4166
28b14     10 4E 05 F1 | 	add	fp, #16
28b18     A7 1E C2 FA | 	rdbyte	local01, fp
28b1c     10 4E 85 F1 | 	sub	fp, #16
28b20     04 1E CE F7 | 	test	local01, #4 wz
28b24     68 00 90 5D |  if_ne	jmp	#LR__4167
28b28     04 4E 05 F1 | 	add	fp, #4
28b2c     A7 1E 02 FB | 	rdlong	local01, fp
28b30     04 4E 85 F1 | 	sub	fp, #4
28b34     06 1E 06 F1 | 	add	local01, #6
28b38     0F 1F C2 FA | 	rdbyte	local01, local01
28b3c     10 1E CE F7 | 	test	local01, #16 wz
28b40     0C 4E 05 A1 |  if_e	add	fp, #12
28b44     A7 0A 68 AC |  if_e	wrlong	#5, fp
28b48     0C 4E 85 A1 |  if_e	sub	fp, #12
28b4c                 | ' 				res = FR_NO_PATH; break;
28b4c     40 00 90 AD |  if_e	jmp	#LR__4167
28b50     04 4E 05 F1 | 	add	fp, #4
28b54     A7 20 02 FB | 	rdlong	local02, fp
28b58     10 1F 02 F6 | 	mov	local01, local02
28b5c     10 4E 05 F1 | 	add	fp, #16
28b60     A7 14 02 FB | 	rdlong	arg02, fp
28b64     0A 13 02 F6 | 	mov	arg01, arg02
28b68     34 14 06 F1 | 	add	arg02, #52
28b6c     14 4E 85 F1 | 	sub	fp, #20
28b70     10 20 06 F1 | 	add	local02, #16
28b74     10 21 02 FB | 	rdlong	local02, local02
28b78     FF 21 06 F5 | 	and	local02, #511
28b7c     10 15 02 F1 | 	add	arg02, local02
28b80     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
28b84     08 1E 06 F1 | 	add	local01, #8
28b88     0F FB 61 FC | 	wrlong	result1, local01
28b8c     E4 FE 9F FD | 	jmp	#LR__4165
28b90                 | LR__4167
28b90                 | LR__4168
28b90                 | ' 			}
28b90                 | ' #line 3090 "ff.c"
28b90                 | ' 			{
28b90                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
28b90                 | ' 			}
28b90                 | ' 		}
28b90                 | ' 	}
28b90                 | ' 
28b90                 | ' 	return res;
28b90     0C 4E 05 F1 | 	add	fp, #12
28b94     A7 FA 01 FB | 	rdlong	result1, fp
28b98     0C 4E 85 F1 | 	sub	fp, #12
28b9c     A7 F0 03 F6 | 	mov	ptra, fp
28ba0     B2 00 A0 FD | 	call	#popregs_
28ba4                 | _fatfs_cc_follow_path_ret
28ba4     2D 00 64 FD | 	ret
28ba8                 | 
28ba8                 | _fatfs_cc_get_ldnumber
28ba8     01 00 66 F6 | 	neg	_var01, #1
28bac     09 03 0A FB | 	rdlong	_var02, arg01 wz
28bb0     01 05 02 F6 | 	mov	_var03, _var02
28bb4     01 FA 65 A6 |  if_e	neg	result1, #1
28bb8     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
28bbc     97 10 48 FB | 	callpa	#(@LR__4171-@LR__4170)>>2,fcache_load_ptr_
28bc0                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
28bc0                 | LR__4170
28bc0     02 07 C2 FA | 	rdbyte	_var04, _var03
28bc4     03 FB E1 F8 | 	getbyte	result1, _var04, #0
28bc8     20 FA 15 F2 | 	cmp	result1, #32 wc
28bcc     01 04 06 F1 | 	add	_var03, #1
28bd0     03 09 02 36 |  if_ae	mov	_var05, _var04
28bd4     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
28bd8     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
28bdc     E0 FF 9F 1D |  if_a	jmp	#LR__4170
28be0                 | LR__4171
28be0     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
28be4     3A 06 0E F2 | 	cmp	_var04, #58 wz
28be8     40 00 90 5D |  if_ne	jmp	#LR__4173
28bec     01 0A 06 F6 | 	mov	_var06, #1
28bf0     01 09 C2 FA | 	rdbyte	_var05, _var02
28bf4     30 08 16 F2 | 	cmp	_var05, #48 wc
28bf8     1C 00 90 CD |  if_b	jmp	#LR__4172
28bfc     01 09 C2 FA | 	rdbyte	_var05, _var02
28c00     3A 08 16 F2 | 	cmp	_var05, #58 wc
28c04     01 0D 02 C6 |  if_b	mov	_var07, _var02
28c08     02 0C 06 C1 |  if_b	add	_var07, #2
28c0c     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
28c10     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
28c14     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
28c18                 | LR__4172
28c18     01 0A 56 F2 | 	cmps	_var06, #1 wc
28c1c     05 01 02 C6 |  if_b	mov	_var01, _var06
28c20     09 05 62 CC |  if_b	wrlong	_var03, arg01
28c24                 | ' 			vol = i;
28c24                 | ' 			*path = tt;
28c24                 | ' 		}
28c24                 | ' 		return vol;
28c24     00 FB 01 F6 | 	mov	result1, _var01
28c28     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
28c2c                 | LR__4173
28c2c                 | ' 	}
28c2c                 | ' #line 3170 "ff.c"
28c2c                 | ' 	vol = 0;
28c2c                 | ' 
28c2c                 | ' 	return vol;
28c2c     00 FA 05 F6 | 	mov	result1, #0
28c30                 | _fatfs_cc_get_ldnumber_ret
28c30     2D 00 64 FD | 	ret
28c34                 | 
28c34                 | _fatfs_cc_check_fs
28c34     04 4A 05 F6 | 	mov	COUNT_, #4
28c38     A8 00 A0 FD | 	call	#pushregs_
28c3c     09 1F 02 F6 | 	mov	local01, arg01
28c40     03 1E 06 F1 | 	add	local01, #3
28c44     0F 01 48 FC | 	wrbyte	#0, local01
28c48     2D 1E 06 F1 | 	add	local01, #45
28c4c     FF FF FF FF 
28c50     0F FF 6B FC | 	wrlong	##-1, local01
28c54     30 1E 86 F1 | 	sub	local01, #48
28c58     0F 13 02 F6 | 	mov	arg01, local01
28c5c     18 D5 BF FD | 	call	#_fatfs_cc_move_window
28c60     00 FA 0D F2 | 	cmp	result1, #0 wz
28c64     04 FA 05 56 |  if_ne	mov	result1, #4
28c68     94 01 90 5D |  if_ne	jmp	#LR__4184
28c6c     34 1E 06 F1 | 	add	local01, #52
28c70     0F 13 02 F6 | 	mov	arg01, local01
28c74     FE 13 06 F1 | 	add	arg01, #510
28c78                 | ' {
28c78                 | ' 
28c78                 | ' 	return *((WORD*)ptr);
28c78     09 21 E2 FA | 	rdword	local02, arg01
28c7c     0F 23 C2 FA | 	rdbyte	local03, local01
28c80     34 1E 86 F1 | 	sub	local01, #52
28c84     11 25 E2 F8 | 	getbyte	local04, local03, #0
28c88     EB 24 0E F2 | 	cmp	local04, #235 wz
28c8c     11 17 02 56 |  if_ne	mov	arg03, local03
28c90     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
28c94     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
28c98     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
28c9c     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
28ca0     44 01 90 5D |  if_ne	jmp	#LR__4183
28ca4     10 25 32 F9 | 	getword	local04, local02, #0
28ca8     55 00 00 FF 
28cac     55 24 0E F2 | 	cmp	local04, ##43605 wz
28cb0     2C 00 90 5D |  if_ne	jmp	#LR__4180
28cb4     34 1E 06 F1 | 	add	local01, #52
28cb8     0F 13 02 F6 | 	mov	arg01, local01
28cbc     34 1E 86 F1 | 	sub	local01, #52
28cc0     52 12 06 F1 | 	add	arg01, #82
28cc4     70 01 00 FF 
28cc8     14 15 06 F6 | 	mov	arg02, ##@LR__4774
28ccc     08 16 06 F6 | 	mov	arg03, #8
28cd0     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
28cd4     00 FA 0D F2 | 	cmp	result1, #0 wz
28cd8                 | ' 			return 0;
28cd8     00 FA 05 A6 |  if_e	mov	result1, #0
28cdc     20 01 90 AD |  if_e	jmp	#LR__4184
28ce0                 | LR__4180
28ce0     34 1E 06 F1 | 	add	local01, #52
28ce4     0F 13 02 F6 | 	mov	arg01, local01
28ce8     0B 12 06 F1 | 	add	arg01, #11
28cec                 | ' {
28cec                 | ' 
28cec                 | ' 	return *((WORD*)ptr);
28cec     09 FB E1 FA | 	rdword	result1, arg01
28cf0     0D 1E 06 F1 | 	add	local01, #13
28cf4     0F 23 C2 FA | 	rdbyte	local03, local01
28cf8     41 1E 86 F1 | 	sub	local01, #65
28cfc     FD 24 32 F9 | 	getword	local04, result1, #0
28d00     FD 14 32 F9 | 	getword	arg02, result1, #0
28d04     01 14 86 F1 | 	sub	arg02, #1
28d08     0A 25 CA F7 | 	test	local04, arg02 wz
28d0c     D8 00 90 5D |  if_ne	jmp	#LR__4182
28d10     FD 14 32 F9 | 	getword	arg02, result1, #0
28d14     01 00 00 FF 
28d18     00 14 16 F2 | 	cmp	arg02, ##512 wc
28d1c     C8 00 90 CD |  if_b	jmp	#LR__4182
28d20     FD 14 32 F9 | 	getword	arg02, result1, #0
28d24     01 00 00 FF 
28d28     01 14 16 F2 | 	cmp	arg02, ##513 wc
28d2c     B8 00 90 3D |  if_ae	jmp	#LR__4182
28d30     11 13 02 F6 | 	mov	arg01, local03
28d34     07 12 4E F7 | 	zerox	arg01, #7 wz
28d38     AC 00 90 AD |  if_e	jmp	#LR__4182
28d3c     11 13 E2 F8 | 	getbyte	arg01, local03, #0
28d40     11 23 E2 F8 | 	getbyte	local03, local03, #0
28d44     01 22 86 F1 | 	sub	local03, #1
28d48     11 13 CA F7 | 	test	arg01, local03 wz
28d4c     98 00 90 5D |  if_ne	jmp	#LR__4182
28d50     34 1E 06 F1 | 	add	local01, #52
28d54     0F 13 02 F6 | 	mov	arg01, local01
28d58     34 1E 86 F1 | 	sub	local01, #52
28d5c     0E 12 06 F1 | 	add	arg01, #14
28d60                 | ' {
28d60                 | ' 
28d60                 | ' 	return *((WORD*)ptr);
28d60     09 FB E9 FA | 	rdword	result1, arg01 wz
28d64     80 00 90 AD |  if_e	jmp	#LR__4182
28d68     44 1E 06 F1 | 	add	local01, #68
28d6c     0F 13 C2 FA | 	rdbyte	arg01, local01
28d70     44 1E 86 F1 | 	sub	local01, #68
28d74     01 12 86 F1 | 	sub	arg01, #1
28d78     02 12 16 F2 | 	cmp	arg01, #2 wc
28d7c     68 00 90 3D |  if_ae	jmp	#LR__4182
28d80     34 1E 06 F1 | 	add	local01, #52
28d84     0F 13 02 F6 | 	mov	arg01, local01
28d88     34 1E 86 F1 | 	sub	local01, #52
28d8c     11 12 06 F1 | 	add	arg01, #17
28d90                 | ' {
28d90                 | ' 
28d90                 | ' 	return *((WORD*)ptr);
28d90     09 FB E9 FA | 	rdword	result1, arg01 wz
28d94     50 00 90 AD |  if_e	jmp	#LR__4182
28d98     34 1E 06 F1 | 	add	local01, #52
28d9c     0F 13 02 F6 | 	mov	arg01, local01
28da0     34 1E 86 F1 | 	sub	local01, #52
28da4     13 12 06 F1 | 	add	arg01, #19
28da8                 | ' {
28da8                 | ' 
28da8                 | ' 	return *((WORD*)ptr);
28da8     09 FB E1 FA | 	rdword	result1, arg01
28dac     FD 22 32 F9 | 	getword	local03, result1, #0
28db0     80 22 16 F2 | 	cmp	local03, #128 wc
28db4     20 00 90 3D |  if_ae	jmp	#LR__4181
28db8     34 1E 06 F1 | 	add	local01, #52
28dbc     0F 13 02 F6 | 	mov	arg01, local01
28dc0     34 1E 86 F1 | 	sub	local01, #52
28dc4     20 12 06 F1 | 	add	arg01, #32
28dc8                 | ' {
28dc8                 | ' 
28dc8                 | ' 	return *((DWORD*)ptr);
28dc8     09 FB 01 FB | 	rdlong	result1, arg01
28dcc     80 00 00 FF 
28dd0     00 FA 15 F2 | 	cmp	result1, ##65536 wc
28dd4     10 00 90 CD |  if_b	jmp	#LR__4182
28dd8                 | LR__4181
28dd8     4A 1E 06 F1 | 	add	local01, #74
28ddc                 | ' {
28ddc                 | ' 
28ddc                 | ' 	return *((WORD*)ptr);
28ddc     0F FB E9 FA | 	rdword	result1, local01 wz
28de0                 | ' 			&& b != 0 && (b & (b - 1)) == 0
28de0                 | ' 			&& ld_word(fs->win +  14 ) != 0
28de0                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
28de0                 | ' 			&& ld_word(fs->win +  17 ) != 0
28de0                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
28de0                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
28de0                 | ' 				return 0;
28de0     00 FA 05 56 |  if_ne	mov	result1, #0
28de4     18 00 90 5D |  if_ne	jmp	#LR__4184
28de8                 | LR__4182
28de8                 | LR__4183
28de8                 | ' 		}
28de8                 | ' 	}
28de8                 | ' 	return sign == 0xAA55 ? 2 : 3;
28de8     10 23 32 F9 | 	getword	local03, local02, #0
28dec     55 00 00 FF 
28df0     55 22 0E F2 | 	cmp	local03, ##43605 wz
28df4     02 24 06 A6 |  if_e	mov	local04, #2
28df8     03 24 06 56 |  if_ne	mov	local04, #3
28dfc     12 FB 01 F6 | 	mov	result1, local04
28e00                 | LR__4184
28e00     A7 F0 03 F6 | 	mov	ptra, fp
28e04     B2 00 A0 FD | 	call	#popregs_
28e08                 | _fatfs_cc_check_fs_ret
28e08     2D 00 64 FD | 	ret
28e0c                 | 
28e0c                 | _fatfs_cc_find_volume
28e0c     05 4A 05 F6 | 	mov	COUNT_, #5
28e10     A8 00 A0 FD | 	call	#pushregs_
28e14     24 F0 07 F1 | 	add	ptra, #36
28e18     09 1F 02 F6 | 	mov	local01, arg01
28e1c     0A 21 02 F6 | 	mov	local02, arg02
28e20     0F 13 02 F6 | 	mov	arg01, local01
28e24     00 14 06 F6 | 	mov	arg02, #0
28e28     08 FE BF FD | 	call	#_fatfs_cc_check_fs
28e2c     02 FA 0D F2 | 	cmp	result1, #2 wz
28e30     0C 00 90 AD |  if_e	jmp	#LR__4190
28e34     03 FA 15 F2 | 	cmp	result1, #3 wc
28e38     00 20 0E C2 |  if_b	cmp	local02, #0 wz
28e3c     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4198
28e40                 | LR__4190
28e40                 | ' 	for (i = 0; i < 4; i++) {
28e40     00 22 06 F6 | 	mov	local03, #0
28e44     97 26 48 FB | 	callpa	#(@LR__4192-@LR__4191)>>2,fcache_load_ptr_
28e48                 | LR__4191
28e48     04 22 16 F2 | 	cmp	local03, #4 wc
28e4c     44 00 90 3D |  if_ae	jmp	#LR__4193
28e50     11 25 02 F6 | 	mov	local04, local03
28e54     02 24 66 F0 | 	shl	local04, #2
28e58     14 4E 05 F1 | 	add	fp, #20
28e5c     A7 24 02 F1 | 	add	local04, fp
28e60     34 1E 06 F1 | 	add	local01, #52
28e64     0F 13 02 F6 | 	mov	arg01, local01
28e68     34 1E 86 F1 | 	sub	local01, #52
28e6c     BE 13 06 F1 | 	add	arg01, #446
28e70     11 15 02 F6 | 	mov	arg02, local03
28e74     04 14 66 F0 | 	shl	arg02, #4
28e78     0A 13 02 F1 | 	add	arg01, arg02
28e7c     08 12 06 F1 | 	add	arg01, #8
28e80                 | ' {
28e80                 | ' 
28e80                 | ' 	return *((DWORD*)ptr);
28e80     09 FB 01 FB | 	rdlong	result1, arg01
28e84     14 4E 85 F1 | 	sub	fp, #20
28e88     12 FB 61 FC | 	wrlong	result1, local04
28e8c     01 22 06 F1 | 	add	local03, #1
28e90     B4 FF 9F FD | 	jmp	#LR__4191
28e94                 | LR__4192
28e94                 | LR__4193
28e94     00 20 0E F2 | 	cmp	local02, #0 wz
28e98     10 25 02 56 |  if_ne	mov	local04, local02
28e9c     01 24 86 51 |  if_ne	sub	local04, #1
28ea0     00 24 06 A6 |  if_e	mov	local04, #0
28ea4     12 23 02 F6 | 	mov	local03, local04
28ea8                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
28ea8                 | ' 	}
28ea8                 | ' 	i = part ? part - 1 : 0;
28ea8                 | ' 	do {
28ea8                 | LR__4194
28ea8     11 25 02 F6 | 	mov	local04, local03
28eac     02 24 66 F0 | 	shl	local04, #2
28eb0     14 4E 05 F1 | 	add	fp, #20
28eb4     A7 24 02 F1 | 	add	local04, fp
28eb8     12 25 0A FB | 	rdlong	local04, local04 wz
28ebc     14 4E 85 F1 | 	sub	fp, #20
28ec0     28 00 90 AD |  if_e	jmp	#LR__4195
28ec4     11 25 02 F6 | 	mov	local04, local03
28ec8     02 24 66 F0 | 	shl	local04, #2
28ecc     14 4E 05 F1 | 	add	fp, #20
28ed0     A7 24 02 F1 | 	add	local04, fp
28ed4     12 15 02 FB | 	rdlong	arg02, local04
28ed8     0F 13 02 F6 | 	mov	arg01, local01
28edc     14 4E 85 F1 | 	sub	fp, #20
28ee0     50 FD BF FD | 	call	#_fatfs_cc_check_fs
28ee4     FD 24 02 F6 | 	mov	local04, result1
28ee8     04 00 90 FD | 	jmp	#LR__4196
28eec                 | LR__4195
28eec     03 24 06 F6 | 	mov	local04, #3
28ef0                 | LR__4196
28ef0     12 27 02 F6 | 	mov	local05, local04
28ef4     00 20 0E F2 | 	cmp	local02, #0 wz
28ef8     02 26 16 A2 |  if_e	cmp	local05, #2 wc
28efc     0C 00 90 8D |  if_c_and_z	jmp	#LR__4197
28f00     01 22 06 A1 |  if_e	add	local03, #1
28f04     04 22 16 A2 |  if_e	cmp	local03, #4 wc
28f08     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4194
28f0c                 | LR__4197
28f0c                 | ' 	return fmt;
28f0c     13 FB 01 F6 | 	mov	result1, local05
28f10                 | LR__4198
28f10     A7 F0 03 F6 | 	mov	ptra, fp
28f14     B2 00 A0 FD | 	call	#popregs_
28f18                 | _fatfs_cc_find_volume_ret
28f18     2D 00 64 FD | 	ret
28f1c                 | 
28f1c                 | _fatfs_cc_mount_volume
28f1c     0B 4A 05 F6 | 	mov	COUNT_, #11
28f20     A8 00 A0 FD | 	call	#pushregs_
28f24     0A 1F 02 F6 | 	mov	local01, arg02
28f28     0B 21 02 F6 | 	mov	local02, arg03
28f2c     0F 01 68 FC | 	wrlong	#0, local01
28f30     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
28f34     FD 22 02 F6 | 	mov	local03, result1
28f38     00 22 56 F2 | 	cmps	local03, #0 wc
28f3c     0B FA 05 C6 |  if_b	mov	result1, #11
28f40     3C 05 90 CD |  if_b	jmp	#LR__4210
28f44     11 17 02 F6 | 	mov	arg03, local03
28f48     02 16 66 F0 | 	shl	arg03, #2
28f4c     F2 16 02 F1 | 	add	arg03, objptr
28f50     0B 25 0A FB | 	rdlong	local04, arg03 wz
28f54     0C FA 05 A6 |  if_e	mov	result1, #12
28f58     24 05 90 AD |  if_e	jmp	#LR__4210
28f5c     0F 25 62 FC | 	wrlong	local04, local01
28f60     10 21 E2 F8 | 	getbyte	local02, local02, #0
28f64     FE 20 06 F5 | 	and	local02, #254
28f68     12 17 CA FA | 	rdbyte	arg03, local04 wz
28f6c     4C 00 90 AD |  if_e	jmp	#LR__4201
28f70     01 24 06 F1 | 	add	local04, #1
28f74     12 13 CA FA | 	rdbyte	arg01, local04 wz
28f78     01 24 86 F1 | 	sub	local04, #1
28f7c     01 FA 05 56 |  if_ne	mov	result1, #1
28f80                 | ' 
28f80                 | ' 	return Stat;
28f80     01 00 00 AF 
28f84     20 E4 05 A1 |  if_e	add	objptr, ##544
28f88     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
28f8c     01 00 00 AF 
28f90     20 E4 85 A1 |  if_e	sub	objptr, ##544
28f94     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
28f98     01 16 CE F7 | 	test	arg03, #1 wz
28f9c     1C 00 90 5D |  if_ne	jmp	#LR__4200
28fa0     00 20 0E F2 | 	cmp	local02, #0 wz
28fa4     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
28fa8     04 FA CD 57 |  if_ne	test	result1, #4 wz
28fac                 | ' 				return FR_WRITE_PROTECTED;
28fac     0A FA 05 56 |  if_ne	mov	result1, #10
28fb0     CC 04 90 5D |  if_ne	jmp	#LR__4210
28fb4                 | ' 			}
28fb4                 | ' 			return FR_OK;
28fb4     00 FA 05 F6 | 	mov	result1, #0
28fb8     C4 04 90 FD | 	jmp	#LR__4210
28fbc                 | LR__4200
28fbc                 | LR__4201
28fbc     12 01 48 FC | 	wrbyte	#0, local04
28fc0     01 24 06 F1 | 	add	local04, #1
28fc4     12 23 42 FC | 	wrbyte	local03, local04
28fc8     12 13 C2 FA | 	rdbyte	arg01, local04
28fcc     01 24 86 F1 | 	sub	local04, #1
28fd0     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
28fd4     FD 16 02 F6 | 	mov	arg03, result1
28fd8     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
28fdc     01 26 CE F7 | 	test	local05, #1 wz
28fe0                 | ' 		return FR_NOT_READY;
28fe0     03 FA 05 56 |  if_ne	mov	result1, #3
28fe4     98 04 90 5D |  if_ne	jmp	#LR__4210
28fe8     00 20 0E F2 | 	cmp	local02, #0 wz
28fec     0B 27 02 56 |  if_ne	mov	local05, arg03
28ff0     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
28ff4     04 26 CE 57 |  if_ne	test	local05, #4 wz
28ff8                 | ' 		return FR_WRITE_PROTECTED;
28ff8     0A FA 05 56 |  if_ne	mov	result1, #10
28ffc     80 04 90 5D |  if_ne	jmp	#LR__4210
29000     12 13 02 F6 | 	mov	arg01, local04
29004     00 14 06 F6 | 	mov	arg02, #0
29008     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2900c     FD 12 02 F6 | 	mov	arg01, result1
29010     04 12 0E F2 | 	cmp	arg01, #4 wz
29014     01 FA 05 A6 |  if_e	mov	result1, #1
29018     64 04 90 AD |  if_e	jmp	#LR__4210
2901c     02 12 16 F2 | 	cmp	arg01, #2 wc
29020     0D FA 05 36 |  if_ae	mov	result1, #13
29024     58 04 90 3D |  if_ae	jmp	#LR__4210
29028     30 24 06 F1 | 	add	local04, #48
2902c     12 29 02 FB | 	rdlong	local06, local04
29030     04 24 06 F1 | 	add	local04, #4
29034     12 13 02 F6 | 	mov	arg01, local04
29038     34 24 86 F1 | 	sub	local04, #52
2903c     0B 12 06 F1 | 	add	arg01, #11
29040                 | ' {
29040                 | ' 
29040                 | ' 	return *((WORD*)ptr);
29040     09 FB E1 FA | 	rdword	result1, arg01
29044     01 00 00 FF 
29048     00 FA 0D F2 | 	cmp	result1, ##512 wz
2904c     0D FA 05 56 |  if_ne	mov	result1, #13
29050     2C 04 90 5D |  if_ne	jmp	#LR__4210
29054     34 24 06 F1 | 	add	local04, #52
29058     12 13 02 F6 | 	mov	arg01, local04
2905c     34 24 86 F1 | 	sub	local04, #52
29060     16 12 06 F1 | 	add	arg01, #22
29064                 | ' {
29064                 | ' 
29064                 | ' 	return *((WORD*)ptr);
29064     09 FB E1 FA | 	rdword	result1, arg01
29068     FD 2A 0A F6 | 	mov	local07, result1 wz
2906c     18 00 90 5D |  if_ne	jmp	#LR__4202
29070     34 24 06 F1 | 	add	local04, #52
29074     12 13 02 F6 | 	mov	arg01, local04
29078     34 24 86 F1 | 	sub	local04, #52
2907c     24 12 06 F1 | 	add	arg01, #36
29080                 | ' {
29080                 | ' 
29080                 | ' 	return *((DWORD*)ptr);
29080     09 FB 01 FB | 	rdlong	result1, arg01
29084     FD 2A 02 F6 | 	mov	local07, result1
29088                 | LR__4202
29088     1C 24 06 F1 | 	add	local04, #28
2908c     12 2B 62 FC | 	wrlong	local07, local04
29090     28 24 06 F1 | 	add	local04, #40
29094     12 27 C2 FA | 	rdbyte	local05, local04
29098     42 24 86 F1 | 	sub	local04, #66
2909c     12 27 42 FC | 	wrbyte	local05, local04
290a0     12 27 C2 FA | 	rdbyte	local05, local04
290a4     02 24 86 F1 | 	sub	local04, #2
290a8     01 26 0E F2 | 	cmp	local05, #1 wz
290ac     02 24 06 51 |  if_ne	add	local04, #2
290b0     12 27 C2 5A |  if_ne	rdbyte	local05, local04
290b4     02 24 86 51 |  if_ne	sub	local04, #2
290b8     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
290bc     0D FA 05 56 |  if_ne	mov	result1, #13
290c0     BC 03 90 5D |  if_ne	jmp	#LR__4210
290c4     02 24 06 F1 | 	add	local04, #2
290c8     12 27 C2 FA | 	rdbyte	local05, local04
290cc     13 2B 02 FD | 	qmul	local07, local05
290d0     3F 24 06 F1 | 	add	local04, #63
290d4     12 27 C2 FA | 	rdbyte	local05, local04
290d8     37 24 86 F1 | 	sub	local04, #55
290dc     12 27 52 FC | 	wrword	local05, local04
290e0     12 27 EA FA | 	rdword	local05, local04 wz
290e4     0A 24 86 F1 | 	sub	local04, #10
290e8     18 2A 62 FD | 	getqx	local07
290ec     20 00 90 AD |  if_e	jmp	#LR__4203
290f0     0A 24 06 F1 | 	add	local04, #10
290f4     12 27 E2 FA | 	rdword	local05, local04
290f8     13 23 32 F9 | 	getword	local03, local05, #0
290fc     0A 24 86 F1 | 	sub	local04, #10
29100     13 27 32 F9 | 	getword	local05, local05, #0
29104     01 26 86 F1 | 	sub	local05, #1
29108     13 23 CA F7 | 	test	local03, local05 wz
2910c     08 00 90 AD |  if_e	jmp	#LR__4204
29110                 | LR__4203
29110     0D FA 05 F6 | 	mov	result1, #13
29114     68 03 90 FD | 	jmp	#LR__4210
29118                 | LR__4204
29118     34 24 06 F1 | 	add	local04, #52
2911c     12 13 02 F6 | 	mov	arg01, local04
29120     11 12 06 F1 | 	add	arg01, #17
29124                 | ' {
29124                 | ' 
29124                 | ' 	return *((WORD*)ptr);
29124     09 FB E1 FA | 	rdword	result1, arg01
29128     2C 24 86 F1 | 	sub	local04, #44
2912c     12 FB 51 FC | 	wrword	result1, local04
29130     12 27 E2 FA | 	rdword	local05, local04
29134     08 24 86 F1 | 	sub	local04, #8
29138     13 13 52 F6 | 	abs	arg01, local05 wc
2913c     09 13 42 F8 | 	getnib	arg01, arg01, #0
29140     09 13 8A F6 | 	negc	arg01, arg01 wz
29144     0D FA 05 56 |  if_ne	mov	result1, #13
29148     34 03 90 5D |  if_ne	jmp	#LR__4210
2914c     34 24 06 F1 | 	add	local04, #52
29150     12 13 02 F6 | 	mov	arg01, local04
29154     34 24 86 F1 | 	sub	local04, #52
29158     13 12 06 F1 | 	add	arg01, #19
2915c                 | ' {
2915c                 | ' 
2915c                 | ' 	return *((WORD*)ptr);
2915c     09 FB E1 FA | 	rdword	result1, arg01
29160     FD 2C 0A F6 | 	mov	local08, result1 wz
29164     34 24 06 A1 |  if_e	add	local04, #52
29168     12 13 02 A6 |  if_e	mov	arg01, local04
2916c     34 24 86 A1 |  if_e	sub	local04, #52
29170     20 12 06 A1 |  if_e	add	arg01, #32
29174                 | ' {
29174                 | ' 
29174                 | ' 	return *((DWORD*)ptr);
29174     09 2D 02 AB |  if_e	rdlong	local08, arg01
29178     34 24 06 F1 | 	add	local04, #52
2917c     12 13 02 F6 | 	mov	arg01, local04
29180     34 24 86 F1 | 	sub	local04, #52
29184     0E 12 06 F1 | 	add	arg01, #14
29188                 | ' {
29188                 | ' 
29188                 | ' 	return *((WORD*)ptr);
29188     09 FB E1 FA | 	rdword	result1, arg01
2918c     FD 12 02 F6 | 	mov	arg01, result1
29190     09 27 02 F6 | 	mov	local05, arg01
29194     0F 26 4E F7 | 	zerox	local05, #15 wz
29198     0D FA 05 A6 |  if_e	mov	result1, #13
2919c     E0 02 90 AD |  if_e	jmp	#LR__4210
291a0     09 2F 32 F9 | 	getword	local09, arg01, #0
291a4     15 2F 02 F1 | 	add	local09, local07
291a8     08 24 06 F1 | 	add	local04, #8
291ac     12 27 E2 FA | 	rdword	local05, local04
291b0     08 24 86 F1 | 	sub	local04, #8
291b4     13 27 52 F6 | 	abs	local05, local05 wc
291b8     04 26 46 F0 | 	shr	local05, #4
291bc     13 2F 82 F3 | 	sumc	local09, local05
291c0     17 2D 12 F2 | 	cmp	local08, local09 wc
291c4     0D FA 05 C6 |  if_b	mov	result1, #13
291c8     B4 02 90 CD |  if_b	jmp	#LR__4210
291cc     17 2D 82 F1 | 	sub	local08, local09
291d0     0A 24 06 F1 | 	add	local04, #10
291d4     12 27 E2 FA | 	rdword	local05, local04
291d8     13 2D 12 FD | 	qdiv	local08, local05
291dc     0A 24 86 F1 | 	sub	local04, #10
291e0     18 26 62 FD | 	getqx	local05
291e4     00 26 0E F2 | 	cmp	local05, #0 wz
291e8     0D FA 05 A6 |  if_e	mov	result1, #13
291ec     90 02 90 AD |  if_e	jmp	#LR__4210
291f0     00 30 06 F6 | 	mov	local10, #0
291f4     FF FF 07 FF 
291f8     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
291fc     03 30 06 C6 |  if_b	mov	local10, #3
29200     7F 00 00 FF 
29204     F6 27 16 F2 | 	cmp	local05, ##65526 wc
29208     02 30 06 C6 |  if_b	mov	local10, #2
2920c     07 00 00 FF 
29210     F6 27 16 F2 | 	cmp	local05, ##4086 wc
29214     01 30 06 C6 |  if_b	mov	local10, #1
29218     00 30 0E F2 | 	cmp	local10, #0 wz
2921c     0D FA 05 A6 |  if_e	mov	result1, #13
29220     5C 02 90 AD |  if_e	jmp	#LR__4210
29224     02 26 06 F1 | 	add	local05, #2
29228     18 24 06 F1 | 	add	local04, #24
2922c     12 27 62 FC | 	wrlong	local05, local04
29230     08 24 06 F1 | 	add	local04, #8
29234     12 29 62 FC | 	wrlong	local06, local04
29238     14 27 02 F6 | 	mov	local05, local06
2923c     09 13 32 F9 | 	getword	arg01, arg01, #0
29240     09 27 02 F1 | 	add	local05, arg01
29244     04 24 06 F1 | 	add	local04, #4
29248     12 27 62 FC | 	wrlong	local05, local04
2924c     14 27 02 F6 | 	mov	local05, local06
29250     17 27 02 F1 | 	add	local05, local09
29254     08 24 06 F1 | 	add	local04, #8
29258     12 27 62 FC | 	wrlong	local05, local04
2925c     2C 24 86 F1 | 	sub	local04, #44
29260     03 30 0E F2 | 	cmp	local10, #3 wz
29264     5C 00 90 5D |  if_ne	jmp	#LR__4205
29268     34 24 06 F1 | 	add	local04, #52
2926c     12 13 02 F6 | 	mov	arg01, local04
29270     34 24 86 F1 | 	sub	local04, #52
29274     2A 12 06 F1 | 	add	arg01, #42
29278                 | ' {
29278                 | ' 
29278                 | ' 	return *((WORD*)ptr);
29278     09 FB E9 FA | 	rdword	result1, arg01 wz
2927c     0D FA 05 56 |  if_ne	mov	result1, #13
29280     FC 01 90 5D |  if_ne	jmp	#LR__4210
29284     08 24 06 F1 | 	add	local04, #8
29288     12 27 EA FA | 	rdword	local05, local04 wz
2928c     08 24 86 F1 | 	sub	local04, #8
29290     0D FA 05 56 |  if_ne	mov	result1, #13
29294     E8 01 90 5D |  if_ne	jmp	#LR__4210
29298     34 24 06 F1 | 	add	local04, #52
2929c     12 13 02 F6 | 	mov	arg01, local04
292a0     2C 12 06 F1 | 	add	arg01, #44
292a4                 | ' {
292a4                 | ' 
292a4                 | ' 	return *((DWORD*)ptr);
292a4     09 FB 01 FB | 	rdlong	result1, arg01
292a8     0C 24 86 F1 | 	sub	local04, #12
292ac     12 FB 61 FC | 	wrlong	result1, local04
292b0     10 24 86 F1 | 	sub	local04, #16
292b4     12 33 02 FB | 	rdlong	local11, local04
292b8     18 24 86 F1 | 	sub	local04, #24
292bc     02 32 66 F0 | 	shl	local11, #2
292c0     6C 00 90 FD | 	jmp	#LR__4207
292c4                 | LR__4205
292c4     08 24 06 F1 | 	add	local04, #8
292c8     12 27 EA FA | 	rdword	local05, local04 wz
292cc     08 24 86 F1 | 	sub	local04, #8
292d0     0D FA 05 A6 |  if_e	mov	result1, #13
292d4     A8 01 90 AD |  if_e	jmp	#LR__4210
292d8     24 24 06 F1 | 	add	local04, #36
292dc     12 27 02 FB | 	rdlong	local05, local04
292e0     15 27 02 F1 | 	add	local05, local07
292e4     04 24 06 F1 | 	add	local04, #4
292e8     12 27 62 FC | 	wrlong	local05, local04
292ec     28 24 86 F1 | 	sub	local04, #40
292f0     02 30 0E F2 | 	cmp	local10, #2 wz
292f4     18 24 06 A1 |  if_e	add	local04, #24
292f8     12 27 02 AB |  if_e	rdlong	local05, local04
292fc     18 24 86 A1 |  if_e	sub	local04, #24
29300     01 26 66 A0 |  if_e	shl	local05, #1
29304     24 00 90 AD |  if_e	jmp	#LR__4206
29308     18 24 06 F1 | 	add	local04, #24
2930c     12 33 02 FB | 	rdlong	local11, local04
29310     19 27 02 F6 | 	mov	local05, local11
29314     01 26 66 F0 | 	shl	local05, #1
29318     19 27 02 F1 | 	add	local05, local11
2931c     01 26 46 F0 | 	shr	local05, #1
29320     18 24 86 F1 | 	sub	local04, #24
29324     01 32 06 F5 | 	and	local11, #1
29328     19 27 02 F1 | 	add	local05, local11
2932c                 | LR__4206
2932c     13 33 02 F6 | 	mov	local11, local05
29330                 | LR__4207
29330     FF 33 06 F1 | 	add	local11, #511
29334     09 32 46 F0 | 	shr	local11, #9
29338     1C 24 06 F1 | 	add	local04, #28
2933c     12 17 02 FB | 	rdlong	arg03, local04
29340     1C 24 86 F1 | 	sub	local04, #28
29344     19 17 12 F2 | 	cmp	arg03, local11 wc
29348     0D FA 05 C6 |  if_b	mov	result1, #13
2934c     30 01 90 CD |  if_b	jmp	#LR__4210
29350     14 24 06 F1 | 	add	local04, #20
29354     FF FF FF FF 
29358     12 FF 6B FC | 	wrlong	##-1, local04
2935c     04 24 86 F1 | 	sub	local04, #4
29360     FF FF FF FF 
29364     12 FF 6B FC | 	wrlong	##-1, local04
29368     0C 24 86 F1 | 	sub	local04, #12
2936c     12 01 49 FC | 	wrbyte	#128, local04
29370     04 24 86 F1 | 	sub	local04, #4
29374     03 30 0E F2 | 	cmp	local10, #3 wz
29378     D0 00 90 5D |  if_ne	jmp	#LR__4209
2937c     34 24 06 F1 | 	add	local04, #52
29380     12 13 02 F6 | 	mov	arg01, local04
29384     34 24 86 F1 | 	sub	local04, #52
29388     30 12 06 F1 | 	add	arg01, #48
2938c                 | ' {
2938c                 | ' 
2938c                 | ' 	return *((WORD*)ptr);
2938c     09 FB E1 FA | 	rdword	result1, arg01
29390     FD 26 32 F9 | 	getword	local05, result1, #0
29394     01 26 0E F2 | 	cmp	local05, #1 wz
29398     B0 00 90 5D |  if_ne	jmp	#LR__4209
2939c     01 28 06 F1 | 	add	local06, #1
293a0     12 13 02 F6 | 	mov	arg01, local04
293a4     14 15 02 F6 | 	mov	arg02, local06
293a8     CC CD BF FD | 	call	#_fatfs_cc_move_window
293ac     00 FA 0D F2 | 	cmp	result1, #0 wz
293b0     98 00 90 5D |  if_ne	jmp	#LR__4209
293b4     04 24 06 F1 | 	add	local04, #4
293b8     12 01 48 FC | 	wrbyte	#0, local04
293bc     30 24 06 F1 | 	add	local04, #48
293c0     12 13 02 F6 | 	mov	arg01, local04
293c4     34 24 86 F1 | 	sub	local04, #52
293c8     FE 13 06 F1 | 	add	arg01, #510
293cc                 | ' {
293cc                 | ' 
293cc                 | ' 	return *((WORD*)ptr);
293cc     09 FB E1 FA | 	rdword	result1, arg01
293d0     FD 26 32 F9 | 	getword	local05, result1, #0
293d4     55 00 00 FF 
293d8     55 26 0E F2 | 	cmp	local05, ##43605 wz
293dc     34 24 06 A1 |  if_e	add	local04, #52
293e0     12 13 02 A6 |  if_e	mov	arg01, local04
293e4     34 24 86 A1 |  if_e	sub	local04, #52
293e8                 | ' {
293e8                 | ' 
293e8                 | ' 	return *((DWORD*)ptr);
293e8     09 FB 01 AB |  if_e	rdlong	result1, arg01
293ec     A9 B0 20 AF 
293f0     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
293f4     54 00 90 5D |  if_ne	jmp	#LR__4208
293f8     34 24 06 F1 | 	add	local04, #52
293fc     12 13 02 F6 | 	mov	arg01, local04
29400     34 24 86 F1 | 	sub	local04, #52
29404     E4 13 06 F1 | 	add	arg01, #484
29408                 | ' {
29408                 | ' 
29408                 | ' 	return *((DWORD*)ptr);
29408     09 FB 01 FB | 	rdlong	result1, arg01
2940c     B9 A0 30 FF 
29410     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
29414     34 00 90 5D |  if_ne	jmp	#LR__4208
29418     34 24 06 F1 | 	add	local04, #52
2941c     12 13 02 F6 | 	mov	arg01, local04
29420     E8 13 06 F1 | 	add	arg01, #488
29424                 | ' {
29424                 | ' 
29424                 | ' 	return *((DWORD*)ptr);
29424     09 FB 01 FB | 	rdlong	result1, arg01
29428     20 24 86 F1 | 	sub	local04, #32
2942c     12 FB 61 FC | 	wrlong	result1, local04
29430     20 24 06 F1 | 	add	local04, #32
29434     12 13 02 F6 | 	mov	arg01, local04
29438     EC 13 06 F1 | 	add	arg01, #492
2943c                 | ' {
2943c                 | ' 
2943c                 | ' 	return *((DWORD*)ptr);
2943c     09 FB 01 FB | 	rdlong	result1, arg01
29440     24 24 86 F1 | 	sub	local04, #36
29444     12 FB 61 FC | 	wrlong	result1, local04
29448     10 24 86 F1 | 	sub	local04, #16
2944c                 | LR__4208
2944c                 | LR__4209
2944c     12 31 42 FC | 	wrbyte	local10, local04
29450     04 E4 05 F1 | 	add	objptr, #4
29454     F2 26 E2 FA | 	rdword	local05, objptr
29458     01 26 06 F1 | 	add	local05, #1
2945c     F2 26 52 FC | 	wrword	local05, objptr
29460     F2 32 E2 FA | 	rdword	local11, objptr
29464     06 24 06 F1 | 	add	local04, #6
29468     12 33 52 FC | 	wrword	local11, local04
2946c     04 E4 05 F1 | 	add	objptr, #4
29470     06 24 06 F1 | 	add	local04, #6
29474     12 E5 61 FC | 	wrlong	objptr, local04
29478                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
29478                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
29478                 | ' 			{
29478                 | ' 
29478                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
29478                 | ' 
29478                 | ' 
29478                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
29478                 | ' 
29478                 | ' 			}
29478                 | ' 		}
29478                 | ' 
29478                 | ' 
29478                 | ' 	}
29478                 | ' 
29478                 | ' 	fs->fs_type = (BYTE)fmt;
29478                 | ' 	fs->id = ++Fsid;
29478                 | ' 
29478                 | ' 	fs->lfnbuf = LfnBuf;
29478                 | ' #line 3567 "ff.c"
29478                 | ' 	return FR_OK;
29478     00 FA 05 F6 | 	mov	result1, #0
2947c     08 E4 85 F1 | 	sub	objptr, #8
29480                 | LR__4210
29480     A7 F0 03 F6 | 	mov	ptra, fp
29484     B2 00 A0 FD | 	call	#popregs_
29488                 | _fatfs_cc_mount_volume_ret
29488     2D 00 64 FD | 	ret
2948c                 | 
2948c                 | _fatfs_cc_validate
2948c     09 01 0A F6 | 	mov	_var01, arg01 wz
29490     09 02 06 F6 | 	mov	_var02, #9
29494     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
29498     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2949c     50 00 90 AD |  if_e	jmp	#LR__4220
294a0     04 00 06 F1 | 	add	_var01, #4
294a4     00 07 E2 FA | 	rdword	_var04, _var01
294a8     04 00 86 F1 | 	sub	_var01, #4
294ac     00 13 02 FB | 	rdlong	arg01, _var01
294b0     06 12 06 F1 | 	add	arg01, #6
294b4     09 FB E1 FA | 	rdword	result1, arg01
294b8     FD 06 0A F2 | 	cmp	_var04, result1 wz
294bc     30 00 90 5D |  if_ne	jmp	#LR__4220
294c0     00 07 02 FB | 	rdlong	_var04, _var01
294c4     01 06 06 F1 | 	add	_var04, #1
294c8     03 13 CA FA | 	rdbyte	arg01, _var04 wz
294cc     01 FA 05 56 |  if_ne	mov	result1, #1
294d0                 | ' 
294d0                 | ' 	return Stat;
294d0     01 00 00 AF 
294d4     20 E4 05 A1 |  if_e	add	objptr, ##544
294d8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
294dc     01 00 00 AF 
294e0     20 E4 85 A1 |  if_e	sub	objptr, ##544
294e4     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
294e8     01 04 CE F7 | 	test	_var03, #1 wz
294ec     00 02 06 A6 |  if_e	mov	_var02, #0
294f0                 | LR__4220
294f0     00 02 0E F2 | 	cmp	_var02, #0 wz
294f4     00 05 02 AB |  if_e	rdlong	_var03, _var01
294f8     00 04 06 56 |  if_ne	mov	_var03, #0
294fc     0A 05 62 FC | 	wrlong	_var03, arg02
29500                 | ' 			res = FR_OK;
29500                 | ' 		}
29500                 | ' 
29500                 | ' 	}
29500                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
29500                 | ' 	return res;
29500     01 FB 01 F6 | 	mov	result1, _var02
29504                 | _fatfs_cc_validate_ret
29504     2D 00 64 FD | 	ret
29508                 | 
29508                 | _fatfs_cc_f_mount
29508     01 4A 05 F6 | 	mov	COUNT_, #1
2950c     A8 00 A0 FD | 	call	#pushregs_
29510     20 F0 07 F1 | 	add	ptra, #32
29514     04 4E 05 F1 | 	add	fp, #4
29518     A7 12 62 FC | 	wrlong	arg01, fp
2951c     04 4E 05 F1 | 	add	fp, #4
29520     A7 14 62 FC | 	wrlong	arg02, fp
29524     04 4E 05 F1 | 	add	fp, #4
29528     A7 16 42 FC | 	wrbyte	arg03, fp
2952c     04 4E 85 F1 | 	sub	fp, #4
29530     A7 16 02 FB | 	rdlong	arg03, fp
29534     14 4E 05 F1 | 	add	fp, #20
29538     A7 16 62 FC | 	wrlong	arg03, fp
2953c     A7 12 02 F6 | 	mov	arg01, fp
29540     1C 4E 85 F1 | 	sub	fp, #28
29544     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
29548     14 4E 05 F1 | 	add	fp, #20
2954c     A7 FA 61 FC | 	wrlong	result1, fp
29550     14 4E 85 F1 | 	sub	fp, #20
29554     00 FA 55 F2 | 	cmps	result1, #0 wc
29558     0B FA 05 C6 |  if_b	mov	result1, #11
2955c     C0 00 90 CD |  if_b	jmp	#LR__4231
29560     14 4E 05 F1 | 	add	fp, #20
29564     A7 16 02 FB | 	rdlong	arg03, fp
29568     02 16 66 F0 | 	shl	arg03, #2
2956c     F2 16 02 F1 | 	add	arg03, objptr
29570     0B 17 0A FB | 	rdlong	arg03, arg03 wz
29574     04 4E 85 F1 | 	sub	fp, #4
29578     A7 16 62 FC | 	wrlong	arg03, fp
2957c     10 4E 85 F1 | 	sub	fp, #16
29580     28 00 90 AD |  if_e	jmp	#LR__4230
29584     10 4E 05 F1 | 	add	fp, #16
29588     A7 16 02 FB | 	rdlong	arg03, fp
2958c     10 4E 85 F1 | 	sub	fp, #16
29590     01 16 06 F1 | 	add	arg03, #1
29594     0B 13 C2 FA | 	rdbyte	arg01, arg03
29598     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2959c     10 4E 05 F1 | 	add	fp, #16
295a0     A7 16 02 FB | 	rdlong	arg03, fp
295a4     10 4E 85 F1 | 	sub	fp, #16
295a8     0B 01 48 FC | 	wrbyte	#0, arg03
295ac                 | LR__4230
295ac     04 4E 05 F1 | 	add	fp, #4
295b0     A7 1E 0A FB | 	rdlong	local01, fp wz
295b4     04 4E 85 F1 | 	sub	fp, #4
295b8     04 4E 05 51 |  if_ne	add	fp, #4
295bc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
295c0     04 4E 85 51 |  if_ne	sub	fp, #4
295c4     0F 01 48 5C |  if_ne	wrbyte	#0, local01
295c8     14 4E 05 F1 | 	add	fp, #20
295cc     A7 1E 02 FB | 	rdlong	local01, fp
295d0     02 1E 66 F0 | 	shl	local01, #2
295d4     F2 1E 02 F1 | 	add	local01, objptr
295d8     10 4E 85 F1 | 	sub	fp, #16
295dc     A7 16 02 FB | 	rdlong	arg03, fp
295e0     0F 17 62 FC | 	wrlong	arg03, local01
295e4     08 4E 05 F1 | 	add	fp, #8
295e8     A7 1E CA FA | 	rdbyte	local01, fp wz
295ec     0C 4E 85 F1 | 	sub	fp, #12
295f0     00 FA 05 A6 |  if_e	mov	result1, #0
295f4     28 00 90 AD |  if_e	jmp	#LR__4231
295f8     08 4E 05 F1 | 	add	fp, #8
295fc     A7 12 02 F6 | 	mov	arg01, fp
29600     04 4E 85 F1 | 	sub	fp, #4
29604     A7 14 02 F6 | 	mov	arg02, fp
29608     04 4E 85 F1 | 	sub	fp, #4
2960c     00 16 06 F6 | 	mov	arg03, #0
29610     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
29614     18 4E 05 F1 | 	add	fp, #24
29618     A7 FA 61 FC | 	wrlong	result1, fp
2961c                 | ' 
2961c                 | ' 	res = mount_volume(&path, &fs, 0);
2961c                 | ' 	return res ;
2961c     18 4E 85 F1 | 	sub	fp, #24
29620                 | LR__4231
29620     A7 F0 03 F6 | 	mov	ptra, fp
29624     B2 00 A0 FD | 	call	#popregs_
29628                 | _fatfs_cc_f_mount_ret
29628     2D 00 64 FD | 	ret
2962c                 | 
2962c                 | _fatfs_cc_f_open
2962c     02 4A 05 F6 | 	mov	COUNT_, #2
29630     A8 00 A0 FD | 	call	#pushregs_
29634     60 F0 07 F1 | 	add	ptra, #96
29638     04 4E 05 F1 | 	add	fp, #4
2963c     A7 12 62 FC | 	wrlong	arg01, fp
29640     04 4E 05 F1 | 	add	fp, #4
29644     A7 14 62 FC | 	wrlong	arg02, fp
29648     04 4E 05 F1 | 	add	fp, #4
2964c     A7 16 42 FC | 	wrbyte	arg03, fp
29650     08 4E 85 F1 | 	sub	fp, #8
29654     A7 18 0A FB | 	rdlong	arg04, fp wz
29658     04 4E 85 F1 | 	sub	fp, #4
2965c     09 FA 05 A6 |  if_e	mov	result1, #9
29660     98 06 90 AD |  if_e	jmp	#LR__4257
29664     0C 4E 05 F1 | 	add	fp, #12
29668     A7 18 C2 FA | 	rdbyte	arg04, fp
2966c     3F 18 06 F5 | 	and	arg04, #63
29670     A7 18 42 FC | 	wrbyte	arg04, fp
29674     04 4E 85 F1 | 	sub	fp, #4
29678     A7 12 02 F6 | 	mov	arg01, fp
2967c     3C 4E 05 F1 | 	add	fp, #60
29680     A7 14 02 F6 | 	mov	arg02, fp
29684     38 4E 85 F1 | 	sub	fp, #56
29688     A7 16 C2 FA | 	rdbyte	arg03, fp
2968c     0C 4E 85 F1 | 	sub	fp, #12
29690     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
29694     10 4E 05 F1 | 	add	fp, #16
29698     A7 FA 61 FC | 	wrlong	result1, fp
2969c     10 4E 85 F1 | 	sub	fp, #16
296a0     00 FA 0D F2 | 	cmp	result1, #0 wz
296a4     2C 06 90 5D |  if_ne	jmp	#LR__4256
296a8     44 4E 05 F1 | 	add	fp, #68
296ac     A7 18 02 FB | 	rdlong	arg04, fp
296b0     30 4E 85 F1 | 	sub	fp, #48
296b4     A7 18 62 FC | 	wrlong	arg04, fp
296b8     A7 12 02 F6 | 	mov	arg01, fp
296bc     0C 4E 85 F1 | 	sub	fp, #12
296c0     A7 1E 02 FB | 	rdlong	local01, fp
296c4     08 4E 85 F1 | 	sub	fp, #8
296c8     0F 15 02 F6 | 	mov	arg02, local01
296cc     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
296d0     10 4E 05 F1 | 	add	fp, #16
296d4     A7 FA 61 FC | 	wrlong	result1, fp
296d8     10 4E 85 F1 | 	sub	fp, #16
296dc     00 FA 0D F2 | 	cmp	result1, #0 wz
296e0     1C 00 90 5D |  if_ne	jmp	#LR__4240
296e4     3F 4E 05 F1 | 	add	fp, #63
296e8     A7 18 C2 FA | 	rdbyte	arg04, fp
296ec     3F 4E 85 F1 | 	sub	fp, #63
296f0     80 18 CE F7 | 	test	arg04, #128 wz
296f4     10 4E 05 51 |  if_ne	add	fp, #16
296f8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
296fc     10 4E 85 51 |  if_ne	sub	fp, #16
29700                 | LR__4240
29700     0C 4E 05 F1 | 	add	fp, #12
29704     A7 18 C2 FA | 	rdbyte	arg04, fp
29708     0C 4E 85 F1 | 	sub	fp, #12
2970c     1C 18 CE F7 | 	test	arg04, #28 wz
29710     F0 01 90 AD |  if_e	jmp	#LR__4245
29714     10 4E 05 F1 | 	add	fp, #16
29718     A7 1E 0A FB | 	rdlong	local01, fp wz
2971c     10 4E 85 F1 | 	sub	fp, #16
29720     48 00 90 AD |  if_e	jmp	#LR__4242
29724     10 4E 05 F1 | 	add	fp, #16
29728     A7 18 02 FB | 	rdlong	arg04, fp
2972c     10 4E 85 F1 | 	sub	fp, #16
29730     04 18 0E F2 | 	cmp	arg04, #4 wz
29734     1C 00 90 5D |  if_ne	jmp	#LR__4241
29738     14 4E 05 F1 | 	add	fp, #20
2973c     A7 12 02 F6 | 	mov	arg01, fp
29740     14 4E 85 F1 | 	sub	fp, #20
29744     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
29748     10 4E 05 F1 | 	add	fp, #16
2974c     A7 FA 61 FC | 	wrlong	result1, fp
29750     10 4E 85 F1 | 	sub	fp, #16
29754                 | LR__4241
29754     0C 4E 05 F1 | 	add	fp, #12
29758     A7 1E C2 FA | 	rdbyte	local01, fp
2975c     08 1E 46 F5 | 	or	local01, #8
29760     A7 1E 42 FC | 	wrbyte	local01, fp
29764     0C 4E 85 F1 | 	sub	fp, #12
29768     3C 00 90 FD | 	jmp	#LR__4244
2976c                 | LR__4242
2976c     1A 4E 05 F1 | 	add	fp, #26
29770     A7 1E C2 FA | 	rdbyte	local01, fp
29774     1A 4E 85 F1 | 	sub	fp, #26
29778     11 1E CE F7 | 	test	local01, #17 wz
2977c     10 4E 05 51 |  if_ne	add	fp, #16
29780     A7 0E 68 5C |  if_ne	wrlong	#7, fp
29784     10 4E 85 51 |  if_ne	sub	fp, #16
29788     1C 00 90 5D |  if_ne	jmp	#LR__4243
2978c     0C 4E 05 F1 | 	add	fp, #12
29790     A7 1E C2 FA | 	rdbyte	local01, fp
29794     0C 4E 85 F1 | 	sub	fp, #12
29798     04 1E CE F7 | 	test	local01, #4 wz
2979c     10 4E 05 51 |  if_ne	add	fp, #16
297a0     A7 10 68 5C |  if_ne	wrlong	#8, fp
297a4     10 4E 85 51 |  if_ne	sub	fp, #16
297a8                 | LR__4243
297a8                 | LR__4244
297a8     10 4E 05 F1 | 	add	fp, #16
297ac     A7 1E 0A FB | 	rdlong	local01, fp wz
297b0     10 4E 85 F1 | 	sub	fp, #16
297b4     A8 01 90 5D |  if_ne	jmp	#LR__4248
297b8     0C 4E 05 F1 | 	add	fp, #12
297bc     A7 1E C2 FA | 	rdbyte	local01, fp
297c0     0C 4E 85 F1 | 	sub	fp, #12
297c4     08 1E CE F7 | 	test	local01, #8 wz
297c8     94 01 90 AD |  if_e	jmp	#LR__4248
297cc     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
297d0     54 4E 05 F1 | 	add	fp, #84
297d4     A7 FA 61 FC | 	wrlong	result1, fp
297d8     24 4E 85 F1 | 	sub	fp, #36
297dc     A7 12 02 FB | 	rdlong	arg01, fp
297e0     0E 12 06 F1 | 	add	arg01, #14
297e4     09 FB 61 FC | 	wrlong	result1, arg01
297e8     A7 12 02 FB | 	rdlong	arg01, fp
297ec     16 12 06 F1 | 	add	arg01, #22
297f0     24 4E 05 F1 | 	add	fp, #36
297f4     A7 14 02 FB | 	rdlong	arg02, fp
297f8     09 15 62 FC | 	wrlong	arg02, arg01
297fc     10 4E 85 F1 | 	sub	fp, #16
29800     A7 12 02 FB | 	rdlong	arg01, fp
29804     14 4E 85 F1 | 	sub	fp, #20
29808     A7 14 02 FB | 	rdlong	arg02, fp
2980c     30 4E 85 F1 | 	sub	fp, #48
29810     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
29814     48 4E 05 F1 | 	add	fp, #72
29818     A7 FA 61 FC | 	wrlong	result1, fp
2981c     18 4E 85 F1 | 	sub	fp, #24
29820     A7 1E 02 FB | 	rdlong	local01, fp
29824     0B 1E 06 F1 | 	add	local01, #11
29828     0F 41 48 FC | 	wrbyte	#32, local01
2982c     14 4E 05 F1 | 	add	fp, #20
29830     A7 12 02 FB | 	rdlong	arg01, fp
29834     14 4E 85 F1 | 	sub	fp, #20
29838     A7 14 02 FB | 	rdlong	arg02, fp
2983c     30 4E 85 F1 | 	sub	fp, #48
29840     00 16 06 F6 | 	mov	arg03, #0
29844     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
29848     30 4E 05 F1 | 	add	fp, #48
2984c     A7 12 02 FB | 	rdlong	arg01, fp
29850     1C 12 06 F1 | 	add	arg01, #28
29854     09 01 68 FC | 	wrlong	#0, arg01
29858     14 4E 05 F1 | 	add	fp, #20
2985c     A7 1E 02 FB | 	rdlong	local01, fp
29860     03 1E 06 F1 | 	add	local01, #3
29864     0F 03 48 FC | 	wrbyte	#1, local01
29868     04 4E 05 F1 | 	add	fp, #4
2986c     A7 1E 0A FB | 	rdlong	local01, fp wz
29870     48 4E 85 F1 | 	sub	fp, #72
29874     E8 00 90 AD |  if_e	jmp	#LR__4248
29878     44 4E 05 F1 | 	add	fp, #68
2987c     A7 1E 02 FB | 	rdlong	local01, fp
29880     30 1E 06 F1 | 	add	local01, #48
29884     0F 1F 02 FB | 	rdlong	local01, local01
29888     14 4E 05 F1 | 	add	fp, #20
2988c     A7 1E 62 FC | 	wrlong	local01, fp
29890     44 4E 85 F1 | 	sub	fp, #68
29894     A7 12 02 F6 | 	mov	arg01, fp
29898     34 4E 05 F1 | 	add	fp, #52
2989c     A7 14 02 FB | 	rdlong	arg02, fp
298a0     48 4E 85 F1 | 	sub	fp, #72
298a4     00 16 06 F6 | 	mov	arg03, #0
298a8     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
298ac     10 4E 05 F1 | 	add	fp, #16
298b0     A7 FA 61 FC | 	wrlong	result1, fp
298b4     10 4E 85 F1 | 	sub	fp, #16
298b8     00 FA 0D F2 | 	cmp	result1, #0 wz
298bc     A0 00 90 5D |  if_ne	jmp	#LR__4248
298c0     44 4E 05 F1 | 	add	fp, #68
298c4     A7 12 02 FB | 	rdlong	arg01, fp
298c8     14 4E 05 F1 | 	add	fp, #20
298cc     A7 14 02 FB | 	rdlong	arg02, fp
298d0     58 4E 85 F1 | 	sub	fp, #88
298d4     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
298d8     10 4E 05 F1 | 	add	fp, #16
298dc     A7 FA 61 FC | 	wrlong	result1, fp
298e0     34 4E 05 F1 | 	add	fp, #52
298e4     A7 18 02 FB | 	rdlong	arg04, fp
298e8     04 4E 05 F1 | 	add	fp, #4
298ec     A7 1E 02 FB | 	rdlong	local01, fp
298f0     48 4E 85 F1 | 	sub	fp, #72
298f4     01 1E 86 F1 | 	sub	local01, #1
298f8     10 18 06 F1 | 	add	arg04, #16
298fc     0C 1F 62 FC | 	wrlong	local01, arg04
29900     5C 00 90 FD | 	jmp	#LR__4248
29904                 | LR__4245
29904     10 4E 05 F1 | 	add	fp, #16
29908     A7 18 0A FB | 	rdlong	arg04, fp wz
2990c     10 4E 85 F1 | 	sub	fp, #16
29910     4C 00 90 5D |  if_ne	jmp	#LR__4247
29914     1A 4E 05 F1 | 	add	fp, #26
29918     A7 18 C2 FA | 	rdbyte	arg04, fp
2991c     1A 4E 85 F1 | 	sub	fp, #26
29920     10 18 CE F7 | 	test	arg04, #16 wz
29924     10 4E 05 51 |  if_ne	add	fp, #16
29928     A7 08 68 5C |  if_ne	wrlong	#4, fp
2992c     10 4E 85 51 |  if_ne	sub	fp, #16
29930     2C 00 90 5D |  if_ne	jmp	#LR__4246
29934     0C 4E 05 F1 | 	add	fp, #12
29938     A7 18 C2 FA | 	rdbyte	arg04, fp
2993c     0C 4E 85 F1 | 	sub	fp, #12
29940     02 18 CE F7 | 	test	arg04, #2 wz
29944     1A 4E 05 51 |  if_ne	add	fp, #26
29948     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
2994c     1A 4E 85 51 |  if_ne	sub	fp, #26
29950     01 1E CE 57 |  if_ne	test	local01, #1 wz
29954     10 4E 05 51 |  if_ne	add	fp, #16
29958     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2995c     10 4E 85 51 |  if_ne	sub	fp, #16
29960                 | LR__4246
29960                 | LR__4247
29960                 | LR__4248
29960     10 4E 05 F1 | 	add	fp, #16
29964     A7 1E 0A FB | 	rdlong	local01, fp wz
29968     10 4E 85 F1 | 	sub	fp, #16
2996c     60 00 90 5D |  if_ne	jmp	#LR__4249
29970     0C 4E 05 F1 | 	add	fp, #12
29974     A7 20 C2 FA | 	rdbyte	local02, fp
29978     0C 4E 85 F1 | 	sub	fp, #12
2997c     08 20 CE F7 | 	test	local02, #8 wz
29980     0C 4E 05 51 |  if_ne	add	fp, #12
29984     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
29988     40 20 46 55 |  if_ne	or	local02, #64
2998c     A7 20 42 5C |  if_ne	wrbyte	local02, fp
29990     0C 4E 85 51 |  if_ne	sub	fp, #12
29994     04 4E 05 F1 | 	add	fp, #4
29998     A7 20 02 FB | 	rdlong	local02, fp
2999c     40 4E 05 F1 | 	add	fp, #64
299a0     A7 1E 02 FB | 	rdlong	local01, fp
299a4     30 1E 06 F1 | 	add	local01, #48
299a8     0F 1F 02 FB | 	rdlong	local01, local01
299ac     20 20 06 F1 | 	add	local02, #32
299b0     10 1F 62 FC | 	wrlong	local01, local02
299b4     40 4E 85 F1 | 	sub	fp, #64
299b8     A7 20 02 FB | 	rdlong	local02, fp
299bc     2C 4E 05 F1 | 	add	fp, #44
299c0     A7 1E 02 FB | 	rdlong	local01, fp
299c4     30 4E 85 F1 | 	sub	fp, #48
299c8     24 20 06 F1 | 	add	local02, #36
299cc     10 1F 62 FC | 	wrlong	local01, local02
299d0                 | LR__4249
299d0     10 4E 05 F1 | 	add	fp, #16
299d4     A7 20 0A FB | 	rdlong	local02, fp wz
299d8     10 4E 85 F1 | 	sub	fp, #16
299dc     F4 02 90 5D |  if_ne	jmp	#LR__4255
299e0     04 4E 05 F1 | 	add	fp, #4
299e4     A7 20 02 FB | 	rdlong	local02, fp
299e8     40 4E 05 F1 | 	add	fp, #64
299ec     A7 12 02 FB | 	rdlong	arg01, fp
299f0     14 4E 85 F1 | 	sub	fp, #20
299f4     A7 14 02 FB | 	rdlong	arg02, fp
299f8     30 4E 85 F1 | 	sub	fp, #48
299fc     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
29a00     08 20 06 F1 | 	add	local02, #8
29a04     10 FB 61 FC | 	wrlong	result1, local02
29a08     04 4E 05 F1 | 	add	fp, #4
29a0c     A7 20 02 FB | 	rdlong	local02, fp
29a10     2C 4E 05 F1 | 	add	fp, #44
29a14     A7 12 02 FB | 	rdlong	arg01, fp
29a18     1C 12 06 F1 | 	add	arg01, #28
29a1c                 | ' {
29a1c                 | ' 
29a1c                 | ' 	return *((DWORD*)ptr);
29a1c     09 FB 01 FB | 	rdlong	result1, arg01
29a20     0C 20 06 F1 | 	add	local02, #12
29a24     10 FB 61 FC | 	wrlong	result1, local02
29a28     2C 4E 85 F1 | 	sub	fp, #44
29a2c     A7 20 02 FB | 	rdlong	local02, fp
29a30     40 4E 05 F1 | 	add	fp, #64
29a34     A7 1E 02 FB | 	rdlong	local01, fp
29a38     10 1F 62 FC | 	wrlong	local01, local02
29a3c     40 4E 85 F1 | 	sub	fp, #64
29a40     A7 20 02 FB | 	rdlong	local02, fp
29a44     40 4E 05 F1 | 	add	fp, #64
29a48     A7 1E 02 FB | 	rdlong	local01, fp
29a4c     06 1E 06 F1 | 	add	local01, #6
29a50     0F 1F E2 FA | 	rdword	local01, local01
29a54     04 20 06 F1 | 	add	local02, #4
29a58     10 1F 52 FC | 	wrword	local01, local02
29a5c     40 4E 85 F1 | 	sub	fp, #64
29a60     A7 20 02 FB | 	rdlong	local02, fp
29a64     08 4E 05 F1 | 	add	fp, #8
29a68     A7 1E C2 FA | 	rdbyte	local01, fp
29a6c     10 20 06 F1 | 	add	local02, #16
29a70     10 1F 42 FC | 	wrbyte	local01, local02
29a74     08 4E 85 F1 | 	sub	fp, #8
29a78     A7 20 02 FB | 	rdlong	local02, fp
29a7c     11 20 06 F1 | 	add	local02, #17
29a80     10 01 48 FC | 	wrbyte	#0, local02
29a84     A7 20 02 FB | 	rdlong	local02, fp
29a88     1C 20 06 F1 | 	add	local02, #28
29a8c     10 01 68 FC | 	wrlong	#0, local02
29a90     A7 20 02 FB | 	rdlong	local02, fp
29a94     14 20 06 F1 | 	add	local02, #20
29a98     10 01 68 FC | 	wrlong	#0, local02
29a9c     A7 12 02 FB | 	rdlong	arg01, fp
29aa0     04 4E 85 F1 | 	sub	fp, #4
29aa4     28 12 06 F1 | 	add	arg01, #40
29aa8     00 14 06 F6 | 	mov	arg02, #0
29aac     09 16 C6 F9 | 	decod	arg03, #9
29ab0     98 00 A0 FD | 	call	#\builtin_bytefill_
29ab4     0C 4E 05 F1 | 	add	fp, #12
29ab8     A7 20 C2 FA | 	rdbyte	local02, fp
29abc     0C 4E 85 F1 | 	sub	fp, #12
29ac0     20 20 CE F7 | 	test	local02, #32 wz
29ac4     0C 02 90 AD |  if_e	jmp	#LR__4254
29ac8     04 4E 05 F1 | 	add	fp, #4
29acc     A7 1E 02 FB | 	rdlong	local01, fp
29ad0     04 4E 85 F1 | 	sub	fp, #4
29ad4     0C 1E 06 F1 | 	add	local01, #12
29ad8     0F 21 02 FB | 	rdlong	local02, local01
29adc     01 20 16 F2 | 	cmp	local02, #1 wc
29ae0     F0 01 90 CD |  if_b	jmp	#LR__4254
29ae4     04 4E 05 F1 | 	add	fp, #4
29ae8     A7 1E 02 FB | 	rdlong	local01, fp
29aec     0F 21 02 F6 | 	mov	local02, local01
29af0     0C 1E 06 F1 | 	add	local01, #12
29af4     0F 1F 02 FB | 	rdlong	local01, local01
29af8     14 20 06 F1 | 	add	local02, #20
29afc     10 1F 62 FC | 	wrlong	local01, local02
29b00     40 4E 05 F1 | 	add	fp, #64
29b04     A7 20 02 FB | 	rdlong	local02, fp
29b08     0A 20 06 F1 | 	add	local02, #10
29b0c     10 21 E2 FA | 	rdword	local02, local02
29b10     09 20 66 F0 | 	shl	local02, #9
29b14     08 4E 05 F1 | 	add	fp, #8
29b18     A7 20 62 FC | 	wrlong	local02, fp
29b1c     48 4E 85 F1 | 	sub	fp, #72
29b20     A7 20 02 FB | 	rdlong	local02, fp
29b24     08 20 06 F1 | 	add	local02, #8
29b28     10 1F 02 FB | 	rdlong	local01, local02
29b2c     4C 4E 05 F1 | 	add	fp, #76
29b30     A7 1E 62 FC | 	wrlong	local01, fp
29b34                 | ' 				fp->fptr = fp->obj.objsize;
29b34                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
29b34                 | ' 				clst = fp->obj.sclust;
29b34                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
29b34     4C 4E 85 F1 | 	sub	fp, #76
29b38     A7 20 02 FB | 	rdlong	local02, fp
29b3c     0C 20 06 F1 | 	add	local02, #12
29b40     10 1F 02 FB | 	rdlong	local01, local02
29b44     58 4E 05 F1 | 	add	fp, #88
29b48     A7 1E 62 FC | 	wrlong	local01, fp
29b4c     5C 4E 85 F1 | 	sub	fp, #92
29b50                 | LR__4250
29b50     10 4E 05 F1 | 	add	fp, #16
29b54     A7 20 0A FB | 	rdlong	local02, fp wz
29b58     10 4E 85 F1 | 	sub	fp, #16
29b5c     94 00 90 5D |  if_ne	jmp	#LR__4251
29b60     5C 4E 05 F1 | 	add	fp, #92
29b64     A7 20 02 FB | 	rdlong	local02, fp
29b68     10 4E 85 F1 | 	sub	fp, #16
29b6c     A7 1E 02 FB | 	rdlong	local01, fp
29b70     4C 4E 85 F1 | 	sub	fp, #76
29b74     0F 21 1A F2 | 	cmp	local02, local01 wcz
29b78     78 00 90 ED |  if_be	jmp	#LR__4251
29b7c     04 4E 05 F1 | 	add	fp, #4
29b80     A7 12 02 FB | 	rdlong	arg01, fp
29b84     4C 4E 05 F1 | 	add	fp, #76
29b88     A7 14 02 FB | 	rdlong	arg02, fp
29b8c     50 4E 85 F1 | 	sub	fp, #80
29b90     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
29b94     50 4E 05 F1 | 	add	fp, #80
29b98     A7 FA 61 FC | 	wrlong	result1, fp
29b9c     50 4E 85 F1 | 	sub	fp, #80
29ba0     02 FA 15 F2 | 	cmp	result1, #2 wc
29ba4     10 4E 05 C1 |  if_b	add	fp, #16
29ba8     A7 04 68 CC |  if_b	wrlong	#2, fp
29bac     10 4E 85 C1 |  if_b	sub	fp, #16
29bb0     50 4E 05 F1 | 	add	fp, #80
29bb4     A7 20 02 FB | 	rdlong	local02, fp
29bb8     50 4E 85 F1 | 	sub	fp, #80
29bbc     FF FF 7F FF 
29bc0     FF 21 0E F2 | 	cmp	local02, ##-1 wz
29bc4     10 4E 05 A1 |  if_e	add	fp, #16
29bc8     A7 02 68 AC |  if_e	wrlong	#1, fp
29bcc     10 4E 85 A1 |  if_e	sub	fp, #16
29bd0     5C 4E 05 F1 | 	add	fp, #92
29bd4     A7 20 02 FB | 	rdlong	local02, fp
29bd8     10 4E 85 F1 | 	sub	fp, #16
29bdc     A7 1E 02 FB | 	rdlong	local01, fp
29be0     0F 21 82 F1 | 	sub	local02, local01
29be4     10 4E 05 F1 | 	add	fp, #16
29be8     A7 20 62 FC | 	wrlong	local02, fp
29bec     5C 4E 85 F1 | 	sub	fp, #92
29bf0     5C FF 9F FD | 	jmp	#LR__4250
29bf4                 | LR__4251
29bf4     04 4E 05 F1 | 	add	fp, #4
29bf8     A7 20 02 FB | 	rdlong	local02, fp
29bfc     4C 4E 05 F1 | 	add	fp, #76
29c00     A7 1E 02 FB | 	rdlong	local01, fp
29c04     18 20 06 F1 | 	add	local02, #24
29c08     10 1F 62 FC | 	wrlong	local01, local02
29c0c     40 4E 85 F1 | 	sub	fp, #64
29c10     A7 20 0A FB | 	rdlong	local02, fp wz
29c14     10 4E 85 F1 | 	sub	fp, #16
29c18     B8 00 90 5D |  if_ne	jmp	#LR__4253
29c1c     5C 4E 05 F1 | 	add	fp, #92
29c20     A7 1E 02 FB | 	rdlong	local01, fp
29c24     5C 4E 85 F1 | 	sub	fp, #92
29c28     FF 1F CE F7 | 	test	local01, #511 wz
29c2c     A4 00 90 AD |  if_e	jmp	#LR__4253
29c30     44 4E 05 F1 | 	add	fp, #68
29c34     A7 12 02 FB | 	rdlong	arg01, fp
29c38     0C 4E 05 F1 | 	add	fp, #12
29c3c     A7 14 02 FB | 	rdlong	arg02, fp
29c40     50 4E 85 F1 | 	sub	fp, #80
29c44     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
29c48     58 4E 05 F1 | 	add	fp, #88
29c4c     A7 FA 61 FC | 	wrlong	result1, fp
29c50     00 FA 4D F2 | 	cmps	result1, #0 wz
29c54     58 4E 85 F1 | 	sub	fp, #88
29c58     10 4E 05 A1 |  if_e	add	fp, #16
29c5c     A7 04 68 AC |  if_e	wrlong	#2, fp
29c60     10 4E 85 A1 |  if_e	sub	fp, #16
29c64     6C 00 90 AD |  if_e	jmp	#LR__4252
29c68     04 4E 05 F1 | 	add	fp, #4
29c6c     A7 20 02 FB | 	rdlong	local02, fp
29c70     54 4E 05 F1 | 	add	fp, #84
29c74     A7 1E 02 FB | 	rdlong	local01, fp
29c78     04 4E 05 F1 | 	add	fp, #4
29c7c     A7 18 02 FB | 	rdlong	arg04, fp
29c80     09 18 46 F0 | 	shr	arg04, #9
29c84     0C 1F 02 F1 | 	add	local01, arg04
29c88     1C 20 06 F1 | 	add	local02, #28
29c8c     10 1F 62 FC | 	wrlong	local01, local02
29c90     18 4E 85 F1 | 	sub	fp, #24
29c94     A7 20 02 FB | 	rdlong	local02, fp
29c98     01 20 06 F1 | 	add	local02, #1
29c9c     10 13 C2 FA | 	rdbyte	arg01, local02
29ca0     40 4E 85 F1 | 	sub	fp, #64
29ca4     A7 20 02 FB | 	rdlong	local02, fp
29ca8     10 15 02 F6 | 	mov	arg02, local02
29cac     28 14 06 F1 | 	add	arg02, #40
29cb0     04 4E 85 F1 | 	sub	fp, #4
29cb4     1C 20 06 F1 | 	add	local02, #28
29cb8     10 17 02 FB | 	rdlong	arg03, local02
29cbc     01 18 06 F6 | 	mov	arg04, #1
29cc0     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
29cc4     00 FA 0D F2 | 	cmp	result1, #0 wz
29cc8     10 4E 05 51 |  if_ne	add	fp, #16
29ccc     A7 02 68 5C |  if_ne	wrlong	#1, fp
29cd0     10 4E 85 51 |  if_ne	sub	fp, #16
29cd4                 | LR__4252
29cd4                 | LR__4253
29cd4                 | LR__4254
29cd4                 | LR__4255
29cd4                 | LR__4256
29cd4     10 4E 05 F1 | 	add	fp, #16
29cd8     A7 20 0A FB | 	rdlong	local02, fp wz
29cdc     10 4E 85 F1 | 	sub	fp, #16
29ce0     04 4E 05 51 |  if_ne	add	fp, #4
29ce4     A7 20 02 5B |  if_ne	rdlong	local02, fp
29ce8     04 4E 85 51 |  if_ne	sub	fp, #4
29cec     10 01 68 5C |  if_ne	wrlong	#0, local02
29cf0                 | ' 
29cf0                 | ' 	return res ;
29cf0     10 4E 05 F1 | 	add	fp, #16
29cf4     A7 FA 01 FB | 	rdlong	result1, fp
29cf8     10 4E 85 F1 | 	sub	fp, #16
29cfc                 | LR__4257
29cfc     A7 F0 03 F6 | 	mov	ptra, fp
29d00     B2 00 A0 FD | 	call	#popregs_
29d04                 | _fatfs_cc_f_open_ret
29d04     2D 00 64 FD | 	ret
29d08                 | 
29d08                 | _fatfs_cc_f_read
29d08     0E 4A 05 F6 | 	mov	COUNT_, #14
29d0c     A8 00 A0 FD | 	call	#pushregs_
29d10     38 F0 07 F1 | 	add	ptra, #56
29d14     04 4E 05 F1 | 	add	fp, #4
29d18     A7 12 62 FC | 	wrlong	arg01, fp
29d1c     04 4E 05 F1 | 	add	fp, #4
29d20     A7 14 62 FC | 	wrlong	arg02, fp
29d24     04 4E 05 F1 | 	add	fp, #4
29d28     A7 16 62 FC | 	wrlong	arg03, fp
29d2c     04 4E 05 F1 | 	add	fp, #4
29d30     A7 18 62 FC | 	wrlong	arg04, fp
29d34     08 4E 85 F1 | 	sub	fp, #8
29d38     A7 FA 01 FB | 	rdlong	result1, fp
29d3c     2C 4E 05 F1 | 	add	fp, #44
29d40     A7 FA 61 FC | 	wrlong	result1, fp
29d44     24 4E 85 F1 | 	sub	fp, #36
29d48     A7 FA 01 FB | 	rdlong	result1, fp
29d4c     FD 00 68 FC | 	wrlong	#0, result1
29d50     0C 4E 85 F1 | 	sub	fp, #12
29d54     A7 12 02 FB | 	rdlong	arg01, fp
29d58     14 4E 05 F1 | 	add	fp, #20
29d5c     A7 14 02 F6 | 	mov	arg02, fp
29d60     18 4E 85 F1 | 	sub	fp, #24
29d64     24 F7 BF FD | 	call	#_fatfs_cc_validate
29d68     14 4E 05 F1 | 	add	fp, #20
29d6c     A7 FA 61 FC | 	wrlong	result1, fp
29d70     00 FA 4D F2 | 	cmps	result1, #0 wz
29d74     14 4E 85 F1 | 	sub	fp, #20
29d78     20 00 90 5D |  if_ne	jmp	#LR__4260
29d7c     04 4E 05 F1 | 	add	fp, #4
29d80     A7 14 02 FB | 	rdlong	arg02, fp
29d84     11 14 06 F1 | 	add	arg02, #17
29d88     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
29d8c     10 4E 05 F1 | 	add	fp, #16
29d90     A7 14 62 FC | 	wrlong	arg02, fp
29d94     14 4E 85 F1 | 	sub	fp, #20
29d98     10 00 90 AD |  if_e	jmp	#LR__4261
29d9c                 | LR__4260
29d9c     14 4E 05 F1 | 	add	fp, #20
29da0     A7 FA 01 FB | 	rdlong	result1, fp
29da4     14 4E 85 F1 | 	sub	fp, #20
29da8     EC 05 90 FD | 	jmp	#LR__4280
29dac                 | LR__4261
29dac     04 4E 05 F1 | 	add	fp, #4
29db0     A7 18 02 FB | 	rdlong	arg04, fp
29db4     04 4E 85 F1 | 	sub	fp, #4
29db8     10 18 06 F1 | 	add	arg04, #16
29dbc     0C 19 C2 FA | 	rdbyte	arg04, arg04
29dc0     01 18 CE F7 | 	test	arg04, #1 wz
29dc4     07 FA 05 A6 |  if_e	mov	result1, #7
29dc8     CC 05 90 AD |  if_e	jmp	#LR__4280
29dcc     04 4E 05 F1 | 	add	fp, #4
29dd0     A7 1E 02 FB | 	rdlong	local01, fp
29dd4     0F 21 02 F6 | 	mov	local02, local01
29dd8     0C 20 06 F1 | 	add	local02, #12
29ddc     10 23 02 FB | 	rdlong	local03, local02
29de0     14 1E 06 F1 | 	add	local01, #20
29de4     0F 1F 02 FB | 	rdlong	local01, local01
29de8     0F 23 82 F1 | 	sub	local03, local01
29dec     20 4E 05 F1 | 	add	fp, #32
29df0     A7 22 62 FC | 	wrlong	local03, fp
29df4     18 4E 85 F1 | 	sub	fp, #24
29df8     A7 24 02 FB | 	rdlong	local04, fp
29dfc     0C 4E 85 F1 | 	sub	fp, #12
29e00     11 25 1A F2 | 	cmp	local04, local03 wcz
29e04     24 4E 05 11 |  if_a	add	fp, #36
29e08     A7 24 02 1B |  if_a	rdlong	local04, fp
29e0c     18 4E 85 11 |  if_a	sub	fp, #24
29e10     A7 24 62 1C |  if_a	wrlong	local04, fp
29e14     0C 4E 85 11 |  if_a	sub	fp, #12
29e18                 | ' 
29e18                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
29e18                 | LR__4262
29e18     0C 4E 05 F1 | 	add	fp, #12
29e1c     A7 20 02 FB | 	rdlong	local02, fp
29e20     0C 4E 85 F1 | 	sub	fp, #12
29e24     10 25 02 F6 | 	mov	local04, local02
29e28     01 24 16 F2 | 	cmp	local04, #1 wc
29e2c     64 05 90 CD |  if_b	jmp	#LR__4279
29e30     04 4E 05 F1 | 	add	fp, #4
29e34     A7 22 02 FB | 	rdlong	local03, fp
29e38     04 4E 85 F1 | 	sub	fp, #4
29e3c     14 22 06 F1 | 	add	local03, #20
29e40     11 23 02 FB | 	rdlong	local03, local03
29e44     FF 23 CE F7 | 	test	local03, #511 wz
29e48     3C 04 90 5D |  if_ne	jmp	#LR__4277
29e4c     04 4E 05 F1 | 	add	fp, #4
29e50     A7 1E 02 FB | 	rdlong	local01, fp
29e54     14 1E 06 F1 | 	add	local01, #20
29e58     0F 23 02 FB | 	rdlong	local03, local01
29e5c     09 22 46 F0 | 	shr	local03, #9
29e60     14 4E 05 F1 | 	add	fp, #20
29e64     A7 26 02 FB | 	rdlong	local05, fp
29e68     13 29 02 F6 | 	mov	local06, local05
29e6c     0A 28 06 F1 | 	add	local06, #10
29e70     14 2B E2 FA | 	rdword	local07, local06
29e74     0A 28 86 F1 | 	sub	local06, #10
29e78     15 2D 32 F9 | 	getword	local08, local07, #0
29e7c     01 2C 86 F1 | 	sub	local08, #1
29e80     16 23 0A F5 | 	and	local03, local08 wz
29e84     18 4E 05 F1 | 	add	fp, #24
29e88     A7 22 62 FC | 	wrlong	local03, fp
29e8c     30 4E 85 F1 | 	sub	fp, #48
29e90     E0 00 90 5D |  if_ne	jmp	#LR__4267
29e94     04 4E 05 F1 | 	add	fp, #4
29e98     A7 22 02 FB | 	rdlong	local03, fp
29e9c     04 4E 85 F1 | 	sub	fp, #4
29ea0     14 22 06 F1 | 	add	local03, #20
29ea4     11 23 0A FB | 	rdlong	local03, local03 wz
29ea8     20 00 90 5D |  if_ne	jmp	#LR__4263
29eac     04 4E 05 F1 | 	add	fp, #4
29eb0     A7 22 02 FB | 	rdlong	local03, fp
29eb4     08 22 06 F1 | 	add	local03, #8
29eb8     11 23 02 FB | 	rdlong	local03, local03
29ebc     18 4E 05 F1 | 	add	fp, #24
29ec0     A7 22 62 FC | 	wrlong	local03, fp
29ec4     1C 4E 85 F1 | 	sub	fp, #28
29ec8     28 00 90 FD | 	jmp	#LR__4264
29ecc                 | LR__4263
29ecc     04 4E 05 F1 | 	add	fp, #4
29ed0     A7 2C 02 FB | 	rdlong	local08, fp
29ed4     16 13 02 F6 | 	mov	arg01, local08
29ed8     04 4E 85 F1 | 	sub	fp, #4
29edc     18 2C 06 F1 | 	add	local08, #24
29ee0     16 15 02 FB | 	rdlong	arg02, local08
29ee4     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
29ee8     1C 4E 05 F1 | 	add	fp, #28
29eec     A7 FA 61 FC | 	wrlong	result1, fp
29ef0     1C 4E 85 F1 | 	sub	fp, #28
29ef4                 | LR__4264
29ef4     1C 4E 05 F1 | 	add	fp, #28
29ef8     A7 22 02 FB | 	rdlong	local03, fp
29efc     1C 4E 85 F1 | 	sub	fp, #28
29f00     02 22 16 F2 | 	cmp	local03, #2 wc
29f04     1C 00 90 3D |  if_ae	jmp	#LR__4265
29f08     04 4E 05 F1 | 	add	fp, #4
29f0c     A7 22 02 FB | 	rdlong	local03, fp
29f10     04 4E 85 F1 | 	sub	fp, #4
29f14     11 22 06 F1 | 	add	local03, #17
29f18     11 05 48 FC | 	wrbyte	#2, local03
29f1c     02 FA 05 F6 | 	mov	result1, #2
29f20     74 04 90 FD | 	jmp	#LR__4280
29f24                 | LR__4265
29f24     1C 4E 05 F1 | 	add	fp, #28
29f28     A7 22 02 FB | 	rdlong	local03, fp
29f2c     1C 4E 85 F1 | 	sub	fp, #28
29f30     FF FF 7F FF 
29f34     FF 23 0E F2 | 	cmp	local03, ##-1 wz
29f38     1C 00 90 5D |  if_ne	jmp	#LR__4266
29f3c     04 4E 05 F1 | 	add	fp, #4
29f40     A7 22 02 FB | 	rdlong	local03, fp
29f44     04 4E 85 F1 | 	sub	fp, #4
29f48     11 22 06 F1 | 	add	local03, #17
29f4c     11 03 48 FC | 	wrbyte	#1, local03
29f50     01 FA 05 F6 | 	mov	result1, #1
29f54     40 04 90 FD | 	jmp	#LR__4280
29f58                 | LR__4266
29f58     04 4E 05 F1 | 	add	fp, #4
29f5c     A7 22 02 FB | 	rdlong	local03, fp
29f60     18 4E 05 F1 | 	add	fp, #24
29f64     A7 2C 02 FB | 	rdlong	local08, fp
29f68     1C 4E 85 F1 | 	sub	fp, #28
29f6c     18 22 06 F1 | 	add	local03, #24
29f70     11 2D 62 FC | 	wrlong	local08, local03
29f74                 | LR__4267
29f74     18 4E 05 F1 | 	add	fp, #24
29f78     A7 12 02 FB | 	rdlong	arg01, fp
29f7c     14 4E 85 F1 | 	sub	fp, #20
29f80     A7 22 02 FB | 	rdlong	local03, fp
29f84     04 4E 85 F1 | 	sub	fp, #4
29f88     18 22 06 F1 | 	add	local03, #24
29f8c     11 15 02 FB | 	rdlong	arg02, local03
29f90     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
29f94     20 4E 05 F1 | 	add	fp, #32
29f98     A7 FA 61 FC | 	wrlong	result1, fp
29f9c     20 4E 85 F1 | 	sub	fp, #32
29fa0     00 FA 0D F2 | 	cmp	result1, #0 wz
29fa4     1C 00 90 5D |  if_ne	jmp	#LR__4268
29fa8     04 4E 05 F1 | 	add	fp, #4
29fac     A7 22 02 FB | 	rdlong	local03, fp
29fb0     04 4E 85 F1 | 	sub	fp, #4
29fb4     11 22 06 F1 | 	add	local03, #17
29fb8     11 05 48 FC | 	wrbyte	#2, local03
29fbc     02 FA 05 F6 | 	mov	result1, #2
29fc0     D4 03 90 FD | 	jmp	#LR__4280
29fc4                 | LR__4268
29fc4     20 4E 05 F1 | 	add	fp, #32
29fc8     A7 22 02 FB | 	rdlong	local03, fp
29fcc     10 4E 05 F1 | 	add	fp, #16
29fd0     A7 2C 02 FB | 	rdlong	local08, fp
29fd4     16 23 02 F1 | 	add	local03, local08
29fd8     10 4E 85 F1 | 	sub	fp, #16
29fdc     A7 22 62 FC | 	wrlong	local03, fp
29fe0     14 4E 85 F1 | 	sub	fp, #20
29fe4     A7 22 02 FB | 	rdlong	local03, fp
29fe8     09 22 46 F0 | 	shr	local03, #9
29fec     20 4E 05 F1 | 	add	fp, #32
29ff0     A7 22 62 FC | 	wrlong	local03, fp
29ff4     2C 4E 85 F1 | 	sub	fp, #44
29ff8     01 22 16 F2 | 	cmp	local03, #1 wc
29ffc     5C 01 90 CD |  if_b	jmp	#LR__4272
2a000     30 4E 05 F1 | 	add	fp, #48
2a004     A7 22 02 FB | 	rdlong	local03, fp
2a008     04 4E 85 F1 | 	sub	fp, #4
2a00c     A7 2C 02 FB | 	rdlong	local08, fp
2a010     16 23 02 F1 | 	add	local03, local08
2a014     14 4E 85 F1 | 	sub	fp, #20
2a018     A7 2C 02 FB | 	rdlong	local08, fp
2a01c     18 4E 85 F1 | 	sub	fp, #24
2a020     0A 2C 06 F1 | 	add	local08, #10
2a024     16 2D E2 FA | 	rdword	local08, local08
2a028     16 23 1A F2 | 	cmp	local03, local08 wcz
2a02c     28 00 90 ED |  if_be	jmp	#LR__4269
2a030     18 4E 05 F1 | 	add	fp, #24
2a034     A7 1E 02 FB | 	rdlong	local01, fp
2a038     0A 1E 06 F1 | 	add	local01, #10
2a03c     0F 23 E2 FA | 	rdword	local03, local01
2a040     18 4E 05 F1 | 	add	fp, #24
2a044     A7 2C 02 FB | 	rdlong	local08, fp
2a048     16 23 82 F1 | 	sub	local03, local08
2a04c     04 4E 85 F1 | 	sub	fp, #4
2a050     A7 22 62 FC | 	wrlong	local03, fp
2a054     2C 4E 85 F1 | 	sub	fp, #44
2a058                 | LR__4269
2a058     18 4E 05 F1 | 	add	fp, #24
2a05c     A7 1E 02 FB | 	rdlong	local01, fp
2a060     01 1E 06 F1 | 	add	local01, #1
2a064     0F 13 C2 FA | 	rdbyte	arg01, local01
2a068     1C 4E 05 F1 | 	add	fp, #28
2a06c     A7 14 02 FB | 	rdlong	arg02, fp
2a070     14 4E 85 F1 | 	sub	fp, #20
2a074     A7 16 02 FB | 	rdlong	arg03, fp
2a078     0C 4E 05 F1 | 	add	fp, #12
2a07c     A7 18 02 FB | 	rdlong	arg04, fp
2a080     2C 4E 85 F1 | 	sub	fp, #44
2a084     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2a088     00 FA 0D F2 | 	cmp	result1, #0 wz
2a08c     1C 00 90 AD |  if_e	jmp	#LR__4270
2a090     04 4E 05 F1 | 	add	fp, #4
2a094     A7 22 02 FB | 	rdlong	local03, fp
2a098     04 4E 85 F1 | 	sub	fp, #4
2a09c     11 22 06 F1 | 	add	local03, #17
2a0a0     11 03 48 FC | 	wrbyte	#1, local03
2a0a4     01 FA 05 F6 | 	mov	result1, #1
2a0a8     EC 02 90 FD | 	jmp	#LR__4280
2a0ac                 | LR__4270
2a0ac     04 4E 05 F1 | 	add	fp, #4
2a0b0     A7 1E 02 FB | 	rdlong	local01, fp
2a0b4     04 4E 85 F1 | 	sub	fp, #4
2a0b8     10 1E 06 F1 | 	add	local01, #16
2a0bc     0F 23 C2 FA | 	rdbyte	local03, local01
2a0c0     80 22 CE F7 | 	test	local03, #128 wz
2a0c4     78 00 90 AD |  if_e	jmp	#LR__4271
2a0c8     04 4E 05 F1 | 	add	fp, #4
2a0cc     A7 2C 02 FB | 	rdlong	local08, fp
2a0d0     1C 2C 06 F1 | 	add	local08, #28
2a0d4     16 2D 02 FB | 	rdlong	local08, local08
2a0d8     1C 4E 05 F1 | 	add	fp, #28
2a0dc     A7 2E 02 FB | 	rdlong	local09, fp
2a0e0     17 2D 82 F1 | 	sub	local08, local09
2a0e4     0C 4E 05 F1 | 	add	fp, #12
2a0e8     A7 30 02 FB | 	rdlong	local10, fp
2a0ec     2C 4E 85 F1 | 	sub	fp, #44
2a0f0     18 33 02 F6 | 	mov	local11, local10
2a0f4     19 2D 12 F2 | 	cmp	local08, local11 wc
2a0f8     44 00 90 3D |  if_ae	jmp	#LR__4271
2a0fc     34 4E 05 F1 | 	add	fp, #52
2a100     A7 12 02 FB | 	rdlong	arg01, fp
2a104     30 4E 85 F1 | 	sub	fp, #48
2a108     A7 14 02 FB | 	rdlong	arg02, fp
2a10c     0A 33 02 F6 | 	mov	local11, arg02
2a110     1C 32 06 F1 | 	add	local11, #28
2a114     19 2F 02 FB | 	rdlong	local09, local11
2a118     1C 4E 05 F1 | 	add	fp, #28
2a11c     A7 26 02 FB | 	rdlong	local05, fp
2a120     13 2F 82 F1 | 	sub	local09, local05
2a124     09 2E 66 F0 | 	shl	local09, #9
2a128     17 33 02 F6 | 	mov	local11, local09
2a12c     17 13 02 F1 | 	add	arg01, local09
2a130     20 4E 85 F1 | 	sub	fp, #32
2a134     28 14 06 F1 | 	add	arg02, #40
2a138     09 16 C6 F9 | 	decod	arg03, #9
2a13c     F4 48 BF FD | 	call	#__system____builtin_memmove
2a140                 | LR__4271
2a140     2C 4E 05 F1 | 	add	fp, #44
2a144     A7 22 02 FB | 	rdlong	local03, fp
2a148     09 22 66 F0 | 	shl	local03, #9
2a14c     04 4E 85 F1 | 	sub	fp, #4
2a150     A7 22 62 FC | 	wrlong	local03, fp
2a154     28 4E 85 F1 | 	sub	fp, #40
2a158                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2a158                 | ' 				}
2a158                 | ' 
2a158                 | ' 
2a158                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2a158                 | ' 				continue;
2a158     B4 01 90 FD | 	jmp	#LR__4278
2a15c                 | LR__4272
2a15c     04 4E 05 F1 | 	add	fp, #4
2a160     A7 22 02 FB | 	rdlong	local03, fp
2a164     1C 22 06 F1 | 	add	local03, #28
2a168     11 23 02 FB | 	rdlong	local03, local03
2a16c     1C 4E 05 F1 | 	add	fp, #28
2a170     A7 1E 02 FB | 	rdlong	local01, fp
2a174     20 4E 85 F1 | 	sub	fp, #32
2a178     0F 23 0A F2 | 	cmp	local03, local01 wz
2a17c     EC 00 90 AD |  if_e	jmp	#LR__4276
2a180     04 4E 05 F1 | 	add	fp, #4
2a184     A7 1E 02 FB | 	rdlong	local01, fp
2a188     04 4E 85 F1 | 	sub	fp, #4
2a18c     10 1E 06 F1 | 	add	local01, #16
2a190     0F 23 C2 FA | 	rdbyte	local03, local01
2a194     80 22 CE F7 | 	test	local03, #128 wz
2a198     7C 00 90 AD |  if_e	jmp	#LR__4274
2a19c     18 4E 05 F1 | 	add	fp, #24
2a1a0     A7 1E 02 FB | 	rdlong	local01, fp
2a1a4     01 1E 06 F1 | 	add	local01, #1
2a1a8     0F 13 C2 FA | 	rdbyte	arg01, local01
2a1ac     14 4E 85 F1 | 	sub	fp, #20
2a1b0     A7 22 02 FB | 	rdlong	local03, fp
2a1b4     11 15 02 F6 | 	mov	arg02, local03
2a1b8     28 14 06 F1 | 	add	arg02, #40
2a1bc     04 4E 85 F1 | 	sub	fp, #4
2a1c0     1C 22 06 F1 | 	add	local03, #28
2a1c4     11 17 02 FB | 	rdlong	arg03, local03
2a1c8     01 18 06 F6 | 	mov	arg04, #1
2a1cc     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2a1d0     00 FA 0D F2 | 	cmp	result1, #0 wz
2a1d4     1C 00 90 AD |  if_e	jmp	#LR__4273
2a1d8     04 4E 05 F1 | 	add	fp, #4
2a1dc     A7 22 02 FB | 	rdlong	local03, fp
2a1e0     04 4E 85 F1 | 	sub	fp, #4
2a1e4     11 22 06 F1 | 	add	local03, #17
2a1e8     11 03 48 FC | 	wrbyte	#1, local03
2a1ec     01 FA 05 F6 | 	mov	result1, #1
2a1f0     A4 01 90 FD | 	jmp	#LR__4280
2a1f4                 | LR__4273
2a1f4     04 4E 05 F1 | 	add	fp, #4
2a1f8     A7 32 02 FB | 	rdlong	local11, fp
2a1fc     19 23 02 F6 | 	mov	local03, local11
2a200     04 4E 85 F1 | 	sub	fp, #4
2a204     10 32 06 F1 | 	add	local11, #16
2a208     19 33 C2 FA | 	rdbyte	local11, local11
2a20c     7F 32 06 F5 | 	and	local11, #127
2a210     10 22 06 F1 | 	add	local03, #16
2a214     11 33 42 FC | 	wrbyte	local11, local03
2a218                 | LR__4274
2a218     18 4E 05 F1 | 	add	fp, #24
2a21c     A7 1E 02 FB | 	rdlong	local01, fp
2a220     01 1E 06 F1 | 	add	local01, #1
2a224     0F 13 C2 FA | 	rdbyte	arg01, local01
2a228     14 4E 85 F1 | 	sub	fp, #20
2a22c     A7 14 02 FB | 	rdlong	arg02, fp
2a230     28 14 06 F1 | 	add	arg02, #40
2a234     1C 4E 05 F1 | 	add	fp, #28
2a238     A7 16 02 FB | 	rdlong	arg03, fp
2a23c     20 4E 85 F1 | 	sub	fp, #32
2a240     01 18 06 F6 | 	mov	arg04, #1
2a244     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2a248     00 FA 0D F2 | 	cmp	result1, #0 wz
2a24c     1C 00 90 AD |  if_e	jmp	#LR__4275
2a250     04 4E 05 F1 | 	add	fp, #4
2a254     A7 22 02 FB | 	rdlong	local03, fp
2a258     04 4E 85 F1 | 	sub	fp, #4
2a25c     11 22 06 F1 | 	add	local03, #17
2a260     11 03 48 FC | 	wrbyte	#1, local03
2a264     01 FA 05 F6 | 	mov	result1, #1
2a268     2C 01 90 FD | 	jmp	#LR__4280
2a26c                 | LR__4275
2a26c                 | LR__4276
2a26c     04 4E 05 F1 | 	add	fp, #4
2a270     A7 22 02 FB | 	rdlong	local03, fp
2a274     1C 4E 05 F1 | 	add	fp, #28
2a278     A7 32 02 FB | 	rdlong	local11, fp
2a27c     20 4E 85 F1 | 	sub	fp, #32
2a280     1C 22 06 F1 | 	add	local03, #28
2a284     11 33 62 FC | 	wrlong	local11, local03
2a288                 | LR__4277
2a288     04 4E 05 F1 | 	add	fp, #4
2a28c     A7 1E 02 FB | 	rdlong	local01, fp
2a290     14 1E 06 F1 | 	add	local01, #20
2a294     0F 33 02 FB | 	rdlong	local11, local01
2a298     FF 33 06 F5 | 	and	local11, #511
2a29c     09 22 C6 F9 | 	decod	local03, #9
2a2a0     19 23 82 F1 | 	sub	local03, local11
2a2a4     24 4E 05 F1 | 	add	fp, #36
2a2a8     A7 22 62 FC | 	wrlong	local03, fp
2a2ac     1C 4E 85 F1 | 	sub	fp, #28
2a2b0     A7 32 02 FB | 	rdlong	local11, fp
2a2b4     0C 4E 85 F1 | 	sub	fp, #12
2a2b8     19 23 1A F2 | 	cmp	local03, local11 wcz
2a2bc     0C 4E 05 11 |  if_a	add	fp, #12
2a2c0     A7 22 02 1B |  if_a	rdlong	local03, fp
2a2c4     1C 4E 05 11 |  if_a	add	fp, #28
2a2c8     A7 22 62 1C |  if_a	wrlong	local03, fp
2a2cc     28 4E 85 11 |  if_a	sub	fp, #40
2a2d0     34 4E 05 F1 | 	add	fp, #52
2a2d4     A7 12 02 FB | 	rdlong	arg01, fp
2a2d8     30 4E 85 F1 | 	sub	fp, #48
2a2dc     A7 28 02 FB | 	rdlong	local06, fp
2a2e0     14 15 02 F6 | 	mov	arg02, local06
2a2e4     28 14 06 F1 | 	add	arg02, #40
2a2e8     14 28 06 F1 | 	add	local06, #20
2a2ec     14 33 02 FB | 	rdlong	local11, local06
2a2f0     19 2F 02 F6 | 	mov	local09, local11
2a2f4     17 31 02 F6 | 	mov	local10, local09
2a2f8     FF 31 06 F5 | 	and	local10, #511
2a2fc     18 15 02 F1 | 	add	arg02, local10
2a300     24 4E 05 F1 | 	add	fp, #36
2a304     A7 16 02 FB | 	rdlong	arg03, fp
2a308     28 4E 85 F1 | 	sub	fp, #40
2a30c     24 47 BF FD | 	call	#__system____builtin_memmove
2a310                 | LR__4278
2a310     0C 4E 05 F1 | 	add	fp, #12
2a314     A7 22 02 FB | 	rdlong	local03, fp
2a318     1C 4E 05 F1 | 	add	fp, #28
2a31c     A7 2C 02 FB | 	rdlong	local08, fp
2a320     16 23 82 F1 | 	sub	local03, local08
2a324     1C 4E 85 F1 | 	sub	fp, #28
2a328     A7 22 62 FC | 	wrlong	local03, fp
2a32c     04 4E 05 F1 | 	add	fp, #4
2a330     A7 1E 02 FB | 	rdlong	local01, fp
2a334     0F 2B 02 FB | 	rdlong	local07, local01
2a338     18 4E 05 F1 | 	add	fp, #24
2a33c     A7 2C 02 FB | 	rdlong	local08, fp
2a340     16 2B 02 F1 | 	add	local07, local08
2a344     0F 2B 62 FC | 	wrlong	local07, local01
2a348     0C 4E 05 F1 | 	add	fp, #12
2a34c     A7 22 02 FB | 	rdlong	local03, fp
2a350     0C 4E 85 F1 | 	sub	fp, #12
2a354     A7 34 02 FB | 	rdlong	local12, fp
2a358     1A 23 02 F1 | 	add	local03, local12
2a35c     0C 4E 05 F1 | 	add	fp, #12
2a360     A7 22 62 FC | 	wrlong	local03, fp
2a364     30 4E 85 F1 | 	sub	fp, #48
2a368     A7 36 02 FB | 	rdlong	local13, fp
2a36c     1B 23 02 F6 | 	mov	local03, local13
2a370     14 36 06 F1 | 	add	local13, #20
2a374     1B 39 02 FB | 	rdlong	local14, local13
2a378     24 4E 05 F1 | 	add	fp, #36
2a37c     A7 28 02 FB | 	rdlong	local06, fp
2a380     28 4E 85 F1 | 	sub	fp, #40
2a384     14 39 02 F1 | 	add	local14, local06
2a388     14 22 06 F1 | 	add	local03, #20
2a38c     11 39 62 FC | 	wrlong	local14, local03
2a390     84 FA 9F FD | 	jmp	#LR__4262
2a394                 | LR__4279
2a394                 | ' 
2a394                 | ' 
2a394                 | ' 
2a394                 | ' 
2a394                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2a394                 | ' 
2a394                 | ' 	}
2a394                 | ' 
2a394                 | ' 	return FR_OK ;
2a394     00 FA 05 F6 | 	mov	result1, #0
2a398                 | LR__4280
2a398     A7 F0 03 F6 | 	mov	ptra, fp
2a39c     B2 00 A0 FD | 	call	#popregs_
2a3a0                 | _fatfs_cc_f_read_ret
2a3a0     2D 00 64 FD | 	ret
2a3a4                 | 
2a3a4                 | _fatfs_cc_f_write
2a3a4     15 4A 05 F6 | 	mov	COUNT_, #21
2a3a8     A8 00 A0 FD | 	call	#pushregs_
2a3ac     34 F0 07 F1 | 	add	ptra, #52
2a3b0     04 4E 05 F1 | 	add	fp, #4
2a3b4     A7 12 62 FC | 	wrlong	arg01, fp
2a3b8     04 4E 05 F1 | 	add	fp, #4
2a3bc     A7 14 62 FC | 	wrlong	arg02, fp
2a3c0     04 4E 05 F1 | 	add	fp, #4
2a3c4     A7 16 62 FC | 	wrlong	arg03, fp
2a3c8     04 4E 05 F1 | 	add	fp, #4
2a3cc     A7 18 62 FC | 	wrlong	arg04, fp
2a3d0     08 4E 85 F1 | 	sub	fp, #8
2a3d4     A7 FA 01 FB | 	rdlong	result1, fp
2a3d8     28 4E 05 F1 | 	add	fp, #40
2a3dc     A7 FA 61 FC | 	wrlong	result1, fp
2a3e0     20 4E 85 F1 | 	sub	fp, #32
2a3e4     A7 FA 01 FB | 	rdlong	result1, fp
2a3e8     FD 00 68 FC | 	wrlong	#0, result1
2a3ec     0C 4E 85 F1 | 	sub	fp, #12
2a3f0     A7 12 02 FB | 	rdlong	arg01, fp
2a3f4     14 4E 05 F1 | 	add	fp, #20
2a3f8     A7 14 02 F6 | 	mov	arg02, fp
2a3fc     18 4E 85 F1 | 	sub	fp, #24
2a400     88 F0 BF FD | 	call	#_fatfs_cc_validate
2a404     14 4E 05 F1 | 	add	fp, #20
2a408     A7 FA 61 FC | 	wrlong	result1, fp
2a40c     00 FA 4D F2 | 	cmps	result1, #0 wz
2a410     14 4E 85 F1 | 	sub	fp, #20
2a414     20 00 90 5D |  if_ne	jmp	#LR__4290
2a418     04 4E 05 F1 | 	add	fp, #4
2a41c     A7 14 02 FB | 	rdlong	arg02, fp
2a420     11 14 06 F1 | 	add	arg02, #17
2a424     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2a428     10 4E 05 F1 | 	add	fp, #16
2a42c     A7 14 62 FC | 	wrlong	arg02, fp
2a430     14 4E 85 F1 | 	sub	fp, #20
2a434     10 00 90 AD |  if_e	jmp	#LR__4291
2a438                 | LR__4290
2a438     14 4E 05 F1 | 	add	fp, #20
2a43c     A7 FA 01 FB | 	rdlong	result1, fp
2a440     14 4E 85 F1 | 	sub	fp, #20
2a444     44 07 90 FD | 	jmp	#LR__4313
2a448                 | LR__4291
2a448     04 4E 05 F1 | 	add	fp, #4
2a44c     A7 14 02 FB | 	rdlong	arg02, fp
2a450     04 4E 85 F1 | 	sub	fp, #4
2a454     10 14 06 F1 | 	add	arg02, #16
2a458     0A 15 C2 FA | 	rdbyte	arg02, arg02
2a45c     02 14 CE F7 | 	test	arg02, #2 wz
2a460     07 FA 05 A6 |  if_e	mov	result1, #7
2a464     24 07 90 AD |  if_e	jmp	#LR__4313
2a468     04 4E 05 F1 | 	add	fp, #4
2a46c     A7 14 02 FB | 	rdlong	arg02, fp
2a470     0A 13 02 F6 | 	mov	arg01, arg02
2a474     14 12 06 F1 | 	add	arg01, #20
2a478     09 13 02 FB | 	rdlong	arg01, arg01
2a47c     08 4E 05 F1 | 	add	fp, #8
2a480     A7 FA 01 FB | 	rdlong	result1, fp
2a484     FD 12 02 F1 | 	add	arg01, result1
2a488     0C 4E 85 F1 | 	sub	fp, #12
2a48c     14 14 06 F1 | 	add	arg02, #20
2a490     0A FB 01 FB | 	rdlong	result1, arg02
2a494     FD 12 12 F2 | 	cmp	arg01, result1 wc
2a498     24 00 90 3D |  if_ae	jmp	#LR__4292
2a49c     04 4E 05 F1 | 	add	fp, #4
2a4a0     A7 14 02 FB | 	rdlong	arg02, fp
2a4a4     01 FA 65 F6 | 	neg	result1, #1
2a4a8     14 14 06 F1 | 	add	arg02, #20
2a4ac     0A 15 02 FB | 	rdlong	arg02, arg02
2a4b0     0A FB 81 F1 | 	sub	result1, arg02
2a4b4     08 4E 05 F1 | 	add	fp, #8
2a4b8     A7 FA 61 FC | 	wrlong	result1, fp
2a4bc     0C 4E 85 F1 | 	sub	fp, #12
2a4c0                 | LR__4292
2a4c0                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2a4c0                 | ' 	}
2a4c0                 | ' 
2a4c0                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2a4c0                 | LR__4293
2a4c0     0C 4E 05 F1 | 	add	fp, #12
2a4c4     A7 FA 01 FB | 	rdlong	result1, fp
2a4c8     0C 4E 85 F1 | 	sub	fp, #12
2a4cc     01 FA 15 F2 | 	cmp	result1, #1 wc
2a4d0     90 06 90 CD |  if_b	jmp	#LR__4312
2a4d4     04 4E 05 F1 | 	add	fp, #4
2a4d8     A7 FA 01 FB | 	rdlong	result1, fp
2a4dc     04 4E 85 F1 | 	sub	fp, #4
2a4e0     14 FA 05 F1 | 	add	result1, #20
2a4e4     FD FA 01 FB | 	rdlong	result1, result1
2a4e8     FF FB CD F7 | 	test	result1, #511 wz
2a4ec     D8 04 90 5D |  if_ne	jmp	#LR__4308
2a4f0     04 4E 05 F1 | 	add	fp, #4
2a4f4     A7 FA 01 FB | 	rdlong	result1, fp
2a4f8     14 FA 05 F1 | 	add	result1, #20
2a4fc     FD FA 01 FB | 	rdlong	result1, result1
2a500     09 FA 45 F0 | 	shr	result1, #9
2a504     14 4E 05 F1 | 	add	fp, #20
2a508     A7 14 02 FB | 	rdlong	arg02, fp
2a50c     0A 14 06 F1 | 	add	arg02, #10
2a510     0A 19 E2 FA | 	rdword	arg04, arg02
2a514     0C 15 32 F9 | 	getword	arg02, arg04, #0
2a518     01 14 86 F1 | 	sub	arg02, #1
2a51c     0A FB 09 F5 | 	and	result1, arg02 wz
2a520     14 4E 05 F1 | 	add	fp, #20
2a524     A7 FA 61 FC | 	wrlong	result1, fp
2a528     2C 4E 85 F1 | 	sub	fp, #44
2a52c     44 01 90 5D |  if_ne	jmp	#LR__4299
2a530     04 4E 05 F1 | 	add	fp, #4
2a534     A7 FA 01 FB | 	rdlong	result1, fp
2a538     04 4E 85 F1 | 	sub	fp, #4
2a53c     14 FA 05 F1 | 	add	result1, #20
2a540     FD 14 0A FB | 	rdlong	arg02, result1 wz
2a544     44 00 90 5D |  if_ne	jmp	#LR__4294
2a548     04 4E 05 F1 | 	add	fp, #4
2a54c     A7 14 02 FB | 	rdlong	arg02, fp
2a550     08 14 06 F1 | 	add	arg02, #8
2a554     0A 15 0A FB | 	rdlong	arg02, arg02 wz
2a558     18 4E 05 F1 | 	add	fp, #24
2a55c     A7 14 62 FC | 	wrlong	arg02, fp
2a560     1C 4E 85 F1 | 	sub	fp, #28
2a564     4C 00 90 5D |  if_ne	jmp	#LR__4295
2a568     04 4E 05 F1 | 	add	fp, #4
2a56c     A7 12 02 FB | 	rdlong	arg01, fp
2a570     04 4E 85 F1 | 	sub	fp, #4
2a574     00 14 06 F6 | 	mov	arg02, #0
2a578     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
2a57c     1C 4E 05 F1 | 	add	fp, #28
2a580     A7 FA 61 FC | 	wrlong	result1, fp
2a584     1C 4E 85 F1 | 	sub	fp, #28
2a588     28 00 90 FD | 	jmp	#LR__4295
2a58c                 | LR__4294
2a58c     04 4E 05 F1 | 	add	fp, #4
2a590     A7 18 02 FB | 	rdlong	arg04, fp
2a594     0C 13 02 F6 | 	mov	arg01, arg04
2a598     04 4E 85 F1 | 	sub	fp, #4
2a59c     18 18 06 F1 | 	add	arg04, #24
2a5a0     0C 15 02 FB | 	rdlong	arg02, arg04
2a5a4     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2a5a8     1C 4E 05 F1 | 	add	fp, #28
2a5ac     A7 FA 61 FC | 	wrlong	result1, fp
2a5b0     1C 4E 85 F1 | 	sub	fp, #28
2a5b4                 | LR__4295
2a5b4     1C 4E 05 F1 | 	add	fp, #28
2a5b8     A7 FA 09 FB | 	rdlong	result1, fp wz
2a5bc     1C 4E 85 F1 | 	sub	fp, #28
2a5c0     A0 05 90 AD |  if_e	jmp	#LR__4312
2a5c4     1C 4E 05 F1 | 	add	fp, #28
2a5c8     A7 FA 01 FB | 	rdlong	result1, fp
2a5cc     1C 4E 85 F1 | 	sub	fp, #28
2a5d0     01 FA 0D F2 | 	cmp	result1, #1 wz
2a5d4     1C 00 90 5D |  if_ne	jmp	#LR__4296
2a5d8     04 4E 05 F1 | 	add	fp, #4
2a5dc     A7 FA 01 FB | 	rdlong	result1, fp
2a5e0     04 4E 85 F1 | 	sub	fp, #4
2a5e4     11 FA 05 F1 | 	add	result1, #17
2a5e8     FD 04 48 FC | 	wrbyte	#2, result1
2a5ec     02 FA 05 F6 | 	mov	result1, #2
2a5f0     98 05 90 FD | 	jmp	#LR__4313
2a5f4                 | LR__4296
2a5f4     1C 4E 05 F1 | 	add	fp, #28
2a5f8     A7 FA 01 FB | 	rdlong	result1, fp
2a5fc     1C 4E 85 F1 | 	sub	fp, #28
2a600     FF FF 7F FF 
2a604     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2a608     1C 00 90 5D |  if_ne	jmp	#LR__4297
2a60c     04 4E 05 F1 | 	add	fp, #4
2a610     A7 FA 01 FB | 	rdlong	result1, fp
2a614     04 4E 85 F1 | 	sub	fp, #4
2a618     11 FA 05 F1 | 	add	result1, #17
2a61c     FD 02 48 FC | 	wrbyte	#1, result1
2a620     01 FA 05 F6 | 	mov	result1, #1
2a624     64 05 90 FD | 	jmp	#LR__4313
2a628                 | LR__4297
2a628     04 4E 05 F1 | 	add	fp, #4
2a62c     A7 FA 01 FB | 	rdlong	result1, fp
2a630     18 4E 05 F1 | 	add	fp, #24
2a634     A7 18 02 FB | 	rdlong	arg04, fp
2a638     18 FA 05 F1 | 	add	result1, #24
2a63c     FD 18 62 FC | 	wrlong	arg04, result1
2a640     18 4E 85 F1 | 	sub	fp, #24
2a644     A7 FA 01 FB | 	rdlong	result1, fp
2a648     04 4E 85 F1 | 	sub	fp, #4
2a64c     08 FA 05 F1 | 	add	result1, #8
2a650     FD FA 09 FB | 	rdlong	result1, result1 wz
2a654     1C 00 90 5D |  if_ne	jmp	#LR__4298
2a658     04 4E 05 F1 | 	add	fp, #4
2a65c     A7 18 02 FB | 	rdlong	arg04, fp
2a660     18 4E 05 F1 | 	add	fp, #24
2a664     A7 FA 01 FB | 	rdlong	result1, fp
2a668     1C 4E 85 F1 | 	sub	fp, #28
2a66c     08 18 06 F1 | 	add	arg04, #8
2a670     0C FB 61 FC | 	wrlong	result1, arg04
2a674                 | LR__4298
2a674                 | LR__4299
2a674     04 4E 05 F1 | 	add	fp, #4
2a678     A7 18 02 FB | 	rdlong	arg04, fp
2a67c     04 4E 85 F1 | 	sub	fp, #4
2a680     10 18 06 F1 | 	add	arg04, #16
2a684     0C 19 C2 FA | 	rdbyte	arg04, arg04
2a688     80 18 CE F7 | 	test	arg04, #128 wz
2a68c     7C 00 90 AD |  if_e	jmp	#LR__4301
2a690     18 4E 05 F1 | 	add	fp, #24
2a694     A7 18 02 FB | 	rdlong	arg04, fp
2a698     01 18 06 F1 | 	add	arg04, #1
2a69c     0C 13 C2 FA | 	rdbyte	arg01, arg04
2a6a0     14 4E 85 F1 | 	sub	fp, #20
2a6a4     A7 18 02 FB | 	rdlong	arg04, fp
2a6a8     0C 15 02 F6 | 	mov	arg02, arg04
2a6ac     28 14 06 F1 | 	add	arg02, #40
2a6b0     04 4E 85 F1 | 	sub	fp, #4
2a6b4     1C 18 06 F1 | 	add	arg04, #28
2a6b8     0C 17 02 FB | 	rdlong	arg03, arg04
2a6bc     01 18 06 F6 | 	mov	arg04, #1
2a6c0     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2a6c4     00 FA 0D F2 | 	cmp	result1, #0 wz
2a6c8     1C 00 90 AD |  if_e	jmp	#LR__4300
2a6cc     04 4E 05 F1 | 	add	fp, #4
2a6d0     A7 FA 01 FB | 	rdlong	result1, fp
2a6d4     04 4E 85 F1 | 	sub	fp, #4
2a6d8     11 FA 05 F1 | 	add	result1, #17
2a6dc     FD 02 48 FC | 	wrbyte	#1, result1
2a6e0     01 FA 05 F6 | 	mov	result1, #1
2a6e4     A4 04 90 FD | 	jmp	#LR__4313
2a6e8                 | LR__4300
2a6e8     04 4E 05 F1 | 	add	fp, #4
2a6ec     A7 18 02 FB | 	rdlong	arg04, fp
2a6f0     0C FB 01 F6 | 	mov	result1, arg04
2a6f4     04 4E 85 F1 | 	sub	fp, #4
2a6f8     10 18 06 F1 | 	add	arg04, #16
2a6fc     0C 19 C2 FA | 	rdbyte	arg04, arg04
2a700     7F 18 06 F5 | 	and	arg04, #127
2a704     10 FA 05 F1 | 	add	result1, #16
2a708     FD 18 42 FC | 	wrbyte	arg04, result1
2a70c                 | LR__4301
2a70c     18 4E 05 F1 | 	add	fp, #24
2a710     A7 12 02 FB | 	rdlong	arg01, fp
2a714     14 4E 85 F1 | 	sub	fp, #20
2a718     A7 14 02 FB | 	rdlong	arg02, fp
2a71c     04 4E 85 F1 | 	sub	fp, #4
2a720     18 14 06 F1 | 	add	arg02, #24
2a724     0A 15 02 FB | 	rdlong	arg02, arg02
2a728     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2a72c     20 4E 05 F1 | 	add	fp, #32
2a730     A7 FA 61 FC | 	wrlong	result1, fp
2a734     20 4E 85 F1 | 	sub	fp, #32
2a738     00 FA 0D F2 | 	cmp	result1, #0 wz
2a73c     1C 00 90 5D |  if_ne	jmp	#LR__4302
2a740     04 4E 05 F1 | 	add	fp, #4
2a744     A7 FA 01 FB | 	rdlong	result1, fp
2a748     04 4E 85 F1 | 	sub	fp, #4
2a74c     11 FA 05 F1 | 	add	result1, #17
2a750     FD 04 48 FC | 	wrbyte	#2, result1
2a754     02 FA 05 F6 | 	mov	result1, #2
2a758     30 04 90 FD | 	jmp	#LR__4313
2a75c                 | LR__4302
2a75c     20 4E 05 F1 | 	add	fp, #32
2a760     A7 FA 01 FB | 	rdlong	result1, fp
2a764     0C 4E 05 F1 | 	add	fp, #12
2a768     A7 1E 02 FB | 	rdlong	local01, fp
2a76c     0F FB 01 F1 | 	add	result1, local01
2a770     0C 4E 85 F1 | 	sub	fp, #12
2a774     A7 FA 61 FC | 	wrlong	result1, fp
2a778     14 4E 85 F1 | 	sub	fp, #20
2a77c     A7 FA 01 FB | 	rdlong	result1, fp
2a780     09 FA 45 F0 | 	shr	result1, #9
2a784     1C 4E 05 F1 | 	add	fp, #28
2a788     A7 FA 61 FC | 	wrlong	result1, fp
2a78c     28 4E 85 F1 | 	sub	fp, #40
2a790     01 FA 15 F2 | 	cmp	result1, #1 wc
2a794     60 01 90 CD |  if_b	jmp	#LR__4306
2a798     2C 4E 05 F1 | 	add	fp, #44
2a79c     A7 FA 01 FB | 	rdlong	result1, fp
2a7a0     04 4E 85 F1 | 	sub	fp, #4
2a7a4     A7 18 02 FB | 	rdlong	arg04, fp
2a7a8     0C FB 01 F1 | 	add	result1, arg04
2a7ac     10 4E 85 F1 | 	sub	fp, #16
2a7b0     A7 18 02 FB | 	rdlong	arg04, fp
2a7b4     18 4E 85 F1 | 	sub	fp, #24
2a7b8     0A 18 06 F1 | 	add	arg04, #10
2a7bc     0C 19 E2 FA | 	rdword	arg04, arg04
2a7c0     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2a7c4     28 00 90 ED |  if_be	jmp	#LR__4303
2a7c8     18 4E 05 F1 | 	add	fp, #24
2a7cc     A7 FA 01 FB | 	rdlong	result1, fp
2a7d0     0A FA 05 F1 | 	add	result1, #10
2a7d4     FD FA E1 FA | 	rdword	result1, result1
2a7d8     14 4E 05 F1 | 	add	fp, #20
2a7dc     A7 18 02 FB | 	rdlong	arg04, fp
2a7e0     0C FB 81 F1 | 	sub	result1, arg04
2a7e4     04 4E 85 F1 | 	sub	fp, #4
2a7e8     A7 FA 61 FC | 	wrlong	result1, fp
2a7ec     28 4E 85 F1 | 	sub	fp, #40
2a7f0                 | LR__4303
2a7f0     18 4E 05 F1 | 	add	fp, #24
2a7f4     A7 18 02 FB | 	rdlong	arg04, fp
2a7f8     01 18 06 F1 | 	add	arg04, #1
2a7fc     0C 13 C2 FA | 	rdbyte	arg01, arg04
2a800     18 4E 05 F1 | 	add	fp, #24
2a804     A7 14 02 FB | 	rdlong	arg02, fp
2a808     10 4E 85 F1 | 	sub	fp, #16
2a80c     A7 16 02 FB | 	rdlong	arg03, fp
2a810     08 4E 05 F1 | 	add	fp, #8
2a814     A7 18 02 FB | 	rdlong	arg04, fp
2a818     28 4E 85 F1 | 	sub	fp, #40
2a81c     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2a820     00 FA 0D F2 | 	cmp	result1, #0 wz
2a824     1C 00 90 AD |  if_e	jmp	#LR__4304
2a828     04 4E 05 F1 | 	add	fp, #4
2a82c     A7 1E 02 FB | 	rdlong	local01, fp
2a830     04 4E 85 F1 | 	sub	fp, #4
2a834     11 1E 06 F1 | 	add	local01, #17
2a838     0F 03 48 FC | 	wrbyte	#1, local01
2a83c     01 FA 05 F6 | 	mov	result1, #1
2a840     48 03 90 FD | 	jmp	#LR__4313
2a844                 | LR__4304
2a844     04 4E 05 F1 | 	add	fp, #4
2a848     A7 FA 01 FB | 	rdlong	result1, fp
2a84c     1C FA 05 F1 | 	add	result1, #28
2a850     FD FA 01 FB | 	rdlong	result1, result1
2a854     1C 4E 05 F1 | 	add	fp, #28
2a858     A7 20 02 FB | 	rdlong	local02, fp
2a85c     10 FB 81 F1 | 	sub	result1, local02
2a860     08 4E 05 F1 | 	add	fp, #8
2a864     A7 18 02 FB | 	rdlong	arg04, fp
2a868     28 4E 85 F1 | 	sub	fp, #40
2a86c     0C FB 11 F2 | 	cmp	result1, arg04 wc
2a870     68 00 90 3D |  if_ae	jmp	#LR__4305
2a874     04 4E 05 F1 | 	add	fp, #4
2a878     A7 12 02 FB | 	rdlong	arg01, fp
2a87c     28 12 06 F1 | 	add	arg01, #40
2a880     2C 4E 05 F1 | 	add	fp, #44
2a884     A7 14 02 FB | 	rdlong	arg02, fp
2a888     2C 4E 85 F1 | 	sub	fp, #44
2a88c     A7 FA 01 FB | 	rdlong	result1, fp
2a890     1C FA 05 F1 | 	add	result1, #28
2a894     FD 22 02 FB | 	rdlong	local03, result1
2a898     1C 4E 05 F1 | 	add	fp, #28
2a89c     A7 18 02 FB | 	rdlong	arg04, fp
2a8a0     20 4E 85 F1 | 	sub	fp, #32
2a8a4     0C 23 82 F1 | 	sub	local03, arg04
2a8a8     09 22 66 F0 | 	shl	local03, #9
2a8ac     11 15 02 F1 | 	add	arg02, local03
2a8b0     09 16 C6 F9 | 	decod	arg03, #9
2a8b4     7C 41 BF FD | 	call	#__system____builtin_memmove
2a8b8     04 4E 05 F1 | 	add	fp, #4
2a8bc     A7 18 02 FB | 	rdlong	arg04, fp
2a8c0     0C FB 01 F6 | 	mov	result1, arg04
2a8c4     04 4E 85 F1 | 	sub	fp, #4
2a8c8     10 18 06 F1 | 	add	arg04, #16
2a8cc     0C 19 C2 FA | 	rdbyte	arg04, arg04
2a8d0     7F 18 06 F5 | 	and	arg04, #127
2a8d4     10 FA 05 F1 | 	add	result1, #16
2a8d8     FD 18 42 FC | 	wrbyte	arg04, result1
2a8dc                 | LR__4305
2a8dc     28 4E 05 F1 | 	add	fp, #40
2a8e0     A7 FA 01 FB | 	rdlong	result1, fp
2a8e4     09 FA 65 F0 | 	shl	result1, #9
2a8e8     04 4E 85 F1 | 	sub	fp, #4
2a8ec     A7 FA 61 FC | 	wrlong	result1, fp
2a8f0     24 4E 85 F1 | 	sub	fp, #36
2a8f4                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2a8f4                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2a8f4                 | ' 				}
2a8f4                 | ' 
2a8f4                 | ' 
2a8f4                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2a8f4                 | ' 				continue;
2a8f4     74 01 90 FD | 	jmp	#LR__4309
2a8f8                 | LR__4306
2a8f8     04 4E 05 F1 | 	add	fp, #4
2a8fc     A7 20 02 FB | 	rdlong	local02, fp
2a900     1C 20 06 F1 | 	add	local02, #28
2a904     10 FB 01 FB | 	rdlong	result1, local02
2a908     1C 4E 05 F1 | 	add	fp, #28
2a90c     A7 20 02 FB | 	rdlong	local02, fp
2a910     20 4E 85 F1 | 	sub	fp, #32
2a914     10 FB 09 F2 | 	cmp	result1, local02 wz
2a918     90 00 90 AD |  if_e	jmp	#LR__4307
2a91c     04 4E 05 F1 | 	add	fp, #4
2a920     A7 FA 01 FB | 	rdlong	result1, fp
2a924     FD 22 02 F6 | 	mov	local03, result1
2a928     04 4E 85 F1 | 	sub	fp, #4
2a92c     14 22 06 F1 | 	add	local03, #20
2a930     11 23 02 FB | 	rdlong	local03, local03
2a934     0C FA 05 F1 | 	add	result1, #12
2a938     FD 24 02 FB | 	rdlong	local04, result1
2a93c     12 27 02 F6 | 	mov	local05, local04
2a940     13 23 12 F2 | 	cmp	local03, local05 wc
2a944     64 00 90 3D |  if_ae	jmp	#LR__4307
2a948     18 4E 05 F1 | 	add	fp, #24
2a94c     A7 18 02 FB | 	rdlong	arg04, fp
2a950     01 18 06 F1 | 	add	arg04, #1
2a954     0C 13 C2 FA | 	rdbyte	arg01, arg04
2a958     14 4E 85 F1 | 	sub	fp, #20
2a95c     A7 28 02 FB | 	rdlong	local06, fp
2a960     28 28 06 F1 | 	add	local06, #40
2a964     14 2B 02 F6 | 	mov	local07, local06
2a968     1C 4E 05 F1 | 	add	fp, #28
2a96c     A7 2C 02 FB | 	rdlong	local08, fp
2a970     20 4E 85 F1 | 	sub	fp, #32
2a974     01 2E 06 F6 | 	mov	local09, #1
2a978     15 15 02 F6 | 	mov	arg02, local07
2a97c     16 17 02 F6 | 	mov	arg03, local08
2a980     01 18 06 F6 | 	mov	arg04, #1
2a984     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2a988     FD 30 0A F6 | 	mov	local10, result1 wz
2a98c     1C 00 90 AD |  if_e	jmp	#LR__4307
2a990     04 4E 05 F1 | 	add	fp, #4
2a994     A7 30 02 FB | 	rdlong	local10, fp
2a998     04 4E 85 F1 | 	sub	fp, #4
2a99c     11 30 06 F1 | 	add	local10, #17
2a9a0     18 03 48 FC | 	wrbyte	#1, local10
2a9a4                 | ' 				fp->fptr < fp->obj.objsize &&
2a9a4                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2a9a4                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2a9a4     01 FA 05 F6 | 	mov	result1, #1
2a9a8     E0 01 90 FD | 	jmp	#LR__4313
2a9ac                 | LR__4307
2a9ac     04 4E 05 F1 | 	add	fp, #4
2a9b0     A7 18 02 FB | 	rdlong	arg04, fp
2a9b4     1C 4E 05 F1 | 	add	fp, #28
2a9b8     A7 FA 01 FB | 	rdlong	result1, fp
2a9bc     20 4E 85 F1 | 	sub	fp, #32
2a9c0     1C 18 06 F1 | 	add	arg04, #28
2a9c4     0C FB 61 FC | 	wrlong	result1, arg04
2a9c8                 | LR__4308
2a9c8     04 4E 05 F1 | 	add	fp, #4
2a9cc     A7 FA 01 FB | 	rdlong	result1, fp
2a9d0     14 FA 05 F1 | 	add	result1, #20
2a9d4     FD FA 01 FB | 	rdlong	result1, result1
2a9d8     FF FB 05 F5 | 	and	result1, #511
2a9dc     09 32 C6 F9 | 	decod	local11, #9
2a9e0     FD 32 82 F1 | 	sub	local11, result1
2a9e4     20 4E 05 F1 | 	add	fp, #32
2a9e8     A7 32 62 FC | 	wrlong	local11, fp
2a9ec     18 4E 85 F1 | 	sub	fp, #24
2a9f0     A7 FA 01 FB | 	rdlong	result1, fp
2a9f4     0C 4E 85 F1 | 	sub	fp, #12
2a9f8     FD 32 1A F2 | 	cmp	local11, result1 wcz
2a9fc     0C 4E 05 11 |  if_a	add	fp, #12
2aa00     A7 32 02 1B |  if_a	rdlong	local11, fp
2aa04     18 4E 05 11 |  if_a	add	fp, #24
2aa08     A7 32 62 1C |  if_a	wrlong	local11, fp
2aa0c     24 4E 85 11 |  if_a	sub	fp, #36
2aa10     04 4E 05 F1 | 	add	fp, #4
2aa14     A7 32 02 FB | 	rdlong	local11, fp
2aa18     19 13 02 F6 | 	mov	arg01, local11
2aa1c     28 12 06 F1 | 	add	arg01, #40
2aa20     14 32 06 F1 | 	add	local11, #20
2aa24     19 33 02 FB | 	rdlong	local11, local11
2aa28     FF 33 06 F5 | 	and	local11, #511
2aa2c     19 13 02 F1 | 	add	arg01, local11
2aa30     2C 4E 05 F1 | 	add	fp, #44
2aa34     A7 14 02 FB | 	rdlong	arg02, fp
2aa38     0C 4E 85 F1 | 	sub	fp, #12
2aa3c     A7 16 02 FB | 	rdlong	arg03, fp
2aa40     24 4E 85 F1 | 	sub	fp, #36
2aa44     EC 3F BF FD | 	call	#__system____builtin_memmove
2aa48     04 4E 05 F1 | 	add	fp, #4
2aa4c     A7 FA 01 FB | 	rdlong	result1, fp
2aa50     FD 32 02 F6 | 	mov	local11, result1
2aa54     04 4E 85 F1 | 	sub	fp, #4
2aa58     10 FA 05 F1 | 	add	result1, #16
2aa5c     FD FA C1 FA | 	rdbyte	result1, result1
2aa60     80 FA 45 F5 | 	or	result1, #128
2aa64     10 32 06 F1 | 	add	local11, #16
2aa68     19 FB 41 FC | 	wrbyte	result1, local11
2aa6c                 | LR__4309
2aa6c     0C 4E 05 F1 | 	add	fp, #12
2aa70     A7 32 02 FB | 	rdlong	local11, fp
2aa74     18 4E 05 F1 | 	add	fp, #24
2aa78     A7 FA 01 FB | 	rdlong	result1, fp
2aa7c     FD 32 82 F1 | 	sub	local11, result1
2aa80     18 4E 85 F1 | 	sub	fp, #24
2aa84     A7 32 62 FC | 	wrlong	local11, fp
2aa88     04 4E 05 F1 | 	add	fp, #4
2aa8c     A7 34 02 FB | 	rdlong	local12, fp
2aa90     1A 33 02 FB | 	rdlong	local11, local12
2aa94     14 4E 05 F1 | 	add	fp, #20
2aa98     A7 36 02 FB | 	rdlong	local13, fp
2aa9c     1B 33 02 F1 | 	add	local11, local13
2aaa0     1A 33 62 FC | 	wrlong	local11, local12
2aaa4     0C 4E 05 F1 | 	add	fp, #12
2aaa8     A7 32 02 FB | 	rdlong	local11, fp
2aaac     0C 4E 85 F1 | 	sub	fp, #12
2aab0     A7 38 02 FB | 	rdlong	local14, fp
2aab4     1C 33 02 F1 | 	add	local11, local14
2aab8     0C 4E 05 F1 | 	add	fp, #12
2aabc     A7 32 62 FC | 	wrlong	local11, fp
2aac0     2C 4E 85 F1 | 	sub	fp, #44
2aac4     A7 3A 02 FB | 	rdlong	local15, fp
2aac8     1D 33 02 F6 | 	mov	local11, local15
2aacc     14 3A 06 F1 | 	add	local15, #20
2aad0     1D 3B 02 FB | 	rdlong	local15, local15
2aad4     20 4E 05 F1 | 	add	fp, #32
2aad8     A7 3C 02 FB | 	rdlong	local16, fp
2aadc     1E 3B 02 F1 | 	add	local15, local16
2aae0     14 32 06 F1 | 	add	local11, #20
2aae4     19 3B 62 FC | 	wrlong	local15, local11
2aae8     20 4E 85 F1 | 	sub	fp, #32
2aaec     A7 3E 02 FB | 	rdlong	local17, fp
2aaf0     1F 33 02 F6 | 	mov	local11, local17
2aaf4     1F 41 02 F6 | 	mov	local18, local17
2aaf8     04 4E 85 F1 | 	sub	fp, #4
2aafc     14 3E 06 F1 | 	add	local17, #20
2ab00     1F 43 02 FB | 	rdlong	local19, local17
2ab04     0C 40 06 F1 | 	add	local18, #12
2ab08     20 45 02 FB | 	rdlong	local20, local18
2ab0c     22 43 1A F2 | 	cmp	local19, local20 wcz
2ab10     24 00 90 ED |  if_be	jmp	#LR__4310
2ab14     04 4E 05 F1 | 	add	fp, #4
2ab18     A7 26 02 FB | 	rdlong	local05, fp
2ab1c     04 4E 85 F1 | 	sub	fp, #4
2ab20     13 23 02 F6 | 	mov	local03, local05
2ab24     14 22 06 F1 | 	add	local03, #20
2ab28     11 25 02 FB | 	rdlong	local04, local03
2ab2c     14 22 86 F1 | 	sub	local03, #20
2ab30     12 47 02 F6 | 	mov	local21, local04
2ab34     20 00 90 FD | 	jmp	#LR__4311
2ab38                 | LR__4310
2ab38     04 4E 05 F1 | 	add	fp, #4
2ab3c     A7 2A 02 FB | 	rdlong	local07, fp
2ab40     04 4E 85 F1 | 	sub	fp, #4
2ab44     15 31 02 F6 | 	mov	local10, local07
2ab48     0C 30 06 F1 | 	add	local10, #12
2ab4c     18 2D 02 FB | 	rdlong	local08, local10
2ab50     0C 30 86 F1 | 	sub	local10, #12
2ab54     16 47 02 F6 | 	mov	local21, local08
2ab58                 | LR__4311
2ab58     0C 32 06 F1 | 	add	local11, #12
2ab5c     19 47 62 FC | 	wrlong	local21, local11
2ab60     5C F9 9F FD | 	jmp	#LR__4293
2ab64                 | LR__4312
2ab64     04 4E 05 F1 | 	add	fp, #4
2ab68     A7 34 02 FB | 	rdlong	local12, fp
2ab6c     1A 1F 02 F6 | 	mov	local01, local12
2ab70     04 4E 85 F1 | 	sub	fp, #4
2ab74     10 34 06 F1 | 	add	local12, #16
2ab78     1A 33 C2 FA | 	rdbyte	local11, local12
2ab7c     40 32 46 F5 | 	or	local11, #64
2ab80     10 1E 06 F1 | 	add	local01, #16
2ab84     0F 33 42 FC | 	wrbyte	local11, local01
2ab88                 | ' 
2ab88                 | ' 
2ab88                 | ' 
2ab88                 | ' 
2ab88                 | ' 
2ab88                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2ab88                 | ' 		fp->flag |=  0x80 ;
2ab88                 | ' 
2ab88                 | ' 	}
2ab88                 | ' 
2ab88                 | ' 	fp->flag |=  0x40 ;
2ab88                 | ' 
2ab88                 | ' 	return FR_OK ;
2ab88     00 FA 05 F6 | 	mov	result1, #0
2ab8c                 | LR__4313
2ab8c     A7 F0 03 F6 | 	mov	ptra, fp
2ab90     B2 00 A0 FD | 	call	#popregs_
2ab94                 | _fatfs_cc_f_write_ret
2ab94     2D 00 64 FD | 	ret
2ab98                 | 
2ab98                 | _fatfs_cc_f_sync
2ab98     00 4A 05 F6 | 	mov	COUNT_, #0
2ab9c     A8 00 A0 FD | 	call	#pushregs_
2aba0     18 F0 07 F1 | 	add	ptra, #24
2aba4     04 4E 05 F1 | 	add	fp, #4
2aba8     A7 12 62 FC | 	wrlong	arg01, fp
2abac     08 4E 05 F1 | 	add	fp, #8
2abb0     A7 14 02 F6 | 	mov	arg02, fp
2abb4     0C 4E 85 F1 | 	sub	fp, #12
2abb8     D0 E8 BF FD | 	call	#_fatfs_cc_validate
2abbc     08 4E 05 F1 | 	add	fp, #8
2abc0     A7 FA 61 FC | 	wrlong	result1, fp
2abc4     08 4E 85 F1 | 	sub	fp, #8
2abc8     00 FA 0D F2 | 	cmp	result1, #0 wz
2abcc     C0 01 90 5D |  if_ne	jmp	#LR__4323
2abd0     04 4E 05 F1 | 	add	fp, #4
2abd4     A7 18 02 FB | 	rdlong	arg04, fp
2abd8     04 4E 85 F1 | 	sub	fp, #4
2abdc     10 18 06 F1 | 	add	arg04, #16
2abe0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2abe4     40 18 CE F7 | 	test	arg04, #64 wz
2abe8     A4 01 90 AD |  if_e	jmp	#LR__4322
2abec     04 4E 05 F1 | 	add	fp, #4
2abf0     A7 18 02 FB | 	rdlong	arg04, fp
2abf4     04 4E 85 F1 | 	sub	fp, #4
2abf8     10 18 06 F1 | 	add	arg04, #16
2abfc     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ac00     80 18 CE F7 | 	test	arg04, #128 wz
2ac04     64 00 90 AD |  if_e	jmp	#LR__4320
2ac08     0C 4E 05 F1 | 	add	fp, #12
2ac0c     A7 18 02 FB | 	rdlong	arg04, fp
2ac10     01 18 06 F1 | 	add	arg04, #1
2ac14     0C 13 C2 FA | 	rdbyte	arg01, arg04
2ac18     08 4E 85 F1 | 	sub	fp, #8
2ac1c     A7 18 02 FB | 	rdlong	arg04, fp
2ac20     0C 15 02 F6 | 	mov	arg02, arg04
2ac24     28 14 06 F1 | 	add	arg02, #40
2ac28     04 4E 85 F1 | 	sub	fp, #4
2ac2c     1C 18 06 F1 | 	add	arg04, #28
2ac30     0C 17 02 FB | 	rdlong	arg03, arg04
2ac34     01 18 06 F6 | 	mov	arg04, #1
2ac38     0C AE BF FD | 	call	#_fatfs_cc_disk_write
2ac3c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ac40     01 FA 05 56 |  if_ne	mov	result1, #1
2ac44     54 01 90 5D |  if_ne	jmp	#LR__4324
2ac48     04 4E 05 F1 | 	add	fp, #4
2ac4c     A7 18 02 FB | 	rdlong	arg04, fp
2ac50     0C 17 02 F6 | 	mov	arg03, arg04
2ac54     04 4E 85 F1 | 	sub	fp, #4
2ac58     10 18 06 F1 | 	add	arg04, #16
2ac5c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ac60     7F 18 06 F5 | 	and	arg04, #127
2ac64     10 16 06 F1 | 	add	arg03, #16
2ac68     0B 19 42 FC | 	wrbyte	arg04, arg03
2ac6c                 | LR__4320
2ac6c     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2ac70     10 4E 05 F1 | 	add	fp, #16
2ac74     A7 FA 61 FC | 	wrlong	result1, fp
2ac78     04 4E 85 F1 | 	sub	fp, #4
2ac7c     A7 12 02 FB | 	rdlong	arg01, fp
2ac80     08 4E 85 F1 | 	sub	fp, #8
2ac84     A7 18 02 FB | 	rdlong	arg04, fp
2ac88     04 4E 85 F1 | 	sub	fp, #4
2ac8c     20 18 06 F1 | 	add	arg04, #32
2ac90     0C 15 02 FB | 	rdlong	arg02, arg04
2ac94     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
2ac98     08 4E 05 F1 | 	add	fp, #8
2ac9c     A7 FA 61 FC | 	wrlong	result1, fp
2aca0     08 4E 85 F1 | 	sub	fp, #8
2aca4     00 FA 0D F2 | 	cmp	result1, #0 wz
2aca8     E4 00 90 5D |  if_ne	jmp	#LR__4321
2acac     04 4E 05 F1 | 	add	fp, #4
2acb0     A7 18 02 FB | 	rdlong	arg04, fp
2acb4     24 18 06 F1 | 	add	arg04, #36
2acb8     0C 19 02 FB | 	rdlong	arg04, arg04
2acbc     10 4E 05 F1 | 	add	fp, #16
2acc0     A7 18 62 FC | 	wrlong	arg04, fp
2acc4     0C 17 02 F6 | 	mov	arg03, arg04
2acc8     0B 16 06 F1 | 	add	arg03, #11
2accc     0B 17 C2 FA | 	rdbyte	arg03, arg03
2acd0     20 16 46 F5 | 	or	arg03, #32
2acd4     0B 18 06 F1 | 	add	arg04, #11
2acd8     0C 17 42 FC | 	wrbyte	arg03, arg04
2acdc     10 4E 85 F1 | 	sub	fp, #16
2ace0     A7 18 02 FB | 	rdlong	arg04, fp
2ace4     0C 13 02 FB | 	rdlong	arg01, arg04
2ace8     10 4E 05 F1 | 	add	fp, #16
2acec     A7 14 02 FB | 	rdlong	arg02, fp
2acf0     14 4E 85 F1 | 	sub	fp, #20
2acf4     08 18 06 F1 | 	add	arg04, #8
2acf8     0C 17 02 FB | 	rdlong	arg03, arg04
2acfc     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2ad00     14 4E 05 F1 | 	add	fp, #20
2ad04     A7 12 02 FB | 	rdlong	arg01, fp
2ad08     1C 12 06 F1 | 	add	arg01, #28
2ad0c     10 4E 85 F1 | 	sub	fp, #16
2ad10     A7 18 02 FB | 	rdlong	arg04, fp
2ad14     0C 18 06 F1 | 	add	arg04, #12
2ad18     0C 15 02 FB | 	rdlong	arg02, arg04
2ad1c     09 15 62 FC | 	wrlong	arg02, arg01
2ad20     10 4E 05 F1 | 	add	fp, #16
2ad24     A7 12 02 FB | 	rdlong	arg01, fp
2ad28     16 12 06 F1 | 	add	arg01, #22
2ad2c     04 4E 85 F1 | 	sub	fp, #4
2ad30     A7 14 02 FB | 	rdlong	arg02, fp
2ad34     09 15 62 FC | 	wrlong	arg02, arg01
2ad38     04 4E 05 F1 | 	add	fp, #4
2ad3c     A7 12 02 FB | 	rdlong	arg01, fp
2ad40     12 12 06 F1 | 	add	arg01, #18
2ad44     09 01 58 FC | 	wrword	#0, arg01
2ad48     08 4E 85 F1 | 	sub	fp, #8
2ad4c     A7 18 02 FB | 	rdlong	arg04, fp
2ad50     03 18 06 F1 | 	add	arg04, #3
2ad54     0C 03 48 FC | 	wrbyte	#1, arg04
2ad58     A7 12 02 FB | 	rdlong	arg01, fp
2ad5c     0C 4E 85 F1 | 	sub	fp, #12
2ad60     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
2ad64     08 4E 05 F1 | 	add	fp, #8
2ad68     A7 FA 61 FC | 	wrlong	result1, fp
2ad6c     04 4E 85 F1 | 	sub	fp, #4
2ad70     A7 18 02 FB | 	rdlong	arg04, fp
2ad74     0C 17 02 F6 | 	mov	arg03, arg04
2ad78     04 4E 85 F1 | 	sub	fp, #4
2ad7c     10 18 06 F1 | 	add	arg04, #16
2ad80     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ad84     BF 18 06 F5 | 	and	arg04, #191
2ad88     10 16 06 F1 | 	add	arg03, #16
2ad8c     0B 19 42 FC | 	wrbyte	arg04, arg03
2ad90                 | LR__4321
2ad90                 | LR__4322
2ad90                 | LR__4323
2ad90                 | ' 					dir = fp->dir_ptr;
2ad90                 | ' 					dir[ 11 ] |=  0x20 ;
2ad90                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2ad90                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2ad90                 | ' 					st_dword(dir +  22 , tm);
2ad90                 | ' 					st_word(dir +  18 , 0);
2ad90                 | ' 					fs->wflag = 1;
2ad90                 | ' 					res = sync_fs(fs);
2ad90                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2ad90                 | ' 				}
2ad90                 | ' 			}
2ad90                 | ' 		}
2ad90                 | ' 	}
2ad90                 | ' 
2ad90                 | ' 	return res ;
2ad90     08 4E 05 F1 | 	add	fp, #8
2ad94     A7 FA 01 FB | 	rdlong	result1, fp
2ad98     08 4E 85 F1 | 	sub	fp, #8
2ad9c                 | LR__4324
2ad9c     A7 F0 03 F6 | 	mov	ptra, fp
2ada0     B2 00 A0 FD | 	call	#popregs_
2ada4                 | _fatfs_cc_f_sync_ret
2ada4     2D 00 64 FD | 	ret
2ada8                 | 
2ada8                 | _fatfs_cc_f_close
2ada8     01 4A 05 F6 | 	mov	COUNT_, #1
2adac     A8 00 A0 FD | 	call	#pushregs_
2adb0     10 F0 07 F1 | 	add	ptra, #16
2adb4     04 4E 05 F1 | 	add	fp, #4
2adb8     A7 12 62 FC | 	wrlong	arg01, fp
2adbc     04 4E 85 F1 | 	sub	fp, #4
2adc0     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2adc4     08 4E 05 F1 | 	add	fp, #8
2adc8     A7 FA 61 FC | 	wrlong	result1, fp
2adcc     08 4E 85 F1 | 	sub	fp, #8
2add0     00 FA 0D F2 | 	cmp	result1, #0 wz
2add4     38 00 90 5D |  if_ne	jmp	#LR__4330
2add8     04 4E 05 F1 | 	add	fp, #4
2addc     A7 12 02 FB | 	rdlong	arg01, fp
2ade0     08 4E 05 F1 | 	add	fp, #8
2ade4     A7 14 02 F6 | 	mov	arg02, fp
2ade8     0C 4E 85 F1 | 	sub	fp, #12
2adec     9C E6 BF FD | 	call	#_fatfs_cc_validate
2adf0     08 4E 05 F1 | 	add	fp, #8
2adf4     A7 FA 61 FC | 	wrlong	result1, fp
2adf8     08 4E 85 F1 | 	sub	fp, #8
2adfc     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae00     04 4E 05 A1 |  if_e	add	fp, #4
2ae04     A7 1E 02 AB |  if_e	rdlong	local01, fp
2ae08     04 4E 85 A1 |  if_e	sub	fp, #4
2ae0c     0F 01 68 AC |  if_e	wrlong	#0, local01
2ae10                 | LR__4330
2ae10                 | ' 
2ae10                 | ' 
2ae10                 | ' 
2ae10                 | ' 
2ae10                 | ' 			fp->obj.fs = 0;
2ae10                 | ' #line 4192 "ff.c"
2ae10                 | ' 		}
2ae10                 | ' 	}
2ae10                 | ' 	return res;
2ae10     08 4E 05 F1 | 	add	fp, #8
2ae14     A7 FA 01 FB | 	rdlong	result1, fp
2ae18     08 4E 85 F1 | 	sub	fp, #8
2ae1c     A7 F0 03 F6 | 	mov	ptra, fp
2ae20     B2 00 A0 FD | 	call	#popregs_
2ae24                 | _fatfs_cc_f_close_ret
2ae24     2D 00 64 FD | 	ret
2ae28                 | 
2ae28                 | _fatfs_cc_f_lseek
2ae28     00 4A 05 F6 | 	mov	COUNT_, #0
2ae2c     A8 00 A0 FD | 	call	#pushregs_
2ae30     24 F0 07 F1 | 	add	ptra, #36
2ae34     04 4E 05 F1 | 	add	fp, #4
2ae38     A7 12 62 FC | 	wrlong	arg01, fp
2ae3c     04 4E 05 F1 | 	add	fp, #4
2ae40     A7 14 62 FC | 	wrlong	arg02, fp
2ae44     04 4E 85 F1 | 	sub	fp, #4
2ae48     A7 12 02 FB | 	rdlong	arg01, fp
2ae4c     0C 4E 05 F1 | 	add	fp, #12
2ae50     A7 14 02 F6 | 	mov	arg02, fp
2ae54     10 4E 85 F1 | 	sub	fp, #16
2ae58     30 E6 BF FD | 	call	#_fatfs_cc_validate
2ae5c     0C 4E 05 F1 | 	add	fp, #12
2ae60     A7 FA 61 FC | 	wrlong	result1, fp
2ae64     0C 4E 85 F1 | 	sub	fp, #12
2ae68     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae6c     1C 00 90 5D |  if_ne	jmp	#LR__4340
2ae70     04 4E 05 F1 | 	add	fp, #4
2ae74     A7 18 02 FB | 	rdlong	arg04, fp
2ae78     11 18 06 F1 | 	add	arg04, #17
2ae7c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ae80     08 4E 05 F1 | 	add	fp, #8
2ae84     A7 18 62 FC | 	wrlong	arg04, fp
2ae88     0C 4E 85 F1 | 	sub	fp, #12
2ae8c                 | LR__4340
2ae8c     0C 4E 05 F1 | 	add	fp, #12
2ae90     A7 18 0A FB | 	rdlong	arg04, fp wz
2ae94     0C 4E 85 F1 | 	sub	fp, #12
2ae98     0C 4E 05 51 |  if_ne	add	fp, #12
2ae9c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2aea0     0C 4E 85 51 |  if_ne	sub	fp, #12
2aea4     40 06 90 5D |  if_ne	jmp	#LR__4363
2aea8     04 4E 05 F1 | 	add	fp, #4
2aeac     A7 18 02 FB | 	rdlong	arg04, fp
2aeb0     04 4E 05 F1 | 	add	fp, #4
2aeb4     A7 16 02 FB | 	rdlong	arg03, fp
2aeb8     08 4E 85 F1 | 	sub	fp, #8
2aebc     0C 18 06 F1 | 	add	arg04, #12
2aec0     0C 19 02 FB | 	rdlong	arg04, arg04
2aec4     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2aec8     3C 00 90 ED |  if_be	jmp	#LR__4341
2aecc     04 4E 05 F1 | 	add	fp, #4
2aed0     A7 16 02 FB | 	rdlong	arg03, fp
2aed4     04 4E 85 F1 | 	sub	fp, #4
2aed8     10 16 06 F1 | 	add	arg03, #16
2aedc     0B 17 C2 FA | 	rdbyte	arg03, arg03
2aee0     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2aee4     02 16 CE F7 | 	test	arg03, #2 wz
2aee8     1C 00 90 5D |  if_ne	jmp	#LR__4341
2aeec     04 4E 05 F1 | 	add	fp, #4
2aef0     A7 16 02 FB | 	rdlong	arg03, fp
2aef4     0C 16 06 F1 | 	add	arg03, #12
2aef8     0B 17 02 FB | 	rdlong	arg03, arg03
2aefc     04 4E 05 F1 | 	add	fp, #4
2af00     A7 16 62 FC | 	wrlong	arg03, fp
2af04     08 4E 85 F1 | 	sub	fp, #8
2af08                 | LR__4341
2af08     04 4E 05 F1 | 	add	fp, #4
2af0c     A7 16 02 FB | 	rdlong	arg03, fp
2af10     14 16 06 F1 | 	add	arg03, #20
2af14     0B 17 02 FB | 	rdlong	arg03, arg03
2af18     1C 4E 05 F1 | 	add	fp, #28
2af1c     A7 16 62 FC | 	wrlong	arg03, fp
2af20     1C 4E 85 F1 | 	sub	fp, #28
2af24     A7 16 02 FB | 	rdlong	arg03, fp
2af28     18 4E 05 F1 | 	add	fp, #24
2af2c     A7 00 68 FC | 	wrlong	#0, fp
2af30     14 16 06 F1 | 	add	arg03, #20
2af34     0B 01 68 FC | 	wrlong	#0, arg03
2af38     14 4E 85 F1 | 	sub	fp, #20
2af3c     A7 16 02 FB | 	rdlong	arg03, fp
2af40     08 4E 85 F1 | 	sub	fp, #8
2af44     01 16 16 F2 | 	cmp	arg03, #1 wc
2af48     E4 03 90 CD |  if_b	jmp	#LR__4357
2af4c     10 4E 05 F1 | 	add	fp, #16
2af50     A7 16 02 FB | 	rdlong	arg03, fp
2af54     0A 16 06 F1 | 	add	arg03, #10
2af58     0B 19 E2 FA | 	rdword	arg04, arg03
2af5c     09 18 66 F0 | 	shl	arg04, #9
2af60     08 4E 05 F1 | 	add	fp, #8
2af64     A7 18 62 FC | 	wrlong	arg04, fp
2af68     08 4E 05 F1 | 	add	fp, #8
2af6c     A7 18 02 FB | 	rdlong	arg04, fp
2af70     20 4E 85 F1 | 	sub	fp, #32
2af74     01 18 16 F2 | 	cmp	arg04, #1 wc
2af78     AC 00 90 CD |  if_b	jmp	#LR__4342
2af7c     08 4E 05 F1 | 	add	fp, #8
2af80     A7 18 02 FB | 	rdlong	arg04, fp
2af84     01 18 86 F1 | 	sub	arg04, #1
2af88     10 4E 05 F1 | 	add	fp, #16
2af8c     A7 16 02 FB | 	rdlong	arg03, fp
2af90     0B 19 12 FD | 	qdiv	arg04, arg03
2af94     08 4E 05 F1 | 	add	fp, #8
2af98     A7 FA 01 FB | 	rdlong	result1, fp
2af9c     01 FA 85 F1 | 	sub	result1, #1
2afa0     18 18 62 FD | 	getqx	arg04
2afa4     0B FB 11 FD | 	qdiv	result1, arg03
2afa8     20 4E 85 F1 | 	sub	fp, #32
2afac     18 16 62 FD | 	getqx	arg03
2afb0     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2afb4     70 00 90 CD |  if_b	jmp	#LR__4342
2afb8     04 4E 05 F1 | 	add	fp, #4
2afbc     A7 16 02 FB | 	rdlong	arg03, fp
2afc0     1C 4E 05 F1 | 	add	fp, #28
2afc4     A7 FA 01 FB | 	rdlong	result1, fp
2afc8     01 FA 85 F1 | 	sub	result1, #1
2afcc     08 4E 85 F1 | 	sub	fp, #8
2afd0     A7 18 02 FB | 	rdlong	arg04, fp
2afd4     01 18 86 F1 | 	sub	arg04, #1
2afd8     0C FB 21 F5 | 	andn	result1, arg04
2afdc     14 16 06 F1 | 	add	arg03, #20
2afe0     0B FB 61 FC | 	wrlong	result1, arg03
2afe4     10 4E 85 F1 | 	sub	fp, #16
2afe8     A7 16 02 FB | 	rdlong	arg03, fp
2afec     04 4E 85 F1 | 	sub	fp, #4
2aff0     A7 18 02 FB | 	rdlong	arg04, fp
2aff4     14 18 06 F1 | 	add	arg04, #20
2aff8     0C 19 02 FB | 	rdlong	arg04, arg04
2affc     0C 17 82 F1 | 	sub	arg03, arg04
2b000     04 4E 05 F1 | 	add	fp, #4
2b004     A7 16 62 FC | 	wrlong	arg03, fp
2b008     04 4E 85 F1 | 	sub	fp, #4
2b00c     A7 16 02 FB | 	rdlong	arg03, fp
2b010     18 16 06 F1 | 	add	arg03, #24
2b014     0B 17 02 FB | 	rdlong	arg03, arg03
2b018     10 4E 05 F1 | 	add	fp, #16
2b01c     A7 16 62 FC | 	wrlong	arg03, fp
2b020     14 4E 85 F1 | 	sub	fp, #20
2b024     D0 00 90 FD | 	jmp	#LR__4346
2b028                 | LR__4342
2b028     04 4E 05 F1 | 	add	fp, #4
2b02c     A7 16 02 FB | 	rdlong	arg03, fp
2b030     08 16 06 F1 | 	add	arg03, #8
2b034     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2b038     10 4E 05 F1 | 	add	fp, #16
2b03c     A7 16 62 FC | 	wrlong	arg03, fp
2b040     14 4E 85 F1 | 	sub	fp, #20
2b044     94 00 90 5D |  if_ne	jmp	#LR__4345
2b048     04 4E 05 F1 | 	add	fp, #4
2b04c     A7 12 02 FB | 	rdlong	arg01, fp
2b050     04 4E 85 F1 | 	sub	fp, #4
2b054     00 14 06 F6 | 	mov	arg02, #0
2b058     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
2b05c     14 4E 05 F1 | 	add	fp, #20
2b060     A7 FA 61 FC | 	wrlong	result1, fp
2b064     14 4E 85 F1 | 	sub	fp, #20
2b068     01 FA 0D F2 | 	cmp	result1, #1 wz
2b06c     1C 00 90 5D |  if_ne	jmp	#LR__4343
2b070     04 4E 05 F1 | 	add	fp, #4
2b074     A7 16 02 FB | 	rdlong	arg03, fp
2b078     04 4E 85 F1 | 	sub	fp, #4
2b07c     11 16 06 F1 | 	add	arg03, #17
2b080     0B 05 48 FC | 	wrbyte	#2, arg03
2b084     02 FA 05 F6 | 	mov	result1, #2
2b088     5C 04 90 FD | 	jmp	#LR__4363
2b08c                 | LR__4343
2b08c     14 4E 05 F1 | 	add	fp, #20
2b090     A7 FA 01 FB | 	rdlong	result1, fp
2b094     14 4E 85 F1 | 	sub	fp, #20
2b098     FF FF 7F FF 
2b09c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2b0a0     1C 00 90 5D |  if_ne	jmp	#LR__4344
2b0a4     04 4E 05 F1 | 	add	fp, #4
2b0a8     A7 16 02 FB | 	rdlong	arg03, fp
2b0ac     04 4E 85 F1 | 	sub	fp, #4
2b0b0     11 16 06 F1 | 	add	arg03, #17
2b0b4     0B 03 48 FC | 	wrbyte	#1, arg03
2b0b8     01 FA 05 F6 | 	mov	result1, #1
2b0bc     28 04 90 FD | 	jmp	#LR__4363
2b0c0                 | LR__4344
2b0c0     04 4E 05 F1 | 	add	fp, #4
2b0c4     A7 16 02 FB | 	rdlong	arg03, fp
2b0c8     10 4E 05 F1 | 	add	fp, #16
2b0cc     A7 18 02 FB | 	rdlong	arg04, fp
2b0d0     14 4E 85 F1 | 	sub	fp, #20
2b0d4     08 16 06 F1 | 	add	arg03, #8
2b0d8     0B 19 62 FC | 	wrlong	arg04, arg03
2b0dc                 | LR__4345
2b0dc     04 4E 05 F1 | 	add	fp, #4
2b0e0     A7 16 02 FB | 	rdlong	arg03, fp
2b0e4     10 4E 05 F1 | 	add	fp, #16
2b0e8     A7 18 02 FB | 	rdlong	arg04, fp
2b0ec     14 4E 85 F1 | 	sub	fp, #20
2b0f0     18 16 06 F1 | 	add	arg03, #24
2b0f4     0B 19 62 FC | 	wrlong	arg04, arg03
2b0f8                 | LR__4346
2b0f8     14 4E 05 F1 | 	add	fp, #20
2b0fc     A7 16 0A FB | 	rdlong	arg03, fp wz
2b100     14 4E 85 F1 | 	sub	fp, #20
2b104     28 02 90 AD |  if_e	jmp	#LR__4356
2b108                 | ' 				while (ofs > bcs) {
2b108                 | LR__4347
2b108     08 4E 05 F1 | 	add	fp, #8
2b10c     A7 18 02 FB | 	rdlong	arg04, fp
2b110     10 4E 05 F1 | 	add	fp, #16
2b114     A7 16 02 FB | 	rdlong	arg03, fp
2b118     18 4E 85 F1 | 	sub	fp, #24
2b11c     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2b120     68 01 90 ED |  if_be	jmp	#LR__4353
2b124     08 4E 05 F1 | 	add	fp, #8
2b128     A7 18 02 FB | 	rdlong	arg04, fp
2b12c     10 4E 05 F1 | 	add	fp, #16
2b130     A7 16 02 FB | 	rdlong	arg03, fp
2b134     0B 19 82 F1 | 	sub	arg04, arg03
2b138     10 4E 85 F1 | 	sub	fp, #16
2b13c     A7 18 62 FC | 	wrlong	arg04, fp
2b140     04 4E 85 F1 | 	sub	fp, #4
2b144     A7 18 02 FB | 	rdlong	arg04, fp
2b148     0C FB 01 F6 | 	mov	result1, arg04
2b14c     14 18 06 F1 | 	add	arg04, #20
2b150     0C 19 02 FB | 	rdlong	arg04, arg04
2b154     14 4E 05 F1 | 	add	fp, #20
2b158     A7 16 02 FB | 	rdlong	arg03, fp
2b15c     0B 19 02 F1 | 	add	arg04, arg03
2b160     14 FA 05 F1 | 	add	result1, #20
2b164     FD 18 62 FC | 	wrlong	arg04, result1
2b168     14 4E 85 F1 | 	sub	fp, #20
2b16c     A7 16 02 FB | 	rdlong	arg03, fp
2b170     04 4E 85 F1 | 	sub	fp, #4
2b174     10 16 06 F1 | 	add	arg03, #16
2b178     0B 17 C2 FA | 	rdbyte	arg03, arg03
2b17c     02 16 CE F7 | 	test	arg03, #2 wz
2b180     3C 00 90 AD |  if_e	jmp	#LR__4348
2b184     04 4E 05 F1 | 	add	fp, #4
2b188     A7 12 02 FB | 	rdlong	arg01, fp
2b18c     10 4E 05 F1 | 	add	fp, #16
2b190     A7 14 02 FB | 	rdlong	arg02, fp
2b194     14 4E 85 F1 | 	sub	fp, #20
2b198     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
2b19c     14 4E 05 F1 | 	add	fp, #20
2b1a0     A7 FA 61 FC | 	wrlong	result1, fp
2b1a4     00 FA 4D F2 | 	cmps	result1, #0 wz
2b1a8     14 4E 85 F1 | 	sub	fp, #20
2b1ac     08 4E 05 A1 |  if_e	add	fp, #8
2b1b0     A7 00 68 AC |  if_e	wrlong	#0, fp
2b1b4     08 4E 85 A1 |  if_e	sub	fp, #8
2b1b8                 | ' 							ofs = 0; break;
2b1b8     D0 00 90 AD |  if_e	jmp	#LR__4353
2b1bc     24 00 90 FD | 	jmp	#LR__4349
2b1c0                 | LR__4348
2b1c0     04 4E 05 F1 | 	add	fp, #4
2b1c4     A7 12 02 FB | 	rdlong	arg01, fp
2b1c8     10 4E 05 F1 | 	add	fp, #16
2b1cc     A7 14 02 FB | 	rdlong	arg02, fp
2b1d0     14 4E 85 F1 | 	sub	fp, #20
2b1d4     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2b1d8     14 4E 05 F1 | 	add	fp, #20
2b1dc     A7 FA 61 FC | 	wrlong	result1, fp
2b1e0     14 4E 85 F1 | 	sub	fp, #20
2b1e4                 | LR__4349
2b1e4     14 4E 05 F1 | 	add	fp, #20
2b1e8     A7 16 02 FB | 	rdlong	arg03, fp
2b1ec     14 4E 85 F1 | 	sub	fp, #20
2b1f0     FF FF 7F FF 
2b1f4     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2b1f8     1C 00 90 5D |  if_ne	jmp	#LR__4350
2b1fc     04 4E 05 F1 | 	add	fp, #4
2b200     A7 16 02 FB | 	rdlong	arg03, fp
2b204     04 4E 85 F1 | 	sub	fp, #4
2b208     11 16 06 F1 | 	add	arg03, #17
2b20c     0B 03 48 FC | 	wrbyte	#1, arg03
2b210     01 FA 05 F6 | 	mov	result1, #1
2b214     D0 02 90 FD | 	jmp	#LR__4363
2b218                 | LR__4350
2b218     14 4E 05 F1 | 	add	fp, #20
2b21c     A7 16 02 FB | 	rdlong	arg03, fp
2b220     14 4E 85 F1 | 	sub	fp, #20
2b224     02 16 16 F2 | 	cmp	arg03, #2 wc
2b228     24 00 90 CD |  if_b	jmp	#LR__4351
2b22c     10 4E 05 F1 | 	add	fp, #16
2b230     A7 18 02 FB | 	rdlong	arg04, fp
2b234     04 4E 05 F1 | 	add	fp, #4
2b238     A7 16 02 FB | 	rdlong	arg03, fp
2b23c     14 4E 85 F1 | 	sub	fp, #20
2b240     18 18 06 F1 | 	add	arg04, #24
2b244     0C 19 02 FB | 	rdlong	arg04, arg04
2b248     0C 17 12 F2 | 	cmp	arg03, arg04 wc
2b24c     1C 00 90 CD |  if_b	jmp	#LR__4352
2b250                 | LR__4351
2b250     04 4E 05 F1 | 	add	fp, #4
2b254     A7 16 02 FB | 	rdlong	arg03, fp
2b258     04 4E 85 F1 | 	sub	fp, #4
2b25c     11 16 06 F1 | 	add	arg03, #17
2b260     0B 05 48 FC | 	wrbyte	#2, arg03
2b264     02 FA 05 F6 | 	mov	result1, #2
2b268     7C 02 90 FD | 	jmp	#LR__4363
2b26c                 | LR__4352
2b26c     04 4E 05 F1 | 	add	fp, #4
2b270     A7 18 02 FB | 	rdlong	arg04, fp
2b274     10 4E 05 F1 | 	add	fp, #16
2b278     A7 16 02 FB | 	rdlong	arg03, fp
2b27c     14 4E 85 F1 | 	sub	fp, #20
2b280     18 18 06 F1 | 	add	arg04, #24
2b284     0C 17 62 FC | 	wrlong	arg03, arg04
2b288     7C FE 9F FD | 	jmp	#LR__4347
2b28c                 | LR__4353
2b28c     04 4E 05 F1 | 	add	fp, #4
2b290     A7 16 02 FB | 	rdlong	arg03, fp
2b294     0B 13 02 F6 | 	mov	arg01, arg03
2b298     14 16 06 F1 | 	add	arg03, #20
2b29c     0B 15 02 FB | 	rdlong	arg02, arg03
2b2a0     04 4E 05 F1 | 	add	fp, #4
2b2a4     A7 16 02 FB | 	rdlong	arg03, fp
2b2a8     0B 15 02 F1 | 	add	arg02, arg03
2b2ac     14 12 06 F1 | 	add	arg01, #20
2b2b0     09 15 62 FC | 	wrlong	arg02, arg01
2b2b4     A7 16 02 FB | 	rdlong	arg03, fp
2b2b8     08 4E 85 F1 | 	sub	fp, #8
2b2bc     FF 17 CE F7 | 	test	arg03, #511 wz
2b2c0     6C 00 90 AD |  if_e	jmp	#LR__4355
2b2c4     10 4E 05 F1 | 	add	fp, #16
2b2c8     A7 12 02 FB | 	rdlong	arg01, fp
2b2cc     04 4E 05 F1 | 	add	fp, #4
2b2d0     A7 14 02 FB | 	rdlong	arg02, fp
2b2d4     14 4E 85 F1 | 	sub	fp, #20
2b2d8     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2b2dc     1C 4E 05 F1 | 	add	fp, #28
2b2e0     A7 FA 61 FC | 	wrlong	result1, fp
2b2e4     1C 4E 85 F1 | 	sub	fp, #28
2b2e8     00 FA 0D F2 | 	cmp	result1, #0 wz
2b2ec     1C 00 90 5D |  if_ne	jmp	#LR__4354
2b2f0     04 4E 05 F1 | 	add	fp, #4
2b2f4     A7 16 02 FB | 	rdlong	arg03, fp
2b2f8     04 4E 85 F1 | 	sub	fp, #4
2b2fc     11 16 06 F1 | 	add	arg03, #17
2b300     0B 05 48 FC | 	wrbyte	#2, arg03
2b304     02 FA 05 F6 | 	mov	result1, #2
2b308     DC 01 90 FD | 	jmp	#LR__4363
2b30c                 | LR__4354
2b30c     1C 4E 05 F1 | 	add	fp, #28
2b310     A7 18 02 FB | 	rdlong	arg04, fp
2b314     14 4E 85 F1 | 	sub	fp, #20
2b318     A7 16 02 FB | 	rdlong	arg03, fp
2b31c     09 16 46 F0 | 	shr	arg03, #9
2b320     0B 19 02 F1 | 	add	arg04, arg03
2b324     14 4E 05 F1 | 	add	fp, #20
2b328     A7 18 62 FC | 	wrlong	arg04, fp
2b32c     1C 4E 85 F1 | 	sub	fp, #28
2b330                 | LR__4355
2b330                 | LR__4356
2b330                 | LR__4357
2b330     04 4E 05 F1 | 	add	fp, #4
2b334     A7 18 02 FB | 	rdlong	arg04, fp
2b338     0C 17 02 F6 | 	mov	arg03, arg04
2b33c     04 4E 85 F1 | 	sub	fp, #4
2b340     14 16 06 F1 | 	add	arg03, #20
2b344     0B 17 02 FB | 	rdlong	arg03, arg03
2b348     0C 18 06 F1 | 	add	arg04, #12
2b34c     0C 19 02 FB | 	rdlong	arg04, arg04
2b350     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2b354     3C 00 90 ED |  if_be	jmp	#LR__4358
2b358     04 4E 05 F1 | 	add	fp, #4
2b35c     A7 18 02 FB | 	rdlong	arg04, fp
2b360     0C 17 02 F6 | 	mov	arg03, arg04
2b364     14 18 06 F1 | 	add	arg04, #20
2b368     0C 19 02 FB | 	rdlong	arg04, arg04
2b36c     0C 16 06 F1 | 	add	arg03, #12
2b370     0B 19 62 FC | 	wrlong	arg04, arg03
2b374     A7 18 02 FB | 	rdlong	arg04, fp
2b378     0C 17 02 F6 | 	mov	arg03, arg04
2b37c     04 4E 85 F1 | 	sub	fp, #4
2b380     10 18 06 F1 | 	add	arg04, #16
2b384     0C 19 C2 FA | 	rdbyte	arg04, arg04
2b388     40 18 46 F5 | 	or	arg04, #64
2b38c     10 16 06 F1 | 	add	arg03, #16
2b390     0B 19 42 FC | 	wrbyte	arg04, arg03
2b394                 | LR__4358
2b394     04 4E 05 F1 | 	add	fp, #4
2b398     A7 16 02 FB | 	rdlong	arg03, fp
2b39c     04 4E 85 F1 | 	sub	fp, #4
2b3a0     14 16 06 F1 | 	add	arg03, #20
2b3a4     0B 17 02 FB | 	rdlong	arg03, arg03
2b3a8     FF 17 CE F7 | 	test	arg03, #511 wz
2b3ac     2C 01 90 AD |  if_e	jmp	#LR__4362
2b3b0     04 4E 05 F1 | 	add	fp, #4
2b3b4     A7 18 02 FB | 	rdlong	arg04, fp
2b3b8     18 4E 05 F1 | 	add	fp, #24
2b3bc     A7 16 02 FB | 	rdlong	arg03, fp
2b3c0     1C 4E 85 F1 | 	sub	fp, #28
2b3c4     1C 18 06 F1 | 	add	arg04, #28
2b3c8     0C 19 02 FB | 	rdlong	arg04, arg04
2b3cc     0C 17 0A F2 | 	cmp	arg03, arg04 wz
2b3d0     08 01 90 AD |  if_e	jmp	#LR__4362
2b3d4     04 4E 05 F1 | 	add	fp, #4
2b3d8     A7 16 02 FB | 	rdlong	arg03, fp
2b3dc     04 4E 85 F1 | 	sub	fp, #4
2b3e0     10 16 06 F1 | 	add	arg03, #16
2b3e4     0B 17 C2 FA | 	rdbyte	arg03, arg03
2b3e8     80 16 CE F7 | 	test	arg03, #128 wz
2b3ec     7C 00 90 AD |  if_e	jmp	#LR__4360
2b3f0     10 4E 05 F1 | 	add	fp, #16
2b3f4     A7 16 02 FB | 	rdlong	arg03, fp
2b3f8     01 16 06 F1 | 	add	arg03, #1
2b3fc     0B 13 C2 FA | 	rdbyte	arg01, arg03
2b400     0C 4E 85 F1 | 	sub	fp, #12
2b404     A7 16 02 FB | 	rdlong	arg03, fp
2b408     0B 15 02 F6 | 	mov	arg02, arg03
2b40c     28 14 06 F1 | 	add	arg02, #40
2b410     04 4E 85 F1 | 	sub	fp, #4
2b414     1C 16 06 F1 | 	add	arg03, #28
2b418     0B 17 02 FB | 	rdlong	arg03, arg03
2b41c     01 18 06 F6 | 	mov	arg04, #1
2b420     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2b424     00 FA 0D F2 | 	cmp	result1, #0 wz
2b428     1C 00 90 AD |  if_e	jmp	#LR__4359
2b42c     04 4E 05 F1 | 	add	fp, #4
2b430     A7 16 02 FB | 	rdlong	arg03, fp
2b434     04 4E 85 F1 | 	sub	fp, #4
2b438     11 16 06 F1 | 	add	arg03, #17
2b43c     0B 03 48 FC | 	wrbyte	#1, arg03
2b440     01 FA 05 F6 | 	mov	result1, #1
2b444     A0 00 90 FD | 	jmp	#LR__4363
2b448                 | LR__4359
2b448     04 4E 05 F1 | 	add	fp, #4
2b44c     A7 18 02 FB | 	rdlong	arg04, fp
2b450     0C 17 02 F6 | 	mov	arg03, arg04
2b454     04 4E 85 F1 | 	sub	fp, #4
2b458     10 18 06 F1 | 	add	arg04, #16
2b45c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2b460     7F 18 06 F5 | 	and	arg04, #127
2b464     10 16 06 F1 | 	add	arg03, #16
2b468     0B 19 42 FC | 	wrbyte	arg04, arg03
2b46c                 | LR__4360
2b46c     10 4E 05 F1 | 	add	fp, #16
2b470     A7 16 02 FB | 	rdlong	arg03, fp
2b474     01 16 06 F1 | 	add	arg03, #1
2b478     0B 13 C2 FA | 	rdbyte	arg01, arg03
2b47c     0C 4E 85 F1 | 	sub	fp, #12
2b480     A7 14 02 FB | 	rdlong	arg02, fp
2b484     28 14 06 F1 | 	add	arg02, #40
2b488     18 4E 05 F1 | 	add	fp, #24
2b48c     A7 16 02 FB | 	rdlong	arg03, fp
2b490     1C 4E 85 F1 | 	sub	fp, #28
2b494     01 18 06 F6 | 	mov	arg04, #1
2b498     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
2b49c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b4a0     1C 00 90 AD |  if_e	jmp	#LR__4361
2b4a4     04 4E 05 F1 | 	add	fp, #4
2b4a8     A7 16 02 FB | 	rdlong	arg03, fp
2b4ac     04 4E 85 F1 | 	sub	fp, #4
2b4b0     11 16 06 F1 | 	add	arg03, #17
2b4b4     0B 03 48 FC | 	wrbyte	#1, arg03
2b4b8     01 FA 05 F6 | 	mov	result1, #1
2b4bc     28 00 90 FD | 	jmp	#LR__4363
2b4c0                 | LR__4361
2b4c0     04 4E 05 F1 | 	add	fp, #4
2b4c4     A7 18 02 FB | 	rdlong	arg04, fp
2b4c8     18 4E 05 F1 | 	add	fp, #24
2b4cc     A7 16 02 FB | 	rdlong	arg03, fp
2b4d0     1C 4E 85 F1 | 	sub	fp, #28
2b4d4     1C 18 06 F1 | 	add	arg04, #28
2b4d8     0C 17 62 FC | 	wrlong	arg03, arg04
2b4dc                 | LR__4362
2b4dc                 | ' 
2b4dc                 | ' 			fp->sect = nsect;
2b4dc                 | ' 		}
2b4dc                 | ' 	}
2b4dc                 | ' 
2b4dc                 | ' 	return res ;
2b4dc     0C 4E 05 F1 | 	add	fp, #12
2b4e0     A7 FA 01 FB | 	rdlong	result1, fp
2b4e4     0C 4E 85 F1 | 	sub	fp, #12
2b4e8                 | LR__4363
2b4e8     A7 F0 03 F6 | 	mov	ptra, fp
2b4ec     B2 00 A0 FD | 	call	#popregs_
2b4f0                 | _fatfs_cc_f_lseek_ret
2b4f0     2D 00 64 FD | 	ret
2b4f4                 | 
2b4f4                 | _fatfs_cc_f_opendir
2b4f4     01 4A 05 F6 | 	mov	COUNT_, #1
2b4f8     A8 00 A0 FD | 	call	#pushregs_
2b4fc     14 F0 07 F1 | 	add	ptra, #20
2b500     04 4E 05 F1 | 	add	fp, #4
2b504     A7 12 62 FC | 	wrlong	arg01, fp
2b508     04 4E 05 F1 | 	add	fp, #4
2b50c     A7 14 62 FC | 	wrlong	arg02, fp
2b510     04 4E 85 F1 | 	sub	fp, #4
2b514     A7 16 0A FB | 	rdlong	arg03, fp wz
2b518     04 4E 85 F1 | 	sub	fp, #4
2b51c     09 FA 05 A6 |  if_e	mov	result1, #9
2b520     78 01 90 AD |  if_e	jmp	#LR__4376
2b524     08 4E 05 F1 | 	add	fp, #8
2b528     A7 12 02 F6 | 	mov	arg01, fp
2b52c     08 4E 05 F1 | 	add	fp, #8
2b530     A7 14 02 F6 | 	mov	arg02, fp
2b534     10 4E 85 F1 | 	sub	fp, #16
2b538     00 16 06 F6 | 	mov	arg03, #0
2b53c     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2b540     0C 4E 05 F1 | 	add	fp, #12
2b544     A7 FA 61 FC | 	wrlong	result1, fp
2b548     0C 4E 85 F1 | 	sub	fp, #12
2b54c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b550     20 01 90 5D |  if_ne	jmp	#LR__4375
2b554     04 4E 05 F1 | 	add	fp, #4
2b558     A7 16 02 FB | 	rdlong	arg03, fp
2b55c     0C 4E 05 F1 | 	add	fp, #12
2b560     A7 FA 01 FB | 	rdlong	result1, fp
2b564     0B FB 61 FC | 	wrlong	result1, arg03
2b568     0C 4E 85 F1 | 	sub	fp, #12
2b56c     A7 12 02 FB | 	rdlong	arg01, fp
2b570     04 4E 05 F1 | 	add	fp, #4
2b574     A7 14 02 FB | 	rdlong	arg02, fp
2b578     08 4E 85 F1 | 	sub	fp, #8
2b57c     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
2b580     0C 4E 05 F1 | 	add	fp, #12
2b584     A7 FA 61 FC | 	wrlong	result1, fp
2b588     0C 4E 85 F1 | 	sub	fp, #12
2b58c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b590     C4 00 90 5D |  if_ne	jmp	#LR__4374
2b594     04 4E 05 F1 | 	add	fp, #4
2b598     A7 16 02 FB | 	rdlong	arg03, fp
2b59c     04 4E 85 F1 | 	sub	fp, #4
2b5a0     2B 16 06 F1 | 	add	arg03, #43
2b5a4     0B 17 C2 FA | 	rdbyte	arg03, arg03
2b5a8     80 16 CE F7 | 	test	arg03, #128 wz
2b5ac     58 00 90 5D |  if_ne	jmp	#LR__4372
2b5b0     04 4E 05 F1 | 	add	fp, #4
2b5b4     A7 16 02 FB | 	rdlong	arg03, fp
2b5b8     04 4E 85 F1 | 	sub	fp, #4
2b5bc     06 16 06 F1 | 	add	arg03, #6
2b5c0     0B 17 C2 FA | 	rdbyte	arg03, arg03
2b5c4     10 16 CE F7 | 	test	arg03, #16 wz
2b5c8     30 00 90 AD |  if_e	jmp	#LR__4370
2b5cc     04 4E 05 F1 | 	add	fp, #4
2b5d0     A7 16 02 FB | 	rdlong	arg03, fp
2b5d4     0B 1F 02 F6 | 	mov	local01, arg03
2b5d8     0C 4E 05 F1 | 	add	fp, #12
2b5dc     A7 12 02 FB | 	rdlong	arg01, fp
2b5e0     10 4E 85 F1 | 	sub	fp, #16
2b5e4     1C 16 06 F1 | 	add	arg03, #28
2b5e8     0B 15 02 FB | 	rdlong	arg02, arg03
2b5ec     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
2b5f0     08 1E 06 F1 | 	add	local01, #8
2b5f4     0F FB 61 FC | 	wrlong	result1, local01
2b5f8     0C 00 90 FD | 	jmp	#LR__4371
2b5fc                 | LR__4370
2b5fc     0C 4E 05 F1 | 	add	fp, #12
2b600     A7 0A 68 FC | 	wrlong	#5, fp
2b604     0C 4E 85 F1 | 	sub	fp, #12
2b608                 | LR__4371
2b608                 | LR__4372
2b608     0C 4E 05 F1 | 	add	fp, #12
2b60c     A7 1E 0A FB | 	rdlong	local01, fp wz
2b610     0C 4E 85 F1 | 	sub	fp, #12
2b614     40 00 90 5D |  if_ne	jmp	#LR__4373
2b618     04 4E 05 F1 | 	add	fp, #4
2b61c     A7 1E 02 FB | 	rdlong	local01, fp
2b620     0C 4E 05 F1 | 	add	fp, #12
2b624     A7 16 02 FB | 	rdlong	arg03, fp
2b628     06 16 06 F1 | 	add	arg03, #6
2b62c     0B 17 E2 FA | 	rdword	arg03, arg03
2b630     04 1E 06 F1 | 	add	local01, #4
2b634     0F 17 52 FC | 	wrword	arg03, local01
2b638     0C 4E 85 F1 | 	sub	fp, #12
2b63c     A7 12 02 FB | 	rdlong	arg01, fp
2b640     04 4E 85 F1 | 	sub	fp, #4
2b644     00 14 06 F6 | 	mov	arg02, #0
2b648     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
2b64c     0C 4E 05 F1 | 	add	fp, #12
2b650     A7 FA 61 FC | 	wrlong	result1, fp
2b654     0C 4E 85 F1 | 	sub	fp, #12
2b658                 | LR__4373
2b658                 | LR__4374
2b658     0C 4E 05 F1 | 	add	fp, #12
2b65c     A7 1E 02 FB | 	rdlong	local01, fp
2b660     0C 4E 85 F1 | 	sub	fp, #12
2b664     04 1E 0E F2 | 	cmp	local01, #4 wz
2b668     0C 4E 05 A1 |  if_e	add	fp, #12
2b66c     A7 0A 68 AC |  if_e	wrlong	#5, fp
2b670     0C 4E 85 A1 |  if_e	sub	fp, #12
2b674                 | LR__4375
2b674     0C 4E 05 F1 | 	add	fp, #12
2b678     A7 1E 0A FB | 	rdlong	local01, fp wz
2b67c     0C 4E 85 F1 | 	sub	fp, #12
2b680     04 4E 05 51 |  if_ne	add	fp, #4
2b684     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2b688     04 4E 85 51 |  if_ne	sub	fp, #4
2b68c     0F 01 68 5C |  if_ne	wrlong	#0, local01
2b690                 | ' 
2b690                 | ' 	return res ;
2b690     0C 4E 05 F1 | 	add	fp, #12
2b694     A7 FA 01 FB | 	rdlong	result1, fp
2b698     0C 4E 85 F1 | 	sub	fp, #12
2b69c                 | LR__4376
2b69c     A7 F0 03 F6 | 	mov	ptra, fp
2b6a0     B2 00 A0 FD | 	call	#popregs_
2b6a4                 | _fatfs_cc_f_opendir_ret
2b6a4     2D 00 64 FD | 	ret
2b6a8                 | 
2b6a8                 | _fatfs_cc_f_closedir
2b6a8     00 4A 05 F6 | 	mov	COUNT_, #0
2b6ac     A8 00 A0 FD | 	call	#pushregs_
2b6b0     10 F0 07 F1 | 	add	ptra, #16
2b6b4     04 4E 05 F1 | 	add	fp, #4
2b6b8     A7 12 62 FC | 	wrlong	arg01, fp
2b6bc     08 4E 05 F1 | 	add	fp, #8
2b6c0     A7 14 02 F6 | 	mov	arg02, fp
2b6c4     0C 4E 85 F1 | 	sub	fp, #12
2b6c8     C0 DD BF FD | 	call	#_fatfs_cc_validate
2b6cc     08 4E 05 F1 | 	add	fp, #8
2b6d0     A7 FA 61 FC | 	wrlong	result1, fp
2b6d4     08 4E 85 F1 | 	sub	fp, #8
2b6d8     00 FA 0D F2 | 	cmp	result1, #0 wz
2b6dc     04 4E 05 A1 |  if_e	add	fp, #4
2b6e0     A7 FA 01 AB |  if_e	rdlong	result1, fp
2b6e4     04 4E 85 A1 |  if_e	sub	fp, #4
2b6e8     FD 00 68 AC |  if_e	wrlong	#0, result1
2b6ec                 | ' 
2b6ec                 | ' 
2b6ec                 | ' 
2b6ec                 | ' 
2b6ec                 | ' 		dp->obj.fs = 0;
2b6ec                 | ' #line 4633 "ff.c"
2b6ec                 | ' 	}
2b6ec                 | ' 	return res;
2b6ec     08 4E 05 F1 | 	add	fp, #8
2b6f0     A7 FA 01 FB | 	rdlong	result1, fp
2b6f4     08 4E 85 F1 | 	sub	fp, #8
2b6f8     A7 F0 03 F6 | 	mov	ptra, fp
2b6fc     B2 00 A0 FD | 	call	#popregs_
2b700                 | _fatfs_cc_f_closedir_ret
2b700     2D 00 64 FD | 	ret
2b704                 | 
2b704                 | _fatfs_cc_f_readdir
2b704     00 4A 05 F6 | 	mov	COUNT_, #0
2b708     A8 00 A0 FD | 	call	#pushregs_
2b70c     14 F0 07 F1 | 	add	ptra, #20
2b710     04 4E 05 F1 | 	add	fp, #4
2b714     A7 12 62 FC | 	wrlong	arg01, fp
2b718     04 4E 05 F1 | 	add	fp, #4
2b71c     A7 14 62 FC | 	wrlong	arg02, fp
2b720     04 4E 85 F1 | 	sub	fp, #4
2b724     A7 12 02 FB | 	rdlong	arg01, fp
2b728     0C 4E 05 F1 | 	add	fp, #12
2b72c     A7 14 02 F6 | 	mov	arg02, fp
2b730     10 4E 85 F1 | 	sub	fp, #16
2b734     54 DD BF FD | 	call	#_fatfs_cc_validate
2b738     0C 4E 05 F1 | 	add	fp, #12
2b73c     A7 FA 61 FC | 	wrlong	result1, fp
2b740     0C 4E 85 F1 | 	sub	fp, #12
2b744     00 FA 0D F2 | 	cmp	result1, #0 wz
2b748     BC 00 90 5D |  if_ne	jmp	#LR__4383
2b74c     08 4E 05 F1 | 	add	fp, #8
2b750     A7 FA 09 FB | 	rdlong	result1, fp wz
2b754     08 4E 85 F1 | 	sub	fp, #8
2b758     24 00 90 5D |  if_ne	jmp	#LR__4380
2b75c     04 4E 05 F1 | 	add	fp, #4
2b760     A7 12 02 FB | 	rdlong	arg01, fp
2b764     04 4E 85 F1 | 	sub	fp, #4
2b768     00 14 06 F6 | 	mov	arg02, #0
2b76c     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2b770     0C 4E 05 F1 | 	add	fp, #12
2b774     A7 FA 61 FC | 	wrlong	result1, fp
2b778     0C 4E 85 F1 | 	sub	fp, #12
2b77c     88 00 90 FD | 	jmp	#LR__4382
2b780                 | LR__4380
2b780     04 4E 05 F1 | 	add	fp, #4
2b784     A7 12 02 FB | 	rdlong	arg01, fp
2b788     04 4E 85 F1 | 	sub	fp, #4
2b78c     00 14 06 F6 | 	mov	arg02, #0
2b790     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2b794     0C 4E 05 F1 | 	add	fp, #12
2b798     A7 FA 61 FC | 	wrlong	result1, fp
2b79c     0C 4E 85 F1 | 	sub	fp, #12
2b7a0     04 FA 0D F2 | 	cmp	result1, #4 wz
2b7a4     0C 4E 05 A1 |  if_e	add	fp, #12
2b7a8     A7 00 68 AC |  if_e	wrlong	#0, fp
2b7ac     0C 4E 85 A1 |  if_e	sub	fp, #12
2b7b0     0C 4E 05 F1 | 	add	fp, #12
2b7b4     A7 FA 09 FB | 	rdlong	result1, fp wz
2b7b8     0C 4E 85 F1 | 	sub	fp, #12
2b7bc     48 00 90 5D |  if_ne	jmp	#LR__4381
2b7c0     04 4E 05 F1 | 	add	fp, #4
2b7c4     A7 12 02 FB | 	rdlong	arg01, fp
2b7c8     04 4E 05 F1 | 	add	fp, #4
2b7cc     A7 14 02 FB | 	rdlong	arg02, fp
2b7d0     08 4E 85 F1 | 	sub	fp, #8
2b7d4     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2b7d8     04 4E 05 F1 | 	add	fp, #4
2b7dc     A7 12 02 FB | 	rdlong	arg01, fp
2b7e0     04 4E 85 F1 | 	sub	fp, #4
2b7e4     00 14 06 F6 | 	mov	arg02, #0
2b7e8     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2b7ec     0C 4E 05 F1 | 	add	fp, #12
2b7f0     A7 FA 61 FC | 	wrlong	result1, fp
2b7f4     0C 4E 85 F1 | 	sub	fp, #12
2b7f8     04 FA 0D F2 | 	cmp	result1, #4 wz
2b7fc     0C 4E 05 A1 |  if_e	add	fp, #12
2b800     A7 00 68 AC |  if_e	wrlong	#0, fp
2b804     0C 4E 85 A1 |  if_e	sub	fp, #12
2b808                 | LR__4381
2b808                 | LR__4382
2b808                 | LR__4383
2b808                 | ' 			}
2b808                 | ' 			;
2b808                 | ' 		}
2b808                 | ' 	}
2b808                 | ' 	return res ;
2b808     0C 4E 05 F1 | 	add	fp, #12
2b80c     A7 FA 01 FB | 	rdlong	result1, fp
2b810     0C 4E 85 F1 | 	sub	fp, #12
2b814     A7 F0 03 F6 | 	mov	ptra, fp
2b818     B2 00 A0 FD | 	call	#popregs_
2b81c                 | _fatfs_cc_f_readdir_ret
2b81c     2D 00 64 FD | 	ret
2b820                 | 
2b820                 | _fatfs_cc_f_stat
2b820     00 4A 05 F6 | 	mov	COUNT_, #0
2b824     A8 00 A0 FD | 	call	#pushregs_
2b828     40 F0 07 F1 | 	add	ptra, #64
2b82c     04 4E 05 F1 | 	add	fp, #4
2b830     A7 12 62 FC | 	wrlong	arg01, fp
2b834     04 4E 05 F1 | 	add	fp, #4
2b838     A7 14 62 FC | 	wrlong	arg02, fp
2b83c     04 4E 85 F1 | 	sub	fp, #4
2b840     A7 12 02 F6 | 	mov	arg01, fp
2b844     0C 4E 05 F1 | 	add	fp, #12
2b848     A7 14 02 F6 | 	mov	arg02, fp
2b84c     10 4E 85 F1 | 	sub	fp, #16
2b850     00 16 06 F6 | 	mov	arg03, #0
2b854     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2b858     0C 4E 05 F1 | 	add	fp, #12
2b85c     A7 FA 61 FC | 	wrlong	result1, fp
2b860     0C 4E 85 F1 | 	sub	fp, #12
2b864     00 FA 0D F2 | 	cmp	result1, #0 wz
2b868     74 00 90 5D |  if_ne	jmp	#LR__4393
2b86c     10 4E 05 F1 | 	add	fp, #16
2b870     A7 12 02 F6 | 	mov	arg01, fp
2b874     0C 4E 85 F1 | 	sub	fp, #12
2b878     A7 14 02 FB | 	rdlong	arg02, fp
2b87c     04 4E 85 F1 | 	sub	fp, #4
2b880     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2b884     0C 4E 05 F1 | 	add	fp, #12
2b888     A7 FA 61 FC | 	wrlong	result1, fp
2b88c     0C 4E 85 F1 | 	sub	fp, #12
2b890     00 FA 0D F2 | 	cmp	result1, #0 wz
2b894     48 00 90 5D |  if_ne	jmp	#LR__4392
2b898     3B 4E 05 F1 | 	add	fp, #59
2b89c     A7 FA C1 FA | 	rdbyte	result1, fp
2b8a0     3B 4E 85 F1 | 	sub	fp, #59
2b8a4     80 FA CD F7 | 	test	result1, #128 wz
2b8a8     0C 4E 05 51 |  if_ne	add	fp, #12
2b8ac     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2b8b0     0C 4E 85 51 |  if_ne	sub	fp, #12
2b8b4     28 00 90 5D |  if_ne	jmp	#LR__4391
2b8b8     08 4E 05 F1 | 	add	fp, #8
2b8bc     A7 FA 09 FB | 	rdlong	result1, fp wz
2b8c0     08 4E 85 F1 | 	sub	fp, #8
2b8c4     18 00 90 AD |  if_e	jmp	#LR__4390
2b8c8     10 4E 05 F1 | 	add	fp, #16
2b8cc     A7 12 02 F6 | 	mov	arg01, fp
2b8d0     08 4E 85 F1 | 	sub	fp, #8
2b8d4     A7 14 02 FB | 	rdlong	arg02, fp
2b8d8     08 4E 85 F1 | 	sub	fp, #8
2b8dc     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
2b8e0                 | LR__4390
2b8e0                 | LR__4391
2b8e0                 | LR__4392
2b8e0                 | LR__4393
2b8e0                 | ' 			}
2b8e0                 | ' 		}
2b8e0                 | ' 		;
2b8e0                 | ' 	}
2b8e0                 | ' 
2b8e0                 | ' 	return res ;
2b8e0     0C 4E 05 F1 | 	add	fp, #12
2b8e4     A7 FA 01 FB | 	rdlong	result1, fp
2b8e8     0C 4E 85 F1 | 	sub	fp, #12
2b8ec     A7 F0 03 F6 | 	mov	ptra, fp
2b8f0     B2 00 A0 FD | 	call	#popregs_
2b8f4                 | _fatfs_cc_f_stat_ret
2b8f4     2D 00 64 FD | 	ret
2b8f8                 | 
2b8f8                 | _fatfs_cc_f_unlink
2b8f8     00 4A 05 F6 | 	mov	COUNT_, #0
2b8fc     A8 00 A0 FD | 	call	#pushregs_
2b900     74 F0 07 F1 | 	add	ptra, #116
2b904     04 4E 05 F1 | 	add	fp, #4
2b908     A7 12 62 FC | 	wrlong	arg01, fp
2b90c     68 4E 05 F1 | 	add	fp, #104
2b910     A7 00 68 FC | 	wrlong	#0, fp
2b914     68 4E 85 F1 | 	sub	fp, #104
2b918     A7 12 02 F6 | 	mov	arg01, fp
2b91c     6C 4E 05 F1 | 	add	fp, #108
2b920     A7 14 02 F6 | 	mov	arg02, fp
2b924     70 4E 85 F1 | 	sub	fp, #112
2b928     02 16 06 F6 | 	mov	arg03, #2
2b92c     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2b930     08 4E 05 F1 | 	add	fp, #8
2b934     A7 FA 61 FC | 	wrlong	result1, fp
2b938     08 4E 85 F1 | 	sub	fp, #8
2b93c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b940     E4 01 90 5D |  if_ne	jmp	#LR__4408
2b944     70 4E 05 F1 | 	add	fp, #112
2b948     A7 16 02 FB | 	rdlong	arg03, fp
2b94c     64 4E 85 F1 | 	sub	fp, #100
2b950     A7 16 62 FC | 	wrlong	arg03, fp
2b954     A7 12 02 F6 | 	mov	arg01, fp
2b958     08 4E 85 F1 | 	sub	fp, #8
2b95c     A7 14 02 FB | 	rdlong	arg02, fp
2b960     04 4E 85 F1 | 	sub	fp, #4
2b964     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2b968     08 4E 05 F1 | 	add	fp, #8
2b96c     A7 FA 61 FC | 	wrlong	result1, fp
2b970     00 FA 4D F2 | 	cmps	result1, #0 wz
2b974     08 4E 85 F1 | 	sub	fp, #8
2b978     AC 01 90 5D |  if_ne	jmp	#LR__4407
2b97c     37 4E 05 F1 | 	add	fp, #55
2b980     A7 FA C1 FA | 	rdbyte	result1, fp
2b984     37 4E 85 F1 | 	sub	fp, #55
2b988     80 FA CD F7 | 	test	result1, #128 wz
2b98c     08 4E 05 51 |  if_ne	add	fp, #8
2b990     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2b994     08 4E 85 51 |  if_ne	sub	fp, #8
2b998     1C 00 90 5D |  if_ne	jmp	#LR__4400
2b99c     12 4E 05 F1 | 	add	fp, #18
2b9a0     A7 FA C1 FA | 	rdbyte	result1, fp
2b9a4     12 4E 85 F1 | 	sub	fp, #18
2b9a8     01 FA CD F7 | 	test	result1, #1 wz
2b9ac     08 4E 05 51 |  if_ne	add	fp, #8
2b9b0     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2b9b4     08 4E 85 51 |  if_ne	sub	fp, #8
2b9b8                 | LR__4400
2b9b8     08 4E 05 F1 | 	add	fp, #8
2b9bc     A7 FA 09 FB | 	rdlong	result1, fp wz
2b9c0     08 4E 85 F1 | 	sub	fp, #8
2b9c4     C8 00 90 5D |  if_ne	jmp	#LR__4403
2b9c8     70 4E 05 F1 | 	add	fp, #112
2b9cc     A7 12 02 FB | 	rdlong	arg01, fp
2b9d0     48 4E 85 F1 | 	sub	fp, #72
2b9d4     A7 14 02 FB | 	rdlong	arg02, fp
2b9d8     28 4E 85 F1 | 	sub	fp, #40
2b9dc     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2b9e0     6C 4E 05 F1 | 	add	fp, #108
2b9e4     A7 FA 61 FC | 	wrlong	result1, fp
2b9e8     5A 4E 85 F1 | 	sub	fp, #90
2b9ec     A7 FA C1 FA | 	rdbyte	result1, fp
2b9f0     12 4E 85 F1 | 	sub	fp, #18
2b9f4     10 FA CD F7 | 	test	result1, #16 wz
2b9f8     94 00 90 AD |  if_e	jmp	#LR__4402
2b9fc     70 4E 05 F1 | 	add	fp, #112
2ba00     A7 FA 01 FB | 	rdlong	result1, fp
2ba04     34 4E 85 F1 | 	sub	fp, #52
2ba08     A7 FA 61 FC | 	wrlong	result1, fp
2ba0c     30 4E 05 F1 | 	add	fp, #48
2ba10     A7 16 02 FB | 	rdlong	arg03, fp
2ba14     28 4E 85 F1 | 	sub	fp, #40
2ba18     A7 16 62 FC | 	wrlong	arg03, fp
2ba1c     08 4E 85 F1 | 	sub	fp, #8
2ba20     A7 12 02 F6 | 	mov	arg01, fp
2ba24     3C 4E 85 F1 | 	sub	fp, #60
2ba28     00 14 06 F6 | 	mov	arg02, #0
2ba2c     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2ba30     08 4E 05 F1 | 	add	fp, #8
2ba34     A7 FA 61 FC | 	wrlong	result1, fp
2ba38     08 4E 85 F1 | 	sub	fp, #8
2ba3c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ba40     4C 00 90 5D |  if_ne	jmp	#LR__4401
2ba44     3C 4E 05 F1 | 	add	fp, #60
2ba48     A7 12 02 F6 | 	mov	arg01, fp
2ba4c     3C 4E 85 F1 | 	sub	fp, #60
2ba50     00 14 06 F6 | 	mov	arg02, #0
2ba54     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
2ba58     08 4E 05 F1 | 	add	fp, #8
2ba5c     A7 FA 61 FC | 	wrlong	result1, fp
2ba60     00 FA 4D F2 | 	cmps	result1, #0 wz
2ba64     08 4E 85 F1 | 	sub	fp, #8
2ba68     08 4E 05 A1 |  if_e	add	fp, #8
2ba6c     A7 0E 68 AC |  if_e	wrlong	#7, fp
2ba70     08 4E 85 A1 |  if_e	sub	fp, #8
2ba74     08 4E 05 F1 | 	add	fp, #8
2ba78     A7 FA 01 FB | 	rdlong	result1, fp
2ba7c     08 4E 85 F1 | 	sub	fp, #8
2ba80     04 FA 0D F2 | 	cmp	result1, #4 wz
2ba84     08 4E 05 A1 |  if_e	add	fp, #8
2ba88     A7 00 68 AC |  if_e	wrlong	#0, fp
2ba8c     08 4E 85 A1 |  if_e	sub	fp, #8
2ba90                 | LR__4401
2ba90                 | LR__4402
2ba90                 | LR__4403
2ba90     08 4E 05 F1 | 	add	fp, #8
2ba94     A7 FA 09 FB | 	rdlong	result1, fp wz
2ba98     08 4E 85 F1 | 	sub	fp, #8
2ba9c     88 00 90 5D |  if_ne	jmp	#LR__4406
2baa0     0C 4E 05 F1 | 	add	fp, #12
2baa4     A7 12 02 F6 | 	mov	arg01, fp
2baa8     0C 4E 85 F1 | 	sub	fp, #12
2baac     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2bab0     08 4E 05 F1 | 	add	fp, #8
2bab4     A7 FA 61 FC | 	wrlong	result1, fp
2bab8     08 4E 85 F1 | 	sub	fp, #8
2babc     00 FA 0D F2 | 	cmp	result1, #0 wz
2bac0     38 00 90 5D |  if_ne	jmp	#LR__4404
2bac4     6C 4E 05 F1 | 	add	fp, #108
2bac8     A7 FA 09 FB | 	rdlong	result1, fp wz
2bacc     6C 4E 85 F1 | 	sub	fp, #108
2bad0     28 00 90 AD |  if_e	jmp	#LR__4404
2bad4     0C 4E 05 F1 | 	add	fp, #12
2bad8     A7 12 02 F6 | 	mov	arg01, fp
2badc     60 4E 05 F1 | 	add	fp, #96
2bae0     A7 14 02 FB | 	rdlong	arg02, fp
2bae4     6C 4E 85 F1 | 	sub	fp, #108
2bae8     00 16 06 F6 | 	mov	arg03, #0
2baec     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2baf0     08 4E 05 F1 | 	add	fp, #8
2baf4     A7 FA 61 FC | 	wrlong	result1, fp
2baf8     08 4E 85 F1 | 	sub	fp, #8
2bafc                 | LR__4404
2bafc     08 4E 05 F1 | 	add	fp, #8
2bb00     A7 FA 09 FB | 	rdlong	result1, fp wz
2bb04     08 4E 85 F1 | 	sub	fp, #8
2bb08     1C 00 90 5D |  if_ne	jmp	#LR__4405
2bb0c     70 4E 05 F1 | 	add	fp, #112
2bb10     A7 12 02 FB | 	rdlong	arg01, fp
2bb14     70 4E 85 F1 | 	sub	fp, #112
2bb18     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2bb1c     08 4E 05 F1 | 	add	fp, #8
2bb20     A7 FA 61 FC | 	wrlong	result1, fp
2bb24     08 4E 85 F1 | 	sub	fp, #8
2bb28                 | LR__4405
2bb28                 | LR__4406
2bb28                 | LR__4407
2bb28                 | LR__4408
2bb28                 | ' 			}
2bb28                 | ' 		}
2bb28                 | ' 		;
2bb28                 | ' 	}
2bb28                 | ' 
2bb28                 | ' 	return res ;
2bb28     08 4E 05 F1 | 	add	fp, #8
2bb2c     A7 FA 01 FB | 	rdlong	result1, fp
2bb30     08 4E 85 F1 | 	sub	fp, #8
2bb34     A7 F0 03 F6 | 	mov	ptra, fp
2bb38     B2 00 A0 FD | 	call	#popregs_
2bb3c                 | _fatfs_cc_f_unlink_ret
2bb3c     2D 00 64 FD | 	ret
2bb40                 | 
2bb40                 | _fatfs_cc_f_mkdir
2bb40     00 4A 05 F6 | 	mov	COUNT_, #0
2bb44     A8 00 A0 FD | 	call	#pushregs_
2bb48     5C F0 07 F1 | 	add	ptra, #92
2bb4c     04 4E 05 F1 | 	add	fp, #4
2bb50     A7 12 62 FC | 	wrlong	arg01, fp
2bb54     A7 12 02 F6 | 	mov	arg01, fp
2bb58     48 4E 05 F1 | 	add	fp, #72
2bb5c     A7 14 02 F6 | 	mov	arg02, fp
2bb60     4C 4E 85 F1 | 	sub	fp, #76
2bb64     02 16 06 F6 | 	mov	arg03, #2
2bb68     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2bb6c     08 4E 05 F1 | 	add	fp, #8
2bb70     A7 FA 61 FC | 	wrlong	result1, fp
2bb74     08 4E 85 F1 | 	sub	fp, #8
2bb78     00 FA 0D F2 | 	cmp	result1, #0 wz
2bb7c     C4 02 90 5D |  if_ne	jmp	#LR__4415
2bb80     4C 4E 05 F1 | 	add	fp, #76
2bb84     A7 16 02 FB | 	rdlong	arg03, fp
2bb88     40 4E 85 F1 | 	sub	fp, #64
2bb8c     A7 16 62 FC | 	wrlong	arg03, fp
2bb90     A7 12 02 F6 | 	mov	arg01, fp
2bb94     08 4E 85 F1 | 	sub	fp, #8
2bb98     A7 14 02 FB | 	rdlong	arg02, fp
2bb9c     04 4E 85 F1 | 	sub	fp, #4
2bba0     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2bba4     08 4E 05 F1 | 	add	fp, #8
2bba8     A7 FA 61 FC | 	wrlong	result1, fp
2bbac     00 FA 4D F2 | 	cmps	result1, #0 wz
2bbb0     08 4E 85 F1 | 	sub	fp, #8
2bbb4     08 4E 05 A1 |  if_e	add	fp, #8
2bbb8     A7 10 68 AC |  if_e	wrlong	#8, fp
2bbbc     08 4E 85 A1 |  if_e	sub	fp, #8
2bbc0     08 4E 05 F1 | 	add	fp, #8
2bbc4     A7 FA 01 FB | 	rdlong	result1, fp
2bbc8     08 4E 85 F1 | 	sub	fp, #8
2bbcc     04 FA 0D F2 | 	cmp	result1, #4 wz
2bbd0     70 02 90 5D |  if_ne	jmp	#LR__4414
2bbd4     4C 4E 05 F1 | 	add	fp, #76
2bbd8     A7 16 02 FB | 	rdlong	arg03, fp
2bbdc     10 4E 85 F1 | 	sub	fp, #16
2bbe0     A7 16 62 FC | 	wrlong	arg03, fp
2bbe4     A7 12 02 F6 | 	mov	arg01, fp
2bbe8     3C 4E 85 F1 | 	sub	fp, #60
2bbec     00 14 06 F6 | 	mov	arg02, #0
2bbf0     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2bbf4     50 4E 05 F1 | 	add	fp, #80
2bbf8     A7 FA 61 FC | 	wrlong	result1, fp
2bbfc     48 4E 85 F1 | 	sub	fp, #72
2bc00     A7 00 68 FC | 	wrlong	#0, fp
2bc04     48 4E 05 F1 | 	add	fp, #72
2bc08     A7 FA 09 FB | 	rdlong	result1, fp wz
2bc0c     50 4E 85 F1 | 	sub	fp, #80
2bc10     08 4E 05 A1 |  if_e	add	fp, #8
2bc14     A7 0E 68 AC |  if_e	wrlong	#7, fp
2bc18     08 4E 85 A1 |  if_e	sub	fp, #8
2bc1c     50 4E 05 F1 | 	add	fp, #80
2bc20     A7 FA 01 FB | 	rdlong	result1, fp
2bc24     50 4E 85 F1 | 	sub	fp, #80
2bc28     01 FA 0D F2 | 	cmp	result1, #1 wz
2bc2c     08 4E 05 A1 |  if_e	add	fp, #8
2bc30     A7 04 68 AC |  if_e	wrlong	#2, fp
2bc34     08 4E 85 A1 |  if_e	sub	fp, #8
2bc38     50 4E 05 F1 | 	add	fp, #80
2bc3c     A7 16 02 FB | 	rdlong	arg03, fp
2bc40     50 4E 85 F1 | 	sub	fp, #80
2bc44     FF FF 7F FF 
2bc48     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2bc4c     08 4E 05 A1 |  if_e	add	fp, #8
2bc50     A7 02 68 AC |  if_e	wrlong	#1, fp
2bc54     08 4E 85 A1 |  if_e	sub	fp, #8
2bc58     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2bc5c     58 4E 05 F1 | 	add	fp, #88
2bc60     A7 FA 61 FC | 	wrlong	result1, fp
2bc64     50 4E 85 F1 | 	sub	fp, #80
2bc68     A7 FA 09 FB | 	rdlong	result1, fp wz
2bc6c     08 4E 85 F1 | 	sub	fp, #8
2bc70     1C 01 90 5D |  if_ne	jmp	#LR__4411
2bc74     4C 4E 05 F1 | 	add	fp, #76
2bc78     A7 12 02 FB | 	rdlong	arg01, fp
2bc7c     04 4E 05 F1 | 	add	fp, #4
2bc80     A7 14 02 FB | 	rdlong	arg02, fp
2bc84     50 4E 85 F1 | 	sub	fp, #80
2bc88     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
2bc8c     08 4E 05 F1 | 	add	fp, #8
2bc90     A7 FA 61 FC | 	wrlong	result1, fp
2bc94     00 FA 4D F2 | 	cmps	result1, #0 wz
2bc98     08 4E 85 F1 | 	sub	fp, #8
2bc9c     F0 00 90 5D |  if_ne	jmp	#LR__4410
2bca0     4C 4E 05 F1 | 	add	fp, #76
2bca4     A7 12 02 FB | 	rdlong	arg01, fp
2bca8     4C 4E 85 F1 | 	sub	fp, #76
2bcac     34 12 06 F1 | 	add	arg01, #52
2bcb0     20 14 06 F6 | 	mov	arg02, #32
2bcb4     0B 16 06 F6 | 	mov	arg03, #11
2bcb8     98 00 A0 FD | 	call	#\builtin_bytefill_
2bcbc     4C 4E 05 F1 | 	add	fp, #76
2bcc0     A7 FA 01 FB | 	rdlong	result1, fp
2bcc4     34 FA 05 F1 | 	add	result1, #52
2bcc8     FD 5C 48 FC | 	wrbyte	#46, result1
2bccc     A7 16 02 FB | 	rdlong	arg03, fp
2bcd0     3F 16 06 F1 | 	add	arg03, #63
2bcd4     0B 21 48 FC | 	wrbyte	#16, arg03
2bcd8     A7 12 02 FB | 	rdlong	arg01, fp
2bcdc     4A 12 06 F1 | 	add	arg01, #74
2bce0     0C 4E 05 F1 | 	add	fp, #12
2bce4     A7 14 02 FB | 	rdlong	arg02, fp
2bce8     09 15 62 FC | 	wrlong	arg02, arg01
2bcec     0C 4E 85 F1 | 	sub	fp, #12
2bcf0     A7 14 02 FB | 	rdlong	arg02, fp
2bcf4     0A 13 02 F6 | 	mov	arg01, arg02
2bcf8     34 14 06 F1 | 	add	arg02, #52
2bcfc     04 4E 05 F1 | 	add	fp, #4
2bd00     A7 16 02 FB | 	rdlong	arg03, fp
2bd04     50 4E 85 F1 | 	sub	fp, #80
2bd08     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
2bd0c     4C 4E 05 F1 | 	add	fp, #76
2bd10     A7 14 02 FB | 	rdlong	arg02, fp
2bd14     0A 13 02 F6 | 	mov	arg01, arg02
2bd18     54 12 06 F1 | 	add	arg01, #84
2bd1c     4C 4E 85 F1 | 	sub	fp, #76
2bd20     34 14 06 F1 | 	add	arg02, #52
2bd24     20 16 06 F6 | 	mov	arg03, #32
2bd28     08 2D BF FD | 	call	#__system____builtin_memmove
2bd2c     4C 4E 05 F1 | 	add	fp, #76
2bd30     A7 16 02 FB | 	rdlong	arg03, fp
2bd34     55 16 06 F1 | 	add	arg03, #85
2bd38     0B 5D 48 FC | 	wrbyte	#46, arg03
2bd3c     38 4E 85 F1 | 	sub	fp, #56
2bd40     A7 16 02 FB | 	rdlong	arg03, fp
2bd44     40 4E 05 F1 | 	add	fp, #64
2bd48     A7 16 62 FC | 	wrlong	arg03, fp
2bd4c     08 4E 85 F1 | 	sub	fp, #8
2bd50     A7 14 02 FB | 	rdlong	arg02, fp
2bd54     0A 13 02 F6 | 	mov	arg01, arg02
2bd58     54 14 06 F1 | 	add	arg02, #84
2bd5c     4C 4E 85 F1 | 	sub	fp, #76
2bd60     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2bd64     4C 4E 05 F1 | 	add	fp, #76
2bd68     A7 16 02 FB | 	rdlong	arg03, fp
2bd6c     03 16 06 F1 | 	add	arg03, #3
2bd70     0B 03 48 FC | 	wrbyte	#1, arg03
2bd74     40 4E 85 F1 | 	sub	fp, #64
2bd78     A7 12 02 F6 | 	mov	arg01, fp
2bd7c     0C 4E 85 F1 | 	sub	fp, #12
2bd80     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2bd84     08 4E 05 F1 | 	add	fp, #8
2bd88     A7 FA 61 FC | 	wrlong	result1, fp
2bd8c     08 4E 85 F1 | 	sub	fp, #8
2bd90                 | LR__4410
2bd90                 | LR__4411
2bd90     08 4E 05 F1 | 	add	fp, #8
2bd94     A7 FA 09 FB | 	rdlong	result1, fp wz
2bd98     08 4E 85 F1 | 	sub	fp, #8
2bd9c     88 00 90 5D |  if_ne	jmp	#LR__4412
2bda0     28 4E 05 F1 | 	add	fp, #40
2bda4     A7 12 02 FB | 	rdlong	arg01, fp
2bda8     16 12 06 F1 | 	add	arg01, #22
2bdac     30 4E 05 F1 | 	add	fp, #48
2bdb0     A7 14 02 FB | 	rdlong	arg02, fp
2bdb4     09 15 62 FC | 	wrlong	arg02, arg01
2bdb8     0C 4E 85 F1 | 	sub	fp, #12
2bdbc     A7 12 02 FB | 	rdlong	arg01, fp
2bdc0     24 4E 85 F1 | 	sub	fp, #36
2bdc4     A7 14 02 FB | 	rdlong	arg02, fp
2bdc8     28 4E 05 F1 | 	add	fp, #40
2bdcc     A7 16 02 FB | 	rdlong	arg03, fp
2bdd0     50 4E 85 F1 | 	sub	fp, #80
2bdd4     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2bdd8     28 4E 05 F1 | 	add	fp, #40
2bddc     A7 FA 01 FB | 	rdlong	result1, fp
2bde0     0B FA 05 F1 | 	add	result1, #11
2bde4     FD 20 48 FC | 	wrbyte	#16, result1
2bde8     24 4E 05 F1 | 	add	fp, #36
2bdec     A7 FA 01 FB | 	rdlong	result1, fp
2bdf0     03 FA 05 F1 | 	add	result1, #3
2bdf4     FD 02 48 FC | 	wrbyte	#1, result1
2bdf8     44 4E 85 F1 | 	sub	fp, #68
2bdfc     A7 FA 09 FB | 	rdlong	result1, fp wz
2be00     08 4E 85 F1 | 	sub	fp, #8
2be04     3C 00 90 5D |  if_ne	jmp	#LR__4413
2be08     4C 4E 05 F1 | 	add	fp, #76
2be0c     A7 12 02 FB | 	rdlong	arg01, fp
2be10     4C 4E 85 F1 | 	sub	fp, #76
2be14     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2be18     08 4E 05 F1 | 	add	fp, #8
2be1c     A7 FA 61 FC | 	wrlong	result1, fp
2be20     08 4E 85 F1 | 	sub	fp, #8
2be24     1C 00 90 FD | 	jmp	#LR__4413
2be28                 | LR__4412
2be28     3C 4E 05 F1 | 	add	fp, #60
2be2c     A7 12 02 F6 | 	mov	arg01, fp
2be30     14 4E 05 F1 | 	add	fp, #20
2be34     A7 14 02 FB | 	rdlong	arg02, fp
2be38     50 4E 85 F1 | 	sub	fp, #80
2be3c     00 16 06 F6 | 	mov	arg03, #0
2be40     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2be44                 | LR__4413
2be44                 | LR__4414
2be44                 | LR__4415
2be44                 | ' 				remove_chain(&sobj, dcl, 0);
2be44                 | ' 			}
2be44                 | ' 		}
2be44                 | ' 		;
2be44                 | ' 	}
2be44                 | ' 
2be44                 | ' 	return res ;
2be44     08 4E 05 F1 | 	add	fp, #8
2be48     A7 FA 01 FB | 	rdlong	result1, fp
2be4c     08 4E 85 F1 | 	sub	fp, #8
2be50     A7 F0 03 F6 | 	mov	ptra, fp
2be54     B2 00 A0 FD | 	call	#popregs_
2be58                 | _fatfs_cc_f_mkdir_ret
2be58     2D 00 64 FD | 	ret
2be5c                 | 
2be5c                 | _fatfs_cc_f_rename
2be5c     01 4A 05 F6 | 	mov	COUNT_, #1
2be60     A8 00 A0 FD | 	call	#pushregs_
2be64     9C F0 07 F1 | 	add	ptra, #156
2be68     04 4E 05 F1 | 	add	fp, #4
2be6c     A7 12 62 FC | 	wrlong	arg01, fp
2be70     04 4E 05 F1 | 	add	fp, #4
2be74     A7 14 62 FC | 	wrlong	arg02, fp
2be78     A7 12 02 F6 | 	mov	arg01, fp
2be7c     08 4E 85 F1 | 	sub	fp, #8
2be80     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2be84     04 4E 05 F1 | 	add	fp, #4
2be88     A7 12 02 F6 | 	mov	arg01, fp
2be8c     6C 4E 05 F1 | 	add	fp, #108
2be90     A7 14 02 F6 | 	mov	arg02, fp
2be94     70 4E 85 F1 | 	sub	fp, #112
2be98     02 16 06 F6 | 	mov	arg03, #2
2be9c     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2bea0     0C 4E 05 F1 | 	add	fp, #12
2bea4     A7 FA 61 FC | 	wrlong	result1, fp
2bea8     0C 4E 85 F1 | 	sub	fp, #12
2beac     00 FA 0D F2 | 	cmp	result1, #0 wz
2beb0     44 03 90 5D |  if_ne	jmp	#LR__4433
2beb4     70 4E 05 F1 | 	add	fp, #112
2beb8     A7 16 02 FB | 	rdlong	arg03, fp
2bebc     60 4E 85 F1 | 	sub	fp, #96
2bec0     A7 16 62 FC | 	wrlong	arg03, fp
2bec4     A7 12 02 F6 | 	mov	arg01, fp
2bec8     0C 4E 85 F1 | 	sub	fp, #12
2becc     A7 14 02 FB | 	rdlong	arg02, fp
2bed0     04 4E 85 F1 | 	sub	fp, #4
2bed4     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2bed8     0C 4E 05 F1 | 	add	fp, #12
2bedc     A7 FA 61 FC | 	wrlong	result1, fp
2bee0     00 FA 4D F2 | 	cmps	result1, #0 wz
2bee4     0C 4E 85 F1 | 	sub	fp, #12
2bee8     1C 00 90 5D |  if_ne	jmp	#LR__4420
2beec     3B 4E 05 F1 | 	add	fp, #59
2bef0     A7 FA C1 FA | 	rdbyte	result1, fp
2bef4     3B 4E 85 F1 | 	sub	fp, #59
2bef8     A0 FA CD F7 | 	test	result1, #160 wz
2befc     0C 4E 05 51 |  if_ne	add	fp, #12
2bf00     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2bf04     0C 4E 85 51 |  if_ne	sub	fp, #12
2bf08                 | LR__4420
2bf08     0C 4E 05 F1 | 	add	fp, #12
2bf0c     A7 1E 0A FB | 	rdlong	local01, fp wz
2bf10     0C 4E 85 F1 | 	sub	fp, #12
2bf14     E0 02 90 5D |  if_ne	jmp	#LR__4432
2bf18     74 4E 05 F1 | 	add	fp, #116
2bf1c     A7 12 02 F6 | 	mov	arg01, fp
2bf20     48 4E 85 F1 | 	sub	fp, #72
2bf24     A7 14 02 FB | 	rdlong	arg02, fp
2bf28     2C 4E 85 F1 | 	sub	fp, #44
2bf2c     20 16 06 F6 | 	mov	arg03, #32
2bf30     00 2B BF FD | 	call	#__system____builtin_memmove
2bf34     40 4E 05 F1 | 	add	fp, #64
2bf38     A7 12 02 F6 | 	mov	arg01, fp
2bf3c     30 4E 85 F1 | 	sub	fp, #48
2bf40     A7 14 02 F6 | 	mov	arg02, fp
2bf44     10 4E 85 F1 | 	sub	fp, #16
2bf48     30 16 06 F6 | 	mov	arg03, #48
2bf4c     E4 2A BF FD | 	call	#__system____builtin_memmove
2bf50     40 4E 05 F1 | 	add	fp, #64
2bf54     A7 12 02 F6 | 	mov	arg01, fp
2bf58     38 4E 85 F1 | 	sub	fp, #56
2bf5c     A7 14 02 FB | 	rdlong	arg02, fp
2bf60     08 4E 85 F1 | 	sub	fp, #8
2bf64     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2bf68     0C 4E 05 F1 | 	add	fp, #12
2bf6c     A7 FA 61 FC | 	wrlong	result1, fp
2bf70     0C 4E 85 F1 | 	sub	fp, #12
2bf74     00 FA 0D F2 | 	cmp	result1, #0 wz
2bf78     4C 00 90 5D |  if_ne	jmp	#LR__4423
2bf7c     48 4E 05 F1 | 	add	fp, #72
2bf80     A7 FA 01 FB | 	rdlong	result1, fp
2bf84     30 4E 85 F1 | 	sub	fp, #48
2bf88     A7 16 02 FB | 	rdlong	arg03, fp
2bf8c     18 4E 85 F1 | 	sub	fp, #24
2bf90     0B FB 09 F2 | 	cmp	result1, arg03 wz
2bf94     20 00 90 5D |  if_ne	jmp	#LR__4421
2bf98     50 4E 05 F1 | 	add	fp, #80
2bf9c     A7 FA 01 FB | 	rdlong	result1, fp
2bfa0     30 4E 85 F1 | 	sub	fp, #48
2bfa4     A7 16 02 FB | 	rdlong	arg03, fp
2bfa8     20 4E 85 F1 | 	sub	fp, #32
2bfac     0B FB 09 F2 | 	cmp	result1, arg03 wz
2bfb0     04 1E 06 A6 |  if_e	mov	local01, #4
2bfb4     04 00 90 AD |  if_e	jmp	#LR__4422
2bfb8                 | LR__4421
2bfb8     08 1E 06 F6 | 	mov	local01, #8
2bfbc                 | LR__4422
2bfbc     0C 4E 05 F1 | 	add	fp, #12
2bfc0     A7 1E 62 FC | 	wrlong	local01, fp
2bfc4     0C 4E 85 F1 | 	sub	fp, #12
2bfc8                 | LR__4423
2bfc8     0C 4E 05 F1 | 	add	fp, #12
2bfcc     A7 1E 02 FB | 	rdlong	local01, fp
2bfd0     0C 4E 85 F1 | 	sub	fp, #12
2bfd4     04 1E 0E F2 | 	cmp	local01, #4 wz
2bfd8     CC 01 90 5D |  if_ne	jmp	#LR__4429
2bfdc     40 4E 05 F1 | 	add	fp, #64
2bfe0     A7 12 02 F6 | 	mov	arg01, fp
2bfe4     40 4E 85 F1 | 	sub	fp, #64
2bfe8     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2bfec     0C 4E 05 F1 | 	add	fp, #12
2bff0     A7 FA 61 FC | 	wrlong	result1, fp
2bff4     0C 4E 85 F1 | 	sub	fp, #12
2bff8     00 FA 0D F2 | 	cmp	result1, #0 wz
2bffc     A8 01 90 5D |  if_ne	jmp	#LR__4428
2c000     5C 4E 05 F1 | 	add	fp, #92
2c004     A7 12 02 FB | 	rdlong	arg01, fp
2c008     38 4E 05 F1 | 	add	fp, #56
2c00c     A7 12 62 FC | 	wrlong	arg01, fp
2c010     0D 12 06 F1 | 	add	arg01, #13
2c014     20 4E 85 F1 | 	sub	fp, #32
2c018     A7 14 02 F6 | 	mov	arg02, fp
2c01c     74 4E 85 F1 | 	sub	fp, #116
2c020     0D 14 06 F1 | 	add	arg02, #13
2c024     13 16 06 F6 | 	mov	arg03, #19
2c028     08 2A BF FD | 	call	#__system____builtin_memmove
2c02c     94 4E 05 F1 | 	add	fp, #148
2c030     A7 1E 02 FB | 	rdlong	local01, fp
2c034     15 4E 85 F1 | 	sub	fp, #21
2c038     A7 FA C1 FA | 	rdbyte	result1, fp
2c03c     0B 1E 06 F1 | 	add	local01, #11
2c040     0F FB 41 FC | 	wrbyte	result1, local01
2c044     15 4E 05 F1 | 	add	fp, #21
2c048     A7 1E 02 FB | 	rdlong	local01, fp
2c04c     94 4E 85 F1 | 	sub	fp, #148
2c050     0B 1E 06 F1 | 	add	local01, #11
2c054     0F 1F C2 FA | 	rdbyte	local01, local01
2c058     10 1E CE F7 | 	test	local01, #16 wz
2c05c     24 00 90 5D |  if_ne	jmp	#LR__4424
2c060     94 4E 05 F1 | 	add	fp, #148
2c064     A7 FA 01 FB | 	rdlong	result1, fp
2c068     FD 1E 02 F6 | 	mov	local01, result1
2c06c     94 4E 85 F1 | 	sub	fp, #148
2c070     0B FA 05 F1 | 	add	result1, #11
2c074     FD FA C1 FA | 	rdbyte	result1, result1
2c078     20 FA 45 F5 | 	or	result1, #32
2c07c     0B 1E 06 F1 | 	add	local01, #11
2c080     0F FB 41 FC | 	wrbyte	result1, local01
2c084                 | LR__4424
2c084     70 4E 05 F1 | 	add	fp, #112
2c088     A7 1E 02 FB | 	rdlong	local01, fp
2c08c     03 1E 06 F1 | 	add	local01, #3
2c090     0F 03 48 FC | 	wrbyte	#1, local01
2c094     24 4E 05 F1 | 	add	fp, #36
2c098     A7 1E 02 FB | 	rdlong	local01, fp
2c09c     94 4E 85 F1 | 	sub	fp, #148
2c0a0     0B 1E 06 F1 | 	add	local01, #11
2c0a4     0F 1F C2 FA | 	rdbyte	local01, local01
2c0a8     10 1E CE F7 | 	test	local01, #16 wz
2c0ac     F8 00 90 AD |  if_e	jmp	#LR__4427
2c0b0     18 4E 05 F1 | 	add	fp, #24
2c0b4     A7 16 02 FB | 	rdlong	arg03, fp
2c0b8     30 4E 05 F1 | 	add	fp, #48
2c0bc     A7 1E 02 FB | 	rdlong	local01, fp
2c0c0     48 4E 85 F1 | 	sub	fp, #72
2c0c4     0F 17 0A F2 | 	cmp	arg03, local01 wz
2c0c8     DC 00 90 AD |  if_e	jmp	#LR__4427
2c0cc     70 4E 05 F1 | 	add	fp, #112
2c0d0     A7 12 02 FB | 	rdlong	arg01, fp
2c0d4     09 1F 02 F6 | 	mov	local01, arg01
2c0d8     24 4E 05 F1 | 	add	fp, #36
2c0dc     A7 14 02 FB | 	rdlong	arg02, fp
2c0e0     94 4E 85 F1 | 	sub	fp, #148
2c0e4     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2c0e8     FD 14 02 F6 | 	mov	arg02, result1
2c0ec     0F 13 02 F6 | 	mov	arg01, local01
2c0f0     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
2c0f4     98 4E 05 F1 | 	add	fp, #152
2c0f8     A7 FA 61 FC | 	wrlong	result1, fp
2c0fc     00 FA 4D F2 | 	cmps	result1, #0 wz
2c100     98 4E 85 F1 | 	sub	fp, #152
2c104     0C 4E 05 A1 |  if_e	add	fp, #12
2c108     A7 04 68 AC |  if_e	wrlong	#2, fp
2c10c     0C 4E 85 A1 |  if_e	sub	fp, #12
2c110     94 00 90 AD |  if_e	jmp	#LR__4426
2c114     70 4E 05 F1 | 	add	fp, #112
2c118     A7 12 02 FB | 	rdlong	arg01, fp
2c11c     28 4E 05 F1 | 	add	fp, #40
2c120     A7 14 02 FB | 	rdlong	arg02, fp
2c124     98 4E 85 F1 | 	sub	fp, #152
2c128     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2c12c     0C 4E 05 F1 | 	add	fp, #12
2c130     A7 FA 61 FC | 	wrlong	result1, fp
2c134     64 4E 05 F1 | 	add	fp, #100
2c138     A7 1E 02 FB | 	rdlong	local01, fp
2c13c     54 1E 06 F1 | 	add	local01, #84
2c140     24 4E 05 F1 | 	add	fp, #36
2c144     A7 1E 62 FC | 	wrlong	local01, fp
2c148     88 4E 85 F1 | 	sub	fp, #136
2c14c     A7 1E 0A FB | 	rdlong	local01, fp wz
2c150     0C 4E 85 F1 | 	sub	fp, #12
2c154     50 00 90 5D |  if_ne	jmp	#LR__4425
2c158     94 4E 05 F1 | 	add	fp, #148
2c15c     A7 1E 02 FB | 	rdlong	local01, fp
2c160     94 4E 85 F1 | 	sub	fp, #148
2c164     01 1E 06 F1 | 	add	local01, #1
2c168     0F 1F C2 FA | 	rdbyte	local01, local01
2c16c     2E 1E 0E F2 | 	cmp	local01, #46 wz
2c170     34 00 90 5D |  if_ne	jmp	#LR__4425
2c174     70 4E 05 F1 | 	add	fp, #112
2c178     A7 12 02 FB | 	rdlong	arg01, fp
2c17c     24 4E 05 F1 | 	add	fp, #36
2c180     A7 14 02 FB | 	rdlong	arg02, fp
2c184     4C 4E 85 F1 | 	sub	fp, #76
2c188     A7 16 02 FB | 	rdlong	arg03, fp
2c18c     48 4E 85 F1 | 	sub	fp, #72
2c190     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2c194     70 4E 05 F1 | 	add	fp, #112
2c198     A7 1E 02 FB | 	rdlong	local01, fp
2c19c     70 4E 85 F1 | 	sub	fp, #112
2c1a0     03 1E 06 F1 | 	add	local01, #3
2c1a4     0F 03 48 FC | 	wrbyte	#1, local01
2c1a8                 | LR__4425
2c1a8                 | LR__4426
2c1a8                 | LR__4427
2c1a8                 | LR__4428
2c1a8                 | LR__4429
2c1a8     0C 4E 05 F1 | 	add	fp, #12
2c1ac     A7 1E 0A FB | 	rdlong	local01, fp wz
2c1b0     0C 4E 85 F1 | 	sub	fp, #12
2c1b4     40 00 90 5D |  if_ne	jmp	#LR__4431
2c1b8     10 4E 05 F1 | 	add	fp, #16
2c1bc     A7 12 02 F6 | 	mov	arg01, fp
2c1c0     10 4E 85 F1 | 	sub	fp, #16
2c1c4     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2c1c8     0C 4E 05 F1 | 	add	fp, #12
2c1cc     A7 FA 61 FC | 	wrlong	result1, fp
2c1d0     0C 4E 85 F1 | 	sub	fp, #12
2c1d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c1d8     1C 00 90 5D |  if_ne	jmp	#LR__4430
2c1dc     70 4E 05 F1 | 	add	fp, #112
2c1e0     A7 12 02 FB | 	rdlong	arg01, fp
2c1e4     70 4E 85 F1 | 	sub	fp, #112
2c1e8     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
2c1ec     0C 4E 05 F1 | 	add	fp, #12
2c1f0     A7 FA 61 FC | 	wrlong	result1, fp
2c1f4     0C 4E 85 F1 | 	sub	fp, #12
2c1f8                 | LR__4430
2c1f8                 | LR__4431
2c1f8                 | LR__4432
2c1f8                 | LR__4433
2c1f8                 | ' 					res = sync_fs(fs);
2c1f8                 | ' 				}
2c1f8                 | ' 			}
2c1f8                 | ' 
2c1f8                 | ' 		}
2c1f8                 | ' 		;
2c1f8                 | ' 	}
2c1f8                 | ' 
2c1f8                 | ' 	return res ;
2c1f8     0C 4E 05 F1 | 	add	fp, #12
2c1fc     A7 FA 01 FB | 	rdlong	result1, fp
2c200     0C 4E 85 F1 | 	sub	fp, #12
2c204     A7 F0 03 F6 | 	mov	ptra, fp
2c208     B2 00 A0 FD | 	call	#popregs_
2c20c                 | _fatfs_cc_f_rename_ret
2c20c     2D 00 64 FD | 	ret
2c210                 | 
2c210                 | _fatfs_cc_time
2c210     00 4A 05 F6 | 	mov	COUNT_, #0
2c214     A8 00 A0 FD | 	call	#pushregs_
2c218     14 F0 07 F1 | 	add	ptra, #20
2c21c     04 4E 05 F1 | 	add	fp, #4
2c220     A7 12 62 FC | 	wrlong	arg01, fp
2c224     04 4E 05 F1 | 	add	fp, #4
2c228     A7 12 02 F6 | 	mov	arg01, fp
2c22c     08 4E 85 F1 | 	sub	fp, #8
2c230     00 14 06 F6 | 	mov	arg02, #0
2c234     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
2c238     08 4E 05 F1 | 	add	fp, #8
2c23c     A7 FA 01 FB | 	rdlong	result1, fp
2c240     08 4E 05 F1 | 	add	fp, #8
2c244     A7 FA 61 FC | 	wrlong	result1, fp
2c248     0C 4E 85 F1 | 	sub	fp, #12
2c24c     A7 FA 09 FB | 	rdlong	result1, fp wz
2c250     04 4E 85 F1 | 	sub	fp, #4
2c254     18 00 90 AD |  if_e	jmp	#LR__4440
2c258     04 4E 05 F1 | 	add	fp, #4
2c25c     A7 FA 01 FB | 	rdlong	result1, fp
2c260     0C 4E 05 F1 | 	add	fp, #12
2c264     A7 14 02 FB | 	rdlong	arg02, fp
2c268     10 4E 85 F1 | 	sub	fp, #16
2c26c     FD 14 62 FC | 	wrlong	arg02, result1
2c270                 | LR__4440
2c270                 | '         *tp = now;
2c270                 | '     return now;
2c270     10 4E 05 F1 | 	add	fp, #16
2c274     A7 FA 01 FB | 	rdlong	result1, fp
2c278     10 4E 85 F1 | 	sub	fp, #16
2c27c     A7 F0 03 F6 | 	mov	ptra, fp
2c280     B2 00 A0 FD | 	call	#popregs_
2c284                 | _fatfs_cc_time_ret
2c284     2D 00 64 FD | 	ret
2c288                 | 
2c288                 | _fatfs_cc_mktime
2c288     06 4A 05 F6 | 	mov	COUNT_, #6
2c28c     A8 00 A0 FD | 	call	#pushregs_
2c290     09 1F 02 F6 | 	mov	local01, arg01
2c294     14 1E 06 F1 | 	add	local01, #20
2c298     0F 13 02 FB | 	rdlong	arg01, local01
2c29c     14 1E 86 F1 | 	sub	local01, #20
2c2a0     46 12 56 F2 | 	cmps	arg01, #70 wc
2c2a4                 | '                 return (time_t) -1;
2c2a4     01 FA 65 C6 |  if_b	neg	result1, #1
2c2a8     7C 01 90 CD |  if_b	jmp	#LR__4454
2c2ac     03 00 00 FF 
2c2b0     6C 21 06 F6 | 	mov	local02, ##1900
2c2b4     14 1E 06 F1 | 	add	local01, #20
2c2b8     0F FB 01 FB | 	rdlong	result1, local01
2c2bc     FD 20 02 F1 | 	add	local02, result1
2c2c0     08 1E 86 F1 | 	sub	local01, #8
2c2c4     0F 23 02 FB | 	rdlong	local03, local01
2c2c8     01 22 86 F1 | 	sub	local03, #1
2c2cc     04 1E 06 F1 | 	add	local01, #4
2c2d0     0F 13 02 FB | 	rdlong	arg01, local01
2c2d4     10 1E 86 F1 | 	sub	local01, #16
2c2d8     02 12 66 F0 | 	shl	arg01, #2
2c2dc     02 00 00 FF 
2c2e0     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
2c2e4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2c2e8     09 FB 01 FB | 	rdlong	result1, arg01
2c2ec     FD 22 02 F1 | 	add	local03, result1
2c2f0     10 13 02 F6 | 	mov	arg01, local02
2c2f4     02 00 00 FF 
2c2f8     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2c2fc     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2c300     00 FA 0D F2 | 	cmp	result1, #0 wz
2c304     1C 00 90 AD |  if_e	jmp	#LR__4450
2c308     00 24 06 F6 | 	mov	local04, #0
2c30c     10 1E 06 F1 | 	add	local01, #16
2c310     0F FB 01 FB | 	rdlong	result1, local01
2c314     10 1E 86 F1 | 	sub	local01, #16
2c318     02 FA 55 F2 | 	cmps	result1, #2 wc
2c31c     01 24 06 36 |  if_ae	mov	local04, #1
2c320     04 00 90 FD | 	jmp	#LR__4451
2c324                 | LR__4450
2c324     00 24 06 F6 | 	mov	local04, #0
2c328                 | LR__4451
2c328     04 1E 06 F1 | 	add	local01, #4
2c32c     0F FB 01 FB | 	rdlong	result1, local01
2c330     04 1E 86 F1 | 	sub	local01, #4
2c334     0F 27 02 FB | 	rdlong	local05, local01
2c338     08 1E 06 F1 | 	add	local01, #8
2c33c     0F 13 02 FB | 	rdlong	arg01, local01
2c340     07 00 00 FF 
2c344     10 12 06 FD | 	qmul	arg01, ##3600
2c348     12 23 02 F1 | 	add	local03, local04
2c34c     FD 24 02 F6 | 	mov	local04, result1
2c350     04 24 66 F0 | 	shl	local04, #4
2c354     FD 24 82 F1 | 	sub	local04, result1
2c358     02 24 66 F0 | 	shl	local04, #2
2c35c     12 27 02 F1 | 	add	local05, local04
2c360     08 1E 86 F1 | 	sub	local01, #8
2c364     18 24 62 FD | 	getqx	local04
2c368     A8 00 00 FF 
2c36c     80 23 06 FD | 	qmul	local03, ##86400
2c370     12 27 02 F1 | 	add	local05, local04
2c374     10 23 02 F6 | 	mov	local03, local02
2c378     03 00 00 FF 
2c37c     B2 23 86 F1 | 	sub	local03, ##1970
2c380     18 24 62 FD | 	getqx	local04
2c384     99 F0 00 FF 
2c388     80 23 06 FD | 	qmul	local03, ##31536000
2c38c     12 27 02 F1 | 	add	local05, local04
2c390     10 23 02 F6 | 	mov	local03, local02
2c394     03 00 00 FF 
2c398     B1 23 86 F1 | 	sub	local03, ##1969
2c39c     11 29 52 F6 | 	abs	local06, local03 wc
2c3a0     02 28 46 F0 | 	shr	local06, #2
2c3a4     14 29 82 F6 | 	negc	local06, local06
2c3a8     03 00 00 FF 
2c3ac     D1 21 56 F2 | 	cmps	local02, ##2001 wc
2c3b0     18 24 62 FD | 	getqx	local04
2c3b4     12 27 02 F1 | 	add	local05, local04
2c3b8     18 00 90 CD |  if_b	jmp	#LR__4452
2c3bc     03 00 00 FF 
2c3c0     D0 21 86 F1 | 	sub	local02, ##2000
2c3c4     10 25 52 F6 | 	abs	local04, local02 wc
2c3c8     64 24 16 FD | 	qdiv	local04, #100
2c3cc     18 24 62 FD | 	getqx	local04
2c3d0     12 29 A2 F3 | 	sumnc	local06, local04
2c3d4                 | LR__4452
2c3d4     A8 00 00 FF 
2c3d8     80 29 06 FD | 	qmul	local06, ##86400
2c3dc     18 28 62 FD | 	getqx	local06
2c3e0     14 27 02 F1 | 	add	local05, local06
2c3e4     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2c3e8     02 00 00 FF 
2c3ec     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2c3f0     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2c3f4     14 27 02 F1 | 	add	local05, local06
2c3f8     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2c3fc     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2c400     02 00 00 FF 
2c404     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2c408     01 22 0E F2 | 	cmp	local03, #1 wz
2c40c     14 00 90 5D |  if_ne	jmp	#LR__4453
2c410     0F 13 02 F6 | 	mov	arg01, local01
2c414     DC 19 B0 FD | 	call	#_fatfs_cc___indst
2c418     00 FA 0D F2 | 	cmp	result1, #0 wz
2c41c     07 00 00 5F 
2c420     10 26 86 51 |  if_ne	sub	local05, ##3600
2c424                 | LR__4453
2c424                 | '                 s -=  (3600L) ;
2c424                 | ' 
2c424                 | '         return s;
2c424     13 FB 01 F6 | 	mov	result1, local05
2c428                 | LR__4454
2c428     A7 F0 03 F6 | 	mov	ptra, fp
2c42c     B2 00 A0 FD | 	call	#popregs_
2c430                 | _fatfs_cc_mktime_ret
2c430     2D 00 64 FD | 	ret
2c434                 | 
2c434                 | _fatfs_cc__gmtime_r
2c434     03 4A 05 F6 | 	mov	COUNT_, #3
2c438     A8 00 A0 FD | 	call	#pushregs_
2c43c     09 1F 02 FB | 	rdlong	local01, arg01
2c440     A8 00 00 FF 
2c444     80 1F 16 FD | 	qdiv	local01, ##86400
2c448     18 FA 61 FD | 	getqx	result1
2c44c     04 FA 05 F1 | 	add	result1, #4
2c450     07 FA 15 FD | 	qdiv	result1, #7
2c454     18 14 06 F1 | 	add	arg02, #24
2c458     D1 7F 27 FF 
2c45c     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
2c460     D1 7F 27 3F 
2c464     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
2c468     03 00 00 3F 
2c46c     DC 21 06 36 |  if_ae	mov	local02, ##2012
2c470     03 00 00 CF 
2c474     B2 21 06 C6 |  if_b	mov	local02, ##1970
2c478                 | ' 	  year = 1970;
2c478                 | ' 	}
2c478                 | ' 
2c478                 | ' 	for(;;) {
2c478     19 FA 61 FD | 	getqy	result1
2c47c     0A FB 61 FC | 	wrlong	result1, arg02
2c480     18 14 86 F1 | 	sub	arg02, #24
2c484                 | LR__4460
2c484     10 13 02 F6 | 	mov	arg01, local02
2c488     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2c48c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c490     42 F1 00 5F 
2c494     00 23 06 56 |  if_ne	mov	local03, ##31622400
2c498     99 F0 00 AF 
2c49c     80 23 06 A6 |  if_e	mov	local03, ##31536000
2c4a0     11 1F 12 F2 | 	cmp	local01, local03 wc
2c4a4                 | ' 	    break;
2c4a4     01 20 06 31 |  if_ae	add	local02, #1
2c4a8     11 1F 82 31 |  if_ae	sub	local01, local03
2c4ac     D4 FF 9F 3D |  if_ae	jmp	#LR__4460
2c4b0     A8 00 00 FF 
2c4b4     80 1F 16 FD | 	qdiv	local01, ##86400
2c4b8     10 23 02 F6 | 	mov	local03, local02
2c4bc     03 00 00 FF 
2c4c0     6C 23 86 F1 | 	sub	local03, ##1900
2c4c4     14 14 06 F1 | 	add	arg02, #20
2c4c8     0A 23 62 FC | 	wrlong	local03, arg02
2c4cc     08 14 06 F1 | 	add	arg02, #8
2c4d0     10 13 02 F6 | 	mov	arg01, local02
2c4d4     18 20 62 FD | 	getqx	local02
2c4d8     0A 21 62 FC | 	wrlong	local02, arg02
2c4dc     1C 14 86 F1 | 	sub	arg02, #28
2c4e0     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2c4e4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c4e8     1D 22 06 56 |  if_ne	mov	local03, #29
2c4ec     1C 22 06 A6 |  if_e	mov	local03, #28
2c4f0     02 00 00 FF 
2c4f4     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2c4f8     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2c4fc     02 00 00 FF 
2c500     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2c504                 | ' 
2c504                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2c504                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2c504     00 12 06 F6 | 	mov	arg01, #0
2c508     97 2A 48 FB | 	callpa	#(@LR__4462-@LR__4461)>>2,fcache_load_ptr_
2c50c                 | LR__4461
2c50c     09 23 02 F6 | 	mov	local03, arg01
2c510     02 22 66 F0 | 	shl	local03, #2
2c514     02 00 00 FF 
2c518     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2c51c     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2c520     11 23 02 FB | 	rdlong	local03, local03
2c524     11 21 52 F2 | 	cmps	local02, local03 wc
2c528     02 00 00 FF 
2c52c     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2c530     2C 00 90 CD |  if_b	jmp	#LR__4463
2c534     09 23 02 F6 | 	mov	local03, arg01
2c538     02 22 66 F0 | 	shl	local03, #2
2c53c     02 00 00 FF 
2c540     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2c544     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2c548     11 23 02 FB | 	rdlong	local03, local03
2c54c     11 21 82 F1 | 	sub	local02, local03
2c550     01 12 06 F1 | 	add	arg01, #1
2c554     02 00 00 FF 
2c558     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2c55c     AC FF 9F FD | 	jmp	#LR__4461
2c560                 | LR__4462
2c560                 | LR__4463
2c560     A8 00 00 FF 
2c564     80 1F 16 FD | 	qdiv	local01, ##86400
2c568     10 14 06 F1 | 	add	arg02, #16
2c56c     0A 13 62 FC | 	wrlong	arg01, arg02
2c570     01 20 06 F1 | 	add	local02, #1
2c574     04 14 86 F1 | 	sub	arg02, #4
2c578     0A 21 62 FC | 	wrlong	local02, arg02
2c57c     19 1E 62 FD | 	getqy	local01
2c580     07 00 00 FF 
2c584     10 1E 16 FD | 	qdiv	local01, ##3600
2c588     18 22 62 FD | 	getqx	local03
2c58c     07 00 00 FF 
2c590     10 1E 16 FD | 	qdiv	local01, ##3600
2c594     04 14 86 F1 | 	sub	arg02, #4
2c598     0A 23 62 FC | 	wrlong	local03, arg02
2c59c     19 1E 62 FD | 	getqy	local01
2c5a0     3C 1E 16 FD | 	qdiv	local01, #60
2c5a4     18 22 62 FD | 	getqx	local03
2c5a8     3C 1E 16 FD | 	qdiv	local01, #60
2c5ac     04 14 86 F1 | 	sub	arg02, #4
2c5b0     0A 23 62 FC | 	wrlong	local03, arg02
2c5b4     04 14 86 F1 | 	sub	arg02, #4
2c5b8                 | '         stm->tm_isdst = 0;
2c5b8                 | ' 
2c5b8                 | ' ;
2c5b8                 | '         return stm;
2c5b8     0A FB 01 F6 | 	mov	result1, arg02
2c5bc     19 22 62 FD | 	getqy	local03
2c5c0     0A 23 62 FC | 	wrlong	local03, arg02
2c5c4     20 14 06 F1 | 	add	arg02, #32
2c5c8     0A 01 68 FC | 	wrlong	#0, arg02
2c5cc     A7 F0 03 F6 | 	mov	ptra, fp
2c5d0     B2 00 A0 FD | 	call	#popregs_
2c5d4                 | _fatfs_cc__gmtime_r_ret
2c5d4     2D 00 64 FD | 	ret
2c5d8                 | 
2c5d8                 | _fatfs_cc__tzset
2c5d8     70 01 00 FF 
2c5dc     1D 13 06 F6 | 	mov	arg01, ##@LR__4775
2c5e0     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2c5e4     FD 12 02 F6 | 	mov	arg01, result1
2c5e8     02 00 00 FF 
2c5ec     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2c5f0     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2c5f4     02 00 00 FF 
2c5f8     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2c5fc     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2c600     02 00 00 FF 
2c604     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2c608     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2c60c     02 00 00 FF 
2c610     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2c614                 | _fatfs_cc__tzset_ret
2c614     2D 00 64 FD | 	ret
2c618                 | 
2c618                 | _fatfs_cc_getenv
2c618     06 4A 05 F6 | 	mov	COUNT_, #6
2c61c     A8 00 A0 FD | 	call	#pushregs_
2c620     09 1F 02 F6 | 	mov	local01, arg01
2c624     09 21 02 F6 | 	mov	local02, arg01
2c628     97 06 48 FB | 	callpa	#(@LR__4471-@LR__4470)>>2,fcache_load_ptr_
2c62c                 | LR__4470
2c62c     10 FB C9 FA | 	rdbyte	result1, local02 wz
2c630     01 20 06 51 |  if_ne	add	local02, #1
2c634     F4 FF 9F 5D |  if_ne	jmp	#LR__4470
2c638                 | LR__4471
2c638     09 21 82 F1 | 	sub	local02, arg01
2c63c     10 FB 01 F6 | 	mov	result1, local02
2c640     02 00 00 FF 
2c644     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2c648     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2c64c     02 00 00 FF 
2c650     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2c654                 | '             return 0;
2c654     00 FA 05 A6 |  if_e	mov	result1, #0
2c658     5C 00 90 AD |  if_e	jmp	#LR__4474
2c65c                 | ' 
2c65c                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2c65c     02 00 00 FF 
2c660     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2c664     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2c668     02 00 00 FF 
2c66c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2c670                 | LR__4472
2c670     11 25 0A FB | 	rdlong	local04, local03 wz
2c674     3C 00 90 AD |  if_e	jmp	#LR__4473
2c678     12 13 02 F6 | 	mov	arg01, local04
2c67c     0F 15 02 F6 | 	mov	arg02, local01
2c680     10 17 02 F6 | 	mov	arg03, local02
2c684     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
2c688     00 FA 0D F2 | 	cmp	result1, #0 wz
2c68c     10 27 02 A6 |  if_e	mov	local05, local02
2c690     12 27 02 A1 |  if_e	add	local05, local04
2c694     13 29 C2 AA |  if_e	rdbyte	local06, local05
2c698     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
2c69c                 | ' 			return name+len+1;
2c69c     10 25 02 A1 |  if_e	add	local04, local02
2c6a0     01 24 06 A1 |  if_e	add	local04, #1
2c6a4     12 FB 01 A6 |  if_e	mov	result1, local04
2c6a8     0C 00 90 AD |  if_e	jmp	#LR__4474
2c6ac     04 22 06 F1 | 	add	local03, #4
2c6b0     BC FF 9F FD | 	jmp	#LR__4472
2c6b4                 | LR__4473
2c6b4                 | ' 	}
2c6b4                 | ' 	return 0;
2c6b4     00 FA 05 F6 | 	mov	result1, #0
2c6b8                 | LR__4474
2c6b8     A7 F0 03 F6 | 	mov	ptra, fp
2c6bc     B2 00 A0 FD | 	call	#popregs_
2c6c0                 | _fatfs_cc_getenv_ret
2c6c0     2D 00 64 FD | 	ret
2c6c4                 | 
2c6c4                 | _fatfs_cc__get_fattime
2c6c4     00 4A 05 F6 | 	mov	COUNT_, #0
2c6c8     A8 00 A0 FD | 	call	#pushregs_
2c6cc     34 F0 07 F1 | 	add	ptra, #52
2c6d0     00 12 06 F6 | 	mov	arg01, #0
2c6d4     38 FB BF FD | 	call	#_fatfs_cc_time
2c6d8     04 4E 05 F1 | 	add	fp, #4
2c6dc     A7 FA 61 FC | 	wrlong	result1, fp
2c6e0     A7 12 02 F6 | 	mov	arg01, fp
2c6e4     0C 4E 05 F1 | 	add	fp, #12
2c6e8     A7 14 02 F6 | 	mov	arg02, fp
2c6ec     10 4E 85 F1 | 	sub	fp, #16
2c6f0     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2c6f4     24 4E 05 F1 | 	add	fp, #36
2c6f8     A7 14 02 FB | 	rdlong	arg02, fp
2c6fc     50 14 86 F1 | 	sub	arg02, #80
2c700     09 14 66 F0 | 	shl	arg02, #9
2c704     04 4E 85 F1 | 	sub	fp, #4
2c708     A7 FA 01 FB | 	rdlong	result1, fp
2c70c     01 FA 05 F1 | 	add	result1, #1
2c710     05 FA 65 F0 | 	shl	result1, #5
2c714     FD 14 42 F5 | 	or	arg02, result1
2c718     04 4E 85 F1 | 	sub	fp, #4
2c71c     A7 FA 01 FB | 	rdlong	result1, fp
2c720     FD 14 42 F5 | 	or	arg02, result1
2c724     14 4E 85 F1 | 	sub	fp, #20
2c728     A7 14 62 FC | 	wrlong	arg02, fp
2c72c     10 4E 05 F1 | 	add	fp, #16
2c730     A7 14 02 FB | 	rdlong	arg02, fp
2c734     0B 14 66 F0 | 	shl	arg02, #11
2c738     04 4E 85 F1 | 	sub	fp, #4
2c73c     A7 FA 01 FB | 	rdlong	result1, fp
2c740     05 FA 65 F0 | 	shl	result1, #5
2c744     FD 14 42 F5 | 	or	arg02, result1
2c748     04 4E 85 F1 | 	sub	fp, #4
2c74c     A7 FA 01 FB | 	rdlong	result1, fp
2c750     FD 14 42 F5 | 	or	arg02, result1
2c754     04 4E 85 F1 | 	sub	fp, #4
2c758     A7 14 62 FC | 	wrlong	arg02, fp
2c75c                 | ' 
2c75c                 | '     now = time(0);
2c75c                 | '     _gmtime_r (&now, &date);
2c75c                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2c75c                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2c75c                 | '     return (ffdate << 16) | fftime;
2c75c     04 4E 85 F1 | 	sub	fp, #4
2c760     A7 FA 01 FB | 	rdlong	result1, fp
2c764     10 FA 65 F0 | 	shl	result1, #16
2c768     08 4E 85 F1 | 	sub	fp, #8
2c76c     0A FB 41 F5 | 	or	result1, arg02
2c770     A7 F0 03 F6 | 	mov	ptra, fp
2c774     B2 00 A0 FD | 	call	#popregs_
2c778                 | _fatfs_cc__get_fattime_ret
2c778     2D 00 64 FD | 	ret
2c77c                 | 
2c77c                 | _fatfs_cc_unixtime_0904
2c77c     00 4A 05 F6 | 	mov	COUNT_, #0
2c780     A8 00 A0 FD | 	call	#pushregs_
2c784     34 F0 07 F1 | 	add	ptra, #52
2c788     04 4E 05 F1 | 	add	fp, #4
2c78c     A7 12 62 FC | 	wrlong	arg01, fp
2c790     04 4E 05 F1 | 	add	fp, #4
2c794     A7 14 62 FC | 	wrlong	arg02, fp
2c798     04 4E 85 F1 | 	sub	fp, #4
2c79c     A7 14 02 FB | 	rdlong	arg02, fp
2c7a0     09 14 46 F0 | 	shr	arg02, #9
2c7a4     7F 14 06 F5 | 	and	arg02, #127
2c7a8     50 FA 05 F6 | 	mov	result1, #80
2c7ac     0A FB 01 F1 | 	add	result1, arg02
2c7b0     20 4E 05 F1 | 	add	fp, #32
2c7b4     A7 FA 61 FC | 	wrlong	result1, fp
2c7b8     20 4E 85 F1 | 	sub	fp, #32
2c7bc     A7 FA 01 FB | 	rdlong	result1, fp
2c7c0     05 FA 45 F0 | 	shr	result1, #5
2c7c4     FD FA 41 F8 | 	getnib	result1, result1, #0
2c7c8     01 FA 85 F1 | 	sub	result1, #1
2c7cc     1C 4E 05 F1 | 	add	fp, #28
2c7d0     A7 FA 61 FC | 	wrlong	result1, fp
2c7d4     1C 4E 85 F1 | 	sub	fp, #28
2c7d8     A7 FA 01 FB | 	rdlong	result1, fp
2c7dc     1F FA 05 F5 | 	and	result1, #31
2c7e0     18 4E 05 F1 | 	add	fp, #24
2c7e4     A7 FA 61 FC | 	wrlong	result1, fp
2c7e8     14 4E 85 F1 | 	sub	fp, #20
2c7ec     A7 FA 01 FB | 	rdlong	result1, fp
2c7f0     0B FA 45 F0 | 	shr	result1, #11
2c7f4     1F FA 05 F5 | 	and	result1, #31
2c7f8     10 4E 05 F1 | 	add	fp, #16
2c7fc     A7 FA 61 FC | 	wrlong	result1, fp
2c800     10 4E 85 F1 | 	sub	fp, #16
2c804     A7 FA 01 FB | 	rdlong	result1, fp
2c808     05 FA 45 F0 | 	shr	result1, #5
2c80c     3F FA 05 F5 | 	and	result1, #63
2c810     0C 4E 05 F1 | 	add	fp, #12
2c814     A7 FA 61 FC | 	wrlong	result1, fp
2c818     0C 4E 85 F1 | 	sub	fp, #12
2c81c     A7 14 02 FB | 	rdlong	arg02, fp
2c820     1F 14 06 F5 | 	and	arg02, #31
2c824     01 14 66 F0 | 	shl	arg02, #1
2c828     08 4E 05 F1 | 	add	fp, #8
2c82c     A7 14 62 FC | 	wrlong	arg02, fp
2c830     A7 12 02 F6 | 	mov	arg01, fp
2c834     10 4E 85 F1 | 	sub	fp, #16
2c838     4C FA BF FD | 	call	#_fatfs_cc_mktime
2c83c     0C 4E 05 F1 | 	add	fp, #12
2c840     A7 FA 61 FC | 	wrlong	result1, fp
2c844                 | ' 
2c844                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2c844                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2c844                 | '     date.tm_mday = (dosdate & 0x1f);
2c844                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2c844                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2c844                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2c844                 | ' 
2c844                 | '     t = mktime(&date);
2c844                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2c844                 | '     return t;
2c844     0C 4E 85 F1 | 	sub	fp, #12
2c848     A7 F0 03 F6 | 	mov	ptra, fp
2c84c     B2 00 A0 FD | 	call	#popregs_
2c850                 | _fatfs_cc_unixtime_0904_ret
2c850     2D 00 64 FD | 	ret
2c854                 | 
2c854                 | _fatfs_cc__set_dos_error_0906
2c854     09 01 02 F6 | 	mov	_var01, arg01
2c858                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2c858                 | '     switch (derr) {
2c858     14 00 26 F3 | 	fle	_var01, #20
2c85c     30 00 62 FD | 	jmprel	_var01
2c860                 | LR__4480
2c860     50 00 90 FD | 	jmp	#LR__4481
2c864     84 00 90 FD | 	jmp	#LR__4495
2c868     80 00 90 FD | 	jmp	#LR__4496
2c86c     7C 00 90 FD | 	jmp	#LR__4497
2c870     48 00 90 FD | 	jmp	#LR__4482
2c874     44 00 90 FD | 	jmp	#LR__4483
2c878     40 00 90 FD | 	jmp	#LR__4484
2c87c     44 00 90 FD | 	jmp	#LR__4485
2c880     48 00 90 FD | 	jmp	#LR__4487
2c884     54 00 90 FD | 	jmp	#LR__4490
2c888     38 00 90 FD | 	jmp	#LR__4486
2c88c     4C 00 90 FD | 	jmp	#LR__4491
2c890     48 00 90 FD | 	jmp	#LR__4492
2c894     44 00 90 FD | 	jmp	#LR__4493
2c898     50 00 90 FD | 	jmp	#LR__4498
2c89c     4C 00 90 FD | 	jmp	#LR__4498
2c8a0     48 00 90 FD | 	jmp	#LR__4498
2c8a4     2C 00 90 FD | 	jmp	#LR__4488
2c8a8     38 00 90 FD | 	jmp	#LR__4494
2c8ac     2C 00 90 FD | 	jmp	#LR__4489
2c8b0     38 00 90 FD | 	jmp	#LR__4498
2c8b4                 | LR__4481
2c8b4     00 02 06 F6 | 	mov	_var02, #0
2c8b8                 | '         r = 0;
2c8b8                 | '         break;
2c8b8     34 00 90 FD | 	jmp	#LR__4499
2c8bc                 | LR__4482
2c8bc                 | LR__4483
2c8bc                 | LR__4484
2c8bc     04 02 06 F6 | 	mov	_var02, #4
2c8c0                 | '         r =  4 ;
2c8c0                 | '         break;
2c8c0     2C 00 90 FD | 	jmp	#LR__4499
2c8c4                 | LR__4485
2c8c4                 | LR__4486
2c8c4     06 02 06 F6 | 	mov	_var02, #6
2c8c8                 | '         r =  6 ;
2c8c8                 | '         break;
2c8c8     24 00 90 FD | 	jmp	#LR__4499
2c8cc                 | LR__4487
2c8cc     09 02 06 F6 | 	mov	_var02, #9
2c8d0                 | '         r =  9 ;
2c8d0                 | '         break;
2c8d0     1C 00 90 FD | 	jmp	#LR__4499
2c8d4                 | LR__4488
2c8d4     07 02 06 F6 | 	mov	_var02, #7
2c8d8                 | '         r =  7 ;
2c8d8                 | '         break;
2c8d8     14 00 90 FD | 	jmp	#LR__4499
2c8dc                 | LR__4489
2c8dc                 | LR__4490
2c8dc                 | LR__4491
2c8dc                 | LR__4492
2c8dc                 | LR__4493
2c8dc     0A 02 06 F6 | 	mov	_var02, #10
2c8e0                 | '         r =  10 ;
2c8e0                 | '         break;
2c8e0     0C 00 90 FD | 	jmp	#LR__4499
2c8e4                 | LR__4494
2c8e4     0B 02 06 F6 | 	mov	_var02, #11
2c8e8                 | '         r =  11 ;
2c8e8                 | '         break;
2c8e8     04 00 90 FD | 	jmp	#LR__4499
2c8ec                 | LR__4495
2c8ec                 | LR__4496
2c8ec                 | LR__4497
2c8ec                 | LR__4498
2c8ec     0C 02 06 F6 | 	mov	_var02, #12
2c8f0                 | '         r =  12 ;
2c8f0                 | '         break;
2c8f0                 | LR__4499
2c8f0                 | '     }
2c8f0                 | '     return _seterror(r);
2c8f0     00 02 4E F2 | 	cmps	_var02, #0 wz
2c8f4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c8f8     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2c8fc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c900     01 FA 65 56 |  if_ne	neg	result1, #1
2c904     00 FA 05 A6 |  if_e	mov	result1, #0
2c908                 | _fatfs_cc__set_dos_error_0906_ret
2c908     2D 00 64 FD | 	ret
2c90c                 | 
2c90c                 | _fatfs_cc_v_creat
2c90c     04 4A 05 F6 | 	mov	COUNT_, #4
2c910     A8 00 A0 FD | 	call	#pushregs_
2c914     09 1F 02 F6 | 	mov	local01, arg01
2c918     0A 21 02 F6 | 	mov	local02, arg02
2c91c     03 00 00 FF 
2c920     3C 12 06 F6 | 	mov	arg01, ##1596
2c924                 | '     return _gc_alloc(size);
2c924     10 14 06 F6 | 	mov	arg02, #16
2c928     2C 60 BF FD | 	call	#__system___gc_doalloc
2c92c     FD 22 0A F6 | 	mov	local03, result1 wz
2c930                 | '       return _seterror( 7 );
2c930     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c934     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2c938     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c93c     01 FA 65 A6 |  if_e	neg	result1, #1
2c940     58 00 90 AD |  if_e	jmp	#LR__4501
2c944     11 13 02 F6 | 	mov	arg01, local03
2c948     00 14 06 F6 | 	mov	arg02, #0
2c94c     03 00 00 FF 
2c950     3C 16 06 F6 | 	mov	arg03, ##1596
2c954     98 00 A0 FD | 	call	#\builtin_bytefill_
2c958     02 00 00 FF 
2c95c     14 22 06 F1 | 	add	local03, ##1044
2c960     11 13 02 F6 | 	mov	arg01, local03
2c964     02 00 00 FF 
2c968     14 22 86 F1 | 	sub	local03, ##1044
2c96c     10 15 02 F6 | 	mov	arg02, local02
2c970     07 16 06 F6 | 	mov	arg03, #7
2c974     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2c978     FD 24 0A F6 | 	mov	local04, result1 wz
2c97c     14 00 90 AD |  if_e	jmp	#LR__4500
2c980     11 13 02 F6 | 	mov	arg01, local03
2c984                 | '     return _gc_free(ptr);
2c984     DC 60 BF FD | 	call	#__system___gc_free
2c988                 | '     free(f);
2c988                 | '     return _set_dos_error(r);
2c988     12 13 02 F6 | 	mov	arg01, local04
2c98c     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2c990     08 00 90 FD | 	jmp	#LR__4501
2c994                 | LR__4500
2c994     0F 23 62 FC | 	wrlong	local03, local01
2c998                 | '   }
2c998                 | '   fil->vfsdata = f;
2c998                 | '   return 0;
2c998     00 FA 05 F6 | 	mov	result1, #0
2c99c                 | LR__4501
2c99c     A7 F0 03 F6 | 	mov	ptra, fp
2c9a0     B2 00 A0 FD | 	call	#popregs_
2c9a4                 | _fatfs_cc_v_creat_ret
2c9a4     2D 00 64 FD | 	ret
2c9a8                 | 
2c9a8                 | _fatfs_cc_v_close
2c9a8     02 4A 05 F6 | 	mov	COUNT_, #2
2c9ac     A8 00 A0 FD | 	call	#pushregs_
2c9b0     09 1F 02 FB | 	rdlong	local01, arg01
2c9b4     02 00 00 FF 
2c9b8     14 1E 06 F1 | 	add	local01, ##1044
2c9bc     0F 13 02 F6 | 	mov	arg01, local01
2c9c0     02 00 00 FF 
2c9c4     14 1E 86 F1 | 	sub	local01, ##1044
2c9c8     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2c9cc     FD 20 02 F6 | 	mov	local02, result1
2c9d0     0F 13 02 F6 | 	mov	arg01, local01
2c9d4                 | '     return _gc_free(ptr);
2c9d4     8C 60 BF FD | 	call	#__system___gc_free
2c9d8                 | '     FAT_FIL *f = fil->vfsdata;
2c9d8                 | '     r=f_close(&f->fil);
2c9d8                 | '     free(f);
2c9d8                 | '     return _set_dos_error(r);
2c9d8     10 13 02 F6 | 	mov	arg01, local02
2c9dc     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2c9e0     A7 F0 03 F6 | 	mov	ptra, fp
2c9e4     B2 00 A0 FD | 	call	#popregs_
2c9e8                 | _fatfs_cc_v_close_ret
2c9e8     2D 00 64 FD | 	ret
2c9ec                 | 
2c9ec                 | _fatfs_cc_v_opendir
2c9ec     04 4A 05 F6 | 	mov	COUNT_, #4
2c9f0     A8 00 A0 FD | 	call	#pushregs_
2c9f4     09 1F 02 F6 | 	mov	local01, arg01
2c9f8     0A 21 02 F6 | 	mov	local02, arg02
2c9fc     30 12 06 F6 | 	mov	arg01, #48
2ca00                 | '     return _gc_alloc(size);
2ca00     10 14 06 F6 | 	mov	arg02, #16
2ca04     50 5F BF FD | 	call	#__system___gc_doalloc
2ca08     FD 22 0A F6 | 	mov	local03, result1 wz
2ca0c                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ca0c                 | '       return _seterror( 7 );
2ca0c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ca10     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2ca14     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ca18     01 FA 65 A6 |  if_e	neg	result1, #1
2ca1c     34 00 90 AD |  if_e	jmp	#LR__4511
2ca20     10 15 02 F6 | 	mov	arg02, local02
2ca24     11 13 02 F6 | 	mov	arg01, local03
2ca28     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2ca2c     FD 24 0A F6 | 	mov	local04, result1 wz
2ca30     14 00 90 AD |  if_e	jmp	#LR__4510
2ca34     11 13 02 F6 | 	mov	arg01, local03
2ca38                 | '     return _gc_free(ptr);
2ca38     28 60 BF FD | 	call	#__system___gc_free
2ca3c                 | '         free(f);
2ca3c                 | '         return _set_dos_error(r);
2ca3c     12 13 02 F6 | 	mov	arg01, local04
2ca40     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2ca44     0C 00 90 FD | 	jmp	#LR__4511
2ca48                 | LR__4510
2ca48     04 1E 06 F1 | 	add	local01, #4
2ca4c     0F 23 62 FC | 	wrlong	local03, local01
2ca50                 | '     }
2ca50                 | '     dir->vfsdata = f;
2ca50                 | '     return 0;
2ca50     00 FA 05 F6 | 	mov	result1, #0
2ca54                 | LR__4511
2ca54     A7 F0 03 F6 | 	mov	ptra, fp
2ca58     B2 00 A0 FD | 	call	#popregs_
2ca5c                 | _fatfs_cc_v_opendir_ret
2ca5c     2D 00 64 FD | 	ret
2ca60                 | 
2ca60                 | _fatfs_cc_v_closedir
2ca60     02 4A 05 F6 | 	mov	COUNT_, #2
2ca64     A8 00 A0 FD | 	call	#pushregs_
2ca68     04 12 06 F1 | 	add	arg01, #4
2ca6c     09 1F 02 FB | 	rdlong	local01, arg01
2ca70     0F 13 02 F6 | 	mov	arg01, local01
2ca74     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2ca78     FD 20 02 F6 | 	mov	local02, result1
2ca7c     0F 13 02 F6 | 	mov	arg01, local01
2ca80                 | '     return _gc_free(ptr);
2ca80     E0 5F BF FD | 	call	#__system___gc_free
2ca84     00 20 0E F2 | 	cmp	local02, #0 wz
2ca88     10 13 02 56 |  if_ne	mov	arg01, local02
2ca8c     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0906
2ca90                 | '     return r;
2ca90     10 FB 01 F6 | 	mov	result1, local02
2ca94     A7 F0 03 F6 | 	mov	ptra, fp
2ca98     B2 00 A0 FD | 	call	#popregs_
2ca9c                 | _fatfs_cc_v_closedir_ret
2ca9c     2D 00 64 FD | 	ret
2caa0                 | 
2caa0                 | _fatfs_cc_v_readdir
2caa0     01 4A 05 F6 | 	mov	COUNT_, #1
2caa4     A8 00 A0 FD | 	call	#pushregs_
2caa8     2C F1 07 F1 | 	add	ptra, #300
2caac     04 4E 05 F1 | 	add	fp, #4
2cab0     A7 12 62 FC | 	wrlong	arg01, fp
2cab4     04 4E 05 F1 | 	add	fp, #4
2cab8     A7 14 62 FC | 	wrlong	arg02, fp
2cabc     04 4E 85 F1 | 	sub	fp, #4
2cac0     A7 16 02 FB | 	rdlong	arg03, fp
2cac4     04 16 06 F1 | 	add	arg03, #4
2cac8     0B 13 02 FB | 	rdlong	arg01, arg03
2cacc     08 4E 05 F1 | 	add	fp, #8
2cad0     A7 14 02 F6 | 	mov	arg02, fp
2cad4     0C 4E 85 F1 | 	sub	fp, #12
2cad8     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2cadc     28 4F 05 F1 | 	add	fp, #296
2cae0     A7 FA 61 FC | 	wrlong	result1, fp
2cae4     28 4F 85 F1 | 	sub	fp, #296
2cae8     00 FA 0D F2 | 	cmp	result1, #0 wz
2caec     14 00 90 AD |  if_e	jmp	#LR__4520
2caf0                 | '         return _set_dos_error(r);
2caf0     28 4F 05 F1 | 	add	fp, #296
2caf4     A7 12 02 FB | 	rdlong	arg01, fp
2caf8     28 4F 85 F1 | 	sub	fp, #296
2cafc     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2cb00     C4 00 90 FD | 	jmp	#LR__4523
2cb04                 | LR__4520
2cb04     28 4E 05 F1 | 	add	fp, #40
2cb08     A7 16 CA FA | 	rdbyte	arg03, fp wz
2cb0c     28 4E 85 F1 | 	sub	fp, #40
2cb10                 | '         return -1;
2cb10     01 FA 65 A6 |  if_e	neg	result1, #1
2cb14     B0 00 90 AD |  if_e	jmp	#LR__4523
2cb18     08 4E 05 F1 | 	add	fp, #8
2cb1c     A7 12 02 FB | 	rdlong	arg01, fp
2cb20     20 4E 05 F1 | 	add	fp, #32
2cb24     A7 14 02 F6 | 	mov	arg02, fp
2cb28     28 4E 85 F1 | 	sub	fp, #40
2cb2c     3F 16 06 F6 | 	mov	arg03, #63
2cb30     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2cb34     08 4E 05 F1 | 	add	fp, #8
2cb38     A7 16 02 FB | 	rdlong	arg03, fp
2cb3c     3F 16 06 F1 | 	add	arg03, #63
2cb40     0B 01 48 FC | 	wrbyte	#0, arg03
2cb44     0C 4E 05 F1 | 	add	fp, #12
2cb48     A7 16 C2 FA | 	rdbyte	arg03, fp
2cb4c     14 4E 85 F1 | 	sub	fp, #20
2cb50     10 16 CE F7 | 	test	arg03, #16 wz
2cb54     18 00 90 AD |  if_e	jmp	#LR__4521
2cb58     08 4E 05 F1 | 	add	fp, #8
2cb5c     A7 16 02 FB | 	rdlong	arg03, fp
2cb60     08 4E 85 F1 | 	sub	fp, #8
2cb64     50 16 06 F1 | 	add	arg03, #80
2cb68     0B 03 48 FC | 	wrbyte	#1, arg03
2cb6c     14 00 90 FD | 	jmp	#LR__4522
2cb70                 | LR__4521
2cb70     08 4E 05 F1 | 	add	fp, #8
2cb74     A7 16 02 FB | 	rdlong	arg03, fp
2cb78     08 4E 85 F1 | 	sub	fp, #8
2cb7c     50 16 06 F1 | 	add	arg03, #80
2cb80     0B 01 48 FC | 	wrbyte	#0, arg03
2cb84                 | LR__4522
2cb84     08 4E 05 F1 | 	add	fp, #8
2cb88     A7 16 02 FB | 	rdlong	arg03, fp
2cb8c     04 4E 05 F1 | 	add	fp, #4
2cb90     A7 14 02 FB | 	rdlong	arg02, fp
2cb94     48 16 06 F1 | 	add	arg03, #72
2cb98     0B 15 62 FC | 	wrlong	arg02, arg03
2cb9c     04 4E 85 F1 | 	sub	fp, #4
2cba0     A7 1E 02 FB | 	rdlong	local01, fp
2cba4     08 4E 05 F1 | 	add	fp, #8
2cba8     A7 12 E2 FA | 	rdword	arg01, fp
2cbac     02 4E 05 F1 | 	add	fp, #2
2cbb0     A7 14 E2 FA | 	rdword	arg02, fp
2cbb4     12 4E 85 F1 | 	sub	fp, #18
2cbb8     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0904
2cbbc     4C 1E 06 F1 | 	add	local01, #76
2cbc0     0F FB 61 FC | 	wrlong	result1, local01
2cbc4                 | '         ent->d_type =  (0) ;
2cbc4                 | '     }
2cbc4                 | '     ent->d_size = finfo.fsize;
2cbc4                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2cbc4                 | '     return 0;
2cbc4     00 FA 05 F6 | 	mov	result1, #0
2cbc8                 | LR__4523
2cbc8     A7 F0 03 F6 | 	mov	ptra, fp
2cbcc     B2 00 A0 FD | 	call	#popregs_
2cbd0                 | _fatfs_cc_v_readdir_ret
2cbd0     2D 00 64 FD | 	ret
2cbd4                 | 
2cbd4                 | _fatfs_cc_v_stat
2cbd4     03 4A 05 F6 | 	mov	COUNT_, #3
2cbd8     A8 00 A0 FD | 	call	#pushregs_
2cbdc     30 F1 07 F1 | 	add	ptra, #304
2cbe0     04 4E 05 F1 | 	add	fp, #4
2cbe4     A7 12 62 FC | 	wrlong	arg01, fp
2cbe8     04 4E 05 F1 | 	add	fp, #4
2cbec     A7 14 62 FC | 	wrlong	arg02, fp
2cbf0     08 4E 85 F1 | 	sub	fp, #8
2cbf4     0A 13 02 F6 | 	mov	arg01, arg02
2cbf8     00 14 06 F6 | 	mov	arg02, #0
2cbfc     30 16 06 F6 | 	mov	arg03, #48
2cc00     98 00 A0 FD | 	call	#\builtin_bytefill_
2cc04     04 4E 05 F1 | 	add	fp, #4
2cc08     A7 FA 01 FB | 	rdlong	result1, fp
2cc0c     04 4E 85 F1 | 	sub	fp, #4
2cc10     FD FA C9 FA | 	rdbyte	result1, result1 wz
2cc14     2C 00 90 AD |  if_e	jmp	#LR__4530
2cc18     04 4E 05 F1 | 	add	fp, #4
2cc1c     A7 FA 01 FB | 	rdlong	result1, fp
2cc20     04 4E 85 F1 | 	sub	fp, #4
2cc24     FD FA C1 FA | 	rdbyte	result1, result1
2cc28     2E FA 0D F2 | 	cmp	result1, #46 wz
2cc2c     04 4E 05 A1 |  if_e	add	fp, #4
2cc30     A7 1E 02 AB |  if_e	rdlong	local01, fp
2cc34     04 4E 85 A1 |  if_e	sub	fp, #4
2cc38     01 1E 06 A1 |  if_e	add	local01, #1
2cc3c     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2cc40     18 00 90 5D |  if_ne	jmp	#LR__4531
2cc44                 | LR__4530
2cc44     18 4E 05 F1 | 	add	fp, #24
2cc48     A7 20 48 FC | 	wrbyte	#16, fp
2cc4c     0C 4E 85 F1 | 	sub	fp, #12
2cc50     A7 00 68 FC | 	wrlong	#0, fp
2cc54     0C 4E 85 F1 | 	sub	fp, #12
2cc58     24 00 90 FD | 	jmp	#LR__4532
2cc5c                 | LR__4531
2cc5c     04 4E 05 F1 | 	add	fp, #4
2cc60     A7 12 02 FB | 	rdlong	arg01, fp
2cc64     0C 4E 05 F1 | 	add	fp, #12
2cc68     A7 14 02 F6 | 	mov	arg02, fp
2cc6c     10 4E 85 F1 | 	sub	fp, #16
2cc70     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2cc74     0C 4E 05 F1 | 	add	fp, #12
2cc78     A7 FA 61 FC | 	wrlong	result1, fp
2cc7c     0C 4E 85 F1 | 	sub	fp, #12
2cc80                 | LR__4532
2cc80     0C 4E 05 F1 | 	add	fp, #12
2cc84     A7 20 0A FB | 	rdlong	local02, fp wz
2cc88     0C 4E 85 F1 | 	sub	fp, #12
2cc8c     14 00 90 AD |  if_e	jmp	#LR__4533
2cc90                 | '         return _set_dos_error(r);
2cc90     0C 4E 05 F1 | 	add	fp, #12
2cc94     A7 12 02 FB | 	rdlong	arg01, fp
2cc98     0C 4E 85 F1 | 	sub	fp, #12
2cc9c     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2cca0     14 01 90 FD | 	jmp	#LR__4534
2cca4                 | LR__4533
2cca4     2C 4F 05 F1 | 	add	fp, #300
2cca8     A7 48 6A FC | 	wrlong	#292, fp
2ccac     14 4F 85 F1 | 	sub	fp, #276
2ccb0     A7 22 C2 FA | 	rdbyte	local03, fp
2ccb4     18 4E 85 F1 | 	sub	fp, #24
2ccb8     01 22 CE F7 | 	test	local03, #1 wz
2ccbc     2C 4F 05 A1 |  if_e	add	fp, #300
2ccc0     A7 22 02 AB |  if_e	rdlong	local03, fp
2ccc4     92 22 46 A5 |  if_e	or	local03, #146
2ccc8     A7 22 62 AC |  if_e	wrlong	local03, fp
2cccc     2C 4F 85 A1 |  if_e	sub	fp, #300
2ccd0     18 4E 05 F1 | 	add	fp, #24
2ccd4     A7 22 C2 FA | 	rdbyte	local03, fp
2ccd8     18 4E 85 F1 | 	sub	fp, #24
2ccdc     10 22 CE F7 | 	test	local03, #16 wz
2cce0     2C 4F 05 51 |  if_ne	add	fp, #300
2cce4     A7 22 02 5B |  if_ne	rdlong	local03, fp
2cce8     08 00 00 5F 
2ccec     49 22 46 55 |  if_ne	or	local03, ##4169
2ccf0     A7 22 62 5C |  if_ne	wrlong	local03, fp
2ccf4     2C 4F 85 51 |  if_ne	sub	fp, #300
2ccf8     08 4E 05 F1 | 	add	fp, #8
2ccfc     A7 22 02 FB | 	rdlong	local03, fp
2cd00     24 4F 05 F1 | 	add	fp, #292
2cd04     A7 20 02 FB | 	rdlong	local02, fp
2cd08     08 22 06 F1 | 	add	local03, #8
2cd0c     11 21 62 FC | 	wrlong	local02, local03
2cd10     24 4F 85 F1 | 	sub	fp, #292
2cd14     A7 22 02 FB | 	rdlong	local03, fp
2cd18     0C 22 06 F1 | 	add	local03, #12
2cd1c     11 03 68 FC | 	wrlong	#1, local03
2cd20     A7 22 02 FB | 	rdlong	local03, fp
2cd24     08 4E 05 F1 | 	add	fp, #8
2cd28     A7 20 02 FB | 	rdlong	local02, fp
2cd2c     18 22 06 F1 | 	add	local03, #24
2cd30     11 21 62 FC | 	wrlong	local02, local03
2cd34     08 4E 85 F1 | 	sub	fp, #8
2cd38     A7 22 02 FB | 	rdlong	local03, fp
2cd3c     1C 22 06 F1 | 	add	local03, #28
2cd40     01 00 80 FF 
2cd44     11 01 68 FC | 	wrlong	##512, local03
2cd48     A7 20 02 FB | 	rdlong	local02, fp
2cd4c     10 23 02 F6 | 	mov	local03, local02
2cd50     18 20 06 F1 | 	add	local02, #24
2cd54     10 21 02 FB | 	rdlong	local02, local02
2cd58     FF 21 06 F1 | 	add	local02, #511
2cd5c     10 21 52 F6 | 	abs	local02, local02 wc
2cd60     09 20 46 F0 | 	shr	local02, #9
2cd64     10 21 82 F6 | 	negc	local02, local02
2cd68     20 22 06 F1 | 	add	local03, #32
2cd6c     11 21 62 FC | 	wrlong	local02, local03
2cd70     A7 20 02 FB | 	rdlong	local02, fp
2cd74     10 23 02 F6 | 	mov	local03, local02
2cd78     10 1F 02 F6 | 	mov	local01, local02
2cd7c     0C 4E 05 F1 | 	add	fp, #12
2cd80     A7 12 E2 FA | 	rdword	arg01, fp
2cd84     02 4E 05 F1 | 	add	fp, #2
2cd88     A7 14 E2 FA | 	rdword	arg02, fp
2cd8c     16 4E 85 F1 | 	sub	fp, #22
2cd90     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0904
2cd94     2C 1E 06 F1 | 	add	local01, #44
2cd98     0F FB 61 FC | 	wrlong	result1, local01
2cd9c     28 20 06 F1 | 	add	local02, #40
2cda0     10 FB 61 FC | 	wrlong	result1, local02
2cda4     24 22 06 F1 | 	add	local03, #36
2cda8     11 FB 61 FC | 	wrlong	result1, local03
2cdac                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2cdac                 | '     }
2cdac                 | '     buf->st_mode = mode;
2cdac                 | '     buf->st_nlink = 1;
2cdac                 | '     buf->st_size = finfo.fsize;
2cdac                 | '     buf->st_blksize = 512;
2cdac                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2cdac                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2cdac                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2cdac                 | '     return r;
2cdac     0C 4E 05 F1 | 	add	fp, #12
2cdb0     A7 FA 01 FB | 	rdlong	result1, fp
2cdb4     0C 4E 85 F1 | 	sub	fp, #12
2cdb8                 | LR__4534
2cdb8     A7 F0 03 F6 | 	mov	ptra, fp
2cdbc     B2 00 A0 FD | 	call	#popregs_
2cdc0                 | _fatfs_cc_v_stat_ret
2cdc0     2D 00 64 FD | 	ret
2cdc4                 | 
2cdc4                 | _fatfs_cc_v_read
2cdc4     00 4A 05 F6 | 	mov	COUNT_, #0
2cdc8     A8 00 A0 FD | 	call	#pushregs_
2cdcc     1C F0 07 F1 | 	add	ptra, #28
2cdd0     04 4E 05 F1 | 	add	fp, #4
2cdd4     A7 12 62 FC | 	wrlong	arg01, fp
2cdd8     04 4E 05 F1 | 	add	fp, #4
2cddc     A7 14 62 FC | 	wrlong	arg02, fp
2cde0     04 4E 05 F1 | 	add	fp, #4
2cde4     A7 16 62 FC | 	wrlong	arg03, fp
2cde8     08 4E 85 F1 | 	sub	fp, #8
2cdec     A7 12 02 FB | 	rdlong	arg01, fp
2cdf0     09 13 0A FB | 	rdlong	arg01, arg01 wz
2cdf4     0C 4E 05 F1 | 	add	fp, #12
2cdf8     A7 12 62 FC | 	wrlong	arg01, fp
2cdfc     10 4E 85 F1 | 	sub	fp, #16
2ce00                 | '         return _seterror( 5 );
2ce00     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ce04     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2ce08     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ce0c     01 FA 65 A6 |  if_e	neg	result1, #1
2ce10     B8 00 90 AD |  if_e	jmp	#LR__4542
2ce14     10 4E 05 F1 | 	add	fp, #16
2ce18     A7 12 02 FB | 	rdlong	arg01, fp
2ce1c     02 00 00 FF 
2ce20     14 12 06 F1 | 	add	arg01, ##1044
2ce24     08 4E 85 F1 | 	sub	fp, #8
2ce28     A7 14 02 FB | 	rdlong	arg02, fp
2ce2c     04 4E 05 F1 | 	add	fp, #4
2ce30     A7 16 02 FB | 	rdlong	arg03, fp
2ce34     0C 4E 05 F1 | 	add	fp, #12
2ce38     A7 18 02 F6 | 	mov	arg04, fp
2ce3c     18 4E 85 F1 | 	sub	fp, #24
2ce40     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2ce44     14 4E 05 F1 | 	add	fp, #20
2ce48     A7 FA 61 FC | 	wrlong	result1, fp
2ce4c     14 4E 85 F1 | 	sub	fp, #20
2ce50     00 FA 0D F2 | 	cmp	result1, #0 wz
2ce54     34 00 90 AD |  if_e	jmp	#LR__4540
2ce58     04 4E 05 F1 | 	add	fp, #4
2ce5c     A7 18 02 FB | 	rdlong	arg04, fp
2ce60     0C 17 02 F6 | 	mov	arg03, arg04
2ce64     08 18 06 F1 | 	add	arg04, #8
2ce68     0C 19 02 FB | 	rdlong	arg04, arg04
2ce6c     20 18 46 F5 | 	or	arg04, #32
2ce70     08 16 06 F1 | 	add	arg03, #8
2ce74     0B 19 62 FC | 	wrlong	arg04, arg03
2ce78                 | '         fil->state |=  (0x20) ;
2ce78                 | '         return _set_dos_error(r);
2ce78     10 4E 05 F1 | 	add	fp, #16
2ce7c     A7 12 02 FB | 	rdlong	arg01, fp
2ce80     14 4E 85 F1 | 	sub	fp, #20
2ce84     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2ce88     40 00 90 FD | 	jmp	#LR__4542
2ce8c                 | LR__4540
2ce8c     18 4E 05 F1 | 	add	fp, #24
2ce90     A7 FA 09 FB | 	rdlong	result1, fp wz
2ce94     18 4E 85 F1 | 	sub	fp, #24
2ce98     24 00 90 5D |  if_ne	jmp	#LR__4541
2ce9c     04 4E 05 F1 | 	add	fp, #4
2cea0     A7 FA 01 FB | 	rdlong	result1, fp
2cea4     FD 18 02 F6 | 	mov	arg04, result1
2cea8     04 4E 85 F1 | 	sub	fp, #4
2ceac     08 FA 05 F1 | 	add	result1, #8
2ceb0     FD FA 01 FB | 	rdlong	result1, result1
2ceb4     10 FA 45 F5 | 	or	result1, #16
2ceb8     08 18 06 F1 | 	add	arg04, #8
2cebc     0C FB 61 FC | 	wrlong	result1, arg04
2cec0                 | LR__4541
2cec0                 | '         fil->state |=  (0x10) ;
2cec0                 | '     }
2cec0                 | '     return x;
2cec0     18 4E 05 F1 | 	add	fp, #24
2cec4     A7 FA 01 FB | 	rdlong	result1, fp
2cec8     18 4E 85 F1 | 	sub	fp, #24
2cecc                 | LR__4542
2cecc     A7 F0 03 F6 | 	mov	ptra, fp
2ced0     B2 00 A0 FD | 	call	#popregs_
2ced4                 | _fatfs_cc_v_read_ret
2ced4     2D 00 64 FD | 	ret
2ced8                 | 
2ced8                 | _fatfs_cc_v_write
2ced8     00 4A 05 F6 | 	mov	COUNT_, #0
2cedc     A8 00 A0 FD | 	call	#pushregs_
2cee0     1C F0 07 F1 | 	add	ptra, #28
2cee4     04 4E 05 F1 | 	add	fp, #4
2cee8     A7 12 62 FC | 	wrlong	arg01, fp
2ceec     04 4E 05 F1 | 	add	fp, #4
2cef0     A7 14 62 FC | 	wrlong	arg02, fp
2cef4     04 4E 05 F1 | 	add	fp, #4
2cef8     A7 16 62 FC | 	wrlong	arg03, fp
2cefc     08 4E 85 F1 | 	sub	fp, #8
2cf00     A7 12 02 FB | 	rdlong	arg01, fp
2cf04     09 13 0A FB | 	rdlong	arg01, arg01 wz
2cf08     0C 4E 05 F1 | 	add	fp, #12
2cf0c     A7 12 62 FC | 	wrlong	arg01, fp
2cf10     10 4E 85 F1 | 	sub	fp, #16
2cf14                 | '         return _seterror( 5 );
2cf14     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2cf18     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2cf1c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cf20     01 FA 65 A6 |  if_e	neg	result1, #1
2cf24     84 00 90 AD |  if_e	jmp	#LR__4551
2cf28     10 4E 05 F1 | 	add	fp, #16
2cf2c     A7 12 02 FB | 	rdlong	arg01, fp
2cf30     02 00 00 FF 
2cf34     14 12 06 F1 | 	add	arg01, ##1044
2cf38     08 4E 85 F1 | 	sub	fp, #8
2cf3c     A7 14 02 FB | 	rdlong	arg02, fp
2cf40     04 4E 05 F1 | 	add	fp, #4
2cf44     A7 16 02 FB | 	rdlong	arg03, fp
2cf48     0C 4E 05 F1 | 	add	fp, #12
2cf4c     A7 18 02 F6 | 	mov	arg04, fp
2cf50     18 4E 85 F1 | 	sub	fp, #24
2cf54     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2cf58     14 4E 05 F1 | 	add	fp, #20
2cf5c     A7 FA 61 FC | 	wrlong	result1, fp
2cf60     14 4E 85 F1 | 	sub	fp, #20
2cf64     00 FA 0D F2 | 	cmp	result1, #0 wz
2cf68     34 00 90 AD |  if_e	jmp	#LR__4550
2cf6c     04 4E 05 F1 | 	add	fp, #4
2cf70     A7 18 02 FB | 	rdlong	arg04, fp
2cf74     0C 17 02 F6 | 	mov	arg03, arg04
2cf78     08 18 06 F1 | 	add	arg04, #8
2cf7c     0C 19 02 FB | 	rdlong	arg04, arg04
2cf80     20 18 46 F5 | 	or	arg04, #32
2cf84     08 16 06 F1 | 	add	arg03, #8
2cf88     0B 19 62 FC | 	wrlong	arg04, arg03
2cf8c                 | '         fil->state |=  (0x20) ;
2cf8c                 | '         return _set_dos_error(r);
2cf8c     10 4E 05 F1 | 	add	fp, #16
2cf90     A7 12 02 FB | 	rdlong	arg01, fp
2cf94     14 4E 85 F1 | 	sub	fp, #20
2cf98     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2cf9c     0C 00 90 FD | 	jmp	#LR__4551
2cfa0                 | LR__4550
2cfa0                 | '     }
2cfa0                 | '     return x;
2cfa0     18 4E 05 F1 | 	add	fp, #24
2cfa4     A7 FA 01 FB | 	rdlong	result1, fp
2cfa8     18 4E 85 F1 | 	sub	fp, #24
2cfac                 | LR__4551
2cfac     A7 F0 03 F6 | 	mov	ptra, fp
2cfb0     B2 00 A0 FD | 	call	#popregs_
2cfb4                 | _fatfs_cc_v_write_ret
2cfb4     2D 00 64 FD | 	ret
2cfb8                 | 
2cfb8                 | _fatfs_cc_v_lseek
2cfb8     04 4A 05 F6 | 	mov	COUNT_, #4
2cfbc     A8 00 A0 FD | 	call	#pushregs_
2cfc0     0A 1F 02 F6 | 	mov	local01, arg02
2cfc4     0B 21 02 F6 | 	mov	local02, arg03
2cfc8     09 23 02 FB | 	rdlong	local03, arg01
2cfcc     02 00 00 FF 
2cfd0     14 22 0E F1 | 	add	local03, ##1044 wz
2cfd4                 | '         return _seterror( 5 );
2cfd4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2cfd8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2cfdc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cfe0     01 FA 65 A6 |  if_e	neg	result1, #1
2cfe4     4C 00 90 AD |  if_e	jmp	#LR__4562
2cfe8     00 20 0E F2 | 	cmp	local02, #0 wz
2cfec     24 00 90 AD |  if_e	jmp	#LR__4560
2cff0     01 20 0E F2 | 	cmp	local02, #1 wz
2cff4     14 22 06 A1 |  if_e	add	local03, #20
2cff8     11 25 02 AB |  if_e	rdlong	local04, local03
2cffc     14 22 86 A1 |  if_e	sub	local03, #20
2d000     12 1F 02 A1 |  if_e	add	local01, local04
2d004     0C 22 06 51 |  if_ne	add	local03, #12
2d008     11 25 02 5B |  if_ne	rdlong	local04, local03
2d00c     0C 22 86 51 |  if_ne	sub	local03, #12
2d010     12 1F 02 51 |  if_ne	add	local01, local04
2d014                 | LR__4560
2d014     0F 15 02 F6 | 	mov	arg02, local01
2d018     11 13 02 F6 | 	mov	arg01, local03
2d01c     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2d020     FD 12 0A F6 | 	mov	arg01, result1 wz
2d024     08 00 90 AD |  if_e	jmp	#LR__4561
2d028                 | '         return _set_dos_error(result);
2d028     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d02c     04 00 90 FD | 	jmp	#LR__4562
2d030                 | LR__4561
2d030                 | '     }
2d030                 | '     return offset;
2d030     0F FB 01 F6 | 	mov	result1, local01
2d034                 | LR__4562
2d034     A7 F0 03 F6 | 	mov	ptra, fp
2d038     B2 00 A0 FD | 	call	#popregs_
2d03c                 | _fatfs_cc_v_lseek_ret
2d03c     2D 00 64 FD | 	ret
2d040                 | 
2d040                 | _fatfs_cc_v_ioctl
2d040                 | ' {
2d040                 | '     return _seterror( 10 );
2d040     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d044     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2d048     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d04c     01 FA 65 F6 | 	neg	result1, #1
2d050                 | _fatfs_cc_v_ioctl_ret
2d050     2D 00 64 FD | 	ret
2d054                 | 
2d054                 | _fatfs_cc_v_mkdir
2d054     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2d058     FD 12 02 F6 | 	mov	arg01, result1
2d05c                 | ' 
2d05c                 | '     r = f_mkdir(name);
2d05c                 | '     return _set_dos_error(r);
2d05c     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d060                 | _fatfs_cc_v_mkdir_ret
2d060     2D 00 64 FD | 	ret
2d064                 | 
2d064                 | _fatfs_cc_v_remove
2d064     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2d068     FD 12 02 F6 | 	mov	arg01, result1
2d06c                 | ' 
2d06c                 | '     r = f_unlink(name);
2d06c                 | '     return _set_dos_error(r);
2d06c     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d070                 | _fatfs_cc_v_remove_ret
2d070     2D 00 64 FD | 	ret
2d074                 | 
2d074                 | _fatfs_cc_v_rmdir
2d074     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2d078     FD 12 02 F6 | 	mov	arg01, result1
2d07c                 | ' 
2d07c                 | '     r = f_unlink(name);
2d07c                 | '     return _set_dos_error(r);
2d07c     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d080                 | _fatfs_cc_v_rmdir_ret
2d080     2D 00 64 FD | 	ret
2d084                 | 
2d084                 | _fatfs_cc_v_rename
2d084     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2d088     FD 12 02 F6 | 	mov	arg01, result1
2d08c                 | '     return _set_dos_error(r);
2d08c     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d090                 | _fatfs_cc_v_rename_ret
2d090     2D 00 64 FD | 	ret
2d094                 | 
2d094                 | _fatfs_cc_v_open
2d094     07 4A 05 F6 | 	mov	COUNT_, #7
2d098     A8 00 A0 FD | 	call	#pushregs_
2d09c     09 1F 02 F6 | 	mov	local01, arg01
2d0a0     0A 21 02 F6 | 	mov	local02, arg02
2d0a4     0B 23 02 F6 | 	mov	local03, arg03
2d0a8     03 00 00 FF 
2d0ac     3C 12 06 F6 | 	mov	arg01, ##1596
2d0b0                 | '     return _gc_alloc(size);
2d0b0     10 14 06 F6 | 	mov	arg02, #16
2d0b4     A0 58 BF FD | 	call	#__system___gc_doalloc
2d0b8     FD 24 0A F6 | 	mov	local04, result1 wz
2d0bc                 | '       return _seterror( 7 );
2d0bc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d0c0     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2d0c4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d0c8     01 FA 65 A6 |  if_e	neg	result1, #1
2d0cc     98 00 90 AD |  if_e	jmp	#LR__4576
2d0d0     12 13 02 F6 | 	mov	arg01, local04
2d0d4     00 14 06 F6 | 	mov	arg02, #0
2d0d8     03 00 00 FF 
2d0dc     3C 16 06 F6 | 	mov	arg03, ##1596
2d0e0     98 00 A0 FD | 	call	#\builtin_bytefill_
2d0e4                 | '   switch (flags & 3) {
2d0e4     11 27 02 F6 | 	mov	local05, local03
2d0e8     03 26 0E F5 | 	and	local05, #3 wz
2d0ec     0C 00 90 AD |  if_e	jmp	#LR__4570
2d0f0     01 26 0E F2 | 	cmp	local05, #1 wz
2d0f4     0C 00 90 AD |  if_e	jmp	#LR__4571
2d0f8     10 00 90 FD | 	jmp	#LR__4572
2d0fc                 | LR__4570
2d0fc     01 28 06 F6 | 	mov	local06, #1
2d100                 | '       fs_flags =  0x01 ;
2d100                 | '       break;
2d100     0C 00 90 FD | 	jmp	#LR__4573
2d104                 | LR__4571
2d104     02 28 06 F6 | 	mov	local06, #2
2d108                 | '       fs_flags =  0x02 ;
2d108                 | '       break;
2d108     04 00 90 FD | 	jmp	#LR__4573
2d10c                 | LR__4572
2d10c     03 28 06 F6 | 	mov	local06, #3
2d110                 | '       fs_flags =  0x01  |  0x02 ;
2d110                 | '       break;
2d110                 | LR__4573
2d110     08 22 CE F7 | 	test	local03, #8 wz
2d114     18 28 46 55 |  if_ne	or	local06, #24
2d118     08 00 90 5D |  if_ne	jmp	#LR__4574
2d11c     20 22 CE F7 | 	test	local03, #32 wz
2d120     30 28 46 55 |  if_ne	or	local06, #48
2d124                 | LR__4574
2d124     02 00 00 FF 
2d128     14 24 06 F1 | 	add	local04, ##1044
2d12c     12 13 02 F6 | 	mov	arg01, local04
2d130     02 00 00 FF 
2d134     14 24 86 F1 | 	sub	local04, ##1044
2d138     10 15 02 F6 | 	mov	arg02, local02
2d13c     14 17 02 F6 | 	mov	arg03, local06
2d140     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2d144     FD 2A 0A F6 | 	mov	local07, result1 wz
2d148     14 00 90 AD |  if_e	jmp	#LR__4575
2d14c     12 13 02 F6 | 	mov	arg01, local04
2d150                 | '     return _gc_free(ptr);
2d150     10 59 BF FD | 	call	#__system___gc_free
2d154                 | '     free(f);
2d154                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2d154                 | '     return _set_dos_error(r);
2d154     15 13 02 F6 | 	mov	arg01, local07
2d158     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d15c     08 00 90 FD | 	jmp	#LR__4576
2d160                 | LR__4575
2d160     0F 25 62 FC | 	wrlong	local04, local01
2d164                 | '   }
2d164                 | '   fil->vfsdata = f;
2d164                 | '   return 0;
2d164     00 FA 05 F6 | 	mov	result1, #0
2d168                 | LR__4576
2d168     A7 F0 03 F6 | 	mov	ptra, fp
2d16c     B2 00 A0 FD | 	call	#popregs_
2d170                 | _fatfs_cc_v_open_ret
2d170     2D 00 64 FD | 	ret
2d174                 | 
2d174                 | _fatfs_cc_v_flush
2d174     09 13 02 FB | 	rdlong	arg01, arg01
2d178     02 00 00 FF 
2d17c     14 12 0E F1 | 	add	arg01, ##1044 wz
2d180                 | '         return _seterror( 5 );
2d180     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d184     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2d188     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d18c     01 FA 65 A6 |  if_e	neg	result1, #1
2d190     0C 00 90 AD |  if_e	jmp	#LR__4580
2d194     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2d198     FD 12 02 F6 | 	mov	arg01, result1
2d19c                 | '     }
2d19c                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2d19c                 | '     result = f_sync(f);
2d19c                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2d19c                 | '     return _set_dos_error(result);
2d19c     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0906
2d1a0                 | LR__4580
2d1a0                 | _fatfs_cc_v_flush_ret
2d1a0     2D 00 64 FD | 	ret
2d1a4                 | 
2d1a4                 | _fatfs_cc_v_init
2d1a4                 | ' {
2d1a4                 | '     return 0;
2d1a4     00 FA 05 F6 | 	mov	result1, #0
2d1a8                 | _fatfs_cc_v_init_ret
2d1a8     2D 00 64 FD | 	ret
2d1ac                 | 
2d1ac                 | _fatfs_cc_v_deinit
2d1ac     70 01 00 FF 
2d1b0     20 15 06 F6 | 	mov	arg02, ##@LR__4776
2d1b4     00 12 06 F6 | 	mov	arg01, #0
2d1b8     00 16 06 F6 | 	mov	arg03, #0
2d1bc     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
2d1c0     01 00 00 FF 
2d1c4     08 E4 05 F1 | 	add	objptr, ##520
2d1c8     F2 12 02 FB | 	rdlong	arg01, objptr
2d1cc     04 E4 05 F1 | 	add	objptr, #4
2d1d0     F2 14 02 FB | 	rdlong	arg02, objptr
2d1d4     01 00 00 FF 
2d1d8     0C E4 85 F1 | 	sub	objptr, ##524
2d1dc     50 40 BF FD | 	call	#__system___freepins
2d1e0                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2d1e0                 | '     _freepins(f_pinmask);
2d1e0                 | '     return 0;
2d1e0     00 FA 05 F6 | 	mov	result1, #0
2d1e4                 | _fatfs_cc_v_deinit_ret
2d1e4     2D 00 64 FD | 	ret
2d1e8                 | 
2d1e8                 | _fatfs_cc_get_vfs
2d1e8     01 4A 05 F6 | 	mov	COUNT_, #1
2d1ec     A8 00 A0 FD | 	call	#pushregs_
2d1f0     09 1F 02 F6 | 	mov	local01, arg01
2d1f4     50 12 06 F6 | 	mov	arg01, #80
2d1f8     2C 57 BF FD | 	call	#__system___gc_alloc_managed
2d1fc     FD 12 02 F6 | 	mov	arg01, result1
2d200     F2 FA 01 F6 | 	mov	result1, objptr
2d204     00 88 04 FF 
2d208     00 FA 45 F5 | 	or	result1, ##152043520
2d20c     09 FB 61 FC | 	wrlong	result1, arg01
2d210     F2 FA 01 F6 | 	mov	result1, objptr
2d214     00 90 04 FF 
2d218     00 FA 45 F5 | 	or	result1, ##153092096
2d21c     04 12 06 F1 | 	add	arg01, #4
2d220     09 FB 61 FC | 	wrlong	result1, arg01
2d224     F2 FA 01 F6 | 	mov	result1, objptr
2d228     00 98 04 FF 
2d22c     00 FA 45 F5 | 	or	result1, ##154140672
2d230     04 12 06 F1 | 	add	arg01, #4
2d234     09 FB 61 FC | 	wrlong	result1, arg01
2d238     F2 FA 01 F6 | 	mov	result1, objptr
2d23c     00 A0 04 FF 
2d240     00 FA 45 F5 | 	or	result1, ##155189248
2d244     04 12 06 F1 | 	add	arg01, #4
2d248     09 FB 61 FC | 	wrlong	result1, arg01
2d24c     F2 FA 01 F6 | 	mov	result1, objptr
2d250     00 A8 04 FF 
2d254     00 FA 45 F5 | 	or	result1, ##156237824
2d258     04 12 06 F1 | 	add	arg01, #4
2d25c     09 FB 61 FC | 	wrlong	result1, arg01
2d260     04 12 06 F1 | 	add	arg01, #4
2d264     09 01 68 FC | 	wrlong	#0, arg01
2d268     04 12 06 F1 | 	add	arg01, #4
2d26c     09 1F 62 FC | 	wrlong	local01, arg01
2d270     04 12 06 F1 | 	add	arg01, #4
2d274     09 01 68 FC | 	wrlong	#0, arg01
2d278     F2 FA 01 F6 | 	mov	result1, objptr
2d27c     00 B0 04 FF 
2d280     00 FA 45 F5 | 	or	result1, ##157286400
2d284     04 12 06 F1 | 	add	arg01, #4
2d288     09 FB 61 FC | 	wrlong	result1, arg01
2d28c     F2 FA 01 F6 | 	mov	result1, objptr
2d290     00 B8 04 FF 
2d294     00 FA 45 F5 | 	or	result1, ##158334976
2d298     04 12 06 F1 | 	add	arg01, #4
2d29c     09 FB 61 FC | 	wrlong	result1, arg01
2d2a0     F2 FA 01 F6 | 	mov	result1, objptr
2d2a4     00 C0 04 FF 
2d2a8     00 FA 45 F5 | 	or	result1, ##159383552
2d2ac     04 12 06 F1 | 	add	arg01, #4
2d2b0     09 FB 61 FC | 	wrlong	result1, arg01
2d2b4     F2 FA 01 F6 | 	mov	result1, objptr
2d2b8     00 C8 04 FF 
2d2bc     00 FA 45 F5 | 	or	result1, ##160432128
2d2c0     04 12 06 F1 | 	add	arg01, #4
2d2c4     09 FB 61 FC | 	wrlong	result1, arg01
2d2c8     F2 FA 01 F6 | 	mov	result1, objptr
2d2cc     00 D0 04 FF 
2d2d0     00 FA 45 F5 | 	or	result1, ##161480704
2d2d4     04 12 06 F1 | 	add	arg01, #4
2d2d8     09 FB 61 FC | 	wrlong	result1, arg01
2d2dc     F2 FA 01 F6 | 	mov	result1, objptr
2d2e0     00 D8 04 FF 
2d2e4     00 FA 45 F5 | 	or	result1, ##162529280
2d2e8     04 12 06 F1 | 	add	arg01, #4
2d2ec     09 FB 61 FC | 	wrlong	result1, arg01
2d2f0     F2 FA 01 F6 | 	mov	result1, objptr
2d2f4     00 E0 04 FF 
2d2f8     00 FA 45 F5 | 	or	result1, ##163577856
2d2fc     04 12 06 F1 | 	add	arg01, #4
2d300     09 FB 61 FC | 	wrlong	result1, arg01
2d304     F2 FA 01 F6 | 	mov	result1, objptr
2d308     00 E8 04 FF 
2d30c     00 FA 45 F5 | 	or	result1, ##164626432
2d310     04 12 06 F1 | 	add	arg01, #4
2d314     09 FB 61 FC | 	wrlong	result1, arg01
2d318     F2 FA 01 F6 | 	mov	result1, objptr
2d31c     00 F0 04 FF 
2d320     00 FA 45 F5 | 	or	result1, ##165675008
2d324     04 12 06 F1 | 	add	arg01, #4
2d328     09 FB 61 FC | 	wrlong	result1, arg01
2d32c     F2 FA 01 F6 | 	mov	result1, objptr
2d330     00 F8 04 FF 
2d334     00 FA 45 F5 | 	or	result1, ##166723584
2d338     04 12 06 F1 | 	add	arg01, #4
2d33c     09 FB 61 FC | 	wrlong	result1, arg01
2d340     F2 FA 01 F6 | 	mov	result1, objptr
2d344     00 00 05 FF 
2d348     00 FA 45 F5 | 	or	result1, ##167772160
2d34c     04 12 06 F1 | 	add	arg01, #4
2d350     09 FB 61 FC | 	wrlong	result1, arg01
2d354     F2 FA 01 F6 | 	mov	result1, objptr
2d358     00 08 05 FF 
2d35c     00 FA 45 F5 | 	or	result1, ##168820736
2d360     04 12 06 F1 | 	add	arg01, #4
2d364     09 FB 61 FC | 	wrlong	result1, arg01
2d368     4C 12 86 F1 | 	sub	arg01, #76
2d36c                 | ' 
2d36c                 | '     v->close = &v_close;
2d36c                 | '     v->read = &v_read;
2d36c                 | '     v->write = &v_write;
2d36c                 | '     v->lseek = &v_lseek;
2d36c                 | '     v->ioctl = &v_ioctl;
2d36c                 | '     v->flush = 0;
2d36c                 | '     v->vfs_data = ptr;
2d36c                 | '     v->reserved = 0;
2d36c                 | ' 
2d36c                 | '     v->open = &v_open;
2d36c                 | '     v->creat = &v_creat;
2d36c                 | '     v->opendir = &v_opendir;
2d36c                 | '     v->closedir = &v_closedir;
2d36c                 | '     v->readdir = &v_readdir;
2d36c                 | '     v->stat = &v_stat;
2d36c                 | ' 
2d36c                 | '     v->mkdir = &v_mkdir;
2d36c                 | '     v->rmdir = &v_rmdir;
2d36c                 | ' 
2d36c                 | '     v->remove = &v_remove;
2d36c                 | '     v->rename = &v_rename;
2d36c                 | ' 
2d36c                 | '     v->init = &v_init;
2d36c                 | '     v->deinit = &v_deinit;
2d36c                 | ' 
2d36c                 | '     return v;
2d36c     09 FB 01 F6 | 	mov	result1, arg01
2d370     A7 F0 03 F6 | 	mov	ptra, fp
2d374     B2 00 A0 FD | 	call	#popregs_
2d378                 | _fatfs_cc_get_vfs_ret
2d378     2D 00 64 FD | 	ret
2d37c                 | 
2d37c                 | _fatfs_cc_xmit_mmc_1053
2d37c     01 00 00 FF 
2d380     10 E4 05 F1 | 	add	objptr, ##528
2d384     F2 00 02 FB | 	rdlong	_var01, objptr
2d388     08 E4 05 F1 | 	add	objptr, #8
2d38c     F2 02 02 FB | 	rdlong	_var02, objptr
2d390     01 00 00 FF 
2d394     18 E4 85 F1 | 	sub	objptr, ##536
2d398     40 02 62 FD | 	dirl	_var02
2d39c     28 02 64 FD | 	setq	#1
2d3a0     09 05 02 FB | 	rdlong	_var03, arg01
2d3a4     69 04 62 FD | 	rev	_var03
2d3a8     1B 04 FE F9 | 	movbyts	_var03, #27
2d3ac     01 05 22 FC | 	wypin	_var03, _var02
2d3b0     0A 05 02 F6 | 	mov	_var03, arg02
2d3b4     02 14 4E F0 | 	shr	arg02, #2 wz
2d3b8     03 04 66 F0 | 	shl	_var03, #3
2d3bc     00 05 22 FC | 	wypin	_var03, _var01
2d3c0     41 02 62 FD | 	dirh	_var02
2d3c4     08 12 06 F1 | 	add	arg01, #8
2d3c8     69 06 62 FD | 	rev	_var04
2d3cc     1B 06 FE F9 | 	movbyts	_var04, #27
2d3d0                 | LR__4590
2d3d0     01 07 22 5C |  if_ne	wypin	_var04, _var02
2d3d4     09 07 02 5B |  if_ne	rdlong	_var04, arg01
2d3d8     04 12 06 51 |  if_ne	add	arg01, #4
2d3dc     69 06 62 5D |  if_ne	rev	_var04
2d3e0     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
2d3e4                 | LR__4591
2d3e4     40 02 72 5D |  if_ne	testp	_var02 wc
2d3e8     F8 FF 9F 1D |  if_a	jmp	#LR__4591
2d3ec     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4590
2d3f0                 | LR__4592
2d3f0     40 00 72 FD | 	testp	_var01 wc
2d3f4     F8 FF 9F 3D |  if_ae	jmp	#LR__4592
2d3f8     40 02 62 FD | 	dirl	_var02
2d3fc     FF FF FF FF 
2d400     01 FF 2B FC | 	wypin	##-1, _var02
2d404     41 02 62 FD | 	dirh	_var02
2d408                 | _fatfs_cc_xmit_mmc_1053_ret
2d408     2D 00 64 FD | 	ret
2d40c                 | 
2d40c                 | _fatfs_cc_rcvr_mmc_1060
2d40c     01 00 00 FF 
2d410     10 E4 05 F1 | 	add	objptr, ##528
2d414     F2 00 02 FB | 	rdlong	_var01, objptr
2d418     0C E4 05 F1 | 	add	objptr, #12
2d41c     F2 02 02 FB | 	rdlong	_var02, objptr
2d420     01 00 00 FF 
2d424     1C E4 85 F1 | 	sub	objptr, ##540
2d428     01 03 08 FC | 	akpin	_var02
2d42c     0A 05 0A F6 | 	mov	_var03, arg02 wz
2d430     02 04 4E F0 | 	shr	_var03, #2 wz
2d434     30 00 90 AD |  if_e	jmp	#LR__4602
2d438     02 07 02 F6 | 	mov	_var04, _var03
2d43c     05 06 66 F0 | 	shl	_var04, #5
2d440     00 07 22 FC | 	wypin	_var04, _var01
2d444     01 7F 18 FC | 	wxpin	#63, _var02
2d448                 | LR__4600
2d448                 | LR__4601
2d448     40 02 72 FD | 	testp	_var02 wc
2d44c     F8 FF 9F 3D |  if_ae	jmp	#LR__4601
2d450     01 07 8A FA | 	rdpin	_var04, _var02
2d454     69 06 62 FD | 	rev	_var04
2d458     1B 06 FE F9 | 	movbyts	_var04, #27
2d45c     09 07 62 FC | 	wrlong	_var04, arg01
2d460     04 12 06 F1 | 	add	arg01, #4
2d464     F8 05 6E FB | 	djnz	_var03, #LR__4600
2d468                 | LR__4602
2d468     03 14 0E F5 | 	and	arg02, #3 wz
2d46c     24 00 90 AD |  if_e	jmp	#LR__4605
2d470     01 4F 18 FC | 	wxpin	#39, _var02
2d474                 | LR__4603
2d474     00 11 28 FC | 	wypin	#8, _var01
2d478                 | LR__4604
2d478     40 02 72 FD | 	testp	_var02 wc
2d47c     F8 FF 9F 3D |  if_ae	jmp	#LR__4604
2d480     01 07 8A FA | 	rdpin	_var04, _var02
2d484     69 06 62 FD | 	rev	_var04
2d488     09 07 42 FC | 	wrbyte	_var04, arg01
2d48c     01 12 06 F1 | 	add	arg01, #1
2d490     F8 15 6E FB | 	djnz	arg02, #LR__4603
2d494                 | LR__4605
2d494                 | _fatfs_cc_rcvr_mmc_1060_ret
2d494     2D 00 64 FD | 	ret
2d498                 | 
2d498                 | _fatfs_cc_wait_ready_1064
2d498     01 4A 05 F6 | 	mov	COUNT_, #1
2d49c     A8 00 A0 FD | 	call	#pushregs_
2d4a0     10 F0 07 F1 | 	add	ptra, #16
2d4a4     1A FA 61 FD | 	getct	result1
2d4a8     08 4E 05 F1 | 	add	fp, #8
2d4ac     A7 FA 61 FC | 	wrlong	result1, fp
2d4b0     14 1E 06 FB | 	rdlong	local01, #20
2d4b4     01 1E 46 F0 | 	shr	local01, #1
2d4b8     04 4E 05 F1 | 	add	fp, #4
2d4bc     A7 1E 62 FC | 	wrlong	local01, fp
2d4c0     0C 4E 85 F1 | 	sub	fp, #12
2d4c4                 | ' {
2d4c4                 | ' 	BYTE d;
2d4c4                 | ' 	UINT tmr, tmout;
2d4c4                 | ' 
2d4c4                 | ' 	tmr = _cnt();
2d4c4                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2d4c4                 | ' 	for(;;) {
2d4c4                 | LR__4610
2d4c4     04 4E 05 F1 | 	add	fp, #4
2d4c8     A7 12 02 F6 | 	mov	arg01, fp
2d4cc     04 4E 85 F1 | 	sub	fp, #4
2d4d0     01 14 06 F6 | 	mov	arg02, #1
2d4d4     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d4d8     04 4E 05 F1 | 	add	fp, #4
2d4dc     A7 1E C2 FA | 	rdbyte	local01, fp
2d4e0     04 4E 85 F1 | 	sub	fp, #4
2d4e4     FF 1E 0E F2 | 	cmp	local01, #255 wz
2d4e8     01 FA 05 A6 |  if_e	mov	result1, #1
2d4ec     28 00 90 AD |  if_e	jmp	#LR__4611
2d4f0     1A FA 61 FD | 	getct	result1
2d4f4     08 4E 05 F1 | 	add	fp, #8
2d4f8     A7 1E 02 FB | 	rdlong	local01, fp
2d4fc     0F FB 81 F1 | 	sub	result1, local01
2d500     04 4E 05 F1 | 	add	fp, #4
2d504     A7 1E 02 FB | 	rdlong	local01, fp
2d508     0C 4E 85 F1 | 	sub	fp, #12
2d50c     0F FB 11 F2 | 	cmp	result1, local01 wc
2d510     00 FA 05 36 |  if_ae	mov	result1, #0
2d514     AC FF 9F CD |  if_b	jmp	#LR__4610
2d518                 | LR__4611
2d518     A7 F0 03 F6 | 	mov	ptra, fp
2d51c     B2 00 A0 FD | 	call	#popregs_
2d520                 | _fatfs_cc_wait_ready_1064_ret
2d520     2D 00 64 FD | 	ret
2d524                 | 
2d524                 | _fatfs_cc_deselect_1070
2d524     00 4A 05 F6 | 	mov	COUNT_, #0
2d528     A8 00 A0 FD | 	call	#pushregs_
2d52c     14 F0 07 F1 | 	add	ptra, #20
2d530     01 00 00 FF 
2d534     14 E4 05 F1 | 	add	objptr, ##532
2d538     F2 14 02 FB | 	rdlong	arg02, objptr
2d53c     04 4E 05 F1 | 	add	fp, #4
2d540     A7 14 62 FC | 	wrlong	arg02, fp
2d544     04 E4 85 F1 | 	sub	objptr, #4
2d548     F2 14 02 FB | 	rdlong	arg02, objptr
2d54c     04 4E 05 F1 | 	add	fp, #4
2d550     A7 14 62 FC | 	wrlong	arg02, fp
2d554     08 E4 05 F1 | 	add	objptr, #8
2d558     F2 14 02 FB | 	rdlong	arg02, objptr
2d55c     04 4E 05 F1 | 	add	fp, #4
2d560     A7 14 62 FC | 	wrlong	arg02, fp
2d564     04 E4 05 F1 | 	add	objptr, #4
2d568     F2 14 02 FB | 	rdlong	arg02, objptr
2d56c     01 00 00 FF 
2d570     1C E4 85 F1 | 	sub	objptr, ##540
2d574     04 4E 05 F1 | 	add	fp, #4
2d578     A7 14 62 FC | 	wrlong	arg02, fp
2d57c     0C 4E 85 F1 | 	sub	fp, #12
2d580     A7 12 02 FB | 	rdlong	arg01, fp
2d584     04 4E 85 F1 | 	sub	fp, #4
2d588     59 12 62 FD | 	drvh	arg01
2d58c     1F 20 64 FD | 	waitx	#16
2d590     A7 12 02 F6 | 	mov	arg01, fp
2d594     01 14 06 F6 | 	mov	arg02, #1
2d598     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d59c     A7 F0 03 F6 | 	mov	ptra, fp
2d5a0     B2 00 A0 FD | 	call	#popregs_
2d5a4                 | _fatfs_cc_deselect_1070_ret
2d5a4     2D 00 64 FD | 	ret
2d5a8                 | 
2d5a8                 | _fatfs_cc_select_1074
2d5a8     00 4A 05 F6 | 	mov	COUNT_, #0
2d5ac     A8 00 A0 FD | 	call	#pushregs_
2d5b0     10 F0 07 F1 | 	add	ptra, #16
2d5b4     01 00 00 FF 
2d5b8     14 E4 05 F1 | 	add	objptr, ##532
2d5bc     F2 14 02 FB | 	rdlong	arg02, objptr
2d5c0     08 4E 05 F1 | 	add	fp, #8
2d5c4     A7 14 62 FC | 	wrlong	arg02, fp
2d5c8     08 E4 05 F1 | 	add	objptr, #8
2d5cc     F2 12 02 FB | 	rdlong	arg01, objptr
2d5d0     01 00 00 FF 
2d5d4     1C E4 85 F1 | 	sub	objptr, ##540
2d5d8     04 4E 05 F1 | 	add	fp, #4
2d5dc     A7 12 62 FC | 	wrlong	arg01, fp
2d5e0     50 12 62 FD | 	fltl	arg01
2d5e4     04 4E 85 F1 | 	sub	fp, #4
2d5e8     A7 12 02 FB | 	rdlong	arg01, fp
2d5ec     58 12 62 FD | 	drvl	arg01
2d5f0     1F 20 64 FD | 	waitx	#16
2d5f4     04 4E 05 F1 | 	add	fp, #4
2d5f8     A7 12 02 FB | 	rdlong	arg01, fp
2d5fc     41 12 62 FD | 	dirh	arg01
2d600     08 4E 85 F1 | 	sub	fp, #8
2d604     A7 12 02 F6 | 	mov	arg01, fp
2d608     04 4E 85 F1 | 	sub	fp, #4
2d60c     01 14 06 F6 | 	mov	arg02, #1
2d610     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d614     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1064
2d618     00 FA 0D F2 | 	cmp	result1, #0 wz
2d61c     01 FA 05 56 |  if_ne	mov	result1, #1
2d620     08 00 90 5D |  if_ne	jmp	#LR__4620
2d624     FC FE BF FD | 	call	#_fatfs_cc_deselect_1070
2d628                 | ' 
2d628                 | ' 	deselect();
2d628                 | ' 	return 0;
2d628     00 FA 05 F6 | 	mov	result1, #0
2d62c                 | LR__4620
2d62c     A7 F0 03 F6 | 	mov	ptra, fp
2d630     B2 00 A0 FD | 	call	#popregs_
2d634                 | _fatfs_cc_select_1074_ret
2d634     2D 00 64 FD | 	ret
2d638                 | 
2d638                 | _fatfs_cc_rcvr_datablock_1078
2d638     01 4A 05 F6 | 	mov	COUNT_, #1
2d63c     A8 00 A0 FD | 	call	#pushregs_
2d640     18 F0 07 F1 | 	add	ptra, #24
2d644     04 4E 05 F1 | 	add	fp, #4
2d648     A7 12 62 FC | 	wrlong	arg01, fp
2d64c     04 4E 05 F1 | 	add	fp, #4
2d650     A7 14 62 FC | 	wrlong	arg02, fp
2d654     1A FA 61 FD | 	getct	result1
2d658     08 4E 05 F1 | 	add	fp, #8
2d65c     A7 FA 61 FC | 	wrlong	result1, fp
2d660     14 1E 06 FB | 	rdlong	local01, #20
2d664     03 1E 46 F0 | 	shr	local01, #3
2d668     04 4E 05 F1 | 	add	fp, #4
2d66c     A7 1E 62 FC | 	wrlong	local01, fp
2d670     14 4E 85 F1 | 	sub	fp, #20
2d674                 | ' 	BYTE *buff,
2d674                 | ' 	UINT btr
2d674                 | ' )
2d674                 | ' {
2d674                 | ' 	BYTE d[2];
2d674                 | ' 	UINT tmr, tmout;
2d674                 | ' 
2d674                 | ' 	tmr = _cnt();
2d674                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
2d674                 | ' 	for(;;) {
2d674                 | LR__4630
2d674     0C 4E 05 F1 | 	add	fp, #12
2d678     A7 12 02 F6 | 	mov	arg01, fp
2d67c     0C 4E 85 F1 | 	sub	fp, #12
2d680     01 14 06 F6 | 	mov	arg02, #1
2d684     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d688     0C 4E 05 F1 | 	add	fp, #12
2d68c     A7 1E C2 FA | 	rdbyte	local01, fp
2d690     0C 4E 85 F1 | 	sub	fp, #12
2d694     FF 1E 0E F2 | 	cmp	local01, #255 wz
2d698     28 00 90 5D |  if_ne	jmp	#LR__4631
2d69c     1A FA 61 FD | 	getct	result1
2d6a0     FD 1E 02 F6 | 	mov	local01, result1
2d6a4     10 4E 05 F1 | 	add	fp, #16
2d6a8     A7 14 02 FB | 	rdlong	arg02, fp
2d6ac     0A 1F 82 F1 | 	sub	local01, arg02
2d6b0     04 4E 05 F1 | 	add	fp, #4
2d6b4     A7 14 02 FB | 	rdlong	arg02, fp
2d6b8     14 4E 85 F1 | 	sub	fp, #20
2d6bc     0A 1F 12 F2 | 	cmp	local01, arg02 wc
2d6c0     B0 FF 9F CD |  if_b	jmp	#LR__4630
2d6c4                 | LR__4631
2d6c4     0C 4E 05 F1 | 	add	fp, #12
2d6c8     A7 1E C2 FA | 	rdbyte	local01, fp
2d6cc     0C 4E 85 F1 | 	sub	fp, #12
2d6d0     FE 1E 0E F2 | 	cmp	local01, #254 wz
2d6d4     00 FA 05 56 |  if_ne	mov	result1, #0
2d6d8     30 00 90 5D |  if_ne	jmp	#LR__4632
2d6dc     04 4E 05 F1 | 	add	fp, #4
2d6e0     A7 12 02 FB | 	rdlong	arg01, fp
2d6e4     04 4E 05 F1 | 	add	fp, #4
2d6e8     A7 14 02 FB | 	rdlong	arg02, fp
2d6ec     08 4E 85 F1 | 	sub	fp, #8
2d6f0     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d6f4     0C 4E 05 F1 | 	add	fp, #12
2d6f8     A7 12 02 F6 | 	mov	arg01, fp
2d6fc     0C 4E 85 F1 | 	sub	fp, #12
2d700     02 14 06 F6 | 	mov	arg02, #2
2d704     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d708                 | ' 
2d708                 | ' 	rcvr_mmc(buff, btr);
2d708                 | ' 	rcvr_mmc(d, 2);
2d708                 | ' 
2d708                 | ' 	return 1;
2d708     01 FA 05 F6 | 	mov	result1, #1
2d70c                 | LR__4632
2d70c     A7 F0 03 F6 | 	mov	ptra, fp
2d710     B2 00 A0 FD | 	call	#popregs_
2d714                 | _fatfs_cc_rcvr_datablock_1078_ret
2d714     2D 00 64 FD | 	ret
2d718                 | 
2d718                 | _fatfs_cc_xmit_datablock_1080
2d718     00 4A 05 F6 | 	mov	COUNT_, #0
2d71c     A8 00 A0 FD | 	call	#pushregs_
2d720     10 F0 07 F1 | 	add	ptra, #16
2d724     04 4E 05 F1 | 	add	fp, #4
2d728     A7 12 62 FC | 	wrlong	arg01, fp
2d72c     04 4E 05 F1 | 	add	fp, #4
2d730     A7 14 42 FC | 	wrbyte	arg02, fp
2d734     08 4E 85 F1 | 	sub	fp, #8
2d738     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1064
2d73c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d740     00 FA 05 A6 |  if_e	mov	result1, #0
2d744     90 00 90 AD |  if_e	jmp	#LR__4641
2d748     08 4E 05 F1 | 	add	fp, #8
2d74c     A7 14 C2 FA | 	rdbyte	arg02, fp
2d750     04 4E 05 F1 | 	add	fp, #4
2d754     A7 14 42 FC | 	wrbyte	arg02, fp
2d758     A7 12 02 F6 | 	mov	arg01, fp
2d75c     0C 4E 85 F1 | 	sub	fp, #12
2d760     01 14 06 F6 | 	mov	arg02, #1
2d764     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1053
2d768     08 4E 05 F1 | 	add	fp, #8
2d76c     A7 14 C2 FA | 	rdbyte	arg02, fp
2d770     08 4E 85 F1 | 	sub	fp, #8
2d774     FD 14 0E F2 | 	cmp	arg02, #253 wz
2d778     58 00 90 AD |  if_e	jmp	#LR__4640
2d77c     04 4E 05 F1 | 	add	fp, #4
2d780     A7 12 02 FB | 	rdlong	arg01, fp
2d784     04 4E 85 F1 | 	sub	fp, #4
2d788     09 14 C6 F9 | 	decod	arg02, #9
2d78c     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1053
2d790     0C 4E 05 F1 | 	add	fp, #12
2d794     A7 12 02 F6 | 	mov	arg01, fp
2d798     0C 4E 85 F1 | 	sub	fp, #12
2d79c     02 14 06 F6 | 	mov	arg02, #2
2d7a0     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d7a4     0C 4E 05 F1 | 	add	fp, #12
2d7a8     A7 12 02 F6 | 	mov	arg01, fp
2d7ac     0C 4E 85 F1 | 	sub	fp, #12
2d7b0     01 14 06 F6 | 	mov	arg02, #1
2d7b4     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d7b8     0C 4E 05 F1 | 	add	fp, #12
2d7bc     A7 14 C2 FA | 	rdbyte	arg02, fp
2d7c0     0C 4E 85 F1 | 	sub	fp, #12
2d7c4     1F 14 06 F5 | 	and	arg02, #31
2d7c8     05 14 0E F2 | 	cmp	arg02, #5 wz
2d7cc                 | ' 			return 0;
2d7cc     00 FA 05 56 |  if_ne	mov	result1, #0
2d7d0     04 00 90 5D |  if_ne	jmp	#LR__4641
2d7d4                 | LR__4640
2d7d4                 | ' 	}
2d7d4                 | ' 
2d7d4                 | ' 	return 1;
2d7d4     01 FA 05 F6 | 	mov	result1, #1
2d7d8                 | LR__4641
2d7d8     A7 F0 03 F6 | 	mov	ptra, fp
2d7dc     B2 00 A0 FD | 	call	#popregs_
2d7e0                 | _fatfs_cc_xmit_datablock_1080_ret
2d7e0     2D 00 64 FD | 	ret
2d7e4                 | 
2d7e4                 | _fatfs_cc_send_cmd_1084
2d7e4     01 4A 05 F6 | 	mov	COUNT_, #1
2d7e8     A8 00 A0 FD | 	call	#pushregs_
2d7ec     1C F0 07 F1 | 	add	ptra, #28
2d7f0                 | _fatfs_cc_send_cmd_1084_enter
2d7f0     04 4E 05 F1 | 	add	fp, #4
2d7f4     A7 12 42 FC | 	wrbyte	arg01, fp
2d7f8     04 4E 05 F1 | 	add	fp, #4
2d7fc     A7 14 62 FC | 	wrlong	arg02, fp
2d800     04 4E 85 F1 | 	sub	fp, #4
2d804     A7 FA C1 FA | 	rdbyte	result1, fp
2d808     04 4E 85 F1 | 	sub	fp, #4
2d80c     80 FA CD F7 | 	test	result1, #128 wz
2d810     44 00 90 AD |  if_e	jmp	#LR__4650
2d814     04 4E 05 F1 | 	add	fp, #4
2d818     A7 14 C2 FA | 	rdbyte	arg02, fp
2d81c     7F 14 06 F5 | 	and	arg02, #127
2d820     A7 14 42 FC | 	wrbyte	arg02, fp
2d824     04 4E 85 F1 | 	sub	fp, #4
2d828     37 12 06 F6 | 	mov	arg01, #55
2d82c     00 14 06 F6 | 	mov	arg02, #0
2d830     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1084
2d834     0C 4E 05 F1 | 	add	fp, #12
2d838     A7 FA 41 FC | 	wrbyte	result1, fp
2d83c     A7 14 C2 FA | 	rdbyte	arg02, fp
2d840     0C 4E 85 F1 | 	sub	fp, #12
2d844     02 14 16 F2 | 	cmp	arg02, #2 wc
2d848     0C 4E 05 31 |  if_ae	add	fp, #12
2d84c     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
2d850     0C 4E 85 31 |  if_ae	sub	fp, #12
2d854     6C 01 90 3D |  if_ae	jmp	#LR__4654
2d858                 | LR__4650
2d858     04 4E 05 F1 | 	add	fp, #4
2d85c     A7 14 C2 FA | 	rdbyte	arg02, fp
2d860     04 4E 85 F1 | 	sub	fp, #4
2d864     0C 14 0E F2 | 	cmp	arg02, #12 wz
2d868     14 00 90 AD |  if_e	jmp	#LR__4651
2d86c     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1070
2d870     34 FD BF FD | 	call	#_fatfs_cc_select_1074
2d874     00 FA 0D F2 | 	cmp	result1, #0 wz
2d878     FF FA 05 A6 |  if_e	mov	result1, #255
2d87c     44 01 90 AD |  if_e	jmp	#LR__4654
2d880                 | LR__4651
2d880     04 4E 05 F1 | 	add	fp, #4
2d884     A7 14 C2 FA | 	rdbyte	arg02, fp
2d888     40 FA 05 F6 | 	mov	result1, #64
2d88c     0A FB 41 F5 | 	or	result1, arg02
2d890     10 4E 05 F1 | 	add	fp, #16
2d894     A7 FA 41 FC | 	wrbyte	result1, fp
2d898     0C 4E 85 F1 | 	sub	fp, #12
2d89c     A7 FA 01 FB | 	rdlong	result1, fp
2d8a0     18 FA 45 F0 | 	shr	result1, #24
2d8a4     0D 4E 05 F1 | 	add	fp, #13
2d8a8     A7 FA 41 FC | 	wrbyte	result1, fp
2d8ac     0D 4E 85 F1 | 	sub	fp, #13
2d8b0     A7 FA 01 FB | 	rdlong	result1, fp
2d8b4     10 FA 45 F0 | 	shr	result1, #16
2d8b8     0E 4E 05 F1 | 	add	fp, #14
2d8bc     A7 FA 41 FC | 	wrbyte	result1, fp
2d8c0     0E 4E 85 F1 | 	sub	fp, #14
2d8c4     A7 FA 01 FB | 	rdlong	result1, fp
2d8c8     08 FA 45 F0 | 	shr	result1, #8
2d8cc     0F 4E 05 F1 | 	add	fp, #15
2d8d0     A7 FA 41 FC | 	wrbyte	result1, fp
2d8d4     0F 4E 85 F1 | 	sub	fp, #15
2d8d8     A7 FA 01 FB | 	rdlong	result1, fp
2d8dc     10 4E 05 F1 | 	add	fp, #16
2d8e0     A7 FA 41 FC | 	wrbyte	result1, fp
2d8e4     0C 4E 85 F1 | 	sub	fp, #12
2d8e8     A7 02 48 FC | 	wrbyte	#1, fp
2d8ec     08 4E 85 F1 | 	sub	fp, #8
2d8f0     A7 FA C9 FA | 	rdbyte	result1, fp wz
2d8f4     04 4E 85 F1 | 	sub	fp, #4
2d8f8     0C 4E 05 A1 |  if_e	add	fp, #12
2d8fc     A7 2A 49 AC |  if_e	wrbyte	#149, fp
2d900     0C 4E 85 A1 |  if_e	sub	fp, #12
2d904     04 4E 05 F1 | 	add	fp, #4
2d908     A7 FA C1 FA | 	rdbyte	result1, fp
2d90c     04 4E 85 F1 | 	sub	fp, #4
2d910     08 FA 0D F2 | 	cmp	result1, #8 wz
2d914     0C 4E 05 A1 |  if_e	add	fp, #12
2d918     A7 0E 49 AC |  if_e	wrbyte	#135, fp
2d91c     0C 4E 85 A1 |  if_e	sub	fp, #12
2d920     0C 4E 05 F1 | 	add	fp, #12
2d924     A7 14 C2 FA | 	rdbyte	arg02, fp
2d928     0D 4E 05 F1 | 	add	fp, #13
2d92c     A7 14 42 FC | 	wrbyte	arg02, fp
2d930     05 4E 85 F1 | 	sub	fp, #5
2d934     A7 12 02 F6 | 	mov	arg01, fp
2d938     14 4E 85 F1 | 	sub	fp, #20
2d93c     06 14 06 F6 | 	mov	arg02, #6
2d940     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1053
2d944     04 4E 05 F1 | 	add	fp, #4
2d948     A7 1E C2 FA | 	rdbyte	local01, fp
2d94c     04 4E 85 F1 | 	sub	fp, #4
2d950     0C 1E 0E F2 | 	cmp	local01, #12 wz
2d954     10 4E 05 A1 |  if_e	add	fp, #16
2d958     A7 12 02 A6 |  if_e	mov	arg01, fp
2d95c     10 4E 85 A1 |  if_e	sub	fp, #16
2d960     01 14 06 A6 |  if_e	mov	arg02, #1
2d964     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1060
2d968     0C 4E 05 F1 | 	add	fp, #12
2d96c     A7 14 48 FC | 	wrbyte	#10, fp
2d970     0C 4E 85 F1 | 	sub	fp, #12
2d974                 | ' 	n = 10;
2d974                 | ' 	do
2d974                 | LR__4652
2d974     10 4E 05 F1 | 	add	fp, #16
2d978     A7 12 02 F6 | 	mov	arg01, fp
2d97c     10 4E 85 F1 | 	sub	fp, #16
2d980     01 14 06 F6 | 	mov	arg02, #1
2d984     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1060
2d988     10 4E 05 F1 | 	add	fp, #16
2d98c     A7 1E C2 FA | 	rdbyte	local01, fp
2d990     10 4E 85 F1 | 	sub	fp, #16
2d994     80 1E CE F7 | 	test	local01, #128 wz
2d998     1C 00 90 AD |  if_e	jmp	#LR__4653
2d99c     0C 4E 05 F1 | 	add	fp, #12
2d9a0     A7 1E C2 FA | 	rdbyte	local01, fp
2d9a4     01 1E 86 F1 | 	sub	local01, #1
2d9a8     A7 1E 42 FC | 	wrbyte	local01, fp
2d9ac     A7 1E CA FA | 	rdbyte	local01, fp wz
2d9b0     0C 4E 85 F1 | 	sub	fp, #12
2d9b4     BC FF 9F 5D |  if_ne	jmp	#LR__4652
2d9b8                 | LR__4653
2d9b8                 | ' 
2d9b8                 | ' 	return d;
2d9b8     10 4E 05 F1 | 	add	fp, #16
2d9bc     A7 FA C1 FA | 	rdbyte	result1, fp
2d9c0     10 4E 85 F1 | 	sub	fp, #16
2d9c4                 | LR__4654
2d9c4     A7 F0 03 F6 | 	mov	ptra, fp
2d9c8     B2 00 A0 FD | 	call	#popregs_
2d9cc                 | _fatfs_cc_send_cmd_1084_ret
2d9cc     2D 00 64 FD | 	ret
2d9d0                 | 
2d9d0                 | _fatfs_cc_disk_deinitialize
2d9d0     03 4A 05 F6 | 	mov	COUNT_, #3
2d9d4     A8 00 A0 FD | 	call	#pushregs_
2d9d8     00 12 4E F2 | 	cmps	arg01, #0 wz
2d9dc     01 00 00 FF 
2d9e0     14 E4 05 F1 | 	add	objptr, ##532
2d9e4     F2 12 02 FB | 	rdlong	arg01, objptr
2d9e8     04 E4 85 F1 | 	sub	objptr, #4
2d9ec     F2 1E 02 FB | 	rdlong	local01, objptr
2d9f0     08 E4 05 F1 | 	add	objptr, #8
2d9f4     F2 20 02 FB | 	rdlong	local02, objptr
2d9f8     04 E4 05 F1 | 	add	objptr, #4
2d9fc     F2 22 02 FB | 	rdlong	local03, objptr
2da00     01 00 00 FF 
2da04     1C E4 85 F1 | 	sub	objptr, ##540
2da08                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2da08                 | '         return RES_NOTRDY;
2da08     03 FA 05 56 |  if_ne	mov	result1, #3
2da0c     2C 00 90 5D |  if_ne	jmp	#LR__4660
2da10     50 12 62 FD | 	fltl	arg01
2da14     09 01 08 FC | 	wrpin	#0, arg01
2da18     50 1E 62 FD | 	fltl	local01
2da1c     0F 01 08 FC | 	wrpin	#0, local01
2da20     50 20 62 FD | 	fltl	local02
2da24     10 01 08 FC | 	wrpin	#0, local02
2da28     50 22 62 FD | 	fltl	local03
2da2c     11 01 08 FC | 	wrpin	#0, local03
2da30     0A 12 06 F6 | 	mov	arg01, #10
2da34     D0 13 BF FD | 	call	#__system___waitms
2da38                 | '     }
2da38                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
2da38                 | '     _pinclear(PIN_SS);
2da38                 | '     _pinclear(PIN_CLK);
2da38                 | '     _pinclear(PIN_DI);
2da38                 | '     _pinclear(PIN_DO);
2da38                 | ' 
2da38                 | '     _waitms(10);
2da38                 | ' 
2da38                 | '     return 0;
2da38     00 FA 05 F6 | 	mov	result1, #0
2da3c                 | LR__4660
2da3c     A7 F0 03 F6 | 	mov	ptra, fp
2da40     B2 00 A0 FD | 	call	#popregs_
2da44                 | _fatfs_cc_disk_deinitialize_ret
2da44     2D 00 64 FD | 	ret
2da48                 | 
2da48                 | _fatfs_cc_gettimeofday
2da48     04 4A 05 F6 | 	mov	COUNT_, #4
2da4c     A8 00 A0 FD | 	call	#pushregs_
2da50     09 1F 02 F6 | 	mov	local01, arg01
2da54     8C 0F BF FD | 	call	#__system___getus
2da58     FD 12 02 F6 | 	mov	arg01, result1
2da5c     02 00 00 FF 
2da60     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
2da64     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
2da68     09 FB 01 F6 | 	mov	result1, arg01
2da6c     10 FB 81 F1 | 	sub	result1, local02
2da70     A1 07 00 FF 
2da74     40 FA 15 FD | 	qdiv	result1, ##1000000
2da78     02 00 00 FF 
2da7c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2da80     18 20 62 FD | 	getqx	local02
2da84     A1 07 00 FF 
2da88     40 FA 15 FD | 	qdiv	result1, ##1000000
2da8c     00 20 0E F2 | 	cmp	local02, #0 wz
2da90     19 22 62 FD | 	getqy	local03
2da94     28 00 90 AD |  if_e	jmp	#LR__4670
2da98     02 00 00 FF 
2da9c     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2daa0     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2daa4     10 25 02 F1 | 	add	local04, local02
2daa8     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
2daac     11 13 82 F1 | 	sub	arg01, local03
2dab0     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
2dab4     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
2dab8     02 00 00 FF 
2dabc     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
2dac0                 | LR__4670
2dac0     02 00 00 FF 
2dac4     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
2dac8     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
2dacc     02 00 00 FF 
2dad0     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
2dad4     0F 25 62 FC | 	wrlong	local04, local01
2dad8     04 1E 06 F1 | 	add	local01, #4
2dadc     0F 23 62 FC | 	wrlong	local03, local01
2dae0                 | '         lastsec += secs;
2dae0                 | '         lastus = now - leftover;
2dae0                 | '     }
2dae0                 | '     tv->tv_sec = lastsec;
2dae0                 | '     tv->tv_usec = leftover;
2dae0                 | '     return 0;
2dae0     00 FA 05 F6 | 	mov	result1, #0
2dae4     A7 F0 03 F6 | 	mov	ptra, fp
2dae8     B2 00 A0 FD | 	call	#popregs_
2daec                 | _fatfs_cc_gettimeofday_ret
2daec     2D 00 64 FD | 	ret
2daf0                 | 
2daf0                 | _fatfs_cc__is_leap_year
2daf0     09 FB 51 F6 | 	abs	result1, arg01 wc
2daf4     03 FA 05 F5 | 	and	result1, #3
2daf8     FD FA 89 F6 | 	negc	result1, result1 wz
2dafc     38 00 90 5D |  if_ne	jmp	#LR__4681
2db00     09 FB 51 F6 | 	abs	result1, arg01 wc
2db04     64 FA 15 FD | 	qdiv	result1, #100
2db08     19 FA 61 FD | 	getqy	result1
2db0c     FD FA 89 F6 | 	negc	result1, result1 wz
2db10     1C 00 90 5D |  if_ne	jmp	#LR__4680
2db14     09 FB 51 F6 | 	abs	result1, arg01 wc
2db18     90 FB 15 FD | 	qdiv	result1, #400
2db1c                 | '       return (0 == y % 400);
2db1c     00 FA 05 F6 | 	mov	result1, #0
2db20     19 00 62 FD | 	getqy	_var01
2db24     00 01 8A F6 | 	negc	_var01, _var01 wz
2db28     01 FA 05 A6 |  if_e	mov	result1, #1
2db2c     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2db30                 | LR__4680
2db30                 | '     return 1;
2db30     01 FA 05 F6 | 	mov	result1, #1
2db34     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
2db38                 | LR__4681
2db38                 | '   }
2db38                 | '   return 0;
2db38     00 FA 05 F6 | 	mov	result1, #0
2db3c                 | _fatfs_cc__is_leap_year_ret
2db3c     2D 00 64 FD | 	ret
2db40                 | 
2db40                 | _fatfs_cc___tzoffset
2db40     09 01 0A F6 | 	mov	_var01, arg01 wz
2db44     FF FF FF FF 
2db48     0A FF 6B FC | 	wrlong	##-1, arg02
2db4c     01 02 06 F6 | 	mov	_var02, #1
2db50     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
2db54                 | '                 return 0;
2db54     00 FA 05 A6 |  if_e	mov	result1, #0
2db58     94 02 90 AD |  if_e	jmp	#LR__4707
2db5c     0A 01 68 FC | 	wrlong	#0, arg02
2db60     02 00 00 FF 
2db64     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2db68     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2db6c                 | ' 
2db6c                 | '        *hasdst = 0;
2db6c                 | ' 
2db6c                 | ' 	n = stdname;
2db6c                 | '         while (*s && isalpha(*s)) {
2db6c     02 00 00 FF 
2db70     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2db74     97 28 48 FB | 	callpa	#(@LR__4691-@LR__4690)>>2,fcache_load_ptr_
2db78                 | LR__4690
2db78     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2db7c     48 00 90 AD |  if_e	jmp	#LR__4692
2db80     00 13 C2 FA | 	rdbyte	arg01, _var01
2db84                 | ' {
2db84                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2db84     80 12 36 F3 | 	fle	arg01, #128 wc
2db88                 | '     return __ctype[c];
2db88     02 00 00 FF 
2db8c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2db90     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2db94     09 FB C1 FA | 	rdbyte	result1, arg01
2db98     02 00 00 FF 
2db9c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2dba0     0C FA CD F7 | 	test	result1, #12 wz
2dba4     20 00 90 AD |  if_e	jmp	#LR__4692
2dba8     00 09 02 F6 | 	mov	_var05, _var01
2dbac     00 0B 02 F6 | 	mov	_var06, _var01
2dbb0     01 0A 06 F1 | 	add	_var06, #1
2dbb4     04 0D C2 FA | 	rdbyte	_var07, _var05
2dbb8     05 01 02 F6 | 	mov	_var01, _var06
2dbbc     03 0D 42 FC | 	wrbyte	_var07, _var04
2dbc0     01 06 06 F1 | 	add	_var04, #1
2dbc4     B0 FF 9F FD | 	jmp	#LR__4690
2dbc8                 | LR__4691
2dbc8                 | LR__4692
2dbc8     03 01 48 FC | 	wrbyte	#0, _var04
2dbcc     00 0E 06 F6 | 	mov	_var08, #0
2dbd0     00 05 C2 FA | 	rdbyte	_var03, _var01
2dbd4     2D 04 0E F2 | 	cmp	_var03, #45 wz
2dbd8     01 02 66 A6 |  if_e	neg	_var02, #1
2dbdc     01 00 06 A1 |  if_e	add	_var01, #1
2dbe0     97 28 48 FB | 	callpa	#(@LR__4694-@LR__4693)>>2,fcache_load_ptr_
2dbe4                 | '                 sgn = -1;
2dbe4                 | '                 s++;
2dbe4                 | '         }
2dbe4                 | '         while (isdigit(*s)) {
2dbe4                 | LR__4693
2dbe4     00 13 C2 FA | 	rdbyte	arg01, _var01
2dbe8                 | ' {
2dbe8                 | '   return  (__ctype_get(c) & 0x02 ) ;
2dbe8     80 12 36 F3 | 	fle	arg01, #128 wc
2dbec                 | '     return __ctype[c];
2dbec     02 00 00 FF 
2dbf0     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2dbf4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2dbf8     09 FB C1 FA | 	rdbyte	result1, arg01
2dbfc     02 00 00 FF 
2dc00     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2dc04     02 FA CD F7 | 	test	result1, #2 wz
2dc08     28 00 90 AD |  if_e	jmp	#LR__4695
2dc0c     07 05 02 F6 | 	mov	_var03, _var08
2dc10     02 04 66 F0 | 	shl	_var03, #2
2dc14     07 05 02 F1 | 	add	_var03, _var08
2dc18     01 04 66 F0 | 	shl	_var03, #1
2dc1c     00 09 C2 FA | 	rdbyte	_var05, _var01
2dc20     30 08 86 F1 | 	sub	_var05, #48
2dc24     04 05 02 F1 | 	add	_var03, _var05
2dc28     02 0F 02 F6 | 	mov	_var08, _var03
2dc2c     01 00 06 F1 | 	add	_var01, #1
2dc30     B0 FF 9F FD | 	jmp	#LR__4693
2dc34                 | LR__4694
2dc34                 | LR__4695
2dc34     07 00 00 FF 
2dc38     10 0E 06 FD | 	qmul	_var08, ##3600
2dc3c     00 05 C2 FA | 	rdbyte	_var03, _var01
2dc40     3A 04 0E F2 | 	cmp	_var03, #58 wz
2dc44     18 10 62 FD | 	getqx	_var09
2dc48     70 00 90 5D |  if_ne	jmp	#LR__4699
2dc4c     00 0E 06 F6 | 	mov	_var08, #0
2dc50     01 00 06 F1 | 	add	_var01, #1
2dc54     97 28 48 FB | 	callpa	#(@LR__4697-@LR__4696)>>2,fcache_load_ptr_
2dc58                 | '                 x = 0;
2dc58                 | '                 s++;
2dc58                 | '                 while (isdigit(*s)) {
2dc58                 | LR__4696
2dc58     00 13 C2 FA | 	rdbyte	arg01, _var01
2dc5c                 | ' {
2dc5c                 | '   return  (__ctype_get(c) & 0x02 ) ;
2dc5c     80 12 36 F3 | 	fle	arg01, #128 wc
2dc60                 | '     return __ctype[c];
2dc60     02 00 00 FF 
2dc64     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2dc68     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2dc6c     09 FB C1 FA | 	rdbyte	result1, arg01
2dc70     02 00 00 FF 
2dc74     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2dc78     02 FA CD F7 | 	test	result1, #2 wz
2dc7c     28 00 90 AD |  if_e	jmp	#LR__4698
2dc80     07 05 02 F6 | 	mov	_var03, _var08
2dc84     02 04 66 F0 | 	shl	_var03, #2
2dc88     07 05 02 F1 | 	add	_var03, _var08
2dc8c     01 04 66 F0 | 	shl	_var03, #1
2dc90     00 09 C2 FA | 	rdbyte	_var05, _var01
2dc94     30 08 86 F1 | 	sub	_var05, #48
2dc98     04 05 02 F1 | 	add	_var03, _var05
2dc9c     02 0F 02 F6 | 	mov	_var08, _var03
2dca0     01 00 06 F1 | 	add	_var01, #1
2dca4     B0 FF 9F FD | 	jmp	#LR__4696
2dca8                 | LR__4697
2dca8                 | LR__4698
2dca8     07 0D 02 F6 | 	mov	_var07, _var08
2dcac     04 0C 66 F0 | 	shl	_var07, #4
2dcb0     07 0D 82 F1 | 	sub	_var07, _var08
2dcb4     02 0C 66 F0 | 	shl	_var07, #2
2dcb8     06 11 02 F1 | 	add	_var09, _var07
2dcbc                 | LR__4699
2dcbc     02 00 00 FF 
2dcc0     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2dcc4     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
2dcc8     00 13 C2 FA | 	rdbyte	arg01, _var01
2dccc                 | ' {
2dccc                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2dccc     80 12 36 F3 | 	fle	arg01, #128 wc
2dcd0                 | '     return __ctype[c];
2dcd0     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
2dcd4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2dcd8     09 FB C1 FA | 	rdbyte	result1, arg01
2dcdc     02 00 00 FF 
2dce0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2dce4     0C FA CD F7 | 	test	result1, #12 wz
2dce8     50 00 90 AD |  if_e	jmp	#LR__4702
2dcec     0A 03 68 FC | 	wrlong	#1, arg02
2dcf0                 | '                 *hasdst = 1;
2dcf0                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
2dcf0                 | LR__4700
2dcf0     00 05 CA FA | 	rdbyte	_var03, _var01 wz
2dcf4     44 00 90 AD |  if_e	jmp	#LR__4701
2dcf8     00 13 C2 FA | 	rdbyte	arg01, _var01
2dcfc                 | ' {
2dcfc                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
2dcfc     80 12 36 F3 | 	fle	arg01, #128 wc
2dd00                 | '     return __ctype[c];
2dd00     02 00 00 FF 
2dd04     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
2dd08     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2dd0c     09 FB C1 FA | 	rdbyte	result1, arg01
2dd10     02 00 00 FF 
2dd14     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
2dd18     0C FA CD F7 | 	test	result1, #12 wz
2dd1c     1C 00 90 AD |  if_e	jmp	#LR__4701
2dd20     00 0B 02 F6 | 	mov	_var06, _var01
2dd24     01 0A 06 F1 | 	add	_var06, #1
2dd28     00 0D C2 FA | 	rdbyte	_var07, _var01
2dd2c     05 01 02 F6 | 	mov	_var01, _var06
2dd30     03 0D 42 FC | 	wrbyte	_var07, _var04
2dd34     01 06 06 F1 | 	add	_var04, #1
2dd38     B4 FF 9F FD | 	jmp	#LR__4700
2dd3c                 | LR__4701
2dd3c                 | LR__4702
2dd3c     03 01 48 FC | 	wrbyte	#0, _var04
2dd40     02 00 00 FF 
2dd44     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2dd48     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2dd4c     02 00 00 FF 
2dd50     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
2dd54     20 00 90 AD |  if_e	jmp	#LR__4703
2dd58     02 00 00 FF 
2dd5c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2dd60     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2dd64     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
2dd68     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2dd6c     02 00 00 FF 
2dd70     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2dd74     1C 00 90 FD | 	jmp	#LR__4704
2dd78                 | LR__4703
2dd78     02 00 00 FF 
2dd7c     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
2dd80     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2dd84     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
2dd88     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2dd8c     02 00 00 FF 
2dd90     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
2dd94                 | LR__4704
2dd94     02 00 00 FF 
2dd98     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2dd9c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
2dda0     02 00 00 FF 
2dda4     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
2dda8     20 00 90 AD |  if_e	jmp	#LR__4705
2ddac     02 00 00 FF 
2ddb0     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
2ddb4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2ddb8     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
2ddbc     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2ddc0     02 00 00 FF 
2ddc4     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2ddc8     1C 00 90 FD | 	jmp	#LR__4706
2ddcc                 | LR__4705
2ddcc     02 00 00 FF 
2ddd0     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2ddd4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
2ddd8     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
2dddc     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
2dde0     02 00 00 FF 
2dde4     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
2dde8                 | LR__4706
2dde8     08 03 02 FD | 	qmul	_var02, _var09
2ddec                 | ' 		_tzname[1] = stdname;
2ddec                 | ' 
2ddec                 | '         return sgn * off;
2ddec     18 FA 61 FD | 	getqx	result1
2ddf0                 | LR__4707
2ddf0                 | _fatfs_cc___tzoffset_ret
2ddf0     2D 00 64 FD | 	ret
2ddf4                 | 
2ddf4                 | _fatfs_cc___indst
2ddf4     10 12 06 F1 | 	add	arg01, #16
2ddf8     09 01 02 FB | 	rdlong	_var01, arg01
2ddfc     10 12 86 F1 | 	sub	arg01, #16
2de00     02 00 0E F2 | 	cmp	_var01, #2 wz
2de04     30 00 90 5D |  if_ne	jmp	#LR__4710
2de08     07 00 06 F6 | 	mov	_var01, #7
2de0c     18 12 06 F1 | 	add	arg01, #24
2de10     09 03 02 FB | 	rdlong	_var02, arg01
2de14     01 01 02 F1 | 	add	_var01, _var02
2de18     0C 12 86 F1 | 	sub	arg01, #12
2de1c     09 05 02 FB | 	rdlong	_var03, arg01
2de20     02 01 82 F1 | 	sub	_var01, _var03
2de24     00 00 56 F2 | 	cmps	_var01, #0 wc
2de28                 | '                         return 1;
2de28     01 FA 05 C6 |  if_b	mov	result1, #1
2de2c     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2de30                 | '                 return 0;
2de30     00 FA 05 F6 | 	mov	result1, #0
2de34     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2de38                 | LR__4710
2de38     10 12 06 F1 | 	add	arg01, #16
2de3c     09 01 02 FB | 	rdlong	_var01, arg01
2de40     10 12 86 F1 | 	sub	arg01, #16
2de44     0A 00 0E F2 | 	cmp	_var01, #10 wz
2de48     28 00 90 5D |  if_ne	jmp	#LR__4711
2de4c     18 12 06 F1 | 	add	arg01, #24
2de50     09 01 02 FB | 	rdlong	_var01, arg01
2de54     0C 12 86 F1 | 	sub	arg01, #12
2de58     09 07 02 FB | 	rdlong	_var04, arg01
2de5c     03 01 82 F1 | 	sub	_var01, _var04
2de60     00 00 56 F2 | 	cmps	_var01, #0 wc
2de64                 | '                         return 0;
2de64     00 FA 05 C6 |  if_b	mov	result1, #0
2de68     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
2de6c                 | '                 return 1;
2de6c     01 FA 05 F6 | 	mov	result1, #1
2de70     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
2de74                 | LR__4711
2de74                 | '         }
2de74                 | ' 
2de74                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
2de74     00 00 06 F6 | 	mov	_var01, #0
2de78     10 12 06 F1 | 	add	arg01, #16
2de7c     09 03 02 FB | 	rdlong	_var02, arg01
2de80     10 12 86 F1 | 	sub	arg01, #16
2de84     03 02 56 F2 | 	cmps	_var02, #3 wc
2de88     10 00 90 CD |  if_b	jmp	#LR__4712
2de8c     10 12 06 F1 | 	add	arg01, #16
2de90     09 05 02 FB | 	rdlong	_var03, arg01
2de94     0A 04 56 F2 | 	cmps	_var03, #10 wc
2de98     01 00 06 C6 |  if_b	mov	_var01, #1
2de9c                 | LR__4712
2de9c     00 FB 01 F6 | 	mov	result1, _var01
2dea0                 | _fatfs_cc___indst_ret
2dea0     2D 00 64 FD | 	ret
2dea4                 | 
2dea4                 | ' 	
2dea4                 | ' 	FUNCTION pfunc(c as integer) as integer
2dea4                 | ___strs_cl_pfunc
2dea4                 | ' 		if (i < 16) then
2dea4     04 E4 05 F1 | 	add	objptr, #4
2dea8     F2 FA 01 FB | 	rdlong	result1, objptr
2deac     04 E4 85 F1 | 	sub	objptr, #4
2deb0     10 FA 55 F2 | 	cmps	result1, #16 wc
2deb4     2C 00 90 3D |  if_ae	jmp	#LR__4720
2deb8     F2 FA 01 FB | 	rdlong	result1, objptr
2debc     04 E4 05 F1 | 	add	objptr, #4
2dec0     F2 00 02 FB | 	rdlong	_var01, objptr
2dec4     FD 00 02 F1 | 	add	_var01, result1
2dec8     00 13 42 FC | 	wrbyte	arg01, _var01
2decc     F2 FA 01 FB | 	rdlong	result1, objptr
2ded0     01 FA 05 F1 | 	add	result1, #1
2ded4     F2 FA 61 FC | 	wrlong	result1, objptr
2ded8     04 E4 85 F1 | 	sub	objptr, #4
2dedc                 | ' 			p(i) = c
2dedc                 | ' 			i = i+1
2dedc                 | ' 			return 1
2dedc     01 FA 05 F6 | 	mov	result1, #1
2dee0     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
2dee4                 | LR__4720
2dee4                 | ' 			return -1
2dee4     01 FA 65 F6 | 	neg	result1, #1
2dee8                 | ___strs_cl_pfunc_ret
2dee8     2D 00 64 FD | 	ret
2deec                 | 
2deec                 | __struct__s_vfs_file_t_putchar
2deec     04 4A 05 F6 | 	mov	COUNT_, #4
2def0     A8 00 A0 FD | 	call	#pushregs_
2def4     1C E4 05 F1 | 	add	objptr, #28
2def8     F2 1E 0A FB | 	rdlong	local01, objptr wz
2defc     1C E4 85 F1 | 	sub	objptr, #28
2df00     00 FA 05 A6 |  if_e	mov	result1, #0
2df04     48 00 90 AD |  if_e	jmp	#LR__4730
2df08     1C E4 05 F1 | 	add	objptr, #28
2df0c     F2 20 02 FB | 	rdlong	local02, objptr
2df10     10 23 02 F6 | 	mov	local03, local02
2df14     1C E4 85 F1 | 	sub	objptr, #28
2df18     13 22 46 F7 | 	zerox	local03, #19
2df1c     14 20 46 F0 | 	shr	local02, #20
2df20     02 20 66 F0 | 	shl	local02, #2
2df24     ED 20 02 F1 | 	add	local02, __methods__
2df28     10 21 02 FB | 	rdlong	local02, local02
2df2c     F2 14 02 F6 | 	mov	arg02, objptr
2df30     F2 24 02 F6 | 	mov	local04, objptr
2df34     11 E5 01 F6 | 	mov	objptr, local03
2df38     2D 20 62 FD | 	call	local02
2df3c     12 E5 01 F6 | 	mov	objptr, local04
2df40                 | '     return (i < 0) ? 0 : 1;
2df40     00 FA 55 F2 | 	cmps	result1, #0 wc
2df44     00 1E 06 C6 |  if_b	mov	local01, #0
2df48     01 1E 06 36 |  if_ae	mov	local01, #1
2df4c     0F FB 01 F6 | 	mov	result1, local01
2df50                 | LR__4730
2df50     A7 F0 03 F6 | 	mov	ptra, fp
2df54     B2 00 A0 FD | 	call	#popregs_
2df58                 | __struct__s_vfs_file_t_putchar_ret
2df58     2D 00 64 FD | 	ret
2df5c                 | 
2df5c                 | __struct__s_vfs_file_t_getchar
2df5c     03 4A 05 F6 | 	mov	COUNT_, #3
2df60     A8 00 A0 FD | 	call	#pushregs_
2df64     20 E4 05 F1 | 	add	objptr, #32
2df68     F2 12 0A FB | 	rdlong	arg01, objptr wz
2df6c     20 E4 85 F1 | 	sub	objptr, #32
2df70     01 FA 65 A6 |  if_e	neg	result1, #1
2df74     38 00 90 AD |  if_e	jmp	#LR__4740
2df78                 | '     return getcf(__this);
2df78     20 E4 05 F1 | 	add	objptr, #32
2df7c     F2 1E 02 FB | 	rdlong	local01, objptr
2df80     0F 21 02 F6 | 	mov	local02, local01
2df84     20 E4 85 F1 | 	sub	objptr, #32
2df88     13 20 46 F7 | 	zerox	local02, #19
2df8c     14 1E 46 F0 | 	shr	local01, #20
2df90     02 1E 66 F0 | 	shl	local01, #2
2df94     ED 1E 02 F1 | 	add	local01, __methods__
2df98     0F 1F 02 FB | 	rdlong	local01, local01
2df9c     F2 12 02 F6 | 	mov	arg01, objptr
2dfa0     F2 22 02 F6 | 	mov	local03, objptr
2dfa4     10 E5 01 F6 | 	mov	objptr, local02
2dfa8     2D 1E 62 FD | 	call	local01
2dfac     11 E5 01 F6 | 	mov	objptr, local03
2dfb0                 | LR__4740
2dfb0     A7 F0 03 F6 | 	mov	ptra, fp
2dfb4     B2 00 A0 FD | 	call	#popregs_
2dfb8                 | __struct__s_vfs_file_t_getchar_ret
2dfb8     2D 00 64 FD | 	ret
2dfbc                 | 
2dfbc                 | __struct___bas_wrap_sender_tx
2dfbc     03 4A 05 F6 | 	mov	COUNT_, #3
2dfc0     A8 00 A0 FD | 	call	#pushregs_
2dfc4     F2 1E 02 FB | 	rdlong	local01, objptr
2dfc8     0F 21 02 F6 | 	mov	local02, local01
2dfcc     13 1E 46 F7 | 	zerox	local01, #19
2dfd0     14 20 46 F0 | 	shr	local02, #20
2dfd4     02 20 66 F0 | 	shl	local02, #2
2dfd8     ED 20 02 F1 | 	add	local02, __methods__
2dfdc     10 21 02 FB | 	rdlong	local02, local02
2dfe0     F2 22 02 F6 | 	mov	local03, objptr
2dfe4     0F E5 01 F6 | 	mov	objptr, local01
2dfe8     2D 20 62 FD | 	call	local02
2dfec     11 E5 01 F6 | 	mov	objptr, local03
2dff0     01 FA 05 F6 | 	mov	result1, #1
2dff4     A7 F0 03 F6 | 	mov	ptra, fp
2dff8     B2 00 A0 FD | 	call	#popregs_
2dffc                 | __struct___bas_wrap_sender_tx_ret
2dffc     2D 00 64 FD | 	ret
2e000                 | 
2e000                 | __struct___bas_wrap_sender_rx
2e000     03 4A 05 F6 | 	mov	COUNT_, #3
2e004     A8 00 A0 FD | 	call	#pushregs_
2e008     04 E4 05 F1 | 	add	objptr, #4
2e00c     F2 1E 02 FB | 	rdlong	local01, objptr
2e010     0F 21 02 F6 | 	mov	local02, local01
2e014     04 E4 85 F1 | 	sub	objptr, #4
2e018     13 20 46 F7 | 	zerox	local02, #19
2e01c     14 1E 46 F0 | 	shr	local01, #20
2e020     02 1E 66 F0 | 	shl	local01, #2
2e024     ED 1E 02 F1 | 	add	local01, __methods__
2e028     0F 1F 02 FB | 	rdlong	local01, local01
2e02c     F2 22 02 F6 | 	mov	local03, objptr
2e030     10 E5 01 F6 | 	mov	objptr, local02
2e034     2D 1E 62 FD | 	call	local01
2e038     11 E5 01 F6 | 	mov	objptr, local03
2e03c     A7 F0 03 F6 | 	mov	ptra, fp
2e040     B2 00 A0 FD | 	call	#popregs_
2e044                 | __struct___bas_wrap_sender_rx_ret
2e044     2D 00 64 FD | 	ret
2e048                 | 
2e048                 | __struct___bas_wrap_sender_close
2e048     03 4A 05 F6 | 	mov	COUNT_, #3
2e04c     A8 00 A0 FD | 	call	#pushregs_
2e050     08 E4 05 F1 | 	add	objptr, #8
2e054     F2 1E 02 FB | 	rdlong	local01, objptr
2e058     0F 21 02 F6 | 	mov	local02, local01
2e05c     08 E4 85 F1 | 	sub	objptr, #8
2e060     13 20 46 F7 | 	zerox	local02, #19
2e064     14 1E 46 F0 | 	shr	local01, #20
2e068     02 1E 66 F0 | 	shl	local01, #2
2e06c     ED 1E 02 F1 | 	add	local01, __methods__
2e070     0F 1F 02 FB | 	rdlong	local01, local01
2e074     F2 22 02 F6 | 	mov	local03, objptr
2e078     10 E5 01 F6 | 	mov	objptr, local02
2e07c     2D 1E 62 FD | 	call	local01
2e080     11 E5 01 F6 | 	mov	objptr, local03
2e084     A7 F0 03 F6 | 	mov	ptra, fp
2e088     B2 00 A0 FD | 	call	#popregs_
2e08c                 | __struct___bas_wrap_sender_close_ret
2e08c     2D 00 64 FD | 	ret
2e090                 | 
2e090                 | LR__4750
2e090     2F          | 	byte	"/"
2e091     00          | 	byte	0
2e092                 | LR__4751
2e092     69 6E 66    | 	byte	"inf"
2e095     00          | 	byte	0
2e096                 | LR__4752
2e096     6E 61 6E    | 	byte	"nan"
2e099     00          | 	byte	0
2e09a                 | LR__4753
2e09a                 | 	byte	
2e09a     00          | 	byte	0
2e09b                 | LR__4754
2e09b                 | 	byte	
2e09b     00          | 	byte	0
2e09c                 | LR__4755
2e09c                 | 	byte	
2e09c     00          | 	byte	0
2e09d                 | LR__4756
2e09d                 | 	byte	
2e09d     00          | 	byte	0
2e09e                 | LR__4757
2e09e                 | 	byte	
2e09e     00          | 	byte	0
2e09f                 | LR__4758
2e09f                 | 	byte	
2e09f     00          | 	byte	0
2e0a0                 | LR__4759
2e0a0                 | 	byte	
2e0a0     00          | 	byte	0
2e0a1                 | LR__4760
2e0a1                 | 	byte	
2e0a1     00          | 	byte	0
2e0a2                 | LR__4761
2e0a2     00          | 	byte	0
2e0a3     00          | 	byte	0
2e0a4                 | LR__4762
2e0a4     00          | 	byte	0
2e0a5     00          | 	byte	0
2e0a6                 | LR__4763
2e0a6     00          | 	byte	0
2e0a7     00          | 	byte	0
2e0a8                 | LR__4764
2e0a8     20 21 21 21 
2e0ac     20 63 6F 72 
2e0b0     72 75 70 74 
2e0b4     65 64 20 68 
2e0b8     65 61 70 3F 
2e0bc     3F 3F 20 21 
2e0c0     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
2e0c3     00          | 	byte	0
2e0c4                 | LR__4765
2e0c4     20 21 21 21 
2e0c8     20 6F 75 74 
2e0cc     20 6F 66 20 
2e0d0     68 65 61 70 
2e0d4     20 6D 65 6D 
2e0d8     6F 72 79 20 
2e0dc     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
2e0e0     00          | 	byte	0
2e0e1                 | LR__4766
2e0e1     20 21 21 21 
2e0e5     20 63 6F 72 
2e0e9     72 75 70 74 
2e0ed     65 64 20 68 
2e0f1     65 61 70 20 
2e0f5     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
2e0f9     00          | 	byte	0
2e0fa                 | LR__4767
2e0fa     00          | 	byte	0
2e0fb     00          | 	byte	0
2e0fc                 | LR__4768
2e0fc     2E          | 	byte	"."
2e0fd     00          | 	byte	0
2e0fe                 | LR__4769
2e0fe     00          | 	byte	0
2e0ff     00          | 	byte	0
2e100                 | LR__4770
2e100     00          | 	byte	0
2e101     00          | 	byte	0
2e102                 | LR__4771
2e102     00          | 	byte	0
2e103     00          | 	byte	0
2e104                 | LR__4772
2e104     2A 3A 3C 3E 
2e108     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
2e10c     00          | 	byte	0
2e10d                 | LR__4773
2e10d     2B 2C 3B 3D 
2e111     5B 5D       | 	byte	"+,;=[]"
2e113     00          | 	byte	0
2e114                 | LR__4774
2e114     46 41 54 33 
2e118     32 20 20 20 | 	byte	"FAT32   "
2e11c     00          | 	byte	0
2e11d                 | LR__4775
2e11d     54 5A       | 	byte	"TZ"
2e11f     00          | 	byte	0
2e120                 | LR__4776
2e120     00          | 	byte	0
2e121     00          | 	byte	0
2e122                 | LR__4777
2e122                 | 	byte	
2e122     00          | 	byte	0
2e123                 | LR__4778
2e123                 | 	byte	
2e123     00          | 	byte	0
2e124                 | LR__4779
2e124     22          | 	byte	34
2e125     00          | 	byte	0
2e126                 | LR__4780
2e126     22          | 	byte	34
2e127     00          | 	byte	0
2e128                 | LR__4781
2e128     3A          | 	byte	":"
2e129     00          | 	byte	0
2e12a                 | LR__4782
2e12a                 | 	byte	
2e12a     00          | 	byte	0
2e12b                 | LR__4783
2e12b                 | 	byte	
2e12b     00          | 	byte	0
2e12c                 | LR__4784
2e12c                 | 	byte	
2e12c     00          | 	byte	0
2e12d                 | LR__4785
2e12d                 | 	byte	
2e12d     00          | 	byte	0
2e12e                 | LR__4786
2e12e                 | 	byte	
2e12e     00          | 	byte	0
2e12f                 | LR__4787
2e12f                 | 	byte	
2e12f     00          | 	byte	0
2e130                 | LR__4788
2e130                 | 	byte	
2e130     00          | 	byte	0
2e131                 | LR__4789
2e131     22          | 	byte	34
2e132     00          | 	byte	0
2e133                 | LR__4790
2e133     22          | 	byte	34
2e134     00          | 	byte	0
2e135                 | LR__4791
2e135     22          | 	byte	34
2e136     00          | 	byte	0
2e137                 | LR__4792
2e137     22          | 	byte	34
2e138     00          | 	byte	0
2e139                 | LR__4793
2e139     22          | 	byte	34
2e13a     00          | 	byte	0
2e13b                 | LR__4794
2e13b     3E          | 	byte	">"
2e13c     00          | 	byte	0
2e13d                 | LR__4795
2e13d     3C          | 	byte	"<"
2e13e     00          | 	byte	0
2e13f                 | LR__4796
2e13f     2B          | 	byte	"+"
2e140     00          | 	byte	0
2e141                 | LR__4797
2e141     2D          | 	byte	"-"
2e142     00          | 	byte	0
2e143                 | LR__4798
2e143     2A          | 	byte	"*"
2e144     00          | 	byte	0
2e145                 | LR__4799
2e145     2F          | 	byte	"/"
2e146     00          | 	byte	0
2e147                 | LR__4800
2e147     5E          | 	byte	"^"
2e148     00          | 	byte	0
2e149                 | LR__4801
2e149     3D          | 	byte	"="
2e14a     00          | 	byte	0
2e14b                 | LR__4802
2e14b     2B          | 	byte	"+"
2e14c     00          | 	byte	0
2e14d                 | LR__4803
2e14d     2B          | 	byte	"+"
2e14e     00          | 	byte	0
2e14f                 | LR__4804
2e14f     2D          | 	byte	"-"
2e150     00          | 	byte	0
2e151                 | LR__4805
2e151     2D          | 	byte	"-"
2e152     00          | 	byte	0
2e153                 | LR__4806
2e153     3C          | 	byte	"<"
2e154     00          | 	byte	0
2e155                 | LR__4807
2e155     3E          | 	byte	">"
2e156     00          | 	byte	0
2e157                 | LR__4808
2e157     22          | 	byte	34
2e158     00          | 	byte	0
2e159                 | LR__4809
2e159     22          | 	byte	34
2e15a     00          | 	byte	0
2e15b                 | LR__4810
2e15b     2E          | 	byte	"."
2e15c     00          | 	byte	0
2e15d                 | LR__4811
2e15d     3F          | 	byte	"?"
2e15e     00          | 	byte	0
2e15f                 | LR__4812
2e15f     3F          | 	byte	"?"
2e160     00          | 	byte	0
2e161                 | LR__4813
2e161     6D 6F 75 73 
2e165     65          | 	byte	"mouse"
2e166     00          | 	byte	0
2e167                 | LR__4814
2e167     63 75 72 73 
2e16b     6F 72       | 	byte	"cursor"
2e16d     00          | 	byte	0
2e16e                 | LR__4815
2e16e     63 6C 69 63 
2e172     6B          | 	byte	"click"
2e173     00          | 	byte	0
2e174                 | LR__4816
2e174     6F 6E       | 	byte	"on"
2e176     00          | 	byte	0
2e177                 | LR__4817
2e177     31          | 	byte	"1"
2e178     00          | 	byte	0
2e179                 | LR__4818
2e179     6F 66 66    | 	byte	"off"
2e17c     00          | 	byte	0
2e17d                 | LR__4819
2e17d     30          | 	byte	"0"
2e17e     00          | 	byte	0
2e17f                 | LR__4820
2e17f     6D 6F 64 65 | 	byte	"mode"
2e183     00          | 	byte	0
2e184                 | LR__4821
2e184     6D 2E       | 	byte	"m."
2e186     00          | 	byte	0
2e187                 | LR__4822
2e187     61 74 61 72 
2e18b     69          | 	byte	"atari"
2e18c     00          | 	byte	0
2e18d                 | LR__4823
2e18d     30          | 	byte	"0"
2e18e     00          | 	byte	0
2e18f                 | LR__4824
2e18f     70 63 5F 61 
2e193     6D 62 65 72 | 	byte	"pc_amber"
2e197     00          | 	byte	0
2e198                 | LR__4825
2e198     31          | 	byte	"1"
2e199     00          | 	byte	0
2e19a                 | LR__4826
2e19a     70 63 5F 67 
2e19e     72 65 65 6E | 	byte	"pc_green"
2e1a2     00          | 	byte	0
2e1a3                 | LR__4827
2e1a3     32          | 	byte	"2"
2e1a4     00          | 	byte	0
2e1a5                 | LR__4828
2e1a5     70 63 5F 77 
2e1a9     68 69 74 65 | 	byte	"pc_white"
2e1ad     00          | 	byte	0
2e1ae                 | LR__4829
2e1ae     33          | 	byte	"3"
2e1af     00          | 	byte	0
2e1b0                 | LR__4830
2e1b0     73 74       | 	byte	"st"
2e1b2     00          | 	byte	0
2e1b3                 | LR__4831
2e1b3     34          | 	byte	"4"
2e1b4     00          | 	byte	0
2e1b5                 | LR__4832
2e1b5                 | 	byte	
2e1b5     00          | 	byte	0
2e1b6                 | LR__4833
2e1b6     6C 6F 61 64 | 	byte	"load"
2e1ba     00          | 	byte	0
2e1bb                 | LR__4834
2e1bb     73 61 76 65 | 	byte	"save"
2e1bf     00          | 	byte	0
2e1c0                 | LR__4835
2e1c0     62 72 75 6E | 	byte	"brun"
2e1c4     00          | 	byte	0
2e1c5                 | LR__4836
2e1c5     72 75 6E    | 	byte	"run"
2e1c8     00          | 	byte	0
2e1c9                 | LR__4837
2e1c9     6C 6F 2E    | 	byte	"lo."
2e1cc     00          | 	byte	0
2e1cd                 | LR__4838
2e1cd     73 2E       | 	byte	"s."
2e1cf     00          | 	byte	0
2e1d0                 | LR__4839
2e1d0     62 72 2E    | 	byte	"br."
2e1d3     00          | 	byte	0
2e1d4                 | LR__4840
2e1d4                 | 	byte	
2e1d4     00          | 	byte	0
2e1d5                 | LR__4841
2e1d5                 | 	byte	
2e1d5     00          | 	byte	0
2e1d6                 | LR__4842
2e1d6                 | 	byte	
2e1d6     00          | 	byte	0
2e1d7                 | LR__4843
2e1d7                 | 	byte	
2e1d7     00          | 	byte	0
2e1d8                 | LR__4844
2e1d8     20 55 73 65 
2e1dc     72 20 66 75 
2e1e0     6E 63 74 69 
2e1e4     6F 6E 73 20 
2e1e8     61 6E 64 20 
2e1ec     61 72 72 61 
2e1f0     79 73 20 6E 
2e1f4     6F 74 20 79 
2e1f8     65 74 20 69 
2e1fc     6D 70 6C 65 
2e200     6D 65 6E 74 
2e204     65 64       | 	byte	" User functions and arrays not yet implemented"
2e206     00          | 	byte	0
2e207                 | LR__4845
2e207                 | 	byte	
2e207     00          | 	byte	0
2e208                 | LR__4846
2e208                 | 	byte	
2e208     00          | 	byte	0
2e209                 | LR__4847
2e209     52 65 61 64 
2e20d     79          | 	byte	"Ready"
2e20e     00          | 	byte	0
2e20f                 | LR__4848
2e20f     2B          | 	byte	"+"
2e210     00          | 	byte	0
2e211                 | LR__4849
2e211     2D          | 	byte	"-"
2e212     00          | 	byte	0
2e213                 | LR__4850
2e213     6F 72       | 	byte	"or"
2e215     00          | 	byte	0
2e216                 | LR__4851
2e216     78 6F 72    | 	byte	"xor"
2e219     00          | 	byte	0
2e21a                 | LR__4852
2e21a     2A          | 	byte	"*"
2e21b     00          | 	byte	0
2e21c                 | LR__4853
2e21c     2F          | 	byte	"/"
2e21d     00          | 	byte	0
2e21e                 | LR__4854
2e21e     61 6E 64    | 	byte	"and"
2e221     00          | 	byte	0
2e222                 | LR__4855
2e222     64 69 76    | 	byte	"div"
2e225     00          | 	byte	0
2e226                 | LR__4856
2e226     6D 6F 64    | 	byte	"mod"
2e229     00          | 	byte	0
2e22a                 | LR__4857
2e22a     73 68 6C    | 	byte	"shl"
2e22d     00          | 	byte	0
2e22e                 | LR__4858
2e22e     73 68 72    | 	byte	"shr"
2e231     00          | 	byte	0
2e232                 | LR__4859
2e232     5E          | 	byte	"^"
2e233     00          | 	byte	0
2e234                 | LR__4860
2e234     6E 6F 74    | 	byte	"not"
2e237     00          | 	byte	0
2e238                 | LR__4861
2e238     40          | 	byte	"@"
2e239     00          | 	byte	0
2e23a                 | LR__4862
2e23a     3D          | 	byte	"="
2e23b     00          | 	byte	0
2e23c                 | LR__4863
2e23c     3E 3D       | 	byte	">="
2e23e     00          | 	byte	0
2e23f                 | LR__4864
2e23f     3C 3D       | 	byte	"<="
2e241     00          | 	byte	0
2e242                 | LR__4865
2e242     3C          | 	byte	"<"
2e243     00          | 	byte	0
2e244                 | LR__4866
2e244     3E          | 	byte	">"
2e245     00          | 	byte	0
2e246                 | LR__4867
2e246     3C 3E       | 	byte	"<>"
2e248     00          | 	byte	0
2e249                 | LR__4868
2e249     2B 2B       | 	byte	"++"
2e24b     00          | 	byte	0
2e24c                 | LR__4869
2e24c     2D 2D       | 	byte	"--"
2e24e     00          | 	byte	0
2e24f                 | LR__4870
2e24f     23          | 	byte	"#"
2e250     00          | 	byte	0
2e251                 | LR__4871
2e251     23          | 	byte	"#"
2e252     00          | 	byte	0
2e253                 | LR__4872
2e253     2D          | 	byte	"-"
2e254     00          | 	byte	0
2e255                 | LR__4873
2e255     30          | 	byte	"0"
2e256     00          | 	byte	0
2e257                 | LR__4874
2e257     63          | 	byte	"c"
2e258     00          | 	byte	0
2e259                 | LR__4875
2e259     63 23       | 	byte	"c#"
2e25b     00          | 	byte	0
2e25c                 | LR__4876
2e25c     64          | 	byte	"d"
2e25d     00          | 	byte	0
2e25e                 | LR__4877
2e25e     64 23       | 	byte	"d#"
2e260     00          | 	byte	0
2e261                 | LR__4878
2e261     65          | 	byte	"e"
2e262     00          | 	byte	0
2e263                 | LR__4879
2e263     66          | 	byte	"f"
2e264     00          | 	byte	0
2e265                 | LR__4880
2e265     66 23       | 	byte	"f#"
2e267     00          | 	byte	0
2e268                 | LR__4881
2e268     67          | 	byte	"g"
2e269     00          | 	byte	0
2e26a                 | LR__4882
2e26a     67 23       | 	byte	"g#"
2e26c     00          | 	byte	0
2e26d                 | LR__4883
2e26d     61          | 	byte	"a"
2e26e     00          | 	byte	0
2e26f                 | LR__4884
2e26f     61 23       | 	byte	"a#"
2e271     00          | 	byte	0
2e272                 | LR__4885
2e272     68          | 	byte	"h"
2e273     00          | 	byte	0
2e274                 | LR__4886
2e274     62          | 	byte	"b"
2e275     00          | 	byte	0
2e276                 | LR__4887
2e276     2B          | 	byte	"+"
2e277     00          | 	byte	0
2e278                 | LR__4888
2e278     2D          | 	byte	"-"
2e279     00          | 	byte	0
2e27a                 | LR__4889
2e27a     3D          | 	byte	"="
2e27b     00          | 	byte	0
2e27c                 | LR__4890
2e27c     2C          | 	byte	","
2e27d     00          | 	byte	0
2e27e                 | LR__4891
2e27e     2A          | 	byte	"*"
2e27f     00          | 	byte	0
2e280                 | LR__4892
2e280     2F          | 	byte	"/"
2e281     00          | 	byte	0
2e282                 | LR__4893
2e282     3B          | 	byte	";"
2e283     00          | 	byte	0
2e284                 | LR__4894
2e284     22          | 	byte	34
2e285     00          | 	byte	0
2e286                 | LR__4895
2e286     5E          | 	byte	"^"
2e287     00          | 	byte	0
2e288                 | LR__4896
2e288     29          | 	byte	")"
2e289     00          | 	byte	0
2e28a                 | LR__4897
2e28a     28          | 	byte	"("
2e28b     00          | 	byte	0
2e28c                 | LR__4898
2e28c     3A          | 	byte	":"
2e28d     00          | 	byte	0
2e28e                 | LR__4899
2e28e     20          | 	byte	" "
2e28f     00          | 	byte	0
2e290                 | LR__4900
2e290     3E          | 	byte	">"
2e291     00          | 	byte	0
2e292                 | LR__4901
2e292     3C          | 	byte	"<"
2e293     00          | 	byte	0
2e294                 | LR__4902
2e294     3D          | 	byte	"="
2e295     00          | 	byte	0
2e296                 | LR__4903
2e296     62 65 65 70 | 	byte	"beep"
2e29a     00          | 	byte	0
2e29b                 | LR__4904
2e29b     62 2E       | 	byte	"b."
2e29d     00          | 	byte	0
2e29e                 | LR__4905
2e29e     62 6F 78    | 	byte	"box"
2e2a1     00          | 	byte	0
2e2a2                 | LR__4906
2e2a2     62 72 75 6E | 	byte	"brun"
2e2a6     00          | 	byte	0
2e2a7                 | LR__4907
2e2a7     62 72 2E    | 	byte	"br."
2e2aa     00          | 	byte	0
2e2ab                 | LR__4908
2e2ab     63 69 72 63 
2e2af     6C 65       | 	byte	"circle"
2e2b1     00          | 	byte	0
2e2b2                 | LR__4909
2e2b2     63 69 2E    | 	byte	"ci."
2e2b5     00          | 	byte	0
2e2b6                 | LR__4910
2e2b6     63 6C 69 63 
2e2ba     6B          | 	byte	"click"
2e2bb     00          | 	byte	0
2e2bc                 | LR__4911
2e2bc     63 6C 73    | 	byte	"cls"
2e2bf     00          | 	byte	0
2e2c0                 | LR__4912
2e2c0     63 6F 6C 6F 
2e2c4     72          | 	byte	"color"
2e2c5     00          | 	byte	0
2e2c6                 | LR__4913
2e2c6     63 2E       | 	byte	"c."
2e2c8     00          | 	byte	0
2e2c9                 | LR__4914
2e2c9     63 73 61 76 
2e2cd     65          | 	byte	"csave"
2e2ce     00          | 	byte	0
2e2cf                 | LR__4915
2e2cf     63 73 2E    | 	byte	"cs."
2e2d2     00          | 	byte	0
2e2d3                 | LR__4916
2e2d3     63 75 72 73 
2e2d7     6F 72       | 	byte	"cursor"
2e2d9     00          | 	byte	0
2e2da                 | LR__4917
2e2da     64 65 66 73 
2e2de     6E 64       | 	byte	"defsnd"
2e2e0     00          | 	byte	0
2e2e1                 | LR__4918
2e2e1     64 65 66 65 
2e2e5     6E 76       | 	byte	"defenv"
2e2e7     00          | 	byte	0
2e2e8                 | LR__4919
2e2e8     64 65 66 73 
2e2ec     70 72 69 74 
2e2f0     65          | 	byte	"defsprite"
2e2f1     00          | 	byte	0
2e2f2                 | LR__4920
2e2f2     64 73 2E    | 	byte	"ds."
2e2f5     00          | 	byte	0
2e2f6                 | LR__4921
2e2f6     64 65 67    | 	byte	"deg"
2e2f9     00          | 	byte	0
2e2fa                 | LR__4922
2e2fa     64 69 6D    | 	byte	"dim"
2e2fd     00          | 	byte	0
2e2fe                 | LR__4923
2e2fe     64 69 72    | 	byte	"dir"
2e301     00          | 	byte	0
2e302                 | LR__4924
2e302     64 70 6F 6B 
2e306     65          | 	byte	"dpoke"
2e307     00          | 	byte	0
2e308                 | LR__4925
2e308     64 72 61 77 | 	byte	"draw"
2e30c     00          | 	byte	0
2e30d                 | LR__4926
2e30d     64 72 2E    | 	byte	"dr."
2e310     00          | 	byte	0
2e311                 | LR__4927
2e311     65 6C 73 65 | 	byte	"else"
2e315     00          | 	byte	0
2e316                 | LR__4928
2e316     65 6E 64    | 	byte	"end"
2e319     00          | 	byte	0
2e31a                 | LR__4929
2e31a     66 63 69 72 
2e31e     63 6C 65    | 	byte	"fcircle"
2e321     00          | 	byte	0
2e322                 | LR__4930
2e322     66 63 2E    | 	byte	"fc."
2e325     00          | 	byte	0
2e326                 | LR__4931
2e326     66 69 6C 6C | 	byte	"fill"
2e32a     00          | 	byte	0
2e32b                 | LR__4932
2e32b     66 69 2E    | 	byte	"fi."
2e32e     00          | 	byte	0
2e32f                 | LR__4933
2e32f     66 6F 6E 74 | 	byte	"font"
2e333     00          | 	byte	0
2e334                 | LR__4934
2e334     66 6F 72    | 	byte	"for"
2e337     00          | 	byte	0
2e338                 | LR__4935
2e338     66 2E       | 	byte	"f."
2e33a     00          | 	byte	0
2e33b                 | LR__4936
2e33b     66 72 61 6D 
2e33f     65          | 	byte	"frame"
2e340     00          | 	byte	0
2e341                 | LR__4937
2e341     66 72 2E    | 	byte	"fr."
2e344     00          | 	byte	0
2e345                 | LR__4938
2e345     67 6F 73 75 
2e349     62          | 	byte	"gosub"
2e34a     00          | 	byte	0
2e34b                 | LR__4939
2e34b     67 6F 74 6F | 	byte	"goto"
2e34f     00          | 	byte	0
2e350                 | LR__4940
2e350     67 2E       | 	byte	"g."
2e352     00          | 	byte	0
2e353                 | LR__4941
2e353     69 66       | 	byte	"if"
2e355     00          | 	byte	0
2e356                 | LR__4942
2e356     69 6E 6B    | 	byte	"ink"
2e359     00          | 	byte	0
2e35a                 | LR__4943
2e35a     69 2E       | 	byte	"i."
2e35c     00          | 	byte	0
2e35d                 | LR__4944
2e35d     69 6E 74    | 	byte	"int"
2e360     00          | 	byte	0
2e361                 | LR__4945
2e361     6C 69 73 74 | 	byte	"list"
2e365     00          | 	byte	0
2e366                 | LR__4946
2e366     6C 2E       | 	byte	"l."
2e368     00          | 	byte	0
2e369                 | LR__4947
2e369     6C 6F 61 64 | 	byte	"load"
2e36d     00          | 	byte	0
2e36e                 | LR__4948
2e36e     6C 6F 2E    | 	byte	"lo."
2e371     00          | 	byte	0
2e372                 | LR__4949
2e372     6C 70 6F 6B 
2e376     65          | 	byte	"lpoke"
2e377     00          | 	byte	0
2e378                 | LR__4950
2e378     6D 6F 64 65 | 	byte	"mode"
2e37c     00          | 	byte	0
2e37d                 | LR__4951
2e37d     6D 2E       | 	byte	"m."
2e37f     00          | 	byte	0
2e380                 | LR__4952
2e380     6D 6F 75 73 
2e384     65          | 	byte	"mouse"
2e385     00          | 	byte	0
2e386                 | LR__4953
2e386     6E 65 77    | 	byte	"new"
2e389     00          | 	byte	0
2e38a                 | LR__4954
2e38a     6E 65 78 74 | 	byte	"next"
2e38e     00          | 	byte	0
2e38f                 | LR__4955
2e38f     6E 2E       | 	byte	"n."
2e391     00          | 	byte	0
2e392                 | LR__4956
2e392     70 61 70 65 
2e396     72          | 	byte	"paper"
2e397     00          | 	byte	0
2e398                 | LR__4957
2e398     70 61 2E    | 	byte	"pa."
2e39b     00          | 	byte	0
2e39c                 | LR__4958
2e39c     70 69 6E 66 
2e3a0     6C 6F 61 74 | 	byte	"pinfloat"
2e3a4     00          | 	byte	0
2e3a5                 | LR__4959
2e3a5     70 69 6E 68 
2e3a9     69          | 	byte	"pinhi"
2e3aa     00          | 	byte	0
2e3ab                 | LR__4960
2e3ab     70 69 6E 6C 
2e3af     6F          | 	byte	"pinlo"
2e3b0     00          | 	byte	0
2e3b1                 | LR__4961
2e3b1     70 69 6E 73 
2e3b5     74 61 72 74 | 	byte	"pinstart"
2e3b9     00          | 	byte	0
2e3ba                 | LR__4962
2e3ba     70 69 6E 74 
2e3be     6F 67 67 6C 
2e3c2     65          | 	byte	"pintoggle"
2e3c3     00          | 	byte	0
2e3c4                 | LR__4963
2e3c4     70 69 6E 77 
2e3c8     72 69 74 65 | 	byte	"pinwrite"
2e3cc     00          | 	byte	0
2e3cd                 | LR__4964
2e3cd     70 6C 61 79 | 	byte	"play"
2e3d1     00          | 	byte	0
2e3d2                 | LR__4965
2e3d2     70 2E       | 	byte	"p."
2e3d4     00          | 	byte	0
2e3d5                 | LR__4966
2e3d5     70 6C 6F 74 | 	byte	"plot"
2e3d9     00          | 	byte	0
2e3da                 | LR__4967
2e3da     70 6C 2E    | 	byte	"pl."
2e3dd     00          | 	byte	0
2e3de                 | LR__4968
2e3de     70 6F 6B 65 | 	byte	"poke"
2e3e2     00          | 	byte	0
2e3e3                 | LR__4969
2e3e3     70 6F 70    | 	byte	"pop"
2e3e6     00          | 	byte	0
2e3e7                 | LR__4970
2e3e7     70 6F 73 69 
2e3eb     74 69 6F 6E | 	byte	"position"
2e3ef     00          | 	byte	0
2e3f0                 | LR__4971
2e3f0     70 6F 73 2E | 	byte	"pos."
2e3f4     00          | 	byte	0
2e3f5                 | LR__4972
2e3f5     70 72 69 6E 
2e3f9     74          | 	byte	"print"
2e3fa     00          | 	byte	0
2e3fb                 | LR__4973
2e3fb     3F          | 	byte	"?"
2e3fc     00          | 	byte	0
2e3fd                 | LR__4974
2e3fd     72 61 64    | 	byte	"rad"
2e400     00          | 	byte	0
2e401                 | LR__4975
2e401     72 65 6C 65 
2e405     61 73 65    | 	byte	"release"
2e408     00          | 	byte	0
2e409                 | LR__4976
2e409     72 65 74 75 
2e40d     72 6E       | 	byte	"return"
2e40f     00          | 	byte	0
2e410                 | LR__4977
2e410     72 75 6E    | 	byte	"run"
2e413     00          | 	byte	0
2e414                 | LR__4978
2e414     73 61 76 65 | 	byte	"save"
2e418     00          | 	byte	0
2e419                 | LR__4979
2e419     73 2E       | 	byte	"s."
2e41b     00          | 	byte	0
2e41c                 | LR__4980
2e41c     73 65 74 64 
2e420     65 6C 61 79 | 	byte	"setdelay"
2e424     00          | 	byte	0
2e425                 | LR__4981
2e425     73 65 74 65 
2e429     6E 76       | 	byte	"setenv"
2e42b     00          | 	byte	0
2e42c                 | LR__4982
2e42c     73 65 74 6C 
2e430     65 6E       | 	byte	"setlen"
2e432     00          | 	byte	0
2e433                 | LR__4983
2e433     73 65 74 70 
2e437     61 6E       | 	byte	"setpan"
2e439     00          | 	byte	0
2e43a                 | LR__4984
2e43a     73 65 74 73 
2e43e     75 73 74 61 
2e442     69 6E       | 	byte	"setsustain"
2e444     00          | 	byte	0
2e445                 | LR__4985
2e445     73 65 74 76 
2e449     6F 6C       | 	byte	"setvol"
2e44b     00          | 	byte	0
2e44c                 | LR__4986
2e44c     73 65 74 77 
2e450     61 76 65    | 	byte	"setwave"
2e453     00          | 	byte	0
2e454                 | LR__4987
2e454     73 6F 75 6E 
2e458     64          | 	byte	"sound"
2e459     00          | 	byte	0
2e45a                 | LR__4988
2e45a     73 6F 2E    | 	byte	"so."
2e45d     00          | 	byte	0
2e45e                 | LR__4989
2e45e     73 70 72 69 
2e462     74 65       | 	byte	"sprite"
2e464     00          | 	byte	0
2e465                 | LR__4990
2e465     73 70 2E    | 	byte	"sp."
2e468     00          | 	byte	0
2e469                 | LR__4991
2e469     74 68 65 6E | 	byte	"then"
2e46d     00          | 	byte	0
2e46e                 | LR__4992
2e46e     77 61 69 74 
2e472     6D 73       | 	byte	"waitms"
2e474     00          | 	byte	0
2e475                 | LR__4993
2e475     77 61 69 74 
2e479     63 6C 6F 63 
2e47d     6B          | 	byte	"waitclock"
2e47e     00          | 	byte	0
2e47f                 | LR__4994
2e47f     77 63 2E    | 	byte	"wc."
2e482     00          | 	byte	0
2e483                 | LR__4995
2e483     77 61 69 74 
2e487     76 62 6C    | 	byte	"waitvbl"
2e48a     00          | 	byte	0
2e48b                 | LR__4996
2e48b     77 76 2E    | 	byte	"wv."
2e48e     00          | 	byte	0
2e48f                 | LR__4997
2e48f     77 78 70 69 
2e493     6E          | 	byte	"wxpin"
2e494     00          | 	byte	0
2e495                 | LR__4998
2e495     77 79 70 69 
2e499     6E          | 	byte	"wypin"
2e49a     00          | 	byte	0
2e49b                 | LR__4999
2e49b     61 62 73    | 	byte	"abs"
2e49e     00          | 	byte	0
2e49f                 | LR__5000
2e49f     61 63 6F 73 | 	byte	"acos"
2e4a3     00          | 	byte	0
2e4a4                 | LR__5001
2e4a4     61 64 72    | 	byte	"adr"
2e4a7     00          | 	byte	0
2e4a8                 | LR__5002
2e4a8     61 64 64 72 | 	byte	"addr"
2e4ac     00          | 	byte	0
2e4ad                 | LR__5003
2e4ad     61 73 63    | 	byte	"asc"
2e4b0     00          | 	byte	0
2e4b1                 | LR__5004
2e4b1     61 73 69 6E | 	byte	"asin"
2e4b5     00          | 	byte	0
2e4b6                 | LR__5005
2e4b6     61 74 6E    | 	byte	"atn"
2e4b9     00          | 	byte	0
2e4ba                 | LR__5006
2e4ba     62 69 6E 24 | 	byte	"bin$"
2e4be     00          | 	byte	0
2e4bf                 | LR__5007
2e4bf     63 68 72 24 | 	byte	"chr$"
2e4c3     00          | 	byte	0
2e4c4                 | LR__5008
2e4c4     63 6F 73    | 	byte	"cos"
2e4c7     00          | 	byte	0
2e4c8                 | LR__5009
2e4c8     64 70 65 65 
2e4cc     6B          | 	byte	"dpeek"
2e4cd     00          | 	byte	0
2e4ce                 | LR__5010
2e4ce     66 72 65    | 	byte	"fre"
2e4d1     00          | 	byte	0
2e4d2                 | LR__5011
2e4d2     67 65 74 70 
2e4d6     69 78 65 6C | 	byte	"getpixel"
2e4da     00          | 	byte	0
2e4db                 | LR__5012
2e4db     67 65 2E    | 	byte	"ge."
2e4de     00          | 	byte	0
2e4df                 | LR__5013
2e4df     67 65 74 65 
2e4e3     6E 76 73 75 
2e4e7     73 74 61 69 
2e4eb     6E          | 	byte	"getenvsustain"
2e4ec     00          | 	byte	0
2e4ed                 | LR__5014
2e4ed     67 65 74 6E 
2e4f1     6F 74 65 76 
2e4f5     61 6C 75 65 | 	byte	"getnotevalue"
2e4f9     00          | 	byte	0
2e4fa                 | LR__5015
2e4fa     67 65 74 74 
2e4fe     69 6D 65    | 	byte	"gettime"
2e501     00          | 	byte	0
2e502                 | LR__5016
2e502     68 65 78 24 | 	byte	"hex$"
2e506     00          | 	byte	0
2e507                 | LR__5017
2e507     69 6E 6B 65 
2e50b     79 24       | 	byte	"inkey$"
2e50d     00          | 	byte	0
2e50e                 | LR__5018
2e50e     6C 65 66 74 
2e512     24          | 	byte	"left$"
2e513     00          | 	byte	0
2e514                 | LR__5019
2e514     6C 65 6E    | 	byte	"len"
2e517     00          | 	byte	0
2e518                 | LR__5020
2e518     6C 70 65 65 
2e51c     6B          | 	byte	"lpeek"
2e51d     00          | 	byte	0
2e51e                 | LR__5021
2e51e     6D 69 64 24 | 	byte	"mid$"
2e522     00          | 	byte	0
2e523                 | LR__5022
2e523     6D 6F 75 73 
2e527     65 6B       | 	byte	"mousek"
2e529     00          | 	byte	0
2e52a                 | LR__5023
2e52a     6D 6F 75 73 
2e52e     65 77       | 	byte	"mousew"
2e530     00          | 	byte	0
2e531                 | LR__5024
2e531     6D 6F 75 73 
2e535     65 78       | 	byte	"mousex"
2e537     00          | 	byte	0
2e538                 | LR__5025
2e538     6D 6F 75 73 
2e53c     65 79       | 	byte	"mousey"
2e53e     00          | 	byte	0
2e53f                 | LR__5026
2e53f     70 65 65 6B | 	byte	"peek"
2e543     00          | 	byte	0
2e544                 | LR__5027
2e544     70 69 6E 72 
2e548     65 61 64    | 	byte	"pinread"
2e54b     00          | 	byte	0
2e54c                 | LR__5028
2e54c     72 64 70 69 
2e550     6E          | 	byte	"rdpin"
2e551     00          | 	byte	0
2e552                 | LR__5029
2e552     72 69 67 68 
2e556     74 24       | 	byte	"right$"
2e558     00          | 	byte	0
2e559                 | LR__5030
2e559     72 71 70 69 
2e55d     6E          | 	byte	"rqpin"
2e55e     00          | 	byte	0
2e55f                 | LR__5031
2e55f     72 6E 64    | 	byte	"rnd"
2e562     00          | 	byte	0
2e563                 | LR__5032
2e563     73 69 6E    | 	byte	"sin"
2e566     00          | 	byte	0
2e567                 | LR__5033
2e567     73 71 72    | 	byte	"sqr"
2e56a     00          | 	byte	0
2e56b                 | LR__5034
2e56b     73 74 69 63 
2e56f     6B          | 	byte	"stick"
2e570     00          | 	byte	0
2e571                 | LR__5035
2e571     73 74 72 69 
2e575     67          | 	byte	"strig"
2e576     00          | 	byte	0
2e577                 | LR__5036
2e577     73 74 72 24 | 	byte	"str$"
2e57b     00          | 	byte	0
2e57c                 | LR__5037
2e57c     74 61 6E    | 	byte	"tan"
2e57f     00          | 	byte	0
2e580                 | LR__5038
2e580     76 61 6C    | 	byte	"val"
2e583     00          | 	byte	0
2e584                 | LR__5039
2e584     76 61 72 70 
2e588     74 72       | 	byte	"varptr"
2e58a     00          | 	byte	0
2e58b                 | LR__5040
2e58b     61          | 	byte	"a"
2e58c     00          | 	byte	0
2e58d                 | LR__5041
2e58d     7A          | 	byte	"z"
2e58e     00          | 	byte	0
2e58f                 | LR__5042
2e58f     5F          | 	byte	"_"
2e590     00          | 	byte	0
2e591                 | LR__5043
2e591     61          | 	byte	"a"
2e592     00          | 	byte	0
2e593                 | LR__5044
2e593     7A          | 	byte	"z"
2e594     00          | 	byte	0
2e595                 | LR__5045
2e595     30          | 	byte	"0"
2e596     00          | 	byte	0
2e597                 | LR__5046
2e597     39          | 	byte	"9"
2e598     00          | 	byte	0
2e599                 | LR__5047
2e599     5F          | 	byte	"_"
2e59a     00          | 	byte	0
2e59b                 | LR__5048
2e59b     2E          | 	byte	"."
2e59c     00          | 	byte	0
2e59d                 | LR__5049
2e59d     61          | 	byte	"a"
2e59e     00          | 	byte	0
2e59f                 | LR__5050
2e59f     7A          | 	byte	"z"
2e5a0     00          | 	byte	0
2e5a1                 | LR__5051
2e5a1     30          | 	byte	"0"
2e5a2     00          | 	byte	0
2e5a3                 | LR__5052
2e5a3     39          | 	byte	"9"
2e5a4     00          | 	byte	0
2e5a5                 | LR__5053
2e5a5     5F          | 	byte	"_"
2e5a6     00          | 	byte	0
2e5a7                 | LR__5054
2e5a7     24          | 	byte	"$"
2e5a8     00          | 	byte	0
2e5a9                 | LR__5055
2e5a9     25          | 	byte	"%"
2e5aa     00          | 	byte	0
2e5ab                 | LR__5056
2e5ab     21          | 	byte	"!"
2e5ac     00          | 	byte	0
2e5ad                 | LR__5057
2e5ad     30          | 	byte	"0"
2e5ae     00          | 	byte	0
2e5af                 | LR__5058
2e5af     39          | 	byte	"9"
2e5b0     00          | 	byte	0
2e5b1                 | LR__5059
2e5b1     2E          | 	byte	"."
2e5b2     00          | 	byte	0
2e5b3                 | LR__5060
2e5b3     24          | 	byte	"$"
2e5b4     00          | 	byte	0
2e5b5                 | LR__5061
2e5b5     25          | 	byte	"%"
2e5b6     00          | 	byte	0
2e5b7                 | LR__5062
2e5b7     2D          | 	byte	"-"
2e5b8     00          | 	byte	0
2e5b9                 | LR__5063
2e5b9     2E          | 	byte	"."
2e5ba     00          | 	byte	0
2e5bb                 | LR__5064
2e5bb     30          | 	byte	"0"
2e5bc     00          | 	byte	0
2e5bd                 | LR__5065
2e5bd     39          | 	byte	"9"
2e5be     00          | 	byte	0
2e5bf                 | LR__5066
2e5bf     5F          | 	byte	"_"
2e5c0     00          | 	byte	0
2e5c1                 | LR__5067
2e5c1     2E          | 	byte	"."
2e5c2     00          | 	byte	0
2e5c3                 | LR__5068
2e5c3     45          | 	byte	"E"
2e5c4     00          | 	byte	0
2e5c5                 | LR__5069
2e5c5     65          | 	byte	"e"
2e5c6     00          | 	byte	0
2e5c7                 | LR__5070
2e5c7     2D          | 	byte	"-"
2e5c8     00          | 	byte	0
2e5c9                 | LR__5071
2e5c9     2D          | 	byte	"-"
2e5ca     00          | 	byte	0
2e5cb                 | LR__5072
2e5cb     65          | 	byte	"e"
2e5cc     00          | 	byte	0
2e5cd                 | LR__5073
2e5cd     2E          | 	byte	"."
2e5ce     00          | 	byte	0
2e5cf                 | LR__5074
2e5cf     45          | 	byte	"E"
2e5d0     00          | 	byte	0
2e5d1                 | LR__5075
2e5d1     65          | 	byte	"e"
2e5d2     00          | 	byte	0
2e5d3                 | LR__5076
2e5d3     30          | 	byte	"0"
2e5d4     00          | 	byte	0
2e5d5                 | LR__5077
2e5d5     39          | 	byte	"9"
2e5d6     00          | 	byte	0
2e5d7                 | LR__5078
2e5d7     24          | 	byte	"$"
2e5d8     00          | 	byte	0
2e5d9                 | LR__5079
2e5d9     25          | 	byte	"%"
2e5da     00          | 	byte	0
2e5db                 | LR__5080
2e5db     2D          | 	byte	"-"
2e5dc     00          | 	byte	0
2e5dd                 | LR__5081
2e5dd     30          | 	byte	"0"
2e5de     00          | 	byte	0
2e5df                 | LR__5082
2e5df     39          | 	byte	"9"
2e5e0     00          | 	byte	0
2e5e1                 | LR__5083
2e5e1     5F          | 	byte	"_"
2e5e2     00          | 	byte	0
2e5e3                 | LR__5084
2e5e3     30          | 	byte	"0"
2e5e4     00          | 	byte	0
2e5e5                 | LR__5085
2e5e5     39          | 	byte	"9"
2e5e6     00          | 	byte	0
2e5e7                 | LR__5086
2e5e7     5F          | 	byte	"_"
2e5e8     00          | 	byte	0
2e5e9                 | LR__5087
2e5e9     22          | 	byte	34
2e5ea     00          | 	byte	0
2e5eb                 | LR__5088
2e5eb     22          | 	byte	34
2e5ec     00          | 	byte	0
2e5ed                 | LR__5089
2e5ed     44 69 6D 3A 
2e5f1     20 61 74 20 
2e5f5     6C 69 6E 65 
2e5f9     20          | 	byte	"Dim: at line "
2e5fa     00          | 	byte	0
2e5fb                 | LR__5090
2e5fb     3A 20 77 61 
2e5ff     72 6E 69 6E 
2e603     67 3A 20 74 
2e607     68 65 20 76 
2e60b     61 72 69 61 
2e60f     62 6C 65 20 
2e613     65 78 69 73 
2e617     74 65 64 2E | 	byte	": warning: the variable existed."
2e61b     00          | 	byte	0
2e61c                 | LR__5091
2e61c     28          | 	byte	"("
2e61d     00          | 	byte	0
2e61e                 | LR__5092
2e61e     61 73       | 	byte	"as"
2e620     00          | 	byte	0
2e621                 | LR__5093
2e621     61 73       | 	byte	"as"
2e623     00          | 	byte	0
2e624                 | LR__5094
2e624     2C          | 	byte	","
2e625     00          | 	byte	0
2e626                 | LR__5095
2e626     29          | 	byte	")"
2e627     00          | 	byte	0
2e628                 | LR__5096
2e628     29          | 	byte	")"
2e629     00          | 	byte	0
2e62a                 | LR__5097
2e62a     61 73       | 	byte	"as"
2e62c     00          | 	byte	0
2e62d                 | LR__5098
2e62d     62 79 74 65 | 	byte	"byte"
2e631     00          | 	byte	0
2e632                 | LR__5099
2e632     75 62 79 74 
2e636     65          | 	byte	"ubyte"
2e637     00          | 	byte	0
2e638                 | LR__5100
2e638     73 68 6F 72 
2e63c     74          | 	byte	"short"
2e63d     00          | 	byte	0
2e63e                 | LR__5101
2e63e     75 73 68 6F 
2e642     72 74       | 	byte	"ushort"
2e644     00          | 	byte	0
2e645                 | LR__5102
2e645     6C 6F 6E 67 | 	byte	"long"
2e649     00          | 	byte	0
2e64a                 | LR__5103
2e64a     69 6E 74 65 
2e64e     67 65 72    | 	byte	"integer"
2e651     00          | 	byte	0
2e652                 | LR__5104
2e652     75 6C 6F 6E 
2e656     67          | 	byte	"ulong"
2e657     00          | 	byte	0
2e658                 | LR__5105
2e658     69 6E 74 36 
2e65c     34          | 	byte	"int64"
2e65d     00          | 	byte	0
2e65e                 | LR__5106
2e65e     75 69 6E 74 
2e662     36 34       | 	byte	"uint64"
2e664     00          | 	byte	0
2e665                 | LR__5107
2e665     73 69 6E 67 
2e669     6C 65       | 	byte	"single"
2e66b     00          | 	byte	0
2e66c                 | LR__5108
2e66c     64 6F 75 62 
2e670     6C 65       | 	byte	"double"
2e672     00          | 	byte	0
2e673                 | LR__5109
2e673     73 74 72 69 
2e677     6E 67       | 	byte	"string"
2e679     00          | 	byte	0
2e67a                 | LR__5110
2e67a     74 6F       | 	byte	"to"
2e67c     00          | 	byte	0
2e67d                 | LR__5111
2e67d     73 74 65 70 | 	byte	"step"
2e681     00          | 	byte	0
2e682                 | LR__5112
2e682     73 2E       | 	byte	"s."
2e684     00          | 	byte	0
2e685                 | LR__5113
2e685     24          | 	byte	"$"
2e686     00          | 	byte	0
2e687                 | LR__5114
2e687     26 68       | 	byte	"&h"
2e689     00          | 	byte	0
2e68a                 | LR__5115
2e68a     25          | 	byte	"%"
2e68b     00          | 	byte	0
2e68c                 | LR__5116
2e68c     26 62       | 	byte	"&b"
2e68e     00          | 	byte	0
2e68f                 | LR__5117
2e68f                 | 	byte	
2e68f     00          | 	byte	0
2e690                 | LR__5118
2e690     2F          | 	byte	"/"
2e691     00          | 	byte	0
2e692                 | LR__5119
2e692                 | 	byte	
2e692     00          | 	byte	0
2e693                 | LR__5120
2e693     53 61 76 65 
2e697     64 20 61 73 
2e69b     20          | 	byte	"Saved as "
2e69c     00          | 	byte	0
2e69d                 | LR__5121
2e69d     2F          | 	byte	"/"
2e69e     00          | 	byte	0
2e69f                 | LR__5122
2e69f                 | 	byte	
2e69f     00          | 	byte	0
2e6a0                 | LR__5123
2e6a0     2F          | 	byte	"/"
2e6a1     00          | 	byte	0
2e6a2                 | LR__5124
2e6a2     2F          | 	byte	"/"
2e6a3     00          | 	byte	0
2e6a4                 | LR__5125
2e6a4     2E 62 61 73 | 	byte	".bas"
2e6a8     00          | 	byte	0
2e6a9                 | LR__5126
2e6a9     53 79 73 74 
2e6ad     65 6D 20 65 
2e6b1     72 72 6F 72 
2e6b5     20          | 	byte	"System error "
2e6b6     00          | 	byte	0
2e6b7                 | LR__5127
2e6b7     3A 20       | 	byte	": "
2e6b9     00          | 	byte	0
2e6ba                 | LR__5128
2e6ba     2E 62 61 73 | 	byte	".bas"
2e6be     00          | 	byte	0
2e6bf                 | LR__5129
2e6bf     2F          | 	byte	"/"
2e6c0     00          | 	byte	0
2e6c1                 | LR__5130
2e6c1     30          | 	byte	"0"
2e6c2     00          | 	byte	0
2e6c3                 | LR__5131
2e6c3     39          | 	byte	"9"
2e6c4     00          | 	byte	0
2e6c5                 | LR__5132
2e6c5                 | 	byte	
2e6c5     00          | 	byte	0
2e6c6                 | LR__5133
2e6c6     4C 6F 61 64 
2e6ca     65 64 20    | 	byte	"Loaded "
2e6cd     00          | 	byte	0
2e6ce                 | LR__5134
2e6ce     2F          | 	byte	"/"
2e6cf     00          | 	byte	0
2e6d0                 | LR__5135
2e6d0     53 74 6F 70 
2e6d4     70 65 64 20 
2e6d8     61 74 20 6C 
2e6dc     69 6E 65 20 | 	byte	"Stopped at line "
2e6e0     00          | 	byte	0
2e6e1                 | LR__5136
2e6e1                 | 	byte	
2e6e1     00          | 	byte	0
2e6e2                 | LR__5137
2e6e2                 | 	byte	
2e6e2     00          | 	byte	0
2e6e3                 | LR__5138
2e6e3     2F 73 64 2F 
2e6e7     6D 65 64 69 
2e6eb     61 2F 68 2F | 	byte	"/sd/media/h/"
2e6ef     00          | 	byte	0
2e6f0                 | LR__5139
2e6f0     53 79 73 74 
2e6f4     65 6D 20 65 
2e6f8     72 72 6F 72 
2e6fc     20          | 	byte	"System error "
2e6fd     00          | 	byte	0
2e6fe                 | LR__5140
2e6fe     3A 20       | 	byte	": "
2e700     00          | 	byte	0
2e701                 | LR__5141
2e701                 | 	byte	
2e701     00          | 	byte	0
2e702                 | LR__5142
2e702                 | 	byte	
2e702     00          | 	byte	0
2e703                 | LR__5143
2e703     2F 73 64 2F 
2e707     6D 65 64 69 
2e70b     61 2F 73 2F | 	byte	"/sd/media/s/"
2e70f     00          | 	byte	0
2e710                 | LR__5144
2e710     53 79 73 74 
2e714     65 6D 20 65 
2e718     72 72 6F 72 
2e71c     20          | 	byte	"System error "
2e71d     00          | 	byte	0
2e71e                 | LR__5145
2e71e     3A 20       | 	byte	": "
2e720     00          | 	byte	0
2e721                 | LR__5146
2e721     6E 6F 6E 61 
2e725     6D 65 2E 62 
2e729     61 73       | 	byte	"noname.bas"
2e72b     00          | 	byte	0
2e72c                 | LR__5147
2e72c     45 72 72 6F 
2e730     72 20       | 	byte	"Error "
2e732     00          | 	byte	0
2e733                 | LR__5148
2e733     3A 20       | 	byte	": "
2e735     00          | 	byte	0
2e736                 | LR__5149
2e736                 | 	byte	
2e736     00          | 	byte	0
2e737                 | LR__5150
2e737                 | 	byte	
2e737     00          | 	byte	0
2e738                 | LR__5151
2e738     72 6E 64 3A 
2e73c     20          | 	byte	"rnd: "
2e73d     00          | 	byte	0
2e73e                 | LR__5152
2e73e     72 6E 64 3A 
2e742     20          | 	byte	"rnd: "
2e743     00          | 	byte	0
2e744                 | LR__5153
2e744     67 65 74 65 
2e748     6E 76 73 75 
2e74c     73 74 61 69 
2e750     6E 3A 20    | 	byte	"getenvsustain: "
2e753     00          | 	byte	0
2e754                 | LR__5154
2e754     73 69 6E 3A 
2e758     20          | 	byte	"sin: "
2e759     00          | 	byte	0
2e75a                 | LR__5155
2e75a     6D 69 64 24 
2e75e     3A 20       | 	byte	"mid$: "
2e760     00          | 	byte	0
2e761                 | LR__5156
2e761     6D 69 64 24 
2e765     3A 20       | 	byte	"mid$: "
2e767     00          | 	byte	0
2e768                 | LR__5157
2e768     72 69 67 68 
2e76c     74 24 3A 20 | 	byte	"right$: "
2e770     00          | 	byte	0
2e771                 | LR__5158
2e771     72 69 67 68 
2e775     74 24 3A 20 | 	byte	"right$: "
2e779     00          | 	byte	0
2e77a                 | LR__5159
2e77a     6C 65 66 74 
2e77e     24 3A 20    | 	byte	"left$: "
2e781     00          | 	byte	0
2e782                 | LR__5160
2e782     6C 65 66 74 
2e786     24 3A 20    | 	byte	"left$: "
2e789     00          | 	byte	0
2e78a                 | LR__5161
2e78a     61 73 63 3A 
2e78e     20          | 	byte	"asc: "
2e78f     00          | 	byte	0
2e790                 | LR__5162
2e790     61 73 63 3A 
2e794     20          | 	byte	"asc: "
2e795     00          | 	byte	0
2e796                 | LR__5163
2e796     6C 65 6E 3A 
2e79a     20          | 	byte	"len: "
2e79b     00          | 	byte	0
2e79c                 | LR__5164
2e79c     6C 65 6E 3A 
2e7a0     20          | 	byte	"len: "
2e7a1     00          | 	byte	0
2e7a2                 | LR__5165
2e7a2     63 68 72 24 
2e7a6     3A 20       | 	byte	"chr$: "
2e7a8     00          | 	byte	0
2e7a9                 | LR__5166
2e7a9     76 61 6C 3A 
2e7ad     20          | 	byte	"val: "
2e7ae     00          | 	byte	0
2e7af                 | LR__5167
2e7af     76 61 6C 3A 
2e7b3     20          | 	byte	"val: "
2e7b4     00          | 	byte	0
2e7b5                 | LR__5168
2e7b5     24          | 	byte	"$"
2e7b6     00          | 	byte	0
2e7b7                 | LR__5169
2e7b7     26 68       | 	byte	"&h"
2e7b9     00          | 	byte	0
2e7ba                 | LR__5170
2e7ba     25          | 	byte	"%"
2e7bb     00          | 	byte	0
2e7bc                 | LR__5171
2e7bc     26 62       | 	byte	"&b"
2e7be     00          | 	byte	0
2e7bf                 | LR__5172
2e7bf     68 65 78 24 
2e7c3     3A 20       | 	byte	"hex$: "
2e7c5     00          | 	byte	0
2e7c6                 | LR__5173
2e7c6     62 69 6E 24 
2e7ca     3A 20       | 	byte	"bin$: "
2e7cc     00          | 	byte	0
2e7cd                 | LR__5174
2e7cd     63 6F 73 3A 
2e7d1     20          | 	byte	"cos: "
2e7d2     00          | 	byte	0
2e7d3                 | LR__5175
2e7d3     74 61 6E 3A 
2e7d7     20          | 	byte	"tan: "
2e7d8     00          | 	byte	0
2e7d9                 | LR__5176
2e7d9     61 73 69 6E 
2e7dd     3A 20       | 	byte	"asin: "
2e7df     00          | 	byte	0
2e7e0                 | LR__5177
2e7e0     61 63 6F 73 
2e7e4     3A 20       | 	byte	"acos: "
2e7e6     00          | 	byte	0
2e7e7                 | LR__5178
2e7e7     61 74 6E 3A 
2e7eb     20          | 	byte	"atn: "
2e7ec     00          | 	byte	0
2e7ed                 | LR__5179
2e7ed     73 71 72 3A 
2e7f1     20          | 	byte	"sqr: "
2e7f2     00          | 	byte	0
2e7f3                 | LR__5180
2e7f3     73 74 69 63 
2e7f7     6B 3A 20    | 	byte	"stick: "
2e7fa     00          | 	byte	0
2e7fb                 | LR__5181
2e7fb     73 74 72 69 
2e7ff     67 3A 20    | 	byte	"strig: "
2e802     00          | 	byte	0
2e803                 | LR__5182
2e803     67 65 74 70 
2e807     69 78 65 6C 
2e80b     3A 20       | 	byte	"getpixel: "
2e80d     00          | 	byte	0
2e80e                 | LR__5183
2e80e     20 42 41 53 
2e812     49 43 20 62 
2e816     79 74 65 73 
2e81a     20 66 72 65 
2e81e     65          | 	byte	" BASIC bytes free"
2e81f     00          | 	byte	0
2e820                 | LR__5184
2e820                 | 	byte	
2e820     00          | 	byte	0
2e821                 | LR__5185
2e821     2F 73 64 2F 
2e825     62 61 73    | 	byte	"/sd/bas"
2e828     00          | 	byte	0
2e829                 | LR__5186
2e829     57 6F 72 6B 
2e82d     69 6E 67 20 
2e831     64 69 72 65 
2e835     63 74 6F 72 
2e839     79 3A 20    | 	byte	"Working directory: "
2e83c     00          | 	byte	0
2e83d                 | LR__5187
2e83d     2A          | 	byte	"*"
2e83e     00          | 	byte	0
2e83f                 | LR__5188
2e83f                 | 	byte	
2e83f     00          | 	byte	0
2e840                 | LR__5189
2e840     5B 64 69 72 
2e844     5D 20       | 	byte	"[dir] "
2e846     00          | 	byte	0
2e847                 | LR__5190
2e847     2A          | 	byte	"*"
2e848     00          | 	byte	0
2e849                 | LR__5191
2e849                 | 	byte	
2e849     00          | 	byte	0
2e84a                 | LR__5192
2e84a     2D 2D 2D 2D 
2e84e     2D 6D 6F 72 
2e852     65 2C 20 70 
2e856     72 65 73 73 
2e85a     20 61 6E 79 
2e85e     20 6B 65 79 | 	byte	"-----more, press any key"
2e862     00          | 	byte	0
2e863                 | LR__5193
2e863     20 20 20 20 
      ...             
2e87b     20 20 20 20 
2e87f     20          | 	byte	"                             "
2e880     00          | 	byte	0
2e881                 | LR__5194
2e881     2F          | 	byte	"/"
2e882     00          | 	byte	0
2e883                 | LR__5195
2e883     2F 73 64 2F 
2e887     62 69 6E 2F | 	byte	"/sd/bin/"
2e88b     00          | 	byte	0
2e88c                 | LR__5196
2e88c     53 79 73 74 
2e890     65 6D 20 65 
2e894     72 72 6F 72 
2e898     20          | 	byte	"System error "
2e899     00          | 	byte	0
2e89a                 | LR__5197
2e89a     3A 20       | 	byte	": "
2e89c     00          | 	byte	0
2e89d                 | LR__5198
2e89d                 | 	byte	
2e89d     00          | 	byte	0
2e89e                 | LR__5199
2e89e     45 78 70 65 
2e8a2     63 74 65 64 
2e8a6     20 6E 75 6D 
2e8aa     62 65 72 2C 
2e8ae     20 67 6F 74 
2e8b2     20 73 6F 6D 
2e8b6     65 74 68 69 
2e8ba     6E 67 20 65 
2e8be     6C 73 65 2E | 	byte	"Expected number, got something else."
2e8c2     00          | 	byte	0
2e8c3                 | LR__5200
2e8c3     43 61 6E 6E 
2e8c7     6F 74 20 61 
2e8cb     64 64 20 61 
2e8cf     20 6E 75 6D 
2e8d3     62 65 72 20 
2e8d7     74 6F 20 61 
2e8db     20 73 74 72 
2e8df     69 6E 67 2E | 	byte	"Cannot add a number to a string."
2e8e3     00          | 	byte	0
2e8e4                 | LR__5201
2e8e4     43 61 6E 6E 
2e8e8     6F 74 20 73 
2e8ec     75 62 73 74 
2e8f0     72 61 63 74 
2e8f4     20 73 74 72 
2e8f8     69 6E 67 73 
2e8fc     2E          | 	byte	"Cannot substract strings."
2e8fd     00          | 	byte	0
2e8fe                 | LR__5202
2e8fe     55 6E 6B 6E 
2e902     6F 77 6E 20 
2e906     65 72 72 6F 
2e90a     72 20 77 68 
2e90e     69 6C 65 20 
2e912     61 64 64 69 
2e916     6E 67 2E    | 	byte	"Unknown error while adding."
2e919     00          | 	byte	0
2e91a                 | LR__5203
2e91a     55 6E 6B 6E 
2e91e     6F 77 6E 20 
2e922     65 72 72 6F 
2e926     72 20 77 68 
2e92a     69 6C 65 20 
2e92e     73 75 62 73 
2e932     74 72 61 63 
2e936     74 69 6E 67 
2e93a     2E          | 	byte	"Unknown error while substracting."
2e93b     00          | 	byte	0
2e93c                 | LR__5204
2e93c     43 61 6E 6E 
2e940     6F 74 20 64 
2e944     6F 20 6C 6F 
2e948     67 69 63 20 
2e94c     6F 70 65 72 
2e950     61 74 69 6F 
2e954     6E 20 6F 6E 
2e958     20 73 74 72 
2e95c     69 6E 67 20 
2e960     6F 72 20 66 
2e964     6C 6F 61 74 
2e968     2E          | 	byte	"Cannot do logic operation on string or float."
2e969     00          | 	byte	0
2e96a                 | LR__5205
2e96a     55 6E 6B 6E 
2e96e     6F 77 6E 20 
2e972     65 72 72 6F 
2e976     72 20 77 68 
2e97a     69 6C 65 20 
2e97e     64 6F 69 6E 
2e982     67 20 6C 6F 
2e986     67 69 63 20 
2e98a     6F 70 65 72 
2e98e     61 74 69 6F 
2e992     6E 2E       | 	byte	"Unknown error while doing logic operation."
2e994     00          | 	byte	0
2e995                 | LR__5206
2e995     43 61 6E 6E 
2e999     6F 74 20 6D 
2e99d     75 6C 74 69 
2e9a1     70 6C 79 20 
2e9a5     73 74 72 69 
2e9a9     6E 67 73 2E | 	byte	"Cannot multiply strings."
2e9ad     00          | 	byte	0
2e9ae                 | LR__5207
2e9ae     55 6E 6B 6E 
2e9b2     6F 77 6E 20 
2e9b6     65 72 72 6F 
2e9ba     72 20 77 68 
2e9be     69 6C 65 20 
2e9c2     6D 75 6C 74 
2e9c6     69 70 6C 79 
2e9ca     69 6E 67 2E | 	byte	"Unknown error while multiplying."
2e9ce     00          | 	byte	0
2e9cf                 | LR__5208
2e9cf     43 61 6E 6E 
2e9d3     6F 74 20 64 
2e9d7     69 76 69 64 
2e9db     65 20 73 74 
2e9df     72 69 6E 67 
2e9e3     73 2E       | 	byte	"Cannot divide strings."
2e9e5     00          | 	byte	0
2e9e6                 | LR__5209
2e9e6     55 6E 6B 6E 
2e9ea     6F 77 6E 20 
2e9ee     65 72 72 6F 
2e9f2     72 20 77 68 
2e9f6     69 6C 65 20 
2e9fa     64 69 76 69 
2e9fe     64 69 6E 67 
2ea02     2E          | 	byte	"Unknown error while dividing."
2ea03     00          | 	byte	0
2ea04                 | LR__5210
2ea04     43 61 6E 6E 
2ea08     6F 74 20 63 
2ea0c     6F 6D 70 75 
2ea10     74 65 20 61 
2ea14     20 70 6F 77 
2ea18     65 72 20 6F 
2ea1c     66 20 61 20 
2ea20     73 74 72 69 
2ea24     6E 67 2E    | 	byte	"Cannot compute a power of a string."
2ea27     00          | 	byte	0
2ea28                 | LR__5211
2ea28     55 6E 6B 6E 
2ea2c     6F 77 6E 20 
2ea30     65 72 72 6F 
2ea34     72 20 77 68 
2ea38     69 6C 65 20 
2ea3c     63 6F 6D 70 
2ea40     75 74 69 6E 
2ea44     67 20 61 20 
2ea48     70 6F 77 65 
2ea4c     72 2E       | 	byte	"Unknown error while computing a power."
2ea4e     00          | 	byte	0
2ea4f                 | LR__5212
2ea4f     52 69 67 68 
2ea53     74 20 70 61 
2ea57     72 65 6E 74 
2ea5b     68 65 73 69 
2ea5f     73 20 65 78 
2ea63     70 65 63 74 
2ea67     65 64 2E    | 	byte	"Right parenthesis expected."
2ea6a     00          | 	byte	0
2ea6b                 | LR__5213
2ea6b     45 78 70 65 
2ea6f     63 74 65 64 
2ea73     20 73 74 72 
2ea77     69 6E 67 2E | 	byte	"Expected string."
2ea7b     00          | 	byte	0
2ea7c                 | LR__5214
2ea7c     45 78 70 65 
2ea80     63 74 65 64 
2ea84     20 66 6C 6F 
2ea88     61 74 2E    | 	byte	"Expected float."
2ea8b     00          | 	byte	0
2ea8c                 | LR__5215
2ea8c     45 78 70 65 
2ea90     63 74 65 64 
2ea94     20 75 6E 73 
2ea98     69 67 6E 65 
2ea9c     64 20 69 6E 
2eaa0     74 65 67 65 
2eaa4     72 2E       | 	byte	"Expected unsigned integer."
2eaa6     00          | 	byte	0
2eaa7                 | LR__5216
2eaa7     45 78 70 65 
2eaab     63 74 65 64 
2eaaf     20 69 6E 74 
2eab3     65 67 65 72 
2eab7     2E          | 	byte	"Expected integer."
2eab8     00          | 	byte	0
2eab9                 | LR__5217
2eab9     4E 6F 20 6D 
2eabd     6F 72 65 20 
2eac1     76 61 72 69 
2eac5     61 62 6C 65 
2eac9     20 73 6C 6F 
2eacd     74 73 2E    | 	byte	"No more variable slots."
2ead0     00          | 	byte	0
2ead1                 | LR__5218
2ead1     56 61 72 69 
2ead5     61 62 6C 65 
2ead9     20 6E 6F 74 
2eadd     20 66 6F 75 
2eae1     6E 64 2E    | 	byte	"Variable not found."
2eae4     00          | 	byte	0
2eae5                 | LR__5219
2eae5     43 6F 6D 6D 
2eae9     61 20 65 78 
2eaed     70 65 63 74 
2eaf1     65 64 2E    | 	byte	"Comma expected."
2eaf4     00          | 	byte	0
2eaf5                 | LR__5220
2eaf5     43 6F 6D 6D 
2eaf9     61 20 6F 72 
2eafd     20 73 65 6D 
2eb01     69 63 6F 6C 
2eb05     6F 6E 20 65 
2eb09     78 70 65 63 
2eb0d     74 65 64 2E | 	byte	"Comma or semicolon expected."
2eb11     00          | 	byte	0
2eb12                 | LR__5221
2eb12     55 6E 6B 6E 
2eb16     6F 77 6E 20 
2eb1a     63 6F 6D 6D 
2eb1e     61 6E 64 2E | 	byte	"Unknown command."
2eb22     00          | 	byte	0
2eb23                 | LR__5222
2eb23     53 74 61 63 
2eb27     6B 20 75 6E 
2eb2b     64 65 72 66 
2eb2f     6C 6F 77 2E | 	byte	"Stack underflow."
2eb33     00          | 	byte	0
2eb34                 | LR__5223
2eb34     43 61 6E 6E 
2eb38     6F 74 20 65 
2eb3c     78 65 63 75 
2eb40     74 65 20 67 
2eb44     6F 74 6F 20 
2eb48     69 6E 20 74 
2eb4c     68 65 20 69 
2eb50     6D 6D 65 64 
2eb54     69 61 74 65 
2eb58     20 6D 6F 64 
2eb5c     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
2eb5e     00          | 	byte	0
2eb5f                 | LR__5224
2eb5f     43 61 6E 6E 
2eb63     6F 74 20 6C 
2eb67     6F 61 64 20 
2eb6b     66 72 6F 6D 
2eb6f     20 74 68 69 
2eb73     73 20 66 69 
2eb77     6C 65 2E    | 	byte	"Cannot load from this file."
2eb7a     00          | 	byte	0
2eb7b                 | LR__5225
2eb7b     54 68 65 20 
2eb7f     70 72 6F 67 
2eb83     72 61 6D 20 
2eb87     69 73 20 65 
2eb8b     6D 70 74 79 
2eb8f     2E          | 	byte	"The program is empty."
2eb90     00          | 	byte	0
2eb91                 | LR__5226
2eb91     49 66 20 61 
2eb95     66 74 65 72 
2eb99     20 69 66 2E | 	byte	"If after if."
2eb9d     00          | 	byte	0
2eb9e                 | LR__5227
2eb9e     45 6D 70 74 
2eba2     79 20 65 78 
2eba6     70 72 65 73 
2ebaa     73 69 6F 6E 
2ebae     2E          | 	byte	"Empty expression."
2ebaf     00          | 	byte	0
2ebb0                 | LR__5228
2ebb0     53 74 72 69 
2ebb4     6E 67 20 65 
2ebb8     78 70 65 63 
2ebbc     74 65 64 2E | 	byte	"String expected."
2ebc0     00          | 	byte	0
2ebc1                 | LR__5229
2ebc1     49 6E 74 65 
2ebc5     72 70 72 65 
2ebc9     74 65 72 20 
2ebcd     69 6E 74 65 
2ebd1     72 6E 61 6C 
2ebd5     20 65 72 72 
2ebd9     6F 72 2E    | 	byte	"Interpreter internal error."
2ebdc     00          | 	byte	0
2ebdd                 | LR__5230
2ebdd     45 78 70 65 
2ebe1     63 74 65 64 
2ebe5     20 61 73 73 
2ebe9     69 67 6E 2E | 	byte	"Expected assign."
2ebed     00          | 	byte	0
2ebee                 | LR__5231
2ebee     45 78 70 65 
2ebf2     63 74 65 64 
2ebf6     20 27 74 6F 
2ebfa     27 2E       | 	byte	"Expected 'to'."
2ebfc     00          | 	byte	0
2ebfd                 | LR__5232
2ebfd     45 78 70 65 
2ec01     63 74 65 64 
2ec05     20 69 6E 74 
2ec09     65 67 65 72 
2ec0d     20 76 61 72 
2ec11     69 61 62 6C 
2ec15     65 2E       | 	byte	"Expected integer variable."
2ec17     00          | 	byte	0
2ec18                 | LR__5233
2ec18     55 6E 69 6E 
2ec1c     69 74 69 61 
2ec20     6C 69 7A 65 
2ec24     64 20 76 61 
2ec28     72 69 61 62 
2ec2c     6C 65 20 69 
2ec30     6E 20 27 6E 
2ec34     65 78 74 27 
2ec38     2C 20 75 73 
2ec3c     65 20 27 66 
2ec40     6F 72 27 20 
2ec44     62 65 66 6F 
2ec48     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
2ec4b     00          | 	byte	0
2ec4c                 | LR__5234
2ec4c     4E 6F 20 6D 
2ec50     6F 72 65 20 
2ec54     73 6C 6F 74 
2ec58     73 20 66 6F 
2ec5c     72 20 27 66 
2ec60     6F 72 27 2E | 	byte	"No more slots for 'for'."
2ec64     00          | 	byte	0
2ec65                 | LR__5235
2ec65     27 4E 65 78 
2ec69     74 27 20 64 
2ec6d     6F 65 73 6E 
2ec71     27 74 20 6D 
2ec75     61 74 63 68 
2ec79     20 27 66 6F 
2ec7d     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
2ec80     00          | 	byte	0
2ec81                 | LR__5236
2ec81     27 47 6F 74 
2ec85     6F 27 20 74 
2ec89     61 72 67 65 
2ec8d     74 20 6C 69 
2ec91     6E 65 20 6E 
2ec95     6F 74 20 66 
2ec99     6F 75 6E 64 
2ec9d     2E          | 	byte	"'Goto' target line not found."
2ec9e     00          | 	byte	0
2ec9f                 | LR__5237
2ec9f     42 61 64 20 
2eca3     6E 75 6D 62 
2eca7     65 72 20 6F 
2ecab     66 20 70 61 
2ecaf     72 61 6D 65 
2ecb3     74 65 72 73 | 	byte	"Bad number of parameters"
2ecb7     00          | 	byte	0
2ecb8                 | LR__5238
2ecb8     46 75 6E 63 
2ecbc     74 69 6F 6E 
2ecc0     20 75 6E 64 
2ecc4     65 66 69 6E 
2ecc8     65 64 20 66 
2eccc     6F 72 20 73 
2ecd0     74 72 69 6E 
2ecd4     67 73       | 	byte	"Function undefined for strings"
2ecd6     00          | 	byte	0
2ecd7                 | LR__5239
2ecd7     42 61 64 20 
2ecdb     70 61 72 61 
2ecdf     6D 65 74 65 
2ece3     72 2E       | 	byte	"Bad parameter."
2ece5     00          | 	byte	0
2ece6                 | LR__5240
2ece6     43 61 6E 6E 
2ecea     6F 74 20 64 
2ecee     65 63 6C 61 
2ecf2     72 65 20 61 
2ecf6     6E 20 61 72 
2ecfa     72 61 79 3A 
2ecfe     20 74 68 65 
2ed02     20 76 61 72 
2ed06     69 61 62 6C 
2ed0a     65 20 65 78 
2ed0e     69 73 74 73 
2ed12     2E          | 	byte	"Cannot declare an array: the variable exists."
2ed13     00          | 	byte	0
2ed14                 | LR__5241
2ed14     45 78 70 65 
2ed18     63 74 65 64 
2ed1c     20 27 28 27 
2ed20     2E          | 	byte	"Expected '('."
2ed21     00          | 	byte	0
2ed22                 | LR__5242
2ed22     45 78 70 65 
2ed26     63 74 65 64 
2ed2a     20 27 29 27 
2ed2e     20 6F 72 20 
2ed32     27 2C 27 2E | 	byte	"Expected ')' or ','."
2ed36     00          | 	byte	0
2ed37                 | LR__5243
2ed37     4E 6F 20 6D 
2ed3b     6F 72 65 20 
2ed3f     74 68 61 6E 
2ed43     20 33 20 64 
2ed47     69 6D 65 6E 
2ed4b     73 69 6F 6E 
2ed4f     73 20 73 75 
2ed53     70 70 6F 72 
2ed57     74 65 64    | 	byte	"No more than 3 dimensions supported"
2ed5a     00          | 	byte	0
2ed5b                 | LR__5244
2ed5b     56 61 72 69 
2ed5f     61 62 6C 65 
2ed63     20 6E 61 6D 
2ed67     65 20 65 78 
2ed6b     70 65 63 74 
2ed6f     65 64       | 	byte	"Variable name expected"
2ed71     00          | 	byte	0
2ed72                 | LR__5245
2ed72     54 79 70 65 
2ed76     20 6E 61 6D 
2ed7a     65 20 65 78 
2ed7e     70 65 63 74 
2ed82     65 64       | 	byte	"Type name expected"
2ed84     00          | 	byte	0
2ed85                 | LR__5246
2ed85     54 79 70 65 
2ed89     20 6E 6F 74 
2ed8d     20 73 75 70 
2ed91     70 6F 72 74 
2ed95     65 64 20 79 
2ed99     65 74       | 	byte	"Type not supported yet"
2ed9b     00          | 	byte	0
2ed9c                 | LR__5247
2ed9c     41 72 72 61 
2eda0     79 20 69 6E 
2eda4     64 65 78 20 
2eda8     6F 75 74 20 
2edac     6F 66 20 72 
2edb0     61 6E 67 65 | 	byte	"Array index out of range"
2edb4     00          | 	byte	0
2edb5                 | LR__5248
2edb5     45 72 72 6F 
2edb9     72 20       | 	byte	"Error "
2edbb     00          | 	byte	0
2edbc                 | LR__5249
2edbc     3A 20       | 	byte	": "
2edbe     00          | 	byte	0
2edbf                 | LR__5250
2edbf     2F 73 64    | 	byte	"/sd"
2edc2     00          | 	byte	0
2edc3                 | LR__5251
2edc3     2F 73 64 2F 
2edc7     62 61 73    | 	byte	"/sd/bas"
2edca     00          | 	byte	0
2edcb                 | LR__5252
2edcb     2F 73 64 2F 
2edcf     62 61 73    | 	byte	"/sd/bas"
2edd2     00          | 	byte	0
2edd3                 | LR__5253
2edd3     20 42 41 53 
2edd7     49 43 20 62 
2eddb     79 74 65 73 
2eddf     20 66 72 65 
2ede3     65          | 	byte	" BASIC bytes free"
2ede4     00          | 	byte	0
2ede5                 | LR__5254
2ede5     52 65 61 64 
2ede9     79          | 	byte	"Ready"
2edea     00          | 	byte	0
2edeb                 | LR__5255
2edeb     6E 6F 6E 61 
2edef     6D 65 2E 62 
2edf3     61 73       | 	byte	"noname.bas"
2edf5     00          | 	byte	0
2edf6                 | LR__5256
2edf6                 | 	byte	
2edf6     00          | 	byte	0
2edf7                 | LR__5257
2edf7                 | 	byte	
2edf7     00          | 	byte	0
2edf8                 | LR__5258
2edf8                 | 	byte	
2edf8     00          | 	byte	0
2edf9     00 00 00    | 	alignl
2edfc                 | _dat_
2edfc     00 00 00 00 
2ee00     00 00 00 00 
2ee04     00 00 00 00 
2ee08     00 00 00 00 | 	byte	$00[16]
2ee0c     61 41 17 0E 
2ee10     62 42 00 00 
2ee14     63 43 19 10 
2ee18     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
2ee1c     65 45 18 0F 
2ee20     66 46 00 00 
2ee24     67 47 00 00 
2ee28     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
2ee2c     69 49 00 00 
2ee30     6A 4A 00 00 
2ee34     6B 4B 00 00 
2ee38     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
2ee3c     6D 4D 00 00 
2ee40     6E 4E 1A 11 
2ee44     6F 4F 1E 15 
2ee48     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
2ee4c     71 51 00 00 
2ee50     72 52 00 00 
2ee54     73 53 1B 12 
2ee58     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
2ee5c     75 55 00 00 
2ee60     76 56 00 00 
2ee64     77 57 00 00 
2ee68     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
2ee6c     79 59 00 00 
2ee70     7A 5A 1D 14 
2ee74     31 21 04 00 
2ee78     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
2ee7c     33 23 06 00 
2ee80     34 24 07 00 
2ee84     35 25 08 00 
2ee88     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
2ee8c     37 26 0A 00 
2ee90     38 2A 0B 00 
2ee94     39 28 0C 00 
2ee98     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
2ee9c     8D 8D 00 00 
2eea0     9B 9B 00 00 
2eea4     88 88 00 00 
2eea8     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
2eeac     20 20 00 00 
2eeb0     2D 5F 00 00 
2eeb4     3D 2B 00 00 
2eeb8     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
2eebc     5D 7D 00 00 
2eec0     5C 7C 00 00 
2eec4     23 7E 00 00 
2eec8     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
2eecc     27 22 00 00 
2eed0     60 7E 03 00 
2eed4     2C 3C 00 00 
2eed8     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
2eedc     2F 3F 00 00 
2eee0     B9 B9 00 00 
2eee4     BA 00 00 00 
2eee8     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
2eeec     BC 00 00 00 
2eef0     BD 00 00 00 
2eef4     BE 00 00 00 
2eef8     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
2eefc     C0 00 00 00 
2ef00     C1 00 00 00 
2ef04     C2 00 00 00 
2ef08     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
2ef0c     C4 00 00 00 
2ef10     C5 00 00 00 
2ef14     C6 00 00 00 
2ef18     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
2ef1c     C8 00 00 00 
2ef20     C9 00 00 00 
2ef24     CA 00 00 00 
2ef28     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
2ef2c     7F 7F 00 00 
2ef30     CC 00 00 00 
2ef34     CD 00 00 00 
2ef38     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
2ef3c     CF 00 00 00 
2ef40     D0 00 00 00 
2ef44     D1 00 00 00 
2ef48     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
2ef4c     2F 2F 00 00 
2ef50     2A 2A 00 00 
2ef54     2D 2D 00 00 
2ef58     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
2ef5c     8D 8D 00 00 
2ef60     31 31 00 00 
2ef64     32 32 00 00 
2ef68     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
2ef6c     34 34 00 00 
2ef70     35 35 00 00 
2ef74     36 36 00 00 
2ef78     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
2ef7c     38 38 00 00 
2ef80     39 39 00 00 
2ef84     30 30 00 00 
2ef88     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
2ef8c     5C 7C 00 00 
2ef90     00 00 00 00 
2ef94     00 00 00 00 
2ef98     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
2ef9c     00 00 00 00 
      ...             
2eff4     00 00 00 00 
2eff8     00 00 00 00 | 	byte	$00[96]
2effc     2B 00 A6 F2 
2f000     24 A7 09 80 
2f004     5B 88 4D 89 
2f008     80 88 A5 88 | atari_spl file "atari.spl"
2f00c     6D 88 B8 88 
2f010     80 88 CB 88 
2f014     92 88 A5 88 
2f018     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
2f01c     A5 88 CA 88 
2f020     A6 88 DD 88 
2f024     B8 88 AB 89 
2f028     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
2f02c     C8 AD C6 F1 
2f030     91 06 B6 FF 
2f034     13 00 4A 00 
2f038     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
2f03c     5D 00 5E 00 
2f040     5D 00 5E 00 
2f044     5E 00 5D 00 
2f048     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
2f04c     38 00 83 00 
2f050     25 00 83 00 
2f054     C3 FE D1 04 
2f058     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
2f05c     48 88 38 85 
2f060     41 8A CB 88 
2f064     28 89 B8 88 
2f068     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
2f06c     15 89 03 89 
2f070     02 89 15 89 
2f074     16 89 15 89 
2f078     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
2f07c     15 89 3A 89 
2f080     72 89 E3 89 
2f084     52 83 AD 97 
2f088     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
2f08c     0C 02 B6 FF 
2f090     E1 00 A8 00 
2f094     F3 00 A8 00 
2f098     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
2f09c     CE 00 CD 00 
2f0a0     CD 00 BA 00 
2f0a4     E1 00 BB 00 
2f0a8     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
2f0ac     DF 00 C9 FF 
2f0b0     E6 01 B6 06 
2f0b4     EE DD 8D 98 
2f0b8     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
2f0bc     97 89 73 89 
2f0c0     3B 89 60 89 
2f0c4     60 89 60 89 
2f0c8     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
2f0cc     73 89 72 89 
2f0d0     85 89 73 89 
2f0d4     AA 89 60 89 
2f0d8     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
2f0dc     E8 8A 18 86 
2f0e0     92 88 A5 C2 
2f0e4     E0 00 C3 05 
2f0e8     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
2f0ec     F2 00 64 01 
2f0f0     06 01 3E 01 
2f0f4     2B 01 2B 01 
2f0f8     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
2f0fc     2B 01 2A 01 
2f100     2B 01 2B 01 
2f104     2B 01 18 01 
2f108     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
2f10c     39 07 61 F3 
2f110     C0 AF 37 85 
2f114     0F 88 8B 8A 
2f118     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
2f11c     AB 89 D0 89 
2f120     AB 89 D0 89 
2f124     D0 89 CF 89 
2f128     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
2f12c     D0 89 F5 89 
2f130     BD 89 08 8A 
2f134     CF 89 E8 8A 
2f138     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
2f13c     53 B3 0D F8 
2f140     F4 07 38 00 
2f144     63 01 63 01 
2f148     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
2f14c     88 01 88 01 
2f150     76 01 88 01 
2f154     88 01 89 01 
2f158     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
2f15c     75 01 AE 01 
2f160     76 01 88 01 
2f164     4A 00 46 06 
2f168     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
2f16c     08 8A 9A 86 
2f170     33 8B 08 8A 
2f174     2D 8A F5 89 
2f178     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
2f17c     2D 8A 2D 8A 
2f180     2E 8A 1B 8A 
2f184     40 8A 2D 8A 
2f188     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
2f18c     2E 8A 79 8A 
2f190     66 8A C8 8B 
2f194     72 82 2B 97 
2f198     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
2f19c     1D 02 05 01 
2f1a0     F8 01 C0 01 
2f1a4     0B 02 C0 01 
2f1a8     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
2f1ac     F9 01 D3 01 
2f1b0     F8 01 D3 01 
2f1b4     F8 01 D2 01 
2f1b8     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
2f1bc     E6 01 2B 01 
2f1c0     8E 02 5F 07 
2f1c4     F7 E2 ED 9C 
2f1c8     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
2f1cc     E8 8A 78 8A 
2f1d0     78 8A 65 8A 
2f1d4     8B 8A 78 8A 
2f1d8     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
2f1dc     8B 8A 9D 8A 
2f1e0     9D 8A 8B 8A 
2f1e4     C2 8A 78 8A 
2f1e8     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
2f1ec     70 8C 18 86 
2f1f0     8B 8A 23 C9 
2f1f4     CB 03 C4 05 
2f1f8     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
2f1fc     0B 02 7B 02 
2f200     1E 02 55 02 
2f204     30 02 43 02 
2f208     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
2f20c     43 02 44 02 
2f210     43 02 30 02 
2f214     68 02 31 02 
2f218     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
2f21c     07 08 3F F7 
2f220     73 B2 13 85 
2f224     15 89 ED 8B 
2f228     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
2f22c     B0 8A FB 8A 
2f230     D5 8A FA 8A 
2f234     E8 8A FB 8A 
2f238     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
2f23c     E8 8A 21 8B 
2f240     E7 8A 33 8B 
2f244     E8 8A 26 8C 
2f248     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
2f24c     8D B0 27 F6 
2f250     9C 08 AD 01 
2f254     7B 02 8D 02 
2f258     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
2f25c     A1 02 A0 02 
2f260     A1 02 A0 02 
2f264     A0 02 A0 02 
2f268     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
2f26c     7B 02 D8 02 
2f270     7B 02 C6 02 
2f274     3E 01 C3 05 
2f278     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
2f27c     00 8C 2A 86 
2f280     E0 8C FA 8A 
2f284     6A 8B FB 8A 
2f288     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
2f28c     45 8B 45 8B 
2f290     45 8B 6B 8B 
2f294     46 8B 59 8B 
2f298     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
2f29c     6B 8B 6B 8B 
2f2a0     6B 8B 6B 8B 
2f2a4     7D 8B 7D 8B 
2f2a8     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
2f2ac     90 8B 91 8B 
2f2b0     90 8B 90 8B 
2f2b4     A3 8B A3 8B 
2f2b8     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
2f2bc     B5 8B B6 8B 
2f2c0     B5 8B B5 8B 
2f2c4     B6 8B C8 8B 
2f2c8     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
2f2cc     C8 8B DA 8B 
2f2d0     DB 8B DB 8B 
2f2d4     DB 8B DC 8B 
2f2d8     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
2f2dc     EE 8B EE 8B 
2f2e0     00 8C 01 8C 
2f2e4     00 8C 01 8C 
2f2e8     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
2f2ec     12 8C 13 8C 
2f2f0     13 8C 26 8C 
2f2f4     26 8C 26 8C 
2f2f8     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
2f2fc     38 8C 38 8C 
2f300     38 8C 38 8C 
2f304     4B 8C 4B 8C 
2f308     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
2f30c     5E 8C 5E 8C 
2f310     5E 8C 5E 8C 
2f314     70 8C 70 8C 
2f318     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
2f31c     70 8C 83 8C 
2f320     83 8C 83 8C 
2f324     83 8C 96 8C 
2f328     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
2f32c     95 8C A9 8C 
2f330     A9 8C A8 8C 
2f334     A8 8C A8 8C 
2f338     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
2f33c     BB 8C BB 8C 
2f340     BB 8C CE 8C 
2f344     CE 8C CE 8C 
2f348     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
2f34c     E0 8C E1 8C 
2f350     E1 8C E0 8C 
2f354     F4 8C F2 8C 
2f358     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
2f35c     05 8D 05 8D 
2f360     06 8D 06 8D 
2f364     19 8D 19 8D 
2f368     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
2f36c     18 8D 2B 8D 
2f370     2B 8D 2B 8D 
2f374     2A 8D 3E 8D 
2f378     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
2f37c     3E 8D 51 8D 
2f380     50 8D 50 8D 
2f384     50 8D 51 8D 
2f388     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
2f38c     63 8D 64 8D 
2f390     76 8D 75 8D 
2f394     75 8D 76 8D 
2f398     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
2f39c     88 8D 88 8D 
2f3a0     89 8D 9B 8D 
2f3a4     9A 8D 9B 8D 
2f3a8     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
2f3ac     AD 8D AE 8D 
2f3b0     AD 8D AE 8D 
2f3b4     C1 8D C1 8D 
2f3b8     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
2f3bc     D3 8D D3 8D 
2f3c0     D3 8D D3 8D 
2f3c4     D3 8D E6 8D 
2f3c8     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
2f3cc     E6 8D E6 8D 
2f3d0     F9 8D F9 8D 
2f3d4     F9 8D F8 8D 
2f3d8     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
2f3dc     0B 8E 0B 8E 
2f3e0     1D 8E 1D 8E 
2f3e4     1E 8E 1E 8E 
2f3e8     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
2f3ec     31 8E 31 8E 
2f3f0     31 8E 42 8E 
2f3f4     43 8E 43 8E 
2f3f8     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
2f3fc     56 8E 56 8E 
2f400     55 8E 56 8E 
2f404     68 8E 69 8E 
2f408     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
2f40c     69 8E 7B 8E 
2f410     7C 8E 7B 8E 
2f414     7B 8E 8D 8E 
2f418     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
2f41c     8D 8E A1 8E 
2f420     A0 8E A1 8E 
2f424     A1 8E A0 8E 
2f428     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
2f42c     B3 8E B3 8E 
2f430     C6 8E C5 8E 
2f434     C6 8E C6 8E 
2f438     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
2f43c     D8 8E D9 8E 
2f440     D8 8E EC 8E 
2f444     EB 8E EC 8E 
2f448     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
2f44c     FE 8E FE 8E 
2f450     FE 8E FE 8E 
2f454     10 8F 10 8F 
2f458     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
2f45c     11 8F 23 8F 
2f460     24 8F 23 8F 
2f464     24 8F 37 8F 
2f468     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
2f46c     36 8F 36 8F 
2f470     48 8F 49 8F 
2f474     49 8F 49 8F 
2f478     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
2f47c     5B 8F 5C 8F 
2f480     5B 8F 6E 8F 
2f484     6E 8F 6E 8F 
2f488     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
2f48c     81 8F 81 8F 
2f490     81 8F 81 8F 
2f494     93 8F 93 8F 
2f498     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
2f49c     93 8F A6 8F 
2f4a0     A6 8F A6 8F 
2f4a4     A6 8F B9 8F 
2f4a8     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
2f4ac     B9 8F B9 8F 
2f4b0     CC 8F CB 8F 
2f4b4     CB 8F CC 8F 
2f4b8     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
2f4bc     DF 8F DE 8F 
2f4c0     DE 8F F1 8F 
2f4c4     F1 8F F1 8F 
2f4c8     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
2f4cc     03 90 04 90 
2f4d0     04 90 04 90 
2f4d4     16 90 17 90 
2f4d8     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
2f4dc     29 90 28 90 
2f4e0     29 90 28 90 
2f4e4     29 90 3C 90 
2f4e8     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
2f4ec     3C 90 4F 90 
2f4f0     4E 90 4E 90 
2f4f4     4E 90 4E 90 
2f4f8     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
2f4fc     61 90 61 90 
2f500     73 90 74 90 
2f504     74 90 74 90 
2f508     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
2f50c     87 90 86 90 
2f510     87 90 86 90 
2f514     99 90 99 90 
2f518     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
2f51c     AB 90 AB 90 
2f520     AC 90 AB 90 
2f524     AB 90 BF 90 
2f528     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
2f52c     BE 90 D1 90 
2f530     D0 90 D1 90 
2f534     D1 90 D1 90 
2f538     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
2f53c     E3 90 E4 90 
2f540     F6 90 F6 90 
2f544     F6 90 F6 90 
2f548     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
2f54c     09 91 0A 91 
2f550     0A 91 1C 91 
2f554     1C 91 1C 91 
2f558     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
2f55c     2F 91 2E 91 
2f560     2F 91 2F 91 
2f564     2E 91 41 91 
2f568     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
2f56c     41 91 53 91 
2f570     54 91 54 91 
2f574     53 91 54 91 
2f578     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
2f57c     67 91 67 91 
2f580     79 91 7A 91 
2f584     79 91 78 91 
2f588     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
2f58c     8C 91 8B 91 
2f590     8C 91 8C 91 
2f594     9E 91 9E 91 
2f598     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
2f59c     B1 91 B1 91 
2f5a0     B2 91 B1 91 
2f5a4     B1 91 C4 91 
2f5a8     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
2f5ac     C4 91 D6 91 
2f5b0     D7 91 D7 91 
2f5b4     D7 91 D6 91 
2f5b8     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
2f5bc     EA 91 EA 91 
2f5c0     EA 91 FC 91 
2f5c4     FC 91 FB 91 
2f5c8     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
2f5cc     0E 92 0F 92 
2f5d0     0F 92 0E 92 
2f5d4     21 92 21 92 
2f5d8     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
2f5dc     21 92 34 92 
2f5e0     33 92 34 92 
2f5e4     34 92 47 92 
2f5e8     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
2f5ec     46 92 47 92 
2f5f0     59 92 59 92 
2f5f4     59 92 59 92 
2f5f8     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
2f5fc     6C 92 6C 92 
2f600     6B 92 7E 92 
2f604     7E 92 7E 92 
2f608     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
2f60c     92 92 91 92 
2f610     91 92 90 92 
2f614     91 92 A4 92 
2f618     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
2f61c     A3 92 B6 92 
2f620     B6 92 B7 92 
2f624     B7 92 B6 92 
2f628     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
2f62c     CA 92 C9 92 
2f630     CA 92 DC 92 
2f634     DC 92 DC 92 
2f638     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
2f63c     EF 92 EF 92 
2f640     EF 92 EF 92 
2f644     01 93 01 93 
2f648     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
2f64c     15 93 14 93 
2f650     14 93 14 93 
2f654     14 93 27 93 
2f658     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
2f65c     27 93 39 93 
2f660     3A 93 39 93 
2f664     39 93 39 93 
2f668     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
2f66c     4B 93 4C 93 
2f670     5F 93 5F 93 
2f674     5F 93 5E 93 
2f678     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
2f67c     5F 93 84 93 
2f680     4C 93 96 93 
2f684     5F 93 AE 94 
2f688     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
2f68c     7B C1 00 00 
2f690     00 00 00 00 
2f694     00 00 00 00 
2f698     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2f69c     00 00 00 00 | 	byte	$00, $00, $00, $00
2f6a0     00 00 00 00 | zero long 0
2f6a4     7A D7 00 80 
2f6a8     87 8A 48 8F 
2f6ac     EC 8C 76 8D 
2f6b0     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
2f6b4     3C 8D 82 8D 
2f6b8     42 8D 88 8D 
2f6bc     8C 8D 8E 8D 
2f6c0     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
2f6c4     97 8D DE 8D 
2f6c8     E1 8D F1 8E 
2f6cc     D8 8C A3 83 
2f6d0     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
2f6d4     65 71 C9 65 
2f6d8     FC 64 C4 65 
2f6dc     C1 65 BF 65 
2f6e0     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
2f6e4     B6 65 B4 65 
2f6e8     B2 65 AE 65 
2f6ec     AC 65 ED 65 
2f6f0     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
2f6f4     5E 65 25 66 
2f6f8     FA 62 23 6B 
2f6fc     B5 6C 61 0A 
2f700     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
2f704     5D 90 BE 8D 
2f708     47 8E C3 8D 
2f70c     09 8E C9 8D 
2f710     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
2f714     15 8E 19 8E 
2f718     1B 8E 62 8E 
2f71c     64 8E 68 8E 
2f720     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
2f724     B5 8E 4C 90 
2f728     FA 84 3C 9D 
2f72c     98 13 79 6D 
2f730     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
2f734     D9 66 50 66 
2f738     D4 66 4B 66 
2f73c     8C 66 46 66 
2f740     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
2f744     81 66 3A 66 
2f748     7C 66 36 66 
2f74c     76 66 30 66 
2f750     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
2f754     6B 66 88 72 
2f758     BF 37 E7 B7 
2f75c     75 83 8B 8E 
2f760     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
2f764     94 8E 96 8E 
2f768     DD 8E 9C 8E 
2f76c     E2 8E A2 8E 
2f770     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
2f774     EE 8E AE 8E 
2f778     38 8F B5 8E 
2f77c     3F 8F FD 8E 
2f780     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
2f784     A5 87 1E E3 
2f788     6D 5D FA 71 
2f78c     41 64 25 67 
2f790     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
2f794     D9 66 1A 67 
2f798     18 67 15 67 
2f79c     12 67 0F 67 
2f7a0     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
2f7a4     07 67 C0 66 
2f7a8     01 67 BC 66 
2f7ac     B8 66 DE 64 
2f7b0     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
2f7b4     43 E5 1F 8B 
2f7b8     14 8A F1 90 
2f7bc     1C 8F 63 8F 
2f7c0     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
2f7c4     29 8F 6E 8F 
2f7c8     72 8F 75 8F 
2f7cc     34 8F BE 8F 
2f7d0     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
2f7d4     84 8F 87 8F 
2f7d8     CC 8F 56 90 
2f7dc     67 91 49 80 
2f7e0     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
2f7e4     46 77 A6 66 
2f7e8     E8 66 B0 67 
2f7ec     AD 67 ED 67 
2f7f0     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
2f7f4     A2 67 E3 67 
2f7f8     9D 67 9A 67 
2f7fc     98 67 94 67 
2f800     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
2f804     49 67 CD 67 
2f808     28 65 5F 6E 
2f80c     82 67 3A 01 
2f810     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
2f814     C2 91 A9 8F 
2f818     EF 8F AE 8F 
2f81c     F4 8F B5 8F 
2f820     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
2f824     01 90 03 90 
2f828     07 90 09 90 
2f82c     0C 90 53 90 
2f830     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
2f834     18 90 44 93 
2f838     85 84 D6 9D 
2f83c     87 1F 2F 75 
2f840     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
2f844     C4 68 F6 67 
2f848     BE 68 F1 67 
2f84c     76 68 2E 68 
2f850     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
2f854     27 68 24 68 
2f858     64 68 1E 68 
2f85c     5F 68 19 68 
2f860     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
2f864     DC 68 56 72 
2f868     7E 36 C2 B8 
2f86c     D7 84 73 90 
2f870     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
2f874     7B 90 7F 90 
2f878     82 90 84 90 
2f87c     CB 90 8B 90 
2f880     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
2f884     D7 90 96 90 
2f888     20 91 59 90 
2f88c     25 91 A2 90 
2f890     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
2f894     D0 89 40 EE 
2f898     12 64 C4 71 
2f89c     29 66 0C 69 
2f8a0     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
2f8a4     C0 68 02 69 
2f8a8     FE 68 FB 68 
2f8ac     F9 68 F6 68 
2f8b0     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
2f8b4     EE 68 A8 68 
2f8b8     2C 69 5F 68 
2f8bc     E2 68 81 66 
2f8c0     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
2f8c4     1E EB A6 8A 
2f8c8     73 8B 5E 93 
2f8cc     7B 90 48 91 
2f8d0     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
2f8d4     0D 91 11 91 
2f8d8     14 91 16 91 
2f8dc     5C 91 1C 91 
2f8e0     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
2f8e4     68 91 AF 91 
2f8e8     2A 91 B5 91 
2f8ec     75 91 1A 94 
2f8f0     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
2f8f4     70 0E CB 6C 
2f8f8     5D 6E C4 67 
2f8fc     99 69 54 69 
2f900     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
2f904     D2 69 49 69 
2f908     89 69 86 69 
2f90c     40 69 C4 69 
2f910     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
2f914     35 69 76 69 
2f918     58 67 EB 6D 
2f91c     E9 6D 89 0F 
2f920     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
2f924     33 94 94 91 
2f928     D9 91 56 91 
2f92c     E0 91 9F 91 
2f930     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
2f934     EC 91 EE 91 
2f938     F1 91 F4 91 
2f93c     F7 91 3D 92 
2f940     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
2f944     46 92 21 94 
2f948     11 89 A4 9D 
2f94c     FD 0E 8F 6C 
2f950     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
2f954     28 6A E1 69 
2f958     65 6A 1F 6A 
2f95c     5F 6A 1A 6A 
2f960     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
2f964     54 6A 0F 6A 
2f968     4F 6A 09 6A 
2f96c     06 6A 03 6A 
2f970     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
2f974     23 68 69 77 
2f978     3A 4D 38 CA 
2f97c     38 86 4E 91 
2f980     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
2f984     64 92 24 92 
2f988     6A 92 2A 92 
2f98c     70 92 30 92 
2f990     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
2f994     7B 92 7E 92 
2f998     C5 92 84 92 
2f99c     CB 92 8A 92 
2f9a0     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
2f9a4     4D 8D F9 E2 
2f9a8     97 59 FE 74 
2f9ac     DB 68 6D 6A 
2f9b0     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
2f9b4     A8 6A A5 6A 
2f9b8     A3 6A 9F 6A 
2f9bc     9D 6A 9B 6A 
2f9c0     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
2f9c4     D6 6A 8F 6A 
2f9c8     CF 6A 46 6A 
2f9cc     CA 6A E1 67 
2f9d0     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
2f9d4     D3 F7 15 92 
2f9d8     90 8C BF 94 
2f9dc     A6 92 EB 92 
2f9e0     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
2f9e4     B1 92 F7 92 
2f9e8     FA 92 FD 92 
2f9ec     00 93 02 93 
2f9f0     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
2f9f4     4F 93 52 93 
2f9f8     54 93 22 94 
2f9fc     5A 93 8F 88 
2fa00     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
2fa04     1C 77 07 6C 
2fa08     E8 69 7A 6B 
2fa0c     34 6B 75 6B 
2fa10     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
2fa14     29 6B 26 6B 
2fa18     24 6B 21 6B 
2fa1c     1D 6B 5E 6B 
2fa20     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
2fa24     12 6B 52 6B 
2fa28     34 69 34 6E 
2fa2c     BA 73 A4 24 
2fa30     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
2fa34     7A 94 B3 93 
2fa38     72 93 31 93 
2fa3c     78 93 7A 93 
2fa40     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
2fa44     83 93 86 93 
2fa48     89 93 D0 93 
2fa4c     D2 93 D5 93 
2fa50     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
2fa54     DD 93 40 96 
2fa58     30 8B 99 9C 
2fa5c     52 10 94 71 
2fa60     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
2fa64     46 6C 79 6B 
2fa68     40 6C B7 6B 
2fa6c     F7 6B B1 6B 
2fa70     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
2fa74     EC 6B A5 6B 
2fa78     A2 6B 9F 6B 
2fa7c     9D 6B 9A 6B 
2fa80     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
2fa84     C8 6A E4 76 
2fa88     20 4B F9 CE 
2fa8c     2E 8A 1A 92 
2fa90     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
2fa94     FB 93 BA 93 
2fa98     01 94 03 94 
2fa9c     4A 94 09 94 
2faa0     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
2faa4     55 94 14 94 
2faa8     9E 94 1A 94 
2faac     61 94 20 94 
2fab0     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
2fab4     3E 87 E5 CD 
2fab8     5F 50 6C 78 
2fabc     B5 6A 04 6C 
2fac0     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
2fac4     83 6C 7F 6C 
2fac8     7C 6C 36 6C 
2facc     76 6C 74 6C 
2fad0     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
2fad4     6B 6C 25 6C 
2fad8     66 6C 1F 6C 
2fadc     1D 6C 41 6A 
2fae0     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
2fae4     BA FA FC 94 
2fae8     5B 8D 97 96 
2faec     3B 94 C5 94 
2faf0     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
2faf4     89 94 8C 94 
2faf8     8F 94 92 94 
2fafc     94 94 DB 94 
2fb00     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
2fb04     E4 94 E7 94 
2fb08     2D 95 74 95 
2fb0c     C8 96 15 89 
2fb10     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
2fb14     CB 75 31 6F 
2fb18     7E 6B 10 6D 
2fb1c     C9 6C 0A 6D 
2fb20     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
2fb24     BD 6C FF 6C 
2fb28     FB 6C F9 6C 
2fb2c     B2 6C F3 6C 
2fb30     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
2fb34     A7 6C E8 6C 
2fb38     0D 6B 85 6F 
2fb3c     C7 74 10 28 
2fb40     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
2fb44     96 96 47 95 
2fb48     06 95 0A 95 
2fb4c     0C 95 0F 95 
2fb50     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
2fb54     17 95 5E 95 
2fb58     61 95 63 95 
2fb5c     22 95 AC 95 
2fb60     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
2fb64     72 95 17 98 
2fb68     59 8E 01 96 
2fb6c     CF FC 5A 68 
2fb70     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
2fb74     96 6D 50 6D 
2fb78     D5 6D 4A 6D 
2fb7c     8C 6D 89 6D 
2fb80     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
2fb84     80 6D 3A 6D 
2fb88     7A 6D 77 6D 
2fb8c     75 6D 71 6D 
2fb90     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
2fb94     18 6C BC 78 
2fb98     9A 4F 7E CF 
2fb9c     1F 89 F1 93 
2fba0     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
2fba4     D2 95 4E 95 
2fba8     D7 95 53 95 
2fbac     DD 95 E0 95 
2fbb0     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
2fbb4     A5 95 EB 95 
2fbb8     EE 95 F0 95 
2fbbc     37 96 B3 95 
2fbc0     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
2fbc4     1A 98 D5 8D 
2fbc8     C5 9F CD 0F 
2fbcc     0F 71 F3 73 
2fbd0     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
2fbd4     D9 6D 5E 6E 
2fbd8     D3 6D 58 6E 
2fbdc     12 6E 0F 6E 
2fbe0     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
2fbe4     49 6E BF 6D 
2fbe8     87 6E 76 6D 
2fbec     81 6E 11 6B 
2fbf0     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
2fbf4     3F 09 44 95 
2fbf8     E5 8D 3F 99 
2fbfc     D4 95 A2 96 
2fc00     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
2fc04     23 96 69 96 
2fc08     6B 96 6E 96 
2fc0c     71 96 74 96 
2fc10     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
2fc14     BF 96 3C 96 
2fc18     C6 96 C8 96 
2fc1c     A3 98 51 8D 
2fc20     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
2fc24     CF 75 29 73 
2fc28     90 6C EC 6E 
2fc2c     62 6E E7 6E 
2fc30     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
2fc34     9A 6E 98 6E 
2fc38     95 6E 91 6E 
2fc3c     8E 6E CF 6E 
2fc40     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
2fc44     40 6E C3 6E 
2fc48     E8 6C 45 6F 
2fc4c     A5 7B C9 35 
2fc50     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
2fc54     2D 98 23 97 
2fc58     E1 96 A0 96 
2fc5c     A4 96 EA 96 
2fc60     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
2fc64     AF 96 F4 96 
2fc68     F8 96 3E 97 
2fc6c     FD 96 43 97 
2fc70     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
2fc74     08 97 6B 99 
2fc78     D6 92 88 91 
2fc7c     D8 EE 84 66 
2fc80     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
2fc84     2E 6F E7 6E 
2fc88     6C 6F 24 6F 
2fc8c     21 6F 1F 6F 
2fc90     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
2fc94     17 6F 13 6F 
2fc98     54 6F 0E 6F 
2fc9c     0B 6F 4B 6F 
2fca0     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
2fca4     27 6D 1C 7B 
2fca8     19 59 9F DB 
2fcac     66 8E BC 94 
2fcb0     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
2fcb4     67 97 26 97 
2fcb8     6D 97 2B 97 
2fcbc     72 97 32 97 
2fcc0     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
2fcc4     C1 97 7F 97 
2fcc8     C6 97 85 97 
2fccc     CB 97 CE 97 
2fcd0     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
2fcd4     EC 8A C4 C6 
2fcd8     68 4C F4 7D 
2fcdc     63 6E E8 6E 
2fce0     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
2fce4     ED 6F A7 6F 
2fce8     E7 6F A0 6F 
2fcec     E1 6F 9B 6F 
2fcf0     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
2fcf4     D5 6F 8F 6F 
2fcf8     CE 6F 45 6F 
2fcfc     86 6F 68 6D 
2fd00     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
2fd04     C0 13 AD A2 
2fd08     A7 8E 79 99 
2fd0c     E6 97 E8 97 
2fd10     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
2fd14     F1 97 F3 97 
2fd18     F6 97 F9 97 
2fd1c     FB 97 FE 97 
2fd20     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
2fd24     4A 98 0A 98 
2fd28     93 98 0F 98 
2fd2c     7F 9B BF 8C 
2fd30     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
2fd34     91 7B 62 73 
2fd38     1A 6E B9 70 
2fd3c     EB 6F B3 70 
2fd40     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
2fd44     25 70 20 70 
2fd48     1E 70 1B 70 
2fd4c     18 70 15 70 
2fd50     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
2fd54     0D 70 09 70 
2fd58     07 70 03 70 
2fd5c     01 70 FD 6F 
2fd60     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
2fd64     F6 6F F2 6F 
2fd68     EF 6F EC 6F 
2fd6c     2C 70 E6 6F 
2fd70     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
2fd74     DD 6F 97 6F 
2fd78     D7 6F 84 6E 
2fd7c     8F 6F 3F 7D 
2fd80     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
2fd82     00 00 00 00 | zero1 long 0
2fd86     FF FF FF FF 
2fd8a     FF FF       | atarist_spl file "atarist.spl" '512
2fd8c     00 00 00 00 
2fd90     00 00 00 00 
2fd94     00 00       | 	byte	$00[10]
2fd96     17 7F F2 7F 
2fd9a     B2 7F 72 7F 
2fd9e     33 7F F4 7E 
2fda2     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
2fda6     36 7E F5 7D 
2fdaa     E9 51 F2 0D 
2fdae     8E 00 F3 FD 
2fdb2     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
2fdb6     57 FD 58 FD 
2fdba     5B FD 5C FD 
2fdbe     5C FD 60 7D 
2fdc2     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
2fdc6     D6 7C 98 7C 
2fdca     59 7C 1A 7C 
2fdce     DC 7B 9E 7B 
2fdd2     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
2fdd6     F3 05 00 FD 
2fdda     41 FB EA FA 
2fdde     D9 FA DB FA 
2fde2     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
2fde6     E4 FA 9B 36 
2fdea     F8 7A C0 7A 
2fdee     84 7A 45 7A 
2fdf2     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
2fdf6     8E 79 51 79 
2fdfa     15 79 D7 78 
2fdfe     3C 1F EB FF 
2fe02     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
2fe06     6D F8 65 F8 
2fe0a     68 F8 6D F8 
2fe0e     70 F8 74 F8 
2fe12     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
2fe16     AB 60 79 60 
2fe1a     4B 60 1A 60 
2fe1e     E9 5F B9 5F 
2fe22     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
2fe26     FB 59 B2 0B 
2fe2a     92 FA 3A F7 
2fe2e     96 F6 79 F6 
2fe32     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
2fe36     82 F6 86 F6 
2fe3a     8C F6 DB 5D 
2fe3e     F1 5E C1 5E 
2fe42     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
2fe46     34 5E 04 5E 
2fe4a     D6 5D A6 5D 
2fe4e     78 5D D4 3E 
2fe52     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
2fe56     27 F5 BA F4 
2fe5a     AB F4 AD F4 
2fe5e     B2 F4 B8 F4 
2fe62     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
2fe66     26 5D 2B 5D 
2fe6a     FC 5C CD 5C 
2fe6e     9F 5C 70 5C 
2fe72     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
2fe76     E5 5B B8 5B 
2fe7a     DB 24 A7 FC 
2fe7e     D1 F4 4D F3 
2fe82     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
2fe86     04 F3 0B F3 
2fe8a     11 F3 16 F3 
2fe8e     DE 18 98 5B 
2fe92     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
2fe96     4E 4A 29 48 
2fe9a     A0 47 6A 47 
2fe9e     43 47 20 47 
2fea2     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
2fea6     E2 F6 98 F2 
2feaa     C5 F1 A3 F1 
2feae     A3 F1 A8 F1 
2feb2     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
2feb6     BF F1 00 3D 
2feba     EF 46 CD 46 
2febe     AA 46 86 46 
2fec2     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
2fec6     1C 46 F9 45 
2feca     D7 45 EE 43 
2fece     DE 02 E8 F3 
2fed2     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
2fed6     61 F0 65 F0 
2feda     6D F0 74 F0 
2fede     7C F0 84 F0 
2fee2     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
2fee6     8E 45 6D 45 
2feea     49 45 27 45 
2feee     05 45 E1 44 
2fef2     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
2fef6     F1 2F A9 FB 
2fefa     8B F1 9B EF 
2fefe     40 EF 36 EF 
2ff02     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
2ff06     4D EF 56 EF 
2ff0a     5E EF 7B 44 
2ff0e     8C 44 69 44 
2ff12     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
2ff16     03 44 E1 43 
2ff1a     C0 43 F5 37 
2ff1e     69 33 0F 11 
2ff22     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
2ff26     66 EE 37 EE 
2ff2a     38 EE 40 EE 
2ff2e     48 EE 51 EE 
2ff32     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
2ff36     7D 32 6A 32 
2ff3a     51 32 37 32 
2ff3e     1F 32 05 32 
2ff42     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
2ff46     B9 31 A1 31 
2ff4a     F1 04 F4 F1 
2ff4e     50 EE A0 ED 
2ff52     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
2ff56     93 ED 9A ED 
2ff5a     A4 ED AD ED 
2ff5e     F4 27 C1 31 
2ff62     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
2ff66     78 31 5F 31 
2ff6a     46 31 2E 31 
2ff6e     15 31 FC 30 
2ff72     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
2ff76     C4 EF 4A ED 
2ff7a     DC EC CB EC 
2ff7e     D2 EC DA EC 
2ff82     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
2ff86     F9 EC 64 2F 
2ff8a     0A 31 F1 30 
2ff8e     D9 30 C0 30 
2ff92     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
2ff96     78 30 5F 30 
2ff9a     46 30 38 23 
2ff9e     A6 F6 19 EE 
2ffa2     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
2ffa6     20 EC 28 EC 
2ffaa     32 EC 3C EC 
2ffae     47 EC 51 EC 
2ffb2     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
2ffb6     A3 22 93 22 
2ffba     7F 22 6E 22 
2ffbe     5D 22 4C 22 
2ffc2     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
2ffc6     77 09 76 F1 
2ffca     CC EC F0 EB 
2ffce     CD EB CE EB 
2ffd2     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
2ffd6     ED EB F5 EB 
2ffda     3E F6 6B 22 
2ffde     5F 22 4E 22 
2ffe2     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
2ffe6     1B 22 0B 22 
2ffea     FA 21 E9 21 
2ffee     D8 21 4D FF 
2fff2     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
2fff6     92 EB 7B EB 
2fffa     82 EB 8C EB 
2fffe     97 EB A1 EB 
30002     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
30006     15 22 04 22 
3000a     F3 21 E3 21 
3000e     D2 21 C0 21 
30012     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
30016     8E 21 7D 21 
3001a     9A F8 A4 ED 
3001e     8E EB 2F EB 
30022     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
30026     37 EB 42 EB 
3002a     4C EB 57 EB 
3002e     B2 17 22 19 
30032     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
30036     FD 18 EF 18 
3003a     E3 18 D6 18 
3003e     CA 18 BD 18 
30042     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
30046     60 EC 35 EB 
3004a     01 EB 01 EB 
3004e     0C EB 16 EB 
30052     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
30056     34 EB D0 18 
3005a     00 19 F4 18 
3005e     E8 18 DA 18 
30062     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
30066     B6 18 A9 18 
3006a     9D 18 91 05 
3006e     F0 EF CA EB 
30072     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
30076     E8 EA F2 EA 
3007a     FE EA 07 EB 
3007e     12 EB C2 EF 
30082     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
30086     D9 18 CD 18 
3008a     C0 18 B3 18 
3008e     A7 18 9B 18 
30092     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
30096     B8 FC 30 EE 
3009a     61 EB DC EA 
3009e     CD EA D2 EA 
300a2     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
300a6     F3 EA FE EA 
300aa     D2 09 D1 18 
300ae     C3 18 17 18 
300b2     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
300b6     66 11 52 11 
300ba     49 11 41 11 
300be     38 11 E0 F4 
300c2     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
300c6     C9 EA C5 EA 
300ca     CF EA DB EA 
300ce     E6 EA EF EA 
300d2     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
300d6     89 11 80 11 
300da     78 11 6E 11 
300de     67 11 5D 11 
300e2     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
300e6     43 11 32 0D 
300ea     9C F1 07 EC 
300ee     F8 EA CD EA 
300f2     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
300f6     E4 EA ED EA 
300fa     F8 EA 02 EB 
300fe     55 11 91 11 
30102     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
30106     75 11 6E 11 
3010a     64 11 5E 11 
3010e     54 11 4A 11 
30112     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
30116     A8 EB F1 EA 
3011a     D9 EA DC EA 
3011e     E8 EA F1 EA 
30122     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
30126     A6 EB 9E 11 
3012a     A0 11 96 11 
3012e     8D 11 85 11 
30132     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
30136     6A 11 CA 0D 
3013a     36 0B 57 F8 
3013e     6C ED 57 EB 
30142     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
30146     F4 EA FF EA 
3014a     09 EB 15 EB 
3014e     1E EB 1A FD 
30152     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
30156     ED 0A E8 0A 
3015a     E2 0A DC 0A 
3015e     D6 0A D1 0A 
30162     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
30166     F8 F3 BC EC 
3016a     57 EB 1E EB 
3016e     18 EB 24 EB 
30172     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
30176     42 EB 4D EB 
3017a     08 09 20 0B 
3017e     1A 0B 14 0B 
30182     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
30186     04 0B FE 0A 
3018a     F9 0A F2 0A 
3018e     84 08 3A F1 
30192     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
30196     42 EB 42 EB 
3019a     4E EB 57 EB 
3019e     62 EB 6B EB 
301a2     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
301a6     48 0B 43 0B 
301aa     3C 0B 36 0B 
301ae     31 0B 2C 0B 
301b2     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
301b6     1B 0B 5C 00 
301ba     6A EF 1B EC 
301be     81 EB 6A EB 
301c2     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
301c6     85 EB 8E EB 
301ca     99 EB A3 EB 
301ce     DD 05 E5 05 
301d2     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
301d6     DB 05 D8 05 
301da     D5 05 D1 05 
301de     D0 05 CB 05 
301e2     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
301e6     0C EC BB EB 
301ea     B3 EB BB EB 
301ee     C5 EB D0 EB 
301f2     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
301f6     E4 F7 2C 06 
301fa     28 06 24 06 
301fe     22 06 1F 06 
30202     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
30206     16 06 14 06 
3020a     0F 06 D0 F3 
3020e     65 ED 2D EC 
30212     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
30216     01 EC 0A EC 
3021a     14 EC 1E EC 
3021e     29 EC FB 03 
30222     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
30226     63 06 60 06 
3022a     5E 06 59 06 
3022e     58 06 54 06 
30232     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
30236     69 F1 21 ED 
3023a     55 EC 33 EC 
3023e     36 EC 40 EC 
30242     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
30246     5C EC 68 EC 
3024a     92 02 D9 02 
3024e     D7 02 D7 02 
30252     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
30256     D1 02 D1 02 
3025a     CE 02 CD 02 
3025e     5D FC 80 EF 
30262     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
30266     83 EC 8A EC 
3026a     93 EC 9C EC 
3026e     A5 EC B1 EC 
30272     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
30276     2B 03 2A 03 
3027a     29 03 26 03 
3027e     25 03 24 03 
30282     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
30286     1F 03 70 F7 
3028a     D0 EE 27 ED 
3028e     DB EC D4 EC 
30292     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
30296     F0 EC FA EC 
3029a     02 ED F9 F4 
3029e     7B 03 7C 03 
302a2     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
302a6     75 03 73 03 
302aa     72 03 70 03 
302ae     6D 03 6C 03 
302b2     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
302b6     54 ED 22 ED 
302ba     22 ED 2C ED 
302be     35 ED 3F ED 
302c2     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
302c6     14 01 C3 03 
302ca     C1 03 C0 03 
302ce     5F 01 A5 00 
302d2     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
302d6     7B 00 7C 00 
302da     20 00 85 F1 
302de     2A EE 89 ED 
302e2     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
302e6     80 ED 87 ED 
302ea     90 ED 9A ED 
302ee     A3 ED 73 00 
302f2     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
302f6     D0 00 D0 00 
302fa     D0 00 D0 00 
302fe     D0 00 CF 00 
30302     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
30306     80 F0 3D EE 
3030a     D5 ED C7 ED 
3030e     CD ED D6 ED 
30312     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
30316     F2 ED FA ED 
3031a     1D 01 29 01 
3031e     27 01 27 01 
30322     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
30326     25 01 26 01 
3032a     26 01 23 01 
3032e     D0 F7 EC EF 
30332     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
30336     1C EE 24 EE 
3033a     2D EE 37 EE 
3033e     40 EE 47 EE 
30342     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
30346     7D 01 7B 01 
3034a     7A 01 7A 01 
3034e     79 01 78 01 
30352     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
30356     84 FE DE F3 
3035a     6C EF 93 EE 
3035e     72 EE 72 EE 
30362     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
30366     8B EE 95 EE 
3036a     9E EE 15 FC 
3036e     67 FE 67 FE 
30372     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
30376     6B FE 6B FE 
3037a     6D FE 6D FE 
3037e     6D FE 6F FE 
30382     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
30386     DF EE CC EE 
3038a     CF EE D9 EE 
3038e     E1 EE EA EE 
30392     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
30396     5A FE C4 FE 
3039a     C3 FE C5 FE 
3039e     C6 FE C6 FE 
303a2     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
303a6     C8 FE C7 FE 
303aa     DA FB 85 F1 
303ae     8D EF 31 EF 
303b2     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
303b6     34 EF 3E EF 
303ba     46 EF 4F EF 
303be     57 EF 0D FF 
303c2     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
303c6     1F FF 1F FF 
303ca     21 FF 21 FF 
303ce     21 FF 21 FF 
303d2     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
303d6     15 F1 BE EF 
303da     84 EF 7E EF 
303de     88 EF 8F EF 
303e2     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
303e6     A9 EF 06 F2 
303ea     A6 FC AB FC 
303ee     AD FC AE FC 
303f2     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
303f6     B2 FC B4 FC 
303fa     B6 FC B7 FC 
303fe     8B F4 BD F0 
30402     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
30406     E4 EF EE EF 
3040a     F6 EF FD EF 
3040e     04 F0 0E F0 
30412     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
30416     0B FD 0D FD 
3041a     0F FD 11 FD 
3041e     11 FD 13 FD 
30422     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
30426     17 FD 64 F3 
3042a     CD F0 52 F0 
3042e     41 F0 45 F0 
30432     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
30436     5B F0 64 F0 
3043a     6D F0 FB FC 
3043e     65 FD 68 FD 
30442     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
30446     6C FD 6D FD 
3044a     6F FD 70 FD 
3044e     72 FD B3 FB 
30452     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
30456     A4 F0 99 F0 
3045a     A0 F0 A8 F0 
3045e     AE F0 B9 F0 
30462     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
30466     CB FB DD FB 
3046a     DE FB E0 FB 
3046e     E3 FB E3 FB 
30472     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
30476     E9 FB EC FB 
3047a     62 F7 27 F2 
3047e     2A F1 FF F0 
30482     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
30486     0C F1 13 F1 
3048a     1B F1 23 F1 
3048e     33 F2 3C FC 
30492     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
30496     42 FC 45 FC 
3049a     47 FC 48 FC 
3049e     4A FC 4C FC 
304a2     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
304a6     20 F2 77 F1 
304aa     5C F1 5F F1 
304ae     64 F1 6C F1 
304b2     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
304b6     83 F1 DC F8 
304ba     9A FC 9A FC 
304be     9B FC 9E FC 
304c2     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
304c6     A3 FC A4 FC 
304ca     A6 FC A9 FC 
304ce     90 F4 33 F2 
304d2     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
304d6     BA F1 BF F1 
304da     C7 F1 CE F1 
304de     D6 F1 DC F1 
304e2     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
304e6     F3 FC F5 FC 
304ea     FE FB 79 FB 
304ee     62 FB 5F FB 
304f2     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
304f6     6F FA AF F3 
304fa     53 F2 12 F2 
304fe     0F F2 15 F2 
30502     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
30506     2A F2 32 F2 
3050a     38 F2 9A FB 
3050e     AF FB B1 FB 
30512     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
30516     B7 FB B8 FB 
3051a     BA FB BC FB 
3051e     C1 FB 3B F8 
30522     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
30526     6E F2 6C F2 
3052a     74 F2 7A F2 
3052e     81 F2 87 F2 
30532     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
30536     06 FC 09 FC 
3053a     0C FC 0E FC 
3053e     0F FC 12 FC 
30542     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
30546     17 FC 1A FC 
3054a     B2 F6 7B F3 
3054e     DD F2 C5 F2 
30552     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
30556     D4 F2 DB F2 
3055a     E0 F2 E8 F2 
3055e     28 F8 60 FC 
30562     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
30566     64 FC 66 FC 
3056a     68 FC 6A FC 
3056e     6D FC 52 FC 
30572     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
30576     78 F3 24 F3 
3057a     1A F3 1E F3 
3057e     24 F3 2A F3 
30582     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
30586     3D F3 80 FA 
3058a     0C FB 0F FB 
3058e     10 FB 14 FB 
30592     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
30596     1B FB 1D FB 
3059a     1F FB 92 FA 
3059e     DE F4 AE F3 
305a2     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
305a6     79 F3 7E F3 
305aa     84 F3 8C F3 
305ae     92 F3 97 F3 
305b2     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
305b6     67 FB 69 FB 
305ba     6B FB 6F FB 
305be     71 FB 72 FB 
305c2     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
305c6     E3 F8 BA F4 
305ca     EE F3 CC F3 
305ce     CA F3 CF F3 
305d2     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
305d6     E2 F3 E8 F3 
305da     ED F3 B7 FB 
305de     BC FB BE FB 
305e2     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
305e6     C4 FB C6 FB 
305ea     C8 FB C9 FB 
305ee     CC FB 8F F7 
305f2     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
305f6     1E F4 1E F4 
305fa     24 F4 2A F4 
305fe     30 F4 38 F4 
30602     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
30606     AD FA B1 FA 
3060a     B4 FA B6 FA 
3060e     BA FA BB FA 
30612     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
30616     C2 FA C6 FA 
3061a     55 F6 C6 F4 
3061e     7D F4 72 F4 
30622     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
30626     83 F4 89 F4 
3062a     8F F4 94 F4 
3062e     66 FA 03 FB 
30632     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
30636     0A FB 0E FB 
3063a     10 FB 11 FB 
3063e     16 FB 18 FB 
30642     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
30646     F9 F4 CA F4 
3064a     C5 F4 CB F4 
3064e     D1 F4 D7 F4 
30652     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
30656     E8 F4 3F FB 
3065a     56 FB 58 FB 
3065e     5A FB 5E FB 
30662     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
30666     64 FB 64 FB 
3066a     69 FB 99 F9 
3066e     E9 F5 33 F5 
30672     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
30676     1D F5 22 F5 
3067a     27 F5 2E F5 
3067e     32 F5 37 F5 
30682     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
30686     BC FA BC FA 
3068a     C1 FA C2 FA 
3068e     C4 FA C8 FA 
30692     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
30696     F9 F7 DB F5 
3069a     78 F5 69 F5 
3069e     6A F5 70 F5 
306a2     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
306a6     7F F5 85 F5 
306aa     6E F7 06 FB 
306ae     0A FB 0B FB 
306b2     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
306b6     14 FB 15 FB 
306ba     18 FB 1B FB 
306be     1D FB 70 F7 
306c2     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
306c6     B6 F5 BB F5 
306ca     C0 F5 C6 F5 
306ce     CA F5 CF F5 
306d2     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
306d6     54 FB 56 FB 
306da     5A FB 5B FB 
306de     5E FB 5F FB 
306e2     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
306e6     67 FB 52 FB 
306ea     29 F7 33 F6 
306ee     06 F6 02 F6 
306f2     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
306f6     10 F6 16 F6 
306fa     1A F6 1F F6 
306fe     81 FB 9F FB 
30702     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
30706     51 FB F2 FA 
3070a     E3 FA E3 FA 
3070e     E5 FA E9 FA 
30712     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
30716     64 F6 4D F6 
3071a     4D F6 53 F6 
3071e     57 F6 5C F6 
30722     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
30726     6A F6 19 FB 
3072a     1E FB 22 FB 
3072e     23 FB 24 FB 
30732     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
30736     2C FB 2E FB 
3073a     32 FB F0 F8 
3073e     01 F7 A5 F6 
30742     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
30746     9F F6 A3 F6 
3074a     A6 F6 AC F6 
3074e     B0 F6 EB F7 
30752     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
30756     68 FB 6C FB 
3075a     6E FB 71 FB 
3075e     72 FB 74 FB 
30762     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
30766     71 F8 21 F7 
3076a     E5 F6 DD F6 
3076e     E1 F6 E6 F6 
30772     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
30776     F5 F6 F7 F6 
3077a     F7 FA AB FB 
3077e     AD FB AF FB 
30782     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
30786     B6 FB B9 FB 
3078a     BB FB BC FB 
3078e     21 FB 07 F8 
30792     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
30796     22 F7 26 F7 
3079a     2B F7 2E F7 
3079e     34 F7 38 F7 
307a2     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
307a6     13 FB 16 FB 
307aa     17 FB 1B FB 
307ae     1E FB 20 FB 
307b2     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
307b6     26 FB 77 FA 
307ba     F3 F7 7C F7 
307be     67 F7 6A F7 
307c2     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
307c6     74 F7 7A F7 
307ca     7E F7 82 F7 
307ce     53 FB 5A FB 
307d2     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
307d6     5F FB 63 FB 
307da     65 FB 67 FB 
307de     69 FB 6A FB 
307e2     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
307e6     B5 F7 A9 F7 
307ea     AD F7 B0 F7 
307ee     B5 F7 B8 F7 
307f2     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
307f6     6E F8 99 FB 
307fa     9C FB 9D FB 
307fe     9F FB A4 FB 
30802     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
30806     A9 FB AB FB 
3080a     AD FB 46 F9 
3080e     26 F8 F0 F7 
30812     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
30816     F4 F7 F8 F7 
3081a     FB F7 FF F7 
3081e     03 F8 65 FA 
30822     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
30826     2B FB 2F FB 
3082a     30 FB 32 FB 
3082e     34 FB 38 FB 
30832     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
30836     E9 F8 4A F8 
3083a     2E F8 2C F8 
3083e     2F F8 36 F8 
30842     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
30846     41 F8 44 F8 
3084a     4A FB 67 FB 
3084e     68 FB 6B FB 
30852     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
30856     73 FB 74 FB 
3085a     78 FB 7A FB 
3085e     14 FB E7 F8 
30862     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
30866     6D F8 70 F8 
3086a     73 F8 78 F8 
3086e     7C F8 80 F8 
30872     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
30876     A6 FB A7 FB 
3087a     A9 FB AC FB 
3087e     AF FB B1 FB 
30882     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
30886     B7 FB 73 FA 
3088a     F8 F8 B4 F8 
3088e     A9 F8 AB F8 
30892     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
30896     B4 F8 B8 F8 
3089a     BB F8 FA F8 
3089e     64 FB 65 FB 
308a2     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
308a6     6D FB 6F FB 
308aa     70 FB 74 FB 
308ae     77 FB 77 FB 
308b2     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
308b6     E9 F8 E4 F8 
308ba     E8 F8 EB F8 
308be     EE F8 F2 F8 
308c2     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
308c6     B5 FA 9F FB 
308ca     A1 FB A4 FB 
308ce     A5 FB A9 FB 
308d2     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
308d6     AE FB B1 FB 
308da     B2 FB C7 F9 
308de     39 F9 22 F9 
308e2     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
308e6     26 F9 2A F9 
308ea     2E F9 32 F9 
308ee     33 F9 BA FB 
308f2     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
308f6     DE FB E1 FB 
308fa     E2 FB E4 FB 
308fe     E5 FB E7 FB 
30902     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
30906     C5 F9 67 F9 
3090a     57 F9 56 F9 
3090e     5B F9 5F F9 
30912     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
30916     68 F9 6C F9 
3091a     0B FC 11 FC 
3091e     14 FC 15 FC 
30922     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
30926     B5 FB B5 FB 
3092a     B6 FB B8 FB 
3092e     E9 FA C8 F9 
30932     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
30936     90 F9 94 F9 
3093a     95 F9 99 F9 
3093e     9D F9 9F F9 
30942     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
30946     DE FB DF FB 
3094a     E2 FB E4 FB 
3094e     E6 FB E8 FB 
30952     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
30956     EF FB AC FA 
3095a     E9 F9 C7 F9 
3095e     C3 F9 C8 F9 
30962     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
30966     D0 F9 D4 F9 
3096a     D6 F9 0E FB 
3096e     11 FC 13 FC 
30972     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
30976     19 FC 1B FC 
3097a     1D FC 1E FC 
3097e     21 FC 22 FC 
30982     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
30986     F7 F9 F7 F9 
3098a     FB F9 FE F9 
3098e     00 FA 03 FA 
30992     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
30996     1B FC 45 FC 
3099a     46 FC 48 FC 
3099e     4A FC 4B FC 
309a2     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
309a6     52 FC 54 FC 
309aa     F3 FB 82 FA 
309ae     35 FA 28 FA 
309b2     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
309b6     31 FA 32 FA 
309ba     37 FA 37 FA 
309be     3C FA 00 FC 
309c2     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
309c6     09 FC 0B FC 
309ca     0F FC 12 FC 
309ce     12 FC 15 FC 
309d2     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
309d6     8D FA 60 FA 
309da     5B FA 5C FA 
309de     60 FA 61 FA 
309e2     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
309e6     6C FA 6D FA 
309ea     37 FC 3A FC 
309ee     3B FC 3D FC 
309f2     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
309f6     43 FC 44 FC 
309fa     45 FC 47 FC 
309fe     51 FB AB FA 
30a02     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
30a06     8E FA 91 FA 
30a0a     93 FA 95 FA 
30a0e     98 FA 9B FA 
30a12     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
30a16     68 FC 6A FC 
30a1a     6C FC 6E FC 
30a1e     70 FC 72 FC 
30a22     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
30a26     76 FC 3B FB 
30a2a     D0 FA BB FA 
30a2e     B9 FA BD FA 
30a32     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
30a36     C4 FA C6 FA 
30a3a     CA FA 13 FC 
30a3e     3A FC 3A FC 
30a42     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
30a46     41 FC 43 FC 
30a4a     44 FC 47 FC 
30a4e     48 FC 3C FC 
30a52     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
30a56     E6 FA E8 FA 
30a5a     EB FA EE FA 
30a5e     F0 FA F2 FA 
30a62     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
30a66     61 FC 66 FC 
30a6a     68 FC 6B FC 
30a6e     6C FC 6E FC 
30a72     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
30a76     73 FC 75 FC 
30a7a     13 FC 3F FB 
30a7e     17 FB 12 FB 
30a82     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
30a86     1A FB 1D FB 
30a8a     1F FB 20 FB 
30a8e     23 FB 92 FC 
30a92     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
30a96     96 FC 97 FC 
30a9a     9A FC 9C FC 
30a9e     9E FC 9F FC 
30aa2     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
30aa6     5A FB 41 FB 
30aaa     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
30aae     00 00 00 00 | zero2 long 0
30ab2     01 00 00 00 
30ab6     00 00 00 00 
30aba     00 00 00 00 
30abe     00 00 00 00 | mouse  file "mouse2.def"
30ac2     00 00 00 00 
30ac6     00 00 00 00 
30aca     00 00 00 00 
30ace     00 00 00 00 | 	byte	$00[16]
30ad2     01 01 00 00 
30ad6     00 00 00 00 
30ada     00 00 00 00 
30ade     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30ae2     00 00 00 00 
30ae6     00 00 00 00 
30aea     00 00 00 00 
30aee     00 00 00 00 | 	byte	$00[16]
30af2     01 0D 01 00 
30af6     00 00 00 00 
30afa     00 00 00 00 
30afe     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30b02     00 00 00 00 
30b06     00 00 00 00 
30b0a     00 00 00 00 
30b0e     00 00 00 00 | 	byte	$00[16]
30b12     01 0D 0D 01 
30b16     00 00 00 00 
30b1a     00 00 00 00 
30b1e     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30b22     00 00 00 00 
30b26     00 00 00 00 
30b2a     00 00 00 00 
30b2e     00 00 00 00 | 	byte	$00[16]
30b32     01 0D 0D 0D 
30b36     01 00 00 00 
30b3a     00 00 00 00 
30b3e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30b42     00 00 00 00 
30b46     00 00 00 00 
30b4a     00 00 00 00 
30b4e     00 00 00 00 | 	byte	$00[16]
30b52     01 0D 0D 0D 
30b56     0D 01 00 00 
30b5a     00 00 00 00 
30b5e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30b62     00 00 00 00 
30b66     00 00 00 00 
30b6a     00 00 00 00 
30b6e     00 00 00 00 | 	byte	$00[16]
30b72     01 0D 0D 0D 
30b76     0D 0D 01 00 
30b7a     00 00 00 00 
30b7e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
30b82     00 00 00 00 
30b86     00 00 00 00 
30b8a     00 00 00 00 
30b8e     00 00 00 00 | 	byte	$00[16]
30b92     01 0D 0D 0D 
30b96     0D 0D 0D 01 
30b9a     00 00 00 00 
30b9e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
30ba2     00 00 00 00 
30ba6     00 00 00 00 
30baa     00 00 00 00 
30bae     00 00 00 00 | 	byte	$00[16]
30bb2     01 0D 0D 0D 
30bb6     0D 0D 0D 0C 
30bba     01 00 00 00 
30bbe     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
30bc2     00 00 00 00 
30bc6     00 00 00 00 
30bca     00 00 00 00 
30bce     00 00 00 00 | 	byte	$00[16]
30bd2     01 0D 0D 0D 
30bd6     0D 0D 0D 0D 
30bda     0C 01 00 00 
30bde     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
30be2     00 00 00 00 
30be6     00 00 00 00 
30bea     00 00 00 00 
30bee     00 00 00 00 | 	byte	$00[16]
30bf2     01 0D 0D 0D 
30bf6     0D 0D 0D 0D 
30bfa     0D 0C 01 00 
30bfe     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
30c02     00 00 00 00 
30c06     00 00 00 00 
30c0a     00 00 00 00 
30c0e     00 00 00 00 | 	byte	$00[16]
30c12     01 0D 0D 0D 
30c16     0D 0D 0D 0D 
30c1a     0D 0D 0B 01 
30c1e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
30c22     00 00 00 00 
30c26     00 00 00 00 
30c2a     00 00 00 00 
30c2e     00 00 00 00 | 	byte	$00[16]
30c32     01 0D 0D 0D 
30c36     0C 0D 0D 03 
30c3a     01 01 01 01 
30c3e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
30c42     00 00 00 00 
30c46     00 00 00 00 
30c4a     00 00 00 00 
30c4e     00 00 00 00 | 	byte	$00[16]
30c52     01 0D 0D 0C 
30c56     01 09 0D 03 
30c5a     00 00 00 00 
30c5e     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
30c62     00 00 00 00 
30c66     00 00 00 00 
30c6a     00 00 00 00 
30c6e     00 00 00 00 | 	byte	$00[16]
30c72     01 0D 0C 01 
30c76     00 01 0D 0B 
30c7a     01 00 00 00 
30c7e     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
30c82     00 00 00 00 
30c86     00 00 00 00 
30c8a     00 00 00 00 
30c8e     00 00 00 00 | 	byte	$00[16]
30c92     01 0C 01 00 
30c96     00 01 0A 0D 
30c9a     01 00 00 00 
30c9e     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
30ca2     00 00 00 00 
30ca6     00 00 00 00 
30caa     00 00 00 00 
30cae     00 00 00 00 | 	byte	$00[16]
30cb2     01 01 00 00 
30cb6     00 00 01 0D 
30cba     0B 01 00 00 
30cbe     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
30cc2     00 00 00 00 
30cc6     00 00 00 00 
30cca     00 00 00 00 
30cce     00 00 00 00 
30cd2     00 00 00 00 
30cd6     00 00       | 	byte	$00[22]
30cd8     01 0B 0D 01 
30cdc     00 00 00 00 
30ce0     00 00 00 00 
30ce4     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30ce8     00 00 00 00 
30cec     00 00 00 00 
30cf0     00 00 00 00 
30cf4     00 00 00 00 
30cf8     00          | 	byte	$00[17]
30cf9     01 01 00 00 
30cfd     00 00 00 00 
30d01     00 00 00 00 
30d05     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
30d09     00 00 00 00 
      ...             
30ead     00 00 00 00 
30eb1     00          | 	byte	$00[425]
30eb2     73 32 00 04 
30eb6     00 00 10 00 
30eba     00 00 00 00 
30ebe     00 00 00 00 | atari2 file "atari2.s2"
30ec2     43 87 43 87 
30ec6     43 87 44 87 
30eca     43 87 44 87 
30ece     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
30ed2     43 87 43 87 
30ed6     43 87 44 87 
30eda     43 87 43 87 
30ede     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
30ee2     44 87 43 87 
30ee6     44 87 43 87 
30eea     43 87 43 87 
30eee     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
30ef2     43 87 43 87 
30ef6     44 87 43 87 
30efa     44 87 44 87 
30efe     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
30f02     43 87 43 87 
30f06     44 87 43 87 
30f0a     43 87 42 87 
30f0e     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
30f12     43 87 43 87 
30f16     43 87 43 87 
30f1a     44 87 43 87 
30f1e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
30f22     44 87 44 87 
30f26     43 87 44 87 
30f2a     43 87 44 87 
30f2e     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
30f32     44 87 43 87 
30f36     44 87 44 87 
30f3a     43 87 43 87 
30f3e     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
30f42     43 87 44 87 
30f46     44 87 43 87 
30f4a     43 87 44 87 
30f4e     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
30f52     43 87 43 87 
30f56     43 87 43 87 
30f5a     43 87 43 87 
30f5e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
30f62     42 87 43 87 
30f66     44 87 42 87 
30f6a     43 87 43 87 
30f6e     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
30f72     43 87 44 87 
30f76     44 87 43 87 
30f7a     43 87 43 87 
30f7e     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
30f82     43 87 5C 87 
30f86     EE 86 AC 87 
30f8a     4C 7C A3 78 
30f8e     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
30f92     BC 78 BB 78 
30f96     BD 78 BC 78 
30f9a     BB 78 BD 78 
30f9e     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
30fa2     BB 78 BB 78 
30fa6     BC 78 BC 78 
30faa     BC 78 BB 78 
30fae     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
30fb2     BC 78 BC 78 
30fb6     BC 78 BC 78 
30fba     BC 78 BC 78 
30fbe     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
30fc2     BB 78 BC 78 
30fc6     A0 78 4C 7C 
30fca     11 7A 29 89 
30fce     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
30fd2     44 87 43 87 
30fd6     44 87 43 87 
30fda     43 87 42 87 
30fde     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
30fe2     43 87 43 87 
30fe6     44 87 ED 85 
30fea     71 85 52 79 
30fee     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
30ff2     BC 78 BC 78 
30ff6     BC 78 BC 78 
30ffa     BC 78 BC 78 
30ffe     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
31002     BC 78 BC 78 
31006     BC 78 A0 78 
3100a     CF 7A B9 81 
3100e     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
31012     44 87 43 87 
31016     43 87 44 87 
3101a     43 87 44 87 
3101e     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
31022     43 87 43 87 
31026     43 87 43 87 
3102a     44 87 43 87 
3102e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
31032     43 87 43 87 
31036     44 87 43 87 
3103a     44 87 43 87 
3103e     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
31042     44 87 43 87 
31046     43 87 43 87 
3104a     5A 87 39 81 
3104e     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
31052     A5 78 BC 78 
31056     BB 78 BC 78 
3105a     BB 78 BC 78 
3105e     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
31062     BC 78 BC 78 
31066     BC 78 BC 78 
3106a     BC 78 8F 79 
3106e     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
31072     09 85 47 87 
31076     43 87 43 87 
3107a     42 87 42 87 
3107e     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
31082     43 87 43 87 
31086     43 87 43 87 
3108a     43 87 44 87 
3108e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
31092     43 87 43 87 
31096     44 87 43 87 
3109a     42 87 43 87 
3109e     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
310a2     44 87 43 87 
310a6     43 87 43 87 
310aa     44 87 44 87 
310ae     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
310b2     94 78 55 7A 
310b6     B9 78 BC 78 
310ba     BC 78 BC 78 
310be     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
310c2     BC 78 BB 78 
310c6     BC 78 BC 78 
310ca     BC 78 BC 78 
310ce     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
310d2     BB 78 BC 78 
310d6     BC 78 BC 78 
310da     BB 78 BC 78 
310de     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
310e2     BC 78 BC 78 
310e6     BD 78 BC 78 
310ea     BC 78 BB 78 
310ee     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
310f2     94 78 B3 84 
310f6     36 84 4A 87 
310fa     43 87 43 87 
310fe     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
31102     43 87 44 87 
31106     43 87 43 87 
3110a     43 87 43 87 
3110e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
31112     43 87 44 87 
31116     43 87 44 87 
3111a     43 87 43 87 
3111e     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
31122     43 87 43 87 
31126     43 87 45 87 
3112a     43 87 43 87 
3112e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
31132     43 87 44 87 
31136     44 87 44 87 
3113a     43 87 43 87 
3113e     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
31142     43 87 42 87 
31146     43 87 43 87 
3114a     44 87 43 87 
3114e     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
31152     54 87 3C 82 
31156     36 83 52 79 
3115a     C6 78 BC 78 
3115e     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
31162     BB 78 BB 78 
31166     BC 78 BC 78 
3116a     BC 78 BC 78 
3116e     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
31172     BD 78 ED 78 
31176     1B 79 F4 83 
3117a     4D 83 4E 87 
3117e     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
31182     44 87 43 87 
31186     42 87 44 87 
3118a     43 87 42 87 
3118e     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
31192     43 87 54 87 
31196     26 82 B3 84 
3119a     D6 77 BB 78 
3119e     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
311a2     BC 78 BB 78 
311a6     BB 78 BB 78 
311aa     BB 78 BB 78 
311ae     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
311b2     BC 78 BC 78 
311b6     26 79 18 75 
311ba     36 83 1F 84 
311be     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
311c2     43 87 43 87 
311c6     43 87 43 87 
311ca     43 87 44 87 
311ce     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
311d2     43 87 44 87 
311d6     44 87 43 87 
311da     43 87 43 87 
311de     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
311e2     43 87 43 87 
311e6     43 87 43 87 
311ea     44 87 44 87 
311ee     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
311f2     44 87 43 87 
311f6     43 87 43 87 
311fa     43 87 44 87 
311fe     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
31202     44 87 44 87 
31206     44 87 43 87 
3120a     44 87 43 87 
3120e     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
31212     43 87 43 87 
31216     43 87 44 87 
3121a     44 87 43 87 
3121e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
31222     43 87 43 87 
31226     43 87 43 87 
3122a     43 87 44 87 
3122e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
31232     43 87 44 87 
31236     43 87 44 87 
3123a     19 87 7D 86 
3123e     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
31242     B1 78 BC 78 
31246     BC 78 BC 78 
3124a     BC 78 BC 78 
3124e     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
31252     BC 78 BC 78 
31256     BD 78 BC 78 
3125a     B7 78 3B 7B 
3125e     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
31262     96 86 44 87 
31266     43 87 43 87 
3126a     43 87 43 87 
3126e     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
31272     44 87 44 87 
31276     43 87 44 87 
3127a     43 87 44 87 
3127e     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
31282     43 87 44 87 
31286     43 87 44 87 
3128a     43 87 44 87 
3128e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
31292     43 87 44 87 
31296     43 87 43 87 
3129a     44 87 43 87 
3129e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
312a2     44 87 44 87 
312a6     43 87 43 87 
312aa     43 87 44 87 
312ae     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
312b2     43 87 43 87 
312b6     43 87 43 87 
312ba     44 87 44 87 
312be     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
312c2     36 83 CF 7A 
312c6     AB 78 BB 78 
312ca     BC 78 BC 78 
312ce     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
312d2     BB 78 BC 78 
312d6     BC 78 BC 78 
312da     BC 78 BC 78 
312de     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
312e2     BC 78 BC 78 
312e6     BC 78 BB 78 
312ea     BC 78 BC 78 
312ee     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
312f2     BB 78 BC 78 
312f6     BB 78 BC 78 
312fa     BC 78 BD 78 
312fe     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
31302     BC 78 BC 78 
31306     BC 78 BC 78 
3130a     BC 78 BD 78 
3130e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
31312     BC 78 BB 78 
31316     BC 78 BB 78 
3131a     BB 78 BC 78 
3131e     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
31322     BC 78 BC 78 
31326     BC 78 BC 78 
3132a     BC 78 BB 78 
3132e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
31332     BC 78 BC 78 
31336     BC 78 BD 78 
3133a     BB 78 BC 78 
3133e     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
31342     BC 78 BC 78 
31346     BC 78 BB 78 
3134a     BC 78 BB 78 
3134e     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
31352     BB 78 BC 78 
31356     BC 78 BC 78 
3135a     BC 78 BB 78 
3135e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
31362     BC 78 BC 78 
31366     BC 78 BB 78 
3136a     BC 78 BB 78 
3136e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
31372     BC 78 BC 78 
31376     BC 78 BC 78 
3137a     BB 78 BC 78 
3137e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
31382     BC 78 9F 78 
31386     52 79 B3 84 
3138a     2F 86 60 87 
3138e     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
31392     44 87 43 87 
31396     43 87 43 87 
3139a     43 87 43 87 
3139e     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
313a2     43 87 43 87 
313a6     43 87 44 87 
313aa     43 87 43 87 
313ae     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
313b2     43 87 43 87 
313b6     43 87 43 87 
313ba     43 87 44 87 
313be     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
313c2     44 87 44 87 
313c6     5E 87 BC 80 
313ca     FB 80 94 78 
313ce     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
313d2     BD 78 BC 78 
313d6     BB 78 BC 78 
313da     BB 78 BB 78 
313de     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
313e2     BC 78 BB 78 
313e6     BB 78 6B 79 
313ea     D6 77 AC 87 
313ee     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
313f2     43 87 44 87 
313f6     43 87 43 87 
313fa     44 87 43 87 
313fe     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
31402     43 87 44 87 
31406     43 87 5C 87 
3140a     E7 80 00 80 
3140e     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
31412     BC 78 BD 78 
31416     BC 78 BC 78 
3141a     BC 78 BB 78 
3141e     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
31422     BC 78 BC 78 
31426     BB 78 BC 78 
3142a     BB 78 BC 78 
3142e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
31432     BB 78 BC 78 
31436     BC 78 BC 78 
3143a     BC 78 BC 78 
3143e     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
31442     BC 78 BC 78 
31446     BC 78 BC 78 
3144a     A0 78 8D 7B 
3144e     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
31452     60 87 43 87 
31456     44 87 44 87 
3145a     43 87 43 87 
3145e     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
31462     44 87 43 87 
31466     43 87 43 87 
3146a     44 87 73 86 
3146e     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
31472     51 7B B6 78 
31476     BC 78 BD 78 
3147a     BC 78 BC 78 
3147e     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
31482     BB 78 BC 78 
31486     BD 78 BB 78 
3148a     BC 78 BB 78 
3148e     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
31492     BC 78 BC 78 
31496     BC 78 BC 78 
3149a     BB 78 BC 78 
3149e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
314a2     BC 78 BB 78 
314a6     BB 78 BC 78 
314aa     BC 78 BB 78 
314ae     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
314b2     22 8C AF 84 
314b6     48 87 43 87 
314ba     44 87 43 87 
314be     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
314c2     43 87 42 87 
314c6     43 87 43 87 
314ca     44 87 43 87 
314ce     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
314d2     43 87 43 87 
314d6     44 87 44 87 
314da     43 87 43 87 
314de     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
314e2     43 87 43 87 
314e6     43 87 43 87 
314ea     44 87 43 87 
314ee     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
314f2     9F 8B D6 77 
314f6     16 7C B3 78 
314fa     BC 78 BB 78 
314fe     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
31502     BB 78 BC 78 
31506     BB 78 BC 78 
3150a     BC 78 BC 78 
3150e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
31512     BC 78 BB 78 
31516     BB 78 BC 78 
3151a     BB 78 BC 78 
3151e     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
31522     BB 78 BB 78 
31526     BC 78 BC 78 
3152a     BC 78 BB 78 
3152e     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
31532     BC 78 BC 78 
31536     BC 78 BD 78 
3153a     BB 78 BC 78 
3153e     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
31542     BC 78 BC 78 
31546     BC 78 BB 78 
3154a     BC 78 BC 78 
3154e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
31552     A8 78 54 7E 
31556     F4 83 17 82 
3155a     50 87 43 87 
3155e     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
31562     44 87 43 87 
31566     44 87 43 87 
3156a     43 87 44 87 
3156e     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
31572     43 87 28 87 
31576     20 85 CF 7A 
3157a     70 7D AD 78 
3157e     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
31582     BB 78 BC 78 
31586     BC 78 BC 78 
3158a     BB 78 BB 78 
3158e     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
31592     BB 78 B2 78 
31596     9A 7C CF 7A 
3159a     4A 87 0D 87 
3159e     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
315a2     43 87 44 87 
315a6     43 87 44 87 
315aa     43 87 43 87 
315ae     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
315b2     44 87 43 87 
315b6     28 87 51 85 
315ba     11 7A 1E 7D 
315be     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
315c2     BC 78 BB 78 
315c6     BC 78 BC 78 
315ca     BC 78 BC 78 
315ce     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
315d2     BB 78 BC 78 
315d6     BB 78 BC 78 
315da     BC 78 BC 78 
315de     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
315e2     BB 78 BC 78 
315e6     BC 78 BC 78 
315ea     BD 78 BB 78 
315ee     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
315f2     BC 78 BB 78 
315f6     BC 78 BC 78 
315fa     BC 78 BB 78 
315fe     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
31602     BC 78 BC 78 
31606     BC 78 BC 78 
3160a     BB 78 BC 78 
3160e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
31612     BC 78 BD 78 
31616     BC 78 BC 78 
3161a     BC 78 BB 78 
3161e     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
31622     BC 78 BB 78 
31626     BB 78 BC 78 
3162a     BC 78 BB 78 
3162e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
31632     BB 78 BB 78 
31636     BB 78 BC 78 
3163a     B6 78 48 7D 
3163e     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
31642     56 87 43 87 
31646     42 87 44 87 
3164a     44 87 43 87 
3164e     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
31652     43 87 44 87 
31656     43 87 44 87 
3165a     4C 87 7E 83 
3165e     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
31662     F7 78 BC 78 
31666     BC 78 BB 78 
3166a     BB 78 BC 78 
3166e     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
31672     BC 78 BB 78 
31676     BC 78 BC 78 
3167a     BB 78 BC 78 
3167e     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
31682     BB 78 BC 78 
31686     BC 78 BC 78 
3168a     BC 78 BB 78 
3168e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
31692     BC 78 BC 78 
31696     BC 78 BC 78 
3169a     BC 78 BB 78 
3169e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
316a2     BC 78 BB 78 
316a6     BB 78 BC 78 
316aa     BC 78 BB 78 
316ae     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
316b2     BC 78 BC 78 
316b6     BB 78 BC 78 
316ba     BC 78 BC 78 
316be     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
316c2     73 32 00 04 
316c6     00 00 10 00 
316ca     00 00 00 00 
316ce     00 00 00 00 | atari12 file "atari12.s2"
316d2     00 6D 00 6D 
316d6     00 6D 00 6D 
316da     00 6D 00 6D 
316de     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
316e2     00 6D 00 6D 
316e6     00 6D 00 6D 
316ea     00 6D 00 6D 
316ee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
316f2     00 6D 00 6D 
316f6     00 6D 00 6D 
316fa     00 6D 00 6D 
316fe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31702     00 6D 00 6D 
31706     00 6D 00 6D 
3170a     00 6D 00 6D 
3170e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31712     00 6D 00 6D 
31716     00 6D 00 6D 
3171a     00 6D 00 6D 
3171e     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
31722     00 6C 00 6C 
31726     00 6C 00 6C 
3172a     00 6C 00 6C 
3172e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
31732     00 6C 00 6C 
31736     00 6C 00 6C 
3173a     00 6C 00 6C 
3173e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
31742     00 6C 00 6C 
31746     00 6C 00 6C 
3174a     00 6C 00 6C 
3174e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
31752     00 6C 00 6C 
31756     00 6C 00 6C 
3175a     00 6C 00 6C 
3175e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
31762     00 6C 00 6C 
31766     00 6C 00 6C 
3176a     00 6C 00 6C 
3176e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
31772     00 6C 00 6C 
31776     00 6C 00 6C 
3177a     00 6C 00 6C 
3177e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
31782     00 6C 00 6C 
31786     00 6C 00 6C 
3178a     00 6C 00 6C 
3178e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
31792     00 6C 00 6C 
31796     00 6C 00 6C 
3179a     00 6C 00 6C 
3179e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
317a2     00 6C 00 6C 
317a6     00 6C 00 6C 
317aa     00 6C 00 6C 
317ae     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
317b2     00 6C 00 6C 
317b6     00 6C 00 6C 
317ba     00 6C 00 6C 
317be     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
317c2     00 6C 00 6C 
317c6     00 6C 00 6C 
317ca     00 6C 00 6C 
317ce     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
317d2     00 6C 00 6B 
317d6     00 6B 00 6B 
317da     00 6B 00 6B 
317de     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
317e2     00 6B 00 6B 
317e6     00 6B 00 6B 
317ea     00 6B 00 6B 
317ee     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
317f2     00 6B 00 6B 
317f6     00 6B 00 6B 
317fa     00 6B 00 6B 
317fe     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
31802     00 6B 00 6B 
31806     00 6B 00 6B 
3180a     00 6B 00 6B 
3180e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
31812     00 6B 00 6B 
31816     00 6B 00 6B 
3181a     00 6B 00 6B 
3181e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
31822     00 6B 00 6B 
31826     00 6B 00 6B 
3182a     00 6B 00 6B 
3182e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
31832     00 6B 00 6B 
31836     00 6B 00 6B 
3183a     00 6B 00 6B 
3183e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
31842     00 6B 00 6B 
31846     00 6B 00 6B 
3184a     00 6B 00 6B 
3184e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
31852     00 6B 00 6B 
31856     00 6B 00 6B 
3185a     00 6B 00 6B 
3185e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
31862     00 6B 00 6B 
31866     00 6B 00 6B 
3186a     00 6A 00 9D 
3186e     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
31872     00 9E 00 9E 
31876     00 9E 00 9E 
3187a     00 9E 00 9E 
3187e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
31882     00 9E 00 9E 
31886     00 9E 00 9E 
3188a     00 9E 00 9E 
3188e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
31892     00 9E 00 9E 
31896     00 9E 00 9E 
3189a     00 9E 00 9E 
3189e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
318a2     00 9E 00 9E 
318a6     00 9E 00 9E 
318aa     00 9E 00 9E 
318ae     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
318b2     00 9E 00 9E 
318b6     00 9E 00 9E 
318ba     00 9E 00 9E 
318be     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
318c2     00 9E 00 9E 
318c6     00 9E 00 9E 
318ca     00 9E 00 9E 
318ce     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
318d2     00 9E 00 9E 
318d6     00 9E 00 9E 
318da     00 9E 00 9E 
318de     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
318e2     00 9E 00 9E 
318e6     00 9E 00 9E 
318ea     00 9E 00 9E 
318ee     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
318f2     00 9E 00 9E 
318f6     00 9E 00 9E 
318fa     00 9E 00 9E 
318fe     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
31902     00 9F 00 9F 
31906     00 9F 00 9F 
3190a     00 9F 00 9F 
3190e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31912     00 9F 00 9F 
31916     00 9F 00 9F 
3191a     00 9F 00 9F 
3191e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31922     00 9F 00 9F 
31926     00 9F 00 9F 
3192a     00 9F 00 9F 
3192e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31932     00 9F 00 9F 
31936     00 9F 00 9F 
3193a     00 9F 00 9F 
3193e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31942     00 9F 00 9F 
31946     00 9F 00 9F 
3194a     00 9F 00 9F 
3194e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31952     00 9F 00 9F 
31956     00 9F 00 9F 
3195a     00 9F 00 9F 
3195e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31962     00 9F 00 9F 
31966     00 9F 00 9F 
3196a     00 9F 00 9F 
3196e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31972     00 9F 00 9F 
31976     00 9F 00 9F 
3197a     00 9F 00 9F 
3197e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31982     00 9F 00 9F 
31986     00 9F 00 9F 
3198a     00 9F 00 9F 
3198e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
31992     00 9F 00 9F 
31996     00 9F 00 9F 
3199a     00 9F 00 9F 
3199e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
319a2     00 9F 00 9F 
319a6     00 9F 00 9F 
319aa     00 9F 00 9F 
319ae     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
319b2     00 9F 00 9F 
319b6     00 9F 00 9F 
319ba     00 9F 00 9F 
319be     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
319c2     00 9F 00 9F 
319c6     00 9F 00 A0 
319ca     00 A0 00 A0 
319ce     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
319d2     00 A0 00 A0 
319d6     00 A0 00 A0 
319da     00 A0 00 A0 
319de     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
319e2     00 A0 00 A0 
319e6     00 A0 00 A0 
319ea     00 A0 00 A0 
319ee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
319f2     00 A0 00 A0 
319f6     00 A0 00 A0 
319fa     00 A0 00 A0 
319fe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a02     00 A0 00 A0 
31a06     00 A0 00 A0 
31a0a     00 A0 00 A0 
31a0e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a12     00 A0 00 A0 
31a16     00 A0 00 A0 
31a1a     00 A0 00 A0 
31a1e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a22     00 A0 00 A0 
31a26     00 A0 00 A0 
31a2a     00 A0 00 A0 
31a2e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a32     00 A0 00 A0 
31a36     00 A0 00 A0 
31a3a     00 A0 00 A0 
31a3e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a42     00 A0 00 A0 
31a46     00 A0 00 A0 
31a4a     00 A0 00 A0 
31a4e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a52     00 A0 00 A0 
31a56     00 A0 00 A0 
31a5a     00 A0 00 A0 
31a5e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a62     00 A0 00 A0 
31a66     00 A0 00 A0 
31a6a     00 A0 00 A0 
31a6e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a72     00 A0 00 A0 
31a76     00 A0 00 A0 
31a7a     00 A0 00 A0 
31a7e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31a82     00 A0 00 A0 
31a86     00 A0 00 A0 
31a8a     00 A0 00 A0 
31a8e     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
31a92     00 6D 00 6D 
31a96     00 6D 00 6D 
31a9a     00 6D 00 6D 
31a9e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31aa2     00 6D 00 6D 
31aa6     00 6D 00 6D 
31aaa     00 6D 00 6D 
31aae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31ab2     00 6D 00 6D 
31ab6     00 6D 00 6D 
31aba     00 6D 00 6D 
31abe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31ac2     00 6D 00 6D 
31ac6     00 6D 00 6D 
31aca     00 6D 00 6D 
31ace     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31ad2     00 6D 00 6D 
31ad6     00 6D 00 6D 
31ada     00 6D 00 6D 
31ade     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31ae2     00 6D 00 6D 
31ae6     00 6D 00 6D 
31aea     00 6D 00 6D 
31aee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31af2     00 6D 00 6D 
31af6     00 6D 00 6D 
31afa     00 6D 00 6D 
31afe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31b02     00 6D 00 6D 
31b06     00 6D 00 6D 
31b0a     00 6D 00 6D 
31b0e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31b12     00 6D 00 6D 
31b16     00 A0 00 A0 
31b1a     00 A0 00 A0 
31b1e     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31b22     00 A0 00 A0 
31b26     00 A0 00 A0 
31b2a     00 A0 00 A0 
31b2e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31b32     00 A0 00 A0 
31b36     00 A0 00 A0 
31b3a     00 A0 00 A0 
31b3e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31b42     00 A0 00 A0 
31b46     00 A0 00 A0 
31b4a     00 A0 00 A0 
31b4e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31b52     00 A0 00 A0 
31b56     00 A0 00 A0 
31b5a     00 A0 00 A0 
31b5e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31b62     00 A0 00 A0 
31b66     00 A0 00 A0 
31b6a     00 A0 00 A0 
31b6e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31b72     00 A0 00 A0 
31b76     00 A0 00 A0 
31b7a     00 A0 00 A0 
31b7e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31b82     00 A0 00 A0 
31b86     00 A0 00 A0 
31b8a     00 A0 00 A0 
31b8e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31b92     00 A0 00 A0 
31b96     00 A0 00 A0 
31b9a     00 A0 00 A0 
31b9e     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
31ba2     00 6D 00 6D 
31ba6     00 6D 00 6D 
31baa     00 6D 00 6D 
31bae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31bb2     00 6D 00 6D 
31bb6     00 6D 00 6D 
31bba     00 6D 00 6D 
31bbe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31bc2     00 6D 00 6D 
31bc6     00 6D 00 6D 
31bca     00 6D 00 6D 
31bce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31bd2     00 6D 00 6D 
31bd6     00 6D 00 6D 
31bda     00 6D 00 6D 
31bde     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31be2     00 6D 00 6D 
31be6     00 6D 00 6D 
31bea     00 6D 00 6D 
31bee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31bf2     00 6D 00 6D 
31bf6     00 6D 00 6D 
31bfa     00 6D 00 6D 
31bfe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31c02     00 6D 00 6D 
31c06     00 6D 00 6D 
31c0a     00 6D 00 6D 
31c0e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31c12     00 6D 00 6D 
31c16     00 6D 00 6D 
31c1a     00 6D 00 6D 
31c1e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31c22     00 6D 00 6D 
31c26     00 6C 00 A0 
31c2a     00 9F 00 A0 
31c2e     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
31c32     00 A0 00 A0 
31c36     00 A0 00 A0 
31c3a     00 A0 00 A0 
31c3e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31c42     00 A0 00 A0 
31c46     00 A0 00 A0 
31c4a     00 A0 00 A0 
31c4e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31c52     00 A0 00 A0 
31c56     00 A0 00 A0 
31c5a     00 A0 00 A0 
31c5e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31c62     00 A0 00 A0 
31c66     00 A0 00 A0 
31c6a     00 A0 00 A0 
31c6e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31c72     00 A0 00 A0 
31c76     00 A0 00 A0 
31c7a     00 A0 00 A0 
31c7e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31c82     00 A0 00 A0 
31c86     00 A0 00 A0 
31c8a     00 A0 00 A0 
31c8e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31c92     00 A0 00 A0 
31c96     00 A0 00 A0 
31c9a     00 A0 00 A0 
31c9e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31ca2     00 A0 00 A0 
31ca6     00 A0 00 A0 
31caa     00 A0 00 A0 
31cae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31cb2     00 A0 00 A0 
31cb6     00 A0 00 A0 
31cba     00 A0 00 A0 
31cbe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31cc2     00 A0 00 A0 
31cc6     00 A0 00 A0 
31cca     00 A0 00 A0 
31cce     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31cd2     00 A0 00 A0 
31cd6     00 A0 00 A0 
31cda     00 A0 00 A0 
31cde     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
31ce2     00 A1 00 A1 
31ce6     00 A1 00 A1 
31cea     00 A1 00 A1 
31cee     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
31cf2     00 A1 00 A1 
31cf6     00 A1 00 A1 
31cfa     00 A1 00 A1 
31cfe     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
31d02     00 A1 00 A1 
31d06     00 A1 00 A1 
31d0a     00 A1 00 A1 
31d0e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
31d12     00 A1 00 A1 
31d16     00 A1 00 A1 
31d1a     00 A1 00 A1 
31d1e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
31d22     00 A1 00 A1 
31d26     00 A1 00 A1 
31d2a     00 A1 00 A1 
31d2e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
31d32     00 A1 00 A1 
31d36     00 A1 00 A1 
31d3a     00 6E 00 6E 
31d3e     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
31d42     00 6E 00 6E 
31d46     00 6E 00 6E 
31d4a     00 6E 00 6E 
31d4e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
31d52     00 6E 00 6E 
31d56     00 6E 00 6E 
31d5a     00 6E 00 6E 
31d5e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
31d62     00 6E 00 6E 
31d66     00 6E 00 6E 
31d6a     00 6E 00 6E 
31d6e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
31d72     00 6E 00 6D 
31d76     00 6D 00 6D 
31d7a     00 6D 00 6D 
31d7e     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31d82     00 6D 00 6D 
31d86     00 6D 00 6D 
31d8a     00 6D 00 6D 
31d8e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31d92     00 6D 00 6D 
31d96     00 6D 00 6D 
31d9a     00 6D 00 6D 
31d9e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31da2     00 6D 00 6D 
31da6     00 6D 00 6D 
31daa     00 6D 00 6D 
31dae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31db2     00 6D 00 6D 
31db6     00 6D 00 6D 
31dba     00 6D 00 6D 
31dbe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31dc2     00 6D 00 6D 
31dc6     00 6D 00 6D 
31dca     00 6D 00 6D 
31dce     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31dd2     00 6D 00 6D 
31dd6     00 6D 00 6D 
31dda     00 6D 00 6D 
31dde     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31de2     00 6D 00 6D 
31de6     00 6D 00 6D 
31dea     00 6D 00 6D 
31dee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31df2     00 6D 00 6D 
31df6     00 6D 00 6D 
31dfa     00 6D 00 6D 
31dfe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31e02     00 6D 00 6D 
31e06     00 6D 00 6D 
31e0a     00 6D 00 6D 
31e0e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31e12     00 6D 00 6D 
31e16     00 6D 00 6D 
31e1a     00 6D 00 6D 
31e1e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
31e22     00 6D 00 6D 
31e26     00 6C 00 6C 
31e2a     00 6C 00 6C 
31e2e     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
31e32     00 6C 00 6C 
31e36     00 6C 00 6C 
31e3a     00 6C 00 6C 
31e3e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
31e42     00 6C 00 6C 
31e46     00 6C 00 6C 
31e4a     00 9D 00 9F 
31e4e     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
31e52     00 9F 00 9F 
31e56     00 9F 00 9F 
31e5a     00 A0 00 A0 
31e5e     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31e62     00 A0 00 A0 
31e66     00 A0 00 A0 
31e6a     00 A0 00 A0 
31e6e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31e72     00 A0 00 A0 
31e76     00 A0 00 A0 
31e7a     00 A0 00 A0 
31e7e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31e82     00 A0 00 A0 
31e86     00 A0 00 A0 
31e8a     00 A0 00 A0 
31e8e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31e92     00 A0 00 A0 
31e96     00 A0 00 A0 
31e9a     00 A0 00 A0 
31e9e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31ea2     00 A0 00 A0 
31ea6     00 A0 00 A0 
31eaa     00 A0 00 A0 
31eae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31eb2     00 A0 00 A0 
31eb6     00 A0 00 A0 
31eba     00 A0 00 A0 
31ebe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31ec2     00 A0 00 A0 
31ec6     00 A0 00 A0 
31eca     00 A0 00 A0 
31ece     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
31ed2                 | 
31ed2     00 00       |              	org
31ed4 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
31ed8 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
31edc 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
31ee0 003             | 
31ee0 003 00 30 04 F6 |                 mov     psramaddr,#0
31ee4 004             | 
31ee4 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
31ee8 005 20 00 00 FF 
31eec 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
31ef0 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
31ef4 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
31ef8 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
31efc 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
31f00 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
31f04 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
31f08 00d             | 
31f08 00d 20 00 00 FF 
31f0c 00e 00 30 04 F1 |                 add 	psramaddr,##16384
31f10 00f E0 03 00 FF 
31f14 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
31f18 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
31f1c 012             | 
31f1c 012             |                 
31f1c 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
31f20 013             |     
31f20 013 01 2C 60 FD |                 cogid 	t11				' get id
31f24 014 00 00 EC FC |                 coginit #0,#0				' start the new program
31f28 015 03 2C 60 FD |                 cogstop t11				' stop the loader
31f2c 016             | 
31f2c 016 00 00 00 00 | t11 		long 	0
31f30 017 00 FF 07 00 | mailbox 	long 	$7FF00
31f34 018 00 00 00 00 | psramaddr 	long 	0
31f38 019 00 00 00 00 | pslockval	long 	0
31f3c 01a 00 00 00 00 | cmd             long    0
31f40 01b 00 00 00 00 | buf1            long    0
31f44 01c 00 40 00 00 | buf2            long    16384
31f48 01d 4C 1F 03 00 | 	long	@@@_dat_ + 12624
31f4c 01e 50 32 20 52 
31f50 01f 65 74 72 6F 
31f54 020 6D 61 63 68 
31f58 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
31f5c 022 42 41 53 49 
31f60 023 43 20 76 65 
31f64 024 72 73 69 6F 
31f68 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
31f6c 026 32 39 00 00 | 	byte	$32, $39, $00, $00
31f70 027             | 	alignl
31f70 027             | _hg010b_spin2_dat_
31f70 027             | 
31f70 027 00 00 00 00 
31f74 028 00 00 00 00 
31f78 029 00 00 00 00 
31f7c 02a 00 00 00 00 
31f80 02b 00 00 00    | vga_font       file "vgafont.def"
31f83 02b 7E 81 A5 81 
31f87 02c 81 BD 99 81 
31f8b 02d 81 7E 00 00 
31f8f 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
31f93 02f 7E FF DB FF 
31f97 030 FF C3 E7 FF 
31f9b 031 FF 7E 00 00 
31f9f 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
31fa3 033 00 36 7F 7F 
31fa7 034 7F 7F 3E 1C 
31fab 035 08 00 00 00 
31faf 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
31fb3 037 00 08 1C 3E 
31fb7 038 7F 3E 1C 08 
31fbb 039 00 00 00 00 
31fbf 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
31fc3 03b 18 3C 3C E7 
31fc7 03c E7 E7 18 18 
31fcb 03d 3C 00 00 00 
31fcf 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
31fd3 03f 18 3C 7E FF 
31fd7 040 FF 7E 18 18 
31fdb 041 3C 00 00 00 
31fdf 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
31fe3 043 00 00 00 18 
31fe7 044 3C 3C 18 00 
31feb 045 00 00 00 00 
31fef 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
31ff3 047 FF FF FF E7 
31ff7 048 C3 C3 E7 FF 
31ffb 049 FF FF FF FF 
31fff 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
32003 04b 00 00 3C 66 
32007 04c 42 42 66 3C 
3200b 04d 00 00 00 00 
3200f 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
32013 04f FF FF C3 99 
32017 050 BD BD 99 C3 
3201b 051 FF FF FF FF 
3201f 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
32023 053 78 70 58 4C 
32027 054 1E 33 33 33 
3202b 055 33 1E 00 00 
3202f 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
32033 057 3C 66 66 66 
32037 058 66 3C 18 7E 
3203b 059 18 18 00 00 
3203f 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
32043 05b FC CC FC 0C 
32047 05c 0C 0C 0C 0E 
3204b 05d 0F 07 00 00 
3204f 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
32053 05f FE C6 FE C6 
32057 060 C6 C6 C6 E6 
3205b 061 E7 67 03 00 
3205f 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
32063 063 18 18 DB 3C 
32067 064 E7 3C DB 18 
3206b 065 18 00 00 00 
3206f 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
32073 067 03 07 0F 1F 
32077 068 7F 1F 0F 07 
3207b 069 03 01 00 00 
3207f 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
32083 06b 60 70 78 7C 
32087 06c 7F 7C 78 70 
3208b 06d 60 40 00 00 
3208f 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
32093 06f 18 3C 7E 18 
32097 070 18 18 7E 3C 
3209b 071 18 00 00 00 
3209f 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
320a3 073 66 66 66 66 
320a7 074 66 66 66    | 	byte	$66[7]
320aa 075 00 66 66 00 
320ae 076 00 00 00 00 
320b2 077 00 FE DB DB 
320b6 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
320ba 079 D8 D8 D8 00 
320be 07a 00 00 00 3E 
320c2 07b 63 06 1C 36 
320c6 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
320ca 07d 30 63 3E 00 
320ce 07e 00 00 00 00 
320d2 07f 00 00 00 00 
320d6 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
320da 081 7F 7F 7F 00 
320de 082 00 00 00 00 
320e2 083 00 18 3C 7E 
320e6 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
320ea 085 3C 18 7E 00 
320ee 086 00 00 00 00 
320f2 087 00 18 3C 7E 
320f6 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
320fa 089 18 18 18 00 
320fe 08a 00 00 00 00 
32102 08b 00 18 18 18 
32106 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3210a 08d 7E 3C 18 00 
3210e 08e 00 00 00 00 
32112 08f 00 00 00 18 
32116 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
3211a 091 00 00 00 00 
3211e 092 00 00 00 00 
32122 093 00 00 00    | 	byte	$00[11]
32125 094 0C 06 7F 06 
32129 095 0C 00 00 00 
3212d 096 00 00 00 00 
32131 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32135 098 00 03 03 03 
32139 099 7F 00 00 00 
3213d 09a 00 00 00 00 
32141 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32145 09c 14 36 7F 36 
32149 09d 14 00 00 00 
3214d 09e 00 00 00 00 
32151 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
32155 0a0 1C 1C 3E 3E 
32159 0a1 7F 7F 00 00 
3215d 0a2 00 00 00 00 
32161 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
32165 0a4 7F 3E 3E 1C 
32169 0a5 1C 08 00 00 
3216d 0a6 00 00 00 00 
32171 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32175 0a8 00 00 00 00 
32179 0a9 00 00 00 00 
3217d 0aa 00 00 00 00 
32181 0ab 00 00       | 	byte	$00[14]
32183 0ab 18 3C 3C 3C 
32187 0ac 18 18 18 00 
3218b 0ad 18 18 00 00 
3218f 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
32193 0af 66 24 00 00 
32197 0b0 00 00 00 00 
3219b 0b1 00 00 00 00 
3219f 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
321a3 0b3 00 36 36 7F 
321a7 0b4 36 36 36 7F 
321ab 0b5 36 36 00 00 
321af 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
321b3 0b7 3E 63 43 03 
321b7 0b8 3E 60 60 61 
321bb 0b9 63 3E 18 18 
321bf 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
321c3 0bb 00 00 43 63 
321c7 0bc 30 18 0C 06 
321cb 0bd 63 61 00 00 
321cf 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
321d3 0bf 1C 36 36 1C 
321d7 0c0 6E 3B 33 33 
321db 0c1 33 6E 00 00 
321df 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
321e3 0c3 0C 0C 0C 06 
321e7 0c4 00 00 00 00 
321eb 0c5 00 00 00 00 
321ef 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
321f3 0c7 30 18 0C 0C 
321f7 0c8 0C 0C 0C 0C 
321fb 0c9 18 30 00 00 
321ff 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
32203 0cb 0C 18 30 30 
32207 0cc 30 30 30 30 
3220b 0cd 18 0C 00 00 
3220f 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
32213 0cf 00 00 00 66 
32217 0d0 3C FF 3C 66 
3221b 0d1 00 00 00 00 
3221f 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
32223 0d3 00 00 00 18 
32227 0d4 18 7E 18 18 
3222b 0d5 00 00 00 00 
3222f 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
32233 0d7 00 00 00 00 
32237 0d8 00 00 00 00 | 	byte	$00[8]
3223b 0d9 18 18 18 0C 
3223f 0da 00 00 00 00 
32243 0db 00 00 00 00 
32247 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
3224b 0dd 00 00 00 00 
3224f 0de 00 00 00 00 
32253 0df 00 00 00 00 
32257 0e0 00 00 00 00 | 	byte	$00[16]
3225b 0e1 18 18 00 00 
3225f 0e2 00 00 00 00 
32263 0e3 00 00 40 60 
32267 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
3226b 0e5 03 01 00 00 
3226f 0e6 00 00 00 00 
32273 0e7 1C 36 63 63 
32277 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3227b 0e9 36 1C 00 00 
3227f 0ea 00 00 00 00 
32283 0eb 18 1C 1E 18 
32287 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
3228b 0ed 18 7E 00 00 
3228f 0ee 00 00 00 00 
32293 0ef 3E 63 60 30 
32297 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
3229b 0f1 63 7F 00 00 
3229f 0f2 00 00 00 00 
322a3 0f3 3E 63 60 60 
322a7 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
322ab 0f5 63 3E 00 00 
322af 0f6 00 00 00 00 
322b3 0f7 30 38 3C 36 
322b7 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
322bb 0f9 30 78 00 00 
322bf 0fa 00 00 00 00 
322c3 0fb 7F 03 03 03 
322c7 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
322cb 0fd 63 3E 00 00 
322cf 0fe 00 00 00 00 
322d3 0ff 1C 06 03 03 
322d7 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
322db 101 63 3E 00 00 
322df 102 00 00 00 00 
322e3 103 7F 63 60 60 
322e7 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
322eb 105 0C 0C 00 00 
322ef 106 00 00 00 00 
322f3 107 3E 63 63 63 
322f7 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
322fb 109 63 3E 00 00 
322ff 10a 00 00 00 00 
32303 10b 3E 63 63 63 
32307 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
3230b 10d 30 1E 00 00 
3230f 10e 00 00 00 00 
32313 10f 00 00 00 18 
32317 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3231b 111 18 18 00 00 
3231f 112 00 00 00 00 
32323 113 00 00 00 18 
32327 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3232b 115 18 18 0C 00 
3232f 116 00 00 00 00 
32333 117 00 60 30 18 
32337 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
3233b 119 30 60 00 00 
3233f 11a 00 00 00 00 
32343 11b 00 00 00 7E 
32347 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
3234b 11d 00 00 00 00 
3234f 11e 00 00 00 00 
32353 11f 00          | 	byte	$00[9]
32354 120 06 0C 18 30 
32358 121 60 30 18 0C 
3235c 122 06 00 00 00 
32360 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
32364 124 63 63 30 18 
32368 125 18 18 00 18 
3236c 126 18 00 00 00 
32370 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
32374 128 3E 63 63 7B 
32378 129 7B 7B 3B 03 
3237c 12a 3E 00 00 00 
32380 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
32384 12c 1C 36 63 63 
32388 12d 7F 63 63 63 
3238c 12e 63 00 00 00 
32390 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
32394 130 66 66 66 3E 
32398 131 66 66 66 66 
3239c 132 3F 00 00 00 
323a0 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
323a4 134 66 43 03 03 
323a8 135 03 03 43 66 
323ac 136 3C 00 00 00 
323b0 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
323b4 138 36 66 66 66 
323b8 139 66 66 66 36 
323bc 13a 1F 00 00 00 
323c0 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
323c4 13c 66 46 16 1E 
323c8 13d 16 06 46 66 
323cc 13e 7F 00 00 00 
323d0 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
323d4 140 66 46 16 1E 
323d8 141 16 06 06 06 
323dc 142 0F 00 00 00 
323e0 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
323e4 144 66 43 03 03 
323e8 145 7B 63 63 66 
323ec 146 5C 00 00 00 
323f0 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
323f4 148 63 63 63 7F 
323f8 149 63 63 63 63 
323fc 14a 63 00 00 00 
32400 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
32404 14c 18 18 18 18 
32408 14d 18 18 18 18 | 	byte	$18[8]
3240c 14e 3C 00 00 00 
32410 14f 00 00 00 78 
32414 150 30 30 30 30 
32418 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
3241c 152 1E 00 00 00 
32420 153 00 00 00 67 
32424 154 66 66 36 1E 
32428 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
3242c 156 67 00 00 00 
32430 157 00 00 00 0F 
32434 158 06 06 06 06 
32438 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3243c 15a 7F 00 00 00 
32440 15b 00 00 00 63 
32444 15c 77 7F 7F 6B 
32448 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
3244c 15e 63 00 00 00 
32450 15f 00 00 00 63 
32454 160 67 6F 7F 7B 
32458 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
3245c 162 63 00 00 00 
32460 163 00 00 00 3E 
32464 164 63 63 63 63 
32468 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3246c 166 3E 00 00 00 
32470 167 00 00 00 3F 
32474 168 66 66 66 3E 
32478 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
3247c 16a 0F 00 00 00 
32480 16b 00 00 00 3E 
32484 16c 63 63 63 63 
32488 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
3248c 16e 3E 30 70 00 
32490 16f 00 00 00 3F 
32494 170 66 66 66 3E 
32498 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
3249c 172 67 00 00 00 
324a0 173 00 00 00 3E 
324a4 174 63 63 06 1C 
324a8 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
324ac 176 3E 00 00 00 
324b0 177 00 00 00 7E 
324b4 178 7E 5A 18 18 
324b8 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
324bc 17a 3C 00 00 00 
324c0 17b 00 00 00 63 
324c4 17c 63 63 63 63 
324c8 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
324cc 17e 3E 00 00 00 
324d0 17f 00 00 00 63 
324d4 180 63 63 63 63 
324d8 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
324dc 182 08 00 00 00 
324e0 183 00 00 00 63 
324e4 184 63 63 63 6B 
324e8 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
324ec 186 36 00 00 00 
324f0 187 00 00 00 63 
324f4 188 63 36 3E 1C 
324f8 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
324fc 18a 63 00 00 00 
32500 18b 00 00 00 66 
32504 18c 66 66 66 3C 
32508 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
3250c 18e 3C 00 00 00 
32510 18f 00 00 00 7F 
32514 190 63 61 30 18 
32518 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3251c 192 7F 00 00 00 
32520 193 00 00 00 3C 
32524 194 0C 0C 0C 0C 
32528 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3252c 196 3C 00 00 00 
32530 197 00 00 00 00 
32534 198 01 03 07 0E 
32538 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
3253c 19a 40 00 00 00 
32540 19b 00 00 00 3C 
32544 19c 30 30 30 30 
32548 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
3254c 19e 3C 00 00 00 
32550 19f 1C 36 00 00 
32554 1a0 00 00 00 00 
32558 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3255c 1a2 00 00 00 00 
32560 1a3 00 00 00 00 
32564 1a4 00 00 00 00 
32568 1a5 00 00 00 00 
3256c 1a6 00          | 	byte	$00[17]
3256d 1a6 FF 00 00 0C 
32571 1a7 18 00 00 00 
32575 1a8 00 00 00 00 
32579 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3257d 1aa 00 00 00 00 
32581 1ab 00 00 00 00 
32585 1ac 00          | 	byte	$00[9]
32586 1ac 1E 30 3E 33 
3258a 1ad 33 33 6E 00 
3258e 1ae 00 00 00 00 
32592 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
32596 1b0 1E 36 66 66 
3259a 1b1 66 66 3E 00 
3259e 1b2 00 00 00 00 
325a2 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
325a6 1b4 3E 63 03 03 
325aa 1b5 03 63 3E 00 
325ae 1b6 00 00 00 00 
325b2 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
325b6 1b8 3C 36 33 33 
325ba 1b9 33 33 6E 00 
325be 1ba 00 00 00 00 
325c2 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
325c6 1bc 3E 63 7F 03 
325ca 1bd 03 63 3E 00 
325ce 1be 00 00 00 00 
325d2 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
325d6 1c0 0C 1E 0C 0C 
325da 1c1 0C 0C 1E 00 
325de 1c2 00 00 00 00 
325e2 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
325e6 1c4 6E 33 33 33 
325ea 1c5 33 33 3E 30 
325ee 1c6 33 1E 00 00 
325f2 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
325f6 1c8 36 6E 66 66 
325fa 1c9 66 66 67 00 
325fe 1ca 00 00 00 00 
32602 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
32606 1cc 1C 18 18 18 
3260a 1cd 18 18 3C 00 
3260e 1ce 00 00 00 00 
32612 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
32616 1d0 70 60 60 60 
3261a 1d1 60 60 60 66 
3261e 1d2 66 3C 00 00 
32622 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
32626 1d4 66 36 1E 1E 
3262a 1d5 36 66 67 00 
3262e 1d6 00 00 00 00 
32632 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
32636 1d8 18 18 18 18 
3263a 1d9 18 18       | 	byte	$18[6]
3263c 1da 3C 00 00 00 
32640 1db 00 00 00 00 
32644 1dc 00 00 37 7F 
32648 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
3264c 1de 63 00 00 00 
32650 1df 00 00 00 00 
32654 1e0 00 00 3B 66 
32658 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3265c 1e2 66 00 00 00 
32660 1e3 00 00 00 00 
32664 1e4 00 00 3E 63 
32668 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
3266c 1e6 3E 00 00 00 
32670 1e7 00 00 00 00 
32674 1e8 00 00 3B 66 
32678 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3267c 1ea 3E 06 06 0F 
32680 1eb 00 00 00 00 
32684 1ec 00 00 6E 33 
32688 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
3268c 1ee 3E 30 30 78 
32690 1ef 00 00 00 00 
32694 1f0 00 00 3B 6E 
32698 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
3269c 1f2 0F 00 00 00 
326a0 1f3 00 00 00 00 
326a4 1f4 00 00 3E 63 
326a8 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
326ac 1f6 3E 00 00 00 
326b0 1f7 00 00 00 08 
326b4 1f8 0C 0C 3F 0C 
326b8 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
326bc 1fa 38 00 00 00 
326c0 1fb 00 00 00 00 
326c4 1fc 00 00 33 33 
326c8 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
326cc 1fe 6E 00 00 00 
326d0 1ff 00 00 00 00 
326d4 200 00 00 63 63 
326d8 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
326dc 202 1C 00 00 00 
326e0 203 00 00 00 00 
326e4 204 00 00 63 63 
326e8 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
326ec 206 36 00 00 00 
326f0 207 00 00 00 00 
326f4 208 00 00 63 36 
326f8 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
326fc 20a 63 00 00 00 
32700 20b 00 00 00 00 
32704 20c 00 00 63 63 
32708 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
3270c 20e 7E 60 30 1F 
32710 20f 00 00 00 00 
32714 210 00 00 7F 33 
32718 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
3271c 212 7F 00 00 00 
32720 213 00 00 00 70 
32724 214 18 18 18 0E 
32728 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
3272c 216 70 00 00 00 
32730 217 00 00 00 18 
32734 218 18 18 18 18 
32738 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
3273c 21a 18 00 00 00 
32740 21b 00 00 00 0E 
32744 21c 18 18 18 70 
32748 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
3274c 21e 0E 00 00 00 
32750 21f 6E 3B 00 00 
32754 220 00 00 00 00 
32758 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3275c 222 00 00 00 00 
32760 223 00 00 00 00 
32764 224 00 00       | 	byte	$00[10]
32766 224 08 1C 36 63 
3276a 225 63 63 7F 00 
3276e 226 00 00 00 00 
32772 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
32776 228 03 03 03 03 
3277a 229 43 66 3C 18 
3277e 22a 30 1E 00 00 
32782 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
32786 22c 33 33 33 33 
3278a 22d 33 33       | 	byte	$33[6]
3278c 22e 6E 00 00 00 
32790 22f 00 00 60 30 
32794 230 18 00 3E 63 
32798 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
3279c 232 3E 00 00 00 
327a0 233 00 00 08 1C 
327a4 234 36 00 1E 30 
327a8 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
327ac 236 6E 00 00 00 
327b0 237 00 00 00 00 
327b4 238 33 00 1E 30 
327b8 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
327bc 23a 6E 00 00 00 
327c0 23b 00 00 1C 36 
327c4 23c 1C 00 33 33 
327c8 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
327cc 23e 6E 00 00 00 
327d0 23f 00 00 60 30 
327d4 240 18 00 3E 63 
327d8 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
327dc 242 3E 00 00 00 
327e0 243 00 00 00 00 
327e4 244 00 00 3E 63 
327e8 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
327ec 246 3E 18 30 1E 
327f0 247 00 00 00 1C 
327f4 248 58 78 38 18 
327f8 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
327fc 24a 3C 00 00 00 
32800 24b 00 00 00 00 
32804 24c 63 00 3E 63 
32808 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
3280c 24e 3E 00 00 00 
32810 24f 66 33 00 3E 
32814 250 63 63 63 63 
32818 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3281c 252 3E 00 00 00 
32820 253 00 00 CC 66 
32824 254 33 00 3E 63 
32828 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
3282c 256 3E 00 00 00 
32830 257 00 00 18 3C 
32834 258 66 00 1C 18 
32838 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
3283c 25a 3C 00 00 00 
32840 25b 30 18 00 7F 
32844 25c 63 61 30 18 
32848 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3284c 25e 7F 00 00 00 
32850 25f 00 63 00 08 
32854 260 1C 36 63 63 
32858 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
3285c 262 63 00 00 00 
32860 263 30 18 00 3C 
32864 264 66 43 03 03 
32868 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
3286c 266 3C 00 00 00 
32870 267 30 18 00 7F 
32874 268 66 46 16 1E 
32878 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
3287c 26a 7F 00 00 00 
32880 26b 0C 06 00 0F 
32884 26c 06 06 06 06 
32888 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3288c 26e 7F 00 00 00 
32890 26f 30 18 00 1C 
32894 270 18 18 18 18 
32898 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
3289c 272 3C 00 00 00 
328a0 273 00 00 08 1C 
328a4 274 36 00 3E 63 
328a8 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
328ac 276 3E 00 00 00 
328b0 277 00 00 00 00 
328b4 278 63 00 3E 63 
328b8 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
328bc 27a 3E 00 00 00 
328c0 27b 00 00 00 6F 
328c4 27c 46 26 06 06 
328c8 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
328cc 27e 7F 00 00 00 
328d0 27f 00 00 00 6E 
328d4 280 4C 2C 0C 0C 
328d8 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
328dc 282 1E 00 00 00 
328e0 283 30 18 00 3E 
328e4 284 63 63 06 1C 
328e8 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
328ec 286 3E 00 00 00 
328f0 287 00 00 60 30 
328f4 288 18 00 3E 63 
328f8 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
328fc 28a 3E 00 00 00 
32900 28b 00 63 00 3E 
32904 28c 63 63 63 63 
32908 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3290c 28e 3E 00 00 00 
32910 28f 00 63 00 63 
32914 290 63 63 63 63 
32918 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3291c 292 3E 00 00 00 
32920 293 6C 38 00 7E 
32924 294 7E 5A 18 18 
32928 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3292c 296 3C 00 00 00 
32930 297 00 00 60 48 
32934 298 2C 0C 3F 0C 
32938 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3293c 29a 38 00 00 00 
32940 29b 00 00 00 0F 
32944 29c 26 36 1E 0E 
32948 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
3294c 29e 7F 00 00 00 
32950 29f 00 00 00 00 
32954 2a0 00 63 36 1C 
32958 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
3295c 2a2 00 00 00 00 
32960 2a3 00 00       | 	byte	$00[6]
32962 2a3 36 1C 08 00 
32966 2a4 3E 63 03 03 
3296a 2a5 03 63 3E 00 
3296e 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
32972 2a7 30 18 0C 00 
32976 2a8 1E 30 3E 33 
3297a 2a9 33 33 6E 00 
3297e 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
32982 2ab 60 30 18 00 
32986 2ac 1C 18 18 18 
3298a 2ad 18 18 3C 00 
3298e 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
32992 2af 60 30 18 00 
32996 2b0 3E 63 63 63 
3299a 2b1 63 63 3E 00 
3299e 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
329a2 2b3 30 18 0C 00 
329a6 2b4 33 33 33 33 
329aa 2b5 33 33 6E 00 
329ae 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
329b2 2b7 00 08 1C 36 
329b6 2b8 63 63 7F 63 
329ba 2b9 63 63 63 18 
329be 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
329c2 2bb 00 00 00 00 
329c6 2bc 1E 30 3E 33 
329ca 2bd 33 33 6E 18 
329ce 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
329d2 2bf 00 7F 63 61 
329d6 2c0 30 18 0C 06 
329da 2c1 43 63 7F 00 
329de 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
329e2 2c3 36 1C 08 00 
329e6 2c4 7F 33 18 0C 
329ea 2c5 06 63 7F 00 
329ee 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
329f2 2c7 00 7F 66 46 
329f6 2c8 16 1E 16 06 
329fa 2c9 46 66 7F 18 
329fe 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
32a02 2cb 00 00 00 00 
32a06 2cc 3E 63 7F 03 
32a0a 2cd 03 63 3E 18 
32a0e 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
32a12 2cf 00 3C 66 03 
32a16 2d0 1F 03 0F 03 
32a1a 2d1 03 66 3C 00 
32a1e 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
32a22 2d3 60 30 18 00 
32a26 2d4 7F 33 18 0C 
32a2a 2d5 06 63 7F 00 
32a2e 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
32a32 2d7 00 3C 66 43 
32a36 2d8 03 03 03 03 
32a3a 2d9 43 66 3C 00 
32a3e 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
32a42 2db 00 00 00 00 
32a46 2dc 3E 63 06 1C 
32a4a 2dd 30 63 3E 18 
32a4e 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
32a52 2df 00 00 00 00 
32a56 2e0 00 00       | 	byte	$00[6]
32a58 2e1 6C 36 1B 36 
32a5c 2e2 6C 00 00 00 
32a60 2e3 00 00 00 00 
32a64 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32a68 2e5 1B 36 6C 36 
32a6c 2e6 1B 00 00 00 
32a70 2e7 88 22 88 22 
32a74 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
32a78 2e9 88 22 88 22 
32a7c 2ea 88 22 88 22 
32a80 2eb AA 55 AA 55 
32a84 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
32a88 2ed AA 55 AA 55 
32a8c 2ee AA 55 AA 55 
32a90 2ef BB EE BB EE 
32a94 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
32a98 2f1 BB EE BB EE 
32a9c 2f2 BB EE BB EE 
32aa0 2f3 18 18 18 18 
32aa4 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
32aa8 2f5 18 18 18 18 
32aac 2f6 18 18 18 18 
32ab0 2f7 18 18 18 18 
32ab4 2f8 18 18 18    | 	byte	$18[15]
32ab7 2f8 1F 18 18 18 
32abb 2f9 18 18 18 18 
32abf 2fa 18 30 18 00 
32ac3 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
32ac7 2fc 63 7F 63 63 
32acb 2fd 63 63 00 00 
32acf 2fe 00 1C 36 00 
32ad3 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
32ad7 300 63 7F 63 63 
32adb 301 63 63 00 00 
32adf 302 00 36 1C 00 
32ae3 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
32ae7 304 1E 16 06 46 
32aeb 305 66 7F 00 00 
32aef 306 00 00 00 00 
32af3 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
32af7 308 1C 30 60 63 
32afb 309 63 3E 18 30 
32aff 30a 1E 6C 6C 6C 
32b03 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
32b07 30c 6F 6C 6C 6C 
32b0b 30d 6C 6C 6C 6C 
32b0f 30e 6C 6C 6C 6C 
32b13 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
32b17 310 6C 6C 6C 6C 
32b1b 311 6C 6C 6C 6C 
32b1f 312 6C          | 	byte	$6c[9]
32b20 313 00 00 00 00 
32b24 314 00          | 	byte	$00[5]
32b25 314 7F 60 6F 6C 
32b29 315 6C 6C 6C 6C 
32b2d 316 6C 6C 6C 6C 
32b31 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
32b35 318 6F 60 7F 00 
32b39 319 00 00 00 00 
32b3d 31a 00 00 00 18 
32b41 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
32b45 31c 61 30 18 0C 
32b49 31d 06 43 63 7F 
32b4d 31e 00 00 00 00 
32b51 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
32b55 320 00 7F 33 18 
32b59 321 0C 06 63 7F 
32b5d 322 00 00 00 00 
32b61 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
32b65 324 00 00 1F 18 
32b69 325 18 18 18 18 
32b6d 326 18 18 18 18 
32b71 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
32b75 328 18 18 F8 00 
32b79 329 00 00 00 00 
32b7d 32a 00 00 00 18 
32b81 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
32b85 32c 18 18 FF 00 
32b89 32d 00 00 00 00 
32b8d 32e 00 00 00 00 
32b91 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32b95 330 00 00 FF 18 
32b99 331 18 18 18 18 
32b9d 332 18 18 18 18 
32ba1 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
32ba5 334 18 18 F8 18 
32ba9 335 18 18 18 18 
32bad 336 18 18 18 00 
32bb1 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
32bb5 338 00 00 FF 00 
32bb9 339 00 00 00 00 
32bbd 33a 00 00 00 18 
32bc1 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
32bc5 33c 18 18 FF 18 
32bc9 33d 18 18 18 18 
32bcd 33e 18 18 18 63 
32bd1 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
32bd5 340 36 63 63 7F 
32bd9 341 63 63 63 63 
32bdd 342 00 00 00 00 
32be1 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
32be5 344 00 1E 30 3E 
32be9 345 33 33 33 6E 
32bed 346 00 00 00 6C 
32bf1 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
32bf5 348 EC 0C FC 00 
32bf9 349 00 00 00 00 
32bfd 34a 00 00 00 00 
32c01 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32c05 34c FC 0C EC 6C 
32c09 34d 6C 6C 6C 6C 
32c0d 34e 6C 6C 6C 6C 
32c11 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
32c15 350 EF 00 FF 00 
32c19 351 00 00 00 00 
32c1d 352 00 00 00 00 
32c21 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32c25 354 FF 00 EF 6C 
32c29 355 6C 6C 6C 6C 
32c2d 356 6C 6C 6C 6C 
32c31 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
32c35 358 EC 0C EC 6C 
32c39 359 6C 6C 6C 6C 
32c3d 35a 6C 6C 6C 00 
32c41 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
32c45 35c FF 00 FF 00 
32c49 35d 00 00 00 00 
32c4d 35e 00 00 00 6C 
32c51 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
32c55 360 EF 00 EF 6C 
32c59 361 6C 6C 6C 6C 
32c5d 362 6C 6C 6C 00 
32c61 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
32c65 364 63 3E 63 63 
32c69 365 63 63 3E 63 
32c6d 366 00 00 00 00 
32c71 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
32c75 368 30 3C 36 33 
32c79 369 33 33 33 6E 
32c7d 36a 00 00 00 00 
32c81 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
32c85 36c 66 66 6F 66 
32c89 36d 66 66 36 1F 
32c8d 36e 00 00 00 36 
32c91 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
32c95 370 66 66 66 66 
32c99 371 66 66       | 	byte	$66[6]
32c9b 371 36 1F 00 00 
32c9f 372 00 00 63 00 
32ca3 373 7F 66 46 16 
32ca7 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
32cab 375 66 7F 00 00 
32caf 376 00 6C 38 00 
32cb3 377 38 30 30 3C 
32cb7 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
32cbb 379 33 6E 00 00 
32cbf 37a 00 36 1C 00 
32cc3 37b 63 67 6F 7F 
32cc7 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
32ccb 37d 63 63 00 00 
32ccf 37e 00 30 18 00 
32cd3 37f 3C 18 18 18 
32cd7 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
32cdb 381 18 3C 00 00 
32cdf 382 00 3C 66 00 
32ce3 383 3C 18 18 18 
32ce7 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
32ceb 385 18 3C 00 00 
32cef 386 00 00 00 36 
32cf3 387 1C 08 00 3E 
32cf7 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
32cfb 389 63 3E 00 00 
32cff 38a 00 18 18 18 
32d03 38b 18 18 18 18 
32d07 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
32d0b 38d 00 00 00 00 
32d0f 38e 00 00 00 00 
32d13 38f 00 00 00 00 | 	byte	$00[12]
32d17 390 F8 18 18 18 
32d1b 391 18 18 18 18 
32d1f 392 18 FF FF FF 
32d23 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
32d27 394 FF FF FF FF 
32d2b 395 FF FF FF FF 
32d2f 396 FF          | 	byte	$ff[9]
32d30 397 00 00 00 00 
32d34 398 00 00 00    | 	byte	$00[7]
32d37 398 FF FF FF FF 
32d3b 399 FF FF FF FF 
32d3f 39a FF          | 	byte	$ff[9]
32d40 39b 00 00 00 7E 
32d44 39c 7E 5A 18 18 
32d48 39d 18 18 18 18 
32d4c 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
32d50 39f 1C 36 1C 63 
32d54 3a0 63 63 63 63 
32d58 3a1 63 63 63 63 
32d5c 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
32d60 3a3 FF FF FF FF 
32d64 3a4 FF FF FF    | 	byte	$ff[7]
32d67 3a4 00 00 00 00 
32d6b 3a5 00 00 00 00 
32d6f 3a6 00          | 	byte	$00[9]
32d70 3a7 30 18 00 3E 
32d74 3a8 63 63 63 63 
32d78 3a9 63 63 63 63 
32d7c 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
32d80 3ab 00 00 00 1E 
32d84 3ac 33 33 33 1B 
32d88 3ad 33 63 63 63 
32d8c 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
32d90 3af 1C 36 00 3E 
32d94 3b0 63 63 63 63 
32d98 3b1 63 63 63 63 
32d9c 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
32da0 3b3 30 18 00 63 
32da4 3b4 67 6F 7F 7B 
32da8 3b5 73 63 63 63 
32dac 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
32db0 3b7 00 00 60 30 
32db4 3b8 18 00 3B 66 
32db8 3b9 66 66 66 66 
32dbc 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
32dc0 3bb 00 00 36 1C 
32dc4 3bc 08 00 3B 66 
32dc8 3bd 66 66 66 66 
32dcc 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
32dd0 3bf 36 1C 00 3E 
32dd4 3c0 63 63 06 1C 
32dd8 3c1 30 60 63 63 
32ddc 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
32de0 3c3 00 00 36 1C 
32de4 3c4 08 00 3E 63 
32de8 3c5 06 1C 30 63 
32dec 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
32df0 3c7 30 18 00 3F 
32df4 3c8 66 66 66 3E 
32df8 3c9 36 66 66 66 
32dfc 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
32e00 3cb 30 18 00 63 
32e04 3cc 63 63 63 63 
32e08 3cd 63 63 63 63 
32e0c 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
32e10 3cf 00 00 60 30 
32e14 3d0 18 00 3B 6E 
32e18 3d1 66 06 06 06 
32e1c 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
32e20 3d3 66 33 00 63 
32e24 3d4 63 63 63 63 
32e28 3d5 63 63 63 63 
32e2c 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
32e30 3d7 00 00 60 30 
32e34 3d8 18 00 63 63 
32e38 3d9 63 63 63 63 
32e3c 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
32e40 3db 30 18 00 66 
32e44 3dc 66 66 66 3C 
32e48 3dd 18 18 18 18 
32e4c 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
32e50 3df 00 00 00 08 
32e54 3e0 0C 0C 3F 0C 
32e58 3e1 0C 0C 0C 6C 
32e5c 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
32e60 3e3 30 18 00 00 
32e64 3e4 00 00 00 00 
32e68 3e5 00 00 00 00 
32e6c 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32e70 3e7 00 00 00 00 
32e74 3e8 00 00 00 00 | 	byte	$00[8]
32e78 3e9 7F 00 00 00 
32e7c 3ea 00 00 00 00 
32e80 3eb 66 33 00 00 
32e84 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
32e88 3ed 00 00 00 00 
32e8c 3ee 00 00 00 00 
32e90 3ef 00 00 00 00 
32e94 3f0 00 00 00 00 
32e98 3f1 00 00 00 00 
32e9c 3f2 00          | 	byte	$00[21]
32e9d 3f2 0C 06 3C 36 
32ea1 3f3 1C 00 00 00 
32ea5 3f4 00 00 00 00 
32ea9 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32ead 3f6 00 00 00 63 
32eb1 3f7 3E 00 00 00 
32eb5 3f8 00 00 00 00 
32eb9 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32ebd 3fa 00 00 00 00 
32ec1 3fb 3E 63 06 1C 
32ec5 3fc 36 63 63 36 
32ec9 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
32ecd 3fe 00 00 00 00 
32ed1 3ff 00 00 00 00 | 	byte	$00[8]
32ed5 400 18 00 7E 00 
32ed9 401 18 00 00 00 
32edd 402 00 00 00 00 
32ee1 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32ee5 404 00 00 00 00 
32ee9 405 00 00 00 00 | 	byte	$00[8]
32eed 406 18 30 1E 00 
32ef1 407 00 00 1C 36 
32ef5 408 36 1C 00 00 
32ef9 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
32efd 40a 00 00 00 00 
32f01 40b 63 00 00 00 
32f05 40c 00 00 00 00 
32f09 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f0d 40e 00 00 00 18 
32f11 40f 18 00 00 00 
32f15 410 00 00 00 00 
32f19 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f1d 412 00 00 00 00 
32f21 413 00          | 	byte	$00[5]
32f22 413 CC 66 33 00 
32f26 414 33 33 33 33 
32f2a 415 33 33 6E 00 
32f2e 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
32f32 417 00 3F 66 66 
32f36 418 66 3E 36 66 
32f3a 419 66 66 6F 00 
32f3e 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
32f42 41b 36 1C 08 00 
32f46 41c 3B 6E 66 06 
32f4a 41d 06 06 0F 00 
32f4e 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
32f52 41f 00 00 00 7E 
32f56 420 7E 7E 7E 7E 
32f5a 421 7E 7E 00 00 
32f5e 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
32f62 423 00 00 00 00 
32f66 424 00 00 00 00 
32f6a 425 00 00 00 00 
32f6e 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32f70 427             | 'vga_font       file "vgafont.def"
32f70 427 00 00 00 00 
      ...             
32fa0 433 00 00 00 00 
32fa4 434 00 00 00    | st_font        file "st4font.def"
32fa7 434 FF FF 00 00 
32fab 435 00 00 00 00 
32faf 436 00 18 18 18 
32fb3 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
32fb7 438 18 18 18 18 
32fbb 439 18 18 18 18 
32fbf 43a 18          | 	byte	$18[9]
32fc0 43b 00 00 00 00 
32fc4 43c 00 00 00    | 	byte	$00[7]
32fc7 43c FF FF 18 18 
32fcb 43d 18 18 18 18 
32fcf 43e 18 18 18 18 
32fd3 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
32fd7 440 FF FF 00 00 
32fdb 441 00 00 00 00 
32fdf 442 00 18 18 18 
32fe3 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
32fe7 444 1F 1F 18 18 
32feb 445 18 18 18 18 
32fef 446 18 18 18 18 
32ff3 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
32ff7 448 F8 F8 18 18 
32ffb 449 18 18 18 18 
32fff 44a 18 00 00 00 
33003 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
33007 44c 1F 1F 18 18 
3300b 44d 18 18 18 18 
3300f 44e 18 00 00 00 
33013 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
33017 450 F8 F8 18 18 
3301b 451 18 18 18 18 
3301f 452 18 18 18 18 
33023 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
33027 454 1F 1F 00 00 
3302b 455 00 00 00 00 
3302f 456 00 18 18 18 
33033 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
33037 458 F8 F8 00 00 
3303b 459 00 00 00 00 
3303f 45a 00 18 18 18 
33043 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
33047 45c FF FF 18 18 
3304b 45d 18 18 18 18 
3304f 45e 18 00 00 18 
33053 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
33057 460 66 7E 7E 66 
3305b 461 66 66 66 30 
3305f 462 18 00 00 7E 
33063 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
33067 464 3E 06 06 06 
3306b 465 06 7E 7E 18 
3306f 466 0C 30 18 3C 
33073 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
33077 468 06 06 06 66 
3307b 469 66 7E 3C 00 
3307f 46a 00 30 18 66 
33083 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
33087 46c 7E 7E 76 76 
3308b 46d 66 66 66 00 
3308f 46e 00 30 18 7C 
33093 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
33097 470 1C 38 70 60 
3309b 471 60 7E 3E 00 
3309f 472 00 30 18 7E 
330a3 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
330a7 474 18 0C 0C 06 
330ab 475 06 7E 7E 00 
330af 476 00 18 18 00 
330b3 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
330b7 478 18 18 0C 0C 
330bb 479 06 7E 7E 00 
330bf 47a 00 30 18 3C 
330c3 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
330c7 47c 66 66 66 66 
330cb 47d 66          | 	byte	$66[5]
330cc 47e 7E 3C 00 00 
330d0 47f 00 00 06 06 
330d4 480 06 06 16 1E 
330d8 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
330dc 482 7E 7E 00 00 
330e0 483 00 00 00 00 
330e4 484 00 3C 7C 60 
330e8 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
330ec 486 7E 7C 30 18 
330f0 487 00 00 00 00 
330f4 488 00 3C 7E 66 
330f8 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
330fc 48a 7E 7C 18 0C 
33100 48b 00 00 30 18 
33104 48c 00 3C 3E 06 
33108 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
3310c 48e 7E 7C 00 00 
33110 48f 00 00 30 18 
33114 490 00 3E 7E 66 
33118 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
3311c 492 66 66 00 00 
33120 493 00 00 30 18 
33124 494 00 7C 7E 06 
33128 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
3312c 496 7E 3E 00 00 
33130 497 00 00 30 18 
33134 498 00 7E 7E 30 
33138 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3313c 49a 7E 7E 00 00 
33140 49b 00 00 18 18 
33144 49c 00 7E 7E 30 
33148 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3314c 49e 7E 7E 00 00 
33150 49f 00 00 30 18 
33154 4a0 00 3C 7E 66 
33158 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
3315c 4a2 7E 3C 00 00 
33160 4a3 00 00 1C 1C 
33164 4a4 18 18 38 3C 
33168 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
3316c 4a6 3C 3C 00 00 
33170 4a7 00 00 00 00 
33174 4a8 00 00 00 00 
33178 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3317c 4aa 00 00 00 00 
33180 4ab 00 00       | 	byte	$00[6]
33182 4ab 18 18 18 18 
33186 4ac 18 18 18 18 | 	byte	$18[8]
3318a 4ad 00 00 18 18 
3318e 4ae 00 00 00 00 
33192 4af 66 66 66 66 
33196 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
3319a 4b1 00 00 00 00 
3319e 4b2 00 00 00 00 
331a2 4b3 00          | 	byte	$00[9]
331a3 4b3 66 66 FF FF 
331a7 4b4 66 66 FF FF 
331ab 4b5 66 66 00 00 
331af 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
331b3 4b7 7C 7E 06 06 
331b7 4b8 3E 7C 60 60 
331bb 4b9 7E 3E 18 18 
331bf 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
331c3 4bb 66 30 30 18 
331c7 4bc 18 0C 0C 66 
331cb 4bd 66 00 00 00 
331cf 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
331d3 4bf 66 66 3C 1C 
331d7 4c0 1C FC FE 66 
331db 4c1 66 FE FC 00 
331df 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
331e3 4c3 18 18 18 18 
331e7 4c4 00 00 00 00 
331eb 4c5 00 00 00 00 
331ef 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
331f3 4c7 18 1C 0C 0C 
331f7 4c8 0C 0C 0C 0C 
331fb 4c9 1C 18 30 00 
331ff 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
33203 4cb 18 38 30 30 
33207 4cc 30 30 30 30 
3320b 4cd 38 18 0C 00 
3320f 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
33213 4cf 66 66 3C 3C 
33217 4d0 FF FF 3C 3C 
3321b 4d1 66 66 00 00 
3321f 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
33223 4d3 00 18 18 18 
33227 4d4 7E 7E 18 18 
3322b 4d5 18 00 00 00 
3322f 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
33233 4d7 00 00 00 00 
33237 4d8 00 00       | 	byte	$00[6]
33239 4d9 18 18 18 18 
3323d 4da 18          | 	byte	$18[5]
3323e 4da 0C 04 00 00 
33242 4db 00 00 00 00 
33246 4dc 7E 7E 00 00 
3324a 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
3324e 4de 00 00 00 00 
33252 4df 00 00 00 00 
33256 4e0 00 00 00 00 
3325a 4e1 00          | 	byte	$00[13]
3325b 4e1 18 18 18 00 
3325f 4e2 00 00 00 60 
33263 4e3 60 60 30 30 
33267 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3326b 4e5 06 06 06 00 
3326f 4e6 00 00 00 3C 
33273 4e7 7E 66 66 66 
33277 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3327b 4e9 66 7E 3C 00 
3327f 4ea 00 00 00 18 
33283 4eb 18 1C 1C 18 
33287 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3328b 4ed 18 7E 7E 00 
3328f 4ee 00 00 00 3C 
33293 4ef 7E 66 66 30 
33297 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3329b 4f1 0C 7E 7E 00 
3329f 4f2 00 00 00 7E 
332a3 4f3 7E 30 30 18 
332a7 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
332ab 4f5 66 7E 3C 00 
332af 4f6 00 00 00 30 
332b3 4f7 30 38 38 3C 
332b7 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
332bb 4f9 7E 30 30 00 
332bf 4fa 00 00 00 7E 
332c3 4fb 7E 06 06 3E 
332c7 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
332cb 4fd 66 7E 3C 00 
332cf 4fe 00 00 00 38 
332d3 4ff 3C 0E 06 06 
332d7 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
332db 501 66 7E 3C 00 
332df 502 00 00 00 7E 
332e3 503 7E 60 60 30 
332e7 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
332eb 505 0C 0C 0C 00 
332ef 506 00 00 00 3C 
332f3 507 7E 66 66 3C 
332f7 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
332fb 509 66 7E 3C 00 
332ff 50a 00 00 00 3C 
33303 50b 7E 66 66 7E 
33307 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
3330b 50d 70 3C 1C 00 
3330f 50e 00 00 00 00 
33313 50f 00 00 18 18 
33317 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
3331b 511 18 18 18 00 
3331f 512 00 00 00 00 
33323 513 00 00 18 18 
33327 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
3332b 515 18 18 18 0C 
3332f 516 04 00 00 00 
33333 517 70 38 1C 0E 
33337 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
3333b 519 70 00 00 00 
3333f 51a 00 00 00 00 
33343 51b 00 00 7E 7E 
33347 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
3334b 51d 00 00 00 00 
3334f 51e 00 00 00 00 | 	byte	$00[8]
33353 51f 0E 1C 38 70 
33357 520 E0 70 38 1C 
3335b 521 0E 00 00 00 
3335f 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
33363 523 7E 66 66 30 
33367 524 30 18 18 18 
3336b 525 00 18 18 00 
3336f 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
33373 527 7E 66 66 66 
33377 528 66 36 06 66 
3337b 529 66 7E 3C 00 
3337f 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
33383 52b 3C 7E 66 66 
33387 52c 66 7E 7E 66 
3338b 52d 66 66 66 00 
3338f 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
33393 52f 7E 66 66 7E 
33397 530 3E 66 66 66 
3339b 531 66 7E 3E 00 
3339f 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
333a3 533 7E 66 66 06 
333a7 534 06 06 06 66 
333ab 535 66 7E 3C 00 
333af 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
333b3 537 7E 66 66 66 
333b7 538 66 66 66 66 
333bb 539 66 7E 3E 00 
333bf 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
333c3 53b 7E 06 06 3E 
333c7 53c 3E 06 06 06 
333cb 53d 06 7E 7E 00 
333cf 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
333d3 53f 7E 06 06 3E 
333d7 540 3E 06 06 06 
333db 541 06 06 06 00 
333df 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
333e3 543 7E 06 06 76 
333e7 544 76 66 66 66 
333eb 545 66 7E 3C 00 
333ef 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
333f3 547 66 66 66 7E 
333f7 548 7E 66 66 66 
333fb 549 66 66 66 00 
333ff 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
33403 54b 7E 18 18 18 
33407 54c 18 18 18 18 
3340b 54d 18 7E 7E 00 
3340f 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
33413 54f 60 60 60 60 
33417 550 60 60 60    | 	byte	$60[7]
3341a 551 66 66 7E 3C 
3341e 552 00 00 00 00 
33422 553 66 66 36 36 
33426 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
3342a 555 66 66 C6 C6 
3342e 556 00 00 00 00 
33432 557 06 06 06 06 
33436 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
3343a 559 06 06 7E 7E 
3343e 55a 00 00 00 00 
33442 55b C6 C6 EE EE 
33446 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
3344a 55d C6 C6 C6 C6 
3344e 55e 00 00 00 00 
33452 55f 66 66 66 6E 
33456 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3345a 561 76 66 66 66 
3345e 562 00 00 00 00 
33462 563 3C 7E 66 66 
33466 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3346a 565 66 66 7E 3C 
3346e 566 00 00 00 00 
33472 567 3E 7E 66 66 
33476 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3347a 569 06 06 06 06 
3347e 56a 00 00 00 00 
33482 56b 3C 7E 66 66 
33486 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3348a 56d 66 56 3E 6C 
3348e 56e 00 00 00 00 
33492 56f 3E 7E 66 66 
33496 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3349a 571 66 66 C6 C6 
3349e 572 00 00 00 00 
334a2 573 7C 7E 06 06 
334a6 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
334aa 575 60 60 7E 3E 
334ae 576 00 00 00 00 
334b2 577 7E 7E 18 18 
334b6 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
334ba 579 18 18 18 18 
334be 57a 00 00 00 00 
334c2 57b 66 66 66 66 
334c6 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
334ca 57d 66 66 7E 3C 
334ce 57e 00 00 00 00 
334d2 57f 66 66 66 66 
334d6 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
334da 581 3C 3C 18 18 
334de 582 00 00 00 00 
334e2 583 C6 C6 C6 C6 
334e6 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
334ea 585 FE EE C6 82 
334ee 586 00 00 00 00 
334f2 587 66 66 66 3C 
334f6 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
334fa 589 3C 66 66 66 
334fe 58a 00 00 00 00 
33502 58b 66 66 66 66 
33506 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
3350a 58d 18 18 18 18 
3350e 58e 00 00 00 00 
33512 58f 7E 7E 30 30 
33516 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
3351a 591 06 06 7E 7E 
3351e 592 00 00 00 00 
33522 593 3C 3C 0C 0C 
33526 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
3352a 595 0C 0C 3C 3C 
3352e 596 00 00 00 00 
33532 597 06 06 0C 0C 
33536 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3353a 599 60 60 C0 C0 
3353e 59a 00 00 00 00 
33542 59b 3C 3C 30 30 
33546 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3354a 59d 30 30 3C 3C 
3354e 59e 00 00 00 00 
33552 59f 18 18 3C 3C 
33556 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3355a 5a1 00 00 00 00 
3355e 5a2 00 00 00 00 
33562 5a3 00 00 00 00 
33566 5a4 00 00 00 00 
3356a 5a5 00 00       | 	byte	$00[18]
3356c 5a6 FE FE 00 00 
33570 5a7 00 00 0C 0C 
33574 5a8 18 18 00 00 
33578 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
3357c 5aa 00 00 00 00 
33580 5ab 00 00 00 00 
33584 5ac 00          | 	byte	$00[9]
33585 5ac 3C 7C 60 7C 
33589 5ad 7E 66 66 7E 
3358d 5ae 7C 00 00 00 
33591 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
33595 5b0 3E 7E 66 66 
33599 5b1 66 66 66 7E 
3359d 5b2 3E 00 00 00 
335a1 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
335a5 5b4 3C 3E 06 06 
335a9 5b5 06 06 06 7E 
335ad 5b6 7C 00 00 00 
335b1 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
335b5 5b8 7C 7E 66 66 
335b9 5b9 66 66 66 7E 
335bd 5ba 7C 00 00 00 
335c1 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
335c5 5bc 3C 7E 66 66 
335c9 5bd 7E 06 06 7E 
335cd 5be 7C 00 00 00 
335d1 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
335d5 5c0 18 7E 7E 18 
335d9 5c1 18 18 18 18 
335dd 5c2 18 00 00 00 
335e1 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
335e5 5c4 7C 7E 66 66 
335e9 5c5 66 66 7E 7C 
335ed 5c6 60 7E 3E 00 
335f1 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
335f5 5c8 3E 7E 66 66 
335f9 5c9 66 66 66 66 
335fd 5ca 66 00 00 00 
33601 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
33605 5cc 1C 1C 18 18 
33609 5cd 18 18 18 3C 
3360d 5ce 3C 00 00 00 
33611 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
33615 5d0 30 30 30 30 
33619 5d1 30 30 30 30 
3361d 5d2 30          | 	byte	$30[9]
3361e 5d2 3E 1E 00 00 
33622 5d3 06 06 06 36 
33626 5d4 36 1E 1E 1E 
3362a 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
3362e 5d6 00 00 00 00 
33632 5d7 1C 1C 18 18 
33636 5d8 18 18 18 18 
3363a 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
3363e 5da 00 00 00 00 
33642 5db 00 00 00    | 	byte	$00[7]
33645 5dc 6C FE FE D6 
33649 5dd D6 C6 C6 C6 
3364d 5de C6 00 00 00 
33651 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
33655 5e0 3E 7E 66 66 
33659 5e1 66 66 66 66 
3365d 5e2 66 00 00 00 
33661 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
33665 5e4 3C 7E 66 66 
33669 5e5 66 66 66 7E 
3366d 5e6 3C 00 00 00 
33671 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
33675 5e8 3E 7E 66 66 
33679 5e9 66 66 66 7E 
3367d 5ea 3E 06 06 00 
33681 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
33685 5ec 7C 7E 66 66 
33689 5ed 66 66 66 7E 
3368d 5ee 7C 60 60 00 
33691 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
33695 5f0 3E 7E 66 06 
33699 5f1 06 06 06 06 
3369d 5f2 06 00 00 00 
336a1 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
336a5 5f4 7C 7E 06 0E 
336a9 5f5 3C 70 60 7E 
336ad 5f6 3E 00 00 00 
336b1 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
336b5 5f8 7E 7E 18 18 
336b9 5f9 18 18 18 78 
336bd 5fa 70 00 00 00 
336c1 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
336c5 5fc 66 66 66 66 
336c9 5fd 66 66 66    | 	byte	$66[7]
336cc 5fe 7E 7C 00 00 
336d0 5ff 00 00 00 00 
336d4 600 00 66 66 66 
336d8 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
336dc 602 18 18 00 00 
336e0 603 00 00 00 00 
336e4 604 00 C6 C6 D6 
336e8 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
336ec 606 C6 82 00 00 
336f0 607 00 00 00 00 
336f4 608 00 66 66 3C 
336f8 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
336fc 60a 66 66 00 00 
33700 60b 00 00 00 00 
33704 60c 00 66 66 66 
33708 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
3370c 60e 7C 60 7E 3E 
33710 60f 00 00 00 00 
33714 610 00 7E 7E 30 
33718 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3371c 612 7E 7E 00 00 
33720 613 00 00 30 18 
33724 614 18 18 18 0C 
33728 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
3372c 616 18 30 00 00 
33730 617 00 00 18 18 
33734 618 18 18 18 18 
33738 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3373c 61a 18 18 00 00 
33740 61b 00 00 0C 18 
33744 61c 18 18 18 30 
33748 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
3374c 61e 18 0C 00 00 
33750 61f 00 00 6C 7E 
33754 620 36 00 00 00 
33758 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
3375c 622 00 00 00 00 
33760 623 00 00 00 00 
33764 624 00          | 	byte	$00[9]
33765 624 18 18 18 18 
33769 625 18 18 00 00 
3376d 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
33770 627             | 'amiga_font     file "amigafont.def"
33770 627 00 6C FE FE 
33774 628 7C 38 10 00 
33778 629 18 18 18 F8 
3377c 62a F8 18 18 18 | a8_font        file "atari8.fnt"
33780 62b C0 C0 C0 C0 
33784 62c C0 C0 C0 C0 | 	byte	$c0[8]
33788 62d 18 18 18 1F 
3378c 62e 1F 00 00 00 
33790 62f 18 18 18 1F 
33794 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
33798 631 00 00 00 1F 
3379c 632 1F 18 18 18 
337a0 633 C0 E0 70 38 
337a4 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
337a8 635 03 07 0E 1C 
337ac 636 38 70 E0 C0 
337b0 637 80 C0 E0 F0 
337b4 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
337b8 639 00 00 00 00 
337bc 63a F0 F0 F0 F0 
337c0 63b 01 03 07 0F 
337c4 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
337c8 63d F0 F0 F0 F0 
337cc 63e 00 00 00 00 
337d0 63f 0F 0F 0F 0F 
337d4 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
337d8 641 FF FF 00 00 
337dc 642 00 00 00 00 
337e0 643 00 00 00 00 
337e4 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
337e8 645 00 00 00 00 
337ec 646 0F 0F 0F 0F 
337f0 647 00 38 38 EE 
337f4 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
337f8 649 00 00 00 F8 
337fc 64a F8 18 18 18 
33800 64b 00 00 00 FF 
33804 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
33808 64d 18 18 18 FF 
3380c 64e FF 18 18 18 
33810 64f 00 00 3C 7E 
33814 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
33818 651 00 00 00 00 
3381c 652 FF FF FF FF 
33820 653 03 03 03 03 
33824 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
33828 655 00 00 00 FF 
3382c 656 FF 18 18 18 
33830 657 18 18 18 FF 
33834 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
33838 659 0F 0F 0F 0F 
3383c 65a 0F 0F 0F 0F | 	byte	$0f[8]
33840 65b 18 18 18 F8 
33844 65c F8 00 00 00 
33848 65d 1E 06 1E 06 
3384c 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
33850 65f 00 18 3C 7E 
33854 660 18 18 18 00 
33858 661 00 18 18 18 
3385c 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
33860 663 00 18 0C 7E 
33864 664 0C 18 00 00 
33868 665 00 18 30 7E 
3386c 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
33870 667 00 00 00 00 
33874 668 00 00 00 00 
33878 669 00          | 	byte	$00[9]
33879 669 18 18 18 18 
3387d 66a 00 18 00 00 
33881 66b 66 66 66 00 
33885 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
33889 66d 66 FF 66 66 
3388d 66e FF 66 00 18 
33891 66f 7C 06 3C 60 
33895 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
33899 671 66 36 18 0C 
3389d 672 66 62 00 38 
338a1 673 6C 38 1C F6 
338a5 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
338a9 675 18 18 18 00 
338ad 676 00 00 00 00 
338b1 677 70 38 18 18 
338b5 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
338b9 679 0E 1C 18 18 
338bd 67a 1C 0E 00 00 
338c1 67b 66 3C FF 3C 
338c5 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
338c9 67d 18 18 7E 18 
338cd 67e 18 00 00 00 
338d1 67f 00 00 00 00 
338d5 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
338d9 681 00 00 7E 00 
338dd 682 00 00 00 00 
338e1 683 00 00 00 00 
338e5 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
338e9 685 60 30 18 0C 
338ed 686 06 02 00 00 
338f1 687 3C 66 76 6E 
338f5 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
338f9 689 18 1C 18 18 
338fd 68a 18 7E 00 00 
33901 68b 3C 66 30 18 
33905 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
33909 68d 7E 30 18 30 
3390d 68e 66 3C 00 00 
33911 68f 30 38 3C 36 
33915 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
33919 691 7E 06 3E 60 
3391d 692 66 3C 00 00 
33921 693 3C 06 3E 66 
33925 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
33929 695 7E 60 30 18 
3392d 696 0C 0C 00 00 
33931 697 3C 66 3C 66 
33935 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
33939 699 3C 66 7C 60 
3393d 69a 30 1C 00 00 
33941 69b 00 18 18 00 
33945 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
33949 69d 00 18 18 00 
3394d 69e 18 18 0C 60 
33951 69f 30 18 0C 18 
33955 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
33959 6a1 00 7E 00 00 
3395d 6a2 7E 00 00 06 
33961 6a3 0C 18 30 18 
33965 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
33969 6a5 3C 66 30 18 
3396d 6a6 00 18 00 00 
33971 6a7 3C 66 76 76 
33975 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
33979 6a9 18 3C 66 66 
3397d 6aa 7E 66 00 00 
33981 6ab 3E 66 3E 66 
33985 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
33989 6ad 3C 66 06 06 
3398d 6ae 66 3C 00 00 
33991 6af 1E 36 66 66 
33995 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
33999 6b1 7E 06 3E 06 
3399d 6b2 06 7E 00 00 
339a1 6b3 7E 06 3E 06 
339a5 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
339a9 6b5 7C 06 06 76 
339ad 6b6 66 7C 00 00 
339b1 6b7 66 66 7E 66 
339b5 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
339b9 6b9 7E 18 18 18 
339bd 6ba 18 7E 00 00 
339c1 6bb 60 60 60 60 
339c5 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
339c9 6bd 66 36 1E 1E 
339cd 6be 36 66 00 00 
339d1 6bf 06 06 06 06 
339d5 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
339d9 6c1 C6 EE FE D6 
339dd 6c2 C6 C6 00 00 
339e1 6c3 66 6E 7E 7E 
339e5 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
339e9 6c5 3C 66 66 66 
339ed 6c6 66 3C 00 00 
339f1 6c7 3E 66 66 3E 
339f5 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
339f9 6c9 3C 66 66 66 
339fd 6ca 36 6C 00 00 
33a01 6cb 3E 66 66 3E 
33a05 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
33a09 6cd 3C 06 3C 60 
33a0d 6ce 60 3C 00 00 
33a11 6cf 7E 18 18 18 
33a15 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
33a19 6d1 66 66 66 66 
33a1d 6d2 66          | 	byte	$66[5]
33a1e 6d2 7E 00 00 66 
33a22 6d3 66 66 66 3C 
33a26 6d4 18 00 00 C6 
33a2a 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
33a2e 6d6 C6 00 00 66 
33a32 6d7 66 3C 3C 66 
33a36 6d8 66 00 00 66 
33a3a 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
33a3e 6da 18 00 00 7E 
33a42 6db 30 18 0C 06 
33a46 6dc 7E 00 00 78 
33a4a 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
33a4e 6de 78 00 00 02 
33a52 6df 06 0C 18 30 
33a56 6e0 60 00 00 1E 
33a5a 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
33a5e 6e2 1E 00 00 10 
33a62 6e3 38 6C C6 00 
33a66 6e4 00 00 00 00 
33a6a 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
33a6e 6e6 FF 00 00 18 
33a72 6e7 3C 7E 7E 3C 
33a76 6e8 18 00 00 00 
33a7a 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
33a7e 6ea 7C 00 00 06 
33a82 6eb 06 3E 66 66 
33a86 6ec 3E 00 00 00 
33a8a 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
33a8e 6ee 3C 00 00 60 
33a92 6ef 60 7C 66 66 
33a96 6f0 7C 00 00 00 
33a9a 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
33a9e 6f2 3C 00 00 70 
33aa2 6f3 18 7C 18 18 
33aa6 6f4 18 00 00 00 
33aaa 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
33aae 6f6 60 3E 00 06 
33ab2 6f7 06 3E 66 66 
33ab6 6f8 66 00 00 18 
33aba 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
33abe 6fa 3C 00 00 60 
33ac2 6fb 00 60 60 60 
33ac6 6fc 60 3C 00 06 
33aca 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
33ace 6fe 66 00 00 1C 
33ad2 6ff 18 18 18 18 
33ad6 700 3C 00 00 00 
33ada 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
33ade 702 C6 00 00 00 
33ae2 703 3E 66 66 66 
33ae6 704 66 00 00 00 
33aea 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
33aee 706 3C 00 00 00 
33af2 707 3E 66 66 3E 
33af6 708 06 06 00 00 
33afa 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
33afe 70a 60 60 00 00 
33b02 70b 3E 66 06 06 
33b06 70c 06 00 00 00 
33b0a 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
33b0e 70e 3E 00 00 18 
33b12 70f 7E 18 18 18 
33b16 710 70 00 00 00 
33b1a 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
33b1e 712 7C 00 00 00 
33b22 713 66 66 66 3C 
33b26 714 18 00 00 00 
33b2a 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
33b2e 716 6C 00 00 00 
33b32 717 66 3C 18 3C 
33b36 718 66 00 00 00 
33b3a 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
33b3e 71a 30 1E 00 00 
33b42 71b 7E 30 18 0C 
33b46 71c 7E 00 00 18 
33b4a 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
33b4e 71e 3C 00 18 18 
33b52 71f 18 18 18 18 
33b56 720 18 18 00 7E 
33b5a 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
33b5e 722 60 00 10 18 
33b62 723 1C 1E 1C 18 
33b66 724 10 00 08 18 
33b6a 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
33b6e 726 08 00       | 	byte	$08, $00
33b70 727 00 00 00 00 
33b74 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
33b75 728 80 00 00 00 
33b79 729 00 80 00 00 
33b7d 72a 80 80 00 00 
33b81 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
33b85 72c 80 00 80 00 
33b89 72d 00 40 80 00 
33b8d 72e AA AA AA 00 
33b91 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
33b95 730 FF 00 00 00 
33b99 731 00 FF 00 00 
33b9d 732 FF FF 00 00 
33ba1 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
33ba5 734 FF 00 FF 00 
33ba9 735 00 FF FF 00 
33bad 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
33bb0 737 00 00 00 00 
33bb4 738 00          | ataripalette   file "ataripalettep2.def"
33bb5 738 11 11 11 00 
33bb9 739 22 22 22 00 
33bbd 73a 33 33 33 00 
33bc1 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
33bc5 73c 55 55 55 00 
33bc9 73d 66 66 66 00 
33bcd 73e 77 77 77 00 
33bd1 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
33bd5 740 99 99 99 00 
33bd9 741 AA AA AA 00 
33bdd 742 BB BB BB 00 
33be1 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
33be5 744 DD DD DD 00 
33be9 745 EE EE EE 00 
33bed 746 FF FF FF 00 
33bf1 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
33bf5 748 00 14 40 00 
33bf9 749 00 1E 60 00 
33bfd 74a 00 28 80 00 
33c01 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
33c05 74c 00 3C BF 00 
33c09 74d 00 46 DF 00 
33c0d 74e 00 50 FF 00 
33c11 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
33c15 750 39 77 FF 00 
33c19 751 55 8A FF 00 
33c1d 752 71 9E FF 00 
33c21 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
33c25 754 AA C5 FF 00 
33c29 755 C6 D8 FF 00 
33c2d 756 E3 EC FF 00 
33c31 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
33c35 758 00 00 40 00 
33c39 759 00 00 60 00 
33c3d 75a 00 00 80 00 
33c41 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
33c45 75c 00 00 BF 00 
33c49 75d 00 00 DF 00 
33c4d 75e 00 00 FF 00 
33c51 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
33c55 760 39 39 FF 00 
33c59 761 55 55 FF 00 
33c5d 762 71 71 FF 00 
33c61 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
33c65 764 AA AA FF 00 
33c69 765 C6 C6 FF 00 
33c6d 766 E3 E3 FF 00 
33c71 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
33c75 768 20 00 40 00 
33c79 769 30 00 60 00 
33c7d 76a 40 00 80 00 
33c81 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
33c85 76c 60 00 BF 00 
33c89 76d 70 00 DF 00 
33c8d 76e 80 00 FF 00 
33c91 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
33c95 770 9C 39 FF 00 
33c99 771 AA 55 FF 00 
33c9d 772 B8 71 FF 00 
33ca1 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
33ca5 774 D5 AA FF 00 
33ca9 775 E3 C6 FF 00 
33cad 776 F1 E3 FF 00 
33cb1 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
33cb5 778 40 00 40 00 
33cb9 779 60 00 60 00 
33cbd 77a 80 00 80 00 
33cc1 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
33cc5 77c BF 00 BF 00 
33cc9 77d DF 00 DF 00 
33ccd 77e FF 00 FF 00 
33cd1 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
33cd5 780 FF 39 FF 00 
33cd9 781 FF 55 FF 00 
33cdd 782 FF 71 FF 00 
33ce1 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
33ce5 784 FF AA FF 00 
33ce9 785 FF C6 FF 00 
33ced 786 FF E3 FF 00 
33cf1 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
33cf5 788 40 00 20 00 
33cf9 789 60 00 30 00 
33cfd 78a 80 00 40 00 
33d01 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
33d05 78c BF 00 60 00 
33d09 78d DF 00 70 00 
33d0d 78e FF 00 80 00 
33d11 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
33d15 790 FF 39 9C 00 
33d19 791 FF 55 AA 00 
33d1d 792 FF 71 B8 00 
33d21 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
33d25 794 FF AA D5 00 
33d29 795 FF C6 E3 00 
33d2d 796 FF E3 F1 00 
33d31 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
33d35 798 40 00 00 00 
33d39 799 60 00 00 00 
33d3d 79a 80 00 00 00 
33d41 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
33d45 79c BF 00 00 00 
33d49 79d DF 00 00 00 
33d4d 79e FF 00 00 00 
33d51 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
33d55 7a0 FF 39 39 00 
33d59 7a1 FF 55 55 00 
33d5d 7a2 FF 71 71 00 
33d61 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
33d65 7a4 FF AA AA 00 
33d69 7a5 FF C6 C6 00 
33d6d 7a6 FF E3 E3 00 
33d71 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
33d75 7a8 40 10 00 00 
33d79 7a9 60 18 00 00 
33d7d 7aa 80 20 00 00 
33d81 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
33d85 7ac BF 30 00 00 
33d89 7ad DF 38 00 00 
33d8d 7ae FF 40 00 00 
33d91 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
33d95 7b0 FF 6A 39 00 
33d99 7b1 FF 80 55 00 
33d9d 7b2 FF 95 71 00 
33da1 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
33da5 7b4 FF BF AA 00 
33da9 7b5 FF D5 C6 00 
33dad 7b6 FF EA E3 00 
33db1 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
33db5 7b8 40 20 00 00 
33db9 7b9 60 30 00 00 
33dbd 7ba 80 40 00 00 
33dc1 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
33dc5 7bc BF 60 00 00 
33dc9 7bd DF 70 00 00 
33dcd 7be FF 80 00 00 
33dd1 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
33dd5 7c0 FF 9C 39 00 
33dd9 7c1 FF AA 55 00 
33ddd 7c2 FF B8 71 00 
33de1 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
33de5 7c4 FF D5 AA 00 
33de9 7c5 FF E3 C6 00 
33ded 7c6 FF F1 E3 00 
33df1 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
33df5 7c8 40 30 00 00 
33df9 7c9 60 48 00 00 
33dfd 7ca 80 60 00 00 
33e01 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
33e05 7cc BF 90 00 00 
33e09 7cd DF A8 00 00 
33e0d 7ce FF C0 00 00 
33e11 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
33e15 7d0 FF CE 39 00 
33e19 7d1 FF D5 55 00 
33e1d 7d2 FF DC 71 00 
33e21 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
33e25 7d4 FF EA AA 00 
33e29 7d5 FF F1 C6 00 
33e2d 7d6 FF F8 E3 00 
33e31 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
33e35 7d8 30 40 00 00 
33e39 7d9 48 60 00 00 
33e3d 7da 60 80 00 00 
33e41 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
33e45 7dc 90 BF 00 00 
33e49 7dd A8 DF 00 00 
33e4d 7de C0 FF 00 00 
33e51 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
33e55 7e0 CE FF 39 00 
33e59 7e1 D5 FF 55 00 
33e5d 7e2 DC FF 71 00 
33e61 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
33e65 7e4 EA FF AA 00 
33e69 7e5 F1 FF C6 00 
33e6d 7e6 F8 FF E3 00 
33e71 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
33e75 7e8 00 40 00 00 
33e79 7e9 00 60 00 00 
33e7d 7ea 00 80 00 00 
33e81 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
33e85 7ec 00 BF 00 00 
33e89 7ed 00 DF 00 00 
33e8d 7ee 00 FF 00 00 
33e91 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
33e95 7f0 39 FF 39 00 
33e99 7f1 55 FF 55 00 
33e9d 7f2 71 FF 71 00 
33ea1 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
33ea5 7f4 AA FF AA 00 
33ea9 7f5 C6 FF C6 00 
33ead 7f6 E3 FF E3 00 
33eb1 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
33eb5 7f8 00 40 14 00 
33eb9 7f9 00 60 1E 00 
33ebd 7fa 00 80 28 00 
33ec1 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
33ec5 7fc 00 BF 3C 00 
33ec9 7fd 00 DF 46 00 
33ecd 7fe 00 FF 50 00 
33ed1 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
33ed5 800 39 FF 77 00 
33ed9 801 55 FF 8A 00 
33edd 802 71 FF 9E 00 
33ee1 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
33ee5 804 AA FF C5 00 
33ee9 805 C6 FF D8 00 
33eed 806 E3 FF EC 00 
33ef1 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
33ef5 808 00 40 28 00 
33ef9 809 00 60 3C 00 
33efd 80a 00 80 50 00 
33f01 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
33f05 80c 00 BF 78 00 
33f09 80d 00 DF 8C 00 
33f0d 80e 00 FF A0 00 
33f11 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
33f15 810 39 FF B5 00 
33f19 811 55 FF C0 00 
33f1d 812 71 FF CA 00 
33f21 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
33f25 814 AA FF DF 00 
33f29 815 C6 FF EA 00 
33f2d 816 E3 FF F4 00 
33f31 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
33f35 818 00 40 40 00 
33f39 819 00 60 60 00 
33f3d 81a 00 80 80 00 
33f41 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
33f45 81c 00 BF BF 00 
33f49 81d 00 DF DF 00 
33f4d 81e 00 FF FF 00 
33f51 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
33f55 820 39 FF FF 00 
33f59 821 55 FF FF 00 
33f5d 822 71 FF FF 00 
33f61 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
33f65 824 AA FF FF 00 
33f69 825 C6 FF FF 00 
33f6d 826 E3 FF FF 00 
33f71 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
33f75 828 00 28 40 00 
33f79 829 00 3C 60 00 
33f7d 82a 00 50 80 00 
33f81 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
33f85 82c 00 78 BF 00 
33f89 82d 00 8C DF 00 
33f8d 82e 00 A0 FF 00 
33f91 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
33f95 830 39 B5 FF 00 
33f99 831 55 C0 FF 00 
33f9d 832 71 CA FF 00 
33fa1 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
33fa5 834 AA DF FF 00 
33fa9 835 C6 EA FF 00 
33fad 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
33fb0 837             | 
33fb0 837             | '**********************************************************************************
33fb0 837             | '
33fb0 837             | '        Timings and colors definitions
33fb0 837             | '
33fb0 837             | '**********************************************************************************
33fb0 837             | 
33fb0 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
33fb0 837 08 00 00 00 
33fb4 838 3C 00 00 00 
33fb8 839 08 00 00 00 
33fbc 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         336956522,   %1_101101__11_0000_0110__1111_1011,   600,        0,     192, 0, 0
33fc0 83b 07 00 00 00 
33fc4 83c 04 00 00 00 
33fc8 83d 01 00 00 00 
33fcc 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
33fd0 83f 58 02 00 00 
33fd4 840 6A 8C 15 14 
33fd8 841 FB 06 B7 01 
33fdc 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $58, $02, $00, $00
33fe0 843 00 00 00 00 
33fe4 844 C0 00 00 00 
33fe8 845 00 00 00 00 
33fec 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33ff0 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
33ff0 847 00 75 C7 97 
33ff4 848 27 47 F6 0A 
33ff8 849 05 79 CB 9B 
33ffc 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
34000 84b             | 
34000 84b             | ''--------  Initialization  ----------------------------------------------------------------
34000 84b             | 
34000 84b 28 0C 64 FD | hdmi            setq    #6
34004 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
34008 84d 28 10 64 FD |                 setq    #8
3400c 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
34010 84f             | 
34010 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
34014 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
34018 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3401c 852 D6 C6 01 F1 |                 add     t1,hbase
34020 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
34024 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
34028 855 7B 0B 80 5F 
3402c 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
34030 857 66 66 86 FF 
34034 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
34038 859             | '
34038 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
3403c 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
34040 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
34044 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
34048 85d             | 
34048 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3404c 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
34050 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
34054 860             | 
34054 860             | ''--------  frame rendering main loop  ---------------------------------------------------
34054 860             | 
34054 860 28 06 64 FD | p101            setq 	#3
34058 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
3405c 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
34060 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
34064 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
34068 865 00 A0 05 F6 |                 mov     dlinum, #0
3406c 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
34070 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
34074 868             | 
34074 868             | 
34074 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
34078 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3407c 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
34080 86b             |                 
34080 86b             | 
34080 86b             | 
34080 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
34080 86b             |   
34080 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
34084 86c 29 FE 65 3D |          if_nc  setq2   #255
34088 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3408c 86e             | 
3408c 86e             | '' -----   up porch (before the picture)
3408c 86e             | 
3408c 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
34090 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
34094 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
34098 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3409c 872             |  
3409c 872             |    
3409c 872             |  
3409c 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
340a0 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
340a4 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
340a8 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
340ac 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
340b0 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
340b4 878             | 
340b4 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
340b8 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
340bc 87a 48 00 B0 FD | 		call    #dli
340c0 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
340c4 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
340c8 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
340cc 87e             |                 	
340cc 87e             |                 
340cc 87e             | 
340cc 87e             |  
340cc 87e             | '' ------- the main screen drawing starts here
340cc 87e             | 
340cc 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
340d0 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
340d4 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
340d8 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
340dc 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
340e0 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
340e4 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
340e8 885             |               
340e8 885             | 
340e8 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
340ec 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
340f0 887             | 
340f0 887             | ' ---------------- All visible lines displayed now, start vblank  
340f0 887             | 
340f0 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
340f4 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
340f8 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
340fc 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
34100 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
34104 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
34108 88d             | 
34108 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
34108 88d             | 
34108 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
34108 88d             | 
34108 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3410c 88e             | 
3410c 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
34110 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
34114 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
34118 891             | 
34118 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3411c 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
34120 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
34124 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
34128 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3412c 896             | 
3412c 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
34130 897 DD C6 41 F8 |                 getnib  t1,dl,#0
34134 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
34138 899 70 00 90 AD |     if_z        jmp     #preload
3413c 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
34140 89b 94 00 90 AD |     if_z        jmp     #preload2
34144 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
34148 89d 0C 00 90 AD |     if_z        jmp     #p390
3414c 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
34150 89f 28 00 90 AD |     if_z        jmp     #p391  
34154 8a0             | 
34154 8a0 2D 00 64 FD | p308            ret
34158 8a1             |    
34158 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3415c 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
34160 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
34164 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
34168 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3416c 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
34170 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
34174 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
34178 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3417c 8aa             |  
3417c 8aa             | '' --------  Reload palette. To do 
3417c 8aa             | 
3417c 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
34180 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
34184 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
34188 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3418c 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
34190 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
34194 8b0 70 FF 9F FD |         	jmp     #dli                
34198 8b1             |       
34198 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
34198 8b1             | 
34198 8b1             | 
34198 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
34198 8b1             | 
34198 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3419c 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
341a0 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
341a4 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
341a8 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
341ac 8b6             |         
341ac 8b6             | '' -------------- Preload a line from PSRAM        
341ac 8b6             |         
341ac 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
341b0 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
341b4 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
341b8 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
341bc 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
341c0 8bb             | 
341c0 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
341c4 8bc 32 B7 01 F6 |                 mov     buf2,a1024
341c8 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
341cc 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
341d0 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
341d4 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
341d8 8c1             |  
341d8 8c1             |  
341d8 8c1             | preload2      '  incmod  dlinum,#3
341d8 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
341dc 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
341e0 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
341e4 8c4 28 02 64 FD |                 setq	#1
341e8 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
341ec 8c6             |                 
341ec 8c6             | 
341ec 8c6             | '' -------------- Draw sprites
341ec 8c6             | 
341ec 8c6 CF 5C 02 F6 | sprite          mov t8,frames
341f0 8c7 10 5C 0E F5 | 		and t8,#16 wz
341f4 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
341f8 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
341fc 8ca             | 		
341fc 8ca             | 
341fc 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
34200 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
34204 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
34208 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3420c 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
34210 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
34214 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
34218 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
3421c 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
34220 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
34224 8d4 01 52 86 F1 |                 sub     sprite_h,#1
34228 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
3422c 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
34230 8d7             | 
34230 8d7             | 
34230 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
34234 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
34238 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3423c 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
34240 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
34244 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
34248 8dd 00 5E 06 F6 |                 mov 	t9,#0
3424c 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
34250 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
34254 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
34258 8e1             |      
34258 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3425c 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
34260 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
34264 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
34268 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3426c 8e6             |                 
3426c 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
34270 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
34274 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
34278 8e9             |   		
34278 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3427c 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
34280 8eb             | 
34280 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
34284 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
34288 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3428c 8ee             |  
3428c 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
34290 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
34294 8f0 10 00 90 CD |      if_c 	jmp     #p899		
34298 8f1             | 	
34298 8f1             | 	
34298 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3429c 8f2 28 CD 01 F1 | 		add	t4,sprite_w
342a0 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
342a4 8f4             | 
342a4 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
342a8 8f5             | 
342a8 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
342ac 8f6 01 58 86 F1 | 	 	sub     t6,#1
342b0 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
342b4 8f8             | 
342b4 8f8 28 58 62 FD |                 setq   	t6
342b8 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
342bc 8fa 28 5D 02 F6 |                 mov t8,sprite_w
342c0 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
342c4 8fc 24 00 90 AD |         if_z    jmp #p898
342c8 8fd             |          
342c8 8fd             |         
342c8 8fd 70 5F 06 F6 |                 mov  t9,#368
342cc 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
342d0 8ff             | 
342d0 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
342d4 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
342d8 901 FF FF 7F FF 
342dc 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
342e0 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
342e4 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
342e8 905 2D 01 00 F5 |                 and 0-0, t7
342ec 906             |                
342ec 906             | 
342ec 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
342f0 907 E5 E0 7A FA |                 wmlong 368,t3				
342f4 908             |                 
342f4 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
342f8 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
342fc 90a 2D 00 64 FD |                 ret
34300 90b             | 	
34300 90b             | 	
34300 90b             |                
34300 90b             |  
34300 90b             | '' -------------- Graphics line ------------------------------------------------------------
34300 90b             |  
34300 90b             | 
34300 90b             | '' consts and vars
34300 90b             | 
34300 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
34304 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
34308 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3430c 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
34310 90f             | 
34310 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
34314 910             | 
34314 910             | '------ these longs will be set by setmode function
34314 910             | 
34314 910 00 00 00 00 | m_bs            long    0        'blanks before sync
34318 911 00 00 00 00 | m_sn            long    0        'sync
3431c 912 00 00 00 00 | m_bv            long    0        'blanks before visible
34320 913 00 00 00 00 | m_vi            long    0        'visible pixels #
34324 914             | 'm_border        long    0        'left/right borders
34324 914 00 00 00 00 | i_upporch       long    0        'up porch lines
34328 915 00 00 00 00 | i_vsync         long    0        'vsync lines
3432c 916 00 00 00 00 | i_downporch     long    0        'down porch lines
34330 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
34334 918 00 00 00 00 | i_totalvis      long    0
34338 919             | 
34338 919             | '-------------------------------------
34338 919             |  
34338 919 00 00 00 00 | linenum         long    0
3433c 91a 00 00 00 00 | frames          long    0
34340 91b 00 00 00 00 | dlinum long 0
34344 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
34348 91d             | 
34348 91d 00 00 00 00 | vblankptr       long    0
3434c 91e 00 00 00 00 | modeptr         long    0
34350 91f 00 00 00 00 | paletteptr      long    0
34354 920 00 00 00 00 | dlptr           long    0
34358 921 01 00 00 00 | hbase           long    1
3435c 922 00 00 00 00 | mailbox         long    0
34360 923 00 00 00 00 | spriteptr          long 0
34364 924             | 
34364 924 00 00 00 00 | cmd             long    0
34368 925 00 B0 07 00 | buf1            long    $80000-16384-4096
3436c 926 00 04 00 00 | buf2            long    1024
34370 927 01 00 00 00 | dlptr2          long    1
34374 928 01 00 00 00 | dl              long    1
34378 929             | 
34378 929 00 00 00 00 | buf1c long 0
3437c 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
34380 92b 01 00 00 00 | framebuf2       long    1
34384 92c 01 00 00 00 | hsync0          long    1
34388 92d 01 00 00 00 | hsync1          long    1
3438c 92e             | 
3438c 92e 01 00 00 00 | t1              long    1
34390 92f 00 00 00 00 | t2 long 0
34394 930 00 00 00 00 | t3 long 0
34398 931 00 00 00 00 | t4 long 0
3439c 932             | 
3439c 932 00 00 00 00 | rcnt            long    0  'dl repeat count
343a0 933 00 00 00 00 | rcnt2           long    0
343a4 934 00 00 00 00 | rcnt2a          long    0
343a8 935 00 00 00 00 | roffset         long    0
343ac 936 00 00 00 00 | rdl             long    0  'dl repeat line
343b0 937 00 00 00 00 | dlc             long    0  'dl command
343b4 938             | 
343b4 938 FF FF FF FF | affffffff       long    $ffffffff
343b8 939 00 00 00 00 | sprite1pointer long 0
343bc 93a 00 00 00 00 | sprite1xy      long 0
343c0 93b 00 00 00 00 | sprite1wh      long 0
343c4 93c 00 00 00 00 | sprite2pointer long 0
343c8 93d 00 00 00 00 | sprite2xy      long 0
343cc 93e 00 00 00 00 | sprite2wh      long 0
343d0 93f 00 00 00 00 | sprite3pointer long 0
343d4 940 00 00 00 00 | sprite3xy      long 0
343d8 941 00 00 00 00 | sprite3wh      long 0
343dc 942 00 00 00 00 | sprite4pointer long 0
343e0 943 00 00 00 00 | sprite4xy      long 0
343e4 944 00 00 00 00 | sprite4wh      long 0
343e8 945 00 00 00 00 | sprite5pointer long 0
343ec 946 00 00 00 00 | sprite5xy      long 0
343f0 947 00 00 00 00 | sprite5wh      long 0
343f4 948 00 00 00 00 | sprite6pointer long 0
343f8 949 00 00 00 00 | sprite6xy      long 0
343fc 94a 00 00 00 00 | sprite6wh      long 0
34400 94b 00 00 00 00 | sprite7pointer long 0
34404 94c 00 00 00 00 | sprite7xy      long 0
34408 94d 00 00 00 00 | sprite7wh      long 0
3440c 94e 00 00 00 00 | sprite8pointer long 0
34410 94f 00 00 00 00 | sprite8xy      long 0
34414 950 00 00 00 00 | sprite8wh      long 0
34418 951 00 00 00 00 | sprite9pointer long 0
3441c 952 00 00 00 00 | sprite9xy      long 0
34420 953 00 00 00 00 | sprite9wh      long 0
34424 954 00 00 00 00 | sprite10pointer long 0
34428 955 00 00 00 00 | sprite10xy      long 0
3442c 956 00 00 00 00 | sprite10wh      long 0
34430 957 00 00 00 00 | sprite11pointer long 0
34434 958 00 00 00 00 | sprite11xy      long 0
34438 959 00 00 00 00 | sprite11wh      long 0
3443c 95a 00 00 00 00 | sprite12pointer long 0
34440 95b 00 00 00 00 | sprite12xy      long 0
34444 95c 00 00 00 00 | sprite12wh      long 0
34448 95d 00 00 00 00 | sprite13pointer long 0
3444c 95e 00 00 00 00 | sprite13xy      long 0
34450 95f 00 00 00 00 | sprite13wh      long 0
34454 960 00 00 00 00 | sprite14pointer long 0
34458 961 00 00 00 00 | sprite14xy      long 0
3445c 962 00 00 00 00 | sprite14wh      long 0
34460 963 00 00 00 00 | sprite15pointer long 0
34464 964 00 00 00 00 | sprite15xy      long 0
34468 965 00 00 00 00 | sprite15wh      long 0
3446c 966 00 00 00 00 | sprite16pointer long 0
34470 967 00 00 00 00 | sprite16xy      long 0
34474 968 00 00 00 00 | sprite16wh      long 0
34478 969 00 00 00 00 | sprite17pointer long 0
3447c 96a 00 00 00 00 | sprite17xy      long 0
34480 96b 00 00 00 00 | sprite17wh      long 0
34484 96c 00 00 00 00 | sprite18pointer long 0
34488 96d 00 00 00 00 | sprite18xy      long 0
3448c 96e 00 00 00 00 | sprite18wh      long 0
34490 96f 00 00 00 00 | spritenum long 0
34494 970             | 
34494 970 00 00 00 00 | spriteline long 0
34498 971 84 03 00 00 | sprite_x long 900
3449c 972 00 00 00 00 | sprite_y long 0
344a0 973 10 00 00 00 | sprite_w long 16
344a4 974 40 00 00 00 | sprite_h long 64
344a8 975 00 00 00 00 | l2 long 0
344ac 976 00 00 00 00 | t5 long 0
344b0 977 00 00 00 00 | t6 long 0
344b4 978 00 00 00 00 | t7 long 0
344b8 979 00 00 00 00 | t8 long 0
344bc 97a 00 00 00 00 | t9 long 0
344c0 97b 00 00 00 00 | preloadaddr long 0
344c4 97c 00 00 00 00 | preloadlineaddr long 0
344c8 97d 00 04 00 00 | a1024 long 1024
344cc 97e             | 
344cc 97e E0 03 00 00 | aa long 992
344d0 97f FF 03 00 00 | a1023 long 1023
344d4 980 00 10 00 00 | a4096 long 4096
344d8 981             |  fit 368
344d8 981             | _psram_spin2_dat_
344d8 981 00 00 00 00 
      ...             
345d0 9bf 00 00 00 00 
345d4 9c0 00 00 00 00 |     listdata long 0[8*8]
345d8 9c1             |             orgh
345d8                 | 
345d8                 | ' driver state
345d8     FF FF FF FF | drivercog   long    -1  ' COG id of driver
345dc     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
345e0                 | 
345e0                 | ' delay profile
345e0     07 00 00 00 
345e4     00 CF 7B 05 
345e8     80 D1 F0 08 
345ec     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
345f0     80 C4 60 0F 
345f4     80 39 7A 12 
345f8     40 2D D9 13 
345fc     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
34600                 | 
34600                 | ' data to be passed to driver when starting it
34600                 | startupData
34600     00 00 00 00 |     long    0           ' current frequency
34604     00 00 00 00 |     long    FLAGS       ' optional flags for driver
34608     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3460c     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
34610     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
34614     20 46 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
34618     A0 46 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3461c     C0 46 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
34620                 | 
34620                 | ' data for memory
34620                 | deviceData
34620                 |     ' 16 bank parameters follow (16MB per bank)
34620     00 00 00 00 
      ...             
34658     00 00 00 00 
3465c     00 00 00 00 |     long    0[16]                               ' banks 0-15
34660                 |     ' 16 banks of pin parameters follow
34660     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
34664     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
34668     FF FF FF FF 
      ...             
34698     FF FF FF FF 
3469c     FF FF FF FF |     long    -1[14]                              ' banks 2-15
346a0                 | 
346a0                 | ' data for COG polling
346a0                 | qosData 
346a0     00 00 FF FF 
346a4     00 00 FF FF 
346a8     00 00 FF FF 
346ac     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
346b0     00 00 FF FF 
346b4     00 00 FF FF 
346b8     00 00 FF FF 
346bc     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
346c0                 |     
346c0                 | ' mailbox storage
346c0                 | 
346c0                 | mailboxes
346c0     00 00 00 00 
      ...             
34718     00 00 00 00 
3471c     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
34720                 | 	alignl
34720                 | _psram16drv_spin2_dat_
34720                 |                             orgh
34720     00 00 00 00 
      ...             
34738     00 00 00 00 
3473c     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
34740                 | 
34740                 | driver_start
34740                 |                             org
34740 000             | '..................................................................................................
34740 000             | ' Memory layout for COG RAM once operational:
34740 000             | '
34740 000             | '  COG RAM address      Usage
34740 000             | '  ---------------      ----
34740 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
34740 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
34740 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
34740 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
34740 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
34740 000             | '  ~$198-$1F3           State and register variables
34740 000             | '
34740 000             | ' Also during driver COG startup:
34740 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
34740 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
34740 000             | '..................................................................................................
34740 000             |                             
34740 000             | ' Mailbox storage after vector initialization
34740 000             | 
34740 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
34744 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
34748 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3474c 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
34750 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
34754 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
34758 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3475c 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
34760 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
34764 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
34768 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3476c 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
34770 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
34774 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
34778 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3477c 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
34780 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
34784 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
34788 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3478c 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
34790 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
34794 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
34798 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3479c 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
347a0 018             | 
347a0 018             | ' Mailbox parameter addresses per COG once patched
347a0 018             |                             
347a0 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
347a4 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
347a8 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
347ac 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
347b0 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
347b4 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
347b8 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
347bc 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
347c0 020             | 
347c0 020             | '..................................................................................................
347c0 020             | ' Per COG request and state setup and service branching
347c0 020             |         
347c0 020             | cog0                 
347c0 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
347c4 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
347c8 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
347cc 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
347d0 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
347d4 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
347d8 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
347dc 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
347e0 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
347e4 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
347e8 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
347ec 02b 33 CA 63 FD |                             execf   request-0               'jump to service
347f0 02c             | cog1                        
347f0 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
347f4 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
347f8 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
347fc 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
34800 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
34804 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34808 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3480c 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
34810 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
34814 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34818 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3481c 037 33 CA 63 FD |                             execf   request-0               'jump to service
34820 038             | cog2                         
34820 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
34824 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
34828 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3482c 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
34830 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
34834 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34838 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3483c 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
34840 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
34844 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34848 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3484c 043 33 CA 63 FD |                             execf   request-0               'jump to service
34850 044             | cog3                        
34850 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
34854 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
34858 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3485c 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
34860 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
34864 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34868 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3486c 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
34870 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
34874 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34878 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3487c 04f 33 CA 63 FD |                             execf   request-0               'jump to service
34880 050             | cog4                        
34880 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
34884 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
34888 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
3488c 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
34890 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
34894 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34898 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
3489c 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
348a0 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
348a4 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
348a8 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
348ac 05b 33 CA 63 FD |                             execf   request-0               'jump to service
348b0 05c             | cog5                        
348b0 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
348b4 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
348b8 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
348bc 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
348c0 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
348c4 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
348c8 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
348cc 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
348d0 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
348d4 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
348d8 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
348dc 067 33 CA 63 FD |                             execf   request-0               'jump to service
348e0 068             | cog6                        
348e0 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
348e4 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
348e8 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
348ec 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
348f0 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
348f4 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
348f8 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
348fc 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
34900 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
34904 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34908 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3490c 073 33 CA 63 FD |                             execf   request-0               'jump to service
34910 074             | cog7                        
34910 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
34914 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
34918 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3491c 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
34920 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
34924 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
34928 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3492c 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
34930 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
34934 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
34938 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3493c 07f 33 CA 63 FD |                             execf   request-0               'jump to service
34940 080             |                             fit     128
34940 080             | 
34940 080             |                             fit     128
34940 080             | pad                         long    0[128-$]                'align init code to $80
34940 080             | 
34940 080             | '..................................................................................................
34940 080             | 
34940 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
34940 080             | 
34940 080             | init                        
34940 080             |                             ' get driver scratch long address in hub
34940 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
34944 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
34948 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3494c 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
34950 084             |                     
34950 084             |                             ' read in the additional LUT RAM code
34950 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
34954 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
34958 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3495c 087             | 
3495c 087             |                             ' read the startup parameters
3495c 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
34960 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
34964 089             | 
34964 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
34964 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
34968 08a             | 
34968 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3496c 08b 01 00 00 5F 
34970 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
34974 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
34978 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3497c 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
34980 090             | 
34980 090             |                             ' setup data pin modes and data bus pin group in streamer commands
34980 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
34984 091 01 00 00 FF 
34988 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
3498c 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
34990 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
34994 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
34998 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
3499c 097 08 DE 47 F5 |                             or      a, #8
349a0 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
349a4 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
349a8 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
349ac 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
349b0 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
349b4 09d 01 DE 07 F1 |                             add     a, #1
349b8 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
349bc 09f             |  
349bc 09f             |                             ' setup device control pin states
349bc 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
349c0 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
349c4 0a1 01 00 00 FF 
349c8 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
349cc 0a3             | 
349cc 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
349d0 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
349d4 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
349d8 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
349dc 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
349e0 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
349e4 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
349e8 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
349ec 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
349f0 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
349f4 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
349f8 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
349fc 0af             | pinloop
349fc 0af             |                             ' generate minimum CE high time before access
349fc 0af A1 07 00 FF 
34a00 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
34a04 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
34a08 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
34a0c 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
34a10 0b4 1F DE 63 FD |                             waitx   a                       'delay
34a14 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
34a18 0b6             | 
34a18 0b6             |                             ' setup the COG mailboxes and addresses 
34a18 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
34a1c 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
34a20 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
34a24 0b9             | 
34a24 0b9 28 2E 64 FD |                             setq    #24-1
34a28 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
34a2c 0bb             | 
34a2c 0bb             |                             ' setup the polling loop for active COGs 
34a2c 0bb 01 C2 63 FD |                             cogid   id
34a30 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
34a34 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
34a38 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
34a3c 0bf 0A F0 07 F6 |                             mov     ptra, #10
34a40 0c0 E1 F1 03 FA |                             mul     ptra, id
34a44 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
34a48 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
34a4c 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
34a50 0c4 03 C2 07 FA |                             mul     id, #3
34a54 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
34a58 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
34a5c 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
34a60 0c8 D8 01 B0 FD |                             call    #reloadcogs
34a64 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
34a68 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
34a6c 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
34a6c 0cb D8 E5 B7 F9 |                             setd    d, #addr1
34a70 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
34a74 0cd 08 04 DC FC |                             rep     #2, #8
34a78 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
34a7c 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
34a80 0d0             | 
34a80 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
34a80 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
34a80 0d0 01 C2 63 FD |                             cogid   id
34a84 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
34a88 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
34a8c 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
34a90 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
34a94 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
34a98 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
34a9c 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
34aa0 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
34aa4 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
34aa8 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
34aac 0db 3F E4 A7 F9 |                             alti    d, #%111_111
34ab0 0dc 00 00 00 F6 |                             mov     0-0, 0-0
34ab4 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
34ab8 0de A5 E5 03 F1 |                             add     d, const512
34abc 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
34ac0 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
34ac4 0e1 00 00 00 F6 |                             mov     0-0, 0-0
34ac8 0e2             |                             
34ac8 0e2             |                             ' setup register values for control vector loop setup after we return
34ac8 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
34acc 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
34ad0 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
34ad4 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
34ad8 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
34adc 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
34ae0 0e8 D0 C3 8F F9 |                             altd    id, #id0
34ae4 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
34ae8 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
34aec 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
34af0 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
34af4 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
34af8 0ee             |  
34af8 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
34afc 0ef 07 CA 07 F5 |                             and     request, #7
34b00 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
34b04 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
34b08 0f2             |                             fit     $100                    'ensure all init code fits this space
34b08 0f2             | 
34b08 0f2             |                             fit     $100                    'ensure all init code fits this space
34b08 0f2             | 
34b08 0f2 00 00 00 00 
      ...             
34b38 0fe 00 00 00 00 
34b3c 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
34b40 100             | 
34b40 100             | '..................................................................................................
34b40 100             | ' Error result handling and COG notification of request completion
34b40 100             | 
34b40 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
34b44 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
34b48 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
34b4c 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
34b50 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
34b54 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
34b58 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
34b5c 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
34b60 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
34b64 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
34b68 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
34b6c 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
34b70 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
34b74 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
34b78 10e             | ' Poller re-starts here after a COG is serviced
34b78 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
34b7c 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
34b80 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
34b84 111             | ' Main dynamic polling loop repeats until a request arrives
34b84 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
34b88 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
34b8c 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
34b90 114             | 
34b90 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
34b94 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
34b98 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
34b9c 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
34ba0 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
34ba4 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
34ba8 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
34bac 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
34bb0 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
34bb4 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
34bb8 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
34bbc 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
34bc0 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
34bc4 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
34bc8 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
34bcc 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
34bd0 124             | 
34bd0 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
34bd4 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
34bd8 126             |  
34bd8 126             | '..................................................................................................
34bd8 126             | ' List handler                               
34bd8 126             | 
34bd8 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
34bdc 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
34be0 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
34be4 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
34be8 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
34bec 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
34bf0 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
34bf4 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
34bf8 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
34bfc 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
34c00 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
34c04 131 33 00 60 FD |                             execf   0-0                     'process the request 
34c08 132             | 
34c08 132             | '..................................................................................................
34c08 132             | ' Restoring per COG state and resuming where we left off
34c08 132             | 
34c08 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
34c0c 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
34c10 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
34c14 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
34c18 136 D8 CB FB F8 |                             getbyte request, addr1, #3
34c1c 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
34c20 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
34c24 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
34c28 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
34c2c 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
34c30 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
34c34 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
34c38 13e             |                    
34c38 13e             | '..................................................................................................
34c38 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
34c38 13e             | 
34c38 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
34c3c 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
34c40 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
34c44 141 D0 DF B7 F9 |                             setd    a, #id0
34c48 142 D8 DF BF F9 |                             sets    a, #addr1
34c4c 143 FE FF FF FF 
34c50 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
34c54 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
34c58 146 3F DE A7 F9 |                             alti    a, #%111_111 
34c5c 147 00 00 F0 F9 |                             muxq    0-0, 0-0
34c60 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
34c64 149 01 E2 63 FD |                             cogid   c
34c68 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
34c6c 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
34c70 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
34c74 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
34c78 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
34c7c 14f 00 E0 03 F6 |                             mov     b, 0-0
34c80 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
34c84 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
34c88 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
34c8c 153 0C 00 90 AD |             if_z            jmp     #excluded               
34c90 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
34c94 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
34c98 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
34c9c 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
34ca0 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
34ca4 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
34ca8 15a             | 
34ca8 15a             | 'determine priority cogs and build instructions for the polling sequence
34ca8 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
34cac 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
34cb0 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
34cb4 15d             | 
34cb4 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
34cb8 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
34cbc 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
34cc0 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
34cc4 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
34cc8 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
34ccc 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
34cd0 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
34cd4 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
34cd8 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
34cdc 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
34ce0 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
34ce4 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
34ce8 16a             | endprioloop
34ce8 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
34cec 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
34cf0 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
34cf4 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
34cf8 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
34cfc 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
34d00 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
34d04 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
34d08 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
34d0c 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
34d10 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
34d14 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
34d18 176             | 
34d18 176             | ' populate the round robin COG polling instructions
34d18 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
34d1c 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
34d20 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
34d24 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
34d28 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
34d2c 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
34d30 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
34d34 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
34d38 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
34d3c 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
34d40 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
34d44 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
34d48 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
34d4c 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
34d50 184             | '..................................................................................................
34d50 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
34d50 184             | 
34d50 184             | set_latency                                                 '            (a) set latency
34d50 184             | get_latency                                                 '            (b) get latency
34d50 184             | set_burst                                                   '            (c) set burst size of bank
34d50 184             | get_burst                                                   '            (d) get burst size of bank
34d50 184             |                                                             '            (e) dump state
34d50 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
34d54 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
34d58 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
34d5c 187             |                                                             ' | | | | e  account for following AUGS
34d5c 187 04 00 00 FF 
34d60 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
34d64 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
34d68 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
34d6c 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
34d70 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
34d74 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
34d78 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
34d7c 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
34d80 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
34d84 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
34d88 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
34d8c 193             | 
34d8c 193             | '..................................................................................................
34d8c 193             | ' Misc EXECF code
34d8c 193             | 
34d8c 193 33 72 63 FD | start_read_exec             execf   newburstr
34d90 194 33 7C 63 FD | start_write_exec            execf   resumewrites
34d94 195 33 78 63 FD | continue_read_exec          execf   lockedreads
34d98 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
34d9c 197             | 
34d9c 197             | '..................................................................................................
34d9c 197             | ' Variables
34d9c 197             | 
34d9c 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
34da0 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
34da4 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
34da8 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
34dac 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
34db0 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
34db4 19d             | 
34db4 19d 00 00 00 80 | xfreq1          long    $80000000
34db8 19e 00 00 00 40 | xfreq2          long    $40000000
34dbc 19f 03 00 00 00 | delay           long    3
34dc0 1a0             | 
34dc0 1a0             | lutcodeaddr                 
34dc0 1a0             | startupparams
34dc0 1a0             | excludedcogs                                    'careful: shared register use!
34dc0 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
34dc4 1a1 00 00 00 00 | flags           long    0
34dc8 1a2             | mask                                            'careful: shared register use!
34dc8 1a2 00 00 00 00 | resetmaskA      long    0
34dcc 1a3             | limit                                           'careful: shared register use!
34dcc 1a3 00 00 00 00 | resetmaskB      long    0
34dd0 1a4 00 00 00 00 | datapins        long    0
34dd4 1a5             | const512                                        'careful: shared register use!
34dd4 1a5 00 00 00 00 | devicelist      long    0
34dd8 1a6 00 00 00 00 | coglist         long    0
34ddc 1a7 00 00 00 00 | mbox            long    0 
34de0 1a8             | 
34de0 1a8             | clkpin                                          'shared with code patched during init
34de0 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
34de4 1a9             | cspin                                           'shared with code patched during init
34de4 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
34de8 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
34dec 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
34df0 1ac 01 00 00 00 | clkdelay        long    1
34df4 1ad 00 00 00 00 | regdatabus      long    0
34df8 1ae             | 
34df8 1ae 10 00 00 00 | deviceaddr      long    $10
34dfc 1af             | rrcounter
34dfc 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
34e00 1b0             | 
34e00 1b0             | ' jump addresses for the per COG handlers
34e00 1b0 20 00 00 00 | cog0_handler    long    cog0
34e04 1b1 2C 00 00 00 | cog1_handler    long    cog1
34e08 1b2 38 00 00 00 | cog2_handler    long    cog2
34e0c 1b3 44 00 00 00 | cog3_handler    long    cog3
34e10 1b4 50 00 00 00 | cog4_handler    long    cog4
34e14 1b5 5C 00 00 00 | cog5_handler    long    cog5
34e18 1b6 68 00 00 00 | cog6_handler    long    cog6
34e1c 1b7 74 00 00 00 | cog7_handler    long    cog7
34e20 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
34e24 1b9             | 
34e24 1b9             | ' EXECF sequences
34e24 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
34e28 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
34e2c 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
34e30 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
34e34 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
34e38 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
34e3c 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
34e40 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
34e40 1c0             | 
34e40 1c0             | 
34e40 1c0             | ' SKIPF sequences
34e40 1c0             | skiptable
34e40 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
34e44 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
34e48 1c2 00 00 00 00 |                 long    0                      ' read modify write long
34e4c 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
34e50 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
34e54 1c5 00 00 00 00 | pattern2        long    0
34e58 1c6 00 00 00 00 | pattern3        long    0
34e5c 1c7 77 02 00 00 | singlelong      long    %1001110111  
34e60 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
34e64 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
34e68 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
34e6c 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
34e70 1cc             | 
34e70 1cc             | ' LUT RAM address values
34e70 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
34e74 1cd DD 02 00 00 | continue_read   long    continue_read_lut
34e78 1ce DB 02 00 00 | continue_write  long    continue_write_lut
34e7c 1cf F6 02 00 00 | noread          long    noread_lut
34e80 1d0             | 
34e80 1d0 00 00 00 00 | id0             long    0
34e84 1d1 01 00 00 00 | id1             long    1
34e88 1d2 02 00 00 00 | id2             long    2
34e8c 1d3 03 00 00 00 | id3             long    3
34e90 1d4 04 00 00 00 | id4             long    4
34e94 1d5 05 00 00 00 | id5             long    5
34e98 1d6 06 00 00 00 | id6             long    6
34e9c 1d7 07 00 00 00 | id7             long    7
34ea0 1d8             | 
34ea0 1d8             | 'These next 10 request registers below are also temporarily reused during init 
34ea0 1d8             | 'and COG updates and need to follow immediately after id0-id7
34ea0 1d8 00 00 00 00 | addr1           long    0
34ea4 1d9 00 00 00 00 | hubdata         long    0
34ea8 1da 00 00 00 00 | count           long    0
34eac 1db 00 00 00 00 | addr2           long    0
34eb0 1dc 00 00 00 00 | total           long    0
34eb4 1dd 00 00 00 00 | offset1         long    0
34eb8 1de 00 00 00 00 | offset2         long    0
34ebc 1df 00 00 00 00 | link            long    0
34ec0 1e0             | 
34ec0 1e0             | burstwrite                                      'note shared register use during init
34ec0 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
34ec4 1e1 00 00 00 00 | id              long    0
34ec8 1e2             | 
34ec8 1e2 00 00 00 00 | header          long    0
34ecc 1e3 00 00 00 00 | trailer         long    0
34ed0 1e4 00 00 00 00 | cmdaddr         long    0
34ed4 1e5 00 00 00 00 | request         long    0
34ed8 1e6 00 00 00 00 | rrlimit         long    0
34edc 1e7 00 00 00 00 | pinconfig       long    0
34ee0 1e8 00 00 00 00 | clks            long    0
34ee4 1e9 00 00 00 00 | resume          long    0
34ee8 1ea 00 00 00 00 | orighubsize     long    0
34eec 1eb 00 00 00 00 | wrclks          long    0
34ef0 1ec             | 
34ef0 1ec 00 00 00 00 | pattern         long    0
34ef4 1ed 00 00 00 00 | hubscratch      long    0
34ef8 1ee 00 10 00 00 | val4k           long    4096
34efc 1ef             | 
34efc 1ef             | ' temporary general purpose regs
34efc 1ef 00 00 00 00 | a               long    0
34f00 1f0 00 00 00 00 | b               long    0
34f04 1f1 00 00 00 00 | c               long    0
34f08 1f2 00 00 00 00 | d               long    0
34f0c 1f3             |                 fit     502
34f0c 1f3             | 
34f0c 1f3             |                 fit     502
34f0c 1f3             | 
34f0c 1f3             | '..................................................................................................
34f0c 1f3             | 
34f0c 1f3             |             orgh
34f0c                 | 
34f0c                 | lut_code
34f0c                 | 'HW init code up to 80 longs
34f0c                 | 
34f0c                 | '..................................................................................................
34f0c                 | ' Memory layout for LUT RAM once operational:
34f0c                 | '
34f0c                 | '  LUT RAM address      Usage
34f0c                 | '  ---------------      ----
34f0c                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
34f0c                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
34f0c                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
34f0c                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
34f0c                 | '
34f0c                 | ' Also during driver COG startup:
34f0c                 | ' $230-$24F is used for HW init setup
34f0c                 | ' $250-$26F is used as temporary vector storage 
34f0c                 | '..................................................................................................
34f0c                 | 
34f0c                 |                 org $230    
34f0c 230             | 
34f0c 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
34f0c 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
34f10 231 24 16 60 FD |                             pollxfi
34f14 232 FF AA 2A FF 
34f18 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
34f1c 234 28 00 B0 FD |                             call    #sendqspi
34f20 235 07 F8 07 FF 
34f24 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
34f28 237 28 00 B0 FD |                             call    #sendspi
34f2c 238 F8 07 78 FF 
34f30 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
34f34 23a 1C 00 B0 FD |                             call    #sendspi
34f38 23b 7F 78 78 FF 
34f3c 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
34f40 23d 10 00 B0 FD |                             call    #sendspi 
34f44 23e 2D 00 64 FD |                             ret
34f48 23f             | 
34f48 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
34f4c 240 32 0C 64 FD |                             skipf   #%110
34f50 241 9C EF 03 F6 |                             mov     pb, xsendimm
34f54 242             | 
34f54 242 10 D0 07 F6 | sendspi                     mov     clks, #16
34f58 243 97 EF 03 F6 |                             mov     pb, ximm8lut
34f5c 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
34f60 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
34f64 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
34f68 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
34f6c 248 24 36 60 FD |                             waitxfi                         'wait for the completion
34f70 249 50 48 63 FD |                             fltl    datapins                'float data bus
34f74 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
34f78 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
34f7c 24c             | 
34f7c 24c 00 00 00 00 
34f80 24d 00 00 00 00 
34f84 24e 00 00 00 00 
34f88 24f 00 00 00 00 |                 long    0[$270-32-$]
34f8c 250             |                 fit     $270-32  ' keep room for 32 vector longs
34f8c 250             |     
34f8c 250             |                 fit     $270-32  ' keep room for 32 vector longs
34f8c 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
34f8c 250             | rw_vect ' PSRAM jump vectors
34f8c 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
34f90 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
34f94 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
34f98 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
34f9c 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
34fa0 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
34fa4 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
34fa8 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
34fac 258             | ro_vect ' R/O PSRAM jump vectors
34fac 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
34fb0 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
34fb4 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
34fb8 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
34fbc 25c 00 01 00 00 |                 long    unsupported
34fc0 25d 00 01 00 00 |                 long    unsupported
34fc4 25e 00 01 00 00 |                 long    unsupported
34fc8 25f 00 01 00 00 |                 long    unsupported
34fcc 260             | ctrl_vect ' Control jump vectors
34fcc 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
34fd0 261 00 01 00 00 |                 long    unsupported
34fd4 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
34fd8 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
34fdc 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
34fe0 265 00 01 00 00 |                 long    unsupported
34fe4 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
34fe8 267 3E 01 00 00 |                 long    reconfig 
34fec 268             | no_vect ' Invalid bank jump vectors
34fec 268 01 01 00 00 |                 long    invalidbank
34ff0 269 01 01 00 00 |                 long    invalidbank
34ff4 26a 01 01 00 00 |                 long    invalidbank
34ff8 26b 01 01 00 00 |                 long    invalidbank
34ffc 26c 01 01 00 00 |                 long    invalidbank
35000 26d 01 01 00 00 |                 long    invalidbank
35004 26e 01 01 00 00 |                 long    invalidbank
35008 26f 01 01 00 00 |                 long    invalidbank
3500c 270             |                 fit     $270
3500c 270             | 
3500c 270             |                 fit     $270
3500c 270             | '..................................................................................................
3500c 270             | ' PSRAM READS
3500c 270             |                                                             ' a b c d e f
3500c 270             |                                                             ' B W L B R L  (a) byte read
3500c 270             |                                                             ' Y O O U E O  (b) word read
3500c 270             |                                                             ' T R N R S C  (c) long read
3500c 270             |                                                             ' E D G S U K  (d) new burst read
3500c 270             |                                                             '       T M E  (e) resumed sub-burst
3500c 270             |                                                             '         E D  (f) locked sub-burst
3500c 270             | 
3500c 270             | 
3500c 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
35010 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
35014 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
35018 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3501c 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
35020 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
35024 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
35028 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3502c 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
35030 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
35034 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
35038 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3503c 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
35040 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
35044 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
35048 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3504c 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
35050 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
35054 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
35058 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3505c 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
35060 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
35064 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
35068 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3506c 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
35070 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
35074 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
35078 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3507c 28c             | 
3507c 28c             |                             ' fall through to read bursts
3507c 28c             |                         
3507c 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3507c 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
35080 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
35084 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
35088 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3508c 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
35090 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
35094 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
35098 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3509c 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
350a0 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
350a4 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
350a8 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
350ac 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
350b0 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
350b4 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
350b8 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
350bc 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
350c0 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
350c4 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
350c8 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
350cc 2a0 E8 D1 03 F1 |                             add     clks, clks
350d0 2a1             | readcommon
350d0 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
350d4 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
350d8 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
350dc 2a4             | 
350dc 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
350e0 2a5 69 C8 63 FD |                             rev     cmdaddr
350e4 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
350e8 2a7 61 C8 63 FD |                             mergeb  cmdaddr
350ec 2a8             | 
350ec 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
350f0 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
350f4 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
350f4 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
350f8 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
350fc 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
35100 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
35104 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
35104 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
35108 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3510c 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
35110 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
35114 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
35118 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3511c 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3511c 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
35120 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
35124 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
35128 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3512c 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
35130 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
35134 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
35138 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3513c 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
35140 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
35144 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
35148 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3514c 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
35150 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
35154 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
35154 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
35158 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3515c 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
35160 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
35164 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
35168 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3516c 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
35170 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
35174 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
35178 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3517c 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
35180 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
35184 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
35188 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3518c 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
35190 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
35194 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
35198 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3519c 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
351a0 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
351a4 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
351a8 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
351ac 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
351b0 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
351b4 2da 10 03 90 FD |                             jmp     #writecommon
351b8 2db             | 
351b8 2db             | '..................................................................................................
351b8 2db             | ' Burst continuation testing
351b8 2db             | 
351b8 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
351bc 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
351c0 2dd             | continue_read_lut          
351c0 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
351c4 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
351c8 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
351cc 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
351d0 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
351d4 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
351d8 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
351dc 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
351e0 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
351e4 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
351e8 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
351ec 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
351f0 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
351f4 2ea             | 
351f4 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
351f8 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
351fc 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
35200 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
35204 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
35208 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3520c 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
35210 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
35214 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
35218 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3521c 2f4 2A 1C 66 0D |             _ret_           push    #poller
35220 2f5             | 
35220 2f5             | 
35220 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
35224 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
35224 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
35228 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3522c 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
35230 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
35234 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
35238 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3523c 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
35240 2fd 2D 00 64 FD |                             ret                             ' | continue processing
35244 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
35248 2ff             | '..................................................................................................
35248 2ff             | ' Completion of requests
35248 2ff             | 
35248 2ff             | complete_rw_lut             
35248 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3524c 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
35250 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
35254 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
35258 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3525c 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
35260 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
35264 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
35268 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3526c 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
35270 309 32 62 64 AD |             if_z            skipf   #%110001
35274 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
35278 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3527c 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
35280 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
35284 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
35288 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3528c 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
35290 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
35294 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
35298 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3529c 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
352a0 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
352a4 316             |                                                             ' skipcase (a) gfx copy to/from hub
352a4 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
352a4 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
352a4 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
352a8 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
352ac 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
352b0 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
352b4 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
352b8 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
352bc 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
352c0 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
352c4 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
352c8 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
352cc 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
352d0 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
352d4 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
352d8 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
352dc 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
352e0 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
352e4 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
352e8 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
352ec 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
352f0 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
352f4 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
352f8 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
352fc 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
35300 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
35304 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
35308 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
3530c 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
35310 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
35314 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
35318 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3531c 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
35320 335 DF B7 03 A6 |             if_z            mov     addr2, link
35324 336 34 FF 9F AD |             if_z            jmp     #checknext
35328 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3532c 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
35330 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
35334 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
35338 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3533c 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
35340 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
35344 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
35348 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3534c 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
35350 341             | 
35350 341             | '..................................................................................................
35350 341             | ' PSRAM WRITES
35350 341             |                                                             '  a b c d e f g h
35350 341             | 
35350 341             |                                                             '  B W L F B R L L (a) byte write(s)
35350 341             |                                                             '  Y O O I U E O O (b) word write(s)
35350 341             |                                                             '  T R N L R S C C (c) long write(s)
35350 341             |                                                             '  E D G L S U K K (d) resumed fill
35350 341             |                                                             '          T M E E (e) new burst write
35350 341             |                                                             '            E D D (f) resumed burst
35350 341             |                                                             '              F B (g) locked fill
35350 341             |                                                             '              I U (h) locked burst write
35350 341             |                                                             '              L R 
35350 341             |                                                             '              L S 
35350 341             |                                                             '                T 
35350 341             | 
35350 341             | w_single                   
35350 341             | w_fill_cont           
35350 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
35354 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
35358 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3535c 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
35360 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
35364 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
35368 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3536c 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
35370 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
35374 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
35378 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3537c 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
35380 34d             |                ' disable call to r_resume_burst for single longs when z=0
35380 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
35384 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
35388 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3538c 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
35390 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
35394 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
35398 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3539c 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
353a0 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
353a4 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
353a8 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
353ac 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
353b0 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
353b4 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
353b8 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
353bc 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
353c0 35d             |         
353c0 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
353c0 35d             |             '
353c0 35d             |             '  At least one of these 3 optional components will be sent
353c0 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
353c0 35d             |             '     body - N x full longs of data
353c0 35d             |             '     trailer - last partial long of data
353c0 35d             |             '
353c0 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
353c0 35d             |             '
353c0 35d             |             'Case    Type                           Sends
353c0 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
353c0 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
353c0 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
353c0 35d             |             ' 4)     Multiple long fill             body only
353c0 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
353c0 35d             | 
353c0 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
353c0 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
353c4 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
353c8 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
353cc 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
353d0 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
353d4 362 13 8C 07 F6 |                             mov     pattern3, #%10011
353d8 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
353dc 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
353e0 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
353e4 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
353e8 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
353ec 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
353f0 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
353f4 36a             |                             
353f4 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
353f8 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
353fc 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
35400 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
35404 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
35408 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
3540c 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
35410 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
35414 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
35418 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3541c 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
35420 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
35424 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
35428 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3542c 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
35430 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
35434 37a             | 
35434 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
35438 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3543c 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
35440 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
35444 37e             |                  
35444 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
35448 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3544c 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
35450 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
35454 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
35458 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3545c 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
35460 385             | 
35460 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
35464 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
35468 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3546c 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
35470 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
35474 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
35478 38b             | 
35478 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
35478 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3547c 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
35480 38d 2A B0 63 FD |                             push    addr1                   'save address
35484 38e             | 
35484 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
35484 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
35488 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3548c 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
35490 391             |             
35490 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
35494 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
35498 393 2B B0 63 FD |                             pop     addr1                   'restore address
3549c 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
354a0 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
354a4 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
354a8 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
354ac 398             | 
354ac 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
354b0 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
354b4 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
354b8 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
354bc 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
354c0 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
354c4 39e             | 
354c4 39e             |                             'trailer is done
354c4 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
354c8 39f             | 
354c8 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
354cc 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
354d0 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
354d4 3a2             | 
354d4 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
354d8 3a3 69 C8 63 FD |                             rev     cmdaddr                 
354dc 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
354e0 3a5 61 C8 63 FD |                             mergeb  cmdaddr
354e4 3a6             |                             
354e4 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
354e8 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
354ec 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
354f0 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
354f4 3aa             |                                                          
354f4 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
354f8 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
354fc 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
35500 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
35504 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
35508 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
3550c 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
35510 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
35514 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
35518 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3551c 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
35520 3b5             |  
35520 3b5 59 52 63 FD |                             drvh    cspin
35524 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
35528 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3552c 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
35530 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
35534 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
35538 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3553c 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
35540 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
35544 3be EA E5 03 F6 |                             mov     d, orighubsize
35548 3bf EF E5 63 F0 |                             shl     d, a
3554c 3c0 F2 E3 83 F1 |                             sub     c, d
35550 3c1 DD E3 03 F1 |                             add     c, offset1
35554 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
35558 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3555c 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
35560 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
35564 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
35568 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3556c 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
35570 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
35574 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
35578 3cb BB D3 03 F6 |                             mov     resume, restorefill
3557c 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
35580 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
35584 3ce 6C FC BF CD |             if_c            call    #yield
35588 3cf 2D 00 64 FD |                             ret
3558c 3d0             |                            
3558c 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3558c 3d0             |                       '     rczl    pa                      'rotate left into address offset
3558c 3d0             |                       '     rczl    c wcz                   'restore count and flags
3558c 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
35590 3d1 02 EC 67 F0 |                             shl     pa, #2
35594 3d2 28 06 64 AD |             if_z            setq    #3
35598 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3559c 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
355a0 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
355a4 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
355a8 3d7             | 
355a8 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
355ac 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
355b0 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
355b4 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
355b8 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
355bc 3dc             |                 fit 1024-32
355bc 3dc             |         
355bc 3dc             | 
355bc 3dc             | '..................................................................................................
355bc 3dc             | 
355bc 3dc             |                 fit 1024-32
355bc 3dc 00 00 00 00 
355c0 3dd 00 00 00 00 
355c4 3de 00 00 00 00 
355c8 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
355cc 3e0             |                 org 1024-32
355cc 000             | 
355cc 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
355cc 000 00 00 00 00 |                 long $0000
355d0 001 11 11 00 00 |                 long $1111
355d4 002 22 22 00 00 |                 long $2222
355d8 003 33 33 00 00 |                 long $3333
355dc 004 44 44 00 00 |                 long $4444
355e0 005 55 55 00 00 |                 long $5555
355e4 006 66 66 00 00 |                 long $6666
355e8 007 77 77 00 00 |                 long $7777
355ec 008 88 88 00 00 |                 long $8888
355f0 009 99 99 00 00 |                 long $9999
355f4 00a AA AA 00 00 |                 long $aaaa
355f8 00b BB BB 00 00 |                 long $bbbb
355fc 00c CC CC 00 00 |                 long $cccc
35600 00d DD DD 00 00 |                 long $dddd
35604 00e EE EE 00 00 |                 long $eeee
35608 00f FF FF 00 00 |                 long $ffff
3560c 010             | 
3560c 010             | 'masks
3560c 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
35610 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
35614 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
35618 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
3561c 014             | 
3561c 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
35620 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
35624 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
35628 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
3562c 018             | 
3562c 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
35630 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
35634 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
35638 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3563c 01c             | 
3563c 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
35640 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
35644 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
35648 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3564c 020             |         fit 1024
3564c 020             | 
3564c 020             |         fit 1024
3564c 020             | 
3564c 020             | '--------------------------------------------------------------------------------------------------
3564c 020             |         orgh
3564c                 | 
3564c                 | gfxexpansion
3564c                 |                             'simple line drawing graphics expansion of memory driver
3564c                 |                             'jmp     #donerepeats                'just return for now
3564c                 | 
3564c     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
35650     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
35654     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
35658     DD E1 03 F6 |                             mov     b, offset1              'get error term
3565c     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
35660     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
35664     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
35668     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3566c     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
35670     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
35674     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
35678     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3567c     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
35680     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
35684     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
35688     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3568c     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
35690     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
35694     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
35698     DC E5 33 F9 |                             getword d, total, #0            'get line width
3569c     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
356a0     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
356a4     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
356a8     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
356ac     C3 03 80 FD |                             jmp     #readmask               'continue filling
356b0                 | 	alignl
356b0                 | _usbnew_spin2_dat_
356b0                 |                 org     $000
356b0 000             | 
356b0 000             | usb_host_start
356b0 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
356b4 001             | 
356b4 001 03 00 00 FF 
356b8 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
356bc 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
356c0 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
356c4 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
356c8 006 29 70 63 FD |                 setq2   htmp
356cc 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
356d0 008             | 
356d0 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
356d4 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
356d8 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
356dc 00b             | 
356dc 00b             | '------------------------------------------------------------------------------
356dc 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
356dc 00b             | ' special because the receiving function must not respond with either STALL or
356dc 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
356dc 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
356dc 00b             | ' corrupt packet, it must ignore the transaction
356dc 00b             | '------------------------------------------------------------------------------
356dc 00b             | ' On entry:
356dc 00b             | '   PTRA - start address of the SETUP data struct.
356dc 00b             | ' On exit:
356dc 00b             | '   retval - PID_ACK on success, otherwise error code.
356dc 00b             | '------------------------------------------------------------------------------
356dc 00b             | txn_setup
356dc 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
356e0 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
356e4 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
356e8 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
356ec 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
356f0 010             | .setup
356f0 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
356f4 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
356f8 012 2D 00 64 AD |         if_z    ret
356fc 013 7C 0B B0 FD |                 call    #retry_wait
35700 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
35704 015 2D 00 64 AD |         if_z    ret
35708 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
3570c 017 E0 FF 9F FD |                 jmp     #.setup
35710 018             | 
35710 018             | '------------------------------------------------------------------------------
35710 018             | ' IN/INTERRUPT transaction.
35710 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
35710 018             | '------------------------------------------------------------------------------
35710 018             | ' On entry:
35710 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
35710 018             | '     CRC(b19..23).
35710 018             | ' On exit:
35710 018             | '------------------------------------------------------------------------------
35710 018             | txn_in
35710 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
35714 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
35718 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3571c 01b             | 
3571c 01b             |                 ' Fall through to urx_packet
3571c 01b             | 
3571c 01b             | '------------------------------------------------------------------------------
3571c 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3571c 01b             | ' received are handshakes and IN DATAx.
3571c 01b             | '------------------------------------------------------------------------------
3571c 01b             | ' On entry:
3571c 01b             | ' On exit:
3571c 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3571c 01b             | '     returned.
3571c 01b             | '------------------------------------------------------------------------------
3571c 01b             | urx_packet
3571c 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
35720 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
35724 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
35728 01e 1A 92 63 FD |                 getct   hct2
3572c 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
35730 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
35734 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
35738 022             | .wait_sop
35738 022 22 A7 8A FA |                 rdpin   urx, dm
3573c 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
35740 024 08 00 90 CD |         if_c    jmp     #.get_pid
35744 025 FC 25 CC FB |                 jnct2   #.wait_sop
35748 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3574c 027             | .get_pid
3574c 027 28 02 B0 FD |                 call    #urx_next
35750 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
35754 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
35758 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3575c 02b             | .chk_pid
3575c 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35760 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
35764 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
35768 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3576c 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
35770 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
35774 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
35778 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3577c 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
35780 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
35784 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
35788 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3578c 037             | .ack_resend
3578c 037 22 A7 82 FA |                 rqpin   urx, dm
35790 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
35794 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
35798 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3579c 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
357a0 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
357a4 03d             | .chk_eop
357a4 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
357a8 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
357ac 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
357b0 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
357b4 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
357b8 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
357bc 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
357c0 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
357c4 045 2D 00 64 FD |                 ret
357c8 046             | .idle
357c8 046 22 A7 82 FA |                 rqpin   urx, dm
357cc 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
357d0 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
357d4 049 2D 00 64 FD |                 ret
357d8 04a             | 
357d8 04a             | '------------------------------------------------------------------------------
357d8 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
357d8 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
357d8 04a             | ' if one is required.
357d8 04a             | '------------------------------------------------------------------------------
357d8 04a             | ' On entry:
357d8 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
357d8 04a             | ' On exit:
357d8 04a             | '------------------------------------------------------------------------------
357d8 04a             | utx_token
357d8 04a 22 A7 82 FA |                 rqpin   urx, dm
357dc 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
357e0 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
357e4 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
357e8 04e 34 0D B0 CD |         if_c    call    #utx_pre
357ec 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
357f0 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
357f4 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
357f8 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
357fc 053             | .next_byte
357fc 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
35800 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
35804 055             | .wait
35804 055 40 46 72 FD |                 testp   dp                      wc
35808 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
3580c 057 23 03 08 FC |                 akpin   dp
35810 058 22 A5 22 FC |                 wypin   utx, dm
35814 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
35818 05a             | 
35818 05a             | '------------------------------------------------------------------------------
35818 05a             | ' SETUP/OUT/INTERRUPT transaction.
35818 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
35818 05a             | '------------------------------------------------------------------------------
35818 05a             | ' On entry:
35818 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
35818 05a             | '     CRC(b19..23).
35818 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
35818 05a             | '   pkt_data - count of DATAx payload bytes to send.
35818 05a             | ' On exit:
35818 05a             | '------------------------------------------------------------------------------
35818 05a             | txn_out
35818 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3581c 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
35820 05c 00 00 C0 FF 
35824 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
35828 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
3582c 05f             | 
3582c 05f             |                 ' Fall through to utx_data
3582c 05f             | 
3582c 05f             | '------------------------------------------------------------------------------
3582c 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
3582c 05f             | ' calculated while the data byte is being shifted out. Since data stage
3582c 05f             | ' success/fail is not determined until the status stage of the transaction,
3582c 05f             | ' this routine is only concerned about the current DATAx packet.
3582c 05f             | '------------------------------------------------------------------------------
3582c 05f             | ' On entry:
3582c 05f             | '   PTRA - hub start address of the data to read.
3582c 05f             | '   pkt_cnt - data payload size.
3582c 05f             | ' On exit:
3582c 05f             | '------------------------------------------------------------------------------
3582c 05f             | utx_data
3582c 05f 22 A7 82 FA |                 rqpin   urx, dm
35830 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
35834 061 F4 FF 9F CD |         if_c    jmp     #utx_data
35838 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
3583c 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
35840 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
35844 065 D8 0C B0 CD |         if_c    call    #utx_pre
35848 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3584c 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
35850 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
35854 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
35858 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
3585c 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
35860 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
35864 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
35868 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
3586c 06f             | .read_byte
3586c 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
35870 070 F0 00 B0 FD |                 call    #utx_byte
35874 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
35878 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
3587c 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
35880 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
35884 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
35888 076             | .send_crc
35888 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
3588c 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
35890 078 D0 00 B0 FD |                 call    #utx_byte
35894 079 5D A5 EA F8 |                 getbyte utx, crc, #1
35898 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
3589c 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
358a0 07c             | 
358a0 07c             | '------------------------------------------------------------------------------
358a0 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
358a0 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
358a0 07c             | ' expects that the packet includes at least the CRC word.
358a0 07c             | '
358a0 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
358a0 07c             | ' was requested, which makes it difficult to determine where the data stops
358a0 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
358a0 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
358a0 07c             | ' USB-16 expected residual value of 0xB001.
358a0 07c             | '
358a0 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
358a0 07c             | ' so the caller can verify IN success before writing the data to its final
358a0 07c             | ' destination.
358a0 07c             | '------------------------------------------------------------------------------
358a0 07c             | ' On entry:
358a0 07c             | '   pkt_data - max byte count expected to be in the packet.
358a0 07c             | '   newb_flg - signals new byte ready when toggled.
358a0 07c             | ' On exit:
358a0 07c             | '   pkt_cnt - actual number of bytes read.
358a0 07c             | '------------------------------------------------------------------------------
358a0 07c             | urx_data
358a0 07c F7 75 03 F6 |                 mov     htmp2, pb
358a4 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
358a8 07e 00 00 C0 FF 
358ac 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
358b0 080 BA EF 03 F6 |                 mov     pb, htmp2
358b4 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
358b8 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
358bc 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
358c0 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
358c4 085             | .wait_byte
358c4 085             | ' In-line rx for max speed
358c4 085 22 A7 82 FA |                 rqpin   urx, dm
358c8 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
358cc 087 53 A5 02 F5 |                 and     utx, urx
358d0 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
358d4 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
358d8 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
358dc 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
358e0 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
358e4 08d DC FF 9F FD |                 jmp     #.wait_byte
358e8 08e             | .get_byte
358e8 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
358ec 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
358f0 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
358f4 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
358f8 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
358fc 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
35900 094             | .end_crc
35900 094 01 B8 06 F1 |                 add     pkt_cnt, #1
35904 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
35908 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
3590c 097 2D 00 64 1D |         if_a    ret
35910 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
35910 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
35910 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
35910 098             | ' to miss it, so cheat a bit and look for SOP clear here.
35910 098 22 A7 82 FA |                 rqpin   urx, dm
35914 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
35918 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
3591c 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
3591c 09b             | .chk_crc
3591c 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
35920 09c 58 00 00 FF 
35924 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
35928 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
3592c 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
35930 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
35934 0a1 34 09 B0 FD |                 call    #poll_waitx
35938 0a2             | 
35938 0a2             |                 ' Fall through to utx_handshake
35938 0a2             | 
35938 0a2             | '------------------------------------------------------------------------------
35938 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
35938 0a2             | ' the appropriate IP delay has been inserted.
35938 0a2             | '------------------------------------------------------------------------------
35938 0a2             | ' On entry:
35938 0a2             | '   retval - handshake PID to send.
35938 0a2             | ' On exit:
35938 0a2             | '   retval unchanged.
35938 0a2             | '------------------------------------------------------------------------------
35938 0a2             | utx_handshake
35938 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3593c 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
35940 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
35944 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
35948 0a6 5F A5 02 F6 |                 mov     utx, retval
3594c 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
35950 0a8             | .idle
35950 0a8 22 A7 82 FA |                 rqpin   urx, dm
35954 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
35958 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
3595c 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
35960 0ac 08 09 90 FD |                 jmp     #poll_waitx
35964 0ad             | 
35964 0ad             | '------------------------------------------------------------------------------
35964 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
35964 0ad             | '------------------------------------------------------------------------------
35964 0ad             | ' On entry:
35964 0ad             | '   utx - byte to transmit.
35964 0ad             | ' On exit:
35964 0ad             | '------------------------------------------------------------------------------
35964 0ad             | utx_byte
35964 0ad 40 46 72 FD |                 testp   dp                      wc
35968 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
3596c 0af 23 03 08 FC |                 akpin   dp
35970 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
35974 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
35978 0b2             | 
35978 0b2             | '------------------------------------------------------------------------------
35978 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
35978 0b2             | '------------------------------------------------------------------------------
35978 0b2             | ' On entry:
35978 0b2             | ' On exit:
35978 0b2             | '   retval - the byte read.
35978 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
35978 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
35978 0b2             | '     received.
35978 0b2             | '------------------------------------------------------------------------------
35978 0b2             | urx_next
35978 0b2 22 A7 8A FA |                 rdpin   urx, dm
3597c 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
35980 0b4 53 A5 02 F5 |                 and     utx, urx
35984 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
35988 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3598c 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
35990 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
35994 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
35998 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3599c 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
359a0 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
359a4 0bd 2D 00 64 FD |                 ret
359a8 0be             | 
359a8 0be             | '------------------------------------------------------------------------------
359a8 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
359a8 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
359a8 0be             | ' length, and the PID is not included in the CRC calculation:
359a8 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
359a8 0be             | '  CRC5  ENDP ADDRESS PID
359a8 0be             | ' %00000_1111_1111111_xxxxxxxx
359a8 0be             | '------------------------------------------------------------------------------
359a8 0be             | ' On entry:
359a8 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
359a8 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
359a8 0be             | ' On exit:
359a8 0be             | '   ep_addr_pid - CRC value appended to the packet.
359a8 0be             | '------------------------------------------------------------------------------
359a8 0be             | calc_crc5
359a8 0be FF 03 00 FF 
359ac 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
359b0 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
359b4 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
359b8 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
359bc 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
359c0 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
359c4 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
359c8 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
359cc 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
359d0 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
359d4 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
359d8 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
359dc 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
359e0 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
359e4 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
359e8 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
359ec 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
359f0 0d0             | 
359f0 0d0             | '------------------------------------------------------------------------------
359f0 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
359f0 0d0             | '------------------------------------------------------------------------------
359f0 0d0             | isr1_fsframe
359f0 0d0 1A 92 62 FD |                 getct   iframe_ct_base
359f4 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
359f8 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
359fc 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
35a00 0d4             | .wait
35a00 0d4 40 46 72 FD |                 testp   dp                      wc
35a04 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
35a08 0d6 23 03 08 FC |                 akpin   dp
35a0c 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
35a10 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
35a14 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
35a18 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
35a1c 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
35a20 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
35a24 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
35a28 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
35a2c 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
35a30 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
35a34 0e1 2C FF BF FD |                 call    #utx_byte
35a38 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
35a3c 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
35a40 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
35a44 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
35a48 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
35a4c 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
35a50 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
35a54 0e9 5B A5 42 F5 |                 or      utx, icrc
35a58 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
35a5c 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
35a60 0ec 20 00 90 FD |                 jmp     #isr1_wait
35a64 0ed             | isr1_lsframe
35a64 0ed 1A 92 62 FD |                 getct   iframe_ct_base
35a68 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
35a6c 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
35a70 0f0             | .wait
35a70 0f0 40 46 72 FD |                 testp   dp                      wc
35a74 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
35a78 0f2 23 03 08 FC |                 akpin   dp
35a7c 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
35a80 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
35a84 0f5             | isr1_wait
35a84 0f5 22 A5 82 FA |                 rqpin   utx, dm
35a88 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
35a8c 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
35a90 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
35a94 0f9 03 00 00 FF 
35a98 0fa FF B3 06 F5 |                 and     frame, ##$7ff
35a9c 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
35aa0 0fc F5 FF 3B FB |                 reti1
35aa4 0fd             | 
35aa4 0fd             | '------------------------------------------------------------------------------
35aa4 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
35aa4 0fd             | ' transaction will complete before the next frame is triggered.
35aa4 0fd             | '------------------------------------------------------------------------------
35aa4 0fd             | ' On entry:
35aa4 0fd             | ' On exit:
35aa4 0fd             | '------------------------------------------------------------------------------
35aa4 0fd             | wait_txn_ok
35aa4 0fd 1A 74 63 FD |                 getct   htmp2
35aa8 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
35aac 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
35ab0 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
35ab4 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
35ab8 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
35abc 103 2D 00 64 FD |                 ret
35ac0 104             | 
35ac0 104             | '------------------------------------------------------------------------------
35ac0 104             | ' A device connection was detected, or a bus reset was requested by the USB
35ac0 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
35ac0 104             | ' and perform a reset sequence prior to device enumeration.
35ac0 104             | '------------------------------------------------------------------------------
35ac0 104             | dev_reset
35ac0 104 22 A7 82 FA |                 rqpin   urx, dm
35ac4 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
35ac8 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
35acc 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
35ad0 108             | reset
35ad0 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
35ad4 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
35ad8 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
35adc 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
35ae0 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
35ae4 10d 1A 92 62 FD |                 getct   iframe_ct_base
35ae8 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
35aec 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
35af0 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
35af4 111 24 70 07 F1 |                 add     htmp, #36
35af8 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
35afc 113             | .framewait
35afc 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
35b00 114 F8 FF 9F CD |         if_b    jmp     #.framewait
35b04 115 2D 00 64 FD |                 ret
35b08 116             | 
35b08 116             | '------------------------------------------------------------------------------
35b08 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
35b08 116             | '------------------------------------------------------------------------------
35b08 116             | ' On entry:
35b08 116             | '   PTRA - source address.
35b08 116             | '   PB - destination address.
35b08 116             | '   hr0 - length of copy, in bytes.
35b08 116             | ' On exit:
35b08 116             | '------------------------------------------------------------------------------
35b08 116             | hmemcpy
35b08 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
35b0c 117 F7 71 43 FC |                 wrbyte  htmp, pb
35b10 118 01 EE 07 F1 |                 add     pb, #1
35b14 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
35b18 11a             | 
35b18 11a             | '------------------------------------------------------------------------------
35b18 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
35b18 11a             | ' loop until the errant device is disconnected.
35b18 11a             | '------------------------------------------------------------------------------
35b18 11a             | ' On entry:
35b18 11a             | ' On exit:
35b18 11a             | '------------------------------------------------------------------------------
35b18 11a             | host_error
35b18 11a             |           if ERROR_LED >= 0
35b18 11a             |           end
35b18 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
35b1c 11b             | 
35b1c 11b             | '------------------------------------------------------------------------------
35b1c 11b             | ' Get HID descriptor buffer for current port
35b1c 11b             | '------------------------------------------------------------------------------
35b1c 11b             | ' On entry:
35b1c 11b             | ' On exit:
35b1c 11b             | '   PB - HID descriptor buffer pointer
35b1c 11b             | '------------------------------------------------------------------------------
35b1c 11b             | get_hid_descr_buffer
35b1c 11b 2D EF 03 F6 |                 mov     pb, hdev_port
35b20 11c 01 EE E7 F2 |                 cmpsub  pb, #1
35b24 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
35b28 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
35b2c 11f             | 
35b2c 11f             | 
35b2c 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
35b30 120             | 
35b30 120             | ' USB commands and error codes
35b30 120 00 00 00 00 | cmd_data        long    0
35b34 121 00 00 00 00 | usb_err_code    long    ERR_NONE
35b38 122             | 
35b38 122             | ' Parameters block assigned at cog startup
35b38 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
35b3c 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
35b40 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
35b44 125             | if ACTIVITY_LED >= 0
35b44 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
35b44 125             | end
35b44 125             | if ERROR_LED >= 0
35b44 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
35b44 125             | end
35b44 125 00 00 00 00 | hid_descr_p     long    0
35b48 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
35b48 126             | 'hkbd_report_p   long    0
35b48 126 00 00 00 00 | hub_descr_p     long    0
35b4c 127 00 00 00 00 | urx_buff_p      long    0
35b50 128 00 00 00 00 | dev_desc_buff_p long    0
35b54 129 00 00 00 00 | con_desc_buff_p long    0
35b58 12a 00 00 00 00 | cache_start_p   long    0
35b5c 12b 00 00 00 00 | cache_end_p     long    0
35b60 12c             | if EMUPAD_MAX_PLAYER > 0
35b60 12c             | emupad_out_ptr  long    0
35b60 12c             | end
35b60 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
35b64 12d             | 
35b64 12d             | hdev_init_start
35b64 12d             | hdev_port       res     1
35b64 12d             | hdev_port       res     1
35b64 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
35b64 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
35b64 12d             | kbm_next_datax  res     1
35b64 12d             | kbm_next_datax  res     1
35b64 12d             | hub_intf_num    res     1
35b64 12d             | hub_intf_num    res     1
35b64 12d             | hub_next_datax  res     1
35b64 12d             | hub_next_datax  res     1
35b64 12d             | hub_status_chg  res     1
35b64 12d             | hub_status_chg  res     1
35b64 12d             | hub_port_status res     1
35b64 12d             | hub_port_status res     1
35b64 12d             | if HAVE_MOUSE
35b64 12d             | ms_intf_num     res     1
35b64 12d             | ms_intf_num     res     1
35b64 12d             | ms_in_max_pkt   res     1
35b64 12d             | ms_in_max_pkt   res     1
35b64 12d             | end
35b64 12d             | kb_intf_num     res     1
35b64 12d             | kb_intf_num     res     1
35b64 12d             | kb_interval     res     1
35b64 12d             | kb_interval     res     1
35b64 12d             | kb_in_max_pkt   res     1
35b64 12d             | kb_in_max_pkt   res     1
35b64 12d             | kb_max_index    res     1
35b64 12d             | kb_max_index    res     1
35b64 12d             | kb_led_states   res     1
35b64 12d             | kb_led_states   res     1
35b64 12d             | gp_intf_num     res     1
35b64 12d             | gp_intf_num     res     1
35b64 12d             | gp_interval     res     1
35b64 12d             | gp_interval     res     1
35b64 12d             | gp_max_index    res     1
35b64 12d             | gp_max_index    res     1
35b64 12d             | gp_descr_len    res     1+MAX_DEVICES
35b64 12d             | gp_descr_len    res     1+MAX_DEVICES
35b64 12d             | hdev_init_end
35b64 12d             | 
35b64 12d             | ' Initialized at cog startup:
35b64 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
35b64 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
35b64 12d             | iframe_ct_new   res     1
35b64 12d             | iframe_ct_new   res     1
35b64 12d             | iframe_ct_base  res     1
35b64 12d             | iframe_ct_base  res     1
35b64 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
35b64 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
35b64 12d             | 
35b64 12d             | ' This register block is reset to zero when a USB device connects
35b64 12d             | hreg_init_start
35b64 12d             | hstatus         res     1         ' Host status flags
35b64 12d             | hstatus         res     1         ' Host status flags
35b64 12d             | hctwait         res     1         ' Poll-based wait clocks
35b64 12d             | hctwait         res     1         ' Poll-based wait clocks
35b64 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
35b64 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
35b64 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
35b64 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
35b64 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
35b64 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
35b64 12d             | xfer_retry      res     1         ' Control transfer retry count
35b64 12d             | xfer_retry      res     1         ' Control transfer retry count
35b64 12d             | retry           res     1         ' Transaction retry count
35b64 12d             | retry           res     1         ' Transaction retry count
35b64 12d             | utx             res     1         ' Byte to transmit on USB
35b64 12d             | utx             res     1         ' Byte to transmit on USB
35b64 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
35b64 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
35b64 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
35b64 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
35b64 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
35b64 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
35b64 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
35b64 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
35b64 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
35b64 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
35b64 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
35b64 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
35b64 12d             | frame           res     1         ' USB 1ms frame counter value
35b64 12d             | frame           res     1         ' USB 1ms frame counter value
35b64 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
35b64 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
35b64 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
35b64 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
35b64 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
35b64 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
35b64 12d             | crc             res     1         ' Used for CRC16 calculation
35b64 12d             | crc             res     1         ' Used for CRC16 calculation
35b64 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
35b64 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
35b64 12d             | retval          res     1         ' Global success/fail return parameter
35b64 12d             | retval          res     1         ' Global success/fail return parameter
35b64 12d             | context_retval  res     1         ' Operation contextual return parameter
35b64 12d             | context_retval  res     1         ' Operation contextual return parameter
35b64 12d             | ' Device stuff
35b64 12d             | hdev_id         res     1+MAX_DEVICES
35b64 12d             | hdev_id         res     1+MAX_DEVICES
35b64 12d             | hdev_bcd        res     1
35b64 12d             | hdev_bcd        res     1
35b64 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
35b64 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
35b64 12d             | ' Keyboard/mouse stuff
35b64 12d             | hctrl_ep_addr   res     1
35b64 12d             | hctrl_ep_addr   res     1
35b64 12d             | hctrl_max_pkt   res     1
35b64 12d             | hctrl_max_pkt   res     1
35b64 12d             | hconfig_base    res     1
35b64 12d             | hconfig_base    res     1
35b64 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
35b64 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
35b64 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
35b64 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
35b64 12d             | hdev_class      res     1
35b64 12d             | hdev_class      res     1
35b64 12d             | hdev_subclass   res     1
35b64 12d             | hdev_subclass   res     1
35b64 12d             | hdev_protocol   res     1
35b64 12d             | hdev_protocol   res     1
35b64 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
35b64 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
35b64 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
35b64 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
35b64 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
35b64 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
35b64 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
35b64 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
35b64 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
35b64 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
35b64 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
35b64 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
35b64 12d             | if HAVE_MOUSE
35b64 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
35b64 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
35b64 12d             | end
35b64 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
35b64 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
35b64 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
35b64 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
35b64 12d             | hdev_ep_addr    res     1+MAX_DEVICES
35b64 12d             | hdev_ep_addr    res     1+MAX_DEVICES
35b64 12d             | hdev_out_addr   res     1
35b64 12d             | hdev_out_addr   res     1
35b64 12d             | 
35b64 12d             | if EMUPAD_MAX_PLAYER > 0
35b64 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
35b64 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
35b64 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
35b64 12d             | end
35b64 12d             | 
35b64 12d             | hreg_init_end
35b64 12d             | 
35b64 12d             | hidr_start
35b64 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
35b64 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
35b64 12d             | hidr_flags      res     1
35b64 12d             | hidr_flags      res     1
35b64 12d             | hidr_axis       res     3
35b64 12d             | hidr_axis       res     3
35b64 12d             | hidr_buttons    res     1
35b64 12d             | hidr_buttons    res     1
35b64 12d             | hidr_hats       res     1
35b64 12d             | hidr_hats       res     1
35b64 12d             | '' Above are actually useful values, 6 longs
35b64 12d             | hidr_id         res     1
35b64 12d             | hidr_id         res     1
35b64 12d             | hidr_state      res     1
35b64 12d             | hidr_state      res     1
35b64 12d             | hidr_size       res     1
35b64 12d             | hidr_size       res     1
35b64 12d             | hidr_count      res     1
35b64 12d             | hidr_count      res     1
35b64 12d             | hidr_offset     res     1
35b64 12d             | hidr_offset     res     1
35b64 12d             | hidr_usage_idx  res     1
35b64 12d             | hidr_usage_idx  res     1
35b64 12d             | hidr_lminmax    res     1
35b64 12d             | hidr_lminmax    res     1
35b64 12d             | hidr_pminmax    res     1
35b64 12d             | hidr_pminmax    res     1
35b64 12d             | hidr_type       res     1
35b64 12d             | hidr_type       res     1
35b64 12d             | hidr_end
35b64 12d             | 
35b64 12d             | ' Variables dependent on the system freqency
35b64 12d             | _var_64_lower_  res     1
35b64 12d             | _var_64_lower_  res     1
35b64 12d             | _var_64_upper_  res     1
35b64 12d             | _var_64_upper_  res     1
35b64 12d             | _12Mbps_        res     1
35b64 12d             | _12Mbps_        res     1
35b64 12d             | _1_5Mbps_       res     1
35b64 12d             | _1_5Mbps_       res     1
35b64 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
35b64 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
35b64 12d             | _1us_           res     1         ' 1us
35b64 12d             | _1us_           res     1         ' 1us
35b64 12d             | _10us_          res     1         ' 10us
35b64 12d             | _10us_          res     1         ' 10us
35b64 12d             | _33us_          res     1         ' 33us
35b64 12d             | _33us_          res     1         ' 33us
35b64 12d             | _txn_err_       res     1         ' 250us
35b64 12d             | _txn_err_       res     1         ' 250us
35b64 12d             | _500us_         res     1         ' 500us
35b64 12d             | _500us_         res     1         ' 500us
35b64 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
35b64 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
35b64 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
35b64 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
35b64 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
35b64 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
35b64 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
35b64 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
35b64 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
35b64 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
35b64 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
35b64 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
35b64 12d             | _preamble_wait_ res     1
35b64 12d             | _preamble_wait_ res     1
35b64 12d             | _1ms_           res     1         ' 1ms
35b64 12d             | _1ms_           res     1         ' 1ms
35b64 12d             | _2ms_           res     1         ' 2ms
35b64 12d             | _2ms_           res     1         ' 2ms
35b64 12d             | _suspend_wait_  res     1         ' 3ms
35b64 12d             | _suspend_wait_  res     1         ' 3ms
35b64 12d             | _4ms_           res     1         ' 4ms
35b64 12d             | _4ms_           res     1         ' 4ms
35b64 12d             | _xfer_wait_     res     1         ' 5ms
35b64 12d             | _xfer_wait_     res     1         ' 5ms
35b64 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
35b64 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
35b64 12d             | _reset_hold_    res     1         ' 15ms
35b64 12d             | _reset_hold_    res     1         ' 15ms
35b64 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
35b64 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
35b64 12d             | _21ms_          res     1         ' 21ms
35b64 12d             | _21ms_          res     1         ' 21ms
35b64 12d             | _100ms_         res     1         ' 100ms
35b64 12d             | _100ms_         res     1         ' 100ms
35b64 12d             | _500ms_         res     1         ' 500ms
35b64 12d             | _500ms_         res     1         ' 500ms
35b64 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
35b64 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
35b64 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
35b64 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
35b64 12d             | '------------------------------------------------------------------------------
35b64 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
35b64 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
35b64 12d             | _usb_d_ls_nco_  res     1
35b64 12d             | _usb_d_ls_nco_  res     1
35b64 12d             | _usb_h_fs_nco_  res     1
35b64 12d             | _usb_h_fs_nco_  res     1
35b64 12d             | _usb_d_fs_nco_  res     1
35b64 12d             | _usb_d_fs_nco_  res     1
35b64 12d             | '------------------------------------------------------------------------------
35b64 12d             | ' Scratch registers
35b64 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
35b64 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
35b64 12d             | htmp1           res     1
35b64 12d             | htmp1           res     1
35b64 12d             | htmp2           res     1
35b64 12d             | htmp2           res     1
35b64 12d             | htmp3           res     1
35b64 12d             | htmp3           res     1
35b64 12d             | hrep            res     1         ' Repeat count
35b64 12d             | hrep            res     1         ' Repeat count
35b64 12d             | hsave0          res     1         ' Subroutine parameter saves
35b64 12d             | hsave0          res     1         ' Subroutine parameter saves
35b64 12d             | hsave1          res     1
35b64 12d             | hsave1          res     1
35b64 12d             | hsave2          res     1
35b64 12d             | hsave2          res     1
35b64 12d             | isrtmp1         res     1
35b64 12d             | isrtmp1         res     1
35b64 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
35b64 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
35b64 12d             | hr0             res     1         ' Multi-purpose registers
35b64 12d             | hr0             res     1         ' Multi-purpose registers
35b64 12d             | hr1             res     1
35b64 12d             | hr1             res     1
35b64 12d             | hr2             res     1
35b64 12d             | hr2             res     1
35b64 12d             | hr3             res     1
35b64 12d             | hr3             res     1
35b64 12d             | hpar1           res     1         ' Routine entry/exit parameters
35b64 12d             | hpar1           res     1         ' Routine entry/exit parameters
35b64 12d             | hpar2           res     1
35b64 12d             | hpar2           res     1
35b64 12d             | hpar3           res     1
35b64 12d             | hpar3           res     1
35b64 12d             | hct2            res     1         ' Function response bus turn-around timer
35b64 12d             | hct2            res     1         ' Function response bus turn-around timer
35b64 12d             | hct3            res     1         ' Keyboard/mouse poll timer
35b64 12d             | hct3            res     1         ' Keyboard/mouse poll timer
35b64 12d             | mod_cnt         res     1         ' Used in idle loops
35b64 12d             | mod_cnt         res     1         ' Used in idle loops
35b64 12d             |                 fit     $1F0
35b64 12d             |                 org     $200
35b64 200             | hlut_start
35b64 200             | 
35b64 200             | '------------------------------------------------------------------------------
35b64 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
35b64 200             | ' settings to startup defaults.
35b64 200             | '------------------------------------------------------------------------------
35b64 200             | ' On entry:
35b64 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
35b64 200             | '------------------------------------------------------------------------------
35b64 200             | set_speed_full
35b64 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
35b68 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
35b6c 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
35b70 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
35b74 204             | '                ret                             wcz     ' Restore caller flags on exit
35b74 204             | 
35b74 204             | '------------------------------------------------------------------------------
35b74 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
35b74 204             | ' is a downstream hub connected (not yet implemented), the baud generator
35b74 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
35b74 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
35b74 204             | ' putting the smart pins into reset.
35b74 204             | '------------------------------------------------------------------------------
35b74 204             | ' On entry:
35b74 204             | ' On exit: CZ flags restored to caller states
35b74 204             | '------------------------------------------------------------------------------
35b74 204             | set_speed_low
35b74 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
35b78 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
35b7c 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
35b80 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
35b84 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
35b88 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
35b8c 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
35b90 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
35b94 20c             | 
35b94 20c             | '------------------------------------------------------------------------------
35b94 20c             | ' Perform configuration stuff required when a device intitially connects.
35b94 20c             | '------------------------------------------------------------------------------
35b94 20c             | ' On entry:
35b94 20c             | ' On exit:
35b94 20c             | '------------------------------------------------------------------------------
35b94 20c             | on_connect
35b94 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
35b98 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
35b9c 20e             | .retry
35b9c 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
35ba0 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
35ba4 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
35ba8 211 00 08 00 FF 
35bac 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
35bb0 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
35bb4 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
35bb8 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
35bbc 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
35bc0 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
35bc4 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35bc8 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
35bcc 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
35bd0 21b 4C 03 B0 FD |                 call    #poll_waitx
35bd4 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
35bd8 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
35bdc 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
35be0 21f B8 FF 9F FD |                 jmp     #.retry
35be4 220             | .get_dev_desc
35be4 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
35be8 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
35bec 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
35bf0 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
35bf4 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
35bf8 225 88 FB BF FD |                 call    #reset
35bfc 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
35c00 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
35c04 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
35c08 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
35c0c 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35c10 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
35c14 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
35c18 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
35c1c 22e 04 00 00 FF 
35c20 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
35c24 230 34 FA BF FD |                 call    #calc_crc5
35c28 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
35c2c 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
35c30 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
35c34 234 F7 AD C2 FA |                 rdbyte  total_data, pb
35c38 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
35c3c 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
35c40 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35c44 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
35c48 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
35c4c 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
35c50 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
35c54 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
35c58 23d C4 02 B0 FD |                 call    #poll_waitx
35c5c 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
35c60 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
35c64 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
35c68 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
35c6c 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
35c70 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35c74 244 2D 00 64 5D |         if_nz   ret
35c78 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
35c7c 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
35c80 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
35c84 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
35c88 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
35c8c 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
35c90 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
35c94 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
35c98 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
35c9c 24e 2C FB 9F CD |         if_b    jmp     #host_error
35ca0 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
35ca4 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
35ca8 251 2D EC 63 FD |                 call    pa
35cac 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
35cb0 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
35cb4 254 2C EC 63 FD |                 jmp     pa
35cb8 255             | 
35cb8 255             | '------------------------------------------------------------------------------
35cb8 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
35cb8 255             | ' Status reporting is always in the function-to-host direction.
35cb8 255             | '------------------------------------------------------------------------------
35cb8 255             | ' On entry:
35cb8 255             | '   PTRA - start address of the SETUP data in hub.
35cb8 255             | '   PB - start address of the buffer/struct to be written to during the IN data
35cb8 255             | '     stage.
35cb8 255             | '   ep_addr_pid - device address, endpoint and CRC5.
35cb8 255             | ' On exit:
35cb8 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
35cb8 255             | '     contains the count of data stage bytes actually received, which must
35cb8 255             | '     always be <= the count requested.
35cb8 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
35cb8 255             | '     more specific USB operation error code.
35cb8 255             | '------------------------------------------------------------------------------
35cb8 255             | control_read
35cb8 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
35cbc 256 F8 8F 03 F6 |                 mov     hpar2, ptra
35cc0 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
35cc4 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
35cc8 259             | .xfer_start
35cc8 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
35ccc 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
35cd0 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35cd4 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
35cd8 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
35cdc 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
35ce0 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
35ce4 260 61 00 00 FF 
35ce8 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
35cec 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
35cf0 263             | .data
35cf0 263 56 B1 02 F6 |                 mov     pkt_data, total_data
35cf4 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
35cf8 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
35cfc 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
35d00 267             | .nak_retry
35d00 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
35d04 268             | .in_retry
35d04 268 BC F6 BF FD |                 call    #txn_in
35d08 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
35d0c 26a 28 00 90 AD |         if_z    jmp     #.commit
35d10 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
35d14 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
35d18 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
35d1c 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
35d20 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
35d24 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
35d28 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
35d2c 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
35d30 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
35d34 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
35d38 275             | .commit
35d38 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
35d3c 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
35d40 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
35d44 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
35d48 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
35d4c 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
35d50 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
35d54 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
35d58 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
35d5c 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
35d60 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
35d64 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
35d68 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
35d6c 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
35d70 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
35d74 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
35d78 285             | .pre_status
35d78 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
35d7c 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
35d80 287 00 B0 06 F6 |                 mov     pkt_data, #0
35d84 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
35d88 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
35d8c 28a 61 00 00 FF 
35d90 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
35d94 28c             | .out_retry
35d94 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
35d98 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35d9c 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
35da0 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
35da4 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
35da8 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
35dac 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
35db0 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
35db4 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
35db8 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
35dbc 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
35dc0 297             | ' I've encountered transfer STALL, even though the data looks correct, and
35dc0 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
35dc0 297             | ' ControlRead() transfer gets things unstuck most of the time...
35dc0 297             | .xfer_retry
35dc0 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
35dc4 298 58 01 B0 FD |                 call    #poll_waitx
35dc8 299 8C F9 BF FD |                 call    #wait_txn_ok
35dcc 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
35dd0 29b C7 F1 03 F6 |                 mov     ptra, hpar2
35dd4 29c C8 EF 03 F6 |                 mov     pb, hpar3
35dd8 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
35ddc 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
35de0 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
35de4 2a0             | 
35de4 2a0             | '------------------------------------------------------------------------------
35de4 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
35de4 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
35de4 2a0             | ' the SETUP data struct is filled with the required values.
35de4 2a0             | '------------------------------------------------------------------------------
35de4 2a0             | ' On entry:
35de4 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
35de4 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
35de4 2a0             | '     stage.
35de4 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
35de4 2a0             | ' On exit:
35de4 2a0             | '   retval - used to convey the success/failure of each stage.
35de4 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
35de4 2a0             | '     more specific USB operation error code.
35de4 2a0             | '------------------------------------------------------------------------------
35de4 2a0             | control_write
35de4 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
35de8 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
35dec 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
35df0 2a3             | 
35df0 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
35df4 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
35df8 2a5 F7 91 03 F6 |                 mov     hpar3, pb
35dfc 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
35e00 2a7             | .xfer_start
35e00 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
35e04 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
35e08 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
35e0c 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35e10 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
35e14 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
35e18 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
35e1c 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
35e20 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
35e24 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
35e28 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
35e2c 2b2             | .data
35e2c 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
35e30 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
35e34 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
35e38 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
35e3c 2b6             | .out_retry
35e3c 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
35e40 2b7 88 F6 BF FD |                 call    #txn_out
35e44 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
35e48 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
35e4c 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
35e50 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
35e54 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
35e58 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
35e5c 2be             | .commit
35e5c 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
35e60 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
35e64 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
35e68 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
35e6c 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
35e70 2c3             | pre_status_in
35e70 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
35e74 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
35e78 2c5             | .status_retry
35e78 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
35e7c 2c6 44 F5 BF FD |                 call    #txn_in
35e80 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
35e84 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
35e88 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
35e8c 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
35e90 2cb 2D 00 64 AD |         if_z    ret
35e94 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
35e98 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
35e9c 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
35ea0 2cf             | '               ret                                     ' Caller must handle transfer retirement
35ea0 2cf             | 
35ea0 2cf             | '------------------------------------------------------------------------------
35ea0 2cf             | ' Execute an IN interrupt transaction.
35ea0 2cf             | '------------------------------------------------------------------------------
35ea0 2cf             | ' On entry:
35ea0 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
35ea0 2cf             | '   hpar2 - Address of the IN data buffer
35ea0 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
35ea0 2cf             | ' On exit:
35ea0 2cf             | '   retval - the result of the operation.
35ea0 2cf             | '   hpar3 - the count of IN data bytes actually received.
35ea0 2cf             | '------------------------------------------------------------------------------
35ea0 2cf             | do_int_in
35ea0 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
35ea4 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
35ea8 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
35eac 2d2             | 
35eac 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
35eb0 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
35eb4 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
35eb8 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
35ebc 2d6             | .retry
35ebc 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
35ec0 2d7 00 F5 BF FD |                 call    #txn_in
35ec4 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
35ec8 2d9 1C 00 90 AD |         if_z    jmp     #.commit
35ecc 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
35ed0 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
35ed4 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
35ed8 2dd 54 00 B0 FD |                 call    #retry_wait
35edc 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
35ee0 2df 18 00 90 AD |         if_z    jmp     #.post_ret
35ee4 2e0 D4 FF 9F FD |                 jmp     #.retry
35ee8 2e1             | .commit
35ee8 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
35eec 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
35ef0 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
35ef4 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
35ef8 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
35efc 2e6             | .post_ret
35efc 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
35f00 2e7             | 
35f00 2e7             | 
35f00 2e7             | '------------------------------------------------------------------------------
35f00 2e7             | ' Resets the downstream hub port to FS
35f00 2e7             | '------------------------------------------------------------------------------
35f00 2e7             | dwnstream_reset
35f00 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
35f04 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
35f08 2e9             | 
35f08 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
35f0c 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
35f10 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
35f14 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
35f18 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
35f1c 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
35f20 2ef             | 
35f20 2ef             | '------------------------------------------------------------------------------
35f20 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
35f20 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
35f20 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
35f20 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
35f20 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
35f20 2ef             | '------------------------------------------------------------------------------
35f20 2ef             | ' On entry:
35f20 2ef             | '   hctwait - wait interval in sysclocks.
35f20 2ef             | ' On exit:
35f20 2ef             | '------------------------------------------------------------------------------
35f20 2ef             | poll_waitx
35f20 2ef 1A 92 63 FD |                 getct   hct2
35f24 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
35f28 2f1             | .wait
35f28 2f1 FF 25 CC FB |                 jnct2   #.wait
35f2c 2f2 2D 00 64 FD |                 ret
35f30 2f3             | 
35f30 2f3             | '------------------------------------------------------------------------------
35f30 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
35f30 2f3             | '------------------------------------------------------------------------------
35f30 2f3             | ' On entry:
35f30 2f3             | '   retval - transaction response PID or error code.
35f30 2f3             | ' On exit:
35f30 2f3             | '------------------------------------------------------------------------------
35f30 2f3             | retry_wait
35f30 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
35f34 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
35f38 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
35f3c 2f6 14 00 90 AD |         if_z    jmp     #.nak
35f40 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
35f44 2f8 D8 FF BF FD |                 call    #poll_waitx
35f48 2f9             | .dec
35f48 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
35f4c 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
35f50 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
35f54 2fc             | .nak
35f54 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
35f58 2fd C4 FF BF FD |                 call    #poll_waitx
35f5c 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
35f60 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
35f64 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
35f68 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
35f6c 302 2D 00 64 FD |                 ret
35f70 303             | 
35f70 303             | host_reset
35f70 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
35f74 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
35f78 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
35f78 305 BD 01 05 FF 
35f7c 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
35f80 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
35f84 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
35f88 309             | ' Check to see if the system clock has been changed.
35f88 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
35f8c 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
35f90 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
35f94 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
35f98 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
35f9c 30e 40 46 62 FD |                 dirl    dp
35fa0 30f             | 
35fa0 30f 28 02 64 FD |                 setq    #1
35fa4 310 80 00 80 FF 
35fa8 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
35fac 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
35fb0 313             | .enable
35fb0 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
35fb4 314 41 46 62 FD |                 dirh    dp
35fb8 315 1F 36 63 FD |                 waitx   _1us_
35fbc 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
35fc0 317             | 
35fc0 317             |                 ' Handle Port protection enable and startup delay
35fc0 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
35fc4 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
35fc8 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
35fcc 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
35fd0 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
35fd4 31c             | 
35fd4 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
35fd8 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
35fdc 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
35fe0 31f 00 00 04 F6 |                 mov     0-0, #0
35fe4 320             | .regloop
35fe4 320             | 
35fe4 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
35fe4 320             | 
35fe4 320             | discon_entry
35fe4 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
35fe8 321             | 
35fe8 321             |               
35fe8 321             |         if HAVE_HIDPAD
35fe8 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
35fec 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
35ff0 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
35ff4 324 F7 01 68 FC |                 wrlong  #0,pb
35ff8 325             |         end
35ff8 325             |         if EMUPAD_MAX_PLAYER > 0
35ff8 325             |         end
35ff8 325             | 
35ff8 325             |                 ' Fall through to disconnected loop
35ff8 325             | 
35ff8 325             | '-----------------------------------------------------------------------------------------------------------------
35ff8 325             | ' Device connect handling (Section 7.1.7.3).
35ff8 325             | '-----------------------------------------------------------------------------------------------------------------
35ff8 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
35ff8 325             | ' device to connect (Section 7.1.7.3).
35ff8 325             | '-----------------------------------------------------------------------------------------------------------------
35ff8 325             | disconnected
35ff8 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
35ffc 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
36000 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
36004 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
36008 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
3600c 32a             |         if ACTIVITY_LED >= 0
3600c 32a             |         end
3600c 32a 22 A7 82 FA |                 rqpin   urx, dm
36010 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
36014 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
36018 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3601c 32e             | .se1_test
3601c 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
36020 32f FC FE BF FD |                 call    #poll_waitx
36024 330 22 A7 82 FA |                 rqpin   urx, dm
36028 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3602c 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
36030 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
36034 334             | .se1            'SE1 is a fatal error condition
36034 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
36038 335 E4 FE BF FD |                 call    #poll_waitx
3603c 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
36040 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
36044 338             | .connect_test                                           ' Test lines until stable J/K state seen
36044 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
36048 339 22 A7 82 FA |                 rqpin   urx, dm
3604c 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
36050 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
36054 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
36058 33d             | connected
36058 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3605c 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
36060 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
36064 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
36068 341             | .set_pulse
36068 341 1A 64 63 FD |                 getct   _pulse_time_
3606c 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
36070 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
36070 343             | ' of 1ms and make a correction, if necessary.
36070 343             | '                mov     htmp, _1ms_
36070 343             | '                subs    htmp, iframe_delta
36070 343             | '                adds    _frame1ms_clks_, htmp
36070 343             | '                debug(udec(_frame1ms_clks_))
36070 343             | 
36070 343             |                 ' Fall through to idle/processing loop
36070 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
36074 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
36078 345             | 
36078 345             | hidle
36078 345 22 A7 82 FA |                 rqpin   urx, dm
3607c 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
36080 347 98 00 90 CD |         if_c    jmp     #.se0_test
36084 348 24 06 70 FD |                 pollct3                         wc
36088 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3608c 34a 1A 94 63 FD |                 getct   hct3
36090 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
36094 34c             | 
36094 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
36098 34d 00 70 E3 F8 |                 getbyte htmp
3609c 34e             | 
3609c 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
360a0 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
360a4 350 40 00 90 AD |         if_z    jmp     #.poll
360a8 351             | 
360a8 351             |         if _HAVE_GAMEPAD
360a8 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
360ac 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
360b0 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
360b4 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
360b8 355 2C 00 90 AD |         if_z    jmp     #.poll
360bc 356             |         end
360bc 356             | 
360bc 356             |         if HAVE_MOUSE
360bc 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
360c0 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
360c4 358 20 00 90 AD |         if_z    jmp     #.poll
360c8 359             |         end
360c8 359             | 
360c8 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
360cc 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
360d0 35b 14 00 90 AD |         if_z    jmp     #.poll
360d4 35c             | 
360d4 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
360d8 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
360dc 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
360e0 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
360e4 360             |         if HAVE_MOUSE
360e4 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
360e8 361             |         else
360e8 361             |         end
360e8 361             | 
360e8 361             | .poll
360e8 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
360ec 362 2D EC 63 FD |                 call    pa
360f0 363             | .skip_poll
360f0 363             | 
360f0 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
360f4 364             | 
360f4 364             | .nopoll
360f4 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
360f8 365 44 00 90 AD |         if_z    jmp     #hsuspend
360fc 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
36100 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
36104 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
36108 369 1A 84 63 FD |                 getct   hr0
3610c 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
36110 36b             |         if ACTIVITY_LED >= 0
36110 36b             |         end
36110 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
36114 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
36118 36d 5C FF 9F FD |                 jmp     #hidle
3611c 36e             | ' Check for extended SE0 state on the bus
3611c 36e             | .se0_test
3611c 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
36120 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
36124 370 22 A7 82 FA |                 rqpin   urx, dm
36128 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3612c 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
36130 373 24 F6 BF FD |                 call    #wait_txn_ok
36134 374 00 00 80 FF 
36138 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3613c 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3613c 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
36140 377             | 
36140 377             | hsuspend
36140 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
36144 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
36148 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3614c 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
36150 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
36154 37c 00 96 07 F6 |                 mov     mod_cnt, #0
36158 37d             | 
36158 37d             |                 ' Fall through to resume wait loop
36158 37d             | 
36158 37d             | hwait_resume
36158 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3615c 37e 02 86 47 F0 |                 shr     hr1, #2
36160 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
36164 380             |         if ACTIVITY_LED >= 0
36164 380             |         end
36164 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
36168 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3616c 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
36170 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
36174 384 18 00 90 AD |         if_z    jmp     #.resume
36178 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3617c 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
36180 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
36184 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
36188 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3618c 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
36190 38b             | .resume
36190 38b 22 05 28 FC |                 wypin   #OUT_K, dm
36194 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
36198 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3619c 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
361a0 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
361a4 390 1F 70 63 FD |                 waitx   htmp
361a8 391 22 07 28 FC |                 wypin   #OUT_J, dm
361ac 392 01 70 47 F0 |                 shr     htmp, #1
361b0 393 1F 70 63 FD |                 waitx   htmp
361b4 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
361b8 395 1A 92 62 FD |                 getct   iframe_ct_base
361bc 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
361c0 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
361c4 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
361c8 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
361cc 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
361d0 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
361d4 39c             | 
361d4 39c             | '------------------------------------------------------------------------------
361d4 39c             | ' Send preamble to enable low-speed HUB ports
361d4 39c             | '------------------------------------------------------------------------------
361d4 39c             | ' On entry:
361d4 39c             | ' On exit:
361d4 39c             | '   USB baud rate set to low-speed
361d4 39c             | '------------------------------------------------------------------------------
361d4 39c             | utx_pre
361d4 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
361d8 39d 40 46 62 FD |                 dirl    dp
361dc 39e 28 02 64 FD |                 setq    #1
361e0 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
361e4 3a0 58 44 62 FD |                 drvl    dm
361e8 3a1 59 46 62 FD |                 drvh    dp
361ec 3a2             | 
361ec 3a2 1E 00 00 FF 
361f0 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
361f4 3a4             | 
361f4 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
361f8 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
361fc 3a6 28 02 64 3D |         if_nc   setq    #1
36200 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
36204 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
36208 3a9             | .l1
36208 3a9             | 
36208 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3620c 3aa 40 46 62 FD |                 dirl    dp
36210 3ab 28 02 64 FD |                 setq    #1
36214 3ac 80 00 80 FF 
36218 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3621c 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
36220 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
36224 3b0 41 46 62 FD |                 dirh    dp
36228 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3622c 3b2             | 
3622c 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
36230 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
36234 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
36238 3b5             | 
36238 3b5             | hlut_end
36238 3b5             |                 fit     $400
36238 3b5             |                 orgh
36238                 | if OVERLAP_MEMORY
36238                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
36238                 | end
36238                 | '------------------------------------------------------------------------------
36238                 | ' Routines called from cog space.
36238                 | '------------------------------------------------------------------------------
36238                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
36238                 | '------------------------------------------------------------------------------
36238                 | 
36238                 | '------------------------------------------------------------------------------
36238                 | ' USB host cog initialization.
36238                 | '------------------------------------------------------------------------------
36238                 | usb_host_init
36238                 |                 ' Initialize buffer pointers
36238                 |         if OVERLAP_MEMORY
36238                 |         else
36238     40 15 B0 FE |                 loc     pb, #hid_descr
3623c                 |         end
3623c     F7 4B 02 F6 |                 mov     hid_descr_p, pb
36240                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
36240                 |                 {
36240                 |                 }
36240                 |         
36240                 |                 {
36240                 |                 }
36240                 |                 'loc     pb,#hkbd_report
36240                 |                 'mov     hkbd_report_p,pb
36240                 | 
36240     08 1D B0 FE |                 loc     pb, #hub_descr
36244     F7 4D 02 F6 |                 mov     hub_descr_p, pb
36248     1D 1D B0 FE |                 loc     pb, #urx_buff
3624c     F7 4F 02 F6 |                 mov     urx_buff_p, pb
36250     95 1D B0 FE |                 loc     pb, #dev_desc_buff
36254     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
36258     9F 1D B0 FE |                 loc     pb, #con_desc_buff
3625c     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
36260     18 15 B0 FE |                 loc     pb, #usb_cache_start
36264     F7 55 02 F6 |                 mov     cache_start_p, pb
36268     E9 1C B0 FE |                 loc     pb, #usb_cache_end
3626c     F7 57 02 F6 |                 mov     cache_end_p, pb
36270                 | 
36270                 |         if ERROR_LED >= 0
36270                 |         end
36270                 | 
36270                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
36270                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
36270                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
36270                 | ' Configure and enable the Serial Host USB port.
36270     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
36274                 | 
36274                 | '------------------------------------------------------------------------------
36274                 | ' Timing calculations happen before any interrupt(s) are enabled.
36274                 | '------------------------------------------------------------------------------
36274                 | ' On entry:
36274                 | '   htmp - current CLKFREQ value.
36274                 | '------------------------------------------------------------------------------
36274                 | hinit_usb_timings
36274                 | '                getct   htmp2
36274     B8 59 02 F6 |                 mov     save_sysclk, htmp
36278     8D 5B 80 FF 
3627c     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
36280     18 30 63 FD |                 getqx   _12Mbps_
36284     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
36288     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3628c     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
36290     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
36294     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
36298     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3629c     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
362a0     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
362a4     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
362a8     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
362ac     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
362b0     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
362b4     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
362b8     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
362bc     80 00 00 FF 
362c0     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
362c4     18 2C 63 FD |                 getqx   _var_64_lower_
362c8     19 2E 63 FD |                 getqy   _var_64_upper_
362cc     28 2C 63 FD |                 setq    _var_64_lower_
362d0     65 CD 1D FF 
362d4     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
362d8     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
362dc     01 00 00 FF 
362e0     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
362e4     18 2C 63 FD |                 getqx   _var_64_lower_
362e8     19 2E 63 FD |                 getqy   _var_64_upper_
362ec     28 2C 63 FD |                 setq    _var_64_lower_
362f0     A1 07 00 FF 
362f4     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
362f8     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
362fc     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
36300     09 36 57 F0 |                 shr     _1us_, #9               wc
36304     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
36308     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
3630c     18 38 63 FD |                 getqx   _10us_
36310     09 38 57 F0 |                 shr     _10us_, #9              wc
36314     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
36318     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
3631c     18 3A 63 FD |                 getqx   _33us_
36320     09 3A 57 F0 |                 shr     _33us_, #9              wc
36324     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
36328     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
3632c     18 3C 63 FD |                 getqx   _txn_err_
36330     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
36334     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
36338     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
3633c     18 3E 63 FD |                 getqx   _500us_
36340     09 3E 57 F0 |                 shr     _500us_, #9             wc
36344     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
36348     01 00 00 FF 
3634c     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
36350     18 40 63 FD |                 getqx   _txn_ok_ls_
36354     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
36358     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3635c     01 00 00 FF 
36360     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
36364     18 42 63 FD |                 getqx   _txn_ok_fs_
36368     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3636c     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
36370     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
36374     05 00 00 FF 
36378     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3637c     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
36380     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
36384     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
36388     1C 00 00 FF 
3638c     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
36390     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
36394     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
36398     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
3639c     00 00 00 FF 
363a0     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
363a4     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
363a8     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
363ac     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
363b0     04 00 00 FF 
363b4     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
363b8     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
363bc     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
363c0     8D 5B 00 FF 
363c4     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
363c8     18 4C 63 FD |                 getqx   _preamble_wait_
363cc     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
363d0     01 00 00 FF 
363d4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
363d8     18 2C 63 FD |                 getqx   _var_64_lower_
363dc     19 2E 63 FD |                 getqy   _var_64_upper_
363e0     28 2C 63 FD |                 setq    _var_64_lower_
363e4     01 00 00 FF 
363e8     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
363ec     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
363f0     09 4E 57 F0 |                 shr     _1ms_, #9               wc
363f4     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
363f8     FF FF 7F FF 
363fc     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
36400     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
36404     A7 51 03 F6 |                 mov     _2ms_, _1ms_
36408     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
3640c     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
36410     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
36414     A7 55 03 F6 |                 mov     _4ms_, _1ms_
36418     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
3641c     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
36420     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
36424     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
36428     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
3642c     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
36430     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
36434     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
36438     A7 59 03 F6 |                 mov     _8ms_, _1ms_
3643c     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
36440     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
36444     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
36448     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
3644c     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
36450     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
36454     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
36458     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3645c     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
36460     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
36464     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
36468                 | '        _ret_   mov     _1sec_, save_sysclk
36468                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
36468                 | '                ret
36468                 | {
36468                 | }
36468                 | 
36468                 | '------------------------------------------------------------------------------
36468                 | ' Parse a configuration descriptor chain to see if the device is a recognized
36468                 | ' one. If it is, start the task progression that will configure the device for
36468                 | ' use.
36468                 | '------------------------------------------------------------------------------
36468                 | ' On entry:
36468                 | '   hconfig_base - start address of the cached config descriptor chain.
36468                 | ' On exit:
36468                 | '------------------------------------------------------------------------------
36468                 | hparse_con_desc
36468     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3646c     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
36470     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
36474     4E 70 FF F9 |                 movbyts htmp,#%%1032
36478     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3647c                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3647c                 | 
3647c     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
36480     6E ED 03 F1 |                 add     pa, hconfig_base
36484     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
36488                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
36488                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
36488                 | ' that defines a keyboard and/or mouse.
36488     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
3648c                 | .next_intf
3648c     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
36490     BC 01 90 3D |         if_ae   jmp     #hset_config
36494     6E F3 03 F6 |                 mov     ptrb, hconfig_base
36498     75 F3 03 F1 |                 add     ptrb, hnext_desc
3649c     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
364a0     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
364a4     0C 00 90 AD |         if_z    jmp     #.intf
364a8     80 71 C7 FA |                 rdbyte  htmp, ptrb
364ac     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
364b0     D8 FF 9F FD |                 jmp     #.next_intf
364b4                 | .intf
364b4     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
364b8     00 90 07 F6 |                 mov     hpar3, #0
364bc     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
364c0     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
364c4     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
364c8     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
364cc                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
364cc                 | 
364cc                 | .endp
364cc     80 71 C7 FA |                 rdbyte  htmp, ptrb
364d0     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
364d4     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
364d8     78 00 90 3D |         if_ae   jmp     #.get_device
364dc     6E F3 03 F6 |                 mov     ptrb, hconfig_base
364e0     75 F3 03 F1 |                 add     ptrb, hnext_desc
364e4     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
364e8     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
364ec     64 00 90 AD |         if_z    jmp     #.get_device
364f0     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
364f4     04 00 90 AD |         if_z    jmp     #.get_ep
364f8     D0 FF 9F FD |                 jmp     #.endp
364fc                 | .get_ep
364fc     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
36500     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
36504     0F 86 67 F0 |                 shl     hr1, #8 + 7
36508     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
3650c     3F 00 00 FF 
36510     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
36514     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
36518     00 8E 0F F2 |                 cmp     hpar2, #0               wz
3651c     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
36520     00 90 0F F2 |                 cmp     hpar3, #0               wz
36524     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
36528     A0 FF 9F FD |                 jmp     #.endp
3652c                 | .in_ep
3652c     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
36530     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
36534                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
36534     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
36538     C2 89 DB F8 |                 setbyte hr2, hr0, #3
3653c     8C FF 9F FD |                 jmp     #.endp
36540                 | .out_ep
36540     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
36544     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
36548                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
36548     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3654c     C2 8B DB F8 |                 setbyte hr3, hr0, #3
36550     78 FF 9F FD |                 jmp     #.endp
36554                 | 
36554                 | .get_device
36554     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
36558     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3655c     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
36560     68 00 90 AD |         if_z    jmp     #.gamepad
36564     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
36568     AC 00 90 AD |         if_z    jmp     #.hub
3656c     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
36570     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
36574     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
36578     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3657c     4C 00 90 AD |         if_z    jmp     #.gamepad
36580     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
36584     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
36588                 | .keyboard
36588     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
3658c                 |         if HAVE_MOUSE
3658c     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
36590                 |         else
36590                 |         end
36590     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
36594     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
36598     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3659c     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
365a0     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
365a4     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
365a8                 |                 'debug(udec(kb_intf_num))
365a8                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
365a8     E0 FE 9F FD |                 jmp     #.next_intf
365ac                 | if HAVE_MOUSE
365ac                 | .mouse
365ac     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
365b0     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
365b4     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
365b8     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
365bc     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
365c0                 |                 'getbyte ms_interval, hr2, #3
365c0     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
365c4     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
365c8                 |                 'debug(udec(kb_intf_num))
365c8                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
365c8     C0 FE 9F FD |                 jmp     #.next_intf
365cc                 | end
365cc                 | .gamepad
365cc     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
365d0     C7 71 63 F5 |                 xor     htmp, hpar2
365d4     3F 00 00 FF 
365d8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
365dc     AC FE 9F AD |         if_z    jmp     #.next_intf
365e0                 |         if HAVE_MOUSE
365e0     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
365e4     C7 71 63 F5 |                 xor     htmp, hpar2
365e8     3F 00 00 FF 
365ec     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
365f0     98 FE 9F AD |         if_z    jmp     #.next_intf
365f4                 |         end
365f4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
365f8     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
365fc     8C FE 9F 5D |         if_nz   jmp     #.next_intf
36600                 | 
36600     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
36604     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
36608     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3660c     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
36610     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
36614                 |                 'debug(udec(gp_intf_num))
36614                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
36614     74 FE 9F FD |                 jmp     #.next_intf
36618                 | .hub
36618     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3661c     6C FE 9F 5D |         if_nz   jmp     #.next_intf
36620     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
36624     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
36628     60 FE 9F 5D |         if_nz   jmp     #.next_intf
3662c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
36630     58 FE 9F 5D |         if_nz   jmp     #.next_intf
36634     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
36638     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3663c     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
36640     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
36644     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
36648     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
3664c                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
3664c     3C FE 9F FD |                 jmp     #.next_intf
36650                 | 
36650                 | '------------------------------------------------------------------------------
36650                 | ' If a newly-connected device is recognized, do whatever is needed to configure
36650                 | ' it according to its function, or functions. In the case of this boot protocol
36650                 | ' keyboard/mouse class driver:
36650                 | ' - SetConfiguration(config_num)
36650                 | ' - SetProtocol(boot)
36650                 | ' - SetIdle(indefinite)
36650                 | ' - Enter the device interrupt IN polling task stage.
36650                 | '------------------------------------------------------------------------------
36650                 | ' On entry:
36650                 | ' On exit:
36650                 | '------------------------------------------------------------------------------
36650                 | hset_config
36650                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
36650                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
36650     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
36654     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
36658     00 00 0C F2 |                 cmp     0-0, #0                 wz
3665c     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
36660                 |         if HAVE_MOUSE
36660     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
36664                 |         end
36664     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
36668     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3666c                 | .set_config
3666c     6C 0E D0 FE |                 loc     ptra, #set_config
36670     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
36674     6E ED 03 F1 |                 add     pa, hconfig_base
36678     F6 8D C3 FA |                 rdbyte  hpar1, pa
3667c     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
36680     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
36684     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
36688     A0 02 A0 FD |                 call    #control_write
3668c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36690     2D 00 64 5D |         if_nz   ret
36694                 | .kbd_config
36694     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
36698     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3669c                 | 
3669c     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
366a0     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
366a4     3F 00 00 FF 
366a8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
366ac     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
366b0                 | 
366b0     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
366b4     34 0E D0 FE |                 loc     ptra, #set_protocol
366b8     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
366bc     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
366c0     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
366c4     A0 02 A0 FD |                 call    #control_write
366c8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
366cc     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
366d0     E4 02 90 5D |         if_nz   jmp     #.notify_client
366d4     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
366d8     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
366dc     30 03 B0 FD |                 call    #hset_idle
366e0                 |                 'cmp     retval, #PID_ACK        wz
366e0                 |         'if_nz   mov     hkbd_ep_addr, #0
366e0                 |         'if_nz   jmp     #.notify_client
366e0     A8 99 02 F6 |                 mov     hctwait, _2ms_
366e4     EF 02 A0 FD |                 call    #poll_waitx
366e8     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
366ec     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
366f0     90 17 90 FE |                 loc     pa, #hkbd_led_rep
366f4     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
366f8     2C 03 B0 FD |                 call    #hset_kbdled_report
366fc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36700     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
36704     B0 02 90 5D |         if_nz   jmp     #.notify_client
36708     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3670c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
36710     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
36714     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
36718     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
3671c     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
36720     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
36724     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
36728     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
3672c     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
36730     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
36734                 |         if !!HAVE_MOUSE
36734                 |         end
36734                 | 
36734                 | .mouse_config
36734                 | if HAVE_MOUSE
36734     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
36738     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3673c     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
36740     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
36744     3F 00 00 FF 
36748     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3674c     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
36750                 | 
36750                 |                 debug("mouse passed addr check")
36750                 | 
36750     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
36754     00 00 80 FF 
36758     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3675c     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
36760     1B 01 A0 FD |                 call    #get_hid_descr_buffer
36764     55 02 A0 FD |                 call    #control_read
36768     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3676c     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
36770     44 02 90 5D |         if_nz   jmp     #.notify_client
36774     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
36778     56 01 00 F6 |                 mov     0-0, total_data
3677c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
36780                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
36780                 | 
36780     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
36784     64 0D D0 FE |                 loc     ptra, #set_protocol
36788     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3678c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
36790     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
36794     A0 02 A0 FD |                 call    #control_write
36798     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3679c     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
367a0     14 02 90 5D |         if_nz   jmp     #.notify_client
367a4                 |                 debug("mouse passed SetProtocol")
367a4     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
367a8     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
367ac     60 02 B0 FD |                 call    #hset_idle
367b0                 |                 'cmp     retval, #PID_ACK        wz
367b0                 |         'if_nz   mov     hmouse_ep_addr, #0
367b0                 |         'if_nz   jmp     #.notify_client
367b0                 |                 debug("mouse passed SetIdle")
367b0     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
367b4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
367b8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
367bc     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
367c0     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
367c4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
367c8     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
367cc     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
367d0     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
367d4     3F 00 00 FF 
367d8     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
367dc     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
367e0     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
367e4     D0 01 90 FD |                 jmp     #.notify_client
367e8                 | end
367e8                 | .gamepad_config
367e8                 | if _HAVE_GAMEPAD
367e8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
367ec     00 00 0C F2 |                 cmp     0-0, #0                 wz
367f0     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
367f4     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
367f8     00 70 03 F6 |                 mov     htmp, 0-0
367fc     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
36800     3F 00 00 FF 
36804     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
36808     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
3680c                 | 
3680c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
36810     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
36814     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
36818     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3681c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
36820     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
36824     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
36828     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
3682c     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
36830     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
36834     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
36838     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
3683c     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
36840     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
36844                 | 
36844                 |                 if EMUPAD_MAX_PLAYER > 0
36844                 |                 
36844                 | .rule_loop           
36844                 |                 end
36844                 | 
36844     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
36848     5C 00 90 AD |         if_e    jmp     #.xinput
3684c     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
36850     00 70 03 F6 |                 mov     htmp,0-0
36854     01 A6 02 FF 
36858     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
3685c     7C 00 90 AD |         if_e    jmp     #.ps3
36860                 | 
36860     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
36864     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
36868     00 00 80 5F 
3686c     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
36870     03 00 80 AF 
36874     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
36878     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
3687c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
36880     55 02 A0 FD |                 call    #control_read
36884     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36888     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3688c     00 00 04 56 |         if_nz   mov     0-0, #0
36890     24 01 90 5D |         if_nz   jmp     #.notify_client
36894     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
36898     56 01 00 F6 |                 mov     0-0, total_data
3689c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
368a0                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
368a0                 | 
368a0     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
368a4     10 01 90 FD |                 jmp     #.notify_client
368a8                 | .xinput
368a8     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
368ac     2D EF 03 F6 |                 mov     pb,hdev_port
368b0     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
368b4     03 EE 27 F3 |                 fle     pb,#3
368b8     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
368bc     02 EF 47 FC |                 wrbyte  pb, ptra[2]
368c0                 | 
368c0     03 B0 06 F6 |                 mov     pkt_data, #3
368c4     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
368c8     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
368cc     5A 00 A0 FD |                 call    #txn_out
368d0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
368d4                 | 
368d4     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
368d8     DC 00 90 FD |                 jmp     #.notify_client
368dc                 | .ps3
368dc     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
368e0     2D EF 03 F6 |                 mov     pb,hdev_port
368e4     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
368e8     04 EE 27 F3 |                 fle     pb,#4
368ec     F7 EF C3 F9 |                 decod   pb
368f0     09 EF 47 FC |                 wrbyte  pb, ptra[9]
368f4                 | 
368f4     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
368f8     00 0C D0 FE |                 loc     ptra, #set_report
368fc     01 00 80 FF 
36900     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
36904     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
36908     03 61 5C FC |                 wrword  #48, ptra[wLength]
3690c     20 0C B0 FE |                 loc     pb, #ps3_command_buff
36910     A0 02 A0 FD |                 call    #control_write
36914                 | 
36914     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
36918     E0 0B D0 FE |                 loc     ptra, #set_report
3691c     01 00 80 FF 
36920     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
36924     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
36928     03 09 5C FC |                 wrword  #4, ptra[wLength]
3692c     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
36930     A0 02 A0 FD |                 call    #control_write
36934     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
36938     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3693c     00 00 04 56 |         if_nz   mov     0-0, #0
36940     74 00 90 5D |         if_nz   jmp     #.notify_client
36944                 | 
36944     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
36948     6C 00 90 FD |                 jmp     #.notify_client
3694c                 | end
3694c                 | 
3694c                 | .hub_config
3694c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
36950     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
36954     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
36958     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3695c     3F 00 00 FF 
36960     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
36964     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
36968                 | 
36968     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
3696c     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
36970     26 EF 03 F6 |                 mov     pb, hub_descr_p
36974     55 02 A0 FD |                 call    #control_read
36978     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3697c     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
36980     34 00 90 5D |         if_nz   jmp     #.notify_client
36984                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
36984                 | 
36984     26 F1 03 F6 |                 mov     ptra, hub_descr_p
36988     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
3698c     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
36990                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
36990                 | .pwr_loop
36990     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
36994     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
36998     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
3699c     A0 02 A0 FD |                 call    #control_write
369a0     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
369a4                 | 
369a4     B1 99 02 F6 |                 mov     hctwait, _500ms_
369a8     B0 99 02 F1 |                 add     hctwait, _100ms_
369ac     EF 02 A0 FD |                 call    #poll_waitx
369b0                 | 
369b0     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
369b4     00 00 90 FD |                 jmp     #.notify_client
369b8                 | 
369b8                 | .notify_client
369b8     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
369bc     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
369c0                 |                 debug(uhex_long(hdev_type,hdev_type+1))
369c0                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
369c0     2D 00 64 FD |                 ret
369c4                 | 
369c4                 | '------------------------------------------------------------------------------
369c4                 | ' Initialize the keyboard/mouse data area to start-up values.
369c4                 | '------------------------------------------------------------------------------
369c4                 | ' On entry:
369c4                 | ' On exit:
369c4                 | '------------------------------------------------------------------------------
369c4                 | init_kbdm_data
369c4     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
369c8     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
369cc                 | 
369cc     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
369d0     2B ED 03 F6 |                 mov     pa, cache_end_p
369d4                 | .loop
369d4     61 01 4C FC |                 wrbyte  #0, ptra++
369d8     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
369dc     F4 FF 9F CD |         if_b    jmp     #.loop
369e0                 |         
369e0                 |         if EMUPAD_MAX_PLAYER > 0
369e0                 |         end
369e0                 | 
369e0                 | 
369e0     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
369e4                 | .regloop
369e4     00 EC 8F F9 |                 altd    pa
369e8     00 00 04 F6 |                 mov     0-0, #0
369ec     01 EC 07 F1 |                 add     pa, #1
369f0     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
369f4     EC FF 9F 5D |         if_nz   jmp     #.regloop
369f8                 | 
369f8     E1 E1 61 FF 
369fc     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
36a00     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
36a04     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
36a08     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
36a0c                 | 
36a0c     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
36a10                 | 
36a10                 | '------------------------------------------------------------------------------
36a10                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
36a10                 | ' function.
36a10                 | '------------------------------------------------------------------------------
36a10                 | ' On entry:
36a10                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
36a10                 | '   hpar2 - index number of the target interface.
36a10                 | ' On exit:
36a10                 | '------------------------------------------------------------------------------
36a10                 | hset_idle
36a10     A8 99 02 F6 |                 mov     hctwait, _2ms_
36a14     EF 02 A0 FD |                 call    #poll_waitx
36a18     D8 0A D0 FE |                 loc     ptra, #set_idle
36a1c     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
36a20     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
36a24     A0 02 80 FD |                 jmp     #control_write
36a28                 | 
36a28                 | '------------------------------------------------------------------------------
36a28                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
36a28                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
36a28                 | '------------------------------------------------------------------------------
36a28                 | ' On entry:
36a28                 | '   ep_addr_pid - device address and enpoint for the request.
36a28                 | ' On exit:
36a28                 | '   retval - transaction result.
36a28                 | '------------------------------------------------------------------------------
36a28                 | hset_kbdled_report
36a28     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
36a2c     CC 0A D0 FE |                 loc     ptra, #set_report
36a30     01 00 80 FF 
36a34     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
36a38     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
36a3c     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
36a40     27 EF 03 F6 |                 mov     pb, urx_buff_p
36a44     F7 77 42 FC |                 wrbyte  kb_led_states, pb
36a48     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
36a4c                 | 
36a4c                 | '------------------------------------------------------------------------------
36a4c                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
36a4c                 | '------------------------------------------------------------------------------
36a4c                 | ' On entry:
36a4c                 | ' On exit:
36a4c                 | '------------------------------------------------------------------------------
36a4c                 | hget_kbd_in_report
36a4c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
36a50     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
36a54     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
36a58     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
36a5c     CF 02 A0 FD |                 call    #do_int_in
36a60     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36a64     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
36a68                 | 
36a68     00 90 0F F2 |                 cmp     hpar3, #0               wz
36a6c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
36a70                 | 
36a70     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
36a74     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
36a78     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
36a7c     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
36a80                 | 
36a80     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
36a84     18 00 B0 FD |                 call    #hkbd_compare
36a88                 |         if EMUPAD_MAX_PLAYER > 0
36a88                 |         end
36a88                 | 
36a88                 | .led_check
36a88     3B 71 03 F6 |                 mov     htmp, kb_led_states
36a8c     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
36a90     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
36a94     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
36a98     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
36a9c     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
36aa0                 | 
36aa0                 | '------------------------------------------------------------------------------
36aa0                 | ' Compare current and previous keyboard data buffers for keypress changes.
36aa0                 | '------------------------------------------------------------------------------
36aa0                 | hkbd_compare
36aa0     27 F1 03 F6 |                 mov     ptra, urx_buff_p
36aa4     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
36aa8     61 73 07 FB |                 rdlong  htmp1, ptra++
36aac     E1 75 07 FB |                 rdlong  htmp2, ptrb++
36ab0     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
36ab4     61 73 07 FB |                 rdlong  htmp1, ptra++
36ab8     E1 75 07 FB |                 rdlong  htmp2, ptrb++
36abc     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
36ac0     2D 00 64 AD |         if_z    ret
36ac4                 | 
36ac4     B4 13 D0 FE |                 loc     ptra, #hkbd_report
36ac8                 | 
36ac8                 |                 ' Handle modifiers
36ac8     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
36acc     00 87 C7 FA |                 rdbyte  hr1, ptra
36ad0     C7 87 43 F9 |                 rolword hr1,hpar2,#0
36ad4     63 86 63 FD |                 mergew  hr1
36ad8     08 EC 07 F6 |                 mov     pa,#8
36adc                 | .modloop
36adc     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
36ae0     E8 8C 07 F6 |                 mov     hpar1,#$E8
36ae4     F6 8D 83 F1 |                 sub     hpar1,pa
36ae8     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
36aec     FB ED 6F FB |                 djnz    pa,#.modloop
36af0                 | 
36af0     6F E0 75 FD | .release        modc    _set    wc
36af4                 |                 'alts    hdev_port, #hid_report_p
36af4                 |                 'mov     ptra, hid_report_p
36af4     02 F0 07 F1 |                 add     ptra, #2
36af8     06 EC 07 F6 |                 mov     pa, #6
36afc     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
36b00     20 00 90 AD |         if_z    jmp     #.rl3
36b04     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
36b08     02 F2 07 F1 |                 add     ptrb, #2
36b0c     06 EE 07 F6 |                 mov     pb, #6
36b10     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
36b14     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
36b18     08 00 90 AD |         if_z    jmp     #.rl3
36b1c     FC EF 6F FB |                 djnz    pb, #.rl2
36b20     68 00 B0 FD |                 call    #hkbd_translate
36b24     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
36b28                 | 
36b28     00 90 07 F6 |                 mov     hpar3, #0
36b2c     1F 90 27 F4 |                 bith    hpar3, #31
36b30                 | 
36b30     6F 00 74 FD | .press          modc    _clr    wc
36b34     27 F1 03 F6 |                 mov     ptra, urx_buff_p
36b38     02 F0 07 F1 |                 add     ptra, #2
36b3c     06 EC 07 F6 |                 mov     pa, #6
36b40     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
36b44     20 00 90 AD |         if_z    jmp     #.pl3
36b48     30 13 F0 FE |                 loc     ptrb, #hkbd_report
36b4c     02 F2 07 F1 |                 add     ptrb, #2
36b50     06 EE 07 F6 |                 mov     pb, #6
36b54     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
36b58     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
36b5c     08 00 90 AD |         if_z    jmp     #.pl3
36b60     FC EF 6F FB |                 djnz    pb, #.pl2
36b64     24 00 B0 FD |                 call    #hkbd_translate
36b68     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
36b6c                 | 
36b6c     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
36b70     08 13 F0 FE |                 loc     ptrb, #hkbd_report
36b74     28 02 64 FD |                 setq #1
36b78     61 73 07 FB |                 rdlong  htmp1, ptra++
36b7c     28 02 64 FD |                 setq #1
36b80     E1 73 67 FC |                 wrlong  htmp1, ptrb++
36b84     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
36b88                 | 
36b88     2D 00 64 FD |                 ret
36b8c                 | 
36b8c                 | '------------------------------------------------------------------------------
36b8c                 | ' Translate keyboard scancode to ASCII
36b8c                 | '------------------------------------------------------------------------------
36b8c                 | ' On entry:
36b8c                 | '   hpar1 - scancode
36b8c                 | '   hpar2 - key modifiers state
36b8c                 | '       c - pressed (0) or released (1) flag
36b8c                 | ' On exit:
36b8c                 | '   hpar1 - bit     31 = 0 pressed, 1 released
36b8c                 | '               30..17 = unused
36b8c                 | '                   18 = scroll-lock state 
36b8c                 | '                   17 = caps-lock state
36b8c                 | '                   16 = num-lock state 
36b8c                 | '                15..8 = key modifiers state
36b8c                 | '                 7..0 = scancode
36b8c                 | '------------------------------------------------------------------------------
36b8c                 | hkbd_translate
36b8c     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
36b90     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
36b94     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
36b98     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
36b9c     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
36ba0     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
36ba4                 | 
36ba4                 |         if EMUPAD_MAX_PLAYER > 0
36ba4                 | 
36ba4                 |         if EMUPAD_BT0_BIT >= 0
36ba4                 |         end
36ba4                 |         if EMUPAD_BT1_BIT >= 0
36ba4                 |         end
36ba4                 |         if EMUPAD_BT2_BIT >= 0
36ba4                 |         end
36ba4                 |         if EMUPAD_BT3_BIT >= 0
36ba4                 |         end
36ba4                 |         if EMUPAD_BT4_BIT >= 0
36ba4                 |         end
36ba4                 |         if EMUPAD_BT5_BIT >= 0
36ba4                 |         end
36ba4                 |         if EMUPAD_BT6_BIT >= 0
36ba4                 |         end
36ba4                 |         if EMUPAD_BT7_BIT >= 0
36ba4                 |         end
36ba4                 |         if EMUPAD_BT8_BIT >= 0
36ba4                 |         end
36ba4                 |         if EMUPAD_BT9_BIT >= 0
36ba4                 |         end
36ba4                 | 
36ba4                 |         end
36ba4     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
36ba8     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
36bac     1F 8C 47 F4 |                 bitc    hpar1, #31
36bb0                 |         if KEYQUEUE_SIZE > 0
36bb0     C4 09 B0 FE |                 loc pb,#keyq_head
36bb4     F7 71 E3 FA |                 rdword htmp,pb
36bb8     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
36bbc     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
36bc0     B8 75 03 F6 |                 mov htmp2,htmp
36bc4     04 74 07 FA |                 mul htmp2,#4
36bc8     F7 75 03 F1 |                 add htmp2,pb
36bcc     02 74 07 F1 |                 add htmp2,#2
36bd0     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
36bd4     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
36bd8     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
36bdc     F7 71 43 5C |         if_nz   wrbyte htmp,pb
36be0                 |         end
36be0     2D 00 7C FD |                 ret wcz
36be4                 | 
36be4                 | if HAVE_MOUSE
36be4                 | '------------------------------------------------------------------------------
36be4                 | ' Execute an IN interrupt transaction to poll for mouse activity.
36be4                 | '------------------------------------------------------------------------------
36be4                 | ' On entry:
36be4                 | ' On exit:
36be4                 | '------------------------------------------------------------------------------
36be4                 | hget_mouse_in_report
36be4     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
36be8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
36bec     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
36bf0     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
36bf4     CF 02 A0 FD |                 call    #do_int_in
36bf8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36bfc     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
36c00                 | 
36c00     00 90 0F F2 |                 cmp     hpar3, #0               wz
36c04     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
36c08                 | 
36c08     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
36c0c     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
36c10     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
36c14     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
36c18                 | 
36c18     27 F1 03 F6 |                 mov     ptra, urx_buff_p
36c1c     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
36c20     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
36c24     01 90 87 31 |         if_ae   sub     hpar3, #1
36c28                 | 
36c28     40 09 90 FE |                 loc     pa, #mouse_limits
36c2c     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
36c30                 | 
36c30                 |                 ' load xacc,yacc,zacc
36c30     28 04 64 FD |                 setq    #3-1
36c34     80 87 07 FB |                 rdlong  hr1,ptrb
36c38                 |                 ' load limits and outptr
36c38     28 04 64 FD |                 setq    #3-1
36c3c     F6 73 03 FB |                 rdlong  htmp1,pa
36c40                 | 
36c40     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
36c44     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
36c48     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
36c4c     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
36c50     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
36c54     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
36c58     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
36c5c     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
36c60                 |               
36c60                 | 
36c60     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
36c64     07 70 67 F7 |                 signx   htmp, #7
36c68     B8 87 03 F1 |                 add     hr1,htmp
36c6c     00 72 0F F2 |                 cmp     htmp1,#0 wz
36c70     B9 87 63 53 |         if_ne   fles    hr1,htmp1
36c74     00 86 47 53 |         if_ne   fges    hr1,#0
36c78                 | 
36c78     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
36c7c     07 70 67 F7 |                 signx   htmp, #7
36c80     B8 89 03 F1 |                 add     hr2,htmp
36c84     00 74 0F F2 |                 cmp     htmp2,#0 wz
36c88     BA 89 63 53 |         if_ne   fles    hr2,htmp2
36c8c     00 88 47 53 |         if_ne   fges    hr2,#0
36c90                 |                 
36c90                 | 
36c90     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
36c94     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
36c98     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
36c9c     B8 8B 03 A1 |         if_z    add     hr3,htmp
36ca0                 | 
36ca0     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
36ca4     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
36ca8                 | 
36ca8                 |                 ' write back accumulators
36ca8     28 04 64 FD |                 setq    #3-1
36cac     80 87 67 FC |                 wrlong  hr1,ptrb
36cb0                 |                 ' if outptr set, write X/Y words
36cb0     00 76 0F F2 |                 cmp htmp3,#0                    wz
36cb4     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
36cb8     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
36cbc     2D 00 64 FD |                 ret
36cc0                 | end
36cc0                 | 
36cc0                 | '------------------------------------------------------------------------------
36cc0                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
36cc0                 | '------------------------------------------------------------------------------
36cc0                 | ' On entry:
36cc0                 | ' On exit:
36cc0                 | '------------------------------------------------------------------------------
36cc0                 | if _HAVE_GAMEPAD
36cc0                 | hget_gp_in_report
36cc0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
36cc4     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
36cc8                 | 
36cc8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
36ccc     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
36cd0     00 90 E3 F8 |                 getbyte hpar3
36cd4     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
36cd8     CF 02 A0 FD |                 call    #do_int_in
36cdc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
36ce0     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
36ce4                 | 
36ce4     00 90 0F F2 |                 cmp     hpar3, #0               wz
36ce8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
36cec                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
36cec                 | 
36cec     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
36cf0     00 70 E3 F8 |                 getbyte htmp                            ' |
36cf4     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
36cf8     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
36cfc     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
36d00     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
36d04     B8 01 C0 F8 |                 setbyte htmp                            ' |
36d08                 | 
36d08                 | ' Note: the following code compares the current and previous reports
36d08                 | ' and process the data if there are changes to ease the debug output.
36d08                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
36d08                 | ' gpPreReport buffer.
36d08                 | 
36d08                 |                 ' ----- start of block to remove
36d08                 |                 {
36d08                 |                 }
36d08                 |                 ' ----- end of block to remove
36d08     F4 04 90 FE |                 loc pa,#hpad_translate
36d0c     2A EC 63 FD |                 push pa
36d10                 | 
36d10                 |                 ' FALL THROUGH !!!!
36d10                 | 
36d10                 | '------------------------------------------------------------------------------
36d10                 | ' Decode controller report
36d10                 | '------------------------------------------------------------------------------
36d10                 | hid_decode
36d10                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
36d10     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
36d14     00 04 00 FF 
36d18     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
36d1c                 | 
36d1c     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
36d20                 | 
36d20     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
36d24     00 2A E3 F8 |                 getbyte hidr_type
36d28     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
36d2c     34 02 90 AD |         if_z    jmp     #hpad_xinput
36d30     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
36d34     1C 03 90 AD |         if_z    jmp     #hpad_ps3
36d38     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
36d3c     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
36d40     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
36d44                 |                 
36d44                 | 
36d44                 | '------------------------------------------------------------------------------
36d44                 | ' Handle HID controller (or mouse now
36d44                 | ' On entry:
36d44                 | '   ptrb - controller report
36d44                 | '------------------------------------------------------------------------------
36d44                 | hpad_hid
36d44     1B 01 A0 FD |                 call    #get_hid_descr_buffer
36d48     F7 F1 03 F6 |                 mov     ptra, pb
36d4c     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
36d50     00 EC 03 F6 |                 mov     pa, 0-0
36d54                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
36d54     19 2A 3B FF 
36d58     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
36d5c                 | 
36d5c                 | .next
36d5c     00 EC 5F F2 |                 cmps    pa, #0      wcz
36d60     2D 00 7C ED |         if_be   ret     wcz
36d64                 | 
36d64     61 8D C7 FA |                 rdbyte  hpar1, ptra++
36d68     01 EC 87 F1 |                 sub     pa, #1
36d6c     00 8E 07 F6 |                 mov     hpar2, #0
36d70                 | 
36d70     C6 71 03 F6 |                 mov     htmp, hpar1
36d74     03 70 07 F5 |                 and     htmp, #$03
36d78     01 70 0F F2 |                 cmp     htmp, #1    wz
36d7c     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
36d80     07 8E 67 A7 |         if_z    signx   hpar2,#7
36d84     01 EC 87 A1 |         if_z    sub     pa, #1
36d88     02 70 0F F2 |                 cmp     htmp, #2    wz
36d8c     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
36d90     0F 8E 67 A7 |         if_z    signx   hpar2,#15
36d94     02 EC 87 A1 |         if_z    sub     pa, #2
36d98     03 70 0F F2 |                 cmp     htmp, #3    wz
36d9c     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
36da0     04 EC 87 A1 |         if_z    sub     pa, #4
36da4                 | 
36da4     FC 8C 07 F5 |                 and     hpar1, #$FC
36da8                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
36da8                 | 
36da8     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
36dac     0C 01 90 AD |         if_z    jmp     #.report_id
36db0     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
36db4     24 01 90 AD |         if_z    jmp     #.usage_page
36db8     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
36dbc     2C 01 90 AD |         if_z    jmp     #.usage
36dc0     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
36dc4     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
36dc8     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
36dcc     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
36dd0     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
36dd4     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
36dd8     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
36ddc     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
36de0     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
36de4     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
36de8     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
36dec     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
36df0     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
36df4     64 FF 9F 5D |         if_nz   jmp     #.next
36df8                 | 
36df8     D8 1D A7 FB |                 tjf     hidr_state,#.next
36dfc                 | 
36dfc     03 8E 07 F5 |                 and     hpar2, #$03
36e00     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
36e04     18 00 90 5D |         if_nz   jmp     #.skip
36e08                 | 
36e08     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
36e0c     20 00 90 AD |         if_z    jmp     #.axes
36e10     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
36e14     5C 00 90 AD |         if_z    jmp     #.hats
36e18     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
36e1c     70 00 90 AD |         if_z    jmp     #.buttons
36e20                 | .skip
36e20     8F 71 03 F6 |                 mov     htmp, hidr_size
36e24     90 71 03 FA |                 mul     htmp, hidr_count
36e28     B8 23 03 F1 |                 add     hidr_offset, htmp
36e2c     2C FF 9F FD |                 jmp     #.next
36e30                 | .axes
36e30                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
36e30     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
36e34     90 87 03 F6 |                 mov     hr1, hidr_count
36e38                 | .l1
36e38     91 8D 03 F6 |                 mov     hpar1, hidr_offset
36e3c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
36e40     04 03 B0 FD |                 call    #hpad_getbits
36e44     64 03 B0 FD |                 call    #hpad_normalize
36e48     06 84 1F F2 |                 cmp     hr0, #6         wcz
36e4c     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
36e50     00 88 43 C8 |         if_b    getnib  hr2
36e54     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
36e58     5F 01 20 C9 |         if_b    setword retval
36e5c     01 84 07 C1 |         if_b    add     hr0, #1
36e60     8F 23 03 F1 |                 add     hidr_offset, hidr_size
36e64     F4 87 6F FB |                 djnz    hr1, #.l1
36e68                 | 
36e68     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
36e6c     01 1C 07 F6 |                 mov     hidr_state, #1
36e70     E8 FE 9F FD |                 jmp     #.next
36e74                 | .hats
36e74                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
36e74     91 8D 03 F6 |                 mov     hpar1, hidr_offset
36e78     8F 8F 03 F6 |                 mov     hpar2, hidr_size
36e7c     C8 02 B0 FD |                 call    #hpad_getbits
36e80     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
36e84     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
36e88     01 1C 07 F6 |                 mov     hidr_state, #1
36e8c     90 FF 9F FD |                 jmp     #.skip
36e90                 | .buttons
36e90                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
36e90     91 8D 03 F6 |                 mov     hpar1, hidr_offset
36e94     8F 8F 03 F6 |                 mov     hpar2, hidr_size
36e98     90 8F 03 FA |                 mul     hpar2, hidr_count
36e9c     A8 02 B0 FD |                 call    #hpad_getbits
36ea0     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
36ea4     B8 BF 62 F0 |                 shl     retval, htmp
36ea8     5F 17 43 F5 |                 or      hidr_buttons, retval
36eac     90 71 03 F1 |                 add     htmp, hidr_count
36eb0     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
36eb4     01 1C 07 F6 |                 mov     hidr_state, #1
36eb8     64 FF 9F FD |                 jmp     #.skip
36ebc                 | .report_id
36ebc     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
36ec0     2D 00 7C 5D |         if_nz   ret     wcz
36ec4     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
36ec8     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
36ecc     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
36ed0     01 1C 67 56 |         if_nz   neg     hidr_state,#1
36ed4     01 F2 87 51 |         if_nz   sub     ptrb,#1
36ed8     80 FE 9F FD |                 jmp     #.next
36edc                 | .usage_page
36edc     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
36ee0     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
36ee4     04 1C 07 A6 |         if_z    mov     hidr_state, #4
36ee8     70 FE 9F FD |                 jmp     #.next
36eec                 | .usage
36eec     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
36ef0     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
36ef4     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
36ef8     01 1C 07 A6 |         if_z    mov     hidr_state, #1
36efc     5C FE 9F AD |         if_z    jmp     #.next
36f00     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
36f04     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
36f08     01 1C 07 A6 |         if_z    mov     hidr_state, #1
36f0c     4C FE 9F AD |         if_z    jmp     #.next
36f10     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
36f14     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
36f18     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
36f1c     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
36f20     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
36f24     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
36f28     10 00 90 AD |         if_z    jmp     #.usage_axis
36f2c     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
36f30     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
36f34     03 1C 07 A6 |         if_z    mov     hidr_state, #3
36f38     20 FE 9F FD |                 jmp     #.next
36f3c                 | .usage_axis
36f3c     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
36f40     18 FE 9F CD |         if_b    jmp     #.next
36f44     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
36f48     C7 01 00 F8 |                 setnib  hpar2
36f4c                 | 
36f4c     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
36f50     C7 8F C3 F9 |                 decod   hpar2
36f54     C7 0F 43 F5 |                 or      hidr_flags, hpar2
36f58                 | 
36f58     01 24 07 F1 |                 add     hidr_usage_idx, #1
36f5c     02 1C 07 F6 |                 mov     hidr_state, #2
36f60     F8 FD 9F FD |                 jmp     #.next
36f64                 | 
36f64                 | '------------------------------------------------------------------------------
36f64                 | ' Handle XInput controller
36f64                 | ' On entry:
36f64                 | '   ptrb - controller report
36f64                 | '------------------------------------------------------------------------------
36f64                 | '   Default implementation translates the report to a pseudo-defacto hid
36f64                 | '   standard and jumps to hpad_translate for actions.
36f64                 | '   Implementors may take specific actions for this kind of controller.
36f64                 | '------------------------------------------------------------------------------
36f64                 | hpad_xinput
36f64     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
36f68     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
36f6c     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
36f70     14 70 0F F2 |                 cmp     htmp, #$14      wz
36f74     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
36f78                 | 
36f78                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
36f78                 | 
36f78     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
36f7c     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
36f80                 | 
36f80     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
36f84     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
36f88     5F BF 22 F6 |                 not     retval
36f8c     5F 11 2B F9 |                 setword hidr_axis, retval, #1
36f90     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
36f94     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
36f98     5F BF 22 F6 |                 not     retval
36f9c     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
36fa0                 | 
36fa0     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
36fa4     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
36fa8     C0 BE 1E F2 |                 cmp     retval, #192    wcz
36fac     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
36fb0     F8 01 B0 FD |                 call    #hpad_normalize
36fb4     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
36fb8     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
36fbc     C0 BE 1E F2 |                 cmp     retval, #192    wcz
36fc0     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
36fc4     E4 01 B0 FD |                 call    #hpad_normalize
36fc8     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
36fcc                 | 
36fcc     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
36fd0     81 BF E6 FA |                 rdword  retval, ptrb[1]
36fd4     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
36fd8     00 16 47 F4 |                 bitc    hidr_buttons, #0
36fdc     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
36fe0     01 16 47 F4 |                 bitc    hidr_buttons, #1
36fe4     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
36fe8     02 16 47 F4 |                 bitc    hidr_buttons, #2
36fec     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
36ff0     03 16 47 F4 |                 bitc    hidr_buttons, #3
36ff4     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
36ff8     04 16 47 F4 |                 bitc    hidr_buttons, #4
36ffc     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
37000     05 16 47 F4 |                 bitc    hidr_buttons, #5
37004     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
37008     08 16 47 F4 |                 bitc    hidr_buttons, #8
3700c     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
37010     09 16 47 F4 |                 bitc    hidr_buttons, #9
37014     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
37018     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3701c     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
37020     0B 16 47 F4 |                 bitc    hidr_buttons, #11
37024     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
37028     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3702c                 | 
3702c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
37030     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
37034     7A BB 7A FF 
37038     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
3703c     F9 FF 7F FF 
37040     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
37044     B9 71 5F F9 |                 altgn   htmp, #htmp1
37048     00 70 43 F8 |                 getnib  htmp
3704c     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
37050                 | 
37050     AC 01 90 FD |                 jmp     #hpad_translate
37054                 | 
37054                 | '------------------------------------------------------------------------------
37054                 | ' Handle PS3 controller
37054                 | ' On entry:
37054                 | '   ptrb - controller report
37054                 | '------------------------------------------------------------------------------
37054                 | '   Default implementation translates the report to a pseudo-defacto hid
37054                 | '   standard and jumps to hpad_translate for actions.
37054                 | '   Implementors may take specific actions for this kind of controller.
37054                 | '------------------------------------------------------------------------------
37054                 | hpad_ps3
37054     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
37058     01 70 0F F2 |                 cmp     htmp, #$01      wz
3705c     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
37060                 | 
37060                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
37060                 | 
37060     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
37064     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
37068     40 01 B0 FD |                 call    #hpad_normalize
3706c     5F 11 23 F9 |                 setword hidr_axis, retval, #0
37070     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
37074     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
37078     30 01 B0 FD |                 call    #hpad_normalize
3707c     5F 11 2B F9 |                 setword hidr_axis, retval, #1
37080     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
37084     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
37088     20 01 B0 FD |                 call    #hpad_normalize
3708c     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
37090     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
37094     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
37098     10 01 B0 FD |                 call    #hpad_normalize
3709c     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
370a0     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
370a4     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
370a8                 | 
370a8     08 8C 07 F6 |                 mov     hpar1, #8
370ac     13 8E 07 F6 |                 mov     hpar2, #19
370b0     94 00 B0 FD |                 call    #hpad_getbits
370b4                 | 
370b4     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
370b8     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
370bc     00 16 47 F4 |                 bitc    hidr_buttons, #0
370c0     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
370c4     01 16 47 F4 |                 bitc    hidr_buttons, #1
370c8     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
370cc     02 16 47 F4 |                 bitc    hidr_buttons, #2
370d0     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
370d4     03 16 47 F4 |                 bitc    hidr_buttons, #3
370d8     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
370dc     04 16 47 F4 |                 bitc    hidr_buttons, #4
370e0     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
370e4     05 16 47 F4 |                 bitc    hidr_buttons, #5
370e8     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
370ec     06 16 47 F4 |                 bitc    hidr_buttons, #6
370f0     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
370f4     07 16 47 F4 |                 bitc    hidr_buttons, #7
370f8     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
370fc     08 16 47 F4 |                 bitc    hidr_buttons, #8
37100     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
37104     09 16 47 F4 |                 bitc    hidr_buttons, #9
37108     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3710c     0A 16 47 F4 |                 bitc    hidr_buttons, #10
37110     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
37114     0B 16 47 F4 |                 bitc    hidr_buttons, #11
37118     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3711c     0C 16 47 F4 |                 bitc    hidr_buttons, #12
37120                 | 
37120     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
37124     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
37128     09 FA 79 FF 
3712c     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
37130     FF FA 7F FF 
37134     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
37138     B9 71 5F F9 |                 altgn   htmp, #htmp1
3713c     00 70 43 F8 |                 getnib  htmp
37140     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
37144                 | 
37144     B8 00 90 FD |                 jmp     #hpad_translate
37148                 | 
37148                 | '------------------------------------------------------------------------------
37148                 | ' Read bits from report data buffer
37148                 | '------------------------------------------------------------------------------
37148                 | ' On entry:
37148                 | '   PTRB - report buffer
37148                 | '   hpar1 - start bit
37148                 | '   hpar2 - number of bits
37148                 | ' On exit:
37148                 | '   retval - bits
37148                 | '------------------------------------------------------------------------------
37148                 | hpad_getbits
37148     C6 71 03 F6 |                 mov     htmp, hpar1
3714c     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
37150     F9 71 03 F1 |                 add     htmp, ptrb
37154     B8 BF 02 FB |                 rdlong  retval, htmp
37158                 | 
37158     C6 73 03 F6 |                 mov     htmp1, hpar1
3715c     07 72 07 F5 |                 and     htmp1, #$07     ' shift
37160     B9 BF 42 F0 |                 shr     retval, htmp1
37164                 | 
37164     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
37168     10 00 90 1D |         if_a    jmp     #.l1
3716c                 | 
3716c     C7 8F C3 F9 |                 decod   hpar2
37170     01 8E 87 F1 |                 sub     hpar2, #1
37174     C7 BF 02 F5 |                 and     retval, hpar2
37178     2D 00 64 FD |                 ret
3717c                 | .l1
3717c     FF 7F 00 FF 
37180     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
37184     03 70 07 F1 |                 add     htmp, #3
37188     B8 75 03 FB |                 rdlong  htmp2, htmp
3718c     18 8E 87 F1 |                 sub     hpar2, #24
37190     C7 8F C3 F9 |                 decod   hpar2
37194     01 8E 87 F1 |                 sub     hpar2, #1
37198     B9 75 43 F0 |                 shr     htmp2, htmp1
3719c     C7 75 03 F5 |                 and     htmp2, hpar2
371a0     18 74 67 F0 |                 shl     htmp2, #24
371a4     BA BF 42 F5 |                 or      retval, htmp2
371a8     2D 00 64 FD |                 ret
371ac                 | 
371ac                 | '------------------------------------------------------------------------------
371ac                 | ' Normalize value to signed word (-32768 / 32767)
371ac                 | '------------------------------------------------------------------------------
371ac                 | ' On entry:
371ac                 | '   retval - value to normalize
371ac                 | '   hidr_lminmax - min (word 1) max (word 0) value range
371ac                 | '   - or -
371ac                 | '   hidr_pminmax - min (word 1) max (word 0) value range
371ac                 | '   hidr_size - value bits length
371ac                 | ' On exit:
371ac                 | '   retval - normalized value
371ac                 | '------------------------------------------------------------------------------
371ac                 | hpad_normalize
371ac     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
371b0     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
371b4     2D 00 64 AD |         if_z    ret
371b8     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
371bc     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
371c0     0F 72 77 F7 |                 signx   htmp1, #15      wc
371c4     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
371c8     00 BE 66 C7 |         if_c    signx   retval, #0-0
371cc     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
371d0     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
371d4     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
371d8     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
371dc     B8 71 53 F6 |                 abs     htmp            wc
371e0     1F BE 0E F4 |                 testb   retval, #31     wz
371e4     5F BF 42 F6 |                 abs     retval
371e8     B8 BF 12 FD |                 qdiv    retval, htmp
371ec     18 BE 62 FD |                 getqx   retval
371f0     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
371f4     C0 FF 7F FF 
371f8     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
371fc     2D 00 64 FD |                 ret
37200                 | 
37200                 | '------------------------------------------------------------------------------
37200                 | ' Perform controller actions
37200                 | ' On entry:
37200                 | '    hidr_id        report id
37200                 | '    hidr_axis      axis value (signed word, 2 axes per long)
37200                 | '                      X = hidr_axis+0, #0
37200                 | '                      Y = hidr_axis+0, #1
37200                 | '                      Z = hidr_axis+1, #0
37200                 | '                     RX = hidr_axis+1, #1
37200                 | '                     RY = hidr_axis+2, #0
37200                 | '                     RZ = hidr_axis+2, #1
37200                 | '    hidr_buttons   buttons state (bits 0 to 31)
37200                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
37200                 | '
37200                 | '                     -------3 -------2 -------1 -------0 byte
37200                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
37200                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
37200                 | '                                zyx||| |||||||| ++++++++ n. buttons
37200                 | '                                |||||| ||||++++--------- n. axes
37200                 | '                                |||||| ++++------------- n. hats
37200                 | '                                ++++++------------------ valid axes
37200                 | '------------------------------------------------------------------------------
37200                 | hpad_translate
37200                 | 
37200                 | 
37200                 |         if HAVE_HIDPAD
37200     84 0C F0 FE |                 loc     ptrb,#hidpad_report
37204     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
37208     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
3720c     01 70 E7 F2 |                 cmpsub  htmp,#1
37210     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
37214     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
37218     2D 00 7C 3D |         if_ae   ret     wcz
3721c     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
37220     B8 F3 03 F1 |                 add     ptrb,htmp
37224     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
37228     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3722c     28 0C 64 FD |                 setq    #7-1
37230     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
37234                 |         end
37234                 | 
37234                 | 
37234                 |         if EMUPAD_MAX_PLAYER > 0
37234                 | .emupad_no_hat
37234                 |         if EMUPAD_BT0_BIT >= 0
37234                 |         end
37234                 |         if EMUPAD_BT1_BIT >= 0
37234                 |         end
37234                 |         if EMUPAD_BT2_BIT >= 0
37234                 |         end
37234                 |         if EMUPAD_BT3_BIT >= 0
37234                 |         end
37234                 |         if EMUPAD_BT4_BIT >= 0
37234                 |         end
37234                 |         if EMUPAD_BT5_BIT >= 0
37234                 |         end
37234                 |         if EMUPAD_BT6_BIT >= 0
37234                 |         end
37234                 |         if EMUPAD_BT7_BIT >= 0
37234                 |         end
37234                 |         if EMUPAD_BT8_BIT >= 0
37234                 |         end
37234                 |         if EMUPAD_BT9_BIT >= 0
37234                 |         end
37234                 | .emupad_slot_over
37234                 |         end
37234                 | 
37234                 |         if 0
37234                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
37234                 | 
37234                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
37234                 | 
37234                 |         end
37234     2D 00 64 FD |                 ret
37238                 | end
37238                 | 
37238                 | if EMUPAD_MAX_PLAYER > 0
37238                 | '------------------------------------------------------------------------------
37238                 | ' Clear EmuPad state
37238                 | '------------------------------------------------------------------------------
37238                 | emupad_reset
37238                 | 
37238                 | '------------------------------------------------------------------------------
37238                 | ' Get EmuPad Player number for current device (into retval)
37238                 | ' Z flag is also set if current device is valid
37238                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
37238                 | '------------------------------------------------------------------------------
37238                 | emupad_getnum
37238                 | .loop
37238                 | '------------------------------------------------------------------------------
37238                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
37238                 | '------------------------------------------------------------------------------
37238                 | emupad_discon
37238                 | .loop         
37238                 |         
37238                 |         ' FALL THROUGH!!!
37238                 | 
37238                 | '------------------------------------------------------------------------------
37238                 | ' Update EmuPad reports (all of them...)
37238                 | '------------------------------------------------------------------------------
37238                 | emupad_write_reports
37238                 | .devloop
37238                 | 
37238                 | end
37238                 | 
37238                 | 
37238                 | '------------------------------------------------------------------------------
37238                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
37238                 | '------------------------------------------------------------------------------
37238                 | ' On entry:
37238                 | ' On exit:
37238                 | '------------------------------------------------------------------------------
37238                 | hget_hub_status
37238     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3723c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
37240     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
37244     01 90 2F F9 |                 setword hpar3, #1, #1
37248     CF 02 A0 FD |                 call    #do_int_in
3724c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37250     0C 00 90 AD |         if_z    jmp     #.data
37254     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
37258     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3725c     2D 00 64 FD |                 ret
37260                 | .data
37260     00 90 0F F2 |                 cmp     hpar3, #0               wz
37264     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
37268                 | 
37268     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3726c     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
37270     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
37274     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
37278                 |                 debug(ubin_long(hub_status_chg))
37278                 | 
37278     01 5A 06 F6 |                 mov     hdev_port, #1
3727c                 | .loop
3727c     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
37280     0C 00 B0 AD |         if_x1   call    #hub_port_handler
37284     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
37288     F0 FF 9F 3D |         if_nc   jmp     #.loop
3728c     2D 00 64 FD |                 ret
37290                 | 
37290                 | hub_port_handler
37290     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
37294     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
37298     27 EF 03 F6 |                 mov     pb, urx_buff_p
3729c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
372a0     55 02 A0 FD |                 call    #control_read
372a4     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
372a8                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
372a8                 | 
372a8     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
372ac     50 01 90 5D |         if_x0   jmp     #.other
372b0     68 02 D0 FE |                 loc     ptra, #clr_port_feat
372b4     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
372b8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
372bc     A0 02 A0 FD |                 call    #control_write
372c0     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
372c4     7C 01 90 5D |         if_x0   jmp     #.disconnect
372c8     B0 99 02 F6 |                 mov     hctwait, _100ms_
372cc     EF 02 A0 FD |                 call    #poll_waitx
372d0                 | 
372d0     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
372d4     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
372d8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
372dc     A0 02 A0 FD |                 call    #control_write
372e0                 | 
372e0     02 76 07 F6 |                 mov     htmp3, #2
372e4                 | .wait_reset
372e4     AC 99 02 F6 |                 mov     hctwait, _8ms_
372e8     EF 02 A0 FD |                 call    #poll_waitx
372ec     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
372f0     27 EF 03 F6 |                 mov     pb, urx_buff_p
372f4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
372f8     55 02 A0 FD |                 call    #control_read
372fc     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
37300     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
37304     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
37308                 | 
37308     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3730c     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
37310     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
37314     A0 02 A0 FD |                 call    #control_write
37318                 | 
37318     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3731c                 | .wait_recover
3731c     A7 99 02 F6 |                 mov     hctwait, _1ms_
37320     EF 02 A0 FD |                 call    #poll_waitx
37324     FD 71 6F FB |                 djnz    htmp,#.wait_recover
37328                 | 
37328     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3732c     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
37330     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
37334                 | 
37334     00 08 00 FF 
37338     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3733c     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
37340     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
37344     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
37348     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3734c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37350     48 01 90 5D |         if_nz   jmp     #.done
37354                 | .get_dev_desc
37354     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
37358     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3735c     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
37360     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
37364     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
37368     01 71 57 FC |                 wrword  htmp, ptra[wValue]
3736c     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
37370     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
37374     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
37378     AC 99 02 F6 |                 mov     hctwait, _8ms_
3737c     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
37380     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
37384     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
37388     BE 00 A0 FD |                 call    #calc_crc5
3738c     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
37390     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
37394     F7 AD C2 FA |                 rdbyte  total_data, pb
37398     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3739c     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
373a0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
373a4     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
373a8     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
373ac     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
373b0                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
373b0     9F 99 02 F6 |                 mov     hctwait, _500us_
373b4     EF 02 A0 FD |                 call    #poll_waitx
373b8     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
373bc     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
373c0     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
373c4     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
373c8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
373cc     CC 00 90 5D |         if_nz   jmp     #.done
373d0     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
373d4     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
373d8     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
373dc     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
373e0     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
373e4     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
373e8     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
373ec     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
373f0     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
373f4     A4 00 90 CD |         if_b    jmp     #.done
373f8     6C F0 BF FD |                 call    #hparse_con_desc
373fc     9C 00 90 FD |                 jmp     #.done
37400                 | 
37400                 | .other
37400     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
37404     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
37408     28 00 90 AD |         if_x1   jmp     #.reset_feature
3740c     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
37410     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
37414     1C 00 90 AD |         if_x1   jmp     #.reset_feature
37418     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3741c     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
37420     10 00 90 AD |         if_x1   jmp     #.reset_feature
37424     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
37428     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3742c     04 00 90 AD |         if_x1   jmp     #.reset_feature
37430     68 00 90 FD |                 jmp     #.done
37434                 | .reset_feature
37434     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
37438     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3743c     A0 02 A0 FD |                 call    #control_write
37440     58 00 90 FD |                 jmp     #.done
37444                 | .disconnect
37444                 | 
37444     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
37448     00 70 E3 F8 |                 getbyte htmp
3744c     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
37450     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
37454     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
37458     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3745c     00 76 06 A6 |         if_z    mov     kb_led_states, #0
37460     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
37464                 |         if EMUPAD_MAX_PLAYER > 0
37464                 |         end
37464                 |         if HAVE_MOUSE
37464     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
37468     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3746c     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
37470                 |         end
37470                 |         if HAVE_HIDPAD
37470     14 0A F0 FE |                 loc ptrb,#hidpad_report
37474     2D 71 03 F6 |                 mov htmp,hdev_port
37478     01 70 E7 F2 |                 cmpsub htmp,#1
3747c     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
37480     B8 F3 03 F1 |                 add ptrb,htmp
37484     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
37488     80 01 6C FC |                 wrlong #0,ptrb
3748c                 |         end
3748c                 | 
3748c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
37490     00 00 C4 F8 |                 setbyte #0
37494     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
37498     00 00 04 F6 |                 mov     0-0, #0
3749c                 | 
3749c                 | .done
3749c     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
374a0     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
374a4     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
374a8     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
374ac     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
374b0     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
374b4                 | 
374b4     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
374b8     27 EF 03 F6 |                 mov     pb, urx_buff_p
374bc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
374c0     55 02 A0 FD |                 call    #control_read
374c4     00 69 06 FB |                 rdlong  hub_port_status, ptra
374c8                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
374c8     2D 00 64 FD |                 ret
374cc                 | 
374cc                 | '------------------------------------------------------------------------------
374cc                 | ' Partially populated SETUP packets
374cc                 | '------------------------------------------------------------------------------
374cc     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
374cd     06          |                 byte    REQ_GET_DESC
374ce     00 01       |                 word    TYPE_DEVICE << 8
374d0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
374d2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
374d4     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
374d5     06          |                 byte    REQ_GET_DESC
374d6     00 02       |                 word    TYPE_CONFIG << 8
374d8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
374da     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
374dc     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
374dd     09          |                 byte    REQ_SET_CONFIG
374de     00 00       |                 word    0       ' Configuration value
374e0     00 00       |                 word    0       ' Zero
374e2     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
374e4     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
374e5     05          |                 byte    REQ_SET_ADDR
374e6     00 00       |                 word    0       ' Zero
374e8     00 00       |                 word    0       ' Zero
374ea     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
374ec                 | '------------------------------------------------------------------------------
374ec                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
374ec                 | ' wValue field dictates which protocol should be used.
374ec                 | '
374ec                 | ' When initialized, all devices default to report protocol. However the host
374ec                 | ' should not make any assumptions about the device state and should set the
374ec                 | ' desired protocol whenever initializing a device.
374ec                 | '------------------------------------------------------------------------------
374ec     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
374ed     0B          |                 byte    HID_SET_PROTO
374ee     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
374f0                 |                                                 ' (HID 1.11 Section 7.2.6).
374f0     00 00       |                 word    0               ' Interface index number.
374f2     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
374f4                 | '------------------------------------------------------------------------------
374f4     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
374f5     0A          |                 byte    HID_SET_IDLE
374f6     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
374f8                 |                                         ' reporting until a change is detected in the report data
374f8                 | 
374f8                 |                                         ' (HID 1.11 Section 7.2.4).
374f8     00 00       |                 word    0       ' Interface index number.
374fa     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
374fc     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
374fd     09          |                 byte    HID_SET_REPORT
374fe     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
37500                 |                                         ' (HID 1.11 Section 7.2.2).
37500     00 00       |                 word    0       ' Interface index number.
37502     00 00       |                 word    0       ' Size of the report, in bytes.
37504     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
37505     06          |                 byte    REQ_GET_DESC
37506     00 22       |                 word    TYPE_REPORT << 8
37508     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3750a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3750c                 | '------------------------------------------------------------------------------
3750c     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3750d     06          |                 byte    REQ_GET_DESC
3750e     00 29       |                 word    TYPE_HUB << 8
37510     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
37512     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
37514     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
37515     03          |                 byte    REQ_SET_FEATURE
37516     00 00       |                 word    0       ' port power
37518     01 00       |                 word    1       ' Port index number (1+)
3751a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3751c     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3751d     01          |                 byte    REQ_CLEAR_FEATURE
3751e     00 00       |                 word    0       ' port power
37520     01 00       |                 word    1       ' Port index number (1+)
37522     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
37524     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
37525     00          |                 byte    REQ_GET_STATUS
37526     00 00       |                 word    0
37528     01 00       |                 word    1       ' Port index number (1+)
3752a     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3752c                 | '------------------------------------------------------------------------------
3752c                 | if _HAVE_GAMEPAD
3752c     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
37530                 | ps3_command_buff
37530     00 00 00 00 
37534     00          |                 byte    $00, $00, $00, $00, $00
37535     00 00 00 00 
37539     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3753a     FF 27 10 00 
3753e     32          |                 byte    $FF, $27, $10, $00, $32
3753f     FF 27 10 00 
37543     32          |                 byte    $FF, $27, $10, $00, $32
37544     FF 27 10 00 
37548     32          |                 byte    $FF, $27, $10, $00, $32
37549     FF 27 10 00 
3754d     32          |                 byte    $FF, $27, $10, $00, $32
3754e     00 00 00 00 
37552     00          |                 byte    $00, $00, $00, $00, $00
37553     00 00 00 00 
37557     00          |                 byte    $00, $00, $00, $00, $00
37558     00 00 00 00 
3755c     00          |                 byte    $00, $00, $00, $00, $00
3755d     00 00 00    |                 byte    $00, $00, $00
37560                 | '------------------------------------------------------------------------------
37560     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
37563                 |                                         ' 0x01 All blinking
37563                 |                                         ' 0x02 1 flashes, then on
37563                 |                                         ' 0x03 2 flashes, then on
37563                 |                                         ' 0x04 3 flashes, then on
37563                 |                                         ' 0x05 4 flashes, then on
37563                 |                                         ' 0x06 1 on
37563                 |                                         ' 0x07 2 on
37563                 |                                         ' 0x08 3 on
37563                 |                                         ' 0x09 4 on
37563                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
37563                 |                                         ' 0x0B Blinking*
37563                 |                                         ' 0x0C Slow blinking*
37563                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
37563     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
37566     00          |                 byte    $00             ' Left rumble
37567     00          |                 byte    $00             ' Right rumble
37568     00 00 00    |                 byte    $00, $00, $00
3756b     00          | end
3756c                 | alignl
3756c                 | 
3756c                 | if HAVE_MOUSE
3756c     00 00 00 00 
37570     00 00 00 00 | mouse_limits long 0[2]
37574     00 00 00 00 | mouse_outptr long 0
37578                 | end
37578                 | 
37578                 | if KEYQUEUE_SIZE > 0
37578     00          | keyq_head byte 0
37579     00          | keyq_tail byte 0
3757a     00 00 00 00 
      ...             
37776     00 00 00 00 
3777a     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3777c                 | alignl
3777c                 | end
3777c                 | 
3777c                 | if EMUPAD_MAX_PLAYER > 0
3777c                 | emupad_rule_buffer
3777c                 | if EMUPAD_BUILTIN_RULES
3777c                 | file "padmap_builtin.dat"
3777c                 | end
3777c                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3777c                 | '' Default rule directly follows!
3777c                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3777c                 | end
3777c                 | 
3777c                 | '------------------------------------------------------------------------------
3777c                 | ' The USB data cache area gets zero-filled at every device disconnect
3777c                 | '------------------------------------------------------------------------------
3777c                 | usb_cache_start
3777c                 | 
3777c                 | ' HID descriptor and report buffers
3777c                 | if !!OVERLAP_MEMORY
3777c     00 00 00 00 
      ...             
37e74     00 00 00 00 
37e78     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
37e7c                 | end
37e7c     00 00 00 00 
37e80     00 00 00 00 | hkbd_report     byte    0[8]
37e84     00 00 00 00 | hkbd_led_rep    byte    0
37e88                 | alignl
37e88                 | 
37e88                 | if HAVE_HIDPAD
37e88     00 00 00 00 
      ...             
37f44     00 00 00 00 
37f48     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
37f4c                 | end
37f4c                 | 
37f4c                 | ' HUB descriptor
37f4c     00          | hub_descr       byte    0   ' bDescLength
37f4d     00          |                 byte    0   ' bDescriptorType
37f4e     00          |                 byte    0   ' bNbrPorts
37f4f     00 00       |                 word    0   ' wHubCharacteristics
37f51     00          |                 byte    0   ' bPwrOn2PwrGood
37f52     00          |                 byte    0   ' bHubContrCurrent
37f53     00          |                 byte    0   ' DeviceRemoveable
37f54     00          |                 byte    0   ' PortPwrCtrlMask
37f55                 | 
37f55                 | usb_cache_end
37f55                 | 
37f55                 | if HAVE_MOUSE
37f55     00 00 00 00 | mouse_xacc      long 0
37f59     00 00 00 00 | mouse_yacc      long 0
37f5d     00 00 00 00 | mouse_zacc      long 0
37f61     00          | mouse_bstate    byte 0
37f62     00          | mouse_lpending  byte 0
37f63     00          | mouse_rpending  byte 0
37f64     00          | mouse_mpending  byte 0
37f65     00          | mouse_lock      byte 0
37f66     00 00 00    |                 byte 0[3] ' padding
37f69                 | end
37f69                 | 
37f69     00 00 00 00 
      ...             
37fe1     00 00 00 00 
37fe5     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
37fe9     00 00 00 00 
37fed     00 00 00 00 
37ff1     00 00 00 00 
37ff5     00 00 00 00 
37ff9     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
37ffb     00 00 00 00 
      ...             
380f3     00 00 00 00 
380f7     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
380fb                 | 
380fb     00          | driver_cog      byte    0                       ' Current driver cog + 1
380fc                 | 	alignl
380fc                 | _audio096_spin2_dat_
380fc                 | 
380fc                 | audio       org     0
380fc                 | 
380fc     61 CB 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
38100     61 19 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
38104     61 25 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
38108     40 CA 65 FC |  wrlong mailbox2,#$40
3810c     01 EC 63 FD |             cogid   pa                   ' compute cogid
38110     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
38114     F6 CB 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
38118     E5 C8 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3811c                 | 
3811c     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
38120     0E 22 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
38124     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
38128     0F 22 06 FC |             wrpin   dac2,#right
3812c     0F 00 1E FC |             wxpin   #256,#right    
38130     41 9C 64 FD |             dirh    #left addpins 1
38134     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
38138     CC E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3813c     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
38140                 |             
38140                 | '---------------------------------------------------------------------------------        
38140                 | '----------------- The main loop -------------------------------------------------
38140                 | '---------------------------------------------------------------------------------
38140                 | 
38140     D5 AC 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
38144     10 00 90 CD |       if_c  jmp     #loop1
38148                 |   
38148     09 FE 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3814c     D5 FE 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
38150     D4 00 80 F1 |             sub     0-0,a40000000
38154     FD FF 6D FB |             djnz    cn,#p402
38158                 |     
38158     00 FE 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3815c     D7 00 02 F6 |             mov     ct,time1            ' with the lowest next sample time
38160     D8 00 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
38164     01 FE 05 C6 |     if_c    mov     cn,#1
38168     D9 00 3A F3 |             fle     ct,time3 wcz
3816c     02 FE 05 C6 |     if_c    mov     cn,#2     
38170     DA 00 3A F3 |             fle     ct,time4 wcz
38174     03 FE 05 C6 |     if_c    mov     cn,#3
38178     DB 00 3A F3 |             fle     ct,time5 wcz
3817c     04 FE 05 C6 |     if_c    mov     cn,#4
38180     DC 00 3A F3 |             fle     ct,time6 wcz
38184     05 FE 05 C6 |     if_c    mov     cn,#5
38188     DD 00 3A F3 |             fle     ct,time7 wcz
3818c     06 FE 05 C6 |     if_c    mov     cn,#6
38190     DE 00 3A F3 |             fle     ct,time8 wcz
38194     07 FE 05 C6 |     if_c    mov     cn,#7
38198                 | 
38198                 | 
38198                 | '----------------------------------------------------------------------------------
38198                 | '------------- Compute channel samples --------------------------------------------
38198                 | '----------------------------------------------------------------------------------
38198                 | 
38198                 | 
38198     FF BE 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3819c     06 BE 65 F0 |             shl     channeladd,#6
381a0     DF F0 03 F1 |             add     ptra,channeladd
381a4                 | 
381a4     28 16 64 FD |             setq    #11                        	' read parameters
381a8     00 D5 05 FB |             rdlong  pointer0,ptra
381ac                 |     	    
381ac     1F E2 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
381b0     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
381b4     F1 C2 31 F9 |             getword qq,command0,#0            	' get the new rate
381b8     4E C2 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
381bc     E1 C2 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
381c0     00 C2 0D F2 |             cmp     qq,#0 wz                         
381c4     4E 22 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
381c8     4E 20 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
381cc                 |             
381cc     1E E2 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
381d0     E5 C8 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
381d4     00 C8 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
381d8                 | 
381d8     EB 04 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
381dc     EB 06 3A F9 |             getword oldrs,sample0,#1
381e0     EF FA 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
381e4     EF F8 31 F9 |     	    getword avol0,volpan0,#0
381e8     F0 F6 39 F9 |             getword askip0,freqskip0,#1    	    
381ec     F0 F4 31 F9 |             getword afreq0,freqskip0,#0
381f0                 | 
381f0     D7 FE 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
381f4     00 02 02 F6 |             mov     dt0,0-0    
381f8     D6 02 82 F1 |             sub     dt0,time0
381fc                 |             
381fc     D7 FE 8D F9 |             altd    cn, #time1                ' add channel period to channel time
38200     FA 00 00 F1 |             add     0-0,afreq0  	
38204                 |             
38204                 | '---- envelopes
38204                 |             
38204     00 E6 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
38208     20 00 00 AF 
3820c     00 46 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
38210     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
38214                 | 
38214     FA 46 02 F6 |             mov     envs1,afreq0
38218     F4 46 02 FA |             mul     envs1,envspd0
3821c     23 E5 01 F1 |             add     envph0,envs1 
38220                 | 
38220     F2 42 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
38224     06 42 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
38228     21 45 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3822c     10 42 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
38230     F5 42 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
38234     F5 42 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
38238     00 44 06 36 |     if_ge   mov     envlo,#0
3823c     F5 E4 01 36 |     if_ge   mov     envph0,envlen0
38240     16 E4 65 30 |     if_ge   shl     envph0,#22
38244                 | 
38244     21 47 02 F6 |             mov     envs1,envhi			' get the phase acc
38248     01 46 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3824c     F3 46 02 F1 |             add     envs1,envptr0		' and add the pointer
38250     23 47 02 FB |             rdlong  envs1,envs1			' then read 2 entries
38254     23 49 3A F9 |             getword envs2,envs1,#1		' next value
38258     23 47 32 F9 |             getword envs1,envs1,#0		' current value
3825c     22 49 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
38260     22 45 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
38264     22 47 02 FA |             mul     envs1,envlo
38268     24 47 02 F1 |             add     envs1,envs2
3826c     12 46 46 F0 |             shr     envs1,#18			' normalize it to $4000
38270                 |             
38270     1B D8 0D F4 | p410        testb   sstart0, #27 wz
38274     1B C4 61 AD |     if_z    getrnd  spl
38278     58 00 90 AD |     if_z    jmp     #p406
3827c                 |  
3827c     FB D4 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
38280     EA 40 C2 F8 |             setbyte pointer00,pointer0,#0
38284     08 D4 45 F0 |             shr     pointer0,#8
38288                 |          
38288     1F D8 0D F4 |             testb   sstart0,#31 wz            
3828c     01 D4 65 A0 |     if_z    shl     pointer0,#1        
38290     1C D8 0D F4 |             testb   sstart0,#28 wz            
38294     01 D4 65 A0 |     if_z    shl     pointer0,#1        
38298                 |         
38298     EE D4 19 F2 |             cmp     pointer0,lend0 wcz
3829c     EE D4 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
382a0     ED D4 01 31 |     if_ge   add     pointer0,lstart0       
382a4                 |             
382a4     EA C2 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
382a8     EC C2 01 F1 |             add     qq,sstart0            
382ac                 | 
382ac     FF C9 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
382b0     E1 C4 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
382b4     14 01 B0 1D |     if_gt   call    #cache_read
382b8                 |          
382b8     1F D8 0D F4 |             testb   sstart0,#31 wz 
382bc     08 C4 65 50 |     if_nz   shl     spl,#8
382c0     08 D4 65 50 |     if_nz   shl     pointer0,#8
382c4     07 D4 65 A0 |     if_z    shl     pointer0,#7
382c8     1C D8 0D F4 |             testb   sstart0,#28 wz            
382cc     01 D4 45 A0 |     if_z    shr     pointer0,#1    
382d0     20 D5 C1 F8 | 	    setbyte pointer0,pointer00,#0       
382d4                 | 
382d4                 | 
382d4     23 C5 31 FA | p406        scas    spl,envs1			' apply envelope
382d8     00 C4 01 F6 |             mov     spl,0-0
382dc     FC C4 31 FA |             scas    spl,avol0                 	' apply volume
382e0     00 C4 01 F6 |             mov     spl,0-0
382e4                 | 
382e4     FD C4 31 FA |             scas    spl,apan0                 	' apply pan
382e8     00 08 02 F6 |             mov     ls0,0-0
382ec     20 00 00 FF 
382f0     00 C2 05 F6 |             mov     qq,##16384
382f4     FD C2 81 F1 |             sub     qq,apan0
382f8     E1 C4 31 FA |             scas    spl,qq
382fc     00 0A 02 F6 |             mov     rs0, 0-0
38300                 | 
38300     03 0F 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
38304     05 0F 02 F1 |             add     rs,rs0
38308     02 0D 82 F1 |             sub     ls,oldls
3830c     04 0D 02 F1 |             add     ls,ls0
38310                 |    
38310     05 D7 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
38314     04 D7 21 F9 |             setword sample0,ls0,#0
38318                 |             
38318     1E D8 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3831c     00 D4 05 A6 |     if_z    mov     pointer0, #0  		
38320     00 E4 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
38324                 |   '  if_z    mov     sample0,#0
38324     02 D9 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
38328     1D D8 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
3832c     04 00 00 AF 
38330     00 AE 05 A1 |     if_z    add     time1,##2048
38334     D7 B0 01 A6 |     if_z    mov     time2,time1
38338     02 D9 65 AC |     if_z    wrlong  sstart0,ptra[2]
3833c                 | 
3833c     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
38340     00 D5 65 FC |             wrlong  pointer0,ptra
38344     08 E5 65 FC |             wrlong  envph0,ptra[8]
38348     DF F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
3834c                 |                       
3834c     D6 FC 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
38350     FF C1 25 A7 |     if_z    decmod  front, #511          
38354                 |          
38354     06 05 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
38358     07 07 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
3835c     0F 04 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
38360     0F 06 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
38364                 | 	    
38364                 | 		    
38364     02 07 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
38368     09 11 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
3836c     03 13 02 F6 |             mov     newsample, oldrs       
38370                 | 
38370     D6 FC 01 F6 |             mov     oldt0,time0              ' update global time
38374     01 AD 01 F1 |             add     time0,dt0    
38378                 |                                      
38378     00 02 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
3837c     D8 FD 9F AD |     if_z    jmp     #loop1
38380     01 C3 01 F6 |             mov     qq,dt0
38384                 |   
38384     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
38388     00 C0 9D F2 |             cmpr    front, #0-0 wcz
3838c     F4 FF 9F AD |     if_e    jmp     #p301    
38390                 | 		
38390     00 18 0E F2 | 	    cmp     scbase,#0 wz
38394     20 00 90 AD |     if_z    jmp     #p302	   
38398                 |   
38398     3F 1E 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
3839c     0D 1D 02 C6 |     if_c    mov     scptr2,scptr
383a0     02 1C 66 C0 |     if_c    shl     scptr2,#2
383a4     0C 1D 02 C1 |     if_c    add     scptr2,scbase     
383a8     60 1C 66 FC |             wrlong  scptr2,#$60
383ac     0E 11 62 CC |     if_c    wrlong  oldsample,scptr2
383b0     01 00 00 CF 
383b4     7F 1A 06 C7 |     if_c    incmod  scptr,##639
383b8                 | 			    
383b8     E0 10 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
383bc     00 00 00 FF 
383c0     FF C1 05 F7 |             incmod  front, ##511
383c4     EF C3 6D FB |             djnz    qq,#p301
383c8                 |             
383c8     74 FD 9F FD |             jmp     #loop            'loop
383cc                 | 
383cc                 | '----------------------------------------------------------------------------------
383cc                 | '------------- This is the end of the main loop -----------------------------------
383cc                 | '----------------------------------------------------------------------------------
383cc                 | 
383cc                 | '----------------------------------------------------------------------------------
383cc                 | '------------- PSRAM cache ----------- --------------------------------------------
383cc                 | '----------------------------------------------------------------------------------
383cc                 | 
383cc                 | ' There are 8 cache pointers for 8 channels
383cc                 | ' if 24 higher bits of address=cache, then get a word from the cache
383cc                 | ' else load the cache from PSRAM, update the pointer, then read a sample
383cc                 | 
383cc                 | 
383cc     E1 3C E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
383d0                 |             
383d0     E1 3E 02 F6 | 	    mov     addrhi,qq		
383d4     08 3E 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
383d8     13 FF 95 F9 | 	    alts    cn,#cache1            
383dc     00 3E 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
383e0     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
383e4                 | 	
383e4     13 FF 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
383e8     1F 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
383ec     1F 37 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
383f0     08 36 66 F0 | 	    shl     cmd,#8
383f4     0B 36 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
383f8     FF 38 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
383fc     08 38 66 F0 |             shl     hubaddr,#8                  '
38400     12 39 02 F1 |             add     hubaddr,hubptr 
38404     00 3B 06 F6 |             mov     count,#256                  ' 256 bytes
38408     28 04 64 FD |             setq    #2                          ' write 3 longs
3840c     E4 36 62 FC |             wrlong  cmd, mailbox                ' run it
38410     E4 36 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
38414     FE 37 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
38418                 |             
38418                 | 	
38418     FF C2 01 F6 | p701	    mov     qq,cn			' cache hit
3841c     08 C2 65 F0 | 	    shl     qq,#8			' compute the cache start
38420     12 C3 01 F1 | 	    add     qq,hubptr
38424     1E C3 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
38428     E1 C4 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
3842c                 |           
3842c                 | 
3842c                 | '--------------------------------------------------------------------------
3842c                 | '------ Interrupt service -------------------------------------------------
3842c                 | '------ Output the sample, get the next one if exists ---------------------
3842c                 | '--------------------------------------------------------------------------
3842c                 | 
3842c     0E CC 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
38430     0F CE 25 FC |             wypin   rsample,#right       '4
38434     E0 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
38438     80 D1 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
3843c     FF F3 07 57 |     if_ne   incmod  ptrb,#511
38440     E8 CE 39 59 |     if_ne   getword rsample,lsnext,#1    '13
38444     E8 CC 31 59 |     if_ne   getword lsample,lsnext,#0    '15
38448                 |     
38448     F5 FF 3B FB |             reti1                        '17/19 
3844c                 |           
3844c                 | '---------------------------------------------------------------------------
3844c                 | '-------- End of interrupt -------------------------------------------------
3844c                 | '---------------------------------------------------------------------------    
3844c                 | 
3844c                 | 
3844c                 | '---------------------------------------------------------------------------
3844c                 | '------- Variables ---------------------------------------------------------
3844c                 | '---------------------------------------------------------------------------
3844c                 | 
3844c                 | ' constants
3844c                 | 
3844c     00 00 00 40 | a40000000   long $40000000
38450     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
38454                 | 
38454                 | ' Time variables
38454                 | 
38454     00 00 00 00 | time0       long 0    ' Global sample computing time
38458     01 00 00 00 | time1       long 1    ' Local channels time
3845c     02 00 00 00 | time2       long 2
38460     03 00 00 00 | time3       long 3
38464     04 00 00 00 | time4       long 4
38468     05 00 00 00 | time5       long 5
3846c     06 00 00 00 | time6       long 6
38470     07 00 00 00 | time7       long 7
38474     08 00 00 00 | time8       long 8
38478                 | 
38478     00 00 00 00 | channeladd long 0
3847c                 | 
3847c     00 00 00 00 | front       long 0
38480                 | 
38480                 | ' temporary variables 
38480     00 00 00 00 | qq          long 0
38484     00 00 00 00 | spl         long 0
38488     00 00 00 00 | zero        long 0
3848c     00 00 00 00 | mailbox     long 0
38490     00 00 00 00 | mailbox2 long 0
38494                 | 
38494                 | ' Interrupt ISR variables
38494                 | 
38494     00 00 00 00 | lsample     long 0
38498     00 00 00 00 | rsample     long 0
3849c     00 00 00 00 | lsnext      long 0
384a0     00 00 00 00 | rsnext      long 0 
384a4                 | 
384a4                 | ' channel parameter block
384a4                 | 
384a4     00 00 00 00 | pointer0    long 0     
384a8     00 00 00 00 | sample0     long 0
384ac     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
384b0     00 00 00 00 | lstart0     long 0
384b4     00 00 00 00 | lend0       long 0
384b8     00 00 00 00 | volpan0     long 0
384bc     00 00 00 00 | freqskip0   long 0
384c0     00 00 00 00 | command0    long 0
384c4     00 00 00 00 | envph0	    long 0
384c8     00 00 00 00 | envptr0	    long 0
384cc     00 00 00 00 | envspd0	    long 0
384d0     00 00 00 00 | envlen0	    long 0
384d4     00 00 00 00 | res5	    long 0
384d8     00 00 00 00 | res6	    long 0
384dc     00 00 00 00 | res7	    long 0
384e0     00 00 00 00 | res8	    long 0
384e4                 | 
384e4     00 00 00 00 | afreq0      long 0
384e8     00 00 00 00 | askip0      long 0
384ec     00 00 00 00 | avol0       long 0
384f0     00 00 00 00 | apan0       long 0
384f4                 | 
384f4     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
384f8     00 00 00 00 | cn          long 0
384fc     00 00 00 00 | ct          long 0
38500     00 00 00 00 | dt0         long 0
38504                 | 
38504                 | ' Samples
38504     00 00 00 00 | oldls       long 0
38508     00 00 00 00 | oldrs       long 0
3850c                 | 
3850c     00 00 00 00 | ls0         long 0
38510     00 00 00 00 | rs0         long 0
38514                 | 
38514     00 00 00 00 | ls          long 0    
38518     00 00 00 00 | rs          long 0
3851c                 | 
3851c     00 00 00 00 | oldsample   long 0
38520     00 00 00 00 | newsample   long 0
38524                 | 
38524     00 00 00 00 | nrsample    long 0
38528     00 00 00 00 | nlsample    long 0
3852c                 | 
3852c     00 00 00 00 | scbase long 0
38530     00 00 00 00 | scptr long 0
38534     00 00 00 00 | scptr2 long 0
38538     00 00 00 00 | scope long 0
3853c                 | 
3853c     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
38540     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
38544                 | 
38544     00 18 07 00 | hubptr      long $71800
38548     00 00 00 00 | cache1      long 0
3854c     00 00 00 00 | cache2      long 0
38550     00 00 00 00 | cache3      long 0
38554     00 00 00 00 | cache4      long 0
38558     00 00 00 00 | cache5      long 0
3855c     00 00 00 00 | cache6      long 0
38560     00 00 00 00 | cache7      long 0
38564     00 00 00 00 | cache8      long 0
38568                 | 
38568                 | 
38568     00 00 00 00 | cmd         long 0
3856c     00 00 00 00 | hubaddr     long 0
38570     00 01 00 00 | count       long 256
38574     00 00 00 00 | addrlo long 0
38578     00 00 00 00 | addrhi long 0
3857c     00 00 00 00 | pointer00 long 0
38580     00 00 00 00 | envhi long 0
38584     00 00 00 00 | envlo long 0
38588     00 00 00 00 | envs1 long 0
3858c     00 00 00 00 | envs2 long 0
38590     00 00 00 00 | noise0 long 0
38594     00 00 00 00 
38598     00 00 00 00 | null  			long 	0,0           ' for channel reset
3859c                 | 	alignl
3859c                 | __system__dat_
3859c     00 00 00 00 
385a0     00 00 00 00 | 	byte	$00[8]
385a4     03 00 00 00 
385a8     00 00 00 00 
385ac     00 00 00 00 
385b0     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
385b4     00 00 00 00 
      ...             
38840     00 00 00 00 
38844     00 00 00 00 | 	byte	$00[660]
38848     00 00 A0 08 | 	long	(138 {__system____root_opendir})<<20
3884c     00 00 B0 08 | 	long	(139 {__system____root_closedir})<<20
38850     00 00 C0 08 | 	long	(140 {__system____root_readdir})<<20
38854     00 00 D0 08 | 	long	(141 {__system____root_stat})<<20
38858     00 00 00 00 
3885c     00 00 00 00 
38860     00 00 00 00 
38864     00 00 00 00 
38868     00 00 00 00 
3886c     00 00 00 00 
38870     00 00 00 00 | 	byte	$00[28]
38874     DC 88 03 00 | 	long	@@@__system__dat_ + 832
38878     DF 88 03 00 | 	long	@@@__system__dat_ + 835
3887c     00 89 03 00 | 	long	@@@__system__dat_ + 868
38880     19 89 03 00 | 	long	@@@__system__dat_ + 893
38884     34 89 03 00 | 	long	@@@__system__dat_ + 920
38888     4E 89 03 00 | 	long	@@@__system__dat_ + 946
3888c     5E 89 03 00 | 	long	@@@__system__dat_ + 962
38890     70 89 03 00 | 	long	@@@__system__dat_ + 980
38894     82 89 03 00 | 	long	@@@__system__dat_ + 998
38898     94 89 03 00 | 	long	@@@__system__dat_ + 1016
3889c     A0 89 03 00 | 	long	@@@__system__dat_ + 1028
388a0     B1 89 03 00 | 	long	@@@__system__dat_ + 1045
388a4     C5 89 03 00 | 	long	@@@__system__dat_ + 1065
388a8     CF 89 03 00 | 	long	@@@__system__dat_ + 1075
388ac     DF 89 03 00 | 	long	@@@__system__dat_ + 1091
388b0     EE 89 03 00 | 	long	@@@__system__dat_ + 1106
388b4     04 8A 03 00 | 	long	@@@__system__dat_ + 1128
388b8     1D 8A 03 00 | 	long	@@@__system__dat_ + 1153
388bc     31 8A 03 00 | 	long	@@@__system__dat_ + 1173
388c0     3F 8A 03 00 | 	long	@@@__system__dat_ + 1187
388c4     53 8A 03 00 | 	long	@@@__system__dat_ + 1207
388c8     5F 8A 03 00 | 	long	@@@__system__dat_ + 1219
388cc     71 8A 03 00 | 	long	@@@__system__dat_ + 1237
388d0     89 8A 03 00 | 	long	@@@__system__dat_ + 1261
388d4     9B 8A 03 00 | 	long	@@@__system__dat_ + 1279
388d8     AE 8A 03 00 | 	long	@@@__system__dat_ + 1298
388dc     4F 4B 00 4E 
388e0     75 6D 65 72 
388e4     69 63 61 6C 
388e8     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
388ec     75 6D 65 6E 
388f0     74 20 6F 75 
388f4     74 20 6F 66 
388f8     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
388fc     61 69 6E 00 
38900     52 65 73 75 
38904     6C 74 20 6E 
38908     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3890c     65 70 72 65 
38910     73 65 6E 74 
38914     61 62 6C 65 
38918     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3891c     65 67 61 6C 
38920     20 6D 75 6C 
38924     74 69 62 79 
38928     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3892c     65 71 75 65 
38930     6E 63 65 00 
38934     4E 6F 20 73 
38938     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3893c     66 69 6C 65 
38940     20 6F 72 20 
38944     64 69 72 65 
38948     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3894c     79 00 42 61 
38950     64 20 66 69 
38954     6C 65 20 6E 
38958     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3895c     72 00 50 65 
38960     72 6D 69 73 
38964     73 69 6F 6E 
38968     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3896c     69 65 64 00 
38970     4E 6F 74 20 
38974     65 6E 6F 75 
38978     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3897c     65 6D 6F 72 
38980     79 00 54 65 
38984     6D 70 6F 72 
38988     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3898c     66 61 69 6C 
38990     75 72 65 00 
38994     46 69 6C 65 
38998     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3899c     73 74 73 00 
389a0     49 6E 76 61 
389a4     6C 69 64 20 
389a8     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
389ac     6D 65 6E 74 
389b0     00 54 6F 6F 
389b4     20 6D 61 6E 
389b8     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
389bc     65 6E 20 66 
389c0     69 6C 65 73 
389c4     00 49 2F 4F 
389c8     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
389cc     6F 72 00 4E 
389d0     6F 74 20 61 
389d4     20 64 69 72 
389d8     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
389dc     72 79 00 49 
389e0     73 20 61 20 
389e4     64 69 72 65 
389e8     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
389ec     79 00 52 65 
389f0     61 64 20 6F 
389f4     6E 6C 79 20 
389f8     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
389fc     20 73 79 73 
38a00     74 65 6D 00 
38a04     46 75 6E 63 
38a08     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
38a0c     20 6E 6F 74 
38a10     20 69 6D 70 
38a14     6C 65 6D 65 
38a18     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
38a1c     00 44 69 72 
38a20     65 63 74 6F 
38a24     72 79 20 6E 
38a28     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
38a2c     6D 70 74 79 
38a30     00 4E 61 6D 
38a34     65 20 74 6F 
38a38     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
38a3c     6E 67 00 44 
38a40     65 76 69 63 
38a44     65 20 6E 6F 
38a48     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
38a4c     65 6B 61 62 
38a50     6C 65 00 42 
38a54     61 64 20 61 
38a58     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
38a5c     73 73 00 42 
38a60     72 6F 6B 65 
38a64     6E 20 63 6F 
38a68     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
38a6c     74 69 6F 6E 
38a70     00 44 65 76 
38a74     69 63 65 20 
38a78     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
38a7c     65 73 6F 75 
38a80     72 63 65 20 
38a84     62 75 73 79 
38a88     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
38a8c     73 73 20 64 
38a90     65 76 69 63 
38a94     65 20 6C 69 
38a98     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
38a9c     6F 20 73 70 
38aa0     61 63 65 20 
38aa4     6F 6E 20 64 
38aa8     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
38aac     65 00 55 6E 
38ab0     6B 6E 6F 77 
38ab4     6E 20 65 72 
38ab8     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
38abc     00 00 00 00 
38ac0     00 00 00 00 | 	byte	$00[8]
38ac4     05 00 00 00 
38ac8     00 00 00 00 
38acc     00 00 00 00 
38ad0     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38ad4     00 00 00 00 | 	byte	$00, $00, $00, $00
38ad8     00 00 20 0A | 	long	(162 {__system___tx})<<20
38adc     00 00 30 0A | 	long	(163 {__system___rx})<<20
38ae0     00 00 00 00 | 	byte	$00, $00, $00, $00
38ae4     00 00 40 0A | 	long	(164 {__system___rxtxioctl_0640})<<20
38ae8     00 00 50 0A | 	long	(165 {__system____dummy_flush_0641})<<20
38aec     00 00 00 00 
38af0     00 00 00 00 | 	byte	$00[8]
38af4     01 00 00 00 
38af8     06 00 00 00 
38afc     00 00 00 00 
38b00     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38b04     00 00 00 00 
38b08     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
38b0c     00 00 20 0A | 	long	(162 {__system___tx})<<20
38b10     00 00 30 0A | 	long	(163 {__system___rx})<<20
38b14     00 00 00 00 | 	byte	$00, $00, $00, $00
38b18     00 00 40 0A | 	long	(164 {__system___rxtxioctl_0640})<<20
38b1c     00 00 50 0A | 	long	(165 {__system____dummy_flush_0641})<<20
38b20     00 00 00 00 
38b24     00 00 00 00 | 	byte	$00[8]
38b28     01 00 00 00 
38b2c     06 00 00 00 
38b30     00 00 00 00 
38b34     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38b38     00 00 00 00 
38b3c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
38b40     00 00 20 0A | 	long	(162 {__system___tx})<<20
38b44     00 00 30 0A | 	long	(163 {__system___rx})<<20
38b48     00 00 00 00 | 	byte	$00, $00, $00, $00
38b4c     00 00 40 0A | 	long	(164 {__system___rxtxioctl_0640})<<20
38b50     00 00 50 0A | 	long	(165 {__system____dummy_flush_0641})<<20
38b54     00 00 00 00 
      ...             
38cc4     00 00 00 00 
38cc8     00 00 00 00 | 	byte	$00[376]
38ccc     D0 8C 03 00 | 	long	@@@__system__dat_ + 1844
38cd0     00 00 00 00 
38cd4     00 00 00 00 
38cd8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38cdc                 | 	alignl
38cdc                 | _fatfs_cc_dat_
38cdc     C7 00 FC 00 
38ce0     E9 00 E2 00 
38ce4     E4 00 E0 00 
38ce8     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
38cec     EA 00 EB 00 
38cf0     E8 00 EF 00 
38cf4     EE 00 EC 00 
38cf8     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
38cfc     C9 00 E6 00 
38d00     C6 00 F4 00 
38d04     F6 00 F2 00 
38d08     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
38d0c     FF 00 D6 00 
38d10     DC 00 F8 00 
38d14     A3 00 D8 00 
38d18     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
38d1c     E1 00 ED 00 
38d20     F3 00 FA 00 
38d24     F1 00 D1 00 
38d28     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
38d2c     BF 00 AE 00 
38d30     AC 00 BD 00 
38d34     BC 00 A1 00 
38d38     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
38d3c     91 25 92 25 
38d40     93 25 02 25 
38d44     24 25 C1 00 
38d48     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
38d4c     A9 00 63 25 
38d50     51 25 57 25 
38d54     5D 25 A2 00 
38d58     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
38d5c     14 25 34 25 
38d60     2C 25 1C 25 
38d64     00 25 3C 25 
38d68     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
38d6c     5A 25 54 25 
38d70     69 25 66 25 
38d74     60 25 50 25 
38d78     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
38d7c     F0 00 D0 00 
38d80     CA 00 CB 00 
38d84     C8 00 31 01 
38d88     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
38d8c     CF 00 18 25 
38d90     0C 25 88 25 
38d94     84 25 A6 00 
38d98     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
38d9c     D3 00 DF 00 
38da0     D4 00 D2 00 
38da4     F5 00 D5 00 
38da8     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
38dac     DE 00 DA 00 
38db0     DB 00 D9 00 
38db4     FD 00 DD 00 
38db8     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
38dbc     AD 00 B1 00 
38dc0     17 20 BE 00 
38dc4     B6 00 A7 00 
38dc8     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
38dcc     B0 00 A8 00 
38dd0     B7 00 B9 00 
38dd4     B3 00 B2 00 
38dd8     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
38ddc     61 00 1A 03 
38de0     E0 00 17 03 
38de4     F8 00 07 03 
38de8     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
38dec     78 01 00 01 
38df0     30 01 32 01 
38df4     06 01 39 01 
38df8     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
38dfc     2E 01 79 01 
38e00     06 01 80 01 
38e04     4D 00 43 02 
38e08     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
38e0c     82 01 84 01 
38e10     84 01 86 01 
38e14     87 01 87 01 
38e18     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
38e1c     8B 01 8B 01 
38e20     8D 01 8E 01 
38e24     8F 01 90 01 
38e28     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
38e2c     93 01 94 01 
38e30     F6 01 96 01 
38e34     97 01 98 01 
38e38     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
38e3c     9B 01 9C 01 
38e40     9D 01 20 02 
38e44     9F 01 A0 01 
38e48     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
38e4c     A2 01 A4 01 
38e50     A4 01 A6 01 
38e54     A7 01 A7 01 
38e58     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
38e5c     AB 01 AC 01 
38e60     AC 01 AE 01 
38e64     AF 01 AF 01 
38e68     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
38e6c     B3 01 B3 01 
38e70     B5 01 B5 01 
38e74     B7 01 B8 01 
38e78     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
38e7c     BB 01 BC 01 
38e80     BC 01 BE 01 
38e84     F7 01 C0 01 
38e88     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
38e8c     C3 01 C4 01 
38e90     C5 01 C4 01 
38e94     C7 01 C8 01 
38e98     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
38e9c     CB 01 CA 01 
38ea0     CD 01 10 01 
38ea4     DD 01 01 00 
38ea8     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
38eac     12 01 F3 01 
38eb0     03 00 F1 01 
38eb4     F4 01 F4 01 
38eb8     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
38ebc     22 02 12 01 
38ec0     3A 02 09 00 
38ec4     65 2C 3B 02 
38ec8     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
38ecc     66 2C 3F 02 
38ed0     40 02 41 02 
38ed4     41 02 46 02 
38ed8     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
38edc     40 00 81 01 
38ee0     86 01 55 02 
38ee4     89 01 8A 01 
38ee8     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
38eec     5A 02 90 01 
38ef0     5C 02 5D 02 
38ef4     5E 02 5F 02 
38ef8     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
38efc     62 02 94 01 
38f00     64 02 65 02 
38f04     66 02 67 02 
38f08     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
38f0c     6A 02 62 2C 
38f10     6C 02 6D 02 
38f14     6E 02 9C 01 
38f18     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
38f1c     9D 01 73 02 
38f20     74 02 9F 01 
38f24     76 02 77 02 
38f28     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
38f2c     7A 02 7B 02 
38f30     7C 02 64 2C 
38f34     7E 02 7F 02 
38f38     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
38f3c     82 02 A9 01 
38f40     84 02 85 02 
38f44     86 02 87 02 
38f48     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
38f4c     B1 01 B2 01 
38f50     45 02 8D 02 
38f54     8E 02 8F 02 
38f58     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
38f5c     B7 01 7B 03 
38f60     03 00 FD 03 
38f64     FE 03 FF 03 
38f68     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
38f6c     86 03 88 03 
38f70     89 03 8A 03 
38f74     B1 03 11 03 
38f78     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
38f7c     A3 03 A3 03 
38f80     C4 03 08 03 
38f84     CC 03 03 00 
38f88     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
38f8c     8F 03 D8 03 
38f90     18 01 F2 03 
38f94     0A 00 F9 03 
38f98     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
38f9c     F5 03 F6 03 
38fa0     F7 03 F7 03 
38fa4     F9 03 FA 03 
38fa8     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
38fac     20 03 50 04 
38fb0     10 07 60 04 
38fb4     22 01 8A 04 
38fb8     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
38fbc     0E 01 CF 04 
38fc0     01 00 C0 04 
38fc4     D0 04 44 01 
38fc8     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
38fcc     00 00 7D 1D 
38fd0     01 00 63 2C 
38fd4     00 1E 96 01 
38fd8     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
38fdc     00 1F 08 06 
38fe0     10 1F 06 06 
38fe4     20 1F 08 06 
38fe8     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
38fec     40 1F 06 06 
38ff0     51 1F 07 00 
38ff4     59 1F 52 1F 
38ff8     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
38ffc     5D 1F 56 1F 
39000     5F 1F 60 1F 
39004     08 06 70 1F 
39008     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3900c     BB 1F C8 1F 
39010     C9 1F CA 1F 
39014     CB 1F DA 1F 
39018     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3901c     F9 1F EA 1F 
39020     EB 1F FA 1F 
39024     FB 1F 80 1F 
39028     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3902c     08 06 A0 1F 
39030     08 06 B0 1F 
39034     04 00 B8 1F 
39038     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3903c     BC 1F CC 1F 
39040     01 00 C3 1F 
39044     D0 1F 02 06 
39048     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3904c     E5 1F 01 00 
39050     EC 1F F3 1F 
39054     01 00 FC 1F 
39058     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3905c     32 21 70 21 
39060     10 02 84 21 
39064     01 00 83 21 
39068     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3906c     30 2C 2F 04 
39070     60 2C 02 01 
39074     67 2C 06 01 
39078     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3907c     80 2C 64 01 
39080     00 2D 26 08 
39084     41 FF 1A 03 
39088     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3908c     05 07 09 0E 
39090     10 12 14 16 
39094     18 1C 1E 43 
39098     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3909c     41 41 43 45 
390a0     45 45 49 49 
390a4     49 41 41 45 
390a8     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
390ac     4F 55 55 59 
390b0     4F 55 4F 9C 
390b4     4F 9E 9F 41 
390b8     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
390bc     A5 A6 A7 A8 
390c0     A9 AA AB AC 
390c4     AD AE AF B0 
390c8     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
390cc     41 41 41 B8 
390d0     B9 BA BB BC 
390d4     BD BE BF C0 
390d8     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
390dc     C5 41 41 C8 
390e0     C9 CA CB CC 
390e4     CD CE CF D1 
390e8     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
390ec     49 49 49 49 
390f0     D9 DA DB DC 
390f4     DD 49 DF 4F 
390f8     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
390fc     4F E6 E8 E8 
39100     55 55 55 59 
39104     59 EE EF F0 
39108     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3910c     F5 F6 F7 F8 
39110     F9 FA FB FC 
39114     FD FE FF 00 
39118     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3911c     00 00 00 00 | 	byte	$00, $00, $00, $00
39120     00 00 10 09 | 	long	(145 {_fatfs_cc_v_close})<<20
39124     00 00 20 09 | 	long	(146 {_fatfs_cc_v_read})<<20
39128     00 00 30 09 | 	long	(147 {_fatfs_cc_v_write})<<20
3912c     00 00 40 09 | 	long	(148 {_fatfs_cc_v_lseek})<<20
39130     00 00 50 09 | 	long	(149 {_fatfs_cc_v_ioctl})<<20
39134     00 00 60 0A | 	long	(166 {_fatfs_cc_v_flush})<<20
39138     00 00 00 00 
3913c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
39140     00 00 60 09 | 	long	(150 {_fatfs_cc_v_open})<<20
39144     00 00 70 09 | 	long	(151 {_fatfs_cc_v_creat})<<20
39148     00 00 80 09 | 	long	(152 {_fatfs_cc_v_opendir})<<20
3914c     00 00 90 09 | 	long	(153 {_fatfs_cc_v_closedir})<<20
39150     00 00 A0 09 | 	long	(154 {_fatfs_cc_v_readdir})<<20
39154     00 00 B0 09 | 	long	(155 {_fatfs_cc_v_stat})<<20
39158     00 00 C0 09 | 	long	(156 {_fatfs_cc_v_mkdir})<<20
3915c     00 00 D0 09 | 	long	(157 {_fatfs_cc_v_rmdir})<<20
39160     00 00 E0 09 | 	long	(158 {_fatfs_cc_v_remove})<<20
39164     00 00 F0 09 | 	long	(159 {_fatfs_cc_v_rename})<<20
39168     00 00 00 0A | 	long	(160 {_fatfs_cc_v_init})<<20
3916c     00 00 10 0A | 	long	(161 {_fatfs_cc_v_deinit})<<20
39170     FF FF FF FF 
39174     1F 00 00 00 
39178     1C 00 00 00 
3917c     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
39180     1E 00 00 00 
39184     1F 00 00 00 
39188     1E 00 00 00 
3918c     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
39190     1F 00 00 00 
39194     1E 00 00 00 
39198     1F 00 00 00 
3919c     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
391a0     1F 00 00 00 
391a4     00 00 00 00 
391a8     1F 00 00 00 
391ac     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
391b0     5A 00 00 00 
391b4     78 00 00 00 
391b8     97 00 00 00 
391bc     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
391c0     D4 00 00 00 
391c4     F3 00 00 00 
391c8     11 01 00 00 
391cc     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
391d0     4E 01 00 00 
391d4     6D 01 00 00 
391d8     FF FF FF FF 
391dc     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
391e0     00 00 00 00 
      ...             
391f8     00 00 00 00 
391fc     00 00 00 00 | 	byte	$00[32]
39200     1E 92 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
39204     22 92 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
39208     00 00 00 00 
3920c     00 00 00 00 
39210     00 00 00 00 
39214     00 00 00 00 
39218     00 00       | 	byte	$00[18]
3921a     3F 3F 3F 00 
3921e     55 43 54 00 
39222     55 43 54 00 
39226     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3922a     00 00 00 00 
3922e     00 00 00    | 	byte	$00[7]
39231     CA 9A 3B 00 
39235     00 00 00 01 
39239     01 01 01 01 
3923d     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
39241     91 11 11 11 
39245     11 01 01 01 
39249     01 01 01 01 
3924d     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
39251     01 01 01 01 
39255     01 01 01    | 	byte	$01[7]
39258     90 20 20 20 
3925c     20 20 20 20 
39260     20 20 20 20 
39264     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
39268     42 42 42 42 
3926c     42 42 42 42 
39270     42 42       | 	byte	$42[10]
39272     20 20 20 20 
39276     20 20 20    | 	byte	$20[7]
39279     44 44 44 44 
3927d     44 44       | 	byte	$44[6]
3927f     04 04 04 04 
39283     04 04 04 04 
39287     04 04 04 04 
3928b     04 04 04 04 
3928f     04 04 04 04 | 	byte	$04[20]
39293     20 20 20 20 
39297     20 20       | 	byte	$20[6]
39299     48 48 48 48 
3929d     48 48       | 	byte	$48[6]
3929f     08 08 08 08 
392a3     08 08 08 08 
392a7     08 08 08 08 
392ab     08 08 08 08 
392af     08 08 08 08 | 	byte	$08[20]
392b3     20 20 20 20 
392b7     01 00 00 00 
392bb     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
392bc                 | __methodtable__
392bc     84 87 01 00 | 	long	@_do_no_command
392c0     80 FE 00 00 | 	long	@_do_plus
392c4     6C 03 01 00 | 	long	@_do_minus
392c8     34 08 01 00 | 	long	@_do_or
392cc     4C 09 01 00 | 	long	@_do_mul
392d0     D8 0E 01 00 | 	long	@_do_fdiv
392d4     1C 07 01 00 | 	long	@_do_and
392d8     B8 0C 01 00 | 	long	@_do_div
392dc     A0 10 01 00 | 	long	@_do_mod
392e0     C0 12 01 00 | 	long	@_do_shl
392e4     D8 13 01 00 | 	long	@_do_shr
392e8     F0 14 01 00 | 	long	@_do_power
392ec     00 F2 00 00 | 	long	@_do_getvar
392f0     F0 A9 00 00 | 	long	@_do_push
392f4     00 EC 00 00 | 	long	@_do_assign
392f8     14 59 01 00 | 	long	@_do_cls
392fc     4C E4 00 00 | 	long	@_do_new
39300     8C 59 01 00 | 	long	@_do_plot
39304     5C 5A 01 00 | 	long	@_do_draw
39308     D0 63 01 00 | 	long	@_do_print
3930c     C8 5C 01 00 | 	long	@_do_circle
39310     50 5B 01 00 | 	long	@_do_fcircle
39314     40 5E 01 00 | 	long	@_do_box
39318     E8 61 01 00 | 	long	@_do_frame
3931c     54 59 01 00 | 	long	@_do_color
39320     C0 85 00 00 | 	long	@_do_for
39324     18 89 00 00 | 	long	@_do_next
39328     B0 E1 00 00 | 	long	@_do_list
3932c     7C BD 00 00 | 	long	@_do_run
39330     BC EA 00 00 | 	long	@_do_error
39334     2C E6 00 00 | 	long	@_do_fast_goto
39338     1C E7 00 00 | 	long	@_do_find_goto
3933c     2C E9 00 00 | 	long	@_do_slow_goto
39340     A0 83 01 00 | 	long	@_do_nothing
39344     34 B0 00 00 | 	long	@_test_csave
39348     98 B3 00 00 | 	long	@_do_save
3934c     94 B7 00 00 | 	long	@_do_load
39350     7C 72 01 00 | 	long	@_do_pinwrite
39354     18 7D 01 00 | 	long	@_do_waitms
39358     54 7E 01 00 | 	long	@_do_waitvbl
3935c     F4 81 01 00 | 	long	@_do_if
39360     D8 82 01 00 | 	long	@_do_else
39364     B8 16 01 00 | 	long	@_do_eq
39368     30 25 01 00 | 	long	@_do_ge
3936c     08 2A 01 00 | 	long	@_do_le
39370     90 1B 01 00 | 	long	@_do_gt
39374     68 20 01 00 | 	long	@_do_lt
39378     E0 2E 01 00 | 	long	@_do_ne
3937c     08 35 01 00 | 	long	@_do_rnd
39380     A4 83 01 00 | 	long	@_do_brun
39384     70 86 01 00 | 	long	@_do_beep
39388     84 7E 01 00 | 	long	@_do_dir
3938c     98 68 01 00 | 	long	@_do_paper
39390     20 69 01 00 | 	long	@_do_ink
39394     BC 69 01 00 | 	long	@_do_font
39398     38 6A 01 00 | 	long	@_do_mode
3939c     DC 85 01 00 | 	long	@_do_mouse
393a0     AC 58 01 00 | 	long	@_do_gettime
393a4     10 86 01 00 | 	long	@_do_cursor
393a8     44 86 01 00 | 	long	@_do_click
393ac     38 56 01 00 | 	long	@_do_mousex
393b0     7C 56 01 00 | 	long	@_do_mousey
393b4     04 57 01 00 | 	long	@_do_mousek
393b8     C0 56 01 00 | 	long	@_do_mousew
393bc     DC 37 01 00 | 	long	@_do_sin
393c0     80 4D 01 00 | 	long	@_do_stick
393c4     04 4F 01 00 | 	long	@_do_strig
393c8     4C 55 01 00 | 	long	@_do_sprite
393cc     D8 51 01 00 | 	long	@_do_defsprite
393d0     88 50 01 00 | 	long	@_do_getpixel
393d4     60 7E 01 00 | 	long	@_do_waitclock
393d8     90 87 01 00 | 	long	@_do_negative
393dc     48 57 01 00 | 	long	@_do_rdpin
393e0     B4 57 01 00 | 	long	@_do_rqpin
393e4     28 58 01 00 | 	long	@_do_pinread
393e8     14 75 01 00 | 	long	@_do_wrpin
393ec     94 75 01 00 | 	long	@_do_wxpin
393f0     14 76 01 00 | 	long	@_do_wypin
393f4     04 73 01 00 | 	long	@_do_pinfloat
393f8     44 73 01 00 | 	long	@_do_pinlo
393fc     84 73 01 00 | 	long	@_do_pinhi
39400     04 74 01 00 | 	long	@_do_pinstart
39404     C4 73 01 00 | 	long	@_do_pintoggle
39408     94 76 01 00 | 	long	@_do_position
3940c     38 47 01 00 | 	long	@_do_cos
39410     58 48 01 00 | 	long	@_do_tan
39414     7C 4B 01 00 | 	long	@_do_atn
39418     64 49 01 00 | 	long	@_do_asin
3941c     70 4A 01 00 | 	long	@_do_acos
39420     90 4C 01 00 | 	long	@_do_sqr
39424     28 60 01 00 | 	long	@_do_fill
39428     C4 D8 00 00 | 	long	@_do_defsnd
3942c     C8 C0 00 00 | 	long	@_do_defenv
39430     FC 82 01 00 | 	long	@_do_rad
39434     24 83 01 00 | 	long	@_do_deg
39438     4C 83 01 00 | 	long	@_do_int
3943c     5C CD 00 00 | 	long	@_do_play
39440     DC 6F 01 00 | 	long	@_do_setdelay
39444     34 6F 01 00 | 	long	@_do_setenv
39448     84 70 01 00 | 	long	@_do_setlen
3944c     D4 71 01 00 | 	long	@_do_setpan
39450     2C 71 01 00 | 	long	@_do_setvol
39454     E4 6D 01 00 | 	long	@_do_setwave
39458     8C 6E 01 00 | 	long	@_do_setsustain
3945c     2C D8 00 00 | 	long	@_do_release
39460     D0 36 01 00 | 	long	@_do_getenvsustain
39464     1C 77 01 00 | 	long	@_do_poke
39468     F4 77 01 00 | 	long	@_do_dpoke
3946c     CC 78 01 00 | 	long	@_do_lpoke
39470     A4 79 01 00 | 	long	@_do_peek
39474     54 7A 01 00 | 	long	@_do_dpeek
39478     00 7B 01 00 | 	long	@_do_lpeek
3947c     10 7C 01 00 | 	long	@_do_adr
39480     AC 7B 01 00 | 	long	@_do_fre
39484     14 7C 01 00 | 	long	@_do_getnotevalue
39488     B8 F7 00 00 | 	long	@_do_getaddr
3948c     A8 FB 00 00 | 	long	@_do_inkey
39490     40 88 01 00 | 	long	@_do_abs
39494     78 44 01 00 | 	long	@_do_hex
39498     D8 45 01 00 | 	long	@_do_bin
3949c     74 41 01 00 | 	long	@_do_val
394a0     78 40 01 00 | 	long	@_do_chr
394a4     B4 3D 01 00 | 	long	@_do_asc
394a8     30 3C 01 00 | 	long	@_do_left
394ac     AC 3A 01 00 | 	long	@_do_right
394b0     E8 38 01 00 | 	long	@_do_mid
394b4     0C 3F 01 00 | 	long	@_do_len
394b8     A8 84 00 00 | 	long	@_do_gosub
394bc     34 88 00 00 | 	long	@_do_return
394c0     48 BD 00 00 | 	long	@_do_end
394c4     E0 88 00 00 | 	long	@_do_pop
394c8     40 D5 01 00 | 	long	@_hg010b_spin2_putchar
394cc     BC DF 02 00 | 	long	@__struct___bas_wrap_sender_tx
394d0     00 E0 02 00 | 	long	@__struct___bas_wrap_sender_rx
394d4     48 E0 02 00 | 	long	@__struct___bas_wrap_sender_close
394d8     EC DE 02 00 | 	long	@__struct__s_vfs_file_t_putchar
394dc     5C DF 02 00 | 	long	@__struct__s_vfs_file_t_getchar
394e0     A4 DE 02 00 | 	long	@___strs_cl_pfunc
394e4     00 3E 02 00 | 	long	@__system____root_opendir
394e8     9C 3E 02 00 | 	long	@__system____root_closedir
394ec     18 3E 02 00 | 	long	@__system____root_readdir
394f0     A4 3E 02 00 | 	long	@__system____root_stat
394f4     2C 37 02 00 | 	long	@__system____default_putc
394f8     B0 36 02 00 | 	long	@__system____default_getc
394fc     D4 37 02 00 | 	long	@__system____default_flush
39500     A8 C9 02 00 | 	long	@_fatfs_cc_v_close
39504     C4 CD 02 00 | 	long	@_fatfs_cc_v_read
39508     D8 CE 02 00 | 	long	@_fatfs_cc_v_write
3950c     B8 CF 02 00 | 	long	@_fatfs_cc_v_lseek
39510     40 D0 02 00 | 	long	@_fatfs_cc_v_ioctl
39514     94 D0 02 00 | 	long	@_fatfs_cc_v_open
39518     0C C9 02 00 | 	long	@_fatfs_cc_v_creat
3951c     EC C9 02 00 | 	long	@_fatfs_cc_v_opendir
39520     60 CA 02 00 | 	long	@_fatfs_cc_v_closedir
39524     A0 CA 02 00 | 	long	@_fatfs_cc_v_readdir
39528     D4 CB 02 00 | 	long	@_fatfs_cc_v_stat
3952c     54 D0 02 00 | 	long	@_fatfs_cc_v_mkdir
39530     74 D0 02 00 | 	long	@_fatfs_cc_v_rmdir
39534     64 D0 02 00 | 	long	@_fatfs_cc_v_remove
39538     84 D0 02 00 | 	long	@_fatfs_cc_v_rename
3953c     A4 D1 02 00 | 	long	@_fatfs_cc_v_init
39540     AC D1 02 00 | 	long	@_fatfs_cc_v_deinit
39544     0C EC 01 00 | 	long	@__system___tx
39548     4C EC 01 00 | 	long	@__system___rx
3954c     10 4A 02 00 | 	long	@__system___rxtxioctl_0640
39550     68 4A 02 00 | 	long	@__system____dummy_flush_0641
39554     74 D1 02 00 | 	long	@_fatfs_cc_v_flush
39558                 | __heap_base
39558     00 00 00 00 
      ...             
68358     00 00 00 00 
6835c     00 00 00 00 | 	long	0[48002]
68360                 | objmem
68360     00 00 00 00 
      ...             
737c4     00 00 00 00 
737c8     00 00 00 00 | 	long	0[11547]
737cc                 | stackspace
737cc     00 00 00 00 | 	long	0[1]
737d0 100             | 	org	COG_BSS_START
737d0 100             | _var01
737d0 100             | 	res	1
737d0 101             | _var02
737d0 101             | 	res	1
737d0 102             | _var03
737d0 102             | 	res	1
737d0 103             | _var04
737d0 103             | 	res	1
737d0 104             | _var05
737d0 104             | 	res	1
737d0 105             | _var06
737d0 105             | 	res	1
737d0 106             | _var07
737d0 106             | 	res	1
737d0 107             | _var08
737d0 107             | 	res	1
737d0 108             | _var09
737d0 108             | 	res	1
737d0 109             | arg01
737d0 109             | 	res	1
737d0 10a             | arg02
737d0 10a             | 	res	1
737d0 10b             | arg03
737d0 10b             | 	res	1
737d0 10c             | arg04
737d0 10c             | 	res	1
737d0 10d             | arg05
737d0 10d             | 	res	1
737d0 10e             | arg06
737d0 10e             | 	res	1
737d0 10f             | local01
737d0 10f             | 	res	1
737d0 110             | local02
737d0 110             | 	res	1
737d0 111             | local03
737d0 111             | 	res	1
737d0 112             | local04
737d0 112             | 	res	1
737d0 113             | local05
737d0 113             | 	res	1
737d0 114             | local06
737d0 114             | 	res	1
737d0 115             | local07
737d0 115             | 	res	1
737d0 116             | local08
737d0 116             | 	res	1
737d0 117             | local09
737d0 117             | 	res	1
737d0 118             | local10
737d0 118             | 	res	1
737d0 119             | local11
737d0 119             | 	res	1
737d0 11a             | local12
737d0 11a             | 	res	1
737d0 11b             | local13
737d0 11b             | 	res	1
737d0 11c             | local14
737d0 11c             | 	res	1
737d0 11d             | local15
737d0 11d             | 	res	1
737d0 11e             | local16
737d0 11e             | 	res	1
737d0 11f             | local17
737d0 11f             | 	res	1
737d0 120             | local18
737d0 120             | 	res	1
737d0 121             | local19
737d0 121             | 	res	1
737d0 122             | local20
737d0 122             | 	res	1
737d0 123             | local21
737d0 123             | 	res	1
737d0 124             | local22
737d0 124             | 	res	1
737d0 125             | local23
737d0 125             | 	res	1
737d0 126             | local24
737d0 126             | 	res	1
737d0 127             | local25
737d0 127             | 	res	1
737d0 128             | local26
737d0 128             | 	res	1
737d0 129             | local27
737d0 129             | 	res	1
737d0 12a             | local28
737d0 12a             | 	res	1
737d0 12b             | local29
737d0 12b             | 	res	1
737d0 12c             | local30
737d0 12c             | 	res	1
737d0 12d             | local31
737d0 12d             | 	res	1
737d0 12e             | local32
737d0 12e             | 	res	1
737d0 12f             | local33
737d0 12f             | 	res	1
737d0 130             | local34
737d0 130             | 	res	1
737d0 131             | local35
737d0 131             | 	res	1
737d0 132             | muldiva_
737d0 132             | 	res	1
737d0 133             | muldivb_
737d0 133             | 	res	1
737d0 134             | 	fit	480
737d0 134             | 
